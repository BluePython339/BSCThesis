sub_401040
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
retn
mov al [ ecx - 0x1 ]
test al al
je r-xdata
dec ecx
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_4010d0
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
retn
mov al [ ecx - 0x1 ]
test al al
je r-xdata
dec ecx
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_401160
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
retn
mov al [ ecx - 0x1 ]
test al al
je r-xdata
dec ecx
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_4011f0
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
retn
mov al [ ecx - 0x1 ]
test al al
je r-xdata
dec ecx
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_401280
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
retn
mov al [ ecx - 0x1 ]
test al al
je r-xdata
dec ecx
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_401310
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
retn
mov al [ ecx - 0x1 ]
test al al
je r-xdata
dec ecx
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_4013a0
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
retn
mov al [ ecx - 0x1 ]
test al al
je r-xdata
dec ecx
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_401430
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
retn
mov al [ ecx - 0x1 ]
test al al
je r-xdata
dec ecx
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_4014c0
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
retn
mov al [ ecx - 0x1 ]
test al al
je r-xdata
dec ecx
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_401550
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
retn
mov al [ ecx - 0x1 ]
test al al
je r-xdata
dec ecx
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_4015e0
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
retn
mov al [ ecx - 0x1 ]
test al al
je r-xdata
dec ecx
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_401640
push ecx
mov al [ esp + 0x3 ]
push ebx
push esi
push edi
mov [ rw-data ] al
mov edi rw-data
or ecx 0xffffffff
xor eax eax
xor edx edx
xor esi esi
[ edi ]
not ecx
dec ecx
mov [ rw-data ] edx
mov ebx ecx
mov [ rw-data ] edx
cmp ebx 0xfffffffd
mov [ rw-data ] esi
jbe r-xdata
test edx edx
je r-xdata
call [ std::_Xlen@IAT ]
mov edx [ rw-data ]
mov esi [ rw-data ]
test ebx ebx
jne r-xdata
mov al [ edx - 0x1 ]
test al al
je r-xdata
cmp esi 0x1f
ja r-xdata
push 0x1
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
pop edi
pop esi
pop ebx
pop ecx
retn
cmp al 0xff
je r-xdata
push 0x1
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
cmp esi ebx
jae r-xdata
test ebx ebx
jne r-xdata
mov ecx ebx
mov edi edx
mov edx ecx
mov esi rw-data
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax [ rw-data ]
mov [ rw-data ] ebx
pop edi
pop esi
mov [ eax + ebx ] 0x0
pop ebx
pop ecx
retn
push ebx
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Copy@IAT ]
mov edx [ rw-data ]
dec al
push ebx
mov ecx rw-data
mov [ edx - 0x1 ] al
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
pop edi
pop esi
pop ebx
pop ecx
retn
sub_401730
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
retn
mov al [ ecx - 0x1 ]
test al al
je r-xdata
dec ecx
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_401790
push ecx
mov al [ esp + 0x3 ]
push ebx
push esi
push edi
mov [ rw-data ] al
mov edi rw-data
or ecx 0xffffffff
xor eax eax
xor edx edx
xor esi esi
[ edi ]
not ecx
dec ecx
mov [ rw-data ] edx
mov ebx ecx
mov [ rw-data ] edx
cmp ebx 0xfffffffd
mov [ rw-data ] esi
jbe r-xdata
test edx edx
je r-xdata
call [ std::_Xlen@IAT ]
mov edx [ rw-data ]
mov esi [ rw-data ]
test ebx ebx
jne r-xdata
mov al [ edx - 0x1 ]
test al al
je r-xdata
cmp esi 0x1f
ja r-xdata
push 0x1
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
pop edi
pop esi
pop ebx
pop ecx
retn
cmp al 0xff
je r-xdata
push 0x1
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
cmp esi ebx
jae r-xdata
test ebx ebx
jne r-xdata
mov ecx ebx
mov edi edx
mov edx ecx
mov esi rw-data
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax [ rw-data ]
mov [ rw-data ] ebx
pop edi
pop esi
mov [ eax + ebx ] 0x0
pop ebx
pop ecx
retn
push ebx
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Copy@IAT ]
mov edx [ rw-data ]
dec al
push ebx
mov ecx rw-data
mov [ edx - 0x1 ] al
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
pop edi
pop esi
pop ebx
pop ecx
retn
sub_401880
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
retn
mov al [ ecx - 0x1 ]
test al al
je r-xdata
dec ecx
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_401910
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
retn
mov al [ ecx - 0x1 ]
test al al
je r-xdata
dec ecx
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_4019e0
push ebx
push esi
mov esi [ esp + 0xc ]
mov ebx esi
cmp [ esi ] 0x0
je r-xdata
mov eax [ esp + 0x10 ]
push ebx
test eax eax
jne r-xdata
push edi
mov edi [ _mbsinc@IAT ]
push eax
call [ lstrcpyA@IAT ]
pop esi
xor eax eax
pop ebx
retn
call [ lstrlenA@IAT ]
pop esi
inc eax
pop ebx
retn
push esi
call edi
add esp 0x4
mov ebx eax
cmp al 0x2f
je r-xdata
mov al [ esi ]
cmp al 0x5c
je r-xdata
pop edi
cmp al 0x3a
jne r-xdata
push esi
call edi
mov esi eax
add esp 0x4
cmp [ esi ] 0x0
jne r-xdata
sub_401a40
sub esp 0x18
push ebx
push ebp
push esi
push edi
push rw-data
push 0x65
push 0x0
call [ FindResourceA@IAT ]
mov esi eax
test esi esi
jne r-xdata
push esi
push 0x0
call [ LoadResource@IAT ]
push esi
push 0x0
mov edi eax
call [ SizeofResource@IAT ]
push edi
mov ebx eax
call [ LockResource@IAT ]
mov edi [ esp + 0x2c ]
push rw-data
push edi
mov ebp eax
call [ fopen@IAT ]
mov esi eax
add esp 0x8
test esi esi
jne r-xdata
pop edi
pop esi
pop ebp
xor al al
pop ebx
add esp 0x18
retn
push esi
push ebx
push 0x1
push ebp
call [ fwrite@IAT ]
push esi
call [ fclose@IAT ]
push edi
call sub_403be0
mov eax [ esp + 0x48 ]
add esp 0x18
mov ebx [ CreateFileA@IAT ]
push 0x0
push 0x80
push 0x3
push 0x0
push 0x1
push 0x80000000
push eax
call ebx
mov esi eax
cmp esi 0xffffffff
jne r-xdata
call [ GetLastError@IAT ]
push eax
push rw-data
call [ printf@IAT ]
add esp 0x8
xor al al
pop edi
pop esi
pop ebp
pop ebx
add esp 0x18
retn
push 0x0
push 0x80
push 0x3
push 0x0
push 0x0
push 0x40000000
push edi
call ebx
mov edi eax
cmp edi 0xffffffff
jne r-xdata
pop edi
pop esi
pop ebp
xor al al
pop ebx
add esp 0x18
retn
lea ecx [ esp + 0x10 ]
lea edx [ esp + 0x18 ]
push ecx
lea eax [ esp + 0x24 ]
push edx
push eax
push esi
call [ GetFileTime@IAT ]
lea ecx [ esp + 0x10 ]
lea edx [ esp + 0x18 ]
push ecx
lea eax [ esp + 0x24 ]
push edx
push eax
push edi
call [ SetFileTime@IAT ]
push esi
mov esi [ CloseHandle@IAT ]
call esi
push edi
call esi
pop edi
pop esi
pop ebp
mov al 0x1
pop ebx
add esp 0x18
retn
call [ GetLastError@IAT ]
push eax
call sub_402420
add esp 0x4
xor al al
pop edi
pop esi
pop ebp
pop ebx
add esp 0x18
retn
sub_401b80
sub esp 0x148
push ebx
push ebp
push esi
push edi
mov ecx 0x40
xor eax eax
lea edi [ esp + 0x55 ]
mov [ esp + 0x54 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0xf
xor eax eax
lea edi [ esp + 0x15 ]
mov [ esp + 0x14 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ esp + 0x54 ]
push 0x104
xor ebx ebx
push eax
push ebx
call [ GetModuleFileNameA@IAT ]
lea ecx [ esp + 0x14 ]
lea edx [ esp + 0x54 ]
push ecx
push edx
call sub_4019e0
mov eax [ esp + 0x168 ]
mov ecx [ esp + 0x164 ]
push eax
push ecx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
call sub_402be0
add esp 0x10
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x148
retn
mov ebp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
mov ecx 0x33
xor eax eax
mov edi rw-data
[ edi ]
mov edi [ rw-data ]
cmp edi ebx
jne r-xdata
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov edx ecx
mov esi edi
mov edi rw-data
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edi [ rw-data ]
cmp edi ebx
jne r-xdata
mov edi ebp
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov edx [ rw-data ]
mov eax ecx
mov esi edi
mov edi rw-data
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
cmp edx ebx
[ edi ] [ esi ]
mov edi ebp
je r-xdata
mov edi ebp
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi rw-data
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
cmp edx ebx
[ edi ] [ esi ]
jne r-xdata
mov edi edx
mov edi edx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov edx ecx
mov esi edi
mov edi rw-data
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edi [ rw-data ]
cmp edi ebx
jne r-xdata
mov edx ebp
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi rw-data
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
call sub_402470
test al al
jne r-xdata
mov edi ebp
cmp [ rw-data ] ebx
je r-xdata
push rw-data
call [ printf@IAT ]
add esp 0x4
cmp [ rw-data ] ebx
je r-xdata
cmp [ rw-data ] ebx
je r-xdata
mov cl [ rw-data ]
sub esp 0x10
mov ebp esp
mov [ esp + 0x20 ] esp
mov [ ebp ] cl
mov [ ebp + 0x4 ] ebx
mov [ ebp + 0x8 ] ebx
mov [ ebp + 0xc ] ebx
mov edx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov eax [ rw-data ]
mov ebx eax
mov esi [ edx ]
cmp esi ebx
jae r-xdata
cmp ebp rw-data
jne r-xdata
mov ebx esi
test ebx ebx
jbe r-xdata
test ebx ebx
jbe r-xdata
push 0x1
push ebx
mov ecx ebp
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Grow@IAT ]
test al al
je r-xdata
cmp ebx eax
jne r-xdata
mov ecx ebp
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Split@IAT ]
mov eax [ ebp + 0x8 ]
sub eax ebx
cmp eax esi
jae r-xdata
call [ std::_Xran@IAT ]
call sub_403ea0
add esp 0x10
mov esi [ rw-data ]
test esi esi
jne r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
test esi esi
jbe r-xdata
mov esi eax
mov edi [ ebp + 0x4 ]
mov ecx ebx
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ ebp + 0x4 ]
mov [ ebp + 0x8 ] ebx
mov [ ecx + ebx ] 0x0
mov esi [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
cmp [ eax - 0x1 ] 0xfe
jae r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
mov ecx ebp
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Split@IAT ]
jmp r-xdata
mov ecx [ ebp + 0x4 ]
sub eax esi
add ebx ecx
push eax
lea edx [ ebx + esi ]
push edx
push ebx
call [ memmove@IAT ]
mov edi [ ebp + 0x8 ]
add esp 0xc
sub edi esi
mov ecx ebp
push 0x0
push edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Grow@IAT ]
test al al
je r-xdata
push 0x1
mov ecx ebp
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov eax [ rw-data ]
test eax eax
jne r-xdata
push edi
mov ecx ebp
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Eos@IAT ]
mov [ ebp + 0x4 ] eax
mov ecx [ rw-data ]
mov [ ebp + 0x8 ] ecx
mov edx [ rw-data ]
mov [ ebp + 0xc ] edx
mov cl [ eax - 0x1 ]
inc cl
mov [ eax - 0x1 ] cl
jmp r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
sub_401e70
sub esp 0x29c
push ebx
push ebp
push esi
push edi
xor edx edx
mov ecx 0x3f
xor eax eax
lea edi [ esp + 0xad ]
mov [ esp + 0xac ] dl
mov [ esp + 0x1ac ] dl
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x3f
xor eax eax
lea edi [ esp + 0x1ad ]
mov esi [ malloc@IAT ]
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x7d
xor eax eax
mov edi rw-data
push 0x24
[ edi ]
mov [ esp + 0x14 ] edx
mov [ esp + 0x24 ] edx
call esi
mov ebx eax
mov ecx 0x9
xor eax eax
mov edi ebx
[ edi ]
push 0x24
call esi
mov ebp eax
mov ecx 0x9
xor eax eax
mov edi ebp
[ edi ]
mov eax [ rw-data ]
add esp 0x8
test eax eax
mov [ esp + 0x28 ] 0x7
mov [ esp + 0x24 ] 0x2
je r-xdata
lea eax [ esp + 0x10 ]
xor esi esi
push eax
push 0x1
push esi
push rw-data
push 0x80000002
call [ RegOpenKeyExA@IAT ]
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov ecx [ esp + 0x1c ]
push ecx
call [ CloseServiceHandle@IAT ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x29c
retn
mov esi [ std::operator<<@IAT ]
push eax
lea eax [ esp + 0x30 ]
push rw-data
push eax
call [ sprintf@IAT ]
add esp 0xc
lea ecx [ esp + 0x10 ]
lea edx [ esp + 0x2c ]
lea esi [ esp + 0x2c ]
push ecx
push 0x80000002
push edx
call [ RegConnectRegistryA@IAT ]
mov ecx [ esp + 0x10 ]
lea eax [ esp + 0x10 ]
push eax
push 0x1
push 0x0
push rw-data
push ecx
call [ RegOpenKeyExA@IAT ]
test eax eax
je r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
mov al [ esp + 0x2b0 ]
test al al
je r-xdata
mov eax [ esp + 0x14 ]
mov ecx [ std::cout@IAT ]
push eax
push rw-data
push ecx
call esi
add esp 0x8
push eax
call esi
push eax
call [ std::endl@IAT ]
add esp 0xc
call [ GetLastError@IAT ]
push eax
call sub_402420
add esp 0x4
jmp r-xdata
mov edx [ esp + 0x10 ]
push rw-data
lea ecx [ esp + 0x2c ]
push rw-data
push ecx
push 0x0
push rw-data
push edx
call [ RegQueryValueExA@IAT ]
mov eax [ esp + 0x10 ]
push eax
call [ RegCloseKey@IAT ]
push 0xf003f
push 0x0
push esi
call [ OpenSCManagerA@IAT ]
mov [ esp + 0x1c ] eax
mov al [ rw-data ]
test al al
mov [ esp + 0x14 ] rw-data
je r-xdata
push rw-data
call [ printf@IAT ]
mov edx [ esp + 0x14 ]
add esp 0x4
push edx
call [ RegCloseKey@IAT ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x29c
retn
mov eax [ esp + 0x14 ]
push 0x0
push eax
call [ strchr@IAT ]
mov cl [ eax + 0x1 ]
add esp 0x8
inc eax
test cl cl
mov [ esp + 0x14 ] eax
jne r-xdata
mov edx [ esp + 0x14 ]
mov eax [ std::cout@IAT ]
push edx
push rw-data
push eax
call esi
add esp 0x8
push eax
call esi
push eax
call [ std::endl@IAT ]
add esp 0xc
mov [ esp + 0x18 ] 0x24
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x1c ]
push 0xf01ff
push ecx
push edx
call [ OpenServiceA@IAT ]
mov edi eax
test edi edi
jne r-xdata
lea ecx [ esp + 0x18 ]
push ecx
push 0x24
push ebx
push 0x0
push edi
call [ QueryServiceStatusEx@IAT ]
cmp eax 0x7a
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
mov eax [ ebp + 0x4 ]
cmp eax 0x4
ja r-xdata
call [ GetLastError@IAT ]
mov edx [ esp + 0x18 ]
push edx
push ebp
call [ realloc@IAT ]
add esp 0x8
mov ebx eax
jmp r-xdata
push eax
call sub_402420
add esp 0x4
mov eax [ esp + 0x18 ]
push eax
push ebp
call [ realloc@IAT ]
add esp 0x8
mov ebp eax
jmp r-xdata
mov edx [ ebp + 0xc ]
mov eax [ std::cout@IAT ]
push edx
push rw-data
push eax
call esi
add esp 0x8
push eax
call esi
push eax
call [ std::endl@IAT ]
mov ecx [ ebp + 0x1c ]
mov edx [ std::cout@IAT ]
add esp 0xc
push ecx
push rw-data
push edx
call esi
add esp 0x8
push eax
call esi
push eax
call [ std::endl@IAT ]
mov eax [ ebp + 0x20 ]
mov ecx [ std::cout@IAT ]
add esp 0xc
push eax
push rw-data
push ecx
call esi
add esp 0x8
push eax
call esi
push eax
call [ std::endl@IAT ]
mov eax [ ebx ]
add esp 0xc
cmp eax 0x10
ja r-xdata
jmp [ eax * 4 + jump_table_4023e8 ]
mov edx [ esp + 0x18 ]
lea ecx [ esp + 0x18 ]
push ecx
push edx
push ebp
push edi
call [ QueryServiceConfigA@IAT ]
test eax eax
jne r-xdata
cmp eax 0x20
je r-xdata
je r-xdata
mov eax [ std::cout@IAT ]
push rw-data
push rw-data
push eax
jmp r-xdata
push rw-data
jmp r-xdata
mov edx [ std::cout@IAT ]
push rw-data
push rw-data
push edx
jmp r-xdata
mov eax [ std::cout@IAT ]
push rw-data
push rw-data
push eax
jmp r-xdata
push rw-data
push rw-data
cmp eax 0x100
jne r-xdata
mov ecx [ std::cout@IAT ]
push rw-data
push rw-data
push ecx
jmp r-xdata
dec eax
je r-xdata
call esi
add esp 0x8
push eax
call esi
push eax
call [ std::endl@IAT ]
add esp 0xc
mov ecx [ std::cout@IAT ]
push rw-data
push ecx
mov edx [ ebx + 0x1c ]
mov eax [ std::cout@IAT ]
push edx
push rw-data
push eax
call esi
add esp 0x8
mov ecx eax
call [ std::basic_ostream<char,struct std::char_traits<char> >::operator<<@IAT ]
push eax
call [ std::endl@IAT ]
mov ecx [ esp + 0x18 ]
add esp 0x4
lea edx [ esp + 0xac ]
push ecx
push rw-data
push edx
call [ sprintf@IAT ]
add esp 0xc
lea eax [ esp + 0x10 ]
lea ecx [ esp + 0xac ]
push eax
push 0xf003f
push 0x0
push ecx
push 0x80000002
call [ RegOpenKeyExA@IAT ]
test eax eax
je r-xdata
jmp [ eax * 4 + jump_table_4023fc ]
mov eax [ ebx + 0x4 ]
dec eax
cmp eax 0x6
ja r-xdata
mov edx [ std::cout@IAT ]
push rw-data
push rw-data
push edx
jmp r-xdata
call esi
add esp 0x8
push eax
call esi
push eax
call [ std::endl@IAT ]
add esp 0xc
push rw-data
jmp r-xdata
dec eax
jne r-xdata
lea edx [ esp + 0x20 ]
lea eax [ esp + 0x1ac ]
push edx
mov edx [ esp + 0x14 ]
lea ecx [ esp + 0x28 ]
push eax
push ecx
push 0x0
push rw-data
push edx
mov [ esp + 0x38 ] 0x100
call [ RegQueryValueExA@IAT ]
mov ecx [ std::cout@IAT ]
lea eax [ esp + 0x1ac ]
push eax
push rw-data
push ecx
call esi
add esp 0x8
push eax
call esi
push eax
call [ std::endl@IAT ]
push eax
call [ std::endl@IAT ]
add esp 0x10
push edi
call [ CloseServiceHandle@IAT ]
mov edx [ esp + 0x10 ]
push edx
call [ RegCloseKey@IAT ]
call [ GetLastError@IAT ]
push eax
call sub_402420
add esp 0x4
push rw-data
jmp r-xdata
mov edx [ std::cout@IAT ]
push rw-data
push rw-data
push edx
jmp r-xdata
mov eax [ std::cout@IAT ]
push rw-data
push rw-data
push eax
jmp r-xdata
push rw-data
jmp r-xdata
mov edx [ std::cout@IAT ]
push rw-data
push rw-data
push edx
jmp r-xdata
mov eax [ std::cout@IAT ]
push rw-data
push rw-data
push eax
jmp r-xdata
push rw-data
mov eax [ std::cout@IAT ]
push rw-data
push eax
mov edx [ std::cout@IAT ]
push rw-data
push rw-data
push edx
jmp r-xdata
mov ecx [ std::cout@IAT ]
push rw-data
push ecx
call esi
add esp 0x8
push eax
call esi
push eax
call [ std::endl@IAT ]
add esp 0xc
sub_402420
push ecx
push esi
mov esi [ esp + 0xc ]
push 0x0
lea eax [ esp + 0x8 ]
push 0x0
push eax
push 0x409
push esi
push 0x0
push 0x1100
mov [ esp + 0x20 ] 0x0
call [ FormatMessageA@IAT ]
mov ecx [ esp + 0x4 ]
push ecx
push esi
push rw-data
call [ printf@IAT ]
add esp 0xc
pop esi
pop ecx
retn
sub_402470
push ebp
mov ebp esp
push 0xffffffff
push sub_406ac0
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x568
push ebx
push esi
push edi
mov ecx 0x40
xor eax eax
lea edi [ ebp - 0x36b ]
mov [ ebp - 0x36c ] 0x0
mov [ ebp - 0x164 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x40
xor eax eax
lea edi [ ebp - 0x163 ]
mov [ ebp - 0x470 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x40
xor eax eax
lea edi [ ebp - 0x46f ]
mov [ ebp - 0x10 ] esp
[ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ ebp - 0x36c ]
push 0x104
push eax
call [ GetSystemDirectoryA@IAT ]
mov ecx 0x40
xor eax eax
lea edi [ ebp - 0x267 ]
mov [ ebp - 0x268 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov eax [ rw-data ]
xor ebx ebx
cmp eax ebx
mov [ ebp - 0x40 ] 0x7
mov [ ebp - 0x1c ] 0x80000002
mov [ ebp - 0x18 ] ebx
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x28 ] ebx
mov [ ebp - 0x2c ] ebx
je r-xdata
lea edi [ ebp - 0x36c ]
or ecx 0xffffffff
xor eax eax
lea edx [ ebp - 0x164 ]
[ edi ]
not ecx
sub edi ecx
mov [ ebp - 0x24 ] ebx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ ebp - 0x164 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi edx
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
lea eax [ ebp - 0x14 ]
mov ecx edx
push eax
push 0xf003f
and ecx 0x3
push ebx
push rw-data
push 0x80000002
[ edi ] [ esi ]
call [ RegOpenKeyExA@IAT ]
jmp r-xdata
mov edx [ rw-data ]
cmp edx ebx
jne r-xdata
lea edi [ ebp - 0x164 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov edx ecx
mov esi edi
mov edi rw-data
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi rw-data
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edi [ rw-data ]
cmp edi ebx
jne r-xdata
mov ebx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
mov edi edx
mov ebx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
mov edi ebx
jmp r-xdata
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
lea edx [ ebp - 0x164 ]
mov esi edi
mov edi edx
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
lea eax [ ebp - 0x164 ]
and ecx 0x3
push rw-data
[ edi ] [ esi ]
push eax
call sub_401a40
add esp 0x8
test al al
jne r-xdata
mov edi [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
lea esi [ ebp - 0x574 ]
sub edi ecx
mov eax ecx
mov [ ebp - 0x20 ] esi
mov esi edi
mov edi [ ebp - 0x20 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov edi [ rw-data ]
test edi edi
jne r-xdata
mov edi ebx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
lea esi [ ebp - 0x268 ]
sub edi ecx
mov eax ecx
mov [ ebp - 0x24 ] esi
mov esi edi
mov edi [ ebp - 0x24 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov edi [ rw-data ]
lea ecx [ ebp - 0x268 ]
test edi edi
mov [ ebp - 0x24 ] ecx
jne r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ ebp - 0x470 ]
[ edi ]
not ecx
sub edi ecx
push rw-data
mov eax ecx
mov esi edi
mov edi edx
mov edx [ ebp - 0x14 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
push rw-data
and ecx 0x3
mov [ ebp - 0x4 ] ebx
[ edi ] [ esi ]
lea ecx [ ebp - 0x40 ]
push ecx
push ebx
push rw-data
push edx
call [ RegQueryValueExA@IAT ]
mov edi [ strchr@IAT ]
mov ebx [ _stricmp@IAT ]
mov esi rw-data
call [ GetLastError@IAT ]
push eax
call sub_402420
add esp 0x4
xor al al
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
lea esi [ ebp - 0x574 ]
sub edi ecx
mov eax ecx
mov [ ebp - 0x20 ] esi
mov esi edi
mov edi [ ebp - 0x20 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov eax ebx
and ecx 0x3
test edx edx
[ edi ] [ esi ]
je r-xdata
mov edi ebx
lea eax [ ebp - 0x38 ]
push r--data
push eax
mov [ ebp - 0x38 ] rw-data
call _CxxThrowException
mov eax [ rw-data ]
test eax eax
jne r-xdata
push eax
lea ecx [ ebp - 0x164 ]
push rw-data
push ecx
call [ sprintf@IAT ]
mov edx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov ecx [ rw-data ]
add esp 0xc
mov eax [ edx ]
mov esi eax
cmp ecx esi
jae r-xdata
mov eax edx
push esi
push eax
call ebx
add esp 0x8
test eax eax
je r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
sub eax [ rw-data ]
cmp eax esi
ja r-xdata
mov esi ecx
cmp [ esi ] 0x0
jne r-xdata
push 0x0
push esi
call edi
add esp 0x8
inc eax
mov esi eax
jmp r-xdata
test esi esi
jbe r-xdata
call [ std::_Xlen@IAT ]
mov ecx [ ebp - 0x14 ]
push ecx
call [ RegCloseKey@IAT ]
mov ebx [ ebp - 0x24 ]
push 0xf003f
push 0x0
push ebx
call [ OpenSCManagerA@IAT ]
mov esi eax
test esi esi
mov [ ebp - 0x28 ] esi
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
lea edx [ ebp - 0x14 ]
lea eax [ ebp - 0x268 ]
push edx
push 0x80000002
push eax
call [ RegConnectRegistryA@IAT ]
mov edx [ ebp - 0x14 ]
lea ecx [ ebp - 0x14 ]
push ecx
push 0xf003f
push 0x0
push rw-data
push edx
call [ RegOpenKeyExA@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
push 0x0
mov ecx rw-data
lea ebx [ eax + esi ]
push ebx
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Grow@IAT ]
test al al
je r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
lea edx [ ebp - 0x30 ]
push r--data
push edx
mov [ ebp - 0x30 ] rw-data
call _CxxThrowException
xor ebx ebx
push rw-data
call [ printf@IAT ]
mov eax [ ebp - 0x14 ]
add esp 0x4
push eax
call [ RegCloseKey@IAT ]
xor al al
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ rw-data ]
test eax eax
jne r-xdata
push 0xf01ff
push eax
push esi
call [ OpenServiceA@IAT ]
test eax eax
je r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
mov ecx [ rw-data ]
mov edx [ rw-data ]
lea edi [ edx + ecx ]
mov ecx esi
mov esi eax
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ rw-data ]
mov [ rw-data ] ebx
mov [ ecx + ebx ] 0x0
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
mov ecx [ rw-data ]
test ecx ecx
jne r-xdata
xor al al
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov ecx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
push 0x0
push 0x0
push 0x0
push 0x0
lea edx [ ebp - 0x470 ]
push 0x0
push edx
push 0x1
push 0x2
push 0x10
push 0xf01ff
push ecx
push eax
push esi
call [ CreateServiceA@IAT ]
mov esi eax
mov edi rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
mov [ ebp - 0x2c ] esi
je r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
push 0x400
push rw-data
push rw-data
call [ strncpy@IAT ]
mov eax [ rw-data ]
add esp 0xc
test eax eax
jne r-xdata
push rw-data
push 0x1
push esi
mov [ rw-data ] rw-data
call [ ChangeServiceConfig2A@IAT ]
push 0x64
push eax
push rw-data
call [ strncat@IAT ]
mov eax [ rw-data ]
add esp 0xc
test eax eax
je r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
mov edx [ ebp - 0x1c ]
lea ecx [ ebp - 0x14 ]
push ecx
push 0xf003f
push 0x0
push rw-data
push edx
call [ RegOpenKeyExA@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x1c ]
lea eax [ ebp - 0x14 ]
push eax
push ecx
push ebx
call [ RegConnectRegistryA@IAT ]
mov eax [ ebp - 0x14 ]
lea edx [ ebp - 0x14 ]
push edx
push 0xf003f
push 0x0
push rw-data
push eax
call [ RegOpenKeyExA@IAT ]
mov edx [ ebp - 0x14 ]
lea ecx [ ebp - 0x18 ]
push ecx
push rw-data
push edx
call [ RegCreateKeyA@IAT ]
mov eax [ rw-data ]
test eax eax
je r-xdata
lea eax [ ebp - 0x34 ]
push r--data
push eax
mov [ ebp - 0x34 ] rw-data
call _CxxThrowException
lea edx [ ebp - 0x164 ]
push edx
call [ lstrlenA@IAT ]
push eax
lea eax [ ebp - 0x164 ]
push eax
mov edi [ rw-data ]
test edi edi
jne r-xdata
mov edi [ Sleep@IAT ]
cmp [ ebp - 0x5c ] 0x1
je r-xdata
lea eax [ ebp - 0x164 ]
push eax
call [ lstrlenA@IAT ]
push eax
push edi
jmp r-xdata
mov edi [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
lea edx [ ebp - 0x60 ]
push edx
push esi
call ebx
test eax eax
je r-xdata
lea ecx [ ebp - 0x3c ]
push r--data
push ecx
mov [ ebp - 0x3c ] rw-data
call _CxxThrowException
lea eax [ ebp - 0x60 ]
push eax
push 0x1
push esi
call [ ControlService@IAT ]
mov edi [ Sleep@IAT ]
push 0x64
call edi
jmp r-xdata
mov ecx [ ebp - 0x18 ]
push 0x2
push 0x0
push rw-data
push ecx
call [ RegSetValueExA@IAT ]
mov ebx [ QueryServiceStatus@IAT ]
lea edx [ ebp - 0x60 ]
push edx
push esi
call ebx
test eax eax
je r-xdata
mov ecx [ ebp - 0x1c ]
mov edi [ RegCloseKey@IAT ]
push ecx
call edi
mov edx [ ebp - 0x18 ]
push edx
call edi
xor eax eax
push eax
call edi
push esi
mov esi [ CloseServiceHandle@IAT ]
call esi
mov eax [ ebp - 0x28 ]
push eax
call esi
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov al 0x1
mov [ fs : 0x0 ] ecx
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp - 0x5c ]
cmp eax 0x2
jne r-xdata
push 0x0
push 0x0
push esi
call [ StartServiceA@IAT ]
test eax eax
jne r-xdata
cmp eax 0x4
je r-xdata
push 0x64
call edi
jmp r-xdata
lea eax [ ebp - 0x44 ]
push r--data
push eax
mov [ ebp - 0x44 ] rw-data
call _CxxThrowException
sub_402be0
push 0xffffffff
push sub_406b68
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x3c
push ebx
push ebp
push esi
lea eax [ esp + 0xe ]
push edi
lea ecx [ esp + 0x13 ]
push eax
push ecx
lea ecx [ esp + 0x24 ]
call sub_4041c0
mov eax [ esp + 0x5c ]
mov [ esp + 0x54 ] 0x0
cmp eax 0x2
jge r-xdata
mov edx [ esp + 0x60 ]
lea ecx [ esp + 0x1c ]
push edx
push eax
call sub_4051a4
cmp eax 0x1
jge r-xdata
lea ecx [ esp + 0x1c ]
mov [ esp + 0x54 ] 0xffffffff
call sub_404270
xor eax eax
mov ecx [ esp + 0x4c ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebp
pop ebx
add esp 0x48
retn
push rw-data
lea ecx [ esp + 0x20 ]
call sub_4053fc
mov ebp [ std::operator==@IAT ]
or esi 0xffffffff
test al al
je r-xdata
lea ecx [ esp + 0x1c ]
mov [ esp + 0x54 ] 0xffffffff
call sub_404270
xor eax eax
mov ecx [ esp + 0x4c ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebp
pop ebx
add esp 0x48
retn
push rw-data
lea ecx [ esp + 0x20 ]
call sub_4053fc
test al al
je r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
push 0x0
call sub_401e70
add esp 0x4
push 0x0
call [ exit@IAT ]
push eax
push 0x0
lea eax [ esp + 0x34 ]
push rw-data
push eax
lea ecx [ esp + 0x2c ]
call sub_405471
mov ecx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov [ esp + 0x54 ] 0x1
mov edx [ ecx ]
mov ecx rw-data
push edx
push 0x0
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
push 0x1
lea ecx [ esp + 0x30 ]
mov [ esp + 0x58 ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
push rw-data
push rw-data
call ebp
add esp 0x8
test al al
je r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
push eax
push 0x0
lea edx [ esp + 0x44 ]
push rw-data
push edx
lea ecx [ esp + 0x2c ]
call sub_405471
mov ecx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov [ esp + 0x54 ] 0x9
mov edx [ ecx ]
mov ecx rw-data
push edx
push 0x0
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
push 0x1
lea ecx [ esp + 0x40 ]
mov [ esp + 0x58 ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
push rw-data
push rw-data
call ebp
add esp 0x8
test al al
je r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
push rw-data
call [ printf@IAT ]
add esp 0x4
lea ecx [ esp + 0x1c ]
mov [ esp + 0x54 ] 0xffffffff
call sub_404270
xor eax eax
mov ecx [ esp + 0x4c ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebp
pop ebx
add esp 0x48
retn
push rw-data
lea ecx [ esp + 0x20 ]
call sub_4053fc
test al al
je r-xdata
push rw-data
jmp r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Freeze@IAT ]
mov ecx [ rw-data ]
mov eax ecx
jmp r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
call [ printf@IAT ]
add esp 0x4
lea ecx [ esp + 0x1c ]
mov [ esp + 0x54 ] esi
call sub_404270
xor eax eax
mov ecx [ esp + 0x4c ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebp
pop ebx
add esp 0x48
retn
mov edi rw-data
mov ecx esi
xor eax eax
[ edi ]
not ecx
dec ecx
push ecx
push rw-data
push eax
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::insert@IAT ]
cmp [ rw-data ] 0x1
jb r-xdata
cmp [ eax ] 0x5c
jne r-xdata
push eax
push 0x0
lea eax [ esp + 0x44 ]
push rw-data
push eax
lea ecx [ esp + 0x2c ]
call sub_405471
mov ecx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov [ esp + 0x54 ] 0xb
mov edx [ ecx ]
mov ecx rw-data
push edx
push 0x0
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
push 0x1
lea ecx [ esp + 0x40 ]
mov [ esp + 0x58 ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
push rw-data
push rw-data
call ebp
add esp 0x8
test al al
je r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
push eax
push 0x0
lea eax [ esp + 0x44 ]
push rw-data
push eax
lea ecx [ esp + 0x2c ]
call sub_405471
mov ecx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov [ esp + 0x54 ] 0xa
mov edx [ ecx ]
mov ecx rw-data
push edx
push 0x0
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
push 0x1
lea ecx [ esp + 0x40 ]
mov [ esp + 0x58 ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
push rw-data
push rw-data
call ebp
add esp 0x8
test al al
je r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
mov dl [ rw-data ]
sub esp 0x10
mov esi esp
mov [ esp + 0x6c ] esp
push 0x0
mov ecx esi
mov [ esi ] dl
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov ecx [ eax ]
push ecx
push 0x0
push rw-data
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
call sub_403f70
add esp 0x10
test eax eax
jne r-xdata
push rw-data
lea ecx [ esp + 0x20 ]
call sub_4053fc
test al al
je r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
test ecx ecx
je r-xdata
push rw-data
lea ecx [ esp + 0x20 ]
call sub_4053fc
test al al
je r-xdata
push rw-data
jmp r-xdata
push rw-data
jmp r-xdata
mov [ rw-data ] 0x1
or esi 0xffffffff
mov eax [ rw-data ]
test eax eax
je r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
push rw-data
lea ecx [ esp + 0x20 ]
call sub_4053fc
test al al
je r-xdata
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Freeze@IAT ]
mov eax [ rw-data ]
inc eax
jmp r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
lea ecx [ esp + 0x1c ]
mov [ esp + 0x54 ] 0xffffffff
call sub_404270
xor eax eax
mov ecx [ esp + 0x4c ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebp
pop ebx
add esp 0x48
retn
mov dl [ rw-data ]
sub esp 0x10
mov esi esp
mov [ esp + 0x6c ] esp
push 0x0
mov ecx esi
mov [ esi ] dl
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov ecx [ eax ]
push ecx
push 0x0
push rw-data
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
call sub_403ea0
add esp 0x10
mov [ rw-data ] 0x0
push eax
push 0x0
lea ecx [ esp + 0x34 ]
push rw-data
push ecx
lea ecx [ esp + 0x2c ]
call sub_405471
mov edx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov [ esp + 0x54 ] 0x2
mov ecx [ edx ]
push ecx
push 0x0
push eax
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
push 0x1
lea ecx [ esp + 0x30 ]
mov [ esp + 0x58 ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
cmp [ eax ] 0x5c
je r-xdata
push eax
push 0x0
lea eax [ esp + 0x44 ]
push rw-data
push eax
lea ecx [ esp + 0x2c ]
call sub_405471
mov ecx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov [ esp + 0x54 ] 0xd
mov edx [ ecx ]
mov ecx rw-data
push edx
push 0x0
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
mov eax [ esp + 0x40 ]
mov [ esp + 0x54 ] 0x0
test eax eax
je r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
push eax
push 0x0
lea eax [ esp + 0x44 ]
push rw-data
push eax
lea ecx [ esp + 0x2c ]
call sub_405471
mov ecx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov [ esp + 0x54 ] 0xc
mov edx [ ecx ]
mov ecx rw-data
push edx
push 0x0
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
push 0x1
lea ecx [ esp + 0x40 ]
mov [ esp + 0x58 ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
push rw-data
push rw-data
call ebp
add esp 0x8
test al al
je r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
push eax
push 0x0
lea edx [ esp + 0x34 ]
push rw-data
push edx
lea ecx [ esp + 0x2c ]
call sub_405471
mov ecx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov [ esp + 0x54 ] 0x3
mov edx [ ecx ]
mov ecx rw-data
push edx
push 0x0
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
push 0x1
lea ecx [ esp + 0x30 ]
mov [ esp + 0x58 ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
push rw-data
push rw-data
call ebp
add esp 0x8
test al al
jne r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
push rw-data
push rw-data
call ebp
add esp 0x8
test al al
je r-xdata
lea ecx [ eax - 0x1 ]
mov al [ eax - 0x1 ]
test al al
je r-xdata
push rw-data
jmp r-xdata
push rw-data
call [ printf@IAT ]
add esp 0x4
lea ecx [ esp + 0x1c ]
mov [ esp + 0x54 ] 0xffffffff
call sub_404270
xor eax eax
mov ecx [ esp + 0x4c ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebp
pop ebx
add esp 0x48
retn
push rw-data
push rw-data
call ebp
add esp 0x8
test al al
jne r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
push rw-data
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
push rw-data
lea ecx [ esp + 0x20 ]
call sub_4053fc
test al al
je r-xdata
push eax
push 0x0
lea eax [ esp + 0x44 ]
push rw-data
push eax
lea ecx [ esp + 0x2c ]
call sub_405471
mov ecx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov [ esp + 0x54 ] 0xe
mov edx [ ecx ]
mov ecx rw-data
push edx
push 0x0
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
mov eax [ esp + 0x40 ]
mov [ esp + 0x54 ] 0x0
test eax eax
je r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
dec al
mov [ ecx ] al
jmp r-xdata
mov dl [ rw-data ]
sub esp 0x10
mov esi esp
mov [ esp + 0x6c ] esp
push 0x0
mov ecx esi
mov [ esi ] dl
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov ecx [ eax ]
push ecx
push 0x0
push rw-data
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
sub esp 0x10
mov [ esp + 0x74 ] 0x7
mov ecx esp
mov [ esp + 0x80 ] esp
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub esp 0x10
mov [ esp + 0x84 ] 0x8
mov ecx esp
mov [ esp + 0x44 ] esp
push rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
mov [ esp + 0x84 ] 0x0
call sub_403cc0
add esp 0x30
test eax eax
jne r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
push rw-data
push rw-data
call ebp
add esp 0x8
test al al
je r-xdata
lea ecx [ eax - 0x1 ]
mov al [ eax - 0x1 ]
test al al
je r-xdata
lea ecx [ esp + 0x1c ]
mov [ esp + 0x54 ] 0xffffffff
call sub_404270
xor eax eax
mov ecx [ esp + 0x4c ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebp
pop ebx
add esp 0x48
retn
push eax
push 0x0
lea eax [ esp + 0x34 ]
push rw-data
push eax
lea ecx [ esp + 0x2c ]
call sub_405471
mov ecx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov [ esp + 0x54 ] 0x4
mov edx [ ecx ]
mov ecx rw-data
push edx
push 0x0
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
push 0x1
lea ecx [ esp + 0x30 ]
mov [ esp + 0x58 ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
push rw-data
push rw-data
call ebp
add esp 0x8
test al al
je r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
push rw-data
lea ecx [ esp + 0x20 ]
call sub_4053fc
test al al
je r-xdata
push rw-data
call [ printf@IAT ]
mov eax [ esp + 0x24 ]
add esp 0x4
lea ecx [ esp + 0x1c ]
mov [ esp + 0x54 ] 0xffffffff
push eax
lea eax [ esp + 0x60 ]
push eax
call sub_404360
mov ecx [ eax ]
lea edx [ esp + 0x18 ]
push ecx
push edx
lea ecx [ esp + 0x28 ]
call sub_404370
mov eax [ esp + 0x20 ]
push eax
call sub_4068b4
xor edi edi
add esp 0x4
lea ecx [ esp + 0x5c ]
mov [ esp + 0x20 ] edi
mov [ esp + 0x28 ] edi
xor esi esi
call [ std::_Lockit::_Lockit@IAT ]
mov eax [ rw-data ]
dec eax
mov [ rw-data ] eax
jne r-xdata
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
push rw-data
lea eax [ esp + 0x40 ]
push rw-data
push eax
call ??Hstd@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
push rw-data
lea ecx [ esp + 0x3c ]
mov bl 0x5
push eax
push ecx
mov [ esp + 0x6c ] bl
call ??Hstd@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
add esp 0x18
mov edx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov [ esp + 0x54 ] 0x6
mov ecx [ edx ]
push ecx
push 0x0
push eax
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
push 0x1
lea ecx [ esp + 0x30 ]
mov [ esp + 0x58 ] bl
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
push 0x1
lea ecx [ esp + 0x40 ]
mov [ esp + 0x58 ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
push rw-data
call [ printf@IAT ]
add esp 0x4
lea ecx [ esp + 0x1c ]
mov [ esp + 0x54 ] 0xffffffff
call sub_404270
xor eax eax
mov ecx [ esp + 0x4c ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebp
pop ebx
add esp 0x48
retn
push rw-data
lea ecx [ esp + 0x20 ]
call sub_4053fc
test al al
je r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
lea ecx [ esp + 0x5c ]
call [ std::_Lockit::~_Lockit@IAT ]
cmp esi edi
jmp r-xdata
mov esi [ rw-data ]
mov [ rw-data ] edi
dec al
mov [ ecx ] al
jmp r-xdata
push rw-data
lea ecx [ esp + 0x20 ]
call sub_4053fc
test al al
je r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
push eax
push 0x0
lea ecx [ esp + 0x44 ]
push rw-data
push ecx
lea ecx [ esp + 0x2c ]
call sub_405471
mov edx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov [ esp + 0x54 ] 0xf
mov ecx [ edx ]
push ecx
push 0x0
push eax
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
mov eax [ esp + 0x40 ]
mov [ esp + 0x54 ] 0x0
test eax eax
je r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
je r-xdata
mov esi [ esp + 0x20 ]
mov ecx [ esp + 0x28 ]
xor ebx ebx
mov [ esp + 0x54 ] 0xffffffff
mov eax [ esi ]
cmp ecx ebx
mov [ esp + 0x5c ] eax
je r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
push eax
push 0x0
lea ecx [ esp + 0x44 ]
push rw-data
push ecx
lea ecx [ esp + 0x2c ]
call sub_405471
mov eax [ eax + 0x4 ]
test eax eax
jne r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
push rw-data
push rw-data
call ebp
add esp 0x8
test al al
je r-xdata
lea ecx [ eax - 0x1 ]
mov al [ eax - 0x1 ]
test al al
je r-xdata
xor eax eax
mov ecx [ esp + 0x4c ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebp
pop ebx
add esp 0x48
retn
push esi
call sub_4068b4
add esp 0x4
cmp eax esi
je r-xdata
mov ecx eax
cmp eax ecx
jne r-xdata
xor ebx ebx
push eax
push ebx
lea edx [ esp + 0x44 ]
push rw-data
push edx
lea ecx [ esp + 0x2c ]
call sub_405471
mov esi eax
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov [ esp + 0x54 ] 0x10
mov edi [ eax ]
mov eax [ esi + 0x8 ]
mov ebp eax
cmp edi ebp
jae r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
mov edi eax
or ecx 0xffffffff
xor eax eax
xor ebx ebx
[ edi ]
not ecx
sub edi ecx
mov eax [ esp + 0x40 ]
mov edx ecx
mov esi edi
mov edi rw-data
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
cmp eax ebx
[ edi ] [ esi ]
je r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
push rw-data
call [ printf@IAT ]
mov eax [ esp + 0x24 ]
add esp 0x4
lea edx [ esp + 0x5c ]
mov [ esp + 0x54 ] 0xffffffff
mov ecx [ eax ]
push eax
push ecx
push edx
lea ecx [ esp + 0x28 ]
call sub_404370
mov eax [ esp + 0x20 ]
push eax
call sub_4068b4
xor edi edi
add esp 0x4
lea ecx [ esp + 0x5c ]
mov [ esp + 0x20 ] edi
mov [ esp + 0x28 ] edi
xor esi esi
call [ std::_Lockit::_Lockit@IAT ]
mov eax [ rw-data ]
dec eax
mov [ rw-data ] eax
jne r-xdata
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
mov edx [ esp + 0x20 ]
push edx
call sub_4068b4
add esp 0x4
lea ecx [ esp + 0x60 ]
mov [ esp + 0x20 ] ebx
mov [ esp + 0x28 ] ebx
xor esi esi
call [ std::_Lockit::_Lockit@IAT ]
mov eax [ rw-data ]
dec eax
mov [ rw-data ] eax
jne r-xdata
lea ecx [ esp + 0x5c ]
mov edi eax
call sub_4049c0
lea ecx [ esp + 0x18 ]
push edi
push ecx
lea ecx [ esp + 0x24 ]
call sub_404450
mov eax [ esp + 0x5c ]
cmp eax esi
jne r-xdata
mov ecx [ esi + 0x4 ]
push ecx
lea ecx [ esp + 0x20 ]
call sub_4048f0
mov edx [ esp + 0x20 ]
mov eax [ rw-data ]
mov [ edx + 0x4 ] eax
mov eax [ esp + 0x20 ]
mov [ esp + 0x28 ] ebx
mov [ eax ] eax
mov eax [ esp + 0x20 ]
mov [ eax + 0x8 ] eax
jmp r-xdata
cmp esi rw-data
jne r-xdata
mov ebp edi
mov edi rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
push ecx
push rw-data
push rw-data
call [ _strnicmp@IAT ]
add esp 0xc
test eax eax
jne r-xdata
lea ecx [ eax - 0x1 ]
mov al [ eax - 0x1 ]
test al al
je r-xdata
lea ecx [ esp + 0x5c ]
call [ std::_Lockit::~_Lockit@IAT ]
cmp esi edi
jmp r-xdata
mov esi [ rw-data ]
mov [ rw-data ] edi
dec al
mov [ ecx ] al
jmp r-xdata
lea ecx [ esp + 0x60 ]
call [ std::_Lockit::~_Lockit@IAT ]
cmp esi ebx
je r-xdata
mov esi [ rw-data ]
mov [ rw-data ] ebx
cmp ebp ebx
jbe r-xdata
cmp [ rw-data ] ebp
jae r-xdata
push rw-data
call [ printf@IAT ]
mov eax [ esp + 0x24 ]
add esp 0x4
mov [ esp + 0x54 ] 0xffffffff
mov ecx [ eax ]
push eax
lea eax [ esp + 0x60 ]
push ecx
push eax
lea ecx [ esp + 0x28 ]
call sub_404370
mov ecx [ esp + 0x20 ]
push ecx
call sub_4068b4
add esp 0x4
lea ecx [ esp + 0x5c ]
mov [ esp + 0x20 ] ebx
mov [ esp + 0x28 ] ebx
xor esi esi
call [ std::_Lockit::_Lockit@IAT ]
mov eax [ rw-data ]
dec eax
mov [ rw-data ] eax
jne r-xdata
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
mov ecx [ esp + 0x4c ]
pop edi
pop esi
pop ebp
mov eax 0x1
mov [ fs : 0x0 ] ecx
pop ebx
add esp 0x48
retn
push esi
call sub_4068b4
add esp 0x4
push 0x1
push ebp
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Grow@IAT ]
test al al
je r-xdata
cmp ebp eax
jne r-xdata
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Split@IAT ]
mov eax [ rw-data ]
sub eax ebp
cmp eax edi
jae r-xdata
call [ std::_Xran@IAT ]
lea ecx [ esp + 0x5c ]
call [ std::_Lockit::~_Lockit@IAT ]
cmp esi ebx
je r-xdata
mov esi [ rw-data ]
mov [ rw-data ] ebx
dec al
mov [ ecx ] al
jmp r-xdata
mov ecx [ esp + 0x40 ]
mov [ esp + 0x54 ] 0x0
cmp ecx ebx
je r-xdata
mov esi [ esi + 0x4 ]
cmp esi ebx
jne r-xdata
mov eax [ esi + 0x4 ]
cmp eax ebx
jne r-xdata
cmp edi ebx
jbe r-xdata
mov edi eax
push esi
call sub_4068b4
add esp 0x4
xor eax eax
mov ecx [ esp + 0x4c ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebp
pop ebx
add esp 0x48
retn
push rw-data
push rw-data
call [ std::operator==@IAT ]
add esp 0x8
test al al
je r-xdata
mov al [ ecx - 0x1 ]
dec ecx
test al al
je r-xdata
mov edi [ rw-data ]
mov ecx ebp
mov edx ecx
push ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Eos@IAT ]
mov esi [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
cmp [ eax - 0x1 ] 0xfe
jae r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
push ebx
push ebx
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::erase@IAT ]
jmp r-xdata
mov ecx [ rw-data ]
sub eax edi
add ecx ebp
push eax
lea edx [ edi + ecx ]
push edx
push ecx
call [ memmove@IAT ]
mov esi [ rw-data ]
add esp 0xc
sub esi edi
mov ecx rw-data
push ebx
push esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Grow@IAT ]
test al al
je r-xdata
push rw-data
call [ printf@IAT ]
mov esi [ esp + 0x24 ]
mov ecx [ esp + 0x2c ]
add esp 0x4
cmp ecx ebx
mov eax [ esi ]
mov [ esp + 0x54 ] 0xffffffff
mov [ esp + 0x5c ] eax
je r-xdata
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
push 0x1
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov eax [ esi + 0x4 ]
cmp eax ebx
jne r-xdata
push esi
mov ecx rw-data
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Eos@IAT ]
cmp eax esi
je r-xdata
mov ecx eax
cmp eax ecx
jne r-xdata
dec al
mov [ ecx ] al
jmp r-xdata
mov [ rw-data ] eax
mov ecx [ esi + 0x8 ]
mov [ rw-data ] ecx
mov esi [ esi + 0xc ]
mov [ rw-data ] esi
mov cl [ eax - 0x1 ]
inc cl
mov [ eax - 0x1 ] cl
jmp r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
mov eax [ esp + 0x20 ]
push eax
call sub_4068b4
add esp 0x4
lea ecx [ esp + 0x5c ]
mov [ esp + 0x20 ] ebx
mov [ esp + 0x28 ] ebx
xor esi esi
call [ std::_Lockit::_Lockit@IAT ]
mov eax [ rw-data ]
dec eax
mov [ rw-data ] eax
jne r-xdata
lea eax [ esp + 0x14 ]
push ebx
push eax
lea ecx [ esp + 0x64 ]
call sub_404940
mov ecx [ eax ]
lea edx [ esp + 0x18 ]
push ecx
push edx
lea ecx [ esp + 0x24 ]
call sub_404450
cmp [ esp + 0x5c ] esi
jne r-xdata
mov eax [ esi + 0x4 ]
lea ecx [ esp + 0x1c ]
push eax
call sub_4048f0
mov ecx [ esp + 0x20 ]
mov edx [ rw-data ]
mov [ ecx + 0x4 ] edx
mov eax [ esp + 0x20 ]
mov [ esp + 0x28 ] ebx
mov [ eax ] eax
mov eax [ esp + 0x20 ]
mov [ eax + 0x8 ] eax
jmp r-xdata
lea ecx [ esp + 0x5c ]
call [ std::_Lockit::~_Lockit@IAT ]
cmp esi ebx
mov esi [ rw-data ]
mov [ rw-data ] ebx
sub_403ae0
sub esp 0xc
push ebx
push ebp
push esi
mov esi ecx
push edi
xor ebp ebp
mov edi [ esi + 0x4 ]
mov ecx [ esi + 0xc ]
cmp ecx ebp
mov eax [ edi ]
mov [ esp + 0x10 ] eax
je r-xdata
cmp eax edi
je r-xdata
mov ecx eax
cmp eax ecx
jne r-xdata
mov ecx [ esi + 0x4 ]
push ecx
call sub_4068b4
add esp 0x4
mov [ esi + 0x4 ] ebp
mov [ esi + 0xc ] ebp
lea ecx [ esp + 0x10 ]
xor esi esi
call [ std::_Lockit::_Lockit@IAT ]
mov eax [ rw-data ]
dec eax
mov [ rw-data ] eax
jne r-xdata
lea ecx [ esp + 0x10 ]
mov ebx eax
call sub_4049c0
lea eax [ esp + 0x18 ]
push ebx
push eax
mov ecx esi
call sub_404450
mov eax [ esp + 0x10 ]
cmp eax edi
jne r-xdata
mov ebx [ edi + 0x4 ]
mov eax [ rw-data ]
cmp ebx eax
mov edi ebx
je r-xdata
lea ecx [ esp + 0x10 ]
call [ std::_Lockit::~_Lockit@IAT ]
cmp esi ebp
je r-xdata
mov esi [ rw-data ]
mov [ rw-data ] ebp
mov ecx [ esi + 0x4 ]
lea edx [ esp + 0x14 ]
push edx
mov [ ecx + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ esi + 0xc ] ebp
mov ecx esi
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
call sub_404360
jmp r-xdata
mov eax [ edi + 0x8 ]
mov ecx esi
push eax
call sub_4048f0
mov edi [ edi ]
push ebp
lea ecx [ ebx + 0xc ]
call sub_404a10
push ebx
call sub_4068b4
mov eax [ rw-data ]
add esp 0x4
cmp edi eax
mov ebx edi
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0xc
retn
push esi
call sub_4068b4
add esp 0x4
sub_403be0
push 0xffffffff
push sub_406b8b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xac
mov eax [ rw-data ]
mov ecx [ rw-data ]
mov edx [ rw-data ]
mov [ esp ] eax
mov ax [ rw-data ]
mov [ esp + 0x4 ] ecx
lea ecx [ esp + 0x10 ]
mov [ esp + 0x8 ] edx
mov [ esp + 0xc ] ax
mov [ esp + 0xe ] 0x0
call sub_405da7
lea ecx [ esp ]
push 0x10
push ecx
lea ecx [ esp + 0x18 ]
mov [ esp + 0xbc ] 0x0
call sub_405e12
lea edx [ esp ]
lea ecx [ esp + 0x10 ]
push edx
call sub_405eb7
push 0x0
lea eax [ esp + 0x4 ]
push 0x10
push eax
push 0xcc
push rw-data
push rw-data
mov ecx rw-data
call sub_404d15
mov edx [ esp + 0xbc ]
lea ecx [ esp ]
push 0x10
push ecx
push edx
mov ecx rw-data
call sub_404bba
lea ecx [ esp + 0x10 ]
mov [ esp + 0xb4 ] 0xffffffff
call sub_405dd5
mov ecx [ esp + 0xac ]
mov [ fs : 0x0 ] ecx
add esp 0xb8
retn
sub_403cc0
push 0xffffffff
push sub_406bbb
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xa0
push esi
mov eax [ esp + 0xb8 ]
xor esi esi
cmp eax esi
mov [ esp + 0xac ] 0x2
jne r-xdata
push eax
lea eax [ esp + 0x28 ]
push rw-data
push eax
call [ sprintf@IAT ]
mov edx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
lea ecx [ esp + 0x30 ]
mov [ esp + 0x24 ] ecx
mov ecx [ esp + 0xd4 ]
add esp 0xc
cmp ecx esi
mov [ esp + 0x8 ] esi
mov [ esp + 0x14 ] esi
mov [ esp + 0x20 ] esi
jne r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
mov eax [ esp + 0xd8 ]
cmp eax esi
jne r-xdata
mov ecx edx
push esi
push ecx
lea edx [ esp + 0xc ]
push eax
push edx
call WNetAddConnection2A
cmp eax esi
jne r-xdata
mov eax edx
mov eax [ esp + 0xb8 ]
cmp eax esi
jne r-xdata
push 0x1
lea ecx [ esp + 0xb8 ]
mov [ rw-data ] 0x1
mov [ esp + 0xb0 ] 0x1
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
push 0x1
lea ecx [ esp + 0xc8 ]
mov [ esp + 0xb0 ] 0x0
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
push 0x1
lea ecx [ esp + 0xd8 ]
mov [ esp + 0xb0 ] 0xffffffff
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov eax 0x1
pop esi
mov ecx [ esp + 0xa0 ]
mov [ fs : 0x0 ] ecx
add esp 0xac
retn
push eax
push rw-data
call [ printf@IAT ]
mov ecx [ esp + 0xc0 ]
add esp 0x8
cmp ecx esi
je r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
mov ecx [ esp + 0xc8 ]
mov [ esp + 0xb8 ] esi
cmp ecx esi
mov [ esp + 0xbc ] esi
mov [ esp + 0xc0 ] esi
je r-xdata
mov al [ ecx - 0x1 ]
test al al
je r-xdata
mov ecx [ esp + 0xd8 ]
mov [ esp + 0xc8 ] esi
cmp ecx esi
mov [ esp + 0xcc ] esi
mov [ esp + 0xd0 ] esi
je r-xdata
mov al [ ecx - 0x1 ]
test al al
je r-xdata
dec ecx
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
mov ecx [ esp + 0xa4 ]
xor eax eax
pop esi
mov [ fs : 0x0 ] ecx
add esp 0xac
retn
mov al [ ecx - 0x1 ]
test al al
je r-xdata
dec ecx
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
dec ecx
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
dec al
mov [ ecx - 0x1 ] al
jmp r-xdata
sub_403ea0
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
sub esp 0x80
push esi
mov esi [ esp + 0x8c ]
test esi esi
je r-xdata
push eax
lea eax [ esp + 0x8 ]
push rw-data
push eax
call [ sprintf@IAT ]
add esp 0xc
lea ecx [ esp + 0x4 ]
push 0x1
push 0x0
push ecx
call WNetCancelConnection2A
test eax eax
jne r-xdata
mov eax esi
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
test esi esi
je r-xdata
test esi esi
je r-xdata
mov edx [ _iob@IAT ]
push eax
add edx 0x40
push rw-data
push edx
call [ fprintf@IAT ]
add esp 0xc
test esi esi
je r-xdata
mov eax esi
mov eax 0x1
pop esi
add esp 0x80
retn
mov al [ esi - 0x1 ]
test al al
je r-xdata
xor eax eax
pop esi
add esp 0x80
retn
mov al [ esi - 0x1 ]
test al al
je r-xdata
dec esi
push esi
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
dec esi
push esi
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ esi - 0x1 ] al
mov eax 0x1
pop esi
add esp 0x80
retn
dec al
mov [ esi - 0x1 ] al
xor eax eax
pop esi
add esp 0x80
retn
sub_403f70
push 0xffffffff
push sub_406bd9
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x318
push ebx
push ebp
push esi
push edi
mov ecx 0x40
xor eax eax
lea edi [ esp + 0x225 ]
mov [ esp + 0x224 ] 0x0
[ edi ]
mov ebx [ esp + 0x33c ]
mov cx [ rw-data ]
mov dl [ rw-data ]
xor esi esi
stosw [ edi ]
stosb [ edi ]
mov eax [ rw-data ]
cmp ebx esi
mov [ esp + 0x14 ] eax
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Nullstr::_C::~_C@IAT ]
mov [ esp + 0x330 ] esi
mov [ esp + 0x10 ] esi
mov [ esp + 0x18 ] cx
mov [ esp + 0x1a ] dl
je r-xdata
mov ecx [ esp + 0x340 ]
mov ebp [ mbstowcs@IAT ]
inc ecx
lea edx [ esp + 0x1c ]
push ecx
push eax
push edx
call ebp
lea eax [ esp + 0x28 ]
push esi
push eax
call [ wcschr@IAT ]
mov esi eax
lea edi [ esp + 0x28 ]
or ecx 0xffffffff
xor eax eax
add esi 0x2
[ edi ]
not ecx
push ecx
lea ecx [ esp + 0x2c ]
push ecx
push esi
call ebp
add esp 0x20
cmp eax 0xffffffff
jne r-xdata
mov eax ebx
lea eax [ esp + 0x10 ]
lea ecx [ esp + 0x1c ]
push eax
push 0x2
push esi
push ecx
call NetShareGetInfo
test eax eax
je r-xdata
call [ GetLastError@IAT ]
lea edx [ esp + 0x224 ]
push eax
push edx
push rw-data
call [ printf@IAT ]
add esp 0xc
test ebx ebx
je r-xdata
mov ecx 0x82
xor eax eax
lea edi [ esp + 0x1c ]
push 0x208
[ edi ]
mov eax [ esp + 0x14 ]
lea edx [ esp + 0x20 ]
mov ecx [ eax + 0x18 ]
push ecx
push edx
call [ wcstombs@IAT ]
lea eax [ esp + 0x28 ]
push 0x0
push eax
call [ strchr@IAT ]
mov cl [ eax - 0x1 ]
add esp 0x14
cmp cl 0x5c
je r-xdata
lea edx [ esp + 0x224 ]
push eax
push edx
push rw-data
call [ printf@IAT ]
add esp 0xc
test ebx ebx
je r-xdata
xor eax eax
jmp r-xdata
mov al [ ebx - 0x1 ]
test al al
je r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x1c ]
[ edi ]
not ecx
sub edi ecx
push 0x1
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x20 ]
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
mov ebp ecx
mov ecx rw-data
push ebp
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Grow@IAT ]
test al al
je r-xdata
mov [ eax ] 0x5c
mov al [ ebx - 0x1 ]
test al al
je r-xdata
mov ecx [ esp + 0x328 ]
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x324
retn
dec ebx
push ebx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
test ebx ebx
je r-xdata
mov edi [ rw-data ]
mov ecx ebp
mov eax ecx
lea esi [ esp + 0x1c ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ rw-data ]
mov [ rw-data ] ebp
mov [ ecx + ebp ] 0x0
cmp al 0xff
je r-xdata
dec al
mov [ ebx - 0x1 ] al
xor eax eax
jmp r-xdata
mov eax 0x1
mov al [ ebx - 0x1 ]
test al al
je r-xdata
dec al
mov [ ebx - 0x1 ] al
xor eax eax
jmp r-xdata
dec ebx
push ebx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ebx - 0x1 ] al
jmp r-xdata
sub_4041c0
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x4 ]
push ebx
push ebp
push esi
mov esi ecx
mov cl [ eax ]
push edi
mov [ esi ] cl
mov al [ edx ]
xor ebx ebx
push 0x30
mov [ esi + 0x1 ] al
mov [ esi + 0x8 ] bl
call ??2@YAPAXI@Z
mov edi eax
add esp 0x4
lea ecx [ esp + 0x18 ]
mov ebp edi
mov [ edi + 0x4 ] ebx
mov [ edi + 0x2c ] 0x1
call [ std::_Lockit::_Lockit@IAT ]
cmp [ rw-data ] ebx
jne r-xdata
mov ecx [ rw-data ]
inc ecx
mov [ rw-data ] ecx
lea ecx [ esp + 0x18 ]
call [ std::_Lockit::~_Lockit@IAT ]
cmp ebp ebx
je r-xdata
mov [ rw-data ] edi
mov [ edi ] ebx
mov ecx [ rw-data ]
xor ebp ebp
mov [ ecx + 0x8 ] ebx
mov edi [ rw-data ]
push 0x30
call ??2@YAPAXI@Z
mov [ eax + 0x4 ] edi
mov [ eax + 0x2c ] ebx
mov [ esi + 0x4 ] eax
mov [ esi + 0xc ] ebx
mov [ eax ] eax
mov eax [ esi + 0x4 ]
add esp 0x4
mov [ eax + 0x8 ] eax
mov eax esi
pop edi
pop esi
pop ebp
pop ebx
retn 0x8
push ebp
call sub_4068b4
add esp 0x4
sub_404270
sub esp 0x8
push ebx
push ebp
push esi
mov esi ecx
push edi
xor ebp ebp
mov edi [ esi + 0x4 ]
mov ecx [ esi + 0xc ]
cmp ecx ebp
mov eax [ edi ]
mov [ esp + 0x10 ] eax
je r-xdata
cmp eax edi
je r-xdata
mov ecx eax
cmp eax ecx
jne r-xdata
mov eax [ esi + 0x4 ]
push eax
call sub_4068b4
add esp 0x4
mov [ esi + 0x4 ] ebp
mov [ esi + 0xc ] ebp
lea ecx [ esp + 0x10 ]
xor esi esi
call [ std::_Lockit::_Lockit@IAT ]
mov eax [ rw-data ]
dec eax
mov [ rw-data ] eax
jne r-xdata
lea ecx [ esp + 0x10 ]
mov ebx eax
call sub_4049c0
lea edx [ esp + 0x14 ]
push ebx
push edx
mov ecx esi
call sub_404450
mov eax [ esp + 0x10 ]
cmp eax edi
jne r-xdata
mov ebx [ edi + 0x4 ]
mov eax [ rw-data ]
cmp ebx eax
mov edi ebx
je r-xdata
lea ecx [ esp + 0x10 ]
call [ std::_Lockit::~_Lockit@IAT ]
cmp esi ebp
je r-xdata
mov esi [ rw-data ]
mov [ rw-data ] ebp
mov ecx [ esi + 0x4 ]
mov [ ecx + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ esi + 0xc ] ebp
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
jmp r-xdata
mov eax [ edi + 0x8 ]
mov ecx esi
push eax
call sub_4048f0
mov edi [ edi ]
push ebp
lea ecx [ ebx + 0xc ]
call sub_404a10
push ebx
call sub_4068b4
mov eax [ rw-data ]
add esp 0x4
cmp edi eax
mov ebx edi
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x8
retn
push esi
call sub_4068b4
add esp 0x4
sub_404370
push ebx
push ebp
push esi
mov ebp [ esp + 0x18 ]
mov esi [ esp + 0x14 ]
push edi
mov edi ecx
mov eax [ edi + 0xc ]
test eax eax
je r-xdata
cmp esi ebp
je r-xdata
mov eax [ edi + 0x4 ]
cmp esi [ eax ]
jne r-xdata
mov eax [ esp + 0x14 ]
pop edi
mov [ eax ] esi
pop esi
pop ebp
pop ebx
retn 0xc
mov eax [ esi + 0x8 ]
mov ecx [ rw-data ]
cmp eax ecx
mov ebx esi
je r-xdata
cmp ebp eax
jne r-xdata
mov eax [ esi + 0x4 ]
cmp esi [ eax + 0x8 ]
jne r-xdata
push eax
call sub_4049a0
add esp 0x4
jmp r-xdata
mov ebx [ eax + 0x4 ]
mov eax [ rw-data ]
cmp ebx eax
mov esi ebx
je r-xdata
cmp [ esi + 0x8 ] eax
je r-xdata
mov esi eax
mov eax [ eax + 0x4 ]
cmp esi [ eax + 0x8 ]
je r-xdata
mov esi eax
mov ecx [ edi + 0x4 ]
mov [ ecx + 0x4 ] eax
mov eax [ edi + 0x4 ]
mov [ edi + 0xc ] 0x0
mov [ eax ] eax
mov eax [ edi + 0x4 ]
mov [ eax + 0x8 ] eax
mov edx [ edi + 0x4 ]
mov eax [ esp + 0x14 ]
pop edi
mov ecx [ edx ]
pop esi
pop ebp
mov [ eax ] ecx
pop ebx
retn 0xc
mov eax [ esi + 0x8 ]
mov ecx edi
push eax
call sub_4048f0
mov esi [ esi ]
lea ecx [ ebx + 0xc ]
call sub_404a30
push ebx
call sub_4068b4
mov eax [ rw-data ]
add esp 0x4
cmp esi eax
mov ebx esi
jne r-xdata
lea edx [ esp + 0x1c ]
push ebx
push edx
mov ecx edi
call sub_404450
cmp esi ebp
jne r-xdata
sub_404450
push 0xffffffff
push sub_406bf9
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push ebp
mov [ esp + 0x8 ] ecx
push esi
push edi
mov edi [ esp + 0x34 ]
lea ecx [ esp + 0x34 ]
call sub_4049c0
mov esi [ edi ]
mov edx [ rw-data ]
lea ebx [ edi + 0x8 ]
cmp esi edx
mov [ esp + 0x14 ] edi
mov ebp ebx
jne r-xdata
mov eax [ ebx ]
cmp eax edx
je r-xdata
mov esi [ ebx ]
jmp r-xdata
lea ecx [ esp + 0x1c ]
call [ std::_Lockit::_Lockit@IAT ]
mov ecx [ esp + 0x14 ]
cmp ecx edi
je r-xdata
mov ecx [ eax ]
cmp ecx edx
je r-xdata
mov eax [ ecx + 0x4 ]
mov edx [ esp + 0x10 ]
mov [ esi + 0x4 ] eax
mov eax [ edx + 0x4 ]
cmp [ eax + 0x4 ] edi
jne r-xdata
mov eax [ edi ]
mov [ eax + 0x4 ] ecx
mov edx [ edi ]
mov [ ecx ] edx
mov eax [ ebx ]
cmp ecx eax
jne r-xdata
mov esi [ eax + 0x8 ]
lea ebp [ eax + 0x8 ]
mov [ esp + 0x14 ] eax
mov eax ecx
mov ecx [ eax ]
cmp ecx edx
jne r-xdata
mov eax [ edi + 0x4 ]
cmp [ eax ] edi
jne r-xdata
mov [ eax + 0x4 ] esi
jmp r-xdata
mov eax [ ecx + 0x4 ]
mov [ esi + 0x4 ] eax
mov eax [ ecx + 0x4 ]
mov [ eax ] esi
mov edx [ ebx ]
mov [ ebp ] edx
mov eax [ ebx ]
mov [ eax + 0x4 ] ecx
mov [ esi + 0x4 ] ecx
jmp r-xdata
mov [ eax + 0x8 ] esi
mov [ eax ] esi
jmp r-xdata
mov eax [ edx + 0x4 ]
mov [ esp + 0x18 ] eax
cmp [ eax ] edi
jne r-xdata
mov eax [ edi + 0x4 ]
cmp [ eax ] edi
jne r-xdata
mov [ eax + 0x4 ] ecx
jmp r-xdata
mov ebp [ esp + 0x10 ]
mov eax [ ebp + 0x4 ]
cmp [ eax + 0x4 ] edi
jne r-xdata
mov ebp [ edx + 0x4 ]
cmp [ ebp + 0x8 ] edi
jne r-xdata
mov ebp [ rw-data ]
cmp [ ebx ] ebp
jne r-xdata
mov [ eax + 0x8 ] ecx
mov [ eax ] ecx
jmp r-xdata
mov edx [ edi + 0x4 ]
mov [ esp + 0x14 ] edi
mov [ ecx + 0x4 ] edx
mov edx [ edi + 0x2c ]
mov eax [ ecx + 0x2c ]
mov [ ecx + 0x2c ] edx
mov [ edi + 0x2c ] eax
mov ecx edi
jmp r-xdata
mov ebp [ esp + 0x10 ]
mov ebx [ rw-data ]
mov eax [ edi ]
cmp eax ebx
jne r-xdata
mov ebx [ esi ]
mov edx esi
cmp ebx ebp
je r-xdata
mov ebx [ edi + 0x4 ]
mov [ eax ] ebx
jmp r-xdata
mov eax [ ecx + 0x2c ]
mov ebx 0x1
cmp eax ebx
jne r-xdata
lea ecx [ esp + 0x1c ]
call [ std::_Lockit::~_Lockit@IAT ]
mov ebx [ esp + 0x14 ]
lea esi [ ebx + 0xc ]
mov [ esp + 0x1c ] esi
mov ebp [ esi + 0x18 ]
mov edi [ esi + 0x14 ]
cmp edi ebp
mov [ esp + 0x28 ] 0x0
je r-xdata
mov eax [ ebp + 0x4 ]
cmp esi [ eax + 0x4 ]
je r-xdata
mov eax [ esi + 0x8 ]
mov edx esi
cmp eax ebx
je r-xdata
mov edx [ edi + 0x4 ]
jmp r-xdata
mov [ eax ] edx
mov edx [ esp + 0x10 ]
mov eax ebx
mov eax [ esi + 0x14 ]
push eax
call sub_4068b4
xor edi edi
add esp 0x4
mov [ esi + 0x14 ] edi
mov [ esi + 0x18 ] edi
mov [ esi + 0x1c ] edi
mov eax [ esi + 0x4 ]
cmp eax edi
je r-xdata
push edi
call sub_404ad0
add edi 0x10
add esp 0x4
cmp edi ebp
jne r-xdata
mov [ esi + 0x2c ] ebx
cmp [ esi + 0x2c ] ebx
jne r-xdata
mov [ ebp + 0x8 ] edx
mov edx eax
mov eax [ edx + 0x8 ]
cmp eax ebx
jne r-xdata
mov edx eax
mov eax [ edx ]
cmp eax ebp
jne r-xdata
mov eax [ esp + 0x18 ]
push ebx
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] edi
call sub_4068b4
mov eax [ esp + 0x14 ]
add esp 0x4
mov ecx [ eax + 0xc ]
pop edi
dec ecx
pop esi
mov [ eax + 0xc ] ecx
mov eax [ esp + 0x28 ]
mov ecx [ esp + 0x2c ]
pop ebp
mov [ eax ] ecx
mov ecx [ esp + 0x14 ]
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x1c
retn 0x8
lea ecx [ eax - 0x1 ]
mov al [ eax - 0x1 ]
test al al
je r-xdata
mov eax [ esi + 0x4 ]
cmp esi [ eax ]
jne r-xdata
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
mov eax [ eax ]
xor edi edi
cmp [ eax + 0x2c ] edi
jne r-xdata
mov eax [ eax + 0x8 ]
xor edi edi
cmp [ eax + 0x2c ] edi
jne r-xdata
dec al
mov [ ecx ] al
jmp r-xdata
mov ecx [ eax + 0x8 ]
cmp [ ecx + 0x2c ] ebx
jne r-xdata
mov [ eax + 0x2c ] ebx
mov eax [ esi + 0x4 ]
mov [ eax + 0x2c ] edi
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
mov [ eax ] edx
mov edx [ ecx + 0x8 ]
cmp edx [ rw-data ]
je r-xdata
mov ecx [ eax ]
cmp [ ecx + 0x2c ] ebx
jne r-xdata
mov [ eax + 0x2c ] ebx
mov ecx [ esi + 0x4 ]
mov [ ecx + 0x2c ] edi
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x8 ]
mov edx [ ecx ]
mov [ eax + 0x8 ] edx
mov edx [ ecx ]
cmp edx [ rw-data ]
je r-xdata
mov ecx [ eax ]
cmp [ ecx + 0x2c ] ebx
jne r-xdata
mov edx [ eax ]
cmp [ edx + 0x2c ] ebx
jne r-xdata
mov edx [ eax + 0x4 ]
mov [ ecx + 0x4 ] edx
mov edx [ ebp + 0x4 ]
cmp eax [ edx + 0x4 ]
jne r-xdata
mov [ edx + 0x4 ] eax
mov ecx [ eax + 0x8 ]
cmp [ ecx + 0x2c ] ebx
jne r-xdata
mov edx [ eax + 0x8 ]
cmp [ edx + 0x2c ] ebx
jne r-xdata
mov edx [ eax + 0x4 ]
mov [ ecx + 0x4 ] edx
mov edx [ ebp + 0x4 ]
cmp eax [ edx + 0x4 ]
jne r-xdata
mov [ edx + 0x4 ] eax
mov ecx [ esi + 0x4 ]
mov edx [ ecx + 0x2c ]
mov [ eax + 0x2c ] edx
mov ecx [ esi + 0x4 ]
mov [ ecx + 0x2c ] ebx
mov edx [ eax ]
mov [ edx + 0x2c ] ebx
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
mov [ eax ] edx
mov edx [ ecx + 0x8 ]
cmp edx [ rw-data ]
je r-xdata
mov edx [ eax + 0x8 ]
mov [ edx + 0x2c ] ebx
mov ecx [ eax + 0x8 ]
mov [ eax + 0x2c ] edi
mov edx [ ecx ]
mov [ eax + 0x8 ] edx
mov edx [ ecx ]
cmp edx [ rw-data ]
je r-xdata
mov [ eax + 0x2c ] edi
mov eax [ ebp + 0x4 ]
mov esi [ esi + 0x4 ]
cmp esi [ eax + 0x4 ]
jne r-xdata
mov edx [ eax + 0x4 ]
cmp eax [ edx + 0x8 ]
jne r-xdata
mov [ edx + 0x4 ] ecx
jmp r-xdata
mov ecx [ esi + 0x4 ]
mov edx [ ecx + 0x2c ]
mov [ eax + 0x2c ] edx
mov ecx [ esi + 0x4 ]
mov [ ecx + 0x2c ] ebx
mov edx [ eax + 0x8 ]
mov [ edx + 0x2c ] ebx
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x8 ]
mov edx [ ecx ]
mov [ eax + 0x8 ] edx
mov edx [ ecx ]
cmp edx [ rw-data ]
je r-xdata
mov edx [ eax ]
mov [ edx + 0x2c ] ebx
mov ecx [ eax ]
mov [ eax + 0x2c ] edi
mov edx [ ecx + 0x8 ]
mov [ eax ] edx
mov edx [ ecx + 0x8 ]
cmp edx [ rw-data ]
je r-xdata
jmp r-xdata
mov edx [ eax + 0x4 ]
cmp eax [ edx ]
jne r-xdata
mov [ edx + 0x4 ] ecx
jmp r-xdata
mov edx [ eax + 0x4 ]
mov [ ecx + 0x4 ] edx
mov edx [ ebp + 0x4 ]
cmp eax [ edx + 0x4 ]
jne r-xdata
mov [ edx + 0x4 ] eax
mov edx [ eax + 0x4 ]
mov [ ecx + 0x4 ] edx
mov edx [ ebp + 0x4 ]
cmp eax [ edx + 0x4 ]
jne r-xdata
mov [ edx + 0x4 ] eax
jmp r-xdata
mov [ edx ] ecx
mov [ edx + 0x8 ] ecx
jmp r-xdata
mov [ ecx + 0x8 ] eax
mov [ eax + 0x4 ] ecx
mov eax [ esi + 0x4 ]
mov eax [ eax ]
mov edx [ eax + 0x4 ]
mov [ ecx + 0x4 ] edx
mov edx [ ebp + 0x4 ]
cmp eax [ edx + 0x4 ]
jne r-xdata
mov [ edx + 0x4 ] eax
mov edx [ eax + 0x4 ]
mov [ ecx + 0x4 ] edx
mov edx [ ebp + 0x4 ]
cmp eax [ edx + 0x4 ]
jne r-xdata
mov [ edx + 0x4 ] eax
mov [ edx + 0x8 ] ecx
mov [ edx ] ecx
jmp r-xdata
mov [ ecx ] eax
mov [ eax + 0x4 ] ecx
mov eax [ esi + 0x4 ]
mov eax [ eax + 0x8 ]
mov edx [ eax + 0x4 ]
cmp eax [ edx + 0x8 ]
jne r-xdata
mov [ edx + 0x4 ] ecx
jmp r-xdata
mov edx [ eax + 0x4 ]
cmp eax [ edx ]
jne r-xdata
mov [ edx + 0x4 ] ecx
jmp r-xdata
mov edx [ eax + 0x4 ]
cmp eax [ edx ]
jne r-xdata
mov [ edx + 0x4 ] ecx
mov [ ecx ] eax
jmp r-xdata
mov edx [ eax + 0x4 ]
cmp eax [ edx + 0x8 ]
jne r-xdata
mov [ edx + 0x4 ] ecx
jmp r-xdata
mov [ edx ] ecx
mov [ edx + 0x8 ] ecx
jmp r-xdata
mov [ ecx + 0x8 ] eax
mov [ edx + 0x8 ] ecx
mov [ edx ] ecx
jmp r-xdata
mov [ ecx ] eax
mov [ eax + 0x4 ] ecx
mov eax [ esi + 0x4 ]
mov eax [ eax ]
mov [ edx + 0x8 ] ecx
mov [ ecx ] eax
jmp r-xdata
mov [ edx ] ecx
mov [ ecx ] eax
jmp r-xdata
mov [ eax + 0x4 ] ecx
mov [ edx ] ecx
mov [ edx + 0x8 ] ecx
jmp r-xdata
mov [ ecx + 0x8 ] eax
mov [ eax + 0x4 ] ecx
mov eax [ esi + 0x4 ]
mov eax [ eax + 0x8 ]
sub_4048f0
mov eax [ rw-data ]
push ebx
push esi
push edi
mov edi [ esp + 0x10 ]
mov ebx ecx
cmp edi eax
mov esi edi
je r-xdata
pop edi
pop esi
pop ebx
retn 0x4
mov eax [ esi + 0x8 ]
mov ecx ebx
push eax
call sub_4048f0
mov esi [ esi ]
lea ecx [ edi + 0xc ]
call sub_404a30
push edi
call sub_4068b4
mov eax [ rw-data ]
add esp 0x4
cmp esi eax
mov edi esi
jne r-xdata
sub_404940
push esi
mov esi [ rw-data ]
push edi
mov edi [ ecx ]
mov edx [ edi + 0x8 ]
cmp edx esi
je r-xdata
mov eax [ edi + 0x4 ]
mov edx [ ecx ]
cmp edx [ eax + 0x8 ]
jne r-xdata
mov eax [ edx ]
cmp eax esi
je r-xdata
mov edx [ ecx ]
cmp [ edx + 0x8 ] eax
je r-xdata
mov [ ecx ] eax
mov eax [ eax + 0x4 ]
mov edx [ ecx ]
cmp edx [ eax + 0x8 ]
je r-xdata
mov eax [ esp + 0xc ]
mov [ ecx ] edx
mov [ eax ] edi
pop edi
pop esi
retn 0x8
mov edx eax
mov eax [ edx ]
cmp eax esi
jne r-xdata
mov eax [ esp + 0xc ]
mov [ eax ] edi
pop edi
pop esi
retn 0x8
mov [ ecx ] eax
sub_4049c0
mov eax [ ecx ]
push esi
mov esi [ rw-data ]
mov edx [ eax + 0x8 ]
cmp edx esi
je r-xdata
mov eax [ eax + 0x4 ]
mov edx [ ecx ]
cmp edx [ eax + 0x8 ]
jne r-xdata
mov eax [ edx ]
cmp eax esi
je r-xdata
mov edx [ ecx ]
cmp [ edx + 0x8 ] eax
je r-xdata
mov [ ecx ] eax
mov eax [ eax + 0x4 ]
mov edx [ ecx ]
cmp edx [ eax + 0x8 ]
je r-xdata
mov [ ecx ] edx
pop esi
retn
mov edx eax
mov eax [ edx ]
cmp eax esi
jne r-xdata
pop esi
retn
mov [ ecx ] eax
sub_404a30
push 0xffffffff
push sub_406c19
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ebx
push ebp
push esi
push edi
mov edi ecx
mov [ esp + 0x10 ] edi
mov ebp [ edi + 0x18 ]
mov esi [ edi + 0x14 ]
xor ebx ebx
cmp esi ebp
mov [ esp + 0x1c ] ebx
je r-xdata
mov eax [ edi + 0x14 ]
push eax
call sub_4068b4
mov [ edi + 0x14 ] ebx
mov [ edi + 0x18 ] ebx
mov [ edi + 0x1c ] ebx
mov eax [ edi + 0x4 ]
add esp 0x4
cmp eax ebx
je r-xdata
push 0x1
mov ecx esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
add esi 0x10
cmp esi ebp
jne r-xdata
mov ecx [ esp + 0x14 ]
mov [ edi + 0x4 ] ebx
mov [ edi + 0x8 ] ebx
mov [ edi + 0xc ] ebx
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
lea ecx [ eax - 0x1 ]
mov al [ eax - 0x1 ]
cmp al bl
je r-xdata
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx ] al
jmp r-xdata
sub_404ad0
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
mov [ esi + 0xc ] 0x0
pop esi
retn
lea ecx [ eax - 0x1 ]
mov al [ eax - 0x1 ]
test al al
je r-xdata
push ecx
call sub_4068b4
add esp 0x4
cmp al 0xff
je r-xdata
dec al
mov [ ecx ] al
jmp r-xdata
sub_404bba
push ebp
mov ebp esp
sub esp 0x50
or [ ebp - 0x1 ] 0xff
push ebx
push edi
push rw-data
push [ ebp + 0x8 ]
mov [ ebp - 0x10 ] ecx
mov [ ebp - 0xc ] 0xcc
mov [ ebp - 0x2 ] 0x1b
mov [ ebp - 0x3 ] 0x34
mov [ ebp - 0x4 ] 0x5e
mov [ ebp - 0x5 ] 0x2d
call [ fopen@IAT ]
mov ebx eax
pop ecx
test ebx ebx
pop ecx
jne r-xdata
push esi
push 0x2
push 0x0
push ebx
call [ fseek@IAT ]
push [ ebx + 0x10 ]
call [ _filelength@IAT ]
add esp 0x10
mov esi [ fwrite@IAT ]
cdq
push 0x4
pop ecx
idiv ecx
test edx edx
je r-xdata
call [ GetLastError@IAT ]
and [ ebp - 0x30 ] bl
push 0x7
mov edx eax
pop ecx
xor eax eax
lea edi [ ebp - 0x2f ]
[ edi ]
stosw [ edi ]
stosb [ edi ]
push edx
push rw-data
lea eax [ ebp - 0x30 ]
push rw-data
push eax
call [ sprintf@IAT ]
add esp 0x10
lea eax [ ebp - 0x30 ]
push eax
call [ OutputDebugStringA@IAT ]
xor eax eax
jmp r-xdata
push ebx
push 0x1
pop edi
lea eax [ ebp - 0x2 ]
push edi
push edi
push eax
call esi
push ebx
push edi
lea eax [ ebp - 0x3 ]
push edi
push eax
call esi
push ebx
push edi
lea eax [ ebp - 0x4 ]
push edi
push eax
call esi
push ebx
push edi
lea eax [ ebp - 0x5 ]
push edi
push eax
call esi
add esp 0x40
push ebx
push edi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
push ebx
push edi
lea eax [ ebp - 0xc ]
push 0x4
push eax
call esi
push ebx
push edi
push [ ebp - 0xc ]
push [ ebp - 0x10 ]
call esi
add esp 0x30
call [ GetLastError@IAT ]
and [ ebp - 0x50 ] 0x0
push 0x7
mov edx eax
pop ecx
xor eax eax
lea edi [ ebp - 0x4f ]
[ edi ]
stosw [ edi ]
stosb [ edi ]
push edx
push rw-data
lea eax [ ebp - 0x50 ]
push rw-data
push eax
call [ sprintf@IAT ]
add esp 0x10
lea eax [ ebp - 0x50 ]
push eax
call [ OutputDebugStringA@IAT ]
push ebx
call [ fclose@IAT ]
pop ecx
push 0x1
pop eax
pop esi
push ecx
pop eax
sub eax edx
test eax eax
jle r-xdata
pop edi
pop ebx
leave
retn 0xc
mov edi eax
push ebx
push 0x1
lea eax [ ebp - 0x1 ]
push 0x1
push eax
call esi
add esp 0x10
dec edi
jne r-xdata
sub_404d15
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
test ebx ebx
mov esi ecx
je r-xdata
xor al al
cmp [ ebp + 0xc ] 0x0
je r-xdata
cmp [ ebp + 0x14 ] 0x0
je r-xdata
mov eax [ ebp + 0x10 ]
lea edi [ eax + 0x7 ]
and edi 0xfffffff8
je r-xdata
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
call sub_404ddd
cmp [ esi + 0x600 ] 0x0
jne r-xdata
sar edi 0x3
mov eax edi
test eax eax
jle r-xdata
sar edi 0x3
test edi edi
jle r-xdata
mov al 0x1
jmp r-xdata
cmp [ ebp + 0x1c ] 0x0
lea edi [ esi + 0x300 ]
mov [ ebp + 0x14 ] eax
sete [ ebp + 0x8 ]
push [ ebp + 0x1c ]
mov ecx esi
push esi
push [ ebp + 0xc ]
push ebx
call sub_404e48
add [ ebp + 0xc ] 0x8
add ebx 0x8
dec edi
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0x18
push [ ebp + 0x1c ]
mov ecx esi
push esi
push [ ebp + 0xc ]
push ebx
call sub_404e48
push [ ebp + 0x8 ]
mov ecx esi
push edi
push ebx
push ebx
call sub_404e48
push [ ebp + 0x1c ]
mov ecx esi
push esi
push ebx
push ebx
call sub_404e48
add [ ebp + 0xc ] 0x8
add ebx 0x8
dec [ ebp + 0x14 ]
jne r-xdata
jmp r-xdata
sub_404ddd
push esi
mov esi ecx
push edi
push 0x10
lea edi [ esi + 0x701 ]
push 0x0
push edi
call memset
add esp 0xc
cmp [ esp + 0x10 ] 0x10
jle r-xdata
mov eax [ esp + 0x10 ]
push 0x10
pop eax
jmp r-xdata
xor al al
lea eax [ esi + 0x709 ]
mov ecx esi
push eax
lea eax [ esi + 0x300 ]
push eax
call sub_404f62
mov al 0x1
jmp r-xdata
push eax
push [ esp + 0x10 ]
push edi
call memcpy
add esp 0xc
mov ecx esi
push edi
push esi
call sub_404f62
cmp [ esp + 0x10 ] 0x8
jle r-xdata
mov [ esi + 0x600 ] al
pop edi
pop esi
retn 0x8
sub_404e48
push ebp
mov ebp esp
push ebx
push esi
push edi
push 0x40
push [ ebp + 0xc ]
mov edi rw-data
mov ebx ecx
push edi
call sub_405131
push 0x40
push r--data
push edi
push edi
mov ecx ebx
call sub_405090
cmp [ ebp + 0x14 ] 0x0
mov eax [ ebp + 0x10 ]
jne r-xdata
add eax 0x2d0
mov [ ebp + 0x10 ] 0x10
mov [ ebp + 0x14 ] eax
mov esi rw-data
mov [ ebp + 0x14 ] eax
mov [ ebp + 0x10 ] 0x10
mov esi rw-data
push 0x20
push [ rw-data ]
push esi
call memcpy
add esp 0xc
mov ecx ebx
push [ ebp + 0x14 ]
push [ rw-data ]
call sub_404fe8
push 0x20
mov ecx ebx
push [ rw-data ]
push [ rw-data ]
call sub_4050d0
push 0x20
push esi
push [ rw-data ]
call memcpy
sub [ ebp + 0x14 ] 0x30
add esp 0xc
dec [ ebp + 0x10 ]
jne r-xdata
push 0x40
push r--data
push edi
push edi
mov ecx ebx
call sub_405090
push 0x40
push edi
push [ ebp + 0x8 ]
mov ecx ebx
call sub_405162
pop edi
pop esi
pop ebx
pop ebp
retn 0x10
push 0x20
push [ rw-data ]
push esi
call memcpy
add esp 0xc
mov ecx ebx
push [ ebp + 0x14 ]
push [ rw-data ]
call sub_404fe8
push 0x20
mov ecx ebx
push [ rw-data ]
push [ rw-data ]
call sub_4050d0
push 0x20
push esi
push [ rw-data ]
call memcpy
add [ ebp + 0x14 ] 0x30
add esp 0xc
dec [ ebp + 0x10 ]
jne r-xdata
jmp r-xdata
sub_404f62
push ebx
push ebp
push esi
push edi
push 0x40
mov edi rw-data
push [ esp + 0x1c ]
mov ebx ecx
push edi
call sub_405131
push 0x38
push r--data
push edi
push edi
mov ecx ebx
call sub_405090
mov eax [ esp + 0x14 ]
xor ebp ebp
mov [ esp + 0x18 ] eax
movsx eax [ ebp + r--data ]
lea esi [ ebp + r--data ]
push eax
push 0x1c
mov ecx ebx
push [ rw-data ]
call sub_4050f0
movsx eax [ esi ]
push eax
push 0x1c
push [ rw-data ]
mov ecx ebx
call sub_4050f0
push 0x30
push r--data
push edi
mov ecx ebx
push [ esp + 0x24 ]
call sub_405090
add [ esp + 0x18 ] 0x30
inc ebp
cmp ebp 0x10
jl r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn 0x8
sub_404fe8
push ebx
mov ebx [ esp + 0x8 ]
push esi
push edi
push 0x30
push r--data
mov esi rw-data
push ebx
mov edi ecx
push esi
call sub_405090
push 0x30
mov ecx edi
push [ esp + 0x18 ]
push esi
call sub_4050d0
push esi
push ebx
mov ecx edi
call sub_405031
push 0x20
push r--data
push ebx
push ebx
mov ecx edi
call sub_405090
pop edi
pop esi
pop ebx
retn 0x8
sub_405031
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
push 0x8
mov [ ebp - 0x4 ] ecx
xor edi edi
pop ebx
mov al [ esi + 0x1 ]
mov cl [ esi ]
shl al 0x1
add al [ esi + 0x2 ]
push 0x4
shl cl 0x1
add cl [ esi + 0x5 ]
shl al 0x1
add al [ esi + 0x3 ]
movsx ecx cl
shl al 0x1
add al [ esi + 0x4 ]
add ecx edi
shl ecx 0x4
movsx eax al
lea eax [ eax + ecx + r--data ]
mov ecx [ ebp - 0x4 ]
push eax
push [ ebp + 0x8 ]
call sub_405131
add [ ebp + 0x8 ] 0x4
add edi 0x4
add esi 0x6
dec ebx
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_405090
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0x14 ] eax
jle r-xdata
push [ ebp + 0x14 ]
add ecx 0x601
push ecx
push [ ebp + 0x8 ]
call memcpy
add esp 0xc
pop ebp
retn 0x10
push esi
mov edx [ ebp + 0x10 ]
mov esi [ ebp + 0xc ]
movsx edx [ eax + edx ]
inc eax
mov dl [ edx + esi - 0x1 ]
cmp eax [ ebp + 0x14 ]
mov [ ecx + eax + 0x600 ] dl
jl r-xdata
pop esi
sub_4050d0
push esi
mov esi [ esp + 0x10 ]
test esi esi
jle r-xdata
pop esi
retn 0xc
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0xc ]
sub ecx eax
mov dl [ ecx + eax ]
xor [ eax ] dl
inc eax
dec esi
jne r-xdata
sub_4050f0
push ebx
push esi
mov esi [ esp + 0xc ]
push edi
mov edi [ esp + 0x18 ]
lea ebx [ ecx + 0x601 ]
push edi
push esi
push ebx
call memcpy
mov eax [ esp + 0x20 ]
sub eax edi
push eax
lea eax [ esi + edi ]
push eax
push esi
call memcpy
sub esi edi
push edi
add esi [ esp + 0x30 ]
push ebx
push esi
call memcpy
add esp 0x24
pop edi
pop esi
pop ebx
retn 0xc
sub_405131
xor eax eax
cmp [ esp + 0xc ] eax
jle r-xdata
retn 0xc
push esi
mov esi [ esp + 0xc ]
mov edx eax
sar edx 0x3
mov cl al
mov dl [ edx + esi ]
and cl 0x7
sar dl cl
mov ecx [ esp + 0x8 ]
and dl 0x1
mov [ eax + ecx ] dl
inc eax
cmp eax [ esp + 0x10 ]
jl r-xdata
pop esi
sub_405162
push ebp
mov ebp esp
mov eax [ ebp + 0x10 ]
push esi
sar eax 0x3
push edi
mov edi [ ebp + 0x8 ]
xor esi esi
push eax
push esi
push edi
call memset
add esp 0xc
cmp [ ebp + 0x10 ] esi
jle r-xdata
pop edi
pop esi
pop ebp
retn 0xc
mov edx [ ebp + 0xc ]
mov ecx esi
mov eax esi
and ecx 0x7
mov dl [ esi + edx ]
sar eax 0x3
shl dl cl
add eax edi
or [ eax ] dl
inc esi
cmp esi [ ebp + 0x10 ]
jl r-xdata
sub_4051a4
mov eax sub_406c6a
call sub_406a60
sub esp 0x7c
push ebx
mov ebx ecx
push esi
mov [ ebp - 0x1c ] ebx
call sub_4057d9
mov al [ ebp + 0xb ]
push 0x0
lea ecx [ ebp - 0x48 ]
mov [ ebp - 0x48 ] al
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
and [ ebp - 0x4 ] 0x0
push 0x1
pop eax
cmp [ ebp + 0x8 ] eax
mov [ ebp - 0x18 ] eax
jle r-xdata
mov esi [ ebx + 0xc ]
or [ ebp - 0x4 ] 0xffffffff
push 0x1
lea ecx [ ebp - 0x48 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov ecx [ ebp - 0xc ]
mov eax esi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
leave
retn 0x8
mov eax [ ebp + 0xc ]
push edi
mov [ ebp - 0x10 ] 0x2
lea esi [ eax + 0x4 ]
add eax 0x8
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x48 ]
mov ecx ebx
push eax
lea eax [ ebp - 0x20 ]
push eax
call sub_4057ed
mov eax [ ebx + 0x4 ]
mov ebx [ ebp - 0x20 ]
cmp ebx eax
je r-xdata
mov edi [ esi ]
push edi
call strlen
pop ecx
push eax
push edi
lea ecx [ ebp - 0x48 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
mov al [ ebp + 0xb ]
push 0x0
lea ecx [ ebp - 0x38 ]
mov [ ebp - 0x38 ] al
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov eax [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x1
cmp eax [ ebp + 0x8 ]
jge r-xdata
mov ebx [ ebp - 0x1c ]
mov al [ ebp + 0xb ]
mov edi [ esi ]
push 0x0
lea ecx [ ebp - 0x68 ]
mov [ ebp - 0x68 ] al
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
push edi
call strlen
pop ecx
push eax
push edi
lea ecx [ ebp - 0x68 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
lea eax [ ebp - 0x68 ]
lea ecx [ ebx + 0x1c ]
push eax
mov [ ebp - 0x4 ] 0x6
call sub_405675
and [ ebp - 0x4 ] 0x0
push 0x1
lea ecx [ ebp - 0x68 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
lea eax [ ebp + 0xf ]
lea ecx [ ebp - 0x58 ]
push eax
call sub_405627
lea eax [ ebp - 0x38 ]
push rw-data
push eax
mov [ ebp - 0x4 ] 0x2
call [ std::operator!=@IAT ]
pop ecx
test al al
pop ecx
je r-xdata
mov edi [ ebp - 0x14 ]
mov ecx ebx
push [ edi ]
call sub_4053c9
test al al
jne r-xdata
push [ esi ]
mov ecx ebx
call sub_4053c9
test al al
je r-xdata
pop edi
lea eax [ ebp - 0x48 ]
lea ecx [ ebp - 0x88 ]
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
lea eax [ ebp - 0x58 ]
lea ecx [ ebp - 0x78 ]
push eax
mov [ ebp - 0x4 ] 0x3
call sub_405686
lea eax [ ebp - 0x88 ]
mov ecx ebx
push eax
lea eax [ ebp - 0x28 ]
push eax
mov [ ebp - 0x4 ] 0x4
call sub_40572a
lea ecx [ ebp - 0x78 ]
mov [ ebp - 0x4 ] 0x5
call sub_40563f
push 0x1
lea ecx [ ebp - 0x88 ]
mov [ ebp - 0x4 ] 0x2
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
lea ecx [ ebp - 0x58 ]
mov [ ebp - 0x4 ] 0x1
call sub_40563f
and [ ebp - 0x4 ] 0x0
push 0x1
lea ecx [ ebp - 0x38 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
jmp r-xdata
lea eax [ ebp - 0x38 ]
lea ecx [ ebp - 0x58 ]
push eax
push [ ebp - 0x50 ]
call sub_405700
mov edi rw-data
push edi
call strlen
pop ecx
push eax
push edi
lea ecx [ ebp - 0x38 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
mov edi [ edi ]
push edi
call strlen
pop ecx
push eax
push edi
lea ecx [ ebp - 0x38 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
inc [ ebp - 0x18 ]
inc [ ebp - 0x10 ]
add [ ebp - 0x14 ] 0x4
add esi 0x4
jmp r-xdata
inc [ ebp - 0x18 ]
inc [ ebp - 0x10 ]
mov eax [ ebp - 0x18 ]
add [ ebp - 0x14 ] 0x4
add esi 0x4
cmp eax [ ebp + 0x8 ]
jl r-xdata
sub_4053c9
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
xor al al
push esi
call strlen
cmp eax 0x1
pop ecx
jle r-xdata
cmp [ esi ] 0x2d
jne r-xdata
movsx eax [ esi + 0x1 ]
push eax
call [ isdigit@IAT ]
neg eax
sbb eax eax
pop ecx
inc eax
jmp r-xdata
pop esi
retn 0x4
sub_4053fc
mov eax sub_406c7d
call sub_406a60
sub esp 0x14
mov al [ ebp + 0xb ]
push esi
push edi
mov edi ecx
push 0x0
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x20 ] al
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
push [ ebp + 0x8 ]
call strlen
pop ecx
push eax
lea ecx [ ebp - 0x20 ]
push [ ebp + 0x8 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
and [ ebp - 0x4 ] 0x0
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
mov ecx edi
call sub_4057ed
mov esi [ ebp - 0x10 ]
or [ ebp - 0x4 ] 0xffffffff
push 0x1
lea ecx [ ebp - 0x20 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov ecx [ ebp - 0xc ]
xor eax eax
cmp esi [ edi + 0x4 ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
setne al
leave
retn 0x4
sub_405471
mov eax sub_406cb2
call sub_406a60
sub esp 0x28
mov al [ ebp + 0x17 ]
push ebx
push esi
push edi
mov edi ecx
xor ebx ebx
mov [ ebp - 0x10 ] esp
push ebx
lea ecx [ ebp - 0x24 ]
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x24 ] al
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
cmp [ ebp + 0x14 ] ebx
push 0x1
pop esi
mov [ ebp - 0x4 ] esi
je r-xdata
push [ ebp + 0x10 ]
lea eax [ ebp - 0x34 ]
mov ecx edi
mov [ ebp - 0x4 ] 0x2
push [ ebp + 0xc ]
push eax
call sub_40554e
mov ecx [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov [ ebp - 0x4 ] 0x3
push [ ecx ]
lea ecx [ ebp - 0x24 ]
push ebx
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
push esi
lea ecx [ ebp - 0x34 ]
mov [ ebp - 0x4 ] 0x2
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
jmp r-xdata
push [ ebp + 0x14 ]
call strlen
pop ecx
push eax
lea ecx [ ebp - 0x24 ]
push [ ebp + 0x14 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
mov edi [ ebp + 0x8 ]
mov al [ ebp - 0x24 ]
push ebx
mov ecx edi
mov [ ebp - 0x4 ] esi
mov [ edi ] al
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov ecx edi
push [ eax ]
lea eax [ ebp - 0x24 ]
push ebx
push eax
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
mov [ ebp - 0x14 ] esi
push esi
lea ecx [ ebp - 0x24 ]
mov [ ebp - 0x4 ] bl
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov ecx [ ebp - 0xc ]
mov eax edi
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn 0x10
sub_40554e
mov eax sub_406cc5
call sub_406a60
sub esp 0x14
push ebx
push esi
push edi
xor ebx ebx
push [ ebp + 0xc ]
mov edi ecx
mov [ ebp - 0x10 ] ebx
call sub_4053fc
test al al
je r-xdata
lea eax [ ebp + 0xc ]
push r--data
push eax
mov [ ebp + 0xc ] ebx
call _CxxThrowException
mov al [ ebp + 0xf ]
push ebx
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x20 ] al
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
push [ ebp + 0xc ]
call strlen
pop ecx
push eax
lea ecx [ ebp - 0x20 ]
push [ ebp + 0xc ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
lea eax [ ebp - 0x20 ]
mov ecx edi
push eax
lea eax [ ebp - 0x10 ]
push eax
mov [ ebp - 0x4 ] ebx
call sub_4057ed
mov esi [ ebp - 0x10 ]
or [ ebp - 0x4 ] 0xffffffff
push 0x1
lea ecx [ ebp - 0x20 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
cmp esi [ edi + 0x4 ]
je r-xdata
mov eax [ esi + 0x20 ]
cmp eax ebx
je r-xdata
mov ecx [ esi + 0x24 ]
sub ecx eax
mov eax [ ebp + 0x10 ]
sar ecx 0x4
cmp ecx eax
jbe r-xdata
mov esi [ esi + 0x20 ]
mov edi [ ebp + 0x8 ]
shl eax 0x4
add esi eax
push ebx
mov ecx edi
mov al [ esi ]
mov [ edi ] al
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov ecx edi
push [ eax ]
push ebx
push esi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
mov ecx [ ebp - 0xc ]
mov eax edi
pop edi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
leave
retn 0xc
sub_40563f
push ebx
push esi
mov esi ecx
push edi
mov ebx [ esi + 0x8 ]
mov edi [ esi + 0x4 ]
push [ esi + 0x4 ]
call sub_4068b4
xor eax eax
pop ecx
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] eax
pop edi
pop esi
pop ebx
retn
push 0x1
mov ecx edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
add edi 0x10
jmp r-xdata
cmp edi ebx
je r-xdata
sub_405698
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
mov edi ecx
mov al [ esi ]
mov [ edi ] al
mov ecx [ esi + 0x4 ]
test ecx ecx
jne r-xdata
mov eax [ esi + 0x8 ]
sub eax ecx
sar eax 0x4
xor eax eax
jmp r-xdata
shl eax 0x4
push eax
call ??2@YAPAXI@Z
mov [ edi + 0x4 ] eax
mov ebx [ esi + 0x8 ]
mov esi [ esi + 0x4 ]
pop ecx
mov [ ebp + 0x8 ] eax
xor eax eax
test eax eax
jge r-xdata
mov eax [ ebp + 0x8 ]
mov [ edi + 0x8 ] eax
mov [ edi + 0xc ] eax
mov eax edi
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
push esi
push [ ebp + 0x8 ]
call sub_405cd8
add [ ebp + 0x8 ] 0x10
pop ecx
pop ecx
add esi 0x10
jmp r-xdata
cmp esi ebx
je r-xdata
sub_405700
push esi
push edi
push [ esp + 0x10 ]
mov esi ecx
mov edi [ esi + 0x4 ]
push 0x1
push [ esp + 0x14 ]
call sub_405831
mov eax [ esp + 0xc ]
sub eax edi
pop edi
sar eax 0x4
shl eax 0x4
add eax [ esi + 0x4 ]
pop esi
retn 0x8
sub_40572a
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov edi ecx
mov eax [ edi + 0x4 ]
mov ebx eax
mov esi [ eax + 0x4 ]
mov al 0x1
cmp [ edi + 0x8 ] 0x0
je r-xdata
lea eax [ esi + 0xc ]
mov ebx esi
push eax
push [ ebp + 0xc ]
call [ std::operator<=@IAT ]
pop ecx
test al al
pop ecx
je r-xdata
test al al
mov [ ebp - 0x4 ] ebx
je r-xdata
push [ ebp + 0xc ]
lea eax [ ebp + 0xc ]
push ebx
push esi
jmp r-xdata
mov esi [ esi + 0x8 ]
jmp r-xdata
mov esi [ esi ]
jmp r-xdata
mov eax [ ebp - 0x4 ]
push [ ebp + 0xc ]
add eax 0xc
push eax
call [ std::operator<=@IAT ]
pop ecx
test al al
pop ecx
je r-xdata
mov eax [ edi + 0x4 ]
cmp ebx [ eax ]
jne r-xdata
push eax
mov ecx edi
call sub_405a80
mov ecx [ eax ]
mov eax [ ebp + 0x8 ]
mov [ eax ] ecx
mov [ eax + 0x4 ] 0x1
jmp r-xdata
cmp esi [ rw-data ]
je r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x4 ]
and [ eax + 0x4 ] 0x0
mov [ eax ] ecx
push [ ebp + 0xc ]
lea eax [ ebp + 0xc ]
push ebx
push esi
lea ecx [ ebp - 0x4 ]
call sub_405c9c
push [ ebp + 0xc ]
lea eax [ ebp + 0xc ]
push ebx
push esi
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_4057ed
push ebp
mov ebp esp
push ecx
push esi
mov esi ecx
push [ ebp + 0xc ]
call sub_405bda
cmp eax [ esi + 0x4 ]
mov [ ebp - 0x4 ] eax
je r-xdata
mov eax [ esi + 0x4 ]
mov [ ebp + 0xc ] eax
lea eax [ ebp + 0xc ]
add eax 0xc
push eax
push [ ebp + 0xc ]
call [ std::operator<=@IAT ]
pop ecx
test al al
pop ecx
jne r-xdata
lea eax [ ebp - 0x4 ]
jmp r-xdata
mov ecx [ eax ]
mov eax [ ebp + 0x8 ]
pop esi
mov [ eax ] ecx
leave
retn 0x8
sub_405831
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
mov esi ecx
push edi
mov edi [ ebp + 0xc ]
mov ebx [ esi + 0x8 ]
mov eax [ esi + 0xc ]
sub eax ebx
sar eax 0x4
cmp eax edi
jae r-xdata
mov edx [ ebp + 0x8 ]
mov eax ebx
sub eax edx
sar eax 0x4
cmp eax edi
jae r-xdata
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
test edi edi
jbe r-xdata
mov eax edi
mov [ ebp - 0x4 ] edx
shl eax 0x4
cmp edx ebx
mov [ ebp + 0xc ] eax
lea ecx [ eax + edx ]
je r-xdata
mov eax edi
mov eax ebx
sub eax ecx
sar eax 0x4
cmp edi eax
jb r-xdata
pop edi
pop esi
pop ebx
leave
retn 0xc
shl edi 0x4
mov [ ebp + 0xc ] edi
mov edi ebx
sub edi [ ebp + 0xc ]
mov [ ebp - 0x8 ] ebx
cmp edi ebx
je r-xdata
mov ecx [ esi + 0x8 ]
mov edx ecx
mov ebx ecx
sub edx [ ebp + 0x8 ]
sar edx 0x4
sub edi edx
je r-xdata
mov [ ebp - 0x8 ] ecx
sub ebx ecx
sar ebx 0x4
xor ebx ebx
jmp r-xdata
test ecx ecx
jne r-xdata
mov ebx [ esi + 0x8 ]
mov edi ebx
sub edi [ ebp + 0xc ]
cmp edx edi
je r-xdata
push edi
push [ ebp - 0x8 ]
call sub_405cd8
add [ ebp - 0x8 ] 0x10
add edi 0x10
pop ecx
cmp edi ebx
pop ecx
jne r-xdata
mov edi [ esi + 0x8 ]
mov ebx [ ebp + 0x8 ]
cmp ebx edi
je r-xdata
push [ ebp + 0x10 ]
push ebx
call sub_405cd8
pop ecx
add ebx 0x10
dec edi
pop ecx
jne r-xdata
push [ ebp - 0x4 ]
push [ ebp - 0x8 ]
call sub_405cd8
add [ ebp - 0x4 ] 0x10
add [ ebp - 0x8 ] 0x10
cmp [ ebp - 0x4 ] ebx
pop ecx
pop ecx
jne r-xdata
mov eax [ ebp + 0xc ]
shl eax 0x4
push eax
call ??2@YAPAXI@Z
mov ebx [ esi + 0x4 ]
pop ecx
mov [ ebp - 0xc ] eax
mov [ ebp + 0xc ] eax
xor eax eax
add eax ebx
test eax eax
mov [ ebp - 0x4 ] eax
jge r-xdata
mov eax [ ebp + 0xc ]
mov ebx edx
lea edi [ eax + edx ]
cmp edx edi
je r-xdata
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
sub edi 0x10
sub ebx 0x10
push [ eax ]
mov ecx ebx
push 0x0
push edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
cmp edi [ ebp + 0x8 ]
jne r-xdata
mov edx [ ebp + 0x8 ]
add [ esi + 0x8 ] eax
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov ecx ebx
push [ eax ]
push 0x0
push [ ebp + 0x10 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
add ebx 0x10
cmp ebx edi
jne r-xdata
mov eax [ ebp + 0xc ]
mov ebx [ ebp + 0xc ]
test edi edi
jbe r-xdata
push ebx
push [ ebp + 0xc ]
call sub_405cd8
add [ ebp + 0xc ] 0x10
pop ecx
pop ecx
add ebx 0x10
jmp r-xdata
mov eax [ ebp + 0xc ]
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov ecx ebx
push [ eax ]
push 0x0
push [ ebp + 0x10 ]
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
add ebx 0x10
cmp ebx edi
jne r-xdata
mov edx [ ebp + 0x8 ]
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov ebx [ esi + 0x8 ]
mov eax edi
shl eax 0x4
add eax ecx
mov ecx [ ebp + 0x8 ]
cmp ecx ebx
mov [ ebp + 0x8 ] ecx
je r-xdata
mov [ ebp - 0x8 ] edi
cmp ebx [ ebp + 0x8 ]
je r-xdata
mov eax [ esi + 0x8 ]
mov ebx [ esi + 0x4 ]
cmp ebx eax
mov [ ebp + 0x8 ] eax
je r-xdata
mov [ ebp + 0x10 ] eax
push [ ebp + 0x10 ]
push ebx
call sub_405cd8
pop ecx
add ebx 0x10
dec [ ebp - 0x8 ]
pop ecx
jne r-xdata
push [ esi + 0x4 ]
call sub_4068b4
mov eax [ ebp - 0x4 ]
mov edx [ ebp - 0xc ]
pop ecx
mov ecx [ esi + 0x4 ]
shl eax 0x4
add eax edx
test ecx ecx
mov [ esi + 0xc ] eax
jne r-xdata
push 0x1
mov ecx ebx
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
add ebx 0x10
cmp ebx [ ebp + 0x8 ]
jne r-xdata
push [ ebp + 0x8 ]
push [ ebp + 0x10 ]
call sub_405cd8
add [ ebp + 0x8 ] 0x10
add [ ebp + 0x10 ] 0x10
cmp [ ebp + 0x8 ] ebx
pop ecx
pop ecx
jne r-xdata
mov eax [ esi + 0x8 ]
sub eax ecx
sar eax 0x4
xor eax eax
jmp r-xdata
add eax edi
mov [ esi + 0x4 ] edx
shl eax 0x4
add eax edx
mov [ esi + 0x8 ] eax
jmp r-xdata
sub_405a80
push ebp
mov ebp esp
push ebx
push esi
push edi
mov ebx ecx
push 0x30
call ??2@YAPAXI@Z
mov esi [ ebp + 0x10 ]
mov edi eax
push [ ebp + 0x14 ]
and [ edi + 0x2c ] 0x0
mov [ edi + 0x4 ] esi
mov eax [ rw-data ]
mov [ edi ] eax
mov eax [ rw-data ]
mov [ edi + 0x8 ] eax
lea eax [ edi + 0xc ]
push eax
call sub_405d25
add esp 0xc
inc [ ebx + 0xc ]
cmp esi [ ebx + 0x4 ]
je r-xdata
mov [ esi ] edi
mov eax [ ebx + 0x4 ]
cmp esi eax
jne r-xdata
mov eax [ ebp + 0xc ]
cmp eax [ rw-data ]
jne r-xdata
cmp esi [ eax ]
jne r-xdata
mov [ eax + 0x4 ] edi
mov eax [ ebx + 0x4 ]
jmp r-xdata
lea eax [ esi + 0xc ]
push eax
push [ ebp + 0x14 ]
call [ std::operator<=@IAT ]
pop ecx
test al al
pop ecx
jne r-xdata
mov eax [ ebx + 0x4 ]
mov esi edi
cmp edi [ eax + 0x4 ]
je r-xdata
mov [ eax ] edi
mov [ eax + 0x8 ] edi
jmp r-xdata
mov [ esi + 0x8 ] edi
mov eax [ ebx + 0x4 ]
cmp esi [ eax + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
mov eax [ eax + 0x4 ]
mov [ eax + 0x2c ] 0x1
mov eax [ ebp + 0x8 ]
mov [ eax ] edi
pop edi
pop esi
pop ebx
pop ebp
retn 0x10
mov eax [ esi + 0x4 ]
cmp [ eax + 0x2c ] 0x0
jne r-xdata
mov edx [ eax + 0x4 ]
mov ecx [ edx ]
cmp eax ecx
jne r-xdata
cmp [ ecx + 0x2c ] 0x0
je r-xdata
mov ecx [ edx + 0x8 ]
cmp [ ecx + 0x2c ] 0x0
jne r-xdata
push 0x1
pop edx
mov [ eax + 0x2c ] edx
mov [ ecx + 0x2c ] edx
mov eax [ esi + 0x4 ]
mov eax [ eax + 0x4 ]
and [ eax + 0x2c ] 0x0
mov eax [ esi + 0x4 ]
mov esi [ eax + 0x4 ]
jmp r-xdata
cmp esi [ eax ]
jne r-xdata
cmp esi [ eax + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
cmp esi [ eax + 0x4 ]
jne r-xdata
mov eax [ esi + 0x4 ]
mov ecx ebx
mov [ eax + 0x2c ] 0x1
mov eax [ esi + 0x4 ]
mov eax [ eax + 0x4 ]
and [ eax + 0x2c ] 0x0
mov eax [ esi + 0x4 ]
push [ eax + 0x4 ]
call sub_405c12
mov esi eax
mov ecx ebx
push esi
call sub_405c56
mov eax [ esi + 0x4 ]
mov ecx ebx
mov [ eax + 0x2c ] 0x1
mov eax [ esi + 0x4 ]
mov eax [ eax + 0x4 ]
and [ eax + 0x2c ] 0x0
mov eax [ esi + 0x4 ]
push [ eax + 0x4 ]
call sub_405c56
jmp r-xdata
mov esi eax
mov ecx ebx
push esi
call sub_405c12
sub_405bda
mov eax [ ecx + 0x4 ]
push esi
push edi
mov edi eax
mov esi [ eax + 0x4 ]
mov eax edi
pop edi
pop esi
retn 0x4
push [ esp + 0xc ]
lea eax [ esi + 0xc ]
push eax
call [ std::operator<=@IAT ]
pop ecx
test al al
pop ecx
je r-xdata
mov edi esi
mov esi [ esi ]
jmp r-xdata
mov esi [ esi + 0x8 ]
jmp r-xdata
cmp esi [ rw-data ]
je r-xdata
sub_405c12
mov edx [ esp + 0x4 ]
push esi
mov eax [ edx + 0x8 ]
mov esi [ eax ]
mov [ edx + 0x8 ] esi
mov esi [ eax ]
cmp esi [ rw-data ]
je r-xdata
mov esi [ edx + 0x4 ]
mov [ eax + 0x4 ] esi
mov ecx [ ecx + 0x4 ]
pop esi
cmp edx [ ecx + 0x4 ]
jne r-xdata
mov [ esi + 0x4 ] edx
mov ecx [ edx + 0x4 ]
cmp edx [ ecx ]
jne r-xdata
mov [ ecx + 0x4 ] eax
jmp r-xdata
mov [ ecx + 0x8 ] eax
mov [ ecx ] eax
jmp r-xdata
mov [ eax ] edx
mov [ edx + 0x4 ] eax
retn 0x4
sub_405c56
mov edx [ esp + 0x4 ]
push esi
mov eax [ edx ]
mov esi [ eax + 0x8 ]
mov [ edx ] esi
mov esi [ eax + 0x8 ]
cmp esi [ rw-data ]
je r-xdata
mov esi [ edx + 0x4 ]
mov [ eax + 0x4 ] esi
mov ecx [ ecx + 0x4 ]
pop esi
cmp edx [ ecx + 0x4 ]
jne r-xdata
mov [ esi + 0x4 ] edx
mov ecx [ edx + 0x4 ]
cmp edx [ ecx + 0x8 ]
jne r-xdata
mov [ ecx + 0x4 ] eax
jmp r-xdata
mov [ ecx ] eax
mov [ ecx + 0x8 ] eax
jmp r-xdata
mov [ eax + 0x8 ] edx
mov [ edx + 0x4 ] eax
retn 0x4
sub_405c9c
mov eax [ ecx ]
push esi
cmp [ eax + 0x2c ] 0x0
jne r-xdata
mov edx [ eax ]
mov esi [ rw-data ]
cmp edx esi
je r-xdata
mov edx [ eax + 0x4 ]
cmp [ edx + 0x4 ] eax
jne r-xdata
mov eax [ eax + 0x4 ]
mov edx [ ecx ]
cmp edx [ eax ]
jne r-xdata
mov eax edx
mov edx [ eax + 0x8 ]
cmp edx esi
jne r-xdata
mov eax [ eax + 0x8 ]
mov [ ecx ] eax
pop esi
retn
mov [ ecx ] eax
jmp r-xdata
jmp r-xdata
sub_405cd8
mov eax sub_406cde
call sub_406a60
push ecx
push esi
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x10 ] esi
and [ ebp - 0x4 ] 0x0
test esi esi
je r-xdata
mov ecx [ ebp - 0xc ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
push edi
mov edi [ ebp + 0xc ]
push 0x0
mov ecx esi
mov al [ edi ]
mov [ esi ] al
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov ecx esi
push [ eax ]
push 0x0
push edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
pop edi
sub_405d25
mov eax sub_406cf6
call sub_406a60
push ecx
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0x10 ] ecx
and [ ebp - 0x4 ] 0x0
test ecx ecx
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
push [ ebp + 0xc ]
call sub_405d52
sub_405d52
mov eax sub_406d09
call sub_406a60
push ecx
push esi
push edi
mov edi [ ebp + 0x8 ]
mov esi ecx
push 0x0
mov [ ebp - 0x10 ] esi
mov al [ edi ]
mov [ esi ] al
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy@IAT ]
mov eax [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::npos@IAT ]
mov ecx esi
push [ eax ]
push 0x0
push edi
call [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign@IAT ]
and [ ebp - 0x4 ] 0x0
add edi 0x10
push edi
lea ecx [ esi + 0x10 ]
call sub_405698
mov ecx [ ebp - 0xc ]
mov eax esi
pop edi
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x4
sub_405ddc
push esi
xor eax eax
lea esi [ ecx + 0x5c ]
push 0x40
push eax
push esi
mov [ ecx + 0x18 ] eax
mov [ ecx + 0x14 ] eax
mov [ ecx + 0x4 ] 0x67452301
mov [ ecx + 0x8 ] 0xefcdab89
mov [ ecx + 0xc ] 0x98badcfe
mov [ ecx + 0x10 ] 0x10325476
call sub_406883
mov [ esi ] 0x80
pop esi
retn
sub_405e12
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi ecx
mov edx ebx
push edi
mov ecx [ esi + 0x14 ]
mov eax ecx
shr eax 0x3
lea ecx [ ecx + ebx * 8 ]
and eax 0x3f
shl edx 0x3
cmp ecx edx
mov [ esi + 0x14 ] ecx
jae r-xdata
push 0x40
mov ecx ebx
pop edi
shr ecx 0x1d
add [ esi + 0x18 ] ecx
sub edi eax
cmp ebx edi
jb r-xdata
inc [ esi + 0x18 ]
and [ ebp + 0xc ] 0x0
push edi
lea eax [ eax + esi + 0x1c ]
push [ ebp + 0x8 ]
mov ecx esi
push eax
call sub_406863
lea ecx [ esi + 0x1c ]
lea eax [ esi + 0x4 ]
push ecx
push eax
mov ecx esi
call sub_405f28
mov [ ebp + 0xc ] edi
add edi 0x3f
xor eax eax
jmp r-xdata
mov eax [ ebp + 0x8 ]
mov ecx esi
lea eax [ eax + edi - 0x3f ]
push eax
lea eax [ esi + 0x4 ]
push eax
call sub_405f28
add [ ebp + 0xc ] 0x40
add edi 0x40
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov edx [ ebp + 0x8 ]
sub ebx ecx
add ecx edx
push ebx
lea eax [ eax + esi + 0x1c ]
push ecx
push eax
mov ecx esi
call sub_406863
pop edi
pop esi
pop ebx
pop ebp
retn 0x8
cmp edi ebx
jae r-xdata
sub_405eb7
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi ecx
push edi
push 0x8
lea edi [ esi + 0x14 ]
lea eax [ ebp - 0x8 ]
push edi
push eax
call sub_4067d4
mov eax [ edi ]
push 0x38
shr eax 0x3
and eax 0x3f
pop ecx
cmp eax ecx
jb r-xdata
sub ecx eax
lea eax [ esi + 0x5c ]
push ecx
push eax
mov ecx esi
call sub_405e12
lea eax [ ebp - 0x8 ]
push 0x8
push eax
mov ecx esi
call sub_405e12
lea eax [ esi + 0x4 ]
push 0x10
push eax
mov ecx esi
push [ ebp + 0x8 ]
call sub_4067d4
push 0x9c
push 0x0
push esi
mov ecx esi
call sub_406883
mov ecx esi
call sub_405ddc
pop edi
pop esi
leave
retn 0x4
push 0x78
pop ecx
sub_405f28
push ebp
mov ebp esp
sub esp 0x4c
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push 0x40
mov [ ebp - 0xc ] ecx
mov eax [ esi ]
push [ ebp + 0xc ]
mov edi [ esi + 0x4 ]
mov ebx [ esi + 0x8 ]
mov [ ebp + 0x8 ] eax
mov eax [ esi + 0xc ]
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x4c ]
push eax
mov [ ebp - 0x4 ] edi
call sub_40681b
mov eax edi
mov ecx ebx
not eax
and eax [ ebp - 0x8 ]
and ecx edi
mov edx edi
or eax ecx
mov ecx [ ebp + 0x8 ]
add eax [ ebp - 0x4c ]
lea ecx [ ecx + eax - 0x28955b88 ]
mov eax ecx
shr eax 0x19
shl ecx 0x7
or eax ecx
add eax edi
mov ecx eax
and edx eax
not ecx
and ecx ebx
or ecx edx
mov edx [ ebp - 0x8 ]
add ecx [ ebp - 0x48 ]
lea edx [ edx + ecx - 0x173848aa ]
mov ecx edx
shr ecx 0x14
shl edx 0xc
or ecx edx
add ecx eax
mov edx ecx
not edx
and edx edi
mov edi ecx
and edi eax
or edx edi
add edx [ ebp - 0x44 ]
lea edx [ ebx + edx + 0x242070db ]
mov ebx ecx
mov edi edx
shr edi 0xf
shl edx 0x11
or edi edx
add edi ecx
mov edx edi
and ebx edi
not edx
and edx eax
mov [ ebp + 0xc ] edi
or edx ebx
mov ebx [ ebp - 0x4 ]
add edx [ ebp - 0x40 ]
lea ebx [ ebx + edx - 0x3e423112 ]
mov edx ebx
shl edx 0x16
shr ebx 0xa
or edx ebx
add edx edi
mov ebx edx
and edi edx
not ebx
and ebx ecx
or ebx edi
add ebx [ ebp - 0x3c ]
lea eax [ eax + ebx - 0xa83f051 ]
mov edi eax
shr edi 0x19
shl eax 0x7
or edi eax
mov eax edx
add edi edx
mov [ ebp + 0x8 ] edi
and eax [ ebp + 0x8 ]
not edi
and edi [ ebp + 0xc ]
or edi eax
add edi [ ebp - 0x38 ]
lea ecx [ ecx + edi + 0x4787c62a ]
mov eax ecx
shr eax 0x14
shl ecx 0xc
or eax ecx
add eax [ ebp + 0x8 ]
mov ecx eax
mov edi eax
and edi [ ebp + 0x8 ]
mov ebx eax
not ecx
and ecx edx
or ecx edi
mov edi [ ebp + 0xc ]
add ecx [ ebp - 0x34 ]
lea edi [ edi + ecx - 0x57cfb9ed ]
mov ecx edi
shr ecx 0xf
shl edi 0x11
or ecx edi
add ecx eax
mov edi ecx
and ebx ecx
not edi
and edi [ ebp + 0x8 ]
or edi ebx
mov ebx ecx
add edi [ ebp - 0x30 ]
lea edx [ edx + edi - 0x2b96aff ]
mov edi edx
shl edi 0x16
shr edx 0xa
or edi edx
add edi ecx
mov edx edi
and ebx edi
not edx
and edx eax
mov [ ebp - 0x4 ] edi
or edx ebx
mov ebx [ ebp + 0x8 ]
add edx [ ebp - 0x2c ]
lea ebx [ ebx + edx + 0x698098d8 ]
mov edx ebx
shr edx 0x19
shl ebx 0x7
or edx ebx
add edx edi
mov ebx edx
and edi edx
not ebx
and ebx ecx
or ebx edi
add ebx [ ebp - 0x28 ]
lea eax [ eax + ebx - 0x74bb0851 ]
mov edi eax
shr edi 0x14
shl eax 0xc
or edi eax
add edi edx
mov eax edi
mov ebx edi
not eax
and eax [ ebp - 0x4 ]
and ebx edx
or eax ebx
add eax [ ebp - 0x24 ]
lea ecx [ ecx + eax - 0xa44f ]
mov ebx ecx
shr ebx 0xf
shl ecx 0x11
or ebx ecx
mov ecx edi
add ebx edi
mov eax ebx
and ecx ebx
not eax
and eax edx
mov [ ebp + 0xc ] ebx
or eax ecx
mov ecx [ ebp - 0x4 ]
add eax [ ebp - 0x20 ]
lea ecx [ ecx + eax - 0x76a32842 ]
mov eax ecx
shl eax 0x16
shr ecx 0xa
or eax ecx
add eax ebx
mov ecx eax
and ebx eax
not ecx
and ecx edi
or ecx ebx
add ecx [ ebp - 0x1c ]
lea edx [ edx + ecx + 0x6b901122 ]
mov ecx edx
shr ecx 0x19
shl edx 0x7
or ecx edx
mov edx eax
add ecx eax
mov [ ebp + 0x8 ] ecx
and edx [ ebp + 0x8 ]
not ecx
and ecx [ ebp + 0xc ]
or ecx edx
add ecx [ ebp - 0x18 ]
lea edi [ edi + ecx - 0x2678e6d ]
mov ecx edi
shr ecx 0x14
shl edi 0xc
or ecx edi
mov edi eax
add ecx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] ecx
mov edx ecx
not [ ebp - 0x4 ]
and edx [ ebp + 0x8 ]
and edi [ ebp - 0x4 ]
mov ebx ecx
or edx edi
mov edi [ ebp + 0xc ]
add edx [ ebp - 0x14 ]
lea edi [ edi + edx - 0x5986bc72 ]
mov edx edi
shr edx 0xf
shl edi 0x11
or edx edi
add edx ecx
mov [ ebp + 0xc ] edx
and ebx edx
not [ ebp + 0xc ]
mov edi [ ebp + 0xc ]
and edi [ ebp + 0x8 ]
or edi ebx
mov ebx edx
add edi [ ebp - 0x10 ]
and ebx [ ebp - 0x4 ]
lea eax [ eax + edi + 0x49b40821 ]
mov edi eax
shl edi 0x16
shr eax 0xa
or edi eax
mov eax ecx
add edi edx
and eax edi
or eax ebx
mov ebx [ ebp + 0x8 ]
add eax [ ebp - 0x48 ]
lea eax [ ebx + eax - 0x9e1da9e ]
mov ebx eax
shr ebx 0x1b
shl eax 0x5
or ebx eax
mov eax [ ebp + 0xc ]
and eax edi
add ebx edi
mov [ ebp + 0xc ] eax
mov eax edx
and eax ebx
mov [ ebp + 0x8 ] ebx
mov ebx eax
mov eax [ ebp + 0xc ]
or eax ebx
add eax [ ebp - 0x34 ]
lea ecx [ ecx + eax - 0x3fbf4cc0 ]
mov eax ecx
shr eax 0x17
shl ecx 0x9
or eax ecx
mov ecx edi
add eax [ ebp + 0x8 ]
not ecx
and ecx [ ebp + 0x8 ]
mov ebx eax
and ebx edi
or ecx ebx
add ecx [ ebp - 0x20 ]
lea edx [ edx + ecx + 0x265e5a51 ]
mov ecx edx
shr ecx 0x12
shl edx 0xe
or ecx edx
mov edx [ ebp + 0x8 ]
add ecx eax
mov [ ebp + 0xc ] ecx
and ecx [ ebp + 0x8 ]
not edx
and edx eax
mov ebx [ ebp + 0xc ]
or edx ecx
add edx [ ebp - 0x4c ]
lea edi [ edi + edx - 0x16493856 ]
mov edx eax
mov ecx edi
shl ecx 0x14
shr edi 0xc
or ecx edi
mov edi eax
add ecx ebx
not edx
and edx ebx
and edi ecx
or edx edi
mov edi [ ebp + 0x8 ]
add edx [ ebp - 0x38 ]
lea edx [ edi + edx - 0x29d0efa3 ]
mov edi edx
shr edi 0x1b
shl edx 0x5
or edi edx
mov edx ebx
add edi ecx
mov [ ebp + 0x8 ] edi
mov edi ebx
and edi [ ebp + 0x8 ]
not edx
and edx ecx
or edx edi
add edx [ ebp - 0x24 ]
lea eax [ eax + edx + 0x2441453 ]
mov edx eax
shr edx 0x17
shl eax 0x9
or edx eax
mov eax ecx
add edx [ ebp + 0x8 ]
not eax
and eax [ ebp + 0x8 ]
mov edi edx
and edi ecx
or eax edi
add eax [ ebp - 0x10 ]
lea edi [ ebx + eax - 0x275e197f ]
mov eax edi
shr eax 0x12
shl edi 0xe
or eax edi
mov edi [ ebp + 0x8 ]
add eax edx
mov ebx eax
and ebx [ ebp + 0x8 ]
not edi
and edi edx
or edi ebx
mov ebx edx
add edi [ ebp - 0x3c ]
lea ecx [ ecx + edi - 0x182c0438 ]
mov edi ecx
shl edi 0x14
shr ecx 0xc
or edi ecx
mov ecx edx
add edi eax
not ecx
and ecx eax
and ebx edi
or ecx ebx
mov ebx [ ebp + 0x8 ]
add ecx [ ebp - 0x28 ]
mov [ ebp - 0x4 ] edi
lea ebx [ ebx + ecx + 0x21e1cde6 ]
mov ecx ebx
shr ecx 0x1b
shl ebx 0x5
or ecx ebx
mov ebx eax
not ebx
add ecx edi
and ebx edi
mov edi eax
and edi ecx
or ebx edi
add ebx [ ebp - 0x14 ]
lea edx [ edx + ebx - 0x3cc8f82a ]
mov edi edx
shr edi 0x17
shl edx 0x9
or edi edx
mov edx [ ebp - 0x4 ]
add edi ecx
mov ebx edi
and ebx [ ebp - 0x4 ]
not edx
and edx ecx
or edx ebx
add edx [ ebp - 0x40 ]
lea eax [ eax + edx - 0xb2af279 ]
mov edx eax
shr edx 0x12
shl eax 0xe
or edx eax
mov eax ecx
add edx edi
not eax
mov ebx edx
and eax edi
and ebx ecx
or eax ebx
mov ebx [ ebp - 0x4 ]
add eax [ ebp - 0x2c ]
lea eax [ ebx + eax + 0x455a14ed ]
mov ebx eax
shl ebx 0x14
shr eax 0xc
or ebx eax
mov eax edi
add ebx edx
not eax
mov [ ebp - 0x4 ] ebx
and eax edx
mov ebx edi
and ebx [ ebp - 0x4 ]
or eax ebx
add eax [ ebp - 0x18 ]
lea ecx [ ecx + eax - 0x561c16fb ]
mov eax ecx
shr eax 0x1b
shl ecx 0x5
or eax ecx
mov ecx edx
add eax [ ebp - 0x4 ]
mov [ ebp + 0x8 ] eax
mov eax edx
and ecx [ ebp + 0x8 ]
mov ebx [ ebp + 0x8 ]
not eax
and eax [ ebp - 0x4 ]
or eax ecx
mov ecx [ ebp - 0x4 ]
add eax [ ebp - 0x44 ]
not ecx
and ecx ebx
lea edi [ edi + eax - 0x3105c08 ]
mov eax edi
shr eax 0x17
shl edi 0x9
or eax edi
add eax ebx
mov edi eax
and edi [ ebp - 0x4 ]
or ecx edi
add ecx [ ebp - 0x30 ]
lea edx [ edx + ecx + 0x676f02d9 ]
mov ecx edx
shr ecx 0x12
shl edx 0xe
or ecx edx
mov edx ebx
add ecx eax
not edx
mov edi ecx
and edx eax
and edi ebx
or edx edi
mov edi [ ebp - 0x4 ]
add edx [ ebp - 0x1c ]
lea edi [ edi + edx - 0x72d5b376 ]
mov edx edi
shl edx 0x14
shr edi 0xc
or edx edi
mov edi eax
add edx ecx
xor edi ecx
xor edi edx
add edi [ ebp - 0x38 ]
lea ebx [ ebx + edi - 0x5c6be ]
mov edi ebx
shr edi 0x1c
shl ebx 0x4
or edi ebx
mov ebx ecx
add edi edx
xor ebx edx
xor ebx edi
add ebx [ ebp - 0x2c ]
lea eax [ eax + ebx - 0x788e097f ]
mov ebx eax
shr ebx 0x15
shl eax 0xb
or ebx eax
add ebx edi
mov eax ebx
xor eax edx
xor eax edi
add eax [ ebp - 0x20 ]
lea ecx [ ecx + eax + 0x6d9d6122 ]
mov eax ecx
shr eax 0x10
shl ecx 0x10
or eax ecx
add eax ebx
mov ecx ebx
mov [ ebp + 0xc ] eax
xor ecx eax
mov eax ecx
xor eax edi
add eax [ ebp - 0x14 ]
lea edx [ edx + eax - 0x21ac7f4 ]
mov eax edx
shl eax 0x17
shr edx 0x9
or eax edx
add eax [ ebp + 0xc ]
xor ecx eax
add ecx [ ebp - 0x48 ]
lea edi [ edi + ecx - 0x5b4115bc ]
mov ecx edi
shr ecx 0x1c
shl edi 0x4
or ecx edi
mov edi [ ebp + 0xc ]
mov edx edi
add ecx eax
xor edx eax
xor edx ecx
add edx [ ebp - 0x3c ]
lea ebx [ ebx + edx + 0x4bdecfa9 ]
mov edx ebx
shr edx 0x15
shl ebx 0xb
or edx ebx
add edx ecx
mov ebx edx
mov [ ebp + 0x8 ] edx
xor ebx eax
xor ebx ecx
add ebx [ ebp - 0x30 ]
lea ebx [ edi + ebx - 0x944b4a0 ]
mov edi ebx
shr edi 0x10
shl ebx 0x10
or edi ebx
add edi edx
xor [ ebp + 0x8 ] edi
mov ebx [ ebp + 0x8 ]
xor ebx ecx
add ebx [ ebp - 0x24 ]
lea ebx [ eax + ebx - 0x41404390 ]
mov eax ebx
shl eax 0x17
shr ebx 0x9
or eax ebx
mov ebx [ ebp + 0x8 ]
add eax edi
xor ebx eax
add ebx [ ebp - 0x18 ]
lea ebx [ ecx + ebx + 0x289b7ec6 ]
mov ecx ebx
shr ecx 0x1c
shl ebx 0x4
or ecx ebx
mov ebx edi
add ecx eax
xor ebx eax
xor ebx ecx
add ebx [ ebp - 0x4c ]
lea edx [ edx + ebx - 0x155ed806 ]
mov ebx edx
shr ebx 0x15
shl edx 0xb
or ebx edx
add ebx ecx
mov edx ebx
xor edx eax
xor edx ecx
add edx [ ebp - 0x40 ]
lea edx [ edi + edx - 0x2b10cf7b ]
mov edi edx
shr edi 0x10
shl edx 0x10
or edi edx
add edi ebx
mov [ ebp + 0x8 ] ebx
xor [ ebp + 0x8 ] edi
mov edx [ ebp + 0x8 ]
xor edx ecx
add edx [ ebp - 0x34 ]
lea edx [ eax + edx + 0x4881d05 ]
mov eax edx
shl eax 0x17
shr edx 0x9
or eax edx
mov edx [ ebp + 0x8 ]
add eax edi
xor edx eax
add edx [ ebp - 0x28 ]
lea edx [ ecx + edx - 0x262b2fc7 ]
mov ecx edx
shr ecx 0x1c
shl edx 0x4
or ecx edx
mov edx edi
add ecx eax
xor edx eax
xor edx ecx
add edx [ ebp - 0x1c ]
lea ebx [ ebx + edx - 0x1924661b ]
mov edx ebx
shr edx 0x15
shl ebx 0xb
or edx ebx
add edx ecx
mov ebx edx
xor ebx eax
xor ebx ecx
add ebx [ ebp - 0x10 ]
lea ebx [ edi + ebx + 0x1fa27cf8 ]
mov edi ebx
shr edi 0x10
shl ebx 0x10
or edi ebx
mov ebx edx
add edi edx
xor ebx edi
xor ebx ecx
add ebx [ ebp - 0x44 ]
lea eax [ eax + ebx - 0x3b53a99b ]
mov ebx eax
shl ebx 0x17
shr eax 0x9
or ebx eax
mov eax edx
add ebx edi
not eax
or eax ebx
xor eax edi
add eax [ ebp - 0x4c ]
lea ecx [ ecx + eax - 0xbd6ddbc ]
mov eax ecx
shr eax 0x1a
shl ecx 0x6
or eax ecx
mov ecx edi
add eax ebx
not ecx
or ecx eax
xor ecx ebx
add ecx [ ebp - 0x30 ]
lea edx [ edx + ecx + 0x432aff97 ]
mov ecx edx
shr ecx 0x16
shl edx 0xa
or ecx edx
mov edx ebx
add ecx eax
not edx
or edx ecx
xor edx eax
add edx [ ebp - 0x14 ]
lea edi [ edi + edx - 0x546bdc59 ]
mov edx edi
shr edx 0x11
shl edi 0xf
or edx edi
mov edi eax
add edx ecx
not edi
or edi edx
xor edi ecx
add edi [ ebp - 0x38 ]
lea ebx [ ebx + edi - 0x36c5fc7 ]
mov edi ebx
shr ebx 0xb
shl edi 0x15
or edi ebx
mov ebx ecx
not ebx
add edi edx
or ebx edi
xor ebx edx
add ebx [ ebp - 0x1c ]
lea ebx [ eax + ebx + 0x655b59c3 ]
mov eax ebx
shl ebx 0x6
shr eax 0x1a
or eax ebx
mov ebx edx
not ebx
add eax edi
or ebx eax
xor ebx edi
add ebx [ ebp - 0x40 ]
lea ebx [ ecx + ebx - 0x70f3336e ]
mov ecx ebx
shl ebx 0xa
shr ecx 0x16
or ecx ebx
mov ebx edi
add ecx eax
not ebx
or ebx ecx
xor ebx eax
add ebx [ ebp - 0x24 ]
lea ebx [ edx + ebx - 0x100b83 ]
mov edx ebx
shr edx 0x11
shl ebx 0xf
or edx ebx
mov ebx eax
add edx ecx
not ebx
or ebx edx
xor ebx ecx
add ebx [ ebp - 0x48 ]
lea ebx [ edi + ebx - 0x7a7ba22f ]
mov edi ebx
shl edi 0x15
shr ebx 0xb
or edi ebx
mov ebx ecx
add edi edx
not ebx
or ebx edi
xor ebx edx
add ebx [ ebp - 0x2c ]
lea ebx [ eax + ebx + 0x6fa87e4f ]
mov eax ebx
shr eax 0x1a
shl ebx 0x6
or eax ebx
mov ebx edx
add eax edi
not ebx
or ebx eax
xor ebx edi
add ebx [ ebp - 0x10 ]
lea ebx [ ecx + ebx - 0x1d31920 ]
mov ecx ebx
shr ecx 0x16
shl ebx 0xa
or ecx ebx
mov ebx edi
add ecx eax
not ebx
or ebx ecx
push 0x40
xor ebx eax
push 0x0
add ebx [ ebp - 0x34 ]
lea ebx [ edx + ebx - 0x5cfebcec ]
mov edx ebx
shr edx 0x11
shl ebx 0xf
or edx ebx
mov ebx eax
add edx ecx
not ebx
or ebx edx
xor ebx ecx
add ebx [ ebp - 0x18 ]
lea ebx [ edi + ebx + 0x4e0811a1 ]
mov edi ebx
shl edi 0x15
shr ebx 0xb
or edi ebx
mov ebx ecx
add edi edx
not ebx
or ebx edi
xor ebx edx
add ebx [ ebp - 0x3c ]
lea ebx [ eax + ebx - 0x8ac817e ]
mov eax ebx
shr eax 0x1a
shl ebx 0x6
or eax ebx
mov ebx edx
add eax edi
not ebx
or ebx eax
add [ esi ] eax
xor ebx edi
add ebx [ ebp - 0x20 ]
lea ecx [ ecx + ebx - 0x42c50dcb ]
mov ebx ecx
shr ebx 0x16
shl ecx 0xa
or ebx ecx
mov ecx edi
add ebx eax
not ecx
or ecx ebx
add [ esi + 0xc ] ebx
xor ecx eax
add ecx [ ebp - 0x44 ]
lea edx [ edx + ecx + 0x2ad7d2bb ]
mov ecx edx
shr ecx 0x11
shl edx 0xf
or ecx edx
mov edx eax
add ecx ebx
not edx
or edx ecx
add [ esi + 0x8 ] ecx
xor edx ebx
add edx [ ebp - 0x28 ]
lea edi [ edi + edx - 0x14792c6f ]
mov eax edi
shl eax 0x15
shr edi 0xb
or eax edi
add eax ecx
mov ecx [ ebp - 0xc ]
add [ esi + 0x4 ] eax
lea eax [ ebp - 0x4c ]
push eax
call sub_406883
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_4067d4
cmp [ esp + 0xc ] 0x0
jbe r-xdata
retn 0xc
mov edx [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
push esi
or esi 0xffffffff
lea eax [ edx + 0x1 ]
sub esi edx
mov dl [ ecx ]
mov [ eax - 0x1 ] dl
mov edx [ ecx ]
shr edx 0x8
mov [ eax ] dl
mov edx [ ecx ]
shr edx 0x10
mov [ eax + 0x1 ] dl
mov edx [ ecx ]
shr edx 0x18
mov [ eax + 0x2 ] dl
add eax 0x4
add ecx 0x4
lea edx [ esi + eax ]
cmp edx [ esp + 0x10 ]
jb r-xdata
pop esi
sub_40681b
cmp [ esp + 0xc ] 0x0
jbe r-xdata
retn 0xc
mov edx [ esp + 0x8 ]
mov ecx [ esp + 0x4 ]
push esi
push edi
push 0xfffffffe
lea eax [ edx + 0x2 ]
pop esi
sub esi edx
movzx edi [ eax - 0x1 ]
xor edx edx
mov dh [ eax + 0x1 ]
mov dl [ eax ]
add eax 0x4
shl edx 0x8
or edx edi
movzx edi [ eax - 0x6 ]
shl edx 0x8
or edx edi
mov [ ecx ] edx
lea edx [ esi + eax ]
add ecx 0x4
cmp edx [ esp + 0x14 ]
jb r-xdata
pop edi
pop esi
sub_406863
push esi
mov esi [ esp + 0x10 ]
test esi esi
jbe r-xdata
pop esi
retn 0xc
mov ecx [ esp + 0x8 ]
mov eax [ esp + 0xc ]
sub eax ecx
mov dl [ eax + ecx ]
mov [ ecx ] dl
inc ecx
dec esi
jne r-xdata
sub_406883
mov ecx [ esp + 0xc ]
test ecx ecx
jbe r-xdata
retn 0xc
mov al [ esp + 0x8 ]
push ebx
mov bl al
mov edx ecx
mov bh bl
push edi
mov edi [ esp + 0xc ]
mov eax ebx
shl eax 0x10
mov ax bx
shr ecx 0x2
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
pop edi
pop ebx
_start
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
and [ ebp - 0x4 ] 0x0
push 0x1
call [ __set_app_type@IAT ]
pop ecx
or [ rw-data ] 0xffffffff
or [ rw-data ] 0xffffffff
call [ __p__fmode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
call [ __p__commode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
mov eax [ _adjust_fdiv@IAT ]
mov eax [ eax ]
mov [ rw-data ] eax
call sub_404bb9
cmp [ rw-data ] 0x0
jne r-xdata
call sub_406a9e
push rw-data
push rw-data
call _initterm
mov eax [ rw-data ]
mov [ ebp - 0x28 ] eax
lea eax [ ebp - 0x28 ]
push eax
push [ rw-data ]
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x2c ]
push eax
lea eax [ ebp - 0x1c ]
push eax
call [ __getmainargs@IAT ]
push rw-data
push rw-data
call _initterm
call [ __p___initenv@IAT ]
mov ecx [ ebp - 0x20 ]
mov [ eax ] ecx
push [ ebp - 0x20 ]
push [ ebp - 0x2c ]
push [ ebp - 0x1c ]
call sub_401b80
add esp 0x30
mov [ ebp - 0x24 ] eax
push eax
call [ exit@IAT ]
push sub_406ab0
call [ __setusermatherr@IAT ]
pop ecx
sub_401000
call sub_401010
jmp sub_401030
sub_401010
push ecx
mov al [ esp + 0x3 ]
mov [ rw-data ] al
xor eax eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ecx
retn
sub_401030
push sub_401040
call sub_4068f8
pop ecx
retn
sub_401090
call sub_4010a0
jmp sub_4010c0
sub_4010a0
push ecx
mov al [ esp + 0x3 ]
mov [ rw-data ] al
xor eax eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ecx
retn
sub_4010c0
push sub_4010d0
call sub_4068f8
pop ecx
retn
sub_401120
call sub_401130
jmp sub_401150
sub_401130
push ecx
mov al [ esp + 0x3 ]
mov [ rw-data ] al
xor eax eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ecx
retn
sub_401150
push sub_401160
call sub_4068f8
pop ecx
retn
sub_4011b0
call sub_4011c0
jmp sub_4011e0
sub_4011c0
push ecx
mov al [ esp + 0x3 ]
mov [ rw-data ] al
xor eax eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ecx
retn
sub_4011e0
push sub_4011f0
call sub_4068f8
pop ecx
retn
sub_401240
call sub_401250
jmp sub_401270
sub_401250
push ecx
mov al [ esp + 0x3 ]
mov [ rw-data ] al
xor eax eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ecx
retn
sub_401270
push sub_401280
call sub_4068f8
pop ecx
retn
sub_4012d0
call sub_4012e0
jmp sub_401300
sub_4012e0
push ecx
mov al [ esp + 0x3 ]
mov [ rw-data ] al
xor eax eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ecx
retn
sub_401300
push sub_401310
call sub_4068f8
pop ecx
retn
sub_401360
call sub_401370
jmp sub_401390
sub_401370
push ecx
mov al [ esp + 0x3 ]
mov [ rw-data ] al
xor eax eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ecx
retn
sub_401390
push sub_4013a0
call sub_4068f8
pop ecx
retn
sub_4013f0
call sub_401400
jmp sub_401420
sub_401400
push ecx
mov al [ esp + 0x3 ]
mov [ rw-data ] al
xor eax eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ecx
retn
sub_401420
push sub_401430
call sub_4068f8
pop ecx
retn
sub_401480
call sub_401490
jmp sub_4014b0
sub_401490
push ecx
mov al [ esp + 0x3 ]
mov [ rw-data ] al
xor eax eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ecx
retn
sub_4014b0
push sub_4014c0
call sub_4068f8
pop ecx
retn
sub_401510
call sub_401520
jmp sub_401540
sub_401520
push ecx
mov al [ esp + 0x3 ]
mov [ rw-data ] al
xor eax eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ecx
retn
sub_401540
push sub_401550
call sub_4068f8
pop ecx
retn
sub_4015a0
call sub_4015b0
jmp sub_4015d0
sub_4015b0
push ecx
mov al [ esp + 0x3 ]
mov [ rw-data ] al
xor eax eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ecx
retn
sub_4015d0
push sub_4015e0
call sub_4068f8
pop ecx
retn
sub_401630
call sub_401640
jmp sub_401720
sub_401720
push sub_401730
call sub_4068f8
pop ecx
retn
sub_401780
call sub_401790
jmp sub_401870
sub_401870
push sub_401880
call sub_4068f8
pop ecx
retn
sub_4018d0
call sub_4018e0
jmp sub_401900
sub_4018e0
push ecx
mov al [ esp + 0x3 ]
mov [ rw-data ] al
xor eax eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ecx
retn
sub_401900
push sub_401910
call sub_4068f8
pop ecx
retn
sub_401960
call sub_401970
jmp sub_401980
sub_401970
mov ecx rw-data
jmp sub_404ba2
sub_401980
push sub_401990
call sub_4068f8
pop ecx
retn
sub_401990
mov ecx rw-data
jmp sub_404bb9
sub_4019a0
call sub_4019b0
jmp sub_4019c0
sub_4019b0
mov ecx rw-data
jmp sub_404d12
sub_4019c0
push sub_4019d0
call sub_4068f8
pop ecx
retn
sub_4019d0
mov ecx rw-data
jmp sub_404bb9
sub_404360
mov eax [ ecx + 0x4 ]
mov ecx [ eax ]
mov eax [ esp + 0x4 ]
mov [ eax ] ecx
retn 0x4
sub_4049a0
mov eax [ esp + 0x4 ]
mov edx [ rw-data ]
mov ecx [ eax ]
cmp ecx edx
je r-xdata
retn
mov eax ecx
mov ecx [ eax ]
cmp ecx edx
jne r-xdata
sub_404a10
push esi
mov esi ecx
call sub_404a30
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_4068b4
add esp 0x4
sub_404b10
call ??0Init@ios_base@std@@QAE@XZ
jmp sub_404b30
??0Init@ios_base@std@@QAE@XZ
mov ecx rw-data
jmp [ std::ios_base::Init::Init@IAT ]
sub_404b30
push ??1Init@ios_base@std@@QAE@XZ
call sub_4068f8
pop ecx
retn
??1Init@ios_base@std@@QAE@XZ
mov ecx rw-data
jmp [ std::ios_base::Init::~Init@IAT ]
sub_404b50
call ??0_Winit@std@@QAE@XZ
jmp sub_404b70
??0_Winit@std@@QAE@XZ
mov ecx rw-data
jmp [ std::_Winit::_Winit@IAT ]
sub_404b70
push ??1_Winit@std@@QAE@XZ
call sub_4068f8
pop ecx
retn
??1_Winit@std@@QAE@XZ
mov ecx rw-data
jmp [ std::_Winit::~_Winit@IAT ]
NetShareGetInfo
jmp [ NetShareGetInfo@IAT ]
WNetAddConnection2A
jmp [ WNetAddConnection2A@IAT ]
WNetCancelConnection2A
jmp [ WNetCancelConnection2A@IAT ]
sub_404ba2
push esi
mov esi ecx
push 0xcc
push 0x0
push esi
call memset
add esp 0xc
mov eax esi
pop esi
retn
sub_404bb9
retn
sub_404d12
mov eax ecx
retn
j_sub_40563f
jmp sub_40563f
sub_4054f8
mov eax r-xdata
retn
sub_405627
mov eax ecx
mov ecx [ esp + 0x4 ]
mov cl [ ecx ]
mov [ eax ] cl
xor ecx ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
retn 0x4
sub_405675
push [ esp + 0x4 ]
push 0x1
push [ ecx + 0x8 ]
call sub_405831
retn 0x4
sub_405686
push esi
mov esi ecx
push [ esp + 0x8 ]
call sub_405698
mov eax esi
pop esi
retn 0x4
sub_4057d9
push ecx
mov eax [ ecx + 0x4 ]
push eax
mov edx [ eax ]
lea eax [ esp + 0x4 ]
push edx
push eax
call sub_404370
pop ecx
retn
sub_405d24
retn
sub_405da7
push esi
mov esi ecx
mov [ esi ] r--data
call sub_405ddc
mov eax esi
pop esi
retn
sub_405db9
push esi
mov esi ecx
call sub_405dd5
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_4068b4
pop ecx
sub_405dd5
mov [ ecx ] r--data
retn
sub_4068b4
push [ esp + 0x4 ]
call free
pop ecx
retn
??Hstd@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
jmp [ std::operator&@IAT ]
??Hstd@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
jmp [ std::operator&@IAT ]
sub_4068cc
cmp [ rw-data ] 0xffffffff
jne r-xdata
push rw-data
push rw-data
push [ esp + 0xc ]
call __dllonexit
add esp 0xc
retn
push [ esp + 0x4 ]
call [ _onexit@IAT ]
pop ecx
retn
sub_4068f8
push [ esp + 0x4 ]
call sub_4068cc
neg eax
sbb eax eax
pop ecx
neg eax
dec eax
retn
sub_40690a
push esi
mov esi ecx
call ??1type_info@@UAE@XZ
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_4068b4
pop ecx
__CxxFrameHandler
jmp [ __CxxFrameHandler@IAT ]
_CxxThrowException
jmp [ _CxxThrowException@IAT ]
??2@YAPAXI@Z
jmp [ operator new@IAT ]
memset
jmp [ memset@IAT ]
memcpy
jmp [ memcpy@IAT ]
strlen
jmp [ strlen@IAT ]
sub_406a60
push 0xffffffff
push eax
mov eax [ fs : 0x0 ]
push eax
mov eax [ esp + 0xc ]
mov [ fs : 0x0 ] esp
mov [ esp + 0xc ] ebp
lea ebp [ esp + 0xc ]
push eax
retn
free
jmp [ free@IAT ]
__dllonexit
jmp [ __dllonexit@IAT ]
??1type_info@@UAE@XZ
jmp [ type_info::~type_info@IAT ]
_XcptFilter
jmp [ _XcptFilter@IAT ]
_initterm
jmp [ _initterm@IAT ]
sub_406a9e
push 0x30000
push 0x10000
call _controlfp
pop ecx
pop ecx
retn
sub_406ab0
xor eax eax
retn
_except_handler3
jmp [ _except_handler3@IAT ]
_controlfp
jmp [ _controlfp@IAT ]
sub_406ac0
mov eax r--data
jmp __CxxFrameHandler
sub_406ad0
lea ecx [ ebp - 0x3c ]
jmp sub_403ae0
sub_406ad8
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406ae1
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406aea
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406af3
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406afc
lea ecx [ ebp - 0x1c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406b05
lea ecx [ ebp - 0x2c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406b0e
mov ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406b17
mov ecx [ ebp + 0x8 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406b20
lea ecx [ ebp - 0x1c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406b29
lea ecx [ ebp - 0x1c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406b32
lea ecx [ ebp - 0x1c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406b3b
lea ecx [ ebp - 0x1c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406b44
lea ecx [ ebp - 0x1c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406b4d
lea ecx [ ebp - 0x1c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406b56
lea ecx [ ebp - 0x1c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406b5f
lea ecx [ ebp - 0x1c ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406b68
mov eax r--data
jmp __CxxFrameHandler
sub_406b80
lea ecx [ ebp - 0xa8 ]
jmp sub_405dd5
sub_406b8b
mov eax r--data
jmp __CxxFrameHandler
sub_406ba0
lea ecx [ ebp + 0x24 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406ba9
lea ecx [ ebp + 0x14 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406bb2
lea ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406bbb
mov eax r--data
jmp __CxxFrameHandler
sub_406bd0
lea ecx [ ebp + 0x4 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406bd9
mov eax r--data
jmp __CxxFrameHandler
sub_406bf0
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406bf9
mov eax r--data
jmp __CxxFrameHandler
sub_406c10
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406c19
mov eax r--data
jmp __CxxFrameHandler
sub_406c24
lea ecx [ ebp - 0x48 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406c2d
lea ecx [ ebp - 0x38 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406c36
lea ecx [ ebp - 0x58 ]
jmp j_sub_40563f
sub_406c3e
lea ecx [ ebp - 0x88 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406c4a
lea ecx [ ebp - 0x88 ]
jmp sub_404a30
sub_406c55
lea ecx [ ebp - 0x88 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406c61
lea ecx [ ebp - 0x68 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406c6a
mov eax r--data
jmp __CxxFrameHandler
sub_406c74
lea ecx [ ebp - 0x20 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406c7d
mov eax r--data
jmp __CxxFrameHandler
sub_406c88
lea ecx [ ebp - 0x24 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406c91
lea ecx [ ebp - 0x34 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406c9a
mov eax [ ebp - 0x14 ]
and eax 0x1
test eax eax
je r-xdata
retn
mov ecx [ ebp + 0x8 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406cb2
mov eax r--data
jmp __CxxFrameHandler
sub_406cbc
lea ecx [ ebp - 0x20 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406cc5
mov eax r--data
jmp __CxxFrameHandler
sub_406cd0
push [ ebp + 0x8 ]
push [ ebp - 0x10 ]
call sub_405d24
pop ecx
pop ecx
retn
sub_406cde
mov eax r--data
jmp __CxxFrameHandler
sub_406ce8
push [ ebp + 0x8 ]
push [ ebp - 0x10 ]
call sub_405d24
pop ecx
pop ecx
retn
sub_406cf6
mov eax r--data
jmp __CxxFrameHandler
sub_406d00
mov ecx [ ebp - 0x10 ]
jmp [ std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >@IAT ]
sub_406d09
mov eax r--data
jmp __CxxFrameHandler
