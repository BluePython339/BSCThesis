sub_4014bd
pop [ eax - 0x4cd58c80 ]
inc eax
or eax 0x7f70c03d
jg rwxdata
push ss
or [ eax + 0x37bd8080 ] eax
add [ eax + 0x4984f580 ] 0x42
les eax [ eax + 0x2a738080 ]
inc edi
add eax 0x7f7f712d
jg rwxdata
add [ eax - 0x7f7f7898 ] 0x80
div ebx
mov dl 0xdf
mov bl 0xb2
sbb al 0xd0
or esi ebp
mov [ 0xffffffff80837b06 ] cl
adc al 0xea
sub dl 0x80
jg rwxdata
or eax 0x80837b06
aad 0xb
insb
add [ eax + esi * 4 + 0x70 ] eax
jg rwxdata
shr [ ecx - 0x617f6a04 ] 0x3b
sbb eax 0x9808080
push es
inc ebx
mov al [ eax - 0x7f459780 ]
add [ eax + 0xe34e061 ] 0x81
adc [ ecx - 0x3f ] 0xa9
cld
xchg ebp eax
sbb [ esi - 0x661a93c5 ] 0x80
mov eax ds
insd
push 0xffffff9d
add [ ecx ] 0xad
test [ eax - 0x14f9f22a ] al
mov [ eax + 0x60dd080 ] eax
lds eax [ ecx + 0x7fd08080 ]
push ss
jge rwxdata
test [ ecx + 0x42 ] cl
add eax 0x9808080
push es
inc ebp
mov [ eax + 0x9167f80 ] al
add [ eax - 0x7fc84280 ] 0x80
xor ch 0x84
dec ecx
inc edx
jg rwxdata
fbstp [ ebx - 0x2f277f4e ]
loopne rwxdata
add [ ebx + 0x42 ] al
jb rwxdata
inc eax
or eax 0x7f70043d
jg rwxdata
jg rwxdata
arpl [ ebx + 0x73 ] bp
inc esp
outsd
arpl [ eax ] ax
add [ ebx + 0x44 ] al
dec edx
inc esi
dec edx
push edi
dec ebx
push ebx
dec ebx
dec edx
inc esp
inc esi
inc ebp
push edi
inc ecx
add ah ah
or esi [ ebp - 0x7f7f7f50 ]
or esi esi
mov [ ebx ] cs
neg [ ebx + ecx - 0x1f4772a ]
mov al [ 0xffffffffff01b60b ]
0x5167f80 0x8080
hlt
insb
in eax 0x99
or [ eax + ebx * 8 - 0x7f629593 ] 0x1
lodsd [ esi ]
add [ bx + si + 0x6980 ] 0xee
lea eax [ eax + 0x6c0bd580 ]
add [ eax + esi * 4 + 0x7a ] eax
jg rwxdata
sub_401683
mov ebp 0x8a6f0646
add [ eax + 0x47916b82 ] 0x5
mov al 0x7a
jg rwxdata
jle rwxdata
jecxz rwxdata
or eax 0x7f7f7dc0
mov ebx 0x8082410e
xor dh 0x8c
inc edi
add eax 0x7f7f7dc0
jg rwxdata
hlt
mov ebp 0x8a6f0646
add [ eax - 0x4fca807f ] 0x7a
pop [ eax ]
xchg [ esi + eax * 2 - 0x197e7e39 ] eax
or edi eax
or [ 0x7f7cc105 ] 0x7f
sar [ edi - 0x2a ] 0x1
jg rwxdata
push es
outsd
mov al [ eax + 0x357f8180 ]
mov al 0x7a
or [ 0x7f7dc505 ] 0x7f
jg rwxdata
or eax 0x7f7dc505
jg rwxdata
xchg ebp eax
or eax 0x7f7cb93d
jg rwxdata
add eax 0x8080800f
sar [ edi - 0x2a ] 0x1
jg rwxdata
sar [ edi - 0x2a ] 0x1
clts
jge rwxdata
0x7dc5050d 0x7f7f
add eax 0x7f7f7ab0
salc
popfd
add eax 0xb0bf440
sar [ edi - 0x2a ] 0x1
popfd
mov eax [ eax - 0xb ]
test [ ecx + 0x4c ] ebp
add [ eax - 0x733ff480 ] 0xb
or [ ebx ] 0x80
jg rwxdata
add [ eax + 0x49b38080 ] 0xd
cmp eax 0x7f7f7cc1
xlat
ror [ 0xffffffff8082453e ] 0x1
adc bh 0x7f
push ss
add [ eax + 0x478cf680 ] 0x5
sar [ ebp + 0x7f ] 0x7f
jg rwxdata
or al 0x81
add [ eax + 0x54792f6 ] 0xb4
jl rwxdata
jbe rwxdata
ror [ ebx + ecx + 0x9800b80 ] 0xc7
or ecx [ ebx ]
add [ eax - 0x28771580 ] 0xea7cf57f
adc dh 0x7f
push ss
add [ gs : eax - 0x70bffa80 ] 0x4
dec ecx
add [ eax - 0x7e00ff80 ] 0x34048fda
add [ eax + 0x743e0080 ] 0x8a
add [ eax + 0x32048f80 ] 0x81
add [ eax + 0x7f7fb369 ] 0x7f
imul ebx [ 0x68808080 ] 0x8080809b
retn
adc esi 0x8065167f
add [ eax + 0x48f4005 ] 0x60
0xd8050d90 0x7f7e
jl rwxdata
add [ eax + 0x6f060880 ] 0x8a
add [ eax - 0x6a29802f ] 0xe6
or [ 0x7f7f7eda ] eax
jg rwxdata
movsd [ edi ] [ esi ]
add [ eax + 0xd90ea80 ] 0x7f7ed805
push es
jg rwxdata
xor ch 0xb1
add [ esi ] bh
jne rwxdata
add [ eax + 0x48f4005 ] 0xcb
add [ eax + 0xbbb6b80 ] 0xd
les edi [ esi + 0x7f ]
cdq
add edi [ eax + 0x7f ]
cmc
out 0x9 al
mov [ edx + 0x7cc1050d ] 0x7fd07f7f
salc
salc
test [ ebx + 0x1b058f40 ] ecx
add [ eax - 0x4bfab880 ] 0x7c
jg rwxdata
0xea81ea80 0x7f82
adc cl 0x7f
salc
cdq
add edi [ eax + 0x7f ]
cmc
add [ 0xffffffffcb048f40 ] 0x83
add [ eax + 0xd0bbb6b ] 0xc4
jle rwxdata
push 0xffffff80
xor [ ebx - 0x3bf2f6b7 ] 0x7e
jg rwxdata
inc edi
add eax 0x7f7f7cb4
nop
add [ eax + 0x3a8f581 ] 0x3e
or al 0x81
add [ eax + 0x7f96f57f ] 0x36
jg rwxdata
push cs
jg rwxdata
nop
cmpsd [ esi ] [ edi ]
add [ eax - 0x7590c200 ] 0x80
add [ eax - 0x7e06f171 ] 0x80
or [ 0x7f7f7edc ] eax
or eax 0x7f7ed805
jg rwxdata
jg rwxdata
sar [ edi - 0xb ] 0x1
or eax 0x7f7dc53d
jg rwxdata
or eax 0x7f7eea0d
jg rwxdata
add [ eax + 0x8058f81 ] 0x80
add [ eax + 0x7ec43d03 ] 0x7f
jg rwxdata
jg rwxdata
push es
je rwxdata
jle rwxdata
jl rwxdata
xchg ebp eax
or eax 0x7f7cc105
jg rwxdata
or eax [ eax + 0x4684c709 ]
jg rwxdata
imul edi [ ebx + 0x7ec40d0b ] 0x7f
xchg ebp eax
out 0x9 al
add eax 0x7f7f7eda
ror [ 0xffffffff8081103e ] 0x1
mov al [ eax + 0x167fd080 ]
pop ebp
add [ eax - 0x28c87080 ] 0x84
or [ edx + esi * 4 + 0x6b864703 ] eax
pushad
call 0x3b646db7
jg rwxdata
call 0xffffffff80c09742
jg rwxdata
add [ ecx + 0x507f8080 ] 0x58f4005
loop rwxdata
cmc
mov cl 0x0
rwxdata
add [ eax + 0x7f7f7f7f ] 0x47
call 0xffffffff80c097a9
or eax 0x80811006
adc al 0xd
push es
inc ebp
add [ eax + 0x167fd080 ] 0x29
add [ eax + 0xc064780 ] 0x81
add [ eax + 0x1286b80 ] 0x3d
mov al 0x7a
jg rwxdata
add [ edi + 0x5 ] 0xc0
jge rwxdata
jg rwxdata
retn
jg rwxdata
test [ esi - 0x39 ] al
mov [ eax + 0x7fd789ea ] al
cmc
or edi eax
jg rwxdata
add [ eax - 0x500a8080 ] 0x7f
or al 0x81
add [ eax - 0x7dbef9f1 ] 0x80
sub al 0xb1
add [ eax + 0x10060d80 ] 0xd0808081
or eax 0x80824506
adc al 0x7f
push ss
sub [ eax + 0x6478080 ] eax
or al 0x81
inc ecx
inc ebx
mov al [ eax + 0x167fd080 ]
pop ebp
add [ eax - 0x15f2f280 ] 0x7e
jg rwxdata
jg rwxdata
add eax 0xe2058f40
test [ eax - 0x4bfab880 ] al
jl rwxdata
adc [ ecx - 0x3f ] 0xa9
cld
xchg ebp eax
sbb [ esi - 0x661a93c5 ] 0x80
mov eax ds
insd
push 0xffffff9d
add [ ecx ] 0xad
add [ eax + 0x7cb40547 ] 0x7f
outsd
mov al [ eax - 0x29802e80 ]
jecxz rwxdata
imul eax [ eax + 0x6088080 ] 0x80808a6f
sar [ edi - 0x2a ] 0x1
sub dl 0x81
0x81d67f82 0xc509
xlat
jg rwxdata
jg rwxdata
jg rwxdata
shr eax 0x1
jmp rwxdata
jg rwxdata
jg rwxdata
jg rwxdata
cmpsd [ esi ] [ edi ]
add [ eax - 0x758bc200 ] 0x80
add [ ecx + 0x3e03b8f5 ] 0x41
jg rwxdata
mov ebp 0x54793f5
cmp eax 0x7f7f7cb9
inc esi
imul eax [ eax + 0x3e008080 ] 0x80808a6f
or [ edi - 0x7f7ff0fb ] 0xd67fd180
outsd
mov al [ eax + 0x58f8180 ]
jo 0x80119850
jg rwxdata
add eax 0x7f7f7dc0
add [ edx + 0x547916b ] 0xb0
jpe rwxdata
add [ eax + 0x7f7f7f80 ] 0x7f
add eax 0x7f7f7ec4
add [ eax + 0x6468080 ] 0x38
mov [ eax + 0x3e008180 ] al
je rwxdata
mov al [ eax - 0x6e947d80 ]
inc edi
add eax 0x7f7f7ab0
inc ecx
add [ eax + 0xc060f80 ] 0x81
add [ eax - 0x7dbef9b9 ] 0x80
cmp [ edi + 0x7f ] 0x7f
jg rwxdata
xlat
jg rwxdata
salc
xlat
jg rwxdata
or [ ebx ] 0x7f7dc00d
jg rwxdata
jg rwxdata
nop
or eax 0x7f7ed805
push cs
inc ecx
fdivr [ esi + 0x7f ]
jg rwxdata
adc bh 0x7f
push ss
or eax 0x8081103e
inc esi
jl rwxdata
mov [ esi + eax * 2 - 0x157f7739 ] 0xf57fd789
mov al 0x7a
mov ebp 0x54793f5
sub_402346
cmp [ eax - 0x7ffa75c5 ] esp
sbb eax 0x3be8e2ca
mov ah [ ecx ]
cmp [ edx ] 0xb6
inc ecx
mov bh [ ebx ]
mov ah [ 0x97ca280 ]
pop edx
cmp ecx [ edx + 0x3a558031 ]
sbb ecx [ esi - 0x7fca75c5 ]
mov esp 0x3beb2548
mov bh [ ecx ]
sbb [ ebx + 0x3bf41844 ] 0x8a
cmp eax 0xe4236880
leave
cmp ecx [ edx - 0x1a7fbf ]
0x3b4f
sub_4023e7
fnstcw [ edi ]
mov bl ch
or [ esi ] 0xad
nop
add bh [ edi ]
mov ah cl
adc dh 0x27
cdq
sub edi [ edi ]
mov ah ch
xor [ eax + 0x3f1c3317 ] 0x8a
in eax dx
or [ esi + 0x71 ] 0x5d
jecxz rwxdata
push ebx
mov cl ch
cmp [ ebx + 0x53083789 ] 0x8a
mov ecx 0x1e494680
mov bh cl
cmp al 0xfb
imul [ ecx + 0x3b ]
mov bh ch
and [ ebx + 0x3fe9eca5 ] 0x8a
cmc
sub [ edi ] 0x82
cwde
add al 0x53
mov dh [ ecx - 0x6629e680 ]
dec ebp
push ebx
mov dh [ ebp - 0x33b55780 ]
jpe rwxdata
or al 0x2d
fstp [ ebx + 0x3b ]
mov dh [ eax - 0x76 ]
fwait
add ebp edi
outsd
cmp ecx [ edx - 0x1e257388 ]
pop eax
aam 0x3b
mov bh [ esp + ecx * 4 - 0x80 ]
add [ eax + 0x350ddf80 ] 0x4
jo rwxdata
mov al cl
sbb [ eax ] 0xa1
add ch [ ebx + edx * 2 + 0x6880c58a ]
cmp al 0x52
jpo rwxdata
ja rwxdata
jg rwxdata
mov cl cl
adc [ edx + edi * 2 + 0x1e ] 0xb4
jmp rwxdata
jg rwxdata
pushfd
mov edi 0x8f9cf480
aaa
mov [ edi + edi * 2 - 0x4f4b8049 ] 0xdd6880ea
jbe rwxdata
xlat
add edi [ esi - 0x706e0b80 ]
aaa
xchg [ edi + 0x382ce37 ] cl
inc esi
test [ ecx ] cl
mov ah 0xb8
xor [ ecx + 0x6b ] 0x69
jg rwxdata
or eax 0x7f700405
jg rwxdata
ror [ ebx ] 0x1
cmc
lodsd [ esi ]
jno rwxdata
jno rwxdata
or eax 0x7f77b53d
call 0xffffffff80c0a59a
or eax 0x7f76b605
jg rwxdata
mov eax 0x696b7183
js rwxdata
or esi ebp
fist [ ebx - 0x76 ]
mov ebp 0xb4687e80
les edi [ ebx ]
mov cl [ 0xffffffffaabefd80 ]

mov ebx 0x53083789
mov bh [ ecx + 0x1e494680 ]
aaa
xlat
xchg [ ecx ] cl
test [ edx + 0x6b884703 ] dh
pop edi
push 0x80808080
fiadd [ ecx ]
inc esi
jpo rwxdata
push esi
call 0xffffffffb9e164d1
jg rwxdata
inc esi
test [ edi + 0x56 ] bh
jg rwxdata
jg rwxdata
add edi [ esi + 0x361f580 ]
add [ esi + 0x49 ] 0x1e
add [ eax + 0x70043d0d ] 0x7f
jg rwxdata
sub dl 0x80
or eax 0x7f741305
jg rwxdata
mov edi 0xea7f7f7b
stosb [ edi ]
add [ eax - 0x7f779780 ] 0xe4e18080
div al
loope rwxdata
jmp rwxdata
cmp eax 0x7f7f74fa
xor ebp 0xd81eae3
add eax 0x7f7f7004
rcl ecx 0x1
salc
adc [ eax - 0x3b7df672 ] eax
cmp ecx [ edx - 0x6d6e7f5f ]
sub eax 0xa58a3baa
add [ ebp + 0x3ba6fe8b ] 0x8a
lodsd [ esi ]
or [ ebp - 0x75c4a423 ] 0x70
mov bl [ ebx + 0x3b6ffd01 ]
mov bh [ eax - 0x74 ]
sar [ edi + 0x15 ] 0x1
lodsd [ esi ]
jno rwxdata
aaa
xchg [ edi + 0x382ce37 ] cl
inc esi
test [ ebx - 0x292e2eb9 ] al
adc eax 0x7f7f7bf4
add ebp [ eax - 0x7d ]
or ecx ebp
jl rwxdata
sar [ edi + 0x15 ] cl
inc eax
cmc
jg rwxdata
add eax 0x7f7f7413
rcl bl 0x1
jg rwxdata
int 0x7c
mov ebx 0xdadf548
add eax 0x7f7f70b0
ror [ 0x7f70c005 ] 0x1
or eax 0x7f70b005
jg rwxdata
jg rwxdata
jg rwxdata
dec eax
cmc
lodsd [ esi ]
jg rwxdata
cmp [ edi - 0xb ] 0x7c
jg rwxdata
mov edi 0xea7f7f7b
sub [ eax - 0x56 ] 0x75
jg rwxdata
sar [ edi + 0x15 ] 0x1
hlt
cmp [ edi + 0x15 ] 0xa1
jno rwxdata
xor [ eax + 0x7f ] esi
jg rwxdata
mov eax [ 0xffffffffbf357fb9 ]
jpo rwxdata
0xea80ea80 0xea80
jg rwxdata
or eax 0x7f70c005
add [ eax + 0x4601de80 ] 0x7b
add [ eax + 0x43d0d80 ] 0x8f7f7f70
inc esi
or [ ecx ] 0xf5
js rwxdata
xor [ ecx - 0x1a ] 0x3
mov esi 0x361f580
add [ eax + 0x7cf57f80 ] 0x7f
adc eax 0x7f7f71a5
add [ 0x7f7f7d0c ] bh
mov [ ecx + 0x7f ] esi
add [ eax + 0x6f01df80 ] 0xd7
movsd [ edi ] [ esi ]
jno rwxdata
sbb [ ecx - 0x627f617f ] 0x81
add [ eax - 0x6ec87027 ] 0x9
mov esp 0xf903e6b2
add [ eax + 0x378f8bf4 ] 0xd1
or [ 0x7f7f718d ] eax
or eax 0x7f74ff05
jg rwxdata
or eax 0x7f700435
0x75c06880 0x7f7f
jg rwxdata
dec esi
jg rwxdata
aaa
add [ eax + 0x2b048f80 ] 0x80
add [ eax + 0x7f7cf57f ] 0x15
lds edi [ edi + edi * 2 + 0x15 ]
lea esi [ ecx + 0x7f ]
jg rwxdata
xchg edx eax
call 0x795d1f6
jg rwxdata
shl [ ebp + 0x7f ] 0x7f
sbb al [ ecx - 0x7f937e7f ]
test [ ecx - 0x7e767f91 ] eax
out 0x80 al
lea eax [ ecx - 0x7e6e7f15 ]
add [ ecx - 0x7f617e6b ] 0x99
sbb [ esi - 0x7f7e6280 ] 0x378fd980
xchg ecx eax
or [ edx + esi * 4 - 0x7d06fc1a ] edi
xor ah 0x8b
jg rwxdata
jg rwxdata
hlt
xor ah 0x87
salc
jg rwxdata
jg rwxdata
0x7f80ea80 0x8915
adc eax 0x7f7f71d9
salc
xchg ecx eax
add [ eax - 0x7f7f4b98 ] 0x80
pop ecx
adc cl 0x85
imul eax [ eax - 0x7f9a7f35 ] 0x805d801d
push 0xffffff80
jge rwxdata
add [ eax + 0x1df8080 ] 0x6f
xlat
jg rwxdata
sub [ eax + 0x3e ] 0x75
jg rwxdata
imul ebx [ eax + ebp * 2 - 0x7f7f7f80 ] 0xffffffd8
lodsd [ esi ]
dec ecx
xor eax 0x7f7f7bdf
or eax 0x7f700405
jg rwxdata
fnsave [ ecx + 0x7f ]
jg rwxdata
xor esp 0x4350dfd
jo rwxdata
cmp eax 0x7f7f7d0c
xchg ecx eax
fnstenv [ ecx + 0x7f ]
jg rwxdata
jno rwxdata
fistp [ ebx + 0x7f ]
jg rwxdata
loope rwxdata
push 0x71d93d03
jg rwxdata
jg rwxdata
out dx eax
out 0xf4 al
fadd st1
jecxz rwxdata
pushfd
push 0x80808080
fsubr [ ebp - 0x7f7f6eb2 ]
jg rwxdata
mov ecx [ edi - 0x7c7d2ec9 ]
jpe rwxdata
jg rwxdata
0x8507f80 0xb305
sub [ eax - 0x40 ] 0x75
jg rwxdata
inc ebx
pop [ eax + ecx * 4 - 0xa0b2c80 ]
loop rwxdata
call 0xffffffff80e8ab70
ror edi cl
test al 0x80
or [ ebp + 0x7f ] bh
jg rwxdata
jmp 0xfffffffff43019f6
jmp 0xffffffffd3e10d15
add [ eax - 0x2f870a81 ] 0xd
add eax 0x7f7f7004
sar [ edi + 0x15 ] 0x1
add [ eax + 0x4eadd880 ] 0x91
js rwxdata
inc ecx
test [ ebx + 0x68 ] ch
add edi [ 0x7f7f71d9 ]
sub [ eax + eax * 4 - 0x7b ] 0x89806f81
and esi 0xeb818d80
adc [ ecx - 0x6a7e7f7f ] 0x81
sahf
mov eax [ eax - 0xb ]
add [ ebx - 0x7bbefc86 ] 0x6b
sub_40326a
add [ eax + 0x167fd080 ] 0x9
add [ eax - 0x2e2f2680 ] 0x7f
push ss
and [ eax - 0x42277f80 ] eax
aaa
add [ eax - 0x29780b80 ] 0x7f
push ss
jno rwxdata
xor [ esi + 0x7fd08080 ] eax
salc
fnop
call 0x7c766820
jg rwxdata
add [ eax - 0x7c89c200 ] 0x80
add [ eax + 0x3e008df5 ] 0x89
lea eax [ eax + 0x48f8080 ]
inc esi
add [ eax + 0x2f3e0080 ] 0x88
add [ eax + 0x4789f581 ] 0xc5
pop eax
add [ eax - 0x7894ff80 ] 0x47
lds ebx [ eax - 0x7f ]
add [ eax + 0x763e0000 ] 0x83
add [ eax + 0x4789f581 ] 0xc5
push esp
add [ eax - 0x78947f80 ] 0x47
lds edx [ ecx + eax * 4 - 0x80 ]
add [ eax - 0x7fab02fd ] 0xf5
xchg esp eax
or eax 0x80843306
or [ ecx ] 0xc5
push eax
or eax 0x80848f06
or [ ecx ] 0xc5
dec esp
aad 0x60
add edi [ eax - 0x7f ]
cmc
test [ ecx - 0x6f ] ebp
add [ eax + 0x7b060d80 ] 0xd0808083
0x7f80ea80 0x516
aas
mov al [ eax + 0x61367f80 ]
add [ eax + 0x5d167f80 ] 0x80
add [ eax - 0x179f3af7 ] 0xa0
into
add [ eax - 0x7fdae981 ] 0x80
sub al 0x8
xchg ebx eax
add [ eax - 0x7fdae981 ] 0x80
sub dl 0x81
0xea92ea92 0xd7f
sub edx 0x50f57f80
jg rwxdata
pop esp
shr dl 0x1
pop eax
jg rwxdata
imul edx [ edx - 0x726cf9f3 ] 0xffffff80
or [ ecx ] 0xc5
push eax
test [ eax + 0x4cc50980 ] al
mov ch 0x5
inc eax
dec esp
jg rwxdata
cmc
cwde
rcl al 0x1
rcl al 0x1
jg rwxdata
pop esp
jg rwxdata
or eax 0x808e9206
or [ ecx ] 0xc5
dec esp
or eax 0xead05cc5
mov ecx 0x5cf57f17
jg rwxdata
lds ecx [ ebp + ecx - 0x3b ]
mov cl 0x5
jg rwxdata
salc
cwde
add edi ebp
push esp
xor ch 0x8b
0x167fd680 0x8075
sub_40333a
add [ eax + 0x7fd6876b ] 0x16
mov cl [ ebp - 0x2fc7f80 ]
push esp
or [ edi + 0x7f7e6904 ] 0x893e007f
lea eax [ eax + 0x58f8180 ]
pop esp
jle rwxdata
popad
jg rwxdata
inc eax
add [ ecx ] dl
sub ch [ esi ]
sub al [ eax ]
add [ eax ] al
add [ eax ] al
add [ eax ] al
add edi esp
add [ eax ] al
add ah bh
add [ eax ] al
add esp edi
add [ eax ] al
inc ebx
dec ebp
popad
imul ebp [ esi + 0x46 ] 0x656d6172
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] eax
add [ eax ] al
add [ eax ] al
add [ eax ] al
jo rwxdata
add [ eax - 0x7f7f7f80 ] 0x80
add [ eax - 0x7f7f7f80 ] 0x80
add [ eax - 0x7f7f7f80 ] 0x80
add [ eax - 0x7f7f7f80 ] 0x80
add [ eax + 0x3a438080 ] 0x5c
push eax
jb rwxdata
lds edx [ ecx + eax * 4 - 0x80 ]
add [ eax + 0x7f7fec69 ] 0x7f
imul ecx [ ebx + 0x7e ] 0x167f7f7f
and [ eax + 0x42498080 ] eax
test [ eax - 0x7f7f7f80 ] al
add [ eax - 0x7f7f7f80 ] 0x80
add [ eax - 0x7f7f7f80 ] 0x80
add [ eax - 0x7f7f7f80 ] 0x80
add [ eax - 0x7f7f7f80 ] 0x80
add [ eax - 0x7f7f7f80 ] 0x80
add [ eax - 0x7f7f7f80 ] 0x80
add [ eax - 0x7f7f7f80 ] 0x80
add [ eax - 0x7f7f7f80 ] 0x80
add [ eax - 0x7f7f7f80 ] 0x80
add [ eax - 0x7f7f7f80 ] 0x80
add [ eax + 0x5c3a4380 ] 0x50
add [ eax ] al
loope rwxdata
pop ecx
inc eax
inc eax
add [ eax + 0x3b ] al
inc eax
add [ eax ] al
inc eax
inc eax
add [ eax ] ch
xor al 0x40
add [ ecx ] dl
add [ eax ] eax
add [ eax ] al
add [ eax ] al
add [ eax - 0x1f ] al
add [ eax ] al
inc eax
loope rwxdata
add [ eax ] eax
add [ eax ] al
add [ eax ] al
add [ eax ] al
loope rwxdata
add [ eax ] al
popad
inc esi
imul esp [ ebp + 0x73 ] 0x614d565c
jb rwxdata
add [ ecx ] dl
add [ eax ] eax
add [ eax ] al
add [ eax ] al
add [ ecx ] al
loope rwxdata
add [ eax + eax ] cl
add [ ecx ] al
loope rwxdata
add [ eax ] al
and bl [ ecx + 0x40 ]
add [ eax + eax ] cl
add [ eax ] al
add [ eax + 0x11004042 ] al
pop esp
push esi
dec ebp
ja rwxdata
add [ eax + eax ] cl
add [ eax ] al
sbb al 0x59
inc eax
add [ ecx ] dl
add [ eax ] eax
add [ eax ] al
add [ eax ] al
add [ esi ] al
loope rwxdata
add [ edx + 0x40 ] 0x0
adc [ ecx ] eax
add [ eax ] al
add [ eax ] al
add [ eax ] al
add cl ah
add [ eax ] al
add cl ah
add [ eax ] al
or al 0x0
and [ gs : edi + 0x6f ] ch
insb
jae rwxdata
add [ esi ] al
loope rwxdata
add [ eax + eax ] cl
add [ eax ] al
push ss
pop ecx
inc eax
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax + 0x42 ] ah
inc eax
add [ eax + 0x4034 ] ch
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add ah dh
pop ecx
inc eax
add [ eax + 0x40 ] al
inc eax
add [ eax ] al
inc ebx
inc eax
add al dh
inc edx
inc eax
add [ eax ] al
inc ebx
inc eax
add dh ch
pop ecx
inc eax
add al ch
pop ecx
inc eax
add dl ah
pop ecx
inc eax
add ah bl
pop ecx
inc eax
add dh dl
pop ecx
inc eax
add al dl
pop ecx
inc eax
add dl cl
pop ecx
inc eax
add [ eax ] dl
inc eax
inc eax
add ah al
pop ecx
inc eax
add [ esi - 0x47ffbfa7 ] bh
pop ecx
inc eax
add [ edx - 0x53ffbfa7 ] dh
pop ecx
inc eax
add [ esi - 0x5fffbfa7 ] ah
pop ecx
inc eax
add [ edx - 0x6bffbfa7 ] bl
pop ecx
inc eax
add [ eax - 0x71ffbfc0 ] dh
pop ecx
inc eax
add [ eax - 0x7dffbfa7 ] cl
pop ecx
inc eax
add [ ecx + ebx * 2 + 0x40 ] bh
add [ esi + 0x59 ] dh
inc eax
add [ eax + 0x59 ] dh
inc eax
add [ edx + 0x59 ] ch
inc eax
add [ ecx + ebx * 2 + 0x40 ] ah
add [ esi + 0x59 ] bl
inc eax
add [ eax + 0x59 ] bl
inc eax
add [ edx + 0x59 ] dl
inc eax
add [ ecx + ebx * 2 + 0x40 ] cl
add [ esi + 0x59 ] al
inc eax
add [ eax + 0x59 ] al
inc eax
add [ edx ] bh
pop ecx
inc eax
add [ ecx + ebx * 2 ] dh
inc eax
add [ esi ] ch
pop ecx
inc eax
add [ eax ] ch
pop ecx
inc eax
add [ eax ] cl
pop ebx
inc eax
add [ eax ] dh
inc edx
inc eax
add [ eax ] al
inc ebx
inc eax
add al dh
inc edx
inc eax
add [ eax ] al
inc ebx
inc eax
add [ edx ] al
pop ebx
inc eax
add ah bh
pop edx
inc eax
add dl ah
pop ecx
inc eax
add ah bl
pop ecx
inc eax
add dh dl
pop ecx
inc eax
add al dl
pop ecx
inc eax
add dl cl
pop ecx
inc eax
add [ eax + 0x42 ] dh
inc eax
add ah al
pop ecx
inc eax
add [ esi - 0x47ffbfa7 ] bh
pop ecx
inc eax
add [ edx - 0x53ffbfa7 ] dh
pop ecx
inc eax
add [ esi - 0x5fffbfa7 ] ah
pop ecx
inc eax
add [ edx - 0x6bffbfa7 ] bl
pop ecx
inc eax
add dh dh
pop edx
inc eax
add al dh
pop edx
inc eax
add dl ch
pop edx
inc eax
add ah ah
pop edx
inc eax
add dh bl
pop edx
inc eax
add al bl
pop edx
inc eax
add dl dl
pop edx
inc eax
add ah cl
pop edx
inc eax
add dh al
pop edx
inc eax
add al al
pop edx
inc eax
add [ edx - 0x4bffbfa6 ] bh
pop edx
inc eax
add [ esi + 0x3000405a ] ch
inc esp
inc eax
add [ eax ] dl
inc ebx
inc eax
add [ eax ] ah
inc ebx
inc eax
add [ eax - 0x5dffbfa6 ] ch
pop edx
inc eax
add [ edx + ebx * 2 + 0x5a960040 ] bl
inc eax
add [ eax - 0x75ffbfa6 ] dl
pop edx
inc eax
add [ edx + ebx * 2 + 0x5a7e0040 ] al
inc eax
add [ eax + 0x5a ] bh
inc eax
add [ edx + 0x5a ] dh
inc eax
add [ edx + ebx * 2 + 0x40 ] ch
add [ esi + 0x5a ] ah
inc eax
add [ eax + 0x5a ] ah
inc eax
add [ edx + 0x5a ] bl
inc eax
add [ edx + ebx * 2 + 0x40 ] dl
add [ esi + 0x5a ] cl
inc eax
add [ eax ] al
add [ eax ] al
add [ eax + 0x14 ] ch
inc eax
add [ eax + eax ] dl
add bh bh
inc [ eax ]
add [ eax ] dh
inc ebx
inc eax
add [ eax + 0x4043 ] dl
add [ eax ] al
add [ eax + 0x60004043 ] dh
inc eax
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax - 0xfffbfbd ] ah
inc ebx
inc eax
add [ eax ] dh
inc esp
inc eax
add al dh
inc edx
inc eax
add [ eax ] al
inc ebx
inc eax
add [ esi - 0x67ffbfa5 ] bl
pop ebx
inc eax
add dl ah
pop ecx
inc eax
add ah bl
pop ecx
inc eax
add dh dl
pop ecx
inc eax
add al dl
pop ecx
inc eax
add dl cl
pop ecx
inc eax
add al al
inc ebx
inc eax
add ah al
pop ecx
inc eax
add [ esi - 0x47ffbfa7 ] bh
pop ecx
inc eax
add [ edx - 0x53ffbfa7 ] dh
pop ecx
inc eax
add [ esi - 0x5fffbfa7 ] ah
pop ecx
inc eax
add [ edx - 0x6bffbfa7 ] bl
pop ecx
inc eax
add [ edx - 0x73ffbfa5 ] dl
pop ebx
inc eax
add [ eax + 0x44 ] al
inc eax
add [ eax + 0x44 ] dl
inc eax
add [ esi - 0x7fffbfa5 ] al
pop ebx
inc eax
add [ edx + 0x5b ] bh
inc eax
add [ ebx + ebx * 2 + 0x40 ] dh
add [ eax ] ah
inc esp
inc eax
add [ esi + 0x5b ] ch
inc eax
add [ eax + 0x5b ] ch
inc eax
add [ edx + 0x5b ] ah
inc eax
add [ ebx + ebx * 2 + 0x40 ] bl
add [ esi + 0x5b ] dl
inc eax
add [ eax + 0x5b ] dl
inc eax
add [ edx + 0x5b ] cl
inc eax
add [ ebx + ebx * 2 + 0x40 ] al
add [ esi ] bh
pop ebx
inc eax
add [ eax ] bh
pop ebx
inc eax
add [ edx ] dh
pop ebx
inc eax
add [ ebx + ebx * 2 ] ch
inc eax
add [ esi ] ah
pop ebx
inc eax
add [ eax ] ah
pop ebx
inc eax
add [ edx ] bl
pop ebx
inc eax
add [ esp + edx + 0x40 ] dh
add [ eax ] cl
add [ eax ] al
sub_403b80
sub esp 0x10
push ebx
mov ebx [ esp + 0x2c ]
push ebp
push esi
push edi
mov edi [ esp + 0x30 ]
imul edi ebx
mov edx ebx
mov [ esp + 0x18 ] ecx
neg edx
mov [ esp + 0x1c ] edx
mov edx [ esp + 0x2c ]
mov [ esp + 0x10 ] 0x0
lea eax [ ecx + 0x4 ]
add edi edx
mov [ esp + 0x14 ] 0x4
jmp rwxdata
mov esi [ esp + 0x34 ]
mov edx [ esp + 0x10 ]
imul esi ebx
lea ecx [ ecx + edx * 8 + 0x2c ]
mov ebp ebx
mov edx eax
mov eax [ esp + 0x28 ]
neg ebp
mov [ esp + 0x38 ] ecx
mov [ esp + 0x30 ] edx
add esi eax
mov [ esp + 0x2c ] 0x4
mov eax [ esp + 0x2c ]
add edx 0x2
add esi ebp
dec eax
mov [ esp + 0x30 ] edx
mov [ esp + 0x2c ] eax
jne rwxdata
mov eax [ esp + 0x24 ]
test eax eax
je rwxdata
cmp [ edx ] 0x1
jne rwxdata
mov ecx [ esp + 0x14 ]
mov eax edx
mov edx [ esp + 0x1c ]
add edi edx
dec ecx
mov [ esp + 0x14 ] ecx
jne rwxdata
mov eax [ esp + 0x10 ]
mov [ ecx - 0x4 ] esi
mov [ ecx ] edi
inc eax
add ecx 0x8
mov [ esp + 0x10 ] eax
mov [ esp + 0x38 ] ecx
mov eax [ eax + 0x4 ]
lea edx [ edi + ebx ]
lea ecx [ esi + ebx ]
push edx
push ecx
push edi
push esi
push eax
call [ Rectangle@IAT ]
mov ecx [ esp + 0x38 ]
mov edx [ esp + 0x30 ]
mov ecx [ esp + 0x18 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x10
retn 0x20
sub_403c60
push esi
mov esi ecx
call sub_403ff0
movsx eax [ esp + 0x14 ]
mov ecx 0x3
cmp eax ecx
ja rwxdata
pop esi
retn 0x10
jmp [ eax * 4 + jump_table_403d08 ]
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0xe ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x1a ] ax
mov [ esi + 0x22 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] ecx
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] 0x2
mov [ esi + 0xe ] ax
mov [ esi + 0x10 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] ecx
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x1a ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x4c ] ecx
sub_403d20
push esi
mov esi ecx
call sub_403ff0
movsx eax [ esp + 0x14 ]
mov ecx 0x3
cmp eax ecx
ja rwxdata
pop esi
retn 0x10
jmp [ eax * 4 + jump_table_403dcc ]
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x10 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x14 ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0xe ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x10 ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x22 ] ax
mov [ esi + 0x4c ] ecx
sub_403e10
push esi
mov esi ecx
call sub_403ff0
movsx eax [ esp + 0x14 ]
sub eax 0x0
je rwxdata
mov eax 0x1
mov [ esi + 0x1a ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov eax 0x3
mov [ esi + 0x48 ] eax
mov [ esi + 0x4c ] eax
dec eax
jne rwxdata
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] 0x3
mov [ esi + 0xe ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
sub_403e70
push esi
mov esi ecx
call sub_403ff0
movsx eax [ esp + 0x14 ]
sub eax 0x0
je rwxdata
mov eax 0x1
mov [ esi + 0x16 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x22 ] ax
mov [ esi + 0x20 ] ax
mov eax 0x3
mov [ esi + 0x48 ] eax
mov [ esi + 0x4c ] eax
dec eax
jne rwxdata
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] 0x3
mov [ esi + 0x10 ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
sub_403ed0
push esi
mov esi ecx
call sub_403ff0
movsx eax [ esp + 0x14 ]
sub eax 0x0
je rwxdata
mov eax 0x1
mov [ esi + 0x48 ] 0x3
mov [ esi + 0xe ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x6 ] ax
mov [ esi + 0x4c ] eax
dec eax
jne rwxdata
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] 0x2
mov [ esi + 0x18 ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1a ] ax
mov [ esi + 0x14 ] ax
mov [ esi + 0x4c ] 0x3
pop esi
retn 0x10
sub_403f30
push esi
mov esi ecx
call sub_403ff0
movsx eax [ esp + 0x14 ]
mov ecx 0x3
cmp eax ecx
ja rwxdata
pop esi
retn 0x10
jmp [ eax * 4 + jump_table_403fd4 ]
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x18 ] ax
mov [ esi + 0x22 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] ecx
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x16 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x10 ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x1a ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] ecx
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x10 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x1a ] ax
mov [ esi + 0x4c ] ecx
sub_4040b0
push 0xffffffff
push sub_406018
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x12c
push esi
mov esi ecx
push 0x0
call Ordinal_MFC42_1134
add esp 0x4
mov ecx esi
call Ordinal_MFC42_2621
push rwxdata
mov ecx esi
call Ordinal_MFC42_6117
push 0x4
mov ecx esi
call Ordinal_MFC42_4159
push 0x6c
call Ordinal_MFC42_823
add esp 0x4
mov [ esp + 0x4 ] eax
test eax eax
mov [ esp + 0x138 ] 0x0
je rwxdata
xor eax eax
push rwxdata
push rwxdata
push rwxdata
push 0x80
mov ecx eax
call Ordinal_MFC42_520
jmp rwxdata
mov ecx [ esi + 0x20 ]
push 0x0
call Ordinal_MFC42_6215
mov esi [ esi + 0x20 ]
mov edx [ esi + 0x20 ]
push edx
call [ UpdateWindow@IAT ]
push 0x408
push rwxdata
lea eax [ esp + 0x34 ]
push rwxdata
push eax
call [ sprintf@IAT ]
add esp 0x10
lea ecx [ esp + 0x8 ]
mov [ esp + 0x138 ] 0xffffffff
call Ordinal_MFC42_617
mov ecx [ esp + 0x130 ]
mov eax 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x138
retn
lea ecx [ esp + 0x8 ]
mov [ esp + 0x138 ] 0xffffffff
call Ordinal_MFC42_617
xor eax eax
pop esi
mov ecx [ esp + 0x12c ]
mov [ fs : 0x0 ] ecx
add esp 0x138
retn
push eax
mov ecx esi
mov [ esp + 0x13c ] 0xffffffff
call Ordinal_MFC42_986
lea ecx [ esp + 0x8 ]
call Ordinal_MFC42_296
lea eax [ esp + 0x8 ]
mov ecx esi
push eax
mov [ esp + 0x13c ] 0x1
call Ordinal_MFC42_5214
lea ecx [ esp + 0x8 ]
push ecx
mov ecx esi
call Ordinal_MFC42_5301
test eax eax
jne rwxdata
sub_404280
push 0xffffffff
push sub_406038
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x60
lea ecx [ esp ]
call sub_404210
lea ecx [ esp ]
mov [ esp + 0x68 ] 0x0
call Ordinal_MFC42_2514
lea ecx [ esp ]
mov [ esp + 0x68 ] 0xffffffff
call Ordinal_MFC42_641
mov ecx [ esp + 0x60 ]
mov [ fs : 0x0 ] ecx
add esp 0x6c
retn
sub_404330
push 0xffffffff
push sub_40605a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push 0x54
call Ordinal_MFC42_823
add esp 0x4
mov [ esp ] eax
test eax eax
mov [ esp + 0xc ] 0x0
je rwxdata
mov ecx [ esp + 0x4 ]
xor eax eax
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov ecx eax
call sub_4043d0
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_404750
push 0xffffffff
push sub_40607a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push 0x48
call Ordinal_MFC42_823
add esp 0x4
mov [ esp ] eax
test eax eax
mov [ esp + 0xc ] 0x0
je rwxdata
mov ecx [ esp + 0x4 ]
xor eax eax
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov ecx eax
call sub_4048b0
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4047f0
push ebx
push esi
xor ebx ebx
push edi
xor eax eax
mov dl 0x1
mov [ ecx + rwxdata ] bl
lea esi [ eax + eax * 4 ]
lea edi [ ecx + eax ]
mov [ edi + esi * 2 + rwxdata ] dl
jmp rwxdata
cmp eax 0x18
je rwxdata
inc eax
cmp eax 0x19
jl rwxdata
inc ecx
cmp ecx 0xb
jl rwxdata
xor ecx ecx
pop edi
pop esi
pop ebx
retn
sub_404830
mov eax [ esp + 0x4 ]
cmp eax 0x6
ja rwxdata
xor eax eax
retn
jmp [ eax * 4 + jump_table_404890 ]
mov eax rwxdata
mov [ rwxdata ] eax
retn
mov eax rwxdata
mov [ rwxdata ] eax
retn
mov eax rwxdata
mov [ rwxdata ] eax
retn
mov eax rwxdata
mov [ rwxdata ] eax
retn
mov eax rwxdata
mov [ rwxdata ] eax
retn
mov eax rwxdata
mov [ rwxdata ] eax
retn
mov eax rwxdata
mov [ rwxdata ] eax
retn
sub_4048b0
push esi
mov esi ecx
call Ordinal_MFC42_560
mov [ esi ] rwxdata
mov [ esi + 0x44 ] 0x0
call sub_4047f0
call [ rand@IAT ]
and eax 0x80000007
jns rwxdata
mov [ rwxdata ] eax
mov eax esi
pop esi
retn
dec eax
or eax 0xfffffff8
inc eax
sub_404920
push ecx
push ebx
push ebp
push esi
push edi
xor esi esi
mov dl 0x1
mov [ esp + 0x13 ] 0x0
mov edi 0x17
cmp esi 0x9
jne rwxdata
lea ecx [ edi + edi * 4 ]
xor ebp ebp
lea edx [ edi + ecx * 2 + rwxdata ]
mov [ esp + 0x13 ] 0x0
jmp rwxdata
inc esi
cmp esi 0xb
jl rwxdata
mov eax 0x1010101
mov ecx rwxdata
mov [ rwxdata ] eax
mov [ rwxdata ] eax
mov [ rwxdata ] ax
mov [ rwxdata ] al
mov [ esp + 0x13 ] 0x1
cmp ebp 0xa
jne rwxdata
dec edi
test edi edi
jg rwxdata
cmp [ esi + rwxdata ] dl
je rwxdata
mov bl [ ecx + eax - 0xb ]
mov [ ecx + eax ] bl
inc eax
cmp eax 0xb
jl rwxdata
sub ecx 0xb
cmp ecx rwxdata
jge rwxdata
mov al [ esp + 0x13 ]
test al al
je rwxdata
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
inc ebp
cmp ebp 0xb
jl rwxdata
mov ecx edx
mov eax 0x1010101
mov [ ecx ] eax
mov [ ecx + 0x4 ] eax
mov [ ecx + 0x8 ] ax
mov [ ecx + 0xa ] al
lea eax [ edi - 0x1 ]
test eax eax
jl rwxdata
xor eax eax
cmp [ edx + ebp ] 0x1
je rwxdata
jmp rwxdata
lea ecx [ eax + eax * 4 ]
lea esi [ eax + 0x1 ]
lea ecx [ eax + ecx * 2 + rwxdata ]
mov bl [ ecx + eax - 0xb ]
mov [ ecx + eax ] bl
inc eax
cmp eax 0xb
jl rwxdata
sub ecx 0xb
dec esi
jne rwxdata
xor eax eax
sub_404a00
push ebp
mov ebp esp
push ecx
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
mov edi [ ebp + 0xc ]
mov [ ebp - 0x4 ] ecx
mov [ ebp + 0x8 ] 0x1
lea esi [ ebx + edi - 0x1 ]
call [ rand@IAT ]
cdq
mov ecx 0x7
idiv ecx
mov eax [ ebp + 0x8 ]
inc eax
cmp eax 0xf
mov [ ebp + 0x8 ] eax
mov [ rwxdata ] edx
jl rwxdata
cmp al [ esi - 0x1 ]
je rwxdata
mov eax [ ebp - 0x4 ]
dec esi
mov [ eax + 0x44 ] 0x0
mov al [ esi ]
test al al
je rwxdata
jmp rwxdata
call sub_4047f0
mov edx [ ebp - 0x4 ]
mov [ edx + 0x44 ] 0x1
mov esi [ GlobalAlloc@IAT ]
lea eax [ edi + edi ]
push eax
push 0x0
call esi
mov ecx eax
xor eax eax
test edi edi
mov [ ebp + 0x8 ] ecx
jle rwxdata
push edi
push 0x0
call esi
mov ecx [ ebp - 0x4 ]
mov [ ebp + 0xc ] eax
mov esi eax
mov dl [ ecx + 0x44 ]
test dl dl
jne rwxdata
mov dl [ eax + ebx ]
add ecx 0x2
shr dl 0x4
add dl 0x1e
mov [ ecx - 0x2 ] dl
mov dl [ eax + ebx ]
and dl 0xf
add dl 0x1e
inc eax
mov [ ecx - 0x1 ] dl
cmp eax edi
jl rwxdata
test edi edi
jle rwxdata
mov esi ebx
mov eax [ ebp - 0x4 ]
mov cl [ eax + 0x44 ]
test cl cl
je rwxdata
mov eax [ ebp + 0x8 ]
mov eax [ ebp + 0x8 ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov eax [ ebp + 0xc ]
inc eax
mov ebx 0x24
add eax ebx
call eax
mov cl [ eax ]
add eax 0x2
xor cl 0x58
mov [ eax - 0x2 ] cl
add cl 0x2
shl cl 0x4
mov [ esi ] cl
mov dl [ eax - 0x1 ]
sub dl 0x1e
xor dl cl
mov [ esi ] dl
inc esi
dec edi
jne rwxdata
sub_404b10
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_4060f8
push eax
mov [ fs : 0x0 ] esp
mov al [ ecx + 0x44 ]
sub esp 0x44
test al al
push ebx
push ebp
push esi
push edi
mov bl 0x1
jne rwxdata
xor ebp ebp
mov [ esp + 0x24 ] rwxdata
mov [ esp + 0x28 ] ebp
lea ecx [ esp + 0x44 ]
mov [ esp + 0x5c ] ebp
call Ordinal_MFC42_323
push ebp
mov [ esp + 0x60 ] bl
call [ CreateCompatibleDC@IAT ]
push eax
lea ecx [ esp + 0x48 ]
call Ordinal_MFC42_1640
mov eax [ rwxdata ]
mov esi [ rwxdata ]
mov ecx [ rwxdata ]
mov edx [ rwxdata ]
sub eax esi
sub ecx edx
push eax
mov eax [ esp + 0x68 ]
push ecx
mov ecx [ eax + 0x4 ]
push ecx
call [ CreateCompatibleBitmap@IAT ]
push eax
lea ecx [ esp + 0x28 ]
call Ordinal_MFC42_1641
mov ebx [ esp + 0x28 ]
mov edx [ esp + 0x48 ]
lea eax [ esp + 0x24 ]
neg eax
sbb eax eax
and eax ebx
push eax
push edx
call Ordinal_MFC42_5785
mov eax [ rwxdata ]
mov ecx [ rwxdata ]
mov edi [ rwxdata ]
sub eax ecx
mov ecx [ rwxdata ]
push 0xffffff
sub ecx edi
push eax
push ecx
push ebp
push ebp
lea ecx [ esp + 0x58 ]
call Ordinal_MFC42_2753
mov [ esp + 0x20 ] ebp
mov [ esp + 0x1c ] rwxdata
mov edi rwxdata
mov [ esp + 0x18 ] ebp
mov [ esp + 0x14 ] edi
mov esi [ CreateSolidBrush@IAT ]
push 0x2b86f5
mov [ esp + 0x60 ] 0x3
call esi
push eax
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_1641
mov [ esp + 0x40 ] ebp
mov [ esp + 0x3c ] edi
push 0x2b0e91
mov [ esp + 0x60 ] 0x4
call esi
push eax
lea ecx [ esp + 0x40 ]
call Ordinal_MFC42_1641
mov [ esp + 0x38 ] ebp
mov [ esp + 0x34 ] edi
push 0x570e0f
mov [ esp + 0x60 ] 0x5
call esi
push eax
lea ecx [ esp + 0x38 ]
call Ordinal_MFC42_1641
mov [ esp + 0x30 ] ebp
mov [ esp + 0x2c ] edi
push 0x218ec7
mov [ esp + 0x60 ] 0x6
call esi
push eax
lea ecx [ esp + 0x30 ]
call Ordinal_MFC42_1641
push 0x212217
push 0x2
push ebp
call [ CreatePen@IAT ]
push eax
lea ecx [ esp + 0x20 ]
call Ordinal_MFC42_1641
lea edx [ esp + 0x1c ]
lea ecx [ esp + 0x44 ]
push edx
call Ordinal_MFC42_5788
lea eax [ esp + 0x14 ]
lea ecx [ esp + 0x44 ]
push eax
call Ordinal_MFC42_5787
mov ecx [ rwxdata ]
push ecx
call sub_404830
mov edx [ rwxdata ]
mov ecx [ rwxdata ]
add esp 0x4
push edx
mov edx [ eax + 0x4c ]
push ecx
mov ecx [ eax + 0x48 ]
push 0x19
push edx
mov edx [ rwxdata ]
push ecx
mov ecx [ rwxdata ]
push edx
lea edx [ esp + 0x5c ]
push ecx
push edx
mov ecx eax
call sub_403b80
xor esi esi
mov eax [ ecx + 0x20 ]
push rwxdata
push eax
mov [ ecx + 0x44 ] bl
call [ GetClientRect@IAT ]
mov ecx [ rwxdata ]
mov edx [ rwxdata ]
add ecx 0x64
mov [ rwxdata ] edx
mov [ rwxdata ] ecx
mov edx [ esp + 0x10 ]
add edi 0x19
inc edx
cmp edi 0x113
mov [ esp + 0x10 ] edx
jl rwxdata
cmp esi 0x16
jne rwxdata
mov edx [ esp + 0x10 ]
cmp [ edx ] 0x0
jne rwxdata
inc esi
cmp esi 0x18
jl rwxdata
cmp esi 0x13
jl rwxdata
lea eax [ esp + 0x3c ]
push eax
jmp rwxdata
lea eax [ esi + esi * 4 ]
xor edi edi
lea ecx [ esi + eax * 2 + rwxdata ]
mov [ esp + 0x10 ] ecx
call sub_404920
mov ecx [ rwxdata ]
mov eax [ rwxdata ]
mov edx [ rwxdata ]
mov ebx [ rwxdata ]
mov esi [ esp + 0x48 ]
sub ecx eax
lea eax [ esp + 0x44 ]
sub edx ebx
neg eax
sbb eax eax
push 0xcc0020
and eax esi
push ebp
push ebp
push eax
push ecx
mov ecx [ esp + 0x78 ]
push edx
push ebp
mov edx [ ecx + 0x4 ]
push ebp
push edx
call [ BitBlt@IAT ]
lea ecx [ esp + 0x1c ]
call Ordinal_MFC42_2414
lea ecx [ esp + 0x14 ]
call Ordinal_MFC42_2414
lea ecx [ esp + 0x24 ]
call Ordinal_MFC42_2414
lea ecx [ esp + 0x44 ]
call Ordinal_MFC42_2405
mov esi rwxdata
mov [ esp + 0x2c ] esi
lea ecx [ esp + 0x2c ]
mov [ esp + 0x5c ] 0x7
call Ordinal_MFC42_2414
mov edi rwxdata
mov [ esp + 0x34 ] esi
mov [ esp + 0x2c ] edi
lea ecx [ esp + 0x34 ]
mov [ esp + 0x5c ] 0x8
call Ordinal_MFC42_2414
mov [ esp + 0x34 ] edi
mov [ esp + 0x3c ] esi
lea ecx [ esp + 0x3c ]
mov [ esp + 0x5c ] 0x9
call Ordinal_MFC42_2414
mov [ esp + 0x3c ] edi
mov [ esp + 0x14 ] esi
lea ecx [ esp + 0x14 ]
mov [ esp + 0x5c ] 0xa
call Ordinal_MFC42_2414
mov [ esp + 0x14 ] edi
mov [ esp + 0x1c ] esi
lea ecx [ esp + 0x1c ]
mov [ esp + 0x5c ] 0xb
call Ordinal_MFC42_2414
lea ecx [ esp + 0x44 ]
mov [ esp + 0x1c ] edi
mov [ esp + 0x5c ] 0x0
call Ordinal_MFC42_640
mov [ esp + 0x24 ] esi
lea ecx [ esp + 0x24 ]
mov [ esp + 0x5c ] 0xc
call Ordinal_MFC42_2414
mov ecx [ esp + 0x54 ]
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x50
retn 0x4
cmp esi 0xf
jl rwxdata
cmp esi 0x15
jg rwxdata
lea ecx [ esp + 0x48 ]
call Ordinal_MFC42_5787
mov edx [ rwxdata ]
mov ebp [ rwxdata ]
lea eax [ esi + esi * 4 + 0x5 ]
lea ebx [ edi + ebp + 0x19 ]
add ebp edi
lea ecx [ edx + eax * 4 ]
add eax ecx
lea ecx [ esi + esi * 4 ]
push eax
mov eax [ esp + 0x4c ]
lea edx [ edx + ecx * 4 ]
push ebx
add ecx edx
push ecx
push ebp
push eax
call [ Rectangle@IAT ]
xor ebp ebp
cmp esi 0x14
jg rwxdata
lea ecx [ esp + 0x34 ]
push ecx
lea ecx [ esp + 0x48 ]
call Ordinal_MFC42_5787
lea edx [ esp + 0x2c ]
push edx
sub_404f00
mov eax [ rwxdata ]
push ebp
push esi
push edi
mov edi [ rwxdata ]
mov ebp ecx
add edi 0x19
push eax
mov [ rwxdata ] edi
call sub_404830
mov esi eax
add esp 0x4
mov ecx esi
mov ax [ esi + 0x24 ]
mov edx [ esi ]
push eax
push 0x0
push 0x0
push 0x0
call [ edx ]
mov ecx [ rwxdata ]
mov edx [ rwxdata ]
mov eax [ esi + 0x4c ]
push ecx
mov ecx [ esi + 0x48 ]
push edx
mov edx [ rwxdata ]
push 0x19
push eax
mov eax [ rwxdata ]
push ecx
push edx
push eax
push 0x0
mov ecx esi
call sub_403b80
xor esi esi
xor esi esi
add esi 0x8
cmp esi 0x20
jl rwxdata
mov edx [ rwxdata ]
push edx
call sub_404830
mov ecx [ eax + esi + 0x28 ]
mov edx [ rwxdata ]
sub ecx edx
mov eax 0x51eb851f
imul ecx
mov ecx [ rwxdata ]
sar edx 0x3
mov eax edx
push ecx
shr eax 0x1f
add edx eax
mov edi edx
call sub_404830
mov ecx [ eax + esi + 0x2c ]
mov eax [ rwxdata ]
sub ecx eax
mov eax 0x51eb851f
imul ecx
sar edx 0x3
mov eax edx
add esi 0x8
shr eax 0x1f
add edx eax
add esp 0x8
add edi edx
cmp esi 0x20
lea ecx [ edx + edx * 4 ]
mov [ edi + ecx * 2 + rwxdata ] 0x0
jl rwxdata
call [ rand@IAT ]
lea eax [ eax + eax * 2 ]
mov ecx 0x7
cdq
idiv ecx
push edx
mov [ rwxdata ] edx
call sub_404830
mov eax [ rwxdata ]
mov edi [ rwxdata ]
sub eax edi
add esp 0x4
cdq
sub eax edx
mov edx [ rwxdata ]
sar eax 0x1
sub eax 0xc
pop edi
pop esi
mov [ rwxdata ] eax
mov [ rwxdata ] edx
pop ebp
retn 0x4
mov ecx [ rwxdata ]
push ecx
call sub_404830
mov ecx [ eax + esi + 0x28 ]
mov eax [ rwxdata ]
sub ecx eax
mov eax 0x51eb851f
imul ecx
mov ecx [ rwxdata ]
sar edx 0x3
mov eax edx
push ecx
shr eax 0x1f
add edx eax
mov edi edx
call sub_404830
mov ecx [ eax + esi + 0x2c ]
mov edx [ rwxdata ]
sub ecx edx
mov eax 0x51eb851f
imul ecx
sar edx 0x3
mov eax edx
add esp 0x8
shr eax 0x1f
add edx eax
add edi edx
lea ecx [ edx + edx * 4 ]
mov al [ edi + ecx * 2 + rwxdata ]
test al al
je rwxdata
mov eax [ rwxdata ]
cmp eax 0xa
jle rwxdata
inc eax
mov [ rwxdata ] eax
mov eax [ ebp + 0x20 ]
push 0x1
push 0x0
push eax
call [ InvalidateRect@IAT ]
mov ecx ebp
call Ordinal_MFC42_2379
pop edi
pop esi
pop ebp
retn 0x4
cmp eax 0x64
jge rwxdata
push 0x0
mov ecx ebp
call sub_405320
sub_4050e0
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
push eax
call Ordinal_MFC42_4464
cmp eax 0xffffffff
jne rwxdata
mov [ rwxdata ] 0x0
mov ecx [ esi + 0x20 ]
push 0x0
push 0x96
push 0x1
push ecx
call [ SetTimer@IAT ]
lea edx [ esp + 0x8 ]
push edx
call [ time@IAT ]
lea eax [ esp + 0xc ]
push eax
call [ gmtime@IAT ]
mov ecx [ eax ]
push ecx
call [ srand@IAT ]
add esp 0xc
xor eax eax
pop esi
retn 0x4
or eax eax
pop esi
retn 0x4
sub_405140
mov eax [ rwxdata ]
push ebx
push esi
push edi
mov ebx ecx
push eax
call sub_404830
mov edx [ esp + 0x14 ]
mov ecx eax
add esp 0x4
lea eax [ edx - 0x25 ]
cmp eax 0x3
ja rwxdata
mov ecx ebx
call Ordinal_MFC42_2379
pop edi
pop esi
pop ebx
retn 0xc
jmp [ eax * 4 + jump_table_4052fc ]
mov ax [ ecx + 0x24 ]
inc ax
movsx eax ax
cdq
idiv [ ecx + 0x50 ]
mov [ ecx + 0x24 ] dx
mov ecx ebx
call Ordinal_MFC42_2379
pop edi
pop esi
pop ebx
retn 0xc
mov eax [ rwxdata ]
mov ecx [ rwxdata ]
cmp eax ecx
jle rwxdata
xor esi esi
xor edi edi
add eax 0x19
mov ecx ebx
mov [ rwxdata ] eax
call Ordinal_MFC42_2379
pop edi
pop esi
pop ebx
retn 0xc
sub eax 0x19
add esi 0x8
cmp esi 0x20
jl rwxdata
lea eax [ edx + edx * 4 ]
add edi edx
mov cl [ edi + eax * 2 + rwxdata ]
test cl cl
jne rwxdata
add edi 0x8
cmp edi 0x20
jl rwxdata
lea eax [ edx + edx * 4 ]
add esi edx
mov cl [ esi + eax * 2 + rwxdata ]
test cl cl
jne rwxdata
mov ecx [ rwxdata ]
push ecx
call sub_404830
mov ecx [ eax + esi + 0x28 ]
mov eax [ rwxdata ]
sub ecx eax
mov eax 0x51eb851f
imul ecx
mov ecx [ rwxdata ]
sar edx 0x3
mov eax edx
push ecx
shr eax 0x1f
add edx eax
mov edi edx
call sub_404830
mov ecx [ eax + esi + 0x2c ]
mov edx [ rwxdata ]
sub ecx edx
mov eax 0x51eb851f
imul ecx
sar edx 0x3
mov eax edx
lea ecx [ edi - 0x1 ]
shr eax 0x1f
add esp 0x8
add edx eax
test ecx ecx
jl rwxdata
mov eax [ rwxdata ]
mov ecx [ rwxdata ]
cmp eax ecx
jge rwxdata
add [ rwxdata ] 0x19
mov ecx [ rwxdata ]
push ecx
call sub_404830
mov ecx [ eax + edi + 0x28 ]
mov eax [ rwxdata ]
sub ecx eax
mov eax 0x51eb851f
imul ecx
mov ecx [ rwxdata ]
sar edx 0x3
mov eax edx
push ecx
shr eax 0x1f
add edx eax
mov esi edx
call sub_404830
mov ecx [ eax + edi + 0x2c ]
mov edx [ rwxdata ]
sub ecx edx
mov eax 0x51eb851f
imul ecx
sar edx 0x3
mov eax edx
lea ecx [ esi + 0x1 ]
shr eax 0x1f
add esp 0x8
add edx eax
cmp ecx 0xa
jg rwxdata
mov eax [ rwxdata ]
mov ecx [ rwxdata ]
cmp eax ecx
jle rwxdata
sub [ rwxdata ] 0x19
sub eax 0x19
mov ecx ebx
mov [ rwxdata ] eax
call Ordinal_MFC42_2379
pop edi
pop esi
pop ebx
retn 0xc
add eax 0x19
add eax 0x19
mov [ rwxdata ] eax
sub eax 0x19
sub_405320
sub esp 0x16c
push ebx
push esi
mov ebx ecx
push edi
mov ecx 0x8
mov esi rwxdata
lea edi [ esp + 0x14 ]
lea eax [ esp + 0x38 ]
[ edi ] [ esi ]
lea ecx [ esp + 0x14 ]
push eax
push ecx
movsw [ edi ] [ esi ]
call [ FindFirstFileA@IAT ]
lea edx [ esp + 0x14 ]
push 0x1f40
push rwxdata
mov ecx ebx
mov [ esp + 0x14 ] edx
call sub_404a00
push 0x0
call [ exit@IAT ]
sub_4053d0
push 0xffffffff
push sub_406118
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] rwxdata
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ esp + 0x8 ]
mov [ esi ] rwxdata
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_405440
push 0xffffffff
push sub_406138
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] rwxdata
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ esp + 0x8 ]
mov [ esi ] rwxdata
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4054b0
push 0xffffffff
push sub_406158
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] rwxdata
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ esp + 0x8 ]
mov [ esi ] rwxdata
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_405520
push 0xffffffff
push sub_406178
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] rwxdata
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ esp + 0x8 ]
mov [ esi ] rwxdata
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_405570
push 0xffffffff
push sub_40619a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push 0x1e0
call Ordinal_MFC42_823
add esp 0x4
mov [ esp ] eax
test eax eax
mov [ esp + 0xc ] 0x0
je rwxdata
mov ecx [ esp + 0x4 ]
xor eax eax
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov ecx eax
call sub_405610
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_405610
push 0xffffffff
push sub_4061c6
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call Ordinal_MFC42_366
lea ecx [ esi + 0xc0 ]
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_529
lea ecx [ esi + 0x140 ]
mov [ esp + 0x10 ] 0x1
call Ordinal_MFC42_554
mov ecx [ esp + 0x8 ]
mov [ esi ] rwxdata
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_405690
push 0xffffffff
push sub_4061e6
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] rwxdata
lea ecx [ esi + 0x140 ]
mov [ esp + 0x10 ] 0x1
call Ordinal_MFC42_807
lea ecx [ esi + 0xc0 ]
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_796
mov ecx esi
mov [ esp + 0x10 ] 0xffffffff
call Ordinal_MFC42_674
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_405700
mov eax [ esp + 0x4 ]
push ebx
push ebp
push esi
push edi
mov esi ecx
push eax
call Ordinal_MFC42_4457
cmp eax 0xffffffff
je rwxdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
retn 0x4
push 0xe800
xor eax eax
sub esp 0x10
xor ecx ecx
mov ebp esp
xor edx edx
lea edi [ esi + 0x140 ]
push 0x50402834
mov [ ebp ] eax
xor ebx ebx
push 0x800
push esi
mov [ ebp + 0x4 ] ecx
mov ecx edi
mov [ ebp + 0x8 ] edx
mov [ ebp + 0xc ] ebx
call Ordinal_MFC42_6625
test eax eax
je rwxdata
push 0x80
mov ecx edi
call Ordinal_MFC42_4163
test eax eax
je rwxdata
lea ebx [ esi + 0xc0 ]
push 0xe801
push 0x50008200
push esi
mov ecx ebx
call Ordinal_MFC42_2117
test eax eax
je rwxdata
push 0x4
push rwxdata
mov ecx ebx
call Ordinal_MFC42_6000
test eax eax
je rwxdata
push 0xf000
mov ecx edi
call Ordinal_MFC42_2626
push 0x0
mov ecx edi
call Ordinal_MFC42_6215
push 0x0
mov ecx ebx
call Ordinal_MFC42_6215
push 0xf000
mov ecx esi
call Ordinal_MFC42_2627
push 0x0
push 0x0
push edi
mov ecx esi
call Ordinal_MFC42_2494
push 0x0
mov ecx esi
call sub_405890
xor eax eax
pop edi
pop esi
pop ebp
pop ebx
retn 0x4
sub_4057f0
push esi
mov esi [ esp + 0x8 ]
push esi
call Ordinal_MFC42_5252
test eax eax
jne rwxdata
mov al [ rwxdata ]
push edi
mov edi [ GetSystemMetrics@IAT ]
test al 0x1
jne rwxdata
pop esi
retn 0x4
mov cl [ rwxdata ]
mov al 0x2
test al cl
jne rwxdata
mov cl al
push 0x0
or cl 0x1
mov [ rwxdata ] cl
call edi
mov [ rwxdata ] eax
mov eax 0x55555556
pop edi
imul [ rwxdata ]
mov eax edx
shr eax 0x1f
add edx eax
mov eax 0x38e38e39
mov [ esi + 0x1c ] edx
mov ecx [ rwxdata ]
imul ecx
sar edx 0x1
mov ecx edx
mov [ esi + 0x14 ] 0x11f
shr ecx 0x1f
add edx ecx
mov [ esi + 0x10 ] 0x264
mov [ esi + 0x18 ] edx
mov eax 0x1
pop esi
retn 0x4
or cl al
push 0x1
mov [ rwxdata ] cl
call edi
mov [ rwxdata ] eax
sub_405890
mov eax [ rwxdata ]
push esi
test eax eax
mov esi ecx
jne rwxdata
mov cl [ esp + 0x8 ]
test cl cl
je rwxdata
test esi esi
je rwxdata
test esi esi
jne rwxdata
test esi esi
jne rwxdata
push eax
call [ GetMenu@IAT ]
mov [ rwxdata ] eax
mov eax [ esi + 0x20 ]
mov eax [ esi + 0x20 ]
xor eax eax
jmp rwxdata
mov ecx [ esi + 0x20 ]
xor ecx ecx
jmp rwxdata
push 0x0
push eax
call [ SetMenu@IAT ]
push 0x20
push 0x0
push 0xc00000
mov ecx esi
call Ordinal_MFC42_4284
pop esi
retn 0x4
push eax
push ecx
call [ SetMenu@IAT ]
push 0x20
push 0xc00000
push 0x0
mov ecx esi
call Ordinal_MFC42_4284
pop esi
retn 0x4
_start
push ebp
mov ebp esp
push 0xffffffff
push rwxdata
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x68
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x4 ] ebx
push 0x2
call [ __set_app_type@IAT ]
pop ecx
or [ rwxdata ] 0xffffffff
or [ rwxdata ] 0xffffffff
call [ __p__fmode@IAT ]
mov ecx [ rwxdata ]
mov [ eax ] ecx
call [ __p__commode@IAT ]
mov ecx [ rwxdata ]
mov [ eax ] ecx
mov eax [ _adjust_fdiv@IAT ]
mov eax [ eax ]
mov [ rwxdata ] eax
call sub_405f8b
cmp [ rwxdata ] ebx
jne rwxdata
call sub_405f76
push rwxdata
push rwxdata
call _initterm
mov eax [ rwxdata ]
mov [ ebp - 0x6c ] eax
lea eax [ ebp - 0x6c ]
push eax
push [ rwxdata ]
lea eax [ ebp - 0x64 ]
push eax
lea eax [ ebp - 0x70 ]
push eax
lea eax [ ebp - 0x60 ]
push eax
call [ __getmainargs@IAT ]
push rwxdata
push rwxdata
call _initterm
add esp 0x24
mov eax [ _acmdln@IAT ]
mov esi [ eax ]
mov [ ebp - 0x74 ] esi
cmp [ esi ] 0x22
jne rwxdata
push sub_405f88
call [ __setusermatherr@IAT ]
pop ecx
cmp [ esi ] 0x20
jbe rwxdata
inc esi
mov [ ebp - 0x74 ] esi
mov al [ esi ]
cmp al bl
je rwxdata
mov al [ esi ]
cmp al bl
je rwxdata
inc esi
mov [ ebp - 0x74 ] esi
jmp rwxdata
cmp [ esi ] 0x22
jne rwxdata
cmp al 0x22
jne rwxdata
mov [ ebp - 0x30 ] ebx
lea eax [ ebp - 0x5c ]
push eax
call [ GetStartupInfoA@IAT ]
test [ ebp - 0x30 ] 0x1
je rwxdata
cmp al 0x20
jbe rwxdata
inc esi
mov [ ebp - 0x74 ] esi
push 0xa
pop eax
movzx eax [ ebp - 0x2c ]
jmp rwxdata
push eax
push esi
push ebx
push ebx
call [ GetModuleHandleA@IAT ]
push eax
call sub_405f92
mov [ ebp - 0x68 ] eax
push eax
call [ exit@IAT ]
sub_405faa
call Ordinal_MFC42_1168
mov ecx [ esp + 0x4 ]
mov edx [ esp + 0x8 ]
test ecx ecx
mov [ eax + 0x14 ] cl
mov [ eax + 0x1040 ] edx
jne rwxdata
push 0x1
pop eax
retn 0x8
push 0xfffffffd
call [ _setmbcp@IAT ]
pop ecx
sub_40233f
push 0x808081dc
retn
sub_4023df
add eax 0x80f18a3b
mov cl 0xab

sub_40324c
lds esp [ eax + edx * 8 + 0x7f ]
aad 0x60
add edi [ eax - 0x7f ]
cmc
test [ ecx - 0x6f ] ebp
add [ eax + 0x7b060d80 ] 0xd0808083
0x7f80ea80 0x516
sub_403b20
mov edx ecx
push edi
mov ecx 0x8
xor eax eax
lea edi [ edx + 0x4 ]
mov [ edx ] rwxdata
[ edi ]
mov [ edx + 0x24 ] ax
mov eax edx
pop edi
retn
sub_403b40
push esi
mov esi ecx
call sub_403b60
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_403b60
mov [ ecx ] rwxdata
retn
sub_403b70
retn 0x10
sub_403de0
push esi
mov esi ecx
call sub_403ff0
mov eax 0x1
mov [ esi + 0x48 ] 0x2
mov [ esi + 0x18 ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] 0x3
pop esi
retn 0x10
sub_403ff0
push edi
lea edi [ ecx + 0x4 ]
mov ecx 0x8
xor eax eax
[ edi ]
pop edi
retn
sub_404000
mov eax [ Ordinal_MFC42_4274@IAT ]
retn
sub_404010
mov eax rwxdata
retn
sub_404020
push esi
mov esi ecx
push 0x0
call Ordinal_MFC42_561
mov [ esi ] rwxdata
mov eax esi
pop esi
retn
sub_404040
push esi
mov esi ecx
call sub_404060
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_404060
jmp Ordinal_MFC42_815
sub_404070
call sub_404080
jmp sub_404090
sub_404080
mov ecx rwxdata
jmp sub_404020
sub_404090
push sub_4040a0
call sub_405dda
pop ecx
retn
sub_4040a0
mov ecx rwxdata
jmp sub_404060
sub_404210
push esi
push 0x0
mov esi ecx
push 0x64
call Ordinal_MFC42_324
mov [ esi ] rwxdata
mov eax esi
pop esi
retn
sub_404230
push esi
mov esi ecx
call sub_404250
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_404250
jmp Ordinal_MFC42_641
sub_404260
mov eax [ Ordinal_MFC42_4234@IAT ]
retn
sub_404270
mov eax rwxdata
retn
sub_4042e0
mov eax [ esp + 0x4 ]
push eax
call Ordinal_MFC42_825
pop ecx
retn 0x4
sub_4042f0
retn
sub_404300
retn 0x4
sub_404310
mov eax [ ecx + 0x20 ]
push 0x0
push eax
call [ EnableWindow@IAT ]
retn
sub_404320
mov eax [ ecx + 0x20 ]
push 0x1
push eax
call [ EnableWindow@IAT ]
retn
sub_404390
mov eax [ Ordinal_MFC42_1825@IAT ]
retn
sub_4043a0
mov eax rwxdata
retn
sub_4043b0
mov eax [ Ordinal_MFC42_4238@IAT ]
retn
sub_4043c0
mov eax rwxdata
retn
sub_4043d0
push esi
mov esi ecx
call Ordinal_MFC42_338
mov [ esi ] rwxdata
mov eax esi
pop esi
retn
sub_4043f0
push esi
mov esi ecx
call sub_404410
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_404410
mov [ ecx ] rwxdata
jmp Ordinal_MFC42_652
sub_404420
call Ordinal_MFC42_4823
neg eax
sbb eax eax
neg eax
retn
sub_404430
retn 0x4
sub_404440
mov eax [ ecx + 0x48 ]
retn
sub_404450
mov eax [ esp + 0x4 ]
mov [ ecx + 0x48 ] eax
retn 0x4
sub_404460
jmp rwxdata
retn
sub_404480
call sub_404490
jmp sub_4044c0
sub_404490
mov ecx rwxdata
jmp sub_4044a0
sub_4044a0
push esi
mov esi ecx
call sub_403b20
mov [ esi ] rwxdata
mov [ esi + 0x50 ] 0x4
mov eax esi
pop esi
retn
sub_4044c0
push sub_4044d0
call sub_405dda
pop ecx
retn
sub_4044d0
mov ecx rwxdata
jmp j_sub_403b60
sub_4044e0
call sub_4044f0
jmp sub_404530
sub_4044f0
mov ecx rwxdata
jmp sub_404500
sub_404500
push esi
mov esi ecx
call sub_403b20
mov [ esi ] rwxdata
mov [ esi + 0x50 ] 0x1
mov eax esi
pop esi
retn
j_sub_403b60
jmp sub_403b60
sub_404530
push sub_404540
call sub_405dda
pop ecx
retn
sub_404540
mov ecx rwxdata
jmp j_sub_403b60
sub_404550
call sub_404560
jmp sub_404590
sub_404560
mov ecx rwxdata
jmp sub_404570
sub_404570
push esi
mov esi ecx
call sub_403b20
mov [ esi ] rwxdata
mov [ esi + 0x50 ] 0x2
mov eax esi
pop esi
retn
sub_404590
push sub_4045a0
call sub_405dda
pop ecx
retn
sub_4045a0
mov ecx rwxdata
jmp j_sub_403b60
sub_4045b0
call sub_4045c0
jmp sub_4045f0
sub_4045c0
mov ecx rwxdata
jmp sub_4045d0
sub_4045d0
push esi
mov esi ecx
call sub_403b20
mov [ esi ] rwxdata
mov [ esi + 0x50 ] 0x2
mov eax esi
pop esi
retn
sub_4045f0
push sub_404600
call sub_405dda
pop ecx
retn
sub_404600
mov ecx rwxdata
jmp j_sub_403b60
sub_404610
call sub_404620
jmp sub_404670
sub_404620
mov ecx rwxdata
jmp sub_404630
sub_404630
push esi
mov esi ecx
call sub_403b20
mov [ esi ] rwxdata
mov [ esi + 0x50 ] 0x4
mov eax esi
pop esi
retn
sub_404650
push esi
mov esi ecx
call j_sub_403b60
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_404670
push sub_404680
call sub_405dda
pop ecx
retn
sub_404680
mov ecx rwxdata
jmp j_sub_403b60
sub_404690
call sub_4046a0
jmp sub_4046d0
sub_4046a0
mov ecx rwxdata
jmp sub_4046b0
sub_4046b0
push esi
mov esi ecx
call sub_403b20
mov [ esi ] rwxdata
mov [ esi + 0x50 ] 0x4
mov eax esi
pop esi
retn
sub_4046d0
push sub_4046e0
call sub_405dda
pop ecx
retn
sub_4046e0
mov ecx rwxdata
jmp j_sub_403b60
sub_4046f0
call sub_404700
jmp sub_404730
sub_404700
mov ecx rwxdata
jmp sub_404710
sub_404710
push esi
mov esi ecx
call sub_403b20
mov [ esi ] rwxdata
mov [ esi + 0x50 ] 0x2
mov eax esi
pop esi
retn
sub_404730
push sub_404740
call sub_405dda
pop ecx
retn
sub_404740
mov ecx rwxdata
jmp j_sub_403b60
sub_4047b0
mov eax [ Ordinal_MFC42_1945@IAT ]
retn
sub_4047c0
mov eax rwxdata
retn
sub_4047d0
mov eax [ Ordinal_MFC42_4273@IAT ]
retn
sub_4047e0
mov eax rwxdata
retn
sub_4048f0
push esi
mov esi ecx
call sub_404910
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_404910
mov [ ecx ] rwxdata
jmp Ordinal_MFC42_813
sub_404b00
mov eax [ esp + 0x4 ]
push eax
call Ordinal_MFC42_5260
retn 0x4
sub_404ee0
mov eax [ esp + 0x4 ]
push eax
call Ordinal_MFC42_2535
retn 0x4
sub_404ef0
retn 0x8
sub_405310
mov eax 0x1
retn 0x4
sub_4053a0
mov [ ecx ] rwxdata
retn
sub_4053b0
push esi
mov esi ecx
call sub_4053d0
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_405420
push esi
mov esi ecx
call sub_405440
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_405490
push esi
mov esi ecx
call sub_4054b0
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_405500
push esi
mov esi ecx
call sub_405520
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_4055d0
mov eax [ Ordinal_MFC42_1842@IAT ]
retn
sub_4055e0
mov eax rwxdata
retn
sub_4055f0
mov eax [ Ordinal_MFC42_4242@IAT ]
retn
sub_405600
mov eax rwxdata
retn
sub_405670
push esi
mov esi ecx
call sub_405690
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
Ordinal_MFC42_825
jmp [ Ordinal_MFC42_825@IAT ]
Ordinal_MFC42_4615
jmp [ Ordinal_MFC42_4615@IAT ]
Ordinal_MFC42_4612
jmp [ Ordinal_MFC42_4612@IAT ]
Ordinal_MFC42_4610
jmp [ Ordinal_MFC42_4610@IAT ]
Ordinal_MFC42_6375
jmp [ Ordinal_MFC42_6375@IAT ]
Ordinal_MFC42_4486
jmp [ Ordinal_MFC42_4486@IAT ]
Ordinal_MFC42_2554
jmp [ Ordinal_MFC42_2554@IAT ]
Ordinal_MFC42_2512
jmp [ Ordinal_MFC42_2512@IAT ]
Ordinal_MFC42_5731
jmp [ Ordinal_MFC42_5731@IAT ]
Ordinal_MFC42_3922
jmp [ Ordinal_MFC42_3922@IAT ]
Ordinal_MFC42_1089
jmp [ Ordinal_MFC42_1089@IAT ]
Ordinal_MFC42_5199
jmp [ Ordinal_MFC42_5199@IAT ]
Ordinal_MFC42_2396
jmp [ Ordinal_MFC42_2396@IAT ]
Ordinal_MFC42_3346
jmp [ Ordinal_MFC42_3346@IAT ]
Ordinal_MFC42_5300
jmp [ Ordinal_MFC42_5300@IAT ]
Ordinal_MFC42_5302
jmp [ Ordinal_MFC42_5302@IAT ]
Ordinal_MFC42_2725
jmp [ Ordinal_MFC42_2725@IAT ]
Ordinal_MFC42_4079
jmp [ Ordinal_MFC42_4079@IAT ]
Ordinal_MFC42_4698
jmp [ Ordinal_MFC42_4698@IAT ]
Ordinal_MFC42_5307
jmp [ Ordinal_MFC42_5307@IAT ]
Ordinal_MFC42_5289
jmp [ Ordinal_MFC42_5289@IAT ]
Ordinal_MFC42_5714
jmp [ Ordinal_MFC42_5714@IAT ]
Ordinal_MFC42_2982
jmp [ Ordinal_MFC42_2982@IAT ]
Ordinal_MFC42_3147
jmp [ Ordinal_MFC42_3147@IAT ]
Ordinal_MFC42_3259
jmp [ Ordinal_MFC42_3259@IAT ]
Ordinal_MFC42_4465
jmp [ Ordinal_MFC42_4465@IAT ]
Ordinal_MFC42_3136
jmp [ Ordinal_MFC42_3136@IAT ]
Ordinal_MFC42_3262
jmp [ Ordinal_MFC42_3262@IAT ]
Ordinal_MFC42_2985
jmp [ Ordinal_MFC42_2985@IAT ]
Ordinal_MFC42_3081
jmp [ Ordinal_MFC42_3081@IAT ]
Ordinal_MFC42_2976
jmp [ Ordinal_MFC42_2976@IAT ]
Ordinal_MFC42_3830
jmp [ Ordinal_MFC42_3830@IAT ]
Ordinal_MFC42_3831
jmp [ Ordinal_MFC42_3831@IAT ]
Ordinal_MFC42_3825
jmp [ Ordinal_MFC42_3825@IAT ]
Ordinal_MFC42_3079
jmp [ Ordinal_MFC42_3079@IAT ]
Ordinal_MFC42_4080
jmp [ Ordinal_MFC42_4080@IAT ]
Ordinal_MFC42_4622
jmp [ Ordinal_MFC42_4622@IAT ]
Ordinal_MFC42_4424
jmp [ Ordinal_MFC42_4424@IAT ]
Ordinal_MFC42_3738
jmp [ Ordinal_MFC42_3738@IAT ]
Ordinal_MFC42_561
jmp [ Ordinal_MFC42_561@IAT ]
Ordinal_MFC42_815
jmp [ Ordinal_MFC42_815@IAT ]
Ordinal_MFC42_6215
jmp [ Ordinal_MFC42_6215@IAT ]
Ordinal_MFC42_617
jmp [ Ordinal_MFC42_617@IAT ]
Ordinal_MFC42_5301
jmp [ Ordinal_MFC42_5301@IAT ]
Ordinal_MFC42_5214
jmp [ Ordinal_MFC42_5214@IAT ]
Ordinal_MFC42_296
jmp [ Ordinal_MFC42_296@IAT ]
Ordinal_MFC42_986
jmp [ Ordinal_MFC42_986@IAT ]
Ordinal_MFC42_520
jmp [ Ordinal_MFC42_520@IAT ]
Ordinal_MFC42_823
jmp [ Ordinal_MFC42_823@IAT ]
Ordinal_MFC42_4159
jmp [ Ordinal_MFC42_4159@IAT ]
Ordinal_MFC42_6117
jmp [ Ordinal_MFC42_6117@IAT ]
Ordinal_MFC42_2621
jmp [ Ordinal_MFC42_2621@IAT ]
Ordinal_MFC42_1134
jmp [ Ordinal_MFC42_1134@IAT ]
Ordinal_MFC42_5265
jmp [ Ordinal_MFC42_5265@IAT ]
Ordinal_MFC42_4376
jmp [ Ordinal_MFC42_4376@IAT ]
Ordinal_MFC42_4853
jmp [ Ordinal_MFC42_4853@IAT ]
Ordinal_MFC42_4998
jmp [ Ordinal_MFC42_4998@IAT ]
Ordinal_MFC42_4710
jmp [ Ordinal_MFC42_4710@IAT ]
Ordinal_MFC42_2514
jmp [ Ordinal_MFC42_2514@IAT ]
Ordinal_MFC42_6052
jmp [ Ordinal_MFC42_6052@IAT ]
Ordinal_MFC42_4078
jmp [ Ordinal_MFC42_4078@IAT ]
Ordinal_MFC42_1775
jmp [ Ordinal_MFC42_1775@IAT ]
Ordinal_MFC42_4407
jmp [ Ordinal_MFC42_4407@IAT ]
Ordinal_MFC42_5241
jmp [ Ordinal_MFC42_5241@IAT ]
Ordinal_MFC42_2385
jmp [ Ordinal_MFC42_2385@IAT ]
Ordinal_MFC42_5163
jmp [ Ordinal_MFC42_5163@IAT ]
Ordinal_MFC42_6374
jmp [ Ordinal_MFC42_6374@IAT ]
Ordinal_MFC42_4353
jmp [ Ordinal_MFC42_4353@IAT ]
Ordinal_MFC42_5280
jmp [ Ordinal_MFC42_5280@IAT ]
Ordinal_MFC42_3798
jmp [ Ordinal_MFC42_3798@IAT ]
Ordinal_MFC42_4837
jmp [ Ordinal_MFC42_4837@IAT ]
Ordinal_MFC42_4441
jmp [ Ordinal_MFC42_4441@IAT ]
Ordinal_MFC42_2648
jmp [ Ordinal_MFC42_2648@IAT ]
Ordinal_MFC42_2055
jmp [ Ordinal_MFC42_2055@IAT ]
Ordinal_MFC42_6376
jmp [ Ordinal_MFC42_6376@IAT ]
Ordinal_MFC42_3749
jmp [ Ordinal_MFC42_3749@IAT ]
Ordinal_MFC42_5065
jmp [ Ordinal_MFC42_5065@IAT ]
Ordinal_MFC42_1727
jmp [ Ordinal_MFC42_1727@IAT ]
Ordinal_MFC42_5261
jmp [ Ordinal_MFC42_5261@IAT ]
Ordinal_MFC42_2446
jmp [ Ordinal_MFC42_2446@IAT ]
Ordinal_MFC42_2124
jmp [ Ordinal_MFC42_2124@IAT ]
Ordinal_MFC42_5277
jmp [ Ordinal_MFC42_5277@IAT ]
Ordinal_MFC42_4627
jmp [ Ordinal_MFC42_4627@IAT ]
Ordinal_MFC42_4425
jmp [ Ordinal_MFC42_4425@IAT ]
Ordinal_MFC42_3597
jmp [ Ordinal_MFC42_3597@IAT ]
Ordinal_MFC42_324
jmp [ Ordinal_MFC42_324@IAT ]
Ordinal_MFC42_641
jmp [ Ordinal_MFC42_641@IAT ]
Ordinal_MFC42_4696
jmp [ Ordinal_MFC42_4696@IAT ]
Ordinal_MFC42_3058
jmp [ Ordinal_MFC42_3058@IAT ]
Ordinal_MFC42_3065
jmp [ Ordinal_MFC42_3065@IAT ]
Ordinal_MFC42_6336
jmp [ Ordinal_MFC42_6336@IAT ]
Ordinal_MFC42_2510
jmp [ Ordinal_MFC42_2510@IAT ]
Ordinal_MFC42_2542
jmp [ Ordinal_MFC42_2542@IAT ]
Ordinal_MFC42_5243
jmp [ Ordinal_MFC42_5243@IAT ]
Ordinal_MFC42_5740
jmp [ Ordinal_MFC42_5740@IAT ]
Ordinal_MFC42_1746
jmp [ Ordinal_MFC42_1746@IAT ]
Ordinal_MFC42_5577
jmp [ Ordinal_MFC42_5577@IAT ]
Ordinal_MFC42_3172
jmp [ Ordinal_MFC42_3172@IAT ]
Ordinal_MFC42_5653
jmp [ Ordinal_MFC42_5653@IAT ]
Ordinal_MFC42_4420
jmp [ Ordinal_MFC42_4420@IAT ]
Ordinal_MFC42_4953
jmp [ Ordinal_MFC42_4953@IAT ]
Ordinal_MFC42_4858
jmp [ Ordinal_MFC42_4858@IAT ]
Ordinal_MFC42_2399
jmp [ Ordinal_MFC42_2399@IAT ]
Ordinal_MFC42_4387
jmp [ Ordinal_MFC42_4387@IAT ]
Ordinal_MFC42_3454
jmp [ Ordinal_MFC42_3454@IAT ]
Ordinal_MFC42_3198
jmp [ Ordinal_MFC42_3198@IAT ]
Ordinal_MFC42_6080
jmp [ Ordinal_MFC42_6080@IAT ]
Ordinal_MFC42_6175
jmp [ Ordinal_MFC42_6175@IAT ]
Ordinal_MFC42_4623
jmp [ Ordinal_MFC42_4623@IAT ]
Ordinal_MFC42_4426
jmp [ Ordinal_MFC42_4426@IAT ]
Ordinal_MFC42_338
jmp [ Ordinal_MFC42_338@IAT ]
Ordinal_MFC42_652
jmp [ Ordinal_MFC42_652@IAT ]
Ordinal_MFC42_4823
jmp [ Ordinal_MFC42_4823@IAT ]
Ordinal_MFC42_4614
jmp [ Ordinal_MFC42_4614@IAT ]
Ordinal_MFC42_4613
jmp [ Ordinal_MFC42_4613@IAT ]
Ordinal_MFC42_4589
jmp [ Ordinal_MFC42_4589@IAT ]
Ordinal_MFC42_4899
jmp [ Ordinal_MFC42_4899@IAT ]
Ordinal_MFC42_5076
jmp [ Ordinal_MFC42_5076@IAT ]
Ordinal_MFC42_4341
jmp [ Ordinal_MFC42_4341@IAT ]
Ordinal_MFC42_4349
jmp [ Ordinal_MFC42_4349@IAT ]
Ordinal_MFC42_4723
jmp [ Ordinal_MFC42_4723@IAT ]
Ordinal_MFC42_4890
jmp [ Ordinal_MFC42_4890@IAT ]
Ordinal_MFC42_4531
jmp [ Ordinal_MFC42_4531@IAT ]
Ordinal_MFC42_4545
jmp [ Ordinal_MFC42_4545@IAT ]
Ordinal_MFC42_4543
jmp [ Ordinal_MFC42_4543@IAT ]
Ordinal_MFC42_4526
jmp [ Ordinal_MFC42_4526@IAT ]
Ordinal_MFC42_4529
jmp [ Ordinal_MFC42_4529@IAT ]
Ordinal_MFC42_4524
jmp [ Ordinal_MFC42_4524@IAT ]
Ordinal_MFC42_4964
jmp [ Ordinal_MFC42_4964@IAT ]
Ordinal_MFC42_4961
jmp [ Ordinal_MFC42_4961@IAT ]
Ordinal_MFC42_4108
jmp [ Ordinal_MFC42_4108@IAT ]
Ordinal_MFC42_6055
jmp [ Ordinal_MFC42_6055@IAT ]
Ordinal_MFC42_1776
jmp [ Ordinal_MFC42_1776@IAT ]
Ordinal_MFC42_5240
jmp [ Ordinal_MFC42_5240@IAT ]
Ordinal_MFC42_5290
jmp [ Ordinal_MFC42_5290@IAT ]
Ordinal_MFC42_3748
jmp [ Ordinal_MFC42_3748@IAT ]
Ordinal_MFC42_1726
jmp [ Ordinal_MFC42_1726@IAT ]
Ordinal_MFC42_4432
jmp [ Ordinal_MFC42_4432@IAT ]
Ordinal_MFC42_560
jmp [ Ordinal_MFC42_560@IAT ]
Ordinal_MFC42_813
jmp [ Ordinal_MFC42_813@IAT ]
Ordinal_MFC42_5260
jmp [ Ordinal_MFC42_5260@IAT ]
Ordinal_MFC42_3663
jmp [ Ordinal_MFC42_3663@IAT ]
Ordinal_MFC42_3571
jmp [ Ordinal_MFC42_3571@IAT ]
Ordinal_MFC42_3573
jmp [ Ordinal_MFC42_3573@IAT ]
Ordinal_MFC42_3693
jmp [ Ordinal_MFC42_3693@IAT ]
Ordinal_MFC42_3626
jmp [ Ordinal_MFC42_3626@IAT ]
Ordinal_MFC42_640
jmp [ Ordinal_MFC42_640@IAT ]
Ordinal_MFC42_2405
jmp [ Ordinal_MFC42_2405@IAT ]
Ordinal_MFC42_2414
jmp [ Ordinal_MFC42_2414@IAT ]
Ordinal_MFC42_5787
jmp [ Ordinal_MFC42_5787@IAT ]
Ordinal_MFC42_5788
jmp [ Ordinal_MFC42_5788@IAT ]
Ordinal_MFC42_2753
jmp [ Ordinal_MFC42_2753@IAT ]
Ordinal_MFC42_5785
jmp [ Ordinal_MFC42_5785@IAT ]
Ordinal_MFC42_1641
jmp [ Ordinal_MFC42_1641@IAT ]
Ordinal_MFC42_1640
jmp [ Ordinal_MFC42_1640@IAT ]
Ordinal_MFC42_323
jmp [ Ordinal_MFC42_323@IAT ]
Ordinal_MFC42_2535
jmp [ Ordinal_MFC42_2535@IAT ]
Ordinal_MFC42_2379
jmp [ Ordinal_MFC42_2379@IAT ]
Ordinal_MFC42_4464
jmp [ Ordinal_MFC42_4464@IAT ]
Ordinal_MFC42_2723
jmp [ Ordinal_MFC42_2723@IAT ]
Ordinal_MFC42_2390
jmp [ Ordinal_MFC42_2390@IAT ]
Ordinal_MFC42_3059
jmp [ Ordinal_MFC42_3059@IAT ]
Ordinal_MFC42_5100
jmp [ Ordinal_MFC42_5100@IAT ]
Ordinal_MFC42_5103
jmp [ Ordinal_MFC42_5103@IAT ]
Ordinal_MFC42_4467
jmp [ Ordinal_MFC42_4467@IAT ]
Ordinal_MFC42_4303
jmp [ Ordinal_MFC42_4303@IAT ]
Ordinal_MFC42_3350
jmp [ Ordinal_MFC42_3350@IAT ]
Ordinal_MFC42_5012
jmp [ Ordinal_MFC42_5012@IAT ]
Ordinal_MFC42_975
jmp [ Ordinal_MFC42_975@IAT ]
Ordinal_MFC42_5472
jmp [ Ordinal_MFC42_5472@IAT ]
Ordinal_MFC42_3403
jmp [ Ordinal_MFC42_3403@IAT ]
Ordinal_MFC42_2879
jmp [ Ordinal_MFC42_2879@IAT ]
Ordinal_MFC42_2878
jmp [ Ordinal_MFC42_2878@IAT ]
Ordinal_MFC42_4151
jmp [ Ordinal_MFC42_4151@IAT ]
Ordinal_MFC42_4077
jmp [ Ordinal_MFC42_4077@IAT ]
Ordinal_MFC42_5237
jmp [ Ordinal_MFC42_5237@IAT ]
Ordinal_MFC42_5282
jmp [ Ordinal_MFC42_5282@IAT ]
Ordinal_MFC42_2649
jmp [ Ordinal_MFC42_2649@IAT ]
Ordinal_MFC42_1665
jmp [ Ordinal_MFC42_1665@IAT ]
Ordinal_MFC42_4436
jmp [ Ordinal_MFC42_4436@IAT ]
Ordinal_MFC42_4427
jmp [ Ordinal_MFC42_4427@IAT ]
Ordinal_MFC42_796
jmp [ Ordinal_MFC42_796@IAT ]
Ordinal_MFC42_674
jmp [ Ordinal_MFC42_674@IAT ]
Ordinal_MFC42_554
jmp [ Ordinal_MFC42_554@IAT ]
Ordinal_MFC42_529
jmp [ Ordinal_MFC42_529@IAT ]
Ordinal_MFC42_366
jmp [ Ordinal_MFC42_366@IAT ]
Ordinal_MFC42_807
jmp [ Ordinal_MFC42_807@IAT ]
Ordinal_MFC42_2494
jmp [ Ordinal_MFC42_2494@IAT ]
Ordinal_MFC42_2627
jmp [ Ordinal_MFC42_2627@IAT ]
Ordinal_MFC42_2626
jmp [ Ordinal_MFC42_2626@IAT ]
Ordinal_MFC42_6000
jmp [ Ordinal_MFC42_6000@IAT ]
Ordinal_MFC42_2117
jmp [ Ordinal_MFC42_2117@IAT ]
Ordinal_MFC42_4163
jmp [ Ordinal_MFC42_4163@IAT ]
Ordinal_MFC42_6625
jmp [ Ordinal_MFC42_6625@IAT ]
Ordinal_MFC42_4457
jmp [ Ordinal_MFC42_4457@IAT ]
Ordinal_MFC42_5252
jmp [ Ordinal_MFC42_5252@IAT ]
Ordinal_MFC42_4284
jmp [ Ordinal_MFC42_4284@IAT ]
sub_405dae
cmp [ rwxdata ] 0xffffffff
jne rwxdata
push rwxdata
push rwxdata
push [ esp + 0xc ]
call __dllonexit
add esp 0xc
retn
push [ esp + 0x4 ]
call [ _onexit@IAT ]
pop ecx
retn
sub_405dda
push [ esp + 0x4 ]
call sub_405dae
neg eax
sbb eax eax
pop ecx
neg eax
dec eax
retn
__CxxFrameHandler
jmp [ __CxxFrameHandler@IAT ]
_except_handler3
jmp [ _except_handler3@IAT ]
__dllonexit
jmp [ __dllonexit@IAT ]
_XcptFilter
jmp [ _XcptFilter@IAT ]
_initterm
jmp [ _initterm@IAT ]
sub_405f76
push 0x30000
push 0x10000
call _controlfp
pop ecx
pop ecx
retn
sub_405f88
xor eax eax
retn
sub_405f8b
retn
_controlfp
jmp [ _controlfp@IAT ]
sub_405f92
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
call Ordinal_MFC42_1576
retn 0x10
j_sub_405fd8
jmp sub_405fd8
sub_405fd8
push 0x600
push 0x0
call sub_405faa
mov [ rwxdata ] al
retn
Ordinal_MFC42_1576
jmp [ Ordinal_MFC42_1576@IAT ]
Ordinal_MFC42_1168
jmp [ Ordinal_MFC42_1168@IAT ]
sub_406000
mov eax [ ebp - 0x138 ]
push eax
call sub_4042e0
retn
sub_40600d
lea ecx [ ebp - 0x134 ]
jmp Ordinal_MFC42_617
sub_406018
mov eax rwxdata
jmp __CxxFrameHandler
sub_406030
lea ecx [ ebp - 0x6c ]
jmp sub_404250
sub_406038
mov eax rwxdata
jmp __CxxFrameHandler
sub_406050
mov eax [ ebp - 0x10 ]
push eax
call sub_4042e0
retn
sub_40605a
mov eax rwxdata
jmp __CxxFrameHandler
sub_406070
mov eax [ ebp - 0x10 ]
push eax
call sub_4042e0
retn
sub_40607a
mov eax rwxdata
jmp __CxxFrameHandler
sub_406090
lea ecx [ ebp - 0x3c ]
jmp sub_405520
sub_406098
lea ecx [ ebp - 0x1c ]
jmp Ordinal_MFC42_640
sub_4060a0
lea ecx [ ebp - 0x44 ]
jmp sub_405440
sub_4060a8
lea ecx [ ebp - 0x4c ]
jmp sub_4054b0
sub_4060b0
lea ecx [ ebp - 0x24 ]
jmp sub_4054b0
sub_4060b8
lea ecx [ ebp - 0x2c ]
jmp sub_4054b0
sub_4060c0
lea ecx [ ebp - 0x34 ]
jmp sub_4054b0
sub_4060c8
lea ecx [ ebp - 0x34 ]
jmp sub_4053a0
sub_4060d0
lea ecx [ ebp - 0x2c ]
jmp sub_4053a0
sub_4060d8
lea ecx [ ebp - 0x24 ]
jmp sub_4053a0
sub_4060e0
lea ecx [ ebp - 0x4c ]
jmp sub_4053a0
sub_4060e8
lea ecx [ ebp - 0x44 ]
jmp sub_4053a0
sub_4060f0
lea ecx [ ebp - 0x3c ]
jmp sub_4053a0
sub_4060f8
mov eax rwxdata
jmp __CxxFrameHandler
sub_406110
mov ecx [ ebp - 0x10 ]
jmp sub_4053a0
sub_406118
mov eax rwxdata
jmp __CxxFrameHandler
sub_406130
mov ecx [ ebp - 0x10 ]
jmp sub_4053a0
sub_406138
mov eax rwxdata
jmp __CxxFrameHandler
sub_406150
mov ecx [ ebp - 0x10 ]
jmp sub_4053a0
sub_406158
mov eax rwxdata
jmp __CxxFrameHandler
sub_406170
mov ecx [ ebp - 0x10 ]
jmp sub_4053a0
sub_406178
mov eax rwxdata
jmp __CxxFrameHandler
sub_406190
mov eax [ ebp - 0x10 ]
push eax
call sub_4042e0
retn
sub_40619a
mov eax rwxdata
jmp __CxxFrameHandler
sub_4061b0
mov ecx [ ebp - 0x10 ]
jmp Ordinal_MFC42_674
sub_4061b8
mov ecx [ ebp - 0x10 ]
add ecx 0xc0
jmp Ordinal_MFC42_796
sub_4061c6
mov eax rwxdata
jmp __CxxFrameHandler
sub_4061d0
mov ecx [ ebp - 0x10 ]
jmp Ordinal_MFC42_674
sub_4061d8
mov ecx [ ebp - 0x10 ]
add ecx 0xc0
jmp Ordinal_MFC42_796
sub_4061e6
mov eax rwxdata
jmp __CxxFrameHandler
