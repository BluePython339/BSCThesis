sub_10001000
dec eax
cmp eax 0x1a
ja r-xdata
xor eax eax
retn
jmp [ eax * 4 + jump_table_10001268 ]
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
sub_100012e0
cmp eax 0x12d
jg r-xdata
cmp eax 0x259
jg r-xdata
je r-xdata
add eax 0xfffffda6
cmp eax 0x63
ja r-xdata
je r-xdata
mov eax r--data
dec eax
cmp eax 0xc9
ja r-xdata
xor eax eax
retn
movzx edx [ eax + lookup_table_10001f4c ]
jmp [ edx * 4 + jump_table_10001f10 ]
mov eax r--data
lea ecx [ ecx ]
add eax 0xfffffed2
cmp eax 0xc7
ja r-xdata
inc eax
cmp [ eax ] 0x0
jne r-xdata
sub eax r--data
push r--data
mov ecx eax
call sub_10002b50
add esp 0x4
retn
movzx eax [ eax + lookup_table_10001d34 ]
jmp [ eax * 4 + jump_table_10001c20 ]
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
inc eax
cmp [ eax ] 0x0
jne r-xdata
sub eax r--data
push r--data
mov ecx eax
call sub_10002b50
add esp 0x4
retn
movzx ecx [ eax + lookup_table_10001e48 ]
jmp [ ecx * 4 + jump_table_10001e00 ]
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
mov ecx r--data
call sub_10002b30
push ecx
mov ecx eax
call sub_10002b50
add esp 0x4
retn
sub_10001fb0
push ebp
mov ebp esp
sub esp 0xc
mov eax [ fs : 0x30 ]
mov eax [ eax + 0xc ]
add eax 0xc
push ebx
mov ebx [ eax ]
push esi
push edi
mov [ ebp - 0xc ] eax
mov [ ebp - 0x4 ] ebx
cmp ebx eax
je r-xdata
pop edi
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn
movzx esi [ ebx + 0x2c ]
mov ecx [ ebx + 0x30 ]
mov [ ebp - 0x8 ] esi
test ecx ecx
je r-xdata
mov ebx [ ebx ]
mov [ ebp - 0x4 ] ebx
cmp ebx eax
jne r-xdata
movzx eax [ ecx ]
xor edx edx
xor edi edi
test ax ax
je r-xdata
mov eax [ ebp - 0xc ]
jmp r-xdata
test esi esi
je r-xdata
movzx esi ax
lea ebx [ esi - 0x41 ]
mov eax esi
cmp bx 0x19
ja r-xdata
cmp edi esi
jae r-xdata
mov ebx [ ebp - 0x4 ]
movzx eax ax
rol edx 0x7
add ecx 0x2
xor edx eax
movzx eax [ ecx ]
inc edi
test ax ax
jne r-xdata
add esi 0x20
movzx eax si
cmp edx 0x4b1ffe8e
je r-xdata
mov esi [ ebp - 0x8 ]
mov eax [ ebx + 0x18 ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10002050
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
test ecx ecx
jne r-xdata
mov al [ ecx ]
push ebx
mov ebx ecx
test al al
je r-xdata
xor eax eax
pop ebp
retn
xor eax eax
pop ebx
pop ebp
retn
cmp al 0x2e
je r-xdata
push esi
mov esi ebx
push edi
sub esi ecx
call sub_10002570
push eax
lea ecx [ esi + 0x1 ]
call sub_10002620
mov edi eax
add esp 0x4
mov ecx esi
test edi edi
je r-xdata
mov al [ ebx + 0x1 ]
inc ebx
test al al
jne r-xdata
push r--data
push r--data
push edi
call sub_10002d30
add esp 0xc
mov esi eax
test edi edi
je r-xdata
test esi esi
je r-xdata
mov al [ ebx + 0x1 ]
lea edx [ ebx + 0x1 ]
xor ecx ecx
cmp al 0x23
jne r-xdata
call sub_10002570
push eax
mov ecx edi
call sub_100026d0
mov esi [ ebp + 0x8 ]
sub esi edi
test al al
je r-xdata
inc edx
je r-xdata
mov dl [ esi + eax ]
mov [ eax ] dl
inc eax
dec ecx
jne r-xdata
push ecx
push 0x0
push esi
call sub_10002210
add esp 0xc
pop edi
pop esi
pop ebx
pop ebp
retn
lea ebx [ ebx ]
mov al [ edx ]
test al al
je r-xdata
movsx eax al
rol ecx 0x7
inc edx
xor ecx eax
mov al [ edx ]
test al al
jne r-xdata
movsx eax al
lea ecx [ ecx + ecx * 4 ]
inc edx
lea ecx [ eax + ecx * 2 - 0x30 ]
mov al [ edx ]
test al al
jne r-xdata
push ecx
push 0x0
push esi
call sub_10002210
add esp 0xc
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10002130
push ebp
mov ebp esp
sub esp 0xc
test ebx ebx
jne r-xdata
mov eax [ ebx + 0x3c ]
mov ecx [ eax + ebx + 0x7c ]
mov edx [ ebp + 0x8 ]
lea eax [ eax + ebx + 0x18 ]
push esi
push edi
mov edi [ eax + 0x60 ]
mov eax edx
shr eax 0x10
add edi ebx
mov [ ebp - 0xc ] ecx
test eax eax
jne r-xdata
xor eax eax
mov esp ebp
pop ebp
retn
mov esi [ edi + 0x20 ]
mov eax [ edi + 0x24 ]
add eax ebx
add esi ebx
cmp [ edi + 0x18 ] 0x0
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x8 ] 0x0
jbe r-xdata
movzx eax dx
sub eax [ edi + 0x10 ]
jmp r-xdata
pop edi
xor eax eax
pop esi
mov esp ebp
pop ebp
retn
mov ecx [ esi ]
add ecx ebx
jne r-xdata
test eax eax
jns r-xdata
mov al [ ecx ]
xor edx edx
test al al
je r-xdata
or ecx 0xffffffff
jmp r-xdata
mov ecx [ edi + 0x1c ]
lea edx [ ecx + eax * 4 ]
mov eax [ edx + ebx ]
add eax ebx
cmp eax edi
jbe r-xdata
mov eax [ ebp - 0x4 ]
mov ecx edx
mov edx [ ebp + 0x8 ]
movsx eax al
rol edx 0x7
inc ecx
xor edx eax
mov al [ ecx ]
test al al
jne r-xdata
cmp ecx edx
je r-xdata
pop edi
pop esi
mov esp ebp
pop ebp
retn
mov ecx eax
sub ecx edi
cmp ecx [ ebp - 0xc ]
jae r-xdata
movzx eax [ eax ]
mov ecx [ ebp - 0x8 ]
inc ecx
add eax 0x2
add esi 0x4
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x8 ] ecx
cmp ecx [ edi + 0x18 ]
jb r-xdata
push eax
call sub_10002050
add esp 0x4
pop edi
xor eax eax
pop esi
mov esp ebp
pop ebp
retn
sub_10002210
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push ebx
xor ebx ebx
push esi
cmp eax 0x1
jne r-xdata
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
push 0x2b
push 0xa48d6762
push 0x1
push 0x0
call sub_10002290
add esp 0x10
push esi
call eax
mov ebx eax
test ebx ebx
jne r-xdata
call sub_10001000
mov esi eax
jmp r-xdata
mov ebx eax
test eax eax
jne r-xdata
call sub_10001fb0
mov [ rw-data ] eax
mov eax [ ebp + 0x10 ]
test eax eax
jne r-xdata
push esi
call sub_10002420
mov ebx eax
test esi esi
je r-xdata
mov esi [ ebp + 0x8 ]
push eax
call sub_10002130
add esp 0x4
pop esi
pop ebx
pop ebp
retn
pop esi
mov eax ebx
pop ebx
pop ebp
retn
sub_10002290
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x14 ]
lea ecx [ esi - 0x1 ]
xor eax eax
cmp ecx 0x242
ja r-xdata
test eax eax
jne r-xdata
mov eax [ esi * 4 + rw-data ]
pop esi
pop ebp
retn
mov edx [ ebp + 0x10 ]
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
push edx
push eax
push ecx
call sub_10002210
lea edx [ esi - 0x1 ]
add esp 0xc
cmp edx 0x242
ja r-xdata
mov [ esi * 4 + rw-data ] eax
sub_100022e0
push ebp
mov ebp esp
push ecx
push ebx
mov ebx [ ebp + 0x8 ]
lea ecx [ ebx - 0x1 ]
xor eax eax
cmp ecx 0x242
ja r-xdata
test eax eax
jne r-xdata
mov eax [ ebx * 4 + rw-data ]
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x14 ]
push esi
push edi
xor edi edi
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
cmp eax 0x1
jne r-xdata
mov eax [ ebp + 0x10 ]
call sub_100012e0
call sub_10001000
mov edi eax
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
push r--data
call eax
mov esi eax
mov eax [ rw-data ]
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov esi eax
jmp r-xdata
call sub_10001fb0
mov [ rw-data ] eax
mov ecx [ rw-data ]
test ecx ecx
jne r-xdata
test edi edi
je r-xdata
push 0xa48d6762
mov ebx eax
call sub_10002130
mov ebx [ ebp + 0x8 ]
add esp 0x4
mov [ rw-data ] eax
call sub_10001fb0
mov [ rw-data ] eax
test esi esi
jne r-xdata
mov edx [ ebp - 0x4 ]
push edx
push esi
call ecx
mov esi eax
test edi edi
je r-xdata
test eax eax
jne r-xdata
push edi
call sub_10002420
mov esi eax
mov eax [ rw-data ]
cmp [ ebp + 0x14 ] 0x0
jne r-xdata
call sub_10002570
push eax
mov ecx edi
call sub_100026d0
push 0x1fc0eaee
mov ebx eax
call sub_10002130
mov ebx [ ebp + 0x8 ]
mov ecx eax
add esp 0x4
mov [ rw-data ] ecx
call sub_10001fb0
mov [ rw-data ] eax
lea eax [ ebx - 0x1 ]
cmp eax 0x242
mov eax esi
ja r-xdata
mov edi [ ebp - 0x4 ]
test edi edi
je r-xdata
pop edi
pop esi
mov [ ebx * 4 + rw-data ] esi
call sub_10002570
push eax
mov ecx edi
call sub_100026d0
sub_10002420
push ebp
mov ebp esp
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x28 ] eax
xor eax eax
mov [ ebp - 0x23 ] eax
mov [ ebp - 0x1f ] eax
mov [ ebp - 0x1b ] eax
mov [ ebp - 0x14 ] 0xa2a17128
mov [ ebp - 0x10 ] 0x2c821fb0
mov [ ebp - 0xc ] 0x2729fc95
mov [ ebp - 0x8 ] 0x0
mov [ ebp - 0x24 ] 0x0
lea eax [ ebp - 0x14 ]
inc eax
cmp [ eax ] 0x0
jne r-xdata
lea ecx [ ebp - 0x14 ]
sub eax ecx
push eax
mov edx ecx
push edx
lea eax [ ebp - 0x24 ]
push eax
call sub_100073b0
add esp 0xc
cmp [ ebp - 0x24 ] 0x0
lea eax [ ebp - 0x24 ]
je r-xdata
push esi
lea ecx [ ebp - 0x24 ]
push edi
sub eax ecx
push eax
mov esi ecx
mov edi r--data
call sub_10002e80
mov edx esi
push edx
push 0x0
push 0x1
push 0x2
call sub_100022e0
mov ecx [ ebp - 0x28 ]
add esp 0x14
push ecx
call eax
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_1000300c
mov esp ebp
pop ebp
retn 0x4
inc eax
cmp [ eax ] 0x0
jne r-xdata
sub_100024d0
push ebp
mov ebp esp
push esi
mov esi [ rw-data ]
test esi esi
jne r-xdata
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
push 0x0
push 0x0
push 0x0
push eax
push 0x0
push 0x0
push ecx
call esi
pop esi
pop ebp
retn
push edi
lea eax [ esi + 0xa ]
call sub_100012e0
mov edi eax
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov ecx [ rw-data ]
mov esi eax
test ecx ecx
jne r-xdata
call sub_10001fb0
mov [ rw-data ] eax
push edi
push esi
call ecx
mov esi eax
test edi edi
je r-xdata
test eax eax
jne r-xdata
mov [ rw-data ] esi
pop edi
call sub_10002570
push eax
mov ecx edi
call sub_100026d0
push ebx
push 0x1fc0eaee
mov ebx eax
call sub_10002130
add esp 0x4
mov ecx eax
mov [ rw-data ] ecx
pop ebx
call sub_10001fb0
mov [ rw-data ] eax
sub_10002570
push ebp
mov ebp esp
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
xor eax eax
mov [ ebp - 0x23 ] eax
mov [ ebp - 0x1f ] eax
mov [ ebp - 0x1b ] eax
mov [ ebp - 0x17 ] ax
mov [ ebp - 0x14 ] 0x96b47b23
mov [ ebp - 0x10 ] 0x3b83198e
mov [ ebp - 0xc ] 0x318fd87
mov [ ebp - 0x8 ] 0x26dd
mov [ ebp - 0x6 ] 0x0
mov [ ebp - 0x24 ] 0x0
lea eax [ ebp - 0x14 ]
inc eax
cmp [ eax ] 0x0
jne r-xdata
lea ecx [ ebp - 0x14 ]
sub eax ecx
push eax
mov edx ecx
push edx
lea eax [ ebp - 0x24 ]
push eax
call sub_100073b0
add esp 0xc
cmp [ ebp - 0x24 ] 0x0
lea eax [ ebp - 0x24 ]
je r-xdata
push esi
lea ecx [ ebp - 0x24 ]
push edi
sub eax ecx
push eax
mov esi ecx
mov edi r--data
call sub_10002e80
mov edx esi
push edx
push 0x0
push 0x1
push 0x93
call sub_100022e0
add esp 0x14
call eax
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_1000300c
mov esp ebp
pop ebp
retn
lea esp [ esp ]
inc eax
cmp [ eax ] 0x0
jne r-xdata
sub_10002620
push ebp
mov ebp esp
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x20 ] eax
xor eax eax
mov [ ebp - 0x1b ] eax
mov [ ebp - 0x17 ] eax
mov [ ebp - 0x13 ] al
mov [ ebp - 0x24 ] ecx
mov [ ebp - 0x10 ] 0xb6a17b2c
mov [ ebp - 0xc ] 0x318c1abd
mov [ ebp - 0x8 ] 0x97
mov [ ebp - 0x1c ] 0x0
lea eax [ ebp - 0x10 ]
nop
inc eax
cmp [ eax ] 0x0
jne r-xdata
lea edx [ ebp - 0x10 ]
sub eax edx
push eax
mov eax edx
push eax
lea ecx [ ebp - 0x1c ]
push ecx
call sub_100073b0
add esp 0xc
cmp [ ebp - 0x1c ] 0x0
lea eax [ ebp - 0x1c ]
je r-xdata
push esi
lea edx [ ebp - 0x1c ]
push edi
sub eax edx
push eax
mov esi edx
mov edi r--data
call sub_10002e80
mov eax esi
push eax
push 0x0
push 0x1
push 0x94
call sub_100022e0
mov ecx [ ebp - 0x24 ]
mov edx [ ebp - 0x20 ]
add esp 0x14
push ecx
push 0x8
push edx
call eax
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_1000300c
mov esp ebp
pop ebp
retn
inc eax
cmp [ eax ] 0x0
jne r-xdata
sub_100026d0
push ebp
mov ebp esp
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x20 ] eax
xor eax eax
mov [ ebp - 0x1b ] eax
mov [ ebp - 0x17 ] eax
mov [ ebp - 0x24 ] ecx
mov [ ebp - 0x10 ] 0xb6a17b2c
mov [ ebp - 0xc ] 0x3b8504ba
mov [ ebp - 0x8 ] 0x0
mov [ ebp - 0x1c ] 0x0
lea eax [ ebp - 0x10 ]
lea ebx [ ebx ]
inc eax
cmp [ eax ] 0x0
jne r-xdata
lea edx [ ebp - 0x10 ]
sub eax edx
push eax
mov eax edx
push eax
lea ecx [ ebp - 0x1c ]
push ecx
call sub_100073b0
add esp 0xc
cmp [ ebp - 0x1c ] 0x0
lea eax [ ebp - 0x1c ]
je r-xdata
push esi
lea edx [ ebp - 0x1c ]
push edi
sub eax edx
push eax
mov esi edx
mov edi r--data
call sub_10002e80
mov eax esi
push eax
push 0x0
push 0x1
push 0x97
call sub_100022e0
mov ecx [ ebp - 0x24 ]
mov edx [ ebp - 0x20 ]
add esp 0x14
push ecx
push 0x8
push edx
call eax
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_1000300c
mov esp ebp
pop ebp
retn 0x4
inc eax
cmp [ eax ] 0x0
jne r-xdata
sub_10002780
push ebp
mov ebp esp
cmp [ ebp + 0x10 ] 0x0
mov edx [ ebp + 0x8 ]
jbe r-xdata
pop ebp
retn
push esi
push edi
mov edi edi
pop edi
pop esi
add eax 0xfffffff8
xor edi edi
lea esi [ edx + 0x8 ]
test eax 0xfffffffe
jbe r-xdata
add edx [ edx + 0x4 ]
mov ecx edx
sub ecx [ ebp + 0x8 ]
cmp ecx [ ebp + 0x10 ]
jb r-xdata
movzx ecx [ esi ]
mov eax ecx
and eax 0xfff
add eax [ edx ]
shr cx 0xc
cmp cx 0x3
je r-xdata
mov eax [ edx + 0x4 ]
test eax eax
je r-xdata
mov ecx [ ebp + 0xc ]
add [ eax + ebx ] ecx
cmp cx 0xa
jne r-xdata
mov eax [ edx + 0x4 ]
sub eax 0x8
inc edi
shr eax 0x1
add esi 0x2
cmp edi eax
jb r-xdata
sub_100027f0
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
and eax 0xffff0000
mov eax sub_100027f0
sub eax 0x1000
jmp r-xdata
mov ecx [ eax + 0x3c ]
cmp ecx 0x1000
jge r-xdata
mov ecx 0x5a4d
cmp [ eax ] cx
jne r-xdata
cmp [ ecx + eax ] 0x4550
je r-xdata
pop ebp
retn 0x4
sub_10002830
push ebp
mov ebp esp
sub esp 0x14
push ebx
push esi
mov eax sub_10002ae0
push edi
mov esi sub_10002ae0
test eax eax
jne r-xdata
and esi 0xffff0000
mov esi sub_100027f0
sub esi 0x1000
jmp r-xdata
mov eax [ esi + 0x3c ]
cmp eax 0x1000
jge r-xdata
mov ecx 0x5a4d
cmp [ esi ] cx
jne r-xdata
cmp [ eax + esi ] 0x4550
je r-xdata
mov edi eax
mov edx [ edi + esi + 0x50 ]
mov [ ebp - 0x4 ] edx
call sub_10002570
mov ecx [ ebp - 0x4 ]
push eax
call sub_10002620
mov ebx eax
add esp 0x4
test ebx ebx
jne r-xdata
mov eax [ ebp - 0x4 ]
push eax
push esi
push ebx
call sub_100073b0
push 0x0
push 0x66
push 0x5
push 0x1ac
mov [ ebp - 0x8 ] 0x0
mov [ ebp - 0xc ] 0xffffffff
call sub_100022e0
add esp 0x1c
push 0x40
push 0x3000
lea ecx [ ebp - 0x4 ]
push ecx
mov ecx [ ebp + 0x8 ]
push 0x0
lea edx [ ebp - 0x8 ]
push edx
push ecx
call eax
test eax eax
jne r-xdata
pop edi
pop esi
or eax 0xffffffff
pop ebx
mov esp ebp
pop ebp
retn
mov edi [ ebp - 0xc ]
mov edx [ edi + esi + 0xa4 ]
mov eax [ ebp - 0x8 ]
mov ecx [ edi + esi + 0xa0 ]
push edx
sub eax esi
push eax
add ecx esi
push ecx
call sub_10002780
mov edx [ ebp - 0x8 ]
mov edi [ ebp - 0x4 ]
push 0x0
push 0x67
push 0x5
push 0x1ae
mov [ ebp - 0x10 ] edx
call sub_100022e0
mov ecx [ ebp - 0x10 ]
mov edx [ ebp + 0x8 ]
add esp 0x1c
push 0x0
push edi
push ebx
push ecx
push edx
call eax
test eax eax
jne r-xdata
mov edi [ ebp - 0x8 ]
sub edi esi
add edi sub_10002ae0
jmp r-xdata
push 0x0
push 0x68
push 0x5
push 0x1af
mov [ ebp - 0x14 ] 0x0
call sub_100022e0
add esp 0x10
lea ecx [ ebp - 0x14 ]
push ecx
push 0x40
lea edx [ ebp - 0x4 ]
push edx
mov edx [ ebp + 0x8 ]
lea ecx [ ebp - 0x8 ]
push ecx
push edx
call eax
call sub_10002570
push eax
mov ecx ebx
call sub_100026d0
mov eax edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10002990
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x28
push ebx
push esi
xor eax eax
push 0x0
push 0x6d
mov [ esp + 0x24 ] eax
mov [ esp + 0x28 ] eax
mov [ esp + 0x2c ] eax
mov [ esp + 0x30 ] eax
mov [ esp + 0x34 ] eax
mov eax [ ebp + 0x8 ]
push 0x5
push 0x1a9
mov [ esp + 0x28 ] 0x18
mov [ esp + 0x20 ] eax
mov [ esp + 0x24 ] 0x0
mov [ esp + 0x1c ] 0x0
call sub_100022e0
add esp 0x10
lea ecx [ esp + 0x10 ]
push ecx
lea edx [ esp + 0x1c ]
push edx
push 0x43a
lea ecx [ esp + 0x18 ]
push ecx
call eax
test eax eax
je r-xdata
mov edx [ esp + 0xc ]
push edx
call sub_10002830
add esp 0x4
xor bl bl
cmp eax 0xffffffff
je r-xdata
xor al al
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov esi [ esp + 0xc ]
push 0x0
push 0x6e
push 0x5
push 0x1ab
call sub_100022e0
add esp 0x10
push esi
call eax
pop esi
mov al bl
pop ebx
mov esp ebp
pop ebp
retn
push eax
mov eax [ esp + 0x10 ]
push eax
call sub_100024d0
add esp 0x8
test eax eax
setne bl
sub_10002a50
push esi
push edi
mov edi ecx
mov esi eax
test edi edi
je r-xdata
pop edi
xor al al
pop esi
retn
test esi esi
je r-xdata
mov eax 0x208
mov ecx rw-data
mov [ ecx ] 0x0
inc ecx
dec eax
jne r-xdata
mov eax 0x1e
mov ecx rw-data
lea esp [ esp ]
mov [ ecx ] 0x0
inc ecx
dec eax
jne r-xdata
cmp [ edi ] 0x0
mov eax edi
je r-xdata
sub eax edi
mov ecx eax
mov eax rw-data
je r-xdata
mov edi edi
cmp [ esi ] 0x0
mov eax esi
je r-xdata
sub edi eax
inc eax
cmp [ eax ] 0x0
jne r-xdata
sub eax esi
mov ecx eax
mov eax rw-data
je r-xdata
inc eax
cmp [ eax ] 0x0
jne r-xdata
mov dl [ edi + eax ]
mov [ eax ] dl
inc eax
dec ecx
jne r-xdata
pop edi
mov al 0x1
pop esi
retn
sub esi eax
mov dl [ esi + eax ]
mov [ eax ] dl
inc eax
dec ecx
jne r-xdata
sub_10002ae0
push esi
push rw-data
call sub_10002420
mov esi eax
mov eax [ rw-data ]
test eax eax
jne r-xdata
push rw-data
push esi
call eax
call eax
xor eax eax
pop esi
retn 0x4
mov eax [ rw-data ]
test eax eax
jne r-xdata
push ebx
push 0x1fc0eaee
mov ebx eax
call sub_10002130
add esp 0x4
mov [ rw-data ] eax
pop ebx
call sub_10001fb0
mov [ rw-data ] eax
sub_10002b30
test ecx ecx
jne r-xdata
cmp [ ecx ] 0x0
mov eax ecx
je r-xdata
xor eax eax
retn
sub eax ecx
retn
mov edi edi
inc eax
cmp [ eax ] 0x0
jne r-xdata
sub_10002b50
push ebp
mov ebp esp
sub esp 0x114
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
push 0xff
lea eax [ ebp - 0x103 ]
mov edi ecx
push 0x0
push eax
mov [ ebp - 0x110 ] edi
mov [ ebp - 0x104 ] 0x0
call sub_10006560
add esp 0xc
xor bl bl
call sub_10002570
push eax
mov ecx 0x34
call sub_10002620
mov esi eax
add esp 0x4
mov [ ebp - 0x10c ] esi
mov edx 0x32
test esi esi
je r-xdata
mov eax [ ebp + 0x8 ]
mov cl [ edi + eax - 0x2 ]
mov [ esi + 0x32 ] cl
mov dl [ edi + eax - 0x1 ]
mov [ esi + 0x33 ] dl
mov edi r--data
mov ecx esi
sub edi esi
lea ebx [ ebx ]
movzx eax bl
mov [ ebp + eax - 0x104 ] bl
inc bl
jne r-xdata
mov [ ebp - 0x105 ] bl
xor ecx ecx
jmp r-xdata
mov al [ edi + ecx ]
mov [ ecx ] al
inc ecx
dec edx
jne r-xdata
mov edi [ ebp - 0x110 ]
movzx eax bl
lea esi [ ebp + eax - 0x104 ]
cdq
mov edi 0x34
idiv edi
mov edi [ ebp - 0x10c ]
mov bl [ esi ]
movzx eax bl
movzx edx [ edx + edi ]
add edx ecx
add eax edx
and eax 0x800000ff
jns r-xdata
inc [ ebp - 0x105 ]
movzx ecx al
mov dl [ ebp + ecx - 0x104 ]
mov [ esi ] dl
mov [ ebp + ecx - 0x104 ] bl
jne r-xdata
dec eax
or eax 0xffffff00
inc eax
mov bl [ ebp - 0x105 ]
call sub_10002570
push eax
mov ecx edi
call sub_100026d0
mov ebx [ ebp - 0x110 ]
call sub_10002570
push eax
lea ecx [ ebx - 0x1 ]
call sub_10002620
mov edi [ ebp + 0x8 ]
add esp 0x4
xor ecx ecx
xor edx edx
sub edi eax
add ebx 0xfffffffe
mov [ ebp - 0x114 ] eax
mov esi eax
mov [ ebp - 0x10c ] ebx
movzx ecx al
mov al [ ebp + ecx - 0x104 ]
movzx ebx al
add edx ebx
and edx 0x800000ff
jns r-xdata
dec eax
or eax 0xffffff00
inc eax
movzx edx dl
mov bl [ ebp + edx - 0x104 ]
mov [ ebp + edx - 0x104 ] al
mov [ ebp + ecx - 0x104 ] bl
movzx eax [ ebp + edx - 0x104 ]
movzx ebx bl
add eax ebx
and eax 0x800000ff
jns r-xdata
dec edx
or edx 0xffffff00
inc edx
movzx eax [ ebp + eax - 0x104 ]
xor al [ edi + esi ]
inc esi
dec [ ebp - 0x10c ]
mov [ esi - 0x1 ] al
jne r-xdata
dec eax
or eax 0xffffff00
inc eax
lea eax [ ecx + 0x1 ]
and eax 0x800000ff
jns r-xdata
mov ecx [ ebp - 0x110 ]
mov eax [ ebp - 0x114 ]
mov [ ecx + eax - 0x2 ] 0x0
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000300c
mov esp ebp
pop ebp
retn
sub_10002d30
push ebp
mov ebp esp
sub esp 0x10
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
xor eax eax
pop esi
mov esp ebp
pop ebp
retn
cmp [ esi ] 0x0
mov eax esi
je r-xdata
sub eax esi
jne r-xdata
inc eax
cmp [ eax ] 0x0
jne r-xdata
push ebx
xor ebx ebx
lea eax [ ebp + 0x8 ]
push edi
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x8 ] 0x1
mov [ ebp - 0xc ] eax
lea ebx [ ebx ]
mov eax [ ebp - 0xc ]
mov esi [ eax + 0x4 ]
add eax 0x4
mov [ ebp - 0xc ] eax
test esi esi
je r-xdata
cmp [ esi ] 0x0
mov eax esi
je r-xdata
mov cl [ esi ]
mov eax esi
test cl cl
je r-xdata
mov ecx [ ebp - 0x8 ]
sub eax esi
lea edi [ eax + ecx ]
test edi edi
jne r-xdata
nop
sub eax esi
jne r-xdata
inc eax
cmp [ eax ] 0x0
jne r-xdata
call sub_10002570
test ebx ebx
jne r-xdata
test ebx ebx
je r-xdata
inc eax
cmp [ eax ] 0x0
jne r-xdata
test esi esi
je r-xdata
test cl cl
je r-xdata
push 0x0
push 0xf
push 0x1
push 0x95
mov ebx eax
call sub_100022e0
mov edx [ ebp - 0x4 ]
add esp 0x10
push edi
push edx
push 0x8
push ebx
call eax
push eax
mov ecx edi
call sub_10002620
add esp 0x4
jmp r-xdata
mov [ ebp - 0x4 ] 0x0
jmp r-xdata
call sub_10002570
push eax
mov ecx ebx
call sub_100026d0
pop edi
mov eax ebx
pop ebx
pop esi
mov esp ebp
pop ebp
retn
mov edx r--data
mov eax esi
sub edx esi
mov ecx [ ebp - 0x4 ]
mov edx [ ebp - 0x8 ]
lea ecx [ edx + ecx - 0x1 ]
sub eax esi
test ecx ecx
je r-xdata
jmp r-xdata
mov [ ebp - 0x4 ] eax
cmp [ esi ] 0x0
mov eax esi
je r-xdata
mov cl [ eax + 0x1 ]
inc eax
test cl cl
jne r-xdata
cmp [ esi ] 0x0
mov eax esi
je r-xdata
test eax eax
je r-xdata
inc eax
cmp [ eax ] 0x0
jne r-xdata
cmp cl [ edx + eax ]
jne r-xdata
mov ebx [ ebp - 0x4 ]
sub eax esi
add [ ebp - 0x8 ] eax
inc eax
cmp [ eax ] 0x0
jne r-xdata
mov edi esi
sub edi ecx
mov edi edi
mov dl [ edi + ecx ]
mov [ ecx ] dl
inc ecx
dec eax
jne r-xdata
sub_10002e80
push ebp
mov ebp esp
push ecx
push ebx
xor ebx ebx
cmp [ ebp + 0x8 ] ebx
jbe r-xdata
mov eax ebx
pop ebx
mov esp ebp
pop ebp
retn
lea esp [ esp ]
inc ebx
cmp ebx [ ebp + 0x8 ]
jb r-xdata
mov al [ ebx + esi ]
mov [ ebp - 0x1 ] al
mov edi edi
mov cl [ edi ]
xor edx edx
test cl cl
je r-xdata
mov al bl
imul dl
add al cl
movzx ecx al
mov al [ ebp - 0x1 ]
xor al cl
inc edx
mov [ ebx + esi ] al
mov cl [ edx + edi ]
mov [ ebp - 0x1 ] al
test cl cl
jne r-xdata
sub_10002ed0
push ebp
mov ebp esp
sub esp 0x30
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
cmp [ ebp + 0xc ] 0x1
push esi
jne r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
xor eax eax
pop esi
call sub_1000300c
mov esp ebp
pop ebp
retn 0xc
push 0x208
call sub_1000309b
add esp 0x4
push 0x104
mov esi eax
push esi
push 0x0
call [ GetModuleFileNameW@IAT ]
push r--data
push esi
call sub_1000311b
add esp 0x8
test eax eax
je r-xdata
push r--data
push 0x0
push 0x0
call [ CreateMutexW@IAT ]
call [ GetLastError@IAT ]
cmp eax 0xb7
je r-xdata
call [ GetCurrentProcessId@IAT ]
mov [ ebp - 0x2c ] eax
call [ GetProcessHeap@IAT ]
push 0x200
push 0x8
push eax
mov [ ebp - 0x30 ] eax
call [ HeapAlloc@IAT ]
mov esi eax
test esi esi
je r-xdata
push edi
push 0x200
push esi
lea eax [ ebp - 0x28 ]
push eax
mov [ ebp - 0x18 ] 0x68637673
mov [ ebp - 0x14 ] 0x2e74736f
mov [ ebp - 0x10 ] 0x6c6c64
mov [ ebp - 0x28 ] 0x554c4c41
mov [ ebp - 0x24 ] 0x53524553
mov [ ebp - 0x20 ] 0x464f5250
mov [ ebp - 0x1c ] 0x454c49
mov [ ebp - 0xc ] 0x69676562
mov [ ebp - 0x8 ] 0x6e
call [ GetEnvironmentVariableA@IAT ]
mov edi [ lstrcatA@IAT ]
push r--data
push esi
call edi
lea ecx [ ebp - 0x18 ]
push ecx
push esi
call edi
lea eax [ ebp - 0xc ]
mov ecx esi
call sub_10002a50
pop edi
test al al
je r-xdata
mov edx [ ebp - 0x30 ]
push esi
push 0x8
push edx
call [ HeapFree@IAT ]
mov eax [ ebp - 0x2c ]
cmp eax 0xffffffff
je r-xdata
push eax
call sub_10002990
add esp 0x4
sub_1000302b
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000301b
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000356e
pop ecx
sub_10003057
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_100036c5
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000356e
pop ecx
sub_1000309b
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
jmp r-xdata
push [ ebp + 0x8 ]
call sub_10003856
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call sub_100038f9
pop ecx
test eax eax
je r-xdata
leave
retn
test [ rw-data ] 0x1
mov edi rw-data
mov esi r--data
jne r-xdata
push edi
lea ecx [ ebp - 0x10 ]
call sub_100036f7
push r--data
lea eax [ ebp - 0x10 ]
push eax
mov [ ebp - 0x10 ] esi
call sub_10003921
int3
or [ rw-data ] 0x1
push 0x1
lea eax [ ebp - 0x4 ]
push eax
mov ecx edi
mov [ ebp - 0x4 ] r--data
call sub_10003608
push r-xdata
mov [ rw-data ] esi
call sub_1000383f
pop ecx
sub_1000311b
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0xc ]
cmp [ ebx ] 0x0
push edi
mov edi eax
je r-xdata
pop edi
pop ebx
pop ebp
retn
movzx ecx [ eax ]
test cx cx
je r-xdata
xor eax eax
mov edx ecx
sub eax ebx
cmp [ ecx ] 0x0
je r-xdata
movzx edx [ ecx ]
test dx dx
je r-xdata
mov eax edi
jmp r-xdata
add edi 0x2
movzx edx [ edi ]
add eax 0x2
test dx dx
jne r-xdata
movzx ebx [ eax + ecx ]
sub ebx edx
jne r-xdata
mov ecx [ ebp + 0xc ]
test dx dx
je r-xdata
add ecx 0x2
cmp [ eax + ecx ] bx
jne r-xdata
sub_1000317b
push 0x8
push r--data
call sub_10004910
mov eax [ ebp + 0xc ]
cmp eax 0x1
jne r-xdata
xor edi edi
cmp eax edi
jne r-xdata
call sub_100048da
test eax eax
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rw-data ] edi
jle r-xdata
call sub_10003cd4
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp eax 0x3
jne r-xdata
call sub_1000397f
push 0x214
push 0x1
call sub_10003ece
pop ecx
pop ecx
mov esi eax
cmp esi edi
je r-xdata
dec [ rw-data ]
mov [ ebp - 0x4 ] edi
cmp [ rw-data ] edi
jne r-xdata
call sub_1000488e
call [ GetCommandLineA@IAT ]
mov [ rw-data ] eax
call sub_100047f7
mov [ rw-data ] eax
call sub_1000422e
test eax eax
jns r-xdata
call sub_100048f8
jmp r-xdata
call sub_10004955
retn 0xc
xor eax eax
inc eax
push edi
call sub_10003c66
pop ecx
push esi
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
test eax eax
je r-xdata
cmp [ ebp + 0x10 ] edi
jne r-xdata
call sub_10004201
call sub_1000473c
test eax eax
js r-xdata
call sub_100039b3
jmp r-xdata
push esi
call sub_10003e4f
pop ecx
jmp r-xdata
push edi
push esi
call sub_100039f0
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
mov [ esi ] eax
or [ esi + 0x4 ] 0xffffffff
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10003254
jmp r-xdata
call sub_10004473
call sub_100039b3
call sub_100048f8
call sub_10004473
jmp r-xdata
call sub_100044c6
test eax eax
js r-xdata
push 0x0
call sub_10004014
pop ecx
test eax eax
jne r-xdata
inc [ rw-data ]
jmp r-xdata
sub_100032df
push 0xc
push r--data
call sub_10004910
mov edi ecx
mov esi edx
mov ebx [ ebp + 0x8 ]
xor eax eax
inc eax
mov [ ebp - 0x1c ] eax
test esi esi
jne r-xdata
and [ ebp - 0x4 ] 0x0
cmp esi eax
je r-xdata
cmp [ rw-data ] edx
je r-xdata
mov eax [ r--data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
xor eax eax
cmp [ ebp - 0x1c ] 0x0
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
push edi
push esi
push ebx
call sub_10002ed0
mov [ ebp - 0x1c ] eax
cmp esi 0x1
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
push edi
push esi
push ebx
call sub_1000317b
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
push edi
push esi
push ebx
call sub_1000317b
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
push edi
push eax
push ebx
call sub_10002ed0
push edi
push 0x0
push ebx
call sub_1000317b
mov eax [ r--data ]
test eax eax
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
and [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push edi
push 0x0
push ebx
call eax
mov eax [ r--data ]
test eax eax
je r-xdata
call sub_10004955
retn
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
_start
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
jne r-xdata
push [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
call sub_100032df
pop ecx
pop ebp
retn 0xc
call sub_10004c69
sub_100033f8
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] edx
mov [ rw-data ] ebx
mov [ rw-data ] esi
mov [ rw-data ] edi
mov [ rw-data ] ss
mov [ rw-data ] cs
mov [ rw-data ] ds
mov [ rw-data ] es
mov [ rw-data ] fs
mov [ rw-data ] gs
pushfd
pop [ rw-data ]
mov eax [ ebp ]
mov [ rw-data ] eax
mov eax [ ebp + 0x4 ]
mov [ rw-data ] eax
lea eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebp - 0x320 ]
mov [ rw-data ] 0x10001
mov eax [ rw-data ]
mov [ rw-data ] eax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov eax [ rw-data ]
mov [ ebp - 0x328 ] eax
mov eax [ rw-data ]
mov [ ebp - 0x324 ] eax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
push 0x1
call sub_10004d04
pop ecx
push 0x0
call [ SetUnhandledExceptionFilter@IAT ]
push r--data
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
push 0xc0000409
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
leave
retn
push 0x1
call sub_10004d04
pop ecx
sub_100034fe
push 0xc
push r--data
call sub_10004910
push 0xe
call sub_10005020
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10003565
call sub_10004955
retn
mov eax [ rw-data ]
mov edx rw-data
push [ esi + 0x4 ]
call sub_10003e4f
pop ecx
and [ esi + 0x4 ] 0x0
cmp [ eax ] ecx
jne r-xdata
mov edx eax
jmp r-xdata
mov ecx [ eax + 0x4 ]
mov [ edx + 0x4 ] ecx
push eax
call sub_10003e4f
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
sub_10003580
mov edx [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
test edx 0x3
jne r-xdata
test edx 0x1
je r-xdata
mov eax [ edx ]
cmp al [ ecx ]
jne r-xdata
mov ax [ edx ]
add edx 0x2
cmp al [ ecx ]
jne r-xdata
mov al [ edx ]
add edx 0x1
cmp al [ ecx ]
jne r-xdata
sbb eax eax
shl eax 0x1
add eax 0x1
retn
or al al
je r-xdata
or al al
je r-xdata
add ecx 0x1
or al al
je r-xdata
xor eax eax
retn
cmp ah [ ecx + 0x1 ]
jne r-xdata
cmp ah [ ecx + 0x1 ]
jne r-xdata
test edx 0x2
je r-xdata
or ah ah
je r-xdata
or ah ah
je r-xdata
shr eax 0x10
cmp al [ ecx + 0x2 ]
jne r-xdata
add ecx 0x2
jmp r-xdata
or al al
je r-xdata
cmp ah [ ecx + 0x3 ]
jne r-xdata
add ecx 0x4
add edx 0x4
or ah ah
jne r-xdata
mov edi edi
sub_10003632
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
push edi
mov edi ecx
je r-xdata
pop edi
pop ebp
retn 0x4
push esi
push [ ebp + 0x8 ]
call sub_100050c0
lea esi [ eax + 0x1 ]
push esi
call sub_10003856
pop ecx
pop ecx
mov [ edi + 0x4 ] eax
test eax eax
je r-xdata
pop esi
push [ ebp + 0x8 ]
push esi
push eax
call sub_10005053
add esp 0xc
mov [ edi + 0x8 ] 0x1
sub_10003690
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
mov edi ecx
cmp edi esi
je r-xdata
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
call sub_10003672
cmp [ esi + 0x8 ] 0x0
je r-xdata
mov eax [ esi + 0x4 ]
mov [ edi + 0x4 ] eax
push [ esi + 0x4 ]
mov ecx edi
call sub_10003632
jmp r-xdata
sub_100036d0
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_10003672
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000356e
pop ecx
sub_100036f7
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
and [ esi + 0x4 ] 0x0
mov [ esi ] r--data
mov [ esi + 0x8 ] 0x0
call sub_10003690
mov eax esi
pop esi
pop ebp
retn 0x4
sub_1000371c
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ DecodePointer@IAT ]
push edi
push [ rw-data ]
call esi
push [ rw-data ]
mov ebx eax
mov [ ebp - 0x4 ] ebx
call esi
mov esi eax
cmp esi ebx
jb r-xdata
xor eax eax
mov edi esi
sub edi ebx
lea eax [ edi + 0x4 ]
cmp eax 0x4
jb r-xdata
push ebx
call sub_100052a2
mov ebx eax
lea eax [ edi + 0x4 ]
pop ecx
cmp ebx eax
jae r-xdata
push [ ebp + 0x8 ]
mov edi [ EncodePointer@IAT ]
call edi
mov [ esi ] eax
add esi 0x4
push esi
call edi
mov [ rw-data ] eax
mov eax [ ebp + 0x8 ]
jmp r-xdata
mov eax 0x800
cmp ebx eax
jae r-xdata
pop edi
pop esi
pop ebx
leave
retn
add eax ebx
cmp eax ebx
jb r-xdata
mov eax ebx
lea eax [ ebx + 0x10 ]
cmp eax ebx
jb r-xdata
push eax
push [ ebp - 0x4 ]
call sub_10003f1a
pop ecx
pop ecx
test eax eax
jne r-xdata
push eax
push [ ebp - 0x4 ]
call sub_10003f1a
pop ecx
pop ecx
test eax eax
je r-xdata
sar edi 0x2
push eax
lea esi [ eax + edi * 4 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
sub_100037d2
mov edi edi
push esi
push 0x4
push 0x20
call sub_10003ece
pop ecx
pop ecx
mov esi eax
push esi
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
mov [ rw-data ] eax
test esi esi
jne r-xdata
and [ esi ] 0x0
xor eax eax
pop esi
retn
push 0x18
pop eax
pop esi
retn
sub_10003803
push 0xc
push r--data
call sub_10004910
call sub_10003fab
and [ ebp - 0x4 ] 0x0
push [ ebp + 0x8 ]
call sub_1000371c
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10003839
mov eax [ ebp - 0x1c ]
call sub_10004955
retn
sub_10003856
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
cmp ebx 0xffffffe0
ja r-xdata
push ebx
call sub_100038f9
pop ecx
call sub_10005525
mov [ eax ] 0xc
xor eax eax
push esi
push edi
test ebx ebx
je r-xdata
call sub_100054aa
push 0x1e
call sub_100052fb
push 0xff
call sub_10003f93
xor eax eax
inc eax
mov eax ebx
jmp r-xdata
mov eax edi
pop edi
pop esi
jmp r-xdata
push 0xc
pop esi
cmp [ rw-data ] eax
je r-xdata
push eax
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
pop ebx
pop ebp
retn
call sub_10005525
mov [ eax ] esi
push ebx
call sub_100038f9
pop ecx
test eax eax
jne r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
jmp r-xdata
call sub_10005525
mov [ eax ] esi
sub_100038f9
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0x8 ]
call eax
pop ecx
test eax eax
je r-xdata
xor eax eax
inc eax
pop ebp
retn
sub_10003921
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
push edi
push 0x8
pop ecx
mov esi r--data
lea edi [ ebp - 0x20 ]
[ edi ] [ esi ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0xc ]
pop edi
mov [ ebp - 0x4 ] eax
pop esi
test eax eax
je r-xdata
lea eax [ ebp - 0xc ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
call [ RaiseException@IAT ]
leave
retn 0x8
test [ eax ] 0x8
je r-xdata
mov [ ebp - 0xc ] 0x1994000
sub_1000397f
mov edi edi
push esi
push [ rw-data ]
call [ TlsGetValue@IAT ]
mov esi eax
test esi esi
jne r-xdata
mov eax esi
pop esi
retn
push [ rw-data ]
call [ DecodePointer@IAT ]
mov esi eax
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
sub_100039b3
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push eax
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
or [ rw-data ] 0xffffffff
jmp sub_10004ef0
push eax
call [ TlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_100039f0
push 0x8
push r--data
call sub_10004910
push r--data
call [ GetModuleHandleW@IAT ]
mov esi [ ebp + 0x8 ]
mov [ esi + 0x5c ] r--data
and [ esi + 0x8 ] 0x0
xor edi edi
inc edi
mov [ esi + 0x14 ] edi
mov [ esi + 0x70 ] edi
mov [ esi + 0xc8 ] 0x43
mov [ esi + 0x14b ] 0x43
mov [ esi + 0x68 ] rw-data
push 0xd
call sub_10005020
pop ecx
and [ ebp - 0x4 ] 0x0
push [ esi + 0x68 ]
call [ InterlockedIncrement@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10003a92
push 0xc
call sub_10005020
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebp + 0xc ]
mov [ esi + 0x6c ] eax
test eax eax
jne r-xdata
push [ esi + 0x6c ]
call sub_10005538
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10003a9b
call sub_10004955
retn
mov eax [ rw-data ]
mov [ esi + 0x6c ] eax
sub_10003aa4
mov edi edi
push esi
push edi
call [ GetLastError@IAT ]
push [ rw-data ]
mov edi eax
call sub_1000397f
call eax
mov esi eax
test esi esi
jne r-xdata
push edi
call [ SetLastError@IAT ]
pop edi
mov eax esi
pop esi
retn
push 0x214
push 0x1
call sub_10003ece
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
test eax eax
je r-xdata
push esi
call sub_10003e4f
pop ecx
xor esi esi
push 0x0
push esi
call sub_100039f0
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
sub_10003b37
push 0x8
push r--data
call sub_10004910
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_10004955
retn 0x4
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
mov eax [ esi + 0x2c ]
test eax eax
je r-xdata
push eax
call sub_10003e4f
pop ecx
mov eax [ esi + 0x34 ]
test eax eax
je r-xdata
push eax
call sub_10003e4f
pop ecx
mov eax [ esi + 0x3c ]
test eax eax
je r-xdata
push eax
call sub_10003e4f
pop ecx
mov eax [ esi + 0x40 ]
test eax eax
je r-xdata
push eax
call sub_10003e4f
pop ecx
mov eax [ esi + 0x44 ]
test eax eax
je r-xdata
push eax
call sub_10003e4f
pop ecx
mov eax [ esi + 0x48 ]
test eax eax
je r-xdata
push eax
call sub_10003e4f
pop ecx
mov eax [ esi + 0x5c ]
cmp eax r--data
je r-xdata
push eax
call sub_10003e4f
pop ecx
push 0xd
call sub_10005020
pop ecx
and [ ebp - 0x4 ] 0x0
mov edi [ esi + 0x68 ]
test edi edi
je r-xdata
push eax
call sub_10003e4f
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10003c51
push 0xc
call sub_10005020
pop ecx
mov [ ebp - 0x4 ] 0x1
mov edi [ esi + 0x6c ]
test edi edi
je r-xdata
push edi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10003c5d
push esi
call sub_10003e4f
pop ecx
push edi
call sub_100055c7
pop ecx
cmp edi [ rw-data ]
je r-xdata
cmp edi rw-data
je r-xdata
cmp edi rw-data
je r-xdata
push edi
call sub_10003e4f
pop ecx
cmp [ edi ] 0x0
jne r-xdata
push edi
call sub_10005660
pop ecx
sub_10003c66
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
retn
push 0x0
push eax
call [ TlsSetValue@IAT ]
push 0x0
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
push [ ebp + 0x8 ]
call sub_10003b37
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
pop esi
push [ rw-data ]
push [ rw-data ]
call esi
call eax
mov [ ebp + 0x8 ] eax
sub_10003cd4
mov edi edi
push edi
push r--data
call [ GetModuleHandleW@IAT ]
mov edi eax
test edi edi
jne r-xdata
push esi
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
cmp [ rw-data ] 0x0
mov esi [ TlsSetValue@IAT ]
mov [ rw-data ] eax
je r-xdata
call sub_100039b3
xor eax eax
pop edi
retn
mov eax [ TlsGetValue@IAT ]
mov [ rw-data ] eax
mov eax [ TlsFree@IAT ]
mov [ rw-data ] sub_10003976
mov [ rw-data ] esi
mov [ rw-data ] eax
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
push [ rw-data ]
push eax
call esi
test eax eax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
call sub_10003fbd
push [ rw-data ]
mov esi [ EncodePointer@IAT ]
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
mov [ rw-data ] eax
call sub_10004ea6
test eax eax
je r-xdata
test eax eax
jne r-xdata
call sub_100039b3
mov edi [ DecodePointer@IAT ]
push sub_10003b37
push [ rw-data ]
call edi
call eax
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
call [ TlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
push 0x214
push 0x1
call sub_10003ece
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call edi
call eax
test eax eax
je r-xdata
push 0x0
push esi
call sub_100039f0
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
xor eax eax
inc eax
jmp r-xdata
pop esi
pop edi
retn
sub_10003e4f
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop ebp
retn
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
push esi
call sub_10005525
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_100054e3
pop ecx
mov [ esi ] eax
pop esi
sub_10003e89
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0x8 ]
call sub_10003856
mov edi eax
pop ecx
test edi edi
jne r-xdata
sub_10003ece
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10005fdc
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
sub_10003f1a
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ ebp + 0xc ] eax
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000605e
mov edi eax
pop ecx
pop ecx
test edi edi
jne r-xdata
sub_10003f68
mov edi edi
push ebp
mov ebp esp
push r--data
call [ GetModuleHandleW@IAT ]
test eax eax
je r-xdata
pop ebp
retn
push r--data
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call eax
sub_10003fbd
mov edi edi
push esi
call sub_1000396d
mov esi eax
push esi
call sub_100038ea
push esi
call sub_10004d0c
push esi
call sub_10006369
push esi
call sub_1000635a
push esi
call sub_10006155
push esi
call sub_10006144
add esp 0x18
pop esi
retn
sub_10003ff0
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
jmp r-xdata
cmp esi [ ebp + 0xc ]
jb r-xdata
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov ecx [ esi ]
test ecx ecx
je r-xdata
add esi 0x4
call ecx
sub_10004014
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
je r-xdata
call sub_10006378
push r--data
push r--data
call sub_10003ff0
pop ecx
pop ecx
test eax eax
jne r-xdata
push rw-data
call sub_10006430
pop ecx
test eax eax
je r-xdata
pop ebp
retn
push esi
push edi
push sub_100048b4
call sub_1000383f
mov eax r--data
mov esi r--data
pop ecx
mov edi eax
cmp eax esi
jae r-xdata
push [ ebp + 0x8 ]
call [ rw-data ]
pop ecx
cmp [ rw-data ] 0x0
pop edi
pop esi
je r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
xor eax eax
push rw-data
call sub_10006430
pop ecx
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
push 0x0
push 0x2
push 0x0
call [ rw-data ]
sub_100040ab
push 0x20
push r--data
call sub_10004910
push 0x8
call sub_10005020
pop ecx
and [ ebp - 0x4 ] 0x0
xor eax eax
inc eax
cmp [ rw-data ] eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100041d6
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov [ rw-data ] eax
mov al [ ebp + 0x10 ]
mov [ rw-data ] al
cmp [ ebp + 0xc ] 0x0
jne r-xdata
call sub_10004955
retn
mov [ rw-data ] 0x1
push 0x8
call sub_10004f47
pop ecx
push [ ebp + 0x8 ]
call sub_10003f93
mov [ ebp - 0x20 ] r--data
push [ rw-data ]
mov esi [ DecodePointer@IAT ]
call esi
mov ebx eax
mov [ ebp - 0x30 ] ebx
test ebx ebx
je r-xdata
mov eax [ ebp - 0x20 ]
mov eax [ eax ]
test eax eax
je r-xdata
mov [ ebp - 0x1c ] r--data
push [ rw-data ]
call esi
mov edi eax
mov [ ebp - 0x2c ] edi
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x28 ] edi
add [ ebp - 0x20 ] 0x4
jmp r-xdata
call eax
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
test eax eax
je r-xdata
call sub_1000396d
cmp [ edi ] eax
je r-xdata
cmp [ ebp - 0x20 ] r--data
jae r-xdata
add [ ebp - 0x1c ] 0x4
jmp r-xdata
call eax
sub edi 0x4
mov [ ebp - 0x2c ] edi
cmp edi ebx
jb r-xdata
cmp edi ebx
jb r-xdata
cmp [ ebp - 0x1c ] r--data
jae r-xdata
push [ edi ]
call esi
mov ebx eax
call sub_1000396d
mov [ edi ] eax
call ebx
push [ rw-data ]
call esi
mov ebx eax
push [ rw-data ]
call esi
cmp [ ebp - 0x24 ] ebx
jne r-xdata
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x30 ] ebx
mov [ ebp - 0x28 ] eax
mov edi eax
mov [ ebp - 0x2c ] edi
cmp [ ebp - 0x28 ] eax
je r-xdata
mov ebx [ ebp - 0x30 ]
jmp r-xdata
sub_1000422e
mov edi edi
push ebp
mov ebp esp
sub esp 0x4c
push esi
lea eax [ ebp - 0x4c ]
push eax
call [ GetStartupInfoW@IAT ]
push 0x40
push 0x20
pop esi
push esi
call sub_10003ece
pop ecx
pop ecx
xor ecx ecx
cmp eax ecx
jne r-xdata
lea edx [ eax + 0x800 ]
mov [ rw-data ] eax
mov [ rw-data ] esi
cmp eax edx
jae r-xdata
or eax 0xffffffff
jmp r-xdata
push ebx
push edi
cmp [ ebp - 0x1a ] cx
je r-xdata
add eax 0x5
pop esi
leave
retn
xor ebx ebx
mov eax [ ebp - 0x18 ]
cmp eax ecx
je r-xdata
or [ eax - 0x5 ] 0xffffffff
mov [ eax - 0x1 ] 0xa00
mov [ eax + 0x3 ] ecx
mov [ eax + 0x1f ] 0xa00
mov [ eax + 0x21 ] 0xa
mov [ eax + 0x33 ] ecx
mov [ eax + 0x2f ] cl
mov esi [ rw-data ]
add eax 0x40
lea edx [ eax - 0x5 ]
add esi 0x800
cmp edx esi
jb r-xdata
mov [ esi + 0x4 ] 0x81
test ebx ebx
jne r-xdata
cmp eax 0xfffffffe
je r-xdata
mov ebx [ eax ]
add eax 0x4
mov [ ebp - 0x4 ] eax
add eax ebx
mov esi 0x800
mov [ ebp - 0x8 ] eax
cmp ebx esi
jl r-xdata
lea eax [ ebx - 0x1 ]
neg eax
sbb eax eax
add eax 0xfffffff5
push 0xfffffff6
pop eax
jmp r-xdata
or [ esi + 0x4 ] 0x80
jmp r-xdata
cmp [ rw-data ] ebx
jge r-xdata
mov ebx esi
or [ esi + 0x4 ] 0x40
mov [ esi ] 0xfffffffe
test edi edi
je r-xdata
push eax
call [ GetStdHandle@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
inc ebx
cmp ebx 0x3
jl r-xdata
xor edi edi
test ebx ebx
jle r-xdata
mov edi rw-data
mov esi ebx
shl esi 0x6
add esi [ rw-data ]
mov eax [ esi ]
cmp eax 0xffffffff
je r-xdata
push [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
push edi
call [ GetFileType@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x8 ]
mov eax [ eax ]
cmp eax 0xffffffff
je r-xdata
mov ebx [ rw-data ]
add [ rw-data ] 0x20
lea ecx [ eax + 0x800 ]
mov [ edi ] eax
cmp eax ecx
jae r-xdata
and eax 0xff
mov [ esi ] edi
cmp eax 0x2
jne r-xdata
add [ ebp - 0x8 ] 0x4
inc edi
inc [ ebp - 0x4 ]
cmp edi ebx
jl r-xdata
cmp eax 0xfffffffe
je r-xdata
add edi 0x4
cmp [ rw-data ] ebx
jl r-xdata
add eax 0x5
cmp eax 0x3
jne r-xdata
or [ esi + 0x4 ] 0x40
jmp r-xdata
mov ecx [ ebp - 0x4 ]
mov cl [ ecx ]
test cl 0x1
je r-xdata
push 0x40
push 0x20
call sub_10003ece
pop ecx
pop ecx
test eax eax
je r-xdata
jmp r-xdata
or [ eax - 0x5 ] 0xffffffff
and [ eax + 0x3 ] 0x0
and [ eax + 0x1f ] 0x80
and [ eax + 0x33 ] 0x0
mov [ eax - 0x1 ] 0xa00
mov [ eax + 0x20 ] 0xa0a
mov [ eax + 0x2f ] 0x0
mov ecx [ edi ]
add eax 0x40
add ecx esi
lea edx [ eax - 0x5 ]
cmp edx ecx
jb r-xdata
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
or [ esi + 0x4 ] 0x8
test cl 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
inc [ esi + 0x8 ]
jmp r-xdata
mov esi edi
and esi 0x1f
mov eax edi
sar eax 0x5
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov eax [ ebp - 0x8 ]
mov eax [ eax ]
mov [ esi ] eax
mov eax [ ebp - 0x4 ]
mov al [ eax ]
mov [ esi + 0x4 ] al
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
push eax
call [ GetFileType@IAT ]
test eax eax
je r-xdata
pop edi
pop ebx
inc [ esi + 0x8 ]
sub_10004473
mov edi edi
push esi
push edi
mov edi rw-data
add edi 0x4
cmp edi rw-data
jl r-xdata
lea ecx [ eax + 0x800 ]
cmp eax ecx
jae r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
pop edi
pop esi
retn
push [ edi ]
call sub_10003e4f
and [ edi ] 0x0
pop ecx
lea esi [ eax + 0xc ]
mov eax [ edi ]
add esi 0x40
add eax 0x800
lea ecx [ esi - 0xc ]
cmp ecx eax
jb r-xdata
push esi
call [ DeleteCriticalSection@IAT ]
cmp [ esi - 0x4 ] 0x0
je r-xdata
sub_100044c6
cmp [ rw-data ] 0x0
jne r-xdata
push esi
mov esi [ rw-data ]
push edi
xor edi edi
test esi esi
jne r-xdata
call sub_10005fbe
mov al [ esi ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
push 0x4
inc edi
push edi
call sub_10003ece
mov edi eax
pop ecx
pop ecx
mov [ rw-data ] edi
test edi edi
je r-xdata
pop edi
pop esi
retn
push esi
call sub_100050c0
pop ecx
lea esi [ esi + eax + 0x1 ]
inc edi
mov esi [ rw-data ]
push ebx
jmp r-xdata
cmp [ esi ] 0x0
jne r-xdata
push esi
call sub_100050c0
cmp [ esi ] 0x3d
pop ecx
lea ebx [ eax + 0x1 ]
je r-xdata
push [ rw-data ]
call sub_10003e4f
and [ rw-data ] 0x0
and [ edi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
add esi ebx
push 0x1
push ebx
call sub_10003ece
pop ecx
pop ecx
mov [ edi ] eax
test eax eax
je r-xdata
push [ rw-data ]
call sub_10003e4f
and [ rw-data ] 0x0
or eax 0xffffffff
jmp r-xdata
push esi
push ebx
push eax
call sub_10005053
add esp 0xc
test eax eax
jne r-xdata
pop ecx
pop ebx
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_10004e44
int3
add edi 0x4
sub_100045a2
mov edi edi
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x10 ]
push ebx
xor eax eax
push esi
mov [ edi ] eax
mov esi edx
mov edx [ ebp + 0xc ]
mov [ ecx ] 0x1
cmp [ ebp + 0x8 ] eax
je r-xdata
mov [ ebp - 0x4 ] eax
mov ebx [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ ebx ] edx
inc [ edi ]
test edx edx
je r-xdata
xor eax eax
cmp [ ebp - 0x4 ] eax
mov bl 0x22
sete al
inc esi
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov bl [ esi ]
movzx eax bl
push eax
inc esi
call sub_1000653f
pop ecx
test eax eax
je r-xdata
mov al [ esi ]
mov [ edx ] al
inc edx
mov [ ebp + 0xc ] edx
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
test bl bl
je r-xdata
inc [ edi ]
cmp [ ebp + 0xc ] 0x0
je r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp bl 0x20
je r-xdata
dec esi
jmp r-xdata
inc esi
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
test edx edx
je r-xdata
cmp bl 0x9
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov [ edx - 0x1 ] 0x0
mov eax [ ebp + 0x8 ]
pop esi
pop ebx
test eax eax
je r-xdata
mov al [ esi ]
cmp al 0x20
je r-xdata
inc [ ecx ]
leave
retn
and [ eax ] 0x0
inc esi
jmp r-xdata
cmp al 0x9
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
inc [ ecx ]
mov eax [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ eax ] edx
cmp [ esi ] 0x5c
je r-xdata
inc esi
inc ecx
cmp [ esi ] 0x22
jne r-xdata
test ecx ecx
je r-xdata
test cl 0x1
jne r-xdata
mov al [ esi ]
test al al
je r-xdata
dec ecx
test edx edx
je r-xdata
shr ecx 0x1
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test edx edx
je r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
inc [ edi ]
test ecx ecx
jne r-xdata
mov [ edx ] 0x5c
inc edx
xor eax eax
xor ebx ebx
cmp [ ebp - 0x4 ] eax
sete al
mov [ ebp - 0x4 ] eax
lea eax [ esi + 0x1 ]
cmp [ eax ] 0x22
jne r-xdata
inc [ edi ]
mov ecx [ ebp + 0x10 ]
jmp r-xdata
mov [ edx ] 0x0
inc edx
mov [ ebp + 0xc ] edx
test ebx ebx
je r-xdata
cmp al 0x20
je r-xdata
mov [ ebp + 0xc ] edx
mov esi eax
jmp r-xdata
cmp [ esi ] 0x0
je r-xdata
inc esi
jmp r-xdata
movsx eax al
push eax
test edx edx
je r-xdata
cmp al 0x9
je r-xdata
xor ebx ebx
inc ebx
xor ecx ecx
jmp r-xdata
call sub_1000653f
pop ecx
test eax eax
je r-xdata
call sub_1000653f
pop ecx
test eax eax
je r-xdata
inc [ edi ]
mov edx [ ebp + 0xc ]
inc esi
inc [ edi ]
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
jmp r-xdata
mov al [ esi ]
mov ecx [ ebp + 0xc ]
inc [ ebp + 0xc ]
mov [ ecx ] al
inc esi
inc [ edi ]
sub_1000473c
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
xor ebx ebx
push esi
push edi
cmp [ rw-data ] ebx
jne r-xdata
push 0x104
mov esi rw-data
push esi
push ebx
mov [ rw-data ] bl
call [ GetModuleFileNameA@IAT ]
mov eax [ rw-data ]
mov [ rw-data ] esi
cmp eax ebx
je r-xdata
call sub_10005fbe
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x4 ] eax
cmp [ eax ] bl
jne r-xdata
or eax 0xffffffff
mov ecx [ ebp - 0xc ]
cmp ecx 0xffffffff
jae r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
push ebx
push ebx
lea edi [ ebp - 0xc ]
call sub_100045a2
mov eax [ ebp - 0x8 ]
add esp 0xc
cmp eax 0x3fffffff
jae r-xdata
mov edi eax
shl edi 0x2
lea eax [ edi + ecx ]
cmp eax ecx
jb r-xdata
push eax
call sub_10003e89
mov esi eax
pop ecx
cmp esi ebx
je r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
add edi esi
push edi
push esi
lea edi [ ebp - 0xc ]
call sub_100045a2
mov eax [ ebp - 0x8 ]
add esp 0xc
dec eax
mov [ rw-data ] eax
mov [ rw-data ] esi
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_100047f7
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
call [ GetEnvironmentStringsW@IAT ]
mov ebx eax
xor esi esi
cmp ebx esi
jne r-xdata
cmp [ ebx ] si
je r-xdata
xor eax eax
jmp r-xdata
push edi
mov edi [ WideCharToMultiByte@IAT ]
push esi
push esi
push esi
sub eax ebx
push esi
sar eax 0x1
inc eax
push eax
push ebx
push esi
push esi
mov [ ebp - 0xc ] eax
call edi
mov [ ebp - 0x8 ] eax
cmp eax esi
je r-xdata
add eax 0x2
cmp [ eax ] si
jne r-xdata
pop esi
pop ebx
leave
retn
push ebx
call [ FreeEnvironmentStringsW@IAT ]
xor eax eax
push eax
call sub_10003e89
pop ecx
mov [ ebp - 0x4 ] eax
cmp eax esi
je r-xdata
add eax 0x2
cmp [ eax ] si
jne r-xdata
push esi
push esi
push [ ebp - 0x8 ]
push eax
push [ ebp - 0xc ]
push ebx
push esi
push esi
call edi
test eax eax
jne r-xdata
push ebx
call [ FreeEnvironmentStringsW@IAT ]
mov eax [ ebp - 0x4 ]
jmp r-xdata
push [ ebp - 0x4 ]
call sub_10003e4f
pop ecx
mov [ ebp - 0x4 ] esi
pop edi
sub_1000488e
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_100048b4
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_10004910
push sub_10004970
push [ fs : 0x0 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x4 ] eax
xor eax ebp
push eax
mov [ ebp - 0x18 ] esp
push [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_10004970
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebx + 0x8 ]
xor esi [ rw-data ]
push edi
mov eax [ esi ]
mov [ ebp - 0x1 ] 0x0
mov [ ebp - 0xc ] 0x1
lea edi [ ebx + 0x10 ]
cmp eax 0xfffffffe
je r-xdata
mov ecx [ esi + 0xc ]
mov eax [ esi + 0x8 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000300c
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x66
jne r-xdata
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000300c
mov edx 0xfffffffe
cmp [ ebx + 0xc ] edx
je r-xdata
mov ecx [ ebp + 0x10 ]
lea edx [ ebp - 0x18 ]
mov [ ebx - 0x4 ] edx
mov ebx [ ebx + 0xc ]
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x14 ] ecx
cmp ebx 0xfffffffe
je r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push rw-data
push edi
mov ecx ebx
call sub_1000528b
jmp r-xdata
lea ecx [ ecx ]
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
mov ebx eax
cmp eax 0xfffffffe
jne r-xdata
mov edx edi
call sub_10005242
mov [ ebp - 0x1 ] 0x1
test eax eax
js r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_1000300c
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000300c
lea eax [ ebx + ebx * 2 ]
mov ecx [ esi + eax * 4 + 0x14 ]
lea eax [ esi + eax * 4 + 0x10 ]
mov [ ebp - 0x10 ] eax
mov eax [ eax ]
mov [ ebp - 0x8 ] eax
test ecx ecx
je r-xdata
cmp [ ebp - 0x1 ] 0x0
je r-xdata
mov [ ebp - 0xc ] 0x0
jmp r-xdata
jg r-xdata
mov ecx [ ebp + 0x8 ]
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ ebp + 0xc ]
mov edx [ ebp + 0x8 ]
call sub_10005272
mov eax [ ebp + 0xc ]
cmp [ eax + 0xc ] ebx
je r-xdata
cmp [ r--data ] 0x0
je r-xdata
mov ecx [ ebp - 0x8 ]
mov [ eax + 0xc ] ecx
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
push rw-data
push edi
mov edx ebx
mov ecx eax
call sub_1000528b
mov eax [ ebp + 0xc ]
push r--data
call sub_10006430
add esp 0x4
test eax eax
je r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_1000300c
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0x8 ]
mov edx edi
call sub_10005259
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000300c
mov edx [ ebp + 0x8 ]
push 0x1
push edx
call [ r--data ]
add esp 0x8
sub_10004aff
mov edi edi
push ebp
mov ebp esp
push esi
call sub_10003aa4
mov esi eax
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov ecx [ esi + 0x5c ]
mov edx [ ebp + 0x8 ]
mov eax ecx
push edi
add ecx 0x90
cmp eax ecx
jae r-xdata
add eax 0xc
lea edi [ ecx + 0x90 ]
cmp eax edi
jb r-xdata
xor eax eax
cmp [ eax ] edx
je r-xdata
cmp [ eax ] edx
je r-xdata
xor eax eax
jmp r-xdata
mov edx [ eax + 0x8 ]
test edx edx
jne r-xdata
test eax eax
je r-xdata
pop edi
cmp edx 0x5
jne r-xdata
cmp edx 0x1
je r-xdata
and [ eax + 0x8 ] 0x0
xor eax eax
inc eax
jmp r-xdata
or eax 0xffffffff
mov ecx [ ebp + 0xc ]
push ebx
mov ebx [ esi + 0x60 ]
mov [ esi + 0x60 ] ecx
mov ecx [ eax + 0x4 ]
cmp ecx 0x8
jne r-xdata
and [ eax + 0x8 ] 0x0
push ecx
call edx
push 0x24
pop ecx
mov edi [ esi + 0x5c ]
and [ ecx + edi + 0x8 ] 0x0
add ecx 0xc
cmp ecx 0x90
jl r-xdata
mov eax [ eax ]
mov edi [ esi + 0x64 ]
cmp eax 0xc000008e
jne r-xdata
cmp eax 0xc0000090
jne r-xdata
mov [ esi + 0x64 ] 0x83
jmp r-xdata
cmp eax 0xc0000091
jne r-xdata
mov [ esi + 0x64 ] 0x81
jmp r-xdata
push [ esi + 0x64 ]
push 0x8
call edx
pop ecx
mov [ esi + 0x64 ] edi
jmp r-xdata
cmp eax 0xc0000093
jne r-xdata
mov [ esi + 0x64 ] 0x84
jmp r-xdata
pop ecx
mov [ esi + 0x60 ] ebx
pop ebx
cmp eax 0xc000008d
jne r-xdata
mov [ esi + 0x64 ] 0x85
jmp r-xdata
cmp eax 0xc000008f
jne r-xdata
mov [ esi + 0x64 ] 0x82
jmp r-xdata
cmp eax 0xc0000092
jne r-xdata
mov [ esi + 0x64 ] 0x86
jmp r-xdata
cmp eax 0xc00002b5
jne r-xdata
mov [ esi + 0x64 ] 0x8a
jmp r-xdata
cmp eax 0xc00002b4
jne r-xdata
mov [ esi + 0x64 ] 0x8d
jmp r-xdata
mov [ esi + 0x64 ] 0x8e
sub_10004c49
mov edi edi
push ebp
mov ebp esp
mov eax 0xe06d7363
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0xc ]
push eax
call sub_10004aff
pop ecx
pop ecx
pop ebp
retn
sub_10004c69
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
push ebx
push edi
mov edi 0xbb40e64e
mov ebx 0xffff0000
cmp eax edi
je r-xdata
push esi
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov esi [ ebp - 0x4 ]
xor esi [ ebp - 0x8 ]
call [ GetCurrentProcessId@IAT ]
xor esi eax
call [ GetCurrentThreadId@IAT ]
xor esi eax
call [ GetTickCount@IAT ]
xor esi eax
lea eax [ ebp - 0x10 ]
push eax
call [ QueryPerformanceCounter@IAT ]
mov eax [ ebp - 0xc ]
xor eax [ ebp - 0x10 ]
xor esi eax
cmp esi edi
jne r-xdata
test ebx eax
je r-xdata
test ebx esi
jne r-xdata
mov esi 0xbb40e64f
jmp r-xdata
not eax
mov [ rw-data ] eax
jmp r-xdata
mov [ rw-data ] esi
not esi
mov [ rw-data ] esi
pop esi
mov eax esi
or eax 0x4711
shl eax 0x10
or esi eax
pop edi
pop ebx
leave
retn
sub_10004d1b
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x8 ]
push edi
cmp ebx 0xffffffff
je r-xdata
and [ ebp - 0x320 ] 0x0
push 0x4c
lea eax [ ebp - 0x31c ]
push 0x0
push eax
call sub_10006560
lea eax [ ebp - 0x320 ]
mov [ ebp - 0x328 ] eax
lea eax [ ebp - 0x2d0 ]
add esp 0xc
mov [ ebp - 0x324 ] eax
mov [ ebp - 0x220 ] eax
mov [ ebp - 0x224 ] ecx
mov [ ebp - 0x228 ] edx
mov [ ebp - 0x22c ] ebx
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x234 ] edi
mov [ ebp - 0x208 ] ss
mov [ ebp - 0x214 ] cs
mov [ ebp - 0x238 ] ds
mov [ ebp - 0x23c ] es
mov [ ebp - 0x240 ] fs
mov [ ebp - 0x244 ] gs
pushfd
pop [ ebp - 0x210 ]
mov eax [ ebp + 0x4 ]
lea ecx [ ebp + 0x4 ]
mov [ ebp - 0x20c ] ecx
mov [ ebp - 0x2d0 ] 0x10001
mov [ ebp - 0x218 ] eax
mov ecx [ ecx - 0x4 ]
mov [ ebp - 0x21c ] ecx
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x320 ] ecx
mov ecx [ ebp + 0x10 ]
mov [ ebp - 0x31c ] ecx
mov [ ebp - 0x314 ] eax
call [ IsDebuggerPresent@IAT ]
push 0x0
mov edi eax
call [ SetUnhandledExceptionFilter@IAT ]
lea eax [ ebp - 0x328 ]
push eax
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
push ebx
call sub_10004d04
pop ecx
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_1000300c
leave
retn
test edi edi
jne r-xdata
cmp ebx 0xffffffff
je r-xdata
push ebx
call sub_10004d04
pop ecx
sub_10004e44
mov edi edi
push esi
push 0x1
mov esi 0xc0000417
push esi
push 0x2
call sub_10004d1b
add esp 0xc
push esi
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
pop esi
retn
sub_10004e69
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10004e44
int3
pop ebp
jmp eax
sub_10004ea6
mov edi edi
push esi
push edi
xor esi esi
mov edi rw-data
inc esi
cmp esi 0x24
jl r-xdata
lea eax [ esi * 8 + rw-data ]
mov [ eax ] edi
push 0xfa0
push [ eax ]
add edi 0x18
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
cmp [ esi * 8 + rw-data ] 0x1
jne r-xdata
xor eax eax
inc eax
and [ esi * 8 + rw-data ] 0x0
xor eax eax
jmp r-xdata
pop edi
pop esi
retn
sub_10004ef0
mov edi edi
push ebx
mov ebx [ DeleteCriticalSection@IAT ]
push esi
mov esi rw-data
push edi
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
je r-xdata
mov edi [ esi ]
test edi edi
je r-xdata
mov esi rw-data
pop edi
push edi
call ebx
push edi
call sub_10003e4f
and [ esi ] 0x0
pop ecx
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
pop ebx
retn
push eax
call ebx
sub_10004f5e
push 0xc
push r--data
call sub_10004910
xor edi edi
inc edi
mov [ ebp - 0x1c ] edi
xor ebx ebx
cmp [ rw-data ] ebx
jne r-xdata
mov esi [ ebp + 0x8 ]
lea esi [ esi * 8 + rw-data ]
cmp [ esi ] ebx
je r-xdata
call sub_100054aa
push 0x1e
call sub_100052fb
push 0xff
call sub_10003f93
push 0x18
call sub_10003e89
pop ecx
mov edi eax
cmp edi ebx
jne r-xdata
mov eax edi
jmp r-xdata
push 0xa
call sub_10005020
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi ] ebx
jne r-xdata
call sub_10005525
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
call sub_10004955
retn
push edi
call sub_10003e4f
pop ecx
push 0xfa0
push edi
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
mov [ esi ] edi
jmp r-xdata
push edi
call sub_10003e4f
pop ecx
call sub_10005525
mov [ eax ] 0xc
mov [ ebp - 0x1c ] ebx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10005017
mov eax [ ebp - 0x1c ]
sub_10005020
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
lea esi [ eax * 8 + rw-data ]
cmp [ esi ] 0x0
jne r-xdata
push [ esi ]
call [ EnterCriticalSection@IAT ]
pop esi
pop ebp
retn
push eax
call sub_10004f5e
pop ecx
test eax eax
jne r-xdata
push 0x11
call sub_10004210
sub_10005053
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0x8 ]
push esi
push edi
test edx edx
je r-xdata
call sub_10005525
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov eax [ ebp + 0x10 ]
test eax eax
jne r-xdata
mov esi edx
sub esi eax
mov [ edx ] al
jmp r-xdata
test edi edi
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ edx ] 0x0
call sub_10005525
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov cl [ eax ]
mov [ esi + eax ] cl
inc eax
test cl cl
je r-xdata
call sub_10004e96
mov eax esi
jmp r-xdata
sub_100050c0
mov ecx [ esp + 0x4 ]
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
add ecx 0x1
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea eax [ ecx - 0x1 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ecx 0x3
jne r-xdata
lea eax [ ecx - 0x4 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ah ah
je r-xdata
add eax 0x0
lea esp [ esp ]
lea esp [ esp ]
lea eax [ ecx - 0x3 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff0000
je r-xdata
lea eax [ ecx - 0x2 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff000000
je r-xdata
jmp r-xdata
sub_10005150
push ebx
push esi
push edi
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x18 ]
push ebp
push edx
push eax
push ecx
push ecx
push sub_100051e0
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x8 ] eax
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0x18
pop edi
pop esi
pop ebx
retn
mov edx [ esp + 0x34 ]
cmp edx 0xfffffffe
je r-xdata
lea esi [ esi + esi * 2 ]
lea ebx [ ebx + esi * 4 + 0x10 ]
mov ecx [ ebx ]
mov [ eax + 0xc ] ecx
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
cmp esi edx
jbe r-xdata
mov eax [ esp + 0x30 ]
mov ebx [ eax + 0x8 ]
mov ecx [ esp + 0x2c ]
xor ebx [ ecx ]
mov esi [ eax + 0xc ]
cmp esi 0xfffffffe
je r-xdata
push 0x101
mov eax [ ebx + 0x8 ]
call sub_10006795
mov ecx 0x1
mov eax [ ebx + 0x8 ]
call sub_100067b4
jmp r-xdata
sub_100051e0
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov ecx [ eax + 0x8 ]
xor ecx eax
call sub_1000300c
push ebp
mov ebp [ eax + 0x18 ]
push [ eax + 0xc ]
push [ eax + 0x10 ]
push [ eax + 0x14 ]
call sub_10005150
add esp 0xc
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10005242
push ebp
push esi
push edi
push ebx
mov ebp edx
xor eax eax
xor ebx ebx
xor edx edx
xor esi esi
xor edi edi
call ecx
pop ebx
pop edi
pop esi
pop ebp
retn
sub_10005272
push ebp
mov ebp esp
push ebx
push esi
push edi
push 0x0
push edx
push r-xdata
push ecx
call RtlUnwind
pop edi
pop esi
pop ebx
pop ebp
retn
sub_100052a2
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapSize@IAT ]
pop ebp
retn
call sub_10005525
mov [ eax ] 0x16
call sub_10004e96
or eax 0xffffffff
pop ebp
retn
sub_100052d5
mov edi edi
push ebp
mov ebp esp
xor eax eax
mov eax [ eax * 8 + r--data ]
pop ebp
retn
inc eax
cmp eax 0x16
jb r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx [ eax * 8 + r--data ]
je r-xdata
xor eax eax
pop ebp
retn
sub_100052fb
mov edi edi
push ebp
mov ebp esp
sub esp 0x1fc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_100052d5
mov edi eax
xor ebx ebx
pop ecx
mov [ ebp - 0x1fc ] edi
cmp edi ebx
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000300c
leave
retn
push 0x3
call sub_10006ae3
pop ecx
cmp eax 0x1
je r-xdata
push 0xfffffff4
call [ GetStdHandle@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
push 0x3
call sub_10006ae3
pop ecx
test eax eax
jne r-xdata
cmp esi 0xffffffff
je r-xdata
cmp esi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
xor eax eax
push r--data
push 0x314
mov edi rw-data
push edi
call sub_10006a80
add esp 0xc
test eax eax
jne r-xdata
push ebx
lea eax [ ebp - 0x1fc ]
push eax
lea eax [ ebp - 0x1f8 ]
push eax
mov [ ebp - 0x5 ] bl
call sub_100050c0
pop ecx
push eax
lea eax [ ebp - 0x1f8 ]
push eax
push esi
call [ WriteFile@IAT ]
inc eax
cmp eax 0x1f4
jb r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
jmp r-xdata
push 0x104
mov esi rw-data
push esi
push ebx
mov [ rw-data ] ax
call [ GetModuleFileNameW@IAT ]
mov ebx 0x2fb
test eax eax
jne r-xdata
mov cl [ edi + eax * 2 ]
mov [ ebp + eax - 0x1f8 ] cl
cmp [ edi + eax * 2 ] bx
je r-xdata
call sub_10004e44
push esi
call sub_10006a65
inc eax
pop ecx
cmp eax 0x3c
jbe r-xdata
push r--data
push ebx
push esi
call sub_10006a80
add esp 0xc
test eax eax
je r-xdata
push r--data
mov esi 0x314
push esi
push edi
call sub_10006923
add esp 0xc
test eax eax
jne r-xdata
push esi
call sub_10006a65
lea eax [ eax * 2 + rw-data ]
mov ecx eax
sub ecx esi
push 0x3
sar ecx 0x1
push r--data
sub ebx ecx
push ebx
push eax
call sub_10006998
add esp 0x14
test eax eax
jne r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
push [ ebp - 0x1fc ]
push esi
push edi
call sub_10006923
add esp 0xc
test eax eax
jne r-xdata
push 0x12010
push r--data
push edi
call sub_100067b7
add esp 0xc
jmp r-xdata
sub_100054aa
push 0x3
call sub_10006ae3
pop ecx
cmp eax 0x1
je r-xdata
push 0xfc
call sub_100052fb
push 0xff
call sub_100052fb
pop ecx
pop ecx
push 0x3
call sub_10006ae3
pop ecx
test eax eax
jne r-xdata
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_100054e3
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
xor ecx ecx
mov eax [ ecx * 8 + rw-data ]
pop ebp
retn
inc ecx
cmp ecx 0x2d
jb r-xdata
cmp eax [ ecx * 8 + rw-data ]
je r-xdata
lea ecx [ eax - 0x13 ]
cmp ecx 0x11
ja r-xdata
add eax 0xffffff44
push 0xe
pop ecx
cmp ecx eax
sbb eax eax
and eax ecx
add eax 0x8
pop ebp
retn
push 0xd
pop eax
pop ebp
retn
sub_10005538
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ InterlockedIncrement@IAT ]
push edi
mov edi [ ebp + 0x8 ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop edi
pop esi
pop ebx
pop ebp
retn
push eax
call esi
sub_100055c7
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
test edi edi
je r-xdata
mov eax edi
pop edi
pop ebp
retn
push ebx
push esi
mov esi [ InterlockedDecrement@IAT ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop esi
pop ebx
push eax
call esi
sub_10005660
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xbc ]
xor ebx ebx
push edi
cmp eax ebx
je r-xdata
mov eax [ esi + 0xc0 ]
cmp eax ebx
je r-xdata
cmp eax rw-data
je r-xdata
mov eax [ esi + 0xd4 ]
cmp eax rw-data
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb0 ]
cmp eax ebx
je r-xdata
lea edi [ esi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
cmp [ eax + 0xb4 ] ebx
jne r-xdata
mov eax [ esi + 0xc4 ]
sub eax 0xfe
push eax
call sub_10003e4f
mov eax [ esi + 0xcc ]
mov edi 0x80
sub eax edi
push eax
call sub_10003e4f
mov eax [ esi + 0xd0 ]
sub eax edi
push eax
call sub_10003e4f
push [ esi + 0xc0 ]
call sub_10003e4f
add esp 0x10
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x4 ] ebx
je r-xdata
mov eax [ edi ]
cmp eax ebx
je r-xdata
push eax
call sub_10006b22
push [ esi + 0xd4 ]
call sub_10003e4f
pop ecx
pop ecx
mov eax [ esi + 0xb8 ]
cmp eax ebx
je r-xdata
add edi 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ edi + 0x4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x8 ] rw-data
je r-xdata
push esi
call sub_10003e4f
pop ecx
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_10003e4f
pop ecx
push [ esi + 0xb0 ]
call sub_10003e4f
push [ esi + 0xbc ]
call sub_10003e4f
pop ecx
pop ecx
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_10003e4f
push [ esi + 0xbc ]
call sub_10006f02
pop ecx
pop ecx
push eax
call sub_10003e4f
pop ecx
push eax
call sub_10003e4f
push [ esi + 0xbc ]
call sub_10006e99
pop ecx
pop ecx
sub_100057ab
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0xc ]
test edi edi
je r-xdata
xor eax eax
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
push esi
mov esi [ eax ]
cmp esi edi
je r-xdata
mov eax edi
pop esi
jmp r-xdata
push edi
mov [ eax ] edi
call sub_10005538
pop ecx
test esi esi
je r-xdata
pop edi
pop ebp
retn
push esi
call sub_100055c7
cmp [ esi ] 0x0
pop ecx
jne r-xdata
cmp esi rw-data
je r-xdata
push esi
call sub_10005660
pop ecx
sub_100057f8
push 0xc
push r--data
call sub_10004910
call sub_10003b1d
mov esi eax
mov eax [ rw-data ]
test [ esi + 0x70 ] eax
je r-xdata
push 0xc
call sub_10005020
pop ecx
and [ ebp - 0x4 ] 0x0
push [ rw-data ]
add esi 0x6c
push esi
call sub_100057ab
pop ecx
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10005865
jmp r-xdata
cmp [ esi + 0x6c ] 0x0
je r-xdata
test esi esi
jne r-xdata
call sub_10003b1d
mov esi [ eax + 0x6c ]
mov eax esi
call sub_10004955
retn
push 0x20
call sub_10004210
sub_10005871
sub eax 0x3a4
je r-xdata
mov eax 0x411
retn
sub eax 0x4
je r-xdata
mov eax 0x804
retn
sub eax 0xd
je r-xdata
mov eax 0x412
retn
dec eax
je r-xdata
mov eax 0x404
retn
xor eax eax
retn
sub_100058a0
mov edi edi
push esi
push edi
mov esi eax
push 0x101
xor edi edi
lea eax [ esi + 0x1c ]
push edi
push eax
call sub_10006560
xor eax eax
movzx ecx ax
mov eax ecx
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] edi
shl ecx 0x10
or eax ecx
lea edi [ esi + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
mov ecx rw-data
add esp 0xc
lea eax [ esi + 0x1c ]
sub ecx esi
mov edi 0x101
mov dl [ ecx + eax ]
mov [ eax ] dl
inc eax
dec edi
jne r-xdata
lea eax [ esi + 0x11d ]
mov esi 0x100
mov dl [ eax + ecx ]
mov [ eax ] dl
inc eax
dec esi
jne r-xdata
pop edi
pop esi
retn
sub_10005904
mov edi edi
push ebp
mov ebp esp
sub esp 0x51c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push edi
lea eax [ ebp - 0x518 ]
push eax
push [ esi + 0x4 ]
call [ GetCPInfo@IAT ]
mov edi 0x100
test eax eax
je r-xdata
lea eax [ esi + 0x11d ]
mov [ ebp - 0x51c ] 0xffffff9f
xor ecx ecx
sub [ ebp - 0x51c ] eax
xor eax eax
cmp edx 0x19
ja r-xdata
or [ esi + ecx + 0x1d ] 0x10
lea edx [ ecx + 0x20 ]
jmp r-xdata
mov [ ebp + eax - 0x104 ] al
inc eax
cmp eax edi
jb r-xdata
mov al [ ebp - 0x512 ]
mov [ ebp - 0x104 ] 0x20
test al al
je r-xdata
mov [ eax ] 0x0
or [ esi + ecx + 0x1d ] 0x20
lea edx [ ecx - 0x20 ]
mov [ eax ] dl
jmp r-xdata
push 0x0
push [ esi + 0xc ]
lea eax [ ebp - 0x504 ]
push [ esi + 0x4 ]
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x1
push 0x0
call sub_10007334
xor ebx ebx
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x204 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push edi
push [ esi + 0xc ]
push ebx
call sub_10007207
add esp 0x44
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x304 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x200
push [ esi + 0xc ]
push ebx
call sub_10007207
add esp 0x24
xor eax eax
lea ebx [ ebp - 0x511 ]
mov edx [ ebp - 0x51c ]
lea eax [ esi + ecx + 0x11d ]
add edx eax
lea ebx [ edx + 0x20 ]
cmp ebx 0x19
ja r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_1000300c
leave
retn
inc ecx
cmp ecx edi
jb r-xdata
test cl 0x2
je r-xdata
or [ esi + eax + 0x1d ] 0x10
mov cl [ ebp + eax - 0x204 ]
jmp r-xdata
mov al [ ebx + 0x1 ]
add ebx 0x2
test al al
jne r-xdata
sub eax ecx
inc eax
push eax
lea edx [ ebp + ecx - 0x104 ]
push 0x20
push edx
call sub_10006560
add esp 0xc
mov [ esi + eax + 0x11d ] bl
or [ esi + eax + 0x1d ] 0x20
mov cl [ ebp + eax - 0x304 ]
mov [ esi + eax + 0x11d ] cl
jmp r-xdata
movzx ecx al
movzx eax [ ebx ]
cmp ecx eax
ja r-xdata
movzx ecx [ ebp + eax * 2 - 0x504 ]
test cl 0x1
je r-xdata
jmp r-xdata
inc eax
cmp eax edi
jb r-xdata
sub_10005a94
push 0xc
push r--data
call sub_10004910
call sub_10003b1d
mov edi eax
mov eax [ rw-data ]
test [ edi + 0x70 ] eax
je r-xdata
push 0xd
call sub_10005020
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ edi + 0x68 ]
mov [ ebp - 0x1c ] esi
cmp esi [ rw-data ]
je r-xdata
cmp [ edi + 0x6c ] 0x0
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10005b2f
jmp r-xdata
test esi esi
je r-xdata
mov esi [ edi + 0x68 ]
test esi esi
jne r-xdata
mov eax [ rw-data ]
mov [ edi + 0x68 ] eax
mov esi [ rw-data ]
mov [ ebp - 0x1c ] esi
push esi
call [ InterlockedIncrement@IAT ]
push esi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax esi
call sub_10004955
retn
push 0x20
call sub_10004210
cmp esi rw-data
je r-xdata
push esi
call sub_10003e4f
pop ecx
sub_10005b38
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi + 0xc ] 0x0
test eax eax
jne r-xdata
mov ecx [ eax ]
mov [ esi ] ecx
mov eax [ eax + 0x4 ]
mov [ esi + 0x4 ] eax
call sub_10003b1d
mov [ esi + 0x8 ] eax
mov ecx [ eax + 0x6c ]
mov [ esi ] ecx
mov ecx [ eax + 0x68 ]
mov [ esi + 0x4 ] ecx
mov ecx [ esi ]
cmp ecx [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
mov eax [ esi + 0x8 ]
test [ eax + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
call sub_100057f8
mov [ esi ] eax
mov eax esi
pop esi
pop ebp
retn 0x4
or [ eax + 0x70 ] 0x2
mov [ esi + 0xc ] 0x1
jmp r-xdata
call sub_10005a94
mov [ esi + 0x4 ] eax
sub_10005bbf
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
push ebx
lea ecx [ ebp - 0x10 ]
call sub_10005b38
mov [ rw-data ] ebx
cmp esi 0xfffffffe
jne r-xdata
cmp esi 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp esi 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0x4 ]
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax esi
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_10005c3b
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
call sub_10005bbf
mov edi eax
xor esi esi
mov [ ebp + 0x8 ] edi
cmp edi esi
jne r-xdata
mov [ ebp - 0x1c ] esi
xor eax eax
mov eax ebx
call sub_100058a0
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_10006560
mov ecx [ ebp - 0x1c ]
add esp 0xc
imul ecx ecx 0x30
mov [ ebp - 0x20 ] esi
lea esi [ ecx + rw-data ]
mov [ ebp - 0x1c ] esi
jmp r-xdata
inc [ ebp - 0x1c ]
add eax 0x30
cmp eax 0xf0
jb r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000300c
leave
retn
cmp [ esi ] 0x0
jne r-xdata
cmp [ eax + rw-data ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov al [ esi + 0x1 ]
test al al
je r-xdata
mov esi [ ebp - 0x1c ]
inc [ ebp - 0x20 ]
add esi 0x8
cmp [ ebp - 0x20 ] 0x4
mov [ ebp - 0x1c ] esi
jb r-xdata
or eax 0xffffffff
cmp edi 0xfde9
je r-xdata
movzx edi [ esi ]
movzx eax al
jmp r-xdata
mov eax edi
mov [ ebx + 0x4 ] edi
mov [ ebx + 0x8 ] 0x1
call sub_10005871
push 0x6
mov [ ebx + 0xc ] eax
lea eax [ ebx + 0x10 ]
lea ecx [ ecx + rw-data ]
pop edx
movzx eax di
push eax
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
cmp edi eax
jbe r-xdata
mov si [ ecx ]
mov [ eax ] si
add ecx 0x2
add eax 0x2
dec edx
jne r-xdata
mov esi ebx
call sub_10005904
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
push edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x20 ]
mov al [ eax + rw-data ]
or [ ebx + edi + 0x1d ] al
movzx eax [ esi + 0x1 ]
inc edi
mov edi [ ebp + 0x8 ]
add esi 0x2
xor eax eax
jmp r-xdata
cmp [ rw-data ] esi
jne r-xdata
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_10006560
xor edx edx
inc edx
add esp 0xc
mov [ ebx + 0x4 ] edi
mov [ ebx + 0xc ] esi
cmp [ ebp - 0x18 ] edx
jbe r-xdata
mov [ ebx + 0x8 ] esi
cmp [ ebp - 0x12 ] 0x0
je r-xdata
lea eax [ ebx + 0x1e ]
mov ecx 0xfe
lea esi [ ebp - 0x11 ]
or [ eax ] 0x8
inc eax
dec ecx
jne r-xdata
mov eax [ ebx + 0x4 ]
call sub_10005871
mov [ ebx + 0xc ] eax
mov [ ebx + 0x8 ] edx
jmp r-xdata
movzx eax [ esi - 0x1 ]
movzx ecx cl
jmp r-xdata
xor eax eax
movzx ecx ax
mov eax ecx
shl ecx 0x10
or eax ecx
lea edi [ ebx + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
cmp eax ecx
jbe r-xdata
or [ ebx + eax + 0x1d ] 0x4
inc eax
add esi 0x2
cmp [ esi - 0x1 ] 0x0
jne r-xdata
mov cl [ esi ]
test cl cl
je r-xdata
sub_10005e24
push 0x14
push r--data
call sub_10004910
or [ ebp - 0x20 ] 0xffffffff
call sub_10003b1d
mov edi eax
mov [ ebp - 0x24 ] edi
call sub_10005a94
mov ebx [ edi + 0x68 ]
mov esi [ ebp + 0x8 ]
call sub_10005bbf
mov [ ebp + 0x8 ] eax
cmp eax [ ebx + 0x4 ]
je r-xdata
and [ ebp - 0x20 ] 0x0
push 0x220
call sub_10003e89
pop ecx
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ ebp - 0x20 ]
call sub_10004955
retn
mov ecx 0x88
mov esi [ edi + 0x68 ]
mov edi ebx
[ edi ] [ esi ]
and [ ebx ] 0x0
push ebx
push [ ebp + 0x8 ]
call sub_10005c3b
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov esi [ ebp - 0x24 ]
push [ esi + 0x68 ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
cmp ebx rw-data
je r-xdata
mov [ esi + 0x68 ] ebx
push ebx
mov edi [ InterlockedIncrement@IAT ]
call edi
test [ esi + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x68 ]
cmp eax rw-data
je r-xdata
call sub_10005525
mov [ eax ] 0x16
jmp r-xdata
push ebx
call sub_10003e4f
pop ecx
test [ rw-data ] 0x1
jne r-xdata
push eax
call sub_10003e4f
pop ecx
push 0xd
call sub_10005020
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ ebx + 0x4 ]
mov [ rw-data ] eax
mov eax [ ebx + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebx + 0xc ]
mov [ rw-data ] eax
xor eax eax
xor eax eax
mov cx [ ebx + eax * 2 + 0x10 ]
mov [ eax * 2 + rw-data ] cx
inc eax
jmp r-xdata
xor eax eax
mov cl [ eax + ebx + 0x1c ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x5
jge r-xdata
push [ rw-data ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov cl [ eax + ebx + 0x11d ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x101
jge r-xdata
mov [ rw-data ] ebx
push ebx
call edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10005f85
jmp r-xdata
mov eax [ rw-data ]
cmp eax rw-data
je r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x100
jge r-xdata
push eax
call sub_10003e4f
pop ecx
sub_10005fdc
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
imul ecx [ ebp + 0xc ]
push esi
mov esi ecx
test esi esi
jne r-xdata
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax [ ebp + 0xc ]
jae r-xdata
xor eax eax
cmp esi 0xffffffe0
ja r-xdata
inc esi
call sub_10005525
mov [ eax ] 0xc
xor eax eax
pop ebp
retn
cmp [ rw-data ] 0x0
je r-xdata
push esi
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
je r-xdata
push esi
call sub_100038f9
pop ecx
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov [ ecx ] 0xc
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov [ eax ] 0xc
sub_1000605e
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push esi
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
push [ ebp + 0xc ]
call sub_10003856
pop ecx
pop ebp
retn
push edi
jmp r-xdata
push [ ebp + 0x8 ]
call sub_10003e4f
pop ecx
xor eax eax
jmp r-xdata
cmp esi 0xffffffe0
jbe r-xdata
pop esi
pop ebp
retn
test esi esi
jne r-xdata
push esi
call sub_100038f9
pop ecx
call sub_10005525
mov [ eax ] 0xc
push esi
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
inc esi
mov eax edi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
pop edi
call sub_10005525
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_100054e3
pop ecx
mov [ esi ] eax
push esi
call sub_100038f9
pop ecx
test eax eax
je r-xdata
call sub_10005525
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_100054e3
pop ecx
mov [ esi ] eax
jmp r-xdata
xor eax eax
sub_10006173
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ r--data ]
push esi
imul ecx ecx 0xc
add ecx [ ebp + 0x8 ]
pop esi
cmp eax ecx
jae r-xdata
mov esi ecx
imul esi esi 0xc
add esi [ ebp + 0x8 ]
add eax 0xc
cmp eax esi
jb r-xdata
xor eax eax
cmp [ eax + 0x4 ] edx
je r-xdata
cmp [ eax + 0x4 ] edx
je r-xdata
pop ebp
retn
sub_100061b7
push 0x20
push r--data
call sub_10004910
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x28 ] edi
mov ebx [ ebp + 0x8 ]
cmp ebx 0xb
jg r-xdata
mov eax ebx
sub eax 0xf
je r-xdata
je r-xdata
mov esi rw-data
mov eax [ rw-data ]
sub eax 0x6
je r-xdata
call sub_10003aa4
mov edi eax
mov [ ebp - 0x28 ] edi
test edi edi
jne r-xdata
mov eax ebx
push 0x2
pop ecx
sub eax ecx
je r-xdata
call sub_10004955
retn
cmp [ ebp - 0x20 ] eax
jne r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
dec eax
je r-xdata
push [ edi + 0x5c ]
mov edx ebx
call sub_10006173
pop ecx
lea esi [ eax + 0x8 ]
mov eax [ esi ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
sub eax ecx
je r-xdata
cmp [ ebp - 0x1c ] eax
je r-xdata
push 0x3
call sub_100041eb
mov [ ebp - 0x1c ] 0x1
push eax
call [ DecodePointer@IAT ]
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
call sub_10005525
mov [ eax ] 0x16
call sub_10004e96
jmp r-xdata
mov [ ebp - 0x20 ] eax
xor eax eax
cmp [ ebp - 0x20 ] 0x1
je r-xdata
sub eax ecx
je r-xdata
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ebx 0x8
je r-xdata
push eax
call sub_10005020
pop ecx
sub eax ecx
jne r-xdata
mov ecx [ edi + 0x60 ]
mov [ ebp - 0x2c ] ecx
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
call sub_1000396d
mov [ esi ] eax
mov ecx [ edi + 0x64 ]
mov [ ebp - 0x30 ] ecx
mov [ edi + 0x64 ] 0x8c
cmp ebx 0x4
jne r-xdata
push ebx
call [ ebp - 0x20 ]
push [ edi + 0x64 ]
push ebx
call [ ebp - 0x20 ]
pop ecx
jmp r-xdata
mov ecx [ r--data ]
mov [ ebp - 0x24 ] ecx
cmp ebx 0x8
jne r-xdata
mov eax [ ebp - 0x2c ]
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
pop ecx
cmp ebx 0x8
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000631e
cmp ebx 0x8
jne r-xdata
mov ecx [ ebp - 0x24 ]
imul ecx ecx 0xc
mov edx [ edi + 0x5c ]
mov [ ecx + edx + 0x8 ] eax
inc [ ebp - 0x24 ]
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x30 ]
mov [ edi + 0x64 ] eax
cmp ebx 0x4
jne r-xdata
mov ecx [ r--data ]
add ecx [ r--data ]
cmp [ ebp - 0x24 ] ecx
jge r-xdata
sub_10006378
mov edi edi
push esi
push edi
xor edi edi
push [ edi + rw-data ]
call [ EncodePointer@IAT ]
mov [ edi + rw-data ] eax
add edi 0x4
cmp edi 0x28
jb r-xdata
pop edi
pop esi
retn
sub_100063a0
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax 0x5a4d
cmp [ ecx ] ax
je r-xdata
mov eax [ ecx + 0x3c ]
add eax ecx
cmp [ eax ] 0x4550
jne r-xdata
xor eax eax
pop ebp
retn
xor edx edx
mov ecx 0x10b
cmp [ eax + 0x18 ] cx
sete dl
mov eax edx
pop ebp
retn
sub_100063e0
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x3c ]
add ecx eax
movzx eax [ ecx + 0x14 ]
push ebx
push esi
movzx esi [ ecx + 0x6 ]
xor edx edx
push edi
lea eax [ eax + ecx + 0x18 ]
test esi esi
je r-xdata
xor eax eax
mov edi [ ebp + 0xc ]
inc edx
add eax 0x28
cmp edx esi
jb r-xdata
mov ebx [ eax + 0x8 ]
add ebx ecx
cmp edi ebx
jb r-xdata
mov ecx [ eax + 0xc ]
cmp edi ecx
jb r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10006430
mov edi edi
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_10004970
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x4 ] 0x0
push __dos_header
call sub_100063a0
add esp 0x4
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x8 ]
sub eax __dos_header
push eax
push __dos_header
call sub_100063e0
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
mov [ ebp - 0x4 ] 0xfffffffe
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_100064ec
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10005b38
movzx eax [ ebp + 0xc ]
mov ecx [ ebp - 0xc ]
mov dl [ ebp + 0x14 ]
test [ ecx + eax + 0x1d ] dl
jne r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x10 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax [ ebp + 0x10 ]
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_10006560
mov edx [ esp + 0xc ]
mov ecx [ esp + 0x4 ]
test edx edx
je r-xdata
mov eax [ esp + 0x4 ]
retn
xor eax eax
mov al [ esp + 0x8 ]
test al al
jne r-xdata
push edi
mov edi ecx
cmp edx 0x4
jb r-xdata
cmp edx 0x80
jb r-xdata
mov [ edi ] al
add edi 0x1
sub edx 0x1
jne r-xdata
neg ecx
and ecx 0x3
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov ecx eax
shl eax 0x8
add eax ecx
mov ecx eax
shl eax 0x10
add eax ecx
mov ecx edx
and edx 0x3
shr ecx 0x2
je r-xdata
sub edx ecx
jmp sub_1000771a
[ edi ]
test edx edx
je r-xdata
mov [ edi ] al
add edi 0x1
sub ecx 0x1
jne r-xdata
sub_100065e0
push esi
mov eax [ esp + 0x14 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x8 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x10 ]
mov ecx eax
mov eax esi
mul [ esp + 0x10 ]
add edx ecx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x14 ]
mov ecx eax
mov eax [ esp + 0x10 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x8 ]
sbb edx [ esp + 0xc ]
neg edx
neg eax
sbb edx 0x0
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
pop esi
retn 0x10
dec esi
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
cmp edx [ esp + 0xc ]
ja r-xdata
jb r-xdata
xor ebx ebx
cmp eax [ esp + 0x8 ]
jbe r-xdata
sub_10006680
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_100066a0
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x14 ]
mov ecx [ eax - 0x4 ]
xor ecx eax
call sub_1000300c
push ebp
mov ebp [ eax + 0x10 ]
mov edx [ eax + 0x28 ]
push edx
mov edx [ eax + 0x24 ]
push edx
call sub_100066e5
add esp 0x8
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_100066e5
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push ebp
push eax
push 0xfffffffe
push sub_100066a0
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x4 ]
mov [ fs : 0x0 ] eax
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x18
pop edi
pop esi
pop ebx
retn
cmp [ esp + 0x2c ] 0xffffffff
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0xc ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
cmp esi [ esp + 0x2c ]
jbe r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_10006795
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_100067b4
mov eax [ esp + 0x28 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_1000678c
push ebx
push ecx
mov ebx rw-data
jmp r-xdata
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_10006795
push ebx
push ecx
mov ebx rw-data
mov ecx [ esp + 0xc ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_100067b7
mov edi edi
push ebp
mov ebp esp
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0xc ]
push esi
push edi
mov [ ebp - 0x1c ] eax
call sub_1000396d
and [ ebp - 0x14 ] 0x0
cmp [ rw-data ] 0x0
mov [ ebp - 0x18 ] eax
jne r-xdata
mov eax [ rw-data ]
mov ecx [ ebp - 0x18 ]
mov esi [ DecodePointer@IAT ]
cmp eax ecx
je r-xdata
push r--data
call [ LoadLibraryW@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ rw-data ]
cmp eax [ ebp - 0x18 ]
je r-xdata
cmp [ rw-data ] ecx
je r-xdata
xor eax eax
mov edi [ GetProcAddress@IAT ]
push r--data
push ebx
call edi
test eax eax
je r-xdata
push [ rw-data ]
call esi
test eax eax
je r-xdata
push eax
call esi
test eax eax
je r-xdata
push eax
call esi
push [ rw-data ]
mov edi eax
call esi
mov ebx eax
test edi edi
je r-xdata
mov esi [ EncodePointer@IAT ]
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
mov [ rw-data ] eax
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
push [ ebp - 0x14 ]
call eax
jmp r-xdata
call eax
mov [ ebp - 0x14 ] eax
test eax eax
je r-xdata
test ebx ebx
je r-xdata
push r--data
push ebx
call edi
push eax
call esi
mov [ rw-data ] eax
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000300c
leave
retn
mov eax [ rw-data ]
cmp eax [ ebp - 0x18 ]
je r-xdata
call edi
test eax eax
je r-xdata
push eax
call esi
test eax eax
je r-xdata
or [ ebp + 0x10 ] 0x200000
jmp r-xdata
lea ecx [ ebp - 0x24 ]
push ecx
push 0xc
lea ecx [ ebp - 0x10 ]
push ecx
push 0x1
push eax
call ebx
test eax eax
je r-xdata
push [ ebp - 0x14 ]
call eax
mov [ ebp - 0x14 ] eax
test [ ebp - 0x8 ] 0x1
jne r-xdata
sub_10006923
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
test esi esi
je r-xdata
call sub_10005525
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
jne r-xdata
mov edx esi
xor eax eax
mov [ esi ] ax
jmp r-xdata
test edi edi
je r-xdata
add edx 0x2
dec edi
jne r-xdata
sub edx ecx
cmp [ edx ] 0x0
je r-xdata
xor eax eax
test edi edi
jne r-xdata
dec edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov [ esi ] ax
call sub_10005525
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
movzx eax [ ecx ]
mov [ edx + ecx ] ax
add ecx 0x2
test ax ax
je r-xdata
call sub_10004e96
mov eax esi
sub_10006998
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0x14 ]
push esi
push edi
test ebx ebx
jne r-xdata
test edx edx
je r-xdata
test edx edx
jne r-xdata
call sub_10005525
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
cmp [ ebp + 0xc ] edx
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
test ebx ebx
jne r-xdata
xor eax eax
mov ecx [ ebp + 0x10 ]
test ecx ecx
jne r-xdata
xor eax eax
mov [ edx ] ax
jmp r-xdata
mov eax edx
cmp ebx 0xffffffff
jne r-xdata
xor eax eax
mov [ edx ] ax
jmp r-xdata
mov esi ecx
sub esi edx
mov esi edx
sub esi ecx
test ebx ebx
jne r-xdata
dec edi
je r-xdata
test edi edi
jne r-xdata
dec edi
jne r-xdata
xor ecx ecx
mov [ eax ] cx
dec ebx
jne r-xdata
xor eax eax
cmp ebx 0xffffffff
jne r-xdata
movzx eax [ ecx ]
mov [ esi + ecx ] ax
add ecx 0x2
test ax ax
je r-xdata
jmp r-xdata
movzx ecx [ esi + eax ]
mov [ eax ] cx
add eax 0x2
test cx cx
je r-xdata
mov [ edx ] ax
call sub_10005525
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov ecx [ ebp + 0xc ]
push 0x50
mov [ edx + ecx * 2 - 0x2 ] ax
pop eax
jmp r-xdata
call sub_10004e96
mov eax esi
jmp r-xdata
sub_10006a65
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax [ ebp + 0x8 ]
sar eax 0x1
dec eax
pop ebp
retn
sub_10006a80
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
test esi esi
je r-xdata
call sub_10005525
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
jne r-xdata
mov edx esi
sub edx eax
mov [ esi ] ax
jmp r-xdata
xor eax eax
test edi edi
jne r-xdata
dec edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov [ esi ] ax
call sub_10005525
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
movzx ecx [ eax ]
mov [ edx + eax ] cx
add eax 0x2
test cx cx
je r-xdata
call sub_10004e96
mov eax esi
sub_10006ae3
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
test ecx ecx
js r-xdata
call sub_10005525
mov [ eax ] 0x16
call sub_10004e96
or eax 0xffffffff
pop ebp
retn
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
pop ebp
retn
cmp ecx 0x3
jne r-xdata
mov eax [ rw-data ]
pop ebp
retn
sub_10006b22
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
push [ esi + 0x4 ]
call sub_10003e4f
push [ esi + 0x8 ]
call sub_10003e4f
push [ esi + 0xc ]
call sub_10003e4f
push [ esi + 0x10 ]
call sub_10003e4f
push [ esi + 0x14 ]
call sub_10003e4f
push [ esi + 0x18 ]
call sub_10003e4f
push [ esi ]
call sub_10003e4f
push [ esi + 0x20 ]
call sub_10003e4f
push [ esi + 0x24 ]
call sub_10003e4f
push [ esi + 0x28 ]
call sub_10003e4f
push [ esi + 0x2c ]
call sub_10003e4f
push [ esi + 0x30 ]
call sub_10003e4f
push [ esi + 0x34 ]
call sub_10003e4f
push [ esi + 0x1c ]
call sub_10003e4f
push [ esi + 0x38 ]
call sub_10003e4f
push [ esi + 0x3c ]
call sub_10003e4f
add esp 0x40
push [ esi + 0x40 ]
call sub_10003e4f
push [ esi + 0x44 ]
call sub_10003e4f
push [ esi + 0x48 ]
call sub_10003e4f
push [ esi + 0x4c ]
call sub_10003e4f
push [ esi + 0x50 ]
call sub_10003e4f
push [ esi + 0x54 ]
call sub_10003e4f
push [ esi + 0x58 ]
call sub_10003e4f
push [ esi + 0x5c ]
call sub_10003e4f
push [ esi + 0x60 ]
call sub_10003e4f
push [ esi + 0x64 ]
call sub_10003e4f
push [ esi + 0x68 ]
call sub_10003e4f
push [ esi + 0x6c ]
call sub_10003e4f
push [ esi + 0x70 ]
call sub_10003e4f
push [ esi + 0x74 ]
call sub_10003e4f
push [ esi + 0x78 ]
call sub_10003e4f
push [ esi + 0x7c ]
call sub_10003e4f
add esp 0x40
push [ esi + 0x80 ]
call sub_10003e4f
push [ esi + 0x84 ]
call sub_10003e4f
push [ esi + 0x88 ]
call sub_10003e4f
push [ esi + 0x8c ]
call sub_10003e4f
push [ esi + 0x90 ]
call sub_10003e4f
push [ esi + 0x94 ]
call sub_10003e4f
push [ esi + 0x98 ]
call sub_10003e4f
push [ esi + 0x9c ]
call sub_10003e4f
push [ esi + 0xa0 ]
call sub_10003e4f
push [ esi + 0xa4 ]
call sub_10003e4f
push [ esi + 0xa8 ]
call sub_10003e4f
push [ esi + 0xbc ]
call sub_10003e4f
push [ esi + 0xc0 ]
call sub_10003e4f
push [ esi + 0xc4 ]
call sub_10003e4f
push [ esi + 0xc8 ]
call sub_10003e4f
push [ esi + 0xcc ]
call sub_10003e4f
add esp 0x40
push [ esi + 0xd0 ]
call sub_10003e4f
push [ esi + 0xb8 ]
call sub_10003e4f
push [ esi + 0xd8 ]
call sub_10003e4f
push [ esi + 0xdc ]
call sub_10003e4f
push [ esi + 0xe0 ]
call sub_10003e4f
push [ esi + 0xe4 ]
call sub_10003e4f
push [ esi + 0xe8 ]
call sub_10003e4f
push [ esi + 0xec ]
call sub_10003e4f
push [ esi + 0xd4 ]
call sub_10003e4f
push [ esi + 0xf0 ]
call sub_10003e4f
push [ esi + 0xf4 ]
call sub_10003e4f
push [ esi + 0xf8 ]
call sub_10003e4f
push [ esi + 0xfc ]
call sub_10003e4f
push [ esi + 0x100 ]
call sub_10003e4f
push [ esi + 0x104 ]
call sub_10003e4f
push [ esi + 0x108 ]
call sub_10003e4f
add esp 0x40
push [ esi + 0x10c ]
call sub_10003e4f
push [ esi + 0x110 ]
call sub_10003e4f
push [ esi + 0x114 ]
call sub_10003e4f
push [ esi + 0x118 ]
call sub_10003e4f
push [ esi + 0x11c ]
call sub_10003e4f
push [ esi + 0x120 ]
call sub_10003e4f
push [ esi + 0x124 ]
call sub_10003e4f
push [ esi + 0x128 ]
call sub_10003e4f
push [ esi + 0x12c ]
call sub_10003e4f
push [ esi + 0x130 ]
call sub_10003e4f
push [ esi + 0x134 ]
call sub_10003e4f
push [ esi + 0x138 ]
call sub_10003e4f
push [ esi + 0x13c ]
call sub_10003e4f
push [ esi + 0x140 ]
call sub_10003e4f
push [ esi + 0x144 ]
call sub_10003e4f
push [ esi + 0x148 ]
call sub_10003e4f
add esp 0x40
push [ esi + 0x14c ]
call sub_10003e4f
push [ esi + 0x150 ]
call sub_10003e4f
push [ esi + 0x154 ]
call sub_10003e4f
push [ esi + 0x158 ]
call sub_10003e4f
push [ esi + 0x15c ]
call sub_10003e4f
push [ esi + 0x160 ]
call sub_10003e4f
add esp 0x18
sub_10006e99
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003e4f
pop ecx
mov eax [ esi + 0x8 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003e4f
pop ecx
mov eax [ esi + 0x30 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003e4f
pop ecx
mov esi [ esi + 0x34 ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_10003e4f
pop ecx
push esi
call sub_10003e4f
pop ecx
sub_10006f02
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi + 0xc ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x10 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003e4f
pop ecx
mov eax [ esi + 0x14 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003e4f
pop ecx
mov eax [ esi + 0x18 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003e4f
pop ecx
mov eax [ esi + 0x1c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003e4f
pop ecx
mov eax [ esi + 0x20 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003e4f
pop ecx
mov eax [ esi + 0x24 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003e4f
pop ecx
mov eax [ esi + 0x38 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003e4f
pop ecx
mov eax [ esi + 0x3c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003e4f
pop ecx
mov eax [ esi + 0x40 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003e4f
pop ecx
mov eax [ esi + 0x44 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003e4f
pop ecx
mov eax [ esi + 0x48 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003e4f
pop ecx
mov esi [ esi + 0x4c ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_10003e4f
pop ecx
push esi
call sub_10003e4f
pop ecx
sub_10007000
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
pop ebp
retn
sub eax 0x8
cmp [ eax ] 0xdddd
jne r-xdata
push eax
call sub_10003e4f
pop ecx
sub_10007020
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov edx [ ebp + 0x18 ]
push ebx
xor ebx ebx
push esi
push edi
cmp edx ebx
jle r-xdata
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x24 ] ebx
jne r-xdata
mov eax [ ebp + 0x14 ]
mov ecx edx
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x28 ] ebx
push ebx
push ebx
push [ ebp + 0x18 ]
setne al
push [ ebp + 0x14 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x24 ]
call esi
mov edi eax
mov [ ebp - 0x10 ] edi
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x24 ] eax
mov eax edx
sub eax ecx
dec eax
cmp eax edx
jge r-xdata
inc eax
cmp ecx ebx
jne r-xdata
jle r-xdata
xor eax eax
jmp r-xdata
mov [ ebp + 0x18 ] eax
inc eax
dec ecx
cmp [ eax ] bl
je r-xdata
or ecx 0xffffffff
mov [ ebp - 0xc ] ebx
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
lea esp [ ebp - 0x1c ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000300c
leave
retn
push edi
push [ ebp - 0xc ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push 0x1
push [ ebp + 0x24 ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push [ ebp - 0xc ]
call sub_10007000
mov eax [ ebp - 0x8 ]
pop ecx
mov esi [ LCMapStringW@IAT ]
push ebx
push ebx
push edi
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
je r-xdata
push eax
call sub_10003856
pop ecx
cmp eax ebx
je r-xdata
call sub_100077f0
mov eax esp
cmp eax ebx
je r-xdata
mov ecx 0x400
test [ ebp + 0x10 ] ecx
je r-xdata
mov [ ebp - 0xc ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
mov edi [ ebp - 0x8 ]
cmp edi ebx
jle r-xdata
mov eax [ ebp + 0x20 ]
cmp eax ebx
je r-xdata
cmp [ ebp - 0xc ] ebx
je r-xdata
add eax 0x8
xor edi edi
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
cmp [ ebp - 0x8 ] eax
jg r-xdata
push [ ebp - 0x8 ]
push edi
push [ ebp - 0x10 ]
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax ecx
ja r-xdata
push eax
push [ ebp + 0x1c ]
push edi
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
jmp r-xdata
push edi
call sub_10007000
pop ecx
push ebx
push ebx
cmp [ ebp + 0x20 ] ebx
jne r-xdata
push eax
call sub_10003856
pop ecx
cmp eax ebx
je r-xdata
call sub_100077f0
mov edi esp
cmp edi ebx
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push ebx
push ebx
jmp r-xdata
mov edi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ edi ] 0xcccc
add edi 0x8
jmp r-xdata
push [ ebp - 0x8 ]
push edi
push ebx
push [ ebp + 0x24 ]
call [ WideCharToMultiByte@IAT ]
mov [ ebp - 0x8 ] eax
cmp edi ebx
je r-xdata
sub_10007207
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10005b38
push [ ebp + 0x28 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_10007020
add esp 0x24
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1000724d
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
xor ebx ebx
push esi
push edi
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x1c ] ebx
jne r-xdata
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x20 ] ebx
push ebx
push ebx
push [ ebp + 0x14 ]
setne al
push [ ebp + 0x10 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x1c ]
call esi
mov edi eax
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x1c ] eax
jle r-xdata
xor eax eax
jmp r-xdata
test ebx ebx
je r-xdata
cmp edi 0x7ffffff0
ja r-xdata
lea esp [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000300c
leave
retn
lea eax [ edi + edi ]
push eax
push 0x0
push ebx
call sub_10006560
add esp 0xc
push edi
push ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x1
push [ ebp + 0x1c ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push ebx
call sub_10007000
mov eax [ ebp - 0x8 ]
pop ecx
push [ ebp + 0x18 ]
push eax
push ebx
push [ ebp + 0xc ]
call [ GetStringTypeW@IAT ]
mov [ ebp - 0x8 ] eax
push eax
call sub_10003856
pop ecx
cmp eax ebx
je r-xdata
call sub_100077f0
mov eax esp
cmp eax ebx
je r-xdata
mov ebx eax
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
add eax 0x8
sub_10007334
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10005b38
push [ ebp + 0x24 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_1000724d
add esp 0x1c
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10007374
call sub_100061aa
test eax eax
je r-xdata
test [ rw-data ] 0x2
je r-xdata
push 0x16
call sub_100061b7
pop ecx
push 0x3
call sub_100041eb
int3
push 0x1
push 0x40000015
push 0x3
call sub_10004d1b
add esp 0xc
sub_100073b0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x80
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10007434 ]
jmp [ ecx * 4 + jump_table_100074b4 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10007520 ]
jmp r-xdata
jmp [ ecx * 4 + jump_table_100076bc ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_100075c0 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100076bc ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10007520 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
push edi
mov eax esi
and eax 0xf
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_100076bc ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10007520 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10007520 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10007520 ]
mov edx 0x10
sub edx eax
sub ecx edx
push ecx
mov eax edx
mov ecx eax
and ecx 0x3
je r-xdata
mov edx ecx
and ecx 0x7f
shr edx 0x7
je r-xdata
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100076bc ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100076bc ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100076bc ]
shr eax 0x2
je r-xdata
mov dl [ esi ]
mov [ edi ] dl
inc esi
inc edi
dec ecx
jne r-xdata
test ecx ecx
je r-xdata
jmp r-xdata
pop ecx
jmp r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec eax
jne r-xdata
pop eax
pop esi
pop edi
pop ebp
retn
mov edx ecx
shr edx 0x4
test edx edx
je r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec edx
jne r-xdata
and ecx 0xf
je r-xdata
lea ebx [ ebx ]
mov eax ecx
shr ecx 0x2
je r-xdata
movdqa xmm0 [ esi ]
movdqa [ edi ] xmm0
lea esi [ esi + 0x10 ]
lea edi [ edi + 0x10 ]
dec edx
jne r-xdata
mov ecx eax
and ecx 0x3
je r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec ecx
jne r-xdata
mov al [ esi ]
mov [ edi ] al
inc esi
inc edi
dec ecx
jne r-xdata
sub_1000771a
pxor xmm0 xmm0
push ecx
push ebx
mov eax ecx
and eax 0xf
test eax eax
jne r-xdata
mov ebx eax
neg ebx
add ebx 0x10
sub edx ebx
xor eax eax
push edx
mov edx ebx
and edx 0x3
je r-xdata
mov eax edx
and edx 0x7f
shr eax 0x7
je r-xdata
shr ebx 0x2
je r-xdata
mov [ ecx ] al
inc ecx
dec edx
jne r-xdata
test edx edx
je r-xdata
lea esp [ esp ]
pop edx
jmp r-xdata
mov [ ecx ] eax
lea ecx [ ecx + 0x4 ]
dec ebx
jne r-xdata
pop ebx
pop eax
retn
mov eax edx
shr eax 0x4
je r-xdata
movdqa [ ecx ] xmm0
movdqa [ ecx + 0x10 ] xmm0
movdqa [ ecx + 0x20 ] xmm0
movdqa [ ecx + 0x30 ] xmm0
movdqa [ ecx + 0x40 ] xmm0
movdqa [ ecx + 0x50 ] xmm0
movdqa [ ecx + 0x60 ] xmm0
movdqa [ ecx + 0x70 ] xmm0
lea ecx [ ecx + 0x80 ]
dec eax
jne r-xdata
and edx 0xf
je r-xdata
jmp r-xdata
mov eax edx
xor ebx ebx
shr edx 0x2
je r-xdata
movdqa [ ecx ] xmm0
lea ecx [ ecx + 0x10 ]
dec eax
jne r-xdata
and eax 0x3
je r-xdata
mov [ ecx ] ebx
lea ecx [ ecx + 0x4 ]
dec edx
jne r-xdata
mov [ ecx ] bl
inc ecx
dec eax
jne r-xdata
sub_10007960
push ecx
lea ecx [ esp + 0x4 ]
sub ecx eax
sbb eax eax
not eax
and ecx eax
mov eax esp
and eax 0xfffff000
sub eax 0x1000
test [ eax ] eax
jmp r-xdata
mov eax ecx
pop ecx
xchg esp eax
mov eax [ eax ]
mov [ esp ] eax
retn
cmp ecx eax
jb r-xdata
sub_10007990
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
or ecx 0xffffffff
lea ecx [ ecx ]
add edx 0x1
bts [ esp ] eax
jmp r-xdata
mov eax ecx
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
add ecx 0x1
mov al [ esi ]
or al al
je r-xdata
sub_100079e0
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
mov edi edi
add edx 0x1
bts [ esp ] eax
jmp r-xdata
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
mov al [ esi ]
or al al
je r-xdata
lea eax [ esi - 0x1 ]
sub_10007a20
push ebp
mov ebp esp
push edi
push esi
push ebx
mov ecx [ ebp + 0x10 ]
or ecx ecx
je r-xdata
mov eax ecx
pop ebx
pop esi
pop edi
leave
retn
mov esi [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
mov bh 0x41
mov bl 0x5a
mov dh 0x20
lea ecx [ ecx ]
xor ecx ecx
cmp ah al
je r-xdata
or al al
je r-xdata
mov ecx 0xffffffff
jb r-xdata
add esi 0x1
add edi 0x1
cmp ah bh
jb r-xdata
neg ecx
cmp al bh
jb r-xdata
cmp ah bl
ja r-xdata
cmp ah al
jne r-xdata
cmp al bl
ja r-xdata
add ah dh
sub ecx 0x1
jne r-xdata
add al dh
mov ah [ esi ]
or ah ah
mov al [ edi ]
je r-xdata
sub_10007a8f
push 0x8
push r--data
call sub_10004910
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
call sub_10004955
retn
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ecx + 0x1c ]
test eax eax
je r-xdata
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
and [ ebp - 0x4 ] 0x0
push eax
push [ ecx + 0x18 ]
call sub_10007a88
mov [ ebp - 0x4 ] 0xfffffffe
sub_10007af0
push ebp
mov ebp esp
sub esp 0x4
push ebx
push ecx
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebp
push [ ebp + 0x10 ]
mov ecx [ ebp + 0x10 ]
mov ebp [ ebp - 0x4 ]
call sub_1000678c
push esi
push edi
call eax
pop edi
pop esi
mov ebx ebp
pop ebp
mov ecx [ ebp + 0x10 ]
push ebp
mov ebp ebx
cmp ecx 0x100
jne r-xdata
push ecx
call sub_1000678c
pop ebp
pop ecx
pop ebx
leave
retn 0xc
mov ecx 0x2
sub_10007b40
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x80
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10007bc4 ]
jmp [ ecx * 4 + jump_table_10007c44 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10007cb0 ]
jmp r-xdata
jmp [ ecx * 4 + jump_table_10007e4c ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10007d50 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10007e4c ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10007cb0 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
push edi
mov eax esi
and eax 0xf
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10007e4c ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10007cb0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10007cb0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10007cb0 ]
mov edx 0x10
sub edx eax
sub ecx edx
push ecx
mov eax edx
mov ecx eax
and ecx 0x3
je r-xdata
mov edx ecx
and ecx 0x7f
shr edx 0x7
je r-xdata
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10007e4c ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10007e4c ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10007e4c ]
shr eax 0x2
je r-xdata
mov dl [ esi ]
mov [ edi ] dl
inc esi
inc edi
dec ecx
jne r-xdata
test ecx ecx
je r-xdata
jmp r-xdata
pop ecx
jmp r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec eax
jne r-xdata
pop eax
pop esi
pop edi
pop ebp
retn
mov edx ecx
shr edx 0x4
test edx edx
je r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec edx
jne r-xdata
and ecx 0xf
je r-xdata
lea ebx [ ebx ]
mov eax ecx
shr ecx 0x2
je r-xdata
movdqa xmm0 [ esi ]
movdqa [ edi ] xmm0
lea esi [ esi + 0x10 ]
lea edi [ edi + 0x10 ]
dec edx
jne r-xdata
mov ecx eax
and ecx 0x3
je r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec ecx
jne r-xdata
mov al [ esi ]
mov [ edi ] al
inc esi
inc edi
dec ecx
jne r-xdata
sub_1000301b
mov edi edi
push ecx
mov [ ecx ] r--data
call sub_100034fe
pop ecx
retn
sub_1000304c
mov [ ecx ] r--data
jmp sub_100036c5
sub_1000307e
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_100036f7
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10003254
cmp [ ebp + 0x10 ] edi
jne r-xdata
retn
cmp [ rw-data ] 0xffffffff
je r-xdata
call sub_100039b3
sub_100033b2
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov ecx [ ecx ]
push eax
push ecx
call sub_10004c49
pop ecx
pop ecx
retn
sub_10003565
push 0xe
call sub_10004f47
pop ecx
retn
sub_1000356e
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_10003e4f
sub_10003608
mov edi edi
push ebp
mov ebp esp
mov eax ecx
mov ecx [ ebp + 0x8 ]
mov [ eax ] r--data
mov ecx [ ecx ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] 0x0
pop ebp
retn 0x8
sub_10003625
mov eax [ ecx + 0x4 ]
test eax eax
jne r-xdata
retn
mov eax r--data
sub_10003672
mov edi edi
push esi
mov esi ecx
cmp [ esi + 0x8 ] 0x0
je r-xdata
and [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
pop esi
retn
push [ esi + 0x4 ]
call sub_10003e4f
pop ecx
sub_100036c5
mov [ ecx ] r--data
jmp sub_10003672
sub_10003839
call sub_10003fb4
retn
sub_1000383f
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_10003803
neg eax
sbb eax eax
neg eax
pop ecx
dec eax
pop ebp
retn
sub_100038ea
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10003976
call [ TlsAlloc@IAT ]
retn 0x4
sub_10003a92
push 0xd
call sub_10004f47
pop ecx
retn
sub_10003a9b
push 0xc
call sub_10004f47
pop ecx
retn
sub_10003c51
push 0xd
call sub_10004f47
pop ecx
retn
sub_10003c5d
push 0xc
call sub_10004f47
pop ecx
retn
sub_10003f93
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_10003f68
pop ecx
push [ ebp + 0x8 ]
call [ ExitProcess@IAT ]
sub_10003fab
push 0x8
call sub_10005020
pop ecx
retn
sub_10003fb4
push 0x8
call sub_10004f47
pop ecx
retn
sub_100041d6
cmp [ ebp + 0x10 ] 0x0
je r-xdata
retn
push 0x8
call sub_10004f47
pop ecx
sub_100041eb
mov edi edi
push ebp
mov ebp esp
push 0x0
push 0x1
push [ ebp + 0x8 ]
call sub_100040ab
add esp 0xc
pop ebp
retn
sub_10004201
push 0x1
push 0x0
push 0x0
call sub_100040ab
add esp 0xc
retn
sub_10004210
mov edi edi
push ebp
mov ebp esp
call sub_100054aa
push [ ebp + 0x8 ]
call sub_100052fb
pop ecx
push 0xff
call sub_100041eb
int3
sub_100048da
push 0x0
push 0x1000
push 0x0
call [ HeapCreate@IAT ]
xor ecx ecx
test eax eax
setne cl
mov [ rw-data ] eax
mov eax ecx
retn
sub_100048f8
push [ rw-data ]
call [ HeapDestroy@IAT ]
and [ rw-data ] 0x0
retn
sub_10004955
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_10004d0c
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10004e96
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_10004e69
add esp 0x14
retn
sub_10004f47
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push [ eax * 8 + rw-data ]
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_10005017
push 0xa
call sub_10004f47
pop ecx
retn
sub_10005226
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
push [ ecx + 0x1c ]
push [ ecx + 0x18 ]
push [ ecx + 0x28 ]
call sub_10005150
add esp 0xc
pop ebp
retn 0x4
sub_10005259
mov ebp edx
mov esi ecx
mov eax ecx
push 0x1
call sub_10006795
xor eax eax
xor ebx ebx
xor ecx ecx
xor edx edx
xor edi edi
jmp esi
sub_1000528b
push ebp
mov ebp [ esp + 0x8 ]
push edx
push ecx
push [ esp + 0x14 ]
call sub_10005150
add esp 0xc
pop ebp
retn 0x8
sub_10005865
push 0xc
call sub_10004f47
pop ecx
mov esi [ ebp - 0x1c ]
retn
sub_10005b2f
push 0xd
call sub_10004f47
pop ecx
retn
sub_10005f85
push 0xd
call sub_10004f47
pop ecx
retn
sub_10005fbe
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
retn
push 0xfffffffd
call sub_10005e24
pop ecx
mov [ rw-data ] 0x1
sub_1000610b
push 0x8
push r--data
call sub_10004910
call sub_10003b1d
mov eax [ eax + 0x78 ]
test eax eax
je r-xdata
call sub_10007374
and [ ebp - 0x4 ] 0x0
call eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
sub_1000612b
xor eax eax
inc eax
retn
sub_10006144
push sub_1000610b
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
retn
sub_10006155
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ebp
retn
sub_100061aa
push [ rw-data ]
call [ DecodePointer@IAT ]
retn
sub_1000631e
cmp [ ebp - 0x1c ] 0x0
je r-xdata
retn
push 0x0
call sub_10004f47
pop ecx
sub_1000635a
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10006369
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_100064bb
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
xor edx edx
cmp [ ecx ] 0xc0000005
sete dl
mov eax edx
retn
sub_1000653f
mov edi edi
push ebp
mov ebp esp
push 0x4
push 0x0
push [ ebp + 0x8 ]
push 0x0
call sub_100064ec
add esp 0x10
pop ebp
retn
sub_10006769
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_100066a0
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_100067b4
call eax
retn
sub_10007711
push 0x2
call sub_10004210
sub_100077d4
push 0xa
call [ IsProcessorFeaturePresent@IAT ]
mov [ rw-data ] eax
xor eax eax
retn
sub_100077f0
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0xf
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_10007960
sub_10007806
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0x7
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_10007960
RtlUnwind
jmp [ RtlUnwind@IAT ]
sub_10007a88
pop eax
pop ecx
xchg [ esp ] eax
jmp eax
sub_10007ad2
xor eax eax
cmp [ ebp + 0xc ] al
setne al
retn
sub_10007adb
mov esp [ ebp - 0x18 ]
call sub_1000610b
