sub_40271f
loopne rwxdata
and ah [ edx + 0x7ad06e7b ]
mov edi 0xb477d330
cmp ebx ebp
int 0x71
sar dl 0x1
pop eax
fimul [ esi - 0x3e ]
mov ah 0x55
jpo rwxdata
lodsb [ esi ]
rcl [ ebp + 0x4f01fad0 ] 0x1
loopne rwxdata
dec ebx
jecxz rwxdata
lodsd [ esi ]
enter 0x1fa 0x79
mov edx 0xd1ace277
xchg ebp eax
sar dl 0x1
add [ edi - 0x20 ] ecx
sbb eax 0x4531acb4
sahf
adc [ esi - 0x3a9953f5 ] cl
mov cl 0x55
jpo rwxdata
or bh [ ebp + edi - 0x52f98f1 ]
add eax 0x77e0d897
mov ah 0x9e
mov ebp 0xefed072
mov ah 0xac
xor [ ebp - 0x62 ] eax
imul edx eax 0xba296bfa
xchg edi eax
clc
loopne rwxdata
rol [ edi ] cl
sahf
aaa
add eax 0x77e02901
aaa
sub [ edx + 0x52034b77 ] edi
out dx al
aaa
lodsb [ esi ]
push edx
test eax 0x55b78966
jpo rwxdata
push edi
lodsb [ esi ]
arpl [ ebx ] ax
inc esp
lodsb [ esi ]
mov [ edi ] bh
aaa
insb
stosb [ edi ]
sub eax esp
ja rwxdata
jbe rwxdata
add edx [ edx - 0x12 ]
ja rwxdata
mov ah 0xbd
dec edi
outsb
sar dl 0x1
fisubr [ ecx ]
xchg edi eax
pop esi
outsd
add [ ecx ] ebp
mov eax 0x7b4cbb90
dec esp
push ebp
bswap edx
dec ecx
jg rwxdata
jns rwxdata
push cs
jb rwxdata
mov ebp 0x8e296bf3
nop
sti
push ebp
aas
mov ecx 0xab4b2fa
add dl bl
pop ecx
fldenv [ 0x77224b90 ]
push es
ja rwxdata
ja rwxdata
sar dl 0x1
imul ebp [ ecx ] 0xffffffba
mov ss [ eax + 0x6e7ba222 ]
sar [ edx - 0x41 ] 0x1
xor bl dl
ja rwxdata
je rwxdata
sub eax esp
jbe rwxdata
push ecx
fild [ edx ]
dec [ esi ]
loopne rwxdata
push esi
imul ebp [ esi - 0x2b ] 0x872901fb
int1
fisub [ 0x7b55b477 ]
xor [ edi - 0x56 ] 0x6b
sub [ eax + 0x7b4cbb90 ] edi
rol [ edi ] cl
sahf
aaa
add eax 0x136bda02
inc esp
lodsb [ esi ]
mov [ esi + 0x2901fac5 ] al
mov ebx 0x1839c40f
sbb al 0xad
mov [ edi ] ch
inc esp
cli
add dl [ eax + esi * 8 - 0x31 ]
mov ch 0x55
jpo rwxdata
push esi
push cs
outsd
sahf
add eax 0x77d32f97
mov ah 0xd5
leave
xchg esp eax
sar edx cl
add [ eax ] ebp
stosd [ edi ]
push 0x66c6d339
sar dl 0x1
push ecx
dec edi
loopne rwxdata
loopne rwxdata
fdivr [ ecx ]
add [ ebx ] 0x46
rwxdata
pushfd
test [ eax - 0x1e ] ah
ja rwxdata
push eax
inc esp
clc
loopne rwxdata
test al 0x1a
mov ah 0x3
mov [ eax ] al
or eax 0xd92901fa
mov bh 0xc1
inc esp
adc eax [ esi - 0x25fe052d ]
dec esi
fidiv [ ebp + edx * 2 - 0x79b25085 ]
stc
add [ ecx ] ebp
fisttp [ edx ]
mov [ 0xffffffffc8ad01da ] eax
shl [ ebx + edi * 8 - 0x28 ] 0x39
sub [ edi + 0x34555d7a ] ecx
outsb
sub eax 0x3299efa
ja rwxdata
pushad
js rwxdata
cli
add [ ecx - 0x46 ] edi
ja rwxdata
or ah [ ebx - 0x3752fe26 ]
mov ah 0x2b
outsd
jmp 0x29477295
and eax 0x5afb4935
setl [ es : edi + 0x4 ]
adc esp [ edx ]
lodsb [ esi ]
add [ ebx + 0x55b4770f ] dh
push ebp
xchg [ esi + 0x5a ] ch
sti
add ch [ eax ]
xor al 0x77
mov cl 0x56
cwde
outsb
leave
sti
sub ebx edx
jbe rwxdata
push ss
sub dh al
ja rwxdata
push ebp
push 0x6d
sar bl 0x1
mov eax [ 0x61e704f8 ]
mov dh 0xb0
rcl [ ebx + 0x67ea9de3 ] 0xa6
0x7874c077 0xd2df
sub_4028ac
cmc
mov eax 0x76f4e26f
push ecx
jl rwxdata
outsb
pop edx
mov eax [ 0xffffffff8f7753aa ]
nop
add ebp edx
mov edx [ edi - 0x4cff53c9 ]
emms
mov ah 0x55
push ebp
push 0x6d
sar bl 0x1
loopne rwxdata
push esi
imul ebp [ esi - 0x2b ] 0x872901fb
mov eax 0x7b4cbb90
dec esp
push ebp
bswap edx
dec ecx
jg rwxdata
add [ ebx ] 0x46
rwxdata
pushfd
test [ eax - 0x1e ] ah
ja rwxdata
aas
mov ecx 0xab4b2fa
add dl bl
pop ecx
or bh [ ebp + edi - 0x52f98f1 ]
push edi
lodsb [ esi ]
arpl [ ebx ] ax
inc esp
lodsb [ esi ]
mov [ edi ] bh
aaa
insb
stosb [ edi ]
sub eax esp
ja rwxdata
fldenv [ 0x77224b90 ]
push es
sub [ edi + 0x34555d7a ] ecx
outsb
sub eax 0x3299efa
ja rwxdata
pushad
js rwxdata
xchg edi eax
clc
loopne rwxdata
xchg edi eax
pop esi
outsd
add [ ecx ] ebp
rol [ edi ] cl
sahf
aaa
add eax 0x77e02901
aaa
rol [ edi ] cl
sahf
aaa
add eax 0x136bda02
inc esp
lodsb [ esi ]
mov [ esi + 0x2901fac5 ] al
mov ebx 0x1839c40f
sbb al 0xad
mov [ edi ] ch
inc esp
test al 0x1a
mov ah 0x3
mov [ eax ] al
or eax 0xd92901fa
mov bh 0xc1
inc esp
adc eax [ esi - 0x25fe052d ]
dec esi
fidiv [ ebp + edx * 2 - 0x79b25085 ]
int1
fisub [ 0x7b55b477 ]
xor [ edi - 0x56 ] 0x6b
sub [ eax + 0x7b4cbb90 ] edi
and eax 0x5afb4935
setl [ es : edi + 0x4 ]
adc esp [ edx ]
lodsb [ esi ]
add [ ebx + 0x55b4770f ] dh
sti
add ch [ eax ]
xor al 0x77
mov cl 0x56
cwde
outsb
leave
sti
sub ebx edx
jbe rwxdata
push ebp
xchg [ esi + 0x5a ] ch
mov eax [ 0x61e704f8 ]
mov dh 0xb0
rcl [ ebx + 0x67ea9de3 ] 0xa6
0x7874c077 0xd2df
ja rwxdata
mov ah 0xbd
dec edi
outsb
sar dl 0x1
fisubr [ ecx ]
push ss
sub dh al
ja rwxdata
sti
push ebp
sub_40291c
sub eax 0x69b4a6e0
mov [ 0xffffffff98af9135 ] eax
aaa
add eax 0x7fabae57
ficom [ ebp + 0x15 ]
insb
aaa
insb
mov edx 0x3d77e029
shr [ edi - 0x37fac868 ] cl
movsb [ edi ] [ esi ]
or [ ecx + 0x6d53ac4b ] dl
dec ebx
push ss
test ch ah
and al 0x28
loop rwxdata
mov [ eax ] al
jno rwxdata
and dh dh
jpo rwxdata
push cs
stosb [ edi ]
mov edx 0x77f02969
mov ah 0xac
push cs
jle rwxdata
dec ebx
lodsb [ esi ]
add [ ecx ] ebp
pop ecx
cli
push esp
stosd [ edi ]
mov [ edi + 0x2dc33396 ] dl
loopne rwxdata
sar dl 0x1
mov gs [ eax + ecx + 0x2aac4b91 ]
xchg edi eax
jge rwxdata
aaa
add eax 0x9108a4c8
dec ebx
lodsb [ esi ]
push ebx
insd
shl [ edx - 0x7f1f1e7c ] 0x1
xor [ edx + 0x33379789 ] dl
retn
ja rwxdata
cli
add [ esp + edx * 8 - 0x70 ] dl
and ah dh
jpo rwxdata
mov [ edi - 0x6bff54c9 ] edx
or al 0x91
dec ebx
lodsb [ esi ]
mov [ eax ] al
adc edx edi
add [ ecx ] ebp
popad
cmp [ ebp - 0x54c86877 ] ecx
add [ esp + ecx - 0x7753b46f ] dl
add [ ecx ] dl
cli
loopne rwxdata
adc [ edi + 0x6793da21 ] cl
aaa
sub ch [ ebx + 0x6e ]
mov edi 0xc9400ed
xchg ecx eax
shr [ edx + 0x28245c8e ] 0x1
mov ah 0x55
and eax 0x5afb4935
setl [ es : edi + 0x4 ]
adc esp [ edx ]
jpo rwxdata
mov ah 0x69
shr [ ecx ] cl
loopne rwxdata
mov esi 0xb17b4576
shl [ ecx + 0x1 ] 0x1
je rwxdata
cmp edx ebx
[ esi + 0x4f520537 ]
loopne rwxdata
or al 0x91
xor [ eax ] 0x92
mov [ edi + 0x2dc33337 ] edx
dec ebx
in al 0xae
outsb
sar dl 0x1
imul ebp [ ecx ] 0xffffffba
ja rwxdata
dec ebx
and ch [ ebx - 0x69 ]
mov ebp 0xabda51ee
or [ ebx - 0x3d ] 0xffffffce
outsb
sar dl 0x1
pop ecx
jpo rwxdata
mov ds [ esp + 0x28 ]
loop rwxdata
mov edx 0xfbe24b77
sahf
aaa
add eax 0x7717b300
mov ah 0x55
sub edx [ edi - 0x250e8583 ]
and eax 0x7bf62290
outsb
sub_402994
fisub [ 0x7bea2290 ]
outsb
rcl [ ecx ] 0x1
dec eax
fisubr [ ebx - 0x7825c67d ]
cwde
aaa
add eax 0xc24eda52
mov ah 0x55
jpo rwxdata
xchg [ edi ] esi
add eax 0x77e02901
aas
and dh [ ebx + 0x6 ]
mov esp 0x8e2901f5
add cl [ ecx ]
adc [ edi + 0x6793da21 ] cl
aaa
sub ch [ ebx + 0x6e ]
mov edi 0xc9400ed
xchg ecx eax
dec ebx
lodsb [ esi ]
mov [ eax ] al
jno rwxdata
add [ ecx ] ebp
pop ecx
cli
push esp
stosd [ edi ]
mov [ edi + 0x2dc33396 ] dl
loopne rwxdata
mov [ edi - 0x6bff54c9 ] edx
or al 0x91
dec ebx
lodsb [ esi ]
mov [ eax ] al
adc edx edi
add [ ecx ] ebp
popad
cmp [ ebp - 0x54c86877 ] ecx
add [ esp + ecx - 0x7753b46f ] dl
add [ ecx ] dl
cli
sub_402a88
mov esp 0x5a09788
cwde
mov eax fs
ja rwxdata
loop rwxdata
xor eax eax
int1
mov esp 0xdfda0015
ja rwxdata
jpo rwxdata
sub eax esp
daa
fcom [ edi + 0x7b ]
outsb
add edx ebx
dec esi
0xeb7b55b4 0xfa38
rcl [ edi - 0x79 ] cl
aaa
add eax 0x77e02901
aaa
rcl [ edi - 0x79 ] cl
aaa
add eax 0x3666a902
mov al 0x55
jpo rwxdata
xchg edx eax
inc [ ecx ]
sub [ eax - 0x413cb4d7 ] edx
outsb
sar dl 0x1
mov ah [ eax + edi * 8 + 0x74ac4ba0 ]
scasb [ edi ]
mov ebp 0xf4a4c8ca
mov al [ 0x6e7bac4b ]
sar dl 0x1
test [ esp + edi * 8 + 0x7cac4ba0 ] bl
and ecx ecx
cmp al 0x88
push 0x55b477dc
xchg esp eax
bound edx [ ebx + 0x7f ]
and eax 0xb59025ca
cmp eax 0xfad07323
add [ ebx + 0x55b4777b ] dh
xchg esp eax
int3
push eax
add eax 0xfa1d1458
cwde
mov esp 0xfbcc9788
add [ ecx ] ebp
push ebx
cli
cwde
mov esp 0x77a09788
xchg [ ecx + 0x54b9035 ] dh
adc eax 0x6bfaaa6e
sub [ 0xffffffff88bc84ca ] esp
xchg edi eax
aaa
lodsd [ esi ]
cmp bl dl
imul eax [ edi + 0x5b ] 0xffffffac
mov [ edi + 0x656bcb9f ] dl
push ebx
cli
xchg edi eax
sub ecx eax
mov fs [ esp + ebp * 8 + 0x2bac4ba0 ]
jmp 0xffffffffdb30e97c
mov ebp 0xf4940094
mov al [ 0xfffffffff0f6ac4b ]
sub_4034bb
mov eax sub_404637
call sub_404410
sub esp 0x78
push esi
mov esi ecx
push 0x0
call Ordinal_MFC42_1134
pop ecx
mov ecx esi
call Ordinal_MFC42_2621
push 0x0
lea ecx [ ebp - 0x84 ]
call sub_403564
and [ ebp - 0x4 ] 0x0
lea eax [ ebp - 0x84 ]
lea ecx [ ebp - 0x84 ]
mov [ esi + 0x20 ] eax
call Ordinal_MFC42_2514
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x84 ]
call Ordinal_MFC42_641
mov ecx [ ebp - 0xc ]
xor eax eax
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
sub_403564
mov eax sub_40464c
call sub_404410
push ecx
push esi
mov esi ecx
push [ ebp + 0x8 ]
mov [ ebp - 0x10 ] esi
push 0x66
call Ordinal_MFC42_324
and [ ebp - 0x4 ] 0x0
mov [ esi ] rwxdata
call Ordinal_MFC42_1168
mov eax 0x80
push eax
push 0xe
push eax
call Ordinal_MFC42_1146
push eax
call [ LoadIconA@IAT ]
mov ecx [ ebp - 0xc ]
and [ esi + 0x6c ] 0x0
mov [ esi + 0x68 ] eax
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x4
sub_4035c1
mov eax sub_404660
call sub_404410
push ecx
push ebx
push esi
push edi
mov esi ecx
call Ordinal_MFC42_4710
xor edi edi
push edi
push [ esi + 0x20 ]
call [ GetSystemMenu@IAT ]
push eax
call Ordinal_MFC42_2863
mov ebx eax
cmp ebx edi
je rwxdata
push [ esi + 0x68 ]
mov edi [ SendMessageA@IAT ]
mov ebx 0x80
push 0x1
push ebx
push [ esi + 0x20 ]
call edi
push [ esi + 0x68 ]
push 0x0
push ebx
push [ esi + 0x20 ]
call edi
mov ecx [ ebp - 0xc ]
push 0x1
pop eax
pop edi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
leave
retn
lea ecx [ ebp - 0x10 ]
call Ordinal_MFC42_540
push 0x65
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] edi
call Ordinal_MFC42_4160
mov eax [ ebp - 0x10 ]
cmp [ eax - 0x8 ] edi
je rwxdata
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x10 ]
call Ordinal_MFC42_800
push edi
push edi
mov edi [ AppendMenuA@IAT ]
push 0x800
push [ ebx + 0x4 ]
call edi
push [ ebp - 0x10 ]
push 0x10
push 0x0
push [ ebx + 0x4 ]
call edi
sub_403668
mov eax sub_404674
call sub_404410
sub esp 0x60
mov eax [ ebp + 0x8 ]
and eax 0xfff0
cmp eax 0x10
jne rwxdata
call Ordinal_MFC42_2379
lea ecx [ ebp - 0x6c ]
call sub_403523
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x6c ]
call Ordinal_MFC42_2514
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x6c ]
call Ordinal_MFC42_641
jmp rwxdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn 0x8
sub_4036b7
push ebp
mov ebp esp
sub esp 0x64
push esi
mov esi ecx
push [ esi + 0x20 ]
call [ IsIconic@IAT ]
test eax eax
je rwxdata
mov ecx esi
call Ordinal_MFC42_2379
push ebx
push edi
push esi
lea ecx [ ebp - 0x64 ]
call Ordinal_MFC42_470
lea eax [ ebp - 0x64 ]
push 0x0
neg eax
sbb eax eax
and eax [ ebp - 0x60 ]
push eax
push 0x27
push [ esi + 0x20 ]
call [ SendMessageA@IAT ]
mov edi [ GetSystemMetrics@IAT ]
push 0xb
call edi
push 0xc
mov ebx eax
call edi
mov edi eax
lea eax [ ebp - 0x10 ]
push eax
push [ esi + 0x20 ]
call [ GetClientRect@IAT ]
mov eax [ ebp - 0x4 ]
push [ esi + 0x68 ]
sub eax [ ebp - 0xc ]
sub eax edi
inc eax
cdq
sub eax edx
sar eax 0x1
push eax
mov eax [ ebp - 0x8 ]
sub eax [ ebp - 0x10 ]
sub eax ebx
inc eax
cdq
sub eax edx
sar eax 0x1
push eax
push [ ebp - 0x60 ]
call [ DrawIcon@IAT ]
lea ecx [ ebp - 0x64 ]
call Ordinal_MFC42_755
pop edi
pop ebx
jmp rwxdata
push 0x0
mov ecx esi
call Ordinal_MFC42_6215
pop esi
leave
retn
sub_40375c
mov eax sub_4046a0
call sub_404410
sub esp 0xc4
push ebx
push esi
lea eax [ ebp - 0x14 ]
push edi
mov esi ecx
push eax
call Ordinal_MFC42_3811
mov eax [ eax ]
push 0x22
mov [ ebp - 0x1c ] eax
xor ebx ebx
pop ecx
xor eax eax
lea edi [ ebp - 0xcf ]
mov [ ebp - 0xd0 ] bl
[ edi ]
stosw [ edi ]
push rwxdata
lea eax [ ebp - 0xd0 ]
push rwxdata
push eax
call [ sprintf@IAT ]
add esp 0xc
lea ecx [ ebp - 0x10 ]
push rwxdata
call Ordinal_MFC42_537
lea eax [ ebp - 0x18 ]
push rwxdata
push eax
lea ecx [ ebp - 0x1c ]
mov [ ebp - 0x4 ] ebx
call Ordinal_MFC42_2820
push eax
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x1
call Ordinal_MFC42_939
lea ecx [ ebp - 0x18 ]
mov [ ebp - 0x4 ] bl
call Ordinal_MFC42_800
push [ ebp - 0x10 ]
mov ecx esi
call Ordinal_MFC42_6199
push esi
lea ecx [ ebp - 0x44 ]
call Ordinal_MFC42_289
mov edi [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x2
push edi
call strlen
pop ecx
push eax
push edi
mov edi [ TextOutA@IAT ]
push ebx
push ebx
push [ ebp - 0x40 ]
call edi
push esi
lea ecx [ ebp - 0x30 ]
call Ordinal_MFC42_289
mov eax [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x3
push eax
mov [ ebp - 0x14 ] eax
call strlen
pop ecx
push eax
push [ ebp - 0x14 ]
push ebx
push ebx
push [ ebp - 0x2c ]
call edi
mov eax [ esi + 0x6c ]
inc [ esi + 0x64 ]
cmp eax ebx
jne rwxdata
mov edi [ SendMessageA@IAT ]
push ebx
push 0x1
push 0x404
push [ eax + 0x20 ]
call edi
mov eax [ esi + 0x6c ]
push ebx
push ebx
push 0x405
push 0x3e8
mov ecx esi
call Ordinal_MFC42_3092
mov edi [ SendMessageA@IAT ]
push ebx
push 0x1
push 0x402
mov [ esi + 0x6c ] eax
push [ eax + 0x20 ]
call edi
mov eax [ esi + 0x6c ]
push 0x1
push ebx
push 0x406
jmp rwxdata
push [ eax + 0x20 ]
call edi
mov ecx esi
call sub_403920
mov ecx esi
call Ordinal_MFC42_2379
lea ecx [ ebp - 0x30 ]
mov [ ebp - 0x4 ] 0x2
call Ordinal_MFC42_613
lea ecx [ ebp - 0x44 ]
mov [ ebp - 0x4 ] bl
call Ordinal_MFC42_613
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x10 ]
call Ordinal_MFC42_800
mov ecx [ ebp - 0xc ]
pop edi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
leave
retn 0x4
sub_4038e0
push esi
mov esi ecx
call Ordinal_MFC42_2379
cmp eax 0xffffffff
jne rwxdata
push edi
xor edi edi
push edi
push 0x3e8
push 0x1
push [ esi + 0x20 ]
call [ SetTimer@IAT ]
mov [ esi + 0x64 ] edi
mov [ esi + 0x60 ] edi
mov [ esi + 0x70 ] edi
mov [ esi + 0x74 ] edi
xor eax eax
pop edi
or eax eax
jmp rwxdata
pop esi
retn 0x4
sub_403920
push ebp
mov ebp esp
sub esp 0xb4
push esi
mov esi ecx
cmp [ esi + 0x64 ] 0x1
jb rwxdata
pop esi
leave
retn
push edi
push 0x1
push [ esi + 0x20 ]
call [ KillTimer@IAT ]
and [ ebp - 0xb4 ] 0x0
push 0x2c
pop ecx
xor eax eax
lea edi [ ebp - 0xb3 ]
push rwxdata
[ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ ebp - 0xb4 ]
push eax
call [ sprintf@IAT ]
pop ecx
pop ecx
mov ecx esi
call sub_403974
sub_403974
mov eax sub_4046b4
call sub_404410
sub esp 0x68
mov eax [ rwxdata ]
push ebx
push esi
push edi
mov esi ecx
push 0x5
lea edi [ eax - 0x1 ]
pop edx
mov ecx edi
and [ ebp + eax - 0x30 ] 0x0
push 0x1
lea eax [ ebp + eax - 0x30 ]
pop edx
push 0x4
xor ecx ecx
pop ebx
mov bl dl
and bl 0x1
add bl 0x30
mov [ ebp + ecx - 0x30 ] bl
dec ecx
sar edx 0x1
jmp rwxdata
or ecx edx
shl edx 0x1
dec ebx
jne rwxdata
xor ecx 0x5
mov edx edi
test ecx ecx
jl rwxdata
and [ eax ] 0x0
lea ecx [ ebp - 0x74 ]
call sub_403db0
mov edi [ time@IAT ]
and [ ebp - 0x4 ] 0x0
push 0x0
call edi
mov ebx [ srand@IAT ]
push eax
call ebx
pop ecx
pop ecx
call [ rand@IAT ]
push 0x5c
cdq
pop ecx
idiv ecx
lea ecx [ ebp - 0x74 ]
inc edx
push edx
call sub_403f13
push 0x0
mov [ esi + 0x60 ] eax
call edi
push eax
call ebx
pop ecx
pop ecx
call [ rand@IAT ]
push 0x58
cdq
pop ecx
idiv ecx
mov ecx esi
inc edx
push edx
call sub_403c6e
lea ecx [ ebp - 0x74 ]
mov [ esi + 0x74 ] eax
call sub_403fd6
xor ecx ecx
mov [ esi + 0x70 ] eax
cmp [ esi + 0x60 ] ecx
je rwxdata
mov bl cl
and bl 0x1
add bl 0x30
mov [ ebp + edx - 0x30 ] bl
dec edx
sar ecx 0x1
jmp rwxdata
push ecx
call [ ExitProcess@IAT ]
cmp [ esi + 0x74 ] ecx
je rwxdata
test edx edx
jl rwxdata
cmp eax ecx
je rwxdata
push ecx
call edi
push eax
call ebx
pop ecx
pop ecx
call [ rand@IAT ]
cdq
mov ecx 0x8af
idiv ecx
mov ecx esi
add edx 0x457
push edx
call sub_403a9b
sub_403a9b
push ebp
mov ebp esp
sub esp 0xc
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi [ calloc@IAT ]
push edi
mov edi ebx
shl edi 0x2
push edi
mov [ ebp - 0xc ] ecx
push 0x1
call esi
pop ecx
mov [ ebp - 0x8 ] eax
test ebx ebx
pop ecx
jle rwxdata
and [ ebp + 0x8 ] 0x0
test ebx ebx
jle rwxdata
mov ebx eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] eax
mov ecx [ ebp - 0xc ]
call sub_403b43
mov eax [ ebp - 0x8 ]
lea ecx [ eax - 0x4 ]
push edi
push 0x1
call esi
mov [ ebx ] eax
pop ecx
add ebx 0x4
dec [ ebp - 0x4 ]
pop ecx
mov [ eax ] 0x1
jne rwxdata
mov ebx [ ebp + 0x8 ]
inc edx
cmp edx ebx
jl rwxdata
test edx edx
jle rwxdata
cmp [ ebp + 0x8 ] 0x0
jle rwxdata
inc [ ebp + 0x8 ]
add ecx 0x4
cmp [ ebp + 0x8 ] ebx
jl rwxdata
mov eax [ ecx ]
mov esi [ eax + edx * 4 - 0x4 ]
add esi [ eax + edx * 4 ]
mov eax [ ecx + 0x4 ]
mov [ eax + edx * 4 ] esi
xor edx edx
test ebx ebx
jle rwxdata
mov esi [ ebp - 0x8 ]
push [ esi ]
call [ free@IAT ]
add esi 0x4
dec ebx
pop ecx
jne rwxdata
sub_403b43
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
push edi
xor eax eax
lea edi [ ebp - 0xb ]
mov dl [ rwxdata ]
stosd [ edi ]
mov cl [ rwxdata ]
stosd [ edi ]
xor cl [ rwxdata ]
stosb [ edi ]
mov al [ rwxdata ]
add cl 0x5
xor al dl
mov [ ebp - 0xb ] cl
mov [ ebp - 0xc ] al
mov al [ rwxdata ]
mov bl al
mov edi 0x1966
xor bl cl
mov cl al
xor cl dl
mov dl [ rwxdata ]
mov [ ebp - 0x9 ] cl
mov cl [ rwxdata ]
xor cl [ rwxdata ]
mov [ ebp - 0xa ] bl
mov [ ebp - 0x8 ] cl
xor al [ ebp - 0x8 ]
mov cl [ rwxdata ]
mov [ ebp - 0x6 ] al
mov al [ rwxdata ]
xor al [ rwxdata ]
mov bl cl
xor cl [ rwxdata ]
xor bl dl
add al 0x2
mov [ ebp - 0x7 ] bl
xor dl al
mov [ ebp - 0x5 ] cl
mov [ ebp - 0x4 ] al
mov [ ebp - 0x3 ] dl
xor esi esi
push 0x3
pop ecx
idiv ecx
mov cl [ esi + rwxdata ]
mov eax esi
sub cl dl
cdq
sub eax edx
sar eax 0x1
sub cl al
mov [ esi + rwxdata ] cl
push 0x5
pop ecx
idiv ecx
mov al [ esi + rwxdata ]
sub al dl
mov [ esi + rwxdata ] al
jmp rwxdata
mov eax esi
cmp esi 0x9
cdq
jle rwxdata
xor ecx ecx
inc esi
cmp esi edi
jbe rwxdata
mov al [ ecx + rwxdata ]
xor al [ ebp + ecx - 0xc ]
mov eax ecx
push 0xa
cdq
pop esi
idiv esi
mov al [ ebp + edx - 0xc ]
xor al [ ecx + rwxdata ]
jmp rwxdata
cmp ecx 0x9
jle rwxdata
push 0x1967
push rwxdata
push rwxdata
call memcpy
add esp 0xc
lea eax [ rwxdata ]
add eax 0x25
call eax
push 0x0
call [ exit@IAT ]
mov [ ecx + rwxdata ] al
inc ecx
cmp ecx edi
jbe rwxdata
sub_403c6e
push ebp
mov ebp esp
sub esp 0x58
push ebx
push esi
mov esi [ malloc@IAT ]
push edi
push 0x20
call esi
push 0x20
mov ebx eax
call esi
fld [ rwxdata ]
pop ecx
lea esi [ ebp - 0x58 ]
fstp [ ebp - 0x58 ]
pop ecx
lea edi [ ebp - 0x50 ]
push 0xe
mov edx eax
pop ecx
xor eax eax
[ edi ] [ esi ]
fldz
fstp [ ebp - 0x40 ]
push 0x8
mov edi edx
pop ecx
mov [ ebp - 0xc ] edx
[ edi ]
mov [ edx + 0xc ] 0x1
xor ecx ecx
mov [ ebx ] 0x3
fstp st0
fcomp [ rwxdata ]
fnstsw ax
sahf
jbe rwxdata
mov eax [ ebp - 0x8 ]
fld [ eax ]
mov eax [ ebp - 0x10 ]
fld st0
fadd [ eax ]
fst [ ebp - 0x18 ]
fcomp [ esi ]
fnstsw ax
sahf
jae rwxdata
test ecx ecx
jge rwxdata
inc [ ebp - 0x4 ]
add [ ebp - 0x8 ] 0x40
add esi 0x8
add edx 0x4
cmp [ ebp - 0x4 ] 0x7
jle rwxdata
fld [ ebp - 0x18 ]
cmp [ edx ] 0x0
fstp [ esi ]
jne rwxdata
mov eax [ ebx + ecx * 4 ]
and [ ebp - 0x4 ] 0x0
dec ecx
lea esi [ ebp - 0x58 ]
lea edx [ ebp + eax * 8 - 0x58 ]
shl eax 0x9
add eax rwxdata
mov [ ebp - 0x10 ] edx
mov edx [ ebp - 0xc ]
lea edi [ ebx + ecx * 4 ]
mov [ ebp - 0x8 ] eax
mov esi [ free@IAT ]
push ebx
call esi
push [ ebp - 0xc ]
call esi
mov eax [ ebp + 0x8 ]
pop ecx
add eax 0x8
pop ecx
neg eax
sbb eax eax
pop edi
pop esi
pop ebx
neg eax
leave
retn 0x4
mov eax [ ebp - 0x4 ]
inc ecx
add edi 0x4
mov [ edx ] 0x1
mov [ edi ] eax
jmp rwxdata
sub_403d72
mov eax sub_4046c9
call sub_404410
push ecx
push 0x44
call Ordinal_MFC42_823
pop ecx
mov ecx eax
mov [ ebp - 0x10 ] ecx
xor eax eax
cmp ecx eax
mov [ ebp - 0x4 ] eax
je rwxdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
call sub_403db0
sub_403e18
push ebp
mov ebp esp
push esi
xor esi esi
xor eax eax
cmp [ ebp + 0xc ] esi
jle rwxdata
pop esi
pop ebp
retn 0xc
mov ecx [ ebp + 0x8 ]
movsx ecx [ esi + ecx ]
lea edx [ ecx - 0x30 ]
cmp edx 0x9
jle rwxdata
cmp edx 0x17
cmp edx 0x17
jge rwxdata
imul eax [ ebp + 0x10 ]
lea eax [ eax + ecx - 0x30 ]
imul eax [ ebp + 0x10 ]
lea eax [ eax + ecx - 0x57 ]
jmp rwxdata
jle rwxdata
imul eax [ ebp + 0x10 ]
lea eax [ eax + ecx - 0x37 ]
jmp rwxdata
inc esi
cmp esi [ ebp + 0xc ]
jl rwxdata
sub_403e79
push ebp
mov ebp esp
push ebx
push esi
mov esi [ strchr@IAT ]
push edi
mov edi [ ebp + 0x8 ]
push 0x3c
push edi
call esi
pop ecx
test eax eax
pop ecx
je rwxdata
xor eax eax
jmp rwxdata
sub eax edi
mov [ ebp + 0x8 ] eax
je rwxdata
pop edi
pop esi
pop ebx
pop ebp
retn 0x8
xor ebx ebx
test eax eax
jle rwxdata
push 0x3e
push edi
call esi
pop ecx
test eax eax
pop ecx
je rwxdata
movsx eax [ ebx + edi ]
push eax
call [ isdigit@IAT ]
test eax eax
pop ecx
je rwxdata
mov ebx [ ebp + 0xc ]
mov ecx edi
sub ecx eax
add ecx [ ebp + 0xc ]
sub ebx ecx
lea esi [ ebx + 0x1 ]
inc ebx
cmp ebx [ ebp + 0x8 ]
jl rwxdata
mov eax [ ebp + 0x8 ]
lea esi [ eax + 0x1 ]
movsx eax [ esi + edi ]
push eax
call [ isdigit@IAT ]
test eax eax
pop ecx
je rwxdata
push 0x1
pop eax
movsx eax [ esi + edi ]
push eax
call [ isxdigit@IAT ]
test eax eax
pop ecx
je rwxdata
inc esi
jmp rwxdata
inc esi
jmp rwxdata
cmp esi [ ebp + 0xc ]
jge rwxdata
cmp esi ebx
jge rwxdata
sub_403f13
push ebp
mov ebp esp
sub esp 0x34
push ebx
push esi
push edi
mov esi rwxdata
lea edi [ ebp - 0x20 ]
lea eax [ ebp - 0x34 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsb [ edi ] [ esi ]
lea esi [ ebp - 0x20 ]
lea edi [ ebp - 0x34 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov ebx ecx
push eax
movsb [ edi ] [ esi ]
call strlen
mov esi [ strchr@IAT ]
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x34 ]
push 0x3c
push eax
call esi
mov edi eax
lea eax [ ebp - 0x34 ]
push 0x3e
push eax
call esi
add esp 0x14
mov esi eax
lea eax [ ebp - 0x34 ]
mov ecx ebx
push [ ebp - 0x4 ]
push eax
call sub_403e79
test eax eax
je rwxdata
push 0x1
pop eax
mov eax edi
lea ecx [ ebp - 0x34 ]
sub eax ecx
mov ecx ebx
push eax
lea eax [ ebp - 0x34 ]
push eax
call sub_403df5
mov [ ebp - 0x8 ] eax
mov eax [ ebp - 0x4 ]
sub eax esi
mov ecx ebx
lea eax [ ebp + eax - 0x35 ]
push eax
lea eax [ esi + 0x1 ]
push eax
call sub_403df5
push [ ebp - 0x8 ]
sub esi edi
dec esi
inc edi
push esi
push edi
mov ecx ebx
mov [ ebp - 0xc ] eax
call sub_403e18
push [ ebp - 0xc ]
mov ecx ebx
push eax
call sub_403e65
mov eax [ ebp + 0x8 ]
xor ecx ecx
sub eax [ ebp - 0x4 ]
cmp eax 0x64
setle cl
mov eax ecx
jmp rwxdata
pop edi
pop esi
pop ebx
leave
retn 0x4
sub_403fd6
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push edi
push 0x0
call [ time@IAT ]
push eax
call [ srand@IAT ]
mov esi [ rand@IAT ]
call esi
cdq
mov ecx 0x22b8
idiv ecx
mov edi edx
add edi 0x8ae
call esi
cdq
mov ecx 0x3e7
mov ebx [ malloc@IAT ]
idiv ecx
and [ ebp - 0x4 ] 0x0
mov esi edx
add esi 0xc8
mov eax esi
shl eax 0x2
push eax
call ebx
add esp 0xc
mov [ ebp - 0x8 ] eax
test esi esi
je rwxdata
mov edi [ free@IAT ]
je rwxdata
mov [ ebp - 0xc ] eax
mov [ ebp - 0x10 ] esi
push [ ebp - 0x8 ]
call edi
pop ecx
call [ rand@IAT ]
cdq
mov ecx 0x270f
pop edi
idiv ecx
mov eax [ ebp - 0x4 ]
pop esi
pop ebx
lea eax [ edx + eax + 0x1 ]
neg eax
sbb eax eax
neg eax
leave
retn
mov ebx [ ebp - 0x8 ]
mov eax edi
shl eax 0x2
push eax
call ebx
pop ecx
mov ecx [ ebp - 0xc ]
add [ ebp - 0xc ] 0x4
dec [ ebp - 0x10 ]
mov [ ecx ] eax
jne rwxdata
test esi esi
je rwxdata
push [ ebx ]
call edi
add ebx 0x4
dec esi
pop ecx
jne rwxdata
mov ecx [ ebp - 0x8 ]
mov [ ebp - 0x10 ] esi
add ecx 0x4
dec [ ebp - 0x10 ]
jne rwxdata
mov eax [ ecx ]
mov edx edi
test edi edi
je rwxdata
test esi esi
je rwxdata
mov ebx [ eax ]
add eax 0x4
add [ ebp - 0x4 ] ebx
dec edx
jne rwxdata
mov ecx [ ebp - 0x8 ]
mov [ ebp - 0x10 ] esi
add ecx 0x4
dec [ ebp - 0x10 ]
jne rwxdata
mov eax [ ecx ]
mov edx edi
test edi edi
je rwxdata
test esi esi
mov ebx [ eax ]
add eax 0x4
add [ ebp - 0x4 ] ebx
dec edx
jne rwxdata
_start
push ebp
mov ebp esp
push 0xffffffff
push rwxdata
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x68
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x4 ] ebx
push 0x2
call [ __set_app_type@IAT ]
pop ecx
or [ rwxdata ] 0xffffffff
or [ rwxdata ] 0xffffffff
call [ __p__fmode@IAT ]
mov ecx [ rwxdata ]
mov [ eax ] ecx
call [ __p__commode@IAT ]
mov ecx [ rwxdata ]
mov [ eax ] ecx
mov eax [ _adjust_fdiv@IAT ]
mov eax [ eax ]
mov [ rwxdata ] eax
call sub_4045c1
cmp [ rwxdata ] ebx
jne rwxdata
call sub_4045ac
push rwxdata
push rwxdata
call _initterm
mov eax [ rwxdata ]
mov [ ebp - 0x6c ] eax
lea eax [ ebp - 0x6c ]
push eax
push [ rwxdata ]
lea eax [ ebp - 0x64 ]
push eax
lea eax [ ebp - 0x70 ]
push eax
lea eax [ ebp - 0x60 ]
push eax
call [ __getmainargs@IAT ]
push rwxdata
push rwxdata
call _initterm
add esp 0x24
mov eax [ _acmdln@IAT ]
mov esi [ eax ]
mov [ ebp - 0x74 ] esi
cmp [ esi ] 0x22
jne rwxdata
push sub_4045be
call [ __setusermatherr@IAT ]
pop ecx
cmp [ esi ] 0x20
jbe rwxdata
inc esi
mov [ ebp - 0x74 ] esi
mov al [ esi ]
cmp al bl
je rwxdata
mov al [ esi ]
cmp al bl
je rwxdata
inc esi
mov [ ebp - 0x74 ] esi
jmp rwxdata
cmp [ esi ] 0x22
jne rwxdata
cmp al 0x22
jne rwxdata
mov [ ebp - 0x30 ] ebx
lea eax [ ebp - 0x5c ]
push eax
call [ GetStartupInfoA@IAT ]
test [ ebp - 0x30 ] 0x1
je rwxdata
cmp al 0x20
jbe rwxdata
inc esi
mov [ ebp - 0x74 ] esi
push 0xa
pop eax
movzx eax [ ebp - 0x2c ]
jmp rwxdata
push eax
push esi
push ebx
push ebx
call [ GetModuleHandleA@IAT ]
push eax
call sub_4045ce
mov [ ebp - 0x68 ] eax
push eax
call [ exit@IAT ]
sub_4045e6
call Ordinal_MFC42_1168
mov ecx [ esp + 0x4 ]
mov edx [ esp + 0x8 ]
test ecx ecx
mov [ eax + 0x14 ] cl
mov [ eax + 0x1040 ] edx
jne rwxdata
push 0x1
pop eax
retn 0x8
push 0xfffffffd
call [ _setmbcp@IAT ]
pop ecx
sub_401465
sar dl 0x1
add edx esp
pop esi
add esi [ ebp + 0x37977b55 ]
add eax 0x3b5be200
dec edx
lodsb [ esi ]
mov [ esi - 0x30 ] ch
cli
add ebx esp
pop esi
iretd
sub_4029e7
mov ch 0x21
iretd
sub_40343e
inc eax
add [ esi + 0x4045 ] cl
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ eax ] al
add [ ecx + Ordinal_MFC42_4274@IAT ] ah
retn
sub_403456
mov eax rwxdata
retn
sub_40345c
push esi
mov esi ecx
push 0x0
call Ordinal_MFC42_561
mov [ esi ] rwxdata
mov eax esi
pop esi
retn
sub_403470
push esi
mov esi ecx
call sub_40348c
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
pop ecx
sub_40348c
jmp Ordinal_MFC42_815
sub_403491
call sub_40349b
jmp sub_4034a5
sub_40349b
mov ecx rwxdata
jmp sub_40345c
sub_4034a5
push sub_4034b1
call sub_4043f8
pop ecx
retn
sub_4034b1
mov ecx rwxdata
jmp sub_40348c
sub_40351d
jmp Ordinal_MFC42_641
sub_403522
retn
sub_403523
push esi
push 0x0
mov esi ecx
push 0x64
call Ordinal_MFC42_324
mov [ esi ] rwxdata
mov eax esi
pop esi
retn
sub_403539
push esi
mov esi ecx
call sub_40351d
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
pop ecx
sub_403555
retn 0x4
sub_403558
mov eax [ Ordinal_MFC42_4234@IAT ]
retn
sub_40355e
mov eax rwxdata
retn
sub_4035bb
mov eax rwxdata
retn
sub_403758
mov eax [ ecx + 0x68 ]
retn
sub_4038db
jmp Ordinal_MFC42_2379
sub_403918
call Ordinal_MFC42_2379
retn 0x4
sub_403d5a
push 0x0
push [ ecx + 0x20 ]
call [ EnableWindow@IAT ]
retn
sub_403d66
push 0x1
push [ ecx + 0x20 ]
call [ EnableWindow@IAT ]
retn
sub_403da4
mov eax [ Ordinal_MFC42_1945@IAT ]
retn
sub_403daa
mov eax rwxdata
retn
sub_403db0
push esi
mov esi ecx
call Ordinal_MFC42_560
mov [ esi ] rwxdata
mov eax esi
pop esi
retn
sub_403dc2
push esi
mov esi ecx
call sub_403dde
test [ esp + 0x8 ] 0x1
je rwxdata
mov eax esi
pop esi
retn 0x4
push esi
call Ordinal_MFC42_825
pop ecx
sub_403dde
mov [ ecx ] rwxdata
jmp Ordinal_MFC42_813
sub_403de9
mov eax [ Ordinal_MFC42_4273@IAT ]
retn
sub_403def
mov eax rwxdata
retn
sub_403e65
mov eax [ esp + 0x4 ]
retn 0x8
cdq
idiv [ esp + 0x8 ]
jmp rwxdata
cmp eax [ esp + 0x8 ]
jl rwxdata
sub_4040d9
push [ esp + 0x4 ]
call Ordinal_MFC42_825
pop ecx
retn 0x4
sub_4040e6
retn 0x4
Ordinal_MFC42_4673
jmp [ Ordinal_MFC42_4673@IAT ]
Ordinal_MFC42_6375
jmp [ Ordinal_MFC42_6375@IAT ]
Ordinal_MFC42_4486
jmp [ Ordinal_MFC42_4486@IAT ]
Ordinal_MFC42_2554
jmp [ Ordinal_MFC42_2554@IAT ]
Ordinal_MFC42_2512
jmp [ Ordinal_MFC42_2512@IAT ]
Ordinal_MFC42_5731
jmp [ Ordinal_MFC42_5731@IAT ]
Ordinal_MFC42_3922
jmp [ Ordinal_MFC42_3922@IAT ]
Ordinal_MFC42_1089
jmp [ Ordinal_MFC42_1089@IAT ]
Ordinal_MFC42_5199
jmp [ Ordinal_MFC42_5199@IAT ]
Ordinal_MFC42_2396
jmp [ Ordinal_MFC42_2396@IAT ]
Ordinal_MFC42_3346
jmp [ Ordinal_MFC42_3346@IAT ]
Ordinal_MFC42_5300
jmp [ Ordinal_MFC42_5300@IAT ]
Ordinal_MFC42_5302
jmp [ Ordinal_MFC42_5302@IAT ]
Ordinal_MFC42_2725
jmp [ Ordinal_MFC42_2725@IAT ]
Ordinal_MFC42_4079
jmp [ Ordinal_MFC42_4079@IAT ]
Ordinal_MFC42_4698
jmp [ Ordinal_MFC42_4698@IAT ]
Ordinal_MFC42_5307
jmp [ Ordinal_MFC42_5307@IAT ]
Ordinal_MFC42_5289
jmp [ Ordinal_MFC42_5289@IAT ]
Ordinal_MFC42_5714
jmp [ Ordinal_MFC42_5714@IAT ]
Ordinal_MFC42_2982
jmp [ Ordinal_MFC42_2982@IAT ]
Ordinal_MFC42_3147
jmp [ Ordinal_MFC42_3147@IAT ]
Ordinal_MFC42_3259
jmp [ Ordinal_MFC42_3259@IAT ]
Ordinal_MFC42_4465
jmp [ Ordinal_MFC42_4465@IAT ]
Ordinal_MFC42_3136
jmp [ Ordinal_MFC42_3136@IAT ]
Ordinal_MFC42_3262
jmp [ Ordinal_MFC42_3262@IAT ]
Ordinal_MFC42_2985
jmp [ Ordinal_MFC42_2985@IAT ]
Ordinal_MFC42_3081
jmp [ Ordinal_MFC42_3081@IAT ]
Ordinal_MFC42_2976
jmp [ Ordinal_MFC42_2976@IAT ]
Ordinal_MFC42_3830
jmp [ Ordinal_MFC42_3830@IAT ]
Ordinal_MFC42_3831
jmp [ Ordinal_MFC42_3831@IAT ]
Ordinal_MFC42_3825
jmp [ Ordinal_MFC42_3825@IAT ]
Ordinal_MFC42_3079
jmp [ Ordinal_MFC42_3079@IAT ]
Ordinal_MFC42_4080
jmp [ Ordinal_MFC42_4080@IAT ]
Ordinal_MFC42_4622
jmp [ Ordinal_MFC42_4622@IAT ]
Ordinal_MFC42_4424
jmp [ Ordinal_MFC42_4424@IAT ]
Ordinal_MFC42_3738
jmp [ Ordinal_MFC42_3738@IAT ]
Ordinal_MFC42_561
jmp [ Ordinal_MFC42_561@IAT ]
Ordinal_MFC42_825
jmp [ Ordinal_MFC42_825@IAT ]
Ordinal_MFC42_815
jmp [ Ordinal_MFC42_815@IAT ]
Ordinal_MFC42_641
jmp [ Ordinal_MFC42_641@IAT ]
Ordinal_MFC42_2514
jmp [ Ordinal_MFC42_2514@IAT ]
Ordinal_MFC42_2621
jmp [ Ordinal_MFC42_2621@IAT ]
Ordinal_MFC42_1134
jmp [ Ordinal_MFC42_1134@IAT ]
Ordinal_MFC42_5265
jmp [ Ordinal_MFC42_5265@IAT ]
Ordinal_MFC42_4376
jmp [ Ordinal_MFC42_4376@IAT ]
Ordinal_MFC42_4853
jmp [ Ordinal_MFC42_4853@IAT ]
Ordinal_MFC42_4998
jmp [ Ordinal_MFC42_4998@IAT ]
Ordinal_MFC42_4710
jmp [ Ordinal_MFC42_4710@IAT ]
Ordinal_MFC42_6052
jmp [ Ordinal_MFC42_6052@IAT ]
Ordinal_MFC42_4078
jmp [ Ordinal_MFC42_4078@IAT ]
Ordinal_MFC42_1775
jmp [ Ordinal_MFC42_1775@IAT ]
Ordinal_MFC42_4407
jmp [ Ordinal_MFC42_4407@IAT ]
Ordinal_MFC42_5241
jmp [ Ordinal_MFC42_5241@IAT ]
Ordinal_MFC42_2385
jmp [ Ordinal_MFC42_2385@IAT ]
Ordinal_MFC42_5163
jmp [ Ordinal_MFC42_5163@IAT ]
Ordinal_MFC42_6374
jmp [ Ordinal_MFC42_6374@IAT ]
Ordinal_MFC42_4353
jmp [ Ordinal_MFC42_4353@IAT ]
Ordinal_MFC42_5280
jmp [ Ordinal_MFC42_5280@IAT ]
Ordinal_MFC42_3798
jmp [ Ordinal_MFC42_3798@IAT ]
Ordinal_MFC42_4837
jmp [ Ordinal_MFC42_4837@IAT ]
Ordinal_MFC42_4441
jmp [ Ordinal_MFC42_4441@IAT ]
Ordinal_MFC42_2648
jmp [ Ordinal_MFC42_2648@IAT ]
Ordinal_MFC42_2055
jmp [ Ordinal_MFC42_2055@IAT ]
Ordinal_MFC42_6376
jmp [ Ordinal_MFC42_6376@IAT ]
Ordinal_MFC42_3749
jmp [ Ordinal_MFC42_3749@IAT ]
Ordinal_MFC42_5065
jmp [ Ordinal_MFC42_5065@IAT ]
Ordinal_MFC42_1727
jmp [ Ordinal_MFC42_1727@IAT ]
Ordinal_MFC42_5261
jmp [ Ordinal_MFC42_5261@IAT ]
Ordinal_MFC42_2446
jmp [ Ordinal_MFC42_2446@IAT ]
Ordinal_MFC42_2124
jmp [ Ordinal_MFC42_2124@IAT ]
Ordinal_MFC42_5277
jmp [ Ordinal_MFC42_5277@IAT ]
Ordinal_MFC42_4627
jmp [ Ordinal_MFC42_4627@IAT ]
Ordinal_MFC42_4425
jmp [ Ordinal_MFC42_4425@IAT ]
Ordinal_MFC42_3597
jmp [ Ordinal_MFC42_3597@IAT ]
Ordinal_MFC42_324
jmp [ Ordinal_MFC42_324@IAT ]
Ordinal_MFC42_1146
jmp [ Ordinal_MFC42_1146@IAT ]
Ordinal_MFC42_1168
jmp [ Ordinal_MFC42_1168@IAT ]
Ordinal_MFC42_800
jmp [ Ordinal_MFC42_800@IAT ]
Ordinal_MFC42_4160
jmp [ Ordinal_MFC42_4160@IAT ]
Ordinal_MFC42_540
jmp [ Ordinal_MFC42_540@IAT ]
Ordinal_MFC42_2863
jmp [ Ordinal_MFC42_2863@IAT ]
Ordinal_MFC42_2379
jmp [ Ordinal_MFC42_2379@IAT ]
Ordinal_MFC42_6215
jmp [ Ordinal_MFC42_6215@IAT ]
Ordinal_MFC42_755
jmp [ Ordinal_MFC42_755@IAT ]
Ordinal_MFC42_470
jmp [ Ordinal_MFC42_470@IAT ]
Ordinal_MFC42_613
jmp [ Ordinal_MFC42_613@IAT ]
Ordinal_MFC42_3092
jmp [ Ordinal_MFC42_3092@IAT ]
Ordinal_MFC42_289
jmp [ Ordinal_MFC42_289@IAT ]
Ordinal_MFC42_6199
jmp [ Ordinal_MFC42_6199@IAT ]
Ordinal_MFC42_939
jmp [ Ordinal_MFC42_939@IAT ]
Ordinal_MFC42_2820
jmp [ Ordinal_MFC42_2820@IAT ]
Ordinal_MFC42_537
jmp [ Ordinal_MFC42_537@IAT ]
Ordinal_MFC42_3811
jmp [ Ordinal_MFC42_3811@IAT ]
Ordinal_MFC42_823
jmp [ Ordinal_MFC42_823@IAT ]
Ordinal_MFC42_4589
jmp [ Ordinal_MFC42_4589@IAT ]
Ordinal_MFC42_4588
jmp [ Ordinal_MFC42_4588@IAT ]
Ordinal_MFC42_4899
jmp [ Ordinal_MFC42_4899@IAT ]
Ordinal_MFC42_4370
jmp [ Ordinal_MFC42_4370@IAT ]
Ordinal_MFC42_4892
jmp [ Ordinal_MFC42_4892@IAT ]
Ordinal_MFC42_5076
jmp [ Ordinal_MFC42_5076@IAT ]
Ordinal_MFC42_4341
jmp [ Ordinal_MFC42_4341@IAT ]
Ordinal_MFC42_4349
jmp [ Ordinal_MFC42_4349@IAT ]
Ordinal_MFC42_4723
jmp [ Ordinal_MFC42_4723@IAT ]
Ordinal_MFC42_4890
jmp [ Ordinal_MFC42_4890@IAT ]
Ordinal_MFC42_4531
jmp [ Ordinal_MFC42_4531@IAT ]
Ordinal_MFC42_4545
jmp [ Ordinal_MFC42_4545@IAT ]
Ordinal_MFC42_4543
jmp [ Ordinal_MFC42_4543@IAT ]
Ordinal_MFC42_4526
jmp [ Ordinal_MFC42_4526@IAT ]
Ordinal_MFC42_4529
jmp [ Ordinal_MFC42_4529@IAT ]
Ordinal_MFC42_4524
jmp [ Ordinal_MFC42_4524@IAT ]
Ordinal_MFC42_4964
jmp [ Ordinal_MFC42_4964@IAT ]
Ordinal_MFC42_4961
jmp [ Ordinal_MFC42_4961@IAT ]
Ordinal_MFC42_4108
jmp [ Ordinal_MFC42_4108@IAT ]
Ordinal_MFC42_6055
jmp [ Ordinal_MFC42_6055@IAT ]
Ordinal_MFC42_1776
jmp [ Ordinal_MFC42_1776@IAT ]
Ordinal_MFC42_5240
jmp [ Ordinal_MFC42_5240@IAT ]
Ordinal_MFC42_5290
jmp [ Ordinal_MFC42_5290@IAT ]
Ordinal_MFC42_3748
jmp [ Ordinal_MFC42_3748@IAT ]
Ordinal_MFC42_1726
jmp [ Ordinal_MFC42_1726@IAT ]
Ordinal_MFC42_5260
jmp [ Ordinal_MFC42_5260@IAT ]
Ordinal_MFC42_4432
jmp [ Ordinal_MFC42_4432@IAT ]
Ordinal_MFC42_560
jmp [ Ordinal_MFC42_560@IAT ]
Ordinal_MFC42_813
jmp [ Ordinal_MFC42_813@IAT ]
sub_4043cc
cmp [ rwxdata ] 0xffffffff
jne rwxdata
push rwxdata
push rwxdata
push [ esp + 0xc ]
call __dllonexit
add esp 0xc
retn
push [ esp + 0x4 ]
call [ _onexit@IAT ]
pop ecx
retn
sub_4043f8
push [ esp + 0x4 ]
call sub_4043cc
neg eax
sbb eax eax
pop ecx
neg eax
dec eax
retn
__CxxFrameHandler
jmp [ __CxxFrameHandler@IAT ]
sub_404410
push 0xffffffff
push eax
mov eax [ fs : 0x0 ]
push eax
mov eax [ esp + 0xc ]
mov [ fs : 0x0 ] esp
mov [ esp + 0xc ] ebp
lea ebp [ esp + 0xc ]
push eax
retn
strlen
jmp [ strlen@IAT ]
memcpy
jmp [ memcpy@IAT ]
__dllonexit
jmp [ __dllonexit@IAT ]
_XcptFilter
jmp [ _XcptFilter@IAT ]
_initterm
jmp [ _initterm@IAT ]
sub_4045ac
push 0x30000
push 0x10000
call _controlfp
pop ecx
pop ecx
retn
sub_4045be
xor eax eax
retn
sub_4045c1
retn
_except_handler3
jmp [ _except_handler3@IAT ]
_controlfp
jmp [ _controlfp@IAT ]
sub_4045ce
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
call Ordinal_MFC42_1576
retn 0x10
j_sub_404614
jmp sub_404614
sub_404614
push 0x600
push 0x0
call sub_4045e6
mov [ rwxdata ] al
retn
Ordinal_MFC42_1576
jmp [ Ordinal_MFC42_1576@IAT ]
sub_40462c
lea ecx [ ebp - 0x84 ]
jmp sub_40351d
sub_404637
mov eax rwxdata
jmp __CxxFrameHandler
sub_404644
mov ecx [ ebp - 0x10 ]
jmp Ordinal_MFC42_641
sub_40464c
mov eax rwxdata
jmp __CxxFrameHandler
sub_404658
lea ecx [ ebp - 0x10 ]
jmp Ordinal_MFC42_800
sub_404660
mov eax rwxdata
jmp __CxxFrameHandler
sub_40466c
lea ecx [ ebp - 0x6c ]
jmp sub_40351d
sub_404674
mov eax rwxdata
jmp __CxxFrameHandler
sub_404680
lea ecx [ ebp - 0x10 ]
jmp Ordinal_MFC42_800
sub_404688
lea ecx [ ebp - 0x18 ]
jmp Ordinal_MFC42_800
sub_404690
lea ecx [ ebp - 0x44 ]
jmp Ordinal_MFC42_613
sub_404698
lea ecx [ ebp - 0x30 ]
jmp Ordinal_MFC42_613
sub_4046a0
mov eax rwxdata
jmp __CxxFrameHandler
sub_4046ac
lea ecx [ ebp - 0x74 ]
jmp sub_403dde
sub_4046b4
mov eax rwxdata
jmp __CxxFrameHandler
sub_4046c0
push [ ebp - 0x10 ]
call sub_4040d9
retn
sub_4046c9
mov eax rwxdata
jmp __CxxFrameHandler
sub_4046fb
[ esi + eax * 2 ]
sub_404773
[ esi + eax * 2 + 0x40 ]
sub_4047db
[ esi + eax * 2 + 0x5200040 ]
