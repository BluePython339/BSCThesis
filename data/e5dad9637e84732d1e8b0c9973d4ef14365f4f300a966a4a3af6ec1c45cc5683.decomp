sub_140001000
sub rsp 0x2a8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x290 ] rax
lea rcx [ rsp + 0x31 ]
xor edx edx
mov r8d 0x12b
mov [ rsp + 0x30 ] 0x0
call sub_140004920
lea r8 [ rsp + 0x20 ]
mov edx 0x1a
xor ecx ecx
call [ SHGetSpecialFolderLocation@IAT ]
test eax eax
js r-xdata
lea rcx [ rsp + 0x161 ]
xor edx edx
mov r8d 0x12b
mov [ rsp + 0x160 ] 0x0
call sub_140004920
lea r9 [ rsp + 0x30 ]
lea r8 [ r--data ]
lea rcx [ rsp + 0x160 ]
mov edx 0x12c
call sub_140004480
lea rcx [ rsp + 0x160 ]
call sub_140001880
mov rcx [ rsp + 0x290 ]
xor rcx rsp
call sub_140004460
add rsp 0x2a8
retn
mov rcx [ rsp + 0x20 ]
lea rdx [ rsp + 0x30 ]
call [ SHGetPathFromIDListA@IAT ]
sub_1400010c0
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rbp
push rdi
push r12
push r13
sub rsp 0x20
mov rdi [ rcx ]
xor r10d r10d
mov rbp rcx
cmp [ rdi + 0xe ] r10d
jbe r-xdata
mov eax [ rdi + 0xa ]
lea r12 [ rdi + 0xa ]
mov ecx eax
mov [ rsp + 0x40 ] eax
call j_sub_140004864
mov r9d [ rdi + 0xe ]
lea r8 [ rdi + 0x12 ]
lea rdx [ rsp + 0x40 ]
mov rcx rax
mov r13 rax
call sub_140001aa0
test eax eax
jne r-xdata
lea r9 [ rdi + 0x12 ]
nop [ rax + rax ] ax
xor eax eax
mov ecx [ rsp + 0x40 ]
mov [ rsp + 0x48 ] rsi
add ecx 0x12
mov ebx ecx
call j_sub_140004864
mov r8d ebx
mov rcx rax
xor edx edx
mov rsi rax
call sub_140004920
mov rdx rsi
mov [ rbp ] rsi
sub rdx rdi
nop [ rax ] eax
movzx edx [ r9 ]
inc r10d
inc r9
xor dl 0x36
movzx eax dl
shr dl 0x4
shl al 0x4
add al dl
mov [ r9 - 0x1 ] al
cmp r10d [ rdi + 0xe ]
jb r-xdata
movzx ecx [ rdi ]
inc rdi
mov [ rdx + rdi - 0x1 ] cl
test cl cl
jne r-xdata
mov eax [ r12 ]
lea rcx [ rsi + 0x12 ]
mov rdx r13
mov [ rsi + 0xa ] eax
mov eax [ rsp + 0x40 ]
mov [ rsi + 0xe ] eax
mov r8d [ rsp + 0x40 ]
call sub_140004e50
mov rsi [ rsp + 0x48 ]
mov eax 0x1
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
sub_1400011c0
mov [ rsp + 0x10 ] rbx
push rbp
lea rbp [ rsp - 0x7a0 ]
sub rsp 0x8a0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x790 ] rax
call [ GetInputState@IAT ]
call [ GetCurrentThreadId@IAT ]
xor r9d r9d
xor r8d r8d
xor edx edx
mov ecx eax
call [ PostThreadMessageA@IAT ]
lea rcx [ rbp - 0x20 ]
xor r9d r9d
xor r8d r8d
xor edx edx
call [ GetMessageA@IAT ]
lea rcx [ r--data ]
call [ GetModuleHandleA@IAT ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov [ rw-data ] rax
call sub_140001000
lea rcx [ rbp + 0x571 ]
xor edx edx
mov r8d 0x103
mov [ rbp + 0x570 ] 0x0
call sub_140004920
lea rdx [ rbp + 0x570 ]
mov r8d 0x103
xor ecx ecx
call [ GetModuleFileNameA@IAT ]
lea rcx [ rbp + 0x351 ]
xor edx edx
mov r8d 0x103
mov [ rbp + 0x350 ] 0x0
call sub_140004920
lea rcx [ rbp + 0x461 ]
xor edx edx
mov r8d 0x103
mov [ rbp + 0x460 ] 0x0
call sub_140004920
lea r11 [ rw-data ]
lea rcx [ rsp + 0x50 ]
mov [ rsp + 0x50 ] r11
call sub_1400010c0
mov rbx [ rsp + 0x50 ]
test rbx rbx
jne r-xdata
lea rcx [ rbp + 0x221 ]
xor edx edx
mov r8d 0x12b
mov [ rsp + 0x8b0 ] rdi
mov [ rbp + 0x220 ] 0x0
call sub_140004920
lea r8 [ rsp + 0x50 ]
mov edx 0x1a
xor ecx ecx
call [ SHGetSpecialFolderLocation@IAT ]
test eax eax
js r-xdata
xor eax eax
mov rcx [ rbp + 0x790 ]
xor rcx rsp
call sub_140004460
mov rbx [ rsp + 0x8b8 ]
add rsp 0x8a0
pop rbp
retn
lea r9 [ rbp + 0x460 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x220 ]
xor r8d r8d
call [ GetTempFileNameA@IAT ]
mov edx [ rbx + 0x16 ]
lea rcx [ rbx + 0x1a ]
lea r8 [ rbp + 0x460 ]
call sub_140001530
mov edi [ rbx + 0x16 ]
lea rcx [ rbp + 0x221 ]
xor edx edx
mov r8d 0x12b
mov [ rbp + 0x220 ] 0x0
call sub_140004920
lea r8 [ rsp + 0x50 ]
mov edx 0x1a
xor ecx ecx
call [ SHGetSpecialFolderLocation@IAT ]
test eax eax
js r-xdata
mov rcx [ rsp + 0x50 ]
lea rdx [ rbp + 0x220 ]
call [ SHGetPathFromIDListA@IAT ]
lea r9 [ rbp + 0x350 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x220 ]
xor r8d r8d
call [ GetTempFileNameA@IAT ]
mov edx [ rdi + rbx + 0x1e ]
lea rcx [ rdi + rbx + 0x22 ]
lea r8 [ rbp + 0x350 ]
call sub_140001530
lea rcx [ rbp + 0x11 ]
xor edx edx
mov r8d 0x103
mov [ rbp + 0x10 ] 0x0
call sub_140004920
lea rcx [ rbp + 0x114 ]
xor edx edx
mov r8d 0x104
call sub_140004920
lea rdx [ rbp + 0x10 ]
lea rcx [ rbp + 0x570 ]
mov r9d 0x1
mov r8d 0x208
call sub_1400018a0
mov rdi [ rsp + 0x8b0 ]
test eax eax
je r-xdata
mov rcx [ rsp + 0x50 ]
lea rdx [ rbp + 0x220 ]
call [ SHGetPathFromIDListA@IAT ]
lea rdx [ rbp + 0x460 ]
lea rcx [ rbp + 0x10 ]
mov r8d 0x103
call sub_140004550
lea r8 [ rbp + 0x10 ]
lea rdx [ rbp + 0x350 ]
mov r9d 0x208
xor ecx ecx
mov [ rsp + 0x20 ] 0x1
call sub_1400015f0
xor edx edx
lea rcx [ rsp + 0x78 ]
lea r8d [ rdx + 0x60 ]
call sub_140004920
xor eax eax
xor ebx ebx
lea rcx [ rbp + 0x681 ]
xor edx edx
mov r8d 0x103
mov [ rsp + 0x58 ] rbx
mov [ rsp + 0x60 ] rax
mov [ rsp + 0x68 ] rax
mov [ rsp + 0x70 ] 0x68
mov [ rbp - 0x50 ] bx
mov [ rbp + 0x680 ] al
call sub_140004920
lea r11 [ rbp + 0x570 ]
lea r9 [ rbp + 0x350 ]
lea r8 [ r--data ]
lea rcx [ rbp + 0x680 ]
mov edx 0x103
mov [ rsp + 0x20 ] r11
call sub_140004480
lea r11 [ rsp + 0x58 ]
mov [ rsp + 0x48 ] r11
lea rax [ rsp + 0x70 ]
lea rdx [ rbp + 0x680 ]
mov [ rsp + 0x40 ] rax
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x30 ] rbx
xor r9d r9d
xor r8d r8d
xor ecx ecx
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] ebx
call [ rw-data ]
lea ecx [ rbx + 0x1 ]
call [ ExitProcess@IAT ]
sub_140001530
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0x40
mov rax r8
mov edi edx
mov rbx rcx
test rcx rcx
jne r-xdata
xor r9d r9d
mov [ rsp + 0x30 ] 0x0
mov edx 0x40000000
lea r8d [ r9 + 0x1 ]
mov rcx rax
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x58 ] rsi
mov [ rsp + 0x20 ] 0x2
call [ CreateFileA@IAT ]
mov rsi rax
cmp rax 0xffffffffffffffff
jne r-xdata
xor eax eax
mov rbx [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
lea r9 [ rsp + 0x50 ]
mov r8d edi
mov rdx rbx
mov rcx rax
mov [ rsp + 0x50 ] 0x0
mov [ rsp + 0x20 ] 0x0
call [ WriteFile@IAT ]
mov rcx rsi
call [ CloseHandle@IAT ]
mov rsi [ rsp + 0x58 ]
mov rbx [ rsp + 0x60 ]
mov eax 0x1
add rsp 0x40
pop rdi
retn
xor eax eax
mov rsi [ rsp + 0x58 ]
mov rbx [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
sub_1400015f0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rsi
push rdi
push r12
sub rsp 0x840
mov esi ecx
mov rbx r8
mov rbp rdx
lea rcx [ rsp + 0x41 ]
xor edx edx
mov r8d 0x7ff
movsxd r12 r9d
mov [ rsp + 0x40 ] 0x0
call sub_140004920
lea rcx [ rsp + 0x40 ]
mov r8 r12
mov rdx rbx
mov [ rsp + 0x878 ] 0x0
call sub_140004e50
cmp [ rsp + 0x880 ] 0x1
mov [ rsp + r12 + 0x40 ] r12d
jne r-xdata
xor r9d r9d
mov [ rsp + 0x30 ] 0x0
mov edx 0x40000000
lea r8d [ r9 + 0x1 ]
mov rcx rbp
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x20 ] 0x4
call [ CreateFileA@IAT ]
mov rbx rax
cmp rax 0xffffffffffffffff
jne r-xdata
xor eax eax
mov cl 0x99
test r12d r12d
jle r-xdata
mov r9d 0x2
xor r8d r8d
xor edx edx
mov rcx rax
call [ SetFilePointer@IAT ]
test esi esi
je r-xdata
xor eax eax
jmp r-xdata
nop [ rax + rax ] ax
lea r8d [ r12 + 0x4 ]
lea r9 [ rsp + 0x878 ]
lea rdx [ rsp + 0x40 ]
mov rcx rbx
mov [ rsp + 0x20 ] 0x0
call [ WriteFile@IAT ]
mov rcx rbx
call [ SetEndOfFile@IAT ]
mov rcx rbx
call [ CloseHandle@IAT ]
mov eax 0x1
mov edx 0xfffffffc
mov r9d 0x2
xor r8d r8d
sub edx esi
mov rcx rbx
call [ SetFilePointer@IAT ]
lea r11 [ rsp + 0x840 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsp r11
pop r12
pop rdi
pop rsi
retn
xor [ rsp + rax + 0x40 ] cl
inc rax
inc cl
cmp rax r12
jl r-xdata
sub_140001740
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_140005284
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_140005564
sub_140001780
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
xor esi esi
mov rbx rdx
xor r9d r9d
mov [ rsp + 0x30 ] rsi
lea r8d [ rsi + 0x1 ]
mov edx 0x80000000
mov [ rsp + 0x28 ] 0x80
mov rdi rcx
mov [ rsp + 0x20 ] 0x3
call [ CreateFileA@IAT ]
mov [ rbx + 0x12c ] rax
cmp rax 0xffffffffffffffff
jne r-xdata
lea rdx [ rsp + 0x58 ]
mov rcx rax
mov [ rsp + 0x58 ] rsi
call [ GetFileSizeEx@IAT ]
test eax eax
je r-xdata
xor eax eax
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
mov eax 0x1
add rsp 0x40
pop rdi
retn
mov rax [ rsp + 0x58 ]
mov rcx [ rbx + 0x12c ]
xor r9d r9d
xor edx edx
mov r8d 0x4000002
mov [ rsp + 0x28 ] rsi
mov [ rbx + 0x144 ] rax
mov [ rsp + 0x20 ] esi
call [ CreateFileMappingA@IAT ]
mov [ rbx + 0x134 ] rax
test rax rax
je r-xdata
mov r8d 0x12b
mov rdx rdi
mov rcx rbx
call sub_140004e2c
mov rcx [ rbx + 0x134 ]
xor r9d r9d
lea edx [ r9 + 0x4 ]
xor r8d r8d
mov [ rsp + 0x20 ] rsi
call [ MapViewOfFile@IAT ]
mov [ rbx + 0x13c ] rax
sub_1400018a0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
mov [ rsp + 0x20 ] r12
push rbp
lea rbp [ rsp - 0x480 ]
sub rsp 0x580
mov rbx rcx
movsxd rsi r8d
mov rdi rdx
lea rcx [ rsp + 0x31 ]
xor edx edx
mov r8d 0x12b
mov r12d r9d
mov [ rsp + 0x20 ] 0x706f6f43
mov [ rsp + 0x24 ] 0x7265
mov [ rsp + 0x30 ] 0x0
call sub_140004920
xor r11d r11d
lea rdx [ rsp + 0x30 ]
mov rcx rbx
mov [ rbp + 0x5c ] r11
mov [ rbp + 0x64 ] r11
mov [ rbp + 0x6c ] r11
mov [ rbp + 0x74 ] r11
call sub_140001780
test eax eax
je r-xdata
xor eax eax
mov eax [ rbp + 0x74 ]
mov r11d [ rbp + 0x6c ]
cmp eax 0x6
jl r-xdata
or rax 0xffffffffffffffff
lea r10d [ rax - 0x6 ]
xor r9d r9d
test r10d r10d
js r-xdata
mov rcx [ rbp + 0x64 ]
test rcx rcx
je r-xdata
call [ UnmapViewOfFile@IAT ]
mov [ rbp + 0x6c ] 0x0
lea rax [ rsp + 0x20 ]
mov r8d r11d
sub r8 rax
nop [ rax + rax ] ax
mov rcx [ rbp + 0x5c ]
test rcx rcx
je r-xdata
cmp rcx 0xffffffffffffffff
je r-xdata
inc r9d
inc r8
cmp r9d r10d
jle r-xdata
inc rdx
cmp rdx 0x6
jl r-xdata
lea rcx [ rbp + 0x81 ]
xor edx edx
mov r8d 0x3ff
mov [ rbp + 0x80 ] 0x0
call sub_140004920
lea rdx [ rbp + 0x80 ]
mov r8 rbx
mov rcx rdi
call sub_140005350
test eax eax
je r-xdata
cmp rcx 0xffffffffffffffff
je r-xdata
call [ CloseHandle@IAT ]
mov [ rbp + 0x64 ] 0x0
xor edx edx
nop [ rax + rax ] ax
movzx eax [ rsp + rdx + 0x20 ]
lea rcx [ rsp + rdx + 0x20 ]
cmp [ r8 + rcx ] al
jne r-xdata
movsxd rax r9d
add rax r11
jmp r-xdata
mov al 0x99
cmp r12d 0x1
jne r-xdata
call [ CloseHandle@IAT ]
mov edx eax
mov r8 rsi
mov rcx rdi
add rdx 0x6
mov rbx rsi
call sub_140004e50
mov rcx [ rbp + 0x6c ]
test rcx rcx
je r-xdata
mov eax 0x1
jmp r-xdata
test esi esi
jle r-xdata
lea r11 [ rsp + 0x580 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rdi [ r11 + 0x20 ]
mov r12 [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
nop [ rax + rax ] ax
xor [ rdi ] al
inc rdi
inc al
dec rbx
jne r-xdata
sub_140001aa0
push rdi
sub rsp 0x80
mov eax [ rdx ]
mov rdi rdx
mov [ rsp + 0x20 ] r8
mov [ rsp + 0x38 ] eax
xor eax eax
mov [ rsp + 0x30 ] rcx
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
lea r8d [ rax + 0x58 ]
mov [ rsp + 0x28 ] r9d
mov [ rsp + 0x50 ] rax
mov [ rsp + 0x58 ] rax
call sub_140001cf0
test eax eax
jne r-xdata
add rsp 0x80
pop rdi
retn
lea edx [ rax + 0x4 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x90 ] rbx
call sub_140001e30
lea rcx [ rsp + 0x20 ]
mov ebx eax
cmp eax 0x1
je r-xdata
mov eax [ rsp + 0x3c ]
mov [ rdi ] eax
call sub_140003410
mov rbx [ rsp + 0x90 ]
call sub_140003410
cmp ebx 0x2
je r-xdata
mov eax 0xfffffffd
mov rbx [ rsp + 0x90 ]
add rsp 0x80
pop rdi
retn
cmp ebx 0xfffffffb
jne r-xdata
mov eax ebx
mov rbx [ rsp + 0x90 ]
add rsp 0x80
pop rdi
retn
cmp [ rsp + 0x28 ] 0x0
je r-xdata
sub_140001b70
test rcx rcx
je r-xdata
mov eax 0xfffffffe
retn
mov rdx [ rcx + 0x28 ]
test rdx rdx
je r-xdata
xor eax eax
mov [ rdx + 0x1c ] eax
mov [ rcx + 0x1c ] eax
mov [ rcx + 0xc ] eax
mov [ rcx + 0x20 ] rax
mov [ rcx + 0x4c ] 0x1
mov [ rdx ] rax
mov [ rdx + 0xc ] eax
mov [ rdx + 0x20 ] rax
mov [ rdx + 0x2c ] rax
mov [ rdx + 0x34 ] eax
mov [ rdx + 0x40 ] rax
lea rax [ rdx + 0x548 ]
mov [ rdx + 0x80 ] rax
mov [ rdx + 0x60 ] rax
mov [ rdx + 0x58 ] rax
xor eax eax
mov [ rdx + 0x14 ] 0x8000
retn
sub_140001bd0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov edi edx
mov rbx rcx
test r8 r8
je r-xdata
mov eax 0xfffffffa
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp [ r8 ] 0x31
jne r-xdata
cmp r9d 0x58
jne r-xdata
test rcx rcx
jne r-xdata
mov [ rsp + 0x30 ] rsi
xor esi esi
mov [ rcx + 0x20 ] rsi
cmp [ rcx + 0x30 ] rsi
jne r-xdata
lea eax [ rcx - 0x2 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rax [ rcx + 0x38 ]
lea rcx [ sub_140003480 ]
mov edx 0x1
cmp rax rsi
mov r8d 0x2548
cmove rax rcx
mov rcx [ rbx + 0x40 ]
mov [ rbx + 0x38 ] rax
call [ rbx + 0x30 ]
mov rdx rax
test rax rax
jne r-xdata
lea rax [ sub_140003470 ]
mov [ rcx + 0x40 ] rsi
mov [ rcx + 0x30 ] rax
mov [ rbx + 0x28 ] rax
test edi edi
jns r-xdata
lea eax [ rdx - 0x4 ]
mov rsi [ rsp + 0x30 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov eax edi
sar eax 0x4
inc eax
mov [ rdx + 0x8 ] eax
cmp edi 0x30
jge r-xdata
mov [ rax + 0x8 ] esi
neg edi
jmp r-xdata
lea eax [ rdi - 0x8 ]
cmp eax 0x7
ja r-xdata
and edi 0xf
mov rcx [ rbx + 0x40 ]
call [ rbx + 0x38 ]
mov [ rbx + 0x28 ] rsi
mov rsi [ rsp + 0x30 ]
mov eax 0xfffffffe
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
mov [ rdx + 0x28 ] edi
mov [ rdx + 0x38 ] rsi
mov rsi [ rsp + 0x30 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_140001b70
sub_140001d30
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x20
mov rbx [ rcx + 0x28 ]
mov ebp edx
mov rsi rcx
cmp [ rbx + 0x38 ] 0x0
mov edi 0x1
jne r-xdata
mov [ rsp + 0x30 ] r12
xor r12d r12d
cmp [ rbx + 0x2c ] r12d
jne r-xdata
mov ecx [ rbx + 0x28 ]
mov edx edi
mov r8d edi
shl edx cl
mov rcx [ rsi + 0x40 ]
call [ rsi + 0x30 ]
mov [ rbx + 0x38 ] rax
test rax rax
jne r-xdata
sub ebp [ rsi + 0x18 ]
mov edi [ rbx + 0x2c ]
mov rdx [ rsi + 0x10 ]
cmp ebp edi
jb r-xdata
mov ecx [ rbx + 0x28 ]
mov [ rbx + 0x30 ] r12
shl edi cl
mov [ rbx + 0x2c ] edi
mov eax edi
jmp r-xdata
sub edi [ rbx + 0x34 ]
mov ecx [ rbx + 0x34 ]
mov eax ebp
cmp edi ebp
cmova edi ebp
add rcx [ rbx + 0x38 ]
sub rdx rax
mov r8d edi
call sub_140004e50
sub ebp edi
je r-xdata
mov rcx [ rbx + 0x38 ]
mov r8d edi
sub rdx rdi
call sub_140004e50
mov eax [ rbx + 0x2c ]
mov [ rbx + 0x34 ] r12d
jmp r-xdata
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
add [ rbx + 0x34 ] edi
mov eax [ rbx + 0x34 ]
mov ecx [ rbx + 0x2c ]
cmp eax ecx
cmove eax r12d
mov [ rbx + 0x34 ] eax
mov eax [ rbx + 0x30 ]
cmp eax ecx
jae r-xdata
mov rdx [ rsi + 0x10 ]
mov rcx [ rbx + 0x38 ]
mov r8d ebp
sub rdx r8
call sub_140004e50
mov eax [ rbx + 0x2c ]
mov [ rbx + 0x34 ] ebp
jmp r-xdata
mov [ rbx + 0x30 ] eax
mov r12 [ rsp + 0x30 ]
xor eax eax
add eax edi
sub_140001e30
mov [ rsp + 0x10 ] edx
mov [ rsp + 0x8 ] rcx
push rbp
push rbx
push r14
mov rbp rsp
sub rsp 0x80
mov rbx rcx
test rcx rcx
je r-xdata
mov eax 0xfffffffe
add rsp 0x80
pop r14
pop rbx
pop rbp
retn
mov r14 [ rcx + 0x28 ]
test r14 r14
je r-xdata
cmp [ rcx + 0x10 ] 0x0
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
mov eax [ r14 ]
mov [ rsp + 0x78 ] rsi
mov [ rsp + 0x70 ] rdi
mov edi [ r14 + 0x44 ]
mov [ rsp + 0x68 ] r12
cmp eax 0xb
mov [ rsp + 0x60 ] r13
mov r13d [ r14 + 0x40 ]
mov r11d 0xc
cmove eax r11d
mov [ rsp + 0x58 ] r15
xor r15d r15d
mov [ r14 ] eax
mov r10d [ rcx + 0x18 ]
mov r9 [ rcx + 0x10 ]
mov esi [ rcx + 0x8 ]
mov r12 [ rcx ]
mov [ rbp - 0x40 ] r9
mov [ rbp + 0x38 ] r10d
mov [ rbp - 0x44 ] esi
mov r8d r10d
mov [ rbp - 0x48 ] r10d
mov [ rbp + 0x30 ] r15d
cmp eax 0x1c
ja r-xdata
cmp [ rcx + 0x8 ] 0x0
jne r-xdata
mov eax 0xfffffffe
jmp r-xdata
lea rdx [ __dos_header ]
cdqe
mov ecx [ rdx + rax * 4 + 0x3390 ]
add rcx rdx
jmp rcx
mov r13 [ rsp + 0x60 ]
mov r12 [ rsp + 0x68 ]
mov rdi [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
mov r15 [ rsp + 0x58 ]
add rsp 0x80
pop r14
pop rbx
pop rbp
retn
mov edx [ r14 + 0x8 ]
test edx edx
jne r-xdata
cmp edi 0x10
jae r-xdata
cmp edi 0x20
jae r-xdata
cmp edi 0x10
jae r-xdata
test [ r14 + 0x10 ] 0x400
je r-xdata
test [ r14 + 0x10 ] 0x400
je r-xdata
test [ r14 + 0x10 ] 0x800
je r-xdata
test [ r14 + 0x10 ] 0x1000
je r-xdata
test [ r14 + 0x10 ] 0x200
je r-xdata
cmp edi 0x20
jae r-xdata
cmp [ r14 + 0xc ] 0x0
je r-xdata
cmp [ rbp + 0x28 ] 0x5
je r-xdata
cmp [ r14 + 0x4 ] 0x0
je r-xdata
mov ecx edi
and ecx 0x7
sub edi ecx
shr r13d cl
cmp edi 0x20
jae r-xdata
mov r15d [ r14 + 0x48 ]
test r15d r15d
je r-xdata
cmp edi 0xe
jae r-xdata
mov eax [ r14 + 0x70 ]
cmp [ r14 + 0x7c ] eax
jae r-xdata
mov eax [ r14 + 0x78 ]
add eax [ r14 + 0x74 ]
cmp [ r14 + 0x7c ] eax
jae r-xdata
cmp esi 0x6
jb r-xdata
mov edx [ r14 + 0x50 ]
test edx edx
je r-xdata
mov ecx [ r14 + 0x6c ]
mov r11 [ r14 + 0x60 ]
mov eax 0x1
shl eax cl
lea ecx [ rax - 0x1 ]
mov eax r13d
and rcx rax
mov eax [ r11 + rcx * 4 ]
mov ecx eax
shr ecx 0x8
movzx ecx cl
cmp ecx edi
jbe r-xdata
mov edx [ r14 + 0x50 ]
test edx edx
je r-xdata
test r10d r10d
je r-xdata
test r10d r10d
je r-xdata
cmp [ r14 + 0x8 ] 0x0
je r-xdata
cmp [ r14 + 0x8 ] 0x0
je r-xdata
mov r15d 0x1
jmp r-xdata
mov r15d 0xfffffffd
jmp r-xdata
mov eax 0xfffffffc
jmp r-xdata
cmp edi 0x10
jae r-xdata
mov [ r14 ] r11d
jmp r-xdata
mov [ r14 + 0x10 ] r13d
cmp r13b 0x8
jne r-xdata
nop [ rax ] eax
mov rax [ r14 + 0x20 ]
test rax rax
je r-xdata
test esi esi
je r-xdata
mov rcx [ r14 + 0x20 ]
test rcx rcx
je r-xdata
test esi esi
je r-xdata
mov rax [ r14 + 0x20 ]
test rax rax
je r-xdata
cmp edi 0x10
jae r-xdata
mov [ r14 + 0x48 ] r15d
mov [ r14 ] 0x6
mov ecx [ r14 + 0x48 ]
cmp ecx esi
mov ebx ecx
cmova ebx esi
test ebx ebx
je r-xdata
mov rax [ r14 + 0x20 ]
test rax rax
je r-xdata
test esi esi
je r-xdata
mov rax [ r14 + 0x20 ]
test rax rax
je r-xdata
test esi esi
je r-xdata
mov rcx [ r14 + 0x20 ]
test rcx rcx
je r-xdata
cmp edi 0x10
jae r-xdata
mov ecx r13d
mov eax r13d
mov edi r15d
shl eax 0x10
and ecx 0xff00
add ecx eax
mov eax r13d
shr r13d 0x18
shr eax 0x8
shl ecx 0x8
and eax 0xff00
add eax ecx
add eax r13d
mov r13d r15d
mov [ r14 + 0x18 ] eax
mov [ rbx + 0x4c ] eax
mov [ r14 ] 0xa
test esi esi
je r-xdata
mov [ rbx + 0x10 ] r9
mov [ rbx + 0x18 ] r10d
mov [ rbx ] r12
mov [ rbx + 0x8 ] esi
mov eax 0x2
mov [ r14 + 0x40 ] r13d
mov [ r14 + 0x44 ] edi
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_140003e10
mov r9 [ rbp - 0x40 ]
mov r10d [ rbp + 0x38 ]
mov [ r14 + 0x18 ] eax
mov [ rbx + 0x4c ] eax
mov [ r14 ] 0xb
mov r15d [ rbp + 0x30 ]
cmp edi 0x3
jae r-xdata
mov ecx edi
mov [ r14 ] 0x18
and ecx 0x7
shr r13d cl
sub edi ecx
jmp r-xdata
mov eax r13d
movzx ecx r13w
not eax
shr eax 0x10
cmp ecx eax
je r-xdata
test esi esi
je r-xdata
mov [ r14 ] 0xb
jmp r-xdata
cmp r15d esi
cmova r15d esi
cmp r15d r10d
cmova r15d r10d
test r15d r15d
je r-xdata
mov ecx r13d
shr r13d 0x5
add edi 0xfffffff2
mov edx r13d
shr r13d 0x5
and ecx 0x1f
mov eax r13d
and edx 0x1f
add ecx 0x101
and eax 0xf
inc edx
shr r13d 0x4
add eax 0x4
mov [ r14 + 0x74 ] ecx
mov [ r14 + 0x78 ] edx
mov [ r14 + 0x70 ] eax
cmp ecx 0x11e
ja r-xdata
nop [ rax ] eax
cmp [ r14 + 0x7c ] 0x13
jae r-xdata
nop [ rax + rax ] ax
cmp [ r14 ] 0x1b
je r-xdata
nop [ rax + rax ] eax
mov ecx [ r14 + 0x68 ]
mov r11 [ r14 + 0x58 ]
mov eax 0x1
shl eax cl
lea ecx [ rax - 0x1 ]
mov eax r13d
and rcx rax
mov eax [ r11 + rcx * 4 ]
mov ecx eax
shr ecx 0x8
movzx ecx cl
cmp ecx edi
jbe r-xdata
cmp r10d 0x102
jb r-xdata
mov [ r14 ] 0x14
cmp edi edx
jae r-xdata
test al 0xf0
jne r-xdata
test esi esi
je r-xdata
mov eax [ r14 + 0x30 ]
sub eax r10d
add eax r8d
cmp [ r14 + 0x4c ] eax
jbe r-xdata
cmp edi edx
jae r-xdata
mov ecx [ r14 + 0x4c ]
mov eax r8d
sub eax r10d
cmp ecx eax
jbe r-xdata
movzx eax [ r14 + 0x48 ]
inc r9
dec r10d
mov [ r9 - 0x1 ] al
mov [ rbp + 0x38 ] r10d
mov [ rbp - 0x40 ] r9
mov [ r14 ] 0x12
jmp r-xdata
mov [ r14 ] 0x19
cmp edi 0x20
jae r-xdata
mov [ r14 ] 0x1a
cmp [ r14 + 0x10 ] 0x0
je r-xdata
mov rbx [ rbp + 0x20 ]
mov rax [ rbp - 0x40 ]
mov [ rbx + 0x10 ] rax
mov eax [ rbp + 0x38 ]
mov [ rbx ] r12
mov [ rbx + 0x18 ] eax
mov [ rbx + 0x8 ] esi
cmp [ r14 + 0x2c ] 0x0
mov [ r14 + 0x44 ] edi
mov edi [ rbp - 0x48 ]
mov [ r14 + 0x40 ] r13d
jne r-xdata
test dl 0x2
je r-xdata
nop [ rax ] eax
mov eax [ r14 ]
cmp eax 0x1c
ja r-xdata
lea rax [ r--data ]
mov [ rbx + 0x20 ] rax
mov [ r14 ] 0x1b
jmp r-xdata
test r13d 0xe000
je r-xdata
movzx eax [ r12 ]
mov ecx edi
add edi 0x8
shl eax cl
dec esi
inc r12
add r13d eax
cmp edi 0x10
jb r-xdata
test [ r14 + 0x10 ] 0x200
je r-xdata
mov [ rax + 0x4 ] r13d
movzx eax [ r12 ]
mov ecx edi
add edi 0x8
shl eax cl
dec esi
inc r12
add r13d eax
cmp edi 0x20
jb r-xdata
test [ r14 + 0x10 ] 0x200
je r-xdata
movzx eax r13b
mov [ rcx + 0x8 ] eax
mov rax [ r14 + 0x20 ]
mov ecx r13d
shr ecx 0x8
mov [ rax + 0xc ] ecx
movzx eax [ r12 ]
mov ecx edi
add edi 0x8
shl eax cl
dec esi
inc r12
add r13d eax
cmp edi 0x10
jb r-xdata
mov [ r14 ] 0x5
mov [ rax + 0x10 ] r15
mov rax [ r14 + 0x20 ]
mov [ r14 + 0x48 ] r13d
test rax rax
je r-xdata
nop [ rax ] eax
cmp [ r14 + 0x48 ] 0x0
jne r-xdata
mov rax [ r14 + 0x20 ]
test rax rax
je r-xdata
mov [ r14 + 0x48 ] r15d
mov [ r14 ] 0x7
mov [ rax + 0x20 ] r15
mov r8 r12
nop
mov rbx [ rbp + 0x20 ]
mov r9 [ rbp - 0x40 ]
mov r10d [ rbp + 0x38 ]
mov [ r14 ] 0x8
mov [ rax + 0x30 ] r15
mov r8 r12
nop [ rax + rax ] ax
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_140004440
mov [ r14 + 0x18 ] eax
mov [ rbx + 0x4c ] eax
mov eax [ r14 + 0x10 ]
sar eax 0x9
and eax 0x1
mov [ rcx + 0x3c ] eax
mov rax [ r14 + 0x20 ]
mov [ rax + 0x40 ] 0x1
movzx eax [ r14 + 0x18 ]
cmp r13d eax
je r-xdata
test esi esi
je r-xdata
movzx eax [ r12 ]
mov ecx edi
add edi 0x8
shl eax cl
dec esi
inc r12
add r13d eax
cmp edi 0x20
jb r-xdata
mov edx edi
mov rcx rbx
call sub_140001d30
test eax eax
je r-xdata
cmp [ r14 ] 0x18
jge r-xdata
mov eax r13d
shr r13d 0x1
dec edi
and eax 0x1
mov [ r14 + 0x4 ] eax
mov eax r13d
and eax 0x3
je r-xdata
test esi esi
je r-xdata
mov [ r14 + 0x48 ] ecx
mov r13d r15d
mov edi r15d
mov [ r14 ] 0xe
lea rax [ r--data ]
mov [ rbx + 0x20 ] rax
mov [ r14 ] 0x1b
jmp r-xdata
movzx eax [ r12 ]
mov ecx edi
add edi 0x8
shl eax cl
dec esi
inc r12
add r13d eax
cmp edi 0x20
jb r-xdata
mov r8d r15d
mov rdx r12
mov rcx r9
mov ebx r15d
call sub_140004e50
mov r10d [ rbp + 0x38 ]
mov r9 [ rbp - 0x40 ]
sub r10d r15d
add r12 rbx
add r9 rbx
mov rbx [ rbp + 0x20 ]
sub esi r15d
sub [ r14 + 0x48 ] r15d
mov [ rbp + 0x38 ] r10d
mov [ rbp - 0x40 ] r9
jmp r-xdata
lea rax [ r--data ]
mov [ rbx + 0x20 ] rax
mov [ r14 ] 0x1b
jmp r-xdata
cmp edx 0x1e
ja r-xdata
movzx eax [ r12 ]
mov ecx edi
add edi 0x8
shl eax cl
dec esi
inc r12
add r13d eax
cmp edi 0xe
jb r-xdata
lea rcx [ r14 + 0x68 ]
lea rax [ r14 + 0x548 ]
lea r9 [ r14 + 0x80 ]
mov [ r9 ] rax
mov [ r14 + 0x58 ] rax
lea rax [ r14 + 0x308 ]
mov [ rsp + 0x28 ] rax
mov [ rcx ] 0x7
mov [ rsp + 0x20 ] rcx
xor ecx ecx
lea rdx [ r14 + 0x88 ]
lea r8d [ rcx + 0x13 ]
call sub_140003970
mov r10d [ rbp + 0x38 ]
mov [ rbp + 0x30 ] eax
test eax eax
je r-xdata
nop
mov eax [ r14 + 0x7c ]
movzx ecx r13w
add edi 0xfffffffd
movzx eax [ rdx + rax * 2 + 0xdbc0 ]
and cx 0x7
shr r13d 0x3
mov [ r14 + rax * 2 + 0x88 ] cx
inc [ r14 + 0x7c ]
mov eax [ r14 + 0x70 ]
cmp [ r14 + 0x7c ] eax
jb r-xdata
test esi esi
je r-xdata
mov r9 [ rbp - 0x40 ]
mov r8d [ r14 + 0x74 ]
lea rax [ r14 + 0x548 ]
lea r15 [ r14 + 0x308 ]
mov [ r14 + 0x80 ] rax
mov [ r14 + 0x58 ] rax
lea rax [ r14 + 0x68 ]
lea rdx [ r14 + 0x88 ]
lea r9 [ r14 + 0x80 ]
mov ecx 0x1
mov [ rsp + 0x28 ] r15
mov [ rax ] 0x9
mov [ rsp + 0x20 ] rax
call sub_140003970
mov [ rbp + 0x30 ] eax
test eax eax
je r-xdata
mov ecx eax
shr ecx 0x10
cmp cx 0x10
jae r-xdata
nop [ rax + rax ] ax
test al al
je r-xdata
test esi esi
je r-xdata
mov [ rbx + 0x10 ] r9
mov [ rbx + 0x18 ] r10d
mov [ rbx ] r12
mov [ rbx + 0x8 ] esi
mov edx r8d
mov rcx rbx
mov [ r14 + 0x40 ] r13d
mov [ r14 + 0x44 ] edi
call sub_140003490
mov r9 [ rbx + 0x10 ]
mov r10d [ rbx + 0x18 ]
mov r12 [ rbx ]
mov esi [ rbx + 0x8 ]
mov r13d [ r14 + 0x40 ]
mov edi [ r14 + 0x44 ]
mov [ rbp - 0x40 ] r9
mov [ rbp + 0x38 ] r10d
jmp r-xdata
mov ecx edx
mov eax 0x1
shl eax cl
dec eax
and eax r13d
shr r13d cl
add [ r14 + 0x48 ] eax
sub edi edx
nop [ rax + rax ] ax
mov r9 [ rbp - 0x40 ]
mov r10d [ rbp + 0x38 ]
mov ecx eax
shr ecx 0x8
movzx ecx cl
shr r13d cl
sub edi ecx
test al 0x40
je r-xdata
mov r10d eax
movzx ecx al
mov [ rbp - 0x4c ] eax
shr r10d 0x8
mov r9d 0x1
mov edx eax
movzx r8d r10b
shr eax 0x10
add ecx r8d
shl r9d cl
mov ecx r8d
dec r9d
and r9d r13d
shr r9d cl
add r9d eax
mov eax [ r11 + r9 * 4 ]
movzx r11d [ rbp - 0x4b ]
mov ecx eax
shr ecx 0x8
movzx r8d cl
movzx ecx r10b
add r8d ecx
cmp r8d edi
jbe r-xdata
movzx eax [ r12 ]
mov ecx edi
add edi 0x8
shl eax cl
mov ecx [ r14 + 0x6c ]
dec esi
add r13d eax
mov eax 0x1
inc r12
shl eax cl
lea ecx [ rax - 0x1 ]
mov eax r13d
and rcx rax
mov rax [ r14 + 0x60 ]
mov eax [ rax + rcx * 4 ]
mov ecx eax
shr ecx 0x8
movzx ecx cl
cmp ecx edi
ja r-xdata
mov [ r14 ] 0x16
lea rax [ r--data ]
mov [ rbx + 0x20 ] rax
mov [ r14 ] 0x1b
jmp r-xdata
mov ecx edx
mov eax 0x1
shl eax cl
dec eax
and eax r13d
shr r13d cl
add [ r14 + 0x4c ] eax
sub edi edx
test esi esi
je r-xdata
mov eax [ r14 + 0x48 ]
mov rdx r9
sub rdx rcx
sub ecx eax
mov eax [ r14 + 0x34 ]
cmp ecx eax
jbe r-xdata
sub r8d r10d
add [ rbx + 0x1c ] r8d
add [ r14 + 0x1c ] r8d
test r8d r8d
je r-xdata
test esi esi
je r-xdata
cmp edi 0x20
jae r-xdata
mov rax [ r14 + 0x20 ]
mov [ r14 + 0x10 ] r15d
test rax rax
je r-xdata
cmp r13d 0x8b1f
jne r-xdata
movzx eax [ r12 ]
mov ecx edi
add edi 0x8
shl eax cl
dec esi
inc r12
add r13d eax
cmp edi 0x10
jb r-xdata
mov r8d [ rbp - 0x48 ]
xor r15d r15d
lea r11d [ r15 + 0xc ]
jmp r-xdata
mov rcx [ r14 + 0x20 ]
test rcx rcx
je r-xdata
lea rax [ r--data ]
mov [ rbx + 0x20 ] rax
mov [ r14 ] 0x1b
jmp r-xdata
test esi esi
je r-xdata
mov r13d r15d
mov edi r15d
mov [ r14 ] 0x3
jmp r-xdata
mov eax r13d
mov [ rbp - 0x50 ] r13b
lea rdx [ rbp - 0x50 ]
shr eax 0x8
mov r8d 0x4
mov [ rbp - 0x4f ] al
mov eax r13d
shr r13d 0x18
shr eax 0x10
mov [ rbp - 0x4d ] r13b
mov [ rbp - 0x4e ] al
mov ecx [ r14 + 0x18 ]
call sub_140004440
mov [ r14 + 0x18 ] eax
mov r13d r15d
mov edi r15d
mov [ r14 ] 0x4
mov [ rbp - 0x50 ] r13b
shr r13d 0x8
lea rdx [ rbp - 0x50 ]
mov [ rbp - 0x4f ] r13b
mov ecx [ r14 + 0x18 ]
mov r8d 0x2
call sub_140004440
mov [ r14 + 0x18 ] eax
test [ r14 + 0x10 ] 0x200
je r-xdata
mov [ rax + 0x18 ] r13d
movzx eax [ r12 ]
mov ecx edi
add edi 0x8
shl eax cl
dec esi
inc r12
add r13d eax
cmp edi 0x10
jb r-xdata
test [ r14 + 0x10 ] 0x200
je r-xdata
mov r9 [ rax + 0x10 ]
test r9 r9
je r-xdata
test ebx ebx
je r-xdata
mov rdx [ rax + 0x20 ]
test rdx rdx
je r-xdata
test ebx ebx
je r-xdata
mov rdx [ rax + 0x30 ]
test rdx rdx
je r-xdata
mov r13d r15d
mov edi r15d
lea rax [ r--data ]
mov [ rbx + 0x20 ] rax
mov [ r14 ] 0x1b
jmp r-xdata
movzx eax [ r12 ]
mov ecx edi
add edi 0x8
shl eax cl
dec esi
inc r12
add r13d eax
cmp edi 0x10
jb r-xdata
sub edi [ rbx + 0x18 ]
mov esi [ rbp - 0x44 ]
sub esi [ rbx + 0x8 ]
add [ rbx + 0x1c ] edi
add [ rbx + 0xc ] esi
add [ r14 + 0x1c ] edi
cmp [ r14 + 0x8 ] 0x0
je r-xdata
mov [ r14 ] 0x1c
cmp edi [ rbx + 0x18 ]
je r-xdata
mov [ r14 ] 0xd
dec eax
je r-xdata
movzx eax [ r12 ]
mov ecx edi
add edi 0x8
shl eax cl
dec esi
inc r12
add r13d eax
cmp edi 0x3
jb r-xdata
mov [ r14 + 0x7c ] r15d
mov [ r14 ] 0x10
lea rdx [ __dos_header ]
test esi esi
je r-xdata
mov [ r14 + 0x7c ] r15d
mov [ r14 ] 0x11
lea rax [ r--data ]
mov [ rbx + 0x20 ] rax
mov [ r14 ] 0x1b
jmp r-xdata
mov eax [ r14 + 0x7c ]
movzx eax [ rdx + rax * 2 + 0xdbc0 ]
mov [ r14 + rax * 2 + 0x88 ] r15w
inc [ r14 + 0x7c ]
cmp [ r14 + 0x7c ] 0x13
jb r-xdata
cmp edi 0x3
jae r-xdata
movzx eax [ r12 ]
mov ecx edi
add edi 0x8
shl eax cl
dec esi
inc r12
add r13d eax
cmp edi 0x3
jb r-xdata
mov rax [ r14 + 0x80 ]
mov r8d [ r14 + 0x78 ]
lea rcx [ r14 + 0x6c ]
mov [ r14 + 0x60 ] rax
mov eax [ r14 + 0x74 ]
mov [ rcx ] 0x6
mov [ rsp + 0x28 ] r15
mov [ rsp + 0x20 ] rcx
lea r9 [ r14 + 0x80 ]
lea rdx [ r14 + rax * 2 + 0x88 ]
mov ecx 0x2
call sub_140003970
mov rbx [ rbp + 0x20 ]
mov r9 [ rbp - 0x40 ]
mov r10d [ rbp + 0x38 ]
mov [ rbp + 0x30 ] eax
test eax eax
je r-xdata
mov rbx [ rbp + 0x20 ]
lea rax [ r--data ]
mov [ rbx + 0x20 ] rax
mov [ r14 ] 0x1b
jmp r-xdata
movzx eax [ rbp - 0x4a ]
cmp ax 0x10
jne r-xdata
movzx edx [ rbp - 0x4b ]
shr eax 0x8
movzx ecx al
cmp edi ecx
jae r-xdata
movzx eax [ r12 ]
mov ecx edi
add edi 0x8
shl eax cl
mov ecx [ r14 + 0x68 ]
dec esi
add r13d eax
mov eax 0x1
inc r12
shl eax cl
lea ecx [ rax - 0x1 ]
mov eax r13d
and rcx rax
mov rax [ r14 + 0x58 ]
mov eax [ rax + rcx * 4 ]
mov ecx eax
mov [ rbp - 0x4c ] eax
shr ecx 0x8
movzx ecx cl
cmp ecx edi
ja r-xdata
mov ecx eax
shr ecx 0x8
movzx ecx cl
shr r13d cl
sub edi ecx
mov ecx eax
shr ecx 0x10
mov [ r14 + 0x48 ] ecx
test al al
jne r-xdata
test al 0xf0
jne r-xdata
movzx eax [ r12 ]
mov ecx edi
add edi 0x8
shl eax cl
mov ecx [ r14 + 0x68 ]
dec esi
add r13d eax
mov eax 0x1
inc r12
shl eax cl
lea ecx [ rax - 0x1 ]
mov eax r13d
and rcx rax
mov rax [ r14 + 0x58 ]
mov eax [ rax + rcx * 4 ]
mov ecx eax
shr ecx 0x8
movzx ecx cl
cmp ecx edi
ja r-xdata
movzx eax [ r12 ]
mov ecx edi
add edi 0x8
shl eax cl
dec esi
inc r12
add r13d eax
cmp edi [ r14 + 0x50 ]
jb r-xdata
mov r8d [ rbp - 0x48 ]
mov ecx eax
mov [ r14 ] 0x15
shr ecx 0x10
mov [ r14 + 0x4c ] ecx
movzx ecx al
and ecx 0xf
mov [ r14 + 0x50 ] ecx
lea rax [ r--data ]
mov [ rbx + 0x20 ] rax
mov [ r14 ] 0x1b
jmp r-xdata
movzx ecx r11b
shr r13d cl
sub edi ecx
movzx r10d [ rbp - 0x4a ]
movzx eax [ r12 ]
mov ecx edi
add edi 0x8
shl eax cl
dec esi
inc r12
add r13d eax
cmp edi [ r14 + 0x50 ]
jb r-xdata
movzx eax [ rdx + r9 ]
inc r9
dec ecx
mov [ r9 - 0x1 ] al
jne r-xdata
mov [ rbp - 0x40 ] r9
cmp [ r14 + 0x48 ] ecx
jne r-xdata
sub eax ecx
mov edx eax
mov edx [ r14 + 0x2c ]
sub ecx eax
sub edx ecx
jmp r-xdata
cmp [ r14 + 0x10 ] 0x0
mov [ rbp - 0x48 ] r10d
mov ecx r13d
jne r-xdata
mov ecx [ r14 + 0x18 ]
mov eax r8d
mov rdx r9
sub rdx rax
cmp [ r14 + 0x10 ] 0x0
je r-xdata
movzx eax [ r12 ]
mov ecx edi
add edi 0x8
shl eax cl
dec esi
inc r12
add r13d eax
cmp edi 0x20
jb r-xdata
cmp r13d [ r14 + 0x1c ]
je r-xdata
nop
test [ r14 + 0x8 ] 0x1
je r-xdata
mov [ rax + 0x40 ] 0xffffffff
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_140004440
lea rdx [ rbp - 0x50 ]
mov r8d 0x2
mov [ r14 + 0x18 ] eax
mov [ rbp - 0x50 ] r13w
mov ecx [ r14 + 0x18 ]
call sub_140004440
mov r13d r15d
mov edi r15d
mov [ r14 + 0x18 ] eax
mov [ r14 ] 0x1
jmp r-xdata
test esi esi
je r-xdata
test [ r14 + 0x10 ] 0x200
je r-xdata
mov eax r13d
shr eax 0x8
and eax 0x1
mov [ rcx ] eax
mov r13d r15d
mov edi r15d
jmp r-xdata
mov [ rbp - 0x50 ] r13b
shr r13d 0x8
lea rdx [ rbp - 0x50 ]
mov [ rbp - 0x4f ] r13b
mov ecx [ r14 + 0x18 ]
mov r8d 0x2
call sub_140004440
mov [ r14 + 0x18 ] eax
test esi esi
je r-xdata
mov eax ebx
sub esi ebx
add r12 rax
sub [ r14 + 0x48 ] ebx
mov ecx [ r14 + 0x18 ]
mov r8d ebx
mov rdx r12
call sub_140004440
mov [ r14 + 0x18 ] eax
mov edx [ rax + 0x18 ]
sub edx ecx
mov ecx [ rax + 0x1c ]
lea eax [ rbx + rdx ]
cmp eax ecx
jbe r-xdata
test [ r14 + 0x10 ] 0x200
je r-xdata
cmp r15d esi
jb r-xdata
mov ecx [ r14 + 0x48 ]
cmp ecx [ rax + 0x28 ]
jae r-xdata
test [ r14 + 0x10 ] 0x200
je r-xdata
cmp r15d esi
jb r-xdata
mov ecx [ r14 + 0x48 ]
cmp ecx [ rax + 0x38 ]
jae r-xdata
mov eax [ r14 + 0x4 ]
mov edx 0x80
neg eax
mov eax 0x0
sbb ecx ecx
and ecx 0x40
cmp [ r14 ] 0xb
cmove eax edx
add ecx eax
add ecx [ r14 + 0x44 ]
mov [ rbx + 0x48 ] ecx
test esi esi
jne r-xdata
test edi edi
je r-xdata
mov rcx r14
call sub_140001d00
shr r13d 0x2
add edi 0xfffffffe
mov [ r14 ] 0x12
jmp r-xdata
dec eax
je r-xdata
mov r8d [ rbp - 0x48 ]
mov [ r14 ] 0x12
lea rax [ r--data ]
mov [ rbx + 0x20 ] rax
mov [ r14 ] 0x1b
jmp r-xdata
mov r10d [ rbp + 0x38 ]
movzx r9d [ rbp - 0x4b ]
cmp ax 0x11
jne r-xdata
movzx r8d [ rbp - 0x4b ]
lea edx [ r8 + 0x2 ]
cmp edi edx
jae r-xdata
movzx eax [ rbp - 0x4a ]
movzx ecx dl
shr r13d cl
sub edi ecx
mov ecx [ r14 + 0x7c ]
mov [ r14 + rcx * 2 + 0x88 ] ax
inc [ r14 + 0x7c ]
jmp r-xdata
nop
test esi esi
je r-xdata
test al 0x20
jne r-xdata
mov [ r14 ] 0x17
jmp r-xdata
mov r10d eax
movzx ecx al
mov [ rbp - 0x4c ] eax
shr r10d 0x8
mov r9d 0x1
mov edx eax
movzx r8d r10b
shr eax 0x10
add ecx r8d
shl r9d cl
mov ecx r8d
dec r9d
and r9d r13d
shr r9d cl
add r9d eax
mov eax [ r11 + r9 * 4 ]
movzx r11d [ rbp - 0x4b ]
mov ecx eax
shr ecx 0x8
movzx r8d cl
movzx ecx r10b
add r8d ecx
cmp r8d edi
jbe r-xdata
test esi esi
je r-xdata
movzx eax [ r12 ]
mov ecx edi
movzx r9d r11b
shl eax cl
mov r8d 0x1
movzx ecx dl
add ecx r9d
add r13d eax
movzx eax r10w
shl r8d cl
mov ecx r9d
add edi 0x8
dec r8d
dec esi
inc r12
and r8d r13d
shr r8d cl
add r8d eax
mov rax [ r14 + 0x60 ]
mov eax [ rax + r8 * 4 ]
mov ecx eax
shr ecx 0x8
movzx r8d cl
add r8d r9d
cmp r8d edi
ja r-xdata
mov [ r14 ] 0x12
jmp r-xdata
cmp ecx r10d
cmova ecx r10d
sub r10d ecx
sub eax ecx
sub rdx r9
mov [ rbp + 0x38 ] r10d
mov [ r14 + 0x48 ] eax
nop [ rax ] eax
jmp r-xdata
mov eax [ r14 + 0x48 ]
add rdx [ r14 + 0x38 ]
cmp ecx eax
jbe r-xdata
cmp ecx [ r14 + 0x18 ]
je r-xdata
and ecx 0xff00
mov eax r13d
shl eax 0x10
add ecx eax
mov eax r13d
shr eax 0x8
shl ecx 0x8
and eax 0xff00
add ecx eax
mov eax r13d
shr eax 0x18
add ecx eax
call sub_140003e10
call sub_140004440
jmp r-xdata
mov r13d r15d
mov edi r15d
lea rax [ r--data ]
mov [ rbx + 0x20 ] rax
mov [ r14 ] 0x1b
jmp r-xdata
movzx eax [ r12 ]
mov ecx edi
add edi 0x8
shl eax cl
dec esi
inc r12
add r13d eax
cmp edi 0x20
jb r-xdata
lea rax [ r--data ]
mov [ rbx + 0x20 ] rax
mov [ r14 ] 0x1b
jmp r-xdata
movzx ecx r13b
mov eax r13d
shr eax 0x8
shl ecx 0x8
add ecx eax
mov eax 0x8421085
mul ecx
mov eax ecx
sub eax edx
shr eax 0x1
add eax edx
shr eax 0x4
imul eax eax 0x1f
cmp ecx eax
jne r-xdata
mov r13d r15d
mov edi r15d
mov [ r14 ] 0x2
jmp r-xdata
mov [ rbp - 0x50 ] r13b
shr r13d 0x8
lea rdx [ rbp - 0x50 ]
mov [ rbp - 0x4f ] r13b
mov ecx [ r14 + 0x18 ]
mov r8d 0x2
call sub_140004440
mov [ r14 + 0x18 ] eax
mov ecx ebx
sub ecx edx
jmp r-xdata
mov eax r15d
sub esi r15d
add r12 rax
test ebx ebx
jne r-xdata
mov ecx [ r14 + 0x18 ]
mov r8d r15d
mov rdx r12
call sub_140004440
mov [ r14 + 0x18 ] eax
mov rax [ r14 + 0x20 ]
movzx ebx [ r8 ]
inc r15d
inc r8
test rax rax
je r-xdata
mov [ rcx + rdx ] bl
inc [ r14 + 0x48 ]
mov eax r15d
sub esi r15d
add r12 rax
test ebx ebx
jne r-xdata
mov ecx [ r14 + 0x18 ]
mov r8d r15d
mov rdx r12
call sub_140004440
mov [ r14 + 0x18 ] eax
mov rax [ r14 + 0x20 ]
movzx ebx [ r8 ]
inc r15d
inc r8
test rax rax
je r-xdata
mov [ rcx + rdx ] bl
inc [ r14 + 0x48 ]
cmp [ rbp + 0x28 ] 0x4
jne r-xdata
test edi edi
je r-xdata
mov rdx [ rbx + 0x10 ]
mov ecx [ r14 + 0x18 ]
mov eax edi
sub rdx rax
cmp [ r14 + 0x10 ] 0x0
mov r8d edi
je r-xdata
shr r13d 0x2
mov [ r14 ] 0xf
add edi 0xfffffffe
jmp r-xdata
dec eax
jne r-xdata
lea edx [ r9 + 0x7 ]
cmp edi edx
jae r-xdata
lea edx [ r9 + 0x3 ]
cmp edi edx
jae r-xdata
mov eax [ r14 + 0x7c ]
mov ecx r8d
sub edi r8d
shr r13d cl
test eax eax
je r-xdata
nop [ rax ] eax
mov eax [ r14 + 0x78 ]
add eax [ r14 + 0x74 ]
cmp [ r14 + 0x7c ] eax
jb r-xdata
movzx eax [ r12 ]
mov ecx edi
add edi 0x8
shl eax cl
dec esi
inc r12
add r13d eax
movzx eax dl
cmp edi eax
jb r-xdata
mov [ r14 ] 0xb
test al 0x40
je r-xdata
movzx ecx r11b
shr r13d cl
sub edi ecx
movzx r10d [ rbp - 0x4a ]
nop [ rax ] eax
test esi esi
je r-xdata
mov ecx eax
mov r13d r15d
mov edi r15d
lea rax [ r--data ]
mov [ rbx + 0x20 ] rax
mov [ r14 ] 0x1b
jmp r-xdata
mov r9 [ rbp - 0x40 ]
mov r10d [ rbp + 0x38 ]
mov [ r14 + 0x18 ] eax
mov [ rbx + 0x4c ] eax
test esi esi
je r-xdata
mov eax r13d
and al 0xf
cmp al 0x8
je r-xdata
mov r8d ecx
mov ecx edx
mov rdx r12
add rcx r9
call sub_140004e50
xor r15d r15d
jmp r-xdata
xor r15d r15d
jmp r-xdata
mov eax r15d
jmp r-xdata
mov eax 0xfffffffb
test r15d r15d
cmove r15d eax
call sub_140003e10
call sub_140004440
jmp r-xdata
shr r13d 0x2
add edi 0xfffffffe
jmp r-xdata
lea rax [ r--data ]
shr r13d 0x2
add edi 0xfffffffe
mov [ rbx + 0x20 ] rax
mov [ r14 ] 0x1b
jmp r-xdata
mov ecx r9d
mov eax 0xfffffff9
shr r13d cl
mov edx r13d
and edx 0x7f
add edx 0xb
shr r13d 0x7
nop [ rax + rax ] ax
mov ecx r9d
mov eax 0xfffffffd
shr r13d cl
mov edx r13d
and edx 0x7
add edx 0x3
shr r13d 0x3
jmp r-xdata
test esi esi
je r-xdata
lea rax [ r--data ]
mov [ rbx + 0x20 ] rax
mov [ r14 ] 0x1b
jmp r-xdata
mov edx r13d
dec eax
shr r13d 0x2
movzx r8d [ r14 + rax * 2 + 0x88 ]
and edx 0x3
add edx 0x3
add edi 0xfffffffe
jmp r-xdata
movzx eax [ r12 ]
mov ecx edi
add edi 0x8
shl eax cl
dec esi
inc r12
add r13d eax
cmp edi edx
jb r-xdata
mov ecx [ r14 + 0x68 ]
mov eax 0x1
shl eax cl
lea ecx [ rax - 0x1 ]
mov eax r13d
and rcx rax
mov rax [ r14 + 0x58 ]
mov eax [ rax + rcx * 4 ]
mov ecx eax
mov [ rbp - 0x4c ] eax
shr ecx 0x8
movzx ecx cl
cmp ecx edi
jbe r-xdata
test esi esi
je r-xdata
movzx ecx al
mov [ r14 ] 0x13
and ecx 0xf
mov [ r14 + 0x50 ] ecx
lea rax [ r--data ]
mov [ rbx + 0x20 ] rax
mov [ r14 ] 0x1b
jmp r-xdata
movzx eax [ r12 ]
mov ecx edi
movzx r9d r11b
shl eax cl
mov r8d 0x1
movzx ecx dl
add ecx r9d
add r13d eax
movzx eax r10w
shl r8d cl
mov ecx r9d
add edi 0x8
dec r8d
dec esi
inc r12
and r8d r13d
shr r8d cl
add r8d eax
mov rax [ r14 + 0x58 ]
mov eax [ rax + r8 * 4 ]
mov ecx eax
shr ecx 0x8
movzx r8d cl
add r8d r9d
cmp r8d edi
ja r-xdata
shr r13d 0x4
add edi 0xfffffffc
mov ecx r13d
and ecx 0xf
add ecx 0x8
cmp ecx [ r14 + 0x28 ]
jbe r-xdata
mov [ r14 + 0x18 ] eax
mov [ rbx + 0x4c ] eax
test edx edx
je r-xdata
movzx eax [ r12 ]
mov ecx edi
add edi 0x8
shl eax cl
dec esi
inc r12
add r13d eax
cmp edi edx
jb r-xdata
sub eax r9d
mov r8d r15d
add edi eax
movzx eax [ r12 ]
mov ecx edi
add edi 0x8
shl eax cl
dec esi
inc r12
add r13d eax
cmp edi edx
jb r-xdata
mov eax [ r14 + 0x7c ]
lea ecx [ rdx + rax ]
mov eax [ r14 + 0x78 ]
add eax [ r14 + 0x74 ]
cmp ecx eax
ja r-xdata
test esi esi
je r-xdata
test esi esi
je r-xdata
mov eax 0x1
xor r8d r8d
xor edx edx
shl eax cl
xor ecx ecx
mov [ r14 + 0x14 ] eax
call sub_140003e10
shr r13d 0x8
not r13d
mov [ r14 + 0x18 ] eax
mov [ rbx + 0x4c ] eax
and r13d 0x2
mov edi r15d
or r13d 0x9
mov [ r14 ] r13d
mov r13d r15d
jmp r-xdata
lea rax [ r--data ]
mov [ rbx + 0x20 ] rax
mov [ r14 ] 0x1b
jmp r-xdata
nop [ rax + rax ] eax
test esi esi
je r-xdata
mov eax [ r14 + 0x7c ]
mov [ r14 + rax * 2 + 0x88 ] r8w
inc [ r14 + 0x7c ]
dec edx
jne r-xdata
sub_140003410
push rbx
sub rsp 0x20
mov rbx rcx
test rcx rcx
je r-xdata
mov eax 0xfffffffe
add rsp 0x20
pop rbx
retn
mov rax [ rcx + 0x28 ]
test rax rax
je r-xdata
mov r8 [ rcx + 0x38 ]
test r8 r8
je r-xdata
mov rdx [ rax + 0x38 ]
test rdx rdx
je r-xdata
mov rdx [ rbx + 0x28 ]
mov rcx [ rbx + 0x40 ]
call [ rbx + 0x38 ]
mov [ rbx + 0x28 ] 0x0
xor eax eax
add rsp 0x20
pop rbx
retn
mov rcx [ rcx + 0x40 ]
call r8
sub_140003490
mov [ rsp + 0x8 ] rcx
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x38
mov r10 [ rcx + 0x28 ]
mov r14d [ rcx + 0x8 ]
mov rsi [ rcx ]
mov r8 [ rcx + 0x10 ]
mov ecx [ rcx + 0x18 ]
mov r9 [ r10 + 0x60 ]
mov r12d [ r10 + 0x34 ]
mov ebx [ r10 + 0x40 ]
mov r11d [ r10 + 0x44 ]
mov r15 [ r10 + 0x58 ]
sub edx ecx
dec r8
mov eax edx
lea r13d [ rcx - 0x101 ]
mov ecx [ r10 + 0x68 ]
mov ebp 0x1
dec rsi
add r14d 0xfffffffb
mov rdx r8
mov edi ebp
add r13 r8
sub rdx rax
mov eax [ r10 + 0x2c ]
add r14 rsi
mov [ rsp + 0x18 ] rdx
mov edx ebp
mov [ rsp + 0x98 ] eax
mov eax [ r10 + 0x30 ]
shl edx cl
mov ecx [ r10 + 0x6c ]
shl edi cl
mov [ rsp ] eax
mov rax [ r10 + 0x38 ]
dec edi
dec edx
mov [ rsp + 0x8 ] r10
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x10 ] r9
mov [ rsp + 0x28 ] rdx
mov [ rsp + 0x88 ] edi
nop [ rax + rax ] eax
mov eax ebx
and rax rdx
mov r10d [ r15 + rax * 4 ]
mov eax r10d
movzx edx r10b
shr eax 0x8
movzx ecx al
shr ebx cl
sub r11d ecx
test r10b r10b
je r-xdata
movzx eax [ rsi + 0x1 ]
mov ecx r11d
add rsi 0x2
shl eax cl
lea ecx [ r11 + 0x8 ]
add ebx eax
movzx eax [ rsi ]
shl eax cl
add ebx eax
add r11d 0x10
inc r8
shr r10d 0x10
mov [ r8 ] r10b
jmp r-xdata
test dl 0x10
jne r-xdata
cmp rsi r14
jae r-xdata
shr r10d 0x10
and edx 0xf
je r-xdata
test dl 0x40
jne r-xdata
mov rdx [ rsp + 0x8 ]
mov rdi [ rsp + 0x80 ]
cmp r8 r13
jae r-xdata
cmp r11d 0xf
jae r-xdata
cmp r11d edx
jae r-xdata
mov rdi [ rsp + 0x80 ]
test dl 0x20
mov rdx [ rsp + 0x8 ]
je r-xdata
mov ecx edx
shr r10d 0x10
mov eax ebp
shl eax cl
dec eax
and eax ebx
add eax r10d
mov r10d [ r15 + rax * 4 ]
mov eax r10d
movzx edx r10b
shr eax 0x8
movzx ecx al
shr ebx cl
sub r11d ecx
test r10b r10b
jne r-xdata
mov rdx [ rsp + 0x28 ]
jmp r-xdata
mov eax ebx
mov ecx edi
and rcx rax
mov edi [ r9 + rcx * 4 ]
mov eax edi
movzx edx dil
mov [ rsp + 0x90 ] edi
shr eax 0x8
movzx ecx al
shr ebx cl
sub r11d ecx
test dl 0x10
jne r-xdata
movzx eax [ rsi + 0x1 ]
mov ecx r11d
add rsi 0x2
shl eax cl
lea ecx [ r11 + 0x8 ]
add ebx eax
movzx eax [ rsi ]
shl eax cl
add ebx eax
add r11d 0x10
mov ecx edx
mov eax ebp
shl eax cl
dec eax
and eax ebx
shr ebx cl
add r10d eax
sub r11d edx
movzx eax [ rsi + 0x1 ]
inc rsi
mov ecx r11d
shl eax cl
add ebx eax
add r11d 0x8
lea rax [ r--data ]
mov [ rdi + 0x20 ] rax
mov [ rdx ] 0x1b
jmp r-xdata
mov [ rdx ] 0xb
jmp r-xdata
cmp r11d 0xf
jae r-xdata
and edx 0xf
shr edi 0x10
cmp r11d edx
jae r-xdata
nop [ rax + rax ] eax
mov ecx r11d
shr ecx 0x3
mov eax ecx
sub rsi rax
lea eax [ rcx * 8 ]
sub r11d eax
lea rax [ rsi + 0x1 ]
sub r14 rsi
mov [ rdi ] rax
lea rax [ r8 + 0x1 ]
mov ecx r11d
mov [ rdi + 0x10 ] rax
shl ebp cl
lea rax [ r14 + 0x5 ]
mov [ rdi + 0x8 ] eax
dec ebp
and ebx ebp
sub r13 r8
lea rax [ r13 + 0x101 ]
mov [ rdi + 0x18 ] eax
mov [ rdx + 0x40 ] ebx
mov [ rdx + 0x44 ] r11d
add rsp 0x38
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov ecx edx
mov eax ebp
sub r11d edx
shl eax cl
dec eax
and eax ebx
shr ebx cl
add edi eax
mov eax r8d
sub eax [ rsp + 0x18 ]
cmp edi eax
jbe r-xdata
movzx eax [ rsi + 0x1 ]
inc rsi
mov ecx r11d
shl eax cl
add r11d 0x8
add ebx eax
cmp r11d edx
jae r-xdata
lea rax [ r--data ]
movzx eax [ rsp + 0x92 ]
mov ecx edx
mov edx ebp
shl edx cl
dec edx
and edx ebx
add edx eax
mov edi [ r9 + rdx * 4 ]
mov eax edi
movzx edx dil
mov [ rsp + 0x90 ] edi
shr eax 0x8
movzx ecx al
shr ebx cl
sub r11d ecx
test dl 0x10
je r-xdata
mov eax edi
mov rcx r8
sub rcx rax
nop [ rax + rax ] ax
mov ecx edi
sub ecx eax
cmp ecx [ rsp ]
ja r-xdata
movzx eax [ rsi + 0x1 ]
inc rsi
mov ecx r11d
shl eax cl
add ebx eax
add r11d 0x8
test dl 0x40
jne r-xdata
movzx eax [ rcx + 0x1 ]
add rcx 0x3
add r8 0x3
mov [ r8 - 0x2 ] al
movzx eax [ rcx - 0x1 ]
add r10d 0xfffffffd
mov [ r8 - 0x1 ] al
movzx eax [ rcx ]
mov [ r8 ] al
cmp r10d 0x2
ja r-xdata
test r10d r10d
je r-xdata
lea rax [ r--data ]
jmp r-xdata
mov rdx [ rsp + 0x20 ]
lea r9 [ rdx - 0x1 ]
test r12d r12d
jne r-xdata
mov edi [ rsp + 0x88 ]
movzx eax [ rcx + 0x1 ]
mov edi [ rsp + 0x88 ]
inc r8
mov [ r8 ] al
cmp r10d ebp
jbe r-xdata
mov rdi [ rsp + 0x80 ]
mov rdx [ rsp + 0x8 ]
mov [ rdi + 0x20 ] rax
mov [ rdx ] 0x1b
jmp r-xdata
mov eax r12d
sub eax ecx
cmp r12d ecx
jae r-xdata
mov eax [ rsp + 0x98 ]
sub eax ecx
add r9 rax
cmp ecx r10d
jae r-xdata
movzx eax [ rcx + 0x2 ]
inc r8
mov [ r8 ] al
jmp r-xdata
add r9 rax
cmp ecx r10d
jae r-xdata
add eax [ rsp + 0x98 ]
sub ecx r12d
add r9 rax
cmp ecx r10d
jae r-xdata
cmp r10d 0x2
jbe r-xdata
sub r10d ecx
nop [ rax + rax ] ax
sub r10d ecx
nop
sub r10d ecx
sub r9 r8
nop [ rax + rax ] ax
test r10d r10d
je r-xdata
lea ecx [ r10 - 0x3 ]
mov eax 0xaaaaaaab
mul ecx
shr edx 0x1
lea ecx [ rdx + 0x1 ]
movzx eax [ r9 + 0x1 ]
inc r9
inc r8
dec ecx
mov [ r8 ] al
jne r-xdata
jmp r-xdata
movzx eax [ r9 + 0x1 ]
inc r9
inc r8
dec ecx
mov [ r8 ] al
jne r-xdata
mov eax edi
mov r9 r8
sub r9 rax
movzx eax [ r9 + r8 + 0x1 ]
inc r8
dec ecx
mov [ r8 ] al
jne r-xdata
lea r9 [ rdx - 0x1 ]
cmp r12d r10d
jae r-xdata
mov r9 [ rsp + 0x10 ]
movzx eax [ r9 + 0x1 ]
mov edi [ rsp + 0x88 ]
inc r8
mov [ r8 ] al
cmp r10d ebp
jbe r-xdata
movzx eax [ r9 + 0x1 ]
add r9 0x3
add r8 0x3
mov [ r8 - 0x2 ] al
movzx eax [ r9 - 0x1 ]
add r10d 0xfffffffd
dec rcx
mov [ r8 - 0x1 ] al
movzx eax [ r9 ]
mov [ r8 ] al
jne r-xdata
mov ecx r12d
sub r10d r12d
nop
mov r9 [ rsp + 0x10 ]
jmp r-xdata
movzx eax [ r9 + 0x2 ]
inc r8
mov [ r8 ] al
movzx eax [ r9 + 0x1 ]
inc r9
inc r8
dec ecx
mov [ r8 ] al
jne r-xdata
jmp r-xdata
sub_140003970
mov [ rsp + 0x8 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x17 ]
sub rsp 0xa0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x7 ] rax
mov r10 [ rbp + 0x77 ]
xor r13d r13d
mov esi ecx
mov [ rbp - 0x75 ] ecx
mov r14 r9
mov [ rbp - 0x51 ] r9
mov r9 [ rbp + 0x7f ]
lea rdi [ rbp - 0x39 ]
movzx eax r13w
mov ecx 0x10
mov r12 rdx
mov [ rbp - 0x49 ] rdx
mov [ rbp - 0x61 ] r9
mov [ rbp - 0x41 ] r10
[ rdi ]
test r8d r8d
je r-xdata
mov ebx [ r10 ]
mov r11d 0xf
lea rax [ rbp - 0x1b ]
or r15d 0xffffffff
mov rcx rdx
mov edx r8d
nop [ rax + rax ] eax
cmp ebx r11d
cmova ebx r11d
test r11d r11d
jne r-xdata
add r11d r15d
sub rax 0x2
cmp r11d 0x1
jae r-xdata
movzx eax [ rcx ]
add rcx 0x2
inc [ rbp + rax * 2 - 0x39 ]
dec rdx
jne r-xdata
mov r10d 0x1
lea rax [ rbp - 0x37 ]
mov rcx [ r14 ]
mov [ rsp ] 0x140
mov eax [ rsp ]
mov [ rcx ] eax
add [ r14 ] 0x4
mov rcx [ r14 ]
mov [ rcx ] eax
add [ r14 ] 0x4
mov [ r10 ] 0x1
xor eax eax
jmp r-xdata
cmp [ rax ] r13w
jne r-xdata
cmp ebx r10d
mov edi 0x1
cmovb ebx r10d
mov edx edi
mov [ rbp - 0x79 ] ebx
nop [ rax ] eax
inc r10d
add rax 0x2
cmp r10d 0xf
jbe r-xdata
mov rcx [ rbp + 0x7 ]
xor rcx rsp
call sub_140004460
mov rbx [ rsp + 0xe0 ]
add rsp 0xa0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
or eax 0xffffffff
inc edx
cmp edx 0xf
jbe r-xdata
cmp [ rax ] r13w
jne r-xdata
mov eax edx
add edi edi
movzx ecx [ rbp + rax * 2 - 0x39 ]
sub edi ecx
js r-xdata
test edi edi
jle r-xdata
mov [ rbp - 0x17 ] r13w
mov rcx r13
mov edx 0xe
nop [ rax + rax ] eax
test esi esi
je r-xdata
movzx eax [ rbp + rcx - 0x37 ]
add rcx 0x2
add ax [ rbp + rcx - 0x19 ]
dec rdx
mov [ rbp + rcx - 0x17 ] ax
jne r-xdata
mov edi r13d
test r8d r8d
je r-xdata
cmp r11d 0x1
jne r-xdata
mov ecx esi
test esi esi
je r-xdata
mov rdx r12
mov [ rbp - 0x69 ] r9
mov [ rbp - 0x59 ] r9
mov edx 0x13
dec ecx
je r-xdata
inc edi
add rdx 0x2
cmp edi r8d
jb r-xdata
movzx eax [ rdx ]
movzx ecx [ rbp + rax * 2 - 0x19 ]
mov [ r9 + rcx * 2 ] di
movzx eax [ rdx ]
inc [ rbp + rax * 2 - 0x19 ]
movzx eax r10b
mov ecx r8d
sub al r12b
mov [ rsp + 0x1 ] al
movzx eax [ r9 + rcx * 2 ]
cmp eax edx
jge r-xdata
cmp esi 0x5b0
jb r-xdata
lea rax [ r--data ]
mov edx 0x100
sub rax 0x202
mov [ rbp - 0x59 ] rax
lea rax [ r--data ]
sub rax 0x202
mov [ rbp - 0x69 ] rax
jmp r-xdata
lea rax [ r--data ]
or edx 0xffffffff
mov [ rbp - 0x59 ] rax
lea rax [ r--data ]
mov [ rbp - 0x69 ] rax
jmp r-xdata
cmp [ rdx ] r13w
je r-xdata
jle r-xdata
mov [ rsp ] 0x0
jmp r-xdata
mov eax 0x1
jmp r-xdata
mov ecx ebx
mov esi 0x1
xor r12d r12d
shl esi cl
cmp [ rbp - 0x75 ] 0x1
mov edi r13d
lea eax [ rsi - 0x1 ]
mov r8d r13d
mov [ rsp + 0x8 ] r13d
mov r13 [ r14 ]
mov [ rsp + 0x4 ] edx
mov [ rbp - 0x7d ] esi
mov [ rbp - 0x71 ] eax
jne r-xdata
mov [ rsp ] 0x60
xor eax eax
movzx ecx [ r9 + rcx * 2 ]
mov rax [ rbp - 0x69 ]
movzx eax [ rax + rcx * 2 ]
mov [ rsp ] al
mov rax [ rbp - 0x59 ]
movzx eax [ rax + rcx * 2 ]
jmp r-xdata
mov ecx r10d
mov r9d 0x1
mov edx edi
sub ecx r12d
mov [ rsp + 0x2 ] ax
mov eax [ rsp ]
shl r9d cl
mov ecx r12d
mov r8d esi
shr edx cl
add edx esi
sub edx r9d
sub r8d r9d
mov [ r13 + rdx * 4 ] eax
jne r-xdata
lea ecx [ r10 - 0x1 ]
mov edx 0x1
shl edx cl
test edi edx
je r-xdata
test edx edx
je r-xdata
nop
xor ecx ecx
mov edi ecx
lea eax [ rdx - 0x1 ]
and eax edi
xor ecx ecx
lea edi [ rdx + rax ]
jmp r-xdata
shr edx 0x1
test edi edx
jne r-xdata
mov r9 [ rbp - 0x61 ]
cmp r10d r11d
je r-xdata
mov r8d [ rsp + 0x8 ]
mov eax r10d
mov edx 0xffff
inc r8d
add [ rbp + rax * 2 - 0x39 ] dx
mov [ rsp + 0x8 ] r8d
jne r-xdata
mov ebx [ rbp - 0x71 ]
and ebx edi
cmp ebx r15d
je r-xdata
mov r8 [ rbp - 0x51 ]
movzx eax r10b
mov [ rsp ] 0x40
sub al r12b
mov [ rsp + 0x2 ] cx
mov [ rsp + 0x1 ] al
test edi edi
je r-xdata
mov r9 [ rbp - 0x61 ]
mov rax [ rbp - 0x49 ]
movzx ecx [ r9 + r8 * 2 ]
movzx r10d [ rax + rcx * 2 ]
jmp r-xdata
mov ebx [ rbp - 0x79 ]
nop [ rax + rax ] ax
test r12d r12d
mov r9d r10d
mov edx 0x1
cmove r12d [ rbp - 0x79 ]
lea r13 [ r13 + rsi * 4 ]
sub r9d r12d
mov ecx r9d
lea r8d [ r12 + r9 ]
shl edx cl
cmp r8d r11d
jae r-xdata
mov eax [ rbp - 0x7d ]
shl rax 0x2
add [ r8 ] rax
mov rax [ rbp - 0x41 ]
mov [ rax ] ebx
xor eax eax
jmp r-xdata
nop [ rax + rax ] eax
mov edx [ rsp + 0x4 ]
cmp r10d ebx
jbe r-xdata
mov r14d [ rbp - 0x7d ]
mov ecx r9d
mov esi 0x1
shl esi cl
add r14d esi
cmp [ rbp - 0x75 ] 0x1
mov [ rbp - 0x7d ] r14d
jne r-xdata
nop [ rax + rax ] eax
mov eax [ rsp ]
mov ecx r12d
mov edx edi
shr rdx cl
lea ecx [ r10 - 0x1 ]
mov [ r13 + rdx * 4 ] eax
mov edx 0x1
shl edx cl
test edi edx
je r-xdata
mov eax [ rbp - 0x71 ]
and eax edi
cmp eax r15d
je r-xdata
mov rcx [ rbp - 0x51 ]
mov edx [ rsp + 0x4 ]
mov r8d [ rsp + 0x8 ]
mov rax [ rcx ]
mov r15d ebx
mov [ rax + rbx * 4 ] r9b
mov rax [ rcx ]
mov ebx [ rbp - 0x79 ]
mov r9 [ rbp - 0x61 ]
mov [ rax + r15 * 4 + 0x1 ] bl
mov rcx [ rcx ]
mov rax r13
sub rax rcx
sar rax 0x2
mov [ rcx + r15 * 4 + 0x2 ] ax
jmp r-xdata
cmp r14d 0x5b0
jae r-xdata
inc r8d
inc r9d
add edx edx
cmp r8d r11d
jb r-xdata
test edx edx
je r-xdata
nop [ rax + rax ] eax
mov r13 [ r8 ]
mov r12d ecx
mov r10d ebx
mov [ rsp + 0x1 ] bl
movzx ecx [ rbp + r8 * 2 - 0x39 ]
sub edx ecx
test edx edx
jle r-xdata
lea eax [ rdx - 0x1 ]
mov ecx 0x0
and edi eax
add edi edx
jne r-xdata
shr edx 0x1
test edi edx
jne r-xdata
test r12d r12d
je r-xdata
sub_140003e10
sub rsp 0x8
mov r10d ecx
mov r11 rdx
movzx r9d cx
shr r10d 0x10
cmp r8d 0x1
jne r-xdata
test rdx rdx
jne r-xdata
movzx eax [ rdx ]
add r9d eax
cmp r9d 0xfff1
jb r-xdata
cmp r8d 0x10
jae r-xdata
lea eax [ rdx + 0x1 ]
add rsp 0x8
retn
add r10d r9d
cmp r10d 0xfff1
jb r-xdata
add r9d 0xffff000f
cmp r8d 0x15b0
jb r-xdata
test r8d r8d
je r-xdata
shl r10d 0x10
or r10d r9d
mov eax r10d
add rsp 0x8
retn
add r10d 0xffff000f
shl r10d 0x10
or r10d r9d
mov eax r10d
add rsp 0x8
retn
test r8d r8d
je r-xdata
mov eax 0x5e6ea9af
mov [ rsp ] rbx
mul r8d
shr edx 0xb
mov ebx edx
nop [ rax ] eax
cmp r9d 0xfff1
jb r-xdata
nop [ rax ] eax
cmp r8d 0x10
jb r-xdata
movzx eax [ r11 ]
add r11 0x10
add r9d eax
movzx eax [ r11 - 0xf ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0xe ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0xd ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0xc ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0xb ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0xa ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x9 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x8 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x7 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x6 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x5 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x4 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x3 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x2 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x1 ]
add r10d r9d
add r9d eax
add r10d r9d
dec ecx
jne r-xdata
mov eax 0x80078071
mul r9d
mov eax 0x80078071
shr edx 0xf
imul edx edx 0xffff000f
add r9d edx
mul r10d
shr edx 0xf
imul edx edx 0xffff000f
add r10d edx
dec rbx
jne r-xdata
mov eax 0x80078071
mul r10d
shr edx 0xf
imul edx edx 0xf
lea eax [ r10 + rdx ]
shl eax 0x10
or eax r9d
add rsp 0x8
retn
add r9d 0xffff000f
movzx eax [ r11 ]
inc r11
add r9d eax
add r10d r9d
dec r8d
jne r-xdata
test r8d r8d
je r-xdata
mov ecx r8d
shr rcx 0x4
nop [ rax + rax ] ax
add r8d 0xffffea50
mov ecx 0x15b
nop [ rax ] eax
mov rbx [ rsp ]
mov eax 0x80078071
mul r9d
mov eax 0x80078071
shr edx 0xf
imul edx edx 0xffff000f
add r9d edx
mul r10d
shr edx 0xf
imul edx edx 0xffff000f
add r10d edx
nop [ rax + rax ] ax
movzx eax [ r11 ]
add r8d 0xfffffff0
add r11 0x10
add r9d eax
movzx eax [ r11 - 0xf ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0xe ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0xd ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0xc ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0xb ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0xa ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x9 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x8 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x7 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x6 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x5 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x4 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x3 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x2 ]
add r10d r9d
add r9d eax
movzx eax [ r11 - 0x1 ]
add r10d r9d
add r9d eax
add r10d r9d
dec rcx
jne r-xdata
movzx eax [ r11 ]
inc r11
add r9d eax
add r10d r9d
dec r8d
jne r-xdata
sub_140004120
mov [ rsp + 0x10 ] rbx
push rsi
mov r10d ecx
mov ebx r8d
mov r11 rdx
lea rsi [ r--data ]
not r10d
test r8d r8d
je r-xdata
cmp ebx 0x20
jb r-xdata
nop
cmp ebx 0x4
jb r-xdata
mov [ rsp + 0x10 ] rdi
mov edi ebx
shr rdi 0x5
nop [ rax + rax ] eax
movzx ecx [ r11 ]
mov eax r10d
inc r11
xor rcx rax
shr eax 0x8
movzx edx cl
mov r10d [ rsi + rdx * 4 ]
xor r10d eax
dec ebx
jne r-xdata
test ebx ebx
je r-xdata
mov r9d ebx
shr r9 0x2
nop [ rax + rax ] ax
xor r10d [ r11 ]
mov eax r10d
shr rax 0x10
movzx edx al
mov eax r10d
mov r8d [ rsi + rdx * 4 + 0x400 ]
shr rax 0x8
movzx ecx al
mov eax r10d
xor r8d [ rsi + rcx * 4 + 0x800 ]
shr rax 0x18
xor r8d [ rsi + rax * 4 ]
movzx eax r10b
xor r8d [ rsi + rax * 4 + 0xc00 ]
xor r8d [ r11 + 0x4 ]
mov r9d r8d
mov eax r8d
shr rax 0x10
movzx edx al
mov eax r8d
mov r8d [ rsi + rdx * 4 + 0x400 ]
shr rax 0x8
movzx ecx al
mov eax r9d
xor r8d [ rsi + rcx * 4 + 0x800 ]
shr rax 0x18
xor r8d [ rsi + rax * 4 ]
movzx eax r9b
xor r8d [ rsi + rax * 4 + 0xc00 ]
xor r8d [ r11 + 0x8 ]
mov r9d r8d
mov eax r8d
shr rax 0x10
movzx edx al
mov eax r8d
mov r8d [ rsi + rdx * 4 + 0x400 ]
shr rax 0x8
movzx ecx al
mov eax r9d
xor r8d [ rsi + rcx * 4 + 0x800 ]
shr rax 0x18
xor r8d [ rsi + rax * 4 ]
movzx eax r9b
xor r8d [ rsi + rax * 4 + 0xc00 ]
xor r8d [ r11 + 0xc ]
mov r9d r8d
mov eax r8d
shr rax 0x10
movzx edx al
mov eax r8d
mov r8d [ rsi + rdx * 4 + 0x400 ]
shr rax 0x8
movzx ecx al
mov eax r9d
xor r8d [ rsi + rcx * 4 + 0x800 ]
shr rax 0x18
xor r8d [ rsi + rax * 4 ]
movzx eax r9b
xor r8d [ rsi + rax * 4 + 0xc00 ]
xor r8d [ r11 + 0x10 ]
mov r9d r8d
mov eax r8d
shr rax 0x10
movzx edx al
mov eax r8d
mov r8d [ rsi + rdx * 4 + 0x400 ]
shr rax 0x8
movzx ecx al
mov eax r9d
xor r8d [ rsi + rcx * 4 + 0x800 ]
shr rax 0x18
xor r8d [ rsi + rax * 4 ]
movzx eax r9b
xor r8d [ rsi + rax * 4 + 0xc00 ]
xor r8d [ r11 + 0x14 ]
mov eax r8d
mov r9d r8d
shr rax 0x10
movzx edx al
mov eax r8d
shr rax 0x8
mov r8d [ rsi + rdx * 4 + 0x400 ]
movzx ecx al
mov eax r9d
xor r8d [ rsi + rcx * 4 + 0x800 ]
shr rax 0x18
add r11 0x20
xor r8d [ rsi + rax * 4 ]
movzx eax r9b
add ebx 0xffffffe0
xor r8d [ rsi + rax * 4 + 0xc00 ]
xor r8d [ r11 - 0x8 ]
mov r9d r8d
mov eax r8d
shr rax 0x10
movzx edx al
mov eax r8d
mov r8d [ rsi + rdx * 4 + 0x400 ]
shr rax 0x8
movzx ecx al
mov eax r9d
xor r8d [ rsi + rcx * 4 + 0x800 ]
shr rax 0x18
xor r8d [ rsi + rax * 4 ]
movzx eax r9b
xor r8d [ rsi + rax * 4 + 0xc00 ]
xor r8d [ r11 - 0x4 ]
mov eax r8d
shr rax 0x10
movzx edx al
mov eax r8d
mov r10d [ rsi + rdx * 4 + 0x400 ]
shr rax 0x8
movzx ecx al
mov eax r8d
xor r10d [ rsi + rcx * 4 + 0x800 ]
shr rax 0x18
xor r10d [ rsi + rax * 4 ]
movzx eax r8b
xor r10d [ rsi + rax * 4 + 0xc00 ]
dec rdi
jne r-xdata
mov rdi [ rsp + 0x10 ]
test r11b 0x3
je r-xdata
mov rbx [ rsp + 0x18 ]
not r10d
mov eax r10d
pop rsi
retn
nop [ rax + rax ] ax
xor r10d [ r11 ]
add r11 0x4
add ebx 0xfffffffc
mov r8d r10d
mov eax r10d
shr rax 0x10
movzx edx al
mov eax r10d
mov r10d [ rsi + rdx * 4 + 0x400 ]
shr rax 0x8
movzx ecx al
mov eax r8d
xor r10d [ rsi + rcx * 4 + 0x800 ]
shr rax 0x18
xor r10d [ rsi + rax * 4 ]
movzx eax r8b
xor r10d [ rsi + rax * 4 + 0xc00 ]
dec r9
jne r-xdata
movzx ecx [ r11 ]
mov eax r10d
inc r11
xor rcx rax
shr eax 0x8
movzx edx cl
mov r10d [ rsi + rdx * 4 ]
xor r10d eax
dec ebx
jne r-xdata
sub_140004480
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x20 ] r9
push rbp
push rbx
push rsi
push rdi
mov rbp rsp
sub rsp 0x58
and [ rbp - 0x38 ] 0x0
mov rbx rdx
xor edx edx
mov rsi r8
mov rdi rcx
lea r8d [ rdx + 0x28 ]
lea rcx [ rbp - 0x30 ]
call sub_140004920
test rsi rsi
jne r-xdata
test rbx rbx
je r-xdata
call sub_14000670c
mov [ rax ] 0x16
call sub_1400066a4
or eax 0xffffffff
jmp r-xdata
mov eax 0x7fffffff
lea r9 [ rbp + 0x40 ]
lea rcx [ rbp - 0x38 ]
cmp rbx rax
mov rdx rsi
mov [ rbp - 0x20 ] 0x42
cmova ebx eax
xor r8d r8d
mov [ rbp - 0x28 ] rdi
mov [ rbp - 0x30 ] ebx
mov [ rbp - 0x38 ] rdi
call sub_140005a48
mov ebx eax
test rdi rdi
je r-xdata
test rdi rdi
je r-xdata
add rsp 0x58
pop rdi
pop rsi
pop rbx
pop rbp
retn
dec [ rbp - 0x30 ]
js r-xdata
lea rdx [ rbp - 0x38 ]
xor ecx ecx
call sub_140005774
mov rax [ rbp - 0x38 ]
mov [ rax ] 0x0
jmp r-xdata
mov eax ebx
sub_140004550
mov r11 rcx
or r8 r8
je r-xdata
mov rax r11
retn
sub rcx rdx
test dl 0x7
je r-xdata
mov rax [ rdx ]
sub r8 0x8
jbe r-xdata
mov al [ rdx ]
test al al
mov [ rcx + rdx ] al
je r-xdata
add r8 0x8
je r-xdata
mov r9 0x7efefefefefefeff
add r9 rax
mov r10 rax
xor r10 0xffffffffffffffff
xor r10 r9
mov r9 0x8101010101010100
test r9 r10
je r-xdata
add rcx rdx
xor rdx rdx
cmp r8 0x10
jb r-xdata
inc rdx
dec r8
je r-xdata
mov rax r11
retn
test al al
mov [ rcx + rdx ] al
je r-xdata
mov [ rcx + rdx ] rax
add rdx 0x8
sub r8 0x1
jb r-xdata
test cl 0x7
je r-xdata
test dl 0x7
jne r-xdata
inc rdx
dec r8
je r-xdata
mov rax r11
retn
mov [ rcx ] dl
inc rcx
jmp r-xdata
sub r8 0x20
jb r-xdata
inc rcx
mov [ rcx ] dl
dec r8
jmp r-xdata
jmp r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
add r8 0x20
mov [ rcx ] rdx
mov [ rcx + 0x8 ] rdx
mov [ rcx + 0x10 ] rdx
mov [ rcx + 0x18 ] rdx
add rcx 0x20
sub r8 0x20
jae r-xdata
inc rdx
dec r8
je r-xdata
add r8 0x8
mov [ rcx ] rdx
add rcx 0x8
jmp r-xdata
shr rax 0x10
test al al
mov [ rcx + rdx ] al
je r-xdata
sub r8 0x8
jb r-xdata
inc rdx
dec r8
je r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
inc rdx
dec r8
je r-xdata
shr rax 0x10
test al al
mov [ rcx + rdx ] al
je r-xdata
inc rdx
dec r8
je r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
inc rdx
dec r8
je r-xdata
shr eax 0x10
test al al
mov [ rcx + rdx ] al
je r-xdata
inc rdx
dec r8
je r-xdata
test ah ah
mov [ rcx + rdx ] ah
je r-xdata
inc rdx
dec r8
jne r-xdata
sub_1400046b4
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0xa0
lea rcx [ rsp + 0x30 ]
call [ GetStartupInfoW@IAT ]
mov r11d 0x5a4d
lea rdi [ __dos_header ]
cmp [ __dos_header ] r11w
je r-xdata
movsxd rax [ r--data ]
add rax rdi
cmp [ rax ] 0x4550
jne r-xdata
xor ebx ebx
jmp r-xdata
mov ecx 0x20b
cmp [ rax + 0x18 ] cx
jne r-xdata
mov [ rsp + 0xb0 ] ebx
call sub_140007c48
test eax eax
jne r-xdata
xor ebx ebx
cmp [ rax + 0x84 ] 0xe
jbe r-xdata
call sub_140007bc4
test eax eax
jne r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
cmp [ rax + 0xf8 ] ebx
setne bl
call sub_14000788c
nop
call sub_1400075b8
test eax eax
jns r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov ecx 0x1c
call sub_140006bdc
mov ecx 0xff
call sub_14000682c
call sub_140006e3c
call [ GetCommandLineA@IAT ]
mov [ rw-data ] rax
call sub_1400074c4
mov [ rw-data ] rax
call sub_1400073cc
test eax eax
jns r-xdata
mov ecx 0x1b
call sub_140006b88
mov ecx 0x10
call sub_140006bdc
mov ecx 0xff
call sub_14000682c
call sub_140006e3c
call sub_1400070cc
test eax eax
jns r-xdata
mov ecx 0x8
call sub_140006b88
mov ecx 0x1
call sub_140006910
test eax eax
je r-xdata
mov ecx 0x9
call sub_140006b88
call sub_140007050
test [ rsp + 0x6c ] 0x1
movzx edx [ rsp + 0x70 ]
mov r9d 0xa
cmovne r9d edx
mov r8 rax
xor edx edx
mov rcx rdi
call sub_1400011c0
mov edi eax
mov [ rsp + 0x20 ] eax
test ebx ebx
jne r-xdata
mov ecx eax
call sub_140006b88
call sub_140006b68
jmp r-xdata
mov ecx eax
call sub_140006b50
mov eax edi
mov rbx [ rsp + 0xb8 ]
add rsp 0xa0
pop rdi
retn
sub_140004820
mov edi eax
cmp [ rsp + 0xb0 ] 0x0
jne r-xdata
call sub_140006b78
nop
mov eax edi
mov rbx [ rsp + 0xb8 ]
add rsp 0xa0
pop rdi
retn
mov ecx eax
call sub_140006b5c
int3
sub_140004864
push rbx
sub rsp 0x40
mov rbx rcx
jmp r-xdata
call sub_1400054ac
test rax rax
je r-xdata
mov rcx rbx
call sub_140007ec4
test eax eax
je r-xdata
add rsp 0x40
pop rbx
retn
mov eax [ rw-data ]
mov r8d 0x1
lea rbx [ r--data ]
test r8b al
jne r-xdata
mov rcx rbx
lea rdx [ rw-data ]
lea rcx [ rsp + 0x20 ]
call sub_1400052d0
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] rbx
call sub_140005418
int3
or eax r8d
lea rdx [ rsp + 0x58 ]
lea rcx [ rw-data ]
mov [ rw-data ] eax
lea rax [ r--data ]
mov [ rsp + 0x58 ] rax
call sub_14000518c
lea rcx [ sub_14000c380 ]
mov [ rw-data ] rbx
call sub_140007ea4
sub_140004920
mov rax rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
movzx edx dl
mov r9 0x101010101010101
imul rdx r9
cmp r8 0x40
jb r-xdata
retn
mov [ rcx ] dl
inc rcx
dec r8
jne r-xdata
mov r9 r8
and r8 0x7
shr r9 0x3
je r-xdata
neg rcx
and ecx 0x7
je r-xdata
nop
nop
add rcx rax
mov r9 r8
and r8 0x3f
shr r9 0x6
jne r-xdata
sub r8 rcx
mov [ rax ] rdx
mov [ rcx ] rdx
add rcx 0x8
dec r9
jne r-xdata
cmp r9 0x1c00
jae r-xdata
movnti [ rcx ] rdx
movnti [ rcx + 0x8 ] rdx
movnti [ rcx + 0x10 ] rdx
add rcx 0x40
movnti [ rcx - 0x28 ] rdx
movnti [ rcx - 0x20 ] rdx
dec r9
movnti [ rcx - 0x18 ] rdx
movnti [ rcx - 0x10 ] rdx
movnti [ rcx - 0x8 ] rdx
jne r-xdata
mov [ rcx ] rdx
mov [ rcx + 0x8 ] rdx
mov [ rcx + 0x10 ] rdx
add rcx 0x40
mov [ rcx - 0x28 ] rdx
mov [ rcx - 0x20 ] rdx
dec r9
mov [ rcx - 0x18 ] rdx
mov [ rcx - 0x10 ] rdx
mov [ rcx - 0x8 ] rdx
jne r-xdata
[ rsp ] 0x0
jmp r-xdata
jmp r-xdata
sub_140004a20
sub rsp 0x10
mov [ rsp ] r10
mov [ rsp + 0x8 ] r11
xor r11 r11
lea r10 [ rsp + 0x18 ]
sub r10 rax
cmovb r10 r11
mov r11 [ gs : 0x10 ]
cmp r10 r11
jae r-xdata
mov r10 [ rsp ]
mov r11 [ rsp + 0x8 ]
add rsp 0x10
retn
and r10w 0xf000
lea r11 [ r11 - 0x1000 ]
mov [ r11 ] 0x0
cmp r10 r11
jne r-xdata
sub_140004a70
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx + 0x18 ] 0x0
test rdx rdx
jne r-xdata
movups xmm0 [ rdx ]
movdqu [ rcx ] xmm0
call sub_140007a6c
mov [ rbx + 0x10 ] rax
mov rdx [ rax + 0xc0 ]
mov [ rbx ] rdx
mov rcx [ rax + 0xb8 ]
mov [ rbx + 0x8 ] rcx
cmp rdx [ rw-data ]
je r-xdata
mov rax [ rw-data ]
cmp [ rbx + 0x8 ] rax
je r-xdata
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
mov rax [ rbx + 0x10 ]
test [ rax + 0xc8 ] 0x2
jne r-xdata
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
call sub_140008a44
mov [ rbx ] rax
mov rax rbx
add rsp 0x20
pop rbx
retn
or [ rax + 0xc8 ] 0x2
mov [ rbx + 0x18 ] 0x1
jmp r-xdata
call sub_140008174
mov [ rbx + 0x8 ] rax
sub_140004b14
mov r11 rsp
mov [ r11 + 0x8 ] rbx
mov [ r11 + 0x18 ] rbp
mov [ r11 + 0x20 ] rsi
mov [ r11 + 0x10 ] rdx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r15 [ r9 + 0x8 ]
mov r14 [ r9 ]
mov eax [ rcx + 0x4 ]
mov rdi [ r9 + 0x38 ]
sub r14 r15
mov r12 r9
mov r13 rdx
mov rbp rcx
test al 0x66
jne r-xdata
mov r8 [ r9 + 0x20 ]
xor ebp ebp
xor r13d r13d
sub r8 r15
test al 0x20
je r-xdata
movsxd rsi [ r9 + 0x48 ]
mov [ r11 - 0x38 ] rcx
mov [ r11 - 0x30 ] r8
mov rax rsi
cmp esi [ rdi ]
jae r-xdata
movsxd rsi [ r9 + 0x48 ]
mov rbx rsi
cmp esi [ rdi ]
jae r-xdata
xor edx edx
cmp [ rdi ] edx
jbe r-xdata
mov eax 0x1
add rax rax
lea rbx [ rdi + rax * 8 + 0xc ]
inc rbx
shl rbx 0x4
add rbx rdi
lea rcx [ rdi + 0x8 ]
inc esi
add rbx 0x10
cmp esi [ rdi ]
jae r-xdata
mov eax [ rbx - 0x4 ]
cmp r14 rax
jae r-xdata
inc esi
add rbx 0x10
cmp esi [ rdi ]
jb r-xdata
mov eax [ rbx - 0x8 ]
cmp r14 rax
jae r-xdata
inc edx
add rcx 0x10
cmp edx [ rdi ]
jae r-xdata
mov eax [ rcx ]
cmp r8 rax
jbe r-xdata
jmp r-xdata
cmp [ rbx + 0x4 ] 0x0
je r-xdata
mov eax [ rbx - 0xc ]
cmp r14 rax
jb r-xdata
test r13d r13d
je r-xdata
jmp r-xdata
mov eax edx
add rax rax
mov ecx [ rdi + rax * 8 + 0x10 ]
test ecx ecx
jne r-xdata
mov eax [ rbx - 0x8 ]
cmp r14 rax
jb r-xdata
cmp [ rbx ] 0x1
je r-xdata
test ebp ebp
je r-xdata
cmp r13d [ rbx ]
je r-xdata
mov eax [ rcx - 0x4 ]
cmp r8 rax
jb r-xdata
mov r13d ecx
mov ebp [ rdi + rax * 8 + 0xc ]
jmp r-xdata
cmp [ rbp ] 0xe06d7363
jne r-xdata
mov eax [ rbx ]
lea rcx [ rsp + 0x30 ]
mov rdx r13
add rax r15
call rax
test eax eax
js r-xdata
cmp [ rbx ] 0x0
jne r-xdata
cmp ebp [ rbx - 0x4 ]
je r-xdata
mov ecx [ rbx + 0x4 ]
mov r8d 0x1
mov rdx r13
add rcx r15
call sub_140008b00
mov rax [ r12 + 0x40 ]
mov edx [ rbx + 0x4 ]
movsxd r9 [ rbp ]
mov [ rsp + 0x28 ] rax
mov rax [ r12 + 0x28 ]
add rdx r15
mov r8 rbp
mov rcx r13
mov [ rsp + 0x20 ] rax
call [ RtlUnwindEx@IAT ]
call sub_140008b30
cmp [ r--data ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
jle r-xdata
mov rdx [ rsp + 0x78 ]
lea eax [ rsi + 0x1 ]
mov cl 0x1
mov [ r12 + 0x48 ] eax
mov r8d [ rbx - 0x4 ]
add r8 r15
call r8
lea rcx [ r--data ]
call sub_140008bc0
test eax eax
je r-xdata
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov edx 0x1
mov rcx rbp
call [ r--data ]
sub_140004d14
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rdi rcx
mov rbp rcx
mov rsi rdx
lea rcx [ rax - 0x28 ]
mov rdx r9
mov rbx r8
call sub_140004a70
test rbp rbp
jne r-xdata
test rsi rsi
jne r-xdata
test rbx rbx
je r-xdata
mov rcx [ rsp + 0x28 ]
cmp [ rcx + 0x8 ] 0x0
jne r-xdata
test rbx rbx
jne r-xdata
call sub_14000670c
mov [ rax ] 0x16
call sub_1400066a4
cmp [ rsp + 0x38 ] 0x0
je r-xdata
test rbx rbx
je r-xdata
mov r8 rbx
mov rdx rsi
mov rcx rdi
call sub_140004550
cmp [ rsp + 0x38 ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
movzx eax [ rsi ]
dec rbx
test [ rax + rcx + 0x1d ] 0x4
mov [ rdi ] al
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
mov rax rbp
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
inc rdi
inc rsi
test al al
je r-xdata
test rbx rbx
je r-xdata
test rbx rbx
je r-xdata
jmp r-xdata
mov [ rdi ] 0x0
jmp r-xdata
mov al [ rsi + 0x1 ]
add rdi 0x2
dec rbx
mov [ rdi - 0x1 ] al
add rsi 0x2
test al al
jne r-xdata
mov r8 rbx
xor edx edx
mov rcx rdi
call sub_140004920
mov [ rdi - 0x2 ] al
sub_140004e50
mov r11 rcx
sub rdx rcx
jb r-xdata
add rcx r8
cmp r8 0x8
jb r-xdata
cmp r8 0x8
jb r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov al [ rdx + rcx ]
mov [ rcx ] al
inc rcx
dec r8
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
inc rcx
cmp rdx 0xfffffffffffff000
ja r-xdata
mov rax [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
sub rcx 0x20
mov [ rcx + 0x18 ] rax
mov [ rcx + 0x10 ] r10
mov rax [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec r9
mov [ rcx + 0x8 ] rax
mov [ rcx ] r10
jne r-xdata
sub rcx 0x8
mov rax [ rdx + rcx ]
dec r9
mov [ rcx ] rax
jne r-xdata
test cl 0x4
je r-xdata
sub rcx 0x2
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
cmp rdx 0x1000
jb r-xdata
mov rax [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
add rcx 0x20
mov [ rcx - 0x20 ] rax
mov [ rcx - 0x18 ] r10
mov rax [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec r9
mov [ rcx - 0x10 ] rax
mov [ rcx - 0x8 ] r10
jne r-xdata
mov rax [ rdx + rcx ]
mov [ rcx ] rax
add rcx 0x8
dec r9
jne r-xdata
test cl 0x4
je r-xdata
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
add rcx 0x2
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
sub rcx 0x4
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
add rcx 0x4
sub rcx 0x80
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
dec eax
jne r-xdata
add rcx 0x1000
mov eax 0x40
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
add rcx 0x80
dec eax
jne r-xdata
sub rcx 0x1000
mov eax 0x40
mov r9 [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
movnti [ rcx - 0x8 ] r9
movnti [ rcx - 0x10 ] r10
mov r9 [ rdx + rcx - 0x18 ]
mov r10 [ rdx + rcx - 0x20 ]
movnti [ rcx - 0x18 ] r9
movnti [ rcx - 0x20 ] r10
mov r9 [ rdx + rcx - 0x28 ]
mov r10 [ rdx + rcx - 0x30 ]
sub rcx 0x40
movnti [ rcx + 0x18 ] r9
movnti [ rcx + 0x10 ] r10
mov r9 [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec eax
movnti [ rcx + 0x8 ] r9
movnti [ rcx ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
mov r9 [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
movnti [ rcx ] r9
movnti [ rcx + 0x8 ] r10
mov r9 [ rdx + rcx + 0x10 ]
mov r10 [ rdx + rcx + 0x18 ]
movnti [ rcx + 0x10 ] r9
movnti [ rcx + 0x18 ] r10
mov r9 [ rdx + rcx + 0x20 ]
mov r10 [ rdx + rcx + 0x28 ]
add rcx 0x40
movnti [ rcx - 0x20 ] r9
movnti [ rcx - 0x18 ] r10
mov r9 [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec eax
movnti [ rcx - 0x10 ] r9
movnti [ rcx - 0x8 ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
[ rsp ] 0x0
jmp r-xdata
[ rsp ] 0x0
jmp r-xdata
sub_1400051bc
test rdx rdx
je r-xdata
retn
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi rcx
mov rcx rdx
mov rbx rdx
call sub_140008c20
mov rsi rax
lea rcx [ rax + 0x1 ]
call sub_1400054ac
mov [ rdi + 0x8 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
lea rdx [ rsi + 0x1 ]
mov r8 rbx
mov rcx rax
call sub_14000902c
mov [ rdi + 0x10 ] 0x1
sub_140005240
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
cmp rcx rdx
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
call sub_140005218
cmp [ rdi + 0x10 ] 0x0
je r-xdata
mov rax [ rdi + 0x8 ]
mov [ rbx + 0x8 ] rax
mov rdx [ rdi + 0x8 ]
mov rcx rbx
call sub_1400051bc
jmp r-xdata
sub_140005294
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_140005218
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_140005564
sub_1400052fc
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_140009090
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_140005564
sub_140005350
sub rdx rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
test cl 0x7
je r-xdata
xor rax rax
retn
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov r9 r8
shr r9 0x3
jne r-xdata
nop
sbb eax eax
sbb eax 0xffffffff
retn
inc rcx
dec r8
jne r-xdata
shr r9 0x2
je r-xdata
inc rcx
dec r8
test cl 0x7
jne r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov rcx [ rcx + rdx ]
bswap rax
bswap rcx
cmp rax rcx
sbb eax eax
sbb eax 0xffffffff
retn
mov rax [ rcx + 0x8 ]
cmp rax [ rdx + rcx + 0x8 ]
jne r-xdata
add rcx 0x8
dec r9
jne r-xdata
add rcx 0x8
mov rax [ rcx + 0x10 ]
cmp rax [ rdx + rcx + 0x10 ]
jne r-xdata
and r8 0x7
jmp r-xdata
add rcx 0x8
mov rax [ rcx + 0x18 ]
cmp rax [ rdx + rcx + 0x18 ]
jne r-xdata
add rcx 0x8
add rcx 0x20
dec r9
jne r-xdata
and r8 0x1f
sub_140005418
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rdi
push rbp
mov rbp rsp
sub rsp 0x60
mov rdi rdx
mov rbx rcx
lea rcx [ rbp - 0x40 ]
lea rdx [ r--data ]
mov r8d 0x40
call sub_140004e50
lea rdx [ rbp + 0x10 ]
mov rcx rdi
mov [ rbp - 0x18 ] rbx
mov [ rbp - 0x10 ] rdi
call RtlPcToFileHeader
mov r11 rax
mov [ rbp + 0x10 ] rax
mov [ rbp - 0x8 ] rax
test rdi rdi
je r-xdata
mov r8d [ rbp - 0x28 ]
mov edx [ rbp - 0x3c ]
mov ecx [ rbp - 0x40 ]
lea r9 [ rbp - 0x20 ]
call [ RaiseException@IAT ]
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x18 ]
mov rdi [ r11 + 0x20 ]
mov rsp r11
pop rbp
retn
test [ rdi ] 0x8
mov ecx 0x1994000
je r-xdata
mov eax [ rbp - 0x20 ]
test r11 r11
cmove eax ecx
mov [ rbp - 0x20 ] eax
mov [ rbp - 0x20 ] ecx
jmp r-xdata
sub_1400054ac
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
cmp rcx 0xffffffffffffffe0
ja r-xdata
call sub_140007ec4
call sub_14000670c
mov [ rax ] 0xc
xor eax eax
mov edi 0x1
test rcx rcx
cmovne rdi rcx
mov r8 rdi
xor edx edx
call [ HeapAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
call sub_140006e3c
mov ecx 0x1e
call sub_140006bdc
mov ecx 0xff
call sub_14000682c
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
call sub_14000670c
mov [ rax ] 0xc
mov rcx rbx
call sub_140007ec4
test eax eax
je r-xdata
call sub_14000670c
mov [ rax ] 0xc
jmp r-xdata
mov rcx [ rw-data ]
test rcx rcx
jne r-xdata
sub_140005564
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
add rsp 0x20
pop rbx
call sub_14000670c
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_1400066c4
mov [ rbx ] eax
sub_1400055a4
push rbx
sub rsp 0x20
mov r11d [ r8 ]
mov rbx rdx
mov r9 rcx
and r11d 0xfffffff8
test [ r8 ] 0x4
mov r10 rcx
je r-xdata
movsxd rax r11d
mov rdx [ rax + r10 ]
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0x8 ]
add rcx [ rbx + 0x8 ]
test [ rcx + 0x3 ] 0xf
je r-xdata
mov eax [ r8 + 0x8 ]
movsxd r10 [ r8 + 0x4 ]
neg eax
add r10 rcx
movsxd rcx eax
and r10 rcx
xor r9 rdx
mov rcx r9
add rsp 0x20
pop rbx
jmp sub_140004460
movzx eax [ rcx + 0x3 ]
and eax 0xfffffff0
cdqe
add r9 rax
sub_140005628
mov [ rsp + 0x8 ] rcx
sub rsp 0x88
lea rcx [ rw-data ]
call [ RtlCaptureContext@IAT ]
mov rax [ rw-data ]
mov [ rsp + 0x58 ] rax
xor r8d r8d
lea rdx [ rsp + 0x60 ]
mov rcx [ rsp + 0x58 ]
call RtlLookupFunctionEntry
mov [ rsp + 0x50 ] rax
cmp [ rsp + 0x50 ] 0x0
je r-xdata
mov rax [ rsp + 0x88 ]
mov [ rw-data ] rax
lea rax [ rsp + 0x88 ]
add rax 0x8
mov [ rw-data ] rax
mov [ rsp + 0x38 ] 0x0
lea rax [ rsp + 0x48 ]
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x28 ] rax
lea rax [ rw-data ]
mov [ rsp + 0x20 ] rax
mov r9 [ rsp + 0x50 ]
mov r8 [ rsp + 0x58 ]
mov rdx [ rsp + 0x60 ]
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
call [ GetCurrentProcess@IAT ]
mov edx 0xc0000409
mov rcx rax
call [ TerminateProcess@IAT ]
add rsp 0x88
retn
mov ecx 0x1
call sub_140009248
mov rax [ rw-data ]
mov [ rw-data ] rax
mov rax [ rsp + 0x90 ]
mov [ rw-data ] rax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov rax [ rw-data ]
mov [ rsp + 0x68 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x70 ] rax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
mov ecx 0x1
call sub_140009248
xor ecx ecx
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ r--data ]
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
sub_140005774
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov [ rax + 0x8 ] ecx
push rdi
sub rsp 0x20
mov rcx rdx
mov rbx rdx
call sub_140009ed4
mov ecx [ rbx + 0x18 ]
movsxd rsi eax
test cl 0x82
jne r-xdata
test cl 0x40
je r-xdata
call sub_14000670c
mov [ rax ] 0x9
xor edi edi
test cl 0x1
je r-xdata
call sub_14000670c
mov [ rax ] 0x22
jmp r-xdata
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov eax [ rbx + 0x18 ]
mov [ rbx + 0x8 ] edi
and eax 0xffffffef
or eax 0x2
mov [ rbx + 0x18 ] eax
test eax 0x10c
jne r-xdata
mov [ rbx + 0x8 ] edi
test cl 0x10
je r-xdata
or [ rbx + 0x18 ] 0x20
test [ rbx + 0x18 ] 0x108
je r-xdata
call sub_140009cc0
add rax 0x30
cmp rbx rax
je r-xdata
or ecx 0x20
mov [ rbx + 0x18 ] ecx
jmp r-xdata
mov rax [ rbx + 0x10 ]
and ecx 0xfffffffe
mov [ rbx ] rax
mov [ rbx + 0x18 ] ecx
mov ebp 0x1
lea rdx [ rsp + 0x30 ]
mov ecx esi
mov r8d ebp
call sub_140009b2c
mov edi eax
mov ebp [ rbx ]
mov rdx [ rbx + 0x10 ]
sub ebp [ rbx + 0x10 ]
lea rax [ rdx + 0x1 ]
mov [ rbx ] rax
mov eax [ rbx + 0x24 ]
dec eax
mov [ rbx + 0x8 ] eax
test ebp ebp
jle r-xdata
mov ecx esi
call sub_140009c60
test eax eax
jne r-xdata
call sub_140009cc0
add rax 0x60
cmp rbx rax
jne r-xdata
or eax 0xffffffff
jmp r-xdata
movzx eax [ rsp + 0x30 ]
cmp esi 0xffffffff
je r-xdata
mov r8d ebp
mov ecx esi
call sub_140009b2c
mov edi eax
jmp r-xdata
mov rcx rbx
call sub_140009c0c
lea rcx [ rw-data ]
cmp esi 0xfffffffe
je r-xdata
mov rcx [ rbx + 0x10 ]
mov al [ rsp + 0x30 ]
mov [ rcx ] al
jmp r-xdata
xor edx edx
mov ecx esi
lea r8d [ rdx + 0x2 ]
call sub_1400092e8
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx rsi
mov rax rsi
lea rdx [ rw-data ]
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
add rcx [ rdx + rax * 8 ]
jmp r-xdata
cmp edi ebp
jne r-xdata
test [ rcx + 0x8 ] 0x20
je r-xdata
sub_140005904
push rbx
sub rsp 0x20
test [ rdx + 0x18 ] 0x40
mov rbx r8
je r-xdata
dec [ rdx + 0x8 ]
js r-xdata
cmp [ rdx + 0x10 ] 0x0
jne r-xdata
movsx ecx cl
call sub_140005774
mov rax [ rdx ]
mov [ rax ] cl
inc [ rdx ]
movzx eax cl
jmp r-xdata
inc [ r8 ]
jmp r-xdata
inc [ rbx ]
or [ rbx ] eax
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
add rsp 0x20
pop rbx
retn
sub_14000594c
test edx edx
jle r-xdata
retn
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi r9
mov rsi r8
mov ebx edx
mov bpl cl
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
test ebx ebx
jg r-xdata
mov r8 rdi
mov rdx rsi
mov cl bpl
dec ebx
call sub_140005904
cmp [ rdi ] 0xffffffff
je r-xdata
sub_1400059a0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov rbx r9
mov rsi r8
mov edi edx
mov rbp rcx
call sub_14000670c
test [ rsi + 0x18 ] 0x40
mov r12d [ rax ]
je r-xdata
call sub_14000670c
and [ rax ] 0x0
jmp r-xdata
cmp [ rsi + 0x10 ] 0x0
jne r-xdata
test edi edi
jg r-xdata
add [ rbx ] edi
jmp r-xdata
mov cl [ rbp ]
mov r8 rbx
mov rdx rsi
dec edi
call sub_140005904
inc rbp
cmp [ rbx ] 0xffffffff
jne r-xdata
call sub_14000670c
cmp [ rax ] 0x0
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
call sub_14000670c
cmp [ rax ] 0x2a
jne r-xdata
call sub_14000670c
mov [ rax ] r12d
mov r8 rbx
mov rdx rsi
mov cl 0x3f
call sub_140005904
sub_140005a48
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1d0 ]
sub rsp 0x2d0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1c8 ] rax
xor eax eax
mov rbx rcx
mov [ rsp + 0x68 ] rcx
mov rdi rdx
lea rcx [ rbp - 0x80 ]
mov rdx r8
mov r14 r9
mov [ rsp + 0x60 ] eax
mov r13d eax
mov [ rsp + 0x54 ] eax
mov r15d eax
mov [ rsp + 0x48 ] eax
mov [ rsp + 0x5c ] eax
mov [ rsp + 0x50 ] eax
call sub_140004a70
xor r10d r10d
test rbx rbx
jne r-xdata
or esi 0xffffffff
test [ rbx + 0x18 ] 0x40
lea r9 [ __dos_header ]
jne r-xdata
call sub_14000670c
mov [ rax ] 0x16
call sub_1400066a4
xor r11d r11d
cmp [ rbp - 0x68 ] r11b
je r-xdata
test rdi rdi
je r-xdata
mov rcx rbx
call sub_140009ed4
lea rdx [ rw-data ]
cmp eax esi
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov rax [ rbp - 0x70 ]
and [ rax + 0xc8 ] 0xfffffffd
call sub_14000670c
mov [ rax ] 0x16
call sub_1400066a4
xor r11d r11d
cmp [ rbp - 0x68 ] r11b
mov r12b [ rdi ]
mov r8d r10d
mov [ rsp + 0x40 ] r10d
mov [ rsp + 0x44 ] r10d
mov edx r10d
mov [ rbp - 0x60 ] r10
test r12b r12b
je r-xdata
mov r8 rdx
lea r9 [ __dos_header ]
cmp eax 0xfffffffe
je r-xdata
mov rcx [ rbp + 0x1c8 ]
xor rcx rsp
call sub_140004460
mov rbx [ rsp + 0x320 ]
add rsp 0x2d0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax esi
jmp r-xdata
mov rax [ rbp - 0x70 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x68 ] r10b
je r-xdata
mov rbx [ rbp - 0x48 ]
mov r11d 0x200
cmp eax esi
je r-xdata
movsxd r8 eax
lea r9 [ __dos_header ]
mov rcx r8
and r8d 0x1f
sar rcx 0x5
imul r8 r8 0x58
add r8 [ r9 + rcx * 8 + 0x57280 ]
jmp r-xdata
mov eax r8d
mov rcx [ rbp - 0x70 ]
and [ rcx + 0xc8 ] 0xfffffffd
lea eax [ r12 - 0x20 ]
cmp al 0x58
ja r-xdata
test [ rdx + 0x38 ] 0x80
je r-xdata
cmp eax 0xfffffffe
je r-xdata
test [ r8 + 0x38 ] 0x7f
jne r-xdata
mov ecx r10d
movsx rax r12b
movsx ecx [ rax + r9 + 0x10080 ]
and ecx 0xf
jmp r-xdata
xor r10d r10d
movsxd rdx eax
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
add rdx [ r9 + rax * 8 + 0x57280 ]
lea rdx [ rbp - 0x80 ]
movzx ecx r12b
mov [ rsp + 0x50 ] r10d
call sub_140009efc
test eax eax
je r-xdata
dec ecx
je r-xdata
movsxd rax edx
movsxd rcx ecx
lea rdx [ rax + rcx * 8 ]
movsx edx [ rdx + r9 + 0x100a0 ]
sar edx 0x4
mov [ rsp + 0x58 ] edx
mov ecx edx
test edx edx
je r-xdata
mov rdx [ rsp + 0x68 ]
lea r8 [ rsp + 0x40 ]
mov cl r12b
call sub_140005904
mov r8d [ rsp + 0x40 ]
xor r10d r10d
jmp r-xdata
mov rdx [ rsp + 0x68 ]
lea r8 [ rsp + 0x40 ]
mov cl r12b
call sub_140005904
mov r12b [ rdi ]
inc rdi
test r12b r12b
je r-xdata
mov [ rsp + 0x78 ] r10d
mov [ rsp + 0x5c ] r10d
mov [ rsp + 0x54 ] r10d
mov [ rsp + 0x48 ] r10d
mov r13d r10d
mov r15d esi
mov [ rsp + 0x50 ] r10d
jmp r-xdata
dec ecx
je r-xdata
mov edx [ rsp + 0x58 ]
mov r11d 0x200
lea r9 [ __dos_header ]
call sub_14000670c
mov [ rax ] 0x16
call sub_1400066a4
xor eax eax
cmp [ rbp - 0x68 ] al
jmp r-xdata
mov r12b [ rdi ]
test r12b r12b
jne r-xdata
cmp r12b 0x20
je r-xdata
dec ecx
je r-xdata
inc rdi
mov [ rbp - 0x50 ] rdi
test r8d r8d
js r-xdata
je r-xdata
or r13d 0x2
jmp r-xdata
cmp r12b 0x23
je r-xdata
cmp r12b 0x2a
jne r-xdata
dec ecx
je r-xdata
bts r13d 0x7
jmp r-xdata
cmp r12b 0x2b
je r-xdata
mov eax [ rsp + 0x54 ]
lea ecx [ rax + rax * 4 ]
movsx eax r12b
lea eax [ rax + rcx * 2 - 0x30 ]
mov eax [ r14 ]
add r14 0x8
mov [ rsp + 0x54 ] eax
test eax eax
jns r-xdata
mov r15d r10d
jmp r-xdata
dec ecx
je r-xdata
or r13d 0x1
jmp r-xdata
cmp r12b 0x2d
je r-xdata
or r13d 0x4
neg eax
jmp r-xdata
cmp r12b 0x2a
jne r-xdata
dec ecx
je r-xdata
or r13d 0x4
jmp r-xdata
cmp r12b 0x30
jne r-xdata
mov [ rsp + 0x54 ] eax
jmp r-xdata
lea ecx [ r15 + r15 * 4 ]
movsx eax r12b
lea r15d [ rax + rcx * 2 - 0x30 ]
jmp r-xdata
mov r15d [ r14 ]
add r14 0x8
test r15d r15d
jns r-xdata
cmp r12b 0x49
je r-xdata
dec ecx
jne r-xdata
or r13d 0x8
jmp r-xdata
mov r15d esi
jmp r-xdata
mov al [ rdi ]
bts r13d 0xf
cmp al 0x36
jne r-xdata
cmp r12b 0x68
je r-xdata
movsx eax r12b
cmp eax 0x64
jg r-xdata
cmp al 0x33
jne r-xdata
cmp [ rdi + 0x1 ] 0x34
jne r-xdata
or r13d 0x20
jmp r-xdata
cmp r12b 0x6c
je r-xdata
cmp eax 0x65
jl r-xdata
je r-xdata
cmp al 0x64
je r-xdata
cmp [ rdi + 0x1 ] 0x32
jne r-xdata
add rdi 0x2
bts r13d 0xf
jmp r-xdata
cmp [ rdi ] 0x6c
jne r-xdata
cmp r12b 0x77
jne r-xdata
cmp [ rsp + 0x5c ] r10d
jne r-xdata
cmp eax 0x67
jle r-xdata
or r13d 0x40
cmp eax 0x41
je r-xdata
cmp al 0x69
je r-xdata
add rdi 0x2
btr r13d 0xf
jmp r-xdata
or r13d 0x10
jmp r-xdata
inc rdi
bts r13d 0xc
jmp r-xdata
bts r13d 0xb
jmp r-xdata
mov r8d [ rsp + 0x40 ]
test r13b 0x40
je r-xdata
or r13d 0x40
lea rbx [ rbp - 0x40 ]
mov esi r11d
test r15d r15d
jns r-xdata
cmp eax 0x69
je r-xdata
bt r13d 0xc
jb r-xdata
mov r8 [ r14 ]
add r14 0x8
jmp r-xdata
mov [ rsp + 0x78 ] 0x1
add r12b 0x20
cmp eax 0x43
je r-xdata
cmp al 0x6f
je r-xdata
mov rdi [ rbp - 0x50 ]
or esi 0xffffffff
mov rcx rax
call sub_140005564
mov r8d [ rsp + 0x40 ]
xor r10d r10d
mov [ rbp - 0x60 ] r10
mov edi [ rsp + 0x48 ]
bt r13d 0x8
jae r-xdata
jne r-xdata
mov r15d 0x6
jmp r-xdata
cmp eax 0x6e
je r-xdata
add r14 0x8
test r13b 0x20
je r-xdata
mov [ rsp + 0x70 ] r14
test r13d 0x830
jne r-xdata
cmp eax 0x45
je r-xdata
cmp al 0x75
je r-xdata
lea r9 [ rsp + 0x40 ]
lea rcx [ rsp + 0x4c ]
mov r8 rsi
mov edx edi
call sub_1400059a0
test r13b 0x8
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r12d
mov cl 0x20
call sub_14000594c
test r13b 0x1
je r-xdata
mov [ rsp + 0x4c ] 0x2d
jmp r-xdata
cmp r15d r11d
cmovg r15d r11d
cmp r15d 0xa3
jle r-xdata
cmp r12b 0x67
jne r-xdata
mov rax [ r14 ]
mov rcx [ rw-data ]
add r14 0x8
movsx edi r12b
movsxd rsi esi
mov [ rbp - 0x48 ] rax
call [ DecodePointer@IAT ]
lea rcx [ rbp - 0x80 ]
mov r9d edi
mov [ rsp + 0x30 ] rcx
mov ecx [ rsp + 0x78 ]
mov r8 rsi
mov [ rsp + 0x28 ] ecx
lea rcx [ rbp - 0x48 ]
mov rdx rbx
mov [ rsp + 0x20 ] r15d
call rax
mov edi r13d
and edi 0x80
je r-xdata
mov rdi [ r14 ]
add r14 0x8
call sub_14000a150
xor r10d r10d
test eax eax
je r-xdata
cmp eax 0x6f
je r-xdata
test r13b 0x40
je r-xdata
mov [ rsp + 0x70 ] r14
test r13b 0x40
je r-xdata
test eax r13d
jne r-xdata
test r8 r8
jns r-xdata
add r14 0x8
test r13d 0x810
je r-xdata
bts r13d 0xb
cmp eax 0x47
je r-xdata
cmp al 0x78
je r-xdata
mov edi [ rsp + 0x44 ]
xor eax eax
cmp [ rsp + 0x50 ] eax
je r-xdata
test r13b 0x4
jne r-xdata
test r13b 0x2
je r-xdata
mov [ rsp + 0x4c ] 0x2b
mov edi 0x1
mov [ rsp + 0x48 ] edi
jmp r-xdata
lea edi [ r15 + 0x15d ]
movsxd rcx edi
call sub_140009fc4
mov [ rbp - 0x60 ] rax
test rax rax
je r-xdata
mov r15d 0x1
jmp r-xdata
cmp r12b 0x67
jne r-xdata
test r15d r15d
jne r-xdata
mov eax [ rsp + 0x40 ]
test r13b 0x20
je r-xdata
mov r9d 0x8
test r13b r13b
jns r-xdata
cmp eax 0x70
je r-xdata
mov r8d [ r14 - 0x8 ]
movsxd r8 [ r14 - 0x8 ]
jmp r-xdata
movzx r8d [ r14 - 0x8 ]
jmp r-xdata
movsx r8 [ r14 - 0x8 ]
jmp r-xdata
test r15d r15d
jns r-xdata
bt r13d 0xc
jb r-xdata
neg r8
bts r13d 0x8
mov al [ r14 - 0x8 ]
mov [ rsp + 0x44 ] 0x1
mov [ rbp - 0x40 ] al
movzx r9d [ r14 - 0x8 ]
lea rdx [ rbp - 0x40 ]
lea rcx [ rsp + 0x44 ]
mov r8 r11
call sub_14000a32c
xor r10d r10d
test eax eax
je r-xdata
cmp eax 0x53
je r-xdata
cmp al 0x58
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx edi
mov rcx rbx
call sub_1400059a0
xor r10d r10d
test edi edi
jle r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r12d
mov cl 0x30
call sub_14000594c
mov [ rsp + 0x4c ] 0x20
jmp r-xdata
mov r12d [ rsp + 0x54 ]
mov rsi [ rsp + 0x68 ]
sub r12d [ rsp + 0x44 ]
sub r12d edi
test r13b 0xc
jne r-xdata
mov r15d 0xa3
mov rbx rax
mov esi edi
jmp r-xdata
cmp [ rbx ] 0x2d
jne r-xdata
test edi edi
jne r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x80 ]
mov rcx rbx
call rax
mov [ rdi ] eax
mov [ rdi ] ax
jmp r-xdata
mov edx [ rsp + 0x48 ]
or r13d r11d
jmp r-xdata
mov r15d 0x10
bts r13d 0xf
cmp eax 0x73
je r-xdata
test r13b 0x40
je r-xdata
and r13d 0xfffffff7
cmp r15d r11d
cmovg r15d r11d
mov r15d 0x1
jmp r-xdata
mov r8d r8d
lea rbx [ rbp - 0x40 ]
jmp r-xdata
mov [ rsp + 0x5c ] 0x1
jmp r-xdata
test r13d 0x830
jne r-xdata
cmp eax 0x58
je r-xdata
mov [ rsp + 0x58 ] r10d
mov rax [ rbp - 0x60 ]
test rax rax
je r-xdata
test r13b 0x4
je r-xdata
mov rsi rbx
mov rcx rbx
call sub_140008c20
xor r10d r10d
bts r13d 0x8
inc rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x80 ]
mov rcx rbx
call rax
mov [ rsp + 0x5c ] 0x1
jmp r-xdata
add al 0x51
mov [ rsp + 0x4c ] 0x30
lea edx [ r9 - 0xe ]
mov [ rsp + 0x4d ] al
jmp r-xdata
mov rbx [ r14 ]
cmp r15d esi
mov eax r15d
mov ecx 0x7fffffff
cmove eax ecx
add r14 0x8
test r13d 0x810
je r-xdata
cmp eax 0x75
je r-xdata
xor edx edx
mov rax r8
movsxd rcx r9d
div rcx
mov r8 rax
lea eax [ rdx + 0x30 ]
cmp eax 0x39
jle r-xdata
test r8 r8
je r-xdata
mov r14d [ rsp + 0x60 ]
mov rax r8
lea rbx [ rbp + 0x1bf ]
neg rax
sbb ecx ecx
and ecx edx
mov [ rsp + 0x48 ] ecx
bts r13d 0xb
mov eax 0x7
cmp eax 0x5a
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r12d
mov cl 0x20
call sub_14000594c
xor r10d r10d
mov rsi [ rsp + 0x68 ]
or r8d 0xffffffff
mov [ rsp + 0x40 ] r8d
jmp r-xdata
mov edx [ rbp - 0x58 ]
test edx edx
je r-xdata
mov eax 0x8000
test eax r13d
je r-xdata
test rbx rbx
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
test rbx rbx
mov [ rsp + 0x50 ] 0x1
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
mov r9d 0xa
cmp eax 0x78
jne r-xdata
mov [ rbx ] al
dec rbx
jmp r-xdata
add eax r14d
mov r14 [ rsp + 0x70 ]
lea rax [ rbp + 0x1bf ]
sub eax ebx
inc rbx
mov [ rsp + 0x44 ] eax
test r11d r13d
je r-xdata
mov rax [ r14 ]
add r14 0x8
test rax rax
je r-xdata
cmp eax 0x61
je r-xdata
test r8d r8d
js r-xdata
mov r8 [ rsp + 0x68 ]
lea r9 [ rsp + 0x40 ]
lea rcx [ rbp + 0x1c0 ]
call sub_1400059a0
xor r10d r10d
test edi edi
jne r-xdata
test eax eax
jne r-xdata
test eax eax
jne r-xdata
mov eax 0x27
jmp r-xdata
mov ecx r15d
dec r15d
test ecx ecx
jg r-xdata
test eax eax
je r-xdata
mov rbx [ rw-data ]
jmp r-xdata
mov rbx [ rax + 0x8 ]
test rbx rbx
je r-xdata
cmp eax 0x63
je r-xdata
movzx r9d [ rsi ]
lea rdx [ rbp + 0x1c0 ]
lea rcx [ rbp - 0x58 ]
mov r8d 0x6
dec edi
add rsi 0x2
call sub_14000a32c
xor r10d r10d
test eax eax
jne r-xdata
mov rsi [ rsp + 0x68 ]
jmp r-xdata
dec eax
cmp [ rcx ] r10b
je r-xdata
sub ecx ebx
dec eax
cmp [ rcx ] r10w
je r-xdata
sub rcx rbx
sar rcx 0x1
jmp r-xdata
mov [ rsp + 0x60 ] eax
mov r9d 0x10
test r13b r13b
jns r-xdata
dec rbx
inc [ rsp + 0x44 ]
mov [ rbx ] 0x30
jmp r-xdata
cmp [ rbx ] 0x30
je r-xdata
movsx eax [ rax ]
bt r13d 0xb
jae r-xdata
jmp r-xdata
mov r8d [ rsp + 0x40 ]
inc rcx
add rcx 0x2
mov [ rsp + 0x44 ] ecx
jmp r-xdata
mov [ rsp + 0x50 ] r10d
jmp r-xdata
cdq
mov [ rsp + 0x50 ] 0x1
sub eax edx
sar eax 0x1
jmp r-xdata
mov [ rsp + 0x44 ] eax
sub_1400064b4
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rbp
push rdi
push r12
lea rbp [ rsp - 0x4f0 ]
sub rsp 0x5f0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x4e0 ] rax
mov edi r8d
mov esi edx
mov ebx ecx
cmp ecx 0xffffffff
je r-xdata
and [ rsp + 0x70 ] 0x0
lea rcx [ rsp + 0x74 ]
xor edx edx
mov r8d 0x94
call sub_140004920
lea r11 [ rsp + 0x70 ]
lea rax [ rbp + 0x10 ]
lea rcx [ rbp + 0x10 ]
mov [ rsp + 0x48 ] r11
mov [ rsp + 0x50 ] rax
call [ RtlCaptureContext@IAT ]
mov r12 [ rbp + 0x108 ]
lea rdx [ rsp + 0x40 ]
mov rcx r12
xor r8d r8d
call RtlLookupFunctionEntry
test rax rax
je r-xdata
call sub_140009248
mov rax [ rbp + 0x508 ]
mov [ rbp + 0x108 ] rax
lea rax [ rbp + 0x508 ]
mov [ rbp + 0xa8 ] rax
and [ rsp + 0x38 ] 0x0
mov rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x60 ]
mov [ rsp + 0x30 ] rcx
lea rcx [ rsp + 0x58 ]
mov r9 rax
mov [ rsp + 0x28 ] rcx
lea rcx [ rbp + 0x10 ]
mov r8 r12
mov [ rsp + 0x20 ] rcx
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
mov rcx [ rbp + 0x4e0 ]
xor rcx rsp
call sub_140004460
lea r11 [ rsp + 0x5f0 ]
mov rbx [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rsp r11
pop r12
pop rdi
pop rbp
retn
test edi edi
jne r-xdata
mov rax [ rbp + 0x508 ]
mov [ rsp + 0x70 ] esi
mov [ rsp + 0x74 ] edi
mov [ rbp - 0x80 ] rax
call [ IsDebuggerPresent@IAT ]
xor ecx ecx
mov edi eax
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ rsp + 0x48 ]
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
cmp ebx 0xffffffff
je r-xdata
mov ecx ebx
call sub_140009248
sub_140006634
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
mov rbp rcx
mov rcx [ rw-data ]
mov ebx r9d
mov rdi r8
mov rsi rdx
call [ DecodePointer@IAT ]
mov r9d ebx
mov r8 rdi
mov rdx rsi
mov rcx rbp
test rax rax
je r-xdata
mov rax [ rsp + 0x60 ]
mov [ rsp + 0x20 ] rax
call sub_140006600
int3
mov r10 [ rsp + 0x60 ]
mov [ rsp + 0x20 ] r10
call rax
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_1400066c4
lea r9 [ rw-data ]
xor eax eax
mov rdx r9
lea r8d [ rax + 0x8 ]
cdqe
mov eax [ r9 + rax * 8 + 0x4 ]
retn
inc eax
add rdx r8
cmp eax 0x2d
jb r-xdata
cmp ecx [ rdx ]
je r-xdata
lea eax [ rcx - 0x13 ]
cmp eax 0x11
ja r-xdata
add ecx 0xffffff44
mov eax 0x16
cmp ecx 0xe
cmovbe eax r8d
retn
mov eax 0xd
retn
sub_14000674c
push rbx
sub rsp 0x20
mov ebx ecx
call sub_1400079e8
test rax rax
jne r-xdata
add rax 0x14
lea rax [ rw-data ]
jmp r-xdata
mov ecx ebx
call sub_1400066c4
mov [ r10 ] eax
add rsp 0x20
pop rbx
retn
lea r10 [ rax + 0x10 ]
mov [ rax ] ebx
call sub_1400079e8
lea r10 [ rw-data ]
test rax rax
je r-xdata
sub_140006794
sub rsp 0x28
mov rax [ rcx ]
cmp [ rax ] 0xe06d7363
jne r-xdata
xor eax eax
add rsp 0x28
retn
cmp [ rax + 0x18 ] 0x4
jne r-xdata
mov eax [ rax + 0x20 ]
cmp eax 0x19930520
je r-xdata
call sub_140009204
cmp eax 0x19930521
je r-xdata
cmp eax 0x19930522
je r-xdata
cmp eax 0x1994000
jne r-xdata
sub_1400067f0
push rbx
sub rsp 0x20
mov ebx ecx
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
test rax rax
je r-xdata
add rsp 0x20
pop rbx
retn
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov ecx ebx
call rax
sub_14000685c
push rbx
sub rsp 0x20
call EncodePointer
mov rcx rax
mov rbx rax
call sub_140007ebc
mov rcx rbx
call sub_1400064ac
mov rcx rbx
call sub_14000a7fc
mov rcx rbx
call sub_14000a7f4
mov rcx rbx
call sub_14000a590
mov rcx rbx
add rsp 0x20
pop rbx
jmp sub_140009228
sub_1400068a0
cmp rcx rdx
jae r-xdata
retn
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rax
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_1400068d4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
xor eax eax
mov rdi rdx
mov rbx rcx
cmp rcx rdx
jae r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test eax eax
jne r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rcx
sub_140006910
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ rw-data ] 0x0
mov ebx ecx
je r-xdata
call sub_140009f8c
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_1400068d4
test eax eax
jne r-xdata
lea rcx [ rw-data ]
call sub_140008bc0
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rcx [ sub_1400078c4 ]
call sub_140007ea4
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
mov ecx ebx
call [ rw-data ]
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
add rbx 0x8
call rax
xor eax eax
lea rcx [ rw-data ]
call sub_140008bc0
test eax eax
je r-xdata
xor r8d r8d
xor ecx ecx
lea edx [ r8 + 0x2 ]
call [ rw-data ]
sub_1400069c0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] r8d
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r12d r8d
mov ebx edx
mov r15d ecx
mov ecx 0x8
call sub_14000a54c
nop
cmp [ rw-data ] 0x1
je r-xdata
test r12d r12d
je r-xdata
mov [ rw-data ] 0x1
mov [ rw-data ] r12b
test ebx ebx
jne r-xdata
mov [ rw-data ] 0x1
mov ecx 0x8
call sub_14000a44c
mov ecx r15d
call sub_1400067f0
mov ecx r15d
call [ ExitProcess@IAT ]
mov ecx 0x8
call sub_14000a44c
test r12d r12d
jne r-xdata
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_1400068a0
nop
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rsi rax
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_1400068a0
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rdi rax
mov [ rsp + 0x20 ] rax
mov r14 rsi
mov [ rsp + 0x28 ] rsi
mov r13 rax
mov [ rsp + 0x38 ] rax
call EncodePointer
cmp [ rdi ] rax
jne r-xdata
cmp rdi rsi
jb r-xdata
jmp r-xdata
mov rcx [ rdi ]
call [ DecodePointer@IAT ]
mov rbx rax
call EncodePointer
mov [ rdi ] rax
call rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rbx rax
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
cmp r14 rbx
jne r-xdata
sub rdi 0x8
mov [ rsp + 0x20 ] rdi
cmp rdi rsi
jb r-xdata
mov r14 rbx
mov [ rsp + 0x28 ] rbx
mov rsi rbx
mov [ rsp + 0x30 ] rbx
mov r13 rax
mov [ rsp + 0x38 ] rax
mov rdi rax
mov [ rsp + 0x20 ] rax
jmp r-xdata
cmp r13 rax
je r-xdata
sub_140006bb0
lea r8 [ r--data ]
xor eax eax
mov rdx r8
cdqe
add rax rax
mov rax [ r8 + rax * 8 + 0x8 ]
retn
inc eax
add rdx 0x10
cmp eax 0x16
jb r-xdata
cmp ecx [ rdx ]
je r-xdata
xor eax eax
retn
sub_140006bdc
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x250
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x240 ] rax
mov edi ecx
call sub_140006bb0
xor esi esi
mov rbx rax
test rax rax
je r-xdata
mov rcx [ rsp + 0x240 ]
xor rcx rsp
call sub_140004460
lea r11 [ rsp + 0x250 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rsp r11
pop r13
pop r12
pop rdi
retn
lea ecx [ rsi + 0x3 ]
call sub_14000abec
cmp eax 0x1
je r-xdata
mov ecx 0xfffffff4
call [ GetStdHandle@IAT ]
mov rdi rax
test rax rax
je r-xdata
lea ecx [ rsi + 0x3 ]
call sub_14000abec
test eax eax
jne r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
cmp edi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
mov edx esi
lea r8 [ rsp + 0x40 ]
lea rbp [ rw-data ]
mov r12d 0x314
lea r8 [ r--data ]
mov rcx rbp
mov edx r12d
call sub_14000ab80
xor ecx ecx
test eax eax
jne r-xdata
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x233 ] sil
call sub_140008c20
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
mov rcx rdi
mov r8 rax
mov [ rsp + 0x20 ] rsi
call [ WriteFile@IAT ]
inc edx
inc r8
add rbx 0x2
cmp edx 0x1f4
jb r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
mov [ rsp + 0x20 ] rsi
call sub_140006600
int3
lea r13 [ rw-data ]
mov r8d 0x104
mov [ rw-data ] si
mov rdx r13
call [ GetModuleFileNameW@IAT ]
lea edi [ r12 - 0x19 ]
test eax eax
jne r-xdata
mov cl [ rbx ]
mov [ r8 ] cl
cmp [ rbx ] si
je r-xdata
mov rcx r13
call sub_14000ab64
inc rax
cmp rax 0x3c
jbe r-xdata
lea r8 [ r--data ]
mov edx edi
mov rcx r13
call sub_14000ab80
test eax eax
je r-xdata
lea r8 [ r--data ]
mov rdx r12
mov rcx rbp
call sub_14000aa0c
test eax eax
jne r-xdata
mov rcx r13
call sub_14000ab64
lea r8 [ r--data ]
mov r9d 0x3
lea rcx [ rbp + rax * 2 - 0x44 ]
mov rax rcx
sub rax r13
sar rax 0x1
sub rdi rax
mov rdx rdi
call sub_14000aa94
test eax eax
je r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_140006600
int3
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_140006600
int3
mov r8 rbx
mov rdx r12
mov rcx rbp
call sub_14000aa0c
test eax eax
jne r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_140006600
int3
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_140006600
int3
lea rdx [ r--data ]
mov r8d 0x12010
mov rcx rbp
call sub_14000a804
jmp r-xdata
sub_140006e3c
sub rsp 0x28
mov ecx 0x3
call sub_14000abec
cmp eax 0x1
je r-xdata
mov ecx 0xfc
call sub_140006bdc
mov ecx 0xff
call sub_140006bdc
mov ecx 0x3
call sub_14000abec
test eax eax
jne r-xdata
add rsp 0x28
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_140006e80
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rsi rdx
mov edi ecx
call sub_1400079e8
xor r9d r9d
mov rbx rax
test rax rax
je r-xdata
xor eax eax
mov rdx [ rax + 0xa0 ]
mov rcx rdx
lea rax [ rdx + 0xc0 ]
cmp rcx rax
jae r-xdata
lea rax [ rdx + 0xc0 ]
add rcx 0x10
cmp rcx rax
jb r-xdata
mov rcx r9
cmp [ rcx ] edi
je r-xdata
cmp [ rcx ] edi
je r-xdata
mov r8 [ rcx + 0x8 ]
test r8 r8
je r-xdata
test rcx rcx
je r-xdata
cmp r8 0x5
jne r-xdata
cmp r8 0x1
jne r-xdata
mov [ rcx + 0x8 ] r9
lea eax [ r8 - 0x4 ]
jmp r-xdata
mov rbp [ rbx + 0xa8 ]
mov [ rbx + 0xa8 ] rsi
cmp [ rcx + 0x4 ] 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov [ rcx + 0x8 ] r9
mov ecx [ rcx + 0x4 ]
call r8
mov edx 0x30
mov rax [ rbx + 0xa0 ]
add rdx 0x10
mov [ rdx + rax - 0x8 ] r9
cmp rdx 0xc0
jl r-xdata
cmp [ rcx ] 0xc000008e
mov edi [ rbx + 0xb0 ]
jne r-xdata
cmp [ rcx ] 0xc0000090
jne r-xdata
mov [ rbx + 0xb0 ] 0x83
jmp r-xdata
cmp [ rcx ] 0xc0000091
jne r-xdata
mov [ rbx + 0xb0 ] 0x81
jmp r-xdata
mov edx [ rbx + 0xb0 ]
mov ecx 0x8
call r8
mov [ rbx + 0xb0 ] edi
jmp r-xdata
cmp [ rcx ] 0xc0000093
jne r-xdata
mov [ rbx + 0xb0 ] 0x84
jmp r-xdata
mov [ rbx + 0xa8 ] rbp
jmp r-xdata
cmp [ rcx ] 0xc000008d
jne r-xdata
mov [ rbx + 0xb0 ] 0x85
jmp r-xdata
cmp [ rcx ] 0xc000008f
jne r-xdata
mov [ rbx + 0xb0 ] 0x82
jmp r-xdata
cmp [ rcx ] 0xc0000092
jne r-xdata
mov [ rbx + 0xb0 ] 0x86
jmp r-xdata
cmp [ rcx ] 0xc00002b5
jne r-xdata
mov [ rbx + 0xb0 ] 0x8a
jmp r-xdata
cmp [ rcx ] 0xc00002b4
mov eax edi
mov edx 0x8e
cmove eax edx
mov [ rbx + 0xb0 ] eax
mov [ rbx + 0xb0 ] 0x8d
jmp r-xdata
sub_140007050
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
xor edi edi
cmp [ rw-data ] edi
jne r-xdata
mov rbx [ rw-data ]
lea rax [ r--data ]
test rbx rbx
cmove rbx rax
call sub_140008718
cmp [ rbx ] 0x22
jne r-xdata
cmp [ rbx ] 0x0
je r-xdata
movzx ecx [ rbx ]
call sub_14000aca8
test eax eax
je r-xdata
xor eax eax
test edi edi
sete al
mov edi eax
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test edi edi
je r-xdata
inc rbx
jmp r-xdata
inc rbx
mov al [ rbx ]
test al al
jne r-xdata
cmp [ rbx ] 0x20
ja r-xdata
cmp al 0x20
ja r-xdata
inc rbx
sub_1400070cc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
cmp [ rw-data ] 0x0
jne r-xdata
mov rbx [ rw-data ]
xor edi edi
test rbx rbx
jne r-xdata
call sub_140008718
mov al [ rbx ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
lea eax [ rdi + 0x1 ]
mov edx 0x8
movsxd rcx eax
call sub_14000a044
mov rdi rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rcx rbx
call sub_140008c20
lea rbx [ rbx + rax + 0x1 ]
inc edi
mov rbx [ rw-data ]
cmp [ rbx ] 0x0
je r-xdata
mov rcx rbx
call sub_140005564
and [ rw-data ] 0x0
and [ rdi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
mov rcx rbx
call sub_140008c20
cmp [ rbx ] 0x3d
lea esi [ rax + 0x1 ]
je r-xdata
movsxd rax esi
add rbx rax
cmp [ rbx ] 0x0
jne r-xdata
movsxd rbp esi
mov edx 0x1
mov rcx rbp
call sub_14000a044
mov [ rdi ] rax
test rax rax
je r-xdata
mov rbx [ rw-data ]
mov rcx [ rw-data ]
call sub_140005564
and [ rw-data ] 0x0
jmp r-xdata
mov r8 rbx
mov rdx rbp
mov rcx rax
call sub_14000902c
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_140006600
int3
add rdi 0x8
sub_1400071fc
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r13 [ rsp + 0x60 ]
mov r14 r9
mov rdi r8
and [ r13 ] 0x0
mov r12 rdx
mov rbx rcx
mov [ r9 ] 0x1
test rdx rdx
je r-xdata
xor ebp ebp
mov [ rdx ] r8
add r12 0x8
inc [ r13 ]
test rdi rdi
je r-xdata
xor eax eax
test ebp ebp
mov sil 0x22
sete al
inc rbx
mov ebp eax
jmp r-xdata
movzx esi [ rbx ]
inc rbx
mov ecx esi
call sub_14000aca8
test eax eax
je r-xdata
mov al [ rbx ]
mov [ rdi ] al
inc rdi
test ebp ebp
jne r-xdata
test sil sil
je r-xdata
inc [ r13 ]
test rdi rdi
je r-xdata
cmp [ rbx ] 0x22
jne r-xdata
cmp sil 0x20
je r-xdata
dec rbx
inc rbx
mov al [ rbx ]
mov [ rdi ] al
inc rdi
test rdi rdi
je r-xdata
cmp sil 0x9
jne r-xdata
test r12 r12
je r-xdata
cmp [ rbx ] 0x20
je r-xdata
xor esi esi
mov [ rdi - 0x1 ] 0x0
jmp r-xdata
inc [ r14 ]
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
and [ r12 ] 0x0
inc rbx
jmp r-xdata
cmp [ rbx ] 0x9
jne r-xdata
cmp [ rbx ] 0x0
je r-xdata
test r12 r12
je r-xdata
inc [ r14 ]
mov [ r12 ] rdi
add r12 0x8
cmp [ rbx ] 0x5c
je r-xdata
inc rbx
inc ecx
cmp [ rbx ] 0x22
jne r-xdata
test ecx ecx
jne r-xdata
test dl cl
jne r-xdata
dec ecx
test rdi rdi
je r-xdata
mov al [ rbx ]
test al al
je r-xdata
shr ecx 0x1
jmp r-xdata
test esi esi
je r-xdata
inc [ r13 ]
mov [ rdi ] 0x5c
inc rdi
test rdi rdi
je r-xdata
test esi esi
jne r-xdata
xor eax eax
xor edx edx
test esi esi
sete al
mov esi eax
lea rax [ rbx + 0x1 ]
cmp [ rax ] 0x22
jne r-xdata
inc [ r13 ]
jmp r-xdata
mov [ rdi ] 0x0
inc rdi
test edx edx
je r-xdata
cmp al 0x20
je r-xdata
mov rbx rax
jmp r-xdata
cmp [ rbx ] 0x0
je r-xdata
inc rbx
jmp r-xdata
movsx ecx al
call sub_14000aca8
test rdi rdi
je r-xdata
cmp al 0x9
je r-xdata
mov edx 0x1
xor ecx ecx
jmp r-xdata
test eax eax
je r-xdata
test eax eax
je r-xdata
inc [ r13 ]
inc rbx
inc [ r13 ]
mov al [ rbx ]
mov [ rdi ] al
inc rdi
jmp r-xdata
mov al [ rbx ]
inc rbx
mov [ rdi ] al
inc rdi
inc [ r13 ]
sub_1400073cc
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x30
cmp [ rw-data ] 0x0
jne r-xdata
lea rdi [ rw-data ]
mov r8d 0x104
xor ecx ecx
mov rdx rdi
mov [ rw-data ] 0x0
call [ GetModuleFileNameA@IAT ]
mov rbx [ rw-data ]
mov [ rw-data ] rdi
test rbx rbx
je r-xdata
call sub_140008718
mov rbx rdi
cmp [ rbx ] 0x0
jne r-xdata
or eax 0xffffffff
movsxd rcx [ rsp + 0x48 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
xor r8d r8d
xor edx edx
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_1400071fc
movsxd rsi [ rsp + 0x40 ]
mov rcx 0x1fffffffffffffff
cmp rsi rcx
jae r-xdata
lea rdx [ rcx + rsi * 8 ]
cmp rdx rcx
jb r-xdata
mov rcx rdx
call sub_140009fc4
mov rdi rax
test rax rax
je r-xdata
lea r8 [ rax + rsi * 8 ]
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
mov rdx rdi
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_1400071fc
mov r11d [ rsp + 0x40 ]
mov [ rw-data ] rdi
dec r11d
xor eax eax
mov [ rw-data ] r11d
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
sub_1400074c4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x40
call [ GetEnvironmentStringsW@IAT ]
xor r12d r12d
mov rdi rax
test rax rax
je r-xdata
xor eax eax
mov rbx rax
cmp [ rax ] r12w
je r-xdata
mov [ rsp + 0x38 ] r12
sub rbx rax
mov [ rsp + 0x30 ] r12
sar rbx 0x1
mov r8 rax
xor edx edx
lea r9d [ rbx + 0x1 ]
xor ecx ecx
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] r12
call [ WideCharToMultiByte@IAT ]
movsxd rbp eax
test eax eax
je r-xdata
add rbx 0x2
cmp [ rbx ] r12w
jne r-xdata
mov rcx rdi
call [ FreeEnvironmentStringsW@IAT ]
mov rcx rbp
call sub_140009fc4
mov rsi rax
test rax rax
je r-xdata
add rbx 0x2
cmp [ rbx ] r12w
jne r-xdata
mov [ rsp + 0x38 ] r12
mov [ rsp + 0x30 ] r12
lea r9d [ rbx + 0x1 ]
mov r8 rdi
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] ebp
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
test eax eax
jne r-xdata
mov rcx rdi
call [ FreeEnvironmentStringsW@IAT ]
mov rax rsi
jmp r-xdata
mov rcx rsi
call sub_140005564
mov rsi r12
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
sub_1400075b8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x90
lea rcx [ rsp + 0x20 ]
call [ GetStartupInfoW@IAT ]
mov edx 0x58
lea ebp [ rdx - 0x38 ]
mov ecx ebp
call sub_14000a044
xor r14d r14d
mov rdx rax
test rax rax
jne r-xdata
mov [ rw-data ] rax
add rax 0xb00
mov ecx ebp
mov [ rw-data ] ecx
cmp rdx rax
jae r-xdata
or eax 0xffffffff
jmp r-xdata
cmp [ rsp + 0x62 ] r14w
je r-xdata
add rdx 0x9
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov rsp r11
pop r14
pop r13
pop r12
retn
mov r12d r14d
mov rbx r14
mov rax [ rsp + 0x68 ]
test rax rax
je r-xdata
or [ rdx - 0x9 ] 0xffffffffffffffff
mov [ rdx - 0x1 ] 0xa00
mov [ rdx + 0x3 ] r14d
mov [ rdx + 0x2f ] 0xa00
mov [ rdx + 0x31 ] 0xa
mov [ rdx + 0x47 ] r14d
mov [ rdx + 0x43 ] r14b
mov rax [ rw-data ]
add rdx 0x58
lea rcx [ rdx - 0x9 ]
add rax 0xb00
cmp rcx rax
jb r-xdata
mov ecx [ rw-data ]
lea eax [ r12 - 0x1 ]
mov [ rbx + rdi + 0x8 ] 0x81
neg eax
mov eax 0xfffffff6
sbb ecx ecx
add ecx 0xfffffff5
test r12d r12d
cmove ecx eax
call [ GetStdHandle@IAT ]
mov rbp rax
cmp rax 0xffffffffffffffff
je r-xdata
cmp [ rbx + rdi ] 0xfffffffffffffffe
je r-xdata
movsxd r12 [ rax ]
mov ebx 0x800
lea r13 [ rax + 0x4 ]
add r12 r13
cmp [ rax ] ebx
cmovl ebx [ rax ]
cmp ecx ebx
jge r-xdata
or [ rbx + rdi + 0x8 ] 0x40
mov [ rbx + rdi ] 0xfffffffffffffffe
test rax rax
je r-xdata
or [ rbx + rdi + 0x8 ] 0x80
jmp r-xdata
mov edi r14d
test ebx ebx
jle r-xdata
lea rdi [ rw-data ]
mov rdi [ rw-data ]
cmp [ rbx + rdi ] 0xffffffffffffffff
je r-xdata
mov ecx [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
mov rcx rax
call [ GetFileType@IAT ]
test eax eax
je r-xdata
add rbx 0x58
inc r12d
cmp rbx 0x108
jl r-xdata
cmp [ r12 ] 0xffffffffffffffff
je r-xdata
mov ebx [ rw-data ]
mov edx [ rw-data ]
lea rcx [ rax + 0xb00 ]
mov [ rdi ] rax
add edx ebp
mov [ rw-data ] edx
cmp rax rcx
jae r-xdata
movzx eax al
mov [ rbx + rdi ] rbp
cmp eax 0x2
jne r-xdata
inc edi
inc r13
add r12 0x8
cmp edi ebx
jl r-xdata
cmp [ r12 ] 0xfffffffffffffffe
je r-xdata
add rdi 0x8
cmp edx ebx
jl r-xdata
lea rdx [ rax + 0x9 ]
cmp eax 0x3
jne r-xdata
or [ rbx + rdi + 0x8 ] 0x40
jmp r-xdata
test [ r13 ] 0x1
je r-xdata
mov edx 0x58
mov rcx rbp
call sub_14000a044
test rax rax
je r-xdata
jmp r-xdata
or [ rdx - 0x9 ] 0xffffffffffffffff
and [ rdx + 0x2f ] 0x80
mov [ rdx - 0x1 ] 0xa00
mov [ rdx + 0x3 ] r14d
mov [ rdx + 0x30 ] 0xa0a
mov [ rdx + 0x47 ] r14d
mov [ rdx + 0x43 ] r14b
mov rax [ rdi ]
add rdx 0x58
lea rcx [ rdx - 0x9 ]
add rax 0xb00
cmp rcx rax
jb r-xdata
mov edx [ rw-data ]
lea rcx [ rbx + rdi + 0x10 ]
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
or [ rbx + rdi + 0x8 ] 0x8
test [ r13 ] 0x8
jne r-xdata
inc [ rbx + rdi + 0xc ]
jmp r-xdata
movsxd rbp edi
lea rcx [ rw-data ]
mov edx 0xfa0
mov rax rbp
and ebp 0x1f
sar rax 0x5
imul rbp rbp 0x58
add rbp [ rcx + rax * 8 ]
mov rax [ r12 ]
mov [ rbp ] rax
mov al [ r13 ]
lea rcx [ rbp + 0x10 ]
mov [ rbp + 0x8 ] al
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
mov rcx [ r12 ]
call [ GetFileType@IAT ]
test eax eax
je r-xdata
inc [ rbp + 0xc ]
sub_14000788c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_1400078c4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_140007930
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx + 0xa0 ] rax
and [ rcx + 0x10 ] 0x0
mov [ rcx + 0x1c ] 0x1
mov [ rcx + 0xc8 ] 0x1
mov [ rcx + 0x174 ] 0x43
mov [ rcx + 0x1f7 ] 0x43
lea rax [ rw-data ]
mov [ rcx + 0xb8 ] rax
mov ecx 0xd
call sub_14000a54c
nop
mov rax [ rbx + 0xb8 ]
[ rax ]
mov ecx 0xd
call sub_14000a44c
mov ecx 0xc
call sub_14000a54c
nop
mov [ rbx + 0xc0 ] rdi
test rdi rdi
jne r-xdata
mov rcx [ rbx + 0xc0 ]
call sub_140008740
nop
mov ecx 0xc
call sub_14000a44c
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rw-data ]
mov [ rbx + 0xc0 ] rax
sub_1400079e8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
call [ GetLastError@IAT ]
mov ecx [ rw-data ]
mov edi eax
call [ FlsGetValue@IAT ]
mov rbx rax
test rax rax
jne r-xdata
mov ecx edi
call [ SetLastError@IAT ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rax + 0x1 ]
mov edx 0x2c8
call sub_14000a044
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
mov rcx rbx
test eax eax
je r-xdata
call sub_140005564
xor ebx ebx
xor edx edx
call sub_140007930
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
jmp r-xdata
sub_140007a90
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x38 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x48 ]
test rcx rcx
je r-xdata
call sub_140005564
mov rcx [ rbx + 0x58 ]
test rcx rcx
je r-xdata
call sub_140005564
mov rcx [ rbx + 0x68 ]
test rcx rcx
je r-xdata
call sub_140005564
mov rcx [ rbx + 0x70 ]
test rcx rcx
je r-xdata
call sub_140005564
mov rcx [ rbx + 0x78 ]
test rcx rcx
je r-xdata
call sub_140005564
mov rcx [ rbx + 0x80 ]
test rcx rcx
je r-xdata
call sub_140005564
mov rcx [ rbx + 0xa0 ]
lea rax [ r--data ]
cmp rcx rax
je r-xdata
call sub_140005564
mov edi 0xd
mov ecx edi
call sub_14000a54c
nop
mov rcx [ rbx + 0xb8 ]
mov [ rsp + 0x30 ] rcx
test rcx rcx
je r-xdata
call sub_140005564
mov ecx edi
call sub_14000a44c
mov ecx 0xc
call sub_14000a54c
nop
mov rdi [ rbx + 0xc0 ]
test rdi rdi
je r-xdata
[ rcx ]
jne r-xdata
mov ecx 0xc
call sub_14000a44c
mov rcx rbx
call sub_140005564
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
mov rcx rdi
call sub_1400087cc
cmp rdi [ rw-data ]
je r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
lea rax [ rw-data ]
cmp rdi rax
je r-xdata
call sub_140005564
nop
cmp [ rdi ] 0x0
jne r-xdata
mov rcx rdi
call sub_140008870
nop
sub_140007bc4
push rbx
sub rsp 0x20
call sub_14000685c
call sub_14000a340
test eax eax
je r-xdata
call sub_140007908
xor eax eax
lea rcx [ sub_140007a90 ]
call [ FlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
mov edx 0x2c8
mov ecx 0x1
call sub_14000a044
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
test eax eax
je r-xdata
xor edx edx
mov rcx rbx
call sub_140007930
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_140007c48
sub rsp 0x28
xor r8d r8d
mov edx 0x1000
xor ecx ecx
mov [ rsp + 0x30 ] 0x2
call [ HeapCreate@IAT ]
mov [ rw-data ] rax
test rax rax
je r-xdata
add rsp 0x28
retn
call [ GetVersion@IAT ]
cmp al 0x6
jae r-xdata
mov eax 0x1
mov rcx [ rw-data ]
lea r8 [ rsp + 0x30 ]
mov r9d 0x4
xor edx edx
call [ HeapSetInformation@IAT ]
sub_140007ca0
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0x20
mov rax [ rw-data ]
and [ rsp + 0x30 ] 0x0
mov rdi 0x2b992ddfa232
cmp rax rdi
je r-xdata
lea rcx [ rsp + 0x30 ]
call [ GetSystemTimeAsFileTime@IAT ]
mov rbx [ rsp + 0x30 ]
call [ GetCurrentProcessId@IAT ]
mov r11d eax
xor rbx r11
call [ GetCurrentThreadId@IAT ]
mov r11d eax
xor rbx r11
call [ GetTickCount@IAT ]
lea rcx [ rsp + 0x38 ]
mov r11d eax
xor rbx r11
call [ QueryPerformanceCounter@IAT ]
mov r11 [ rsp + 0x38 ]
xor r11 rbx
mov rax 0xffffffffffff
and r11 rax
mov rax 0x2b992ddfa233
cmp r11 rdi
cmove r11 rax
mov [ rw-data ] r11
not r11
mov [ rw-data ] r11
not rax
mov [ rw-data ] rax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_140007d54
push rbx
sub rsp 0x20
mov edx 0x8
lea ecx [ rdx + 0x18 ]
call sub_14000a044
mov rcx rax
mov rbx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
and [ rbx ] 0x0
xor eax eax
lea eax [ rbx + 0x18 ]
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_140007d98
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r14 rcx
call sub_140006844
nop
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov r12 rax
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rbx rax
cmp rax r12
jb r-xdata
xor ebx ebx
mov rdi rax
sub rdi r12
lea r13 [ rdi + 0x8 ]
cmp r13 0x8
jb r-xdata
mov rcx r12
call sub_14000acbc
mov rsi rax
cmp rax r13
jae r-xdata
mov rcx r14
call [ EncodePointer@IAT ]
mov [ rbx ] rax
lea rcx [ rbx + 0x8 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
mov rbx r14
jmp r-xdata
mov edx 0x1000
cmp rax rdx
cmovb rdx rax
add rdx rax
cmp rdx rax
jb r-xdata
call sub_140006850
mov rax rbx
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
xor ebx ebx
mov rcx r12
call sub_14000a0c8
xor ebx ebx
test rax rax
jne r-xdata
mov rcx r12
call sub_14000a0c8
test rax rax
je r-xdata
sar rdi 0x3
lea rbx [ rax + rdi * 8 ]
mov rcx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
jmp r-xdata
lea rdx [ rsi + 0x20 ]
cmp rdx rsi
jb r-xdata
sub_140007ec4
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
xor eax eax
mov rcx rbx
call rax
test eax eax
je r-xdata
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_140007ef8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rcx + 0x1c ]
mov rbp rcx
mov esi 0x101
mov rcx rbx
mov r8d esi
xor edx edx
call sub_140004920
xor r11d r11d
lea rdi [ rbp + 0x10 ]
lea ecx [ r11 + 0x6 ]
movzx eax r11w
mov [ rbp + 0xc ] r11d
mov [ rbp + 0x4 ] r11
[ rdi ]
lea rdi [ rw-data ]
sub rdi rbp
mov al [ rdi + rbx ]
mov [ rbx ] al
inc rbx
dec rsi
jne r-xdata
lea rcx [ rbp + 0x11d ]
mov edx 0x100
mov al [ rcx + rdi ]
mov [ rcx ] al
inc rcx
dec rdx
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_140007f84
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push rbp
lea rbp [ rax - 0x488 ]
sub rsp 0x580
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x470 ] rax
mov rsi rcx
mov ecx [ rcx + 0x4 ]
lea rdx [ rsp + 0x50 ]
call [ GetCPInfo@IAT ]
mov ebx 0x100
test eax eax
je r-xdata
xor edx edx
lea rcx [ rsi + 0x1d ]
xor eax eax
lea rcx [ rsp + 0x70 ]
cmp r8d 0x19
ja r-xdata
or [ rcx ] 0x10
lea eax [ rdx + 0x20 ]
jmp r-xdata
mov [ rcx ] al
inc eax
inc rcx
cmp eax ebx
jb r-xdata
mov al [ rsp + 0x56 ]
mov [ rsp + 0x70 ] 0x20
lea rdi [ rsp + 0x56 ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
lea eax [ rdx - 0x20 ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test al al
jne r-xdata
lea r8d [ rdx - 0x61 ]
lea eax [ r8 + 0x20 ]
cmp eax 0x19
ja r-xdata
mov rcx [ rbp + 0x470 ]
xor rcx rsp
call sub_140004460
lea r11 [ rsp + 0x580 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
inc edx
inc rcx
cmp edx ebx
jb r-xdata
movzx edx [ rdi + 0x1 ]
movzx r8d al
cmp r8d edx
ja r-xdata
mov eax [ rsi + 0xc ]
and [ rsp + 0x38 ] 0x0
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x30 ] eax
mov eax [ rsi + 0x4 ]
mov r9d ebx
mov [ rsp + 0x28 ] eax
lea rax [ rbp + 0x270 ]
mov edx 0x1
xor ecx ecx
mov [ rsp + 0x20 ] rax
call sub_14000afd8
and [ rsp + 0x40 ] 0x0
mov eax [ rsi + 0x4 ]
mov edx [ rsi + 0xc ]
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x70 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d ebx
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_140008f94
and [ rsp + 0x40 ] 0x0
mov eax [ rsi + 0x4 ]
mov edx [ rsi + 0xc ]
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x170 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d 0x200
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_140008f94
lea rdx [ rbp + 0x70 ]
lea r8 [ rbp + 0x170 ]
sub rdx rsi
lea r11 [ rbp + 0x270 ]
lea rcx [ rsi + 0x1d ]
sub r8 rsi
add rdi 0x2
mov al [ rdi ]
sub edx r8d
mov eax r8d
lea rcx [ rsp + r8 + 0x70 ]
lea r8d [ rdx + 0x1 ]
mov dl 0x20
call sub_140004920
test [ r11 ] 0x2
je r-xdata
or [ rcx ] 0x10
mov al [ rdx + rcx - 0x1d ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
mov al [ r8 + rcx - 0x1d ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test [ r11 ] 0x1
je r-xdata
jmp r-xdata
inc rcx
add r11 0x2
dec rbx
jne r-xdata
sub_140008174
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
call sub_140007a6c
mov rdi rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xd
call sub_14000a54c
nop
mov rbx [ rdi + 0xb8 ]
mov [ rsp + 0x30 ] rbx
cmp rbx [ rw-data ]
je r-xdata
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov ecx 0xd
call sub_14000a44c
test rbx rbx
je r-xdata
mov rbx [ rax + 0xb8 ]
jmp r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rbx + 0x20 ]
call sub_140006b88
mov rax [ rw-data ]
mov [ rdi + 0xb8 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x30 ] rax
[ rax ]
mov rbx [ rsp + 0x30 ]
[ rbx ]
jne r-xdata
test rbx rbx
jne r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
call sub_140005564
sub_140008230
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_140004a70
and [ rw-data ] 0x0
cmp ebx 0xfffffffe
jne r-xdata
cmp ebx 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp ebx 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov rax [ rsp + 0x20 ]
mov [ rw-data ] 0x1
mov eax [ rax + 0x4 ]
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov eax ebx
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_1400082c0
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0x40
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x38 ] rax
mov rsi rdx
call sub_140008230
xor ebx ebx
mov edi eax
test eax eax
jne r-xdata
lea r13 [ rw-data ]
mov ecx ebx
mov rbp rbx
mov rax r13
mov r12d 0x1
mov rcx rsi
call sub_140007ef8
jmp r-xdata
lea rcx [ rsi + 0x1c ]
xor edx edx
mov r8d 0x101
call sub_140004920
lea r10 [ rbp + rbp * 2 ]
lea r11 [ rw-data ]
shl r10 0x4
mov ebp 0x4
lea r8 [ r10 + r13 + 0x10 ]
add ecx r12d
add rbp r12
add rax 0x30
cmp ecx 0x5
jb r-xdata
xor eax eax
add r8 0x8
add r11 r12
sub rbp r12
jne r-xdata
cmp [ rcx + 0x1 ] bl
je r-xdata
cmp [ rax ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov rcx r8
cmp [ r8 ] bl
je r-xdata
mov [ rsi + 0x4 ] edi
sub edi 0x3a4
mov [ rsi + 0x8 ] r12d
je r-xdata
movzx edx [ rcx ]
movzx eax [ rcx + 0x1 ]
cmp edx eax
ja r-xdata
or eax 0xffffffff
jmp r-xdata
cmp edi 0xfde9
je r-xdata
mov ebx 0x411
sub edi 0x4
je r-xdata
add rcx 0x2
cmp [ rcx ] bl
jne r-xdata
lea r9 [ rdx + rsi + 0x1d ]
mov rcx [ rsp + 0x38 ]
xor rcx rsp
call sub_140004460
mov rbx [ rsp + 0x80 ]
add rsp 0x40
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
movzx ecx di
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
movzx eax [ rdi + rcx ]
mov [ rcx ] ax
add rcx 0x2
sub rdx r12
jne r-xdata
mov rcx rsi
call sub_140007f84
mov ebx 0x804
jmp r-xdata
sub edi 0xd
je r-xdata
mov al [ r11 ]
add edx r12d
or [ r9 ] al
movzx eax [ rcx + 0x1 ]
add r9 r12
cmp edx eax
jbe r-xdata
lea rdx [ rsp + 0x20 ]
mov ecx edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
sub r10 rsi
mov [ rsi + 0xc ] ebx
lea rcx [ rsi + 0x10 ]
lea rdi [ r10 + r13 - 0xc ]
mov edx 0x6
mov ebx 0x412
jmp r-xdata
dec edi
jne r-xdata
cmp [ rw-data ] ebx
jne r-xdata
lea rcx [ rsi + 0x1c ]
xor edx edx
mov r8d 0x101
call sub_140004920
mov [ rsi + 0x4 ] edi
mov [ rsi + 0xc ] ebx
cmp [ rsp + 0x20 ] r12d
jbe r-xdata
mov ebx 0x404
jmp r-xdata
mov [ rsi + 0x8 ] ebx
lea rax [ rsp + 0x26 ]
cmp [ rsp + 0x26 ] bl
je r-xdata
lea rax [ rsi + 0x1e ]
mov ecx 0xfe
cmp [ rax + 0x1 ] bl
je r-xdata
or [ rax ] 0x8
add rax r12
sub rcx r12
jne r-xdata
mov ecx [ rsi + 0x4 ]
sub ecx 0x3a4
je r-xdata
movzx edi [ rax ]
movzx ecx [ rax + 0x1 ]
cmp edi ecx
ja r-xdata
mov eax 0x411
sub ecx 0x4
je r-xdata
add rax 0x2
cmp [ rax ] bl
jne r-xdata
sub ecx edi
lea rdx [ rdi + rsi + 0x1d ]
add ecx r12d
lea rdi [ rsi + 0x10 ]
movzx eax bx
mov ecx 0x6
[ rdi ]
jmp r-xdata
mov eax 0x804
jmp r-xdata
sub ecx 0xd
je r-xdata
or [ rdx ] 0x4
add rdx r12
sub rcx r12
jne r-xdata
mov [ rsi + 0xc ] eax
mov [ rsi + 0x8 ] r12d
jmp r-xdata
mov eax 0x412
jmp r-xdata
dec ecx
je r-xdata
mov eax 0x404
jmp r-xdata
mov eax ebx
jmp r-xdata
sub_140008538
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r13
sub rsp 0x30
mov edi ecx
or r13d 0xffffffff
call sub_140007a6c
mov rsi rax
call sub_140008174
mov rbx [ rsi + 0xb8 ]
mov ecx edi
call sub_140008230
mov r12d eax
cmp eax [ rbx + 0x4 ]
je r-xdata
xor edi edi
mov r13d edi
mov ecx 0x220
call sub_140009fc4
mov rbx rax
xor edi edi
test rax rax
je r-xdata
mov eax r13d
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
mov r12 [ rsp + 0x58 ]
add rsp 0x30
pop r13
retn
mov rdx [ rsi + 0xb8 ]
mov rcx rax
mov r8d 0x220
call sub_140004e50
mov [ rbx ] edi
mov rdx rbx
mov ecx r12d
call sub_1400082c0
mov r13d eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov rcx [ rsi + 0xb8 ]
lea r12 [ rw-data ]
[ rcx ]
jne r-xdata
lea r12 [ rw-data ]
cmp rbx r12
je r-xdata
mov [ rsi + 0xb8 ] rbx
[ rbx ]
test [ rsi + 0xc8 ] 0x2
jne r-xdata
mov rcx [ rsi + 0xb8 ]
cmp rcx r12
je r-xdata
call sub_14000670c
mov [ rax ] 0x16
jmp r-xdata
mov rcx rbx
call sub_140005564
test [ rw-data ] 0x1
jne r-xdata
call sub_140005564
mov esi 0xd
mov ecx esi
call sub_14000a54c
nop
mov eax [ rbx + 0x4 ]
mov [ rw-data ] eax
mov eax [ rbx + 0x8 ]
mov [ rw-data ] eax
mov eax [ rbx + 0xc ]
mov [ rw-data ] eax
mov edx edi
lea r8 [ __dos_header ]
mov edx edi
movsxd rcx edx
movzx eax [ rbx + rcx * 2 + 0x10 ]
mov [ r8 + rcx * 2 + 0x55ed0 ] ax
inc edx
jmp r-xdata
mov [ rsp + 0x20 ] edi
cmp edi 0x100
jge r-xdata
movsxd rcx edx
mov al [ rcx + rbx + 0x1c ]
mov [ rcx + r8 + 0x144d0 ] al
inc edx
jmp r-xdata
mov [ rsp + 0x20 ] edx
cmp edx 0x5
jge r-xdata
mov rax [ rw-data ]
[ rax ]
jne r-xdata
movsxd rcx edi
mov al [ rcx + rbx + 0x11d ]
mov [ rcx + r8 + 0x145e0 ] al
inc edi
jmp r-xdata
mov [ rsp + 0x20 ] edx
cmp edx 0x101
jge r-xdata
mov [ rw-data ] rbx
[ rbx ]
mov ecx esi
call sub_14000a44c
jmp r-xdata
mov rcx [ rw-data ]
cmp rcx r12
je r-xdata
call sub_140005564
sub_140008740
[ rcx ]
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ]
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ]
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ]
lea rax [ rcx + 0x58 ]
mov r8d 0x6
[ rax ]
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
dec r8
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ]
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ]
retn
[ rdx ]
sub_1400087cc
test rcx rcx
je r-xdata
mov rax rcx
retn
or r9d 0xffffffff
[ rcx ] r9d
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ] r9d
lea rax [ rcx + 0x58 ]
mov r8d 0x6
[ rax ] r9d
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
dec r8
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ] r9d
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ] r9d
[ rdx ] r9d
sub_140008870
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rax [ rcx + 0x128 ]
mov rbx rcx
test rax rax
je r-xdata
mov rax [ rbx + 0x130 ]
test rax rax
je r-xdata
lea rcx [ rw-data ]
cmp rax rcx
je r-xdata
mov rcx [ rbx + 0x158 ]
lea rax [ rw-data ]
cmp rcx rax
je r-xdata
cmp [ rax ] 0x0
jne r-xdata
mov rax [ rbx + 0x110 ]
test rax rax
je r-xdata
lea rdi [ rbx + 0x58 ]
mov esi 0x6
cmp [ rcx + 0x160 ] 0x0
jne r-xdata
mov rcx [ rbx + 0x138 ]
sub rcx 0xfe
call sub_140005564
mov rcx [ rbx + 0x148 ]
mov edi 0x80
sub rcx rdi
call sub_140005564
mov rcx [ rbx + 0x150 ]
sub rcx rdi
call sub_140005564
mov rcx [ rbx + 0x130 ]
call sub_140005564
cmp [ rax ] 0x0
jne r-xdata
cmp [ rdi - 0x8 ] 0x0
je r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
call sub_14000b058
mov rcx [ rbx + 0x158 ]
call sub_140005564
mov rcx [ rbx + 0x120 ]
test rcx rcx
je r-xdata
add rdi 0x20
dec rsi
jne r-xdata
mov rcx [ rdi + 0x8 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
mov rcx [ rbx + 0x118 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp [ rdi - 0x10 ] rax
je r-xdata
mov rcx rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_140005564
cmp [ rcx ] 0x0
jne r-xdata
call sub_140005564
mov rcx [ rbx + 0x110 ]
call sub_140005564
mov rcx [ rbx + 0x128 ]
call sub_140005564
cmp [ rcx ] 0x0
jne r-xdata
call sub_140005564
mov rcx [ rbx + 0x128 ]
call sub_14000b4b4
call sub_140005564
call sub_140005564
mov rcx [ rbx + 0x128 ]
call sub_14000b448
sub_1400089ec
push rbx
sub rsp 0x20
mov rbx rdx
test rdx rdx
je r-xdata
xor eax eax
test rcx rcx
je r-xdata
mov r10 [ rcx ]
cmp r10 rdx
je r-xdata
mov rax rbx
jmp r-xdata
mov [ rcx ] rdx
mov rcx rdx
call sub_140008740
test r10 r10
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx r10
call sub_1400087cc
cmp [ r10 ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp r10 rax
je r-xdata
call sub_140008870
sub_140008a44
push rbx
sub rsp 0x20
call sub_140007a6c
mov rbx rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xc
call sub_14000a54c
nop
lea rcx [ rbx + 0xc0 ]
mov rdx [ rw-data ]
call sub_1400089ec
mov rbx rax
mov ecx 0xc
call sub_14000a44c
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
lea ecx [ rbx + 0x20 ]
call sub_140006b88
call sub_140007a6c
mov rbx [ rax + 0xc0 ]
jmp r-xdata
test rbx rbx
jne r-xdata
sub_140008b40
mov rax rcx
mov ecx 0x5a4d
cmp [ rax ] cx
je r-xdata
movsxd rcx [ rax + 0x3c ]
add rcx rax
xor eax eax
cmp [ rcx ] 0x4550
jne r-xdata
xor eax eax
retn
retn
mov edx 0x20b
cmp [ rcx + 0x18 ] dx
sete al
sub_140008b70
movsxd r8 [ rcx + 0x3c ]
xor r9d r9d
mov r10 rdx
add r8 rcx
movzx eax [ r8 + 0x14 ]
movzx r11d [ r8 + 0x6 ]
lea rcx [ rax + r8 + 0x18 ]
test r11d r11d
je r-xdata
xor eax eax
retn
mov edx [ rcx + 0xc ]
cmp r10 rdx
jb r-xdata
inc r9d
add rcx 0x28
cmp r9d r11d
jb r-xdata
mov eax [ rcx + 0x8 ]
add eax edx
cmp r10 rax
jb r-xdata
mov rax rcx
retn
sub_140008bc0
sub rsp 0x28
mov r8 rcx
lea r9 [ __dos_header ]
mov rcx r9
call sub_140008b40
test eax eax
je r-xdata
add rsp 0x28
retn
sub r8 r9
mov rdx r8
mov rcx r9
call sub_140008b70
test rax rax
je r-xdata
mov eax [ rax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
jmp r-xdata
sub_140008c20
mov rax rcx
neg rcx
test rax 0x7
je r-xdata
mov r8 0x7efefefefefefeff
mov r11 0x8101010101010100
nop
mov rdx [ rax ]
mov r9 r8
add rax 0x8
add r9 rdx
not rdx
xor rdx r9
and rdx r11
je r-xdata
mov rdx [ rax - 0x8 ]
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x1 ]
retn
test al 0x7
jne r-xdata
lea rax [ rcx + rax - 0x8 ]
retn
test dh dh
je r-xdata
mov dl [ rax ]
inc rax
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x7 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x6 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x5 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x4 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x3 ]
retn
shr edx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x2 ]
retn
test dh dh
jne r-xdata
sub_140008cc8
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x50
lea rbp [ rsp + 0x40 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x8 ] rax
mov ebx [ rbp + 0x60 ]
xor edi edi
mov r14 r9
mov r15d r8d
mov [ rbp ] edx
test ebx ebx
jle r-xdata
mov r12d [ rbp + 0x78 ]
mov esi edi
test r12d r12d
jne r-xdata
mov r10d ebx
mov rax r9
neg [ rbp + 0x80 ]
mov r9d ebx
mov r8 r14
sbb edx edx
mov ecx r12d
mov [ rsp + 0x28 ] edi
and edx 0x8
mov [ rsp + 0x20 ] rdi
inc edx
call [ MultiByteToWideChar@IAT ]
movsxd r13 eax
test eax eax
jne r-xdata
mov rax [ rcx ]
mov r12d [ rax + 0x4 ]
mov eax ebx
sub eax r10d
dec eax
cmp eax ebx
lea ebx [ rax + 0x1 ]
jl r-xdata
inc rax
test r10d r10d
jne r-xdata
mov r8 0xffffffffffffff0
test eax eax
jle r-xdata
xor eax eax
jmp r-xdata
mov ebx eax
dec r10d
cmp [ rax ] dil
je r-xdata
or r10d 0xffffffff
test rdi rdi
je r-xdata
xor edx edx
lea rax [ rdx - 0x20 ]
div r13
cmp rax 0x2
jb r-xdata
mov rcx [ rbp + 0x8 ]
xor rcx rbp
call sub_140004460
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r9d ebx
mov r8 r14
mov edx 0x1
mov ecx r12d
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea rcx [ r13 + r13 + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rdi - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov r14d [ rbp ]
and [ rsp + 0x28 ] esi
and [ rsp + 0x20 ] rsi
mov ecx r14d
mov r9d r13d
mov r8 rdi
mov edx r15d
call [ LCMapStringW@IAT ]
movsxd rsi eax
test eax eax
je r-xdata
call sub_1400054ac
mov rdi rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax esi
call sub_140005564
mov r8d 0x400
test r8d r15d
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_140004a20
sub rsp rax
lea rdi [ rsp + 0x40 ]
test rdi rdi
je r-xdata
mov rax r8
test eax eax
jle r-xdata
mov ecx [ rbp + 0x70 ]
test ecx ecx
je r-xdata
mov [ rdi ] 0xcccc
jmp r-xdata
xor ebx ebx
xor edx edx
lea rax [ rdx - 0x20 ]
div rsi
cmp rax 0x2
jb r-xdata
cmp esi ecx
jg r-xdata
add rdi 0x10
mov r9d r13d
mov r8 rdi
mov edx r15d
mov ecx r14d
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] rbx
call [ LCMapStringW@IAT ]
xor ecx ecx
test eax eax
je r-xdata
lea rcx [ rsi + rsi + 0x10 ]
cmp rcx r8
ja r-xdata
mov rax [ rbp + 0x68 ]
mov [ rsp + 0x28 ] ecx
mov r9d r13d
mov r8 rdi
mov edx r15d
mov ecx r14d
mov [ rsp + 0x20 ] rax
call [ LCMapStringW@IAT ]
jmp r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov eax [ rbp + 0x70 ]
xor edx edx
mov [ rsp + 0x38 ] rcx
mov r9d esi
mov r8 rbx
mov [ rsp + 0x30 ] rcx
test eax eax
jne r-xdata
call sub_1400054ac
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
call sub_140005564
mov [ rsp + 0x28 ] eax
mov rax [ rbp + 0x68 ]
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x28 ] ecx
mov [ rsp + 0x20 ] rcx
jmp r-xdata
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_140004a20
sub rsp rax
lea rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
mov ecx r12d
call [ WideCharToMultiByte@IAT ]
mov esi eax
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
jmp r-xdata
sub_140008f94
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x70
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x50 ]
mov rbx r9
mov edi r8d
call sub_140004a70
mov eax [ rsp + 0xb8 ]
mov r11d [ rsp + 0xc0 ]
lea rcx [ rsp + 0x50 ]
mov [ rsp + 0x40 ] r11d
mov [ rsp + 0x38 ] eax
mov eax [ rsp + 0xb0 ]
mov [ rsp + 0x30 ] eax
mov rax [ rsp + 0xa8 ]
mov r9 rbx
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0xa0 ]
mov r8d edi
mov edx esi
mov [ rsp + 0x20 ] eax
call sub_140008cc8
cmp [ rsp + 0x68 ] 0x0
je r-xdata
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rsp r11
pop rdi
retn
mov rcx [ rsp + 0x60 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_14000902c
push rbx
sub rsp 0x20
test rcx rcx
je r-xdata
call sub_14000670c
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
mov r9 rcx
sub r9 r8
mov [ rcx ] r8b
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ rcx ] dl
call sub_14000670c
mov ebx 0x22
jmp r-xdata
mov al [ r8 ]
mov [ r9 + r8 ] al
inc r8
test al al
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_1400066a4
mov eax ebx
sub_140009090
push rbx
sub rsp 0x30
mov rbx rcx
mov ecx 0xe
call sub_14000a54c
nop
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
mov ecx 0xe
call sub_14000a44c
add rsp 0x30
pop rbx
retn
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov rcx [ rbx + 0x8 ]
call sub_140005564
and [ rbx + 0x8 ] 0x0
cmp [ rcx ] rax
jne r-xdata
mov rdx rcx
jmp r-xdata
mov rax [ rcx + 0x8 ]
mov [ rdx + 0x8 ] rax
call sub_140005564
jmp r-xdata
mov [ rsp + 0x20 ] rcx
test rcx rcx
je r-xdata
sub_140009110
sub rdx rcx
mov r9 rdx
test cl 0x7
je r-xdata
mov r11 0x8101010101010100
mov al [ rcx ]
mov dl [ rcx + r9 ]
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
inc rcx
test al al
je r-xdata
mov r10 0x7efefefefefefeff
add r10 rdx
xor rax 0xffffffffffffffff
add rcx 0x8
xor rax r10
test r11 rax
je r-xdata
xor eax eax
retn
test rcx 0x7
jne r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
jmp r-xdata
nop
test dl dl
je r-xdata
xor eax eax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_1400091c0
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x10 ] dl
sub rsp 0x28
cmp [ rcx ] 0xe06d7363
jne r-xdata
add rsp 0x28
mov rax [ rcx + 0x30 ]
test rax rax
je r-xdata
cmp [ rax + 0x4 ] 0x0
je r-xdata
movsxd rax [ rax + 0x4 ]
mov rdx [ rcx + 0x38 ]
add rdx rax
mov rcx [ rcx + 0x28 ]
call rdx
jmp r-xdata
sub_140009250
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
mov edi r8d
mov [ rsp + 0x38 ] rdx
mov ecx ebx
call sub_14000b704
cmp rax 0xffffffffffffffff
jne r-xdata
mov edx [ rsp + 0x38 ]
lea r8 [ rsp + 0x3c ]
mov r9d edi
mov rcx rax
call [ SetFilePointer@IAT ]
mov [ rsp + 0x38 ] eax
cmp eax 0xffffffff
jne r-xdata
call sub_14000670c
mov [ rax ] 0x9
mov rcx rbx
mov rax rbx
lea rdx [ rw-data ]
sar rax 0x5
and ecx 0x1f
mov rax [ rdx + rax * 8 ]
imul rcx rcx 0x58
and [ rax + rcx + 0x8 ] 0xfd
mov rax [ rsp + 0x38 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx eax
call sub_14000674c
jmp r-xdata
or rax 0xffffffffffffffff
jmp r-xdata
sub_1400092e8
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x20
mov esi r8d
mov r12 rdx
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_14000672c
and [ rax ] 0x0
call sub_14000670c
mov [ rax ] 0x9
jmp r-xdata
call sub_14000672c
and [ rax ] 0x0
call sub_14000670c
mov [ rax ] 0x9
call sub_1400066a4
cmp edi [ rw-data ]
jae r-xdata
or rax 0xffffffffffffffff
mov rbx rdi
mov r13 rdi
sar r13 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r14 + r13 * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_14000b778
nop
mov rax [ r14 + r13 * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_14000670c
mov [ rax ] 0x9
call sub_14000672c
and [ rax ] 0x0
or rbx 0xffffffffffffffff
mov r8d esi
mov rdx r12
mov ecx edi
call sub_140009250
mov rbx rax
jmp r-xdata
mov rbx [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov ecx edi
call sub_14000b820
mov rax rbx
jmp r-xdata
sub_1400093cc
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1a30 ]
mov eax 0x1b30
call sub_140004a20
sub rsp rax
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1a20 ] rax
xor edi edi
mov r14d r8d
mov r13 rdx
and [ rsp + 0x44 ] edi
movsxd rbx ecx
test r8d r8d
jne r-xdata
test rdx rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov r15 rbx
mov r12 rbx
lea rax [ rw-data ]
sar r12 0x5
and r15d 0x1f
mov rcx [ rax + r12 * 8 ]
mov [ rsp + 0x50 ] r12
imul r15 r15 0x58
mov sil [ r15 + rcx + 0x38 ]
mov [ rsp + 0x60 ] r15
add sil sil
sar sil 0x1
cmp sil 0x2
je r-xdata
call sub_14000672c
and [ rax ] edi
call sub_14000670c
mov [ rax ] 0x16
call sub_1400066a4
mov rcx [ rbp + 0x1a20 ]
xor rcx rsp
call sub_140004460
mov rbx [ rsp + 0x1b88 ]
add rsp 0x1b30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax r14d
not eax
test al 0x1
je r-xdata
cmp sil 0x1
jne r-xdata
test [ r15 + rcx + 0x8 ] 0x20
je r-xdata
mov ecx ebx
call sub_140009c60
test eax eax
je r-xdata
xor edx edx
mov ecx ebx
lea r8d [ rdx + 0x2 ]
call sub_140009250
lea rax [ rw-data ]
mov rcx [ rax + r12 * 8 ]
test [ r15 + rcx + 0x8 ] 0x80
je r-xdata
lea rax [ rw-data ]
mov rax [ rax + r12 * 8 ]
test [ r15 + rax + 0x8 ] 0x80
je r-xdata
mov rcx [ r15 + rcx ]
and [ rsp + 0x20 ] rdi
lea r9 [ rsp + 0x48 ]
mov r8d r14d
mov rdx r13
call [ WriteFile@IAT ]
test eax eax
je r-xdata
xor ebx ebx
mov r12 r13
test sil sil
jne r-xdata
call sub_140007a6c
xor ebx ebx
lea rdx [ rsp + 0x5c ]
mov rcx [ rax + 0xc0 ]
lea rax [ rw-data ]
cmp [ rcx + 0x14 ] ebx
mov rcx [ rax + r12 * 8 ]
mov rcx [ r15 + rcx ]
sete bl
call [ GetConsoleMode@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov edi [ rsp + 0x48 ]
xor ebx ebx
jmp r-xdata
cmp sil 0x2
jne r-xdata
test r14d r14d
je r-xdata
test ebx ebx
je r-xdata
test edi edi
jne r-xdata
test r14d r14d
je r-xdata
test r14d r14d
je r-xdata
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rax [ rcx + rax * 8 ]
test [ r15 + rax + 0x8 ] 0x40
je r-xdata
lea edx [ rbx + 0xd ]
call [ GetConsoleCP@IAT ]
and [ rsp + 0x58 ] edi
mov rbx r13
mov [ rsp + 0x5c ] eax
test r14d r14d
je r-xdata
test sil sil
je r-xdata
sub edi [ rsp + 0x44 ]
mov eax edi
test ebx ebx
je r-xdata
mov r8d 0xd
mov edx 0xd
call sub_14000670c
mov [ rax ] 0x1c
call sub_14000672c
and [ rax ] 0x0
jmp r-xdata
cmp [ r13 ] 0x1a
je r-xdata
and [ rsp + 0x20 ] rbx
lea rax [ rbp + 0x620 ]
mov r8d esi
sub r8d eax
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
mov [ rsp + 0x44 ] r15d
mov r15 [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
lea r9 [ rsp + 0x48 ]
lea rdx [ rbp + 0x620 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov al [ r12 ]
inc r12
cmp al 0xa
jne r-xdata
mov ebx [ rsp + 0x4c ]
jmp r-xdata
test sil sil
jne r-xdata
cmp ebx 0x5
jne r-xdata
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
lea rax [ rsp + 0x70 ]
sub ecx eax
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x28 ] 0xd55
mov eax ecx
mov ecx 0xfde9
cdq
sub eax edx
xor edx edx
sar eax 0x1
mov r9d eax
lea rax [ rbp + 0x620 ]
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov r15d eax
test eax eax
je r-xdata
movzx eax [ r12 ]
add r12 0x2
cmp ax 0xa
jne r-xdata
and [ rsp + 0x20 ] rbx
lea rax [ rbp + 0x620 ]
mov r8d esi
sub r8d eax
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
mov [ rsp + 0x44 ] r15d
mov r15 [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
lea r9 [ rsp + 0x48 ]
lea rdx [ rbp + 0x620 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
movzx eax [ r12 ]
add r12 0x2
cmp ax 0xa
jne r-xdata
or eax 0xffffffff
jmp r-xdata
add edi [ rsp + 0x48 ]
lea rax [ rbp + 0x620 ]
sub rsi rax
movsxd rax [ rsp + 0x48 ]
cmp rax rsi
jl r-xdata
inc rcx
mov [ rsi ] al
inc rsi
cmp rcx 0x13ff
jb r-xdata
mov [ rsi ] dl
inc r15d
inc rsi
inc rcx
cmp sil 0x1
je r-xdata
mov cl [ rbx ]
xor eax eax
cmp cl 0xa
sete al
mov [ rsp + 0x4c ] eax
lea rax [ rw-data ]
mov rdx [ rax + r12 * 8 ]
cmp [ r15 + rdx + 0x50 ] 0x0
je r-xdata
mov ecx ebx
call sub_14000674c
jmp r-xdata
call sub_14000670c
mov [ rax ] 0x9
call sub_14000672c
mov [ rax ] ebx
jmp r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
xor esi esi
add rdx 0x2
mov [ rcx ] ax
add rcx 0x2
cmp rdx 0x6a8
jb r-xdata
mov [ rcx ] r8w
add rcx 0x2
add rdx 0x2
add edi [ rsp + 0x48 ]
lea rax [ rbp + 0x620 ]
sub rsi rax
movsxd rax [ rsp + 0x48 ]
cmp rax rsi
jl r-xdata
add rcx 0x2
mov [ rsi ] ax
add rsi 0x2
cmp rcx 0x13fe
jb r-xdata
mov [ rsi ] dx
add r15d 0x2
add rsi 0x2
add rcx 0x2
mov eax r12d
mov edx 0xd
sub eax r13d
cmp eax r14d
jb r-xdata
mov eax r12d
sub eax r13d
cmp eax r14d
jae r-xdata
movzx eax [ rbx ]
xor r12d r12d
cmp ax 0xa
mov [ rsp + 0x40 ] ax
sete r12b
add rbx 0x2
mov [ rsp + 0x4c ] r12d
jmp r-xdata
cmp sil 0x2
jne r-xdata
movsx ecx cl
call sub_140009f44
test eax eax
je r-xdata
mov al [ r15 + rdx + 0x4c ]
mov [ rsp + 0x61 ] cl
mov r8d 0x2
mov [ rsp + 0x60 ] al
and [ r15 + rdx + 0x50 ] 0x0
lea rdx [ rsp + 0x60 ]
jmp r-xdata
mov r15 [ rsp + 0x60 ]
call [ GetLastError@IAT ]
mov ebx eax
add esi [ rsp + 0x48 ]
cmp r15d esi
jg r-xdata
mov eax r12d
sub eax r13d
cmp eax r14d
jae r-xdata
mov eax r12d
mov edx 0xd
sub eax r13d
cmp eax r14d
jb r-xdata
mov eax r12d
sub eax r13d
cmp eax r14d
jae r-xdata
mov r15d [ rsp + 0x44 ]
lea rsi [ rbp + 0x620 ]
xor ecx ecx
jmp r-xdata
cmp sil 0x1
je r-xdata
mov r12d [ rsp + 0x4c ]
mov r8d 0x1
mov rdx rbx
mov rax r14
sub rax rbx
add rax r13
cmp rax 0x1
jle r-xdata
lea rcx [ rsp + 0x40 ]
call sub_14000ae70
cmp eax 0xffffffff
je r-xdata
mov edi r12d
mov r8d 0xd
sub edi r13d
cmp edi r14d
jb r-xdata
mov rax [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
movsxd rcx esi
lea rdx [ rbp + rcx + 0x620 ]
mov r8d r15d
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
mov rax [ rsp + 0x60 ]
lea r9 [ rsp + 0x48 ]
mov rcx [ rax + rcx ]
sub r8d esi
call [ WriteFile@IAT ]
test eax eax
je r-xdata
jmp r-xdata
mov r15d [ rsp + 0x44 ]
lea rsi [ rbp + 0x620 ]
xor ecx ecx
jmp r-xdata
movzx ecx [ rsp + 0x40 ]
call sub_14000b848
cmp ax [ rsp + 0x40 ]
jne r-xdata
cmp sil 0x2
jne r-xdata
mov ebx [ rsp + 0x4c ]
jmp r-xdata
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
mov ecx [ rsp + 0x5c ]
lea rax [ rsp + 0x60 ]
lea r8 [ rsp + 0x40 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] 0x5
inc rbx
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov r12d eax
test eax eax
je r-xdata
mov al [ rbx ]
lea rdx [ rw-data ]
inc edi
mov rcx [ rdx + r12 * 8 ]
mov [ r15 + rcx + 0x4c ] al
mov rax [ rdx + r12 * 8 ]
mov [ r15 + rax + 0x50 ] 0x1
lea rcx [ rsp + 0x40 ]
mov r8d 0x2
mov rdx rbx
call sub_14000ae70
cmp eax 0xffffffff
je r-xdata
lea rcx [ rsp + 0x70 ]
xor edx edx
cmp r15d esi
jg r-xdata
add edi 0x2
test r12d r12d
je r-xdata
mov r12 [ rsp + 0x50 ]
mov rcx [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
lea rax [ rw-data ]
mov rcx [ rax + rcx * 8 ]
lea r9 [ rsp + 0x58 ]
lea rdx [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
mov r8d r12d
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc rbx
jmp r-xdata
mov r12d 0xd
mov ecx r12d
mov [ rsp + 0x40 ] r12w
call sub_14000b848
cmp ax [ rsp + 0x40 ]
jne r-xdata
jmp r-xdata
mov edi ebx
sub edi r13d
add edi [ rsp + 0x44 ]
cmp [ rsp + 0x58 ] r12d
jl r-xdata
inc edi
inc [ rsp + 0x44 ]
cmp [ rsp + 0x4c ] 0x0
mov r12 [ rsp + 0x50 ]
je r-xdata
mov eax ebx
sub eax r13d
cmp eax r14d
jae r-xdata
and [ rsp + 0x20 ] 0x0
lea rax [ rw-data ]
mov [ rsp + 0x60 ] 0xd
mov rcx [ rax + r12 * 8 ]
lea r9 [ rsp + 0x58 ]
lea rdx [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
mov r8d 0x1
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ rsp + 0x58 ] 0x1
jl r-xdata
inc [ rsp + 0x44 ]
inc edi
jmp r-xdata
sub_140009b2c
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x20
mov esi r8d
mov r12 rdx
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_14000672c
and [ rax ] 0x0
call sub_14000670c
mov [ rax ] 0x9
jmp r-xdata
call sub_14000672c
and [ rax ] 0x0
call sub_14000670c
mov [ rax ] 0x9
call sub_1400066a4
cmp edi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rbx rdi
mov r13 rdi
sar r13 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r14 + r13 * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_14000b778
nop
mov rax [ r14 + r13 * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_14000670c
mov [ rax ] 0x9
call sub_14000672c
and [ rax ] 0x0
or ebx 0xffffffff
mov r8d esi
mov rdx r12
mov ecx edi
call sub_1400093cc
mov ebx eax
jmp r-xdata
mov rbx [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov ecx edi
call sub_14000b820
mov eax ebx
jmp r-xdata
sub_140009c0c
push rbx
sub rsp 0x20
inc [ rw-data ]
mov rbx rcx
mov ecx 0x1000
call sub_140009fc4
mov [ rbx + 0x10 ] rax
test rax rax
je r-xdata
or [ rbx + 0x18 ] 0x4
lea rax [ rbx + 0x20 ]
mov [ rbx + 0x24 ] 0x2
mov [ rbx + 0x10 ] rax
or [ rbx + 0x18 ] 0x8
mov [ rbx + 0x24 ] 0x1000
jmp r-xdata
mov rax [ rbx + 0x10 ]
and [ rbx + 0x8 ] 0x0
mov [ rbx ] rax
add rsp 0x20
pop rbx
retn
sub_140009c60
sub rsp 0x28
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_14000670c
mov [ rax ] 0x9
jmp r-xdata
call sub_14000670c
mov [ rax ] 0x9
call sub_1400066a4
cmp ecx [ rw-data ]
jae r-xdata
xor eax eax
movsxd rcx ecx
lea rdx [ rw-data ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ rdx + rax * 8 ]
movsx eax [ rax + rcx + 0x8 ]
and eax 0x40
jmp r-xdata
add rsp 0x28
retn
sub_140009cc8
push rbx
sub rsp 0x20
mov eax [ rw-data ]
mov ebx 0x14
test eax eax
jne r-xdata
cmp eax ebx
cmovl eax ebx
mov eax 0x200
jmp r-xdata
xor ecx ecx
lea rdx [ rw-data ]
lea edx [ rax + 0x8 ]
mov rcx rbx
mov [ rw-data ] ebx
call sub_14000a044
mov [ rw-data ] rax
test rax rax
jne r-xdata
movsxd rcx eax
mov edx 0x8
mov [ rw-data ] eax
call sub_14000a044
mov [ rw-data ] rax
test rax rax
jne r-xdata
xor r8d r8d
lea rdx [ rw-data ]
lea r9d [ r8 + 0x3 ]
mov rax [ rw-data ]
jmp r-xdata
mov eax 0x1a
jmp r-xdata
mov [ rdx ] 0xfffffffe
cmp r10 0xfffffffffffffffe
je r-xdata
mov [ rcx + rax ] rdx
add rdx 0x30
add rcx 0x8
dec rbx
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx r8
lea r10 [ rw-data ]
mov rax r8
sar rax 0x5
and ecx 0x1f
mov rax [ r10 + rax * 8 ]
imul rcx rcx 0x58
mov r10 [ rcx + rax ]
cmp r10 0xffffffffffffffff
je r-xdata
xor eax eax
test r10 r10
jne r-xdata
inc r8
add rdx 0x30
dec r9
jne r-xdata
sub_140009dd0
push rbx
sub rsp 0x20
mov rbx rcx
lea rcx [ rw-data ]
cmp rbx rcx
jb r-xdata
lea rcx [ rbx + 0x30 ]
add rsp 0x20
pop rbx
jmp [ EnterCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rbx rax
ja r-xdata
mov rdx rbx
mov rax 0x2aaaaaaaaaaaaaab
sub rdx rcx
imul rdx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
lea ecx [ rcx + rdx + 0x10 ]
call sub_14000a54c
bts [ rbx + 0x18 ] 0xf
add rsp 0x20
pop rbx
retn
sub_140009e34
push rbx
sub rsp 0x20
mov rbx rdx
cmp ecx 0x14
jge r-xdata
lea rcx [ rdx + 0x30 ]
add rsp 0x20
pop rbx
jmp [ EnterCriticalSection@IAT ]
add ecx 0x10
call sub_14000a54c
bts [ rbx + 0x18 ] 0xf
add rsp 0x20
pop rbx
retn
sub_140009e68
lea rdx [ rw-data ]
cmp rcx rdx
jb r-xdata
add rcx 0x30
jmp [ LeaveCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rcx rax
ja r-xdata
btr [ rcx + 0x18 ] 0xf
sub rcx rdx
mov rax 0x2aaaaaaaaaaaaaab
imul rcx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
lea ecx [ rcx + rdx + 0x10 ]
jmp sub_14000a44c
sub_140009efc
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
call sub_140004a70
mov rax [ rsp + 0x20 ]
movzx r11d bl
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_140009f44
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_140004a70
mov rax [ rsp + 0x20 ]
movzx r11d bl
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_140009f8c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
mov edi 0xa
mov rcx [ rbx ]
call [ EncodePointer@IAT ]
mov [ rbx ] rax
add rbx 0x8
dec rdi
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_140009fc4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov edi [ rw-data ]
xor ebp ebp
mov rsi rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
test edi edi
je r-xdata
mov ecx ebp
call [ Sleep@IAT ]
mov edi [ rw-data ]
lea r11d [ rbp + 0x3e8 ]
cmp r11d edi
mov ebp r11d
cmova ebp r12d
cmp ebp r12d
jne r-xdata
mov rcx rsi
call sub_1400054ac
mov rbx rax
test rax rax
jne r-xdata
sub_14000a044
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor edi edi
mov rsi rdx
mov rbp rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
cmp [ rw-data ] eax
jbe r-xdata
mov ecx edi
call [ Sleep@IAT ]
lea r11d [ rdi + 0x3e8 ]
cmp r11d [ rw-data ]
mov edi r11d
cmova edi r12d
cmp edi r12d
jne r-xdata
xor r8d r8d
mov rdx rsi
mov rcx rbp
call sub_14000bb1c
mov rbx rax
test rax rax
jne r-xdata
sub_14000a0c8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor esi esi
mov rdi rdx
mov rbp rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
test rdi rdi
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
mov ecx esi
call [ Sleep@IAT ]
lea r11d [ rsi + 0x3e8 ]
cmp r11d [ rw-data ]
mov esi r11d
cmova esi r12d
cmp esi r12d
jne r-xdata
mov rdx rdi
mov rcx rbp
call sub_14000bbb8
mov rbx rax
test rax rax
jne r-xdata
sub_14000a168
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x20 ] r9w
push rbp
push rsi
push rdi
mov rbp rsp
sub rsp 0x60
mov rdi r8
mov rsi rdx
mov rbx rcx
test rdx rdx
jne r-xdata
test rcx rcx
je r-xdata
test r8 r8
je r-xdata
cmp r8 0x7fffffff
jbe r-xdata
or [ rcx ] 0xffffffff
test rcx rcx
je r-xdata
mov rdx [ rbp + 0x40 ]
lea rcx [ rbp - 0x20 ]
call sub_140004a70
mov r11 [ rbp - 0x20 ]
cmp [ r11 + 0x14 ] 0x0
jne r-xdata
call sub_14000670c
mov ebx 0x16
mov [ rax ] ebx
call sub_1400066a4
xor eax eax
jmp r-xdata
and [ rcx ] edx
and [ rbp + 0x28 ] 0x0
mov ecx [ r11 + 0x4 ]
lea rax [ rbp + 0x28 ]
mov [ rsp + 0x38 ] rax
and [ rsp + 0x30 ] 0x0
lea r8 [ rbp + 0x38 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rsi
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
movzx eax [ rbp + 0x38 ]
mov ecx 0xff
cmp ax cx
jbe r-xdata
mov rbx [ rsp + 0x80 ]
add rsp 0x60
pop rdi
pop rsi
pop rbp
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ rbp + 0x28 ] 0x0
jne r-xdata
test rsi rsi
je r-xdata
test rsi rsi
je r-xdata
call sub_14000670c
mov [ rax ] 0x2a
call sub_14000670c
cmp [ rbp - 0x8 ] 0x0
mov eax [ rax ]
je r-xdata
test rsi rsi
je r-xdata
test rbx rbx
je r-xdata
test rbx rbx
je r-xdata
test rdi rdi
jne r-xdata
test rdi rdi
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
call sub_14000670c
mov ebx 0x22
mov [ rax ] ebx
call sub_1400066a4
cmp [ rbp - 0x8 ] 0x0
je r-xdata
test rdi rdi
je r-xdata
cmp [ rbp - 0x8 ] 0x0
je r-xdata
mov [ rbx ] eax
jmp r-xdata
mov [ rbx ] 0x1
mov [ rsi ] al
call sub_14000670c
lea ebx [ rdi + 0x22 ]
mov [ rax ] ebx
call sub_1400066a4
cmp [ rbp - 0x8 ] dil
je r-xdata
mov r8 rdi
xor edx edx
mov rcx rsi
call sub_140004920
mov eax ebx
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov r8 rdi
xor edx edx
mov rcx rsi
call sub_140004920
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_14000a340
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x20
lea r12 [ rw-data ]
xor esi esi
xor ebx ebx
mov rdi r12
inc ebx
add rdi 0x10
cmp ebx 0x24
jl r-xdata
movsxd rax esi
mov edx 0xfa0
inc esi
lea rcx [ rax + rax * 4 ]
lea rax [ rw-data ]
lea rcx [ rax + rcx * 8 ]
mov [ rdi ] rcx
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
cmp [ rdi + 0x8 ] 0x1
jne r-xdata
mov eax 0x1
movsxd rax ebx
add rax rax
and [ r12 + rax * 8 ] 0x0
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r12
retn
sub_14000a3c4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov edi 0x24
lea rbx [ rw-data ]
mov esi edi
add rbx 0x10
dec rsi
jne r-xdata
cmp [ rbx + 0x8 ] 0x1
je r-xdata
mov rbp [ rbx ]
test rbp rbp
je r-xdata
lea rbx [ rw-data ]
mov rcx rbp
call [ DeleteCriticalSection@IAT ]
mov rcx rbp
call sub_140005564
and [ rbx ] 0x0
add rbx 0x10
dec rdi
jne r-xdata
cmp [ rbx ] 0x1
jne r-xdata
mov rcx [ rbx - 0x8 ]
test rcx rcx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
call [ DeleteCriticalSection@IAT ]
sub_14000a464
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r13
sub rsp 0x20
movsxd rbx ecx
mov esi 0x1
cmp [ rw-data ] 0x0
jne r-xdata
mov rdi rbx
add rdi rdi
lea r13 [ rw-data ]
cmp [ r13 + rdi * 8 ] 0x0
je r-xdata
call sub_140006e3c
lea ecx [ rsi + 0x1d ]
call sub_140006bdc
mov ecx 0xff
call sub_14000682c
mov ecx 0x28
call sub_140009fc4
mov rbx rax
test rax rax
jne r-xdata
mov eax esi
jmp r-xdata
mov ecx 0xa
call sub_14000a54c
nop
mov rcx rbx
cmp [ r13 + rdi * 8 ] 0x0
jne r-xdata
call sub_14000670c
mov [ rax ] 0xc
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r13
retn
call sub_140005564
nop
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
mov [ r13 + rdi * 8 ] rbx
jmp r-xdata
mov rcx rbx
call sub_140005564
call sub_14000670c
mov [ rax ] 0xc
xor esi esi
jmp r-xdata
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
jmp r-xdata
sub_14000a54c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
lea rdi [ rw-data ]
add rbx rbx
cmp [ rdi + rbx * 8 ] 0x0
jne r-xdata
mov rcx [ rdi + rbx * 8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
jmp [ EnterCriticalSection@IAT ]
call sub_14000a464
test eax eax
jne r-xdata
lea ecx [ rax + 0x11 ]
call sub_140006b88
sub_14000a5c0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov ebx ecx
xor edi edi
mov [ rsp + 0x60 ] edi
xor esi esi
mov edx ecx
sub edx 0x2
je r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
sub edx 0x2
je r-xdata
test r13 r13
jne r-xdata
xor eax eax
jmp r-xdata
call sub_1400079e8
mov rsi rax
test rax rax
jne r-xdata
sub edx 0x2
je r-xdata
test edi edi
je r-xdata
lea ecx [ r13 + 0x3 ]
call sub_140006b5c
int3
mov rbx [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rdx [ rax + 0xa0 ]
mov rcx rdx
movsxd r8 [ r--data ]
or eax 0xffffffff
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
sub edx 0x2
je r-xdata
cmp ebx 0x8
je r-xdata
xor ecx ecx
call sub_14000a54c
nop
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jae r-xdata
add rcx 0x10
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jb r-xdata
mov edi 0x1
mov [ rsp + 0x60 ] edi
call [ DecodePointer@IAT ]
mov r13 rax
sub edx 0x3
je r-xdata
mov r15 [ rsi + 0xa8 ]
mov [ rsp + 0x28 ] r15
and [ rsi + 0xa8 ] 0x0
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
xor ecx ecx
cmp [ rcx + 0x4 ] ebx
je r-xdata
cmp [ rcx + 0x4 ] ebx
je r-xdata
sub edx 0x4
je r-xdata
mov r14d [ rsp + 0x60 ]
mov r14d [ rsi + 0xb0 ]
mov [ rsi + 0xb0 ] 0x8c
jmp r-xdata
cmp ebx 0x4
je r-xdata
cmp r13 0x1
jne r-xdata
lea r12 [ rcx + 0x8 ]
mov r13 [ r12 ]
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
sub edx 0x6
je r-xdata
call EncodePointer
mov [ r12 ] rax
mov ecx [ r--data ]
mov edx ecx
mov [ rsp + 0x20 ] ecx
cmp ebx 0x8
jne r-xdata
mov r15 [ rsp + 0x28 ]
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
dec edx
je r-xdata
mov edi 0x8
cmp ebx edi
jne r-xdata
xor ecx ecx
call sub_14000a44c
test edi edi
je r-xdata
movsxd rcx edx
add rcx rcx
mov rax [ rsi + 0xa0 ]
and [ rax + rcx * 8 + 0x8 ] 0x0
inc edx
mov [ rsp + 0x20 ] edx
mov ecx [ r--data ]
jmp r-xdata
call sub_14000670c
mov [ rax ] 0x16
call sub_1400066a4
jmp r-xdata
mov ecx ebx
call r13
mov edx [ rsi + 0xb0 ]
mov ecx edi
call r13
jmp r-xdata
mov eax [ r--data ]
add ecx eax
cmp edx ecx
jge r-xdata
mov [ rsi + 0xa8 ] r15
cmp ebx edi
jne r-xdata
cmp ebx 0xb
je r-xdata
cmp ebx edi
je r-xdata
mov [ rsi + 0xb0 ] r14d
jmp r-xdata
cmp ebx 0x4
jne r-xdata
sub_14000a804
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x50
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x48 ] rax
mov ebp r8d
mov r14 rdx
mov r13 rcx
call EncodePointer
xor ebx ebx
cmp [ rw-data ] rbx
mov rdi rax
jne r-xdata
mov rax [ rw-data ]
lea rcx [ r--data ]
call [ LoadLibraryW@IAT ]
mov rsi rax
test rax rax
je r-xdata
mov rcx [ rw-data ]
cmp rcx rdi
je r-xdata
cmp r11 rdi
je r-xdata
xor eax eax
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
mov rcx rax
call [ DecodePointer@IAT ]
mov rcx [ rw-data ]
mov rsi rax
call [ DecodePointer@IAT ]
mov r12 rax
test rsi rsi
je r-xdata
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
mov r11 rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov r9d ebp
mov r8 r14
mov rdx r13
mov rcx rbx
call rax
jmp r-xdata
call rax
mov rbx rax
test rax rax
je r-xdata
test rax rax
je r-xdata
mov rax [ rw-data ]
jmp r-xdata
lea rdx [ r--data ]
mov rcx rsi
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
jmp r-xdata
mov rcx [ rsp + 0x48 ]
xor rcx rsp
call sub_140004460
add rsp 0x50
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov rcx [ rw-data ]
cmp rcx rdi
je r-xdata
call rsi
test rax rax
je r-xdata
cmp rax rdi
je r-xdata
mov r11 [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
bts ebp 0x15
jmp r-xdata
lea rcx [ rsp + 0x30 ]
mov r9d 0xc
lea r8 [ rsp + 0x38 ]
mov [ rsp + 0x20 ] rcx
lea edx [ r9 - 0xb ]
mov rcx rax
call r12
test eax eax
je r-xdata
mov rcx rbx
call rax
mov rbx rax
test [ rsp + 0x40 ] 0x1
jne r-xdata
sub_14000aa0c
push rbx
sub rsp 0x20
xor r10d r10d
mov r9 rcx
test rcx rcx
je r-xdata
call sub_14000670c
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
cmp [ rcx ] r10w
je r-xdata
mov [ rcx ] r10w
test rdx rdx
jne r-xdata
add rcx 0x2
dec rdx
jne r-xdata
sub rcx r8
mov [ r9 ] r10w
jmp r-xdata
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] r10w
call sub_14000670c
mov ebx 0x22
jmp r-xdata
movzx eax [ r8 ]
mov [ rcx + r8 ] ax
add r8 0x2
test ax ax
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_1400066a4
mov eax ebx
sub_14000aa94
push rbx
sub rsp 0x20
xor ebx ebx
mov r10 r8
test r9 r9
jne r-xdata
test rcx rcx
je r-xdata
test rcx rcx
jne r-xdata
call sub_14000670c
mov ebx 0x16
test rdx rdx
je r-xdata
test rdx rdx
jne r-xdata
test r9 r9
jne r-xdata
xor eax eax
jmp r-xdata
test r8 r8
jne r-xdata
mov [ rcx ] bx
jmp r-xdata
add rsp 0x20
pop rbx
retn
mov r11 rcx
mov r8 rdx
cmp r9 0xffffffffffffffff
jne r-xdata
mov [ rcx ] bx
sub r10 rcx
sub r11 r10
test r9 r9
jne r-xdata
dec r8
je r-xdata
test r8 r8
jne r-xdata
dec r8
jne r-xdata
mov [ r11 ] bx
dec r9
jne r-xdata
cmp r9 0xffffffffffffffff
jne r-xdata
movzx eax [ r10 ]
mov [ r11 + r10 ] ax
add r10 0x2
test ax ax
je r-xdata
jmp r-xdata
movzx eax [ r10 + r11 ]
mov [ r11 ] ax
add r11 0x2
test ax ax
je r-xdata
mov [ rcx ] bx
call sub_14000670c
mov ebx 0x22
jmp r-xdata
mov [ rcx + rdx * 2 - 0x2 ] bx
lea eax [ r8 + 0x50 ]
jmp r-xdata
mov [ rax ] ebx
call sub_1400066a4
mov eax ebx
sub_14000ab80
push rbx
sub rsp 0x20
xor r10d r10d
mov r9 rcx
test rcx rcx
je r-xdata
call sub_14000670c
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
sub rcx r8
mov [ rcx ] r10w
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] r10w
call sub_14000670c
mov ebx 0x22
jmp r-xdata
movzx eax [ r8 ]
mov [ rcx + r8 ] ax
add r8 0x2
test ax ax
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_1400066a4
mov eax ebx
sub_14000abec
sub rsp 0x28
test ecx ecx
js r-xdata
call sub_14000670c
mov [ rax ] 0x16
call sub_1400066a4
or eax 0xffffffff
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
jmp r-xdata
cmp ecx 0x3
jne r-xdata
add rsp 0x28
retn
mov eax [ rw-data ]
jmp r-xdata
sub_14000ac2c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x40
mov ebx edx
mov rdx rcx
lea rcx [ rsp + 0x20 ]
mov edi r9d
mov esi r8d
call sub_140004a70
mov rax [ rsp + 0x28 ]
movzx r11d bl
test [ r11 + rax + 0x1d ] dil
jne r-xdata
mov eax 0x1
test esi esi
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
xor eax eax
mov rax [ rsp + 0x20 ]
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax esi
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_14000acbc
sub rsp 0x28
test rcx rcx
jne r-xdata
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
add rsp 0x28
jmp [ HeapSize@IAT ]
call sub_14000670c
mov [ rax ] 0x16
call sub_1400066a4
or rax 0xffffffffffffffff
add rsp 0x28
retn
sub_14000acf8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push rbp
mov rbp rsp
sub rsp 0x50
xor r12d r12d
mov rsi r8
mov rdi rdx
mov rbx rcx
test rdx rdx
je r-xdata
xor eax eax
test r8 r8
je r-xdata
cmp [ rdx ] r12b
jne r-xdata
lea rcx [ rbp - 0x20 ]
mov rdx r9
call sub_140004a70
mov r11 [ rbp - 0x20 ]
cmp [ r11 + 0x14 ] r12d
jne r-xdata
test rcx rcx
je r-xdata
movzx ecx [ rdi ]
lea rdx [ rbp - 0x20 ]
call sub_140009efc
test eax eax
je r-xdata
test rbx rbx
je r-xdata
mov [ rcx ] r12w
mov eax r12d
mov r9d 0x1
test rbx rbx
setne al
lea edx [ r9 + 0x8 ]
mov r8 rdi
mov [ rsp + 0x28 ] eax
mov rax [ rbp - 0x20 ]
mov [ rsp + 0x20 ] rbx
mov ecx [ rax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov rcx [ rbp - 0x20 ]
mov r9d [ rcx + 0x10c ]
cmp r9d 0x1
jle r-xdata
cmp [ rbp - 0x8 ] r12b
je r-xdata
movzx eax [ rdi ]
mov [ rbx ] ax
jmp r-xdata
movsxd rax [ rcx + 0x10c ]
cmp rsi rax
jb r-xdata
cmp esi r9d
jl r-xdata
mov eax 0x1
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
call sub_14000670c
mov [ rax ] 0x2a
cmp [ rbp - 0x8 ] r12b
je r-xdata
cmp [ rdi + 0x1 ] r12b
je r-xdata
mov ecx [ rcx + 0x4 ]
mov eax r12d
test rbx rbx
setne al
mov r8 rdi
mov edx 0x9
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
mov rcx [ rbp - 0x20 ]
test eax eax
jne r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
mov rdi [ rsp + 0x70 ]
mov r12 [ rsp + 0x78 ]
add rsp 0x50
pop rbp
retn
or eax 0xffffffff
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
mov eax [ rcx + 0x10c ]
cmp [ rbp - 0x8 ] r12b
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_14000ae78
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x40
lea rbp [ rsp + 0x30 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp ] rax
mov esi [ rbp + 0x68 ]
xor edi edi
mov r13d r9d
mov r14 r8
mov r15d edx
test esi esi
jne r-xdata
neg [ rbp + 0x70 ]
mov ecx esi
mov [ rsp + 0x28 ] edi
sbb edx edx
mov [ rsp + 0x20 ] rdi
and edx 0x8
inc edx
call [ MultiByteToWideChar@IAT ]
movsxd r12 eax
test eax eax
jne r-xdata
mov rax [ rcx ]
mov esi [ rax + 0x4 ]
jle r-xdata
xor eax eax
jmp r-xdata
mov rbx rdi
mov rax 0x7ffffffffffffff0
cmp r12 rax
ja r-xdata
mov rcx [ rbp ]
xor rcx rbp
call sub_140004460
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r8 r12
xor edx edx
mov rcx rbx
add r8 r8
call sub_140004920
mov r9d r13d
mov r8 r14
mov edx 0x1
mov ecx esi
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea rcx [ r12 + r12 + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov r9 [ rbp + 0x60 ]
mov r8d eax
mov rdx rbx
mov ecx r15d
call [ GetStringTypeW@IAT ]
mov edi eax
call sub_1400054ac
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax edi
call sub_140005564
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_140004a20
sub rsp rax
lea rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
jmp r-xdata
sub_14000afd8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x60
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x40 ]
mov ebx r9d
mov rdi r8
call sub_140004a70
mov r11d [ rsp + 0xa8 ]
mov eax [ rsp + 0x98 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x30 ] r11d
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x90 ]
mov r9d ebx
mov r8 rdi
mov edx esi
mov [ rsp + 0x20 ] rax
call sub_14000ae78
cmp [ rsp + 0x58 ] 0x0
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x60
pop rdi
retn
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_14000b058
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x8 ]
call sub_140005564
mov rcx [ rbx + 0x10 ]
call sub_140005564
mov rcx [ rbx + 0x18 ]
call sub_140005564
mov rcx [ rbx + 0x20 ]
call sub_140005564
mov rcx [ rbx + 0x28 ]
call sub_140005564
mov rcx [ rbx + 0x30 ]
call sub_140005564
mov rcx [ rbx ]
call sub_140005564
mov rcx [ rbx + 0x40 ]
call sub_140005564
mov rcx [ rbx + 0x48 ]
call sub_140005564
mov rcx [ rbx + 0x50 ]
call sub_140005564
mov rcx [ rbx + 0x58 ]
call sub_140005564
mov rcx [ rbx + 0x60 ]
call sub_140005564
mov rcx [ rbx + 0x68 ]
call sub_140005564
mov rcx [ rbx + 0x38 ]
call sub_140005564
mov rcx [ rbx + 0x70 ]
call sub_140005564
mov rcx [ rbx + 0x78 ]
call sub_140005564
mov rcx [ rbx + 0x80 ]
call sub_140005564
mov rcx [ rbx + 0x88 ]
call sub_140005564
mov rcx [ rbx + 0x90 ]
call sub_140005564
mov rcx [ rbx + 0x98 ]
call sub_140005564
mov rcx [ rbx + 0xa0 ]
call sub_140005564
mov rcx [ rbx + 0xa8 ]
call sub_140005564
mov rcx [ rbx + 0xb0 ]
call sub_140005564
mov rcx [ rbx + 0xb8 ]
call sub_140005564
mov rcx [ rbx + 0xc0 ]
call sub_140005564
mov rcx [ rbx + 0xc8 ]
call sub_140005564
mov rcx [ rbx + 0xd0 ]
call sub_140005564
mov rcx [ rbx + 0xd8 ]
call sub_140005564
mov rcx [ rbx + 0xe0 ]
call sub_140005564
mov rcx [ rbx + 0xe8 ]
call sub_140005564
mov rcx [ rbx + 0xf0 ]
call sub_140005564
mov rcx [ rbx + 0xf8 ]
call sub_140005564
mov rcx [ rbx + 0x100 ]
call sub_140005564
mov rcx [ rbx + 0x108 ]
call sub_140005564
mov rcx [ rbx + 0x110 ]
call sub_140005564
mov rcx [ rbx + 0x118 ]
call sub_140005564
mov rcx [ rbx + 0x120 ]
call sub_140005564
mov rcx [ rbx + 0x128 ]
call sub_140005564
mov rcx [ rbx + 0x130 ]
call sub_140005564
mov rcx [ rbx + 0x138 ]
call sub_140005564
mov rcx [ rbx + 0x140 ]
call sub_140005564
mov rcx [ rbx + 0x148 ]
call sub_140005564
mov rcx [ rbx + 0x150 ]
call sub_140005564
mov rcx [ rbx + 0x170 ]
call sub_140005564
mov rcx [ rbx + 0x178 ]
call sub_140005564
mov rcx [ rbx + 0x180 ]
call sub_140005564
mov rcx [ rbx + 0x188 ]
call sub_140005564
mov rcx [ rbx + 0x190 ]
call sub_140005564
mov rcx [ rbx + 0x198 ]
call sub_140005564
mov rcx [ rbx + 0x168 ]
call sub_140005564
mov rcx [ rbx + 0x1a8 ]
call sub_140005564
mov rcx [ rbx + 0x1b0 ]
call sub_140005564
mov rcx [ rbx + 0x1b8 ]
call sub_140005564
mov rcx [ rbx + 0x1c0 ]
call sub_140005564
mov rcx [ rbx + 0x1c8 ]
call sub_140005564
mov rcx [ rbx + 0x1d0 ]
call sub_140005564
mov rcx [ rbx + 0x1a0 ]
call sub_140005564
mov rcx [ rbx + 0x1d8 ]
call sub_140005564
mov rcx [ rbx + 0x1e0 ]
call sub_140005564
mov rcx [ rbx + 0x1e8 ]
call sub_140005564
mov rcx [ rbx + 0x1f0 ]
call sub_140005564
mov rcx [ rbx + 0x1f8 ]
call sub_140005564
mov rcx [ rbx + 0x200 ]
call sub_140005564
mov rcx [ rbx + 0x208 ]
call sub_140005564
mov rcx [ rbx + 0x210 ]
call sub_140005564
mov rcx [ rbx + 0x218 ]
call sub_140005564
mov rcx [ rbx + 0x220 ]
call sub_140005564
mov rcx [ rbx + 0x228 ]
call sub_140005564
mov rcx [ rbx + 0x230 ]
call sub_140005564
mov rcx [ rbx + 0x238 ]
call sub_140005564
mov rcx [ rbx + 0x240 ]
call sub_140005564
mov rcx [ rbx + 0x248 ]
call sub_140005564
mov rcx [ rbx + 0x250 ]
call sub_140005564
mov rcx [ rbx + 0x258 ]
call sub_140005564
mov rcx [ rbx + 0x260 ]
call sub_140005564
mov rcx [ rbx + 0x268 ]
call sub_140005564
mov rcx [ rbx + 0x270 ]
call sub_140005564
mov rcx [ rbx + 0x278 ]
call sub_140005564
mov rcx [ rbx + 0x280 ]
call sub_140005564
mov rcx [ rbx + 0x288 ]
call sub_140005564
mov rcx [ rbx + 0x290 ]
call sub_140005564
mov rcx [ rbx + 0x298 ]
call sub_140005564
mov rcx [ rbx + 0x2a0 ]
call sub_140005564
mov rcx [ rbx + 0x2a8 ]
call sub_140005564
mov rcx [ rbx + 0x2b0 ]
call sub_140005564
mov rcx [ rbx + 0x2b8 ]
call sub_140005564
add rsp 0x20
pop rbx
sub_14000b448
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x8 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140005564
mov rcx [ rbx + 0x10 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140005564
mov rcx [ rbx + 0x58 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140005564
mov rcx [ rbx + 0x60 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140005564
add rsp 0x20
pop rbx
call sub_140005564
sub_14000b4b4
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x18 ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x20 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140005564
mov rcx [ rbx + 0x28 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140005564
mov rcx [ rbx + 0x30 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140005564
mov rcx [ rbx + 0x38 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140005564
mov rcx [ rbx + 0x40 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140005564
mov rcx [ rbx + 0x48 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140005564
mov rcx [ rbx + 0x68 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140005564
mov rcx [ rbx + 0x70 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140005564
mov rcx [ rbx + 0x78 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140005564
mov rcx [ rbx + 0x80 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140005564
mov rcx [ rbx + 0x88 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140005564
mov rcx [ rbx + 0x90 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140005564
add rsp 0x20
pop rbx
call sub_140005564
sub_14000b5d0
sub rsp 0x28
mov [ rsp + 0x30 ] rcx
mov [ rsp + 0x38 ] rdx
mov [ rsp + 0x40 ] r8d
mov rdx [ rdx ]
mov rax rcx
call sub_140008b00
call rax
call sub_140008b30
mov rcx rax
mov rdx [ rsp + 0x38 ]
mov rdx [ rdx ]
mov r8d 0x2
call sub_140008b00
add rsp 0x28
retn
sub_14000b618
sub rsp 0x28
call sub_14000a5b0
test rax rax
je r-xdata
test [ rw-data ] 0x2
je r-xdata
mov ecx 0x16
call sub_14000a5c0
mov ecx 0x3
call sub_140006b5c
int3
mov r8d 0x1
mov edx 0x40000015
lea ecx [ r8 + 0x2 ]
call sub_1400064b4
sub_14000b658
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rdi
sub rsp 0x20
test ecx ecx
js r-xdata
call sub_14000670c
mov [ rax ] 0x9
call sub_14000672c
and [ rax ] 0x0
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
movsxd rbx ecx
lea rbp [ rw-data ]
mov rdi rbx
and ebx 0x1f
sar rdi 0x5
imul rbx rbx 0x58
mov rax [ rbp + rdi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
cmp [ rax + rbx ] 0xffffffffffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov rax [ rbp + rdi * 8 ]
or [ rbx + rax ] 0xffffffffffffffff
xor eax eax
jmp r-xdata
test ecx ecx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov ecx 0xfffffff6
dec ecx
je r-xdata
mov ecx 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
xor edx edx
call [ SetStdHandle@IAT ]
mov ecx 0xfffffff4
jmp r-xdata
sub_14000b704
sub rsp 0x28
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_14000672c
and [ rax ] 0x0
call sub_14000670c
mov [ rax ] 0x9
jmp r-xdata
call sub_14000672c
and [ rax ] 0x0
call sub_14000670c
mov [ rax ] 0x9
call sub_1400066a4
cmp ecx [ rw-data ]
jae r-xdata
or rax 0xffffffffffffffff
movsxd rdx ecx
lea rcx [ rw-data ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rax [ rcx + rax * 8 ]
test [ rax + rdx + 0x8 ] 0x1
je r-xdata
mov rax [ rax + rdx ]
jmp r-xdata
add rsp 0x28
retn
sub_14000b778
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r14
sub rsp 0x20
movsxd rbx ecx
mov r12 rbx
sar r12 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rsi [ r14 + r12 * 8 ]
mov edi 0x1
cmp [ rbx + rsi + 0xc ] 0x0
jne r-xdata
test edi edi
je r-xdata
lea ecx [ rdi + 0x9 ]
call sub_14000a54c
nop
cmp [ rbx + rsi + 0xc ] 0x0
jne r-xdata
mov eax edi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
mov r12 [ rsp + 0x48 ]
add rsp 0x20
pop r14
retn
mov rcx [ r14 + r12 * 8 ]
lea rcx [ rcx + rbx + 0x10 ]
call [ EnterCriticalSection@IAT ]
mov ecx 0xa
call sub_14000a44c
lea rcx [ rbx + rsi + 0x10 ]
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
neg eax
sbb edx edx
and edi edx
inc [ rbx + rsi + 0xc ]
sub_14000b848
mov [ rsp + 0x8 ] cx
sub rsp 0x38
mov rcx [ rw-data ]
cmp rcx 0xfffffffffffffffe
jne r-xdata
cmp rcx 0xffffffffffffffff
jne r-xdata
call sub_14000bd58
mov rcx [ rw-data ]
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x48 ]
lea rdx [ rsp + 0x40 ]
mov r8d 0x1
call [ WriteConsoleW@IAT ]
test eax eax
je r-xdata
mov eax 0xffff
jmp r-xdata
movzx eax [ rsp + 0x40 ]
add rsp 0x38
retn
sub_14000b8a4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
xor edi edi
lea ecx [ rdi + 0x1 ]
call sub_14000a54c
nop
lea ebx [ rdi + 0x3 ]
mov ecx 0x1
call sub_14000a44c
mov eax edi
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
movsxd rsi ebx
mov rax [ rw-data ]
cmp [ rax + rsi * 8 ] 0x0
je r-xdata
inc ebx
jmp r-xdata
mov rcx [ rax + rsi * 8 ]
test [ rcx + 0x18 ] 0x83
je r-xdata
mov [ rsp + 0x20 ] ebx
cmp ebx [ rw-data ]
jge r-xdata
cmp ebx 0x14
jl r-xdata
call sub_14000be34
cmp eax 0xffffffff
je r-xdata
mov rax [ rw-data ]
mov rcx [ rax + rsi * 8 ]
add rcx 0x30
call [ DeleteCriticalSection@IAT ]
mov rcx [ rw-data ]
mov rcx [ rcx + rsi * 8 ]
call sub_140005564
mov r11 [ rw-data ]
and [ r11 + rsi * 8 ] 0x0
inc edi
mov [ rsp + 0x24 ] edi
sub_14000b950
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov eax [ rcx + 0x18 ]
xor esi esi
mov rbx rcx
and al 0x3
cmp al 0x2
jne r-xdata
mov rcx [ rbx + 0x10 ]
and [ rbx + 0x8 ] 0x0
mov eax esi
mov rsi [ rsp + 0x38 ]
mov [ rbx ] rcx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test [ rcx + 0x18 ] 0x108
je r-xdata
mov edi [ rcx ]
sub edi [ rcx + 0x10 ]
test edi edi
jle r-xdata
call sub_140009ed4
mov rdx [ rbx + 0x10 ]
mov r8d edi
mov ecx eax
call sub_140009b2c
cmp eax edi
jne r-xdata
or [ rbx + 0x18 ] 0x20
or esi 0xffffffff
mov eax [ rbx + 0x18 ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ rbx + 0x18 ] eax
jmp r-xdata
sub_14000b9cc
push rbx
sub rsp 0x20
mov rbx rcx
test rcx rcx
jne r-xdata
call sub_14000b950
test eax eax
je r-xdata
add rsp 0x20
pop rbx
jmp sub_14000ba18
test [ rbx + 0x18 ] 0x4000
je r-xdata
or eax 0xffffffff
jmp r-xdata
xor eax eax
mov rcx rbx
call sub_140009ed4
mov ecx eax
call sub_14000be9c
neg eax
sbb eax eax
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_14000ba18
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r15
sub rsp 0x30
mov r13d ecx
xor esi esi
xor edi edi
lea ecx [ rsi + 0x1 ]
call sub_14000a54c
nop
xor ebx ebx
or r15d 0xffffffff
mov ecx 0x1
call sub_14000a44c
cmp r13d 0x1
cmove edi esi
mov eax edi
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x30
pop r15
pop r13
pop r12
retn
movsxd r12 ebx
mov rax [ rw-data ]
cmp [ rax + r12 * 8 ] 0x0
je r-xdata
inc ebx
jmp r-xdata
mov rdx [ rax + r12 * 8 ]
test [ rdx + 0x18 ] 0x83
je r-xdata
mov [ rsp + 0x20 ] ebx
cmp ebx [ rw-data ]
jge r-xdata
mov ecx ebx
call sub_140009e34
nop
mov rax [ rw-data ]
mov rcx [ rax + r12 * 8 ]
test [ rcx + 0x18 ] 0x83
je r-xdata
mov rdx [ rw-data ]
mov rdx [ rdx + r12 * 8 ]
mov ecx ebx
call sub_140009eb4
cmp r13d 0x1
jne r-xdata
test r13d r13d
jne r-xdata
call sub_14000b9cc
cmp eax r15d
je r-xdata
test [ rcx + 0x18 ] 0x2
je r-xdata
inc esi
mov [ rsp + 0x24 ] esi
jmp r-xdata
call sub_14000b9cc
cmp eax r15d
cmove edi r15d
mov [ rsp + 0x28 ] edi
sub_14000bb1c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx r8
mov rdi rdx
test rcx rcx
je r-xdata
imul rdi rcx
mov eax 0x1
test rdi rdi
cmove rdi rax
xor edx edx
lea rax [ rdx - 0x20 ]
div rcx
cmp rax rdi
jae r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
lea edx [ rax + 0x8 ]
mov r8 rdi
call [ HeapAlloc@IAT ]
test rax rax
jne r-xdata
call sub_14000670c
mov [ rax ] 0xc
test rbx rbx
je r-xdata
mov rcx rdi
call sub_140007ec4
test eax eax
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rbx ] 0xc
xor eax eax
cmp rdi 0xffffffffffffffe0
ja r-xdata
test rbx rbx
je r-xdata
xor eax eax
jmp r-xdata
mov [ rbx ] 0xc
jmp r-xdata
sub_14000bbb8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
test rcx rcx
jne r-xdata
test rdx rdx
jne r-xdata
mov rcx rdx
call sub_1400054ac
jmp r-xdata
cmp rdx 0xffffffffffffffe0
ja r-xdata
call sub_140005564
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call sub_140007ec4
call sub_14000670c
mov [ rax ] 0xc
mov rcx [ rw-data ]
mov eax 0x1
test rbx rbx
cmove rbx rax
mov r8 rdi
xor edx edx
mov r9 rbx
call [ HeapReAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
xor eax eax
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
call sub_14000670c
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_1400066c4
mov [ rbx ] eax
mov rcx rbx
call sub_140007ec4
test eax eax
je r-xdata
call sub_14000670c
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_1400066c4
mov [ rbx ] eax
jmp r-xdata
cmp rbx 0xffffffffffffffe0
jbe r-xdata
sub_14000bca0
test r8 r8
je r-xdata
xor rax rax
retn
sub rdx rcx
mov r9 rdx
mov r11 0x8101010101010100
test cl 0x7
je r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
mov al [ rcx ]
mov dl [ rcx + r9 ]
inc rcx
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
dec r8
je r-xdata
add rcx 0x8
sub r8 0x8
mov r10 0x7efefefefefefeff
jbe r-xdata
test al al
je r-xdata
xor rax 0xffffffffffffffff
add r10 rdx
xor rax r10
test r11 rax
je r-xdata
test rcx 0x7
jne r-xdata
jmp r-xdata
test dl dl
je r-xdata
xor rax rax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_14000bdb8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
or edi 0xffffffff
mov rbx rcx
test rcx rcx
jne r-xdata
test [ rcx + 0x18 ] 0x83
je r-xdata
call sub_14000670c
mov [ rax ] 0x16
call sub_1400066a4
or eax edi
jmp r-xdata
and [ rbx + 0x18 ] 0x0
mov eax edi
call sub_14000b950
mov rcx rbx
mov edi eax
call sub_14000c0f4
mov rcx rbx
call sub_140009ed4
mov ecx eax
call sub_14000c030
test eax eax
jns r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx + 0x28 ]
test rcx rcx
je r-xdata
or edi 0xffffffff
jmp r-xdata
call sub_140005564
and [ rbx + 0x28 ] 0x0
sub_14000be34
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x20
mov rbx rcx
or edi 0xffffffff
xor eax eax
test rcx rcx
setne al
test eax eax
jne r-xdata
test [ rcx + 0x18 ] 0x40
je r-xdata
call sub_14000670c
mov [ rax ] 0x16
call sub_1400066a4
call sub_140009dd0
nop
mov rcx rbx
call sub_14000bdb8
mov edi eax
mov rcx rbx
call sub_140009e68
jmp r-xdata
and [ rcx + 0x18 ] 0x0
jmp r-xdata
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov eax edi
jmp r-xdata
sub_14000be9c
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
sub rsp 0x20
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_14000670c
mov [ rax ] 0x9
jmp r-xdata
call sub_14000670c
mov [ rax ] 0x9
call sub_1400066a4
cmp edi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rbx rdi
mov rsi rdi
sar rsi 0x5
lea r12 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r12 + rsi * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_14000b778
nop
mov rax [ r12 + rsi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_14000670c
mov [ rax ] 0x9
or ebx 0xffffffff
mov ecx edi
call sub_14000b704
mov rcx rax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
xor ebx ebx
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_14000b820
mov eax ebx
jmp r-xdata
call sub_14000672c
mov [ rax ] ebx
test ebx ebx
je r-xdata
sub_14000bf74
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rdi ecx
mov ecx edi
call sub_14000b704
cmp rax 0xffffffffffffffff
je r-xdata
xor ebx ebx
mov rax [ rw-data ]
mov ecx 0x2
cmp edi 0x1
jne r-xdata
xor eax eax
mov ecx ebx
call sub_14000674c
or eax 0xffffffff
jmp r-xdata
cmp edi ecx
jne r-xdata
test [ rax + 0xb8 ] dil
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx edi
call sub_14000b704
mov rcx rax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ rax + 0x60 ] 0x1
je r-xdata
call sub_14000b704
mov ecx 0x1
mov rbx rax
call sub_14000b704
cmp rax rbx
je r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_14000b658
mov r11 rdi
mov rcx rdi
sar rcx 0x5
and r11d 0x1f
lea rdx [ rw-data ]
mov rcx [ rdx + rcx * 8 ]
imul r11 r11 0x58
mov [ rcx + r11 + 0x8 ] 0x0
test ebx ebx
je r-xdata
sub_14000c030
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
sub rsp 0x20
movsxd rbx ecx
cmp ebx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_14000672c
and [ rax ] 0x0
call sub_14000670c
mov [ rax ] 0x9
jmp r-xdata
call sub_14000672c
and [ rax ] 0x0
call sub_14000670c
mov [ rax ] 0x9
call sub_1400066a4
cmp ebx [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rdi rbx
mov rsi rbx
sar rsi 0x5
lea r12 [ rw-data ]
and edi 0x1f
imul rdi rdi 0x58
mov rax [ r12 + rsi * 8 ]
movsx ecx [ rax + rdi + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx ebx
call sub_14000b778
nop
mov rax [ r12 + rsi * 8 ]
test [ rax + rdi + 0x8 ] 0x1
je r-xdata
call sub_14000670c
mov [ rax ] 0x9
or edi 0xffffffff
mov ecx ebx
call sub_14000bf74
mov edi eax
jmp r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
mov ecx ebx
call sub_14000b820
mov eax edi
jmp r-xdata
sub_14000c0f4
push rbx
sub rsp 0x20
test [ rcx + 0x18 ] 0x83
mov rbx rcx
je r-xdata
add rsp 0x20
pop rbx
retn
test [ rcx + 0x18 ] 0x8
je r-xdata
mov rcx [ rcx + 0x10 ]
call sub_140005564
and [ rbx + 0x18 ] 0xfffffbf7
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x8 ] eax
j_sub_140004864
jmp sub_140004864
sub_140001730
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_140005284
sub_140001880
mov rdx rcx
lea rcx [ rw-data ]
mov r8d 0x12b
jmp sub_140004e2c
sub_140001a70
push rbx
sub rsp 0x20
mov rbx rcx
call sub_1400052d0
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_140001cf0
mov r9d r8d
mov r8 rdx
mov edx 0xf
jmp sub_140001bd0
sub_140001d00
lea rax [ r--data ]
mov [ rcx + 0x68 ] 0x9
mov [ rcx + 0x6c ] 0x5
mov [ rcx + 0x58 ] rax
lea rax [ r--data ]
mov [ rcx + 0x60 ] rax
retn
sub_140003470
imul edx r8d
mov ecx edx
jmp sub_1400054ac
sub_140003480
mov rcx rdx
jmp sub_140005564
sub_140004440
test rdx rdx
jne r-xdata
jmp sub_140004120
xor eax eax
retn
sub_140004460
cmp rcx [ rw-data ]
jne r-xdata
jmp sub_140005628
rol rcx 0x10
test cx 0xffff
jne r-xdata
ror rcx 0x10
retn
_start
sub rsp 0x28
call sub_140007ca0
add rsp 0x28
jmp sub_1400046b4
sub_140004e2c
xor r9d r9d
jmp sub_140004d14
j_sub_140005564
jmp sub_140005564
sub_14000518c
lea rax [ r--data ]
mov [ rcx ] rax
mov rax [ rdx ]
mov [ rcx + 0x10 ] 0x0
mov [ rcx + 0x8 ] rax
mov rax rcx
retn
sub_1400051a8
cmp [ rcx + 0x8 ] 0x0
lea rax [ r--data ]
cmovne rax [ rcx + 0x8 ]
retn
sub_140005218
push rbx
sub rsp 0x20
cmp [ rcx + 0x10 ] 0x0
mov rbx rcx
je r-xdata
and [ rbx + 0x8 ] 0x0
mov [ rbx + 0x10 ] 0x0
add rsp 0x20
pop rbx
retn
mov rcx [ rcx + 0x8 ]
call sub_140005564
sub_140005284
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_140005218
sub_1400052d0
push rbx
sub rsp 0x20
and [ rcx + 0x8 ] 0x0
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
mov [ rcx + 0x10 ] 0x0
call sub_140005240
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_140005608
sub rsp 0x28
mov r8 [ r9 + 0x38 ]
mov rcx rdx
mov rdx r9
call sub_1400055a4
mov eax 0x1
add rsp 0x28
retn
sub_1400064ac
mov [ rw-data ] rcx
retn
sub_1400067d8
sub rsp 0x28
lea rcx [ sub_140006794 ]
call [ SetUnhandledExceptionFilter@IAT ]
xor eax eax
add rsp 0x28
retn
sub_14000682c
push rbx
sub rsp 0x20
mov ebx ecx
call sub_1400067f0
mov ecx ebx
call [ ExitProcess@IAT ]
sub_140006844
mov ecx 0x8
jmp sub_14000a54c
sub_140006850
mov ecx 0x8
jmp sub_14000a44c
sub_140006b50
xor r8d r8d
xor edx edx
jmp sub_1400069c0
sub_140006b5c
xor r8d r8d
lea edx [ r8 + 0x1 ]
jmp sub_1400069c0
sub_140006b68
xor edx edx
xor ecx ecx
lea r8d [ rdx + 0x1 ]
jmp sub_1400069c0
sub_140006b78
mov edx 0x1
xor ecx ecx
mov r8d edx
jmp sub_1400069c0
sub_140006b88
push rbx
sub rsp 0x20
mov ebx ecx
call sub_140006e3c
mov ecx ebx
call sub_140006bdc
xor r8d r8d
mov ecx 0xff
lea edx [ r8 + 0x1 ]
call sub_1400069c0
int3
EncodePointer
xor ecx ecx
jmp [ EncodePointer@IAT ]
sub_140007908
sub rsp 0x28
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
add rsp 0x28
jmp sub_14000a3c4
call [ FlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_140007ea4
sub rsp 0x28
call sub_140007d98
neg rax
sbb eax eax
neg eax
dec eax
add rsp 0x28
retn
sub_140007ebc
mov [ rw-data ] rcx
retn
sub_140008718
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
add rsp 0x28
retn
mov ecx 0xfffffffd
call sub_140008538
mov [ rw-data ] 0x1
sub_140008ad0
sub rsp 0x4d8
xor r8 r8
xor r9 r9
mov [ rsp + 0x20 ] rsp
mov [ rsp + 0x28 ] r8
call RtlUnwindEx
add rsp 0x4d8
retn
sub_140008b20
retn
sub_140008b30
retn
sub_1400091b8
sbb rax rax
sbb rax 0xffffffffffffffff
retn
sub_1400091f7
call sub_140009204
sub_140009204
sub rsp 0x28
call sub_140007a6c
mov rcx [ rax + 0xd0 ]
test rcx rcx
je r-xdata
call sub_14000b618
call rcx
jmp r-xdata
sub_140009222
add rsp 0x28
retn
sub_140009228
sub rsp 0x28
lea rcx [ sub_140009204 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
add rsp 0x28
retn
sub_140009248
and [ rw-data ] 0x0
retn
sub_140009cc0
lea rax [ rw-data ]
retn
sub_140009da8
sub rsp 0x28
call sub_14000bb04
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
add rsp 0x28
jmp sub_140005564
call sub_14000b8a4
sub_140009eb4
cmp ecx 0x14
jge r-xdata
lea rcx [ rdx + 0x30 ]
jmp [ LeaveCriticalSection@IAT ]
btr [ rdx + 0x18 ] 0xf
add ecx 0x10
jmp sub_14000a44c
sub_140009ed4
sub rsp 0x28
test rcx rcx
jne r-xdata
mov eax [ rcx + 0x1c ]
call sub_14000670c
mov [ rax ] 0x16
call sub_1400066a4
or eax 0xffffffff
jmp r-xdata
add rsp 0x28
retn
sub_14000a150
mov rcx [ rw-data ]
xor eax eax
or rcx 0x1
cmp [ rw-data ] rcx
sete al
retn
sub_14000a32c
sub rsp 0x38
and [ rsp + 0x20 ] 0x0
call sub_14000a168
add rsp 0x38
retn
sub_14000a44c
movsxd rcx ecx
lea rax [ rw-data ]
add rcx rcx
mov rcx [ rax + rcx * 8 ]
jmp [ LeaveCriticalSection@IAT ]
sub_14000a590
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
retn
sub_14000a5b0
mov rcx [ rw-data ]
jmp [ DecodePointer@IAT ]
sub_14000a7f4
mov [ rw-data ] rcx
retn
sub_14000a7fc
mov [ rw-data ] rcx
retn
sub_14000ab64
mov rax rcx
movzx edx [ rax ]
add rax 0x2
test dx dx
jne r-xdata
sub rax rcx
sar rax 0x1
dec rax
retn
sub_14000aca8
mov edx ecx
mov r9d 0x4
xor r8d r8d
xor ecx ecx
jmp sub_14000ac2c
sub_14000ae70
xor r9d r9d
jmp sub_14000acf8
sub_14000b610
mov rax [ rsp ]
mov [ rcx ] rax
retn
sub_14000b820
movsxd rdx ecx
lea rcx [ rw-data ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rax [ rcx + rax * 8 ]
lea rcx [ rax + rdx + 0x10 ]
jmp [ LeaveCriticalSection@IAT ]
sub_14000bb04
mov ecx 0x1
jmp sub_14000ba18
sub_14000bb10
mov ecx 0x2
jmp sub_140006b88
sub_14000bd58
sub rsp 0x48
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
mov r8d 0x3
lea rcx [ r--data ]
xor r9d r9d
mov edx 0x40000000
mov [ rsp + 0x20 ] r8d
call [ CreateFileW@IAT ]
mov [ rw-data ] rax
add rsp 0x48
retn
sub_14000bd94
sub rsp 0x28
mov rcx [ rw-data ]
cmp rcx 0xffffffffffffffff
je r-xdata
add rsp 0x28
retn
cmp rcx 0xfffffffffffffffe
je r-xdata
call [ CloseHandle@IAT ]
RtlUnwindEx
jmp [ RtlUnwindEx@IAT ]
RtlPcToFileHeader
jmp [ RtlPcToFileHeader@IAT ]
RtlLookupFunctionEntry
jmp [ RtlLookupFunctionEntry@IAT ]
RtlVirtualUnwind
jmp [ RtlVirtualUnwind@IAT ]
sub_14000c150
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
mov rdx rcx
mov ecx [ rax ]
call sub_140006e80
nop
add rsp 0x20
pop rbp
retn
sub_14000c16e
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x80 ] 0x0
je r-xdata
add rsp 0x20
pop rbp
retn
mov ecx 0x8
call sub_14000a44c
nop
sub_14000c192
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_14000a44c
nop
add rsp 0x20
pop rbp
retn
sub_14000c1b2
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_14000a44c
nop
add rsp 0x20
pop rbp
retn
sub_14000c1cd
push rbp
sub rsp 0x20
mov rbp rdx
call sub_140006850
nop
add rsp 0x20
pop rbp
retn
sub_14000c1e3
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_14000a44c
nop
add rsp 0x20
pop rbp
retn
sub_14000c1fe
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_14000a44c
nop
add rsp 0x20
pop rbp
retn
sub_14000c220
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
xor ecx ecx
cmp [ rax ] 0xc0000005
sete cl
mov eax ecx
mov eax ecx
add rsp 0x20
pop rbp
retn
sub_14000c242
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xe
call sub_14000a44c
nop
add rsp 0x20
pop rbp
retn
sub_14000c25d
push rbp
sub rsp 0x20
mov rbp rdx
xor eax eax
cmp [ rbp + 0x38 ] al
setne al
add rsp 0x20
pop rbp
retn
sub_14000c275
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx [ rbp + 0x50 ]
call sub_14000b820
nop
add rsp 0x20
pop rbp
retn
sub_14000c28e
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
nop
add rsp 0x20
pop rbp
retn
sub_14000c2ac
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x60 ] 0x0
je r-xdata
add rsp 0x20
pop rbp
retn
xor ecx ecx
call sub_14000a44c
nop
sub_14000c2ca
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xa
call sub_14000a44c
nop
add rsp 0x20
pop rbp
retn
sub_14000c2e5
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_14000a44c
nop
add rsp 0x20
pop rbp
retn
sub_14000c300
push rbp
sub rsp 0x20
mov rbp rdx
movsxd rcx [ rbp + 0x20 ]
mov rax rcx
mov rdx [ rw-data ]
mov rdx [ rdx + rcx * 8 ]
call sub_140009eb4
nop
add rsp 0x20
pop rbp
retn
sub_14000c330
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_14000a44c
nop
add rsp 0x20
pop rbp
retn
sub_14000c34b
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x30 ]
call sub_140009e68
nop
add rsp 0x20
pop rbp
retn
sub_14000c365
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx [ rbp + 0x40 ]
call sub_14000b820
nop
add rsp 0x20
pop rbp
retn
sub_14000c380
lea rax [ r--data ]
lea rcx [ rw-data ]
mov [ rw-data ] rax
jmp sub_140005284
