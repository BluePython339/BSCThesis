sub_10001000
push ebp
mov ebp esp
sub esp 0x8
push esi
mov esi [ ebp + 0x10 ]
push esi
mov [ ebp - 0x8 ] ecx
mov ecx [ ecx + 0x4 ]
lea edx [ ebp - 0x4 ]
push edx
mov edx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0x0
mov eax [ ecx ]
mov eax [ eax + 0xc ]
push edx
call eax
test eax eax
jne r-xdata
mov ecx [ esi ]
mov edx [ ebp - 0x4 ]
push ebx
push edi
xor eax eax
mov [ ebp + 0x10 ] ecx
mov [ ebp + 0x8 ] edx
call sub_10006990
mov edi eax
mov eax 0x1
call sub_10006990
push edi
mov ebx eax
call [ GetModuleHandleA@IAT ]
test eax eax
jne r-xdata
pop esi
mov esp ebp
pop ebp
retn 0xc
push ebx
push eax
call [ GetProcAddress@IAT ]
test eax eax
jne r-xdata
xor ebx ebx
jmp r-xdata
mov ecx [ ebp + 0x10 ]
mov edx [ ebp + 0x8 ]
push ecx
push edx
push 0x0
call eax
mov ebx eax
xor ebx ebx
jmp r-xdata
mov eax [ esi ]
add eax 0x4
push eax
call sub_10009900
mov edi [ ebp + 0xc ]
mov [ edi ] eax
xor eax eax
add esp 0x4
cmp [ esi ] eax
jbe r-xdata
mov eax [ ebp - 0x4 ]
push eax
call sub_100098f5
mov ecx [ edi ]
add esp 0x4
pop edi
mov [ ecx ] ebx
add [ esi ] 0x4
pop ebx
mov eax 0x1
pop esi
mov esp ebp
pop ebp
retn 0xc
lea ebx [ ebx ]
mov edx [ ebp - 0x8 ]
mov ecx eax
and ecx 0x3
mov cl [ ecx + edx + 0x8 ]
mov edx [ ebp - 0x4 ]
xor cl [ eax + edx ]
mov edx [ edi ]
mov [ edx + eax + 0x4 ] cl
inc eax
cmp eax [ esi ]
jb r-xdata
sub_100010e0
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ ebp + 0xc ]
mov ebx ecx
mov [ ebp - 0x4 ] ebx
cmp esi 0x4
jae r-xdata
push edi
add esi 0xfffffffc
push esi
call sub_10009900
mov edi eax
add esp 0x4
xor eax eax
test esi esi
je r-xdata
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn 0x8
xor eax eax
call sub_10006990
mov ebx eax
mov eax 0x1
call sub_10006990
push ebx
mov [ ebp + 0xc ] eax
call [ GetModuleHandleA@IAT ]
test eax eax
je r-xdata
mov ecx eax
and ecx 0x3
mov dl [ ecx + ebx + 0x8 ]
mov ecx [ ebp + 0x8 ]
xor dl [ ecx + eax + 0x4 ]
inc eax
mov [ eax + edi - 0x1 ] dl
cmp eax esi
jb r-xdata
mov ecx [ ebp + 0x8 ]
cmp eax [ ecx ]
je r-xdata
mov edx [ ebp + 0xc ]
push edx
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
mov edx [ ebp - 0x4 ]
mov ecx [ edx + 0x4 ]
mov eax [ ecx ]
mov edx [ eax + 0x4 ]
push esi
push edi
call edx
push edi
mov esi eax
call sub_100098f5
add esp 0x4
pop edi
mov eax esi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
push edi
call sub_100098f5
add esp 0x4
pop edi
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn 0x8
push esi
push edi
push 0x0
call eax
sub_100011b0
push ebp
mov ebp esp
push 0xffffffff
push sub_10013968
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
test [ ebp + 0x8 ] 0x1
mov [ ebp - 0x4 ] 0xffffffff
mov [ esi ] r--data
je r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_100098f5
add esp 0x4
sub_10001260
push ebp
mov ebp esp
push 0xffffffff
push sub_10013f2e
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x50
call sub_10009900
add esp 0x4
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov [ ebp - 0x4 ] 0x1
lea ebx [ eax + 0x4 ]
mov [ eax ] r--data
mov eax [ ebp + 0x8 ]
push eax
push ebx
call sub_10002600
lea ecx [ ebx + 0x40 ]
mov [ ebp - 0x4 ] 0x2
call sub_10003a20
lea esi [ ebx + 0x24 ]
xor edi edi
mov eax r--data
call sub_10001f40
mov eax [ ebp - 0x10 ]
mov [ ebx + 0x20 ] 0x1
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_10001310
push ebp
mov ebp esp
push 0xffffffff
push sub_10013f2e
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x50
call sub_10009900
add esp 0x4
mov [ ebp - 0x10 ] eax
xor esi esi
mov [ ebp - 0x4 ] esi
cmp eax esi
je r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
push esi
mov [ ebp - 0x4 ] 0xffffffff
call sub_100018a0
test eax eax
jne r-xdata
lea ebx [ eax + 0x4 ]
push r--data
mov [ ebp - 0x4 ] 0x1
push ebx
mov [ eax ] r--data
call sub_10002600
lea ecx [ ebx + 0x40 ]
mov [ ebp - 0x4 ] 0x2
call sub_10003a20
lea esi [ ebx + 0x24 ]
xor edi edi
mov eax r--data
call sub_10001f40
mov esi [ ebp - 0x10 ]
mov [ ebx + 0x20 ] 0x1
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
test esi esi
je r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
sub_100013f0
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100098f5
add esp 0x4
sub_10001430
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_10009c2b
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100098f5
add esp 0x4
sub_10001480
push ebp
mov ebp esp
push esi
xor esi esi
push edi
cmp [ ebx + 0x44 ] esi
jbe r-xdata
pop edi
xor eax eax
pop esi
pop ebp
retn 0x4
lea esp [ esp ]
lea edi [ eax + 0x8 ]
cmp [ edi + 0x18 ] 0x10
lea eax [ edi + 0x4 ]
jb r-xdata
mov ecx esi
jmp r-xdata
mov ecx [ ebp + 0x8 ]
push ecx
push eax
call sub_10009b00
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax ]
dec ecx
mov eax [ eax ]
jne r-xdata
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
inc esi
cmp esi [ ebx + 0x44 ]
jb r-xdata
mov eax [ ebx + 0x40 ]
mov eax [ eax ]
test esi esi
je r-xdata
sub_10001500
push ebp
mov ebp esp
push 0xffffffff
push sub_100140d8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
push 0x0
push 0x0
lea eax [ ebp - 0x2c ]
push eax
add ecx 0x4
call sub_10003460
mov [ ebp - 0x4 ] 0x0
mov eax [ ebp - 0x1c ]
mov [ edi ] eax
inc eax
push eax
call sub_10009ff1
mov edx [ ebp - 0x2c ]
mov [ esi ] eax
mov esi 0x10
add esp 0x4
cmp [ ebp - 0x18 ] esi
jae r-xdata
mov ecx eax
lea ebx [ ebx ]
lea edx [ ebp - 0x2c ]
mov al [ edx ]
mov [ ecx ] al
inc edx
inc ecx
test al al
jne r-xdata
mov [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x18 ] esi
jb r-xdata
mov eax 0x1
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn 0x8
mov ecx [ ebp - 0x2c ]
push ecx
call sub_100098f5
add esp 0x4
sub_100015c0
push ebp
mov ebp esp
push 0xffffffff
push sub_10013938
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
lea ecx [ esi + 0x4 ]
mov [ ebp - 0x4 ] 0x0
call sub_100033a0
test [ ebp + 0x8 ] 0x1
mov [ ebp - 0x4 ] 0xffffffff
mov [ esi ] r--data
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_100098f5
add esp 0x4
sub_10001630
push ebp
mov ebp esp
push 0xffffffff
push sub_10014312
mov eax [ fs : 0x0 ]
push eax
sub esp 0x40
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
xor edi edi
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x30 ] eax
lea eax [ edi + 0x3 ]
mov esi ecx
mov [ ebp - 0x40 ] ebx
mov [ ebp - 0x3c ] edi
call sub_10006990
push 0x24
mov [ ebp - 0x38 ] eax
mov [ ebx + 0x4 ] edi
call sub_10009900
add esp 0x4
cmp eax edi
je r-xdata
lea edx [ ebp - 0x34 ]
push edx
lea ecx [ ebp - 0x4c ]
mov [ ebp - 0x34 ] edi
call sub_10009bcf
push r--data
lea eax [ ebp - 0x4c ]
push eax
mov [ ebp - 0x4c ] r--data
call sub_1000acc0
int3
mov [ ebx ] eax
mov [ eax ] eax
mov eax [ ebx ]
mov [ eax + 0x4 ] eax
mov [ ebp - 0x4 ] edi
cmp [ esi + 0x1c ] 0x10
mov [ ebp - 0x3c ] 0x1
jb r-xdata
add esi 0x8
mov esi [ esi + 0x8 ]
jmp r-xdata
mov al [ ecx ]
inc ecx
test al al
jne r-xdata
sub ecx edx
mov eax esi
mov edi ecx
lea esi [ ebp - 0x2c ]
call sub_10001f40
mov [ ebp - 0x4 ] 0x1
mov esi [ ebx ]
mov edx [ esi + 0x4 ]
lea ecx [ ebp - 0x2c ]
push ecx
push edx
push esi
call sub_100024d0
mov ecx [ ebx + 0x4 ]
mov edx 0x9249248
sub edx ecx
cmp edx 0x1
jae r-xdata
mov ecx esi
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x2c ] 0x0
lea edx [ ecx + 0x1 ]
inc ecx
mov [ ebx + 0x4 ] ecx
mov [ esi + 0x4 ] eax
mov ecx [ eax + 0x4 ]
mov [ ecx ] eax
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
push r--data
call sub_1001258a
mov esi [ ebp - 0x30 ]
cmp [ esi ] 0x0
mov [ ebp - 0x30 ] esi
je r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_100098f5
add esp 0x4
mov eax ebx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn 0x4
jmp r-xdata
mov ecx [ ebp - 0x38 ]
push ecx
push esi
call sub_1000a0c0
xor ecx ecx
add esp 0x8
mov [ ebp - 0x34 ] eax
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] ecx
mov [ ebp - 0x2c ] cl
cmp eax ecx
je r-xdata
mov eax esi
lea edi [ eax + 0x1 ]
mov edi edi
mov edi eax
sub edi esi
mov eax esi
lea esi [ ebp - 0x2c ]
call sub_10001f40
mov [ ebp - 0x4 ] 0x2
mov esi [ ebx ]
mov eax [ esi + 0x4 ]
lea edx [ ebp - 0x2c ]
push edx
push eax
push esi
call sub_100024d0
mov ecx [ ebx + 0x4 ]
mov edx 0x9249248
sub edx ecx
cmp edx 0x1
jb r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edi
mov edi eax
mov eax esi
lea esi [ ebp - 0x2c ]
call sub_10001f40
mov [ ebp - 0x4 ] 0x3
mov esi [ ebx ]
mov eax [ esi + 0x4 ]
lea edx [ ebp - 0x2c ]
push edx
push eax
push esi
call sub_100021a0
mov ecx [ ebx + 0x4 ]
mov edx 0x9249248
sub edx ecx
cmp edx 0x1
jb r-xdata
inc ecx
mov [ ebx + 0x4 ] ecx
mov [ esi + 0x4 ] eax
mov ecx [ eax + 0x4 ]
mov [ ecx ] eax
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
inc ecx
mov [ ebx + 0x4 ] ecx
mov [ esi + 0x4 ] eax
mov ecx [ eax + 0x4 ]
mov [ ecx ] eax
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
mov ecx [ ebp - 0x34 ]
inc ecx
mov [ ebp - 0x30 ] ecx
jmp r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_100098f5
add esp 0x4
mov eax [ ebp - 0x30 ]
lea edx [ eax + 0x1 ]
mov eax [ ebp - 0x2c ]
push eax
call sub_100098f5
add esp 0x4
mov ecx [ ebp - 0x30 ]
cmp [ ecx ] 0x0
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
add [ ebp - 0x30 ] eax
mov esi [ ebp - 0x30 ]
sub_100018a0
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov [ ebp - 0x28 ] eax
mov ebx ecx
push edi
mov eax 0x2
mov [ ebp - 0x24 ] ebx
mov edi edx
call sub_10006990
mov esi eax
lea edx [ eax + 0x1 ]
nop
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
cmp edi eax
jb r-xdata
mov eax [ ebp - 0x24 ]
sub esp 0x1c
mov esi esp
xor ebx ebx
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] ebx
mov [ ebp - 0x2c ] esp
mov [ esi ] bl
call sub_10001f40
mov ecx [ ebp - 0x28 ]
add ecx 0x4
push ecx
mov edx ebx
lea ecx [ ebp - 0x20 ]
call sub_10002710
xor edx edx
cmp [ ebp - 0x10 ] edx
sete dl
cmp [ ebp - 0xc ] 0x10
mov esi edx
jb r-xdata
mov eax esi
lea edx [ eax + 0x1 ]
mov ecx [ ebp - 0x4 ]
pop edi
mov eax esi
pop esi
xor ecx ebp
pop ebx
call sub_100098bc
mov esp ebp
pop ebp
retn 0x4
mov eax [ ebp - 0x20 ]
push eax
call sub_100098f5
add esp 0x4
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
push esi
push ebx
call sub_10009ffc
add esp 0xc
test eax eax
jne r-xdata
mov eax esi
lea edx [ eax + 0x1 ]
nop
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
add ebx eax
mov eax esi
mov [ ebp - 0x24 ] ebx
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
sub edi eax
sub_10001980
push ebp
mov ebp esp
push 0xffffffff
push sub_100145aa
mov eax [ fs : 0x0 ]
push eax
sub esp 0xc
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov eax [ ebp + 0xc ]
push eax
lea ebx [ ebp - 0x18 ]
call sub_10001630
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov eax [ ebp - 0x18 ]
lea edi [ esi + 0x4 ]
mov esi [ eax ]
cmp esi eax
je r-xdata
cmp [ ebp - 0x14 ] 0x1
jbe r-xdata
mov eax [ esi + 0x4 ]
mov ecx [ esi ]
mov [ eax ] ecx
mov edx [ esi ]
mov eax [ esi + 0x4 ]
mov [ edx + 0x4 ] eax
cmp [ esi + 0x1c ] 0x10
jb r-xdata
mov eax [ eax ]
add eax 0x8
cmp [ eax + 0x14 ] 0x10
jb r-xdata
mov edi edi
mov [ esi + 0x1c ] 0xf
mov [ esi + 0x18 ] ebx
push esi
mov [ esi + 0x8 ] bl
call sub_100098f5
mov eax [ ebp - 0x18 ]
add esp 0x4
dec [ ebp - 0x14 ]
mov eax [ esi + 0x8 ]
push eax
call sub_100098f5
add esp 0x4
push eax
mov ebx edi
call sub_10001480
mov esi [ ebp + 0x8 ]
mov [ esi ] edi
mov [ esi + 0x4 ] eax
lea ebx [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0x2
call sub_10002150
mov [ ebp - 0x4 ] 0xffffffff
mov edx [ ebp - 0x18 ]
push edx
mov eax [ eax ]
mov [ ebp + 0xc ] eax
mov ecx [ eax ]
mov [ ebp + 0xc ] ecx
jmp r-xdata
mov esi [ ebp + 0x8 ]
xor eax eax
mov [ esi ] eax
mov [ esi + 0x4 ] eax
lea ebx [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0x1
call sub_10002150
mov [ ebp - 0x4 ] 0xffffffff
mov ecx [ ebp - 0x18 ]
push ecx
jmp r-xdata
lea esp [ esp ]
xor esi esi
cmp [ edi + 0x44 ] esi
jbe r-xdata
call sub_100098f5
mov eax esi
add esp 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
lea ebx [ eax + 0x8 ]
cmp [ ebx + 0x18 ] 0x10
lea eax [ ebx + 0x4 ]
jb r-xdata
mov ecx esi
jmp r-xdata
mov edx [ ebp + 0xc ]
push edx
push eax
call sub_10009b00
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax ]
dec ecx
mov eax [ eax ]
jne r-xdata
test ebx ebx
je r-xdata
inc esi
cmp esi [ edi + 0x44 ]
jb r-xdata
mov eax [ ebp - 0x18 ]
mov esi [ eax ]
cmp esi eax
je r-xdata
mov eax [ edi + 0x40 ]
mov eax [ eax ]
test esi esi
je r-xdata
cmp [ ebp - 0x14 ] 0x1
mov edi ebx
ja r-xdata
mov eax [ esi + 0x4 ]
mov ecx [ esi ]
mov [ eax ] ecx
mov edx [ esi ]
mov eax [ esi + 0x4 ]
mov [ edx + 0x4 ] eax
cmp [ esi + 0x1c ] 0x10
jb r-xdata
mov eax [ eax ]
add eax 0x8
cmp [ eax + 0x14 ] 0x10
jb r-xdata
mov [ esi + 0x1c ] 0xf
mov [ esi + 0x18 ] 0x0
push esi
mov [ esi + 0x8 ] 0x0
call sub_100098f5
mov eax [ ebp - 0x18 ]
add esp 0x4
dec [ ebp - 0x14 ]
mov eax [ esi + 0x8 ]
push eax
call sub_100098f5
add esp 0x4
sub_10001b50
push ebp
mov ebp esp
push esi
push 0x8
mov esi ecx
call sub_10009900
add esp 0x4
test eax eax
je r-xdata
xor eax eax
pop esi
pop ebp
retn 0x4
mov edx [ ebp + 0x8 ]
mov ecx [ esi + 0x44 ]
mov ecx [ ecx ]
test edx edx
je r-xdata
add ecx 0x8
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
pop esi
pop ebp
retn 0x4
dec edx
mov ecx [ ecx ]
jne r-xdata
sub_10001b90
push ebp
mov ebp esp
push 0xffffffff
push sub_10014572
mov eax [ fs : 0x0 ]
push eax
sub esp 0xc
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
mov eax [ edi ]
mov esi [ ebp + 0x8 ]
mov edx [ eax + 0x10 ]
push esi
call edx
mov ebx eax
test ebx ebx
je r-xdata
push esi
lea ebx [ ebp - 0x18 ]
mov ecx edi
call sub_10001630
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov eax [ ebp - 0x18 ]
mov esi [ eax ]
cmp esi eax
je r-xdata
mov eax [ ebx ]
mov edx [ eax + 0xc ]
mov ecx ebx
call edx
mov eax ebx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
cmp [ ebp - 0x14 ] 0x1
lea ebx [ edi + 0x4 ]
jbe r-xdata
mov eax [ esi + 0x4 ]
mov ecx [ esi ]
mov [ eax ] ecx
mov edx [ esi ]
mov eax [ esi + 0x4 ]
mov [ edx + 0x4 ] eax
cmp [ esi + 0x1c ] 0x10
jb r-xdata
mov eax [ eax ]
add eax 0x8
cmp [ eax + 0x14 ] 0x10
jb r-xdata
mov eax [ eax ]
add eax 0x8
cmp [ eax + 0x14 ] 0x10
jb r-xdata
mov [ esi + 0x1c ] 0xf
mov [ esi + 0x18 ] ebx
push esi
mov [ esi + 0x8 ] bl
call sub_100098f5
mov eax [ ebp - 0x18 ]
add esp 0x4
dec [ ebp - 0x14 ]
mov eax [ esi + 0x8 ]
push eax
call sub_100098f5
add esp 0x4
push eax
call sub_10003830
push 0x8
mov esi eax
call sub_10009900
add esp 0x4
test eax eax
je r-xdata
mov eax [ eax ]
push eax
call sub_10001480
test eax eax
jne r-xdata
mov eax [ eax ]
xor esi esi
mov [ eax + 0x4 ] esi
mov [ eax ] r--data
mov esi eax
jmp r-xdata
mov ebx eax
mov eax [ ebp - 0x18 ]
mov esi [ eax ]
cmp esi eax
je r-xdata
mov ecx [ ebp - 0x18 ]
mov eax [ ecx ]
add eax 0x8
cmp [ eax + 0x14 ] 0x10
jb r-xdata
lea ebx [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0x1
call sub_10002150
mov [ ebp - 0x4 ] 0xffffffff
mov edx [ ebp - 0x18 ]
push edx
call sub_100098f5
add esp 0x4
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
cmp [ ebp - 0x14 ] 0x1
ja r-xdata
mov eax [ esi + 0x4 ]
mov edx [ esi ]
mov [ eax ] edx
mov eax [ esi ]
mov ecx [ esi + 0x4 ]
mov [ eax + 0x4 ] ecx
cmp [ esi + 0x1c ] 0x10
jb r-xdata
push eax
call sub_10003830
mov eax [ eax ]
mov [ esi + 0x1c ] 0xf
mov [ esi + 0x18 ] 0x0
push esi
mov [ esi + 0x8 ] 0x0
call sub_100098f5
mov eax [ ebp - 0x18 ]
add esp 0x4
dec [ ebp - 0x14 ]
mov eax [ esi + 0x8 ]
push eax
call sub_100098f5
add esp 0x4
sub_10001d40
push ebp
mov ebp esp
sub esp 0x8
mov eax [ ebp + 0x8 ]
push eax
lea edx [ ebp - 0x8 ]
push edx
call sub_10001980
mov edx [ ebp - 0x8 ]
test edx edx
je r-xdata
mov esp ebp
pop ebp
retn 0x4
mov eax [ ebp - 0x4 ]
test eax eax
je r-xdata
add eax 0x4
cmp [ eax + 0x14 ] 0x10
jb r-xdata
push esi
mov esi [ edx + 0x44 ]
xor ecx ecx
mov [ ebp + 0x8 ] eax
test esi esi
je r-xdata
mov eax [ eax ]
pop esi
mov edx [ edx + 0x40 ]
push edi
mov edi [ edx ]
push ebx
add eax 0xc
cmp [ eax + 0x14 ] 0x10
jb r-xdata
mov edx ecx
mov edx eax
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
dec edx
mov eax [ eax ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test bl bl
je r-xdata
mov eax [ ebp - 0x8 ]
push eax
call sub_100032a0
pop ebx
pop edi
inc ecx
cmp ecx esi
jb r-xdata
xor eax eax
jmp r-xdata
mov bl [ eax + 0x1 ]
cmp bl [ edx + 0x1 ]
jne r-xdata
mov eax edi
test ecx ecx
je r-xdata
pop ebx
pop edi
pop esi
mov esp ebp
pop ebp
retn 0x4
test eax eax
je r-xdata
add eax 0x2
add edx 0x2
test bl bl
jne r-xdata
mov bl [ eax ]
cmp bl [ edx ]
jne r-xdata
sub_10001df0
push ebp
mov ebp esp
sub esp 0x8
mov eax [ ebp + 0x8 ]
push esi
push eax
lea edx [ ebp - 0x8 ]
push edx
call sub_10001980
mov esi [ ebp - 0x4 ]
test esi esi
je r-xdata
xor eax eax
pop esi
mov esp ebp
pop ebp
retn 0x4
push 0x8
call sub_10009900
add esp 0x4
test eax eax
je r-xdata
mov [ eax + 0x4 ] esi
mov [ eax ] r--data
pop esi
mov esp ebp
pop ebp
retn 0x4
sub_10001e40
push ebx
xor ebx ebx
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] ebx
mov [ esi ] bl
cmp esi edi
je r-xdata
mov eax esi
pop ebx
retn
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] ebx
mov [ esi ] bl
cmp [ edi + 0x14 ] 0x10
jae r-xdata
mov eax [ esi ]
push eax
call sub_100098f5
add esp 0x4
mov edx [ edi ]
mov [ esi ] edx
mov [ edi ] ebx
mov ecx [ edi + 0x10 ]
inc ecx
push ecx
push edi
push esi
call sub_10009c90
add esp 0xc
jmp r-xdata
mov eax [ edi + 0x10 ]
mov [ esi + 0x10 ] eax
mov ecx [ edi + 0x14 ]
mov [ esi + 0x14 ] ecx
mov [ edi + 0x10 ] ebx
mov [ edi + 0x14 ] ebx
sub_10001ee0
push ebp
mov ebp esp
push 0xffffffff
push sub_10013908
mov eax [ fs : 0x0 ]
push eax
push ebx
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0x0
call sub_10002150
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebx ]
push eax
call sub_100098f5
add esp 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_10001f40
push ebx
mov ebx eax
test ebx ebx
je r-xdata
cmp edi 0xfffffffe
jbe r-xdata
mov ecx [ esi + 0x14 ]
cmp ecx 0x10
jb r-xdata
mov eax [ esi + 0x14 ]
cmp eax edi
jae r-xdata
push r--data
call sub_1001258a
mov eax esi
mov eax [ esi ]
jmp r-xdata
test edi edi
jne r-xdata
mov eax [ esi + 0x10 ]
push eax
push edi
push esi
call sub_100022e0
test edi edi
je r-xdata
cmp ecx 0x10
jb r-xdata
cmp ebx eax
jb r-xdata
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov [ esi + 0x10 ] edi
cmp eax 0x10
jb r-xdata
mov eax esi
pop ebx
retn
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov eax esi
mov [ eax ] 0x0
pop ebx
retn
mov eax [ esi ]
mov [ eax ] 0x0
mov eax esi
pop ebx
retn
cmp ecx 0x10
jb r-xdata
mov edx [ esi + 0x10 ]
add edx eax
cmp edx ebx
jbe r-xdata
mov eax esi
mov [ eax + edi ] 0x0
mov eax [ esi ]
mov [ eax + edi ] 0x0
mov eax esi
pop ebx
retn
push edi
push ebx
push eax
call sub_10010060
add esp 0xc
cmp [ esi + 0x14 ] 0x10
mov [ esi + 0x10 ] edi
jb r-xdata
mov eax esi
sub ebx eax
push esi
mov eax edi
mov ecx esi
call sub_10002020
pop ebx
retn
mov eax [ esi ]
sub ebx eax
push esi
mov eax edi
mov ecx esi
call sub_10002020
pop ebx
retn
sub_10002020
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ ebp + 0x8 ]
push edi
mov edi [ ecx + 0x10 ]
cmp edi ebx
jae r-xdata
sub edi ebx
cmp eax edi
jae r-xdata
push r--data
call sub_100125d7
cmp esi ecx
jne r-xdata
mov edi eax
cmp edi 0xfffffffe
jbe r-xdata
lea ecx [ edi + ebx ]
or eax 0xffffffff
call sub_10002270
mov eax ebx
xor ecx ecx
call sub_10002270
pop edi
mov eax esi
pop esi
pop ebp
retn 0x4
mov eax [ esi + 0x14 ]
cmp eax edi
jae r-xdata
push r--data
call sub_1001258a
test edi edi
jne r-xdata
mov eax [ esi + 0x10 ]
push eax
push edi
push esi
call sub_100022e0
mov ecx [ ebp + 0x8 ]
test edi edi
je r-xdata
mov eax 0x10
cmp [ ecx + 0x14 ] eax
jb r-xdata
mov [ esi + 0x10 ] edi
cmp eax 0x10
jb r-xdata
pop edi
mov eax esi
pop esi
pop ebp
retn 0x4
cmp [ esi + 0x14 ] eax
jb r-xdata
mov ecx [ ecx ]
mov eax esi
pop edi
mov [ eax ] 0x0
pop esi
pop ebp
retn 0x4
mov eax [ esi ]
mov [ eax ] 0x0
pop edi
mov eax esi
pop esi
pop ebp
retn 0x4
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov eax esi
mov [ eax + edi ] 0x0
mov eax [ esi ]
mov [ eax + edi ] 0x0
pop edi
mov eax esi
pop esi
pop ebp
retn 0x4
push edi
add ecx ebx
push ecx
push eax
call sub_10010060
add esp 0xc
cmp [ esi + 0x14 ] 0x10
mov [ esi + 0x10 ] edi
jb r-xdata
sub_10002100
cmp esi 0xfffffffe
jbe r-xdata
mov ecx [ eax + 0x14 ]
cmp ecx esi
jae r-xdata
push r--data
call sub_1001258a
test esi esi
jne r-xdata
mov ecx [ eax + 0x10 ]
push ecx
push esi
push eax
call sub_100022e0
xor edx edx
cmp edx esi
sbb eax eax
neg eax
retn
xor edx edx
cmp edx esi
sbb eax eax
neg eax
retn
mov [ eax + 0x10 ] esi
cmp ecx 0x10
jb r-xdata
mov [ eax ] 0x0
mov eax [ eax ]
sub_10002150
mov eax [ ebx ]
push esi
mov esi [ eax ]
mov [ eax ] eax
mov eax [ ebx ]
mov [ eax + 0x4 ] eax
mov [ ebx + 0x4 ] 0x0
cmp esi [ ebx ]
je r-xdata
pop esi
retn
push edi
mov [ esi + 0x1c ] 0xf
mov [ esi + 0x18 ] 0x0
push esi
mov [ esi + 0x8 ] 0x0
call sub_100098f5
add esp 0x4
mov esi edi
cmp edi [ ebx ]
jne r-xdata
mov eax [ esi + 0x8 ]
push eax
call sub_100098f5
add esp 0x4
cmp [ esi + 0x1c ] 0x10
mov edi [ esi ]
jb r-xdata
pop edi
sub_100021a0
push ebp
mov ebp esp
push 0xffffffff
push sub_10013b85
mov eax [ fs : 0x0 ]
push eax
sub esp 0x14
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
push 0x24
call sub_10009900
mov esi eax
xor eax eax
add esp 0x4
mov [ ebp - 0x14 ] esi
cmp esi eax
je r-xdata
lea edx [ ebp + 0x8 ]
push edx
lea ecx [ ebp - 0x20 ]
mov [ ebp + 0x8 ] eax
call sub_10009bcf
push r--data
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x20 ] r--data
call sub_1000acc0
int3
mov edx [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
mov ecx [ ebp + 0x8 ]
mov [ esi ] ecx
mov [ esi + 0x4 ] edx
lea ecx [ esi + 0x8 ]
mov [ ebp - 0x4 ] 0x1
cmp ecx eax
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov [ ecx + 0x10 ] eax
mov [ ecx + 0x14 ] 0xf
mov [ ecx ] al
mov eax [ ebp + 0x10 ]
push eax
or eax 0xffffffff
xor ebx ebx
call sub_10002020
sub_10002270
push edi
mov edi eax
mov eax [ esi + 0x10 ]
cmp eax ecx
jae r-xdata
sub eax ecx
cmp eax edi
jae r-xdata
push r--data
call sub_100125d7
test edi edi
je r-xdata
mov edi eax
mov eax esi
pop edi
retn
mov edx [ esi + 0x14 ]
push ebx
cmp edx 0x10
jb r-xdata
mov ebx esi
mov ebx [ esi ]
jmp r-xdata
mov edx esi
mov edx [ esi ]
jmp r-xdata
cmp edx 0x10
jb r-xdata
mov ecx esi
mov [ ecx + eax ] 0x0
mov ecx [ esi ]
mov [ ecx + eax ] 0x0
mov eax esi
pop edi
retn
sub eax edi
add ebx ecx
push eax
add ebx edi
add edx ecx
push ebx
push edx
call sub_10009c90
mov eax [ esi + 0x10 ]
add esp 0xc
sub eax edi
cmp [ esi + 0x14 ] 0x10
mov [ esi + 0x10 ] eax
pop ebx
jb r-xdata
sub_100022e0
push ebp
mov ebp esp
push 0xffffffff
push sub_100138e0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x18
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov eax [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov esi eax
or esi 0xf
cmp esi 0xfffffffe
jbe r-xdata
mov ebx [ edi + 0x14 ]
mov eax 0xaaaaaaab
mul esi
mov ecx ebx
shr ecx 0x1
shr edx 0x1
cmp ecx edx
jbe r-xdata
mov esi eax
jmp r-xdata
xor eax eax
lea ecx [ esi + 0x1 ]
mov [ ebp - 0x4 ] eax
cmp ecx eax
jbe r-xdata
mov eax 0xfffffffe
sub eax ecx
lea esi [ ecx + ebx ]
cmp ebx eax
jbe r-xdata
mov ebx eax
mov [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
cmp ecx 0xffffffff
ja r-xdata
mov esi 0xfffffffe
mov ecx [ ebp + 0x10 ]
test ecx ecx
je r-xdata
lea ecx [ ebp - 0x14 ]
push ecx
lea ecx [ ebp - 0x24 ]
mov [ ebp - 0x14 ] 0x0
call sub_10009bcf
push r--data
lea edx [ ebp - 0x24 ]
push edx
mov [ ebp - 0x24 ] r--data
call sub_1000acc0
mov eax [ ebp + 0xc ]
lea ecx [ eax + 0x1 ]
mov [ ebp - 0x10 ] esp
mov [ ebp + 0xc ] eax
mov [ ebp - 0x4 ] 0x2
call sub_10002460
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x4 ] 0x1
mov eax r-xdata
retn
push ecx
call sub_10009900
add esp 0x4
test eax eax
je r-xdata
cmp [ edi + 0x14 ] 0x10
jb r-xdata
cmp [ edi + 0x14 ] 0x10
jb r-xdata
mov [ edi ] 0x0
mov [ edi ] ebx
mov [ edi + 0x14 ] esi
mov [ edi + 0x10 ] ecx
cmp esi 0x10
jb r-xdata
mov eax [ edi ]
push eax
call sub_100098f5
mov ecx [ ebp + 0x10 ]
add esp 0x4
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov [ edi + ecx ] 0x0
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov edi ebx
push ecx
push eax
push ebx
call sub_10010060
mov ecx [ ebp + 0x10 ]
add esp 0xc
sub_10002424
mov esi [ ebp + 0x8 ]
cmp [ esi + 0x14 ] 0x10
jb r-xdata
push 0x0
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
push 0x0
mov [ esi ] 0x0
call sub_1000acc0
int3
mov ecx [ esi ]
push ecx
call sub_100098f5
add esp 0x4
sub_10002460
push ebp
mov ebp esp
sub esp 0x10
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn
cmp ecx 0xffffffff
ja r-xdata
lea eax [ ebp - 0x4 ]
push eax
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_10009bcf
push r--data
lea ecx [ ebp - 0x10 ]
push ecx
mov [ ebp - 0x10 ] r--data
call sub_1000acc0
push ecx
call sub_10009900
add esp 0x4
test eax eax
jne r-xdata
sub_100024d0
push ebp
mov ebp esp
push 0xffffffff
push sub_10013ef5
mov eax [ fs : 0x0 ]
push eax
sub esp 0x14
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
push 0x24
call sub_10009900
mov ebx eax
add esp 0x4
mov [ ebp - 0x14 ] ebx
test ebx ebx
je r-xdata
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0x20 ]
mov [ ebp + 0x8 ] 0x0
call sub_10009bcf
push r--data
lea ecx [ ebp - 0x20 ]
push ecx
mov [ ebp - 0x20 ] r--data
call sub_1000acc0
int3
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x4 ] 0x0
mov eax [ ebp + 0x8 ]
mov [ ebx ] eax
mov [ ebx + 0x4 ] ecx
lea esi [ ebx + 0x8 ]
mov [ ebp - 0x4 ] 0x1
test esi esi
je r-xdata
mov eax ebx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov edi [ ebp + 0x10 ]
call sub_10001e40
sub_10002590
push ebp
mov ebp esp
push ecx
cmp [ eax + 0x20 ] 0x0
jne r-xdata
push ebx
push esi
push edi
mov edi [ eax + 0x44 ]
xor esi esi
test edi edi
je r-xdata
xor eax eax
mov esp ebp
pop ebp
retn
pop edi
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ eax + 0x40 ]
mov ebx [ eax ]
add eax 0xc
cmp [ eax + 0x14 ] 0x10
jb r-xdata
mov ecx esi
lea esp [ esp ]
lea edx [ eax + 0x1 ]
mov eax [ eax ]
dec ecx
mov eax [ eax ]
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
jne r-xdata
pop edi
pop esi
mov eax 0x1
pop ebx
mov esp ebp
pop ebp
retn
inc esi
cmp esi edi
jb r-xdata
mov eax ebx
test esi esi
je r-xdata
sub_10002600
push ebp
mov ebp esp
push 0xffffffff
push sub_10013ed3
mov eax [ fs : 0x0 ]
push eax
sub esp 0x10
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx [ ebp + 0x8 ]
lea esi [ ebx + 0x4 ]
mov [ ebx ] r--data
mov eax 0xf
xor edi edi
mov [ esi + 0x14 ] eax
mov [ esi + 0x10 ] edi
mov [ esi ] 0x0
mov [ ebp - 0x4 ] edi
mov [ ebx + 0x38 ] eax
mov [ ebx + 0x34 ] edi
mov [ ebx + 0x24 ] 0x0
mov [ ebp - 0x4 ] 0x1
push 0x54
mov [ ebx + 0x44 ] edi
call sub_10009900
add esp 0x4
cmp eax edi
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
lea ecx [ ebp - 0x1c ]
mov [ ebp - 0x10 ] edi
call sub_10009bcf
push r--data
lea ecx [ ebp - 0x1c ]
push ecx
mov [ ebp - 0x1c ] r--data
call sub_1000acc0
int3
mov [ ebx + 0x40 ] eax
mov [ eax ] eax
mov eax [ ebx + 0x40 ]
mov [ eax + 0x4 ] eax
mov edx [ ebp + 0xc ]
mov eax edx
mov [ ebp - 0x4 ] 0x2
lea edi [ eax + 0x1 ]
lea ecx [ ecx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edi
mov edi eax
mov eax edx
call sub_10001f40
mov [ ebx + 0x20 ] 0x0
mov eax ebx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
sub_100026e0
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_100033a0
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100098f5
add esp 0x4
sub_10002710
push ebp
mov ebp esp
push 0xffffffff
push sub_10013e79
mov eax [ fs : 0x0 ]
push eax
sub esp 0x74
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
xor ebx ebx
mov [ ebp - 0x54 ] eax
mov [ ebp - 0x5c ] ecx
mov [ ebp - 0x6c ] edx
mov [ ebp - 0x60 ] ebx
lea eax [ ebx + 0xa ]
mov [ ebp - 0x4 ] 0x1
call sub_10006990
mov [ ebp - 0x50 ] eax
lea eax [ ebx + 0xb ]
call sub_10006990
mov [ ebp - 0x78 ] eax
lea eax [ ebx + 0x6 ]
call sub_10006990
mov [ ebp - 0x7c ] eax
lea eax [ ebx + 0x8 ]
call sub_10006990
mov [ ebp - 0x74 ] eax
lea eax [ ebx + 0x9 ]
call sub_10006990
cmp [ ebp + 0x20 ] 0x10
mov [ ebp - 0x68 ] eax
mov eax [ ebp + 0xc ]
jae r-xdata
call sub_10003200
mov ecx eax
mov [ ebp - 0x34 ] 0xf
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x48 ] bl
lea esi [ ecx + 0x1 ]
lea ecx [ ecx ]
lea eax [ ebp + 0xc ]
mov dl [ ecx ]
inc ecx
cmp dl bl
jne r-xdata
sub ecx esi
mov edi ecx
lea esi [ ebp - 0x48 ]
call sub_10001f40
mov [ ebp - 0x4 ] 0x2
mov eax esi
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x2c ] bl
push eax
or eax 0xffffffff
xor ebx ebx
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x18 ] 0xf
call sub_10002020
lea eax [ ebx + 0x9 ]
mov [ ebp - 0x4 ] 0x3
call sub_10006990
mov edi [ ebp - 0x18 ]
mov edx [ ebp - 0x2c ]
cmp edi 0x10
jae r-xdata
mov al [ eax ]
xor ecx ecx
cmp [ edx ] al
jne r-xdata
lea edx [ ebp - 0x2c ]
mov esi [ ebp - 0x6c ]
add esi esi
xor ebx ebx
cmp esi ecx
sete bl
mov [ ebp - 0x4 ] 0x2
cmp edi 0x10
jb r-xdata
inc ecx
cmp [ ecx + edx ] al
je r-xdata
test ebx ebx
jne r-xdata
mov ecx [ ebp - 0x2c ]
push ecx
call sub_100098f5
add esp 0x4
cmp [ ebp - 0x34 ] 0x10
mov ebx [ ebp - 0x48 ]
mov [ ebp - 0x70 ] 0x0
mov [ ebp - 0x64 ] 0xffffffff
jae r-xdata
mov esi [ ebp - 0x5c ]
lea edi [ ebp - 0x48 ]
call sub_10001e40
mov eax 0x1
mov [ ebp - 0x60 ] eax
mov [ ebp - 0x4 ] al
mov cl [ ebx + esi ]
mov edx [ ebp - 0x50 ]
add ebx esi
mov [ ebp - 0x4c ] ebx
cmp cl [ edx ]
jne r-xdata
lea ebx [ ebp - 0x48 ]
mov [ ebp - 0x34 ] 0xf
jmp r-xdata
mov edx [ ebp - 0x48 ]
push edx
call sub_100098f5
add esp 0x4
mov eax ebx
mov [ ebp - 0x58 ] 0x0
lea edx [ eax + 0x1 ]
mov ecx [ ebp - 0x68 ]
mov cl [ ecx ]
mov eax 0x1
cmp [ ebx + 0x1 ] cl
jne r-xdata
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x38 ] 0x0
mov [ ebp - 0x48 ] 0x0
cmp [ ebp + 0x20 ] edi
jb r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
inc eax
je r-xdata
mov esi [ ebp - 0x54 ]
dec eax
mov [ ebp - 0x64 ] eax
add esi 0x4
xor edi edi
mov eax r--data
mov [ ebp - 0x70 ] 0x1
call sub_10001f40
inc eax
cmp [ eax + ebx ] cl
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn 0x20
mov eax [ ebp + 0xc ]
push eax
mov esi [ ebp - 0x5c ]
mov ebx 0xf
mov [ esi + 0x14 ] ebx
mov [ esi + 0x10 ] 0x0
xor edi edi
mov eax r--data
mov [ esi ] 0x0
call sub_10001f40
mov edi 0x10
mov [ ebp - 0x4 ] 0x1
mov [ ebp - 0x60 ] 0x1
cmp [ ebp - 0x34 ] edi
jb r-xdata
or eax 0xffffffff
mov esi ebx
sub eax ebx
mov [ ebp - 0x50 ] esi
mov [ ebp - 0x80 ] eax
mov [ ebp - 0x34 ] ebx
mov edx [ ebp - 0x48 ]
push edx
call sub_100098f5
add esp 0x4
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edi
push eax
push edx
push esi
call sub_10009ffc
add esp 0xc
test eax eax
jne r-xdata
mov esi [ ebp - 0x7c ]
mov eax esi
lea edx [ eax + 0x1 ]
cmp [ ebp - 0x70 ] eax
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
push esi
mov esi [ ebp - 0x50 ]
push esi
call sub_10009ffc
add esp 0xc
test eax eax
je r-xdata
mov edi [ ebp - 0x58 ]
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x2c ] al
mov eax [ ebp - 0x4c ]
lea esi [ ebp - 0x2c ]
mov [ ebp - 0x18 ] 0xf
call sub_10001f40
mov ebx [ ebp - 0x54 ]
add ebx 0x4
mov edi esi
mov esi ebx
mov [ ebp - 0x4 ] 0x4
call sub_10003900
mov [ ebp - 0x4 ] 0x2
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
mov ecx [ ebp - 0x64 ]
mov ebx [ ebp - 0x58 ]
lea eax [ ecx + 0x1 ]
cmp eax ebx
jne r-xdata
mov edi [ ebp - 0x74 ]
mov eax edi
lea edx [ eax + 0x1 ]
cmp [ ebp - 0x58 ] 0x0
jbe r-xdata
mov edx [ ebp - 0x2c ]
push edx
call sub_100098f5
add esp 0x4
mov edx [ ebp - 0x4c ]
mov edi ebx
sub edi ecx
lea eax [ edx + ecx + 0x1 ]
dec edi
lea esi [ ebp - 0x2c ]
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] 0x0
mov [ ebp - 0x2c ] 0x0
mov [ ebp - 0x50 ] eax
call sub_10001f40
mov esi [ ebp - 0x54 ]
add esi 0x24
lea eax [ ebp - 0x2c ]
mov [ ebp - 0x4 ] 0x6
cmp esi eax
je r-xdata
cmp [ esi ] 0x0
je r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
push edi
push esi
call sub_10009ffc
add esp 0xc
test eax eax
je r-xdata
mov edx [ ebp - 0x68 ]
mov al [ edx ]
mov ecx [ ebp - 0x58 ]
mov edx [ ebp - 0x4c ]
mov [ ebp - 0x70 ] 0x1
mov [ ebp - 0x64 ] ecx
cmp [ edx + ecx + 0x1 ] al
jne r-xdata
mov eax [ ebp - 0x50 ]
mov ecx [ ebp - 0x80 ]
lea edi [ eax + ecx ]
test edi edi
je r-xdata
mov [ ebp - 0x4 ] 0x2
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov eax [ ebp - 0x4c ]
inc ebx
inc esi
mov [ ebp - 0x58 ] ebx
mov [ ebp - 0x50 ] esi
lea edx [ eax + 0x1 ]
mov ecx [ ebp - 0x6c ]
mov edx [ ebp - 0x4c ]
inc ecx
push 0x0
push ecx
sub esp 0x1c
lea eax [ ebx + edx ]
mov esi esp
mov ebx 0xf
mov ecx eax
mov [ esi + 0x14 ] ebx
mov [ esi + 0x10 ] 0x0
mov [ ebp - 0x74 ] esp
mov [ esi ] 0x0
lea edi [ ecx + 0x1 ]
nop
cmp [ esi ] 0x0
jne r-xdata
inc ecx
cmp [ edx + ecx + 0x1 ] al
je r-xdata
lea esp [ esp ]
mov edi [ ebp - 0x54 ]
cmp [ edi + 0x14 ] 0x0
jne r-xdata
mov edx [ ebp - 0x2c ]
push edx
call sub_100098f5
add esp 0x4
xor edi edi
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] edi
mov [ esi ] 0x0
cmp [ ebp - 0x18 ] 0x10
jae r-xdata
mov eax [ esi ]
push eax
call sub_100098f5
add esp 0x4
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
inc eax
cmp ebx eax
jb r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
mov edi ecx
call sub_10001f40
mov esi [ ebp - 0x5c ]
mov ecx [ ebp - 0x54 ]
push esi
call sub_10002d70
mov edi 0x10
mov [ ebp - 0x4 ] 0x1
mov [ ebp - 0x60 ] 0x1
cmp [ ebp - 0x34 ] edi
jb r-xdata
mov ebx [ ebp - 0x58 ]
mov [ ebp - 0x64 ] ecx
dec edi
jne r-xdata
mov eax edx
lea esi [ ebp - 0x2c ]
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] 0x0
mov [ ebp - 0x2c ] 0x0
call sub_10001f40
mov edx esi
mov [ ebp - 0x4 ] 0x5
cmp ebx edx
je r-xdata
mov esi [ ebp - 0x5c ]
mov edx [ ebp - 0x4c ]
xor ecx ecx
mov [ edi + 0x20 ] ecx
mov [ esi + 0x10 ] ecx
lea eax [ ebx + edx ]
mov [ esi + 0x14 ] 0xf
mov [ esi ] cl
mov ecx eax
lea edi [ ecx + 0x1 ]
mov edi edi
cmp [ edi + 0x34 ] 0x0
jbe r-xdata
mov edx [ ebp - 0x2c ]
mov [ esi ] edx
mov [ ebp - 0x2c ] edi
mov eax [ ebp - 0x1c ]
inc eax
push eax
lea ecx [ ebp - 0x2c ]
push ecx
push esi
call sub_10009c90
add esp 0xc
jmp r-xdata
mov edx [ ebp - 0x78 ]
mov eax edx
lea edi [ eax + 0x1 ]
mov [ ebp - 0x34 ] ebx
mov eax [ ebp - 0x48 ]
push eax
call sub_100098f5
add esp 0x4
mov edx [ ebp - 0x4c ]
mov al [ edi + edx ]
mov ecx [ ebp - 0x68 ]
cmp al [ ecx ]
jne r-xdata
mov [ ebp - 0x4 ] 0x2
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
cmp [ ebx + 0x14 ] 0x10
jb r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
mov edi ecx
call sub_10001f40
mov edi 0x10
mov [ ebp - 0x4 ] 0x1
mov [ ebp - 0x60 ] 0x1
cmp [ ebp - 0x34 ] edi
jb r-xdata
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov eax [ ebp - 0x1c ]
mov ecx [ ebp - 0x18 ]
mov [ esi + 0x10 ] eax
mov [ esi + 0x14 ] ecx
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x18 ] edi
mov ecx [ ebp + 0xc ]
push ecx
jmp r-xdata
mov ecx [ ebp - 0x2c ]
push ecx
call sub_100098f5
add esp 0x4
xor esi esi
mov [ ebx + 0x14 ] 0xf
mov [ ebx + 0x10 ] esi
mov [ ebx ] 0x0
cmp [ ebp - 0x18 ] 0x10
jae r-xdata
mov eax [ ebx ]
push eax
call sub_100098f5
add esp 0x4
mov [ ebp - 0x34 ] 0xf
jmp r-xdata
mov eax [ ebp - 0x48 ]
push eax
call sub_100098f5
add esp 0x4
mov eax [ ebp - 0x78 ]
push eax
push esi
call sub_1000a0c0
add esp 0x8
test eax eax
je r-xdata
mov esi [ esi ]
call sub_100098f5
add esp 0x4
mov ecx [ ebp - 0x2c ]
mov [ ebx ] ecx
mov [ ebp - 0x2c ] esi
mov eax [ ebp - 0x1c ]
inc eax
push eax
lea eax [ ebp - 0x2c ]
push eax
push ebx
call sub_10009c90
add esp 0xc
jmp r-xdata
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x38 ] 0x0
mov [ ebp - 0x48 ] 0x0
cmp [ ebp + 0x20 ] edi
jb r-xdata
mov ecx [ ebp - 0x6c ]
mov eax [ ebp - 0x50 ]
inc ecx
push 0x1
push ecx
sub esp 0x1c
mov esi esp
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
mov [ ebp - 0x74 ] esp
mov [ esi ] 0x0
lea ecx [ eax + 0x1 ]
jmp r-xdata
mov edx [ ebp - 0x1c ]
mov eax [ ebp - 0x18 ]
mov [ ebx + 0x10 ] edx
mov [ ebx + 0x14 ] eax
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x18 ] esi
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
mov edi eax
mov eax [ ebp - 0x50 ]
call sub_10001f40
mov esi [ ebp - 0x5c ]
mov ecx [ ebp - 0x54 ]
push esi
call sub_10002d70
mov [ ebp - 0x60 ] 0x1
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
mov edi 0x10
cmp [ ebp - 0x34 ] edi
jb r-xdata
sub_10002d70
push ebp
mov ebp esp
push 0xffffffff
push sub_100142b5
mov eax [ fs : 0x0 ]
push eax
sub esp 0xd0
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov esi ecx
mov [ ebp - 0x98 ] esi
mov [ ebp - 0xb4 ] eax
mov [ ebp - 0xb0 ] 0x0
lea ebx [ esi + 0x40 ]
mov ecx ebx
mov [ ebp - 0x4 ] 0x1
mov [ ebp - 0xa4 ] ebx
call sub_10003a20
add esi 0x24
xor edi edi
mov eax r--data
mov [ ebp - 0xa8 ] esi
call sub_10001f40
cmp [ ebp + 0x20 ] 0x10
mov ecx [ ebp - 0x98 ]
mov eax [ ebp + 0xc ]
mov [ ecx + 0x20 ] 0x1
jae r-xdata
call sub_10003200
mov esi eax
mov ecx esi
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x2c ] 0x0
lea edx [ ecx + 0x1 ]
lea eax [ ebp + 0xc ]
mov al [ ecx ]
inc ecx
test al al
jne r-xdata
sub ecx edx
mov eax esi
mov edi ecx
lea esi [ ebp - 0x2c ]
call sub_10001f40
mov [ ebp - 0x4 ] 0x2
mov [ ebp - 0x9c ] 0x0
jmp r-xdata
mov esi [ ebp - 0xa8 ]
xor edi edi
mov eax r--data
call sub_10001f40
mov edx [ ebp - 0x98 ]
mov eax 0xf
xor esi esi
mov [ edx + 0x20 ] 0x1
mov [ ebp - 0x78 ] r--data
mov [ ebp - 0x60 ] eax
mov [ ebp - 0x64 ] esi
mov [ ebp - 0x74 ] 0x0
mov [ ebp - 0x40 ] eax
mov [ ebp - 0x44 ] esi
mov [ ebp - 0x54 ] 0x0
mov [ ebp - 0x4 ] 0x4
push 0x54
mov [ ebp - 0x34 ] esi
call sub_10009900
add esp 0x4
cmp eax esi
je r-xdata
lea ecx [ ebp - 0xa0 ]
push ecx
lea ecx [ ebp - 0xdc ]
mov [ ebp - 0xa0 ] esi
call sub_10009bcf
push r--data
lea edx [ ebp - 0xdc ]
push edx
mov [ ebp - 0xdc ] r--data
call sub_1000acc0
int3
mov [ ebp - 0x38 ] eax
mov [ eax ] eax
mov eax [ ebp - 0x38 ]
mov [ eax + 0x4 ] eax
mov eax r--data
lea esi [ ebp - 0x74 ]
mov [ ebp - 0x4 ] 0x5
call sub_10001f40
mov [ ebp - 0x58 ] edi
mov [ ebp - 0x4 ] 0x6
mov esi [ ebx ]
mov ecx [ esi + 0x4 ]
lea eax [ ebp - 0x78 ]
push eax
push ecx
push esi
call sub_10003ee0
mov ecx [ ebx + 0x4 ]
mov edx 0x35e50d6
sub edx ecx
cmp edx 0x1
jb r-xdata
push r--data
call sub_1001258a
inc ecx
mov [ ebx + 0x4 ] ecx
mov [ esi + 0x4 ] eax
mov ecx [ eax + 0x4 ]
mov [ ecx ] eax
mov [ ebp - 0x78 ] r--data
lea eax [ ebp - 0x38 ]
mov [ ebp - 0xac ] eax
mov ecx eax
mov [ ebp - 0x4 ] 0x9
call sub_10003a20
mov [ ebp - 0x4 ] 0x8
mov ecx [ ebp - 0x38 ]
push ecx
call sub_100098f5
mov esi 0x10
add esp 0x4
mov [ ebp - 0x4 ] 0x7
cmp [ ebp - 0x40 ] esi
jb r-xdata
mov [ ebp - 0x4 ] 0x2
mov [ ebp - 0x40 ] 0xf
mov [ ebp - 0x44 ] edi
mov [ ebp - 0x54 ] 0x0
cmp [ ebp - 0x60 ] esi
jb r-xdata
mov edx [ ebp - 0x54 ]
push edx
call sub_100098f5
add esp 0x4
mov ecx [ ebp - 0x98 ]
mov ecx [ ecx + 0x44 ]
mov ebx [ ebx ]
mov eax [ ebx ]
dec ecx
cmp ecx edi
jbe r-xdata
mov eax [ ebp - 0x74 ]
push eax
call sub_100098f5
add esp 0x4
cmp [ ebp + 0x2c ] 0x0
lea edi [ eax + 0x8 ]
je r-xdata
dec ecx
mov eax [ eax ]
jne r-xdata
mov esi [ ebp + 0x28 ]
cmp [ ebp - 0x9c ] 0x0
jg r-xdata
xor ebx ebx
cmp [ ebp - 0x18 ] edi
jb r-xdata
xor esi esi
jmp r-xdata
mov eax [ ebp - 0x2c ]
cmp [ ebp - 0x18 ] edi
jae r-xdata
mov eax [ ebp - 0x94 ]
push eax
call sub_100098f5
add esp 0x4
xor ebx ebx
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x2c ] bl
cmp [ esi + 0x14 ] edi
jae r-xdata
mov ecx [ ebp - 0x2c ]
push ecx
call sub_100098f5
add esp 0x4
sub esp 0x1c
mov ecx esp
lea edx [ ebp - 0x2c ]
mov [ ebp - 0xac ] esp
mov [ ecx + 0x14 ] 0xf
mov [ ecx + 0x10 ] 0x0
push edx
or eax 0xffffffff
xor ebx ebx
mov [ ecx ] 0x0
call sub_10002020
push edi
mov edx esi
lea ecx [ ebp - 0x94 ]
call sub_10002710
mov esi eax
lea eax [ ebp - 0x2c ]
mov [ ebp - 0x4 ] 0xa
lea edi [ ebx + 0x10 ]
cmp eax esi
je r-xdata
call sub_10003200
mov ecx eax
lea esi [ ecx + 0x1 ]
nop
lea eax [ ebp - 0x2c ]
mov eax [ esi ]
mov [ ebp - 0x2c ] eax
mov [ esi ] ebx
mov eax [ esi + 0x10 ]
inc eax
push eax
lea edx [ ebp - 0x2c ]
push esi
push edx
call sub_10009c90
add esp 0xc
jmp r-xdata
mov dl [ ecx ]
inc ecx
cmp dl bl
jne r-xdata
sub ecx esi
mov edi ecx
lea esi [ ebp - 0x2c ]
call sub_10001f40
mov ecx esi
mov [ ebp - 0xc0 ] ebx
mov [ ebp - 0xd0 ] bl
push ecx
or eax 0xffffffff
xor ebx ebx
lea ecx [ ebp - 0xd0 ]
mov [ ebp - 0xbc ] 0xf
call sub_10002020
mov [ ebp - 0x4 ] 0xb
mov edx [ rw-data ]
test edx edx
jne r-xdata
mov [ ebp - 0x4 ] 0x2
cmp [ ebp - 0x80 ] edi
jb r-xdata
mov ecx [ esi + 0x10 ]
mov [ ebp - 0x1c ] ecx
mov edx [ esi + 0x14 ]
mov [ ebp - 0x18 ] edx
mov [ esi + 0x10 ] ebx
mov [ esi + 0x14 ] ebx
jmp r-xdata
mov ecx [ rw-data ]
mov edi [ ebp - 0xbc ]
mov ebx [ ebp - 0xd0 ]
mov edx ebx
cmp edi 0x10
jae r-xdata
mov eax [ rw-data ]
movzx esi [ eax + 0x1 ]
mov bl [ eax ]
lea eax [ esi + 0x1 ]
push eax
call sub_10009900
add esp 0x4
mov edi eax
xor ecx ecx
mov [ edi + esi ] 0x0
test esi esi
je r-xdata
mov cl [ ecx ]
xor eax eax
cmp [ edx ] cl
jne r-xdata
lea edx [ ebp - 0xd0 ]
push edi
push rw-data
call [ InterlockedExchange@IAT ]
lea ecx [ ecx ]
mov ecx [ ebp + 0x28 ]
lea edx [ ecx + ecx ]
xor ecx ecx
cmp edx eax
sete cl
mov [ ebp - 0x4 ] 0x2
mov esi ecx
cmp edi 0x10
jb r-xdata
inc eax
cmp [ eax + edx ] cl
je r-xdata
mov edx [ rw-data ]
mov al [ ecx + edx + 0x3 ]
xor al bl
mov [ ecx + edi ] al
inc ecx
cmp ecx esi
jb r-xdata
test esi esi
je r-xdata
push ebx
call sub_100098f5
add esp 0x4
mov esi [ ebp - 0xb4 ]
lea edi [ ebp - 0x2c ]
call sub_10001e40
mov eax 0x1
mov edi 0x10
mov [ ebp - 0x4 ] al
mov [ ebp - 0xb0 ] eax
cmp [ ebp - 0x18 ] edi
jb r-xdata
inc [ ebp - 0x9c ]
mov ebx [ ebp - 0xa4 ]
jmp r-xdata
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] 0x0
mov [ ebp - 0x2c ] 0x0
cmp [ ebp + 0x20 ] edi
jb r-xdata
mov edx [ ebp - 0x2c ]
push edx
call sub_100098f5
add esp 0x4
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn 0x28
mov eax [ ebp + 0xc ]
push eax
call sub_100098f5
add esp 0x4
sub_10003200
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi eax
push edi
mov eax 0x8
call sub_10006990
mov ebx eax
mov eax 0x6
call sub_10006990
mov edi eax
mov eax 0x9
call sub_10006990
mov [ ebp - 0x4 ] eax
mov edi edi
mov ecx esi
cmp esi eax
je r-xdata
push edi
push esi
call sub_1000a0c0
add esp 0x8
test eax eax
je r-xdata
lea esi [ eax + 0x1 ]
mov al [ esi ]
cmp al [ edi ]
jne r-xdata
mov edx [ ebp - 0x4 ]
mov dl [ edx ]
mov cl [ esi ]
mov eax esi
test cl cl
je r-xdata
push ebx
push esi
call sub_1000a0c0
add esp 0x8
test eax eax
jne r-xdata
inc esi
jmp r-xdata
mov eax esi
inc ecx
cmp ecx eax
jne r-xdata
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov edx [ ebp - 0x4 ]
mov dl [ edx ]
lea esp [ esp ]
cmp [ ecx ] dl
jne r-xdata
mov cl [ eax + 0x1 ]
inc eax
test cl cl
jne r-xdata
cmp cl dl
jne r-xdata
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_100032a0
push ebp
mov ebp esp
push 0xffffffff
push sub_10013b5e
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edx [ ebp + 0x8 ]
mov eax [ edx + 0x40 ]
mov edi [ eax ]
test ecx ecx
je r-xdata
cmp edi [ edx + 0x40 ]
je r-xdata
mov eax ecx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ edi + 0x4 ]
mov ecx [ edi ]
mov [ eax ] ecx
mov edx [ edi ]
mov eax [ edi + 0x4 ]
lea esi [ edi + 0x8 ]
mov [ edx + 0x4 ] eax
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
lea ebx [ esi + 0x40 ]
mov [ ebp - 0x14 ] ebx
mov ecx ebx
mov [ ebp - 0x4 ] 0x2
call sub_10003a20
mov [ ebp - 0x4 ] 0x1
mov ebx [ ebx ]
push ebx
call sub_100098f5
mov ebx 0x10
add esp 0x4
mov [ ebp - 0x4 ] 0x0
cmp [ esi + 0x38 ] ebx
jb r-xdata
dec eax
mov edi [ edi ]
jne r-xdata
mov [ esi + 0x38 ] 0xf
mov [ esi + 0x34 ] 0x0
mov [ esi + 0x24 ] 0x0
mov [ ebp - 0x4 ] 0xffffffff
cmp [ esi + 0x18 ] ebx
jb r-xdata
mov eax [ esi + 0x24 ]
push eax
call sub_100098f5
add esp 0x4
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] 0x0
push edi
mov [ esi + 0x4 ] 0x0
call sub_100098f5
mov eax [ ebp + 0x8 ]
add esp 0x4
dec [ eax + 0x44 ]
mov ecx [ esi + 0x4 ]
push ecx
call sub_100098f5
add esp 0x4
sub_100033a0
push ebp
mov ebp esp
push 0xffffffff
push sub_10013b5e
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
xor ebx ebx
mov [ ebp - 0x4 ] ebx
lea edi [ esi + 0x40 ]
mov [ ebp - 0x14 ] edi
mov ecx edi
mov [ ebp - 0x4 ] 0x2
call sub_10003a20
mov [ ebp - 0x4 ] 0x1
mov edi [ edi ]
push edi
call sub_100098f5
mov edi 0x10
add esp 0x4
mov [ ebp - 0x4 ] bl
cmp [ esi + 0x38 ] edi
jb r-xdata
mov [ esi + 0x38 ] 0xf
mov [ esi + 0x34 ] ebx
mov [ esi + 0x24 ] bl
mov [ ebp - 0x4 ] 0xffffffff
cmp [ esi + 0x18 ] edi
jb r-xdata
mov eax [ esi + 0x24 ]
push eax
call sub_100098f5
add esp 0x4
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] ebx
mov [ esi + 0x4 ] bl
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ esi + 0x4 ]
push eax
call sub_100098f5
add esp 0x4
sub_10003460
push ebp
mov ebp esp
push 0xffffffff
push sub_10013e09
mov eax [ fs : 0x0 ]
push eax
sub esp 0x44
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0xc ]
mov esi [ ebp + 0x8 ]
xor edi edi
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x3c ] eax
lea eax [ edi + 0x4 ]
mov [ ebp - 0x30 ] ecx
mov [ ebp - 0x50 ] esi
mov [ ebp - 0x4c ] edi
call sub_10006990
mov [ ebp - 0x40 ] eax
lea eax [ edi + 0x5 ]
call sub_10006990
mov ebx eax
lea eax [ edi + 0x6 ]
call sub_10006990
mov [ ebp - 0x34 ] eax
lea eax [ edi + 0x7 ]
call sub_10006990
mov [ ebp - 0x44 ] eax
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] edi
mov eax r--data
mov [ esi ] 0x0
call sub_10001f40
mov ecx [ ebp - 0x30 ]
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x4c ] 0x1
cmp [ ecx + 0x20 ] edi
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov edx ecx
mov edi [ edx + 0x18 ]
cmp edi 0x10
jb r-xdata
mov edi [ ebp - 0x30 ]
mov eax edi
call sub_10002590
mov [ ebp - 0x38 ] 0x0
test eax eax
je r-xdata
mov eax ecx
add eax 0x4
cmp [ eax + 0x14 ] 0x10
jb r-xdata
lea eax [ edx + 0x4 ]
mov eax [ edx + 0x4 ]
jmp r-xdata
cmp [ edi + 0x44 ] 0x0
jbe r-xdata
cmp [ edi + 0x44 ] 0x0
jbe r-xdata
mov ecx eax
lea edi [ ecx + 0x1 ]
mov eax [ eax ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax [ ebp - 0x34 ]
je r-xdata
lea ecx [ eax + 0x1 ]
mov [ ebp - 0x34 ] ecx
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn 0xc
mov ecx [ ebp - 0x3c ]
inc ecx
mov [ ebp - 0x34 ] ecx
mov edx [ ebp - 0x3c ]
inc edx
mov [ ebp - 0x34 ] edx
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
push ecx
mov ecx esi
call sub_10003bc0
mov eax ebx
lea ecx [ eax + 0x1 ]
lea esp [ esp ]
mov eax edx
add eax 0x24
cmp [ eax + 0x14 ] 0x10
jb r-xdata
cmp edi 0x10
jb r-xdata
mov ebx [ ebp - 0x40 ]
add eax 0x8
cmp [ ebp - 0x3c ] 0x0
mov [ ebp - 0x48 ] eax
jle r-xdata
lea ecx [ ecx ]
add eax 0x8
mov [ ebp - 0x44 ] eax
test edx edx
jne r-xdata
mov ecx edx
mov edi edi
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
push eax
mov eax ebx
mov ecx esi
call sub_10003bc0
mov edx [ ebp - 0x34 ]
mov eax edx
lea ebx [ eax + 0x1 ]
jmp r-xdata
mov ecx eax
lea edi [ ecx + 0x1 ]
mov eax [ eax ]
lea eax [ edx + 0x4 ]
mov eax [ edx + 0x4 ]
jmp r-xdata
mov eax ebx
lea edx [ eax + 0x1 ]
jmp r-xdata
mov edi [ ebp - 0x3c ]
dec ecx
mov eax [ eax ]
jne r-xdata
cmp [ ebp - 0x3c ] 0x0
mov ebx [ ebp - 0x40 ]
jle r-xdata
cmp [ ebp + 0x10 ] edx
jne r-xdata
dec ecx
mov eax [ eax ]
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
push ecx
mov ecx esi
call sub_10003bc0
jmp r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
push ecx
mov ecx esi
call sub_10003bc0
mov eax ebx
lea ecx [ eax + 0x1 ]
mov ecx eax
lea edi [ ecx + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
mov eax ebx
mov ecx esi
call sub_10003bc0
dec edi
jne r-xdata
mov eax ebx
lea edx [ eax + 0x1 ]
mov edi [ ebp - 0x3c ]
mov ecx [ ebp - 0x34 ]
push 0x0
push ecx
mov ecx [ ebp - 0x44 ]
lea edx [ ebp - 0x2c ]
push edx
call sub_10003460
push 0x0
push eax
or eax 0xffffffff
mov edi esi
mov [ ebp - 0x4 ] 0x1
call sub_10003b20
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
sub eax ebx
push eax
mov eax edx
mov ecx esi
call sub_10003bc0
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
push eax
mov eax ebx
mov ecx esi
call sub_10003bc0
mov eax [ ebp - 0x30 ]
add eax 0x24
cmp [ eax + 0x14 ] 0x10
jb r-xdata
sub eax edx
push eax
mov eax ebx
mov ecx esi
call sub_10003bc0
mov edi [ ebp - 0x44 ]
mov eax edi
lea ecx [ eax + 0x1 ]
jmp r-xdata
mov eax ebx
lea edx [ eax + 0x1 ]
lea esp [ esp ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
mov eax ebx
mov ecx esi
call sub_10003bc0
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
mov eax ebx
mov ecx esi
call sub_10003bc0
dec edi
jne r-xdata
mov ebx [ ebp - 0x30 ]
mov eax [ ebx + 0x44 ]
mov edi [ ebp - 0x38 ]
dec eax
cmp edi eax
je r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_100098f5
add esp 0x4
mov ecx eax
lea edi [ ecx + 0x1 ]
lea esp [ esp ]
mov eax [ eax ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
mov eax ebx
lea edx [ eax + 0x1 ]
inc edi
mov [ ebp - 0x38 ] edi
cmp edi [ ebx + 0x44 ]
jb r-xdata
push 0x1
mov eax r--data
mov ecx esi
call sub_10003bc0
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
push ecx
mov ecx esi
call sub_10003bc0
jmp r-xdata
sub eax ecx
push eax
mov eax edi
mov ecx esi
call sub_10003bc0
mov edi [ ebp - 0x48 ]
mov eax edi
call sub_10002590
push eax
mov eax [ ebp - 0x34 ]
push eax
lea ecx [ ebp - 0x2c ]
push ecx
mov ecx edi
call sub_10003460
push 0x0
push eax
or eax 0xffffffff
mov edi esi
mov [ ebp - 0x4 ] 0x2
call sub_10003b20
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
mov eax [ ebp - 0x30 ]
mov edx [ ebp - 0x38 ]
mov eax [ eax + 0x40 ]
mov eax [ eax ]
test edx edx
je r-xdata
jmp r-xdata
mov ebx [ ebp - 0x30 ]
mov eax [ ebx + 0x44 ]
mov edi [ ebp - 0x38 ]
dec eax
cmp edi eax
je r-xdata
mov edx [ ebp - 0x2c ]
push edx
call sub_100098f5
add esp 0x4
inc edi
mov [ ebp - 0x38 ] edi
cmp edi [ ebx + 0x44 ]
jb r-xdata
push 0x1
mov eax r--data
mov ecx esi
call sub_10003bc0
mov edx [ ebp - 0x30 ]
mov ecx [ ebp - 0x38 ]
mov eax [ edx + 0x40 ]
mov eax [ eax ]
test ecx ecx
je r-xdata
sub_10003830
push ebp
mov ebp esp
push 0xffffffff
push sub_10014208
mov eax [ fs : 0x0 ]
push eax
sub esp 0x54
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x60 ] eax
lea esi [ ebx + 0x24 ]
xor edi edi
mov eax r--data
call sub_10001f40
mov ecx [ ebp - 0x60 ]
push ecx
lea edx [ ebp - 0x5c ]
push edx
mov [ ebx + 0x20 ] 0x1
call sub_10002600
mov [ ebp - 0x4 ] edi
mov esi [ ebx + 0x40 ]
push eax
mov eax [ esi + 0x4 ]
push eax
push esi
call sub_10003ee0
mov ecx [ ebx + 0x44 ]
mov edx 0x35e50d6
sub edx ecx
cmp edx 0x1
jae r-xdata
inc ecx
mov [ ebx + 0x44 ] ecx
mov [ esi + 0x4 ] eax
mov ecx [ eax + 0x4 ]
mov [ ecx ] eax
lea ecx [ ebp - 0x5c ]
mov [ ebp - 0x4 ] 0xffffffff
call sub_100033a0
mov ecx [ ebx + 0x44 ]
dec ecx
mov eax [ ebx + 0x40 ]
mov eax [ eax ]
je r-xdata
push r--data
call sub_1001258a
add eax 0x8
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn 0x4
dec ecx
mov eax [ eax ]
jne r-xdata
sub_10003900
cmp esi edi
je r-xdata
mov eax esi
retn
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
mov [ esi ] 0x0
cmp [ edi + 0x14 ] 0x10
jae r-xdata
mov eax [ esi ]
push eax
call sub_100098f5
add esp 0x4
mov edx [ edi ]
mov [ esi ] edx
mov [ edi ] 0x0
mov ecx [ edi + 0x10 ]
inc ecx
push ecx
push edi
push esi
call sub_10009c90
add esp 0xc
jmp r-xdata
mov eax [ edi + 0x10 ]
mov [ esi + 0x10 ] eax
mov ecx [ edi + 0x14 ]
mov [ esi + 0x14 ] ecx
mov [ edi + 0x10 ] 0x0
mov [ edi + 0x14 ] 0x0
sub_10003970
push ebp
mov ebp esp
push 0xffffffff
push sub_10013908
mov eax [ fs : 0x0 ]
push eax
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
mov ecx esi
mov [ ebp - 0x4 ] 0x0
call sub_10003a20
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ esi ]
push eax
call sub_100098f5
add esp 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
sub_100039d0
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi ]
mov [ ebp + 0x8 ] eax
cmp esi [ edi ]
je r-xdata
mov [ ebx ] eax
mov eax ebx
pop esi
pop ebp
retn 0x4
mov eax [ esi + 0x4 ]
mov ecx [ esi ]
mov [ eax ] ecx
mov edx [ esi ]
mov eax [ esi + 0x4 ]
lea ecx [ esi + 0x8 ]
mov [ edx + 0x4 ] eax
call sub_100033a0
push esi
call sub_100098f5
mov ecx [ ebp + 0x8 ]
add esp 0x4
dec [ edi + 0x4 ]
mov [ ebx ] ecx
mov eax ebx
pop esi
pop ebp
retn 0x4
sub_10003a20
push ebp
mov ebp esp
push 0xffffffff
push sub_10013b1e
mov eax [ fs : 0x0 ]
push eax
sub esp 0x10
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x14 ] ecx
mov eax [ ecx ]
mov edi [ eax ]
mov [ eax ] eax
mov eax [ ecx ]
mov [ eax + 0x4 ] eax
mov [ ecx + 0x4 ] 0x0
cmp edi [ ecx ]
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ edi ]
lea esi [ edi + 0x8 ]
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x18 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
lea ebx [ esi + 0x40 ]
mov [ ebp - 0x1c ] ebx
mov ecx ebx
mov [ ebp - 0x4 ] 0x2
call sub_10003a20
mov [ ebp - 0x4 ] 0x1
mov ebx [ ebx ]
push ebx
call sub_100098f5
mov ebx 0x10
add esp 0x4
mov [ ebp - 0x4 ] 0x0
cmp [ esi + 0x38 ] ebx
jb r-xdata
mov [ esi + 0x38 ] 0xf
mov [ esi + 0x34 ] 0x0
mov [ esi + 0x24 ] 0x0
mov [ ebp - 0x4 ] 0xffffffff
cmp [ esi + 0x18 ] ebx
jb r-xdata
mov eax [ esi + 0x24 ]
push eax
call sub_100098f5
add esp 0x4
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] 0x0
push edi
mov [ esi + 0x4 ] 0x0
call sub_100098f5
mov edi [ ebp - 0x10 ]
mov edx [ ebp - 0x14 ]
add esp 0x4
cmp edi [ edx ]
jne r-xdata
mov ecx [ esi + 0x4 ]
push ecx
call sub_100098f5
add esp 0x4
sub_10003b20
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
push ebx
mov ebx eax
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x10 ]
cmp eax ecx
jae r-xdata
sub eax ecx
cmp eax ebx
jae r-xdata
push r--data
call sub_100125d7
mov eax [ edi + 0x10 ]
or ecx 0xffffffff
sub ecx eax
cmp ecx ebx
ja r-xdata
mov ebx eax
test ebx ebx
je r-xdata
push r--data
call sub_1001258a
mov eax edi
pop ebx
pop ebp
retn 0x8
push esi
lea esi [ eax + ebx ]
mov eax edi
call sub_10002100
test al al
je r-xdata
pop esi
mov ecx [ ebp + 0x8 ]
mov eax 0x10
cmp [ ecx + 0x14 ] eax
jb r-xdata
cmp [ edi + 0x14 ] eax
jb r-xdata
mov ecx [ ecx ]
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
mov [ eax + esi ] 0x0
mov eax [ edi ]
mov [ eax + esi ] 0x0
pop esi
mov eax edi
pop ebx
pop ebp
retn 0x8
add ecx [ ebp + 0xc ]
push ebx
push ecx
mov ecx [ edi + 0x10 ]
add ecx eax
push ecx
call sub_10010060
add esp 0xc
cmp [ edi + 0x14 ] 0x10
mov [ edi + 0x10 ] esi
jb r-xdata
sub_10003bc0
push ebp
mov ebp esp
push ebx
mov ebx eax
push edi
mov edi ecx
test ebx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
push esi
mov esi [ edi + 0x10 ]
or ecx 0xffffffff
sub ecx esi
cmp ecx eax
ja r-xdata
mov ecx [ edi + 0x14 ]
cmp ecx 0x10
jb r-xdata
test eax eax
je r-xdata
push r--data
call sub_1001258a
mov eax edi
mov eax [ edi ]
jmp r-xdata
pop esi
mov eax edi
pop edi
pop ebx
pop ebp
retn 0x4
add esi eax
mov eax edi
call sub_10002100
test al al
je r-xdata
cmp ecx 0x10
jb r-xdata
cmp ebx eax
jb r-xdata
cmp [ edi + 0x14 ] 0x10
jb r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
cmp ecx 0x10
jb r-xdata
mov edx [ edi + 0x10 ]
add edx eax
cmp edx ebx
jbe r-xdata
mov eax edi
mov [ eax + esi ] 0x0
mov eax [ edi ]
mov [ eax + esi ] 0x0
pop esi
mov eax edi
pop edi
pop ebx
pop ebp
retn 0x4
mov edx [ ebp + 0x8 ]
mov ecx [ edi + 0x10 ]
push edx
add ecx eax
push ebx
push ecx
call sub_10010060
add esp 0xc
cmp [ edi + 0x14 ] 0x10
mov [ edi + 0x10 ] esi
jb r-xdata
mov eax edi
sub ebx eax
mov eax [ ebp + 0x8 ]
push ebx
push edi
call sub_10003b20
pop edi
pop ebx
pop ebp
retn 0x4
mov eax [ edi ]
sub ebx eax
mov eax [ ebp + 0x8 ]
push ebx
push edi
call sub_10003b20
pop edi
pop ebx
pop ebp
retn 0x4
sub_10003ca0
push ebp
mov ebp esp
push 0xffffffff
push sub_10013db6
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov edi [ ebp + 0x8 ]
lea ecx [ esi + 0x4 ]
mov [ esi ] r--data
lea eax [ edi + 0x4 ]
push eax
mov [ ecx + 0x14 ] 0xf
mov [ ecx + 0x10 ] 0x0
or eax 0xffffffff
xor ebx ebx
mov [ ecx ] 0x0
call sub_10002020
xor eax eax
mov [ ebp - 0x4 ] eax
mov ecx [ edi + 0x20 ]
mov [ esi + 0x20 ] ecx
lea ecx [ esi + 0x24 ]
mov [ ecx + 0x10 ] eax
mov [ ecx + 0x14 ] 0xf
lea edx [ edi + 0x24 ]
mov [ ecx ] al
push edx
or eax 0xffffffff
call sub_10002020
add edi 0x40
push edi
lea eax [ esi + 0x40 ]
push eax
mov [ ebp - 0x4 ] 0x1
call sub_10003d50
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_10003d50
push ebp
mov ebp esp
push 0xffffffff
push sub_10013d78
mov eax [ fs : 0x0 ]
push eax
sub esp 0x14
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
xor edi edi
push 0x54
mov [ esi + 0x4 ] edi
call sub_10009900
add esp 0x4
cmp eax edi
je r-xdata
lea ecx [ ebp - 0x14 ]
push ecx
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x14 ] edi
call sub_10009bcf
push r--data
lea edx [ ebp - 0x20 ]
push edx
mov [ ebp - 0x20 ] r--data
call sub_1000acc0
int3
mov [ esi ] eax
mov [ eax ] eax
mov eax [ esi ]
mov [ eax + 0x4 ] eax
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x4 ] 0x1
mov eax [ esi ]
mov ecx [ eax ]
mov eax [ ebp + 0xc ]
mov eax [ eax ]
mov edi [ ebp + 0x8 ]
mov edx [ eax ]
push edi
push eax
push edx
push ecx
push esi
call sub_10003e10
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
sub_10003e10
push ebp
mov ebp esp
push 0xffffffff
push sub_10013d50
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov edi [ ebp + 0x8 ]
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x4 ] 0x0
jmp r-xdata
cmp eax [ ebp + 0x14 ]
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x14
mov ecx [ ebp + 0xc ]
add eax 0x8
push eax
mov eax [ ecx + 0x4 ]
lea esi [ ecx + 0x4 ]
push eax
push ecx
call sub_10003ee0
mov ecx [ edi + 0x4 ]
mov edx 0x35e50d6
sub edx ecx
cmp edx 0x1
jae r-xdata
inc ecx
mov [ edi + 0x4 ] ecx
mov [ esi ] eax
mov ecx [ eax + 0x4 ]
mov [ ecx ] eax
mov edx [ ebp + 0x10 ]
mov eax [ edx ]
mov [ ebp + 0x10 ] eax
jmp r-xdata
push r--data
call sub_1001258a
sub_10003e97
mov esi [ ebp - 0x14 ]
cmp esi [ ebp + 0x10 ]
je r-xdata
push 0x0
push 0x0
call sub_1000acc0
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x14
mov edi [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
mov eax [ eax + 0x4 ]
push eax
lea ebx [ ebp + 0x8 ]
call sub_100039d0
mov esi [ esi ]
cmp esi [ ebp + 0x10 ]
jne r-xdata
sub_10003ee0
push ebp
mov ebp esp
push 0xffffffff
push sub_100138c5
mov eax [ fs : 0x0 ]
push eax
sub esp 0x14
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
push 0x54
call sub_10009900
mov esi eax
add esp 0x4
mov [ ebp - 0x14 ] esi
test esi esi
je r-xdata
lea ecx [ ebp + 0x8 ]
push ecx
lea ecx [ ebp - 0x20 ]
mov [ ebp + 0x8 ] 0x0
call sub_10009bcf
push r--data
lea edx [ ebp - 0x20 ]
push edx
mov [ ebp - 0x20 ] r--data
call sub_1000acc0
int3
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x4 ] 0x0
mov eax [ ebp + 0x8 ]
mov [ esi + 0x4 ] ecx
mov [ esi ] eax
lea ecx [ esi + 0x8 ]
mov [ ebp - 0x4 ] 0x1
test ecx ecx
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov edx [ ebp + 0x10 ]
push edx
call sub_10003ca0
sub_10003fb0
push ebp
mov ebp esp
push ecx
mov eax 0xc
mov [ ebp - 0x4 ] ecx
call sub_10006990
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
push ebx
sub eax edx
push esi
mov esi eax
push edi
mov eax 0xd
call sub_10006990
lea edx [ eax + 0x1 ]
nop
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov ebx [ ebp + 0xc ]
sub eax edx
lea eax [ eax + ebx * 2 ]
lea ecx [ eax + esi + 0x1 ]
push ecx
call sub_10009ff1
mov esi eax
add esp 0x4
mov eax 0xc
mov [ ebp + 0xc ] esi
call sub_10006990
mov edx esi
sub edx eax
nop
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
mov eax esi
lea edx [ eax + 0x1 ]
nop
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
add esi eax
xor ecx ecx
test ebx ebx
je r-xdata
mov eax 0xd
call sub_10006990
sub esi eax
mov edi [ ebp + 0x8 ]
mov cl [ eax ]
mov [ esi + eax ] cl
inc eax
test cl cl
jne r-xdata
mov eax [ ebp - 0x4 ]
mov ebx [ eax + 0x4 ]
mov eax [ ebp + 0xc ]
lea edx [ eax + 0x1 ]
lea esp [ esp ]
lea edx [ eax - 0xa ]
cmp dl 0x5
ja r-xdata
add al 0x30
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov edi eax
mov eax [ ebp + 0xc ]
lea esi [ ebx + 0x24 ]
call sub_10001f40
lea ecx [ ebx + 0x40 ]
call sub_10003a20
mov ecx [ ebp + 0xc ]
push ecx
mov [ ebx + 0x20 ] 0x0
call sub_1000a366
add esp 0x4
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
xor al al
add al 0x57
jmp r-xdata
mov [ esi ] al
mov al [ ecx + edi ]
and al 0xf
cmp al 0x9
ja r-xdata
lea edx [ eax - 0xa ]
cmp dl 0x5
ja r-xdata
add al 0x30
jmp r-xdata
xor al al
add al 0x57
jmp r-xdata
mov [ esi + 0x1 ] al
inc ecx
add esi 0x2
cmp ecx ebx
jb r-xdata
mov al [ ecx + edi ]
sar al 0x4
and al 0xf
cmp al 0x9
ja r-xdata
sub_100040e0
push ebp
mov ebp esp
push ecx
mov eax [ ecx + 0x4 ]
push ebx
add eax 0x24
cmp [ eax + 0x14 ] 0x10
push esi
push edi
jb r-xdata
mov [ ebp - 0x4 ] eax
mov edi eax
mov edi [ eax ]
mov [ ebp - 0x4 ] edi
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov ebx eax
mov eax 0xc
call sub_10006990
lea edx [ eax + 0x1 ]
lea esp [ esp ]
mov eax edi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov esi eax
mov eax 0xd
call sub_10006990
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
add eax esi
cmp ebx eax
jae r-xdata
mov eax 0xc
call sub_10006990
lea edx [ eax + 0x1 ]
lea ecx [ ecx ]
pop edi
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov esi eax
mov eax 0xc
call sub_10006990
push esi
push eax
push edi
call sub_1000a2fd
add esp 0xc
test eax eax
jne r-xdata
mov eax 0xd
call sub_10006990
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov ebx eax
mov eax edi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov esi eax
mov eax 0xd
call sub_10006990
lea edx [ eax + 0x1 ]
lea esp [ esp ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov edi eax
mov eax 0xd
call sub_10006990
push ebx
sub esi edi
add esi [ ebp - 0x4 ]
push eax
push esi
call sub_1000a2fd
add esp 0xc
neg eax
pop edi
sbb eax eax
pop esi
inc eax
pop ebx
mov esp ebp
pop ebp
retn
sub_10004200
push ebp
mov ebp esp
push ecx
mov eax [ ecx + 0x4 ]
push ebx
mov ebx [ eax + 0x44 ]
push esi
push edi
xor edi edi
test ebx ebx
je r-xdata
pop edi
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ eax + 0x40 ]
mov ecx [ eax ]
mov [ ebp - 0x4 ] ecx
jmp r-xdata
mov eax [ ebp - 0x4 ]
test edi edi
je r-xdata
lea esi [ eax + 0x8 ]
cmp [ esi + 0x18 ] 0x10
lea eax [ esi + 0x4 ]
jb r-xdata
mov ecx edi
lea esp [ esp ]
mov ecx [ ebp + 0x8 ]
mov eax [ eax ]
dec ecx
mov eax [ eax ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test dl dl
je r-xdata
push 0x8
call sub_10009900
add esp 0x4
test eax eax
je r-xdata
inc edi
cmp edi ebx
jb r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
cmp dl [ ecx + 0x1 ]
jne r-xdata
pop edi
mov [ eax + 0x4 ] esi
pop esi
mov [ eax ] r--data
pop ebx
mov esp ebp
pop ebp
retn 0x4
test eax eax
je r-xdata
add eax 0x2
add ecx 0x2
test dl dl
jne r-xdata
mov dl [ eax ]
cmp dl [ ecx ]
jne r-xdata
sub_100042a0
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov edx eax
push edi
lea esi [ edx + 0x1 ]
mov edi edi
mov bl [ edx ]
inc edx
test bl bl
jne r-xdata
sub edx esi
mov esi [ ecx + 0x4 ]
add esi 0x4
mov edi edx
call sub_10001f40
pop edi
pop esi
pop ebx
pop ebp
retn 0x4
sub_100042d0
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100098f5
add esp 0x4
sub_10004300
push ebp
mov ebp esp
push 0xffffffff
push sub_1001453b
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
push 0x8
call sub_10009900
mov esi eax
add esp 0x4
mov [ ebp - 0x10 ] esi
xor eax eax
mov [ ebp - 0x4 ] eax
cmp esi eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov ebx [ edi + 0x4 ]
push r--data
call sub_10003830
mov [ esi + 0x4 ] eax
mov [ esi ] r--data
mov eax esi
sub_100043a0
push ebp
mov ebp esp
push esi
push 0x8
mov esi ecx
call sub_10009900
add esp 0x4
test eax eax
je r-xdata
xor eax eax
pop esi
pop ebp
retn 0x4
mov ecx [ esi + 0x4 ]
mov edx [ ecx + 0x40 ]
mov ecx [ edx ]
mov edx [ ebp + 0x8 ]
test edx edx
je r-xdata
add ecx 0x8
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
pop esi
pop ebp
retn 0x4
dec edx
mov ecx [ ecx ]
jne r-xdata
sub_100043e0
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0xc ]
mov [ eax ] 0x0
push esi
mov esi ecx
mov [ ebx ] 0x0
mov edx [ esi ]
mov eax [ edx + 0x44 ]
call eax
test eax eax
je r-xdata
pop esi
pop ebx
pop ebp
retn 0x8
mov esi [ esi + 0x4 ]
add esi 0x24
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov eax 0xc
call sub_10006990
lea edx [ eax + 0x1 ]
mov esi [ esi ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push edi
lea edi [ eax + esi ]
mov eax edi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov esi eax
mov eax 0xd
call sub_10006990
lea edx [ eax + 0x1 ]
lea ecx [ ecx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
sub esi eax
mov eax esi
test al 0x1
jne r-xdata
pop edi
shr eax 0x1
push eax
mov [ ebx ] eax
call sub_10009ff1
mov ecx [ ebp + 0x8 ]
xor esi esi
add esp 0x4
mov [ ecx ] eax
cmp [ ebx ] esi
jbe r-xdata
lea ecx [ ecx ]
mov al [ edi + esi * 2 + 0x1 ]
lea edx [ eax - 0x30 ]
cmp dl 0x9
ja r-xdata
lea edx [ eax - 0x61 ]
cmp dl 0x5
ja r-xdata
lea edx [ eax - 0x61 ]
cmp dl 0x5
ja r-xdata
mov al dl
jmp r-xdata
lea ecx [ eax - 0x41 ]
cmp cl 0x5
ja r-xdata
sub al 0x57
mov cl al
jmp r-xdata
lea edx [ eax - 0x41 ]
cmp dl 0x5
ja r-xdata
sub al 0x57
jmp r-xdata
shl cl 0x4
or cl al
mov eax [ ebp + 0x8 ]
mov edx [ eax ]
mov [ esi + edx ] cl
inc esi
cmp esi [ ebx ]
jb r-xdata
xor cl cl
sub al 0x37
mov cl al
jmp r-xdata
xor al al
sub al 0x37
jmp r-xdata
mov al [ edi + esi * 2 ]
lea ecx [ eax - 0x30 ]
cmp cl 0x9
jbe r-xdata
sub_100044f0
push ebx
mov ebx [ ecx + 0x4 ]
push esi
push edi
lea ecx [ ebx + 0x40 ]
call sub_10003a20
lea esi [ ebx + 0x24 ]
xor edi edi
mov eax r--data
call sub_10001f40
pop edi
pop esi
mov [ ebx + 0x20 ] 0x1
pop ebx
retn
sub_10004520
push esi
push edi
mov edi [ ecx + 0x4 ]
add edi 0x24
cmp [ edi + 0x14 ] 0x10
jb r-xdata
mov eax edi
lea edx [ eax + 0x1 ]
mov edi [ edi ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
inc eax
push eax
call sub_10009ff1
mov esi eax
add esp 0x4
mov ecx edi
sub esi edi
mov edi edi
mov dl [ ecx ]
mov [ esi + ecx ] dl
inc ecx
test dl dl
jne r-xdata
pop edi
pop esi
retn
sub_10004560
push ebx
mov ebx [ ecx + 0x4 ]
push esi
push edi
lea ecx [ ebx + 0x40 ]
call sub_10003a20
lea esi [ ebx + 0x24 ]
xor edi edi
mov eax r--data
call sub_10001f40
mov [ ebx + 0x20 ] edi
pop edi
pop esi
pop ebx
retn
sub_10004590
push ebp
mov ebp esp
sub esp 0x9f4
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov eax 0xe
mov esi ecx
call sub_10006990
mov ecx [ ebp + 0x8 ]
push ecx
push eax
lea edx [ ebp - 0x9f4 ]
push edx
call sub_1000a197
mov ebx [ esi + 0x4 ]
lea eax [ ebp - 0x9f4 ]
add esp 0xc
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov edi eax
lea esi [ ebx + 0x24 ]
lea eax [ ebp - 0x9f4 ]
call sub_10001f40
lea ecx [ ebx + 0x40 ]
call sub_10003a20
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
mov [ ebx + 0x20 ] 0x0
xor ecx ebp
pop ebx
call sub_100098bc
mov esp ebp
pop ebp
retn 0x4
sub_10004620
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ ecx + 0x4 ]
push esi
mov ecx eax
push edi
lea esi [ ecx + 0x1 ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx esi
lea esi [ ebx + 0x24 ]
mov edi ecx
call sub_10001f40
lea ecx [ ebx + 0x40 ]
call sub_10003a20
pop edi
pop esi
mov [ ebx + 0x20 ] 0x0
pop ebx
pop ebp
retn 0x4
ADB_Load
push ebp
mov ebp esp
push 0xffffffff
push sub_100141db
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x8c
call sub_10009900
add esp 0x4
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
xor esi esi
mov ecx [ ebp + 0x8 ]
push ecx
push eax
call sub_10005950
mov esi eax
jmp r-xdata
mov edx [ esi ]
mov eax [ edx + 0xc ]
mov ecx esi
call eax
mov edx [ esi ]
mov edi eax
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn 0x4
test esi esi
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
call sub_100057a0
test eax eax
jne r-xdata
xor esi esi
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
sub_10004790
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100098f5
add esp 0x4
sub_100047f0
push ebp
mov ebp esp
sub esp 0x2b8
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov eax 0x10
mov esi ecx
call sub_10006990
mov edi eax
mov eax 0x11
call sub_10006990
mov ebx eax
mov eax [ esi ]
mov edx [ eax + 0x4 ]
mov ecx esi
call edx
push eax
push edi
lea eax [ ebp - 0x2b8 ]
push ebx
push eax
call sub_1000a197
lea eax [ ebp - 0x2b8 ]
add esp 0x10
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
inc eax
push eax
call sub_10009900
lea ecx [ ebp - 0x2b8 ]
mov esi eax
mov edx ecx
add esp 0x4
sub esi edx
mov dl [ ecx ]
mov [ esi + ecx ] dl
inc ecx
test dl dl
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_100098bc
mov esp ebp
pop ebp
retn
sub_10004890
push ebp
mov ebp esp
push 0xffffffff
push sub_100137e8
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x0
mov eax [ esi + 0x10 ]
test eax eax
je r-xdata
test [ ebp + 0x8 ] 0x1
mov [ ebp - 0x4 ] 0xffffffff
mov [ esi ] r--data
je r-xdata
push eax
call sub_100098f5
add esp 0x4
mov [ esi + 0x10 ] 0x0
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_100098f5
add esp 0x4
sub_10004910
push ebp
mov ebp esp
sub esp 0xc98
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_100098bc
mov esp ebp
pop ebp
retn
push 0x647
lea eax [ ebp - 0xc94 ]
push eax
call [ GetSystemDirectoryW@IAT ]
cmp eax 0x3
jb r-xdata
mov eax [ esi + 0x4 ]
xor ecx ecx
push ecx
push ecx
push ecx
push ecx
lea edx [ ebp - 0xc98 ]
push edx
push ecx
push ecx
lea eax [ ebp - 0xc94 ]
push eax
mov [ ebp - 0xc8e ] cx
mov [ ebp - 0xc98 ] ecx
call [ GetVolumeInformationW@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0xc98 ]
mov [ esi + 0x4 ] ecx
sub_10004990
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_100137b8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x10
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x20 ]
mov [ fs : 0x0 ] eax
mov eax 0xf
call sub_10006990
mov esi eax
mov eax [ ebp + 0x8 ]
mov [ esp + 0x10 ] esi
mov [ esp + 0x14 ] r--data
test eax eax
jne r-xdata
mov ecx esi
mov [ esp + 0x28 ] 0x0
lea edi [ ecx + 0x1 ]
mov edi edi
call [ GetTickCount@IAT ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
mov ebx ecx
mov ecx esi
lea esi [ ecx + 0x1 ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
imul eax eax 0x660d
sub ecx esi
lea esi [ eax - 0xca1 ]
and esi 0xffff
xor edx edx
shr ecx 0x3
mov eax esi
div ecx
mov eax 0xcccccccd
mov [ esp + 0x18 ] esi
mov edi edx
mul ebx
shr edx 0x2
add edi edx
lea ebx [ edi + 0x1 ]
push ebx
call sub_10009900
push ebx
push 0x0
push eax
mov [ esp + 0x24 ] eax
call sub_1000f660
add esp 0x10
xor ecx ecx
test edi edi
jle r-xdata
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x20 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ esp + 0x10 ]
lea ebx [ eax + 0x1 ]
lea esp [ esp ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
imul esi esi 0x660d
sub eax ebx
sub esi 0xca1
mov ebx eax
and esi 0xffff
xor edx edx
mov eax esi
div ebx
mov eax [ esp + 0x10 ]
inc ecx
mov dl [ edx + eax ]
mov eax [ esp + 0x14 ]
mov [ ecx + eax - 0x1 ] dl
cmp ecx edi
jl r-xdata
mov ecx [ esp + 0x20 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_10004ae0
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100098f5
add esp 0x4
sub_10004b30
push ebp
mov ebp esp
push ecx
push edi
mov edi eax
xor eax eax
push eax
mov [ edi + 0x10 ] eax
add edx 0x54
mov [ ebp - 0x4 ] eax
xor ecx ecx
mov [ edi + 0x14 ] 0x7
push edx
or eax 0xffffffff
mov [ edi ] cx
call sub_100052b0
mov eax edi
pop edi
mov esp ebp
pop ebp
retn
sub_10004b60
push ebp
mov ebp esp
push ecx
push edi
mov edi eax
xor eax eax
push eax
mov [ edi + 0x10 ] eax
add edx 0x70
mov [ ebp - 0x4 ] eax
xor ecx ecx
mov [ edi + 0x14 ] 0x7
push edx
or eax 0xffffffff
mov [ edi ] cx
call sub_100052b0
mov eax edi
pop edi
mov esp ebp
pop ebp
retn
sub_10004b90
push ebp
mov ebp esp
sub esp 0x8
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi ]
mov edx [ eax + 0x14 ]
push edi
mov [ ebp - 0x8 ] ecx
push 0x0
mov ecx esi
call edx
mov edi eax
mov eax [ esi ]
mov edx [ eax + 0x18 ]
mov ecx esi
call edx
mov esi eax
mov eax 0x13
call sub_10006990
mov [ ebp - 0x4 ] eax
mov eax 0x14
call sub_10006990
mov [ ebp + 0x8 ] eax
test esi esi
je r-xdata
xor eax eax
mov edx esi
lea eax [ edx + 0x1 ]
lea ebx [ ebx ]
mov cl [ edx ]
inc edx
test cl cl
jne r-xdata
mov ecx [ ebp + 0x10 ]
push ecx
mov ecx [ ebp + 0xc ]
push ecx
mov ecx [ ebp - 0x8 ]
push eax
mov eax [ ebp - 0x4 ]
push esi
push eax
push edi
push ecx
mov ecx [ ebp + 0x8 ]
sub edx ebx
call sub_10004cc0
push edi
mov ebx eax
call sub_1000a366
add esp 0x4
test esi esi
je r-xdata
mov cl [ edx ]
inc edx
test cl cl
jne r-xdata
sub edx eax
mov eax edx
jmp r-xdata
pop edi
pop esi
mov eax ebx
pop ebx
mov esp ebp
pop ebp
retn 0xc
push esi
call sub_1000a366
add esp 0x4
mov edx [ ebp + 0x8 ]
lea ebx [ edx + 0x1 ]
sub_10004c40
push ebp
mov ebp esp
push esi
push edi
mov edi ecx
mov ecx [ ebp + 0x8 ]
mov eax [ ecx ]
mov edx [ eax + 0x14 ]
push 0x1
call edx
mov esi eax
mov eax 0x12
call sub_10006990
mov ecx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
push ecx
push edx
push 0x0
push 0x0
push eax
push esi
push edi
xor edx edx
xor ecx ecx
call sub_10004cc0
push esi
mov edi eax
call sub_1000a366
add esp 0x4
mov eax edi
pop edi
pop esi
pop ebp
retn 0xc
sub_10004c90
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100098f5
add esp 0x4
sub_10004cc0
push ebp
mov ebp esp
push 0xffffffff
push sub_10013d1c
mov eax [ fs : 0x0 ]
push eax
mov eax 0x1a4c
call sub_10011e10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x10 ]
mov ebx [ ebp + 0x8 ]
mov esi [ ebp + 0xc ]
mov [ ebp - 0x1a04 ] ecx
mov ecx [ ebp + 0x18 ]
mov [ ebp - 0x19f8 ] eax
mov eax [ ebp + 0x14 ]
push 0x3c
mov [ ebp - 0x1a08 ] ecx
mov [ ebp - 0x1a14 ] edx
mov edx [ ebp + 0x1c ]
mov [ ebp - 0x1a1c ] eax
mov eax [ ebp + 0x20 ]
lea ecx [ ebp - 0x1a58 ]
push 0x0
push ecx
mov [ ebp - 0x1a18 ] edx
mov [ ebp - 0x1a0c ] eax
call sub_1000f660
push 0x4b4
mov [ ebp - 0x1a58 ] 0x3c
mov [ ebp - 0x1a44 ] 0x4b4
call sub_10009ff1
mov edx [ ebp - 0x1a44 ]
push edx
push 0x0
push eax
mov [ ebp - 0x1a48 ] eax
call sub_1000f660
push 0xea5
mov [ ebp - 0x1a28 ] 0xea5
call sub_10009ff1
mov ecx [ ebp - 0x1a28 ]
push ecx
push 0x0
push eax
mov [ ebp - 0x1a2c ] eax
call sub_1000f660
mov eax esi
add esp 0x2c
lea edi [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov edx [ ebx + 0x4 ]
mov edx [ edx + 0x20 ]
lea ecx [ ebp - 0x1a58 ]
push ecx
push __dos_header
sub eax edi
push eax
push esi
call edx
test eax eax
jne r-xdata
mov eax [ ebp - 0x1a40 ]
mov ecx [ ebp - 0x1a48 ]
mov edx [ ebx + 0x4 ]
push 0x0
push 0x0
push 0x3
push 0x0
push 0x0
push eax
mov eax [ ebx + 0x8 ]
push ecx
mov ecx [ edx + 0x1c ]
push eax
call ecx
mov [ ebp - 0x19fc ] eax
test eax eax
jne r-xdata
mov eax [ ebp - 0x1a48 ]
push eax
call sub_1000a366
mov ecx [ ebp - 0x1a2c ]
push ecx
mov edx [ ebx + 0x4 ]
lea eax [ ebp - 0x19ec ]
call sub_10004b30
mov [ ebp - 0x4 ] 0x0
mov edx [ ebx + 0x4 ]
lea eax [ ebp - 0x19d0 ]
call sub_10004b60
mov eax 0x15
mov [ ebp - 0x4 ] 0x1
call sub_10006990
mov edi eax
mov [ ebp - 0x19f0 ] 0x0
lea edx [ eax + 0x1 ]
mov edx [ ebp - 0x1a48 ]
push edx
call sub_1000a366
mov eax [ ebp - 0x1a2c ]
push eax
jmp r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn 0x1c
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
push esi
push edi
call sub_1000a2fd
add esp 0xc
test eax eax
mov eax 0x800000
je r-xdata
call sub_1000a366
add esp 0x8
call [ GetLastError@IAT ]
xor eax eax
jmp r-xdata
mov ecx [ ebx + 0x4 ]
xor edx edx
cmp edx [ ebp - 0x19dc ]
mov ecx [ ecx + 0x14 ]
sbb edx edx
and edx 0x3c0000
push 0x0
add edx 0x40000
or edx eax
mov eax [ ebp - 0x1a2c ]
or edx 0x4000300
push edx
mov edx [ ebp - 0x19f8 ]
push 0x0
push 0x0
push 0x0
push eax
mov eax [ ebp - 0x19fc ]
push edx
push eax
call ecx
mov edx [ ebp - 0x1a48 ]
push edx
mov [ ebp - 0x1a00 ] eax
call sub_1000a366
mov eax [ ebp - 0x1a2c ]
push eax
call sub_1000a366
mov eax edi
add esp 0x8
mov [ ebp - 0x19f8 ] 0x1
lea ecx [ eax + 0x1 ]
lea ebx [ ebx ]
mov eax [ ebp - 0x19f0 ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
push eax
push esi
push edi
call sub_1000a2fd
mov edi [ ebp - 0x1a00 ]
add esp 0xc
test eax eax
jne r-xdata
xor esi esi
mov ecx [ ebx + 0x4 ]
push 0x4
lea edx [ ebp - 0x19f0 ]
push edx
push 0x1f
mov [ ebp - 0x19f0 ] 0xf380
mov eax [ ecx + 0x28 ]
push edi
call eax
xor esi esi
cmp eax esi
jne r-xdata
mov edx [ ebp - 0x1a08 ]
mov eax [ ebp - 0x1a1c ]
mov ecx [ ebx + 0x4 ]
mov ecx [ ecx + 0x10 ]
push edx
mov edx [ ebp - 0x1a14 ]
push eax
mov eax [ ebp - 0x1a04 ]
push edx
push eax
push edi
call ecx
test eax eax
je r-xdata
mov [ ebp - 0x19f0 ] 0xf
jmp r-xdata
call [ GetLastError@IAT ]
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x19f8 ] esi
cmp [ ebp - 0x19dc ] esi
jbe r-xdata
mov edx [ ebx + 0x4 ]
mov eax [ edx + 0x8 ]
push edi
call eax
mov ecx [ ebx + 0x4 ]
mov edx [ ebp - 0x19fc ]
mov eax [ ecx + 0x8 ]
push edx
call eax
mov edi [ ebp - 0x19f8 ]
mov ebx [ ebp - 0x19b4 ]
test edi edi
je r-xdata
mov [ ebp - 0x19f4 ] 0x0
lea ebx [ ebx ]
mov [ ebp - 0x19a0 ] 0xf
mov [ ebp - 0x19a4 ] esi
mov [ ebp - 0x19b4 ] 0x0
cmp [ ebp - 0x19f8 ] 0x0
mov [ ebp - 0x4 ] 0x2
je r-xdata
mov edx [ ebx + 0x4 ]
push esi
lea eax [ ebp - 0x1a10 ]
push eax
lea ecx [ ebp - 0x19f4 ]
push ecx
push 0x20000013
mov [ ebp - 0x19f4 ] esi
mov [ ebp - 0x1a10 ] 0x4
mov edx [ edx + 0x18 ]
push edi
call edx
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0x1
cmp [ ebp - 0x19a0 ] 0x10
jb r-xdata
lea ecx [ esi + 0x1 ]
push ecx
call sub_10009ff1
mov ecx [ ebp - 0x1a18 ]
mov edx [ ebp - 0x1a0c ]
mov [ ecx ] eax
mov [ edx ] esi
mov eax [ ecx ]
add esp 0x4
cmp [ ebp - 0x19a0 ] 0x10
mov [ esi + eax ] 0x0
mov eax ebx
jae r-xdata
mov [ ebp - 0x19f8 ] ecx
mov eax [ ebp - 0x19f4 ]
cmp eax ecx
je r-xdata
cmp [ ebp - 0x19f4 ] 0x197
jne r-xdata
mov esi 0x8
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x19bc ] esi
jb r-xdata
push ebx
call sub_100098f5
add esp 0x4
mov ecx [ ecx ]
push esi
push eax
push ecx
call sub_10010060
add esp 0xc
lea eax [ ebp - 0x19b4 ]
mov esi [ ebp - 0x19a4 ]
mov edi eax
lea eax [ ebp - 0x197c ]
lea esi [ ebp - 0x1998 ]
mov [ ebp - 0x1984 ] 0xf
mov [ ebp - 0x1988 ] ecx
mov [ ebp - 0x1998 ] cl
call sub_10001f40
push 0x0
mov eax esi
push eax
or eax 0xffffffff
lea edi [ ebp - 0x19b4 ]
mov [ ebp - 0x4 ] 0x3
call sub_10003b20
mov [ ebp - 0x4 ] 0x2
cmp [ ebp - 0x1984 ] 0x10
jb r-xdata
mov eax [ ebp - 0x19f0 ]
dec eax
mov [ ebp - 0x19f0 ] eax
cmp eax esi
jle r-xdata
xor eax eax
mov [ ebp - 0x4 ] 0xffffffff
mov [ ebp - 0x19bc ] 0x7
mov [ ebp - 0x19c0 ] 0x0
mov [ ebp - 0x19d0 ] ax
cmp [ ebp - 0x19d8 ] esi
jb r-xdata
mov edx [ ebp - 0x19d0 ]
push edx
call sub_100098f5
add esp 0x4
cmp [ ebp - 0x19f4 ] 0x0
mov edi [ ebp - 0x1a00 ]
mov [ ebp - 0x1984 ] 0xf
mov [ ebp - 0x1988 ] 0x0
mov [ ebp - 0x1998 ] 0x0
jbe r-xdata
mov ecx [ ebp - 0x1998 ]
push ecx
call sub_100098f5
add esp 0x4
mov ecx [ ebp - 0x19dc ]
cmp ecx esi
jbe r-xdata
mov eax edi
mov ecx [ ebp - 0x19ec ]
push ecx
call sub_100098f5
add esp 0x4
jmp r-xdata
mov ecx [ ebp - 0x19c0 ]
cmp ecx esi
jbe r-xdata
cmp [ ebp - 0x19d8 ] 0x8
mov eax [ ebp - 0x19ec ]
jae r-xdata
mov edx [ ebx + 0x4 ]
mov edx [ edx + 0xc ]
lea eax [ ebp - 0x19f4 ]
push eax
push 0x196b
lea ecx [ ebp - 0x197c ]
push ecx
push edi
call edx
xor ecx ecx
cmp eax ecx
je r-xdata
cmp [ ebp - 0x19bc ] 0x8
mov eax [ ebp - 0x19d0 ]
jae r-xdata
mov edx [ ebx + 0x4 ]
push ecx
mov ecx [ edx + 0x28 ]
push eax
mov eax [ ebp - 0x19fc ]
push 0x2b
push eax
call ecx
lea eax [ ebp - 0x19ec ]
mov edx [ ebx + 0x4 ]
push ecx
mov ecx [ edx + 0x28 ]
push eax
mov eax [ ebp - 0x19fc ]
push 0x2c
push eax
call ecx
jmp r-xdata
lea eax [ ebp - 0x19d0 ]
sub_100052b0
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ecx + 0x10 ]
cmp esi ebx
jae r-xdata
sub esi ebx
cmp eax esi
jae r-xdata
push r--data
call sub_100125d7
cmp edi ecx
jne r-xdata
mov esi eax
mov eax edi
call sub_100053e0
test al al
je r-xdata
lea ecx [ esi + ebx ]
or eax 0xffffffff
mov esi edi
call sub_10005360
mov eax ebx
xor ecx ecx
call sub_10005360
pop esi
mov eax edi
pop ebx
pop ebp
retn 0x8
pop esi
mov eax edi
pop ebx
pop ebp
retn 0x8
mov ecx [ ebp + 0x8 ]
mov eax 0x8
cmp [ ecx + 0x14 ] eax
jb r-xdata
cmp [ edi + 0x14 ] eax
jb r-xdata
mov ecx [ ecx ]
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
xor edx edx
mov [ ebx + eax ] dx
mov eax [ edi ]
xor edx edx
mov [ ebx + eax ] dx
pop esi
mov eax edi
pop ebx
pop ebp
retn 0x8
mov edx [ ebp + 0xc ]
lea ebx [ esi + esi ]
push ebx
lea ecx [ ecx + edx * 2 ]
push ecx
push eax
call sub_10010060
add esp 0xc
cmp [ edi + 0x14 ] 0x8
mov [ edi + 0x10 ] esi
jb r-xdata
sub_10005360
push edi
mov edi eax
mov eax [ esi + 0x10 ]
cmp eax ecx
jae r-xdata
sub eax ecx
cmp eax edi
jae r-xdata
push r--data
call sub_100125d7
test edi edi
je r-xdata
mov edi eax
mov eax esi
pop edi
retn
mov edx [ esi + 0x14 ]
push ebx
cmp edx 0x8
jb r-xdata
mov ebx esi
mov ebx [ esi ]
jmp r-xdata
mov edx esi
mov edx [ esi ]
jmp r-xdata
cmp edx 0x8
jb r-xdata
mov ecx esi
xor edx edx
mov [ ecx + eax * 2 ] dx
mov ecx [ esi ]
xor edx edx
mov [ ecx + eax * 2 ] dx
mov eax esi
pop edi
retn
sub eax edi
add eax eax
push eax
lea eax [ ecx + edi ]
lea eax [ ebx + eax * 2 ]
push eax
lea ecx [ edx + ecx * 2 ]
push ecx
call sub_10009c90
mov eax [ esi + 0x10 ]
add esp 0xc
sub eax edi
cmp [ esi + 0x14 ] 0x8
mov [ esi + 0x10 ] eax
pop ebx
jb r-xdata
sub_100053e0
cmp esi 0x7ffffffe
jbe r-xdata
mov ecx [ eax + 0x14 ]
cmp ecx esi
jae r-xdata
push r--data
call sub_1001258a
test esi esi
jne r-xdata
mov ecx [ eax + 0x10 ]
push ecx
push esi
push eax
call sub_10005430
xor eax eax
cmp eax esi
sbb eax eax
neg eax
retn
xor eax eax
cmp eax esi
sbb eax eax
neg eax
retn
mov [ eax + 0x10 ] esi
cmp ecx 0x8
jb r-xdata
xor edx edx
mov [ eax ] dx
mov eax [ eax ]
sub_10005430
push ebp
mov ebp esp
push 0xffffffff
push sub_10013ae0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x18
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov eax [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov esi eax
or esi 0x7
cmp esi 0x7ffffffe
jbe r-xdata
mov ebx [ edi + 0x14 ]
mov eax 0xaaaaaaab
mul esi
mov ecx ebx
shr ecx 0x1
shr edx 0x1
cmp ecx edx
jbe r-xdata
mov esi eax
jmp r-xdata
xor eax eax
lea ecx [ esi + 0x1 ]
mov [ ebp - 0x4 ] eax
cmp ecx eax
jbe r-xdata
mov eax 0x7ffffffe
sub eax ecx
lea esi [ ecx + ebx ]
cmp ebx eax
jbe r-xdata
mov ebx eax
mov [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
cmp ecx 0x7fffffff
ja r-xdata
mov esi 0x7ffffffe
mov ecx [ ebp + 0x10 ]
test ecx ecx
je r-xdata
lea edx [ ebp - 0x14 ]
push edx
lea ecx [ ebp - 0x24 ]
mov [ ebp - 0x14 ] 0x0
call sub_10009bcf
push r--data
lea eax [ ebp - 0x24 ]
push eax
mov [ ebp - 0x24 ] r--data
call sub_1000acc0
mov eax [ ebp + 0xc ]
lea ecx [ eax + 0x1 ]
mov [ ebp - 0x10 ] esp
mov [ ebp + 0xc ] eax
mov [ ebp - 0x4 ] 0x2
call sub_100055b0
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x4 ] 0x1
mov eax r-xdata
retn
add ecx ecx
push ecx
call sub_10009900
add esp 0x4
test eax eax
je r-xdata
cmp [ edi + 0x14 ] 0x8
jb r-xdata
cmp [ edi + 0x14 ] 0x8
jb r-xdata
mov [ edi ] ebx
mov [ edi + 0x14 ] esi
mov [ edi + 0x10 ] ecx
cmp esi 0x8
jb r-xdata
mov edx [ edi ]
push edx
call sub_100098f5
mov ecx [ ebp + 0x10 ]
add esp 0x4
mov eax edi
mov eax [ edi ]
jmp r-xdata
xor edx edx
mov [ edi + ecx * 2 ] dx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov edi ebx
add ecx ecx
push ecx
push eax
push ebx
call sub_10010060
mov ecx [ ebp + 0x10 ]
add esp 0xc
sub_1000557d
mov esi [ ebp + 0x8 ]
cmp [ esi + 0x14 ] 0x8
jb r-xdata
xor ecx ecx
push ecx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
push ecx
mov [ esi ] cx
call sub_1000acc0
int3
mov eax [ esi ]
push eax
call sub_100098f5
add esp 0x4
sub_100055b0
push ebp
mov ebp esp
sub esp 0x10
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn
cmp ecx 0x7fffffff
ja r-xdata
lea ecx [ ebp - 0x4 ]
push ecx
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_10009bcf
push r--data
lea edx [ ebp - 0x10 ]
push edx
mov [ ebp - 0x10 ] r--data
call sub_1000acc0
lea eax [ ecx + ecx ]
push eax
call sub_10009900
add esp 0x4
test eax eax
jne r-xdata
sub_10005610
push ebp
mov ebp esp
test [ ebp + 0x8 ] 0x1
push esi
mov esi ecx
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100098f5
add esp 0x4
sub_10005650
push ebp
mov ebp esp
sub esp 0xdf8
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x34 ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
cmp [ esi + 0x34 ] 0x0
jne r-xdata
lea ecx [ ebp - 0xdf8 ]
push ecx
lea edx [ ebp - 0xdf4 ]
push edx
push 0x0
mov [ ebp - 0xdf8 ] 0xded
call eax
test eax eax
jne r-xdata
mov eax [ esi + 0x34 ]
cmp [ esi + 0x48 ] 0x0
jne r-xdata
cmp [ esi + 0x48 ] eax
jne r-xdata
cmp [ esi + 0x4c ] 0x10
lea eax [ esi + 0x38 ]
jb r-xdata
mov ecx [ esi + 0x24 ]
push 0x0
push 0x0
push 0x0
push 0x4
push r--data
call ecx
mov [ esi + 0x34 ] eax
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn
cmp [ esi + 0x4c ] 0x10
lea eax [ esi + 0x38 ]
jb r-xdata
mov ecx [ esi + 0x24 ]
push eax
push eax
push eax
push 0x4
lea eax [ ebp - 0xdf4 ]
push eax
call ecx
jmp r-xdata
mov edx [ esi + 0x24 ]
push 0x0
push 0x0
push eax
push 0x3
push r--data
call edx
mov [ esi + 0x34 ] eax
mov eax [ eax ]
push 0x0
push 0x0
push eax
mov eax [ esi + 0x24 ]
push 0x3
lea edx [ ebp - 0xdf4 ]
push edx
call eax
mov eax [ eax ]
mov [ esi + 0x34 ] eax
sub_10005730
push ebp
mov ebp esp
push 0xffffffff
push sub_10013ac3
mov eax [ fs : 0x0 ]
push eax
push ecx
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x30
call sub_10009900
add esp 0x4
xor ecx ecx
cmp eax ecx
je r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
mov esp ebp
pop ebp
retn
mov [ eax ] r--data
mov [ eax + 0x18 ] 0xf
mov [ eax + 0x14 ] ecx
mov [ eax + 0x4 ] cl
mov [ eax + 0x20 ] ecx
mov [ eax + 0x24 ] ecx
mov [ eax + 0x28 ] ecx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
mov esp ebp
pop ebp
retn
sub_100057a0
push ebp
mov ebp esp
sub esp 0x20
push ebx
push edi
mov eax 0x16
call sub_10006990
mov edi eax
mov eax 0x17
call sub_10006990
mov [ ebp - 0x4 ] eax
mov eax 0x18
call sub_10006990
push edi
mov ebx eax
call [ LoadLibraryA@IAT ]
mov edi [ GetProcAddress@IAT ]
mov [ esi + 0x2c ] eax
test eax eax
je r-xdata
mov eax [ ebp - 0x4 ]
push eax
call [ LoadLibraryA@IAT ]
mov [ esi + 0x30 ] eax
test eax eax
jne r-xdata
push ebx
push eax
call edi
mov [ esi + 0x4 ] eax
mov eax 0x19
call sub_10006990
mov ebx eax
mov eax 0x1a
call sub_10006990
mov [ ebp - 0x4 ] eax
mov eax 0x1b
call sub_10006990
mov [ ebp - 0x8 ] eax
mov eax 0x1c
call sub_10006990
mov [ ebp - 0xc ] eax
mov eax 0x1d
call sub_10006990
mov [ ebp - 0x10 ] eax
mov eax 0x1e
call sub_10006990
mov [ ebp - 0x14 ] eax
mov eax 0x1f
call sub_10006990
mov [ ebp - 0x18 ] eax
mov eax 0x20
call sub_10006990
mov [ ebp - 0x1c ] eax
mov eax 0x21
call sub_10006990
mov ecx [ esi + 0x30 ]
push ebx
push ecx
mov [ ebp - 0x20 ] eax
call edi
mov edx [ ebp - 0x4 ]
mov [ esi + 0x8 ] eax
mov eax [ esi + 0x30 ]
push edx
push eax
call edi
mov ecx [ ebp - 0x8 ]
mov edx [ esi + 0x30 ]
push ecx
push edx
mov [ esi + 0xc ] eax
call edi
mov ecx [ esi + 0x30 ]
mov [ esi + 0x10 ] eax
mov eax [ ebp - 0xc ]
push eax
push ecx
call edi
mov edx [ ebp - 0x10 ]
mov [ esi + 0x14 ] eax
mov eax [ esi + 0x30 ]
push edx
push eax
call edi
mov ecx [ ebp - 0x14 ]
mov edx [ esi + 0x30 ]
push ecx
push edx
mov [ esi + 0x18 ] eax
call edi
mov ecx [ esi + 0x30 ]
mov [ esi + 0x1c ] eax
mov eax [ ebp - 0x18 ]
push eax
push ecx
call edi
mov edx [ ebp - 0x1c ]
mov [ esi + 0x20 ] eax
mov eax [ esi + 0x30 ]
push edx
push eax
call edi
mov ecx [ ebp - 0x20 ]
mov edx [ esi + 0x30 ]
push ecx
push edx
mov [ esi + 0x24 ] eax
call edi
cmp [ esi + 0x8 ] 0x0
mov [ esi + 0x28 ] eax
je r-xdata
pop edi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn
cmp [ esi + 0xc ] 0x0
je r-xdata
cmp [ esi + 0x10 ] 0x0
je r-xdata
cmp [ esi + 0x14 ] 0x0
je r-xdata
cmp [ esi + 0x18 ] 0x0
je r-xdata
cmp [ esi + 0x1c ] 0x0
je r-xdata
cmp [ esi + 0x20 ] 0x0
je r-xdata
cmp [ esi + 0x24 ] 0x0
je r-xdata
xor ecx ecx
test eax eax
setne cl
pop edi
pop ebx
mov eax ecx
mov esp ebp
pop ebp
retn
sub_10005950
push ebp
mov ebp esp
push 0xffffffff
push sub_100141a9
mov eax [ fs : 0x0 ]
push eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx [ ebp + 0x8 ]
xor eax eax
mov [ ebp - 0x4 ] eax
lea esi [ ebx + 0x38 ]
mov [ ebx ] r--data
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] eax
mov [ esi ] al
mov ecx 0x7
xor edx edx
mov [ ebx + 0x68 ] ecx
mov [ ebx + 0x64 ] eax
mov [ ebx + 0x54 ] dx
mov [ ebx + 0x84 ] ecx
xor ecx ecx
mov [ ebx + 0x80 ] eax
mov [ ebx + 0x70 ] cx
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x4 ] 0x3
mov [ ebx + 0x34 ] eax
mov [ ebx + 0x4 ] eax
mov [ ebx + 0x8 ] eax
mov [ ebx + 0xc ] eax
mov [ ebx + 0x10 ] eax
mov [ ebx + 0x14 ] eax
mov [ ebx + 0x1c ] eax
mov [ ebx + 0x20 ] eax
mov [ ebx + 0x24 ] eax
mov [ ebx + 0x28 ] eax
cmp ecx eax
je r-xdata
mov eax ebx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
lea edi [ ecx + 0x1 ]
mov dl [ ecx ]
inc ecx
cmp dl al
jne r-xdata
mov eax [ ebp + 0xc ]
sub ecx edi
mov edi ecx
call sub_10001f40
sub_10005a10
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10005a40
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100098f5
add esp 0x4
sub_10005a40
push ebp
mov ebp esp
push 0xffffffff
push sub_10013a89
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x3
mov ecx [ esi + 0x34 ]
xor ebx ebx
cmp ecx ebx
je r-xdata
mov eax [ esi + 0x2c ]
mov edi [ FreeLibrary@IAT ]
cmp eax ebx
je r-xdata
mov eax [ esi + 0x8 ]
cmp eax ebx
je r-xdata
mov eax [ esi + 0x30 ]
cmp eax ebx
je r-xdata
push eax
call edi
mov [ esi + 0x2c ] ebx
mov [ esi + 0x34 ] ebx
push ecx
call eax
mov [ ebp - 0x4 ] 0x2
cmp [ esi + 0x84 ] 0x8
jb r-xdata
push eax
call edi
mov [ esi + 0x30 ] ebx
mov edi 0x7
xor eax eax
mov [ esi + 0x84 ] edi
mov [ esi + 0x80 ] ebx
mov [ esi + 0x70 ] ax
mov [ ebp - 0x4 ] 0x1
cmp [ esi + 0x68 ] 0x8
jb r-xdata
mov eax [ esi + 0x70 ]
push eax
call sub_100098f5
add esp 0x4
xor ecx ecx
mov [ esi + 0x68 ] edi
mov [ esi + 0x64 ] ebx
mov [ esi + 0x54 ] cx
mov [ ebp - 0x4 ] bl
cmp [ esi + 0x4c ] 0x10
jb r-xdata
mov eax [ esi + 0x54 ]
push eax
call sub_100098f5
add esp 0x4
mov [ esi + 0x4c ] 0xf
mov [ esi + 0x48 ] ebx
mov [ esi + 0x38 ] bl
mov [ esi ] r--data
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov edx [ esi + 0x38 ]
push edx
call sub_100098f5
add esp 0x4
sub_10005b40
push esi
push edi
push 0xc
mov esi ecx
call sub_10009900
add esp 0x4
test eax eax
je r-xdata
xor edi edi
mov [ eax ] r--data
mov [ eax + 0x4 ] esi
mov [ eax + 0x8 ] 0x0
mov edi eax
jmp r-xdata
mov eax edi
pop edi
pop esi
retn
call [ GetLastError@IAT ]
mov eax [ edi ]
mov edx [ eax ]
push 0x1
mov ecx edi
call edx
pop edi
xor eax eax
pop esi
retn
mov esi [ edi + 0x4 ]
call sub_10005650
mov [ edi + 0x8 ] eax
test eax eax
jne r-xdata
sub_10005ba0
push ebp
mov ebp esp
push esi
mov esi eax
push edi
mov edi ecx
test esi esi
je r-xdata
push ebx
mov ebx [ ebp + 0x8 ]
cmp ebx 0x7ffffffe
jbe r-xdata
mov ecx [ edi + 0x14 ]
cmp ecx 0x8
jb r-xdata
mov eax [ edi + 0x14 ]
cmp eax ebx
jae r-xdata
push r--data
call sub_1001258a
mov eax edi
mov eax [ edi ]
jmp r-xdata
test ebx ebx
jne r-xdata
mov ecx [ edi + 0x10 ]
push ecx
push ebx
push edi
call sub_10005430
test ebx ebx
je r-xdata
cmp ecx 0x8
jb r-xdata
cmp esi eax
jb r-xdata
cmp [ edi + 0x14 ] 0x8
jb r-xdata
mov [ edi + 0x10 ] ebx
cmp eax 0x8
jb r-xdata
pop ebx
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
pop ebx
mov eax edi
xor edx edx
pop edi
mov [ eax ] dx
pop esi
pop ebp
retn 0x4
mov eax [ edi ]
xor edx edx
pop ebx
mov [ eax ] dx
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
cmp ecx 0x8
jb r-xdata
mov edx [ edi + 0x10 ]
lea eax [ eax + edx * 2 ]
cmp eax esi
jbe r-xdata
mov eax edi
xor ecx ecx
mov [ ebx + eax ] cx
mov eax [ edi ]
xor ecx ecx
mov [ ebx + eax ] cx
pop ebx
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
add ebx ebx
push ebx
push esi
push eax
call sub_10010060
mov eax [ ebp + 0x8 ]
add esp 0xc
cmp [ edi + 0x14 ] 0x8
mov [ edi + 0x10 ] eax
jb r-xdata
mov eax edi
sub esi eax
mov eax [ ebp + 0x8 ]
sar esi 0x1
push esi
push edi
call sub_100052b0
pop edi
pop esi
pop ebp
retn 0x4
mov eax [ edi ]
sub esi eax
mov eax [ ebp + 0x8 ]
sar esi 0x1
push esi
push edi
call sub_100052b0
pop edi
pop esi
pop ebp
retn 0x4
sub_10005cb0
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_1001414a
mov eax [ fs : 0x0 ]
push eax
sub esp 0x48
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x40 ] eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x58 ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov [ esp + 0x10 ] ecx
mov ecx [ ebp + 0xc ]
mov [ esp + 0x14 ] ecx
xor ebx ebx
mov ecx eax
mov [ esp + 0x2c ] 0xf
mov [ esp + 0x28 ] ebx
mov [ esp + 0x18 ] bl
lea esi [ ecx + 0x1 ]
lea esp [ esp ]
mov dl [ ecx ]
inc ecx
cmp dl bl
jne r-xdata
sub ecx esi
mov edi ecx
lea esi [ esp + 0x18 ]
call sub_10001f40
mov edx [ esp + 0x14 ]
mov [ esp + 0x60 ] ebx
mov eax edx
mov [ esp + 0x48 ] 0xf
mov [ esp + 0x44 ] ebx
mov [ esp + 0x34 ] bl
lea esi [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax esi
mov edi eax
mov eax edx
lea esi [ esp + 0x34 ]
call sub_10001f40
mov edi [ esp + 0x10 ]
add edi 0x20
lea ecx [ esp + 0x18 ]
mov [ esp + 0x60 ] 0x1
call sub_10006320
mov esi 0x10
mov [ esp + 0x60 ] 0x2
cmp [ esp + 0x48 ] esi
jb r-xdata
mov [ esp + 0x60 ] 0xffffffff
mov [ esp + 0x48 ] 0xf
mov [ esp + 0x44 ] ebx
mov [ esp + 0x34 ] bl
cmp [ esp + 0x2c ] esi
jb r-xdata
mov edx [ esp + 0x34 ]
push edx
call sub_100098f5
add esp 0x4
mov eax 0x1
mov ecx [ esp + 0x58 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x40 ]
xor ecx esp
call sub_100098bc
mov esp ebp
pop ebp
retn 0x8
mov eax [ esp + 0x18 ]
push eax
call sub_100098f5
add esp 0x4
sub_10005de0
push ebp
mov ebp esp
push 0xffffffff
push sub_10013898
mov eax [ fs : 0x0 ]
push eax
push ebx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
xor ebx ebx
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x30 ] 0x10
jb r-xdata
mov [ esi + 0x30 ] 0xf
mov [ esi + 0x2c ] ebx
mov [ esi + 0x1c ] bl
mov [ ebp - 0x4 ] 0xffffffff
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov eax [ esi + 0x1c ]
push eax
call sub_100098f5
add esp 0x4
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] ebx
mov [ esi ] bl
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ esi ]
push eax
call sub_100098f5
add esp 0x4
sub_10005e70
push ebp
mov ebp esp
push ecx
push esi
mov esi ecx
mov eax [ esi + 0x24 ]
mov ecx [ esi + 0x20 ]
cmp ecx eax
je r-xdata
mov eax 0x1
pop esi
mov esp ebp
pop ebp
retn
mov edx [ ebp - 0x4 ]
push edi
push edx
push eax
call sub_100065d0
mov ecx [ esi + 0x24 ]
mov edi eax
mov eax [ ebp - 0x4 ]
push eax
push ecx
push edi
call sub_100066d0
add esp 0x14
mov [ esi + 0x24 ] edi
pop edi
sub_10005eb0
push ebp
mov ebp esp
push 0xffffffff
push sub_10014108
mov eax [ fs : 0x0 ]
push eax
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
xor edi edi
mov esi ecx
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x2c ] 0x0
mov [ ebp - 0x4 ] edi
mov ecx [ esi + 0x24 ]
sub ecx [ esi + 0x20 ]
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x5
mov eax edx
shr eax 0x1f
add eax edx
mov [ ebp - 0x34 ] edi
je r-xdata
mov ecx [ ebp - 0x1c ]
inc ecx
push ecx
call sub_10009ff1
mov edi 0x10
add esp 0x4
mov esi eax
mov eax [ ebp - 0x2c ]
cmp [ ebp - 0x18 ] edi
jae r-xdata
mov [ ebp - 0x30 ] edi
jmp r-xdata
mov edx esi
sub edx eax
lea eax [ ebp - 0x2c ]
cmp [ ebp - 0x34 ] edi
jbe r-xdata
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
mov [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x18 ] edi
jb r-xdata
mov eax 0x24
call sub_10006990
mov edi eax
mov eax [ esi + 0x20 ]
add eax [ ebp - 0x30 ]
cmp [ eax + 0x14 ] 0x10
jb r-xdata
mov eax 0x23
call sub_10006990
mov ecx eax
lea edi [ ecx + 0x1 ]
lea ecx [ ecx ]
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn
mov edx [ ebp - 0x2c ]
push edx
call sub_100098f5
add esp 0x4
mov ecx eax
lea ebx [ ecx + 0x1 ]
mov eax [ eax ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
push ecx
lea ecx [ ebp - 0x2c ]
call sub_10003bc0
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx ebx
push ecx
lea ecx [ ebp - 0x2c ]
call sub_10003bc0
mov eax edi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
mov eax edi
lea ecx [ ebp - 0x2c ]
call sub_10003bc0
mov ecx [ esi + 0x20 ]
mov edx [ ebp - 0x30 ]
cmp [ ecx + edx + 0x30 ] 0x10
lea eax [ ecx + edx + 0x1c ]
jb r-xdata
mov ecx eax
lea edi [ ecx + 0x1 ]
mov eax [ eax ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
push ecx
lea ecx [ ebp - 0x2c ]
call sub_10003bc0
mov ecx [ esi + 0x24 ]
sub ecx [ esi + 0x20 ]
mov edi [ ebp - 0x34 ]
add [ ebp - 0x30 ] 0x38
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x5
mov eax edx
shr eax 0x1f
inc edi
add eax edx
mov [ ebp - 0x34 ] edi
cmp edi eax
jb r-xdata
xor edi edi
sub_10006050
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov edx eax
push edi
lea esi [ edx + 0x1 ]
mov edi edi
mov bl [ edx ]
inc edx
test bl bl
jne r-xdata
sub edx esi
lea esi [ ecx + 0x4 ]
mov edi edx
call sub_10001f40
pop edi
pop esi
mov eax 0x1
pop ebx
pop ebp
retn 0x4
sub_10006080
push ebp
mov ebp esp
push 0xffffffff
push sub_10013a43
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x1
mov eax [ esi + 0x20 ]
xor ebx ebx
cmp eax ebx
je r-xdata
mov [ esi + 0x20 ] ebx
mov [ esi + 0x24 ] ebx
mov [ esi + 0x28 ] ebx
mov [ ebp - 0x4 ] bl
cmp [ esi + 0x18 ] 0x10
jb r-xdata
mov edx [ ebp + 0x8 ]
mov ecx [ esi + 0x24 ]
push edx
push ecx
push eax
call sub_100066d0
mov eax [ esi + 0x20 ]
push eax
call sub_100098f5
add esp 0x10
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] ebx
mov [ ebp - 0x4 ] 0xffffffff
test [ ebp + 0x8 ] 0x1
mov [ esi + 0x4 ] bl
mov [ esi ] r--data
je r-xdata
mov eax [ esi + 0x4 ]
push eax
call sub_100098f5
add esp 0x4
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_100098f5
add esp 0x4
sub_10006140
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0xc ]
lea eax [ edi + edi + 0x1 ]
push eax
call sub_10009ff1
add esp 0x4
xor edx edx
test edi edi
je r-xdata
mov [ eax + edi * 2 ] dl
pop edi
pop ebp
retn 0x8
push esi
mov esi [ ebp + 0x8 ]
mov edi edi
cmp cl 0xf
jg r-xdata
add cl 0x30
jmp r-xdata
xor cl cl
add cl 0x57
jmp r-xdata
mov [ eax + edx * 2 ] cl
mov cl [ edx + esi ]
and cl 0xf
cmp cl 0x9
jg r-xdata
cmp cl 0xf
jg r-xdata
add cl 0x30
jmp r-xdata
xor cl cl
add cl 0x57
jmp r-xdata
mov [ eax + edx * 2 + 0x1 ] cl
inc edx
cmp edx edi
jb r-xdata
mov cl [ edx + esi ]
sar cl 0x4
and cl 0xf
cmp cl 0x9
jg r-xdata
pop esi
mov [ eax + edi * 2 ] 0x0
pop edi
pop ebp
retn 0x8
sub_100061c0
push ebp
mov ebp esp
push 0xffffffff
push sub_100140d8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] 0x0
mov [ ebp - 0x2c ] 0x0
push 0x0
lea eax [ esi + 0x4 ]
push eax
or eax 0xffffffff
lea edi [ ebp - 0x2c ]
mov [ ebp - 0x4 ] 0x0
call sub_10003b20
cmp [ ebp + 0x8 ] 0x0
je r-xdata
mov edx [ ebp - 0x1c ]
inc edx
push edx
call sub_10009ff1
mov edi 0x10
add esp 0x4
mov esi eax
mov eax [ ebp - 0x2c ]
cmp [ ebp - 0x18 ] edi
jae r-xdata
mov ecx [ esi + 0x24 ]
sub ecx [ esi + 0x20 ]
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x5
mov ecx edx
shr ecx 0x1f
add ecx edx
je r-xdata
mov edx esi
sub edx eax
lea eax [ ebp - 0x2c ]
mov eax 0x22
call sub_10006990
mov ecx eax
lea edi [ ecx + 0x1 ]
lea ebx [ ebx ]
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
mov [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x18 ] edi
jb r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
push ecx
lea ecx [ ebp - 0x2c ]
call sub_10003bc0
mov edx [ esi ]
mov eax [ edx + 0x18 ]
mov ecx esi
call eax
mov esi eax
test esi esi
jne r-xdata
mov eax esi
mov eax [ ebp - 0x2c ]
push eax
call sub_100098f5
add esp 0x4
mov eax esi
lea edx [ eax + 0x1 ]
mov [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
mov eax esi
lea ecx [ ebp - 0x2c ]
call sub_10003bc0
push esi
call sub_1000a366
add esp 0x4
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0x2c ]
push ecx
call sub_100098f5
add esp 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn 0x4
sub_10006320
push ebp
mov ebp esp
push 0xffffffff
push sub_100140aa
mov eax [ fs : 0x0 ]
push eax
push ebx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov ecx [ edi + 0x4 ]
cmp esi ecx
jae r-xdata
cmp ecx [ edi + 0x8 ]
jne r-xdata
mov eax [ edi ]
cmp eax esi
ja r-xdata
mov eax [ edi + 0x4 ]
mov [ ebp - 0x4 ] 0x1
test eax eax
je r-xdata
mov ecx edi
call sub_100063d0
sub esi eax
mov eax 0x92492493
imul esi
add edx esi
sar edx 0x5
mov esi edx
shr esi 0x1f
add esi edx
cmp ecx [ edi + 0x8 ]
jne r-xdata
add [ edi + 0x4 ] 0x38
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov esp ebp
pop ebp
retn
lea ebx [ esi + 0x1c ]
mov ecx esi
mov ecx [ edi ]
lea eax [ esi * 8 ]
sub eax esi
lea ecx [ ecx + eax * 8 ]
mov eax [ edi + 0x4 ]
mov [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
mov ecx edi
call sub_100063d0
lea ebx [ ecx + 0x1c ]
jmp r-xdata
push eax
call sub_10006760
sub_100063d0
push ebx
mov ebx [ ecx ]
push esi
mov esi [ ecx + 0x4 ]
sub esi ebx
mov eax 0x92492493
imul esi
add edx esi
sar edx 0x5
mov esi edx
shr esi 0x1f
add esi edx
push edi
cmp esi 0x4924923
jbe r-xdata
mov edi [ ecx + 0x8 ]
sub edi ebx
mov eax 0x92492493
imul edi
add edx edi
sar edx 0x5
mov eax edx
shr eax 0x1f
inc esi
add eax edx
cmp esi eax
jbe r-xdata
push r--data
call sub_1001258a
pop edi
pop esi
pop ebx
retn
mov edx eax
shr edx 0x1
mov edi 0x4924924
sub edi edx
cmp edi eax
jae r-xdata
add eax edx
xor eax eax
jmp r-xdata
push eax
call sub_10006450
mov eax esi
cmp eax esi
jae r-xdata
sub_10006450
push ebp
mov ebp esp
push 0xffffffff
push sub_10014080
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi ecx
mov ecx [ ebp + 0x8 ]
cmp ecx 0x4924924
jbe r-xdata
mov edi [ esi + 0x8 ]
sub edi [ esi ]
mov eax 0x92492493
imul edi
add edx edi
sar edx 0x5
mov eax edx
shr eax 0x1f
add eax edx
cmp eax ecx
jae r-xdata
push r--data
call sub_1001258a
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
call sub_10006570
mov [ ebp - 0x4 ] 0x0
mov edi [ ebp + 0x8 ]
mov edx [ esi + 0x4 ]
mov ecx [ esi ]
push edi
push eax
push edx
mov [ ebp - 0x14 ] eax
call sub_10006870
mov [ ebp - 0x4 ] 0xffffffff
mov ebx [ esi ]
mov ecx [ esi + 0x4 ]
sub ecx ebx
mov eax 0x92492493
imul ecx
add edx ecx
sar edx 0x5
mov edi edx
shr edi 0x1f
add esp 0xc
add edi edx
test ebx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
lea ecx [ eax * 8 ]
sub ecx eax
mov eax [ ebp - 0x14 ]
lea edx [ eax + ecx * 8 ]
lea ecx [ edi * 8 ]
sub ecx edi
mov [ esi + 0x8 ] edx
lea edx [ eax + ecx * 8 ]
mov [ esi + 0x4 ] edx
mov [ esi ] eax
mov ecx [ ebp + 0x8 ]
mov eax [ esi + 0x4 ]
push ecx
push eax
push ebx
call sub_100066d0
mov edx [ esi ]
push edx
call sub_100098f5
add esp 0x10
sub_10006570
push ebp
mov ebp esp
sub esp 0x10
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn
cmp ecx 0x4924924
ja r-xdata
lea ecx [ ebp - 0x4 ]
push ecx
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_10009bcf
push r--data
lea edx [ ebp - 0x10 ]
push edx
mov [ ebp - 0x10 ] r--data
call sub_1000acc0
lea eax [ ecx * 8 ]
sub eax ecx
add eax eax
add eax eax
add eax eax
push eax
call sub_10009900
add esp 0x4
test eax eax
jne r-xdata
sub_100065d0
push ebp
mov ebp esp
push ecx
push ebx
mov ebx ecx
cmp eax [ ebp + 0x8 ]
je r-xdata
mov eax ebx
pop ebx
mov esp ebp
pop ebp
retn
push esi
push edi
lea edi [ eax + 0x30 ]
sub eax ebx
add eax 0xffffffd0
lea esi [ ebx + 0x30 ]
mov [ ebp - 0x4 ] eax
xor ecx ecx
cmp [ esi - 0x1c ] 0x10
jb r-xdata
mov eax [ ebp - 0x4 ]
add esi 0x38
lea ecx [ eax + esi ]
add ebx 0x38
add edi 0x38
cmp ecx [ ebp + 0x8 ]
jne r-xdata
cmp [ esi ] 0x10
jb r-xdata
mov eax [ ebp - 0x4 ]
xor ecx ecx
mov [ esi - 0x1c ] 0xf
mov [ esi - 0x20 ] ecx
mov [ ebx ] cl
cmp [ edi - 0x1c ] 0x10
jae r-xdata
mov eax [ ebx ]
push eax
call sub_100098f5
add esp 0x4
add eax esi
cmp ebx eax
je r-xdata
pop edi
pop esi
mov [ esi ] 0xf
mov [ esi - 0x4 ] ecx
lea eax [ esi - 0x14 ]
mov [ eax ] 0x0
cmp [ edi ] 0x10
jae r-xdata
mov eax [ esi - 0x14 ]
push eax
call sub_100098f5
add esp 0x4
xor ecx ecx
mov edx [ eax + esi ]
mov [ ebx ] edx
mov [ eax + esi ] ecx
mov ecx [ edi - 0x20 ]
inc ecx
push ecx
add eax esi
push eax
push ebx
call sub_10009c90
add esp 0xc
xor ecx ecx
jmp r-xdata
mov edx [ edi - 0x14 ]
mov [ eax ] edx
mov [ edi - 0x14 ] ecx
mov ecx [ edi - 0x4 ]
inc ecx
push ecx
lea edx [ edi - 0x14 ]
push edx
push eax
call sub_10009c90
add esp 0xc
xor ecx ecx
jmp r-xdata
lea eax [ esi - 0x14 ]
lea edx [ edi - 0x14 ]
cmp eax edx
je r-xdata
mov eax [ edi - 0x20 ]
mov [ esi - 0x20 ] eax
mov edx [ edi - 0x1c ]
mov [ esi - 0x1c ] edx
mov [ edi - 0x20 ] ecx
mov [ edi - 0x1c ] ecx
jmp r-xdata
mov eax [ edi - 0x4 ]
mov [ esi - 0x4 ] eax
mov edx [ edi ]
mov [ esi ] edx
mov [ edi - 0x4 ] ecx
mov [ edi ] ecx
sub_100066d0
push ebp
mov ebp esp
push 0xffffffff
push sub_10013a08
mov eax [ fs : 0x0 ]
push eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
cmp esi [ ebp + 0xc ]
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
xor ebx ebx
lea edi [ ebx + 0xf ]
mov [ esi + 0x30 ] edi
mov [ esi + 0x2c ] ebx
mov [ esi + 0x1c ] bl
mov [ ebp - 0x4 ] 0xffffffff
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov eax [ esi + 0x1c ]
push eax
call sub_100098f5
add esp 0x4
mov [ esi + 0x14 ] edi
mov [ esi + 0x10 ] ebx
mov [ esi ] bl
add esi 0x38
mov [ ebp + 0x8 ] esi
cmp esi [ ebp + 0xc ]
jne r-xdata
mov eax [ esi ]
push eax
call sub_100098f5
add esp 0x4
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x30 ] 0x10
jb r-xdata
sub_10006760
push ebp
mov ebp esp
push 0xffffffff
push sub_10013898
mov eax [ fs : 0x0 ]
push eax
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
mov esi [ ebp + 0x8 ]
xor eax eax
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] eax
mov [ esi ] al
cmp esi edi
je r-xdata
lea edi [ esi + 0x1c ]
mov [ ebp - 0x4 ] eax
mov [ edi + 0x14 ] 0xf
mov [ edi + 0x10 ] eax
mov [ edi ] 0x0
cmp edi ebx
je r-xdata
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn 0x4
cmp [ edi + 0x14 ] 0x10
jb r-xdata
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] eax
mov [ esi ] 0x0
cmp [ edi + 0x14 ] 0x10
jae r-xdata
mov eax [ esi ]
push eax
call sub_100098f5
add esp 0x4
xor eax eax
mov [ edi + 0x14 ] 0xf
mov [ edi + 0x10 ] eax
mov [ edi ] 0x0
cmp [ ebx + 0x14 ] 0x10
jae r-xdata
mov edx [ edi ]
push edx
call sub_100098f5
add esp 0x4
xor eax eax
mov ecx [ edi ]
mov [ esi ] ecx
mov [ edi ] eax
mov eax [ edi + 0x10 ]
inc eax
push eax
push edi
push esi
call sub_10009c90
add esp 0xc
xor eax eax
jmp r-xdata
mov ecx [ ebx ]
mov [ edi ] ecx
mov [ ebx ] eax
mov eax [ ebx + 0x10 ]
inc eax
push eax
push ebx
push edi
call sub_10009c90
add esp 0xc
xor eax eax
jmp r-xdata
mov edx [ edi + 0x10 ]
mov [ esi + 0x10 ] edx
mov ecx [ edi + 0x14 ]
mov [ esi + 0x14 ] ecx
mov [ edi + 0x10 ] eax
mov [ edi + 0x14 ] eax
mov edx [ ebx + 0x10 ]
mov [ edi + 0x10 ] edx
mov ecx [ ebx + 0x14 ]
mov [ edi + 0x14 ] ecx
mov [ ebx + 0x10 ] eax
mov [ ebx + 0x14 ] eax
sub_10006870
push ebp
mov ebp esp
push 0xffffffff
push sub_10014065
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0xc ]
mov edi ecx
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x4 ] 0x0
lea ebx [ ebx ]
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov [ ebp - 0x4 ] 0x1
test esi esi
je r-xdata
add esi 0x38
mov [ ebp - 0x4 ] 0x0
mov [ ebp + 0xc ] esi
add edi 0x38
jmp r-xdata
lea ebx [ edi + 0x1c ]
push esi
mov ecx edi
call sub_10006760
cmp edi [ ebp + 0x8 ]
je r-xdata
sub_100068d7
mov esi [ ebp - 0x14 ]
mov edi [ ebp + 0xc ]
cmp esi edi
je r-xdata
push 0x0
push 0x0
call sub_1000acc0
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push esi
call sub_10006910
add esi 0x38
add esp 0x4
cmp esi edi
jne r-xdata
sub_10006910
push ebp
mov ebp esp
push 0xffffffff
push sub_10013898
mov eax [ fs : 0x0 ]
push eax
push ebx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
xor ebx ebx
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x30 ] 0x10
jb r-xdata
mov [ esi + 0x30 ] 0xf
mov [ esi + 0x2c ] ebx
mov [ esi + 0x1c ] bl
mov [ ebp - 0x4 ] 0xffffffff
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov eax [ esi + 0x1c ]
push eax
call sub_100098f5
add esp 0x4
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] ebx
mov [ esi ] bl
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ esi ]
push eax
call sub_100098f5
add esp 0x4
sub_10006990
push ebp
mov ebp esp
sub esp 0x8
mov edx [ eax * 4 + rw-data ]
lea ecx [ eax * 4 + rw-data ]
mov [ ebp - 0x8 ] ecx
test edx edx
jne r-xdata
mov eax [ ecx ]
mov esp ebp
pop ebp
retn
push ebx
lea ebx [ eax * 4 + rw-data ]
mov eax [ ebx ]
mov cl [ eax ]
push esi
movzx esi [ eax + 0x1 ]
lea edx [ esi + 0x1 ]
push edi
push edx
mov [ ebp - 0x1 ] cl
call sub_10009900
add esp 0x4
mov edi eax
xor ecx ecx
mov [ esi + edi ] 0x0
test esi esi
je r-xdata
mov esi [ ebp - 0x8 ]
push edi
push esi
call [ InterlockedExchange@IAT ]
mov eax [ esi ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
jmp r-xdata
mov eax [ ebx ]
mov dl [ ecx + eax + 0x3 ]
xor dl [ ebp - 0x1 ]
inc ecx
mov [ ecx + edi - 0x1 ] dl
cmp ecx esi
jb r-xdata
sub_10006a10
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov eax [ rw-data ]
retn
mov eax [ rw-data ]
push ebx
mov bl [ eax ]
push esi
movzx esi [ eax + 0x1 ]
xor ecx ecx
lea eax [ esi + 0x1 ]
mov edx 0x2
mul edx
seto cl
push edi
neg ecx
or ecx eax
push ecx
call sub_10009900
mov edi eax
xor eax eax
add esp 0x4
xor ecx ecx
mov [ edi + esi * 2 ] ax
test esi esi
je r-xdata
push edi
push rw-data
call [ InterlockedExchange@IAT ]
pop edi
pop esi
pop ebx
mov edx [ rw-data ]
mov al [ edx + ecx + 0x3 ]
xor al bl
movzx edx al
mov [ edi + ecx * 2 ] dx
inc ecx
cmp ecx esi
jb r-xdata
sub_10006a80
push esi
mov esi ecx
call sub_10006f60
test eax eax
jne r-xdata
pop esi
retn
mov ecx esi
call sub_10006b40
test eax eax
je r-xdata
call sub_10006ab0
test eax eax
je r-xdata
mov ecx esi
pop esi
jmp sub_10006e20
sub_10006ab0
push ebp
mov ebp esp
mov eax 0x1004
call sub_10011e10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push edi
mov eax 0x2a
call sub_10006990
cmp [ esi + 0x34 ] 0x10
mov edi eax
lea eax [ esi + 0x20 ]
jb r-xdata
mov ecx [ esi + 0x8 ]
push eax
mov eax [ ecx ]
mov edx [ eax + 0x4 ]
call edx
push eax
lea eax [ ebp - 0x1004 ]
push edi
push eax
call sub_1000a197
add esp 0x10
lea ecx [ ebp - 0x1004 ]
push ecx
push esi
call sub_10007ea0
pop edi
test eax eax
je r-xdata
mov eax [ eax ]
mov ecx [ ebp - 0x4 ]
xor ecx ebp
xor eax eax
call sub_100098bc
mov esp ebp
pop ebp
retn
mov edx [ eax ]
mov ecx eax
mov eax [ edx ]
push 0x1
call eax
mov eax 0x1
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn
sub_10006b40
push ebp
mov ebp esp
push 0xffffffff
push sub_1001402b
mov eax [ fs : 0x0 ]
push eax
push ecx
mov eax 0x2328
call sub_10011e10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x14 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov edi ecx
mov [ ebp - 0x2324 ] edi
mov [ ebp - 0x4 ] 0x0
call sub_100093b0
mov esi eax
mov eax [ esi ]
mov edx [ eax + 0x4 ]
mov ecx esi
mov [ ebp - 0x2334 ] esi
call edx
mov ebx eax
mov eax [ esi ]
mov edx [ eax + 0x8 ]
mov ecx esi
call edx
mov [ ebp - 0x2330 ] eax
mov eax 0x25
call sub_10006990
mov [ ebp - 0x2338 ] eax
mov eax 0x26
call sub_10006990
mov [ ebp - 0x2328 ] eax
mov eax 0x27
call sub_10006990
mov [ ebp - 0x232c ] eax
mov eax 0x28
call sub_10006990
push 0x9
push eax
lea eax [ ebp - 0x304 ]
push eax
call sub_1000a197
lea eax [ ebp - 0x304 ]
add esp 0xc
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
lea esi [ edi + 0x20 ]
mov edi eax
lea eax [ ebp - 0x304 ]
call sub_10001f40
mov eax ebx
test ebx ebx
jne r-xdata
mov ecx eax
lea edi [ ecx + 0x1 ]
jmp r-xdata
mov eax [ ebp - 0x2338 ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
push ecx
mov ecx esi
call sub_10003bc0
mov ebx [ ebp - 0x232c ]
mov eax ebx
lea edx [ eax + 0x1 ]
lea esp [ esp ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
mov eax ebx
mov ecx esi
call sub_10003bc0
mov eax [ ebp - 0x2330 ]
test eax eax
jne r-xdata
mov ecx eax
lea edi [ ecx + 0x1 ]
mov eax [ ebp - 0x2328 ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
push ecx
mov ecx esi
call sub_10003bc0
mov eax ebx
lea edx [ eax + 0x1 ]
mov edi edi
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
mov eax ebx
mov ecx esi
call sub_10003bc0
lea ecx [ ebp - 0x2304 ]
call sub_10007360
test eax eax
je r-xdata
mov eax 0x29
call sub_10006990
mov ecx eax
lea edi [ ecx + 0x1 ]
lea ebx [ ebx ]
lea eax [ ebp - 0x2304 ]
lea edx [ eax + 0x2 ]
jmp r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx edi
push ecx
mov ecx esi
call sub_10003bc0
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
mov ecx esi
mov ecx [ esi ]
jmp r-xdata
sub eax edx
lea ecx [ ebp - 0x2304 ]
sar eax 0x1
push ecx
mov ecx eax
lea ebx [ ebp - 0x2320 ]
call sub_100088b0
add esp 0x4
xor ebx ebx
push ebx
push eax
or eax 0xffffffff
mov edi esi
mov [ ebp - 0x4 ] 0x1
call sub_10003b20
mov [ ebp - 0x4 ] bl
cmp [ ebp - 0x230c ] 0x10
jb r-xdata
mov al [ ecx ]
mov [ edx ] al
inc ecx
inc edx
test al al
jne r-xdata
xor ecx ecx
mov edx ebx
mov [ ebp - 0x230c ] 0xf
mov [ ebp - 0x2310 ] ebx
mov [ ebp - 0x2320 ] bl
jmp r-xdata
mov edx [ ebp - 0x2320 ]
push edx
call sub_100098f5
add esp 0x4
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax esi
cmp ecx eax
jae r-xdata
mov eax [ ebp - 0x2324 ]
mov eax [ eax + 0x30 ]
inc eax
push eax
call sub_10009ff1
add esp 0x4
cmp [ esi + 0x14 ] 0x10
mov ebx eax
jb r-xdata
mov eax ebx
lea edx [ eax + 0x1 ]
mov edi edi
cmp [ ecx + ebx ] 0x20
jge r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov esi [ ebp - 0x2324 ]
sub eax edx
mov edi eax
add esi 0x20
mov eax ebx
call sub_10001f40
push ebx
call sub_1000a366
mov ecx [ ebp - 0x2334 ]
add esp 0x4
test ecx ecx
je r-xdata
cmp [ ecx + ebx ] 0x27
jne r-xdata
mov [ ecx + ebx ] 0x20
mov eax 0x1
jmp r-xdata
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
inc ecx
jmp r-xdata
mov [ ecx + ebx ] 0x22
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x14 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn
mov eax ebx
lea esi [ eax + 0x1 ]
sub_10006e20
push ebp
mov ebp esp
push 0xffffffff
push sub_10013ff8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
lea edx [ ebp - 0x2c ]
call sub_10006ea0
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x18 ] 0x8
mov eax [ ebp - 0x2c ]
jae r-xdata
call sub_10007dd0
mov [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x18 ] 0x8
jb r-xdata
lea eax [ ebp - 0x2c ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn
mov eax [ ebp - 0x2c ]
push eax
call sub_100098f5
add esp 0x4
sub_10006ea0
push ebp
mov ebp esp
push 0xffffffff
push sub_10013fc2
mov eax [ fs : 0x0 ]
push eax
sub esp 0x80c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov esi edx
mov edi ecx
mov [ ebp - 0x818 ] esi
mov [ ebp - 0x814 ] ebx
call sub_10007c80
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x814 ] 0x1
call sub_10006a10
mov ecx [ edi + 0x8 ]
mov ebx eax
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
call edx
push eax
lea eax [ ebp - 0x810 ]
push ebx
push eax
call [ wsprintfW@IAT ]
lea eax [ ebp - 0x810 ]
add esp 0xc
lea edx [ eax + 0x2 ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax edx
sar eax 0x1
push eax
lea eax [ ebp - 0x810 ]
mov ecx esi
call sub_100070c0
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn
sub_10006f60
push ebp
mov ebp esp
push 0xffffffff
push sub_10014508
mov eax [ fs : 0x0 ]
push eax
sub esp 0x28
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
lea edx [ ebp - 0x2c ]
call sub_10006ea0
mov [ ebp - 0x4 ] 0x0
mov eax [ ebp - 0x2c ]
mov edi 0x8
mov [ ebp - 0x30 ] 0x0
mov [ ebp - 0x34 ] 0x0
cmp [ ebp - 0x18 ] edi
jae r-xdata
lea ecx [ ebp - 0x34 ]
push ecx
lea ebx [ ebp - 0x30 ]
call sub_10007d30
test eax eax
jne r-xdata
lea eax [ ebp - 0x2c ]
cmp [ ebp - 0x34 ] 0x0
mov eax [ ebp - 0x30 ]
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x18 ] edi
jb r-xdata
push eax
call sub_1000a366
add esp 0x4
mov [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x18 ] edi
jb r-xdata
cmp [ eax ] 0x31
jne r-xdata
xor eax eax
mov edx [ ebp - 0x2c ]
push edx
jmp r-xdata
mov ecx [ ebp - 0x2c ]
push ecx
push eax
call sub_1000a366
add esp 0x4
mov [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x18 ] edi
jb r-xdata
call sub_100098f5
add esp 0x4
mov eax 0x1
jmp r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_100098f5
add esp 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn
sub_10007050
cmp esi edi
je r-xdata
mov eax esi
retn
cmp [ esi + 0x14 ] 0x8
jb r-xdata
xor ecx ecx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
mov [ esi ] cx
cmp [ edi + 0x14 ] 0x8
jae r-xdata
mov eax [ esi ]
push eax
call sub_100098f5
add esp 0x4
mov ecx [ edi ]
mov [ esi ] ecx
mov [ edi ] 0x0
mov edx [ edi + 0x10 ]
lea eax [ edx + edx + 0x2 ]
push eax
push edi
push esi
call sub_10009c90
add esp 0xc
jmp r-xdata
mov edx [ edi + 0x10 ]
mov [ esi + 0x10 ] edx
mov eax [ edi + 0x14 ]
mov [ esi + 0x14 ] eax
mov [ edi + 0x10 ] 0x0
mov [ edi + 0x14 ] 0x0
sub_100070c0
push ebp
mov ebp esp
push ebx
mov ebx eax
push edi
mov edi ecx
test ebx ebx
je r-xdata
mov eax [ edi + 0x10 ]
mov ecx [ ebp + 0x8 ]
or edx 0xffffffff
sub edx eax
cmp edx ecx
ja r-xdata
mov ecx [ edi + 0x14 ]
cmp ecx 0x8
jb r-xdata
test ecx ecx
je r-xdata
push r--data
call sub_1001258a
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
pop edi
pop ebx
pop ebp
retn 0x4
push esi
lea esi [ eax + ecx ]
mov eax edi
call sub_100053e0
test al al
je r-xdata
cmp ecx 0x8
jb r-xdata
cmp ebx eax
jb r-xdata
pop esi
cmp [ edi + 0x14 ] 0x8
jb r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
cmp ecx 0x8
jb r-xdata
mov edx [ edi + 0x10 ]
lea eax [ eax + edx * 2 ]
cmp eax ebx
jbe r-xdata
mov eax edi
xor ecx ecx
mov [ eax + esi * 2 ] cx
mov eax [ edi ]
xor ecx ecx
mov [ eax + esi * 2 ] cx
pop esi
mov eax edi
pop edi
pop ebx
pop ebp
retn 0x4
mov ecx [ ebp + 0x8 ]
lea edx [ ecx + ecx ]
mov ecx [ edi + 0x10 ]
push edx
lea edx [ eax + ecx * 2 ]
push ebx
push edx
call sub_10010060
add esp 0xc
cmp [ edi + 0x14 ] 0x8
mov [ edi + 0x10 ] esi
jb r-xdata
mov eax edi
sub ebx eax
mov eax [ ebp + 0x8 ]
sar ebx 0x1
push ebx
push edi
call sub_100071a0
pop edi
pop ebx
pop ebp
retn 0x4
mov eax [ edi ]
sub ebx eax
mov eax [ ebp + 0x8 ]
sar ebx 0x1
push ebx
push edi
call sub_100071a0
pop edi
pop ebx
pop ebp
retn 0x4
sub_100071a0
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
push ebx
mov ebx eax
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x10 ]
cmp eax ecx
jae r-xdata
sub eax ecx
cmp eax ebx
jae r-xdata
push r--data
call sub_100125d7
mov eax [ edi + 0x10 ]
or ecx 0xffffffff
sub ecx eax
cmp ecx ebx
ja r-xdata
mov ebx eax
test ebx ebx
je r-xdata
push r--data
call sub_1001258a
mov eax edi
pop ebx
pop ebp
retn 0x8
push esi
lea esi [ eax + ebx ]
mov eax edi
call sub_100053e0
test al al
je r-xdata
pop esi
mov ecx [ ebp + 0x8 ]
mov eax 0x8
cmp [ ecx + 0x14 ] eax
jb r-xdata
cmp [ edi + 0x14 ] eax
jb r-xdata
mov ecx [ ecx ]
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
xor ecx ecx
mov [ eax + esi * 2 ] cx
mov eax [ edi ]
xor ecx ecx
mov [ eax + esi * 2 ] cx
pop esi
mov eax edi
pop ebx
pop ebp
retn 0x8
lea edx [ ebx + ebx ]
push edx
mov edx [ ebp + 0xc ]
lea ecx [ ecx + edx * 2 ]
mov edx [ edi + 0x10 ]
push ecx
lea eax [ eax + edx * 2 ]
push eax
call sub_10010060
add esp 0xc
cmp [ edi + 0x14 ] 0x8
mov [ edi + 0x10 ] esi
jb r-xdata
sub_10007250
push ebp
mov ebp esp
mov edx 0x100
mov ecx esi
xor eax eax
lea esp [ esp ]
test edx edx
jne r-xdata
add ecx 0x2
dec edx
jne r-xdata
mov ecx 0x100
sub ecx edx
jmp r-xdata
mov eax 0x80070057
xor ecx ecx
cmp [ ecx ] ax
je r-xdata
jmp r-xdata
test eax eax
js r-xdata
pop ebp
retn 0x4
mov eax 0x100
sub eax ecx
lea ecx [ esi + ecx * 2 ]
mov edx 0x7fffffff
pop ebp
jmp sub_10007300
sub_100072a0
push ebp
mov ebp esp
xor eax eax
test ecx ecx
je r-xdata
mov eax 0x80070057
cmp ecx 0x7fffffff
jbe r-xdata
pop ebp
retn
push esi
push edi
lea esi [ ecx - 0x1 ]
mov ecx [ ebp + 0x8 ]
lea eax [ ebp + 0xc ]
push eax
push ecx
push esi
push ebx
xor edi edi
call sub_1000a442
add esp 0x10
test eax eax
js r-xdata
test eax eax
js r-xdata
xor eax eax
mov [ ebx + esi * 2 ] ax
mov edi 0x8007007a
cmp eax esi
ja r-xdata
jne r-xdata
mov eax edi
pop edi
pop esi
xor edx edx
mov eax edi
pop edi
mov [ ebx + esi * 2 ] dx
pop esi
pop ebp
retn
sub_10007300
push ebp
mov ebp esp
push ebx
push esi
mov esi eax
xor eax eax
push edi
test esi esi
je r-xdata
sub ecx 0x2
mov eax 0x8007007a
mov ebx [ ebp + 0x8 ]
mov edi edx
sub ebx ecx
test esi esi
jne r-xdata
movzx edx [ ebx + ecx ]
test dx dx
je r-xdata
pop edi
xor edx edx
pop esi
mov [ ecx ] dx
pop ebx
pop ebp
retn 0x4
mov [ ecx ] dx
add ecx 0x2
dec edi
dec esi
jne r-xdata
test edi edi
je r-xdata
pop edi
sub ecx 0x2
xor edx edx
pop esi
mov eax 0x8007007a
mov [ ecx ] dx
pop ebx
pop ebp
retn 0x4
sub_10007360
push ebp
mov ebp esp
sub esp 0x1ec
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
xor eax eax
push esi
push 0x11c
push eax
mov [ ebp - 0x1e8 ] eax
mov [ ebp - 0x1e4 ] eax
mov [ ebp - 0x1e0 ] eax
mov [ ebp - 0x1dc ] eax
mov [ ebp - 0x1d8 ] eax
mov [ ebp - 0x1d4 ] eax
mov [ ebp - 0x1d0 ] eax
mov [ ebp - 0x1cc ] eax
mov [ ebp - 0x1c8 ] eax
lea eax [ ebp - 0x1c0 ]
push eax
mov esi ecx
call sub_1000f660
add esp 0xc
lea ecx [ ebp - 0x1c0 ]
push ecx
mov [ ebp - 0x1c0 ] 0x11c
call [ GetVersionExW@IAT ]
test eax eax
jne r-xdata
push ebx
mov ebx [ GetModuleHandleW@IAT ]
push r--data
push r--data
call ebx
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
mov eax 0x1
pop esi
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn
lea eax [ ebp - 0x1e8 ]
push eax
call [ GetSystemInfo@IAT ]
lea edx [ ebp - 0x1e8 ]
push edx
call eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop ebx
xor ecx ebp
xor eax eax
pop esi
call sub_100098bc
mov esp ebp
pop ebp
retn
cmp [ ebp - 0x1bc ] 0x4
jbe r-xdata
cmp [ ebp - 0x1b0 ] 0x2
jne r-xdata
push edi
mov edi r--data
mov edx 0x100
mov eax esi
sub edi esi
test edx edx
jne r-xdata
movzx ecx [ edi + eax ]
test cx cx
je r-xdata
xor edx edx
cmp [ ebp - 0x1bc ] 0x6
mov [ eax ] dx
jne r-xdata
sub eax 0x2
mov [ eax ] cx
add eax 0x2
dec edx
jne r-xdata
mov edi 0x5
cmp [ ebp - 0x1bc ] edi
jne r-xdata
mov eax [ ebp - 0x1b8 ]
test eax eax
jne r-xdata
lea ecx [ edx + 0x7ffffefe ]
test ecx ecx
je r-xdata
jmp r-xdata
lea eax [ ebp - 0x1ac ]
lea edx [ eax + 0x2 ]
pop edi
jmp r-xdata
cmp [ ebp - 0x1b8 ] 0x2
jne r-xdata
cmp eax 0x1
je r-xdata
cmp [ ebp - 0xa6 ] 0x1
jne r-xdata
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
cmp [ ebp - 0x1b8 ] 0x1
jne r-xdata
push 0x59
call [ GetSystemMetrics@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0xa6 ] 0x1
jne r-xdata
cmp eax 0x2
jne r-xdata
push r--data
push r--data
jmp r-xdata
sub eax edx
sar eax 0x1
je r-xdata
cmp [ ebp - 0x1b8 ] 0x0
jne r-xdata
push r--data
call sub_10007250
test [ ebp - 0xa8 ] 0x200
je r-xdata
mov eax [ ebp - 0xa8 ]
test eax 0x2000
je r-xdata
push r--data
jmp r-xdata
push r--data
cmp eax 0x1
jne r-xdata
push r--data
push r--data
call ebx
push eax
call [ GetProcAddress@IAT ]
mov edx [ ebp - 0x1b8 ]
lea ecx [ ebp - 0x1c4 ]
push ecx
mov ecx [ ebp - 0x1bc ]
push 0x0
push 0x0
push edx
push ecx
call eax
mov eax [ ebp - 0x1c4 ]
dec eax
cmp eax 0x2f
ja r-xdata
call sub_10007250
mov eax [ ebp - 0x1b8 ]
mov ecx [ ebp - 0x1b4 ]
push ecx
push r--data
mov ecx 0x50
lea ebx [ ebp - 0xa4 ]
call sub_100072a0
add esp 0x8
mov edx ebx
push edx
call sub_10007250
cmp [ ebp - 0x1bc ] 0x6
jb r-xdata
push r--data
call sub_10007250
lea eax [ ebp - 0x1ac ]
push eax
call sub_10007250
push r--data
call sub_10007250
cmp [ ebp - 0xa6 ] 0x1
jne r-xdata
push r--data
push r--data
jmp r-xdata
test eax 0x8000
je r-xdata
push r--data
jmp r-xdata
call sub_10007250
cmp [ ebp - 0xa6 ] 0x1
je r-xdata
movzx edx [ eax + lookup_table_10007860 ]
jmp [ edx * 4 + jump_table_10007818 ]
cmp eax 0x2
jne r-xdata
push r--data
jmp r-xdata
pop ebx
mov eax 0x1
pop esi
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn
mov eax [ ebp - 0x1e8 ]
cmp ax 0x9
jne r-xdata
mov al [ ebp - 0xa8 ]
test al al
jns r-xdata
push r--data
jmp r-xdata
call sub_10007250
cmp [ ebp - 0x1bc ] edi
jne r-xdata
cmp [ ebp - 0xa6 ] 0x1
jne r-xdata
push r--data
jmp r-xdata
cmp [ ebp - 0x1bc ] edi
jne r-xdata
mov eax [ ebp - 0x1e8 ]
cmp ax 0x6
jne r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
push r--data
jmp r-xdata
call sub_10007250
test ax ax
jne r-xdata
push r--data
call sub_10007250
pop ebx
mov eax 0x1
pop esi
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn
test al 0x2
je r-xdata
push r--data
jmp r-xdata
call sub_10007250
push r--data
cmp [ ebp - 0x1e8 ] 0x9
jne r-xdata
cmp ax 0x9
jne r-xdata
mov al [ ebp - 0xa8 ]
test al al
jns r-xdata
call sub_10007250
push r--data
call sub_10007250
push r--data
push r--data
jmp r-xdata
push r--data
jmp r-xdata
mov eax [ ebp - 0xa8 ]
test eax 0x4000
je r-xdata
mov al [ ebp - 0xa8 ]
test al al
jns r-xdata
test al 0x2
je r-xdata
push r--data
jmp r-xdata
test al al
jns r-xdata
push r--data
jmp r-xdata
test al 0x2
je r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
call sub_10007250
test al 0x2
je r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
push r--data
jmp r-xdata
test eax 0x400
je r-xdata
push r--data
jmp r-xdata
push r--data
push r--data
jmp r-xdata
sub_10007872
adc [ ecx ] edx
adc [ ecx ] edx
adc [ ecx ] edx
movups [ ecx ] xmm2
adc [ ecx ] edx
adc [ ecx ] edx
adc [ ecx ] edx
adc [ ecx ] edx
adc [ ecx ] edx
adc [ ecx ] edx
adc [ ecx ] edx
adc [ ecx ] edx
adc [ ecx ] edx
adc [ ecx ] edx
adc [ ebx + 0x74c98508 ] cl
or [ ebx + 0x6a028b11 ] cl
add edi edi
rol bl 0x1
int3
sub_100078a0
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_100078d0
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100098f5
add esp 0x4
sub_100078d0
push esi
mov esi ecx
mov ecx [ esi + 0x8 ]
push edi
xor edi edi
mov [ esi ] r--data
cmp ecx edi
je r-xdata
mov ecx [ esi + 0xc ]
cmp ecx edi
je r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov [ esi + 0x8 ] edi
mov ecx [ esi + 0x10 ]
cmp ecx edi
je r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov [ esi + 0xc ] edi
mov ecx [ esi + 0x14 ]
cmp ecx edi
je r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov [ esi + 0x10 ] edi
mov ecx [ esi + 0x18 ]
cmp ecx edi
je r-xdata
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov [ esi + 0x14 ] edi
pop edi
pop esi
retn
mov eax [ ecx ]
mov edx [ eax ]
push 0x1
call edx
mov [ esi + 0x18 ] edi
sub_10007940
push ebp
mov ebp esp
push 0xffffffff
push sub_100144d7
mov eax [ fs : 0x0 ]
push eax
sub esp 0x68
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
push 0x14
mov [ ebp - 0x70 ] edi
call sub_10009900
xor ebx ebx
add esp 0x4
cmp eax ebx
je r-xdata
xor eax eax
mov [ eax ] r--data
mov [ eax + 0x4 ] ebx
mov [ eax + 0x8 ] ebx
mov [ eax + 0xc ] ebx
mov [ eax + 0x10 ] ebx
jmp r-xdata
xor esi esi
mov [ eax ] r--data
mov [ eax + 0x4c ] 0xf
mov [ eax + 0x48 ] ebx
mov [ eax + 0x38 ] bl
mov ecx 0x7
xor edx edx
mov [ eax + 0x68 ] ecx
mov [ eax + 0x64 ] ebx
mov [ eax + 0x54 ] dx
mov [ eax + 0x84 ] ecx
xor ecx ecx
mov [ eax + 0x80 ] ebx
mov [ eax + 0x70 ] cx
mov [ eax + 0x34 ] ebx
mov [ eax + 0x4 ] ebx
mov [ eax + 0x8 ] ebx
mov [ eax + 0xc ] ebx
mov [ eax + 0x10 ] ebx
mov [ eax + 0x14 ] ebx
mov [ eax + 0x1c ] ebx
mov [ eax + 0x20 ] ebx
mov [ eax + 0x24 ] ebx
mov [ eax + 0x28 ] ebx
mov esi eax
jmp r-xdata
push 0x8c
mov [ edi + 0x8 ] eax
call sub_10009900
add esp 0x4
cmp eax ebx
je r-xdata
push 0x4
mov [ edi + 0xc ] esi
call sub_10009900
add esp 0x4
cmp eax ebx
je r-xdata
cmp esi ebx
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
call sub_100057a0
test eax eax
jne r-xdata
xor eax eax
mov [ eax ] r--data
jmp r-xdata
xor esi esi
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
xor esi esi
push 0x4
call sub_10009900
add esp 0x4
cmp eax ebx
je r-xdata
mov ecx [ edi + 0x8 ]
mov [ edi + 0x10 ] eax
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
call eax
push 0xc
mov [ ebp - 0x68 ] eax
call sub_10009900
mov esi eax
add esp 0x4
mov [ ebp - 0x6c ] esi
mov [ ebp - 0x4 ] 0x5
cmp esi ebx
je r-xdata
xor ecx ecx
push esi
mov [ ebp - 0x50 ] 0x7
mov [ ebp - 0x54 ] ebx
mov [ ebp - 0x64 ] cx
call sub_100098f5
mov eax [ ebp - 0x2c ]
add esp 0x4
mov [ ebp - 0x68 ] ebx
mov [ ebp - 0x6c ] ebx
cmp [ ebp - 0x18 ] edi
jae r-xdata
mov eax [ ebp - 0x64 ]
push eax
call sub_100098f5
add esp 0x4
mov ecx [ ebp - 0x68 ]
xor eax eax
mov [ esi ] r--data
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] ecx
jmp r-xdata
mov ecx [ ebp - 0x68 ]
mov [ eax ] r--data
mov [ esi ] r--data
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] ecx
jmp r-xdata
lea edx [ ebp - 0x6c ]
push edx
lea ebx [ ebp - 0x68 ]
call sub_10007d30
test eax eax
jne r-xdata
lea eax [ ebp - 0x2c ]
mov [ ebp - 0x4 ] 0xffffffff
mov [ edi + 0x14 ] esi
lea esi [ ebp - 0x48 ]
call sub_10007c80
mov [ ebp - 0x4 ] 0x6
mov ecx [ edi + 0x8 ]
mov esi [ ecx ]
mov edx [ esi + 0x4 ]
call edx
mov ecx [ edi + 0x8 ]
push eax
mov eax [ esi + 0x10 ]
call eax
push ebx
lea edx [ ebp - 0x48 ]
mov esi eax
xor ecx ecx
push edx
or eax 0xffffffff
lea edi [ ebp - 0x2c ]
mov [ ebp - 0x18 ] 0x7
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x2c ] cx
call sub_100052b0
push 0x1
mov eax r--data
mov ecx edi
mov [ ebp - 0x4 ] 0x7
call sub_100070c0
mov edx esi
lea ecx [ ebp - 0x64 ]
call sub_10009760
push ebx
push eax
or eax 0xffffffff
mov [ ebp - 0x4 ] 0x8
call sub_100071a0
mov edi 0x8
mov [ ebp - 0x4 ] 0x7
cmp [ ebp - 0x50 ] edi
jb r-xdata
mov esi [ ebp - 0x70 ]
mov ecx [ esi + 0x14 ]
mov edx [ ebp - 0x6c ]
mov eax [ ecx ]
mov edi [ ebp - 0x68 ]
mov eax [ eax + 0x4 ]
push edx
push edi
call eax
push edi
mov [ esi + 0x18 ] eax
call sub_1000a366
xor edi edi
add esp 0x4
mov [ ebp - 0x4 ] 0x6
cmp [ esi + 0x18 ] edi
lea esi [ edi + 0x8 ]
jne r-xdata
mov esi edi
mov [ ebp - 0x4 ] 0x6
cmp [ ebp - 0x18 ] esi
jb r-xdata
cmp [ ebp - 0x18 ] esi
jb r-xdata
cmp [ ebp - 0x18 ] esi
jb r-xdata
xor ecx ecx
mov [ ebp - 0x4 ] 0xffffffff
mov [ ebp - 0x18 ] 0x7
mov [ ebp - 0x1c ] 0x0
mov [ ebp - 0x2c ] cx
cmp [ ebp - 0x34 ] esi
jb r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_100098f5
add esp 0x4
xor edx edx
mov [ ebp - 0x4 ] 0xffffffff
mov [ ebp - 0x18 ] 0x7
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x2c ] dx
cmp [ ebp - 0x34 ] esi
jb r-xdata
mov ecx [ ebp - 0x2c ]
push ecx
call sub_100098f5
add esp 0x4
xor edx edx
mov [ ebp - 0x4 ] 0xffffffff
mov [ ebp - 0x18 ] 0x7
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x2c ] dx
cmp [ ebp - 0x34 ] esi
jb r-xdata
mov ecx [ ebp - 0x2c ]
push ecx
call sub_100098f5
add esp 0x4
xor eax eax
jmp r-xdata
mov edx [ ebp - 0x48 ]
push edx
call sub_100098f5
add esp 0x4
mov eax 0x1
mov eax [ ebp - 0x48 ]
push eax
call sub_100098f5
add esp 0x4
mov eax [ ebp - 0x48 ]
push eax
call sub_100098f5
add esp 0x4
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn
sub_10007c80
push ebp
mov ebp esp
sub esp 0x214
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push 0x20a
lea eax [ ebp - 0x210 ]
push 0x0
push eax
mov [ ebp - 0x214 ] 0x0
call sub_1000f660
mov edx [ edi + 0x4 ]
add esp 0xc
push 0x104
lea ecx [ ebp - 0x210 ]
push ecx
push edx
call [ GetModuleFileNameW@IAT ]
lea eax [ ebp - 0x210 ]
push 0x5c
push eax
call sub_1000a45f
add esp 0x8
test eax eax
je r-xdata
xor edx edx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
lea eax [ ebp - 0x210 ]
mov [ esi ] dx
lea edx [ eax + 0x2 ]
nop
xor ecx ecx
mov [ eax ] cx
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax edx
sar eax 0x1
push eax
lea eax [ ebp - 0x210 ]
mov ecx esi
call sub_10005ba0
mov ecx [ ebp - 0x4 ]
xor ecx ebp
mov eax esi
call sub_100098bc
mov esp ebp
pop ebp
retn
sub_10007d30
push ebp
mov ebp esp
push ecx
push esi
push 0x0
push 0x0
push 0x3
push 0x0
push 0x1
push 0x80000000
push eax
call [ CreateFileW@IAT ]
mov esi eax
cmp esi 0xffffffff
jne r-xdata
push edi
push 0x0
push esi
call [ GetFileSize@IAT ]
mov edi eax
push edi
call sub_10009ff1
add esp 0x4
mov [ ebx ] eax
test eax eax
je r-xdata
xor eax eax
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call [ CloseHandle@IAT ]
pop edi
xor eax eax
pop esi
mov esp ebp
pop ebp
retn 0x4
push 0x0
lea ecx [ ebp - 0x4 ]
push ecx
push edi
push eax
push esi
mov [ ebp - 0x4 ] 0x0
call [ ReadFile@IAT ]
test eax eax
je r-xdata
mov eax [ ebx ]
push eax
call sub_1000a366
add esp 0x4
cmp edi [ ebp - 0x4 ]
jne r-xdata
mov edx [ ebp + 0x8 ]
push esi
mov [ edx ] edi
call [ CloseHandle@IAT ]
pop edi
mov eax 0x1
pop esi
mov esp ebp
pop ebp
retn 0x4
sub_10007dd0
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
mov esi eax
lea eax [ ebp - 0xc ]
push eax
lea ebx [ ebp - 0x4 ]
mov eax esi
mov [ ebp - 0x4 ] 0x0
call sub_10007d30
mov ebx [ CreateFileW@IAT ]
test eax eax
je r-xdata
push 0x0
push 0x0
push 0x4
push 0x0
push 0x0
push 0x40000000
push esi
call ebx
mov esi eax
cmp esi 0xffffffff
jne r-xdata
mov ecx [ ebp - 0x4 ]
push ecx
call sub_1000a366
add esp 0x4
push 0x0
push 0x0
push 0x5
push 0x0
push 0x0
push 0x40000000
push esi
call ebx
cmp eax 0xffffffff
je r-xdata
push 0x0
lea edx [ ebp - 0x8 ]
push edx
push 0x1
push r--data
push esi
mov [ ebp - 0x8 ] 0x0
call [ WriteFile@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn
call [ GetLastError@IAT ]
push eax
call [ CloseHandle@IAT ]
jmp r-xdata
push esi
call [ CloseHandle@IAT ]
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn
cmp [ ebp - 0x8 ] 0x1
jne r-xdata
push esi
call [ CloseHandle@IAT ]
pop esi
mov eax 0x1
pop ebx
mov esp ebp
pop ebp
retn
sub_10007ea0
push ebp
mov ebp esp
push 0xffffffff
push sub_10013cc8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x2c
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax 0x2b
call sub_10006990
mov ecx [ ebp + 0x8 ]
mov ecx [ ecx + 0x18 ]
mov edx [ ecx ]
push eax
mov eax [ edx + 0x10 ]
call eax
mov esi eax
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x28 ] esi
xor edi edi
mov [ ebp - 0x4 ] edi
cmp esi edi
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
test esi esi
je r-xdata
mov edx [ esi ]
mov eax [ edx + 0x28 ]
mov ecx esi
call eax
test eax eax
je r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
mov edx [ esi ]
mov eax [ edx + 0x2c ]
mov ecx esi
call eax
test eax eax
je r-xdata
mov edx [ esi ]
mov eax [ edx + 0x2c ]
mov ecx esi
mov [ ebp - 0x1c ] edi
call eax
test eax eax
je r-xdata
jmp r-xdata
mov edx [ esi ]
mov eax [ ebp - 0x1c ]
mov edx [ edx + 0x30 ]
push eax
mov ecx esi
call edx
mov esi eax
mov [ ebp - 0x2c ] esi
mov eax 0x2c
mov [ ebp - 0x4 ] 0x1
call sub_10006990
mov edi eax
mov eax 0x2d
call sub_10006990
mov ebx eax
mov eax 0x2e
call sub_10006990
mov [ ebp - 0x24 ] eax
mov eax [ esi ]
mov edx [ eax + 0x34 ]
push edi
mov ecx esi
call edx
mov edi eax
mov eax [ esi ]
mov edx [ eax + 0x34 ]
push ebx
mov ecx esi
call edx
mov ecx [ ebp - 0x24 ]
mov [ ebp - 0x10 ] eax
mov eax [ esi ]
mov edx [ eax + 0x34 ]
push ecx
mov ecx esi
call edx
mov ebx eax
mov [ ebp - 0x30 ] edi
mov ecx [ ebp - 0x10 ]
mov [ ebp - 0x34 ] ecx
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x4 ] 0x4
test edi edi
je r-xdata
mov [ ebp - 0x4 ] 0x3
test ebx ebx
je r-xdata
test ecx ecx
je r-xdata
mov [ ebp - 0x4 ] 0x2
test ecx ecx
je r-xdata
mov edx [ ebx ]
mov eax [ edx ]
push 0x1
mov ecx ebx
call eax
mov ecx [ ebp - 0x10 ]
test ebx ebx
je r-xdata
mov [ ebp - 0x4 ] 0x1
test edi edi
je r-xdata
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
mov eax [ edi ]
mov edx [ eax + 0x18 ]
mov ecx edi
call edx
mov ecx [ ebp - 0x10 ]
mov [ ebp - 0x24 ] eax
mov eax [ ecx ]
mov edx [ eax + 0x18 ]
call edx
mov [ ebp - 0x18 ] eax
mov eax [ ebx ]
mov edx [ eax + 0x20 ]
mov ecx ebx
call edx
mov edx [ ebp - 0x24 ]
mov [ ebp - 0x20 ] 0x0
test edx edx
je r-xdata
mov [ ebp - 0x4 ] 0x0
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
mov ecx [ ebp - 0x14 ]
mov esi [ ebp - 0x1c ]
mov edx [ ecx ]
mov eax [ edx + 0x2c ]
inc esi
mov [ ebp - 0x1c ] esi
call eax
cmp esi eax
mov esi [ ebp - 0x14 ]
jb r-xdata
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
mov eax [ ebp - 0x18 ]
test eax eax
je r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
cmp [ ebp - 0x20 ] 0x0
jne r-xdata
push eax
call sub_1000a366
add esp 0x4
push edx
call sub_1000a366
add esp 0x4
mov ecx [ ebp + 0x8 ]
mov ecx [ ecx + 0xc ]
push ecx
mov ecx [ ebp + 0x8 ]
push eax
mov eax [ ebp - 0x18 ]
push eax
push edx
mov edx [ ebp + 0xc ]
call sub_10008120
mov edx [ ebp - 0x24 ]
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x4 ] 0x3
mov edx [ ebx ]
mov eax [ edx ]
push 0x1
mov ecx ebx
call eax
mov ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x2
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
mov [ ebp - 0x4 ] 0x1
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
mov [ ebp - 0x4 ] 0x0
mov edx [ esi ]
mov eax [ edx ]
push 0x1
mov ecx esi
call eax
mov ecx [ ebp - 0x14 ]
mov [ ebp - 0x4 ] 0xffffffff
mov edx [ ecx ]
mov eax [ edx ]
push 0x1
call eax
mov eax [ ebp - 0x20 ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov ecx [ ebp - 0x10 ]
sub_10008120
push ebp
mov ebp esp
push 0xffffffff
push sub_10013c7b
mov eax [ fs : 0x0 ]
push eax
sub esp 0xc
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx ecx
mov eax edx
lea esi [ eax + 0x1 ]
nop
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov ecx [ ebx + 0x10 ]
sub eax esi
mov esi [ ecx ]
push eax
mov eax [ esi + 0x4 ]
push edx
call eax
mov edi eax
test edi edi
je r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x10
push 0xc
call sub_10009900
mov esi eax
add esp 0x4
mov [ ebp - 0x18 ] esi
xor eax eax
mov [ ebp - 0x4 ] eax
cmp esi eax
je r-xdata
xor esi esi
push 0x4
call sub_10009900
add esp 0x4
test eax eax
je r-xdata
mov eax [ ebp - 0x14 ]
mov ecx [ ebp + 0x8 ]
mov edx [ ebp + 0x14 ]
push esi
push eax
push ecx
mov ecx [ ebp + 0xc ]
push edx
mov edx [ ebp - 0x10 ]
push ebx
call sub_10008250
mov ebx eax
mov eax [ ebp - 0x10 ]
push eax
call sub_1000a366
mov edx [ esi ]
mov eax [ edx ]
add esp 0x4
push 0x1
mov ecx esi
call eax
mov edx [ edi ]
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
mov eax ebx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x10
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
mov eax [ edi ]
mov edx [ eax ]
push 0x1
mov ecx edi
call edx
xor eax eax
mov [ eax ] r--data
jmp r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x14 ] eax
mov edx [ esi ]
mov edx [ edx + 0xc ]
lea eax [ ebp - 0x14 ]
push eax
lea ecx [ ebp - 0x10 ]
push ecx
push edi
mov ecx esi
call edx
test eax eax
jne r-xdata
mov ecx [ ebp + 0x10 ]
mov [ esi + 0x4 ] eax
mov [ esi ] r--data
mov [ esi + 0x8 ] ecx
xor eax eax
jmp r-xdata
sub_10008250
push ebp
mov ebp esp
push 0xffffffff
push sub_10013c48
mov eax [ fs : 0x0 ]
push eax
sub esp 0x40
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
mov ebx [ ebp + 0x10 ]
mov [ ebp - 0x48 ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x38 ] ecx
mov ecx [ ebp + 0x18 ]
mov [ ebp - 0x4c ] edx
mov edx [ edi ]
mov [ ebp - 0x40 ] eax
mov eax [ edx + 0x8 ]
mov [ ebp - 0x3c ] ecx
mov ecx edi
mov [ ebp - 0x44 ] 0x0
call eax
mov esi eax
mov edx [ esi ]
mov eax [ edx + 0x8 ]
push ebx
mov ecx esi
call eax
mov ecx [ ebp - 0x40 ]
push ecx
mov ecx [ ebp - 0x4c ]
lea eax [ ebp - 0x2c ]
call sub_10009710
add esp 0x4
xor ebx ebx
mov [ ebp - 0x4 ] ebx
cmp [ ebp - 0x18 ] 0x10
mov eax [ ebp - 0x2c ]
jae r-xdata
mov edx [ esi ]
mov edx [ edx + 0x10 ]
push eax
mov eax [ ebp - 0x38 ]
push eax
mov ecx esi
call edx
mov eax [ edi ]
mov edx [ eax + 0x4 ]
mov ecx edi
mov [ ebp - 0x30 ] ebx
mov [ ebp - 0x34 ] ebx
call edx
mov edi eax
cmp edi ebx
je r-xdata
lea eax [ ebp - 0x2c ]
mov edi [ ebp - 0x44 ]
mov eax [ ebp - 0x48 ]
cmp [ eax + 0x1c ] ebx
jne r-xdata
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn 0x14
mov eax [ ebp - 0x2c ]
push eax
call sub_100098f5
add esp 0x4
mov eax [ edi ]
mov eax [ eax + 0x8 ]
lea ecx [ ebp - 0x34 ]
push ecx
lea edx [ ebp - 0x30 ]
push edx
push esi
mov ecx edi
call eax
mov edx [ edi ]
mov edx [ edx + 0x4 ]
lea eax [ ebp - 0x34 ]
push eax
lea ecx [ ebp - 0x30 ]
push ecx
push esi
mov ecx edi
call edx
jmp r-xdata
mov ecx [ ebp - 0x3c ]
mov edx [ ebp - 0x34 ]
push ecx
mov ecx [ ebp - 0x30 ]
call sub_100083a0
mov edx [ ebp - 0x30 ]
push edx
mov edi eax
call sub_1000a366
add esp 0x4
jmp r-xdata
mov edx [ edi ]
mov ebx eax
mov eax [ edx ]
push 0x1
mov ecx edi
call eax
test ebx ebx
je r-xdata
mov eax [ esi ]
mov edx [ eax ]
push 0x1
mov ecx esi
call edx
mov [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
sub_100083a0
push ebp
mov ebp esp
push 0xffffffff
push sub_10013c18
mov eax [ fs : 0x0 ]
push eax
sub esp 0x68
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x74 ] eax
mov eax 0x2f
mov esi ecx
mov edi edx
call sub_10006990
mov [ ebp - 0x68 ] eax
mov eax 0x30
call sub_10006990
mov [ ebp - 0x70 ] eax
xor ebx ebx
mov eax esi
lea esi [ ebp - 0x48 ]
mov [ ebp - 0x34 ] 0xf
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x48 ] bl
call sub_10001f40
mov [ ebp - 0x4 ] ebx
cmp [ ebp - 0x34 ] 0x10
jb r-xdata
lea esi [ ebp - 0x48 ]
jmp r-xdata
mov esi [ ebp - 0x48 ]
cmp esi ebx
je r-xdata
mov edi [ ebp - 0x68 ]
push edi
push esi
call sub_1000a0c0
mov esi eax
add esp 0x8
cmp esi ebx
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x34 ] 0x10
jb r-xdata
mov [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x34 ] 0x10
jb r-xdata
mov ecx [ ebp - 0x70 ]
push ecx
push esi
call sub_1000a0c0
mov edx eax
add esp 0x8
mov [ ebp - 0x6c ] edx
cmp edx ebx
je r-xdata
xor eax eax
push esi
mov eax [ ebp - 0x48 ]
push eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x34 ] 0x10
jb r-xdata
mov eax edi
lea edi [ eax + 0x1 ]
call sub_100098f5
add esp 0x4
mov ecx [ ebp - 0x48 ]
push ecx
jmp r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edi
mov edi edx
sub edi eax
mov eax [ ebp - 0x68 ]
sub edi esi
lea ecx [ eax + 0x1 ]
jmp r-xdata
mov dl [ eax ]
inc eax
cmp dl bl
jne r-xdata
sub eax ecx
add eax esi
lea esi [ ebp - 0x2c ]
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x2c ] bl
call sub_10001f40
mov [ ebp - 0x4 ] 0x1
mov ecx [ ebp - 0x2c ]
mov edi 0x10
cmp [ ebp - 0x18 ] edi
jae r-xdata
mov eax [ ebp - 0x1c ]
lea edx [ ebp - 0x64 ]
call sub_100096c0
mov [ ebp - 0x4 ] 0x2
mov eax [ ebp - 0x64 ]
cmp [ ebp - 0x50 ] edi
jae r-xdata
mov ecx esi
mov esi [ ebp - 0x54 ]
mov ecx [ ebp - 0x74 ]
mov edx [ ecx ]
push esi
push eax
mov eax [ edx + 0x4 ]
call eax
mov esi eax
cmp esi ebx
jne r-xdata
lea eax [ ebp - 0x64 ]
mov [ ebp - 0x4 ] 0x1
cmp [ ebp - 0x50 ] edi
jb r-xdata
mov esi [ ebp - 0x6c ]
mov eax esi
lea edx [ eax + 0x1 ]
mov edi edi
mov edi 0xf
mov [ ebp - 0x4 ] bl
cmp [ ebp - 0x18 ] 0x10
mov [ ebp - 0x50 ] edi
mov [ ebp - 0x54 ] ebx
mov [ ebp - 0x64 ] bl
jb r-xdata
mov edx [ ebp - 0x64 ]
push edx
call sub_100098f5
add esp 0x4
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
add esi eax
mov [ ebp - 0x4 ] 0x1
cmp [ ebp - 0x50 ] edi
jb r-xdata
mov [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x34 ] 0x10
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x2c ] bl
jb r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_100098f5
add esp 0x4
mov edi 0xf
mov [ ebp - 0x4 ] bl
cmp [ ebp - 0x18 ] 0x10
mov [ ebp - 0x50 ] edi
mov [ ebp - 0x54 ] ebx
mov [ ebp - 0x64 ] bl
jb r-xdata
mov ecx [ ebp - 0x64 ]
push ecx
call sub_100098f5
add esp 0x4
mov eax esi
jmp r-xdata
mov ecx [ ebp - 0x48 ]
push ecx
call sub_100098f5
add esp 0x4
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x2c ] bl
cmp esi ebx
jne r-xdata
mov edx [ ebp - 0x2c ]
push edx
call sub_100098f5
add esp 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn 0x4
mov esi [ ebp - 0x48 ]
sub_10008600
push ebp
mov ebp esp
push 0xffffffff
push sub_10013868
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ ebp - 0x4 ] 0x0
cmp [ esi + 0x34 ] 0x10
jb r-xdata
mov [ esi + 0x34 ] 0xf
mov [ esi + 0x30 ] 0x0
mov ecx esi
mov [ esi + 0x20 ] 0x0
mov [ ebp - 0x4 ] 0xffffffff
call sub_100078d0
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax [ esi + 0x20 ]
push eax
call sub_100098f5
add esp 0x4
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn 0x4
push esi
call sub_100098f5
add esp 0x4
sub_10008690
push ebp
mov ebp esp
push 0xffffffff
push sub_10013be3
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x3c
call sub_10009900
add esp 0x4
xor ebx ebx
cmp eax ebx
je r-xdata
xor eax eax
mov ecx [ rw-data ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ebx
mov [ eax + 0xc ] ebx
mov [ eax + 0x10 ] ebx
mov [ eax + 0x14 ] ebx
mov [ eax + 0x18 ] ebx
mov [ eax + 0x1c ] ebx
mov [ eax ] r--data
mov [ eax + 0x34 ] 0xf
mov [ eax + 0x30 ] ebx
mov [ eax + 0x20 ] bl
jmp r-xdata
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
call eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop ebx
mov esp ebp
pop ebp
retn
cmp ecx ebx
je r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov edx [ eax ]
mov [ rw-data ] eax
mov ecx eax
mov eax [ edx ]
call eax
mov ecx [ rw-data ]
test eax eax
jne r-xdata
mov [ rw-data ] ebx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop ebx
mov esp ebp
pop ebp
retn
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
push 0x1
call eax
sub_10008750
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_1000eb50
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x4 ] 0x0
push 0x8007
call [ SetErrorMode@IAT ]
call sub_10008690
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_10008800
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_1000eb50
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
cmp [ rw-data ] 0x0
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
push 0xffffffff
mov eax [ rw-data ]
push eax
call [ TerminateThread@IAT ]
push 0xffffffff
mov ecx [ rw-data ]
push ecx
call [ WaitForSingleObject@IAT ]
mov edx [ rw-data ]
push edx
call [ CloseHandle@IAT ]
mov [ rw-data ] 0x0
mov [ ebp - 0x4 ] 0x0
mov eax [ ecx ]
mov edx [ eax + 0xc ]
call edx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
sub_1000885c
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0xfffffffe
push 0xffffffff
mov eax [ rw-data ]
push eax
call [ TerminateThread@IAT ]
push 0xffffffff
mov ecx [ rw-data ]
push ecx
call [ WaitForSingleObject@IAT ]
mov edx [ rw-data ]
push edx
call [ CloseHandle@IAT ]
mov [ rw-data ] 0x0
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_100088b0
push ebp
mov ebp esp
push 0xffffffff
push sub_10013f79
mov eax [ fs : 0x0 ]
push eax
sub esp 0x48
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
xor esi esi
mov [ ebp - 0x4c ] esi
mov [ ebp - 0x54 ] ebx
mov [ ebp - 0x50 ] eax
mov edi ecx
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x2c ] 0x0
mov [ ebp - 0x4 ] 0x1
cmp edi esi
jbe r-xdata
mov edi 0x10
lea eax [ edi + 0x1 ]
push eax
call sub_10009ff1
mov esi eax
lea eax [ edi + 0x1 ]
push eax
push 0x0
push esi
call sub_1000f660
mov ecx [ ebp - 0x50 ]
add esp 0x10
push 0x0
push 0x0
push edi
push esi
push edi
push ecx
push 0x0
push 0xfde9
call [ WideCharToMultiByte@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x4c ] 0x1
cmp [ ebp - 0x18 ] edi
jb r-xdata
cmp [ ebx + 0x14 ] edi
jb r-xdata
mov eax esi
mov [ ebp - 0x34 ] 0xf
mov [ ebp - 0x38 ] 0x0
mov [ ebp - 0x48 ] 0x0
lea edx [ eax + 0x1 ]
push esi
call sub_1000a366
add esp 0x4
lea edi [ ebp - 0x2c ]
mov esi ebx
call sub_10001e40
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x18 ] 0x10
mov [ ebp - 0x4c ] 0x1
jb r-xdata
mov eax ebx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn
mov eax [ ebp - 0x2c ]
push eax
mov [ ebx + 0x14 ] 0xf
mov [ ebx + 0x10 ] esi
mov [ ebx ] 0x0
cmp [ ebp - 0x18 ] edi
jae r-xdata
mov eax [ ebx ]
push eax
call sub_100098f5
add esp 0x4
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov edi eax
mov eax esi
lea esi [ ebp - 0x48 ]
call sub_10001f40
mov edi esi
lea esi [ ebp - 0x2c ]
mov [ ebp - 0x4 ] 0x2
call sub_10003900
mov edi 0x10
mov [ ebp - 0x4 ] 0x1
cmp [ ebp - 0x34 ] edi
jb r-xdata
mov edx [ ebp - 0x2c ]
push edx
jmp r-xdata
mov eax [ ebp - 0x2c ]
mov [ ebx ] eax
mov [ ebp - 0x2c ] esi
mov eax [ ebp - 0x1c ]
inc eax
push eax
lea edx [ ebp - 0x2c ]
push edx
push ebx
call sub_10009c90
add esp 0xc
jmp r-xdata
xor esi esi
jmp r-xdata
mov eax [ ebp - 0x48 ]
push eax
call sub_100098f5
add esp 0x4
call sub_100098f5
add esp 0x4
mov ecx [ ebp - 0x1c ]
mov edx [ ebp - 0x18 ]
mov [ ebx + 0x10 ] ecx
mov [ ebx + 0x14 ] edx
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x18 ] esi
lea ecx [ ebp - 0x2c ]
mov [ ebx + 0x14 ] 0xf
mov [ ebx + 0x10 ] esi
mov [ ebx ] 0x0
cmp ebx ecx
je r-xdata
sub_10008a70
test ebx ebx
jne r-xdata
mov eax ebx
lea edx [ eax + 0x1 ]
lea esp [ esp ]
xor eax eax
retn
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push esi
lea esi [ eax + 0x1 ]
cmp esi 0x1
ja r-xdata
xor ecx ecx
mov eax esi
mov edx 0x2
mul edx
seto cl
push edi
neg ecx
or ecx eax
push ecx
call sub_10009ff1
mov edi eax
lea eax [ esi + esi ]
push eax
push 0x0
push edi
call sub_1000f660
add esp 0x10
lea eax [ esi - 0x1 ]
push eax
push edi
push eax
push ebx
push 0x0
push 0x0
call [ MultiByteToWideChar@IAT ]
test eax eax
jle r-xdata
push r--data
call [ SysAllocString@IAT ]
pop esi
retn
pop edi
xor eax eax
pop esi
retn
push edi
call [ SysAllocString@IAT ]
push edi
mov esi eax
call sub_1000a366
add esp 0x4
pop edi
mov eax esi
pop esi
retn
sub_10008b30
push ebp
mov ebp esp
push 0xffffffff
push sub_10014458
mov eax [ fs : 0x0 ]
push eax
sub esp 0x30
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx ecx
mov eax [ ebx + 0x30 ]
test eax eax
jne r-xdata
cmp [ ebx + 0x30 ] 0x0
je r-xdata
push ebx
lea edx [ ebp - 0x3c ]
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x3c ] 0x65726946
mov [ ebp - 0x38 ] 0x6c6c6177
mov [ ebp - 0x34 ] 0x646f7250
mov [ ebp - 0x30 ] 0x746375
call sub_10008db0
lea esi [ ebx + 0x20 ]
mov edi eax
mov [ ebp - 0x4 ] 0x0
call sub_10003900
mov [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
xor eax eax
cmp [ ebx + 0x34 ] 0x10
lea eax [ ebx + 0x20 ]
jb r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_100098f5
add esp 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn
mov eax [ eax ]
jmp r-xdata
sub_10008bf0
push ebp
mov ebp esp
push 0xffffffff
push sub_10014428
mov eax [ fs : 0x0 ]
push eax
sub esp 0x34
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx ecx
mov eax [ ebx + 0x14 ]
test eax eax
jne r-xdata
cmp [ ebx + 0x14 ] 0x0
je r-xdata
push ebx
lea edx [ ebp - 0x40 ]
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x40 ] 0x69746e41
mov [ ebp - 0x3c ] 0x75726956
mov [ ebp - 0x38 ] 0x6f725073
mov [ ebp - 0x34 ] 0x74637564
mov [ ebp - 0x30 ] al
call sub_10008db0
lea esi [ ebx + 0x4 ]
mov edi eax
mov [ ebp - 0x4 ] 0x0
call sub_10003900
mov [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x18 ] 0x10
jb r-xdata
xor eax eax
cmp [ ebx + 0x18 ] 0x10
lea eax [ ebx + 0x4 ]
jb r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_100098f5
add esp 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn
mov eax [ eax ]
jmp r-xdata
sub_10008cb0
push ebp
mov ebp esp
push 0xffffffff
push sub_10013839
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x3
mov eax [ esi + 0x58 ]
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
mov [ ebp - 0x4 ] 0x2
cmp [ esi + 0x50 ] 0x10
jb r-xdata
xor ebx ebx
mov [ esi + 0x50 ] 0xf
mov [ esi + 0x4c ] ebx
mov [ esi + 0x3c ] bl
mov [ ebp - 0x4 ] 0x1
cmp [ esi + 0x34 ] 0x10
jb r-xdata
mov eax [ esi + 0x3c ]
push eax
call sub_100098f5
add esp 0x4
mov [ esi + 0x34 ] 0xf
mov [ esi + 0x30 ] ebx
mov [ esi + 0x20 ] bl
mov [ ebp - 0x4 ] bl
cmp [ esi + 0x18 ] 0x10
jb r-xdata
mov eax [ esi + 0x20 ]
push eax
call sub_100098f5
add esp 0x4
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] ebx
mov [ esi + 0x4 ] bl
mov [ esi ] r--data
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ esi + 0x4 ]
push eax
call sub_100098f5
add esp 0x4
sub_10008d80
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10008cb0
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100098f5
add esp 0x4
sub_10008db0
push ebp
mov ebp esp
push 0xffffffff
push sub_100143f1
mov eax [ fs : 0x0 ]
push eax
sub esp 0x478
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
xor ebx ebx
mov [ ebp - 0x464 ] ebx
mov [ ecx + 0x14 ] 0xf
mov [ ecx + 0x10 ] ebx
mov [ ebp - 0x444 ] eax
mov [ ebp - 0x458 ] ecx
mov [ ebp - 0x454 ] edx
mov [ ecx ] bl
mov [ ebp - 0x4 ] ebx
mov al 0x6c
mov [ ebp - 0x464 ] 0x1
mov [ ebp - 0x18 ] 0x656c6553
mov [ ebp - 0x14 ] 0x207463
mov [ ebp - 0x24 ] 0x70736964
mov [ ebp - 0x20 ] al
mov [ ebp - 0x1f ] 0x614e7961
mov [ ebp - 0x1b ] 0x656d
mov [ ebp - 0x19 ] bl
mov [ ebp - 0x450 ] 0x6f726620
mov [ ebp - 0x44c ] 0x206d
mov [ ebp - 0x44a ] bl
xor ecx ecx
lea esp [ esp ]
mov dl [ ebp + ecx - 0x18 ]
mov [ ebp + ecx - 0x424 ] dl
inc ecx
cmp dl bl
jne r-xdata
lea ecx [ ebp - 0x24 ]
mov edx ecx
mov al [ ecx ]
inc ecx
cmp al bl
jne r-xdata
sub ecx edx
lea edi [ ebp - 0x424 ]
mov esi edx
mov edx ecx
dec edi
lea esp [ esp ]
mov al [ edi + 0x1 ]
inc edi
cmp al bl
jne r-xdata
mov ecx edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ ebp - 0x450 ]
mov edx ecx
mov edi edi
mov al [ ecx ]
inc ecx
cmp al bl
jne r-xdata
sub ecx edx
lea edi [ ebp - 0x424 ]
mov esi edx
mov edx ecx
dec edi
mov al [ edi + 0x1 ]
inc edi
cmp al bl
jne r-xdata
mov eax [ ebp - 0x454 ]
mov ecx edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov esi eax
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
lea edi [ ebp - 0x424 ]
sub eax esi
dec edi
mov cl [ edi + 0x1 ]
inc edi
cmp cl bl
jne r-xdata
mov ecx eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
lea ebx [ ebp - 0x424 ]
[ edi ] [ esi ]
call sub_10008a70
mov esi eax
mov [ ebp - 0x460 ] esi
mov [ ebp - 0x480 ] esi
lea ebx [ ebp - 0x24 ]
mov [ ebp - 0x4 ] 0x1
call sub_10008a70
mov edi eax
mov [ ebp - 0x46c ] edi
mov [ ebp - 0x484 ] edi
lea edx [ ebp - 0x45c ]
push edx
mov [ ebp - 0x4 ] 0x2
mov eax [ ebp - 0x444 ]
mov eax [ eax + 0x58 ]
xor ebx ebx
push ebx
push 0x20
push esi
mov [ ebp - 0x45c ] ebx
mov ecx [ eax ]
push r--data
push eax
mov eax [ ecx + 0x50 ]
call eax
cmp eax ebx
jl r-xdata
mov esi [ SysFreeString@IAT ]
cmp edi ebx
je r-xdata
mov eax [ ebp - 0x45c ]
mov [ ebp - 0x468 ] eax
lea edx [ ebp - 0x448 ]
push edx
lea edx [ ebp - 0x444 ]
push edx
mov [ ebp - 0x4 ] 0x3
push 0x1
mov [ ebp - 0x448 ] ebx
mov [ ebp - 0x444 ] ebx
mov ecx [ eax ]
push 0xffffffff
push eax
mov eax [ ecx + 0x10 ]
call eax
cmp eax ebx
jl r-xdata
mov eax [ ebp - 0x460 ]
cmp eax ebx
je r-xdata
push edi
call esi
mov [ ebp - 0x4 ] 0x2
mov eax [ ebp - 0x468 ]
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
cmp eax 0x1
je r-xdata
mov eax [ ebp - 0x458 ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn 0x4
push eax
call esi
xor eax eax
mov [ ebp - 0x454 ] eax
cmp [ ebp - 0x448 ] ebx
jbe r-xdata
mov eax [ ebp - 0x45c ]
lea edx [ ebp - 0x448 ]
push edx
lea edx [ ebp - 0x444 ]
push edx
push 0x1
mov [ ebp - 0x448 ] ebx
mov [ ebp - 0x444 ] ebx
mov ecx [ eax ]
push 0xffffffff
push eax
mov eax [ ecx + 0x10 ]
call eax
cmp eax ebx
jge r-xdata
mov edi edi
inc eax
mov [ ebp - 0x454 ] eax
cmp eax [ ebp - 0x448 ]
jb r-xdata
mov [ ebp - 0x14 ] esi
lea ecx [ ebp - 0x47c ]
mov edx ecx
push edx
mov [ ebp - 0x450 ] ecx
call [ VariantInit@IAT ]
push ebx
push ebx
lea ecx [ ebp - 0x47c ]
push ecx
push ebx
mov [ ebp - 0x4 ] 0x5
mov eax [ esi ]
mov edx [ eax + 0x10 ]
push edi
push esi
call edx
cmp eax ebx
jl r-xdata
mov esi [ ebp + eax * 4 - 0x444 ]
cmp esi ebx
je r-xdata
mov ecx [ ebp - 0x458 ]
push 0x2
mov eax r--data
call sub_10003bc0
cmp [ ebp - 0x47c ] 0x8
jne r-xdata
mov edx [ ebp - 0x474 ]
mov eax edx
lea edi [ eax + 0x2 ]
mov cx [ eax ]
add eax 0x2
cmp cx bx
jne r-xdata
sub eax edi
sar eax 0x1
push edx
mov ecx eax
lea ebx [ ebp - 0x440 ]
call sub_100088b0
add esp 0x4
push 0x0
mov [ ebp - 0x4 ] 0x6
mov edi [ ebp - 0x458 ]
push eax
or eax 0xffffffff
call sub_10003b20
mov [ ebp - 0x4 ] 0x5
cmp [ ebp - 0x42c ] 0x10
jb r-xdata
lea ecx [ ebp - 0x47c ]
push ecx
call [ VariantClear@IAT ]
mov [ ebp - 0x4 ] 0x3
mov edx [ esi ]
mov eax [ edx + 0x8 ]
push esi
call eax
mov edi [ ebp - 0x46c ]
mov eax [ ebp - 0x454 ]
xor ebx ebx
mov eax [ ebp - 0x440 ]
push eax
call sub_100098f5
add esp 0x4
jmp r-xdata
sub_10009150
push ebp
mov ebp esp
push 0xffffffff
push sub_100139d1
mov eax [ fs : 0x0 ]
push eax
sub esp 0x34
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x34 ] esi
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov [ esi ] r--data
mov eax 0xf
mov [ esi + 0x18 ] eax
mov [ esi + 0x14 ] ebx
mov [ esi + 0x4 ] bl
mov [ esi + 0x34 ] eax
mov [ esi + 0x30 ] ebx
mov [ esi + 0x20 ] bl
mov [ esi + 0x50 ] eax
mov [ esi + 0x4c ] ebx
mov [ esi + 0x3c ] bl
lea eax [ ebp - 0x30 ]
push eax
push r--data
push 0x1
push ebx
mov [ ebp - 0x4 ] 0x3
push r--data
mov [ ebp - 0x30 ] ebx
call [ CoCreateInstance@IAT ]
cmp eax ebx
jge r-xdata
mov edi [ ebp - 0x30 ]
mov [ ebp - 0x40 ] edi
mov [ ebp - 0x4 ] 0x4
lea ebx [ ebp - 0x24 ]
mov [ ebp - 0x24 ] 0x544f4f52
mov [ ebp - 0x20 ] 0x6365535c
mov [ ebp - 0x1c ] 0x74697275
mov [ ebp - 0x18 ] 0x6e654379
mov [ ebp - 0x14 ] 0x726574
call sub_10008a70
mov ebx eax
mov [ ebp - 0x3c ] ebx
lea ecx [ ebp - 0x2c ]
push ecx
push 0x0
push 0x0
push 0x0
push 0x0
mov [ ebp - 0x4 ] 0x5
mov eax [ ebp - 0x30 ]
push 0x0
push 0x0
mov [ ebp - 0x2c ] 0x0
mov edx [ eax ]
mov edx [ edx + 0xc ]
push ebx
push eax
call edx
test eax eax
jns r-xdata
push r--data
lea ecx [ ebp - 0x28 ]
push ecx
mov [ ebp - 0x28 ] 0x90001
call sub_1000acc0
mov ecx [ ebp - 0x2c ]
push 0x0
push 0x0
push 0x3
push 0x3
push 0x0
push 0x0
push 0xa
push ecx
call [ CoSetProxyBlanket@IAT ]
test eax eax
jns r-xdata
push r--data
lea eax [ ebp - 0x28 ]
push eax
mov [ ebp - 0x28 ] 0x90001
call sub_1000acc0
mov ecx [ ebp - 0x2c ]
mov [ esi + 0x58 ] ecx
test ebx ebx
je r-xdata
mov edx [ ebp - 0x2c ]
mov [ ebp - 0x38 ] edx
mov [ ebp - 0x4 ] 0x6
jmp r-xdata
mov [ ebp - 0x4 ] 0x3
test edi edi
je r-xdata
push ebx
call [ SysFreeString@IAT ]
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn
mov edx [ edi ]
mov eax [ edx + 0x8 ]
push edi
call eax
sub_100092c0
push ebp
mov ebp esp
sub esp 0x44
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
lea eax [ ebp - 0xc ]
push eax
xor edi edi
mov [ ebp - 0xc ] 0x686e6977
mov [ ebp - 0x8 ] 0x707474
mov [ ebp - 0x34 ] 0x486e6957
mov [ ebp - 0x30 ] 0x47707474
mov [ ebp - 0x2c ] 0x45497465
mov [ ebp - 0x28 ] 0x786f7250
mov [ ebp - 0x24 ] 0x6e6f4379
mov [ ebp - 0x20 ] 0x46676966
mov [ ebp - 0x1c ] 0x7543726f
mov [ ebp - 0x18 ] 0x6e657272
mov [ ebp - 0x14 ] 0x65735574
mov [ ebp - 0x10 ] 0x72
call [ LoadLibraryA@IAT ]
mov esi eax
test esi esi
je r-xdata
mov ecx [ ebp - 0x4 ]
mov eax edi
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_100098bc
mov esp ebp
pop ebp
retn
lea ecx [ ebp - 0x34 ]
push ecx
push esi
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push esi
call [ FreeLibrary@IAT ]
xor ecx ecx
lea edx [ ebp - 0x44 ]
push edx
mov [ ebp - 0x44 ] ecx
mov [ ebp - 0x40 ] ecx
mov [ ebp - 0x3c ] ecx
mov [ ebp - 0x38 ] ecx
call eax
test eax eax
je r-xdata
mov eax [ ebp - 0x3c ]
mov ebx [ GlobalFree@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x38 ]
test eax eax
je r-xdata
push eax
mov edi 0x1
call ebx
mov eax [ ebp - 0x40 ]
test eax eax
je r-xdata
push eax
call ebx
push eax
call ebx
sub_100093b0
push ebp
mov ebp esp
push 0xffffffff
push sub_10013bab
mov eax [ fs : 0x0 ]
push eax
push ecx
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push 0x0
push 0x0
push 0x3
push 0x0
push 0x0
push 0x0
push 0xffffffff
push 0x0
call [ CoInitializeSecurity@IAT ]
push 0x5c
call sub_10009900
add esp 0x4
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
push 0x1
call sub_10009900
mov esi eax
add esp 0x4
test esi esi
je r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn
mov esi eax
call sub_10009150
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn
xor esi esi
push 0x0
call [ CoInitialize@IAT ]
jmp r-xdata
mov [ rw-data ] esi
sub_10009460
push ebp
mov ebp esp
push ecx
push ebx
push edi
mov edi eax
lea ecx [ edi + 0x2 ]
mov eax 0xaaaaaaab
mul ecx
mov ebx edx
mov edx [ ebp + 0xc ]
shr ebx 0x1
add ebx ebx
add ebx ebx
push ebx
mov [ edx ] ebx
call sub_1000a4c7
add esp 0x4
mov [ ebp - 0x4 ] eax
test eax eax
jne r-xdata
push esi
xor esi esi
test edi edi
je r-xdata
pop edi
pop ebx
mov esp ebp
pop ebp
retn
mov eax 0xaaaaaaab
mul edi
shr edx 0x1
lea ecx [ edx + edx * 2 ]
sub edi ecx
mov edi [ edi * 4 + rw-data ]
pop esi
test edi edi
jle r-xdata
mov ecx eax
cmp esi edi
jae r-xdata
mov eax [ ebp - 0x4 ]
pop edi
pop ebx
mov esp ebp
pop ebp
retn
mov edx [ ebp - 0x4 ]
lea eax [ ebx + edx - 0x1 ]
xor eax eax
mov eax [ ebp + 0x8 ]
movzx eax [ esi + eax ]
inc esi
jmp r-xdata
mov [ eax ] 0x3d
dec eax
dec edi
jne r-xdata
mov [ ebp + 0xc ] 0x0
mov edx [ ebp + 0x8 ]
movzx edx [ esi + edx ]
mov [ ebp + 0xc ] edx
inc esi
jmp r-xdata
cmp esi edi
jae r-xdata
xor edx edx
mov edx [ ebp + 0x8 ]
movzx edx [ esi + edx ]
inc esi
jmp r-xdata
cmp esi edi
jae r-xdata
shl eax 0x8
add eax [ ebp + 0xc ]
add ecx 0x4
shl eax 0x8
add eax edx
mov edx eax
shr edx 0x12
and edx 0x3f
movzx edx [ edx + rw-data ]
mov [ ecx - 0x4 ] dl
mov edx eax
shr edx 0xc
and edx 0x3f
movzx edx [ edx + rw-data ]
mov [ ecx - 0x3 ] dl
mov edx eax
shr edx 0x6
and edx 0x3f
movzx edx [ edx + rw-data ]
and eax 0x3f
mov al [ eax + rw-data ]
mov [ ecx - 0x2 ] dl
mov [ ecx - 0x1 ] al
cmp esi edi
jb r-xdata
sub_10009570
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
push edi
mov edi [ rw-data ]
mov esi eax
test edi edi
jne r-xdata
mov ebx [ ebp + 0xc ]
test bl 0x3
je r-xdata
push 0x100
call sub_1000a4c7
mov ecx eax
add esp 0x4
mov [ rw-data ] ecx
xor eax eax
lea esp [ esp ]
mov ecx [ ebp + 0x8 ]
mov eax ebx
shr eax 0x2
cmp [ ecx + ebx - 0x1 ] 0x3d
lea eax [ eax + eax * 2 ]
mov [ esi ] eax
jne r-xdata
pop edi
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn
movzx edx [ eax + rw-data ]
mov [ edx + ecx ] al
inc eax
cmp eax 0x40
jl r-xdata
mov edi [ rw-data ]
cmp [ ecx + ebx - 0x2 ] 0x3d
jne r-xdata
dec eax
mov [ esi ] eax
mov eax [ esi ]
push eax
mov [ ebp - 0xc ] eax
call sub_1000a4c7
add esp 0x4
mov [ ebp - 0x8 ] eax
test eax eax
je r-xdata
dec [ esi ]
xor ecx ecx
xor esi esi
test ebx ebx
je r-xdata
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
jmp r-xdata
mov ebx [ ebp + 0x8 ]
mov al [ ecx + ebx ]
cmp al 0x3d
jne r-xdata
movsx eax al
movsx edx [ eax + edi ]
xor edx edx
jmp r-xdata
movsx eax al
movsx eax [ eax + edi ]
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x4 ] 0x0
jmp r-xdata
mov al [ ecx + ebx + 0x1 ]
inc ecx
inc ecx
cmp al 0x3d
jne r-xdata
movsx eax al
movsx ebx [ eax + edi ]
xor ebx ebx
jmp r-xdata
mov al [ ecx + ebx ]
cmp al 0x3d
jne r-xdata
movsx eax al
movsx edi [ eax + edi ]
xor edi edi
jmp r-xdata
mov eax [ ebp + 0x8 ]
mov al [ ecx + eax + 0x1 ]
inc ecx
cmp al 0x3d
jne r-xdata
cmp ecx [ ebp + 0xc ]
jb r-xdata
mov eax [ ebp - 0x8 ]
mov ebx edx
shr ebx 0x10
mov [ esi + eax ] bl
inc esi
cmp esi edi
jae r-xdata
shl edx 0x6
add edx [ ebp - 0x4 ]
inc ecx
shl edx 0x6
add edx ebx
shl edx 0x6
add edx edi
mov edi [ ebp - 0xc ]
cmp esi edi
jae r-xdata
mov edi [ rw-data ]
mov eax [ ebp - 0x8 ]
mov ebx edx
shr ebx 0x8
mov [ esi + eax ] bl
inc esi
cmp esi edi
jae r-xdata
mov [ esi + eax ] dl
inc esi
sub_100096c0
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
push eax
xor edi edi
mov [ ebp - 0x4 ] edi
push ecx
lea eax [ ebp - 0x4 ]
mov esi edx
mov [ ebp - 0x4 ] edi
call sub_10009570
mov [ esi + 0x10 ] edi
mov edi [ ebp - 0x4 ]
mov [ esi + 0x14 ] 0xf
add esp 0x8
mov ebx eax
mov [ esi ] 0x0
call sub_10001f40
push ebx
call sub_1000a48d
add esp 0x4
pop edi
mov eax esi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10009710
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi eax
push edi
lea eax [ ebp - 0x4 ]
push eax
mov eax [ ebp + 0x8 ]
xor edi edi
mov [ ebp - 0x4 ] edi
push ecx
mov [ ebp - 0x4 ] edi
call sub_10009460
mov [ esi + 0x10 ] edi
mov edi [ ebp - 0x4 ]
mov [ esi + 0x14 ] 0xf
add esp 0x8
mov ebx eax
mov [ esi ] 0x0
call sub_10001f40
push ebx
call sub_1000a48d
add esp 0x4
pop edi
mov eax esi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10009760
push ebp
mov ebp esp
push 0xffffffff
push sub_10014361
mov eax [ fs : 0x0 ]
push eax
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx edx
mov esi ecx
mov eax ebx
mov [ ebp - 0x38 ] esi
mov [ ebp - 0x30 ] 0x0
lea edx [ eax + 0x1 ]
mov edi edi
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
xor ecx ecx
inc eax
mov edx 0x2
mul edx
seto cl
neg ecx
or ecx eax
push ecx
call sub_10009ff1
mov edi eax
mov eax ebx
add esp 0x4
lea edx [ eax + 0x1 ]
lea ebx [ ebx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov ecx ebx
sub eax edx
lea edx [ ecx + 0x1 ]
mov [ ebp - 0x34 ] edx
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx [ ebp - 0x34 ]
inc eax
push eax
push edi
inc ecx
push ecx
push ebx
xor ebx ebx
push ebx
push ebx
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
xor ecx ecx
mov eax edi
mov [ ebp - 0x18 ] 0x7
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x2c ] cx
lea edx [ eax + 0x2 ]
jmp r-xdata
push edi
call sub_1000a366
xor eax eax
add esp 0x4
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] ebx
mov [ esi ] ax
push ebx
mov eax r--data
mov ecx esi
call sub_10005ba0
jmp r-xdata
mov cx [ eax ]
add eax 0x2
cmp cx bx
jne r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_100098bc
mov esp ebp
pop ebp
retn
sub eax edx
sar eax 0x1
push eax
mov eax edi
lea ecx [ ebp - 0x2c ]
call sub_10005ba0
push edi
mov [ ebp - 0x4 ] 0x1
call sub_1000a366
xor edx edx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] ebx
add esp 0x4
lea edi [ ebp - 0x2c ]
mov [ esi ] dx
call sub_10007050
mov [ ebp - 0x4 ] 0x0
cmp [ ebp - 0x18 ] 0x8
mov [ ebp - 0x30 ] 0x1
jb r-xdata
mov eax [ ebp - 0x2c ]
push eax
call sub_100098f5
add esp 0x4
sub_10009900
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
jmp r-xdata
push [ ebp + 0x8 ]
call sub_1000a4c7
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call sub_1000ac98
pop ecx
test eax eax
je r-xdata
leave
retn
test [ rw-data ] 0x1
mov edi rw-data
mov esi r--data
jne r-xdata
push edi
lea ecx [ ebp - 0x10 ]
call sub_10009c5d
push r--data
lea eax [ ebp - 0x10 ]
push eax
mov [ ebp - 0x10 ] esi
call sub_1000acc0
int3
or [ rw-data ] 0x1
push 0x1
lea eax [ ebp - 0x4 ]
push eax
mov ecx edi
mov [ ebp - 0x4 ] r--data
call sub_10009b47
push sub_100145e0
mov [ rw-data ] esi
call sub_1000ac72
pop ecx
sub_10009980
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi + 0xc ] 0x0
test eax eax
jne r-xdata
mov ecx [ eax ]
mov [ esi ] ecx
mov eax [ eax + 0x4 ]
mov [ esi + 0x4 ] eax
call sub_1000b8db
mov [ esi + 0x8 ] eax
mov ecx [ eax + 0x6c ]
mov [ esi ] ecx
mov ecx [ eax + 0x68 ]
mov [ esi + 0x4 ] ecx
mov ecx [ esi ]
cmp ecx [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
mov eax [ esi + 0x8 ]
test [ eax + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
call sub_1000b6b2
mov [ esi ] eax
mov eax esi
pop esi
pop ebp
retn 0x4
or [ eax + 0x70 ] 0x2
mov [ esi + 0xc ] 0x1
jmp r-xdata
call sub_1000af2f
mov [ esi + 0x4 ] eax
sub_10009a07
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
movzx ecx [ edx ]
lea edi [ ecx - 0x41 ]
inc edx
cmp edi 0x19
ja r-xdata
add eax 0x20
test eax eax
je r-xdata
add ecx 0x20
pop edi
sub eax ecx
pop esi
pop ebp
retn
cmp eax ecx
je r-xdata
movzx eax [ esi ]
lea ecx [ eax - 0x41 ]
inc esi
cmp ecx 0x19
ja r-xdata
sub_10009a40
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_10009980
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
push esi
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
call sub_1000befe
mov [ eax ] 0x16
call sub_1000beac
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] 0x0
jne r-xdata
call sub_1000befe
mov [ eax ] 0x16
call sub_1000beac
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub ebx esi
push edi
push esi
push ebx
call sub_10009a07
pop ecx
pop ecx
jmp r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
leave
retn
sub edi eax
mov eax edi
pop edi
cmp edi eax
je r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
pop esi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
movzx eax [ ebx + esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1000bc0d
mov edi eax
movzx eax [ esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1000bc0d
add esp 0x10
inc esi
test edi edi
je r-xdata
sub_10009b00
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ rw-data ] eax
jne r-xdata
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10009a40
add esp 0xc
pop ebp
retn
cmp [ ebp + 0x8 ] eax
jne r-xdata
cmp [ ebp + 0xc ] eax
je r-xdata
call sub_1000befe
mov [ eax ] 0x16
call sub_1000beac
mov eax 0x7fffffff
pop ebp
retn
pop ebp
jmp sub_10009a07
sub_10009b71
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
push edi
mov edi ecx
je r-xdata
pop edi
pop ebp
retn 0x4
push esi
push [ ebp + 0x8 ]
call sub_1000bfb0
lea esi [ eax + 0x1 ]
push esi
call sub_1000a4c7
pop ecx
pop ecx
mov [ edi + 0x4 ] eax
test eax eax
je r-xdata
pop esi
push [ ebp + 0x8 ]
push esi
push eax
call sub_1000bf47
add esp 0xc
mov [ edi + 0x8 ] 0x1
sub_10009bcf
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
and [ esi + 0x4 ] 0x0
mov [ esi ] r--data
mov [ esi + 0x8 ] 0x0
push [ eax ]
call sub_10009b71
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10009bf6
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
mov edi ecx
cmp edi esi
je r-xdata
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
call sub_10009bb1
cmp [ esi + 0x8 ] 0x0
je r-xdata
mov eax [ esi + 0x4 ]
mov [ edi + 0x4 ] eax
push [ esi + 0x4 ]
mov ecx edi
call sub_10009b71
jmp r-xdata
sub_10009c36
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_10009bb1
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100098f5
pop ecx
sub_10009c5d
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
and [ esi + 0x4 ] 0x0
mov [ esi ] r--data
mov [ esi + 0x8 ] 0x0
call sub_10009bf6
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10009c90
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x80
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10009d14 ]
jmp [ ecx * 4 + jump_table_10009d94 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10009e00 ]
jmp r-xdata
jmp [ ecx * 4 + jump_table_10009f9c ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10009ea0 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10009f9c ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10009e00 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
push edi
mov eax esi
and eax 0xf
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10009f9c ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10009e00 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10009e00 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10009e00 ]
mov edx 0x10
sub edx eax
sub ecx edx
push ecx
mov eax edx
mov ecx eax
and ecx 0x3
je r-xdata
mov edx ecx
and ecx 0x7f
shr edx 0x7
je r-xdata
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10009f9c ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10009f9c ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10009f9c ]
shr eax 0x2
je r-xdata
mov dl [ esi ]
mov [ edi ] dl
inc esi
inc edi
dec ecx
jne r-xdata
test ecx ecx
je r-xdata
jmp r-xdata
pop ecx
jmp r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec eax
jne r-xdata
pop eax
pop esi
pop edi
pop ebp
retn
mov edx ecx
shr edx 0x4
test edx edx
je r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec edx
jne r-xdata
and ecx 0xf
je r-xdata
lea ebx [ ebx ]
mov eax ecx
shr ecx 0x2
je r-xdata
movdqa xmm0 [ esi ]
movdqa [ edi ] xmm0
lea esi [ esi + 0x10 ]
lea edi [ edi + 0x10 ]
dec edx
jne r-xdata
mov ecx eax
and ecx 0x3
je r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec ecx
jne r-xdata
mov al [ esi ]
mov [ edi ] al
inc esi
inc edi
dec ecx
jne r-xdata
sub_10009ffc
mov edi edi
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push ebx
mov ebx [ ebp + 0x10 ]
test ebx ebx
jne r-xdata
push esi
cmp ebx 0x4
jb r-xdata
xor eax eax
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
lea esi [ ebx - 0x4 ]
test esi esi
je r-xdata
pop ebx
leave
retn
cmp esi ebx
jb r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
mov dl [ eax ]
test dl dl
je r-xdata
xor eax eax
movzx eax [ eax - 0x4 ]
movzx ecx [ ecx - 0x4 ]
jmp r-xdata
cmp dl [ ecx - 0x4 ]
jne r-xdata
movzx eax [ eax ]
movzx ecx [ ecx ]
cmp dl [ ecx ]
jne r-xdata
sub eax ecx
jmp r-xdata
mov dl [ eax - 0x3 ]
test dl dl
je r-xdata
pop esi
inc eax
inc esi
inc ecx
movzx eax [ eax - 0x3 ]
movzx ecx [ ecx - 0x3 ]
jmp r-xdata
cmp dl [ ecx - 0x3 ]
jne r-xdata
mov dl [ eax - 0x2 ]
test dl dl
je r-xdata
movzx eax [ eax - 0x2 ]
movzx ecx [ ecx - 0x2 ]
jmp r-xdata
cmp dl [ ecx - 0x2 ]
jne r-xdata
mov dl [ eax - 0x1 ]
test dl dl
je r-xdata
movzx eax [ eax - 0x1 ]
movzx ecx [ ecx - 0x1 ]
jmp r-xdata
cmp dl [ ecx - 0x1 ]
jne r-xdata
add [ ebp - 0x4 ] 0x4
cmp [ ebp - 0x4 ] esi
jb r-xdata
mov dl [ eax ]
add eax 0x4
add ecx 0x4
test dl dl
je r-xdata
jmp r-xdata
mov esi [ ebp - 0x4 ]
jmp r-xdata
sub_1000a0c0
mov ecx [ esp + 0x8 ]
push edi
push ebx
push esi
mov dl [ ecx ]
mov edi [ esp + 0x10 ]
test dl dl
je r-xdata
mov eax edi
pop esi
pop ebx
pop edi
retn
mov dh [ ecx + 0x1 ]
test dh dh
je r-xdata
xor eax eax
pop esi
pop ebx
pop edi
mov al dl
jmp sub_1000c166
mov esi edi
mov ecx [ esp + 0x14 ]
mov al [ edi ]
add esi 0x1
cmp al dl
je r-xdata
mov al [ esi ]
add esi 0x1
cmp al dh
jne r-xdata
test al al
je r-xdata
cmp al dl
je r-xdata
lea edi [ esi - 0x1 ]
pop esi
pop ebx
pop edi
xor eax eax
retn
mov al [ esi ]
add esi 0x1
test al al
jne r-xdata
lea eax [ edi - 0x1 ]
pop esi
pop ebx
pop edi
retn
mov al [ esi ]
add esi 0x2
cmp al ah
jne r-xdata
mov al [ ecx + 0x3 ]
test al al
je r-xdata
mov ah [ esi - 0x1 ]
add ecx 0x2
cmp al ah
je r-xdata
mov ah [ ecx + 0x2 ]
test ah ah
je r-xdata
jmp r-xdata
sub_1000a156
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_1000a146
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100098f5
pop ecx
sub_1000a177
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
add ecx 0x9
push ecx
add eax 0x9
push eax
call sub_1000c290
neg eax
pop ecx
sbb eax eax
pop ecx
inc eax
pop ebp
retn 0x4
sub_1000a197
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push ebx
push edi
xor ebx ebx
push 0x7
xor eax eax
pop ecx
lea edi [ ebp - 0x1c ]
mov [ ebp - 0x20 ] ebx
[ edi ]
cmp [ ebp + 0xc ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
call sub_1000befe
mov [ eax ] 0x16
call sub_1000beac
or eax 0xffffffff
jmp r-xdata
push esi
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x20 ] eax
lea eax [ ebp + 0x10 ]
push eax
push ebx
push [ ebp + 0xc ]
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x1c ] 0x7fffffff
mov [ ebp - 0x14 ] 0x42
call sub_1000c523
add esp 0x10
dec [ ebp - 0x1c ]
mov esi eax
js r-xdata
pop edi
pop ebx
leave
retn
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_1000c318
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
jmp r-xdata
mov eax esi
pop esi
sub_1000a21b
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
cmp [ ebp + 0x10 ] 0x0
push ebx
push esi
push edi
je r-xdata
xor eax eax
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_10009980
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
call sub_1000befe
mov [ eax ] 0x16
call sub_1000beac
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov edi 0x7fffffff
cmp [ ebp + 0x10 ] edi
jbe r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] 0x0
jne r-xdata
call sub_1000befe
mov [ eax ] 0x16
call sub_1000beac
cmp [ ebp - 0x4 ] 0x0
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub ebx esi
push [ ebp + 0x10 ]
push esi
push ebx
call sub_1000d0d0
add esp 0xc
mov eax edi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub edi eax
mov eax edi
jmp r-xdata
test edi edi
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp edi eax
je r-xdata
movzx eax [ ebx + esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1000bc0d
mov edi eax
movzx eax [ esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1000bc0d
add esp 0x10
inc esi
dec [ ebp + 0x10 ]
je r-xdata
sub_1000a2fd
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ rw-data ] eax
jne r-xdata
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000a21b
add esp 0x10
pop ebp
retn
cmp [ ebp + 0x8 ] eax
jne r-xdata
cmp [ ebp + 0xc ] eax
je r-xdata
call sub_1000befe
mov [ eax ] 0x16
call sub_1000beac
mov eax 0x7fffffff
pop ebp
retn
cmp [ ebp + 0x10 ] 0x7fffffff
ja r-xdata
pop ebp
jmp sub_1000d0d0
sub_1000a371
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push ebx
push edi
xor ebx ebx
push 0x7
xor eax eax
pop ecx
lea edi [ ebp - 0x1c ]
mov [ ebp - 0x20 ] ebx
[ edi ]
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
call sub_1000befe
mov [ eax ] 0x16
call sub_1000beac
or eax 0xffffffff
jmp r-xdata
mov [ ebp - 0x14 ] 0x42
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x20 ] esi
cmp eax 0x3fffffff
jbe r-xdata
cmp esi ebx
jne r-xdata
pop edi
pop ebx
leave
retn
add eax eax
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x1c ] 0x7fffffff
jmp r-xdata
call sub_1000befe
mov [ eax ] 0x16
call sub_1000beac
or eax 0xffffffff
jmp r-xdata
pop esi
dec [ ebp - 0x1c ]
js r-xdata
push [ ebp + 0x18 ]
lea eax [ ebp - 0x20 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push eax
call sub_1000d4a1
add esp 0x10
mov edi eax
cmp esi ebx
je r-xdata
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_1000c318
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
inc [ ebp - 0x20 ]
jmp r-xdata
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_1000c318
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
jmp r-xdata
dec [ ebp - 0x1c ]
js r-xdata
mov eax edi
sub_1000a45f
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov edx eax
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
mov cx [ ebp + 0xc ]
cmp [ eax ] cx
je r-xdata
cmp [ eax ] cx
jne r-xdata
pop ebp
retn
xor eax eax
sub eax 0x2
cmp eax edx
je r-xdata
sub_1000a48d
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop ebp
retn
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
push esi
call sub_1000befe
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1000bebc
pop ecx
mov [ esi ] eax
pop esi
sub_1000a4c7
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
cmp ebx 0xffffffe0
ja r-xdata
push ebx
call sub_1000ac98
pop ecx
call sub_1000befe
mov [ eax ] 0xc
xor eax eax
push esi
push edi
test ebx ebx
je r-xdata
call sub_1000ab07
push 0x1e
call sub_1000a958
push 0xff
call sub_1000e0c2
xor eax eax
inc eax
mov eax ebx
jmp r-xdata
mov eax edi
pop edi
pop esi
jmp r-xdata
push 0xc
pop esi
cmp [ rw-data ] eax
je r-xdata
push eax
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
pop ebx
pop ebp
retn
call sub_1000befe
mov [ eax ] esi
push ebx
call sub_1000ac98
pop ecx
test eax eax
jne r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
jmp r-xdata
call sub_1000befe
mov [ eax ] esi
sub_1000a55b
push 0x8
push r--data
call sub_1000eaf0
mov eax [ ebp + 0xc ]
cmp eax 0x1
jne r-xdata
xor edi edi
cmp eax edi
jne r-xdata
call sub_1000e065
test eax eax
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rw-data ] edi
jle r-xdata
call sub_1000ba92
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp eax 0x3
jne r-xdata
call sub_1000b73d
push 0x214
push 0x1
call sub_1000e3a2
pop ecx
pop ecx
mov esi eax
cmp esi edi
je r-xdata
dec [ rw-data ]
mov [ ebp - 0x4 ] edi
cmp [ rw-data ] edi
jne r-xdata
call sub_1000ea9c
call [ GetCommandLineA@IAT ]
mov [ rw-data ] eax
call sub_1000ea05
mov [ rw-data ] eax
call sub_1000e43c
test eax eax
jns r-xdata
call sub_1000e083
jmp r-xdata
call sub_1000eb35
retn 0xc
xor eax eax
inc eax
push edi
call sub_1000ba24
pop ecx
push esi
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
test eax eax
je r-xdata
cmp [ ebp + 0x10 ] edi
jne r-xdata
call sub_1000e330
call sub_1000e94a
test eax eax
js r-xdata
call sub_1000b771
jmp r-xdata
push esi
call sub_1000a48d
pop ecx
jmp r-xdata
push edi
push esi
call sub_1000b7ae
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
mov [ esi ] eax
or [ esi + 0x4 ] 0xffffffff
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000a634
jmp r-xdata
call sub_1000e681
call sub_1000b771
call sub_1000e083
call sub_1000e681
jmp r-xdata
call sub_1000e6d4
test eax eax
js r-xdata
push 0x0
call sub_1000e143
pop ecx
test eax eax
jne r-xdata
inc [ rw-data ]
jmp r-xdata
sub_1000a6bf
push 0xc
push r--data
call sub_1000eaf0
mov edi ecx
mov esi edx
mov ebx [ ebp + 0x8 ]
xor eax eax
inc eax
mov [ ebp - 0x1c ] eax
test esi esi
jne r-xdata
and [ ebp - 0x4 ] 0x0
cmp esi eax
je r-xdata
cmp [ rw-data ] edx
je r-xdata
mov eax [ r--data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
xor eax eax
cmp [ ebp - 0x1c ] 0x0
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
push edi
push esi
push ebx
call DllMain
mov [ ebp - 0x1c ] eax
cmp esi 0x1
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
push edi
push esi
push ebx
call sub_1000a55b
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
push edi
push esi
push ebx
call sub_1000a55b
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
push edi
push eax
push ebx
call DllMain
push edi
push 0x0
push ebx
call sub_1000a55b
mov eax [ r--data ]
test eax eax
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
and [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push edi
push 0x0
push ebx
call eax
mov eax [ r--data ]
test eax eax
je r-xdata
call sub_1000eb35
retn
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
_start
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
jne r-xdata
push [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
call sub_1000a6bf
pop ecx
pop ebp
retn 0xc
call sub_1000ee49
sub_1000a7d8
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] edx
mov [ rw-data ] ebx
mov [ rw-data ] esi
mov [ rw-data ] edi
mov [ rw-data ] ss
mov [ rw-data ] cs
mov [ rw-data ] ds
mov [ rw-data ] es
mov [ rw-data ] fs
mov [ rw-data ] gs
pushfd
pop [ rw-data ]
mov eax [ ebp ]
mov [ rw-data ] eax
mov eax [ ebp + 0x4 ]
mov [ rw-data ] eax
lea eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebp - 0x320 ]
mov [ rw-data ] 0x10001
mov eax [ rw-data ]
mov [ rw-data ] eax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov eax [ rw-data ]
mov [ ebp - 0x328 ] eax
mov eax [ rw-data ]
mov [ ebp - 0x324 ] eax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
push 0x1
call sub_1000eee4
pop ecx
push 0x0
call [ SetUnhandledExceptionFilter@IAT ]
push r--data
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
push 0xc0000409
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
leave
retn
push 0x1
call sub_1000eee4
pop ecx
sub_1000a8de
call sub_1000ef41
test eax eax
je r-xdata
test [ rw-data ] 0x2
je r-xdata
push 0x16
call sub_1000ef4e
pop ecx
push 0x3
call sub_1000e31a
int3
push 0x1
push 0x40000015
push 0x3
call sub_1000bd31
add esp 0xc
sub_1000a911
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
mov eax [ rw-data ]
mov edx [ ebp + 0x8 ]
and edx [ ebp + 0xc ]
not ecx
and ecx eax
or ecx edx
mov [ rw-data ] ecx
pop ebp
retn
sub_1000a932
mov edi edi
push ebp
mov ebp esp
xor eax eax
mov eax [ eax * 8 + r--data ]
pop ebp
retn
inc eax
cmp eax 0x16
jb r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx [ eax * 8 + r--data ]
je r-xdata
xor eax eax
pop ebp
retn
sub_1000a958
mov edi edi
push ebp
mov ebp esp
sub esp 0x1fc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_1000a932
mov edi eax
xor ebx ebx
pop ecx
mov [ ebp - 0x1fc ] edi
cmp edi ebx
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_100098bc
leave
retn
push 0x3
call sub_1000f41d
pop ecx
cmp eax 0x1
je r-xdata
push 0xfffffff4
call [ GetStdHandle@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
push 0x3
call sub_1000f41d
pop ecx
test eax eax
jne r-xdata
cmp esi 0xffffffff
je r-xdata
cmp esi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
xor eax eax
push r--data
push 0x314
mov edi rw-data
push edi
call sub_1000f3ba
add esp 0xc
test eax eax
jne r-xdata
push ebx
lea eax [ ebp - 0x1fc ]
push eax
lea eax [ ebp - 0x1f8 ]
push eax
mov [ ebp - 0x5 ] bl
call sub_1000bfb0
pop ecx
push eax
lea eax [ ebp - 0x1f8 ]
push eax
push esi
call [ WriteFile@IAT ]
inc eax
cmp eax 0x1f4
jb r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
jmp r-xdata
push 0x104
mov esi rw-data
push esi
push ebx
mov [ rw-data ] ax
call [ GetModuleFileNameW@IAT ]
mov ebx 0x2fb
test eax eax
jne r-xdata
mov cl [ edi + eax * 2 ]
mov [ ebp + eax - 0x1f8 ] cl
cmp [ edi + eax * 2 ] bx
je r-xdata
call sub_1000be5a
push esi
call sub_1000f39f
inc eax
pop ecx
cmp eax 0x3c
jbe r-xdata
push r--data
push ebx
push esi
call sub_1000f3ba
add esp 0xc
test eax eax
je r-xdata
push r--data
mov esi 0x314
push esi
push edi
call sub_1000f25d
add esp 0xc
test eax eax
jne r-xdata
push esi
call sub_1000f39f
lea eax [ eax * 2 + rw-data ]
mov ecx eax
sub ecx esi
push 0x3
sar ecx 0x1
push r--data
sub ebx ecx
push ebx
push eax
call sub_1000f2d2
add esp 0x14
test eax eax
jne r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
push [ ebp - 0x1fc ]
push esi
push edi
call sub_1000f25d
add esp 0xc
test eax eax
jne r-xdata
push 0x12010
push r--data
push edi
call sub_1000f0f1
add esp 0xc
jmp r-xdata
sub_1000ab07
push 0x3
call sub_1000f41d
pop ecx
cmp eax 0x1
je r-xdata
push 0xfc
call sub_1000a958
push 0xff
call sub_1000a958
pop ecx
pop ecx
push 0x3
call sub_1000f41d
pop ecx
test eax eax
jne r-xdata
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_1000ab4f
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ DecodePointer@IAT ]
push edi
push [ rw-data ]
call esi
push [ rw-data ]
mov ebx eax
mov [ ebp - 0x4 ] ebx
call esi
mov esi eax
cmp esi ebx
jb r-xdata
xor eax eax
mov edi esi
sub edi ebx
lea eax [ edi + 0x4 ]
cmp eax 0x4
jb r-xdata
push ebx
call sub_1000f47c
mov ebx eax
lea eax [ edi + 0x4 ]
pop ecx
cmp ebx eax
jae r-xdata
push [ ebp + 0x8 ]
mov edi [ EncodePointer@IAT ]
call edi
mov [ esi ] eax
add esi 0x4
push esi
call edi
mov [ rw-data ] eax
mov eax [ ebp + 0x8 ]
jmp r-xdata
mov eax 0x800
cmp ebx eax
jae r-xdata
pop edi
pop esi
pop ebx
leave
retn
add eax ebx
cmp eax ebx
jb r-xdata
mov eax ebx
lea eax [ ebx + 0x10 ]
cmp eax ebx
jb r-xdata
push eax
push [ ebp - 0x4 ]
call sub_1000e3ee
pop ecx
pop ecx
test eax eax
jne r-xdata
push eax
push [ ebp - 0x4 ]
call sub_1000e3ee
pop ecx
pop ecx
test eax eax
je r-xdata
sar edi 0x2
push eax
lea esi [ eax + edi * 4 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
sub_1000ac05
mov edi edi
push esi
push 0x4
push 0x20
call sub_1000e3a2
pop ecx
pop ecx
mov esi eax
push esi
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
mov [ rw-data ] eax
test esi esi
jne r-xdata
and [ esi ] 0x0
xor eax eax
pop esi
retn
push 0x18
pop eax
pop esi
retn
sub_1000ac36
push 0xc
push r--data
call sub_1000eaf0
call sub_1000e0da
and [ ebp - 0x4 ] 0x0
push [ ebp + 0x8 ]
call sub_1000ab4f
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000ac6c
mov eax [ ebp - 0x1c ]
call sub_1000eb35
retn
sub_1000ac98
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0x8 ]
call eax
pop ecx
test eax eax
je r-xdata
xor eax eax
inc eax
pop ebp
retn
sub_1000acc0
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
push edi
push 0x8
pop ecx
mov esi r--data
lea edi [ ebp - 0x20 ]
[ edi ] [ esi ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0xc ]
pop edi
mov [ ebp - 0x4 ] eax
pop esi
test eax eax
je r-xdata
lea eax [ ebp - 0xc ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
call [ RaiseException@IAT ]
leave
retn 0x8
test [ eax ] 0x8
je r-xdata
mov [ ebp - 0xc ] 0x1994000
sub_1000ad0c
sub eax 0x3a4
je r-xdata
mov eax 0x411
retn
sub eax 0x4
je r-xdata
mov eax 0x804
retn
sub eax 0xd
je r-xdata
mov eax 0x412
retn
dec eax
je r-xdata
mov eax 0x404
retn
xor eax eax
retn
sub_1000ad3b
mov edi edi
push esi
push edi
mov esi eax
push 0x101
xor edi edi
lea eax [ esi + 0x1c ]
push edi
push eax
call sub_1000f660
xor eax eax
movzx ecx ax
mov eax ecx
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] edi
shl ecx 0x10
or eax ecx
lea edi [ esi + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
mov ecx rw-data
add esp 0xc
lea eax [ esi + 0x1c ]
sub ecx esi
mov edi 0x101
mov dl [ ecx + eax ]
mov [ eax ] dl
inc eax
dec edi
jne r-xdata
lea eax [ esi + 0x11d ]
mov esi 0x100
mov dl [ eax + ecx ]
mov [ eax ] dl
inc eax
dec esi
jne r-xdata
pop edi
pop esi
retn
sub_1000ad9f
mov edi edi
push ebp
mov ebp esp
sub esp 0x51c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push edi
lea eax [ ebp - 0x518 ]
push eax
push [ esi + 0x4 ]
call [ GetCPInfo@IAT ]
mov edi 0x100
test eax eax
je r-xdata
lea eax [ esi + 0x11d ]
mov [ ebp - 0x51c ] 0xffffff9f
xor ecx ecx
sub [ ebp - 0x51c ] eax
xor eax eax
cmp edx 0x19
ja r-xdata
or [ esi + ecx + 0x1d ] 0x10
lea edx [ ecx + 0x20 ]
jmp r-xdata
mov [ ebp + eax - 0x104 ] al
inc eax
cmp eax edi
jb r-xdata
mov al [ ebp - 0x512 ]
mov [ ebp - 0x104 ] 0x20
test al al
je r-xdata
mov [ eax ] 0x0
or [ esi + ecx + 0x1d ] 0x20
lea edx [ ecx - 0x20 ]
mov [ eax ] dl
jmp r-xdata
push 0x0
push [ esi + 0xc ]
lea eax [ ebp - 0x504 ]
push [ esi + 0x4 ]
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x1
push 0x0
call sub_1000f9ee
xor ebx ebx
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x204 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push edi
push [ esi + 0xc ]
push ebx
call sub_1000f8c1
add esp 0x44
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x304 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x200
push [ esi + 0xc ]
push ebx
call sub_1000f8c1
add esp 0x24
xor eax eax
lea ebx [ ebp - 0x511 ]
mov edx [ ebp - 0x51c ]
lea eax [ esi + ecx + 0x11d ]
add edx eax
lea ebx [ edx + 0x20 ]
cmp ebx 0x19
ja r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_100098bc
leave
retn
inc ecx
cmp ecx edi
jb r-xdata
test cl 0x2
je r-xdata
or [ esi + eax + 0x1d ] 0x10
mov cl [ ebp + eax - 0x204 ]
jmp r-xdata
mov al [ ebx + 0x1 ]
add ebx 0x2
test al al
jne r-xdata
sub eax ecx
inc eax
push eax
lea edx [ ebp + ecx - 0x104 ]
push 0x20
push edx
call sub_1000f660
add esp 0xc
mov [ esi + eax + 0x11d ] bl
or [ esi + eax + 0x1d ] 0x20
mov cl [ ebp + eax - 0x304 ]
mov [ esi + eax + 0x11d ] cl
jmp r-xdata
movzx ecx al
movzx eax [ ebx ]
cmp ecx eax
ja r-xdata
movzx ecx [ ebp + eax * 2 - 0x504 ]
test cl 0x1
je r-xdata
jmp r-xdata
inc eax
cmp eax edi
jb r-xdata
sub_1000af2f
push 0xc
push r--data
call sub_1000eaf0
call sub_1000b8db
mov edi eax
mov eax [ rw-data ]
test [ edi + 0x70 ] eax
je r-xdata
push 0xd
call sub_1000f629
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ edi + 0x68 ]
mov [ ebp - 0x1c ] esi
cmp esi [ rw-data ]
je r-xdata
cmp [ edi + 0x6c ] 0x0
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000afca
jmp r-xdata
test esi esi
je r-xdata
mov esi [ edi + 0x68 ]
test esi esi
jne r-xdata
mov eax [ rw-data ]
mov [ edi + 0x68 ] eax
mov esi [ rw-data ]
mov [ ebp - 0x1c ] esi
push esi
call [ InterlockedIncrement@IAT ]
push esi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax esi
call sub_1000eb35
retn
push 0x20
call sub_1000e33f
cmp esi rw-data
je r-xdata
push esi
call sub_1000a48d
pop ecx
sub_1000afd5
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
push ebx
lea ecx [ ebp - 0x10 ]
call sub_10009980
mov [ rw-data ] ebx
cmp esi 0xfffffffe
jne r-xdata
cmp esi 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp esi 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0x4 ]
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax esi
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_1000b051
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
call sub_1000afd5
mov edi eax
xor esi esi
mov [ ebp + 0x8 ] edi
cmp edi esi
jne r-xdata
mov [ ebp - 0x1c ] esi
xor eax eax
mov eax ebx
call sub_1000ad3b
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_1000f660
mov ecx [ ebp - 0x1c ]
add esp 0xc
imul ecx ecx 0x30
mov [ ebp - 0x20 ] esi
lea esi [ ecx + rw-data ]
mov [ ebp - 0x1c ] esi
jmp r-xdata
inc [ ebp - 0x1c ]
add eax 0x30
cmp eax 0xf0
jb r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_100098bc
leave
retn
cmp [ esi ] 0x0
jne r-xdata
cmp [ eax + rw-data ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov al [ esi + 0x1 ]
test al al
je r-xdata
mov esi [ ebp - 0x1c ]
inc [ ebp - 0x20 ]
add esi 0x8
cmp [ ebp - 0x20 ] 0x4
mov [ ebp - 0x1c ] esi
jb r-xdata
or eax 0xffffffff
cmp edi 0xfde9
je r-xdata
movzx edi [ esi ]
movzx eax al
jmp r-xdata
mov eax edi
mov [ ebx + 0x4 ] edi
mov [ ebx + 0x8 ] 0x1
call sub_1000ad0c
push 0x6
mov [ ebx + 0xc ] eax
lea eax [ ebx + 0x10 ]
lea ecx [ ecx + rw-data ]
pop edx
movzx eax di
push eax
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
cmp edi eax
jbe r-xdata
mov si [ ecx ]
mov [ eax ] si
add ecx 0x2
add eax 0x2
dec edx
jne r-xdata
mov esi ebx
call sub_1000ad9f
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
push edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x20 ]
mov al [ eax + rw-data ]
or [ ebx + edi + 0x1d ] al
movzx eax [ esi + 0x1 ]
inc edi
mov edi [ ebp + 0x8 ]
add esi 0x2
xor eax eax
jmp r-xdata
cmp [ rw-data ] esi
jne r-xdata
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_1000f660
xor edx edx
inc edx
add esp 0xc
mov [ ebx + 0x4 ] edi
mov [ ebx + 0xc ] esi
cmp [ ebp - 0x18 ] edx
jbe r-xdata
mov [ ebx + 0x8 ] esi
cmp [ ebp - 0x12 ] 0x0
je r-xdata
lea eax [ ebx + 0x1e ]
mov ecx 0xfe
lea esi [ ebp - 0x11 ]
or [ eax ] 0x8
inc eax
dec ecx
jne r-xdata
mov eax [ ebx + 0x4 ]
call sub_1000ad0c
mov [ ebx + 0xc ] eax
mov [ ebx + 0x8 ] edx
jmp r-xdata
movzx eax [ esi - 0x1 ]
movzx ecx cl
jmp r-xdata
xor eax eax
movzx ecx ax
mov eax ecx
shl ecx 0x10
or eax ecx
lea edi [ ebx + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
cmp eax ecx
jbe r-xdata
or [ ebx + eax + 0x1d ] 0x4
inc eax
add esi 0x2
cmp [ esi - 0x1 ] 0x0
jne r-xdata
mov cl [ esi ]
test cl cl
je r-xdata
sub_1000b23a
push 0x14
push r--data
call sub_1000eaf0
or [ ebp - 0x20 ] 0xffffffff
call sub_1000b8db
mov edi eax
mov [ ebp - 0x24 ] edi
call sub_1000af2f
mov ebx [ edi + 0x68 ]
mov esi [ ebp + 0x8 ]
call sub_1000afd5
mov [ ebp + 0x8 ] eax
cmp eax [ ebx + 0x4 ]
je r-xdata
and [ ebp - 0x20 ] 0x0
push 0x220
call sub_1000e35d
pop ecx
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ ebp - 0x20 ]
call sub_1000eb35
retn
mov ecx 0x88
mov esi [ edi + 0x68 ]
mov edi ebx
[ edi ] [ esi ]
and [ ebx ] 0x0
push ebx
push [ ebp + 0x8 ]
call sub_1000b051
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov esi [ ebp - 0x24 ]
push [ esi + 0x68 ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
cmp ebx rw-data
je r-xdata
mov [ esi + 0x68 ] ebx
push ebx
mov edi [ InterlockedIncrement@IAT ]
call edi
test [ esi + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x68 ]
cmp eax rw-data
je r-xdata
call sub_1000befe
mov [ eax ] 0x16
jmp r-xdata
push ebx
call sub_1000a48d
pop ecx
test [ rw-data ] 0x1
jne r-xdata
push eax
call sub_1000a48d
pop ecx
push 0xd
call sub_1000f629
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ ebx + 0x4 ]
mov [ rw-data ] eax
mov eax [ ebx + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebx + 0xc ]
mov [ rw-data ] eax
xor eax eax
xor eax eax
mov cx [ ebx + eax * 2 + 0x10 ]
mov [ eax * 2 + rw-data ] cx
inc eax
jmp r-xdata
xor eax eax
mov cl [ eax + ebx + 0x1c ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x5
jge r-xdata
push [ rw-data ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov cl [ eax + ebx + 0x11d ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x101
jge r-xdata
mov [ rw-data ] ebx
push ebx
call edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000b39b
jmp r-xdata
mov eax [ rw-data ]
cmp eax rw-data
je r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x100
jge r-xdata
push eax
call sub_1000a48d
pop ecx
sub_1000b3f2
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ InterlockedIncrement@IAT ]
push edi
mov edi [ ebp + 0x8 ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop edi
pop esi
pop ebx
pop ebp
retn
push eax
call esi
sub_1000b481
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
test edi edi
je r-xdata
mov eax edi
pop edi
pop ebp
retn
push ebx
push esi
mov esi [ InterlockedDecrement@IAT ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop esi
pop ebx
push eax
call esi
sub_1000b51a
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xbc ]
xor ebx ebx
push edi
cmp eax ebx
je r-xdata
mov eax [ esi + 0xc0 ]
cmp eax ebx
je r-xdata
cmp eax rw-data
je r-xdata
mov eax [ esi + 0xd4 ]
cmp eax rw-data
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb0 ]
cmp eax ebx
je r-xdata
lea edi [ esi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
cmp [ eax + 0xb4 ] ebx
jne r-xdata
mov eax [ esi + 0xc4 ]
sub eax 0xfe
push eax
call sub_1000a48d
mov eax [ esi + 0xcc ]
mov edi 0x80
sub eax edi
push eax
call sub_1000a48d
mov eax [ esi + 0xd0 ]
sub eax edi
push eax
call sub_1000a48d
push [ esi + 0xc0 ]
call sub_1000a48d
add esp 0x10
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x4 ] ebx
je r-xdata
mov eax [ edi ]
cmp eax ebx
je r-xdata
push eax
call sub_1000fa2e
push [ esi + 0xd4 ]
call sub_1000a48d
pop ecx
pop ecx
mov eax [ esi + 0xb8 ]
cmp eax ebx
je r-xdata
add edi 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ edi + 0x4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x8 ] rw-data
je r-xdata
push esi
call sub_1000a48d
pop ecx
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_1000a48d
pop ecx
push [ esi + 0xb0 ]
call sub_1000a48d
push [ esi + 0xbc ]
call sub_1000a48d
pop ecx
pop ecx
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_1000a48d
push [ esi + 0xbc ]
call sub_1000fe0e
pop ecx
pop ecx
push eax
call sub_1000a48d
pop ecx
push eax
call sub_1000a48d
push [ esi + 0xbc ]
call sub_1000fda5
pop ecx
pop ecx
sub_1000b665
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0xc ]
test edi edi
je r-xdata
xor eax eax
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
push esi
mov esi [ eax ]
cmp esi edi
je r-xdata
mov eax edi
pop esi
jmp r-xdata
push edi
mov [ eax ] edi
call sub_1000b3f2
pop ecx
test esi esi
je r-xdata
pop edi
pop ebp
retn
push esi
call sub_1000b481
cmp [ esi ] 0x0
pop ecx
jne r-xdata
cmp esi rw-data
je r-xdata
push esi
call sub_1000b51a
pop ecx
sub_1000b6b2
push 0xc
push r--data
call sub_1000eaf0
call sub_1000b8db
mov esi eax
mov eax [ rw-data ]
test [ esi + 0x70 ] eax
je r-xdata
push 0xc
call sub_1000f629
pop ecx
and [ ebp - 0x4 ] 0x0
push [ rw-data ]
add esi 0x6c
push esi
call sub_1000b665
pop ecx
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000b71f
jmp r-xdata
cmp [ esi + 0x6c ] 0x0
je r-xdata
test esi esi
jne r-xdata
call sub_1000b8db
mov esi [ eax + 0x6c ]
mov eax esi
call sub_1000eb35
retn
push 0x20
call sub_1000e33f
sub_1000b73d
mov edi edi
push esi
push [ rw-data ]
call [ TlsGetValue@IAT ]
mov esi eax
test esi esi
jne r-xdata
mov eax esi
pop esi
retn
push [ rw-data ]
call [ DecodePointer@IAT ]
mov esi eax
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
sub_1000b771
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push eax
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
or [ rw-data ] 0xffffffff
jmp sub_1000f4f9
push eax
call [ TlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_1000b7ae
push 0x8
push r--data
call sub_1000eaf0
push r--data
call [ GetModuleHandleW@IAT ]
mov esi [ ebp + 0x8 ]
mov [ esi + 0x5c ] r--data
and [ esi + 0x8 ] 0x0
xor edi edi
inc edi
mov [ esi + 0x14 ] edi
mov [ esi + 0x70 ] edi
mov [ esi + 0xc8 ] 0x43
mov [ esi + 0x14b ] 0x43
mov [ esi + 0x68 ] rw-data
push 0xd
call sub_1000f629
pop ecx
and [ ebp - 0x4 ] 0x0
push [ esi + 0x68 ]
call [ InterlockedIncrement@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000b850
push 0xc
call sub_1000f629
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebp + 0xc ]
mov [ esi + 0x6c ] eax
test eax eax
jne r-xdata
push [ esi + 0x6c ]
call sub_1000b3f2
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000b859
call sub_1000eb35
retn
mov eax [ rw-data ]
mov [ esi + 0x6c ] eax
sub_1000b862
mov edi edi
push esi
push edi
call [ GetLastError@IAT ]
push [ rw-data ]
mov edi eax
call sub_1000b73d
call eax
mov esi eax
test esi esi
jne r-xdata
push edi
call [ SetLastError@IAT ]
pop edi
mov eax esi
pop esi
retn
push 0x214
push 0x1
call sub_1000e3a2
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
test eax eax
je r-xdata
push esi
call sub_1000a48d
pop ecx
xor esi esi
push 0x0
push esi
call sub_1000b7ae
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
sub_1000b8f5
push 0x8
push r--data
call sub_1000eaf0
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_1000eb35
retn 0x4
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
mov eax [ esi + 0x2c ]
test eax eax
je r-xdata
push eax
call sub_1000a48d
pop ecx
mov eax [ esi + 0x34 ]
test eax eax
je r-xdata
push eax
call sub_1000a48d
pop ecx
mov eax [ esi + 0x3c ]
test eax eax
je r-xdata
push eax
call sub_1000a48d
pop ecx
mov eax [ esi + 0x40 ]
test eax eax
je r-xdata
push eax
call sub_1000a48d
pop ecx
mov eax [ esi + 0x44 ]
test eax eax
je r-xdata
push eax
call sub_1000a48d
pop ecx
mov eax [ esi + 0x48 ]
test eax eax
je r-xdata
push eax
call sub_1000a48d
pop ecx
mov eax [ esi + 0x5c ]
cmp eax r--data
je r-xdata
push eax
call sub_1000a48d
pop ecx
push 0xd
call sub_1000f629
pop ecx
and [ ebp - 0x4 ] 0x0
mov edi [ esi + 0x68 ]
test edi edi
je r-xdata
push eax
call sub_1000a48d
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000ba0f
push 0xc
call sub_1000f629
pop ecx
mov [ ebp - 0x4 ] 0x1
mov edi [ esi + 0x6c ]
test edi edi
je r-xdata
push edi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000ba1b
push esi
call sub_1000a48d
pop ecx
push edi
call sub_1000b481
pop ecx
cmp edi [ rw-data ]
je r-xdata
cmp edi rw-data
je r-xdata
cmp edi rw-data
je r-xdata
push edi
call sub_1000a48d
pop ecx
cmp [ edi ] 0x0
jne r-xdata
push edi
call sub_1000b51a
pop ecx
sub_1000ba24
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
retn
push 0x0
push eax
call [ TlsSetValue@IAT ]
push 0x0
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
push [ ebp + 0x8 ]
call sub_1000b8f5
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
pop esi
push [ rw-data ]
push [ rw-data ]
call esi
call eax
mov [ ebp + 0x8 ] eax
sub_1000ba92
mov edi edi
push edi
push r--data
call [ GetModuleHandleW@IAT ]
mov edi eax
test edi edi
jne r-xdata
push esi
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
cmp [ rw-data ] 0x0
mov esi [ TlsSetValue@IAT ]
mov [ rw-data ] eax
je r-xdata
call sub_1000b771
xor eax eax
pop edi
retn
mov eax [ TlsGetValue@IAT ]
mov [ rw-data ] eax
mov eax [ TlsFree@IAT ]
mov [ rw-data ] sub_1000b734
mov [ rw-data ] esi
mov [ rw-data ] eax
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
push [ rw-data ]
push eax
call esi
test eax eax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
call sub_1000e0ec
push [ rw-data ]
mov esi [ EncodePointer@IAT ]
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
mov [ rw-data ] eax
call sub_1000f4af
test eax eax
je r-xdata
test eax eax
jne r-xdata
call sub_1000b771
mov edi [ DecodePointer@IAT ]
push sub_1000b8f5
push [ rw-data ]
call edi
call eax
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
call [ TlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
push 0x214
push 0x1
call sub_1000e3a2
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call edi
call eax
test eax eax
je r-xdata
push 0x0
push esi
call sub_1000b7ae
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
xor eax eax
inc eax
jmp r-xdata
pop esi
pop edi
retn
sub_1000bc0d
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x18 ]
call sub_10009980
mov ebx [ ebp + 0x8 ]
mov esi 0x100
cmp ebx esi
jae r-xdata
mov eax [ ebp - 0x18 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov ecx [ ebp - 0x18 ]
cmp [ ecx + 0xac ] 0x1
jle r-xdata
call sub_1000befe
mov [ eax ] 0x2a
xor ecx ecx
mov [ ebp - 0x4 ] bl
mov [ ebp - 0x3 ] 0x0
inc ecx
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_1000ff0c
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ecx + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
and eax 0x1
lea eax [ ebp - 0x18 ]
push eax
push 0x1
push ebx
call sub_1000ff57
mov ecx [ ebp - 0x18 ]
add esp 0xc
jmp r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
cmp eax 0x1
movzx eax [ ebp - 0x8 ]
je r-xdata
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x4 ] al
mov [ ebp - 0x3 ] bl
mov [ ebp - 0x2 ] 0x0
pop ecx
jmp r-xdata
mov eax [ ecx + 0xcc ]
movzx eax [ eax + ebx ]
jmp r-xdata
test eax eax
je r-xdata
mov eax ebx
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx ecx [ ebp - 0x7 ]
shl eax 0x8
or eax ecx
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x4 ]
lea edx [ ebp - 0x8 ]
push 0x3
push edx
push ecx
lea ecx [ ebp - 0x4 ]
push ecx
push esi
push [ eax + 0x14 ]
lea eax [ ebp - 0x18 ]
push eax
call sub_1000f8c1
add esp 0x24
test eax eax
je r-xdata
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1000bd31
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x8 ]
push edi
cmp ebx 0xffffffff
je r-xdata
and [ ebp - 0x320 ] 0x0
push 0x4c
lea eax [ ebp - 0x31c ]
push 0x0
push eax
call sub_1000f660
lea eax [ ebp - 0x320 ]
mov [ ebp - 0x328 ] eax
lea eax [ ebp - 0x2d0 ]
add esp 0xc
mov [ ebp - 0x324 ] eax
mov [ ebp - 0x220 ] eax
mov [ ebp - 0x224 ] ecx
mov [ ebp - 0x228 ] edx
mov [ ebp - 0x22c ] ebx
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x234 ] edi
mov [ ebp - 0x208 ] ss
mov [ ebp - 0x214 ] cs
mov [ ebp - 0x238 ] ds
mov [ ebp - 0x23c ] es
mov [ ebp - 0x240 ] fs
mov [ ebp - 0x244 ] gs
pushfd
pop [ ebp - 0x210 ]
mov eax [ ebp + 0x4 ]
lea ecx [ ebp + 0x4 ]
mov [ ebp - 0x20c ] ecx
mov [ ebp - 0x2d0 ] 0x10001
mov [ ebp - 0x218 ] eax
mov ecx [ ecx - 0x4 ]
mov [ ebp - 0x21c ] ecx
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x320 ] ecx
mov ecx [ ebp + 0x10 ]
mov [ ebp - 0x31c ] ecx
mov [ ebp - 0x314 ] eax
call [ IsDebuggerPresent@IAT ]
push 0x0
mov edi eax
call [ SetUnhandledExceptionFilter@IAT ]
lea eax [ ebp - 0x328 ]
push eax
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
push ebx
call sub_1000eee4
pop ecx
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_100098bc
leave
retn
test edi edi
jne r-xdata
cmp ebx 0xffffffff
je r-xdata
push ebx
call sub_1000eee4
pop ecx
sub_1000be5a
mov edi edi
push esi
push 0x1
mov esi 0xc0000417
push esi
push 0x2
call sub_1000bd31
add esp 0xc
push esi
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
pop esi
retn
sub_1000be7f
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000be5a
int3
pop ebp
jmp eax
sub_1000bebc
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
xor ecx ecx
mov eax [ ecx * 8 + rw-data ]
pop ebp
retn
inc ecx
cmp ecx 0x2d
jb r-xdata
cmp eax [ ecx * 8 + rw-data ]
je r-xdata
lea ecx [ eax - 0x13 ]
cmp ecx 0x11
ja r-xdata
add eax 0xffffff44
push 0xe
pop ecx
cmp ecx eax
sbb eax eax
and eax ecx
add eax 0x8
pop ebp
retn
push 0xd
pop eax
pop ebp
retn
sub_1000bf24
mov edi edi
push ebp
mov ebp esp
push esi
call sub_1000bf11
mov ecx [ ebp + 0x8 ]
push ecx
mov [ eax ] ecx
call sub_1000bebc
pop ecx
mov esi eax
call sub_1000befe
mov [ eax ] esi
pop esi
pop ebp
retn
sub_1000bf47
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0x8 ]
push esi
push edi
test edx edx
je r-xdata
call sub_1000befe
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov eax [ ebp + 0x10 ]
test eax eax
jne r-xdata
mov esi edx
sub esi eax
mov [ edx ] al
jmp r-xdata
test edi edi
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ edx ] 0x0
call sub_1000befe
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov cl [ eax ]
mov [ esi + eax ] cl
inc eax
test cl cl
je r-xdata
call sub_1000beac
mov eax esi
jmp r-xdata
sub_1000bfb0
mov ecx [ esp + 0x4 ]
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
add ecx 0x1
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea eax [ ecx - 0x1 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ecx 0x3
jne r-xdata
lea eax [ ecx - 0x4 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ah ah
je r-xdata
add eax 0x0
lea esp [ esp ]
lea esp [ esp ]
lea eax [ ecx - 0x3 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff0000
je r-xdata
lea eax [ ecx - 0x2 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff000000
je r-xdata
jmp r-xdata
sub_1000c166
push ebx
mov ebx eax
shl eax 0x8
mov edx [ esp + 0x8 ]
test edx 0x3
je r-xdata
or ebx eax
push edi
mov eax ebx
shl ebx 0x10
push esi
or ebx eax
mov cl [ edx ]
add edx 0x1
cmp cl bl
je r-xdata
mov eax [ edx - 0x4 ]
cmp al bl
je r-xdata
and eax 0x81010100
je r-xdata
lea eax [ edx - 0x1 ]
pop ebx
retn
test cl cl
je r-xdata
lea eax [ edx - 0x4 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
mov ecx [ edx ]
mov edi 0x7efefeff
mov eax ecx
mov esi edi
xor ecx ebx
add esi eax
add edi ecx
xor ecx 0xffffffff
xor eax 0xffffffff
xor ecx edi
xor eax esi
add edx 0x4
and ecx 0x81010100
jne r-xdata
and eax 0x1010100
jne r-xdata
pop ebx
xor eax eax
retn
test edx 0x3
jne r-xdata
pop esi
pop edi
cmp ah bl
je r-xdata
and esi 0x80000000
jne r-xdata
lea eax [ edx - 0x3 ]
pop esi
pop edi
pop ebx
retn
test ah ah
je r-xdata
shr eax 0x10
cmp al bl
je r-xdata
lea eax [ edx - 0x2 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
cmp ah bl
je r-xdata
pop esi
pop edi
lea eax [ edx - 0x1 ]
pop ebx
retn
test ah ah
je r-xdata
jmp r-xdata
sub_1000c21e
push 0xc
push r--data
call sub_1000eaf0
push 0xe
call sub_1000f629
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000c285
call sub_1000eb35
retn
mov eax [ rw-data ]
mov edx rw-data
push [ esi + 0x4 ]
call sub_1000a48d
pop ecx
and [ esi + 0x4 ] 0x0
cmp [ eax ] ecx
jne r-xdata
mov edx eax
jmp r-xdata
mov ecx [ eax + 0x4 ]
mov [ edx + 0x4 ] ecx
push eax
call sub_1000a48d
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
sub_1000c290
mov edx [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
test edx 0x3
jne r-xdata
test edx 0x1
je r-xdata
mov eax [ edx ]
cmp al [ ecx ]
jne r-xdata
mov ax [ edx ]
add edx 0x2
cmp al [ ecx ]
jne r-xdata
mov al [ edx ]
add edx 0x1
cmp al [ ecx ]
jne r-xdata
sbb eax eax
shl eax 0x1
add eax 0x1
retn
or al al
je r-xdata
or al al
je r-xdata
add ecx 0x1
or al al
je r-xdata
xor eax eax
retn
cmp ah [ ecx + 0x1 ]
jne r-xdata
cmp ah [ ecx + 0x1 ]
jne r-xdata
test edx 0x2
je r-xdata
or ah ah
je r-xdata
or ah ah
je r-xdata
shr eax 0x10
cmp al [ ecx + 0x2 ]
jne r-xdata
add ecx 0x2
jmp r-xdata
or al al
je r-xdata
cmp ah [ ecx + 0x3 ]
jne r-xdata
add ecx 0x4
add edx 0x4
or ah ah
jne r-xdata
mov edi edi
sub_1000c318
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
mov esi [ ebp + 0xc ]
push esi
call sub_100110f7
mov [ ebp + 0xc ] eax
mov eax [ esi + 0xc ]
pop ecx
test al 0x82
jne r-xdata
test al 0x40
je r-xdata
call sub_1000befe
mov [ eax ] 0x9
push ebx
xor ebx ebx
test al 0x1
je r-xdata
call sub_1000befe
mov [ eax ] 0x22
jmp r-xdata
pop esi
leave
retn
mov eax [ esi + 0xc ]
and eax 0xffffffef
or eax 0x2
mov [ esi + 0xc ] eax
mov [ esi + 0x4 ] ebx
mov [ ebp - 0x4 ] ebx
test eax 0x10c
jne r-xdata
mov [ esi + 0x4 ] ebx
test al 0x10
je r-xdata
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
test [ esi + 0xc ] 0x108
push edi
je r-xdata
call sub_10010f41
add eax 0x20
cmp esi eax
je r-xdata
or eax 0x20
mov [ esi + 0xc ] eax
or eax 0xffffffff
jmp r-xdata
mov ecx [ esi + 0x8 ]
and eax 0xfffffffe
mov [ esi ] ecx
mov [ esi + 0xc ] eax
xor edi edi
inc edi
push edi
lea eax [ ebp + 0x8 ]
push eax
push [ ebp + 0xc ]
call sub_10010dce
add esp 0xc
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x8 ]
mov edi [ esi ]
lea ecx [ eax + 0x1 ]
mov [ esi ] ecx
mov ecx [ esi + 0x18 ]
sub edi eax
dec ecx
mov [ esi + 0x4 ] ecx
cmp edi ebx
jle r-xdata
push [ ebp + 0xc ]
call sub_10010eeb
pop ecx
test eax eax
jne r-xdata
call sub_10010f41
add eax 0x40
cmp esi eax
jne r-xdata
pop ebx
mov eax [ ebp + 0x8 ]
and eax 0xff
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp + 0xc ]
cmp ecx 0xffffffff
je r-xdata
push edi
push eax
push [ ebp + 0xc ]
call sub_10010dce
add esp 0xc
mov [ ebp - 0x4 ] eax
jmp r-xdata
push esi
call sub_10010ea2
pop ecx
pop edi
mov eax rw-data
cmp ecx 0xfffffffe
je r-xdata
mov eax [ esi + 0x8 ]
mov cl [ ebp + 0x8 ]
mov [ eax ] cl
jmp r-xdata
push 0x2
push ebx
push ebx
push ecx
call sub_100105e7
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
mov eax ecx
and eax 0x1f
mov edx ecx
sar edx 0x5
shl eax 0x6
add eax [ edx * 4 + rw-data ]
jmp r-xdata
cmp [ ebp - 0x4 ] edi
je r-xdata
test [ eax + 0x4 ] 0x20
je r-xdata
sub_1000c47c
test [ ecx + 0xc ] 0x40
je r-xdata
dec [ ecx + 0x4 ]
js r-xdata
cmp [ ecx + 0x8 ] 0x0
je r-xdata
movsx eax al
push ecx
push eax
call sub_1000c318
pop ecx
pop ecx
mov edx [ ecx ]
mov [ edx ] al
inc [ ecx ]
movzx eax al
jmp r-xdata
inc [ esi ]
retn
or [ esi ] eax
retn
cmp eax 0xffffffff
jne r-xdata
sub_1000c4af
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi eax
mov ebx ecx
call sub_1000befe
test [ edi + 0xc ] 0x40
mov eax [ eax ]
mov [ ebp - 0x4 ] eax
je r-xdata
call sub_1000befe
and [ eax ] 0x0
jmp r-xdata
cmp [ edi + 0x8 ] 0x0
jne r-xdata
test ebx ebx
jg r-xdata
add [ esi ] ebx
jmp r-xdata
mov eax [ ebp + 0x8 ]
mov al [ eax ]
mov ecx edi
dec ebx
call sub_1000c47c
inc [ ebp + 0x8 ]
cmp [ esi ] 0xffffffff
jne r-xdata
call sub_1000befe
cmp [ eax ] 0x0
jne r-xdata
pop esi
pop ebx
leave
retn
call sub_1000befe
cmp [ eax ] 0x2a
jne r-xdata
call sub_1000befe
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
mov ecx edi
mov al 0x3f
call sub_1000c47c
sub_1000c523
mov edi edi
push ebp
mov ebp esp
sub esp 0x278
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x14 ]
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
push edi
push [ ebp + 0x10 ]
mov edi [ ebp + 0xc ]
lea ecx [ ebp - 0x25c ]
mov [ ebp - 0x240 ] esi
mov [ ebp - 0x228 ] ebx
mov [ ebp - 0x248 ] eax
mov [ ebp - 0x210 ] eax
mov [ ebp - 0x234 ] eax
mov [ ebp - 0x218 ] eax
mov [ ebp - 0x230 ] eax
mov [ ebp - 0x244 ] eax
mov [ ebp - 0x238 ] eax
call sub_10009980
test esi esi
jne r-xdata
test [ esi + 0xc ] 0x40
jne r-xdata
call sub_1000befe
mov [ eax ] 0x16
call sub_1000beac
cmp [ ebp - 0x250 ] 0x0
je r-xdata
xor esi esi
cmp edi esi
je r-xdata
push esi
call sub_100110f7
pop ecx
mov edx rw-data
cmp eax 0xffffffff
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x254 ]
and [ eax + 0x70 ] 0xfffffffd
mov dl [ edi ]
xor ecx ecx
mov [ ebp - 0x224 ] esi
mov [ ebp - 0x220 ] esi
mov [ ebp - 0x24c ] esi
mov [ ebp - 0x211 ] dl
test dl dl
je r-xdata
mov ecx edx
cmp eax 0xfffffffe
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_100098bc
leave
retn
cmp [ ebp - 0x250 ] 0x0
je r-xdata
inc edi
mov [ ebp - 0x23c ] edi
cmp [ ebp - 0x224 ] esi
jl r-xdata
cmp eax 0xffffffff
je r-xdata
mov ecx eax
and ecx 0x1f
mov esi eax
sar esi 0x5
shl ecx 0x6
add ecx [ esi * 4 + rw-data ]
jmp r-xdata
mov eax [ ebp - 0x224 ]
mov eax [ ebp - 0x254 ]
and [ eax + 0x70 ] 0xfffffffd
lea eax [ edx - 0x20 ]
cmp al 0x58
ja r-xdata
mov eax edx
cmp eax 0xfffffffe
je r-xdata
test [ ecx + 0x24 ] 0x7f
jne r-xdata
xor eax eax
movsx eax dl
movsx eax [ eax + r--data ]
and eax 0xf
jmp r-xdata
mov ecx eax
and eax 0x1f
sar ecx 0x5
shl eax 0x6
add eax [ ecx * 4 + rw-data ]
jmp r-xdata
mov edi [ ebp - 0x23c ]
mov al [ edi ]
mov [ ebp - 0x211 ] al
test al al
je r-xdata
jmp [ eax * 4 + r-xdata ]
movsx eax [ ecx + eax * 8 + r--data ]
push 0x7
sar eax 0x4
pop ecx
mov [ ebp - 0x260 ] eax
cmp eax ecx
ja r-xdata
test [ eax + 0x24 ] 0x80
jne r-xdata
mov ecx [ ebp - 0x260 ]
mov ebx [ ebp - 0x228 ]
xor esi esi
mov dl al
jmp r-xdata
sub_1000d0d0
push ebp
mov ebp esp
push edi
push esi
push ebx
mov ecx [ ebp + 0x10 ]
or ecx ecx
je r-xdata
mov eax ecx
pop ebx
pop esi
pop edi
leave
retn
mov esi [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
mov bh 0x41
mov bl 0x5a
mov dh 0x20
lea ecx [ ecx ]
xor ecx ecx
cmp ah al
je r-xdata
or al al
je r-xdata
mov ecx 0xffffffff
jb r-xdata
add esi 0x1
add edi 0x1
cmp ah bh
jb r-xdata
neg ecx
cmp al bh
jb r-xdata
cmp ah bl
ja r-xdata
cmp ah al
jne r-xdata
cmp al bl
ja r-xdata
add ah dh
sub ecx 0x1
jne r-xdata
add al dh
mov ah [ esi ]
or ah ah
mov al [ edi ]
je r-xdata
sub_1000d131
mov edi edi
push ebp
mov ebp esp
sub esp 0x3c
push ebx
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x3c ]
call sub_10009980
mov ecx [ ebp + 0x10 ]
mov eax [ ebp + 0xc ]
xor ebx ebx
cmp ecx ebx
je r-xdata
cmp eax ebx
jne r-xdata
mov [ ecx ] eax
cmp [ ebp + 0x14 ] ebx
je r-xdata
call sub_1000befe
mov [ eax ] 0x16
call sub_1000beac
cmp [ ebp - 0x30 ] bl
je r-xdata
mov cl [ eax ]
push esi
mov esi [ ebp - 0x3c ]
push edi
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0x1 ] cl
lea edi [ eax + 0x1 ]
cmp [ ebp + 0x14 ] 0x2
jl r-xdata
xor eax eax
xor edx edx
jmp r-xdata
mov eax [ ebp - 0x34 ]
and [ eax + 0x70 ] 0xfffffffd
movzx eax [ ebp - 0x1 ]
mov ecx [ esi + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax 0x8
lea eax [ ebp - 0x3c ]
push eax
movzx eax [ ebp - 0x1 ]
push 0x8
push eax
call sub_1000ff57
mov esi [ ebp - 0x3c ]
add esp 0xc
jmp r-xdata
cmp [ ebp + 0x14 ] 0x24
jg r-xdata
pop ebx
leave
retn
cmp [ ebp - 0x1 ] 0x2d
mov [ ebp - 0x8 ] edi
jne r-xdata
mov al [ edi ]
mov [ ebp - 0x1 ] al
inc edi
jmp r-xdata
cmp eax ebx
je r-xdata
cmp [ ebp - 0x1 ] 0x2b
jne r-xdata
or [ ebp + 0x18 ] 0x2
jmp r-xdata
cmp [ esi + 0xac ] 0x1
jle r-xdata
push 0x10
pop ecx
cmp [ ebp + 0x14 ] ebx
jne r-xdata
mov al [ edi ]
inc edi
mov [ ebp - 0x8 ] edi
mov [ ebp - 0x1 ] al
cmp [ ebp + 0x14 ] ecx
jne r-xdata
cmp [ ebp - 0x1 ] 0x30
je r-xdata
mov eax [ ebp + 0x14 ]
cdq
push edx
mov edi eax
push edi
push 0xffffffff
push 0xffffffff
mov [ ebp - 0x28 ] edx
call sub_100112d0
mov [ ebp - 0x20 ] ebx
mov ebx [ esi + 0xc8 ]
mov [ ebp - 0x24 ] ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x18 ] edx
cmp [ ebp - 0x1 ] 0x30
jne r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0xa
jmp r-xdata
and eax 0x103
je r-xdata
movsx esi cl
sub esi 0x30
jmp r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] ecx
cmp al 0x58
je r-xdata
mov eax [ ebp + 0x18 ]
dec [ ebp - 0x8 ]
test al 0x8
jne r-xdata
lea eax [ ecx - 0x61 ]
cmp al 0x19
movsx eax cl
ja r-xdata
cmp esi [ ebp + 0x14 ]
jae r-xdata
mov al [ edi + 0x1 ]
add edi 0x2
mov [ ebp - 0x1 ] al
mov [ ebp - 0x8 ] edi
cmp al 0x58
jne r-xdata
mov [ ebp + 0x14 ] 0x8
jmp r-xdata
mov esi 0x7fffffff
mov ebx 0x80000000
test al 0x4
jne r-xdata
xor eax eax
cmp [ ebp + 0x10 ] eax
je r-xdata
lea esi [ eax - 0x37 ]
sub eax 0x20
mov ecx [ ebp - 0x10 ]
or [ ebp + 0x18 ] 0x8
cmp ecx [ ebp - 0x18 ]
jb r-xdata
call sub_1000befe
test [ ebp + 0x18 ] 0x1
mov [ eax ] 0x22
je r-xdata
test al 0x1
jne r-xdata
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x10 ] eax
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x8 ] ecx
push ecx
push [ ebp - 0x14 ]
push [ ebp - 0x28 ]
push edi
call sub_10011370
xor ecx ecx
add eax esi
adc edx ecx
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x10 ] edx
ja r-xdata
test [ ebp + 0x18 ] 0x2
je r-xdata
or [ ebp - 0x14 ] 0xffffffff
or [ ebp - 0x10 ] 0xffffffff
jmp r-xdata
mov eax [ ebp + 0x10 ]
pop edi
pop esi
test eax eax
je r-xdata
and eax 0x2
je r-xdata
mov cl [ ebp - 0x1 ]
movzx eax cl
movzx eax [ ebx + eax * 2 ]
mov edx eax
and edx 0x4
je r-xdata
mov eax [ ebp - 0x1c ]
cmp [ ebp - 0x14 ] eax
jne r-xdata
mov eax [ ebp - 0x14 ]
cmp eax [ ebp - 0x1c ]
jb r-xdata
or [ ebp - 0x14 ] 0xffffffff
mov [ ebp - 0x10 ] esi
and [ ebp - 0x14 ] 0x0
mov [ ebp - 0x10 ] ebx
jmp r-xdata
test [ ebp + 0x18 ] 0x2
je r-xdata
mov ecx [ ebp - 0x8 ]
mov [ eax ] ecx
test eax eax
jne r-xdata
cmp [ ebp - 0x10 ] ebx
ja r-xdata
or [ ebp + 0x18 ] 0x4
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
cmp ecx [ ebp - 0x18 ]
jne r-xdata
cmp [ ebp - 0x30 ] 0x0
je r-xdata
mov eax [ ebp - 0x14 ]
mov ecx [ ebp - 0x10 ]
neg eax
adc ecx 0x0
neg ecx
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x10 ] ecx
cmp [ ebp - 0x10 ] esi
jb r-xdata
jb r-xdata
mov eax [ ebp - 0x8 ]
mov al [ eax ]
inc [ ebp - 0x8 ]
mov [ ebp - 0x1 ] al
jmp r-xdata
xor eax eax
cmp eax [ ebp - 0x20 ]
jb r-xdata
mov eax [ ebp - 0x14 ]
mov edx [ ebp - 0x10 ]
mov eax [ ebp - 0x34 ]
and [ eax + 0x70 ] 0xfffffffd
ja r-xdata
cmp [ ebp - 0x14 ] 0x0
ja r-xdata
ja r-xdata
cmp [ ebp - 0x14 ] 0xffffffff
jbe r-xdata
cmp esi [ ebp - 0x24 ]
jbe r-xdata
sub_1000d3ce
mov edi edi
push ebp
mov ebp esp
xor eax eax
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
cmp [ rw-data ] eax
jne r-xdata
push eax
push rw-data
jmp r-xdata
call sub_1000d131
add esp 0x14
pop ebp
retn
sub_1000d3f9
mov edi edi
push ebp
mov ebp esp
test [ eax + 0xc ] 0x40
je r-xdata
push eax
push [ ebp + 0x8 ]
call sub_100113a4
pop ecx
pop ecx
mov ecx 0xffff
cmp ax cx
jne r-xdata
cmp [ eax + 0x8 ] 0x0
je r-xdata
inc [ esi ]
pop ebp
retn
or [ esi ] 0xffffffff
pop ebp
retn
sub_1000d428
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi eax
mov ebx ecx
call sub_1000befe
test [ edi + 0xc ] 0x40
mov eax [ eax ]
mov [ ebp - 0x4 ] eax
je r-xdata
call sub_1000befe
and [ eax ] 0x0
jmp r-xdata
cmp [ edi + 0x8 ] 0x0
jne r-xdata
test ebx ebx
jg r-xdata
add [ esi ] ebx
jmp r-xdata
mov eax [ ebp + 0x8 ]
movzx eax [ eax ]
push eax
mov eax edi
dec ebx
call sub_1000d3f9
add [ ebp + 0x8 ] 0x2
cmp [ esi ] 0xffffffff
pop ecx
jne r-xdata
call sub_1000befe
cmp [ eax ] 0x0
jne r-xdata
pop esi
pop ebx
leave
retn
call sub_1000befe
cmp [ eax ] 0x2a
jne r-xdata
call sub_1000befe
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
push 0x3f
mov eax edi
call sub_1000d3f9
pop ecx
sub_1000d4a1
mov edi edi
push ebp
mov ebp esp
sub esp 0x474
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
push edi
mov edi [ ebp + 0x14 ]
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x458 ]
mov [ ebp - 0x424 ] eax
mov [ ebp - 0x41c ] edi
mov [ ebp - 0x444 ] ebx
mov [ ebp - 0x408 ] ebx
mov [ ebp - 0x430 ] ebx
mov [ ebp - 0x40c ] ebx
mov [ ebp - 0x428 ] ebx
mov [ ebp - 0x448 ] ebx
mov [ ebp - 0x42c ] ebx
call sub_10009980
cmp [ ebp - 0x424 ] ebx
jne r-xdata
cmp esi ebx
je r-xdata
call sub_1000befe
mov [ eax ] 0x16
call sub_1000beac
cmp [ ebp - 0x44c ] bl
movzx edx [ esi ]
xor ecx ecx
mov [ ebp - 0x418 ] ebx
mov [ ebp - 0x414 ] ebx
mov [ ebp - 0x43c ] ebx
mov [ ebp - 0x420 ] edx
cmp dx bx
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x450 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0x44c ] 0x0
je r-xdata
push 0x2
pop ebx
add esi ebx
cmp [ ebp - 0x418 ] 0x0
mov [ ebp - 0x440 ] esi
jl r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_100098bc
leave
retn
mov eax [ ebp - 0x418 ]
mov eax [ ebp - 0x450 ]
and [ eax + 0x70 ] 0xfffffffd
lea eax [ edx - 0x20 ]
cmp ax 0x58
ja r-xdata
xor eax eax
movzx eax dx
movsx eax [ eax + r--data ]
and eax 0xf
jmp r-xdata
mov esi [ ebp - 0x440 ]
movzx eax [ esi ]
mov [ ebp - 0x420 ] eax
test ax ax
je r-xdata
jmp [ eax * 4 + jump_table_1000e045 ]
movsx eax [ ecx + eax * 8 + r--data ]
push 0x7
sar eax 0x4
pop ecx
mov [ ebp - 0x45c ] eax
cmp eax ecx
ja r-xdata
mov ecx [ ebp - 0x45c ]
mov edi [ ebp - 0x41c ]
mov edx eax
jmp r-xdata
xor eax eax
or [ ebp - 0x40c ] 0xffffffff
mov [ ebp - 0x460 ] eax
mov [ ebp - 0x448 ] eax
mov [ ebp - 0x430 ] eax
mov [ ebp - 0x428 ] eax
mov [ ebp - 0x408 ] eax
mov [ ebp - 0x42c ] eax
jmp r-xdata
movzx eax dx
sub eax 0x20
je r-xdata
cmp dx 0x2a
jne r-xdata
and [ ebp - 0x40c ] 0x0
jmp r-xdata
cmp dx 0x2a
jne r-xdata
movzx eax dx
cmp eax 0x49
je r-xdata
mov eax [ ebp - 0x424 ]
push edx
lea esi [ ebp - 0x418 ]
mov [ ebp - 0x42c ] 0x1
call sub_1000d3f9
jmp r-xdata
movzx eax dx
cmp eax 0x64
jg r-xdata
or [ ebp - 0x408 ] ebx
jmp r-xdata
sub eax 0x3
je r-xdata
mov eax [ ebp - 0x430 ]
imul eax eax 0xa
movzx ecx dx
lea eax [ eax + ecx - 0x30 ]
mov [ ebp - 0x430 ] eax
jmp r-xdata
add edi 0x4
mov [ ebp - 0x41c ] edi
mov edi [ edi - 0x4 ]
mov [ ebp - 0x430 ] edi
test edi edi
jns r-xdata
mov eax [ ebp - 0x40c ]
imul eax eax 0xa
movzx ecx dx
lea eax [ eax + ecx - 0x30 ]
mov [ ebp - 0x40c ] eax
jmp r-xdata
add edi 0x4
mov [ ebp - 0x41c ] edi
mov edi [ edi - 0x4 ]
mov [ ebp - 0x40c ] edi
test edi edi
jns r-xdata
movzx eax [ esi ]
cmp eax 0x36
jne r-xdata
cmp eax 0x68
je r-xdata
pop ecx
cmp eax 0x70
jg r-xdata
je r-xdata
or [ ebp - 0x408 ] 0x80
jmp r-xdata
sub eax 0x8
je r-xdata
or [ ebp - 0x408 ] 0x4
neg [ ebp - 0x430 ]
jmp r-xdata
or [ ebp - 0x40c ] 0xffffffff
jmp r-xdata
cmp eax 0x33
jne r-xdata
cmp [ esi + 0x2 ] 0x34
jne r-xdata
or [ ebp - 0x408 ] 0x20
jmp r-xdata
cmp eax 0x6c
je r-xdata
sub eax 0x73
je r-xdata
je r-xdata
or [ ebp - 0x408 ] 0x40
cmp eax 0x53
jg r-xdata
or [ ebp - 0x408 ] 0x1
jmp r-xdata
sub eax ebx
je r-xdata
cmp eax 0x64
je r-xdata
cmp [ esi + 0x2 ] 0x32
jne r-xdata
add esi 0x4
or [ ebp - 0x408 ] 0x8000
mov [ ebp - 0x440 ] esi
jmp r-xdata
cmp [ esi ] 0x6c
jne r-xdata
cmp eax 0x77
jne r-xdata
mov ebx [ ebp - 0x40c ]
cmp ebx 0xffffffff
jne r-xdata
sub eax ebx
je r-xdata
mov [ ebp - 0x40c ] 0x8
cmp eax 0x65
jl r-xdata
test ecx 0x1000
jne r-xdata
mov eax [ edi ]
mov edx [ edi + 0x4 ]
add edi 0x8
jmp r-xdata
sub eax 0x58
je r-xdata
je r-xdata
or [ ebp - 0x408 ] 0x4
jmp r-xdata
sub eax 0x3
jne r-xdata
cmp eax 0x69
je r-xdata
add esi 0x4
and [ ebp - 0x408 ] 0xffff7fff
mov [ ebp - 0x440 ] esi
jmp r-xdata
or [ ebp - 0x408 ] 0x10
jmp r-xdata
add esi ebx
or [ ebp - 0x408 ] 0x1000
mov [ ebp - 0x440 ] esi
jmp r-xdata
or [ ebp - 0x408 ] 0x800
jmp r-xdata
add edi 0x4
test [ ebp - 0x408 ] 0x20
mov [ ebp - 0x41c ] edi
mov edi [ edi - 0x4 ]
mov [ ebp - 0x410 ] edi
je r-xdata
mov ebx 0x7fffffff
mov [ ebp - 0x420 ] 0xa
sub eax 0x3
jne r-xdata
test [ ebp - 0x408 ] 0x80
mov [ ebp - 0x420 ] 0x10
je r-xdata
cmp [ ebp - 0x448 ] 0x0
jne r-xdata
cmp eax 0x67
jle r-xdata
add edi 0x4
test cl 0x20
je r-xdata
mov [ ebp - 0x41c ] edi
mov [ ebp - 0x444 ] ecx
jmp r-xdata
sub eax ebx
je r-xdata
test [ ebp - 0x408 ] 0x830
jne r-xdata
sub eax 0x41
je r-xdata
or [ ebp - 0x408 ] 0x8
jmp r-xdata
cmp eax 0x6f
je r-xdata
test edi edi
jne r-xdata
test edi edi
jne r-xdata
mov [ ebp - 0x444 ] 0x27
mov ecx [ ebp - 0x408 ]
test ecx 0x8000
je r-xdata
push 0x30
pop eax
mov [ ebp - 0x434 ] ax
mov eax [ ebp - 0x444 ]
add eax 0x51
mov [ ebp - 0x432 ] ax
mov [ ebp - 0x428 ] ebx
jmp r-xdata
cmp [ ebp - 0x43c ] 0x0
je r-xdata
mov eax [ ebp - 0x408 ]
test al 0x40
je r-xdata
or [ ebp - 0x408 ] 0x40
cmp [ ebp - 0x40c ] 0x0
lea edi [ ebp - 0x404 ]
mov eax 0x200
mov [ ebp - 0x410 ] edi
mov [ ebp - 0x414 ] eax
jge r-xdata
cmp eax 0x69
je r-xdata
mov eax [ edi - 0x4 ]
test cl 0x40
je r-xdata
mov [ ebp - 0x41c ] edi
test cl 0x40
je r-xdata
test [ ebp - 0x408 ] 0x9000
mov ebx edx
mov edi eax
jne r-xdata
test edx edx
jg r-xdata
mov eax [ edi ]
add edi 0x4
mov [ ebp - 0x41c ] edi
test eax eax
je r-xdata
sub eax ecx
je r-xdata
or [ ebp - 0x408 ] 0x20
add edx 0x20
mov [ ebp - 0x460 ] 0x1
mov [ ebp - 0x420 ] edx
sub eax ebx
je r-xdata
cmp eax 0x75
je r-xdata
mov eax [ ebp - 0x410 ]
mov [ ebp - 0x42c ] 0x1
jmp r-xdata
mov eax [ rw-data ]
mov [ ebp - 0x410 ] eax
and [ ebp - 0x414 ] 0x0
mov esi [ ebp - 0x410 ]
test ebx ebx
jle r-xdata
mov eax [ rw-data ]
mov [ ebp - 0x410 ] eax
push [ ebp - 0x43c ]
call sub_1000a48d
and [ ebp - 0x43c ] 0x0
mov ebx [ ebp - 0x430 ]
sub ebx [ ebp - 0x414 ]
sub ebx [ ebp - 0x428 ]
test [ ebp - 0x408 ] 0xc
mov [ ebp - 0x470 ] ebx
jne r-xdata
test eax 0x100
je r-xdata
jne r-xdata
mov [ ebp - 0x40c ] 0x6
jmp r-xdata
cmp eax 0x6e
je r-xdata
xor edx edx
cdq
jmp r-xdata
movzx eax [ edi - 0x4 ]
movsx eax [ edi - 0x4 ]
jmp r-xdata
cmp [ ebp - 0x40c ] 0x0
jge r-xdata
xor ebx ebx
jl r-xdata
mov eax [ rw-data ]
mov [ ebp - 0x410 ] eax
push eax
mov ecx [ eax + 0x4 ]
test ecx ecx
je r-xdata
sub eax ebx
jne r-xdata
test [ ebp - 0x408 ] 0x830
jne r-xdata
sub eax ebx
je r-xdata
cmp eax 0x78
je r-xdata
test ebx ebx
jne r-xdata
mov al [ esi ]
test al al
je r-xdata
mov edi [ ebp - 0x424 ]
mov ecx [ ebp - 0x428 ]
lea eax [ ebp - 0x434 ]
push eax
lea eax [ ebp - 0x418 ]
call sub_1000d428
test [ ebp - 0x408 ] 0x8
pop ecx
je r-xdata
mov edi ebx
test ebx ebx
jle r-xdata
test al 0x1
je r-xdata
push 0x2d
jmp r-xdata
cmp [ ebp - 0x40c ] eax
jle r-xdata
cmp dx 0x67
jne r-xdata
mov eax [ ebp - 0x41c ]
mov ecx [ eax ]
add eax 0x8
mov esi [ DecodePointer@IAT ]
mov [ ebp - 0x41c ] eax
mov eax [ eax - 0x4 ]
mov [ ebp - 0x468 ] eax
lea eax [ ebp - 0x458 ]
push eax
push [ ebp - 0x460 ]
movsx eax dl
push [ ebp - 0x40c ]
mov [ ebp - 0x46c ] ecx
push eax
push [ ebp - 0x414 ]
lea eax [ ebp - 0x46c ]
push edi
push eax
push [ rw-data ]
call esi
call eax
mov ebx [ ebp - 0x408 ]
add esp 0x1c
and ebx 0x80
je r-xdata
mov esi [ edi ]
add edi 0x4
mov [ ebp - 0x41c ] edi
call sub_10011140
test eax eax
je r-xdata
cmp eax 0x6f
jne r-xdata
test cl 0x40
je r-xdata
cdq
jmp r-xdata
and [ ebp - 0x408 ] 0xfffffff7
mov eax 0x200
cmp [ ebp - 0x40c ] eax
jle r-xdata
mov [ ebp - 0x40c ] 0x1
jmp r-xdata
neg eax
adc edx 0x0
neg edx
or [ ebp - 0x408 ] 0x100
test eax eax
jae r-xdata
mov [ ebp - 0x414 ] eax
test [ ebp - 0x408 ] 0x800
movsx eax [ eax ]
mov [ ebp - 0x410 ] ecx
je r-xdata
movzx eax [ edi ]
add edi 0x4
xor esi esi
inc esi
test [ ebp - 0x408 ] 0x20
mov [ ebp - 0x42c ] esi
mov [ ebp - 0x41c ] edi
mov [ ebp - 0x464 ] eax
je r-xdata
or [ ebp - 0x408 ] 0x20
jmp r-xdata
sub eax ebx
jne r-xdata
cmp eax 0x58
je r-xdata
dec ebx
cmp [ eax ] 0x0
je r-xdata
sub eax [ ebp - 0x410 ]
lea ecx [ ebp - 0x458 ]
movzx eax al
push ecx
push eax
call sub_1000ff0c
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ ebp - 0x42c ] 0x0
jne r-xdata
test [ ebp - 0x408 ] 0x4
jne r-xdata
mov eax [ ebp - 0x424 ]
push 0x20
lea esi [ ebp - 0x418 ]
dec edi
call sub_1000d3f9
cmp [ ebp - 0x418 ] 0xffffffff
pop ecx
je r-xdata
test al 0x2
je r-xdata
push 0x2b
jmp r-xdata
pop eax
mov [ ebp - 0x434 ] ax
mov [ ebp - 0x428 ] 0x1
mov ebx 0xa3
cmp [ ebp - 0x40c ] ebx
jle r-xdata
mov [ ebp - 0x40c ] eax
mov [ ebp - 0x40c ] 0x1
jmp r-xdata
cmp [ ebp - 0x420 ] 0x67
jne r-xdata
cmp [ ebp - 0x40c ] 0x0
jne r-xdata
call sub_1000befe
mov [ eax ] 0x16
call sub_1000beac
cmp [ ebp - 0x44c ] 0x0
jmp r-xdata
test [ ebp - 0x408 ] 0x20
je r-xdata
test [ ebp - 0x408 ] 0x80
mov [ ebp - 0x420 ] 0x8
je r-xdata
mov eax edi
or eax ebx
jne r-xdata
mov [ ebp - 0x40c ] eax
and [ ebp - 0x42c ] 0x0
jmp r-xdata
cdq
sub eax edx
mov [ ebp - 0x42c ] 0x1
jmp r-xdata
mov [ ebp - 0x404 ] ax
mov [ ebp - 0x438 ] al
lea eax [ ebp - 0x458 ]
push eax
mov eax [ ebp - 0x458 ]
mov [ ebp - 0x437 ] 0x0
push [ eax + 0xac ]
lea eax [ ebp - 0x438 ]
push eax
lea eax [ ebp - 0x404 ]
push eax
call sub_1001152b
add esp 0x10
test eax eax
jns r-xdata
and [ ebp - 0x45c ] 0x0
add eax 0x2
inc esi
inc [ ebp - 0x414 ]
cmp [ ebp - 0x414 ] ebx
jl r-xdata
inc esi
push [ ebp - 0x410 ]
mov edi [ ebp - 0x424 ]
mov ecx [ ebp - 0x414 ]
lea eax [ ebp - 0x418 ]
call sub_1000d428
pop ecx
cmp [ ebp - 0x414 ] 0x0
jle r-xdata
mov edi ebx
test ebx ebx
jle r-xdata
test edi edi
jg r-xdata
push 0x20
mov edx [ ebp - 0x420 ]
mov esi [ ebp - 0x40c ]
add esi 0x15d
push esi
call sub_1000e35d
mov edx [ ebp - 0x420 ]
pop ecx
mov [ ebp - 0x43c ] eax
test eax eax
je r-xdata
cmp [ edi ] 0x2d
jne r-xdata
test ebx ebx
jne r-xdata
lea eax [ ebp - 0x458 ]
push eax
push edi
push [ rw-data ]
call esi
call eax
pop ecx
pop ecx
je r-xdata
mov eax [ ebp - 0x418 ]
mov [ esi ] eax
mov ax [ ebp - 0x418 ]
mov [ esi ] ax
jmp r-xdata
or [ ebp - 0x408 ] 0x200
jmp r-xdata
lea esi [ ebp - 0x205 ]
and [ ebp - 0x428 ] eax
sar eax 0x1
lea eax [ ebp - 0x404 ]
mov [ ebp - 0x410 ] eax
mov [ ebp - 0x414 ] esi
jmp r-xdata
mov [ ebp - 0x448 ] esi
jmp r-xdata
jmp r-xdata
test [ ebp - 0x408 ] 0x4
je r-xdata
mov edi [ ebp - 0x410 ]
mov ebx [ ebp - 0x414 ]
mov eax [ ebp - 0x424 ]
push 0x30
lea esi [ ebp - 0x418 ]
dec edi
call sub_1000d3f9
cmp [ ebp - 0x418 ] 0xffffffff
pop ecx
je r-xdata
mov [ ebp - 0x40c ] ebx
jmp r-xdata
mov [ ebp - 0x410 ] eax
mov [ ebp - 0x414 ] esi
mov edi eax
jmp r-xdata
push edi
jmp r-xdata
or [ ebp - 0x408 ] 0x100
inc edi
mov [ ebp - 0x410 ] edi
lea eax [ ebp - 0x458 ]
push eax
push edi
push [ rw-data ]
call esi
call eax
pop ecx
pop ecx
mov [ ebp - 0x448 ] 0x1
jmp r-xdata
mov eax [ ebp - 0x420 ]
cdq
push edx
push eax
push ebx
push edi
call sub_100112d0
add ecx 0x30
mov [ ebp - 0x470 ] ebx
mov edi eax
mov ebx edx
cmp ecx 0x39
jle r-xdata
mov eax edi
or eax ebx
je r-xdata
mov edi [ ebp - 0x470 ]
jmp r-xdata
or [ ebp - 0x418 ] 0xffffffff
jmp r-xdata
push [ ebp - 0x464 ]
mov eax [ ebp - 0x424 ]
lea esi [ ebp - 0x418 ]
call sub_1000d3f9
add edi [ ebp - 0x420 ]
pop ecx
test ebx ebx
jg r-xdata
test edi edi
jg r-xdata
call sub_1000bfb0
pop ecx
jmp r-xdata
mov [ esi ] cl
dec esi
jmp r-xdata
add ecx [ ebp - 0x444 ]
lea eax [ ebp - 0x205 ]
sub eax esi
inc esi
test [ ebp - 0x408 ] 0x200
mov [ ebp - 0x414 ] eax
mov [ ebp - 0x410 ] esi
je r-xdata
test edi edi
jg r-xdata
cmp [ ebp - 0x418 ] 0x0
jl r-xdata
lea eax [ ebp - 0x458 ]
push eax
mov eax [ ebp - 0x458 ]
push [ eax + 0xac ]
lea eax [ ebp - 0x464 ]
push edi
push eax
dec ebx
call sub_1001152b
add esp 0x10
mov [ ebp - 0x420 ] eax
test eax eax
jle r-xdata
jmp r-xdata
mov eax [ ebp - 0x40c ]
dec [ ebp - 0x40c ]
test eax eax
jg r-xdata
test eax eax
je r-xdata
mov eax [ ebp - 0x424 ]
push 0x20
lea esi [ ebp - 0x418 ]
dec edi
call sub_1000d3f9
cmp [ ebp - 0x418 ] 0xffffffff
pop ecx
je r-xdata
dec [ ebp - 0x410 ]
mov ecx [ ebp - 0x410 ]
mov [ ecx ] 0x30
inc eax
jmp r-xdata
mov ecx esi
cmp [ ecx ] 0x30
je r-xdata
sub_1000e097
mov edi edi
push ebp
mov ebp esp
push r--data
call [ GetModuleHandleW@IAT ]
test eax eax
je r-xdata
pop ebp
retn
push r--data
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call eax
sub_1000e0ec
mov edi edi
push esi
call sub_1000b72b
mov esi eax
push esi
call sub_1000ac89
push esi
call sub_1000bd22
push esi
call sub_1000ab40
push esi
call sub_100116f0
push esi
call sub_1000eeec
push esi
call sub_100116df
add esp 0x18
pop esi
retn
sub_1000e11f
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
jmp r-xdata
cmp esi [ ebp + 0xc ]
jb r-xdata
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov ecx [ esi ]
test ecx ecx
je r-xdata
add esi 0x4
call ecx
sub_1000e143
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
je r-xdata
call sub_1001111d
push r--data
push r--data
call sub_1000e11f
pop ecx
pop ecx
test eax eax
jne r-xdata
push rw-data
call sub_10011790
pop ecx
test eax eax
je r-xdata
pop ebp
retn
push esi
push edi
push sub_1000eac2
call sub_1000ac72
mov eax r--data
mov esi r--data
pop ecx
mov edi eax
cmp eax esi
jae r-xdata
push [ ebp + 0x8 ]
call [ rw-data ]
pop ecx
cmp [ rw-data ] 0x0
pop edi
pop esi
je r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
xor eax eax
push rw-data
call sub_10011790
pop ecx
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
push 0x0
push 0x2
push 0x0
call [ rw-data ]
sub_1000e1da
push 0x20
push r--data
call sub_1000eaf0
push 0x8
call sub_1000f629
pop ecx
and [ ebp - 0x4 ] 0x0
xor eax eax
inc eax
cmp [ rw-data ] eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000e305
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov [ rw-data ] eax
mov al [ ebp + 0x10 ]
mov [ rw-data ] al
cmp [ ebp + 0xc ] 0x0
jne r-xdata
call sub_1000eb35
retn
mov [ rw-data ] 0x1
push 0x8
call sub_1000f550
pop ecx
push [ ebp + 0x8 ]
call sub_1000e0c2
mov [ ebp - 0x20 ] r--data
push [ rw-data ]
mov esi [ DecodePointer@IAT ]
call esi
mov ebx eax
mov [ ebp - 0x30 ] ebx
test ebx ebx
je r-xdata
mov eax [ ebp - 0x20 ]
mov eax [ eax ]
test eax eax
je r-xdata
mov [ ebp - 0x1c ] r--data
push [ rw-data ]
call esi
mov edi eax
mov [ ebp - 0x2c ] edi
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x28 ] edi
add [ ebp - 0x20 ] 0x4
jmp r-xdata
call eax
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
test eax eax
je r-xdata
call sub_1000b72b
cmp [ edi ] eax
je r-xdata
cmp [ ebp - 0x20 ] r--data
jae r-xdata
add [ ebp - 0x1c ] 0x4
jmp r-xdata
call eax
sub edi 0x4
mov [ ebp - 0x2c ] edi
cmp edi ebx
jb r-xdata
cmp edi ebx
jb r-xdata
cmp [ ebp - 0x1c ] r--data
jae r-xdata
push [ edi ]
call esi
mov ebx eax
call sub_1000b72b
mov [ edi ] eax
call ebx
push [ rw-data ]
call esi
mov ebx eax
push [ rw-data ]
call esi
cmp [ ebp - 0x24 ] ebx
jne r-xdata
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x30 ] ebx
mov [ ebp - 0x28 ] eax
mov edi eax
mov [ ebp - 0x2c ] edi
cmp [ ebp - 0x28 ] eax
je r-xdata
mov ebx [ ebp - 0x30 ]
jmp r-xdata
sub_1000e35d
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0x8 ]
call sub_1000a4c7
mov edi eax
pop ecx
test edi edi
jne r-xdata
sub_1000e3a2
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001184c
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
sub_1000e3ee
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ ebp + 0xc ] eax
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100118ce
mov edi eax
pop ecx
pop ecx
test edi edi
jne r-xdata
sub_1000e43c
mov edi edi
push ebp
mov ebp esp
sub esp 0x4c
push esi
lea eax [ ebp - 0x4c ]
push eax
call [ GetStartupInfoW@IAT ]
push 0x40
push 0x20
pop esi
push esi
call sub_1000e3a2
pop ecx
pop ecx
xor ecx ecx
cmp eax ecx
jne r-xdata
lea edx [ eax + 0x800 ]
mov [ rw-data ] eax
mov [ rw-data ] esi
cmp eax edx
jae r-xdata
or eax 0xffffffff
jmp r-xdata
push ebx
push edi
cmp [ ebp - 0x1a ] cx
je r-xdata
add eax 0x5
pop esi
leave
retn
xor ebx ebx
mov eax [ ebp - 0x18 ]
cmp eax ecx
je r-xdata
or [ eax - 0x5 ] 0xffffffff
mov [ eax - 0x1 ] 0xa00
mov [ eax + 0x3 ] ecx
mov [ eax + 0x1f ] 0xa00
mov [ eax + 0x21 ] 0xa
mov [ eax + 0x33 ] ecx
mov [ eax + 0x2f ] cl
mov esi [ rw-data ]
add eax 0x40
lea edx [ eax - 0x5 ]
add esi 0x800
cmp edx esi
jb r-xdata
mov [ esi + 0x4 ] 0x81
test ebx ebx
jne r-xdata
cmp eax 0xfffffffe
je r-xdata
mov ebx [ eax ]
add eax 0x4
mov [ ebp - 0x4 ] eax
add eax ebx
mov esi 0x800
mov [ ebp - 0x8 ] eax
cmp ebx esi
jl r-xdata
lea eax [ ebx - 0x1 ]
neg eax
sbb eax eax
add eax 0xfffffff5
push 0xfffffff6
pop eax
jmp r-xdata
or [ esi + 0x4 ] 0x80
jmp r-xdata
cmp [ rw-data ] ebx
jge r-xdata
mov ebx esi
or [ esi + 0x4 ] 0x40
mov [ esi ] 0xfffffffe
test edi edi
je r-xdata
push eax
call [ GetStdHandle@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
inc ebx
cmp ebx 0x3
jl r-xdata
xor edi edi
test ebx ebx
jle r-xdata
mov edi rw-data
mov esi ebx
shl esi 0x6
add esi [ rw-data ]
mov eax [ esi ]
cmp eax 0xffffffff
je r-xdata
push [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
push edi
call [ GetFileType@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x8 ]
mov eax [ eax ]
cmp eax 0xffffffff
je r-xdata
mov ebx [ rw-data ]
add [ rw-data ] 0x20
lea ecx [ eax + 0x800 ]
mov [ edi ] eax
cmp eax ecx
jae r-xdata
and eax 0xff
mov [ esi ] edi
cmp eax 0x2
jne r-xdata
add [ ebp - 0x8 ] 0x4
inc edi
inc [ ebp - 0x4 ]
cmp edi ebx
jl r-xdata
cmp eax 0xfffffffe
je r-xdata
add edi 0x4
cmp [ rw-data ] ebx
jl r-xdata
add eax 0x5
cmp eax 0x3
jne r-xdata
or [ esi + 0x4 ] 0x40
jmp r-xdata
mov ecx [ ebp - 0x4 ]
mov cl [ ecx ]
test cl 0x1
je r-xdata
push 0x40
push 0x20
call sub_1000e3a2
pop ecx
pop ecx
test eax eax
je r-xdata
jmp r-xdata
or [ eax - 0x5 ] 0xffffffff
and [ eax + 0x3 ] 0x0
and [ eax + 0x1f ] 0x80
and [ eax + 0x33 ] 0x0
mov [ eax - 0x1 ] 0xa00
mov [ eax + 0x20 ] 0xa0a
mov [ eax + 0x2f ] 0x0
mov ecx [ edi ]
add eax 0x40
add ecx esi
lea edx [ eax - 0x5 ]
cmp edx ecx
jb r-xdata
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
or [ esi + 0x4 ] 0x8
test cl 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
inc [ esi + 0x8 ]
jmp r-xdata
mov esi edi
and esi 0x1f
mov eax edi
sar eax 0x5
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov eax [ ebp - 0x8 ]
mov eax [ eax ]
mov [ esi ] eax
mov eax [ ebp - 0x4 ]
mov al [ eax ]
mov [ esi + 0x4 ] al
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
push eax
call [ GetFileType@IAT ]
test eax eax
je r-xdata
pop edi
pop ebx
inc [ esi + 0x8 ]
sub_1000e681
mov edi edi
push esi
push edi
mov edi rw-data
add edi 0x4
cmp edi rw-data
jl r-xdata
lea ecx [ eax + 0x800 ]
cmp eax ecx
jae r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
pop edi
pop esi
retn
push [ edi ]
call sub_1000a48d
and [ edi ] 0x0
pop ecx
lea esi [ eax + 0xc ]
mov eax [ edi ]
add esi 0x40
add eax 0x800
lea ecx [ esi - 0xc ]
cmp ecx eax
jb r-xdata
push esi
call [ DeleteCriticalSection@IAT ]
cmp [ esi - 0x4 ] 0x0
je r-xdata
sub_1000e6d4
cmp [ rw-data ] 0x0
jne r-xdata
push esi
mov esi [ rw-data ]
push edi
xor edi edi
test esi esi
jne r-xdata
call sub_1000b3d4
mov al [ esi ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
push 0x4
inc edi
push edi
call sub_1000e3a2
mov edi eax
pop ecx
pop ecx
mov [ rw-data ] edi
test edi edi
je r-xdata
pop edi
pop esi
retn
push esi
call sub_1000bfb0
pop ecx
lea esi [ esi + eax + 0x1 ]
inc edi
mov esi [ rw-data ]
push ebx
jmp r-xdata
cmp [ esi ] 0x0
jne r-xdata
push esi
call sub_1000bfb0
cmp [ esi ] 0x3d
pop ecx
lea ebx [ eax + 0x1 ]
je r-xdata
push [ rw-data ]
call sub_1000a48d
and [ rw-data ] 0x0
and [ edi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
add esi ebx
push 0x1
push ebx
call sub_1000e3a2
pop ecx
pop ecx
mov [ edi ] eax
test eax eax
je r-xdata
push [ rw-data ]
call sub_1000a48d
and [ rw-data ] 0x0
or eax 0xffffffff
jmp r-xdata
push esi
push ebx
push eax
call sub_1000bf47
add esp 0xc
test eax eax
jne r-xdata
pop ecx
pop ebx
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000be5a
int3
add edi 0x4
sub_1000e7b0
mov edi edi
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x10 ]
push ebx
xor eax eax
push esi
mov [ edi ] eax
mov esi edx
mov edx [ ebp + 0xc ]
mov [ ecx ] 0x1
cmp [ ebp + 0x8 ] eax
je r-xdata
mov [ ebp - 0x4 ] eax
mov ebx [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ ebx ] edx
inc [ edi ]
test edx edx
je r-xdata
xor eax eax
cmp [ ebp - 0x4 ] eax
mov bl 0x22
sete al
inc esi
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov bl [ esi ]
movzx eax bl
push eax
inc esi
call sub_100119ce
pop ecx
test eax eax
je r-xdata
mov al [ esi ]
mov [ edx ] al
inc edx
mov [ ebp + 0xc ] edx
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
test bl bl
je r-xdata
inc [ edi ]
cmp [ ebp + 0xc ] 0x0
je r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp bl 0x20
je r-xdata
dec esi
jmp r-xdata
inc esi
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
test edx edx
je r-xdata
cmp bl 0x9
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov [ edx - 0x1 ] 0x0
mov eax [ ebp + 0x8 ]
pop esi
pop ebx
test eax eax
je r-xdata
mov al [ esi ]
cmp al 0x20
je r-xdata
inc [ ecx ]
leave
retn
and [ eax ] 0x0
inc esi
jmp r-xdata
cmp al 0x9
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
inc [ ecx ]
mov eax [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ eax ] edx
cmp [ esi ] 0x5c
je r-xdata
inc esi
inc ecx
cmp [ esi ] 0x22
jne r-xdata
test ecx ecx
je r-xdata
test cl 0x1
jne r-xdata
mov al [ esi ]
test al al
je r-xdata
dec ecx
test edx edx
je r-xdata
shr ecx 0x1
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test edx edx
je r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
inc [ edi ]
test ecx ecx
jne r-xdata
mov [ edx ] 0x5c
inc edx
xor eax eax
xor ebx ebx
cmp [ ebp - 0x4 ] eax
sete al
mov [ ebp - 0x4 ] eax
lea eax [ esi + 0x1 ]
cmp [ eax ] 0x22
jne r-xdata
inc [ edi ]
mov ecx [ ebp + 0x10 ]
jmp r-xdata
mov [ edx ] 0x0
inc edx
mov [ ebp + 0xc ] edx
test ebx ebx
je r-xdata
cmp al 0x20
je r-xdata
mov [ ebp + 0xc ] edx
mov esi eax
jmp r-xdata
cmp [ esi ] 0x0
je r-xdata
inc esi
jmp r-xdata
movsx eax al
push eax
test edx edx
je r-xdata
cmp al 0x9
je r-xdata
xor ebx ebx
inc ebx
xor ecx ecx
jmp r-xdata
call sub_100119ce
pop ecx
test eax eax
je r-xdata
call sub_100119ce
pop ecx
test eax eax
je r-xdata
inc [ edi ]
mov edx [ ebp + 0xc ]
inc esi
inc [ edi ]
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
jmp r-xdata
mov al [ esi ]
mov ecx [ ebp + 0xc ]
inc [ ebp + 0xc ]
mov [ ecx ] al
inc esi
inc [ edi ]
sub_1000e94a
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
xor ebx ebx
push esi
push edi
cmp [ rw-data ] ebx
jne r-xdata
push 0x104
mov esi rw-data
push esi
push ebx
mov [ rw-data ] bl
call [ GetModuleFileNameA@IAT ]
mov eax [ rw-data ]
mov [ rw-data ] esi
cmp eax ebx
je r-xdata
call sub_1000b3d4
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x4 ] eax
cmp [ eax ] bl
jne r-xdata
or eax 0xffffffff
mov ecx [ ebp - 0xc ]
cmp ecx 0xffffffff
jae r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
push ebx
push ebx
lea edi [ ebp - 0xc ]
call sub_1000e7b0
mov eax [ ebp - 0x8 ]
add esp 0xc
cmp eax 0x3fffffff
jae r-xdata
mov edi eax
shl edi 0x2
lea eax [ edi + ecx ]
cmp eax ecx
jb r-xdata
push eax
call sub_1000e35d
mov esi eax
pop ecx
cmp esi ebx
je r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
add edi esi
push edi
push esi
lea edi [ ebp - 0xc ]
call sub_1000e7b0
mov eax [ ebp - 0x8 ]
add esp 0xc
dec eax
mov [ rw-data ] eax
mov [ rw-data ] esi
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_1000ea05
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
call [ GetEnvironmentStringsW@IAT ]
mov ebx eax
xor esi esi
cmp ebx esi
jne r-xdata
cmp [ ebx ] si
je r-xdata
xor eax eax
jmp r-xdata
push edi
mov edi [ WideCharToMultiByte@IAT ]
push esi
push esi
push esi
sub eax ebx
push esi
sar eax 0x1
inc eax
push eax
push ebx
push esi
push esi
mov [ ebp - 0xc ] eax
call edi
mov [ ebp - 0x8 ] eax
cmp eax esi
je r-xdata
add eax 0x2
cmp [ eax ] si
jne r-xdata
pop esi
pop ebx
leave
retn
push ebx
call [ FreeEnvironmentStringsW@IAT ]
xor eax eax
push eax
call sub_1000e35d
pop ecx
mov [ ebp - 0x4 ] eax
cmp eax esi
je r-xdata
add eax 0x2
cmp [ eax ] si
jne r-xdata
push esi
push esi
push [ ebp - 0x8 ]
push eax
push [ ebp - 0xc ]
push ebx
push esi
push esi
call edi
test eax eax
jne r-xdata
push ebx
call [ FreeEnvironmentStringsW@IAT ]
mov eax [ ebp - 0x4 ]
jmp r-xdata
push [ ebp - 0x4 ]
call sub_1000a48d
pop ecx
mov [ ebp - 0x4 ] esi
pop edi
sub_1000ea9c
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_1000eac2
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_1000eaf0
push sub_1000eb50
push [ fs : 0x0 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x4 ] eax
xor eax ebp
push eax
mov [ ebp - 0x18 ] esp
push [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_1000eb50
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebx + 0x8 ]
xor esi [ rw-data ]
push edi
mov eax [ esi ]
mov [ ebp - 0x1 ] 0x0
mov [ ebp - 0xc ] 0x1
lea edi [ ebx + 0x10 ]
cmp eax 0xfffffffe
je r-xdata
mov ecx [ esi + 0xc ]
mov eax [ esi + 0x8 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_100098bc
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x66
jne r-xdata
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_100098bc
mov edx 0xfffffffe
cmp [ ebx + 0xc ] edx
je r-xdata
mov ecx [ ebp + 0x10 ]
lea edx [ ebp - 0x18 ]
mov [ ebx - 0x4 ] edx
mov ebx [ ebx + 0xc ]
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x14 ] ecx
cmp ebx 0xfffffffe
je r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push rw-data
push edi
mov ecx ebx
call sub_1001054b
jmp r-xdata
lea ecx [ ecx ]
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
mov ebx eax
cmp eax 0xfffffffe
jne r-xdata
mov edx edi
call sub_10010502
mov [ ebp - 0x1 ] 0x1
test eax eax
js r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_100098bc
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_100098bc
lea eax [ ebx + ebx * 2 ]
mov ecx [ esi + eax * 4 + 0x14 ]
lea eax [ esi + eax * 4 + 0x10 ]
mov [ ebp - 0x10 ] eax
mov eax [ eax ]
mov [ ebp - 0x8 ] eax
test ecx ecx
je r-xdata
cmp [ ebp - 0x1 ] 0x0
je r-xdata
mov [ ebp - 0xc ] 0x0
jmp r-xdata
jg r-xdata
mov ecx [ ebp + 0x8 ]
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ ebp + 0xc ]
mov edx [ ebp + 0x8 ]
call sub_10010532
mov eax [ ebp + 0xc ]
cmp [ eax + 0xc ] ebx
je r-xdata
cmp [ r--data ] 0x0
je r-xdata
mov ecx [ ebp - 0x8 ]
mov [ eax + 0xc ] ecx
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
push rw-data
push edi
mov edx ebx
mov ecx eax
call sub_1001054b
mov eax [ ebp + 0xc ]
push r--data
call sub_10011790
add esp 0x4
test eax eax
je r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_100098bc
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0x8 ]
mov edx edi
call sub_10010519
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_100098bc
mov edx [ ebp + 0x8 ]
push 0x1
push edx
call [ r--data ]
add esp 0x8
sub_1000ecdf
mov edi edi
push ebp
mov ebp esp
push esi
call sub_1000b862
mov esi eax
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov ecx [ esi + 0x5c ]
mov edx [ ebp + 0x8 ]
mov eax ecx
push edi
add ecx 0x90
cmp eax ecx
jae r-xdata
add eax 0xc
lea edi [ ecx + 0x90 ]
cmp eax edi
jb r-xdata
xor eax eax
cmp [ eax ] edx
je r-xdata
cmp [ eax ] edx
je r-xdata
xor eax eax
jmp r-xdata
mov edx [ eax + 0x8 ]
test edx edx
jne r-xdata
test eax eax
je r-xdata
pop edi
cmp edx 0x5
jne r-xdata
cmp edx 0x1
je r-xdata
and [ eax + 0x8 ] 0x0
xor eax eax
inc eax
jmp r-xdata
or eax 0xffffffff
mov ecx [ ebp + 0xc ]
push ebx
mov ebx [ esi + 0x60 ]
mov [ esi + 0x60 ] ecx
mov ecx [ eax + 0x4 ]
cmp ecx 0x8
jne r-xdata
and [ eax + 0x8 ] 0x0
push ecx
call edx
push 0x24
pop ecx
mov edi [ esi + 0x5c ]
and [ ecx + edi + 0x8 ] 0x0
add ecx 0xc
cmp ecx 0x90
jl r-xdata
mov eax [ eax ]
mov edi [ esi + 0x64 ]
cmp eax 0xc000008e
jne r-xdata
cmp eax 0xc0000090
jne r-xdata
mov [ esi + 0x64 ] 0x83
jmp r-xdata
cmp eax 0xc0000091
jne r-xdata
mov [ esi + 0x64 ] 0x81
jmp r-xdata
push [ esi + 0x64 ]
push 0x8
call edx
pop ecx
mov [ esi + 0x64 ] edi
jmp r-xdata
cmp eax 0xc0000093
jne r-xdata
mov [ esi + 0x64 ] 0x84
jmp r-xdata
pop ecx
mov [ esi + 0x60 ] ebx
pop ebx
cmp eax 0xc000008d
jne r-xdata
mov [ esi + 0x64 ] 0x85
jmp r-xdata
cmp eax 0xc000008f
jne r-xdata
mov [ esi + 0x64 ] 0x82
jmp r-xdata
cmp eax 0xc0000092
jne r-xdata
mov [ esi + 0x64 ] 0x86
jmp r-xdata
cmp eax 0xc00002b5
jne r-xdata
mov [ esi + 0x64 ] 0x8a
jmp r-xdata
cmp eax 0xc00002b4
jne r-xdata
mov [ esi + 0x64 ] 0x8d
jmp r-xdata
mov [ esi + 0x64 ] 0x8e
sub_1000ee29
mov edi edi
push ebp
mov ebp esp
mov eax 0xe06d7363
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0xc ]
push eax
call sub_1000ecdf
pop ecx
pop ecx
pop ebp
retn
sub_1000ee49
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
push ebx
push edi
mov edi 0xbb40e64e
mov ebx 0xffff0000
cmp eax edi
je r-xdata
push esi
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov esi [ ebp - 0x4 ]
xor esi [ ebp - 0x8 ]
call [ GetCurrentProcessId@IAT ]
xor esi eax
call [ GetCurrentThreadId@IAT ]
xor esi eax
call [ GetTickCount@IAT ]
xor esi eax
lea eax [ ebp - 0x10 ]
push eax
call [ QueryPerformanceCounter@IAT ]
mov eax [ ebp - 0xc ]
xor eax [ ebp - 0x10 ]
xor esi eax
cmp esi edi
jne r-xdata
test ebx eax
je r-xdata
test ebx esi
jne r-xdata
mov esi 0xbb40e64f
jmp r-xdata
not eax
mov [ rw-data ] eax
jmp r-xdata
mov [ rw-data ] esi
not esi
mov [ rw-data ] esi
pop esi
mov eax esi
or eax 0x4711
shl eax 0x10
or esi eax
pop edi
pop ebx
leave
retn
sub_1000ef0a
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ r--data ]
push esi
imul ecx ecx 0xc
add ecx [ ebp + 0x8 ]
pop esi
cmp eax ecx
jae r-xdata
mov esi ecx
imul esi esi 0xc
add esi [ ebp + 0x8 ]
add eax 0xc
cmp eax esi
jb r-xdata
xor eax eax
cmp [ eax + 0x4 ] edx
je r-xdata
cmp [ eax + 0x4 ] edx
je r-xdata
pop ebp
retn
sub_1000ef4e
push 0x20
push r--data
call sub_1000eaf0
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x28 ] edi
mov ebx [ ebp + 0x8 ]
cmp ebx 0xb
jg r-xdata
mov eax ebx
sub eax 0xf
je r-xdata
je r-xdata
mov esi rw-data
mov eax [ rw-data ]
sub eax 0x6
je r-xdata
call sub_1000b862
mov edi eax
mov [ ebp - 0x28 ] edi
test edi edi
jne r-xdata
mov eax ebx
push 0x2
pop ecx
sub eax ecx
je r-xdata
call sub_1000eb35
retn
cmp [ ebp - 0x20 ] eax
jne r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
dec eax
je r-xdata
push [ edi + 0x5c ]
mov edx ebx
call sub_1000ef0a
pop ecx
lea esi [ eax + 0x8 ]
mov eax [ esi ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
sub eax ecx
je r-xdata
cmp [ ebp - 0x1c ] eax
je r-xdata
push 0x3
call sub_1000e31a
mov [ ebp - 0x1c ] 0x1
push eax
call [ DecodePointer@IAT ]
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
call sub_1000befe
mov [ eax ] 0x16
call sub_1000beac
jmp r-xdata
mov [ ebp - 0x20 ] eax
xor eax eax
cmp [ ebp - 0x20 ] 0x1
je r-xdata
sub eax ecx
je r-xdata
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ebx 0x8
je r-xdata
push eax
call sub_1000f629
pop ecx
sub eax ecx
jne r-xdata
mov ecx [ edi + 0x60 ]
mov [ ebp - 0x2c ] ecx
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
call sub_1000b72b
mov [ esi ] eax
mov ecx [ edi + 0x64 ]
mov [ ebp - 0x30 ] ecx
mov [ edi + 0x64 ] 0x8c
cmp ebx 0x4
jne r-xdata
push ebx
call [ ebp - 0x20 ]
push [ edi + 0x64 ]
push ebx
call [ ebp - 0x20 ]
pop ecx
jmp r-xdata
mov ecx [ r--data ]
mov [ ebp - 0x24 ] ecx
cmp ebx 0x8
jne r-xdata
mov eax [ ebp - 0x2c ]
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
pop ecx
cmp ebx 0x8
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000f0b5
cmp ebx 0x8
jne r-xdata
mov ecx [ ebp - 0x24 ]
imul ecx ecx 0xc
mov edx [ edi + 0x5c ]
mov [ ecx + edx + 0x8 ] eax
inc [ ebp - 0x24 ]
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x30 ]
mov [ edi + 0x64 ] eax
cmp ebx 0x4
jne r-xdata
mov ecx [ r--data ]
add ecx [ r--data ]
cmp [ ebp - 0x24 ] ecx
jge r-xdata
sub_1000f0f1
mov edi edi
push ebp
mov ebp esp
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0xc ]
push esi
push edi
mov [ ebp - 0x1c ] eax
call sub_1000b72b
and [ ebp - 0x14 ] 0x0
cmp [ rw-data ] 0x0
mov [ ebp - 0x18 ] eax
jne r-xdata
mov eax [ rw-data ]
mov ecx [ ebp - 0x18 ]
mov esi [ DecodePointer@IAT ]
cmp eax ecx
je r-xdata
push r--data
call [ LoadLibraryW@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ rw-data ]
cmp eax [ ebp - 0x18 ]
je r-xdata
cmp [ rw-data ] ecx
je r-xdata
xor eax eax
mov edi [ GetProcAddress@IAT ]
push r--data
push ebx
call edi
test eax eax
je r-xdata
push [ rw-data ]
call esi
test eax eax
je r-xdata
push eax
call esi
test eax eax
je r-xdata
push eax
call esi
push [ rw-data ]
mov edi eax
call esi
mov ebx eax
test edi edi
je r-xdata
mov esi [ EncodePointer@IAT ]
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
mov [ rw-data ] eax
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
push [ ebp - 0x14 ]
call eax
jmp r-xdata
call eax
mov [ ebp - 0x14 ] eax
test eax eax
je r-xdata
test ebx ebx
je r-xdata
push r--data
push ebx
call edi
push eax
call esi
mov [ rw-data ] eax
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_100098bc
leave
retn
mov eax [ rw-data ]
cmp eax [ ebp - 0x18 ]
je r-xdata
call edi
test eax eax
je r-xdata
push eax
call esi
test eax eax
je r-xdata
or [ ebp + 0x10 ] 0x200000
jmp r-xdata
lea ecx [ ebp - 0x24 ]
push ecx
push 0xc
lea ecx [ ebp - 0x10 ]
push ecx
push 0x1
push eax
call ebx
test eax eax
je r-xdata
push [ ebp - 0x14 ]
call eax
mov [ ebp - 0x14 ] eax
test [ ebp - 0x8 ] 0x1
jne r-xdata
sub_1000f25d
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
test esi esi
je r-xdata
call sub_1000befe
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
jne r-xdata
mov edx esi
xor eax eax
mov [ esi ] ax
jmp r-xdata
test edi edi
je r-xdata
add edx 0x2
dec edi
jne r-xdata
sub edx ecx
cmp [ edx ] 0x0
je r-xdata
xor eax eax
test edi edi
jne r-xdata
dec edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov [ esi ] ax
call sub_1000befe
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
movzx eax [ ecx ]
mov [ edx + ecx ] ax
add ecx 0x2
test ax ax
je r-xdata
call sub_1000beac
mov eax esi
sub_1000f2d2
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0x14 ]
push esi
push edi
test ebx ebx
jne r-xdata
test edx edx
je r-xdata
test edx edx
jne r-xdata
call sub_1000befe
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
cmp [ ebp + 0xc ] edx
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
test ebx ebx
jne r-xdata
xor eax eax
mov ecx [ ebp + 0x10 ]
test ecx ecx
jne r-xdata
xor eax eax
mov [ edx ] ax
jmp r-xdata
mov eax edx
cmp ebx 0xffffffff
jne r-xdata
xor eax eax
mov [ edx ] ax
jmp r-xdata
mov esi ecx
sub esi edx
mov esi edx
sub esi ecx
test ebx ebx
jne r-xdata
dec edi
je r-xdata
test edi edi
jne r-xdata
dec edi
jne r-xdata
xor ecx ecx
mov [ eax ] cx
dec ebx
jne r-xdata
xor eax eax
cmp ebx 0xffffffff
jne r-xdata
movzx eax [ ecx ]
mov [ esi + ecx ] ax
add ecx 0x2
test ax ax
je r-xdata
jmp r-xdata
movzx ecx [ esi + eax ]
mov [ eax ] cx
add eax 0x2
test cx cx
je r-xdata
mov [ edx ] ax
call sub_1000befe
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov ecx [ ebp + 0xc ]
push 0x50
mov [ edx + ecx * 2 - 0x2 ] ax
pop eax
jmp r-xdata
call sub_1000beac
mov eax esi
jmp r-xdata
sub_1000f39f
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax [ ebp + 0x8 ]
sar eax 0x1
dec eax
pop ebp
retn
sub_1000f3ba
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
test esi esi
je r-xdata
call sub_1000befe
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
jne r-xdata
mov edx esi
sub edx eax
mov [ esi ] ax
jmp r-xdata
xor eax eax
test edi edi
jne r-xdata
dec edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov [ esi ] ax
call sub_1000befe
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
movzx ecx [ eax ]
mov [ edx + eax ] cx
add eax 0x2
test cx cx
je r-xdata
call sub_1000beac
mov eax esi
sub_1000f41d
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
test ecx ecx
js r-xdata
call sub_1000befe
mov [ eax ] 0x16
call sub_1000beac
or eax 0xffffffff
pop ebp
retn
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
pop ebp
retn
cmp ecx 0x3
jne r-xdata
mov eax [ rw-data ]
pop ebp
retn
sub_1000f45c
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
pop ebp
retn
sub eax 0x8
cmp [ eax ] 0xdddd
jne r-xdata
push eax
call sub_1000a48d
pop ecx
sub_1000f47c
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapSize@IAT ]
pop ebp
retn
call sub_1000befe
mov [ eax ] 0x16
call sub_1000beac
or eax 0xffffffff
pop ebp
retn
sub_1000f4af
mov edi edi
push esi
push edi
xor esi esi
mov edi rw-data
inc esi
cmp esi 0x24
jl r-xdata
lea eax [ esi * 8 + rw-data ]
mov [ eax ] edi
push 0xfa0
push [ eax ]
add edi 0x18
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
cmp [ esi * 8 + rw-data ] 0x1
jne r-xdata
xor eax eax
inc eax
and [ esi * 8 + rw-data ] 0x0
xor eax eax
jmp r-xdata
pop edi
pop esi
retn
sub_1000f4f9
mov edi edi
push ebx
mov ebx [ DeleteCriticalSection@IAT ]
push esi
mov esi rw-data
push edi
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
je r-xdata
mov edi [ esi ]
test edi edi
je r-xdata
mov esi rw-data
pop edi
push edi
call ebx
push edi
call sub_1000a48d
and [ esi ] 0x0
pop ecx
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
pop ebx
retn
push eax
call ebx
sub_1000f567
push 0xc
push r--data
call sub_1000eaf0
xor edi edi
inc edi
mov [ ebp - 0x1c ] edi
xor ebx ebx
cmp [ rw-data ] ebx
jne r-xdata
mov esi [ ebp + 0x8 ]
lea esi [ esi * 8 + rw-data ]
cmp [ esi ] ebx
je r-xdata
call sub_1000ab07
push 0x1e
call sub_1000a958
push 0xff
call sub_1000e0c2
push 0x18
call sub_1000e35d
pop ecx
mov edi eax
cmp edi ebx
jne r-xdata
mov eax edi
jmp r-xdata
push 0xa
call sub_1000f629
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi ] ebx
jne r-xdata
call sub_1000befe
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
call sub_1000eb35
retn
push edi
call sub_1000a48d
pop ecx
push 0xfa0
push edi
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
mov [ esi ] edi
jmp r-xdata
push edi
call sub_1000a48d
pop ecx
call sub_1000befe
mov [ eax ] 0xc
mov [ ebp - 0x1c ] ebx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000f620
mov eax [ ebp - 0x1c ]
sub_1000f629
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
lea esi [ eax * 8 + rw-data ]
cmp [ esi ] 0x0
jne r-xdata
push [ esi ]
call [ EnterCriticalSection@IAT ]
pop esi
pop ebp
retn
push eax
call sub_1000f567
pop ecx
test eax eax
jne r-xdata
push 0x11
call sub_1000e33f
sub_1000f660
mov edx [ esp + 0xc ]
mov ecx [ esp + 0x4 ]
test edx edx
je r-xdata
mov eax [ esp + 0x4 ]
retn
xor eax eax
mov al [ esp + 0x8 ]
test al al
jne r-xdata
push edi
mov edi ecx
cmp edx 0x4
jb r-xdata
cmp edx 0x80
jb r-xdata
mov [ edi ] al
add edi 0x1
sub edx 0x1
jne r-xdata
neg ecx
and ecx 0x3
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov ecx eax
shl eax 0x8
add eax ecx
mov ecx eax
shl eax 0x10
add eax ecx
mov ecx edx
and edx 0x3
shr ecx 0x2
je r-xdata
sub edx ecx
jmp sub_10011a1c
[ edi ]
test edx edx
je r-xdata
mov [ edi ] al
add edi 0x1
sub ecx 0x1
jne r-xdata
sub_1000f6da
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov edx [ ebp + 0x18 ]
push ebx
xor ebx ebx
push esi
push edi
cmp edx ebx
jle r-xdata
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x24 ] ebx
jne r-xdata
mov eax [ ebp + 0x14 ]
mov ecx edx
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x28 ] ebx
push ebx
push ebx
push [ ebp + 0x18 ]
setne al
push [ ebp + 0x14 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x24 ]
call esi
mov edi eax
mov [ ebp - 0x10 ] edi
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x24 ] eax
mov eax edx
sub eax ecx
dec eax
cmp eax edx
jge r-xdata
inc eax
cmp ecx ebx
jne r-xdata
jle r-xdata
xor eax eax
jmp r-xdata
mov [ ebp + 0x18 ] eax
inc eax
dec ecx
cmp [ eax ] bl
je r-xdata
or ecx 0xffffffff
mov [ ebp - 0xc ] ebx
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
lea esp [ ebp - 0x1c ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_100098bc
leave
retn
push edi
push [ ebp - 0xc ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push 0x1
push [ ebp + 0x24 ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push [ ebp - 0xc ]
call sub_1000f45c
mov eax [ ebp - 0x8 ]
pop ecx
mov esi [ LCMapStringW@IAT ]
push ebx
push ebx
push edi
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
je r-xdata
push eax
call sub_1000a4c7
pop ecx
cmp eax ebx
je r-xdata
call sub_100119f0
mov eax esp
cmp eax ebx
je r-xdata
mov ecx 0x400
test [ ebp + 0x10 ] ecx
je r-xdata
mov [ ebp - 0xc ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
mov edi [ ebp - 0x8 ]
cmp edi ebx
jle r-xdata
mov eax [ ebp + 0x20 ]
cmp eax ebx
je r-xdata
cmp [ ebp - 0xc ] ebx
je r-xdata
add eax 0x8
xor edi edi
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
cmp [ ebp - 0x8 ] eax
jg r-xdata
push [ ebp - 0x8 ]
push edi
push [ ebp - 0x10 ]
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax ecx
ja r-xdata
push eax
push [ ebp + 0x1c ]
push edi
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
jmp r-xdata
push edi
call sub_1000f45c
pop ecx
push ebx
push ebx
cmp [ ebp + 0x20 ] ebx
jne r-xdata
push eax
call sub_1000a4c7
pop ecx
cmp eax ebx
je r-xdata
call sub_100119f0
mov edi esp
cmp edi ebx
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push ebx
push ebx
jmp r-xdata
mov edi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ edi ] 0xcccc
add edi 0x8
jmp r-xdata
push [ ebp - 0x8 ]
push edi
push ebx
push [ ebp + 0x24 ]
call [ WideCharToMultiByte@IAT ]
mov [ ebp - 0x8 ] eax
cmp edi ebx
je r-xdata
sub_1000f8c1
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10009980
push [ ebp + 0x28 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_1000f6da
add esp 0x24
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1000f907
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
xor ebx ebx
push esi
push edi
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x1c ] ebx
jne r-xdata
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x20 ] ebx
push ebx
push ebx
push [ ebp + 0x14 ]
setne al
push [ ebp + 0x10 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x1c ]
call esi
mov edi eax
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x1c ] eax
jle r-xdata
xor eax eax
jmp r-xdata
test ebx ebx
je r-xdata
cmp edi 0x7ffffff0
ja r-xdata
lea esp [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_100098bc
leave
retn
lea eax [ edi + edi ]
push eax
push 0x0
push ebx
call sub_1000f660
add esp 0xc
push edi
push ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x1
push [ ebp + 0x1c ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push ebx
call sub_1000f45c
mov eax [ ebp - 0x8 ]
pop ecx
push [ ebp + 0x18 ]
push eax
push ebx
push [ ebp + 0xc ]
call [ GetStringTypeW@IAT ]
mov [ ebp - 0x8 ] eax
push eax
call sub_1000a4c7
pop ecx
cmp eax ebx
je r-xdata
call sub_100119f0
mov eax esp
cmp eax ebx
je r-xdata
mov ebx eax
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
add eax 0x8
sub_1000f9ee
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10009980
push [ ebp + 0x24 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_1000f907
add esp 0x1c
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1000fa2e
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
push [ esi + 0x4 ]
call sub_1000a48d
push [ esi + 0x8 ]
call sub_1000a48d
push [ esi + 0xc ]
call sub_1000a48d
push [ esi + 0x10 ]
call sub_1000a48d
push [ esi + 0x14 ]
call sub_1000a48d
push [ esi + 0x18 ]
call sub_1000a48d
push [ esi ]
call sub_1000a48d
push [ esi + 0x20 ]
call sub_1000a48d
push [ esi + 0x24 ]
call sub_1000a48d
push [ esi + 0x28 ]
call sub_1000a48d
push [ esi + 0x2c ]
call sub_1000a48d
push [ esi + 0x30 ]
call sub_1000a48d
push [ esi + 0x34 ]
call sub_1000a48d
push [ esi + 0x1c ]
call sub_1000a48d
push [ esi + 0x38 ]
call sub_1000a48d
push [ esi + 0x3c ]
call sub_1000a48d
add esp 0x40
push [ esi + 0x40 ]
call sub_1000a48d
push [ esi + 0x44 ]
call sub_1000a48d
push [ esi + 0x48 ]
call sub_1000a48d
push [ esi + 0x4c ]
call sub_1000a48d
push [ esi + 0x50 ]
call sub_1000a48d
push [ esi + 0x54 ]
call sub_1000a48d
push [ esi + 0x58 ]
call sub_1000a48d
push [ esi + 0x5c ]
call sub_1000a48d
push [ esi + 0x60 ]
call sub_1000a48d
push [ esi + 0x64 ]
call sub_1000a48d
push [ esi + 0x68 ]
call sub_1000a48d
push [ esi + 0x6c ]
call sub_1000a48d
push [ esi + 0x70 ]
call sub_1000a48d
push [ esi + 0x74 ]
call sub_1000a48d
push [ esi + 0x78 ]
call sub_1000a48d
push [ esi + 0x7c ]
call sub_1000a48d
add esp 0x40
push [ esi + 0x80 ]
call sub_1000a48d
push [ esi + 0x84 ]
call sub_1000a48d
push [ esi + 0x88 ]
call sub_1000a48d
push [ esi + 0x8c ]
call sub_1000a48d
push [ esi + 0x90 ]
call sub_1000a48d
push [ esi + 0x94 ]
call sub_1000a48d
push [ esi + 0x98 ]
call sub_1000a48d
push [ esi + 0x9c ]
call sub_1000a48d
push [ esi + 0xa0 ]
call sub_1000a48d
push [ esi + 0xa4 ]
call sub_1000a48d
push [ esi + 0xa8 ]
call sub_1000a48d
push [ esi + 0xbc ]
call sub_1000a48d
push [ esi + 0xc0 ]
call sub_1000a48d
push [ esi + 0xc4 ]
call sub_1000a48d
push [ esi + 0xc8 ]
call sub_1000a48d
push [ esi + 0xcc ]
call sub_1000a48d
add esp 0x40
push [ esi + 0xd0 ]
call sub_1000a48d
push [ esi + 0xb8 ]
call sub_1000a48d
push [ esi + 0xd8 ]
call sub_1000a48d
push [ esi + 0xdc ]
call sub_1000a48d
push [ esi + 0xe0 ]
call sub_1000a48d
push [ esi + 0xe4 ]
call sub_1000a48d
push [ esi + 0xe8 ]
call sub_1000a48d
push [ esi + 0xec ]
call sub_1000a48d
push [ esi + 0xd4 ]
call sub_1000a48d
push [ esi + 0xf0 ]
call sub_1000a48d
push [ esi + 0xf4 ]
call sub_1000a48d
push [ esi + 0xf8 ]
call sub_1000a48d
push [ esi + 0xfc ]
call sub_1000a48d
push [ esi + 0x100 ]
call sub_1000a48d
push [ esi + 0x104 ]
call sub_1000a48d
push [ esi + 0x108 ]
call sub_1000a48d
add esp 0x40
push [ esi + 0x10c ]
call sub_1000a48d
push [ esi + 0x110 ]
call sub_1000a48d
push [ esi + 0x114 ]
call sub_1000a48d
push [ esi + 0x118 ]
call sub_1000a48d
push [ esi + 0x11c ]
call sub_1000a48d
push [ esi + 0x120 ]
call sub_1000a48d
push [ esi + 0x124 ]
call sub_1000a48d
push [ esi + 0x128 ]
call sub_1000a48d
push [ esi + 0x12c ]
call sub_1000a48d
push [ esi + 0x130 ]
call sub_1000a48d
push [ esi + 0x134 ]
call sub_1000a48d
push [ esi + 0x138 ]
call sub_1000a48d
push [ esi + 0x13c ]
call sub_1000a48d
push [ esi + 0x140 ]
call sub_1000a48d
push [ esi + 0x144 ]
call sub_1000a48d
push [ esi + 0x148 ]
call sub_1000a48d
add esp 0x40
push [ esi + 0x14c ]
call sub_1000a48d
push [ esi + 0x150 ]
call sub_1000a48d
push [ esi + 0x154 ]
call sub_1000a48d
push [ esi + 0x158 ]
call sub_1000a48d
push [ esi + 0x15c ]
call sub_1000a48d
push [ esi + 0x160 ]
call sub_1000a48d
add esp 0x18
sub_1000fda5
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000a48d
pop ecx
mov eax [ esi + 0x8 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000a48d
pop ecx
mov eax [ esi + 0x30 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000a48d
pop ecx
mov esi [ esi + 0x34 ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_1000a48d
pop ecx
push esi
call sub_1000a48d
pop ecx
sub_1000fe0e
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi + 0xc ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x10 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000a48d
pop ecx
mov eax [ esi + 0x14 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000a48d
pop ecx
mov eax [ esi + 0x18 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000a48d
pop ecx
mov eax [ esi + 0x1c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000a48d
pop ecx
mov eax [ esi + 0x20 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000a48d
pop ecx
mov eax [ esi + 0x24 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000a48d
pop ecx
mov eax [ esi + 0x38 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000a48d
pop ecx
mov eax [ esi + 0x3c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000a48d
pop ecx
mov eax [ esi + 0x40 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000a48d
pop ecx
mov eax [ esi + 0x44 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000a48d
pop ecx
mov eax [ esi + 0x48 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_1000a48d
pop ecx
mov esi [ esi + 0x4c ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_1000a48d
pop ecx
push esi
call sub_1000a48d
pop ecx
sub_1000ff0c
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_10009980
movzx eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax 0x8000
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1000ff57
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x18 ]
call sub_10009980
mov ebx [ ebp + 0x8 ]
lea eax [ ebx + 0x1 ]
cmp eax 0x100
ja r-xdata
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_1000ff0c
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp - 0x18 ]
mov eax [ eax + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
jmp r-xdata
xor ecx ecx
mov [ ebp - 0x8 ] bl
mov [ ebp - 0x7 ] 0x0
inc ecx
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x8 ] al
mov [ ebp - 0x7 ] bl
mov [ ebp - 0x6 ] 0x0
pop ecx
jmp r-xdata
and eax [ ebp + 0xc ]
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx eax [ ebp - 0x4 ]
cmp [ ebp - 0xc ] al
je r-xdata
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x14 ]
push [ eax + 0x4 ]
lea eax [ ebp - 0x4 ]
push eax
push ecx
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x18 ]
push 0x1
push eax
call sub_1000f9ee
add esp 0x20
test eax eax
jne r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
sub_10010010
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
or ecx 0xffffffff
lea ecx [ ecx ]
add edx 0x1
bts [ esp ] eax
jmp r-xdata
mov eax ecx
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
add ecx 0x1
mov al [ esi ]
or al al
je r-xdata
sub_10010060
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x80
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_100100e4 ]
jmp [ ecx * 4 + jump_table_10010164 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_100101d0 ]
jmp r-xdata
jmp [ ecx * 4 + jump_table_1001036c ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10010270 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1001036c ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_100101d0 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
push edi
mov eax esi
and eax 0xf
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_1001036c ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_100101d0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_100101d0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_100101d0 ]
mov edx 0x10
sub edx eax
sub ecx edx
push ecx
mov eax edx
mov ecx eax
and ecx 0x3
je r-xdata
mov edx ecx
and ecx 0x7f
shr edx 0x7
je r-xdata
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1001036c ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1001036c ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1001036c ]
shr eax 0x2
je r-xdata
mov dl [ esi ]
mov [ edi ] dl
inc esi
inc edi
dec ecx
jne r-xdata
test ecx ecx
je r-xdata
jmp r-xdata
pop ecx
jmp r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec eax
jne r-xdata
pop eax
pop esi
pop edi
pop ebp
retn
mov edx ecx
shr edx 0x4
test edx edx
je r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec edx
jne r-xdata
and ecx 0xf
je r-xdata
lea ebx [ ebx ]
mov eax ecx
shr ecx 0x2
je r-xdata
movdqa xmm0 [ esi ]
movdqa [ edi ] xmm0
lea esi [ esi + 0x10 ]
lea edi [ edi + 0x10 ]
dec edx
jne r-xdata
mov ecx eax
and ecx 0x3
je r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec ecx
jne r-xdata
mov al [ esi ]
mov [ edi ] al
inc esi
inc edi
dec ecx
jne r-xdata
sub_100103d0
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
mov edi edi
add edx 0x1
bts [ esp ] eax
jmp r-xdata
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
mov al [ esi ]
or al al
je r-xdata
lea eax [ esi - 0x1 ]
sub_10010410
push ebx
push esi
push edi
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x18 ]
push ebp
push edx
push eax
push ecx
push ecx
push sub_100104a0
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x8 ] eax
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0x18
pop edi
pop esi
pop ebx
retn
mov edx [ esp + 0x34 ]
cmp edx 0xfffffffe
je r-xdata
lea esi [ esi + esi * 2 ]
lea ebx [ ebx + esi * 4 + 0x10 ]
mov ecx [ ebx ]
mov [ eax + 0xc ] ecx
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
cmp esi edx
jbe r-xdata
mov eax [ esp + 0x30 ]
mov ebx [ eax + 0x8 ]
mov ecx [ esp + 0x2c ]
xor ebx [ ecx ]
mov esi [ eax + 0xc ]
cmp esi 0xfffffffe
je r-xdata
push 0x101
mov eax [ ebx + 0x8 ]
call sub_10011bf5
mov ecx 0x1
mov eax [ ebx + 0x8 ]
call sub_10011c14
jmp r-xdata
sub_100104a0
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov ecx [ eax + 0x8 ]
xor ecx eax
call sub_100098bc
push ebp
mov ebp [ eax + 0x18 ]
push [ eax + 0xc ]
push [ eax + 0x10 ]
push [ eax + 0x14 ]
call sub_10010410
add esp 0xc
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10010502
push ebp
push esi
push edi
push ebx
mov ebp edx
xor eax eax
xor ebx ebx
xor edx edx
xor esi esi
xor edi edi
call ecx
pop ebx
pop edi
pop esi
pop ebp
retn
sub_10010532
push ebp
mov ebp esp
push ebx
push esi
push edi
push 0x0
push edx
push r-xdata
push ecx
call RtlUnwind
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10010562
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
push edi
push esi
mov [ ebp - 0x4 ] eax
call sub_10011c9d
or edi 0xffffffff
pop ecx
cmp eax edi
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x4 ]
push ecx
push [ ebp - 0x8 ]
push eax
call [ SetFilePointer@IAT ]
mov [ ebp - 0x8 ] eax
cmp eax edi
jne r-xdata
call sub_1000befe
mov [ eax ] 0x9
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfd
mov eax [ ebp - 0x8 ]
mov edx [ ebp - 0x4 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
leave
retn
push eax
call sub_1000bf24
pop ecx
jmp r-xdata
mov eax edi
mov edx edi
jmp r-xdata
sub_100105e7
push 0x14
push r--data
call sub_1000eaf0
or ebx 0xffffffff
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x20 ] ebx
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
test eax eax
js r-xdata
call sub_1000bf11
and [ eax ] 0x0
call sub_1000befe
mov [ eax ] 0x9
call sub_1000bf11
and [ eax ] 0x0
call sub_1000befe
mov [ eax ] 0x9
call sub_1000beac
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_1000eb35
retn
mov eax ebx
mov edx ebx
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea edi [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ edi ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_10011d06
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000befe
mov [ eax ] 0x9
call sub_1000bf11
and [ eax ] 0x0
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x20 ] ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10010562
add esp 0x10
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x20 ] edx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100106c7
mov eax [ ebp - 0x24 ]
mov edx [ ebp - 0x20 ]
sub_100106d1
mov edi edi
push ebp
mov ebp esp
mov eax 0x1ae4
call sub_10011e10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
mov [ ebp - 0x1acc ] eax
mov [ ebp - 0x1ac8 ] edi
mov [ ebp - 0x1ad0 ] edi
cmp [ ebp + 0x10 ] edi
jne r-xdata
cmp eax edi
jne r-xdata
xor eax eax
jmp r-xdata
mov eax esi
sar eax 0x5
mov edi esi
push ebx
lea ebx [ eax * 4 + rw-data ]
mov eax [ ebx ]
and edi 0x1f
shl edi 0x6
mov cl [ eax + edi + 0x24 ]
add cl cl
sar cl 0x1
mov [ ebp - 0x1adc ] ebx
mov [ ebp - 0x1ac1 ] cl
cmp cl 0x2
je r-xdata
call sub_1000bf11
mov [ eax ] edi
call sub_1000befe
mov [ eax ] 0x16
call sub_1000beac
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_100098bc
leave
retn
mov ecx [ ebp + 0x10 ]
not ecx
test cl 0x1
jne r-xdata
cmp cl 0x1
jne r-xdata
test [ eax + edi + 0x4 ] 0x20
je r-xdata
call sub_1000bf11
and [ eax ] 0x0
call sub_1000befe
mov [ eax ] 0x16
call sub_1000beac
jmp r-xdata
push esi
call sub_10010eeb
pop ecx
test eax eax
je r-xdata
push 0x2
push 0x0
push 0x0
push esi
call sub_10010562
add esp 0x10
or eax 0xffffffff
jmp r-xdata
xor ecx ecx
mov eax [ ebx ]
test [ edi + eax + 0x4 ] 0x80
je r-xdata
pop ebx
push ecx
lea ecx [ ebp - 0x1ad8 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp - 0x1acc ]
push [ eax + edi ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x1ac1 ] 0x0
mov [ ebp - 0x1abc ] ecx
jne r-xdata
call sub_1000b8db
mov eax [ eax + 0x6c ]
xor ecx ecx
cmp [ eax + 0x14 ] ecx
lea eax [ ebp - 0x1ae0 ]
sete cl
push eax
mov eax [ ebx ]
push [ edi + eax ]
mov esi ecx
call [ GetConsoleMode@IAT ]
xor ecx ecx
cmp eax ecx
je r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1abc ] eax
mov eax [ ebp - 0x1ad8 ]
and [ ebp - 0x1abc ] 0x0
mov [ ebp - 0x1ac8 ] eax
jmp r-xdata
cmp [ ebp - 0x1ac1 ] 0x2
jne r-xdata
mov ebx [ ebp - 0x1acc ]
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov eax [ ebx ]
test [ eax + edi + 0x4 ] 0x80
je r-xdata
cmp esi ecx
je r-xdata
mov eax [ ebp - 0x1ac8 ]
sub eax [ ebp - 0x1ad0 ]
cmp [ ebp - 0x1abc ] 0x0
je r-xdata
cmp [ ebp - 0x1ac8 ] 0x0
jne r-xdata
mov eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ad4 ] eax
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov ebx [ ebp - 0x1acc ]
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
test [ edi + eax + 0x4 ] 0x40
je r-xdata
mov ecx ebx
xor esi esi
sub ecx [ ebp - 0x1acc ]
lea eax [ ebp - 0x1ab8 ]
call [ GetConsoleCP@IAT ]
mov ebx [ ebp - 0x1acc ]
mov [ ebp - 0x1ae0 ] eax
xor eax eax
mov [ ebp - 0x1ad4 ] eax
cmp [ ebp + 0x10 ] eax
jbe r-xdata
cmp [ ebp - 0x1ac1 ] cl
je r-xdata
push 0x5
pop esi
cmp [ ebp - 0x1abc ] esi
jne r-xdata
mov ecx [ ebp - 0x1ad4 ]
and [ ebp - 0x1ac0 ] 0x0
sub ecx [ ebp - 0x1acc ]
push 0x2
lea eax [ ebp - 0x6b8 ]
pop esi
and [ ebp - 0x1ac0 ] 0x0
mov ecx ebx
sub ecx [ ebp - 0x1acc ]
push 0x2
lea eax [ ebp - 0x1ab8 ]
pop esi
call sub_1000befe
mov [ eax ] 0x1c
call sub_1000bf11
and [ eax ] 0x0
mov eax [ ebp - 0x1acc ]
cmp [ eax ] 0x1a
jne r-xdata
mov esi eax
lea eax [ ebp - 0x1ab8 ]
sub esi eax
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
push esi
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov dl [ ebx ]
inc ebx
inc ecx
mov [ ebp - 0x1ae0 ] ebx
cmp dl 0xa
jne r-xdata
mov [ ebp - 0x1ac0 ] eax
push [ ebp - 0x1abc ]
call sub_1000bf24
pop ecx
jmp r-xdata
call sub_1000befe
mov [ eax ] 0x9
call sub_1000bf11
mov [ eax ] esi
jmp r-xdata
xor esi esi
push esi
push esi
push 0xd55
lea ecx [ ebp - 0x1410 ]
push ecx
lea ecx [ ebp - 0x6b8 ]
sub eax ecx
cdq
sub eax edx
sar eax 0x1
push eax
mov eax ecx
push eax
push esi
push 0xfde9
call [ WideCharToMultiByte@IAT ]
mov ebx eax
cmp ebx esi
je r-xdata
mov edx [ ebp - 0x1ad4 ]
movzx edx [ edx ]
add [ ebp - 0x1ad4 ] esi
add ecx esi
cmp edx 0xa
jne r-xdata
mov esi eax
lea eax [ ebp - 0x1ab8 ]
sub esi eax
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
push esi
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
movzx edx [ ebx ]
add ebx esi
add ecx esi
mov [ ebp - 0x1ae0 ] ebx
cmp edx 0xa
jne r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x1ad8 ]
add [ ebp - 0x1ac8 ] eax
cmp eax esi
jl r-xdata
mov [ eax ] dl
inc eax
inc esi
cmp esi 0x13ff
jb r-xdata
inc [ ebp - 0x1ad0 ]
mov [ eax ] 0xd
inc eax
inc esi
cmp al 0x1
je r-xdata
mov cl [ ebx ]
mov esi [ ebp - 0x1adc ]
xor eax eax
cmp cl 0xa
sete al
mov [ ebp - 0x1ae4 ] eax
mov eax [ esi ]
add eax edi
cmp [ eax + 0x38 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
mov eax ebx
sub eax esi
push eax
lea eax [ ebp + esi - 0x1410 ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
add [ ebp - 0x1ac0 ] esi
mov [ eax ] dx
add eax esi
cmp [ ebp - 0x1ac0 ] 0x6a8
jb r-xdata
push 0xd
pop ebx
mov [ eax ] bx
add eax esi
add [ ebp - 0x1ac0 ] esi
mov eax [ ebp - 0x1ad8 ]
add [ ebp - 0x1ac8 ] eax
cmp eax esi
jl r-xdata
add [ ebp - 0x1ac0 ] esi
mov [ eax ] dx
add eax esi
cmp [ ebp - 0x1ac0 ] 0x13fe
jb r-xdata
add [ ebp - 0x1ad0 ] esi
push 0xd
pop ebx
mov [ eax ] bx
mov ebx [ ebp - 0x1ae0 ]
add eax esi
add [ ebp - 0x1ac0 ] esi
mov eax ebx
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
movzx esi [ ebx ]
xor ecx ecx
cmp esi 0xa
sete cl
add ebx 0x2
add [ ebp - 0x1ac0 ] 0x2
mov [ ebp - 0x1abc ] esi
mov [ ebp - 0x1ae4 ] ecx
cmp al 0x2
jne r-xdata
movsx eax cl
push eax
call sub_1000ff44
pop ecx
test eax eax
je r-xdata
mov dl [ eax + 0x34 ]
mov [ ebp - 0xc ] dl
mov [ ebp - 0xb ] cl
and [ eax + 0x38 ] 0x0
push 0x2
lea eax [ ebp - 0xc ]
push eax
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1abc ] eax
add esi [ ebp - 0x1ad8 ]
cmp ebx esi
jg r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
mov eax ebx
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
jmp r-xdata
push [ ebp - 0x1abc ]
call sub_10011dcc
pop ecx
cmp ax [ ebp - 0x1abc ]
jne r-xdata
cmp al 0x2
jne r-xdata
cmp al 0x1
je r-xdata
push 0x1
push ebx
mov ecx [ ebp - 0x1acc ]
sub ecx ebx
add ecx [ ebp + 0x10 ]
xor eax eax
inc eax
cmp ecx eax
jbe r-xdata
lea eax [ ebp - 0x1abc ]
push eax
call sub_10011641
add esp 0xc
cmp eax 0xffffffff
je r-xdata
mov eax [ ebp - 0x1ad4 ]
sub eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ac8 ] eax
cmp eax [ ebp + 0x10 ]
jb r-xdata
jmp r-xdata
jmp r-xdata
add [ ebp - 0x1ac8 ] 0x2
cmp [ ebp - 0x1ae4 ] 0x0
je r-xdata
mov eax [ ebp + 0x10 ]
cmp [ ebp - 0x1ac0 ] eax
jb r-xdata
xor eax eax
push eax
push eax
push 0x5
lea ecx [ ebp - 0xc ]
push ecx
push 0x1
lea ecx [ ebp - 0x1abc ]
push ecx
push eax
push [ ebp - 0x1ae0 ]
inc ebx
inc [ ebp - 0x1ac0 ]
call [ WideCharToMultiByte@IAT ]
mov esi eax
test esi esi
je r-xdata
mov ecx [ esi ]
mov dl [ ebx ]
inc [ ebp - 0x1ac8 ]
mov [ edi + ecx + 0x34 ] dl
mov ecx [ esi ]
mov [ edi + ecx + 0x38 ] eax
jmp r-xdata
push 0x2
lea eax [ ebp - 0x1abc ]
push ebx
push eax
call sub_10011641
add esp 0xc
cmp eax 0xffffffff
je r-xdata
jmp r-xdata
cmp ebx esi
jg r-xdata
push 0xd
pop eax
push eax
mov [ ebp - 0x1abc ] eax
call sub_10011dcc
pop ecx
cmp ax [ ebp - 0x1abc ]
jne r-xdata
mov al [ ebp - 0x1ac1 ]
test al al
jne r-xdata
jmp r-xdata
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push esi
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc ebx
inc [ ebp - 0x1ac0 ]
jmp r-xdata
inc [ ebp - 0x1ac8 ]
inc [ ebp - 0x1ad0 ]
mov eax [ ebp - 0x1ac0 ]
mov ecx [ ebp - 0x1ad0 ]
add eax ecx
mov [ ebp - 0x1ac8 ] eax
cmp [ ebp - 0x1ad4 ] esi
jl r-xdata
cmp [ ebp - 0x1ae4 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push 0x1
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
mov [ ebp - 0xc ] 0xd
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x1ad4 ] 0x1
jl r-xdata
inc [ ebp - 0x1ad0 ]
inc [ ebp - 0x1ac8 ]
jmp r-xdata
sub_10010dce
push 0x10
push r--data
call sub_1000eaf0
mov ebx [ ebp + 0x8 ]
cmp ebx 0xfffffffe
jne r-xdata
test ebx ebx
js r-xdata
call sub_1000bf11
and [ eax ] 0x0
call sub_1000befe
mov [ eax ] 0x9
call sub_1000bf11
and [ eax ] 0x0
call sub_1000befe
mov [ eax ] 0x9
call sub_1000beac
jmp r-xdata
cmp ebx [ rw-data ]
jb r-xdata
call sub_1000eb35
retn
or eax 0xffffffff
jmp r-xdata
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov esi ebx
and esi 0x1f
shl esi 0x6
mov eax [ edi ]
movsx eax [ eax + esi + 0x4 ]
and eax 0x1
je r-xdata
push ebx
call sub_10011d06
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000befe
mov [ eax ] 0x9
call sub_1000bf11
and [ eax ] 0x0
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ebx
call sub_100106d1
add esp 0xc
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10010e9a
mov eax [ ebp - 0x1c ]
sub_10010ea2
mov edi edi
push ebp
mov ebp esp
inc [ rw-data ]
push 0x1000
call sub_1000e35d
pop ecx
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x8 ] eax
test eax eax
je r-xdata
or [ ecx + 0xc ] 0x4
lea eax [ ecx + 0x14 ]
mov [ ecx + 0x8 ] eax
mov [ ecx + 0x18 ] 0x2
or [ ecx + 0xc ] 0x8
mov [ ecx + 0x18 ] 0x1000
jmp r-xdata
mov eax [ ecx + 0x8 ]
and [ ecx + 0x4 ] 0x0
mov [ ecx ] eax
pop ebp
retn
sub_10010eeb
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
test eax eax
js r-xdata
call sub_1000befe
mov [ eax ] 0x9
call sub_1000befe
mov [ eax ] 0x9
call sub_1000beac
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
xor eax eax
pop ebp
retn
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
movsx eax [ ecx + eax + 0x4 ]
and eax 0x40
pop ebp
retn
sub_10010f47
mov eax [ rw-data ]
push esi
push 0x14
pop esi
test eax eax
jne r-xdata
cmp eax esi
jge r-xdata
mov eax 0x200
jmp r-xdata
push 0x4
push eax
call sub_1000e3a2
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov eax esi
mov [ rw-data ] eax
xor edx edx
mov ecx rw-data
jmp r-xdata
push 0x4
push esi
mov [ rw-data ] esi
call sub_1000e3a2
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov [ edx + eax ] ecx
add ecx 0x20
add edx 0x4
cmp ecx rw-data
jl r-xdata
push 0x1a
pop eax
pop esi
retn
mov eax [ rw-data ]
push 0xfffffffe
pop esi
xor edx edx
mov ecx rw-data
push edi
mov [ ecx ] esi
cmp eax esi
je r-xdata
mov eax edx
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
mov edi edx
and edi 0x1f
shl edi 0x6
mov eax [ edi + eax ]
cmp eax 0xffffffff
je r-xdata
pop edi
xor eax eax
pop esi
retn
test eax eax
jne r-xdata
add ecx 0x20
inc edx
cmp ecx rw-data
jl r-xdata
sub_10011019
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax rw-data
cmp esi eax
jb r-xdata
add esi 0x20
push esi
call [ EnterCriticalSection@IAT ]
cmp esi rw-data
ja r-xdata
mov ecx esi
sub ecx eax
sar ecx 0x5
add ecx 0x10
push ecx
call sub_1000f629
or [ esi + 0xc ] 0x8000
pop ecx
jmp r-xdata
pop esi
pop ebp
retn
sub_1001105a
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0x14
jge r-xdata
mov eax [ ebp + 0xc ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
pop ebp
retn
add eax 0x10
push eax
call sub_1000f629
mov eax [ ebp + 0xc ]
or [ eax + 0xc ] 0x8000
pop ecx
pop ebp
retn
sub_1001108c
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
cmp eax rw-data
ja r-xdata
and [ eax + 0xc ] 0xffff7fff
sub eax ecx
sar eax 0x5
add eax 0x10
push eax
call sub_1000f550
pop ecx
pop ebp
retn
sub_100110c8
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
cmp ecx 0x14
jge r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
and [ eax + 0xc ] 0xffff7fff
add ecx 0x10
push ecx
call sub_1000f550
pop ecx
pop ebp
retn
sub_100110f7
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
mov eax [ eax + 0x10 ]
pop ebp
retn
call sub_1000befe
mov [ eax ] 0x16
call sub_1000beac
or eax 0xffffffff
pop ebp
retn
sub_1001111d
mov edi edi
push esi
push edi
xor edi edi
push [ edi + rw-data ]
call [ EncodePointer@IAT ]
mov [ edi + rw-data ] eax
add edi 0x4
cmp edi 0x28
jb r-xdata
pop edi
pop esi
retn
sub_10011156
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
push edi
mov edi [ ebp + 0x10 ]
cmp esi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
cmp edi ebx
jbe r-xdata
cmp edi 0x7fffffff
jbe r-xdata
or [ eax ] 0xffffffff
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
push [ ebp + 0x18 ]
lea ecx [ ebp - 0x10 ]
call sub_10009980
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
call sub_1000befe
push 0x16
pop esi
mov [ eax ] esi
call sub_1000beac
xor eax eax
jmp r-xdata
mov [ eax ] ebx
lea ecx [ ebp + 0xc ]
push ecx
push ebx
push edi
push esi
push 0x1
lea ecx [ ebp + 0x14 ]
push ecx
push ebx
mov [ ebp + 0xc ] ebx
push [ eax + 0x4 ]
call [ WideCharToMultiByte@IAT ]
cmp eax ebx
je r-xdata
mov ax [ ebp + 0x14 ]
mov ecx 0xff
cmp ax cx
jbe r-xdata
pop edi
pop esi
pop ebx
leave
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
cmp esi ebx
je r-xdata
cmp esi ebx
je r-xdata
call sub_1000befe
mov [ eax ] 0x2a
call sub_1000befe
mov eax [ eax ]
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp esi ebx
je r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
cmp edi ebx
ja r-xdata
cmp edi ebx
jbe r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
call sub_1000befe
push 0x22
pop esi
mov [ eax ] esi
call sub_1000beac
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp edi ebx
jbe r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov [ ecx ] eax
jmp r-xdata
mov [ eax ] 0x1
mov [ esi ] al
push edi
push ebx
push esi
call sub_1000f660
add esp 0xc
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
push edi
push ebx
push esi
call sub_1000f660
add esp 0xc
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
sub_100112d0
push esi
mov eax [ esp + 0x14 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x8 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x10 ]
mov ecx eax
mov eax esi
mul [ esp + 0x10 ]
add edx ecx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x14 ]
mov ecx eax
mov eax [ esp + 0x10 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x8 ]
sbb edx [ esp + 0xc ]
neg edx
neg eax
sbb edx 0x0
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
pop esi
retn 0x10
dec esi
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
cmp edx [ esp + 0xc ]
ja r-xdata
jb r-xdata
xor ebx ebx
cmp eax [ esp + 0x8 ]
jbe r-xdata
sub_10011370
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
or ecx eax
mov ecx [ esp + 0xc ]
jne r-xdata
push ebx
mul ecx
mov ebx eax
mov eax [ esp + 0x8 ]
mul [ esp + 0x14 ]
add ebx eax
mov eax [ esp + 0x8 ]
mul ecx
add edx ebx
pop ebx
retn 0x10
mov eax [ esp + 0x4 ]
mul ecx
retn 0x10
sub_100113a4
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0xc ]
test [ esi + 0xc ] 0x40
push edi
jne r-xdata
add [ esi + 0x4 ] 0xfffffffe
js r-xdata
push esi
call sub_100110f7
pop ecx
mov ebx rw-data
cmp eax 0xffffffff
je r-xdata
movzx eax [ ebp + 0x8 ]
push esi
push eax
call sub_10012073
pop ecx
pop ecx
mov ecx [ esi ]
mov eax [ ebp + 0x8 ]
mov [ ecx ] ax
add [ esi ] 0x2
jmp r-xdata
mov eax ebx
push esi
call sub_100110f7
pop ecx
cmp eax 0xfffffffe
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_100098bc
leave
retn
push esi
call sub_100110f7
pop ecx
cmp eax 0xffffffff
je r-xdata
push esi
call sub_100110f7
sar eax 0x5
push esi
lea edi [ eax * 4 + rw-data ]
call sub_100110f7
and eax 0x1f
pop ecx
shl eax 0x6
add eax [ edi ]
pop ecx
jmp r-xdata
mov eax ebx
push esi
call sub_100110f7
pop ecx
cmp eax 0xfffffffe
je r-xdata
mov al [ eax + 0x24 ]
and al 0x7f
cmp al 0x2
je r-xdata
push esi
call sub_100110f7
pop ecx
cmp eax 0xffffffff
je r-xdata
push esi
call sub_100110f7
sar eax 0x5
push esi
lea edi [ eax * 4 + rw-data ]
call sub_100110f7
and eax 0x1f
pop ecx
shl eax 0x6
add eax [ edi ]
pop ecx
jmp r-xdata
mov eax ebx
push esi
call sub_100110f7
pop ecx
cmp eax 0xfffffffe
je r-xdata
mov al [ eax + 0x24 ]
and al 0x7f
cmp al 0x1
je r-xdata
push [ ebp + 0x8 ]
lea eax [ ebp - 0xc ]
push 0x5
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_100112ab
add esp 0x10
test eax eax
je r-xdata
push esi
call sub_100110f7
sar eax 0x5
push esi
lea edi [ eax * 4 + rw-data ]
call sub_100110f7
and eax 0x1f
pop ecx
shl eax 0x6
add eax [ edi ]
pop ecx
jmp r-xdata
xor edi edi
cmp [ ebp - 0x10 ] edi
jle r-xdata
mov eax 0xffff
jmp r-xdata
test [ eax + 0x4 ] 0x80
je r-xdata
mov ax [ ebp + 0x8 ]
jmp r-xdata
dec [ esi + 0x4 ]
js r-xdata
movsx eax [ ebp + edi - 0xc ]
push esi
push eax
call sub_1000c318
pop ecx
pop ecx
mov eax [ esi ]
mov cl [ ebp + edi - 0xc ]
mov [ eax ] cl
mov ecx [ esi ]
movzx eax [ ecx ]
inc ecx
mov [ esi ] ecx
jmp r-xdata
inc edi
cmp edi [ ebp - 0x10 ]
jl r-xdata
cmp eax 0xffffffff
je r-xdata
sub_1001152b
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
cmp esi ebx
je r-xdata
xor eax eax
cmp [ ebp + 0x10 ] ebx
je r-xdata
cmp [ esi ] bl
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_10009980
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
movzx eax [ esi ]
push eax
call sub_1000ff0c
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
xor ecx ecx
mov [ eax ] cx
xor eax eax
cmp [ ebp + 0x8 ] ebx
setne al
push eax
push [ ebp + 0x8 ]
mov eax [ ebp - 0x10 ]
push 0x1
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0xac ]
cmp ecx 0x1
jle r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
movzx ecx [ esi ]
mov [ eax ] cx
jmp r-xdata
mov ecx [ ebp + 0x10 ]
cmp ecx [ eax + 0xac ]
jb r-xdata
cmp [ ebp + 0x10 ] ecx
jl r-xdata
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
call sub_1000befe
mov [ eax ] 0x2a
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ esi + 0x1 ] bl
je r-xdata
xor edx edx
cmp [ ebp + 0x8 ] ebx
setne dl
push edx
push [ ebp + 0x8 ]
push ecx
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
mov eax [ ebp - 0x10 ]
jne r-xdata
pop esi
pop ebx
leave
retn
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ eax + 0xac ]
cmp [ ebp - 0x4 ] bl
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
sub_10011700
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax 0x5a4d
cmp [ ecx ] ax
je r-xdata
mov eax [ ecx + 0x3c ]
add eax ecx
cmp [ eax ] 0x4550
jne r-xdata
xor eax eax
pop ebp
retn
xor edx edx
mov ecx 0x10b
cmp [ eax + 0x18 ] cx
sete dl
mov eax edx
pop ebp
retn
sub_10011740
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x3c ]
add ecx eax
movzx eax [ ecx + 0x14 ]
push ebx
push esi
movzx esi [ ecx + 0x6 ]
xor edx edx
push edi
lea eax [ eax + ecx + 0x18 ]
test esi esi
je r-xdata
xor eax eax
mov edi [ ebp + 0xc ]
inc edx
add eax 0x28
cmp edx esi
jb r-xdata
mov ebx [ eax + 0x8 ]
add ebx ecx
cmp edi ebx
jb r-xdata
mov ecx [ eax + 0xc ]
cmp edi ecx
jb r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10011790
mov edi edi
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_1000eb50
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x4 ] 0x0
push __dos_header
call sub_10011700
add esp 0x4
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x8 ]
sub eax __dos_header
push eax
push __dos_header
call sub_10011740
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
mov [ ebp - 0x4 ] 0xfffffffe
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1001184c
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
imul ecx [ ebp + 0xc ]
push esi
mov esi ecx
test esi esi
jne r-xdata
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax [ ebp + 0xc ]
jae r-xdata
xor eax eax
cmp esi 0xffffffe0
ja r-xdata
inc esi
call sub_1000befe
mov [ eax ] 0xc
xor eax eax
pop ebp
retn
cmp [ rw-data ] 0x0
je r-xdata
push esi
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
je r-xdata
push esi
call sub_1000ac98
pop ecx
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov [ ecx ] 0xc
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov [ eax ] 0xc
sub_100118ce
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push esi
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
push [ ebp + 0xc ]
call sub_1000a4c7
pop ecx
pop ebp
retn
push edi
jmp r-xdata
push [ ebp + 0x8 ]
call sub_1000a48d
pop ecx
xor eax eax
jmp r-xdata
cmp esi 0xffffffe0
jbe r-xdata
pop esi
pop ebp
retn
test esi esi
jne r-xdata
push esi
call sub_1000ac98
pop ecx
call sub_1000befe
mov [ eax ] 0xc
push esi
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
inc esi
mov eax edi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
pop edi
call sub_1000befe
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1000bebc
pop ecx
mov [ esi ] eax
push esi
call sub_1000ac98
pop ecx
test eax eax
je r-xdata
call sub_1000befe
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1000bebc
pop ecx
mov [ esi ] eax
jmp r-xdata
xor eax eax
sub_1001197b
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10009980
movzx eax [ ebp + 0xc ]
mov ecx [ ebp - 0xc ]
mov dl [ ebp + 0x14 ]
test [ ecx + eax + 0x1d ] dl
jne r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x10 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax [ ebp + 0x10 ]
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_10011a1c
pxor xmm0 xmm0
push ecx
push ebx
mov eax ecx
and eax 0xf
test eax eax
jne r-xdata
mov ebx eax
neg ebx
add ebx 0x10
sub edx ebx
xor eax eax
push edx
mov edx ebx
and edx 0x3
je r-xdata
mov eax edx
and edx 0x7f
shr eax 0x7
je r-xdata
shr ebx 0x2
je r-xdata
mov [ ecx ] al
inc ecx
dec edx
jne r-xdata
test edx edx
je r-xdata
lea esp [ esp ]
pop edx
jmp r-xdata
mov [ ecx ] eax
lea ecx [ ecx + 0x4 ]
dec ebx
jne r-xdata
pop ebx
pop eax
retn
mov eax edx
shr eax 0x4
je r-xdata
movdqa [ ecx ] xmm0
movdqa [ ecx + 0x10 ] xmm0
movdqa [ ecx + 0x20 ] xmm0
movdqa [ ecx + 0x30 ] xmm0
movdqa [ ecx + 0x40 ] xmm0
movdqa [ ecx + 0x50 ] xmm0
movdqa [ ecx + 0x60 ] xmm0
movdqa [ ecx + 0x70 ] xmm0
lea ecx [ ecx + 0x80 ]
dec eax
jne r-xdata
and edx 0xf
je r-xdata
jmp r-xdata
mov eax edx
xor ebx ebx
shr edx 0x2
je r-xdata
movdqa [ ecx ] xmm0
lea ecx [ ecx + 0x10 ]
dec eax
jne r-xdata
and eax 0x3
je r-xdata
mov [ ecx ] ebx
lea ecx [ ecx + 0x4 ]
dec edx
jne r-xdata
mov [ ecx ] bl
inc ecx
dec eax
jne r-xdata
sub_10011ae0
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10011b00
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x14 ]
mov ecx [ eax - 0x4 ]
xor ecx eax
call sub_100098bc
push ebp
mov ebp [ eax + 0x10 ]
mov edx [ eax + 0x28 ]
push edx
mov edx [ eax + 0x24 ]
push edx
call sub_10011b45
add esp 0x8
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10011b45
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push ebp
push eax
push 0xfffffffe
push sub_10011b00
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x4 ]
mov [ fs : 0x0 ] eax
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x18
pop edi
pop esi
pop ebx
retn
cmp [ esp + 0x2c ] 0xffffffff
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0xc ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
cmp esi [ esp + 0x2c ]
jbe r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_10011bf5
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_10011c14
mov eax [ esp + 0x28 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_10011bec
push ebx
push ecx
mov ebx rw-data
jmp r-xdata
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_10011bf5
push ebx
push ecx
mov ebx rw-data
mov ecx [ esp + 0xc ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_10011c17
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
xor ebx ebx
push esi
push edi
cmp ecx ebx
jl r-xdata
call sub_1000befe
mov [ eax ] 0x9
call sub_1000bf11
mov [ eax ] ebx
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
mov eax ecx
sar eax 0x5
mov esi ecx
and esi 0x1f
lea edi [ eax * 4 + rw-data ]
mov eax [ edi ]
shl esi 0x6
test [ eax + esi + 0x4 ] 0x1
je r-xdata
cmp [ eax + esi ] 0xffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov eax [ edi ]
or [ esi + eax ] 0xffffffff
xor eax eax
jmp r-xdata
sub ecx ebx
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
push ebx
push 0xfffffff6
dec ecx
je r-xdata
push ebx
push 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
call [ SetStdHandle@IAT ]
push ebx
push 0xfffffff4
jmp r-xdata
sub_10011c9d
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
test eax eax
js r-xdata
call sub_1000bf11
and [ eax ] 0x0
call sub_1000befe
mov [ eax ] 0x9
call sub_1000bf11
and [ eax ] 0x0
call sub_1000befe
mov [ eax ] 0x9
call sub_1000beac
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
or eax 0xffffffff
pop ebp
retn
mov ecx eax
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
and eax 0x1f
shl eax 0x6
test [ eax + ecx + 0x4 ] 0x1
je r-xdata
mov eax [ eax + ecx ]
pop ebp
retn
sub_10011d06
push 0xc
push r--data
call sub_1000eaf0
mov edi [ ebp + 0x8 ]
mov eax edi
sar eax 0x5
mov esi edi
and esi 0x1f
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov [ ebp - 0x1c ] 0x1
xor ebx ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0x1c ] ebx
je r-xdata
push 0xa
call sub_1000f629
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
mov eax [ ebp - 0x1c ]
call sub_1000eb35
retn
mov eax edi
sar eax 0x5
and edi 0x1f
shl edi 0x6
mov eax [ eax * 4 + rw-data ]
lea eax [ eax + edi + 0xc ]
push eax
call [ EnterCriticalSection@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10011d9c
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
inc [ esi + 0x8 ]
mov [ ebp - 0x1c ] ebx
sub_10011da5
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
lea eax [ ecx + eax + 0xc ]
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_10011dcc
mov edi edi
push ebp
mov ebp esp
push ecx
cmp [ rw-data ] 0xfffffffe
jne r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
jne r-xdata
call sub_100121e7
push 0x0
lea ecx [ ebp - 0x4 ]
push ecx
push 0x1
lea ecx [ ebp + 0x8 ]
push ecx
push eax
call [ WriteConsoleW@IAT ]
test eax eax
je r-xdata
mov eax 0xffff
leave
retn
mov ax [ ebp + 0x8 ]
leave
retn
sub_10011e10
push ecx
lea ecx [ esp + 0x4 ]
sub ecx eax
sbb eax eax
not eax
and ecx eax
mov eax esp
and eax 0xfffff000
sub eax 0x1000
test [ eax ] eax
jmp r-xdata
mov eax ecx
pop ecx
xchg esp eax
mov eax [ eax ]
mov [ esp ] eax
retn
cmp ecx eax
jb r-xdata
sub_10011e3b
push 0x10
push r--data
call sub_1000eaf0
xor ebx ebx
mov [ ebp - 0x1c ] ebx
push 0x1
call sub_1000f629
pop ecx
mov [ ebp - 0x4 ] ebx
push 0x3
pop edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10011ece
mov eax [ ebp - 0x1c ]
call sub_1000eb35
retn
mov esi edi
mov eax [ rw-data ]
cmp [ eax + esi * 4 ] ebx
je r-xdata
inc edi
jmp r-xdata
mov eax [ eax + esi * 4 ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] edi
cmp edi [ rw-data ]
jge r-xdata
cmp edi 0x14
jl r-xdata
push eax
call sub_1001228a
pop ecx
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
add eax 0x20
push eax
call [ DeleteCriticalSection@IAT ]
mov eax [ rw-data ]
push [ eax + esi * 4 ]
call sub_1000a48d
pop ecx
mov eax [ rw-data ]
mov [ eax + esi * 4 ] ebx
inc [ ebp - 0x1c ]
sub_10011ed7
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
mov ecx eax
and cl 0x3
xor ebx ebx
cmp cl 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
and [ esi + 0x4 ] 0x0
mov [ esi ] eax
pop esi
mov eax ebx
pop ebx
pop ebp
retn
test eax 0x108
je r-xdata
mov eax [ esi + 0x8 ]
push edi
mov edi [ esi ]
sub edi eax
test edi edi
jle r-xdata
pop edi
push edi
push eax
push esi
call sub_100110f7
pop ecx
push eax
call sub_10010dce
add esp 0xc
cmp eax edi
jne r-xdata
or [ esi + 0xc ] 0x20
or ebx 0xffffffff
mov eax [ esi + 0xc ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ esi + 0xc ] eax
jmp r-xdata
sub_10011f3f
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
push esi
call sub_10011ed7
pop ecx
test eax eax
je r-xdata
push esi
call sub_10011f87
pop ecx
jmp r-xdata
test [ esi + 0xc ] 0x4000
je r-xdata
or eax 0xffffffff
jmp r-xdata
pop esi
pop ebp
retn
xor eax eax
push esi
call sub_100110f7
push eax
call sub_100122fe
pop ecx
neg eax
pop ecx
sbb eax eax
jmp r-xdata
sub_10011f87
push 0x14
push r--data
call sub_1000eaf0
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x24 ] edi
push 0x1
call sub_1000f629
pop ecx
mov [ ebp - 0x4 ] edi
xor esi esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10012058
cmp [ ebp + 0x8 ] 0x1
mov eax [ ebp - 0x1c ]
je r-xdata
mov eax [ rw-data ]
lea eax [ eax + esi * 4 ]
cmp [ eax ] edi
je r-xdata
call sub_1000eb35
retn
mov eax [ ebp - 0x24 ]
inc esi
jmp r-xdata
mov eax [ eax ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] esi
cmp esi [ rw-data ]
jge r-xdata
push eax
push esi
call sub_1001105a
pop ecx
pop ecx
xor edx edx
inc edx
mov [ ebp - 0x4 ] edx
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
mov ecx [ eax + 0xc ]
test cl 0x83
je r-xdata
mov [ ebp - 0x4 ] edi
call sub_10012029
cmp [ ebp + 0x8 ] edx
jne r-xdata
cmp [ ebp + 0x8 ] edi
jne r-xdata
push eax
call sub_10011f3f
pop ecx
cmp eax 0xffffffff
je r-xdata
test cl 0x2
je r-xdata
inc [ ebp - 0x1c ]
jmp r-xdata
push eax
call sub_10011f3f
pop ecx
cmp eax 0xffffffff
jne r-xdata
or [ ebp - 0x24 ] eax
sub_10012073
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
mov esi [ ebp + 0xc ]
push esi
call sub_100110f7
mov [ ebp + 0xc ] eax
mov eax [ esi + 0xc ]
pop ecx
test al 0x82
jne r-xdata
test al 0x40
je r-xdata
call sub_1000befe
mov [ eax ] 0x9
test al 0x1
je r-xdata
call sub_1000befe
mov [ eax ] 0x22
jmp r-xdata
pop esi
leave
retn
mov eax [ esi + 0xc ]
and [ esi + 0x4 ] 0x0
and [ ebp - 0x4 ] 0x0
push ebx
push 0x2
and eax 0xffffffef
pop ebx
or eax ebx
mov [ esi + 0xc ] eax
test eax 0x10c
jne r-xdata
and [ esi + 0x4 ] 0x0
test al 0x10
je r-xdata
or [ esi + 0xc ] 0x20
test [ esi + 0xc ] 0x108
push edi
je r-xdata
call sub_10010f41
add eax 0x20
cmp esi eax
je r-xdata
or eax 0x20
mov [ esi + 0xc ] eax
jmp r-xdata
mov ecx [ esi + 0x8 ]
and eax 0xfffffffe
mov [ esi ] ecx
mov [ esi + 0xc ] eax
push 0x2
lea eax [ ebp - 0x4 ]
push eax
push [ ebp + 0xc ]
mov edi ebx
mov ebx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] bx
call sub_10010dce
add esp 0xc
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x8 ]
mov edi [ esi ]
lea ecx [ eax + 0x2 ]
mov [ esi ] ecx
mov ecx [ esi + 0x18 ]
sub edi eax
sub ecx ebx
mov [ esi + 0x4 ] ecx
test edi edi
jle r-xdata
push [ ebp + 0xc ]
call sub_10010eeb
pop ecx
test eax eax
jne r-xdata
call sub_10010f41
add eax 0x40
cmp esi eax
jne r-xdata
mov eax 0xffff
jmp r-xdata
mov eax ebx
and eax 0xffff
or [ esi + 0xc ] 0x20
mov eax 0xffff
jmp r-xdata
mov ecx [ ebp + 0xc ]
cmp ecx 0xffffffff
je r-xdata
push edi
push eax
push [ ebp + 0xc ]
call sub_10010dce
add esp 0xc
mov [ ebp - 0x4 ] eax
jmp r-xdata
push esi
call sub_10010ea2
pop ecx
pop edi
pop ebx
mov eax rw-data
cmp ecx 0xfffffffe
je r-xdata
mov eax [ esi + 0x8 ]
mov ebx [ ebp + 0x8 ]
mov [ eax ] bx
jmp r-xdata
push ebx
push 0x0
push 0x0
push ecx
call sub_100105e7
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
mov eax ecx
and eax 0x1f
mov edx ecx
sar edx 0x5
shl eax 0x6
add eax [ edx * 4 + rw-data ]
jmp r-xdata
cmp [ ebp - 0x4 ] edi
je r-xdata
test [ eax + 0x4 ] 0x20
je r-xdata
sub_1001221d
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
or edi 0xffffffff
test esi esi
jne r-xdata
test [ esi + 0xc ] 0x83
je r-xdata
call sub_1000befe
mov [ eax ] 0x16
call sub_1000beac
or eax edi
jmp r-xdata
and [ esi + 0xc ] 0x0
mov eax edi
push esi
call sub_10011ed7
push esi
mov edi eax
call sub_10012537
push esi
call sub_100110f7
push eax
call sub_10012473
add esp 0x10
test eax eax
jns r-xdata
pop edi
pop esi
pop ebp
retn
mov eax [ esi + 0x1c ]
test eax eax
je r-xdata
or edi 0xffffffff
jmp r-xdata
push eax
call sub_1000a48d
and [ esi + 0x1c ] 0x0
pop ecx
sub_1001228a
push 0xc
push r--data
call sub_1000eaf0
or [ ebp - 0x1c ] 0xffffffff
xor eax eax
mov esi [ ebp + 0x8 ]
test esi esi
setne al
test eax eax
jne r-xdata
test [ esi + 0xc ] 0x40
je r-xdata
call sub_1000befe
mov [ eax ] 0x16
call sub_1000beac
or eax 0xffffffff
jmp r-xdata
push esi
call sub_10011019
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_1001221d
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100122f6
jmp r-xdata
and [ esi + 0xc ] 0x0
call sub_1000eb35
retn
mov eax [ ebp - 0x1c ]
sub_100122fe
push 0x10
push r--data
call sub_1000eaf0
mov ebx [ ebp + 0x8 ]
cmp ebx 0xfffffffe
jne r-xdata
test ebx ebx
js r-xdata
call sub_1000befe
mov [ eax ] 0x9
call sub_1000befe
mov [ eax ] 0x9
call sub_1000beac
jmp r-xdata
cmp ebx [ rw-data ]
jb r-xdata
call sub_1000eb35
retn
or eax 0xffffffff
jmp r-xdata
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov esi ebx
and esi 0x1f
shl esi 0x6
mov eax [ edi ]
movsx eax [ esi + eax + 0x4 ]
and eax 0x1
je r-xdata
push ebx
call sub_10011d06
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x1
je r-xdata
call sub_1000befe
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push ebx
call sub_10011c9d
pop ecx
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
and [ ebp - 0x1c ] 0x0
call [ GetLastError@IAT ]
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100123cf
mov eax [ ebp - 0x1c ]
call sub_1000bf11
mov ecx [ ebp - 0x1c ]
mov [ eax ] ecx
cmp [ ebp - 0x1c ] 0x0
je r-xdata
sub_100123d7
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_10011c9d
pop ecx
cmp eax 0xffffffff
je r-xdata
xor edi edi
mov eax [ rw-data ]
cmp esi 0x1
jne r-xdata
xor eax eax
push edi
call sub_1000bf24
pop ecx
or eax 0xffffffff
jmp r-xdata
cmp esi 0x2
jne r-xdata
test [ eax + 0x84 ] 0x1
jne r-xdata
pop edi
pop esi
pop ebp
retn
push esi
call sub_10011c9d
pop ecx
push eax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ eax + 0x44 ] 0x1
je r-xdata
push 0x2
call sub_10011c9d
push 0x1
mov edi eax
call sub_10011c9d
pop ecx
pop ecx
cmp eax edi
je r-xdata
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push esi
call sub_10011c17
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
pop ecx
mov [ eax + esi + 0x4 ] 0x0
test edi edi
je r-xdata
sub_10012473
push 0x10
push r--data
call sub_1000eaf0
mov ebx [ ebp + 0x8 ]
cmp ebx 0xfffffffe
jne r-xdata
test ebx ebx
js r-xdata
call sub_1000bf11
and [ eax ] 0x0
call sub_1000befe
mov [ eax ] 0x9
call sub_1000bf11
and [ eax ] 0x0
call sub_1000befe
mov [ eax ] 0x9
call sub_1000beac
jmp r-xdata
cmp ebx [ rw-data ]
jb r-xdata
call sub_1000eb35
retn
or eax 0xffffffff
jmp r-xdata
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov esi ebx
and esi 0x1f
shl esi 0x6
mov eax [ edi ]
movsx eax [ eax + esi + 0x4 ]
and eax 0x1
je r-xdata
push ebx
call sub_10011d06
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000befe
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push ebx
call sub_100123d7
pop ecx
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001252f
mov eax [ ebp - 0x1c ]
sub_10012537
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
pop esi
pop ebp
retn
test al 0x8
je r-xdata
push [ esi + 0x8 ]
call sub_1000a48d
and [ esi + 0xc ] 0xfffffbf7
xor eax eax
pop ecx
mov [ esi ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] eax
sub_1001258a
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
mov [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0xc ]
call sub_10009bcf
push r--data
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0xc ] r--data
call sub_1000acc0
int3
sub_100125d7
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
mov [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0xc ]
call sub_10009bcf
push r--data
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0xc ] r--data
call sub_1000acc0
int3
sub_10012624
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10009c2b
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100098f5
pop ecx
sub_1001264c
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov ebx [ ebp + 0xc ]
mov ebp [ ebp - 0x4 ]
mov esp [ ebx - 0x4 ]
jmp eax
sub_10012685
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
push edi
mov esi [ fs : 0x0 ]
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x8 ] r-xdata
push 0x0
push [ ebp + 0xc ]
push [ ebp - 0x8 ]
push [ ebp + 0x8 ]
call RtlUnwind
mov eax [ ebp + 0xc ]
mov eax [ eax + 0x4 ]
and eax 0xfffffffd
mov ecx [ ebp + 0xc ]
mov [ ecx + 0x4 ] eax
mov edi [ fs : 0x0 ]
mov ebx [ ebp - 0x4 ]
mov [ ebx ] edi
mov [ fs : 0x0 ] ebx
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_100126d9
push ebp
mov ebp esp
sub esp 0x8
push ebx
push esi
push edi
cld
mov [ ebp - 0x4 ] eax
xor eax eax
push eax
push eax
push eax
push [ ebp - 0x4 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10013627
add esp 0x20
mov [ ebp - 0x8 ] eax
pop edi
pop esi
pop ebx
mov eax [ ebp - 0x8 ]
mov esp ebp
pop ebp
retn
sub_1001270f
mov edi edi
push ebp
mov ebp esp
push esi
cld
mov esi [ ebp + 0xc ]
mov ecx [ esi + 0x8 ]
xor ecx esi
call sub_100098bc
push 0x0
push esi
push [ esi + 0x14 ]
push [ esi + 0xc ]
push 0x0
push [ ebp + 0x10 ]
push [ esi + 0x10 ]
push [ ebp + 0x8 ]
call sub_10013627
add esp 0x20
pop esi
pop ebp
retn
sub_10012742
mov edi edi
push ebp
mov ebp esp
sub esp 0x38
push ebx
cmp [ ebp + 0x8 ] 0x123
jne r-xdata
and [ ebp - 0x28 ] 0x0
mov [ ebp - 0x24 ] sub_10012819
mov eax [ rw-data ]
lea ecx [ ebp - 0x28 ]
xor eax ecx
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x1c ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0x1c ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp + 0x20 ]
mov [ ebp - 0x10 ] eax
and [ ebp - 0xc ] 0x0
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0xc ] esp
mov [ ebp - 0x8 ] ebp
mov eax [ fs : 0x0 ]
mov [ ebp - 0x28 ] eax
lea eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x38 ] 0x1
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x34 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x30 ] eax
call sub_1000b8db
mov eax [ eax + 0x80 ]
mov [ ebp - 0x2c ] eax
lea eax [ ebp - 0x34 ]
push eax
mov eax [ ebp + 0x8 ]
push [ eax ]
call [ ebp - 0x2c ]
pop ecx
pop ecx
and [ ebp - 0x38 ] 0x0
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax r-xdata
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov ebx [ ebp - 0x28 ]
mov [ ebx ] eax
mov [ fs : 0x0 ] ebx
jmp r-xdata
pop ebx
leave
retn
mov eax [ ebp - 0x38 ]
sub_10012819
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
cld
mov eax [ ebp + 0xc ]
mov ecx [ eax + 0x8 ]
xor ecx [ ebp + 0xc ]
call sub_100098bc
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x4 ]
and eax 0x66
je r-xdata
push 0x1
mov eax [ ebp + 0xc ]
push [ eax + 0x18 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x14 ]
mov eax [ ebp + 0xc ]
push [ eax + 0xc ]
push 0x0
push [ ebp + 0x10 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x10 ]
push [ ebp + 0x8 ]
call sub_10013627
add esp 0x20
mov eax [ ebp + 0xc ]
cmp [ eax + 0x24 ] 0x0
jne r-xdata
mov eax [ ebp + 0xc ]
mov [ eax + 0x24 ] 0x1
xor eax eax
inc eax
jmp r-xdata
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
lea eax [ ebp - 0x4 ]
push eax
push 0x123
call sub_10012742
add esp 0x1c
mov eax [ ebp - 0x4 ]
mov ebx [ ebp + 0xc ]
mov esp [ ebx + 0x1c ]
mov ebp [ ebx + 0x20 ]
jmp eax
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
call sub_10012685
pop ebx
leave
retn
sub_100128b8
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x10 ]
mov esi [ edi + 0xc ]
mov [ ebp - 0x4 ] eax
mov ebx esi
jmp r-xdata
mov [ ebp + 0x8 ] esi
cmp esi 0xffffffff
jne r-xdata
mov eax [ ebp + 0x14 ]
inc esi
mov [ eax ] esi
mov eax [ ebp + 0x18 ]
mov [ eax ] ebx
cmp ebx [ edi + 0xc ]
ja r-xdata
mov ecx [ ebp + 0x10 ]
dec esi
mov eax esi
imul eax eax 0x14
add eax [ ebp - 0x4 ]
cmp [ eax + 0x4 ] ecx
jge r-xdata
call sub_100116a7
call sub_100116a7
cmp esi ebx
jbe r-xdata
cmp esi 0xffffffff
jne r-xdata
cmp ecx [ eax + 0x8 ]
jle r-xdata
mov eax esi
imul eax eax 0x14
add eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp + 0xc ] 0x0
jge r-xdata
dec [ ebp + 0xc ]
mov ebx [ ebp + 0x8 ]
sub_1001292b
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov [ esi ] eax
call sub_1000b8db
mov eax [ eax + 0x98 ]
mov [ esi + 0x4 ] eax
call sub_1000b8db
mov [ eax + 0x98 ] esi
mov eax esi
pop esi
pop ebp
retn
sub_10012957
mov edi edi
push ebp
mov ebp esp
call sub_1000b8db
mov eax [ eax + 0x98 ]
jmp r-xdata
test eax eax
jne r-xdata
mov ecx [ eax ]
cmp ecx [ ebp + 0x8 ]
je r-xdata
inc eax
pop ebp
retn
xor eax eax
pop ebp
retn
mov eax [ eax + 0x4 ]
sub_1001297e
mov edi edi
push ebp
mov ebp esp
push esi
call sub_1000b8db
mov esi [ ebp + 0x8 ]
cmp esi [ eax + 0x98 ]
jne r-xdata
call sub_1000b8db
mov eax [ eax + 0x98 ]
jmp r-xdata
call sub_1000b8db
mov ecx [ esi + 0x4 ]
mov [ eax + 0x98 ] ecx
cmp [ eax + 0x4 ] 0x0
jne r-xdata
mov ecx [ eax + 0x4 ]
cmp esi ecx
je r-xdata
pop esi
pop ebp
jmp sub_100116a7
mov ecx [ esi + 0x4 ]
mov [ eax + 0x4 ] ecx
jmp r-xdata
mov eax ecx
pop esi
pop ebp
retn
sub_100129d0
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
and [ ebp - 0x18 ] 0x0
lea ecx [ ebp - 0x18 ]
xor eax ecx
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x14 ]
inc eax
mov [ ebp - 0x14 ] sub_1001270f
mov [ ebp - 0x8 ] ecx
mov [ ebp - 0x4 ] eax
mov eax [ fs : 0x0 ]
mov [ ebp - 0x18 ] eax
lea eax [ ebp - 0x18 ]
mov [ fs : 0x0 ] eax
push [ ebp + 0x18 ]
push ecx
push [ ebp + 0x10 ]
call sub_10013710
mov ecx eax
mov eax [ ebp - 0x18 ]
mov [ fs : 0x0 ] eax
mov eax ecx
leave
retn
sub_10012a3b
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_10009c2b
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_100098f5
pop ecx
sub_10012a62
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
xor eax eax
inc eax
lea edx [ eax + 0x8 ]
cmp [ edx ] 0x0
je r-xdata
mov esi [ ebp + 0xc ]
mov ecx [ esi + 0x4 ]
cmp eax ecx
je r-xdata
test [ esi ] 0x2
je r-xdata
add ecx 0x8
push ecx
push edx
call sub_1000c290
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x10 ]
mov eax [ eax ]
test al 0x1
je r-xdata
test [ edi ] 0x8
je r-xdata
xor eax eax
jmp r-xdata
test al 0x2
je r-xdata
test [ edi ] 0x1
je r-xdata
pop edi
pop esi
pop ebp
retn
test [ edi ] 0x2
je r-xdata
sub_10012ac1
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax ]
cmp eax 0xe0434352
je r-xdata
call sub_1000b8db
cmp [ eax + 0x90 ] 0x0
jle r-xdata
cmp eax 0xe0434f4d
je r-xdata
xor eax eax
pop ebp
retn
call sub_1000b8db
dec [ eax + 0x90 ]
cmp eax 0xe06d7363
jne r-xdata
call sub_1000b8db
and [ eax + 0x90 ] 0x0
jmp sub_1001165b
sub_10012b10
push 0x10
push r--data
call sub_1000eaf0
mov edi [ ebp + 0x10 ]
mov ebx [ ebp + 0x8 ]
cmp [ edi + 0x4 ] 0x80
jg r-xdata
mov esi [ ebx + 0x8 ]
movsx esi [ ebx + 0x8 ]
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10012bd2
cmp esi [ ebp + 0x14 ]
je r-xdata
cmp esi 0xffffffff
jle r-xdata
mov [ ebp - 0x1c ] esi
call sub_1000b8db
inc [ eax + 0x90 ]
and [ ebp - 0x4 ] 0x0
mov [ ebx + 0x8 ] esi
call sub_1000eb35
retn
call sub_100116a7
call sub_100116a7
cmp esi [ edi + 0x4 ]
jl r-xdata
mov eax esi
mov ecx [ edi + 0x8 ]
mov esi [ ecx + eax * 8 ]
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x4 ] 0x1
cmp [ ecx + eax * 8 + 0x4 ] 0x0
je r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov [ ebx + 0x8 ] esi
push 0x103
push ebx
mov ecx [ edi + 0x8 ]
push [ ecx + eax * 8 + 0x4 ]
call sub_10013710
mov [ ebp - 0x1c ] esi
jmp r-xdata
cmp esi [ ebp + 0x14 ]
je r-xdata
sub_10012bec
mov eax [ eax ]
cmp [ eax ] 0xe06d7363
jne r-xdata
xor eax eax
retn
cmp [ eax + 0x10 ] 0x3
jne r-xdata
mov ecx [ eax + 0x14 ]
cmp ecx 0x19930520
je r-xdata
cmp [ eax + 0x1c ] 0x0
jne r-xdata
cmp ecx 0x19930521
je r-xdata
call sub_1000b8db
xor ecx ecx
inc ecx
mov [ eax + 0x20c ] ecx
mov eax ecx
retn
cmp ecx 0x19930522
jne r-xdata
sub_10012c31
push 0x8
push r--data
call sub_1000eaf0
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
call sub_1000eb35
retn
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ecx + 0x1c ]
test eax eax
je r-xdata
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
and [ ebp - 0x4 ] 0x0
push eax
push [ ecx + 0x18 ]
call sub_1001267e
mov [ ebp - 0x4 ] 0xfffffffe
sub_10012c86
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
mov eax [ ecx ]
push esi
mov esi [ ebp + 0x8 ]
add eax esi
cmp [ ecx + 0x4 ] 0x0
jl r-xdata
pop esi
pop ebp
retn
mov edx [ ecx + 0x4 ]
mov ecx [ ecx + 0x8 ]
mov esi [ edx + esi ]
mov ecx [ esi + ecx ]
add ecx edx
add eax ecx
sub_10012caf
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
test edi edi
jne r-xdata
and [ ebp - 0x8 ] 0x0
cmp [ edi ] 0x0
mov [ ebp - 0x1 ] 0x0
jle r-xdata
call sub_100116a7
mov al [ ebp - 0x1 ]
leave
retn
push ebx
push esi
inc [ ebp - 0x8 ]
mov eax [ ebp - 0x8 ]
cmp eax [ edi ]
jl r-xdata
mov eax [ ebp - 0x8 ]
shl eax 0x4
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x1c ]
mov eax [ eax + 0xc ]
mov ebx [ eax ]
lea esi [ eax + 0x4 ]
test ebx ebx
jle r-xdata
pop esi
pop ebx
mov [ ebp - 0x1 ] 0x1
dec ebx
add esi 0x4
test ebx ebx
jg r-xdata
mov ecx [ ebp + 0x8 ]
push [ ecx + 0x1c ]
mov eax [ esi ]
push eax
mov eax [ edi + 0x4 ]
add eax [ ebp - 0xc ]
push eax
call sub_10012a62
add esp 0xc
test eax eax
jne r-xdata
jmp r-xdata
sub_10012d73
push 0x2c
push r--data
call sub_1000eaf0
mov ebx ecx
mov edi [ ebp + 0xc ]
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x1c ] ebx
and [ ebp - 0x34 ] 0x0
mov eax [ edi - 0x4 ]
mov [ ebp - 0x24 ] eax
push [ esi + 0x18 ]
lea eax [ ebp - 0x3c ]
push eax
call sub_1001292b
pop ecx
pop ecx
mov [ ebp - 0x28 ] eax
call sub_1000b8db
mov eax [ eax + 0x88 ]
mov [ ebp - 0x2c ] eax
call sub_1000b8db
mov eax [ eax + 0x8c ]
mov [ ebp - 0x30 ] eax
call sub_1000b8db
mov [ eax + 0x88 ] esi
call sub_1000b8db
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x8c ] ecx
and [ ebp - 0x4 ] 0x0
xor eax eax
inc eax
mov [ ebp + 0x10 ] eax
mov [ ebp - 0x4 ] eax
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push ebx
push [ ebp + 0x14 ]
push edi
call sub_100129d0
add esp 0x14
mov [ ebp - 0x1c ] eax
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp + 0x10 ] 0x0
call sub_10012e99
mov eax [ ebp - 0x1c ]
call sub_1000eb35
retn
sub_10012e0c
mov esp [ ebp - 0x18 ]
call sub_1000b8db
and [ eax + 0x20c ] 0x0
mov esi [ ebp + 0x14 ]
mov edi [ ebp + 0xc ]
cmp [ esi + 0x4 ] 0x80
jg r-xdata
mov ecx [ edi + 0x8 ]
movsx ecx [ edi + 0x8 ]
jmp r-xdata
push ecx
push esi
push 0x0
push edi
call sub_10012b10
add esp 0x10
and [ ebp - 0x1c ] 0x0
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp + 0x10 ] 0x0
call sub_10012e99
mov eax [ ebp - 0x1c ]
call sub_1000eb35
retn
imul eax eax 0x14
mov edx [ eax + ebx + 0x4 ]
cmp ecx edx
jle r-xdata
mov ebx [ esi + 0x10 ]
and [ ebp - 0x20 ] 0x0
inc [ ebp - 0x20 ]
jmp r-xdata
cmp ecx [ eax + ebx + 0x8 ]
jg r-xdata
mov eax [ ebp - 0x20 ]
cmp eax [ esi + 0xc ]
jae r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ eax + edx * 8 + 0x8 ]
sub_10012e99
mov eax [ ebp - 0x24 ]
mov [ edi - 0x4 ] eax
push [ ebp - 0x28 ]
call sub_1001297e
pop ecx
call sub_1000b8db
mov ecx [ ebp - 0x2c ]
mov [ eax + 0x88 ] ecx
call sub_1000b8db
mov ecx [ ebp - 0x30 ]
mov [ eax + 0x8c ] ecx
cmp [ esi ] 0xe06d7363
jne r-xdata
retn
cmp [ esi + 0x10 ] 0x3
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax 0x19930520
je r-xdata
cmp [ ebp - 0x34 ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
cmp eax 0x19930522
jne r-xdata
push [ esi + 0x18 ]
call sub_10012957
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push esi
call sub_10012c31
pop ecx
pop ecx
sub_10012f0f
push 0xc
push r--data
call sub_1000eaf0
xor edx edx
mov [ ebp - 0x1c ] edx
mov eax [ ebp + 0x10 ]
mov ecx [ eax + 0x4 ]
cmp ecx edx
je r-xdata
xor eax eax
cmp [ ecx + 0x8 ] dl
je r-xdata
mov ecx [ eax + 0x8 ]
cmp ecx edx
jne r-xdata
mov eax [ eax ]
mov esi [ ebp + 0xc ]
test eax eax
js r-xdata
test [ eax ] 0x80000000
je r-xdata
mov [ ebp - 0x4 ] edx
xor ebx ebx
inc ebx
push ebx
test al 0x8
je r-xdata
lea esi [ ecx + esi + 0xc ]
mov edi [ ebp + 0x14 ]
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
test [ edi ] bl
je r-xdata
mov edi [ ebp + 0x8 ]
push [ edi + 0x18 ]
call sub_10013792
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ edi + 0x18 ] edx
jne r-xdata
call sub_10013792
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_100116a7
push ebx
push esi
call sub_10013792
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_10013792
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_10013792
pop ecx
pop ecx
test eax eax
je r-xdata
push ebx
push esi
call sub_10013792
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ edi + 0x18 ]
mov [ esi ] eax
mov ecx [ ebp + 0x14 ]
add ecx 0x8
push ecx
push ebx
push esi
call sub_10013792
pop ecx
pop ecx
test eax eax
je r-xdata
push ebx
push esi
call sub_10013792
pop ecx
pop ecx
test eax eax
je r-xdata
push [ edi + 0x14 ]
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
push esi
call sub_10009c90
add esp 0xc
cmp [ edi + 0x14 ] 0x4
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push [ edi + 0x18 ]
call sub_10013792
pop ecx
test eax eax
je r-xdata
push [ edi + 0x14 ]
add edi 0x8
push edi
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
call sub_10012c86
pop ecx
pop ecx
push eax
push esi
call sub_10009c90
add esp 0xc
jmp r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
call sub_1000eb35
retn
test [ edi ] 0x4
push 0x0
pop eax
setne al
inc eax
mov [ ebp - 0x1c ] eax
jmp r-xdata
add edi 0x8
push edi
jmp r-xdata
push eax
call sub_10012c86
pop ecx
pop ecx
mov [ esi ] eax
jmp r-xdata
sub_1001308e
push 0x8
push r--data
call sub_1000eaf0
mov eax [ ebp + 0x10 ]
test [ eax ] 0x80000000
je r-xdata
mov ecx [ eax + 0x8 ]
mov edx [ ebp + 0xc ]
lea ebx [ ecx + edx + 0xc ]
mov ebx [ ebp + 0xc ]
jmp r-xdata
lea eax [ esi + 0x8 ]
push eax
push [ edi + 0x18 ]
call sub_10012c86
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push ebx
call sub_1001267e
dec eax
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x14 ]
push esi
push eax
push [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
push edi
call sub_10012f0f
add esp 0x10
dec eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000eb35
retn
push 0x1
lea eax [ esi + 0x8 ]
push eax
push [ edi + 0x18 ]
call sub_10012c86
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push ebx
call sub_1001267e
jmp r-xdata
sub_10013120
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x18 ] 0x0
je r-xdata
cmp [ ebp + 0x20 ] 0x0
push [ ebp + 0x8 ]
jne r-xdata
push [ ebp + 0x18 ]
push ebx
push esi
push [ ebp + 0x8 ]
call sub_1001308e
add esp 0x10
push [ ebp + 0x20 ]
push esi
jmp r-xdata
pop ebp
retn
push esi
push eax
call sub_1001264c
call sub_10012685
push [ edi ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push esi
call sub_10012b10
mov eax [ edi + 0x4 ]
push 0x100
push [ ebp + 0x1c ]
inc eax
push [ ebp + 0x14 ]
mov [ esi + 0x8 ] eax
push [ ebp + 0xc ]
mov ecx [ ebx + 0xc ]
push esi
push [ ebp + 0x8 ]
call sub_10012d73
add esp 0x28
test eax eax
je r-xdata
sub_1001318e
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push esi
mov esi [ ebp + 0x8 ]
cmp [ esi ] 0x80000003
je r-xdata
pop esi
leave
retn
push edi
call sub_1000b8db
cmp [ eax + 0x80 ] 0x0
je r-xdata
mov edi [ ebp + 0x18 ]
cmp [ edi + 0xc ] 0x0
jne r-xdata
call sub_1000b8db
lea edi [ eax + 0x80 ]
call sub_1000b72b
cmp [ edi ] eax
je r-xdata
mov esi [ ebp + 0x1c ]
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push esi
push [ ebp + 0x20 ]
push edi
call sub_100128b8
mov ecx [ ebp - 0x4 ]
add esp 0x14
cmp ecx [ ebp - 0xc ]
jae r-xdata
call sub_100116a7
mov eax [ esi ]
cmp eax 0xe0434f4d
je r-xdata
pop edi
add eax 0xc
mov [ ebp - 0x8 ] eax
push ebx
cmp eax 0xe0434352
je r-xdata
inc [ ebp - 0x4 ]
mov ecx [ ebp - 0x4 ]
add eax 0x14
mov [ ebp - 0x8 ] eax
cmp ecx [ ebp - 0xc ]
jb r-xdata
cmp esi [ eax - 0x8 ]
jg r-xdata
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_10012742
add esp 0x1c
test eax eax
jne r-xdata
lea edi [ eax - 0xc ]
cmp esi [ edi ]
jl r-xdata
pop ebx
mov ecx [ eax ]
shl ecx 0x4
add ecx [ eax + 0x4 ]
mov edx [ ecx - 0xc ]
test edx edx
je r-xdata
lea ebx [ ecx - 0x10 ]
test [ ebx ] 0x40
jne r-xdata
cmp [ edx + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x24 ]
mov esi [ ebp + 0xc ]
push [ ebp + 0x20 ]
push 0x0
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0x8 ]
call sub_10013120
mov esi [ ebp + 0x1c ]
mov eax [ ebp - 0x8 ]
add esp 0x1c
sub_10013295
mov edi edi
push ebp
mov ebp esp
sub esp 0x34
mov ecx [ ebp + 0xc ]
push ebx
mov ebx [ ebp + 0x18 ]
mov eax [ ebx + 0x4 ]
push esi
push edi
mov [ ebp - 0x1 ] 0x0
cmp eax 0x80
jg r-xdata
mov ecx [ ecx + 0x8 ]
movsx ecx [ ecx + 0x8 ]
jmp r-xdata
call sub_100116a7
cmp ecx eax
jl r-xdata
mov [ ebp - 0x8 ] ecx
cmp ecx 0xffffffff
jl r-xdata
mov esi [ ebp + 0x8 ]
mov edi 0xe06d7363
cmp [ esi ] edi
jne r-xdata
cmp [ ebx + 0xc ] 0x0
jbe r-xdata
cmp [ esi + 0x10 ] 0x3
mov ebx 0x19930520
jne r-xdata
call sub_1000b8db
cmp [ eax + 0x94 ] 0x0
je r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
cmp [ esi ] edi
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
call sub_100116a7
call sub_1001165b
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp - 0x8 ]
push ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_1001318e
add esp 0x20
mov ebx [ ebp + 0x18 ]
cmp [ esi + 0x10 ] 0x3
jne r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
call sub_1000b8db
cmp [ eax + 0x88 ] 0x0
je r-xdata
cmp eax 0x19930522
jne r-xdata
mov edi [ ebp + 0x18 ]
cmp [ edi + 0xc ] 0x0
jbe r-xdata
cmp eax 0x19930521
je r-xdata
call sub_1000b8db
mov esi [ eax + 0x88 ]
mov [ ebp + 0x8 ] esi
call sub_1000b8db
mov eax [ eax + 0x8c ]
push 0x1
push esi
mov [ ebp + 0x10 ] eax
call sub_10013792
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
je r-xdata
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
push [ ebp - 0x8 ]
push [ ebp + 0x20 ]
push edi
call sub_100128b8
mov ecx [ ebp - 0x10 ]
add esp 0x14
cmp ecx [ ebp - 0x20 ]
jae r-xdata
cmp eax 0x19930522
jne r-xdata
cmp [ esi ] edi
jne r-xdata
call sub_100116a7
cmp [ ebp - 0x1 ] 0x0
jne r-xdata
push 0x1
push esi
call sub_10012c31
pop ecx
pop ecx
lea edi [ eax + 0x10 ]
mov [ ebp - 0x1c ] edi
call sub_1000b8db
cmp [ eax + 0x94 ] 0x0
je r-xdata
cmp [ esi + 0x10 ] 0x3
jne r-xdata
mov eax [ edi ]
and eax 0x1fffffff
cmp eax 0x19930521
jb r-xdata
inc [ ebp - 0x10 ]
mov eax [ ebp - 0x10 ]
add edi 0x14
mov [ ebp - 0x1c ] edi
cmp eax [ ebp - 0x20 ]
jb r-xdata
cmp ecx [ edi - 0xc ]
jg r-xdata
call sub_1000b8db
mov edi [ eax + 0x94 ]
call sub_1000b8db
push [ ebp + 0x8 ]
xor esi esi
mov [ eax + 0x94 ] esi
call sub_10012caf
pop ecx
test al al
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
mov edi [ edi + 0x1c ]
test edi edi
je r-xdata
mov ecx [ ebp - 0x8 ]
lea eax [ edi - 0x10 ]
mov [ ebp - 0x28 ] eax
cmp [ eax ] ecx
jg r-xdata
mov edi [ ebp + 0x18 ]
mov eax [ edi ]
mov [ ebp - 0xc ] eax
mov eax [ edi - 0x4 ]
mov [ ebp - 0x18 ] eax
test eax eax
jle r-xdata
mov esi [ ebp + 0x8 ]
mov edi 0xe06d7363
xor ebx ebx
cmp [ edi ] ebx
jle r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
push esi
call sub_10012caf
pop ecx
test al al
jne r-xdata
mov eax [ esi + 0x1c ]
mov eax [ eax + 0xc ]
lea ebx [ eax + 0x4 ]
mov eax [ eax ]
mov [ ebp - 0x14 ] eax
test eax eax
jle r-xdata
mov eax [ edi + 0x4 ]
mov ecx [ ebx + eax + 0x4 ]
push rw-data
call sub_1000a177
test al al
jne r-xdata
call sub_100116a7
cmp eax 0x19930522
jne r-xdata
call sub_1000b8db
call sub_1000b8db
call sub_1000b8db
mov [ eax + 0x88 ] esi
call sub_1000b8db
cmp [ ebp + 0x24 ] 0x0
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x8c ] ecx
push esi
jne r-xdata
dec [ ebp - 0x18 ]
add [ ebp - 0xc ] 0x10
cmp [ ebp - 0x18 ] 0x0
jg r-xdata
push [ esi + 0x1c ]
mov eax [ ebx ]
push eax
push [ ebp - 0xc ]
mov [ ebp - 0x24 ] eax
call sub_10012a62
add esp 0xc
test eax eax
jne r-xdata
push 0x1
push [ ebp + 0x8 ]
call sub_10012c31
pop ecx
pop ecx
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0x34 ]
mov [ ebp + 0x8 ] r--data
call sub_10009bcf
push r--data
lea eax [ ebp - 0x34 ]
push eax
mov [ ebp - 0x34 ] r--data
call sub_1000acc0
inc esi
add ebx 0x10
cmp esi [ edi ]
jl r-xdata
push [ ebp + 0x24 ]
push [ ebp + 0xc ]
jmp r-xdata
jmp r-xdata
push [ ebp + 0x24 ]
mov edi [ ebp - 0x28 ]
push [ ebp + 0x20 ]
mov ebx [ ebp - 0xc ]
push [ ebp - 0x24 ]
mov [ ebp - 0x1 ] 0x1
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0xc ]
call sub_10013120
mov esi [ ebp + 0x8 ]
mov edi [ ebp - 0x1c ]
add esp 0x1c
dec [ ebp - 0x14 ]
add ebx 0x4
cmp [ ebp - 0x14 ] eax
jg r-xdata
call sub_10012685
mov esi [ ebp + 0x18 ]
push 0xffffffff
push esi
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
call sub_10012b10
add esp 0x10
push [ esi + 0x1c ]
call sub_10012d2a
sub_10013627
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
call sub_1000b8db
cmp [ eax + 0x20c ] 0x0
mov eax [ ebp + 0x18 ]
mov ecx [ ebp + 0x8 ]
mov edi 0xe06d7363
mov esi 0x1fffffff
mov ebx 0x19930522
jne r-xdata
test [ ecx + 0x4 ] 0x66
je r-xdata
mov edx [ ecx ]
cmp edx edi
je r-xdata
cmp [ eax + 0xc ] 0x0
jne r-xdata
cmp [ eax + 0x4 ] 0x0
je r-xdata
cmp edx 0x80000026
je r-xdata
cmp [ ecx ] edi
jne r-xdata
mov edx [ eax ]
and edx esi
cmp edx 0x19930521
jb r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
mov edx [ eax ]
and edx esi
cmp edx ebx
jb r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x24 ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ecx
call sub_10013295
add esp 0x20
cmp [ ecx + 0x10 ] 0x3
jb r-xdata
cmp [ eax + 0x1c ] 0x0
je r-xdata
push 0xffffffff
push eax
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
call sub_10012b10
add esp 0x10
jmp r-xdata
test [ eax + 0x20 ] 0x1
jne r-xdata
cmp [ ecx + 0x14 ] ebx
jbe r-xdata
mov edx [ ecx + 0x1c ]
mov edx [ edx + 0x8 ]
test edx edx
je r-xdata
movzx esi [ ebp + 0x24 ]
push esi
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ecx
call edx
add esp 0x20
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10013710
push ebp
mov ebp esp
sub esp 0x4
push ebx
push ecx
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebp
push [ ebp + 0x10 ]
mov ecx [ ebp + 0x10 ]
mov ebp [ ebp - 0x4 ]
call sub_10011bec
push esi
push edi
call eax
pop edi
pop esi
mov ebx ebp
pop ebp
mov ecx [ ebp + 0x10 ]
push ebp
mov ebp ebx
cmp ecx 0x100
jne r-xdata
push ecx
call sub_10011bec
pop ebp
pop ecx
pop ebx
leave
retn 0xc
mov ecx 0x2
sub_1001375c
push eax
push [ fs : 0x0 ]
lea eax [ esp + 0xc ]
sub esp [ esp + 0xc ]
push ebx
push esi
push edi
mov [ eax ] ebp
mov ebp eax
mov eax [ rw-data ]
xor eax ebp
push eax
mov [ ebp - 0x10 ] esp
push [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
retn
sub_10001230
push ebp
mov ebp esp
mov ecx [ ecx + 0x4 ]
mov eax [ ecx ]
mov eax [ eax + 0x8 ]
pop ebp
jmp eax
sub_10001240
push ebp
mov ebp esp
mov edx [ ebp + 0x10 ]
mov ecx [ ebp + 0x8 ]
mov eax [ ecx ]
mov eax [ eax + 0x1c ]
push edx
mov edx [ ebp + 0xc ]
push edx
call eax
pop ebp
retn 0xc
sub_100013e0
mov [ ecx ] r--data
retn
sub_10001420
mov [ ecx ] r--data
jmp sub_10009c2b
sub_10001460
retn
sub_10001470
mov eax [ ecx + 0x48 ]
retn
sub_100014e0
push ebp
mov ebp esp
add ecx 0x4
push ecx
mov ecx [ ebp + 0x8 ]
call sub_100032a0
pop ebp
retn 0x4
sub_10001eb0
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
mov [ esi ] 0x0
retn
mov eax [ esi ]
push eax
call sub_100098f5
add esp 0x4
sub_10002010
mov ecx [ eax ]
push ecx
call sub_100098f5
pop ecx
retn
sub_100024b0
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
push eax
mov esi ecx
call sub_10009c5d
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10004370
mov eax [ ecx + 0x4 ]
add eax 0x4
cmp [ eax + 0x14 ] 0x10
jb r-xdata
retn
mov eax [ eax ]
sub_10004380
push ebp
mov ebp esp
mov eax [ ecx + 0x4 ]
mov ecx [ ebp + 0x8 ]
push eax
call sub_100032a0
pop ebp
retn 0x4
sub_10004610
mov eax [ ecx + 0x4 ]
mov eax [ eax + 0x44 ]
retn
sub_10004660
mov eax [ ecx + 0x4 ]
add eax 0x24
cmp [ eax + 0x14 ] 0x10
jb r-xdata
push eax
call sub_1000a350
add esp 0x4
retn
mov eax [ eax ]
ADB_Cleanup
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ eax ] sub_100087d0
mov [ eax + 0x4 ] sub_10008800
pop ebp
retn 0x4
ADB_Setup
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
call sub_10007360
pop ebp
retn 0x4
ADB_Release
jmp sub_10008690
sub_10004780
mov [ ecx ] r--data
retn
sub_100047c0
push esi
mov esi ecx
cmp [ esi + 0x10 ] 0x0
jne r-xdata
mov eax [ esi + 0x10 ]
pop esi
retn
call sub_100047f0
mov [ esi + 0x10 ] eax
sub_100047e0
mov eax [ ecx + 0xc ]
test eax eax
jne r-xdata
retn
mov eax [ rw-data ]
mov [ ecx + 0xc ] eax
sub_10004880
mov eax [ ecx + 0x8 ]
test eax eax
jne r-xdata
retn
mov eax 0xaf75ff09
mov [ ecx + 0x8 ] eax
sub_10004ad0
mov [ ecx ] r--data
retn
sub_10004b10
mov eax [ ecx + 0x4 ]
imul eax eax 0x660d
sub eax 0xca1
and eax 0xffff
mov [ ecx + 0x4 ] eax
retn
sub_10005280
cmp [ esi + 0x14 ] 0x8
jb r-xdata
xor ecx ecx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
mov [ esi ] cx
retn
mov eax [ esi ]
push eax
call sub_100098f5
add esp 0x4
sub_10005600
mov [ ecx ] r--data
retn
sub_10005640
mov eax 0x1
retn
sub_1000654c
mov eax [ ebp - 0x14 ]
push eax
call sub_100098f5
add esp 0x4
push 0x0
push 0x0
call sub_1000acc0
int3
sub_10006ded
mov eax r-xdata
retn
sub_1000879c
mov eax 0x1
retn
sub_100087a2
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_100087d0
cmp [ rw-data ] 0x0
jne r-xdata
retn
push 0x0
push 0x0
push 0x0
push sub_10008750
push 0x0
push 0x0
call [ CreateThread@IAT ]
mov [ rw-data ] eax
sub_10008856
mov eax 0x1
retn
sub_10008b00
mov eax [ eax ]
test eax eax
je r-xdata
retn
mov ecx [ eax ]
mov edx [ ecx + 0x8 ]
push eax
call edx
sub_10008b10
mov eax [ eax ]
test eax eax
je r-xdata
retn
push eax
call [ SysFreeString@IAT ]
sub_10008b20
mov ecx [ eax ]
push ecx
call [ VariantClear@IAT ]
retn
sub_100098cb
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
push 0x19
call sub_1000a958
push 0x1
push 0x0
call sub_1000a911
add esp 0xc
jmp sub_1000a8de
call eax
sub_100098f5
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_1000a48d
sub_10009b47
mov edi edi
push ebp
mov ebp esp
mov eax ecx
mov ecx [ ebp + 0x8 ]
mov [ eax ] r--data
mov ecx [ ecx ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] 0x0
pop ebp
retn 0x8
sub_10009b64
mov eax [ ecx + 0x4 ]
test eax eax
jne r-xdata
retn
mov eax r--data
sub_10009bb1
mov edi edi
push esi
mov esi ecx
cmp [ esi + 0x8 ] 0x0
je r-xdata
and [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
pop esi
retn
push [ esi + 0x4 ]
call sub_1000a48d
pop ecx
sub_10009c2b
mov [ ecx ] r--data
jmp sub_10009bb1
sub_10009ff1
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_10009900
sub_1000a146
mov edi edi
push ecx
mov [ ecx ] r--data
call sub_1000c21e
pop ecx
retn
sub_1000a350
mov edi edi
push ebp
mov ebp esp
push 0xa
push 0x0
push [ ebp + 0x8 ]
call sub_1000d3ce
add esp 0xc
pop ebp
retn
sub_1000a366
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_100098f5
sub_1000a442
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x14 ]
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000a371
add esp 0x14
pop ebp
retn
sub_1000a634
cmp [ ebp + 0x10 ] edi
jne r-xdata
retn
cmp [ rw-data ] 0xffffffff
je r-xdata
call sub_1000b771
sub_1000a792
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov ecx [ ecx ]
push eax
push ecx
call sub_1000ee29
pop ecx
pop ecx
retn
sub_1000ab40
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1000ac6c
call sub_1000e0e3
retn
sub_1000ac72
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_1000ac36
neg eax
sbb eax eax
neg eax
pop ecx
dec eax
pop ebp
retn
sub_1000ac89
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1000afca
push 0xd
call sub_1000f550
pop ecx
retn
sub_1000b39b
push 0xd
call sub_1000f550
pop ecx
retn
sub_1000b3d4
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
retn
push 0xfffffffd
call sub_1000b23a
pop ecx
mov [ rw-data ] 0x1
sub_1000b71f
push 0xc
call sub_1000f550
pop ecx
mov esi [ ebp - 0x1c ]
retn
sub_1000b734
call [ TlsAlloc@IAT ]
retn 0x4
sub_1000b850
push 0xd
call sub_1000f550
pop ecx
retn
sub_1000b859
push 0xc
call sub_1000f550
pop ecx
retn
sub_1000ba0f
push 0xd
call sub_1000f550
pop ecx
retn
sub_1000ba1b
push 0xc
call sub_1000f550
pop ecx
retn
sub_1000bd22
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1000c13e
push 0xa
call [ IsProcessorFeaturePresent@IAT ]
mov [ rw-data ] eax
xor eax eax
retn
sub_1000c285
push 0xe
call sub_1000f550
pop ecx
retn
sub_1000e065
push 0x0
push 0x1000
push 0x0
call [ HeapCreate@IAT ]
xor ecx ecx
test eax eax
setne cl
mov [ rw-data ] eax
mov eax ecx
retn
sub_1000e083
push [ rw-data ]
call [ HeapDestroy@IAT ]
and [ rw-data ] 0x0
retn
sub_1000e0c2
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_1000e097
pop ecx
push [ ebp + 0x8 ]
call [ ExitProcess@IAT ]
sub_1000e0da
push 0x8
call sub_1000f629
pop ecx
retn
sub_1000e0e3
push 0x8
call sub_1000f550
pop ecx
retn
sub_1000e305
cmp [ ebp + 0x10 ] 0x0
je r-xdata
retn
push 0x8
call sub_1000f550
pop ecx
sub_1000e31a
mov edi edi
push ebp
mov ebp esp
push 0x0
push 0x1
push [ ebp + 0x8 ]
call sub_1000e1da
add esp 0xc
pop ebp
retn
sub_1000e330
push 0x1
push 0x0
push 0x0
call sub_1000e1da
add esp 0xc
retn
sub_1000e33f
mov edi edi
push ebp
mov ebp esp
call sub_1000ab07
push [ ebp + 0x8 ]
call sub_1000a958
pop ecx
push 0xff
call sub_1000e31a
int3
sub_1000eb35
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_1000eee4
and [ rw-data ] 0x0
retn
sub_1000eeec
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ebp
retn
sub_1000ef41
push [ rw-data ]
call [ DecodePointer@IAT ]
retn
sub_1000f0b5
cmp [ ebp - 0x1c ] 0x0
je r-xdata
retn
push 0x0
call sub_1000f550
pop ecx
sub_1000f550
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push [ eax * 8 + rw-data ]
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_1000f620
push 0xa
call sub_1000f550
pop ecx
retn
sub_1000ff44
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_1000ff0c
pop ecx
pop ecx
pop ebp
retn
sub_100104e6
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
push [ ecx + 0x1c ]
push [ ecx + 0x18 ]
push [ ecx + 0x28 ]
call sub_10010410
add esp 0xc
pop ebp
retn 0x4
sub_10010519
mov ebp edx
mov esi ecx
mov eax ecx
push 0x1
call sub_10011bf5
xor eax eax
xor ebx ebx
xor ecx ecx
xor edx edx
xor edi edi
jmp esi
sub_1001054b
push ebp
mov ebp [ esp + 0x8 ]
push edx
push ecx
push [ esp + 0x14 ]
call sub_10010410
add esp 0xc
pop ebp
retn 0x8
sub_100106c7
push [ ebp + 0x8 ]
call sub_10011da5
pop ecx
retn
sub_10010e9a
push ebx
call sub_10011da5
pop ecx
retn
sub_10010ff9
call sub_10012061
cmp [ rw-data ] 0x0
je r-xdata
push [ rw-data ]
call sub_1000a48d
pop ecx
retn
call sub_10011e3b
sub_10011140
mov eax [ rw-data ]
or eax 0x1
xor ecx ecx
cmp [ rw-data ] eax
sete cl
mov eax ecx
retn
sub_100112ab
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10011156
add esp 0x14
pop ebp
retn
sub_10011641
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001152b
add esp 0x10
pop ebp
retn
sub_1001165b
push 0x8
push r--data
call sub_1000eaf0
call sub_1000b8db
mov eax [ eax + 0x78 ]
test eax eax
je r-xdata
call sub_1000a8de
and [ ebp - 0x4 ] 0x0
call eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
sub_1001167b
xor eax eax
inc eax
retn
sub_10011694
call sub_1000b8db
mov eax [ eax + 0x7c ]
test eax eax
je r-xdata
jmp sub_1001165b
call eax
sub_100116cb
xor eax eax
inc eax
retn
sub_100116df
push sub_1001165b
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
retn
sub_100116f0
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1001181b
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
xor edx edx
cmp [ ecx ] 0xc0000005
sete dl
mov eax edx
retn
sub_100119ce
mov edi edi
push ebp
mov ebp esp
push 0x4
push 0x0
push [ ebp + 0x8 ]
push 0x0
call sub_1001197b
add esp 0x10
pop ebp
retn
sub_100119f0
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0xf
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_10011e10
sub_10011a06
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0x7
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_10011e10
sub_10011bc9
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_10011b00
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_10011c14
call eax
retn
sub_10011d9c
push 0xa
call sub_1000f550
pop ecx
retn
sub_10011ece
push 0x1
call sub_1000f550
pop ecx
retn
sub_10012029
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_100110c8
pop ecx
pop ecx
retn
sub_10012058
push 0x1
call sub_1000f550
pop ecx
retn
sub_10012061
push 0x1
call sub_10011f87
pop ecx
retn
sub_1001206a
push 0x2
call sub_1000e33f
sub_100121e7
xor eax eax
push eax
push eax
push 0x3
push eax
push 0x3
push 0x40000000
push r--data
call [ CreateFileW@IAT ]
mov [ rw-data ] eax
retn
sub_10012206
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
retn
cmp eax 0xfffffffe
je r-xdata
push eax
call [ CloseHandle@IAT ]
sub_100122f6
push esi
call sub_1001108c
pop ecx
retn
sub_100123cf
push ebx
call sub_10011da5
pop ecx
retn
sub_1001252f
push ebx
call sub_10011da5
pop ecx
retn
j_sub_10009c2b
jmp sub_10009c2b
sub_1001256d
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10009c5d
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_100125ba
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10009c5d
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10012607
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10009c5d
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
RtlUnwind
jmp [ RtlUnwind@IAT ]
sub_10012a30
mov [ ecx ] r--data
jmp sub_10009c2b
sub_10012b8e
push [ ebp - 0x14 ]
call sub_10012ac1
pop ecx
retn
sub_10012bd2
call sub_1000b8db
cmp [ eax + 0x90 ] 0x0
jle r-xdata
retn
call sub_1000b8db
dec [ eax + 0x90 ]
sub_10012c74
xor eax eax
cmp [ ebp + 0xc ] al
setne al
retn
sub_10012c7d
mov esp [ ebp - 0x18 ]
call sub_1001165b
sub_10012d2a
push 0x4
mov eax sub_100145c5
call sub_1001375c
call sub_1000b8db
cmp [ eax + 0x94 ] 0x0
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_10011694
call sub_100116a7
sub_10012e03
mov eax [ ebp - 0x14 ]
call sub_10012bec
retn
sub_1001307a
xor eax eax
inc eax
retn
sub_1001307e
mov esp [ ebp - 0x18 ]
call sub_1001165b
sub_10013113
xor eax eax
inc eax
retn
sub_10013117
mov esp [ ebp - 0x18 ]
call sub_1001165b
sub_1001360a
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10009c5d
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10013792
mov edi edi
push ebp
mov ebp esp
xor eax eax
inc eax
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
retn
xor eax eax
sub_100137b0
lea ecx [ ebp - 0x18 ]
jmp sub_10004ad0
sub_100137b8
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x1c ]
mov ecx [ edx - 0x20 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_100137e0
mov ecx [ ebp - 0x10 ]
jmp sub_10004780
sub_100137e8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013810
mov ecx [ ebp - 0x10 ]
jmp sub_10005600
sub_10013818
mov esi [ ebp - 0x10 ]
add esi 0x4
jmp sub_10001eb0
sub_10013823
mov esi [ ebp - 0x10 ]
add esi 0x20
jmp sub_10001eb0
sub_1001382e
mov esi [ ebp - 0x10 ]
add esi 0x3c
jmp sub_10001eb0
sub_10013839
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013860
mov ecx [ ebp - 0x10 ]
jmp sub_100078d0
sub_10013868
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013890
mov esi [ ebp + 0x8 ]
jmp sub_10001eb0
sub_10013898
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
j_sub_10001460#6
jmp sub_10001460
sub_100138c5
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_100138e0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x28 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013900
mov eax [ ebp + 0x8 ]
jmp sub_10002010
sub_10013908
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013930
mov ecx [ ebp - 0x10 ]
jmp sub_100013e0
sub_10013938
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013960
mov ecx [ ebp - 0x10 ]
jmp sub_10005600
sub_10013968
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013990
mov ecx [ ebp - 0x34 ]
jmp sub_10005600
sub_10013998
mov esi [ ebp - 0x34 ]
add esi 0x4
jmp sub_10001eb0
sub_100139a3
mov esi [ ebp - 0x34 ]
add esi 0x20
jmp sub_10001eb0
sub_100139ae
mov esi [ ebp - 0x34 ]
add esi 0x3c
jmp sub_10001eb0
sub_100139b9
lea eax [ ebp - 0x40 ]
jmp sub_10008b00
sub_100139c1
lea eax [ ebp - 0x3c ]
jmp sub_10008b10
sub_100139c9
lea eax [ ebp - 0x38 ]
jmp sub_10008b00
sub_100139d1
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x40 ]
xor ecx eax
call sub_100098bc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013a00
mov esi [ ebp + 0x8 ]
jmp sub_10001eb0
sub_10013a08
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013a30
mov ecx [ ebp - 0x10 ]
jmp sub_100013e0
sub_10013a38
mov esi [ ebp - 0x10 ]
add esi 0x4
jmp sub_10001eb0
sub_10013a43
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013a60
mov ecx [ ebp - 0x10 ]
jmp sub_10005600
sub_10013a68
mov esi [ ebp - 0x10 ]
add esi 0x38
jmp sub_10001eb0
sub_10013a73
mov esi [ ebp - 0x10 ]
add esi 0x54
jmp sub_10005280
sub_10013a7e
mov esi [ ebp - 0x10 ]
add esi 0x70
jmp sub_10005280
sub_10013a89
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013ab0
mov eax [ ebp - 0x10 ]
push eax
call sub_100098f5
pop ecx
retn
sub_10013abb
mov ecx [ ebp - 0x10 ]
jmp sub_100013e0
sub_10013ac3
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013ae0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x28 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013b00
mov esi [ ebp - 0x18 ]
add esi 0x4
jmp sub_10001eb0
sub_10013b0b
mov esi [ ebp - 0x18 ]
add esi 0x24
jmp sub_10001eb0
sub_10013b16
mov eax [ ebp - 0x1c ]
jmp sub_10002010
sub_10013b1e
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x20 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013b40
mov esi [ ebp - 0x10 ]
add esi 0x4
jmp sub_10001eb0
sub_10013b4b
mov esi [ ebp - 0x10 ]
add esi 0x24
jmp sub_10001eb0
sub_10013b56
mov eax [ ebp - 0x14 ]
jmp sub_10002010
sub_10013b5e
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
j_sub_10001460#2
jmp sub_10001460
sub_10013b85
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013ba0
mov eax [ ebp - 0x10 ]
push eax
call sub_100098f5
pop ecx
retn
sub_10013bab
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013bd0
mov eax [ ebp - 0x10 ]
push eax
call sub_100098f5
pop ecx
retn
sub_10013bdb
mov ecx [ ebp - 0x10 ]
jmp sub_100078d0
sub_10013be3
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013c00
lea esi [ ebp - 0x48 ]
jmp sub_10001eb0
sub_10013c08
lea esi [ ebp - 0x2c ]
jmp sub_10001eb0
sub_10013c10
lea esi [ ebp - 0x64 ]
jmp sub_10001eb0
sub_10013c18
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x78 ]
xor ecx eax
call sub_100098bc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013c40
lea esi [ ebp - 0x2c ]
jmp sub_10001eb0
sub_10013c48
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x50 ]
xor ecx eax
call sub_100098bc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013c70
mov eax [ ebp - 0x18 ]
push eax
call sub_100098f5
pop ecx
retn
sub_10013c7b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1c ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013cc8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x3c ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013cf0
lea esi [ ebp - 0x19ec ]
jmp sub_10005280
sub_10013cfb
lea esi [ ebp - 0x19d0 ]
jmp sub_10005280
sub_10013d06
lea esi [ ebp - 0x19b4 ]
jmp sub_10001eb0
sub_10013d11
lea esi [ ebp - 0x1998 ]
jmp sub_10001eb0
sub_10013d1c
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1a5c ]
xor ecx eax
call sub_100098bc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013d50
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013d70
mov eax [ ebp + 0x8 ]
jmp sub_10002010
sub_10013d78
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013da0
mov esi [ ebp - 0x10 ]
add esi 0x4
jmp sub_10001eb0
sub_10013dab
mov esi [ ebp - 0x10 ]
add esi 0x24
jmp sub_10001eb0
sub_10013db6
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013de0
mov eax [ ebp - 0x4c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x4c ] 0xfffffffe
mov esi [ ebp - 0x50 ]
jmp sub_10001eb0
sub_10013df9
lea esi [ ebp - 0x2c ]
jmp sub_10001eb0
sub_10013e01
lea esi [ ebp - 0x2c ]
jmp sub_10001eb0
sub_10013e09
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x54 ]
xor ecx eax
call sub_100098bc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013e30
lea esi [ ebp + 0xc ]
jmp sub_10001eb0
sub_10013e38
lea esi [ ebp - 0x48 ]
jmp sub_10001eb0
sub_10013e40
lea esi [ ebp - 0x2c ]
jmp sub_10001eb0
sub_10013e48
mov eax [ ebp - 0x60 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x60 ] 0xfffffffe
mov esi [ ebp - 0x5c ]
jmp sub_10001eb0
sub_10013e61
lea esi [ ebp - 0x2c ]
jmp sub_10001eb0
sub_10013e69
lea esi [ ebp - 0x2c ]
jmp sub_10001eb0
sub_10013e71
lea esi [ ebp - 0x2c ]
jmp sub_10001eb0
sub_10013e79
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x84 ]
xor ecx eax
call sub_100098bc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013eb0
mov esi [ ebp + 0x8 ]
add esi 0x4
jmp sub_10001eb0
sub_10013ebb
mov esi [ ebp + 0x8 ]
add esi 0x24
jmp sub_10001eb0
sub_10013ec6
mov eax [ ebp + 0x8 ]
add eax 0x40
push eax
call sub_10003970
retn
sub_10013ed3
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x20 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
j_sub_10001460#5
jmp sub_10001460
sub_10013ef5
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013f10
mov eax [ ebp - 0x10 ]
push eax
call sub_100098f5
pop ecx
retn
sub_10013f1b
mov ecx [ ebp - 0x10 ]
jmp sub_100013e0
sub_10013f23
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp sub_100033a0
sub_10013f2e
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013f50
lea esi [ ebp - 0x2c ]
jmp sub_10001eb0
sub_10013f58
mov eax [ ebp - 0x4c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x4c ] 0xfffffffe
mov esi [ ebp - 0x54 ]
jmp sub_10001eb0
sub_10013f71
lea esi [ ebp - 0x48 ]
jmp sub_10001eb0
sub_10013f79
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x54 ]
xor ecx eax
call sub_100098bc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013fa0
mov eax [ ebp - 0x814 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x814 ] 0xfffffffe
mov esi [ ebp - 0x818 ]
jmp sub_10005280
sub_10013fc2
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x81c ]
xor ecx eax
call sub_100098bc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10013ff0
lea esi [ ebp - 0x2c ]
jmp sub_10005280
sub_10013ff8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_100098bc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10014020
lea esi [ ebp - 0x2320 ]
jmp sub_10001eb0
sub_1001402b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x233c ]
xor ecx eax
call sub_100098bc
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
j_sub_10001460
jmp sub_10001460
sub_10014065
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10014080
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
j_sub_10001460#3
jmp sub_10001460
j_sub_10001460#4
jmp sub_10001460
sub_100140aa
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_100140d0
lea esi [ ebp - 0x2c ]
jmp sub_10001eb0
sub_100140d8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x2c ]
xor ecx eax
call sub_100098bc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10014100
lea esi [ ebp - 0x2c ]
jmp sub_10001eb0
sub_10014108
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x38 ]
xor ecx eax
call sub_100098bc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10014130
lea esi [ ebp - 0x4c ]
jmp sub_10001eb0
sub_10014138
lea eax [ ebp - 0x4c ]
push eax
call sub_10005de0
retn
sub_10014142
lea esi [ ebp - 0x4c ]
jmp sub_10001eb0
sub_1001414a
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x54 ]
mov ecx [ edx - 0x58 ]
xor ecx eax
call sub_100098bc
add eax 0xc
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10014180
mov ecx [ ebp + 0x8 ]
jmp sub_10005600
sub_10014188
mov esi [ ebp + 0x8 ]
add esi 0x38
jmp sub_10001eb0
sub_10014193
mov esi [ ebp + 0x8 ]
add esi 0x54
jmp sub_10005280
sub_1001419e
mov esi [ ebp + 0x8 ]
add esi 0x70
jmp sub_10005280
sub_100141a9
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_100141d0
mov eax [ ebp - 0x10 ]
push eax
call sub_100098f5
pop ecx
retn
sub_100141db
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10014200
lea ecx [ ebp - 0x5c ]
jmp sub_100033a0
sub_10014208
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x60 ]
xor ecx eax
call sub_100098bc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10014230
lea esi [ ebp + 0xc ]
jmp sub_10001eb0
sub_10014238
lea esi [ ebp - 0x2c ]
jmp sub_10001eb0
sub_10014240
lea esi [ ebp - 0x74 ]
jmp sub_10001eb0
sub_10014248
lea esi [ ebp - 0x54 ]
jmp sub_10001eb0
sub_10014250
lea eax [ ebp - 0x38 ]
push eax
call sub_10003970
retn
sub_1001425a
lea ecx [ ebp - 0x78 ]
jmp sub_100033a0
sub_10014262
lea esi [ ebp - 0x74 ]
jmp sub_10001eb0
sub_1001426a
lea esi [ ebp - 0x54 ]
jmp sub_10001eb0
sub_10014272
mov eax [ ebp - 0xac ]
jmp sub_10002010
sub_1001427d
lea esi [ ebp - 0x94 ]
jmp sub_10001eb0
sub_10014288
lea esi [ ebp - 0xd0 ]
jmp sub_10001eb0
sub_10014293
mov eax [ ebp - 0xb0 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0xb0 ] 0xfffffffe
mov esi [ ebp - 0xb4 ]
jmp sub_10001eb0
sub_100142b5
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xe0 ]
xor ecx eax
call sub_100098bc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_100142e0
mov eax [ ebp - 0x3c ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x3c ] 0xfffffffe
mov ecx [ ebp - 0x40 ]
push ecx
call sub_10001ee0
sub_100142fa
lea esi [ ebp - 0x2c ]
jmp sub_10001eb0
sub_10014302
lea esi [ ebp - 0x2c ]
jmp sub_10001eb0
sub_1001430a
lea esi [ ebp - 0x2c ]
jmp sub_10001eb0
sub_10014312
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x4c ]
xor ecx eax
call sub_100098bc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10014340
mov eax [ ebp - 0x30 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x30 ] 0xfffffffe
mov esi [ ebp - 0x38 ]
jmp sub_10005280
sub_10014359
lea esi [ ebp - 0x2c ]
jmp sub_10005280
sub_10014361
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x3c ]
xor ecx eax
call sub_100098bc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10014390
mov eax [ ebp - 0x464 ]
and eax 0x1
je r-xdata
retn
and [ ebp - 0x464 ] 0xfffffffe
mov esi [ ebp - 0x458 ]
jmp sub_10001eb0
sub_100143b2
lea eax [ ebp - 0x480 ]
jmp sub_10008b10
sub_100143bd
lea eax [ ebp - 0x484 ]
jmp sub_10008b10
sub_100143c8
lea eax [ ebp - 0x468 ]
jmp sub_10008b00
sub_100143d3
lea eax [ ebp - 0x14 ]
jmp sub_10008b00
sub_100143db
lea eax [ ebp - 0x450 ]
jmp sub_10008b20
sub_100143e6
lea esi [ ebp - 0x440 ]
jmp sub_10001eb0
sub_100143f1
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x488 ]
xor ecx eax
call sub_100098bc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10014420
lea esi [ ebp - 0x2c ]
jmp sub_10001eb0
sub_10014428
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x44 ]
xor ecx eax
call sub_100098bc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10014450
lea esi [ ebp - 0x2c ]
jmp sub_10001eb0
sub_10014458
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x40 ]
xor ecx eax
call sub_100098bc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10014480
mov eax [ ebp - 0x74 ]
push eax
call sub_100098f5
pop ecx
retn
sub_1001448b
mov ecx [ ebp - 0x74 ]
jmp sub_10005600
sub_10014493
mov esi [ ebp - 0x74 ]
add esi 0x38
jmp sub_10001eb0
sub_1001449e
mov esi [ ebp - 0x74 ]
add esi 0x54
jmp sub_10005280
sub_100144a9
mov esi [ ebp - 0x74 ]
add esi 0x70
jmp sub_10005280
sub_100144b4
mov eax [ ebp - 0x6c ]
push eax
call sub_100098f5
pop ecx
retn
sub_100144bf
lea esi [ ebp - 0x48 ]
jmp sub_10005280
sub_100144c7
lea esi [ ebp - 0x2c ]
jmp sub_10005280
sub_100144cf
lea esi [ ebp - 0x64 ]
jmp sub_10005280
sub_100144d7
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x78 ]
xor ecx eax
call sub_100098bc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10014500
lea esi [ ebp - 0x2c ]
jmp sub_10005280
sub_10014508
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x34 ]
xor ecx eax
call sub_100098bc
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10014530
mov eax [ ebp - 0x10 ]
push eax
call sub_100098f5
pop ecx
retn
sub_1001453b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10014560
lea eax [ ebp - 0x18 ]
push eax
call sub_10001ee0
retn
sub_1001456a
lea eax [ ebp - 0x18 ]
jmp sub_10002010
sub_10014572
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1c ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_10014590
lea eax [ ebp - 0x18 ]
push eax
call sub_10001ee0
retn
sub_1001459a
lea eax [ ebp - 0x18 ]
jmp sub_10002010
sub_100145a2
lea eax [ ebp - 0x18 ]
jmp sub_10002010
sub_100145aa
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1c ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_100145c5
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_100098bc
mov eax r--data
jmp sub_100126d9
sub_100145e0
mov [ rw-data ] r--data
mov ecx rw-data
jmp sub_10009c2b
