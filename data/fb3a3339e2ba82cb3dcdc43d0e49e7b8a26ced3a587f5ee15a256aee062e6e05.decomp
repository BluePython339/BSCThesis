sub_140001000
mov [ rsp + 0x18 ] rbp
push rdi
sub rsp 0x30
mov rdi rdx
mov edx 0x8
mov rbp rcx
mov rcx [ rw-data ]
lea r8d [ rdx + 0x12 ]
call [ rw-data ]
mov [ rdi + 0x8 ] rax
test rax rax
jne r-xdata
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x48 ] rsi
call [ GetProcAddress@IAT ]
call rax
mov ecx eax
call [ rw-data ]
xor ebx ebx
lea esi [ rbx + 0x6 ]
nop [ rax + rax ] ax
or eax 0xffffffff
mov rbp [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
call [ rw-data ]
mov rcx [ rdi + 0x8 ]
lea rbx [ rbx + 0x1 ]
mov [ rbx + rcx - 0x1 ] al
dec rsi
jne r-xdata
mov rax [ rdi + 0x8 ]
mov rcx [ rdi ]
lea r9d [ rsi + 0x3 ]
xor r8d r8d
mov rdx rbp
mov [ rsp + 0x28 ] 0x1a
mov [ rsp + 0x20 ] rax
call [ rw-data ]
mov rsi [ rsp + 0x48 ]
mov ebx eax
test eax eax
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x50 ]
mov [ rdi + 0x10 ] 0x1a
xor eax eax
add rsp 0x30
pop rdi
retn
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov r8 [ rdi + 0x8 ]
test r8 r8
je r-xdata
call [ rw-data ]
mov eax ebx
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rcx [ rw-data ]
xor edx edx
call [ rw-data ]
sub_140001110
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x10 ] rdx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
xor r11d r11d
mov rdi rcx
mov ebx r11d
mov ebp r11d
mov esi r11d
cmp r8d 0x2
jl r-xdata
cmp esi r8d
jae r-xdata
mov r10 [ rcx + 0x8 ]
lea eax [ r8 - 0x2 ]
shr eax 0x1
add r10 0x7
inc eax
mov ecx eax
lea esi [ rax + rax ]
nop [ rax + rax ] eax
mov r14d [ rdi + 0x10 ]
lea ecx [ r8 + 0x6 ]
lea eax [ rbx + r11 ]
mov ebx [ rsp + 0x90 ]
add ebp eax
mov rax [ rdi + 0x8 ]
movzx r15d [ rax + rcx ]
mov [ rsp + 0x70 ] rcx
mov rcx [ rw-data ]
lea r13d [ r15 + rbp ]
mov edx 0x8
lea eax [ r13 + 0x1a ]
sub r14d eax
lea eax [ r14 + rbx ]
mov r8d eax
mov [ rsp + 0x90 ] eax
mov r12d eax
call [ rw-data ]
mov rsi rax
test rax rax
jne r-xdata
mov rax [ rdi + 0x8 ]
lea ecx [ rsi + 0x6 ]
movzx ebp [ rcx + rax ]
movzx eax [ r10 - 0x1 ]
lea r10 [ r10 + 0x2 ]
add r11d eax
movzx eax [ r10 - 0x2 ]
add ebx eax
dec rcx
jne r-xdata
test r14d r14d
je r-xdata
or eax 0xffffffff
jmp r-xdata
test ebx ebx
je r-xdata
cmp ebx r15d
je r-xdata
mov rbx [ rsp + 0x80 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rax [ rdi + 0x8 ]
cmp ebx r15d
je r-xdata
mov rdx [ rsp + 0x88 ]
mov r8 rbx
mov rcx rsi
call [ rw-data ]
mov r9 [ rdi + 0x8 ]
mov r8d r13d
mov edx r14d
lea rcx [ r9 + 0x1a ]
call sub_140001320
lea edx [ r13 + 0x1a ]
lea rcx [ rsi + rbx ]
add rdx [ rdi + 0x8 ]
mov r8d r14d
call [ rw-data ]
mov r8 rbx
mov ecx ebp
add rax 0x1a
mov rcx [ rsp + 0x70 ]
lea rdx [ rw-data ]
mov [ rcx + rax ] bl
mov rcx [ rw-data ]
sub ebx r15d
add [ rdi + 0x10 ] ebx
mov ebx [ rdi + 0x10 ]
call [ GetProcAddress@IAT ]
mov r8 [ rdi + 0x8 ]
mov rcx [ rw-data ]
mov r9d ebx
mov edx 0x8
call rax
mov rcx rax
mov [ rdi + 0x8 ] rax
test rax rax
je r-xdata
mov rcx [ rw-data ]
mov r8 rsi
xor edx edx
call [ rw-data ]
xor eax eax
mov eax ebp
add rcx 0x1a
mov r8 r12
jmp r-xdata
mov rdx rsi
add rcx rax
call [ rw-data ]
mov r9 [ rdi + 0x8 ]
mov edx [ rsp + 0x90 ]
lea rcx [ r9 + 0x1a ]
mov r8d ebp
call sub_140001320
mov eax [ rdi + 0x10 ]
mov rdx [ rsp + 0x78 ]
mov rcx [ rdi ]
mov [ rsp + 0x28 ] eax
mov rax [ rdi + 0x8 ]
mov r9d 0x3
xor r8d r8d
mov [ rsp + 0x20 ] rax
call [ rw-data ]
test eax eax
jne r-xdata
sub_140001320
mov [ rsp + 0x8 ] rcx
push rbx
push rbp
push rsi
push rdi
push r12
push r14
sub rsp 0x18
lea r14d [ r8 + rdx ]
mov rbp rcx
mov eax 0xaaaaaaab
mov r12 r9
mov [ rsp + 0x60 ] r8d
mul r8d
mov esi edx
mov eax 0xaaaaaaab
shr esi 0x2
mov [ rsp + 0x58 ] esi
mov r10d esi
mul r14d
mov ecx edx
mov edx 0x3
shr ecx 0x2
mov [ rsp ] ecx
lea eax [ rcx + rcx * 2 ]
add eax eax
sub r14d eax
mov [ rsp + 0x4 ] r14d
cmp esi ecx
jae r-xdata
cmp r10d esi
jne r-xdata
lea ebx [ rsi + rsi * 2 ]
mov [ rsp + 0x68 ] r13
mov [ rsp + 0x10 ] r15
add ebx ebx
nop [ rax ] eax
xor r8d r8d
lea eax [ rsi + rsi * 2 ]
add eax eax
sub r8d eax
jmp r-xdata
xor ecx ecx
lea eax [ rsi + rsi * 2 ]
mov ecx r8d
add eax eax
sub ecx eax
cmp ecx 0x6
jae r-xdata
add rsp 0x18
pop r14
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
movzx eax r10b
mov edi r8d
add al al
add rdi r12
lea esi [ rax + r10 ]
lea eax [ r10 + r10 * 2 ]
lea ebx [ rax + rax ]
add sil sil
sub edx ebx
lea r11d [ rbx + r8 ]
neg ebx
mov [ rsp + 0x58 ] edx
nop [ rax ] eax
cmp r8d r14d
jae r-xdata
mov eax 0xaaaaaaab
mov r8d r13d
lea r14 [ r14 + 0x1 ]
add r8d ebp
mul r8d
mov eax r8d
shr edx 0x2
lea ecx [ rdx + rdx * 2 ]
add ecx ecx
sub eax ecx
mov ecx eax
lea eax [ r15 + rbp ]
movzx r9d [ rcx + r12 ]
add al dil
lea ecx [ r8 - 0x1 ]
xor r9b al
mov eax 0xaaaaaaab
mul ecx
shr edx 0x2
lea eax [ rdx + rdx * 2 ]
add eax eax
sub ecx eax
mov eax 0xaaaaaaab
and r9b [ rcx + r12 ]
lea ecx [ r8 - 0x2 ]
mul ecx
shr edx 0x2
lea eax [ rdx + rdx * 2 ]
add eax eax
sub ecx eax
mov eax ecx
movzx ecx [ r14 - 0x1 ]
movzx eax [ rax + r12 ]
imul ecx ebp
shr ecx 0x7
xor al cl
add r9b al
xor [ rbp + rsi ] r9b
inc ebp
lea eax [ r15 + rbp ]
cmp eax 0x6
jb r-xdata
mov esi [ rsp + 0x58 ]
mov r8d [ rsp + 0x60 ]
mov edx 0x3
inc r10d
add ebx 0x6
cmp r10d [ rsp ]
jb r-xdata
jmp r-xdata
lea r8d [ r11 + rdx ]
mov eax 0xaaaaaaab
lea rdi [ rdi + 0x1 ]
mul r8d
shr edx 0x2
mov eax r8d
lea ecx [ rdx + rdx * 2 ]
add ecx ecx
sub eax ecx
mov ecx eax
lea eax [ rbx + r11 ]
movzx r9d [ rcx + r12 ]
add al sil
lea ecx [ r8 - 0x1 ]
xor r9b al
mov eax 0xaaaaaaab
mul ecx
shr edx 0x2
lea eax [ rdx + rdx * 2 ]
add eax eax
sub ecx eax
mov eax 0xaaaaaaab
and r9b [ rcx + r12 ]
lea ecx [ r8 - 0x2 ]
mul ecx
shr edx 0x2
lea eax [ rdx + rdx * 2 ]
mov edx [ rsp + 0x58 ]
add eax eax
sub ecx eax
mov eax ecx
movzx ecx [ rdi - 0x1 ]
movzx eax [ rax + r12 ]
imul ecx r11d
shr ecx 0x7
xor al cl
add r9b al
xor [ r11 + rbp ] r9b
inc r11d
lea eax [ r11 + rbx ]
cmp eax r14d
jb r-xdata
cmp r10d esi
jne r-xdata
mov rbp [ rsp + 0x50 ]
mov r14d [ rsp + 0x4 ]
mov r15 [ rsp + 0x10 ]
mov r13 [ rsp + 0x68 ]
mov rsi [ rsp + 0x50 ]
movzx eax r10b
mov r14d ecx
add al al
mov r13d edx
mov r15d ebx
lea edi [ rax + r10 ]
add r14 r12
sub r13d ebx
add dil dil
neg r15d
lea ebp [ rbx + rcx ]
nop [ rax + rax ] ax
sub_140001580
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
lea rbp [ rsp - 0x370 ]
sub rsp 0x470
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x360 ] rax
mov rdi rcx
mov rsi rdx
lea rcx [ rbp + 0x150 ]
xor edx edx
mov r8d 0x208
mov [ rsp + 0x30 ] 0x0
call [ rw-data ]
mov rcx [ rw-data ]
lea rdx [ rw-data ]
call [ GetProcAddress@IAT ]
lea r9 [ rw-data ]
lea r8 [ rw-data ]
lea rcx [ rbp + 0x150 ]
mov edx 0x104
mov [ rw-data ] rax
call rax
lea r8 [ rsp + 0x30 ]
lea rdx [ rbp + 0x150 ]
mov rcx 0xffffffff80000002
call [ rw-data ]
test eax eax
jne r-xdata
lea rcx [ rbp + 0x150 ]
xor edx edx
mov r8d 0x208
call [ rw-data ]
lea r8 [ rw-data ]
lea rcx [ rbp + 0x150 ]
mov r9 rdi
mov edx 0x104
call [ rw-data ]
lea rcx [ rsp + 0x40 ]
xor edx edx
mov r8d 0x208
call [ rw-data ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x40 ]
call [ rw-data ]
lea r8 [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
mov rcx 0xffffffff80000001
call [ rw-data ]
test eax eax
jne r-xdata
mov rcx rdi
call [ rw-data ]
mov rcx [ rsp + 0x30 ]
mov r9d 0x1
lea eax [ rax * 2 + 0x2 ]
xor r8d r8d
xor edx edx
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rdi
call [ rw-data ]
mov ebx eax
test eax eax
jne r-xdata
mov rcx [ rbp + 0x360 ]
xor rcx rsp
call sub_1400029f0
mov rbx [ rsp + 0x4a0 ]
add rsp 0x470
pop rdi
pop rsi
pop rbp
retn
lea rcx [ rsp + 0x40 ]
xor edx edx
mov r8d 0x208
call [ rw-data ]
lea rcx [ rsp + 0x40 ]
mov rdx rsi
call [ rw-data ]
lea rcx [ rbp + 0x150 ]
call [ rw-data ]
mov rcx [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
lea eax [ rax * 2 + 0x2 ]
mov r9d 0x1
xor r8d r8d
mov [ rsp + 0x28 ] eax
lea rax [ rbp + 0x150 ]
mov [ rsp + 0x20 ] rax
call [ rw-data ]
mov rcx [ rsp + 0x30 ]
mov ebx eax
call [ rw-data ]
mov rcx [ rsp + 0x30 ]
call [ rw-data ]
test ebx ebx
je r-xdata
lea rcx [ rsp + 0x40 ]
xor edx edx
mov r8d 0x208
call [ rw-data ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x40 ]
call [ rw-data ]
lea rcx [ rbp + 0x150 ]
xor edx edx
mov r8d 0x208
call [ rw-data ]
lea rdx [ rw-data ]
lea rcx [ rbp + 0x150 ]
call [ rw-data ]
lea rcx [ rbp + 0x150 ]
call [ rw-data ]
mov rcx [ rsp + 0x30 ]
lea r9d [ rbx + 0x1 ]
lea eax [ rax * 2 + 0x2 ]
lea rdx [ rsp + 0x40 ]
xor r8d r8d
mov [ rsp + 0x28 ] eax
lea rax [ rbp + 0x150 ]
mov [ rsp + 0x20 ] rax
call [ rw-data ]
mov ebx eax
test eax eax
jne r-xdata
mov eax ebx
mov rcx [ rsp + 0x30 ]
call [ rw-data ]
lea rcx [ rsp + 0x40 ]
xor edx edx
mov r8d 0x208
call [ rw-data ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x40 ]
call [ rw-data ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x40 ]
call [ rw-data ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x40 ]
call [ rw-data ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x40 ]
call [ rw-data ]
lea rcx [ rsp + 0x40 ]
mov rdx rsi
call [ rw-data ]
lea r8 [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
mov rcx 0xffffffff80000002
call [ rw-data ]
mov ebx eax
test eax eax
jne r-xdata
lea rcx [ rsp + 0x40 ]
xor edx edx
mov r8d 0x208
call [ rw-data ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x40 ]
call [ rw-data ]
lea rcx [ rsp + 0x40 ]
call [ rw-data ]
mov rcx [ rsp + 0x30 ]
lea r9d [ rbx + 0x1 ]
lea eax [ rax * 2 + 0x2 ]
xor r8d r8d
xor edx edx
mov [ rsp + 0x28 ] eax
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x20 ] rax
call [ rw-data ]
mov ebx eax
sub_1400018f0
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push r12
push r13
xor esi esi
mov [ rsp + 0x38 ] r15
mov r15d edx
shr r15d 0x3
mov r13d edx
mov r12 rcx
mov r8d esi
lea rbx [ rw-data ]
lea ebp [ rsi + 0x2 ]
test r15d r15d
je r-xdata
mov r15 [ rsp + 0x38 ]
and r13d 0x7
jbe r-xdata
mov [ rsp + 0x28 ] rdi
mov [ rsp + 0x30 ] r14
nop
mov rbx [ rsp + 0x40 ]
pop r13
pop r12
pop rsi
pop rbp
retn
movzx r10d r8b
lea r11d [ r8 * 8 ]
shl r10b 0x3
nop [ rax + rax ] eax
lea edx [ r11 + rdi ]
mov ecx r11d
lea r10d [ r14 + r11 ]
movzx eax dl
add r10 r12
inc r11d
imul [ rbx + rbp - 0x2 ]
movzx r9d al
movzx eax dl
shl r9b cl
lea rcx [ rbx - 0x1 ]
and ecx 0x7
add r9b [ rcx + rbp ]
lea rcx [ rbx + 0x1 ]
and ecx 0x7
imul [ rcx + rbp ]
mov rcx rbx
inc rbx
and ecx 0x7
and al [ rcx + rbp ]
xor r9b al
xor [ r10 ] r9b
cmp r11d 0x8
jb r-xdata
inc r8d
mov ebp 0x2
cmp r8d r15d
jb r-xdata
lea edx [ rsi + r10 ]
mov ecx esi
lea r9d [ r11 + rsi ]
movzx eax dl
inc esi
imul [ rbx + rbp - 0x2 ]
movzx r8d al
movzx eax dl
shl r8b cl
lea rcx [ rbp - 0x1 ]
and ecx 0x7
add r8b [ rcx + rbx ]
lea rcx [ rbp + 0x1 ]
and ecx 0x7
imul [ rcx + rbx ]
mov rcx rbp
inc rbp
and ecx 0x7
and al [ rcx + rbx ]
xor r8b al
xor [ r9 + r12 ] r8b
cmp esi r13d
jb r-xdata
movzx edi r8b
mov rbx rbp
mov r11d esi
lea r14d [ r8 * 8 ]
lea rbp [ rw-data ]
shl dil 0x3
nop [ rax ] eax
mov r14 [ rsp + 0x30 ]
mov rdi [ rsp + 0x28 ]
lea rbx [ rw-data ]
sub_140001a40
push rbx
sub rsp 0x50
xor eax eax
mov rbx rdx
lea r8 [ rsp + 0x30 ]
lea rdx [ rw-data ]
mov rcx 0xffffffff80000001
mov [ rsp + 0x30 ] 0x0
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x40 ] rax
call [ rw-data ]
cmp [ rsp + 0x30 ] 0x0
je r-xdata
test eax eax
jne r-xdata
lea rdx [ rsp + 0x30 ]
lea rcx [ rw-data ]
call sub_140001000
xor eax eax
add rsp 0x50
pop rbx
retn
lea rcx [ rw-data ]
call [ rw-data ]
lea r9 [ rw-data ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x30 ]
xor r8d r8d
mov [ rsp + 0x20 ] eax
call sub_140001110
lea rcx [ rw-data ]
call [ rw-data ]
lea r9 [ rw-data ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x30 ]
mov r8d 0x1
mov [ rsp + 0x20 ] eax
call sub_140001110
mov rcx rbx
call [ rw-data ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x30 ]
mov r9 rbx
mov r8d 0x2
mov [ rsp + 0x20 ] eax
call sub_140001110
lea rcx [ rw-data ]
call [ rw-data ]
lea r9 [ rw-data ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x30 ]
mov r8d 0x3
mov [ rsp + 0x20 ] eax
call sub_140001110
lea rcx [ rw-data ]
call [ rw-data ]
lea r9 [ rw-data ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x30 ]
mov r8d 0x4
mov [ rsp + 0x20 ] eax
call sub_140001110
lea rcx [ rw-data ]
call [ rw-data ]
lea r9 [ rw-data ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x30 ]
mov r8d 0x5
mov [ rsp + 0x20 ] eax
call sub_140001110
lea rcx [ rw-data ]
call [ rw-data ]
lea r9 [ rw-data ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x30 ]
mov r8d 0x6
mov [ rsp + 0x20 ] eax
call sub_140001110
lea rcx [ rw-data ]
call [ rw-data ]
lea r9 [ rw-data ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x30 ]
mov r8d 0x7
mov [ rsp + 0x20 ] eax
call sub_140001110
lea rcx [ r--data ]
call [ rw-data ]
lea r9 [ r--data ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x30 ]
mov r8d 0x8
mov [ rsp + 0x20 ] eax
call sub_140001110
lea rcx [ rw-data ]
call [ rw-data ]
lea r9 [ rw-data ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x30 ]
mov r8d 0x9
mov [ rsp + 0x20 ] eax
call sub_140001110
mov rcx [ rsp + 0x30 ]
test rcx rcx
je r-xdata
mov r8 [ rsp + 0x38 ]
test r8 r8
je r-xdata
call [ rw-data ]
mov eax 0x1
add rsp 0x50
pop rbx
retn
mov rcx [ rw-data ]
xor edx edx
call [ rw-data ]
sub_140001ca0
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x270
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x260 ] rax
lea r8 [ rsp + 0x48 ]
lea rdx [ rw-data ]
xor esi esi
mov rcx 0xffffffff80000001
mov [ rsp + 0x40 ] esi
call [ RegOpenKeyW@IAT ]
mov rcx [ rsp + 0x48 ]
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x28 ] rax
lea rdx [ rw-data ]
xor r9d r9d
xor r8d r8d
mov [ rsp + 0x20 ] rsi
call [ RegQueryValueExW@IAT ]
mov r8d [ rsp + 0x40 ]
mov rcx [ rw-data ]
lea edx [ rsi + 0x8 ]
call [ HeapAlloc@IAT ]
mov rcx [ rsp + 0x48 ]
lea rdx [ rw-data ]
mov rdi rax
lea rax [ rsp + 0x40 ]
xor r9d r9d
mov [ rsp + 0x28 ] rax
xor r8d r8d
mov [ rsp + 0x20 ] rdi
call [ RegQueryValueExW@IAT ]
lea rcx [ rsp + 0x52 ]
xor edx edx
mov r8d 0x206
mov [ rsp + 0x50 ] si
call sub_140007ec0
lea rax [ rsp + 0x50 ]
lea edx [ rsi + 0x23 ]
xor r9d r9d
xor r8d r8d
xor ecx ecx
mov [ rsp + 0x20 ] rax
call [ SHGetFolderPathW@IAT ]
test eax eax
js r-xdata
mov rcx [ rw-data ]
mov r8 rdi
xor edx edx
call [ HeapFree@IAT ]
mov rcx [ rsp + 0x48 ]
call [ RegCloseKey@IAT ]
mov eax 0x1
mov rcx [ rsp + 0x260 ]
xor rcx rsp
call sub_1400029f0
mov rsi [ rsp + 0x288 ]
add rsp 0x270
pop rdi
retn
lea rdx [ r--data ]
lea rcx [ rsp + 0x50 ]
mov [ rsp + 0x280 ] rbx
call [ lstrcatW@IAT ]
mov [ rsp + 0x30 ] rsi
lea r8d [ rsi + 0x2 ]
lea rcx [ rsp + 0x50 ]
xor r9d r9d
mov edx 0x40000000
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x20 ] 0x4
call [ CreateFileW@IAT ]
mov rbx rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x280 ]
mov r8d [ rsp + 0x40 ]
lea r9 [ rsp + 0x44 ]
mov rdx rdi
mov rcx rax
mov [ rsp + 0x44 ] esi
mov [ rsp + 0x20 ] rsi
call [ WriteFile@IAT ]
mov rcx rbx
call [ CloseHandle@IAT ]
sub_140001e40
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x250
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x240 ] rax
lea rcx [ rsp + 0x41 ]
xor edx edx
mov r8d 0x1ff
mov [ rsp + 0x40 ] 0x0
call sub_140007ec0
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov [ rsp + 0x30 ] 0x200
call [ GetProcAddress@IAT ]
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
call rax
mov ecx eax
call [ rw-data ]
mov rcx [ rw-data ]
lea rdx [ rw-data ]
call [ GetProcAddress@IAT ]
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x40 ]
call rax
movzx edi [ rw-data ]
movzx esi [ rw-data ]
lea rcx [ rsp + 0x40 ]
call [ rw-data ]
lea rbx [ rsp + 0x40 ]
lea rdx [ rw-data ]
movsxd rcx eax
add rbx rcx
mov rcx [ rw-data ]
call [ GetProcAddress@IAT ]
mov edx [ rw-data ]
mov r9d edi
mov [ rsp + 0x28 ] edx
mov edx [ rw-data ]
mov r8d esi
mov [ rsp + 0x20 ] edx
lea rdx [ rw-data ]
mov rcx rbx
call rax
lea rdx [ rsp + 0x40 ]
mov [ rsp + 0x64 ] 0x0
call sub_140001a40
mov ebx eax
call sub_140001ca0
mov eax ebx
mov rcx [ rsp + 0x240 ]
xor rcx rsp
call sub_1400029f0
lea r11 [ rsp + 0x250 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rsp r11
pop rdi
retn
?StartProcess@@YAXPEA_W@Z
push rbx
sub rsp 0xe0
xor edx edx
mov rbx rcx
lea rcx [ rsp + 0x70 ]
lea r8d [ rdx + 0x68 ]
call [ rw-data ]
xor edx edx
lea rcx [ rsp + 0x50 ]
lea r8d [ rdx + 0x18 ]
mov [ rsp + 0x70 ] 0x68
mov [ rsp + 0xac ] 0x80
call [ rw-data ]
lea rax [ rsp + 0x50 ]
xor r9d r9d
mov [ rsp + 0x48 ] rax
lea rax [ rsp + 0x70 ]
xor r8d r8d
mov [ rsp + 0x40 ] rax
xor eax eax
mov rdx rbx
mov [ rsp + 0x38 ] rax
mov [ rsp + 0x30 ] rax
xor ecx ecx
mov [ rsp + 0x28 ] 0x8000000
mov [ rsp + 0x20 ] eax
call [ CreateProcessW@IAT ]
add rsp 0xe0
pop rbx
retn
sub_140002040
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x20 ] rsi
mov [ rsp + 0x18 ] r8d
push rdi
sub rsp 0x40
mov rdi rcx
mov rbp rdx
lea rcx [ rw-data ]
xor edx edx
mov r8d 0x208
mov rsi r9
call [ rw-data ]
lea rcx [ rw-data ]
mov rdx rdi
mov [ rsp + 0x60 ] 0x0
call [ rw-data ]
lea rdx [ rw-data ]
mov rcx rdi
call [ rw-data ]
mov rcx rdi
call [ rw-data ]
cmp eax 0xffffffff
je r-xdata
mov [ rsp + 0x30 ] 0x0
xor r9d r9d
xor r8d r8d
mov edx 0x40000000
mov rcx rdi
mov [ rsp + 0x28 ] 0x2
mov [ rsp + 0x20 ] 0x2
call [ rw-data ]
mov rbx rax
cmp rax 0xffffffffffffffff
je r-xdata
lea rdx [ rw-data ]
lea rcx [ rw-data ]
call [ rw-data ]
mov rcx [ rw-data ]
lea rdx [ rw-data ]
call [ GetProcAddress@IAT ]
lea rdx [ rw-data ]
mov r8d 0x1
mov rcx rdi
call rax
call [ GetLastError@IAT ]
mov rcx [ rw-data ]
lea rdx [ rw-data ]
call [ GetProcAddress@IAT ]
lea r9 [ rsp + 0x60 ]
mov r8d 0x17600
mov rdx rbp
mov rcx rbx
mov [ rsp + 0x20 ] 0x0
call rax
mov eax [ rsi + 0x4 ]
or eax [ rsi ]
je r-xdata
mov rcx rbx
call [ rw-data ]
lea rdx [ rw-data ]
mov rcx rdi
call sub_140001580
lea rcx [ rw-data ]
xor edx edx
mov r8d 0x208
mov ebx eax
call [ rw-data ]
lea r8 [ rw-data ]
lea rcx [ rw-data ]
mov r9 rdi
mov edx 0x104
call [ rw-data ]
mov eax ebx
jmp r-xdata
mov rcx [ rw-data ]
lea rdx [ rw-data ]
call [ GetProcAddress@IAT ]
mov r9 rsi
xor r8d r8d
mov rdx rsi
mov rcx rbx
call rax
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x40
pop rdi
retn
sub_1400021f0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push rbp
lea rbp [ rsp - 0x380 ]
sub rsp 0x480
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x370 ] rax
lea rcx [ rsp + 0x50 ]
xor edx edx
mov r8d 0x208
call [ rw-data ]
mov rcx [ rw-data ]
lea rdx [ rw-data ]
call [ GetProcAddress@IAT ]
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rcx [ rsp + 0x50 ]
mov edx 0x104
mov [ rw-data ] rax
call [ rw-data ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x50 ]
call [ rw-data ]
xor esi esi
lea rcx [ rsp + 0x50 ]
mov [ rsp + 0x30 ] rsi
lea r8d [ rsi + 0x3 ]
xor r9d r9d
mov edx 0x80000000
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x20 ] 0x3
call [ rw-data ]
mov rbx rax
cmp rax 0xffffffffffffffff
je r-xdata
lea rcx [ rbp + 0x160 ]
xor edx edx
mov r8d 0x208
call [ rw-data ]
mov rcx [ rw-data ]
lea rdx [ rw-data ]
call [ GetProcAddress@IAT ]
mov rcx [ rw-data ]
lea rdx [ rbp + 0x160 ]
mov r8d 0x104
call rax
xor r9d r9d
mov [ rsp + 0x30 ] rsi
lea rcx [ rbp + 0x160 ]
lea r8d [ r9 + 0x3 ]
mov edx 0x80000000
mov [ rsp + 0x28 ] 0x80
mov [ rsp + 0x20 ] 0x3
call [ rw-data ]
mov rdi rax
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx [ rw-data ]
lea rdx [ rw-data ]
call [ GetProcAddress@IAT ]
lea rdx [ rsp + 0x48 ]
xor r9d r9d
xor r8d r8d
mov rcx rbx
call rax
mov rcx rbx
call [ rw-data ]
xor eax eax
mov rcx [ rw-data ]
lea rdx [ rw-data ]
call [ GetProcAddress@IAT ]
xor edx edx
mov rcx rdi
call rax
mov rcx [ rw-data ]
lea rdx [ rw-data ]
lea ebx [ rax - 0x17600 ]
call [ GetProcAddress@IAT ]
xor r9d r9d
xor r8d r8d
mov edx ebx
mov rcx rdi
call rax
mov rcx [ rw-data ]
mov edx 0x8
mov r8d 0x17600
call [ rw-data ]
mov rbx rax
test rax rax
je r-xdata
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov [ rsp + 0x40 ] esi
call [ GetProcAddress@IAT ]
lea r9 [ rsp + 0x40 ]
mov r8d 0x17600
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x20 ] rsi
call rax
mov rcx rdi
call [ rw-data ]
mov edx 0x17600
mov rcx rbx
call sub_1400018f0
mov rcx [ rw-data ]
lea rdx [ rw-data ]
call [ GetProcAddress@IAT ]
lea rcx [ rw-data ]
mov rdi rax
call [ LoadLibraryA@IAT ]
lea rdx [ rw-data ]
mov rcx rax
call [ GetProcAddress@IAT ]
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rcx [ rsp + 0x50 ]
xor edx edx
mov r8d 0x208
mov [ rw-data ] rax
call [ rw-data ]
lea rax [ rsp + 0x50 ]
xor r9d r9d
xor r8d r8d
mov edx 0x802b
xor ecx ecx
mov [ rsp + 0x20 ] rax
call [ rw-data ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x50 ]
call [ rw-data ]
lea rcx [ rsp + 0x50 ]
call [ rw-data ]
cmp eax 0xffffffff
jne r-xdata
lea rdx [ rw-data ]
lea rcx [ rsp + 0x50 ]
call [ rw-data ]
lea rcx [ rsp + 0x50 ]
call [ rw-data ]
cmp eax 0xffffffff
jne r-xdata
lea rcx [ rsp + 0x50 ]
xor edx edx
call rdi
test eax eax
je r-xdata
lea r9 [ rsp + 0x48 ]
lea rcx [ rsp + 0x50 ]
mov rdx rbx
call sub_140002040
xor edx edx
test eax eax
jne r-xdata
lea rcx [ rsp + 0x50 ]
xor edx edx
call rdi
lea rcx [ rsp + 0x50 ]
mov r8d 0x208
call [ rw-data ]
lea rax [ rsp + 0x50 ]
xor r9d r9d
xor r8d r8d
mov edx 0x801c
xor ecx ecx
mov [ rsp + 0x20 ] rax
call [ rw-data ]
lea rdx [ rw-data ]
lea rcx [ rsp + 0x50 ]
call [ rw-data ]
lea rcx [ rsp + 0x50 ]
call [ rw-data ]
cmp eax 0xffffffff
jne r-xdata
mov rcx [ rw-data ]
mov r8 rbx
call [ rw-data ]
mov eax 0x1
jmp r-xdata
lea r9 [ rsp + 0x48 ]
lea rcx [ rsp + 0x50 ]
mov rdx rbx
call sub_140002040
test eax eax
jne r-xdata
lea rcx [ rsp + 0x50 ]
xor edx edx
call rdi
mov rcx [ rbp + 0x370 ]
xor rcx rsp
call sub_1400029f0
lea r11 [ rsp + 0x480 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rdi [ r11 + 0x20 ]
mov rsp r11
pop rbp
retn
xor edx edx
jmp r-xdata
sub_1400025e0
sub rsp 0x28
lea rcx [ rw-data ]
mov edx 0x53c
call sub_1400018f0
lea rcx [ rw-data ]
call [ LoadLibraryA@IAT ]
lea rdx [ rw-data ]
mov rcx rax
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
call rax
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov [ rw-data ] eax
movzx eax al
mov [ rw-data ] eax
movzx eax [ rw-data ]
mov [ rw-data ] eax
call [ GetProcAddress@IAT ]
call rax
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rcx [ rw-data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ rw-data ]
mov rcx rax
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rcx [ rw-data ]
mov [ rw-data ] rax
call [ LoadLibraryA@IAT ]
lea rdx [ rw-data ]
mov rcx rax
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov [ rw-data ] rax
xor eax eax
add rsp 0x28
retn
sub_140002790
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x410
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x400 ] rax
mov [ rw-data ] rcx
lea rdx [ r--data ]
mov rcx r8
mov rbx r8
call [ lstrcmpiA@IAT ]
test eax eax
je r-xdata
lea rdx [ r--data ]
mov rcx rbx
call [ lstrcmpiA@IAT ]
test eax eax
jne r-xdata
lea rdx [ r--data ]
mov rcx rbx
call [ lstrcmpiA@IAT ]
test eax eax
je r-xdata
lea rdx [ rsp + 0xe0 ]
mov r8d 0x104
xor ecx ecx
call [ GetModuleFileNameA@IAT ]
lea rcx [ rsp + 0xe0 ]
call [ lstrlenA@IAT ]
mov ecx eax
mov eax 0x3020
mov [ rsp + rcx + 0xe0 ] ax
xor eax eax
mov [ rsp + rcx + 0xe2 ] al
call sub_1400025e0
call sub_140001e40
call sub_1400025e0
call sub_1400021f0
xor edi edi
mov [ rsp + 0x38 ] rdi
lea rax [ rsp + 0x1f0 ]
mov [ rsp + 0x30 ] rdi
lea r8 [ rw-data ]
or r9d 0xffffffff
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov [ rsp + 0x38 ] rdi
mov [ rsp + 0x30 ] rdi
mov ebx eax
lea rax [ rsp + 0x1f0 ]
lea r8 [ rw-data ]
or r9d 0xffffffff
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
lea rdx [ rsp + 0xe0 ]
mov r8d 0x104
xor ecx ecx
call [ GetModuleFileNameA@IAT ]
lea rcx [ rsp + 0xe0 ]
call [ lstrlenA@IAT ]
lea rdx [ rsp + 0xe1 ]
mov r8d ebx
mov ecx eax
mov [ rsp + rcx + 0xe0 ] 0x20
add rcx rdx
lea rdx [ rsp + 0x1f0 ]
call sub_1400079c0
jmp r-xdata
lea rax [ rsp + 0x1f0 ]
xor edi edi
or r9d 0xffffffff
mov r8 rbx
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rax
call [ MultiByteToWideChar@IAT ]
mov [ rsp + 0x28 ] eax
lea rax [ rsp + 0x1f0 ]
or r9d 0xffffffff
mov r8 rbx
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rax
call [ MultiByteToWideChar@IAT ]
lea r8d [ rdi + 0x68 ]
lea rcx [ rsp + 0x70 ]
xor edx edx
call sub_140007ec0
lea rax [ rsp + 0x50 ]
lea rdx [ rsp + 0x1f0 ]
mov [ rsp + 0x48 ] rax
lea rax [ rsp + 0x70 ]
xor r9d r9d
mov [ rsp + 0x40 ] rax
mov [ rsp + 0x38 ] rdi
mov [ rsp + 0x30 ] rdi
xor r8d r8d
xor ecx ecx
mov [ rsp + 0x28 ] 0x8000000
mov [ rsp + 0x20 ] edi
call [ CreateProcessW@IAT ]
jmp r-xdata
lea rcx [ rsp + 0xe0 ]
mov edx 0x1
call [ WinExec@IAT ]
xor eax eax
mov rcx [ rsp + 0x400 ]
xor rcx rsp
call sub_1400029f0
mov rbx [ rsp + 0x420 ]
add rsp 0x410
pop rdi
retn
sub_140002a10
push rbx
sub rsp 0x20
mov rbx rcx
call [ IsDebuggerPresent@IAT ]
mov ecx 0x1
mov [ rw-data ] eax
call sub_140002cfc
mov rcx rbx
call sub_14000327c
cmp [ rw-data ] 0x0
jne r-xdata
mov ecx 0xc0000409
add rsp 0x20
pop rbx
jmp sub_14000325c
mov ecx 0x1
call sub_140002cfc
sub_140002a5c
mov [ rsp + 0x8 ] rcx
sub rsp 0x38
mov ecx 0x17
call IsProcessorFeaturePresent
test eax eax
je r-xdata
lea rcx [ rw-data ]
call sub_140002d74
mov rax [ rsp + 0x38 ]
mov [ rw-data ] rax
lea rax [ rsp + 0x38 ]
add rax 0x8
mov [ rw-data ] rax
mov rax [ rw-data ]
mov [ rw-data ] rax
mov rax [ rsp + 0x40 ]
mov [ rw-data ] rax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov [ rw-data ] 0x1
mov eax 0x8
imul rax rax 0x0
lea rcx [ rw-data ]
mov [ rcx + rax ] 0x2
mov eax 0x8
imul rax rax 0x0
mov rcx [ rw-data ]
mov [ rsp + rax + 0x20 ] rcx
mov eax 0x8
imul rax rax 0x1
mov rcx [ rw-data ]
mov [ rsp + rax + 0x20 ] rcx
lea rcx [ r--data ]
call sub_140002a10
add rsp 0x38
retn
mov ecx 0x2
int 0x29
sub_140002b44
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
call sub_140002e58
movzx esi ax
mov ecx 0x2
call sub_1400045f4
mov eax 0x5a4d
lea rdi [ __dos_header ]
cmp [ __dos_header ] ax
je r-xdata
movsxd rax [ r--data ]
add rax rdi
cmp [ rax ] 0x4550
jne r-xdata
xor ebx ebx
jmp r-xdata
mov ecx 0x20b
cmp [ rax + 0x18 ] cx
jne r-xdata
mov [ rsp + 0x40 ] ebx
call sub_140003eb8
test eax eax
jne r-xdata
xor ebx ebx
cmp [ rax + 0x84 ] 0xe
jbe r-xdata
call sub_140003758
test eax eax
jne r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
cmp [ rax + 0xf8 ] ebx
setne bl
call sub_1400046e8
nop
call sub_140003ed8
test eax eax
jns r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov ecx 0x1c
call sub_140003c48
mov ecx 0xff
call sub_140003840
call sub_140003bd4
call [ GetCommandLineA@IAT ]
mov [ rw-data ] rax
call sub_140004758
mov [ rw-data ] rax
call sub_140004204
test eax eax
jns r-xdata
mov ecx 0x1b
call sub_140002cd0
mov ecx 0x10
call sub_140003c48
mov ecx 0xff
call sub_140003840
call sub_140003bd4
call sub_1400044c0
test eax eax
jns r-xdata
mov ecx 0x8
call sub_140003858
mov ecx 0x1
call sub_1400038a0
test eax eax
je r-xdata
mov ecx 0x9
call sub_140003858
call sub_14000484c
movzx r9d si
mov r8 rax
xor edx edx
mov rcx rdi
call sub_140002790
mov edi eax
mov [ rsp + 0x20 ] eax
test ebx ebx
jne r-xdata
mov ecx eax
call sub_140003858
call sub_140003890
jmp r-xdata
mov ecx eax
call sub_140003bc8
mov eax edi
mov rbx [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_140002ca4
mov edi eax
cmp [ rsp + 0x40 ] 0x0
jne r-xdata
call sub_140003880
nop
mov eax edi
mov rbx [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov ecx eax
call sub_140003950
int3
sub_140002d04
mov [ rsp + 0x20 ] rbx
push rdi
sub rsp 0x40
mov rbx rcx
call [ RtlCaptureContext@IAT ]
mov rdi [ rbx + 0xf8 ]
lea rdx [ rsp + 0x50 ]
xor r8d r8d
mov rcx rdi
call [ RtlLookupFunctionEntry@IAT ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x68 ]
add rsp 0x40
pop rdi
retn
and [ rsp + 0x38 ] 0x0
mov rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x58 ]
mov [ rsp + 0x30 ] rcx
lea rcx [ rsp + 0x60 ]
mov r9 rax
mov [ rsp + 0x28 ] rcx
xor ecx ecx
mov r8 rdi
mov [ rsp + 0x20 ] rbx
call [ RtlVirtualUnwind@IAT ]
sub_140002d74
push rbx
push rsi
push rdi
sub rsp 0x40
mov rbx rcx
call [ RtlCaptureContext@IAT ]
mov rsi [ rbx + 0xf8 ]
xor edi edi
add rsp 0x40
pop rdi
pop rsi
pop rbx
retn
and [ rsp + 0x38 ] 0x0
mov rdx [ rsp + 0x60 ]
lea rcx [ rsp + 0x68 ]
mov [ rsp + 0x30 ] rcx
lea rcx [ rsp + 0x70 ]
mov r9 rax
mov [ rsp + 0x28 ] rcx
xor ecx ecx
mov r8 rsi
mov [ rsp + 0x20 ] rbx
call [ RtlVirtualUnwind@IAT ]
inc edi
cmp edi 0x2
jl r-xdata
lea rdx [ rsp + 0x60 ]
xor r8d r8d
mov rcx rsi
call [ RtlLookupFunctionEntry@IAT ]
test rax rax
je r-xdata
sub_140002e84
push rbx
sub rsp 0x20
mov eax [ rw-data ]
xor ebx ebx
test eax eax
jns r-xdata
setg bl
mov eax ebx
add rsp 0x20
pop rbx
retn
mov rax [ rw-data ]
mov [ rsp + 0x30 ] ebx
xor rax [ rw-data ]
je r-xdata
mov eax ebx
lea rcx [ rsp + 0x30 ]
xor edx edx
call rax
cmp eax 0x7a
lea eax [ rbx + 0x1 ]
je r-xdata
mov [ rw-data ] eax
test eax eax
sub_140002ed0
push rbx
sub rsp 0x20
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
lea rdx [ r--data ]
mov rcx rax
mov rbx rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
xor rax [ rw-data ]
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
xor rax [ rw-data ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
xor rax [ rw-data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
xor rax [ rw-data ]
mov [ rw-data ] rax
add rsp 0x20
pop rbx
retn
sub_14000329c
sub rsp 0x28
mov rax [ rcx ]
cmp [ rax ] 0xe06d7363
jne r-xdata
xor eax eax
add rsp 0x28
retn
cmp [ rax + 0x18 ] 0x4
jne r-xdata
mov ecx [ rax + 0x20 ]
lea eax [ rcx - 0x19930520 ]
cmp eax 0x2
jbe r-xdata
call sub_140004aa8
cmp ecx 0x1994000
je r-xdata
sub_1400032ec
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rsi rdx
mov edi ecx
call sub_140003610
xor r9d r9d
mov rbx rax
test rax rax
je r-xdata
xor eax eax
mov rdx [ rax + 0xa0 ]
mov rcx rdx
lea rax [ rdx + 0xc0 ]
cmp rcx rax
jae r-xdata
lea rax [ rdx + 0xc0 ]
add rcx 0x10
cmp rcx rax
jb r-xdata
mov rcx r9
cmp [ rcx ] edi
je r-xdata
cmp [ rcx ] edi
je r-xdata
mov r8 [ rcx + 0x8 ]
test r8 r8
je r-xdata
test rcx rcx
je r-xdata
cmp r8 0x5
jne r-xdata
cmp r8 0x1
jne r-xdata
mov [ rcx + 0x8 ] r9
lea eax [ r8 - 0x4 ]
jmp r-xdata
mov rbp [ rbx + 0xa8 ]
mov [ rbx + 0xa8 ] rsi
cmp [ rcx + 0x4 ] 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov [ rcx + 0x8 ] r9
mov ecx [ rcx + 0x4 ]
call r8
mov edx 0x30
mov rax [ rbx + 0xa0 ]
add rdx 0x10
mov [ rdx + rax - 0x8 ] r9
cmp rdx 0xc0
jl r-xdata
cmp [ rcx ] 0xc000008e
mov edi [ rbx + 0xb0 ]
jne r-xdata
cmp [ rcx ] 0xc0000090
jne r-xdata
mov [ rbx + 0xb0 ] 0x83
jmp r-xdata
cmp [ rcx ] 0xc0000091
jne r-xdata
mov [ rbx + 0xb0 ] 0x81
jmp r-xdata
mov edx [ rbx + 0xb0 ]
mov ecx 0x8
call r8
mov [ rbx + 0xb0 ] edi
jmp r-xdata
cmp [ rcx ] 0xc0000093
jne r-xdata
mov [ rbx + 0xb0 ] 0x84
jmp r-xdata
mov [ rbx + 0xa8 ] rbp
jmp r-xdata
cmp [ rcx ] 0xc000008d
jne r-xdata
mov [ rbx + 0xb0 ] 0x85
jmp r-xdata
cmp [ rcx ] 0xc000008f
jne r-xdata
mov [ rbx + 0xb0 ] 0x82
jmp r-xdata
cmp [ rcx ] 0xc0000092
jne r-xdata
mov [ rbx + 0xb0 ] 0x86
jmp r-xdata
cmp [ rcx ] 0xc00002b5
jne r-xdata
mov [ rbx + 0xb0 ] 0x8a
jmp r-xdata
cmp [ rcx ] 0xc00002b4
jne r-xdata
mov [ rbx + 0xb0 ] 0x8d
jmp r-xdata
mov [ rbx + 0xb0 ] 0x8e
sub_1400034b8
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x38 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x48 ]
test rcx rcx
je r-xdata
call sub_140004ce8
mov rcx [ rbx + 0x58 ]
test rcx rcx
je r-xdata
call sub_140004ce8
mov rcx [ rbx + 0x68 ]
test rcx rcx
je r-xdata
call sub_140004ce8
mov rcx [ rbx + 0x70 ]
test rcx rcx
je r-xdata
call sub_140004ce8
mov rcx [ rbx + 0x78 ]
test rcx rcx
je r-xdata
call sub_140004ce8
mov rcx [ rbx + 0x80 ]
test rcx rcx
je r-xdata
call sub_140004ce8
mov rcx [ rbx + 0xa0 ]
lea rax [ r--data ]
cmp rcx rax
je r-xdata
call sub_140004ce8
mov edi 0xd
mov ecx edi
call sub_140004ae8
nop
mov rcx [ rbx + 0xb8 ]
mov [ rsp + 0x30 ] rcx
test rcx rcx
je r-xdata
call sub_140004ce8
mov ecx edi
call sub_140004cd0
mov ecx 0xc
call sub_140004ae8
nop
mov rdi [ rbx + 0xc0 ]
test rdi rdi
je r-xdata
[ rcx ]
jne r-xdata
mov ecx 0xc
call sub_140004cd0
mov rcx rbx
call sub_140004ce8
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
mov rcx rdi
call sub_1400050cc
cmp rdi [ rw-data ]
je r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
lea rax [ rw-data ]
cmp rdi rax
je r-xdata
call sub_140004ce8
nop
cmp [ rdi ] 0x0
jne r-xdata
mov rcx rdi
call sub_140004f34
nop
sub_140003610
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
call [ GetLastError@IAT ]
mov ecx [ rw-data ]
mov edi eax
call sub_140002e20
mov rbx rax
test rax rax
jne r-xdata
mov ecx edi
call [ SetLastError@IAT ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rax + 0x1 ]
mov edx 0x478
call sub_140004d28
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call sub_140002e3c
mov rcx rbx
test eax eax
je r-xdata
call sub_140004ce8
xor ebx ebx
xor edx edx
call sub_140003694
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
jmp r-xdata
sub_140003694
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx + 0xa0 ] rax
and [ rcx + 0x10 ] 0x0
mov [ rcx + 0x1c ] 0x1
mov [ rcx + 0xc8 ] 0x1
mov eax 0x43
mov [ rcx + 0x164 ] ax
mov [ rcx + 0x26a ] ax
lea rax [ rw-data ]
mov [ rcx + 0xb8 ] rax
and [ rcx + 0x470 ] 0x0
mov ecx 0xd
call sub_140004ae8
nop
mov rax [ rbx + 0xb8 ]
[ rax ]
mov ecx 0xd
call sub_140004cd0
mov ecx 0xc
call sub_140004ae8
nop
mov [ rbx + 0xc0 ] rdi
test rdi rdi
jne r-xdata
mov rcx [ rbx + 0xc0 ]
call sub_140004ea8
nop
mov ecx 0xc
call sub_140004cd0
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rw-data ]
mov [ rbx + 0xc0 ] rax
sub_140003758
push rbx
sub rsp 0x20
call sub_14000395c
call sub_140004c70
test eax eax
je r-xdata
call sub_1400037d8
xor eax eax
lea rcx [ sub_1400034b8 ]
call sub_140002de8
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
mov edx 0x478
mov ecx 0x1
call sub_140004d28
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call sub_140002e3c
test eax eax
je r-xdata
xor edx edx
mov rcx rbx
call sub_140003694
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_1400037fc
push rbx
sub rsp 0x20
mov ebx ecx
lea r8 [ rsp + 0x38 ]
lea rdx [ r--data ]
xor ecx ecx
call [ GetModuleHandleExW@IAT ]
test eax eax
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx [ rsp + 0x38 ]
lea rdx [ r--data ]
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov ecx ebx
call rax
sub_1400038a0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ rw-data ] 0x0
mov ebx ecx
je r-xdata
call sub_1400060b8
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_1400039dc
test eax eax
jne r-xdata
lea rcx [ rw-data ]
call sub_140005ed0
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rcx [ sub_140004720 ]
call sub_1400060a0
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
mov ecx ebx
call [ rw-data ]
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
add rbx 0x8
call rax
xor eax eax
lea rcx [ rw-data ]
call sub_140005ed0
test eax eax
je r-xdata
xor r8d r8d
xor ecx ecx
lea edx [ r8 + 0x2 ]
call [ rw-data ]
sub_14000395c
push rbx
sub rsp 0x20
xor ecx ecx
call [ EncodePointer@IAT ]
mov rcx rax
mov rbx rax
call sub_140006128
mov rcx rbx
call sub_140005ccc
mov rcx rbx
call sub_140006130
mov rcx rbx
call sub_140006138
mov rcx rbx
call sub_140006150
mov rcx rbx
call sub_140004ac8
add rsp 0x20
pop rbx
jmp sub_140002ed0
sub_1400039a8
cmp rcx rdx
jae r-xdata
retn
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rax
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_1400039dc
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
xor eax eax
mov rdi rdx
mov rbx rcx
cmp rcx rdx
jae r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test eax eax
jne r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rcx
sub_140003a30
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] r8d
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r14d r8d
mov ebx edx
mov r13d ecx
mov ecx 0x8
call sub_140004ae8
nop
cmp [ rw-data ] 0x1
je r-xdata
test r14d r14d
je r-xdata
mov [ rw-data ] 0x1
mov [ rw-data ] r14b
test ebx ebx
jne r-xdata
mov [ rw-data ] 0x1
mov ecx 0x8
call sub_140004cd0
mov ecx r13d
call sub_1400037fc
mov ecx r13d
call [ ExitProcess@IAT ]
mov ecx 0x8
call sub_140004cd0
test r14d r14d
jne r-xdata
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_1400039a8
nop
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rsi rax
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_1400039a8
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rdi rax
mov [ rsp + 0x20 ] rax
mov r12 rsi
mov [ rsp + 0x28 ] rsi
mov r15 rax
mov [ rsp + 0x38 ] rax
xor ecx ecx
call [ EncodePointer@IAT ]
cmp [ rdi ] rax
jne r-xdata
cmp rdi rsi
jb r-xdata
jmp r-xdata
mov rcx [ rdi ]
call [ DecodePointer@IAT ]
mov rbx rax
xor ecx ecx
call [ EncodePointer@IAT ]
mov [ rdi ] rax
call rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rbx rax
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
cmp r12 rbx
jne r-xdata
sub rdi 0x8
mov [ rsp + 0x20 ] rdi
cmp rdi rsi
jb r-xdata
mov r12 rbx
mov [ rsp + 0x28 ] rbx
mov rsi rbx
mov [ rsp + 0x30 ] rbx
mov r15 rax
mov [ rsp + 0x38 ] rax
mov rdi rax
mov [ rsp + 0x20 ] rax
jmp r-xdata
cmp r15 rax
je r-xdata
sub_140003bd4
sub rsp 0x28
mov ecx 0x3
call sub_1400045fc
cmp eax 0x1
je r-xdata
mov ecx 0xfc
call sub_140003c48
mov ecx 0xff
call sub_140003c48
mov ecx 0x3
call sub_1400045fc
test eax eax
jne r-xdata
add rsp 0x28
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_140003c18
lea r9 [ r--data ]
xor edx edx
mov r8 r9
movsxd rax edx
add rax rax
mov rax [ r9 + rax * 8 + 0x8 ]
retn
inc edx
add r8 0x10
movsxd rax edx
cmp rax 0x17
jb r-xdata
cmp ecx [ r8 ]
je r-xdata
xor eax eax
retn
sub_140003c48
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r14
push r15
sub rsp 0x250
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x240 ] rax
mov edi ecx
call sub_140003c18
xor esi esi
mov rbx rax
test rax rax
je r-xdata
mov rcx [ rsp + 0x240 ]
xor rcx rsp
call sub_1400029f0
lea r11 [ rsp + 0x250 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rsp r11
pop r15
pop r14
pop rdi
retn
lea ecx [ rsi + 0x3 ]
call sub_1400045fc
cmp eax 0x1
je r-xdata
mov ecx 0xfffffff4
call [ GetStdHandle@IAT ]
mov rdi rax
lea rcx [ rax - 0x1 ]
cmp rcx 0xfffffffffffffffd
ja r-xdata
lea ecx [ rsi + 0x3 ]
call sub_1400045fc
test eax eax
jne r-xdata
mov r8d esi
lea rdx [ rsp + 0x40 ]
cmp edi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x233 ] sil
call sub_1400063b0
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
mov rcx rdi
mov r8 rax
mov [ rsp + 0x20 ] rsi
call [ WriteFile@IAT ]
inc r8d
inc rdx
add rbx 0x2
movsxd rax r8d
cmp rax 0x1f4
jb r-xdata
lea rbp [ rw-data ]
mov r15d 0x314
lea r8 [ r--data ]
mov rcx rbp
mov edx r15d
call sub_1400064e0
xor ecx ecx
test eax eax
jne r-xdata
mov cl [ rbx ]
mov [ rdx ] cl
cmp [ rbx ] si
je r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
mov [ rsp + 0x20 ] rsi
call sub_140005d5c
int3
lea r14 [ rw-data ]
mov r8d 0x104
mov [ rw-data ] si
mov rdx r14
call [ GetModuleFileNameW@IAT ]
lea edi [ r15 - 0x19 ]
test eax eax
jne r-xdata
mov rcx r14
call sub_14000654c
inc rax
cmp rax 0x3c
jbe r-xdata
lea r8 [ r--data ]
mov edx edi
mov rcx r14
call sub_1400064e0
test eax eax
jne r-xdata
lea r8 [ r--data ]
mov rdx r15
mov rcx rbp
call sub_140006458
test eax eax
jne r-xdata
mov rcx r14
call sub_14000654c
lea rcx [ rbp - 0x44 ]
lea r8 [ r--data ]
lea rcx [ rcx + rax * 2 ]
mov r9d 0x3
mov rax rcx
sub rax r14
sar rax 0x1
sub rdi rax
mov rdx rdi
call sub_140006568
test eax eax
jne r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_140005d5c
int3
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_140005d5c
int3
mov r8 rbx
mov rdx r15
mov rcx rbp
call sub_140006458
test eax eax
jne r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_140005d5c
int3
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_140005d5c
int3
lea rdx [ r--data ]
mov r8d 0x12010
mov rcx rbp
call sub_140006634
jmp r-xdata
sub_140003ed8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r13
push r14
push r15
sub rsp 0xc0
mov [ rsp + 0x48 ] rsp
mov ecx 0xb
call sub_140004ae8
nop
mov edi 0x58
mov edx edi
lea r13d [ rdi - 0x38 ]
mov ecx r13d
call sub_140004d28
mov rcx rax
mov [ rsp + 0x28 ] rax
xor r12d r12d
test rax rax
jne r-xdata
mov [ rw-data ] rax
mov [ rw-data ] r13d
lea rdx [ r-xdata ]
mov rcx rsp
call sub_140006940
nop
nop
or eax 0xffffffff
jmp r-xdata
lea rcx [ rsp + 0x50 ]
call [ GetStartupInfoW@IAT ]
cmp [ rsp + 0x92 ] r12w
je r-xdata
mov [ rcx + 0x8 ] 0xa00
or [ rcx ] 0xffffffffffffffff
mov [ rcx + 0xc ] r12d
and [ rcx + 0x38 ] 0x80
mov al [ rcx + 0x38 ]
and al 0x7f
mov [ rcx + 0x38 ] al
mov [ rcx + 0x39 ] 0xa0a
mov [ rcx + 0x50 ] r12d
mov [ rcx + 0x4c ] r12b
add rcx rdi
mov [ rsp + 0x28 ] rcx
mov rax [ rw-data ]
jmp r-xdata
lea r11 [ rsp + 0xc0 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov r12 [ r11 + 0x38 ]
mov rsp r11
pop r15
pop r14
pop r13
retn
mov edi r12d
mov [ rsp + 0x20 ] r12d
mov r15 0xfffffffffffffffe
mov rax [ rsp + 0x98 ]
test rax rax
je r-xdata
add rax 0xb00
cmp rcx rax
jae r-xdata
mov ecx 0xb
call sub_140004cd0
xor eax eax
movsxd r14 edi
mov rbx r14
imul rbx rbx 0x58
add rbx [ rw-data ]
mov [ rsp + 0x28 ] rbx
mov rax [ rbx ]
add rax 0x2
cmp rax 0x1
jbe r-xdata
lea r14 [ rax + 0x4 ]
mov [ rsp + 0x38 ] r14
movsxd rsi [ rax ]
add rsi r14
mov [ rsp + 0x40 ] rsi
mov r15d 0x800
cmp [ rax ] r15d
cmovl r15d [ rax ]
mov ebx 0x1
mov [ rbx + 0x8 ] 0x81
lea eax [ rdi - 0x1 ]
neg eax
sbb ecx ecx
add ecx 0xfffffff5
mov eax 0xfffffff6
test edi edi
cmove ecx eax
call [ GetStdHandle@IAT ]
mov rsi rax
lea rcx [ rax + 0x1 ]
cmp rcx 0x1
jbe r-xdata
movsx eax [ rbx + 0x8 ]
bts eax 0x7
mov [ rbx + 0x8 ] al
jmp r-xdata
mov edi r12d
mov [ rsp + 0x20 ] r12d
lea r13 [ rw-data ]
mov rdx rdi
mov rcx r13
call sub_140004d28
mov rcx rax
mov [ rsp + 0x28 ] rax
test rax rax
jne r-xdata
movsx eax [ rbx + 0x8 ]
or eax 0x40
mov [ rbx + 0x8 ] al
mov [ rbx ] r15
mov rax [ rw-data ]
test rax rax
je r-xdata
mov rcx rax
call [ GetFileType@IAT ]
test eax eax
je r-xdata
inc edi
mov [ rsp + 0x20 ] edi
jmp r-xdata
mov rcx [ rsi ]
lea rax [ rcx + 0x2 ]
cmp rax 0x1
jbe r-xdata
movsxd rdx ebx
lea r8 [ rw-data ]
mov [ r8 + rdx * 8 ] rax
add [ rw-data ] r13d
mov r15d [ rw-data ]
jmp r-xdata
mov rax [ rax + r14 * 8 ]
mov [ rax + 0x1c ] r15d
mov [ rbx ] rsi
movzx eax al
cmp eax 0x2
jne r-xdata
cmp edi 0x3
jge r-xdata
inc edi
mov [ rsp + 0x20 ] edi
inc r14
mov [ rsp + 0x38 ] r14
add rsi 0x8
mov [ rsp + 0x40 ] rsi
jmp r-xdata
test [ r14 ] 0x1
je r-xdata
inc ebx
jmp r-xdata
mov [ rcx + 0x8 ] 0xa00
or [ rcx ] 0xffffffffffffffff
mov [ rcx + 0xc ] r12d
and [ rcx + 0x38 ] 0x80
mov [ rcx + 0x39 ] 0xa0a
mov [ rcx + 0x50 ] r12d
mov [ rcx + 0x4c ] r12b
add rcx rdi
mov [ rsp + 0x28 ] rcx
jmp r-xdata
cmp eax 0x3
jne r-xdata
movsx eax [ rbx + 0x8 ]
or eax 0x40
jmp r-xdata
cmp edi r15d
jge r-xdata
test [ r14 ] 0x8
jne r-xdata
mov [ rsp + 0x30 ] ebx
cmp [ rw-data ] r15d
jge r-xdata
mov rax [ r8 + rdx * 8 ]
add rax 0xb00
cmp rcx rax
jae r-xdata
lea rcx [ rbx + 0x10 ]
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
inc [ rbx + 0xc ]
jmp r-xdata
movsx eax [ rbx + 0x8 ]
or eax 0x8
mov [ rbx + 0x8 ] al
movsxd rbx edi
mov rax rbx
sar rax 0x5
and ebx 0x1f
imul rbx rbx 0x58
add rbx [ r13 + rax * 8 ]
mov [ rsp + 0x28 ] rbx
mov rax [ rsi ]
mov [ rbx ] rax
mov al [ r14 ]
mov [ rbx + 0x8 ] al
lea rcx [ rbx + 0x10 ]
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
inc [ rbx + 0xc ]
call [ GetFileType@IAT ]
test eax eax
je r-xdata
sub_140004204
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x30
cmp [ rw-data ] 0x0
jne r-xdata
lea rdi [ rw-data ]
mov r8d 0x104
xor ecx ecx
mov rdx rdi
mov [ rw-data ] 0x0
call [ GetModuleFileNameA@IAT ]
mov rbx [ rw-data ]
mov [ rw-data ] rdi
test rbx rbx
je r-xdata
call sub_14000524c
mov rbx rdi
cmp [ rbx ] 0x0
jne r-xdata
or eax 0xffffffff
movsxd rcx [ rsp + 0x48 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
xor r8d r8d
xor edx edx
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_1400042f8
movsxd rsi [ rsp + 0x40 ]
mov rcx 0x1fffffffffffffff
cmp rsi rcx
jae r-xdata
lea rdx [ rcx + rsi * 8 ]
cmp rdx rcx
jb r-xdata
mov rcx rdx
call sub_140004da8
mov rdi rax
test rax rax
je r-xdata
lea r8 [ rax + rsi * 8 ]
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
mov rdx rdi
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_1400042f8
mov eax [ rsp + 0x40 ]
mov [ rw-data ] rdi
dec eax
mov [ rw-data ] eax
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
sub_1400042f8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r14
push r15
sub rsp 0x20
mov r14 [ rsp + 0x60 ]
mov r12 r9
mov rdi r8
and [ r14 ] 0x0
mov r15 rdx
mov rbx rcx
mov [ r9 ] 0x1
test rdx rdx
je r-xdata
xor ebp ebp
mov [ rdx ] r8
add r15 0x8
inc [ r14 ]
test rdi rdi
je r-xdata
xor eax eax
test ebp ebp
mov sil 0x22
sete al
inc rbx
mov ebp eax
jmp r-xdata
movzx esi [ rbx ]
inc rbx
mov ecx esi
call sub_140006bf4
test eax eax
je r-xdata
mov al [ rbx ]
mov [ rdi ] al
inc rdi
test ebp ebp
jne r-xdata
test sil sil
je r-xdata
inc [ r14 ]
test rdi rdi
je r-xdata
cmp [ rbx ] 0x22
jne r-xdata
cmp sil 0x20
je r-xdata
dec rbx
inc rbx
mov al [ rbx ]
mov [ rdi ] al
inc rdi
test rdi rdi
je r-xdata
cmp sil 0x9
jne r-xdata
test r15 r15
je r-xdata
cmp [ rbx ] 0x20
je r-xdata
xor esi esi
mov [ rdi - 0x1 ] 0x0
jmp r-xdata
inc [ r12 ]
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r15
pop r14
pop r12
retn
and [ r15 ] 0x0
inc rbx
jmp r-xdata
cmp [ rbx ] 0x9
jne r-xdata
cmp [ rbx ] 0x0
je r-xdata
test r15 r15
je r-xdata
inc [ r12 ]
mov [ r15 ] rdi
add r15 0x8
cmp [ rbx ] 0x5c
je r-xdata
inc rbx
inc ecx
cmp [ rbx ] 0x22
jne r-xdata
test ecx ecx
jne r-xdata
test dl cl
jne r-xdata
dec ecx
test rdi rdi
je r-xdata
mov al [ rbx ]
test al al
je r-xdata
shr ecx 0x1
jmp r-xdata
test esi esi
je r-xdata
inc [ r14 ]
mov [ rdi ] 0x5c
inc rdi
test rdi rdi
je r-xdata
test esi esi
jne r-xdata
xor eax eax
xor edx edx
test esi esi
sete al
mov esi eax
lea rax [ rbx + 0x1 ]
cmp [ rax ] 0x22
jne r-xdata
inc [ r14 ]
jmp r-xdata
mov [ rdi ] 0x0
inc rdi
test edx edx
je r-xdata
cmp al 0x20
je r-xdata
mov rbx rax
jmp r-xdata
cmp [ rbx ] 0x0
je r-xdata
inc rbx
jmp r-xdata
movsx ecx al
call sub_140006bf4
test rdi rdi
je r-xdata
cmp al 0x9
je r-xdata
mov edx 0x1
xor ecx ecx
jmp r-xdata
test eax eax
je r-xdata
test eax eax
je r-xdata
inc [ r14 ]
inc rbx
inc [ r14 ]
mov al [ rbx ]
mov [ rdi ] al
inc rdi
jmp r-xdata
mov al [ rbx ]
inc rbx
mov [ rdi ] al
inc rdi
inc [ r14 ]
sub_1400044c0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
cmp [ rw-data ] 0x0
jne r-xdata
mov rbx [ rw-data ]
xor edi edi
test rbx rbx
jne r-xdata
call sub_14000524c
mov al [ rbx ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
lea eax [ rdi + 0x1 ]
mov edx 0x8
movsxd rcx eax
call sub_140004d28
mov rdi rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rcx rbx
call sub_1400063b0
inc rbx
add rbx rax
inc edi
mov rbx [ rw-data ]
cmp [ rbx ] 0x0
je r-xdata
mov rcx rbx
call sub_140004ce8
and [ rw-data ] 0x0
and [ rdi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
mov rcx rbx
call sub_1400063b0
cmp [ rbx ] 0x3d
lea esi [ rax + 0x1 ]
je r-xdata
movsxd rax esi
add rbx rax
cmp [ rbx ] 0x0
jne r-xdata
movsxd rbp esi
mov edx 0x1
mov rcx rbp
call sub_140004d28
mov [ rdi ] rax
test rax rax
je r-xdata
mov rbx [ rw-data ]
mov rcx [ rw-data ]
call sub_140004ce8
and [ rw-data ] 0x0
jmp r-xdata
mov r8 rbx
mov rdx rbp
mov rcx rax
call sub_140006c08
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_140005d5c
int3
add rdi 0x8
sub_1400045fc
sub rsp 0x28
test ecx ecx
js r-xdata
call sub_140005e08
mov [ rax ] 0x16
call sub_140005d3c
or eax 0xffffffff
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
jmp r-xdata
cmp ecx 0x3
jne r-xdata
add rsp 0x28
retn
mov eax [ rw-data ]
jmp r-xdata
sub_14000463c
mov [ rsp + 0x20 ] rbx
push rbp
mov rbp rsp
sub rsp 0x20
mov rax [ rw-data ]
and [ rbp + 0x18 ] 0x0
mov rbx 0x2b992ddfa232
cmp rax rbx
jne r-xdata
mov rbx [ rsp + 0x48 ]
not rax
mov [ rw-data ] rax
add rsp 0x20
pop rbp
retn
lea rcx [ rbp + 0x18 ]
call [ GetSystemTimeAsFileTime@IAT ]
mov rax [ rbp + 0x18 ]
mov [ rbp + 0x10 ] rax
call [ GetCurrentThreadId@IAT ]
mov eax eax
xor [ rbp + 0x10 ] rax
call [ GetCurrentProcessId@IAT ]
lea rcx [ rbp + 0x20 ]
mov eax eax
xor [ rbp + 0x10 ] rax
call [ QueryPerformanceCounter@IAT ]
mov eax [ rbp + 0x20 ]
shl rax 0x20
lea rcx [ rbp + 0x10 ]
xor rax [ rbp + 0x20 ]
xor rax [ rbp + 0x10 ]
xor rax rcx
mov rcx 0xffffffffffff
and rax rcx
mov rcx 0x2b992ddfa233
cmp rax rbx
cmove rax rcx
mov [ rw-data ] rax
sub_1400046e8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_140004720
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_140004758
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r14
sub rsp 0x40
call [ GetEnvironmentStringsW@IAT ]
xor r14d r14d
mov rdi rax
test rax rax
je r-xdata
xor eax eax
mov rbx rax
cmp [ rax ] r14w
je r-xdata
mov [ rsp + 0x38 ] r14
sub rbx rax
mov [ rsp + 0x30 ] r14
sar rbx 0x1
mov r8 rax
xor edx edx
lea r9d [ rbx + 0x1 ]
xor ecx ecx
mov [ rsp + 0x28 ] r14d
mov [ rsp + 0x20 ] r14
call [ WideCharToMultiByte@IAT ]
movsxd rbp eax
test eax eax
je r-xdata
add rbx 0x2
cmp [ rbx ] r14w
jne r-xdata
mov rcx rdi
call [ FreeEnvironmentStringsW@IAT ]
mov rcx rbp
call sub_140004da8
mov rsi rax
test rax rax
je r-xdata
add rbx 0x2
cmp [ rbx ] r14w
jne r-xdata
mov [ rsp + 0x38 ] r14
mov [ rsp + 0x30 ] r14
lea r9d [ rbx + 0x1 ]
mov r8 rdi
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] ebp
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
test eax eax
jne r-xdata
mov rcx rdi
call [ FreeEnvironmentStringsW@IAT ]
mov rax rsi
jmp r-xdata
mov rcx rsi
call sub_140004ce8
mov rsi r14
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r14
retn
sub_14000484c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
xor edi edi
cmp [ rw-data ] edi
jne r-xdata
mov rbx [ rw-data ]
lea rax [ r--data ]
test rbx rbx
cmove rbx rax
call sub_14000524c
cmp [ rbx ] 0x22
jne r-xdata
cmp [ rbx ] 0x0
je r-xdata
movzx ecx [ rbx ]
call sub_140006bf4
test eax eax
je r-xdata
xor eax eax
test edi edi
sete al
mov edi eax
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test edi edi
je r-xdata
inc rbx
jmp r-xdata
inc rbx
mov al [ rbx ]
test al al
jne r-xdata
cmp [ rbx ] 0x20
ja r-xdata
cmp al 0x20
ja r-xdata
inc rbx
sub_1400048c8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r12 [ r9 + 0x8 ]
mov r15 [ r9 ]
mov rbx [ r9 + 0x38 ]
sub r15 r12
test [ rcx + 0x4 ] 0x66
mov r14 r9
mov r13 rdx
mov rbp rcx
jne r-xdata
mov rsi [ r9 + 0x20 ]
mov edi [ r9 + 0x48 ]
sub rsi r12
jmp r-xdata
mov esi [ r9 + 0x48 ]
mov [ rax - 0x38 ] rcx
mov [ rax - 0x30 ] r8
mov edx [ rbx ]
cmp edi edx
jb r-xdata
mov eax 0x1
mov edi esi
add rdi rdi
mov eax [ rbx + rdi * 8 + 0x4 ]
cmp r15 rax
jb r-xdata
mov ecx edi
add rcx rcx
mov eax [ rbx + rcx * 8 + 0x4 ]
cmp r15 rax
jb r-xdata
inc esi
jmp r-xdata
mov eax [ rbx + rdi * 8 + 0x8 ]
cmp r15 rax
jae r-xdata
inc edi
mov eax [ rbx + rcx * 8 + 0x8 ]
cmp r15 rax
jae r-xdata
cmp esi [ rbx ]
jae r-xdata
cmp [ rbx + rdi * 8 + 0x10 ] 0x0
je r-xdata
test [ rbp + 0x4 ] 0x20
je r-xdata
cmp [ rbx + rdi * 8 + 0xc ] 0x1
je r-xdata
mov eax [ rbx + rcx * 8 + 0x10 ]
test eax eax
je r-xdata
xor r9d r9d
test edx edx
je r-xdata
cmp [ rbp ] 0xe06d7363
jne r-xdata
mov eax [ rbx + rdi * 8 + 0xc ]
lea rcx [ rsp + 0x30 ]
mov rdx r13
add rax r12
call rax
test eax eax
js r-xdata
lea eax [ rdi + 0x1 ]
mov rdx r13
mov [ r14 + 0x48 ] eax
mov r8d [ rbx + rcx * 8 + 0xc ]
mov cl 0x1
add r8 r12
call r8
cmp rsi rax
je r-xdata
cmp r9d edx
jne r-xdata
lea r8 [ rbx + 0x8 ]
mov ecx [ rbx + rdi * 8 + 0x10 ]
mov r8d 0x1
mov rdx r13
add rcx r12
call sub_140006970
mov rax [ r14 + 0x40 ]
mov edx [ rbx + rdi * 8 + 0x10 ]
mov r9d [ rbp ]
mov [ rsp + 0x28 ] rax
mov rax [ r14 + 0x28 ]
add rdx r12
mov r8 rbp
mov rcx r13
mov [ rsp + 0x20 ] rax
call [ RtlUnwindEx@IAT ]
call sub_1400069a0
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
jle r-xdata
jmp r-xdata
inc r9d
add r8 0x10
cmp r9d edx
jb r-xdata
mov eax [ r8 ]
cmp rsi rax
jae r-xdata
lea rcx [ rw-data ]
call sub_140005ed0
test eax eax
je r-xdata
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov eax [ r8 - 0x4 ]
cmp rsi rax
jb r-xdata
mov eax [ rbx + rcx * 8 + 0x10 ]
cmp [ r8 + 0x8 ] eax
jne r-xdata
mov edx 0x1
mov rcx rbp
call [ rw-data ]
mov eax [ rbx + rcx * 8 + 0xc ]
cmp [ r8 + 0x4 ] eax
je r-xdata
sub_140004ae8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
lea rdi [ rw-data ]
add rbx rbx
cmp [ rdi + rbx * 8 ] 0x0
jne r-xdata
mov rcx [ rdi + rbx * 8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
jmp [ EnterCriticalSection@IAT ]
call sub_140004bb4
test eax eax
jne r-xdata
lea ecx [ rax + 0x11 ]
call sub_140003858
sub_140004b2c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov edi 0x24
lea rbx [ rw-data ]
mov ebp edi
add rbx 0x10
dec rbp
jne r-xdata
cmp [ rbx + 0x8 ] 0x1
je r-xdata
mov rsi [ rbx ]
test rsi rsi
je r-xdata
lea rbx [ rw-data ]
mov rcx rsi
call [ DeleteCriticalSection@IAT ]
mov rcx rsi
call sub_140004ce8
and [ rbx ] 0x0
add rbx 0x10
dec rdi
jne r-xdata
cmp [ rbx ] 0x1
jne r-xdata
mov rcx [ rbx - 0x8 ]
test rcx rcx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
call [ DeleteCriticalSection@IAT ]
sub_140004bb4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rdi
push r14
sub rsp 0x20
movsxd rbx ecx
cmp [ rw-data ] 0x0
jne r-xdata
add rbx rbx
lea r14 [ rw-data ]
cmp [ r14 + rbx * 8 ] 0x0
je r-xdata
call sub_140003bd4
mov ecx 0x1e
call sub_140003c48
mov ecx 0xff
call sub_140003840
mov ecx 0x28
call sub_140004da8
mov rdi rax
test rax rax
jne r-xdata
mov eax 0x1
jmp r-xdata
mov ecx 0xa
call sub_140004ae8
nop
mov rcx rdi
cmp [ r14 + rbx * 8 ] 0x0
jne r-xdata
call sub_140005e08
mov [ rax ] 0xc
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rdi [ rsp + 0x38 ]
add rsp 0x20
pop r14
retn
call sub_140004ce8
nop
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
mov [ r14 + rbx * 8 ] rdi
jmp r-xdata
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
jmp r-xdata
sub_140004c70
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
xor esi esi
lea rbx [ rw-data ]
lea edi [ rsi + 0x24 ]
add rbx 0x10
dec rdi
jne r-xdata
movsxd rax esi
lea rdx [ rw-data ]
inc esi
lea rcx [ rax + rax * 4 ]
lea rcx [ rdx + rcx * 8 ]
mov edx 0xfa0
mov [ rbx ] rcx
call [ InitializeCriticalSectionAndSpinCount@IAT ]
cmp [ rbx + 0x8 ] 0x1
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
lea eax [ rdi + 0x1 ]
add rsp 0x20
pop rdi
retn
sub_140004ce8
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
add rsp 0x20
pop rbx
call sub_140005e08
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_140005e28
mov [ rbx ] eax
sub_140004d28
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r14
sub rsp 0x20
xor ebx ebx
mov rsi rdx
mov rbp rcx
or r14d 0xffffffff
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rax rdi
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r14
retn
cmp [ rw-data ] eax
jbe r-xdata
mov ecx ebx
call [ Sleep@IAT ]
lea ecx [ rbx + 0x3e8 ]
cmp ecx [ rw-data ]
mov ebx ecx
cmova ebx r14d
cmp ebx r14d
jne r-xdata
xor r8d r8d
mov rdx rsi
mov rcx rbp
call sub_140006e50
mov rdi rax
test rax rax
jne r-xdata
sub_140004da8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r14
sub rsp 0x20
mov esi [ rw-data ]
xor edi edi
mov rbp rcx
or r14d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r14
retn
test esi esi
je r-xdata
mov ecx edi
call [ Sleep@IAT ]
mov esi [ rw-data ]
lea ecx [ rdi + 0x3e8 ]
cmp ecx esi
mov edi ecx
cmova edi r14d
cmp edi r14d
jne r-xdata
mov rcx rbp
call sub_140006cc4
mov rbx rax
test rax rax
jne r-xdata
sub_140004e24
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r14
sub rsp 0x20
xor ebx ebx
mov rsi rdx
mov rbp rcx
or r14d 0xffffffff
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rax rdi
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r14
retn
test rsi rsi
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
mov ecx ebx
call [ Sleep@IAT ]
lea ecx [ rbx + 0x3e8 ]
cmp ecx [ rw-data ]
mov ebx ecx
cmova ebx r14d
cmp ebx r14d
jne r-xdata
mov rdx rsi
mov rcx rbp
call sub_140006d7c
mov rdi rax
test rax rax
jne r-xdata
sub_140004ea8
[ rcx ]
mov rax [ rcx + 0xd8 ]
test rax rax
je r-xdata
mov rax [ rcx + 0xe8 ]
test rax rax
je r-xdata
[ rax ]
mov rax [ rcx + 0xe0 ]
test rax rax
je r-xdata
[ rax ]
mov rax [ rcx + 0xf8 ]
test rax rax
je r-xdata
[ rax ]
lea rax [ rcx + 0x28 ]
mov r8d 0x6
[ rax ]
cmp [ rax - 0x18 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
dec r8
jne r-xdata
mov rdx [ rax - 0x8 ]
test rdx rdx
je r-xdata
[ rdx ]
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x120 ]
[ rax + 0x15c ]
retn
[ rdx ]
sub_140004f34
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rax [ rcx + 0xf0 ]
mov rbx rcx
test rax rax
je r-xdata
mov rax [ rbx + 0xf8 ]
test rax rax
je r-xdata
lea rcx [ rw-data ]
cmp rax rcx
je r-xdata
mov rcx [ rbx + 0x120 ]
lea rax [ rw-data ]
cmp rcx rax
je r-xdata
cmp [ rax ] 0x0
jne r-xdata
mov rax [ rbx + 0xd8 ]
test rax rax
je r-xdata
lea rsi [ rbx + 0x128 ]
lea rdi [ rbx + 0x28 ]
mov ebp 0x6
cmp [ rcx + 0x15c ] 0x0
jne r-xdata
mov rcx [ rbx + 0x100 ]
sub rcx 0xfe
call sub_140004ce8
mov rcx [ rbx + 0x110 ]
mov edi 0x80
sub rcx rdi
call sub_140004ce8
mov rcx [ rbx + 0x118 ]
sub rcx rdi
call sub_140004ce8
mov rcx [ rbx + 0xf8 ]
call sub_140004ce8
cmp [ rax ] 0x0
jne r-xdata
cmp [ rdi - 0x18 ] 0x0
je r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
call sub_140007064
mov rcx [ rbx + 0x120 ]
call sub_140004ce8
mov rcx [ rbx + 0xe8 ]
test rcx rcx
je r-xdata
add rsi 0x8
add rdi 0x20
dec rbp
jne r-xdata
mov rcx [ rdi - 0x8 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
mov rcx [ rbx + 0xe0 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp [ rdi - 0x10 ] rax
je r-xdata
mov rcx rbx
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
jmp sub_140004ce8
cmp [ rcx ] 0x0
jne r-xdata
call sub_140004ce8
mov rcx [ rsi ]
call sub_140004ce8
mov rcx [ rbx + 0xd8 ]
call sub_140004ce8
mov rcx [ rbx + 0xf0 ]
call sub_140004ce8
cmp [ rcx ] 0x0
jne r-xdata
call sub_140004ce8
mov rcx [ rbx + 0xf0 ]
call sub_140006eec
call sub_140004ce8
call sub_140004ce8
mov rcx [ rbx + 0xf0 ]
call sub_140006ff8
sub_1400050cc
test rcx rcx
je r-xdata
mov rax rcx
retn
or r9d 0xffffffff
[ rcx ] r9d
mov rax [ rcx + 0xd8 ]
test rax rax
je r-xdata
mov rax [ rcx + 0xe8 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0xe0 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0xf8 ]
test rax rax
je r-xdata
[ rax ] r9d
lea rax [ rcx + 0x28 ]
mov r8d 0x6
[ rax ] r9d
cmp [ rax - 0x18 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
dec r8
jne r-xdata
mov rdx [ rax - 0x8 ]
test rdx rdx
je r-xdata
[ rdx ] r9d
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x120 ]
[ rax + 0x15c ] r9d
[ rdx ] r9d
sub_140005170
push rbx
sub rsp 0x20
call sub_1400035ec
mov rbx rax
mov ecx [ rw-data ]
test [ rax + 0xc8 ] ecx
je r-xdata
mov ecx 0xc
call sub_140004ae8
nop
lea rcx [ rbx + 0xc0 ]
mov rdx [ rw-data ]
call sub_1400051e8
mov rbx rax
mov ecx 0xc
call sub_140004cd0
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
lea ecx [ rbx + 0x20 ]
call sub_140003858
call sub_1400035ec
mov rbx [ rax + 0xc0 ]
jmp r-xdata
test rbx rbx
jne r-xdata
sub_1400051e8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
test rdx rdx
je r-xdata
xor eax eax
test rcx rcx
je r-xdata
mov rbx [ rcx ]
cmp rbx rdx
je r-xdata
mov rax rdi
jmp r-xdata
mov [ rcx ] rdx
mov rcx rdx
call sub_140004ea8
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call sub_1400050cc
cmp [ rbx ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp rbx rax
je r-xdata
mov rcx rbx
call sub_140004f34
sub_140005274
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx + 0x18 ] 0x0
test rdx rdx
jne r-xdata
movups xmm0 [ rdx ]
movdqu [ rcx ] xmm0
call sub_1400035ec
mov [ rbx + 0x10 ] rax
mov rdx [ rax + 0xc0 ]
mov [ rbx ] rdx
mov rcx [ rax + 0xb8 ]
mov [ rbx + 0x8 ] rcx
cmp rdx [ rw-data ]
je r-xdata
mov rax [ rw-data ]
cmp [ rbx + 0x8 ] rax
je r-xdata
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
mov rcx [ rbx + 0x10 ]
mov eax [ rcx + 0xc8 ]
test al 0x2
jne r-xdata
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
call sub_140005170
mov [ rbx ] rax
mov rax rbx
add rsp 0x20
pop rbx
retn
or eax 0x2
mov [ rcx + 0xc8 ] eax
mov [ rbx + 0x18 ] 0x1
jmp r-xdata
call sub_140005610
mov [ rbx + 0x8 ] rax
sub_14000531c
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_140005274
and [ rw-data ] 0x0
cmp ebx 0xfffffffe
jne r-xdata
cmp ebx 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
jmp r-xdata
cmp ebx 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
mov ebx eax
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov rax [ rsp + 0x20 ]
mov [ rw-data ] 0x1
mov ebx [ rax + 0x4 ]
mov eax ebx
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_14000539c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rcx + 0x18 ]
mov rsi rcx
mov ebp 0x101
mov rcx rbx
mov r8d ebp
xor edx edx
call sub_140007ec0
xor eax eax
lea rdi [ rsi + 0xc ]
mov [ rsi + 0x4 ] rax
mov [ rsi + 0x220 ] rax
mov ecx 0x6
movzx eax ax
[ rdi ]
lea rdi [ rw-data ]
sub rdi rsi
mov al [ rdi + rbx ]
mov [ rbx ] al
inc rbx
dec rbp
jne r-xdata
lea rcx [ rsi + 0x119 ]
mov edx 0x100
mov al [ rcx + rdi ]
mov [ rcx ] al
inc rcx
dec rdx
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_14000542c
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rdi
push rbp
lea rbp [ rsp - 0x480 ]
sub rsp 0x580
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x470 ] rax
mov rdi rcx
mov ecx [ rcx + 0x4 ]
lea rdx [ rsp + 0x50 ]
call [ GetCPInfo@IAT ]
mov ebx 0x100
test eax eax
je r-xdata
xor edx edx
lea rcx [ rdi + 0x19 ]
xor eax eax
lea rcx [ rsp + 0x70 ]
cmp r8d 0x19
ja r-xdata
or [ rcx ] 0x10
lea eax [ rdx + 0x20 ]
jmp r-xdata
mov [ rcx ] al
inc eax
inc rcx
cmp eax ebx
jb r-xdata
mov al [ rsp + 0x56 ]
mov [ rsp + 0x70 ] 0x20
lea rdx [ rsp + 0x56 ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
lea eax [ rdx - 0x20 ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test al al
jne r-xdata
lea r8d [ rdx - 0x61 ]
lea eax [ r8 + 0x20 ]
cmp eax 0x19
ja r-xdata
mov rcx [ rbp + 0x470 ]
xor rcx rsp
call sub_1400029f0
lea r11 [ rsp + 0x580 ]
mov rbx [ r11 + 0x18 ]
mov rdi [ r11 + 0x20 ]
mov rsp r11
pop rbp
retn
inc edx
inc rcx
cmp edx ebx
jb r-xdata
movzx r8d [ rdx + 0x1 ]
movzx ecx al
jmp r-xdata
mov eax [ rdi + 0x4 ]
and [ rsp + 0x30 ] 0x0
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x28 ] eax
lea rax [ rbp + 0x270 ]
mov r9d ebx
mov edx 0x1
xor ecx ecx
mov [ rsp + 0x20 ] rax
call sub_140007930
and [ rsp + 0x40 ] 0x0
mov eax [ rdi + 0x4 ]
mov rdx [ rdi + 0x220 ]
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x70 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d ebx
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_140007730
and [ rsp + 0x40 ] 0x0
mov eax [ rdi + 0x4 ]
mov rdx [ rdi + 0x220 ]
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x170 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d 0x200
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_140007730
lea r8 [ rbp + 0x70 ]
lea r9 [ rbp + 0x170 ]
sub r8 rdi
lea rdx [ rbp + 0x270 ]
lea rcx [ rdi + 0x19 ]
sub r9 rdi
cmp ecx r8d
jbe r-xdata
test [ rdx ] 0x2
je r-xdata
or [ rcx ] 0x10
mov al [ r8 + rcx - 0x19 ]
jmp r-xdata
cmp ecx ebx
jae r-xdata
add rdx 0x2
mov al [ rdx ]
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
mov al [ r9 + rcx - 0x19 ]
mov [ rcx + 0x100 ] al
jmp r-xdata
mov eax ecx
mov [ rsp + rcx + 0x70 ] 0x20
inc ecx
test [ rdx ] 0x1
je r-xdata
jmp r-xdata
inc rcx
add rdx 0x2
dec rbx
jne r-xdata
sub_140005610
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
call sub_1400035ec
mov rdi rax
mov ecx [ rw-data ]
test [ rax + 0xc8 ] ecx
je r-xdata
mov ecx 0xd
call sub_140004ae8
nop
mov rbx [ rdi + 0xb8 ]
mov [ rsp + 0x30 ] rbx
cmp rbx [ rw-data ]
je r-xdata
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov ecx 0xd
call sub_140004cd0
test rbx rbx
je r-xdata
mov rbx [ rax + 0xb8 ]
jmp r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rbx + 0x20 ]
call sub_140003858
mov rax [ rw-data ]
mov [ rdi + 0xb8 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x30 ] rax
[ rax ]
mov rbx [ rsp + 0x30 ]
[ rbx ]
jne r-xdata
test rbx rbx
jne r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
call sub_140004ce8
sub_1400056cc
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r14
push r15
sub rsp 0x30
mov edi ecx
or r15d 0xffffffff
call sub_1400035ec
mov rsi rax
call sub_140005610
mov rbx [ rsi + 0xb8 ]
mov ecx edi
call sub_14000531c
mov r14d eax
cmp eax [ rbx + 0x4 ]
je r-xdata
xor edi edi
mov r15d edi
mov ecx 0x228
call sub_140004da8
mov rbx rax
xor edi edi
test rax rax
je r-xdata
mov eax r15d
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
mov r14 [ rsp + 0x58 ]
add rsp 0x30
pop r15
retn
mov rdx [ rsi + 0xb8 ]
mov rcx rax
mov rax rdx
or rax rcx
and eax 0xf
jne r-xdata
mov r8d 0x228
call sub_1400079c0
lea eax [ rdi + 0x4 ]
lea r8d [ rax + 0x7c ]
cmp eax 0xffffffff
jne r-xdata
mov rcx [ rsi + 0xb8 ]
lea r14 [ rw-data ]
[ rcx ]
jne r-xdata
movaps xmm0 [ rdx ]
movaps [ rcx ] xmm0
movaps xmm1 [ rdx + 0x10 ]
movaps [ rcx + 0x10 ] xmm1
movaps xmm0 [ rdx + 0x20 ]
movaps [ rcx + 0x20 ] xmm0
movaps xmm1 [ rdx + 0x30 ]
movaps [ rcx + 0x30 ] xmm1
movaps xmm0 [ rdx + 0x40 ]
movaps [ rcx + 0x40 ] xmm0
movaps xmm1 [ rdx + 0x50 ]
movaps [ rcx + 0x50 ] xmm1
movaps xmm0 [ rdx + 0x60 ]
movaps [ rcx + 0x60 ] xmm0
add rcx r8
movaps xmm1 [ rdx + 0x70 ]
movaps [ rcx - 0x10 ] xmm1
add rdx r8
dec rax
jne r-xdata
movaps xmm0 [ rdx ]
movaps [ rcx ] xmm0
movaps xmm1 [ rdx + 0x10 ]
movaps [ rcx + 0x10 ] xmm1
mov rax [ rdx + 0x20 ]
mov [ rcx + 0x20 ] rax
jmp r-xdata
lea r14 [ rw-data ]
cmp rbx r14
je r-xdata
mov [ rsi + 0xb8 ] rbx
[ rbx ]
test [ rsi + 0xc8 ] 0x2
jne r-xdata
mov rcx [ rsi + 0xb8 ]
cmp rcx r14
je r-xdata
mov [ rbx ] edi
mov rdx rbx
mov ecx r14d
call sub_140005928
mov r15d eax
test eax eax
jne r-xdata
call sub_140005e08
mov [ rax ] 0x16
jmp r-xdata
mov rcx rbx
call sub_140004ce8
test [ rw-data ] 0x1
jne r-xdata
call sub_140004ce8
mov esi 0xd
mov ecx esi
call sub_140004ae8
nop
mov eax [ rbx + 0x4 ]
mov [ rw-data ] eax
mov eax [ rbx + 0x8 ]
mov [ rw-data ] eax
mov rax [ rbx + 0x220 ]
mov [ rw-data ] rax
mov edx edi
lea r8 [ __dos_header ]
mov edx edi
movsxd rcx edx
movzx eax [ rbx + rcx * 2 + 0xc ]
mov [ r8 + rcx * 2 + 0x13d48 ] ax
inc edx
jmp r-xdata
mov [ rsp + 0x20 ] edi
cmp edi 0x100
jge r-xdata
movsxd rcx edx
mov al [ rcx + rbx + 0x18 ]
mov [ rcx + r8 + 0x11800 ] al
inc edx
jmp r-xdata
mov [ rsp + 0x20 ] edx
cmp edx 0x5
jge r-xdata
mov rcx [ rw-data ]
or eax 0xffffffff
[ rcx ] eax
dec eax
jne r-xdata
movsxd rcx edi
mov al [ rcx + rbx + 0x119 ]
mov [ rcx + r8 + 0x11910 ] al
inc edi
jmp r-xdata
mov [ rsp + 0x20 ] edx
cmp edx 0x101
jge r-xdata
mov [ rw-data ] rbx
[ rbx ]
mov ecx esi
call sub_140004cd0
jmp r-xdata
mov rcx [ rw-data ]
cmp rcx r14
je r-xdata
call sub_140004ce8
sub_140005928
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rbp
push rsi
push rdi
push r12
push r14
push r15
sub rsp 0x40
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x38 ] rax
mov rbx rdx
call sub_14000531c
xor esi esi
mov edi eax
test eax eax
jne r-xdata
lea r12 [ rw-data ]
mov ebp esi
mov r15d 0x1
mov rax r12
mov rcx rbx
call sub_14000539c
jmp r-xdata
lea rcx [ rbx + 0x18 ]
xor edx edx
mov r8d 0x101
call sub_140007ec0
mov eax ebp
lea r9 [ r12 + 0x10 ]
lea r11 [ rax + rax * 2 ]
lea r14 [ rw-data ]
mov ebp 0x4
shl r11 0x4
add r9 r11
add ebp r15d
add rax 0x30
cmp ebp 0x5
jb r-xdata
xor eax eax
add r9 0x8
add r14 r15
sub rbp r15
jne r-xdata
cmp [ rdx + 0x1 ] sil
je r-xdata
cmp [ rax ] edi
je r-xdata
lea eax [ rdi - 0xfde8 ]
cmp eax r15d
jbe r-xdata
mov rdx r9
cmp [ r9 ] sil
je r-xdata
mov [ rbx + 0x4 ] edi
mov [ rbx + 0x8 ] r15d
sub edi 0x3a4
je r-xdata
movzx r8d [ rdx ]
movzx eax [ rdx + 0x1 ]
cmp r8d eax
ja r-xdata
or eax 0xffffffff
jmp r-xdata
movzx ecx di
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
mov rsi [ r--data ]
sub edi 0x4
je r-xdata
add rdx 0x2
cmp [ rdx ] sil
jne r-xdata
lea r10d [ r8 + 0x1 ]
mov rcx [ rsp + 0x38 ]
xor rcx rsp
call sub_1400029f0
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x40 ]
mov rbp [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r12
pop rdi
pop rsi
retn
lea rdx [ rsp + 0x20 ]
mov ecx edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
movzx eax [ rdi + rcx - 0x8 ]
mov [ rcx ] ax
lea rcx [ rcx + 0x2 ]
sub rdx r15
jne r-xdata
mov rcx rbx
call sub_14000542c
mov rsi [ r--data ]
jmp r-xdata
sub edi 0xd
je r-xdata
mov al [ r14 ]
add r8d r15d
or [ r10 + rbx + 0x18 ] al
movzx eax [ rdx + 0x1 ]
add r10d r15d
cmp r8d eax
jbe r-xdata
cmp [ rw-data ] esi
jne r-xdata
lea rcx [ rbx + 0x18 ]
xor edx edx
mov r8d 0x101
call sub_140007ec0
mov [ rbx + 0x4 ] edi
mov [ rbx + 0x220 ] rsi
cmp [ rsp + 0x20 ] r15d
jbe r-xdata
sub r11 rbx
mov [ rbx + 0x220 ] rsi
lea rcx [ rbx + 0xc ]
lea rdi [ r11 + r12 ]
mov edx 0x6
mov rsi [ r--data ]
jmp r-xdata
dec edi
jne r-xdata
cmp r10d 0x101
jae r-xdata
mov [ rbx + 0x8 ] esi
lea rdx [ rsp + 0x26 ]
cmp [ rsp + 0x26 ] sil
je r-xdata
mov rsi [ r--data ]
jmp r-xdata
lea rax [ rbx + 0x1a ]
mov ecx 0xfe
cmp [ rdx + 0x1 ] sil
je r-xdata
or [ rax ] 0x8
add rax r15
sub rcx r15
jne r-xdata
mov ecx [ rbx + 0x4 ]
sub ecx 0x3a4
je r-xdata
movzx r8d [ rdx ]
movzx edi [ rdx + 0x1 ]
cmp r8d edi
ja r-xdata
mov rax [ r--data ]
sub ecx 0x4
je r-xdata
add rdx 0x2
cmp [ rdx ] sil
jne r-xdata
lea ecx [ r8 + 0x1 ]
lea rax [ rbx + 0x18 ]
add rax rcx
sub edi r8d
lea ecx [ r15 + rdi ]
lea rdi [ rbx + 0xc ]
movzx eax si
mov ecx 0x6
[ rdi ]
jmp r-xdata
mov rax [ r--data ]
jmp r-xdata
sub ecx 0xd
je r-xdata
or [ rax ] 0x4
add rax r15
sub rcx r15
jne r-xdata
mov [ rbx + 0x220 ] rax
mov [ rbx + 0x8 ] r15d
jmp r-xdata
mov rax [ r--data ]
jmp r-xdata
dec ecx
je r-xdata
mov rax [ r--data ]
jmp r-xdata
mov rax rsi
jmp r-xdata
sub_140005bd8
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push rbp
lea rbp [ rax - 0x4b8 ]
sub rsp 0x5b0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x4a0 ] rax
mov edi r8d
mov esi edx
mov ebx ecx
cmp ecx 0xffffffff
je r-xdata
and [ rsp + 0x30 ] 0x0
lea rcx [ rsp + 0x34 ]
xor edx edx
mov r8d 0x94
call sub_140007ec0
lea rax [ rsp + 0x30 ]
lea rcx [ rbp - 0x30 ]
mov [ rsp + 0x20 ] rax
lea rax [ rbp - 0x30 ]
mov [ rsp + 0x28 ] rax
call sub_140002d04
mov rax [ rbp + 0x4b8 ]
mov [ rbp + 0xc8 ] rax
lea rax [ rbp + 0x4b8 ]
mov [ rsp + 0x30 ] esi
add rax 0x8
mov [ rsp + 0x34 ] edi
mov [ rbp + 0x68 ] rax
mov rax [ rbp + 0x4b8 ]
mov [ rsp + 0x40 ] rax
call [ IsDebuggerPresent@IAT ]
lea rcx [ rsp + 0x20 ]
mov edi eax
call sub_14000327c
test eax eax
jne r-xdata
call sub_140002cfc
mov rcx [ rbp + 0x4a0 ]
xor rcx rsp
call sub_1400029f0
lea r11 [ rsp + 0x5b0 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
test edi edi
jne r-xdata
cmp ebx 0xffffffff
je r-xdata
mov ecx ebx
call sub_140002cfc
sub_140005cd4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
mov rbp rcx
mov rcx [ rw-data ]
mov ebx r9d
mov rdi r8
mov rsi rdx
call [ DecodePointer@IAT ]
mov r9d ebx
mov r8 rdi
mov rdx rsi
mov rcx rbp
test rax rax
je r-xdata
mov rax [ rsp + 0x60 ]
mov [ rsp + 0x20 ] rax
call sub_140005d5c
int3
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
jmp rax
sub_140005d5c
sub rsp 0x28
mov ecx 0x17
call IsProcessorFeaturePresent
test eax eax
je r-xdata
mov r8d 0x1
mov edx 0xc0000417
lea ecx [ r8 + 0x1 ]
call sub_140005bd8
mov ecx 0xc0000417
add rsp 0x28
jmp sub_14000325c
mov ecx 0x5
int 0x29
sub_140005db8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov edi ecx
call sub_140003610
test rax rax
jne r-xdata
add rax 0x14
lea rax [ rw-data ]
jmp r-xdata
mov ecx edi
call sub_140005e28
mov [ rbx ] eax
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rbx [ rax + 0x10 ]
mov [ rax ] edi
call sub_140003610
lea rbx [ rw-data ]
test rax rax
je r-xdata
sub_140005e28
lea r10 [ rw-data ]
xor edx edx
mov r8 r10
lea r9d [ rdx + 0x8 ]
movsxd rax edx
mov eax [ r10 + rax * 8 + 0x4 ]
retn
inc edx
add r8 r9
movsxd rax edx
cmp rax 0x2d
jb r-xdata
cmp ecx [ r8 ]
je r-xdata
lea eax [ rcx - 0x13 ]
cmp eax 0x11
ja r-xdata
add ecx 0xffffff44
mov eax 0x16
cmp ecx 0xe
cmovbe eax r9d
retn
mov eax 0xd
retn
sub_140005e80
movsxd r8 [ rcx + 0x3c ]
xor r9d r9d
mov r10 rdx
add r8 rcx
movzx eax [ r8 + 0x14 ]
movzx r11d [ r8 + 0x6 ]
add rax 0x18
add rax r8
test r11d r11d
je r-xdata
xor eax eax
mov edx [ rax + 0xc ]
cmp r10 rdx
jb r-xdata
inc r9d
add rax 0x28
cmp r9d r11d
jb r-xdata
mov ecx [ rax + 0x8 ]
add ecx edx
cmp r10 rcx
jb r-xdata
retn
sub_140005ed0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
lea rdi [ __dos_header ]
mov rcx rdi
call sub_140005f20
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub rbx rdi
mov rdx rbx
mov rcx rdi
call sub_140005e80
test rax rax
je r-xdata
mov eax [ rax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
jmp r-xdata
sub_140005f20
mov rax rcx
mov ecx 0x5a4d
cmp [ rax ] cx
je r-xdata
movsxd rcx [ rax + 0x3c ]
add rcx rax
xor eax eax
cmp [ rcx ] 0x4550
jne r-xdata
xor eax eax
retn
retn
mov edx 0x20b
cmp [ rcx + 0x18 ] dx
sete al
sub_140005f50
push rbx
sub rsp 0x20
mov edx 0x8
lea ecx [ rdx + 0x18 ]
call sub_140004d28
mov rcx rax
mov rbx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
and [ rbx ] 0x0
xor eax eax
lea eax [ rbx + 0x18 ]
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_140005f94
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r14
push r15
sub rsp 0x20
mov r12 rcx
call sub_140003a18
nop
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov r14 rax
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rbx rax
cmp rax r14
jb r-xdata
xor ebx ebx
mov rdi rax
sub rdi r14
lea r15 [ rdi + 0x8 ]
cmp r15 0x8
jb r-xdata
mov rcx r14
call sub_140007fcc
mov rsi rax
cmp rax r15
jae r-xdata
mov rcx r12
call [ EncodePointer@IAT ]
mov [ rbx ] rax
lea rcx [ rbx + 0x8 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
mov rbx r12
jmp r-xdata
mov edx 0x1000
cmp rax rdx
cmovb rdx rax
add rdx rax
cmp rdx rax
jb r-xdata
call sub_140003a24
mov rax rbx
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x20
pop r15
pop r14
pop r12
retn
xor ebx ebx
mov rcx r14
call sub_140004e24
xor ebx ebx
test rax rax
jne r-xdata
mov rcx r14
call sub_140004e24
test rax rax
je r-xdata
sar rdi 0x3
lea rbx [ rax + rdi * 8 ]
mov rcx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
jmp r-xdata
lea rdx [ rsi + 0x20 ]
cmp rdx rsi
jb r-xdata
sub_1400060b8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
xor edi edi
lea rbx [ rw-data ]
mov rcx [ rbx ]
call [ EncodePointer@IAT ]
inc edi
mov [ rbx ] rax
movsxd rax edi
lea rbx [ rbx + 0x8 ]
cmp rax 0xa
jb r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_1400060f4
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
xor eax eax
mov rcx rbx
call rax
test eax eax
je r-xdata
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_140006170
mov [ rsp + 0x18 ] rbx
push rsi
push rdi
push r12
push r14
push r15
sub rsp 0x30
mov ebx ecx
xor edi edi
mov [ rsp + 0x60 ] edi
xor esi esi
mov edx ecx
sub edx 0x2
je r-xdata
lea r14 [ rw-data ]
mov rcx [ rw-data ]
sub edx 0x2
je r-xdata
test r15 r15
jne r-xdata
xor eax eax
jmp r-xdata
call sub_140003610
mov rsi rax
test rax rax
jne r-xdata
sub edx 0x2
je r-xdata
test edi edi
je r-xdata
lea ecx [ r15 + 0x3 ]
call sub_140003950
int3
mov rbx [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r12
pop rdi
pop rsi
retn
mov rdx [ rax + 0xa0 ]
mov rcx rdx
movsxd r8 [ r--data ]
or eax 0xffffffff
jmp r-xdata
lea r14 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
sub edx 0x2
je r-xdata
mov r12d 0x910
cmp ebx 0xb
ja r-xdata
xor ecx ecx
call sub_140004ae8
nop
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jae r-xdata
add rcx 0x10
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jb r-xdata
mov edi 0x1
mov [ rsp + 0x60 ] edi
call [ DecodePointer@IAT ]
mov r15 rax
sub edx 0x3
je r-xdata
cmp ebx 0x8
jne r-xdata
bt r12d ebx
jae r-xdata
xor ecx ecx
cmp [ rcx + 0x4 ] ebx
je r-xdata
cmp [ rcx + 0x4 ] ebx
je r-xdata
sub edx 0x4
je r-xdata
xor ecx ecx
call [ EncodePointer@IAT ]
mov [ r14 ] rax
mov ecx [ r--data ]
mov edx ecx
mov [ rsp + 0x20 ] ecx
mov rax [ rsi + 0xa8 ]
mov [ rsp + 0x28 ] rax
and [ rsi + 0xa8 ] 0x0
cmp ebx 0x8
jne r-xdata
cmp r15 0x1
jne r-xdata
lea r14 [ rcx + 0x8 ]
mov r15 [ r14 ]
jmp r-xdata
lea r14 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
sub edx 0x6
je r-xdata
cmp ebx 0x8
jne r-xdata
xor ecx ecx
call sub_140004cd0
test edi edi
je r-xdata
movsxd rcx edx
add rcx rcx
mov rax [ rsi + 0xa0 ]
and [ rax + rcx * 8 + 0x8 ] 0x0
inc edx
mov [ rsp + 0x20 ] edx
mov ecx [ r--data ]
jmp r-xdata
mov eax [ rsi + 0xb0 ]
mov [ rsp + 0x68 ] eax
mov [ rsi + 0xb0 ] 0x8c
lea r14 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
dec edx
je r-xdata
mov ecx ebx
call r15
mov edx [ rsi + 0xb0 ]
mov ecx ebx
call r15
jmp r-xdata
mov eax [ r--data ]
add ecx eax
cmp edx ecx
jge r-xdata
call sub_140005e08
mov [ rax ] 0x16
call sub_140005d3c
jmp r-xdata
bt r12d ebx
jae r-xdata
cmp ebx 0xb
ja r-xdata
mov rax [ rsp + 0x28 ]
mov [ rsi + 0xa8 ] rax
cmp ebx 0x8
jne r-xdata
mov eax [ rsp + 0x68 ]
mov [ rsi + 0xb0 ] eax
jmp r-xdata
sub_1400063b0
mov rax rcx
neg rcx
test rax 0x7
je r-xdata
mov r8 0x7efefefefefefeff
mov r11 0x8101010101010100
nop
mov rdx [ rax ]
mov r9 r8
add rax 0x8
add r9 rdx
not rdx
xor rdx r9
and rdx r11
je r-xdata
mov rdx [ rax - 0x8 ]
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x1 ]
retn
test al 0x7
jne r-xdata
lea rax [ rcx + rax - 0x8 ]
retn
test dh dh
je r-xdata
mov dl [ rax ]
inc rax
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x7 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x6 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x5 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x4 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x3 ]
retn
shr edx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x2 ]
retn
test dh dh
jne r-xdata
sub_140006458
push rbx
sub rsp 0x20
xor r10d r10d
mov r9 rcx
test rcx rcx
je r-xdata
call sub_140005e08
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
cmp [ rcx ] r10w
je r-xdata
mov [ rcx ] r10w
test rdx rdx
jne r-xdata
add rcx 0x2
dec rdx
jne r-xdata
sub rcx r8
mov [ r9 ] r10w
jmp r-xdata
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] r10w
call sub_140005e08
mov ebx 0x22
jmp r-xdata
movzx eax [ r8 ]
mov [ rcx + r8 ] ax
lea r8 [ r8 + 0x2 ]
test ax ax
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_140005d3c
mov eax ebx
sub_1400064e0
push rbx
sub rsp 0x20
xor r10d r10d
test rcx rcx
je r-xdata
call sub_140005e08
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
mov r9 rcx
sub r9 r8
mov [ rcx ] r10w
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ rcx ] r10w
call sub_140005e08
mov ebx 0x22
jmp r-xdata
movzx eax [ r8 ]
mov [ r9 + r8 ] ax
lea r8 [ r8 + 0x2 ]
test ax ax
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_140005d3c
mov eax ebx
sub_140006568
push rbx
sub rsp 0x20
xor ebx ebx
test r9 r9
jne r-xdata
test rcx rcx
je r-xdata
test rcx rcx
jne r-xdata
call sub_140005e08
mov ebx 0x16
test rdx rdx
je r-xdata
test rdx rdx
jne r-xdata
test r9 r9
jne r-xdata
xor eax eax
jmp r-xdata
test r8 r8
jne r-xdata
mov [ rcx ] bx
jmp r-xdata
add rsp 0x20
pop rbx
retn
mov r11 rcx
mov r10 rdx
cmp r9 0xffffffffffffffff
jne r-xdata
mov [ rcx ] bx
sub r8 rcx
sub r11 r8
test r9 r9
jne r-xdata
dec r10
je r-xdata
test r10 r10
jne r-xdata
dec r10
jne r-xdata
mov [ r11 ] bx
dec r9
jne r-xdata
cmp r9 0xffffffffffffffff
jne r-xdata
movzx eax [ r8 ]
mov [ r11 + r8 ] ax
lea r8 [ r8 + 0x2 ]
test ax ax
je r-xdata
jmp r-xdata
movzx eax [ r8 + r11 ]
mov [ r11 ] ax
lea r11 [ r11 + 0x2 ]
test ax ax
je r-xdata
mov [ rcx ] bx
call sub_140005e08
mov ebx 0x22
jmp r-xdata
mov [ rcx + rdx * 2 - 0x2 ] bx
lea eax [ r10 + 0x50 ]
jmp r-xdata
mov [ rax ] ebx
call sub_140005d3c
mov eax ebx
sub_140006634
push rbx
push rbp
push rsi
push rdi
push r12
push r14
push r15
sub rsp 0x50
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x48 ] rax
mov r15 rcx
xor ecx ecx
mov ebp r8d
mov r12 rdx
call [ EncodePointer@IAT ]
xor edi edi
mov rsi rax
call sub_140002e84
cmp [ rw-data ] rdi
mov r14d eax
jne r-xdata
call [ IsDebuggerPresent@IAT ]
test eax eax
je r-xdata
lea rcx [ r--data ]
xor edx edx
mov r8d 0x800
call [ LoadLibraryExW@IAT ]
mov rbx rax
test rax rax
jne r-xdata
test r14d r14d
je r-xdata
test r15 r15
je r-xdata
lea rdx [ r--data ]
mov rcx rbx
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x57
jne r-xdata
mov rcx [ rw-data ]
cmp rcx rsi
je r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov eax 0x3
jmp r-xdata
test r14d r14d
je r-xdata
mov rcx r15
call [ OutputDebugStringW@IAT ]
xor eax eax
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
test rax rax
je r-xdata
lea rcx [ r--data ]
call [ LoadLibraryW@IAT ]
mov rbx rax
test rax rax
je r-xdata
mov rcx [ rw-data ]
cmp rcx rsi
je r-xdata
cmp [ rw-data ] rsi
je r-xdata
mov rcx [ rsp + 0x48 ]
xor rcx rsp
call sub_1400029f0
add rsp 0x50
pop r15
pop r14
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov eax 0x4
jmp r-xdata
lea rdx [ r--data ]
mov rcx rbx
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
call [ DecodePointer@IAT ]
mov rcx [ rw-data ]
mov rbx rax
call [ DecodePointer@IAT ]
mov r14 rax
test rbx rbx
je r-xdata
mov r9d ebp
mov r8 r12
mov rdx r15
mov rcx rdi
call rax
jmp r-xdata
call rax
mov rdi rax
test rax rax
je r-xdata
test rax rax
je r-xdata
mov rcx [ rw-data ]
cmp rcx rsi
je r-xdata
call rbx
test rax rax
je r-xdata
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
bts ebp 0x15
jmp r-xdata
lea rcx [ rsp + 0x30 ]
mov r9d 0xc
lea r8 [ rsp + 0x38 ]
mov [ rsp + 0x20 ] rcx
lea edx [ r9 - 0xb ]
mov rcx rax
call r14
test eax eax
je r-xdata
mov rcx rdi
call rax
mov rdi rax
test [ rsp + 0x40 ] 0x1
jne r-xdata
sub_1400068c4
push rbx
sub rsp 0x20
mov r11d [ r8 ]
mov rbx rdx
mov r9 rcx
and r11d 0xfffffff8
test [ r8 ] 0x4
mov r10 rcx
je r-xdata
movsxd rax r11d
mov rdx [ rax + r10 ]
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0x8 ]
add rcx [ rbx + 0x8 ]
test [ rcx + 0x3 ] 0xf
je r-xdata
mov eax [ r8 + 0x8 ]
movsxd r10 [ r8 + 0x4 ]
neg eax
add r10 rcx
movsxd rcx eax
and r10 rcx
xor r9 rdx
mov rcx r9
add rsp 0x20
pop rbx
jmp sub_1400029f0
movzx eax [ rcx + 0x3 ]
and eax 0xfffffff0
cdqe
add r9 rax
sub_1400069a4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov eax [ rw-data ]
xor ebx ebx
mov edi 0x14
test eax eax
jne r-xdata
cmp eax edi
cmovl eax edi
mov eax 0x200
jmp r-xdata
lea rcx [ rw-data ]
lea edx [ rax + 0x8 ]
mov rcx rdi
mov [ rw-data ] edi
call sub_140004d28
mov [ rw-data ] rax
test rax rax
jne r-xdata
movsxd rcx eax
mov edx 0x8
mov [ rw-data ] eax
call sub_140004d28
mov [ rw-data ] rax
test rax rax
jne r-xdata
xor eax eax
mov rax [ rw-data ]
jmp r-xdata
mov eax 0x1a
jmp r-xdata
mov [ rbx + rax ] rcx
add rcx 0x30
lea rbx [ rbx + 0x8 ]
dec rdi
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_140006a6c
push rbx
sub rsp 0x20
mov rbx rcx
lea rcx [ rw-data ]
cmp rbx rcx
jb r-xdata
lea rcx [ rbx + 0x30 ]
add rsp 0x20
pop rbx
jmp [ EnterCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rbx rax
ja r-xdata
mov rdx rbx
mov rax 0x2aaaaaaaaaaaaaab
sub rdx rcx
imul rdx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
add rcx rdx
add ecx 0x10
call sub_140004ae8
bts [ rbx + 0x18 ] 0xf
add rsp 0x20
pop rbx
retn
sub_140006ad4
push rbx
sub rsp 0x20
mov rbx rdx
cmp ecx 0x14
jge r-xdata
lea rcx [ rdx + 0x30 ]
add rsp 0x20
pop rbx
jmp [ EnterCriticalSection@IAT ]
add ecx 0x10
call sub_140004ae8
bts [ rbx + 0x18 ] 0xf
add rsp 0x20
pop rbx
retn
sub_140006b08
lea rdx [ rw-data ]
cmp rcx rdx
jb r-xdata
add rcx 0x30
jmp [ LeaveCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rcx rax
ja r-xdata
btr [ rcx + 0x18 ] 0xf
sub rcx rdx
mov rax 0x2aaaaaaaaaaaaaab
imul rcx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
add rcx rdx
add ecx 0x10
jmp sub_140004cd0
sub_140006b78
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x40
mov ebx edx
mov rdx rcx
lea rcx [ rsp + 0x20 ]
mov edi r9d
mov esi r8d
call sub_140005274
mov rax [ rsp + 0x28 ]
movzx edx bl
test [ rdx + rax + 0x19 ] dil
jne r-xdata
mov eax 0x1
test esi esi
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
xor eax eax
mov rax [ rsp + 0x20 ]
mov rcx [ rax + 0x108 ]
movzx eax [ rcx + rdx * 2 ]
and eax esi
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_140006c08
push rbx
sub rsp 0x20
test rcx rcx
je r-xdata
call sub_140005e08
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
mov r9 rcx
sub r9 r8
mov [ rcx ] r8b
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ rcx ] dl
call sub_140005e08
mov ebx 0x22
jmp r-xdata
mov al [ r8 ]
mov [ r9 + r8 ] al
inc r8
test al al
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_140005d3c
mov eax ebx
sub_140006c6c
sub rsp 0x28
call sub_140006140
test rax rax
je r-xdata
test [ rw-data ] 0x2
je r-xdata
mov ecx 0x16
call sub_140006170
mov ecx 0x3
call sub_140003950
int3
mov ecx 0x17
call IsProcessorFeaturePresent
test eax eax
je r-xdata
mov r8d 0x1
mov edx 0x40000015
lea ecx [ r8 + 0x2 ]
call sub_140005bd8
mov ecx 0x7
int 0x29
sub_140006cc4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
cmp rcx 0xffffffffffffffe0
ja r-xdata
call sub_1400060f4
call sub_140005e08
mov [ rax ] 0xc
xor eax eax
mov edi 0x1
test rcx rcx
cmovne rdi rcx
mov r8 rdi
xor edx edx
call [ HeapAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
call sub_140003bd4
mov ecx 0x1e
call sub_140003c48
mov ecx 0xff
call sub_140003840
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
call sub_140005e08
mov [ rax ] 0xc
mov rcx rbx
call sub_1400060f4
test eax eax
je r-xdata
call sub_140005e08
mov [ rax ] 0xc
jmp r-xdata
mov rcx [ rw-data ]
test rcx rcx
jne r-xdata
sub_140006d7c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
test rcx rcx
jne r-xdata
test rdx rdx
jne r-xdata
mov rcx rdx
call sub_140006cc4
jmp r-xdata
cmp rdx 0xffffffffffffffe0
ja r-xdata
call sub_140004ce8
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call sub_1400060f4
call sub_140005e08
mov [ rax ] 0xc
mov rcx [ rw-data ]
mov eax 0x1
test rbx rbx
cmove rbx rax
mov r8 rdi
xor edx edx
mov r9 rbx
call [ HeapReAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
xor eax eax
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
call sub_140005e08
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_140005e28
mov [ rbx ] eax
mov rcx rbx
call sub_1400060f4
test eax eax
je r-xdata
call sub_140005e08
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_140005e28
mov [ rbx ] eax
jmp r-xdata
cmp rbx 0xffffffffffffffe0
jbe r-xdata
sub_140006e50
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi r8
mov rbx rdx
test rcx rcx
je r-xdata
imul rbx rcx
mov eax 0x1
test rbx rbx
cmove rbx rax
xor edx edx
lea rax [ rdx - 0x20 ]
div rcx
cmp rax rbx
jae r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
lea edx [ rax + 0x8 ]
mov r8 rbx
call [ HeapAlloc@IAT ]
test rax rax
jne r-xdata
call sub_140005e08
mov [ rax ] 0xc
test rdi rdi
je r-xdata
mov rcx rbx
call sub_1400060f4
test eax eax
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rdi ] 0xc
xor eax eax
cmp rbx 0xffffffffffffffe0
ja r-xdata
test rdi rdi
je r-xdata
xor eax eax
jmp r-xdata
mov [ rdi ] 0xc
jmp r-xdata
sub_140006eec
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x18 ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x20 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140004ce8
mov rcx [ rbx + 0x28 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140004ce8
mov rcx [ rbx + 0x30 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140004ce8
mov rcx [ rbx + 0x38 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140004ce8
mov rcx [ rbx + 0x40 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140004ce8
mov rcx [ rbx + 0x48 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140004ce8
mov rcx [ rbx + 0x68 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140004ce8
mov rcx [ rbx + 0x70 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140004ce8
mov rcx [ rbx + 0x78 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140004ce8
mov rcx [ rbx + 0x80 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140004ce8
mov rcx [ rbx + 0x88 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140004ce8
mov rcx [ rbx + 0x90 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140004ce8
add rsp 0x20
pop rbx
call sub_140004ce8
sub_140006ff8
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x8 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140004ce8
mov rcx [ rbx + 0x10 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140004ce8
mov rcx [ rbx + 0x58 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140004ce8
mov rcx [ rbx + 0x60 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_140004ce8
add rsp 0x20
pop rbx
call sub_140004ce8
sub_140007064
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x8 ]
call sub_140004ce8
mov rcx [ rbx + 0x10 ]
call sub_140004ce8
mov rcx [ rbx + 0x18 ]
call sub_140004ce8
mov rcx [ rbx + 0x20 ]
call sub_140004ce8
mov rcx [ rbx + 0x28 ]
call sub_140004ce8
mov rcx [ rbx + 0x30 ]
call sub_140004ce8
mov rcx [ rbx ]
call sub_140004ce8
mov rcx [ rbx + 0x40 ]
call sub_140004ce8
mov rcx [ rbx + 0x48 ]
call sub_140004ce8
mov rcx [ rbx + 0x50 ]
call sub_140004ce8
mov rcx [ rbx + 0x58 ]
call sub_140004ce8
mov rcx [ rbx + 0x60 ]
call sub_140004ce8
mov rcx [ rbx + 0x68 ]
call sub_140004ce8
mov rcx [ rbx + 0x38 ]
call sub_140004ce8
mov rcx [ rbx + 0x70 ]
call sub_140004ce8
mov rcx [ rbx + 0x78 ]
call sub_140004ce8
mov rcx [ rbx + 0x80 ]
call sub_140004ce8
mov rcx [ rbx + 0x88 ]
call sub_140004ce8
mov rcx [ rbx + 0x90 ]
call sub_140004ce8
mov rcx [ rbx + 0x98 ]
call sub_140004ce8
mov rcx [ rbx + 0xa0 ]
call sub_140004ce8
mov rcx [ rbx + 0xa8 ]
call sub_140004ce8
mov rcx [ rbx + 0xb0 ]
call sub_140004ce8
mov rcx [ rbx + 0xb8 ]
call sub_140004ce8
mov rcx [ rbx + 0xc0 ]
call sub_140004ce8
mov rcx [ rbx + 0xc8 ]
call sub_140004ce8
mov rcx [ rbx + 0xd0 ]
call sub_140004ce8
mov rcx [ rbx + 0xd8 ]
call sub_140004ce8
mov rcx [ rbx + 0xe0 ]
call sub_140004ce8
mov rcx [ rbx + 0xe8 ]
call sub_140004ce8
mov rcx [ rbx + 0xf0 ]
call sub_140004ce8
mov rcx [ rbx + 0xf8 ]
call sub_140004ce8
mov rcx [ rbx + 0x100 ]
call sub_140004ce8
mov rcx [ rbx + 0x108 ]
call sub_140004ce8
mov rcx [ rbx + 0x110 ]
call sub_140004ce8
mov rcx [ rbx + 0x118 ]
call sub_140004ce8
mov rcx [ rbx + 0x120 ]
call sub_140004ce8
mov rcx [ rbx + 0x128 ]
call sub_140004ce8
mov rcx [ rbx + 0x130 ]
call sub_140004ce8
mov rcx [ rbx + 0x138 ]
call sub_140004ce8
mov rcx [ rbx + 0x140 ]
call sub_140004ce8
mov rcx [ rbx + 0x148 ]
call sub_140004ce8
mov rcx [ rbx + 0x150 ]
call sub_140004ce8
mov rcx [ rbx + 0x168 ]
call sub_140004ce8
mov rcx [ rbx + 0x170 ]
call sub_140004ce8
mov rcx [ rbx + 0x178 ]
call sub_140004ce8
mov rcx [ rbx + 0x180 ]
call sub_140004ce8
mov rcx [ rbx + 0x188 ]
call sub_140004ce8
mov rcx [ rbx + 0x190 ]
call sub_140004ce8
mov rcx [ rbx + 0x160 ]
call sub_140004ce8
mov rcx [ rbx + 0x1a0 ]
call sub_140004ce8
mov rcx [ rbx + 0x1a8 ]
call sub_140004ce8
mov rcx [ rbx + 0x1b0 ]
call sub_140004ce8
mov rcx [ rbx + 0x1b8 ]
call sub_140004ce8
mov rcx [ rbx + 0x1c0 ]
call sub_140004ce8
mov rcx [ rbx + 0x1c8 ]
call sub_140004ce8
mov rcx [ rbx + 0x198 ]
call sub_140004ce8
mov rcx [ rbx + 0x1d0 ]
call sub_140004ce8
mov rcx [ rbx + 0x1d8 ]
call sub_140004ce8
mov rcx [ rbx + 0x1e0 ]
call sub_140004ce8
mov rcx [ rbx + 0x1e8 ]
call sub_140004ce8
mov rcx [ rbx + 0x1f0 ]
call sub_140004ce8
mov rcx [ rbx + 0x1f8 ]
call sub_140004ce8
mov rcx [ rbx + 0x200 ]
call sub_140004ce8
mov rcx [ rbx + 0x208 ]
call sub_140004ce8
mov rcx [ rbx + 0x210 ]
call sub_140004ce8
mov rcx [ rbx + 0x218 ]
call sub_140004ce8
mov rcx [ rbx + 0x220 ]
call sub_140004ce8
mov rcx [ rbx + 0x228 ]
call sub_140004ce8
mov rcx [ rbx + 0x230 ]
call sub_140004ce8
mov rcx [ rbx + 0x238 ]
call sub_140004ce8
mov rcx [ rbx + 0x240 ]
call sub_140004ce8
mov rcx [ rbx + 0x248 ]
call sub_140004ce8
mov rcx [ rbx + 0x250 ]
call sub_140004ce8
mov rcx [ rbx + 0x258 ]
call sub_140004ce8
mov rcx [ rbx + 0x260 ]
call sub_140004ce8
mov rcx [ rbx + 0x268 ]
call sub_140004ce8
mov rcx [ rbx + 0x270 ]
call sub_140004ce8
mov rcx [ rbx + 0x278 ]
call sub_140004ce8
mov rcx [ rbx + 0x280 ]
call sub_140004ce8
mov rcx [ rbx + 0x288 ]
call sub_140004ce8
mov rcx [ rbx + 0x290 ]
call sub_140004ce8
mov rcx [ rbx + 0x298 ]
call sub_140004ce8
mov rcx [ rbx + 0x2a0 ]
call sub_140004ce8
mov rcx [ rbx + 0x2a8 ]
call sub_140004ce8
mov rcx [ rbx + 0x2b0 ]
call sub_140004ce8
mov rcx [ rbx + 0x2b8 ]
call sub_140004ce8
add rsp 0x20
pop rbx
sub_140007460
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x50
lea rbp [ rsp + 0x40 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x8 ] rax
mov ebx [ rbp + 0x60 ]
xor edi edi
mov r12 r9
mov r13d r8d
mov [ rbp ] rdx
test ebx ebx
jle r-xdata
mov r14d [ rbp + 0x78 ]
mov esi edi
test r14d r14d
jne r-xdata
mov r10d ebx
mov rax r9
neg [ rbp + 0x80 ]
mov r9d ebx
mov r8 r12
sbb edx edx
mov ecx r14d
mov [ rsp + 0x28 ] edi
and edx 0x8
mov [ rsp + 0x20 ] rdi
inc edx
call [ MultiByteToWideChar@IAT ]
movsxd r15 eax
test eax eax
jne r-xdata
mov rax [ rcx ]
mov r14d [ rax + 0x4 ]
mov eax ebx
sub eax r10d
dec eax
cmp eax ebx
lea ebx [ rax + 0x1 ]
jl r-xdata
inc rax
test r10d r10d
jne r-xdata
mov r8 0xffffffffffffff0
test eax eax
jle r-xdata
xor eax eax
jmp r-xdata
mov ebx eax
dec r10d
cmp [ rax ] dil
je r-xdata
or r10d 0xffffffff
test rdi rdi
je r-xdata
xor edx edx
lea rax [ rdx - 0x20 ]
div r15
cmp rax 0x2
jb r-xdata
mov rcx [ rbp + 0x8 ]
xor rcx rbp
call sub_1400029f0
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r9d ebx
mov r8 r12
mov edx 0x1
mov ecx r14d
mov [ rsp + 0x28 ] r15d
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea rcx [ r15 * 2 + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rdi - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov r12 [ rbp ]
and [ rsp + 0x28 ] esi
and [ rsp + 0x20 ] rsi
mov rcx r12
mov r9d r15d
mov r8 rdi
mov edx r13d
call sub_1400080d4
movsxd rsi eax
test eax eax
je r-xdata
call sub_140006cc4
mov rdi rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax esi
call sub_140004ce8
mov r8d 0x400
test r8d r13d
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_140008500
sub rsp rax
lea rdi [ rsp + 0x40 ]
test rdi rdi
je r-xdata
mov rax r8
test eax eax
jle r-xdata
mov ecx [ rbp + 0x70 ]
test ecx ecx
je r-xdata
mov [ rdi ] 0xcccc
jmp r-xdata
xor ebx ebx
xor edx edx
lea rax [ rdx - 0x20 ]
div rsi
cmp rax 0x2
jb r-xdata
cmp esi ecx
jg r-xdata
add rdi 0x10
mov r9d r15d
mov r8 rdi
mov edx r13d
mov rcx r12
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] rbx
call sub_1400080d4
xor ecx ecx
test eax eax
je r-xdata
lea rcx [ rsi * 2 + 0x10 ]
cmp rcx r8
ja r-xdata
mov rax [ rbp + 0x68 ]
mov [ rsp + 0x28 ] ecx
mov r9d r15d
mov r8 rdi
mov edx r13d
mov rcx r12
mov [ rsp + 0x20 ] rax
call sub_1400080d4
jmp r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov eax [ rbp + 0x70 ]
xor edx edx
mov [ rsp + 0x38 ] rcx
mov r9d esi
mov r8 rbx
mov [ rsp + 0x30 ] rcx
test eax eax
jne r-xdata
call sub_140006cc4
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
call sub_140004ce8
mov [ rsp + 0x28 ] eax
mov rax [ rbp + 0x68 ]
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x28 ] ecx
mov [ rsp + 0x20 ] rcx
jmp r-xdata
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_140008500
sub rsp rax
lea rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
mov ecx r14d
call [ WideCharToMultiByte@IAT ]
mov esi eax
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
jmp r-xdata
sub_140007730
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x70
mov rsi rdx
mov rdx rcx
lea rcx [ rsp + 0x50 ]
mov rbx r9
mov edi r8d
call sub_140005274
mov eax [ rsp + 0xc0 ]
lea rcx [ rsp + 0x50 ]
mov r9 rbx
mov [ rsp + 0x40 ] eax
mov eax [ rsp + 0xb8 ]
mov r8d edi
mov [ rsp + 0x38 ] eax
mov eax [ rsp + 0xb0 ]
mov rdx rsi
mov [ rsp + 0x30 ] eax
mov rax [ rsp + 0xa8 ]
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0xa0 ]
mov [ rsp + 0x20 ] eax
call sub_140007460
cmp [ rsp + 0x68 ] 0x0
je r-xdata
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rsp r11
pop rdi
retn
mov rcx [ rsp + 0x60 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_1400077c8
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x40
lea rbp [ rsp + 0x30 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp ] rax
mov r14d [ rbp + 0x68 ]
xor edi edi
mov r15d r9d
mov r12 r8
mov r13d edx
test r14d r14d
jne r-xdata
neg [ rbp + 0x70 ]
mov ecx r14d
mov [ rsp + 0x28 ] edi
sbb edx edx
mov [ rsp + 0x20 ] rdi
and edx 0x8
inc edx
call [ MultiByteToWideChar@IAT ]
movsxd rsi eax
test eax eax
jne r-xdata
mov rax [ rcx ]
mov r14d [ rax + 0x4 ]
jle r-xdata
xor eax eax
jmp r-xdata
mov rbx rdi
mov rax 0x7ffffffffffffff0
cmp rsi rax
ja r-xdata
mov rcx [ rbp ]
xor rcx rbp
call sub_1400029f0
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r8 rsi
xor edx edx
mov rcx rbx
add r8 r8
call sub_140007ec0
mov r9d r15d
mov r8 r12
mov edx 0x1
mov ecx r14d
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea rcx [ rsi * 2 + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov r9 [ rbp + 0x60 ]
mov r8d eax
mov rdx rbx
mov ecx r13d
call [ GetStringTypeW@IAT ]
mov edi eax
call sub_140006cc4
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax edi
call sub_140004ce8
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_140008500
sub rsp rax
lea rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
jmp r-xdata
sub_140007930
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x60
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x40 ]
mov ebx r9d
mov rdi r8
call sub_140005274
mov eax [ rsp + 0xa0 ]
lea rcx [ rsp + 0x40 ]
mov r9d ebx
mov [ rsp + 0x30 ] eax
mov eax [ rsp + 0x98 ]
mov r8 rdi
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x90 ]
mov edx esi
mov [ rsp + 0x20 ] rax
call sub_1400077c8
cmp [ rsp + 0x58 ] 0x0
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x60
pop rdi
retn
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_1400079c0
mov r11 rcx
mov r10 rdx
cmp r8 0x10
jbe r-xdata
mov r10 r11
sub rdx rcx
jae r-xdata
bt [ rw-data ] 0x1
jae r-xdata
mov rax r10
add rax r8
cmp rcx rax
jl r-xdata
test cl 0x7
je r-xdata
push rdi
push rsi
mov rdi rcx
mov rsi r10
mov rcx r8
[ rdi ] [ rsi ]
pop rsi
pop rdi
mov rax r11
retn
add rcx r8
test cl 0x7
je r-xdata
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
inc rcx
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
cmp rdx 0x1000
jb r-xdata
mov rax [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
add rcx 0x20
mov [ rcx - 0x20 ] rax
mov [ rcx - 0x18 ] r10
mov rax [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec r9
mov [ rcx - 0x10 ] rax
mov [ rcx - 0x8 ] r10
jne r-xdata
test r8 r8
jne r-xdata
mov rax [ rdx + rcx ]
mov [ rcx ] rax
add rcx 0x8
dec r9
jne r-xdata
test cl 0x4
je r-xdata
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
add rcx 0x2
cmp rdx 0xfffffffffffff000
ja r-xdata
mov rax [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
sub rcx 0x20
mov [ rcx + 0x18 ] rax
mov [ rcx + 0x10 ] r10
mov rax [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec r9
mov [ rcx + 0x8 ] rax
mov [ rcx ] r10
jne r-xdata
test r8 r8
jne r-xdata
sub rcx 0x8
mov rax [ rdx + rcx ]
dec r9
mov [ rcx ] rax
jne r-xdata
test cl 0x4
je r-xdata
sub rcx 0x2
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
mov eax 0x20
and r8 0x1f
jmp r-xdata
lea rdx [ rdx + rcx ]
mov r10 rcx
jmp r-xdata
mov rax r11
retn
and r8 0x7
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
add rcx 0x4
mov eax 0x20
and r8 0x1f
jmp r-xdata
sub rcx r8
mov r10 rcx
lea rdx [ rdx + rcx ]
jmp r-xdata
mov rax r11
retn
and r8 0x7
sub rcx 0x4
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
add rcx 0x80
dec eax
jne r-xdata
sub rcx 0x1000
mov eax 0x40
lea r9 [ __dos_header ]
mov rax r8
mov eax [ r9 + r8 * 4 + 0x7a93 ]
add rax r9
jmp rax
sub rcx 0x80
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
dec eax
jne r-xdata
add rcx 0x1000
mov eax 0x40
mov r9 [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
movnti [ rcx ] r9
movnti [ rcx + 0x8 ] r10
mov r9 [ rdx + rcx + 0x10 ]
mov r10 [ rdx + rcx + 0x18 ]
movnti [ rcx + 0x10 ] r9
movnti [ rcx + 0x18 ] r10
mov r9 [ rdx + rcx + 0x20 ]
mov r10 [ rdx + rcx + 0x28 ]
add rcx 0x40
movnti [ rcx - 0x20 ] r9
movnti [ rcx - 0x18 ] r10
mov r9 [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec eax
movnti [ rcx - 0x10 ] r9
movnti [ rcx - 0x8 ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
mov r9 [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
movnti [ rcx - 0x8 ] r9
movnti [ rcx - 0x10 ] r10
mov r9 [ rdx + rcx - 0x18 ]
mov r10 [ rdx + rcx - 0x20 ]
movnti [ rcx - 0x18 ] r9
movnti [ rcx - 0x20 ] r10
mov r9 [ rdx + rcx - 0x28 ]
mov r10 [ rdx + rcx - 0x30 ]
sub rcx 0x40
movnti [ rcx + 0x18 ] r9
movnti [ rcx + 0x10 ] r10
mov r9 [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec eax
movnti [ rcx + 0x8 ] r9
movnti [ rcx ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
[ rsp ] 0x0
jmp r-xdata
[ rsp ] 0x0
jmp r-xdata
sub_140007ec0
mov r11 rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
movzx edx dl
bt [ rw-data ] 0x1
jae r-xdata
mov rax r11
retn
mov [ rcx ] dl
inc rcx
dec r8
jne r-xdata
mov r9 0x101010101010101
imul rdx r9
cmp r8 0x40
jb r-xdata
push rdi
mov rdi rcx
mov eax edx
mov rcx r8
[ rdi ]
pop rdi
jmp r-xdata
mov r9 r8
and r8 0x7
shr r9 0x3
je r-xdata
neg rcx
and ecx 0x7
je r-xdata
nop
nop
add rcx r11
mov r9 r8
and r8 0x3f
shr r9 0x6
jne r-xdata
sub r8 rcx
mov [ r11 ] rdx
mov [ rcx ] rdx
add rcx 0x8
dec r9
jne r-xdata
cmp r9 0x1c00
jae r-xdata
movnti [ rcx ] rdx
movnti [ rcx + 0x8 ] rdx
movnti [ rcx + 0x10 ] rdx
add rcx 0x40
movnti [ rcx - 0x28 ] rdx
movnti [ rcx - 0x20 ] rdx
dec r9
movnti [ rcx - 0x18 ] rdx
movnti [ rcx - 0x10 ] rdx
movnti [ rcx - 0x8 ] rdx
jne r-xdata
mov [ rcx ] rdx
mov [ rcx + 0x8 ] rdx
mov [ rcx + 0x10 ] rdx
add rcx 0x40
mov [ rcx - 0x28 ] rdx
mov [ rcx - 0x20 ] rdx
dec r9
mov [ rcx - 0x18 ] rdx
mov [ rcx - 0x10 ] rdx
mov [ rcx - 0x8 ] rdx
jne r-xdata
[ rsp ] 0x0
jmp r-xdata
jmp r-xdata
sub_140007fcc
sub rsp 0x28
test rcx rcx
jne r-xdata
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
add rsp 0x28
jmp [ HeapSize@IAT ]
call sub_140005e08
mov [ rax ] 0x16
call sub_140005d3c
or rax 0xffffffffffffffff
add rsp 0x28
retn
sub_140008014
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r14
sub rsp 0x20
mov rbp rcx
xor edi edi
mov esi 0xe3
lea r14 [ r--data ]
mov rax rbx
add rax rax
mov eax [ r14 + rax * 8 + 0x8 ]
jns r-xdata
lea edi [ rbx + 0x1 ]
lea esi [ rbx - 0x1 ]
jmp r-xdata
lea eax [ rsi + rdi ]
mov r8d 0x55
mov rcx rbp
cdq
sub eax edx
sar eax 0x1
movsxd rbx eax
mov rdx rbx
add rdx rdx
mov rdx [ r14 + rdx * 8 ]
call sub_140008164
test eax eax
je r-xdata
or eax 0xffffffff
jmp r-xdata
cmp edi esi
jle r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r14
retn
sub_1400080a0
sub rsp 0x28
test rcx rcx
je r-xdata
xor eax eax
call sub_140008014
test eax eax
js r-xdata
cdqe
cmp rax 0xe4
jae r-xdata
lea rcx [ r--data ]
add rax rax
mov eax [ rcx + rax * 8 ]
jmp r-xdata
add rsp 0x28
retn
sub_1400080d4
mov r11 rsp
mov [ r11 + 0x8 ] rbx
mov [ r11 + 0x10 ] rsi
push rdi
sub rsp 0x50
mov r10 [ rw-data ]
mov ebx r9d
mov rdi r8
xor r10 [ rw-data ]
mov esi edx
je r-xdata
call sub_1400080a0
mov r9d ebx
mov r8 rdi
mov ecx eax
mov eax [ rsp + 0x88 ]
mov edx esi
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x80 ]
mov [ rsp + 0x20 ] rax
call [ LCMapStringW@IAT ]
xor eax eax
mov [ r11 - 0x18 ] rax
mov [ r11 - 0x20 ] rax
mov [ r11 - 0x28 ] rax
mov eax [ rsp + 0x88 ]
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x80 ]
mov [ r11 - 0x38 ] rax
call r10
jmp r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x50
pop rdi
retn
sub_140008164
xor r9d r9d
mov r10 rdx
mov r11 rcx
test r8 r8
je r-xdata
mov eax r9d
retn
sub r11 rdx
movzx edx [ r10 ]
lea eax [ rdx - 0x41 ]
cmp ax 0x19
ja r-xdata
add cx 0x20
add r10 0x2
dec r8
je r-xdata
add dx 0x20
movzx eax dx
movzx r9d cx
sub r9d eax
test cx cx
je r-xdata
cmp cx dx
je r-xdata
movzx ecx [ r11 + r10 ]
lea eax [ rcx - 0x41 ]
cmp ax 0x19
ja r-xdata
sub_1400081e4
sub rsp 0x28
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_140005e08
mov [ rax ] 0x9
jmp r-xdata
call sub_140005e08
mov [ rax ] 0x9
call sub_140005d3c
cmp ecx [ rw-data ]
jae r-xdata
xor eax eax
movsxd rcx ecx
lea rdx [ rw-data ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ rdx + rax * 8 ]
movsx eax [ rax + rcx + 0x8 ]
and eax 0x40
jmp r-xdata
add rsp 0x28
retn
sub_140008244
push rbx
sub rsp 0x20
mov rbx rcx
test rcx rcx
jne r-xdata
call sub_140008290
test eax eax
je r-xdata
add rsp 0x20
pop rbx
jmp sub_140008318
test [ rbx + 0x18 ] 0x4000
je r-xdata
or eax 0xffffffff
jmp r-xdata
xor eax eax
mov rcx rbx
call sub_1400081bc
mov ecx eax
call sub_140008658
neg eax
sbb eax eax
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_140008290
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov eax [ rcx + 0x18 ]
xor esi esi
mov rbx rcx
and al 0x3
cmp al 0x2
jne r-xdata
mov rcx [ rbx + 0x10 ]
and [ rbx + 0x8 ] 0x0
mov eax esi
mov rsi [ rsp + 0x38 ]
mov [ rbx ] rcx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test [ rcx + 0x18 ] 0x108
je r-xdata
mov edi [ rcx ]
sub edi [ rcx + 0x10 ]
test edi edi
jle r-xdata
call sub_1400081bc
mov rdx [ rbx + 0x10 ]
mov r8d edi
mov ecx eax
call sub_140008730
cmp eax edi
jne r-xdata
or [ rbx + 0x18 ] 0x20
or esi 0xffffffff
mov eax [ rbx + 0x18 ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ rbx + 0x18 ] eax
jmp r-xdata
sub_140008318
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r13
push r14
push r15
sub rsp 0x30
mov r14d ecx
xor esi esi
xor edi edi
lea ecx [ rsi + 0x1 ]
call sub_140004ae8
nop
xor ebx ebx
or r13d 0xffffffff
mov ecx 0x1
call sub_140004cd0
cmp r14d 0x1
cmove edi esi
mov eax edi
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x30
pop r15
pop r14
pop r13
retn
movsxd r15 ebx
mov rax [ rw-data ]
mov rdx [ rax + r15 * 8 ]
test rdx rdx
je r-xdata
inc ebx
jmp r-xdata
test [ rdx + 0x18 ] 0x83
je r-xdata
mov [ rsp + 0x20 ] ebx
cmp ebx [ rw-data ]
jge r-xdata
mov ecx ebx
call sub_140006ad4
nop
mov rax [ rw-data ]
mov rcx [ rax + r15 * 8 ]
test [ rcx + 0x18 ] 0x83
je r-xdata
mov rdx [ rw-data ]
mov rdx [ rdx + r15 * 8 ]
mov ecx ebx
call sub_140006b58
cmp r14d 0x1
jne r-xdata
test r14d r14d
jne r-xdata
call sub_140008244
cmp eax r13d
je r-xdata
test [ rcx + 0x18 ] 0x2
je r-xdata
inc esi
mov [ rsp + 0x24 ] esi
jmp r-xdata
call sub_140008244
cmp eax r13d
cmove edi r13d
mov [ rsp + 0x28 ] edi
sub_140008400
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
xor edi edi
lea ecx [ rdi + 0x1 ]
call sub_140004ae8
nop
lea ebx [ rdi + 0x3 ]
mov ecx 0x1
call sub_140004cd0
mov eax edi
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
movsxd rsi ebx
mov rax [ rw-data ]
mov rcx [ rax + rsi * 8 ]
test rcx rcx
je r-xdata
inc ebx
jmp r-xdata
test [ rcx + 0x18 ] 0x83
je r-xdata
mov [ rsp + 0x20 ] ebx
cmp ebx [ rw-data ]
jge r-xdata
cmp ebx 0x14
jl r-xdata
call sub_140008fc8
cmp eax 0xffffffff
je r-xdata
mov rax [ rw-data ]
mov rcx [ rax + rsi * 8 ]
add rcx 0x30
call [ DeleteCriticalSection@IAT ]
mov rcx [ rw-data ]
mov rcx [ rcx + rsi * 8 ]
call sub_140004ce8
mov rax [ rw-data ]
and [ rax + rsi * 8 ] 0x0
inc edi
mov [ rsp + 0x24 ] edi
sub_1400084a8
push rdi
sub rsp 0x20
lea rdi [ rw-data ]
cmp [ rw-data ] rdi
je r-xdata
add rsp 0x20
pop rdi
retn
mov ecx 0xc
call sub_140004ae8
nop
mov rdx rdi
lea rcx [ rw-data ]
call sub_1400051e8
mov [ rw-data ] rax
mov ecx 0xc
call sub_140004cd0
sub_140008500
sub rsp 0x10
mov [ rsp ] r10
mov [ rsp + 0x8 ] r11
xor r11 r11
lea r10 [ rsp + 0x18 ]
sub r10 rax
cmovb r10 r11
mov r11 [ gs : 0x10 ]
cmp r10 r11
jae r-xdata
mov r10 [ rsp ]
mov r11 [ rsp + 0x8 ]
add rsp 0x10
retn
and r10w 0xf000
lea r11 [ r11 - 0x1000 ]
mov [ r11 ] 0x0
cmp r10 r11
jne r-xdata
sub_140008550
push rbx
sub rsp 0x10
mov r9d 0x2
xor ecx ecx
lea r10d [ r9 - 0x1 ]
mov [ rw-data ] r9d
mov eax r10d
mov [ rw-data ] r10d
cpuid
mov [ rsp ] eax
mov [ rsp + 0x4 ] ebx
mov [ rsp + 0xc ] edx
bt ecx 0x14
jae r-xdata
mov r8d [ rw-data ]
xor ecx ecx
mov eax 0x7
cpuid
mov [ rsp ] eax
mov [ rsp + 0x8 ] ecx
mov [ rsp + 0xc ] edx
bt ebx 0x9
jae r-xdata
mov [ rw-data ] r9d
mov [ rw-data ] 0x6
bt ecx 0x1c
jae r-xdata
xor eax eax
xor ecx ecx
cpuid
mov [ rsp ] eax
cmp ebx 0x756e6547
jne r-xdata
or r8d r9d
mov [ rw-data ] r8d
mov [ rw-data ] 0x3
mov [ rw-data ] 0xe
xor eax eax
add rsp 0x10
pop rbx
retn
cmp edx 0x49656e69
jne r-xdata
cmp ecx 0x6c65746e
jne r-xdata
xor ecx ecx
mov eax r10d
cpuid
and eax 0xfff3ff0
mov [ rsp + 0x4 ] ebx
mov [ rsp + 0x8 ] ecx
mov [ rsp + 0xc ] edx
cmp eax 0x106c0
je r-xdata
or r8d r10d
mov [ rw-data ] r8d
cmp eax 0x20660
je r-xdata
cmp eax 0x20670
je r-xdata
add eax 0xfffcf9b0
cmp eax 0x20
ja r-xdata
mov rcx 0x100010001
bt rcx rax
jae r-xdata
sub_140008658
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r14
sub rsp 0x20
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_140005e08
mov [ rax ] 0x9
jmp r-xdata
call sub_140005e08
mov [ rax ] 0x9
call sub_140005d3c
cmp edi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rbx rdi
mov rsi rdi
sar rsi 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r14 + rsi * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_140009108
nop
mov rax [ r14 + rsi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_140005e08
mov [ rax ] 0x9
or ebx 0xffffffff
mov ecx edi
call sub_14000924c
mov rcx rax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r14
pop rdi
pop rsi
retn
xor ebx ebx
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_1400092c0
mov eax ebx
jmp r-xdata
call sub_140005d98
mov [ rax ] ebx
test ebx ebx
je r-xdata
sub_140008730
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
push r14
push r15
sub rsp 0x20
mov r14d r8d
mov r15 rdx
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_140005d98
and [ rax ] 0x0
call sub_140005e08
mov [ rax ] 0x9
jmp r-xdata
call sub_140005d98
and [ rax ] 0x0
call sub_140005e08
mov [ rax ] 0x9
call sub_140005d3c
cmp edi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rbx rdi
mov rsi rdi
sar rsi 0x5
lea r12 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r12 + rsi * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_140009108
nop
mov rax [ r12 + rsi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_140005e08
mov [ rax ] 0x9
call sub_140005d98
and [ rax ] 0x0
or ebx 0xffffffff
mov r8d r14d
mov rdx r15
mov ecx edi
call sub_140008810
mov ebx eax
jmp r-xdata
mov rbx [ rsp + 0x58 ]
add rsp 0x20
pop r15
pop r14
pop r12
pop rdi
pop rsi
retn
mov ecx edi
call sub_1400092c0
mov eax ebx
jmp r-xdata
sub_140008810
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1a30 ]
mov eax 0x1b30
call sub_140008500
sub rsp rax
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1a20 ] rax
xor edi edi
mov r15d r8d
mov r14 rdx
and [ rsp + 0x48 ] edi
movsxd rbx ecx
test r8d r8d
jne r-xdata
test rdx rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov r12 rbx
lea rax [ rw-data ]
mov r13 rbx
sar r13 0x5
and r12d 0x1f
mov rcx [ rax + r13 * 8 ]
mov [ rsp + 0x50 ] r13
imul r12 r12 0x58
mov sil [ r12 + rcx + 0x38 ]
add sil sil
sar sil 0x1
lea eax [ rsi - 0x1 ]
cmp al 0x1
ja r-xdata
call sub_140005d98
and [ rax ] edi
call sub_140005e08
mov [ rax ] 0x16
call sub_140005d3c
mov rcx [ rbp + 0x1a20 ]
xor rcx rsp
call sub_1400029f0
mov rbx [ rsp + 0x1b88 ]
add rsp 0x1b30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
test [ r12 + rcx + 0x8 ] 0x20
je r-xdata
mov eax r15d
not eax
test al 0x1
je r-xdata
mov ecx ebx
call sub_1400081e4
test eax eax
je r-xdata
xor edx edx
mov ecx ebx
lea r8d [ rdx + 0x2 ]
call sub_140009378
lea rax [ rw-data ]
mov rcx [ rax + r13 * 8 ]
test [ r12 + rcx + 0x8 ] 0x80
je r-xdata
lea rax [ rw-data ]
mov rax [ rax + r13 * 8 ]
test [ r12 + rax + 0x8 ] 0x80
je r-xdata
mov rcx [ r12 + rcx ]
and [ rsp + 0x20 ] rdi
lea r9 [ rsp + 0x4c ]
mov r8d r15d
mov rdx r14
call [ WriteFile@IAT ]
test eax eax
je r-xdata
xor ebx ebx
mov r13 r14
mov [ rsp + 0x44 ] ebx
test sil sil
jne r-xdata
call sub_1400035ec
xor ebx ebx
lea rdx [ rsp + 0x5c ]
mov rcx [ rax + 0xc0 ]
lea rax [ rw-data ]
cmp [ rcx + 0x138 ] rbx
mov rcx [ rax + r13 * 8 ]
mov rcx [ r12 + rcx ]
sete bl
call [ GetConsoleMode@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov ebx eax
mov edi [ rsp + 0x4c ]
xor ebx ebx
jmp r-xdata
cmp sil 0x2
jne r-xdata
test r15d r15d
je r-xdata
test ebx ebx
je r-xdata
sub edi [ rsp + 0x48 ]
mov eax edi
test ebx ebx
je r-xdata
test edi edi
jne r-xdata
test r15d r15d
je r-xdata
test r15d r15d
je r-xdata
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rax [ rcx + rax * 8 ]
test [ r12 + rax + 0x8 ] 0x40
je r-xdata
lea edx [ rbx + 0xd ]
call [ GetConsoleCP@IAT ]
and [ rsp + 0x58 ] edi
mov rbx r14
mov [ rsp + 0x5c ] eax
test r15d r15d
je r-xdata
test sil sil
je r-xdata
cmp ebx 0x5
jne r-xdata
mov r8d 0xd
mov edx 0xd
call sub_140005e08
mov [ rax ] 0x1c
call sub_140005d98
and [ rax ] 0x0
jmp r-xdata
cmp [ r14 ] 0x1a
je r-xdata
and [ rsp + 0x20 ] 0x0
lea rax [ rbp + 0x620 ]
mov r8d esi
sub r8d eax
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
lea r9 [ rsp + 0x4c ]
lea rdx [ rbp + 0x620 ]
mov rcx [ r12 + rcx ]
mov [ rsp + 0x48 ] ebx
call [ WriteFile@IAT ]
mov ebx [ rsp + 0x44 ]
test eax eax
je r-xdata
mov al [ r13 ]
inc r13
cmp al 0xa
jne r-xdata
mov ebx [ rsp + 0x44 ]
jmp r-xdata
test sil sil
jne r-xdata
mov ecx ebx
call sub_140005db8
jmp r-xdata
call sub_140005e08
mov [ rax ] 0x9
call sub_140005d98
mov [ rax ] ebx
jmp r-xdata
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
lea rax [ rsp + 0x70 ]
sub ecx eax
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x28 ] 0xd55
mov eax ecx
mov ecx 0xfde9
cdq
sub eax edx
xor edx edx
sar eax 0x1
mov r9d eax
lea rax [ rbp + 0x620 ]
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov [ rsp + 0x44 ] eax
test eax eax
je r-xdata
movzx eax [ r13 ]
add r13 0x2
cmp ax 0xa
jne r-xdata
and [ rsp + 0x20 ] 0x0
lea rax [ rbp + 0x620 ]
mov r8d esi
sub r8d eax
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
lea r9 [ rsp + 0x4c ]
lea rdx [ rbp + 0x620 ]
mov rcx [ r12 + rcx ]
mov [ rsp + 0x48 ] ebx
call [ WriteFile@IAT ]
mov ebx [ rsp + 0x44 ]
test eax eax
je r-xdata
movzx eax [ r13 ]
add r13 0x2
cmp ax 0xa
jne r-xdata
or eax 0xffffffff
jmp r-xdata
add edi [ rsp + 0x4c ]
lea rax [ rbp + 0x620 ]
sub rsi rax
movsxd rax [ rsp + 0x4c ]
cmp rax rsi
jl r-xdata
inc rcx
mov [ rsi ] al
inc rsi
cmp rcx 0x13ff
jb r-xdata
mov [ rsi ] dl
inc ebx
inc rsi
inc rcx
lea eax [ rsi - 0x1 ]
cmp al 0x1
ja r-xdata
mov cl [ rbx ]
xor eax eax
cmp cl 0xa
sete al
mov [ rsp + 0x44 ] eax
lea rax [ rw-data ]
mov rdx [ rax + r13 * 8 ]
cmp [ r12 + rdx + 0x50 ] 0x0
je r-xdata
xor esi esi
add rdx 0x2
mov [ rcx ] ax
add rcx 0x2
cmp rdx 0x6a8
jb r-xdata
mov [ rcx ] r8w
add rcx 0x2
add rdx 0x2
add edi [ rsp + 0x4c ]
lea rax [ rbp + 0x620 ]
sub rsi rax
movsxd rax [ rsp + 0x4c ]
cmp rax rsi
jl r-xdata
add rcx 0x2
mov [ rsi ] ax
add rsi 0x2
cmp rcx 0x13fe
jb r-xdata
mov [ rsi ] dx
add ebx 0x2
add rsi 0x2
add rcx 0x2
mov eax r13d
mov edx 0xd
sub eax r14d
cmp eax r15d
jb r-xdata
mov eax r13d
sub eax r14d
cmp eax r15d
jae r-xdata
mov r13d [ rsp + 0x44 ]
movzx eax [ rbx ]
xor r13d r13d
cmp ax 0xa
mov [ rsp + 0x40 ] ax
sete r13b
add rbx 0x2
mov [ rsp + 0x44 ] r13d
jmp r-xdata
movsx ecx cl
call sub_140009330
test eax eax
je r-xdata
mov al [ r12 + rdx + 0x4c ]
mov [ rsp + 0x61 ] cl
mov r8d 0x2
mov [ rsp + 0x60 ] al
and [ r12 + rdx + 0x50 ] 0x0
lea rdx [ rsp + 0x60 ]
jmp r-xdata
call [ GetLastError@IAT ]
mov ebx eax
mov eax [ rsp + 0x44 ]
add esi [ rsp + 0x4c ]
mov eax [ rsp + 0x44 ]
cmp eax esi
jg r-xdata
mov eax r13d
sub eax r14d
cmp eax r15d
jae r-xdata
mov eax r13d
mov edx 0xd
sub eax r14d
cmp eax r15d
jb r-xdata
mov eax r13d
sub eax r14d
cmp eax r15d
jae r-xdata
mov ebx [ rsp + 0x48 ]
lea rsi [ rbp + 0x620 ]
xor ecx ecx
jmp r-xdata
mov r13 [ rsp + 0x50 ]
movzx ecx [ rsp + 0x40 ]
call sub_140009568
cmp ax [ rsp + 0x40 ]
jne r-xdata
lea eax [ rsi - 0x1 ]
cmp al 0x1
ja r-xdata
mov r8d 0x1
mov rdx rbx
mov rax r15
sub rax rbx
add rax r14
cmp rax 0x1
jle r-xdata
lea rcx [ rsp + 0x40 ]
call sub_140009560
cmp eax 0xffffffff
je r-xdata
mov edi r13d
mov r8d 0xd
sub edi r14d
cmp edi r15d
jb r-xdata
and [ rsp + 0x20 ] 0x0
mov r8d eax
mov rax [ rsp + 0x50 ]
movsxd rcx esi
lea rdx [ rbp + 0x620 ]
lea r9 [ rsp + 0x4c ]
add rdx rcx
lea rcx [ rw-data ]
sub r8d esi
mov rcx [ rcx + rax * 8 ]
mov rcx [ r12 + rcx ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
jmp r-xdata
mov ebx [ rsp + 0x48 ]
lea rsi [ rbp + 0x620 ]
xor ecx ecx
jmp r-xdata
mov ebx [ rsp + 0x44 ]
jmp r-xdata
jmp r-xdata
add edi 0x2
test r13d r13d
je r-xdata
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
mov ecx [ rsp + 0x5c ]
lea rax [ rsp + 0x60 ]
lea r8 [ rsp + 0x40 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] 0x5
inc rbx
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov r13d eax
test eax eax
je r-xdata
mov al [ rbx ]
lea rdx [ rw-data ]
inc edi
mov rcx [ rdx + r13 * 8 ]
mov [ r12 + rcx + 0x4c ] al
mov rax [ rdx + r13 * 8 ]
mov [ r12 + rax + 0x50 ] 0x1
lea rcx [ rsp + 0x40 ]
mov r8d 0x2
mov rdx rbx
call sub_140009560
cmp eax 0xffffffff
je r-xdata
lea rcx [ rsp + 0x70 ]
xor edx edx
jmp r-xdata
cmp eax esi
jg r-xdata
mov eax 0xd
mov ecx eax
mov [ rsp + 0x40 ] ax
call sub_140009568
cmp ax [ rsp + 0x40 ]
jne r-xdata
mov rcx [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
lea rax [ rw-data ]
mov rcx [ rax + rcx * 8 ]
lea r9 [ rsp + 0x58 ]
lea rdx [ rsp + 0x60 ]
mov rcx [ r12 + rcx ]
mov r8d r13d
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc rbx
jmp r-xdata
inc edi
inc [ rsp + 0x48 ]
mov edi ebx
sub edi r14d
add edi [ rsp + 0x48 ]
cmp [ rsp + 0x58 ] r13d
jl r-xdata
cmp [ rsp + 0x44 ] 0x0
mov r13 [ rsp + 0x50 ]
je r-xdata
mov eax ebx
sub eax r14d
cmp eax r15d
jae r-xdata
and [ rsp + 0x20 ] 0x0
lea rax [ rw-data ]
mov [ rsp + 0x60 ] 0xd
mov rcx [ rax + r13 * 8 ]
lea r9 [ rsp + 0x58 ]
lea rdx [ rsp + 0x60 ]
mov rcx [ r12 + rcx ]
mov r8d 0x1
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ rsp + 0x58 ] 0x1
jl r-xdata
inc [ rsp + 0x48 ]
inc edi
jmp r-xdata
sub_140008f4c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
or edi 0xffffffff
mov rbx rcx
test rcx rcx
jne r-xdata
test [ rcx + 0x18 ] 0x83
je r-xdata
call sub_140005e08
mov [ rax ] 0x16
call sub_140005d3c
or eax edi
jmp r-xdata
and [ rbx + 0x18 ] 0x0
mov eax edi
call sub_140008290
mov rcx rbx
mov edi eax
call sub_140009744
mov rcx rbx
call sub_1400081bc
mov ecx eax
call sub_1400095c4
test eax eax
jns r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx + 0x28 ]
test rcx rcx
je r-xdata
or edi 0xffffffff
jmp r-xdata
call sub_140004ce8
and [ rbx + 0x28 ] 0x0
sub_140008fc8
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x20
mov rbx rcx
or edi 0xffffffff
xor eax eax
test rcx rcx
setne al
test eax eax
jne r-xdata
test [ rcx + 0x18 ] 0x40
je r-xdata
call sub_140005e08
mov [ rax ] 0x16
call sub_140005d3c
call sub_140006a6c
nop
mov rcx rbx
call sub_140008f4c
mov edi eax
mov rcx rbx
call sub_140006b08
jmp r-xdata
and [ rcx + 0x18 ] 0x0
jmp r-xdata
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov eax edi
jmp r-xdata
sub_140009040
sub rdx rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
test cl 0x7
je r-xdata
xor rax rax
retn
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov r9 r8
shr r9 0x3
jne r-xdata
nop
sbb eax eax
sbb eax 0xffffffff
retn
inc rcx
dec r8
jne r-xdata
shr r9 0x2
je r-xdata
inc rcx
dec r8
test cl 0x7
jne r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov rcx [ rcx + rdx ]
bswap rax
bswap rcx
cmp rax rcx
sbb eax eax
sbb eax 0xffffffff
retn
mov rax [ rcx + 0x8 ]
cmp rax [ rdx + rcx + 0x8 ]
jne r-xdata
add rcx 0x8
dec r9
jne r-xdata
add rcx 0x8
mov rax [ rcx + 0x10 ]
cmp rax [ rdx + rcx + 0x10 ]
jne r-xdata
and r8 0x7
jmp r-xdata
add rcx 0x8
mov rax [ rcx + 0x18 ]
cmp rax [ rdx + rcx + 0x18 ]
jne r-xdata
add rcx 0x8
add rcx 0x20
dec r9
jne r-xdata
and r8 0x1f
sub_140009108
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r15
sub rsp 0x20
movsxd rbx ecx
mov rsi rbx
sar rsi 0x5
lea r15 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rdi [ r15 + rsi * 8 ]
cmp [ rbx + rdi + 0xc ] 0x0
jne r-xdata
mov rcx [ r15 + rsi * 8 ]
add rcx 0x10
add rcx rbx
call [ EnterCriticalSection@IAT ]
mov eax 0x1
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r15
retn
mov ecx 0xa
call sub_140004ae8
nop
cmp [ rbx + rdi + 0xc ] 0x0
jne r-xdata
mov ecx 0xa
call sub_140004cd0
lea rcx [ rbx + 0x10 ]
add rcx rdi
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
inc [ rbx + rdi + 0xc ]
sub_1400091a0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rdi
push r14
sub rsp 0x20
test ecx ecx
js r-xdata
call sub_140005e08
mov [ rax ] 0x9
call sub_140005d98
and [ rax ] 0x0
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
movsxd rbx ecx
lea r14 [ rw-data ]
mov rdi rbx
and ebx 0x1f
sar rdi 0x5
imul rbx rbx 0x58
mov rax [ r14 + rdi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
cmp [ rax + rbx ] 0xffffffffffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov rax [ r14 + rdi * 8 ]
or [ rbx + rax ] 0xffffffffffffffff
xor eax eax
jmp r-xdata
test ecx ecx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rdi [ rsp + 0x38 ]
add rsp 0x20
pop r14
retn
mov ecx 0xfffffff6
dec ecx
je r-xdata
mov ecx 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
xor edx edx
call [ SetStdHandle@IAT ]
mov ecx 0xfffffff4
jmp r-xdata
sub_14000924c
sub rsp 0x28
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_140005d98
and [ rax ] 0x0
call sub_140005e08
mov [ rax ] 0x9
jmp r-xdata
call sub_140005d98
and [ rax ] 0x0
call sub_140005e08
mov [ rax ] 0x9
call sub_140005d3c
cmp ecx [ rw-data ]
jae r-xdata
or rax 0xffffffffffffffff
movsxd rdx ecx
lea rcx [ rw-data ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rax [ rcx + rax * 8 ]
test [ rax + rdx + 0x8 ] 0x1
je r-xdata
mov rax [ rax + rdx ]
jmp r-xdata
add rsp 0x28
retn
sub_1400092ec
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
call sub_140005274
mov rax [ rsp + 0x20 ]
movzx edx bl
mov rcx [ rax + 0x108 ]
movzx eax [ rcx + rdx * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_140009330
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_140005274
mov rax [ rsp + 0x20 ]
movzx edx bl
mov rcx [ rax + 0x108 ]
movzx eax [ rcx + rdx * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_140009378
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
movsxd rbx ecx
mov edi r8d
mov rsi rdx
mov ecx ebx
call sub_14000924c
cmp rax 0xffffffffffffffff
jne r-xdata
lea r8 [ rsp + 0x48 ]
mov r9d edi
mov rdx rsi
mov rcx rax
call [ SetFilePointerEx@IAT ]
test eax eax
jne r-xdata
call sub_140005e08
mov [ rax ] 0x9
mov rcx rbx
mov rax rbx
lea rdx [ rw-data ]
sar rax 0x5
and ecx 0x1f
mov rax [ rdx + rax * 8 ]
imul rcx rcx 0x58
and [ rax + rcx + 0x8 ] 0xfd
mov rax [ rsp + 0x48 ]
call [ GetLastError@IAT ]
mov ecx eax
call sub_140005db8
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
or rax 0xffffffffffffffff
jmp r-xdata
sub_14000940c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r14
sub rsp 0x50
xor r14d r14d
mov rbp r8
mov rsi rdx
mov rdi rcx
test rdx rdx
je r-xdata
xor eax eax
test r8 r8
je r-xdata
cmp [ rdx ] r14b
jne r-xdata
lea rcx [ rsp + 0x30 ]
mov rdx r9
call sub_140005274
mov rax [ rsp + 0x30 ]
cmp [ rax + 0x138 ] r14
jne r-xdata
test rcx rcx
je r-xdata
movzx ecx [ rsi ]
lea rdx [ rsp + 0x30 ]
call sub_1400092ec
mov ebx 0x1
test eax eax
je r-xdata
test rdi rdi
je r-xdata
mov [ rcx ] r14w
mov eax r14d
test rdi rdi
mov r9d ebx
setne al
mov r8 rsi
mov edx 0x9
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x30 ]
mov [ rsp + 0x20 ] rdi
mov ecx [ rax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov rcx [ rsp + 0x30 ]
mov r9d [ rcx + 0xd4 ]
cmp r9d ebx
jle r-xdata
mov ebx 0x1
jmp r-xdata
movzx eax [ rsi ]
mov [ rdi ] ax
cmp [ rsp + 0x48 ] r14b
je r-xdata
call sub_140005e08
or ebx 0xffffffff
mov [ rax ] 0x2a
movsxd rax [ rcx + 0xd4 ]
cmp rbp rax
jb r-xdata
cmp ebp r9d
jl r-xdata
mov eax ebx
jmp r-xdata
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp [ rsi + 0x1 ] r14b
je r-xdata
mov ecx [ rcx + 0x4 ]
mov eax r14d
test rdi rdi
setne al
lea edx [ rbx + 0x8 ]
mov r8 rsi
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
mov rcx [ rsp + 0x30 ]
test eax eax
jne r-xdata
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
mov rdi [ rsp + 0x78 ]
add rsp 0x50
pop r14
retn
mov ebx [ rcx + 0xd4 ]
jmp r-xdata
sub_140009568
mov [ rsp + 0x8 ] cx
sub rsp 0x38
mov rcx [ rw-data ]
cmp rcx 0xfffffffffffffffe
jne r-xdata
cmp rcx 0xffffffffffffffff
jne r-xdata
call sub_14000979c
mov rcx [ rw-data ]
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x48 ]
lea rdx [ rsp + 0x40 ]
mov r8d 0x1
call [ WriteConsoleW@IAT ]
test eax eax
je r-xdata
mov eax 0xffff
jmp r-xdata
movzx eax [ rsp + 0x40 ]
add rsp 0x38
retn
sub_1400095c4
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r14
sub rsp 0x20
movsxd rbx ecx
cmp ebx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_140005d98
and [ rax ] 0x0
call sub_140005e08
mov [ rax ] 0x9
jmp r-xdata
call sub_140005d98
and [ rax ] 0x0
call sub_140005e08
mov [ rax ] 0x9
call sub_140005d3c
cmp ebx [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rdi rbx
mov rsi rbx
sar rsi 0x5
lea r14 [ rw-data ]
and edi 0x1f
imul rdi rdi 0x58
mov rax [ r14 + rsi * 8 ]
movsx ecx [ rax + rdi + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx ebx
call sub_140009108
nop
mov rax [ r14 + rsi * 8 ]
test [ rax + rdi + 0x8 ] 0x1
je r-xdata
call sub_140005e08
mov [ rax ] 0x9
or edi 0xffffffff
mov ecx ebx
call sub_140009688
mov edi eax
jmp r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r14
pop rdi
pop rsi
retn
mov ecx ebx
call sub_1400092c0
mov eax edi
jmp r-xdata
sub_140009688
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rdi ecx
mov ecx edi
call sub_14000924c
cmp rax 0xffffffffffffffff
je r-xdata
xor ebx ebx
mov rax [ rw-data ]
mov ecx 0x2
cmp edi 0x1
jne r-xdata
xor eax eax
mov ecx ebx
call sub_140005db8
or eax 0xffffffff
jmp r-xdata
cmp edi ecx
jne r-xdata
test [ rax + 0xb8 ] dil
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx edi
call sub_14000924c
mov rcx rax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ rax + 0x60 ] 0x1
je r-xdata
call sub_14000924c
mov ecx 0x1
mov rbx rax
call sub_14000924c
cmp rax rbx
je r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_1400091a0
mov rdx rdi
mov rcx rdi
sar rcx 0x5
and edx 0x1f
lea r8 [ rw-data ]
mov rcx [ r8 + rcx * 8 ]
imul rdx rdx 0x58
mov [ rcx + rdx + 0x8 ] 0x0
test ebx ebx
je r-xdata
sub_140009744
push rbx
sub rsp 0x20
test [ rcx + 0x18 ] 0x83
mov rbx rcx
je r-xdata
add rsp 0x20
pop rbx
retn
test [ rcx + 0x18 ] 0x8
je r-xdata
mov rcx [ rcx + 0x10 ]
call sub_140004ce8
and [ rbx + 0x18 ] 0xfffffbf7
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x8 ] eax
sub_1400029f0
cmp rcx [ rw-data ]
jne r-xdata
jmp sub_140002a5c
rol rcx 0x10
test cx 0xffff
jne r-xdata
ror rcx 0x10
retn
_start
sub rsp 0x28
call sub_14000463c
add rsp 0x28
jmp sub_140002b44
sub_140002cd0
push rbx
sub rsp 0x20
cmp [ rw-data ] 0x1
mov ebx ecx
jne r-xdata
mov ecx ebx
call sub_140003c48
mov ecx 0xff
add rsp 0x20
pop rbx
jmp sub_140003840
call sub_140003bd4
sub_140002de8
mov rax [ rw-data ]
xor rax [ rw-data ]
je r-xdata
jmp [ TlsAlloc@IAT ]
jmp rax
sub_140002e04
mov rax [ rw-data ]
xor rax [ rw-data ]
je r-xdata
jmp [ TlsFree@IAT ]
jmp rax
sub_140002e20
mov rax [ rw-data ]
xor rax [ rw-data ]
je r-xdata
jmp [ TlsGetValue@IAT ]
jmp rax
sub_140002e3c
mov rax [ rw-data ]
xor rax [ rw-data ]
je r-xdata
jmp [ TlsSetValue@IAT ]
jmp rax
sub_140002e58
sub rsp 0x98
lea rcx [ rsp + 0x20 ]
call [ GetStartupInfoW@IAT ]
test [ rsp + 0x5c ] 0x1
movzx ecx [ rsp + 0x60 ]
mov eax 0xa
cmovne eax ecx
add rsp 0x98
retn
SetUnhandledExceptionFilter
jmp [ SetUnhandledExceptionFilter@IAT ]
sub_14000325c
push rbx
sub rsp 0x20
mov ebx ecx
call [ GetCurrentProcess@IAT ]
mov edx ebx
mov rcx rax
add rsp 0x20
pop rbx
jmp [ TerminateProcess@IAT ]
sub_14000327c
push rbx
sub rsp 0x20
mov rbx rcx
xor ecx ecx
call [ SetUnhandledExceptionFilter@IAT ]
mov rcx rbx
add rsp 0x20
pop rbx
jmp [ UnhandledExceptionFilter@IAT ]
sub_1400032d4
sub rsp 0x28
lea rcx [ sub_14000329c ]
call SetUnhandledExceptionFilter
xor eax eax
add rsp 0x28
retn
sub_1400037d8
sub rsp 0x28
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
add rsp 0x28
jmp sub_140004b2c
call sub_140002e04
or [ rw-data ] 0xffffffff
sub_140003840
push rbx
sub rsp 0x20
mov ebx ecx
call sub_1400037fc
mov ecx ebx
call [ ExitProcess@IAT ]
sub_140003858
push rbx
sub rsp 0x20
mov ebx ecx
call sub_140003bd4
mov ecx ebx
call sub_140003c48
xor r8d r8d
mov ecx 0xff
lea edx [ r8 + 0x1 ]
call sub_140003a30
int3
sub_140003880
mov edx 0x1
xor ecx ecx
mov r8d edx
jmp sub_140003a30
sub_140003890
xor edx edx
xor ecx ecx
lea r8d [ rdx + 0x1 ]
jmp sub_140003a30
sub_140003950
xor r8d r8d
lea edx [ r8 + 0x1 ]
jmp sub_140003a30
sub_140003a18
mov ecx 0x8
jmp sub_140004ae8
sub_140003a24
mov ecx 0x8
jmp sub_140004cd0
sub_140003bc8
xor r8d r8d
xor edx edx
jmp sub_140003a30
sub_140003eb8
sub rsp 0x28
call [ GetProcessHeap@IAT ]
xor ecx ecx
test rax rax
mov [ rw-data ] rax
setne cl
mov eax ecx
add rsp 0x28
retn
sub_1400045f4
mov [ rw-data ] ecx
retn
sub_140004aa8
sub rsp 0x28
call sub_1400035ec
mov rcx [ rax + 0xd0 ]
test rcx rcx
je r-xdata
call sub_140006c6c
call rcx
jmp r-xdata
sub_140004ac8
sub rsp 0x28
lea rcx [ sub_140004aa8 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
add rsp 0x28
retn
sub_140004cd0
movsxd rcx ecx
lea rax [ rw-data ]
add rcx rcx
mov rcx [ rax + rcx * 8 ]
jmp [ LeaveCriticalSection@IAT ]
sub_14000524c
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
add rsp 0x28
retn
mov ecx 0xfffffffd
call sub_1400056cc
mov [ rw-data ] 0x1
sub_140005ccc
mov [ rw-data ] rcx
retn
sub_140005d3c
sub rsp 0x38
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_140005cd4
add rsp 0x38
retn
sub_1400060a0
sub rsp 0x28
call sub_140005f94
neg rax
sbb eax eax
neg eax
dec eax
add rsp 0x28
retn
sub_140006128
mov [ rw-data ] rcx
retn
sub_140006130
mov [ rw-data ] rcx
retn
sub_140006138
mov [ rw-data ] rcx
retn
sub_140006140
mov rcx [ rw-data ]
jmp [ DecodePointer@IAT ]
sub_140006150
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
retn
sub_14000654c
mov rax rcx
movzx edx [ rax ]
add rax 0x2
test dx dx
jne r-xdata
sub rax rcx
sar rax 0x1
dec rax
retn
sub_1400068a4
sub rsp 0x28
mov r8 [ r9 + 0x38 ]
mov rcx rdx
mov rdx r9
call sub_1400068c4
mov eax 0x1
add rsp 0x28
retn
sub_140006940
sub rsp 0x4d8
xor r8 r8
xor r9 r9
mov [ rsp + 0x20 ] rsp
mov [ rsp + 0x28 ] r8
call RtlUnwindEx
add rsp 0x4d8
retn
sub_140006970
mov [ rsp + 0x8 ] rcx
mov [ rsp + 0x18 ] rdx
mov [ rsp + 0x10 ] r8d
mov r9 0x19930520
jmp sub_140006990
sub_140006990
retn
sub_1400069a0
retn
sub_140006a3c
sub rsp 0x28
call sub_14000830c
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
call sub_140004ce8
and [ rw-data ] 0x0
add rsp 0x28
retn
call sub_140008400
sub_140006b58
cmp ecx 0x14
jge r-xdata
lea rcx [ rdx + 0x30 ]
jmp [ LeaveCriticalSection@IAT ]
btr [ rdx + 0x18 ] 0xf
add ecx 0x10
jmp sub_140004cd0
sub_140006bf4
mov edx ecx
mov r9d 0x4
xor r8d r8d
xor ecx ecx
jmp sub_140006b78
sub_140008008
mov ecx 0x2
jmp sub_140003858
sub_1400081bc
sub rsp 0x28
test rcx rcx
jne r-xdata
mov eax [ rcx + 0x1c ]
call sub_140005e08
mov [ rax ] 0x16
call sub_140005d3c
or eax 0xffffffff
jmp r-xdata
add rsp 0x28
retn
sub_14000830c
mov ecx 0x1
jmp sub_140008318
sub_1400092c0
movsxd rdx ecx
lea rcx [ rw-data ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rax [ rcx + rax * 8 ]
lea rcx [ rdx + 0x10 ]
add rcx rax
jmp [ LeaveCriticalSection@IAT ]
sub_140009560
xor r9d r9d
jmp sub_14000940c
sub_14000977c
sub rsp 0x28
mov rcx [ rw-data ]
lea rax [ rcx + 0x2 ]
cmp rax 0x1
jbe r-xdata
add rsp 0x28
retn
call [ CloseHandle@IAT ]
sub_14000979c
sub rsp 0x48
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
mov r8d 0x3
lea rcx [ r--data ]
xor r9d r9d
mov edx 0x40000000
mov [ rsp + 0x20 ] r8d
call [ CreateFileW@IAT ]
mov [ rw-data ] rax
add rsp 0x48
retn
IsProcessorFeaturePresent
jmp [ IsProcessorFeaturePresent@IAT ]
RtlUnwindEx
jmp [ RtlUnwindEx@IAT ]
sub_1400097f0
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
mov rdx rcx
mov ecx [ rax ]
call sub_1400032ec
nop
add rsp 0x20
pop rbp
retn
sub_14000980e
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
add rsp 0x20
pop rbp
jmp sub_140004cd0
sub_140009827
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
add rsp 0x20
pop rbp
jmp sub_140004cd0
sub_140009840
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x80 ] 0x0
je r-xdata
add rsp 0x20
pop rbp
retn
mov ecx 0x8
call sub_140004cd0
nop
sub_140009864
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xb
call sub_140004cd0
nop
add rsp 0x20
pop rbp
retn
sub_14000987f
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rw-data ]
add rsp 0x20
pop rbp
jmp [ LeaveCriticalSection@IAT ]
sub_14000989c
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
add rsp 0x20
pop rbp
jmp sub_140004cd0
sub_1400098b5
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
add rsp 0x20
pop rbp
jmp sub_140004cd0
sub_1400098d0
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
xor ecx ecx
cmp [ rax ] 0xc0000005
sete cl
mov eax ecx
add rsp 0x20
pop rbp
retn
sub_1400098f0
push rbp
sub rsp 0x20
mov rbp rdx
add rsp 0x20
pop rbp
jmp sub_140003a24
sub_140009904
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x60 ] 0x0
je r-xdata
add rsp 0x20
pop rbp
retn
xor ecx ecx
call sub_140004cd0
nop
sub_140009922
push rbp
sub rsp 0x20
mov rbp rdx
movsxd rcx [ rbp + 0x20 ]
mov rax rcx
mov rdx [ rw-data ]
mov rdx [ rdx + rcx * 8 ]
call sub_140006b58
nop
add rsp 0x20
pop rbp
retn
sub_14000994a
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
add rsp 0x20
pop rbp
jmp sub_140004cd0
sub_140009963
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
add rsp 0x20
pop rbp
jmp sub_140004cd0
sub_14000997c
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx [ rbp + 0x40 ]
add rsp 0x20
pop rbp
jmp sub_1400092c0
sub_140009993
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx [ rbp + 0x50 ]
add rsp 0x20
pop rbp
jmp sub_1400092c0
sub_1400099aa
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x30 ]
add rsp 0x20
pop rbp
jmp sub_140006b08
sub_1400099c2
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xa
add rsp 0x20
pop rbp
jmp sub_140004cd0
