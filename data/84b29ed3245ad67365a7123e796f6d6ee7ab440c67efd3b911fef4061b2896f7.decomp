sub_401000
cmp [ rw-data ] 0x0
push ebx
push esi
push edi
jne r-xdata
xor eax eax
mov ebx [ esp + 0x10 ]
mov esi [ malloc@IAT ]
mov edi 0x800
mov [ rw-data ] ebx
push edi
call esi
test eax eax
pop ecx
mov [ rw-data ] eax
je r-xdata
call sub_4015e2
cmp ebx 0x1
je r-xdata
push edi
call esi
test eax eax
pop ecx
mov [ rw-data ] eax
jne r-xdata
push rw-data
push eax
call sub_401566
push edi
call esi
add esp 0xc
mov [ rw-data ] eax
test eax eax
jne r-xdata
push [ rw-data ]
call [ free@IAT ]
jmp r-xdata
push rw-data
push eax
call sub_401566
pop ecx
pop ecx
push [ rw-data ]
mov esi [ free@IAT ]
call esi
push [ rw-data ]
call esi
pop ecx
pop ecx
or eax 0xffffffff
jmp r-xdata
pop edi
pop esi
pop ebx
retn
sub_4010a1
push ebp
mov ebp esp
sub esp 0x70
push edi
xor edi edi
cmp [ ebp + 0x8 ] edi
jne r-xdata
push ebx
push esi
push 0x80
push edi
push [ ebp + 0x8 ]
call memset
add esp 0xc
xor ecx ecx
or eax 0xffffffff
jmp r-xdata
movsx eax [ ecx + rw-data ]
mov esi [ ebp + 0xc ]
dec eax
mov edx eax
sar eax 0x3
and edx 0x7
movsx eax [ eax + esi ]
test [ edx * 4 + rw-data ] eax
setne al
mov [ ebp + ecx - 0x38 ] al
inc ecx
cmp ecx 0x38
jl r-xdata
movsx eax [ edi + rw-data ]
xor ecx ecx
pop edi
leave
retn
mov dl [ ebp + esi - 0x38 ]
mov [ ebp + ecx - 0x70 ] dl
inc ecx
inc eax
cmp ecx 0x38
jl r-xdata
lea esi [ eax - 0x1c ]
xor edx edx
cmp ecx 0x1c
setge dl
dec edx
mov esi eax
and edx 0xffffffe4
add edx 0x38
cmp eax edx
jl r-xdata
xor esi esi
inc esi
cmp esi 0x30
jl r-xdata
mov eax esi
push 0x6
cdq
pop ecx
idiv ecx
mov ecx [ ebp + 0x8 ]
push 0x6
pop ebx
add ecx eax
mov eax esi
cdq
idiv ebx
lea ecx [ ecx + edi * 8 ]
mov eax [ edx * 4 + rw-data ]
sar eax 0x2
or [ ecx ] al
movsx eax [ esi + rw-data ]
cmp [ ebp + eax - 0x71 ] 0x0
je r-xdata
inc edi
cmp edi 0x10
jl r-xdata
pop esi
xor eax eax
pop ebx
sub_40116e
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
or eax 0xffffffff
cmp [ ebp + 0xc ] 0x0
je r-xdata
push ebx
lea eax [ ebp - 0x8 ]
push edi
push eax
push [ rw-data ]
push [ ebp + 0xc ]
call sub_4013af
mov ebx [ ebp - 0x4 ]
mov edi [ ebp - 0x8 ]
push esi
push ebx
call sub_401479
add esi 0x8
xor edi eax
push esi
push edi
call sub_401479
add esi 0x8
xor ebx eax
push esi
push ebx
call sub_401479
add esi 0x8
xor edi eax
push esi
push edi
call sub_401479
add esi 0x8
xor ebx eax
push esi
push ebx
call sub_401479
add esi 0x8
xor edi eax
push esi
push edi
call sub_401479
add esi 0x8
xor ebx eax
push esi
push ebx
call sub_401479
add esp 0x44
add esi 0x8
xor edi eax
push esi
push edi
call sub_401479
add esi 0x8
xor ebx eax
push esi
push ebx
call sub_401479
add esi 0x8
xor edi eax
push esi
push edi
call sub_401479
add esi 0x8
xor ebx eax
push esi
push ebx
call sub_401479
add esi 0x8
xor edi eax
push esi
push edi
call sub_401479
add esi 0x8
xor ebx eax
push esi
push ebx
call sub_401479
add esi 0x8
xor edi eax
push esi
push edi
call sub_401479
xor ebx eax
add esi 0x8
push esi
push ebx
call sub_401479
add esp 0x40
add esi 0x8
xor edi eax
push esi
push edi
call sub_401479
push [ ebp + 0xc ]
xor eax ebx
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x8 ]
push [ rw-data ]
mov [ ebp - 0x4 ] edi
push eax
call sub_4013af
add esp 0x14
xor eax eax
pop edi
pop ebx
jmp r-xdata
pop esi
leave
retn
sub_40128d
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
or eax 0xffffffff
cmp [ ebp + 0xc ] 0x0
je r-xdata
push ebx
lea eax [ ebp - 0x8 ]
push edi
push eax
push [ rw-data ]
push [ ebp + 0xc ]
call sub_4013af
mov ebx [ ebp - 0x4 ]
mov edi [ ebp - 0x8 ]
add esi 0x78
push esi
push ebx
call sub_401479
sub esi 0x8
xor edi eax
push esi
push edi
call sub_401479
sub esi 0x8
xor ebx eax
push esi
push ebx
call sub_401479
sub esi 0x8
xor edi eax
push esi
push edi
call sub_401479
sub esi 0x8
xor ebx eax
push esi
push ebx
call sub_401479
sub esi 0x8
xor edi eax
push esi
push edi
call sub_401479
sub esi 0x8
xor ebx eax
push esi
push ebx
call sub_401479
add esp 0x44
sub esi 0x8
xor edi eax
push esi
push edi
call sub_401479
sub esi 0x8
xor ebx eax
push esi
push ebx
call sub_401479
sub esi 0x8
xor edi eax
push esi
push edi
call sub_401479
sub esi 0x8
xor ebx eax
push esi
push ebx
call sub_401479
sub esi 0x8
xor edi eax
push esi
push edi
call sub_401479
sub esi 0x8
xor ebx eax
push esi
push ebx
call sub_401479
sub esi 0x8
xor edi eax
push esi
push edi
call sub_401479
xor ebx eax
sub esi 0x8
push esi
push ebx
call sub_401479
add esp 0x40
add esi 0xfffffff8
xor edi eax
push esi
push edi
call sub_401479
push [ ebp + 0xc ]
xor eax ebx
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x8 ]
push [ rw-data ]
mov [ ebp - 0x4 ] edi
push eax
call sub_4013af
add esp 0x14
xor eax eax
pop edi
pop ebx
jmp r-xdata
pop esi
leave
retn
sub_4013af
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0xc ]
test ebx ebx
jne r-xdata
push esi
push edi
mov edi [ ebp + 0x10 ]
push 0x8
push 0x0
push edi
call memset
mov eax [ ebp + 0x8 ]
add esp 0xc
and [ ebp + 0x10 ] 0x0
mov [ ebp + 0x8 ] eax
push 0x8
push [ ebp + 0x8 ]
push [ ebp + 0x10 ]
call memcpy
add esp 0xc
jmp r-xdata
mov eax [ ebp + 0x8 ]
movsx eax [ eax ]
mov ecx eax
and eax 0xf
add eax [ ebp + 0x10 ]
sar ecx 0x4
and ecx 0xf
add ecx [ ebp + 0x10 ]
lea esi [ ebx + eax * 8 + 0x80 ]
add [ ebp + 0x10 ] 0x20
mov al [ ebx + ecx * 8 ]
or al [ esi ]
lea ecx [ ebx + ecx * 8 ]
or [ edi ] al
mov dl [ ecx + 0x1 ]
or dl [ esi + 0x1 ]
inc esi
inc ecx
lea eax [ edi + 0x1 ]
or [ eax ] dl
mov dl [ ecx + 0x1 ]
or dl [ esi + 0x1 ]
inc esi
inc ecx
inc eax
or [ eax ] dl
mov dl [ ecx + 0x1 ]
or dl [ esi + 0x1 ]
inc esi
inc ecx
inc eax
or [ eax ] dl
mov dl [ ecx + 0x1 ]
or dl [ esi + 0x1 ]
inc esi
inc ecx
inc eax
or [ eax ] dl
mov dl [ ecx + 0x1 ]
or dl [ esi + 0x1 ]
inc esi
inc ecx
inc eax
or [ eax ] dl
mov dl [ ecx + 0x1 ]
or dl [ esi + 0x1 ]
inc esi
inc ecx
inc eax
or [ eax ] dl
mov dl [ esi + 0x1 ]
or dl [ ecx + 0x1 ]
inc eax
or [ eax ] dl
inc [ ebp + 0x8 ]
cmp [ ebp + 0x10 ] 0x100
jl r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_401479
push ebx
push esi
mov esi [ esp + 0x10 ]
push edi
mov edi [ esp + 0x10 ]
mov eax [ rw-data ]
mov ecx edi
mov edx edi
and ecx 0x1f
add esi 0x7
shr edx 0x1f
shl ecx 0x1
or ecx edx
mov dl [ esi ]
and edx 0x3f
add eax 0x700
xor ecx edx
mov dl [ esi - 0x1 ]
dec esi
and edx 0x3f
mov ecx [ eax + ecx * 4 ]
sub eax 0x100
shr edi 0x3
mov ebx edi
and ebx 0x3f
xor edx ebx
sar edi 0x4
or ecx [ eax + edx * 4 ]
mov dl [ esi - 0x1 ]
dec esi
mov ebx edi
and edx 0x3f
and ebx 0x3f
sub eax 0x100
xor edx ebx
sar edi 0x4
or ecx [ eax + edx * 4 ]
mov dl [ esi - 0x1 ]
dec esi
mov ebx edi
and edx 0x3f
and ebx 0x3f
sub eax 0x100
xor edx ebx
sar edi 0x4
or ecx [ eax + edx * 4 ]
mov dl [ esi - 0x1 ]
dec esi
mov ebx edi
and edx 0x3f
and ebx 0x3f
sub eax 0x100
xor edx ebx
sar edi 0x4
or ecx [ eax + edx * 4 ]
mov dl [ esi - 0x1 ]
dec esi
mov ebx edi
and edx 0x3f
and ebx 0x3f
sub eax 0x100
xor edx ebx
sar edi 0x4
or ecx [ eax + edx * 4 ]
mov dl [ esi - 0x1 ]
dec esi
mov ebx edi
and edx 0x3f
and ebx 0x3f
sub eax 0x100
xor edx ebx
sar edi 0x4
or ecx [ eax + edx * 4 ]
mov edx [ esp + 0x10 ]
and edx 0x1
and edi 0x3f
shl edx 0x5
or edi edx
mov dl [ esi - 0x1 ]
and edx 0x3f
xor edi edx
mov eax [ eax + edi * 4 - 0x100 ]
pop edi
pop esi
or eax ecx
pop ebx
retn
sub_401566
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
xor edi edi
push 0x800
push edi
push [ ebp + 0x8 ]
call memset
add esp 0xc
mov [ ebp - 0x4 ] edi
inc ecx
cmp ecx 0x40
jl r-xdata
and eax 0x3
test [ eax * 4 + rw-data ] esi
je r-xdata
mov eax [ ebp + 0xc ]
movsx eax [ ecx + eax ]
dec eax
mov edx eax
sar edx 0x2
cmp edx [ ebp - 0x4 ]
jne r-xdata
inc esi
cmp esi 0x10
jl r-xdata
mov ebx [ ebp + 0x8 ]
mov edx ecx
sar edx 0x3
add ebx edx
mov edx ecx
lea eax [ edi + esi ]
and edx 0x7
mov dl [ edx * 4 + rw-data ]
lea eax [ ebx + eax * 8 ]
or [ eax ] dl
xor ecx ecx
inc [ ebp - 0x4 ]
add edi 0x10
cmp edi 0x100
jl r-xdata
xor esi esi
pop edi
pop esi
pop ebx
leave
retn
sub_4015e2
push ebp
mov ebp esp
sub esp 0x2c
xor ecx ecx
mov [ ebp + ecx - 0x2c ] al
inc eax
cmp eax 0x20
jl r-xdata
xor eax eax
and [ ebp - 0x8 ] 0x0
lea eax [ ebp - 0x2c ]
push ebx
push esi
mov [ ebp - 0xc ] eax
push edi
xor eax eax
movsx edx [ eax + rw-data ]
dec edx
cmp edx ecx
je r-xdata
jmp r-xdata
inc esi
cmp esi 0x4
jl r-xdata
mov eax [ ebp - 0xc ]
push 0x1f
pop ecx
mov al [ eax + esi ]
push 0x1
sub ecx eax
pop eax
shl eax cl
or ebx eax
inc ecx
cmp ecx 0x20
jl r-xdata
push 0x8
mov ecx esi
pop eax
sar eax cl
test edi eax
je r-xdata
mov eax [ rw-data ]
mov ecx [ ebp - 0x4 ]
add [ ebp - 0x4 ] 0x4
inc edx
cmp edx 0x40
mov [ ecx + eax ] ebx
jl r-xdata
mov eax edx
mov ecx edx
sar eax 0x1
and ecx 0x1
and eax 0xf
shl ecx 0x4
or eax ecx
mov ecx edx
and ecx 0x20
xor ebx ebx
or eax ecx
mov ecx [ ebp - 0x8 ]
xor esi esi
movsx edi [ ecx + eax + rw-data ]
mov eax [ ebp - 0x4 ]
add [ ebp - 0x8 ] 0x40
add [ ebp - 0xc ] 0x4
cmp eax 0x800
jl r-xdata
xor edx edx
mov [ ebp - 0x4 ] eax
pop edi
pop esi
pop ebx
leave
retn
sub_401694
push ebp
mov ebp esp
sub esp 0x88
push ebx
push esi
push edi
push 0x0
call sub_401000
push [ ebp + 0x18 ]
lea eax [ ebp - 0x88 ]
push eax
call sub_4010a1
mov ecx [ ebp + 0x1c ]
add esp 0xc
test ecx ecx
jne r-xdata
cmp ecx 0x1
jne r-xdata
mov eax [ ebp + 0xc ]
push 0x8
pop ebx
cdq
mov esi ebx
idiv esi
test edx edx
je r-xdata
push rw-data
call [ OutputDebugStringA@IAT ]
push 0x1
call [ exit@IAT ]
mov eax [ ebp + 0x8 ]
mov edx [ ebp + 0xc ]
movsx ebx [ eax + edx - 0x1 ]
mov eax ecx
push 0x8
shl eax 0x3
mov edx eax
mov eax [ ebp + 0xc ]
sub eax edx
pop esi
add eax 0x7
cdq
idiv esi
mov esi eax
lea eax [ ebx - 0x9 ]
imul eax ecx
mov edi esi
mov ecx [ ebp + 0x14 ]
shl edi 0x3
lea eax [ eax + edi + 0x1 ]
push eax
push 0x0
push [ ebp + 0x10 ]
mov [ ecx ] eax
call memset
and [ ebp + 0xc ] 0x0
add esp 0xc
test esi esi
jle r-xdata
mov ebx edx
jmp r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
mov ecx [ ebp + 0x10 ]
mov eax [ ebp + 0x8 ]
sub eax ecx
mov [ ebp + 0x18 ] ecx
mov [ ebp + 0x8 ] eax
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebp + 0x10 ]
mov [ edi + eax ] bl
push 0x8
pop ecx
lea ecx [ esi - 0x1 ]
cmp [ ebp + 0xc ] ecx
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x88 ]
push eax
jne r-xdata
mov ecx [ ebp + 0x8 ]
mov edx [ ebp + 0x18 ]
add ecx edx
mov cl [ ecx + eax ]
mov [ ebp + eax - 0x8 ] cl
inc eax
jmp r-xdata
mov ecx ebx
jmp r-xdata
call sub_40128d
call sub_40116e
jmp r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
cmp eax ecx
jge r-xdata
push 0x8
pop ecx
lea ecx [ esi - 0x1 ]
cmp [ ebp + 0xc ] ecx
jne r-xdata
pop ecx
xor eax eax
pop ecx
inc [ ebp + 0xc ]
add [ ebp + 0x18 ] 0x8
cmp [ ebp + 0xc ] esi
jl r-xdata
mov edx [ ebp + 0x18 ]
mov cl [ ebp + eax - 0x8 ]
mov [ edx + eax ] cl
inc eax
jmp r-xdata
mov ecx ebx
jmp r-xdata
push 0x8
lea eax [ ebp - 0x8 ]
push 0x0
push eax
call memset
add esp 0xc
xor eax eax
cmp [ ebp + 0x1c ] 0x1
jne r-xdata
cmp eax ecx
jge r-xdata
sub_4017f2
push ebp
mov ebp esp
sub esp 0x14
push ebx
push rw-data
call [ LoadLibraryA@IAT ]
test eax eax
mov [ ebp - 0x10 ] eax
jne r-xdata
push esi
push edi
mov edi [ VirtualAlloc@IAT ]
mov ebx 0x1000
mov eax 0x850
push 0x40
push ebx
push eax
push 0x0
mov [ ebp - 0x4 ] eax
call edi
push [ ebp - 0x4 ]
mov esi rw-data
mov [ ebp - 0x8 ] eax
push esi
push eax
call memcpy
push 0x1
lea eax [ ebp - 0x4 ]
push rw-data
push eax
push [ ebp - 0x8 ]
push [ ebp - 0x4 ]
push esi
call sub_401694
add esp 0x24
lea eax [ ebp - 0x14 ]
push eax
push 0x20
push [ ebp - 0x4 ]
push [ ebp - 0x8 ]
call [ VirtualProtect@IAT ]
mov esi 0xa000
push 0x40
push ebx
push esi
push 0x0
mov [ ebp - 0x4 ] esi
call edi
push 0x40
push ebx
push [ ebp - 0x4 ]
xor ebx ebx
mov [ ebp - 0xc ] eax
push ebx
call edi
mov edi eax
push esi
push ebx
push edi
call memset
push esi
push rw-data
push edi
call memcpy
push 0x1
lea eax [ ebp - 0x4 ]
push rw-data
push eax
push [ ebp - 0xc ]
mov [ ebp - 0x4 ] esi
push esi
push edi
call sub_401694
push ebx
push ebx
push [ ebp - 0xc ]
push [ ebp - 0x10 ]
call [ ebp - 0x8 ]
add esp 0x40
cmp eax ebx
pop edi
pop esi
je r-xdata
call [ GetLastError@IAT ]
push eax
push rw-data
call [ printf@IAT ]
jmp r-xdata
xor eax eax
pop ebx
leave
retn
push rw-data
push eax
push ebx
push [ ebp - 0x10 ]
call [ ebp - 0x8 ]
add esp 0x10
cmp eax ebx
je r-xdata
pop ecx
pop ecx
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call eax
_start
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
and [ ebp - 0x4 ] 0x0
push 0x1
call [ __set_app_type@IAT ]
pop ecx
or [ rw-data ] 0xffffffff
or [ rw-data ] 0xffffffff
call [ __p__fmode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
call [ __p__commode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
mov eax [ _adjust_fdiv@IAT ]
mov eax [ eax ]
mov [ rw-data ] eax
call sub_401a3d
cmp [ rw-data ] 0x0
jne r-xdata
call sub_401a28
push rw-data
push rw-data
call _initterm
mov eax [ rw-data ]
mov [ ebp - 0x28 ] eax
lea eax [ ebp - 0x28 ]
push eax
push [ rw-data ]
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x2c ]
push eax
lea eax [ ebp - 0x1c ]
push eax
call [ __getmainargs@IAT ]
push rw-data
push rw-data
call _initterm
call [ __p___initenv@IAT ]
mov ecx [ ebp - 0x20 ]
mov [ eax ] ecx
push [ ebp - 0x20 ]
push [ ebp - 0x2c ]
push [ ebp - 0x1c ]
call sub_4017f2
add esp 0x30
mov [ ebp - 0x24 ] eax
push eax
call [ exit@IAT ]
push sub_401a3a
call [ __setusermatherr@IAT ]
pop ecx
memset
jmp [ memset@IAT ]
memcpy
jmp [ memcpy@IAT ]
_XcptFilter
jmp [ _XcptFilter@IAT ]
_initterm
jmp [ _initterm@IAT ]
sub_401a28
push 0x30000
push 0x10000
call _controlfp
pop ecx
pop ecx
retn
sub_401a3a
xor eax eax
retn
sub_401a3d
retn
_except_handler3
jmp [ _except_handler3@IAT ]
_controlfp
jmp [ _controlfp@IAT ]
